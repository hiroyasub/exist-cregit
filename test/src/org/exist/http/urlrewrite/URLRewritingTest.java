begin_unit|revision:1.0.0;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * eXist Open Source Native XML Database  * Copyright (C) 2001-2018 The eXist Project  * http://exist-db.org  *  * This program is free software; you can redistribute it and/or  * modify it under the terms of the GNU Lesser General Public License  * as published by the Free Software Foundation; either version 2  * of the License, or (at your option) any later version.  *  * This program is distributed in the hope that it will be useful,  * but WITHOUT ANY WARRANTY; without even the implied warranty of  * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the  * GNU Lesser General Public License for more details.  *  * You should have received a copy of the GNU Lesser General Public  * License along with this library; if not, write to the Free Software  * Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA  02110-1301  USA  */
end_comment

begin_package
package|package
name|org
operator|.
name|exist
operator|.
name|http
operator|.
name|urlrewrite
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|http
operator|.
name|HttpResponse
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|http
operator|.
name|HttpStatus
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|http
operator|.
name|client
operator|.
name|fluent
operator|.
name|Executor
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|http
operator|.
name|client
operator|.
name|fluent
operator|.
name|Request
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|http
operator|.
name|entity
operator|.
name|ContentType
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|TestUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|test
operator|.
name|ExistWebServer
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|util
operator|.
name|io
operator|.
name|FastByteArrayOutputStream
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|xmldb
operator|.
name|XmldbURI
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|AfterClass
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|BeforeClass
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|ClassRule
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import static
name|java
operator|.
name|nio
operator|.
name|charset
operator|.
name|StandardCharsets
operator|.
name|UTF_8
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|exist
operator|.
name|http
operator|.
name|urlrewrite
operator|.
name|XQueryURLRewrite
operator|.
name|XQUERY_CONTROLLER_FILENAME
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertEquals
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertTrue
import|;
end_import

begin_class
specifier|public
class|class
name|URLRewritingTest
block|{
specifier|private
specifier|static
specifier|final
name|XmldbURI
name|TEST_COLLECTION_NAME
init|=
name|XmldbURI
operator|.
name|create
argument_list|(
literal|"controller-test"
argument_list|)
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|XmldbURI
name|TEST_COLLECTION
init|=
name|XmldbURI
operator|.
name|create
argument_list|(
literal|"/db/apps"
argument_list|)
operator|.
name|append
argument_list|(
name|TEST_COLLECTION_NAME
argument_list|)
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|String
name|TEST_CONTROLLER
init|=
literal|"xquery version \"3.1\";\n<controller>{fn:current-dateTime()}</controller>"
decl_stmt|;
specifier|private
specifier|static
name|Executor
name|executor
init|=
literal|null
decl_stmt|;
annotation|@
name|ClassRule
specifier|public
specifier|static
specifier|final
name|ExistWebServer
name|existWebServer
init|=
operator|new
name|ExistWebServer
argument_list|(
literal|true
argument_list|,
literal|false
argument_list|,
literal|true
argument_list|,
literal|true
argument_list|,
literal|false
argument_list|)
decl_stmt|;
annotation|@
name|Test
specifier|public
name|void
name|findsParentController
parameter_list|()
throws|throws
name|IOException
block|{
specifier|final
name|XmldbURI
name|nestedCollectionName
init|=
name|XmldbURI
operator|.
name|create
argument_list|(
literal|"nested"
argument_list|)
decl_stmt|;
specifier|final
name|XmldbURI
name|docName
init|=
name|XmldbURI
operator|.
name|create
argument_list|(
literal|"test.xml"
argument_list|)
decl_stmt|;
specifier|final
name|String
name|testDocument
init|=
literal|"<hello>world</hello>"
decl_stmt|;
specifier|final
name|String
name|storeDocUri
init|=
name|getRestUri
argument_list|()
operator|+
name|TEST_COLLECTION
operator|.
name|append
argument_list|(
name|nestedCollectionName
argument_list|)
operator|.
name|append
argument_list|(
name|docName
argument_list|)
decl_stmt|;
name|HttpResponse
name|response
init|=
name|executor
operator|.
name|execute
argument_list|(
name|Request
operator|.
name|Put
argument_list|(
name|storeDocUri
argument_list|)
operator|.
name|bodyString
argument_list|(
name|testDocument
argument_list|,
name|ContentType
operator|.
name|APPLICATION_XML
argument_list|)
argument_list|)
operator|.
name|returnResponse
argument_list|()
decl_stmt|;
name|assertEquals
argument_list|(
name|HttpStatus
operator|.
name|SC_CREATED
argument_list|,
name|response
operator|.
name|getStatusLine
argument_list|()
operator|.
name|getStatusCode
argument_list|()
argument_list|)
expr_stmt|;
specifier|final
name|String
name|retrieveDocUri
init|=
name|getAppsUri
argument_list|()
operator|+
literal|"/"
operator|+
name|TEST_COLLECTION_NAME
operator|.
name|append
argument_list|(
name|nestedCollectionName
argument_list|)
operator|.
name|append
argument_list|(
name|docName
argument_list|)
decl_stmt|;
name|response
operator|=
name|executor
operator|.
name|execute
argument_list|(
name|Request
operator|.
name|Get
argument_list|(
name|retrieveDocUri
argument_list|)
argument_list|)
operator|.
name|returnResponse
argument_list|()
expr_stmt|;
name|assertEquals
argument_list|(
name|HttpStatus
operator|.
name|SC_OK
argument_list|,
name|response
operator|.
name|getStatusLine
argument_list|()
operator|.
name|getStatusCode
argument_list|()
argument_list|)
expr_stmt|;
specifier|final
name|String
name|responseBody
decl_stmt|;
try|try
init|(
specifier|final
name|FastByteArrayOutputStream
name|baos
init|=
operator|new
name|FastByteArrayOutputStream
argument_list|(
operator|(
name|int
operator|)
name|response
operator|.
name|getEntity
argument_list|()
operator|.
name|getContentLength
argument_list|()
argument_list|)
init|)
block|{
name|response
operator|.
name|getEntity
argument_list|()
operator|.
name|writeTo
argument_list|(
name|baos
argument_list|)
expr_stmt|;
name|responseBody
operator|=
name|baos
operator|.
name|toString
argument_list|(
name|UTF_8
argument_list|)
expr_stmt|;
block|}
name|assertTrue
argument_list|(
name|responseBody
operator|.
name|matches
argument_list|(
literal|"<controller>.+</controller>"
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|BeforeClass
specifier|public
specifier|static
name|void
name|setup
parameter_list|()
throws|throws
name|IOException
block|{
name|executor
operator|=
name|Executor
operator|.
name|newInstance
argument_list|()
operator|.
name|auth
argument_list|(
name|TestUtils
operator|.
name|ADMIN_DB_USER
argument_list|,
name|TestUtils
operator|.
name|ADMIN_DB_PWD
argument_list|)
operator|.
name|authPreemptive
argument_list|(
literal|"localhost"
argument_list|)
expr_stmt|;
specifier|final
name|HttpResponse
name|response
init|=
name|executor
operator|.
name|execute
argument_list|(
name|Request
operator|.
name|Put
argument_list|(
name|getRestUri
argument_list|()
operator|+
name|TEST_COLLECTION
operator|+
literal|"/"
operator|+
name|XQUERY_CONTROLLER_FILENAME
argument_list|)
operator|.
name|bodyString
argument_list|(
name|TEST_CONTROLLER
argument_list|,
name|ContentType
operator|.
name|create
argument_list|(
literal|"application/xquery"
argument_list|)
argument_list|)
argument_list|)
operator|.
name|returnResponse
argument_list|()
decl_stmt|;
name|assertEquals
argument_list|(
name|HttpStatus
operator|.
name|SC_CREATED
argument_list|,
name|response
operator|.
name|getStatusLine
argument_list|()
operator|.
name|getStatusCode
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|AfterClass
specifier|public
specifier|static
name|void
name|cleanup
parameter_list|()
throws|throws
name|IOException
block|{
specifier|final
name|HttpResponse
name|response
init|=
name|executor
operator|.
name|execute
argument_list|(
name|Request
operator|.
name|Delete
argument_list|(
name|getRestUri
argument_list|()
operator|+
name|TEST_COLLECTION
argument_list|)
argument_list|)
operator|.
name|returnResponse
argument_list|()
decl_stmt|;
name|assertEquals
argument_list|(
name|HttpStatus
operator|.
name|SC_OK
argument_list|,
name|response
operator|.
name|getStatusLine
argument_list|()
operator|.
name|getStatusCode
argument_list|()
argument_list|)
expr_stmt|;
block|}
specifier|private
specifier|static
name|String
name|getServerUri
parameter_list|()
block|{
return|return
literal|"http://localhost:"
operator|+
name|existWebServer
operator|.
name|getPort
argument_list|()
operator|+
literal|"/exist"
return|;
block|}
specifier|private
specifier|static
name|String
name|getRestUri
parameter_list|()
block|{
return|return
name|getServerUri
argument_list|()
operator|+
literal|"/rest"
return|;
block|}
specifier|private
specifier|static
name|String
name|getAppsUri
parameter_list|()
block|{
return|return
name|getServerUri
argument_list|()
operator|+
literal|"/apps"
return|;
block|}
block|}
end_class

end_unit

