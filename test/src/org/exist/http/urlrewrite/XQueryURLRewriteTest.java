begin_unit|revision:1.0.0;language:Java;cregit-version:0.0.1
begin_package
package|package
name|org
operator|.
name|exist
operator|.
name|http
operator|.
name|urlrewrite
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|com
operator|.
name|googlecode
operator|.
name|junittoolbox
operator|.
name|ParallelRunner
import|;
end_import

begin_import
import|import
name|org
operator|.
name|easymock
operator|.
name|EasyMock
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|servlet
operator|.
name|http
operator|.
name|HttpServletRequest
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|http
operator|.
name|urlrewrite
operator|.
name|XQueryURLRewrite
operator|.
name|RequestWrapper
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|runner
operator|.
name|RunWith
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertEquals
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertArrayEquals
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|easymock
operator|.
name|EasyMock
operator|.
name|expect
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|easymock
operator|.
name|EasyMock
operator|.
name|replay
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|easymock
operator|.
name|EasyMock
operator|.
name|verify
import|;
end_import

begin_comment
comment|/**  *  * @author aretter  */
end_comment

begin_class
annotation|@
name|RunWith
argument_list|(
name|ParallelRunner
operator|.
name|class
argument_list|)
specifier|public
class|class
name|XQueryURLRewriteTest
block|{
annotation|@
name|Test
specifier|public
name|void
name|adjustPathForSourceLookup_fullXmldbUri
parameter_list|()
block|{
name|XQueryURLRewrite
name|rewriter
init|=
operator|new
name|XQueryURLRewrite
argument_list|()
decl_stmt|;
name|String
name|basePath
init|=
literal|"xmldb:exist:///db/adamretter.org.uk/"
decl_stmt|;
name|String
name|path
init|=
literal|"/db/adamretter.org.uk/blog/entries/some-entry.xml?edit"
decl_stmt|;
name|String
name|adjustedPath
init|=
name|rewriter
operator|.
name|adjustPathForSourceLookup
argument_list|(
name|basePath
argument_list|,
name|path
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|adjustedPath
argument_list|,
literal|"blog/entries/some-entry.xml?edit"
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|adjustPathForSourceLookup_dbUri
parameter_list|()
block|{
name|XQueryURLRewrite
name|rewriter
init|=
operator|new
name|XQueryURLRewrite
argument_list|()
decl_stmt|;
name|String
name|basePath
init|=
literal|"/"
decl_stmt|;
name|String
name|path
init|=
literal|"/db/adamretter.org.uk/blog/entries/some-entry.xml?edit"
decl_stmt|;
name|String
name|adjustedPath
init|=
name|rewriter
operator|.
name|adjustPathForSourceLookup
argument_list|(
name|basePath
argument_list|,
name|path
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|adjustedPath
argument_list|,
literal|"adamretter.org.uk/blog/entries/some-entry.xml?edit"
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|adjustPathForSourceLookup_fsUri
parameter_list|()
block|{
name|XQueryURLRewrite
name|rewriter
init|=
operator|new
name|XQueryURLRewrite
argument_list|()
decl_stmt|;
name|String
name|basePath
init|=
literal|"/"
decl_stmt|;
name|String
name|path
init|=
literal|"/xquery/functions.xql"
decl_stmt|;
name|String
name|adjustedPath
init|=
name|rewriter
operator|.
name|adjustPathForSourceLookup
argument_list|(
name|basePath
argument_list|,
name|path
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|adjustedPath
argument_list|,
literal|"xquery/functions.xql"
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|requestWrapper_copiesRequestParams
parameter_list|()
block|{
specifier|final
name|Map
argument_list|<
name|String
argument_list|,
name|String
index|[]
argument_list|>
name|testParameterMap
init|=
operator|new
name|HashMap
argument_list|<
name|String
argument_list|,
name|String
index|[]
argument_list|>
argument_list|()
decl_stmt|;
name|testParameterMap
operator|.
name|put
argument_list|(
literal|"paramName1"
argument_list|,
operator|new
name|String
index|[]
block|{
literal|"value1"
block|,
literal|"value1.1"
block|}
argument_list|)
expr_stmt|;
name|testParameterMap
operator|.
name|put
argument_list|(
literal|"paramName2"
argument_list|,
operator|new
name|String
index|[]
block|{
literal|"value2"
block|,
literal|"value2.1"
block|}
argument_list|)
expr_stmt|;
name|HttpServletRequest
name|mockHttpServletRequest
init|=
name|EasyMock
operator|.
name|createMock
argument_list|(
name|HttpServletRequest
operator|.
name|class
argument_list|)
decl_stmt|;
comment|//standard request wrapper stuff
name|expect
argument_list|(
name|mockHttpServletRequest
operator|.
name|getContentType
argument_list|()
argument_list|)
operator|.
name|andReturn
argument_list|(
literal|"text/xml"
argument_list|)
expr_stmt|;
comment|//end standard request wrapper stuff
name|expect
argument_list|(
name|mockHttpServletRequest
operator|.
name|getParameterMap
argument_list|()
argument_list|)
operator|.
name|andReturn
argument_list|(
name|testParameterMap
argument_list|)
expr_stmt|;
name|replay
argument_list|(
name|mockHttpServletRequest
argument_list|)
expr_stmt|;
name|RequestWrapper
name|wrapper
init|=
operator|new
name|RequestWrapper
argument_list|(
name|mockHttpServletRequest
argument_list|)
decl_stmt|;
name|verify
argument_list|(
name|mockHttpServletRequest
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|testParameterMap
operator|.
name|size
argument_list|()
argument_list|,
name|wrapper
operator|.
name|getParameterMap
argument_list|()
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
for|for
control|(
name|String
name|paramName
range|:
name|testParameterMap
operator|.
name|keySet
argument_list|()
control|)
block|{
name|assertArrayEquals
argument_list|(
name|testParameterMap
operator|.
name|get
argument_list|(
name|paramName
argument_list|)
argument_list|,
name|wrapper
operator|.
name|getParameterMap
argument_list|()
operator|.
name|get
argument_list|(
name|paramName
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Test
specifier|public
name|void
name|requestWrapper_addsParamAftercopiesRequestParams
parameter_list|()
block|{
specifier|final
name|Map
argument_list|<
name|String
argument_list|,
name|String
index|[]
argument_list|>
name|testParameterMap
init|=
operator|new
name|HashMap
argument_list|<
name|String
argument_list|,
name|String
index|[]
argument_list|>
argument_list|()
decl_stmt|;
name|testParameterMap
operator|.
name|put
argument_list|(
literal|"paramName1"
argument_list|,
operator|new
name|String
index|[]
block|{
literal|"value1"
block|,
literal|"value1.1"
block|}
argument_list|)
expr_stmt|;
name|testParameterMap
operator|.
name|put
argument_list|(
literal|"paramName2"
argument_list|,
operator|new
name|String
index|[]
block|{
literal|"value2"
block|,
literal|"value2.1"
block|}
argument_list|)
expr_stmt|;
specifier|final
name|String
name|newRequestParamName
init|=
literal|"newParamName"
decl_stmt|;
specifier|final
name|String
name|newRequestParamValue
init|=
literal|"newParamValue"
decl_stmt|;
name|HttpServletRequest
name|mockHttpServletRequest
init|=
name|EasyMock
operator|.
name|createMock
argument_list|(
name|HttpServletRequest
operator|.
name|class
argument_list|)
decl_stmt|;
comment|//standard request wrapper stuff
name|expect
argument_list|(
name|mockHttpServletRequest
operator|.
name|getContentType
argument_list|()
argument_list|)
operator|.
name|andReturn
argument_list|(
literal|"text/xml"
argument_list|)
expr_stmt|;
comment|//end standard request wrapper stuff
name|expect
argument_list|(
name|mockHttpServletRequest
operator|.
name|getParameterMap
argument_list|()
argument_list|)
operator|.
name|andReturn
argument_list|(
name|testParameterMap
argument_list|)
expr_stmt|;
name|replay
argument_list|(
name|mockHttpServletRequest
argument_list|)
expr_stmt|;
name|RequestWrapper
name|wrapper
init|=
operator|new
name|RequestWrapper
argument_list|(
name|mockHttpServletRequest
argument_list|)
decl_stmt|;
name|wrapper
operator|.
name|addParameter
argument_list|(
name|newRequestParamName
argument_list|,
name|newRequestParamValue
argument_list|)
expr_stmt|;
name|verify
argument_list|(
name|mockHttpServletRequest
argument_list|)
expr_stmt|;
specifier|final
name|Map
argument_list|<
name|String
argument_list|,
name|String
index|[]
argument_list|>
name|newTestParameterMap
init|=
operator|new
name|HashMap
argument_list|<
name|String
argument_list|,
name|String
index|[]
argument_list|>
argument_list|()
decl_stmt|;
name|newTestParameterMap
operator|.
name|putAll
argument_list|(
name|testParameterMap
argument_list|)
expr_stmt|;
name|newTestParameterMap
operator|.
name|put
argument_list|(
name|newRequestParamName
argument_list|,
operator|new
name|String
index|[]
block|{
name|newRequestParamValue
block|}
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|newTestParameterMap
operator|.
name|size
argument_list|()
argument_list|,
name|wrapper
operator|.
name|getParameterMap
argument_list|()
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
for|for
control|(
name|String
name|paramName
range|:
name|newTestParameterMap
operator|.
name|keySet
argument_list|()
control|)
block|{
name|assertArrayEquals
argument_list|(
name|newTestParameterMap
operator|.
name|get
argument_list|(
name|paramName
argument_list|)
argument_list|,
name|wrapper
operator|.
name|getParameterMap
argument_list|()
operator|.
name|get
argument_list|(
name|paramName
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
block|}
end_class

end_unit

