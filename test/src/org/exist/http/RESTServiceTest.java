begin_unit|revision:1.0.0;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * eXist Open Source Native XML Database  * Copyright (C) 2001-2008 The eXist Project  * http://exist-db.org  *  * This program is free software; you can redistribute it and/or  * modify it under the terms of the GNU Lesser General Public License  * as published by the Free Software Foundation; either version 2  * of the License, or (at your option) any later version.  *    * This program is distributed in the hope that it will be useful,  * but WITHOUT ANY WARRANTY; without even the implied warranty of  * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the  * GNU Lesser General Public License for more details.  *   * You should have received a copy of the GNU Lesser General Public License  * along with this program; if not, write to the Free Software Foundation  * Inc., 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301, USA.  *    *  $Id$  */
end_comment

begin_package
package|package
name|org
operator|.
name|exist
operator|.
name|http
package|;
end_package

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|BeforeClass
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|BufferedReader
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|InputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|InputStreamReader
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|OutputStreamWriter
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|Writer
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|StringReader
import|;
end_import

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|HttpURLConnection
import|;
end_import

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|URL
import|;
end_import

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|URLEncoder
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|xml
operator|.
name|parsers
operator|.
name|ParserConfigurationException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|jetty
operator|.
name|JettyStart
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|Namespaces
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|dom
operator|.
name|memtree
operator|.
name|SAXAdapter
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|util
operator|.
name|Base64Encoder
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|xmldb
operator|.
name|XmldbURI
import|;
end_import

begin_import
import|import
name|org
operator|.
name|xml
operator|.
name|sax
operator|.
name|InputSource
import|;
end_import

begin_import
import|import
name|org
operator|.
name|xml
operator|.
name|sax
operator|.
name|SAXException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|xml
operator|.
name|sax
operator|.
name|XMLReader
import|;
end_import

begin_import
import|import
name|org
operator|.
name|w3c
operator|.
name|dom
operator|.
name|Document
import|;
end_import

begin_import
import|import
name|org
operator|.
name|w3c
operator|.
name|dom
operator|.
name|Element
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|xml
operator|.
name|parsers
operator|.
name|SAXParserFactory
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|xml
operator|.
name|parsers
operator|.
name|SAXParser
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Before
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertEquals
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertNotNull
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertTrue
import|;
end_import

begin_comment
comment|/** A test case for accessing a remote server via REST-Style Web API.  * @author wolf  * @author Pierrick Brihaye<pierrick.brihaye@free.fr>  */
end_comment

begin_class
specifier|public
class|class
name|RESTServiceTest
block|{
specifier|private
specifier|static
name|JettyStart
name|server
init|=
literal|null
decl_stmt|;
comment|// jetty.port.standalone
specifier|private
specifier|final
specifier|static
name|String
name|SERVER_URI
init|=
literal|"http://localhost:"
operator|+
name|System
operator|.
name|getProperty
argument_list|(
literal|"jetty.port"
argument_list|,
literal|"8088"
argument_list|)
operator|+
literal|"/rest"
decl_stmt|;
specifier|private
specifier|final
specifier|static
name|String
name|SERVER_URI_REDIRECTED
init|=
literal|"http://localhost:"
operator|+
name|System
operator|.
name|getProperty
argument_list|(
literal|"jetty.port"
argument_list|,
literal|"8088"
argument_list|)
decl_stmt|;
specifier|private
specifier|final
specifier|static
name|String
name|COLLECTION_URI
init|=
name|SERVER_URI
operator|+
name|XmldbURI
operator|.
name|ROOT_COLLECTION
operator|+
literal|"/test"
decl_stmt|;
specifier|private
specifier|final
specifier|static
name|String
name|COLLECTION_URI_REDIRECTED
init|=
name|SERVER_URI_REDIRECTED
operator|+
name|XmldbURI
operator|.
name|ROOT_COLLECTION
operator|+
literal|"/test"
decl_stmt|;
specifier|private
specifier|final
specifier|static
name|String
name|RESOURCE_URI
init|=
name|SERVER_URI
operator|+
name|XmldbURI
operator|.
name|ROOT_COLLECTION
operator|+
literal|"/test/test.xml"
decl_stmt|;
comment|/* About path components of URIs:       ** reserved characters # http://tools.ietf.org/html/rfc3986#section-2.2      *      *  gen-delims  = ":" / "/" / "?" / "#" / "[" / "]" / "@"      *  sub-delims  = "!" / "$" / "&" / "'" / "(" / ")"      *              / "*" / "+" / "," / ";" / "="      *  reserved    = gen-delims / sub-delims         RCHAR=": / ? # [ ] @ ! $& ' ( ) *  + , ; ="       ** path-segment # http://tools.ietf.org/html/rfc3986#section-3.3      *      *  unreserved  = ALPHA / DIGIT / "-" / "." / "_" / "~"      *  pct-encoded = "%" HEXDIG HEXDIG      *  sub-delims  = "!" / "$" / "&" / "'" / "(" / ")"      *              / "*" / "+" / "," / ";" / "="      *  pchar       = unreserved / pct-encoded / sub-delims / ":" / "@"       ** So, characters literally allowed in a path-segment are:         PCHAR="A-Z a-z 0-9 - . _ ~ ! $& ' ( ) *  + , ; = : @"       ** All the rest has to be percent-encoded      *  the percent sign itself MUST start a code      *  reserved+ chars in need of encoding - in a path-segment - are:      *       /   ?   #   [   ]   %      *  %20 %2F %3F %23 %5B %5D %25       ** Interoperability /rest/ space:      *  most webbrowsers act mostly correct      *  curl does _no_ encoding on its own      *  all browsers send a bare / as is (user error? will separate path-segments)      *  all browsers send a bare ? as is (user error? will start the query-string)      *  no browser sends a bare # at all (user error? will start the fragment-identifier)      *  chrome and msie send [] verbatim (wrong? apache can accomodateâ¦)      *  all browsers send a bare % as is (user error? will start an escape, apache returns Bad Request)       ** Interoperability /webdav/ space:      *  the GET and PUT methods mirror /rest/ space      *  These characters are not allowed in an NFTS filename         INTFS='/ \ : *   ? "<> |'      *  of those, Macintosh HFS only prohibits the colon      *  most other UN*X FSs only prohibit the slash      *  Quick test with bash on Linux extfs:         TWDAV="$PCHAR $RCHAR $INTFS %"      *  set -f; for fn in $TWDAV; do echo T__${fn}__> /tmp/T__${fn}__; done      *  only the slash will error out (twice)      *  anything in this set can be thrown at webdav!       ** Beware, some chars valid in a path-segment must not be in a filename (mostly NTFS)      */
comment|// Below String mostly contains the PCHAR set literally; the colon fails though, so its omittedâ¦
comment|// Also in the mix: some (mandatory except %27) escapes, some multibyte UTF-8 characters
comment|// and a superficial directory traversal
specifier|private
specifier|final
specifier|static
name|String
name|RESOURCE_URI_PLUS
init|=
name|SERVER_URI
operator|+
name|XmldbURI
operator|.
name|ROOT_COLLECTION
operator|+
literal|"/test/../test/A-Za-z0-9_~!$&'()*+,;=@%20%23%25%27%2F%3F%5B%5DÃ¤Ã¶Ã¼.xml"
decl_stmt|;
specifier|private
specifier|final
specifier|static
name|String
name|XML_DATA
init|=
literal|"<test>"
operator|+
literal|"<para>\u00E4\u00E4\u00FC\u00FC\u00F6\u00F6\u00C4\u00C4\u00D6\u00D6\u00DC\u00DC</para>"
operator|+
literal|"</test>"
decl_stmt|;
specifier|private
specifier|final
specifier|static
name|String
name|XUPDATE
init|=
literal|"<xu:modifications xmlns:xu=\"http://www.xmldb.org/xupdate\" version=\"1.0\">"
operator|+
literal|"<xu:append select=\"/test\" child=\"1\">"
operator|+
literal|"<para>Inserted paragraph.</para>"
operator|+
literal|"</xu:append>"
operator|+
literal|"</xu:modifications>"
decl_stmt|;
specifier|private
specifier|final
specifier|static
name|String
name|QUERY_REQUEST
init|=
literal|"<?xml version=\"1.0\" encoding=\"UTF-8\"?>"
operator|+
literal|"<query xmlns=\""
operator|+
name|Namespaces
operator|.
name|EXIST_NS
operator|+
literal|"\">"
operator|+
literal|"<properties>"
operator|+
literal|"<property name=\"indent\" value=\"yes\"/>"
operator|+
literal|"<property name=\"encoding\" value=\"UTF-8\"/>"
operator|+
literal|"</properties>"
operator|+
literal|"<text>"
operator|+
literal|"xquery version \"1.0\";"
operator|+
literal|"(::pragma exist:serialize indent=no ::)"
operator|+
literal|"//para"
operator|+
literal|"</text>"
operator|+
literal|"</query>"
decl_stmt|;
specifier|private
specifier|final
specifier|static
name|String
name|QUERY_REQUEST_ERROR
init|=
literal|"<?xml version=\"1.0\" encoding=\"UTF-8\"?>"
operator|+
literal|"<query xmlns=\""
operator|+
name|Namespaces
operator|.
name|EXIST_NS
operator|+
literal|"\">"
operator|+
literal|"<properties>"
operator|+
literal|"<property name=\"indent\" value=\"yes\"/>"
operator|+
literal|"<property name=\"encoding\" value=\"UTF-8\"/>"
operator|+
literal|"</properties>"
operator|+
literal|"<text>"
operator|+
literal|"xquery version \"1.0\";"
operator|+
literal|"//undeclared:para"
operator|+
literal|"</text>"
operator|+
literal|"</query>"
decl_stmt|;
specifier|private
specifier|final
specifier|static
name|String
name|TEST_MODULE
init|=
literal|"module namespace t=\"http://test.foo\";\n"
operator|+
literal|"declare variable $t:VAR { 'World!' };"
decl_stmt|;
specifier|private
specifier|final
specifier|static
name|String
name|TEST_XQUERY
init|=
literal|"xquery version \"1.0\";\n"
operator|+
literal|"declare option exist:serialize \"method=text media-type=text/text\";\n"
operator|+
literal|"import module namespace request=\"http://exist-db.org/xquery/request\";\n"
operator|+
literal|"import module namespace t=\"http://test.foo\" at \"module.xq\";\n"
operator|+
literal|"let $param := request:get-parameter('p', ())\n"
operator|+
literal|"return\n"
operator|+
literal|"	($param, ' ', $t:VAR)"
decl_stmt|;
specifier|private
specifier|final
specifier|static
name|String
name|TEST_XQUERY_PARAMETER
init|=
literal|"xquery version \"1.0\";\n"
operator|+
literal|"declare namespace request=\"http://exist-db.org/xquery/request\";\n"
operator|+
literal|"import module namespace requestparametermod=\"http://exist-db.org/xquery/requestparametermod\" at \"requestparametermod.xqm\";\n"
operator|+
literal|"concat(\"xql=\", request:get-parameter(\"doc\",())),\n"
operator|+
literal|"concat(\"xqm=\", $requestparametermod:request)"
decl_stmt|;
specifier|private
specifier|final
specifier|static
name|String
name|TEST_XQUERY_PARAMETER_MODULE
init|=
literal|"module namespace requestparametermod = \"http://exist-db.org/xquery/requestparametermod\";\n"
operator|+
literal|"declare namespace request=\"http://exist-db.org/xquery/request\";\n"
operator|+
literal|"declare variable $requestparametermod:request { request:get-parameter(\"doc\",())};\n"
decl_stmt|;
specifier|private
specifier|final
specifier|static
name|String
name|TEST_XQUERY_WITH_PATH_PARAMETER
init|=
literal|"xquery version \"1.0\";\n"
operator|+
literal|"declare namespace request=\"http://exist-db.org/xquery/request\";\n"
operator|+
literal|"declare option exist:serialize \"method=text media-type=text/text\";\n"
operator|+
literal|"(\"pathInfo=\", request:get-path-info(), \"\n\","
operator|+
literal|"\"servletPath=\", request:get-servlet-path(), \"\n\")"
decl_stmt|;
specifier|private
specifier|final
specifier|static
name|String
name|TEST_XQUERY_WITH_PATH_AND_CONTENT
init|=
literal|"xquery version \"3.0\";\n"
operator|+
literal|"declare namespace request=\"http://exist-db.org/xquery/request\";\n"
operator|+
literal|"declare option exist:serialize \"method=text media-type=text/text\";\n"
operator|+
literal|"request:get-data()//data/text() || ' ' || request:get-path-info()"
decl_stmt|;
specifier|private
specifier|static
name|String
name|credentials
decl_stmt|;
specifier|private
specifier|static
name|String
name|badCredentials
decl_stmt|;
annotation|@
name|BeforeClass
specifier|public
specifier|final
specifier|static
name|void
name|createCredentials
parameter_list|()
block|{
name|Base64Encoder
name|enc
init|=
operator|new
name|Base64Encoder
argument_list|()
decl_stmt|;
name|enc
operator|.
name|translate
argument_list|(
literal|"admin:"
operator|.
name|getBytes
argument_list|()
argument_list|)
expr_stmt|;
name|credentials
operator|=
operator|new
name|String
argument_list|(
name|enc
operator|.
name|getCharArray
argument_list|()
argument_list|)
expr_stmt|;
name|enc
operator|.
name|reset
argument_list|()
expr_stmt|;
name|enc
operator|.
name|translate
argument_list|(
literal|"johndoe:this pw should fail"
operator|.
name|getBytes
argument_list|()
argument_list|)
expr_stmt|;
name|badCredentials
operator|=
operator|new
name|String
argument_list|(
name|enc
operator|.
name|getCharArray
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Before
specifier|public
name|void
name|setUp
parameter_list|()
throws|throws
name|Exception
block|{
comment|//Don't worry about closing the server : the shutdownDB hook will do the job
if|if
condition|(
name|server
operator|==
literal|null
condition|)
block|{
name|server
operator|=
operator|new
name|JettyStart
argument_list|()
expr_stmt|;
name|server
operator|.
name|run
argument_list|()
expr_stmt|;
block|}
block|}
annotation|@
name|Test
specifier|public
name|void
name|getFailNoSuchDocument
parameter_list|()
throws|throws
name|IOException
block|{
name|String
name|uri
init|=
name|COLLECTION_URI
operator|+
literal|"/nosuchdocument.xml"
decl_stmt|;
name|HttpURLConnection
name|connect
init|=
name|getConnection
argument_list|(
name|uri
argument_list|)
decl_stmt|;
name|connect
operator|.
name|setRequestMethod
argument_list|(
literal|"GET"
argument_list|)
expr_stmt|;
name|connect
operator|.
name|connect
argument_list|()
expr_stmt|;
name|int
name|r
init|=
name|connect
operator|.
name|getResponseCode
argument_list|()
decl_stmt|;
name|assertEquals
argument_list|(
literal|"Server returned response code "
operator|+
name|r
argument_list|,
literal|404
argument_list|,
name|r
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|xqueryGetWithEmptyPath
parameter_list|()
throws|throws
name|IOException
block|{
comment|/* store the documents that we need for this test */
name|doPut
argument_list|(
name|TEST_XQUERY_WITH_PATH_PARAMETER
argument_list|,
literal|"requestwithpath.xq"
argument_list|,
literal|201
argument_list|)
expr_stmt|;
name|String
name|path
init|=
name|COLLECTION_URI
operator|+
literal|"/requestwithpath.xq"
decl_stmt|;
name|HttpURLConnection
name|connect
init|=
name|getConnection
argument_list|(
name|path
argument_list|)
decl_stmt|;
name|connect
operator|.
name|setRequestProperty
argument_list|(
literal|"Authorization"
argument_list|,
literal|"Basic "
operator|+
name|credentials
argument_list|)
expr_stmt|;
name|connect
operator|.
name|setRequestMethod
argument_list|(
literal|"GET"
argument_list|)
expr_stmt|;
name|connect
operator|.
name|connect
argument_list|()
expr_stmt|;
name|int
name|r
init|=
name|connect
operator|.
name|getResponseCode
argument_list|()
decl_stmt|;
name|assertEquals
argument_list|(
literal|"Server returned response code "
operator|+
name|r
argument_list|,
literal|200
argument_list|,
name|r
argument_list|)
expr_stmt|;
name|String
name|response
init|=
name|readResponse
argument_list|(
name|connect
operator|.
name|getInputStream
argument_list|()
argument_list|)
decl_stmt|;
name|String
name|pathInfo
init|=
name|response
operator|.
name|substring
argument_list|(
literal|"pathInfo="
operator|.
name|length
argument_list|()
argument_list|,
name|response
operator|.
name|indexOf
argument_list|(
literal|"servletPath="
argument_list|)
operator|-
literal|2
argument_list|)
decl_stmt|;
name|String
name|servletPath
init|=
name|response
operator|.
name|substring
argument_list|(
name|response
operator|.
name|indexOf
argument_list|(
literal|"servletPath="
argument_list|)
operator|+
literal|"servletPath="
operator|.
name|length
argument_list|()
argument_list|,
name|response
operator|.
name|lastIndexOf
argument_list|(
literal|"\r\n"
argument_list|)
argument_list|)
decl_stmt|;
comment|//check the responses
name|assertEquals
argument_list|(
literal|"XQuery servletPath is: \""
operator|+
name|servletPath
operator|+
literal|"\" expected: \"/db/test/requestwithpath.xq\""
argument_list|,
literal|"/db/test/requestwithpath.xq"
argument_list|,
name|servletPath
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"XQuery pathInfo is: \""
operator|+
name|pathInfo
operator|+
literal|"\" expected: \"\""
argument_list|,
literal|""
argument_list|,
name|pathInfo
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|xqueryPOSTWithEmptyPath
parameter_list|()
throws|throws
name|IOException
block|{
comment|/* store the documents that we need for this test */
name|doPut
argument_list|(
name|TEST_XQUERY_WITH_PATH_PARAMETER
argument_list|,
literal|"requestwithpath.xq"
argument_list|,
literal|201
argument_list|)
expr_stmt|;
name|String
name|path
init|=
name|COLLECTION_URI
operator|+
literal|"/requestwithpath.xq"
decl_stmt|;
name|HttpURLConnection
name|connect
init|=
name|preparePost
argument_list|(
literal|"boo"
argument_list|,
name|path
argument_list|)
decl_stmt|;
name|connect
operator|.
name|connect
argument_list|()
expr_stmt|;
name|int
name|r
init|=
name|connect
operator|.
name|getResponseCode
argument_list|()
decl_stmt|;
name|assertEquals
argument_list|(
literal|"Server returned response code "
operator|+
name|r
argument_list|,
literal|200
argument_list|,
name|r
argument_list|)
expr_stmt|;
name|String
name|response
init|=
name|readResponse
argument_list|(
name|connect
operator|.
name|getInputStream
argument_list|()
argument_list|)
decl_stmt|;
name|String
name|pathInfo
init|=
name|response
operator|.
name|substring
argument_list|(
literal|"pathInfo="
operator|.
name|length
argument_list|()
argument_list|,
name|response
operator|.
name|indexOf
argument_list|(
literal|"servletPath="
argument_list|)
operator|-
literal|2
argument_list|)
decl_stmt|;
name|String
name|servletPath
init|=
name|response
operator|.
name|substring
argument_list|(
name|response
operator|.
name|indexOf
argument_list|(
literal|"servletPath="
argument_list|)
operator|+
literal|"servletPath="
operator|.
name|length
argument_list|()
argument_list|,
name|response
operator|.
name|lastIndexOf
argument_list|(
literal|"\r\n"
argument_list|)
argument_list|)
decl_stmt|;
comment|//check the responses
name|assertEquals
argument_list|(
literal|"XQuery servletPath is: \""
operator|+
name|servletPath
operator|+
literal|"\" expected: \"/db/test/requestwithpath.xq\""
argument_list|,
literal|"/db/test/requestwithpath.xq"
argument_list|,
name|servletPath
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"XQuery pathInfo is: \""
operator|+
name|pathInfo
operator|+
literal|"\" expected: \"\""
argument_list|,
literal|""
argument_list|,
name|pathInfo
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|xqueryGetWithNonEmptyPath
parameter_list|()
throws|throws
name|IOException
block|{
comment|/* store the documents that we need for this test */
name|doPut
argument_list|(
name|TEST_XQUERY_WITH_PATH_PARAMETER
argument_list|,
literal|"requestwithpath.xq"
argument_list|,
literal|201
argument_list|)
expr_stmt|;
name|String
name|path
init|=
name|COLLECTION_URI
operator|+
literal|"/requestwithpath.xq/some/path"
decl_stmt|;
name|HttpURLConnection
name|connect
init|=
name|getConnection
argument_list|(
name|path
argument_list|)
decl_stmt|;
name|connect
operator|.
name|setRequestProperty
argument_list|(
literal|"Authorization"
argument_list|,
literal|"Basic "
operator|+
name|credentials
argument_list|)
expr_stmt|;
name|connect
operator|.
name|setRequestMethod
argument_list|(
literal|"GET"
argument_list|)
expr_stmt|;
name|connect
operator|.
name|connect
argument_list|()
expr_stmt|;
name|int
name|r
init|=
name|connect
operator|.
name|getResponseCode
argument_list|()
decl_stmt|;
name|assertEquals
argument_list|(
literal|"Server returned response code "
operator|+
name|r
argument_list|,
literal|200
argument_list|,
name|r
argument_list|)
expr_stmt|;
name|String
name|response
init|=
name|readResponse
argument_list|(
name|connect
operator|.
name|getInputStream
argument_list|()
argument_list|)
decl_stmt|;
name|String
name|pathInfo
init|=
name|response
operator|.
name|substring
argument_list|(
literal|"pathInfo="
operator|.
name|length
argument_list|()
argument_list|,
name|response
operator|.
name|indexOf
argument_list|(
literal|"servletPath="
argument_list|)
operator|-
literal|2
argument_list|)
decl_stmt|;
name|String
name|servletPath
init|=
name|response
operator|.
name|substring
argument_list|(
name|response
operator|.
name|indexOf
argument_list|(
literal|"servletPath="
argument_list|)
operator|+
literal|"servletPath="
operator|.
name|length
argument_list|()
argument_list|,
name|response
operator|.
name|lastIndexOf
argument_list|(
literal|"\r\n"
argument_list|)
argument_list|)
decl_stmt|;
comment|//check the responses
name|assertEquals
argument_list|(
literal|"XQuery servletPath is: \""
operator|+
name|servletPath
operator|+
literal|"\" expected: \"/db/test/requestwithpath.xq\""
argument_list|,
literal|"/db/test/requestwithpath.xq"
argument_list|,
name|servletPath
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"XQuery pathInfo is: \""
operator|+
name|pathInfo
operator|+
literal|"\" expected: \"/some/path\""
argument_list|,
literal|"/some/path"
argument_list|,
name|pathInfo
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|xqueryPOSTWithNonEmptyPath
parameter_list|()
throws|throws
name|IOException
block|{
comment|/* store the documents that we need for this test */
name|doPut
argument_list|(
name|TEST_XQUERY_WITH_PATH_PARAMETER
argument_list|,
literal|"requestwithpath.xq"
argument_list|,
literal|201
argument_list|)
expr_stmt|;
name|String
name|path
init|=
name|COLLECTION_URI
operator|+
literal|"/requestwithpath.xq/some/path"
decl_stmt|;
name|HttpURLConnection
name|connect
init|=
name|preparePost
argument_list|(
literal|"boo"
argument_list|,
name|path
argument_list|)
decl_stmt|;
name|connect
operator|.
name|connect
argument_list|()
expr_stmt|;
name|int
name|r
init|=
name|connect
operator|.
name|getResponseCode
argument_list|()
decl_stmt|;
name|assertEquals
argument_list|(
literal|"Server returned response code "
operator|+
name|r
argument_list|,
literal|200
argument_list|,
name|r
argument_list|)
expr_stmt|;
name|String
name|response
init|=
name|readResponse
argument_list|(
name|connect
operator|.
name|getInputStream
argument_list|()
argument_list|)
decl_stmt|;
name|String
name|pathInfo
init|=
name|response
operator|.
name|substring
argument_list|(
literal|"pathInfo="
operator|.
name|length
argument_list|()
argument_list|,
name|response
operator|.
name|indexOf
argument_list|(
literal|"servletPath="
argument_list|)
operator|-
literal|2
argument_list|)
decl_stmt|;
name|String
name|servletPath
init|=
name|response
operator|.
name|substring
argument_list|(
name|response
operator|.
name|indexOf
argument_list|(
literal|"servletPath="
argument_list|)
operator|+
literal|"servletPath="
operator|.
name|length
argument_list|()
argument_list|,
name|response
operator|.
name|lastIndexOf
argument_list|(
literal|"\r\n"
argument_list|)
argument_list|)
decl_stmt|;
comment|//check the responses
name|assertEquals
argument_list|(
literal|"XQuery servletPath is: \""
operator|+
name|servletPath
operator|+
literal|"\" expected: \"/db/test/requestwithpath.xq\""
argument_list|,
literal|"/db/test/requestwithpath.xq"
argument_list|,
name|servletPath
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"XQuery pathInfo is: \""
operator|+
name|pathInfo
operator|+
literal|"\" expected: \"/some/path\""
argument_list|,
literal|"/some/path"
argument_list|,
name|pathInfo
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|xqueryGetFailWithNonEmptyPath
parameter_list|()
throws|throws
name|IOException
block|{
comment|/* store the documents that we need for this test */
name|HttpURLConnection
name|sconnect
init|=
name|getConnection
argument_list|(
name|RESOURCE_URI
argument_list|)
decl_stmt|;
name|sconnect
operator|.
name|setRequestProperty
argument_list|(
literal|"Authorization"
argument_list|,
literal|"Basic "
operator|+
name|credentials
argument_list|)
expr_stmt|;
name|sconnect
operator|.
name|setRequestMethod
argument_list|(
literal|"PUT"
argument_list|)
expr_stmt|;
name|sconnect
operator|.
name|setDoOutput
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|sconnect
operator|.
name|setRequestProperty
argument_list|(
literal|"ContentType"
argument_list|,
literal|"application/xml"
argument_list|)
expr_stmt|;
name|Writer
name|writer
init|=
operator|new
name|OutputStreamWriter
argument_list|(
name|sconnect
operator|.
name|getOutputStream
argument_list|()
argument_list|,
literal|"UTF-8"
argument_list|)
decl_stmt|;
name|writer
operator|.
name|write
argument_list|(
name|XML_DATA
argument_list|)
expr_stmt|;
name|writer
operator|.
name|close
argument_list|()
expr_stmt|;
name|String
name|path
init|=
name|RESOURCE_URI
operator|+
literal|"/some/path"
decl_stmt|;
comment|// should not be able to get this path
name|HttpURLConnection
name|connect
init|=
name|getConnection
argument_list|(
name|path
argument_list|)
decl_stmt|;
name|connect
operator|.
name|setRequestMethod
argument_list|(
literal|"GET"
argument_list|)
expr_stmt|;
name|connect
operator|.
name|connect
argument_list|()
expr_stmt|;
name|int
name|r
init|=
name|connect
operator|.
name|getResponseCode
argument_list|()
decl_stmt|;
name|assertEquals
argument_list|(
literal|"Server returned response code "
operator|+
name|r
argument_list|,
literal|404
argument_list|,
name|r
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testPut
parameter_list|()
throws|throws
name|IOException
block|{
name|int
name|r
init|=
name|uploadData
argument_list|()
decl_stmt|;
name|assertEquals
argument_list|(
literal|"Server returned response code "
operator|+
name|r
argument_list|,
literal|201
argument_list|,
name|r
argument_list|)
expr_stmt|;
name|doGet
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testPutPlus
parameter_list|()
throws|throws
name|IOException
block|{
name|int
name|r
init|=
name|uploadDataPlus
argument_list|()
decl_stmt|;
name|assertEquals
argument_list|(
literal|"Server returned response code "
operator|+
name|r
argument_list|,
literal|201
argument_list|,
name|r
argument_list|)
expr_stmt|;
name|doGetPlus
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|putFailAgainstCollection
parameter_list|()
throws|throws
name|IOException
block|{
name|HttpURLConnection
name|connect
init|=
name|getConnection
argument_list|(
name|COLLECTION_URI
argument_list|)
decl_stmt|;
name|connect
operator|.
name|setRequestProperty
argument_list|(
literal|"Authorization"
argument_list|,
literal|"Basic "
operator|+
name|credentials
argument_list|)
expr_stmt|;
name|connect
operator|.
name|setRequestMethod
argument_list|(
literal|"PUT"
argument_list|)
expr_stmt|;
name|connect
operator|.
name|setDoOutput
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|connect
operator|.
name|setRequestProperty
argument_list|(
literal|"ContentType"
argument_list|,
literal|"application/xml"
argument_list|)
expr_stmt|;
name|Writer
name|writer
init|=
operator|new
name|OutputStreamWriter
argument_list|(
name|connect
operator|.
name|getOutputStream
argument_list|()
argument_list|,
literal|"UTF-8"
argument_list|)
decl_stmt|;
name|writer
operator|.
name|write
argument_list|(
name|XML_DATA
argument_list|)
expr_stmt|;
name|writer
operator|.
name|close
argument_list|()
expr_stmt|;
name|connect
operator|.
name|connect
argument_list|()
expr_stmt|;
name|int
name|r
init|=
name|connect
operator|.
name|getResponseCode
argument_list|()
decl_stmt|;
name|assertEquals
argument_list|(
literal|"Server returned response code "
operator|+
name|r
argument_list|,
literal|400
argument_list|,
name|r
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|putWithCharset
parameter_list|()
throws|throws
name|IOException
block|{
name|HttpURLConnection
name|connect
init|=
name|getConnection
argument_list|(
name|RESOURCE_URI
argument_list|)
decl_stmt|;
name|connect
operator|.
name|setRequestProperty
argument_list|(
literal|"Authorization"
argument_list|,
literal|"Basic "
operator|+
name|credentials
argument_list|)
expr_stmt|;
name|connect
operator|.
name|setRequestMethod
argument_list|(
literal|"PUT"
argument_list|)
expr_stmt|;
name|connect
operator|.
name|setDoOutput
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|connect
operator|.
name|setRequestProperty
argument_list|(
literal|"ContentType"
argument_list|,
literal|"application/xml; charset=UTF-8"
argument_list|)
expr_stmt|;
name|Writer
name|writer
init|=
operator|new
name|OutputStreamWriter
argument_list|(
name|connect
operator|.
name|getOutputStream
argument_list|()
argument_list|,
literal|"UTF-8"
argument_list|)
decl_stmt|;
name|writer
operator|.
name|write
argument_list|(
name|XML_DATA
argument_list|)
expr_stmt|;
name|writer
operator|.
name|close
argument_list|()
expr_stmt|;
name|connect
operator|.
name|connect
argument_list|()
expr_stmt|;
name|int
name|r
init|=
name|connect
operator|.
name|getResponseCode
argument_list|()
decl_stmt|;
name|assertEquals
argument_list|(
literal|"Server returned response code "
operator|+
name|r
argument_list|,
literal|201
argument_list|,
name|r
argument_list|)
expr_stmt|;
name|doGet
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|putFailAndRechallengeAuthorization
parameter_list|()
throws|throws
name|IOException
block|{
name|HttpURLConnection
name|connect
init|=
name|getConnection
argument_list|(
name|RESOURCE_URI
argument_list|)
decl_stmt|;
name|connect
operator|.
name|setRequestProperty
argument_list|(
literal|"Authorization"
argument_list|,
literal|"Basic "
operator|+
name|badCredentials
argument_list|)
expr_stmt|;
name|connect
operator|.
name|setDoOutput
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|connect
operator|.
name|setRequestMethod
argument_list|(
literal|"PUT"
argument_list|)
expr_stmt|;
name|connect
operator|.
name|setAllowUserInteraction
argument_list|(
literal|false
argument_list|)
expr_stmt|;
name|connect
operator|.
name|connect
argument_list|()
expr_stmt|;
name|int
name|r
init|=
name|connect
operator|.
name|getResponseCode
argument_list|()
decl_stmt|;
name|assertEquals
argument_list|(
literal|"Server returned response code "
operator|+
name|r
argument_list|,
literal|401
argument_list|,
name|r
argument_list|)
expr_stmt|;
name|String
name|auth
init|=
name|connect
operator|.
name|getHeaderField
argument_list|(
literal|"WWW-Authenticate"
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|"WWW-Authenticate = "
operator|+
name|auth
argument_list|,
literal|"Basic realm=\"exist\""
argument_list|,
name|auth
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|putAgainstXQuery
parameter_list|()
throws|throws
name|IOException
block|{
name|doPut
argument_list|(
name|TEST_XQUERY_WITH_PATH_AND_CONTENT
argument_list|,
literal|"requestwithcontent.xq"
argument_list|,
literal|201
argument_list|)
expr_stmt|;
name|String
name|path
init|=
name|COLLECTION_URI_REDIRECTED
operator|+
literal|"/requestwithcontent.xq/a/b/c"
decl_stmt|;
name|HttpURLConnection
name|connect
init|=
name|getConnection
argument_list|(
name|path
argument_list|)
decl_stmt|;
name|connect
operator|.
name|setRequestProperty
argument_list|(
literal|"Authorization"
argument_list|,
literal|"Basic "
operator|+
name|credentials
argument_list|)
expr_stmt|;
name|connect
operator|.
name|setRequestMethod
argument_list|(
literal|"PUT"
argument_list|)
expr_stmt|;
name|connect
operator|.
name|setDoOutput
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|connect
operator|.
name|setRequestProperty
argument_list|(
literal|"ContentType"
argument_list|,
literal|"application/xml"
argument_list|)
expr_stmt|;
name|Writer
name|writer
init|=
operator|new
name|OutputStreamWriter
argument_list|(
name|connect
operator|.
name|getOutputStream
argument_list|()
argument_list|,
literal|"UTF-8"
argument_list|)
decl_stmt|;
name|writer
operator|.
name|write
argument_list|(
literal|"<data>test data</data>"
argument_list|)
expr_stmt|;
name|writer
operator|.
name|close
argument_list|()
expr_stmt|;
name|connect
operator|.
name|connect
argument_list|()
expr_stmt|;
name|int
name|r
init|=
name|connect
operator|.
name|getResponseCode
argument_list|()
decl_stmt|;
name|assertEquals
argument_list|(
literal|"doPut: Server returned response code "
operator|+
name|r
argument_list|,
literal|200
argument_list|,
name|r
argument_list|)
expr_stmt|;
comment|//get the response of the query
name|String
name|response
init|=
name|readResponse
argument_list|(
name|connect
operator|.
name|getInputStream
argument_list|()
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|response
operator|.
name|trim
argument_list|()
argument_list|,
literal|"test data /a/b/c"
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|deleteAgainstXQuery
parameter_list|()
throws|throws
name|IOException
block|{
name|doPut
argument_list|(
name|TEST_XQUERY_WITH_PATH_PARAMETER
argument_list|,
literal|"requestwithcontent.xq"
argument_list|,
literal|201
argument_list|)
expr_stmt|;
name|String
name|path
init|=
name|COLLECTION_URI_REDIRECTED
operator|+
literal|"/requestwithcontent.xq/a/b/c"
decl_stmt|;
name|HttpURLConnection
name|connect
init|=
name|getConnection
argument_list|(
name|path
argument_list|)
decl_stmt|;
name|connect
operator|.
name|setRequestProperty
argument_list|(
literal|"Authorization"
argument_list|,
literal|"Basic "
operator|+
name|credentials
argument_list|)
expr_stmt|;
name|connect
operator|.
name|setRequestMethod
argument_list|(
literal|"DELETE"
argument_list|)
expr_stmt|;
name|connect
operator|.
name|connect
argument_list|()
expr_stmt|;
name|int
name|r
init|=
name|connect
operator|.
name|getResponseCode
argument_list|()
decl_stmt|;
name|assertEquals
argument_list|(
literal|"doDelete: Server returned response code "
operator|+
name|r
argument_list|,
literal|200
argument_list|,
name|r
argument_list|)
expr_stmt|;
comment|//get the response of the query
name|String
name|response
init|=
name|readResponse
argument_list|(
name|connect
operator|.
name|getInputStream
argument_list|()
argument_list|)
decl_stmt|;
name|String
name|pathInfo
init|=
name|response
operator|.
name|substring
argument_list|(
literal|"pathInfo="
operator|.
name|length
argument_list|()
argument_list|,
name|response
operator|.
name|indexOf
argument_list|(
literal|"servletPath="
argument_list|)
operator|-
literal|2
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|pathInfo
argument_list|,
literal|"/a/b/c"
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|headAgainstXQuery
parameter_list|()
throws|throws
name|IOException
block|{
name|doPut
argument_list|(
name|TEST_XQUERY_WITH_PATH_PARAMETER
argument_list|,
literal|"requestwithcontent.xq"
argument_list|,
literal|201
argument_list|)
expr_stmt|;
name|String
name|path
init|=
name|COLLECTION_URI_REDIRECTED
operator|+
literal|"/requestwithcontent.xq/a/b/c"
decl_stmt|;
name|HttpURLConnection
name|connect
init|=
name|getConnection
argument_list|(
name|path
argument_list|)
decl_stmt|;
name|connect
operator|.
name|setRequestProperty
argument_list|(
literal|"Authorization"
argument_list|,
literal|"Basic "
operator|+
name|credentials
argument_list|)
expr_stmt|;
name|connect
operator|.
name|setRequestMethod
argument_list|(
literal|"HEAD"
argument_list|)
expr_stmt|;
name|connect
operator|.
name|connect
argument_list|()
expr_stmt|;
name|int
name|r
init|=
name|connect
operator|.
name|getResponseCode
argument_list|()
decl_stmt|;
name|assertEquals
argument_list|(
literal|"doHead: Server returned response code "
operator|+
name|r
argument_list|,
literal|200
argument_list|,
name|r
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|xUpdate
parameter_list|()
throws|throws
name|IOException
block|{
name|HttpURLConnection
name|connect
init|=
name|preparePost
argument_list|(
name|XUPDATE
argument_list|,
name|RESOURCE_URI
argument_list|)
decl_stmt|;
name|connect
operator|.
name|connect
argument_list|()
expr_stmt|;
name|int
name|r
init|=
name|connect
operator|.
name|getResponseCode
argument_list|()
decl_stmt|;
name|assertEquals
argument_list|(
literal|"Server returned response code "
operator|+
name|r
argument_list|,
literal|200
argument_list|,
name|r
argument_list|)
expr_stmt|;
name|doGet
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|queryPost
parameter_list|()
throws|throws
name|IOException
throws|,
name|SAXException
throws|,
name|ParserConfigurationException
block|{
name|uploadData
argument_list|()
expr_stmt|;
name|HttpURLConnection
name|connect
init|=
name|preparePost
argument_list|(
name|QUERY_REQUEST
argument_list|,
name|RESOURCE_URI
argument_list|)
decl_stmt|;
name|connect
operator|.
name|connect
argument_list|()
expr_stmt|;
name|int
name|r
init|=
name|connect
operator|.
name|getResponseCode
argument_list|()
decl_stmt|;
name|assertEquals
argument_list|(
literal|"Server returned response code "
operator|+
name|r
argument_list|,
literal|200
argument_list|,
name|r
argument_list|)
expr_stmt|;
name|String
name|data
init|=
name|readResponse
argument_list|(
name|connect
operator|.
name|getInputStream
argument_list|()
argument_list|)
decl_stmt|;
name|int
name|hits
init|=
name|parseResponse
argument_list|(
name|data
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|hits
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|queryPostXQueryError
parameter_list|()
throws|throws
name|IOException
block|{
name|HttpURLConnection
name|connect
init|=
name|preparePost
argument_list|(
name|QUERY_REQUEST_ERROR
argument_list|,
name|RESOURCE_URI
argument_list|)
decl_stmt|;
name|connect
operator|.
name|connect
argument_list|()
expr_stmt|;
name|int
name|r
init|=
name|connect
operator|.
name|getResponseCode
argument_list|()
decl_stmt|;
name|assertEquals
argument_list|(
literal|"Server returned response code "
operator|+
name|r
argument_list|,
literal|202
argument_list|,
name|r
argument_list|)
expr_stmt|;
name|readResponse
argument_list|(
name|connect
operator|.
name|getInputStream
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|queryGet
parameter_list|()
throws|throws
name|IOException
block|{
name|String
name|uri
init|=
name|COLLECTION_URI
operator|+
literal|"?_query="
operator|+
name|URLEncoder
operator|.
name|encode
argument_list|(
literal|"doc('"
operator|+
name|XmldbURI
operator|.
name|ROOT_COLLECTION
operator|+
literal|"/test/test.xml')//para[. = '\u00E4\u00E4\u00FC\u00FC\u00F6\u00F6\u00C4\u00C4\u00D6\u00D6\u00DC\u00DC']/text()"
argument_list|,
literal|"UTF-8"
argument_list|)
decl_stmt|;
name|HttpURLConnection
name|connect
init|=
name|getConnection
argument_list|(
name|uri
argument_list|)
decl_stmt|;
name|connect
operator|.
name|setRequestMethod
argument_list|(
literal|"GET"
argument_list|)
expr_stmt|;
name|connect
operator|.
name|connect
argument_list|()
expr_stmt|;
name|int
name|r
init|=
name|connect
operator|.
name|getResponseCode
argument_list|()
decl_stmt|;
name|assertEquals
argument_list|(
literal|"Server returned response code "
operator|+
name|r
argument_list|,
literal|200
argument_list|,
name|r
argument_list|)
expr_stmt|;
name|readResponse
argument_list|(
name|connect
operator|.
name|getInputStream
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|requestModule
parameter_list|()
throws|throws
name|IOException
block|{
name|String
name|uri
init|=
name|COLLECTION_URI
operator|+
literal|"?_query=request:get-uri()&_wrap=no"
decl_stmt|;
name|HttpURLConnection
name|connect
init|=
name|getConnection
argument_list|(
name|uri
argument_list|)
decl_stmt|;
name|connect
operator|.
name|setRequestMethod
argument_list|(
literal|"GET"
argument_list|)
expr_stmt|;
name|connect
operator|.
name|connect
argument_list|()
expr_stmt|;
name|int
name|r
init|=
name|connect
operator|.
name|getResponseCode
argument_list|()
decl_stmt|;
name|assertEquals
argument_list|(
literal|"Server returned response code "
operator|+
name|r
argument_list|,
literal|200
argument_list|,
name|r
argument_list|)
expr_stmt|;
name|String
name|response
init|=
name|readResponse
argument_list|(
name|connect
operator|.
name|getInputStream
argument_list|()
argument_list|)
operator|.
name|trim
argument_list|()
decl_stmt|;
name|assertTrue
argument_list|(
name|response
operator|.
name|endsWith
argument_list|(
name|XmldbURI
operator|.
name|ROOT_COLLECTION
operator|+
literal|"/test"
argument_list|)
argument_list|)
expr_stmt|;
name|uri
operator|=
name|COLLECTION_URI
operator|+
literal|"?_query=request:get-url()&_wrap=no"
expr_stmt|;
name|connect
operator|=
name|getConnection
argument_list|(
name|uri
argument_list|)
expr_stmt|;
name|connect
operator|.
name|setRequestMethod
argument_list|(
literal|"GET"
argument_list|)
expr_stmt|;
name|connect
operator|.
name|connect
argument_list|()
expr_stmt|;
name|r
operator|=
name|connect
operator|.
name|getResponseCode
argument_list|()
expr_stmt|;
name|assertEquals
argument_list|(
literal|"Server returned response code "
operator|+
name|r
argument_list|,
literal|200
argument_list|,
name|r
argument_list|)
expr_stmt|;
name|response
operator|=
name|readResponse
argument_list|(
name|connect
operator|.
name|getInputStream
argument_list|()
argument_list|)
operator|.
name|trim
argument_list|()
expr_stmt|;
comment|//TODO : the server name may have been renamed by the Web server
name|assertTrue
argument_list|(
name|response
operator|.
name|endsWith
argument_list|(
name|XmldbURI
operator|.
name|ROOT_COLLECTION
operator|+
literal|"/test"
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|requestGetParameterFromModule
parameter_list|()
throws|throws
name|IOException
block|{
comment|/* store the documents that we need for this test */
name|doPut
argument_list|(
name|TEST_XQUERY_PARAMETER
argument_list|,
literal|"requestparameter.xql"
argument_list|,
literal|201
argument_list|)
expr_stmt|;
name|doPut
argument_list|(
name|TEST_XQUERY_PARAMETER_MODULE
argument_list|,
literal|"requestparametermod.xqm"
argument_list|,
literal|201
argument_list|)
expr_stmt|;
comment|/* execute the stored xquery a few times */
name|HttpURLConnection
name|connect
decl_stmt|;
name|int
name|iHttpResult
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
literal|5
condition|;
name|i
operator|++
control|)
block|{
name|connect
operator|=
name|getConnection
argument_list|(
name|COLLECTION_URI
operator|+
literal|"/requestparameter.xql?doc=somedoc"
operator|+
name|i
argument_list|)
expr_stmt|;
name|connect
operator|.
name|setRequestProperty
argument_list|(
literal|"Authorization"
argument_list|,
literal|"Basic "
operator|+
name|credentials
argument_list|)
expr_stmt|;
name|connect
operator|.
name|setRequestMethod
argument_list|(
literal|"GET"
argument_list|)
expr_stmt|;
name|connect
operator|.
name|connect
argument_list|()
expr_stmt|;
name|iHttpResult
operator|=
name|connect
operator|.
name|getResponseCode
argument_list|()
expr_stmt|;
name|assertEquals
argument_list|(
literal|"Server returned response code "
operator|+
name|iHttpResult
argument_list|,
literal|200
argument_list|,
name|iHttpResult
argument_list|)
expr_stmt|;
name|String
name|contentType
init|=
name|connect
operator|.
name|getContentType
argument_list|()
decl_stmt|;
name|int
name|semicolon
init|=
name|contentType
operator|.
name|indexOf
argument_list|(
literal|';'
argument_list|)
decl_stmt|;
if|if
condition|(
name|semicolon
operator|>
literal|0
condition|)
block|{
name|contentType
operator|=
name|contentType
operator|.
name|substring
argument_list|(
literal|0
argument_list|,
name|semicolon
argument_list|)
operator|.
name|trim
argument_list|()
expr_stmt|;
block|}
name|assertEquals
argument_list|(
literal|"Server returned content type "
operator|+
name|contentType
argument_list|,
literal|"application/xml"
argument_list|,
name|contentType
argument_list|)
expr_stmt|;
comment|//get the response of the query
name|String
name|response
init|=
name|readResponse
argument_list|(
name|connect
operator|.
name|getInputStream
argument_list|()
argument_list|)
decl_stmt|;
name|String
name|strXQLRequestParameter
init|=
name|response
operator|.
name|substring
argument_list|(
literal|"xql="
operator|.
name|length
argument_list|()
argument_list|,
name|response
operator|.
name|indexOf
argument_list|(
literal|"xqm="
argument_list|)
argument_list|)
decl_stmt|;
name|String
name|strXQMRequestParameter
init|=
name|response
operator|.
name|substring
argument_list|(
name|response
operator|.
name|indexOf
argument_list|(
literal|"xqm="
argument_list|)
operator|+
literal|"xqm="
operator|.
name|length
argument_list|()
argument_list|,
name|response
operator|.
name|lastIndexOf
argument_list|(
literal|"\r\n"
argument_list|)
argument_list|)
decl_stmt|;
comment|//check the responses
name|assertEquals
argument_list|(
literal|"XQuery Request Parameter is: \""
operator|+
name|strXQLRequestParameter
operator|+
literal|"\" expected: \"somedoc"
operator|+
name|i
operator|+
literal|"\""
argument_list|,
literal|"somedoc"
operator|+
name|i
argument_list|,
name|strXQLRequestParameter
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"XQuery Module Request Parameter is: \""
operator|+
name|strXQMRequestParameter
operator|+
literal|"\" expected: \"somedoc"
operator|+
name|i
operator|+
literal|"\""
argument_list|,
literal|"somedoc"
operator|+
name|i
argument_list|,
name|strXQMRequestParameter
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Test
specifier|public
name|void
name|storedQuery
parameter_list|()
throws|throws
name|IOException
block|{
name|doPut
argument_list|(
name|TEST_MODULE
argument_list|,
literal|"module.xq"
argument_list|,
literal|201
argument_list|)
expr_stmt|;
name|doPut
argument_list|(
name|TEST_XQUERY
argument_list|,
literal|"test.xq"
argument_list|,
literal|201
argument_list|)
expr_stmt|;
name|doStoredQuery
argument_list|(
literal|false
argument_list|,
literal|false
argument_list|)
expr_stmt|;
comment|// cached:
name|doStoredQuery
argument_list|(
literal|true
argument_list|,
literal|false
argument_list|)
expr_stmt|;
comment|// cached and wrapped:
name|doStoredQuery
argument_list|(
literal|true
argument_list|,
literal|true
argument_list|)
expr_stmt|;
block|}
specifier|private
name|void
name|doPut
parameter_list|(
name|String
name|data
parameter_list|,
name|String
name|path
parameter_list|,
name|int
name|responseCode
parameter_list|)
throws|throws
name|IOException
block|{
name|HttpURLConnection
name|connect
init|=
name|getConnection
argument_list|(
name|COLLECTION_URI
operator|+
literal|'/'
operator|+
name|path
argument_list|)
decl_stmt|;
name|connect
operator|.
name|setRequestProperty
argument_list|(
literal|"Authorization"
argument_list|,
literal|"Basic "
operator|+
name|credentials
argument_list|)
expr_stmt|;
name|connect
operator|.
name|setRequestMethod
argument_list|(
literal|"PUT"
argument_list|)
expr_stmt|;
name|connect
operator|.
name|setDoOutput
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|connect
operator|.
name|setRequestProperty
argument_list|(
literal|"ContentType"
argument_list|,
literal|"application/xquery"
argument_list|)
expr_stmt|;
name|Writer
name|writer
init|=
operator|new
name|OutputStreamWriter
argument_list|(
name|connect
operator|.
name|getOutputStream
argument_list|()
argument_list|,
literal|"UTF-8"
argument_list|)
decl_stmt|;
name|writer
operator|.
name|write
argument_list|(
name|data
argument_list|)
expr_stmt|;
name|writer
operator|.
name|close
argument_list|()
expr_stmt|;
name|connect
operator|.
name|connect
argument_list|()
expr_stmt|;
name|int
name|r
init|=
name|connect
operator|.
name|getResponseCode
argument_list|()
decl_stmt|;
name|assertEquals
argument_list|(
literal|"doPut: Server returned response code "
operator|+
name|r
argument_list|,
name|responseCode
argument_list|,
name|r
argument_list|)
expr_stmt|;
block|}
specifier|private
name|void
name|doStoredQuery
parameter_list|(
name|boolean
name|cacheHeader
parameter_list|,
name|boolean
name|wrap
parameter_list|)
throws|throws
name|IOException
block|{
name|String
name|uri
init|=
name|COLLECTION_URI
operator|+
literal|"/test.xq?p=Hello"
decl_stmt|;
if|if
condition|(
name|wrap
condition|)
block|{
name|uri
operator|+=
literal|"&_wrap=yes"
expr_stmt|;
block|}
name|HttpURLConnection
name|connect
init|=
name|getConnection
argument_list|(
name|uri
argument_list|)
decl_stmt|;
name|connect
operator|.
name|setRequestProperty
argument_list|(
literal|"Authorization"
argument_list|,
literal|"Basic "
operator|+
name|credentials
argument_list|)
expr_stmt|;
name|connect
operator|.
name|setRequestMethod
argument_list|(
literal|"GET"
argument_list|)
expr_stmt|;
name|connect
operator|.
name|connect
argument_list|()
expr_stmt|;
name|int
name|r
init|=
name|connect
operator|.
name|getResponseCode
argument_list|()
decl_stmt|;
name|assertEquals
argument_list|(
literal|"Server returned response code "
operator|+
name|r
argument_list|,
literal|200
argument_list|,
name|r
argument_list|)
expr_stmt|;
name|String
name|cached
init|=
name|connect
operator|.
name|getHeaderField
argument_list|(
literal|"X-XQuery-Cached"
argument_list|)
decl_stmt|;
name|assertNotNull
argument_list|(
name|cached
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|cacheHeader
argument_list|,
name|Boolean
operator|.
name|valueOf
argument_list|(
name|cached
argument_list|)
operator|.
name|booleanValue
argument_list|()
argument_list|)
expr_stmt|;
name|String
name|contentType
init|=
name|connect
operator|.
name|getContentType
argument_list|()
decl_stmt|;
name|int
name|semicolon
init|=
name|contentType
operator|.
name|indexOf
argument_list|(
literal|';'
argument_list|)
decl_stmt|;
if|if
condition|(
name|semicolon
operator|>
literal|0
condition|)
block|{
name|contentType
operator|=
name|contentType
operator|.
name|substring
argument_list|(
literal|0
argument_list|,
name|semicolon
argument_list|)
operator|.
name|trim
argument_list|()
expr_stmt|;
block|}
if|if
condition|(
name|wrap
condition|)
block|{
name|assertEquals
argument_list|(
literal|"Server returned content type "
operator|+
name|contentType
argument_list|,
literal|"application/xml"
argument_list|,
name|contentType
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|assertEquals
argument_list|(
literal|"Server returned content type "
operator|+
name|contentType
argument_list|,
literal|"text/text"
argument_list|,
name|contentType
argument_list|)
expr_stmt|;
block|}
name|String
name|response
init|=
name|readResponse
argument_list|(
name|connect
operator|.
name|getInputStream
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|wrap
condition|)
block|{
name|assertTrue
argument_list|(
literal|"Server returned response: "
operator|+
name|response
argument_list|,
name|response
operator|.
name|startsWith
argument_list|(
literal|"<exist:result "
argument_list|)
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|assertTrue
argument_list|(
literal|"Server returned response: "
operator|+
name|response
argument_list|,
name|response
operator|.
name|startsWith
argument_list|(
literal|"Hello World!"
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
specifier|private
name|int
name|uploadData
parameter_list|()
throws|throws
name|IOException
block|{
name|HttpURLConnection
name|connect
init|=
name|getConnection
argument_list|(
name|RESOURCE_URI
argument_list|)
decl_stmt|;
name|connect
operator|.
name|setRequestProperty
argument_list|(
literal|"Authorization"
argument_list|,
literal|"Basic "
operator|+
name|credentials
argument_list|)
expr_stmt|;
name|connect
operator|.
name|setRequestMethod
argument_list|(
literal|"PUT"
argument_list|)
expr_stmt|;
name|connect
operator|.
name|setDoOutput
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|connect
operator|.
name|setRequestProperty
argument_list|(
literal|"ContentType"
argument_list|,
literal|"application/xml"
argument_list|)
expr_stmt|;
name|Writer
name|writer
init|=
operator|new
name|OutputStreamWriter
argument_list|(
name|connect
operator|.
name|getOutputStream
argument_list|()
argument_list|,
literal|"UTF-8"
argument_list|)
decl_stmt|;
name|writer
operator|.
name|write
argument_list|(
name|XML_DATA
argument_list|)
expr_stmt|;
name|writer
operator|.
name|close
argument_list|()
expr_stmt|;
name|connect
operator|.
name|connect
argument_list|()
expr_stmt|;
return|return
name|connect
operator|.
name|getResponseCode
argument_list|()
return|;
block|}
specifier|private
name|void
name|doGet
parameter_list|()
throws|throws
name|IOException
block|{
name|HttpURLConnection
name|connect
init|=
name|getConnection
argument_list|(
name|RESOURCE_URI
argument_list|)
decl_stmt|;
name|connect
operator|.
name|setRequestMethod
argument_list|(
literal|"GET"
argument_list|)
expr_stmt|;
name|connect
operator|.
name|connect
argument_list|()
expr_stmt|;
name|int
name|r
init|=
name|connect
operator|.
name|getResponseCode
argument_list|()
decl_stmt|;
name|assertEquals
argument_list|(
literal|"Server returned response code "
operator|+
name|r
argument_list|,
literal|200
argument_list|,
name|r
argument_list|)
expr_stmt|;
name|String
name|contentType
init|=
name|connect
operator|.
name|getContentType
argument_list|()
decl_stmt|;
name|int
name|semicolon
init|=
name|contentType
operator|.
name|indexOf
argument_list|(
literal|';'
argument_list|)
decl_stmt|;
if|if
condition|(
name|semicolon
operator|>
literal|0
condition|)
block|{
name|contentType
operator|=
name|contentType
operator|.
name|substring
argument_list|(
literal|0
argument_list|,
name|semicolon
argument_list|)
operator|.
name|trim
argument_list|()
expr_stmt|;
block|}
name|assertEquals
argument_list|(
literal|"Server returned content type "
operator|+
name|contentType
argument_list|,
literal|"application/xml"
argument_list|,
name|contentType
argument_list|)
expr_stmt|;
name|readResponse
argument_list|(
name|connect
operator|.
name|getInputStream
argument_list|()
argument_list|)
expr_stmt|;
block|}
specifier|private
name|int
name|uploadDataPlus
parameter_list|()
throws|throws
name|IOException
block|{
name|HttpURLConnection
name|connect
init|=
name|getConnection
argument_list|(
name|RESOURCE_URI_PLUS
argument_list|)
decl_stmt|;
name|connect
operator|.
name|setRequestProperty
argument_list|(
literal|"Authorization"
argument_list|,
literal|"Basic "
operator|+
name|credentials
argument_list|)
expr_stmt|;
name|connect
operator|.
name|setRequestMethod
argument_list|(
literal|"PUT"
argument_list|)
expr_stmt|;
name|connect
operator|.
name|setDoOutput
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|connect
operator|.
name|setRequestProperty
argument_list|(
literal|"ContentType"
argument_list|,
literal|"application/xml"
argument_list|)
expr_stmt|;
name|Writer
name|writer
init|=
operator|new
name|OutputStreamWriter
argument_list|(
name|connect
operator|.
name|getOutputStream
argument_list|()
argument_list|,
literal|"UTF-8"
argument_list|)
decl_stmt|;
name|writer
operator|.
name|write
argument_list|(
name|XML_DATA
argument_list|)
expr_stmt|;
name|writer
operator|.
name|close
argument_list|()
expr_stmt|;
name|connect
operator|.
name|connect
argument_list|()
expr_stmt|;
return|return
name|connect
operator|.
name|getResponseCode
argument_list|()
return|;
block|}
specifier|private
name|void
name|doGetPlus
parameter_list|()
throws|throws
name|IOException
block|{
name|HttpURLConnection
name|connect
init|=
name|getConnection
argument_list|(
name|RESOURCE_URI_PLUS
argument_list|)
decl_stmt|;
name|connect
operator|.
name|setRequestMethod
argument_list|(
literal|"GET"
argument_list|)
expr_stmt|;
name|connect
operator|.
name|connect
argument_list|()
expr_stmt|;
name|int
name|r
init|=
name|connect
operator|.
name|getResponseCode
argument_list|()
decl_stmt|;
name|assertEquals
argument_list|(
literal|"Server returned response code "
operator|+
name|r
argument_list|,
literal|200
argument_list|,
name|r
argument_list|)
expr_stmt|;
name|String
name|contentType
init|=
name|connect
operator|.
name|getContentType
argument_list|()
decl_stmt|;
name|int
name|semicolon
init|=
name|contentType
operator|.
name|indexOf
argument_list|(
literal|';'
argument_list|)
decl_stmt|;
if|if
condition|(
name|semicolon
operator|>
literal|0
condition|)
block|{
name|contentType
operator|=
name|contentType
operator|.
name|substring
argument_list|(
literal|0
argument_list|,
name|semicolon
argument_list|)
operator|.
name|trim
argument_list|()
expr_stmt|;
block|}
name|assertEquals
argument_list|(
literal|"Server returned content type "
operator|+
name|contentType
argument_list|,
literal|"application/xml"
argument_list|,
name|contentType
argument_list|)
expr_stmt|;
name|readResponse
argument_list|(
name|connect
operator|.
name|getInputStream
argument_list|()
argument_list|)
expr_stmt|;
block|}
specifier|private
name|HttpURLConnection
name|preparePost
parameter_list|(
name|String
name|content
parameter_list|,
name|String
name|path
parameter_list|)
throws|throws
name|IOException
block|{
name|HttpURLConnection
name|connect
init|=
name|getConnection
argument_list|(
name|path
argument_list|)
decl_stmt|;
name|connect
operator|.
name|setRequestProperty
argument_list|(
literal|"Authorization"
argument_list|,
literal|"Basic "
operator|+
name|credentials
argument_list|)
expr_stmt|;
name|connect
operator|.
name|setRequestMethod
argument_list|(
literal|"POST"
argument_list|)
expr_stmt|;
name|connect
operator|.
name|setDoOutput
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|connect
operator|.
name|setRequestProperty
argument_list|(
literal|"Content-Type"
argument_list|,
literal|"application/xml"
argument_list|)
expr_stmt|;
name|Writer
name|writer
init|=
operator|new
name|OutputStreamWriter
argument_list|(
name|connect
operator|.
name|getOutputStream
argument_list|()
argument_list|,
literal|"UTF-8"
argument_list|)
decl_stmt|;
name|writer
operator|.
name|write
argument_list|(
name|content
argument_list|)
expr_stmt|;
name|writer
operator|.
name|close
argument_list|()
expr_stmt|;
return|return
name|connect
return|;
block|}
specifier|private
name|String
name|readResponse
parameter_list|(
name|InputStream
name|is
parameter_list|)
throws|throws
name|IOException
block|{
name|BufferedReader
name|reader
init|=
operator|new
name|BufferedReader
argument_list|(
operator|new
name|InputStreamReader
argument_list|(
name|is
argument_list|,
literal|"UTF-8"
argument_list|)
argument_list|)
decl_stmt|;
name|String
name|line
decl_stmt|;
name|StringBuilder
name|out
init|=
operator|new
name|StringBuilder
argument_list|()
decl_stmt|;
while|while
condition|(
operator|(
name|line
operator|=
name|reader
operator|.
name|readLine
argument_list|()
operator|)
operator|!=
literal|null
condition|)
block|{
name|out
operator|.
name|append
argument_list|(
name|line
argument_list|)
expr_stmt|;
name|out
operator|.
name|append
argument_list|(
literal|"\r\n"
argument_list|)
expr_stmt|;
block|}
return|return
name|out
operator|.
name|toString
argument_list|()
return|;
block|}
specifier|private
name|int
name|parseResponse
parameter_list|(
name|String
name|data
parameter_list|)
throws|throws
name|IOException
throws|,
name|SAXException
throws|,
name|ParserConfigurationException
block|{
name|SAXParserFactory
name|factory
init|=
name|SAXParserFactory
operator|.
name|newInstance
argument_list|()
decl_stmt|;
name|factory
operator|.
name|setNamespaceAware
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|InputSource
name|src
init|=
operator|new
name|InputSource
argument_list|(
operator|new
name|StringReader
argument_list|(
name|data
argument_list|)
argument_list|)
decl_stmt|;
name|SAXParser
name|parser
init|=
name|factory
operator|.
name|newSAXParser
argument_list|()
decl_stmt|;
name|XMLReader
name|reader
init|=
name|parser
operator|.
name|getXMLReader
argument_list|()
decl_stmt|;
name|SAXAdapter
name|adapter
init|=
operator|new
name|SAXAdapter
argument_list|()
decl_stmt|;
name|reader
operator|.
name|setContentHandler
argument_list|(
name|adapter
argument_list|)
expr_stmt|;
name|reader
operator|.
name|parse
argument_list|(
name|src
argument_list|)
expr_stmt|;
name|Document
name|doc
init|=
name|adapter
operator|.
name|getDocument
argument_list|()
decl_stmt|;
name|Element
name|root
init|=
name|doc
operator|.
name|getDocumentElement
argument_list|()
decl_stmt|;
name|String
name|hits
init|=
name|root
operator|.
name|getAttributeNS
argument_list|(
name|Namespaces
operator|.
name|EXIST_NS
argument_list|,
literal|"hits"
argument_list|)
decl_stmt|;
return|return
name|Integer
operator|.
name|parseInt
argument_list|(
name|hits
argument_list|)
return|;
block|}
specifier|private
name|HttpURLConnection
name|getConnection
parameter_list|(
name|String
name|url
parameter_list|)
throws|throws
name|IOException
block|{
name|URL
name|u
init|=
operator|new
name|URL
argument_list|(
name|url
argument_list|)
decl_stmt|;
return|return
operator|(
name|HttpURLConnection
operator|)
name|u
operator|.
name|openConnection
argument_list|()
return|;
block|}
block|}
end_class

end_unit

