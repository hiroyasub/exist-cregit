begin_unit|revision:1.0.0;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  *  eXist Open Source Native XML Database  *  Copyright (C) 2001-04 Wolfgang M. Meier (wolfgang@exist-db.org)   *  and others (see http://exist-db.org)  *  *  This program is free software; you can redistribute it and/or  *  modify it under the terms of the GNU Lesser General Public License  *  as published by the Free Software Foundation; either version 2  *  of the License, or (at your option) any later version.  *  *  This program is distributed in the hope that it will be useful,  *  but WITHOUT ANY WARRANTY; without even the implied warranty of  *  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the  *  GNU Lesser General Public License for more details.  *  *  You should have received a copy of the GNU Lesser General Public License  *  along with this program; if not, write to the Free Software  *  Foundation, Inc., 675 Mass Ave, Cambridge, MA 02139, USA.  *   *  $Id$  */
end_comment

begin_package
package|package
name|org
operator|.
name|exist
operator|.
name|http
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|BufferedReader
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|InputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|InputStreamReader
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|OutputStreamWriter
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|Writer
import|;
end_import

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|BindException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|HttpURLConnection
import|;
end_import

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|URL
import|;
end_import

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|URLEncoder
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Iterator
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|junit
operator|.
name|framework
operator|.
name|TestCase
import|;
end_import

begin_import
import|import
name|junit
operator|.
name|textui
operator|.
name|TestRunner
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|Namespaces
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|StandaloneServer
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|storage
operator|.
name|DBBroker
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|util
operator|.
name|Base64Encoder
import|;
end_import

begin_import
import|import
name|org
operator|.
name|mortbay
operator|.
name|util
operator|.
name|MultiException
import|;
end_import

begin_comment
comment|/** A test case for accessing a remote server via REST-Style Web API.  * @author wolf  * @author Pierrick Brihaye<pierrick.brihaye@free.fr>  */
end_comment

begin_class
specifier|public
class|class
name|RESTServiceTest
extends|extends
name|TestCase
block|{
specifier|private
specifier|static
name|StandaloneServer
name|server
init|=
literal|null
decl_stmt|;
specifier|private
specifier|final
specifier|static
name|String
name|SERVER_URI
init|=
literal|"http://localhost:8088"
decl_stmt|;
specifier|private
specifier|final
specifier|static
name|String
name|COLLECTION_URI
init|=
name|SERVER_URI
operator|+
name|DBBroker
operator|.
name|ROOT_COLLECTION
operator|+
literal|"/test"
decl_stmt|;
specifier|private
specifier|final
specifier|static
name|String
name|RESOURCE_URI
init|=
name|SERVER_URI
operator|+
name|DBBroker
operator|.
name|ROOT_COLLECTION
operator|+
literal|"/test/test.xml"
decl_stmt|;
specifier|private
specifier|final
specifier|static
name|String
name|XML_DATA
init|=
literal|"<test>"
operator|+
literal|"<para>\u00E4\u00E4\u00FC\u00FC\u00F6\u00F6\u00C4\u00C4\u00D6\u00D6\u00DC\u00DC</para>"
operator|+
literal|"</test>"
decl_stmt|;
specifier|private
specifier|final
specifier|static
name|String
name|XUPDATE
init|=
literal|"<xu:modifications xmlns:xu=\"http://www.xmldb.org/xupdate\" version=\"1.0\">"
operator|+
literal|"<xu:append select=\"/test\" child=\"1\">"
operator|+
literal|"<para>Inserted paragraph.</para>"
operator|+
literal|"</xu:append>"
operator|+
literal|"</xu:modifications>"
decl_stmt|;
specifier|private
specifier|final
specifier|static
name|String
name|QUERY_REQUEST
init|=
literal|"<?xml version=\"1.0\" encoding=\"UTF-8\"?>"
operator|+
literal|"<query xmlns=\""
operator|+
name|Namespaces
operator|.
name|EXIST_NS
operator|+
literal|"\">"
operator|+
literal|"<properties>"
operator|+
literal|"<property name=\"indent\" value=\"yes\"/>"
operator|+
literal|"<property name=\"encoding\" value=\"UTF-8\"/>"
operator|+
literal|"</properties>"
operator|+
literal|"<text>"
operator|+
literal|"xquery version \"1.0\";"
operator|+
literal|"(::pragma exist:serialize indent=no ::)"
operator|+
literal|"//para[. = '\u00E4\u00E4\u00FC\u00FC\u00F6\u00F6\u00C4\u00C4\u00D6\u00D6\u00DC\u00DC']/text()"
operator|+
literal|"</text>"
operator|+
literal|"</query>"
decl_stmt|;
specifier|private
specifier|final
specifier|static
name|String
name|TEST_MODULE
init|=
literal|"module namespace t=\"http://test.foo\";\n"
operator|+
literal|"declare variable $t:VAR { 'World!' };"
decl_stmt|;
specifier|private
specifier|final
specifier|static
name|String
name|TEST_XQUERY
init|=
literal|"xquery version \"1.0\";\n"
operator|+
literal|"declare option exist:serialize \"method=text media-type=text/text\";\n"
operator|+
literal|"import module namespace req=\"http://exist-db.org/xquery/request\";\n"
operator|+
literal|"import module namespace t=\"http://test.foo\" at \"module.xq\";\n"
operator|+
literal|"let $param := req:get-parameter('p', ())\n"
operator|+
literal|"return\n"
operator|+
literal|"	($param, ' ', $t:VAR)"
decl_stmt|;
specifier|private
specifier|final
specifier|static
name|String
name|TEST_XQUERY_PARAMETER
init|=
literal|"xquery version \"1.0\";\n"
operator|+
literal|"declare namespace request=\"http://exist-db.org/xquery/request\";\n"
operator|+
literal|"import module namespace requestparametermod=\"http://exist-db.org/xquery/requestparametermod\" at \"requestparametermod.xqm\";\n"
operator|+
literal|"concat(\"xql=\", request:get-parameter(\"doc\",())),\n"
operator|+
literal|"concat(\"xqm=\", $requestparametermod:request)"
decl_stmt|;
specifier|private
specifier|final
specifier|static
name|String
name|TEST_XQUERY_PARAMETER_MODULE
init|=
literal|"module namespace requestparametermod = \"http://exist-db.org/xquery/requestparametermod\";\n"
operator|+
literal|"declare namespace request=\"http://exist-db.org/xquery/request\";\n"
operator|+
literal|"declare variable $requestparametermod:request { request:get-parameter(\"doc\",())};\n"
decl_stmt|;
specifier|private
name|String
name|credentials
decl_stmt|;
specifier|public
name|RESTServiceTest
parameter_list|(
name|String
name|name
parameter_list|)
block|{
name|super
argument_list|(
name|name
argument_list|)
expr_stmt|;
name|Base64Encoder
name|enc
init|=
operator|new
name|Base64Encoder
argument_list|()
decl_stmt|;
name|enc
operator|.
name|translate
argument_list|(
literal|"admin:"
operator|.
name|getBytes
argument_list|()
argument_list|)
expr_stmt|;
name|credentials
operator|=
operator|new
name|String
argument_list|(
name|enc
operator|.
name|getCharArray
argument_list|()
argument_list|)
expr_stmt|;
block|}
specifier|protected
name|void
name|setUp
parameter_list|()
block|{
comment|//Don't worry about closing the server : the shutdown hook will do the job
try|try
block|{
if|if
condition|(
name|server
operator|==
literal|null
condition|)
block|{
name|server
operator|=
operator|new
name|StandaloneServer
argument_list|()
expr_stmt|;
if|if
condition|(
operator|!
name|server
operator|.
name|isStarted
argument_list|()
condition|)
block|{
try|try
block|{
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"Starting standalone server..."
argument_list|)
expr_stmt|;
name|String
index|[]
name|args
init|=
block|{}
decl_stmt|;
name|server
operator|.
name|run
argument_list|(
name|args
argument_list|)
expr_stmt|;
while|while
condition|(
operator|!
name|server
operator|.
name|isStarted
argument_list|()
condition|)
block|{
name|Thread
operator|.
name|sleep
argument_list|(
literal|1000
argument_list|)
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
name|MultiException
name|e
parameter_list|)
block|{
name|boolean
name|rethrow
init|=
literal|true
decl_stmt|;
name|Iterator
name|i
init|=
name|e
operator|.
name|getExceptions
argument_list|()
operator|.
name|iterator
argument_list|()
decl_stmt|;
while|while
condition|(
name|i
operator|.
name|hasNext
argument_list|()
condition|)
block|{
name|Exception
name|e0
init|=
operator|(
name|Exception
operator|)
name|i
operator|.
name|next
argument_list|()
decl_stmt|;
if|if
condition|(
name|e0
operator|instanceof
name|BindException
condition|)
block|{
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"A server is running already !"
argument_list|)
expr_stmt|;
name|rethrow
operator|=
literal|false
expr_stmt|;
break|break;
block|}
block|}
if|if
condition|(
name|rethrow
condition|)
throw|throw
name|e
throw|;
block|}
block|}
block|}
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|fail
argument_list|(
name|e
operator|.
name|getMessage
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
specifier|public
name|void
name|testPut
parameter_list|()
block|{
try|try
block|{
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"--- Storing document ---"
argument_list|)
expr_stmt|;
name|HttpURLConnection
name|connect
init|=
name|getConnection
argument_list|(
name|RESOURCE_URI
argument_list|)
decl_stmt|;
name|connect
operator|.
name|setRequestProperty
argument_list|(
literal|"Authorization"
argument_list|,
literal|"Basic "
operator|+
name|credentials
argument_list|)
expr_stmt|;
name|connect
operator|.
name|setRequestMethod
argument_list|(
literal|"PUT"
argument_list|)
expr_stmt|;
name|connect
operator|.
name|setDoOutput
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|connect
operator|.
name|setRequestProperty
argument_list|(
literal|"ContentType"
argument_list|,
literal|"text/xml"
argument_list|)
expr_stmt|;
name|Writer
name|writer
init|=
operator|new
name|OutputStreamWriter
argument_list|(
name|connect
operator|.
name|getOutputStream
argument_list|()
argument_list|,
literal|"UTF-8"
argument_list|)
decl_stmt|;
name|writer
operator|.
name|write
argument_list|(
name|XML_DATA
argument_list|)
expr_stmt|;
name|writer
operator|.
name|close
argument_list|()
expr_stmt|;
name|connect
operator|.
name|connect
argument_list|()
expr_stmt|;
name|int
name|r
init|=
name|connect
operator|.
name|getResponseCode
argument_list|()
decl_stmt|;
name|assertEquals
argument_list|(
literal|"Server returned response code "
operator|+
name|r
argument_list|,
literal|201
argument_list|,
name|r
argument_list|)
expr_stmt|;
name|doGet
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|fail
argument_list|(
name|e
operator|.
name|getMessage
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
specifier|public
name|void
name|testPutFailAgainstCollection
parameter_list|()
block|{
try|try
block|{
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"--- Storing document against collection URI - should fail ---"
argument_list|)
expr_stmt|;
name|HttpURLConnection
name|connect
init|=
name|getConnection
argument_list|(
name|COLLECTION_URI
argument_list|)
decl_stmt|;
name|connect
operator|.
name|setRequestProperty
argument_list|(
literal|"Authorization"
argument_list|,
literal|"Basic "
operator|+
name|credentials
argument_list|)
expr_stmt|;
name|connect
operator|.
name|setRequestMethod
argument_list|(
literal|"PUT"
argument_list|)
expr_stmt|;
name|connect
operator|.
name|setDoOutput
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|connect
operator|.
name|setRequestProperty
argument_list|(
literal|"ContentType"
argument_list|,
literal|"text/xml"
argument_list|)
expr_stmt|;
name|Writer
name|writer
init|=
operator|new
name|OutputStreamWriter
argument_list|(
name|connect
operator|.
name|getOutputStream
argument_list|()
argument_list|,
literal|"UTF-8"
argument_list|)
decl_stmt|;
name|writer
operator|.
name|write
argument_list|(
name|XML_DATA
argument_list|)
expr_stmt|;
name|writer
operator|.
name|close
argument_list|()
expr_stmt|;
name|connect
operator|.
name|connect
argument_list|()
expr_stmt|;
name|int
name|r
init|=
name|connect
operator|.
name|getResponseCode
argument_list|()
decl_stmt|;
name|assertEquals
argument_list|(
literal|"Server returned response code "
operator|+
name|r
argument_list|,
literal|400
argument_list|,
name|r
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|fail
argument_list|(
name|e
operator|.
name|getMessage
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
specifier|public
name|void
name|testPutWithCharset
parameter_list|()
block|{
try|try
block|{
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"--- Storing document ---"
argument_list|)
expr_stmt|;
name|HttpURLConnection
name|connect
init|=
name|getConnection
argument_list|(
name|RESOURCE_URI
argument_list|)
decl_stmt|;
name|connect
operator|.
name|setRequestProperty
argument_list|(
literal|"Authorization"
argument_list|,
literal|"Basic "
operator|+
name|credentials
argument_list|)
expr_stmt|;
name|connect
operator|.
name|setRequestMethod
argument_list|(
literal|"PUT"
argument_list|)
expr_stmt|;
name|connect
operator|.
name|setDoOutput
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|connect
operator|.
name|setRequestProperty
argument_list|(
literal|"ContentType"
argument_list|,
literal|"text/xml; charset=UTF-8"
argument_list|)
expr_stmt|;
name|Writer
name|writer
init|=
operator|new
name|OutputStreamWriter
argument_list|(
name|connect
operator|.
name|getOutputStream
argument_list|()
argument_list|,
literal|"UTF-8"
argument_list|)
decl_stmt|;
name|writer
operator|.
name|write
argument_list|(
name|XML_DATA
argument_list|)
expr_stmt|;
name|writer
operator|.
name|close
argument_list|()
expr_stmt|;
name|connect
operator|.
name|connect
argument_list|()
expr_stmt|;
name|int
name|r
init|=
name|connect
operator|.
name|getResponseCode
argument_list|()
decl_stmt|;
name|assertEquals
argument_list|(
literal|"Server returned response code "
operator|+
name|r
argument_list|,
literal|201
argument_list|,
name|r
argument_list|)
expr_stmt|;
name|doGet
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|fail
argument_list|(
name|e
operator|.
name|getMessage
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
specifier|public
name|void
name|testXUpdate
parameter_list|()
block|{
try|try
block|{
name|HttpURLConnection
name|connect
init|=
name|preparePost
argument_list|(
name|XUPDATE
argument_list|)
decl_stmt|;
name|connect
operator|.
name|connect
argument_list|()
expr_stmt|;
name|int
name|r
init|=
name|connect
operator|.
name|getResponseCode
argument_list|()
decl_stmt|;
name|assertEquals
argument_list|(
literal|"Server returned response code "
operator|+
name|r
argument_list|,
literal|200
argument_list|,
name|r
argument_list|)
expr_stmt|;
name|doGet
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|fail
argument_list|(
name|e
operator|.
name|getMessage
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
specifier|public
name|void
name|testQueryPost
parameter_list|()
block|{
try|try
block|{
name|HttpURLConnection
name|connect
init|=
name|preparePost
argument_list|(
name|QUERY_REQUEST
argument_list|)
decl_stmt|;
name|connect
operator|.
name|connect
argument_list|()
expr_stmt|;
name|int
name|r
init|=
name|connect
operator|.
name|getResponseCode
argument_list|()
decl_stmt|;
name|assertEquals
argument_list|(
literal|"Server returned response code "
operator|+
name|r
argument_list|,
literal|200
argument_list|,
name|r
argument_list|)
expr_stmt|;
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
name|readResponse
argument_list|(
name|connect
operator|.
name|getInputStream
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|fail
argument_list|(
name|e
operator|.
name|getMessage
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
specifier|public
name|void
name|testQueryGet
parameter_list|()
block|{
try|try
block|{
name|String
name|uri
init|=
name|COLLECTION_URI
operator|+
literal|"?_query="
operator|+
name|URLEncoder
operator|.
name|encode
argument_list|(
literal|"doc('"
operator|+
name|DBBroker
operator|.
name|ROOT_COLLECTION
operator|+
literal|"/test/test.xml')//para[. = '\u00E4\u00E4\u00FC\u00FC\u00F6\u00F6\u00C4\u00C4\u00D6\u00D6\u00DC\u00DC']/text()"
argument_list|,
literal|"UTF-8"
argument_list|)
decl_stmt|;
name|HttpURLConnection
name|connect
init|=
name|getConnection
argument_list|(
name|uri
argument_list|)
decl_stmt|;
name|connect
operator|.
name|setRequestMethod
argument_list|(
literal|"GET"
argument_list|)
expr_stmt|;
name|connect
operator|.
name|connect
argument_list|()
expr_stmt|;
name|int
name|r
init|=
name|connect
operator|.
name|getResponseCode
argument_list|()
decl_stmt|;
name|assertEquals
argument_list|(
literal|"Server returned response code "
operator|+
name|r
argument_list|,
literal|200
argument_list|,
name|r
argument_list|)
expr_stmt|;
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
name|readResponse
argument_list|(
name|connect
operator|.
name|getInputStream
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|fail
argument_list|(
name|e
operator|.
name|getMessage
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
specifier|public
name|void
name|testRequestModule
parameter_list|()
block|{
try|try
block|{
name|String
name|uri
init|=
name|COLLECTION_URI
operator|+
literal|"?_query=request:get-uri()&_wrap=no"
decl_stmt|;
name|HttpURLConnection
name|connect
init|=
name|getConnection
argument_list|(
name|uri
argument_list|)
decl_stmt|;
name|connect
operator|.
name|setRequestMethod
argument_list|(
literal|"GET"
argument_list|)
expr_stmt|;
name|connect
operator|.
name|connect
argument_list|()
expr_stmt|;
name|int
name|r
init|=
name|connect
operator|.
name|getResponseCode
argument_list|()
decl_stmt|;
name|assertEquals
argument_list|(
literal|"Server returned response code "
operator|+
name|r
argument_list|,
literal|200
argument_list|,
name|r
argument_list|)
expr_stmt|;
name|String
name|response
init|=
name|readResponse
argument_list|(
name|connect
operator|.
name|getInputStream
argument_list|()
argument_list|)
operator|.
name|trim
argument_list|()
decl_stmt|;
name|assertEquals
argument_list|(
name|response
argument_list|,
name|DBBroker
operator|.
name|ROOT_COLLECTION
operator|+
literal|"/test"
argument_list|)
expr_stmt|;
name|uri
operator|=
name|COLLECTION_URI
operator|+
literal|"?_query=request:get-url()&_wrap=no"
expr_stmt|;
name|connect
operator|=
name|getConnection
argument_list|(
name|uri
argument_list|)
expr_stmt|;
name|connect
operator|.
name|setRequestMethod
argument_list|(
literal|"GET"
argument_list|)
expr_stmt|;
name|connect
operator|.
name|connect
argument_list|()
expr_stmt|;
name|r
operator|=
name|connect
operator|.
name|getResponseCode
argument_list|()
expr_stmt|;
name|assertEquals
argument_list|(
literal|"Server returned response code "
operator|+
name|r
argument_list|,
literal|200
argument_list|,
name|r
argument_list|)
expr_stmt|;
name|response
operator|=
name|readResponse
argument_list|(
name|connect
operator|.
name|getInputStream
argument_list|()
argument_list|)
operator|.
name|trim
argument_list|()
expr_stmt|;
comment|//TODO : the server name may have been renamed by the Web server
name|assertEquals
argument_list|(
name|response
argument_list|,
name|SERVER_URI
operator|+
name|DBBroker
operator|.
name|ROOT_COLLECTION
operator|+
literal|"/test"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|fail
argument_list|(
name|e
operator|.
name|getMessage
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
specifier|public
name|void
name|testRequestGetParameterFromModule
parameter_list|()
block|{
try|try
block|{
comment|/* store the documents that we need for this test */
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"--- Storing xquery and module ---"
argument_list|)
expr_stmt|;
name|doPut
argument_list|(
name|TEST_XQUERY_PARAMETER
argument_list|,
literal|"requestparameter.xql"
argument_list|)
expr_stmt|;
name|doPut
argument_list|(
name|TEST_XQUERY_PARAMETER_MODULE
argument_list|,
literal|"requestparametermod.xqm"
argument_list|)
expr_stmt|;
comment|/* execute the stored xquery a few times */
name|HttpURLConnection
name|connect
decl_stmt|;
name|int
name|iHttpResult
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
literal|5
condition|;
name|i
operator|++
control|)
block|{
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"--- Executing stored xquery, iteration="
operator|+
name|i
operator|+
literal|" ---"
argument_list|)
expr_stmt|;
name|connect
operator|=
name|getConnection
argument_list|(
name|COLLECTION_URI
operator|+
literal|"/requestparameter.xql?doc=somedoc"
operator|+
name|i
argument_list|)
expr_stmt|;
name|connect
operator|.
name|setRequestMethod
argument_list|(
literal|"GET"
argument_list|)
expr_stmt|;
name|connect
operator|.
name|connect
argument_list|()
expr_stmt|;
name|iHttpResult
operator|=
name|connect
operator|.
name|getResponseCode
argument_list|()
expr_stmt|;
name|assertEquals
argument_list|(
literal|"Server returned response code "
operator|+
name|iHttpResult
argument_list|,
literal|200
argument_list|,
name|iHttpResult
argument_list|)
expr_stmt|;
name|String
name|contentType
init|=
name|connect
operator|.
name|getContentType
argument_list|()
decl_stmt|;
name|int
name|semicolon
init|=
name|contentType
operator|.
name|indexOf
argument_list|(
literal|';'
argument_list|)
decl_stmt|;
if|if
condition|(
name|semicolon
operator|>
literal|0
condition|)
block|{
name|contentType
operator|=
name|contentType
operator|.
name|substring
argument_list|(
literal|0
argument_list|,
name|semicolon
argument_list|)
operator|.
name|trim
argument_list|()
expr_stmt|;
block|}
name|assertEquals
argument_list|(
literal|"Server returned content type "
operator|+
name|contentType
argument_list|,
literal|"text/xml"
argument_list|,
name|contentType
argument_list|)
expr_stmt|;
comment|//get the response of the query
name|String
name|response
init|=
name|readResponse
argument_list|(
name|connect
operator|.
name|getInputStream
argument_list|()
argument_list|)
decl_stmt|;
name|String
name|strXQLRequestParameter
init|=
name|response
operator|.
name|substring
argument_list|(
literal|"xql="
operator|.
name|length
argument_list|()
argument_list|,
name|response
operator|.
name|indexOf
argument_list|(
literal|"xqm="
argument_list|)
argument_list|)
decl_stmt|;
name|String
name|strXQMRequestParameter
init|=
name|response
operator|.
name|substring
argument_list|(
name|response
operator|.
name|indexOf
argument_list|(
literal|"xqm="
argument_list|)
operator|+
literal|"xqm="
operator|.
name|length
argument_list|()
argument_list|,
name|response
operator|.
name|lastIndexOf
argument_list|(
literal|"\r\n"
argument_list|)
argument_list|)
decl_stmt|;
comment|//check the responses
name|assertEquals
argument_list|(
literal|"XQuery Request Parameter is: \""
operator|+
name|strXQLRequestParameter
operator|+
literal|"\" expected: \"somedoc"
operator|+
name|i
operator|+
literal|"\""
argument_list|,
literal|"somedoc"
operator|+
name|i
argument_list|,
name|strXQLRequestParameter
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"XQuery Module Request Parameter is: \""
operator|+
name|strXQMRequestParameter
operator|+
literal|"\" expected: \"somedoc"
operator|+
name|i
operator|+
literal|"\""
argument_list|,
literal|"somedoc"
operator|+
name|i
argument_list|,
name|strXQMRequestParameter
argument_list|)
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|fail
argument_list|(
name|e
operator|.
name|getMessage
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
specifier|public
name|void
name|testStoredQuery
parameter_list|()
block|{
try|try
block|{
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"--- Storing query ---"
argument_list|)
expr_stmt|;
name|doPut
argument_list|(
name|TEST_MODULE
argument_list|,
literal|"module.xq"
argument_list|)
expr_stmt|;
name|doPut
argument_list|(
name|TEST_XQUERY
argument_list|,
literal|"test.xq"
argument_list|)
expr_stmt|;
name|doStoredQuery
argument_list|(
literal|false
argument_list|)
expr_stmt|;
name|doStoredQuery
argument_list|(
literal|true
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|fail
argument_list|(
name|e
operator|.
name|getMessage
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
specifier|protected
name|void
name|doPut
parameter_list|(
name|String
name|data
parameter_list|,
name|String
name|path
parameter_list|)
block|{
try|try
block|{
name|HttpURLConnection
name|connect
init|=
name|getConnection
argument_list|(
name|COLLECTION_URI
operator|+
literal|'/'
operator|+
name|path
argument_list|)
decl_stmt|;
name|connect
operator|.
name|setRequestProperty
argument_list|(
literal|"Authorization"
argument_list|,
literal|"Basic "
operator|+
name|credentials
argument_list|)
expr_stmt|;
name|connect
operator|.
name|setRequestMethod
argument_list|(
literal|"PUT"
argument_list|)
expr_stmt|;
name|connect
operator|.
name|setDoOutput
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|connect
operator|.
name|setRequestProperty
argument_list|(
literal|"ContentType"
argument_list|,
literal|"application/xquery"
argument_list|)
expr_stmt|;
name|Writer
name|writer
init|=
operator|new
name|OutputStreamWriter
argument_list|(
name|connect
operator|.
name|getOutputStream
argument_list|()
argument_list|,
literal|"UTF-8"
argument_list|)
decl_stmt|;
name|writer
operator|.
name|write
argument_list|(
name|data
argument_list|)
expr_stmt|;
name|writer
operator|.
name|close
argument_list|()
expr_stmt|;
name|connect
operator|.
name|connect
argument_list|()
expr_stmt|;
name|int
name|r
init|=
name|connect
operator|.
name|getResponseCode
argument_list|()
decl_stmt|;
name|assertEquals
argument_list|(
literal|"Server returned response code "
operator|+
name|r
argument_list|,
literal|201
argument_list|,
name|r
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|fail
argument_list|(
name|e
operator|.
name|getMessage
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
specifier|protected
name|void
name|doStoredQuery
parameter_list|(
name|boolean
name|cacheHeader
parameter_list|)
block|{
try|try
block|{
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"--- Calling query: "
operator|+
name|COLLECTION_URI
operator|+
literal|"/test.xq?p=Hello"
argument_list|)
expr_stmt|;
name|HttpURLConnection
name|connect
init|=
name|getConnection
argument_list|(
name|COLLECTION_URI
operator|+
literal|"/test.xq?p=Hello"
argument_list|)
decl_stmt|;
name|connect
operator|.
name|setRequestMethod
argument_list|(
literal|"GET"
argument_list|)
expr_stmt|;
name|connect
operator|.
name|connect
argument_list|()
expr_stmt|;
name|int
name|r
init|=
name|connect
operator|.
name|getResponseCode
argument_list|()
decl_stmt|;
name|assertEquals
argument_list|(
literal|"Server returned response code "
operator|+
name|r
argument_list|,
literal|200
argument_list|,
name|r
argument_list|)
expr_stmt|;
name|dumpHeaders
argument_list|(
name|connect
argument_list|)
expr_stmt|;
name|String
name|cached
init|=
name|connect
operator|.
name|getHeaderField
argument_list|(
literal|"X-XQuery-Cached"
argument_list|)
decl_stmt|;
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"X-XQuery-Cached: "
operator|+
name|cached
argument_list|)
expr_stmt|;
name|assertNotNull
argument_list|(
name|cached
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|cacheHeader
argument_list|,
name|Boolean
operator|.
name|valueOf
argument_list|(
name|cached
argument_list|)
operator|.
name|booleanValue
argument_list|()
argument_list|)
expr_stmt|;
name|String
name|contentType
init|=
name|connect
operator|.
name|getContentType
argument_list|()
decl_stmt|;
name|int
name|semicolon
init|=
name|contentType
operator|.
name|indexOf
argument_list|(
literal|';'
argument_list|)
decl_stmt|;
if|if
condition|(
name|semicolon
operator|>
literal|0
condition|)
block|{
name|contentType
operator|=
name|contentType
operator|.
name|substring
argument_list|(
literal|0
argument_list|,
name|semicolon
argument_list|)
operator|.
name|trim
argument_list|()
expr_stmt|;
block|}
name|assertEquals
argument_list|(
literal|"Server returned content type "
operator|+
name|contentType
argument_list|,
literal|"text/text"
argument_list|,
name|contentType
argument_list|)
expr_stmt|;
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|'"'
operator|+
name|readResponse
argument_list|(
name|connect
operator|.
name|getInputStream
argument_list|()
argument_list|)
operator|+
literal|'"'
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|fail
argument_list|(
name|e
operator|.
name|getMessage
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
specifier|protected
name|void
name|doGet
parameter_list|()
block|{
try|try
block|{
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"--- Retrieving document ---"
argument_list|)
expr_stmt|;
name|HttpURLConnection
name|connect
init|=
name|getConnection
argument_list|(
name|RESOURCE_URI
argument_list|)
decl_stmt|;
name|connect
operator|.
name|setRequestMethod
argument_list|(
literal|"GET"
argument_list|)
expr_stmt|;
name|connect
operator|.
name|connect
argument_list|()
expr_stmt|;
name|int
name|r
init|=
name|connect
operator|.
name|getResponseCode
argument_list|()
decl_stmt|;
name|assertEquals
argument_list|(
literal|"Server returned response code "
operator|+
name|r
argument_list|,
literal|200
argument_list|,
name|r
argument_list|)
expr_stmt|;
name|String
name|contentType
init|=
name|connect
operator|.
name|getContentType
argument_list|()
decl_stmt|;
name|int
name|semicolon
init|=
name|contentType
operator|.
name|indexOf
argument_list|(
literal|';'
argument_list|)
decl_stmt|;
if|if
condition|(
name|semicolon
operator|>
literal|0
condition|)
block|{
name|contentType
operator|=
name|contentType
operator|.
name|substring
argument_list|(
literal|0
argument_list|,
name|semicolon
argument_list|)
operator|.
name|trim
argument_list|()
expr_stmt|;
block|}
name|assertEquals
argument_list|(
literal|"Server returned content type "
operator|+
name|contentType
argument_list|,
literal|"text/xml"
argument_list|,
name|contentType
argument_list|)
expr_stmt|;
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
name|readResponse
argument_list|(
name|connect
operator|.
name|getInputStream
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|fail
argument_list|(
name|e
operator|.
name|getMessage
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
specifier|protected
name|HttpURLConnection
name|preparePost
parameter_list|(
name|String
name|content
parameter_list|)
block|{
try|try
block|{
name|HttpURLConnection
name|connect
init|=
name|getConnection
argument_list|(
name|RESOURCE_URI
argument_list|)
decl_stmt|;
name|connect
operator|.
name|setRequestProperty
argument_list|(
literal|"Authorization"
argument_list|,
literal|"Basic "
operator|+
name|credentials
argument_list|)
expr_stmt|;
name|connect
operator|.
name|setRequestMethod
argument_list|(
literal|"POST"
argument_list|)
expr_stmt|;
name|connect
operator|.
name|setDoOutput
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|connect
operator|.
name|setRequestProperty
argument_list|(
literal|"ContentType"
argument_list|,
literal|"text/xml"
argument_list|)
expr_stmt|;
name|Writer
name|writer
init|=
operator|new
name|OutputStreamWriter
argument_list|(
name|connect
operator|.
name|getOutputStream
argument_list|()
argument_list|,
literal|"UTF-8"
argument_list|)
decl_stmt|;
name|writer
operator|.
name|write
argument_list|(
name|content
argument_list|)
expr_stmt|;
name|writer
operator|.
name|close
argument_list|()
expr_stmt|;
return|return
name|connect
return|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|fail
argument_list|(
name|e
operator|.
name|getMessage
argument_list|()
argument_list|)
expr_stmt|;
block|}
return|return
literal|null
return|;
block|}
specifier|protected
name|String
name|readResponse
parameter_list|(
name|InputStream
name|is
parameter_list|)
block|{
try|try
block|{
name|BufferedReader
name|reader
init|=
operator|new
name|BufferedReader
argument_list|(
operator|new
name|InputStreamReader
argument_list|(
name|is
argument_list|,
literal|"UTF-8"
argument_list|)
argument_list|)
decl_stmt|;
name|String
name|line
decl_stmt|;
name|StringBuffer
name|out
init|=
operator|new
name|StringBuffer
argument_list|()
decl_stmt|;
while|while
condition|(
operator|(
name|line
operator|=
name|reader
operator|.
name|readLine
argument_list|()
operator|)
operator|!=
literal|null
condition|)
block|{
name|out
operator|.
name|append
argument_list|(
name|line
argument_list|)
expr_stmt|;
name|out
operator|.
name|append
argument_list|(
literal|"\r\n"
argument_list|)
expr_stmt|;
block|}
return|return
name|out
operator|.
name|toString
argument_list|()
return|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|fail
argument_list|(
name|e
operator|.
name|getMessage
argument_list|()
argument_list|)
expr_stmt|;
block|}
return|return
literal|null
return|;
block|}
specifier|protected
name|HttpURLConnection
name|getConnection
parameter_list|(
name|String
name|url
parameter_list|)
block|{
try|try
block|{
name|URL
name|u
init|=
operator|new
name|URL
argument_list|(
name|url
argument_list|)
decl_stmt|;
return|return
operator|(
name|HttpURLConnection
operator|)
name|u
operator|.
name|openConnection
argument_list|()
return|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|fail
argument_list|(
name|e
operator|.
name|getMessage
argument_list|()
argument_list|)
expr_stmt|;
block|}
return|return
literal|null
return|;
block|}
specifier|protected
name|void
name|dumpHeaders
parameter_list|(
name|HttpURLConnection
name|connect
parameter_list|)
block|{
name|Map
name|headers
init|=
name|connect
operator|.
name|getHeaderFields
argument_list|()
decl_stmt|;
for|for
control|(
name|Iterator
name|i
init|=
name|headers
operator|.
name|entrySet
argument_list|()
operator|.
name|iterator
argument_list|()
init|;
name|i
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|Map
operator|.
name|Entry
name|entry
init|=
operator|(
name|Map
operator|.
name|Entry
operator|)
name|i
operator|.
name|next
argument_list|()
decl_stmt|;
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
name|entry
operator|.
name|getKey
argument_list|()
operator|+
literal|": "
operator|+
name|entry
operator|.
name|getValue
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
specifier|public
specifier|static
name|void
name|main
parameter_list|(
name|String
index|[]
name|args
parameter_list|)
block|{
name|TestRunner
operator|.
name|run
argument_list|(
name|RESTServiceTest
operator|.
name|class
argument_list|)
expr_stmt|;
comment|//Explicit shutdown for the shutdown hook
name|System
operator|.
name|exit
argument_list|(
literal|0
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

