begin_unit|revision:1.0.0;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * eXist Open Source Native XML Database  * Copyright (C) 2001-2017 The eXist Project  * http://exist-db.org  *  * This program is free software; you can redistribute it and/or  * modify it under the terms of the GNU Lesser General Public License  * as published by the Free Software Foundation; either version 2  * of the License, or (at your option) any later version.  *  * This program is distributed in the hope that it will be useful,  * but WITHOUT ANY WARRANTY; without even the implied warranty of  * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the  * GNU Lesser General Public License for more details.  *  * You should have received a copy of the GNU Lesser General Public  * License along with this library; if not, write to the Free Software  * Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA  02110-1301  USA  */
end_comment

begin_package
package|package
name|org
operator|.
name|exist
operator|.
name|http
package|;
end_package

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|EXistException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|collections
operator|.
name|Collection
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|collections
operator|.
name|triggers
operator|.
name|TriggerException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|dom
operator|.
name|persistent
operator|.
name|DocumentImpl
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|security
operator|.
name|PermissionDeniedException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|storage
operator|.
name|DBBroker
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|storage
operator|.
name|lock
operator|.
name|Lock
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|storage
operator|.
name|txn
operator|.
name|Txn
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|test
operator|.
name|ExistEmbeddedServer
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|util
operator|.
name|LockException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|xmldb
operator|.
name|XmldbURI
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|AfterClass
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|BeforeClass
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|ClassRule
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|servlet
operator|.
name|http
operator|.
name|HttpSession
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|servlet
operator|.
name|http
operator|.
name|HttpSessionEvent
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Optional
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|easymock
operator|.
name|EasyMock
operator|.
name|*
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertFalse
import|;
end_import

begin_class
specifier|public
class|class
name|AuditTrailSessionListenerTest
block|{
annotation|@
name|ClassRule
specifier|public
specifier|static
specifier|final
name|ExistEmbeddedServer
name|existEmbeddedServer
init|=
operator|new
name|ExistEmbeddedServer
argument_list|()
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|XmldbURI
name|TEST_COLLECTION
init|=
name|XmldbURI
operator|.
name|create
argument_list|(
literal|"/db/test"
argument_list|)
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|String
name|CREATE_SCRIPT
init|=
literal|"session-create.xq"
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|String
name|DESTROYED_SCRIPT
init|=
literal|"session-destroyed.xq"
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|String
name|CREATE_SCRIPT_PATH
init|=
literal|"/db/test/"
operator|+
name|CREATE_SCRIPT
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|String
name|DESTROYED_SCRIPT_PATH
init|=
literal|"/db/test/"
operator|+
name|DESTROYED_SCRIPT
decl_stmt|;
comment|/**      * Ensures that AuditTrailSessionListener releases any locks      * on the XQuery document when creating a session      */
annotation|@
name|Test
specifier|public
name|void
name|sessionCreated
parameter_list|()
throws|throws
name|EXistException
throws|,
name|PermissionDeniedException
block|{
specifier|final
name|HttpSessionEvent
name|httpSessionEvent
init|=
name|createMock
argument_list|(
name|HttpSessionEvent
operator|.
name|class
argument_list|)
decl_stmt|;
specifier|final
name|HttpSession
name|httpSession
init|=
name|createMock
argument_list|(
name|HttpSession
operator|.
name|class
argument_list|)
decl_stmt|;
name|expect
argument_list|(
name|httpSessionEvent
operator|.
name|getSession
argument_list|()
argument_list|)
operator|.
name|andReturn
argument_list|(
name|httpSession
argument_list|)
expr_stmt|;
name|expect
argument_list|(
name|httpSession
operator|.
name|getId
argument_list|()
argument_list|)
operator|.
name|andReturn
argument_list|(
literal|"mock-session"
argument_list|)
expr_stmt|;
name|replay
argument_list|(
name|httpSessionEvent
argument_list|,
name|httpSession
argument_list|)
expr_stmt|;
specifier|final
name|AuditTrailSessionListener
name|listener
init|=
operator|new
name|AuditTrailSessionListener
argument_list|()
decl_stmt|;
name|listener
operator|.
name|sessionCreated
argument_list|(
name|httpSessionEvent
argument_list|)
expr_stmt|;
name|verify
argument_list|(
name|httpSessionEvent
argument_list|,
name|httpSession
argument_list|)
expr_stmt|;
try|try
init|(
specifier|final
name|DBBroker
name|broker
init|=
name|existEmbeddedServer
operator|.
name|getBrokerPool
argument_list|()
operator|.
name|getBroker
argument_list|()
init|)
block|{
name|DocumentImpl
name|resource
init|=
name|broker
operator|.
name|getXMLResource
argument_list|(
name|XmldbURI
operator|.
name|create
argument_list|(
name|CREATE_SCRIPT_PATH
argument_list|)
argument_list|,
name|Lock
operator|.
name|LockMode
operator|.
name|NO_LOCK
argument_list|)
decl_stmt|;
comment|// ensure that AuditTrailSessionListener released the lock
name|assertFalse
argument_list|(
name|resource
operator|.
name|getUpdateLock
argument_list|()
operator|.
name|isLockedForRead
argument_list|(
name|Thread
operator|.
name|currentThread
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|resource
operator|.
name|getUpdateLock
argument_list|()
operator|.
name|isLockedForWrite
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
comment|/**      * Ensures that AuditTrailSessionListener releases any locks      * on the XQuery document when destroying a session      */
annotation|@
name|Test
specifier|public
name|void
name|sessionDestroyed
parameter_list|()
throws|throws
name|EXistException
throws|,
name|PermissionDeniedException
block|{
specifier|final
name|HttpSessionEvent
name|httpSessionEvent
init|=
name|createMock
argument_list|(
name|HttpSessionEvent
operator|.
name|class
argument_list|)
decl_stmt|;
specifier|final
name|HttpSession
name|httpSession
init|=
name|createMock
argument_list|(
name|HttpSession
operator|.
name|class
argument_list|)
decl_stmt|;
name|expect
argument_list|(
name|httpSessionEvent
operator|.
name|getSession
argument_list|()
argument_list|)
operator|.
name|andReturn
argument_list|(
name|httpSession
argument_list|)
expr_stmt|;
name|expect
argument_list|(
name|httpSession
operator|.
name|getId
argument_list|()
argument_list|)
operator|.
name|andReturn
argument_list|(
literal|"mock-session"
argument_list|)
expr_stmt|;
name|replay
argument_list|(
name|httpSessionEvent
argument_list|,
name|httpSession
argument_list|)
expr_stmt|;
specifier|final
name|AuditTrailSessionListener
name|listener
init|=
operator|new
name|AuditTrailSessionListener
argument_list|()
decl_stmt|;
name|listener
operator|.
name|sessionDestroyed
argument_list|(
name|httpSessionEvent
argument_list|)
expr_stmt|;
name|verify
argument_list|(
name|httpSessionEvent
argument_list|,
name|httpSession
argument_list|)
expr_stmt|;
try|try
init|(
specifier|final
name|DBBroker
name|broker
init|=
name|existEmbeddedServer
operator|.
name|getBrokerPool
argument_list|()
operator|.
name|getBroker
argument_list|()
init|)
block|{
name|DocumentImpl
name|resource
init|=
name|broker
operator|.
name|getXMLResource
argument_list|(
name|XmldbURI
operator|.
name|create
argument_list|(
name|DESTROYED_SCRIPT_PATH
argument_list|)
argument_list|,
name|Lock
operator|.
name|LockMode
operator|.
name|NO_LOCK
argument_list|)
decl_stmt|;
comment|// ensure that AuditTrailSessionListener released the lock
name|assertFalse
argument_list|(
name|resource
operator|.
name|getUpdateLock
argument_list|()
operator|.
name|isLockedForRead
argument_list|(
name|Thread
operator|.
name|currentThread
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|resource
operator|.
name|getUpdateLock
argument_list|()
operator|.
name|isLockedForWrite
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|BeforeClass
specifier|public
specifier|static
name|void
name|setup
parameter_list|()
throws|throws
name|EXistException
throws|,
name|LockException
throws|,
name|TriggerException
throws|,
name|PermissionDeniedException
throws|,
name|IOException
block|{
name|storeScripts
argument_list|()
expr_stmt|;
name|System
operator|.
name|setProperty
argument_list|(
name|AuditTrailSessionListener
operator|.
name|REGISTER_CREATE_XQUERY_SCRIPT_PROPERTY
argument_list|,
name|CREATE_SCRIPT_PATH
argument_list|)
expr_stmt|;
name|System
operator|.
name|setProperty
argument_list|(
name|AuditTrailSessionListener
operator|.
name|REGISTER_DESTROY_XQUERY_SCRIPT_PROPERTY
argument_list|,
name|DESTROYED_SCRIPT_PATH
argument_list|)
expr_stmt|;
block|}
specifier|private
specifier|static
name|void
name|storeScripts
parameter_list|()
throws|throws
name|EXistException
throws|,
name|PermissionDeniedException
throws|,
name|IOException
throws|,
name|TriggerException
throws|,
name|LockException
block|{
try|try
init|(
specifier|final
name|DBBroker
name|broker
init|=
name|existEmbeddedServer
operator|.
name|getBrokerPool
argument_list|()
operator|.
name|get
argument_list|(
name|Optional
operator|.
name|of
argument_list|(
name|existEmbeddedServer
operator|.
name|getBrokerPool
argument_list|()
operator|.
name|getSecurityManager
argument_list|()
operator|.
name|getSystemSubject
argument_list|()
argument_list|)
argument_list|)
init|;
specifier|final
name|Txn
name|transaction
init|=
name|existEmbeddedServer
operator|.
name|getBrokerPool
argument_list|()
operator|.
name|getTransactionManager
argument_list|()
operator|.
name|beginTransaction
argument_list|()
init|)
block|{
specifier|final
name|Collection
name|testCollection
init|=
name|broker
operator|.
name|getOrCreateCollection
argument_list|(
name|transaction
argument_list|,
name|TEST_COLLECTION
argument_list|)
decl_stmt|;
name|testCollection
operator|.
name|addBinaryResource
argument_list|(
name|transaction
argument_list|,
name|broker
argument_list|,
name|XmldbURI
operator|.
name|create
argument_list|(
name|CREATE_SCRIPT
argument_list|)
argument_list|,
literal|"<create/>"
operator|.
name|getBytes
argument_list|()
argument_list|,
literal|"application/xquery"
argument_list|)
expr_stmt|;
name|testCollection
operator|.
name|addBinaryResource
argument_list|(
name|transaction
argument_list|,
name|broker
argument_list|,
name|XmldbURI
operator|.
name|create
argument_list|(
name|DESTROYED_SCRIPT
argument_list|)
argument_list|,
literal|"</destroyed>"
operator|.
name|getBytes
argument_list|()
argument_list|,
literal|"application/xquery"
argument_list|)
expr_stmt|;
name|transaction
operator|.
name|commit
argument_list|()
expr_stmt|;
block|}
block|}
annotation|@
name|AfterClass
specifier|public
specifier|static
name|void
name|teardown
parameter_list|()
throws|throws
name|TriggerException
throws|,
name|PermissionDeniedException
throws|,
name|EXistException
throws|,
name|IOException
block|{
name|System
operator|.
name|clearProperty
argument_list|(
name|AuditTrailSessionListener
operator|.
name|REGISTER_CREATE_XQUERY_SCRIPT_PROPERTY
argument_list|)
expr_stmt|;
name|System
operator|.
name|clearProperty
argument_list|(
name|AuditTrailSessionListener
operator|.
name|REGISTER_DESTROY_XQUERY_SCRIPT_PROPERTY
argument_list|)
expr_stmt|;
name|removeScripts
argument_list|()
expr_stmt|;
block|}
specifier|private
specifier|static
name|void
name|removeScripts
parameter_list|()
throws|throws
name|EXistException
throws|,
name|PermissionDeniedException
throws|,
name|IOException
throws|,
name|TriggerException
block|{
try|try
init|(
specifier|final
name|DBBroker
name|broker
init|=
name|existEmbeddedServer
operator|.
name|getBrokerPool
argument_list|()
operator|.
name|get
argument_list|(
name|Optional
operator|.
name|of
argument_list|(
name|existEmbeddedServer
operator|.
name|getBrokerPool
argument_list|()
operator|.
name|getSecurityManager
argument_list|()
operator|.
name|getSystemSubject
argument_list|()
argument_list|)
argument_list|)
init|;
specifier|final
name|Txn
name|transaction
init|=
name|existEmbeddedServer
operator|.
name|getBrokerPool
argument_list|()
operator|.
name|getTransactionManager
argument_list|()
operator|.
name|beginTransaction
argument_list|()
init|)
block|{
specifier|final
name|Collection
name|testCollection
init|=
name|broker
operator|.
name|getCollection
argument_list|(
name|TEST_COLLECTION
argument_list|)
decl_stmt|;
if|if
condition|(
name|testCollection
operator|!=
literal|null
condition|)
block|{
name|broker
operator|.
name|removeCollection
argument_list|(
name|transaction
argument_list|,
name|testCollection
argument_list|)
expr_stmt|;
block|}
name|transaction
operator|.
name|commit
argument_list|()
expr_stmt|;
block|}
block|}
block|}
end_class

end_unit

