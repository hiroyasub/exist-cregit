begin_unit|revision:1.0.0;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  *  eXist Open Source Native XML Database  *  Copyright (C) 2001-07 The eXist Project  *  http://exist-db.org  *  *  This program is free software; you can redistribute it and/or  *  modify it under the terms of the GNU Lesser General Public License  *  as published by the Free Software Foundation; either version 2  *  of the License, or (at your option) any later version.  *  *  This program is distributed in the hope that it will be useful,  *  but WITHOUT ANY WARRANTY; without even the implied warranty of  *  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the  *  GNU Lesser General Public License for more details.  *  *  You should have received a copy of the GNU Lesser General Public  *  License along with this library; if not, write to the Free Software  *  Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA  02110-1301  USA  *  * \$Id\$  */
end_comment

begin_package
package|package
name|org
operator|.
name|exist
operator|.
name|performance
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|avalon
operator|.
name|excalibur
operator|.
name|cli
operator|.
name|CLArgsParser
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|avalon
operator|.
name|excalibur
operator|.
name|cli
operator|.
name|CLOption
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|avalon
operator|.
name|excalibur
operator|.
name|cli
operator|.
name|CLOptionDescriptor
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|avalon
operator|.
name|excalibur
operator|.
name|cli
operator|.
name|CLUtil
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|io
operator|.
name|FileUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|EXistException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|source
operator|.
name|ClassLoaderSource
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|util
operator|.
name|XMLFilenameFilter
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|xmldb
operator|.
name|XQueryService
import|;
end_import

begin_import
import|import
name|org
operator|.
name|w3c
operator|.
name|dom
operator|.
name|Document
import|;
end_import

begin_import
import|import
name|org
operator|.
name|xml
operator|.
name|sax
operator|.
name|SAXException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|xmldb
operator|.
name|api
operator|.
name|DatabaseManager
import|;
end_import

begin_import
import|import
name|org
operator|.
name|xmldb
operator|.
name|api
operator|.
name|base
operator|.
name|*
import|;
end_import

begin_import
import|import
name|org
operator|.
name|xmldb
operator|.
name|api
operator|.
name|modules
operator|.
name|CollectionManagementService
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|xml
operator|.
name|parsers
operator|.
name|DocumentBuilder
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|xml
operator|.
name|parsers
operator|.
name|DocumentBuilderFactory
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|xml
operator|.
name|parsers
operator|.
name|ParserConfigurationException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|*
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Iterator
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_class
specifier|public
class|class
name|Main
block|{
comment|// command-line options
specifier|private
specifier|final
specifier|static
name|int
name|HELP_OPT
init|=
literal|'h'
decl_stmt|;
specifier|private
specifier|final
specifier|static
name|int
name|XML_FILE_OPT
init|=
literal|'f'
decl_stmt|;
specifier|private
specifier|final
specifier|static
name|int
name|OUTPUT_DIR_OPT
init|=
literal|'d'
decl_stmt|;
specifier|private
specifier|final
specifier|static
name|int
name|REPORT_OPT
init|=
literal|'r'
decl_stmt|;
specifier|private
specifier|final
specifier|static
name|CLOptionDescriptor
name|OPTIONS
index|[]
init|=
operator|new
name|CLOptionDescriptor
index|[]
block|{
operator|new
name|CLOptionDescriptor
argument_list|(
literal|"help"
argument_list|,
name|CLOptionDescriptor
operator|.
name|ARGUMENT_DISALLOWED
argument_list|,
name|HELP_OPT
argument_list|,
literal|"print help on command line options and exit."
argument_list|)
block|,
operator|new
name|CLOptionDescriptor
argument_list|(
literal|"dir"
argument_list|,
name|CLOptionDescriptor
operator|.
name|ARGUMENT_REQUIRED
argument_list|,
name|OUTPUT_DIR_OPT
argument_list|,
literal|"directory for writing test results."
argument_list|)
block|,
operator|new
name|CLOptionDescriptor
argument_list|(
literal|"file"
argument_list|,
name|CLOptionDescriptor
operator|.
name|ARGUMENT_REQUIRED
argument_list|,
name|XML_FILE_OPT
argument_list|,
literal|"XML input file."
argument_list|)
block|,
operator|new
name|CLOptionDescriptor
argument_list|(
literal|"report"
argument_list|,
name|CLOptionDescriptor
operator|.
name|ARGUMENT_DISALLOWED
argument_list|,
name|REPORT_OPT
argument_list|,
literal|"create an HTML report from all output files in the directory."
argument_list|)
block|}
decl_stmt|;
specifier|private
specifier|final
specifier|static
name|File
name|CSS_FILE
init|=
operator|new
name|File
argument_list|(
literal|"test/src/org/exist/performance/style.css"
argument_list|)
decl_stmt|;
specifier|public
specifier|static
name|void
name|main
parameter_list|(
name|String
index|[]
name|args
parameter_list|)
block|{
name|CLArgsParser
name|optParser
init|=
operator|new
name|CLArgsParser
argument_list|(
name|args
argument_list|,
name|OPTIONS
argument_list|)
decl_stmt|;
if|if
condition|(
name|optParser
operator|.
name|getErrorString
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|System
operator|.
name|err
operator|.
name|println
argument_list|(
literal|"ERROR: "
operator|+
name|optParser
operator|.
name|getErrorString
argument_list|()
argument_list|)
expr_stmt|;
return|return;
block|}
for|for
control|(
name|String
name|arg
range|:
name|args
control|)
block|{
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"ARG: "
operator|+
name|arg
argument_list|)
expr_stmt|;
block|}
name|List
name|opt
init|=
name|optParser
operator|.
name|getArguments
argument_list|()
decl_stmt|;
name|int
name|size
init|=
name|opt
operator|.
name|size
argument_list|()
decl_stmt|;
name|CLOption
name|option
decl_stmt|;
name|File
name|outputDir
init|=
literal|null
decl_stmt|;
name|boolean
name|createReport
init|=
literal|false
decl_stmt|;
name|List
argument_list|<
name|String
argument_list|>
name|groups
init|=
operator|new
name|ArrayList
argument_list|<
name|String
argument_list|>
argument_list|()
decl_stmt|;
name|File
name|xmlFile
init|=
literal|null
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|size
condition|;
name|i
operator|++
control|)
block|{
name|option
operator|=
operator|(
name|CLOption
operator|)
name|opt
operator|.
name|get
argument_list|(
name|i
argument_list|)
expr_stmt|;
switch|switch
condition|(
name|option
operator|.
name|getId
argument_list|()
condition|)
block|{
case|case
name|HELP_OPT
case|:
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"Usage: java "
operator|+
name|Main
operator|.
name|class
operator|.
name|getName
argument_list|()
operator|+
literal|" [options] [group ...]"
argument_list|)
expr_stmt|;
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
name|CLUtil
operator|.
name|describeOptions
argument_list|(
name|OPTIONS
argument_list|)
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|System
operator|.
name|exit
argument_list|(
literal|0
argument_list|)
expr_stmt|;
break|break;
case|case
name|OUTPUT_DIR_OPT
case|:
name|outputDir
operator|=
operator|new
name|File
argument_list|(
name|option
operator|.
name|getArgument
argument_list|()
operator|.
name|trim
argument_list|()
argument_list|)
expr_stmt|;
break|break;
case|case
name|REPORT_OPT
case|:
name|createReport
operator|=
literal|true
expr_stmt|;
break|break;
case|case
name|XML_FILE_OPT
case|:
name|xmlFile
operator|=
operator|new
name|File
argument_list|(
name|option
operator|.
name|getArgument
argument_list|()
operator|.
name|trim
argument_list|()
argument_list|)
expr_stmt|;
break|break;
case|case
name|CLOption
operator|.
name|TEXT_ARGUMENT
case|:
name|groups
operator|.
name|add
argument_list|(
name|option
operator|.
name|getArgument
argument_list|()
argument_list|)
expr_stmt|;
break|break;
block|}
block|}
if|if
condition|(
name|xmlFile
operator|==
literal|null
operator|||
operator|!
name|xmlFile
operator|.
name|canRead
argument_list|()
condition|)
block|{
name|System
operator|.
name|err
operator|.
name|println
argument_list|(
literal|"Cannot read test definition file: "
operator|+
name|xmlFile
operator|.
name|getAbsolutePath
argument_list|()
argument_list|)
expr_stmt|;
name|System
operator|.
name|exit
argument_list|(
literal|1
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|outputDir
operator|==
literal|null
operator|||
operator|!
name|outputDir
operator|.
name|canWrite
argument_list|()
condition|)
block|{
name|System
operator|.
name|err
operator|.
name|println
argument_list|(
literal|"No or not writable output directory specified. Please provide a "
operator|+
literal|"writable directory with option -d"
argument_list|)
expr_stmt|;
name|System
operator|.
name|exit
argument_list|(
literal|1
argument_list|)
expr_stmt|;
block|}
for|for
control|(
name|String
name|group
range|:
name|groups
control|)
block|{
name|Runner
name|runner
init|=
literal|null
decl_stmt|;
try|try
block|{
name|File
name|outFile
init|=
operator|new
name|File
argument_list|(
name|outputDir
argument_list|,
name|group
operator|+
literal|".xml"
argument_list|)
decl_stmt|;
name|runner
operator|=
name|configure
argument_list|(
name|xmlFile
argument_list|,
name|outFile
argument_list|)
expr_stmt|;
name|runner
operator|.
name|run
argument_list|(
name|group
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|e
operator|.
name|printStackTrace
argument_list|()
expr_stmt|;
name|System
operator|.
name|err
operator|.
name|println
argument_list|(
literal|"ERROR: "
operator|+
name|e
operator|.
name|getMessage
argument_list|()
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
if|if
condition|(
name|runner
operator|!=
literal|null
condition|)
name|runner
operator|.
name|shutdown
argument_list|()
expr_stmt|;
block|}
block|}
if|if
condition|(
name|createReport
condition|)
block|{
name|Runner
name|runner
init|=
literal|null
decl_stmt|;
try|try
block|{
name|runner
operator|=
name|configure
argument_list|(
name|xmlFile
argument_list|,
literal|null
argument_list|)
expr_stmt|;
name|createReport
argument_list|(
name|runner
argument_list|,
name|outputDir
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
if|if
condition|(
name|runner
operator|!=
literal|null
condition|)
name|runner
operator|.
name|shutdown
argument_list|()
expr_stmt|;
block|}
block|}
block|}
specifier|private
specifier|static
name|Runner
name|configure
parameter_list|(
name|File
name|xmlFile
parameter_list|,
name|File
name|outFile
parameter_list|)
block|{
try|try
block|{
name|DocumentBuilderFactory
name|factory
init|=
name|DocumentBuilderFactory
operator|.
name|newInstance
argument_list|()
decl_stmt|;
name|factory
operator|.
name|setNamespaceAware
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|factory
operator|.
name|setValidating
argument_list|(
literal|false
argument_list|)
expr_stmt|;
name|DocumentBuilder
name|builder
init|=
name|factory
operator|.
name|newDocumentBuilder
argument_list|()
decl_stmt|;
name|Document
name|doc
init|=
name|builder
operator|.
name|parse
argument_list|(
name|xmlFile
argument_list|)
decl_stmt|;
name|TestResultWriter
name|writer
init|=
literal|null
decl_stmt|;
if|if
condition|(
name|outFile
operator|!=
literal|null
condition|)
name|writer
operator|=
operator|new
name|TestResultWriter
argument_list|(
name|outFile
operator|.
name|getAbsolutePath
argument_list|()
argument_list|)
expr_stmt|;
return|return
operator|new
name|Runner
argument_list|(
name|doc
operator|.
name|getDocumentElement
argument_list|()
argument_list|,
name|writer
argument_list|)
return|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|e
operator|.
name|printStackTrace
argument_list|()
expr_stmt|;
name|System
operator|.
name|err
operator|.
name|println
argument_list|(
literal|"ERROR: "
operator|+
name|e
operator|.
name|getMessage
argument_list|()
argument_list|)
expr_stmt|;
block|}
return|return
literal|null
return|;
block|}
specifier|private
specifier|static
name|void
name|createReport
parameter_list|(
name|Runner
name|runner
parameter_list|,
name|File
name|directory
parameter_list|)
block|{
try|try
block|{
name|Connection
name|con
init|=
name|runner
operator|.
name|getConnection
argument_list|()
decl_stmt|;
name|Collection
name|collection
init|=
name|con
operator|.
name|getCollection
argument_list|(
literal|"benchmark"
argument_list|)
decl_stmt|;
if|if
condition|(
name|collection
operator|==
literal|null
condition|)
block|{
name|Collection
name|root
init|=
name|con
operator|.
name|getCollection
argument_list|()
decl_stmt|;
name|CollectionManagementService
name|cmgt
init|=
operator|(
name|CollectionManagementService
operator|)
name|root
operator|.
name|getService
argument_list|(
literal|"CollectionManagementService"
argument_list|,
literal|"1.0"
argument_list|)
decl_stmt|;
name|collection
operator|=
name|cmgt
operator|.
name|createCollection
argument_list|(
literal|"benchmark"
argument_list|)
expr_stmt|;
block|}
for|for
control|(
name|Iterator
name|i
init|=
name|FileUtils
operator|.
name|iterateFiles
argument_list|(
name|directory
argument_list|,
operator|new
name|String
index|[]
block|{
literal|"xml"
block|}
argument_list|,
literal|false
argument_list|)
init|;
name|i
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|File
name|file
init|=
operator|(
name|File
operator|)
name|i
operator|.
name|next
argument_list|()
decl_stmt|;
name|Resource
name|resource
init|=
name|collection
operator|.
name|createResource
argument_list|(
name|file
operator|.
name|getName
argument_list|()
argument_list|,
literal|"XMLResource"
argument_list|)
decl_stmt|;
name|resource
operator|.
name|setContent
argument_list|(
name|file
argument_list|)
expr_stmt|;
name|collection
operator|.
name|storeResource
argument_list|(
name|resource
argument_list|)
expr_stmt|;
block|}
name|XQueryService
name|service
init|=
operator|(
name|XQueryService
operator|)
name|collection
operator|.
name|getService
argument_list|(
literal|"XQueryService"
argument_list|,
literal|"1.0"
argument_list|)
decl_stmt|;
name|ResourceSet
name|result
init|=
name|service
operator|.
name|execute
argument_list|(
operator|new
name|ClassLoaderSource
argument_list|(
literal|"/org/exist/performance/log2html.xql"
argument_list|)
argument_list|)
decl_stmt|;
if|if
condition|(
name|directory
operator|==
literal|null
condition|)
name|directory
operator|=
operator|new
name|File
argument_list|(
name|System
operator|.
name|getProperty
argument_list|(
literal|"user.dir"
argument_list|)
argument_list|)
expr_stmt|;
name|File
name|htmlFile
init|=
operator|new
name|File
argument_list|(
name|directory
argument_list|,
literal|"results.html"
argument_list|)
decl_stmt|;
name|FileUtils
operator|.
name|writeStringToFile
argument_list|(
name|htmlFile
argument_list|,
name|result
operator|.
name|getResource
argument_list|(
literal|0
argument_list|)
operator|.
name|getContent
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|,
literal|"UTF-8"
argument_list|)
expr_stmt|;
name|FileUtils
operator|.
name|copyFile
argument_list|(
name|CSS_FILE
argument_list|,
operator|new
name|File
argument_list|(
name|directory
argument_list|,
name|CSS_FILE
operator|.
name|getName
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|e
operator|.
name|printStackTrace
argument_list|()
expr_stmt|;
name|System
operator|.
name|err
operator|.
name|println
argument_list|(
literal|"ERROR: "
operator|+
name|e
operator|.
name|getMessage
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
block|}
end_class

end_unit

