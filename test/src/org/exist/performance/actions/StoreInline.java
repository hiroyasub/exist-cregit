begin_unit|revision:1.0.0;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  *  eXist Open Source Native XML Database  *  Copyright (C) 2001-06 The eXist Project  *  http://exist-db.org  *    *  This program is free software; you can redistribute it and/or  *  modify it under the terms of the GNU Lesser General Public License  *  as published by the Free Software Foundation; either version 2  *  of the License, or (at your option) any later version.  *    *  This program is distributed in the hope that it will be useful,  *  but WITHOUT ANY WARRANTY; without even the implied warranty of  *  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the  *  GNU Lesser General Public License for more details.  *    *  You should have received a copy of the GNU Lesser General Public License  *  along with this program; if not, write to the Free Software  *  Foundation, Inc., 675 Mass Ave, Cambridge, MA 02139, USA.  *    *  $Id$  */
end_comment

begin_package
package|package
name|org
operator|.
name|exist
operator|.
name|performance
operator|.
name|actions
package|;
end_package

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|performance
operator|.
name|AbstractAction
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|performance
operator|.
name|Connection
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|performance
operator|.
name|Runner
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|EXistException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|util
operator|.
name|serializer
operator|.
name|DOMSerializer
import|;
end_import

begin_import
import|import
name|org
operator|.
name|xmldb
operator|.
name|api
operator|.
name|base
operator|.
name|XMLDBException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|xmldb
operator|.
name|api
operator|.
name|base
operator|.
name|Collection
import|;
end_import

begin_import
import|import
name|org
operator|.
name|xmldb
operator|.
name|api
operator|.
name|modules
operator|.
name|XMLResource
import|;
end_import

begin_import
import|import
name|org
operator|.
name|w3c
operator|.
name|dom
operator|.
name|Element
import|;
end_import

begin_import
import|import
name|org
operator|.
name|w3c
operator|.
name|dom
operator|.
name|NodeList
import|;
end_import

begin_import
import|import
name|org
operator|.
name|w3c
operator|.
name|dom
operator|.
name|Node
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|xml
operator|.
name|transform
operator|.
name|TransformerException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|FileNotFoundException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|StringWriter
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Properties
import|;
end_import

begin_class
specifier|public
class|class
name|StoreInline
extends|extends
name|AbstractAction
block|{
specifier|private
name|String
name|collectionPath
decl_stmt|;
specifier|private
name|String
name|name
decl_stmt|;
specifier|private
name|String
name|content
decl_stmt|;
specifier|public
name|void
name|configure
parameter_list|(
name|Runner
name|runner
parameter_list|,
name|Action
name|parent
parameter_list|,
name|Element
name|config
parameter_list|)
throws|throws
name|EXistException
block|{
name|super
operator|.
name|configure
argument_list|(
name|runner
argument_list|,
name|parent
argument_list|,
name|config
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|config
operator|.
name|hasAttribute
argument_list|(
literal|"collection"
argument_list|)
condition|)
throw|throw
operator|new
name|EXistException
argument_list|(
name|StoreInline
operator|.
name|class
operator|.
name|getName
argument_list|()
operator|+
literal|" requires an attribute 'collection'"
argument_list|)
throw|;
name|collectionPath
operator|=
name|config
operator|.
name|getAttribute
argument_list|(
literal|"collection"
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|config
operator|.
name|hasAttribute
argument_list|(
literal|"name"
argument_list|)
condition|)
throw|throw
operator|new
name|EXistException
argument_list|(
name|StoreInline
operator|.
name|class
operator|.
name|getName
argument_list|()
operator|+
literal|" requires an attribute 'name'"
argument_list|)
throw|;
name|name
operator|=
name|config
operator|.
name|getAttribute
argument_list|(
literal|"name"
argument_list|)
expr_stmt|;
name|NodeList
name|children
init|=
name|config
operator|.
name|getChildNodes
argument_list|()
decl_stmt|;
name|Element
name|root
init|=
literal|null
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|children
operator|.
name|getLength
argument_list|()
condition|;
name|i
operator|++
control|)
block|{
name|Node
name|node
init|=
name|children
operator|.
name|item
argument_list|(
name|i
argument_list|)
decl_stmt|;
if|if
condition|(
name|node
operator|.
name|getNodeType
argument_list|()
operator|==
name|Node
operator|.
name|ELEMENT_NODE
condition|)
block|{
name|root
operator|=
operator|(
name|Element
operator|)
name|node
expr_stmt|;
break|break;
block|}
block|}
if|if
condition|(
name|root
operator|==
literal|null
condition|)
throw|throw
operator|new
name|EXistException
argument_list|(
literal|"no content element found for store"
argument_list|)
throw|;
name|StringWriter
name|writer
init|=
operator|new
name|StringWriter
argument_list|()
decl_stmt|;
name|DOMSerializer
name|serializer
init|=
operator|new
name|DOMSerializer
argument_list|(
name|writer
argument_list|,
operator|new
name|Properties
argument_list|()
argument_list|)
decl_stmt|;
try|try
block|{
name|serializer
operator|.
name|serialize
argument_list|(
name|root
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|TransformerException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|EXistException
argument_list|(
literal|"exception while serializing content to store: "
operator|+
name|e
operator|.
name|getMessage
argument_list|()
argument_list|,
name|e
argument_list|)
throw|;
block|}
name|content
operator|=
name|writer
operator|.
name|toString
argument_list|()
expr_stmt|;
block|}
specifier|public
name|void
name|execute
parameter_list|(
name|Connection
name|connection
parameter_list|)
throws|throws
name|XMLDBException
throws|,
name|EXistException
block|{
name|Collection
name|collection
init|=
name|connection
operator|.
name|getCollection
argument_list|(
name|collectionPath
argument_list|)
decl_stmt|;
if|if
condition|(
name|collection
operator|==
literal|null
condition|)
throw|throw
operator|new
name|EXistException
argument_list|(
literal|"Collection not found: "
operator|+
name|collectionPath
argument_list|)
throw|;
name|XMLResource
name|resource
init|=
operator|(
name|XMLResource
operator|)
name|collection
operator|.
name|createResource
argument_list|(
name|name
argument_list|,
literal|"XMLResource"
argument_list|)
decl_stmt|;
name|resource
operator|.
name|setContent
argument_list|(
name|content
argument_list|)
expr_stmt|;
name|collection
operator|.
name|storeResource
argument_list|(
name|resource
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

