begin_unit|revision:1.0.0;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  *  eXist Open Source Native XML Database  *  Copyright (C) 2001-06 The eXist Project  *  http://exist-db.org  *    *  This program is free software; you can redistribute it and/or  *  modify it under the terms of the GNU Lesser General Public License  *  as published by the Free Software Foundation; either version 2  *  of the License, or (at your option) any later version.  *    *  This program is distributed in the hope that it will be useful,  *  but WITHOUT ANY WARRANTY; without even the implied warranty of  *  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the  *  GNU Lesser General Public License for more details.  *    *  You should have received a copy of the GNU Lesser General Public License  *  along with this program; if not, write to the Free Software  *  Foundation, Inc., 675 Mass Ave, Cambridge, MA 02139, USA.  *    *  $Id$  */
end_comment

begin_package
package|package
name|org
operator|.
name|exist
operator|.
name|performance
operator|.
name|actions
package|;
end_package

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|performance
operator|.
name|AbstractAction
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|performance
operator|.
name|Runner
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|performance
operator|.
name|Connection
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|EXistException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|xquery
operator|.
name|value
operator|.
name|IntegerValue
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|xmldb
operator|.
name|XQueryService
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|util
operator|.
name|serializer
operator|.
name|DOMSerializer
import|;
end_import

begin_import
import|import
name|org
operator|.
name|w3c
operator|.
name|dom
operator|.
name|Element
import|;
end_import

begin_import
import|import
name|org
operator|.
name|w3c
operator|.
name|dom
operator|.
name|NodeList
import|;
end_import

begin_import
import|import
name|org
operator|.
name|w3c
operator|.
name|dom
operator|.
name|Node
import|;
end_import

begin_import
import|import
name|org
operator|.
name|xmldb
operator|.
name|api
operator|.
name|base
operator|.
name|XMLDBException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|xmldb
operator|.
name|api
operator|.
name|base
operator|.
name|Collection
import|;
end_import

begin_import
import|import
name|org
operator|.
name|xmldb
operator|.
name|api
operator|.
name|base
operator|.
name|CompiledExpression
import|;
end_import

begin_import
import|import
name|org
operator|.
name|xmldb
operator|.
name|api
operator|.
name|base
operator|.
name|ResourceSet
import|;
end_import

begin_import
import|import
name|org
operator|.
name|xmldb
operator|.
name|api
operator|.
name|base
operator|.
name|ResourceIterator
import|;
end_import

begin_import
import|import
name|org
operator|.
name|xmldb
operator|.
name|api
operator|.
name|base
operator|.
name|Resource
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|xml
operator|.
name|transform
operator|.
name|TransformerException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|StringWriter
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|File
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|OutputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|Writer
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|OutputStreamWriter
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|FileOutputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|FileNotFoundException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|UnsupportedEncodingException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Properties
import|;
end_import

begin_class
specifier|public
class|class
name|DataGenerator
extends|extends
name|AbstractAction
block|{
specifier|private
specifier|final
specifier|static
name|String
name|IMPORT
init|=
literal|"import module namespace pt='http://exist-db.org/xquery/test/performance' "
operator|+
literal|"at 'java:org.exist.performance.xquery.PerfTestModule';\n"
operator|+
literal|"declare variable $filename external;\n"
operator|+
literal|"declare variable $count external;\n"
decl_stmt|;
specifier|private
name|String
name|xqueryContent
decl_stmt|;
specifier|private
name|String
name|prefix
init|=
literal|""
decl_stmt|;
specifier|private
name|File
name|directory
decl_stmt|;
specifier|private
name|int
name|count
init|=
literal|1
decl_stmt|;
specifier|public
name|void
name|configure
parameter_list|(
name|Runner
name|runner
parameter_list|,
name|Action
name|parent
parameter_list|,
name|Element
name|config
parameter_list|)
throws|throws
name|EXistException
block|{
name|super
operator|.
name|configure
argument_list|(
name|runner
argument_list|,
name|parent
argument_list|,
name|config
argument_list|)
expr_stmt|;
if|if
condition|(
name|config
operator|.
name|hasAttribute
argument_list|(
literal|"count"
argument_list|)
condition|)
block|{
try|try
block|{
name|count
operator|=
name|Integer
operator|.
name|parseInt
argument_list|(
name|config
operator|.
name|getAttribute
argument_list|(
literal|"count"
argument_list|)
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|NumberFormatException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|EXistException
argument_list|(
literal|"invalid value for attribute 'count': "
operator|+
name|config
operator|.
name|getAttribute
argument_list|(
literal|"count"
argument_list|)
argument_list|,
name|e
argument_list|)
throw|;
block|}
block|}
if|if
condition|(
operator|!
name|config
operator|.
name|hasAttribute
argument_list|(
literal|"todir"
argument_list|)
condition|)
throw|throw
operator|new
name|EXistException
argument_list|(
literal|"generate requires an attribute 'todir'"
argument_list|)
throw|;
name|directory
operator|=
operator|new
name|File
argument_list|(
name|config
operator|.
name|getAttribute
argument_list|(
literal|"todir"
argument_list|)
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
operator|(
name|directory
operator|.
name|exists
argument_list|()
operator|&&
name|directory
operator|.
name|isDirectory
argument_list|()
operator|)
condition|)
throw|throw
operator|new
name|EXistException
argument_list|(
name|directory
operator|.
name|getAbsolutePath
argument_list|()
operator|+
literal|" does not exist or is not a directory"
argument_list|)
throw|;
if|if
condition|(
name|config
operator|.
name|hasAttribute
argument_list|(
literal|"prefix"
argument_list|)
condition|)
name|prefix
operator|=
name|config
operator|.
name|getAttribute
argument_list|(
literal|"prefix"
argument_list|)
expr_stmt|;
name|NodeList
name|children
init|=
name|config
operator|.
name|getChildNodes
argument_list|()
decl_stmt|;
name|Element
name|root
init|=
literal|null
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|children
operator|.
name|getLength
argument_list|()
condition|;
name|i
operator|++
control|)
block|{
name|Node
name|node
init|=
name|children
operator|.
name|item
argument_list|(
name|i
argument_list|)
decl_stmt|;
if|if
condition|(
name|node
operator|.
name|getNodeType
argument_list|()
operator|==
name|Node
operator|.
name|ELEMENT_NODE
condition|)
block|{
name|root
operator|=
operator|(
name|Element
operator|)
name|node
expr_stmt|;
break|break;
block|}
block|}
if|if
condition|(
name|root
operator|==
literal|null
condition|)
throw|throw
operator|new
name|EXistException
argument_list|(
literal|"no content element found for generate"
argument_list|)
throw|;
name|StringWriter
name|writer
init|=
operator|new
name|StringWriter
argument_list|()
decl_stmt|;
name|DOMSerializer
name|serializer
init|=
operator|new
name|DOMSerializer
argument_list|(
name|writer
argument_list|,
operator|new
name|Properties
argument_list|()
argument_list|)
decl_stmt|;
try|try
block|{
name|serializer
operator|.
name|serialize
argument_list|(
name|root
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|TransformerException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|EXistException
argument_list|(
literal|"exception while serializing generate content: "
operator|+
name|e
operator|.
name|getMessage
argument_list|()
argument_list|,
name|e
argument_list|)
throw|;
block|}
name|xqueryContent
operator|=
name|writer
operator|.
name|toString
argument_list|()
expr_stmt|;
block|}
specifier|public
name|void
name|execute
parameter_list|(
name|Connection
name|connection
parameter_list|)
throws|throws
name|XMLDBException
throws|,
name|EXistException
block|{
name|Collection
name|collection
init|=
name|connection
operator|.
name|getCollection
argument_list|(
literal|"/db"
argument_list|)
decl_stmt|;
name|XQueryService
name|service
init|=
operator|(
name|XQueryService
operator|)
name|collection
operator|.
name|getService
argument_list|(
literal|"XQueryService"
argument_list|,
literal|"1.0"
argument_list|)
decl_stmt|;
name|service
operator|.
name|declareVariable
argument_list|(
literal|"filename"
argument_list|,
literal|""
argument_list|)
expr_stmt|;
name|service
operator|.
name|declareVariable
argument_list|(
literal|"count"
argument_list|,
literal|"0"
argument_list|)
expr_stmt|;
name|String
name|query
init|=
name|IMPORT
operator|+
name|xqueryContent
decl_stmt|;
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"query: "
operator|+
name|query
argument_list|)
expr_stmt|;
name|CompiledExpression
name|compiled
init|=
name|service
operator|.
name|compile
argument_list|(
name|query
argument_list|)
decl_stmt|;
try|try
block|{
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|count
condition|;
name|i
operator|++
control|)
block|{
name|File
name|nextFile
init|=
operator|new
name|File
argument_list|(
name|directory
argument_list|,
name|prefix
operator|+
name|i
operator|+
literal|".xml"
argument_list|)
decl_stmt|;
name|service
operator|.
name|declareVariable
argument_list|(
literal|"filename"
argument_list|,
name|nextFile
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
name|service
operator|.
name|declareVariable
argument_list|(
literal|"count"
argument_list|,
operator|new
name|IntegerValue
argument_list|(
name|i
argument_list|)
argument_list|)
expr_stmt|;
name|ResourceSet
name|results
init|=
name|service
operator|.
name|execute
argument_list|(
name|compiled
argument_list|)
decl_stmt|;
name|Writer
name|out
init|=
operator|new
name|OutputStreamWriter
argument_list|(
operator|new
name|FileOutputStream
argument_list|(
name|nextFile
argument_list|)
argument_list|,
literal|"UTF-8"
argument_list|)
decl_stmt|;
for|for
control|(
name|ResourceIterator
name|iter
init|=
name|results
operator|.
name|getIterator
argument_list|()
init|;
name|iter
operator|.
name|hasMoreResources
argument_list|()
condition|;
control|)
block|{
name|Resource
name|r
init|=
name|iter
operator|.
name|nextResource
argument_list|()
decl_stmt|;
name|out
operator|.
name|write
argument_list|(
name|r
operator|.
name|getContent
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|out
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|EXistException
argument_list|(
literal|"exception while storing generated data: "
operator|+
name|e
operator|.
name|getMessage
argument_list|()
argument_list|,
name|e
argument_list|)
throw|;
block|}
block|}
block|}
end_class

end_unit

