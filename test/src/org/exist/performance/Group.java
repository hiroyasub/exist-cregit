begin_unit|revision:1.0.0;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  *  eXist Open Source Native XML Database  *  Copyright (C) 2001-06 The eXist Project  *  http://exist-db.org  *    *  This program is free software; you can redistribute it and/or  *  modify it under the terms of the GNU Lesser General Public License  *  as published by the Free Software Foundation; either version 2  *  of the License, or (at your option) any later version.  *    *  This program is distributed in the hope that it will be useful,  *  but WITHOUT ANY WARRANTY; without even the implied warranty of  *  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the  *  GNU Lesser General Public License for more details.  *    *  You should have received a copy of the GNU Lesser General Public License  *  along with this program; if not, write to the Free Software  *  Foundation, Inc., 675 Mass Ave, Cambridge, MA 02139, USA.  *    *  $Id$  */
end_comment

begin_package
package|package
name|org
operator|.
name|exist
operator|.
name|performance
package|;
end_package

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|EXistException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|Namespaces
import|;
end_import

begin_import
import|import
name|org
operator|.
name|w3c
operator|.
name|dom
operator|.
name|Element
import|;
end_import

begin_import
import|import
name|org
operator|.
name|w3c
operator|.
name|dom
operator|.
name|NodeList
import|;
end_import

begin_import
import|import
name|org
operator|.
name|xmldb
operator|.
name|api
operator|.
name|base
operator|.
name|XMLDBException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Iterator
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Stack
import|;
end_import

begin_class
specifier|public
class|class
name|Group
block|{
specifier|private
name|String
name|name
decl_stmt|;
specifier|private
name|List
name|threads
init|=
operator|new
name|ArrayList
argument_list|()
decl_stmt|;
specifier|private
name|ActionThread
name|setupAction
init|=
literal|null
decl_stmt|;
specifier|private
name|ActionThread
name|tearDownAction
init|=
literal|null
decl_stmt|;
specifier|private
name|Runner
name|runner
decl_stmt|;
specifier|public
name|Group
parameter_list|(
name|Runner
name|runner
parameter_list|,
name|Element
name|config
parameter_list|)
throws|throws
name|EXistException
block|{
name|this
operator|.
name|runner
operator|=
name|runner
expr_stmt|;
if|if
condition|(
operator|!
name|config
operator|.
name|hasAttribute
argument_list|(
literal|"name"
argument_list|)
condition|)
throw|throw
operator|new
name|EXistException
argument_list|(
literal|"group element requires an attribute 'name'"
argument_list|)
throw|;
name|name
operator|=
name|config
operator|.
name|getAttribute
argument_list|(
literal|"name"
argument_list|)
expr_stmt|;
name|NodeList
name|nl
init|=
name|config
operator|.
name|getElementsByTagNameNS
argument_list|(
name|Namespaces
operator|.
name|EXIST_NS
argument_list|,
literal|"setup"
argument_list|)
decl_stmt|;
if|if
condition|(
name|nl
operator|.
name|getLength
argument_list|()
operator|>
literal|0
condition|)
block|{
name|Element
name|elem
init|=
operator|(
name|Element
operator|)
name|nl
operator|.
name|item
argument_list|(
literal|0
argument_list|)
decl_stmt|;
name|setupAction
operator|=
operator|new
name|ActionThread
argument_list|()
expr_stmt|;
name|setupAction
operator|.
name|setName
argument_list|(
literal|"setup"
argument_list|)
expr_stmt|;
name|setupAction
operator|.
name|configure
argument_list|(
name|runner
argument_list|,
literal|null
argument_list|,
name|elem
argument_list|)
expr_stmt|;
block|}
name|nl
operator|=
name|config
operator|.
name|getElementsByTagNameNS
argument_list|(
name|Namespaces
operator|.
name|EXIST_NS
argument_list|,
literal|"tear-down"
argument_list|)
expr_stmt|;
if|if
condition|(
name|nl
operator|.
name|getLength
argument_list|()
operator|>
literal|0
condition|)
block|{
name|Element
name|elem
init|=
operator|(
name|Element
operator|)
name|nl
operator|.
name|item
argument_list|(
literal|0
argument_list|)
decl_stmt|;
name|tearDownAction
operator|=
operator|new
name|ActionThread
argument_list|()
expr_stmt|;
name|tearDownAction
operator|.
name|setName
argument_list|(
literal|"tear-down"
argument_list|)
expr_stmt|;
name|tearDownAction
operator|.
name|configure
argument_list|(
name|runner
argument_list|,
literal|null
argument_list|,
name|elem
argument_list|)
expr_stmt|;
block|}
name|nl
operator|=
name|config
operator|.
name|getElementsByTagNameNS
argument_list|(
name|Namespaces
operator|.
name|EXIST_NS
argument_list|,
literal|"thread"
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|nl
operator|.
name|getLength
argument_list|()
condition|;
name|i
operator|++
control|)
block|{
name|Element
name|elem
init|=
operator|(
name|Element
operator|)
name|nl
operator|.
name|item
argument_list|(
name|i
argument_list|)
decl_stmt|;
name|ActionThread
name|action
init|=
operator|new
name|ActionThread
argument_list|()
decl_stmt|;
name|action
operator|.
name|configure
argument_list|(
name|runner
argument_list|,
literal|null
argument_list|,
name|elem
argument_list|)
expr_stmt|;
name|threads
operator|.
name|add
argument_list|(
name|action
argument_list|)
expr_stmt|;
block|}
block|}
specifier|public
name|void
name|run
parameter_list|()
throws|throws
name|XMLDBException
throws|,
name|EXistException
block|{
name|runner
operator|.
name|getResults
argument_list|()
operator|.
name|groupStart
argument_list|(
name|this
argument_list|)
expr_stmt|;
if|if
condition|(
name|setupAction
operator|!=
literal|null
condition|)
block|{
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"Running setup ..."
argument_list|)
expr_stmt|;
name|setupAction
operator|.
name|run
argument_list|()
expr_stmt|;
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"Setup done ..."
argument_list|)
expr_stmt|;
block|}
name|Stack
name|stack
init|=
operator|new
name|Stack
argument_list|()
decl_stmt|;
for|for
control|(
name|Iterator
name|i
init|=
name|threads
operator|.
name|iterator
argument_list|()
init|;
name|i
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|ActionThread
name|thread
init|=
operator|(
name|ActionThread
operator|)
name|i
operator|.
name|next
argument_list|()
decl_stmt|;
name|Thread
name|t
init|=
operator|new
name|Thread
argument_list|(
name|thread
argument_list|,
name|thread
operator|.
name|getName
argument_list|()
argument_list|)
decl_stmt|;
name|t
operator|.
name|start
argument_list|()
expr_stmt|;
name|stack
operator|.
name|push
argument_list|(
name|t
argument_list|)
expr_stmt|;
block|}
while|while
condition|(
operator|!
name|stack
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|Thread
name|t
init|=
operator|(
name|Thread
operator|)
name|stack
operator|.
name|pop
argument_list|()
decl_stmt|;
try|try
block|{
name|t
operator|.
name|join
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|InterruptedException
name|e
parameter_list|)
block|{
block|}
block|}
if|if
condition|(
name|tearDownAction
operator|!=
literal|null
condition|)
block|{
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"Tearing down ..."
argument_list|)
expr_stmt|;
name|tearDownAction
operator|.
name|run
argument_list|()
expr_stmt|;
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"Done."
argument_list|)
expr_stmt|;
block|}
name|runner
operator|.
name|getResults
argument_list|()
operator|.
name|groupEnd
argument_list|(
name|this
argument_list|)
expr_stmt|;
block|}
specifier|public
name|String
name|getName
parameter_list|()
block|{
return|return
name|name
return|;
block|}
block|}
end_class

end_unit

