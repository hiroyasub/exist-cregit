begin_unit|revision:1.0.0;language:Java;cregit-version:0.0.1
begin_package
package|package
name|org
operator|.
name|exist
operator|.
name|storage
operator|.
name|btree
package|;
end_package

begin_import
import|import
name|junit
operator|.
name|framework
operator|.
name|TestCase
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|storage
operator|.
name|BrokerPool
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|util
operator|.
name|*
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|xquery
operator|.
name|TerminatedException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|xquery
operator|.
name|value
operator|.
name|AtomicValue
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|xquery
operator|.
name|value
operator|.
name|DoubleValue
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|EXistException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|File
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|StringWriter
import|;
end_import

begin_comment
comment|/**  * Low-level tests on the B+tree.  */
end_comment

begin_class
specifier|public
class|class
name|BTreeTest
extends|extends
name|TestCase
block|{
specifier|private
name|BrokerPool
name|pool
decl_stmt|;
specifier|private
name|File
name|file
init|=
literal|null
decl_stmt|;
specifier|private
name|int
name|count
init|=
literal|0
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|int
name|COUNT
init|=
literal|10000
decl_stmt|;
specifier|public
name|void
name|testStrings
parameter_list|()
block|{
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"------------------ testStrings: START -------------------------"
argument_list|)
expr_stmt|;
name|BTree
name|btree
init|=
literal|null
decl_stmt|;
try|try
block|{
name|btree
operator|=
operator|new
name|BTree
argument_list|(
name|pool
argument_list|,
operator|(
name|byte
operator|)
literal|0
argument_list|,
literal|false
argument_list|,
name|pool
operator|.
name|getCacheManager
argument_list|()
argument_list|,
name|file
argument_list|,
literal|0.1
argument_list|)
expr_stmt|;
name|btree
operator|.
name|create
argument_list|(
operator|(
name|short
operator|)
operator|-
literal|1
argument_list|)
expr_stmt|;
name|String
name|prefixStr
init|=
literal|"C"
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|1
init|;
name|i
operator|<=
name|COUNT
condition|;
name|i
operator|++
control|)
block|{
name|Value
name|value
init|=
operator|new
name|Value
argument_list|(
name|prefixStr
operator|+
name|Integer
operator|.
name|toString
argument_list|(
name|i
argument_list|)
argument_list|)
decl_stmt|;
name|btree
operator|.
name|addValue
argument_list|(
name|value
argument_list|,
name|i
argument_list|)
expr_stmt|;
block|}
name|btree
operator|.
name|flush
argument_list|()
expr_stmt|;
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"BTree size: "
operator|+
name|file
operator|.
name|length
argument_list|()
argument_list|)
expr_stmt|;
name|StringWriter
name|writer
init|=
operator|new
name|StringWriter
argument_list|()
decl_stmt|;
name|btree
operator|.
name|dump
argument_list|(
name|writer
argument_list|)
expr_stmt|;
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
name|writer
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|1
init|;
name|i
operator|<=
name|COUNT
condition|;
name|i
operator|++
control|)
block|{
name|long
name|p
init|=
name|btree
operator|.
name|findValue
argument_list|(
operator|new
name|Value
argument_list|(
name|prefixStr
operator|+
name|Integer
operator|.
name|toString
argument_list|(
name|i
argument_list|)
argument_list|)
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|p
argument_list|,
name|i
argument_list|)
expr_stmt|;
block|}
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"Testing IndexQuery.TRUNC_RIGHT"
argument_list|)
expr_stmt|;
name|IndexQuery
name|query
init|=
operator|new
name|IndexQuery
argument_list|(
name|IndexQuery
operator|.
name|TRUNC_RIGHT
argument_list|,
operator|new
name|Value
argument_list|(
name|prefixStr
argument_list|)
argument_list|)
decl_stmt|;
name|btree
operator|.
name|query
argument_list|(
name|query
argument_list|,
operator|new
name|StringIndexCallback
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|COUNT
argument_list|,
name|count
argument_list|)
expr_stmt|;
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"Testing IndexQuery.TRUNC_RIGHT"
argument_list|)
expr_stmt|;
name|query
operator|=
operator|new
name|IndexQuery
argument_list|(
name|IndexQuery
operator|.
name|TRUNC_RIGHT
argument_list|,
operator|new
name|Value
argument_list|(
name|prefixStr
operator|+
literal|"1"
argument_list|)
argument_list|)
expr_stmt|;
name|btree
operator|.
name|query
argument_list|(
name|query
argument_list|,
operator|new
name|StringIndexCallback
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1112
argument_list|,
name|count
argument_list|)
expr_stmt|;
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"Testing IndexQuery.NEQ"
argument_list|)
expr_stmt|;
name|query
operator|=
operator|new
name|IndexQuery
argument_list|(
name|IndexQuery
operator|.
name|NEQ
argument_list|,
operator|new
name|Value
argument_list|(
name|prefixStr
operator|+
literal|"10"
argument_list|)
argument_list|)
expr_stmt|;
name|btree
operator|.
name|query
argument_list|(
name|query
argument_list|,
operator|new
name|StringIndexCallback
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|COUNT
operator|-
literal|1
argument_list|,
name|count
argument_list|)
expr_stmt|;
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"Testing IndexQuery.GT"
argument_list|)
expr_stmt|;
name|query
operator|=
operator|new
name|IndexQuery
argument_list|(
name|IndexQuery
operator|.
name|GT
argument_list|,
operator|new
name|Value
argument_list|(
name|prefixStr
argument_list|)
argument_list|)
expr_stmt|;
name|btree
operator|.
name|query
argument_list|(
name|query
argument_list|,
operator|new
name|StringIndexCallback
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|COUNT
argument_list|,
name|count
argument_list|)
expr_stmt|;
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"Testing IndexQuery.GT"
argument_list|)
expr_stmt|;
name|query
operator|=
operator|new
name|IndexQuery
argument_list|(
name|IndexQuery
operator|.
name|GT
argument_list|,
operator|new
name|Value
argument_list|(
name|prefixStr
operator|+
literal|"1"
argument_list|)
argument_list|)
expr_stmt|;
name|btree
operator|.
name|query
argument_list|(
name|query
argument_list|,
operator|new
name|StringIndexCallback
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|COUNT
operator|-
literal|1
argument_list|,
name|count
argument_list|)
expr_stmt|;
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"Testing IndexQuery.LT"
argument_list|)
expr_stmt|;
name|query
operator|=
operator|new
name|IndexQuery
argument_list|(
name|IndexQuery
operator|.
name|LT
argument_list|,
operator|new
name|Value
argument_list|(
name|prefixStr
argument_list|)
argument_list|)
expr_stmt|;
name|btree
operator|.
name|query
argument_list|(
name|query
argument_list|,
operator|new
name|StringIndexCallback
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|count
argument_list|,
literal|0
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|DBException
name|e
parameter_list|)
block|{
name|e
operator|.
name|printStackTrace
argument_list|()
expr_stmt|;
name|fail
argument_list|(
name|e
operator|.
name|getMessage
argument_list|()
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
name|e
operator|.
name|printStackTrace
argument_list|()
expr_stmt|;
name|fail
argument_list|(
name|e
operator|.
name|getMessage
argument_list|()
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|TerminatedException
name|e
parameter_list|)
block|{
name|e
operator|.
name|printStackTrace
argument_list|()
expr_stmt|;
name|fail
argument_list|(
name|e
operator|.
name|getMessage
argument_list|()
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
if|if
condition|(
name|btree
operator|!=
literal|null
condition|)
try|try
block|{
name|btree
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|DBException
name|e
parameter_list|)
block|{
block|}
block|}
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"------------------ testStrings: END -------------------------"
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|testStringsTruncated
parameter_list|()
block|{
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"------------------ testStringsTruncated: START -------------------------"
argument_list|)
expr_stmt|;
name|BTree
name|btree
init|=
literal|null
decl_stmt|;
try|try
block|{
name|btree
operator|=
operator|new
name|BTree
argument_list|(
name|pool
argument_list|,
operator|(
name|byte
operator|)
literal|0
argument_list|,
literal|false
argument_list|,
name|pool
operator|.
name|getCacheManager
argument_list|()
argument_list|,
name|file
argument_list|,
literal|0.1
argument_list|)
expr_stmt|;
name|btree
operator|.
name|create
argument_list|(
operator|(
name|short
operator|)
operator|-
literal|1
argument_list|)
expr_stmt|;
name|char
name|prefix
init|=
literal|'A'
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
literal|24
condition|;
name|i
operator|++
control|)
block|{
for|for
control|(
name|int
name|j
init|=
literal|1
init|;
name|j
operator|<=
name|COUNT
condition|;
name|j
operator|++
control|)
block|{
name|Value
name|value
init|=
operator|new
name|Value
argument_list|(
name|prefix
operator|+
name|Integer
operator|.
name|toString
argument_list|(
name|j
argument_list|)
argument_list|)
decl_stmt|;
name|btree
operator|.
name|addValue
argument_list|(
name|value
argument_list|,
name|j
argument_list|)
expr_stmt|;
block|}
name|prefix
operator|++
expr_stmt|;
block|}
name|btree
operator|.
name|flush
argument_list|()
expr_stmt|;
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"Testing IndexQuery.TRUNC_RIGHT"
argument_list|)
expr_stmt|;
name|prefix
operator|=
literal|'A'
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
literal|24
condition|;
name|i
operator|++
control|)
block|{
name|IndexQuery
name|query
init|=
operator|new
name|IndexQuery
argument_list|(
name|IndexQuery
operator|.
name|TRUNC_RIGHT
argument_list|,
operator|new
name|Value
argument_list|(
name|Character
operator|.
name|toString
argument_list|(
name|prefix
argument_list|)
argument_list|)
argument_list|)
decl_stmt|;
name|btree
operator|.
name|query
argument_list|(
name|query
argument_list|,
operator|new
name|StringIndexCallback
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|COUNT
argument_list|,
name|count
argument_list|)
expr_stmt|;
name|prefix
operator|++
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
name|DBException
name|e
parameter_list|)
block|{
name|e
operator|.
name|printStackTrace
argument_list|()
expr_stmt|;
name|fail
argument_list|(
name|e
operator|.
name|getMessage
argument_list|()
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
name|e
operator|.
name|printStackTrace
argument_list|()
expr_stmt|;
name|fail
argument_list|(
name|e
operator|.
name|getMessage
argument_list|()
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|TerminatedException
name|e
parameter_list|)
block|{
name|e
operator|.
name|printStackTrace
argument_list|()
expr_stmt|;
name|fail
argument_list|(
name|e
operator|.
name|getMessage
argument_list|()
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
if|if
condition|(
name|btree
operator|!=
literal|null
condition|)
try|try
block|{
name|btree
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|DBException
name|e
parameter_list|)
block|{
block|}
block|}
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"------------------ testStringsTruncated: END -------------------------"
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|testRemoveStrings
parameter_list|()
block|{
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"------------------ testRemoveStrings: START -------------------------"
argument_list|)
expr_stmt|;
name|BTree
name|btree
init|=
literal|null
decl_stmt|;
try|try
block|{
name|btree
operator|=
operator|new
name|BTree
argument_list|(
name|pool
argument_list|,
operator|(
name|byte
operator|)
literal|0
argument_list|,
literal|false
argument_list|,
name|pool
operator|.
name|getCacheManager
argument_list|()
argument_list|,
name|file
argument_list|,
literal|0.1
argument_list|)
expr_stmt|;
name|btree
operator|.
name|create
argument_list|(
operator|(
name|short
operator|)
operator|-
literal|1
argument_list|)
expr_stmt|;
name|char
name|prefix
init|=
literal|'A'
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
literal|24
condition|;
name|i
operator|++
control|)
block|{
for|for
control|(
name|int
name|j
init|=
literal|1
init|;
name|j
operator|<=
name|COUNT
condition|;
name|j
operator|++
control|)
block|{
name|Value
name|value
init|=
operator|new
name|Value
argument_list|(
name|prefix
operator|+
name|Integer
operator|.
name|toString
argument_list|(
name|j
argument_list|)
argument_list|)
decl_stmt|;
name|btree
operator|.
name|addValue
argument_list|(
name|value
argument_list|,
name|j
argument_list|)
expr_stmt|;
block|}
name|prefix
operator|++
expr_stmt|;
block|}
name|btree
operator|.
name|flush
argument_list|()
expr_stmt|;
name|prefix
operator|=
literal|'A'
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
literal|24
condition|;
name|i
operator|++
control|)
block|{
name|IndexQuery
name|query
init|=
operator|new
name|IndexQuery
argument_list|(
name|IndexQuery
operator|.
name|TRUNC_RIGHT
argument_list|,
operator|new
name|Value
argument_list|(
name|Character
operator|.
name|toString
argument_list|(
name|prefix
argument_list|)
argument_list|)
argument_list|)
decl_stmt|;
name|btree
operator|.
name|remove
argument_list|(
name|query
argument_list|,
operator|new
name|StringIndexCallback
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|COUNT
argument_list|,
name|count
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
operator|-
literal|1
argument_list|,
name|btree
operator|.
name|findValue
argument_list|(
operator|new
name|Value
argument_list|(
name|prefix
operator|+
name|Integer
operator|.
name|toString
argument_list|(
literal|100
argument_list|)
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|query
operator|=
operator|new
name|IndexQuery
argument_list|(
name|IndexQuery
operator|.
name|TRUNC_RIGHT
argument_list|,
operator|new
name|Value
argument_list|(
name|prefix
operator|+
name|Integer
operator|.
name|toString
argument_list|(
literal|100
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|btree
operator|.
name|query
argument_list|(
name|query
argument_list|,
operator|new
name|StringIndexCallback
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|count
argument_list|)
expr_stmt|;
name|prefix
operator|++
expr_stmt|;
block|}
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"Testing IndexQuery.TRUNC_RIGHT"
argument_list|)
expr_stmt|;
name|IndexQuery
name|query
init|=
operator|new
name|IndexQuery
argument_list|(
name|IndexQuery
operator|.
name|TRUNC_RIGHT
argument_list|,
operator|new
name|Value
argument_list|(
name|Character
operator|.
name|toString
argument_list|(
literal|'D'
argument_list|)
argument_list|)
argument_list|)
decl_stmt|;
name|btree
operator|.
name|query
argument_list|(
name|query
argument_list|,
operator|new
name|StringIndexCallback
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|count
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|DBException
name|e
parameter_list|)
block|{
name|e
operator|.
name|printStackTrace
argument_list|()
expr_stmt|;
name|fail
argument_list|(
name|e
operator|.
name|getMessage
argument_list|()
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
name|e
operator|.
name|printStackTrace
argument_list|()
expr_stmt|;
name|fail
argument_list|(
name|e
operator|.
name|getMessage
argument_list|()
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|TerminatedException
name|e
parameter_list|)
block|{
name|e
operator|.
name|printStackTrace
argument_list|()
expr_stmt|;
name|fail
argument_list|(
name|e
operator|.
name|getMessage
argument_list|()
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
if|if
condition|(
name|btree
operator|!=
literal|null
condition|)
try|try
block|{
name|btree
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|DBException
name|e
parameter_list|)
block|{
block|}
block|}
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"------------------ testRemoveStrings: END -------------------------"
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|testNumbers
parameter_list|()
throws|throws
name|TerminatedException
block|{
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"------------------ testNumbers: START -------------------------"
argument_list|)
expr_stmt|;
try|try
block|{
name|BTree
name|btree
init|=
operator|new
name|BTree
argument_list|(
name|pool
argument_list|,
operator|(
name|byte
operator|)
literal|0
argument_list|,
literal|false
argument_list|,
name|pool
operator|.
name|getCacheManager
argument_list|()
argument_list|,
name|file
argument_list|,
literal|0.1
argument_list|)
decl_stmt|;
name|btree
operator|.
name|create
argument_list|(
operator|(
name|short
operator|)
operator|-
literal|1
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|1
init|;
name|i
operator|<=
name|COUNT
condition|;
name|i
operator|++
control|)
block|{
name|Value
name|value
init|=
operator|new
name|SimpleValue
argument_list|(
operator|new
name|DoubleValue
argument_list|(
name|i
argument_list|)
argument_list|)
decl_stmt|;
name|btree
operator|.
name|addValue
argument_list|(
name|value
argument_list|,
name|i
argument_list|)
expr_stmt|;
block|}
name|btree
operator|.
name|flush
argument_list|()
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|1
init|;
name|i
operator|<=
name|COUNT
condition|;
name|i
operator|++
control|)
block|{
name|long
name|p
init|=
name|btree
operator|.
name|findValue
argument_list|(
operator|new
name|SimpleValue
argument_list|(
operator|new
name|DoubleValue
argument_list|(
name|i
argument_list|)
argument_list|)
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|p
argument_list|,
name|i
argument_list|)
expr_stmt|;
block|}
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"Testing IndexQuery.GT"
argument_list|)
expr_stmt|;
name|IndexQuery
name|query
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|COUNT
condition|;
name|i
operator|+=
literal|10
control|)
block|{
name|query
operator|=
operator|new
name|IndexQuery
argument_list|(
name|IndexQuery
operator|.
name|GT
argument_list|,
operator|new
name|SimpleValue
argument_list|(
operator|new
name|DoubleValue
argument_list|(
name|i
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|btree
operator|.
name|query
argument_list|(
name|query
argument_list|,
operator|new
name|SimpleCallback
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|COUNT
operator|-
name|i
argument_list|,
name|count
argument_list|)
expr_stmt|;
block|}
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"Testing IndexQuery.GEQ"
argument_list|)
expr_stmt|;
name|query
operator|=
operator|new
name|IndexQuery
argument_list|(
name|IndexQuery
operator|.
name|GEQ
argument_list|,
operator|new
name|SimpleValue
argument_list|(
operator|new
name|DoubleValue
argument_list|(
name|COUNT
operator|/
literal|2
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|btree
operator|.
name|query
argument_list|(
name|query
argument_list|,
operator|new
name|SimpleCallback
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|COUNT
operator|/
literal|2
operator|+
literal|1
argument_list|,
name|count
argument_list|)
expr_stmt|;
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"Testing IndexQuery.NEQ"
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|1
init|;
name|i
operator|<=
name|COUNT
operator|/
literal|8
condition|;
name|i
operator|++
control|)
block|{
name|query
operator|=
operator|new
name|IndexQuery
argument_list|(
name|IndexQuery
operator|.
name|NEQ
argument_list|,
operator|new
name|SimpleValue
argument_list|(
operator|new
name|DoubleValue
argument_list|(
name|i
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|btree
operator|.
name|query
argument_list|(
name|query
argument_list|,
operator|new
name|SimpleCallback
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|COUNT
operator|-
literal|1
argument_list|,
name|count
argument_list|)
expr_stmt|;
block|}
name|btree
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|DBException
name|e
parameter_list|)
block|{
name|e
operator|.
name|printStackTrace
argument_list|()
expr_stmt|;
name|fail
argument_list|(
name|e
operator|.
name|getMessage
argument_list|()
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
name|e
operator|.
name|printStackTrace
argument_list|()
expr_stmt|;
name|fail
argument_list|(
name|e
operator|.
name|getMessage
argument_list|()
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|EXistException
name|e
parameter_list|)
block|{
name|e
operator|.
name|printStackTrace
argument_list|()
expr_stmt|;
name|fail
argument_list|(
name|e
operator|.
name|getMessage
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"------------------ testNumbers: END -------------------------"
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|testNumbersWithPrefix
parameter_list|()
block|{
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"------------------ testNumbersWithPrefix: START -------------------------"
argument_list|)
expr_stmt|;
try|try
block|{
name|BTree
name|btree
init|=
operator|new
name|BTree
argument_list|(
name|pool
argument_list|,
operator|(
name|byte
operator|)
literal|0
argument_list|,
literal|false
argument_list|,
name|pool
operator|.
name|getCacheManager
argument_list|()
argument_list|,
name|file
argument_list|,
literal|0.1
argument_list|)
decl_stmt|;
name|btree
operator|.
name|create
argument_list|(
operator|(
name|short
operator|)
operator|-
literal|1
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|1
init|;
name|i
operator|<=
name|COUNT
condition|;
name|i
operator|++
control|)
block|{
name|Value
name|value
init|=
operator|new
name|PrefixValue
argument_list|(
literal|99
argument_list|,
operator|new
name|DoubleValue
argument_list|(
name|i
argument_list|)
argument_list|)
decl_stmt|;
name|btree
operator|.
name|addValue
argument_list|(
name|value
argument_list|,
name|i
argument_list|)
expr_stmt|;
block|}
for|for
control|(
name|int
name|i
init|=
literal|1
init|;
name|i
operator|<=
name|COUNT
condition|;
name|i
operator|++
control|)
block|{
name|Value
name|value
init|=
operator|new
name|PrefixValue
argument_list|(
literal|100
argument_list|,
operator|new
name|DoubleValue
argument_list|(
name|i
argument_list|)
argument_list|)
decl_stmt|;
name|btree
operator|.
name|addValue
argument_list|(
name|value
argument_list|,
name|i
argument_list|)
expr_stmt|;
block|}
name|btree
operator|.
name|flush
argument_list|()
expr_stmt|;
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"BTree size: "
operator|+
name|file
operator|.
name|length
argument_list|()
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|1
init|;
name|i
operator|<=
name|COUNT
condition|;
name|i
operator|++
control|)
block|{
name|long
name|p
init|=
name|btree
operator|.
name|findValue
argument_list|(
operator|new
name|PrefixValue
argument_list|(
literal|99
argument_list|,
operator|new
name|DoubleValue
argument_list|(
name|i
argument_list|)
argument_list|)
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|p
argument_list|,
name|i
argument_list|)
expr_stmt|;
block|}
name|Value
name|prefix
init|=
operator|new
name|PrefixValue
argument_list|(
literal|99
argument_list|)
decl_stmt|;
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"Testing IndexQuery.TRUNC_RIGHT"
argument_list|)
expr_stmt|;
name|IndexQuery
name|query
init|=
operator|new
name|IndexQuery
argument_list|(
name|IndexQuery
operator|.
name|TRUNC_RIGHT
argument_list|,
operator|new
name|PrefixValue
argument_list|(
literal|99
argument_list|)
argument_list|)
decl_stmt|;
name|btree
operator|.
name|query
argument_list|(
name|query
argument_list|,
operator|new
name|PrefixIndexCallback
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|COUNT
argument_list|,
name|count
argument_list|)
expr_stmt|;
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"Testing IndexQuery.GT"
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|COUNT
condition|;
name|i
operator|+=
literal|10
control|)
block|{
name|query
operator|=
operator|new
name|IndexQuery
argument_list|(
name|IndexQuery
operator|.
name|GT
argument_list|,
operator|new
name|PrefixValue
argument_list|(
literal|99
argument_list|,
operator|new
name|DoubleValue
argument_list|(
name|i
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|btree
operator|.
name|query
argument_list|(
name|query
argument_list|,
name|prefix
argument_list|,
operator|new
name|PrefixIndexCallback
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|COUNT
operator|-
name|i
argument_list|,
name|count
argument_list|)
expr_stmt|;
block|}
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"Testing IndexQuery.GEQ"
argument_list|)
expr_stmt|;
name|query
operator|=
operator|new
name|IndexQuery
argument_list|(
name|IndexQuery
operator|.
name|GEQ
argument_list|,
operator|new
name|PrefixValue
argument_list|(
literal|99
argument_list|,
operator|new
name|DoubleValue
argument_list|(
name|COUNT
operator|/
literal|2
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|btree
operator|.
name|query
argument_list|(
name|query
argument_list|,
name|prefix
argument_list|,
operator|new
name|PrefixIndexCallback
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|COUNT
operator|/
literal|2
operator|+
literal|1
argument_list|,
name|count
argument_list|)
expr_stmt|;
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"Testing IndexQuery.LT"
argument_list|)
expr_stmt|;
name|query
operator|=
operator|new
name|IndexQuery
argument_list|(
name|IndexQuery
operator|.
name|LT
argument_list|,
operator|new
name|PrefixValue
argument_list|(
literal|99
argument_list|,
operator|new
name|DoubleValue
argument_list|(
name|COUNT
operator|/
literal|2
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|btree
operator|.
name|query
argument_list|(
name|query
argument_list|,
name|prefix
argument_list|,
operator|new
name|PrefixIndexCallback
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|COUNT
operator|/
literal|2
operator|-
literal|1
argument_list|,
name|count
argument_list|)
expr_stmt|;
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"Testing IndexQuery.LEQ"
argument_list|)
expr_stmt|;
name|query
operator|=
operator|new
name|IndexQuery
argument_list|(
name|IndexQuery
operator|.
name|LEQ
argument_list|,
operator|new
name|PrefixValue
argument_list|(
literal|99
argument_list|,
operator|new
name|DoubleValue
argument_list|(
name|COUNT
operator|/
literal|2
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|btree
operator|.
name|query
argument_list|(
name|query
argument_list|,
name|prefix
argument_list|,
operator|new
name|PrefixIndexCallback
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|COUNT
operator|/
literal|2
argument_list|,
name|count
argument_list|)
expr_stmt|;
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"Testing IndexQuery.NEQ"
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|1
init|;
name|i
operator|<=
name|COUNT
operator|/
literal|8
condition|;
name|i
operator|++
control|)
block|{
name|count
operator|=
literal|0
expr_stmt|;
name|query
operator|=
operator|new
name|IndexQuery
argument_list|(
name|IndexQuery
operator|.
name|NEQ
argument_list|,
operator|new
name|PrefixValue
argument_list|(
literal|99
argument_list|,
operator|new
name|DoubleValue
argument_list|(
name|i
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|btree
operator|.
name|query
argument_list|(
name|query
argument_list|,
name|prefix
argument_list|,
operator|new
name|PrefixIndexCallback
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|COUNT
operator|-
literal|1
argument_list|,
name|count
argument_list|)
expr_stmt|;
block|}
name|btree
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|DBException
name|e
parameter_list|)
block|{
name|e
operator|.
name|printStackTrace
argument_list|()
expr_stmt|;
name|fail
argument_list|(
name|e
operator|.
name|getMessage
argument_list|()
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
name|e
operator|.
name|printStackTrace
argument_list|()
expr_stmt|;
name|fail
argument_list|(
name|e
operator|.
name|getMessage
argument_list|()
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|TerminatedException
name|e
parameter_list|)
block|{
name|e
operator|.
name|printStackTrace
argument_list|()
expr_stmt|;
name|fail
argument_list|(
name|e
operator|.
name|getMessage
argument_list|()
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|EXistException
name|e
parameter_list|)
block|{
name|e
operator|.
name|printStackTrace
argument_list|()
expr_stmt|;
name|fail
argument_list|(
name|e
operator|.
name|getMessage
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"------------------ testNumbersWithPrefix: END -------------------------"
argument_list|)
expr_stmt|;
block|}
specifier|protected
name|void
name|setUp
parameter_list|()
block|{
try|try
block|{
name|Configuration
name|config
init|=
operator|new
name|Configuration
argument_list|()
decl_stmt|;
name|BrokerPool
operator|.
name|configure
argument_list|(
literal|1
argument_list|,
literal|5
argument_list|,
name|config
argument_list|)
expr_stmt|;
name|pool
operator|=
name|BrokerPool
operator|.
name|getInstance
argument_list|()
expr_stmt|;
name|file
operator|=
operator|new
name|File
argument_list|(
name|System
operator|.
name|getProperty
argument_list|(
literal|"exist.home"
argument_list|,
literal|"."
argument_list|)
operator|+
literal|"/test/junit/test.dbx"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|e
operator|.
name|printStackTrace
argument_list|()
expr_stmt|;
name|fail
argument_list|(
name|e
operator|.
name|getMessage
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
specifier|protected
name|void
name|tearDown
parameter_list|()
block|{
try|try
block|{
name|BrokerPool
operator|.
name|stopAll
argument_list|(
literal|false
argument_list|)
expr_stmt|;
name|file
operator|.
name|delete
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|fail
argument_list|(
name|e
operator|.
name|getMessage
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
specifier|private
specifier|final
class|class
name|SimpleCallback
implements|implements
name|BTreeCallback
block|{
specifier|public
name|SimpleCallback
parameter_list|()
block|{
name|count
operator|=
literal|0
expr_stmt|;
block|}
specifier|public
name|boolean
name|indexInfo
parameter_list|(
name|Value
name|value
parameter_list|,
name|long
name|pointer
parameter_list|)
throws|throws
name|TerminatedException
block|{
name|count
operator|++
expr_stmt|;
return|return
literal|false
return|;
block|}
block|}
specifier|private
specifier|final
class|class
name|PrefixIndexCallback
implements|implements
name|BTreeCallback
block|{
specifier|public
name|PrefixIndexCallback
parameter_list|()
block|{
name|count
operator|=
literal|0
expr_stmt|;
block|}
specifier|public
name|boolean
name|indexInfo
parameter_list|(
name|Value
name|value
parameter_list|,
name|long
name|pointer
parameter_list|)
throws|throws
name|TerminatedException
block|{
name|int
name|prefix
init|=
name|ByteConversion
operator|.
name|byteToInt
argument_list|(
name|value
operator|.
name|data
argument_list|()
argument_list|,
name|value
operator|.
name|start
argument_list|()
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|99
argument_list|,
name|prefix
argument_list|)
expr_stmt|;
name|XMLString
name|key
init|=
name|UTF8
operator|.
name|decode
argument_list|(
name|value
operator|.
name|data
argument_list|()
argument_list|,
name|value
operator|.
name|start
argument_list|()
operator|+
literal|4
argument_list|,
name|value
operator|.
name|getLength
argument_list|()
operator|-
literal|4
argument_list|)
decl_stmt|;
comment|//            System.out.println(prefix + " : " + key);
name|count
operator|++
expr_stmt|;
return|return
literal|false
return|;
block|}
block|}
specifier|private
specifier|final
class|class
name|StringIndexCallback
implements|implements
name|BTreeCallback
block|{
specifier|public
name|StringIndexCallback
parameter_list|()
block|{
name|count
operator|=
literal|0
expr_stmt|;
block|}
specifier|public
name|boolean
name|indexInfo
parameter_list|(
name|Value
name|value
parameter_list|,
name|long
name|pointer
parameter_list|)
throws|throws
name|TerminatedException
block|{
name|XMLString
name|key
init|=
name|UTF8
operator|.
name|decode
argument_list|(
name|value
operator|.
name|data
argument_list|()
argument_list|,
name|value
operator|.
name|start
argument_list|()
argument_list|,
name|value
operator|.
name|getLength
argument_list|()
argument_list|)
decl_stmt|;
comment|//            System.out.println("\"" + key + "\": " + count);
name|count
operator|++
expr_stmt|;
return|return
literal|false
return|;
block|}
block|}
specifier|private
class|class
name|SimpleValue
extends|extends
name|Value
block|{
specifier|public
name|SimpleValue
parameter_list|(
name|AtomicValue
name|value
parameter_list|)
throws|throws
name|EXistException
block|{
name|data
operator|=
name|value
operator|.
name|serializeValue
argument_list|(
literal|0
argument_list|)
expr_stmt|;
name|len
operator|=
name|data
operator|.
name|length
expr_stmt|;
name|pos
operator|=
literal|0
expr_stmt|;
block|}
block|}
specifier|private
class|class
name|PrefixValue
extends|extends
name|Value
block|{
specifier|public
name|PrefixValue
parameter_list|(
name|int
name|prefix
parameter_list|)
block|{
name|len
operator|=
literal|4
expr_stmt|;
name|data
operator|=
operator|new
name|byte
index|[
name|len
index|]
expr_stmt|;
name|ByteConversion
operator|.
name|intToByte
argument_list|(
name|prefix
argument_list|,
name|data
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|pos
operator|=
literal|0
expr_stmt|;
block|}
specifier|public
name|PrefixValue
parameter_list|(
name|int
name|prefix
parameter_list|,
name|AtomicValue
name|value
parameter_list|)
throws|throws
name|EXistException
block|{
name|data
operator|=
name|value
operator|.
name|serializeValue
argument_list|(
literal|4
argument_list|)
expr_stmt|;
name|len
operator|=
name|data
operator|.
name|length
expr_stmt|;
name|ByteConversion
operator|.
name|intToByte
argument_list|(
name|prefix
argument_list|,
name|data
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|pos
operator|=
literal|0
expr_stmt|;
block|}
block|}
block|}
end_class

end_unit

