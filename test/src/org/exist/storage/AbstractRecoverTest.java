begin_unit|revision:1.0.0;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * eXist Open Source Native XML Database  * Copyright (C) 2001-2017 The eXist Project  * http://exist-db.org  *  * This program is free software; you can redistribute it and/or  * modify it under the terms of the GNU Lesser General Public License  * as published by the Free Software Foundation; either version 2  * of the License, or (at your option) any later version.  *  * This program is distributed in the hope that it will be useful,  * but WITHOUT ANY WARRANTY; without even the implied warranty of  * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the  * GNU Lesser General Public License for more details.  *  * You should have received a copy of the GNU Lesser General Public  * License along with this library; if not, write to the Free Software  * Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA  02110-1301  USA  */
end_comment

begin_package
package|package
name|org
operator|.
name|exist
operator|.
name|storage
package|;
end_package

begin_import
import|import
name|com
operator|.
name|evolvedbinary
operator|.
name|j8fu
operator|.
name|function
operator|.
name|BiConsumer5E
import|;
end_import

begin_import
import|import
name|com
operator|.
name|evolvedbinary
operator|.
name|j8fu
operator|.
name|function
operator|.
name|Runnable5E
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|EXistException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|TestUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|collections
operator|.
name|Collection
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|collections
operator|.
name|triggers
operator|.
name|TriggerException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|dom
operator|.
name|persistent
operator|.
name|DocumentImpl
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|dom
operator|.
name|persistent
operator|.
name|LockedDocument
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|security
operator|.
name|PermissionDeniedException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|storage
operator|.
name|lock
operator|.
name|Lock
operator|.
name|LockMode
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|storage
operator|.
name|txn
operator|.
name|TransactionManager
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|storage
operator|.
name|txn
operator|.
name|Txn
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|test
operator|.
name|ExistEmbeddedServer
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|test
operator|.
name|TestConstants
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|util
operator|.
name|DatabaseConfigurationException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|util
operator|.
name|FileUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|util
operator|.
name|LockException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|xmldb
operator|.
name|XmldbURI
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Ignore
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Rule
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|nio
operator|.
name|file
operator|.
name|Files
import|;
end_import

begin_import
import|import
name|java
operator|.
name|nio
operator|.
name|file
operator|.
name|Path
import|;
end_import

begin_import
import|import
name|java
operator|.
name|nio
operator|.
name|file
operator|.
name|Paths
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Optional
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|Executors
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|*
import|;
end_import

begin_comment
comment|/**  * @author<a href="mailto:adam@evolvedbinary.com">Adam Retter</a>  */
end_comment

begin_class
specifier|public
specifier|abstract
class|class
name|AbstractRecoverTest
block|{
specifier|private
specifier|static
specifier|final
name|boolean
name|COMMIT
init|=
literal|true
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|boolean
name|NO_COMMIT
init|=
literal|false
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|boolean
name|MUST_EXIST
init|=
literal|true
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|boolean
name|MUST_NOT_EXIST
init|=
literal|false
decl_stmt|;
comment|/**      * We set useTemporaryStorage=true for ExistEmbeddedServer      * so that each test runs on its own data directory.      */
annotation|@
name|Rule
specifier|public
specifier|final
name|ExistEmbeddedServer
name|existEmbeddedServer
init|=
operator|new
name|ExistEmbeddedServer
argument_list|(
literal|true
argument_list|,
literal|true
argument_list|)
decl_stmt|;
annotation|@
name|Test
specifier|public
name|void
name|storeAndLoad
parameter_list|()
throws|throws
name|LockException
throws|,
name|TriggerException
throws|,
name|PermissionDeniedException
throws|,
name|EXistException
throws|,
name|IOException
throws|,
name|DatabaseConfigurationException
throws|,
name|InterruptedException
block|{
specifier|final
name|Path
name|testFile
init|=
name|getTestFile1
argument_list|()
decl_stmt|;
name|BrokerPool
operator|.
name|FORCE_CORRUPTION
operator|=
literal|true
expr_stmt|;
name|store
argument_list|(
name|COMMIT
argument_list|,
name|testFile
argument_list|)
expr_stmt|;
name|flushJournal
argument_list|()
expr_stmt|;
name|existEmbeddedServer
operator|.
name|restart
argument_list|()
expr_stmt|;
name|BrokerPool
operator|.
name|FORCE_CORRUPTION
operator|=
literal|false
expr_stmt|;
name|read
argument_list|(
name|MUST_EXIST
argument_list|,
name|testFile
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|storeAndLoad_isRepeatable
parameter_list|()
throws|throws
name|LockException
throws|,
name|TriggerException
throws|,
name|PermissionDeniedException
throws|,
name|EXistException
throws|,
name|IOException
throws|,
name|DatabaseConfigurationException
throws|,
name|InterruptedException
block|{
name|storeAndLoad
argument_list|()
expr_stmt|;
name|existEmbeddedServer
operator|.
name|restart
argument_list|()
expr_stmt|;
name|storeAndLoad
argument_list|()
expr_stmt|;
name|existEmbeddedServer
operator|.
name|restart
argument_list|()
expr_stmt|;
name|storeAndLoad
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|storeWithoutCommitAndLoad
parameter_list|()
throws|throws
name|LockException
throws|,
name|TriggerException
throws|,
name|PermissionDeniedException
throws|,
name|EXistException
throws|,
name|IOException
throws|,
name|DatabaseConfigurationException
throws|,
name|InterruptedException
block|{
specifier|final
name|Path
name|testFile
init|=
name|getTestFile1
argument_list|()
decl_stmt|;
name|BrokerPool
operator|.
name|FORCE_CORRUPTION
operator|=
literal|true
expr_stmt|;
name|store
argument_list|(
name|NO_COMMIT
argument_list|,
name|testFile
argument_list|)
expr_stmt|;
name|flushJournal
argument_list|()
expr_stmt|;
name|existEmbeddedServer
operator|.
name|restart
argument_list|()
expr_stmt|;
name|BrokerPool
operator|.
name|FORCE_CORRUPTION
operator|=
literal|false
expr_stmt|;
name|read
argument_list|(
name|MUST_NOT_EXIST
argument_list|,
name|testFile
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|storeWithoutCommitAndLoad_isRepeatable
parameter_list|()
throws|throws
name|LockException
throws|,
name|TriggerException
throws|,
name|PermissionDeniedException
throws|,
name|EXistException
throws|,
name|IOException
throws|,
name|DatabaseConfigurationException
throws|,
name|InterruptedException
block|{
name|storeWithoutCommitAndLoad
argument_list|()
expr_stmt|;
name|existEmbeddedServer
operator|.
name|restart
argument_list|()
expr_stmt|;
name|storeWithoutCommitAndLoad
argument_list|()
expr_stmt|;
name|existEmbeddedServer
operator|.
name|restart
argument_list|()
expr_stmt|;
name|storeWithoutCommitAndLoad
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|storeThenDeleteAndLoad
parameter_list|()
throws|throws
name|LockException
throws|,
name|TriggerException
throws|,
name|PermissionDeniedException
throws|,
name|EXistException
throws|,
name|IOException
throws|,
name|DatabaseConfigurationException
throws|,
name|InterruptedException
block|{
specifier|final
name|Path
name|testFile
init|=
name|getTestFile1
argument_list|()
decl_stmt|;
name|BrokerPool
operator|.
name|FORCE_CORRUPTION
operator|=
literal|true
expr_stmt|;
name|store
argument_list|(
name|COMMIT
argument_list|,
name|testFile
argument_list|)
expr_stmt|;
name|delete
argument_list|(
name|COMMIT
argument_list|,
name|testFile
argument_list|)
expr_stmt|;
name|flushJournal
argument_list|()
expr_stmt|;
name|existEmbeddedServer
operator|.
name|restart
argument_list|()
expr_stmt|;
name|BrokerPool
operator|.
name|FORCE_CORRUPTION
operator|=
literal|false
expr_stmt|;
name|read
argument_list|(
name|MUST_NOT_EXIST
argument_list|,
name|testFile
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|storeThenDeleteAndLoad_isRepeatable
parameter_list|()
throws|throws
name|LockException
throws|,
name|TriggerException
throws|,
name|PermissionDeniedException
throws|,
name|EXistException
throws|,
name|IOException
throws|,
name|DatabaseConfigurationException
throws|,
name|InterruptedException
block|{
name|storeThenDeleteAndLoad
argument_list|()
expr_stmt|;
name|existEmbeddedServer
operator|.
name|restart
argument_list|()
expr_stmt|;
name|storeThenDeleteAndLoad
argument_list|()
expr_stmt|;
name|existEmbeddedServer
operator|.
name|restart
argument_list|()
expr_stmt|;
name|storeThenDeleteAndLoad
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|storeWithoutCommitThenDeleteAndLoad
parameter_list|()
throws|throws
name|LockException
throws|,
name|TriggerException
throws|,
name|PermissionDeniedException
throws|,
name|EXistException
throws|,
name|IOException
throws|,
name|DatabaseConfigurationException
throws|,
name|InterruptedException
block|{
specifier|final
name|Path
name|testFile
init|=
name|getTestFile1
argument_list|()
decl_stmt|;
name|BrokerPool
operator|.
name|FORCE_CORRUPTION
operator|=
literal|true
expr_stmt|;
name|store
argument_list|(
name|NO_COMMIT
argument_list|,
name|testFile
argument_list|)
expr_stmt|;
name|delete
argument_list|(
name|COMMIT
argument_list|,
name|testFile
argument_list|)
expr_stmt|;
name|flushJournal
argument_list|()
expr_stmt|;
name|existEmbeddedServer
operator|.
name|restart
argument_list|()
expr_stmt|;
name|BrokerPool
operator|.
name|FORCE_CORRUPTION
operator|=
literal|false
expr_stmt|;
name|read
argument_list|(
name|MUST_NOT_EXIST
argument_list|,
name|testFile
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|storeWithoutCommitThenDeleteAndLoad_isRepeatable
parameter_list|()
throws|throws
name|LockException
throws|,
name|TriggerException
throws|,
name|PermissionDeniedException
throws|,
name|EXistException
throws|,
name|IOException
throws|,
name|DatabaseConfigurationException
throws|,
name|InterruptedException
block|{
name|storeWithoutCommitThenDeleteAndLoad
argument_list|()
expr_stmt|;
name|existEmbeddedServer
operator|.
name|restart
argument_list|()
expr_stmt|;
name|storeWithoutCommitThenDeleteAndLoad
argument_list|()
expr_stmt|;
name|existEmbeddedServer
operator|.
name|restart
argument_list|()
expr_stmt|;
name|storeWithoutCommitThenDeleteAndLoad
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|storeThenDeleteWithoutCommitAndLoad
parameter_list|()
throws|throws
name|LockException
throws|,
name|TriggerException
throws|,
name|PermissionDeniedException
throws|,
name|EXistException
throws|,
name|IOException
throws|,
name|DatabaseConfigurationException
throws|,
name|InterruptedException
block|{
specifier|final
name|Path
name|testFile
init|=
name|getTestFile1
argument_list|()
decl_stmt|;
name|BrokerPool
operator|.
name|FORCE_CORRUPTION
operator|=
literal|true
expr_stmt|;
name|store
argument_list|(
name|COMMIT
argument_list|,
name|testFile
argument_list|)
expr_stmt|;
name|delete
argument_list|(
name|NO_COMMIT
argument_list|,
name|testFile
argument_list|)
expr_stmt|;
name|flushJournal
argument_list|()
expr_stmt|;
name|existEmbeddedServer
operator|.
name|restart
argument_list|()
expr_stmt|;
name|BrokerPool
operator|.
name|FORCE_CORRUPTION
operator|=
literal|false
expr_stmt|;
name|read
argument_list|(
name|MUST_EXIST
argument_list|,
name|testFile
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|storeThenDeleteWithoutCommitAndLoad_isRepeatable
parameter_list|()
throws|throws
name|LockException
throws|,
name|TriggerException
throws|,
name|PermissionDeniedException
throws|,
name|EXistException
throws|,
name|IOException
throws|,
name|DatabaseConfigurationException
throws|,
name|InterruptedException
block|{
name|storeThenDeleteWithoutCommitAndLoad
argument_list|()
expr_stmt|;
name|existEmbeddedServer
operator|.
name|restart
argument_list|()
expr_stmt|;
name|storeThenDeleteWithoutCommitAndLoad
argument_list|()
expr_stmt|;
name|existEmbeddedServer
operator|.
name|restart
argument_list|()
expr_stmt|;
name|storeThenDeleteWithoutCommitAndLoad
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|storeWithoutCommitThenDeleteWithoutCommitAndLoad
parameter_list|()
throws|throws
name|LockException
throws|,
name|TriggerException
throws|,
name|PermissionDeniedException
throws|,
name|EXistException
throws|,
name|IOException
throws|,
name|DatabaseConfigurationException
throws|,
name|InterruptedException
block|{
specifier|final
name|Path
name|testFile
init|=
name|getTestFile1
argument_list|()
decl_stmt|;
name|BrokerPool
operator|.
name|FORCE_CORRUPTION
operator|=
literal|true
expr_stmt|;
name|store
argument_list|(
name|NO_COMMIT
argument_list|,
name|testFile
argument_list|)
expr_stmt|;
name|delete
argument_list|(
name|NO_COMMIT
argument_list|,
name|testFile
argument_list|)
expr_stmt|;
name|flushJournal
argument_list|()
expr_stmt|;
name|existEmbeddedServer
operator|.
name|restart
argument_list|()
expr_stmt|;
name|BrokerPool
operator|.
name|FORCE_CORRUPTION
operator|=
literal|false
expr_stmt|;
name|read
argument_list|(
name|MUST_NOT_EXIST
argument_list|,
name|testFile
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|storeWithoutCommitThenDeleteWithoutCommitAndLoad_isRepeatable
parameter_list|()
throws|throws
name|LockException
throws|,
name|TriggerException
throws|,
name|PermissionDeniedException
throws|,
name|EXistException
throws|,
name|IOException
throws|,
name|DatabaseConfigurationException
throws|,
name|InterruptedException
block|{
name|storeWithoutCommitThenDeleteWithoutCommitAndLoad
argument_list|()
expr_stmt|;
name|existEmbeddedServer
operator|.
name|restart
argument_list|()
expr_stmt|;
name|storeWithoutCommitThenDeleteWithoutCommitAndLoad
argument_list|()
expr_stmt|;
name|existEmbeddedServer
operator|.
name|restart
argument_list|()
expr_stmt|;
name|storeWithoutCommitThenDeleteWithoutCommitAndLoad
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|deleteAndLoad
parameter_list|()
throws|throws
name|LockException
throws|,
name|TriggerException
throws|,
name|PermissionDeniedException
throws|,
name|EXistException
throws|,
name|IOException
throws|,
name|DatabaseConfigurationException
throws|,
name|InterruptedException
block|{
specifier|final
name|Path
name|testFile
init|=
name|getTestFile1
argument_list|()
decl_stmt|;
name|BrokerPool
operator|.
name|FORCE_CORRUPTION
operator|=
literal|false
expr_stmt|;
name|store
argument_list|(
name|COMMIT
argument_list|,
name|testFile
argument_list|)
expr_stmt|;
name|existEmbeddedServer
operator|.
name|restart
argument_list|()
expr_stmt|;
name|BrokerPool
operator|.
name|FORCE_CORRUPTION
operator|=
literal|true
expr_stmt|;
name|delete
argument_list|(
name|COMMIT
argument_list|,
name|testFile
argument_list|)
expr_stmt|;
name|flushJournal
argument_list|()
expr_stmt|;
name|existEmbeddedServer
operator|.
name|restart
argument_list|()
expr_stmt|;
name|BrokerPool
operator|.
name|FORCE_CORRUPTION
operator|=
literal|false
expr_stmt|;
name|read
argument_list|(
name|MUST_NOT_EXIST
argument_list|,
name|testFile
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|deleteAndLoad_isRepeatable
parameter_list|()
throws|throws
name|LockException
throws|,
name|TriggerException
throws|,
name|PermissionDeniedException
throws|,
name|EXistException
throws|,
name|IOException
throws|,
name|DatabaseConfigurationException
throws|,
name|InterruptedException
block|{
name|deleteAndLoad
argument_list|()
expr_stmt|;
name|existEmbeddedServer
operator|.
name|restart
argument_list|()
expr_stmt|;
name|deleteAndLoad
argument_list|()
expr_stmt|;
name|existEmbeddedServer
operator|.
name|restart
argument_list|()
expr_stmt|;
name|deleteAndLoad
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|deleteWithoutCommitAndLoad
parameter_list|()
throws|throws
name|LockException
throws|,
name|TriggerException
throws|,
name|PermissionDeniedException
throws|,
name|EXistException
throws|,
name|IOException
throws|,
name|DatabaseConfigurationException
throws|,
name|InterruptedException
block|{
specifier|final
name|Path
name|testFile
init|=
name|getTestFile1
argument_list|()
decl_stmt|;
name|BrokerPool
operator|.
name|FORCE_CORRUPTION
operator|=
literal|false
expr_stmt|;
name|store
argument_list|(
name|COMMIT
argument_list|,
name|testFile
argument_list|)
expr_stmt|;
name|existEmbeddedServer
operator|.
name|restart
argument_list|()
expr_stmt|;
name|BrokerPool
operator|.
name|FORCE_CORRUPTION
operator|=
literal|true
expr_stmt|;
name|delete
argument_list|(
name|NO_COMMIT
argument_list|,
name|testFile
argument_list|)
expr_stmt|;
name|flushJournal
argument_list|()
expr_stmt|;
name|existEmbeddedServer
operator|.
name|restart
argument_list|()
expr_stmt|;
name|BrokerPool
operator|.
name|FORCE_CORRUPTION
operator|=
literal|false
expr_stmt|;
name|read
argument_list|(
name|MUST_EXIST
argument_list|,
name|testFile
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|deleteWithoutCommitAndLoad_isRepeatable
parameter_list|()
throws|throws
name|LockException
throws|,
name|TriggerException
throws|,
name|PermissionDeniedException
throws|,
name|EXistException
throws|,
name|IOException
throws|,
name|DatabaseConfigurationException
throws|,
name|InterruptedException
block|{
name|deleteWithoutCommitAndLoad
argument_list|()
expr_stmt|;
name|existEmbeddedServer
operator|.
name|restart
argument_list|()
expr_stmt|;
name|deleteWithoutCommitAndLoad
argument_list|()
expr_stmt|;
name|existEmbeddedServer
operator|.
name|restart
argument_list|()
expr_stmt|;
name|deleteWithoutCommitAndLoad
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|replaceAndLoad
parameter_list|()
throws|throws
name|LockException
throws|,
name|TriggerException
throws|,
name|PermissionDeniedException
throws|,
name|EXistException
throws|,
name|IOException
throws|,
name|DatabaseConfigurationException
throws|,
name|InterruptedException
block|{
specifier|final
name|Path
name|testFile
init|=
name|getTestFile1
argument_list|()
decl_stmt|;
specifier|final
name|String
name|testFilename
init|=
name|FileUtils
operator|.
name|fileName
argument_list|(
name|testFile
argument_list|)
decl_stmt|;
name|BrokerPool
operator|.
name|FORCE_CORRUPTION
operator|=
literal|false
expr_stmt|;
name|store
argument_list|(
name|COMMIT
argument_list|,
name|testFile
argument_list|)
expr_stmt|;
name|existEmbeddedServer
operator|.
name|restart
argument_list|()
expr_stmt|;
specifier|final
name|Path
name|testFile2
init|=
name|getTestFile2
argument_list|()
decl_stmt|;
comment|// replace testFile with testFile2
name|BrokerPool
operator|.
name|FORCE_CORRUPTION
operator|=
literal|true
expr_stmt|;
name|store
argument_list|(
name|COMMIT
argument_list|,
name|testFile2
argument_list|,
name|testFilename
argument_list|)
expr_stmt|;
name|flushJournal
argument_list|()
expr_stmt|;
name|existEmbeddedServer
operator|.
name|restart
argument_list|()
expr_stmt|;
name|BrokerPool
operator|.
name|FORCE_CORRUPTION
operator|=
literal|false
expr_stmt|;
name|read
argument_list|(
name|MUST_EXIST
argument_list|,
name|testFile2
argument_list|,
name|testFilename
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|replaceAndLoad_isRepeatable
parameter_list|()
throws|throws
name|LockException
throws|,
name|TriggerException
throws|,
name|PermissionDeniedException
throws|,
name|EXistException
throws|,
name|IOException
throws|,
name|DatabaseConfigurationException
throws|,
name|InterruptedException
block|{
name|replaceAndLoad
argument_list|()
expr_stmt|;
name|existEmbeddedServer
operator|.
name|restart
argument_list|()
expr_stmt|;
name|replaceAndLoad
argument_list|()
expr_stmt|;
name|existEmbeddedServer
operator|.
name|restart
argument_list|()
expr_stmt|;
name|replaceAndLoad
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|replaceWithoutCommitAndLoad
parameter_list|()
throws|throws
name|LockException
throws|,
name|TriggerException
throws|,
name|PermissionDeniedException
throws|,
name|EXistException
throws|,
name|IOException
throws|,
name|DatabaseConfigurationException
throws|,
name|InterruptedException
block|{
specifier|final
name|Path
name|testFile
init|=
name|getTestFile1
argument_list|()
decl_stmt|;
specifier|final
name|String
name|testFilename
init|=
name|FileUtils
operator|.
name|fileName
argument_list|(
name|testFile
argument_list|)
decl_stmt|;
name|BrokerPool
operator|.
name|FORCE_CORRUPTION
operator|=
literal|false
expr_stmt|;
name|store
argument_list|(
name|COMMIT
argument_list|,
name|testFile
argument_list|)
expr_stmt|;
name|existEmbeddedServer
operator|.
name|restart
argument_list|()
expr_stmt|;
specifier|final
name|Path
name|testFile2
init|=
name|getTestFile2
argument_list|()
decl_stmt|;
comment|// replace testFile with testFile2
name|BrokerPool
operator|.
name|FORCE_CORRUPTION
operator|=
literal|true
expr_stmt|;
name|store
argument_list|(
name|NO_COMMIT
argument_list|,
name|testFile2
argument_list|,
name|testFilename
argument_list|)
expr_stmt|;
name|flushJournal
argument_list|()
expr_stmt|;
name|existEmbeddedServer
operator|.
name|restart
argument_list|()
expr_stmt|;
name|BrokerPool
operator|.
name|FORCE_CORRUPTION
operator|=
literal|false
expr_stmt|;
name|read
argument_list|(
name|MUST_EXIST
argument_list|,
name|testFile
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|replaceWithoutCommitAndLoad_isRepeatable
parameter_list|()
throws|throws
name|LockException
throws|,
name|TriggerException
throws|,
name|PermissionDeniedException
throws|,
name|EXistException
throws|,
name|IOException
throws|,
name|DatabaseConfigurationException
throws|,
name|InterruptedException
block|{
name|replaceWithoutCommitAndLoad
argument_list|()
expr_stmt|;
name|existEmbeddedServer
operator|.
name|restart
argument_list|()
expr_stmt|;
name|replaceWithoutCommitAndLoad
argument_list|()
expr_stmt|;
name|existEmbeddedServer
operator|.
name|restart
argument_list|()
expr_stmt|;
name|replaceWithoutCommitAndLoad
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|replaceThenDeleteAndLoad
parameter_list|()
throws|throws
name|LockException
throws|,
name|TriggerException
throws|,
name|PermissionDeniedException
throws|,
name|EXistException
throws|,
name|IOException
throws|,
name|DatabaseConfigurationException
throws|,
name|InterruptedException
block|{
specifier|final
name|Path
name|testFile
init|=
name|getTestFile1
argument_list|()
decl_stmt|;
specifier|final
name|String
name|testFilename
init|=
name|FileUtils
operator|.
name|fileName
argument_list|(
name|testFile
argument_list|)
decl_stmt|;
name|BrokerPool
operator|.
name|FORCE_CORRUPTION
operator|=
literal|false
expr_stmt|;
name|store
argument_list|(
name|COMMIT
argument_list|,
name|testFile
argument_list|)
expr_stmt|;
name|existEmbeddedServer
operator|.
name|restart
argument_list|()
expr_stmt|;
specifier|final
name|Path
name|testFile2
init|=
name|getTestFile2
argument_list|()
decl_stmt|;
comment|// replace testFile with testFile2
name|BrokerPool
operator|.
name|FORCE_CORRUPTION
operator|=
literal|true
expr_stmt|;
name|store
argument_list|(
name|COMMIT
argument_list|,
name|testFile2
argument_list|,
name|testFilename
argument_list|)
expr_stmt|;
name|delete
argument_list|(
name|COMMIT
argument_list|,
name|testFilename
argument_list|)
expr_stmt|;
name|flushJournal
argument_list|()
expr_stmt|;
name|existEmbeddedServer
operator|.
name|restart
argument_list|()
expr_stmt|;
name|BrokerPool
operator|.
name|FORCE_CORRUPTION
operator|=
literal|false
expr_stmt|;
name|read
argument_list|(
name|MUST_NOT_EXIST
argument_list|,
name|testFile2
argument_list|,
name|testFilename
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|replaceThenDeleteAndLoad_isRepeatable
parameter_list|()
throws|throws
name|LockException
throws|,
name|TriggerException
throws|,
name|PermissionDeniedException
throws|,
name|EXistException
throws|,
name|IOException
throws|,
name|DatabaseConfigurationException
throws|,
name|InterruptedException
block|{
name|replaceThenDeleteAndLoad
argument_list|()
expr_stmt|;
name|existEmbeddedServer
operator|.
name|restart
argument_list|()
expr_stmt|;
name|replaceThenDeleteAndLoad
argument_list|()
expr_stmt|;
name|existEmbeddedServer
operator|.
name|restart
argument_list|()
expr_stmt|;
name|replaceThenDeleteAndLoad
argument_list|()
expr_stmt|;
block|}
comment|/**      * Shows that recovery of entries in the journal fail for a non-linear history of a resource.      * The history created by this test, should never be created within by a single thread unless      * due to a programming mistake.      *      * It is currently possible to create such a non-recoverable history between threads      * for a single resource, however that must be solved by improved locking of resources      * e.g. keeping resource locks for the duration of a transaction.      *      * This test creates the journal history (repetitively):      *      * 1.<START T-1>      * 2.<T-1, A, null, x>      * 3.<COMMIT T-1>      // store!      * 4.<START T-2>      * 5.<T-2, A, x, y>	// replace!      * 6.<START T-3>      * 7.<T-3, A, x, null>	// delete!      * 8.<COMMIT T-3>      * 9. CRASH!      *      * In the above:      *     * "T-n" is the transaction id.      *     *<T-n, A, v, w> is the tuple<transactionId, key, previousValue, newValue)      *      * The problem with the above schedule, after crash, the recovery will never set      * key "A" to value "null", which it likely should.      *      * eXist-db performs the following recovery:      *      * R1. redo schedule step 5: A=y      * R2. redo schedule step 7: A=null      * R3. undo schedule step 5: A=x      *      * Step R3 will leaves the database in an inconsistent state (i.e. A != null).      */
annotation|@
name|Ignore
argument_list|(
literal|"Only possible from a single-thread by programming error. Journal is not expected to recover such cases!"
argument_list|)
annotation|@
name|Test
specifier|public
name|void
name|replaceWithoutCommitThenDeleteAndLoad
parameter_list|()
throws|throws
name|LockException
throws|,
name|TriggerException
throws|,
name|PermissionDeniedException
throws|,
name|EXistException
throws|,
name|IOException
throws|,
name|DatabaseConfigurationException
throws|,
name|InterruptedException
block|{
specifier|final
name|Path
name|testFile
init|=
name|getTestFile1
argument_list|()
decl_stmt|;
specifier|final
name|String
name|testFilename
init|=
name|FileUtils
operator|.
name|fileName
argument_list|(
name|testFile
argument_list|)
decl_stmt|;
name|BrokerPool
operator|.
name|FORCE_CORRUPTION
operator|=
literal|false
expr_stmt|;
name|store
argument_list|(
name|COMMIT
argument_list|,
name|testFile
argument_list|)
expr_stmt|;
name|existEmbeddedServer
operator|.
name|restart
argument_list|()
expr_stmt|;
specifier|final
name|Path
name|testFile2
init|=
name|getTestFile2
argument_list|()
decl_stmt|;
comment|// replace testFile with testFile2
name|BrokerPool
operator|.
name|FORCE_CORRUPTION
operator|=
literal|true
expr_stmt|;
name|store
argument_list|(
name|NO_COMMIT
argument_list|,
name|testFile2
argument_list|,
name|testFilename
argument_list|)
expr_stmt|;
name|delete
argument_list|(
name|COMMIT
argument_list|,
name|testFilename
argument_list|)
expr_stmt|;
name|flushJournal
argument_list|()
expr_stmt|;
name|existEmbeddedServer
operator|.
name|restart
argument_list|()
expr_stmt|;
name|BrokerPool
operator|.
name|FORCE_CORRUPTION
operator|=
literal|false
expr_stmt|;
name|read
argument_list|(
name|MUST_NOT_EXIST
argument_list|,
name|testFile
argument_list|)
expr_stmt|;
block|}
comment|/**      * Shows that recovery of entries in the journal fail for a non-linear history of a resource.      * The history created by this test, should never be created within by a single thread unless      * due to a programming mistake.      *      * It is currently possible to create such a non-recoverable history between threads      * for a single resource, however that must be solved by improved locking of resources      * e.g. keeping resource locks for the duration of a transaction.      *      * This test creates the journal history (repetitively):      *      * 1.<START T-1>      * 2.<T-1, A, null, x>      * 3.<COMMIT T-1>      // store!      * 4.<START T-2>      * 5.<T-2, A, x, y>	// replace!      * 6.<START T-3>      * 7.<T-3, A, x, null>	// delete!      * 8.<COMMIT T-3>      * 9. CRASH!      *      * In the above:      *     * "T-n" is the transaction id.      *     *<T-n, A, v, w> is the tuple<transactionId, key, previousValue, newValue)      *      * The problem with the above schedule, after crash, the recovery will never set      * key "A" to value "null", which it likely should.      *      * eXist-db performs the following recovery:      *      * R1. redo schedule step 5: A=y      * R2. redo schedule step 7: A=null      * R3. undo schedule step 5: A=x      *      * Step R3 will leaves the database in an inconsistent state (i.e. A != null).      */
annotation|@
name|Ignore
argument_list|(
literal|"Only possible from a single-thread by programming error. Journal is not expected to recover such cases!"
argument_list|)
annotation|@
name|Test
specifier|public
name|void
name|replaceWithoutCommitThenDeleteAndLoad_isRepeatable
parameter_list|()
throws|throws
name|LockException
throws|,
name|TriggerException
throws|,
name|PermissionDeniedException
throws|,
name|EXistException
throws|,
name|IOException
throws|,
name|DatabaseConfigurationException
throws|,
name|InterruptedException
block|{
name|replaceWithoutCommitThenDeleteAndLoad
argument_list|()
expr_stmt|;
name|existEmbeddedServer
operator|.
name|restart
argument_list|()
expr_stmt|;
name|replaceWithoutCommitThenDeleteAndLoad
argument_list|()
expr_stmt|;
name|existEmbeddedServer
operator|.
name|restart
argument_list|()
expr_stmt|;
name|replaceWithoutCommitThenDeleteAndLoad
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|replaceThenDeleteWithoutCommitAndLoad
parameter_list|()
throws|throws
name|LockException
throws|,
name|TriggerException
throws|,
name|PermissionDeniedException
throws|,
name|EXistException
throws|,
name|IOException
throws|,
name|DatabaseConfigurationException
throws|,
name|InterruptedException
block|{
specifier|final
name|Path
name|testFile
init|=
name|getTestFile1
argument_list|()
decl_stmt|;
specifier|final
name|String
name|testFilename
init|=
name|FileUtils
operator|.
name|fileName
argument_list|(
name|testFile
argument_list|)
decl_stmt|;
name|BrokerPool
operator|.
name|FORCE_CORRUPTION
operator|=
literal|false
expr_stmt|;
name|store
argument_list|(
name|COMMIT
argument_list|,
name|testFile
argument_list|)
expr_stmt|;
name|existEmbeddedServer
operator|.
name|restart
argument_list|()
expr_stmt|;
specifier|final
name|Path
name|testFile2
init|=
name|getTestFile2
argument_list|()
decl_stmt|;
comment|// replace testFile with testFile2
name|BrokerPool
operator|.
name|FORCE_CORRUPTION
operator|=
literal|true
expr_stmt|;
name|store
argument_list|(
name|COMMIT
argument_list|,
name|testFile2
argument_list|,
name|testFilename
argument_list|)
expr_stmt|;
name|delete
argument_list|(
name|NO_COMMIT
argument_list|,
name|testFilename
argument_list|)
expr_stmt|;
name|flushJournal
argument_list|()
expr_stmt|;
name|existEmbeddedServer
operator|.
name|restart
argument_list|()
expr_stmt|;
name|BrokerPool
operator|.
name|FORCE_CORRUPTION
operator|=
literal|false
expr_stmt|;
name|read
argument_list|(
name|MUST_EXIST
argument_list|,
name|testFile2
argument_list|,
name|testFilename
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|replaceThenDeleteWithoutCommitAndLoad_isRepeatable
parameter_list|()
throws|throws
name|LockException
throws|,
name|TriggerException
throws|,
name|PermissionDeniedException
throws|,
name|EXistException
throws|,
name|IOException
throws|,
name|DatabaseConfigurationException
throws|,
name|InterruptedException
block|{
name|replaceThenDeleteWithoutCommitAndLoad
argument_list|()
expr_stmt|;
name|existEmbeddedServer
operator|.
name|restart
argument_list|()
expr_stmt|;
name|replaceThenDeleteWithoutCommitAndLoad
argument_list|()
expr_stmt|;
name|existEmbeddedServer
operator|.
name|restart
argument_list|()
expr_stmt|;
name|replaceThenDeleteWithoutCommitAndLoad
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|replaceWithoutCommitThenDeleteWithoutCommitAndLoad
parameter_list|()
throws|throws
name|LockException
throws|,
name|TriggerException
throws|,
name|PermissionDeniedException
throws|,
name|EXistException
throws|,
name|IOException
throws|,
name|DatabaseConfigurationException
throws|,
name|InterruptedException
block|{
specifier|final
name|Path
name|testFile
init|=
name|getTestFile1
argument_list|()
decl_stmt|;
specifier|final
name|String
name|testFilename
init|=
name|FileUtils
operator|.
name|fileName
argument_list|(
name|testFile
argument_list|)
decl_stmt|;
name|BrokerPool
operator|.
name|FORCE_CORRUPTION
operator|=
literal|false
expr_stmt|;
name|store
argument_list|(
name|COMMIT
argument_list|,
name|testFile
argument_list|)
expr_stmt|;
name|existEmbeddedServer
operator|.
name|restart
argument_list|()
expr_stmt|;
specifier|final
name|Path
name|testFile2
init|=
name|getTestFile2
argument_list|()
decl_stmt|;
comment|// replace testFile with testFile2
name|BrokerPool
operator|.
name|FORCE_CORRUPTION
operator|=
literal|true
expr_stmt|;
name|store
argument_list|(
name|NO_COMMIT
argument_list|,
name|testFile2
argument_list|,
name|testFilename
argument_list|)
expr_stmt|;
name|delete
argument_list|(
name|NO_COMMIT
argument_list|,
name|testFilename
argument_list|)
expr_stmt|;
name|flushJournal
argument_list|()
expr_stmt|;
name|existEmbeddedServer
operator|.
name|restart
argument_list|()
expr_stmt|;
name|BrokerPool
operator|.
name|FORCE_CORRUPTION
operator|=
literal|false
expr_stmt|;
name|read
argument_list|(
name|MUST_EXIST
argument_list|,
name|testFile
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|replaceWithoutCommitThenDeleteWithoutCommitAndLoad_isRepeatable
parameter_list|()
throws|throws
name|LockException
throws|,
name|TriggerException
throws|,
name|PermissionDeniedException
throws|,
name|EXistException
throws|,
name|IOException
throws|,
name|DatabaseConfigurationException
throws|,
name|InterruptedException
block|{
name|replaceWithoutCommitThenDeleteWithoutCommitAndLoad
argument_list|()
expr_stmt|;
name|existEmbeddedServer
operator|.
name|restart
argument_list|()
expr_stmt|;
name|replaceWithoutCommitThenDeleteWithoutCommitAndLoad
argument_list|()
expr_stmt|;
name|existEmbeddedServer
operator|.
name|restart
argument_list|()
expr_stmt|;
name|replaceWithoutCommitThenDeleteWithoutCommitAndLoad
argument_list|()
expr_stmt|;
block|}
specifier|protected
specifier|abstract
name|Path
name|getTestFile1
parameter_list|()
throws|throws
name|IOException
function_decl|;
specifier|protected
specifier|abstract
name|Path
name|getTestFile2
parameter_list|()
throws|throws
name|IOException
function_decl|;
comment|/**      * Store a document into the database.      *      * @param commitAndClose true if the transaction should be committed. false will leave the transaction      *      unfinished (i.e. neither committed, aborted, or closed)      * @param file The file that to store      */
specifier|private
name|void
name|store
parameter_list|(
specifier|final
name|boolean
name|commitAndClose
parameter_list|,
specifier|final
name|Path
name|file
parameter_list|)
throws|throws
name|EXistException
throws|,
name|PermissionDeniedException
throws|,
name|IOException
throws|,
name|TriggerException
throws|,
name|LockException
throws|,
name|InterruptedException
block|{
name|store
argument_list|(
name|commitAndClose
argument_list|,
name|file
argument_list|,
name|FileUtils
operator|.
name|fileName
argument_list|(
name|file
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|/**      * Store a document into the database.      *      * @param commitAndClose true if the transaction should be committed. false will leave the transaction      *      unfinished (i.e. neither committed, aborted, or closed)      * @param file The file that to store      * @param dbFilename the name to use when storing the file in the database      */
specifier|private
name|void
name|store
parameter_list|(
specifier|final
name|boolean
name|commitAndClose
parameter_list|,
specifier|final
name|Path
name|file
parameter_list|,
specifier|final
name|String
name|dbFilename
parameter_list|)
throws|throws
name|EXistException
throws|,
name|PermissionDeniedException
throws|,
name|IOException
throws|,
name|TriggerException
throws|,
name|LockException
throws|,
name|InterruptedException
block|{
name|runSync
argument_list|(
operator|new
name|BrokerTask
argument_list|(
name|existEmbeddedServer
operator|.
name|getBrokerPool
argument_list|()
argument_list|,
parameter_list|(
name|broker
parameter_list|,
name|transaction
parameter_list|)
lambda|->
block|{
specifier|final
name|Collection
name|root
init|=
name|broker
operator|.
name|getOrCreateCollection
argument_list|(
name|transaction
argument_list|,
name|TestConstants
operator|.
name|TEST_COLLECTION_URI
argument_list|)
decl_stmt|;
name|assertNotNull
argument_list|(
name|root
argument_list|)
expr_stmt|;
name|broker
operator|.
name|saveCollection
argument_list|(
name|transaction
argument_list|,
name|root
argument_list|)
expr_stmt|;
name|storeAndVerify
argument_list|(
name|broker
argument_list|,
name|transaction
argument_list|,
name|root
argument_list|,
name|file
argument_list|,
name|dbFilename
argument_list|)
expr_stmt|;
if|if
condition|(
name|commitAndClose
condition|)
block|{
name|transaction
operator|.
name|commit
argument_list|()
expr_stmt|;
name|transaction
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
else|else
block|{
name|broker
operator|.
name|setCurrentTransaction
argument_list|(
literal|null
argument_list|)
expr_stmt|;
block|}
block|}
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|/**      * Store a document into the database and verify its correctness.      *      * @param broker The database broker      * @param transaction The database transaction      * @param collection The Collection into which the document should be stored      * @param file The file which holds the content for the document to store in the database      * @param dbFilename The name to store the document as in the database      */
specifier|protected
specifier|abstract
name|void
name|storeAndVerify
parameter_list|(
specifier|final
name|DBBroker
name|broker
parameter_list|,
specifier|final
name|Txn
name|transaction
parameter_list|,
specifier|final
name|Collection
name|collection
parameter_list|,
specifier|final
name|Path
name|file
parameter_list|,
specifier|final
name|String
name|dbFilename
parameter_list|)
throws|throws
name|EXistException
throws|,
name|PermissionDeniedException
throws|,
name|IOException
throws|,
name|TriggerException
throws|,
name|LockException
function_decl|;
comment|/**      * Read a document from the database.      *      * @param shouldExist true if the document should exist in the database, false if the document should not exist      * @param file The file that was previously stored      */
specifier|private
name|void
name|read
parameter_list|(
specifier|final
name|boolean
name|shouldExist
parameter_list|,
specifier|final
name|Path
name|file
parameter_list|)
throws|throws
name|EXistException
throws|,
name|PermissionDeniedException
throws|,
name|IOException
block|{
name|read
argument_list|(
name|shouldExist
argument_list|,
name|file
argument_list|,
name|FileUtils
operator|.
name|fileName
argument_list|(
name|file
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|/**      * Read a document from the database.      *      * @param shouldExist true if the document should exist in the database, false if the document should not exist      * @param file The file that was previously stored      * @param dbFilename The name of the file to read from the database      */
specifier|private
name|void
name|read
parameter_list|(
specifier|final
name|boolean
name|shouldExist
parameter_list|,
specifier|final
name|Path
name|file
parameter_list|,
specifier|final
name|String
name|dbFilename
parameter_list|)
throws|throws
name|EXistException
throws|,
name|PermissionDeniedException
throws|,
name|IOException
block|{
specifier|final
name|BrokerPool
name|pool
init|=
name|existEmbeddedServer
operator|.
name|getBrokerPool
argument_list|()
decl_stmt|;
try|try
init|(
specifier|final
name|DBBroker
name|broker
init|=
name|pool
operator|.
name|get
argument_list|(
name|Optional
operator|.
name|of
argument_list|(
name|pool
operator|.
name|getSecurityManager
argument_list|()
operator|.
name|getSystemSubject
argument_list|()
argument_list|)
argument_list|)
init|)
block|{
specifier|final
name|XmldbURI
name|uri
init|=
name|TestConstants
operator|.
name|TEST_COLLECTION_URI
operator|.
name|append
argument_list|(
name|dbFilename
argument_list|)
decl_stmt|;
try|try
init|(
specifier|final
name|LockedDocument
name|doc
init|=
name|broker
operator|.
name|getXMLResource
argument_list|(
name|uri
argument_list|,
name|LockMode
operator|.
name|READ_LOCK
argument_list|)
init|)
block|{
if|if
condition|(
operator|!
name|shouldExist
condition|)
block|{
name|assertNull
argument_list|(
literal|"Document should not exist in the database: "
operator|+
name|uri
argument_list|,
name|doc
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|assertNotNull
argument_list|(
literal|"Document does not exist in the database: "
operator|+
name|uri
argument_list|,
name|doc
argument_list|)
expr_stmt|;
name|readAndVerify
argument_list|(
name|broker
argument_list|,
name|doc
operator|.
name|getDocument
argument_list|()
argument_list|,
name|file
argument_list|,
name|dbFilename
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
comment|/**      * Read and Verify that the document from the database is correct.      *      * @param broker The database broker.      * @param doc The document from the database.      * @param file The file that was previously stored      * @param dbFilename The name of the file read from the database      */
specifier|protected
specifier|abstract
name|void
name|readAndVerify
parameter_list|(
specifier|final
name|DBBroker
name|broker
parameter_list|,
specifier|final
name|DocumentImpl
name|doc
parameter_list|,
specifier|final
name|Path
name|file
parameter_list|,
specifier|final
name|String
name|dbFilename
parameter_list|)
throws|throws
name|EXistException
throws|,
name|PermissionDeniedException
throws|,
name|IOException
function_decl|;
comment|/**      * Delete a document from the database.      *      * @param commitAndClose true if the transaction should be committed. false will leave the transaction      *      unfinished (i.e. neither committed, aborted, or closed)      * @param file The file that was previously stored, that should be deleted      */
specifier|private
name|void
name|delete
parameter_list|(
specifier|final
name|boolean
name|commitAndClose
parameter_list|,
specifier|final
name|Path
name|file
parameter_list|)
throws|throws
name|EXistException
throws|,
name|PermissionDeniedException
throws|,
name|IOException
throws|,
name|TriggerException
throws|,
name|LockException
throws|,
name|InterruptedException
block|{
name|delete
argument_list|(
name|commitAndClose
argument_list|,
name|FileUtils
operator|.
name|fileName
argument_list|(
name|file
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|/**      * Delete a document from the database.      *      * @param commitAndClose true if the transaction should be committed. false will leave the transaction      *      unfinished (i.e. neither committed, aborted, or closed)      * @param dbFilename The name of the file that was previously stored, that should be deleted      */
specifier|private
name|void
name|delete
parameter_list|(
specifier|final
name|boolean
name|commitAndClose
parameter_list|,
specifier|final
name|String
name|dbFilename
parameter_list|)
throws|throws
name|EXistException
throws|,
name|PermissionDeniedException
throws|,
name|IOException
throws|,
name|TriggerException
throws|,
name|LockException
throws|,
name|InterruptedException
block|{
name|runSync
argument_list|(
operator|new
name|BrokerTask
argument_list|(
name|existEmbeddedServer
operator|.
name|getBrokerPool
argument_list|()
argument_list|,
parameter_list|(
name|broker
parameter_list|,
name|transaction
parameter_list|)
lambda|->
block|{
specifier|final
name|Collection
name|root
init|=
name|broker
operator|.
name|getOrCreateCollection
argument_list|(
name|transaction
argument_list|,
name|TestConstants
operator|.
name|TEST_COLLECTION_URI
argument_list|)
decl_stmt|;
name|assertNotNull
argument_list|(
name|root
argument_list|)
expr_stmt|;
name|broker
operator|.
name|saveCollection
argument_list|(
name|transaction
argument_list|,
name|root
argument_list|)
expr_stmt|;
specifier|final
name|DocumentImpl
name|doc
init|=
name|root
operator|.
name|getDocument
argument_list|(
name|broker
argument_list|,
name|XmldbURI
operator|.
name|create
argument_list|(
name|dbFilename
argument_list|)
argument_list|)
decl_stmt|;
if|if
condition|(
name|doc
operator|!=
literal|null
condition|)
block|{
name|root
operator|.
name|removeResource
argument_list|(
name|transaction
argument_list|,
name|broker
argument_list|,
name|doc
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|commitAndClose
condition|)
block|{
name|transaction
operator|.
name|commit
argument_list|()
expr_stmt|;
name|transaction
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
else|else
block|{
name|broker
operator|.
name|setCurrentTransaction
argument_list|(
literal|null
argument_list|)
expr_stmt|;
block|}
block|}
argument_list|)
argument_list|)
expr_stmt|;
block|}
specifier|private
name|void
name|flushJournal
parameter_list|()
block|{
specifier|final
name|BrokerPool
name|pool
init|=
name|existEmbeddedServer
operator|.
name|getBrokerPool
argument_list|()
decl_stmt|;
name|pool
operator|.
name|getJournalManager
argument_list|()
operator|.
name|get
argument_list|()
operator|.
name|flush
argument_list|(
literal|true
argument_list|,
literal|false
argument_list|)
expr_stmt|;
block|}
specifier|protected
name|Path
name|resolveTestFile
parameter_list|(
specifier|final
name|String
name|fileName
parameter_list|)
throws|throws
name|IOException
block|{
specifier|final
name|Path
name|path
init|=
name|TestUtils
operator|.
name|getEXistHome
argument_list|()
operator|.
name|orElseGet
argument_list|(
parameter_list|()
lambda|->
name|Paths
operator|.
name|get
argument_list|(
literal|"."
argument_list|)
argument_list|)
operator|.
name|resolve
argument_list|(
name|fileName
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|Files
operator|.
name|exists
argument_list|(
name|path
argument_list|)
condition|)
block|{
throw|throw
operator|new
name|IOException
argument_list|(
literal|"No such test file: "
operator|+
name|path
operator|.
name|toAbsolutePath
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|)
throw|;
block|}
return|return
name|path
return|;
block|}
specifier|private
name|int
name|runSyncId
init|=
literal|0
decl_stmt|;
specifier|private
name|void
name|runSync
parameter_list|(
specifier|final
name|BrokerTask
name|brokerTask
parameter_list|)
throws|throws
name|InterruptedException
throws|,
name|LockException
throws|,
name|TriggerException
throws|,
name|PermissionDeniedException
throws|,
name|EXistException
throws|,
name|IOException
block|{
specifier|final
name|String
name|brokerTaskName
init|=
literal|"AbstractRecoveryTest#runSync-"
operator|+
name|runSyncId
operator|++
decl_stmt|;
specifier|final
name|Thread
name|thread
init|=
operator|new
name|Thread
argument_list|(
name|brokerTask
argument_list|,
name|brokerTaskName
argument_list|)
decl_stmt|;
name|thread
operator|.
name|start
argument_list|()
expr_stmt|;
name|thread
operator|.
name|join
argument_list|()
expr_stmt|;
name|brokerTask
operator|.
name|throwIfException
argument_list|()
expr_stmt|;
block|}
specifier|private
specifier|static
class|class
name|BrokerTask
implements|implements
name|Runnable
block|{
specifier|private
specifier|final
name|BiConsumer5E
argument_list|<
name|DBBroker
argument_list|,
name|Txn
argument_list|,
name|EXistException
argument_list|,
name|PermissionDeniedException
argument_list|,
name|IOException
argument_list|,
name|TriggerException
argument_list|,
name|LockException
argument_list|>
name|task
decl_stmt|;
specifier|private
specifier|final
name|BrokerPool
name|pool
decl_stmt|;
specifier|private
specifier|volatile
name|Runnable5E
argument_list|<
name|EXistException
argument_list|,
name|PermissionDeniedException
argument_list|,
name|IOException
argument_list|,
name|TriggerException
argument_list|,
name|LockException
argument_list|>
name|exception
init|=
literal|null
decl_stmt|;
specifier|public
name|BrokerTask
parameter_list|(
specifier|final
name|BrokerPool
name|pool
parameter_list|,
specifier|final
name|BiConsumer5E
argument_list|<
name|DBBroker
argument_list|,
name|Txn
argument_list|,
name|EXistException
argument_list|,
name|PermissionDeniedException
argument_list|,
name|IOException
argument_list|,
name|TriggerException
argument_list|,
name|LockException
argument_list|>
name|task
parameter_list|)
block|{
name|this
operator|.
name|pool
operator|=
name|pool
expr_stmt|;
name|this
operator|.
name|task
operator|=
name|task
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|run
parameter_list|()
block|{
specifier|final
name|TransactionManager
name|transact
init|=
name|pool
operator|.
name|getTransactionManager
argument_list|()
decl_stmt|;
try|try
init|(
specifier|final
name|DBBroker
name|broker
init|=
name|pool
operator|.
name|get
argument_list|(
name|Optional
operator|.
name|of
argument_list|(
name|pool
operator|.
name|getSecurityManager
argument_list|()
operator|.
name|getSystemSubject
argument_list|()
argument_list|)
argument_list|)
init|)
block|{
specifier|final
name|Txn
name|transaction
init|=
name|transact
operator|.
name|beginTransaction
argument_list|()
decl_stmt|;
name|task
operator|.
name|accept
argument_list|(
name|broker
argument_list|,
name|transaction
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
specifier|final
name|EXistException
decl||
name|PermissionDeniedException
decl||
name|IOException
decl||
name|TriggerException
decl||
name|LockException
name|e
parameter_list|)
block|{
name|this
operator|.
name|exception
operator|=
parameter_list|()
lambda|->
block|{
throw|throw
name|e
throw|;
block|}
expr_stmt|;
block|}
block|}
comment|/**          * If an exception is present, throw it          */
specifier|public
name|void
name|throwIfException
parameter_list|()
throws|throws
name|LockException
throws|,
name|TriggerException
throws|,
name|PermissionDeniedException
throws|,
name|EXistException
throws|,
name|IOException
block|{
if|if
condition|(
name|exception
operator|!=
literal|null
condition|)
block|{
name|exception
operator|.
name|run
argument_list|()
expr_stmt|;
block|}
block|}
block|}
block|}
end_class

end_unit

