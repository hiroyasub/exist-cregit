begin_unit|revision:1.0.0;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * eXist Open Source Native XML Database  * Copyright (C) 2001-2018 The eXist Project  * http://exist-db.org  *  * This program is free software; you can redistribute it and/or  * modify it under the terms of the GNU Lesser General Public License  * as published by the Free Software Foundation; either version 2  * of the License, or (at your option) any later version.  *  * This program is distributed in the hope that it will be useful,  * but WITHOUT ANY WARRANTY; without even the implied warranty of  * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the  * GNU Lesser General Public License for more details.  *  * You should have received a copy of the GNU Lesser General Public  * License along with this library; if not, write to the Free Software  * Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA  02110-1301  USA  */
end_comment

begin_package
package|package
name|org
operator|.
name|exist
operator|.
name|storage
operator|.
name|journal
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|io
operator|.
name|input
operator|.
name|CountingInputStream
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|EXistException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|collections
operator|.
name|Collection
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|collections
operator|.
name|triggers
operator|.
name|TriggerException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|dom
operator|.
name|persistent
operator|.
name|BinaryDocument
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|dom
operator|.
name|persistent
operator|.
name|DocumentImpl
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|security
operator|.
name|PermissionDeniedException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|storage
operator|.
name|*
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|storage
operator|.
name|txn
operator|.
name|Txn
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|util
operator|.
name|LockException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|xmldb
operator|.
name|XmldbURI
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|After
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|AfterClass
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|BeforeClass
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|nio
operator|.
name|file
operator|.
name|Files
import|;
end_import

begin_import
import|import
name|java
operator|.
name|nio
operator|.
name|file
operator|.
name|Path
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Arrays
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertEquals
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertNotNull
import|;
end_import

begin_class
specifier|public
class|class
name|JournalBinaryTest
extends|extends
name|AbstractJournalTest
block|{
annotation|@
name|BeforeClass
specifier|public
specifier|static
name|void
name|prepare
parameter_list|()
block|{
comment|/*          * NOTE: we `ONLY` disable this so we can write our tests as single-threaded which is much simpler,          * that writing multi-threaded tests.          */
name|System
operator|.
name|setProperty
argument_list|(
name|DBBroker
operator|.
name|PROP_DISABLE_SINGLE_THREAD_OVERLAPPING_TRANSACTION_CHECKS
argument_list|,
literal|"true"
argument_list|)
expr_stmt|;
block|}
annotation|@
name|After
specifier|public
name|void
name|tearDown
parameter_list|()
block|{
name|BrokerPool
operator|.
name|FORCE_CORRUPTION
operator|=
literal|false
expr_stmt|;
block|}
annotation|@
name|AfterClass
specifier|public
specifier|static
name|void
name|cleanup
parameter_list|()
block|{
name|System
operator|.
name|clearProperty
argument_list|(
name|DBBroker
operator|.
name|PROP_DISABLE_SINGLE_THREAD_OVERLAPPING_TRANSACTION_CHECKS
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|protected
name|List
argument_list|<
name|ExpectedLoggable
argument_list|>
name|store_expected
parameter_list|(
specifier|final
name|long
name|storedTxnId
parameter_list|,
specifier|final
name|String
name|storedDbPath
parameter_list|)
block|{
return|return
name|Arrays
operator|.
name|asList
argument_list|(
name|Start
argument_list|(
name|storedTxnId
argument_list|)
argument_list|,
name|CreateBinary
argument_list|(
name|storedTxnId
argument_list|,
name|storedDbPath
argument_list|)
argument_list|,
name|Commit
argument_list|(
name|storedTxnId
argument_list|)
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|protected
name|List
argument_list|<
name|ExpectedLoggable
argument_list|>
name|storeWithoutCommit_expected
parameter_list|(
specifier|final
name|long
name|storedTxnId
parameter_list|,
specifier|final
name|String
name|storedDbPath
parameter_list|)
block|{
return|return
name|Arrays
operator|.
name|asList
argument_list|(
name|Start
argument_list|(
name|storedTxnId
argument_list|)
argument_list|,
name|CreateBinary
argument_list|(
name|storedTxnId
argument_list|,
name|storedDbPath
argument_list|)
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|protected
name|List
argument_list|<
name|ExpectedLoggable
argument_list|>
name|storeThenDelete_expected
parameter_list|(
specifier|final
name|long
name|storedTxnId
parameter_list|,
specifier|final
name|String
name|storedDbPath
parameter_list|,
specifier|final
name|long
name|deletedTxnId
parameter_list|,
specifier|final
name|String
name|deletedDbPath
parameter_list|)
block|{
return|return
name|Arrays
operator|.
name|asList
argument_list|(
name|Start
argument_list|(
name|storedTxnId
argument_list|)
argument_list|,
name|CreateBinary
argument_list|(
name|storedTxnId
argument_list|,
name|storedDbPath
argument_list|)
argument_list|,
name|Commit
argument_list|(
name|storedTxnId
argument_list|)
argument_list|,
name|Start
argument_list|(
name|deletedTxnId
argument_list|)
argument_list|,
name|DeleteBinary
argument_list|(
name|deletedTxnId
argument_list|,
name|deletedDbPath
argument_list|)
argument_list|,
name|Commit
argument_list|(
name|deletedTxnId
argument_list|)
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|protected
name|List
argument_list|<
name|ExpectedLoggable
argument_list|>
name|storeWithoutCommitThenDelete_expected
parameter_list|(
specifier|final
name|long
name|storedTxnId
parameter_list|,
specifier|final
name|String
name|storedDbPath
parameter_list|,
specifier|final
name|long
name|deletedTxnId
parameter_list|,
specifier|final
name|String
name|deletedDbPath
parameter_list|)
block|{
return|return
name|Arrays
operator|.
name|asList
argument_list|(
name|Start
argument_list|(
name|storedTxnId
argument_list|)
argument_list|,
name|CreateBinary
argument_list|(
name|storedTxnId
argument_list|,
name|storedDbPath
argument_list|)
argument_list|,
name|Start
argument_list|(
name|deletedTxnId
argument_list|)
argument_list|,
name|DeleteBinary
argument_list|(
name|deletedTxnId
argument_list|,
name|deletedDbPath
argument_list|)
argument_list|,
name|Commit
argument_list|(
name|deletedTxnId
argument_list|)
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|protected
name|List
argument_list|<
name|ExpectedLoggable
argument_list|>
name|storeThenDeleteWithoutCommit_expected
parameter_list|(
specifier|final
name|long
name|storedTxnId
parameter_list|,
specifier|final
name|String
name|storedDbPath
parameter_list|,
specifier|final
name|long
name|deletedTxnId
parameter_list|,
specifier|final
name|String
name|deletedDbPath
parameter_list|)
block|{
return|return
name|Arrays
operator|.
name|asList
argument_list|(
name|Start
argument_list|(
name|storedTxnId
argument_list|)
argument_list|,
name|CreateBinary
argument_list|(
name|storedTxnId
argument_list|,
name|storedDbPath
argument_list|)
argument_list|,
name|Commit
argument_list|(
name|storedTxnId
argument_list|)
argument_list|,
name|Start
argument_list|(
name|deletedTxnId
argument_list|)
argument_list|,
name|DeleteBinary
argument_list|(
name|deletedTxnId
argument_list|,
name|deletedDbPath
argument_list|)
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|protected
name|List
argument_list|<
name|ExpectedLoggable
argument_list|>
name|storeWithoutCommitThenDeleteWithoutCommit_expected
parameter_list|(
specifier|final
name|long
name|storedTxnId
parameter_list|,
specifier|final
name|String
name|storedDbPath
parameter_list|,
specifier|final
name|long
name|deletedTxnId
parameter_list|,
specifier|final
name|String
name|deletedDbPath
parameter_list|)
block|{
return|return
name|Arrays
operator|.
name|asList
argument_list|(
name|Start
argument_list|(
name|storedTxnId
argument_list|)
argument_list|,
name|CreateBinary
argument_list|(
name|storedTxnId
argument_list|,
name|storedDbPath
argument_list|)
argument_list|,
name|Start
argument_list|(
name|deletedTxnId
argument_list|)
argument_list|,
name|DeleteBinary
argument_list|(
name|deletedTxnId
argument_list|,
name|deletedDbPath
argument_list|)
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|protected
name|List
argument_list|<
name|ExpectedLoggable
argument_list|>
name|delete_expected
parameter_list|(
specifier|final
name|long
name|deletedTxnId
parameter_list|,
specifier|final
name|String
name|deletedDbPath
parameter_list|)
block|{
return|return
name|Arrays
operator|.
name|asList
argument_list|(
name|Start
argument_list|(
name|deletedTxnId
argument_list|)
argument_list|,
name|DeleteBinary
argument_list|(
name|deletedTxnId
argument_list|,
name|deletedDbPath
argument_list|)
argument_list|,
name|Commit
argument_list|(
name|deletedTxnId
argument_list|)
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|protected
name|List
argument_list|<
name|ExpectedLoggable
argument_list|>
name|deleteWithoutCommit_expected
parameter_list|(
specifier|final
name|long
name|deletedTxnId
parameter_list|,
specifier|final
name|String
name|deletedDbPath
parameter_list|)
block|{
return|return
name|Arrays
operator|.
name|asList
argument_list|(
name|Start
argument_list|(
name|deletedTxnId
argument_list|)
argument_list|,
name|DeleteBinary
argument_list|(
name|deletedTxnId
argument_list|,
name|deletedDbPath
argument_list|)
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|protected
name|List
argument_list|<
name|ExpectedLoggable
argument_list|>
name|replace_expected
parameter_list|(
specifier|final
name|long
name|replacedTxnId
parameter_list|,
specifier|final
name|String
name|replacedDbPath
parameter_list|)
block|{
return|return
name|Arrays
operator|.
name|asList
argument_list|(
name|Start
argument_list|(
name|replacedTxnId
argument_list|)
argument_list|,
name|ReplaceBinary
argument_list|(
name|replacedTxnId
argument_list|,
name|replacedDbPath
argument_list|)
argument_list|,
name|Commit
argument_list|(
name|replacedTxnId
argument_list|)
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|protected
name|List
argument_list|<
name|ExpectedLoggable
argument_list|>
name|replaceWithoutCommit_expected
parameter_list|(
specifier|final
name|long
name|replacedTxnId
parameter_list|,
specifier|final
name|String
name|replacedDbPath
parameter_list|)
block|{
return|return
name|Arrays
operator|.
name|asList
argument_list|(
name|Start
argument_list|(
name|replacedTxnId
argument_list|)
argument_list|,
name|ReplaceBinary
argument_list|(
name|replacedTxnId
argument_list|,
name|replacedDbPath
argument_list|)
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|protected
name|List
argument_list|<
name|ExpectedLoggable
argument_list|>
name|replaceThenDelete_expected
parameter_list|(
specifier|final
name|long
name|replacedTxnId
parameter_list|,
specifier|final
name|String
name|replacedDbPath
parameter_list|,
specifier|final
name|long
name|deletedTxnId
parameter_list|,
specifier|final
name|String
name|deletedDbPath
parameter_list|)
block|{
return|return
name|Arrays
operator|.
name|asList
argument_list|(
name|Start
argument_list|(
name|replacedTxnId
argument_list|)
argument_list|,
name|ReplaceBinary
argument_list|(
name|replacedTxnId
argument_list|,
name|replacedDbPath
argument_list|)
argument_list|,
name|Commit
argument_list|(
name|replacedTxnId
argument_list|)
argument_list|,
name|Start
argument_list|(
name|deletedTxnId
argument_list|)
argument_list|,
name|DeleteBinary
argument_list|(
name|deletedTxnId
argument_list|,
name|deletedDbPath
argument_list|)
argument_list|,
name|Commit
argument_list|(
name|deletedTxnId
argument_list|)
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|protected
name|List
argument_list|<
name|ExpectedLoggable
argument_list|>
name|replaceWithoutCommitThenDelete_expected
parameter_list|(
specifier|final
name|long
name|replacedTxnId
parameter_list|,
specifier|final
name|String
name|replacedDbPath
parameter_list|,
specifier|final
name|long
name|deletedTxnId
parameter_list|,
specifier|final
name|String
name|deletedDbPath
parameter_list|)
block|{
return|return
name|Arrays
operator|.
name|asList
argument_list|(
name|Start
argument_list|(
name|replacedTxnId
argument_list|)
argument_list|,
name|ReplaceBinary
argument_list|(
name|replacedTxnId
argument_list|,
name|replacedDbPath
argument_list|)
argument_list|,
name|Start
argument_list|(
name|deletedTxnId
argument_list|)
argument_list|,
name|DeleteBinary
argument_list|(
name|deletedTxnId
argument_list|,
name|deletedDbPath
argument_list|)
argument_list|,
name|Commit
argument_list|(
name|deletedTxnId
argument_list|)
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|protected
name|List
argument_list|<
name|ExpectedLoggable
argument_list|>
name|replaceThenDeleteWithoutCommit_expected
parameter_list|(
specifier|final
name|long
name|replacedTxnId
parameter_list|,
specifier|final
name|String
name|replacedDbPath
parameter_list|,
specifier|final
name|long
name|deletedTxnId
parameter_list|,
specifier|final
name|String
name|deletedDbPath
parameter_list|)
block|{
return|return
name|Arrays
operator|.
name|asList
argument_list|(
name|Start
argument_list|(
name|replacedTxnId
argument_list|)
argument_list|,
name|ReplaceBinary
argument_list|(
name|replacedTxnId
argument_list|,
name|replacedDbPath
argument_list|)
argument_list|,
name|Commit
argument_list|(
name|replacedTxnId
argument_list|)
argument_list|,
name|Start
argument_list|(
name|deletedTxnId
argument_list|)
argument_list|,
name|DeleteBinary
argument_list|(
name|deletedTxnId
argument_list|,
name|deletedDbPath
argument_list|)
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|protected
name|List
argument_list|<
name|ExpectedLoggable
argument_list|>
name|replaceWithoutCommitThenDeleteWithoutCommit_expected
parameter_list|(
specifier|final
name|long
name|replacedTxnId
parameter_list|,
specifier|final
name|String
name|replacedDbPath
parameter_list|,
specifier|final
name|long
name|deletedTxnId
parameter_list|,
specifier|final
name|String
name|deletedDbPath
parameter_list|)
block|{
return|return
name|Arrays
operator|.
name|asList
argument_list|(
name|Start
argument_list|(
name|replacedTxnId
argument_list|)
argument_list|,
name|ReplaceBinary
argument_list|(
name|replacedTxnId
argument_list|,
name|replacedDbPath
argument_list|)
argument_list|,
name|Start
argument_list|(
name|deletedTxnId
argument_list|)
argument_list|,
name|DeleteBinary
argument_list|(
name|deletedTxnId
argument_list|,
name|deletedDbPath
argument_list|)
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|protected
name|Path
name|getTestFile1
parameter_list|()
throws|throws
name|IOException
block|{
return|return
name|resolveTestFile
argument_list|(
literal|"LICENSE"
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|protected
name|Path
name|getTestFile2
parameter_list|()
throws|throws
name|IOException
block|{
return|return
name|resolveTestFile
argument_list|(
literal|"README.md"
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|protected
name|XmldbURI
name|storeAndVerify
parameter_list|(
specifier|final
name|DBBroker
name|broker
parameter_list|,
specifier|final
name|Txn
name|transaction
parameter_list|,
specifier|final
name|Collection
name|collection
parameter_list|,
specifier|final
name|Path
name|file
parameter_list|,
specifier|final
name|String
name|dbFilename
parameter_list|)
throws|throws
name|EXistException
throws|,
name|PermissionDeniedException
throws|,
name|IOException
throws|,
name|TriggerException
throws|,
name|LockException
block|{
specifier|final
name|byte
index|[]
name|data
init|=
name|Files
operator|.
name|readAllBytes
argument_list|(
name|file
argument_list|)
decl_stmt|;
specifier|final
name|BinaryDocument
name|doc
init|=
name|collection
operator|.
name|addBinaryResource
argument_list|(
name|transaction
argument_list|,
name|broker
argument_list|,
name|XmldbURI
operator|.
name|create
argument_list|(
name|dbFilename
argument_list|)
argument_list|,
name|data
argument_list|,
literal|"application/octet-stream"
argument_list|)
decl_stmt|;
name|assertNotNull
argument_list|(
name|doc
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|Files
operator|.
name|size
argument_list|(
name|file
argument_list|)
argument_list|,
name|doc
operator|.
name|getContentLength
argument_list|()
argument_list|)
expr_stmt|;
return|return
name|collection
operator|.
name|getURI
argument_list|()
operator|.
name|append
argument_list|(
name|dbFilename
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|protected
name|void
name|readAndVerify
parameter_list|(
specifier|final
name|DBBroker
name|broker
parameter_list|,
specifier|final
name|DocumentImpl
name|doc
parameter_list|,
specifier|final
name|Path
name|file
parameter_list|,
specifier|final
name|String
name|dbFilename
parameter_list|)
throws|throws
name|IOException
block|{
specifier|final
name|BinaryDocument
name|binDoc
init|=
operator|(
name|BinaryDocument
operator|)
name|doc
decl_stmt|;
comment|// verify the size, to ensure it is the correct content
specifier|final
name|long
name|expectedSize
init|=
name|Files
operator|.
name|size
argument_list|(
name|file
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|expectedSize
argument_list|,
name|binDoc
operator|.
name|getContentLength
argument_list|()
argument_list|)
expr_stmt|;
comment|// check the actual content too!
specifier|final
name|byte
index|[]
name|bdata
init|=
operator|new
name|byte
index|[
operator|(
name|int
operator|)
name|binDoc
operator|.
name|getContentLength
argument_list|()
index|]
decl_stmt|;
try|try
init|(
specifier|final
name|CountingInputStream
name|cis
init|=
operator|new
name|CountingInputStream
argument_list|(
name|broker
operator|.
name|getBinaryResource
argument_list|(
name|binDoc
argument_list|)
argument_list|)
init|)
block|{
specifier|final
name|int
name|read
init|=
name|cis
operator|.
name|read
argument_list|(
name|bdata
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|bdata
operator|.
name|length
argument_list|,
name|read
argument_list|)
expr_stmt|;
specifier|final
name|String
name|data
init|=
operator|new
name|String
argument_list|(
name|bdata
argument_list|)
decl_stmt|;
name|assertNotNull
argument_list|(
name|data
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|expectedSize
argument_list|,
name|cis
operator|.
name|getByteCount
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
specifier|private
specifier|final
specifier|static
name|String
name|FS_SUBDIR
init|=
literal|"fs"
decl_stmt|;
specifier|private
name|ExpectedCreateBinary
name|CreateBinary
parameter_list|(
specifier|final
name|long
name|transactionId
parameter_list|,
specifier|final
name|String
name|createdDbFile
parameter_list|)
block|{
return|return
operator|new
name|ExpectedCreateBinary
argument_list|(
name|transactionId
argument_list|,
name|createdDbFile
argument_list|)
return|;
block|}
specifier|private
name|ExpectedRenameBinary
name|RenameBinary
parameter_list|(
specifier|final
name|long
name|transactionId
parameter_list|,
specifier|final
name|String
name|renamedDbFile
parameter_list|)
block|{
return|return
operator|new
name|ExpectedRenameBinary
argument_list|(
name|transactionId
argument_list|,
name|renamedDbFile
argument_list|)
return|;
block|}
specifier|private
name|ExpectedReplaceBinary
name|ReplaceBinary
parameter_list|(
specifier|final
name|long
name|transactionId
parameter_list|,
specifier|final
name|String
name|replacedDbFile
parameter_list|)
block|{
return|return
operator|new
name|ExpectedReplaceBinary
argument_list|(
name|transactionId
argument_list|,
name|replacedDbFile
argument_list|)
return|;
block|}
specifier|private
name|ExpectedDeleteBinary
name|DeleteBinary
parameter_list|(
specifier|final
name|long
name|transactionId
parameter_list|,
specifier|final
name|String
name|deletedDbFile
parameter_list|)
block|{
return|return
operator|new
name|ExpectedDeleteBinary
argument_list|(
name|transactionId
argument_list|,
name|deletedDbFile
argument_list|)
return|;
block|}
specifier|private
class|class
name|ExpectedCreateBinary
extends|extends
name|ExpectedLoggable
block|{
specifier|private
specifier|final
name|String
name|createdDbFile
decl_stmt|;
specifier|private
specifier|final
name|Path
name|dataDir
decl_stmt|;
specifier|public
name|ExpectedCreateBinary
parameter_list|(
specifier|final
name|long
name|transactionId
parameter_list|,
specifier|final
name|String
name|createdDbFile
parameter_list|)
block|{
name|super
argument_list|(
name|transactionId
argument_list|)
expr_stmt|;
name|this
operator|.
name|createdDbFile
operator|=
name|createdDbFile
expr_stmt|;
name|this
operator|.
name|dataDir
operator|=
operator|(
name|Path
operator|)
name|existEmbeddedServer
operator|.
name|getBrokerPool
argument_list|()
operator|.
name|getConfiguration
argument_list|()
operator|.
name|getProperty
argument_list|(
name|BrokerPool
operator|.
name|PROPERTY_DATA_DIR
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|equals
parameter_list|(
specifier|final
name|Object
name|o
parameter_list|)
block|{
if|if
condition|(
name|this
operator|==
name|o
condition|)
return|return
literal|true
return|;
if|if
condition|(
name|o
operator|==
literal|null
operator|||
name|o
operator|.
name|getClass
argument_list|()
operator|!=
name|CreateBinaryLoggable
operator|.
name|class
condition|)
return|return
literal|false
return|;
specifier|final
name|Path
name|createdFile
init|=
name|dataDir
operator|.
name|resolve
argument_list|(
name|FS_SUBDIR
operator|+
name|createdDbFile
argument_list|)
decl_stmt|;
specifier|final
name|CreateBinaryLoggable
name|that
init|=
operator|(
name|CreateBinaryLoggable
operator|)
name|o
decl_stmt|;
return|return
name|that
operator|.
name|transactionId
operator|==
name|transactionId
operator|&&
name|that
operator|.
name|getCreateFile
argument_list|()
operator|.
name|equals
argument_list|(
name|createdFile
argument_list|)
return|;
block|}
specifier|public
name|String
name|toString
parameter_list|()
block|{
return|return
literal|"CREATE BINARY T-"
operator|+
name|transactionId
operator|+
literal|" v=null"
operator|+
literal|" w="
operator|+
name|dataDir
operator|.
name|resolve
argument_list|(
name|FS_SUBDIR
argument_list|)
operator|.
name|resolve
argument_list|(
name|createdDbFile
argument_list|)
return|;
block|}
block|}
specifier|private
class|class
name|ExpectedRenameBinary
extends|extends
name|ExpectedLoggable
block|{
specifier|private
specifier|final
name|String
name|renamedDbFile
decl_stmt|;
specifier|private
specifier|final
name|Path
name|dataDir
decl_stmt|;
specifier|public
name|ExpectedRenameBinary
parameter_list|(
specifier|final
name|long
name|transactionId
parameter_list|,
specifier|final
name|String
name|renamedDbFile
parameter_list|)
block|{
name|super
argument_list|(
name|transactionId
argument_list|)
expr_stmt|;
name|this
operator|.
name|renamedDbFile
operator|=
name|renamedDbFile
expr_stmt|;
name|this
operator|.
name|dataDir
operator|=
operator|(
name|Path
operator|)
name|existEmbeddedServer
operator|.
name|getBrokerPool
argument_list|()
operator|.
name|getConfiguration
argument_list|()
operator|.
name|getProperty
argument_list|(
name|BrokerPool
operator|.
name|PROPERTY_DATA_DIR
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|equals
parameter_list|(
specifier|final
name|Object
name|o
parameter_list|)
block|{
if|if
condition|(
name|this
operator|==
name|o
condition|)
return|return
literal|true
return|;
if|if
condition|(
name|o
operator|==
literal|null
operator|||
name|o
operator|.
name|getClass
argument_list|()
operator|!=
name|RenameBinaryLoggable
operator|.
name|class
condition|)
return|return
literal|false
return|;
specifier|final
name|Path
name|renamedFile
init|=
name|dataDir
operator|.
name|resolve
argument_list|(
name|FS_SUBDIR
operator|+
name|renamedDbFile
argument_list|)
decl_stmt|;
specifier|final
name|RenameBinaryLoggable
name|that
init|=
operator|(
name|RenameBinaryLoggable
operator|)
name|o
decl_stmt|;
return|return
name|that
operator|.
name|transactionId
operator|==
name|transactionId
operator|&&
name|that
operator|.
name|getSourceFile
argument_list|()
operator|.
name|equals
argument_list|(
name|renamedFile
argument_list|)
return|;
block|}
specifier|public
name|String
name|toString
parameter_list|()
block|{
return|return
literal|"RENAMED BINARY T-"
operator|+
name|transactionId
operator|+
literal|" v="
operator|+
name|dataDir
operator|.
name|resolve
argument_list|(
name|FS_SUBDIR
argument_list|)
operator|.
name|resolve
argument_list|(
name|renamedDbFile
argument_list|)
operator|+
literal|" w=<unknown>"
return|;
block|}
block|}
specifier|private
class|class
name|ExpectedReplaceBinary
extends|extends
name|ExpectedLoggable
block|{
specifier|private
specifier|final
name|String
name|replacedDbFile
decl_stmt|;
specifier|private
specifier|final
name|Path
name|dataDir
decl_stmt|;
specifier|public
name|ExpectedReplaceBinary
parameter_list|(
specifier|final
name|long
name|transactionId
parameter_list|,
specifier|final
name|String
name|replacedDbFile
parameter_list|)
block|{
name|super
argument_list|(
name|transactionId
argument_list|)
expr_stmt|;
name|this
operator|.
name|replacedDbFile
operator|=
name|replacedDbFile
expr_stmt|;
name|this
operator|.
name|dataDir
operator|=
operator|(
name|Path
operator|)
name|existEmbeddedServer
operator|.
name|getBrokerPool
argument_list|()
operator|.
name|getConfiguration
argument_list|()
operator|.
name|getProperty
argument_list|(
name|BrokerPool
operator|.
name|PROPERTY_DATA_DIR
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|equals
parameter_list|(
specifier|final
name|Object
name|o
parameter_list|)
block|{
if|if
condition|(
name|this
operator|==
name|o
condition|)
return|return
literal|true
return|;
if|if
condition|(
name|o
operator|==
literal|null
operator|||
name|o
operator|.
name|getClass
argument_list|()
operator|!=
name|ReplaceBinaryLoggable
operator|.
name|class
condition|)
return|return
literal|false
return|;
specifier|final
name|Path
name|replacedFile
init|=
name|dataDir
operator|.
name|resolve
argument_list|(
name|FS_SUBDIR
operator|+
name|replacedDbFile
argument_list|)
decl_stmt|;
specifier|final
name|ReplaceBinaryLoggable
name|that
init|=
operator|(
name|ReplaceBinaryLoggable
operator|)
name|o
decl_stmt|;
return|return
name|that
operator|.
name|transactionId
operator|==
name|transactionId
operator|&&
name|that
operator|.
name|getReplaceFile
argument_list|()
operator|.
name|equals
argument_list|(
name|replacedFile
argument_list|)
return|;
block|}
specifier|public
name|String
name|toString
parameter_list|()
block|{
return|return
literal|"REPLACED BINARY T-"
operator|+
name|transactionId
operator|+
literal|" v="
operator|+
name|dataDir
operator|.
name|resolve
argument_list|(
name|FS_SUBDIR
argument_list|)
operator|.
name|resolve
argument_list|(
name|replacedDbFile
argument_list|)
operator|+
literal|" w=<unknown>"
return|;
block|}
block|}
specifier|private
class|class
name|ExpectedDeleteBinary
extends|extends
name|ExpectedLoggable
block|{
specifier|private
specifier|final
name|String
name|deletedDbFile
decl_stmt|;
specifier|private
specifier|final
name|Path
name|dataDir
decl_stmt|;
specifier|public
name|ExpectedDeleteBinary
parameter_list|(
specifier|final
name|long
name|transactionId
parameter_list|,
specifier|final
name|String
name|deletedDbFile
parameter_list|)
block|{
name|super
argument_list|(
name|transactionId
argument_list|)
expr_stmt|;
name|this
operator|.
name|deletedDbFile
operator|=
name|deletedDbFile
expr_stmt|;
name|this
operator|.
name|dataDir
operator|=
operator|(
name|Path
operator|)
name|existEmbeddedServer
operator|.
name|getBrokerPool
argument_list|()
operator|.
name|getConfiguration
argument_list|()
operator|.
name|getProperty
argument_list|(
name|BrokerPool
operator|.
name|PROPERTY_DATA_DIR
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|equals
parameter_list|(
specifier|final
name|Object
name|o
parameter_list|)
block|{
if|if
condition|(
name|this
operator|==
name|o
condition|)
return|return
literal|true
return|;
if|if
condition|(
name|o
operator|==
literal|null
operator|||
name|o
operator|.
name|getClass
argument_list|()
operator|!=
name|DeleteBinaryLoggable
operator|.
name|class
condition|)
return|return
literal|false
return|;
specifier|final
name|Path
name|deletedFile
init|=
name|dataDir
operator|.
name|resolve
argument_list|(
name|FS_SUBDIR
operator|+
name|deletedDbFile
argument_list|)
decl_stmt|;
specifier|final
name|DeleteBinaryLoggable
name|that
init|=
operator|(
name|DeleteBinaryLoggable
operator|)
name|o
decl_stmt|;
return|return
name|that
operator|.
name|transactionId
operator|==
name|transactionId
operator|&&
name|that
operator|.
name|getDeleteFile
argument_list|()
operator|.
name|equals
argument_list|(
name|deletedFile
argument_list|)
return|;
block|}
specifier|public
name|String
name|toString
parameter_list|()
block|{
return|return
literal|"CREATE BINARY T-"
operator|+
name|transactionId
operator|+
literal|" v="
operator|+
name|dataDir
operator|.
name|resolve
argument_list|(
name|FS_SUBDIR
argument_list|)
operator|.
name|resolve
argument_list|(
name|deletedDbFile
argument_list|)
operator|+
literal|" w=null"
return|;
block|}
block|}
block|}
end_class

end_unit

