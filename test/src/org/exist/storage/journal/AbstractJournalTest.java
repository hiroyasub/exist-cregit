begin_unit|revision:1.0.0;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * eXist Open Source Native XML Database  * Copyright (C) 2001-2018 The eXist Project  * http://exist-db.org  *  * This program is free software; you can redistribute it and/or  * modify it under the terms of the GNU Lesser General Public License  * as published by the Free Software Foundation; either version 2  * of the License, or (at your option) any later version.  *  * This program is distributed in the hope that it will be useful,  * but WITHOUT ANY WARRANTY; without even the implied warranty of  * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the  * GNU Lesser General Public License for more details.  *  * You should have received a copy of the GNU Lesser General Public  * License along with this library; if not, write to the Free Software  * Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA  02110-1301  USA  */
end_comment

begin_package
package|package
name|org
operator|.
name|exist
operator|.
name|storage
operator|.
name|journal
package|;
end_package

begin_import
import|import
name|com
operator|.
name|evolvedbinary
operator|.
name|j8fu
operator|.
name|tuple
operator|.
name|Tuple2
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|EXistException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|TestUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|collections
operator|.
name|Collection
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|collections
operator|.
name|triggers
operator|.
name|TriggerException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|dom
operator|.
name|persistent
operator|.
name|DocumentImpl
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|dom
operator|.
name|persistent
operator|.
name|LockedDocument
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|numbering
operator|.
name|DLN
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|numbering
operator|.
name|NodeId
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|security
operator|.
name|PermissionDeniedException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|storage
operator|.
name|BrokerPool
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|storage
operator|.
name|DBBroker
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|storage
operator|.
name|Signatures
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|storage
operator|.
name|dom
operator|.
name|AddValueLoggable
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|storage
operator|.
name|dom
operator|.
name|RemovePageLoggable
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|storage
operator|.
name|index
operator|.
name|StoreValueLoggable
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|storage
operator|.
name|io
operator|.
name|VariableByteInputStream
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|storage
operator|.
name|lock
operator|.
name|Lock
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|storage
operator|.
name|txn
operator|.
name|*
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|test
operator|.
name|ExistEmbeddedServer
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|test
operator|.
name|TestConstants
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|util
operator|.
name|*
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|util
operator|.
name|io
operator|.
name|FastByteArrayInputStream
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|xmldb
operator|.
name|XmldbURI
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Ignore
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Rule
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_import
import|import
name|org
operator|.
name|xml
operator|.
name|sax
operator|.
name|SAXException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|lang
operator|.
name|reflect
operator|.
name|Field
import|;
end_import

begin_import
import|import
name|java
operator|.
name|lang
operator|.
name|reflect
operator|.
name|Modifier
import|;
end_import

begin_import
import|import
name|java
operator|.
name|nio
operator|.
name|file
operator|.
name|Files
import|;
end_import

begin_import
import|import
name|java
operator|.
name|nio
operator|.
name|file
operator|.
name|Path
import|;
end_import

begin_import
import|import
name|java
operator|.
name|nio
operator|.
name|file
operator|.
name|Paths
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|*
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|stream
operator|.
name|Stream
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|exist
operator|.
name|storage
operator|.
name|NativeBroker
operator|.
name|COLLECTIONS_DBX_ID
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|exist
operator|.
name|util
operator|.
name|ByteConversion
operator|.
name|byteToInt
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertNotNull
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertNull
import|;
end_import

begin_comment
comment|/**  * Tests to check that the correct entries  * are written to the journal during  * various operations.  *  * @author Adam Retter<adam@evolvedbinary.com>  */
end_comment

begin_class
specifier|public
specifier|abstract
class|class
name|AbstractJournalTest
block|{
specifier|private
specifier|static
specifier|final
name|boolean
name|COMMIT
init|=
literal|true
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|boolean
name|NO_COMMIT
init|=
literal|false
decl_stmt|;
specifier|protected
specifier|static
specifier|final
name|int
name|FIRST_USABLE_DOC_ID
init|=
literal|7
decl_stmt|;
specifier|protected
specifier|static
specifier|final
name|int
name|FIRST_USABLE_PAGE
init|=
literal|7
decl_stmt|;
comment|/**      * We set useTemporaryStorage=true for ExistEmbeddedServer      * so that each test runs on its own data directory.      */
annotation|@
name|Rule
specifier|public
specifier|final
name|ExistEmbeddedServer
name|existEmbeddedServer
init|=
operator|new
name|ExistEmbeddedServer
argument_list|(
literal|true
argument_list|,
literal|true
argument_list|)
decl_stmt|;
annotation|@
name|Test
specifier|public
name|void
name|store
parameter_list|()
throws|throws
name|LockException
throws|,
name|SAXException
throws|,
name|PermissionDeniedException
throws|,
name|EXistException
throws|,
name|IOException
throws|,
name|NoSuchFieldException
throws|,
name|IllegalAccessException
block|{
name|store
argument_list|(
literal|false
argument_list|,
literal|0
argument_list|)
expr_stmt|;
block|}
specifier|private
name|void
name|store
parameter_list|(
specifier|final
name|boolean
name|shouldGenerateReplaceEntry
parameter_list|,
specifier|final
name|int
name|offset
parameter_list|)
throws|throws
name|IllegalAccessException
throws|,
name|EXistException
throws|,
name|NoSuchFieldException
throws|,
name|IOException
throws|,
name|LockException
throws|,
name|SAXException
throws|,
name|PermissionDeniedException
block|{
name|checkpointJournalAndSwitchFile
argument_list|()
expr_stmt|;
specifier|final
name|Path
name|testFile
init|=
name|getTestFile1
argument_list|()
decl_stmt|;
name|BrokerPool
operator|.
name|FORCE_CORRUPTION
operator|=
literal|true
expr_stmt|;
specifier|final
name|Tuple2
argument_list|<
name|Long
argument_list|,
name|String
argument_list|>
name|stored
init|=
name|store
argument_list|(
name|COMMIT
argument_list|,
name|testFile
argument_list|)
decl_stmt|;
name|flushJournal
argument_list|()
expr_stmt|;
comment|// shutdown the broker pool (without destroying the data dir)
name|existEmbeddedServer
operator|.
name|getBrokerPool
argument_list|()
operator|.
name|shutdown
argument_list|()
expr_stmt|;
comment|// reset the corruption flag back to normal
name|BrokerPool
operator|.
name|FORCE_CORRUPTION
operator|=
literal|false
expr_stmt|;
comment|// check journal entries written for store
if|if
condition|(
operator|!
name|shouldGenerateReplaceEntry
condition|)
block|{
comment|// expected STORE
name|assertPartialOrdered
argument_list|(
name|store_expected
argument_list|(
name|stored
operator|.
name|_1
argument_list|,
name|stored
operator|.
name|_2
argument_list|,
name|offset
argument_list|)
argument_list|,
name|readLatestJournalEntries
argument_list|()
argument_list|)
expr_stmt|;
block|}
else|else
block|{
comment|// expected REPLACE
name|assertPartialOrdered
argument_list|(
name|replace_expected
argument_list|(
name|stored
operator|.
name|_1
argument_list|,
name|stored
operator|.
name|_2
argument_list|,
name|offset
operator|>
literal|0
condition|?
name|offset
operator|-
literal|1
else|:
name|offset
argument_list|,
literal|true
argument_list|)
argument_list|,
name|readLatestJournalEntries
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Test
specifier|public
name|void
name|store_isRepeatable
parameter_list|()
throws|throws
name|LockException
throws|,
name|SAXException
throws|,
name|PermissionDeniedException
throws|,
name|EXistException
throws|,
name|IOException
throws|,
name|DatabaseConfigurationException
throws|,
name|NoSuchFieldException
throws|,
name|IllegalAccessException
block|{
name|store
argument_list|(
literal|false
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|existEmbeddedServer
operator|.
name|restart
argument_list|()
expr_stmt|;
name|store
argument_list|(
literal|true
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|existEmbeddedServer
operator|.
name|restart
argument_list|()
expr_stmt|;
name|store
argument_list|(
literal|true
argument_list|,
literal|2
argument_list|)
expr_stmt|;
block|}
specifier|protected
specifier|abstract
name|List
argument_list|<
name|ExpectedLoggable
argument_list|>
name|store_expected
parameter_list|(
specifier|final
name|long
name|storedTxnId
parameter_list|,
specifier|final
name|String
name|storedDbPath
parameter_list|,
specifier|final
name|int
name|offset
parameter_list|)
function_decl|;
annotation|@
name|Test
specifier|public
name|void
name|storeWithoutCommit
parameter_list|()
throws|throws
name|LockException
throws|,
name|SAXException
throws|,
name|PermissionDeniedException
throws|,
name|EXistException
throws|,
name|IOException
throws|,
name|NoSuchFieldException
throws|,
name|IllegalAccessException
block|{
name|checkpointJournalAndSwitchFile
argument_list|()
expr_stmt|;
specifier|final
name|Path
name|testFile
init|=
name|getTestFile1
argument_list|()
decl_stmt|;
name|BrokerPool
operator|.
name|FORCE_CORRUPTION
operator|=
literal|true
expr_stmt|;
specifier|final
name|Tuple2
argument_list|<
name|Long
argument_list|,
name|String
argument_list|>
name|stored
init|=
name|store
argument_list|(
name|NO_COMMIT
argument_list|,
name|testFile
argument_list|)
decl_stmt|;
name|flushJournal
argument_list|()
expr_stmt|;
comment|// shutdown the broker pool (without destroying the data dir)
name|existEmbeddedServer
operator|.
name|getBrokerPool
argument_list|()
operator|.
name|shutdown
argument_list|()
expr_stmt|;
comment|// reset the corruption flag back to normal
name|BrokerPool
operator|.
name|FORCE_CORRUPTION
operator|=
literal|false
expr_stmt|;
comment|// check journal entries written for store without commit
name|assertPartialOrdered
argument_list|(
name|storeWithoutCommit_expected
argument_list|(
name|stored
operator|.
name|_1
argument_list|,
name|stored
operator|.
name|_2
argument_list|)
argument_list|,
name|readLatestJournalEntries
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|storeWithoutCommit_isRepeatable
parameter_list|()
throws|throws
name|LockException
throws|,
name|SAXException
throws|,
name|PermissionDeniedException
throws|,
name|EXistException
throws|,
name|IOException
throws|,
name|DatabaseConfigurationException
throws|,
name|NoSuchFieldException
throws|,
name|IllegalAccessException
block|{
name|storeWithoutCommit
argument_list|()
expr_stmt|;
name|existEmbeddedServer
operator|.
name|restart
argument_list|()
expr_stmt|;
name|storeWithoutCommit
argument_list|()
expr_stmt|;
name|existEmbeddedServer
operator|.
name|restart
argument_list|()
expr_stmt|;
name|storeWithoutCommit
argument_list|()
expr_stmt|;
block|}
specifier|protected
specifier|abstract
name|List
argument_list|<
name|ExpectedLoggable
argument_list|>
name|storeWithoutCommit_expected
parameter_list|(
specifier|final
name|long
name|storedTxnId
parameter_list|,
specifier|final
name|String
name|storedDbPath
parameter_list|)
function_decl|;
annotation|@
name|Test
specifier|public
name|void
name|storeThenDelete
parameter_list|()
throws|throws
name|LockException
throws|,
name|SAXException
throws|,
name|PermissionDeniedException
throws|,
name|EXistException
throws|,
name|IOException
throws|,
name|NoSuchFieldException
throws|,
name|IllegalAccessException
block|{
name|storeThenDelete
argument_list|(
literal|0
argument_list|)
expr_stmt|;
block|}
specifier|private
name|void
name|storeThenDelete
parameter_list|(
specifier|final
name|int
name|offset
parameter_list|)
throws|throws
name|LockException
throws|,
name|SAXException
throws|,
name|PermissionDeniedException
throws|,
name|EXistException
throws|,
name|IOException
throws|,
name|NoSuchFieldException
throws|,
name|IllegalAccessException
block|{
name|checkpointJournalAndSwitchFile
argument_list|()
expr_stmt|;
specifier|final
name|Path
name|testFile
init|=
name|getTestFile1
argument_list|()
decl_stmt|;
name|BrokerPool
operator|.
name|FORCE_CORRUPTION
operator|=
literal|true
expr_stmt|;
specifier|final
name|Tuple2
argument_list|<
name|Long
argument_list|,
name|String
argument_list|>
name|stored
init|=
name|store
argument_list|(
name|COMMIT
argument_list|,
name|testFile
argument_list|)
decl_stmt|;
specifier|final
name|Tuple2
argument_list|<
name|Long
argument_list|,
name|String
argument_list|>
name|deleted
init|=
name|delete
argument_list|(
name|COMMIT
argument_list|,
name|testFile
argument_list|)
decl_stmt|;
name|flushJournal
argument_list|()
expr_stmt|;
comment|// shutdown the broker pool (without destroying the data dir)
name|existEmbeddedServer
operator|.
name|getBrokerPool
argument_list|()
operator|.
name|shutdown
argument_list|()
expr_stmt|;
comment|// reset the corruption flag back to normal
name|BrokerPool
operator|.
name|FORCE_CORRUPTION
operator|=
literal|false
expr_stmt|;
comment|// check journal entries written for replace
name|assertPartialOrdered
argument_list|(
name|storeThenDelete_expected
argument_list|(
name|stored
operator|.
name|_1
argument_list|,
name|stored
operator|.
name|_2
argument_list|,
name|deleted
operator|.
name|_1
argument_list|,
name|deleted
operator|.
name|_2
argument_list|,
name|offset
argument_list|)
argument_list|,
name|readLatestJournalEntries
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|storeThenDelete_isRepeatable
parameter_list|()
throws|throws
name|LockException
throws|,
name|SAXException
throws|,
name|PermissionDeniedException
throws|,
name|EXistException
throws|,
name|IOException
throws|,
name|DatabaseConfigurationException
throws|,
name|NoSuchFieldException
throws|,
name|IllegalAccessException
block|{
name|storeThenDelete
argument_list|(
literal|0
argument_list|)
expr_stmt|;
name|existEmbeddedServer
operator|.
name|restart
argument_list|()
expr_stmt|;
name|storeThenDelete
argument_list|(
literal|1
argument_list|)
expr_stmt|;
name|existEmbeddedServer
operator|.
name|restart
argument_list|()
expr_stmt|;
name|storeThenDelete
argument_list|(
literal|2
argument_list|)
expr_stmt|;
block|}
specifier|protected
specifier|abstract
name|List
argument_list|<
name|ExpectedLoggable
argument_list|>
name|storeThenDelete_expected
parameter_list|(
specifier|final
name|long
name|storedTxnId
parameter_list|,
specifier|final
name|String
name|storedDbPath
parameter_list|,
specifier|final
name|long
name|deletedTxnId
parameter_list|,
specifier|final
name|String
name|deletedDbPath
parameter_list|,
specifier|final
name|int
name|offset
parameter_list|)
function_decl|;
annotation|@
name|Test
specifier|public
name|void
name|storeWithoutCommitThenDelete
parameter_list|()
throws|throws
name|LockException
throws|,
name|SAXException
throws|,
name|PermissionDeniedException
throws|,
name|EXistException
throws|,
name|IOException
throws|,
name|NoSuchFieldException
throws|,
name|IllegalAccessException
block|{
name|checkpointJournalAndSwitchFile
argument_list|()
expr_stmt|;
specifier|final
name|Path
name|testFile
init|=
name|getTestFile1
argument_list|()
decl_stmt|;
name|BrokerPool
operator|.
name|FORCE_CORRUPTION
operator|=
literal|true
expr_stmt|;
specifier|final
name|Tuple2
argument_list|<
name|Long
argument_list|,
name|String
argument_list|>
name|stored
init|=
name|store
argument_list|(
name|NO_COMMIT
argument_list|,
name|testFile
argument_list|)
decl_stmt|;
specifier|final
name|Tuple2
argument_list|<
name|Long
argument_list|,
name|String
argument_list|>
name|deleted
init|=
name|delete
argument_list|(
name|COMMIT
argument_list|,
name|testFile
argument_list|)
decl_stmt|;
name|flushJournal
argument_list|()
expr_stmt|;
comment|// shutdown the broker pool (without destroying the data dir)
name|existEmbeddedServer
operator|.
name|getBrokerPool
argument_list|()
operator|.
name|shutdown
argument_list|()
expr_stmt|;
comment|// reset the corruption flag back to normal
name|BrokerPool
operator|.
name|FORCE_CORRUPTION
operator|=
literal|false
expr_stmt|;
comment|// check journal entries written for replace
name|assertPartialOrdered
argument_list|(
name|storeWithoutCommitThenDelete_expected
argument_list|(
name|stored
operator|.
name|_1
argument_list|,
name|stored
operator|.
name|_2
argument_list|,
name|deleted
operator|.
name|_1
argument_list|,
name|deleted
operator|.
name|_2
argument_list|)
argument_list|,
name|readLatestJournalEntries
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|storeWithoutCommitThenDelete_isRepeatable
parameter_list|()
throws|throws
name|LockException
throws|,
name|SAXException
throws|,
name|PermissionDeniedException
throws|,
name|EXistException
throws|,
name|IOException
throws|,
name|DatabaseConfigurationException
throws|,
name|NoSuchFieldException
throws|,
name|IllegalAccessException
block|{
name|storeWithoutCommitThenDelete
argument_list|()
expr_stmt|;
name|existEmbeddedServer
operator|.
name|restart
argument_list|()
expr_stmt|;
name|storeWithoutCommitThenDelete
argument_list|()
expr_stmt|;
name|existEmbeddedServer
operator|.
name|restart
argument_list|()
expr_stmt|;
name|storeWithoutCommitThenDelete
argument_list|()
expr_stmt|;
block|}
specifier|protected
specifier|abstract
name|List
argument_list|<
name|ExpectedLoggable
argument_list|>
name|storeWithoutCommitThenDelete_expected
parameter_list|(
specifier|final
name|long
name|storedTxnId
parameter_list|,
specifier|final
name|String
name|storedDbPath
parameter_list|,
specifier|final
name|long
name|deletedTxnId
parameter_list|,
specifier|final
name|String
name|deletedDbPath
parameter_list|)
function_decl|;
annotation|@
name|Test
specifier|public
name|void
name|storeThenDeleteWithoutCommit
parameter_list|()
throws|throws
name|LockException
throws|,
name|SAXException
throws|,
name|PermissionDeniedException
throws|,
name|EXistException
throws|,
name|IOException
throws|,
name|NoSuchFieldException
throws|,
name|IllegalAccessException
block|{
name|storeThenDeleteWithoutCommit
argument_list|(
literal|false
argument_list|,
literal|0
argument_list|)
expr_stmt|;
block|}
specifier|private
name|void
name|storeThenDeleteWithoutCommit
parameter_list|(
specifier|final
name|boolean
name|shouldGenerateReplaceEntry
parameter_list|,
specifier|final
name|int
name|offset
parameter_list|)
throws|throws
name|LockException
throws|,
name|SAXException
throws|,
name|PermissionDeniedException
throws|,
name|EXistException
throws|,
name|IOException
throws|,
name|NoSuchFieldException
throws|,
name|IllegalAccessException
block|{
name|checkpointJournalAndSwitchFile
argument_list|()
expr_stmt|;
specifier|final
name|Path
name|testFile
init|=
name|getTestFile1
argument_list|()
decl_stmt|;
name|BrokerPool
operator|.
name|FORCE_CORRUPTION
operator|=
literal|true
expr_stmt|;
specifier|final
name|Tuple2
argument_list|<
name|Long
argument_list|,
name|String
argument_list|>
name|stored
init|=
name|store
argument_list|(
name|COMMIT
argument_list|,
name|testFile
argument_list|)
decl_stmt|;
specifier|final
name|Tuple2
argument_list|<
name|Long
argument_list|,
name|String
argument_list|>
name|deleted
init|=
name|delete
argument_list|(
name|NO_COMMIT
argument_list|,
name|testFile
argument_list|)
decl_stmt|;
name|flushJournal
argument_list|()
expr_stmt|;
comment|// shutdown the broker pool (without destroying the data dir)
name|existEmbeddedServer
operator|.
name|getBrokerPool
argument_list|()
operator|.
name|shutdown
argument_list|()
expr_stmt|;
comment|// reset the corruption flag back to normal
name|BrokerPool
operator|.
name|FORCE_CORRUPTION
operator|=
literal|false
expr_stmt|;
comment|// check journal entries written for replace
if|if
condition|(
operator|!
name|shouldGenerateReplaceEntry
condition|)
block|{
comment|// expected STORE
name|assertPartialOrdered
argument_list|(
name|storeThenDeleteWithoutCommit_expected
argument_list|(
name|stored
operator|.
name|_1
argument_list|,
name|stored
operator|.
name|_2
argument_list|,
name|deleted
operator|.
name|_1
argument_list|,
name|deleted
operator|.
name|_2
argument_list|,
name|offset
argument_list|)
argument_list|,
name|readLatestJournalEntries
argument_list|()
argument_list|)
expr_stmt|;
block|}
else|else
block|{
comment|// expected REPLACE
name|assertPartialOrdered
argument_list|(
name|replaceThenDeleteWithoutCommit_expected
argument_list|(
name|stored
operator|.
name|_1
argument_list|,
name|stored
operator|.
name|_2
argument_list|,
name|deleted
operator|.
name|_1
argument_list|,
name|deleted
operator|.
name|_2
argument_list|,
name|offset
operator|>
literal|0
condition|?
name|offset
operator|-
literal|1
else|:
name|offset
argument_list|,
literal|true
argument_list|)
argument_list|,
name|readLatestJournalEntries
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Test
specifier|public
name|void
name|storeThenDeleteWithoutCommit_isRepeatable
parameter_list|()
throws|throws
name|LockException
throws|,
name|SAXException
throws|,
name|PermissionDeniedException
throws|,
name|EXistException
throws|,
name|IOException
throws|,
name|DatabaseConfigurationException
throws|,
name|NoSuchFieldException
throws|,
name|IllegalAccessException
block|{
name|storeThenDeleteWithoutCommit
argument_list|(
literal|false
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|existEmbeddedServer
operator|.
name|restart
argument_list|()
expr_stmt|;
name|storeThenDeleteWithoutCommit
argument_list|(
literal|true
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|existEmbeddedServer
operator|.
name|restart
argument_list|()
expr_stmt|;
name|storeThenDeleteWithoutCommit
argument_list|(
literal|true
argument_list|,
literal|2
argument_list|)
expr_stmt|;
block|}
specifier|protected
specifier|abstract
name|List
argument_list|<
name|ExpectedLoggable
argument_list|>
name|storeThenDeleteWithoutCommit_expected
parameter_list|(
specifier|final
name|long
name|storedTxnId
parameter_list|,
specifier|final
name|String
name|storedDbPath
parameter_list|,
specifier|final
name|long
name|deletedTxnId
parameter_list|,
specifier|final
name|String
name|deletedDbPath
parameter_list|,
specifier|final
name|int
name|offset
parameter_list|)
function_decl|;
annotation|@
name|Test
specifier|public
name|void
name|storeWithoutCommitThenDeleteWithoutCommit
parameter_list|()
throws|throws
name|LockException
throws|,
name|SAXException
throws|,
name|PermissionDeniedException
throws|,
name|EXistException
throws|,
name|IOException
throws|,
name|NoSuchFieldException
throws|,
name|IllegalAccessException
block|{
name|checkpointJournalAndSwitchFile
argument_list|()
expr_stmt|;
specifier|final
name|Path
name|testFile
init|=
name|getTestFile1
argument_list|()
decl_stmt|;
name|BrokerPool
operator|.
name|FORCE_CORRUPTION
operator|=
literal|true
expr_stmt|;
specifier|final
name|Tuple2
argument_list|<
name|Long
argument_list|,
name|String
argument_list|>
name|stored
init|=
name|store
argument_list|(
name|NO_COMMIT
argument_list|,
name|testFile
argument_list|)
decl_stmt|;
specifier|final
name|Tuple2
argument_list|<
name|Long
argument_list|,
name|String
argument_list|>
name|deleted
init|=
name|delete
argument_list|(
name|NO_COMMIT
argument_list|,
name|testFile
argument_list|)
decl_stmt|;
name|flushJournal
argument_list|()
expr_stmt|;
comment|// shutdown the broker pool (without destroying the data dir)
name|existEmbeddedServer
operator|.
name|getBrokerPool
argument_list|()
operator|.
name|shutdown
argument_list|()
expr_stmt|;
comment|// reset the corruption flag back to normal
name|BrokerPool
operator|.
name|FORCE_CORRUPTION
operator|=
literal|false
expr_stmt|;
comment|// check journal entries written for replace
name|assertPartialOrdered
argument_list|(
name|storeWithoutCommitThenDeleteWithoutCommit_expected
argument_list|(
name|stored
operator|.
name|_1
argument_list|,
name|stored
operator|.
name|_2
argument_list|,
name|deleted
operator|.
name|_1
argument_list|,
name|deleted
operator|.
name|_2
argument_list|)
argument_list|,
name|readLatestJournalEntries
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|storeWithoutCommitThenDeleteWithoutCommit_isRepeatable
parameter_list|()
throws|throws
name|LockException
throws|,
name|SAXException
throws|,
name|PermissionDeniedException
throws|,
name|EXistException
throws|,
name|IOException
throws|,
name|NoSuchFieldException
throws|,
name|IllegalAccessException
throws|,
name|DatabaseConfigurationException
block|{
name|storeWithoutCommitThenDeleteWithoutCommit
argument_list|()
expr_stmt|;
name|existEmbeddedServer
operator|.
name|restart
argument_list|()
expr_stmt|;
name|storeWithoutCommitThenDeleteWithoutCommit
argument_list|()
expr_stmt|;
name|existEmbeddedServer
operator|.
name|restart
argument_list|()
expr_stmt|;
name|storeWithoutCommitThenDeleteWithoutCommit
argument_list|()
expr_stmt|;
block|}
specifier|protected
specifier|abstract
name|List
argument_list|<
name|ExpectedLoggable
argument_list|>
name|storeWithoutCommitThenDeleteWithoutCommit_expected
parameter_list|(
specifier|final
name|long
name|storedTxnId
parameter_list|,
specifier|final
name|String
name|storedDbPath
parameter_list|,
specifier|final
name|long
name|deletedTxnId
parameter_list|,
specifier|final
name|String
name|deletedDbPath
parameter_list|)
function_decl|;
annotation|@
name|Test
specifier|public
name|void
name|delete
parameter_list|()
throws|throws
name|LockException
throws|,
name|SAXException
throws|,
name|PermissionDeniedException
throws|,
name|EXistException
throws|,
name|IOException
throws|,
name|DatabaseConfigurationException
throws|,
name|NoSuchFieldException
throws|,
name|IllegalAccessException
block|{
name|delete
argument_list|(
literal|0
argument_list|)
expr_stmt|;
block|}
specifier|private
name|void
name|delete
parameter_list|(
specifier|final
name|int
name|offset
parameter_list|)
throws|throws
name|LockException
throws|,
name|SAXException
throws|,
name|PermissionDeniedException
throws|,
name|EXistException
throws|,
name|IOException
throws|,
name|DatabaseConfigurationException
throws|,
name|NoSuchFieldException
throws|,
name|IllegalAccessException
block|{
name|checkpointJournalAndSwitchFile
argument_list|()
expr_stmt|;
specifier|final
name|Path
name|testFile
init|=
name|getTestFile1
argument_list|()
decl_stmt|;
name|BrokerPool
operator|.
name|FORCE_CORRUPTION
operator|=
literal|false
expr_stmt|;
specifier|final
name|Tuple2
argument_list|<
name|Long
argument_list|,
name|String
argument_list|>
name|stored
init|=
name|store
argument_list|(
name|COMMIT
argument_list|,
name|testFile
argument_list|)
decl_stmt|;
comment|// shutdown the broker pool (without destroying the data dir)
name|existEmbeddedServer
operator|.
name|getBrokerPool
argument_list|()
operator|.
name|shutdown
argument_list|()
expr_stmt|;
comment|// check journal entries written for store
name|assertPartialOrdered
argument_list|(
name|store_expected
argument_list|(
name|stored
operator|.
name|_1
argument_list|,
name|stored
operator|.
name|_2
argument_list|,
name|offset
argument_list|)
argument_list|,
name|readLatestJournalEntries
argument_list|()
argument_list|)
expr_stmt|;
comment|// restart the database server
name|existEmbeddedServer
operator|.
name|restart
argument_list|()
expr_stmt|;
name|BrokerPool
operator|.
name|FORCE_CORRUPTION
operator|=
literal|true
expr_stmt|;
specifier|final
name|Tuple2
argument_list|<
name|Long
argument_list|,
name|String
argument_list|>
name|deleted
init|=
name|delete
argument_list|(
name|COMMIT
argument_list|,
name|testFile
argument_list|)
decl_stmt|;
name|flushJournal
argument_list|()
expr_stmt|;
comment|// shutdown the broker pool (without destroying the data dir)
name|existEmbeddedServer
operator|.
name|getBrokerPool
argument_list|()
operator|.
name|shutdown
argument_list|()
expr_stmt|;
comment|// reset the corruption flag back to normal
name|BrokerPool
operator|.
name|FORCE_CORRUPTION
operator|=
literal|false
expr_stmt|;
comment|// check journal entries written for delete
name|assertPartialOrdered
argument_list|(
name|delete_expected
argument_list|(
name|deleted
operator|.
name|_1
argument_list|,
name|deleted
operator|.
name|_2
argument_list|,
name|offset
argument_list|)
argument_list|,
name|readLatestJournalEntries
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|delete_isRepeatable
parameter_list|()
throws|throws
name|LockException
throws|,
name|SAXException
throws|,
name|PermissionDeniedException
throws|,
name|EXistException
throws|,
name|IOException
throws|,
name|DatabaseConfigurationException
throws|,
name|NoSuchFieldException
throws|,
name|IllegalAccessException
block|{
name|delete
argument_list|(
literal|0
argument_list|)
expr_stmt|;
name|existEmbeddedServer
operator|.
name|restart
argument_list|()
expr_stmt|;
name|delete
argument_list|(
literal|1
argument_list|)
expr_stmt|;
name|existEmbeddedServer
operator|.
name|restart
argument_list|()
expr_stmt|;
name|delete
argument_list|(
literal|2
argument_list|)
expr_stmt|;
block|}
specifier|protected
specifier|abstract
name|List
argument_list|<
name|ExpectedLoggable
argument_list|>
name|delete_expected
parameter_list|(
specifier|final
name|long
name|deletedTxnId
parameter_list|,
specifier|final
name|String
name|deletedDbPath
parameter_list|,
specifier|final
name|int
name|offset
parameter_list|)
function_decl|;
annotation|@
name|Test
specifier|public
name|void
name|deleteWithoutCommit
parameter_list|()
throws|throws
name|LockException
throws|,
name|SAXException
throws|,
name|PermissionDeniedException
throws|,
name|EXistException
throws|,
name|IOException
throws|,
name|DatabaseConfigurationException
throws|,
name|NoSuchFieldException
throws|,
name|IllegalAccessException
block|{
name|deleteWithoutCommit
argument_list|(
literal|false
argument_list|,
literal|0
argument_list|)
expr_stmt|;
block|}
specifier|private
name|void
name|deleteWithoutCommit
parameter_list|(
specifier|final
name|boolean
name|shouldGenerateReplaceEntry
parameter_list|,
specifier|final
name|int
name|offset
parameter_list|)
throws|throws
name|LockException
throws|,
name|SAXException
throws|,
name|PermissionDeniedException
throws|,
name|EXistException
throws|,
name|IOException
throws|,
name|DatabaseConfigurationException
throws|,
name|NoSuchFieldException
throws|,
name|IllegalAccessException
block|{
name|checkpointJournalAndSwitchFile
argument_list|()
expr_stmt|;
specifier|final
name|Path
name|testFile
init|=
name|getTestFile1
argument_list|()
decl_stmt|;
name|BrokerPool
operator|.
name|FORCE_CORRUPTION
operator|=
literal|false
expr_stmt|;
specifier|final
name|Tuple2
argument_list|<
name|Long
argument_list|,
name|String
argument_list|>
name|stored
init|=
name|store
argument_list|(
name|COMMIT
argument_list|,
name|testFile
argument_list|)
decl_stmt|;
comment|// shutdown the broker pool (without destroying the data dir)
name|existEmbeddedServer
operator|.
name|getBrokerPool
argument_list|()
operator|.
name|shutdown
argument_list|()
expr_stmt|;
comment|// check journal entries written for store
if|if
condition|(
operator|!
name|shouldGenerateReplaceEntry
condition|)
block|{
comment|// expected STORE
name|assertPartialOrdered
argument_list|(
name|store_expected
argument_list|(
name|stored
operator|.
name|_1
argument_list|,
name|stored
operator|.
name|_2
argument_list|,
name|offset
argument_list|)
argument_list|,
name|readLatestJournalEntries
argument_list|()
argument_list|)
expr_stmt|;
block|}
else|else
block|{
comment|// expected REPLACE
name|assertPartialOrdered
argument_list|(
name|replace_expected
argument_list|(
name|stored
operator|.
name|_1
argument_list|,
name|stored
operator|.
name|_2
argument_list|,
name|offset
operator|>
literal|0
condition|?
name|offset
operator|-
literal|1
else|:
name|offset
argument_list|,
literal|true
argument_list|)
argument_list|,
name|readLatestJournalEntries
argument_list|()
argument_list|)
expr_stmt|;
block|}
comment|// restart the database server
name|existEmbeddedServer
operator|.
name|restart
argument_list|()
expr_stmt|;
name|BrokerPool
operator|.
name|FORCE_CORRUPTION
operator|=
literal|true
expr_stmt|;
specifier|final
name|Tuple2
argument_list|<
name|Long
argument_list|,
name|String
argument_list|>
name|deleted
init|=
name|delete
argument_list|(
name|NO_COMMIT
argument_list|,
name|testFile
argument_list|)
decl_stmt|;
name|flushJournal
argument_list|()
expr_stmt|;
comment|// shutdown the broker pool (without destroying the data dir)
name|existEmbeddedServer
operator|.
name|getBrokerPool
argument_list|()
operator|.
name|shutdown
argument_list|()
expr_stmt|;
comment|// reset the corruption flag back to normal
name|BrokerPool
operator|.
name|FORCE_CORRUPTION
operator|=
literal|false
expr_stmt|;
comment|// check journal entries written for replace
name|assertPartialOrdered
argument_list|(
name|deleteWithoutCommit_expected
argument_list|(
name|deleted
operator|.
name|_1
argument_list|,
name|deleted
operator|.
name|_2
argument_list|,
name|offset
argument_list|)
argument_list|,
name|readLatestJournalEntries
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|deleteWithoutCommit_isRepeatable
parameter_list|()
throws|throws
name|LockException
throws|,
name|SAXException
throws|,
name|PermissionDeniedException
throws|,
name|EXistException
throws|,
name|IOException
throws|,
name|DatabaseConfigurationException
throws|,
name|NoSuchFieldException
throws|,
name|IllegalAccessException
block|{
name|deleteWithoutCommit
argument_list|(
literal|false
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|existEmbeddedServer
operator|.
name|restart
argument_list|()
expr_stmt|;
name|deleteWithoutCommit
argument_list|(
literal|true
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|existEmbeddedServer
operator|.
name|restart
argument_list|()
expr_stmt|;
name|deleteWithoutCommit
argument_list|(
literal|true
argument_list|,
literal|2
argument_list|)
expr_stmt|;
block|}
specifier|protected
specifier|abstract
name|List
argument_list|<
name|ExpectedLoggable
argument_list|>
name|deleteWithoutCommit_expected
parameter_list|(
specifier|final
name|long
name|deletedTxnId
parameter_list|,
specifier|final
name|String
name|deletedDbPath
parameter_list|,
specifier|final
name|int
name|offset
parameter_list|)
function_decl|;
annotation|@
name|Test
specifier|public
name|void
name|replace
parameter_list|()
throws|throws
name|LockException
throws|,
name|SAXException
throws|,
name|PermissionDeniedException
throws|,
name|EXistException
throws|,
name|IOException
throws|,
name|DatabaseConfigurationException
throws|,
name|NoSuchFieldException
throws|,
name|IllegalAccessException
block|{
name|replace
argument_list|(
literal|false
argument_list|,
literal|0
argument_list|)
expr_stmt|;
block|}
specifier|private
name|void
name|replace
parameter_list|(
specifier|final
name|boolean
name|storeShouldGenerateReplaceEntry
parameter_list|,
specifier|final
name|int
name|offset
parameter_list|)
throws|throws
name|IllegalAccessException
throws|,
name|EXistException
throws|,
name|NoSuchFieldException
throws|,
name|IOException
throws|,
name|LockException
throws|,
name|SAXException
throws|,
name|PermissionDeniedException
throws|,
name|DatabaseConfigurationException
block|{
name|checkpointJournalAndSwitchFile
argument_list|()
expr_stmt|;
specifier|final
name|Path
name|testFile
init|=
name|getTestFile1
argument_list|()
decl_stmt|;
specifier|final
name|String
name|testFilename
init|=
name|FileUtils
operator|.
name|fileName
argument_list|(
name|testFile
argument_list|)
decl_stmt|;
name|BrokerPool
operator|.
name|FORCE_CORRUPTION
operator|=
literal|false
expr_stmt|;
specifier|final
name|Tuple2
argument_list|<
name|Long
argument_list|,
name|String
argument_list|>
name|stored
init|=
name|store
argument_list|(
name|COMMIT
argument_list|,
name|testFile
argument_list|)
decl_stmt|;
comment|// shutdown the broker pool (without destroying the data dir)
name|existEmbeddedServer
operator|.
name|getBrokerPool
argument_list|()
operator|.
name|shutdown
argument_list|()
expr_stmt|;
comment|// check journal entries written for store
if|if
condition|(
operator|!
name|storeShouldGenerateReplaceEntry
condition|)
block|{
comment|// expected STORE
name|assertPartialOrdered
argument_list|(
name|store_expected
argument_list|(
name|stored
operator|.
name|_1
argument_list|,
name|stored
operator|.
name|_2
argument_list|,
name|offset
argument_list|)
argument_list|,
name|readLatestJournalEntries
argument_list|()
argument_list|)
expr_stmt|;
block|}
else|else
block|{
comment|// expected REPLACE
name|assertPartialOrdered
argument_list|(
name|replace_expected
argument_list|(
name|stored
operator|.
name|_1
argument_list|,
name|stored
operator|.
name|_2
argument_list|,
name|offset
operator|>
literal|0
condition|?
name|offset
operator|-
literal|1
else|:
name|offset
argument_list|,
literal|true
argument_list|)
argument_list|,
name|readLatestJournalEntries
argument_list|()
argument_list|)
expr_stmt|;
block|}
comment|// restart the database server
name|existEmbeddedServer
operator|.
name|restart
argument_list|()
expr_stmt|;
specifier|final
name|Path
name|testFile2
init|=
name|getTestFile2
argument_list|()
decl_stmt|;
comment|// replace testFile with testFile2
name|BrokerPool
operator|.
name|FORCE_CORRUPTION
operator|=
literal|true
expr_stmt|;
specifier|final
name|Tuple2
argument_list|<
name|Long
argument_list|,
name|String
argument_list|>
name|replaced
init|=
name|store
argument_list|(
name|COMMIT
argument_list|,
name|testFile2
argument_list|,
name|testFilename
argument_list|)
decl_stmt|;
name|flushJournal
argument_list|()
expr_stmt|;
comment|// shutdown the broker pool (without destroying the data dir)
name|existEmbeddedServer
operator|.
name|getBrokerPool
argument_list|()
operator|.
name|shutdown
argument_list|()
expr_stmt|;
comment|// reset the corruption flag back to normal
name|BrokerPool
operator|.
name|FORCE_CORRUPTION
operator|=
literal|false
expr_stmt|;
comment|// check journal entries written for replace
name|assertPartialOrdered
argument_list|(
name|replace_expected
argument_list|(
name|replaced
operator|.
name|_1
argument_list|,
name|replaced
operator|.
name|_2
argument_list|,
name|offset
argument_list|,
literal|false
argument_list|)
argument_list|,
name|readLatestJournalEntries
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|replace_isRepeatable
parameter_list|()
throws|throws
name|LockException
throws|,
name|SAXException
throws|,
name|PermissionDeniedException
throws|,
name|EXistException
throws|,
name|IOException
throws|,
name|DatabaseConfigurationException
throws|,
name|NoSuchFieldException
throws|,
name|IllegalAccessException
block|{
name|replace
argument_list|(
literal|false
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|existEmbeddedServer
operator|.
name|restart
argument_list|()
expr_stmt|;
name|replace
argument_list|(
literal|true
argument_list|,
literal|2
argument_list|)
expr_stmt|;
name|existEmbeddedServer
operator|.
name|restart
argument_list|()
expr_stmt|;
name|replace
argument_list|(
literal|true
argument_list|,
literal|4
argument_list|)
expr_stmt|;
block|}
specifier|protected
specifier|abstract
name|List
argument_list|<
name|ExpectedLoggable
argument_list|>
name|replace_expected
parameter_list|(
specifier|final
name|long
name|replacedTxnId
parameter_list|,
specifier|final
name|String
name|replacedDbPath
parameter_list|,
specifier|final
name|int
name|offset
parameter_list|,
specifier|final
name|boolean
name|overridesStore
parameter_list|)
function_decl|;
annotation|@
name|Test
specifier|public
name|void
name|replaceWithoutCommit
parameter_list|()
throws|throws
name|LockException
throws|,
name|SAXException
throws|,
name|PermissionDeniedException
throws|,
name|EXistException
throws|,
name|IOException
throws|,
name|DatabaseConfigurationException
throws|,
name|NoSuchFieldException
throws|,
name|IllegalAccessException
block|{
name|replaceWithoutCommit
argument_list|(
literal|false
argument_list|,
literal|0
argument_list|)
expr_stmt|;
block|}
specifier|private
name|void
name|replaceWithoutCommit
parameter_list|(
specifier|final
name|boolean
name|storeShouldGenerateReplaceEntry
parameter_list|,
specifier|final
name|int
name|offset
parameter_list|)
throws|throws
name|IllegalAccessException
throws|,
name|EXistException
throws|,
name|NoSuchFieldException
throws|,
name|IOException
throws|,
name|LockException
throws|,
name|SAXException
throws|,
name|PermissionDeniedException
throws|,
name|DatabaseConfigurationException
block|{
name|checkpointJournalAndSwitchFile
argument_list|()
expr_stmt|;
specifier|final
name|Path
name|testFile
init|=
name|getTestFile1
argument_list|()
decl_stmt|;
specifier|final
name|String
name|testFilename
init|=
name|FileUtils
operator|.
name|fileName
argument_list|(
name|testFile
argument_list|)
decl_stmt|;
name|BrokerPool
operator|.
name|FORCE_CORRUPTION
operator|=
literal|false
expr_stmt|;
specifier|final
name|Tuple2
argument_list|<
name|Long
argument_list|,
name|String
argument_list|>
name|stored
init|=
name|store
argument_list|(
name|COMMIT
argument_list|,
name|testFile
argument_list|)
decl_stmt|;
comment|// shutdown the broker pool (without destroying the data dir)
name|existEmbeddedServer
operator|.
name|getBrokerPool
argument_list|()
operator|.
name|shutdown
argument_list|()
expr_stmt|;
comment|// check journal entries written for store
if|if
condition|(
operator|!
name|storeShouldGenerateReplaceEntry
condition|)
block|{
comment|// expected STORE
name|assertPartialOrdered
argument_list|(
name|store_expected
argument_list|(
name|stored
operator|.
name|_1
argument_list|,
name|stored
operator|.
name|_2
argument_list|,
name|offset
argument_list|)
argument_list|,
name|readLatestJournalEntries
argument_list|()
argument_list|)
expr_stmt|;
block|}
else|else
block|{
comment|// expected REPLACE
name|assertPartialOrdered
argument_list|(
name|replace_expected
argument_list|(
name|stored
operator|.
name|_1
argument_list|,
name|stored
operator|.
name|_2
argument_list|,
name|offset
operator|>
literal|0
condition|?
name|offset
operator|-
literal|1
else|:
name|offset
argument_list|,
literal|true
argument_list|)
argument_list|,
name|readLatestJournalEntries
argument_list|()
argument_list|)
expr_stmt|;
block|}
comment|// restart the database server
name|existEmbeddedServer
operator|.
name|restart
argument_list|()
expr_stmt|;
specifier|final
name|Path
name|testFile2
init|=
name|getTestFile2
argument_list|()
decl_stmt|;
comment|// replace testFile with testFile2
name|BrokerPool
operator|.
name|FORCE_CORRUPTION
operator|=
literal|true
expr_stmt|;
specifier|final
name|Tuple2
argument_list|<
name|Long
argument_list|,
name|String
argument_list|>
name|replaced
init|=
name|store
argument_list|(
name|NO_COMMIT
argument_list|,
name|testFile2
argument_list|,
name|testFilename
argument_list|)
decl_stmt|;
name|flushJournal
argument_list|()
expr_stmt|;
comment|// shutdown the broker pool (without destroying the data dir)
name|existEmbeddedServer
operator|.
name|getBrokerPool
argument_list|()
operator|.
name|shutdown
argument_list|()
expr_stmt|;
comment|// reset the corruption flag back to normal
name|BrokerPool
operator|.
name|FORCE_CORRUPTION
operator|=
literal|false
expr_stmt|;
comment|// check journal entries written for replace
name|assertPartialOrdered
argument_list|(
name|replaceWithoutCommit_expected
argument_list|(
name|replaced
operator|.
name|_1
argument_list|,
name|replaced
operator|.
name|_2
argument_list|,
name|offset
argument_list|)
argument_list|,
name|readLatestJournalEntries
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|replaceWithoutCommit_isRepeatable
parameter_list|()
throws|throws
name|LockException
throws|,
name|SAXException
throws|,
name|PermissionDeniedException
throws|,
name|EXistException
throws|,
name|IOException
throws|,
name|DatabaseConfigurationException
throws|,
name|NoSuchFieldException
throws|,
name|IllegalAccessException
block|{
name|replaceWithoutCommit
argument_list|(
literal|false
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|existEmbeddedServer
operator|.
name|restart
argument_list|()
expr_stmt|;
name|replaceWithoutCommit
argument_list|(
literal|true
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|existEmbeddedServer
operator|.
name|restart
argument_list|()
expr_stmt|;
name|replaceWithoutCommit
argument_list|(
literal|true
argument_list|,
literal|2
argument_list|)
expr_stmt|;
block|}
specifier|protected
specifier|abstract
name|List
argument_list|<
name|ExpectedLoggable
argument_list|>
name|replaceWithoutCommit_expected
parameter_list|(
specifier|final
name|long
name|replacedTxnId
parameter_list|,
specifier|final
name|String
name|replacedDbPath
parameter_list|,
specifier|final
name|int
name|offset
parameter_list|)
function_decl|;
annotation|@
name|Test
specifier|public
name|void
name|replaceThenDelete
parameter_list|()
throws|throws
name|LockException
throws|,
name|SAXException
throws|,
name|PermissionDeniedException
throws|,
name|EXistException
throws|,
name|IOException
throws|,
name|DatabaseConfigurationException
throws|,
name|NoSuchFieldException
throws|,
name|IllegalAccessException
block|{
name|replaceThenDelete
argument_list|(
literal|0
argument_list|)
expr_stmt|;
block|}
specifier|private
name|void
name|replaceThenDelete
parameter_list|(
specifier|final
name|int
name|offset
parameter_list|)
throws|throws
name|LockException
throws|,
name|SAXException
throws|,
name|PermissionDeniedException
throws|,
name|EXistException
throws|,
name|IOException
throws|,
name|DatabaseConfigurationException
throws|,
name|NoSuchFieldException
throws|,
name|IllegalAccessException
block|{
name|checkpointJournalAndSwitchFile
argument_list|()
expr_stmt|;
specifier|final
name|Path
name|testFile
init|=
name|getTestFile1
argument_list|()
decl_stmt|;
specifier|final
name|String
name|testFilename
init|=
name|FileUtils
operator|.
name|fileName
argument_list|(
name|testFile
argument_list|)
decl_stmt|;
name|BrokerPool
operator|.
name|FORCE_CORRUPTION
operator|=
literal|false
expr_stmt|;
specifier|final
name|Tuple2
argument_list|<
name|Long
argument_list|,
name|String
argument_list|>
name|stored
init|=
name|store
argument_list|(
name|COMMIT
argument_list|,
name|testFile
argument_list|)
decl_stmt|;
comment|// shutdown the broker pool (without destroying the data dir)
name|existEmbeddedServer
operator|.
name|getBrokerPool
argument_list|()
operator|.
name|shutdown
argument_list|()
expr_stmt|;
comment|// check journal entries written for store
specifier|final
name|boolean
name|isXmlTest
init|=
name|this
operator|instanceof
name|JournalXmlTest
decl_stmt|;
name|assertPartialOrdered
argument_list|(
name|store_expected_for_replaceThenDelete
argument_list|(
name|stored
operator|.
name|_1
argument_list|,
name|stored
operator|.
name|_2
argument_list|,
name|offset
argument_list|)
argument_list|,
name|readLatestJournalEntries
argument_list|()
argument_list|)
expr_stmt|;
comment|// restart the database server
name|existEmbeddedServer
operator|.
name|restart
argument_list|()
expr_stmt|;
specifier|final
name|Path
name|testFile2
init|=
name|getTestFile2
argument_list|()
decl_stmt|;
comment|// replace testFile with testFile2
name|BrokerPool
operator|.
name|FORCE_CORRUPTION
operator|=
literal|true
expr_stmt|;
specifier|final
name|Tuple2
argument_list|<
name|Long
argument_list|,
name|String
argument_list|>
name|replaced
init|=
name|store
argument_list|(
name|COMMIT
argument_list|,
name|testFile2
argument_list|,
name|testFilename
argument_list|)
decl_stmt|;
specifier|final
name|Tuple2
argument_list|<
name|Long
argument_list|,
name|String
argument_list|>
name|deleted
init|=
name|delete
argument_list|(
name|COMMIT
argument_list|,
name|testFilename
argument_list|)
decl_stmt|;
name|flushJournal
argument_list|()
expr_stmt|;
comment|// shutdown the broker pool (without destroying the data dir)
name|existEmbeddedServer
operator|.
name|getBrokerPool
argument_list|()
operator|.
name|shutdown
argument_list|()
expr_stmt|;
comment|// reset the corruption flag back to normal
name|BrokerPool
operator|.
name|FORCE_CORRUPTION
operator|=
literal|false
expr_stmt|;
comment|// check journal entries written for replace
name|assertPartialOrdered
argument_list|(
name|replaceThenDelete_expected
argument_list|(
name|replaced
operator|.
name|_1
argument_list|,
name|replaced
operator|.
name|_2
argument_list|,
name|deleted
operator|.
name|_1
argument_list|,
name|deleted
operator|.
name|_2
argument_list|,
name|offset
argument_list|)
argument_list|,
name|readLatestJournalEntries
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|replaceThenDelete_isRepeatable
parameter_list|()
throws|throws
name|LockException
throws|,
name|SAXException
throws|,
name|PermissionDeniedException
throws|,
name|EXistException
throws|,
name|IOException
throws|,
name|DatabaseConfigurationException
throws|,
name|NoSuchFieldException
throws|,
name|IllegalAccessException
block|{
name|replaceThenDelete
argument_list|(
literal|0
argument_list|)
expr_stmt|;
name|existEmbeddedServer
operator|.
name|restart
argument_list|()
expr_stmt|;
name|replaceThenDelete
argument_list|(
literal|2
argument_list|)
expr_stmt|;
name|existEmbeddedServer
operator|.
name|restart
argument_list|()
expr_stmt|;
name|replaceThenDelete
argument_list|(
literal|4
argument_list|)
expr_stmt|;
block|}
comment|/**      * NOTE: needs to be overridden by {@link JournalXmlTest}!      */
specifier|protected
name|List
argument_list|<
name|ExpectedLoggable
argument_list|>
name|store_expected_for_replaceThenDelete
parameter_list|(
specifier|final
name|long
name|storedTxnId
parameter_list|,
specifier|final
name|String
name|storedDbPath
parameter_list|,
specifier|final
name|int
name|offset
parameter_list|)
block|{
return|return
name|store_expected
argument_list|(
name|storedTxnId
argument_list|,
name|storedDbPath
argument_list|,
name|offset
argument_list|)
return|;
block|}
specifier|protected
specifier|abstract
name|List
argument_list|<
name|ExpectedLoggable
argument_list|>
name|replaceThenDelete_expected
parameter_list|(
specifier|final
name|long
name|replacedTxnId
parameter_list|,
specifier|final
name|String
name|replacedDbPath
parameter_list|,
specifier|final
name|long
name|deletedTxnId
parameter_list|,
specifier|final
name|String
name|deletedDbPath
parameter_list|,
specifier|final
name|int
name|offset
parameter_list|)
function_decl|;
annotation|@
name|Test
specifier|public
name|void
name|replaceWithoutCommitThenDelete
parameter_list|()
throws|throws
name|LockException
throws|,
name|SAXException
throws|,
name|PermissionDeniedException
throws|,
name|EXistException
throws|,
name|IOException
throws|,
name|DatabaseConfigurationException
throws|,
name|NoSuchFieldException
throws|,
name|IllegalAccessException
block|{
name|replaceWithoutCommitThenDelete
argument_list|(
literal|0
argument_list|)
expr_stmt|;
block|}
specifier|private
name|void
name|replaceWithoutCommitThenDelete
parameter_list|(
specifier|final
name|int
name|offset
parameter_list|)
throws|throws
name|LockException
throws|,
name|SAXException
throws|,
name|PermissionDeniedException
throws|,
name|EXistException
throws|,
name|IOException
throws|,
name|DatabaseConfigurationException
throws|,
name|NoSuchFieldException
throws|,
name|IllegalAccessException
block|{
name|checkpointJournalAndSwitchFile
argument_list|()
expr_stmt|;
specifier|final
name|Path
name|testFile
init|=
name|getTestFile1
argument_list|()
decl_stmt|;
specifier|final
name|String
name|testFilename
init|=
name|FileUtils
operator|.
name|fileName
argument_list|(
name|testFile
argument_list|)
decl_stmt|;
name|BrokerPool
operator|.
name|FORCE_CORRUPTION
operator|=
literal|false
expr_stmt|;
specifier|final
name|Tuple2
argument_list|<
name|Long
argument_list|,
name|String
argument_list|>
name|stored
init|=
name|store
argument_list|(
name|COMMIT
argument_list|,
name|testFile
argument_list|)
decl_stmt|;
comment|// shutdown the broker pool (without destroying the data dir)
name|existEmbeddedServer
operator|.
name|getBrokerPool
argument_list|()
operator|.
name|shutdown
argument_list|()
expr_stmt|;
comment|// check journal entries written for store
name|assertPartialOrdered
argument_list|(
name|store_expected
argument_list|(
name|stored
operator|.
name|_1
argument_list|,
name|stored
operator|.
name|_2
argument_list|,
name|offset
argument_list|)
argument_list|,
name|readLatestJournalEntries
argument_list|()
argument_list|)
expr_stmt|;
comment|// restart the database server
name|existEmbeddedServer
operator|.
name|restart
argument_list|()
expr_stmt|;
specifier|final
name|Path
name|testFile2
init|=
name|getTestFile2
argument_list|()
decl_stmt|;
comment|// replace testFile with testFile2
name|BrokerPool
operator|.
name|FORCE_CORRUPTION
operator|=
literal|true
expr_stmt|;
specifier|final
name|Tuple2
argument_list|<
name|Long
argument_list|,
name|String
argument_list|>
name|replaced
init|=
name|store
argument_list|(
name|NO_COMMIT
argument_list|,
name|testFile2
argument_list|,
name|testFilename
argument_list|)
decl_stmt|;
specifier|final
name|Tuple2
argument_list|<
name|Long
argument_list|,
name|String
argument_list|>
name|deleted
init|=
name|delete
argument_list|(
name|COMMIT
argument_list|,
name|testFilename
argument_list|)
decl_stmt|;
name|flushJournal
argument_list|()
expr_stmt|;
comment|// shutdown the broker pool (without destroying the data dir)
name|existEmbeddedServer
operator|.
name|getBrokerPool
argument_list|()
operator|.
name|shutdown
argument_list|()
expr_stmt|;
comment|// reset the corruption flag back to normal
name|BrokerPool
operator|.
name|FORCE_CORRUPTION
operator|=
literal|false
expr_stmt|;
comment|// check journal entries written for replace
name|assertPartialOrdered
argument_list|(
name|replaceWithoutCommitThenDelete_expected
argument_list|(
name|replaced
operator|.
name|_1
argument_list|,
name|replaced
operator|.
name|_2
argument_list|,
name|deleted
operator|.
name|_1
argument_list|,
name|deleted
operator|.
name|_2
argument_list|,
name|offset
argument_list|)
argument_list|,
name|readLatestJournalEntries
argument_list|()
argument_list|)
expr_stmt|;
block|}
comment|/**      * Shows that recovery of entries in the journal fail for a non-linear history of a resource.      * The history created by this test, should never be created within by a single thread unless      * due to a programming mistake.      *      * It is currently possible to create such a non-recoverable history between threads      * for a single resource, however that must be solved by improved locking of resources      * e.g. keeping resource locks for the duration of a transaction.      *      * This test creates the journal history (repetitively):      *      * 1.<START T-1>      * 2.<T-1, A, null, x>      * 3.<COMMIT T-1>      // store!      * 4.<START T-2>      * 5.<T-2, A, x, y>	// replace!      * 6.<START T-3>      * 7.<T-3, A, x, null>	// delete!      * 8.<COMMIT T-3>      * 9. CRASH!      *      * In the above:      *     * "T-n" is the transaction id.      *     *<T-n, A, v, w> is the tuple<transactionId, key, previousValue, newValue)      *      * The problem with the above schedule, after crash, the recovery will never set      * key "A" to value "null", which it likely should.      *      * eXist-db performs the following recovery:      *      * R1. redo schedule step 5: A=y      * R2. redo schedule step 7: A=null      * R3. undo schedule step 5: A=x      *      * Step R3 will leaves the database in an inconsistent state (i.e. A != null).      */
annotation|@
name|Ignore
argument_list|(
literal|"Only possible from a single-thread by programming error. Journal is not expected to recover such cases!"
argument_list|)
annotation|@
name|Test
specifier|public
name|void
name|replaceWithoutCommitThenDelete_isRepeatable
parameter_list|()
throws|throws
name|LockException
throws|,
name|SAXException
throws|,
name|PermissionDeniedException
throws|,
name|EXistException
throws|,
name|IOException
throws|,
name|DatabaseConfigurationException
throws|,
name|NoSuchFieldException
throws|,
name|IllegalAccessException
block|{
name|replaceWithoutCommitThenDelete
argument_list|(
literal|0
argument_list|)
expr_stmt|;
name|existEmbeddedServer
operator|.
name|restart
argument_list|()
expr_stmt|;
name|replaceWithoutCommitThenDelete
argument_list|(
literal|0
argument_list|)
expr_stmt|;
name|existEmbeddedServer
operator|.
name|restart
argument_list|()
expr_stmt|;
name|replaceWithoutCommitThenDelete
argument_list|(
literal|0
argument_list|)
expr_stmt|;
block|}
specifier|protected
specifier|abstract
name|List
argument_list|<
name|ExpectedLoggable
argument_list|>
name|replaceWithoutCommitThenDelete_expected
parameter_list|(
specifier|final
name|long
name|replacedTxnId
parameter_list|,
specifier|final
name|String
name|replacedDbPath
parameter_list|,
specifier|final
name|long
name|deletedTxnId
parameter_list|,
specifier|final
name|String
name|deletedDbPath
parameter_list|,
specifier|final
name|int
name|offset
parameter_list|)
function_decl|;
annotation|@
name|Test
specifier|public
name|void
name|replaceThenDeleteWithoutCommit
parameter_list|()
throws|throws
name|LockException
throws|,
name|SAXException
throws|,
name|PermissionDeniedException
throws|,
name|EXistException
throws|,
name|IOException
throws|,
name|DatabaseConfigurationException
throws|,
name|NoSuchFieldException
throws|,
name|IllegalAccessException
block|{
name|replaceThenDeleteWithoutCommit
argument_list|(
literal|false
argument_list|,
literal|0
argument_list|)
expr_stmt|;
block|}
specifier|private
name|void
name|replaceThenDeleteWithoutCommit
parameter_list|(
specifier|final
name|boolean
name|storeShouldGenerateReplaceEntry
parameter_list|,
specifier|final
name|int
name|offset
parameter_list|)
throws|throws
name|LockException
throws|,
name|SAXException
throws|,
name|PermissionDeniedException
throws|,
name|EXistException
throws|,
name|IOException
throws|,
name|DatabaseConfigurationException
throws|,
name|NoSuchFieldException
throws|,
name|IllegalAccessException
block|{
name|checkpointJournalAndSwitchFile
argument_list|()
expr_stmt|;
specifier|final
name|Path
name|testFile
init|=
name|getTestFile1
argument_list|()
decl_stmt|;
specifier|final
name|String
name|testFilename
init|=
name|FileUtils
operator|.
name|fileName
argument_list|(
name|testFile
argument_list|)
decl_stmt|;
name|BrokerPool
operator|.
name|FORCE_CORRUPTION
operator|=
literal|false
expr_stmt|;
specifier|final
name|Tuple2
argument_list|<
name|Long
argument_list|,
name|String
argument_list|>
name|stored
init|=
name|store
argument_list|(
name|COMMIT
argument_list|,
name|testFile
argument_list|)
decl_stmt|;
comment|// shutdown the broker pool (without destroying the data dir)
name|existEmbeddedServer
operator|.
name|getBrokerPool
argument_list|()
operator|.
name|shutdown
argument_list|()
expr_stmt|;
comment|// check journal entries written for store
if|if
condition|(
operator|!
name|storeShouldGenerateReplaceEntry
condition|)
block|{
comment|//  expected STORE
name|assertPartialOrdered
argument_list|(
name|store_expected
argument_list|(
name|stored
operator|.
name|_1
argument_list|,
name|stored
operator|.
name|_2
argument_list|,
name|offset
argument_list|)
argument_list|,
name|readLatestJournalEntries
argument_list|()
argument_list|)
expr_stmt|;
block|}
else|else
block|{
comment|// expected REPLACE
name|assertPartialOrdered
argument_list|(
name|replace_expected
argument_list|(
name|stored
operator|.
name|_1
argument_list|,
name|stored
operator|.
name|_2
argument_list|,
name|offset
operator|>
literal|0
condition|?
name|offset
operator|-
literal|1
else|:
name|offset
argument_list|,
literal|true
argument_list|)
argument_list|,
name|readLatestJournalEntries
argument_list|()
argument_list|)
expr_stmt|;
block|}
comment|// restart the database server
name|existEmbeddedServer
operator|.
name|restart
argument_list|()
expr_stmt|;
specifier|final
name|Path
name|testFile2
init|=
name|getTestFile2
argument_list|()
decl_stmt|;
comment|// replace testFile with testFile2
name|BrokerPool
operator|.
name|FORCE_CORRUPTION
operator|=
literal|true
expr_stmt|;
specifier|final
name|Tuple2
argument_list|<
name|Long
argument_list|,
name|String
argument_list|>
name|replaced
init|=
name|store
argument_list|(
name|COMMIT
argument_list|,
name|testFile2
argument_list|,
name|testFilename
argument_list|)
decl_stmt|;
specifier|final
name|Tuple2
argument_list|<
name|Long
argument_list|,
name|String
argument_list|>
name|deleted
init|=
name|delete
argument_list|(
name|NO_COMMIT
argument_list|,
name|testFilename
argument_list|)
decl_stmt|;
name|flushJournal
argument_list|()
expr_stmt|;
comment|// shutdown the broker pool (without destroying the data dir)
name|existEmbeddedServer
operator|.
name|getBrokerPool
argument_list|()
operator|.
name|shutdown
argument_list|()
expr_stmt|;
comment|// reset the corruption flag back to normal
name|BrokerPool
operator|.
name|FORCE_CORRUPTION
operator|=
literal|false
expr_stmt|;
comment|// check journal entries written for replace
name|assertPartialOrdered
argument_list|(
name|replaceThenDeleteWithoutCommit_expected
argument_list|(
name|replaced
operator|.
name|_1
argument_list|,
name|replaced
operator|.
name|_2
argument_list|,
name|deleted
operator|.
name|_1
argument_list|,
name|deleted
operator|.
name|_2
argument_list|,
name|offset
argument_list|,
literal|false
argument_list|)
argument_list|,
name|readLatestJournalEntries
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|replaceThenDeleteWithoutCommit_isRepeatable
parameter_list|()
throws|throws
name|LockException
throws|,
name|SAXException
throws|,
name|PermissionDeniedException
throws|,
name|EXistException
throws|,
name|IOException
throws|,
name|DatabaseConfigurationException
throws|,
name|NoSuchFieldException
throws|,
name|IllegalAccessException
block|{
name|replaceThenDeleteWithoutCommit
argument_list|(
literal|false
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|existEmbeddedServer
operator|.
name|restart
argument_list|()
expr_stmt|;
name|replaceThenDeleteWithoutCommit
argument_list|(
literal|true
argument_list|,
literal|2
argument_list|)
expr_stmt|;
name|existEmbeddedServer
operator|.
name|restart
argument_list|()
expr_stmt|;
name|replaceThenDeleteWithoutCommit
argument_list|(
literal|true
argument_list|,
literal|4
argument_list|)
expr_stmt|;
block|}
specifier|protected
specifier|abstract
name|List
argument_list|<
name|ExpectedLoggable
argument_list|>
name|replaceThenDeleteWithoutCommit_expected
parameter_list|(
specifier|final
name|long
name|replacedTxnId
parameter_list|,
specifier|final
name|String
name|replacedDbPath
parameter_list|,
specifier|final
name|long
name|deletedTxnId
parameter_list|,
specifier|final
name|String
name|deletedDbPath
parameter_list|,
specifier|final
name|int
name|offset
parameter_list|,
specifier|final
name|boolean
name|overridesStore
parameter_list|)
function_decl|;
annotation|@
name|Test
specifier|public
name|void
name|replaceWithoutCommitThenDeleteWithoutCommit
parameter_list|()
throws|throws
name|LockException
throws|,
name|SAXException
throws|,
name|PermissionDeniedException
throws|,
name|EXistException
throws|,
name|IOException
throws|,
name|DatabaseConfigurationException
throws|,
name|NoSuchFieldException
throws|,
name|IllegalAccessException
block|{
name|replaceWithoutCommitThenDeleteWithoutCommit
argument_list|(
literal|false
argument_list|,
literal|0
argument_list|)
expr_stmt|;
block|}
specifier|private
name|void
name|replaceWithoutCommitThenDeleteWithoutCommit
parameter_list|(
specifier|final
name|boolean
name|storeShouldGenerateReplaceEntry
parameter_list|,
specifier|final
name|int
name|offset
parameter_list|)
throws|throws
name|LockException
throws|,
name|SAXException
throws|,
name|PermissionDeniedException
throws|,
name|EXistException
throws|,
name|IOException
throws|,
name|DatabaseConfigurationException
throws|,
name|NoSuchFieldException
throws|,
name|IllegalAccessException
block|{
name|checkpointJournalAndSwitchFile
argument_list|()
expr_stmt|;
specifier|final
name|Path
name|testFile
init|=
name|getTestFile1
argument_list|()
decl_stmt|;
specifier|final
name|String
name|testFilename
init|=
name|FileUtils
operator|.
name|fileName
argument_list|(
name|testFile
argument_list|)
decl_stmt|;
name|BrokerPool
operator|.
name|FORCE_CORRUPTION
operator|=
literal|false
expr_stmt|;
specifier|final
name|Tuple2
argument_list|<
name|Long
argument_list|,
name|String
argument_list|>
name|stored
init|=
name|store
argument_list|(
name|COMMIT
argument_list|,
name|testFile
argument_list|)
decl_stmt|;
comment|// shutdown the broker pool (without destroying the data dir)
name|existEmbeddedServer
operator|.
name|getBrokerPool
argument_list|()
operator|.
name|shutdown
argument_list|()
expr_stmt|;
comment|// check journal entries written for store
if|if
condition|(
operator|!
name|storeShouldGenerateReplaceEntry
condition|)
block|{
comment|// expected STORE
name|assertPartialOrdered
argument_list|(
name|store_expected
argument_list|(
name|stored
operator|.
name|_1
argument_list|,
name|stored
operator|.
name|_2
argument_list|,
name|offset
argument_list|)
argument_list|,
name|readLatestJournalEntries
argument_list|()
argument_list|)
expr_stmt|;
block|}
else|else
block|{
comment|//  expected REPLACE
name|assertPartialOrdered
argument_list|(
name|replace_expected
argument_list|(
name|stored
operator|.
name|_1
argument_list|,
name|stored
operator|.
name|_2
argument_list|,
name|offset
operator|>
literal|0
condition|?
name|offset
operator|-
literal|1
else|:
name|offset
argument_list|,
literal|true
argument_list|)
argument_list|,
name|readLatestJournalEntries
argument_list|()
argument_list|)
expr_stmt|;
block|}
comment|// restart the database server
name|existEmbeddedServer
operator|.
name|restart
argument_list|()
expr_stmt|;
specifier|final
name|Path
name|testFile2
init|=
name|getTestFile2
argument_list|()
decl_stmt|;
comment|// replace testFile with testFile2
name|BrokerPool
operator|.
name|FORCE_CORRUPTION
operator|=
literal|true
expr_stmt|;
specifier|final
name|Tuple2
argument_list|<
name|Long
argument_list|,
name|String
argument_list|>
name|replaced
init|=
name|store
argument_list|(
name|NO_COMMIT
argument_list|,
name|testFile2
argument_list|,
name|testFilename
argument_list|)
decl_stmt|;
specifier|final
name|Tuple2
argument_list|<
name|Long
argument_list|,
name|String
argument_list|>
name|deleted
init|=
name|delete
argument_list|(
name|NO_COMMIT
argument_list|,
name|testFilename
argument_list|)
decl_stmt|;
name|flushJournal
argument_list|()
expr_stmt|;
comment|// shutdown the broker pool (without destroying the data dir)
name|existEmbeddedServer
operator|.
name|getBrokerPool
argument_list|()
operator|.
name|shutdown
argument_list|()
expr_stmt|;
comment|// reset the corruption flag back to normal
name|BrokerPool
operator|.
name|FORCE_CORRUPTION
operator|=
literal|false
expr_stmt|;
comment|// check journal entries written for replace
name|assertPartialOrdered
argument_list|(
name|replaceWithoutCommitThenDeleteWithoutCommit_expected
argument_list|(
name|replaced
operator|.
name|_1
argument_list|,
name|replaced
operator|.
name|_2
argument_list|,
name|deleted
operator|.
name|_1
argument_list|,
name|deleted
operator|.
name|_2
argument_list|,
name|offset
argument_list|)
argument_list|,
name|readLatestJournalEntries
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|replaceWithoutCommitThenDeleteWithoutCommit_isRepeatable
parameter_list|()
throws|throws
name|LockException
throws|,
name|SAXException
throws|,
name|PermissionDeniedException
throws|,
name|EXistException
throws|,
name|IOException
throws|,
name|DatabaseConfigurationException
throws|,
name|NoSuchFieldException
throws|,
name|IllegalAccessException
block|{
name|replaceWithoutCommitThenDeleteWithoutCommit
argument_list|(
literal|false
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|existEmbeddedServer
operator|.
name|restart
argument_list|()
expr_stmt|;
name|replaceWithoutCommitThenDeleteWithoutCommit
argument_list|(
literal|true
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|existEmbeddedServer
operator|.
name|restart
argument_list|()
expr_stmt|;
name|replaceWithoutCommitThenDeleteWithoutCommit
argument_list|(
literal|true
argument_list|,
literal|2
argument_list|)
expr_stmt|;
block|}
specifier|protected
specifier|abstract
name|List
argument_list|<
name|ExpectedLoggable
argument_list|>
name|replaceWithoutCommitThenDeleteWithoutCommit_expected
parameter_list|(
specifier|final
name|long
name|replacedTxnId
parameter_list|,
specifier|final
name|String
name|replacedDbPath
parameter_list|,
specifier|final
name|long
name|deletedTxnId
parameter_list|,
specifier|final
name|String
name|deletedDbPath
parameter_list|,
specifier|final
name|int
name|offset
parameter_list|)
function_decl|;
specifier|private
name|void
name|assertPartialOrdered
parameter_list|(
specifier|final
name|List
argument_list|<
name|ExpectedLoggable
argument_list|>
name|expectedPartialOrderedJournalEntries
parameter_list|,
specifier|final
name|List
argument_list|<
name|Loggable
argument_list|>
name|actualJournalEntries
parameter_list|)
throws|throws
name|AssertionError
block|{
name|int
name|expectedIdx
init|=
literal|0
decl_stmt|;
specifier|final
name|List
argument_list|<
name|Long
argument_list|>
name|expectedStartedTxns
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
specifier|final
name|Set
argument_list|<
name|Long
argument_list|>
name|unexpectedCommitted
init|=
operator|new
name|HashSet
argument_list|<>
argument_list|()
decl_stmt|;
specifier|final
name|Set
argument_list|<
name|Long
argument_list|>
name|unexpectedAborted
init|=
operator|new
name|HashSet
argument_list|<>
argument_list|()
decl_stmt|;
for|for
control|(
specifier|final
name|Loggable
name|journalEntry
range|:
name|actualJournalEntries
control|)
block|{
comment|// we have found TxnStart, now compare journal entries in order against some expected partial order
specifier|final
name|ExpectedLoggable
name|expected
init|=
name|expectedPartialOrderedJournalEntries
operator|.
name|get
argument_list|(
name|expectedIdx
argument_list|)
decl_stmt|;
if|if
condition|(
name|expected
operator|.
name|equals
argument_list|(
name|journalEntry
argument_list|)
condition|)
block|{
comment|// matched an expected partial entry
if|if
condition|(
name|journalEntry
operator|instanceof
name|TxnStart
condition|)
block|{
name|expectedStartedTxns
operator|.
name|add
argument_list|(
name|expected
operator|.
name|transactionId
argument_list|)
expr_stmt|;
block|}
name|expectedIdx
operator|++
expr_stmt|;
comment|// move to the next expected partial
if|if
condition|(
name|expectedIdx
operator|==
name|expectedPartialOrderedJournalEntries
operator|.
name|size
argument_list|()
condition|)
block|{
break|break;
comment|// we have matched all expected
block|}
block|}
else|else
block|{
if|if
condition|(
name|journalEntry
operator|instanceof
name|TxnAbort
condition|)
block|{
name|unexpectedAborted
operator|.
name|add
argument_list|(
name|journalEntry
operator|.
name|getTransactionId
argument_list|()
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|journalEntry
operator|instanceof
name|TxnCommit
condition|)
block|{
name|unexpectedCommitted
operator|.
name|add
argument_list|(
name|journalEntry
operator|.
name|getTransactionId
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
block|}
if|if
condition|(
name|expectedIdx
operator|!=
name|expectedPartialOrderedJournalEntries
operator|.
name|size
argument_list|()
condition|)
block|{
throw|throw
operator|new
name|AssertionError
argument_list|(
literal|"Expected "
operator|+
name|expectedPartialOrderedJournalEntries
operator|.
name|get
argument_list|(
name|expectedIdx
argument_list|)
operator|+
literal|", not found in journal entries"
argument_list|)
throw|;
block|}
for|for
control|(
specifier|final
name|long
name|expectedStartedTxn
range|:
name|expectedStartedTxns
control|)
block|{
if|if
condition|(
name|unexpectedAborted
operator|.
name|contains
argument_list|(
name|expectedStartedTxn
argument_list|)
condition|)
block|{
throw|throw
operator|new
name|AssertionError
argument_list|(
literal|"ABORT T-"
operator|+
name|expectedStartedTxn
operator|+
literal|" was not expected! ABORT must be explicitly specified in expected list."
argument_list|)
throw|;
block|}
if|if
condition|(
name|unexpectedCommitted
operator|.
name|contains
argument_list|(
name|expectedStartedTxn
argument_list|)
condition|)
block|{
throw|throw
operator|new
name|AssertionError
argument_list|(
literal|"COMMIT T-"
operator|+
name|expectedStartedTxn
operator|+
literal|" was not expected! COMMIT must be explicitly specified in expected list."
argument_list|)
throw|;
block|}
block|}
block|}
specifier|protected
specifier|abstract
name|Path
name|getTestFile1
parameter_list|()
throws|throws
name|IOException
function_decl|;
specifier|protected
specifier|abstract
name|Path
name|getTestFile2
parameter_list|()
throws|throws
name|IOException
function_decl|;
comment|/**      * Check point's the journal, and forces switching to a new journal file.      */
specifier|private
name|void
name|checkpointJournalAndSwitchFile
parameter_list|()
throws|throws
name|NoSuchFieldException
throws|,
name|IllegalAccessException
throws|,
name|TransactionException
block|{
comment|//set Journal#journalMinSize = 0, so that switch files will always happen
specifier|final
name|Field
name|fldMinReplace
init|=
name|Journal
operator|.
name|class
operator|.
name|getDeclaredField
argument_list|(
literal|"journalSizeMin"
argument_list|)
decl_stmt|;
name|fldMinReplace
operator|.
name|setAccessible
argument_list|(
literal|true
argument_list|)
expr_stmt|;
specifier|final
name|Field
name|modifiersField
init|=
name|Field
operator|.
name|class
operator|.
name|getDeclaredField
argument_list|(
literal|"modifiers"
argument_list|)
decl_stmt|;
name|modifiersField
operator|.
name|setAccessible
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|modifiersField
operator|.
name|setInt
argument_list|(
name|fldMinReplace
argument_list|,
name|fldMinReplace
operator|.
name|getModifiers
argument_list|()
operator|&
operator|~
name|Modifier
operator|.
name|FINAL
argument_list|)
expr_stmt|;
specifier|final
name|Field
name|fldJournal
init|=
name|JournalManager
operator|.
name|class
operator|.
name|getDeclaredField
argument_list|(
literal|"journal"
argument_list|)
decl_stmt|;
name|fldJournal
operator|.
name|setAccessible
argument_list|(
literal|true
argument_list|)
expr_stmt|;
specifier|final
name|Journal
name|journal
init|=
operator|(
name|Journal
operator|)
name|fldJournal
operator|.
name|get
argument_list|(
name|existEmbeddedServer
operator|.
name|getBrokerPool
argument_list|()
operator|.
name|getJournalManager
argument_list|()
operator|.
name|get
argument_list|()
argument_list|)
decl_stmt|;
specifier|final
name|long
name|existingMinReplaceValue
init|=
name|fldMinReplace
operator|.
name|getLong
argument_list|(
name|journal
argument_list|)
decl_stmt|;
name|fldMinReplace
operator|.
name|setLong
argument_list|(
name|journal
argument_list|,
literal|0
argument_list|)
expr_stmt|;
comment|// checkpoint the journal and switch file
specifier|final
name|BrokerPool
name|pool
init|=
name|existEmbeddedServer
operator|.
name|getBrokerPool
argument_list|()
decl_stmt|;
synchronized|synchronized
init|(
name|pool
init|)
block|{
name|pool
operator|.
name|getTransactionManager
argument_list|()
operator|.
name|checkpoint
argument_list|(
literal|true
argument_list|)
expr_stmt|;
block|}
comment|//restore the Journal#journalMinSize to its previous value
name|fldMinReplace
operator|.
name|set
argument_list|(
name|journal
argument_list|,
name|existingMinReplaceValue
argument_list|)
expr_stmt|;
block|}
specifier|private
name|List
argument_list|<
name|Loggable
argument_list|>
name|readLatestJournalEntries
parameter_list|()
throws|throws
name|IOException
throws|,
name|LogException
block|{
specifier|final
name|Configuration
name|configuration
init|=
name|existEmbeddedServer
operator|.
name|getBrokerPool
argument_list|()
operator|.
name|getConfiguration
argument_list|()
decl_stmt|;
specifier|final
name|Path
name|journalDir
init|=
operator|(
name|Path
operator|)
name|Optional
operator|.
name|ofNullable
argument_list|(
name|configuration
operator|.
name|getProperty
argument_list|(
name|Journal
operator|.
name|PROPERTY_RECOVERY_JOURNAL_DIR
argument_list|)
argument_list|)
operator|.
name|orElse
argument_list|(
name|configuration
operator|.
name|getProperty
argument_list|(
name|BrokerPool
operator|.
name|PROPERTY_DATA_DIR
argument_list|)
argument_list|)
decl_stmt|;
specifier|final
name|int
name|lastNum
decl_stmt|;
try|try
init|(
specifier|final
name|Stream
argument_list|<
name|Path
argument_list|>
name|files
init|=
name|Files
operator|.
name|list
argument_list|(
name|journalDir
argument_list|)
operator|.
name|filter
argument_list|(
name|f
lambda|->
name|f
operator|.
name|getFileName
argument_list|()
operator|.
name|toString
argument_list|()
operator|.
name|endsWith
argument_list|(
literal|"."
operator|+
name|Journal
operator|.
name|LOG_FILE_SUFFIX
argument_list|)
argument_list|)
init|)
block|{
name|lastNum
operator|=
name|Journal
operator|.
name|findLastFile
argument_list|(
name|files
argument_list|)
block|;         }
specifier|final
name|Path
name|lastJournalFile
init|=
name|journalDir
operator|.
name|resolve
argument_list|(
name|Journal
operator|.
name|getFileName
argument_list|(
name|lastNum
argument_list|)
argument_list|)
decl_stmt|;
specifier|final
name|List
argument_list|<
name|Loggable
argument_list|>
name|entries
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
try|try
init|(
specifier|final
name|JournalReader
name|reader
init|=
operator|new
name|JournalReader
argument_list|(
literal|null
argument_list|,
name|lastJournalFile
argument_list|,
name|lastNum
argument_list|)
init|)
block|{
name|Loggable
name|entry
init|=
literal|null
decl_stmt|;
while|while
condition|(
operator|(
name|entry
operator|=
name|reader
operator|.
name|nextEntry
argument_list|()
operator|)
operator|!=
literal|null
condition|)
block|{
name|entries
operator|.
name|add
argument_list|(
name|entry
argument_list|)
expr_stmt|;
block|}
block|}
return|return
name|entries
return|;
block|}
comment|/**      * Store a document into the database.      *      * @param commitAndClose true if the transaction should be committed. false will leave the transaction      *      unfinished (i.e. neither committed, aborted, or closed)      * @param file The file that to store      *      * @return a Tuple2(id, path), where id is of the transaction which stored the document, and path      *     is the path to the document in the database.      */
specifier|private
name|Tuple2
argument_list|<
name|Long
argument_list|,
name|String
argument_list|>
name|store
parameter_list|(
specifier|final
name|boolean
name|commitAndClose
parameter_list|,
specifier|final
name|Path
name|file
parameter_list|)
throws|throws
name|EXistException
throws|,
name|PermissionDeniedException
throws|,
name|IOException
throws|,
name|SAXException
throws|,
name|LockException
block|{
return|return
name|store
argument_list|(
name|commitAndClose
argument_list|,
name|file
argument_list|,
name|FileUtils
operator|.
name|fileName
argument_list|(
name|file
argument_list|)
argument_list|)
return|;
block|}
comment|/**      * Store a document into the database.      *      * @param commitAndClose true if the transaction should be committed. false will leave the transaction      *      unfinished (i.e. neither committed, aborted, or closed)      * @param file The file that to store      * @param dbFilename the name to use when storing the file in the database      *      * @return a Tuple2(id, path), where id is of the transaction which stored the document, and path      *     is the path to the document in the database.      */
specifier|private
name|Tuple2
argument_list|<
name|Long
argument_list|,
name|String
argument_list|>
name|store
parameter_list|(
specifier|final
name|boolean
name|commitAndClose
parameter_list|,
specifier|final
name|Path
name|file
parameter_list|,
specifier|final
name|String
name|dbFilename
parameter_list|)
throws|throws
name|EXistException
throws|,
name|PermissionDeniedException
throws|,
name|IOException
throws|,
name|SAXException
throws|,
name|LockException
block|{
specifier|final
name|BrokerPool
name|pool
init|=
name|existEmbeddedServer
operator|.
name|getBrokerPool
argument_list|()
decl_stmt|;
specifier|final
name|TransactionManager
name|transact
init|=
name|pool
operator|.
name|getTransactionManager
argument_list|()
decl_stmt|;
try|try
init|(
specifier|final
name|DBBroker
name|broker
init|=
name|pool
operator|.
name|get
argument_list|(
name|Optional
operator|.
name|of
argument_list|(
name|pool
operator|.
name|getSecurityManager
argument_list|()
operator|.
name|getSystemSubject
argument_list|()
argument_list|)
argument_list|)
init|)
block|{
specifier|final
name|Txn
name|transaction
init|=
name|transact
operator|.
name|beginTransaction
argument_list|()
decl_stmt|;
specifier|final
name|Collection
name|root
init|=
name|broker
operator|.
name|getOrCreateCollection
argument_list|(
name|transaction
argument_list|,
name|TestConstants
operator|.
name|TEST_COLLECTION_URI
argument_list|)
decl_stmt|;
name|assertNotNull
argument_list|(
name|root
argument_list|)
expr_stmt|;
name|broker
operator|.
name|saveCollection
argument_list|(
name|transaction
argument_list|,
name|root
argument_list|)
expr_stmt|;
specifier|final
name|XmldbURI
name|docDbUri
init|=
name|storeAndVerify
argument_list|(
name|broker
argument_list|,
name|transaction
argument_list|,
name|root
argument_list|,
name|file
argument_list|,
name|dbFilename
argument_list|)
decl_stmt|;
if|if
condition|(
name|commitAndClose
condition|)
block|{
name|transaction
operator|.
name|commit
argument_list|()
expr_stmt|;
name|transaction
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
return|return
operator|new
name|Tuple2
argument_list|<>
argument_list|(
name|transaction
operator|.
name|getId
argument_list|()
argument_list|,
name|docDbUri
operator|.
name|getRawCollectionPath
argument_list|()
argument_list|)
return|;
block|}
block|}
comment|/**      * Store a document into the database and verify its correctness.      *      * @param broker The database broker      * @param transaction The database transaction      * @param collection The Collection into which the document should be stored      * @param file The file which holds the content for the document to store in the database      * @param dbFilename The name to store the document as in the database      *      * @return the path to the document stored in the database.      */
specifier|protected
specifier|abstract
name|XmldbURI
name|storeAndVerify
parameter_list|(
specifier|final
name|DBBroker
name|broker
parameter_list|,
specifier|final
name|Txn
name|transaction
parameter_list|,
specifier|final
name|Collection
name|collection
parameter_list|,
specifier|final
name|Path
name|file
parameter_list|,
specifier|final
name|String
name|dbFilename
parameter_list|)
throws|throws
name|EXistException
throws|,
name|PermissionDeniedException
throws|,
name|IOException
throws|,
name|SAXException
throws|,
name|LockException
function_decl|;
comment|/**      * Read a document from the database.      *      * @param shouldExist true if the document should exist in the database, false if the document should not exist      * @param file The file that was previously stored      */
specifier|private
name|void
name|read
parameter_list|(
specifier|final
name|boolean
name|shouldExist
parameter_list|,
specifier|final
name|Path
name|file
parameter_list|)
throws|throws
name|EXistException
throws|,
name|PermissionDeniedException
throws|,
name|IOException
block|{
name|read
argument_list|(
name|shouldExist
argument_list|,
name|file
argument_list|,
name|FileUtils
operator|.
name|fileName
argument_list|(
name|file
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|/**      * Read a document from the database.      *      * @param shouldExist true if the document should exist in the database, false if the document should not exist      * @param file The file that was previously stored      * @param dbFilename The name of the file to read from the database      */
specifier|private
name|void
name|read
parameter_list|(
specifier|final
name|boolean
name|shouldExist
parameter_list|,
specifier|final
name|Path
name|file
parameter_list|,
specifier|final
name|String
name|dbFilename
parameter_list|)
throws|throws
name|EXistException
throws|,
name|PermissionDeniedException
throws|,
name|IOException
block|{
specifier|final
name|BrokerPool
name|pool
init|=
name|existEmbeddedServer
operator|.
name|getBrokerPool
argument_list|()
decl_stmt|;
try|try
init|(
specifier|final
name|DBBroker
name|broker
init|=
name|pool
operator|.
name|get
argument_list|(
name|Optional
operator|.
name|of
argument_list|(
name|pool
operator|.
name|getSecurityManager
argument_list|()
operator|.
name|getSystemSubject
argument_list|()
argument_list|)
argument_list|)
init|)
block|{
specifier|final
name|XmldbURI
name|uri
init|=
name|TestConstants
operator|.
name|TEST_COLLECTION_URI
operator|.
name|append
argument_list|(
name|dbFilename
argument_list|)
decl_stmt|;
try|try
init|(
specifier|final
name|LockedDocument
name|lockedDoc
init|=
name|broker
operator|.
name|getXMLResource
argument_list|(
name|uri
argument_list|,
name|Lock
operator|.
name|LockMode
operator|.
name|READ_LOCK
argument_list|)
init|)
block|{
if|if
condition|(
operator|!
name|shouldExist
condition|)
block|{
name|assertNull
argument_list|(
literal|"Document should not exist in the database: "
operator|+
name|uri
argument_list|,
name|lockedDoc
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|assertNotNull
argument_list|(
literal|"Document does not exist in the database: "
operator|+
name|uri
argument_list|,
name|lockedDoc
argument_list|)
expr_stmt|;
name|readAndVerify
argument_list|(
name|broker
argument_list|,
name|lockedDoc
operator|.
name|getDocument
argument_list|()
argument_list|,
name|file
argument_list|,
name|dbFilename
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
comment|/**      * Read and Verify that the document from the database is correct.      *      * @param broker The database broker.      * @param doc The document from the database.      * @param file The file that was previously stored      * @param dbFilename The name of the file read from the database      */
specifier|protected
specifier|abstract
name|void
name|readAndVerify
parameter_list|(
specifier|final
name|DBBroker
name|broker
parameter_list|,
specifier|final
name|DocumentImpl
name|doc
parameter_list|,
specifier|final
name|Path
name|file
parameter_list|,
specifier|final
name|String
name|dbFilename
parameter_list|)
throws|throws
name|EXistException
throws|,
name|PermissionDeniedException
throws|,
name|IOException
function_decl|;
comment|/**      * Delete a document from the database.      *      * @param commitAndClose true if the transaction should be committed. false will leave the transaction      *      unfinished (i.e. neither committed, aborted, or closed)      * @param file The file that was previously stored, that should be deleted      *      * @return a Tuple2(id, path), where id is of the transaction which deleted the document, and path      *     is the path of the deleted document from the database.      */
specifier|private
name|Tuple2
argument_list|<
name|Long
argument_list|,
name|String
argument_list|>
name|delete
parameter_list|(
specifier|final
name|boolean
name|commitAndClose
parameter_list|,
specifier|final
name|Path
name|file
parameter_list|)
throws|throws
name|EXistException
throws|,
name|PermissionDeniedException
throws|,
name|IOException
throws|,
name|TriggerException
throws|,
name|LockException
block|{
return|return
name|delete
argument_list|(
name|commitAndClose
argument_list|,
name|FileUtils
operator|.
name|fileName
argument_list|(
name|file
argument_list|)
argument_list|)
return|;
block|}
comment|/**      * Delete a document from the database.      *      * @param commitAndClose true if the transaction should be committed. false will leave the transaction      *      unfinished (i.e. neither committed, aborted, or closed)      * @param dbFilename The name of the file that was previously stored, that should be deleted      *      * @return a Tuple2(id, path), where id is of the transaction which deleted the document, and path      *     is the path of the deleted document from the database.      */
specifier|private
name|Tuple2
argument_list|<
name|Long
argument_list|,
name|String
argument_list|>
name|delete
parameter_list|(
specifier|final
name|boolean
name|commitAndClose
parameter_list|,
specifier|final
name|String
name|dbFilename
parameter_list|)
throws|throws
name|EXistException
throws|,
name|PermissionDeniedException
throws|,
name|IOException
throws|,
name|TriggerException
throws|,
name|LockException
block|{
specifier|final
name|BrokerPool
name|pool
init|=
name|existEmbeddedServer
operator|.
name|getBrokerPool
argument_list|()
decl_stmt|;
specifier|final
name|TransactionManager
name|transact
init|=
name|pool
operator|.
name|getTransactionManager
argument_list|()
decl_stmt|;
try|try
init|(
specifier|final
name|DBBroker
name|broker
init|=
name|pool
operator|.
name|get
argument_list|(
name|Optional
operator|.
name|of
argument_list|(
name|pool
operator|.
name|getSecurityManager
argument_list|()
operator|.
name|getSystemSubject
argument_list|()
argument_list|)
argument_list|)
init|)
block|{
comment|// the following transaction will not be committed. It will thus be rolled back by recovery
specifier|final
name|Txn
name|transaction
init|=
name|transact
operator|.
name|beginTransaction
argument_list|()
decl_stmt|;
specifier|final
name|Collection
name|root
init|=
name|broker
operator|.
name|getOrCreateCollection
argument_list|(
name|transaction
argument_list|,
name|TestConstants
operator|.
name|TEST_COLLECTION_URI
argument_list|)
decl_stmt|;
name|assertNotNull
argument_list|(
name|root
argument_list|)
expr_stmt|;
name|broker
operator|.
name|saveCollection
argument_list|(
name|transaction
argument_list|,
name|root
argument_list|)
expr_stmt|;
specifier|final
name|DocumentImpl
name|doc
init|=
name|root
operator|.
name|getDocument
argument_list|(
name|broker
argument_list|,
name|XmldbURI
operator|.
name|create
argument_list|(
name|dbFilename
argument_list|)
argument_list|)
decl_stmt|;
if|if
condition|(
name|doc
operator|!=
literal|null
condition|)
block|{
name|root
operator|.
name|removeResource
argument_list|(
name|transaction
argument_list|,
name|broker
argument_list|,
name|doc
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|commitAndClose
condition|)
block|{
name|transaction
operator|.
name|commit
argument_list|()
expr_stmt|;
name|transaction
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
return|return
operator|new
name|Tuple2
argument_list|<>
argument_list|(
name|transaction
operator|.
name|getId
argument_list|()
argument_list|,
name|doc
operator|.
name|getURI
argument_list|()
operator|.
name|getRawCollectionPath
argument_list|()
argument_list|)
return|;
block|}
block|}
specifier|private
name|void
name|flushJournal
parameter_list|()
block|{
specifier|final
name|BrokerPool
name|pool
init|=
name|existEmbeddedServer
operator|.
name|getBrokerPool
argument_list|()
decl_stmt|;
name|pool
operator|.
name|getJournalManager
argument_list|()
operator|.
name|get
argument_list|()
operator|.
name|flush
argument_list|(
literal|true
argument_list|,
literal|false
argument_list|)
expr_stmt|;
block|}
specifier|protected
name|Path
name|resolveTestFile
parameter_list|(
specifier|final
name|String
name|fileName
parameter_list|)
throws|throws
name|IOException
block|{
specifier|final
name|Path
name|path
init|=
name|TestUtils
operator|.
name|getEXistHome
argument_list|()
operator|.
name|orElseGet
argument_list|(
parameter_list|()
lambda|->
name|Paths
operator|.
name|get
argument_list|(
literal|"."
argument_list|)
argument_list|)
operator|.
name|resolve
argument_list|(
name|fileName
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|Files
operator|.
name|exists
argument_list|(
name|path
argument_list|)
condition|)
block|{
throw|throw
operator|new
name|IOException
argument_list|(
literal|"No such test file: "
operator|+
name|path
operator|.
name|toAbsolutePath
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|)
throw|;
block|}
return|return
name|path
return|;
block|}
specifier|protected
specifier|static
name|ExpectedStart
name|Start
parameter_list|(
specifier|final
name|long
name|transactionId
parameter_list|)
block|{
return|return
operator|new
name|ExpectedStart
argument_list|(
name|transactionId
argument_list|)
return|;
block|}
specifier|protected
specifier|static
name|ExpectedAbort
name|Abort
parameter_list|(
specifier|final
name|long
name|transactionId
parameter_list|)
block|{
return|return
operator|new
name|ExpectedAbort
argument_list|(
name|transactionId
argument_list|)
return|;
block|}
specifier|protected
specifier|static
name|ExpectedCommit
name|Commit
parameter_list|(
specifier|final
name|long
name|transactionId
parameter_list|)
block|{
return|return
operator|new
name|ExpectedCommit
argument_list|(
name|transactionId
argument_list|)
return|;
block|}
specifier|protected
specifier|static
name|Checkpoint
name|Checkpoint
parameter_list|(
specifier|final
name|long
name|transactionId
parameter_list|)
block|{
return|return
operator|new
name|Checkpoint
argument_list|(
name|transactionId
argument_list|)
return|;
block|}
specifier|protected
specifier|static
specifier|abstract
class|class
name|ExpectedLoggable
block|{
specifier|protected
specifier|final
name|long
name|transactionId
decl_stmt|;
specifier|protected
name|ExpectedLoggable
parameter_list|(
specifier|final
name|long
name|transactionId
parameter_list|)
block|{
name|this
operator|.
name|transactionId
operator|=
name|transactionId
expr_stmt|;
block|}
block|}
specifier|protected
specifier|static
class|class
name|ExpectedStart
extends|extends
name|ExpectedLoggable
block|{
specifier|public
name|ExpectedStart
parameter_list|(
specifier|final
name|long
name|transactionId
parameter_list|)
block|{
name|super
argument_list|(
name|transactionId
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|equals
parameter_list|(
specifier|final
name|Object
name|o
parameter_list|)
block|{
if|if
condition|(
name|this
operator|==
name|o
condition|)
return|return
literal|true
return|;
if|if
condition|(
name|o
operator|==
literal|null
operator|||
name|o
operator|.
name|getClass
argument_list|()
operator|!=
name|TxnStart
operator|.
name|class
condition|)
return|return
literal|false
return|;
specifier|final
name|TxnStart
name|that
init|=
operator|(
name|TxnStart
operator|)
name|o
decl_stmt|;
return|return
name|that
operator|.
name|transactionId
operator|==
name|transactionId
return|;
block|}
annotation|@
name|Override
specifier|public
name|String
name|toString
parameter_list|()
block|{
return|return
literal|"START T-"
operator|+
name|transactionId
return|;
block|}
block|}
specifier|protected
specifier|static
class|class
name|ExpectedAbort
extends|extends
name|ExpectedLoggable
block|{
specifier|public
name|ExpectedAbort
parameter_list|(
specifier|final
name|long
name|transactionId
parameter_list|)
block|{
name|super
argument_list|(
name|transactionId
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|equals
parameter_list|(
specifier|final
name|Object
name|o
parameter_list|)
block|{
if|if
condition|(
name|this
operator|==
name|o
condition|)
return|return
literal|true
return|;
if|if
condition|(
name|o
operator|==
literal|null
operator|||
name|o
operator|.
name|getClass
argument_list|()
operator|!=
name|TxnAbort
operator|.
name|class
condition|)
return|return
literal|false
return|;
specifier|final
name|TxnAbort
name|that
init|=
operator|(
name|TxnAbort
operator|)
name|o
decl_stmt|;
return|return
name|that
operator|.
name|transactionId
operator|==
name|transactionId
return|;
block|}
annotation|@
name|Override
specifier|public
name|String
name|toString
parameter_list|()
block|{
return|return
literal|"ABORT T-"
operator|+
name|transactionId
return|;
block|}
block|}
specifier|protected
specifier|static
class|class
name|ExpectedCommit
extends|extends
name|ExpectedLoggable
block|{
specifier|public
name|ExpectedCommit
parameter_list|(
specifier|final
name|long
name|transactionId
parameter_list|)
block|{
name|super
argument_list|(
name|transactionId
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|equals
parameter_list|(
specifier|final
name|Object
name|o
parameter_list|)
block|{
if|if
condition|(
name|this
operator|==
name|o
condition|)
return|return
literal|true
return|;
if|if
condition|(
name|o
operator|==
literal|null
operator|||
name|o
operator|.
name|getClass
argument_list|()
operator|!=
name|TxnCommit
operator|.
name|class
condition|)
return|return
literal|false
return|;
specifier|final
name|TxnCommit
name|that
init|=
operator|(
name|TxnCommit
operator|)
name|o
decl_stmt|;
return|return
name|that
operator|.
name|transactionId
operator|==
name|transactionId
return|;
block|}
annotation|@
name|Override
specifier|public
name|String
name|toString
parameter_list|()
block|{
return|return
literal|"COMMIT T-"
operator|+
name|transactionId
return|;
block|}
block|}
specifier|protected
specifier|static
class|class
name|ExpectedCheckpoint
extends|extends
name|ExpectedLoggable
block|{
specifier|public
name|ExpectedCheckpoint
parameter_list|(
specifier|final
name|long
name|transactionId
parameter_list|)
block|{
name|super
argument_list|(
name|transactionId
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|equals
parameter_list|(
specifier|final
name|Object
name|o
parameter_list|)
block|{
if|if
condition|(
name|this
operator|==
name|o
condition|)
return|return
literal|true
return|;
if|if
condition|(
name|o
operator|==
literal|null
operator|||
name|o
operator|.
name|getClass
argument_list|()
operator|!=
name|Checkpoint
operator|.
name|class
condition|)
return|return
literal|false
return|;
specifier|final
name|Checkpoint
name|that
init|=
operator|(
name|Checkpoint
operator|)
name|o
decl_stmt|;
return|return
name|that
operator|.
name|transactionId
operator|==
name|transactionId
return|;
block|}
annotation|@
name|Override
specifier|public
name|String
name|toString
parameter_list|()
block|{
return|return
literal|"CHECKPOINT T-"
operator|+
name|transactionId
return|;
block|}
block|}
specifier|protected
name|ExpectedCollectionNextDocId
name|CollectionNextDocId
parameter_list|(
specifier|final
name|long
name|transactionId
parameter_list|,
specifier|final
name|long
name|page
parameter_list|,
specifier|final
name|int
name|nextDocId
parameter_list|)
block|{
return|return
operator|new
name|ExpectedCollectionNextDocId
argument_list|(
name|transactionId
argument_list|,
name|page
argument_list|,
name|nextDocId
argument_list|)
return|;
block|}
specifier|protected
name|ExpectedCollectionCreateDoc
name|CollectionCreateDoc
parameter_list|(
specifier|final
name|long
name|transactionId
parameter_list|,
specifier|final
name|long
name|page
parameter_list|,
specifier|final
name|int
name|docId
parameter_list|,
specifier|final
name|String
name|docUri
parameter_list|)
block|{
return|return
operator|new
name|ExpectedCollectionCreateDoc
argument_list|(
name|transactionId
argument_list|,
name|page
argument_list|,
name|docId
argument_list|,
name|docUri
argument_list|)
return|;
block|}
specifier|protected
name|ExpectedCollectionDeleteDoc
name|CollectionDeleteDoc
parameter_list|(
specifier|final
name|long
name|transactionId
parameter_list|,
specifier|final
name|long
name|page
parameter_list|,
specifier|final
name|int
name|docId
parameter_list|,
specifier|final
name|String
name|docUri
parameter_list|)
block|{
return|return
operator|new
name|ExpectedCollectionDeleteDoc
argument_list|(
name|transactionId
argument_list|,
name|page
argument_list|,
name|docId
argument_list|,
name|docUri
argument_list|)
return|;
block|}
specifier|protected
name|ExpectedStoreElementNode
name|StoreElementNode
parameter_list|(
specifier|final
name|long
name|transactionId
parameter_list|,
specifier|final
name|long
name|page
parameter_list|,
specifier|final
name|int
name|children
parameter_list|)
block|{
return|return
operator|new
name|ExpectedStoreElementNode
argument_list|(
name|transactionId
argument_list|,
name|page
argument_list|,
name|children
argument_list|)
return|;
block|}
specifier|protected
name|ExpectedStoreTextNode
name|StoreTextNode
parameter_list|(
specifier|final
name|long
name|transactionId
parameter_list|,
specifier|final
name|long
name|page
parameter_list|,
specifier|final
name|String
name|text
parameter_list|)
block|{
return|return
operator|new
name|ExpectedStoreTextNode
argument_list|(
name|transactionId
argument_list|,
name|page
argument_list|,
name|text
argument_list|)
return|;
block|}
specifier|protected
name|ExpectedDeleteElementNode
name|DeleteElementNode
parameter_list|(
specifier|final
name|long
name|transactionId
parameter_list|,
specifier|final
name|long
name|page
parameter_list|,
specifier|final
name|int
name|children
parameter_list|)
block|{
return|return
operator|new
name|ExpectedDeleteElementNode
argument_list|(
name|transactionId
argument_list|,
name|page
argument_list|,
name|children
argument_list|)
return|;
block|}
specifier|protected
specifier|abstract
specifier|static
class|class
name|AbstractExpectedStoreValue
extends|extends
name|ExpectedLoggable
block|{
specifier|protected
specifier|final
name|long
name|page
decl_stmt|;
specifier|public
name|AbstractExpectedStoreValue
parameter_list|(
specifier|final
name|long
name|transactionId
parameter_list|,
specifier|final
name|long
name|page
parameter_list|)
block|{
name|super
argument_list|(
name|transactionId
argument_list|)
expr_stmt|;
name|this
operator|.
name|page
operator|=
name|page
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|equals
parameter_list|(
specifier|final
name|Object
name|o
parameter_list|)
block|{
if|if
condition|(
name|this
operator|==
name|o
condition|)
return|return
literal|true
return|;
if|if
condition|(
name|o
operator|==
literal|null
operator|||
name|o
operator|.
name|getClass
argument_list|()
operator|!=
name|StoreValueLoggable
operator|.
name|class
condition|)
return|return
literal|false
return|;
specifier|final
name|StoreValueLoggable
name|that
init|=
operator|(
name|StoreValueLoggable
operator|)
name|o
decl_stmt|;
return|return
name|that
operator|.
name|transactionId
operator|==
name|transactionId
operator|&&
name|that
operator|.
name|getPage
argument_list|()
operator|==
name|page
operator|&&
name|equalsStoreValue
argument_list|(
name|that
argument_list|)
return|;
block|}
specifier|protected
specifier|abstract
name|boolean
name|equalsStoreValue
parameter_list|(
specifier|final
name|StoreValueLoggable
name|o
parameter_list|)
function_decl|;
annotation|@
name|Override
specifier|public
name|String
name|toString
parameter_list|()
block|{
return|return
literal|"STORED VALUE T-"
operator|+
name|transactionId
return|;
block|}
block|}
specifier|protected
class|class
name|ExpectedCollectionNextDocId
extends|extends
name|AbstractExpectedStoreValue
block|{
specifier|private
specifier|final
name|int
name|nextDocId
decl_stmt|;
specifier|public
name|ExpectedCollectionNextDocId
parameter_list|(
specifier|final
name|long
name|transactionId
parameter_list|,
specifier|final
name|long
name|pageId
parameter_list|,
specifier|final
name|int
name|nextDocId
parameter_list|)
block|{
name|super
argument_list|(
name|transactionId
argument_list|,
name|pageId
argument_list|)
expr_stmt|;
name|this
operator|.
name|nextDocId
operator|=
name|nextDocId
expr_stmt|;
block|}
annotation|@
name|Override
specifier|protected
name|boolean
name|equalsStoreValue
parameter_list|(
specifier|final
name|StoreValueLoggable
name|o
parameter_list|)
block|{
if|if
condition|(
name|o
operator|.
name|getFileId
argument_list|()
operator|!=
name|COLLECTIONS_DBX_ID
condition|)
block|{
return|return
literal|false
return|;
block|}
specifier|final
name|int
name|thatDocId
init|=
name|byteToInt
argument_list|(
name|o
operator|.
name|getValue
argument_list|()
argument_list|,
literal|0
argument_list|)
decl_stmt|;
return|return
name|thatDocId
operator|==
name|nextDocId
return|;
block|}
annotation|@
name|Override
specifier|public
name|String
name|toString
parameter_list|()
block|{
return|return
literal|"STORED VALUE T-"
operator|+
name|transactionId
operator|+
literal|" nextDocId(txnId="
operator|+
name|transactionId
operator|+
literal|", page="
operator|+
name|page
operator|+
literal|", id="
operator|+
name|nextDocId
operator|+
literal|")"
return|;
block|}
block|}
specifier|protected
class|class
name|ExpectedCollectionCreateDoc
extends|extends
name|AbstractExpectedStoreValue
block|{
specifier|private
specifier|final
name|int
name|docId
decl_stmt|;
specifier|private
specifier|final
name|String
name|docUri
decl_stmt|;
specifier|public
name|ExpectedCollectionCreateDoc
parameter_list|(
specifier|final
name|long
name|transactionId
parameter_list|,
specifier|final
name|long
name|pageId
parameter_list|,
specifier|final
name|int
name|docId
parameter_list|,
specifier|final
name|String
name|docUri
parameter_list|)
block|{
name|super
argument_list|(
name|transactionId
argument_list|,
name|pageId
argument_list|)
expr_stmt|;
name|this
operator|.
name|docId
operator|=
name|docId
expr_stmt|;
name|this
operator|.
name|docUri
operator|=
name|docUri
expr_stmt|;
block|}
annotation|@
name|Override
specifier|protected
name|boolean
name|equalsStoreValue
parameter_list|(
specifier|final
name|StoreValueLoggable
name|o
parameter_list|)
block|{
if|if
condition|(
name|o
operator|.
name|getFileId
argument_list|()
operator|!=
name|COLLECTIONS_DBX_ID
condition|)
block|{
return|return
literal|false
return|;
block|}
try|try
block|{
specifier|final
name|VariableByteInputStream
name|vis
init|=
operator|new
name|VariableByteInputStream
argument_list|(
operator|new
name|FastByteArrayInputStream
argument_list|(
name|o
operator|.
name|getValue
argument_list|()
argument_list|)
argument_list|)
decl_stmt|;
specifier|final
name|int
name|thatDocId
init|=
name|vis
operator|.
name|readInt
argument_list|()
decl_stmt|;
specifier|final
name|String
name|thatDocName
init|=
name|vis
operator|.
name|readUTF
argument_list|()
decl_stmt|;
return|return
name|thatDocId
operator|==
name|docId
operator|&&
name|thatDocName
operator|.
name|equals
argument_list|(
name|XmldbURI
operator|.
name|create
argument_list|(
name|docUri
argument_list|)
operator|.
name|lastSegment
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|)
return|;
block|}
catch|catch
parameter_list|(
specifier|final
name|IOException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|IllegalStateException
argument_list|(
name|e
argument_list|)
throw|;
block|}
block|}
annotation|@
name|Override
specifier|public
name|String
name|toString
parameter_list|()
block|{
return|return
literal|"STORED INDEX VALUE T-"
operator|+
name|transactionId
operator|+
literal|" collectionCreateDoc(txnId="
operator|+
name|transactionId
operator|+
literal|", page="
operator|+
name|page
operator|+
literal|", docId="
operator|+
name|docId
operator|+
literal|", uri="
operator|+
name|docUri
operator|+
literal|")"
return|;
block|}
block|}
specifier|protected
specifier|abstract
specifier|static
class|class
name|AbstractIndexExpectedRemoveValue
extends|extends
name|ExpectedLoggable
block|{
specifier|protected
specifier|final
name|long
name|page
decl_stmt|;
specifier|public
name|AbstractIndexExpectedRemoveValue
parameter_list|(
specifier|final
name|long
name|transactionId
parameter_list|,
specifier|final
name|long
name|page
parameter_list|)
block|{
name|super
argument_list|(
name|transactionId
argument_list|)
expr_stmt|;
name|this
operator|.
name|page
operator|=
name|page
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|equals
parameter_list|(
specifier|final
name|Object
name|o
parameter_list|)
block|{
if|if
condition|(
name|this
operator|==
name|o
condition|)
return|return
literal|true
return|;
if|if
condition|(
name|o
operator|==
literal|null
operator|||
name|o
operator|.
name|getClass
argument_list|()
operator|!=
name|org
operator|.
name|exist
operator|.
name|storage
operator|.
name|index
operator|.
name|RemoveValueLoggable
operator|.
name|class
condition|)
return|return
literal|false
return|;
specifier|final
name|org
operator|.
name|exist
operator|.
name|storage
operator|.
name|index
operator|.
name|RemoveValueLoggable
name|that
init|=
operator|(
name|org
operator|.
name|exist
operator|.
name|storage
operator|.
name|index
operator|.
name|RemoveValueLoggable
operator|)
name|o
decl_stmt|;
return|return
name|that
operator|.
name|transactionId
operator|==
name|transactionId
operator|&&
name|that
operator|.
name|getPage
argument_list|()
operator|==
name|page
operator|&&
name|equalsRemoveValue
argument_list|(
name|that
argument_list|)
return|;
block|}
specifier|protected
specifier|abstract
name|boolean
name|equalsRemoveValue
parameter_list|(
specifier|final
name|org
operator|.
name|exist
operator|.
name|storage
operator|.
name|index
operator|.
name|RemoveValueLoggable
name|o
parameter_list|)
function_decl|;
annotation|@
name|Override
specifier|public
name|String
name|toString
parameter_list|()
block|{
return|return
literal|"REMOVED INDEX VALUE T-"
operator|+
name|transactionId
return|;
block|}
block|}
specifier|protected
class|class
name|ExpectedCollectionDeleteDoc
extends|extends
name|AbstractIndexExpectedRemoveValue
block|{
specifier|private
specifier|final
name|int
name|docId
decl_stmt|;
specifier|private
specifier|final
name|String
name|docUri
decl_stmt|;
specifier|public
name|ExpectedCollectionDeleteDoc
parameter_list|(
specifier|final
name|long
name|transactionId
parameter_list|,
specifier|final
name|long
name|pageId
parameter_list|,
specifier|final
name|int
name|docId
parameter_list|,
specifier|final
name|String
name|docUri
parameter_list|)
block|{
name|super
argument_list|(
name|transactionId
argument_list|,
name|pageId
argument_list|)
expr_stmt|;
name|this
operator|.
name|docId
operator|=
name|docId
expr_stmt|;
name|this
operator|.
name|docUri
operator|=
name|docUri
expr_stmt|;
block|}
annotation|@
name|Override
specifier|protected
name|boolean
name|equalsRemoveValue
parameter_list|(
specifier|final
name|org
operator|.
name|exist
operator|.
name|storage
operator|.
name|index
operator|.
name|RemoveValueLoggable
name|o
parameter_list|)
block|{
if|if
condition|(
name|o
operator|.
name|getFileId
argument_list|()
operator|!=
name|COLLECTIONS_DBX_ID
condition|)
block|{
return|return
literal|false
return|;
block|}
try|try
block|{
specifier|final
name|VariableByteInputStream
name|vis
init|=
operator|new
name|VariableByteInputStream
argument_list|(
operator|new
name|FastByteArrayInputStream
argument_list|(
name|o
operator|.
name|getOldData
argument_list|()
argument_list|,
name|o
operator|.
name|getOffset
argument_list|()
argument_list|,
name|o
operator|.
name|getLen
argument_list|()
argument_list|)
argument_list|)
decl_stmt|;
specifier|final
name|int
name|thatDocId
init|=
name|vis
operator|.
name|readInt
argument_list|()
decl_stmt|;
specifier|final
name|String
name|thatDocName
init|=
name|vis
operator|.
name|readUTF
argument_list|()
decl_stmt|;
return|return
name|thatDocId
operator|==
name|docId
operator|&&
name|thatDocName
operator|.
name|equals
argument_list|(
name|XmldbURI
operator|.
name|create
argument_list|(
name|docUri
argument_list|)
operator|.
name|lastSegment
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|)
return|;
block|}
catch|catch
parameter_list|(
specifier|final
name|IOException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|IllegalStateException
argument_list|(
name|e
argument_list|)
throw|;
block|}
block|}
annotation|@
name|Override
specifier|public
name|String
name|toString
parameter_list|()
block|{
return|return
literal|"REMOVED INDEX VALUE T-"
operator|+
name|transactionId
operator|+
literal|" collectionDeleteDoc(txnId="
operator|+
name|transactionId
operator|+
literal|", page="
operator|+
name|page
operator|+
literal|", docId="
operator|+
name|docId
operator|+
literal|", uri="
operator|+
name|docUri
operator|+
literal|")"
return|;
block|}
block|}
specifier|protected
specifier|abstract
specifier|static
class|class
name|AbstractExpectedAddValue
extends|extends
name|ExpectedLoggable
block|{
specifier|protected
specifier|final
name|long
name|page
decl_stmt|;
specifier|public
name|AbstractExpectedAddValue
parameter_list|(
specifier|final
name|long
name|transactionId
parameter_list|,
specifier|final
name|long
name|page
parameter_list|)
block|{
name|super
argument_list|(
name|transactionId
argument_list|)
expr_stmt|;
name|this
operator|.
name|page
operator|=
name|page
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|equals
parameter_list|(
specifier|final
name|Object
name|o
parameter_list|)
block|{
if|if
condition|(
name|this
operator|==
name|o
condition|)
return|return
literal|true
return|;
if|if
condition|(
name|o
operator|==
literal|null
operator|||
name|o
operator|.
name|getClass
argument_list|()
operator|!=
name|AddValueLoggable
operator|.
name|class
condition|)
return|return
literal|false
return|;
specifier|final
name|AddValueLoggable
name|that
init|=
operator|(
name|AddValueLoggable
operator|)
name|o
decl_stmt|;
return|return
name|that
operator|.
name|transactionId
operator|==
name|transactionId
operator|&&
name|that
operator|.
name|getPageNum
argument_list|()
operator|==
name|page
operator|&&
name|equalsAddValue
argument_list|(
name|that
argument_list|)
return|;
block|}
specifier|protected
specifier|abstract
name|boolean
name|equalsAddValue
parameter_list|(
specifier|final
name|AddValueLoggable
name|o
parameter_list|)
function_decl|;
annotation|@
name|Override
specifier|public
name|String
name|toString
parameter_list|()
block|{
return|return
literal|"ADD VALUE T-"
operator|+
name|transactionId
return|;
block|}
block|}
specifier|protected
class|class
name|ExpectedStoreElementNode
extends|extends
name|AbstractExpectedAddValue
block|{
specifier|private
specifier|final
name|int
name|children
decl_stmt|;
specifier|public
name|ExpectedStoreElementNode
parameter_list|(
specifier|final
name|long
name|transactionId
parameter_list|,
specifier|final
name|long
name|pageId
parameter_list|,
specifier|final
name|int
name|children
parameter_list|)
block|{
name|super
argument_list|(
name|transactionId
argument_list|,
name|pageId
argument_list|)
expr_stmt|;
name|this
operator|.
name|children
operator|=
name|children
expr_stmt|;
block|}
annotation|@
name|Override
specifier|protected
name|boolean
name|equalsAddValue
parameter_list|(
specifier|final
name|AddValueLoggable
name|o
parameter_list|)
block|{
specifier|final
name|byte
name|thatSignature
init|=
name|o
operator|.
name|getValue
argument_list|()
index|[
literal|0
index|]
decl_stmt|;
specifier|final
name|int
name|thatChildren
init|=
name|ByteConversion
operator|.
name|byteToInt
argument_list|(
name|o
operator|.
name|getValue
argument_list|()
argument_list|,
literal|1
argument_list|)
decl_stmt|;
comment|// check it is an ElementImpl and the number of children it has
return|return
name|thatSignature
operator|==
operator|(
operator|(
name|Signatures
operator|.
name|Elem
operator|<<
literal|0x5
operator|)
operator||
name|Signatures
operator|.
name|byteContent
operator|)
operator|&&
name|thatChildren
operator|==
name|children
return|;
block|}
annotation|@
name|Override
specifier|public
name|String
name|toString
parameter_list|()
block|{
return|return
literal|"ADD VALUE T-"
operator|+
name|transactionId
operator|+
literal|" storeElement(txnId="
operator|+
name|transactionId
operator|+
literal|", page="
operator|+
name|page
operator|+
literal|", children="
operator|+
name|children
operator|+
literal|")"
return|;
block|}
block|}
specifier|protected
class|class
name|ExpectedStoreTextNode
extends|extends
name|AbstractExpectedAddValue
block|{
specifier|private
specifier|final
name|String
name|text
decl_stmt|;
specifier|public
name|ExpectedStoreTextNode
parameter_list|(
specifier|final
name|long
name|transactionId
parameter_list|,
specifier|final
name|long
name|pageId
parameter_list|,
specifier|final
name|String
name|text
parameter_list|)
block|{
name|super
argument_list|(
name|transactionId
argument_list|,
name|pageId
argument_list|)
expr_stmt|;
name|this
operator|.
name|text
operator|=
name|text
expr_stmt|;
block|}
annotation|@
name|Override
specifier|protected
name|boolean
name|equalsAddValue
parameter_list|(
specifier|final
name|AddValueLoggable
name|o
parameter_list|)
block|{
name|int
name|pos
init|=
literal|0
decl_stmt|;
specifier|final
name|byte
name|thatSignature
init|=
name|o
operator|.
name|getValue
argument_list|()
index|[
name|pos
operator|++
index|]
decl_stmt|;
specifier|final
name|int
name|dlnLen
init|=
name|ByteConversion
operator|.
name|byteToShort
argument_list|(
name|o
operator|.
name|getValue
argument_list|()
argument_list|,
name|pos
argument_list|)
decl_stmt|;
name|pos
operator|+=
literal|2
expr_stmt|;
specifier|final
name|NodeId
name|dln
init|=
operator|new
name|DLN
argument_list|(
name|dlnLen
argument_list|,
name|o
operator|.
name|getValue
argument_list|()
argument_list|,
name|pos
argument_list|)
decl_stmt|;
name|pos
operator|+=
name|dln
operator|.
name|size
argument_list|()
expr_stmt|;
specifier|final
name|String
name|thatText
init|=
name|UTF8
operator|.
name|decode
argument_list|(
name|o
operator|.
name|getValue
argument_list|()
argument_list|,
name|pos
argument_list|,
name|o
operator|.
name|getValue
argument_list|()
operator|.
name|length
operator|-
name|pos
argument_list|)
operator|.
name|toString
argument_list|()
decl_stmt|;
comment|// check it is a TextImpl and the text matches
return|return
name|thatSignature
operator|==
operator|(
name|Signatures
operator|.
name|Char
operator|<<
literal|0x5
operator|)
operator|&&
name|thatText
operator|.
name|equals
argument_list|(
name|text
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|String
name|toString
parameter_list|()
block|{
return|return
literal|"ADD VALUE T-"
operator|+
name|transactionId
operator|+
literal|" storeText(txnId="
operator|+
name|transactionId
operator|+
literal|", page="
operator|+
name|page
operator|+
literal|", text="
operator|+
name|text
operator|+
literal|")"
return|;
block|}
block|}
specifier|protected
specifier|abstract
specifier|static
class|class
name|AbstractExpectedRemovePage
extends|extends
name|ExpectedLoggable
block|{
specifier|protected
specifier|final
name|long
name|page
decl_stmt|;
specifier|public
name|AbstractExpectedRemovePage
parameter_list|(
specifier|final
name|long
name|transactionId
parameter_list|,
specifier|final
name|long
name|page
parameter_list|)
block|{
name|super
argument_list|(
name|transactionId
argument_list|)
expr_stmt|;
name|this
operator|.
name|page
operator|=
name|page
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|equals
parameter_list|(
specifier|final
name|Object
name|o
parameter_list|)
block|{
if|if
condition|(
name|this
operator|==
name|o
condition|)
return|return
literal|true
return|;
if|if
condition|(
name|o
operator|==
literal|null
operator|||
name|o
operator|.
name|getClass
argument_list|()
operator|!=
name|RemovePageLoggable
operator|.
name|class
condition|)
return|return
literal|false
return|;
specifier|final
name|RemovePageLoggable
name|that
init|=
operator|(
name|RemovePageLoggable
operator|)
name|o
decl_stmt|;
return|return
name|that
operator|.
name|transactionId
operator|==
name|transactionId
operator|&&
name|that
operator|.
name|getPageNum
argument_list|()
operator|==
name|page
operator|&&
name|equalsRemovePage
argument_list|(
name|that
argument_list|)
return|;
block|}
specifier|protected
specifier|abstract
name|boolean
name|equalsRemovePage
parameter_list|(
specifier|final
name|RemovePageLoggable
name|o
parameter_list|)
function_decl|;
annotation|@
name|Override
specifier|public
name|String
name|toString
parameter_list|()
block|{
return|return
literal|"REMOVE PAGE T-"
operator|+
name|transactionId
return|;
block|}
block|}
specifier|protected
class|class
name|ExpectedDeleteElementNode
extends|extends
name|AbstractExpectedRemovePage
block|{
specifier|private
specifier|final
name|int
name|children
decl_stmt|;
specifier|public
name|ExpectedDeleteElementNode
parameter_list|(
specifier|final
name|long
name|transactionId
parameter_list|,
specifier|final
name|long
name|pageId
parameter_list|,
specifier|final
name|int
name|children
parameter_list|)
block|{
name|super
argument_list|(
name|transactionId
argument_list|,
name|pageId
argument_list|)
expr_stmt|;
name|this
operator|.
name|children
operator|=
name|children
expr_stmt|;
block|}
annotation|@
name|Override
specifier|protected
name|boolean
name|equalsRemovePage
parameter_list|(
specifier|final
name|RemovePageLoggable
name|o
parameter_list|)
block|{
specifier|final
name|byte
name|thatSignature
init|=
name|o
operator|.
name|getOldData
argument_list|()
index|[
literal|4
index|]
decl_stmt|;
specifier|final
name|int
name|thatChildren
init|=
name|ByteConversion
operator|.
name|byteToInt
argument_list|(
name|o
operator|.
name|getOldData
argument_list|()
argument_list|,
literal|5
argument_list|)
decl_stmt|;
comment|// check it is an ElementImpl and the number of children it has
return|return
name|thatSignature
operator|==
operator|(
operator|(
name|Signatures
operator|.
name|Elem
operator|<<
literal|0x5
operator|)
operator||
name|Signatures
operator|.
name|byteContent
operator|)
operator|&&
name|thatChildren
operator|==
name|children
return|;
block|}
annotation|@
name|Override
specifier|public
name|String
name|toString
parameter_list|()
block|{
return|return
literal|"REMOVE PAGE T-"
operator|+
name|transactionId
operator|+
literal|" deleteElement(txnId="
operator|+
name|transactionId
operator|+
literal|", page="
operator|+
name|page
operator|+
literal|", children="
operator|+
name|children
operator|+
literal|")"
return|;
block|}
block|}
specifier|protected
specifier|static
parameter_list|<
name|T
parameter_list|>
name|ExtendedArrayList
argument_list|<
name|T
argument_list|>
name|List
parameter_list|(
specifier|final
name|T
modifier|...
name|items
parameter_list|)
block|{
specifier|final
name|ExtendedArrayList
argument_list|<
name|T
argument_list|>
name|list
init|=
operator|new
name|ExtendedArrayList
argument_list|<>
argument_list|(
name|items
operator|.
name|length
argument_list|)
decl_stmt|;
name|list
operator|.
name|add
argument_list|(
name|items
argument_list|)
expr_stmt|;
return|return
name|list
return|;
block|}
specifier|protected
specifier|static
class|class
name|ExtendedArrayList
parameter_list|<
name|T
parameter_list|>
extends|extends
name|ArrayList
argument_list|<
name|T
argument_list|>
block|{
specifier|private
name|ExtendedArrayList
parameter_list|(
specifier|final
name|int
name|initialCapacity
parameter_list|)
block|{
name|super
argument_list|(
name|initialCapacity
argument_list|)
expr_stmt|;
block|}
specifier|public
name|ExtendedArrayList
argument_list|<
name|T
argument_list|>
name|add
parameter_list|(
specifier|final
name|T
modifier|...
name|items
parameter_list|)
block|{
for|for
control|(
specifier|final
name|T
name|item
range|:
name|items
control|)
block|{
name|super
operator|.
name|add
argument_list|(
name|item
argument_list|)
expr_stmt|;
block|}
return|return
name|this
return|;
block|}
block|}
block|}
end_class

end_unit

