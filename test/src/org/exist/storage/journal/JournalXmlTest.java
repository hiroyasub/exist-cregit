begin_unit|revision:1.0.0;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * eXist Open Source Native XML Database  * Copyright (C) 2001-2018 The eXist Project  * http://exist-db.org  *  * This program is free software; you can redistribute it and/or  * modify it under the terms of the GNU Lesser General Public License  * as published by the Free Software Foundation; either version 2  * of the License, or (at your option) any later version.  *  * This program is distributed in the hope that it will be useful,  * but WITHOUT ANY WARRANTY; without even the implied warranty of  * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the  * GNU Lesser General Public License for more details.  *  * You should have received a copy of the GNU Lesser General Public  * License along with this library; if not, write to the Free Software  * Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA  02110-1301  USA  */
end_comment

begin_package
package|package
name|org
operator|.
name|exist
operator|.
name|storage
operator|.
name|journal
package|;
end_package

begin_import
import|import
name|com
operator|.
name|evolvedbinary
operator|.
name|j8fu
operator|.
name|tuple
operator|.
name|Tuple2
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|EXistException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|collections
operator|.
name|Collection
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|collections
operator|.
name|IndexInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|dom
operator|.
name|persistent
operator|.
name|DocumentImpl
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|numbering
operator|.
name|DLN
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|security
operator|.
name|PermissionDeniedException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|storage
operator|.
name|BrokerPool
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|storage
operator|.
name|DBBroker
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|storage
operator|.
name|txn
operator|.
name|Txn
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|util
operator|.
name|LockException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|util
operator|.
name|StringInputSource
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|xmldb
operator|.
name|XmldbURI
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|BeforeClass
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|ClassRule
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|rules
operator|.
name|TemporaryFolder
import|;
end_import

begin_import
import|import
name|org
operator|.
name|xml
operator|.
name|sax
operator|.
name|InputSource
import|;
end_import

begin_import
import|import
name|org
operator|.
name|xml
operator|.
name|sax
operator|.
name|SAXException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|xmlunit
operator|.
name|builder
operator|.
name|DiffBuilder
import|;
end_import

begin_import
import|import
name|org
operator|.
name|xmlunit
operator|.
name|builder
operator|.
name|Input
import|;
end_import

begin_import
import|import
name|org
operator|.
name|xmlunit
operator|.
name|diff
operator|.
name|Diff
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|xml
operator|.
name|transform
operator|.
name|Source
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|nio
operator|.
name|file
operator|.
name|Files
import|;
end_import

begin_import
import|import
name|java
operator|.
name|nio
operator|.
name|file
operator|.
name|Path
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Arrays
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Random
import|;
end_import

begin_import
import|import static
name|java
operator|.
name|nio
operator|.
name|charset
operator|.
name|StandardCharsets
operator|.
name|UTF_8
import|;
end_import

begin_import
import|import static
name|java
operator|.
name|nio
operator|.
name|file
operator|.
name|StandardOpenOption
operator|.
name|CREATE_NEW
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertFalse
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertNotNull
import|;
end_import

begin_comment
comment|/**  * Test expectations to check that the correct entries  * are written to the journal during  * various XML operations.  *  * Actual JUnit test cases are defined in the  * subclass {@link AbstractJournalTest}.  *  * @author Adam Retter<adam@evolvedbinary.com>  */
end_comment

begin_class
specifier|public
class|class
name|JournalXmlTest
extends|extends
name|AbstractJournalTest
block|{
specifier|private
specifier|static
specifier|final
name|int
name|TEXT_PAGE_SIZE
init|=
literal|4032
decl_stmt|;
annotation|@
name|ClassRule
specifier|public
specifier|static
specifier|final
name|TemporaryFolder
name|temporaryFolder
init|=
operator|new
name|TemporaryFolder
argument_list|()
decl_stmt|;
specifier|private
specifier|static
name|Path
name|testFile1
init|=
literal|null
decl_stmt|;
specifier|private
specifier|static
name|Path
name|testFile2
init|=
literal|null
decl_stmt|;
annotation|@
name|BeforeClass
specifier|public
specifier|static
name|void
name|storeTempXmlDocs
parameter_list|()
throws|throws
name|IOException
block|{
name|testFile1
operator|=
name|temporaryFolder
operator|.
name|getRoot
argument_list|()
operator|.
name|toPath
argument_list|()
operator|.
name|resolve
argument_list|(
literal|"JournalXmlTest.doc1.xml"
argument_list|)
expr_stmt|;
name|Files
operator|.
name|write
argument_list|(
name|testFile1
argument_list|,
name|Arrays
operator|.
name|asList
argument_list|(
literal|"<element1>text1</element1>"
argument_list|)
argument_list|,
name|CREATE_NEW
argument_list|)
expr_stmt|;
name|testFile2
operator|=
name|temporaryFolder
operator|.
name|getRoot
argument_list|()
operator|.
name|toPath
argument_list|()
operator|.
name|resolve
argument_list|(
literal|"JournalXmlTest.doc2.xml"
argument_list|)
expr_stmt|;
name|Files
operator|.
name|write
argument_list|(
name|testFile2
argument_list|,
name|Arrays
operator|.
name|asList
argument_list|(
literal|"<element2>text2</element2>"
argument_list|)
argument_list|,
name|CREATE_NEW
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|largeJournalEntry_nonCorrupt
parameter_list|()
throws|throws
name|IllegalAccessException
throws|,
name|EXistException
throws|,
name|NoSuchFieldException
throws|,
name|LockException
throws|,
name|SAXException
throws|,
name|PermissionDeniedException
throws|,
name|IOException
throws|,
name|InterruptedException
block|{
name|checkpointJournalAndSwitchFile
argument_list|()
expr_stmt|;
comment|// generate a string filled with random a-z characters which is larger than the journal buffer
specifier|final
name|byte
index|[]
name|buf
init|=
operator|new
name|byte
index|[
name|Journal
operator|.
name|BUFFER_SIZE
operator|*
literal|3
index|]
decl_stmt|;
comment|// 3 * the journal buffer size
specifier|final
name|Random
name|random
init|=
operator|new
name|Random
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|buf
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
specifier|final
name|byte
name|singleByteChar
init|=
operator|(
name|byte
operator|)
operator|(
literal|'a'
operator|+
name|random
operator|.
name|nextInt
argument_list|(
literal|'z'
operator|-
literal|'a'
operator|-
literal|1
argument_list|)
operator|)
decl_stmt|;
name|buf
index|[
name|i
index|]
operator|=
name|singleByteChar
expr_stmt|;
block|}
specifier|final
name|String
name|largeText
init|=
operator|new
name|String
argument_list|(
name|buf
argument_list|,
name|UTF_8
argument_list|)
decl_stmt|;
specifier|final
name|String
name|xml
init|=
literal|"<large-text>"
operator|+
name|largeText
operator|+
literal|"</large-text>"
decl_stmt|;
specifier|final
name|InputSource
name|source
init|=
operator|new
name|StringInputSource
argument_list|(
name|xml
argument_list|)
decl_stmt|;
name|source
operator|.
name|setEncoding
argument_list|(
literal|"UTF-8"
argument_list|)
expr_stmt|;
name|BrokerPool
operator|.
name|FORCE_CORRUPTION
operator|=
literal|false
expr_stmt|;
specifier|final
name|Tuple2
argument_list|<
name|Long
argument_list|,
name|String
argument_list|>
name|stored
init|=
name|store
argument_list|(
name|COMMIT
argument_list|,
name|source
argument_list|,
literal|"large-non-corrupt.xml"
argument_list|)
decl_stmt|;
name|flushJournal
argument_list|()
expr_stmt|;
comment|// shutdown the broker pool (without destroying the data dir)
name|existEmbeddedServer
operator|.
name|getBrokerPool
argument_list|()
operator|.
name|shutdown
argument_list|()
expr_stmt|;
comment|// check journal entries written for store
name|assertPartialOrdered
argument_list|(
name|store_expected
argument_list|(
name|stored
operator|.
name|_1
argument_list|,
name|stored
operator|.
name|_2
argument_list|,
literal|0
argument_list|,
name|largeText
argument_list|)
argument_list|,
name|readLatestJournalEntries
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|largeJournalEntry_corrupt
parameter_list|()
throws|throws
name|IllegalAccessException
throws|,
name|EXistException
throws|,
name|NoSuchFieldException
throws|,
name|LockException
throws|,
name|SAXException
throws|,
name|PermissionDeniedException
throws|,
name|IOException
throws|,
name|InterruptedException
block|{
name|checkpointJournalAndSwitchFile
argument_list|()
expr_stmt|;
comment|// generate a string filled with random a-z characters which is larger than the journal buffer
specifier|final
name|byte
index|[]
name|buf
init|=
operator|new
name|byte
index|[
name|Journal
operator|.
name|BUFFER_SIZE
operator|*
literal|3
index|]
decl_stmt|;
comment|// 3 * the journal buffer size
specifier|final
name|Random
name|random
init|=
operator|new
name|Random
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|buf
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
specifier|final
name|byte
name|singleByteChar
init|=
operator|(
name|byte
operator|)
operator|(
literal|'a'
operator|+
name|random
operator|.
name|nextInt
argument_list|(
literal|'z'
operator|-
literal|'a'
operator|-
literal|1
argument_list|)
operator|)
decl_stmt|;
name|buf
index|[
name|i
index|]
operator|=
name|singleByteChar
expr_stmt|;
block|}
specifier|final
name|String
name|largeText
init|=
operator|new
name|String
argument_list|(
name|buf
argument_list|,
name|UTF_8
argument_list|)
decl_stmt|;
specifier|final
name|String
name|xml
init|=
literal|"<large-text>"
operator|+
name|largeText
operator|+
literal|"</large-text>"
decl_stmt|;
specifier|final
name|InputSource
name|source
init|=
operator|new
name|StringInputSource
argument_list|(
name|xml
argument_list|)
decl_stmt|;
name|source
operator|.
name|setEncoding
argument_list|(
literal|"UTF-8"
argument_list|)
expr_stmt|;
name|BrokerPool
operator|.
name|FORCE_CORRUPTION
operator|=
literal|true
expr_stmt|;
specifier|final
name|Tuple2
argument_list|<
name|Long
argument_list|,
name|String
argument_list|>
name|stored
init|=
name|store
argument_list|(
name|COMMIT
argument_list|,
name|source
argument_list|,
literal|"large-non-corrupt.xml"
argument_list|)
decl_stmt|;
name|flushJournal
argument_list|()
expr_stmt|;
comment|// shutdown the broker pool (without destroying the data dir)
name|existEmbeddedServer
operator|.
name|getBrokerPool
argument_list|()
operator|.
name|shutdown
argument_list|()
expr_stmt|;
comment|// reset the corruption flag back to normal
name|BrokerPool
operator|.
name|FORCE_CORRUPTION
operator|=
literal|false
expr_stmt|;
comment|// check journal entries written for store
name|assertPartialOrdered
argument_list|(
name|store_expected
argument_list|(
name|stored
operator|.
name|_1
argument_list|,
name|stored
operator|.
name|_2
argument_list|,
literal|0
argument_list|,
name|largeText
argument_list|)
argument_list|,
name|readLatestJournalEntries
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|protected
name|List
argument_list|<
name|ExpectedLoggable
argument_list|>
name|store_expected
parameter_list|(
specifier|final
name|long
name|storedTxnId
parameter_list|,
specifier|final
name|String
name|storedDbPath
parameter_list|,
specifier|final
name|int
name|offset
parameter_list|)
block|{
return|return
name|store_expected
argument_list|(
name|storedTxnId
argument_list|,
name|storedDbPath
argument_list|,
name|offset
argument_list|,
literal|"text1"
argument_list|)
return|;
block|}
specifier|private
name|List
argument_list|<
name|ExpectedLoggable
argument_list|>
name|store_expected
parameter_list|(
specifier|final
name|long
name|storedTxnId
parameter_list|,
specifier|final
name|String
name|storedDbPath
parameter_list|,
specifier|final
name|int
name|offset
parameter_list|,
specifier|final
name|String
name|text
parameter_list|)
block|{
specifier|final
name|int
name|docId
init|=
name|FIRST_USABLE_DOC_ID
operator|+
name|offset
decl_stmt|;
specifier|final
name|long
name|pageNum
init|=
name|FIRST_USABLE_PAGE
operator|+
name|offset
decl_stmt|;
if|if
condition|(
name|text
operator|.
name|length
argument_list|()
operator|<
name|TEXT_PAGE_SIZE
condition|)
block|{
return|return
name|Arrays
operator|.
name|asList
argument_list|(
name|Start
argument_list|(
name|storedTxnId
argument_list|)
argument_list|,
name|CollectionNextDocId
argument_list|(
name|storedTxnId
argument_list|,
literal|1
argument_list|,
name|docId
argument_list|)
argument_list|,
name|StoreElementNode
argument_list|(
name|storedTxnId
argument_list|,
name|pageNum
argument_list|,
literal|1
argument_list|)
argument_list|,
name|StoreTextNode
argument_list|(
name|storedTxnId
argument_list|,
name|pageNum
argument_list|,
name|text
argument_list|)
argument_list|,
name|CollectionCreateDoc
argument_list|(
name|storedTxnId
argument_list|,
literal|1
argument_list|,
name|docId
argument_list|,
name|storedDbPath
argument_list|)
argument_list|,
name|Commit
argument_list|(
name|storedTxnId
argument_list|)
argument_list|)
return|;
block|}
else|else
block|{
specifier|final
name|int
name|textNodeHeaderLen
init|=
literal|5
decl_stmt|;
name|long
name|textPageNum
init|=
name|pageNum
operator|+
literal|1
decl_stmt|;
specifier|final
name|ExtendedArrayList
argument_list|<
name|ExpectedLoggable
argument_list|>
name|expected
init|=
name|List
argument_list|(
name|Start
argument_list|(
name|storedTxnId
argument_list|)
argument_list|,
name|CollectionNextDocId
argument_list|(
name|storedTxnId
argument_list|,
literal|1
argument_list|,
name|docId
argument_list|)
argument_list|,
name|StoreElementNode
argument_list|(
name|storedTxnId
argument_list|,
name|pageNum
argument_list|,
literal|1
argument_list|)
argument_list|,
comment|// first entry for large text node
name|StartStorePartialTextNode
argument_list|(
name|storedTxnId
argument_list|,
name|textPageNum
operator|++
argument_list|,
operator|new
name|DLN
argument_list|(
literal|"1.1"
argument_list|)
argument_list|,
name|text
operator|.
name|substring
argument_list|(
literal|0
argument_list|,
name|TEXT_PAGE_SIZE
operator|-
name|textNodeHeaderLen
argument_list|)
argument_list|)
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
name|TEXT_PAGE_SIZE
operator|-
name|textNodeHeaderLen
init|;
name|i
operator|<
name|text
operator|.
name|length
argument_list|()
condition|;
name|i
operator|+=
name|TEXT_PAGE_SIZE
control|)
block|{
name|int
name|partialTextEndOffset
init|=
name|i
operator|+
name|TEXT_PAGE_SIZE
decl_stmt|;
if|if
condition|(
name|partialTextEndOffset
operator|>
name|text
operator|.
name|length
argument_list|()
condition|)
block|{
name|partialTextEndOffset
operator|=
name|i
operator|+
operator|(
name|text
operator|.
name|length
argument_list|()
operator|-
name|i
operator|)
expr_stmt|;
block|}
specifier|final
name|String
name|partialText
init|=
name|text
operator|.
name|substring
argument_list|(
name|i
argument_list|,
name|partialTextEndOffset
argument_list|)
decl_stmt|;
name|expected
operator|.
name|add
argument_list|(
name|StorePartialTextNode
argument_list|(
name|storedTxnId
argument_list|,
name|textPageNum
operator|++
argument_list|,
name|partialText
argument_list|)
argument_list|)
expr_stmt|;
block|}
return|return
name|expected
operator|.
name|add
argument_list|(
name|CollectionCreateDoc
argument_list|(
name|storedTxnId
argument_list|,
literal|1
argument_list|,
name|docId
argument_list|,
name|storedDbPath
argument_list|)
argument_list|,
name|Commit
argument_list|(
name|storedTxnId
argument_list|)
argument_list|)
return|;
block|}
block|}
annotation|@
name|Override
specifier|protected
name|List
argument_list|<
name|ExpectedLoggable
argument_list|>
name|storeWithoutCommit_expected
parameter_list|(
specifier|final
name|long
name|storedTxnId
parameter_list|,
specifier|final
name|String
name|storedDbPath
parameter_list|)
block|{
specifier|final
name|int
name|docId
init|=
name|FIRST_USABLE_DOC_ID
operator|+
literal|0
decl_stmt|;
specifier|final
name|long
name|pageNum
init|=
name|FIRST_USABLE_PAGE
operator|+
literal|0
decl_stmt|;
return|return
name|Arrays
operator|.
name|asList
argument_list|(
name|Start
argument_list|(
name|storedTxnId
argument_list|)
argument_list|,
name|CollectionNextDocId
argument_list|(
name|storedTxnId
argument_list|,
literal|1
argument_list|,
name|docId
argument_list|)
argument_list|,
name|StoreElementNode
argument_list|(
name|storedTxnId
argument_list|,
name|pageNum
argument_list|,
literal|1
argument_list|)
argument_list|,
name|StoreTextNode
argument_list|(
name|storedTxnId
argument_list|,
name|pageNum
argument_list|,
literal|"text1"
argument_list|)
argument_list|,
name|CollectionCreateDoc
argument_list|(
name|storedTxnId
argument_list|,
literal|1
argument_list|,
name|docId
argument_list|,
name|storedDbPath
argument_list|)
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|protected
name|List
argument_list|<
name|ExpectedLoggable
argument_list|>
name|storeThenDelete_expected
parameter_list|(
specifier|final
name|long
name|storedTxnId
parameter_list|,
specifier|final
name|String
name|storedDbPath
parameter_list|,
specifier|final
name|long
name|deletedTxnId
parameter_list|,
specifier|final
name|String
name|deletedDbPath
parameter_list|,
specifier|final
name|int
name|offset
parameter_list|)
block|{
specifier|final
name|int
name|docId
init|=
name|FIRST_USABLE_DOC_ID
operator|+
name|offset
decl_stmt|;
specifier|final
name|long
name|pageNum
init|=
name|FIRST_USABLE_PAGE
operator|+
literal|0
decl_stmt|;
return|return
name|Arrays
operator|.
name|asList
argument_list|(
name|Start
argument_list|(
name|storedTxnId
argument_list|)
argument_list|,
name|CollectionNextDocId
argument_list|(
name|storedTxnId
argument_list|,
literal|1
argument_list|,
name|docId
argument_list|)
argument_list|,
name|StoreElementNode
argument_list|(
name|storedTxnId
argument_list|,
name|pageNum
argument_list|,
literal|1
argument_list|)
argument_list|,
name|StoreTextNode
argument_list|(
name|storedTxnId
argument_list|,
name|pageNum
argument_list|,
literal|"text1"
argument_list|)
argument_list|,
name|CollectionCreateDoc
argument_list|(
name|storedTxnId
argument_list|,
literal|1
argument_list|,
name|docId
argument_list|,
name|storedDbPath
argument_list|)
argument_list|,
name|Commit
argument_list|(
name|storedTxnId
argument_list|)
argument_list|,
name|Start
argument_list|(
name|deletedTxnId
argument_list|)
argument_list|,
name|DeleteElementNode
argument_list|(
name|deletedTxnId
argument_list|,
name|pageNum
argument_list|,
literal|1
argument_list|)
argument_list|,
name|CollectionDeleteDoc
argument_list|(
name|deletedTxnId
argument_list|,
literal|1
argument_list|,
name|docId
argument_list|,
name|deletedDbPath
argument_list|)
argument_list|,
name|Commit
argument_list|(
name|deletedTxnId
argument_list|)
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|protected
name|List
argument_list|<
name|ExpectedLoggable
argument_list|>
name|storeWithoutCommitThenDelete_expected
parameter_list|(
specifier|final
name|long
name|storedTxnId
parameter_list|,
specifier|final
name|String
name|storedDbPath
parameter_list|,
specifier|final
name|long
name|deletedTxnId
parameter_list|,
specifier|final
name|String
name|deletedDbPath
parameter_list|)
block|{
specifier|final
name|int
name|docId
init|=
name|FIRST_USABLE_DOC_ID
operator|+
literal|0
decl_stmt|;
specifier|final
name|long
name|pageNum
init|=
name|FIRST_USABLE_PAGE
operator|+
literal|0
decl_stmt|;
return|return
name|Arrays
operator|.
name|asList
argument_list|(
name|Start
argument_list|(
name|storedTxnId
argument_list|)
argument_list|,
name|CollectionNextDocId
argument_list|(
name|storedTxnId
argument_list|,
literal|1
argument_list|,
name|docId
argument_list|)
argument_list|,
name|StoreElementNode
argument_list|(
name|storedTxnId
argument_list|,
name|pageNum
argument_list|,
literal|1
argument_list|)
argument_list|,
name|StoreTextNode
argument_list|(
name|storedTxnId
argument_list|,
name|pageNum
argument_list|,
literal|"text1"
argument_list|)
argument_list|,
name|CollectionCreateDoc
argument_list|(
name|storedTxnId
argument_list|,
literal|1
argument_list|,
name|docId
argument_list|,
name|storedDbPath
argument_list|)
argument_list|,
name|Start
argument_list|(
name|deletedTxnId
argument_list|)
argument_list|,
name|DeleteElementNode
argument_list|(
name|deletedTxnId
argument_list|,
name|pageNum
argument_list|,
literal|1
argument_list|)
argument_list|,
name|CollectionDeleteDoc
argument_list|(
name|deletedTxnId
argument_list|,
literal|1
argument_list|,
name|docId
argument_list|,
name|deletedDbPath
argument_list|)
argument_list|,
name|Commit
argument_list|(
name|deletedTxnId
argument_list|)
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|protected
name|List
argument_list|<
name|ExpectedLoggable
argument_list|>
name|storeThenDeleteWithoutCommit_expected
parameter_list|(
specifier|final
name|long
name|storedTxnId
parameter_list|,
specifier|final
name|String
name|storedDbPath
parameter_list|,
specifier|final
name|long
name|deletedTxnId
parameter_list|,
specifier|final
name|String
name|deletedDbPath
parameter_list|,
specifier|final
name|int
name|offset
parameter_list|)
block|{
specifier|final
name|int
name|docId
init|=
name|FIRST_USABLE_DOC_ID
operator|+
name|offset
decl_stmt|;
specifier|final
name|long
name|pageNum
init|=
name|FIRST_USABLE_PAGE
operator|+
name|offset
decl_stmt|;
return|return
name|Arrays
operator|.
name|asList
argument_list|(
name|Start
argument_list|(
name|storedTxnId
argument_list|)
argument_list|,
name|CollectionNextDocId
argument_list|(
name|storedTxnId
argument_list|,
literal|1
argument_list|,
name|docId
argument_list|)
argument_list|,
name|StoreElementNode
argument_list|(
name|storedTxnId
argument_list|,
name|pageNum
argument_list|,
literal|1
argument_list|)
argument_list|,
name|StoreTextNode
argument_list|(
name|storedTxnId
argument_list|,
name|pageNum
argument_list|,
literal|"text1"
argument_list|)
argument_list|,
name|CollectionCreateDoc
argument_list|(
name|storedTxnId
argument_list|,
literal|1
argument_list|,
name|docId
argument_list|,
name|storedDbPath
argument_list|)
argument_list|,
name|Commit
argument_list|(
name|storedTxnId
argument_list|)
argument_list|,
name|Start
argument_list|(
name|deletedTxnId
argument_list|)
argument_list|,
name|DeleteElementNode
argument_list|(
name|deletedTxnId
argument_list|,
name|pageNum
argument_list|,
literal|1
argument_list|)
argument_list|,
name|CollectionDeleteDoc
argument_list|(
name|deletedTxnId
argument_list|,
literal|1
argument_list|,
name|docId
argument_list|,
name|deletedDbPath
argument_list|)
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|protected
name|List
argument_list|<
name|ExpectedLoggable
argument_list|>
name|storeWithoutCommitThenDeleteWithoutCommit_expected
parameter_list|(
specifier|final
name|long
name|storedTxnId
parameter_list|,
specifier|final
name|String
name|storedDbPath
parameter_list|,
specifier|final
name|long
name|deletedTxnId
parameter_list|,
specifier|final
name|String
name|deletedDbPath
parameter_list|)
block|{
specifier|final
name|int
name|docId
init|=
name|FIRST_USABLE_DOC_ID
operator|+
literal|0
decl_stmt|;
specifier|final
name|long
name|pageNum
init|=
name|FIRST_USABLE_PAGE
operator|+
literal|0
decl_stmt|;
return|return
name|Arrays
operator|.
name|asList
argument_list|(
name|Start
argument_list|(
name|storedTxnId
argument_list|)
argument_list|,
name|CollectionNextDocId
argument_list|(
name|storedTxnId
argument_list|,
literal|1
argument_list|,
name|docId
argument_list|)
argument_list|,
name|StoreElementNode
argument_list|(
name|storedTxnId
argument_list|,
name|pageNum
argument_list|,
literal|1
argument_list|)
argument_list|,
name|StoreTextNode
argument_list|(
name|storedTxnId
argument_list|,
name|pageNum
argument_list|,
literal|"text1"
argument_list|)
argument_list|,
name|CollectionCreateDoc
argument_list|(
name|storedTxnId
argument_list|,
literal|1
argument_list|,
name|docId
argument_list|,
name|storedDbPath
argument_list|)
argument_list|,
name|Start
argument_list|(
name|deletedTxnId
argument_list|)
argument_list|,
name|DeleteElementNode
argument_list|(
name|deletedTxnId
argument_list|,
name|pageNum
argument_list|,
literal|1
argument_list|)
argument_list|,
name|CollectionDeleteDoc
argument_list|(
name|deletedTxnId
argument_list|,
literal|1
argument_list|,
name|docId
argument_list|,
name|deletedDbPath
argument_list|)
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|protected
name|List
argument_list|<
name|ExpectedLoggable
argument_list|>
name|delete_expected
parameter_list|(
specifier|final
name|long
name|deletedTxnId
parameter_list|,
specifier|final
name|String
name|deletedDbPath
parameter_list|,
specifier|final
name|int
name|offset
parameter_list|)
block|{
specifier|final
name|int
name|docId
init|=
name|FIRST_USABLE_DOC_ID
operator|+
name|offset
decl_stmt|;
specifier|final
name|int
name|pageNum
init|=
name|FIRST_USABLE_PAGE
operator|+
name|offset
decl_stmt|;
return|return
name|Arrays
operator|.
name|asList
argument_list|(
name|Start
argument_list|(
name|deletedTxnId
argument_list|)
argument_list|,
name|DeleteElementNode
argument_list|(
name|deletedTxnId
argument_list|,
name|pageNum
argument_list|,
literal|1
argument_list|)
argument_list|,
name|CollectionDeleteDoc
argument_list|(
name|deletedTxnId
argument_list|,
literal|1
argument_list|,
name|docId
argument_list|,
name|deletedDbPath
argument_list|)
argument_list|,
name|Commit
argument_list|(
name|deletedTxnId
argument_list|)
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|protected
name|List
argument_list|<
name|ExpectedLoggable
argument_list|>
name|deleteWithoutCommit_expected
parameter_list|(
specifier|final
name|long
name|deletedTxnId
parameter_list|,
specifier|final
name|String
name|deletedDbPath
parameter_list|,
specifier|final
name|int
name|offset
parameter_list|)
block|{
specifier|final
name|int
name|docId
init|=
name|FIRST_USABLE_DOC_ID
operator|+
literal|0
decl_stmt|;
specifier|final
name|int
name|pageNum
init|=
name|FIRST_USABLE_PAGE
operator|+
literal|0
decl_stmt|;
return|return
name|Arrays
operator|.
name|asList
argument_list|(
name|Start
argument_list|(
name|deletedTxnId
argument_list|)
argument_list|,
name|DeleteElementNode
argument_list|(
name|deletedTxnId
argument_list|,
name|pageNum
argument_list|,
literal|1
argument_list|)
argument_list|,
name|CollectionDeleteDoc
argument_list|(
name|deletedTxnId
argument_list|,
literal|1
argument_list|,
name|docId
argument_list|,
name|deletedDbPath
argument_list|)
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|protected
name|List
argument_list|<
name|ExpectedLoggable
argument_list|>
name|replace_expected
parameter_list|(
specifier|final
name|long
name|replacedTxnId
parameter_list|,
specifier|final
name|String
name|replacedDbPath
parameter_list|,
specifier|final
name|int
name|offset
parameter_list|,
specifier|final
name|boolean
name|overridesStore
parameter_list|)
block|{
specifier|final
name|int
name|docId
init|=
name|FIRST_USABLE_DOC_ID
operator|+
literal|0
decl_stmt|;
specifier|final
name|int
name|pageNum
init|=
name|FIRST_USABLE_PAGE
operator|+
literal|0
decl_stmt|;
specifier|final
name|ExtendedArrayList
argument_list|<
name|ExpectedLoggable
argument_list|>
name|expected
init|=
name|List
argument_list|(
name|Start
argument_list|(
name|replacedTxnId
argument_list|)
argument_list|,
name|DeleteElementNode
argument_list|(
name|replacedTxnId
argument_list|,
name|pageNum
argument_list|,
literal|1
argument_list|)
argument_list|,
name|CollectionDeleteDoc
argument_list|(
name|replacedTxnId
argument_list|,
literal|1
argument_list|,
name|docId
argument_list|,
name|replacedDbPath
argument_list|)
argument_list|,
name|StoreElementNode
argument_list|(
name|replacedTxnId
argument_list|,
name|pageNum
argument_list|,
literal|1
argument_list|)
argument_list|)
decl_stmt|;
if|if
condition|(
name|overridesStore
condition|)
block|{
name|expected
operator|.
name|add
argument_list|(
name|StoreTextNode
argument_list|(
name|replacedTxnId
argument_list|,
name|pageNum
argument_list|,
literal|"text1"
argument_list|)
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|expected
operator|.
name|add
argument_list|(
name|StoreTextNode
argument_list|(
name|replacedTxnId
argument_list|,
name|pageNum
argument_list|,
literal|"text2"
argument_list|)
argument_list|)
expr_stmt|;
block|}
return|return
name|expected
operator|.
name|add
argument_list|(
name|CollectionCreateDoc
argument_list|(
name|replacedTxnId
argument_list|,
literal|1
argument_list|,
name|docId
argument_list|,
name|replacedDbPath
argument_list|)
argument_list|,
name|Commit
argument_list|(
name|replacedTxnId
argument_list|)
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|protected
name|List
argument_list|<
name|ExpectedLoggable
argument_list|>
name|replaceWithoutCommit_expected
parameter_list|(
specifier|final
name|long
name|replacedTxnId
parameter_list|,
specifier|final
name|String
name|replacedDbPath
parameter_list|,
specifier|final
name|int
name|offset
parameter_list|)
block|{
specifier|final
name|int
name|docId
init|=
name|FIRST_USABLE_DOC_ID
operator|+
literal|0
decl_stmt|;
specifier|final
name|int
name|pageNum
init|=
name|FIRST_USABLE_PAGE
operator|+
literal|0
decl_stmt|;
return|return
name|Arrays
operator|.
name|asList
argument_list|(
name|Start
argument_list|(
name|replacedTxnId
argument_list|)
argument_list|,
name|DeleteElementNode
argument_list|(
name|replacedTxnId
argument_list|,
name|pageNum
argument_list|,
literal|1
argument_list|)
argument_list|,
name|CollectionDeleteDoc
argument_list|(
name|replacedTxnId
argument_list|,
literal|1
argument_list|,
name|docId
argument_list|,
name|replacedDbPath
argument_list|)
argument_list|,
name|StoreElementNode
argument_list|(
name|replacedTxnId
argument_list|,
name|pageNum
argument_list|,
literal|1
argument_list|)
argument_list|,
name|StoreTextNode
argument_list|(
name|replacedTxnId
argument_list|,
name|pageNum
argument_list|,
literal|"text2"
argument_list|)
argument_list|,
name|CollectionCreateDoc
argument_list|(
name|replacedTxnId
argument_list|,
literal|1
argument_list|,
name|docId
argument_list|,
name|replacedDbPath
argument_list|)
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|protected
name|List
argument_list|<
name|ExpectedLoggable
argument_list|>
name|replaceThenDelete_expected
parameter_list|(
specifier|final
name|long
name|replacedTxnId
parameter_list|,
specifier|final
name|String
name|replacedDbPath
parameter_list|,
specifier|final
name|long
name|deletedTxnId
parameter_list|,
specifier|final
name|String
name|deletedDbPath
parameter_list|,
name|int
name|offset
parameter_list|)
block|{
if|if
condition|(
name|offset
operator|>=
literal|2
condition|)
block|{
name|offset
operator|=
name|offset
operator|/
literal|2
expr_stmt|;
block|}
specifier|final
name|int
name|docId
init|=
name|FIRST_USABLE_DOC_ID
operator|+
name|offset
decl_stmt|;
specifier|final
name|int
name|pageNum
init|=
name|FIRST_USABLE_PAGE
operator|+
literal|0
decl_stmt|;
return|return
name|Arrays
operator|.
name|asList
argument_list|(
name|Start
argument_list|(
name|replacedTxnId
argument_list|)
argument_list|,
name|DeleteElementNode
argument_list|(
name|replacedTxnId
argument_list|,
name|pageNum
argument_list|,
literal|1
argument_list|)
argument_list|,
name|CollectionDeleteDoc
argument_list|(
name|replacedTxnId
argument_list|,
literal|1
argument_list|,
name|docId
argument_list|,
name|replacedDbPath
argument_list|)
argument_list|,
name|StoreElementNode
argument_list|(
name|replacedTxnId
argument_list|,
name|pageNum
argument_list|,
literal|1
argument_list|)
argument_list|,
name|StoreTextNode
argument_list|(
name|replacedTxnId
argument_list|,
name|pageNum
argument_list|,
literal|"text2"
argument_list|)
argument_list|,
name|CollectionCreateDoc
argument_list|(
name|replacedTxnId
argument_list|,
literal|1
argument_list|,
name|docId
argument_list|,
name|replacedDbPath
argument_list|)
argument_list|,
name|Commit
argument_list|(
name|replacedTxnId
argument_list|)
argument_list|,
name|Start
argument_list|(
name|deletedTxnId
argument_list|)
argument_list|,
name|DeleteElementNode
argument_list|(
name|deletedTxnId
argument_list|,
name|pageNum
argument_list|,
literal|1
argument_list|)
argument_list|,
name|CollectionDeleteDoc
argument_list|(
name|deletedTxnId
argument_list|,
literal|1
argument_list|,
name|docId
argument_list|,
name|deletedDbPath
argument_list|)
argument_list|,
name|Commit
argument_list|(
name|deletedTxnId
argument_list|)
argument_list|)
return|;
block|}
comment|//NOTE special case for XML tests of replaceThenDelete_isRepeatable
annotation|@
name|Override
specifier|protected
name|List
argument_list|<
name|ExpectedLoggable
argument_list|>
name|store_expected_for_replaceThenDelete
parameter_list|(
specifier|final
name|long
name|storedTxnId
parameter_list|,
specifier|final
name|String
name|storedDbPath
parameter_list|,
name|int
name|offset
parameter_list|)
block|{
if|if
condition|(
name|offset
operator|>=
literal|2
condition|)
block|{
name|offset
operator|=
name|offset
operator|/
literal|2
expr_stmt|;
block|}
specifier|final
name|int
name|docId
init|=
name|FIRST_USABLE_DOC_ID
operator|+
name|offset
decl_stmt|;
specifier|final
name|long
name|pageNum
init|=
name|FIRST_USABLE_PAGE
operator|+
literal|0
decl_stmt|;
return|return
name|Arrays
operator|.
name|asList
argument_list|(
name|Start
argument_list|(
name|storedTxnId
argument_list|)
argument_list|,
name|CollectionNextDocId
argument_list|(
name|storedTxnId
argument_list|,
literal|1
argument_list|,
name|docId
argument_list|)
argument_list|,
name|StoreElementNode
argument_list|(
name|storedTxnId
argument_list|,
name|pageNum
argument_list|,
literal|1
argument_list|)
argument_list|,
name|StoreTextNode
argument_list|(
name|storedTxnId
argument_list|,
name|pageNum
argument_list|,
literal|"text1"
argument_list|)
argument_list|,
name|CollectionCreateDoc
argument_list|(
name|storedTxnId
argument_list|,
literal|1
argument_list|,
name|docId
argument_list|,
name|storedDbPath
argument_list|)
argument_list|,
name|Commit
argument_list|(
name|storedTxnId
argument_list|)
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|protected
name|List
argument_list|<
name|ExpectedLoggable
argument_list|>
name|replaceWithoutCommitThenDelete_expected
parameter_list|(
specifier|final
name|long
name|replacedTxnId
parameter_list|,
specifier|final
name|String
name|replacedDbPath
parameter_list|,
specifier|final
name|long
name|deletedTxnId
parameter_list|,
specifier|final
name|String
name|deletedDbPath
parameter_list|,
specifier|final
name|int
name|offset
parameter_list|)
block|{
specifier|final
name|int
name|docId
init|=
name|FIRST_USABLE_DOC_ID
operator|+
literal|0
decl_stmt|;
specifier|final
name|int
name|pageNum
init|=
name|FIRST_USABLE_PAGE
operator|+
literal|0
decl_stmt|;
return|return
name|Arrays
operator|.
name|asList
argument_list|(
name|Start
argument_list|(
name|replacedTxnId
argument_list|)
argument_list|,
name|DeleteElementNode
argument_list|(
name|replacedTxnId
argument_list|,
name|pageNum
argument_list|,
literal|1
argument_list|)
argument_list|,
name|CollectionDeleteDoc
argument_list|(
name|replacedTxnId
argument_list|,
literal|1
argument_list|,
name|docId
argument_list|,
name|replacedDbPath
argument_list|)
argument_list|,
name|StoreElementNode
argument_list|(
name|replacedTxnId
argument_list|,
name|pageNum
argument_list|,
literal|1
argument_list|)
argument_list|,
name|StoreTextNode
argument_list|(
name|replacedTxnId
argument_list|,
name|pageNum
argument_list|,
literal|"text2"
argument_list|)
argument_list|,
name|CollectionCreateDoc
argument_list|(
name|replacedTxnId
argument_list|,
literal|1
argument_list|,
name|docId
argument_list|,
name|replacedDbPath
argument_list|)
argument_list|,
name|Start
argument_list|(
name|deletedTxnId
argument_list|)
argument_list|,
name|DeleteElementNode
argument_list|(
name|deletedTxnId
argument_list|,
name|pageNum
argument_list|,
literal|1
argument_list|)
argument_list|,
name|CollectionDeleteDoc
argument_list|(
name|deletedTxnId
argument_list|,
literal|1
argument_list|,
name|docId
argument_list|,
name|deletedDbPath
argument_list|)
argument_list|,
name|Commit
argument_list|(
name|deletedTxnId
argument_list|)
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|protected
name|List
argument_list|<
name|ExpectedLoggable
argument_list|>
name|replaceThenDeleteWithoutCommit_expected
parameter_list|(
specifier|final
name|long
name|replacedTxnId
parameter_list|,
specifier|final
name|String
name|replacedDbPath
parameter_list|,
specifier|final
name|long
name|deletedTxnId
parameter_list|,
specifier|final
name|String
name|deletedDbPath
parameter_list|,
specifier|final
name|int
name|offset
parameter_list|,
specifier|final
name|boolean
name|overridesStore
parameter_list|)
block|{
specifier|final
name|int
name|docId
init|=
name|FIRST_USABLE_DOC_ID
operator|+
literal|0
decl_stmt|;
specifier|final
name|int
name|pageNum
init|=
name|FIRST_USABLE_PAGE
operator|+
literal|0
decl_stmt|;
specifier|final
name|ExtendedArrayList
argument_list|<
name|ExpectedLoggable
argument_list|>
name|expected
init|=
name|List
argument_list|(
name|Start
argument_list|(
name|replacedTxnId
argument_list|)
argument_list|,
name|DeleteElementNode
argument_list|(
name|replacedTxnId
argument_list|,
name|pageNum
argument_list|,
literal|1
argument_list|)
argument_list|,
name|CollectionDeleteDoc
argument_list|(
name|replacedTxnId
argument_list|,
literal|1
argument_list|,
name|docId
argument_list|,
name|replacedDbPath
argument_list|)
argument_list|,
name|StoreElementNode
argument_list|(
name|replacedTxnId
argument_list|,
name|pageNum
argument_list|,
literal|1
argument_list|)
argument_list|)
decl_stmt|;
if|if
condition|(
name|overridesStore
condition|)
block|{
name|expected
operator|.
name|add
argument_list|(
name|StoreTextNode
argument_list|(
name|replacedTxnId
argument_list|,
name|pageNum
argument_list|,
literal|"text1"
argument_list|)
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|expected
operator|.
name|add
argument_list|(
name|StoreTextNode
argument_list|(
name|replacedTxnId
argument_list|,
name|pageNum
argument_list|,
literal|"text2"
argument_list|)
argument_list|)
expr_stmt|;
block|}
return|return
name|expected
operator|.
name|add
argument_list|(
name|CollectionCreateDoc
argument_list|(
name|replacedTxnId
argument_list|,
literal|1
argument_list|,
name|docId
argument_list|,
name|replacedDbPath
argument_list|)
argument_list|,
name|Commit
argument_list|(
name|replacedTxnId
argument_list|)
argument_list|)
operator|.
name|add
argument_list|(
name|Start
argument_list|(
name|deletedTxnId
argument_list|)
argument_list|,
name|DeleteElementNode
argument_list|(
name|deletedTxnId
argument_list|,
name|pageNum
argument_list|,
literal|1
argument_list|)
argument_list|,
name|CollectionDeleteDoc
argument_list|(
name|deletedTxnId
argument_list|,
literal|1
argument_list|,
name|docId
argument_list|,
name|deletedDbPath
argument_list|)
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|protected
name|List
argument_list|<
name|ExpectedLoggable
argument_list|>
name|replaceWithoutCommitThenDeleteWithoutCommit_expected
parameter_list|(
specifier|final
name|long
name|replacedTxnId
parameter_list|,
specifier|final
name|String
name|replacedDbPath
parameter_list|,
specifier|final
name|long
name|deletedTxnId
parameter_list|,
specifier|final
name|String
name|deletedDbPath
parameter_list|,
specifier|final
name|int
name|offset
parameter_list|)
block|{
specifier|final
name|int
name|docId
init|=
name|FIRST_USABLE_DOC_ID
operator|+
literal|0
decl_stmt|;
specifier|final
name|int
name|pageNum
init|=
name|FIRST_USABLE_PAGE
operator|+
literal|0
decl_stmt|;
return|return
name|Arrays
operator|.
name|asList
argument_list|(
name|Start
argument_list|(
name|replacedTxnId
argument_list|)
argument_list|,
name|DeleteElementNode
argument_list|(
name|replacedTxnId
argument_list|,
name|pageNum
argument_list|,
literal|1
argument_list|)
argument_list|,
name|CollectionDeleteDoc
argument_list|(
name|replacedTxnId
argument_list|,
literal|1
argument_list|,
name|docId
argument_list|,
name|replacedDbPath
argument_list|)
argument_list|,
name|StoreElementNode
argument_list|(
name|replacedTxnId
argument_list|,
name|pageNum
argument_list|,
literal|1
argument_list|)
argument_list|,
name|StoreTextNode
argument_list|(
name|replacedTxnId
argument_list|,
name|pageNum
argument_list|,
literal|"text2"
argument_list|)
argument_list|,
name|CollectionCreateDoc
argument_list|(
name|replacedTxnId
argument_list|,
literal|1
argument_list|,
name|docId
argument_list|,
name|replacedDbPath
argument_list|)
argument_list|,
name|Start
argument_list|(
name|deletedTxnId
argument_list|)
argument_list|,
name|DeleteElementNode
argument_list|(
name|deletedTxnId
argument_list|,
name|pageNum
argument_list|,
literal|1
argument_list|)
argument_list|,
name|CollectionDeleteDoc
argument_list|(
name|deletedTxnId
argument_list|,
literal|1
argument_list|,
name|docId
argument_list|,
name|deletedDbPath
argument_list|)
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|protected
name|Path
name|getTestFile1
parameter_list|()
throws|throws
name|IOException
block|{
return|return
name|testFile1
return|;
block|}
annotation|@
name|Override
specifier|protected
name|Path
name|getTestFile2
parameter_list|()
throws|throws
name|IOException
block|{
return|return
name|testFile2
return|;
block|}
annotation|@
name|Override
specifier|protected
name|XmldbURI
name|storeAndVerify
parameter_list|(
specifier|final
name|DBBroker
name|broker
parameter_list|,
specifier|final
name|Txn
name|transaction
parameter_list|,
specifier|final
name|Collection
name|collection
parameter_list|,
specifier|final
name|InputSource
name|data
parameter_list|,
specifier|final
name|String
name|dbFilename
parameter_list|)
throws|throws
name|EXistException
throws|,
name|PermissionDeniedException
throws|,
name|IOException
throws|,
name|SAXException
throws|,
name|LockException
block|{
specifier|final
name|IndexInfo
name|indexInfo
init|=
name|collection
operator|.
name|validateXMLResource
argument_list|(
name|transaction
argument_list|,
name|broker
argument_list|,
name|XmldbURI
operator|.
name|create
argument_list|(
name|dbFilename
argument_list|)
argument_list|,
name|data
argument_list|)
decl_stmt|;
name|collection
operator|.
name|store
argument_list|(
name|transaction
argument_list|,
name|broker
argument_list|,
name|indexInfo
argument_list|,
name|data
argument_list|)
expr_stmt|;
name|assertNotNull
argument_list|(
name|collection
operator|.
name|getDocument
argument_list|(
name|broker
argument_list|,
name|XmldbURI
operator|.
name|create
argument_list|(
name|dbFilename
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
return|return
name|collection
operator|.
name|getURI
argument_list|()
operator|.
name|append
argument_list|(
name|dbFilename
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|protected
name|void
name|readAndVerify
parameter_list|(
specifier|final
name|DBBroker
name|broker
parameter_list|,
specifier|final
name|DocumentImpl
name|doc
parameter_list|,
specifier|final
name|Path
name|file
parameter_list|,
specifier|final
name|String
name|dbFilename
parameter_list|)
throws|throws
name|IOException
block|{
comment|// check the actual content too!
specifier|final
name|Source
name|expected
init|=
name|Input
operator|.
name|fromFile
argument_list|(
name|file
operator|.
name|toFile
argument_list|()
argument_list|)
operator|.
name|build
argument_list|()
decl_stmt|;
specifier|final
name|Source
name|actual
init|=
name|Input
operator|.
name|fromDocument
argument_list|(
name|doc
argument_list|)
operator|.
name|build
argument_list|()
decl_stmt|;
specifier|final
name|Diff
name|diff
init|=
name|DiffBuilder
operator|.
name|compare
argument_list|(
name|expected
argument_list|)
operator|.
name|withTest
argument_list|(
name|actual
argument_list|)
operator|.
name|checkForSimilar
argument_list|()
operator|.
name|build
argument_list|()
decl_stmt|;
name|assertFalse
argument_list|(
name|diff
operator|.
name|toString
argument_list|()
argument_list|,
name|diff
operator|.
name|hasDifferences
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

