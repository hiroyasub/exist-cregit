begin_unit|revision:1.0.0;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * eXist Open Source Native XML Database  * Copyright (C) 2001-2018 The eXist Project  * http://exist-db.org  *  * This program is free software; you can redistribute it and/or  * modify it under the terms of the GNU Lesser General Public License  * as published by the Free Software Foundation; either version 2  * of the License, or (at your option) any later version.  *  * This program is distributed in the hope that it will be useful,  * but WITHOUT ANY WARRANTY; without even the implied warranty of  * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the  * GNU Lesser General Public License for more details.  *  * You should have received a copy of the GNU Lesser General Public  * License along with this library; if not, write to the Free Software  * Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA  02110-1301  USA  */
end_comment

begin_package
package|package
name|org
operator|.
name|exist
operator|.
name|storage
package|;
end_package

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|EXistException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|collections
operator|.
name|Collection
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|collections
operator|.
name|triggers
operator|.
name|TriggerException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|security
operator|.
name|*
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|security
operator|.
name|SecurityManager
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|security
operator|.
name|internal
operator|.
name|aider
operator|.
name|GroupAider
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|security
operator|.
name|internal
operator|.
name|aider
operator|.
name|UserAider
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|storage
operator|.
name|lock
operator|.
name|Lock
operator|.
name|LockMode
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|storage
operator|.
name|txn
operator|.
name|Txn
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|test
operator|.
name|ExistEmbeddedServer
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|test
operator|.
name|TestConstants
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|util
operator|.
name|LockException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|xmldb
operator|.
name|XmldbURI
import|;
end_import

begin_import
import|import
name|org
operator|.
name|hamcrest
operator|.
name|Matcher
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|*
import|;
end_import

begin_import
import|import
name|org
operator|.
name|xml
operator|.
name|sax
operator|.
name|SAXException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Optional
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|exist
operator|.
name|TestUtils
operator|.
name|ADMIN_DB_PWD
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|exist
operator|.
name|TestUtils
operator|.
name|ADMIN_DB_USER
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|exist
operator|.
name|security
operator|.
name|SecurityManager
operator|.
name|DBA_GROUP
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|exist
operator|.
name|storage
operator|.
name|DBBroker
operator|.
name|PreserveType
operator|.
name|*
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|exist
operator|.
name|test
operator|.
name|TestConstants
operator|.
name|TEST_COLLECTION_URI
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|hamcrest
operator|.
name|Matchers
operator|.
name|*
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|*
import|;
end_import

begin_comment
comment|/**  * Tests to ensure that collection content and attributes  * are correctly copied under various circumstances.  *  * @author Adam Retter<adam@evolvedbinary.com>  */
end_comment

begin_class
specifier|public
class|class
name|CopyCollectionTest
block|{
specifier|private
specifier|static
specifier|final
name|String
name|USER1_NAME
init|=
literal|"user1"
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|String
name|USER1_PWD
init|=
name|USER1_NAME
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|String
name|USER2_NAME
init|=
literal|"user2"
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|String
name|USER2_PWD
init|=
name|USER2_NAME
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|XmldbURI
name|USER1_COL1
init|=
name|XmldbURI
operator|.
name|create
argument_list|(
literal|"u1c1"
argument_list|)
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|XmldbURI
name|USER1_COL2
init|=
name|XmldbURI
operator|.
name|create
argument_list|(
literal|"u1c2"
argument_list|)
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|XmldbURI
name|USER1_NEW_COL
init|=
name|XmldbURI
operator|.
name|create
argument_list|(
literal|"u1cx"
argument_list|)
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|XmldbURI
name|USER2_COL2
init|=
name|XmldbURI
operator|.
name|create
argument_list|(
literal|"u2c2"
argument_list|)
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|XmldbURI
name|USER2_NEW_COL
init|=
name|XmldbURI
operator|.
name|create
argument_list|(
literal|"u2cx"
argument_list|)
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|int
name|USER1_COL1_MODE
init|=
literal|0555
decl_stmt|;
comment|// r-xr-xr-x
specifier|private
specifier|static
specifier|final
name|int
name|USER1_COL2_MODE
init|=
literal|0744
decl_stmt|;
comment|// rwxr--r--
specifier|private
specifier|static
specifier|final
name|int
name|USER2_COL2_MODE
init|=
literal|0744
decl_stmt|;
comment|// rwxr--r--
annotation|@
name|ClassRule
specifier|public
specifier|static
specifier|final
name|ExistEmbeddedServer
name|existWebServer
init|=
operator|new
name|ExistEmbeddedServer
argument_list|(
literal|true
argument_list|,
literal|true
argument_list|)
decl_stmt|;
comment|/**      * As the owner copy {@link #USER1_COL1} from {@link TestConstants#TEST_COLLECTION_URI} to non-existent {@link #USER1_NEW_COL}.      */
annotation|@
name|Test
specifier|public
name|void
name|copyToNonExistentAsSelf
parameter_list|()
throws|throws
name|AuthenticationException
throws|,
name|LockException
throws|,
name|PermissionDeniedException
throws|,
name|EXistException
throws|,
name|IOException
throws|,
name|TriggerException
block|{
specifier|final
name|Subject
name|user1
init|=
name|existWebServer
operator|.
name|getBrokerPool
argument_list|()
operator|.
name|getSecurityManager
argument_list|()
operator|.
name|authenticate
argument_list|(
name|USER1_NAME
argument_list|,
name|USER1_PWD
argument_list|)
decl_stmt|;
name|copyCol
argument_list|(
name|user1
argument_list|,
name|NO_PRESERVE
argument_list|,
name|USER1_COL1
argument_list|,
name|USER1_NEW_COL
argument_list|)
expr_stmt|;
name|checkAttributes
argument_list|(
name|USER1_NEW_COL
argument_list|,
name|USER1_NAME
argument_list|,
name|USER1_NAME
argument_list|,
name|USER1_COL1_MODE
argument_list|,
name|not
argument_list|(
name|getCreated
argument_list|(
name|USER1_COL1
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|/**      * As the owner copy {@link #USER1_COL1} from {@link TestConstants#TEST_COLLECTION_URI} already existing {@link #USER1_COL2}.      */
annotation|@
name|Test
specifier|public
name|void
name|copyToExistentAsSelf
parameter_list|()
throws|throws
name|AuthenticationException
throws|,
name|LockException
throws|,
name|PermissionDeniedException
throws|,
name|EXistException
throws|,
name|IOException
throws|,
name|TriggerException
block|{
specifier|final
name|Subject
name|user1
init|=
name|existWebServer
operator|.
name|getBrokerPool
argument_list|()
operator|.
name|getSecurityManager
argument_list|()
operator|.
name|authenticate
argument_list|(
name|USER1_NAME
argument_list|,
name|USER1_PWD
argument_list|)
decl_stmt|;
name|copyCol
argument_list|(
name|user1
argument_list|,
name|NO_PRESERVE
argument_list|,
name|USER1_COL1
argument_list|,
name|USER1_COL2
argument_list|)
expr_stmt|;
name|checkAttributes
argument_list|(
name|USER1_COL2
argument_list|,
name|USER1_NAME
argument_list|,
name|USER1_NAME
argument_list|,
name|USER1_COL2_MODE
argument_list|,
name|equalTo
argument_list|(
name|getCreated
argument_list|(
name|USER1_COL2
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|/**      * As a DBA copy {@link #USER1_COL1} from {@link TestConstants#TEST_COLLECTION_URI} to non-existent {@link #USER1_NEW_COL}.      */
annotation|@
name|Test
specifier|public
name|void
name|copyToNonExistentAsDBA
parameter_list|()
throws|throws
name|AuthenticationException
throws|,
name|LockException
throws|,
name|PermissionDeniedException
throws|,
name|EXistException
throws|,
name|IOException
throws|,
name|TriggerException
block|{
specifier|final
name|Subject
name|adminUser
init|=
name|existWebServer
operator|.
name|getBrokerPool
argument_list|()
operator|.
name|getSecurityManager
argument_list|()
operator|.
name|authenticate
argument_list|(
name|ADMIN_DB_USER
argument_list|,
name|ADMIN_DB_PWD
argument_list|)
decl_stmt|;
name|copyCol
argument_list|(
name|adminUser
argument_list|,
name|NO_PRESERVE
argument_list|,
name|USER1_COL1
argument_list|,
name|USER1_NEW_COL
argument_list|)
expr_stmt|;
name|checkAttributes
argument_list|(
name|USER1_NEW_COL
argument_list|,
name|ADMIN_DB_USER
argument_list|,
name|DBA_GROUP
argument_list|,
name|USER1_COL1_MODE
argument_list|,
name|not
argument_list|(
name|getCreated
argument_list|(
name|USER1_COL1
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|/**      * As a DBA copy {@link #USER1_COL1} from {@link TestConstants#TEST_COLLECTION_URI} already existing {@link #USER1_COL2}.      */
annotation|@
name|Test
specifier|public
name|void
name|copyToExistentAsDBA
parameter_list|()
throws|throws
name|AuthenticationException
throws|,
name|LockException
throws|,
name|PermissionDeniedException
throws|,
name|EXistException
throws|,
name|IOException
throws|,
name|TriggerException
block|{
specifier|final
name|Subject
name|adminUser
init|=
name|existWebServer
operator|.
name|getBrokerPool
argument_list|()
operator|.
name|getSecurityManager
argument_list|()
operator|.
name|authenticate
argument_list|(
name|ADMIN_DB_USER
argument_list|,
name|ADMIN_DB_PWD
argument_list|)
decl_stmt|;
name|copyCol
argument_list|(
name|adminUser
argument_list|,
name|NO_PRESERVE
argument_list|,
name|USER1_COL1
argument_list|,
name|USER1_COL2
argument_list|)
expr_stmt|;
name|checkAttributes
argument_list|(
name|USER1_COL2
argument_list|,
name|USER1_NAME
argument_list|,
name|USER1_NAME
argument_list|,
name|USER1_COL2_MODE
argument_list|,
name|equalTo
argument_list|(
name|getCreated
argument_list|(
name|USER1_COL2
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|/**      * As some other (non-owner) user copy {@link #USER1_COL1} from {@link TestConstants#TEST_COLLECTION_URI} to non-existent {@link #USER2_NEW_COL}.      */
annotation|@
name|Test
specifier|public
name|void
name|copyToNonExistentAsOther
parameter_list|()
throws|throws
name|AuthenticationException
throws|,
name|LockException
throws|,
name|PermissionDeniedException
throws|,
name|EXistException
throws|,
name|IOException
throws|,
name|TriggerException
block|{
specifier|final
name|Subject
name|user2
init|=
name|existWebServer
operator|.
name|getBrokerPool
argument_list|()
operator|.
name|getSecurityManager
argument_list|()
operator|.
name|authenticate
argument_list|(
name|USER2_NAME
argument_list|,
name|USER2_PWD
argument_list|)
decl_stmt|;
name|copyCol
argument_list|(
name|user2
argument_list|,
name|NO_PRESERVE
argument_list|,
name|USER1_COL1
argument_list|,
name|USER2_NEW_COL
argument_list|)
expr_stmt|;
name|checkAttributes
argument_list|(
name|USER2_NEW_COL
argument_list|,
name|USER2_NAME
argument_list|,
name|USER2_NAME
argument_list|,
name|USER1_COL1_MODE
argument_list|,
name|not
argument_list|(
name|getCreated
argument_list|(
name|USER1_COL1
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|/**      * As some other (non-owner) user copy {@link #USER1_COL1} from {@link TestConstants#TEST_COLLECTION_URI} already existing {@link #USER2_COL2}.      */
annotation|@
name|Test
specifier|public
name|void
name|copyToExistentAsOther
parameter_list|()
throws|throws
name|AuthenticationException
throws|,
name|LockException
throws|,
name|PermissionDeniedException
throws|,
name|EXistException
throws|,
name|IOException
throws|,
name|TriggerException
block|{
specifier|final
name|Subject
name|user2
init|=
name|existWebServer
operator|.
name|getBrokerPool
argument_list|()
operator|.
name|getSecurityManager
argument_list|()
operator|.
name|authenticate
argument_list|(
name|USER2_NAME
argument_list|,
name|USER2_PWD
argument_list|)
decl_stmt|;
name|copyCol
argument_list|(
name|user2
argument_list|,
name|NO_PRESERVE
argument_list|,
name|USER1_COL1
argument_list|,
name|USER2_COL2
argument_list|)
expr_stmt|;
name|checkAttributes
argument_list|(
name|USER2_COL2
argument_list|,
name|USER2_NAME
argument_list|,
name|USER2_NAME
argument_list|,
name|USER2_COL2_MODE
argument_list|,
name|equalTo
argument_list|(
name|getCreated
argument_list|(
name|USER2_COL2
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|/**      * Whilst preserving attributes,      * as the owner copy {@link #USER1_COL1} from {@link TestConstants#TEST_COLLECTION_URI} to non-existent {@link #USER1_NEW_COL}.      */
annotation|@
name|Test
specifier|public
name|void
name|copyPreserveToNonExistentAsSelf
parameter_list|()
throws|throws
name|AuthenticationException
throws|,
name|LockException
throws|,
name|PermissionDeniedException
throws|,
name|EXistException
throws|,
name|IOException
throws|,
name|TriggerException
block|{
specifier|final
name|Subject
name|user1
init|=
name|existWebServer
operator|.
name|getBrokerPool
argument_list|()
operator|.
name|getSecurityManager
argument_list|()
operator|.
name|authenticate
argument_list|(
name|USER1_NAME
argument_list|,
name|USER1_PWD
argument_list|)
decl_stmt|;
empty_stmt|;
name|copyCol
argument_list|(
name|user1
argument_list|,
name|PRESERVE
argument_list|,
name|USER1_COL1
argument_list|,
name|USER1_NEW_COL
argument_list|)
expr_stmt|;
name|checkAttributes
argument_list|(
name|USER1_NEW_COL
argument_list|,
name|USER1_NAME
argument_list|,
name|USER1_NAME
argument_list|,
name|USER1_COL1_MODE
argument_list|,
name|equalTo
argument_list|(
name|getCreated
argument_list|(
name|USER1_COL1
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|/**      * Whilst preserving attributes,      * as the owner copy {@link #USER1_COL1} from {@link TestConstants#TEST_COLLECTION_URI} already existing {@link #USER1_COL2}.      */
annotation|@
name|Test
specifier|public
name|void
name|copyPreserveToExistentAsSelf
parameter_list|()
throws|throws
name|AuthenticationException
throws|,
name|LockException
throws|,
name|PermissionDeniedException
throws|,
name|EXistException
throws|,
name|IOException
throws|,
name|TriggerException
block|{
specifier|final
name|Subject
name|user1
init|=
name|existWebServer
operator|.
name|getBrokerPool
argument_list|()
operator|.
name|getSecurityManager
argument_list|()
operator|.
name|authenticate
argument_list|(
name|USER1_NAME
argument_list|,
name|USER1_PWD
argument_list|)
decl_stmt|;
specifier|final
name|long
name|originalCol2Created
init|=
name|getCreated
argument_list|(
name|USER1_COL2
argument_list|)
decl_stmt|;
name|copyCol
argument_list|(
name|user1
argument_list|,
name|PRESERVE
argument_list|,
name|USER1_COL1
argument_list|,
name|USER1_COL2
argument_list|)
expr_stmt|;
name|checkAttributes
argument_list|(
name|USER1_COL2
argument_list|,
name|USER1_NAME
argument_list|,
name|USER1_NAME
argument_list|,
name|USER1_COL1_MODE
argument_list|,
name|equalTo
argument_list|(
name|originalCol2Created
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|/**      * Whilst preserving attributes,      * as a DBA copy {@link #USER1_COL1} from {@link TestConstants#TEST_COLLECTION_URI} to non-existent {@link #USER1_NEW_COL}.      */
annotation|@
name|Test
specifier|public
name|void
name|copyPreserveToNonExistentAsDBA
parameter_list|()
throws|throws
name|AuthenticationException
throws|,
name|LockException
throws|,
name|PermissionDeniedException
throws|,
name|EXistException
throws|,
name|IOException
throws|,
name|TriggerException
block|{
specifier|final
name|Subject
name|adminUser
init|=
name|existWebServer
operator|.
name|getBrokerPool
argument_list|()
operator|.
name|getSecurityManager
argument_list|()
operator|.
name|authenticate
argument_list|(
name|ADMIN_DB_USER
argument_list|,
name|ADMIN_DB_PWD
argument_list|)
decl_stmt|;
name|copyCol
argument_list|(
name|adminUser
argument_list|,
name|PRESERVE
argument_list|,
name|USER1_COL1
argument_list|,
name|USER1_NEW_COL
argument_list|)
expr_stmt|;
name|checkAttributes
argument_list|(
name|USER1_NEW_COL
argument_list|,
name|USER1_NAME
argument_list|,
name|USER1_NAME
argument_list|,
name|USER1_COL1_MODE
argument_list|,
name|equalTo
argument_list|(
name|getCreated
argument_list|(
name|USER1_COL1
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|/**      * Whilst preserving attributes,      * as a DBA copy {@link #USER1_COL1} from {@link TestConstants#TEST_COLLECTION_URI} already existing {@link #USER1_COL2}.      */
annotation|@
name|Test
specifier|public
name|void
name|copyPreserveToExistentAsDBA
parameter_list|()
throws|throws
name|AuthenticationException
throws|,
name|LockException
throws|,
name|PermissionDeniedException
throws|,
name|EXistException
throws|,
name|IOException
throws|,
name|TriggerException
block|{
specifier|final
name|Subject
name|adminUser
init|=
name|existWebServer
operator|.
name|getBrokerPool
argument_list|()
operator|.
name|getSecurityManager
argument_list|()
operator|.
name|authenticate
argument_list|(
name|ADMIN_DB_USER
argument_list|,
name|ADMIN_DB_PWD
argument_list|)
decl_stmt|;
specifier|final
name|long
name|originalCol2Created
init|=
name|getCreated
argument_list|(
name|USER1_COL2
argument_list|)
decl_stmt|;
name|copyCol
argument_list|(
name|adminUser
argument_list|,
name|PRESERVE
argument_list|,
name|USER1_COL1
argument_list|,
name|USER1_COL2
argument_list|)
expr_stmt|;
name|checkAttributes
argument_list|(
name|USER1_COL2
argument_list|,
name|USER1_NAME
argument_list|,
name|USER1_NAME
argument_list|,
name|USER1_COL1_MODE
argument_list|,
name|equalTo
argument_list|(
name|originalCol2Created
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|/**      * Whilst preserving attributes,      * as some other (non-owner) user copy {@link #USER1_COL1} from {@link TestConstants#TEST_COLLECTION_URI} to non-existent {@link #USER2_NEW_COL}.      */
annotation|@
name|Test
specifier|public
name|void
name|copyPreserveToNonExistentAsOther
parameter_list|()
throws|throws
name|AuthenticationException
throws|,
name|LockException
throws|,
name|PermissionDeniedException
throws|,
name|EXistException
throws|,
name|IOException
throws|,
name|TriggerException
block|{
specifier|final
name|Subject
name|user2
init|=
name|existWebServer
operator|.
name|getBrokerPool
argument_list|()
operator|.
name|getSecurityManager
argument_list|()
operator|.
name|authenticate
argument_list|(
name|USER2_NAME
argument_list|,
name|USER2_PWD
argument_list|)
decl_stmt|;
name|copyCol
argument_list|(
name|user2
argument_list|,
name|PRESERVE
argument_list|,
name|USER1_COL1
argument_list|,
name|USER2_NEW_COL
argument_list|)
expr_stmt|;
name|checkAttributes
argument_list|(
name|USER2_NEW_COL
argument_list|,
name|USER2_NAME
argument_list|,
name|USER2_NAME
argument_list|,
name|USER1_COL1_MODE
argument_list|,
name|equalTo
argument_list|(
name|getCreated
argument_list|(
name|USER1_COL1
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|/**      * Whilst preserving attributes,      * as some other (non-owner) user copy {@link #USER1_COL1} from {@link TestConstants#TEST_COLLECTION_URI} already existing {@link #USER2_COL2}.      */
annotation|@
name|Test
specifier|public
name|void
name|copyPreserveToExistentAsOther
parameter_list|()
throws|throws
name|AuthenticationException
throws|,
name|LockException
throws|,
name|PermissionDeniedException
throws|,
name|EXistException
throws|,
name|IOException
throws|,
name|TriggerException
block|{
specifier|final
name|Subject
name|user2
init|=
name|existWebServer
operator|.
name|getBrokerPool
argument_list|()
operator|.
name|getSecurityManager
argument_list|()
operator|.
name|authenticate
argument_list|(
name|USER2_NAME
argument_list|,
name|USER2_PWD
argument_list|)
decl_stmt|;
specifier|final
name|long
name|originalCol2Created
init|=
name|getCreated
argument_list|(
name|USER2_COL2
argument_list|)
decl_stmt|;
name|copyCol
argument_list|(
name|user2
argument_list|,
name|PRESERVE
argument_list|,
name|USER1_COL1
argument_list|,
name|USER2_COL2
argument_list|)
expr_stmt|;
name|checkAttributes
argument_list|(
name|USER2_COL2
argument_list|,
name|USER2_NAME
argument_list|,
name|USER2_NAME
argument_list|,
name|USER1_COL1_MODE
argument_list|,
name|equalTo
argument_list|(
name|originalCol2Created
argument_list|)
argument_list|)
expr_stmt|;
block|}
specifier|private
name|void
name|copyCol
parameter_list|(
specifier|final
name|Subject
name|execAsUser
parameter_list|,
specifier|final
name|DBBroker
operator|.
name|PreserveType
name|preserve
parameter_list|,
specifier|final
name|XmldbURI
name|srcColName
parameter_list|,
specifier|final
name|XmldbURI
name|destColName
parameter_list|)
throws|throws
name|EXistException
throws|,
name|PermissionDeniedException
throws|,
name|LockException
throws|,
name|IOException
throws|,
name|TriggerException
block|{
specifier|final
name|XmldbURI
name|src
init|=
name|TEST_COLLECTION_URI
operator|.
name|append
argument_list|(
name|srcColName
argument_list|)
decl_stmt|;
specifier|final
name|XmldbURI
name|dest
init|=
name|TEST_COLLECTION_URI
operator|.
name|append
argument_list|(
name|destColName
argument_list|)
decl_stmt|;
specifier|final
name|BrokerPool
name|pool
init|=
name|existWebServer
operator|.
name|getBrokerPool
argument_list|()
decl_stmt|;
try|try
init|(
specifier|final
name|DBBroker
name|broker
init|=
name|pool
operator|.
name|get
argument_list|(
name|Optional
operator|.
name|of
argument_list|(
name|execAsUser
argument_list|)
argument_list|)
init|;
specifier|final
name|Txn
name|transaction
init|=
name|pool
operator|.
name|getTransactionManager
argument_list|()
operator|.
name|beginTransaction
argument_list|()
init|;
specifier|final
name|Collection
name|srcCol
init|=
name|broker
operator|.
name|openCollection
argument_list|(
name|src
argument_list|,
name|LockMode
operator|.
name|READ_LOCK
argument_list|)
init|;
specifier|final
name|Collection
name|destCol
init|=
name|broker
operator|.
name|openCollection
argument_list|(
name|dest
operator|.
name|removeLastSegment
argument_list|()
argument_list|,
name|LockMode
operator|.
name|WRITE_LOCK
argument_list|)
init|)
block|{
name|broker
operator|.
name|copyCollection
argument_list|(
name|transaction
argument_list|,
name|srcCol
argument_list|,
name|destCol
argument_list|,
name|dest
operator|.
name|lastSegment
argument_list|()
argument_list|,
name|preserve
argument_list|)
expr_stmt|;
name|transaction
operator|.
name|commit
argument_list|()
expr_stmt|;
block|}
comment|// basic shallow check that copy of the collection is the same as the original
try|try
init|(
specifier|final
name|DBBroker
name|broker
init|=
name|pool
operator|.
name|get
argument_list|(
name|Optional
operator|.
name|of
argument_list|(
name|execAsUser
argument_list|)
argument_list|)
init|;
specifier|final
name|Collection
name|original
init|=
name|broker
operator|.
name|openCollection
argument_list|(
name|src
argument_list|,
name|LockMode
operator|.
name|READ_LOCK
argument_list|)
init|;
specifier|final
name|Collection
name|copy
init|=
name|broker
operator|.
name|openCollection
argument_list|(
name|dest
argument_list|,
name|LockMode
operator|.
name|READ_LOCK
argument_list|)
init|)
block|{
name|assertEquals
argument_list|(
name|original
operator|.
name|getDocumentCount
argument_list|(
name|broker
argument_list|)
argument_list|,
name|copy
operator|.
name|getDocumentCount
argument_list|(
name|broker
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|original
operator|.
name|getChildCollectionCount
argument_list|(
name|broker
argument_list|)
argument_list|,
name|copy
operator|.
name|getChildCollectionCount
argument_list|(
name|broker
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
specifier|private
name|long
name|getCreated
parameter_list|(
specifier|final
name|XmldbURI
name|colName
parameter_list|)
throws|throws
name|EXistException
throws|,
name|PermissionDeniedException
block|{
specifier|final
name|BrokerPool
name|pool
init|=
name|existWebServer
operator|.
name|getBrokerPool
argument_list|()
decl_stmt|;
try|try
init|(
specifier|final
name|DBBroker
name|broker
init|=
name|pool
operator|.
name|get
argument_list|(
name|Optional
operator|.
name|of
argument_list|(
name|pool
operator|.
name|getSecurityManager
argument_list|()
operator|.
name|getSystemSubject
argument_list|()
argument_list|)
argument_list|)
init|;
specifier|final
name|Collection
name|col
init|=
name|broker
operator|.
name|openCollection
argument_list|(
name|TEST_COLLECTION_URI
operator|.
name|append
argument_list|(
name|colName
argument_list|)
argument_list|,
name|LockMode
operator|.
name|READ_LOCK
argument_list|)
init|)
block|{
return|return
name|col
operator|.
name|getMetadata
argument_list|()
operator|.
name|getCreated
argument_list|()
return|;
block|}
block|}
specifier|private
name|void
name|checkAttributes
parameter_list|(
specifier|final
name|XmldbURI
name|colName
parameter_list|,
specifier|final
name|String
name|expectedOwner
parameter_list|,
specifier|final
name|String
name|expectedGroup
parameter_list|,
specifier|final
name|int
name|expectedMode
parameter_list|,
specifier|final
name|Matcher
argument_list|<
name|Long
argument_list|>
name|expectedCreated
parameter_list|)
throws|throws
name|EXistException
throws|,
name|PermissionDeniedException
block|{
specifier|final
name|BrokerPool
name|pool
init|=
name|existWebServer
operator|.
name|getBrokerPool
argument_list|()
decl_stmt|;
try|try
init|(
specifier|final
name|DBBroker
name|broker
init|=
name|pool
operator|.
name|get
argument_list|(
name|Optional
operator|.
name|of
argument_list|(
name|pool
operator|.
name|getSecurityManager
argument_list|()
operator|.
name|getSystemSubject
argument_list|()
argument_list|)
argument_list|)
init|;
specifier|final
name|Collection
name|col
init|=
name|broker
operator|.
name|openCollection
argument_list|(
name|TEST_COLLECTION_URI
operator|.
name|append
argument_list|(
name|colName
argument_list|)
argument_list|,
name|LockMode
operator|.
name|READ_LOCK
argument_list|)
init|)
block|{
specifier|final
name|Permission
name|permission
init|=
name|col
operator|.
name|getPermissions
argument_list|()
decl_stmt|;
name|assertEquals
argument_list|(
literal|"Owner value was not expected"
argument_list|,
name|expectedOwner
argument_list|,
name|permission
operator|.
name|getOwner
argument_list|()
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"Group value was not expected"
argument_list|,
name|expectedGroup
argument_list|,
name|permission
operator|.
name|getGroup
argument_list|()
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"Mode value was not expected"
argument_list|,
name|expectedMode
argument_list|,
name|permission
operator|.
name|getMode
argument_list|()
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
literal|"Created value is not correct"
argument_list|,
name|col
operator|.
name|getMetadata
argument_list|()
operator|.
name|getCreated
argument_list|()
argument_list|,
name|expectedCreated
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|BeforeClass
specifier|public
specifier|static
name|void
name|prepareDb
parameter_list|()
throws|throws
name|EXistException
throws|,
name|PermissionDeniedException
throws|,
name|IOException
throws|,
name|TriggerException
block|{
specifier|final
name|BrokerPool
name|pool
init|=
name|existWebServer
operator|.
name|getBrokerPool
argument_list|()
decl_stmt|;
specifier|final
name|SecurityManager
name|sm
init|=
name|pool
operator|.
name|getSecurityManager
argument_list|()
decl_stmt|;
try|try
init|(
specifier|final
name|DBBroker
name|broker
init|=
name|pool
operator|.
name|get
argument_list|(
name|Optional
operator|.
name|of
argument_list|(
name|sm
operator|.
name|getSystemSubject
argument_list|()
argument_list|)
argument_list|)
init|;
specifier|final
name|Txn
name|transaction
init|=
name|pool
operator|.
name|getTransactionManager
argument_list|()
operator|.
name|beginTransaction
argument_list|()
init|)
block|{
specifier|final
name|Collection
name|collection
init|=
name|broker
operator|.
name|getOrCreateCollection
argument_list|(
name|transaction
argument_list|,
name|TEST_COLLECTION_URI
argument_list|)
decl_stmt|;
name|chmod
argument_list|(
name|broker
argument_list|,
name|collection
operator|.
name|getURI
argument_list|()
argument_list|,
literal|511
argument_list|)
expr_stmt|;
name|broker
operator|.
name|saveCollection
argument_list|(
name|transaction
argument_list|,
name|collection
argument_list|)
expr_stmt|;
name|createUser
argument_list|(
name|broker
argument_list|,
name|sm
argument_list|,
name|USER1_NAME
argument_list|,
name|USER1_PWD
argument_list|)
expr_stmt|;
name|createUser
argument_list|(
name|broker
argument_list|,
name|sm
argument_list|,
name|USER2_NAME
argument_list|,
name|USER2_PWD
argument_list|)
expr_stmt|;
name|transaction
operator|.
name|commit
argument_list|()
expr_stmt|;
block|}
block|}
annotation|@
name|Before
specifier|public
name|void
name|setup
parameter_list|()
throws|throws
name|EXistException
throws|,
name|PermissionDeniedException
throws|,
name|LockException
throws|,
name|SAXException
throws|,
name|IOException
throws|,
name|AuthenticationException
block|{
specifier|final
name|BrokerPool
name|pool
init|=
name|existWebServer
operator|.
name|getBrokerPool
argument_list|()
decl_stmt|;
comment|// create user1 resources
specifier|final
name|Subject
name|user1
init|=
name|pool
operator|.
name|getSecurityManager
argument_list|()
operator|.
name|authenticate
argument_list|(
name|USER1_NAME
argument_list|,
name|USER1_PWD
argument_list|)
decl_stmt|;
try|try
init|(
specifier|final
name|DBBroker
name|broker
init|=
name|pool
operator|.
name|get
argument_list|(
name|Optional
operator|.
name|of
argument_list|(
name|user1
argument_list|)
argument_list|)
init|;
specifier|final
name|Txn
name|transaction
init|=
name|pool
operator|.
name|getTransactionManager
argument_list|()
operator|.
name|beginTransaction
argument_list|()
init|;
specifier|final
name|Collection
name|collection
init|=
name|broker
operator|.
name|openCollection
argument_list|(
name|TEST_COLLECTION_URI
argument_list|,
name|LockMode
operator|.
name|WRITE_LOCK
argument_list|)
init|)
block|{
specifier|final
name|Collection
name|u1c1
init|=
name|broker
operator|.
name|getOrCreateCollection
argument_list|(
name|transaction
argument_list|,
name|TEST_COLLECTION_URI
operator|.
name|append
argument_list|(
name|USER1_COL1
argument_list|)
argument_list|)
decl_stmt|;
name|chmod
argument_list|(
name|broker
argument_list|,
name|TEST_COLLECTION_URI
operator|.
name|append
argument_list|(
name|USER1_COL1
argument_list|)
argument_list|,
name|USER1_COL1_MODE
argument_list|)
expr_stmt|;
specifier|final
name|Collection
name|u1c2
init|=
name|broker
operator|.
name|getOrCreateCollection
argument_list|(
name|transaction
argument_list|,
name|TEST_COLLECTION_URI
operator|.
name|append
argument_list|(
name|USER1_COL2
argument_list|)
argument_list|)
decl_stmt|;
name|chmod
argument_list|(
name|broker
argument_list|,
name|TEST_COLLECTION_URI
operator|.
name|append
argument_list|(
name|USER1_COL2
argument_list|)
argument_list|,
name|USER1_COL2_MODE
argument_list|)
expr_stmt|;
name|broker
operator|.
name|saveCollection
argument_list|(
name|transaction
argument_list|,
name|collection
argument_list|)
expr_stmt|;
name|transaction
operator|.
name|commit
argument_list|()
expr_stmt|;
block|}
comment|// create user2 resources
specifier|final
name|Subject
name|user2
init|=
name|pool
operator|.
name|getSecurityManager
argument_list|()
operator|.
name|authenticate
argument_list|(
name|USER2_NAME
argument_list|,
name|USER2_PWD
argument_list|)
decl_stmt|;
try|try
init|(
specifier|final
name|DBBroker
name|broker
init|=
name|pool
operator|.
name|get
argument_list|(
name|Optional
operator|.
name|of
argument_list|(
name|user2
argument_list|)
argument_list|)
init|;
specifier|final
name|Txn
name|transaction
init|=
name|pool
operator|.
name|getTransactionManager
argument_list|()
operator|.
name|beginTransaction
argument_list|()
init|;
specifier|final
name|Collection
name|collection
init|=
name|broker
operator|.
name|openCollection
argument_list|(
name|TEST_COLLECTION_URI
argument_list|,
name|LockMode
operator|.
name|WRITE_LOCK
argument_list|)
init|)
block|{
specifier|final
name|Collection
name|u2c2
init|=
name|broker
operator|.
name|getOrCreateCollection
argument_list|(
name|transaction
argument_list|,
name|TEST_COLLECTION_URI
operator|.
name|append
argument_list|(
name|USER2_COL2
argument_list|)
argument_list|)
decl_stmt|;
name|chmod
argument_list|(
name|broker
argument_list|,
name|TEST_COLLECTION_URI
operator|.
name|append
argument_list|(
name|USER2_COL2
argument_list|)
argument_list|,
name|USER2_COL2_MODE
argument_list|)
expr_stmt|;
name|broker
operator|.
name|saveCollection
argument_list|(
name|transaction
argument_list|,
name|collection
argument_list|)
expr_stmt|;
name|transaction
operator|.
name|commit
argument_list|()
expr_stmt|;
block|}
block|}
annotation|@
name|After
specifier|public
name|void
name|teardown
parameter_list|()
throws|throws
name|EXistException
throws|,
name|LockException
throws|,
name|TriggerException
throws|,
name|PermissionDeniedException
throws|,
name|IOException
block|{
specifier|final
name|BrokerPool
name|pool
init|=
name|existWebServer
operator|.
name|getBrokerPool
argument_list|()
decl_stmt|;
try|try
init|(
specifier|final
name|DBBroker
name|broker
init|=
name|pool
operator|.
name|get
argument_list|(
name|Optional
operator|.
name|of
argument_list|(
name|pool
operator|.
name|getSecurityManager
argument_list|()
operator|.
name|getSystemSubject
argument_list|()
argument_list|)
argument_list|)
init|;
specifier|final
name|Txn
name|transaction
init|=
name|pool
operator|.
name|getTransactionManager
argument_list|()
operator|.
name|beginTransaction
argument_list|()
init|)
block|{
name|removeCollection
argument_list|(
name|broker
argument_list|,
name|transaction
argument_list|,
name|TEST_COLLECTION_URI
operator|.
name|append
argument_list|(
name|USER1_COL1
argument_list|)
argument_list|)
expr_stmt|;
name|removeCollection
argument_list|(
name|broker
argument_list|,
name|transaction
argument_list|,
name|TEST_COLLECTION_URI
operator|.
name|append
argument_list|(
name|USER1_COL2
argument_list|)
argument_list|)
expr_stmt|;
name|removeCollection
argument_list|(
name|broker
argument_list|,
name|transaction
argument_list|,
name|TEST_COLLECTION_URI
operator|.
name|append
argument_list|(
name|USER1_NEW_COL
argument_list|)
argument_list|)
expr_stmt|;
name|removeCollection
argument_list|(
name|broker
argument_list|,
name|transaction
argument_list|,
name|TEST_COLLECTION_URI
operator|.
name|append
argument_list|(
name|USER2_COL2
argument_list|)
argument_list|)
expr_stmt|;
name|removeCollection
argument_list|(
name|broker
argument_list|,
name|transaction
argument_list|,
name|TEST_COLLECTION_URI
operator|.
name|append
argument_list|(
name|USER2_NEW_COL
argument_list|)
argument_list|)
expr_stmt|;
name|transaction
operator|.
name|commit
argument_list|()
expr_stmt|;
block|}
block|}
annotation|@
name|AfterClass
specifier|public
specifier|static
name|void
name|cleanupDb
parameter_list|()
throws|throws
name|EXistException
throws|,
name|PermissionDeniedException
throws|,
name|IOException
throws|,
name|TriggerException
block|{
specifier|final
name|BrokerPool
name|pool
init|=
name|existWebServer
operator|.
name|getBrokerPool
argument_list|()
decl_stmt|;
specifier|final
name|SecurityManager
name|sm
init|=
name|pool
operator|.
name|getSecurityManager
argument_list|()
decl_stmt|;
try|try
init|(
specifier|final
name|DBBroker
name|broker
init|=
name|pool
operator|.
name|get
argument_list|(
name|Optional
operator|.
name|of
argument_list|(
name|sm
operator|.
name|getSystemSubject
argument_list|()
argument_list|)
argument_list|)
init|;
specifier|final
name|Txn
name|transaction
init|=
name|pool
operator|.
name|getTransactionManager
argument_list|()
operator|.
name|beginTransaction
argument_list|()
init|)
block|{
name|removeUser
argument_list|(
name|sm
argument_list|,
name|USER2_NAME
argument_list|)
expr_stmt|;
name|removeUser
argument_list|(
name|sm
argument_list|,
name|USER1_NAME
argument_list|)
expr_stmt|;
name|removeCollection
argument_list|(
name|broker
argument_list|,
name|transaction
argument_list|,
name|TEST_COLLECTION_URI
argument_list|)
expr_stmt|;
name|transaction
operator|.
name|commit
argument_list|()
expr_stmt|;
block|}
block|}
specifier|private
specifier|static
name|void
name|createUser
parameter_list|(
specifier|final
name|DBBroker
name|broker
parameter_list|,
specifier|final
name|SecurityManager
name|sm
parameter_list|,
specifier|final
name|String
name|username
parameter_list|,
specifier|final
name|String
name|password
parameter_list|)
throws|throws
name|PermissionDeniedException
throws|,
name|EXistException
block|{
name|Group
name|userGroup
init|=
operator|new
name|GroupAider
argument_list|(
name|username
argument_list|)
decl_stmt|;
name|sm
operator|.
name|addGroup
argument_list|(
name|broker
argument_list|,
name|userGroup
argument_list|)
expr_stmt|;
specifier|final
name|Account
name|user
init|=
operator|new
name|UserAider
argument_list|(
name|username
argument_list|)
decl_stmt|;
name|user
operator|.
name|setPassword
argument_list|(
name|password
argument_list|)
expr_stmt|;
name|user
operator|.
name|setPrimaryGroup
argument_list|(
name|userGroup
argument_list|)
expr_stmt|;
name|sm
operator|.
name|addAccount
argument_list|(
name|user
argument_list|)
expr_stmt|;
name|userGroup
operator|=
name|sm
operator|.
name|getGroup
argument_list|(
name|username
argument_list|)
expr_stmt|;
name|userGroup
operator|.
name|addManager
argument_list|(
name|sm
operator|.
name|getAccount
argument_list|(
name|username
argument_list|)
argument_list|)
expr_stmt|;
name|sm
operator|.
name|updateGroup
argument_list|(
name|userGroup
argument_list|)
expr_stmt|;
block|}
specifier|private
specifier|static
name|void
name|chmod
parameter_list|(
specifier|final
name|DBBroker
name|broker
parameter_list|,
specifier|final
name|XmldbURI
name|pathUri
parameter_list|,
specifier|final
name|int
name|mode
parameter_list|)
throws|throws
name|PermissionDeniedException
block|{
name|PermissionFactory
operator|.
name|chmod
argument_list|(
name|broker
argument_list|,
name|pathUri
argument_list|,
name|Optional
operator|.
name|of
argument_list|(
name|mode
argument_list|)
argument_list|,
name|Optional
operator|.
name|empty
argument_list|()
argument_list|)
expr_stmt|;
block|}
specifier|private
specifier|static
name|void
name|removeUser
parameter_list|(
specifier|final
name|SecurityManager
name|sm
parameter_list|,
specifier|final
name|String
name|username
parameter_list|)
throws|throws
name|PermissionDeniedException
throws|,
name|EXistException
block|{
name|sm
operator|.
name|deleteAccount
argument_list|(
name|username
argument_list|)
expr_stmt|;
name|sm
operator|.
name|deleteGroup
argument_list|(
name|username
argument_list|)
expr_stmt|;
block|}
specifier|private
specifier|static
name|void
name|removeCollection
parameter_list|(
specifier|final
name|DBBroker
name|broker
parameter_list|,
specifier|final
name|Txn
name|transaction
parameter_list|,
specifier|final
name|XmldbURI
name|collectionUri
parameter_list|)
throws|throws
name|PermissionDeniedException
throws|,
name|IOException
throws|,
name|TriggerException
block|{
try|try
init|(
specifier|final
name|Collection
name|collection
init|=
name|broker
operator|.
name|openCollection
argument_list|(
name|collectionUri
argument_list|,
name|LockMode
operator|.
name|WRITE_LOCK
argument_list|)
init|)
block|{
if|if
condition|(
name|collection
operator|!=
literal|null
condition|)
block|{
name|broker
operator|.
name|removeCollection
argument_list|(
name|transaction
argument_list|,
name|collection
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
end_class

end_unit

