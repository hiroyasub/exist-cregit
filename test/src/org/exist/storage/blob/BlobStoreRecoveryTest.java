begin_unit|revision:1.0.0;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Copyright (C) 2018 Adam Retter  *  * This program is free software; you can redistribute it and/or  * modify it under the terms of the GNU Lesser General Public License  * as published by the Free Software Foundation; either version 2  * of the License, or (at your option) any later version.  *  * This program is distributed in the hope that it will be useful,  * but WITHOUT ANY WARRANTY; without even the implied warranty of  * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the  * GNU Lesser General Public License for more details.  *  * You should have received a copy of the GNU Lesser General Public  * License along with this library; if not, write to the Free Software  * Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA  02110-1301  USA  */
end_comment

begin_package
package|package
name|org
operator|.
name|exist
operator|.
name|storage
operator|.
name|blob
package|;
end_package

begin_import
import|import
name|com
operator|.
name|evolvedbinary
operator|.
name|j8fu
operator|.
name|tuple
operator|.
name|Tuple2
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|EXistException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|scheduler
operator|.
name|Scheduler
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|security
operator|.
name|SecurityManager
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|security
operator|.
name|Subject
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|storage
operator|.
name|BrokerPool
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|storage
operator|.
name|BrokerPoolServiceException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|storage
operator|.
name|DBBroker
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|storage
operator|.
name|SystemTaskManager
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|storage
operator|.
name|journal
operator|.
name|Journal
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|storage
operator|.
name|journal
operator|.
name|JournalManager
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|storage
operator|.
name|journal
operator|.
name|LogException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|storage
operator|.
name|lock
operator|.
name|FileLockHeartBeat
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|storage
operator|.
name|recovery
operator|.
name|RecoveryManager
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|storage
operator|.
name|txn
operator|.
name|TransactionException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|storage
operator|.
name|txn
operator|.
name|TransactionManager
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|storage
operator|.
name|txn
operator|.
name|Txn
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|util
operator|.
name|Configuration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|util
operator|.
name|crypto
operator|.
name|digest
operator|.
name|DigestInputStream
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|util
operator|.
name|crypto
operator|.
name|digest
operator|.
name|DigestType
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|util
operator|.
name|crypto
operator|.
name|digest
operator|.
name|MessageDigest
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|util
operator|.
name|crypto
operator|.
name|digest
operator|.
name|StreamableDigest
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|util
operator|.
name|io
operator|.
name|FastByteArrayInputStream
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|util
operator|.
name|io
operator|.
name|FastByteArrayOutputStream
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|AfterClass
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Rule
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|rules
operator|.
name|TemporaryFolder
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|runner
operator|.
name|RunWith
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|runners
operator|.
name|Parameterized
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|runners
operator|.
name|Parameterized
operator|.
name|Parameter
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|runners
operator|.
name|Parameterized
operator|.
name|Parameters
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|InputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|nio
operator|.
name|file
operator|.
name|Path
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Arrays
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Optional
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Properties
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Random
import|;
end_import

begin_import
import|import static
name|com
operator|.
name|evolvedbinary
operator|.
name|j8fu
operator|.
name|tuple
operator|.
name|Tuple
operator|.
name|Tuple
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|easymock
operator|.
name|EasyMock
operator|.
name|*
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|exist
operator|.
name|storage
operator|.
name|journal
operator|.
name|Journal
operator|.
name|*
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|*
import|;
end_import

begin_comment
comment|/**  * @author Adam Retter<adam@evolvedbinary.com>  */
end_comment

begin_class
annotation|@
name|RunWith
argument_list|(
name|Parameterized
operator|.
name|class
argument_list|)
specifier|public
class|class
name|BlobStoreRecoveryTest
block|{
specifier|private
specifier|static
specifier|final
name|boolean
name|SIMULATE_CRASH
init|=
literal|false
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|boolean
name|CLEAN_SHUTDOWN
init|=
literal|true
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|DigestType
name|DIGEST_TYPE
init|=
name|DigestType
operator|.
name|BLAKE_256
decl_stmt|;
specifier|private
specifier|final
name|Random
name|random
init|=
operator|new
name|Random
argument_list|()
decl_stmt|;
annotation|@
name|Parameters
argument_list|(
name|name
operator|=
literal|"{0}"
argument_list|)
specifier|public
specifier|static
name|java
operator|.
name|util
operator|.
name|Collection
argument_list|<
name|Object
index|[]
argument_list|>
name|data
parameter_list|()
block|{
return|return
name|Arrays
operator|.
name|asList
argument_list|(
operator|new
name|Object
index|[]
index|[]
block|{
block|{
literal|"crash"
block|,
name|SIMULATE_CRASH
block|}
block|,
block|{
literal|"shutdown"
block|,
name|CLEAN_SHUTDOWN
block|}
block|}
argument_list|)
return|;
block|}
annotation|@
name|Parameter
specifier|public
name|String
name|testTypeName
decl_stmt|;
annotation|@
name|Parameter
argument_list|(
name|value
operator|=
literal|1
argument_list|)
specifier|public
name|boolean
name|cleanShutdown
decl_stmt|;
annotation|@
name|Rule
specifier|public
specifier|final
name|TemporaryFolder
name|temporaryFolder
init|=
operator|new
name|TemporaryFolder
argument_list|()
decl_stmt|;
annotation|@
name|AfterClass
specifier|public
specifier|static
name|void
name|cleanup
parameter_list|()
block|{
name|BrokerPool
operator|.
name|FORCE_CORRUPTION
operator|=
literal|false
expr_stmt|;
block|}
comment|//    @Test
comment|//    public void test1() {
comment|//        Add_commit(),
comment|//        Remove_commit(),
comment|//        Add_commit(),
comment|//
comment|//        Add_commit(),
comment|//        Remove_commit(),
comment|//        Add_noCommit(),
comment|//    }
comment|// TODO(AR) need to introduce additional checkpoints to check that deletion of staging file / remove file is okay!
comment|/**      * Add Blob and commit, then stop (either by shutdown or simulated crash).      *      * Expect that the Blob is present after recovery.      */
annotation|@
name|Test
specifier|public
name|void
name|addCommit
parameter_list|()
throws|throws
name|IOException
throws|,
name|BrokerPoolServiceException
throws|,
name|EXistException
block|{
specifier|final
name|Path
name|blobDbx
init|=
name|temporaryFolder
operator|.
name|getRoot
argument_list|()
operator|.
name|toPath
argument_list|()
operator|.
name|resolve
argument_list|(
literal|"blob.dbx"
argument_list|)
decl_stmt|;
specifier|final
name|Path
name|blobDir
init|=
name|temporaryFolder
operator|.
name|newFolder
argument_list|(
literal|"blob"
argument_list|)
operator|.
name|toPath
argument_list|()
decl_stmt|;
specifier|final
name|Tuple2
argument_list|<
name|byte
index|[]
argument_list|,
name|MessageDigest
argument_list|>
name|tempBin1
init|=
name|generateTestFile
argument_list|()
decl_stmt|;
comment|// write the data
try|try
init|(
specifier|final
name|BlobDb
name|blobDb
init|=
name|newBlobDb
argument_list|(
name|temporaryFolder
operator|.
name|getRoot
argument_list|()
operator|.
name|toPath
argument_list|()
argument_list|,
name|blobDbx
argument_list|,
name|blobDir
argument_list|)
init|)
block|{
name|blobDb
operator|.
name|blobStore
operator|.
name|open
argument_list|()
expr_stmt|;
name|addCommit
argument_list|(
name|blobDb
operator|.
name|transactionManager
argument_list|,
name|blobDb
operator|.
name|blobStore
argument_list|,
name|tempBin1
operator|.
name|_1
argument_list|)
expr_stmt|;
block|}
comment|// NOTE: when BlobDB is closed by the ARM expression above it simulates a crash as BrokerPool.FORCE_CORRUPTION = true was set in #newBlobDb()
comment|// test the recovery
try|try
init|(
specifier|final
name|BlobDb
name|blobDb
init|=
name|newBlobDb
argument_list|(
name|temporaryFolder
operator|.
name|getRoot
argument_list|()
operator|.
name|toPath
argument_list|()
argument_list|,
name|blobDbx
argument_list|,
name|blobDir
argument_list|)
init|)
block|{
name|blobDb
operator|.
name|blobStore
operator|.
name|open
argument_list|()
expr_stmt|;
specifier|final
name|BlobId
name|blobId
init|=
operator|new
name|BlobId
argument_list|(
name|tempBin1
operator|.
name|_2
operator|.
name|getValue
argument_list|()
argument_list|)
decl_stmt|;
specifier|final
name|Tuple2
argument_list|<
name|byte
index|[]
argument_list|,
name|MessageDigest
argument_list|>
name|actual
init|=
name|getCommit
argument_list|(
name|blobDb
operator|.
name|transactionManager
argument_list|,
name|blobDb
operator|.
name|blobStore
argument_list|,
name|blobId
argument_list|)
decl_stmt|;
name|assertNotNull
argument_list|(
name|actual
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|tempBin1
operator|.
name|_2
argument_list|,
name|tempBin1
operator|.
name|_2
argument_list|)
expr_stmt|;
name|assertArrayEquals
argument_list|(
name|tempBin1
operator|.
name|_1
argument_list|,
name|tempBin1
operator|.
name|_1
argument_list|)
expr_stmt|;
if|if
condition|(
name|blobDb
operator|.
name|blobStore
operator|instanceof
name|BlobStoreImpl
condition|)
block|{
name|assertEquals
argument_list|(
literal|1
argument_list|,
operator|(
operator|(
name|BlobStoreImpl
operator|)
name|blobDb
operator|.
name|blobStore
operator|)
operator|.
name|getReferenceCount
argument_list|(
name|blobId
argument_list|)
operator|.
name|intValue
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
block|}
comment|/**      * Add Blob (DO NOT commit), then stop (either by shutdown or simulated crash).      *      * Expect that the Blob is NOT present after recovery.      */
annotation|@
name|Test
specifier|public
name|void
name|addNoCommit
parameter_list|()
throws|throws
name|IOException
throws|,
name|BrokerPoolServiceException
throws|,
name|EXistException
block|{
specifier|final
name|Path
name|blobDbx
init|=
name|temporaryFolder
operator|.
name|getRoot
argument_list|()
operator|.
name|toPath
argument_list|()
operator|.
name|resolve
argument_list|(
literal|"blob.dbx"
argument_list|)
decl_stmt|;
specifier|final
name|Path
name|blobDir
init|=
name|temporaryFolder
operator|.
name|newFolder
argument_list|(
literal|"blob"
argument_list|)
operator|.
name|toPath
argument_list|()
decl_stmt|;
specifier|final
name|Tuple2
argument_list|<
name|byte
index|[]
argument_list|,
name|MessageDigest
argument_list|>
name|tempBin1
init|=
name|generateTestFile
argument_list|()
decl_stmt|;
comment|// write the data
try|try
init|(
specifier|final
name|BlobDb
name|blobDb
init|=
name|newBlobDb
argument_list|(
name|temporaryFolder
operator|.
name|getRoot
argument_list|()
operator|.
name|toPath
argument_list|()
argument_list|,
name|blobDbx
argument_list|,
name|blobDir
argument_list|)
init|)
block|{
name|blobDb
operator|.
name|blobStore
operator|.
name|open
argument_list|()
expr_stmt|;
name|addNoCommit
argument_list|(
name|blobDb
operator|.
name|transactionManager
argument_list|,
name|blobDb
operator|.
name|blobStore
argument_list|,
name|tempBin1
operator|.
name|_1
argument_list|)
expr_stmt|;
block|}
comment|// NOTE: when BlobDB is closed by the ARM expression above it simulates a crash as BrokerPool.FORCE_CORRUPTION = true was set in #newBlobDb()
comment|// test the recovery
try|try
init|(
specifier|final
name|BlobDb
name|blobDb
init|=
name|newBlobDb
argument_list|(
name|temporaryFolder
operator|.
name|getRoot
argument_list|()
operator|.
name|toPath
argument_list|()
argument_list|,
name|blobDbx
argument_list|,
name|blobDir
argument_list|)
init|)
block|{
name|blobDb
operator|.
name|blobStore
operator|.
name|open
argument_list|()
expr_stmt|;
specifier|final
name|BlobId
name|blobId
init|=
operator|new
name|BlobId
argument_list|(
name|tempBin1
operator|.
name|_2
operator|.
name|getValue
argument_list|()
argument_list|)
decl_stmt|;
specifier|final
name|Tuple2
argument_list|<
name|byte
index|[]
argument_list|,
name|MessageDigest
argument_list|>
name|actual
init|=
name|getCommit
argument_list|(
name|blobDb
operator|.
name|transactionManager
argument_list|,
name|blobDb
operator|.
name|blobStore
argument_list|,
name|blobId
argument_list|)
decl_stmt|;
name|assertNull
argument_list|(
name|actual
argument_list|)
expr_stmt|;
if|if
condition|(
name|blobDb
operator|.
name|blobStore
operator|instanceof
name|BlobStoreImpl
condition|)
block|{
name|assertNull
argument_list|(
operator|(
operator|(
name|BlobStoreImpl
operator|)
name|blobDb
operator|.
name|blobStore
operator|)
operator|.
name|getReferenceCount
argument_list|(
name|blobId
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
block|}
comment|/**      * Add Blob and commit, Remove Blob and commit, then stop (either by shutdown or simulated crash).      *      * Expect that the Blob is NOT present after recovery.      */
annotation|@
name|Test
specifier|public
name|void
name|addCommit_removeCommit
parameter_list|()
throws|throws
name|IOException
throws|,
name|BrokerPoolServiceException
throws|,
name|EXistException
block|{
specifier|final
name|Path
name|blobDbx
init|=
name|temporaryFolder
operator|.
name|getRoot
argument_list|()
operator|.
name|toPath
argument_list|()
operator|.
name|resolve
argument_list|(
literal|"blob.dbx"
argument_list|)
decl_stmt|;
specifier|final
name|Path
name|blobDir
init|=
name|temporaryFolder
operator|.
name|newFolder
argument_list|(
literal|"blob"
argument_list|)
operator|.
name|toPath
argument_list|()
decl_stmt|;
specifier|final
name|Tuple2
argument_list|<
name|byte
index|[]
argument_list|,
name|MessageDigest
argument_list|>
name|tempBin1
init|=
name|generateTestFile
argument_list|()
decl_stmt|;
comment|// write the data
try|try
init|(
specifier|final
name|BlobDb
name|blobDb
init|=
name|newBlobDb
argument_list|(
name|temporaryFolder
operator|.
name|getRoot
argument_list|()
operator|.
name|toPath
argument_list|()
argument_list|,
name|blobDbx
argument_list|,
name|blobDir
argument_list|)
init|)
block|{
name|blobDb
operator|.
name|blobStore
operator|.
name|open
argument_list|()
expr_stmt|;
name|addCommit
argument_list|(
name|blobDb
operator|.
name|transactionManager
argument_list|,
name|blobDb
operator|.
name|blobStore
argument_list|,
name|tempBin1
operator|.
name|_1
argument_list|)
expr_stmt|;
name|removeCommit
argument_list|(
name|blobDb
operator|.
name|transactionManager
argument_list|,
name|blobDb
operator|.
name|blobStore
argument_list|,
name|tempBin1
operator|.
name|_1
argument_list|)
expr_stmt|;
block|}
comment|// NOTE: when BlobDB is closed by the ARM expression above it simulates a crash as BrokerPool.FORCE_CORRUPTION = true was set in #newBlobDb()
comment|// test the recovery
try|try
init|(
specifier|final
name|BlobDb
name|blobDb
init|=
name|newBlobDb
argument_list|(
name|temporaryFolder
operator|.
name|getRoot
argument_list|()
operator|.
name|toPath
argument_list|()
argument_list|,
name|blobDbx
argument_list|,
name|blobDir
argument_list|)
init|)
block|{
name|blobDb
operator|.
name|blobStore
operator|.
name|open
argument_list|()
expr_stmt|;
specifier|final
name|BlobId
name|blobId
init|=
operator|new
name|BlobId
argument_list|(
name|tempBin1
operator|.
name|_2
operator|.
name|getValue
argument_list|()
argument_list|)
decl_stmt|;
specifier|final
name|Tuple2
argument_list|<
name|byte
index|[]
argument_list|,
name|MessageDigest
argument_list|>
name|actual
init|=
name|getCommit
argument_list|(
name|blobDb
operator|.
name|transactionManager
argument_list|,
name|blobDb
operator|.
name|blobStore
argument_list|,
name|blobId
argument_list|)
decl_stmt|;
name|assertNull
argument_list|(
name|actual
argument_list|)
expr_stmt|;
if|if
condition|(
name|blobDb
operator|.
name|blobStore
operator|instanceof
name|BlobStoreImpl
condition|)
block|{
name|assertNull
argument_list|(
operator|(
operator|(
name|BlobStoreImpl
operator|)
name|blobDb
operator|.
name|blobStore
operator|)
operator|.
name|getReferenceCount
argument_list|(
name|blobId
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
block|}
comment|/**      * Add Blob and commit, Remove Blob (DO NOT commit), then stop (either by shutdown or simulated crash).      *      * Expect that the Blob is present after recovery.      */
annotation|@
name|Test
specifier|public
name|void
name|addCommit_removeNoCommit
parameter_list|()
throws|throws
name|IOException
throws|,
name|BrokerPoolServiceException
throws|,
name|EXistException
block|{
specifier|final
name|Path
name|blobDbx
init|=
name|temporaryFolder
operator|.
name|getRoot
argument_list|()
operator|.
name|toPath
argument_list|()
operator|.
name|resolve
argument_list|(
literal|"blob.dbx"
argument_list|)
decl_stmt|;
specifier|final
name|Path
name|blobDir
init|=
name|temporaryFolder
operator|.
name|newFolder
argument_list|(
literal|"blob"
argument_list|)
operator|.
name|toPath
argument_list|()
decl_stmt|;
specifier|final
name|Tuple2
argument_list|<
name|byte
index|[]
argument_list|,
name|MessageDigest
argument_list|>
name|tempBin1
init|=
name|generateTestFile
argument_list|()
decl_stmt|;
comment|// write the data
try|try
init|(
specifier|final
name|BlobDb
name|blobDb
init|=
name|newBlobDb
argument_list|(
name|temporaryFolder
operator|.
name|getRoot
argument_list|()
operator|.
name|toPath
argument_list|()
argument_list|,
name|blobDbx
argument_list|,
name|blobDir
argument_list|)
init|)
block|{
name|blobDb
operator|.
name|blobStore
operator|.
name|open
argument_list|()
expr_stmt|;
name|addCommit
argument_list|(
name|blobDb
operator|.
name|transactionManager
argument_list|,
name|blobDb
operator|.
name|blobStore
argument_list|,
name|tempBin1
operator|.
name|_1
argument_list|)
expr_stmt|;
name|removeNoCommit
argument_list|(
name|blobDb
operator|.
name|transactionManager
argument_list|,
name|blobDb
operator|.
name|blobStore
argument_list|,
name|tempBin1
operator|.
name|_1
argument_list|)
expr_stmt|;
block|}
comment|// NOTE: when BlobDB is closed by the ARM expression above it simulates a crash as BrokerPool.FORCE_CORRUPTION = true was set in #newBlobDb()
comment|// test the recovery
try|try
init|(
specifier|final
name|BlobDb
name|blobDb
init|=
name|newBlobDb
argument_list|(
name|temporaryFolder
operator|.
name|getRoot
argument_list|()
operator|.
name|toPath
argument_list|()
argument_list|,
name|blobDbx
argument_list|,
name|blobDir
argument_list|)
init|)
block|{
name|blobDb
operator|.
name|blobStore
operator|.
name|open
argument_list|()
expr_stmt|;
specifier|final
name|BlobId
name|blobId
init|=
operator|new
name|BlobId
argument_list|(
name|tempBin1
operator|.
name|_2
operator|.
name|getValue
argument_list|()
argument_list|)
decl_stmt|;
specifier|final
name|Tuple2
argument_list|<
name|byte
index|[]
argument_list|,
name|MessageDigest
argument_list|>
name|actual
init|=
name|getCommit
argument_list|(
name|blobDb
operator|.
name|transactionManager
argument_list|,
name|blobDb
operator|.
name|blobStore
argument_list|,
name|blobId
argument_list|)
decl_stmt|;
name|assertNotNull
argument_list|(
name|actual
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|tempBin1
operator|.
name|_2
argument_list|,
name|tempBin1
operator|.
name|_2
argument_list|)
expr_stmt|;
name|assertArrayEquals
argument_list|(
name|tempBin1
operator|.
name|_1
argument_list|,
name|tempBin1
operator|.
name|_1
argument_list|)
expr_stmt|;
if|if
condition|(
name|blobDb
operator|.
name|blobStore
operator|instanceof
name|BlobStoreImpl
condition|)
block|{
name|assertEquals
argument_list|(
literal|1
argument_list|,
operator|(
operator|(
name|BlobStoreImpl
operator|)
name|blobDb
operator|.
name|blobStore
operator|)
operator|.
name|getReferenceCount
argument_list|(
name|blobId
argument_list|)
operator|.
name|intValue
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
block|}
comment|/**      * Add Blob and commit, re-add same Blob and commit, then stop (either by shutdown or simulated crash).      *      * Expect that the Blob is present after recovery.      */
annotation|@
name|Test
specifier|public
name|void
name|addCommit_addCommit
parameter_list|()
throws|throws
name|IOException
throws|,
name|BrokerPoolServiceException
throws|,
name|EXistException
block|{
specifier|final
name|Path
name|blobDbx
init|=
name|temporaryFolder
operator|.
name|getRoot
argument_list|()
operator|.
name|toPath
argument_list|()
operator|.
name|resolve
argument_list|(
literal|"blob.dbx"
argument_list|)
decl_stmt|;
specifier|final
name|Path
name|blobDir
init|=
name|temporaryFolder
operator|.
name|newFolder
argument_list|(
literal|"blob"
argument_list|)
operator|.
name|toPath
argument_list|()
decl_stmt|;
specifier|final
name|Tuple2
argument_list|<
name|byte
index|[]
argument_list|,
name|MessageDigest
argument_list|>
name|tempBin1
init|=
name|generateTestFile
argument_list|()
decl_stmt|;
comment|// write the data
try|try
init|(
specifier|final
name|BlobDb
name|blobDb
init|=
name|newBlobDb
argument_list|(
name|temporaryFolder
operator|.
name|getRoot
argument_list|()
operator|.
name|toPath
argument_list|()
argument_list|,
name|blobDbx
argument_list|,
name|blobDir
argument_list|)
init|)
block|{
name|blobDb
operator|.
name|blobStore
operator|.
name|open
argument_list|()
expr_stmt|;
name|addCommit
argument_list|(
name|blobDb
operator|.
name|transactionManager
argument_list|,
name|blobDb
operator|.
name|blobStore
argument_list|,
name|tempBin1
operator|.
name|_1
argument_list|)
expr_stmt|;
name|addCommit
argument_list|(
name|blobDb
operator|.
name|transactionManager
argument_list|,
name|blobDb
operator|.
name|blobStore
argument_list|,
name|tempBin1
operator|.
name|_1
argument_list|)
expr_stmt|;
block|}
comment|// NOTE: when BlobDB is closed by the ARM expression above it simulates a crash as BrokerPool.FORCE_CORRUPTION = true was set in #newBlobDb()
comment|// test the recovery
try|try
init|(
specifier|final
name|BlobDb
name|blobDb
init|=
name|newBlobDb
argument_list|(
name|temporaryFolder
operator|.
name|getRoot
argument_list|()
operator|.
name|toPath
argument_list|()
argument_list|,
name|blobDbx
argument_list|,
name|blobDir
argument_list|)
init|)
block|{
name|blobDb
operator|.
name|blobStore
operator|.
name|open
argument_list|()
expr_stmt|;
specifier|final
name|BlobId
name|blobId
init|=
operator|new
name|BlobId
argument_list|(
name|tempBin1
operator|.
name|_2
operator|.
name|getValue
argument_list|()
argument_list|)
decl_stmt|;
specifier|final
name|Tuple2
argument_list|<
name|byte
index|[]
argument_list|,
name|MessageDigest
argument_list|>
name|actual
init|=
name|getCommit
argument_list|(
name|blobDb
operator|.
name|transactionManager
argument_list|,
name|blobDb
operator|.
name|blobStore
argument_list|,
name|blobId
argument_list|)
decl_stmt|;
name|assertNotNull
argument_list|(
name|actual
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|tempBin1
operator|.
name|_2
argument_list|,
name|tempBin1
operator|.
name|_2
argument_list|)
expr_stmt|;
name|assertArrayEquals
argument_list|(
name|tempBin1
operator|.
name|_1
argument_list|,
name|tempBin1
operator|.
name|_1
argument_list|)
expr_stmt|;
if|if
condition|(
name|blobDb
operator|.
name|blobStore
operator|instanceof
name|BlobStoreImpl
condition|)
block|{
name|assertEquals
argument_list|(
literal|2
argument_list|,
operator|(
operator|(
name|BlobStoreImpl
operator|)
name|blobDb
operator|.
name|blobStore
operator|)
operator|.
name|getReferenceCount
argument_list|(
name|blobId
argument_list|)
operator|.
name|intValue
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
block|}
comment|/**      * Add Blob and commit, re-add same Blob (DO NOT commit), then stop (either by shutdown or simulated crash).      *      * Expect that the Blob is present after recovery.      */
annotation|@
name|Test
specifier|public
name|void
name|addCommit_addNoCommit
parameter_list|()
throws|throws
name|IOException
throws|,
name|BrokerPoolServiceException
throws|,
name|EXistException
block|{
specifier|final
name|Path
name|blobDbx
init|=
name|temporaryFolder
operator|.
name|getRoot
argument_list|()
operator|.
name|toPath
argument_list|()
operator|.
name|resolve
argument_list|(
literal|"blob.dbx"
argument_list|)
decl_stmt|;
specifier|final
name|Path
name|blobDir
init|=
name|temporaryFolder
operator|.
name|newFolder
argument_list|(
literal|"blob"
argument_list|)
operator|.
name|toPath
argument_list|()
decl_stmt|;
specifier|final
name|Tuple2
argument_list|<
name|byte
index|[]
argument_list|,
name|MessageDigest
argument_list|>
name|tempBin1
init|=
name|generateTestFile
argument_list|()
decl_stmt|;
comment|// write the data
try|try
init|(
specifier|final
name|BlobDb
name|blobDb
init|=
name|newBlobDb
argument_list|(
name|temporaryFolder
operator|.
name|getRoot
argument_list|()
operator|.
name|toPath
argument_list|()
argument_list|,
name|blobDbx
argument_list|,
name|blobDir
argument_list|)
init|)
block|{
name|blobDb
operator|.
name|blobStore
operator|.
name|open
argument_list|()
expr_stmt|;
name|addCommit
argument_list|(
name|blobDb
operator|.
name|transactionManager
argument_list|,
name|blobDb
operator|.
name|blobStore
argument_list|,
name|tempBin1
operator|.
name|_1
argument_list|)
expr_stmt|;
name|addNoCommit
argument_list|(
name|blobDb
operator|.
name|transactionManager
argument_list|,
name|blobDb
operator|.
name|blobStore
argument_list|,
name|tempBin1
operator|.
name|_1
argument_list|)
expr_stmt|;
block|}
comment|// NOTE: when BlobDB is closed by the ARM expression above it simulates a crash as BrokerPool.FORCE_CORRUPTION = true was set in #newBlobDb()
comment|// test the recovery
try|try
init|(
specifier|final
name|BlobDb
name|blobDb
init|=
name|newBlobDb
argument_list|(
name|temporaryFolder
operator|.
name|getRoot
argument_list|()
operator|.
name|toPath
argument_list|()
argument_list|,
name|blobDbx
argument_list|,
name|blobDir
argument_list|)
init|)
block|{
name|blobDb
operator|.
name|blobStore
operator|.
name|open
argument_list|()
expr_stmt|;
specifier|final
name|BlobId
name|blobId
init|=
operator|new
name|BlobId
argument_list|(
name|tempBin1
operator|.
name|_2
operator|.
name|getValue
argument_list|()
argument_list|)
decl_stmt|;
specifier|final
name|Tuple2
argument_list|<
name|byte
index|[]
argument_list|,
name|MessageDigest
argument_list|>
name|actual
init|=
name|getCommit
argument_list|(
name|blobDb
operator|.
name|transactionManager
argument_list|,
name|blobDb
operator|.
name|blobStore
argument_list|,
name|blobId
argument_list|)
decl_stmt|;
name|assertNotNull
argument_list|(
name|actual
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|tempBin1
operator|.
name|_2
argument_list|,
name|tempBin1
operator|.
name|_2
argument_list|)
expr_stmt|;
name|assertArrayEquals
argument_list|(
name|tempBin1
operator|.
name|_1
argument_list|,
name|tempBin1
operator|.
name|_1
argument_list|)
expr_stmt|;
if|if
condition|(
name|blobDb
operator|.
name|blobStore
operator|instanceof
name|BlobStoreImpl
condition|)
block|{
name|assertEquals
argument_list|(
literal|1
argument_list|,
operator|(
operator|(
name|BlobStoreImpl
operator|)
name|blobDb
operator|.
name|blobStore
operator|)
operator|.
name|getReferenceCount
argument_list|(
name|blobId
argument_list|)
operator|.
name|intValue
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
block|}
comment|/**      * Add Blob and commit, re-add same Blob and commit, Remove Blob and commit, then stop (either by shutdown or simulated crash).      *      * Expect that the Blob is present after recovery.      */
annotation|@
name|Test
specifier|public
name|void
name|addCommit_addCommit_removeCommit
parameter_list|()
throws|throws
name|IOException
throws|,
name|BrokerPoolServiceException
throws|,
name|EXistException
block|{
specifier|final
name|Path
name|blobDbx
init|=
name|temporaryFolder
operator|.
name|getRoot
argument_list|()
operator|.
name|toPath
argument_list|()
operator|.
name|resolve
argument_list|(
literal|"blob.dbx"
argument_list|)
decl_stmt|;
specifier|final
name|Path
name|blobDir
init|=
name|temporaryFolder
operator|.
name|newFolder
argument_list|(
literal|"blob"
argument_list|)
operator|.
name|toPath
argument_list|()
decl_stmt|;
specifier|final
name|Tuple2
argument_list|<
name|byte
index|[]
argument_list|,
name|MessageDigest
argument_list|>
name|tempBin1
init|=
name|generateTestFile
argument_list|()
decl_stmt|;
comment|// write the data
try|try
init|(
specifier|final
name|BlobDb
name|blobDb
init|=
name|newBlobDb
argument_list|(
name|temporaryFolder
operator|.
name|getRoot
argument_list|()
operator|.
name|toPath
argument_list|()
argument_list|,
name|blobDbx
argument_list|,
name|blobDir
argument_list|)
init|)
block|{
name|blobDb
operator|.
name|blobStore
operator|.
name|open
argument_list|()
expr_stmt|;
name|addCommit
argument_list|(
name|blobDb
operator|.
name|transactionManager
argument_list|,
name|blobDb
operator|.
name|blobStore
argument_list|,
name|tempBin1
operator|.
name|_1
argument_list|)
expr_stmt|;
name|addCommit
argument_list|(
name|blobDb
operator|.
name|transactionManager
argument_list|,
name|blobDb
operator|.
name|blobStore
argument_list|,
name|tempBin1
operator|.
name|_1
argument_list|)
expr_stmt|;
name|removeCommit
argument_list|(
name|blobDb
operator|.
name|transactionManager
argument_list|,
name|blobDb
operator|.
name|blobStore
argument_list|,
name|tempBin1
operator|.
name|_1
argument_list|)
expr_stmt|;
block|}
comment|// NOTE: when BlobDB is closed by the ARM expression above it simulates a crash as BrokerPool.FORCE_CORRUPTION = true was set in #newBlobDb()
comment|// test the recovery
try|try
init|(
specifier|final
name|BlobDb
name|blobDb
init|=
name|newBlobDb
argument_list|(
name|temporaryFolder
operator|.
name|getRoot
argument_list|()
operator|.
name|toPath
argument_list|()
argument_list|,
name|blobDbx
argument_list|,
name|blobDir
argument_list|)
init|)
block|{
name|blobDb
operator|.
name|blobStore
operator|.
name|open
argument_list|()
expr_stmt|;
specifier|final
name|BlobId
name|blobId
init|=
operator|new
name|BlobId
argument_list|(
name|tempBin1
operator|.
name|_2
operator|.
name|getValue
argument_list|()
argument_list|)
decl_stmt|;
specifier|final
name|Tuple2
argument_list|<
name|byte
index|[]
argument_list|,
name|MessageDigest
argument_list|>
name|actual
init|=
name|getCommit
argument_list|(
name|blobDb
operator|.
name|transactionManager
argument_list|,
name|blobDb
operator|.
name|blobStore
argument_list|,
name|blobId
argument_list|)
decl_stmt|;
name|assertNotNull
argument_list|(
name|actual
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|tempBin1
operator|.
name|_2
argument_list|,
name|tempBin1
operator|.
name|_2
argument_list|)
expr_stmt|;
name|assertArrayEquals
argument_list|(
name|tempBin1
operator|.
name|_1
argument_list|,
name|tempBin1
operator|.
name|_1
argument_list|)
expr_stmt|;
if|if
condition|(
name|blobDb
operator|.
name|blobStore
operator|instanceof
name|BlobStoreImpl
condition|)
block|{
name|assertEquals
argument_list|(
literal|1
argument_list|,
operator|(
operator|(
name|BlobStoreImpl
operator|)
name|blobDb
operator|.
name|blobStore
operator|)
operator|.
name|getReferenceCount
argument_list|(
name|blobId
argument_list|)
operator|.
name|intValue
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
block|}
comment|/**      * Add Blob and commit, re-add same Blob and commit, Remove Blob (DO NOT commit), then stop (either by shutdown or simulated crash).      *      * Expect that the Blob is present after recovery.      */
annotation|@
name|Test
specifier|public
name|void
name|addCommit_addCommit_removeNoCommit
parameter_list|()
throws|throws
name|IOException
throws|,
name|BrokerPoolServiceException
throws|,
name|EXistException
block|{
specifier|final
name|Path
name|blobDbx
init|=
name|temporaryFolder
operator|.
name|getRoot
argument_list|()
operator|.
name|toPath
argument_list|()
operator|.
name|resolve
argument_list|(
literal|"blob.dbx"
argument_list|)
decl_stmt|;
specifier|final
name|Path
name|blobDir
init|=
name|temporaryFolder
operator|.
name|newFolder
argument_list|(
literal|"blob"
argument_list|)
operator|.
name|toPath
argument_list|()
decl_stmt|;
specifier|final
name|Tuple2
argument_list|<
name|byte
index|[]
argument_list|,
name|MessageDigest
argument_list|>
name|tempBin1
init|=
name|generateTestFile
argument_list|()
decl_stmt|;
comment|// write the data
try|try
init|(
specifier|final
name|BlobDb
name|blobDb
init|=
name|newBlobDb
argument_list|(
name|temporaryFolder
operator|.
name|getRoot
argument_list|()
operator|.
name|toPath
argument_list|()
argument_list|,
name|blobDbx
argument_list|,
name|blobDir
argument_list|)
init|)
block|{
name|blobDb
operator|.
name|blobStore
operator|.
name|open
argument_list|()
expr_stmt|;
name|addCommit
argument_list|(
name|blobDb
operator|.
name|transactionManager
argument_list|,
name|blobDb
operator|.
name|blobStore
argument_list|,
name|tempBin1
operator|.
name|_1
argument_list|)
expr_stmt|;
name|addCommit
argument_list|(
name|blobDb
operator|.
name|transactionManager
argument_list|,
name|blobDb
operator|.
name|blobStore
argument_list|,
name|tempBin1
operator|.
name|_1
argument_list|)
expr_stmt|;
name|removeNoCommit
argument_list|(
name|blobDb
operator|.
name|transactionManager
argument_list|,
name|blobDb
operator|.
name|blobStore
argument_list|,
name|tempBin1
operator|.
name|_1
argument_list|)
expr_stmt|;
block|}
comment|// NOTE: when BlobDB is closed by the ARM expression above it simulates a crash as BrokerPool.FORCE_CORRUPTION = true was set in #newBlobDb()
comment|// test the recovery
try|try
init|(
specifier|final
name|BlobDb
name|blobDb
init|=
name|newBlobDb
argument_list|(
name|temporaryFolder
operator|.
name|getRoot
argument_list|()
operator|.
name|toPath
argument_list|()
argument_list|,
name|blobDbx
argument_list|,
name|blobDir
argument_list|)
init|)
block|{
name|blobDb
operator|.
name|blobStore
operator|.
name|open
argument_list|()
expr_stmt|;
specifier|final
name|BlobId
name|blobId
init|=
operator|new
name|BlobId
argument_list|(
name|tempBin1
operator|.
name|_2
operator|.
name|getValue
argument_list|()
argument_list|)
decl_stmt|;
specifier|final
name|Tuple2
argument_list|<
name|byte
index|[]
argument_list|,
name|MessageDigest
argument_list|>
name|actual
init|=
name|getCommit
argument_list|(
name|blobDb
operator|.
name|transactionManager
argument_list|,
name|blobDb
operator|.
name|blobStore
argument_list|,
name|blobId
argument_list|)
decl_stmt|;
name|assertNotNull
argument_list|(
name|actual
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|tempBin1
operator|.
name|_2
argument_list|,
name|tempBin1
operator|.
name|_2
argument_list|)
expr_stmt|;
name|assertArrayEquals
argument_list|(
name|tempBin1
operator|.
name|_1
argument_list|,
name|tempBin1
operator|.
name|_1
argument_list|)
expr_stmt|;
if|if
condition|(
name|blobDb
operator|.
name|blobStore
operator|instanceof
name|BlobStoreImpl
condition|)
block|{
name|assertEquals
argument_list|(
literal|2
argument_list|,
operator|(
operator|(
name|BlobStoreImpl
operator|)
name|blobDb
operator|.
name|blobStore
operator|)
operator|.
name|getReferenceCount
argument_list|(
name|blobId
argument_list|)
operator|.
name|intValue
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
block|}
specifier|private
name|void
name|addCommit
parameter_list|(
specifier|final
name|TransactionManager
name|transactionManager
parameter_list|,
specifier|final
name|BlobStore
name|blobStore
parameter_list|,
specifier|final
name|byte
index|[]
name|blob
parameter_list|)
throws|throws
name|IOException
throws|,
name|TransactionException
block|{
try|try
init|(
specifier|final
name|InputStream
name|is
init|=
operator|new
name|FastByteArrayInputStream
argument_list|(
name|blob
argument_list|)
init|)
block|{
try|try
init|(
specifier|final
name|Txn
name|transaction
init|=
name|transactionManager
operator|.
name|beginTransaction
argument_list|()
init|)
block|{
name|blobStore
operator|.
name|add
argument_list|(
name|transaction
argument_list|,
name|is
argument_list|)
expr_stmt|;
name|transaction
operator|.
name|commit
argument_list|()
expr_stmt|;
block|}
block|}
block|}
specifier|private
name|void
name|addNoCommit
parameter_list|(
specifier|final
name|TransactionManager
name|transactionManager
parameter_list|,
specifier|final
name|BlobStore
name|blobStore
parameter_list|,
specifier|final
name|byte
index|[]
name|blob
parameter_list|)
throws|throws
name|IOException
throws|,
name|TransactionException
block|{
try|try
init|(
specifier|final
name|InputStream
name|is
init|=
operator|new
name|FastByteArrayInputStream
argument_list|(
name|blob
argument_list|)
init|)
block|{
specifier|final
name|Txn
name|transaction
init|=
name|transactionManager
operator|.
name|beginTransaction
argument_list|()
decl_stmt|;
name|blobStore
operator|.
name|add
argument_list|(
name|transaction
argument_list|,
name|is
argument_list|)
expr_stmt|;
comment|// NOTE must not use ARM to close the transaction, otherwise it will auto-abort!
block|}
block|}
specifier|private
name|void
name|removeCommit
parameter_list|(
specifier|final
name|TransactionManager
name|transactionManager
parameter_list|,
specifier|final
name|BlobStore
name|blobStore
parameter_list|,
specifier|final
name|byte
index|[]
name|blob
parameter_list|)
throws|throws
name|IOException
throws|,
name|TransactionException
block|{
specifier|final
name|StreamableDigest
name|streamableDigest
init|=
name|DIGEST_TYPE
operator|.
name|newStreamableDigest
argument_list|()
decl_stmt|;
name|streamableDigest
operator|.
name|update
argument_list|(
name|blob
argument_list|)
expr_stmt|;
specifier|final
name|BlobId
name|blobId
init|=
operator|new
name|BlobId
argument_list|(
name|streamableDigest
operator|.
name|getMessageDigest
argument_list|()
argument_list|)
decl_stmt|;
try|try
init|(
specifier|final
name|Txn
name|transaction
init|=
name|transactionManager
operator|.
name|beginTransaction
argument_list|()
init|)
block|{
name|blobStore
operator|.
name|remove
argument_list|(
name|transaction
argument_list|,
name|blobId
argument_list|)
expr_stmt|;
name|transaction
operator|.
name|commit
argument_list|()
expr_stmt|;
block|}
block|}
specifier|private
name|void
name|removeNoCommit
parameter_list|(
specifier|final
name|TransactionManager
name|transactionManager
parameter_list|,
specifier|final
name|BlobStore
name|blobStore
parameter_list|,
specifier|final
name|byte
index|[]
name|blob
parameter_list|)
throws|throws
name|IOException
throws|,
name|TransactionException
block|{
specifier|final
name|StreamableDigest
name|streamableDigest
init|=
name|DIGEST_TYPE
operator|.
name|newStreamableDigest
argument_list|()
decl_stmt|;
name|streamableDigest
operator|.
name|update
argument_list|(
name|blob
argument_list|)
expr_stmt|;
specifier|final
name|BlobId
name|blobId
init|=
operator|new
name|BlobId
argument_list|(
name|streamableDigest
operator|.
name|getMessageDigest
argument_list|()
argument_list|)
decl_stmt|;
specifier|final
name|Txn
name|transaction
init|=
name|transactionManager
operator|.
name|beginTransaction
argument_list|()
decl_stmt|;
name|blobStore
operator|.
name|remove
argument_list|(
name|transaction
argument_list|,
name|blobId
argument_list|)
expr_stmt|;
comment|// NOTE must not use ARM to close the transaction, otherwise it will auto-abort!
block|}
specifier|private
name|Tuple2
argument_list|<
name|byte
index|[]
argument_list|,
name|MessageDigest
argument_list|>
name|getCommit
parameter_list|(
specifier|final
name|TransactionManager
name|transactionManager
parameter_list|,
specifier|final
name|BlobStore
name|blobStore
parameter_list|,
specifier|final
name|BlobId
name|blobId
parameter_list|)
throws|throws
name|IOException
throws|,
name|TransactionException
block|{
try|try
init|(
specifier|final
name|Txn
name|transaction
init|=
name|transactionManager
operator|.
name|beginTransaction
argument_list|()
init|)
block|{
try|try
init|(
specifier|final
name|InputStream
name|is
init|=
name|blobStore
operator|.
name|get
argument_list|(
name|transaction
argument_list|,
name|blobId
argument_list|)
init|)
block|{
if|if
condition|(
name|is
operator|==
literal|null
condition|)
block|{
return|return
literal|null
return|;
block|}
return|return
name|readAll
argument_list|(
name|is
argument_list|)
return|;
block|}
finally|finally
block|{
name|transaction
operator|.
name|commit
argument_list|()
expr_stmt|;
block|}
block|}
block|}
specifier|private
name|BlobDb
name|newBlobDb
parameter_list|(
specifier|final
name|Path
name|journalDir
parameter_list|,
specifier|final
name|Path
name|blobDbx
parameter_list|,
specifier|final
name|Path
name|blobDir
parameter_list|)
throws|throws
name|BrokerPoolServiceException
throws|,
name|EXistException
block|{
specifier|final
name|Configuration
name|mockConfiguration
init|=
name|createNiceMock
argument_list|(
name|Configuration
operator|.
name|class
argument_list|)
decl_stmt|;
name|expect
argument_list|(
name|mockConfiguration
operator|.
name|getProperty
argument_list|(
name|Journal
operator|.
name|PROPERTY_RECOVERY_JOURNAL_DIR
argument_list|)
argument_list|)
operator|.
name|andReturn
argument_list|(
name|journalDir
argument_list|)
expr_stmt|;
name|expect
argument_list|(
name|mockConfiguration
operator|.
name|getProperty
argument_list|(
name|BrokerPool
operator|.
name|PROPERTY_RECOVERY_GROUP_COMMIT
argument_list|,
literal|false
argument_list|)
argument_list|)
operator|.
name|andReturn
argument_list|(
literal|false
argument_list|)
expr_stmt|;
name|expect
argument_list|(
name|mockConfiguration
operator|.
name|getProperty
argument_list|(
name|PROPERTY_RECOVERY_SYNC_ON_COMMIT
argument_list|,
literal|true
argument_list|)
argument_list|)
operator|.
name|andReturn
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|expect
argument_list|(
name|mockConfiguration
operator|.
name|getProperty
argument_list|(
name|PROPERTY_RECOVERY_SIZE_MIN
argument_list|,
literal|1
argument_list|)
argument_list|)
operator|.
name|andReturn
argument_list|(
literal|1
argument_list|)
expr_stmt|;
name|expect
argument_list|(
name|mockConfiguration
operator|.
name|getProperty
argument_list|(
name|PROPERTY_RECOVERY_SIZE_LIMIT
argument_list|,
literal|100
argument_list|)
argument_list|)
operator|.
name|andReturn
argument_list|(
literal|100
argument_list|)
expr_stmt|;
name|replay
argument_list|(
name|mockConfiguration
argument_list|)
expr_stmt|;
specifier|final
name|BrokerPool
name|mockBrokerPool
init|=
name|createNiceMock
argument_list|(
name|BrokerPool
operator|.
name|class
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|cleanShutdown
condition|)
block|{
name|mockBrokerPool
operator|.
name|FORCE_CORRUPTION
operator|=
literal|true
expr_stmt|;
comment|// NOTE: needed so we don't checkpoint at clean shutdown and can simulate a crash!
block|}
specifier|final
name|SecurityManager
name|mockSecurityManager
init|=
name|createNiceMock
argument_list|(
name|SecurityManager
operator|.
name|class
argument_list|)
decl_stmt|;
specifier|final
name|Subject
name|mockSystemSubject
init|=
name|createNiceMock
argument_list|(
name|Subject
operator|.
name|class
argument_list|)
decl_stmt|;
name|expect
argument_list|(
name|mockBrokerPool
operator|.
name|getSecurityManager
argument_list|()
argument_list|)
operator|.
name|andReturn
argument_list|(
name|mockSecurityManager
argument_list|)
operator|.
name|anyTimes
argument_list|()
expr_stmt|;
name|expect
argument_list|(
name|mockSecurityManager
operator|.
name|getSystemSubject
argument_list|()
argument_list|)
operator|.
name|andReturn
argument_list|(
name|mockSystemSubject
argument_list|)
operator|.
name|anyTimes
argument_list|()
expr_stmt|;
name|replay
argument_list|(
name|mockSecurityManager
argument_list|)
expr_stmt|;
specifier|final
name|JournalManager
name|journalManager
init|=
operator|new
name|JournalManager
argument_list|()
decl_stmt|;
name|journalManager
operator|.
name|configure
argument_list|(
name|mockConfiguration
argument_list|)
expr_stmt|;
specifier|final
name|DBBroker
name|mockSystemBroker
init|=
name|createNiceMock
argument_list|(
name|DBBroker
operator|.
name|class
argument_list|)
decl_stmt|;
specifier|final
name|SystemTaskManager
name|mockSystemTaskManager
init|=
name|createNiceMock
argument_list|(
name|SystemTaskManager
operator|.
name|class
argument_list|)
decl_stmt|;
name|mockSystemTaskManager
operator|.
name|processTasks
argument_list|(
name|mockSystemBroker
argument_list|)
expr_stmt|;
name|expectLastCall
argument_list|()
operator|.
name|anyTimes
argument_list|()
expr_stmt|;
name|replay
argument_list|(
name|mockSystemTaskManager
argument_list|)
expr_stmt|;
specifier|final
name|DBBroker
name|mockBroker
init|=
name|createNiceMock
argument_list|(
name|DBBroker
operator|.
name|class
argument_list|)
decl_stmt|;
name|expect
argument_list|(
name|mockBroker
operator|.
name|getBrokerPool
argument_list|()
argument_list|)
operator|.
name|andReturn
argument_list|(
name|mockBrokerPool
argument_list|)
operator|.
name|anyTimes
argument_list|()
expr_stmt|;
name|expect
argument_list|(
name|mockBrokerPool
operator|.
name|getBroker
argument_list|()
argument_list|)
operator|.
name|andReturn
argument_list|(
name|mockBroker
argument_list|)
operator|.
name|anyTimes
argument_list|()
expr_stmt|;
name|replay
argument_list|(
name|mockBroker
argument_list|)
expr_stmt|;
specifier|final
name|TransactionManager
name|transactionManager
init|=
operator|new
name|TransactionManager
argument_list|(
name|mockBrokerPool
argument_list|,
name|Optional
operator|.
name|of
argument_list|(
name|journalManager
argument_list|)
argument_list|,
name|mockSystemTaskManager
argument_list|)
decl_stmt|;
specifier|final
name|Scheduler
name|mockScheduler
init|=
name|createNiceMock
argument_list|(
name|Scheduler
operator|.
name|class
argument_list|)
decl_stmt|;
specifier|final
name|BlobStore
name|blobStore
init|=
operator|new
name|BlobStoreImpl
argument_list|(
name|mockBrokerPool
argument_list|,
name|blobDbx
argument_list|,
name|blobDir
argument_list|,
name|DIGEST_TYPE
argument_list|)
decl_stmt|;
name|expect
argument_list|(
name|mockBrokerPool
operator|.
name|getConfiguration
argument_list|()
argument_list|)
operator|.
name|andReturn
argument_list|(
name|mockConfiguration
argument_list|)
operator|.
name|anyTimes
argument_list|()
expr_stmt|;
name|expect
argument_list|(
name|mockBrokerPool
operator|.
name|getScheduler
argument_list|()
argument_list|)
operator|.
name|andReturn
argument_list|(
name|mockScheduler
argument_list|)
expr_stmt|;
name|expect
argument_list|(
name|mockScheduler
operator|.
name|createPeriodicJob
argument_list|(
name|anyLong
argument_list|()
argument_list|,
name|anyObject
argument_list|(
name|FileLockHeartBeat
operator|.
name|class
argument_list|)
argument_list|,
name|anyLong
argument_list|()
argument_list|,
name|anyObject
argument_list|(
name|Properties
operator|.
name|class
argument_list|)
argument_list|)
argument_list|)
operator|.
name|andReturn
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|expect
argument_list|(
name|mockBrokerPool
operator|.
name|getTransactionManager
argument_list|()
argument_list|)
operator|.
name|andReturn
argument_list|(
name|transactionManager
argument_list|)
operator|.
name|anyTimes
argument_list|()
expr_stmt|;
name|expect
argument_list|(
name|mockBrokerPool
operator|.
name|getThreadGroup
argument_list|()
argument_list|)
operator|.
name|andReturn
argument_list|(
name|Thread
operator|.
name|currentThread
argument_list|()
operator|.
name|getThreadGroup
argument_list|()
argument_list|)
expr_stmt|;
name|expect
argument_list|(
name|mockBrokerPool
operator|.
name|getId
argument_list|()
argument_list|)
operator|.
name|andReturn
argument_list|(
literal|"BlobStoreRecoveryTest"
argument_list|)
operator|.
name|times
argument_list|(
literal|2
argument_list|)
expr_stmt|;
name|expect
argument_list|(
name|mockBrokerPool
operator|.
name|getJournalManager
argument_list|()
argument_list|)
operator|.
name|andReturn
argument_list|(
name|Optional
operator|.
name|of
argument_list|(
name|journalManager
argument_list|)
argument_list|)
operator|.
name|anyTimes
argument_list|()
expr_stmt|;
name|expect
argument_list|(
name|mockBrokerPool
operator|.
name|getBlobStore
argument_list|()
argument_list|)
operator|.
name|andReturn
argument_list|(
name|blobStore
argument_list|)
operator|.
name|anyTimes
argument_list|()
expr_stmt|;
name|replay
argument_list|(
name|mockBrokerPool
argument_list|)
expr_stmt|;
name|journalManager
operator|.
name|prepare
argument_list|(
name|mockBrokerPool
argument_list|)
expr_stmt|;
specifier|final
name|RecoveryManager
name|recoveryManager
init|=
operator|new
name|RecoveryManager
argument_list|(
name|mockBroker
argument_list|,
name|journalManager
argument_list|,
literal|false
argument_list|)
decl_stmt|;
name|recoveryManager
operator|.
name|recover
argument_list|()
expr_stmt|;
return|return
operator|new
name|BlobDb
argument_list|(
name|transactionManager
argument_list|,
name|blobStore
argument_list|)
return|;
block|}
specifier|private
specifier|static
class|class
name|BlobDb
implements|implements
name|AutoCloseable
block|{
specifier|public
specifier|final
name|TransactionManager
name|transactionManager
decl_stmt|;
specifier|public
specifier|final
name|BlobStore
name|blobStore
decl_stmt|;
specifier|public
name|BlobDb
parameter_list|(
specifier|final
name|TransactionManager
name|transactionManager
parameter_list|,
specifier|final
name|BlobStore
name|blobStore
parameter_list|)
block|{
name|this
operator|.
name|transactionManager
operator|=
name|transactionManager
expr_stmt|;
name|this
operator|.
name|blobStore
operator|=
name|blobStore
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|close
parameter_list|()
throws|throws
name|IOException
block|{
name|blobStore
operator|.
name|close
argument_list|()
expr_stmt|;
name|transactionManager
operator|.
name|shutdown
argument_list|()
expr_stmt|;
block|}
block|}
specifier|private
name|Tuple2
argument_list|<
name|byte
index|[]
argument_list|,
name|MessageDigest
argument_list|>
name|readAll
parameter_list|(
name|InputStream
name|is
parameter_list|)
throws|throws
name|IOException
block|{
specifier|final
name|StreamableDigest
name|streamableDigest
init|=
name|DIGEST_TYPE
operator|.
name|newStreamableDigest
argument_list|()
decl_stmt|;
name|is
operator|=
operator|new
name|DigestInputStream
argument_list|(
name|is
argument_list|,
name|streamableDigest
argument_list|)
expr_stmt|;
try|try
init|(
specifier|final
name|FastByteArrayOutputStream
name|os
init|=
operator|new
name|FastByteArrayOutputStream
argument_list|()
init|)
block|{
name|os
operator|.
name|write
argument_list|(
name|is
argument_list|)
expr_stmt|;
return|return
name|Tuple
argument_list|(
name|os
operator|.
name|toByteArray
argument_list|()
argument_list|,
name|streamableDigest
operator|.
name|copyMessageDigest
argument_list|()
argument_list|)
return|;
block|}
block|}
specifier|private
name|Tuple2
argument_list|<
name|byte
index|[]
argument_list|,
name|MessageDigest
argument_list|>
name|generateTestFile
parameter_list|()
block|{
comment|// generate random data
specifier|final
name|byte
index|[]
name|data
init|=
operator|new
name|byte
index|[
literal|1024
operator|*
literal|1024
index|]
decl_stmt|;
comment|// 1MB
name|random
operator|.
name|nextBytes
argument_list|(
name|data
argument_list|)
expr_stmt|;
comment|// get the checksum of the random data
specifier|final
name|StreamableDigest
name|streamableDigest
init|=
name|DIGEST_TYPE
operator|.
name|newStreamableDigest
argument_list|()
decl_stmt|;
name|streamableDigest
operator|.
name|update
argument_list|(
name|data
argument_list|)
expr_stmt|;
specifier|final
name|MessageDigest
name|expectedDataDigest
init|=
name|streamableDigest
operator|.
name|copyMessageDigest
argument_list|()
decl_stmt|;
return|return
name|Tuple
argument_list|(
name|data
argument_list|,
name|expectedDataDigest
argument_list|)
return|;
block|}
block|}
end_class

end_unit

