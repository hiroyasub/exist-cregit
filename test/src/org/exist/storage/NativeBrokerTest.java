begin_unit|revision:1.0.0;language:Java;cregit-version:0.0.1
begin_package
package|package
name|org
operator|.
name|exist
operator|.
name|storage
package|;
end_package

begin_import
import|import
name|org
operator|.
name|easymock
operator|.
name|Capture
import|;
end_import

begin_import
import|import
name|org
operator|.
name|easymock
operator|.
name|EasyMock
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|collections
operator|.
name|Collection
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|dom
operator|.
name|persistent
operator|.
name|DocumentImpl
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|security
operator|.
name|Permission
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|security
operator|.
name|PermissionDeniedException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|security
operator|.
name|Subject
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|util
operator|.
name|LockException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|xmldb
operator|.
name|XmldbURI
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Ignore
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|nio
operator|.
name|file
operator|.
name|Files
import|;
end_import

begin_import
import|import
name|java
operator|.
name|nio
operator|.
name|file
operator|.
name|Path
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|*
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|easymock
operator|.
name|EasyMock
operator|.
name|*
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertEquals
import|;
end_import

begin_class
specifier|public
class|class
name|NativeBrokerTest
block|{
comment|/**      * When copying a Collection (/db/test/source) where      * we have execute+read access and      * which has no descendant documents or collections in it      * to the destination /db/test/dest (which does not already exist)      * and we have execute+write access on /db/test      * we should be allowed to copy the Collection.      */
annotation|@
name|Test
specifier|public
name|void
name|copyCollection_noDescendants_toNonExistingDest_canWriteDest
parameter_list|()
throws|throws
name|LockException
throws|,
name|PermissionDeniedException
block|{
specifier|final
name|XmldbURI
name|src
init|=
name|XmldbURI
operator|.
name|create
argument_list|(
literal|"/db/test/source"
argument_list|)
decl_stmt|;
specifier|final
name|XmldbURI
name|dest
init|=
name|XmldbURI
operator|.
name|create
argument_list|(
literal|"/db/test"
argument_list|)
decl_stmt|;
specifier|final
name|XmldbURI
name|newName
init|=
name|XmldbURI
operator|.
name|create
argument_list|(
literal|"dest"
argument_list|)
decl_stmt|;
specifier|final
name|Collection
name|srcCollection
init|=
name|EasyMock
operator|.
name|createStrictMock
argument_list|(
name|Collection
operator|.
name|class
argument_list|)
decl_stmt|;
specifier|final
name|Permission
name|srcPermissions
init|=
name|EasyMock
operator|.
name|createStrictMock
argument_list|(
name|Permission
operator|.
name|class
argument_list|)
decl_stmt|;
specifier|final
name|Collection
name|destCollection
init|=
name|EasyMock
operator|.
name|createStrictMock
argument_list|(
name|Collection
operator|.
name|class
argument_list|)
decl_stmt|;
specifier|final
name|Permission
name|destPermissions
init|=
name|EasyMock
operator|.
name|createStrictMock
argument_list|(
name|Permission
operator|.
name|class
argument_list|)
decl_stmt|;
specifier|final
name|Collection
name|newDestCollection
init|=
literal|null
decl_stmt|;
specifier|final
name|NativeBroker
name|broker
init|=
name|EasyMock
operator|.
name|createMockBuilder
argument_list|(
name|NativeBroker
operator|.
name|class
argument_list|)
operator|.
name|addMockedMethod
argument_list|(
literal|"getCollection"
argument_list|)
operator|.
name|addMockedMethod
argument_list|(
literal|"getCurrentSubject"
argument_list|)
operator|.
name|createStrictMock
argument_list|()
decl_stmt|;
specifier|final
name|Subject
name|subject
init|=
name|EasyMock
operator|.
name|createStrictMock
argument_list|(
name|Subject
operator|.
name|class
argument_list|)
decl_stmt|;
comment|//grant EXECUTE and READ permissions on the src
name|expect
argument_list|(
name|srcCollection
operator|.
name|getPermissionsNoLock
argument_list|()
argument_list|)
operator|.
name|andReturn
argument_list|(
name|srcPermissions
argument_list|)
expr_stmt|;
name|expect
argument_list|(
name|broker
operator|.
name|getCurrentSubject
argument_list|()
argument_list|)
operator|.
name|andReturn
argument_list|(
name|subject
argument_list|)
expr_stmt|;
name|expect
argument_list|(
name|srcPermissions
operator|.
name|validate
argument_list|(
name|subject
argument_list|,
name|Permission
operator|.
name|EXECUTE
operator||
name|Permission
operator|.
name|READ
argument_list|)
argument_list|)
operator|.
name|andReturn
argument_list|(
literal|true
argument_list|)
expr_stmt|;
comment|//grant EXECUTE and WRITE permission on the dest
name|expect
argument_list|(
name|destCollection
operator|.
name|getURI
argument_list|()
argument_list|)
operator|.
name|andReturn
argument_list|(
name|dest
argument_list|)
expr_stmt|;
specifier|final
name|Capture
argument_list|<
name|XmldbURI
argument_list|>
name|newDestURICapture
init|=
name|newCapture
argument_list|()
decl_stmt|;
name|expect
argument_list|(
name|broker
operator|.
name|getCollection
argument_list|(
name|capture
argument_list|(
name|newDestURICapture
argument_list|)
argument_list|)
argument_list|)
operator|.
name|andReturn
argument_list|(
name|newDestCollection
argument_list|)
expr_stmt|;
name|expect
argument_list|(
name|destCollection
operator|.
name|getPermissionsNoLock
argument_list|()
argument_list|)
operator|.
name|andReturn
argument_list|(
name|destPermissions
argument_list|)
expr_stmt|;
name|expect
argument_list|(
name|broker
operator|.
name|getCurrentSubject
argument_list|()
argument_list|)
operator|.
name|andReturn
argument_list|(
name|subject
argument_list|)
expr_stmt|;
name|expect
argument_list|(
name|destPermissions
operator|.
name|validate
argument_list|(
name|subject
argument_list|,
name|Permission
operator|.
name|EXECUTE
operator||
name|Permission
operator|.
name|WRITE
argument_list|)
argument_list|)
operator|.
name|andReturn
argument_list|(
literal|true
argument_list|)
expr_stmt|;
comment|//no sub-documents
name|expect
argument_list|(
name|srcCollection
operator|.
name|iterator
argument_list|(
name|broker
argument_list|)
argument_list|)
operator|.
name|andReturn
argument_list|(
name|Collections
operator|.
name|emptyIterator
argument_list|()
argument_list|)
expr_stmt|;
comment|//no sub-collections
name|expect
argument_list|(
name|srcCollection
operator|.
name|collectionIterator
argument_list|(
name|broker
argument_list|)
argument_list|)
operator|.
name|andReturn
argument_list|(
name|Collections
operator|.
name|emptyIterator
argument_list|()
argument_list|)
expr_stmt|;
comment|//test below
name|replay
argument_list|(
name|destCollection
argument_list|,
name|destPermissions
argument_list|,
name|srcCollection
argument_list|,
name|srcPermissions
argument_list|,
name|subject
argument_list|,
name|broker
argument_list|)
expr_stmt|;
comment|//run the test
name|broker
operator|.
name|checkPermissionsForCopy
argument_list|(
name|srcCollection
argument_list|,
name|destCollection
argument_list|,
name|newName
argument_list|)
expr_stmt|;
name|verify
argument_list|(
name|destCollection
argument_list|,
name|destPermissions
argument_list|,
name|srcCollection
argument_list|,
name|srcPermissions
argument_list|,
name|subject
argument_list|,
name|broker
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|dest
operator|.
name|append
argument_list|(
name|newName
argument_list|)
argument_list|,
name|newDestURICapture
operator|.
name|getValue
argument_list|()
argument_list|)
expr_stmt|;
block|}
comment|/**      * When copying a Collection (/db/test/source) where      * we have execute+read access and      * which has no descendant documents or collections in it,      *      * to the destination /db/test/dest (which does not already exist)      * and we DO NOT have execute+write access on /db/test      * we should NOT be allowed to copy the Collection.      */
annotation|@
name|Test
argument_list|(
name|expected
operator|=
name|PermissionDeniedException
operator|.
name|class
argument_list|)
specifier|public
name|void
name|copyCollection_noDescendants_toNonExistingDest_cannotWriteDest
parameter_list|()
throws|throws
name|LockException
throws|,
name|PermissionDeniedException
block|{
specifier|final
name|XmldbURI
name|src
init|=
name|XmldbURI
operator|.
name|create
argument_list|(
literal|"/db/test/source"
argument_list|)
decl_stmt|;
specifier|final
name|XmldbURI
name|dest
init|=
name|XmldbURI
operator|.
name|create
argument_list|(
literal|"/db/test"
argument_list|)
decl_stmt|;
specifier|final
name|XmldbURI
name|newName
init|=
name|XmldbURI
operator|.
name|create
argument_list|(
literal|"dest"
argument_list|)
decl_stmt|;
specifier|final
name|Collection
name|srcCollection
init|=
name|EasyMock
operator|.
name|createStrictMock
argument_list|(
name|Collection
operator|.
name|class
argument_list|)
decl_stmt|;
specifier|final
name|Permission
name|srcPermissions
init|=
name|EasyMock
operator|.
name|createStrictMock
argument_list|(
name|Permission
operator|.
name|class
argument_list|)
decl_stmt|;
specifier|final
name|Collection
name|destCollection
init|=
name|EasyMock
operator|.
name|createStrictMock
argument_list|(
name|Collection
operator|.
name|class
argument_list|)
decl_stmt|;
specifier|final
name|Permission
name|destPermissions
init|=
name|EasyMock
operator|.
name|createStrictMock
argument_list|(
name|Permission
operator|.
name|class
argument_list|)
decl_stmt|;
specifier|final
name|Collection
name|newDestCollection
init|=
literal|null
decl_stmt|;
comment|//EasyMock.createMock(Collection.class);
specifier|final
name|NativeBroker
name|broker
init|=
name|EasyMock
operator|.
name|createMockBuilder
argument_list|(
name|NativeBroker
operator|.
name|class
argument_list|)
operator|.
name|addMockedMethod
argument_list|(
literal|"getCollection"
argument_list|)
operator|.
name|addMockedMethod
argument_list|(
literal|"getCurrentSubject"
argument_list|)
operator|.
name|createStrictMock
argument_list|()
decl_stmt|;
specifier|final
name|Subject
name|subject
init|=
name|EasyMock
operator|.
name|createStrictMock
argument_list|(
name|Subject
operator|.
name|class
argument_list|)
decl_stmt|;
comment|//grant EXECUTE and READ permissions on the src
name|expect
argument_list|(
name|srcCollection
operator|.
name|getPermissionsNoLock
argument_list|()
argument_list|)
operator|.
name|andReturn
argument_list|(
name|srcPermissions
argument_list|)
expr_stmt|;
name|expect
argument_list|(
name|broker
operator|.
name|getCurrentSubject
argument_list|()
argument_list|)
operator|.
name|andReturn
argument_list|(
name|subject
argument_list|)
expr_stmt|;
name|expect
argument_list|(
name|srcPermissions
operator|.
name|validate
argument_list|(
name|subject
argument_list|,
name|Permission
operator|.
name|EXECUTE
operator||
name|Permission
operator|.
name|READ
argument_list|)
argument_list|)
operator|.
name|andReturn
argument_list|(
literal|true
argument_list|)
expr_stmt|;
comment|//grant EXECUTE and WRITE permission on the dest
name|expect
argument_list|(
name|destCollection
operator|.
name|getURI
argument_list|()
argument_list|)
operator|.
name|andReturn
argument_list|(
name|dest
argument_list|)
expr_stmt|;
specifier|final
name|Capture
argument_list|<
name|XmldbURI
argument_list|>
name|newDestURICapture
init|=
name|newCapture
argument_list|()
decl_stmt|;
name|expect
argument_list|(
name|broker
operator|.
name|getCollection
argument_list|(
name|capture
argument_list|(
name|newDestURICapture
argument_list|)
argument_list|)
argument_list|)
operator|.
name|andReturn
argument_list|(
name|newDestCollection
argument_list|)
expr_stmt|;
name|expect
argument_list|(
name|destCollection
operator|.
name|getPermissionsNoLock
argument_list|()
argument_list|)
operator|.
name|andReturn
argument_list|(
name|destPermissions
argument_list|)
expr_stmt|;
name|expect
argument_list|(
name|broker
operator|.
name|getCurrentSubject
argument_list|()
argument_list|)
operator|.
name|andReturn
argument_list|(
name|subject
argument_list|)
expr_stmt|;
name|expect
argument_list|(
name|destPermissions
operator|.
name|validate
argument_list|(
name|subject
argument_list|,
name|Permission
operator|.
name|EXECUTE
operator||
name|Permission
operator|.
name|WRITE
argument_list|)
argument_list|)
operator|.
name|andReturn
argument_list|(
literal|false
argument_list|)
expr_stmt|;
comment|//expectations for exception that should be thrown
name|expect
argument_list|(
name|srcCollection
operator|.
name|getURI
argument_list|()
argument_list|)
operator|.
name|andReturn
argument_list|(
name|src
argument_list|)
expr_stmt|;
name|expect
argument_list|(
name|destCollection
operator|.
name|getURI
argument_list|()
argument_list|)
operator|.
name|andReturn
argument_list|(
name|dest
argument_list|)
expr_stmt|;
name|expect
argument_list|(
name|broker
operator|.
name|getCurrentSubject
argument_list|()
argument_list|)
operator|.
name|andReturn
argument_list|(
name|subject
argument_list|)
expr_stmt|;
name|expect
argument_list|(
name|subject
operator|.
name|getName
argument_list|()
argument_list|)
operator|.
name|andReturn
argument_list|(
literal|"Fake user"
argument_list|)
expr_stmt|;
comment|//test below
name|replay
argument_list|(
name|subject
argument_list|,
name|destCollection
argument_list|,
name|destPermissions
argument_list|,
name|srcCollection
argument_list|,
name|srcPermissions
argument_list|,
name|broker
argument_list|)
expr_stmt|;
comment|//run the test
name|broker
operator|.
name|checkPermissionsForCopy
argument_list|(
name|srcCollection
argument_list|,
name|destCollection
argument_list|,
name|newName
argument_list|)
expr_stmt|;
comment|//not actually called, but here for showing intention
name|verify
argument_list|(
name|subject
argument_list|,
name|destCollection
argument_list|,
name|destPermissions
argument_list|,
name|srcCollection
argument_list|,
name|srcPermissions
argument_list|,
name|broker
argument_list|)
expr_stmt|;
block|}
comment|/**      * When copying a Collection (/db/test/source) where      * we have execute+read access and      * which has one descendant document (on which we have read access)      * in it,      *      * to the destination /db/test/dest (which does not already exist)      * and we have execute+write access on /db/test      * we should be allowed to copy the Collection.      */
annotation|@
name|Test
specifier|public
name|void
name|copyCollection_oneSubDoc_toNonExistingDest_canWriteDest
parameter_list|()
throws|throws
name|LockException
throws|,
name|PermissionDeniedException
block|{
specifier|final
name|XmldbURI
name|src
init|=
name|XmldbURI
operator|.
name|create
argument_list|(
literal|"/db/test/source"
argument_list|)
decl_stmt|;
specifier|final
name|XmldbURI
name|dest
init|=
name|XmldbURI
operator|.
name|create
argument_list|(
literal|"/db/test"
argument_list|)
decl_stmt|;
specifier|final
name|XmldbURI
name|newName
init|=
name|XmldbURI
operator|.
name|create
argument_list|(
literal|"dest"
argument_list|)
decl_stmt|;
specifier|final
name|Collection
name|srcCollection
init|=
name|EasyMock
operator|.
name|createStrictMock
argument_list|(
name|Collection
operator|.
name|class
argument_list|)
decl_stmt|;
specifier|final
name|Permission
name|srcPermissions
init|=
name|EasyMock
operator|.
name|createStrictMock
argument_list|(
name|Permission
operator|.
name|class
argument_list|)
decl_stmt|;
specifier|final
name|DocumentImpl
name|srcSubDocument
init|=
name|EasyMock
operator|.
name|createStrictMock
argument_list|(
name|DocumentImpl
operator|.
name|class
argument_list|)
decl_stmt|;
specifier|final
name|Permission
name|srcSubDocumentPermissions
init|=
name|EasyMock
operator|.
name|createStrictMock
argument_list|(
name|Permission
operator|.
name|class
argument_list|)
decl_stmt|;
specifier|final
name|Collection
name|destCollection
init|=
name|EasyMock
operator|.
name|createStrictMock
argument_list|(
name|Collection
operator|.
name|class
argument_list|)
decl_stmt|;
specifier|final
name|Permission
name|destPermissions
init|=
name|EasyMock
operator|.
name|createStrictMock
argument_list|(
name|Permission
operator|.
name|class
argument_list|)
decl_stmt|;
specifier|final
name|Collection
name|newDestCollection
init|=
literal|null
decl_stmt|;
specifier|final
name|NativeBroker
name|broker
init|=
name|EasyMock
operator|.
name|createMockBuilder
argument_list|(
name|NativeBroker
operator|.
name|class
argument_list|)
operator|.
name|addMockedMethod
argument_list|(
literal|"getCollection"
argument_list|)
operator|.
name|addMockedMethod
argument_list|(
literal|"getCurrentSubject"
argument_list|)
operator|.
name|createStrictMock
argument_list|()
decl_stmt|;
specifier|final
name|Subject
name|subject
init|=
name|EasyMock
operator|.
name|createStrictMock
argument_list|(
name|Subject
operator|.
name|class
argument_list|)
decl_stmt|;
comment|//grant EXECUTE and READ permissions on the src
name|expect
argument_list|(
name|srcCollection
operator|.
name|getPermissionsNoLock
argument_list|()
argument_list|)
operator|.
name|andReturn
argument_list|(
name|srcPermissions
argument_list|)
expr_stmt|;
name|expect
argument_list|(
name|broker
operator|.
name|getCurrentSubject
argument_list|()
argument_list|)
operator|.
name|andReturn
argument_list|(
name|subject
argument_list|)
expr_stmt|;
name|expect
argument_list|(
name|srcPermissions
operator|.
name|validate
argument_list|(
name|subject
argument_list|,
name|Permission
operator|.
name|EXECUTE
operator||
name|Permission
operator|.
name|READ
argument_list|)
argument_list|)
operator|.
name|andReturn
argument_list|(
literal|true
argument_list|)
expr_stmt|;
comment|//grant EXECUTE and WRITE permission on the dest
name|expect
argument_list|(
name|destCollection
operator|.
name|getURI
argument_list|()
argument_list|)
operator|.
name|andReturn
argument_list|(
name|dest
argument_list|)
expr_stmt|;
specifier|final
name|Capture
argument_list|<
name|XmldbURI
argument_list|>
name|newDestURICapture
init|=
name|newCapture
argument_list|()
decl_stmt|;
name|expect
argument_list|(
name|broker
operator|.
name|getCollection
argument_list|(
name|capture
argument_list|(
name|newDestURICapture
argument_list|)
argument_list|)
argument_list|)
operator|.
name|andReturn
argument_list|(
name|newDestCollection
argument_list|)
expr_stmt|;
name|expect
argument_list|(
name|destCollection
operator|.
name|getPermissionsNoLock
argument_list|()
argument_list|)
operator|.
name|andReturn
argument_list|(
name|destPermissions
argument_list|)
expr_stmt|;
name|expect
argument_list|(
name|broker
operator|.
name|getCurrentSubject
argument_list|()
argument_list|)
operator|.
name|andReturn
argument_list|(
name|subject
argument_list|)
expr_stmt|;
name|expect
argument_list|(
name|destPermissions
operator|.
name|validate
argument_list|(
name|subject
argument_list|,
name|Permission
operator|.
name|EXECUTE
operator||
name|Permission
operator|.
name|WRITE
argument_list|)
argument_list|)
operator|.
name|andReturn
argument_list|(
literal|true
argument_list|)
expr_stmt|;
comment|//one sub-document with READ permission
name|expect
argument_list|(
name|srcCollection
operator|.
name|iterator
argument_list|(
name|broker
argument_list|)
argument_list|)
operator|.
name|andReturn
argument_list|(
operator|new
name|ArrayIterator
argument_list|<>
argument_list|(
name|srcSubDocument
argument_list|)
argument_list|)
expr_stmt|;
name|expect
argument_list|(
name|srcSubDocument
operator|.
name|getPermissions
argument_list|()
argument_list|)
operator|.
name|andReturn
argument_list|(
name|srcSubDocumentPermissions
argument_list|)
expr_stmt|;
name|expect
argument_list|(
name|broker
operator|.
name|getCurrentSubject
argument_list|()
argument_list|)
operator|.
name|andReturn
argument_list|(
name|subject
argument_list|)
expr_stmt|;
name|expect
argument_list|(
name|srcSubDocumentPermissions
operator|.
name|validate
argument_list|(
name|subject
argument_list|,
name|Permission
operator|.
name|READ
argument_list|)
argument_list|)
operator|.
name|andReturn
argument_list|(
literal|true
argument_list|)
expr_stmt|;
comment|//no sub-collections
name|expect
argument_list|(
name|srcCollection
operator|.
name|collectionIterator
argument_list|(
name|broker
argument_list|)
argument_list|)
operator|.
name|andReturn
argument_list|(
name|Collections
operator|.
name|emptyIterator
argument_list|()
argument_list|)
expr_stmt|;
comment|//test below
name|replay
argument_list|(
name|srcSubDocumentPermissions
argument_list|,
name|srcSubDocument
argument_list|,
name|destCollection
argument_list|,
name|destPermissions
argument_list|,
name|srcCollection
argument_list|,
name|srcPermissions
argument_list|,
name|subject
argument_list|,
name|broker
argument_list|)
expr_stmt|;
comment|//run the test
name|broker
operator|.
name|checkPermissionsForCopy
argument_list|(
name|srcCollection
argument_list|,
name|destCollection
argument_list|,
name|newName
argument_list|)
expr_stmt|;
name|verify
argument_list|(
name|srcSubDocumentPermissions
argument_list|,
name|srcSubDocument
argument_list|,
name|destCollection
argument_list|,
name|destPermissions
argument_list|,
name|srcCollection
argument_list|,
name|srcPermissions
argument_list|,
name|subject
argument_list|,
name|broker
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|dest
operator|.
name|append
argument_list|(
name|newName
argument_list|)
argument_list|,
name|newDestURICapture
operator|.
name|getValue
argument_list|()
argument_list|)
expr_stmt|;
block|}
comment|/**      * When copying a Collection (/db/test/source) where      * we have execute+read access and      * which has one descendant document (on which we have read access)      * and one descendant collection (on which we have read+execute access) in it,      *      * to the destination /db/test/dest (which does not already exist)      * and we have execute+write access on /db/test      * we should be allowed to copy the Collection.      */
annotation|@
name|Ignore
annotation|@
name|Test
specifier|public
name|void
name|copyCollection_oneSubDoc_oneSubColl_toNonExistingDest_canWriteDest
parameter_list|()
throws|throws
name|LockException
throws|,
name|PermissionDeniedException
block|{
specifier|final
name|XmldbURI
name|src
init|=
name|XmldbURI
operator|.
name|create
argument_list|(
literal|"/db/test/source"
argument_list|)
decl_stmt|;
specifier|final
name|XmldbURI
name|dest
init|=
name|XmldbURI
operator|.
name|create
argument_list|(
literal|"/db/test"
argument_list|)
decl_stmt|;
specifier|final
name|XmldbURI
name|newName
init|=
name|XmldbURI
operator|.
name|create
argument_list|(
literal|"dest"
argument_list|)
decl_stmt|;
specifier|final
name|Collection
name|srcCollection
init|=
name|EasyMock
operator|.
name|createStrictMock
argument_list|(
name|Collection
operator|.
name|class
argument_list|)
decl_stmt|;
specifier|final
name|Permission
name|srcPermissions
init|=
name|EasyMock
operator|.
name|createStrictMock
argument_list|(
name|Permission
operator|.
name|class
argument_list|)
decl_stmt|;
specifier|final
name|DocumentImpl
name|srcSubDocument
init|=
name|EasyMock
operator|.
name|createStrictMock
argument_list|(
name|DocumentImpl
operator|.
name|class
argument_list|)
decl_stmt|;
specifier|final
name|Permission
name|srcSubDocumentPermissions
init|=
name|EasyMock
operator|.
name|createStrictMock
argument_list|(
name|Permission
operator|.
name|class
argument_list|)
decl_stmt|;
specifier|final
name|XmldbURI
name|srcSubCollectionName
init|=
name|XmldbURI
operator|.
name|create
argument_list|(
literal|"sub-collection"
argument_list|)
decl_stmt|;
specifier|final
name|XmldbURI
name|srcSubCollectionUri
init|=
name|src
operator|.
name|append
argument_list|(
name|srcSubCollectionName
argument_list|)
decl_stmt|;
specifier|final
name|Collection
name|srcSubCollection
init|=
name|EasyMock
operator|.
name|createStrictMock
argument_list|(
name|Collection
operator|.
name|class
argument_list|)
decl_stmt|;
specifier|final
name|Permission
name|srcSubCollectionPermissions
init|=
name|EasyMock
operator|.
name|createStrictMock
argument_list|(
name|Permission
operator|.
name|class
argument_list|)
decl_stmt|;
specifier|final
name|Collection
name|destCollection
init|=
name|EasyMock
operator|.
name|createStrictMock
argument_list|(
name|Collection
operator|.
name|class
argument_list|)
decl_stmt|;
specifier|final
name|Permission
name|destPermissions
init|=
name|EasyMock
operator|.
name|createStrictMock
argument_list|(
name|Permission
operator|.
name|class
argument_list|)
decl_stmt|;
specifier|final
name|Collection
name|newDestCollection
init|=
literal|null
decl_stmt|;
specifier|final
name|NativeBroker
name|broker
init|=
name|EasyMock
operator|.
name|createMockBuilder
argument_list|(
name|NativeBroker
operator|.
name|class
argument_list|)
operator|.
name|addMockedMethod
argument_list|(
literal|"getCollection"
argument_list|)
operator|.
name|addMockedMethod
argument_list|(
literal|"getCurrentSubject"
argument_list|)
operator|.
name|createStrictMock
argument_list|()
decl_stmt|;
specifier|final
name|Subject
name|subject
init|=
name|EasyMock
operator|.
name|createStrictMock
argument_list|(
name|Subject
operator|.
name|class
argument_list|)
decl_stmt|;
comment|//grant EXECUTE and READ permissions on the src
name|expect
argument_list|(
name|srcCollection
operator|.
name|getPermissionsNoLock
argument_list|()
argument_list|)
operator|.
name|andReturn
argument_list|(
name|srcPermissions
argument_list|)
expr_stmt|;
name|expect
argument_list|(
name|broker
operator|.
name|getCurrentSubject
argument_list|()
argument_list|)
operator|.
name|andReturn
argument_list|(
name|subject
argument_list|)
expr_stmt|;
name|expect
argument_list|(
name|srcPermissions
operator|.
name|validate
argument_list|(
name|subject
argument_list|,
name|Permission
operator|.
name|EXECUTE
operator||
name|Permission
operator|.
name|READ
argument_list|)
argument_list|)
operator|.
name|andReturn
argument_list|(
literal|true
argument_list|)
expr_stmt|;
comment|//grant EXECUTE and WRITE permission on the dest
name|expect
argument_list|(
name|destCollection
operator|.
name|getURI
argument_list|()
argument_list|)
operator|.
name|andReturn
argument_list|(
name|dest
argument_list|)
expr_stmt|;
specifier|final
name|Capture
argument_list|<
name|XmldbURI
argument_list|>
name|newDestURICapture
init|=
name|newCapture
argument_list|()
decl_stmt|;
name|expect
argument_list|(
name|broker
operator|.
name|getCollection
argument_list|(
name|capture
argument_list|(
name|newDestURICapture
argument_list|)
argument_list|)
argument_list|)
operator|.
name|andReturn
argument_list|(
name|newDestCollection
argument_list|)
expr_stmt|;
name|expect
argument_list|(
name|destCollection
operator|.
name|getPermissionsNoLock
argument_list|()
argument_list|)
operator|.
name|andReturn
argument_list|(
name|destPermissions
argument_list|)
expr_stmt|;
name|expect
argument_list|(
name|broker
operator|.
name|getCurrentSubject
argument_list|()
argument_list|)
operator|.
name|andReturn
argument_list|(
name|subject
argument_list|)
expr_stmt|;
name|expect
argument_list|(
name|destPermissions
operator|.
name|validate
argument_list|(
name|subject
argument_list|,
name|Permission
operator|.
name|EXECUTE
operator||
name|Permission
operator|.
name|WRITE
argument_list|)
argument_list|)
operator|.
name|andReturn
argument_list|(
literal|true
argument_list|)
expr_stmt|;
comment|//one sub-document with READ permission
name|expect
argument_list|(
name|srcCollection
operator|.
name|iterator
argument_list|(
name|broker
argument_list|)
argument_list|)
operator|.
name|andReturn
argument_list|(
operator|new
name|ArrayIterator
argument_list|<>
argument_list|(
name|srcSubDocument
argument_list|)
argument_list|)
expr_stmt|;
name|expect
argument_list|(
name|srcSubDocument
operator|.
name|getPermissions
argument_list|()
argument_list|)
operator|.
name|andReturn
argument_list|(
name|srcSubDocumentPermissions
argument_list|)
expr_stmt|;
name|expect
argument_list|(
name|broker
operator|.
name|getCurrentSubject
argument_list|()
argument_list|)
operator|.
name|andReturn
argument_list|(
name|subject
argument_list|)
expr_stmt|;
name|expect
argument_list|(
name|srcSubDocumentPermissions
operator|.
name|validate
argument_list|(
name|subject
argument_list|,
name|Permission
operator|.
name|READ
argument_list|)
argument_list|)
operator|.
name|andReturn
argument_list|(
literal|true
argument_list|)
expr_stmt|;
comment|//one sub-collection with READ and EXECUTE permission
name|expect
argument_list|(
name|srcCollection
operator|.
name|collectionIterator
argument_list|(
name|broker
argument_list|)
argument_list|)
operator|.
name|andReturn
argument_list|(
operator|new
name|ArrayIterator
argument_list|<>
argument_list|(
name|srcSubCollectionName
argument_list|)
argument_list|)
expr_stmt|;
name|expect
argument_list|(
name|srcCollection
operator|.
name|getURI
argument_list|()
argument_list|)
operator|.
name|andReturn
argument_list|(
name|src
argument_list|)
expr_stmt|;
comment|//TODO fix?!? .once()  .anyTimes()  .times(2)
name|expect
argument_list|(
name|src
operator|.
name|append
argument_list|(
name|srcSubCollectionName
argument_list|)
argument_list|)
operator|.
name|andReturn
argument_list|(
name|srcSubCollectionUri
argument_list|)
expr_stmt|;
name|expect
argument_list|(
name|broker
operator|.
name|getCollection
argument_list|(
name|srcSubCollectionUri
argument_list|)
argument_list|)
operator|.
name|andReturn
argument_list|(
name|srcSubCollection
argument_list|)
expr_stmt|;
comment|/* we are now recursing on the sub-collection */
name|expect
argument_list|(
name|srcSubCollection
operator|.
name|getPermissionsNoLock
argument_list|()
argument_list|)
operator|.
name|andReturn
argument_list|(
name|srcSubCollectionPermissions
argument_list|)
expr_stmt|;
name|expect
argument_list|(
name|broker
operator|.
name|getCurrentSubject
argument_list|()
argument_list|)
operator|.
name|andReturn
argument_list|(
name|subject
argument_list|)
expr_stmt|;
name|expect
argument_list|(
name|srcSubCollectionPermissions
operator|.
name|validate
argument_list|(
name|subject
argument_list|,
name|Permission
operator|.
name|EXECUTE
operator||
name|Permission
operator|.
name|READ
argument_list|)
argument_list|)
operator|.
name|andReturn
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|expect
argument_list|(
name|broker
operator|.
name|getCollection
argument_list|(
name|dest
operator|.
name|append
argument_list|(
name|newName
argument_list|)
argument_list|)
argument_list|)
operator|.
name|andReturn
argument_list|(
literal|null
argument_list|)
expr_stmt|;
comment|//no such dest collection, so return null
name|expect
argument_list|(
name|broker
operator|.
name|getCollection
argument_list|(
name|dest
operator|.
name|append
argument_list|(
name|newName
argument_list|)
operator|.
name|append
argument_list|(
name|srcSubCollectionName
argument_list|)
argument_list|)
argument_list|)
operator|.
name|andReturn
argument_list|(
literal|null
argument_list|)
expr_stmt|;
comment|//no such dest sub-collection, so return null
name|expect
argument_list|(
name|srcSubCollection
operator|.
name|iterator
argument_list|(
name|broker
argument_list|)
argument_list|)
operator|.
name|andReturn
argument_list|(
name|Collections
operator|.
name|emptyIterator
argument_list|()
argument_list|)
expr_stmt|;
comment|//no sub-sub-docs
name|expect
argument_list|(
name|srcSubCollection
operator|.
name|collectionIterator
argument_list|(
name|broker
argument_list|)
argument_list|)
operator|.
name|andReturn
argument_list|(
name|Collections
operator|.
name|emptyIterator
argument_list|()
argument_list|)
expr_stmt|;
comment|//no sub-sub-collections
comment|//test below
name|replay
argument_list|(
name|srcSubCollectionPermissions
argument_list|,
name|srcSubCollection
argument_list|,
name|srcSubDocumentPermissions
argument_list|,
name|srcSubDocument
argument_list|,
name|destCollection
argument_list|,
name|destPermissions
argument_list|,
name|srcCollection
argument_list|,
name|srcPermissions
argument_list|,
name|subject
argument_list|,
name|broker
argument_list|)
expr_stmt|;
comment|//run the test
name|broker
operator|.
name|checkPermissionsForCopy
argument_list|(
name|srcCollection
argument_list|,
name|destCollection
argument_list|,
name|newName
argument_list|)
expr_stmt|;
name|verify
argument_list|(
name|srcSubCollectionPermissions
argument_list|,
name|srcSubCollection
argument_list|,
name|srcSubDocumentPermissions
argument_list|,
name|srcSubDocument
argument_list|,
name|destCollection
argument_list|,
name|destPermissions
argument_list|,
name|srcCollection
argument_list|,
name|srcPermissions
argument_list|,
name|subject
argument_list|,
name|broker
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|dest
operator|.
name|append
argument_list|(
name|newName
argument_list|)
argument_list|,
name|newDestURICapture
operator|.
name|getValue
argument_list|()
argument_list|)
expr_stmt|;
block|}
comment|/**      * When copying an empty Collection (/db/test/source) where      * we have execute+read access      *      * to the destination /db/test/dest (which already exists)      * and we have execute+write access on /db/test and /db/test/dest      * we should be allowed to copy the content of the Collection.      */
annotation|@
name|Test
specifier|public
name|void
name|copyCollection_noDescendants_toExistingDest_canWriteDest
parameter_list|()
throws|throws
name|LockException
throws|,
name|PermissionDeniedException
block|{
specifier|final
name|XmldbURI
name|src
init|=
name|XmldbURI
operator|.
name|create
argument_list|(
literal|"/db/test/source"
argument_list|)
decl_stmt|;
specifier|final
name|XmldbURI
name|dest
init|=
name|XmldbURI
operator|.
name|create
argument_list|(
literal|"/db/test"
argument_list|)
decl_stmt|;
specifier|final
name|XmldbURI
name|newName
init|=
name|XmldbURI
operator|.
name|create
argument_list|(
literal|"dest"
argument_list|)
decl_stmt|;
specifier|final
name|Collection
name|srcCollection
init|=
name|EasyMock
operator|.
name|createStrictMock
argument_list|(
name|Collection
operator|.
name|class
argument_list|)
decl_stmt|;
specifier|final
name|Permission
name|srcPermissions
init|=
name|EasyMock
operator|.
name|createStrictMock
argument_list|(
name|Permission
operator|.
name|class
argument_list|)
decl_stmt|;
specifier|final
name|Collection
name|destCollection
init|=
name|EasyMock
operator|.
name|createStrictMock
argument_list|(
name|Collection
operator|.
name|class
argument_list|)
decl_stmt|;
specifier|final
name|Permission
name|destPermissions
init|=
name|EasyMock
operator|.
name|createStrictMock
argument_list|(
name|Permission
operator|.
name|class
argument_list|)
decl_stmt|;
specifier|final
name|Collection
name|newDestCollection
init|=
name|EasyMock
operator|.
name|createStrictMock
argument_list|(
name|Collection
operator|.
name|class
argument_list|)
decl_stmt|;
specifier|final
name|Permission
name|newDestPermissions
init|=
name|EasyMock
operator|.
name|createStrictMock
argument_list|(
name|Permission
operator|.
name|class
argument_list|)
decl_stmt|;
specifier|final
name|NativeBroker
name|broker
init|=
name|EasyMock
operator|.
name|createMockBuilder
argument_list|(
name|NativeBroker
operator|.
name|class
argument_list|)
operator|.
name|addMockedMethod
argument_list|(
literal|"getCollection"
argument_list|)
operator|.
name|addMockedMethod
argument_list|(
literal|"getCurrentSubject"
argument_list|)
operator|.
name|createStrictMock
argument_list|()
decl_stmt|;
specifier|final
name|Subject
name|subject
init|=
name|EasyMock
operator|.
name|createStrictMock
argument_list|(
name|Subject
operator|.
name|class
argument_list|)
decl_stmt|;
comment|//grant EXECUTE and READ permissions on the src
name|expect
argument_list|(
name|srcCollection
operator|.
name|getPermissionsNoLock
argument_list|()
argument_list|)
operator|.
name|andReturn
argument_list|(
name|srcPermissions
argument_list|)
expr_stmt|;
name|expect
argument_list|(
name|broker
operator|.
name|getCurrentSubject
argument_list|()
argument_list|)
operator|.
name|andReturn
argument_list|(
name|subject
argument_list|)
expr_stmt|;
name|expect
argument_list|(
name|srcPermissions
operator|.
name|validate
argument_list|(
name|subject
argument_list|,
name|Permission
operator|.
name|EXECUTE
operator||
name|Permission
operator|.
name|READ
argument_list|)
argument_list|)
operator|.
name|andReturn
argument_list|(
literal|true
argument_list|)
expr_stmt|;
comment|//grant EXECUTE and WRITE permission on the dest
name|expect
argument_list|(
name|destCollection
operator|.
name|getURI
argument_list|()
argument_list|)
operator|.
name|andReturn
argument_list|(
name|dest
argument_list|)
expr_stmt|;
specifier|final
name|Capture
argument_list|<
name|XmldbURI
argument_list|>
name|newDestURICapture
init|=
name|newCapture
argument_list|()
decl_stmt|;
name|expect
argument_list|(
name|broker
operator|.
name|getCollection
argument_list|(
name|capture
argument_list|(
name|newDestURICapture
argument_list|)
argument_list|)
argument_list|)
operator|.
name|andReturn
argument_list|(
name|newDestCollection
argument_list|)
expr_stmt|;
name|expect
argument_list|(
name|destCollection
operator|.
name|getPermissionsNoLock
argument_list|()
argument_list|)
operator|.
name|andReturn
argument_list|(
name|destPermissions
argument_list|)
expr_stmt|;
name|expect
argument_list|(
name|broker
operator|.
name|getCurrentSubject
argument_list|()
argument_list|)
operator|.
name|andReturn
argument_list|(
name|subject
argument_list|)
expr_stmt|;
name|expect
argument_list|(
name|destPermissions
operator|.
name|validate
argument_list|(
name|subject
argument_list|,
name|Permission
operator|.
name|EXECUTE
operator||
name|Permission
operator|.
name|WRITE
argument_list|)
argument_list|)
operator|.
name|andReturn
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|expect
argument_list|(
name|newDestCollection
operator|.
name|getPermissionsNoLock
argument_list|()
argument_list|)
operator|.
name|andReturn
argument_list|(
name|newDestPermissions
argument_list|)
expr_stmt|;
name|expect
argument_list|(
name|broker
operator|.
name|getCurrentSubject
argument_list|()
argument_list|)
operator|.
name|andReturn
argument_list|(
name|subject
argument_list|)
expr_stmt|;
name|expect
argument_list|(
name|newDestPermissions
operator|.
name|validate
argument_list|(
name|subject
argument_list|,
name|Permission
operator|.
name|EXECUTE
operator||
name|Permission
operator|.
name|WRITE
argument_list|)
argument_list|)
operator|.
name|andReturn
argument_list|(
literal|true
argument_list|)
expr_stmt|;
comment|//no sub-documents
name|expect
argument_list|(
name|srcCollection
operator|.
name|iterator
argument_list|(
name|broker
argument_list|)
argument_list|)
operator|.
name|andReturn
argument_list|(
name|Collections
operator|.
name|emptyIterator
argument_list|()
argument_list|)
expr_stmt|;
comment|//no sub-collections
name|expect
argument_list|(
name|srcCollection
operator|.
name|collectionIterator
argument_list|(
name|broker
argument_list|)
argument_list|)
operator|.
name|andReturn
argument_list|(
name|Collections
operator|.
name|emptyIterator
argument_list|()
argument_list|)
expr_stmt|;
comment|//test below
name|replay
argument_list|(
name|newDestPermissions
argument_list|,
name|newDestCollection
argument_list|,
name|destCollection
argument_list|,
name|destPermissions
argument_list|,
name|srcCollection
argument_list|,
name|srcPermissions
argument_list|,
name|subject
argument_list|,
name|broker
argument_list|)
expr_stmt|;
comment|//run the test
name|broker
operator|.
name|checkPermissionsForCopy
argument_list|(
name|srcCollection
argument_list|,
name|destCollection
argument_list|,
name|newName
argument_list|)
expr_stmt|;
name|verify
argument_list|(
name|newDestPermissions
argument_list|,
name|newDestCollection
argument_list|,
name|destCollection
argument_list|,
name|destPermissions
argument_list|,
name|srcCollection
argument_list|,
name|srcPermissions
argument_list|,
name|subject
argument_list|,
name|broker
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|dest
operator|.
name|append
argument_list|(
name|newName
argument_list|)
argument_list|,
name|newDestURICapture
operator|.
name|getValue
argument_list|()
argument_list|)
expr_stmt|;
block|}
comment|/**      * When copying an empty Collection (/db/test/source) where      * we have execute+read access      *      * to the destination /db/test/dest (which already exists)      * and we DO NOT have execute+write access on /db/test      * we should NOT be allowed to copy the content of the Collection.      */
annotation|@
name|Test
argument_list|(
name|expected
operator|=
name|PermissionDeniedException
operator|.
name|class
argument_list|)
specifier|public
name|void
name|copyCollection_noDescendants_toExistingDest_cannotWriteDest
parameter_list|()
throws|throws
name|LockException
throws|,
name|PermissionDeniedException
block|{
specifier|final
name|XmldbURI
name|src
init|=
name|XmldbURI
operator|.
name|create
argument_list|(
literal|"/db/test/source"
argument_list|)
decl_stmt|;
specifier|final
name|XmldbURI
name|dest
init|=
name|XmldbURI
operator|.
name|create
argument_list|(
literal|"/db/test"
argument_list|)
decl_stmt|;
specifier|final
name|XmldbURI
name|newName
init|=
name|XmldbURI
operator|.
name|create
argument_list|(
literal|"dest"
argument_list|)
decl_stmt|;
specifier|final
name|Collection
name|srcCollection
init|=
name|EasyMock
operator|.
name|createStrictMock
argument_list|(
name|Collection
operator|.
name|class
argument_list|)
decl_stmt|;
specifier|final
name|Permission
name|srcPermissions
init|=
name|EasyMock
operator|.
name|createStrictMock
argument_list|(
name|Permission
operator|.
name|class
argument_list|)
decl_stmt|;
specifier|final
name|Collection
name|destCollection
init|=
name|EasyMock
operator|.
name|createStrictMock
argument_list|(
name|Collection
operator|.
name|class
argument_list|)
decl_stmt|;
specifier|final
name|Permission
name|destPermissions
init|=
name|EasyMock
operator|.
name|createStrictMock
argument_list|(
name|Permission
operator|.
name|class
argument_list|)
decl_stmt|;
specifier|final
name|Collection
name|newDestCollection
init|=
name|EasyMock
operator|.
name|createStrictMock
argument_list|(
name|Collection
operator|.
name|class
argument_list|)
decl_stmt|;
specifier|final
name|Permission
name|newDestPermissions
init|=
name|EasyMock
operator|.
name|createStrictMock
argument_list|(
name|Permission
operator|.
name|class
argument_list|)
decl_stmt|;
specifier|final
name|NativeBroker
name|broker
init|=
name|EasyMock
operator|.
name|createMockBuilder
argument_list|(
name|NativeBroker
operator|.
name|class
argument_list|)
operator|.
name|addMockedMethod
argument_list|(
literal|"getCollection"
argument_list|)
operator|.
name|addMockedMethod
argument_list|(
literal|"getCurrentSubject"
argument_list|)
operator|.
name|createStrictMock
argument_list|()
decl_stmt|;
specifier|final
name|Subject
name|subject
init|=
name|EasyMock
operator|.
name|createStrictMock
argument_list|(
name|Subject
operator|.
name|class
argument_list|)
decl_stmt|;
comment|//grant EXECUTE and READ permissions on the src
name|expect
argument_list|(
name|srcCollection
operator|.
name|getPermissionsNoLock
argument_list|()
argument_list|)
operator|.
name|andReturn
argument_list|(
name|srcPermissions
argument_list|)
expr_stmt|;
name|expect
argument_list|(
name|broker
operator|.
name|getCurrentSubject
argument_list|()
argument_list|)
operator|.
name|andReturn
argument_list|(
name|subject
argument_list|)
expr_stmt|;
name|expect
argument_list|(
name|srcPermissions
operator|.
name|validate
argument_list|(
name|subject
argument_list|,
name|Permission
operator|.
name|EXECUTE
operator||
name|Permission
operator|.
name|READ
argument_list|)
argument_list|)
operator|.
name|andReturn
argument_list|(
literal|true
argument_list|)
expr_stmt|;
comment|//grant EXECUTE and WRITE permission on the dest
name|expect
argument_list|(
name|destCollection
operator|.
name|getURI
argument_list|()
argument_list|)
operator|.
name|andReturn
argument_list|(
name|dest
argument_list|)
expr_stmt|;
specifier|final
name|Capture
argument_list|<
name|XmldbURI
argument_list|>
name|newDestURICapture
init|=
name|newCapture
argument_list|()
decl_stmt|;
name|expect
argument_list|(
name|broker
operator|.
name|getCollection
argument_list|(
name|capture
argument_list|(
name|newDestURICapture
argument_list|)
argument_list|)
argument_list|)
operator|.
name|andReturn
argument_list|(
name|newDestCollection
argument_list|)
expr_stmt|;
name|expect
argument_list|(
name|destCollection
operator|.
name|getPermissionsNoLock
argument_list|()
argument_list|)
operator|.
name|andReturn
argument_list|(
name|destPermissions
argument_list|)
expr_stmt|;
name|expect
argument_list|(
name|broker
operator|.
name|getCurrentSubject
argument_list|()
argument_list|)
operator|.
name|andReturn
argument_list|(
name|subject
argument_list|)
expr_stmt|;
name|expect
argument_list|(
name|destPermissions
operator|.
name|validate
argument_list|(
name|subject
argument_list|,
name|Permission
operator|.
name|EXECUTE
operator||
name|Permission
operator|.
name|WRITE
argument_list|)
argument_list|)
operator|.
name|andReturn
argument_list|(
literal|false
argument_list|)
expr_stmt|;
comment|//expectations for exception that should be thrown
name|expect
argument_list|(
name|srcCollection
operator|.
name|getURI
argument_list|()
argument_list|)
operator|.
name|andReturn
argument_list|(
name|src
argument_list|)
expr_stmt|;
name|expect
argument_list|(
name|destCollection
operator|.
name|getURI
argument_list|()
argument_list|)
operator|.
name|andReturn
argument_list|(
name|dest
argument_list|)
expr_stmt|;
name|expect
argument_list|(
name|broker
operator|.
name|getCurrentSubject
argument_list|()
argument_list|)
operator|.
name|andReturn
argument_list|(
name|subject
argument_list|)
expr_stmt|;
name|expect
argument_list|(
name|subject
operator|.
name|getName
argument_list|()
argument_list|)
operator|.
name|andReturn
argument_list|(
literal|"Fake user"
argument_list|)
expr_stmt|;
comment|//no sub-documents
name|expect
argument_list|(
name|srcCollection
operator|.
name|iterator
argument_list|(
name|broker
argument_list|)
argument_list|)
operator|.
name|andReturn
argument_list|(
name|Collections
operator|.
name|emptyIterator
argument_list|()
argument_list|)
expr_stmt|;
comment|//no sub-collections
name|expect
argument_list|(
name|srcCollection
operator|.
name|collectionIterator
argument_list|(
name|broker
argument_list|)
argument_list|)
operator|.
name|andReturn
argument_list|(
name|Collections
operator|.
name|emptyIterator
argument_list|()
argument_list|)
expr_stmt|;
comment|//test below
name|replay
argument_list|(
name|newDestPermissions
argument_list|,
name|newDestCollection
argument_list|,
name|destCollection
argument_list|,
name|destPermissions
argument_list|,
name|srcCollection
argument_list|,
name|srcPermissions
argument_list|,
name|subject
argument_list|,
name|broker
argument_list|)
expr_stmt|;
comment|//run the test
name|broker
operator|.
name|checkPermissionsForCopy
argument_list|(
name|srcCollection
argument_list|,
name|destCollection
argument_list|,
name|newName
argument_list|)
expr_stmt|;
name|verify
argument_list|(
name|newDestPermissions
argument_list|,
name|newDestCollection
argument_list|,
name|destCollection
argument_list|,
name|destPermissions
argument_list|,
name|srcCollection
argument_list|,
name|srcPermissions
argument_list|,
name|subject
argument_list|,
name|broker
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|dest
operator|.
name|append
argument_list|(
name|newName
argument_list|)
argument_list|,
name|newDestURICapture
operator|.
name|getValue
argument_list|()
argument_list|)
expr_stmt|;
block|}
comment|/**      * When copying an empty Collection (/db/test/source) where      * we have execute+read access      *      * to the destination /db/test/dest (which already exists)      * and we have execute+write access on /db/test      * but DO NOT have execute+write access on /db/test/dest      * we should NOT be allowed to copy the content of the Collection.      */
annotation|@
name|Test
argument_list|(
name|expected
operator|=
name|PermissionDeniedException
operator|.
name|class
argument_list|)
specifier|public
name|void
name|copyCollection_noDescendants_toExistingDest_cannotWriteNewDest
parameter_list|()
throws|throws
name|LockException
throws|,
name|PermissionDeniedException
block|{
specifier|final
name|XmldbURI
name|src
init|=
name|XmldbURI
operator|.
name|create
argument_list|(
literal|"/db/test/source"
argument_list|)
decl_stmt|;
specifier|final
name|XmldbURI
name|dest
init|=
name|XmldbURI
operator|.
name|create
argument_list|(
literal|"/db/test"
argument_list|)
decl_stmt|;
specifier|final
name|XmldbURI
name|newName
init|=
name|XmldbURI
operator|.
name|create
argument_list|(
literal|"dest"
argument_list|)
decl_stmt|;
specifier|final
name|Collection
name|srcCollection
init|=
name|EasyMock
operator|.
name|createStrictMock
argument_list|(
name|Collection
operator|.
name|class
argument_list|)
decl_stmt|;
specifier|final
name|Permission
name|srcPermissions
init|=
name|EasyMock
operator|.
name|createStrictMock
argument_list|(
name|Permission
operator|.
name|class
argument_list|)
decl_stmt|;
specifier|final
name|Collection
name|destCollection
init|=
name|EasyMock
operator|.
name|createStrictMock
argument_list|(
name|Collection
operator|.
name|class
argument_list|)
decl_stmt|;
specifier|final
name|Permission
name|destPermissions
init|=
name|EasyMock
operator|.
name|createStrictMock
argument_list|(
name|Permission
operator|.
name|class
argument_list|)
decl_stmt|;
specifier|final
name|Collection
name|newDestCollection
init|=
name|EasyMock
operator|.
name|createStrictMock
argument_list|(
name|Collection
operator|.
name|class
argument_list|)
decl_stmt|;
specifier|final
name|Permission
name|newDestPermissions
init|=
name|EasyMock
operator|.
name|createStrictMock
argument_list|(
name|Permission
operator|.
name|class
argument_list|)
decl_stmt|;
specifier|final
name|NativeBroker
name|broker
init|=
name|EasyMock
operator|.
name|createMockBuilder
argument_list|(
name|NativeBroker
operator|.
name|class
argument_list|)
operator|.
name|addMockedMethod
argument_list|(
literal|"getCollection"
argument_list|)
operator|.
name|addMockedMethod
argument_list|(
literal|"getCurrentSubject"
argument_list|)
operator|.
name|createStrictMock
argument_list|()
decl_stmt|;
specifier|final
name|Subject
name|subject
init|=
name|EasyMock
operator|.
name|createStrictMock
argument_list|(
name|Subject
operator|.
name|class
argument_list|)
decl_stmt|;
comment|//grant EXECUTE and READ permissions on the src
name|expect
argument_list|(
name|srcCollection
operator|.
name|getPermissionsNoLock
argument_list|()
argument_list|)
operator|.
name|andReturn
argument_list|(
name|srcPermissions
argument_list|)
expr_stmt|;
name|expect
argument_list|(
name|broker
operator|.
name|getCurrentSubject
argument_list|()
argument_list|)
operator|.
name|andReturn
argument_list|(
name|subject
argument_list|)
expr_stmt|;
name|expect
argument_list|(
name|srcPermissions
operator|.
name|validate
argument_list|(
name|subject
argument_list|,
name|Permission
operator|.
name|EXECUTE
operator||
name|Permission
operator|.
name|READ
argument_list|)
argument_list|)
operator|.
name|andReturn
argument_list|(
literal|true
argument_list|)
expr_stmt|;
comment|//grant EXECUTE and WRITE permission on the dest
name|expect
argument_list|(
name|destCollection
operator|.
name|getURI
argument_list|()
argument_list|)
operator|.
name|andReturn
argument_list|(
name|dest
argument_list|)
expr_stmt|;
specifier|final
name|Capture
argument_list|<
name|XmldbURI
argument_list|>
name|newDestURICapture
init|=
name|newCapture
argument_list|()
decl_stmt|;
name|expect
argument_list|(
name|broker
operator|.
name|getCollection
argument_list|(
name|capture
argument_list|(
name|newDestURICapture
argument_list|)
argument_list|)
argument_list|)
operator|.
name|andReturn
argument_list|(
name|newDestCollection
argument_list|)
expr_stmt|;
name|expect
argument_list|(
name|destCollection
operator|.
name|getPermissionsNoLock
argument_list|()
argument_list|)
operator|.
name|andReturn
argument_list|(
name|destPermissions
argument_list|)
expr_stmt|;
name|expect
argument_list|(
name|broker
operator|.
name|getCurrentSubject
argument_list|()
argument_list|)
operator|.
name|andReturn
argument_list|(
name|subject
argument_list|)
expr_stmt|;
name|expect
argument_list|(
name|destPermissions
operator|.
name|validate
argument_list|(
name|subject
argument_list|,
name|Permission
operator|.
name|EXECUTE
operator||
name|Permission
operator|.
name|WRITE
argument_list|)
argument_list|)
operator|.
name|andReturn
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|expect
argument_list|(
name|newDestCollection
operator|.
name|getPermissionsNoLock
argument_list|()
argument_list|)
operator|.
name|andReturn
argument_list|(
name|newDestPermissions
argument_list|)
expr_stmt|;
name|expect
argument_list|(
name|broker
operator|.
name|getCurrentSubject
argument_list|()
argument_list|)
operator|.
name|andReturn
argument_list|(
name|subject
argument_list|)
expr_stmt|;
name|expect
argument_list|(
name|newDestPermissions
operator|.
name|validate
argument_list|(
name|subject
argument_list|,
name|Permission
operator|.
name|EXECUTE
operator||
name|Permission
operator|.
name|WRITE
argument_list|)
argument_list|)
operator|.
name|andReturn
argument_list|(
literal|false
argument_list|)
expr_stmt|;
comment|//expectations for exception that should be thrown
name|expect
argument_list|(
name|srcCollection
operator|.
name|getURI
argument_list|()
argument_list|)
operator|.
name|andReturn
argument_list|(
name|src
argument_list|)
expr_stmt|;
name|expect
argument_list|(
name|newDestCollection
operator|.
name|getURI
argument_list|()
argument_list|)
operator|.
name|andReturn
argument_list|(
name|dest
operator|.
name|append
argument_list|(
name|newName
argument_list|)
argument_list|)
expr_stmt|;
name|expect
argument_list|(
name|broker
operator|.
name|getCurrentSubject
argument_list|()
argument_list|)
operator|.
name|andReturn
argument_list|(
name|subject
argument_list|)
expr_stmt|;
name|expect
argument_list|(
name|subject
operator|.
name|getName
argument_list|()
argument_list|)
operator|.
name|andReturn
argument_list|(
literal|"Fake user"
argument_list|)
expr_stmt|;
comment|//no sub-documents
name|expect
argument_list|(
name|srcCollection
operator|.
name|iterator
argument_list|(
name|broker
argument_list|)
argument_list|)
operator|.
name|andReturn
argument_list|(
name|Collections
operator|.
name|emptyIterator
argument_list|()
argument_list|)
expr_stmt|;
comment|//no sub-collections
name|expect
argument_list|(
name|srcCollection
operator|.
name|collectionIterator
argument_list|(
name|broker
argument_list|)
argument_list|)
operator|.
name|andReturn
argument_list|(
name|Collections
operator|.
name|emptyIterator
argument_list|()
argument_list|)
expr_stmt|;
comment|//test below
name|replay
argument_list|(
name|newDestPermissions
argument_list|,
name|newDestCollection
argument_list|,
name|destCollection
argument_list|,
name|destPermissions
argument_list|,
name|srcCollection
argument_list|,
name|srcPermissions
argument_list|,
name|subject
argument_list|,
name|broker
argument_list|)
expr_stmt|;
comment|//run the test
name|broker
operator|.
name|checkPermissionsForCopy
argument_list|(
name|srcCollection
argument_list|,
name|destCollection
argument_list|,
name|newName
argument_list|)
expr_stmt|;
name|verify
argument_list|(
name|newDestPermissions
argument_list|,
name|newDestCollection
argument_list|,
name|destCollection
argument_list|,
name|destPermissions
argument_list|,
name|srcCollection
argument_list|,
name|srcPermissions
argument_list|,
name|subject
argument_list|,
name|broker
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|dest
operator|.
name|append
argument_list|(
name|newName
argument_list|)
argument_list|,
name|newDestURICapture
operator|.
name|getValue
argument_list|()
argument_list|)
expr_stmt|;
block|}
comment|/**      * When copying a Collection (/db/test/source) where      * we have execute+read access and      * which has one descendant document (on which we have read access)      * in it,      *      * to the destination /db/test/dest (which already exists)      * and we have execute+write access on /db/test and /db/test/dest      * we should be allowed to copy the content of the Collection.      */
annotation|@
name|Test
specifier|public
name|void
name|copyCollection_oneSubDoc_toExistingDest_canWriteDest
parameter_list|()
throws|throws
name|LockException
throws|,
name|PermissionDeniedException
block|{
specifier|final
name|XmldbURI
name|src
init|=
name|XmldbURI
operator|.
name|create
argument_list|(
literal|"/db/test/source"
argument_list|)
decl_stmt|;
specifier|final
name|XmldbURI
name|dest
init|=
name|XmldbURI
operator|.
name|create
argument_list|(
literal|"/db/test"
argument_list|)
decl_stmt|;
specifier|final
name|XmldbURI
name|newName
init|=
name|XmldbURI
operator|.
name|create
argument_list|(
literal|"dest"
argument_list|)
decl_stmt|;
specifier|final
name|Collection
name|srcCollection
init|=
name|EasyMock
operator|.
name|createStrictMock
argument_list|(
name|Collection
operator|.
name|class
argument_list|)
decl_stmt|;
specifier|final
name|Permission
name|srcPermissions
init|=
name|EasyMock
operator|.
name|createStrictMock
argument_list|(
name|Permission
operator|.
name|class
argument_list|)
decl_stmt|;
specifier|final
name|DocumentImpl
name|srcSubDocument
init|=
name|EasyMock
operator|.
name|createStrictMock
argument_list|(
name|DocumentImpl
operator|.
name|class
argument_list|)
decl_stmt|;
specifier|final
name|Permission
name|srcSubDocumentPermissions
init|=
name|EasyMock
operator|.
name|createStrictMock
argument_list|(
name|Permission
operator|.
name|class
argument_list|)
decl_stmt|;
specifier|final
name|Collection
name|destCollection
init|=
name|EasyMock
operator|.
name|createStrictMock
argument_list|(
name|Collection
operator|.
name|class
argument_list|)
decl_stmt|;
specifier|final
name|Permission
name|destPermissions
init|=
name|EasyMock
operator|.
name|createStrictMock
argument_list|(
name|Permission
operator|.
name|class
argument_list|)
decl_stmt|;
specifier|final
name|Collection
name|newDestCollection
init|=
name|EasyMock
operator|.
name|createStrictMock
argument_list|(
name|Collection
operator|.
name|class
argument_list|)
decl_stmt|;
specifier|final
name|Permission
name|newDestPermissions
init|=
name|EasyMock
operator|.
name|createStrictMock
argument_list|(
name|Permission
operator|.
name|class
argument_list|)
decl_stmt|;
specifier|final
name|NativeBroker
name|broker
init|=
name|EasyMock
operator|.
name|createMockBuilder
argument_list|(
name|NativeBroker
operator|.
name|class
argument_list|)
operator|.
name|addMockedMethod
argument_list|(
literal|"getCollection"
argument_list|)
operator|.
name|addMockedMethod
argument_list|(
literal|"getCurrentSubject"
argument_list|)
operator|.
name|createStrictMock
argument_list|()
decl_stmt|;
specifier|final
name|Subject
name|subject
init|=
name|EasyMock
operator|.
name|createStrictMock
argument_list|(
name|Subject
operator|.
name|class
argument_list|)
decl_stmt|;
comment|//grant EXECUTE and READ permissions on the src
name|expect
argument_list|(
name|srcCollection
operator|.
name|getPermissionsNoLock
argument_list|()
argument_list|)
operator|.
name|andReturn
argument_list|(
name|srcPermissions
argument_list|)
expr_stmt|;
name|expect
argument_list|(
name|broker
operator|.
name|getCurrentSubject
argument_list|()
argument_list|)
operator|.
name|andReturn
argument_list|(
name|subject
argument_list|)
expr_stmt|;
name|expect
argument_list|(
name|srcPermissions
operator|.
name|validate
argument_list|(
name|subject
argument_list|,
name|Permission
operator|.
name|EXECUTE
operator||
name|Permission
operator|.
name|READ
argument_list|)
argument_list|)
operator|.
name|andReturn
argument_list|(
literal|true
argument_list|)
expr_stmt|;
comment|//grant EXECUTE and WRITE permission on the dest
name|expect
argument_list|(
name|destCollection
operator|.
name|getURI
argument_list|()
argument_list|)
operator|.
name|andReturn
argument_list|(
name|dest
argument_list|)
expr_stmt|;
specifier|final
name|Capture
argument_list|<
name|XmldbURI
argument_list|>
name|newDestURICapture
init|=
name|newCapture
argument_list|()
decl_stmt|;
name|expect
argument_list|(
name|broker
operator|.
name|getCollection
argument_list|(
name|capture
argument_list|(
name|newDestURICapture
argument_list|)
argument_list|)
argument_list|)
operator|.
name|andReturn
argument_list|(
name|newDestCollection
argument_list|)
expr_stmt|;
name|expect
argument_list|(
name|destCollection
operator|.
name|getPermissionsNoLock
argument_list|()
argument_list|)
operator|.
name|andReturn
argument_list|(
name|destPermissions
argument_list|)
expr_stmt|;
name|expect
argument_list|(
name|broker
operator|.
name|getCurrentSubject
argument_list|()
argument_list|)
operator|.
name|andReturn
argument_list|(
name|subject
argument_list|)
expr_stmt|;
name|expect
argument_list|(
name|destPermissions
operator|.
name|validate
argument_list|(
name|subject
argument_list|,
name|Permission
operator|.
name|EXECUTE
operator||
name|Permission
operator|.
name|WRITE
argument_list|)
argument_list|)
operator|.
name|andReturn
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|expect
argument_list|(
name|newDestCollection
operator|.
name|getPermissionsNoLock
argument_list|()
argument_list|)
operator|.
name|andReturn
argument_list|(
name|newDestPermissions
argument_list|)
expr_stmt|;
name|expect
argument_list|(
name|broker
operator|.
name|getCurrentSubject
argument_list|()
argument_list|)
operator|.
name|andReturn
argument_list|(
name|subject
argument_list|)
expr_stmt|;
name|expect
argument_list|(
name|newDestPermissions
operator|.
name|validate
argument_list|(
name|subject
argument_list|,
name|Permission
operator|.
name|EXECUTE
operator||
name|Permission
operator|.
name|WRITE
argument_list|)
argument_list|)
operator|.
name|andReturn
argument_list|(
literal|true
argument_list|)
expr_stmt|;
comment|//one sub-document with READ permission
name|expect
argument_list|(
name|srcCollection
operator|.
name|iterator
argument_list|(
name|broker
argument_list|)
argument_list|)
operator|.
name|andReturn
argument_list|(
operator|new
name|ArrayIterator
argument_list|<>
argument_list|(
name|srcSubDocument
argument_list|)
argument_list|)
expr_stmt|;
name|expect
argument_list|(
name|srcSubDocument
operator|.
name|getPermissions
argument_list|()
argument_list|)
operator|.
name|andReturn
argument_list|(
name|srcSubDocumentPermissions
argument_list|)
expr_stmt|;
name|expect
argument_list|(
name|broker
operator|.
name|getCurrentSubject
argument_list|()
argument_list|)
operator|.
name|andReturn
argument_list|(
name|subject
argument_list|)
expr_stmt|;
name|expect
argument_list|(
name|srcSubDocumentPermissions
operator|.
name|validate
argument_list|(
name|subject
argument_list|,
name|Permission
operator|.
name|READ
argument_list|)
argument_list|)
operator|.
name|andReturn
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|expect
argument_list|(
name|newDestCollection
operator|.
name|isEmpty
argument_list|(
name|broker
argument_list|)
argument_list|)
operator|.
name|andReturn
argument_list|(
literal|true
argument_list|)
expr_stmt|;
comment|//no documents in the dest collection
comment|//no sub-collections
name|expect
argument_list|(
name|srcCollection
operator|.
name|collectionIterator
argument_list|(
name|broker
argument_list|)
argument_list|)
operator|.
name|andReturn
argument_list|(
name|Collections
operator|.
name|emptyIterator
argument_list|()
argument_list|)
expr_stmt|;
comment|//test below
name|replay
argument_list|(
name|newDestPermissions
argument_list|,
name|newDestCollection
argument_list|,
name|srcSubDocumentPermissions
argument_list|,
name|srcSubDocument
argument_list|,
name|destCollection
argument_list|,
name|destPermissions
argument_list|,
name|srcCollection
argument_list|,
name|srcPermissions
argument_list|,
name|subject
argument_list|,
name|broker
argument_list|)
expr_stmt|;
comment|//run the test
name|broker
operator|.
name|checkPermissionsForCopy
argument_list|(
name|srcCollection
argument_list|,
name|destCollection
argument_list|,
name|newName
argument_list|)
expr_stmt|;
name|verify
argument_list|(
name|newDestPermissions
argument_list|,
name|newDestCollection
argument_list|,
name|srcSubDocumentPermissions
argument_list|,
name|srcSubDocument
argument_list|,
name|destCollection
argument_list|,
name|destPermissions
argument_list|,
name|srcCollection
argument_list|,
name|srcPermissions
argument_list|,
name|subject
argument_list|,
name|broker
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|dest
operator|.
name|append
argument_list|(
name|newName
argument_list|)
argument_list|,
name|newDestURICapture
operator|.
name|getValue
argument_list|()
argument_list|)
expr_stmt|;
block|}
comment|/**      * When copying a Collection (/db/test/source) where      * we have execute+read access and      * which has one descendant document (on which we DO NOT have read access)      * in it,      *      * to the destination /db/test/dest (which already exists)      * and we have execute+write access on /db/test and /db/test/dest      * we should NOT be allowed to copy the content of the Collection.      */
annotation|@
name|Test
argument_list|(
name|expected
operator|=
name|PermissionDeniedException
operator|.
name|class
argument_list|)
specifier|public
name|void
name|copyCollection_oneSubDoc_toExistingDest_cannotReadSubDoc
parameter_list|()
throws|throws
name|LockException
throws|,
name|PermissionDeniedException
block|{
specifier|final
name|XmldbURI
name|src
init|=
name|XmldbURI
operator|.
name|create
argument_list|(
literal|"/db/test/source"
argument_list|)
decl_stmt|;
specifier|final
name|XmldbURI
name|dest
init|=
name|XmldbURI
operator|.
name|create
argument_list|(
literal|"/db/test"
argument_list|)
decl_stmt|;
specifier|final
name|XmldbURI
name|newName
init|=
name|XmldbURI
operator|.
name|create
argument_list|(
literal|"dest"
argument_list|)
decl_stmt|;
specifier|final
name|Collection
name|srcCollection
init|=
name|EasyMock
operator|.
name|createStrictMock
argument_list|(
name|Collection
operator|.
name|class
argument_list|)
decl_stmt|;
specifier|final
name|Permission
name|srcPermissions
init|=
name|EasyMock
operator|.
name|createStrictMock
argument_list|(
name|Permission
operator|.
name|class
argument_list|)
decl_stmt|;
specifier|final
name|DocumentImpl
name|srcSubDocument
init|=
name|EasyMock
operator|.
name|createStrictMock
argument_list|(
name|DocumentImpl
operator|.
name|class
argument_list|)
decl_stmt|;
specifier|final
name|Permission
name|srcSubDocumentPermissions
init|=
name|EasyMock
operator|.
name|createStrictMock
argument_list|(
name|Permission
operator|.
name|class
argument_list|)
decl_stmt|;
specifier|final
name|Collection
name|destCollection
init|=
name|EasyMock
operator|.
name|createStrictMock
argument_list|(
name|Collection
operator|.
name|class
argument_list|)
decl_stmt|;
specifier|final
name|Permission
name|destPermissions
init|=
name|EasyMock
operator|.
name|createStrictMock
argument_list|(
name|Permission
operator|.
name|class
argument_list|)
decl_stmt|;
specifier|final
name|Collection
name|newDestCollection
init|=
name|EasyMock
operator|.
name|createStrictMock
argument_list|(
name|Collection
operator|.
name|class
argument_list|)
decl_stmt|;
specifier|final
name|Permission
name|newDestPermissions
init|=
name|EasyMock
operator|.
name|createStrictMock
argument_list|(
name|Permission
operator|.
name|class
argument_list|)
decl_stmt|;
specifier|final
name|NativeBroker
name|broker
init|=
name|EasyMock
operator|.
name|createMockBuilder
argument_list|(
name|NativeBroker
operator|.
name|class
argument_list|)
operator|.
name|addMockedMethod
argument_list|(
literal|"getCollection"
argument_list|)
operator|.
name|addMockedMethod
argument_list|(
literal|"getCurrentSubject"
argument_list|)
operator|.
name|createStrictMock
argument_list|()
decl_stmt|;
specifier|final
name|Subject
name|subject
init|=
name|EasyMock
operator|.
name|createStrictMock
argument_list|(
name|Subject
operator|.
name|class
argument_list|)
decl_stmt|;
comment|//grant EXECUTE and READ permissions on the src
name|expect
argument_list|(
name|srcCollection
operator|.
name|getPermissionsNoLock
argument_list|()
argument_list|)
operator|.
name|andReturn
argument_list|(
name|srcPermissions
argument_list|)
expr_stmt|;
name|expect
argument_list|(
name|broker
operator|.
name|getCurrentSubject
argument_list|()
argument_list|)
operator|.
name|andReturn
argument_list|(
name|subject
argument_list|)
expr_stmt|;
name|expect
argument_list|(
name|srcPermissions
operator|.
name|validate
argument_list|(
name|subject
argument_list|,
name|Permission
operator|.
name|EXECUTE
operator||
name|Permission
operator|.
name|READ
argument_list|)
argument_list|)
operator|.
name|andReturn
argument_list|(
literal|true
argument_list|)
expr_stmt|;
comment|//grant EXECUTE and WRITE permission on the dest
name|expect
argument_list|(
name|destCollection
operator|.
name|getURI
argument_list|()
argument_list|)
operator|.
name|andReturn
argument_list|(
name|dest
argument_list|)
expr_stmt|;
specifier|final
name|Capture
argument_list|<
name|XmldbURI
argument_list|>
name|newDestURICapture
init|=
name|newCapture
argument_list|()
decl_stmt|;
name|expect
argument_list|(
name|broker
operator|.
name|getCollection
argument_list|(
name|capture
argument_list|(
name|newDestURICapture
argument_list|)
argument_list|)
argument_list|)
operator|.
name|andReturn
argument_list|(
name|newDestCollection
argument_list|)
expr_stmt|;
name|expect
argument_list|(
name|destCollection
operator|.
name|getPermissionsNoLock
argument_list|()
argument_list|)
operator|.
name|andReturn
argument_list|(
name|destPermissions
argument_list|)
expr_stmt|;
name|expect
argument_list|(
name|broker
operator|.
name|getCurrentSubject
argument_list|()
argument_list|)
operator|.
name|andReturn
argument_list|(
name|subject
argument_list|)
expr_stmt|;
name|expect
argument_list|(
name|destPermissions
operator|.
name|validate
argument_list|(
name|subject
argument_list|,
name|Permission
operator|.
name|EXECUTE
operator||
name|Permission
operator|.
name|WRITE
argument_list|)
argument_list|)
operator|.
name|andReturn
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|expect
argument_list|(
name|newDestCollection
operator|.
name|getPermissionsNoLock
argument_list|()
argument_list|)
operator|.
name|andReturn
argument_list|(
name|newDestPermissions
argument_list|)
expr_stmt|;
name|expect
argument_list|(
name|broker
operator|.
name|getCurrentSubject
argument_list|()
argument_list|)
operator|.
name|andReturn
argument_list|(
name|subject
argument_list|)
expr_stmt|;
name|expect
argument_list|(
name|newDestPermissions
operator|.
name|validate
argument_list|(
name|subject
argument_list|,
name|Permission
operator|.
name|EXECUTE
operator||
name|Permission
operator|.
name|WRITE
argument_list|)
argument_list|)
operator|.
name|andReturn
argument_list|(
literal|true
argument_list|)
expr_stmt|;
comment|//one sub-document with READ permission
name|expect
argument_list|(
name|srcCollection
operator|.
name|iterator
argument_list|(
name|broker
argument_list|)
argument_list|)
operator|.
name|andReturn
argument_list|(
operator|new
name|ArrayIterator
argument_list|<>
argument_list|(
name|srcSubDocument
argument_list|)
argument_list|)
expr_stmt|;
name|expect
argument_list|(
name|srcSubDocument
operator|.
name|getPermissions
argument_list|()
argument_list|)
operator|.
name|andReturn
argument_list|(
name|srcSubDocumentPermissions
argument_list|)
expr_stmt|;
name|expect
argument_list|(
name|broker
operator|.
name|getCurrentSubject
argument_list|()
argument_list|)
operator|.
name|andReturn
argument_list|(
name|subject
argument_list|)
expr_stmt|;
name|expect
argument_list|(
name|srcSubDocumentPermissions
operator|.
name|validate
argument_list|(
name|subject
argument_list|,
name|Permission
operator|.
name|READ
argument_list|)
argument_list|)
operator|.
name|andReturn
argument_list|(
literal|false
argument_list|)
expr_stmt|;
comment|//expectations for exception that should be thrown
name|expect
argument_list|(
name|srcCollection
operator|.
name|getURI
argument_list|()
argument_list|)
operator|.
name|andReturn
argument_list|(
name|src
argument_list|)
expr_stmt|;
name|expect
argument_list|(
name|srcSubDocument
operator|.
name|getURI
argument_list|()
argument_list|)
operator|.
name|andReturn
argument_list|(
name|src
operator|.
name|append
argument_list|(
name|newName
argument_list|)
operator|.
name|append
argument_list|(
literal|"someSubDocument.xml"
argument_list|)
argument_list|)
expr_stmt|;
name|expect
argument_list|(
name|broker
operator|.
name|getCurrentSubject
argument_list|()
argument_list|)
operator|.
name|andReturn
argument_list|(
name|subject
argument_list|)
expr_stmt|;
name|expect
argument_list|(
name|subject
operator|.
name|getName
argument_list|()
argument_list|)
operator|.
name|andReturn
argument_list|(
literal|"Fake user"
argument_list|)
expr_stmt|;
comment|//no sub-collections
name|expect
argument_list|(
name|srcCollection
operator|.
name|collectionIterator
argument_list|(
name|broker
argument_list|)
argument_list|)
operator|.
name|andReturn
argument_list|(
name|Collections
operator|.
name|emptyIterator
argument_list|()
argument_list|)
expr_stmt|;
comment|//test below
name|replay
argument_list|(
name|newDestPermissions
argument_list|,
name|newDestCollection
argument_list|,
name|srcSubDocumentPermissions
argument_list|,
name|srcSubDocument
argument_list|,
name|destCollection
argument_list|,
name|destPermissions
argument_list|,
name|srcCollection
argument_list|,
name|srcPermissions
argument_list|,
name|subject
argument_list|,
name|broker
argument_list|)
expr_stmt|;
comment|//run the test
name|broker
operator|.
name|checkPermissionsForCopy
argument_list|(
name|srcCollection
argument_list|,
name|destCollection
argument_list|,
name|newName
argument_list|)
expr_stmt|;
name|verify
argument_list|(
name|newDestPermissions
argument_list|,
name|newDestCollection
argument_list|,
name|srcSubDocumentPermissions
argument_list|,
name|srcSubDocument
argument_list|,
name|destCollection
argument_list|,
name|destPermissions
argument_list|,
name|srcCollection
argument_list|,
name|srcPermissions
argument_list|,
name|subject
argument_list|,
name|broker
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|dest
operator|.
name|append
argument_list|(
name|newName
argument_list|)
argument_list|,
name|newDestURICapture
operator|.
name|getValue
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|getCollectionFile_resolvesPath
parameter_list|()
throws|throws
name|IOException
block|{
specifier|final
name|Path
name|tmpFolder
init|=
name|Files
operator|.
name|createTempDirectory
argument_list|(
literal|"exist-test-getCollectionFile_resolvesPath"
argument_list|)
decl_stmt|;
specifier|final
name|XmldbURI
name|collectionUri
init|=
name|XmldbURI
operator|.
name|create
argument_list|(
literal|"/db/a/b/c"
argument_list|)
decl_stmt|;
specifier|final
name|boolean
name|create
init|=
literal|false
decl_stmt|;
specifier|final
name|NativeBroker
name|broker
init|=
name|EasyMock
operator|.
name|createMockBuilder
argument_list|(
name|NativeBroker
operator|.
name|class
argument_list|)
operator|.
name|createStrictMock
argument_list|()
decl_stmt|;
comment|//test below
name|replay
argument_list|(
name|broker
argument_list|)
expr_stmt|;
comment|//run the test
specifier|final
name|Path
name|collectionFile
init|=
name|broker
operator|.
name|getCollectionFile
argument_list|(
name|tmpFolder
argument_list|,
name|collectionUri
argument_list|,
name|create
argument_list|)
decl_stmt|;
name|verify
argument_list|(
name|broker
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|expectedPath
argument_list|(
name|tmpFolder
argument_list|,
name|collectionUri
argument_list|)
argument_list|,
name|collectionFile
operator|.
name|toAbsolutePath
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|create
argument_list|,
name|Files
operator|.
name|exists
argument_list|(
name|collectionFile
operator|.
name|getParent
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|getCollectionFile_createsParent
parameter_list|()
throws|throws
name|IOException
block|{
specifier|final
name|Path
name|tmpFolder
init|=
name|Files
operator|.
name|createTempDirectory
argument_list|(
literal|"exist-test-getCollectionFile_createsParent"
argument_list|)
decl_stmt|;
name|tmpFolder
operator|.
name|toFile
argument_list|()
operator|.
name|deleteOnExit
argument_list|()
expr_stmt|;
specifier|final
name|XmldbURI
name|collectionUri
init|=
name|XmldbURI
operator|.
name|create
argument_list|(
literal|"/db/a/b/c"
argument_list|)
decl_stmt|;
specifier|final
name|boolean
name|create
init|=
literal|true
decl_stmt|;
specifier|final
name|NativeBroker
name|broker
init|=
name|EasyMock
operator|.
name|createMockBuilder
argument_list|(
name|NativeBroker
operator|.
name|class
argument_list|)
operator|.
name|createStrictMock
argument_list|()
decl_stmt|;
comment|//test below
name|replay
argument_list|(
name|broker
argument_list|)
expr_stmt|;
comment|//run the test
specifier|final
name|Path
name|collectionFile
init|=
name|broker
operator|.
name|getCollectionFile
argument_list|(
name|tmpFolder
argument_list|,
name|collectionUri
argument_list|,
name|create
argument_list|)
decl_stmt|;
name|verify
argument_list|(
name|broker
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|expectedPath
argument_list|(
name|tmpFolder
argument_list|,
name|collectionUri
argument_list|)
argument_list|,
name|collectionFile
operator|.
name|toAbsolutePath
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|create
argument_list|,
name|Files
operator|.
name|exists
argument_list|(
name|collectionFile
operator|.
name|getParent
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|getCollectionBinaryFileFsPath_resolvesPath
parameter_list|()
throws|throws
name|IOException
block|{
specifier|final
name|Path
name|tmpFolder
init|=
name|Files
operator|.
name|createTempDirectory
argument_list|(
literal|"exist-test-getCollectionBinaryFileFsPath_resolvesPath"
argument_list|)
decl_stmt|;
name|tmpFolder
operator|.
name|toFile
argument_list|()
operator|.
name|deleteOnExit
argument_list|()
expr_stmt|;
specifier|final
name|XmldbURI
name|collectionUri
init|=
name|XmldbURI
operator|.
name|create
argument_list|(
literal|"/db/a/b/c/something.bin"
argument_list|)
decl_stmt|;
specifier|final
name|NativeBroker
name|broker
init|=
name|EasyMock
operator|.
name|createMockBuilder
argument_list|(
name|NativeBroker
operator|.
name|class
argument_list|)
operator|.
name|addMockedMethod
argument_list|(
literal|"getFsDir"
argument_list|)
operator|.
name|createStrictMock
argument_list|()
decl_stmt|;
name|expect
argument_list|(
name|broker
operator|.
name|getFsDir
argument_list|()
argument_list|)
operator|.
name|andReturn
argument_list|(
name|tmpFolder
argument_list|)
expr_stmt|;
comment|//test below
name|replay
argument_list|(
name|broker
argument_list|)
expr_stmt|;
comment|//run the test
specifier|final
name|Path
name|collectionFile
init|=
name|broker
operator|.
name|getCollectionBinaryFileFsPath
argument_list|(
name|collectionUri
argument_list|)
decl_stmt|;
name|verify
argument_list|(
name|broker
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|expectedPath
argument_list|(
name|tmpFolder
argument_list|,
name|collectionUri
argument_list|)
argument_list|,
name|collectionFile
operator|.
name|toAbsolutePath
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
block|}
specifier|private
specifier|static
name|String
name|expectedPath
parameter_list|(
specifier|final
name|Path
name|folder
parameter_list|,
specifier|final
name|XmldbURI
name|xmldbUri
parameter_list|)
block|{
name|String
name|collectionPath
init|=
name|xmldbUri
operator|.
name|getCollectionPath
argument_list|()
decl_stmt|;
if|if
condition|(
name|collectionPath
operator|.
name|startsWith
argument_list|(
literal|"/"
argument_list|)
operator|||
name|collectionPath
operator|.
name|startsWith
argument_list|(
literal|"\\"
argument_list|)
condition|)
block|{
name|collectionPath
operator|=
name|collectionPath
operator|.
name|substring
argument_list|(
literal|1
argument_list|)
expr_stmt|;
block|}
return|return
name|folder
operator|.
name|resolve
argument_list|(
name|collectionPath
argument_list|)
operator|.
name|toAbsolutePath
argument_list|()
operator|.
name|toString
argument_list|()
return|;
block|}
class|class
name|ArrayIterator
parameter_list|<
name|T
parameter_list|>
implements|implements
name|Iterator
argument_list|<
name|T
argument_list|>
block|{
specifier|final
name|Iterator
argument_list|<
name|T
argument_list|>
name|it
decl_stmt|;
specifier|public
name|ArrayIterator
parameter_list|(
specifier|final
name|T
modifier|...
name|documents
parameter_list|)
block|{
name|this
operator|.
name|it
operator|=
name|Arrays
operator|.
name|asList
argument_list|(
name|documents
argument_list|)
operator|.
name|iterator
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|hasNext
parameter_list|()
block|{
return|return
name|it
operator|.
name|hasNext
argument_list|()
return|;
block|}
annotation|@
name|Override
specifier|public
name|T
name|next
parameter_list|()
block|{
return|return
name|it
operator|.
name|next
argument_list|()
return|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|remove
parameter_list|()
block|{
throw|throw
operator|new
name|UnsupportedOperationException
argument_list|(
literal|"Remove is not permitted"
argument_list|)
throw|;
block|}
block|}
class|class
name|EmptyIterator
parameter_list|<
name|T
parameter_list|>
implements|implements
name|Iterator
argument_list|<
name|T
argument_list|>
block|{
annotation|@
name|Override
specifier|public
name|boolean
name|hasNext
parameter_list|()
block|{
return|return
literal|false
return|;
block|}
annotation|@
name|Override
specifier|public
name|T
name|next
parameter_list|()
block|{
throw|throw
operator|new
name|NoSuchElementException
argument_list|(
literal|"Iterator is Empty!"
argument_list|)
throw|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|remove
parameter_list|()
block|{
throw|throw
operator|new
name|UnsupportedOperationException
argument_list|(
literal|"Remove is not permitted"
argument_list|)
throw|;
block|}
block|}
block|}
end_class

end_unit

