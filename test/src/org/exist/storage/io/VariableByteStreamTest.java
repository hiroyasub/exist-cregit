begin_unit|revision:1.0.0;language:Java;cregit-version:0.0.1
begin_package
package|package
name|org
operator|.
name|exist
operator|.
name|storage
operator|.
name|io
package|;
end_package

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Before
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Random
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertEquals
import|;
end_import

begin_class
specifier|public
class|class
name|VariableByteStreamTest
block|{
specifier|private
specifier|final
specifier|static
name|int
name|SIZE
init|=
literal|1000
decl_stmt|;
specifier|private
name|long
index|[]
name|values
init|=
operator|new
name|long
index|[
literal|1000
operator|*
literal|3
index|]
decl_stmt|;
annotation|@
name|Before
specifier|public
name|void
name|setUp
parameter_list|()
block|{
name|Random
name|rand
init|=
operator|new
name|Random
argument_list|(
name|System
operator|.
name|currentTimeMillis
argument_list|()
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|SIZE
operator|*
literal|3
condition|;
name|i
operator|++
control|)
block|{
name|values
index|[
name|i
operator|++
index|]
operator|=
name|rand
operator|.
name|nextInt
argument_list|()
expr_stmt|;
name|values
index|[
name|i
operator|++
index|]
operator|=
name|rand
operator|.
name|nextInt
argument_list|()
operator|&
literal|0xffffff
expr_stmt|;
name|values
index|[
name|i
index|]
operator|=
name|rand
operator|.
name|nextInt
argument_list|()
operator|&
literal|0xff
expr_stmt|;
block|}
block|}
annotation|@
name|Test
specifier|public
name|void
name|inOutLong
parameter_list|()
throws|throws
name|IOException
block|{
name|VariableByteOutputStream
name|os
init|=
operator|new
name|VariableByteOutputStream
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|SIZE
operator|*
literal|3
condition|;
name|i
operator|++
control|)
block|{
name|os
operator|.
name|writeLong
argument_list|(
name|values
index|[
name|i
operator|++
index|]
argument_list|)
expr_stmt|;
name|os
operator|.
name|writeInt
argument_list|(
operator|(
name|int
operator|)
name|values
index|[
name|i
operator|++
index|]
argument_list|)
expr_stmt|;
name|os
operator|.
name|writeShort
argument_list|(
operator|(
name|short
operator|)
name|values
index|[
name|i
index|]
argument_list|)
expr_stmt|;
block|}
name|byte
index|[]
name|data
init|=
name|os
operator|.
name|toByteArray
argument_list|()
decl_stmt|;
name|VariableByteArrayInput
name|is
init|=
operator|new
name|VariableByteArrayInput
argument_list|(
name|data
argument_list|)
decl_stmt|;
name|long
name|l
decl_stmt|;
name|short
name|s
decl_stmt|;
name|int
name|i
decl_stmt|;
for|for
control|(
name|int
name|j
init|=
literal|0
init|;
name|j
operator|<
name|SIZE
operator|*
literal|3
condition|;
name|j
operator|++
control|)
block|{
name|l
operator|=
name|is
operator|.
name|readLong
argument_list|()
expr_stmt|;
name|assertEquals
argument_list|(
name|l
argument_list|,
name|values
index|[
name|j
operator|++
index|]
argument_list|)
expr_stmt|;
name|i
operator|=
name|is
operator|.
name|readInt
argument_list|()
expr_stmt|;
name|assertEquals
argument_list|(
name|i
argument_list|,
name|values
index|[
name|j
operator|++
index|]
argument_list|)
expr_stmt|;
name|s
operator|=
name|is
operator|.
name|readShort
argument_list|()
expr_stmt|;
name|assertEquals
argument_list|(
name|s
argument_list|,
name|values
index|[
name|j
index|]
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Test
specifier|public
name|void
name|copyTo
parameter_list|()
throws|throws
name|IOException
block|{
name|Random
name|rand
init|=
operator|new
name|Random
argument_list|(
name|System
operator|.
name|currentTimeMillis
argument_list|()
argument_list|)
decl_stmt|;
name|int
name|valuesWritten
init|=
literal|0
decl_stmt|;
name|int
name|dataLen
init|=
literal|0
decl_stmt|;
name|VariableByteOutputStream
name|os
init|=
operator|new
name|VariableByteOutputStream
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
literal|1000
condition|;
name|i
operator|++
control|)
block|{
name|int
name|count
init|=
name|rand
operator|.
name|nextInt
argument_list|(
literal|0xfff
argument_list|)
decl_stmt|;
name|os
operator|.
name|writeShort
argument_list|(
operator|(
name|short
operator|)
name|count
argument_list|)
expr_stmt|;
name|dataLen
operator|+=
literal|2
expr_stmt|;
for|for
control|(
name|int
name|j
init|=
literal|0
init|;
name|j
operator|<
name|count
condition|;
name|j
operator|++
control|)
block|{
name|int
name|next
init|=
name|rand
operator|.
name|nextInt
argument_list|(
literal|0xff
argument_list|)
decl_stmt|;
name|os
operator|.
name|writeShort
argument_list|(
operator|(
name|short
operator|)
name|next
argument_list|)
expr_stmt|;
name|valuesWritten
operator|++
expr_stmt|;
name|dataLen
operator|+=
literal|2
expr_stmt|;
block|}
block|}
name|byte
index|[]
name|data
init|=
name|os
operator|.
name|toByteArray
argument_list|()
decl_stmt|;
name|int
name|valuesCopied
init|=
literal|0
decl_stmt|;
name|dataLen
operator|=
literal|0
expr_stmt|;
name|VariableByteArrayInput
name|is
init|=
operator|new
name|VariableByteArrayInput
argument_list|(
name|data
argument_list|)
decl_stmt|;
name|os
operator|=
operator|new
name|VariableByteOutputStream
argument_list|()
expr_stmt|;
while|while
condition|(
name|is
operator|.
name|available
argument_list|()
operator|>
literal|0
condition|)
block|{
name|int
name|count
init|=
name|is
operator|.
name|readShort
argument_list|()
decl_stmt|;
name|boolean
name|skip
init|=
name|rand
operator|.
name|nextBoolean
argument_list|()
decl_stmt|;
if|if
condition|(
name|skip
condition|)
name|is
operator|.
name|skip
argument_list|(
name|count
argument_list|)
expr_stmt|;
else|else
block|{
name|os
operator|.
name|writeShort
argument_list|(
name|count
argument_list|)
expr_stmt|;
name|is
operator|.
name|copyTo
argument_list|(
name|os
argument_list|,
name|count
argument_list|)
expr_stmt|;
name|valuesCopied
operator|+=
name|count
expr_stmt|;
name|dataLen
operator|+=
literal|2
operator|*
name|count
operator|+
literal|2
expr_stmt|;
block|}
block|}
name|data
operator|=
name|os
operator|.
name|toByteArray
argument_list|()
expr_stmt|;
name|int
name|valuesRead
init|=
literal|0
decl_stmt|;
name|is
operator|=
operator|new
name|VariableByteArrayInput
argument_list|(
name|data
argument_list|)
expr_stmt|;
while|while
condition|(
name|is
operator|.
name|available
argument_list|()
operator|>
literal|0
condition|)
block|{
name|int
name|count
init|=
name|is
operator|.
name|readShort
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|count
condition|;
name|i
operator|++
control|)
block|{
name|is
operator|.
name|readShort
argument_list|()
expr_stmt|;
name|valuesRead
operator|++
expr_stmt|;
block|}
block|}
name|assertEquals
argument_list|(
name|valuesRead
argument_list|,
name|valuesCopied
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

