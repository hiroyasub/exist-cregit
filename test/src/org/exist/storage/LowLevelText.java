begin_unit|revision:1.0.0;language:Java;cregit-version:0.0.1
begin_package
package|package
name|org
operator|.
name|exist
operator|.
name|storage
package|;
end_package

begin_import
import|import
name|junit
operator|.
name|framework
operator|.
name|TestCase
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|security
operator|.
name|xacml
operator|.
name|AccessContext
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|source
operator|.
name|StringSource
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|util
operator|.
name|Configuration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|xquery
operator|.
name|CompiledXQuery
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|xquery
operator|.
name|XQuery
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|xquery
operator|.
name|XQueryContext
import|;
end_import

begin_comment
comment|/** Currently, tests for the {@link org.exist.storage.XQueryPool}  * with the {@link StringSource}.   *   * $Id$ */
end_comment

begin_class
specifier|public
class|class
name|LowLevelText
extends|extends
name|TestCase
block|{
specifier|private
specifier|static
specifier|final
name|String
name|TEST_XQUERY_SOURCE
init|=
literal|"/test"
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|String
name|MY_TEST_INSTANCE
init|=
literal|"my test instance"
decl_stmt|;
specifier|public
specifier|static
name|void
name|main
parameter_list|(
name|String
index|[]
name|args
parameter_list|)
block|{
name|junit
operator|.
name|textui
operator|.
name|TestRunner
operator|.
name|run
argument_list|(
name|LowLevelText
operator|.
name|class
argument_list|)
expr_stmt|;
block|}
specifier|private
name|DBBroker
name|broker
decl_stmt|;
specifier|private
name|XQueryPool
name|pool
decl_stmt|;
specifier|private
name|StringSource
name|stringSource
decl_stmt|;
specifier|private
name|CompiledXQuery
name|preCompiledXQuery
decl_stmt|;
specifier|protected
name|void
name|setUp
parameter_list|()
throws|throws
name|Exception
block|{
name|Configuration
name|configuration
init|=
operator|new
name|Configuration
argument_list|()
decl_stmt|;
name|BrokerPool
operator|.
name|configure
argument_list|(
name|MY_TEST_INSTANCE
argument_list|,
literal|1
argument_list|,
literal|1
argument_list|,
name|configuration
argument_list|)
expr_stmt|;
name|BrokerPool
name|brokerPool
init|=
name|BrokerPool
operator|.
name|getInstance
argument_list|(
name|MY_TEST_INSTANCE
argument_list|)
decl_stmt|;
comment|//BUG: need to be released!
name|broker
operator|=
name|brokerPool
operator|.
name|get
argument_list|(
name|brokerPool
operator|.
name|getSecurityManager
argument_list|()
operator|.
name|getSystemAccount
argument_list|()
argument_list|)
expr_stmt|;
name|pool
operator|=
operator|new
name|XQueryPool
argument_list|(
name|configuration
argument_list|)
expr_stmt|;
name|stringSource
operator|=
operator|new
name|StringSource
argument_list|(
name|TEST_XQUERY_SOURCE
argument_list|)
expr_stmt|;
name|XQuery
name|xquery
init|=
name|broker
operator|.
name|getXQueryService
argument_list|()
decl_stmt|;
name|XQueryContext
name|context
init|=
operator|new
name|XQueryContext
argument_list|(
name|broker
argument_list|,
name|AccessContext
operator|.
name|TEST
argument_list|)
decl_stmt|;
name|preCompiledXQuery
operator|=
name|xquery
operator|.
name|compile
argument_list|(
name|context
argument_list|,
name|stringSource
argument_list|)
expr_stmt|;
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"pre-compiled XQuery: "
operator|+
name|preCompiledXQuery
argument_list|)
expr_stmt|;
block|}
comment|//	protected void tearDown() {
comment|//		try {
comment|//			BrokerPool.stopAll(false);
comment|//		} catch (Exception e) {
comment|//			fail(e.getMessage());
comment|//		}
comment|//	}
comment|/** 	 * Test method for 'org.exist.storage.XQueryPool.borrowCompiledXQuery(DBBroker, Source)' 	 */
specifier|public
name|void
name|testBorrowCompiledXQuery1
parameter_list|()
block|{
comment|// put the preCompiledXQuery in cache - NOTE: returnCompiledXQuery() is not a good name
name|pool
operator|.
name|returnCompiledXQuery
argument_list|(
name|stringSource
argument_list|,
name|preCompiledXQuery
argument_list|)
expr_stmt|;
name|callAndTestBorrowCompiledXQuery
argument_list|(
name|stringSource
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|testBorrowCompiledXQuery2
parameter_list|()
block|{
name|pool
operator|.
name|returnCompiledXQuery
argument_list|(
name|stringSource
argument_list|,
name|preCompiledXQuery
argument_list|)
expr_stmt|;
name|callAndTestBorrowCompiledXQuery
argument_list|(
name|stringSource
argument_list|)
expr_stmt|;
name|callAndTestBorrowCompiledXQuery
argument_list|(
name|stringSource
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|testBorrowCompiledXQuery3
parameter_list|()
block|{
name|pool
operator|.
name|returnCompiledXQuery
argument_list|(
name|stringSource
argument_list|,
name|preCompiledXQuery
argument_list|)
expr_stmt|;
name|callAndTestBorrowCompiledXQuery
argument_list|(
name|stringSource
argument_list|)
expr_stmt|;
name|callAndTestBorrowCompiledXQuery
argument_list|(
name|stringSource
argument_list|)
expr_stmt|;
name|callAndTestBorrowCompiledXQuery
argument_list|(
name|stringSource
argument_list|)
expr_stmt|;
block|}
comment|/** test with a new StringSource object having same content */
specifier|public
name|void
name|testBorrowCompiledXQueryNewStringSource
parameter_list|()
block|{
name|pool
operator|.
name|returnCompiledXQuery
argument_list|(
name|stringSource
argument_list|,
name|preCompiledXQuery
argument_list|)
expr_stmt|;
name|StringSource
name|localStringSource
init|=
operator|new
name|StringSource
argument_list|(
name|TEST_XQUERY_SOURCE
argument_list|)
decl_stmt|;
name|callAndTestBorrowCompiledXQuery
argument_list|(
name|localStringSource
argument_list|)
expr_stmt|;
block|}
comment|/** test with a new StringSource object having same content */
specifier|public
name|void
name|testBorrowCompiledXQueryNewStringSource2
parameter_list|()
block|{
name|pool
operator|.
name|returnCompiledXQuery
argument_list|(
name|stringSource
argument_list|,
name|preCompiledXQuery
argument_list|)
expr_stmt|;
name|StringSource
name|localStringSource
init|=
operator|new
name|StringSource
argument_list|(
name|TEST_XQUERY_SOURCE
argument_list|)
decl_stmt|;
name|callAndTestBorrowCompiledXQuery
argument_list|(
name|localStringSource
argument_list|)
expr_stmt|;
name|callAndTestBorrowCompiledXQuery
argument_list|(
name|localStringSource
argument_list|)
expr_stmt|;
block|}
specifier|private
name|void
name|callAndTestBorrowCompiledXQuery
parameter_list|(
name|StringSource
name|stringSourceArg
parameter_list|)
block|{
name|CompiledXQuery
name|compiledXQuery
init|=
name|pool
operator|.
name|borrowCompiledXQuery
argument_list|(
name|broker
argument_list|,
name|stringSourceArg
argument_list|)
decl_stmt|;
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"compiledXQuery: "
operator|+
name|compiledXQuery
argument_list|)
expr_stmt|;
name|assertNotNull
argument_list|(
literal|"borrowCompiledXQuery should retrieve something for this stringSource"
argument_list|,
name|compiledXQuery
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"borrowCompiledXQuery should retrieve the preCompiled XQuery for this stringSource"
argument_list|,
name|compiledXQuery
argument_list|,
name|preCompiledXQuery
argument_list|)
expr_stmt|;
block|}
block|}
end_class

begin_comment
comment|/*  *  eXist Open Source Native XML Database  *  Copyright (C) 2001,  Wolfgang M. Meier (meier@ifs.tu-darmstadt.de) and the team.  *  *  This library is free software; you can redistribute it and/or  *  modify it under the terms of the GNU Library General Public License  *  as published by the Free Software Foundation; either version 2  *  of the License, or (at your option) any later version.  *  *  This library is distributed in the hope that it will be useful,  *  but WITHOUT ANY WARRANTY; without even the implied warranty of  *  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the  *  GNU Library General Public License for more details.  *  *  You should have received a copy of the GNU Library General Public License  *  along with this program; if not, write to the Free Software  *  Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA  02111-1307, USA.   */
end_comment

end_unit

