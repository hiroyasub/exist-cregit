begin_unit|revision:1.0.0;language:Java;cregit-version:0.0.1
begin_package
package|package
name|org
operator|.
name|exist
operator|.
name|storage
operator|.
name|lock
package|;
end_package

begin_import
import|import
name|net
operator|.
name|jcip
operator|.
name|annotations
operator|.
name|ThreadSafe
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|util
operator|.
name|LockException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|xmldb
operator|.
name|XmldbURI
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|AfterClass
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|BeforeClass
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Stack
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|atomic
operator|.
name|AtomicBoolean
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|locks
operator|.
name|ReentrantReadWriteLock
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|*
import|;
end_import

begin_comment
comment|/**  * Tests to ensure the correct behaviour of the LockManager  *  * @author Adam Retter<adam.retter@googlemail.com>  */
end_comment

begin_class
specifier|public
class|class
name|LockManagerTest
block|{
specifier|private
specifier|static
specifier|final
name|int
name|CONCURRENCY_LEVEL
init|=
literal|100
decl_stmt|;
specifier|private
specifier|static
name|String
name|previousLockEventsState
init|=
literal|null
decl_stmt|;
annotation|@
name|BeforeClass
specifier|public
specifier|static
name|void
name|enableLockEventsState
parameter_list|()
block|{
name|previousLockEventsState
operator|=
name|System
operator|.
name|setProperty
argument_list|(
name|LockTable
operator|.
name|PROP_ENABLE
argument_list|,
literal|"true"
argument_list|)
expr_stmt|;
block|}
annotation|@
name|AfterClass
specifier|public
specifier|static
name|void
name|restoreLockEventsState
parameter_list|()
block|{
if|if
condition|(
name|previousLockEventsState
operator|!=
literal|null
condition|)
block|{
name|System
operator|.
name|setProperty
argument_list|(
name|LockTable
operator|.
name|PROP_ENABLE
argument_list|,
name|previousLockEventsState
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|System
operator|.
name|clearProperty
argument_list|(
name|LockTable
operator|.
name|PROP_ENABLE
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Test
specifier|public
name|void
name|getCollectionLock_isStripedByPath
parameter_list|()
block|{
specifier|final
name|LockManager
name|lockManager
init|=
operator|new
name|LockManager
argument_list|(
name|CONCURRENCY_LEVEL
argument_list|)
decl_stmt|;
specifier|final
name|ReentrantReadWriteLock
name|dbLock1
init|=
name|lockManager
operator|.
name|getCollectionLock
argument_list|(
literal|"/db"
argument_list|)
decl_stmt|;
name|assertNotNull
argument_list|(
name|dbLock1
argument_list|)
expr_stmt|;
specifier|final
name|ReentrantReadWriteLock
name|dbLock2
init|=
name|lockManager
operator|.
name|getCollectionLock
argument_list|(
literal|"/db"
argument_list|)
decl_stmt|;
name|assertNotNull
argument_list|(
name|dbLock2
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|dbLock1
operator|==
name|dbLock2
argument_list|)
expr_stmt|;
specifier|final
name|ReentrantReadWriteLock
name|abcLock
init|=
name|lockManager
operator|.
name|getCollectionLock
argument_list|(
literal|"/db/a/b/c"
argument_list|)
decl_stmt|;
name|assertNotNull
argument_list|(
name|abcLock
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|dbLock1
operator|==
name|abcLock
argument_list|)
expr_stmt|;
specifier|final
name|ReentrantReadWriteLock
name|defLock
init|=
name|lockManager
operator|.
name|getCollectionLock
argument_list|(
literal|"/db/d/e/f"
argument_list|)
decl_stmt|;
name|assertNotNull
argument_list|(
name|defLock
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|dbLock1
operator|==
name|defLock
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|abcLock
operator|==
name|defLock
argument_list|)
expr_stmt|;
block|}
comment|/**      * When acquiring a READ lock on the root Collection      * ensure that we only take a single READ lock on the      * root Collection      */
annotation|@
name|Test
specifier|public
name|void
name|acquireCollectionReadLock_root
parameter_list|()
throws|throws
name|LockException
block|{
specifier|final
name|LockTable
name|lockTable
init|=
name|LockTable
operator|.
name|getInstance
argument_list|()
decl_stmt|;
specifier|final
name|LockEventRecordingListener
name|lockEventRecordingListener
init|=
operator|new
name|LockEventRecordingListener
argument_list|()
decl_stmt|;
name|lockTable
operator|.
name|registerListener
argument_list|(
name|lockEventRecordingListener
argument_list|)
expr_stmt|;
specifier|final
name|LockManager
name|lockManager
init|=
operator|new
name|LockManager
argument_list|(
name|CONCURRENCY_LEVEL
argument_list|)
decl_stmt|;
try|try
init|(
specifier|final
name|ManagedCollectionLock
name|rootLock
init|=
name|lockManager
operator|.
name|acquireCollectionReadLock
argument_list|(
name|XmldbURI
operator|.
name|ROOT_COLLECTION_URI
argument_list|)
init|)
block|{
name|assertNotNull
argument_list|(
name|rootLock
argument_list|)
expr_stmt|;
block|}
name|lockTable
operator|.
name|deregisterListener
argument_list|(
name|lockEventRecordingListener
argument_list|)
expr_stmt|;
comment|// wait for the listener to be deregistered
while|while
condition|(
name|lockEventRecordingListener
operator|.
name|isRegistered
argument_list|()
condition|)
block|{
block|}
specifier|final
name|Stack
argument_list|<
name|LockTable
operator|.
name|LockAction
argument_list|>
name|events
init|=
name|lockEventRecordingListener
operator|.
name|getEvents
argument_list|()
decl_stmt|;
name|assertEquals
argument_list|(
literal|3
argument_list|,
name|events
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
specifier|final
name|LockTable
operator|.
name|LockAction
name|event3
init|=
name|events
operator|.
name|pop
argument_list|()
decl_stmt|;
specifier|final
name|LockTable
operator|.
name|LockAction
name|event2
init|=
name|events
operator|.
name|pop
argument_list|()
decl_stmt|;
specifier|final
name|LockTable
operator|.
name|LockAction
name|event1
init|=
name|events
operator|.
name|pop
argument_list|()
decl_stmt|;
name|assertEquals
argument_list|(
name|LockTable
operator|.
name|LockAction
operator|.
name|Action
operator|.
name|Attempt
argument_list|,
name|event1
operator|.
name|action
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|XmldbURI
operator|.
name|ROOT_COLLECTION
argument_list|,
name|event1
operator|.
name|id
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|Lock
operator|.
name|LockMode
operator|.
name|READ_LOCK
argument_list|,
name|event1
operator|.
name|mode
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|LockTable
operator|.
name|LockAction
operator|.
name|Action
operator|.
name|Acquired
argument_list|,
name|event2
operator|.
name|action
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|XmldbURI
operator|.
name|ROOT_COLLECTION
argument_list|,
name|event2
operator|.
name|id
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|Lock
operator|.
name|LockMode
operator|.
name|READ_LOCK
argument_list|,
name|event2
operator|.
name|mode
argument_list|)
expr_stmt|;
comment|// we now expect to release the lock on /db (as the managed lock was closed)
name|assertEquals
argument_list|(
name|LockTable
operator|.
name|LockAction
operator|.
name|Action
operator|.
name|Released
argument_list|,
name|event3
operator|.
name|action
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|XmldbURI
operator|.
name|ROOT_COLLECTION
argument_list|,
name|event3
operator|.
name|id
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|Lock
operator|.
name|LockMode
operator|.
name|READ_LOCK
argument_list|,
name|event3
operator|.
name|mode
argument_list|)
expr_stmt|;
block|}
comment|/**      * When acquiring a READ lock on a sub-collection of the root      * Collection ensure that we hold a single READ lock on the      * sub-collection and perform top-down lock-coupling on the      * collection hierarchy to get there      */
annotation|@
name|Test
specifier|public
name|void
name|acquireCollectionReadLock_depth2
parameter_list|()
throws|throws
name|LockException
block|{
specifier|final
name|LockTable
name|lockTable
init|=
name|LockTable
operator|.
name|getInstance
argument_list|()
decl_stmt|;
specifier|final
name|LockEventRecordingListener
name|lockEventRecordingListener
init|=
operator|new
name|LockEventRecordingListener
argument_list|()
decl_stmt|;
name|lockTable
operator|.
name|registerListener
argument_list|(
name|lockEventRecordingListener
argument_list|)
expr_stmt|;
specifier|final
name|String
name|collectionPath
init|=
literal|"/db/colA"
decl_stmt|;
specifier|final
name|LockManager
name|lockManager
init|=
operator|new
name|LockManager
argument_list|(
name|CONCURRENCY_LEVEL
argument_list|)
decl_stmt|;
try|try
init|(
specifier|final
name|ManagedCollectionLock
name|colALock
init|=
name|lockManager
operator|.
name|acquireCollectionReadLock
argument_list|(
name|XmldbURI
operator|.
name|create
argument_list|(
name|collectionPath
argument_list|)
argument_list|)
init|)
block|{
name|assertNotNull
argument_list|(
name|colALock
argument_list|)
expr_stmt|;
block|}
name|lockTable
operator|.
name|deregisterListener
argument_list|(
name|lockEventRecordingListener
argument_list|)
expr_stmt|;
comment|// wait for the listener to be deregistered
while|while
condition|(
name|lockEventRecordingListener
operator|.
name|isRegistered
argument_list|()
condition|)
block|{
block|}
specifier|final
name|Stack
argument_list|<
name|LockTable
operator|.
name|LockAction
argument_list|>
name|events
init|=
name|lockEventRecordingListener
operator|.
name|getEvents
argument_list|()
decl_stmt|;
name|assertEquals
argument_list|(
literal|6
argument_list|,
name|events
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
specifier|final
name|LockTable
operator|.
name|LockAction
name|event6
init|=
name|events
operator|.
name|pop
argument_list|()
decl_stmt|;
specifier|final
name|LockTable
operator|.
name|LockAction
name|event5
init|=
name|events
operator|.
name|pop
argument_list|()
decl_stmt|;
specifier|final
name|LockTable
operator|.
name|LockAction
name|event4
init|=
name|events
operator|.
name|pop
argument_list|()
decl_stmt|;
specifier|final
name|LockTable
operator|.
name|LockAction
name|event3
init|=
name|events
operator|.
name|pop
argument_list|()
decl_stmt|;
specifier|final
name|LockTable
operator|.
name|LockAction
name|event2
init|=
name|events
operator|.
name|pop
argument_list|()
decl_stmt|;
specifier|final
name|LockTable
operator|.
name|LockAction
name|event1
init|=
name|events
operator|.
name|pop
argument_list|()
decl_stmt|;
name|assertEquals
argument_list|(
name|LockTable
operator|.
name|LockAction
operator|.
name|Action
operator|.
name|Attempt
argument_list|,
name|event1
operator|.
name|action
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|XmldbURI
operator|.
name|ROOT_COLLECTION
argument_list|,
name|event1
operator|.
name|id
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|Lock
operator|.
name|LockMode
operator|.
name|READ_LOCK
argument_list|,
name|event1
operator|.
name|mode
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|LockTable
operator|.
name|LockAction
operator|.
name|Action
operator|.
name|Acquired
argument_list|,
name|event2
operator|.
name|action
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|XmldbURI
operator|.
name|ROOT_COLLECTION
argument_list|,
name|event2
operator|.
name|id
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|Lock
operator|.
name|LockMode
operator|.
name|READ_LOCK
argument_list|,
name|event2
operator|.
name|mode
argument_list|)
expr_stmt|;
comment|// we now expect to couple /db with /db/colA by acquiring /db/colA whilst holding /db
name|assertEquals
argument_list|(
name|LockTable
operator|.
name|LockAction
operator|.
name|Action
operator|.
name|Attempt
argument_list|,
name|event3
operator|.
name|action
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|collectionPath
argument_list|,
name|event3
operator|.
name|id
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|Lock
operator|.
name|LockMode
operator|.
name|READ_LOCK
argument_list|,
name|event3
operator|.
name|mode
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|LockTable
operator|.
name|LockAction
operator|.
name|Action
operator|.
name|Acquired
argument_list|,
name|event4
operator|.
name|action
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|collectionPath
argument_list|,
name|event4
operator|.
name|id
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|Lock
operator|.
name|LockMode
operator|.
name|READ_LOCK
argument_list|,
name|event4
operator|.
name|mode
argument_list|)
expr_stmt|;
comment|// we now expect to release the lock on /db
name|assertEquals
argument_list|(
name|LockTable
operator|.
name|LockAction
operator|.
name|Action
operator|.
name|Released
argument_list|,
name|event5
operator|.
name|action
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|XmldbURI
operator|.
name|ROOT_COLLECTION
argument_list|,
name|event5
operator|.
name|id
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|Lock
operator|.
name|LockMode
operator|.
name|READ_LOCK
argument_list|,
name|event5
operator|.
name|mode
argument_list|)
expr_stmt|;
comment|// we now expect to release the lock on /db/colA (as the managed lock was closed)
name|assertEquals
argument_list|(
name|LockTable
operator|.
name|LockAction
operator|.
name|Action
operator|.
name|Released
argument_list|,
name|event6
operator|.
name|action
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|collectionPath
argument_list|,
name|event6
operator|.
name|id
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|Lock
operator|.
name|LockMode
operator|.
name|READ_LOCK
argument_list|,
name|event6
operator|.
name|mode
argument_list|)
expr_stmt|;
block|}
comment|/**      * When acquiring a READ lock on a descendant-collection of the root      * Collection ensure that we hold a single READ lock on the      * descendant-collection and perform top-down lock-coupling on the      * collection hierarchy to get there      */
annotation|@
name|Test
specifier|public
name|void
name|acquireCollectionReadLock_depth3
parameter_list|()
throws|throws
name|LockException
block|{
specifier|final
name|LockTable
name|lockTable
init|=
name|LockTable
operator|.
name|getInstance
argument_list|()
decl_stmt|;
specifier|final
name|LockEventRecordingListener
name|lockEventRecordingListener
init|=
operator|new
name|LockEventRecordingListener
argument_list|()
decl_stmt|;
name|lockTable
operator|.
name|registerListener
argument_list|(
name|lockEventRecordingListener
argument_list|)
expr_stmt|;
specifier|final
name|String
name|collectionAPath
init|=
literal|"/db/colA"
decl_stmt|;
specifier|final
name|String
name|collectionBPath
init|=
name|collectionAPath
operator|+
literal|"/colB"
decl_stmt|;
specifier|final
name|LockManager
name|lockManager
init|=
operator|new
name|LockManager
argument_list|(
name|CONCURRENCY_LEVEL
argument_list|)
decl_stmt|;
try|try
init|(
specifier|final
name|ManagedCollectionLock
name|colBLock
init|=
name|lockManager
operator|.
name|acquireCollectionReadLock
argument_list|(
name|XmldbURI
operator|.
name|create
argument_list|(
name|collectionBPath
argument_list|)
argument_list|)
init|)
block|{
name|assertNotNull
argument_list|(
name|colBLock
argument_list|)
expr_stmt|;
block|}
name|lockTable
operator|.
name|deregisterListener
argument_list|(
name|lockEventRecordingListener
argument_list|)
expr_stmt|;
comment|// wait for the listener to be deregistered
while|while
condition|(
name|lockEventRecordingListener
operator|.
name|isRegistered
argument_list|()
condition|)
block|{
block|}
specifier|final
name|Stack
argument_list|<
name|LockTable
operator|.
name|LockAction
argument_list|>
name|events
init|=
name|lockEventRecordingListener
operator|.
name|getEvents
argument_list|()
decl_stmt|;
name|assertEquals
argument_list|(
literal|9
argument_list|,
name|events
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
specifier|final
name|LockTable
operator|.
name|LockAction
name|event9
init|=
name|events
operator|.
name|pop
argument_list|()
decl_stmt|;
specifier|final
name|LockTable
operator|.
name|LockAction
name|event8
init|=
name|events
operator|.
name|pop
argument_list|()
decl_stmt|;
specifier|final
name|LockTable
operator|.
name|LockAction
name|event7
init|=
name|events
operator|.
name|pop
argument_list|()
decl_stmt|;
specifier|final
name|LockTable
operator|.
name|LockAction
name|event6
init|=
name|events
operator|.
name|pop
argument_list|()
decl_stmt|;
specifier|final
name|LockTable
operator|.
name|LockAction
name|event5
init|=
name|events
operator|.
name|pop
argument_list|()
decl_stmt|;
specifier|final
name|LockTable
operator|.
name|LockAction
name|event4
init|=
name|events
operator|.
name|pop
argument_list|()
decl_stmt|;
specifier|final
name|LockTable
operator|.
name|LockAction
name|event3
init|=
name|events
operator|.
name|pop
argument_list|()
decl_stmt|;
specifier|final
name|LockTable
operator|.
name|LockAction
name|event2
init|=
name|events
operator|.
name|pop
argument_list|()
decl_stmt|;
specifier|final
name|LockTable
operator|.
name|LockAction
name|event1
init|=
name|events
operator|.
name|pop
argument_list|()
decl_stmt|;
name|assertEquals
argument_list|(
name|LockTable
operator|.
name|LockAction
operator|.
name|Action
operator|.
name|Attempt
argument_list|,
name|event1
operator|.
name|action
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|XmldbURI
operator|.
name|ROOT_COLLECTION
argument_list|,
name|event1
operator|.
name|id
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|Lock
operator|.
name|LockMode
operator|.
name|READ_LOCK
argument_list|,
name|event1
operator|.
name|mode
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|LockTable
operator|.
name|LockAction
operator|.
name|Action
operator|.
name|Acquired
argument_list|,
name|event2
operator|.
name|action
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|XmldbURI
operator|.
name|ROOT_COLLECTION
argument_list|,
name|event2
operator|.
name|id
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|Lock
operator|.
name|LockMode
operator|.
name|READ_LOCK
argument_list|,
name|event2
operator|.
name|mode
argument_list|)
expr_stmt|;
comment|// we now expect to couple /db with /db/colA by acquiring /db/colA whilst holding /db
name|assertEquals
argument_list|(
name|LockTable
operator|.
name|LockAction
operator|.
name|Action
operator|.
name|Attempt
argument_list|,
name|event3
operator|.
name|action
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|collectionAPath
argument_list|,
name|event3
operator|.
name|id
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|Lock
operator|.
name|LockMode
operator|.
name|READ_LOCK
argument_list|,
name|event3
operator|.
name|mode
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|LockTable
operator|.
name|LockAction
operator|.
name|Action
operator|.
name|Acquired
argument_list|,
name|event4
operator|.
name|action
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|collectionAPath
argument_list|,
name|event4
operator|.
name|id
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|Lock
operator|.
name|LockMode
operator|.
name|READ_LOCK
argument_list|,
name|event4
operator|.
name|mode
argument_list|)
expr_stmt|;
comment|// we now expect to release the lock on /db
name|assertEquals
argument_list|(
name|LockTable
operator|.
name|LockAction
operator|.
name|Action
operator|.
name|Released
argument_list|,
name|event5
operator|.
name|action
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|XmldbURI
operator|.
name|ROOT_COLLECTION
argument_list|,
name|event5
operator|.
name|id
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|Lock
operator|.
name|LockMode
operator|.
name|READ_LOCK
argument_list|,
name|event5
operator|.
name|mode
argument_list|)
expr_stmt|;
comment|// we now expect to couple /db/colA with /db/colA/colB by acquiring /db/colA/colB whilst holding /db/colA
name|assertEquals
argument_list|(
name|LockTable
operator|.
name|LockAction
operator|.
name|Action
operator|.
name|Attempt
argument_list|,
name|event6
operator|.
name|action
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|collectionBPath
argument_list|,
name|event6
operator|.
name|id
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|Lock
operator|.
name|LockMode
operator|.
name|READ_LOCK
argument_list|,
name|event6
operator|.
name|mode
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|LockTable
operator|.
name|LockAction
operator|.
name|Action
operator|.
name|Acquired
argument_list|,
name|event7
operator|.
name|action
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|collectionBPath
argument_list|,
name|event7
operator|.
name|id
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|Lock
operator|.
name|LockMode
operator|.
name|READ_LOCK
argument_list|,
name|event7
operator|.
name|mode
argument_list|)
expr_stmt|;
comment|// we now expect to release the lock on /db/colA
name|assertEquals
argument_list|(
name|LockTable
operator|.
name|LockAction
operator|.
name|Action
operator|.
name|Released
argument_list|,
name|event8
operator|.
name|action
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|collectionAPath
argument_list|,
name|event8
operator|.
name|id
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|Lock
operator|.
name|LockMode
operator|.
name|READ_LOCK
argument_list|,
name|event8
operator|.
name|mode
argument_list|)
expr_stmt|;
comment|// we now expect to release the lock on /db/colA/colB (as the managed lock was closed)
name|assertEquals
argument_list|(
name|LockTable
operator|.
name|LockAction
operator|.
name|Action
operator|.
name|Released
argument_list|,
name|event9
operator|.
name|action
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|collectionBPath
argument_list|,
name|event9
operator|.
name|id
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|Lock
operator|.
name|LockMode
operator|.
name|READ_LOCK
argument_list|,
name|event9
operator|.
name|mode
argument_list|)
expr_stmt|;
block|}
comment|/**      * When acquiring a WRITE lock on the root Collection      * ensure that we only take a single WRITE lock on the      * root Collection      */
annotation|@
name|Test
specifier|public
name|void
name|acquireCollectionWriteLock_root_withoutLockParent
parameter_list|()
throws|throws
name|LockException
block|{
name|acquireCollectionWriteLock_root
argument_list|(
literal|false
argument_list|)
expr_stmt|;
block|}
comment|/**      * When acquiring a WRITE lock on the root Collection      * ensure that we only take a single WRITE lock on the      * root Collection... even when lockParent is set      */
annotation|@
name|Test
specifier|public
name|void
name|acquireCollectionWriteLock_root_withLockParent
parameter_list|()
throws|throws
name|LockException
block|{
name|acquireCollectionWriteLock_root
argument_list|(
literal|true
argument_list|)
expr_stmt|;
block|}
specifier|private
name|void
name|acquireCollectionWriteLock_root
parameter_list|(
specifier|final
name|boolean
name|lockParent
parameter_list|)
throws|throws
name|LockException
block|{
specifier|final
name|LockTable
name|lockTable
init|=
name|LockTable
operator|.
name|getInstance
argument_list|()
decl_stmt|;
specifier|final
name|LockEventRecordingListener
name|lockEventRecordingListener
init|=
operator|new
name|LockEventRecordingListener
argument_list|()
decl_stmt|;
name|lockTable
operator|.
name|registerListener
argument_list|(
name|lockEventRecordingListener
argument_list|)
expr_stmt|;
specifier|final
name|LockManager
name|lockManager
init|=
operator|new
name|LockManager
argument_list|(
name|CONCURRENCY_LEVEL
argument_list|)
decl_stmt|;
try|try
init|(
specifier|final
name|ManagedCollectionLock
name|rootLock
init|=
name|lockManager
operator|.
name|acquireCollectionWriteLock
argument_list|(
name|XmldbURI
operator|.
name|ROOT_COLLECTION_URI
argument_list|,
name|lockParent
argument_list|)
init|)
block|{
name|assertNotNull
argument_list|(
name|rootLock
argument_list|)
expr_stmt|;
block|}
name|lockTable
operator|.
name|deregisterListener
argument_list|(
name|lockEventRecordingListener
argument_list|)
expr_stmt|;
comment|// wait for the listener to be deregistered
while|while
condition|(
name|lockEventRecordingListener
operator|.
name|isRegistered
argument_list|()
condition|)
block|{
block|}
specifier|final
name|Stack
argument_list|<
name|LockTable
operator|.
name|LockAction
argument_list|>
name|events
init|=
name|lockEventRecordingListener
operator|.
name|getEvents
argument_list|()
decl_stmt|;
name|assertEquals
argument_list|(
literal|3
argument_list|,
name|events
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
specifier|final
name|LockTable
operator|.
name|LockAction
name|event3
init|=
name|events
operator|.
name|pop
argument_list|()
decl_stmt|;
specifier|final
name|LockTable
operator|.
name|LockAction
name|event2
init|=
name|events
operator|.
name|pop
argument_list|()
decl_stmt|;
specifier|final
name|LockTable
operator|.
name|LockAction
name|event1
init|=
name|events
operator|.
name|pop
argument_list|()
decl_stmt|;
name|assertEquals
argument_list|(
name|LockTable
operator|.
name|LockAction
operator|.
name|Action
operator|.
name|Attempt
argument_list|,
name|event1
operator|.
name|action
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|XmldbURI
operator|.
name|ROOT_COLLECTION
argument_list|,
name|event1
operator|.
name|id
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|Lock
operator|.
name|LockMode
operator|.
name|WRITE_LOCK
argument_list|,
name|event1
operator|.
name|mode
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|LockTable
operator|.
name|LockAction
operator|.
name|Action
operator|.
name|Acquired
argument_list|,
name|event2
operator|.
name|action
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|XmldbURI
operator|.
name|ROOT_COLLECTION
argument_list|,
name|event2
operator|.
name|id
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|Lock
operator|.
name|LockMode
operator|.
name|WRITE_LOCK
argument_list|,
name|event2
operator|.
name|mode
argument_list|)
expr_stmt|;
comment|// we now expect to release the lock on /db (as the managed lock was closed)
name|assertEquals
argument_list|(
name|LockTable
operator|.
name|LockAction
operator|.
name|Action
operator|.
name|Released
argument_list|,
name|event3
operator|.
name|action
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|XmldbURI
operator|.
name|ROOT_COLLECTION
argument_list|,
name|event3
operator|.
name|id
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|Lock
operator|.
name|LockMode
operator|.
name|WRITE_LOCK
argument_list|,
name|event3
operator|.
name|mode
argument_list|)
expr_stmt|;
block|}
comment|/**      * When acquiring a WRITE lock on a sub-collection of the root (without locking the parent)      * Collection ensure that we hold a single WRITE lock on the      * sub-collection and perform top-down lock-coupling with READ locks on the      * collection hierarchy to get there      */
annotation|@
name|Test
specifier|public
name|void
name|acquireCollectionWriteLock_depth2_withoutLockParent
parameter_list|()
throws|throws
name|LockException
block|{
specifier|final
name|LockTable
name|lockTable
init|=
name|LockTable
operator|.
name|getInstance
argument_list|()
decl_stmt|;
specifier|final
name|LockEventRecordingListener
name|lockEventRecordingListener
init|=
operator|new
name|LockEventRecordingListener
argument_list|()
decl_stmt|;
name|lockTable
operator|.
name|registerListener
argument_list|(
name|lockEventRecordingListener
argument_list|)
expr_stmt|;
specifier|final
name|String
name|collectionPath
init|=
literal|"/db/colA"
decl_stmt|;
specifier|final
name|LockManager
name|lockManager
init|=
operator|new
name|LockManager
argument_list|(
name|CONCURRENCY_LEVEL
argument_list|)
decl_stmt|;
specifier|final
name|boolean
name|lockParent
init|=
literal|false
decl_stmt|;
try|try
init|(
specifier|final
name|ManagedCollectionLock
name|colALock
init|=
name|lockManager
operator|.
name|acquireCollectionWriteLock
argument_list|(
name|XmldbURI
operator|.
name|create
argument_list|(
name|collectionPath
argument_list|)
argument_list|,
name|lockParent
argument_list|)
init|)
block|{
name|assertNotNull
argument_list|(
name|colALock
argument_list|)
expr_stmt|;
block|}
name|lockTable
operator|.
name|deregisterListener
argument_list|(
name|lockEventRecordingListener
argument_list|)
expr_stmt|;
comment|// wait for the listener to be deregistered
while|while
condition|(
name|lockEventRecordingListener
operator|.
name|isRegistered
argument_list|()
condition|)
block|{
block|}
specifier|final
name|Stack
argument_list|<
name|LockTable
operator|.
name|LockAction
argument_list|>
name|events
init|=
name|lockEventRecordingListener
operator|.
name|getEvents
argument_list|()
decl_stmt|;
name|assertEquals
argument_list|(
literal|6
argument_list|,
name|events
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
specifier|final
name|LockTable
operator|.
name|LockAction
name|event6
init|=
name|events
operator|.
name|pop
argument_list|()
decl_stmt|;
specifier|final
name|LockTable
operator|.
name|LockAction
name|event5
init|=
name|events
operator|.
name|pop
argument_list|()
decl_stmt|;
specifier|final
name|LockTable
operator|.
name|LockAction
name|event4
init|=
name|events
operator|.
name|pop
argument_list|()
decl_stmt|;
specifier|final
name|LockTable
operator|.
name|LockAction
name|event3
init|=
name|events
operator|.
name|pop
argument_list|()
decl_stmt|;
specifier|final
name|LockTable
operator|.
name|LockAction
name|event2
init|=
name|events
operator|.
name|pop
argument_list|()
decl_stmt|;
specifier|final
name|LockTable
operator|.
name|LockAction
name|event1
init|=
name|events
operator|.
name|pop
argument_list|()
decl_stmt|;
name|assertEquals
argument_list|(
name|LockTable
operator|.
name|LockAction
operator|.
name|Action
operator|.
name|Attempt
argument_list|,
name|event1
operator|.
name|action
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|XmldbURI
operator|.
name|ROOT_COLLECTION
argument_list|,
name|event1
operator|.
name|id
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|Lock
operator|.
name|LockMode
operator|.
name|READ_LOCK
argument_list|,
name|event1
operator|.
name|mode
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|LockTable
operator|.
name|LockAction
operator|.
name|Action
operator|.
name|Acquired
argument_list|,
name|event2
operator|.
name|action
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|XmldbURI
operator|.
name|ROOT_COLLECTION
argument_list|,
name|event2
operator|.
name|id
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|Lock
operator|.
name|LockMode
operator|.
name|READ_LOCK
argument_list|,
name|event2
operator|.
name|mode
argument_list|)
expr_stmt|;
comment|// we now expect to couple /db with /db/colA by acquiring /db/colA whilst holding /db
name|assertEquals
argument_list|(
name|LockTable
operator|.
name|LockAction
operator|.
name|Action
operator|.
name|Attempt
argument_list|,
name|event3
operator|.
name|action
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|collectionPath
argument_list|,
name|event3
operator|.
name|id
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|Lock
operator|.
name|LockMode
operator|.
name|WRITE_LOCK
argument_list|,
name|event3
operator|.
name|mode
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|LockTable
operator|.
name|LockAction
operator|.
name|Action
operator|.
name|Acquired
argument_list|,
name|event4
operator|.
name|action
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|collectionPath
argument_list|,
name|event4
operator|.
name|id
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|Lock
operator|.
name|LockMode
operator|.
name|WRITE_LOCK
argument_list|,
name|event4
operator|.
name|mode
argument_list|)
expr_stmt|;
comment|// we now expect to release the lock on /db
name|assertEquals
argument_list|(
name|LockTable
operator|.
name|LockAction
operator|.
name|Action
operator|.
name|Released
argument_list|,
name|event5
operator|.
name|action
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|XmldbURI
operator|.
name|ROOT_COLLECTION
argument_list|,
name|event5
operator|.
name|id
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|Lock
operator|.
name|LockMode
operator|.
name|READ_LOCK
argument_list|,
name|event5
operator|.
name|mode
argument_list|)
expr_stmt|;
comment|// we now expect to release the lock on /db/colA (as the managed lock was closed)
name|assertEquals
argument_list|(
name|LockTable
operator|.
name|LockAction
operator|.
name|Action
operator|.
name|Released
argument_list|,
name|event6
operator|.
name|action
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|collectionPath
argument_list|,
name|event6
operator|.
name|id
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|Lock
operator|.
name|LockMode
operator|.
name|WRITE_LOCK
argument_list|,
name|event6
operator|.
name|mode
argument_list|)
expr_stmt|;
block|}
comment|/**      * When acquiring a WRITE lock on a sub-collection of the root (with parent locking)      * Collection ensure that we hold a single WRITE lock on the      * sub-collection and a single WRITE lock on the parent, by performing top-down lock-coupling      * with READ locks (unless as in this-case the parent is the root, then WRITE locks) on the      * collection hierarchy to get there      */
annotation|@
name|Test
specifier|public
name|void
name|acquireCollectionWriteLock_depth2_withLockParent
parameter_list|()
throws|throws
name|LockException
block|{
specifier|final
name|LockTable
name|lockTable
init|=
name|LockTable
operator|.
name|getInstance
argument_list|()
decl_stmt|;
specifier|final
name|LockEventRecordingListener
name|lockEventRecordingListener
init|=
operator|new
name|LockEventRecordingListener
argument_list|()
decl_stmt|;
name|lockTable
operator|.
name|registerListener
argument_list|(
name|lockEventRecordingListener
argument_list|)
expr_stmt|;
specifier|final
name|String
name|collectionPath
init|=
literal|"/db/colA"
decl_stmt|;
specifier|final
name|LockManager
name|lockManager
init|=
operator|new
name|LockManager
argument_list|(
name|CONCURRENCY_LEVEL
argument_list|)
decl_stmt|;
specifier|final
name|boolean
name|lockParent
init|=
literal|true
decl_stmt|;
try|try
init|(
specifier|final
name|ManagedCollectionLock
name|colALock
init|=
name|lockManager
operator|.
name|acquireCollectionWriteLock
argument_list|(
name|XmldbURI
operator|.
name|create
argument_list|(
name|collectionPath
argument_list|)
argument_list|,
name|lockParent
argument_list|)
init|)
block|{
name|assertNotNull
argument_list|(
name|colALock
argument_list|)
expr_stmt|;
block|}
name|lockTable
operator|.
name|deregisterListener
argument_list|(
name|lockEventRecordingListener
argument_list|)
expr_stmt|;
comment|// wait for the listener to be deregistered
while|while
condition|(
name|lockEventRecordingListener
operator|.
name|isRegistered
argument_list|()
condition|)
block|{
block|}
specifier|final
name|Stack
argument_list|<
name|LockTable
operator|.
name|LockAction
argument_list|>
name|events
init|=
name|lockEventRecordingListener
operator|.
name|getEvents
argument_list|()
decl_stmt|;
name|assertEquals
argument_list|(
literal|6
argument_list|,
name|events
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
specifier|final
name|LockTable
operator|.
name|LockAction
name|event6
init|=
name|events
operator|.
name|pop
argument_list|()
decl_stmt|;
specifier|final
name|LockTable
operator|.
name|LockAction
name|event5
init|=
name|events
operator|.
name|pop
argument_list|()
decl_stmt|;
specifier|final
name|LockTable
operator|.
name|LockAction
name|event4
init|=
name|events
operator|.
name|pop
argument_list|()
decl_stmt|;
specifier|final
name|LockTable
operator|.
name|LockAction
name|event3
init|=
name|events
operator|.
name|pop
argument_list|()
decl_stmt|;
specifier|final
name|LockTable
operator|.
name|LockAction
name|event2
init|=
name|events
operator|.
name|pop
argument_list|()
decl_stmt|;
specifier|final
name|LockTable
operator|.
name|LockAction
name|event1
init|=
name|events
operator|.
name|pop
argument_list|()
decl_stmt|;
name|assertEquals
argument_list|(
name|LockTable
operator|.
name|LockAction
operator|.
name|Action
operator|.
name|Attempt
argument_list|,
name|event1
operator|.
name|action
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|XmldbURI
operator|.
name|ROOT_COLLECTION
argument_list|,
name|event1
operator|.
name|id
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|Lock
operator|.
name|LockMode
operator|.
name|WRITE_LOCK
argument_list|,
name|event1
operator|.
name|mode
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|LockTable
operator|.
name|LockAction
operator|.
name|Action
operator|.
name|Acquired
argument_list|,
name|event2
operator|.
name|action
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|XmldbURI
operator|.
name|ROOT_COLLECTION
argument_list|,
name|event2
operator|.
name|id
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|Lock
operator|.
name|LockMode
operator|.
name|WRITE_LOCK
argument_list|,
name|event2
operator|.
name|mode
argument_list|)
expr_stmt|;
comment|// we now expect to couple /db with /db/colA by acquiring /db/colA whilst holding /db
name|assertEquals
argument_list|(
name|LockTable
operator|.
name|LockAction
operator|.
name|Action
operator|.
name|Attempt
argument_list|,
name|event3
operator|.
name|action
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|collectionPath
argument_list|,
name|event3
operator|.
name|id
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|Lock
operator|.
name|LockMode
operator|.
name|WRITE_LOCK
argument_list|,
name|event3
operator|.
name|mode
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|LockTable
operator|.
name|LockAction
operator|.
name|Action
operator|.
name|Acquired
argument_list|,
name|event4
operator|.
name|action
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|collectionPath
argument_list|,
name|event4
operator|.
name|id
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|Lock
operator|.
name|LockMode
operator|.
name|WRITE_LOCK
argument_list|,
name|event4
operator|.
name|mode
argument_list|)
expr_stmt|;
comment|// we now expect to release the lock on /db/colA and then /db (as the managed lock (of both locks) was closed)
name|assertEquals
argument_list|(
name|LockTable
operator|.
name|LockAction
operator|.
name|Action
operator|.
name|Released
argument_list|,
name|event5
operator|.
name|action
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|collectionPath
argument_list|,
name|event5
operator|.
name|id
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|Lock
operator|.
name|LockMode
operator|.
name|WRITE_LOCK
argument_list|,
name|event5
operator|.
name|mode
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|LockTable
operator|.
name|LockAction
operator|.
name|Action
operator|.
name|Released
argument_list|,
name|event6
operator|.
name|action
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|XmldbURI
operator|.
name|ROOT_COLLECTION
argument_list|,
name|event6
operator|.
name|id
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|Lock
operator|.
name|LockMode
operator|.
name|WRITE_LOCK
argument_list|,
name|event6
operator|.
name|mode
argument_list|)
expr_stmt|;
block|}
comment|/**      * When acquiring a WRITE lock on a descendant-collection of the root (without locking the parent)      * Collection ensure that we hold a single WRITE lock on the      * descendant-collection and perform top-down lock-coupling with READ locks on the      * collection hierarchy to get there      */
annotation|@
name|Test
specifier|public
name|void
name|acquireCollectionWriteLock_depth3_withoutLockParent
parameter_list|()
throws|throws
name|LockException
block|{
specifier|final
name|LockTable
name|lockTable
init|=
name|LockTable
operator|.
name|getInstance
argument_list|()
decl_stmt|;
specifier|final
name|LockEventRecordingListener
name|lockEventRecordingListener
init|=
operator|new
name|LockEventRecordingListener
argument_list|()
decl_stmt|;
name|lockTable
operator|.
name|registerListener
argument_list|(
name|lockEventRecordingListener
argument_list|)
expr_stmt|;
specifier|final
name|String
name|collectionAPath
init|=
literal|"/db/colA"
decl_stmt|;
specifier|final
name|String
name|collectionBPath
init|=
name|collectionAPath
operator|+
literal|"/colB"
decl_stmt|;
specifier|final
name|LockManager
name|lockManager
init|=
operator|new
name|LockManager
argument_list|(
name|CONCURRENCY_LEVEL
argument_list|)
decl_stmt|;
specifier|final
name|boolean
name|lockParent
init|=
literal|false
decl_stmt|;
try|try
init|(
specifier|final
name|ManagedCollectionLock
name|colBLock
init|=
name|lockManager
operator|.
name|acquireCollectionWriteLock
argument_list|(
name|XmldbURI
operator|.
name|create
argument_list|(
name|collectionBPath
argument_list|)
argument_list|,
name|lockParent
argument_list|)
init|)
block|{
name|assertNotNull
argument_list|(
name|colBLock
argument_list|)
expr_stmt|;
block|}
name|lockTable
operator|.
name|deregisterListener
argument_list|(
name|lockEventRecordingListener
argument_list|)
expr_stmt|;
comment|// wait for the listener to be deregistered
while|while
condition|(
name|lockEventRecordingListener
operator|.
name|isRegistered
argument_list|()
condition|)
block|{
block|}
specifier|final
name|Stack
argument_list|<
name|LockTable
operator|.
name|LockAction
argument_list|>
name|events
init|=
name|lockEventRecordingListener
operator|.
name|getEvents
argument_list|()
decl_stmt|;
name|assertEquals
argument_list|(
literal|9
argument_list|,
name|events
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
specifier|final
name|LockTable
operator|.
name|LockAction
name|event9
init|=
name|events
operator|.
name|pop
argument_list|()
decl_stmt|;
specifier|final
name|LockTable
operator|.
name|LockAction
name|event8
init|=
name|events
operator|.
name|pop
argument_list|()
decl_stmt|;
specifier|final
name|LockTable
operator|.
name|LockAction
name|event7
init|=
name|events
operator|.
name|pop
argument_list|()
decl_stmt|;
specifier|final
name|LockTable
operator|.
name|LockAction
name|event6
init|=
name|events
operator|.
name|pop
argument_list|()
decl_stmt|;
specifier|final
name|LockTable
operator|.
name|LockAction
name|event5
init|=
name|events
operator|.
name|pop
argument_list|()
decl_stmt|;
specifier|final
name|LockTable
operator|.
name|LockAction
name|event4
init|=
name|events
operator|.
name|pop
argument_list|()
decl_stmt|;
specifier|final
name|LockTable
operator|.
name|LockAction
name|event3
init|=
name|events
operator|.
name|pop
argument_list|()
decl_stmt|;
specifier|final
name|LockTable
operator|.
name|LockAction
name|event2
init|=
name|events
operator|.
name|pop
argument_list|()
decl_stmt|;
specifier|final
name|LockTable
operator|.
name|LockAction
name|event1
init|=
name|events
operator|.
name|pop
argument_list|()
decl_stmt|;
name|assertEquals
argument_list|(
name|LockTable
operator|.
name|LockAction
operator|.
name|Action
operator|.
name|Attempt
argument_list|,
name|event1
operator|.
name|action
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|XmldbURI
operator|.
name|ROOT_COLLECTION
argument_list|,
name|event1
operator|.
name|id
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|Lock
operator|.
name|LockMode
operator|.
name|READ_LOCK
argument_list|,
name|event1
operator|.
name|mode
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|LockTable
operator|.
name|LockAction
operator|.
name|Action
operator|.
name|Acquired
argument_list|,
name|event2
operator|.
name|action
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|XmldbURI
operator|.
name|ROOT_COLLECTION
argument_list|,
name|event2
operator|.
name|id
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|Lock
operator|.
name|LockMode
operator|.
name|READ_LOCK
argument_list|,
name|event2
operator|.
name|mode
argument_list|)
expr_stmt|;
comment|// we now expect to couple /db with /db/colA by acquiring /db/colA whilst holding /db
name|assertEquals
argument_list|(
name|LockTable
operator|.
name|LockAction
operator|.
name|Action
operator|.
name|Attempt
argument_list|,
name|event3
operator|.
name|action
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|collectionAPath
argument_list|,
name|event3
operator|.
name|id
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|Lock
operator|.
name|LockMode
operator|.
name|READ_LOCK
argument_list|,
name|event3
operator|.
name|mode
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|LockTable
operator|.
name|LockAction
operator|.
name|Action
operator|.
name|Acquired
argument_list|,
name|event4
operator|.
name|action
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|collectionAPath
argument_list|,
name|event4
operator|.
name|id
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|Lock
operator|.
name|LockMode
operator|.
name|READ_LOCK
argument_list|,
name|event4
operator|.
name|mode
argument_list|)
expr_stmt|;
comment|// we now expect to release the lock on /db
name|assertEquals
argument_list|(
name|LockTable
operator|.
name|LockAction
operator|.
name|Action
operator|.
name|Released
argument_list|,
name|event5
operator|.
name|action
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|XmldbURI
operator|.
name|ROOT_COLLECTION
argument_list|,
name|event5
operator|.
name|id
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|Lock
operator|.
name|LockMode
operator|.
name|READ_LOCK
argument_list|,
name|event5
operator|.
name|mode
argument_list|)
expr_stmt|;
comment|// we now expect to couple /db/colA with /db/colA/colB by acquiring /db/colA/colB whilst holding /db/colA
name|assertEquals
argument_list|(
name|LockTable
operator|.
name|LockAction
operator|.
name|Action
operator|.
name|Attempt
argument_list|,
name|event6
operator|.
name|action
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|collectionBPath
argument_list|,
name|event6
operator|.
name|id
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|Lock
operator|.
name|LockMode
operator|.
name|WRITE_LOCK
argument_list|,
name|event6
operator|.
name|mode
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|LockTable
operator|.
name|LockAction
operator|.
name|Action
operator|.
name|Acquired
argument_list|,
name|event7
operator|.
name|action
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|collectionBPath
argument_list|,
name|event7
operator|.
name|id
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|Lock
operator|.
name|LockMode
operator|.
name|WRITE_LOCK
argument_list|,
name|event7
operator|.
name|mode
argument_list|)
expr_stmt|;
comment|// we now expect to release the lock on /db/colA
name|assertEquals
argument_list|(
name|LockTable
operator|.
name|LockAction
operator|.
name|Action
operator|.
name|Released
argument_list|,
name|event8
operator|.
name|action
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|collectionAPath
argument_list|,
name|event8
operator|.
name|id
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|Lock
operator|.
name|LockMode
operator|.
name|READ_LOCK
argument_list|,
name|event8
operator|.
name|mode
argument_list|)
expr_stmt|;
comment|// we now expect to release the lock on /db/colA/colB (as the managed lock was closed)
name|assertEquals
argument_list|(
name|LockTable
operator|.
name|LockAction
operator|.
name|Action
operator|.
name|Released
argument_list|,
name|event9
operator|.
name|action
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|collectionBPath
argument_list|,
name|event9
operator|.
name|id
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|Lock
operator|.
name|LockMode
operator|.
name|WRITE_LOCK
argument_list|,
name|event9
operator|.
name|mode
argument_list|)
expr_stmt|;
block|}
comment|/**      * When acquiring a WRITE lock on a descendant-collection of the root (with parent locking)      * Collection ensure that we hold a single WRITE lock on the      * descendant-collection and a single WRITE lock on the parent, by performing top-down lock-coupling      * with READ locks (apart from the parent which takes a WRITE lock) on the      * collection hierarchy to get there      */
annotation|@
name|Test
specifier|public
name|void
name|acquireCollectionWriteLock_depth3_withLockParent
parameter_list|()
throws|throws
name|LockException
block|{
specifier|final
name|LockTable
name|lockTable
init|=
name|LockTable
operator|.
name|getInstance
argument_list|()
decl_stmt|;
specifier|final
name|LockEventRecordingListener
name|lockEventRecordingListener
init|=
operator|new
name|LockEventRecordingListener
argument_list|()
decl_stmt|;
name|lockTable
operator|.
name|registerListener
argument_list|(
name|lockEventRecordingListener
argument_list|)
expr_stmt|;
specifier|final
name|String
name|collectionAPath
init|=
literal|"/db/colA"
decl_stmt|;
specifier|final
name|String
name|collectionBPath
init|=
name|collectionAPath
operator|+
literal|"/colB"
decl_stmt|;
specifier|final
name|LockManager
name|lockManager
init|=
operator|new
name|LockManager
argument_list|(
name|CONCURRENCY_LEVEL
argument_list|)
decl_stmt|;
specifier|final
name|boolean
name|lockParent
init|=
literal|true
decl_stmt|;
try|try
init|(
specifier|final
name|ManagedCollectionLock
name|colBLock
init|=
name|lockManager
operator|.
name|acquireCollectionWriteLock
argument_list|(
name|XmldbURI
operator|.
name|create
argument_list|(
name|collectionBPath
argument_list|)
argument_list|,
name|lockParent
argument_list|)
init|)
block|{
name|assertNotNull
argument_list|(
name|colBLock
argument_list|)
expr_stmt|;
block|}
name|lockTable
operator|.
name|deregisterListener
argument_list|(
name|lockEventRecordingListener
argument_list|)
expr_stmt|;
comment|// wait for the listener to be deregistered
while|while
condition|(
name|lockEventRecordingListener
operator|.
name|isRegistered
argument_list|()
condition|)
block|{
block|}
specifier|final
name|Stack
argument_list|<
name|LockTable
operator|.
name|LockAction
argument_list|>
name|events
init|=
name|lockEventRecordingListener
operator|.
name|getEvents
argument_list|()
decl_stmt|;
name|assertEquals
argument_list|(
literal|9
argument_list|,
name|events
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
specifier|final
name|LockTable
operator|.
name|LockAction
name|event9
init|=
name|events
operator|.
name|pop
argument_list|()
decl_stmt|;
specifier|final
name|LockTable
operator|.
name|LockAction
name|event8
init|=
name|events
operator|.
name|pop
argument_list|()
decl_stmt|;
specifier|final
name|LockTable
operator|.
name|LockAction
name|event7
init|=
name|events
operator|.
name|pop
argument_list|()
decl_stmt|;
specifier|final
name|LockTable
operator|.
name|LockAction
name|event6
init|=
name|events
operator|.
name|pop
argument_list|()
decl_stmt|;
specifier|final
name|LockTable
operator|.
name|LockAction
name|event5
init|=
name|events
operator|.
name|pop
argument_list|()
decl_stmt|;
specifier|final
name|LockTable
operator|.
name|LockAction
name|event4
init|=
name|events
operator|.
name|pop
argument_list|()
decl_stmt|;
specifier|final
name|LockTable
operator|.
name|LockAction
name|event3
init|=
name|events
operator|.
name|pop
argument_list|()
decl_stmt|;
specifier|final
name|LockTable
operator|.
name|LockAction
name|event2
init|=
name|events
operator|.
name|pop
argument_list|()
decl_stmt|;
specifier|final
name|LockTable
operator|.
name|LockAction
name|event1
init|=
name|events
operator|.
name|pop
argument_list|()
decl_stmt|;
name|assertEquals
argument_list|(
name|LockTable
operator|.
name|LockAction
operator|.
name|Action
operator|.
name|Attempt
argument_list|,
name|event1
operator|.
name|action
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|XmldbURI
operator|.
name|ROOT_COLLECTION
argument_list|,
name|event1
operator|.
name|id
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|Lock
operator|.
name|LockMode
operator|.
name|READ_LOCK
argument_list|,
name|event1
operator|.
name|mode
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|LockTable
operator|.
name|LockAction
operator|.
name|Action
operator|.
name|Acquired
argument_list|,
name|event2
operator|.
name|action
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|XmldbURI
operator|.
name|ROOT_COLLECTION
argument_list|,
name|event2
operator|.
name|id
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|Lock
operator|.
name|LockMode
operator|.
name|READ_LOCK
argument_list|,
name|event2
operator|.
name|mode
argument_list|)
expr_stmt|;
comment|// we now expect to couple /db with /db/colA by acquiring /db/colA whilst holding /db
name|assertEquals
argument_list|(
name|LockTable
operator|.
name|LockAction
operator|.
name|Action
operator|.
name|Attempt
argument_list|,
name|event3
operator|.
name|action
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|collectionAPath
argument_list|,
name|event3
operator|.
name|id
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|Lock
operator|.
name|LockMode
operator|.
name|WRITE_LOCK
argument_list|,
name|event3
operator|.
name|mode
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|LockTable
operator|.
name|LockAction
operator|.
name|Action
operator|.
name|Acquired
argument_list|,
name|event4
operator|.
name|action
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|collectionAPath
argument_list|,
name|event4
operator|.
name|id
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|Lock
operator|.
name|LockMode
operator|.
name|WRITE_LOCK
argument_list|,
name|event4
operator|.
name|mode
argument_list|)
expr_stmt|;
comment|// we now expect to release the lock on /db
name|assertEquals
argument_list|(
name|LockTable
operator|.
name|LockAction
operator|.
name|Action
operator|.
name|Released
argument_list|,
name|event5
operator|.
name|action
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|XmldbURI
operator|.
name|ROOT_COLLECTION
argument_list|,
name|event5
operator|.
name|id
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|Lock
operator|.
name|LockMode
operator|.
name|READ_LOCK
argument_list|,
name|event5
operator|.
name|mode
argument_list|)
expr_stmt|;
comment|// we now expect to couple /db/colA with /db/colA/colB by acquiring /db/colA/colB whilst holding /db/colA
name|assertEquals
argument_list|(
name|LockTable
operator|.
name|LockAction
operator|.
name|Action
operator|.
name|Attempt
argument_list|,
name|event6
operator|.
name|action
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|collectionBPath
argument_list|,
name|event6
operator|.
name|id
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|Lock
operator|.
name|LockMode
operator|.
name|WRITE_LOCK
argument_list|,
name|event6
operator|.
name|mode
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|LockTable
operator|.
name|LockAction
operator|.
name|Action
operator|.
name|Acquired
argument_list|,
name|event7
operator|.
name|action
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|collectionBPath
argument_list|,
name|event7
operator|.
name|id
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|Lock
operator|.
name|LockMode
operator|.
name|WRITE_LOCK
argument_list|,
name|event7
operator|.
name|mode
argument_list|)
expr_stmt|;
comment|// we now expect to release the lock on /db/colA/colB and then /db/colA (as the managed lock (of both locks) was closed)
name|assertEquals
argument_list|(
name|LockTable
operator|.
name|LockAction
operator|.
name|Action
operator|.
name|Released
argument_list|,
name|event8
operator|.
name|action
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|collectionBPath
argument_list|,
name|event8
operator|.
name|id
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|Lock
operator|.
name|LockMode
operator|.
name|WRITE_LOCK
argument_list|,
name|event8
operator|.
name|mode
argument_list|)
expr_stmt|;
comment|// we now expect to release the lock on /db/colA
name|assertEquals
argument_list|(
name|LockTable
operator|.
name|LockAction
operator|.
name|Action
operator|.
name|Released
argument_list|,
name|event9
operator|.
name|action
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|collectionAPath
argument_list|,
name|event9
operator|.
name|id
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|Lock
operator|.
name|LockMode
operator|.
name|WRITE_LOCK
argument_list|,
name|event9
operator|.
name|mode
argument_list|)
expr_stmt|;
block|}
annotation|@
name|ThreadSafe
specifier|private
specifier|static
class|class
name|LockEventRecordingListener
implements|implements
name|LockTable
operator|.
name|LockEventListener
block|{
specifier|private
specifier|final
name|Stack
argument_list|<
name|LockTable
operator|.
name|LockAction
argument_list|>
name|events
init|=
operator|new
name|Stack
argument_list|<>
argument_list|()
decl_stmt|;
specifier|private
specifier|final
name|AtomicBoolean
name|registered
init|=
operator|new
name|AtomicBoolean
argument_list|()
decl_stmt|;
annotation|@
name|Override
specifier|public
name|void
name|registered
parameter_list|()
block|{
name|registered
operator|.
name|compareAndSet
argument_list|(
literal|false
argument_list|,
literal|true
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|unregistered
parameter_list|()
block|{
name|registered
operator|.
name|compareAndSet
argument_list|(
literal|true
argument_list|,
literal|false
argument_list|)
expr_stmt|;
block|}
specifier|public
name|boolean
name|isRegistered
parameter_list|()
block|{
return|return
name|registered
operator|.
name|get
argument_list|()
return|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|accept
parameter_list|(
specifier|final
name|LockTable
operator|.
name|LockAction
name|lockAction
parameter_list|)
block|{
name|events
operator|.
name|push
argument_list|(
name|lockAction
argument_list|)
expr_stmt|;
block|}
specifier|public
name|Stack
argument_list|<
name|LockTable
operator|.
name|LockAction
argument_list|>
name|getEvents
parameter_list|()
block|{
return|return
name|events
return|;
block|}
block|}
block|}
end_class

end_unit

