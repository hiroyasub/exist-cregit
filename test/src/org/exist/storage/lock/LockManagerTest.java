begin_unit|revision:1.0.0;language:Java;cregit-version:0.0.1
begin_package
package|package
name|org
operator|.
name|exist
operator|.
name|storage
operator|.
name|lock
package|;
end_package

begin_import
import|import
name|net
operator|.
name|jcip
operator|.
name|annotations
operator|.
name|ThreadSafe
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Stack
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|atomic
operator|.
name|AtomicBoolean
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertFalse
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertNotNull
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertTrue
import|;
end_import

begin_comment
comment|/**  * Created by aretter on 05/01/2017.  */
end_comment

begin_class
specifier|public
class|class
name|LockManagerTest
block|{
specifier|private
specifier|static
specifier|final
name|int
name|CONCURRENCY_LEVEL
init|=
literal|100
decl_stmt|;
annotation|@
name|Test
specifier|public
name|void
name|getCollectionLock_isStripedByPath
parameter_list|()
block|{
specifier|final
name|LockManager
name|lockManager
init|=
operator|new
name|LockManager
argument_list|(
name|CONCURRENCY_LEVEL
argument_list|)
decl_stmt|;
specifier|final
name|ReentrantReadWriteLock
name|dbLock1
init|=
name|lockManager
operator|.
name|getCollectionLock
argument_list|(
literal|"/db"
argument_list|)
decl_stmt|;
name|assertNotNull
argument_list|(
name|dbLock1
argument_list|)
expr_stmt|;
specifier|final
name|ReentrantReadWriteLock
name|dbLock2
init|=
name|lockManager
operator|.
name|getCollectionLock
argument_list|(
literal|"/db"
argument_list|)
decl_stmt|;
name|assertNotNull
argument_list|(
name|dbLock2
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|dbLock1
operator|==
name|dbLock2
argument_list|)
expr_stmt|;
specifier|final
name|ReentrantReadWriteLock
name|abcLock
init|=
name|lockManager
operator|.
name|getCollectionLock
argument_list|(
literal|"/db/a/b/c"
argument_list|)
decl_stmt|;
name|assertNotNull
argument_list|(
name|abcLock
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|dbLock1
operator|==
name|abcLock
argument_list|)
expr_stmt|;
specifier|final
name|ReentrantReadWriteLock
name|defLock
init|=
name|lockManager
operator|.
name|getCollectionLock
argument_list|(
literal|"/db/d/e/f"
argument_list|)
decl_stmt|;
name|assertNotNull
argument_list|(
name|defLock
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|dbLock1
operator|==
name|defLock
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|abcLock
operator|==
name|defLock
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

