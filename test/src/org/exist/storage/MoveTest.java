begin_unit|revision:1.0.0;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  *  eXist Open Source Native XML Database  *  Copyright (C) 2001-2016 The eXist Project  *  http://exist-db.org  *  *  This program is free software; you can redistribute it and/or  *  modify it under the terms of the GNU Lesser General Public License  *  as published by the Free Software Foundation; either version 2  *  of the License, or (at your option) any later version.  *  *  This program is distributed in the hope that it will be useful,  *  but WITHOUT ANY WARRANTY; without even the implied warranty of  *  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the  *  GNU Lesser General Public License for more details.  *  *  You should have received a copy of the GNU Lesser General Public  *  License along with this library; if not, write to the Free Software  *  Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA  02110-1301  USA  */
end_comment

begin_package
package|package
name|org
operator|.
name|exist
operator|.
name|storage
package|;
end_package

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|Database
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|EXistException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|TestUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|collections
operator|.
name|Collection
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|collections
operator|.
name|IndexInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|dom
operator|.
name|QName
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|dom
operator|.
name|persistent
operator|.
name|*
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|indexing
operator|.
name|StructuralIndex
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|storage
operator|.
name|txn
operator|.
name|Txn
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|util
operator|.
name|Configuration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|util
operator|.
name|DatabaseConfigurationException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|xmldb
operator|.
name|XmldbURI
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|xquery
operator|.
name|NodeSelector
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|After
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Optional
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|*
import|;
end_import

begin_class
specifier|public
class|class
name|MoveTest
block|{
specifier|private
specifier|final
specifier|static
name|String
name|XML1
init|=
literal|"<?xml version=\"1.0\"?>"
operator|+
literal|"<test1>"
operator|+
literal|"<title>Hello</title>"
operator|+
literal|"<para>Hello World!</para>"
operator|+
literal|"</test1>"
decl_stmt|;
specifier|private
specifier|final
specifier|static
name|String
name|XML2
init|=
literal|"<?xml version=\"1.0\"?>"
operator|+
literal|"<test2>"
operator|+
literal|"<title>Hello</title>"
operator|+
literal|"<para>Hello World!</para>"
operator|+
literal|"</test2>"
decl_stmt|;
specifier|private
specifier|final
specifier|static
name|XmldbURI
name|TEST_COLLECTION_URI
init|=
name|XmldbURI
operator|.
name|ROOT_COLLECTION_URI
operator|.
name|append
argument_list|(
literal|"test"
argument_list|)
decl_stmt|;
specifier|private
specifier|final
specifier|static
name|XmldbURI
name|SUB_TEST_COLLECTION_URI
init|=
name|TEST_COLLECTION_URI
operator|.
name|append
argument_list|(
literal|"test2"
argument_list|)
decl_stmt|;
specifier|private
specifier|final
specifier|static
name|XmldbURI
name|doc1Name
init|=
name|XmldbURI
operator|.
name|create
argument_list|(
literal|"doc1.xml"
argument_list|)
decl_stmt|;
specifier|private
specifier|final
specifier|static
name|XmldbURI
name|doc2Name
init|=
name|XmldbURI
operator|.
name|create
argument_list|(
literal|"doc2.xml"
argument_list|)
decl_stmt|;
specifier|private
specifier|static
name|Collection
name|test1
decl_stmt|;
specifier|private
specifier|static
name|Collection
name|test2
decl_stmt|;
comment|/**      * This test ensures that when moving an      * XML resource over the top of an existing      * XML resource, the overwritten resource      * is completely removed from the database; i.e.      * its nodes are no longer present in the structural      * index      */
annotation|@
name|Test
specifier|public
name|void
name|moveAndOverwriteXML
parameter_list|()
throws|throws
name|Exception
block|{
specifier|final
name|Database
name|db
init|=
name|startDB
argument_list|()
decl_stmt|;
try|try
init|(
specifier|final
name|DBBroker
name|broker
init|=
name|db
operator|.
name|get
argument_list|(
name|Optional
operator|.
name|of
argument_list|(
name|db
operator|.
name|getSecurityManager
argument_list|()
operator|.
name|getSystemSubject
argument_list|()
argument_list|)
argument_list|)
init|)
block|{
name|store
argument_list|(
name|broker
argument_list|)
expr_stmt|;
specifier|final
name|DefaultDocumentSet
name|docs
init|=
operator|new
name|DefaultDocumentSet
argument_list|()
decl_stmt|;
name|docs
operator|.
name|add
argument_list|(
name|test1
operator|.
name|getDocument
argument_list|(
name|broker
argument_list|,
name|doc1Name
argument_list|)
argument_list|)
expr_stmt|;
name|docs
operator|.
name|add
argument_list|(
name|test2
operator|.
name|getDocument
argument_list|(
name|broker
argument_list|,
name|doc2Name
argument_list|)
argument_list|)
expr_stmt|;
name|move
argument_list|(
name|broker
argument_list|)
expr_stmt|;
name|docs
operator|.
name|add
argument_list|(
name|test2
operator|.
name|getDocument
argument_list|(
name|broker
argument_list|,
name|doc2Name
argument_list|)
argument_list|)
expr_stmt|;
name|checkIndex
argument_list|(
name|broker
argument_list|,
name|docs
argument_list|)
expr_stmt|;
block|}
block|}
specifier|private
name|void
name|store
parameter_list|(
specifier|final
name|DBBroker
name|broker
parameter_list|)
throws|throws
name|Exception
block|{
try|try
init|(
specifier|final
name|Txn
name|transaction
init|=
name|broker
operator|.
name|beginTx
argument_list|()
init|)
block|{
name|test1
operator|=
name|broker
operator|.
name|getOrCreateCollection
argument_list|(
name|transaction
argument_list|,
name|TEST_COLLECTION_URI
argument_list|)
expr_stmt|;
name|broker
operator|.
name|saveCollection
argument_list|(
name|transaction
argument_list|,
name|test1
argument_list|)
expr_stmt|;
name|test2
operator|=
name|broker
operator|.
name|getOrCreateCollection
argument_list|(
name|transaction
argument_list|,
name|SUB_TEST_COLLECTION_URI
argument_list|)
expr_stmt|;
name|broker
operator|.
name|saveCollection
argument_list|(
name|transaction
argument_list|,
name|test2
argument_list|)
expr_stmt|;
name|IndexInfo
name|info
init|=
name|test1
operator|.
name|validateXMLResource
argument_list|(
name|transaction
argument_list|,
name|broker
argument_list|,
name|doc1Name
argument_list|,
name|XML1
argument_list|)
decl_stmt|;
name|test1
operator|.
name|store
argument_list|(
name|transaction
argument_list|,
name|broker
argument_list|,
name|info
argument_list|,
name|XML1
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|info
operator|=
name|test2
operator|.
name|validateXMLResource
argument_list|(
name|transaction
argument_list|,
name|broker
argument_list|,
name|doc2Name
argument_list|,
name|XML2
argument_list|)
expr_stmt|;
name|test2
operator|.
name|store
argument_list|(
name|transaction
argument_list|,
name|broker
argument_list|,
name|info
argument_list|,
name|XML2
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|transaction
operator|.
name|commit
argument_list|()
expr_stmt|;
block|}
block|}
specifier|private
name|void
name|move
parameter_list|(
specifier|final
name|DBBroker
name|broker
parameter_list|)
throws|throws
name|Exception
block|{
try|try
init|(
specifier|final
name|Txn
name|transaction
init|=
name|broker
operator|.
name|beginTx
argument_list|()
init|)
block|{
specifier|final
name|DocumentImpl
name|doc
init|=
name|test1
operator|.
name|getDocument
argument_list|(
name|broker
argument_list|,
name|doc1Name
argument_list|)
decl_stmt|;
name|broker
operator|.
name|moveResource
argument_list|(
name|transaction
argument_list|,
name|doc
argument_list|,
name|test2
argument_list|,
name|doc2Name
argument_list|)
expr_stmt|;
name|transaction
operator|.
name|commit
argument_list|()
expr_stmt|;
block|}
block|}
specifier|private
name|void
name|checkIndex
parameter_list|(
specifier|final
name|DBBroker
name|broker
parameter_list|,
specifier|final
name|DocumentSet
name|docs
parameter_list|)
throws|throws
name|Exception
block|{
specifier|final
name|StructuralIndex
name|index
init|=
name|broker
operator|.
name|getStructuralIndex
argument_list|()
decl_stmt|;
specifier|final
name|NodeSelector
name|selector
init|=
parameter_list|(
name|doc
parameter_list|,
name|nodeId
parameter_list|)
lambda|->
operator|new
name|NodeProxy
argument_list|(
name|doc
argument_list|,
name|nodeId
argument_list|)
decl_stmt|;
name|QName
name|qn
init|=
operator|new
name|QName
argument_list|(
literal|"test2"
argument_list|)
decl_stmt|;
name|NodeSet
name|nodes
init|=
name|index
operator|.
name|findElementsByTagName
argument_list|(
name|ElementValue
operator|.
name|ELEMENT
argument_list|,
name|docs
argument_list|,
name|qn
argument_list|,
name|selector
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
name|nodes
operator|.
name|isEmpty
argument_list|()
argument_list|)
expr_stmt|;
name|qn
operator|=
operator|new
name|QName
argument_list|(
literal|"test1"
argument_list|)
expr_stmt|;
name|nodes
operator|=
name|index
operator|.
name|findElementsByTagName
argument_list|(
name|ElementValue
operator|.
name|ELEMENT
argument_list|,
name|docs
argument_list|,
name|qn
argument_list|,
name|selector
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|nodes
operator|.
name|isEmpty
argument_list|()
argument_list|)
expr_stmt|;
block|}
specifier|protected
name|BrokerPool
name|startDB
parameter_list|()
throws|throws
name|DatabaseConfigurationException
throws|,
name|EXistException
block|{
name|Configuration
name|config
init|=
operator|new
name|Configuration
argument_list|()
decl_stmt|;
name|BrokerPool
operator|.
name|configure
argument_list|(
literal|1
argument_list|,
literal|5
argument_list|,
name|config
argument_list|)
expr_stmt|;
return|return
name|BrokerPool
operator|.
name|getInstance
argument_list|()
return|;
block|}
annotation|@
name|After
specifier|public
name|void
name|tearDown
parameter_list|()
block|{
name|TestUtils
operator|.
name|cleanupDB
argument_list|()
expr_stmt|;
name|BrokerPool
operator|.
name|stopAll
argument_list|(
literal|false
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

