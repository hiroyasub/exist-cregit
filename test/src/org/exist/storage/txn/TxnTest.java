begin_unit|revision:1.0.0;language:Java;cregit-version:0.0.1
begin_package
package|package
name|org
operator|.
name|exist
operator|.
name|storage
operator|.
name|txn
package|;
end_package

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|EXistException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|storage
operator|.
name|BrokerPool
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|storage
operator|.
name|NativeBroker
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|storage
operator|.
name|SystemTaskManager
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|storage
operator|.
name|journal
operator|.
name|Journal
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|easymock
operator|.
name|EasyMock
operator|.
name|*
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertEquals
import|;
end_import

begin_comment
comment|/**  * @author Adam Retter<adam.retter@googlemail.com>  */
end_comment

begin_class
specifier|public
class|class
name|TxnTest
block|{
annotation|@
name|Test
specifier|public
name|void
name|commitTransaction
parameter_list|()
throws|throws
name|NoSuchFieldException
throws|,
name|IllegalAccessException
throws|,
name|EXistException
block|{
specifier|final
name|TransactionManager
name|transact
init|=
name|createTestableTransactionManager
argument_list|()
decl_stmt|;
specifier|final
name|Txn
name|transaction
init|=
name|transact
operator|.
name|beginTransaction
argument_list|()
decl_stmt|;
specifier|final
name|CountingTxnListener
name|listener
init|=
operator|new
name|CountingTxnListener
argument_list|()
decl_stmt|;
name|transaction
operator|.
name|registerListener
argument_list|(
name|listener
argument_list|)
expr_stmt|;
name|transaction
operator|.
name|commit
argument_list|()
expr_stmt|;
name|assertEquals
argument_list|(
name|Txn
operator|.
name|State
operator|.
name|COMMITTED
argument_list|,
name|transaction
operator|.
name|getState
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|listener
operator|.
name|getCommit
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|listener
operator|.
name|getAbort
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|commitAndCloseTransaction
parameter_list|()
throws|throws
name|NoSuchFieldException
throws|,
name|IllegalAccessException
throws|,
name|EXistException
block|{
specifier|final
name|TransactionManager
name|transact
init|=
name|createTestableTransactionManager
argument_list|()
decl_stmt|;
specifier|final
name|Txn
name|transaction
init|=
name|transact
operator|.
name|beginTransaction
argument_list|()
decl_stmt|;
specifier|final
name|CountingTxnListener
name|listener
init|=
operator|new
name|CountingTxnListener
argument_list|()
decl_stmt|;
name|transaction
operator|.
name|registerListener
argument_list|(
name|listener
argument_list|)
expr_stmt|;
name|transaction
operator|.
name|commit
argument_list|()
expr_stmt|;
name|transaction
operator|.
name|close
argument_list|()
expr_stmt|;
name|assertEquals
argument_list|(
name|Txn
operator|.
name|State
operator|.
name|CLOSED
argument_list|,
name|transaction
operator|.
name|getState
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|listener
operator|.
name|getCommit
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|listener
operator|.
name|getAbort
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|abortTransaction
parameter_list|()
throws|throws
name|NoSuchFieldException
throws|,
name|IllegalAccessException
throws|,
name|EXistException
block|{
specifier|final
name|TransactionManager
name|transact
init|=
name|createTestableTransactionManager
argument_list|()
decl_stmt|;
specifier|final
name|Txn
name|transaction
init|=
name|transact
operator|.
name|beginTransaction
argument_list|()
decl_stmt|;
specifier|final
name|CountingTxnListener
name|listener
init|=
operator|new
name|CountingTxnListener
argument_list|()
decl_stmt|;
name|transaction
operator|.
name|registerListener
argument_list|(
name|listener
argument_list|)
expr_stmt|;
name|transaction
operator|.
name|abort
argument_list|()
expr_stmt|;
name|assertEquals
argument_list|(
name|Txn
operator|.
name|State
operator|.
name|ABORTED
argument_list|,
name|transaction
operator|.
name|getState
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|listener
operator|.
name|getCommit
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|listener
operator|.
name|getAbort
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|abortAndCloseTransaction
parameter_list|()
throws|throws
name|NoSuchFieldException
throws|,
name|IllegalAccessException
throws|,
name|EXistException
block|{
specifier|final
name|TransactionManager
name|transact
init|=
name|createTestableTransactionManager
argument_list|()
decl_stmt|;
specifier|final
name|Txn
name|transaction
init|=
name|transact
operator|.
name|beginTransaction
argument_list|()
decl_stmt|;
specifier|final
name|CountingTxnListener
name|listener
init|=
operator|new
name|CountingTxnListener
argument_list|()
decl_stmt|;
name|transaction
operator|.
name|registerListener
argument_list|(
name|listener
argument_list|)
expr_stmt|;
name|transaction
operator|.
name|abort
argument_list|()
expr_stmt|;
name|transaction
operator|.
name|close
argument_list|()
expr_stmt|;
name|assertEquals
argument_list|(
name|Txn
operator|.
name|State
operator|.
name|CLOSED
argument_list|,
name|transaction
operator|.
name|getState
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|listener
operator|.
name|getCommit
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|listener
operator|.
name|getAbort
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|repeatedAbortOnlyAbortsTransactionOnce
parameter_list|()
throws|throws
name|NoSuchFieldException
throws|,
name|IllegalAccessException
throws|,
name|EXistException
block|{
specifier|final
name|TransactionManager
name|transact
init|=
name|createTestableTransactionManager
argument_list|()
decl_stmt|;
specifier|final
name|Txn
name|transaction
init|=
name|transact
operator|.
name|beginTransaction
argument_list|()
decl_stmt|;
specifier|final
name|CountingTxnListener
name|listener
init|=
operator|new
name|CountingTxnListener
argument_list|()
decl_stmt|;
name|transaction
operator|.
name|registerListener
argument_list|(
name|listener
argument_list|)
expr_stmt|;
comment|//call 3 times, abort count should be one!
name|transaction
operator|.
name|abort
argument_list|()
expr_stmt|;
name|transaction
operator|.
name|abort
argument_list|()
expr_stmt|;
name|transaction
operator|.
name|abort
argument_list|()
expr_stmt|;
name|assertEquals
argument_list|(
name|Txn
operator|.
name|State
operator|.
name|ABORTED
argument_list|,
name|transaction
operator|.
name|getState
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|listener
operator|.
name|getCommit
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|listener
operator|.
name|getAbort
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|closeWithoutCommitAbortsTransaction
parameter_list|()
throws|throws
name|NoSuchFieldException
throws|,
name|IllegalAccessException
throws|,
name|EXistException
block|{
specifier|final
name|TransactionManager
name|transact
init|=
name|createTestableTransactionManager
argument_list|()
decl_stmt|;
specifier|final
name|Txn
name|transaction
init|=
name|transact
operator|.
name|beginTransaction
argument_list|()
decl_stmt|;
specifier|final
name|CountingTxnListener
name|listener
init|=
operator|new
name|CountingTxnListener
argument_list|()
decl_stmt|;
name|transaction
operator|.
name|registerListener
argument_list|(
name|listener
argument_list|)
expr_stmt|;
name|transaction
operator|.
name|close
argument_list|()
expr_stmt|;
name|assertEquals
argument_list|(
name|Txn
operator|.
name|State
operator|.
name|CLOSED
argument_list|,
name|transaction
operator|.
name|getState
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|listener
operator|.
name|getCommit
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|listener
operator|.
name|getAbort
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|repeatedCloseWithoutCommitOnlyAbortsTransactionOnce
parameter_list|()
throws|throws
name|NoSuchFieldException
throws|,
name|IllegalAccessException
throws|,
name|EXistException
block|{
specifier|final
name|TransactionManager
name|transact
init|=
name|createTestableTransactionManager
argument_list|()
decl_stmt|;
specifier|final
name|Txn
name|transaction
init|=
name|transact
operator|.
name|beginTransaction
argument_list|()
decl_stmt|;
specifier|final
name|CountingTxnListener
name|listener
init|=
operator|new
name|CountingTxnListener
argument_list|()
decl_stmt|;
name|transaction
operator|.
name|registerListener
argument_list|(
name|listener
argument_list|)
expr_stmt|;
comment|//call 3 times, abort count should be one!
name|transaction
operator|.
name|close
argument_list|()
expr_stmt|;
name|transaction
operator|.
name|close
argument_list|()
expr_stmt|;
name|transaction
operator|.
name|close
argument_list|()
expr_stmt|;
name|assertEquals
argument_list|(
name|Txn
operator|.
name|State
operator|.
name|CLOSED
argument_list|,
name|transaction
operator|.
name|getState
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|listener
operator|.
name|getCommit
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|listener
operator|.
name|getAbort
argument_list|()
argument_list|)
expr_stmt|;
block|}
specifier|private
class|class
name|CountingTxnListener
implements|implements
name|TxnListener
block|{
specifier|private
name|int
name|commit
init|=
literal|0
decl_stmt|;
specifier|private
name|int
name|abort
init|=
literal|0
decl_stmt|;
annotation|@
name|Override
specifier|public
name|void
name|commit
parameter_list|()
block|{
name|commit
operator|++
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|abort
parameter_list|()
block|{
name|abort
operator|++
expr_stmt|;
block|}
specifier|public
name|int
name|getCommit
parameter_list|()
block|{
return|return
name|commit
return|;
block|}
specifier|public
name|int
name|getAbort
parameter_list|()
block|{
return|return
name|abort
return|;
block|}
block|}
specifier|private
name|TransactionManager
name|createTestableTransactionManager
parameter_list|()
throws|throws
name|NoSuchFieldException
throws|,
name|IllegalAccessException
throws|,
name|EXistException
block|{
specifier|final
name|BrokerPool
name|mockBrokerPool
init|=
name|createMock
argument_list|(
name|BrokerPool
operator|.
name|class
argument_list|)
decl_stmt|;
specifier|final
name|NativeBroker
name|mockBroker
init|=
name|createMock
argument_list|(
name|NativeBroker
operator|.
name|class
argument_list|)
decl_stmt|;
name|expect
argument_list|(
name|mockBrokerPool
operator|.
name|get
argument_list|(
literal|null
argument_list|)
argument_list|)
operator|.
name|andReturn
argument_list|(
name|mockBroker
argument_list|)
operator|.
name|anyTimes
argument_list|()
expr_stmt|;
name|mockBrokerPool
operator|.
name|release
argument_list|(
name|mockBroker
argument_list|)
expr_stmt|;
name|expectLastCall
argument_list|()
operator|.
name|anyTimes
argument_list|()
expr_stmt|;
name|expect
argument_list|(
name|mockBrokerPool
operator|.
name|getBroker
argument_list|()
argument_list|)
operator|.
name|andReturn
argument_list|(
name|mockBroker
argument_list|)
operator|.
name|anyTimes
argument_list|()
expr_stmt|;
specifier|final
name|Journal
name|mockJournal
init|=
name|createMock
argument_list|(
name|Journal
operator|.
name|class
argument_list|)
decl_stmt|;
specifier|final
name|SystemTaskManager
name|mockTaskManager
init|=
name|createMock
argument_list|(
name|SystemTaskManager
operator|.
name|class
argument_list|)
decl_stmt|;
name|replay
argument_list|(
name|mockBrokerPool
argument_list|)
expr_stmt|;
return|return
operator|new
name|TransactionManager
argument_list|(
name|mockBrokerPool
argument_list|,
literal|true
argument_list|,
name|mockJournal
argument_list|,
literal|false
argument_list|,
literal|false
argument_list|,
name|mockTaskManager
argument_list|)
return|;
block|}
block|}
end_class

end_unit

