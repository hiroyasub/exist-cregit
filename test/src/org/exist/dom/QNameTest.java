begin_unit|revision:1.0.0;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * eXist Open Source Native XML Database  * Copyright (C) 2001-2017 The eXist Project  * http://exist-db.org  *  * This program is free software; you can redistribute it and/or  * modify it under the terms of the GNU Lesser General Public License  * as published by the Free Software Foundation; either version 2  * of the License, or (at your option) any later version.  *  * This program is distributed in the hope that it will be useful,  * but WITHOUT ANY WARRANTY; without even the implied warranty of  * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the  * GNU Lesser General Public License for more details.  *  * You should have received a copy of the GNU Lesser General Public  * License along with this library; if not, write to the Free Software  * Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA  02110-1301  USA  */
end_comment

begin_package
package|package
name|org
operator|.
name|exist
operator|.
name|dom
package|;
end_package

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|xml
operator|.
name|XMLConstants
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|exist
operator|.
name|dom
operator|.
name|QName
operator|.
name|Validity
operator|.
name|*
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertEquals
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertFalse
import|;
end_import

begin_comment
comment|/**  * @author<a href="mailto:adam@evolvedbinary.com">Adam Retter</a>  */
end_comment

begin_class
specifier|public
class|class
name|QNameTest
block|{
annotation|@
name|Test
specifier|public
name|void
name|validLocalPart_1
parameter_list|()
block|{
specifier|final
name|QName
name|qName
init|=
operator|new
name|QName
argument_list|(
literal|"valid-name"
argument_list|,
name|XMLConstants
operator|.
name|NULL_NS_URI
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|"valid-name"
argument_list|,
name|qName
operator|.
name|getLocalPart
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|XMLConstants
operator|.
name|NULL_NS_URI
argument_list|,
name|qName
operator|.
name|getNamespaceURI
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|null
argument_list|,
name|qName
operator|.
name|getPrefix
argument_list|()
argument_list|)
expr_stmt|;
comment|//TODO(AR) should this be XMLConstants.DEFAULT_NS_PREFIX
name|assertEquals
argument_list|(
name|VALID
operator|.
name|val
argument_list|,
name|qName
operator|.
name|isValid
argument_list|(
literal|false
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|invalidLocalPart_1
parameter_list|()
block|{
specifier|final
name|QName
name|qname
init|=
operator|new
name|QName
argument_list|(
literal|"invalid^Name"
argument_list|,
name|XMLConstants
operator|.
name|NULL_NS_URI
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|INVALID_LOCAL_PART
operator|.
name|val
argument_list|,
name|qname
operator|.
name|isValid
argument_list|(
literal|false
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|invalidLocalPart_validNamespace_1
parameter_list|()
block|{
specifier|final
name|QName
name|qname
init|=
operator|new
name|QName
argument_list|(
literal|"invalid^Name"
argument_list|,
literal|"http://some/ns"
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|INVALID_LOCAL_PART
operator|.
name|val
argument_list|,
name|qname
operator|.
name|isValid
argument_list|(
literal|false
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|validWildcard_1
parameter_list|()
block|{
specifier|final
name|QName
name|qName
init|=
operator|new
name|QName
operator|.
name|WildcardLocalPartQName
argument_list|(
literal|"abc"
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|VALID
operator|.
name|val
argument_list|,
name|qName
operator|.
name|isValid
argument_list|(
literal|true
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|invalidWildcard_1
parameter_list|()
block|{
specifier|final
name|QName
name|qName
init|=
operator|new
name|QName
operator|.
name|WildcardLocalPartQName
argument_list|(
literal|"abc"
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|INVALID_LOCAL_PART
operator|.
name|val
argument_list|,
name|qName
operator|.
name|isValid
argument_list|(
literal|false
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|validWildcard_2
parameter_list|()
block|{
specifier|final
name|QName
name|qName
init|=
operator|new
name|QName
operator|.
name|WildcardNamespaceURIQName
argument_list|(
literal|"xyz"
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|VALID
operator|.
name|val
argument_list|,
name|qName
operator|.
name|isValid
argument_list|(
literal|true
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|validWildcard_3
parameter_list|()
block|{
specifier|final
name|QName
name|qName
init|=
name|QName
operator|.
name|WildcardQName
operator|.
name|getInstance
argument_list|()
decl_stmt|;
name|assertEquals
argument_list|(
name|VALID
operator|.
name|val
argument_list|,
name|qName
operator|.
name|isValid
argument_list|(
literal|true
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|invalidWildcard_3
parameter_list|()
block|{
specifier|final
name|QName
name|qName
init|=
name|QName
operator|.
name|WildcardQName
operator|.
name|getInstance
argument_list|()
decl_stmt|;
name|assertEquals
argument_list|(
name|INVALID_LOCAL_PART
operator|.
name|val
operator|^
name|INVALID_PREFIX
operator|.
name|val
argument_list|,
name|qName
operator|.
name|isValid
argument_list|(
literal|false
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|isQName_illegalFormat1
parameter_list|()
block|{
name|assertEquals
argument_list|(
name|ILLEGAL_FORMAT
operator|.
name|val
argument_list|,
name|QName
operator|.
name|isQName
argument_list|(
literal|"emp:"
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|isQName_illegalFormat2
parameter_list|()
block|{
name|assertEquals
argument_list|(
name|ILLEGAL_FORMAT
operator|.
name|val
argument_list|,
name|QName
operator|.
name|isQName
argument_list|(
literal|":emp"
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

