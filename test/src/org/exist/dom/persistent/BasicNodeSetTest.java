begin_unit|revision:1.0.0;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  *  eXist Open Source Native XML Database  *  Copyright (C) 2011 The eXist-db Project  *  *  This library is free software; you can redistribute it and/or  *  modify it under the terms of the GNU Library General Public License  *  as published by the Free Software Foundation; either version 2  *  of the License, or (at your option) any later version.  *  *  This library is distributed in the hope that it will be useful,  *  but WITHOUT ANY WARRANTY; without even the implied warranty of  *  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the  *  GNU Library General Public License for more details.  *  *  You should have received a copy of the GNU General Public License  *  along with this program; if not, write to the Free Software  *  Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA  02111-1307, USA.  *   *  $Id$  */
end_comment

begin_package
package|package
name|org
operator|.
name|exist
operator|.
name|dom
operator|.
name|persistent
package|;
end_package

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|collections
operator|.
name|triggers
operator|.
name|TriggerException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|dom
operator|.
name|QName
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|security
operator|.
name|PermissionDeniedException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|storage
operator|.
name|txn
operator|.
name|TransactionException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|test
operator|.
name|ExistEmbeddedServer
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|util
operator|.
name|FileUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|AfterClass
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|BeforeClass
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|collections
operator|.
name|Collection
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|collections
operator|.
name|IndexInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|storage
operator|.
name|BrokerPool
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|storage
operator|.
name|DBBroker
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|storage
operator|.
name|ElementValue
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|storage
operator|.
name|serializers
operator|.
name|Serializer
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|storage
operator|.
name|txn
operator|.
name|TransactionManager
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|storage
operator|.
name|txn
operator|.
name|Txn
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|util
operator|.
name|XMLFilenameFilter
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|xmldb
operator|.
name|XmldbURI
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|xquery
operator|.
name|AncestorSelector
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|xquery
operator|.
name|ChildSelector
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|xquery
operator|.
name|Constants
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|xquery
operator|.
name|DescendantOrSelfSelector
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|xquery
operator|.
name|DescendantSelector
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|xquery
operator|.
name|NameTest
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|xquery
operator|.
name|NodeSelector
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|xquery
operator|.
name|XPathException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|xquery
operator|.
name|XQuery
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|xquery
operator|.
name|value
operator|.
name|Item
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|xquery
operator|.
name|value
operator|.
name|NodeValue
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|xquery
operator|.
name|value
operator|.
name|Sequence
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|xquery
operator|.
name|value
operator|.
name|Type
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|ClassRule
import|;
end_import

begin_import
import|import
name|org
operator|.
name|xml
operator|.
name|sax
operator|.
name|InputSource
import|;
end_import

begin_import
import|import
name|org
operator|.
name|xml
operator|.
name|sax
operator|.
name|SAXException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|nio
operator|.
name|file
operator|.
name|Path
import|;
end_import

begin_import
import|import
name|java
operator|.
name|nio
operator|.
name|file
operator|.
name|Paths
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Optional
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertEquals
import|;
end_import

begin_comment
comment|/**  * Test basic {@link org.exist.dom.persistent.NodeSet} operations to ensure that  * the used algorithms are correct.  *    * @author wolf  * @author Adam Retter<adam@exist-db.org>  */
end_comment

begin_class
specifier|public
class|class
name|BasicNodeSetTest
block|{
specifier|private
specifier|final
specifier|static
name|String
name|NESTED_XML
init|=
literal|"<section n='1'>"
operator|+
literal|"<section n='1.1'>"
operator|+
literal|"<section n='1.1.1'>"
operator|+
literal|"<para n='1.1.1.1'/>"
operator|+
literal|"<para n='1.1.1.2'/>"
operator|+
literal|"<para n='1.1.1.3'/>"
operator|+
literal|"</section>"
operator|+
literal|"<section n='1.1.2'>"
operator|+
literal|"<para n='1.1.2.1'/>"
operator|+
literal|"</section>"
operator|+
literal|"</section>"
operator|+
literal|"<section n='1.2'>"
operator|+
literal|"<para n='1.2.1'/>"
operator|+
literal|"</section>"
operator|+
literal|"</section>"
decl_stmt|;
specifier|private
specifier|static
name|Collection
name|root
init|=
literal|null
decl_stmt|;
specifier|private
specifier|static
name|DBBroker
name|broker
init|=
literal|null
decl_stmt|;
specifier|private
specifier|static
name|Sequence
name|seqSpeech
init|=
literal|null
decl_stmt|;
specifier|private
specifier|static
name|DocumentSet
name|docs
init|=
literal|null
decl_stmt|;
annotation|@
name|Test
specifier|public
name|void
name|childSelector
parameter_list|()
throws|throws
name|XPathException
block|{
name|NodeSelector
name|selector
init|=
operator|new
name|ChildSelector
argument_list|(
name|seqSpeech
operator|.
name|toNodeSet
argument_list|()
argument_list|,
operator|-
literal|1
argument_list|)
decl_stmt|;
name|NameTest
name|test
init|=
operator|new
name|NameTest
argument_list|(
name|Type
operator|.
name|ELEMENT
argument_list|,
operator|new
name|QName
argument_list|(
literal|"LINE"
argument_list|,
literal|""
argument_list|)
argument_list|)
decl_stmt|;
name|NodeSet
name|set
init|=
name|broker
operator|.
name|getStructuralIndex
argument_list|()
operator|.
name|findElementsByTagName
argument_list|(
name|ElementValue
operator|.
name|ELEMENT
argument_list|,
name|seqSpeech
operator|.
name|getDocumentSet
argument_list|()
argument_list|,
name|test
operator|.
name|getName
argument_list|()
argument_list|,
name|selector
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|9492
argument_list|,
name|set
operator|.
name|getLength
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|descendantOrSelfSelector
parameter_list|()
throws|throws
name|XPathException
block|{
name|NodeSelector
name|selector
init|=
operator|new
name|DescendantOrSelfSelector
argument_list|(
name|seqSpeech
operator|.
name|toNodeSet
argument_list|()
argument_list|,
operator|-
literal|1
argument_list|)
decl_stmt|;
name|NameTest
name|test
init|=
operator|new
name|NameTest
argument_list|(
name|Type
operator|.
name|ELEMENT
argument_list|,
operator|new
name|QName
argument_list|(
literal|"SPEECH"
argument_list|,
literal|""
argument_list|)
argument_list|)
decl_stmt|;
name|NodeSet
name|set
init|=
name|broker
operator|.
name|getStructuralIndex
argument_list|()
operator|.
name|findElementsByTagName
argument_list|(
name|ElementValue
operator|.
name|ELEMENT
argument_list|,
name|seqSpeech
operator|.
name|getDocumentSet
argument_list|()
argument_list|,
name|test
operator|.
name|getName
argument_list|()
argument_list|,
name|selector
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|2628
argument_list|,
name|set
operator|.
name|getLength
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|ancestorSelector
parameter_list|()
throws|throws
name|XPathException
block|{
name|NodeSelector
name|selector
init|=
operator|new
name|AncestorSelector
argument_list|(
name|seqSpeech
operator|.
name|toNodeSet
argument_list|()
argument_list|,
operator|-
literal|1
argument_list|,
literal|false
argument_list|,
literal|true
argument_list|)
decl_stmt|;
name|NameTest
name|test
init|=
operator|new
name|NameTest
argument_list|(
name|Type
operator|.
name|ELEMENT
argument_list|,
operator|new
name|QName
argument_list|(
literal|"ACT"
argument_list|,
literal|""
argument_list|)
argument_list|)
decl_stmt|;
name|NodeSet
name|set
init|=
name|broker
operator|.
name|getStructuralIndex
argument_list|()
operator|.
name|findElementsByTagName
argument_list|(
name|ElementValue
operator|.
name|ELEMENT
argument_list|,
name|seqSpeech
operator|.
name|getDocumentSet
argument_list|()
argument_list|,
name|test
operator|.
name|getName
argument_list|()
argument_list|,
name|selector
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|15
argument_list|,
name|set
operator|.
name|getLength
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|ancestorSelector_self
parameter_list|()
throws|throws
name|XPathException
block|{
name|NodeSet
name|ns
init|=
name|seqSpeech
operator|.
name|toNodeSet
argument_list|()
decl_stmt|;
name|NodeSelector
name|selector
init|=
operator|new
name|AncestorSelector
argument_list|(
name|ns
argument_list|,
operator|-
literal|1
argument_list|,
literal|true
argument_list|,
literal|true
argument_list|)
decl_stmt|;
name|NameTest
name|test
init|=
operator|new
name|NameTest
argument_list|(
name|Type
operator|.
name|ELEMENT
argument_list|,
operator|new
name|QName
argument_list|(
literal|"SPEECH"
argument_list|,
literal|""
argument_list|)
argument_list|)
decl_stmt|;
name|NodeSet
name|set
init|=
name|broker
operator|.
name|getStructuralIndex
argument_list|()
operator|.
name|findElementsByTagName
argument_list|(
name|ElementValue
operator|.
name|ELEMENT
argument_list|,
name|seqSpeech
operator|.
name|getDocumentSet
argument_list|()
argument_list|,
name|test
operator|.
name|getName
argument_list|()
argument_list|,
name|selector
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|2628
argument_list|,
name|set
operator|.
name|getLength
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|descendantSelector
parameter_list|()
throws|throws
name|XPathException
throws|,
name|SAXException
throws|,
name|PermissionDeniedException
block|{
name|Sequence
name|seq
init|=
name|executeQuery
argument_list|(
name|broker
argument_list|,
literal|"//SCENE"
argument_list|,
literal|72
argument_list|,
literal|null
argument_list|)
decl_stmt|;
name|NameTest
name|test
init|=
operator|new
name|NameTest
argument_list|(
name|Type
operator|.
name|ELEMENT
argument_list|,
operator|new
name|QName
argument_list|(
literal|"SPEAKER"
argument_list|,
literal|""
argument_list|)
argument_list|)
decl_stmt|;
name|NodeSelector
name|selector
init|=
operator|new
name|DescendantSelector
argument_list|(
name|seq
operator|.
name|toNodeSet
argument_list|()
argument_list|,
operator|-
literal|1
argument_list|)
decl_stmt|;
name|NodeSet
name|set
init|=
name|broker
operator|.
name|getStructuralIndex
argument_list|()
operator|.
name|findElementsByTagName
argument_list|(
name|ElementValue
operator|.
name|ELEMENT
argument_list|,
name|seq
operator|.
name|getDocumentSet
argument_list|()
argument_list|,
name|test
operator|.
name|getName
argument_list|()
argument_list|,
name|selector
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|2639
argument_list|,
name|set
operator|.
name|getLength
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|selectParentChild
parameter_list|()
throws|throws
name|XPathException
throws|,
name|SAXException
throws|,
name|PermissionDeniedException
block|{
name|NameTest
name|test
init|=
operator|new
name|NameTest
argument_list|(
name|Type
operator|.
name|ELEMENT
argument_list|,
operator|new
name|QName
argument_list|(
literal|"SPEAKER"
argument_list|,
literal|""
argument_list|)
argument_list|)
decl_stmt|;
name|NodeSet
name|speakers
init|=
name|broker
operator|.
name|getStructuralIndex
argument_list|()
operator|.
name|findElementsByTagName
argument_list|(
name|ElementValue
operator|.
name|ELEMENT
argument_list|,
name|docs
argument_list|,
name|test
operator|.
name|getName
argument_list|()
argument_list|,
literal|null
argument_list|)
decl_stmt|;
name|Sequence
name|smallSet
init|=
name|executeQuery
argument_list|(
name|broker
argument_list|,
literal|"//SPEECH/LINE[fn:contains(., 'perturbed spirit')]/ancestor::SPEECH"
argument_list|,
literal|1
argument_list|,
literal|null
argument_list|)
decl_stmt|;
name|NodeSet
name|result
init|=
name|NodeSetHelper
operator|.
name|selectParentChild
argument_list|(
name|speakers
argument_list|,
name|smallSet
operator|.
name|toNodeSet
argument_list|()
argument_list|,
name|NodeSet
operator|.
name|DESCENDANT
argument_list|,
operator|-
literal|1
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|result
operator|.
name|getLength
argument_list|()
argument_list|)
expr_stmt|;
name|String
name|value
init|=
name|serialize
argument_list|(
name|broker
argument_list|,
name|result
operator|.
name|itemAt
argument_list|(
literal|0
argument_list|)
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|value
argument_list|,
literal|"<SPEAKER>HAMLET</SPEAKER>"
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|selectParentChild_2
parameter_list|()
throws|throws
name|XPathException
throws|,
name|SAXException
throws|,
name|PermissionDeniedException
block|{
name|NameTest
name|test
init|=
operator|new
name|NameTest
argument_list|(
name|Type
operator|.
name|ELEMENT
argument_list|,
operator|new
name|QName
argument_list|(
literal|"SPEAKER"
argument_list|,
literal|""
argument_list|)
argument_list|)
decl_stmt|;
name|NodeSet
name|speakers
init|=
name|broker
operator|.
name|getStructuralIndex
argument_list|()
operator|.
name|findElementsByTagName
argument_list|(
name|ElementValue
operator|.
name|ELEMENT
argument_list|,
name|docs
argument_list|,
name|test
operator|.
name|getName
argument_list|()
argument_list|,
literal|null
argument_list|)
decl_stmt|;
name|Sequence
name|largeSet
init|=
name|executeQuery
argument_list|(
name|broker
argument_list|,
literal|"//SPEECH/LINE[fn:contains(., 'love')]/ancestor::SPEECH"
argument_list|,
literal|187
argument_list|,
literal|null
argument_list|)
decl_stmt|;
name|NodeSet
name|result
init|=
name|NodeSetHelper
operator|.
name|selectParentChild
argument_list|(
name|speakers
argument_list|,
name|largeSet
operator|.
name|toNodeSet
argument_list|()
argument_list|,
name|NodeSet
operator|.
name|DESCENDANT
argument_list|,
operator|-
literal|1
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|187
argument_list|,
name|result
operator|.
name|getLength
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|selectAncestorDescendant
parameter_list|()
throws|throws
name|XPathException
throws|,
name|SAXException
throws|,
name|PermissionDeniedException
block|{
name|NameTest
name|test
init|=
operator|new
name|NameTest
argument_list|(
name|Type
operator|.
name|ELEMENT
argument_list|,
operator|new
name|QName
argument_list|(
literal|"SPEAKER"
argument_list|,
literal|""
argument_list|)
argument_list|)
decl_stmt|;
name|NodeSet
name|speakers
init|=
name|broker
operator|.
name|getStructuralIndex
argument_list|()
operator|.
name|findElementsByTagName
argument_list|(
name|ElementValue
operator|.
name|ELEMENT
argument_list|,
name|docs
argument_list|,
name|test
operator|.
name|getName
argument_list|()
argument_list|,
literal|null
argument_list|)
decl_stmt|;
name|Sequence
name|outerSet
init|=
name|executeQuery
argument_list|(
name|broker
argument_list|,
literal|"//SCENE/TITLE[fn:contains(., 'closet')]/ancestor::SCENE"
argument_list|,
literal|1
argument_list|,
literal|null
argument_list|)
decl_stmt|;
name|NodeSet
name|result
init|=
name|speakers
operator|.
name|selectAncestorDescendant
argument_list|(
name|outerSet
operator|.
name|toNodeSet
argument_list|()
argument_list|,
name|NodeSet
operator|.
name|DESCENDANT
argument_list|,
literal|false
argument_list|,
operator|-
literal|1
argument_list|,
literal|true
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|56
argument_list|,
name|result
operator|.
name|getLength
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|selectAncestorDescendant_2
parameter_list|()
throws|throws
name|XPathException
throws|,
name|SAXException
throws|,
name|PermissionDeniedException
block|{
name|Sequence
name|outerSet
init|=
name|executeQuery
argument_list|(
name|broker
argument_list|,
literal|"//SCENE/TITLE[fn:contains(., 'closet')]/ancestor::SCENE"
argument_list|,
literal|1
argument_list|,
literal|null
argument_list|)
decl_stmt|;
name|NodeSet
name|result
init|=
operator|(
operator|(
name|AbstractNodeSet
operator|)
name|outerSet
operator|)
operator|.
name|selectAncestorDescendant
argument_list|(
name|outerSet
operator|.
name|toNodeSet
argument_list|()
argument_list|,
name|NodeSet
operator|.
name|DESCENDANT
argument_list|,
literal|true
argument_list|,
operator|-
literal|1
argument_list|,
literal|true
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|result
operator|.
name|getLength
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|getParents
parameter_list|()
throws|throws
name|XPathException
throws|,
name|SAXException
throws|,
name|PermissionDeniedException
block|{
name|Sequence
name|largeSet
init|=
name|executeQuery
argument_list|(
name|broker
argument_list|,
literal|"//SPEECH/LINE[fn:contains(., 'love')]/ancestor::SPEECH"
argument_list|,
literal|187
argument_list|,
literal|null
argument_list|)
decl_stmt|;
name|NodeSet
name|result
init|=
operator|(
operator|(
name|AbstractNodeSet
operator|)
name|largeSet
operator|)
operator|.
name|getParents
argument_list|(
operator|-
literal|1
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|51
argument_list|,
name|result
operator|.
name|getLength
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|selectAncestors
parameter_list|()
throws|throws
name|XPathException
throws|,
name|SAXException
throws|,
name|PermissionDeniedException
block|{
name|NameTest
name|test
init|=
operator|new
name|NameTest
argument_list|(
name|Type
operator|.
name|ELEMENT
argument_list|,
operator|new
name|QName
argument_list|(
literal|"SCENE"
argument_list|,
literal|""
argument_list|)
argument_list|)
decl_stmt|;
name|NodeSet
name|scenes
init|=
name|broker
operator|.
name|getStructuralIndex
argument_list|()
operator|.
name|findElementsByTagName
argument_list|(
name|ElementValue
operator|.
name|ELEMENT
argument_list|,
name|docs
argument_list|,
name|test
operator|.
name|getName
argument_list|()
argument_list|,
literal|null
argument_list|)
decl_stmt|;
name|Sequence
name|largeSet
init|=
name|executeQuery
argument_list|(
name|broker
argument_list|,
literal|"//SPEECH/LINE[fn:contains(., 'love')]/ancestor::SPEECH"
argument_list|,
literal|187
argument_list|,
literal|null
argument_list|)
decl_stmt|;
name|NodeSet
name|result
init|=
operator|(
operator|(
name|AbstractNodeSet
operator|)
name|scenes
operator|)
operator|.
name|selectAncestors
argument_list|(
name|largeSet
operator|.
name|toNodeSet
argument_list|()
argument_list|,
literal|false
argument_list|,
operator|-
literal|1
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|49
argument_list|,
name|result
operator|.
name|getLength
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|nodeProxy_getParents
parameter_list|()
throws|throws
name|XPathException
throws|,
name|SAXException
throws|,
name|PermissionDeniedException
block|{
name|Sequence
name|smallSet
init|=
name|executeQuery
argument_list|(
name|broker
argument_list|,
literal|"//SPEECH/LINE[fn:contains(., 'perturbed spirit')]/ancestor::SPEECH"
argument_list|,
literal|1
argument_list|,
literal|null
argument_list|)
decl_stmt|;
name|NodeProxy
name|proxy
init|=
operator|(
name|NodeProxy
operator|)
name|smallSet
operator|.
name|itemAt
argument_list|(
literal|0
argument_list|)
decl_stmt|;
name|NodeSet
name|result
init|=
name|proxy
operator|.
name|getParents
argument_list|(
operator|-
literal|1
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|result
operator|.
name|getLength
argument_list|()
argument_list|)
expr_stmt|;
name|NameTest
name|test
init|=
operator|new
name|NameTest
argument_list|(
name|Type
operator|.
name|ELEMENT
argument_list|,
operator|new
name|QName
argument_list|(
literal|"SPEAKER"
argument_list|,
literal|""
argument_list|)
argument_list|)
decl_stmt|;
name|NodeSet
name|speakers
init|=
name|broker
operator|.
name|getStructuralIndex
argument_list|()
operator|.
name|findElementsByTagName
argument_list|(
name|ElementValue
operator|.
name|ELEMENT
argument_list|,
name|docs
argument_list|,
name|test
operator|.
name|getName
argument_list|()
argument_list|,
literal|null
argument_list|)
decl_stmt|;
name|result
operator|=
name|speakers
operator|.
name|selectParentChild
argument_list|(
name|proxy
argument_list|,
name|NodeSet
operator|.
name|DESCENDANT
argument_list|,
operator|-
literal|1
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|result
operator|.
name|getLength
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|selectFollowingSiblings
parameter_list|()
throws|throws
name|XPathException
throws|,
name|SAXException
throws|,
name|PermissionDeniedException
block|{
name|Sequence
name|largeSet
init|=
name|executeQuery
argument_list|(
name|broker
argument_list|,
literal|"//SPEECH/LINE[fn:contains(., 'love')]/ancestor::SPEECH/SPEAKER"
argument_list|,
literal|187
argument_list|,
literal|null
argument_list|)
decl_stmt|;
name|NameTest
name|test
init|=
operator|new
name|NameTest
argument_list|(
name|Type
operator|.
name|ELEMENT
argument_list|,
operator|new
name|QName
argument_list|(
literal|"LINE"
argument_list|,
literal|""
argument_list|)
argument_list|)
decl_stmt|;
name|NodeSet
name|lines
init|=
name|broker
operator|.
name|getStructuralIndex
argument_list|()
operator|.
name|findElementsByTagName
argument_list|(
name|ElementValue
operator|.
name|ELEMENT
argument_list|,
name|docs
argument_list|,
name|test
operator|.
name|getName
argument_list|()
argument_list|,
literal|null
argument_list|)
decl_stmt|;
name|NodeSet
name|result
init|=
operator|(
operator|(
name|AbstractNodeSet
operator|)
name|lines
operator|)
operator|.
name|selectFollowingSiblings
argument_list|(
name|largeSet
operator|.
name|toNodeSet
argument_list|()
argument_list|,
operator|-
literal|1
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|1689
argument_list|,
name|result
operator|.
name|getLength
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|selectPrecedingSiblings
parameter_list|()
throws|throws
name|XPathException
throws|,
name|SAXException
throws|,
name|PermissionDeniedException
block|{
name|NameTest
name|test
init|=
operator|new
name|NameTest
argument_list|(
name|Type
operator|.
name|ELEMENT
argument_list|,
operator|new
name|QName
argument_list|(
literal|"SPEAKER"
argument_list|,
literal|""
argument_list|)
argument_list|)
decl_stmt|;
name|NodeSet
name|speakers
init|=
name|broker
operator|.
name|getStructuralIndex
argument_list|()
operator|.
name|findElementsByTagName
argument_list|(
name|ElementValue
operator|.
name|ELEMENT
argument_list|,
name|docs
argument_list|,
name|test
operator|.
name|getName
argument_list|()
argument_list|,
literal|null
argument_list|)
decl_stmt|;
name|Sequence
name|largeSet
init|=
name|executeQuery
argument_list|(
name|broker
argument_list|,
literal|"//SPEECH/LINE[fn:contains(., 'love')]/ancestor::SPEECH/LINE[1]"
argument_list|,
literal|187
argument_list|,
literal|null
argument_list|)
decl_stmt|;
name|NodeSet
name|result
init|=
operator|(
operator|(
name|AbstractNodeSet
operator|)
name|speakers
operator|)
operator|.
name|selectPrecedingSiblings
argument_list|(
name|largeSet
operator|.
name|toNodeSet
argument_list|()
argument_list|,
operator|-
literal|1
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|187
argument_list|,
name|result
operator|.
name|getLength
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|extArrayNodeSet_selectParentChild_1
parameter_list|()
throws|throws
name|XPathException
throws|,
name|SAXException
throws|,
name|PermissionDeniedException
block|{
name|Sequence
name|nestedSet
init|=
name|executeQuery
argument_list|(
name|broker
argument_list|,
literal|"//section[@n = ('1.1', '1.1.1')]"
argument_list|,
literal|2
argument_list|,
literal|null
argument_list|)
decl_stmt|;
name|NameTest
name|test
init|=
operator|new
name|NameTest
argument_list|(
name|Type
operator|.
name|ELEMENT
argument_list|,
operator|new
name|QName
argument_list|(
literal|"para"
argument_list|,
literal|""
argument_list|)
argument_list|)
decl_stmt|;
name|NodeSet
name|children
init|=
name|broker
operator|.
name|getStructuralIndex
argument_list|()
operator|.
name|findElementsByTagName
argument_list|(
name|ElementValue
operator|.
name|ELEMENT
argument_list|,
name|docs
argument_list|,
name|test
operator|.
name|getName
argument_list|()
argument_list|,
literal|null
argument_list|)
decl_stmt|;
name|NodeSet
name|result
init|=
name|children
operator|.
name|selectParentChild
argument_list|(
name|nestedSet
operator|.
name|toNodeSet
argument_list|()
argument_list|,
name|NodeSet
operator|.
name|DESCENDANT
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|3
argument_list|,
name|result
operator|.
name|getLength
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|extArrayNodeSet_selectParentChild_2
parameter_list|()
throws|throws
name|XPathException
throws|,
name|SAXException
throws|,
name|PermissionDeniedException
block|{
name|Sequence
name|nestedSet
init|=
name|executeQuery
argument_list|(
name|broker
argument_list|,
literal|"//section[@n = ('1.1', '1.1.2', '1.2')]"
argument_list|,
literal|3
argument_list|,
literal|null
argument_list|)
decl_stmt|;
name|NameTest
name|test
init|=
operator|new
name|NameTest
argument_list|(
name|Type
operator|.
name|ELEMENT
argument_list|,
operator|new
name|QName
argument_list|(
literal|"para"
argument_list|,
literal|""
argument_list|)
argument_list|)
decl_stmt|;
name|NodeSet
name|children
init|=
name|broker
operator|.
name|getStructuralIndex
argument_list|()
operator|.
name|findElementsByTagName
argument_list|(
name|ElementValue
operator|.
name|ELEMENT
argument_list|,
name|docs
argument_list|,
name|test
operator|.
name|getName
argument_list|()
argument_list|,
literal|null
argument_list|)
decl_stmt|;
name|NodeSet
name|result
init|=
name|children
operator|.
name|selectParentChild
argument_list|(
name|nestedSet
operator|.
name|toNodeSet
argument_list|()
argument_list|,
name|NodeSet
operator|.
name|DESCENDANT
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|result
operator|.
name|getLength
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|extArrayNodeSet_selectParentChild_3
parameter_list|()
throws|throws
name|XPathException
throws|,
name|SAXException
throws|,
name|PermissionDeniedException
block|{
name|Sequence
name|nestedSet
init|=
name|executeQuery
argument_list|(
name|broker
argument_list|,
literal|"//section[@n = ('1.1', '1.1.1', '1.2')]"
argument_list|,
literal|3
argument_list|,
literal|null
argument_list|)
decl_stmt|;
name|NameTest
name|test
init|=
operator|new
name|NameTest
argument_list|(
name|Type
operator|.
name|ELEMENT
argument_list|,
operator|new
name|QName
argument_list|(
literal|"para"
argument_list|,
literal|""
argument_list|)
argument_list|)
decl_stmt|;
name|NodeSet
name|children
init|=
name|broker
operator|.
name|getStructuralIndex
argument_list|()
operator|.
name|findElementsByTagName
argument_list|(
name|ElementValue
operator|.
name|ELEMENT
argument_list|,
name|docs
argument_list|,
name|test
operator|.
name|getName
argument_list|()
argument_list|,
literal|null
argument_list|)
decl_stmt|;
name|NodeSet
name|result
init|=
name|children
operator|.
name|selectParentChild
argument_list|(
name|nestedSet
operator|.
name|toNodeSet
argument_list|()
argument_list|,
name|NodeSet
operator|.
name|DESCENDANT
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|4
argument_list|,
name|result
operator|.
name|getLength
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|extArrayNodeSet_selectParentChild_4
parameter_list|()
throws|throws
name|XPathException
throws|,
name|SAXException
throws|,
name|PermissionDeniedException
block|{
name|Sequence
name|nestedSet
init|=
name|executeQuery
argument_list|(
name|broker
argument_list|,
literal|"//para[@n = ('1.1.2.1')]"
argument_list|,
literal|1
argument_list|,
literal|null
argument_list|)
decl_stmt|;
name|NameTest
name|test
init|=
operator|new
name|NameTest
argument_list|(
name|Type
operator|.
name|ELEMENT
argument_list|,
operator|new
name|QName
argument_list|(
literal|"section"
argument_list|,
literal|""
argument_list|)
argument_list|)
decl_stmt|;
name|NodeSet
name|sections
init|=
name|broker
operator|.
name|getStructuralIndex
argument_list|()
operator|.
name|findElementsByTagName
argument_list|(
name|ElementValue
operator|.
name|ELEMENT
argument_list|,
name|docs
argument_list|,
name|test
operator|.
name|getName
argument_list|()
argument_list|,
literal|null
argument_list|)
decl_stmt|;
name|NodeSet
name|result
init|=
operator|(
operator|(
name|NodeSet
operator|)
name|nestedSet
operator|)
operator|.
name|selectParentChild
argument_list|(
name|sections
operator|.
name|toNodeSet
argument_list|()
argument_list|,
name|NodeSet
operator|.
name|DESCENDANT
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|result
operator|.
name|getLength
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testOptimizations
parameter_list|()
throws|throws
name|XPathException
throws|,
name|SAXException
throws|,
name|PermissionDeniedException
block|{
name|Serializer
name|serializer
init|=
name|broker
operator|.
name|getSerializer
argument_list|()
decl_stmt|;
name|serializer
operator|.
name|reset
argument_list|()
expr_stmt|;
name|DocumentSet
name|docs
init|=
name|root
operator|.
name|allDocs
argument_list|(
name|broker
argument_list|,
operator|new
name|DefaultDocumentSet
argument_list|()
argument_list|,
literal|true
argument_list|)
decl_stmt|;
comment|//Testing NativeElementIndex.findChildNodesByTagName
comment|// parent set: 1.1.1; child set: 1.1.1.1, 1.1.1.2, 1.1.1.3, 1.1.2.1, 1.2.1
name|ExtNodeSet
name|nestedSet
init|=
operator|(
name|ExtNodeSet
operator|)
name|executeQuery
argument_list|(
name|broker
argument_list|,
literal|"//section[@n = '1.1.1']"
argument_list|,
literal|1
argument_list|,
literal|null
argument_list|)
decl_stmt|;
name|NodeSet
name|children
init|=
name|broker
operator|.
name|getStructuralIndex
argument_list|()
operator|.
name|findDescendantsByTagName
argument_list|(
name|ElementValue
operator|.
name|ELEMENT
argument_list|,
operator|new
name|QName
argument_list|(
literal|"para"
argument_list|,
literal|""
argument_list|)
argument_list|,
name|Constants
operator|.
name|CHILD_AXIS
argument_list|,
name|docs
argument_list|,
name|nestedSet
argument_list|,
operator|-
literal|1
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|3
argument_list|,
name|children
operator|.
name|getLength
argument_list|()
argument_list|)
expr_stmt|;
comment|// parent set: 1.1; child set: 1.1.1, 1.1.2
name|nestedSet
operator|=
operator|(
name|ExtNodeSet
operator|)
name|executeQuery
argument_list|(
name|broker
argument_list|,
literal|"//section[@n = '1.1']"
argument_list|,
literal|1
argument_list|,
literal|null
argument_list|)
expr_stmt|;
name|children
operator|=
name|broker
operator|.
name|getStructuralIndex
argument_list|()
operator|.
name|findDescendantsByTagName
argument_list|(
name|ElementValue
operator|.
name|ELEMENT
argument_list|,
operator|new
name|QName
argument_list|(
literal|"section"
argument_list|,
literal|""
argument_list|)
argument_list|,
name|Constants
operator|.
name|CHILD_AXIS
argument_list|,
name|docs
argument_list|,
name|nestedSet
argument_list|,
operator|-
literal|1
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|children
operator|.
name|getLength
argument_list|()
argument_list|)
expr_stmt|;
comment|// parent set: 1, 1.1, 1.1.1, 1.1.2 ; child set: 1.1.1.1, 1.1.1.2, 1.1.1.3, 1.1.2.1, 1.2.1
comment|// problem: ancestor set contains nested nodes
name|nestedSet
operator|=
operator|(
name|ExtNodeSet
operator|)
name|executeQuery
argument_list|(
name|broker
argument_list|,
literal|"//section[@n = ('1.1', '1.1.1', '1.1.2')]"
argument_list|,
literal|3
argument_list|,
literal|null
argument_list|)
expr_stmt|;
name|children
operator|=
name|broker
operator|.
name|getStructuralIndex
argument_list|()
operator|.
name|findDescendantsByTagName
argument_list|(
name|ElementValue
operator|.
name|ELEMENT
argument_list|,
operator|new
name|QName
argument_list|(
literal|"para"
argument_list|,
literal|""
argument_list|)
argument_list|,
name|Constants
operator|.
name|CHILD_AXIS
argument_list|,
name|docs
argument_list|,
name|nestedSet
argument_list|,
operator|-
literal|1
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|4
argument_list|,
name|children
operator|.
name|getLength
argument_list|()
argument_list|)
expr_stmt|;
comment|// parent set: 1.1, 1.1.2, 1.2 ; child set: 1.1.1.1, 1.1.1.2, 1.1.1.3, 1.1.2.1, 1.2.1
comment|// problem: ancestor set contains nested nodes
name|nestedSet
operator|=
operator|(
name|ExtNodeSet
operator|)
name|executeQuery
argument_list|(
name|broker
argument_list|,
literal|"//section[@n = ('1.1', '1.1.2', '1.2')]"
argument_list|,
literal|3
argument_list|,
literal|null
argument_list|)
expr_stmt|;
name|children
operator|=
name|broker
operator|.
name|getStructuralIndex
argument_list|()
operator|.
name|findDescendantsByTagName
argument_list|(
name|ElementValue
operator|.
name|ELEMENT
argument_list|,
operator|new
name|QName
argument_list|(
literal|"para"
argument_list|,
literal|""
argument_list|)
argument_list|,
name|Constants
operator|.
name|CHILD_AXIS
argument_list|,
name|docs
argument_list|,
name|nestedSet
argument_list|,
operator|-
literal|1
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|children
operator|.
name|getLength
argument_list|()
argument_list|)
expr_stmt|;
name|nestedSet
operator|=
operator|(
name|ExtNodeSet
operator|)
name|executeQuery
argument_list|(
name|broker
argument_list|,
literal|"//section[@n = '1.1']"
argument_list|,
literal|1
argument_list|,
literal|null
argument_list|)
expr_stmt|;
name|children
operator|=
name|broker
operator|.
name|getStructuralIndex
argument_list|()
operator|.
name|findDescendantsByTagName
argument_list|(
name|ElementValue
operator|.
name|ELEMENT
argument_list|,
operator|new
name|QName
argument_list|(
literal|"para"
argument_list|,
literal|""
argument_list|)
argument_list|,
name|Constants
operator|.
name|DESCENDANT_AXIS
argument_list|,
name|docs
argument_list|,
name|nestedSet
argument_list|,
operator|-
literal|1
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|4
argument_list|,
name|children
operator|.
name|getLength
argument_list|()
argument_list|)
expr_stmt|;
name|nestedSet
operator|=
operator|(
name|ExtNodeSet
operator|)
name|executeQuery
argument_list|(
name|broker
argument_list|,
literal|"//section[@n = '1']"
argument_list|,
literal|1
argument_list|,
literal|null
argument_list|)
expr_stmt|;
name|children
operator|=
name|broker
operator|.
name|getStructuralIndex
argument_list|()
operator|.
name|findDescendantsByTagName
argument_list|(
name|ElementValue
operator|.
name|ELEMENT
argument_list|,
operator|new
name|QName
argument_list|(
literal|"para"
argument_list|,
literal|""
argument_list|)
argument_list|,
name|Constants
operator|.
name|DESCENDANT_AXIS
argument_list|,
name|docs
argument_list|,
name|nestedSet
argument_list|,
operator|-
literal|1
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|5
argument_list|,
name|children
operator|.
name|getLength
argument_list|()
argument_list|)
expr_stmt|;
name|nestedSet
operator|=
operator|(
name|ExtNodeSet
operator|)
name|executeQuery
argument_list|(
name|broker
argument_list|,
literal|"//section[@n = '1.1.2']"
argument_list|,
literal|1
argument_list|,
literal|null
argument_list|)
expr_stmt|;
name|children
operator|=
name|broker
operator|.
name|getStructuralIndex
argument_list|()
operator|.
name|findDescendantsByTagName
argument_list|(
name|ElementValue
operator|.
name|ELEMENT
argument_list|,
operator|new
name|QName
argument_list|(
literal|"section"
argument_list|,
literal|""
argument_list|)
argument_list|,
name|Constants
operator|.
name|DESCENDANT_SELF_AXIS
argument_list|,
name|docs
argument_list|,
name|nestedSet
argument_list|,
operator|-
literal|1
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|children
operator|.
name|getLength
argument_list|()
argument_list|)
expr_stmt|;
name|nestedSet
operator|=
operator|(
name|ExtNodeSet
operator|)
name|executeQuery
argument_list|(
name|broker
argument_list|,
literal|"//section[@n = '1.1.2']"
argument_list|,
literal|1
argument_list|,
literal|null
argument_list|)
expr_stmt|;
name|children
operator|=
name|broker
operator|.
name|getStructuralIndex
argument_list|()
operator|.
name|findDescendantsByTagName
argument_list|(
name|ElementValue
operator|.
name|ATTRIBUTE
argument_list|,
operator|new
name|QName
argument_list|(
literal|"n"
argument_list|,
literal|""
argument_list|)
argument_list|,
name|Constants
operator|.
name|ATTRIBUTE_AXIS
argument_list|,
name|docs
argument_list|,
name|nestedSet
argument_list|,
operator|-
literal|1
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|children
operator|.
name|getLength
argument_list|()
argument_list|)
expr_stmt|;
name|nestedSet
operator|=
operator|(
name|ExtNodeSet
operator|)
name|executeQuery
argument_list|(
name|broker
argument_list|,
literal|"//section[@n = '1.1']"
argument_list|,
literal|1
argument_list|,
literal|null
argument_list|)
expr_stmt|;
name|children
operator|=
name|broker
operator|.
name|getStructuralIndex
argument_list|()
operator|.
name|findDescendantsByTagName
argument_list|(
name|ElementValue
operator|.
name|ATTRIBUTE
argument_list|,
operator|new
name|QName
argument_list|(
literal|"n"
argument_list|,
literal|""
argument_list|)
argument_list|,
name|Constants
operator|.
name|DESCENDANT_ATTRIBUTE_AXIS
argument_list|,
name|docs
argument_list|,
name|nestedSet
argument_list|,
operator|-
literal|1
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|7
argument_list|,
name|children
operator|.
name|getLength
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|virtualNodeSet_1
parameter_list|()
throws|throws
name|XPathException
throws|,
name|SAXException
throws|,
name|PermissionDeniedException
block|{
name|executeQuery
argument_list|(
name|broker
argument_list|,
literal|"//*/LINE"
argument_list|,
literal|9492
argument_list|,
literal|null
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|virtualNodeSet_2
parameter_list|()
throws|throws
name|XPathException
throws|,
name|SAXException
throws|,
name|PermissionDeniedException
block|{
name|executeQuery
argument_list|(
name|broker
argument_list|,
literal|"//*/LINE/*"
argument_list|,
literal|61
argument_list|,
literal|null
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|virtualNodeSet_3
parameter_list|()
throws|throws
name|XPathException
throws|,
name|SAXException
throws|,
name|PermissionDeniedException
block|{
name|executeQuery
argument_list|(
name|broker
argument_list|,
literal|"//*/LINE/text()"
argument_list|,
literal|9485
argument_list|,
literal|null
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|virtualNodeSet_4
parameter_list|()
throws|throws
name|XPathException
throws|,
name|SAXException
throws|,
name|PermissionDeniedException
block|{
name|executeQuery
argument_list|(
name|broker
argument_list|,
literal|"//SCENE/*/LINE"
argument_list|,
literal|9464
argument_list|,
literal|null
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|virtualNodeSet_5
parameter_list|()
throws|throws
name|XPathException
throws|,
name|SAXException
throws|,
name|PermissionDeniedException
block|{
name|executeQuery
argument_list|(
name|broker
argument_list|,
literal|"//SCENE/*[fn:contains(LINE, 'spirit')]"
argument_list|,
literal|30
argument_list|,
literal|null
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|virtualNodeSet_6
parameter_list|()
throws|throws
name|XPathException
throws|,
name|SAXException
throws|,
name|PermissionDeniedException
block|{
name|executeQuery
argument_list|(
name|broker
argument_list|,
literal|"//SCENE/*[fn:contains(LINE, 'the')]"
argument_list|,
literal|1313
argument_list|,
literal|null
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|virtualNodeSet_7
parameter_list|()
throws|throws
name|XPathException
throws|,
name|SAXException
throws|,
name|PermissionDeniedException
block|{
name|executeQuery
argument_list|(
name|broker
argument_list|,
literal|"//SCENE/*/LINE[fn:contains(., 'the')]"
argument_list|,
literal|3198
argument_list|,
literal|null
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|virtualNodeSet_8
parameter_list|()
throws|throws
name|XPathException
throws|,
name|SAXException
throws|,
name|PermissionDeniedException
block|{
name|executeQuery
argument_list|(
name|broker
argument_list|,
literal|"//SCENE[fn:contains(., 'spirit')]/ancestor::*"
argument_list|,
literal|16
argument_list|,
literal|null
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|virtualNodeSet_9
parameter_list|()
throws|throws
name|XPathException
throws|,
name|SAXException
throws|,
name|PermissionDeniedException
block|{
name|executeQuery
argument_list|(
name|broker
argument_list|,
literal|"for $s in //SCENE/*[fn:contains(LINE, 'the')] return fn:node-name($s)"
argument_list|,
literal|1313
argument_list|,
literal|null
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|virtualNodeSet_10
parameter_list|()
throws|throws
name|XPathException
throws|,
name|SAXException
throws|,
name|PermissionDeniedException
block|{
name|executeQuery
argument_list|(
name|broker
argument_list|,
literal|"//SPEECH[fn:contains(LINE, 'perturbed spirit')]/preceding-sibling::*"
argument_list|,
literal|65
argument_list|,
literal|null
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|virtualNodeSet_11
parameter_list|()
throws|throws
name|XPathException
throws|,
name|SAXException
throws|,
name|PermissionDeniedException
block|{
name|executeQuery
argument_list|(
name|broker
argument_list|,
literal|"//SPEECH[fn:contains(LINE, 'perturbed spirit')]/following-sibling::*"
argument_list|,
literal|1
argument_list|,
literal|null
argument_list|)
expr_stmt|;
block|}
specifier|private
specifier|static
name|Sequence
name|executeQuery
parameter_list|(
specifier|final
name|DBBroker
name|broker
parameter_list|,
specifier|final
name|String
name|query
parameter_list|,
specifier|final
name|int
name|expected
parameter_list|,
specifier|final
name|String
name|expectedResult
parameter_list|)
throws|throws
name|XPathException
throws|,
name|SAXException
throws|,
name|PermissionDeniedException
block|{
specifier|final
name|XQuery
name|xquery
init|=
name|broker
operator|.
name|getBrokerPool
argument_list|()
operator|.
name|getXQueryService
argument_list|()
decl_stmt|;
specifier|final
name|Sequence
name|seq
init|=
name|xquery
operator|.
name|execute
argument_list|(
name|broker
argument_list|,
name|query
argument_list|,
literal|null
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|expected
argument_list|,
name|seq
operator|.
name|getItemCount
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|expectedResult
operator|!=
literal|null
condition|)
block|{
specifier|final
name|Item
name|item
init|=
name|seq
operator|.
name|itemAt
argument_list|(
literal|0
argument_list|)
decl_stmt|;
specifier|final
name|String
name|value
init|=
name|serialize
argument_list|(
name|broker
argument_list|,
name|item
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|expectedResult
argument_list|,
name|value
argument_list|)
expr_stmt|;
block|}
return|return
name|seq
return|;
block|}
specifier|private
specifier|static
name|String
name|serialize
parameter_list|(
specifier|final
name|DBBroker
name|broker
parameter_list|,
specifier|final
name|Item
name|item
parameter_list|)
throws|throws
name|SAXException
throws|,
name|XPathException
block|{
specifier|final
name|Serializer
name|serializer
init|=
name|broker
operator|.
name|getSerializer
argument_list|()
decl_stmt|;
name|serializer
operator|.
name|reset
argument_list|()
expr_stmt|;
specifier|final
name|String
name|value
decl_stmt|;
if|if
condition|(
name|Type
operator|.
name|subTypeOf
argument_list|(
name|item
operator|.
name|getType
argument_list|()
argument_list|,
name|Type
operator|.
name|NODE
argument_list|)
condition|)
block|{
name|value
operator|=
name|serializer
operator|.
name|serialize
argument_list|(
operator|(
name|NodeValue
operator|)
name|item
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|value
operator|=
name|item
operator|.
name|getStringValue
argument_list|()
expr_stmt|;
block|}
return|return
name|value
return|;
block|}
annotation|@
name|ClassRule
specifier|public
specifier|static
specifier|final
name|ExistEmbeddedServer
name|existEmbeddedServer
init|=
operator|new
name|ExistEmbeddedServer
argument_list|()
decl_stmt|;
annotation|@
name|BeforeClass
specifier|public
specifier|static
name|void
name|setUp
parameter_list|()
throws|throws
name|Exception
block|{
specifier|final
name|BrokerPool
name|pool
init|=
name|existEmbeddedServer
operator|.
name|getBrokerPool
argument_list|()
decl_stmt|;
specifier|final
name|TransactionManager
name|transact
init|=
name|pool
operator|.
name|getTransactionManager
argument_list|()
decl_stmt|;
try|try
init|(
specifier|final
name|Txn
name|transaction
init|=
name|transact
operator|.
name|beginTransaction
argument_list|()
init|)
block|{
name|broker
operator|=
name|pool
operator|.
name|get
argument_list|(
name|Optional
operator|.
name|of
argument_list|(
name|pool
operator|.
name|getSecurityManager
argument_list|()
operator|.
name|getSystemSubject
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|root
operator|=
name|broker
operator|.
name|getOrCreateCollection
argument_list|(
name|transaction
argument_list|,
name|XmldbURI
operator|.
name|create
argument_list|(
name|XmldbURI
operator|.
name|ROOT_COLLECTION
operator|+
literal|"/test"
argument_list|)
argument_list|)
expr_stmt|;
name|broker
operator|.
name|saveCollection
argument_list|(
name|transaction
argument_list|,
name|root
argument_list|)
expr_stmt|;
specifier|final
name|String
name|existHome
init|=
name|System
operator|.
name|getProperty
argument_list|(
literal|"exist.home"
argument_list|)
decl_stmt|;
name|Path
name|existDir
init|=
name|existHome
operator|==
literal|null
condition|?
name|Paths
operator|.
name|get
argument_list|(
literal|"."
argument_list|)
else|:
name|Paths
operator|.
name|get
argument_list|(
name|existHome
argument_list|)
decl_stmt|;
name|existDir
operator|=
name|existDir
operator|.
name|normalize
argument_list|()
expr_stmt|;
specifier|final
name|String
name|directory
init|=
literal|"samples/shakespeare"
decl_stmt|;
specifier|final
name|Path
name|dir
init|=
name|existDir
operator|.
name|resolve
argument_list|(
name|directory
argument_list|)
decl_stmt|;
comment|// store some documents.
for|for
control|(
specifier|final
name|Path
name|f
range|:
name|FileUtils
operator|.
name|list
argument_list|(
name|dir
argument_list|,
name|XMLFilenameFilter
operator|.
name|asPredicate
argument_list|()
argument_list|)
control|)
block|{
specifier|final
name|IndexInfo
name|info
init|=
name|root
operator|.
name|validateXMLResource
argument_list|(
name|transaction
argument_list|,
name|broker
argument_list|,
name|XmldbURI
operator|.
name|create
argument_list|(
name|FileUtils
operator|.
name|fileName
argument_list|(
name|f
argument_list|)
argument_list|)
argument_list|,
operator|new
name|InputSource
argument_list|(
name|f
operator|.
name|toUri
argument_list|()
operator|.
name|toASCIIString
argument_list|()
argument_list|)
argument_list|)
decl_stmt|;
name|root
operator|.
name|store
argument_list|(
name|transaction
argument_list|,
name|broker
argument_list|,
name|info
argument_list|,
operator|new
name|InputSource
argument_list|(
name|f
operator|.
name|toUri
argument_list|()
operator|.
name|toASCIIString
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
specifier|final
name|IndexInfo
name|info
init|=
name|root
operator|.
name|validateXMLResource
argument_list|(
name|transaction
argument_list|,
name|broker
argument_list|,
name|XmldbURI
operator|.
name|create
argument_list|(
literal|"nested.xml"
argument_list|)
argument_list|,
name|NESTED_XML
argument_list|)
decl_stmt|;
name|root
operator|.
name|store
argument_list|(
name|transaction
argument_list|,
name|broker
argument_list|,
name|info
argument_list|,
name|NESTED_XML
argument_list|)
expr_stmt|;
name|transact
operator|.
name|commit
argument_list|(
name|transaction
argument_list|)
expr_stmt|;
comment|//for the tests
name|docs
operator|=
name|root
operator|.
name|allDocs
argument_list|(
name|broker
argument_list|,
operator|new
name|DefaultDocumentSet
argument_list|()
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|seqSpeech
operator|=
name|executeQuery
argument_list|(
name|broker
argument_list|,
literal|"//SPEECH"
argument_list|,
literal|2628
argument_list|,
literal|null
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
if|if
condition|(
name|broker
operator|!=
literal|null
condition|)
block|{
name|broker
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
if|if
condition|(
name|pool
operator|!=
literal|null
condition|)
block|{
name|BrokerPool
operator|.
name|stopAll
argument_list|(
literal|false
argument_list|)
expr_stmt|;
block|}
throw|throw
name|e
throw|;
block|}
block|}
annotation|@
name|AfterClass
specifier|public
specifier|static
name|void
name|tearDown
parameter_list|()
throws|throws
name|PermissionDeniedException
throws|,
name|IOException
throws|,
name|TriggerException
throws|,
name|TransactionException
block|{
specifier|final
name|BrokerPool
name|pool
init|=
name|existEmbeddedServer
operator|.
name|getBrokerPool
argument_list|()
decl_stmt|;
specifier|final
name|TransactionManager
name|transact
init|=
name|pool
operator|.
name|getTransactionManager
argument_list|()
decl_stmt|;
try|try
init|(
specifier|final
name|Txn
name|transaction
init|=
name|transact
operator|.
name|beginTransaction
argument_list|()
init|)
block|{
name|root
operator|=
name|broker
operator|.
name|getOrCreateCollection
argument_list|(
name|transaction
argument_list|,
name|XmldbURI
operator|.
name|create
argument_list|(
name|XmldbURI
operator|.
name|ROOT_COLLECTION
operator|+
literal|"/test"
argument_list|)
argument_list|)
expr_stmt|;
name|broker
operator|.
name|removeCollection
argument_list|(
name|transaction
argument_list|,
name|root
argument_list|)
expr_stmt|;
name|transact
operator|.
name|commit
argument_list|(
name|transaction
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
if|if
condition|(
name|broker
operator|!=
literal|null
condition|)
block|{
name|broker
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
block|}
block|}
block|}
end_class

end_unit

