begin_unit|revision:1.0.0;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * eXist Open Source Native XML Database  * Copyright (C) 2001-2017 The eXist Project  * http://exist-db.org  *  * This program is free software; you can redistribute it and/or  * modify it under the terms of the GNU Lesser General Public License  * as published by the Free Software Foundation; either version 2  * of the License, or (at your option) any later version.  *  * This program is distributed in the hope that it will be useful,  * but WITHOUT ANY WARRANTY; without even the implied warranty of  * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the  * GNU Lesser General Public License for more details.  *  * You should have received a copy of the GNU Lesser General Public  * License along with this library; if not, write to the Free Software  * Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA  02110-1301  USA  */
end_comment

begin_package
package|package
name|org
operator|.
name|exist
operator|.
name|dom
operator|.
name|persistent
package|;
end_package

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|collections
operator|.
name|Collection
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Iterator
import|;
end_import

begin_import
import|import static
name|junit
operator|.
name|framework
operator|.
name|TestCase
operator|.
name|assertFalse
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|easymock
operator|.
name|EasyMock
operator|.
name|createMock
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|easymock
operator|.
name|EasyMock
operator|.
name|expect
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|easymock
operator|.
name|EasyMock
operator|.
name|replay
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|easymock
operator|.
name|EasyMock
operator|.
name|verify
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertTrue
import|;
end_import

begin_comment
comment|/**  * @author Adam Retter<adam@evolvedbinary.com>  */
end_comment

begin_class
specifier|public
class|class
name|DefaultDocumentSetTest
block|{
annotation|@
name|Test
specifier|public
name|void
name|contains_leftRight
parameter_list|()
block|{
specifier|final
name|Collection
name|col
init|=
name|mockCollection
argument_list|(
literal|1
argument_list|)
decl_stmt|;
specifier|final
name|DocumentImpl
name|doc1
init|=
name|mockDoc
argument_list|(
name|col
argument_list|,
literal|1
argument_list|)
decl_stmt|;
specifier|final
name|DocumentImpl
name|doc6
init|=
name|mockDoc
argument_list|(
name|col
argument_list|,
literal|6
argument_list|)
decl_stmt|;
specifier|final
name|DocumentImpl
name|doc9
init|=
name|mockDoc
argument_list|(
name|col
argument_list|,
literal|9
argument_list|)
decl_stmt|;
specifier|final
name|DocumentImpl
name|doc15
init|=
name|mockDoc
argument_list|(
name|col
argument_list|,
literal|15
argument_list|)
decl_stmt|;
specifier|final
name|DocumentImpl
name|doc34
init|=
name|mockDoc
argument_list|(
name|col
argument_list|,
literal|34
argument_list|)
decl_stmt|;
name|replay
argument_list|(
name|col
argument_list|,
name|doc1
argument_list|,
name|doc6
argument_list|,
name|doc9
argument_list|,
name|doc15
argument_list|,
name|doc34
argument_list|)
expr_stmt|;
specifier|final
name|DefaultDocumentSet
name|set1
init|=
operator|new
name|DefaultDocumentSet
argument_list|()
decl_stmt|;
name|set1
operator|.
name|add
argument_list|(
name|doc1
argument_list|)
expr_stmt|;
name|set1
operator|.
name|add
argument_list|(
name|doc6
argument_list|)
expr_stmt|;
name|set1
operator|.
name|add
argument_list|(
name|doc9
argument_list|)
expr_stmt|;
specifier|final
name|DefaultDocumentSet
name|set2
init|=
operator|new
name|DefaultDocumentSet
argument_list|()
decl_stmt|;
name|set2
operator|.
name|add
argument_list|(
name|doc1
argument_list|)
expr_stmt|;
name|set2
operator|.
name|add
argument_list|(
name|doc6
argument_list|)
expr_stmt|;
name|set2
operator|.
name|add
argument_list|(
name|doc9
argument_list|)
expr_stmt|;
name|set2
operator|.
name|add
argument_list|(
name|doc15
argument_list|)
expr_stmt|;
name|set2
operator|.
name|add
argument_list|(
name|doc34
argument_list|)
expr_stmt|;
comment|// functions under test
name|assertTrue
argument_list|(
name|set2
operator|.
name|contains
argument_list|(
name|set1
argument_list|)
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|set1
operator|.
name|contains
argument_list|(
name|set2
argument_list|)
argument_list|)
expr_stmt|;
name|verify
argument_list|(
name|col
argument_list|,
name|doc1
argument_list|,
name|doc6
argument_list|,
name|doc9
argument_list|,
name|doc15
argument_list|,
name|doc34
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|contains_noMatch
parameter_list|()
block|{
specifier|final
name|Collection
name|col
init|=
name|mockCollection
argument_list|(
literal|1
argument_list|)
decl_stmt|;
specifier|final
name|DocumentImpl
name|doc1
init|=
name|mockDoc
argument_list|(
name|col
argument_list|,
literal|1
argument_list|)
decl_stmt|;
specifier|final
name|DocumentImpl
name|doc6
init|=
name|mockDoc
argument_list|(
name|col
argument_list|,
literal|6
argument_list|)
decl_stmt|;
specifier|final
name|DocumentImpl
name|doc9
init|=
name|mockDoc
argument_list|(
name|col
argument_list|,
literal|9
argument_list|)
decl_stmt|;
specifier|final
name|DocumentImpl
name|doc15
init|=
name|mockDoc
argument_list|(
name|col
argument_list|,
literal|15
argument_list|)
decl_stmt|;
specifier|final
name|DocumentImpl
name|doc34
init|=
name|mockDoc
argument_list|(
name|col
argument_list|,
literal|34
argument_list|)
decl_stmt|;
name|replay
argument_list|(
name|col
argument_list|,
name|doc1
argument_list|,
name|doc6
argument_list|,
name|doc9
argument_list|,
name|doc15
argument_list|,
name|doc34
argument_list|)
expr_stmt|;
specifier|final
name|DefaultDocumentSet
name|set1
init|=
operator|new
name|DefaultDocumentSet
argument_list|()
decl_stmt|;
name|set1
operator|.
name|add
argument_list|(
name|doc1
argument_list|)
expr_stmt|;
name|set1
operator|.
name|add
argument_list|(
name|doc6
argument_list|)
expr_stmt|;
name|set1
operator|.
name|add
argument_list|(
name|doc9
argument_list|)
expr_stmt|;
specifier|final
name|DefaultDocumentSet
name|set2
init|=
operator|new
name|DefaultDocumentSet
argument_list|()
decl_stmt|;
name|set2
operator|.
name|add
argument_list|(
name|doc15
argument_list|)
expr_stmt|;
name|set2
operator|.
name|add
argument_list|(
name|doc34
argument_list|)
expr_stmt|;
comment|// functions under test
name|assertFalse
argument_list|(
name|set2
operator|.
name|contains
argument_list|(
name|set1
argument_list|)
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|set1
operator|.
name|contains
argument_list|(
name|set2
argument_list|)
argument_list|)
expr_stmt|;
name|verify
argument_list|(
name|col
argument_list|,
name|doc1
argument_list|,
name|doc6
argument_list|,
name|doc9
argument_list|,
name|doc15
argument_list|,
name|doc34
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|contains_emptySet
parameter_list|()
block|{
specifier|final
name|Collection
name|col
init|=
name|mockCollection
argument_list|(
literal|1
argument_list|)
decl_stmt|;
specifier|final
name|DocumentImpl
name|doc1
init|=
name|mockDoc
argument_list|(
name|col
argument_list|,
literal|1
argument_list|)
decl_stmt|;
specifier|final
name|DocumentImpl
name|doc6
init|=
name|mockDoc
argument_list|(
name|col
argument_list|,
literal|6
argument_list|)
decl_stmt|;
specifier|final
name|DocumentImpl
name|doc9
init|=
name|mockDoc
argument_list|(
name|col
argument_list|,
literal|9
argument_list|)
decl_stmt|;
specifier|final
name|DocumentImpl
name|doc15
init|=
name|mockDoc
argument_list|(
name|col
argument_list|,
literal|15
argument_list|)
decl_stmt|;
specifier|final
name|DocumentImpl
name|doc34
init|=
name|mockDoc
argument_list|(
name|col
argument_list|,
literal|34
argument_list|)
decl_stmt|;
name|replay
argument_list|(
name|col
argument_list|,
name|doc1
argument_list|,
name|doc6
argument_list|,
name|doc9
argument_list|,
name|doc15
argument_list|,
name|doc34
argument_list|)
expr_stmt|;
specifier|final
name|DocumentSet
name|set1
init|=
name|DocumentSet
operator|.
name|EMPTY_DOCUMENT_SET
decl_stmt|;
specifier|final
name|DefaultDocumentSet
name|set2
init|=
operator|new
name|DefaultDocumentSet
argument_list|()
decl_stmt|;
name|set2
operator|.
name|add
argument_list|(
name|doc15
argument_list|)
expr_stmt|;
name|set2
operator|.
name|add
argument_list|(
name|doc34
argument_list|)
expr_stmt|;
comment|// functions under test
name|assertTrue
argument_list|(
name|set2
operator|.
name|contains
argument_list|(
name|set1
argument_list|)
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|set1
operator|.
name|contains
argument_list|(
name|set2
argument_list|)
argument_list|)
expr_stmt|;
name|verify
argument_list|(
name|col
argument_list|,
name|doc1
argument_list|,
name|doc6
argument_list|,
name|doc9
argument_list|,
name|doc15
argument_list|,
name|doc34
argument_list|)
expr_stmt|;
block|}
specifier|private
specifier|final
name|Collection
name|mockCollection
parameter_list|(
specifier|final
name|int
name|colId
parameter_list|)
block|{
specifier|final
name|Collection
name|col
init|=
name|createMock
argument_list|(
name|Collection
operator|.
name|class
argument_list|)
decl_stmt|;
name|expect
argument_list|(
name|col
operator|.
name|compareTo
argument_list|(
name|col
argument_list|)
argument_list|)
operator|.
name|andReturn
argument_list|(
literal|0
argument_list|)
operator|.
name|anyTimes
argument_list|()
expr_stmt|;
name|expect
argument_list|(
name|col
operator|.
name|getId
argument_list|()
argument_list|)
operator|.
name|andReturn
argument_list|(
name|colId
argument_list|)
operator|.
name|anyTimes
argument_list|()
expr_stmt|;
return|return
name|col
return|;
block|}
specifier|private
specifier|final
name|DocumentImpl
name|mockDoc
parameter_list|(
specifier|final
name|Collection
name|collection
parameter_list|,
specifier|final
name|int
name|docId
parameter_list|)
block|{
specifier|final
name|DocumentImpl
name|doc
init|=
name|createMock
argument_list|(
name|DocumentImpl
operator|.
name|class
argument_list|)
decl_stmt|;
name|expect
argument_list|(
name|doc
operator|.
name|getCollection
argument_list|()
argument_list|)
operator|.
name|andReturn
argument_list|(
name|collection
argument_list|)
operator|.
name|anyTimes
argument_list|()
expr_stmt|;
name|expect
argument_list|(
name|doc
operator|.
name|getDocId
argument_list|()
argument_list|)
operator|.
name|andReturn
argument_list|(
name|docId
argument_list|)
operator|.
name|anyTimes
argument_list|()
expr_stmt|;
return|return
name|doc
return|;
block|}
specifier|private
specifier|final
name|DocumentSet
name|testableDocumentSet
parameter_list|(
specifier|final
name|DocumentImpl
modifier|...
name|docs
parameter_list|)
block|{
specifier|final
name|DocumentSet
name|documentSet
init|=
name|createMock
argument_list|(
name|DocumentSet
operator|.
name|class
argument_list|)
decl_stmt|;
name|expect
argument_list|(
name|documentSet
operator|.
name|getDocumentCount
argument_list|()
argument_list|)
operator|.
name|andReturn
argument_list|(
name|docs
operator|.
name|length
argument_list|)
expr_stmt|;
name|expect
argument_list|(
name|documentSet
operator|.
name|getDocumentIterator
argument_list|()
argument_list|)
operator|.
name|andReturn
argument_list|(
operator|new
name|Iterator
argument_list|<
name|DocumentImpl
argument_list|>
argument_list|()
block|{
specifier|private
name|int
name|idx
init|=
literal|0
decl_stmt|;
annotation|@
name|Override
specifier|public
name|boolean
name|hasNext
parameter_list|()
block|{
return|return
name|idx
operator|<
name|docs
operator|.
name|length
return|;
block|}
annotation|@
name|Override
specifier|public
name|DocumentImpl
name|next
parameter_list|()
block|{
return|return
name|docs
index|[
name|idx
operator|++
index|]
return|;
block|}
block|}
argument_list|)
operator|.
name|anyTimes
argument_list|()
expr_stmt|;
return|return
name|documentSet
return|;
block|}
block|}
end_class

end_unit

