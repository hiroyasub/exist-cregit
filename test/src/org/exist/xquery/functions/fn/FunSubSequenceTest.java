begin_unit|revision:1.0.0;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * eXist Open Source Native XML Database  * Copyright (C) 2001-2018 The eXist Project  * http://exist-db.org  *  * This program is free software; you can redistribute it and/or  * modify it under the terms of the GNU Lesser General Public License  * as published by the Free Software Foundation; either version 2  * of the License, or (at your option) any later version.  *  * This program is distributed in the hope that it will be useful,  * but WITHOUT ANY WARRANTY; without even the implied warranty of  * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the  * GNU Lesser General Public License for more details.  *  * You should have received a copy of the GNU Lesser General Public  * License along with this library; if not, write to the Free Software  * Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA  02110-1301  USA  */
end_comment

begin_package
package|package
name|org
operator|.
name|exist
operator|.
name|xquery
operator|.
name|functions
operator|.
name|fn
package|;
end_package

begin_import
import|import
name|com
operator|.
name|googlecode
operator|.
name|junittoolbox
operator|.
name|ParallelRunner
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|test
operator|.
name|ExistXmldbEmbeddedServer
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|ClassRule
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|runner
operator|.
name|RunWith
import|;
end_import

begin_import
import|import
name|org
operator|.
name|xmldb
operator|.
name|api
operator|.
name|base
operator|.
name|ResourceSet
import|;
end_import

begin_import
import|import
name|org
operator|.
name|xmldb
operator|.
name|api
operator|.
name|base
operator|.
name|XMLDBException
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertEquals
import|;
end_import

begin_class
annotation|@
name|RunWith
argument_list|(
name|ParallelRunner
operator|.
name|class
argument_list|)
specifier|public
class|class
name|FunSubSequenceTest
block|{
annotation|@
name|ClassRule
specifier|public
specifier|static
specifier|final
name|ExistXmldbEmbeddedServer
name|existEmbeddedServer
init|=
operator|new
name|ExistXmldbEmbeddedServer
argument_list|(
literal|true
argument_list|,
literal|true
argument_list|)
decl_stmt|;
annotation|@
name|Test
specifier|public
name|void
name|all_arity2
parameter_list|()
throws|throws
name|XMLDBException
block|{
specifier|final
name|ResourceSet
name|result
init|=
name|existEmbeddedServer
operator|.
name|executeQuery
argument_list|(
literal|"fn:subsequence((1 to 5), 1)"
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|"(1,2,3,4,5)"
argument_list|,
name|asSequenceStr
argument_list|(
name|result
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|all_arity3
parameter_list|()
throws|throws
name|XMLDBException
block|{
specifier|final
name|ResourceSet
name|result
init|=
name|existEmbeddedServer
operator|.
name|executeQuery
argument_list|(
literal|"fn:subsequence((1 to 5), 1, 5)"
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|"(1,2,3,4,5)"
argument_list|,
name|asSequenceStr
argument_list|(
name|result
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|firstItem_arity2
parameter_list|()
throws|throws
name|XMLDBException
block|{
specifier|final
name|ResourceSet
name|result
init|=
name|existEmbeddedServer
operator|.
name|executeQuery
argument_list|(
literal|"fn:subsequence((1), 1)"
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|"(1)"
argument_list|,
name|asSequenceStr
argument_list|(
name|result
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|firstItem_arity3
parameter_list|()
throws|throws
name|XMLDBException
block|{
specifier|final
name|ResourceSet
name|result
init|=
name|existEmbeddedServer
operator|.
name|executeQuery
argument_list|(
literal|"fn:subsequence((1 to 5), 1, 1)"
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|"(1)"
argument_list|,
name|asSequenceStr
argument_list|(
name|result
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|midItem_arity3
parameter_list|()
throws|throws
name|XMLDBException
block|{
specifier|final
name|ResourceSet
name|result
init|=
name|existEmbeddedServer
operator|.
name|executeQuery
argument_list|(
literal|"fn:subsequence((1 to 5), 2, 1)"
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|"(2)"
argument_list|,
name|asSequenceStr
argument_list|(
name|result
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|midItems_arity3
parameter_list|()
throws|throws
name|XMLDBException
block|{
specifier|final
name|ResourceSet
name|result
init|=
name|existEmbeddedServer
operator|.
name|executeQuery
argument_list|(
literal|"fn:subsequence((1 to 5), 3, 2)"
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|"(3,4)"
argument_list|,
name|asSequenceStr
argument_list|(
name|result
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|lastItem_arity2
parameter_list|()
throws|throws
name|XMLDBException
block|{
specifier|final
name|ResourceSet
name|result
init|=
name|existEmbeddedServer
operator|.
name|executeQuery
argument_list|(
literal|"fn:subsequence((1 to 5), 5)"
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|"(5)"
argument_list|,
name|asSequenceStr
argument_list|(
name|result
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|lastItem_arity3
parameter_list|()
throws|throws
name|XMLDBException
block|{
specifier|final
name|ResourceSet
name|result
init|=
name|existEmbeddedServer
operator|.
name|executeQuery
argument_list|(
literal|"fn:subsequence((1 to 5), 5, 1)"
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|"(5)"
argument_list|,
name|asSequenceStr
argument_list|(
name|result
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|allButFirst_arity2
parameter_list|()
throws|throws
name|XMLDBException
block|{
specifier|final
name|ResourceSet
name|result
init|=
name|existEmbeddedServer
operator|.
name|executeQuery
argument_list|(
literal|"fn:subsequence((1 to 5), 2)"
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|"(2,3,4,5)"
argument_list|,
name|asSequenceStr
argument_list|(
name|result
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|allButFirst_arity3
parameter_list|()
throws|throws
name|XMLDBException
block|{
specifier|final
name|ResourceSet
name|result
init|=
name|existEmbeddedServer
operator|.
name|executeQuery
argument_list|(
literal|"fn:subsequence((1 to 5), 2, 4)"
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|"(2,3,4,5)"
argument_list|,
name|asSequenceStr
argument_list|(
name|result
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|allButLast_arity3
parameter_list|()
throws|throws
name|XMLDBException
block|{
specifier|final
name|ResourceSet
name|result
init|=
name|existEmbeddedServer
operator|.
name|executeQuery
argument_list|(
literal|"fn:subsequence((1 to 5), 1, 4)"
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|"(1,2,3,4)"
argument_list|,
name|asSequenceStr
argument_list|(
name|result
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|outOfRange_arity2
parameter_list|()
throws|throws
name|XMLDBException
block|{
specifier|final
name|ResourceSet
name|result
init|=
name|existEmbeddedServer
operator|.
name|executeQuery
argument_list|(
literal|"fn:subsequence((1 to 5), 7)"
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|"()"
argument_list|,
name|asSequenceStr
argument_list|(
name|result
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|outOfRange_arity3
parameter_list|()
throws|throws
name|XMLDBException
block|{
specifier|final
name|ResourceSet
name|result
init|=
name|existEmbeddedServer
operator|.
name|executeQuery
argument_list|(
literal|"fn:subsequence((1 to 5), 7, 4)"
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|"()"
argument_list|,
name|asSequenceStr
argument_list|(
name|result
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|zeroStartingLoc_arity2
parameter_list|()
throws|throws
name|XMLDBException
block|{
specifier|final
name|ResourceSet
name|result
init|=
name|existEmbeddedServer
operator|.
name|executeQuery
argument_list|(
literal|"fn:subsequence((1 to 5), 0)"
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|"(1,2,3,4,5)"
argument_list|,
name|asSequenceStr
argument_list|(
name|result
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|zeroStartingLocToMid_arity3
parameter_list|()
throws|throws
name|XMLDBException
block|{
specifier|final
name|ResourceSet
name|result
init|=
name|existEmbeddedServer
operator|.
name|executeQuery
argument_list|(
literal|"fn:subsequence((1 to 5), 0, 3)"
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|"(1,2)"
argument_list|,
name|asSequenceStr
argument_list|(
name|result
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|zeroStartingLocToEnd_arity3
parameter_list|()
throws|throws
name|XMLDBException
block|{
specifier|final
name|ResourceSet
name|result
init|=
name|existEmbeddedServer
operator|.
name|executeQuery
argument_list|(
literal|"fn:subsequence((1 to 5), 0, 5)"
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|"(1,2,3,4)"
argument_list|,
name|asSequenceStr
argument_list|(
name|result
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|negativeStartingLoc_arity2
parameter_list|()
throws|throws
name|XMLDBException
block|{
specifier|final
name|ResourceSet
name|result
init|=
name|existEmbeddedServer
operator|.
name|executeQuery
argument_list|(
literal|"fn:subsequence((1 to 5), -2)"
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|"(1,2,3,4,5)"
argument_list|,
name|asSequenceStr
argument_list|(
name|result
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|negativeStartingLoc_arity3
parameter_list|()
throws|throws
name|XMLDBException
block|{
specifier|final
name|ResourceSet
name|result
init|=
name|existEmbeddedServer
operator|.
name|executeQuery
argument_list|(
literal|"fn:subsequence((1 to 5), -2, 5)"
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|"(1,2)"
argument_list|,
name|asSequenceStr
argument_list|(
name|result
argument_list|)
argument_list|)
expr_stmt|;
block|}
specifier|private
specifier|static
name|String
name|asSequenceStr
parameter_list|(
specifier|final
name|ResourceSet
name|result
parameter_list|)
throws|throws
name|XMLDBException
block|{
specifier|final
name|StringBuilder
name|builder
init|=
operator|new
name|StringBuilder
argument_list|()
decl_stmt|;
name|builder
operator|.
name|append
argument_list|(
literal|'('
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|result
operator|.
name|getSize
argument_list|()
condition|;
name|i
operator|++
control|)
block|{
name|builder
operator|.
name|append
argument_list|(
name|result
operator|.
name|getResource
argument_list|(
name|i
argument_list|)
operator|.
name|getContent
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|i
operator|+
literal|1
operator|<
name|result
operator|.
name|getSize
argument_list|()
condition|)
block|{
name|builder
operator|.
name|append
argument_list|(
literal|','
argument_list|)
expr_stmt|;
block|}
block|}
name|builder
operator|.
name|append
argument_list|(
literal|')'
argument_list|)
expr_stmt|;
return|return
name|builder
operator|.
name|toString
argument_list|()
return|;
block|}
block|}
end_class

end_unit

