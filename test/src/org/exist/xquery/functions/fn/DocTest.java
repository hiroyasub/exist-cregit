begin_unit|revision:1.0.0;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  *  eXist Open Source Native XML Database  *  Copyright (C) 2011 The eXist Project  *  http://exist-db.org  *  *  This program is free software; you can redistribute it and/or  *  modify it under the terms of the GNU Lesser General Public License  *  as published by the Free Software Foundation; either version 2  *  of the License, or (at your option) any later version.  *  *  This program is distributed in the hope that it will be useful,  *  but WITHOUT ANY WARRANTY; without even the implied warranty of  *  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the  *  GNU Lesser General Public License for more details.  *  *  You should have received a copy of the GNU Lesser General Public  *  License along with this library; if not, write to the Free Software  *  Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA  02110-1301  USA  *  *  $Id$  */
end_comment

begin_package
package|package
name|org
operator|.
name|exist
operator|.
name|xquery
operator|.
name|functions
operator|.
name|fn
package|;
end_package

begin_import
import|import
name|com
operator|.
name|evolvedbinary
operator|.
name|j8fu
operator|.
name|Either
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|EXistException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|Namespaces
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|dom
operator|.
name|memtree
operator|.
name|DocumentImpl
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|dom
operator|.
name|memtree
operator|.
name|SAXAdapter
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|security
operator|.
name|PermissionDeniedException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|storage
operator|.
name|BrokerPool
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|storage
operator|.
name|DBBroker
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|test
operator|.
name|ExistXmldbEmbeddedServer
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|xquery
operator|.
name|CompiledXQuery
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|xquery
operator|.
name|XQuery
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|xquery
operator|.
name|XQueryContext
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|xquery
operator|.
name|value
operator|.
name|AnyURIValue
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|xquery
operator|.
name|value
operator|.
name|Sequence
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|*
import|;
end_import

begin_import
import|import static
name|com
operator|.
name|evolvedbinary
operator|.
name|j8fu
operator|.
name|Either
operator|.
name|Left
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|*
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|xmldb
operator|.
name|EXistResource
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|xmldb
operator|.
name|LocalXMLResource
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|xquery
operator|.
name|XPathException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|w3c
operator|.
name|dom
operator|.
name|Node
import|;
end_import

begin_import
import|import
name|org
operator|.
name|xml
operator|.
name|sax
operator|.
name|InputSource
import|;
end_import

begin_import
import|import
name|org
operator|.
name|xml
operator|.
name|sax
operator|.
name|SAXException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|xml
operator|.
name|sax
operator|.
name|XMLReader
import|;
end_import

begin_import
import|import
name|org
operator|.
name|xmldb
operator|.
name|api
operator|.
name|base
operator|.
name|Collection
import|;
end_import

begin_import
import|import
name|org
operator|.
name|xmldb
operator|.
name|api
operator|.
name|base
operator|.
name|Resource
import|;
end_import

begin_import
import|import
name|org
operator|.
name|xmldb
operator|.
name|api
operator|.
name|modules
operator|.
name|CollectionManagementService
import|;
end_import

begin_import
import|import
name|org
operator|.
name|xmldb
operator|.
name|api
operator|.
name|base
operator|.
name|ResourceSet
import|;
end_import

begin_import
import|import
name|org
operator|.
name|xmldb
operator|.
name|api
operator|.
name|base
operator|.
name|XMLDBException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|xmlunit
operator|.
name|builder
operator|.
name|DiffBuilder
import|;
end_import

begin_import
import|import
name|org
operator|.
name|xmlunit
operator|.
name|builder
operator|.
name|Input
import|;
end_import

begin_import
import|import
name|org
operator|.
name|xmlunit
operator|.
name|diff
operator|.
name|Diff
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|xml
operator|.
name|parsers
operator|.
name|ParserConfigurationException
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|xml
operator|.
name|parsers
operator|.
name|SAXParser
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|xml
operator|.
name|parsers
operator|.
name|SAXParserFactory
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|xml
operator|.
name|transform
operator|.
name|Source
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|Reader
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|StringReader
import|;
end_import

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|URI
import|;
end_import

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|URISyntaxException
import|;
end_import

begin_comment
comment|/**  *  * @author Joe Wicentowski  * @author<a href="mailto:shabanovd@gmail.com">Dmitriy Shabanov</a>  * @author Adam Retter  */
end_comment

begin_class
specifier|public
class|class
name|DocTest
block|{
annotation|@
name|ClassRule
specifier|public
specifier|static
specifier|final
name|ExistXmldbEmbeddedServer
name|existEmbeddedServer
init|=
operator|new
name|ExistXmldbEmbeddedServer
argument_list|(
literal|false
argument_list|,
literal|true
argument_list|)
decl_stmt|;
specifier|private
specifier|static
name|SAXParserFactory
name|saxParserFactory
init|=
name|SAXParserFactory
operator|.
name|newInstance
argument_list|()
decl_stmt|;
static|static
block|{
name|saxParserFactory
operator|.
name|setNamespaceAware
argument_list|(
literal|true
argument_list|)
expr_stmt|;
block|}
specifier|private
name|Collection
name|test
init|=
literal|null
decl_stmt|;
annotation|@
name|Before
specifier|public
name|void
name|setUp
parameter_list|()
throws|throws
name|XMLDBException
block|{
specifier|final
name|CollectionManagementService
name|cms
init|=
operator|(
name|CollectionManagementService
operator|)
name|existEmbeddedServer
operator|.
name|getRoot
argument_list|()
operator|.
name|getService
argument_list|(
literal|"CollectionManagementService"
argument_list|,
literal|"1.0"
argument_list|)
decl_stmt|;
comment|//Creates the 'test' collection
name|test
operator|=
name|cms
operator|.
name|createCollection
argument_list|(
literal|"test"
argument_list|)
expr_stmt|;
name|assertNotNull
argument_list|(
name|test
argument_list|)
expr_stmt|;
name|storeResource
argument_list|(
name|test
argument_list|,
literal|"test.xq"
argument_list|,
literal|"BinaryResource"
argument_list|,
literal|"application/xquery"
argument_list|,
literal|"doc('test.xml')"
argument_list|)
expr_stmt|;
name|storeResource
argument_list|(
name|test
argument_list|,
literal|"test1.xq"
argument_list|,
literal|"BinaryResource"
argument_list|,
literal|"application/xquery"
argument_list|,
literal|"doc('/test.xml')"
argument_list|)
expr_stmt|;
name|storeResource
argument_list|(
name|existEmbeddedServer
operator|.
name|getRoot
argument_list|()
argument_list|,
literal|"test.xml"
argument_list|,
literal|"XMLResource"
argument_list|,
literal|null
argument_list|,
literal|"<x/>"
argument_list|)
expr_stmt|;
name|storeResource
argument_list|(
name|test
argument_list|,
literal|"test.xml"
argument_list|,
literal|"XMLResource"
argument_list|,
literal|null
argument_list|,
literal|"<y/>"
argument_list|)
expr_stmt|;
block|}
annotation|@
name|After
specifier|public
name|void
name|tearDown
parameter_list|()
throws|throws
name|XMLDBException
block|{
specifier|final
name|CollectionManagementService
name|cms
init|=
operator|(
name|CollectionManagementService
operator|)
name|existEmbeddedServer
operator|.
name|getRoot
argument_list|()
operator|.
name|getService
argument_list|(
literal|"CollectionManagementService"
argument_list|,
literal|"1.0"
argument_list|)
decl_stmt|;
comment|//Creates the 'test' collection
name|cms
operator|.
name|removeCollection
argument_list|(
literal|"test"
argument_list|)
expr_stmt|;
name|test
operator|=
literal|null
expr_stmt|;
name|existEmbeddedServer
operator|.
name|getRoot
argument_list|()
operator|.
name|removeResource
argument_list|(
name|existEmbeddedServer
operator|.
name|getRoot
argument_list|()
operator|.
name|getResource
argument_list|(
literal|"test.xml"
argument_list|)
argument_list|)
expr_stmt|;
block|}
specifier|private
name|void
name|storeResource
parameter_list|(
specifier|final
name|Collection
name|col
parameter_list|,
specifier|final
name|String
name|fileName
parameter_list|,
specifier|final
name|String
name|type
parameter_list|,
specifier|final
name|String
name|mimeType
parameter_list|,
specifier|final
name|String
name|content
parameter_list|)
throws|throws
name|XMLDBException
block|{
name|Resource
name|res
init|=
name|col
operator|.
name|createResource
argument_list|(
name|fileName
argument_list|,
name|type
argument_list|)
decl_stmt|;
name|res
operator|.
name|setContent
argument_list|(
name|content
argument_list|)
expr_stmt|;
if|if
condition|(
name|mimeType
operator|!=
literal|null
condition|)
block|{
operator|(
operator|(
name|EXistResource
operator|)
name|res
operator|)
operator|.
name|setMimeType
argument_list|(
name|mimeType
argument_list|)
expr_stmt|;
block|}
name|col
operator|.
name|storeResource
argument_list|(
name|res
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testURIResolveWithEval
parameter_list|()
throws|throws
name|XPathException
throws|,
name|XMLDBException
block|{
name|String
name|query
init|=
literal|"util:eval(xs:anyURI('/db/test/test.xq'), false(), ())"
decl_stmt|;
name|ResourceSet
name|result
init|=
name|existEmbeddedServer
operator|.
name|executeQuery
argument_list|(
name|query
argument_list|)
decl_stmt|;
name|LocalXMLResource
name|res
init|=
operator|(
name|LocalXMLResource
operator|)
name|result
operator|.
name|getResource
argument_list|(
literal|0
argument_list|)
decl_stmt|;
name|assertNotNull
argument_list|(
name|res
argument_list|)
expr_stmt|;
name|Node
name|n
init|=
name|res
operator|.
name|getContentAsDOM
argument_list|()
decl_stmt|;
name|assertEquals
argument_list|(
literal|"y"
argument_list|,
name|n
operator|.
name|getLocalName
argument_list|()
argument_list|)
expr_stmt|;
name|query
operator|=
literal|"util:eval(xs:anyURI('/db/test/test1.xq'), false(), ())"
expr_stmt|;
name|result
operator|=
name|existEmbeddedServer
operator|.
name|executeQuery
argument_list|(
name|query
argument_list|)
expr_stmt|;
name|res
operator|=
operator|(
name|LocalXMLResource
operator|)
name|result
operator|.
name|getResource
argument_list|(
literal|0
argument_list|)
expr_stmt|;
name|assertNotNull
argument_list|(
name|res
argument_list|)
expr_stmt|;
name|n
operator|=
name|res
operator|.
name|getContentAsDOM
argument_list|()
expr_stmt|;
name|assertEquals
argument_list|(
literal|"x"
argument_list|,
name|n
operator|.
name|getLocalName
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|doc_dynamicallyAvailableDocument_absoluteUri
parameter_list|()
throws|throws
name|XPathException
throws|,
name|EXistException
throws|,
name|PermissionDeniedException
block|{
specifier|final
name|BrokerPool
name|pool
init|=
name|BrokerPool
operator|.
name|getInstance
argument_list|()
decl_stmt|;
specifier|final
name|String
name|doc
init|=
literal|"<timestamp>"
operator|+
name|System
operator|.
name|currentTimeMillis
argument_list|()
operator|+
literal|"</timestamp>"
decl_stmt|;
specifier|final
name|String
name|docUri
init|=
literal|"http://from-dynamic-context/doc1"
decl_stmt|;
specifier|final
name|String
name|query
init|=
literal|"fn:doc('"
operator|+
name|docUri
operator|+
literal|"')"
decl_stmt|;
try|try
init|(
specifier|final
name|DBBroker
name|broker
init|=
name|pool
operator|.
name|getBroker
argument_list|()
init|)
block|{
specifier|final
name|XQueryContext
name|context
init|=
operator|new
name|XQueryContext
argument_list|(
name|pool
argument_list|)
decl_stmt|;
name|context
operator|.
name|addDynamicallyAvailableDocument
argument_list|(
name|docUri
argument_list|,
parameter_list|(
name|broker2
parameter_list|,
name|transaction
parameter_list|,
name|uri
parameter_list|)
lambda|->
name|asInMemoryDocument
argument_list|(
name|doc
argument_list|)
argument_list|)
expr_stmt|;
specifier|final
name|XQuery
name|xqueryService
init|=
name|pool
operator|.
name|getXQueryService
argument_list|()
decl_stmt|;
specifier|final
name|CompiledXQuery
name|compiled
init|=
name|xqueryService
operator|.
name|compile
argument_list|(
name|broker
argument_list|,
name|context
argument_list|,
name|query
argument_list|)
decl_stmt|;
specifier|final
name|Sequence
name|result
init|=
name|xqueryService
operator|.
name|execute
argument_list|(
name|broker
argument_list|,
name|compiled
argument_list|,
literal|null
argument_list|)
decl_stmt|;
name|assertFalse
argument_list|(
name|result
operator|.
name|isEmpty
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|result
operator|.
name|getItemCount
argument_list|()
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|result
operator|.
name|itemAt
argument_list|(
literal|0
argument_list|)
operator|instanceof
name|Node
argument_list|)
expr_stmt|;
specifier|final
name|Source
name|expectedSource
init|=
name|Input
operator|.
name|fromString
argument_list|(
name|doc
argument_list|)
operator|.
name|build
argument_list|()
decl_stmt|;
specifier|final
name|Source
name|actualSource
init|=
name|Input
operator|.
name|fromNode
argument_list|(
operator|(
name|Node
operator|)
name|result
operator|.
name|itemAt
argument_list|(
literal|0
argument_list|)
argument_list|)
operator|.
name|build
argument_list|()
decl_stmt|;
specifier|final
name|Diff
name|diff
init|=
name|DiffBuilder
operator|.
name|compare
argument_list|(
name|expectedSource
argument_list|)
operator|.
name|withTest
argument_list|(
name|actualSource
argument_list|)
operator|.
name|checkForIdentical
argument_list|()
operator|.
name|checkForSimilar
argument_list|()
operator|.
name|build
argument_list|()
decl_stmt|;
name|assertFalse
argument_list|(
name|diff
operator|.
name|toString
argument_list|()
argument_list|,
name|diff
operator|.
name|hasDifferences
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Test
specifier|public
name|void
name|doc_dynamicallyAvailableDocument_relativeUri
parameter_list|()
throws|throws
name|XPathException
throws|,
name|EXistException
throws|,
name|PermissionDeniedException
throws|,
name|URISyntaxException
block|{
specifier|final
name|BrokerPool
name|pool
init|=
name|BrokerPool
operator|.
name|getInstance
argument_list|()
decl_stmt|;
specifier|final
name|String
name|doc
init|=
literal|"<timestamp>"
operator|+
name|System
operator|.
name|currentTimeMillis
argument_list|()
operator|+
literal|"</timestamp>"
decl_stmt|;
specifier|final
name|String
name|baseUri
init|=
literal|"http://from-dynamic-context/"
decl_stmt|;
specifier|final
name|String
name|docRelativeUri
init|=
literal|"doc1"
decl_stmt|;
specifier|final
name|String
name|query
init|=
literal|"fn:doc('"
operator|+
name|docRelativeUri
operator|+
literal|"')"
decl_stmt|;
try|try
init|(
specifier|final
name|DBBroker
name|broker
init|=
name|pool
operator|.
name|getBroker
argument_list|()
init|)
block|{
specifier|final
name|XQueryContext
name|context
init|=
operator|new
name|XQueryContext
argument_list|(
name|pool
argument_list|)
decl_stmt|;
name|context
operator|.
name|setBaseURI
argument_list|(
operator|new
name|AnyURIValue
argument_list|(
operator|new
name|URI
argument_list|(
name|baseUri
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|context
operator|.
name|addDynamicallyAvailableDocument
argument_list|(
name|baseUri
operator|+
name|docRelativeUri
argument_list|,
parameter_list|(
name|broker2
parameter_list|,
name|transaction
parameter_list|,
name|uri
parameter_list|)
lambda|->
name|asInMemoryDocument
argument_list|(
name|doc
argument_list|)
argument_list|)
expr_stmt|;
specifier|final
name|XQuery
name|xqueryService
init|=
name|pool
operator|.
name|getXQueryService
argument_list|()
decl_stmt|;
specifier|final
name|CompiledXQuery
name|compiled
init|=
name|xqueryService
operator|.
name|compile
argument_list|(
name|broker
argument_list|,
name|context
argument_list|,
name|query
argument_list|)
decl_stmt|;
specifier|final
name|Sequence
name|result
init|=
name|xqueryService
operator|.
name|execute
argument_list|(
name|broker
argument_list|,
name|compiled
argument_list|,
literal|null
argument_list|)
decl_stmt|;
name|assertFalse
argument_list|(
name|result
operator|.
name|isEmpty
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|result
operator|.
name|getItemCount
argument_list|()
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|result
operator|.
name|itemAt
argument_list|(
literal|0
argument_list|)
operator|instanceof
name|Node
argument_list|)
expr_stmt|;
specifier|final
name|Source
name|expectedSource
init|=
name|Input
operator|.
name|fromString
argument_list|(
name|doc
argument_list|)
operator|.
name|build
argument_list|()
decl_stmt|;
specifier|final
name|Source
name|actualSource
init|=
name|Input
operator|.
name|fromNode
argument_list|(
operator|(
name|Node
operator|)
name|result
operator|.
name|itemAt
argument_list|(
literal|0
argument_list|)
argument_list|)
operator|.
name|build
argument_list|()
decl_stmt|;
specifier|final
name|Diff
name|diff
init|=
name|DiffBuilder
operator|.
name|compare
argument_list|(
name|expectedSource
argument_list|)
operator|.
name|withTest
argument_list|(
name|actualSource
argument_list|)
operator|.
name|checkForIdentical
argument_list|()
operator|.
name|checkForSimilar
argument_list|()
operator|.
name|build
argument_list|()
decl_stmt|;
name|assertFalse
argument_list|(
name|diff
operator|.
name|toString
argument_list|()
argument_list|,
name|diff
operator|.
name|hasDifferences
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Test
specifier|public
name|void
name|docAvailable_dynamicallyAvailableDocument_absoluteUri
parameter_list|()
throws|throws
name|XPathException
throws|,
name|EXistException
throws|,
name|PermissionDeniedException
block|{
specifier|final
name|BrokerPool
name|pool
init|=
name|BrokerPool
operator|.
name|getInstance
argument_list|()
decl_stmt|;
specifier|final
name|String
name|doc
init|=
literal|"<timestamp>"
operator|+
name|System
operator|.
name|currentTimeMillis
argument_list|()
operator|+
literal|"</timestamp>"
decl_stmt|;
specifier|final
name|String
name|docUri
init|=
literal|"http://from-dynamic-context/doc1"
decl_stmt|;
specifier|final
name|String
name|query
init|=
literal|"fn:doc-available('"
operator|+
name|docUri
operator|+
literal|"')"
decl_stmt|;
try|try
init|(
specifier|final
name|DBBroker
name|broker
init|=
name|pool
operator|.
name|getBroker
argument_list|()
init|)
block|{
specifier|final
name|XQueryContext
name|context
init|=
operator|new
name|XQueryContext
argument_list|(
name|pool
argument_list|)
decl_stmt|;
name|context
operator|.
name|addDynamicallyAvailableDocument
argument_list|(
name|docUri
argument_list|,
parameter_list|(
name|broker2
parameter_list|,
name|transaction
parameter_list|,
name|uri
parameter_list|)
lambda|->
name|asInMemoryDocument
argument_list|(
name|doc
argument_list|)
argument_list|)
expr_stmt|;
specifier|final
name|XQuery
name|xqueryService
init|=
name|pool
operator|.
name|getXQueryService
argument_list|()
decl_stmt|;
specifier|final
name|CompiledXQuery
name|compiled
init|=
name|xqueryService
operator|.
name|compile
argument_list|(
name|broker
argument_list|,
name|context
argument_list|,
name|query
argument_list|)
decl_stmt|;
specifier|final
name|Sequence
name|result
init|=
name|xqueryService
operator|.
name|execute
argument_list|(
name|broker
argument_list|,
name|compiled
argument_list|,
literal|null
argument_list|)
decl_stmt|;
name|assertFalse
argument_list|(
name|result
operator|.
name|isEmpty
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|result
operator|.
name|getItemCount
argument_list|()
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|result
operator|.
name|itemAt
argument_list|(
literal|0
argument_list|)
operator|.
name|toJavaObject
argument_list|(
name|Boolean
operator|.
name|class
argument_list|)
operator|.
name|booleanValue
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Test
specifier|public
name|void
name|docAvailable_dynamicallyAvailableDocument_relativeUri
parameter_list|()
throws|throws
name|XPathException
throws|,
name|EXistException
throws|,
name|PermissionDeniedException
throws|,
name|URISyntaxException
block|{
specifier|final
name|BrokerPool
name|pool
init|=
name|BrokerPool
operator|.
name|getInstance
argument_list|()
decl_stmt|;
specifier|final
name|String
name|doc
init|=
literal|"<timestamp>"
operator|+
name|System
operator|.
name|currentTimeMillis
argument_list|()
operator|+
literal|"</timestamp>"
decl_stmt|;
specifier|final
name|String
name|baseUri
init|=
literal|"http://from-dynamic-context/"
decl_stmt|;
specifier|final
name|String
name|docRelativeUri
init|=
literal|"doc1"
decl_stmt|;
specifier|final
name|String
name|query
init|=
literal|"fn:doc-available('"
operator|+
name|docRelativeUri
operator|+
literal|"')"
decl_stmt|;
try|try
init|(
specifier|final
name|DBBroker
name|broker
init|=
name|pool
operator|.
name|getBroker
argument_list|()
init|)
block|{
specifier|final
name|XQueryContext
name|context
init|=
operator|new
name|XQueryContext
argument_list|(
name|pool
argument_list|)
decl_stmt|;
name|context
operator|.
name|setBaseURI
argument_list|(
operator|new
name|AnyURIValue
argument_list|(
operator|new
name|URI
argument_list|(
name|baseUri
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|context
operator|.
name|addDynamicallyAvailableDocument
argument_list|(
name|baseUri
operator|+
name|docRelativeUri
argument_list|,
parameter_list|(
name|broker2
parameter_list|,
name|transaction
parameter_list|,
name|uri
parameter_list|)
lambda|->
name|asInMemoryDocument
argument_list|(
name|doc
argument_list|)
argument_list|)
expr_stmt|;
specifier|final
name|XQuery
name|xqueryService
init|=
name|pool
operator|.
name|getXQueryService
argument_list|()
decl_stmt|;
specifier|final
name|CompiledXQuery
name|compiled
init|=
name|xqueryService
operator|.
name|compile
argument_list|(
name|broker
argument_list|,
name|context
argument_list|,
name|query
argument_list|)
decl_stmt|;
specifier|final
name|Sequence
name|result
init|=
name|xqueryService
operator|.
name|execute
argument_list|(
name|broker
argument_list|,
name|compiled
argument_list|,
literal|null
argument_list|)
decl_stmt|;
name|assertFalse
argument_list|(
name|result
operator|.
name|isEmpty
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|result
operator|.
name|getItemCount
argument_list|()
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|result
operator|.
name|itemAt
argument_list|(
literal|0
argument_list|)
operator|.
name|toJavaObject
argument_list|(
name|Boolean
operator|.
name|class
argument_list|)
operator|.
name|booleanValue
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
specifier|private
name|Either
argument_list|<
name|DocumentImpl
argument_list|,
name|org
operator|.
name|exist
operator|.
name|dom
operator|.
name|persistent
operator|.
name|DocumentImpl
argument_list|>
name|asInMemoryDocument
parameter_list|(
specifier|final
name|String
name|doc
parameter_list|)
throws|throws
name|XPathException
block|{
try|try
block|{
specifier|final
name|SAXAdapter
name|saxAdapter
init|=
operator|new
name|SAXAdapter
argument_list|()
decl_stmt|;
specifier|final
name|SAXParser
name|saxParser
init|=
name|saxParserFactory
operator|.
name|newSAXParser
argument_list|()
decl_stmt|;
specifier|final
name|XMLReader
name|xmlReader
init|=
name|saxParser
operator|.
name|getXMLReader
argument_list|()
decl_stmt|;
name|xmlReader
operator|.
name|setContentHandler
argument_list|(
name|saxAdapter
argument_list|)
expr_stmt|;
name|xmlReader
operator|.
name|setProperty
argument_list|(
name|Namespaces
operator|.
name|SAX_LEXICAL_HANDLER
argument_list|,
name|saxAdapter
argument_list|)
expr_stmt|;
try|try
init|(
specifier|final
name|Reader
name|reader
init|=
operator|new
name|StringReader
argument_list|(
name|doc
argument_list|)
init|)
block|{
name|xmlReader
operator|.
name|parse
argument_list|(
operator|new
name|InputSource
argument_list|(
name|reader
argument_list|)
argument_list|)
expr_stmt|;
block|}
return|return
name|Left
argument_list|(
name|saxAdapter
operator|.
name|getDocument
argument_list|()
argument_list|)
return|;
block|}
catch|catch
parameter_list|(
specifier|final
name|ParserConfigurationException
decl||
name|SAXException
decl||
name|IOException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|XPathException
argument_list|(
literal|"Unable to parse document"
argument_list|,
name|e
argument_list|)
throw|;
block|}
block|}
block|}
end_class

end_unit

