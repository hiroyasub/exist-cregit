begin_unit|revision:1.0.0;language:Java;cregit-version:0.0.1
begin_package
package|package
name|org
operator|.
name|exist
operator|.
name|xquery
operator|.
name|functions
operator|.
name|util
package|;
end_package

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|After
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Before
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|*
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|xmldb
operator|.
name|DatabaseInstanceManager
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|xmldb
operator|.
name|EXistResource
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|xmldb
operator|.
name|LocalXMLResource
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|xmldb
operator|.
name|XQueryService
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|xmldb
operator|.
name|XmldbURI
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|xquery
operator|.
name|XPathException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|w3c
operator|.
name|dom
operator|.
name|Node
import|;
end_import

begin_import
import|import
name|org
operator|.
name|xmldb
operator|.
name|api
operator|.
name|base
operator|.
name|Collection
import|;
end_import

begin_import
import|import
name|org
operator|.
name|xmldb
operator|.
name|api
operator|.
name|base
operator|.
name|Database
import|;
end_import

begin_import
import|import
name|org
operator|.
name|xmldb
operator|.
name|api
operator|.
name|DatabaseManager
import|;
end_import

begin_import
import|import
name|org
operator|.
name|xmldb
operator|.
name|api
operator|.
name|base
operator|.
name|CompiledExpression
import|;
end_import

begin_import
import|import
name|org
operator|.
name|xmldb
operator|.
name|api
operator|.
name|base
operator|.
name|Resource
import|;
end_import

begin_import
import|import
name|org
operator|.
name|xmldb
operator|.
name|api
operator|.
name|base
operator|.
name|ResourceSet
import|;
end_import

begin_import
import|import
name|org
operator|.
name|xmldb
operator|.
name|api
operator|.
name|base
operator|.
name|XMLDBException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|xmldb
operator|.
name|api
operator|.
name|modules
operator|.
name|BinaryResource
import|;
end_import

begin_import
import|import
name|org
operator|.
name|xmldb
operator|.
name|api
operator|.
name|modules
operator|.
name|CollectionManagementService
import|;
end_import

begin_comment
comment|/**  *  * @author jim.fuller@webcomposite.com  */
end_comment

begin_class
specifier|public
class|class
name|EvalTest
block|{
specifier|private
specifier|final
specifier|static
name|String
name|URI
init|=
name|XmldbURI
operator|.
name|LOCAL_DB
decl_stmt|;
specifier|private
name|XQueryService
name|service
decl_stmt|;
specifier|private
name|Collection
name|root
init|=
literal|null
decl_stmt|;
specifier|private
name|Database
name|database
init|=
literal|null
decl_stmt|;
specifier|private
name|Resource
name|invokableQuery
decl_stmt|;
specifier|private
specifier|final
specifier|static
name|String
name|INVOKABLE_QUERY_FILENAME
init|=
literal|"invokable.xql"
decl_stmt|;
specifier|private
specifier|final
specifier|static
name|String
name|INVOKABLE_QUERY_EXTERNAL_VAR_NAME
init|=
literal|"some-value"
decl_stmt|;
specifier|public
name|EvalTest
parameter_list|()
block|{
block|}
annotation|@
name|Before
specifier|public
name|void
name|setUp
parameter_list|()
throws|throws
name|Exception
block|{
comment|// initialize driver
name|Class
argument_list|<
name|?
argument_list|>
name|cl
init|=
name|Class
operator|.
name|forName
argument_list|(
literal|"org.exist.xmldb.DatabaseImpl"
argument_list|)
decl_stmt|;
name|database
operator|=
operator|(
name|Database
operator|)
name|cl
operator|.
name|newInstance
argument_list|()
expr_stmt|;
name|database
operator|.
name|setProperty
argument_list|(
literal|"create-database"
argument_list|,
literal|"true"
argument_list|)
expr_stmt|;
name|DatabaseManager
operator|.
name|registerDatabase
argument_list|(
name|database
argument_list|)
expr_stmt|;
name|root
operator|=
name|DatabaseManager
operator|.
name|getCollection
argument_list|(
name|XmldbURI
operator|.
name|LOCAL_DB
argument_list|,
literal|"admin"
argument_list|,
literal|""
argument_list|)
expr_stmt|;
name|service
operator|=
operator|(
name|XQueryService
operator|)
name|root
operator|.
name|getService
argument_list|(
literal|"XQueryService"
argument_list|,
literal|"1.0"
argument_list|)
expr_stmt|;
name|invokableQuery
operator|=
name|root
operator|.
name|createResource
argument_list|(
name|INVOKABLE_QUERY_FILENAME
argument_list|,
literal|"BinaryResource"
argument_list|)
expr_stmt|;
name|invokableQuery
operator|.
name|setContent
argument_list|(
literal|"declare variable $"
operator|+
name|INVOKABLE_QUERY_EXTERNAL_VAR_NAME
operator|+
literal|" external;\n"
operator|+
literal|"<hello>{$"
operator|+
name|INVOKABLE_QUERY_EXTERNAL_VAR_NAME
operator|+
literal|"}</hello>"
argument_list|)
expr_stmt|;
operator|(
operator|(
name|EXistResource
operator|)
name|invokableQuery
operator|)
operator|.
name|setMimeType
argument_list|(
literal|"application/xquery"
argument_list|)
expr_stmt|;
name|root
operator|.
name|storeResource
argument_list|(
name|invokableQuery
argument_list|)
expr_stmt|;
block|}
annotation|@
name|After
specifier|public
name|void
name|tearDown
parameter_list|()
throws|throws
name|Exception
block|{
name|root
operator|.
name|removeResource
argument_list|(
name|invokableQuery
argument_list|)
expr_stmt|;
name|DatabaseManager
operator|.
name|deregisterDatabase
argument_list|(
name|database
argument_list|)
expr_stmt|;
name|DatabaseInstanceManager
name|dim
init|=
operator|(
name|DatabaseInstanceManager
operator|)
name|root
operator|.
name|getService
argument_list|(
literal|"DatabaseInstanceManager"
argument_list|,
literal|"1.0"
argument_list|)
decl_stmt|;
name|dim
operator|.
name|shutdown
argument_list|()
expr_stmt|;
comment|// clear instance variables
name|service
operator|=
literal|null
expr_stmt|;
name|root
operator|=
literal|null
expr_stmt|;
comment|//System.out.println("tearDown PASSED");
block|}
annotation|@
name|Test
specifier|public
name|void
name|testEval
parameter_list|()
throws|throws
name|XPathException
block|{
name|ResourceSet
name|result
init|=
literal|null
decl_stmt|;
name|String
name|r
init|=
literal|""
decl_stmt|;
try|try
block|{
name|String
name|query
init|=
literal|"let $query := 'let $a := 1 return $a'\n"
operator|+
literal|"return\n"
operator|+
literal|"util:eval($query)"
decl_stmt|;
name|result
operator|=
name|service
operator|.
name|query
argument_list|(
name|query
argument_list|)
expr_stmt|;
name|r
operator|=
operator|(
name|String
operator|)
name|result
operator|.
name|getResource
argument_list|(
literal|0
argument_list|)
operator|.
name|getContent
argument_list|()
expr_stmt|;
name|assertEquals
argument_list|(
literal|"1"
argument_list|,
name|r
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|XMLDBException
name|e
parameter_list|)
block|{
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"testEval(): "
operator|+
name|e
argument_list|)
expr_stmt|;
name|fail
argument_list|(
name|e
operator|.
name|getMessage
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Test
specifier|public
name|void
name|testEvalWithExternalVars
parameter_list|()
throws|throws
name|XPathException
block|{
name|ResourceSet
name|result
init|=
literal|null
decl_stmt|;
try|try
block|{
name|String
name|query
init|=
literal|"let $value := 'world' return\n"
operator|+
literal|"\tutil:eval(xs:anyURI('/db/"
operator|+
name|INVOKABLE_QUERY_FILENAME
operator|+
literal|"'), false(), (xs:QName('"
operator|+
name|INVOKABLE_QUERY_EXTERNAL_VAR_NAME
operator|+
literal|"'), $value))"
decl_stmt|;
name|result
operator|=
name|service
operator|.
name|query
argument_list|(
name|query
argument_list|)
expr_stmt|;
name|LocalXMLResource
name|res
init|=
operator|(
name|LocalXMLResource
operator|)
name|result
operator|.
name|getResource
argument_list|(
literal|0
argument_list|)
decl_stmt|;
name|Node
name|n
init|=
name|res
operator|.
name|getContentAsDOM
argument_list|()
decl_stmt|;
name|assertEquals
argument_list|(
name|n
operator|.
name|getLocalName
argument_list|()
argument_list|,
literal|"hello"
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"world"
argument_list|,
name|n
operator|.
name|getFirstChild
argument_list|()
operator|.
name|getNodeValue
argument_list|()
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|XMLDBException
name|e
parameter_list|)
block|{
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"testEval(): "
operator|+
name|e
argument_list|)
expr_stmt|;
name|fail
argument_list|(
name|e
operator|.
name|getMessage
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Test
specifier|public
name|void
name|testEvalwithPI
parameter_list|()
throws|throws
name|XPathException
block|{
name|ResourceSet
name|result
init|=
literal|null
decl_stmt|;
name|String
name|r
init|=
literal|""
decl_stmt|;
try|try
block|{
name|String
name|query
init|=
literal|"let $query := 'let $a :=<test><?pi test?></test> return count($a//processing-instruction())'\n"
operator|+
literal|"return\n"
operator|+
literal|"util:eval($query)"
decl_stmt|;
name|result
operator|=
name|service
operator|.
name|query
argument_list|(
name|query
argument_list|)
expr_stmt|;
name|r
operator|=
operator|(
name|String
operator|)
name|result
operator|.
name|getResource
argument_list|(
literal|0
argument_list|)
operator|.
name|getContent
argument_list|()
expr_stmt|;
name|assertEquals
argument_list|(
literal|"1"
argument_list|,
name|r
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|XMLDBException
name|e
parameter_list|)
block|{
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"testEval(): "
operator|+
name|e
argument_list|)
expr_stmt|;
name|fail
argument_list|(
name|e
operator|.
name|getMessage
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Test
specifier|public
name|void
name|testEvalInline
parameter_list|()
throws|throws
name|XPathException
block|{
name|ResourceSet
name|result
init|=
literal|null
decl_stmt|;
name|String
name|r
init|=
literal|""
decl_stmt|;
try|try
block|{
name|String
name|query
init|=
literal|"let $xml := document{<test><a><b/></a></test>}\n"
operator|+
literal|"let $query := 'count(.//*)'\n"
operator|+
literal|"return\n"
operator|+
literal|"util:eval-inline($xml,$query)"
decl_stmt|;
name|result
operator|=
name|service
operator|.
name|query
argument_list|(
name|query
argument_list|)
expr_stmt|;
name|r
operator|=
operator|(
name|String
operator|)
name|result
operator|.
name|getResource
argument_list|(
literal|0
argument_list|)
operator|.
name|getContent
argument_list|()
expr_stmt|;
name|assertEquals
argument_list|(
literal|"3"
argument_list|,
name|r
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|XMLDBException
name|e
parameter_list|)
block|{
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"testEvalInline(): "
operator|+
name|e
argument_list|)
expr_stmt|;
name|fail
argument_list|(
name|e
operator|.
name|getMessage
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Test
specifier|public
name|void
name|testEvalWithContextVariable
parameter_list|()
throws|throws
name|XPathException
block|{
name|ResourceSet
name|result
init|=
literal|null
decl_stmt|;
name|String
name|r
init|=
literal|""
decl_stmt|;
try|try
block|{
name|String
name|query
init|=
literal|"let $xml :=<test><a/><b/></test>\n"
operator|+
literal|"let $context :=<static-context>\n"
operator|+
literal|"<variable name='xml'>{$xml}</variable>\n"
operator|+
literal|"</static-context>\n"
operator|+
literal|"let $query := 'count($xml//*) mod 2 = 0'\n"
operator|+
literal|"return\n"
operator|+
literal|"util:eval-with-context($query, $context, false())"
decl_stmt|;
name|result
operator|=
name|service
operator|.
name|query
argument_list|(
name|query
argument_list|)
expr_stmt|;
name|r
operator|=
operator|(
name|String
operator|)
name|result
operator|.
name|getResource
argument_list|(
literal|0
argument_list|)
operator|.
name|getContent
argument_list|()
expr_stmt|;
name|assertEquals
argument_list|(
literal|"true"
argument_list|,
name|r
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|XMLDBException
name|e
parameter_list|)
block|{
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"testEvalWithContextVariable(): "
operator|+
name|e
argument_list|)
expr_stmt|;
name|fail
argument_list|(
name|e
operator|.
name|getMessage
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Test
specifier|public
name|void
name|testEvalSupplyingContext
parameter_list|()
throws|throws
name|XPathException
block|{
name|ResourceSet
name|result
init|=
literal|null
decl_stmt|;
name|String
name|r
init|=
literal|"test"
decl_stmt|;
try|try
block|{
name|String
name|query
init|=
literal|"let $xml :=<test><a/></test>\n"
operator|+
literal|"let $context :=<static-context>\n"
operator|+
literal|"<default-context>{$xml}</default-context>\n"
operator|+
literal|"</static-context>\n"
operator|+
literal|"let $query := 'count(.//*) mod 2 = 0'\n"
operator|+
literal|"return\n"
operator|+
literal|"util:eval-with-context($query, $context, false())"
decl_stmt|;
name|result
operator|=
name|service
operator|.
name|query
argument_list|(
name|query
argument_list|)
expr_stmt|;
name|r
operator|=
operator|(
name|String
operator|)
name|result
operator|.
name|getResource
argument_list|(
literal|0
argument_list|)
operator|.
name|getContent
argument_list|()
expr_stmt|;
name|assertEquals
argument_list|(
literal|"true"
argument_list|,
name|r
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|XMLDBException
name|e
parameter_list|)
block|{
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"testEvalSupplyingContext(): "
operator|+
name|e
argument_list|)
expr_stmt|;
name|fail
argument_list|(
name|e
operator|.
name|getMessage
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Test
specifier|public
name|void
name|testEvalSupplyingContextAndVariable
parameter_list|()
throws|throws
name|XPathException
block|{
name|ResourceSet
name|result
init|=
literal|null
decl_stmt|;
name|String
name|r
init|=
literal|"test"
decl_stmt|;
try|try
block|{
name|String
name|query
init|=
literal|"let $xml :=<test><a/></test>\n"
operator|+
literal|"let $context :=<static-context>\n"
operator|+
literal|"<variable name='xml'>{$xml}</variable>\n"
operator|+
literal|"<default-context>{$xml}</default-context>\n"
operator|+
literal|"</static-context>\n"
operator|+
literal|"let $query := 'count($xml//*) + count(.//*)'\n"
operator|+
literal|"return\n"
operator|+
literal|"util:eval-with-context($query, $context, false())"
decl_stmt|;
name|result
operator|=
name|service
operator|.
name|query
argument_list|(
name|query
argument_list|)
expr_stmt|;
name|r
operator|=
operator|(
name|String
operator|)
name|result
operator|.
name|getResource
argument_list|(
literal|0
argument_list|)
operator|.
name|getContent
argument_list|()
expr_stmt|;
name|assertEquals
argument_list|(
literal|"3"
argument_list|,
name|r
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|XMLDBException
name|e
parameter_list|)
block|{
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"testEvalSupplyingContextAndVariable(): "
operator|+
name|e
argument_list|)
expr_stmt|;
name|fail
argument_list|(
name|e
operator|.
name|getMessage
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Test
specifier|public
name|void
name|evalInContextWithPreDeclaredNamespace
parameter_list|()
throws|throws
name|XMLDBException
block|{
name|createCollection
argument_list|(
literal|"testEvalInContextWithPreDeclaredNamespace"
argument_list|)
expr_stmt|;
specifier|final
name|String
name|query
init|=
literal|"xquery version \"1.0\";\r\n"
operator|+
literal|"declare namespace db = \"http://docbook.org/ns/docbook\";\r\n"
operator|+
literal|"import module namespace util = \"http://exist-db.org/xquery/util\";\r\n"
operator|+
literal|"let $q := \"/db:article\" return\r\n"
operator|+
literal|"util:eval($q)"
decl_stmt|;
name|executeQuery
argument_list|(
name|query
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|evalInContextWithPreDeclaredNamespaceAcrossLocalFunctionBoundary
parameter_list|()
throws|throws
name|XMLDBException
block|{
name|createCollection
argument_list|(
literal|"testEvalInContextWithPreDeclaredNamespace"
argument_list|)
expr_stmt|;
specifier|final
name|String
name|query
init|=
literal|"xquery version \"1.0\";\r\n"
operator|+
literal|"import module namespace util = \"http://exist-db.org/xquery/util\";\r\n"
operator|+
literal|"declare namespace db = \"http://docbook.org/ns/docbook\";\r\n"
operator|+
literal|"declare function local:process($q as xs:string) {\r\n"
operator|+
literal|"\tutil:eval($q)\r\n"
operator|+
literal|"};\r\n"
operator|+
literal|"let $q := \"/db:article\" return\r\n"
operator|+
literal|"local:process($q)"
decl_stmt|;
name|executeQuery
argument_list|(
name|query
argument_list|)
expr_stmt|;
block|}
comment|//should fail with - Error while evaluating expression: /db:article. XPST0081: No namespace defined for prefix db [at line 5, column 9]
annotation|@
name|Test
argument_list|(
name|expected
operator|=
name|XMLDBException
operator|.
name|class
argument_list|)
specifier|public
name|void
name|evalInContextWithPreDeclaredNamespaceAcrossModuleBoundary
parameter_list|()
throws|throws
name|XMLDBException
block|{
name|Collection
name|testHome
init|=
name|createCollection
argument_list|(
literal|"testEvalInContextWithPreDeclaredNamespace"
argument_list|)
decl_stmt|;
specifier|final
name|String
name|processorModule
init|=
literal|"xquery version \"1.0\";\r\n"
operator|+
literal|"module namespace processor = \"http://processor\";\r\n"
operator|+
literal|"import module namespace util = \"http://exist-db.org/xquery/util\";\r\n"
operator|+
literal|"declare function processor:process($q as xs:string) {\r\n"
operator|+
literal|"\tutil:eval($q)\r\n"
operator|+
literal|"};"
decl_stmt|;
name|writeModule
argument_list|(
name|testHome
argument_list|,
literal|"processor.xqm"
argument_list|,
name|processorModule
argument_list|)
expr_stmt|;
specifier|final
name|String
name|query
init|=
literal|"xquery version \"1.0\";\r\n"
operator|+
literal|"import module namespace processor = \"http://processor\" at \"xmldb:exist://"
operator|+
name|testHome
operator|.
name|getName
argument_list|()
operator|+
literal|"/processor.xqm\";\r\n"
operator|+
literal|"declare namespace db = \"http://docbook.org/ns/docbook\";\r\n"
operator|+
literal|"let $q := \"/db:article\" return\r\n"
operator|+
literal|"processor:process($q)"
decl_stmt|;
name|executeQuery
argument_list|(
name|query
argument_list|)
expr_stmt|;
block|}
specifier|private
name|Collection
name|createCollection
parameter_list|(
name|String
name|collectionName
parameter_list|)
throws|throws
name|XMLDBException
block|{
name|Collection
name|collection
init|=
name|root
operator|.
name|getChildCollection
argument_list|(
name|collectionName
argument_list|)
decl_stmt|;
if|if
condition|(
name|collection
operator|==
literal|null
condition|)
block|{
name|CollectionManagementService
name|cmService
init|=
operator|(
name|CollectionManagementService
operator|)
name|root
operator|.
name|getService
argument_list|(
literal|"CollectionManagementService"
argument_list|,
literal|"1.0"
argument_list|)
decl_stmt|;
name|cmService
operator|.
name|createCollection
argument_list|(
name|collectionName
argument_list|)
expr_stmt|;
block|}
name|collection
operator|=
name|DatabaseManager
operator|.
name|getCollection
argument_list|(
name|URI
operator|+
literal|"/"
operator|+
name|collectionName
argument_list|,
literal|"admin"
argument_list|,
literal|""
argument_list|)
expr_stmt|;
name|assertNotNull
argument_list|(
name|collection
argument_list|)
expr_stmt|;
return|return
name|collection
return|;
block|}
specifier|private
name|void
name|writeModule
parameter_list|(
name|Collection
name|collection
parameter_list|,
name|String
name|modulename
parameter_list|,
name|String
name|module
parameter_list|)
throws|throws
name|XMLDBException
block|{
name|BinaryResource
name|res
init|=
operator|(
name|BinaryResource
operator|)
name|collection
operator|.
name|createResource
argument_list|(
name|modulename
argument_list|,
literal|"BinaryResource"
argument_list|)
decl_stmt|;
operator|(
operator|(
name|EXistResource
operator|)
name|res
operator|)
operator|.
name|setMimeType
argument_list|(
literal|"application/xquery"
argument_list|)
expr_stmt|;
name|res
operator|.
name|setContent
argument_list|(
name|module
operator|.
name|getBytes
argument_list|()
argument_list|)
expr_stmt|;
name|collection
operator|.
name|storeResource
argument_list|(
name|res
argument_list|)
expr_stmt|;
name|collection
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
specifier|private
name|ResourceSet
name|executeQuery
parameter_list|(
name|String
name|query
parameter_list|)
throws|throws
name|XMLDBException
block|{
name|CompiledExpression
name|compiledQuery
init|=
name|service
operator|.
name|compile
argument_list|(
name|query
argument_list|)
decl_stmt|;
name|ResourceSet
name|result
init|=
name|service
operator|.
name|execute
argument_list|(
name|compiledQuery
argument_list|)
decl_stmt|;
return|return
name|result
return|;
block|}
block|}
end_class

end_unit

