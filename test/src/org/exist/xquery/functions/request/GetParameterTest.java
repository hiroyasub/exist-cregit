begin_unit|revision:1.0.0;language:Java;cregit-version:0.0.1
begin_package
package|package
name|org
operator|.
name|exist
operator|.
name|xquery
operator|.
name|functions
operator|.
name|request
package|;
end_package

begin_import
import|import static
name|org
operator|.
name|custommonkey
operator|.
name|xmlunit
operator|.
name|XMLAssert
operator|.
name|assertXMLEqual
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertEquals
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|fail
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|InputStream
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|httpclient
operator|.
name|HttpException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|httpclient
operator|.
name|HttpStatus
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|httpclient
operator|.
name|NameValuePair
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|httpclient
operator|.
name|methods
operator|.
name|GetMethod
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|http
operator|.
name|RESTTest
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_import
import|import
name|org
operator|.
name|xml
operator|.
name|sax
operator|.
name|SAXException
import|;
end_import

begin_comment
comment|/**  * Tests expected behaviour of request:get-parameter() XQuery function  *   * @author Adam Retter<adam@exist-db.org>  * @version 1.0  */
end_comment

begin_class
specifier|public
class|class
name|GetParameterTest
extends|extends
name|RESTTest
block|{
specifier|private
specifier|final
specifier|static
name|String
name|HTTP_REQUEST_PARAM_NAME
init|=
literal|"param1"
decl_stmt|;
specifier|private
specifier|final
specifier|static
name|String
name|xquery
init|=
literal|"<request-param name=\""
operator|+
name|HTTP_REQUEST_PARAM_NAME
operator|+
literal|"\">{for $value in request:get-parameter(\""
operator|+
name|HTTP_REQUEST_PARAM_NAME
operator|+
literal|"\", ()) return<value>{$value}</value>}</request-param>"
decl_stmt|;
annotation|@
name|Test
specifier|public
name|void
name|testNoParameter
parameter_list|()
block|{
name|testGetParameter
argument_list|(
literal|null
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testEmptyParameter
parameter_list|()
block|{
name|testGetParameter
argument_list|(
operator|new
name|String
index|[]
block|{
literal|""
block|}
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testSingleValueParameter
parameter_list|()
block|{
name|testGetParameter
argument_list|(
operator|new
name|String
index|[]
block|{
literal|"value1"
block|}
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testMultiValueParameter
parameter_list|()
block|{
name|testGetParameter
argument_list|(
operator|new
name|String
index|[]
block|{
literal|"value1"
block|,
literal|"value2"
block|,
literal|"value3"
block|,
literal|"value4"
block|}
argument_list|)
expr_stmt|;
block|}
specifier|private
name|void
name|testGetParameter
parameter_list|(
name|String
name|paramValues
index|[]
parameter_list|)
block|{
name|GetMethod
name|get
init|=
operator|new
name|GetMethod
argument_list|(
name|COLLECTION_ROOT_URL
argument_list|)
decl_stmt|;
name|NameValuePair
name|qsParams
index|[]
init|=
literal|null
decl_stmt|;
name|NameValuePair
name|qsXQueryParam
init|=
operator|new
name|NameValuePair
argument_list|(
literal|"_query"
argument_list|,
name|xquery
argument_list|)
decl_stmt|;
name|NameValuePair
name|qsIndentParam
init|=
operator|new
name|NameValuePair
argument_list|(
literal|"_indent"
argument_list|,
literal|"no"
argument_list|)
decl_stmt|;
name|StringBuilder
name|xmlExpectedResponse
init|=
operator|new
name|StringBuilder
argument_list|(
literal|"<exist:result xmlns:exist=\"http://exist.sourceforge.net/NS/exist\" exist:hits=\"1\" exist:start=\"1\" exist:count=\"1\"><request-param name=\""
operator|+
name|HTTP_REQUEST_PARAM_NAME
operator|+
literal|"\">"
argument_list|)
decl_stmt|;
if|if
condition|(
name|paramValues
operator|==
literal|null
operator|||
name|paramValues
operator|.
name|length
operator|==
literal|0
condition|)
block|{
name|qsParams
operator|=
operator|new
name|NameValuePair
index|[
literal|2
index|]
expr_stmt|;
name|qsParams
index|[
literal|0
index|]
operator|=
name|qsXQueryParam
expr_stmt|;
name|qsParams
index|[
literal|1
index|]
operator|=
name|qsIndentParam
expr_stmt|;
block|}
else|else
block|{
name|qsParams
operator|=
operator|new
name|NameValuePair
index|[
name|paramValues
operator|.
name|length
operator|+
literal|2
index|]
expr_stmt|;
name|qsParams
index|[
literal|0
index|]
operator|=
name|qsXQueryParam
expr_stmt|;
name|qsParams
index|[
literal|1
index|]
operator|=
name|qsIndentParam
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|paramValues
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
name|qsParams
index|[
name|i
operator|+
literal|2
index|]
operator|=
operator|new
name|NameValuePair
argument_list|(
name|HTTP_REQUEST_PARAM_NAME
argument_list|,
name|paramValues
index|[
name|i
index|]
argument_list|)
expr_stmt|;
name|xmlExpectedResponse
operator|.
name|append
argument_list|(
literal|"<value>"
operator|+
name|paramValues
index|[
name|i
index|]
operator|+
literal|"</value>"
argument_list|)
expr_stmt|;
block|}
block|}
name|xmlExpectedResponse
operator|.
name|append
argument_list|(
literal|"</request-param></exist:result>"
argument_list|)
expr_stmt|;
name|get
operator|.
name|setQueryString
argument_list|(
name|qsParams
argument_list|)
expr_stmt|;
try|try
block|{
name|int
name|httpResult
init|=
name|client
operator|.
name|executeMethod
argument_list|(
name|get
argument_list|)
decl_stmt|;
name|byte
name|buf
index|[]
init|=
operator|new
name|byte
index|[
literal|1024
index|]
decl_stmt|;
name|int
name|read
init|=
operator|-
literal|1
decl_stmt|;
name|StringBuilder
name|xmlActualResponse
init|=
operator|new
name|StringBuilder
argument_list|()
decl_stmt|;
name|InputStream
name|is
init|=
name|get
operator|.
name|getResponseBodyAsStream
argument_list|()
decl_stmt|;
while|while
condition|(
operator|(
name|read
operator|=
name|is
operator|.
name|read
argument_list|(
name|buf
argument_list|)
operator|)
operator|>
operator|-
literal|1
condition|)
block|{
name|xmlActualResponse
operator|.
name|append
argument_list|(
operator|new
name|String
argument_list|(
name|buf
argument_list|,
literal|0
argument_list|,
name|read
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|assertEquals
argument_list|(
name|httpResult
argument_list|,
name|HttpStatus
operator|.
name|SC_OK
argument_list|)
expr_stmt|;
name|assertXMLEqual
argument_list|(
name|xmlActualResponse
operator|.
name|toString
argument_list|()
argument_list|,
name|xmlExpectedResponse
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|HttpException
name|he
parameter_list|)
block|{
name|fail
argument_list|(
name|he
operator|.
name|getMessage
argument_list|()
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|ioe
parameter_list|)
block|{
name|fail
argument_list|(
name|ioe
operator|.
name|getMessage
argument_list|()
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|SAXException
name|sae
parameter_list|)
block|{
name|fail
argument_list|(
name|sae
operator|.
name|getMessage
argument_list|()
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
name|get
operator|.
name|releaseConnection
argument_list|()
expr_stmt|;
block|}
block|}
block|}
end_class

end_unit

