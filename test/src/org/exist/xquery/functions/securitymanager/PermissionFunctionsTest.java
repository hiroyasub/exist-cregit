begin_unit|revision:1.0.0;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * eXist Open Source Native XML Database  * Copyright (C) 2001-2013 The eXist Project  * http://exist-db.org  *  * This program is free software; you can redistribute it and/or  * modify it under the terms of the GNU Lesser General Public License  * as published by the Free Software Foundation; either version 2  * of the License, or (at your option) any later version.  *    * This program is distributed in the hope that it will be useful,  * but WITHOUT ANY WARRANTY; without even the implied warranty of  * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the  * GNU Lesser General Public License for more details.  *   * You should have received a copy of the GNU Lesser General Public License  * along with this program; if not, write to the Free Software Foundation  * Inc., 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301, USA.  *    *  $Id$  */
end_comment

begin_package
package|package
name|org
operator|.
name|exist
operator|.
name|xquery
operator|.
name|functions
operator|.
name|securitymanager
package|;
end_package

begin_import
import|import
name|com
operator|.
name|googlecode
operator|.
name|junittoolbox
operator|.
name|ParallelRunner
import|;
end_import

begin_import
import|import
name|org
operator|.
name|easymock
operator|.
name|EasyMock
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|xquery
operator|.
name|XPathException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|xquery
operator|.
name|XQueryContext
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|xquery
operator|.
name|value
operator|.
name|Sequence
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|xquery
operator|.
name|value
operator|.
name|StringValue
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|*
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|runner
operator|.
name|RunWith
import|;
end_import

begin_comment
comment|/**  *  * @author Adam Retter<adam.retter@googlemail.com>  */
end_comment

begin_class
annotation|@
name|RunWith
argument_list|(
name|ParallelRunner
operator|.
name|class
argument_list|)
specifier|public
class|class
name|PermissionFunctionsTest
block|{
comment|/**      * Test of eval method, of class PermissionsFunctions.      */
annotation|@
name|Test
specifier|public
name|void
name|modeToOctal
parameter_list|()
throws|throws
name|XPathException
block|{
specifier|final
name|XQueryContext
name|mckContext
init|=
name|EasyMock
operator|.
name|createMock
argument_list|(
name|XQueryContext
operator|.
name|class
argument_list|)
decl_stmt|;
specifier|final
name|PermissionsFunction
name|permissionsFunctions
init|=
operator|new
name|PermissionsFunction
argument_list|(
name|mckContext
argument_list|,
name|PermissionsFunction
operator|.
name|FNS_MODE_TO_OCTAL
argument_list|)
decl_stmt|;
name|Sequence
name|args
index|[]
init|=
block|{
operator|new
name|StringValue
argument_list|(
literal|"rwxr-x---"
argument_list|)
block|}
decl_stmt|;
specifier|final
name|Sequence
name|result
init|=
name|permissionsFunctions
operator|.
name|eval
argument_list|(
name|args
argument_list|,
literal|null
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|result
operator|.
name|getItemCount
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"0750"
argument_list|,
name|result
operator|.
name|itemAt
argument_list|(
literal|0
argument_list|)
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
argument_list|(
name|expected
operator|=
name|XPathException
operator|.
name|class
argument_list|)
specifier|public
name|void
name|modeToOctal_invalidMode
parameter_list|()
throws|throws
name|XPathException
block|{
specifier|final
name|XQueryContext
name|mckContext
init|=
name|EasyMock
operator|.
name|createMock
argument_list|(
name|XQueryContext
operator|.
name|class
argument_list|)
decl_stmt|;
specifier|final
name|PermissionsFunction
name|permissionsFunctions
init|=
operator|new
name|PermissionsFunction
argument_list|(
name|mckContext
argument_list|,
name|PermissionsFunction
operator|.
name|FNS_MODE_TO_OCTAL
argument_list|)
decl_stmt|;
name|Sequence
name|args
index|[]
init|=
block|{
operator|new
name|StringValue
argument_list|(
literal|"invalid"
argument_list|)
block|}
decl_stmt|;
name|permissionsFunctions
operator|.
name|eval
argument_list|(
name|args
argument_list|,
literal|null
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|octalToMode
parameter_list|()
throws|throws
name|XPathException
block|{
specifier|final
name|XQueryContext
name|mckContext
init|=
name|EasyMock
operator|.
name|createMock
argument_list|(
name|XQueryContext
operator|.
name|class
argument_list|)
decl_stmt|;
specifier|final
name|PermissionsFunction
name|permissionsFunctions
init|=
operator|new
name|PermissionsFunction
argument_list|(
name|mckContext
argument_list|,
name|PermissionsFunction
operator|.
name|FNS_OCTAL_TO_MODE
argument_list|)
decl_stmt|;
name|Sequence
name|args
index|[]
init|=
block|{
operator|new
name|StringValue
argument_list|(
literal|"0750"
argument_list|)
block|}
decl_stmt|;
specifier|final
name|Sequence
name|result
init|=
name|permissionsFunctions
operator|.
name|eval
argument_list|(
name|args
argument_list|,
literal|null
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|result
operator|.
name|getItemCount
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"rwxr-x---"
argument_list|,
name|result
operator|.
name|itemAt
argument_list|(
literal|0
argument_list|)
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

