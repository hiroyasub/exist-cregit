begin_unit|revision:1.0.0;language:Java;cregit-version:0.0.1
begin_package
package|package
name|org
operator|.
name|exist
operator|.
name|xquery
operator|.
name|functions
operator|.
name|validate
package|;
end_package

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|test
operator|.
name|EmbeddedExistTester
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Before
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|*
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|xquery
operator|.
name|XPathException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|xmldb
operator|.
name|api
operator|.
name|base
operator|.
name|ResourceSet
import|;
end_import

begin_import
import|import
name|org
operator|.
name|xmldb
operator|.
name|api
operator|.
name|base
operator|.
name|XMLDBException
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|custommonkey
operator|.
name|xmlunit
operator|.
name|XMLAssert
operator|.
name|assertXpathEvaluatesTo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|custommonkey
operator|.
name|xmlunit
operator|.
name|exceptions
operator|.
name|XpathException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|xml
operator|.
name|sax
operator|.
name|SAXException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_comment
comment|/**  *  * @author jim.fuller@webcomposite.com  */
end_comment

begin_class
specifier|public
class|class
name|JingOnvdlTest
extends|extends
name|EmbeddedExistTester
block|{
specifier|private
specifier|final
specifier|static
name|String
name|RNG_DATA1
init|=
literal|"<element  name=\'Book\' xmlns='http://relaxng.org/ns/structure/1.0'  ns=\'http://www.books.org\'> "
operator|+
literal|"<element name=\'Title\'><text/></element>"
operator|+
literal|"<element name=\'Author\'><text/></element>"
operator|+
literal|"<element name=\'Date\'><text/></element>"
operator|+
literal|"<element name=\'ISBN\'><text/></element>"
operator|+
literal|"<element name=\'Publisher\'><text/></element>"
operator|+
literal|"</element>"
decl_stmt|;
specifier|private
specifier|final
specifier|static
name|String
name|NVDL_DATA1
init|=
literal|"<rules xmlns='http://purl.oclc.org/dsdl/nvdl/ns/structure/1.0'> "
operator|+
literal|"<namespace ns=\'http://www.books.org\'>"
operator|+
literal|"<validate schema=\"Book.rng\" />"
operator|+
literal|"</namespace>"
operator|+
literal|"</rules>"
decl_stmt|;
specifier|private
specifier|final
specifier|static
name|String
name|XML_DATA1
init|=
literal|"<Book xmlns='http://www.books.org'> "
operator|+
literal|"<Title>The Wisdom of Crowds</Title>"
operator|+
literal|"<Author>James Surowiecki</Author>"
operator|+
literal|"<Date>2005</Date>"
operator|+
literal|"<ISBN>0-385-72170-6</ISBN>"
operator|+
literal|"<Publisher>Anchor Books</Publisher>"
operator|+
literal|"</Book>"
decl_stmt|;
specifier|private
specifier|final
specifier|static
name|String
name|XML_DATA2
init|=
literal|"<Book xmlns='http://www.books.org'> "
operator|+
literal|"<Title>The Wisdom of Crowds</Title>"
operator|+
literal|"<Author>James Surowiecki</Author>"
operator|+
literal|"<Dateee>2005</Dateee>"
operator|+
literal|"<ISBN>0-385-72170-6</ISBN>"
operator|+
literal|"<Publisher>Anchor Books</Publisher>"
operator|+
literal|"</Book>"
decl_stmt|;
specifier|public
name|JingOnvdlTest
parameter_list|()
block|{
block|}
annotation|@
name|Before
specifier|public
name|void
name|setUp
parameter_list|()
throws|throws
name|Exception
block|{
name|String
name|query
init|=
literal|"xmldb:create-collection('xmldb:exist:///db','validate-test')"
decl_stmt|;
name|ResourceSet
name|result
init|=
name|executeQuery
argument_list|(
name|query
argument_list|)
decl_stmt|;
name|String
name|query1
init|=
literal|"xmldb:store('/db/validate-test', 'test.nvdl',"
operator|+
name|NVDL_DATA1
operator|+
literal|")"
decl_stmt|;
name|ResourceSet
name|result1
init|=
name|executeQuery
argument_list|(
name|query1
argument_list|)
decl_stmt|;
name|String
name|query2
init|=
literal|"xmldb:store('/db/validate-test', 'Book.rng',"
operator|+
name|RNG_DATA1
operator|+
literal|")"
decl_stmt|;
name|ResourceSet
name|result2
init|=
name|executeQuery
argument_list|(
name|query2
argument_list|)
decl_stmt|;
name|String
name|data1
init|=
literal|"xmldb:store('/db/validate-test', 'valid.xml',"
operator|+
name|XML_DATA1
operator|+
literal|")"
decl_stmt|;
name|ResourceSet
name|result3
init|=
name|executeQuery
argument_list|(
name|data1
argument_list|)
decl_stmt|;
name|String
name|data2
init|=
literal|"xmldb:store('/db/validate-test', 'invalid.xml',"
operator|+
name|XML_DATA2
operator|+
literal|")"
decl_stmt|;
name|ResourceSet
name|result4
init|=
name|executeQuery
argument_list|(
name|data2
argument_list|)
decl_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|onvdl_valid
parameter_list|()
throws|throws
name|XPathException
throws|,
name|IOException
throws|,
name|XpathException
throws|,
name|SAXException
block|{
name|ResourceSet
name|result
init|=
literal|null
decl_stmt|;
name|String
name|r
init|=
literal|""
decl_stmt|;
try|try
block|{
name|String
name|query
init|=
literal|"let $a := "
operator|+
name|XML_DATA1
operator|+
literal|"let $b := xs:anyURI('/db/validate-test/test.nvdl')"
operator|+
literal|"return "
operator|+
literal|"validation:validate-report($a,$b)"
decl_stmt|;
name|result
operator|=
name|executeQuery
argument_list|(
name|query
argument_list|)
expr_stmt|;
name|r
operator|=
operator|(
name|String
operator|)
name|result
operator|.
name|getResource
argument_list|(
literal|0
argument_list|)
operator|.
name|getContent
argument_list|()
expr_stmt|;
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
name|r
argument_list|)
expr_stmt|;
name|assertXpathEvaluatesTo
argument_list|(
literal|"valid"
argument_list|,
literal|"//status/text()"
argument_list|,
name|r
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|XMLDBException
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|error
argument_list|(
literal|"testONVDL(): "
operator|+
name|e
operator|.
name|getMessage
argument_list|()
argument_list|,
name|e
argument_list|)
expr_stmt|;
name|fail
argument_list|(
name|e
operator|.
name|getMessage
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Test
specifier|public
name|void
name|onvdl_invalid
parameter_list|()
throws|throws
name|XPathException
throws|,
name|IOException
throws|,
name|XpathException
throws|,
name|SAXException
block|{
name|ResourceSet
name|result
init|=
literal|null
decl_stmt|;
name|String
name|r
init|=
literal|""
decl_stmt|;
try|try
block|{
name|String
name|query
init|=
literal|"let $a :=<test/>"
operator|+
literal|"let $b := xs:anyURI('/db/validate-test/test.nvdl')"
operator|+
literal|"return "
operator|+
literal|"validation:validate-report($a,$b)"
decl_stmt|;
name|result
operator|=
name|executeQuery
argument_list|(
name|query
argument_list|)
expr_stmt|;
name|r
operator|=
operator|(
name|String
operator|)
name|result
operator|.
name|getResource
argument_list|(
literal|0
argument_list|)
operator|.
name|getContent
argument_list|()
expr_stmt|;
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
name|r
argument_list|)
expr_stmt|;
name|assertXpathEvaluatesTo
argument_list|(
literal|"invalid"
argument_list|,
literal|"//status/text()"
argument_list|,
name|r
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|XMLDBException
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|error
argument_list|(
literal|"testONVDLFail(): "
operator|+
name|e
operator|.
name|getMessage
argument_list|()
argument_list|,
name|e
argument_list|)
expr_stmt|;
name|fail
argument_list|(
name|e
operator|.
name|getMessage
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Test
specifier|public
name|void
name|onvdl_stored_valid
parameter_list|()
block|{
name|String
name|query
init|=
literal|"validation:jing-report( doc('/db/validate-test/valid.xml'), doc('/db/validate-test/test.nvdl') )"
decl_stmt|;
try|try
block|{
name|ResourceSet
name|results
init|=
name|executeQuery
argument_list|(
name|query
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|results
operator|.
name|getSize
argument_list|()
argument_list|)
expr_stmt|;
name|String
name|r
init|=
operator|(
name|String
operator|)
name|results
operator|.
name|getResource
argument_list|(
literal|0
argument_list|)
operator|.
name|getContent
argument_list|()
decl_stmt|;
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
name|r
argument_list|)
expr_stmt|;
name|assertXpathEvaluatesTo
argument_list|(
literal|"valid"
argument_list|,
literal|"//status/text()"
argument_list|,
name|r
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|ex
parameter_list|)
block|{
name|LOG
operator|.
name|error
argument_list|(
name|ex
argument_list|)
expr_stmt|;
name|ex
operator|.
name|printStackTrace
argument_list|()
expr_stmt|;
name|fail
argument_list|(
name|ex
operator|.
name|getMessage
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Test
specifier|public
name|void
name|onvdl_stored_invalid
parameter_list|()
block|{
name|String
name|query
init|=
literal|"validation:jing-report( doc('/db/validate-test/invalid.xml'), doc('/db/validate-test/test.nvdl') )"
decl_stmt|;
try|try
block|{
name|ResourceSet
name|results
init|=
name|executeQuery
argument_list|(
name|query
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|results
operator|.
name|getSize
argument_list|()
argument_list|)
expr_stmt|;
name|String
name|r
init|=
operator|(
name|String
operator|)
name|results
operator|.
name|getResource
argument_list|(
literal|0
argument_list|)
operator|.
name|getContent
argument_list|()
decl_stmt|;
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
name|r
argument_list|)
expr_stmt|;
name|assertXpathEvaluatesTo
argument_list|(
literal|"invalid"
argument_list|,
literal|"//status/text()"
argument_list|,
name|r
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|ex
parameter_list|)
block|{
name|LOG
operator|.
name|error
argument_list|(
name|ex
argument_list|)
expr_stmt|;
name|fail
argument_list|(
name|ex
operator|.
name|getMessage
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Test
specifier|public
name|void
name|onvdl_anyuri_valid
parameter_list|()
block|{
name|String
name|query
init|=
literal|"validation:jing( xs:anyURI('xmldb:exist:///db/validate-test/valid.xml'), "
operator|+
literal|"xs:anyURI('xmldb:exist:///db/validate-test/test.nvdl') )"
decl_stmt|;
try|try
block|{
name|ResourceSet
name|results
init|=
name|executeQuery
argument_list|(
name|query
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|results
operator|.
name|getSize
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|query
argument_list|,
literal|"true"
argument_list|,
name|results
operator|.
name|getResource
argument_list|(
literal|0
argument_list|)
operator|.
name|getContent
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|ex
parameter_list|)
block|{
name|LOG
operator|.
name|error
argument_list|(
name|ex
argument_list|)
expr_stmt|;
name|fail
argument_list|(
name|ex
operator|.
name|getMessage
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Test
specifier|public
name|void
name|onvdl_anyuri_invalid
parameter_list|()
block|{
name|String
name|query
init|=
literal|"validation:jing( xs:anyURI('xmldb:exist:///db/validate-test/invalid.xml'), "
operator|+
literal|"xs:anyURI('xmldb:exist:///db/validate-test/test.nvdl') )"
decl_stmt|;
try|try
block|{
name|ResourceSet
name|results
init|=
name|executeQuery
argument_list|(
name|query
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|results
operator|.
name|getSize
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|query
argument_list|,
literal|"false"
argument_list|,
name|results
operator|.
name|getResource
argument_list|(
literal|0
argument_list|)
operator|.
name|getContent
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|ex
parameter_list|)
block|{
name|LOG
operator|.
name|error
argument_list|(
name|ex
argument_list|)
expr_stmt|;
name|fail
argument_list|(
name|ex
operator|.
name|getMessage
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
block|}
end_class

end_unit

