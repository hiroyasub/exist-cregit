begin_unit|revision:1.0.0;language:Java;cregit-version:0.0.1
begin_package
package|package
name|org
operator|.
name|exist
operator|.
name|xquery
operator|.
name|functions
operator|.
name|validate
package|;
end_package

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|After
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Before
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|*
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|storage
operator|.
name|DBBroker
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|xmldb
operator|.
name|DatabaseInstanceManager
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|xmldb
operator|.
name|XmldbURI
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|xquery
operator|.
name|XPathException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|xmldb
operator|.
name|api
operator|.
name|base
operator|.
name|Collection
import|;
end_import

begin_import
import|import
name|org
operator|.
name|xmldb
operator|.
name|api
operator|.
name|base
operator|.
name|Database
import|;
end_import

begin_import
import|import
name|org
operator|.
name|xmldb
operator|.
name|api
operator|.
name|DatabaseManager
import|;
end_import

begin_import
import|import
name|org
operator|.
name|xmldb
operator|.
name|api
operator|.
name|modules
operator|.
name|XPathQueryService
import|;
end_import

begin_import
import|import
name|org
operator|.
name|xmldb
operator|.
name|api
operator|.
name|base
operator|.
name|ResourceSet
import|;
end_import

begin_import
import|import
name|org
operator|.
name|xmldb
operator|.
name|api
operator|.
name|base
operator|.
name|XMLDBException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|xmlrpc
operator|.
name|client
operator|.
name|XmlRpcClient
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|xmlrpc
operator|.
name|client
operator|.
name|XmlRpcClientConfigImpl
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|custommonkey
operator|.
name|xmlunit
operator|.
name|XMLAssert
operator|.
name|assertXpathEvaluatesTo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|custommonkey
operator|.
name|xmlunit
operator|.
name|exceptions
operator|.
name|XpathException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|xml
operator|.
name|sax
operator|.
name|SAXException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_comment
comment|/**  *  * @author jim.fuller@webcomposite.com  */
end_comment

begin_class
specifier|public
class|class
name|ONVDLTest
block|{
specifier|private
name|XPathQueryService
name|service
decl_stmt|;
specifier|private
name|Collection
name|root
init|=
literal|null
decl_stmt|;
specifier|private
name|Database
name|database
init|=
literal|null
decl_stmt|;
specifier|private
specifier|final
specifier|static
name|String
name|RNG_DATA1
init|=
literal|"<element  name=\'Book\' xmlns='http://relaxng.org/ns/structure/1.0'  ns=\'http://www.books.org\'> "
operator|+
literal|"<element name=\'Title\'><text/></element>"
operator|+
literal|"<element name=\'Author\'><text/></element>"
operator|+
literal|"<element name=\'Date\'><text/></element>"
operator|+
literal|"<element name=\'ISBN\'><text/></element>"
operator|+
literal|"<element name=\'Publisher\'><text/></element>"
operator|+
literal|"</element>"
decl_stmt|;
specifier|private
specifier|final
specifier|static
name|String
name|NVDL_DATA1
init|=
literal|"<rules xmlns='http://purl.oclc.org/dsdl/nvdl/ns/structure/1.0'> "
operator|+
literal|"<namespace ns=\'http://www.books.org\'>"
operator|+
literal|"<validate schema=\"Book.rng\" />"
operator|+
literal|"</namespace>"
operator|+
literal|"</rules>"
decl_stmt|;
specifier|private
specifier|final
specifier|static
name|String
name|XML_DATA1
init|=
literal|"<Book xmlns='http://www.books.org'> "
operator|+
literal|"<Title>The Wisdom of Crowds</Title>"
operator|+
literal|"<Author>James Surowiecki</Author>"
operator|+
literal|"<Date>2005</Date>"
operator|+
literal|"<ISBN>0-385-72170-6</ISBN>"
operator|+
literal|"<Publisher>Anchor Books</Publisher>"
operator|+
literal|"</Book>"
decl_stmt|;
specifier|public
name|ONVDLTest
parameter_list|()
block|{
block|}
annotation|@
name|Before
specifier|public
name|void
name|setUp
parameter_list|()
throws|throws
name|Exception
block|{
comment|// initialize driver
name|Class
name|cl
init|=
name|Class
operator|.
name|forName
argument_list|(
literal|"org.exist.xmldb.DatabaseImpl"
argument_list|)
decl_stmt|;
name|database
operator|=
operator|(
name|Database
operator|)
name|cl
operator|.
name|newInstance
argument_list|()
expr_stmt|;
name|database
operator|.
name|setProperty
argument_list|(
literal|"create-database"
argument_list|,
literal|"true"
argument_list|)
expr_stmt|;
name|DatabaseManager
operator|.
name|registerDatabase
argument_list|(
name|database
argument_list|)
expr_stmt|;
name|root
operator|=
name|DatabaseManager
operator|.
name|getCollection
argument_list|(
literal|"xmldb:exist://"
operator|+
name|DBBroker
operator|.
name|ROOT_COLLECTION
argument_list|,
literal|"admin"
argument_list|,
literal|null
argument_list|)
expr_stmt|;
name|service
operator|=
operator|(
name|XPathQueryService
operator|)
name|root
operator|.
name|getService
argument_list|(
literal|"XQueryService"
argument_list|,
literal|"1.0"
argument_list|)
expr_stmt|;
name|String
name|query
init|=
literal|"xmldb:create-collection('xmldb:exist:///db','validate-test')"
decl_stmt|;
name|ResourceSet
name|result
init|=
name|service
operator|.
name|query
argument_list|(
name|query
argument_list|)
decl_stmt|;
name|String
name|query1
init|=
literal|"xmldb:store('/db/validate-test', 'test.nvdl',"
operator|+
name|NVDL_DATA1
operator|+
literal|")"
decl_stmt|;
name|ResourceSet
name|result1
init|=
name|service
operator|.
name|query
argument_list|(
name|query1
argument_list|)
decl_stmt|;
name|String
name|query2
init|=
literal|"xmldb:store('/db/validate-test', 'Book.rng',"
operator|+
name|RNG_DATA1
operator|+
literal|")"
decl_stmt|;
name|ResourceSet
name|result2
init|=
name|service
operator|.
name|query
argument_list|(
name|query2
argument_list|)
decl_stmt|;
block|}
annotation|@
name|After
specifier|public
name|void
name|tearDown
parameter_list|()
throws|throws
name|Exception
block|{
comment|// remove test collection
name|String
name|query
init|=
literal|"xmldb:remove('xmldb:exist:///db/validate-test')"
decl_stmt|;
name|ResourceSet
name|result
init|=
name|service
operator|.
name|query
argument_list|(
name|query
argument_list|)
decl_stmt|;
name|DatabaseManager
operator|.
name|deregisterDatabase
argument_list|(
name|database
argument_list|)
expr_stmt|;
name|DatabaseInstanceManager
name|dim
init|=
operator|(
name|DatabaseInstanceManager
operator|)
name|root
operator|.
name|getService
argument_list|(
literal|"DatabaseInstanceManager"
argument_list|,
literal|"1.0"
argument_list|)
decl_stmt|;
name|dim
operator|.
name|shutdown
argument_list|()
expr_stmt|;
comment|// clear instance variables
name|service
operator|=
literal|null
expr_stmt|;
name|root
operator|=
literal|null
expr_stmt|;
comment|//System.out.println("tearDown PASSED");
block|}
annotation|@
name|Test
specifier|public
name|void
name|testONVDL
parameter_list|()
throws|throws
name|XPathException
throws|,
name|IOException
throws|,
name|XpathException
throws|,
name|SAXException
block|{
name|ResourceSet
name|result
init|=
literal|null
decl_stmt|;
name|String
name|r
init|=
literal|""
decl_stmt|;
try|try
block|{
name|String
name|query
init|=
literal|"let $a := "
operator|+
name|XML_DATA1
operator|+
literal|"let $b := xs:anyURI('/db/validate-test/test.nvdl')"
operator|+
literal|"return "
operator|+
literal|"validation:validate-report($a,$b)"
decl_stmt|;
name|result
operator|=
name|service
operator|.
name|query
argument_list|(
name|query
argument_list|)
expr_stmt|;
name|r
operator|=
operator|(
name|String
operator|)
name|result
operator|.
name|getResource
argument_list|(
literal|0
argument_list|)
operator|.
name|getContent
argument_list|()
expr_stmt|;
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
name|r
argument_list|)
expr_stmt|;
name|assertXpathEvaluatesTo
argument_list|(
literal|"valid"
argument_list|,
literal|"//status/text()"
argument_list|,
name|r
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|XMLDBException
name|e
parameter_list|)
block|{
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"testONVDL(): "
operator|+
name|e
argument_list|)
expr_stmt|;
name|fail
argument_list|(
name|e
operator|.
name|getMessage
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Test
specifier|public
name|void
name|testONVDLFail
parameter_list|()
throws|throws
name|XPathException
throws|,
name|IOException
throws|,
name|XpathException
throws|,
name|SAXException
block|{
name|ResourceSet
name|result
init|=
literal|null
decl_stmt|;
name|String
name|r
init|=
literal|""
decl_stmt|;
try|try
block|{
name|String
name|query
init|=
literal|"let $a :=<test/>"
operator|+
literal|"let $b := xs:anyURI('/db/validate-test/test.nvdl')"
operator|+
literal|"return "
operator|+
literal|"validation:validate-report($a,$b)"
decl_stmt|;
name|result
operator|=
name|service
operator|.
name|query
argument_list|(
name|query
argument_list|)
expr_stmt|;
name|r
operator|=
operator|(
name|String
operator|)
name|result
operator|.
name|getResource
argument_list|(
literal|0
argument_list|)
operator|.
name|getContent
argument_list|()
expr_stmt|;
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
name|r
argument_list|)
expr_stmt|;
name|assertXpathEvaluatesTo
argument_list|(
literal|"invalid"
argument_list|,
literal|"//status/text()"
argument_list|,
name|r
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|XMLDBException
name|e
parameter_list|)
block|{
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"testONVDLFail(): "
operator|+
name|e
argument_list|)
expr_stmt|;
name|fail
argument_list|(
name|e
operator|.
name|getMessage
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
block|}
end_class

end_unit

