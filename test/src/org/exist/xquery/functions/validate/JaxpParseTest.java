begin_unit|revision:1.0.0;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  *  eXist Open Source Native XML Database  *  Copyright (C) 2009 The eXist Project  *  http://exist-db.org  *  *  This program is free software; you can redistribute it and/or  *  modify it under the terms of the GNU Lesser General Public License  *  as published by the Free Software Foundation; either version 2  *  of the License, or (at your option) any later version.  *  *  This program is distributed in the hope that it will be useful,  *  but WITHOUT ANY WARRANTY; without even the implied warranty of  *  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the  *  GNU Lesser General Public License for more details.  *  *  You should have received a copy of the GNU Lesser General Public  *  License along with this library; if not, write to the Free Software  *  Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA  02110-1301  USA  *  * $Id$  */
end_comment

begin_package
package|package
name|org
operator|.
name|exist
operator|.
name|xquery
operator|.
name|functions
operator|.
name|validate
package|;
end_package

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|*
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|*
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|custommonkey
operator|.
name|xmlunit
operator|.
name|XMLAssert
operator|.
name|assertXpathEvaluatesTo
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|File
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|FilenameFilter
import|;
end_import

begin_import
import|import
name|org
operator|.
name|custommonkey
operator|.
name|xmlunit
operator|.
name|Diff
import|;
end_import

begin_import
import|import
name|org
operator|.
name|custommonkey
operator|.
name|xmlunit
operator|.
name|XMLAssert
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|test
operator|.
name|EmbeddedExistTester
import|;
end_import

begin_import
import|import
name|org
operator|.
name|xmldb
operator|.
name|api
operator|.
name|base
operator|.
name|Collection
import|;
end_import

begin_import
import|import
name|org
operator|.
name|xmldb
operator|.
name|api
operator|.
name|base
operator|.
name|ResourceSet
import|;
end_import

begin_comment
comment|/**  * Tests for the validation:jaxp() function with Catalog (resolvers).  *   * @author dizzzz@exist-db.org  */
end_comment

begin_class
specifier|public
class|class
name|JaxpParseTest
extends|extends
name|EmbeddedExistTester
block|{
specifier|private
specifier|static
specifier|final
name|String
name|noValidation
init|=
literal|"<?xml version='1.0'?>"
operator|+
literal|"<collection xmlns=\"http://exist-db.org/collection-config/1.0\">"
operator|+
literal|"<validation mode=\"no\"/>"
operator|+
literal|"</collection>"
decl_stmt|;
annotation|@
name|BeforeClass
specifier|public
specifier|static
name|void
name|prepareResources
parameter_list|()
throws|throws
name|Exception
block|{
comment|// Switch off validation
name|Collection
name|conf
init|=
name|createCollection
argument_list|(
name|rootCollection
argument_list|,
literal|"system/config/db/parse_validate"
argument_list|)
decl_stmt|;
name|storeResource
argument_list|(
name|conf
argument_list|,
literal|"collection.xconf"
argument_list|,
name|noValidation
operator|.
name|getBytes
argument_list|()
argument_list|)
expr_stmt|;
comment|// Create filter
name|FilenameFilter
name|filter
init|=
operator|new
name|FilenameFilter
argument_list|()
block|{
specifier|public
name|boolean
name|accept
parameter_list|(
name|File
name|dir
parameter_list|,
name|String
name|name
parameter_list|)
block|{
return|return
operator|(
name|name
operator|.
name|startsWith
argument_list|(
literal|"default"
argument_list|)
operator|)
return|;
block|}
block|}
decl_stmt|;
name|Collection
name|schemasCollection
init|=
name|createCollection
argument_list|(
name|rootCollection
argument_list|,
literal|"parse_validate"
argument_list|)
decl_stmt|;
name|File
name|schemas
init|=
operator|new
name|File
argument_list|(
literal|"samples/validation/parse_validate"
argument_list|)
decl_stmt|;
for|for
control|(
name|File
name|file
range|:
name|schemas
operator|.
name|listFiles
argument_list|(
name|filter
argument_list|)
control|)
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"Storing "
operator|+
name|file
operator|.
name|getAbsolutePath
argument_list|()
argument_list|)
expr_stmt|;
name|byte
index|[]
name|data
init|=
name|readFile
argument_list|(
name|schemas
argument_list|,
name|file
operator|.
name|getName
argument_list|()
argument_list|)
decl_stmt|;
name|storeResource
argument_list|(
name|schemasCollection
argument_list|,
name|file
operator|.
name|getName
argument_list|()
argument_list|,
name|data
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Before
specifier|public
name|void
name|clearGrammarCache
parameter_list|()
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"Clearing grammar cache"
argument_list|)
expr_stmt|;
name|ResourceSet
name|results
init|=
literal|null
decl_stmt|;
try|try
block|{
name|results
operator|=
name|executeQuery
argument_list|(
literal|"validation:clear-grammar-cache()"
argument_list|)
expr_stmt|;
name|String
name|r
init|=
operator|(
name|String
operator|)
name|results
operator|.
name|getResource
argument_list|(
literal|0
argument_list|)
operator|.
name|getContent
argument_list|()
decl_stmt|;
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
name|r
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|error
argument_list|(
name|e
argument_list|)
expr_stmt|;
name|e
operator|.
name|printStackTrace
argument_list|()
expr_stmt|;
name|fail
argument_list|(
name|e
operator|.
name|getMessage
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
comment|/*      * ***********************************************************************************      */
annotation|@
name|Test
specifier|public
name|void
name|parse_and_fill_defaults
parameter_list|()
block|{
name|String
name|query
init|=
literal|"validation:pre-parse-grammar(xs:anyURI('/db/parse_validate/defaultValue.xsd'))"
decl_stmt|;
name|String
name|result
init|=
name|execute
argument_list|(
name|query
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|result
argument_list|,
literal|"defaultTest"
argument_list|)
expr_stmt|;
name|query
operator|=
literal|"declare option exist:serialize 'indent=no'; "
operator|+
literal|"validation:jaxp-parse(xs:anyURI('/db/parse_validate/defaultValue.xml'), true(), ())"
expr_stmt|;
name|result
operator|=
name|execute
argument_list|(
name|query
argument_list|)
expr_stmt|;
name|String
name|expected
init|=
literal|"<ns1:root xmlns:ns1=\"defaultTest\" xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\">\n"
operator|+
literal|"<color>red</color>\n"
operator|+
literal|"<shoesize country=\"nl\">43</shoesize>\n"
operator|+
literal|"</ns1:root>"
decl_stmt|;
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"Expected:"
operator|+
name|expected
argument_list|)
expr_stmt|;
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"Result:"
operator|+
name|result
argument_list|)
expr_stmt|;
try|try
block|{
name|XMLAssert
operator|.
name|assertXMLEqual
argument_list|(
name|expected
argument_list|,
name|result
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|ex
parameter_list|)
block|{
name|fail
argument_list|(
name|ex
operator|.
name|getMessage
argument_list|()
argument_list|)
expr_stmt|;
name|ex
operator|.
name|printStackTrace
argument_list|()
expr_stmt|;
block|}
block|}
specifier|private
name|String
name|execute
parameter_list|(
name|String
name|query
parameter_list|)
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"Query="
operator|+
name|query
argument_list|)
expr_stmt|;
name|String
name|retVal
init|=
literal|null
decl_stmt|;
try|try
block|{
name|ResourceSet
name|results
init|=
name|executeQuery
argument_list|(
name|query
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|results
operator|.
name|getSize
argument_list|()
argument_list|)
expr_stmt|;
name|retVal
operator|=
operator|(
name|String
operator|)
name|results
operator|.
name|getResource
argument_list|(
literal|0
argument_list|)
operator|.
name|getContent
argument_list|()
expr_stmt|;
name|LOG
operator|.
name|info
argument_list|(
name|retVal
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|ex
parameter_list|)
block|{
name|LOG
operator|.
name|error
argument_list|(
name|ex
argument_list|)
expr_stmt|;
name|fail
argument_list|(
name|ex
operator|.
name|getMessage
argument_list|()
argument_list|)
expr_stmt|;
block|}
return|return
name|retVal
return|;
block|}
block|}
end_class

end_unit

