begin_unit|revision:1.0.0;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  *  eXist Open Source Native XML Database  *  Copyright (C) 2009 The eXist Project  *  http://exist-db.org  *  *  This program is free software; you can redistribute it and/or  *  modify it under the terms of the GNU Lesser General Public License  *  as published by the Free Software Foundation; either version 2  *  of the License, or (at your option) any later version.  *  *  This program is distributed in the hope that it will be useful,  *  but WITHOUT ANY WARRANTY; without even the implied warranty of  *  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the  *  GNU Lesser General Public License for more details.  *  *  You should have received a copy of the GNU Lesser General Public  *  License along with this library; if not, write to the Free Software  *  Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA  02110-1301  USA  *  * $Id: JingSchematronTest.java 9705 2009-08-08 13:52:37Z dizzzz $  */
end_comment

begin_package
package|package
name|org
operator|.
name|exist
operator|.
name|xquery
operator|.
name|functions
operator|.
name|validate
package|;
end_package

begin_import
import|import
name|org
operator|.
name|custommonkey
operator|.
name|xmlunit
operator|.
name|exceptions
operator|.
name|XpathException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|util
operator|.
name|FileUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|*
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|*
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|custommonkey
operator|.
name|xmlunit
operator|.
name|XMLAssert
operator|.
name|assertXpathEvaluatesTo
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|nio
operator|.
name|file
operator|.
name|Path
import|;
end_import

begin_import
import|import
name|java
operator|.
name|nio
operator|.
name|file
operator|.
name|Paths
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|function
operator|.
name|Predicate
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|test
operator|.
name|EmbeddedExistTester
import|;
end_import

begin_import
import|import
name|org
operator|.
name|xml
operator|.
name|sax
operator|.
name|SAXException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|xmldb
operator|.
name|api
operator|.
name|base
operator|.
name|Collection
import|;
end_import

begin_import
import|import
name|org
operator|.
name|xmldb
operator|.
name|api
operator|.
name|base
operator|.
name|ResourceSet
import|;
end_import

begin_import
import|import
name|org
operator|.
name|xmldb
operator|.
name|api
operator|.
name|base
operator|.
name|XMLDBException
import|;
end_import

begin_comment
comment|/**  * Tests for the validation:jaxp() function with Catalog (resolvers).  *   * @author dizzzz@exist-db.org  */
end_comment

begin_class
specifier|public
class|class
name|JaxpDtdCatalogTest
extends|extends
name|EmbeddedExistTester
block|{
specifier|private
specifier|static
specifier|final
name|String
name|noValidation
init|=
literal|"<?xml version='1.0'?>"
operator|+
literal|"<collection xmlns=\"http://exist-db.org/collection-config/1.0\">"
operator|+
literal|"<validation mode=\"no\"/>"
operator|+
literal|"</collection>"
decl_stmt|;
annotation|@
name|BeforeClass
specifier|public
specifier|static
name|void
name|prepareResources
parameter_list|()
throws|throws
name|Exception
block|{
comment|// Switch off validation
name|Collection
name|conf
init|=
name|createCollection
argument_list|(
name|rootCollection
argument_list|,
literal|"system/config/db/parse"
argument_list|)
decl_stmt|;
name|storeResource
argument_list|(
name|conf
argument_list|,
literal|"collection.xconf"
argument_list|,
name|noValidation
operator|.
name|getBytes
argument_list|()
argument_list|)
expr_stmt|;
comment|// Create filter
specifier|final
name|Predicate
argument_list|<
name|Path
argument_list|>
name|filter
init|=
name|path
lambda|->
operator|(
name|FileUtils
operator|.
name|fileName
argument_list|(
name|path
argument_list|)
operator|.
name|endsWith
argument_list|(
literal|".dtd"
argument_list|)
operator|)
decl_stmt|;
specifier|final
name|Collection
name|dtdsCollection
init|=
name|createCollection
argument_list|(
name|rootCollection
argument_list|,
literal|"parse/dtds"
argument_list|)
decl_stmt|;
specifier|final
name|Path
name|schemas
init|=
name|Paths
operator|.
name|get
argument_list|(
literal|"samples/validation/parse/dtds"
argument_list|)
decl_stmt|;
for|for
control|(
specifier|final
name|Path
name|file
range|:
name|FileUtils
operator|.
name|list
argument_list|(
name|schemas
argument_list|,
name|filter
argument_list|)
control|)
block|{
specifier|final
name|byte
index|[]
name|data
init|=
name|readFile
argument_list|(
name|file
argument_list|)
decl_stmt|;
name|storeResource
argument_list|(
name|dtdsCollection
argument_list|,
name|FileUtils
operator|.
name|fileName
argument_list|(
name|file
argument_list|)
argument_list|,
name|data
argument_list|)
expr_stmt|;
block|}
specifier|final
name|Path
name|catalog
init|=
name|Paths
operator|.
name|get
argument_list|(
literal|"samples/validation/parse"
argument_list|)
decl_stmt|;
specifier|final
name|Collection
name|parseCollection
init|=
name|createCollection
argument_list|(
name|rootCollection
argument_list|,
literal|"parse"
argument_list|)
decl_stmt|;
specifier|final
name|byte
index|[]
name|data
init|=
name|readFile
argument_list|(
name|catalog
argument_list|,
literal|"catalog.xml"
argument_list|)
decl_stmt|;
name|storeResource
argument_list|(
name|parseCollection
argument_list|,
literal|"catalog.xml"
argument_list|,
name|data
argument_list|)
expr_stmt|;
specifier|final
name|Path
name|instance
init|=
name|Paths
operator|.
name|get
argument_list|(
literal|"samples/validation/parse/instance"
argument_list|)
decl_stmt|;
specifier|final
name|Collection
name|instanceCollection
init|=
name|createCollection
argument_list|(
name|rootCollection
argument_list|,
literal|"parse/instance"
argument_list|)
decl_stmt|;
specifier|final
name|byte
index|[]
name|valid
init|=
name|readFile
argument_list|(
name|instance
argument_list|,
literal|"valid-dtd.xml"
argument_list|)
decl_stmt|;
name|storeResource
argument_list|(
name|instanceCollection
argument_list|,
literal|"valid-dtd.xml"
argument_list|,
name|valid
argument_list|)
expr_stmt|;
specifier|final
name|byte
index|[]
name|invalid
init|=
name|readFile
argument_list|(
name|instance
argument_list|,
literal|"invalid-dtd.xml"
argument_list|)
decl_stmt|;
name|storeResource
argument_list|(
name|instanceCollection
argument_list|,
literal|"invalid-dtd.xml"
argument_list|,
name|invalid
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Before
specifier|public
name|void
name|clearGrammarCache
parameter_list|()
throws|throws
name|XMLDBException
block|{
name|ResourceSet
name|results
init|=
name|executeQuery
argument_list|(
literal|"validation:clear-grammar-cache()"
argument_list|)
decl_stmt|;
name|String
name|r
init|=
operator|(
name|String
operator|)
name|results
operator|.
name|getResource
argument_list|(
literal|0
argument_list|)
operator|.
name|getContent
argument_list|()
decl_stmt|;
block|}
comment|/*      * ***********************************************************************************      */
annotation|@
name|Test
specifier|public
name|void
name|dtd_stored_catalog_valid
parameter_list|()
throws|throws
name|XMLDBException
throws|,
name|SAXException
throws|,
name|XpathException
throws|,
name|IOException
block|{
name|String
name|query
init|=
literal|"validation:jaxp-report( "
operator|+
literal|"xs:anyURI('/db/parse/instance/valid-dtd.xml'), false(),"
operator|+
literal|"doc('/db/parse/catalog.xml') )"
decl_stmt|;
name|executeAndEvaluate
argument_list|(
name|query
argument_list|,
literal|"valid"
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|dtd_stored_catalog_invalid
parameter_list|()
throws|throws
name|XMLDBException
throws|,
name|SAXException
throws|,
name|XpathException
throws|,
name|IOException
block|{
name|String
name|query
init|=
literal|"validation:jaxp-report( "
operator|+
literal|"xs:anyURI('/db/parse/instance/invalid-dtd.xml'), false(),"
operator|+
literal|"doc('/db/parse/catalog.xml') )"
decl_stmt|;
name|executeAndEvaluate
argument_list|(
name|query
argument_list|,
literal|"invalid"
argument_list|)
expr_stmt|;
block|}
comment|/*      * ***********************************************************************************      */
annotation|@
name|Test
specifier|public
name|void
name|dtd_anyURI_catalog_valid
parameter_list|()
throws|throws
name|XMLDBException
throws|,
name|SAXException
throws|,
name|XpathException
throws|,
name|IOException
block|{
name|String
name|query
init|=
literal|"validation:jaxp-report( "
operator|+
literal|"xs:anyURI('/db/parse/instance/valid-dtd.xml'), false(),"
operator|+
literal|"xs:anyURI('/db/parse/catalog.xml') )"
decl_stmt|;
name|executeAndEvaluate
argument_list|(
name|query
argument_list|,
literal|"valid"
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|dtd_anyURI_catalog_invalid
parameter_list|()
throws|throws
name|XMLDBException
throws|,
name|SAXException
throws|,
name|XpathException
throws|,
name|IOException
block|{
name|String
name|query
init|=
literal|"validation:jaxp-report( "
operator|+
literal|"xs:anyURI('/db/parse/instance/invalid-dtd.xml'), false(),"
operator|+
literal|"xs:anyURI('/db/parse/catalog.xml') )"
decl_stmt|;
name|executeAndEvaluate
argument_list|(
name|query
argument_list|,
literal|"invalid"
argument_list|)
expr_stmt|;
block|}
comment|/*      * ***********************************************************************************      *      * DIZZZZ: doc('/db/parse/instance/valid-dtd.xml') does not work xs:anyURI does      *      */
annotation|@
name|Test
specifier|public
name|void
name|dtd_searched_valid
parameter_list|()
throws|throws
name|XMLDBException
throws|,
name|SAXException
throws|,
name|XpathException
throws|,
name|IOException
block|{
name|String
name|query
init|=
literal|"validation:jaxp-report( "
operator|+
literal|"xs:anyURI('/db/parse/instance/valid-dtd.xml'), false(),"
operator|+
literal|"xs:anyURI('/db/parse/') )"
decl_stmt|;
name|executeAndEvaluate
argument_list|(
name|query
argument_list|,
literal|"valid"
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|dtd_searched_invalid
parameter_list|()
throws|throws
name|XMLDBException
throws|,
name|SAXException
throws|,
name|XpathException
throws|,
name|IOException
block|{
name|String
name|query
init|=
literal|"validation:jaxp-report( "
operator|+
literal|"xs:anyURI('/db/parse/instance/invalid-dtd.xml'), false(),"
operator|+
literal|"xs:anyURI('/db/parse/') )"
decl_stmt|;
name|executeAndEvaluate
argument_list|(
name|query
argument_list|,
literal|"invalid"
argument_list|)
expr_stmt|;
block|}
specifier|private
name|void
name|executeAndEvaluate
parameter_list|(
name|String
name|query
parameter_list|,
name|String
name|expectedValue
parameter_list|)
throws|throws
name|XMLDBException
throws|,
name|SAXException
throws|,
name|IOException
throws|,
name|XpathException
block|{
name|ResourceSet
name|results
init|=
name|executeQuery
argument_list|(
name|query
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|results
operator|.
name|getSize
argument_list|()
argument_list|)
expr_stmt|;
name|String
name|r
init|=
operator|(
name|String
operator|)
name|results
operator|.
name|getResource
argument_list|(
literal|0
argument_list|)
operator|.
name|getContent
argument_list|()
decl_stmt|;
name|assertXpathEvaluatesTo
argument_list|(
name|expectedValue
argument_list|,
literal|"//status/text()"
argument_list|,
name|r
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

