begin_unit|revision:1.0.0;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * XMLNodeAsXQueryParameterTest.java  *  * 2005 by O2 IT Engineering  * Zurich,  Switzerland (CH)  */
end_comment

begin_package
package|package
name|org
operator|.
name|exist
operator|.
name|xquery
package|;
end_package

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|storage
operator|.
name|DBBroker
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|xmldb
operator|.
name|XQueryService
import|;
end_import

begin_import
import|import
name|org
operator|.
name|w3c
operator|.
name|dom
operator|.
name|Document
import|;
end_import

begin_import
import|import
name|org
operator|.
name|w3c
operator|.
name|dom
operator|.
name|Node
import|;
end_import

begin_import
import|import
name|org
operator|.
name|xml
operator|.
name|sax
operator|.
name|InputSource
import|;
end_import

begin_import
import|import
name|org
operator|.
name|xml
operator|.
name|sax
operator|.
name|SAXException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|xmldb
operator|.
name|api
operator|.
name|DatabaseManager
import|;
end_import

begin_import
import|import
name|org
operator|.
name|xmldb
operator|.
name|api
operator|.
name|base
operator|.
name|Collection
import|;
end_import

begin_import
import|import
name|org
operator|.
name|xmldb
operator|.
name|api
operator|.
name|base
operator|.
name|CompiledExpression
import|;
end_import

begin_import
import|import
name|org
operator|.
name|xmldb
operator|.
name|api
operator|.
name|base
operator|.
name|Database
import|;
end_import

begin_import
import|import
name|org
operator|.
name|xmldb
operator|.
name|api
operator|.
name|base
operator|.
name|ResourceSet
import|;
end_import

begin_import
import|import
name|org
operator|.
name|xmldb
operator|.
name|api
operator|.
name|base
operator|.
name|XMLDBException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|xmldb
operator|.
name|api
operator|.
name|modules
operator|.
name|XMLResource
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|StringReader
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|xml
operator|.
name|parsers
operator|.
name|DocumentBuilder
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|xml
operator|.
name|parsers
operator|.
name|DocumentBuilderFactory
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|xml
operator|.
name|parsers
operator|.
name|FactoryConfigurationError
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|xml
operator|.
name|parsers
operator|.
name|ParserConfigurationException
import|;
end_import

begin_import
import|import
name|junit
operator|.
name|framework
operator|.
name|TestCase
import|;
end_import

begin_comment
comment|/**  * Class to test eXist's capability to handle XML Nodes as XQuery parameter.  *  * @author Tobias Wunden  * @version 1.0  */
end_comment

begin_class
specifier|public
class|class
name|XMLNodeAsXQueryParameterTest
extends|extends
name|TestCase
block|{
comment|/** eXist database url */
specifier|static
specifier|final
name|String
name|eXistUrl
init|=
literal|"xmldb:exist://"
decl_stmt|;
specifier|public
specifier|static
name|void
name|main
parameter_list|(
name|String
index|[]
name|args
parameter_list|)
block|{
name|junit
operator|.
name|textui
operator|.
name|TestRunner
operator|.
name|run
argument_list|(
name|XMLNodeAsXQueryParameterTest
operator|.
name|class
argument_list|)
expr_stmt|;
block|}
comment|/** 	 * This test passes a W3C dom node as an xquery parameter to eXist and tries 	 * to read it back in: 	 *<ul> 	 *<li>Register a database instance</li> 	 *<li>Write a document to the database using the XQueryService</li> 	 *<li>Read the document from the database using XmlDB</li> 	 *<li>Check for the document content</li> 	 *</ul> 	 */
specifier|public
specifier|final
name|void
name|testXMLNodeAsXQueryParameter
parameter_list|()
block|{
name|Database
name|eXist
init|=
literal|null
decl_stmt|;
name|String
name|document
init|=
literal|"test.xml"
decl_stmt|;
try|try
block|{
name|eXist
operator|=
name|registerDatabase
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|XMLDBException
name|e
parameter_list|)
block|{
name|fail
argument_list|(
literal|"Unable to register database: "
operator|+
name|e
operator|.
name|getMessage
argument_list|()
argument_list|)
expr_stmt|;
block|}
comment|// Obtain XQuery service
name|XQueryService
name|service
init|=
literal|null
decl_stmt|;
try|try
block|{
name|service
operator|=
name|getXQueryService
argument_list|(
name|eXist
argument_list|)
expr_stmt|;
if|if
condition|(
name|service
operator|==
literal|null
condition|)
block|{
name|fail
argument_list|(
literal|"Failed to obtain xquery service instance!"
argument_list|)
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|fail
argument_list|(
literal|"Failed to obtain xquery service instance: "
operator|+
name|e
operator|.
name|getMessage
argument_list|()
argument_list|)
expr_stmt|;
block|}
comment|// create document
name|StringBuffer
name|xmlDocument
init|=
operator|new
name|StringBuffer
argument_list|()
decl_stmt|;
name|xmlDocument
operator|.
name|append
argument_list|(
literal|"<XmlNodeTest/>"
argument_list|)
expr_stmt|;
comment|// write document to the database
try|try
block|{
name|store
argument_list|(
name|xmlDocument
operator|.
name|toString
argument_list|()
argument_list|,
name|service
argument_list|,
name|document
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|fail
argument_list|(
literal|"Failed to write document to database: "
operator|+
name|e
operator|.
name|getMessage
argument_list|()
argument_list|)
expr_stmt|;
block|}
comment|// add content using XUpdate
name|StringBuffer
name|xmlData
init|=
operator|new
name|StringBuffer
argument_list|()
decl_stmt|;
name|xmlData
operator|.
name|append
argument_list|(
literal|"<content/>"
argument_list|)
expr_stmt|;
try|try
block|{
name|InputSource
name|is
init|=
operator|new
name|InputSource
argument_list|(
operator|new
name|StringReader
argument_list|(
name|xmlData
operator|.
name|toString
argument_list|()
argument_list|)
argument_list|)
decl_stmt|;
name|DocumentBuilder
name|docBuilder
init|=
name|DocumentBuilderFactory
operator|.
name|newInstance
argument_list|()
operator|.
name|newDocumentBuilder
argument_list|()
decl_stmt|;
name|Document
name|doc
init|=
name|docBuilder
operator|.
name|parse
argument_list|(
name|is
argument_list|)
decl_stmt|;
name|xupdate
argument_list|(
name|service
argument_list|,
name|doc
operator|.
name|getFirstChild
argument_list|()
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|SAXException
name|e
parameter_list|)
block|{
name|fail
argument_list|(
literal|"Error building dom tree: "
operator|+
name|e
operator|.
name|getMessage
argument_list|()
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
name|fail
argument_list|(
literal|"Error reading xml: "
operator|+
name|e
operator|.
name|getMessage
argument_list|()
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|ParserConfigurationException
name|e
parameter_list|)
block|{
name|fail
argument_list|(
literal|"Error parsing xml: "
operator|+
name|e
operator|.
name|getMessage
argument_list|()
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|FactoryConfigurationError
name|e
parameter_list|)
block|{
name|fail
argument_list|(
literal|"Error receiving dom factory: "
operator|+
name|e
operator|.
name|getMessage
argument_list|()
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|fail
argument_list|(
literal|"Failed to update document in database: "
operator|+
name|e
operator|.
name|getMessage
argument_list|()
argument_list|)
expr_stmt|;
block|}
comment|// read document back from database
name|Node
name|root
init|=
literal|null
decl_stmt|;
try|try
block|{
name|root
operator|=
name|load
argument_list|(
name|service
argument_list|,
name|document
argument_list|)
expr_stmt|;
if|if
condition|(
name|root
operator|==
literal|null
condition|)
block|{
name|fail
argument_list|(
literal|"Document "
operator|+
name|document
operator|+
literal|" was not found in the database!"
argument_list|)
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|fail
argument_list|(
literal|"Failed to write document to database: "
operator|+
name|e
operator|.
name|getMessage
argument_list|()
argument_list|)
expr_stmt|;
block|}
comment|// issue xpath query
try|try
block|{
name|Node
name|node
init|=
name|root
operator|.
name|getFirstChild
argument_list|()
decl_stmt|;
if|if
condition|(
name|node
operator|!=
literal|null
condition|)
block|{
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"Found '"
operator|+
name|node
operator|.
name|getNodeName
argument_list|()
operator|+
literal|"'"
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|fail
argument_list|(
literal|"XUpdate:append using w3c dom node failed! Content node was not returned."
argument_list|)
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|fail
argument_list|(
literal|"Failed to issue xpath on root node: "
operator|+
name|e
operator|.
name|getMessage
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
comment|/** 	 * Stores the given xml fragment into the database. 	 * 	 * @param xml the xml document 	 * @param service the xquery service 	 * @param document the document name 	 * @throws XMLDBException on database error 	 */
specifier|private
specifier|final
name|void
name|store
parameter_list|(
name|String
name|xml
parameter_list|,
name|XQueryService
name|service
parameter_list|,
name|String
name|document
parameter_list|)
throws|throws
name|XMLDBException
block|{
name|StringBuffer
name|query
init|=
operator|new
name|StringBuffer
argument_list|()
decl_stmt|;
name|query
operator|.
name|append
argument_list|(
literal|"xquery version \"1.0\";"
argument_list|)
expr_stmt|;
name|query
operator|.
name|append
argument_list|(
literal|"declare namespace xdb=\"http://exist-db.org/xquery/xmldb\";"
argument_list|)
expr_stmt|;
name|query
operator|.
name|append
argument_list|(
literal|"let $root := xdb:collection('"
operator|+
name|eXistUrl
operator|+
name|DBBroker
operator|.
name|ROOT_COLLECTION
operator|+
literal|"', 'admin', 'admin'),"
argument_list|)
expr_stmt|;
name|query
operator|.
name|append
argument_list|(
literal|"$doc := xdb:store($root, $document, $data)"
argument_list|)
expr_stmt|;
name|query
operator|.
name|append
argument_list|(
literal|"return<result/>"
argument_list|)
expr_stmt|;
name|service
operator|.
name|declareVariable
argument_list|(
literal|"document"
argument_list|,
name|document
argument_list|)
expr_stmt|;
name|service
operator|.
name|declareVariable
argument_list|(
literal|"data"
argument_list|,
name|xml
argument_list|)
expr_stmt|;
name|CompiledExpression
name|cQuery
init|=
name|service
operator|.
name|compile
argument_list|(
name|query
operator|.
name|toString
argument_list|()
argument_list|)
decl_stmt|;
name|service
operator|.
name|execute
argument_list|(
name|cQuery
argument_list|)
expr_stmt|;
block|}
comment|/** 	 * Updates the given xml fragment in the database using XUpdate. 	 * 	 * @param service the xquery service 	 * @param data the data node 	 * @throws XMLDBException on database error 	 */
specifier|private
specifier|final
name|void
name|xupdate
parameter_list|(
name|XQueryService
name|service
parameter_list|,
name|Object
name|data
parameter_list|)
throws|throws
name|XMLDBException
block|{
if|if
condition|(
name|data
operator|==
literal|null
condition|)
block|{
name|fail
argument_list|(
literal|"Cannot update because data is 'null'"
argument_list|)
expr_stmt|;
block|}
name|StringBuffer
name|query
init|=
operator|new
name|StringBuffer
argument_list|()
decl_stmt|;
name|query
operator|.
name|append
argument_list|(
literal|"xquery version \"1.0\";"
argument_list|)
expr_stmt|;
name|query
operator|.
name|append
argument_list|(
literal|"declare namespace xdb=\"http://exist-db.org/xquery/xmldb\";"
argument_list|)
expr_stmt|;
name|query
operator|.
name|append
argument_list|(
literal|"declare variable $xupdate {"
argument_list|)
expr_stmt|;
name|query
operator|.
name|append
argument_list|(
literal|"<xu:modifications version=\"1.0\" xmlns:xu=\"http://www.xmldb.org/xupdate\">"
argument_list|)
expr_stmt|;
name|query
operator|.
name|append
argument_list|(
literal|"<xu:append select=\"xcollection('"
operator|+
name|DBBroker
operator|.
name|ROOT_COLLECTION
operator|+
literal|"')/XmlNodeTest\">"
argument_list|)
expr_stmt|;
name|query
operator|.
name|append
argument_list|(
literal|"{$data}"
argument_list|)
expr_stmt|;
name|query
operator|.
name|append
argument_list|(
literal|"</xu:append>"
argument_list|)
expr_stmt|;
name|query
operator|.
name|append
argument_list|(
literal|"</xu:modifications>"
argument_list|)
expr_stmt|;
name|query
operator|.
name|append
argument_list|(
literal|"};"
argument_list|)
expr_stmt|;
name|query
operator|.
name|append
argument_list|(
literal|"let $root := xdb:collection('"
operator|+
name|eXistUrl
operator|+
name|DBBroker
operator|.
name|ROOT_COLLECTION
operator|+
literal|"', \"admin\", \"admin\"),"
argument_list|)
expr_stmt|;
name|query
operator|.
name|append
argument_list|(
literal|"$mods := xdb:update($root, $xupdate)"
argument_list|)
expr_stmt|;
name|query
operator|.
name|append
argument_list|(
literal|"return<modifications>{$mods}</modifications>"
argument_list|)
expr_stmt|;
name|service
operator|.
name|declareVariable
argument_list|(
literal|"data"
argument_list|,
name|data
argument_list|)
expr_stmt|;
name|CompiledExpression
name|cQuery
init|=
name|service
operator|.
name|compile
argument_list|(
name|query
operator|.
name|toString
argument_list|()
argument_list|)
decl_stmt|;
name|service
operator|.
name|execute
argument_list|(
name|cQuery
argument_list|)
expr_stmt|;
block|}
comment|/** 	 * Loads the xml document identified by<code>document</code> from the database. 	 * 	 * @param service the xquery service 	 * @param document the document to load 	 * @throws XMLDBException on database error 	 */
specifier|private
specifier|final
name|Node
name|load
parameter_list|(
name|XQueryService
name|service
parameter_list|,
name|String
name|document
parameter_list|)
throws|throws
name|XMLDBException
block|{
name|StringBuffer
name|query
init|=
operator|new
name|StringBuffer
argument_list|()
decl_stmt|;
name|query
operator|.
name|append
argument_list|(
literal|"xquery version \"1.0\";"
argument_list|)
expr_stmt|;
name|query
operator|.
name|append
argument_list|(
literal|"let $survey := document(concat('"
operator|+
name|DBBroker
operator|.
name|ROOT_COLLECTION
operator|+
literal|"', '/', $document))"
argument_list|)
expr_stmt|;
name|query
operator|.
name|append
argument_list|(
literal|"return ($survey)"
argument_list|)
expr_stmt|;
name|service
operator|.
name|declareVariable
argument_list|(
literal|"document"
argument_list|,
name|document
argument_list|)
expr_stmt|;
name|CompiledExpression
name|cQuery
init|=
name|service
operator|.
name|compile
argument_list|(
name|query
operator|.
name|toString
argument_list|()
argument_list|)
decl_stmt|;
name|ResourceSet
name|set
init|=
name|service
operator|.
name|execute
argument_list|(
name|cQuery
argument_list|)
decl_stmt|;
if|if
condition|(
name|set
operator|!=
literal|null
operator|&&
name|set
operator|.
name|getSize
argument_list|()
operator|>
literal|0
condition|)
block|{
return|return
operator|(
operator|(
name|XMLResource
operator|)
name|set
operator|.
name|getIterator
argument_list|()
operator|.
name|nextResource
argument_list|()
operator|)
operator|.
name|getContentAsDOM
argument_list|()
return|;
block|}
return|return
literal|null
return|;
block|}
comment|/** 	 * Registers a new database instance and returns it. 	 * 	 * @throws XMLDBException 	 */
specifier|private
specifier|final
name|Database
name|registerDatabase
parameter_list|()
throws|throws
name|XMLDBException
block|{
name|Class
name|driver
init|=
literal|null
decl_stmt|;
name|String
name|driverName
init|=
literal|"org.exist.xmldb.DatabaseImpl"
decl_stmt|;
try|try
block|{
name|driver
operator|=
name|Class
operator|.
name|forName
argument_list|(
name|driverName
argument_list|)
expr_stmt|;
name|Database
name|database
init|=
operator|(
name|Database
operator|)
name|driver
operator|.
name|newInstance
argument_list|()
decl_stmt|;
name|database
operator|.
name|setProperty
argument_list|(
literal|"create-database"
argument_list|,
literal|"true"
argument_list|)
expr_stmt|;
name|DatabaseManager
operator|.
name|registerDatabase
argument_list|(
name|database
argument_list|)
expr_stmt|;
return|return
name|database
return|;
block|}
catch|catch
parameter_list|(
name|ClassNotFoundException
name|e
parameter_list|)
block|{
name|System
operator|.
name|err
operator|.
name|println
argument_list|(
literal|"Driver class "
operator|+
name|driverName
operator|+
literal|" was not found!"
argument_list|)
expr_stmt|;
throw|throw
operator|new
name|XMLDBException
argument_list|()
throw|;
block|}
catch|catch
parameter_list|(
name|InstantiationException
name|e
parameter_list|)
block|{
name|System
operator|.
name|err
operator|.
name|println
argument_list|(
literal|"Driver class "
operator|+
name|driverName
operator|+
literal|" could not be instantiated!"
argument_list|)
expr_stmt|;
throw|throw
operator|new
name|XMLDBException
argument_list|()
throw|;
block|}
catch|catch
parameter_list|(
name|IllegalAccessException
name|e
parameter_list|)
block|{
name|System
operator|.
name|err
operator|.
name|println
argument_list|(
literal|"Access violation when trying to instantiate XMLDB Driver "
operator|+
name|driverName
operator|+
literal|"!"
argument_list|)
expr_stmt|;
throw|throw
operator|new
name|XMLDBException
argument_list|()
throw|;
block|}
block|}
comment|/** 	 * Retrieves the base collection and thereof returns a reference to the collection's 	 * xquery service. 	 * 	 * @param db the database 	 * @return the xquery service 	 * @throws XMLDBException on database error 	 */
specifier|private
specifier|final
name|XQueryService
name|getXQueryService
parameter_list|(
name|Database
name|db
parameter_list|)
throws|throws
name|XMLDBException
block|{
name|Collection
name|collection
init|=
name|DatabaseManager
operator|.
name|getCollection
argument_list|(
name|eXistUrl
operator|+
name|DBBroker
operator|.
name|ROOT_COLLECTION
argument_list|,
literal|"admin"
argument_list|,
literal|"admin"
argument_list|)
decl_stmt|;
if|if
condition|(
name|collection
operator|!=
literal|null
condition|)
block|{
name|XQueryService
name|service
init|=
operator|(
name|XQueryService
operator|)
name|collection
operator|.
name|getService
argument_list|(
literal|"XQueryService"
argument_list|,
literal|"1.0"
argument_list|)
decl_stmt|;
name|collection
operator|.
name|close
argument_list|()
expr_stmt|;
return|return
name|service
return|;
block|}
return|return
literal|null
return|;
block|}
block|}
end_class

end_unit

