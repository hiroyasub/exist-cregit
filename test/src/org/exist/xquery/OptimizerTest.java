begin_unit|revision:1.0.0;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  *  eXist Open Source Native XML Database  *  Copyright (C) 2001-07 The eXist Project  *  http://exist-db.org  *  *  This program is free software; you can redistribute it and/or  *  modify it under the terms of the GNU Lesser General Public License  *  as published by the Free Software Foundation; either version 2  *  of the License, or (at your option) any later version.  *  *  This program is distributed in the hope that it will be useful,  *  but WITHOUT ANY WARRANTY; without even the implied warranty of  *  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the  *  GNU Lesser General Public License for more details.  *  *  You should have received a copy of the GNU Lesser General Public License  *  along with this program; if not, write to the Free Software  *  Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301  USA  *   *  $Id$  */
end_comment

begin_package
package|package
name|org
operator|.
name|exist
operator|.
name|xquery
package|;
end_package

begin_import
import|import
name|com
operator|.
name|googlecode
operator|.
name|junittoolbox
operator|.
name|ParallelRunner
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|TestUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|test
operator|.
name|ExistEmbeddedServer
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|util
operator|.
name|FileUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|util
operator|.
name|XMLFilenameFilter
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|xmldb
operator|.
name|IndexQueryService
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|xmldb
operator|.
name|XmldbURI
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|*
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|runner
operator|.
name|RunWith
import|;
end_import

begin_import
import|import
name|org
operator|.
name|xmldb
operator|.
name|api
operator|.
name|DatabaseManager
import|;
end_import

begin_import
import|import
name|org
operator|.
name|xmldb
operator|.
name|api
operator|.
name|base
operator|.
name|Collection
import|;
end_import

begin_import
import|import
name|org
operator|.
name|xmldb
operator|.
name|api
operator|.
name|base
operator|.
name|Database
import|;
end_import

begin_import
import|import
name|org
operator|.
name|xmldb
operator|.
name|api
operator|.
name|base
operator|.
name|ResourceSet
import|;
end_import

begin_import
import|import
name|org
operator|.
name|xmldb
operator|.
name|api
operator|.
name|base
operator|.
name|XMLDBException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|xmldb
operator|.
name|api
operator|.
name|modules
operator|.
name|CollectionManagementService
import|;
end_import

begin_import
import|import
name|org
operator|.
name|xmldb
operator|.
name|api
operator|.
name|modules
operator|.
name|XMLResource
import|;
end_import

begin_import
import|import
name|org
operator|.
name|xmldb
operator|.
name|api
operator|.
name|modules
operator|.
name|XQueryService
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|nio
operator|.
name|file
operator|.
name|Path
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|exist
operator|.
name|util
operator|.
name|PropertiesBuilder
operator|.
name|propertiesBuilder
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertEquals
import|;
end_import

begin_comment
comment|/**  *   */
end_comment

begin_class
annotation|@
name|RunWith
argument_list|(
name|ParallelRunner
operator|.
name|class
argument_list|)
specifier|public
class|class
name|OptimizerTest
block|{
specifier|private
specifier|final
specifier|static
name|String
name|OPTIMIZE
init|=
literal|"declare option exist:optimize 'enable=yes';"
decl_stmt|;
specifier|private
specifier|final
specifier|static
name|String
name|NO_OPTIMIZE
init|=
literal|"declare option exist:optimize 'enable=no';"
decl_stmt|;
specifier|private
specifier|final
specifier|static
name|String
name|NAMESPACES
init|=
literal|"declare namespace mods='http://www.loc.gov/mods/v3';"
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|String
name|MSG_OPT_ERROR
init|=
literal|"Optimized query should return same number of results."
decl_stmt|;
specifier|private
specifier|final
specifier|static
name|String
name|XML
init|=
literal|"<root>"
operator|+
literal|"<a><b>one</b></a>"
operator|+
literal|"<a><c><b>one</b></c></a>"
operator|+
literal|"<c><a><c><b>two</b></c></a></c>"
operator|+
literal|"</root>"
decl_stmt|;
specifier|private
specifier|final
specifier|static
name|String
name|COLLECTION_CONFIG
init|=
literal|"<collection xmlns=\"http://exist-db.org/collection-config/1.0\">"
operator|+
literal|"<index xmlns:mods=\"http://www.loc.gov/mods/v3\">"
operator|+
literal|"<lucene>"
operator|+
literal|"<text qname=\"LINE\"/>"
operator|+
literal|"<text qname=\"SPEAKER\"/>"
operator|+
literal|"</lucene>"
operator|+
literal|"<create qname=\"b\" type=\"xs:string\"/>"
operator|+
literal|"<create qname=\"SPEAKER\" type=\"xs:string\"/>"
operator|+
literal|"<create qname=\"mods:internetMediaType\" type=\"xs:string\"/>"
operator|+
literal|"</index>"
operator|+
literal|"</collection>"
decl_stmt|;
specifier|private
specifier|static
name|Collection
name|testCollection
decl_stmt|;
annotation|@
name|Test
specifier|public
name|void
name|nestedQuery
parameter_list|()
throws|throws
name|XMLDBException
block|{
name|execute
argument_list|(
literal|"/root/a[descendant::b = 'one']"
argument_list|,
literal|true
argument_list|,
literal|"Inner b node should be returned."
argument_list|,
literal|2
argument_list|)
expr_stmt|;
name|execute
argument_list|(
literal|"/root/a[b = 'one']"
argument_list|,
literal|true
argument_list|,
literal|"Inner b node should not be returned."
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|execute
argument_list|(
literal|"/root/a[b = 'one']"
argument_list|,
literal|false
argument_list|,
literal|"Inner b node should not be returned."
argument_list|,
literal|1
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|simplePredicates
parameter_list|()
throws|throws
name|XMLDBException
block|{
name|long
name|r
init|=
name|execute
argument_list|(
literal|"//SPEECH[ft:query(LINE, 'king')]"
argument_list|,
literal|false
argument_list|)
decl_stmt|;
name|execute
argument_list|(
literal|"//SPEECH[ft:query(LINE, 'king')]"
argument_list|,
literal|true
argument_list|,
name|MSG_OPT_ERROR
argument_list|,
name|r
argument_list|)
expr_stmt|;
name|r
operator|=
name|execute
argument_list|(
literal|"//SPEECH[SPEAKER = 'HAMLET']"
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|execute
argument_list|(
literal|"//SPEECH[SPEAKER = 'HAMLET']"
argument_list|,
literal|true
argument_list|,
name|MSG_OPT_ERROR
argument_list|,
name|r
argument_list|)
expr_stmt|;
name|r
operator|=
name|execute
argument_list|(
literal|"//SPEECH[descendant::SPEAKER = 'HAMLET']"
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|execute
argument_list|(
literal|"//SPEECH[descendant::SPEAKER = 'HAMLET']"
argument_list|,
literal|true
argument_list|,
name|MSG_OPT_ERROR
argument_list|,
name|r
argument_list|)
expr_stmt|;
name|r
operator|=
name|execute
argument_list|(
literal|"//SCENE[ft:query(descendant::LINE, 'king')]"
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|execute
argument_list|(
literal|"//SCENE[ft:query(descendant::LINE, 'king')]"
argument_list|,
literal|true
argument_list|,
name|MSG_OPT_ERROR
argument_list|,
name|r
argument_list|)
expr_stmt|;
name|r
operator|=
name|execute
argument_list|(
literal|"//LINE[ft:query(., 'king')]"
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|execute
argument_list|(
literal|"//LINE[ft:query(., 'king')]"
argument_list|,
literal|true
argument_list|,
name|MSG_OPT_ERROR
argument_list|,
name|r
argument_list|)
expr_stmt|;
name|r
operator|=
name|execute
argument_list|(
literal|"//SPEAKER[. = 'HAMLET']"
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|execute
argument_list|(
literal|"//SPEAKER[. = 'HAMLET']"
argument_list|,
literal|true
argument_list|,
name|MSG_OPT_ERROR
argument_list|,
name|r
argument_list|)
expr_stmt|;
comment|//        r = execute("//LINE[descendant-or-self::LINE&= 'king']", false);
comment|//        execute("//LINE[descendant-or-self::LINE&= 'king']", true, MSG_OPT_ERROR, r);
name|r
operator|=
name|execute
argument_list|(
literal|"//SPEAKER[descendant-or-self::SPEAKER = 'HAMLET']"
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|execute
argument_list|(
literal|"//SPEAKER[descendant-or-self::SPEAKER = 'HAMLET']"
argument_list|,
literal|true
argument_list|,
name|MSG_OPT_ERROR
argument_list|,
name|r
argument_list|)
expr_stmt|;
name|r
operator|=
name|execute
argument_list|(
literal|"//SPEECH/LINE[ft:query(., 'king')]"
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|execute
argument_list|(
literal|"//SPEECH/LINE[ft:query(., 'king')]"
argument_list|,
literal|true
argument_list|,
name|MSG_OPT_ERROR
argument_list|,
name|r
argument_list|)
expr_stmt|;
name|r
operator|=
name|execute
argument_list|(
literal|"//*[ft:query(LINE, 'king')]"
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|execute
argument_list|(
literal|"//*[ft:query(LINE, 'king')]"
argument_list|,
literal|true
argument_list|,
name|MSG_OPT_ERROR
argument_list|,
name|r
argument_list|)
expr_stmt|;
name|r
operator|=
name|execute
argument_list|(
literal|"//*[SPEAKER = 'HAMLET']"
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|execute
argument_list|(
literal|"//*[SPEAKER = 'HAMLET']"
argument_list|,
literal|true
argument_list|,
name|MSG_OPT_ERROR
argument_list|,
name|r
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|simplePredicatesRegex
parameter_list|()
throws|throws
name|XMLDBException
block|{
name|long
name|r
init|=
name|execute
argument_list|(
literal|"//SPEECH[matches(SPEAKER, '^HAM.*')]"
argument_list|,
literal|false
argument_list|)
decl_stmt|;
name|execute
argument_list|(
literal|"//SPEECH[matches(SPEAKER, '^HAM.*')]"
argument_list|,
literal|true
argument_list|,
name|MSG_OPT_ERROR
argument_list|,
name|r
argument_list|)
expr_stmt|;
name|r
operator|=
name|execute
argument_list|(
literal|"//SPEECH[starts-with(SPEAKER, 'HAML')]"
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|execute
argument_list|(
literal|"//SPEECH[starts-with(SPEAKER, 'HAML')]"
argument_list|,
literal|true
argument_list|,
name|MSG_OPT_ERROR
argument_list|,
name|r
argument_list|)
expr_stmt|;
name|r
operator|=
name|execute
argument_list|(
literal|"//SPEECH[ends-with(SPEAKER, 'EO')]"
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|execute
argument_list|(
literal|"//SPEECH[ends-with(SPEAKER, 'EO')]"
argument_list|,
literal|true
argument_list|,
name|MSG_OPT_ERROR
argument_list|,
name|r
argument_list|)
expr_stmt|;
name|r
operator|=
name|execute
argument_list|(
literal|"//SPEECH[matches(descendant::SPEAKER, 'HAML.*')]"
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|execute
argument_list|(
literal|"//SPEECH[matches(descendant::SPEAKER, 'HAML.*')]"
argument_list|,
literal|true
argument_list|,
name|MSG_OPT_ERROR
argument_list|,
name|r
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|twoPredicates
parameter_list|()
throws|throws
name|XMLDBException
block|{
name|long
name|r
init|=
name|execute
argument_list|(
literal|"//SPEECH[ft:query(LINE, 'king')][SPEAKER='HAMLET']"
argument_list|,
literal|false
argument_list|)
decl_stmt|;
name|execute
argument_list|(
literal|"//SPEECH[ft:query(LINE, 'king')][SPEAKER='HAMLET']"
argument_list|,
literal|true
argument_list|,
name|MSG_OPT_ERROR
argument_list|,
name|r
argument_list|)
expr_stmt|;
name|r
operator|=
name|execute
argument_list|(
literal|"//SPEECH[SPEAKER='HAMLET'][ft:query(LINE, 'king')]"
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|execute
argument_list|(
literal|"//SPEECH[SPEAKER='HAMLET'][ft:query(LINE, 'king')]"
argument_list|,
literal|true
argument_list|,
name|MSG_OPT_ERROR
argument_list|,
name|r
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|twoPredicatesNPEBug808
parameter_list|()
throws|throws
name|XMLDBException
block|{
comment|// Bug #808 NPE $docs[ngram:contains(first, "luke")][ngram:contains(last, "sky")]
name|long
name|r
init|=
name|execute
argument_list|(
literal|"let $sps := collection('/db/test')//SPEECH return $sps[ngram:contains(SPEAKER, 'HAMLET')][ngram:contains(LINE, 'king')]"
argument_list|,
literal|false
argument_list|)
decl_stmt|;
name|execute
argument_list|(
literal|"let $sps := collection('/db/test')//SPEECH return $sps[ngram:contains(SPEAKER, 'HAMLET')][ngram:contains(LINE, 'king')]"
argument_list|,
literal|true
argument_list|,
name|MSG_OPT_ERROR
argument_list|,
name|r
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|noOptimization
parameter_list|()
throws|throws
name|XMLDBException
block|{
name|long
name|r
init|=
name|execute
argument_list|(
literal|"/root//b[parent::c/b = 'two']"
argument_list|,
literal|false
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|r
argument_list|)
expr_stmt|;
name|execute
argument_list|(
literal|"/root//b[parent::c/b = 'two']"
argument_list|,
literal|true
argument_list|,
literal|"Parent axis should not be optimized."
argument_list|,
name|r
argument_list|)
expr_stmt|;
name|r
operator|=
name|execute
argument_list|(
literal|"/root//b[ancestor::a/c/b = 'two']"
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|r
argument_list|)
expr_stmt|;
name|execute
argument_list|(
literal|"/root//b[ancestor::a/c/b = 'two']"
argument_list|,
literal|true
argument_list|,
literal|"Ancestor axis should not be optimized."
argument_list|,
name|r
argument_list|)
expr_stmt|;
name|r
operator|=
name|execute
argument_list|(
literal|"/root//b[ancestor::a/b = 'two']"
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|r
argument_list|)
expr_stmt|;
name|execute
argument_list|(
literal|"/root//b[ancestor::a/b = 'two']"
argument_list|,
literal|true
argument_list|,
literal|"Ancestor axis should not be optimized."
argument_list|,
name|r
argument_list|)
expr_stmt|;
name|r
operator|=
name|execute
argument_list|(
literal|"/root//b[text()/parent::b = 'two']"
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|r
argument_list|)
expr_stmt|;
name|execute
argument_list|(
literal|"/root//b[text()/parent::b = 'two']"
argument_list|,
literal|true
argument_list|,
literal|"Parent axis should not be optimized."
argument_list|,
name|r
argument_list|)
expr_stmt|;
name|r
operator|=
name|execute
argument_list|(
literal|"/root//b[matches(text()/parent::b, 'two')]"
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|r
argument_list|)
expr_stmt|;
name|execute
argument_list|(
literal|"/root//b[matches(text()/parent::b, 'two')]"
argument_list|,
literal|true
argument_list|,
literal|"Parent axis should not be optimized."
argument_list|,
name|r
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|reversePaths
parameter_list|()
throws|throws
name|XMLDBException
block|{
name|long
name|r
init|=
name|execute
argument_list|(
literal|"/root//b/parent::c[b = 'two']"
argument_list|,
literal|false
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|r
argument_list|)
expr_stmt|;
name|execute
argument_list|(
literal|"/root//b/parent::c[b = 'two']"
argument_list|,
literal|true
argument_list|,
name|MSG_OPT_ERROR
argument_list|,
name|r
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|reversePathsWithWildcard
parameter_list|()
throws|throws
name|XMLDBException
block|{
comment|//parent with wildcard
name|long
name|r
init|=
name|execute
argument_list|(
literal|"/root//b/parent::*[b = 'two']"
argument_list|,
literal|false
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|r
argument_list|)
expr_stmt|;
name|execute
argument_list|(
literal|"/root//b/parent::*[b = 'two']"
argument_list|,
literal|true
argument_list|,
name|MSG_OPT_ERROR
argument_list|,
name|r
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|booleanOperator
parameter_list|()
throws|throws
name|XMLDBException
block|{
name|long
name|r
init|=
name|execute
argument_list|(
literal|"//SPEECH[ft:query(LINE, 'king')][SPEAKER='HAMLET']"
argument_list|,
literal|false
argument_list|)
decl_stmt|;
name|execute
argument_list|(
literal|"//SPEECH[ft:query(LINE, 'king') and SPEAKER='HAMLET']"
argument_list|,
literal|false
argument_list|,
name|MSG_OPT_ERROR
argument_list|,
name|r
argument_list|)
expr_stmt|;
name|execute
argument_list|(
literal|"//SPEECH[ft:query(LINE, 'king') and SPEAKER='HAMLET']"
argument_list|,
literal|true
argument_list|,
name|MSG_OPT_ERROR
argument_list|,
name|r
argument_list|)
expr_stmt|;
name|r
operator|=
name|execute
argument_list|(
literal|"//SPEECH[ft:query(LINE, 'king') or SPEAKER='HAMLET']"
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|execute
argument_list|(
literal|"//SPEECH[ft:query(LINE, 'king') or SPEAKER='HAMLET']"
argument_list|,
literal|true
argument_list|,
name|MSG_OPT_ERROR
argument_list|,
name|r
argument_list|)
expr_stmt|;
name|r
operator|=
name|execute
argument_list|(
literal|"//SPEECH[ft:query(LINE, 'love') and ft:query(LINE, \"woman's\") and SPEAKER='HAMLET']"
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|execute
argument_list|(
literal|"//SPEECH[ft:query(LINE, 'love') and ft:query(LINE, \"woman's\") and SPEAKER='HAMLET']"
argument_list|,
literal|true
argument_list|,
name|MSG_OPT_ERROR
argument_list|,
name|r
argument_list|)
expr_stmt|;
name|r
operator|=
name|execute
argument_list|(
literal|"//SPEECH[(ft:query(LINE, 'king') or ft:query(LINE, 'love')) and SPEAKER='HAMLET']"
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|execute
argument_list|(
literal|"//SPEECH[(ft:query(LINE, 'king') or ft:query(LINE, 'love')) and SPEAKER='HAMLET']"
argument_list|,
literal|true
argument_list|,
name|MSG_OPT_ERROR
argument_list|,
name|r
argument_list|)
expr_stmt|;
name|r
operator|=
name|execute
argument_list|(
literal|"//SPEECH[(ft:query(LINE, 'juliet') and ft:query(LINE, 'romeo')) or SPEAKER='HAMLET']"
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|368
argument_list|,
name|r
argument_list|)
expr_stmt|;
name|execute
argument_list|(
literal|"//SPEECH[(ft:query(LINE, 'juliet') and ft:query(LINE, 'romeo')) or SPEAKER='HAMLET']"
argument_list|,
literal|true
argument_list|,
name|MSG_OPT_ERROR
argument_list|,
name|r
argument_list|)
expr_stmt|;
name|execute
argument_list|(
literal|"//SPEECH[true() and false()]"
argument_list|,
literal|true
argument_list|,
name|MSG_OPT_ERROR
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|execute
argument_list|(
literal|"//SPEECH[true() and true()]"
argument_list|,
literal|true
argument_list|,
name|MSG_OPT_ERROR
argument_list|,
literal|2628
argument_list|)
expr_stmt|;
block|}
specifier|private
name|long
name|execute
parameter_list|(
name|String
name|query
parameter_list|,
name|boolean
name|optimize
parameter_list|)
throws|throws
name|XMLDBException
block|{
name|XQueryService
name|service
init|=
operator|(
name|XQueryService
operator|)
name|testCollection
operator|.
name|getService
argument_list|(
literal|"XQueryService"
argument_list|,
literal|"1.0"
argument_list|)
decl_stmt|;
if|if
condition|(
name|optimize
condition|)
block|{
name|query
operator|=
name|OPTIMIZE
operator|+
name|query
expr_stmt|;
block|}
else|else
block|{
name|query
operator|=
name|NO_OPTIMIZE
operator|+
name|query
expr_stmt|;
block|}
name|query
operator|=
name|NAMESPACES
operator|+
name|query
expr_stmt|;
name|ResourceSet
name|result
init|=
name|service
operator|.
name|query
argument_list|(
name|query
argument_list|)
decl_stmt|;
return|return
name|result
operator|.
name|getSize
argument_list|()
return|;
block|}
specifier|private
name|void
name|execute
parameter_list|(
name|String
name|query
parameter_list|,
name|boolean
name|optimize
parameter_list|,
name|String
name|message
parameter_list|,
name|long
name|expected
parameter_list|)
throws|throws
name|XMLDBException
block|{
name|XQueryService
name|service
init|=
operator|(
name|XQueryService
operator|)
name|testCollection
operator|.
name|getService
argument_list|(
literal|"XQueryService"
argument_list|,
literal|"1.0"
argument_list|)
decl_stmt|;
if|if
condition|(
name|optimize
condition|)
block|{
name|query
operator|=
name|NAMESPACES
operator|+
name|OPTIMIZE
operator|+
name|query
expr_stmt|;
block|}
else|else
block|{
name|query
operator|=
name|NAMESPACES
operator|+
name|NO_OPTIMIZE
operator|+
name|query
expr_stmt|;
block|}
name|ResourceSet
name|result
init|=
name|service
operator|.
name|query
argument_list|(
name|query
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|message
argument_list|,
name|expected
argument_list|,
name|result
operator|.
name|getSize
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|ClassRule
specifier|public
specifier|static
specifier|final
name|ExistEmbeddedServer
name|existEmbeddedServer
init|=
operator|new
name|ExistEmbeddedServer
argument_list|(
name|propertiesBuilder
argument_list|()
operator|.
name|put
argument_list|(
name|FunctionFactory
operator|.
name|PROPERTY_DISABLE_DEPRECATED_FUNCTIONS
argument_list|,
name|Boolean
operator|.
name|FALSE
argument_list|)
comment|//Since we use the deprecated text:match-all() function, we have to be sure is is enabled
operator|.
name|build
argument_list|()
argument_list|,
literal|true
argument_list|,
literal|false
argument_list|)
decl_stmt|;
annotation|@
name|BeforeClass
specifier|public
specifier|static
name|void
name|initDatabase
parameter_list|()
throws|throws
name|ClassNotFoundException
throws|,
name|IllegalAccessException
throws|,
name|InstantiationException
throws|,
name|XMLDBException
throws|,
name|IOException
block|{
comment|// initialize driver
name|Class
argument_list|<
name|?
argument_list|>
name|cl
init|=
name|Class
operator|.
name|forName
argument_list|(
literal|"org.exist.xmldb.DatabaseImpl"
argument_list|)
decl_stmt|;
name|Database
name|database
init|=
operator|(
name|Database
operator|)
name|cl
operator|.
name|newInstance
argument_list|()
decl_stmt|;
name|database
operator|.
name|setProperty
argument_list|(
literal|"create-database"
argument_list|,
literal|"true"
argument_list|)
expr_stmt|;
name|DatabaseManager
operator|.
name|registerDatabase
argument_list|(
name|database
argument_list|)
expr_stmt|;
name|Collection
name|root
init|=
name|DatabaseManager
operator|.
name|getCollection
argument_list|(
name|XmldbURI
operator|.
name|LOCAL_DB
argument_list|,
literal|"admin"
argument_list|,
literal|""
argument_list|)
decl_stmt|;
name|CollectionManagementService
name|service
init|=
operator|(
name|CollectionManagementService
operator|)
name|root
operator|.
name|getService
argument_list|(
literal|"CollectionManagementService"
argument_list|,
literal|"1.0"
argument_list|)
decl_stmt|;
name|testCollection
operator|=
name|service
operator|.
name|createCollection
argument_list|(
literal|"test"
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertNotNull
argument_list|(
name|testCollection
argument_list|)
expr_stmt|;
name|IndexQueryService
name|idxConf
init|=
operator|(
name|IndexQueryService
operator|)
name|testCollection
operator|.
name|getService
argument_list|(
literal|"IndexQueryService"
argument_list|,
literal|"1.0"
argument_list|)
decl_stmt|;
name|idxConf
operator|.
name|configureCollection
argument_list|(
name|COLLECTION_CONFIG
argument_list|)
expr_stmt|;
name|XMLResource
name|resource
init|=
operator|(
name|XMLResource
operator|)
name|testCollection
operator|.
name|createResource
argument_list|(
literal|"test.xml"
argument_list|,
literal|"XMLResource"
argument_list|)
decl_stmt|;
name|resource
operator|.
name|setContent
argument_list|(
name|XML
argument_list|)
expr_stmt|;
name|testCollection
operator|.
name|storeResource
argument_list|(
name|resource
argument_list|)
expr_stmt|;
specifier|final
name|Path
name|dir
init|=
name|TestUtils
operator|.
name|shakespeareSamples
argument_list|()
decl_stmt|;
specifier|final
name|List
argument_list|<
name|Path
argument_list|>
name|files
init|=
name|FileUtils
operator|.
name|list
argument_list|(
name|dir
argument_list|,
name|XMLFilenameFilter
operator|.
name|asPredicate
argument_list|()
argument_list|)
decl_stmt|;
for|for
control|(
name|Path
name|file
range|:
name|files
control|)
block|{
name|resource
operator|=
operator|(
name|XMLResource
operator|)
name|testCollection
operator|.
name|createResource
argument_list|(
name|FileUtils
operator|.
name|fileName
argument_list|(
name|file
argument_list|)
argument_list|,
name|XMLResource
operator|.
name|RESOURCE_TYPE
argument_list|)
expr_stmt|;
name|resource
operator|.
name|setContent
argument_list|(
name|file
argument_list|)
expr_stmt|;
name|testCollection
operator|.
name|storeResource
argument_list|(
name|resource
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|AfterClass
specifier|public
specifier|static
name|void
name|cleanupDb
parameter_list|()
block|{
name|TestUtils
operator|.
name|cleanupDB
argument_list|()
expr_stmt|;
block|}
block|}
end_class

end_unit

