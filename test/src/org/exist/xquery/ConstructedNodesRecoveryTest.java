begin_unit|revision:1.0.0;language:Java;cregit-version:0.0.1
begin_package
package|package
name|org
operator|.
name|exist
operator|.
name|xquery
package|;
end_package

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|security
operator|.
name|SecurityManager
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|security
operator|.
name|xacml
operator|.
name|AccessContext
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|source
operator|.
name|StringSource
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|storage
operator|.
name|BrokerPool
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|storage
operator|.
name|DBBroker
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|storage
operator|.
name|txn
operator|.
name|TransactionManager
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|xquery
operator|.
name|value
operator|.
name|Sequence
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|util
operator|.
name|Configuration
import|;
end_import

begin_import
import|import
name|junit
operator|.
name|framework
operator|.
name|TestCase
import|;
end_import

begin_import
import|import
name|junit
operator|.
name|textui
operator|.
name|TestRunner
import|;
end_import

begin_comment
comment|/** Tests for recovery of database corruption after constructed node operations (in-memory nodes)  * @author Adam Retter<adam.retter@devon.gov.uk>  */
end_comment

begin_class
specifier|public
class|class
name|ConstructedNodesRecoveryTest
extends|extends
name|TestCase
block|{
specifier|private
specifier|final
specifier|static
name|String
name|xquery
init|=
literal|"declare variable $categories := \n"
operator|+
literal|"<categories>\n"
operator|+
literal|"<category uid=\"1\">Fruit</category>\n"
operator|+
literal|"<category uid=\"2\">Vegetable</category>\n"
operator|+
literal|"<category uid=\"3\">Meat</category>\n"
operator|+
literal|"<category uid=\"4\">Dairy</category>\n"
operator|+
literal|"</categories>\n"
operator|+
literal|";\n\n"
operator|+
literal|"for $category in $categories/category return\n"
operator|+
literal|"	element option {\n"
operator|+
literal|"		attribute value {\n"
operator|+
literal|"			$category/@uid\n"
operator|+
literal|"		},\n"
operator|+
literal|"		text { $category }\n"
operator|+
literal|"	}"
decl_stmt|;
specifier|private
specifier|final
specifier|static
name|String
name|expectedResults
index|[]
init|=
block|{
literal|"Fruit"
block|,
literal|"Vegetable"
block|,
literal|"Meat"
block|,
literal|"Dairy"
block|}
decl_stmt|;
specifier|public
specifier|static
name|void
name|main
parameter_list|(
name|String
index|[]
name|args
parameter_list|)
block|{
name|TestRunner
operator|.
name|run
argument_list|(
name|ConstructedNodesRecoveryTest
operator|.
name|class
argument_list|)
expr_stmt|;
block|}
comment|/** 	 * Issues a query against constructed nodes and then corrupts the database (intentionally) 	 */
specifier|public
name|void
name|testConstructedNodesCorrupt
parameter_list|()
block|{
name|constructedNodeQuery
argument_list|(
literal|true
argument_list|)
expr_stmt|;
block|}
comment|/** 	 * Recovers from corruption (intentional) and then issues a query against constructed nodes 	 */
specifier|public
name|void
name|testConstructedNodesRecover
parameter_list|()
block|{
name|constructedNodeQuery
argument_list|(
literal|false
argument_list|)
expr_stmt|;
block|}
comment|/** 	 * Performs a query against constructed nodes, with the option of forcefully corrupting the database 	 *  	 * @param forceCorruption	Should the database be forcefully corrupted 	 */
specifier|private
name|void
name|constructedNodeQuery
parameter_list|(
name|boolean
name|forceCorruption
parameter_list|)
block|{
name|BrokerPool
operator|.
name|FORCE_CORRUPTION
operator|=
name|forceCorruption
expr_stmt|;
name|BrokerPool
name|pool
init|=
literal|null
decl_stmt|;
name|DBBroker
name|broker
init|=
literal|null
decl_stmt|;
try|try
block|{
name|pool
operator|=
name|startDB
argument_list|()
expr_stmt|;
name|assertNotNull
argument_list|(
name|pool
argument_list|)
expr_stmt|;
name|broker
operator|=
name|pool
operator|.
name|get
argument_list|(
name|SecurityManager
operator|.
name|SYSTEM_USER
argument_list|)
expr_stmt|;
name|TransactionManager
name|transact
init|=
name|pool
operator|.
name|getTransactionManager
argument_list|()
decl_stmt|;
name|assertNotNull
argument_list|(
name|transact
argument_list|)
expr_stmt|;
name|XQuery
name|service
init|=
name|broker
operator|.
name|getXQueryService
argument_list|()
decl_stmt|;
name|assertNotNull
argument_list|(
name|service
argument_list|)
expr_stmt|;
name|CompiledXQuery
name|compiled
init|=
name|service
operator|.
name|compile
argument_list|(
name|service
operator|.
name|newContext
argument_list|(
name|AccessContext
operator|.
name|TEST
argument_list|)
argument_list|,
operator|new
name|StringSource
argument_list|(
name|xquery
argument_list|)
argument_list|)
decl_stmt|;
name|assertNotNull
argument_list|(
name|compiled
argument_list|)
expr_stmt|;
name|Sequence
name|result
init|=
name|service
operator|.
name|execute
argument_list|(
name|compiled
argument_list|,
literal|null
argument_list|)
decl_stmt|;
name|assertNotNull
argument_list|(
name|result
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|expectedResults
operator|.
name|length
argument_list|,
name|result
operator|.
name|getItemCount
argument_list|()
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|result
operator|.
name|getItemCount
argument_list|()
condition|;
name|i
operator|++
control|)
block|{
name|assertEquals
argument_list|(
name|expectedResults
index|[
name|i
index|]
argument_list|,
operator|(
name|String
operator|)
name|result
operator|.
name|itemAt
argument_list|(
name|i
argument_list|)
operator|.
name|getStringValue
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|transact
operator|.
name|getJournal
argument_list|()
operator|.
name|flushToLog
argument_list|(
literal|true
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|fail
argument_list|(
name|e
operator|.
name|getMessage
argument_list|()
argument_list|)
expr_stmt|;
name|e
operator|.
name|printStackTrace
argument_list|()
expr_stmt|;
block|}
finally|finally
block|{
if|if
condition|(
name|pool
operator|!=
literal|null
condition|)
name|pool
operator|.
name|release
argument_list|(
name|broker
argument_list|)
expr_stmt|;
block|}
block|}
specifier|protected
name|BrokerPool
name|startDB
parameter_list|()
block|{
try|try
block|{
name|Configuration
name|config
init|=
operator|new
name|Configuration
argument_list|()
decl_stmt|;
name|BrokerPool
operator|.
name|configure
argument_list|(
literal|1
argument_list|,
literal|5
argument_list|,
name|config
argument_list|)
expr_stmt|;
return|return
name|BrokerPool
operator|.
name|getInstance
argument_list|()
return|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|fail
argument_list|(
name|e
operator|.
name|getMessage
argument_list|()
argument_list|)
expr_stmt|;
block|}
return|return
literal|null
return|;
block|}
specifier|protected
name|void
name|tearDown
parameter_list|()
block|{
name|BrokerPool
operator|.
name|stopAll
argument_list|(
literal|false
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

