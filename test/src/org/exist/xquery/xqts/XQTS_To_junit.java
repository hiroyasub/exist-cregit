begin_unit|revision:1.0.0;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  *  eXist Open Source Native XML Database  *  Copyright (C) 2009-2013 The eXist Project  *  http://exist-db.org  *  *  This program is free software; you can redistribute it and/or  *  modify it under the terms of the GNU Lesser General Public License  *  as published by the Free Software Foundation; either version 2  *  of the License, or (at your option) any later version.  *  *  This program is distributed in the hope that it will be useful,  *  but WITHOUT ANY WARRANTY; without even the implied warranty of  *  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the  *  GNU Lesser General Public License for more details.  *  *  You should have received a copy of the GNU Lesser General Public  *  License along with this library; if not, write to the Free Software  *  Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA  02110-1301  USA  *  *  $Id$  */
end_comment

begin_package
package|package
name|org
operator|.
name|exist
operator|.
name|xquery
operator|.
name|xqts
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|InputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|Writer
import|;
end_import

begin_import
import|import
name|java
operator|.
name|nio
operator|.
name|file
operator|.
name|Files
import|;
end_import

begin_import
import|import
name|java
operator|.
name|nio
operator|.
name|file
operator|.
name|Path
import|;
end_import

begin_import
import|import
name|java
operator|.
name|nio
operator|.
name|file
operator|.
name|Paths
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Optional
import|;
end_import

begin_import
import|import
name|junit
operator|.
name|framework
operator|.
name|Assert
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|collections
operator|.
name|Collection
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|collections
operator|.
name|IndexInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|storage
operator|.
name|BrokerPool
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|storage
operator|.
name|DBBroker
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|storage
operator|.
name|txn
operator|.
name|TransactionManager
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|storage
operator|.
name|txn
operator|.
name|Txn
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|util
operator|.
name|*
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|xmldb
operator|.
name|XmldbURI
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|xquery
operator|.
name|XQuery
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|xquery
operator|.
name|value
operator|.
name|Sequence
import|;
end_import

begin_comment
comment|/**  * JUnit tests generator from XQTS Catalog.  *   * @author<a href="mailto:shabanovd@gmail.com">Dmitriy Shabanov</a>  *  */
end_comment

begin_class
specifier|public
class|class
name|XQTS_To_junit
block|{
comment|/**      * @param args      * @throws Exception       */
specifier|public
specifier|static
name|void
name|main
parameter_list|(
name|String
index|[]
name|args
parameter_list|)
throws|throws
name|Exception
block|{
name|XQTS_To_junit
name|convertor
init|=
operator|new
name|XQTS_To_junit
argument_list|()
decl_stmt|;
try|try
block|{
name|convertor
operator|.
name|startup
argument_list|()
expr_stmt|;
name|convertor
operator|.
name|load
argument_list|()
expr_stmt|;
name|convertor
operator|.
name|create
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|e
operator|.
name|printStackTrace
argument_list|()
expr_stmt|;
block|}
finally|finally
block|{
name|convertor
operator|.
name|shutdown
argument_list|()
expr_stmt|;
block|}
block|}
specifier|private
name|BrokerPool
name|db
init|=
literal|null
decl_stmt|;
specifier|private
name|DBBroker
name|broker
init|=
literal|null
decl_stmt|;
specifier|private
name|Collection
name|collection
init|=
literal|null
decl_stmt|;
specifier|public
name|void
name|startup
parameter_list|()
throws|throws
name|Exception
block|{
name|Configuration
name|configuration
init|=
operator|new
name|Configuration
argument_list|()
decl_stmt|;
name|BrokerPool
operator|.
name|configure
argument_list|(
literal|1
argument_list|,
literal|10
argument_list|,
name|configuration
argument_list|)
expr_stmt|;
name|init
argument_list|()
expr_stmt|;
block|}
specifier|public
name|void
name|init
parameter_list|()
throws|throws
name|Exception
block|{
name|db
operator|=
name|BrokerPool
operator|.
name|getInstance
argument_list|()
expr_stmt|;
name|broker
operator|=
name|db
operator|.
name|get
argument_list|(
name|Optional
operator|.
name|of
argument_list|(
name|db
operator|.
name|getSecurityManager
argument_list|()
operator|.
name|getSystemSubject
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertNotNull
argument_list|(
name|broker
argument_list|)
expr_stmt|;
name|collection
operator|=
name|broker
operator|.
name|getOrCreateCollection
argument_list|(
literal|null
argument_list|,
name|XQTS_case
operator|.
name|XQTS_URI
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertNotNull
argument_list|(
name|collection
argument_list|)
expr_stmt|;
name|broker
operator|.
name|saveCollection
argument_list|(
literal|null
argument_list|,
name|collection
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|release
parameter_list|()
throws|throws
name|Exception
block|{
if|if
condition|(
name|broker
operator|!=
literal|null
condition|)
block|{
name|broker
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
block|}
specifier|public
name|void
name|shutdown
parameter_list|()
throws|throws
name|Exception
block|{
name|release
argument_list|()
expr_stmt|;
name|db
operator|.
name|shutdown
argument_list|()
expr_stmt|;
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"database was shutdownDB"
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|load
parameter_list|()
throws|throws
name|Exception
block|{
specifier|final
name|Path
name|folder
init|=
name|Paths
operator|.
name|get
argument_list|(
name|XQTS_case
operator|.
name|XQTS_folder
argument_list|)
decl_stmt|;
specifier|final
name|List
argument_list|<
name|Path
argument_list|>
name|files
init|=
name|FileUtils
operator|.
name|list
argument_list|(
name|folder
argument_list|)
decl_stmt|;
for|for
control|(
specifier|final
name|Path
name|file
range|:
name|files
control|)
block|{
specifier|final
name|String
name|fileName
init|=
name|FileUtils
operator|.
name|fileName
argument_list|(
name|file
argument_list|)
decl_stmt|;
if|if
condition|(
name|Files
operator|.
name|isDirectory
argument_list|(
name|file
argument_list|)
condition|)
block|{
if|if
condition|(
name|fileName
operator|.
name|equals
argument_list|(
literal|"CVS"
argument_list|)
operator|||
name|fileName
operator|.
name|equals
argument_list|(
literal|"drivers"
argument_list|)
condition|)
block|{
continue|continue;
comment|//ignore
block|}
name|loadDirectory
argument_list|(
name|file
argument_list|,
name|collection
argument_list|)
expr_stmt|;
block|}
else|else
block|{
if|if
condition|(
name|fileName
operator|.
name|equals
argument_list|(
literal|".project"
argument_list|)
condition|)
block|{
continue|continue;
comment|//ignore
block|}
name|loadFile
argument_list|(
name|file
argument_list|,
name|collection
argument_list|)
expr_stmt|;
block|}
block|}
block|}
specifier|private
name|void
name|loadDirectory
parameter_list|(
specifier|final
name|Path
name|folder
parameter_list|,
specifier|final
name|Collection
name|col
parameter_list|)
throws|throws
name|Exception
block|{
if|if
condition|(
operator|!
operator|(
name|Files
operator|.
name|exists
argument_list|(
name|folder
argument_list|)
operator|&&
name|Files
operator|.
name|isReadable
argument_list|(
name|folder
argument_list|)
operator|)
condition|)
block|{
return|return;
block|}
specifier|final
name|Collection
name|current
init|=
name|broker
operator|.
name|getOrCreateCollection
argument_list|(
literal|null
argument_list|,
name|col
operator|.
name|getURI
argument_list|()
operator|.
name|append
argument_list|(
name|FileUtils
operator|.
name|fileName
argument_list|(
name|folder
argument_list|)
argument_list|)
argument_list|)
decl_stmt|;
name|broker
operator|.
name|saveCollection
argument_list|(
literal|null
argument_list|,
name|current
argument_list|)
expr_stmt|;
specifier|final
name|List
argument_list|<
name|Path
argument_list|>
name|files
init|=
name|FileUtils
operator|.
name|list
argument_list|(
name|folder
argument_list|)
decl_stmt|;
if|if
condition|(
name|files
operator|==
literal|null
condition|)
block|{
return|return;
block|}
for|for
control|(
specifier|final
name|Path
name|file
range|:
name|files
control|)
block|{
if|if
condition|(
name|Files
operator|.
name|isDirectory
argument_list|(
name|file
argument_list|)
condition|)
block|{
if|if
condition|(
name|FileUtils
operator|.
name|fileName
argument_list|(
name|file
argument_list|)
operator|.
name|equals
argument_list|(
literal|"CVS"
argument_list|)
condition|)
block|{
continue|continue;
comment|//ignore
block|}
name|loadDirectory
argument_list|(
name|file
argument_list|,
name|current
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|loadFile
argument_list|(
name|file
argument_list|,
name|current
argument_list|)
expr_stmt|;
block|}
block|}
block|}
specifier|private
name|void
name|loadFile
parameter_list|(
specifier|final
name|Path
name|file
parameter_list|,
specifier|final
name|Collection
name|col
parameter_list|)
throws|throws
name|Exception
block|{
specifier|final
name|String
name|fileName
init|=
name|FileUtils
operator|.
name|fileName
argument_list|(
name|file
argument_list|)
decl_stmt|;
if|if
condition|(
name|fileName
operator|.
name|endsWith
argument_list|(
literal|".html"
argument_list|)
operator|||
name|fileName
operator|.
name|endsWith
argument_list|(
literal|".xsd"
argument_list|)
condition|)
block|{
return|return;
block|}
if|if
condition|(
operator|!
operator|(
name|Files
operator|.
name|exists
argument_list|(
name|file
argument_list|)
operator|&&
name|Files
operator|.
name|isReadable
argument_list|(
name|file
argument_list|)
operator|)
condition|)
block|{
return|return;
block|}
specifier|final
name|TransactionManager
name|txManager
init|=
name|db
operator|.
name|getTransactionManager
argument_list|()
decl_stmt|;
try|try
init|(
specifier|final
name|Txn
name|txn
init|=
name|txManager
operator|.
name|beginTransaction
argument_list|()
init|)
block|{
specifier|final
name|MimeType
name|mime
init|=
name|getMimeTable
argument_list|()
operator|.
name|getContentTypeFor
argument_list|(
name|FileUtils
operator|.
name|fileName
argument_list|(
name|file
argument_list|)
argument_list|)
decl_stmt|;
if|if
condition|(
name|mime
operator|!=
literal|null
operator|&&
name|mime
operator|.
name|isXMLType
argument_list|()
condition|)
block|{
specifier|final
name|IndexInfo
name|info
init|=
name|col
operator|.
name|validateXMLResource
argument_list|(
name|txn
argument_list|,
name|broker
argument_list|,
name|XmldbURI
operator|.
name|create
argument_list|(
name|FileUtils
operator|.
name|fileName
argument_list|(
name|file
argument_list|)
argument_list|)
argument_list|,
operator|new
name|FileInputSource
argument_list|(
name|file
argument_list|)
argument_list|)
decl_stmt|;
comment|//info.getDocument().getMetadata().setMimeType();
name|col
operator|.
name|store
argument_list|(
name|txn
argument_list|,
name|broker
argument_list|,
name|info
argument_list|,
operator|new
name|FileInputSource
argument_list|(
name|file
argument_list|)
argument_list|)
expr_stmt|;
block|}
else|else
block|{
try|try
init|(
specifier|final
name|InputStream
name|is
init|=
name|Files
operator|.
name|newInputStream
argument_list|(
name|file
argument_list|)
init|)
block|{
name|col
operator|.
name|addBinaryResource
argument_list|(
name|txn
argument_list|,
name|broker
argument_list|,
name|XmldbURI
operator|.
name|create
argument_list|(
name|FileUtils
operator|.
name|fileName
argument_list|(
name|file
argument_list|)
argument_list|)
argument_list|,
name|is
argument_list|,
name|MimeType
operator|.
name|BINARY_TYPE
operator|.
name|getName
argument_list|()
argument_list|,
name|FileUtils
operator|.
name|sizeQuietly
argument_list|(
name|file
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
name|txManager
operator|.
name|commit
argument_list|(
name|txn
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"fail to load file "
operator|+
name|FileUtils
operator|.
name|fileName
argument_list|(
name|file
argument_list|)
argument_list|)
expr_stmt|;
name|e
operator|.
name|printStackTrace
argument_list|()
expr_stmt|;
block|}
block|}
specifier|private
name|MimeTable
name|mtable
init|=
literal|null
decl_stmt|;
specifier|private
name|MimeTable
name|getMimeTable
parameter_list|()
block|{
if|if
condition|(
name|mtable
operator|==
literal|null
condition|)
block|{
name|mtable
operator|=
name|MimeTable
operator|.
name|getInstance
argument_list|()
expr_stmt|;
block|}
return|return
name|mtable
return|;
block|}
specifier|public
name|void
name|create
parameter_list|()
throws|throws
name|Exception
block|{
name|Optional
argument_list|<
name|Path
argument_list|>
name|file
init|=
name|ConfigurationHelper
operator|.
name|getExistHome
argument_list|()
decl_stmt|;
name|Path
name|folder
init|=
name|FileUtils
operator|.
name|resolve
argument_list|(
name|file
argument_list|,
literal|"test/src/org/exist/xquery/xqts"
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|Files
operator|.
name|isReadable
argument_list|(
name|folder
argument_list|)
condition|)
block|{
throw|throw
operator|new
name|IOException
argument_list|(
literal|"XQTS junit tests folder unreadable."
argument_list|)
throw|;
block|}
name|String
name|query
init|=
literal|"declare namespace catalog=\"http://www.w3.org/2005/02/query-test-XQTSCatalog\";"
operator|+
literal|"let $XQTSCatalog := xmldb:document('/db/XQTS/XQTSCatalog.xml') "
operator|+
literal|"return xs:string($XQTSCatalog/catalog:test-suite/@version)"
decl_stmt|;
name|XQuery
name|xqs
init|=
name|db
operator|.
name|getXQueryService
argument_list|()
decl_stmt|;
name|Sequence
name|results
init|=
name|xqs
operator|.
name|execute
argument_list|(
name|broker
argument_list|,
name|query
argument_list|,
literal|null
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|results
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|String
name|catalog
init|=
operator|(
name|String
operator|)
name|results
operator|.
name|itemAt
argument_list|(
literal|0
argument_list|)
operator|.
name|getStringValue
argument_list|()
decl_stmt|;
name|catalog
operator|=
literal|"XQTS_"
operator|+
name|adoptString
argument_list|(
name|catalog
argument_list|)
expr_stmt|;
name|Path
name|subfolder
init|=
name|folder
operator|.
name|resolve
argument_list|(
name|catalog
argument_list|)
decl_stmt|;
name|processGroups
argument_list|(
literal|null
argument_list|,
name|subfolder
argument_list|,
literal|"."
operator|+
name|catalog
argument_list|)
expr_stmt|;
block|}
block|}
comment|//    private void loadXQTS() {
comment|//        File buildFile = new File("webapp/xqts/build.xml");
comment|//        //File xqtsFile = new File("webapp/xqts/build.xml");
comment|//        Project p = new Project();
comment|//        p.setUserProperty("ant.file", buildFile.getAbsolutePath());
comment|//        p.setUserProperty("config.basedir", "../../"+XQTS_case.XQTS_folder);
comment|//        DefaultLogger consoleLogger = new DefaultLogger();
comment|//        consoleLogger.setErrorPrintStream(System.err);
comment|//        consoleLogger.setOutputPrintStream(System.out);
comment|//        consoleLogger.setMessageOutputLevel(Project.MSG_INFO);
comment|//        p.addBuildListener(consoleLogger);
comment|//
comment|//        try {
comment|//            p.fireBuildStarted();
comment|//            p.init();
comment|//            ProjectHelper helper = ProjectHelper.getProjectHelper();
comment|//            p.addReference("ant.projectHelper", helper);
comment|//            helper.parse(p, buildFile);
comment|//            p.executeTarget("store");
comment|//            p.fireBuildFinished(null);
comment|//            Thread.sleep(60*1000);
comment|//        } catch (BuildException e) {
comment|//            p.fireBuildFinished(e);
comment|//        } catch (InterruptedException e) {
comment|//            //Nothing to do
comment|//        }
comment|//    }
specifier|private
name|boolean
name|processGroups
parameter_list|(
name|String
name|parentName
parameter_list|,
name|Path
name|folder
parameter_list|,
name|String
name|_package_
parameter_list|)
throws|throws
name|Exception
block|{
name|String
name|query
init|=
literal|"declare namespace catalog=\"http://www.w3.org/2005/02/query-test-XQTSCatalog\";"
operator|+
literal|"let $XQTSCatalog := xmldb:document('/db/XQTS/XQTSCatalog.xml')"
decl_stmt|;
if|if
condition|(
name|parentName
operator|==
literal|null
condition|)
name|query
operator|+=
literal|"for $testGroup in $XQTSCatalog/catalog:test-suite/catalog:test-group"
expr_stmt|;
else|else
name|query
operator|+=
literal|"for $testGroup in $XQTSCatalog//catalog:test-group[@name = '"
operator|+
name|parentName
operator|+
literal|"']/catalog:test-group"
expr_stmt|;
name|query
operator|+=
literal|"\treturn xs:string($testGroup/@name)"
expr_stmt|;
name|XQuery
name|xqs
init|=
name|db
operator|.
name|getXQueryService
argument_list|()
decl_stmt|;
name|Sequence
name|results
init|=
name|xqs
operator|.
name|execute
argument_list|(
name|broker
argument_list|,
name|query
argument_list|,
literal|null
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|results
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|Path
name|subfolder
decl_stmt|;
name|String
name|subPackage
decl_stmt|;
comment|//if (parentName == null) {
comment|//subfolder = folder;
comment|//subPackage = _package_;
comment|//} else {
comment|//subfolder = new File(folder.getAbsolutePath()+sep+parentName);
comment|//subPackage = _package_+"."+adoptString(parentName);
comment|//}
try|try
init|(
specifier|final
name|Writer
name|allTests
init|=
name|startAllTests
argument_list|(
name|folder
argument_list|,
name|_package_
argument_list|)
init|)
block|{
name|boolean
name|first
init|=
literal|true
decl_stmt|;
if|if
condition|(
name|testCases
argument_list|(
name|parentName
argument_list|,
name|folder
argument_list|,
name|_package_
argument_list|)
condition|)
block|{
if|if
condition|(
operator|!
name|first
condition|)
name|allTests
operator|.
name|write
argument_list|(
literal|",\n"
argument_list|)
expr_stmt|;
else|else
name|first
operator|=
literal|false
expr_stmt|;
name|allTests
operator|.
name|write
argument_list|(
literal|"\t\tC_"
operator|+
name|adoptString
argument_list|(
name|parentName
argument_list|)
operator|+
literal|".class"
argument_list|)
expr_stmt|;
block|}
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|results
operator|.
name|getItemCount
argument_list|()
condition|;
name|i
operator|++
control|)
block|{
name|String
name|groupName
init|=
name|results
operator|.
name|itemAt
argument_list|(
name|i
argument_list|)
operator|.
name|getStringValue
argument_list|()
decl_stmt|;
name|subfolder
operator|=
name|folder
operator|.
name|resolve
argument_list|(
name|groupName
argument_list|)
expr_stmt|;
name|subPackage
operator|=
name|_package_
operator|+
literal|"."
operator|+
name|adoptString
argument_list|(
name|groupName
argument_list|)
expr_stmt|;
if|if
condition|(
name|processGroups
argument_list|(
name|groupName
argument_list|,
name|subfolder
argument_list|,
name|subPackage
argument_list|)
condition|)
block|{
if|if
condition|(
operator|!
name|first
condition|)
name|allTests
operator|.
name|write
argument_list|(
literal|",\n"
argument_list|)
expr_stmt|;
else|else
name|first
operator|=
literal|false
expr_stmt|;
name|allTests
operator|.
name|write
argument_list|(
literal|"\t\torg.exist.xquery.xqts"
operator|+
name|subPackage
operator|+
literal|".AllTests.class"
argument_list|)
expr_stmt|;
block|}
if|else if
condition|(
name|testCases
argument_list|(
name|groupName
argument_list|,
name|folder
argument_list|,
name|_package_
argument_list|)
condition|)
block|{
if|if
condition|(
operator|!
name|first
condition|)
name|allTests
operator|.
name|write
argument_list|(
literal|",\n"
argument_list|)
expr_stmt|;
else|else
name|first
operator|=
literal|false
expr_stmt|;
name|allTests
operator|.
name|write
argument_list|(
literal|"\t\tC_"
operator|+
name|adoptString
argument_list|(
name|groupName
argument_list|)
operator|+
literal|".class"
argument_list|)
expr_stmt|;
block|}
block|}
name|endAllTests
argument_list|(
name|allTests
argument_list|)
expr_stmt|;
block|}
return|return
literal|true
return|;
block|}
return|return
literal|false
return|;
block|}
specifier|private
name|Writer
name|startAllTests
parameter_list|(
name|Path
name|folder
parameter_list|,
name|String
name|_package_
parameter_list|)
throws|throws
name|IOException
block|{
name|Files
operator|.
name|createDirectories
argument_list|(
name|folder
argument_list|)
expr_stmt|;
name|Path
name|jTest
init|=
name|folder
operator|.
name|resolve
argument_list|(
literal|"AllTests.java"
argument_list|)
decl_stmt|;
name|Writer
name|out
init|=
name|Files
operator|.
name|newBufferedWriter
argument_list|(
name|jTest
argument_list|)
decl_stmt|;
name|out
operator|.
name|write
argument_list|(
literal|"package org.exist.xquery.xqts"
operator|+
name|_package_
operator|+
literal|";\n\n"
operator|+
literal|"import org.junit.runner.RunWith;\n"
operator|+
literal|"import org.junit.runners.Suite;\n\n"
operator|+
literal|"@RunWith(Suite.class)\n"
operator|+
literal|"@Suite.SuiteClasses({\n"
argument_list|)
expr_stmt|;
return|return
name|out
return|;
block|}
specifier|private
name|void
name|endAllTests
parameter_list|(
specifier|final
name|Writer
name|out
parameter_list|)
throws|throws
name|IOException
block|{
name|out
operator|.
name|write
argument_list|(
literal|"\n})\n\n"
operator|+
literal|"public class AllTests {\n\n"
operator|+
literal|"}"
argument_list|)
expr_stmt|;
block|}
specifier|private
name|boolean
name|testCases
parameter_list|(
name|String
name|testGroup
parameter_list|,
name|Path
name|folder
parameter_list|,
name|String
name|_package_
parameter_list|)
throws|throws
name|Exception
block|{
name|String
name|query
init|=
literal|"declare namespace catalog=\"http://www.w3.org/2005/02/query-test-XQTSCatalog\";"
operator|+
literal|"let $XQTSCatalog := xmldb:document('/db/XQTS/XQTSCatalog.xml')"
operator|+
literal|"for $testGroup in $XQTSCatalog//catalog:test-group[@name = '"
operator|+
name|testGroup
operator|+
literal|"']/catalog:test-case"
operator|+
literal|"\treturn xs:string($testGroup/@name)"
decl_stmt|;
name|XQuery
name|xqs
init|=
name|db
operator|.
name|getXQueryService
argument_list|()
decl_stmt|;
name|Sequence
name|results
init|=
name|xqs
operator|.
name|execute
argument_list|(
name|broker
argument_list|,
name|query
argument_list|,
literal|null
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|results
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|Files
operator|.
name|createDirectories
argument_list|(
name|folder
argument_list|)
expr_stmt|;
name|Path
name|jTest
init|=
name|folder
operator|.
name|resolve
argument_list|(
literal|"C_"
operator|+
name|adoptString
argument_list|(
name|testGroup
argument_list|)
operator|+
literal|".java"
argument_list|)
decl_stmt|;
try|try
init|(
specifier|final
name|Writer
name|out
init|=
name|Files
operator|.
name|newBufferedWriter
argument_list|(
name|jTest
argument_list|)
init|)
block|{
name|out
operator|.
name|write
argument_list|(
literal|"package org.exist.xquery.xqts"
operator|+
name|_package_
operator|+
literal|";\n\n"
operator|+
literal|"import org.exist.xquery.xqts.XQTS_case;\n"
operator|+
comment|//"import static org.junit.Assert.*;\n" +
literal|"import org.junit.Test;\n\n"
operator|+
literal|"public class C_"
operator|+
name|adoptString
argument_list|(
name|testGroup
argument_list|)
operator|+
literal|" extends XQTS_case {\n"
operator|+
literal|"\tprivate String testGroup = \""
operator|+
name|testGroup
operator|+
literal|"\";\n\n"
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|results
operator|.
name|getItemCount
argument_list|()
condition|;
name|i
operator|++
control|)
block|{
name|String
name|caseName
init|=
name|results
operator|.
name|itemAt
argument_list|(
name|i
argument_list|)
operator|.
name|getStringValue
argument_list|()
decl_stmt|;
name|out
operator|.
name|write
argument_list|(
literal|"\t/* "
operator|+
name|caseName
operator|+
literal|" */"
operator|+
literal|"\t@Test\n"
operator|+
literal|"\tpublic void test_"
operator|+
name|adoptString
argument_list|(
name|caseName
argument_list|)
operator|+
literal|"() {\n"
operator|+
literal|"\tgroupCase(testGroup, \""
operator|+
name|caseName
operator|+
literal|"\");"
operator|+
literal|"\t}\n\n"
argument_list|)
expr_stmt|;
block|}
name|out
operator|.
name|write
argument_list|(
literal|"}"
argument_list|)
expr_stmt|;
block|}
return|return
literal|true
return|;
block|}
return|return
literal|false
return|;
block|}
specifier|private
name|String
name|adoptString
parameter_list|(
name|String
name|caseName
parameter_list|)
block|{
name|String
name|result
init|=
name|caseName
operator|.
name|replace
argument_list|(
literal|"-"
argument_list|,
literal|"_"
argument_list|)
decl_stmt|;
name|result
operator|=
name|result
operator|.
name|replace
argument_list|(
literal|"."
argument_list|,
literal|"_"
argument_list|)
expr_stmt|;
return|return
name|result
return|;
block|}
block|}
end_class

end_unit

