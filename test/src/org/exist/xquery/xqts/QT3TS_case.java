begin_unit|revision:1.0.0;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  *  eXist Open Source Native XML Database  *  Copyright (C) 2012 The eXist Project  *  http://exist-db.org  *  *  This program is free software; you can redistribute it and/or  *  modify it under the terms of the GNU Lesser General Public License  *  as published by the Free Software Foundation; either version 2  *  of the License, or (at your option) any later version.  *  *  This program is distributed in the hope that it will be useful,  *  but WITHOUT ANY WARRANTY; without even the implied warranty of  *  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the  *  GNU Lesser General Public License for more details.  *  *  You should have received a copy of the GNU Lesser General Public  *  License along with this library; if not, write to the Free Software  *  Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA  02110-1301  USA  *  *  $Id$  */
end_comment

begin_package
package|package
name|org
operator|.
name|exist
operator|.
name|xquery
operator|.
name|xqts
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|StringWriter
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashSet
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Properties
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Set
import|;
end_import

begin_import
import|import
name|junit
operator|.
name|framework
operator|.
name|Assert
import|;
end_import

begin_import
import|import
name|org
operator|.
name|custommonkey
operator|.
name|xmlunit
operator|.
name|Diff
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|dom
operator|.
name|ElementImpl
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|dom
operator|.
name|NodeProxy
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|dom
operator|.
name|QName
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|security
operator|.
name|xacml
operator|.
name|AccessContext
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|storage
operator|.
name|DBBroker
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|util
operator|.
name|serializer
operator|.
name|SAXSerializer
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|w3c
operator|.
name|tests
operator|.
name|TestCase
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|xmldb
operator|.
name|XQueryService
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|xmldb
operator|.
name|XmldbURI
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|xquery
operator|.
name|ErrorCodes
operator|.
name|ErrorCode
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|xquery
operator|.
name|CompiledXQuery
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|xquery
operator|.
name|Variable
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|xquery
operator|.
name|VariableImpl
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|xquery
operator|.
name|XPathException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|xquery
operator|.
name|XQuery
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|xquery
operator|.
name|XQueryContext
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|xquery
operator|.
name|value
operator|.
name|Item
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|xquery
operator|.
name|value
operator|.
name|Sequence
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|xquery
operator|.
name|value
operator|.
name|Type
import|;
end_import

begin_import
import|import
name|org
operator|.
name|w3c
operator|.
name|dom
operator|.
name|Attr
import|;
end_import

begin_import
import|import
name|org
operator|.
name|w3c
operator|.
name|dom
operator|.
name|Node
import|;
end_import

begin_import
import|import
name|org
operator|.
name|w3c
operator|.
name|dom
operator|.
name|NodeList
import|;
end_import

begin_import
import|import
name|org
operator|.
name|xml
operator|.
name|sax
operator|.
name|SAXException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|xmldb
operator|.
name|api
operator|.
name|base
operator|.
name|ResourceSet
import|;
end_import

begin_import
import|import
name|org
operator|.
name|xmldb
operator|.
name|api
operator|.
name|base
operator|.
name|XMLDBException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|xmldb
operator|.
name|api
operator|.
name|modules
operator|.
name|XMLResource
import|;
end_import

begin_comment
comment|/**  * @author<a href="mailto:shabanovd@gmail.com">Dmitriy Shabanov</a>  *   */
end_comment

begin_class
specifier|public
class|class
name|QT3TS_case
extends|extends
name|TestCase
block|{
specifier|protected
specifier|static
specifier|final
name|String
name|FOLDER
init|=
literal|"test/external/QT3-test-suite/"
decl_stmt|;
specifier|protected
specifier|static
specifier|final
name|String
name|QT_NS
init|=
literal|"http://www.w3.org/2010/09/qt-fots-catalog"
decl_stmt|;
specifier|protected
specifier|static
specifier|final
name|XmldbURI
name|QT3_URI
init|=
name|XmldbURI
operator|.
name|DB
operator|.
name|append
argument_list|(
literal|"QT3"
argument_list|)
decl_stmt|;
specifier|protected
specifier|static
specifier|final
name|String
name|xquery3declaration
init|=
literal|"xquery version \"3.0\";\n"
decl_stmt|;
annotation|@
name|Override
specifier|public
name|void
name|loadTS
parameter_list|()
throws|throws
name|Exception
block|{
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"loading QT3..."
argument_list|)
expr_stmt|;
name|QT3TS_To_junit
name|convertor
init|=
operator|new
name|QT3TS_To_junit
argument_list|()
decl_stmt|;
name|convertor
operator|.
name|init
argument_list|()
expr_stmt|;
try|try
block|{
name|convertor
operator|.
name|load
argument_list|()
expr_stmt|;
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"loaded QT3."
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
name|convertor
operator|.
name|release
argument_list|()
expr_stmt|;
block|}
block|}
specifier|private
name|Sequence
name|enviroment
parameter_list|(
name|String
name|file
parameter_list|)
throws|throws
name|Exception
block|{
name|DBBroker
name|broker
init|=
literal|null
decl_stmt|;
name|XQuery
name|xquery
init|=
literal|null
decl_stmt|;
try|try
block|{
name|broker
operator|=
name|pool
operator|.
name|get
argument_list|(
name|pool
operator|.
name|getSecurityManager
argument_list|()
operator|.
name|getSystemSubject
argument_list|()
argument_list|)
expr_stmt|;
name|xquery
operator|=
name|broker
operator|.
name|getXQueryService
argument_list|()
expr_stmt|;
name|broker
operator|.
name|getConfiguration
argument_list|()
operator|.
name|setProperty
argument_list|(
name|XQueryContext
operator|.
name|PROPERTY_XQUERY_RAISE_ERROR_ON_FAILED_RETRIEVAL
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|String
name|query
init|=
literal|"xmldb:document('"
operator|+
name|file
operator|+
literal|"')"
decl_stmt|;
return|return
name|xquery
operator|.
name|execute
argument_list|(
name|query
argument_list|,
literal|null
argument_list|,
name|AccessContext
operator|.
name|TEST
argument_list|)
return|;
block|}
finally|finally
block|{
name|pool
operator|.
name|release
argument_list|(
name|broker
argument_list|)
expr_stmt|;
block|}
block|}
specifier|private
name|HashMap
argument_list|<
name|String
argument_list|,
name|Sequence
argument_list|>
name|enviroments
parameter_list|(
name|String
name|file
parameter_list|)
block|{
name|HashMap
argument_list|<
name|String
argument_list|,
name|Sequence
argument_list|>
name|enviroments
init|=
operator|new
name|HashMap
argument_list|<
name|String
argument_list|,
name|Sequence
argument_list|>
argument_list|()
decl_stmt|;
name|DBBroker
name|broker
init|=
literal|null
decl_stmt|;
try|try
block|{
name|broker
operator|=
name|pool
operator|.
name|get
argument_list|(
name|pool
operator|.
name|getSecurityManager
argument_list|()
operator|.
name|getSystemSubject
argument_list|()
argument_list|)
expr_stmt|;
name|XQuery
name|xquery
init|=
name|broker
operator|.
name|getXQueryService
argument_list|()
decl_stmt|;
name|broker
operator|.
name|getConfiguration
argument_list|()
operator|.
name|setProperty
argument_list|(
name|XQueryContext
operator|.
name|PROPERTY_XQUERY_RAISE_ERROR_ON_FAILED_RETRIEVAL
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|String
name|query
init|=
literal|"declare namespace qt='"
operator|+
name|QT_NS
operator|+
literal|"';\n"
operator|+
literal|"let $testCases := xmldb:document('/db/QT3/"
operator|+
name|file
operator|+
literal|"')\n"
operator|+
literal|"let $tc := $testCases//qt:environment\n"
operator|+
literal|"return $tc"
decl_stmt|;
name|Sequence
name|result
init|=
name|xquery
operator|.
name|execute
argument_list|(
name|query
argument_list|,
literal|null
argument_list|,
name|AccessContext
operator|.
name|TEST
argument_list|)
decl_stmt|;
name|String
name|col
init|=
name|XmldbURI
operator|.
name|create
argument_list|(
literal|"/db/QT3/"
operator|+
name|file
argument_list|)
operator|.
name|removeLastSegment
argument_list|()
operator|.
name|toString
argument_list|()
decl_stmt|;
for|for
control|(
name|NodeProxy
name|node
range|:
name|result
operator|.
name|toNodeSet
argument_list|()
control|)
block|{
name|ElementImpl
name|el
init|=
operator|(
name|ElementImpl
operator|)
name|node
operator|.
name|getNode
argument_list|()
decl_stmt|;
name|String
name|name
init|=
name|el
operator|.
name|getAttribute
argument_list|(
literal|"name"
argument_list|)
decl_stmt|;
if|if
condition|(
name|name
operator|==
literal|null
condition|)
continue|continue;
name|NodeList
name|sources
init|=
name|el
operator|.
name|getElementsByTagNameNS
argument_list|(
name|QT_NS
argument_list|,
literal|"source"
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|j
init|=
literal|0
init|;
name|j
operator|<
name|sources
operator|.
name|getLength
argument_list|()
condition|;
name|j
operator|++
control|)
block|{
name|ElementImpl
name|source
init|=
operator|(
name|ElementImpl
operator|)
name|sources
operator|.
name|item
argument_list|(
name|j
argument_list|)
decl_stmt|;
name|String
name|role
init|=
name|source
operator|.
name|getAttribute
argument_list|(
literal|"role"
argument_list|)
decl_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|"."
argument_list|,
name|role
argument_list|)
expr_stmt|;
name|String
name|url
init|=
name|source
operator|.
name|getAttribute
argument_list|(
literal|"file"
argument_list|)
decl_stmt|;
name|Assert
operator|.
name|assertFalse
argument_list|(
literal|""
operator|.
name|equals
argument_list|(
name|url
argument_list|)
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertFalse
argument_list|(
name|enviroments
operator|.
name|containsKey
argument_list|(
name|name
argument_list|)
argument_list|)
expr_stmt|;
try|try
block|{
name|enviroments
operator|.
name|put
argument_list|(
name|name
argument_list|,
name|enviroment
argument_list|(
name|col
operator|+
literal|"/"
operator|+
name|url
argument_list|)
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|Assert
operator|.
name|fail
argument_list|(
name|e
operator|.
name|getMessage
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|e
operator|.
name|printStackTrace
argument_list|()
expr_stmt|;
block|}
finally|finally
block|{
name|pool
operator|.
name|release
argument_list|(
name|broker
argument_list|)
expr_stmt|;
block|}
return|return
name|enviroments
return|;
block|}
specifier|private
name|Sequence
name|getEnviroment
parameter_list|(
name|String
name|file
parameter_list|,
name|String
name|name
parameter_list|,
name|XQueryContext
name|context
parameter_list|)
block|{
name|Sequence
name|enviroment
init|=
literal|null
decl_stmt|;
name|DBBroker
name|broker
init|=
literal|null
decl_stmt|;
try|try
block|{
name|broker
operator|=
name|pool
operator|.
name|get
argument_list|(
name|pool
operator|.
name|getSecurityManager
argument_list|()
operator|.
name|getSystemSubject
argument_list|()
argument_list|)
expr_stmt|;
name|XQuery
name|xquery
init|=
name|broker
operator|.
name|getXQueryService
argument_list|()
decl_stmt|;
name|broker
operator|.
name|getConfiguration
argument_list|()
operator|.
name|setProperty
argument_list|(
name|XQueryContext
operator|.
name|PROPERTY_XQUERY_RAISE_ERROR_ON_FAILED_RETRIEVAL
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|String
name|query
init|=
literal|"declare namespace qt='"
operator|+
name|QT_NS
operator|+
literal|"';\n"
operator|+
literal|"let $testCases := xmldb:document('/db/QT3/"
operator|+
name|file
operator|+
literal|"')\n"
operator|+
literal|"let $tc := $testCases//qt:environment[@name eq '"
operator|+
name|name
operator|+
literal|"']\n"
operator|+
literal|"let $catalog := xmldb:document('/db/QT3/catalog.xml')\n"
operator|+
literal|"let $cat := $catalog//qt:environment[@name eq '"
operator|+
name|name
operator|+
literal|"']\n"
operator|+
literal|"return ($tc, $cat)"
decl_stmt|;
name|Sequence
name|result
init|=
name|xquery
operator|.
name|execute
argument_list|(
name|query
argument_list|,
literal|null
argument_list|,
name|AccessContext
operator|.
name|TEST
argument_list|)
decl_stmt|;
name|String
name|col
init|=
name|XmldbURI
operator|.
name|create
argument_list|(
literal|"/db/QT3/"
operator|+
name|file
argument_list|)
operator|.
name|removeLastSegment
argument_list|()
operator|.
name|toString
argument_list|()
decl_stmt|;
for|for
control|(
name|NodeProxy
name|node
range|:
name|result
operator|.
name|toNodeSet
argument_list|()
control|)
block|{
name|ElementImpl
name|el
init|=
operator|(
name|ElementImpl
operator|)
name|node
operator|.
name|getNode
argument_list|()
decl_stmt|;
name|String
name|_name
init|=
name|el
operator|.
name|getAttribute
argument_list|(
literal|"name"
argument_list|)
decl_stmt|;
if|if
condition|(
name|_name
operator|==
literal|null
condition|)
continue|continue;
name|col
operator|=
name|el
operator|.
name|getDocument
argument_list|()
operator|.
name|getURI
argument_list|()
operator|.
name|removeLastSegment
argument_list|()
operator|.
name|toString
argument_list|()
expr_stmt|;
name|NodeList
name|sources
init|=
name|el
operator|.
name|getElementsByTagNameNS
argument_list|(
name|QT_NS
argument_list|,
literal|"source"
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|j
init|=
literal|0
init|;
name|j
operator|<
name|sources
operator|.
name|getLength
argument_list|()
condition|;
name|j
operator|++
control|)
block|{
name|ElementImpl
name|source
init|=
operator|(
name|ElementImpl
operator|)
name|sources
operator|.
name|item
argument_list|(
name|j
argument_list|)
decl_stmt|;
comment|//                	System.out.println(source);
name|String
name|role
init|=
name|source
operator|.
name|getAttribute
argument_list|(
literal|"role"
argument_list|)
decl_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|"."
argument_list|,
name|role
argument_list|)
expr_stmt|;
name|String
name|url
init|=
name|source
operator|.
name|getAttribute
argument_list|(
literal|"file"
argument_list|)
decl_stmt|;
name|Assert
operator|.
name|assertFalse
argument_list|(
literal|""
operator|.
name|equals
argument_list|(
name|url
argument_list|)
argument_list|)
expr_stmt|;
comment|//                    Assert.assertFalse(enviroments.containsKey(name));
name|Assert
operator|.
name|assertNull
argument_list|(
name|enviroment
argument_list|)
expr_stmt|;
try|try
block|{
name|enviroment
operator|=
name|enviroment
argument_list|(
name|col
operator|+
literal|"/"
operator|+
name|url
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|Assert
operator|.
name|fail
argument_list|(
name|e
operator|.
name|getMessage
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|e
operator|.
name|printStackTrace
argument_list|()
expr_stmt|;
block|}
finally|finally
block|{
name|pool
operator|.
name|release
argument_list|(
name|broker
argument_list|)
expr_stmt|;
block|}
return|return
name|enviroment
return|;
block|}
specifier|protected
name|void
name|testCase
parameter_list|(
name|String
name|file
parameter_list|,
name|String
name|tcName
parameter_list|)
block|{
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"test "
operator|+
name|tcName
argument_list|)
expr_stmt|;
name|DBBroker
name|broker
init|=
literal|null
decl_stmt|;
name|Sequence
name|result
init|=
literal|null
decl_stmt|;
name|XQuery
name|xquery
init|=
literal|null
decl_stmt|;
try|try
block|{
name|XQueryService
name|service
init|=
operator|(
name|XQueryService
operator|)
name|testCollection
operator|.
name|getService
argument_list|(
literal|"XQueryService"
argument_list|,
literal|"1.0"
argument_list|)
decl_stmt|;
name|Set
argument_list|<
name|String
argument_list|>
name|extectedError
init|=
operator|new
name|HashSet
argument_list|<
name|String
argument_list|>
argument_list|()
decl_stmt|;
try|try
block|{
name|broker
operator|=
name|pool
operator|.
name|get
argument_list|(
name|pool
operator|.
name|getSecurityManager
argument_list|()
operator|.
name|getSystemSubject
argument_list|()
argument_list|)
expr_stmt|;
name|xquery
operator|=
name|broker
operator|.
name|getXQueryService
argument_list|()
expr_stmt|;
specifier|final
name|XQueryContext
name|context
init|=
operator|new
name|XQueryContext
argument_list|(
name|pool
argument_list|,
name|AccessContext
operator|.
name|TEST
argument_list|)
decl_stmt|;
name|broker
operator|.
name|getConfiguration
argument_list|()
operator|.
name|setProperty
argument_list|(
name|XQueryContext
operator|.
name|PROPERTY_XQUERY_RAISE_ERROR_ON_FAILED_RETRIEVAL
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|String
name|query
init|=
literal|"declare namespace qt='"
operator|+
name|QT_NS
operator|+
literal|"';\n"
operator|+
literal|"let $testCases := xmldb:document('/db/QT3/"
operator|+
name|file
operator|+
literal|"')\n"
operator|+
literal|"let $tc := $testCases//qt:test-case[@name eq \""
operator|+
name|tcName
operator|+
literal|"\"]\n"
operator|+
literal|"return $tc"
decl_stmt|;
name|ResourceSet
name|results
init|=
name|service
operator|.
name|query
argument_list|(
name|query
argument_list|)
decl_stmt|;
name|Assert
operator|.
name|assertFalse
argument_list|(
literal|""
argument_list|,
name|results
operator|.
name|getSize
argument_list|()
operator|!=
literal|1
argument_list|)
expr_stmt|;
name|ElementImpl
name|TC
init|=
operator|(
name|ElementImpl
operator|)
operator|(
operator|(
name|XMLResource
operator|)
name|results
operator|.
name|getResource
argument_list|(
literal|0
argument_list|)
operator|)
operator|.
name|getContentAsDOM
argument_list|()
decl_stmt|;
name|Sequence
name|contextSequence
init|=
literal|null
decl_stmt|;
name|NodeList
name|expected
init|=
literal|null
decl_stmt|;
name|String
name|nodeName
init|=
literal|""
decl_stmt|;
comment|//compile& evaluate
name|String
name|caseScript
init|=
literal|null
decl_stmt|;
name|NodeList
name|childNodes
init|=
name|TC
operator|.
name|getChildNodes
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|childNodes
operator|.
name|getLength
argument_list|()
condition|;
name|i
operator|++
control|)
block|{
name|Node
name|child
init|=
name|childNodes
operator|.
name|item
argument_list|(
name|i
argument_list|)
decl_stmt|;
switch|switch
condition|(
name|child
operator|.
name|getNodeType
argument_list|()
condition|)
block|{
case|case
name|Node
operator|.
name|ATTRIBUTE_NODE
case|:
comment|//                        String name = ((Attr)child).getName();
comment|//                        if (name.equals("scenario"))
comment|//                            scenario = ((Attr)child).getValue();
break|break;
case|case
name|Node
operator|.
name|ELEMENT_NODE
case|:
name|nodeName
operator|=
operator|(
operator|(
name|ElementImpl
operator|)
name|child
operator|)
operator|.
name|getLocalName
argument_list|()
expr_stmt|;
if|if
condition|(
name|nodeName
operator|.
name|equals
argument_list|(
literal|"test"
argument_list|)
condition|)
block|{
name|ElementImpl
name|el
init|=
operator|(
operator|(
name|ElementImpl
operator|)
name|child
operator|)
decl_stmt|;
name|caseScript
operator|=
name|el
operator|.
name|getNodeValue
argument_list|()
expr_stmt|;
block|}
if|else if
condition|(
name|nodeName
operator|.
name|equals
argument_list|(
literal|"environment"
argument_list|)
condition|)
block|{
name|ElementImpl
name|el
init|=
operator|(
operator|(
name|ElementImpl
operator|)
name|child
operator|)
decl_stmt|;
name|String
name|ref
init|=
name|el
operator|.
name|getAttribute
argument_list|(
literal|"ref"
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
operator|(
name|ref
operator|==
literal|null
operator|||
literal|"empty"
operator|.
name|equals
argument_list|(
name|ref
argument_list|)
operator|||
name|ref
operator|.
name|isEmpty
argument_list|()
operator|)
condition|)
block|{
name|Assert
operator|.
name|assertNull
argument_list|(
name|contextSequence
argument_list|)
expr_stmt|;
name|contextSequence
operator|=
name|getEnviroment
argument_list|(
name|file
argument_list|,
name|ref
argument_list|,
name|context
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|NodeList
name|_childNodes
init|=
name|el
operator|.
name|getChildNodes
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|j
init|=
literal|0
init|;
name|j
operator|<
name|_childNodes
operator|.
name|getLength
argument_list|()
condition|;
name|j
operator|++
control|)
block|{
name|Node
name|_child
init|=
name|_childNodes
operator|.
name|item
argument_list|(
name|j
argument_list|)
decl_stmt|;
switch|switch
condition|(
name|_child
operator|.
name|getNodeType
argument_list|()
condition|)
block|{
case|case
name|Node
operator|.
name|ELEMENT_NODE
case|:
name|nodeName
operator|=
operator|(
operator|(
name|ElementImpl
operator|)
name|_child
operator|)
operator|.
name|getLocalName
argument_list|()
expr_stmt|;
if|if
condition|(
name|nodeName
operator|.
name|equals
argument_list|(
literal|"param"
argument_list|)
condition|)
block|{
name|el
operator|=
operator|(
operator|(
name|ElementImpl
operator|)
name|_child
operator|)
expr_stmt|;
name|Variable
name|var
init|=
operator|new
name|VariableImpl
argument_list|(
name|QName
operator|.
name|parse
argument_list|(
name|context
argument_list|,
name|el
operator|.
name|getAttribute
argument_list|(
literal|"name"
argument_list|)
argument_list|)
argument_list|)
decl_stmt|;
name|String
name|type
init|=
name|el
operator|.
name|getAttribute
argument_list|(
literal|"as"
argument_list|)
decl_stmt|;
if|if
condition|(
literal|"xs:date"
operator|.
name|equals
argument_list|(
name|type
argument_list|)
condition|)
block|{
name|var
operator|.
name|setStaticType
argument_list|(
name|Type
operator|.
name|DATE
argument_list|)
expr_stmt|;
name|Sequence
name|res
init|=
name|xquery
operator|.
name|execute
argument_list|(
name|el
operator|.
name|getAttribute
argument_list|(
literal|"select"
argument_list|)
argument_list|,
literal|null
argument_list|,
name|AccessContext
operator|.
name|TEST
argument_list|)
decl_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|res
operator|.
name|getItemCount
argument_list|()
argument_list|)
expr_stmt|;
name|var
operator|.
name|setValue
argument_list|(
name|res
argument_list|)
expr_stmt|;
block|}
if|else if
condition|(
literal|"xs:dateTime"
operator|.
name|equals
argument_list|(
name|type
argument_list|)
condition|)
block|{
name|var
operator|.
name|setStaticType
argument_list|(
name|Type
operator|.
name|DATE_TIME
argument_list|)
expr_stmt|;
name|Sequence
name|res
init|=
name|xquery
operator|.
name|execute
argument_list|(
name|el
operator|.
name|getAttribute
argument_list|(
literal|"select"
argument_list|)
argument_list|,
literal|null
argument_list|,
name|AccessContext
operator|.
name|TEST
argument_list|)
decl_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|res
operator|.
name|getItemCount
argument_list|()
argument_list|)
expr_stmt|;
name|var
operator|.
name|setValue
argument_list|(
name|res
argument_list|)
expr_stmt|;
block|}
if|else if
condition|(
literal|"xs:string"
operator|.
name|equals
argument_list|(
name|type
argument_list|)
condition|)
block|{
name|var
operator|.
name|setStaticType
argument_list|(
name|Type
operator|.
name|STRING
argument_list|)
expr_stmt|;
name|Sequence
name|res
init|=
name|xquery
operator|.
name|execute
argument_list|(
name|el
operator|.
name|getAttribute
argument_list|(
literal|"select"
argument_list|)
argument_list|,
literal|null
argument_list|,
name|AccessContext
operator|.
name|TEST
argument_list|)
decl_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|res
operator|.
name|getItemCount
argument_list|()
argument_list|)
expr_stmt|;
name|var
operator|.
name|setValue
argument_list|(
name|res
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|Assert
operator|.
name|fail
argument_list|(
literal|"unknown type '"
operator|+
name|type
operator|+
literal|"'"
argument_list|)
expr_stmt|;
block|}
name|context
operator|.
name|declareGlobalVariable
argument_list|(
name|var
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
block|}
if|else if
condition|(
name|nodeName
operator|.
name|equals
argument_list|(
literal|"result"
argument_list|)
condition|)
block|{
name|ElementImpl
name|el
init|=
operator|(
operator|(
name|ElementImpl
operator|)
name|child
operator|)
decl_stmt|;
name|possibleErrors
argument_list|(
name|el
argument_list|,
name|extectedError
argument_list|)
expr_stmt|;
name|NodeList
name|anyOf
init|=
name|el
operator|.
name|getElementsByTagNameNS
argument_list|(
name|QT_NS
argument_list|,
literal|"any-of"
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|j
init|=
literal|0
init|;
name|j
operator|<
name|anyOf
operator|.
name|getLength
argument_list|()
condition|;
name|j
operator|++
control|)
block|{
name|el
operator|=
operator|(
name|ElementImpl
operator|)
name|anyOf
operator|.
name|item
argument_list|(
name|j
argument_list|)
expr_stmt|;
name|possibleErrors
argument_list|(
name|el
argument_list|,
name|extectedError
argument_list|)
expr_stmt|;
block|}
name|expected
operator|=
name|el
operator|.
name|getChildNodes
argument_list|()
expr_stmt|;
block|}
break|break;
default|default :
empty_stmt|;
block|}
block|}
specifier|final
name|CompiledXQuery
name|compiled
init|=
name|xquery
operator|.
name|compile
argument_list|(
name|context
argument_list|,
name|xquery3declaration
operator|+
name|caseScript
argument_list|)
decl_stmt|;
name|result
operator|=
name|xquery
operator|.
name|execute
argument_list|(
name|compiled
argument_list|,
name|contextSequence
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|expected
operator|.
name|getLength
argument_list|()
condition|;
name|i
operator|++
control|)
block|{
name|Node
name|node
init|=
name|expected
operator|.
name|item
argument_list|(
name|i
argument_list|)
decl_stmt|;
name|checkResults
argument_list|(
name|node
operator|.
name|getLocalName
argument_list|()
argument_list|,
name|node
operator|.
name|getChildNodes
argument_list|()
argument_list|,
name|result
argument_list|)
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
name|XPathException
name|e
parameter_list|)
block|{
name|e
operator|.
name|printStackTrace
argument_list|()
expr_stmt|;
name|ErrorCode
name|errorCode
init|=
name|e
operator|.
name|getErrorCode
argument_list|()
decl_stmt|;
if|if
condition|(
name|errorCode
operator|!=
literal|null
operator|&&
name|extectedError
operator|.
name|contains
argument_list|(
name|errorCode
operator|.
name|getErrorQName
argument_list|()
operator|.
name|getLocalName
argument_list|()
argument_list|)
condition|)
return|return;
if|if
condition|(
name|extectedError
operator|.
name|contains
argument_list|(
literal|"*"
argument_list|)
condition|)
return|return;
name|Assert
operator|.
name|fail
argument_list|(
literal|"expected error code: '"
operator|+
name|extectedError
operator|+
literal|"', but got: '"
operator|+
name|e
operator|.
name|getMessage
argument_list|()
operator|+
literal|"'"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|e
operator|.
name|printStackTrace
argument_list|()
expr_stmt|;
name|Assert
operator|.
name|fail
argument_list|(
name|e
operator|.
name|getMessage
argument_list|()
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
name|pool
operator|.
name|release
argument_list|(
name|broker
argument_list|)
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
name|XMLDBException
name|e
parameter_list|)
block|{
name|Assert
operator|.
name|fail
argument_list|(
name|e
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
specifier|private
name|void
name|possibleErrors
parameter_list|(
name|ElementImpl
name|el
parameter_list|,
name|Set
argument_list|<
name|String
argument_list|>
name|extectedError
parameter_list|)
block|{
name|NodeList
name|errors
init|=
name|el
operator|.
name|getElementsByTagNameNS
argument_list|(
name|QT_NS
argument_list|,
literal|"error"
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|j
init|=
literal|0
init|;
name|j
operator|<
name|errors
operator|.
name|getLength
argument_list|()
condition|;
name|j
operator|++
control|)
block|{
name|ElementImpl
name|error
init|=
operator|(
name|ElementImpl
operator|)
name|errors
operator|.
name|item
argument_list|(
name|j
argument_list|)
decl_stmt|;
comment|//check error for 'code' attribute
name|String
name|code
init|=
name|error
operator|.
name|getAttribute
argument_list|(
literal|"code"
argument_list|)
decl_stmt|;
if|if
condition|(
name|code
operator|!=
literal|null
operator|&&
operator|!
name|code
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|extectedError
operator|.
name|add
argument_list|(
name|code
argument_list|)
expr_stmt|;
block|}
block|}
block|}
specifier|private
name|void
name|checkResults
parameter_list|(
name|String
name|type
parameter_list|,
name|NodeList
name|expected
parameter_list|,
name|Sequence
name|result
parameter_list|)
throws|throws
name|Exception
block|{
if|if
condition|(
literal|"all-of"
operator|.
name|equals
argument_list|(
name|type
argument_list|)
condition|)
block|{
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|expected
operator|.
name|getLength
argument_list|()
condition|;
name|i
operator|++
control|)
block|{
specifier|final
name|Node
name|node
init|=
name|expected
operator|.
name|item
argument_list|(
name|i
argument_list|)
decl_stmt|;
name|checkResults
argument_list|(
name|node
operator|.
name|getLocalName
argument_list|()
argument_list|,
name|node
operator|.
name|getChildNodes
argument_list|()
argument_list|,
name|result
argument_list|)
expr_stmt|;
block|}
block|}
if|else if
condition|(
literal|"any-of"
operator|.
name|equals
argument_list|(
name|type
argument_list|)
condition|)
block|{
name|StringBuilder
name|sb
init|=
operator|new
name|StringBuilder
argument_list|()
decl_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|"at any-of all failed\n"
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|expected
operator|.
name|getLength
argument_list|()
condition|;
name|i
operator|++
control|)
block|{
specifier|final
name|Node
name|node
init|=
name|expected
operator|.
name|item
argument_list|(
name|i
argument_list|)
decl_stmt|;
try|try
block|{
name|checkResults
argument_list|(
name|node
operator|.
name|getLocalName
argument_list|()
argument_list|,
name|node
operator|.
name|getChildNodes
argument_list|()
argument_list|,
name|result
argument_list|)
expr_stmt|;
return|return;
block|}
catch|catch
parameter_list|(
name|Throwable
name|e
parameter_list|)
block|{
name|e
operator|.
name|printStackTrace
argument_list|()
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
name|e
operator|.
name|getMessage
argument_list|()
argument_list|)
operator|.
name|append
argument_list|(
literal|"\n"
argument_list|)
expr_stmt|;
block|}
block|}
name|Assert
operator|.
name|assertTrue
argument_list|(
name|sb
operator|.
name|toString
argument_list|()
argument_list|,
literal|false
argument_list|)
expr_stmt|;
block|}
if|else if
condition|(
literal|"assert"
operator|.
name|equals
argument_list|(
name|type
argument_list|)
condition|)
block|{
name|Assert
operator|.
name|assertTrue
argument_list|(
literal|"not implemented 'assert'"
argument_list|,
literal|false
argument_list|)
expr_stmt|;
block|}
if|else if
condition|(
literal|"assert-type"
operator|.
name|equals
argument_list|(
name|type
argument_list|)
condition|)
block|{
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|expected
operator|.
name|getLength
argument_list|()
condition|;
name|i
operator|++
control|)
block|{
specifier|final
name|Node
name|node
init|=
name|expected
operator|.
name|item
argument_list|(
name|i
argument_list|)
decl_stmt|;
specifier|final
name|String
name|expect
init|=
name|node
operator|.
name|getNodeValue
argument_list|()
decl_stmt|;
specifier|final
name|int
name|actual
init|=
name|result
operator|.
name|itemAt
argument_list|(
name|i
argument_list|)
operator|.
name|getType
argument_list|()
decl_stmt|;
if|if
condition|(
name|Type
operator|.
name|subTypeOf
argument_list|(
name|actual
argument_list|,
name|Type
operator|.
name|getType
argument_list|(
name|expect
argument_list|)
argument_list|)
condition|)
return|return;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|"expected '"
operator|+
name|expect
operator|+
literal|"' get '"
operator|+
name|Type
operator|.
name|getTypeName
argument_list|(
name|actual
argument_list|)
argument_list|,
name|Type
operator|.
name|getType
argument_list|(
name|expect
argument_list|)
argument_list|,
name|result
operator|.
name|itemAt
argument_list|(
name|i
argument_list|)
operator|.
name|getType
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
if|else if
condition|(
literal|"assert-eq"
operator|.
name|equals
argument_list|(
name|type
argument_list|)
condition|)
block|{
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|expected
operator|.
name|getLength
argument_list|()
condition|;
name|i
operator|++
control|)
block|{
specifier|final
name|Node
name|node
init|=
name|expected
operator|.
name|item
argument_list|(
name|i
argument_list|)
decl_stmt|;
name|String
name|expect
init|=
name|node
operator|.
name|getNodeValue
argument_list|()
decl_stmt|;
comment|//	        	if ((expect.startsWith("\"")&& expect.endsWith("\"")) || (expect.startsWith("'")&& expect.endsWith("'"))) {
comment|//	        		//? check is it xs:string ?
comment|//		        	Assert.assertEquals(
comment|//	        			expect.substring(1, expect.length()-1),
comment|//	        			result.itemAt(i).getStringValue()
comment|//	    			);
comment|//	        	} else if (expect.startsWith("xs:float(")) {
comment|//	                final int actual = result.itemAt(i).getType();
comment|//	                if (Type.subTypeOf(actual, Type.getType("xs:float"))) {
comment|//
comment|//	                    Assert.assertEquals(
comment|//                            expect.substring(10, expect.length()-2),
comment|//                            result.itemAt(i).getStringValue()
comment|//                        );
comment|//	                    return;
comment|//	                }
comment|//
comment|//	                Assert.assertEquals("expected '"+expect+"' get '"+Type.getTypeName(actual),
comment|//	                        Type.getType(expect),
comment|//	                        result.itemAt(i).getType()
comment|//	                    );
comment|//
comment|//	        	} else
name|Assert
operator|.
name|assertEquals
argument_list|(
name|expect
argument_list|,
name|itemToString
argument_list|(
name|result
operator|.
name|itemAt
argument_list|(
name|i
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
if|else if
condition|(
literal|"assert-deep-eq"
operator|.
name|equals
argument_list|(
name|type
argument_list|)
condition|)
block|{
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|expected
operator|.
name|getLength
argument_list|()
argument_list|)
expr_stmt|;
specifier|final
name|Node
name|node
init|=
name|expected
operator|.
name|item
argument_list|(
literal|0
argument_list|)
decl_stmt|;
name|String
name|expect
init|=
name|node
operator|.
name|getNodeValue
argument_list|()
decl_stmt|;
name|StringBuilder
name|got
init|=
operator|new
name|StringBuilder
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|result
operator|.
name|getItemCount
argument_list|()
condition|;
name|i
operator|++
control|)
block|{
name|got
operator|.
name|append
argument_list|(
name|itemToString
argument_list|(
name|result
operator|.
name|itemAt
argument_list|(
name|i
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
if|if
condition|(
name|i
operator|!=
name|result
operator|.
name|getItemCount
argument_list|()
operator|-
literal|1
condition|)
name|got
operator|.
name|append
argument_list|(
literal|", "
argument_list|)
expr_stmt|;
block|}
name|Assert
operator|.
name|assertEquals
argument_list|(
name|expect
argument_list|,
name|got
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
block|}
if|else if
condition|(
literal|"assert-true"
operator|.
name|equals
argument_list|(
name|type
argument_list|)
condition|)
block|{
name|Assert
operator|.
name|assertTrue
argument_list|(
literal|"expecting true get false"
argument_list|,
name|result
operator|.
name|effectiveBooleanValue
argument_list|()
argument_list|)
expr_stmt|;
block|}
if|else if
condition|(
literal|"assert-false"
operator|.
name|equals
argument_list|(
name|type
argument_list|)
condition|)
block|{
name|Assert
operator|.
name|assertFalse
argument_list|(
literal|"expecting false get true"
argument_list|,
name|result
operator|.
name|effectiveBooleanValue
argument_list|()
argument_list|)
expr_stmt|;
block|}
if|else if
condition|(
literal|"assert-string-value"
operator|.
name|equals
argument_list|(
name|type
argument_list|)
condition|)
block|{
name|StringBuilder
name|sb
init|=
operator|new
name|StringBuilder
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|result
operator|.
name|getItemCount
argument_list|()
condition|;
name|i
operator|++
control|)
block|{
name|sb
operator|.
name|append
argument_list|(
name|result
operator|.
name|itemAt
argument_list|(
name|i
argument_list|)
operator|.
name|getStringValue
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|i
operator|+
literal|1
operator|!=
name|result
operator|.
name|getItemCount
argument_list|()
condition|)
name|sb
operator|.
name|append
argument_list|(
literal|" "
argument_list|)
expr_stmt|;
block|}
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|expected
operator|.
name|getLength
argument_list|()
condition|;
name|i
operator|++
control|)
block|{
specifier|final
name|Node
name|node
init|=
name|expected
operator|.
name|item
argument_list|(
name|i
argument_list|)
decl_stmt|;
name|String
name|expect
init|=
name|node
operator|.
name|getNodeValue
argument_list|()
decl_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|expect
argument_list|,
name|sb
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
if|else if
condition|(
literal|"assert-serialization-error"
operator|.
name|equals
argument_list|(
name|type
argument_list|)
condition|)
block|{
name|Assert
operator|.
name|assertTrue
argument_list|(
literal|"not implemented 'assert-serialization-error'"
argument_list|,
literal|false
argument_list|)
expr_stmt|;
block|}
if|else if
condition|(
literal|"serialization-matches"
operator|.
name|equals
argument_list|(
name|type
argument_list|)
condition|)
block|{
name|Assert
operator|.
name|assertTrue
argument_list|(
literal|"not implemented 'serialization-matches'"
argument_list|,
literal|false
argument_list|)
expr_stmt|;
block|}
if|else if
condition|(
literal|"assert-permutation"
operator|.
name|equals
argument_list|(
name|type
argument_list|)
condition|)
block|{
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|expected
operator|.
name|getLength
argument_list|()
argument_list|)
expr_stmt|;
specifier|final
name|Node
name|node
init|=
name|expected
operator|.
name|item
argument_list|(
literal|0
argument_list|)
decl_stmt|;
name|String
index|[]
name|expect
init|=
name|node
operator|.
name|getNodeValue
argument_list|()
operator|.
name|split
argument_list|(
literal|", "
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|result
operator|.
name|getItemCount
argument_list|()
condition|;
name|i
operator|++
control|)
block|{
name|String
name|got
init|=
name|itemToString
argument_list|(
name|result
operator|.
name|itemAt
argument_list|(
name|i
argument_list|)
argument_list|)
decl_stmt|;
name|boolean
name|found
init|=
literal|false
decl_stmt|;
for|for
control|(
name|int
name|j
init|=
literal|0
init|;
name|j
operator|<
name|expect
operator|.
name|length
condition|;
name|j
operator|++
control|)
block|{
if|if
condition|(
name|expect
index|[
name|j
index|]
operator|!=
literal|null
operator|&&
name|got
operator|.
name|equals
argument_list|(
name|expect
index|[
name|j
index|]
argument_list|)
condition|)
block|{
name|expect
index|[
name|j
index|]
operator|=
literal|null
expr_stmt|;
name|found
operator|=
literal|true
expr_stmt|;
break|break;
block|}
block|}
if|if
condition|(
operator|!
name|found
condition|)
block|{
name|Assert
operator|.
name|fail
argument_list|(
literal|"Unexpected '"
operator|+
name|got
operator|+
literal|"'"
argument_list|)
expr_stmt|;
block|}
block|}
for|for
control|(
name|int
name|j
init|=
literal|0
init|;
name|j
operator|<
name|expect
operator|.
name|length
condition|;
name|j
operator|++
control|)
block|{
if|if
condition|(
name|expect
index|[
name|j
index|]
operator|!=
literal|null
condition|)
block|{
name|Assert
operator|.
name|fail
argument_list|(
literal|"Unmatched '"
operator|+
name|expect
index|[
name|j
index|]
operator|+
literal|"'"
argument_list|)
expr_stmt|;
block|}
block|}
block|}
if|else if
condition|(
literal|"assert-count"
operator|.
name|equals
argument_list|(
name|type
argument_list|)
condition|)
block|{
if|if
condition|(
name|expected
operator|.
name|getLength
argument_list|()
operator|==
literal|1
operator|&&
literal|"1"
operator|.
name|equals
argument_list|(
name|expected
operator|.
name|item
argument_list|(
literal|0
argument_list|)
operator|.
name|getNodeValue
argument_list|()
argument_list|)
operator|&&
name|result
operator|!=
literal|null
condition|)
block|{
return|return;
block|}
name|Assert
operator|.
name|assertEquals
argument_list|(
name|expected
operator|.
name|item
argument_list|(
literal|0
argument_list|)
operator|.
name|getNodeValue
argument_list|()
argument_list|,
name|String
operator|.
name|valueOf
argument_list|(
name|result
operator|.
name|getItemCount
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
if|else if
condition|(
literal|"assert-empty"
operator|.
name|equals
argument_list|(
name|type
argument_list|)
condition|)
block|{
name|Assert
operator|.
name|assertTrue
argument_list|(
name|result
operator|.
name|isEmpty
argument_list|()
argument_list|)
expr_stmt|;
block|}
if|else if
condition|(
literal|"assert-xml"
operator|.
name|equals
argument_list|(
name|type
argument_list|)
condition|)
block|{
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|expected
operator|.
name|getLength
argument_list|()
condition|;
name|i
operator|++
control|)
block|{
specifier|final
name|int
name|ic
init|=
name|i
decl_stmt|;
name|boolean
name|ignorePrefixes
init|=
literal|false
decl_stmt|;
specifier|final
name|Node
name|exNode
init|=
name|expected
operator|.
name|item
argument_list|(
name|i
argument_list|)
decl_stmt|;
name|String
name|exString
init|=
literal|null
decl_stmt|;
if|if
condition|(
name|exNode
operator|.
name|getNodeType
argument_list|()
operator|==
name|Node
operator|.
name|ATTRIBUTE_NODE
condition|)
block|{
specifier|final
name|Attr
name|attr
init|=
operator|(
name|Attr
operator|)
name|exNode
decl_stmt|;
if|if
condition|(
name|attr
operator|.
name|getName
argument_list|()
operator|.
name|equals
argument_list|(
literal|"file"
argument_list|)
condition|)
block|{
specifier|final
name|Sequence
name|seq
init|=
name|enviroment
argument_list|(
name|XmldbURI
operator|.
name|create
argument_list|(
name|attr
operator|.
name|getBaseURI
argument_list|()
argument_list|)
operator|.
name|removeLastSegment
argument_list|()
operator|+
literal|"/"
operator|+
name|attr
operator|.
name|getValue
argument_list|()
argument_list|)
decl_stmt|;
name|StringBuilder
name|sb
init|=
operator|new
name|StringBuilder
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|j
init|=
literal|0
init|;
name|j
operator|<
name|seq
operator|.
name|getItemCount
argument_list|()
condition|;
name|j
operator|++
control|)
block|{
name|sb
operator|.
name|append
argument_list|(
name|toString
argument_list|(
name|seq
operator|.
name|itemAt
argument_list|(
name|j
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|exString
operator|=
name|sb
operator|.
name|toString
argument_list|()
expr_stmt|;
block|}
if|else if
condition|(
name|attr
operator|.
name|getName
argument_list|()
operator|.
name|equals
argument_list|(
literal|"ignore-prefixes"
argument_list|)
condition|)
block|{
name|ignorePrefixes
operator|=
name|Boolean
operator|.
name|parseBoolean
argument_list|(
name|attr
operator|.
name|getValue
argument_list|()
argument_list|)
expr_stmt|;
name|exString
operator|=
name|expected
operator|.
name|item
argument_list|(
operator|++
name|i
argument_list|)
operator|.
name|getNodeValue
argument_list|()
expr_stmt|;
block|}
else|else
block|{
name|Assert
operator|.
name|fail
argument_list|(
literal|"eXist XQTS3 Test Suite Error: Unknown Attribute '"
operator|+
name|attr
operator|.
name|getName
argument_list|()
operator|+
literal|"'"
argument_list|)
expr_stmt|;
return|return;
block|}
block|}
else|else
block|{
name|exString
operator|=
name|exNode
operator|.
name|getNodeValue
argument_list|()
expr_stmt|;
block|}
specifier|final
name|Item
name|acNode
init|=
name|result
operator|.
name|itemAt
argument_list|(
name|ic
argument_list|)
decl_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|diffXML
argument_list|(
name|exString
argument_list|,
name|toString
argument_list|(
name|acNode
argument_list|)
argument_list|,
name|ignorePrefixes
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
if|else if
condition|(
literal|"error"
operator|.
name|equals
argument_list|(
name|type
argument_list|)
condition|)
block|{
name|Assert
operator|.
name|assertTrue
argument_list|(
literal|"unhandled error "
operator|+
name|expected
argument_list|,
literal|false
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|Assert
operator|.
name|assertTrue
argument_list|(
literal|"unknown '"
operator|+
name|type
operator|+
literal|"'"
argument_list|,
literal|false
argument_list|)
expr_stmt|;
block|}
block|}
specifier|private
name|String
name|itemToString
parameter_list|(
name|Item
name|item
parameter_list|)
throws|throws
name|XPathException
block|{
name|StringBuilder
name|sb
init|=
operator|new
name|StringBuilder
argument_list|()
decl_stmt|;
if|if
condition|(
name|item
operator|.
name|getType
argument_list|()
operator|==
name|Type
operator|.
name|STRING
condition|)
block|{
name|sb
operator|.
name|append
argument_list|(
literal|'"'
argument_list|)
operator|.
name|append
argument_list|(
name|item
operator|.
name|getStringValue
argument_list|()
argument_list|)
operator|.
name|append
argument_list|(
literal|'"'
argument_list|)
expr_stmt|;
block|}
if|else if
condition|(
name|item
operator|.
name|getType
argument_list|()
operator|==
name|Type
operator|.
name|BOOLEAN
condition|)
block|{
name|sb
operator|.
name|append
argument_list|(
name|item
operator|.
name|getStringValue
argument_list|()
argument_list|)
operator|.
name|append
argument_list|(
literal|"()"
argument_list|)
expr_stmt|;
block|}
if|else if
condition|(
name|item
operator|.
name|getType
argument_list|()
operator|==
name|Type
operator|.
name|FLOAT
condition|)
block|{
name|sb
operator|.
name|append
argument_list|(
literal|"xs:float('"
argument_list|)
operator|.
name|append
argument_list|(
name|item
operator|.
name|getStringValue
argument_list|()
argument_list|)
operator|.
name|append
argument_list|(
literal|"')"
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|sb
operator|.
name|append
argument_list|(
name|item
operator|.
name|getStringValue
argument_list|()
argument_list|)
expr_stmt|;
block|}
return|return
name|sb
operator|.
name|toString
argument_list|()
return|;
block|}
specifier|private
specifier|static
specifier|final
name|Properties
name|properties
init|=
operator|new
name|Properties
argument_list|()
decl_stmt|;
specifier|private
name|String
name|toString
parameter_list|(
name|Item
name|item
parameter_list|)
throws|throws
name|SAXException
block|{
name|StringWriter
name|writer
init|=
operator|new
name|StringWriter
argument_list|()
decl_stmt|;
name|SAXSerializer
name|serializer
init|=
operator|new
name|SAXSerializer
argument_list|(
name|writer
argument_list|,
name|properties
argument_list|)
decl_stmt|;
name|item
operator|.
name|toSAX
argument_list|(
name|pool
operator|.
name|getActiveBroker
argument_list|()
argument_list|,
name|serializer
argument_list|,
name|properties
argument_list|)
expr_stmt|;
name|String
name|serialized
init|=
name|writer
operator|.
name|toString
argument_list|()
decl_stmt|;
comment|//System.out.println(serialized);
return|return
name|serialized
return|;
block|}
specifier|private
name|boolean
name|diffXML
parameter_list|(
specifier|final
name|String
name|expectedResult
parameter_list|,
specifier|final
name|String
name|result
parameter_list|)
throws|throws
name|SAXException
throws|,
name|IOException
block|{
return|return
name|diffXML
argument_list|(
name|expectedResult
argument_list|,
name|result
argument_list|,
literal|false
argument_list|)
return|;
block|}
comment|/**      * @param expectedResult      * @param result      * @param lax When set to false, expectedResult and result must be 'identical', when set to true it is acceptable if they are 'similar'      */
specifier|private
name|boolean
name|diffXML
parameter_list|(
specifier|final
name|String
name|expectedResult
parameter_list|,
specifier|final
name|String
name|result
parameter_list|,
specifier|final
name|boolean
name|lax
parameter_list|)
throws|throws
name|SAXException
throws|,
name|IOException
block|{
specifier|final
name|Diff
name|diff
init|=
operator|new
name|Diff
argument_list|(
name|expectedResult
operator|.
name|trim
argument_list|()
argument_list|,
name|result
argument_list|)
decl_stmt|;
name|boolean
name|match
init|=
literal|false
decl_stmt|;
if|if
condition|(
name|lax
condition|)
block|{
name|match
operator|=
name|diff
operator|.
name|similar
argument_list|()
expr_stmt|;
block|}
else|else
block|{
name|match
operator|=
name|diff
operator|.
name|identical
argument_list|()
expr_stmt|;
block|}
if|if
condition|(
name|match
condition|)
block|{
comment|//pass
return|return
literal|true
return|;
block|}
comment|//fail
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"expected:"
argument_list|)
expr_stmt|;
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
name|expectedResult
argument_list|)
expr_stmt|;
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"but got:"
argument_list|)
expr_stmt|;
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
name|result
argument_list|)
expr_stmt|;
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
name|diff
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
return|return
literal|false
return|;
block|}
specifier|private
name|void
name|diffXML
parameter_list|(
specifier|final
name|Node
name|expectedNode
parameter_list|,
specifier|final
name|Node
name|actualNode
parameter_list|)
block|{
name|Assert
operator|.
name|assertTrue
argument_list|(
literal|"expected: "
operator|+
name|expectedNode
operator|+
literal|"  but got: "
operator|+
name|actualNode
argument_list|,
name|expectedNode
operator|.
name|isEqualNode
argument_list|(
name|actualNode
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|protected
name|String
name|getCollection
parameter_list|()
block|{
return|return
name|QT3_URI
operator|.
name|toString
argument_list|()
return|;
block|}
block|}
end_class

end_unit

