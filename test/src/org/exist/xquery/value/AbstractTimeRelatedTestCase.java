begin_unit|revision:1.0.0;language:Java;cregit-version:0.0.1
begin_package
package|package
name|org
operator|.
name|exist
operator|.
name|xquery
operator|.
name|value
package|;
end_package

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|xquery
operator|.
name|Constants
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|xquery
operator|.
name|XPathException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|After
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Before
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|fail
import|;
end_import

begin_class
specifier|public
specifier|abstract
class|class
name|AbstractTimeRelatedTestCase
block|{
annotation|@
name|Before
specifier|public
name|void
name|setUp
parameter_list|()
throws|throws
name|Exception
block|{
name|TimeUtils
operator|.
name|getInstance
argument_list|()
operator|.
name|overrideLocalTimezoneOffset
argument_list|(
operator|-
literal|5
operator|*
literal|60
operator|*
literal|60
operator|*
literal|1000
argument_list|)
expr_stmt|;
block|}
annotation|@
name|After
specifier|public
name|void
name|tearDown
parameter_list|()
throws|throws
name|Exception
block|{
name|TimeUtils
operator|.
name|getInstance
argument_list|()
operator|.
name|resetLocalTimezoneOffset
argument_list|()
expr_stmt|;
block|}
specifier|protected
name|void
name|checkMinMaxFails
parameter_list|(
name|DurationValue
name|a
parameter_list|,
name|DurationValue
name|b
parameter_list|)
block|{
try|try
block|{
name|a
operator|.
name|max
argument_list|(
literal|null
argument_list|,
name|b
argument_list|)
expr_stmt|;
name|fail
argument_list|(
name|a
operator|+
literal|" max "
operator|+
name|b
operator|+
literal|" succeeded"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|XPathException
name|e
parameter_list|)
block|{
comment|/*expected*/
block|}
try|try
block|{
name|a
operator|.
name|min
argument_list|(
literal|null
argument_list|,
name|b
argument_list|)
expr_stmt|;
name|fail
argument_list|(
name|a
operator|+
literal|" min "
operator|+
name|b
operator|+
literal|" succeeded"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|XPathException
name|e
parameter_list|)
block|{
comment|/*expected*/
block|}
block|}
comment|// type explicitly included in method name to avoid accidental (and confusing!) use of overloaded assertEquals methods
specifier|protected
name|void
name|assertDurationEquals
parameter_list|(
name|DurationValue
name|dv1
parameter_list|,
name|AtomicValue
name|dv2
parameter_list|)
throws|throws
name|XPathException
block|{
if|if
condition|(
operator|!
name|dv1
operator|.
name|compareTo
argument_list|(
literal|null
argument_list|,
name|Constants
operator|.
name|EQ
argument_list|,
name|dv2
argument_list|)
condition|)
name|fail
argument_list|(
name|dv1
operator|+
literal|" != "
operator|+
name|dv2
argument_list|)
expr_stmt|;
block|}
comment|// type explicitly included in method name to avoid accidental (and confusing!) use of overloaded assertEquals methods
specifier|protected
name|void
name|assertDateEquals
parameter_list|(
name|AbstractDateTimeValue
name|v1
parameter_list|,
name|AtomicValue
name|v2
parameter_list|)
throws|throws
name|XPathException
block|{
if|if
condition|(
operator|!
name|v1
operator|.
name|compareTo
argument_list|(
literal|null
argument_list|,
name|Constants
operator|.
name|EQ
argument_list|,
name|v2
argument_list|)
condition|)
name|fail
argument_list|(
name|v1
operator|+
literal|" != "
operator|+
name|v2
argument_list|)
expr_stmt|;
block|}
specifier|protected
name|DayTimeDurationValue
name|getLocalTimezoneDuration
parameter_list|()
throws|throws
name|XPathException
block|{
return|return
operator|new
name|DayTimeDurationValue
argument_list|(
name|TimeUtils
operator|.
name|getInstance
argument_list|()
operator|.
name|getLocalTimezoneOffsetMillis
argument_list|()
argument_list|)
return|;
block|}
specifier|protected
name|String
name|getLocalTimezoneOffset
parameter_list|()
throws|throws
name|XPathException
block|{
name|int
name|offset
init|=
operator|(
name|int
operator|)
operator|(
name|TimeUtils
operator|.
name|getInstance
argument_list|()
operator|.
name|getLocalTimezoneOffsetMillis
argument_list|()
operator|/
literal|60000L
operator|)
decl_stmt|;
name|int
name|hours
init|=
name|offset
operator|/
literal|60
decl_stmt|,
name|minutes
init|=
name|offset
operator|%
literal|60
decl_stmt|;
name|StringBuffer
name|buf
init|=
operator|new
name|StringBuffer
argument_list|()
decl_stmt|;
name|buf
operator|.
name|append
argument_list|(
name|offset
operator|<
literal|0
condition|?
literal|'-'
else|:
literal|'+'
argument_list|)
expr_stmt|;
if|if
condition|(
name|hours
operator|<
literal|10
condition|)
name|buf
operator|.
name|append
argument_list|(
literal|'0'
argument_list|)
expr_stmt|;
name|buf
operator|.
name|append
argument_list|(
name|hours
argument_list|)
expr_stmt|;
name|buf
operator|.
name|append
argument_list|(
literal|':'
argument_list|)
expr_stmt|;
if|if
condition|(
name|minutes
operator|<
literal|10
condition|)
name|buf
operator|.
name|append
argument_list|(
literal|'0'
argument_list|)
expr_stmt|;
name|buf
operator|.
name|append
argument_list|(
name|minutes
argument_list|)
expr_stmt|;
return|return
name|buf
operator|.
name|toString
argument_list|()
return|;
block|}
block|}
end_class

end_unit

