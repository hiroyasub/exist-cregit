begin_unit|revision:1.0.0;language:Java;cregit-version:0.0.1
begin_package
package|package
name|org
operator|.
name|exist
operator|.
name|xquery
operator|.
name|value
package|;
end_package

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|xquery
operator|.
name|Constants
operator|.
name|Comparison
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|xquery
operator|.
name|XPathException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertEquals
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertFalse
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertTrue
import|;
end_import

begin_comment
comment|/**  *	note: some of these tests rely on local timezone override to -05:00, done in super.setUp()  *  * @author<a href="mailto:piotr@ideanest.com">Piotr Kaminski</a>  */
end_comment

begin_class
specifier|public
class|class
name|DateTest
extends|extends
name|AbstractTimeRelatedTestCase
block|{
annotation|@
name|Test
argument_list|(
name|expected
operator|=
name|XPathException
operator|.
name|class
argument_list|)
specifier|public
name|void
name|create1
parameter_list|()
throws|throws
name|XPathException
block|{
operator|new
name|DateValue
argument_list|(
literal|"2005-10-11T10:00:00Z"
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
argument_list|(
name|expected
operator|=
name|XPathException
operator|.
name|class
argument_list|)
specifier|public
name|void
name|create2
parameter_list|()
throws|throws
name|XPathException
block|{
operator|new
name|DateValue
argument_list|(
literal|"10:00:00Z"
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|stringFormat1
parameter_list|()
throws|throws
name|XPathException
block|{
name|AbstractDateTimeValue
name|v
init|=
operator|new
name|DateValue
argument_list|(
literal|"2005-10-11Z"
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|"2005-10-11Z"
argument_list|,
name|v
operator|.
name|getStringValue
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|stringFormat2
parameter_list|()
throws|throws
name|XPathException
block|{
name|AbstractDateTimeValue
name|v
init|=
operator|new
name|DateValue
argument_list|(
literal|"2005-10-11-01:00"
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|"2005-10-11-01:00"
argument_list|,
name|v
operator|.
name|getStringValue
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"2005-10-11-01:00"
argument_list|,
name|v
operator|.
name|getTrimmedCalendar
argument_list|()
operator|.
name|toXMLFormat
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|stringFormat3
parameter_list|()
throws|throws
name|XPathException
block|{
name|AbstractDateTimeValue
name|v
init|=
operator|new
name|DateValue
argument_list|(
literal|"2005-10-11-00:00"
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|"2005-10-11Z"
argument_list|,
name|v
operator|.
name|getStringValue
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|stringFormat4
parameter_list|()
throws|throws
name|XPathException
block|{
name|AbstractDateTimeValue
name|v
init|=
operator|new
name|DateValue
argument_list|(
literal|"2005-10-11"
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|"2005-10-11"
argument_list|,
name|v
operator|.
name|getStringValue
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|getPart1
parameter_list|()
throws|throws
name|XPathException
block|{
name|AbstractDateTimeValue
name|v
init|=
operator|new
name|DateValue
argument_list|(
literal|"2005-10-11Z"
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|2005
argument_list|,
name|v
operator|.
name|getPart
argument_list|(
name|AbstractDateTimeValue
operator|.
name|YEAR
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|10
argument_list|,
name|v
operator|.
name|getPart
argument_list|(
name|AbstractDateTimeValue
operator|.
name|MONTH
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|11
argument_list|,
name|v
operator|.
name|getPart
argument_list|(
name|AbstractDateTimeValue
operator|.
name|DAY
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|getPart2
parameter_list|()
throws|throws
name|XPathException
block|{
name|AbstractDateTimeValue
name|v
init|=
operator|new
name|DateValue
argument_list|(
literal|"2005-10-11"
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|2005
argument_list|,
name|v
operator|.
name|getPart
argument_list|(
name|AbstractDateTimeValue
operator|.
name|YEAR
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|10
argument_list|,
name|v
operator|.
name|getPart
argument_list|(
name|AbstractDateTimeValue
operator|.
name|MONTH
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|11
argument_list|,
name|v
operator|.
name|getPart
argument_list|(
name|AbstractDateTimeValue
operator|.
name|DAY
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|convert1
parameter_list|()
throws|throws
name|XPathException
block|{
name|AbstractDateTimeValue
name|v1
init|=
operator|new
name|DateValue
argument_list|(
literal|"2005-10-11+05:00"
argument_list|)
decl_stmt|;
name|AtomicValue
name|v2
init|=
name|v1
operator|.
name|convertTo
argument_list|(
name|Type
operator|.
name|DATE
argument_list|)
decl_stmt|;
name|assertDateEquals
argument_list|(
name|v1
argument_list|,
name|v2
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|convert2
parameter_list|()
throws|throws
name|XPathException
block|{
name|AbstractDateTimeValue
name|v1
init|=
operator|new
name|DateValue
argument_list|(
literal|"2005-10-11"
argument_list|)
decl_stmt|;
name|AtomicValue
name|v2
init|=
name|v1
operator|.
name|convertTo
argument_list|(
name|Type
operator|.
name|DATE
argument_list|)
decl_stmt|;
name|assertDateEquals
argument_list|(
name|v1
argument_list|,
name|v2
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|Sequence
operator|.
name|EMPTY_SEQUENCE
argument_list|,
operator|(
operator|(
name|AbstractDateTimeValue
operator|)
name|v2
operator|)
operator|.
name|getTimezone
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|convert3
parameter_list|()
throws|throws
name|XPathException
block|{
name|AbstractDateTimeValue
name|v1
init|=
operator|new
name|DateValue
argument_list|(
literal|"2005-10-11+05:00"
argument_list|)
decl_stmt|;
name|AtomicValue
name|v2
init|=
name|v1
operator|.
name|convertTo
argument_list|(
name|Type
operator|.
name|DATE_TIME
argument_list|)
decl_stmt|;
name|assertDateEquals
argument_list|(
operator|new
name|DateTimeValue
argument_list|(
literal|"2005-10-11T00:00:00+05:00"
argument_list|)
argument_list|,
name|v2
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|convert4
parameter_list|()
throws|throws
name|XPathException
block|{
name|AbstractDateTimeValue
name|v1
init|=
operator|new
name|DateValue
argument_list|(
literal|"2005-10-11"
argument_list|)
decl_stmt|;
name|AtomicValue
name|v2
init|=
name|v1
operator|.
name|convertTo
argument_list|(
name|Type
operator|.
name|DATE_TIME
argument_list|)
decl_stmt|;
name|assertDateEquals
argument_list|(
operator|new
name|DateTimeValue
argument_list|(
literal|"2005-10-11T00:00:00"
argument_list|)
argument_list|,
name|v2
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|Sequence
operator|.
name|EMPTY_SEQUENCE
argument_list|,
operator|(
operator|(
name|AbstractDateTimeValue
operator|)
name|v2
operator|)
operator|.
name|getTimezone
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|getType
parameter_list|()
throws|throws
name|XPathException
block|{
name|AbstractDateTimeValue
name|v1
init|=
operator|new
name|DateValue
argument_list|(
literal|"2005-10-11"
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|Type
operator|.
name|DATE
argument_list|,
name|v1
operator|.
name|getType
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|getTimezone1
parameter_list|()
throws|throws
name|XPathException
block|{
name|AbstractDateTimeValue
name|v1
init|=
operator|new
name|DateValue
argument_list|(
literal|"2005-10-11"
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|Sequence
operator|.
name|EMPTY_SEQUENCE
argument_list|,
name|v1
operator|.
name|getTimezone
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|getTimezone2
parameter_list|()
throws|throws
name|XPathException
block|{
name|AbstractDateTimeValue
name|v1
init|=
operator|new
name|DateValue
argument_list|(
literal|"2005-10-11+05:30"
argument_list|)
decl_stmt|;
name|assertDurationEquals
argument_list|(
operator|new
name|DayTimeDurationValue
argument_list|(
literal|"PT5H30M"
argument_list|)
argument_list|,
operator|(
name|AtomicValue
operator|)
name|v1
operator|.
name|getTimezone
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|getTimezone3
parameter_list|()
throws|throws
name|XPathException
block|{
name|AbstractDateTimeValue
name|v1
init|=
operator|new
name|DateValue
argument_list|(
literal|"2005-10-11-05:30"
argument_list|)
decl_stmt|;
name|assertDurationEquals
argument_list|(
operator|new
name|DayTimeDurationValue
argument_list|(
literal|"-PT5H30M"
argument_list|)
argument_list|,
operator|(
name|AtomicValue
operator|)
name|v1
operator|.
name|getTimezone
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|getTimezone4
parameter_list|()
throws|throws
name|XPathException
block|{
name|AbstractDateTimeValue
name|v1
init|=
operator|new
name|DateValue
argument_list|(
literal|"2005-10-11Z"
argument_list|)
decl_stmt|;
name|assertDurationEquals
argument_list|(
operator|new
name|DayTimeDurationValue
argument_list|(
literal|"P0D"
argument_list|)
argument_list|,
operator|(
name|AtomicValue
operator|)
name|v1
operator|.
name|getTimezone
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|withoutTimezone1
parameter_list|()
throws|throws
name|XPathException
block|{
name|AbstractDateTimeValue
name|v1
init|=
operator|new
name|DateValue
argument_list|(
literal|"2002-03-07"
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|"2002-03-07"
argument_list|,
name|v1
operator|.
name|withoutTimezone
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|withoutTimezone2
parameter_list|()
throws|throws
name|XPathException
block|{
name|AbstractDateTimeValue
name|v1
init|=
operator|new
name|DateValue
argument_list|(
literal|"2002-03-07-07:00"
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|"2002-03-07"
argument_list|,
name|v1
operator|.
name|withoutTimezone
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|adjustedToTimezone1
parameter_list|()
throws|throws
name|XPathException
block|{
name|AbstractDateTimeValue
name|v1
init|=
operator|new
name|DateValue
argument_list|(
literal|"2002-03-07"
argument_list|)
decl_stmt|;
name|AbstractDateTimeValue
name|v2
init|=
name|v1
operator|.
name|adjustedToTimezone
argument_list|(
literal|null
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|"2002-03-07-05:00"
argument_list|,
name|v2
operator|.
name|getStringValue
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"2002-03-07-05:00"
argument_list|,
name|v2
operator|.
name|getTrimmedCalendar
argument_list|()
operator|.
name|toXMLFormat
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|adjustedToTimezone2
parameter_list|()
throws|throws
name|XPathException
block|{
name|AbstractDateTimeValue
name|v1
init|=
operator|new
name|DateValue
argument_list|(
literal|"2002-03-07-07:00"
argument_list|)
decl_stmt|;
name|AbstractDateTimeValue
name|v2
init|=
name|v1
operator|.
name|adjustedToTimezone
argument_list|(
literal|null
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|"2002-03-07-05:00"
argument_list|,
name|v2
operator|.
name|getStringValue
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"2002-03-07-05:00"
argument_list|,
name|v2
operator|.
name|getTrimmedCalendar
argument_list|()
operator|.
name|toXMLFormat
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|adjustedToTimezone3
parameter_list|()
throws|throws
name|XPathException
block|{
name|AbstractDateTimeValue
name|v1
init|=
operator|new
name|DateValue
argument_list|(
literal|"2002-03-07"
argument_list|)
decl_stmt|;
name|AbstractDateTimeValue
name|v2
init|=
name|v1
operator|.
name|adjustedToTimezone
argument_list|(
operator|new
name|DayTimeDurationValue
argument_list|(
literal|"-PT10H"
argument_list|)
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|"2002-03-07-10:00"
argument_list|,
name|v2
operator|.
name|getStringValue
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"2002-03-07-10:00"
argument_list|,
name|v2
operator|.
name|getTrimmedCalendar
argument_list|()
operator|.
name|toXMLFormat
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|adjustedToTimezone4
parameter_list|()
throws|throws
name|XPathException
block|{
name|AbstractDateTimeValue
name|v1
init|=
operator|new
name|DateValue
argument_list|(
literal|"2002-03-07-07:00"
argument_list|)
decl_stmt|;
name|AbstractDateTimeValue
name|v2
init|=
name|v1
operator|.
name|adjustedToTimezone
argument_list|(
operator|new
name|DayTimeDurationValue
argument_list|(
literal|"-PT10H"
argument_list|)
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|"2002-03-06-10:00"
argument_list|,
name|v2
operator|.
name|getStringValue
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"2002-03-06-10:00"
argument_list|,
name|v2
operator|.
name|getTrimmedCalendar
argument_list|()
operator|.
name|toXMLFormat
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
argument_list|(
name|expected
operator|=
name|XPathException
operator|.
name|class
argument_list|)
specifier|public
name|void
name|adjustedToTimezone5
parameter_list|()
throws|throws
name|XPathException
block|{
name|AbstractDateTimeValue
name|v1
init|=
operator|new
name|DateValue
argument_list|(
literal|"2002-03-07+01:00"
argument_list|)
decl_stmt|;
name|v1
operator|.
name|adjustedToTimezone
argument_list|(
operator|new
name|DayTimeDurationValue
argument_list|(
literal|"-PT15H"
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
argument_list|(
name|expected
operator|=
name|XPathException
operator|.
name|class
argument_list|)
specifier|public
name|void
name|adjustedToTimezone6
parameter_list|()
throws|throws
name|XPathException
block|{
name|AbstractDateTimeValue
name|v1
init|=
operator|new
name|DateValue
argument_list|(
literal|"2002-03-07+01:00"
argument_list|)
decl_stmt|;
name|v1
operator|.
name|adjustedToTimezone
argument_list|(
operator|new
name|DayTimeDurationValue
argument_list|(
literal|"PT14H01M"
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
argument_list|(
name|expected
operator|=
name|XPathException
operator|.
name|class
argument_list|)
specifier|public
name|void
name|adjustedToTimezone7
parameter_list|()
throws|throws
name|XPathException
block|{
name|AbstractDateTimeValue
name|v1
init|=
operator|new
name|DateValue
argument_list|(
literal|"2002-03-07+01:00"
argument_list|)
decl_stmt|;
name|v1
operator|.
name|adjustedToTimezone
argument_list|(
operator|new
name|DayTimeDurationValue
argument_list|(
literal|"PT8H4S"
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|adjustedToTimezone8
parameter_list|()
throws|throws
name|XPathException
block|{
name|AbstractDateTimeValue
name|v1
init|=
operator|new
name|DateValue
argument_list|(
literal|"2002-03-07"
argument_list|)
decl_stmt|;
name|AbstractDateTimeValue
name|v2
init|=
name|v1
operator|.
name|adjustedToTimezone
argument_list|(
operator|new
name|DayTimeDurationValue
argument_list|(
literal|"PT14H"
argument_list|)
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|"2002-03-07+14:00"
argument_list|,
name|v2
operator|.
name|getStringValue
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"2002-03-07+14:00"
argument_list|,
name|v2
operator|.
name|getTrimmedCalendar
argument_list|()
operator|.
name|toXMLFormat
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|compare1
parameter_list|()
throws|throws
name|XPathException
block|{
name|AbstractDateTimeValue
name|v1
init|=
operator|new
name|DateValue
argument_list|(
literal|"2004-12-25Z"
argument_list|)
decl_stmt|,
name|v2
init|=
operator|new
name|DateValue
argument_list|(
literal|"2004-12-25+07:00"
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|v1
operator|.
name|compareTo
argument_list|(
literal|null
argument_list|,
name|v2
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
operator|-
literal|1
argument_list|,
name|v2
operator|.
name|compareTo
argument_list|(
literal|null
argument_list|,
name|v1
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|compare2
parameter_list|()
throws|throws
name|XPathException
block|{
name|AbstractDateTimeValue
name|v1
init|=
operator|new
name|DateValue
argument_list|(
literal|"2004-12-25-12:00"
argument_list|)
decl_stmt|,
name|v2
init|=
operator|new
name|DateValue
argument_list|(
literal|"2004-12-26+12:00"
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|v1
operator|.
name|compareTo
argument_list|(
literal|null
argument_list|,
name|v2
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|v2
operator|.
name|compareTo
argument_list|(
literal|null
argument_list|,
name|v1
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|compare3
parameter_list|()
throws|throws
name|XPathException
block|{
name|AbstractDateTimeValue
name|v1
init|=
operator|new
name|DateValue
argument_list|(
literal|"2004-12-25Z"
argument_list|)
decl_stmt|,
name|v2
init|=
operator|new
name|DateValue
argument_list|(
literal|"2004-12-25-05:00"
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
operator|-
literal|1
argument_list|,
name|v1
operator|.
name|compareTo
argument_list|(
literal|null
argument_list|,
name|v2
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
operator|+
literal|1
argument_list|,
name|v2
operator|.
name|compareTo
argument_list|(
literal|null
argument_list|,
name|v1
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|compare4
parameter_list|()
throws|throws
name|XPathException
block|{
name|AbstractDateTimeValue
name|v1
init|=
operator|new
name|DateValue
argument_list|(
literal|"2004-12-25Z"
argument_list|)
decl_stmt|,
name|v2
init|=
operator|new
name|DateValue
argument_list|(
literal|"2004-12-25+07:00"
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|v1
operator|.
name|compareTo
argument_list|(
literal|null
argument_list|,
name|v2
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
operator|-
literal|1
argument_list|,
name|v2
operator|.
name|compareTo
argument_list|(
literal|null
argument_list|,
name|v1
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|compare5
parameter_list|()
throws|throws
name|XPathException
block|{
name|AbstractDateTimeValue
name|v1
init|=
operator|new
name|DateValue
argument_list|(
literal|"2004-12-25-12:00"
argument_list|)
decl_stmt|,
name|v2
init|=
operator|new
name|DateValue
argument_list|(
literal|"2004-12-26+12:00"
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
name|v1
operator|.
name|compareTo
argument_list|(
literal|null
argument_list|,
name|Comparison
operator|.
name|EQ
argument_list|,
name|v2
argument_list|)
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|v1
operator|.
name|compareTo
argument_list|(
literal|null
argument_list|,
name|Comparison
operator|.
name|NEQ
argument_list|,
name|v2
argument_list|)
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|v1
operator|.
name|compareTo
argument_list|(
literal|null
argument_list|,
name|Comparison
operator|.
name|GT
argument_list|,
name|v2
argument_list|)
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|v1
operator|.
name|compareTo
argument_list|(
literal|null
argument_list|,
name|Comparison
operator|.
name|LT
argument_list|,
name|v2
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|v1
operator|.
name|compareTo
argument_list|(
literal|null
argument_list|,
name|Comparison
operator|.
name|GTEQ
argument_list|,
name|v2
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|v1
operator|.
name|compareTo
argument_list|(
literal|null
argument_list|,
name|Comparison
operator|.
name|LTEQ
argument_list|,
name|v2
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|compare7
parameter_list|()
throws|throws
name|XPathException
block|{
name|AbstractDateTimeValue
name|v1
init|=
operator|new
name|DateValue
argument_list|(
literal|"2004-12-25Z"
argument_list|)
decl_stmt|,
name|v2
init|=
operator|new
name|DateValue
argument_list|(
literal|"2004-12-25-05:00"
argument_list|)
decl_stmt|;
name|assertFalse
argument_list|(
name|v1
operator|.
name|compareTo
argument_list|(
literal|null
argument_list|,
name|Comparison
operator|.
name|EQ
argument_list|,
name|v2
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|v1
operator|.
name|compareTo
argument_list|(
literal|null
argument_list|,
name|Comparison
operator|.
name|NEQ
argument_list|,
name|v2
argument_list|)
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|v1
operator|.
name|compareTo
argument_list|(
literal|null
argument_list|,
name|Comparison
operator|.
name|GT
argument_list|,
name|v2
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|v1
operator|.
name|compareTo
argument_list|(
literal|null
argument_list|,
name|Comparison
operator|.
name|LT
argument_list|,
name|v2
argument_list|)
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|v1
operator|.
name|compareTo
argument_list|(
literal|null
argument_list|,
name|Comparison
operator|.
name|GTEQ
argument_list|,
name|v2
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|v1
operator|.
name|compareTo
argument_list|(
literal|null
argument_list|,
name|Comparison
operator|.
name|LTEQ
argument_list|,
name|v2
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|minMax1
parameter_list|()
throws|throws
name|XPathException
block|{
name|AbstractDateTimeValue
name|v1
init|=
operator|new
name|DateValue
argument_list|(
literal|"2004-12-25Z"
argument_list|)
decl_stmt|,
name|v2
init|=
operator|new
name|DateValue
argument_list|(
literal|"2004-12-25-05:00"
argument_list|)
decl_stmt|;
name|assertDateEquals
argument_list|(
name|v2
argument_list|,
name|v1
operator|.
name|max
argument_list|(
literal|null
argument_list|,
name|v2
argument_list|)
argument_list|)
expr_stmt|;
name|assertDateEquals
argument_list|(
name|v2
argument_list|,
name|v2
operator|.
name|max
argument_list|(
literal|null
argument_list|,
name|v1
argument_list|)
argument_list|)
expr_stmt|;
name|assertDateEquals
argument_list|(
name|v1
argument_list|,
name|v1
operator|.
name|min
argument_list|(
literal|null
argument_list|,
name|v2
argument_list|)
argument_list|)
expr_stmt|;
name|assertDateEquals
argument_list|(
name|v1
argument_list|,
name|v2
operator|.
name|min
argument_list|(
literal|null
argument_list|,
name|v1
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|plus1
parameter_list|()
throws|throws
name|XPathException
block|{
name|AbstractDateTimeValue
name|t
init|=
operator|new
name|DateValue
argument_list|(
literal|"2000-10-30"
argument_list|)
decl_stmt|;
name|DurationValue
name|d
init|=
operator|new
name|YearMonthDurationValue
argument_list|(
literal|"P1Y2M"
argument_list|)
decl_stmt|;
name|AbstractDateTimeValue
name|r
init|=
operator|new
name|DateValue
argument_list|(
literal|"2001-12-30"
argument_list|)
decl_stmt|;
name|assertDateEquals
argument_list|(
name|r
argument_list|,
name|t
operator|.
name|plus
argument_list|(
name|d
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|plus2
parameter_list|()
throws|throws
name|XPathException
block|{
name|AbstractDateTimeValue
name|t
init|=
operator|new
name|DateValue
argument_list|(
literal|"2000-10-30Z"
argument_list|)
decl_stmt|;
name|DurationValue
name|d
init|=
operator|new
name|YearMonthDurationValue
argument_list|(
literal|"P1Y2M"
argument_list|)
decl_stmt|;
name|AbstractDateTimeValue
name|r
init|=
operator|new
name|DateValue
argument_list|(
literal|"2001-12-30Z"
argument_list|)
decl_stmt|;
name|assertDateEquals
argument_list|(
name|r
argument_list|,
name|t
operator|.
name|plus
argument_list|(
name|d
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|plus3
parameter_list|()
throws|throws
name|XPathException
block|{
name|AbstractDateTimeValue
name|t
init|=
operator|new
name|DateValue
argument_list|(
literal|"2004-10-30"
argument_list|)
decl_stmt|;
name|DurationValue
name|d
init|=
operator|new
name|DayTimeDurationValue
argument_list|(
literal|"P2DT2H30M0S"
argument_list|)
decl_stmt|;
name|AbstractDateTimeValue
name|r
init|=
operator|new
name|DateValue
argument_list|(
literal|"2004-11-01"
argument_list|)
decl_stmt|;
name|assertDateEquals
argument_list|(
name|r
argument_list|,
name|t
operator|.
name|plus
argument_list|(
name|d
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|plus4
parameter_list|()
throws|throws
name|XPathException
block|{
name|AbstractDateTimeValue
name|t
init|=
operator|new
name|DateValue
argument_list|(
literal|"2004-10-30Z"
argument_list|)
decl_stmt|;
name|DurationValue
name|d
init|=
operator|new
name|DayTimeDurationValue
argument_list|(
literal|"P2DT2H30M0S"
argument_list|)
decl_stmt|;
name|AbstractDateTimeValue
name|r
init|=
operator|new
name|DateValue
argument_list|(
literal|"2004-11-01Z"
argument_list|)
decl_stmt|;
name|assertDateEquals
argument_list|(
name|r
argument_list|,
name|t
operator|.
name|plus
argument_list|(
name|d
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|minus1
parameter_list|()
throws|throws
name|XPathException
block|{
name|AbstractDateTimeValue
name|t1
init|=
operator|new
name|DateValue
argument_list|(
literal|"2000-10-30"
argument_list|)
decl_stmt|;
name|AbstractDateTimeValue
name|t2
init|=
operator|new
name|DateValue
argument_list|(
literal|"1999-11-28"
argument_list|)
decl_stmt|;
name|DurationValue
name|d
init|=
operator|new
name|DayTimeDurationValue
argument_list|(
literal|"P337D"
argument_list|)
decl_stmt|;
name|assertDurationEquals
argument_list|(
name|d
argument_list|,
name|t1
operator|.
name|minus
argument_list|(
name|t2
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|minus2
parameter_list|()
throws|throws
name|XPathException
block|{
name|AbstractDateTimeValue
name|t
init|=
operator|new
name|DateValue
argument_list|(
literal|"2000-10-30"
argument_list|)
decl_stmt|;
name|DurationValue
name|d
init|=
operator|new
name|YearMonthDurationValue
argument_list|(
literal|"P1Y2M"
argument_list|)
decl_stmt|;
name|AbstractDateTimeValue
name|r
init|=
operator|new
name|DateValue
argument_list|(
literal|"1999-08-30"
argument_list|)
decl_stmt|;
name|assertDateEquals
argument_list|(
name|r
argument_list|,
name|t
operator|.
name|minus
argument_list|(
name|d
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|minus3
parameter_list|()
throws|throws
name|XPathException
block|{
name|AbstractDateTimeValue
name|t
init|=
operator|new
name|DateValue
argument_list|(
literal|"2000-02-29Z"
argument_list|)
decl_stmt|;
name|DurationValue
name|d
init|=
operator|new
name|YearMonthDurationValue
argument_list|(
literal|"P1Y"
argument_list|)
decl_stmt|;
name|AbstractDateTimeValue
name|r
init|=
operator|new
name|DateValue
argument_list|(
literal|"1999-02-28Z"
argument_list|)
decl_stmt|;
name|assertDateEquals
argument_list|(
name|r
argument_list|,
name|t
operator|.
name|minus
argument_list|(
name|d
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|minus4
parameter_list|()
throws|throws
name|XPathException
block|{
name|AbstractDateTimeValue
name|t
init|=
operator|new
name|DateValue
argument_list|(
literal|"2000-10-31-05:00"
argument_list|)
decl_stmt|;
name|DurationValue
name|d
init|=
operator|new
name|YearMonthDurationValue
argument_list|(
literal|"P1Y1M"
argument_list|)
decl_stmt|;
name|AbstractDateTimeValue
name|r
init|=
operator|new
name|DateValue
argument_list|(
literal|"1999-09-30-05:00"
argument_list|)
decl_stmt|;
name|assertDateEquals
argument_list|(
name|r
argument_list|,
name|t
operator|.
name|minus
argument_list|(
name|d
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|minus5
parameter_list|()
throws|throws
name|XPathException
block|{
name|AbstractDateTimeValue
name|t
init|=
operator|new
name|DateValue
argument_list|(
literal|"2000-10-30"
argument_list|)
decl_stmt|;
name|DurationValue
name|d
init|=
operator|new
name|DayTimeDurationValue
argument_list|(
literal|"P3DT1H15M"
argument_list|)
decl_stmt|;
name|AbstractDateTimeValue
name|r
init|=
operator|new
name|DateValue
argument_list|(
literal|"2000-10-26"
argument_list|)
decl_stmt|;
name|assertDateEquals
argument_list|(
name|r
argument_list|,
name|t
operator|.
name|minus
argument_list|(
name|d
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|minus6
parameter_list|()
throws|throws
name|XPathException
block|{
name|DateValue
name|d1
init|=
operator|new
name|DateValue
argument_list|(
literal|"2005-10-11"
argument_list|)
decl_stmt|,
name|d2
init|=
operator|new
name|DateValue
argument_list|(
literal|"2005-10-09"
argument_list|)
decl_stmt|;
name|DayTimeDurationValue
name|r
init|=
operator|(
name|DayTimeDurationValue
operator|)
name|d1
operator|.
name|minus
argument_list|(
name|d2
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
operator|(
name|double
operator|)
literal|2
operator|*
literal|24
operator|*
literal|60
operator|*
literal|60
argument_list|,
name|r
operator|.
name|getValue
argument_list|()
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|r
operator|.
name|getPart
argument_list|(
name|DurationValue
operator|.
name|DAY
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|minus7
parameter_list|()
throws|throws
name|XPathException
block|{
name|DateValue
name|d1
init|=
operator|new
name|DateValue
argument_list|(
literal|"2005-10-10"
argument_list|)
decl_stmt|,
name|d2
init|=
operator|new
name|DateValue
argument_list|(
literal|"2005-10-09"
argument_list|)
decl_stmt|;
name|DayTimeDurationValue
name|r
init|=
operator|(
name|DayTimeDurationValue
operator|)
name|d1
operator|.
name|minus
argument_list|(
name|d2
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
operator|(
name|double
operator|)
literal|1
operator|*
literal|24
operator|*
literal|60
operator|*
literal|60
argument_list|,
name|r
operator|.
name|getValue
argument_list|()
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|r
operator|.
name|getPart
argument_list|(
name|DurationValue
operator|.
name|DAY
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|equal
parameter_list|()
throws|throws
name|XPathException
block|{
name|assertEquals
argument_list|(
operator|new
name|DateValue
argument_list|(
literal|"2010-06-01+05:00"
argument_list|)
argument_list|,
operator|new
name|DateValue
argument_list|(
literal|"2010-06-01+05:00"
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

