begin_unit|revision:1.0.0;language:Java;cregit-version:0.0.1
begin_package
package|package
name|org
operator|.
name|exist
operator|.
name|xquery
operator|.
name|value
package|;
end_package

begin_import
import|import
name|java
operator|.
name|lang
operator|.
name|reflect
operator|.
name|Method
import|;
end_import

begin_import
import|import
name|java
operator|.
name|lang
operator|.
name|reflect
operator|.
name|Modifier
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collection
import|;
end_import

begin_import
import|import
name|junit
operator|.
name|framework
operator|.
name|*
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|xquery
operator|.
name|XPathException
import|;
end_import

begin_comment
comment|/**  *  * @author<a href="mailto:piotr@ideanest.com">Piotr Kaminski</a>  */
end_comment

begin_class
specifier|public
class|class
name|NumericOpPromotionTest
extends|extends
name|TestCase
block|{
specifier|private
specifier|static
specifier|final
name|double
name|VALUE
init|=
literal|1.5
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|IntegerValue
name|ZERO
init|=
operator|new
name|IntegerValue
argument_list|(
literal|0
argument_list|)
decl_stmt|,
name|ONE
init|=
operator|new
name|IntegerValue
argument_list|(
literal|1
argument_list|)
decl_stmt|;
specifier|private
specifier|static
name|String
index|[]
name|tests
decl_stmt|;
static|static
block|{
name|Collection
name|names
init|=
operator|new
name|ArrayList
argument_list|()
decl_stmt|;
name|Method
index|[]
name|ms
init|=
name|NumericOpPromotionTest
operator|.
name|class
operator|.
name|getMethods
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|ms
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
name|Method
name|m
init|=
name|ms
index|[
name|i
index|]
decl_stmt|;
if|if
condition|(
name|Modifier
operator|.
name|isPublic
argument_list|(
name|m
operator|.
name|getModifiers
argument_list|()
argument_list|)
operator|&&
name|m
operator|.
name|getName
argument_list|()
operator|.
name|startsWith
argument_list|(
literal|"test"
argument_list|)
condition|)
name|names
operator|.
name|add
argument_list|(
name|m
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|tests
operator|=
operator|(
name|String
index|[]
operator|)
name|names
operator|.
name|toArray
argument_list|(
operator|new
name|String
index|[
literal|0
index|]
argument_list|)
expr_stmt|;
block|}
specifier|public
specifier|static
name|Test
name|suite
parameter_list|()
throws|throws
name|XPathException
block|{
name|TestSuite
name|suite
init|=
operator|new
name|TestSuite
argument_list|()
decl_stmt|;
name|suite
operator|.
name|addTest
argument_list|(
name|fill
argument_list|(
operator|new
name|DecimalValue
argument_list|(
name|VALUE
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|suite
operator|.
name|addTest
argument_list|(
name|fill
argument_list|(
operator|new
name|DoubleValue
argument_list|(
name|VALUE
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|suite
operator|.
name|addTest
argument_list|(
name|fill
argument_list|(
operator|new
name|FloatValue
argument_list|(
operator|(
name|float
operator|)
name|VALUE
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
return|return
name|suite
return|;
block|}
specifier|private
specifier|static
name|Test
name|fill
parameter_list|(
name|ComputableValue
name|operand
parameter_list|)
block|{
name|TestSuite
name|suite
init|=
operator|new
name|TestSuite
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|tests
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
name|suite
operator|.
name|addTest
argument_list|(
operator|new
name|NumericOpPromotionTest
argument_list|(
name|tests
index|[
name|i
index|]
argument_list|,
name|operand
argument_list|)
argument_list|)
expr_stmt|;
block|}
return|return
name|suite
return|;
block|}
specifier|private
specifier|final
name|ComputableValue
name|operand
decl_stmt|;
specifier|public
name|NumericOpPromotionTest
parameter_list|(
name|String
name|name
parameter_list|,
name|ComputableValue
name|operand
parameter_list|)
block|{
name|super
argument_list|(
name|name
argument_list|)
expr_stmt|;
name|this
operator|.
name|operand
operator|=
name|operand
expr_stmt|;
block|}
specifier|private
name|void
name|assertDoubleValue
parameter_list|(
name|double
name|target
parameter_list|,
name|ComputableValue
name|result
parameter_list|)
throws|throws
name|XPathException
block|{
name|assertEquals
argument_list|(
name|target
argument_list|,
operator|(
operator|(
name|Double
operator|)
name|result
operator|.
name|toJavaObject
argument_list|(
name|Double
operator|.
name|class
argument_list|)
operator|)
operator|.
name|doubleValue
argument_list|()
argument_list|,
literal|0
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|testIntegerDiv
parameter_list|()
throws|throws
name|XPathException
block|{
name|assertDoubleValue
argument_list|(
name|VALUE
argument_list|,
name|operand
operator|.
name|div
argument_list|(
name|ONE
argument_list|)
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|testIntegerMult
parameter_list|()
throws|throws
name|XPathException
block|{
name|assertDoubleValue
argument_list|(
name|VALUE
argument_list|,
name|operand
operator|.
name|mult
argument_list|(
name|ONE
argument_list|)
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|testIntegerPlus
parameter_list|()
throws|throws
name|XPathException
block|{
name|assertDoubleValue
argument_list|(
name|VALUE
argument_list|,
name|operand
operator|.
name|plus
argument_list|(
name|ZERO
argument_list|)
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|testIntegerMinus
parameter_list|()
throws|throws
name|XPathException
block|{
name|assertDoubleValue
argument_list|(
name|VALUE
argument_list|,
name|operand
operator|.
name|minus
argument_list|(
name|ZERO
argument_list|)
argument_list|)
expr_stmt|;
block|}
specifier|public
name|String
name|toString
parameter_list|()
block|{
comment|// TODO: replace with getSimpleName() in JDK 1.5
name|String
name|operandName
init|=
name|operand
operator|.
name|getClass
argument_list|()
operator|.
name|getName
argument_list|()
decl_stmt|;
name|int
name|k
init|=
name|operandName
operator|.
name|lastIndexOf
argument_list|(
literal|'.'
argument_list|)
decl_stmt|;
if|if
condition|(
name|k
operator|>=
literal|0
condition|)
name|operandName
operator|=
name|operandName
operator|.
name|substring
argument_list|(
name|k
operator|+
literal|1
argument_list|)
expr_stmt|;
return|return
name|getName
argument_list|()
operator|+
literal|" "
operator|+
name|operandName
operator|+
literal|" ("
operator|+
name|getClass
argument_list|()
operator|.
name|getName
argument_list|()
operator|+
literal|")"
return|;
block|}
block|}
end_class

end_unit

