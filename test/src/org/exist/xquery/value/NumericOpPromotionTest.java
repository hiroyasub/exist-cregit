begin_unit|revision:1.0.0;language:Java;cregit-version:0.0.1
begin_package
package|package
name|org
operator|.
name|exist
operator|.
name|xquery
operator|.
name|value
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Arrays
import|;
end_import

begin_import
import|import
name|com
operator|.
name|googlecode
operator|.
name|junittoolbox
operator|.
name|ParallelParameterized
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|xquery
operator|.
name|XPathException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|runner
operator|.
name|RunWith
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|runners
operator|.
name|Parameterized
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|runners
operator|.
name|Parameterized
operator|.
name|Parameter
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|runners
operator|.
name|Parameterized
operator|.
name|Parameters
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertEquals
import|;
end_import

begin_comment
comment|/**  *  * @author<a href="mailto:piotr@ideanest.com">Piotr Kaminski</a>  */
end_comment

begin_class
annotation|@
name|RunWith
argument_list|(
name|ParallelParameterized
operator|.
name|class
argument_list|)
specifier|public
class|class
name|NumericOpPromotionTest
block|{
annotation|@
name|Parameters
argument_list|(
name|name
operator|=
literal|"{0}"
argument_list|)
specifier|public
specifier|static
name|java
operator|.
name|util
operator|.
name|Collection
argument_list|<
name|Object
index|[]
argument_list|>
name|data
parameter_list|()
block|{
return|return
name|Arrays
operator|.
name|asList
argument_list|(
operator|new
name|Object
index|[]
index|[]
block|{
block|{
literal|"decimal"
block|,
operator|new
name|DecimalValue
argument_list|(
name|VALUE
argument_list|)
block|}
block|,
block|{
literal|"double"
block|,
operator|new
name|DoubleValue
argument_list|(
name|VALUE
argument_list|)
block|}
block|,
block|{
literal|"float"
block|,
operator|new
name|FloatValue
argument_list|(
operator|(
name|float
operator|)
name|VALUE
argument_list|)
block|}
block|}
argument_list|)
return|;
block|}
annotation|@
name|Parameter
specifier|public
name|String
name|typeName
decl_stmt|;
annotation|@
name|Parameter
argument_list|(
name|value
operator|=
literal|1
argument_list|)
specifier|public
name|ComputableValue
name|operand
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|double
name|VALUE
init|=
literal|1.5
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|IntegerValue
name|ZERO
init|=
operator|new
name|IntegerValue
argument_list|(
literal|0
argument_list|)
decl_stmt|,
name|ONE
init|=
operator|new
name|IntegerValue
argument_list|(
literal|1
argument_list|)
decl_stmt|;
annotation|@
name|Test
specifier|public
name|void
name|integerDiv
parameter_list|()
throws|throws
name|XPathException
block|{
name|assertDoubleValue
argument_list|(
name|VALUE
argument_list|,
name|operand
operator|.
name|div
argument_list|(
name|ONE
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|integerMult
parameter_list|()
throws|throws
name|XPathException
block|{
name|assertDoubleValue
argument_list|(
name|VALUE
argument_list|,
name|operand
operator|.
name|mult
argument_list|(
name|ONE
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|integerPlus
parameter_list|()
throws|throws
name|XPathException
block|{
name|assertDoubleValue
argument_list|(
name|VALUE
argument_list|,
name|operand
operator|.
name|plus
argument_list|(
name|ZERO
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|integerMinus
parameter_list|()
throws|throws
name|XPathException
block|{
name|assertDoubleValue
argument_list|(
name|VALUE
argument_list|,
name|operand
operator|.
name|minus
argument_list|(
name|ZERO
argument_list|)
argument_list|)
expr_stmt|;
block|}
specifier|private
name|void
name|assertDoubleValue
parameter_list|(
name|double
name|target
parameter_list|,
name|ComputableValue
name|result
parameter_list|)
throws|throws
name|XPathException
block|{
name|assertEquals
argument_list|(
name|target
argument_list|,
operator|(
name|result
operator|.
name|toJavaObject
argument_list|(
name|Double
operator|.
name|class
argument_list|)
operator|)
operator|.
name|doubleValue
argument_list|()
argument_list|,
literal|0
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

