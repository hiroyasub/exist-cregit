begin_unit|revision:1.0.0;language:Java;cregit-version:0.0.1
begin_package
package|package
name|org
operator|.
name|exist
operator|.
name|xquery
operator|.
name|value
package|;
end_package

begin_import
import|import
name|org
operator|.
name|easymock
operator|.
name|classextension
operator|.
name|EasyMock
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|easymock
operator|.
name|classextension
operator|.
name|EasyMock
operator|.
name|replay
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|easymock
operator|.
name|classextension
operator|.
name|EasyMock
operator|.
name|verify
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|easymock
operator|.
name|classextension
operator|.
name|EasyMock
operator|.
name|expect
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|easymock
operator|.
name|classextension
operator|.
name|EasyMock
operator|.
name|isA
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|xquery
operator|.
name|XPathException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertEquals
import|;
end_import

begin_comment
comment|/**  * @author Adam Retter<adam@existsolutions.com>  */
end_comment

begin_class
specifier|public
class|class
name|BinaryValueTest
block|{
annotation|@
name|Test
specifier|public
name|void
name|cast_base64_to_base64
parameter_list|()
throws|throws
name|XPathException
block|{
specifier|final
name|BinaryValueManager
name|binaryValueManager
init|=
operator|new
name|MockBinaryValueManager
argument_list|()
decl_stmt|;
specifier|final
name|BinaryValue
name|mockBase64BinaryValue
init|=
name|EasyMock
operator|.
name|createMockBuilder
argument_list|(
name|BinaryValue
operator|.
name|class
argument_list|)
operator|.
name|withConstructor
argument_list|(
name|BinaryValueManager
operator|.
name|class
argument_list|,
name|BinaryValueType
operator|.
name|class
argument_list|)
operator|.
name|withArgs
argument_list|(
name|binaryValueManager
argument_list|,
operator|new
name|Base64BinaryValueType
argument_list|()
argument_list|)
operator|.
name|createMock
argument_list|()
decl_stmt|;
name|replay
argument_list|(
name|mockBase64BinaryValue
argument_list|)
expr_stmt|;
specifier|final
name|AtomicValue
name|result
init|=
name|mockBase64BinaryValue
operator|.
name|convertTo
argument_list|(
name|Type
operator|.
name|BASE64_BINARY
argument_list|)
decl_stmt|;
name|verify
argument_list|(
name|mockBase64BinaryValue
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|mockBase64BinaryValue
argument_list|,
name|result
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|cast_base64_to_hexBinary
parameter_list|()
throws|throws
name|XPathException
block|{
specifier|final
name|BinaryValueManager
name|binaryValueManager
init|=
operator|new
name|MockBinaryValueManager
argument_list|()
decl_stmt|;
specifier|final
name|BinaryValue
name|mockBase64BinaryValue
init|=
name|EasyMock
operator|.
name|createMockBuilder
argument_list|(
name|BinaryValue
operator|.
name|class
argument_list|)
operator|.
name|withConstructor
argument_list|(
name|BinaryValueManager
operator|.
name|class
argument_list|,
name|BinaryValueType
operator|.
name|class
argument_list|)
operator|.
name|withArgs
argument_list|(
name|binaryValueManager
argument_list|,
operator|new
name|Base64BinaryValueType
argument_list|()
argument_list|)
operator|.
name|addMockedMethod
argument_list|(
literal|"convertTo"
argument_list|,
name|BinaryValueType
operator|.
name|class
argument_list|)
operator|.
name|createMock
argument_list|()
decl_stmt|;
specifier|final
name|BinaryValue
name|mockHexBinaryValue
init|=
name|EasyMock
operator|.
name|createMockBuilder
argument_list|(
name|BinaryValue
operator|.
name|class
argument_list|)
operator|.
name|withConstructor
argument_list|(
name|BinaryValueManager
operator|.
name|class
argument_list|,
name|BinaryValueType
operator|.
name|class
argument_list|)
operator|.
name|withArgs
argument_list|(
name|binaryValueManager
argument_list|,
operator|new
name|HexBinaryValueType
argument_list|()
argument_list|)
operator|.
name|createMock
argument_list|()
decl_stmt|;
name|expect
argument_list|(
name|mockBase64BinaryValue
operator|.
name|convertTo
argument_list|(
name|isA
argument_list|(
name|HexBinaryValueType
operator|.
name|class
argument_list|)
argument_list|)
argument_list|)
operator|.
name|andReturn
argument_list|(
name|mockHexBinaryValue
argument_list|)
expr_stmt|;
name|replay
argument_list|(
name|mockBase64BinaryValue
argument_list|,
name|mockHexBinaryValue
argument_list|)
expr_stmt|;
specifier|final
name|AtomicValue
name|result
init|=
name|mockBase64BinaryValue
operator|.
name|convertTo
argument_list|(
name|Type
operator|.
name|HEX_BINARY
argument_list|)
decl_stmt|;
name|verify
argument_list|(
name|mockBase64BinaryValue
argument_list|,
name|mockHexBinaryValue
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|mockHexBinaryValue
argument_list|,
name|result
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|cast_hexBinary_to_hexBase64
parameter_list|()
throws|throws
name|XPathException
block|{
specifier|final
name|BinaryValueManager
name|binaryValueManager
init|=
operator|new
name|MockBinaryValueManager
argument_list|()
decl_stmt|;
specifier|final
name|BinaryValue
name|mockHexBinaryValue
init|=
name|EasyMock
operator|.
name|createMockBuilder
argument_list|(
name|BinaryValue
operator|.
name|class
argument_list|)
operator|.
name|withConstructor
argument_list|(
name|BinaryValueManager
operator|.
name|class
argument_list|,
name|BinaryValueType
operator|.
name|class
argument_list|)
operator|.
name|withArgs
argument_list|(
name|binaryValueManager
argument_list|,
operator|new
name|HexBinaryValueType
argument_list|()
argument_list|)
operator|.
name|addMockedMethod
argument_list|(
literal|"convertTo"
argument_list|,
name|BinaryValueType
operator|.
name|class
argument_list|)
operator|.
name|createMock
argument_list|()
decl_stmt|;
specifier|final
name|BinaryValue
name|mockBase64BinaryValue
init|=
name|EasyMock
operator|.
name|createMockBuilder
argument_list|(
name|BinaryValue
operator|.
name|class
argument_list|)
operator|.
name|withConstructor
argument_list|(
name|BinaryValueManager
operator|.
name|class
argument_list|,
name|BinaryValueType
operator|.
name|class
argument_list|)
operator|.
name|withArgs
argument_list|(
name|binaryValueManager
argument_list|,
operator|new
name|Base64BinaryValueType
argument_list|()
argument_list|)
operator|.
name|createMock
argument_list|()
decl_stmt|;
name|expect
argument_list|(
name|mockHexBinaryValue
operator|.
name|convertTo
argument_list|(
name|isA
argument_list|(
name|Base64BinaryValueType
operator|.
name|class
argument_list|)
argument_list|)
argument_list|)
operator|.
name|andReturn
argument_list|(
name|mockBase64BinaryValue
argument_list|)
expr_stmt|;
name|replay
argument_list|(
name|mockHexBinaryValue
argument_list|,
name|mockBase64BinaryValue
argument_list|)
expr_stmt|;
specifier|final
name|AtomicValue
name|result
init|=
name|mockHexBinaryValue
operator|.
name|convertTo
argument_list|(
name|Type
operator|.
name|BASE64_BINARY
argument_list|)
decl_stmt|;
name|verify
argument_list|(
name|mockHexBinaryValue
argument_list|,
name|mockBase64BinaryValue
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|mockBase64BinaryValue
argument_list|,
name|result
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

