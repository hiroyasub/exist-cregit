begin_unit|revision:1.0.0;language:Java;cregit-version:0.0.1
begin_package
package|package
name|org
operator|.
name|exist
operator|.
name|xquery
operator|.
name|value
package|;
end_package

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|xquery
operator|.
name|XPathException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertEquals
import|;
end_import

begin_comment
comment|/**  *  * @author Adam Retter<adam@existsolutions.com>  */
end_comment

begin_class
specifier|public
class|class
name|HexBinaryValueTypeTest
block|{
annotation|@
name|Test
argument_list|(
name|expected
operator|=
name|XPathException
operator|.
name|class
argument_list|)
specifier|public
name|void
name|verify_notMultipleOf2Chars_fails
parameter_list|()
throws|throws
name|XPathException
block|{
name|TestableHexBinaryValueType
name|hexType
init|=
operator|new
name|TestableHexBinaryValueType
argument_list|()
decl_stmt|;
name|hexType
operator|.
name|verifyString
argument_list|(
literal|"010010101"
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|verify_multipleOfChars_passes
parameter_list|()
throws|throws
name|XPathException
block|{
name|TestableHexBinaryValueType
name|hexType
init|=
operator|new
name|TestableHexBinaryValueType
argument_list|()
decl_stmt|;
name|hexType
operator|.
name|verifyString
argument_list|(
literal|"01001010"
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
argument_list|(
name|expected
operator|=
name|XPathException
operator|.
name|class
argument_list|)
specifier|public
name|void
name|verify_notValidChars_fails
parameter_list|()
throws|throws
name|XPathException
block|{
name|TestableHexBinaryValueType
name|hexType
init|=
operator|new
name|TestableHexBinaryValueType
argument_list|()
decl_stmt|;
name|hexType
operator|.
name|verifyString
argument_list|(
literal|"true"
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|verify_validChars_passes
parameter_list|()
throws|throws
name|XPathException
block|{
name|TestableHexBinaryValueType
name|hexType
init|=
operator|new
name|TestableHexBinaryValueType
argument_list|()
decl_stmt|;
name|hexType
operator|.
name|verifyString
argument_list|(
literal|"0fb7"
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|format_upperCases
parameter_list|()
throws|throws
name|XPathException
block|{
specifier|final
name|String
name|hexString
init|=
literal|"0fb7"
decl_stmt|;
name|TestableHexBinaryValueType
name|hexType
init|=
operator|new
name|TestableHexBinaryValueType
argument_list|()
decl_stmt|;
specifier|final
name|String
name|result
init|=
name|hexType
operator|.
name|formatString
argument_list|(
name|hexString
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|hexString
operator|.
name|toUpperCase
argument_list|()
argument_list|,
name|result
argument_list|)
expr_stmt|;
block|}
specifier|public
class|class
name|TestableHexBinaryValueType
extends|extends
name|HexBinaryValueType
block|{
annotation|@
name|Override
specifier|public
name|void
name|verifyString
parameter_list|(
name|String
name|str
parameter_list|)
throws|throws
name|XPathException
block|{
name|super
operator|.
name|verifyString
argument_list|(
name|str
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|protected
name|String
name|formatString
parameter_list|(
name|String
name|str
parameter_list|)
block|{
return|return
name|super
operator|.
name|formatString
argument_list|(
name|str
argument_list|)
return|;
block|}
block|}
block|}
end_class

end_unit

