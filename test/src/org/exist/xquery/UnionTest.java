begin_unit|revision:1.0.0;language:Java;cregit-version:0.0.1
begin_package
package|package
name|org
operator|.
name|exist
operator|.
name|xquery
package|;
end_package

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|TestUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|xmldb
operator|.
name|DatabaseInstanceManager
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|xmldb
operator|.
name|XmldbURI
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|AfterClass
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertEquals
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertNotNull
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Before
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|BeforeClass
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_import
import|import
name|org
operator|.
name|xmldb
operator|.
name|api
operator|.
name|DatabaseManager
import|;
end_import

begin_import
import|import
name|org
operator|.
name|xmldb
operator|.
name|api
operator|.
name|base
operator|.
name|Collection
import|;
end_import

begin_import
import|import
name|org
operator|.
name|xmldb
operator|.
name|api
operator|.
name|base
operator|.
name|Database
import|;
end_import

begin_import
import|import
name|org
operator|.
name|xmldb
operator|.
name|api
operator|.
name|base
operator|.
name|ResourceSet
import|;
end_import

begin_import
import|import
name|org
operator|.
name|xmldb
operator|.
name|api
operator|.
name|base
operator|.
name|XMLDBException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|xmldb
operator|.
name|api
operator|.
name|modules
operator|.
name|CollectionManagementService
import|;
end_import

begin_import
import|import
name|org
operator|.
name|xmldb
operator|.
name|api
operator|.
name|modules
operator|.
name|XMLResource
import|;
end_import

begin_import
import|import
name|org
operator|.
name|xmldb
operator|.
name|api
operator|.
name|modules
operator|.
name|XQueryService
import|;
end_import

begin_comment
comment|/**  *  * @author Adam Retter<adam.retter@googlemail.com>  */
end_comment

begin_class
specifier|public
class|class
name|UnionTest
block|{
specifier|private
specifier|final
specifier|static
name|String
name|TEST_COLLECTION_NAME
init|=
literal|"test-pubmed"
decl_stmt|;
specifier|private
specifier|final
specifier|static
name|String
name|PUBMED_DOC_NAME
init|=
literal|"pubmed.xml"
decl_stmt|;
specifier|private
specifier|final
specifier|static
name|String
name|PUBMED
init|=
literal|"<PubmedArticleSet>"
operator|+
literal|"<PubmedArticle>"
operator|+
literal|"<MedlineCitation Owner=\"NLM\" Status=\"In-Process\">"
operator|+
literal|"<Article PubModel=\"Print\">"
operator|+
literal|"<AuthorList CompleteYN=\"Y\">"
operator|+
literal|"<Author ValidYN=\"Y\">"
operator|+
literal|"<LastName>Castellano</LastName>"
operator|+
literal|"<ForeName>Christopher R</ForeName>"
operator|+
literal|"<Initials>CR</Initials>"
operator|+
literal|"</Author>"
operator|+
literal|"<Author ValidYN=\"Y\">"
operator|+
literal|"<LastName>Rizzolo</LastName>"
operator|+
literal|"<ForeName>Denise</ForeName>"
operator|+
literal|"<Initials>D</Initials>"
operator|+
literal|"</Author>"
operator|+
literal|"</AuthorList>"
operator|+
literal|"<Language>eng</Language>"
operator|+
literal|"<PublicationTypeList>"
operator|+
literal|"<PublicationType>Journal Article</PublicationType>"
operator|+
literal|"</PublicationTypeList>"
operator|+
literal|"</Article>"
operator|+
literal|"</MedlineCitation>"
operator|+
literal|"</PubmedArticle>"
operator|+
literal|"</PubmedArticleSet>"
decl_stmt|;
specifier|private
specifier|final
specifier|static
name|String
name|INDEX_CONFIG
init|=
literal|"<collection xmlns=\"http://exist-db.org/collection-config/1.0\">"
operator|+
literal|"<index>"
operator|+
literal|"<create qname=\"ForeName\" type=\"xs:string\"/>"
operator|+
literal|"<create qname=\"LastName\" type=\"xs:string\"/>"
operator|+
literal|"</index>"
operator|+
literal|"</collection>"
decl_stmt|;
specifier|private
specifier|final
specifier|static
name|String
name|XQUERY
init|=
literal|"/PubmedArticleSet/PubmedArticle[MedlineCitation/Article/AuthorList/Author/(ForeName|LastName) = \"Castellano\"]"
decl_stmt|;
specifier|private
specifier|static
name|Collection
name|testCollection
decl_stmt|;
annotation|@
name|Test
specifier|public
name|void
name|unionInPredicate_withoutIndex
parameter_list|()
throws|throws
name|XMLDBException
block|{
specifier|final
name|XQueryService
name|service
init|=
name|storeXMLStringAndGetQueryService
argument_list|(
name|PUBMED_DOC_NAME
argument_list|,
name|PUBMED
argument_list|)
decl_stmt|;
specifier|final
name|ResourceSet
name|result
init|=
name|service
operator|.
name|queryResource
argument_list|(
name|PUBMED_DOC_NAME
argument_list|,
name|XQUERY
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|result
operator|.
name|getSize
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|unionInPredicate_withIndex
parameter_list|()
throws|throws
name|XMLDBException
block|{
name|storeCollectionConfig
argument_list|()
expr_stmt|;
specifier|final
name|XQueryService
name|service
init|=
name|storeXMLStringAndGetQueryService
argument_list|(
name|PUBMED_DOC_NAME
argument_list|,
name|PUBMED
argument_list|)
decl_stmt|;
specifier|final
name|ResourceSet
name|result
init|=
name|service
operator|.
name|queryResource
argument_list|(
name|PUBMED_DOC_NAME
argument_list|,
name|XQUERY
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|result
operator|.
name|getSize
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|unionPersistentAndConstructedNodes
parameter_list|()
throws|throws
name|XMLDBException
block|{
specifier|final
name|XQueryService
name|service
init|=
name|storeXMLStringAndGetQueryService
argument_list|(
name|PUBMED_DOC_NAME
argument_list|,
name|PUBMED
argument_list|)
decl_stmt|;
specifier|final
name|String
name|xquery
init|=
literal|"doc('"
operator|+
name|testCollection
operator|.
name|getName
argument_list|()
operator|+
literal|"/"
operator|+
name|PUBMED_DOC_NAME
operator|+
literal|"')//Language |<a/> |<b/>"
decl_stmt|;
specifier|final
name|ResourceSet
name|results
init|=
name|service
operator|.
name|query
argument_list|(
name|xquery
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|3
argument_list|,
name|results
operator|.
name|getSize
argument_list|()
argument_list|)
expr_stmt|;
block|}
specifier|private
name|void
name|storeCollectionConfig
parameter_list|()
throws|throws
name|XMLDBException
block|{
specifier|final
name|Collection
name|colConfig
init|=
name|getOrCreateCollection
argument_list|(
literal|"/db/system/config/db/"
operator|+
name|TEST_COLLECTION_NAME
argument_list|)
decl_stmt|;
specifier|final
name|XMLResource
name|docConfig
init|=
operator|(
name|XMLResource
operator|)
name|colConfig
operator|.
name|createResource
argument_list|(
literal|"collection.xconf"
argument_list|,
literal|"XMLResource"
argument_list|)
decl_stmt|;
name|docConfig
operator|.
name|setContent
argument_list|(
name|INDEX_CONFIG
argument_list|)
expr_stmt|;
name|colConfig
operator|.
name|storeResource
argument_list|(
name|docConfig
argument_list|)
expr_stmt|;
block|}
specifier|private
name|Collection
name|getOrCreateCollection
parameter_list|(
specifier|final
name|String
name|collectionPath
parameter_list|)
throws|throws
name|XMLDBException
block|{
return|return
name|getOrCreateCollection
argument_list|(
name|testCollection
operator|.
name|getParentCollection
argument_list|()
argument_list|,
name|collectionPath
operator|.
name|replaceFirst
argument_list|(
literal|"/db/"
argument_list|,
literal|""
argument_list|)
argument_list|)
return|;
block|}
specifier|private
name|Collection
name|getOrCreateCollection
parameter_list|(
specifier|final
name|Collection
name|currentCollection
parameter_list|,
specifier|final
name|String
name|collectionPath
parameter_list|)
throws|throws
name|XMLDBException
block|{
specifier|final
name|int
name|offset
init|=
name|collectionPath
operator|.
name|indexOf
argument_list|(
literal|"/"
argument_list|)
operator|>
operator|-
literal|1
condition|?
name|collectionPath
operator|.
name|indexOf
argument_list|(
literal|"/"
argument_list|)
else|:
name|collectionPath
operator|.
name|length
argument_list|()
decl_stmt|;
specifier|final
name|String
name|colName
init|=
name|collectionPath
operator|.
name|substring
argument_list|(
literal|0
argument_list|,
name|offset
argument_list|)
decl_stmt|;
if|if
condition|(
name|colName
operator|.
name|length
argument_list|()
operator|==
literal|0
condition|)
block|{
return|return
name|currentCollection
return|;
block|}
name|Collection
name|child
init|=
name|currentCollection
operator|.
name|getChildCollection
argument_list|(
name|colName
argument_list|)
decl_stmt|;
if|if
condition|(
name|child
operator|==
literal|null
condition|)
block|{
specifier|final
name|CollectionManagementService
name|service
init|=
operator|(
name|CollectionManagementService
operator|)
name|currentCollection
operator|.
name|getService
argument_list|(
literal|"CollectionManagementService"
argument_list|,
literal|"1.0"
argument_list|)
decl_stmt|;
name|child
operator|=
name|service
operator|.
name|createCollection
argument_list|(
name|colName
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|collectionPath
operator|.
name|indexOf
argument_list|(
literal|"/"
argument_list|)
operator|==
operator|-
literal|1
condition|)
block|{
return|return
name|child
return|;
block|}
else|else
block|{
specifier|final
name|String
name|subPath
init|=
name|collectionPath
operator|.
name|substring
argument_list|(
name|collectionPath
operator|.
name|indexOf
argument_list|(
literal|"/"
argument_list|)
operator|+
literal|1
argument_list|)
decl_stmt|;
return|return
name|getOrCreateCollection
argument_list|(
name|child
argument_list|,
name|subPath
argument_list|)
return|;
block|}
block|}
specifier|private
name|XQueryService
name|storeXMLStringAndGetQueryService
parameter_list|(
name|String
name|documentName
parameter_list|,
name|String
name|content
parameter_list|)
throws|throws
name|XMLDBException
block|{
specifier|final
name|XMLResource
name|doc
init|=
operator|(
name|XMLResource
operator|)
name|testCollection
operator|.
name|createResource
argument_list|(
name|documentName
argument_list|,
literal|"XMLResource"
argument_list|)
decl_stmt|;
name|doc
operator|.
name|setContent
argument_list|(
name|content
argument_list|)
expr_stmt|;
name|testCollection
operator|.
name|storeResource
argument_list|(
name|doc
argument_list|)
expr_stmt|;
specifier|final
name|XQueryService
name|service
init|=
operator|(
name|XQueryService
operator|)
name|testCollection
operator|.
name|getService
argument_list|(
literal|"XPathQueryService"
argument_list|,
literal|"1.0"
argument_list|)
decl_stmt|;
return|return
name|service
return|;
block|}
annotation|@
name|Before
specifier|public
name|void
name|clearCollectionConfig
parameter_list|()
throws|throws
name|XMLDBException
block|{
specifier|final
name|Collection
name|colDb
init|=
name|testCollection
operator|.
name|getParentCollection
argument_list|()
decl_stmt|;
specifier|final
name|Collection
name|colSystem
init|=
name|colDb
operator|.
name|getChildCollection
argument_list|(
literal|"system"
argument_list|)
decl_stmt|;
if|if
condition|(
name|colSystem
operator|==
literal|null
condition|)
block|{
return|return;
block|}
specifier|final
name|Collection
name|colConfig
init|=
name|colSystem
operator|.
name|getChildCollection
argument_list|(
literal|"config"
argument_list|)
decl_stmt|;
if|if
condition|(
name|colConfig
operator|==
literal|null
condition|)
block|{
return|return;
block|}
specifier|final
name|Collection
name|colConfigDb
init|=
name|colConfig
operator|.
name|getChildCollection
argument_list|(
literal|"db"
argument_list|)
decl_stmt|;
if|if
condition|(
name|colConfigDb
operator|==
literal|null
condition|)
block|{
return|return;
block|}
name|boolean
name|foundPubmedConfig
init|=
literal|false
decl_stmt|;
specifier|final
name|String
name|configCols
index|[]
init|=
name|colConfigDb
operator|.
name|listChildCollections
argument_list|()
decl_stmt|;
for|for
control|(
specifier|final
name|String
name|configCol
range|:
name|configCols
control|)
block|{
if|if
condition|(
name|configCol
operator|.
name|equals
argument_list|(
name|TEST_COLLECTION_NAME
argument_list|)
condition|)
block|{
name|foundPubmedConfig
operator|=
literal|true
expr_stmt|;
break|break;
block|}
block|}
if|if
condition|(
name|foundPubmedConfig
condition|)
block|{
specifier|final
name|CollectionManagementService
name|service
init|=
operator|(
name|CollectionManagementService
operator|)
name|colConfigDb
operator|.
name|getService
argument_list|(
literal|"CollectionManagementService"
argument_list|,
literal|"1.0"
argument_list|)
decl_stmt|;
name|service
operator|.
name|removeCollection
argument_list|(
name|TEST_COLLECTION_NAME
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|BeforeClass
specifier|public
specifier|static
name|void
name|startDbAndCreateTestCollection
parameter_list|()
throws|throws
name|Exception
block|{
comment|// initialize driver
specifier|final
name|Class
argument_list|<
name|?
argument_list|>
name|cl
init|=
name|Class
operator|.
name|forName
argument_list|(
literal|"org.exist.xmldb.DatabaseImpl"
argument_list|)
decl_stmt|;
specifier|final
name|Database
name|database
init|=
operator|(
name|Database
operator|)
name|cl
operator|.
name|newInstance
argument_list|()
decl_stmt|;
name|database
operator|.
name|setProperty
argument_list|(
literal|"create-database"
argument_list|,
literal|"true"
argument_list|)
expr_stmt|;
name|DatabaseManager
operator|.
name|registerDatabase
argument_list|(
name|database
argument_list|)
expr_stmt|;
specifier|final
name|Collection
name|root
init|=
name|DatabaseManager
operator|.
name|getCollection
argument_list|(
name|XmldbURI
operator|.
name|LOCAL_DB
argument_list|,
literal|"admin"
argument_list|,
literal|""
argument_list|)
decl_stmt|;
specifier|final
name|CollectionManagementService
name|service
init|=
operator|(
name|CollectionManagementService
operator|)
name|root
operator|.
name|getService
argument_list|(
literal|"CollectionManagementService"
argument_list|,
literal|"1.0"
argument_list|)
decl_stmt|;
name|testCollection
operator|=
name|service
operator|.
name|createCollection
argument_list|(
name|TEST_COLLECTION_NAME
argument_list|)
expr_stmt|;
name|assertNotNull
argument_list|(
name|testCollection
argument_list|)
expr_stmt|;
block|}
annotation|@
name|AfterClass
specifier|public
specifier|static
name|void
name|tearDown
parameter_list|()
throws|throws
name|Exception
block|{
name|TestUtils
operator|.
name|cleanupDB
argument_list|()
expr_stmt|;
specifier|final
name|DatabaseInstanceManager
name|dim
init|=
operator|(
name|DatabaseInstanceManager
operator|)
name|testCollection
operator|.
name|getService
argument_list|(
literal|"DatabaseInstanceManager"
argument_list|,
literal|"1.0"
argument_list|)
decl_stmt|;
name|dim
operator|.
name|shutdown
argument_list|()
expr_stmt|;
name|testCollection
operator|=
literal|null
expr_stmt|;
block|}
block|}
end_class

end_unit

