begin_unit|revision:1.0.0;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  *  eXist Open Source Native XML Database  *  Copyright (C) 2001-04 The eXist Project  *  http://exist-db.org  *    *  This program is free software; you can redistribute it and/or  *  modify it under the terms of the GNU Lesser General Public License  *  as published by the Free Software Foundation; either version 2  *  of the License, or (at your option) any later version.  *    *  This program is distributed in the hope that it will be useful,  *  but WITHOUT ANY WARRANTY; without even the implied warranty of  *  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the  *  GNU Lesser General Public License for more details.  *    *  You should have received a copy of the GNU Lesser General Public License  *  along with this program; if not, write to the Free Software  *  Foundation, Inc., 675 Mass Ave, Cambridge, MA 02139, USA.  *    *  $Id$  */
end_comment

begin_package
package|package
name|org
operator|.
name|exist
operator|.
name|xquery
package|;
end_package

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|URISyntaxException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|URL
import|;
end_import

begin_import
import|import
name|java
operator|.
name|nio
operator|.
name|file
operator|.
name|Path
import|;
end_import

begin_import
import|import
name|java
operator|.
name|nio
operator|.
name|file
operator|.
name|Paths
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|test
operator|.
name|ExistXmldbEmbeddedServer
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|xmldb
operator|.
name|IndexQueryService
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|After
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Before
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|ClassRule
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_import
import|import
name|org
operator|.
name|xmldb
operator|.
name|api
operator|.
name|base
operator|.
name|Collection
import|;
end_import

begin_import
import|import
name|org
operator|.
name|xmldb
operator|.
name|api
operator|.
name|base
operator|.
name|Resource
import|;
end_import

begin_import
import|import
name|org
operator|.
name|xmldb
operator|.
name|api
operator|.
name|base
operator|.
name|ResourceIterator
import|;
end_import

begin_import
import|import
name|org
operator|.
name|xmldb
operator|.
name|api
operator|.
name|base
operator|.
name|ResourceSet
import|;
end_import

begin_import
import|import
name|org
operator|.
name|xmldb
operator|.
name|api
operator|.
name|base
operator|.
name|XMLDBException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|xmldb
operator|.
name|api
operator|.
name|modules
operator|.
name|CollectionManagementService
import|;
end_import

begin_import
import|import
name|org
operator|.
name|xmldb
operator|.
name|api
operator|.
name|modules
operator|.
name|XMLResource
import|;
end_import

begin_import
import|import
name|org
operator|.
name|xmldb
operator|.
name|api
operator|.
name|modules
operator|.
name|XPathQueryService
import|;
end_import

begin_import
import|import
name|org
operator|.
name|xmldb
operator|.
name|api
operator|.
name|modules
operator|.
name|XUpdateQueryService
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertEquals
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertNotNull
import|;
end_import

begin_comment
comment|/**  * @author wolf  */
end_comment

begin_class
specifier|public
class|class
name|ValueIndexTest
block|{
annotation|@
name|ClassRule
specifier|public
specifier|static
specifier|final
name|ExistXmldbEmbeddedServer
name|existEmbeddedServer
init|=
operator|new
name|ExistXmldbEmbeddedServer
argument_list|(
literal|false
argument_list|,
literal|true
argument_list|)
decl_stmt|;
specifier|protected
specifier|static
specifier|final
name|String
name|ITEMS_FILENAME
init|=
literal|"items.xml"
decl_stmt|;
specifier|protected
name|URL
name|ITEMS_FILE
init|=
name|getClass
argument_list|()
operator|.
name|getResource
argument_list|(
name|ITEMS_FILENAME
argument_list|)
decl_stmt|;
specifier|private
name|String
name|CONFIG
init|=
literal|"<collection xmlns=\"http://exist-db.org/collection-config/1.0\">"
operator|+
literal|"<index xmlns:x=\"http://www.foo.com\" xmlns:xx=\"http://test.com\">"
operator|+
literal|"<create path=\"//item/itemno\" type=\"xs:integer\"/>"
operator|+
literal|"<create path=\"//item/@id\" type=\"xs:string\"/>"
operator|+
literal|"<create path=\"//item/name\" type=\"xs:string\"/>"
operator|+
literal|"<create path=\"//item/stock\" type=\"xs:integer\"/>"
operator|+
literal|"<create path=\"//item/price\" type=\"xs:double\"/>"
operator|+
literal|"<create path=\"//item/price/@specialprice\" type=\"xs:boolean\"/>"
operator|+
literal|"<create path=\"//item/x:rating\" type=\"xs:double\"/>"
operator|+
literal|"<create path=\"//item/@xx:test\" type=\"xs:integer\"/>"
operator|+
literal|"<create path=\"//item/mixed\" type=\"xs:string\"/>"
operator|+
literal|"<create path=\"//city/name\" type=\"xs:string\"/>"
operator|+
literal|"</index>"
operator|+
literal|"</collection>"
decl_stmt|;
specifier|private
name|String
name|CONFIG_QNAME
init|=
literal|"<collection xmlns=\"http://exist-db.org/collection-config/1.0\">"
operator|+
literal|"<index xmlns:x=\"http://www.foo.com\" xmlns:xx=\"http://test.com\">"
operator|+
literal|"<create qname=\"itemno\" type=\"xs:integer\"/>"
operator|+
literal|"<create qname=\"mixed\" type=\"xs:string\"/>"
operator|+
literal|"<create qname=\"stock\" type=\"xs:integer\"/>"
operator|+
literal|"<create qname=\"name\" type=\"xs:string\"/>"
operator|+
literal|"<create qname=\"@id\" type=\"xs:string\"/>"
operator|+
literal|"<create qname=\"price\" type=\"xs:double\"/>"
operator|+
literal|"<create path=\"x:rating\" type=\"xs:double\"/>"
operator|+
literal|"</index>"
operator|+
literal|"</collection>"
decl_stmt|;
specifier|private
name|String
name|CITY
init|=
literal|"<mondial>"
operator|+
literal|"<city id=\"cty-Germany-Berlin\" is_country_cap=\"yes\" is_state_cap=\"yes\" "
operator|+
literal|"       country=\"D\" province=\"prov-cid-cia-Germany-4\">"
operator|+
literal|"<name>Berlin</name>"
operator|+
literal|"<longitude>13.3</longitude>"
operator|+
literal|"<latitude>52.45</latitude>"
operator|+
literal|"<population year=\"95\">3472009</population>"
operator|+
literal|"</city>"
operator|+
literal|"<city id=\"cty-cid-cia-Germany-85\" country=\"D\" province=\"prov-cid-cia-Germany-3\">"
operator|+
literal|"<name>Erlangen</name>"
operator|+
literal|"<population year=\"95\">101450</population>"
operator|+
literal|"</city>"
operator|+
literal|"</mondial>"
decl_stmt|;
specifier|private
name|Collection
name|testCollection
decl_stmt|;
annotation|@
name|Before
specifier|public
name|void
name|setUp
parameter_list|()
throws|throws
name|ClassNotFoundException
throws|,
name|IllegalAccessException
throws|,
name|InstantiationException
throws|,
name|XMLDBException
block|{
specifier|final
name|CollectionManagementService
name|service
init|=
operator|(
name|CollectionManagementService
operator|)
name|existEmbeddedServer
operator|.
name|getRoot
argument_list|()
operator|.
name|getService
argument_list|(
literal|"CollectionManagementService"
argument_list|,
literal|"1.0"
argument_list|)
decl_stmt|;
name|testCollection
operator|=
name|service
operator|.
name|createCollection
argument_list|(
literal|"test"
argument_list|)
expr_stmt|;
name|assertNotNull
argument_list|(
name|testCollection
argument_list|)
expr_stmt|;
block|}
annotation|@
name|After
specifier|public
name|void
name|tearDown
parameter_list|()
throws|throws
name|Exception
block|{
specifier|final
name|CollectionManagementService
name|service
init|=
operator|(
name|CollectionManagementService
operator|)
name|existEmbeddedServer
operator|.
name|getRoot
argument_list|()
operator|.
name|getService
argument_list|(
literal|"CollectionManagementService"
argument_list|,
literal|"1.0"
argument_list|)
decl_stmt|;
name|service
operator|.
name|removeCollection
argument_list|(
literal|"test"
argument_list|)
expr_stmt|;
name|testCollection
operator|=
literal|null
expr_stmt|;
block|}
comment|/** 	 * @throws XMLDBException 	 */
specifier|protected
name|void
name|configureCollection
parameter_list|(
name|String
name|config
parameter_list|)
throws|throws
name|XMLDBException
block|{
name|IndexQueryService
name|idxConf
init|=
operator|(
name|IndexQueryService
operator|)
name|testCollection
operator|.
name|getService
argument_list|(
literal|"IndexQueryService"
argument_list|,
literal|"1.0"
argument_list|)
decl_stmt|;
name|idxConf
operator|.
name|configureCollection
argument_list|(
name|config
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|strings
parameter_list|()
throws|throws
name|XMLDBException
throws|,
name|URISyntaxException
block|{
name|configureCollection
argument_list|(
name|CONFIG
argument_list|)
expr_stmt|;
name|XPathQueryService
name|service
init|=
name|storeXMLFileAndGetQueryService
argument_list|(
name|ITEMS_FILENAME
argument_list|,
name|ITEMS_FILE
argument_list|)
decl_stmt|;
name|queryResource
argument_list|(
name|service
argument_list|,
name|ITEMS_FILENAME
argument_list|,
literal|"//item[@id = 'i2']"
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|queryResource
argument_list|(
name|service
argument_list|,
name|ITEMS_FILENAME
argument_list|,
literal|"//item[name = 'Racing Bicycle']"
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|queryResource
argument_list|(
name|service
argument_list|,
name|ITEMS_FILENAME
argument_list|,
literal|"//item[name> 'Racing Bicycle']"
argument_list|,
literal|4
argument_list|)
expr_stmt|;
name|queryResource
argument_list|(
name|service
argument_list|,
name|ITEMS_FILENAME
argument_list|,
literal|"//item[itemno = 3]"
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|queryResource
argument_list|(
name|service
argument_list|,
name|ITEMS_FILENAME
argument_list|,
literal|"//item[itemno eq 3]"
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|ResourceSet
name|result
init|=
name|queryResource
argument_list|(
name|service
argument_list|,
name|ITEMS_FILENAME
argument_list|,
literal|"for $i in //item[stock<= 10] return $i/itemno"
argument_list|,
literal|5
argument_list|)
decl_stmt|;
for|for
control|(
name|long
name|i
init|=
literal|0
init|;
name|i
operator|<
name|result
operator|.
name|getSize
argument_list|()
condition|;
name|i
operator|++
control|)
block|{
name|Resource
name|res
init|=
name|result
operator|.
name|getResource
argument_list|(
name|i
argument_list|)
decl_stmt|;
block|}
name|queryResource
argument_list|(
name|service
argument_list|,
name|ITEMS_FILENAME
argument_list|,
literal|"//item[stock> 20]"
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|queryResource
argument_list|(
name|service
argument_list|,
name|ITEMS_FILENAME
argument_list|,
literal|"declare namespace x=\"http://www.foo.com\"; //item[x:rating> 8.0]"
argument_list|,
literal|2
argument_list|)
expr_stmt|;
name|queryResource
argument_list|(
name|service
argument_list|,
name|ITEMS_FILENAME
argument_list|,
literal|"declare namespace xx=\"http://test.com\"; //item[@xx:test = 123]"
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|queryResource
argument_list|(
name|service
argument_list|,
name|ITEMS_FILENAME
argument_list|,
literal|"declare namespace xx=\"http://test.com\"; //item[@xx:test eq 123]"
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|queryResource
argument_list|(
name|service
argument_list|,
name|ITEMS_FILENAME
argument_list|,
literal|"//item[mixed = 'uneven']"
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|queryResource
argument_list|(
name|service
argument_list|,
name|ITEMS_FILENAME
argument_list|,
literal|"//item[mixed eq 'uneven']"
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|queryResource
argument_list|(
name|service
argument_list|,
name|ITEMS_FILENAME
argument_list|,
literal|"//item[mixed = 'external']"
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|queryResource
argument_list|(
name|service
argument_list|,
name|ITEMS_FILENAME
argument_list|,
literal|"//item[fn:matches(mixed, 'un.*')]"
argument_list|,
literal|2
argument_list|)
expr_stmt|;
name|queryResource
argument_list|(
name|service
argument_list|,
name|ITEMS_FILENAME
argument_list|,
literal|"//item[price/@specialprice = false()]"
argument_list|,
literal|2
argument_list|)
expr_stmt|;
name|queryResource
argument_list|(
name|service
argument_list|,
name|ITEMS_FILENAME
argument_list|,
literal|"//item[price/@specialprice = true()]"
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|queryResource
argument_list|(
name|service
argument_list|,
name|ITEMS_FILENAME
argument_list|,
literal|"//item[price/@specialprice eq true()]"
argument_list|,
literal|1
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|strFunctions
parameter_list|()
throws|throws
name|XMLDBException
block|{
name|configureCollection
argument_list|(
name|CONFIG
argument_list|)
expr_stmt|;
name|XMLResource
name|resource
init|=
operator|(
name|XMLResource
operator|)
name|testCollection
operator|.
name|createResource
argument_list|(
literal|"mondial-test.xml"
argument_list|,
literal|"XMLResource"
argument_list|)
decl_stmt|;
name|resource
operator|.
name|setContent
argument_list|(
name|CITY
argument_list|)
expr_stmt|;
name|testCollection
operator|.
name|storeResource
argument_list|(
name|resource
argument_list|)
expr_stmt|;
name|XPathQueryService
name|service
init|=
operator|(
name|XPathQueryService
operator|)
name|testCollection
operator|.
name|getService
argument_list|(
literal|"XPathQueryService"
argument_list|,
literal|"1.0"
argument_list|)
decl_stmt|;
name|queryResource
argument_list|(
name|service
argument_list|,
literal|"mondial-test.xml"
argument_list|,
literal|"//city[starts-with(name, 'Berl')]"
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|queryResource
argument_list|(
name|service
argument_list|,
literal|"mondial-test.xml"
argument_list|,
literal|"//city[starts-with(name, 'Berlin')]"
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|queryResource
argument_list|(
name|service
argument_list|,
literal|"mondial-test.xml"
argument_list|,
literal|"//city[starts-with(name, 'erlin')]"
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|queryResource
argument_list|(
name|service
argument_list|,
literal|"mondial-test.xml"
argument_list|,
literal|"//city[starts-with(name, 'Erl')]"
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|queryResource
argument_list|(
name|service
argument_list|,
literal|"mondial-test.xml"
argument_list|,
literal|"//city[contains(name, 'erl')]"
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|queryResource
argument_list|(
name|service
argument_list|,
literal|"mondial-test.xml"
argument_list|,
literal|"//city[contains(name, 'Berlin')]"
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|queryResource
argument_list|(
name|service
argument_list|,
literal|"mondial-test.xml"
argument_list|,
literal|"//city[contains(name, 'Erl')]"
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|queryResource
argument_list|(
name|service
argument_list|,
literal|"mondial-test.xml"
argument_list|,
literal|"//city[ends-with(name, 'Berlin')]"
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|queryResource
argument_list|(
name|service
argument_list|,
literal|"mondial-test.xml"
argument_list|,
literal|"//city[ends-with(name, 'erlin')]"
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|queryResource
argument_list|(
name|service
argument_list|,
literal|"mondial-test.xml"
argument_list|,
literal|"//city[ends-with(name, 'Ber')]"
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|queryResource
argument_list|(
name|service
argument_list|,
literal|"mondial-test.xml"
argument_list|,
literal|"//city[matches(name, 'erl', 'i')]"
argument_list|,
literal|2
argument_list|)
expr_stmt|;
name|queryResource
argument_list|(
name|service
argument_list|,
literal|"mondial-test.xml"
argument_list|,
literal|"//city[matches(name, 'Erl')]"
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|queryResource
argument_list|(
name|service
argument_list|,
literal|"mondial-test.xml"
argument_list|,
literal|"//city[matches(name, 'Berlin', 'i')]"
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|queryResource
argument_list|(
name|service
argument_list|,
literal|"mondial-test.xml"
argument_list|,
literal|"//city[matches(name, 'berlin', 'i')]"
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|queryResource
argument_list|(
name|service
argument_list|,
literal|"mondial-test.xml"
argument_list|,
literal|"//city[matches(name, 'berlin')]"
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|queryResource
argument_list|(
name|service
argument_list|,
literal|"mondial-test.xml"
argument_list|,
literal|"//city[matches(name, '^Berlin$')]"
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|queryResource
argument_list|(
name|service
argument_list|,
literal|"mondial-test.xml"
argument_list|,
literal|"//city[matches(name, 'lin$', 'i')]"
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|queryResource
argument_list|(
name|service
argument_list|,
literal|"mondial-test.xml"
argument_list|,
literal|"//city[matches(name, '.*lin$', 'i')]"
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|queryResource
argument_list|(
name|service
argument_list|,
literal|"mondial-test.xml"
argument_list|,
literal|"//city[matches(name, '^lin$', 'i')]"
argument_list|,
literal|0
argument_list|)
expr_stmt|;
block|}
comment|/*      * Bugfix      *      * These following two tests were put in place to demonstrate bugs in how the index matching functions work,      * as a precursor to a fix, which was committed 2/3/2010. The issue was that the 2nd parameter 	 * to the string matching functions was incorrectly interpreted as a regex, which causd an exception 	 * to be thrown if the string included characters that have special meaning in a regex, eg. '*' for contains. 	 * 	 * andrzej@chaeron.com      */
annotation|@
name|Test
specifier|public
name|void
name|pathIndexStringMatchingFunctions
parameter_list|()
throws|throws
name|XMLDBException
block|{
name|configureCollection
argument_list|(
name|CONFIG
argument_list|)
expr_stmt|;
name|XMLResource
name|resource
init|=
operator|(
name|XMLResource
operator|)
name|testCollection
operator|.
name|createResource
argument_list|(
literal|"mondial-test.xml"
argument_list|,
literal|"XMLResource"
argument_list|)
decl_stmt|;
name|resource
operator|.
name|setContent
argument_list|(
name|CITY
argument_list|)
expr_stmt|;
name|testCollection
operator|.
name|storeResource
argument_list|(
name|resource
argument_list|)
expr_stmt|;
name|XPathQueryService
name|service
init|=
operator|(
name|XPathQueryService
operator|)
name|testCollection
operator|.
name|getService
argument_list|(
literal|"XPathQueryService"
argument_list|,
literal|"1.0"
argument_list|)
decl_stmt|;
name|queryResource
argument_list|(
name|service
argument_list|,
literal|"mondial-test.xml"
argument_list|,
literal|"//city[ starts-with( name, '^*' ) ]"
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|queryResource
argument_list|(
name|service
argument_list|,
literal|"mondial-test.xml"
argument_list|,
literal|"//city[ contains( name, '^*' ) ]"
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|queryResource
argument_list|(
name|service
argument_list|,
literal|"mondial-test.xml"
argument_list|,
literal|"//city[ ends-with( name, '^*' ) ]"
argument_list|,
literal|0
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|pathIndexStringMatchingFunctions2
parameter_list|()
throws|throws
name|XMLDBException
block|{
name|configureCollection
argument_list|(
name|CONFIG
argument_list|)
expr_stmt|;
name|XMLResource
name|resource
init|=
operator|(
name|XMLResource
operator|)
name|testCollection
operator|.
name|createResource
argument_list|(
literal|"mondial-test.xml"
argument_list|,
literal|"XMLResource"
argument_list|)
decl_stmt|;
name|resource
operator|.
name|setContent
argument_list|(
name|CITY
argument_list|)
expr_stmt|;
name|testCollection
operator|.
name|storeResource
argument_list|(
name|resource
argument_list|)
expr_stmt|;
name|XPathQueryService
name|service
init|=
operator|(
name|XPathQueryService
operator|)
name|testCollection
operator|.
name|getService
argument_list|(
literal|"XPathQueryService"
argument_list|,
literal|"1.0"
argument_list|)
decl_stmt|;
name|queryResource
argument_list|(
name|service
argument_list|,
literal|"mondial-test.xml"
argument_list|,
literal|"//city[ starts-with( name, '(*' ) ]"
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|queryResource
argument_list|(
name|service
argument_list|,
literal|"mondial-test.xml"
argument_list|,
literal|"//city[ contains( name, '*' ) ]"
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|queryResource
argument_list|(
name|service
argument_list|,
literal|"mondial-test.xml"
argument_list|,
literal|"//city[ ends-with( name, '(*' ) ]"
argument_list|,
literal|0
argument_list|)
expr_stmt|;
block|}
comment|/*      * Bugfix      *      * These following two tests were put in place to test a bug fix for QName matching functions, which was committed 2/19/2010. The issue was that the 2nd parameter 	 * to the string matching functions was incorrectly interpreted as a regex, for QName indexes, which causd an exception 	 * to be thrown if the string included characters that have special meaning in a regex, eg. '*' for contains. 	 * 	 * andrzej@chaeron.com      */
annotation|@
name|Test
specifier|public
name|void
name|qnameIndexStringMatchingFunctions
parameter_list|()
throws|throws
name|XMLDBException
block|{
name|configureCollection
argument_list|(
name|CONFIG_QNAME
argument_list|)
expr_stmt|;
name|XMLResource
name|resource
init|=
operator|(
name|XMLResource
operator|)
name|testCollection
operator|.
name|createResource
argument_list|(
literal|"mondial-test.xml"
argument_list|,
literal|"XMLResource"
argument_list|)
decl_stmt|;
name|resource
operator|.
name|setContent
argument_list|(
name|CITY
argument_list|)
expr_stmt|;
name|testCollection
operator|.
name|storeResource
argument_list|(
name|resource
argument_list|)
expr_stmt|;
name|XPathQueryService
name|service
init|=
operator|(
name|XPathQueryService
operator|)
name|testCollection
operator|.
name|getService
argument_list|(
literal|"XPathQueryService"
argument_list|,
literal|"1.0"
argument_list|)
decl_stmt|;
name|queryResource
argument_list|(
name|service
argument_list|,
literal|"mondial-test.xml"
argument_list|,
literal|"//city[ starts-with( name, '^*' ) ]"
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|queryResource
argument_list|(
name|service
argument_list|,
literal|"mondial-test.xml"
argument_list|,
literal|"//city[ contains( name, '^*' ) ]"
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|queryResource
argument_list|(
name|service
argument_list|,
literal|"mondial-test.xml"
argument_list|,
literal|"//city[ ends-with( name, '^*' ) ]"
argument_list|,
literal|0
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|qnameIndexStringMatchingFunctions2
parameter_list|()
throws|throws
name|XMLDBException
block|{
name|configureCollection
argument_list|(
name|CONFIG_QNAME
argument_list|)
expr_stmt|;
name|XMLResource
name|resource
init|=
operator|(
name|XMLResource
operator|)
name|testCollection
operator|.
name|createResource
argument_list|(
literal|"mondial-test.xml"
argument_list|,
literal|"XMLResource"
argument_list|)
decl_stmt|;
name|resource
operator|.
name|setContent
argument_list|(
name|CITY
argument_list|)
expr_stmt|;
name|testCollection
operator|.
name|storeResource
argument_list|(
name|resource
argument_list|)
expr_stmt|;
name|XPathQueryService
name|service
init|=
operator|(
name|XPathQueryService
operator|)
name|testCollection
operator|.
name|getService
argument_list|(
literal|"XPathQueryService"
argument_list|,
literal|"1.0"
argument_list|)
decl_stmt|;
name|queryResource
argument_list|(
name|service
argument_list|,
literal|"mondial-test.xml"
argument_list|,
literal|"//city[ starts-with( name, '(*' ) ]"
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|queryResource
argument_list|(
name|service
argument_list|,
literal|"mondial-test.xml"
argument_list|,
literal|"//city[ contains( name, '*' ) ]"
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|queryResource
argument_list|(
name|service
argument_list|,
literal|"mondial-test.xml"
argument_list|,
literal|"//city[ ends-with( name, '(*' ) ]"
argument_list|,
literal|0
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|strFunctionsQName
parameter_list|()
throws|throws
name|XMLDBException
block|{
name|configureCollection
argument_list|(
name|CONFIG_QNAME
argument_list|)
expr_stmt|;
name|XMLResource
name|resource
init|=
operator|(
name|XMLResource
operator|)
name|testCollection
operator|.
name|createResource
argument_list|(
literal|"mondial-test.xml"
argument_list|,
literal|"XMLResource"
argument_list|)
decl_stmt|;
name|resource
operator|.
name|setContent
argument_list|(
name|CITY
argument_list|)
expr_stmt|;
name|testCollection
operator|.
name|storeResource
argument_list|(
name|resource
argument_list|)
expr_stmt|;
name|XPathQueryService
name|service
init|=
operator|(
name|XPathQueryService
operator|)
name|testCollection
operator|.
name|getService
argument_list|(
literal|"XPathQueryService"
argument_list|,
literal|"1.0"
argument_list|)
decl_stmt|;
name|queryResource
argument_list|(
name|service
argument_list|,
literal|"mondial-test.xml"
argument_list|,
literal|"//city[starts-with(name, 'Berl')]"
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|queryResource
argument_list|(
name|service
argument_list|,
literal|"mondial-test.xml"
argument_list|,
literal|"//city[starts-with(name, 'Berlin')]"
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|queryResource
argument_list|(
name|service
argument_list|,
literal|"mondial-test.xml"
argument_list|,
literal|"//city[starts-with(name, 'erlin')]"
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|queryResource
argument_list|(
name|service
argument_list|,
literal|"mondial-test.xml"
argument_list|,
literal|"//city[starts-with(name, 'Erl')]"
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|queryResource
argument_list|(
name|service
argument_list|,
literal|"mondial-test.xml"
argument_list|,
literal|"//city[contains(name, 'erl')]"
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|queryResource
argument_list|(
name|service
argument_list|,
literal|"mondial-test.xml"
argument_list|,
literal|"//city[contains(name, 'Berlin')]"
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|queryResource
argument_list|(
name|service
argument_list|,
literal|"mondial-test.xml"
argument_list|,
literal|"//city[contains(name, 'Erl')]"
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|queryResource
argument_list|(
name|service
argument_list|,
literal|"mondial-test.xml"
argument_list|,
literal|"//city[ends-with(name, 'Berlin')]"
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|queryResource
argument_list|(
name|service
argument_list|,
literal|"mondial-test.xml"
argument_list|,
literal|"//city[ends-with(name, 'erlin')]"
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|queryResource
argument_list|(
name|service
argument_list|,
literal|"mondial-test.xml"
argument_list|,
literal|"//city[ends-with(name, 'Ber')]"
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|queryResource
argument_list|(
name|service
argument_list|,
literal|"mondial-test.xml"
argument_list|,
literal|"//city[matches(name, 'erl', 'i')]"
argument_list|,
literal|2
argument_list|)
expr_stmt|;
name|queryResource
argument_list|(
name|service
argument_list|,
literal|"mondial-test.xml"
argument_list|,
literal|"//city[matches(name, 'Erl')]"
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|queryResource
argument_list|(
name|service
argument_list|,
literal|"mondial-test.xml"
argument_list|,
literal|"//city[matches(name, 'Berlin', 'i')]"
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|queryResource
argument_list|(
name|service
argument_list|,
literal|"mondial-test.xml"
argument_list|,
literal|"//city[matches(name, 'berlin', 'i')]"
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|queryResource
argument_list|(
name|service
argument_list|,
literal|"mondial-test.xml"
argument_list|,
literal|"//city[matches(name, 'berlin')]"
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|queryResource
argument_list|(
name|service
argument_list|,
literal|"mondial-test.xml"
argument_list|,
literal|"//city[matches(name, '^Berlin$')]"
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|queryResource
argument_list|(
name|service
argument_list|,
literal|"mondial-test.xml"
argument_list|,
literal|"//city[matches(name, 'lin$', 'i')]"
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|queryResource
argument_list|(
name|service
argument_list|,
literal|"mondial-test.xml"
argument_list|,
literal|"//city[matches(name, '.*lin$', 'i')]"
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|queryResource
argument_list|(
name|service
argument_list|,
literal|"mondial-test.xml"
argument_list|,
literal|"//city[matches(name, '^lin$', 'i')]"
argument_list|,
literal|0
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|qnameIndex
parameter_list|()
throws|throws
name|XMLDBException
throws|,
name|URISyntaxException
block|{
name|configureCollection
argument_list|(
name|CONFIG_QNAME
argument_list|)
expr_stmt|;
name|XPathQueryService
name|service
init|=
name|storeXMLFileAndGetQueryService
argument_list|(
name|ITEMS_FILENAME
argument_list|,
name|ITEMS_FILE
argument_list|)
decl_stmt|;
name|queryResource
argument_list|(
name|service
argument_list|,
name|ITEMS_FILENAME
argument_list|,
literal|"//((#exist:optimize#) { item[stock = 10] })"
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|queryResource
argument_list|(
name|service
argument_list|,
name|ITEMS_FILENAME
argument_list|,
literal|"//((#exist:optimize#) { item[stock> 20] })"
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|queryResource
argument_list|(
name|service
argument_list|,
name|ITEMS_FILENAME
argument_list|,
literal|"//((#exist:optimize#) { item[stock< 16] })"
argument_list|,
literal|6
argument_list|)
expr_stmt|;
name|queryResource
argument_list|(
name|service
argument_list|,
name|ITEMS_FILENAME
argument_list|,
literal|"declare namespace x=\"http://www.foo.com\"; "
operator|+
literal|"//((#exist:optimize#) { item[x:rating> 8.0] })"
argument_list|,
literal|2
argument_list|)
expr_stmt|;
name|queryResource
argument_list|(
name|service
argument_list|,
name|ITEMS_FILENAME
argument_list|,
literal|"//((#exist:optimize#) { item[mixed = 'uneven'] })"
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|queryResource
argument_list|(
name|service
argument_list|,
name|ITEMS_FILENAME
argument_list|,
literal|"//((#exist:optimize#) { item[mixed = 'external'] })"
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|queryResource
argument_list|(
name|service
argument_list|,
name|ITEMS_FILENAME
argument_list|,
literal|"//((#exist:optimize#) { item[@id = 'i1'] })"
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|queryResource
argument_list|(
name|service
argument_list|,
name|ITEMS_FILENAME
argument_list|,
literal|"declare namespace xx=\"http://test.com\";"
operator|+
literal|"//((#exist:optimize#) { item[@xx:test = 123] })"
argument_list|,
literal|1
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|indexScan
parameter_list|()
throws|throws
name|XMLDBException
throws|,
name|URISyntaxException
block|{
name|configureCollection
argument_list|(
name|CONFIG
argument_list|)
expr_stmt|;
name|String
name|queryBody
init|=
literal|"declare namespace f=\'http://exist-db.org/xquery/test\';\n"
operator|+
literal|"declare namespace mods='http://www.loc.gov/mods/v3';\n"
operator|+
literal|"import module namespace u=\'http://exist-db.org/xquery/util\';\n"
operator|+
literal|"\n"
operator|+
literal|"declare function f:term-callback($term as item(), $data as xs:int+)\n"
operator|+
literal|"as element()+ {\n"
operator|+
literal|"<item>\n"
operator|+
literal|"<term>{$term}</term>\n"
operator|+
literal|"<frequency>{$data[1]}</frequency>\n"
operator|+
literal|"</item>\n"
operator|+
literal|"};\n"
operator|+
literal|"\n"
decl_stmt|;
name|XPathQueryService
name|service
init|=
name|storeXMLFileAndGetQueryService
argument_list|(
name|ITEMS_FILENAME
argument_list|,
name|ITEMS_FILE
argument_list|)
decl_stmt|;
name|String
name|query
init|=
name|queryBody
operator|+
literal|"u:index-keys(//item/name, \'\', util:function(xs:QName(\'f:term-callback\'), 2), 1000)"
decl_stmt|;
name|ResourceSet
name|result
init|=
name|service
operator|.
name|query
argument_list|(
name|query
argument_list|)
decl_stmt|;
for|for
control|(
name|ResourceIterator
name|i
init|=
name|result
operator|.
name|getIterator
argument_list|()
init|;
name|i
operator|.
name|hasMoreResources
argument_list|()
condition|;
control|)
block|{
name|i
operator|.
name|nextResource
argument_list|()
operator|.
name|getContent
argument_list|()
expr_stmt|;
block|}
name|assertEquals
argument_list|(
literal|7
argument_list|,
name|result
operator|.
name|getSize
argument_list|()
argument_list|)
expr_stmt|;
name|query
operator|=
name|queryBody
operator|+
literal|"u:index-keys(//item/stock, 0, util:function(xs:QName(\'f:term-callback\'), 2), 1000)"
expr_stmt|;
name|result
operator|=
name|service
operator|.
name|query
argument_list|(
name|query
argument_list|)
expr_stmt|;
for|for
control|(
name|ResourceIterator
name|i
init|=
name|result
operator|.
name|getIterator
argument_list|()
init|;
name|i
operator|.
name|hasMoreResources
argument_list|()
condition|;
control|)
block|{
name|i
operator|.
name|nextResource
argument_list|()
operator|.
name|getContent
argument_list|()
expr_stmt|;
block|}
name|assertEquals
argument_list|(
literal|5
argument_list|,
name|result
operator|.
name|getSize
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|updates
parameter_list|()
throws|throws
name|Exception
block|{
name|configureCollection
argument_list|(
name|CONFIG
argument_list|)
expr_stmt|;
name|storeXMLFileAndGetQueryService
argument_list|(
name|ITEMS_FILENAME
argument_list|,
name|ITEMS_FILE
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|100
init|;
name|i
operator|<=
literal|150
condition|;
name|i
operator|++
control|)
block|{
name|String
name|append
init|=
literal|"<xu:modifications xmlns:xu=\"http://www.xmldb.org/xupdate\" version=\"1.0\">"
operator|+
literal|"<xu:append select=\"/items\">"
operator|+
literal|"<item id=\"i"
operator|+
name|i
operator|+
literal|"\">"
operator|+
literal|"<itemno>"
operator|+
name|i
operator|+
literal|"</itemno>"
operator|+
literal|"<name>New Item</name>"
operator|+
literal|"<price>55.50</price>"
operator|+
literal|"</item>"
operator|+
literal|"</xu:append>"
operator|+
literal|"</xu:modifications>"
decl_stmt|;
name|String
name|remove
init|=
literal|"<xu:modifications xmlns:xu=\"http://www.xmldb.org/xupdate\" version=\"1.0\">"
operator|+
literal|"<xu:remove select=\"/items/item[itemno="
operator|+
name|i
operator|+
literal|"]\"/>"
operator|+
literal|"</xu:modifications>"
decl_stmt|;
name|XPathQueryService
name|query
init|=
operator|(
name|XPathQueryService
operator|)
name|testCollection
operator|.
name|getService
argument_list|(
literal|"XPathQueryService"
argument_list|,
literal|"1.0"
argument_list|)
decl_stmt|;
name|XUpdateQueryService
name|update
init|=
operator|(
name|XUpdateQueryService
operator|)
name|testCollection
operator|.
name|getService
argument_list|(
literal|"XUpdateQueryService"
argument_list|,
literal|"1.0"
argument_list|)
decl_stmt|;
name|long
name|mods
init|=
name|update
operator|.
name|updateResource
argument_list|(
name|ITEMS_FILENAME
argument_list|,
name|append
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|mods
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|queryResource
argument_list|(
name|query
argument_list|,
name|ITEMS_FILENAME
argument_list|,
literal|"//item[price = 55.50]"
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|queryResource
argument_list|(
name|query
argument_list|,
name|ITEMS_FILENAME
argument_list|,
literal|"//item[@id = 'i"
operator|+
name|i
operator|+
literal|"']"
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|mods
operator|=
name|update
operator|.
name|updateResource
argument_list|(
name|ITEMS_FILENAME
argument_list|,
name|remove
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|mods
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|queryResource
argument_list|(
name|query
argument_list|,
name|ITEMS_FILENAME
argument_list|,
literal|"//item[itemno = "
operator|+
name|i
operator|+
literal|"]"
argument_list|,
literal|0
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Test
specifier|public
name|void
name|updatesQName
parameter_list|()
throws|throws
name|Exception
block|{
name|configureCollection
argument_list|(
name|CONFIG_QNAME
argument_list|)
expr_stmt|;
name|storeXMLFileAndGetQueryService
argument_list|(
name|ITEMS_FILENAME
argument_list|,
name|ITEMS_FILE
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|100
init|;
name|i
operator|<=
literal|150
condition|;
name|i
operator|++
control|)
block|{
name|String
name|append
init|=
literal|"<xu:modifications xmlns:xu=\"http://www.xmldb.org/xupdate\" version=\"1.0\">"
operator|+
literal|"<xu:append select=\"/items\">"
operator|+
literal|"<item id=\"i"
operator|+
name|i
operator|+
literal|"\">"
operator|+
literal|"<itemno>"
operator|+
name|i
operator|+
literal|"</itemno>"
operator|+
literal|"<name>New Item</name>"
operator|+
literal|"<price>55.50</price>"
operator|+
literal|"</item>"
operator|+
literal|"</xu:append>"
operator|+
literal|"</xu:modifications>"
decl_stmt|;
name|String
name|remove
init|=
literal|"<xu:modifications xmlns:xu=\"http://www.xmldb.org/xupdate\" version=\"1.0\">"
operator|+
literal|"<xu:remove select=\"/items/item[itemno="
operator|+
name|i
operator|+
literal|"]\"/>"
operator|+
literal|"</xu:modifications>"
decl_stmt|;
name|XPathQueryService
name|query
init|=
operator|(
name|XPathQueryService
operator|)
name|testCollection
operator|.
name|getService
argument_list|(
literal|"XPathQueryService"
argument_list|,
literal|"1.0"
argument_list|)
decl_stmt|;
name|XUpdateQueryService
name|update
init|=
operator|(
name|XUpdateQueryService
operator|)
name|testCollection
operator|.
name|getService
argument_list|(
literal|"XUpdateQueryService"
argument_list|,
literal|"1.0"
argument_list|)
decl_stmt|;
name|long
name|mods
init|=
name|update
operator|.
name|updateResource
argument_list|(
name|ITEMS_FILENAME
argument_list|,
name|append
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|mods
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|queryResource
argument_list|(
name|query
argument_list|,
name|ITEMS_FILENAME
argument_list|,
literal|"//((#exist:optimize#) { item[price = 55.50] })"
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|queryResource
argument_list|(
name|query
argument_list|,
name|ITEMS_FILENAME
argument_list|,
literal|"//((#exist:optimize#) { item[@id = 'i"
operator|+
name|i
operator|+
literal|"']})"
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|queryResource
argument_list|(
name|query
argument_list|,
name|ITEMS_FILENAME
argument_list|,
literal|"//((#exist:optimize#) { item[itemno = "
operator|+
name|i
operator|+
literal|"] })"
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|mods
operator|=
name|update
operator|.
name|updateResource
argument_list|(
name|ITEMS_FILENAME
argument_list|,
name|remove
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|mods
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|queryResource
argument_list|(
name|query
argument_list|,
name|ITEMS_FILENAME
argument_list|,
literal|"//((#exist:optimize#) { item[itemno = "
operator|+
name|i
operator|+
literal|"] })"
argument_list|,
literal|0
argument_list|)
expr_stmt|;
block|}
block|}
specifier|protected
name|ResourceSet
name|queryResource
parameter_list|(
name|XPathQueryService
name|service
parameter_list|,
name|String
name|resource
parameter_list|,
name|String
name|query
parameter_list|,
name|int
name|expected
parameter_list|)
throws|throws
name|XMLDBException
block|{
return|return
name|queryResource
argument_list|(
name|service
argument_list|,
name|resource
argument_list|,
name|query
argument_list|,
name|expected
argument_list|,
literal|null
argument_list|)
return|;
block|}
comment|/**      * @param service      * @throws XMLDBException      */
specifier|private
name|ResourceSet
name|queryResource
parameter_list|(
name|XPathQueryService
name|service
parameter_list|,
name|String
name|resource
parameter_list|,
name|String
name|query
parameter_list|,
name|int
name|expected
parameter_list|,
name|String
name|message
parameter_list|)
throws|throws
name|XMLDBException
block|{
name|ResourceSet
name|result
init|=
name|service
operator|.
name|queryResource
argument_list|(
name|resource
argument_list|,
name|query
argument_list|)
decl_stmt|;
if|if
condition|(
name|message
operator|==
literal|null
condition|)
name|assertEquals
argument_list|(
name|expected
argument_list|,
name|result
operator|.
name|getSize
argument_list|()
argument_list|)
expr_stmt|;
else|else
name|assertEquals
argument_list|(
name|message
argument_list|,
name|expected
argument_list|,
name|result
operator|.
name|getSize
argument_list|()
argument_list|)
expr_stmt|;
return|return
name|result
return|;
block|}
comment|/**      * @return      * @throws XMLDBException      */
specifier|protected
name|XPathQueryService
name|storeXMLFileAndGetQueryService
parameter_list|(
name|String
name|documentName
parameter_list|,
specifier|final
name|URL
name|srcFile
parameter_list|)
throws|throws
name|XMLDBException
throws|,
name|URISyntaxException
block|{
name|XMLResource
name|doc
init|=
operator|(
name|XMLResource
operator|)
name|testCollection
operator|.
name|createResource
argument_list|(
name|documentName
argument_list|,
literal|"XMLResource"
argument_list|)
decl_stmt|;
name|Path
name|f
init|=
name|Paths
operator|.
name|get
argument_list|(
name|srcFile
operator|.
name|toURI
argument_list|()
argument_list|)
decl_stmt|;
name|doc
operator|.
name|setContent
argument_list|(
name|f
argument_list|)
expr_stmt|;
name|testCollection
operator|.
name|storeResource
argument_list|(
name|doc
argument_list|)
expr_stmt|;
name|XPathQueryService
name|service
init|=
operator|(
name|XPathQueryService
operator|)
name|testCollection
operator|.
name|getService
argument_list|(
literal|"XPathQueryService"
argument_list|,
literal|"1.0"
argument_list|)
decl_stmt|;
return|return
name|service
return|;
block|}
block|}
end_class

end_unit

