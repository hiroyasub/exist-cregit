begin_unit|revision:1.0.0;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * eXist Open Source Native XML Database  * Copyright (C) 2004-2007 The eXist Project  * http://exist-db.org  *  * This program is free software; you can redistribute it and/or  * modify it under the terms of the GNU Lesser General Public License  * as published by the Free Software Foundation; either version 2  * of the License, or (at your option) any later version.  *    * This program is distributed in the hope that it will be useful,  * but WITHOUT ANY WARRANTY; without even the implied warranty of  * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the  * GNU Lesser General Public License for more details.  *   * You should have received a copy of the GNU Lesser General Public License  * along with this program; if not, write to the Free Software Foundation  * Inc., 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301, USA.  *    *  $Id$  */
end_comment

begin_package
package|package
name|org
operator|.
name|exist
operator|.
name|xquery
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|File
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|StringReader
import|;
end_import

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|HttpURLConnection
import|;
end_import

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|MalformedURLException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|URL
import|;
end_import

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|URLConnection
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|xml
operator|.
name|transform
operator|.
name|OutputKeys
import|;
end_import

begin_import
import|import
name|org
operator|.
name|custommonkey
operator|.
name|xmlunit
operator|.
name|DetailedDiff
import|;
end_import

begin_import
import|import
name|org
operator|.
name|custommonkey
operator|.
name|xmlunit
operator|.
name|Diff
import|;
end_import

begin_import
import|import
name|org
operator|.
name|custommonkey
operator|.
name|xmlunit
operator|.
name|XMLTestCase
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|storage
operator|.
name|DBBroker
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|xmldb
operator|.
name|DatabaseInstanceManager
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|xmldb
operator|.
name|EXistResource
import|;
end_import

begin_import
import|import
name|org
operator|.
name|w3c
operator|.
name|dom
operator|.
name|Element
import|;
end_import

begin_import
import|import
name|org
operator|.
name|w3c
operator|.
name|dom
operator|.
name|Node
import|;
end_import

begin_import
import|import
name|org
operator|.
name|xmldb
operator|.
name|api
operator|.
name|DatabaseManager
import|;
end_import

begin_import
import|import
name|org
operator|.
name|xmldb
operator|.
name|api
operator|.
name|base
operator|.
name|Collection
import|;
end_import

begin_import
import|import
name|org
operator|.
name|xmldb
operator|.
name|api
operator|.
name|base
operator|.
name|Database
import|;
end_import

begin_import
import|import
name|org
operator|.
name|xmldb
operator|.
name|api
operator|.
name|base
operator|.
name|Resource
import|;
end_import

begin_import
import|import
name|org
operator|.
name|xmldb
operator|.
name|api
operator|.
name|base
operator|.
name|ResourceIterator
import|;
end_import

begin_import
import|import
name|org
operator|.
name|xmldb
operator|.
name|api
operator|.
name|base
operator|.
name|ResourceSet
import|;
end_import

begin_import
import|import
name|org
operator|.
name|xmldb
operator|.
name|api
operator|.
name|base
operator|.
name|XMLDBException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|xmldb
operator|.
name|api
operator|.
name|modules
operator|.
name|CollectionManagementService
import|;
end_import

begin_import
import|import
name|org
operator|.
name|xmldb
operator|.
name|api
operator|.
name|modules
operator|.
name|XMLResource
import|;
end_import

begin_import
import|import
name|org
operator|.
name|xmldb
operator|.
name|api
operator|.
name|modules
operator|.
name|XPathQueryService
import|;
end_import

begin_import
import|import
name|org
operator|.
name|xmldb
operator|.
name|api
operator|.
name|modules
operator|.
name|XQueryService
import|;
end_import

begin_comment
comment|/** I propose that we put here in XQueryTest the tests involving all the   * others constructs of the XQuery language, besides XPath expressions.  * And in {@link XPathQueryTest} we will put the tests involving only XPath expressions.  * TODO maybe move the various eXist XQuery extensions in another class ... */
end_comment

begin_class
specifier|public
class|class
name|XQueryTest
extends|extends
name|XMLTestCase
block|{
specifier|private
specifier|static
specifier|final
name|String
name|NUMBERS_XML
init|=
literal|"numbers.xml"
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|String
name|BOWLING_XML
init|=
literal|"bowling.xml"
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|String
name|MODULE1_NAME
init|=
literal|"module1.xqm"
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|String
name|MODULE2_NAME
init|=
literal|"module2.xqm"
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|String
name|MODULE3_NAME
init|=
literal|"module3.xqm"
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|String
name|MODULE4_NAME
init|=
literal|"module4.xqm"
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|String
name|MODULE5_NAME
init|=
literal|"module5.xqm"
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|String
name|MODULE6_NAME
init|=
literal|"module6.xqm"
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|String
name|FATHER_MODULE_NAME
init|=
literal|"father.xqm"
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|String
name|CHILD1_MODULE_NAME
init|=
literal|"child1.xqm"
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|String
name|CHILD2_MODULE_NAME
init|=
literal|"child2.xqm"
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|String
name|NAMESPACED_NAME
init|=
literal|"namespaced.xml"
decl_stmt|;
specifier|private
specifier|final
specifier|static
name|String
name|URI
init|=
literal|"xmldb:exist://"
operator|+
name|DBBroker
operator|.
name|ROOT_COLLECTION
decl_stmt|;
specifier|private
specifier|final
specifier|static
name|String
name|numbers
init|=
literal|"<test>"
operator|+
literal|"<item id='1'><price>5.6</price><stock>22</stock></item>"
operator|+
literal|"<item id='2'><price>7.4</price><stock>43</stock></item>"
operator|+
literal|"<item id='3'><price>18.4</price><stock>5</stock></item>"
operator|+
literal|"<item id='4'><price>65.54</price><stock>16</stock></item>"
operator|+
literal|"</test>"
decl_stmt|;
specifier|private
specifier|final
specifier|static
name|String
name|module1
init|=
literal|"module namespace blah=\"blah\";\n"
operator|+
literal|"declare variable $blah:param {\"value-1\"};"
decl_stmt|;
specifier|private
specifier|final
specifier|static
name|String
name|module2
init|=
literal|"module namespace foo=\"\";\n"
operator|+
literal|"declare variable $foo:bar {\"bar\"};"
decl_stmt|;
specifier|private
specifier|final
specifier|static
name|String
name|module3
init|=
literal|"module namespace foo=\"foo\";\n"
operator|+
literal|"declare variable $bar:bar {\"bar\"};"
decl_stmt|;
specifier|private
specifier|final
specifier|static
name|String
name|module4
init|=
literal|"module namespace foo=\"foo\";\n"
comment|//An external prefix in the statically known namespaces
operator|+
literal|"declare variable $exist:bar external;\n"
operator|+
literal|"declare function foo:bar() {\n"
operator|+
literal|"$exist:bar\n"
operator|+
literal|"};"
decl_stmt|;
specifier|private
specifier|final
specifier|static
name|String
name|module5
init|=
literal|"module namespace foo=\"foo\";\n"
operator|+
literal|"declare variable $foo:bar := \"bar\";"
decl_stmt|;
specifier|private
specifier|final
specifier|static
name|String
name|module6
init|=
literal|"module namespace foo=\"foo\";\n"
operator|+
literal|"declare variable $foo:bar := \"bar\";"
operator|+
literal|"declare variable $foo:bar := \"bar\";"
decl_stmt|;
specifier|private
specifier|final
specifier|static
name|String
name|fatherModule
init|=
literal|"module namespace foo=\"foo\";\n"
operator|+
literal|"import module namespace foo1=\"foo1\" at \""
operator|+
name|URI
operator|+
literal|"/test/"
operator|+
name|CHILD1_MODULE_NAME
operator|+
literal|"\";\n"
operator|+
literal|"import module namespace foo2=\"foo2\" at \""
operator|+
name|URI
operator|+
literal|"/test/"
operator|+
name|CHILD2_MODULE_NAME
operator|+
literal|"\";\n"
operator|+
literal|"declare variable $foo:bar { \"bar\" };\n "
operator|+
literal|"declare variable $foo:bar1 { $foo1:bar };\n"
operator|+
literal|"declare variable $foo:bar2 { $foo2:bar };\n"
decl_stmt|;
specifier|private
specifier|final
specifier|static
name|String
name|child1Module
init|=
literal|"module namespace foo=\"foo1\";\n"
operator|+
literal|"import module namespace blah=\"blah\" at \""
operator|+
name|URI
operator|+
literal|"/test/"
operator|+
name|MODULE1_NAME
operator|+
literal|"\";\n"
operator|+
literal|"declare variable $foo:bar {\"bar1\"};"
decl_stmt|;
specifier|private
specifier|final
specifier|static
name|String
name|child2Module
init|=
literal|"module namespace foo=\"foo2\";\n"
operator|+
literal|"import module namespace blah=\"blah\" at \""
operator|+
name|URI
operator|+
literal|"/test/"
operator|+
name|MODULE1_NAME
operator|+
literal|"\";\n"
operator|+
literal|"declare variable $foo:bar {\"bar2\"};"
decl_stmt|;
specifier|private
specifier|final
specifier|static
name|String
name|namespacedDocument
init|=
literal|"<rdf:RDF xmlns:rdf=\"http://www.w3.org/1999/02/22-rdf-syntax-ns#\" \n"
operator|+
literal|"xmlns:dc=\"http://purl.org/dc/elements/1.1/\" \n"
operator|+
literal|"xmlns:x=\"http://exist.sourceforge.net/dc-ext\"> \n"
operator|+
literal|"<rdf:Description id=\"3\"> \n"
operator|+
literal|"<dc:title>title</dc:title> \n"
operator|+
literal|"<dc:creator>creator</dc:creator> \n"
operator|+
literal|"<x:place>place</x:place> \n"
operator|+
literal|"<x:edition>place</x:edition> \n"
operator|+
literal|"</rdf:Description> \n"
operator|+
literal|"</rdf:RDF>"
decl_stmt|;
specifier|private
specifier|final
specifier|static
name|String
name|bowling
init|=
literal|"<series>"
operator|+
literal|"<game>"
operator|+
literal|"<frame/>"
operator|+
literal|"</game>"
operator|+
literal|"<game>"
operator|+
literal|"<frame/>"
operator|+
literal|"</game>"
operator|+
literal|"</series>"
decl_stmt|;
specifier|private
specifier|static
name|String
name|attributeXML
decl_stmt|;
specifier|private
specifier|static
name|int
name|stringSize
decl_stmt|;
specifier|private
specifier|static
name|int
name|nbElem
decl_stmt|;
specifier|private
name|String
name|file_name
init|=
literal|"detail_xml.xml"
decl_stmt|;
specifier|private
name|String
name|xml
decl_stmt|;
specifier|private
name|Database
name|database
decl_stmt|;
specifier|public
name|XQueryTest
parameter_list|(
name|String
name|arg0
parameter_list|)
block|{
name|super
argument_list|(
name|arg0
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|setUp
parameter_list|()
block|{
try|try
block|{
comment|// initialize driver
name|Class
name|cl
init|=
name|Class
operator|.
name|forName
argument_list|(
literal|"org.exist.xmldb.DatabaseImpl"
argument_list|)
decl_stmt|;
name|database
operator|=
operator|(
name|Database
operator|)
name|cl
operator|.
name|newInstance
argument_list|()
expr_stmt|;
name|database
operator|.
name|setProperty
argument_list|(
literal|"create-database"
argument_list|,
literal|"true"
argument_list|)
expr_stmt|;
name|DatabaseManager
operator|.
name|registerDatabase
argument_list|(
name|database
argument_list|)
expr_stmt|;
name|Collection
name|root
init|=
name|DatabaseManager
operator|.
name|getCollection
argument_list|(
literal|"xmldb:exist://"
operator|+
name|DBBroker
operator|.
name|ROOT_COLLECTION
argument_list|,
literal|"admin"
argument_list|,
literal|null
argument_list|)
decl_stmt|;
name|CollectionManagementService
name|service
init|=
operator|(
name|CollectionManagementService
operator|)
name|root
operator|.
name|getService
argument_list|(
literal|"CollectionManagementService"
argument_list|,
literal|"1.0"
argument_list|)
decl_stmt|;
name|Collection
name|testCollection
init|=
name|service
operator|.
name|createCollection
argument_list|(
literal|"test"
argument_list|)
decl_stmt|;
name|assertNotNull
argument_list|(
name|testCollection
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|e
operator|.
name|printStackTrace
argument_list|()
expr_stmt|;
block|}
block|}
comment|/* 	 * @see TestCase#tearDown() 	 */
specifier|public
name|void
name|tearDown
parameter_list|()
throws|throws
name|Exception
block|{
comment|// testCollection.removeResource( testCollection .getResource(file_name));
name|DatabaseInstanceManager
name|dim
init|=
operator|(
name|DatabaseInstanceManager
operator|)
name|getTestCollection
argument_list|()
operator|.
name|getService
argument_list|(
literal|"DatabaseInstanceManager"
argument_list|,
literal|"1.0"
argument_list|)
decl_stmt|;
name|dim
operator|.
name|shutdown
argument_list|()
expr_stmt|;
name|DatabaseManager
operator|.
name|deregisterDatabase
argument_list|(
name|database
argument_list|)
expr_stmt|;
name|database
operator|=
literal|null
expr_stmt|;
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"tearDown PASSED"
argument_list|)
expr_stmt|;
block|}
specifier|private
name|Collection
name|getTestCollection
parameter_list|()
throws|throws
name|XMLDBException
block|{
return|return
name|DatabaseManager
operator|.
name|getCollection
argument_list|(
literal|"xmldb:exist:///db/test"
argument_list|,
literal|"admin"
argument_list|,
literal|null
argument_list|)
return|;
block|}
specifier|public
name|void
name|testLet
parameter_list|()
block|{
name|ResourceSet
name|result
decl_stmt|;
name|String
name|query
decl_stmt|;
name|XMLResource
name|resu
decl_stmt|;
try|try
block|{
name|XPathQueryService
name|service
init|=
name|storeXMLStringAndGetQueryService
argument_list|(
name|NUMBERS_XML
argument_list|,
name|numbers
argument_list|)
decl_stmt|;
comment|//Non null context sequence
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"testLet 1: ========"
argument_list|)
expr_stmt|;
name|query
operator|=
literal|"/test/item[let $id := ./@id return $id]"
expr_stmt|;
name|result
operator|=
name|service
operator|.
name|queryResource
argument_list|(
name|NUMBERS_XML
argument_list|,
name|query
argument_list|)
expr_stmt|;
name|printResult
argument_list|(
name|result
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"XQuery: "
operator|+
name|query
argument_list|,
literal|4
argument_list|,
name|result
operator|.
name|getSize
argument_list|()
argument_list|)
expr_stmt|;
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"testLet 2: ========"
argument_list|)
expr_stmt|;
name|query
operator|=
literal|"/test/item[let $id := ./@id return not(/test/set[@id=$id])]"
expr_stmt|;
name|result
operator|=
name|service
operator|.
name|queryResource
argument_list|(
name|NUMBERS_XML
argument_list|,
name|query
argument_list|)
expr_stmt|;
name|printResult
argument_list|(
name|result
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"XQuery: "
operator|+
name|query
argument_list|,
literal|4
argument_list|,
name|result
operator|.
name|getSize
argument_list|()
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|XMLDBException
name|e
parameter_list|)
block|{
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"testLet(): XMLDBException: "
operator|+
name|e
argument_list|)
expr_stmt|;
name|e
operator|.
name|printStackTrace
argument_list|()
expr_stmt|;
name|fail
argument_list|(
name|e
operator|.
name|getMessage
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
specifier|public
name|void
name|testFor
parameter_list|()
block|{
name|ResourceSet
name|result
decl_stmt|;
name|String
name|query
decl_stmt|;
name|XMLResource
name|resu
decl_stmt|;
try|try
block|{
name|XPathQueryService
name|service
init|=
name|storeXMLStringAndGetQueryService
argument_list|(
name|NUMBERS_XML
argument_list|,
name|numbers
argument_list|)
decl_stmt|;
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"testFor 1: ========"
argument_list|)
expr_stmt|;
name|query
operator|=
literal|"for $f in /*/item return $f"
expr_stmt|;
name|result
operator|=
name|service
operator|.
name|queryResource
argument_list|(
name|NUMBERS_XML
argument_list|,
name|query
argument_list|)
expr_stmt|;
name|printResult
argument_list|(
name|result
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"XQuery: "
operator|+
name|query
argument_list|,
literal|4
argument_list|,
name|result
operator|.
name|getSize
argument_list|()
argument_list|)
expr_stmt|;
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"testFor 2: ========"
argument_list|)
expr_stmt|;
name|query
operator|=
literal|"for $f in /*/item  order by $f ascending  return $f"
expr_stmt|;
name|result
operator|=
name|service
operator|.
name|queryResource
argument_list|(
name|NUMBERS_XML
argument_list|,
name|query
argument_list|)
expr_stmt|;
name|printResult
argument_list|(
name|result
argument_list|)
expr_stmt|;
name|resu
operator|=
operator|(
name|XMLResource
operator|)
name|result
operator|.
name|getResource
argument_list|(
literal|0
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"XQuery: "
operator|+
name|query
argument_list|,
literal|"3"
argument_list|,
operator|(
operator|(
name|Element
operator|)
name|resu
operator|.
name|getContentAsDOM
argument_list|()
operator|)
operator|.
name|getAttribute
argument_list|(
literal|"id"
argument_list|)
argument_list|)
expr_stmt|;
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"testFor 3: ========"
argument_list|)
expr_stmt|;
name|query
operator|=
literal|"for $f in /*/item  order by $f descending  return $f"
expr_stmt|;
name|result
operator|=
name|service
operator|.
name|queryResource
argument_list|(
name|NUMBERS_XML
argument_list|,
name|query
argument_list|)
expr_stmt|;
name|printResult
argument_list|(
name|result
argument_list|)
expr_stmt|;
name|resu
operator|=
operator|(
name|XMLResource
operator|)
name|result
operator|.
name|getResource
argument_list|(
literal|0
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"XQuery: "
operator|+
name|query
argument_list|,
literal|"2"
argument_list|,
operator|(
operator|(
name|Element
operator|)
name|resu
operator|.
name|getContentAsDOM
argument_list|()
operator|)
operator|.
name|getAttribute
argument_list|(
literal|"id"
argument_list|)
argument_list|)
expr_stmt|;
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"testFor 4: ========"
argument_list|)
expr_stmt|;
name|query
operator|=
literal|"for $f in /*/item  order by xs:double($f/price) descending  return $f"
expr_stmt|;
name|result
operator|=
name|service
operator|.
name|queryResource
argument_list|(
name|NUMBERS_XML
argument_list|,
name|query
argument_list|)
expr_stmt|;
name|printResult
argument_list|(
name|result
argument_list|)
expr_stmt|;
name|resu
operator|=
operator|(
name|XMLResource
operator|)
name|result
operator|.
name|getResource
argument_list|(
literal|0
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"XQuery: "
operator|+
name|query
argument_list|,
literal|"4"
argument_list|,
operator|(
operator|(
name|Element
operator|)
name|resu
operator|.
name|getContentAsDOM
argument_list|()
operator|)
operator|.
name|getAttribute
argument_list|(
literal|"id"
argument_list|)
argument_list|)
expr_stmt|;
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"testFor 5: ========"
argument_list|)
expr_stmt|;
name|query
operator|=
literal|"for $f in //item where $f/@id = '3' return $f"
expr_stmt|;
name|result
operator|=
name|service
operator|.
name|queryResource
argument_list|(
name|NUMBERS_XML
argument_list|,
name|query
argument_list|)
expr_stmt|;
name|printResult
argument_list|(
name|result
argument_list|)
expr_stmt|;
name|resu
operator|=
operator|(
name|XMLResource
operator|)
name|result
operator|.
name|getResource
argument_list|(
literal|0
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"XQuery: "
operator|+
name|query
argument_list|,
literal|"3"
argument_list|,
operator|(
operator|(
name|Element
operator|)
name|resu
operator|.
name|getContentAsDOM
argument_list|()
operator|)
operator|.
name|getAttribute
argument_list|(
literal|"id"
argument_list|)
argument_list|)
expr_stmt|;
comment|//Non null context sequence
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"testFor 6: ========"
argument_list|)
expr_stmt|;
name|query
operator|=
literal|"/test/item[for $id in ./@id return $id]"
expr_stmt|;
name|result
operator|=
name|service
operator|.
name|queryResource
argument_list|(
name|NUMBERS_XML
argument_list|,
name|query
argument_list|)
expr_stmt|;
name|printResult
argument_list|(
name|result
argument_list|)
expr_stmt|;
name|resu
operator|=
operator|(
name|XMLResource
operator|)
name|result
operator|.
name|getResource
argument_list|(
literal|0
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"XQuery: "
operator|+
name|query
argument_list|,
literal|4
argument_list|,
name|result
operator|.
name|getSize
argument_list|()
argument_list|)
expr_stmt|;
comment|//Ordered value sequence
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"testFor 7: ========"
argument_list|)
expr_stmt|;
name|query
operator|=
literal|"let $doc :=<doc><value>Z</value><value>Y</value><value>X</value></doc> "
operator|+
literal|"return "
operator|+
literal|"let $ordered_values := "
operator|+
literal|"	for $value in $doc/value order by $value ascending "
operator|+
literal|"	return $value "
operator|+
literal|"for $value in $doc/value "
operator|+
literal|"	return $value[. = $ordered_values[position() = 1]]"
expr_stmt|;
name|result
operator|=
name|service
operator|.
name|queryResource
argument_list|(
name|NUMBERS_XML
argument_list|,
name|query
argument_list|)
expr_stmt|;
name|printResult
argument_list|(
name|result
argument_list|)
expr_stmt|;
name|resu
operator|=
operator|(
name|XMLResource
operator|)
name|result
operator|.
name|getResource
argument_list|(
literal|0
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"XQuery: "
operator|+
name|query
argument_list|,
literal|"<value>X</value>"
argument_list|,
name|resu
operator|.
name|getContent
argument_list|()
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|XMLDBException
name|e
parameter_list|)
block|{
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"testFor(): XMLDBException: "
operator|+
name|e
argument_list|)
expr_stmt|;
name|fail
argument_list|(
name|e
operator|.
name|getMessage
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
specifier|public
name|void
name|testRecursion
parameter_list|()
block|{
try|try
block|{
name|String
name|q1
init|=
literal|"declare function local:append($head, $i) {\n"
operator|+
literal|"   if ($i< 5000) then\n"
operator|+
literal|"       local:append(($head, $i), $i + 1)\n"
operator|+
literal|"   else\n"
operator|+
literal|"       $head\n"
operator|+
literal|"};\n"
operator|+
literal|"local:append((), 0)"
decl_stmt|;
name|XPathQueryService
name|service
init|=
operator|(
name|XPathQueryService
operator|)
name|getTestCollection
argument_list|()
operator|.
name|getService
argument_list|(
literal|"XPathQueryService"
argument_list|,
literal|"1.0"
argument_list|)
decl_stmt|;
name|ResourceSet
name|result
init|=
name|service
operator|.
name|query
argument_list|(
name|q1
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|result
operator|.
name|getSize
argument_list|()
argument_list|,
literal|5000
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|e
operator|.
name|printStackTrace
argument_list|()
expr_stmt|;
name|fail
argument_list|(
name|e
operator|.
name|getMessage
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
specifier|public
name|void
name|testConstructedNode1
parameter_list|()
block|{
try|try
block|{
name|String
name|q1
init|=
literal|"let $a :=<A/> for $b in $a//B/string() return \"Oops!\""
decl_stmt|;
name|XPathQueryService
name|service
init|=
operator|(
name|XPathQueryService
operator|)
name|getTestCollection
argument_list|()
operator|.
name|getService
argument_list|(
literal|"XPathQueryService"
argument_list|,
literal|"1.0"
argument_list|)
decl_stmt|;
name|ResourceSet
name|result
init|=
name|service
operator|.
name|query
argument_list|(
name|q1
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|result
operator|.
name|getSize
argument_list|()
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|e
operator|.
name|printStackTrace
argument_list|()
expr_stmt|;
name|fail
argument_list|(
name|e
operator|.
name|getMessage
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
specifier|public
name|void
name|testCombiningNodeSequences
parameter_list|()
block|{
name|ResourceSet
name|result
decl_stmt|;
name|String
name|query
decl_stmt|;
try|try
block|{
name|XPathQueryService
name|service
init|=
operator|(
name|XPathQueryService
operator|)
name|getTestCollection
argument_list|()
operator|.
name|getService
argument_list|(
literal|"XPathQueryService"
argument_list|,
literal|"1.0"
argument_list|)
decl_stmt|;
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"testCombiningNodeSequences 1: ========"
argument_list|)
expr_stmt|;
name|query
operator|=
literal|"let $a :=<a/> \n"
operator|+
literal|"let $aa := ($a, $a) \n"
operator|+
literal|"for $b in ($aa intersect $aa \n)"
operator|+
literal|"return $b"
expr_stmt|;
name|result
operator|=
name|service
operator|.
name|query
argument_list|(
name|query
argument_list|)
expr_stmt|;
name|printResult
argument_list|(
name|result
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"XQuery: "
operator|+
name|query
argument_list|,
literal|1
argument_list|,
name|result
operator|.
name|getSize
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"XQuery: "
operator|+
name|query
argument_list|,
literal|"<a/>"
argument_list|,
operator|(
operator|(
name|XMLResource
operator|)
name|result
operator|.
name|getResource
argument_list|(
literal|0
argument_list|)
operator|)
operator|.
name|getContent
argument_list|()
argument_list|)
expr_stmt|;
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"testCombiningNodeSequences 2: ========"
argument_list|)
expr_stmt|;
name|query
operator|=
literal|"let $a :=<a/> \n"
operator|+
literal|"let $aa := ($a, $a) \n"
operator|+
literal|"for $b in ($aa union $aa \n)"
operator|+
literal|"return $b"
expr_stmt|;
name|result
operator|=
name|service
operator|.
name|query
argument_list|(
name|query
argument_list|)
expr_stmt|;
name|printResult
argument_list|(
name|result
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"XQuery: "
operator|+
name|query
argument_list|,
literal|1
argument_list|,
name|result
operator|.
name|getSize
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"XQuery: "
operator|+
name|query
argument_list|,
literal|"<a/>"
argument_list|,
operator|(
operator|(
name|XMLResource
operator|)
name|result
operator|.
name|getResource
argument_list|(
literal|0
argument_list|)
operator|)
operator|.
name|getContent
argument_list|()
argument_list|)
expr_stmt|;
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"testCombiningNodeSequences 3: ========"
argument_list|)
expr_stmt|;
name|query
operator|=
literal|"let $a :=<a/> \n"
operator|+
literal|"let $aa := ($a, $a) \n"
operator|+
literal|"for $b in ($aa except $aa \n)"
operator|+
literal|"return $b"
expr_stmt|;
name|result
operator|=
name|service
operator|.
name|query
argument_list|(
name|query
argument_list|)
expr_stmt|;
name|printResult
argument_list|(
name|result
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"XQuery: "
operator|+
name|query
argument_list|,
literal|0
argument_list|,
name|result
operator|.
name|getSize
argument_list|()
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|XMLDBException
name|e
parameter_list|)
block|{
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"testCombiningNodeSequences(): XMLDBException: "
operator|+
name|e
argument_list|)
expr_stmt|;
name|fail
argument_list|(
name|e
operator|.
name|getMessage
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
comment|// Testcase by Gev
specifier|public
name|void
name|bugtestInMemoryNodeSequences
parameter_list|()
block|{
name|ResourceSet
name|result
decl_stmt|;
name|String
name|query
decl_stmt|;
try|try
block|{
name|XPathQueryService
name|service
init|=
operator|(
name|XPathQueryService
operator|)
name|getTestCollection
argument_list|()
operator|.
name|getService
argument_list|(
literal|"XPathQueryService"
argument_list|,
literal|"1.0"
argument_list|)
decl_stmt|;
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"testInMemoryNodeSequences 1: ========"
argument_list|)
expr_stmt|;
name|query
operator|=
literal|"let $c := (<a/>,<b/>) return<t>text{$c[1]}</t>"
expr_stmt|;
name|result
operator|=
name|service
operator|.
name|query
argument_list|(
name|query
argument_list|)
expr_stmt|;
name|printResult
argument_list|(
name|result
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"XQuery: "
operator|+
name|query
argument_list|,
literal|"<t>text<a/></t>"
argument_list|,
name|result
operator|.
name|getResource
argument_list|(
literal|0
argument_list|)
operator|.
name|getContent
argument_list|()
argument_list|)
expr_stmt|;
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"testInMemoryNodeSequences 2: ========"
argument_list|)
expr_stmt|;
name|query
operator|=
literal|"let $c := (<a/>,<b/>) return<t><text/>{$c[1]}</t>"
expr_stmt|;
name|result
operator|=
name|service
operator|.
name|query
argument_list|(
name|query
argument_list|)
expr_stmt|;
name|printResult
argument_list|(
name|result
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"XQuery: "
operator|+
name|query
argument_list|,
literal|"<t><text/><a/></t>"
argument_list|,
name|result
operator|.
name|getResource
argument_list|(
literal|0
argument_list|)
operator|.
name|getContent
argument_list|()
argument_list|)
expr_stmt|;
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"testInMemoryNodeSequences 3: ========"
argument_list|)
expr_stmt|;
name|query
operator|=
literal|"let $c := (<a/>,<b/>) return<t>{\"text\"}{$c[1]}</t>"
expr_stmt|;
name|result
operator|=
name|service
operator|.
name|query
argument_list|(
name|query
argument_list|)
expr_stmt|;
name|printResult
argument_list|(
name|result
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"XQuery: "
operator|+
name|query
argument_list|,
literal|"<t>text<a/></t>"
argument_list|,
name|result
operator|.
name|getResource
argument_list|(
literal|0
argument_list|)
operator|.
name|getContent
argument_list|()
argument_list|)
expr_stmt|;
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"testInMemoryNodeSequences 4: ========"
argument_list|)
expr_stmt|;
name|query
operator|=
literal|"let $c := (<a/>,\"b\") return<t>text{$c[1]}</t>"
expr_stmt|;
name|result
operator|=
name|service
operator|.
name|query
argument_list|(
name|query
argument_list|)
expr_stmt|;
name|printResult
argument_list|(
name|result
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"XQuery: "
operator|+
name|query
argument_list|,
literal|"<t>text<a/></t>"
argument_list|,
name|result
operator|.
name|getResource
argument_list|(
literal|0
argument_list|)
operator|.
name|getContent
argument_list|()
argument_list|)
expr_stmt|;
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"testInMemoryNodeSequences 5: ========"
argument_list|)
expr_stmt|;
name|query
operator|=
literal|"let $c := (<a/>,\"b\") return<t><text/>{$c[1]}</t>"
expr_stmt|;
name|result
operator|=
name|service
operator|.
name|query
argument_list|(
name|query
argument_list|)
expr_stmt|;
name|printResult
argument_list|(
name|result
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"XQuery: "
operator|+
name|query
argument_list|,
literal|"<t><text/><a/></t>"
argument_list|,
name|result
operator|.
name|getResource
argument_list|(
literal|0
argument_list|)
operator|.
name|getContent
argument_list|()
argument_list|)
expr_stmt|;
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"testInMemoryNodeSequences 6: ========"
argument_list|)
expr_stmt|;
name|query
operator|=
literal|"let $c := (<a/>,\"b\") return<t>{\"text\"}{$c[1]}</t>"
expr_stmt|;
name|result
operator|=
name|service
operator|.
name|query
argument_list|(
name|query
argument_list|)
expr_stmt|;
name|printResult
argument_list|(
name|result
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"XQuery: "
operator|+
name|query
argument_list|,
literal|"<t>text<a/></t>"
argument_list|,
name|result
operator|.
name|getResource
argument_list|(
literal|0
argument_list|)
operator|.
name|getContent
argument_list|()
argument_list|)
expr_stmt|;
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"testInMemoryNodeSequences 7: ========"
argument_list|)
expr_stmt|;
name|query
operator|=
literal|"let $c := (<a/>,<b/>) return<t>{<text/>,$c[1]}</t>"
expr_stmt|;
name|result
operator|=
name|service
operator|.
name|query
argument_list|(
name|query
argument_list|)
expr_stmt|;
name|printResult
argument_list|(
name|result
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"XQuery: "
operator|+
name|query
argument_list|,
literal|"<t>text<a/></t>"
argument_list|,
name|result
operator|.
name|getResource
argument_list|(
literal|0
argument_list|)
operator|.
name|getContent
argument_list|()
argument_list|)
expr_stmt|;
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"testInMemoryNodeSequences 8: ========"
argument_list|)
expr_stmt|;
name|query
operator|=
literal|"let $c := (<a/>,<b/>) return<t>{\"text\",$c[1]}</t>"
expr_stmt|;
name|result
operator|=
name|service
operator|.
name|query
argument_list|(
name|query
argument_list|)
expr_stmt|;
name|printResult
argument_list|(
name|result
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"XQuery: "
operator|+
name|query
argument_list|,
literal|"<t>text<a/></t>"
argument_list|,
name|result
operator|.
name|getResource
argument_list|(
literal|0
argument_list|)
operator|.
name|getContent
argument_list|()
argument_list|)
expr_stmt|;
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"testInMemoryNodeSequences 9: ========"
argument_list|)
expr_stmt|;
name|query
operator|=
literal|"let $c := (<a/>,\"b\") return<t>{<text/>,$c[1]}</t>"
expr_stmt|;
name|result
operator|=
name|service
operator|.
name|query
argument_list|(
name|query
argument_list|)
expr_stmt|;
name|printResult
argument_list|(
name|result
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"XQuery: "
operator|+
name|query
argument_list|,
literal|"<t>text<a/></t>"
argument_list|,
name|result
operator|.
name|getResource
argument_list|(
literal|0
argument_list|)
operator|.
name|getContent
argument_list|()
argument_list|)
expr_stmt|;
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"testInMemoryNodeSequences 10: ========"
argument_list|)
expr_stmt|;
name|query
operator|=
literal|"let $c := (<a/>,\"b\") return<t>{\"text\",$c[1]}</t>"
expr_stmt|;
name|result
operator|=
name|service
operator|.
name|query
argument_list|(
name|query
argument_list|)
expr_stmt|;
name|printResult
argument_list|(
name|result
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"XQuery: "
operator|+
name|query
argument_list|,
literal|"<t>text<a/></t>"
argument_list|,
name|result
operator|.
name|getResource
argument_list|(
literal|0
argument_list|)
operator|.
name|getContent
argument_list|()
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|XMLDBException
name|e
parameter_list|)
block|{
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"testInMemoryNodeSequences(): XMLDBException: "
operator|+
name|e
argument_list|)
expr_stmt|;
name|fail
argument_list|(
name|e
operator|.
name|getMessage
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
specifier|public
name|void
name|testVariable
parameter_list|()
block|{
name|ResourceSet
name|result
decl_stmt|;
name|String
name|query
decl_stmt|;
name|XMLResource
name|resu
decl_stmt|;
name|boolean
name|exceptionThrown
decl_stmt|;
name|String
name|message
decl_stmt|;
try|try
block|{
name|XPathQueryService
name|service
init|=
operator|(
name|XPathQueryService
operator|)
name|getTestCollection
argument_list|()
operator|.
name|getService
argument_list|(
literal|"XPathQueryService"
argument_list|,
literal|"1.0"
argument_list|)
decl_stmt|;
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"testVariable 1: ========"
argument_list|)
expr_stmt|;
name|query
operator|=
literal|"xquery version \"1.0\";\n"
operator|+
literal|"declare namespace param=\"param\";\n"
operator|+
literal|"declare variable $param:a {\"a\"};\n"
operator|+
literal|"declare function param:a() {$param:a};\n"
operator|+
literal|"let $param:a := \"b\" \n"
operator|+
literal|"return ($param:a, $param:a)"
expr_stmt|;
name|result
operator|=
name|service
operator|.
name|query
argument_list|(
name|query
argument_list|)
expr_stmt|;
name|printResult
argument_list|(
name|result
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"XQuery: "
operator|+
name|query
argument_list|,
literal|2
argument_list|,
name|result
operator|.
name|getSize
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"XQuery: "
operator|+
name|query
argument_list|,
literal|"b"
argument_list|,
operator|(
operator|(
name|XMLResource
operator|)
name|result
operator|.
name|getResource
argument_list|(
literal|0
argument_list|)
operator|)
operator|.
name|getContent
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"XQuery: "
operator|+
name|query
argument_list|,
literal|"b"
argument_list|,
operator|(
operator|(
name|XMLResource
operator|)
name|result
operator|.
name|getResource
argument_list|(
literal|1
argument_list|)
operator|)
operator|.
name|getContent
argument_list|()
argument_list|)
expr_stmt|;
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"testVariable 2: ========"
argument_list|)
expr_stmt|;
name|query
operator|=
literal|"xquery version \"1.0\";\n"
operator|+
literal|"declare namespace param=\"param\";\n"
operator|+
literal|"declare variable $param:a {\"a\"};\n"
operator|+
literal|"declare function param:a() {$param:a};\n"
operator|+
literal|"let $param:a := \"b\" \n"
operator|+
literal|"return param:a(), param:a()"
expr_stmt|;
name|result
operator|=
name|service
operator|.
name|query
argument_list|(
name|query
argument_list|)
expr_stmt|;
name|printResult
argument_list|(
name|result
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"XQuery: "
operator|+
name|query
argument_list|,
literal|2
argument_list|,
name|result
operator|.
name|getSize
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"XQuery: "
operator|+
name|query
argument_list|,
literal|"a"
argument_list|,
operator|(
operator|(
name|XMLResource
operator|)
name|result
operator|.
name|getResource
argument_list|(
literal|0
argument_list|)
operator|)
operator|.
name|getContent
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"XQuery: "
operator|+
name|query
argument_list|,
literal|"a"
argument_list|,
operator|(
operator|(
name|XMLResource
operator|)
name|result
operator|.
name|getResource
argument_list|(
literal|1
argument_list|)
operator|)
operator|.
name|getContent
argument_list|()
argument_list|)
expr_stmt|;
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"testVariable 3: ========"
argument_list|)
expr_stmt|;
name|query
operator|=
literal|"declare variable $foo {\"foo1\"};\n"
operator|+
literal|"let $foo := \"foo2\" \n"
operator|+
literal|"for $bar in (1 to 1) \n"
operator|+
literal|"  let $foo := \"foo3\" \n"
operator|+
literal|"  return $foo"
expr_stmt|;
name|result
operator|=
name|service
operator|.
name|query
argument_list|(
name|query
argument_list|)
expr_stmt|;
name|printResult
argument_list|(
name|result
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"XQuery: "
operator|+
name|query
argument_list|,
literal|1
argument_list|,
name|result
operator|.
name|getSize
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"XQuery: "
operator|+
name|query
argument_list|,
literal|"foo3"
argument_list|,
operator|(
operator|(
name|XMLResource
operator|)
name|result
operator|.
name|getResource
argument_list|(
literal|0
argument_list|)
operator|)
operator|.
name|getContent
argument_list|()
argument_list|)
expr_stmt|;
try|try
block|{
name|message
operator|=
literal|""
expr_stmt|;
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"testVariable 4 ========"
argument_list|)
expr_stmt|;
name|query
operator|=
literal|"xquery version \"1.0\";\n"
operator|+
literal|"declare variable $a {\"1st instance\"};\n"
operator|+
literal|"declare variable $a {\"2nd instance\"};\n"
operator|+
literal|"$a"
expr_stmt|;
name|result
operator|=
name|service
operator|.
name|query
argument_list|(
name|query
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|XMLDBException
name|e
parameter_list|)
block|{
name|message
operator|=
name|e
operator|.
name|getMessage
argument_list|()
expr_stmt|;
block|}
name|assertTrue
argument_list|(
name|message
operator|.
name|indexOf
argument_list|(
literal|"XQST0049"
argument_list|)
operator|>
operator|-
literal|1
argument_list|)
expr_stmt|;
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"testVariable 5: ========"
argument_list|)
expr_stmt|;
name|query
operator|=
literal|"xquery version \"1.0\";\n"
operator|+
literal|"declare namespace param=\"param\";\n"
operator|+
literal|"declare function param:f() { $param:a };\n"
operator|+
literal|"declare variable $param:a {\"a\"};\n"
operator|+
literal|"param:f()"
expr_stmt|;
name|result
operator|=
name|service
operator|.
name|query
argument_list|(
name|query
argument_list|)
expr_stmt|;
name|printResult
argument_list|(
name|result
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"XQuery: "
operator|+
name|query
argument_list|,
literal|1
argument_list|,
name|result
operator|.
name|getSize
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"XQuery: "
operator|+
name|query
argument_list|,
literal|"a"
argument_list|,
operator|(
operator|(
name|XMLResource
operator|)
name|result
operator|.
name|getResource
argument_list|(
literal|0
argument_list|)
operator|)
operator|.
name|getContent
argument_list|()
argument_list|)
expr_stmt|;
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"testVariable 6: ========"
argument_list|)
expr_stmt|;
name|query
operator|=
literal|"let $a :=<root> "
operator|+
literal|"<b name='1'>"
operator|+
literal|"<c name='x'> "
operator|+
literal|"<bar name='2'/> "
operator|+
literal|"<bar name='3'> "
operator|+
literal|"<bar name='4'/> "
operator|+
literal|"</bar> "
operator|+
literal|"</c> "
operator|+
literal|"</b> "
operator|+
literal|"</root> "
operator|+
literal|"let $b := for $bar in $a/b/c/bar "
operator|+
literal|"where ($bar/../@name = 'x') "
operator|+
literal|"return $bar "
operator|+
literal|"return $b"
expr_stmt|;
name|result
operator|=
name|service
operator|.
name|queryResource
argument_list|(
name|NUMBERS_XML
argument_list|,
name|query
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"XQuery: "
operator|+
name|query
argument_list|,
literal|2
argument_list|,
name|result
operator|.
name|getSize
argument_list|()
argument_list|)
expr_stmt|;
name|printResult
argument_list|(
name|result
argument_list|)
expr_stmt|;
name|resu
operator|=
operator|(
name|XMLResource
operator|)
name|result
operator|.
name|getResource
argument_list|(
literal|0
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"XQuery: "
operator|+
name|query
argument_list|,
literal|"2"
argument_list|,
operator|(
operator|(
name|Element
operator|)
name|resu
operator|.
name|getContentAsDOM
argument_list|()
operator|)
operator|.
name|getAttribute
argument_list|(
literal|"name"
argument_list|)
argument_list|)
expr_stmt|;
name|resu
operator|=
operator|(
name|XMLResource
operator|)
name|result
operator|.
name|getResource
argument_list|(
literal|1
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"XQuery: "
operator|+
name|query
argument_list|,
literal|"3"
argument_list|,
operator|(
operator|(
name|Element
operator|)
name|resu
operator|.
name|getContentAsDOM
argument_list|()
operator|)
operator|.
name|getAttribute
argument_list|(
literal|"name"
argument_list|)
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|XMLDBException
name|e
parameter_list|)
block|{
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"testVariable : XMLDBException: "
operator|+
name|e
argument_list|)
expr_stmt|;
name|fail
argument_list|(
name|e
operator|.
name|getMessage
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
specifier|public
name|void
name|testVirtualNodesets
parameter_list|()
block|{
name|ResourceSet
name|result
decl_stmt|;
name|String
name|query
decl_stmt|;
name|XMLResource
name|resu
decl_stmt|;
name|boolean
name|exceptionThrown
decl_stmt|;
name|String
name|message
decl_stmt|;
try|try
block|{
name|XPathQueryService
name|service
init|=
operator|(
name|XPathQueryService
operator|)
name|getTestCollection
argument_list|()
operator|.
name|getService
argument_list|(
literal|"XPathQueryService"
argument_list|,
literal|"1.0"
argument_list|)
decl_stmt|;
name|service
operator|.
name|setProperty
argument_list|(
name|OutputKeys
operator|.
name|INDENT
argument_list|,
literal|"no"
argument_list|)
expr_stmt|;
name|query
operator|=
literal|"let $node := (<c id='OK'><b id='cool'/></c>)/descendant::*/attribute::id "
operator|+
literal|"return<a>{$node}</a>"
expr_stmt|;
name|result
operator|=
name|service
operator|.
name|queryResource
argument_list|(
name|NUMBERS_XML
argument_list|,
name|query
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"XQuery: "
operator|+
name|query
argument_list|,
literal|1
argument_list|,
name|result
operator|.
name|getSize
argument_list|()
argument_list|)
expr_stmt|;
name|assertXMLEqual
argument_list|(
literal|"<a id='cool'/>"
argument_list|,
operator|(
operator|(
name|XMLResource
operator|)
name|result
operator|.
name|getResource
argument_list|(
literal|0
argument_list|)
operator|)
operator|.
name|getContent
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|query
operator|=
literal|"let $node := (<c id='OK'><b id='cool'/></c>)/descendant-or-self::*/child::b "
operator|+
literal|"return<a>{$node}</a>"
expr_stmt|;
name|result
operator|=
name|service
operator|.
name|queryResource
argument_list|(
name|NUMBERS_XML
argument_list|,
name|query
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"XQuery: "
operator|+
name|query
argument_list|,
literal|1
argument_list|,
name|result
operator|.
name|getSize
argument_list|()
argument_list|)
expr_stmt|;
name|assertXMLEqual
argument_list|(
literal|"<a><b id='cool'/></a>"
argument_list|,
operator|(
operator|(
name|XMLResource
operator|)
name|result
operator|.
name|getResource
argument_list|(
literal|0
argument_list|)
operator|)
operator|.
name|getContent
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|query
operator|=
literal|"let $node := (<c id='OK'><b id='cool'/></c>)/descendant-or-self::*/descendant::b "
operator|+
literal|"return<a>{$node}</a>"
expr_stmt|;
name|result
operator|=
name|service
operator|.
name|queryResource
argument_list|(
name|NUMBERS_XML
argument_list|,
name|query
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"XQuery: "
operator|+
name|query
argument_list|,
literal|1
argument_list|,
name|result
operator|.
name|getSize
argument_list|()
argument_list|)
expr_stmt|;
name|assertXMLEqual
argument_list|(
literal|"<a><b id='cool'/></a>"
argument_list|,
operator|(
operator|(
name|XMLResource
operator|)
name|result
operator|.
name|getResource
argument_list|(
literal|0
argument_list|)
operator|)
operator|.
name|getContent
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|query
operator|=
literal|"let $doc :=<a id='a'><b id='b'/></a> "
operator|+
literal|"return $doc/*/(<id>{@id}</id>)"
expr_stmt|;
name|result
operator|=
name|service
operator|.
name|queryResource
argument_list|(
name|NUMBERS_XML
argument_list|,
name|query
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"XQuery: "
operator|+
name|query
argument_list|,
literal|1
argument_list|,
name|result
operator|.
name|getSize
argument_list|()
argument_list|)
expr_stmt|;
name|assertXMLEqual
argument_list|(
literal|"<id id='b' />"
argument_list|,
operator|(
operator|(
name|XMLResource
operator|)
name|result
operator|.
name|getResource
argument_list|(
literal|0
argument_list|)
operator|)
operator|.
name|getContent
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"testVirtualNodesets : XMLDBException: "
operator|+
name|e
argument_list|)
expr_stmt|;
name|fail
argument_list|(
name|e
operator|.
name|getMessage
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
specifier|public
name|void
name|testWhereClause
parameter_list|()
block|{
name|ResourceSet
name|result
decl_stmt|;
name|String
name|query
decl_stmt|;
name|XMLResource
name|resu
decl_stmt|;
name|boolean
name|exceptionThrown
decl_stmt|;
name|String
name|message
decl_stmt|;
try|try
block|{
name|XPathQueryService
name|service
init|=
operator|(
name|XPathQueryService
operator|)
name|getTestCollection
argument_list|()
operator|.
name|getService
argument_list|(
literal|"XPathQueryService"
argument_list|,
literal|"1.0"
argument_list|)
decl_stmt|;
name|service
operator|.
name|setProperty
argument_list|(
name|OutputKeys
operator|.
name|INDENT
argument_list|,
literal|"no"
argument_list|)
expr_stmt|;
name|query
operator|=
literal|"let $a := element node1 { "
operator|+
literal|"attribute id {'id'}, "
operator|+
literal|"element node1 {'1'}, "
operator|+
literal|"element node2 {'2'} "
operator|+
literal|"} "
operator|+
literal|"for $x in $a "
operator|+
literal|"where $x/@id eq 'id' "
operator|+
literal|"return $x"
expr_stmt|;
name|result
operator|=
name|service
operator|.
name|queryResource
argument_list|(
name|NUMBERS_XML
argument_list|,
name|query
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"XQuery: "
operator|+
name|query
argument_list|,
literal|1
argument_list|,
name|result
operator|.
name|getSize
argument_list|()
argument_list|)
expr_stmt|;
name|assertXMLEqual
argument_list|(
literal|"<node1 id='id'><node1>1</node1><node2>2</node2></node1>"
argument_list|,
operator|(
operator|(
name|XMLResource
operator|)
name|result
operator|.
name|getResource
argument_list|(
literal|0
argument_list|)
operator|)
operator|.
name|getContent
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"testWhereClause : XMLDBException: "
operator|+
name|e
argument_list|)
expr_stmt|;
name|fail
argument_list|(
name|e
operator|.
name|getMessage
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
specifier|public
name|void
name|testTypedVariables
parameter_list|()
block|{
name|ResourceSet
name|result
decl_stmt|;
name|String
name|query
decl_stmt|;
name|boolean
name|exceptionThrown
decl_stmt|;
name|String
name|message
decl_stmt|;
try|try
block|{
name|XPathQueryService
name|service
init|=
name|storeXMLStringAndGetQueryService
argument_list|(
name|NUMBERS_XML
argument_list|,
name|numbers
argument_list|)
decl_stmt|;
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"testTypedVariables 1: ========"
argument_list|)
expr_stmt|;
name|query
operator|=
literal|"let $v as element()* := (<assign/> ,<assign/> )\n"
operator|+
literal|"let $w :=<r>{ $v }</r>\n"
operator|+
literal|"let $x as element()* := $w/assign\n"
operator|+
literal|"return $x"
expr_stmt|;
name|result
operator|=
name|service
operator|.
name|query
argument_list|(
name|query
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"XQuery: "
operator|+
name|query
argument_list|,
literal|2
argument_list|,
name|result
operator|.
name|getSize
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"XQuery: "
operator|+
name|query
argument_list|,
name|Node
operator|.
name|ELEMENT_NODE
argument_list|,
operator|(
operator|(
name|XMLResource
operator|)
name|result
operator|.
name|getResource
argument_list|(
literal|0
argument_list|)
operator|)
operator|.
name|getContentAsDOM
argument_list|()
operator|.
name|getNodeType
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"XQuery: "
operator|+
name|query
argument_list|,
literal|"assign"
argument_list|,
operator|(
operator|(
name|XMLResource
operator|)
name|result
operator|.
name|getResource
argument_list|(
literal|0
argument_list|)
operator|)
operator|.
name|getContentAsDOM
argument_list|()
operator|.
name|getNodeName
argument_list|()
argument_list|)
expr_stmt|;
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"testTypedVariables 2: ========"
argument_list|)
expr_stmt|;
name|query
operator|=
literal|"let $v as node()* := ()\n"
operator|+
literal|"return $v"
expr_stmt|;
name|result
operator|=
name|service
operator|.
name|query
argument_list|(
name|query
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"XQuery: "
operator|+
name|query
argument_list|,
literal|0
argument_list|,
name|result
operator|.
name|getSize
argument_list|()
argument_list|)
expr_stmt|;
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"testTypedVariables 3: ========"
argument_list|)
expr_stmt|;
name|query
operator|=
literal|"let $v as item()* := ()\n"
operator|+
literal|"return $v"
expr_stmt|;
name|result
operator|=
name|service
operator|.
name|query
argument_list|(
name|query
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"XQuery: "
operator|+
name|query
argument_list|,
literal|0
argument_list|,
name|result
operator|.
name|getSize
argument_list|()
argument_list|)
expr_stmt|;
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"testTypedVariables 4: ========"
argument_list|)
expr_stmt|;
name|query
operator|=
literal|"let $v as empty() := ()\n"
operator|+
literal|"return $v"
expr_stmt|;
name|result
operator|=
name|service
operator|.
name|query
argument_list|(
name|query
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"XQuery: "
operator|+
name|query
argument_list|,
literal|0
argument_list|,
name|result
operator|.
name|getSize
argument_list|()
argument_list|)
expr_stmt|;
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"testTypedVariables 5: ========"
argument_list|)
expr_stmt|;
name|query
operator|=
literal|"let $v as item() := ()\n"
operator|+
literal|"return $v"
expr_stmt|;
try|try
block|{
name|exceptionThrown
operator|=
literal|false
expr_stmt|;
name|result
operator|=
name|service
operator|.
name|query
argument_list|(
name|query
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|XMLDBException
name|e
parameter_list|)
block|{
name|exceptionThrown
operator|=
literal|true
expr_stmt|;
name|message
operator|=
name|e
operator|.
name|getMessage
argument_list|()
expr_stmt|;
block|}
name|assertTrue
argument_list|(
literal|"XQuery: "
operator|+
name|query
argument_list|,
name|exceptionThrown
argument_list|)
expr_stmt|;
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"testTypedVariables 6: ========"
argument_list|)
expr_stmt|;
name|query
operator|=
literal|"let $v as item()* := (<a/> , 1 )\n"
operator|+
literal|"return $v"
expr_stmt|;
name|result
operator|=
name|service
operator|.
name|query
argument_list|(
name|query
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"XQuery: "
operator|+
name|query
argument_list|,
literal|2
argument_list|,
name|result
operator|.
name|getSize
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"XQuery: "
operator|+
name|query
argument_list|,
name|Node
operator|.
name|ELEMENT_NODE
argument_list|,
operator|(
operator|(
name|XMLResource
operator|)
name|result
operator|.
name|getResource
argument_list|(
literal|0
argument_list|)
operator|)
operator|.
name|getContentAsDOM
argument_list|()
operator|.
name|getNodeType
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"XQuery: "
operator|+
name|query
argument_list|,
literal|"a"
argument_list|,
operator|(
operator|(
name|XMLResource
operator|)
name|result
operator|.
name|getResource
argument_list|(
literal|0
argument_list|)
operator|)
operator|.
name|getContentAsDOM
argument_list|()
operator|.
name|getNodeName
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"XQuery: "
operator|+
name|query
argument_list|,
literal|"1"
argument_list|,
operator|(
operator|(
name|XMLResource
operator|)
name|result
operator|.
name|getResource
argument_list|(
literal|1
argument_list|)
operator|)
operator|.
name|getContent
argument_list|()
argument_list|)
expr_stmt|;
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"testTypedVariables 7: ========"
argument_list|)
expr_stmt|;
name|query
operator|=
literal|"let $v as node()* := (<a/> , 1 )\n"
operator|+
literal|"return $v"
expr_stmt|;
try|try
block|{
name|exceptionThrown
operator|=
literal|false
expr_stmt|;
name|result
operator|=
name|service
operator|.
name|query
argument_list|(
name|query
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|XMLDBException
name|e
parameter_list|)
block|{
name|exceptionThrown
operator|=
literal|true
expr_stmt|;
name|message
operator|=
name|e
operator|.
name|getMessage
argument_list|()
expr_stmt|;
block|}
name|assertTrue
argument_list|(
name|exceptionThrown
argument_list|)
expr_stmt|;
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"testTypedVariables 8: ========"
argument_list|)
expr_stmt|;
name|query
operator|=
literal|"let $v as item()* := (<a/> , 1 )\n"
operator|+
literal|"let $w as element()* := $v\n"
operator|+
literal|"return $w"
expr_stmt|;
try|try
block|{
name|exceptionThrown
operator|=
literal|false
expr_stmt|;
name|result
operator|=
name|service
operator|.
name|query
argument_list|(
name|query
argument_list|)
expr_stmt|;
name|result
operator|=
name|service
operator|.
name|query
argument_list|(
name|query
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|XMLDBException
name|e
parameter_list|)
block|{
name|exceptionThrown
operator|=
literal|true
expr_stmt|;
name|message
operator|=
name|e
operator|.
name|getMessage
argument_list|()
expr_stmt|;
block|}
name|assertTrue
argument_list|(
name|exceptionThrown
argument_list|)
expr_stmt|;
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"testTypedVariables 9: ========"
argument_list|)
expr_stmt|;
name|query
operator|=
literal|"declare variable $v as element()* {(<assign/> ,<assign/> ) };\n"
operator|+
literal|"declare variable $w {<r>{ $v }</r> };\n"
operator|+
literal|"declare variable $x as element()* { $w/assign };\n"
operator|+
literal|"$x"
expr_stmt|;
name|result
operator|=
name|service
operator|.
name|query
argument_list|(
name|query
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"XQuery: "
operator|+
name|query
argument_list|,
literal|2
argument_list|,
name|result
operator|.
name|getSize
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"XQuery: "
operator|+
name|query
argument_list|,
name|Node
operator|.
name|ELEMENT_NODE
argument_list|,
operator|(
operator|(
name|XMLResource
operator|)
name|result
operator|.
name|getResource
argument_list|(
literal|0
argument_list|)
operator|)
operator|.
name|getContentAsDOM
argument_list|()
operator|.
name|getNodeType
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"XQuery: "
operator|+
name|query
argument_list|,
literal|"assign"
argument_list|,
operator|(
operator|(
name|XMLResource
operator|)
name|result
operator|.
name|getResource
argument_list|(
literal|0
argument_list|)
operator|)
operator|.
name|getContentAsDOM
argument_list|()
operator|.
name|getNodeName
argument_list|()
argument_list|)
expr_stmt|;
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"testTypedVariables 10: ========"
argument_list|)
expr_stmt|;
name|query
operator|=
literal|"declare variable $v as node()* { () };\n"
operator|+
literal|"$v"
expr_stmt|;
name|result
operator|=
name|service
operator|.
name|query
argument_list|(
name|query
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"XQuery: "
operator|+
name|query
argument_list|,
literal|0
argument_list|,
name|result
operator|.
name|getSize
argument_list|()
argument_list|)
expr_stmt|;
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"testTypedVariables 11: ========"
argument_list|)
expr_stmt|;
name|query
operator|=
literal|"declare variable $v as item()* { () };\n"
operator|+
literal|"$v"
expr_stmt|;
name|result
operator|=
name|service
operator|.
name|query
argument_list|(
name|query
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"XQuery: "
operator|+
name|query
argument_list|,
literal|0
argument_list|,
name|result
operator|.
name|getSize
argument_list|()
argument_list|)
expr_stmt|;
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"testTypedVariables 12: ========"
argument_list|)
expr_stmt|;
name|query
operator|=
literal|"declare variable $v as empty() { () };\n"
operator|+
literal|"$v"
expr_stmt|;
name|result
operator|=
name|service
operator|.
name|query
argument_list|(
name|query
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"XQuery: "
operator|+
name|query
argument_list|,
literal|0
argument_list|,
name|result
operator|.
name|getSize
argument_list|()
argument_list|)
expr_stmt|;
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"testTypedVariables 13: ========"
argument_list|)
expr_stmt|;
name|query
operator|=
literal|"declare variable $v as item() { () };\n"
operator|+
literal|"$v"
expr_stmt|;
try|try
block|{
name|exceptionThrown
operator|=
literal|false
expr_stmt|;
name|result
operator|=
name|service
operator|.
name|query
argument_list|(
name|query
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|XMLDBException
name|e
parameter_list|)
block|{
name|exceptionThrown
operator|=
literal|true
expr_stmt|;
name|message
operator|=
name|e
operator|.
name|getMessage
argument_list|()
expr_stmt|;
block|}
name|assertTrue
argument_list|(
literal|"XQuery: "
operator|+
name|query
argument_list|,
name|exceptionThrown
argument_list|)
expr_stmt|;
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"testTypedVariables 14: ========"
argument_list|)
expr_stmt|;
name|query
operator|=
literal|"declare variable $v as item()* { (<a/> , 1 ) }; \n"
operator|+
literal|"$v"
expr_stmt|;
name|result
operator|=
name|service
operator|.
name|query
argument_list|(
name|query
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"XQuery: "
operator|+
name|query
argument_list|,
literal|2
argument_list|,
name|result
operator|.
name|getSize
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"XQuery: "
operator|+
name|query
argument_list|,
name|Node
operator|.
name|ELEMENT_NODE
argument_list|,
operator|(
operator|(
name|XMLResource
operator|)
name|result
operator|.
name|getResource
argument_list|(
literal|0
argument_list|)
operator|)
operator|.
name|getContentAsDOM
argument_list|()
operator|.
name|getNodeType
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"XQuery: "
operator|+
name|query
argument_list|,
literal|"a"
argument_list|,
operator|(
operator|(
name|XMLResource
operator|)
name|result
operator|.
name|getResource
argument_list|(
literal|0
argument_list|)
operator|)
operator|.
name|getContentAsDOM
argument_list|()
operator|.
name|getNodeName
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"XQuery: "
operator|+
name|query
argument_list|,
literal|"1"
argument_list|,
operator|(
operator|(
name|XMLResource
operator|)
name|result
operator|.
name|getResource
argument_list|(
literal|1
argument_list|)
operator|)
operator|.
name|getContent
argument_list|()
argument_list|)
expr_stmt|;
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"testTypedVariables 15: ========"
argument_list|)
expr_stmt|;
name|query
operator|=
literal|"declare variable $v as node()* { (<a/> , 1 ) };\n"
operator|+
literal|"$v"
expr_stmt|;
try|try
block|{
name|exceptionThrown
operator|=
literal|false
expr_stmt|;
name|result
operator|=
name|service
operator|.
name|query
argument_list|(
name|query
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|XMLDBException
name|e
parameter_list|)
block|{
name|exceptionThrown
operator|=
literal|true
expr_stmt|;
name|message
operator|=
name|e
operator|.
name|getMessage
argument_list|()
expr_stmt|;
block|}
name|assertTrue
argument_list|(
name|exceptionThrown
argument_list|)
expr_stmt|;
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"testTypedVariables 16: ========"
argument_list|)
expr_stmt|;
name|query
operator|=
literal|"declare variable $v as item()* { (<a/> , 1 ) };\n"
operator|+
literal|"declare variable $w as element()* { $v };\n"
operator|+
literal|"$w"
expr_stmt|;
try|try
block|{
name|exceptionThrown
operator|=
literal|false
expr_stmt|;
name|result
operator|=
name|service
operator|.
name|query
argument_list|(
name|query
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|XMLDBException
name|e
parameter_list|)
block|{
name|exceptionThrown
operator|=
literal|true
expr_stmt|;
name|message
operator|=
name|e
operator|.
name|getMessage
argument_list|()
expr_stmt|;
block|}
name|assertTrue
argument_list|(
name|exceptionThrown
argument_list|)
expr_stmt|;
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"testTypedVariables 15: ========"
argument_list|)
expr_stmt|;
name|query
operator|=
literal|"let $v as document-node() :=  doc('"
operator|+
name|DBBroker
operator|.
name|ROOT_COLLECTION
operator|+
literal|"/test/"
operator|+
name|NUMBERS_XML
operator|+
literal|"') \n"
operator|+
literal|"return $v"
expr_stmt|;
name|result
operator|=
name|service
operator|.
name|query
argument_list|(
name|query
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"XQuery: "
operator|+
name|query
argument_list|,
literal|1
argument_list|,
name|result
operator|.
name|getSize
argument_list|()
argument_list|)
expr_stmt|;
comment|//TODO : no way to test the node type ?
comment|//assertEquals( "XQuery: " + query, Node.DOCUMENT_NODE, ((XMLResource)result.getResource(0)));
name|assertEquals
argument_list|(
literal|"XQuery: "
operator|+
name|query
argument_list|,
literal|"test"
argument_list|,
operator|(
operator|(
name|XMLResource
operator|)
name|result
operator|.
name|getResource
argument_list|(
literal|0
argument_list|)
operator|)
operator|.
name|getContentAsDOM
argument_list|()
operator|.
name|getNodeName
argument_list|()
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|XMLDBException
name|e
parameter_list|)
block|{
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"testTypedVariables : XMLDBException: "
operator|+
name|e
argument_list|)
expr_stmt|;
name|fail
argument_list|(
name|e
operator|.
name|getMessage
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
specifier|public
name|void
name|testPrecedence
parameter_list|()
block|{
name|ResourceSet
name|result
decl_stmt|;
name|String
name|query
decl_stmt|;
name|boolean
name|exceptionThrown
decl_stmt|;
name|String
name|message
decl_stmt|;
try|try
block|{
name|XPathQueryService
name|service
init|=
name|storeXMLStringAndGetQueryService
argument_list|(
name|NUMBERS_XML
argument_list|,
name|numbers
argument_list|)
decl_stmt|;
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"testPrecedence 1: ========"
argument_list|)
expr_stmt|;
name|query
operator|=
literal|"xquery version \"1.0\";\n"
operator|+
literal|"declare namespace blah=\"blah\";\n"
operator|+
literal|"declare variable $blah:param  {\"value-1\"};\n"
operator|+
literal|"let $blah:param := \"value-2\"\n"
operator|+
literal|"(:: FLWOR expressions have a higher precedence than the comma operator ::)\n"
operator|+
literal|"return $blah:param, $blah:param "
expr_stmt|;
name|result
operator|=
name|service
operator|.
name|query
argument_list|(
name|query
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"XQuery: "
operator|+
name|query
argument_list|,
literal|2
argument_list|,
name|result
operator|.
name|getSize
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"XQuery: "
operator|+
name|query
argument_list|,
literal|"value-2"
argument_list|,
operator|(
operator|(
name|XMLResource
operator|)
name|result
operator|.
name|getResource
argument_list|(
literal|0
argument_list|)
operator|)
operator|.
name|getContent
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"XQuery: "
operator|+
name|query
argument_list|,
literal|"value-1"
argument_list|,
operator|(
operator|(
name|XMLResource
operator|)
name|result
operator|.
name|getResource
argument_list|(
literal|1
argument_list|)
operator|)
operator|.
name|getContent
argument_list|()
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|XMLDBException
name|e
parameter_list|)
block|{
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"testTypedVariables : XMLDBException: "
operator|+
name|e
argument_list|)
expr_stmt|;
name|fail
argument_list|(
name|e
operator|.
name|getMessage
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
specifier|public
name|void
name|testImprobableAxesAndNodeTestsCombinations
parameter_list|()
block|{
name|ResourceSet
name|result
decl_stmt|;
name|String
name|query
decl_stmt|;
name|boolean
name|exceptionThrown
decl_stmt|;
name|String
name|message
decl_stmt|;
try|try
block|{
name|XPathQueryService
name|service
init|=
name|storeXMLStringAndGetQueryService
argument_list|(
name|NUMBERS_XML
argument_list|,
name|numbers
argument_list|)
decl_stmt|;
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"testImprobableAxesAndNodeTestsCombinations 1: ========"
argument_list|)
expr_stmt|;
name|query
operator|=
literal|"let $a :=<x>a<!--b-->c</x>/self::comment() return<z>{$a}</z>"
expr_stmt|;
name|result
operator|=
name|service
operator|.
name|query
argument_list|(
name|query
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"XQuery: "
operator|+
name|query
argument_list|,
literal|1
argument_list|,
name|result
operator|.
name|getSize
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"XQuery: "
operator|+
name|query
argument_list|,
literal|"<z/>"
argument_list|,
operator|(
operator|(
name|XMLResource
operator|)
name|result
operator|.
name|getResource
argument_list|(
literal|0
argument_list|)
operator|)
operator|.
name|getContent
argument_list|()
argument_list|)
expr_stmt|;
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"testImprobableAxesAndNodeTestsCombinations 2: ========"
argument_list|)
expr_stmt|;
name|query
operator|=
literal|"let $a :=<x>a<!--b-->c</x>/parent::comment() return<z>{$a}</z>"
expr_stmt|;
name|result
operator|=
name|service
operator|.
name|query
argument_list|(
name|query
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"XQuery: "
operator|+
name|query
argument_list|,
literal|1
argument_list|,
name|result
operator|.
name|getSize
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"XQuery: "
operator|+
name|query
argument_list|,
literal|"<z/>"
argument_list|,
operator|(
operator|(
name|XMLResource
operator|)
name|result
operator|.
name|getResource
argument_list|(
literal|0
argument_list|)
operator|)
operator|.
name|getContent
argument_list|()
argument_list|)
expr_stmt|;
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"testImprobableAxesAndNodeTestsCombinations 3: ========"
argument_list|)
expr_stmt|;
name|query
operator|=
literal|"let $a :=<x>a<!--b-->c</x>/ancestor::comment() return<z>{$a}</z>"
expr_stmt|;
name|result
operator|=
name|service
operator|.
name|query
argument_list|(
name|query
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"XQuery: "
operator|+
name|query
argument_list|,
literal|1
argument_list|,
name|result
operator|.
name|getSize
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"XQuery: "
operator|+
name|query
argument_list|,
literal|"<z/>"
argument_list|,
operator|(
operator|(
name|XMLResource
operator|)
name|result
operator|.
name|getResource
argument_list|(
literal|0
argument_list|)
operator|)
operator|.
name|getContent
argument_list|()
argument_list|)
expr_stmt|;
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"testImprobableAxesAndNodeTestsCombinations 4: ========"
argument_list|)
expr_stmt|;
name|query
operator|=
literal|"let $a :=<x>a<!--b-->c</x>/ancestor-or-self::comment() return<z>{$a}</z>"
expr_stmt|;
name|result
operator|=
name|service
operator|.
name|query
argument_list|(
name|query
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"XQuery: "
operator|+
name|query
argument_list|,
literal|1
argument_list|,
name|result
operator|.
name|getSize
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"XQuery: "
operator|+
name|query
argument_list|,
literal|"<z/>"
argument_list|,
operator|(
operator|(
name|XMLResource
operator|)
name|result
operator|.
name|getResource
argument_list|(
literal|0
argument_list|)
operator|)
operator|.
name|getContent
argument_list|()
argument_list|)
expr_stmt|;
comment|//			This one is intercepted by the parser
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"testImprobableAxesAndNodeTestsCombinations 5: ========"
argument_list|)
expr_stmt|;
name|query
operator|=
literal|"let $a :=<x>a<!--b-->c</x>/attribute::comment() return<z>{$a}</z>"
expr_stmt|;
try|try
block|{
name|exceptionThrown
operator|=
literal|false
expr_stmt|;
name|result
operator|=
name|service
operator|.
name|query
argument_list|(
name|query
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|XMLDBException
name|e
parameter_list|)
block|{
name|exceptionThrown
operator|=
literal|true
expr_stmt|;
name|message
operator|=
name|e
operator|.
name|getMessage
argument_list|()
expr_stmt|;
block|}
name|assertTrue
argument_list|(
name|exceptionThrown
argument_list|)
expr_stmt|;
comment|//			This one is intercepted by the parser
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"testImprobableAxesAndNodeTestsCombinations 6: ========"
argument_list|)
expr_stmt|;
name|query
operator|=
literal|"let $a :=<x>a<!--b-->c</x>/namespace::comment() return<z>{$a}</z>"
expr_stmt|;
try|try
block|{
name|exceptionThrown
operator|=
literal|false
expr_stmt|;
name|result
operator|=
name|service
operator|.
name|query
argument_list|(
name|query
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|XMLDBException
name|e
parameter_list|)
block|{
name|exceptionThrown
operator|=
literal|true
expr_stmt|;
name|message
operator|=
name|e
operator|.
name|getMessage
argument_list|()
expr_stmt|;
block|}
name|assertTrue
argument_list|(
name|exceptionThrown
argument_list|)
expr_stmt|;
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"testImprobableAxesAndNodeTestsCombinations 7: ========"
argument_list|)
expr_stmt|;
name|query
operator|=
literal|"let $a :=<x>a<!--b-->c</x>/self::attribute() return<z>{$a}</z>"
expr_stmt|;
name|result
operator|=
name|service
operator|.
name|query
argument_list|(
name|query
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"XQuery: "
operator|+
name|query
argument_list|,
literal|1
argument_list|,
name|result
operator|.
name|getSize
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"XQuery: "
operator|+
name|query
argument_list|,
literal|"<z/>"
argument_list|,
operator|(
operator|(
name|XMLResource
operator|)
name|result
operator|.
name|getResource
argument_list|(
literal|0
argument_list|)
operator|)
operator|.
name|getContent
argument_list|()
argument_list|)
expr_stmt|;
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"testImprobableAxesAndNodeTestsCombinations 8: ========"
argument_list|)
expr_stmt|;
name|query
operator|=
literal|"let $a :=<x>a<!--b-->c</x>/parent::attribute() return<z>{$a}</z>"
expr_stmt|;
name|result
operator|=
name|service
operator|.
name|query
argument_list|(
name|query
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"XQuery: "
operator|+
name|query
argument_list|,
literal|1
argument_list|,
name|result
operator|.
name|getSize
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"XQuery: "
operator|+
name|query
argument_list|,
literal|"<z/>"
argument_list|,
operator|(
operator|(
name|XMLResource
operator|)
name|result
operator|.
name|getResource
argument_list|(
literal|0
argument_list|)
operator|)
operator|.
name|getContent
argument_list|()
argument_list|)
expr_stmt|;
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"testImprobableAxesAndNodeTestsCombinations 9: ========"
argument_list|)
expr_stmt|;
name|query
operator|=
literal|"let $a :=<x>a<!--b-->c</x>/ancestor::attribute() return<z>{$a}</z>"
expr_stmt|;
name|result
operator|=
name|service
operator|.
name|query
argument_list|(
name|query
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"XQuery: "
operator|+
name|query
argument_list|,
literal|1
argument_list|,
name|result
operator|.
name|getSize
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"XQuery: "
operator|+
name|query
argument_list|,
literal|"<z/>"
argument_list|,
operator|(
operator|(
name|XMLResource
operator|)
name|result
operator|.
name|getResource
argument_list|(
literal|0
argument_list|)
operator|)
operator|.
name|getContent
argument_list|()
argument_list|)
expr_stmt|;
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"testImprobableAxesAndNodeTestsCombinations 10: ========"
argument_list|)
expr_stmt|;
name|query
operator|=
literal|"let $a :=<x>a<!--b-->c</x>/ancestor-or-self::attribute() return<z>{$a}</z>"
expr_stmt|;
name|result
operator|=
name|service
operator|.
name|query
argument_list|(
name|query
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"XQuery: "
operator|+
name|query
argument_list|,
literal|1
argument_list|,
name|result
operator|.
name|getSize
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"XQuery: "
operator|+
name|query
argument_list|,
literal|"<z/>"
argument_list|,
operator|(
operator|(
name|XMLResource
operator|)
name|result
operator|.
name|getResource
argument_list|(
literal|0
argument_list|)
operator|)
operator|.
name|getContent
argument_list|()
argument_list|)
expr_stmt|;
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"testImprobableAxesAndNodeTestsCombinations 11: ========"
argument_list|)
expr_stmt|;
name|query
operator|=
literal|"let $a :=<x>a<!--b-->c</x>/child::attribute() return<z>{$a}</z>"
expr_stmt|;
name|result
operator|=
name|service
operator|.
name|query
argument_list|(
name|query
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"XQuery: "
operator|+
name|query
argument_list|,
literal|1
argument_list|,
name|result
operator|.
name|getSize
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"XQuery: "
operator|+
name|query
argument_list|,
literal|"<z/>"
argument_list|,
operator|(
operator|(
name|XMLResource
operator|)
name|result
operator|.
name|getResource
argument_list|(
literal|0
argument_list|)
operator|)
operator|.
name|getContent
argument_list|()
argument_list|)
expr_stmt|;
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"testImprobableAxesAndNodeTestsCombinations 12: ========"
argument_list|)
expr_stmt|;
name|query
operator|=
literal|"let $a :=<x>a<!--b-->c</x>/descendant::attribute() return<z>{$a}</z>"
expr_stmt|;
name|result
operator|=
name|service
operator|.
name|query
argument_list|(
name|query
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"XQuery: "
operator|+
name|query
argument_list|,
literal|1
argument_list|,
name|result
operator|.
name|getSize
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"XQuery: "
operator|+
name|query
argument_list|,
literal|"<z/>"
argument_list|,
operator|(
operator|(
name|XMLResource
operator|)
name|result
operator|.
name|getResource
argument_list|(
literal|0
argument_list|)
operator|)
operator|.
name|getContent
argument_list|()
argument_list|)
expr_stmt|;
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"testImprobableAxesAndNodeTestsCombinations 13: ========"
argument_list|)
expr_stmt|;
name|query
operator|=
literal|"let $a :=<x>a<!--b-->c</x>/descendant-or-self::attribute() return<z>{$a}</z>"
expr_stmt|;
name|result
operator|=
name|service
operator|.
name|query
argument_list|(
name|query
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"XQuery: "
operator|+
name|query
argument_list|,
literal|1
argument_list|,
name|result
operator|.
name|getSize
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"XQuery: "
operator|+
name|query
argument_list|,
literal|"<z/>"
argument_list|,
operator|(
operator|(
name|XMLResource
operator|)
name|result
operator|.
name|getResource
argument_list|(
literal|0
argument_list|)
operator|)
operator|.
name|getContent
argument_list|()
argument_list|)
expr_stmt|;
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"testImprobableAxesAndNodeTestsCombinations 14: ========"
argument_list|)
expr_stmt|;
name|query
operator|=
literal|"let $a :=<x>a<!--b-->c</x>/preceding::attribute() return<z>{$a}</z>"
expr_stmt|;
name|result
operator|=
name|service
operator|.
name|query
argument_list|(
name|query
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"XQuery: "
operator|+
name|query
argument_list|,
literal|1
argument_list|,
name|result
operator|.
name|getSize
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"XQuery: "
operator|+
name|query
argument_list|,
literal|"<z/>"
argument_list|,
operator|(
operator|(
name|XMLResource
operator|)
name|result
operator|.
name|getResource
argument_list|(
literal|0
argument_list|)
operator|)
operator|.
name|getContent
argument_list|()
argument_list|)
expr_stmt|;
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"testImprobableAxesAndNodeTestsCombinations 15: ========"
argument_list|)
expr_stmt|;
name|query
operator|=
literal|"let $a :=<x>a<!--b-->c</x>/preceding-sibling::attribute() return<z>{$a}</z>"
expr_stmt|;
name|result
operator|=
name|service
operator|.
name|query
argument_list|(
name|query
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"XQuery: "
operator|+
name|query
argument_list|,
literal|1
argument_list|,
name|result
operator|.
name|getSize
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"XQuery: "
operator|+
name|query
argument_list|,
literal|"<z/>"
argument_list|,
operator|(
operator|(
name|XMLResource
operator|)
name|result
operator|.
name|getResource
argument_list|(
literal|0
argument_list|)
operator|)
operator|.
name|getContent
argument_list|()
argument_list|)
expr_stmt|;
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"testImprobableAxesAndNodeTestsCombinations 16: ========"
argument_list|)
expr_stmt|;
name|query
operator|=
literal|"let $a :=<x>a<!--b-->c</x>/following::attribute() return<z>{$a}</z>"
expr_stmt|;
name|result
operator|=
name|service
operator|.
name|query
argument_list|(
name|query
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"XQuery: "
operator|+
name|query
argument_list|,
literal|1
argument_list|,
name|result
operator|.
name|getSize
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"XQuery: "
operator|+
name|query
argument_list|,
literal|"<z/>"
argument_list|,
operator|(
operator|(
name|XMLResource
operator|)
name|result
operator|.
name|getResource
argument_list|(
literal|0
argument_list|)
operator|)
operator|.
name|getContent
argument_list|()
argument_list|)
expr_stmt|;
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"testImprobableAxesAndNodeTestsCombinations 17: ========"
argument_list|)
expr_stmt|;
name|query
operator|=
literal|"let $a :=<x>a<!--b-->c</x>/following-sibling::attribute() return<z>{$a}</z>"
expr_stmt|;
name|result
operator|=
name|service
operator|.
name|query
argument_list|(
name|query
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"XQuery: "
operator|+
name|query
argument_list|,
literal|1
argument_list|,
name|result
operator|.
name|getSize
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"XQuery: "
operator|+
name|query
argument_list|,
literal|"<z/>"
argument_list|,
operator|(
operator|(
name|XMLResource
operator|)
name|result
operator|.
name|getResource
argument_list|(
literal|0
argument_list|)
operator|)
operator|.
name|getContent
argument_list|()
argument_list|)
expr_stmt|;
comment|//			This one is intercepted by the parser
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"testImprobableAxesAndNodeTestsCombinations 18: ========"
argument_list|)
expr_stmt|;
name|query
operator|=
literal|"let $a :=<x>a<!--b-->c</x>/namespace::attribute() return<z>{$a}</z>"
expr_stmt|;
try|try
block|{
name|exceptionThrown
operator|=
literal|false
expr_stmt|;
name|result
operator|=
name|service
operator|.
name|query
argument_list|(
name|query
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|XMLDBException
name|e
parameter_list|)
block|{
name|exceptionThrown
operator|=
literal|true
expr_stmt|;
name|message
operator|=
name|e
operator|.
name|getMessage
argument_list|()
expr_stmt|;
block|}
name|assertTrue
argument_list|(
name|exceptionThrown
argument_list|)
expr_stmt|;
comment|//TODO : uncomment when PI are OK
comment|/* 			System.out.println("testImprobableAxesAndNodeTestsCombinations 19: ========" ); 			query = "let $a :=<x>a<?foo ?>c</x>/self::processing-instruction('foo') return<z>{$a}</z>"; 			result = service.query(query);				 			assertEquals( "XQuery: " + query, 1, result.getSize() ); 			assertEquals( "XQuery: " + query, "<z/>", ((XMLResource)result.getResource(0)).getContent());  			System.out.println("testImprobableAxesAndNodeTestsCombinations 20: ========" ); 			query = "let $a :=<x>a<?foo ?>c</x>/parent::processing-instruction('foo') return<z>{$a}</z>"; 			result = service.query(query);				 			assertEquals( "XQuery: " + query, 1, result.getSize() ); 			assertEquals( "XQuery: " + query, "<z/>", ((XMLResource)result.getResource(0)).getContent());	 			 			System.out.println("testImprobableAxesAndNodeTestsCombinations 21: ========" ); 			query = "let $a :=<x>a<?foo ?>c</x>/ancestor::processing-instruction('foo') return<z>{$a}</z>"; 			result = service.query(query);				 			assertEquals( "XQuery: " + query, 1, result.getSize() ); 			assertEquals( "XQuery: " + query, "<z/>", ((XMLResource)result.getResource(0)).getContent()); 			 			System.out.println("testImprobableAxesAndNodeTestsCombinations 22: ========" ); 			query = "let $a :=<x>a<?foo ?>c</x>/ancestor-or-self::processing-instruction('foo') return<z>{$a}</z>"; 			result = service.query(query);				 			assertEquals( "XQuery: " + query, 1, result.getSize() ); 			assertEquals( "XQuery: " + query, "<z/>", ((XMLResource)result.getResource(0)).getContent());	 			*/
comment|//			This one is intercepted by the parser
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"testImprobableAxesAndNodeTestsCombinations 23: ========"
argument_list|)
expr_stmt|;
name|query
operator|=
literal|"let $a :=<x>a<?foo ?>c</x>/attribute::processing-instruction('foo') return<z>{$a}</z>"
expr_stmt|;
try|try
block|{
name|exceptionThrown
operator|=
literal|false
expr_stmt|;
name|result
operator|=
name|service
operator|.
name|query
argument_list|(
name|query
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|XMLDBException
name|e
parameter_list|)
block|{
name|exceptionThrown
operator|=
literal|true
expr_stmt|;
name|message
operator|=
name|e
operator|.
name|getMessage
argument_list|()
expr_stmt|;
block|}
name|assertTrue
argument_list|(
name|exceptionThrown
argument_list|)
expr_stmt|;
comment|//			This one is intercepted by the parser
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"testImprobableAxesAndNodeTestsCombinations 24: ========"
argument_list|)
expr_stmt|;
name|query
operator|=
literal|"let $a :=<x>a<?foo ?>c</x>/namespace::processing-instruction('foo') return<z>{$a}</z>"
expr_stmt|;
try|try
block|{
name|exceptionThrown
operator|=
literal|false
expr_stmt|;
name|result
operator|=
name|service
operator|.
name|query
argument_list|(
name|query
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|XMLDBException
name|e
parameter_list|)
block|{
name|exceptionThrown
operator|=
literal|true
expr_stmt|;
name|message
operator|=
name|e
operator|.
name|getMessage
argument_list|()
expr_stmt|;
block|}
name|assertTrue
argument_list|(
name|exceptionThrown
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|XMLDBException
name|e
parameter_list|)
block|{
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"testTypedVariables : XMLDBException: "
operator|+
name|e
argument_list|)
expr_stmt|;
name|e
operator|.
name|printStackTrace
argument_list|()
expr_stmt|;
name|fail
argument_list|(
name|e
operator|.
name|getMessage
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
specifier|public
name|void
name|testNamespace
parameter_list|()
block|{
name|Resource
name|doc
decl_stmt|;
name|ResourceSet
name|result
decl_stmt|;
name|String
name|query
decl_stmt|;
name|XMLResource
name|resu
decl_stmt|;
name|boolean
name|exceptionThrown
decl_stmt|;
name|String
name|message
decl_stmt|;
try|try
block|{
name|Collection
name|testCollection
init|=
name|getTestCollection
argument_list|()
decl_stmt|;
name|doc
operator|=
name|testCollection
operator|.
name|createResource
argument_list|(
name|MODULE1_NAME
argument_list|,
literal|"BinaryResource"
argument_list|)
expr_stmt|;
name|doc
operator|.
name|setContent
argument_list|(
name|module1
argument_list|)
expr_stmt|;
operator|(
operator|(
name|EXistResource
operator|)
name|doc
operator|)
operator|.
name|setMimeType
argument_list|(
literal|"application/xquery"
argument_list|)
expr_stmt|;
name|testCollection
operator|.
name|storeResource
argument_list|(
name|doc
argument_list|)
expr_stmt|;
name|doc
operator|=
name|testCollection
operator|.
name|createResource
argument_list|(
name|MODULE2_NAME
argument_list|,
literal|"BinaryResource"
argument_list|)
expr_stmt|;
name|doc
operator|.
name|setContent
argument_list|(
name|module2
argument_list|)
expr_stmt|;
operator|(
operator|(
name|EXistResource
operator|)
name|doc
operator|)
operator|.
name|setMimeType
argument_list|(
literal|"application/xquery"
argument_list|)
expr_stmt|;
name|testCollection
operator|.
name|storeResource
argument_list|(
name|doc
argument_list|)
expr_stmt|;
name|doc
operator|=
name|testCollection
operator|.
name|createResource
argument_list|(
name|NAMESPACED_NAME
argument_list|,
literal|"XMLResource"
argument_list|)
expr_stmt|;
name|doc
operator|.
name|setContent
argument_list|(
name|namespacedDocument
argument_list|)
expr_stmt|;
operator|(
operator|(
name|EXistResource
operator|)
name|doc
operator|)
operator|.
name|setMimeType
argument_list|(
literal|"text/xml"
argument_list|)
expr_stmt|;
name|testCollection
operator|.
name|storeResource
argument_list|(
name|doc
argument_list|)
expr_stmt|;
name|XPathQueryService
name|service
init|=
operator|(
name|XPathQueryService
operator|)
name|testCollection
operator|.
name|getService
argument_list|(
literal|"XPathQueryService"
argument_list|,
literal|"1.0"
argument_list|)
decl_stmt|;
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"testNamespace 1: ========"
argument_list|)
expr_stmt|;
name|query
operator|=
literal|"xquery version \"1.0\";\n"
operator|+
literal|"import module namespace blah=\"blah\" at \""
operator|+
name|URI
operator|+
literal|"/test/"
operator|+
name|MODULE1_NAME
operator|+
literal|"\";\n"
operator|+
literal|"(:: redefine existing prefix ::)\n"
operator|+
literal|"declare namespace blah=\"bla\";\n"
operator|+
literal|"$blah:param"
expr_stmt|;
try|try
block|{
name|message
operator|=
literal|""
expr_stmt|;
name|result
operator|=
name|service
operator|.
name|query
argument_list|(
name|query
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|XMLDBException
name|e
parameter_list|)
block|{
name|message
operator|=
name|e
operator|.
name|getMessage
argument_list|()
expr_stmt|;
block|}
name|assertTrue
argument_list|(
name|message
operator|.
name|indexOf
argument_list|(
literal|"XQST0033"
argument_list|)
operator|>
operator|-
literal|1
argument_list|)
expr_stmt|;
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"testNamespace 2: ========"
argument_list|)
expr_stmt|;
name|query
operator|=
literal|"xquery version \"1.0\";\n"
operator|+
literal|"import module namespace blah=\"blah\" at \""
operator|+
name|URI
operator|+
literal|"/test/"
operator|+
name|MODULE1_NAME
operator|+
literal|"\";\n"
operator|+
literal|"(:: redefine existing prefix with same URI ::)\n"
operator|+
literal|"declare namespace blah=\"blah\";\n"
operator|+
literal|"declare variable $blah:param  {\"value-2\"};\n"
operator|+
literal|"$blah:param"
expr_stmt|;
try|try
block|{
name|message
operator|=
literal|""
expr_stmt|;
name|result
operator|=
name|service
operator|.
name|query
argument_list|(
name|query
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|XMLDBException
name|e
parameter_list|)
block|{
name|message
operator|=
name|e
operator|.
name|getMessage
argument_list|()
expr_stmt|;
block|}
name|assertTrue
argument_list|(
name|message
operator|.
name|indexOf
argument_list|(
literal|"XQST0033"
argument_list|)
operator|>
operator|-
literal|1
argument_list|)
expr_stmt|;
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"testNamespace 3: ========"
argument_list|)
expr_stmt|;
name|query
operator|=
literal|"xquery version \"1.0\";\n"
operator|+
literal|"import module namespace foo=\"\" at \""
operator|+
name|URI
operator|+
literal|"/test/"
operator|+
name|MODULE1_NAME
operator|+
literal|"\";\n"
operator|+
literal|"$foo:bar"
expr_stmt|;
try|try
block|{
name|message
operator|=
literal|""
expr_stmt|;
name|result
operator|=
name|service
operator|.
name|query
argument_list|(
name|query
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|XMLDBException
name|e
parameter_list|)
block|{
name|message
operator|=
name|e
operator|.
name|getMessage
argument_list|()
expr_stmt|;
block|}
name|assertTrue
argument_list|(
name|message
operator|.
name|indexOf
argument_list|(
literal|"does not match namespace URI"
argument_list|)
operator|>
operator|-
literal|1
argument_list|)
expr_stmt|;
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"testNamespace 4: ========"
argument_list|)
expr_stmt|;
name|query
operator|=
literal|"xquery version \"1.0\";\n"
operator|+
literal|"import module namespace foo=\"\" at \""
operator|+
name|URI
operator|+
literal|"/test/"
operator|+
name|MODULE2_NAME
operator|+
literal|"\";\n"
operator|+
literal|"$bar"
expr_stmt|;
try|try
block|{
name|message
operator|=
literal|""
expr_stmt|;
name|result
operator|=
name|service
operator|.
name|query
argument_list|(
name|query
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|XMLDBException
name|e
parameter_list|)
block|{
name|message
operator|=
name|e
operator|.
name|getMessage
argument_list|()
expr_stmt|;
block|}
name|assertTrue
argument_list|(
name|message
operator|.
name|indexOf
argument_list|(
literal|"No namespace defined for prefix"
argument_list|)
operator|>
operator|-
literal|1
argument_list|)
expr_stmt|;
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"testNamespace 5: ========"
argument_list|)
expr_stmt|;
name|query
operator|=
literal|"xquery version \"1.0\";\n"
operator|+
literal|"import module namespace foo=\"blah\" at \""
operator|+
name|URI
operator|+
literal|"/test/"
operator|+
name|MODULE2_NAME
operator|+
literal|"\";\n"
operator|+
literal|"$bar"
expr_stmt|;
try|try
block|{
name|message
operator|=
literal|""
expr_stmt|;
name|result
operator|=
name|service
operator|.
name|query
argument_list|(
name|query
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|XMLDBException
name|e
parameter_list|)
block|{
name|message
operator|=
name|e
operator|.
name|getMessage
argument_list|()
expr_stmt|;
block|}
name|assertTrue
argument_list|(
name|message
operator|.
name|indexOf
argument_list|(
literal|"No namespace defined for prefix"
argument_list|)
operator|>
operator|-
literal|1
argument_list|)
expr_stmt|;
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"testNamespace 6: ========"
argument_list|)
expr_stmt|;
name|query
operator|=
literal|"declare namespace x = \"http://www.foo.com\"; \n"
operator|+
literal|"let $a := doc('"
operator|+
name|DBBroker
operator|.
name|ROOT_COLLECTION
operator|+
literal|"/test/"
operator|+
name|NAMESPACED_NAME
operator|+
literal|"') \n"
operator|+
literal|"return $a//x:edition"
expr_stmt|;
name|result
operator|=
name|service
operator|.
name|query
argument_list|(
name|query
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"XQuery: "
operator|+
name|query
argument_list|,
literal|0
argument_list|,
name|result
operator|.
name|getSize
argument_list|()
argument_list|)
expr_stmt|;
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"testNamespace 7: ========"
argument_list|)
expr_stmt|;
name|query
operator|=
literal|"declare namespace x = \"http://www.foo.com\"; \n"
operator|+
literal|"declare namespace y = \"http://exist.sourceforge.net/dc-ext\"; \n"
operator|+
literal|"let $a := doc('"
operator|+
name|DBBroker
operator|.
name|ROOT_COLLECTION
operator|+
literal|"/test/"
operator|+
name|NAMESPACED_NAME
operator|+
literal|"') \n"
operator|+
literal|"return $a//y:edition"
expr_stmt|;
name|result
operator|=
name|service
operator|.
name|query
argument_list|(
name|query
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"XQuery: "
operator|+
name|query
argument_list|,
literal|1
argument_list|,
name|result
operator|.
name|getSize
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"XQuery: "
operator|+
name|query
argument_list|,
literal|"<x:edition xmlns:x=\"http://exist.sourceforge.net/dc-ext\">place</x:edition>"
argument_list|,
operator|(
operator|(
name|XMLResource
operator|)
name|result
operator|.
name|getResource
argument_list|(
literal|0
argument_list|)
operator|)
operator|.
name|getContent
argument_list|()
argument_list|)
expr_stmt|;
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"testNamespace 8: ========"
argument_list|)
expr_stmt|;
name|query
operator|=
literal|"<result xmlns:rdf='http://www.w3.org/1999/02/22-rdf-syntax-ns#'>{//rdf:Description}</result>"
expr_stmt|;
name|result
operator|=
name|service
operator|.
name|query
argument_list|(
name|query
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"XQuery: "
operator|+
name|query
argument_list|,
literal|"<result xmlns:rdf=\"http://www.w3.org/1999/02/22-rdf-syntax-ns#\">\n"
operator|+
literal|"<rdf:Description id=\"3\">\n"
operator|+
literal|"<dc:title xmlns:dc=\"http://purl.org/dc/elements/1.1/\">title</dc:title>\n"
operator|+
literal|"<dc:creator xmlns:dc=\"http://purl.org/dc/elements/1.1/\">creator</dc:creator>\n"
operator|+
literal|"<x:place xmlns:x=\"http://exist.sourceforge.net/dc-ext\">place</x:place>\n"
operator|+
literal|"<x:edition xmlns:x=\"http://exist.sourceforge.net/dc-ext\">place</x:edition>\n"
operator|+
literal|"</rdf:Description>\n"
operator|+
literal|"</result>"
argument_list|,
operator|(
operator|(
name|XMLResource
operator|)
name|result
operator|.
name|getResource
argument_list|(
literal|0
argument_list|)
operator|)
operator|.
name|getContent
argument_list|()
argument_list|)
expr_stmt|;
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"testNamespace 9: ========"
argument_list|)
expr_stmt|;
name|query
operator|=
literal|"<result xmlns='http://www.w3.org/1999/02/22-rdf-syntax-ns#'>{//Description}</result>"
expr_stmt|;
name|result
operator|=
name|service
operator|.
name|query
argument_list|(
name|query
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"XQuery: "
operator|+
name|query
argument_list|,
literal|"<result xmlns=\"http://www.w3.org/1999/02/22-rdf-syntax-ns#\">\n"
operator|+
literal|"<rdf:Description xmlns:rdf=\"http://www.w3.org/1999/02/22-rdf-syntax-ns#\" id=\"3\">\n"
operator|+
literal|"<dc:title xmlns:dc=\"http://purl.org/dc/elements/1.1/\">title</dc:title>\n"
operator|+
literal|"<dc:creator xmlns:dc=\"http://purl.org/dc/elements/1.1/\">creator</dc:creator>\n"
operator|+
literal|"<x:place xmlns:x=\"http://exist.sourceforge.net/dc-ext\">place</x:place>\n"
operator|+
literal|"<x:edition xmlns:x=\"http://exist.sourceforge.net/dc-ext\">place</x:edition>\n"
operator|+
literal|"</rdf:Description>\n"
operator|+
literal|"</result>"
argument_list|,
operator|(
operator|(
name|XMLResource
operator|)
name|result
operator|.
name|getResource
argument_list|(
literal|0
argument_list|)
operator|)
operator|.
name|getContent
argument_list|()
argument_list|)
expr_stmt|;
comment|//Interesting one : let's see with XQuery gurus :-)
comment|//declare namespace fn="";
comment|//fn:current-time()
comment|/* 			 If the URILiteral part of a namespace declaration is a zero-length string,  			 any existing namespace binding for the given prefix is removed from  			 the statically known namespaces. This feature provides a way  			 to remove predeclared namespace prefixes such as local. 			 */
block|}
catch|catch
parameter_list|(
name|XMLDBException
name|e
parameter_list|)
block|{
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"testNamespace : XMLDBException: "
operator|+
name|e
argument_list|)
expr_stmt|;
name|fail
argument_list|(
name|e
operator|.
name|getMessage
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
specifier|public
name|void
name|testNamespaceWithTransform
parameter_list|()
block|{
try|try
block|{
name|XPathQueryService
name|service
init|=
operator|(
name|XPathQueryService
operator|)
name|getTestCollection
argument_list|()
operator|.
name|getService
argument_list|(
literal|"XPathQueryService"
argument_list|,
literal|"1.0"
argument_list|)
decl_stmt|;
name|String
name|query
init|=
literal|"xquery version \"1.0\";\n"
operator|+
literal|"declare namespace transform=\"http://exist-db.org/xquery/transform\";\n"
operator|+
literal|"declare variable $xml {\n"
operator|+
literal|"<node>text</node>\n"
operator|+
literal|"};\n"
operator|+
literal|"declare variable $xslt {\n"
operator|+
literal|"<xsl:stylesheet xmlns:xsl=\"http://www.w3.org/1999/XSL/Transform\" version=\"2.0\">\n"
operator|+
literal|"<xsl:template match=\"node\">\n"
operator|+
literal|"<div><xsl:value-of select=\".\"/></div>\n"
operator|+
literal|"</xsl:template>\n"
operator|+
literal|"</xsl:stylesheet>\n"
operator|+
literal|"};\n"
operator|+
literal|"<html xmlns=\"http://www.w3.org/1999/xhtml\">\n"
operator|+
literal|"<body>\n"
operator|+
literal|"		{transform:transform($xml, $xslt, ())}\n"
operator|+
literal|"</body>\n"
operator|+
literal|"</html>"
decl_stmt|;
name|ResourceSet
name|result
init|=
name|service
operator|.
name|query
argument_list|(
name|query
argument_list|)
decl_stmt|;
comment|//check there is one result
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|result
operator|.
name|getSize
argument_list|()
argument_list|)
expr_stmt|;
name|String
name|content
init|=
operator|(
name|String
operator|)
name|result
operator|.
name|getResource
argument_list|(
literal|0
argument_list|)
operator|.
name|getContent
argument_list|()
decl_stmt|;
comment|//check the namespace
name|assertTrue
argument_list|(
name|content
operator|.
name|startsWith
argument_list|(
literal|"<html xmlns=\"http://www.w3.org/1999/xhtml\">"
argument_list|)
argument_list|)
expr_stmt|;
comment|//check the content
name|assertTrue
argument_list|(
name|content
operator|.
name|indexOf
argument_list|(
literal|"<div>text</div>"
argument_list|)
operator|>
operator|-
literal|1
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|XMLDBException
name|e
parameter_list|)
block|{
name|fail
argument_list|(
name|e
operator|.
name|getMessage
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
specifier|public
name|void
name|testModule
parameter_list|()
block|{
name|Resource
name|doc
decl_stmt|;
name|ResourceSet
name|result
decl_stmt|;
name|String
name|query
decl_stmt|;
name|String
name|message
decl_stmt|;
try|try
block|{
name|Collection
name|testCollection
init|=
name|getTestCollection
argument_list|()
decl_stmt|;
name|doc
operator|=
name|testCollection
operator|.
name|createResource
argument_list|(
name|MODULE1_NAME
argument_list|,
literal|"BinaryResource"
argument_list|)
expr_stmt|;
name|doc
operator|.
name|setContent
argument_list|(
name|module1
argument_list|)
expr_stmt|;
operator|(
operator|(
name|EXistResource
operator|)
name|doc
operator|)
operator|.
name|setMimeType
argument_list|(
literal|"application/xquery"
argument_list|)
expr_stmt|;
name|testCollection
operator|.
name|storeResource
argument_list|(
name|doc
argument_list|)
expr_stmt|;
name|doc
operator|=
name|testCollection
operator|.
name|createResource
argument_list|(
name|MODULE3_NAME
argument_list|,
literal|"BinaryResource"
argument_list|)
expr_stmt|;
name|doc
operator|.
name|setContent
argument_list|(
name|module3
argument_list|)
expr_stmt|;
operator|(
operator|(
name|EXistResource
operator|)
name|doc
operator|)
operator|.
name|setMimeType
argument_list|(
literal|"application/xquery"
argument_list|)
expr_stmt|;
name|testCollection
operator|.
name|storeResource
argument_list|(
name|doc
argument_list|)
expr_stmt|;
name|doc
operator|=
name|testCollection
operator|.
name|createResource
argument_list|(
name|MODULE4_NAME
argument_list|,
literal|"BinaryResource"
argument_list|)
expr_stmt|;
name|doc
operator|.
name|setContent
argument_list|(
name|module4
argument_list|)
expr_stmt|;
operator|(
operator|(
name|EXistResource
operator|)
name|doc
operator|)
operator|.
name|setMimeType
argument_list|(
literal|"application/xquery"
argument_list|)
expr_stmt|;
name|testCollection
operator|.
name|storeResource
argument_list|(
name|doc
argument_list|)
expr_stmt|;
name|doc
operator|=
name|testCollection
operator|.
name|createResource
argument_list|(
name|FATHER_MODULE_NAME
argument_list|,
literal|"BinaryResource"
argument_list|)
expr_stmt|;
name|doc
operator|.
name|setContent
argument_list|(
name|fatherModule
argument_list|)
expr_stmt|;
operator|(
operator|(
name|EXistResource
operator|)
name|doc
operator|)
operator|.
name|setMimeType
argument_list|(
literal|"application/xquery"
argument_list|)
expr_stmt|;
name|testCollection
operator|.
name|storeResource
argument_list|(
name|doc
argument_list|)
expr_stmt|;
name|doc
operator|=
name|testCollection
operator|.
name|createResource
argument_list|(
name|CHILD1_MODULE_NAME
argument_list|,
literal|"BinaryResource"
argument_list|)
expr_stmt|;
name|doc
operator|.
name|setContent
argument_list|(
name|child1Module
argument_list|)
expr_stmt|;
operator|(
operator|(
name|EXistResource
operator|)
name|doc
operator|)
operator|.
name|setMimeType
argument_list|(
literal|"application/xquery"
argument_list|)
expr_stmt|;
name|testCollection
operator|.
name|storeResource
argument_list|(
name|doc
argument_list|)
expr_stmt|;
name|doc
operator|=
name|testCollection
operator|.
name|createResource
argument_list|(
name|CHILD2_MODULE_NAME
argument_list|,
literal|"BinaryResource"
argument_list|)
expr_stmt|;
name|doc
operator|.
name|setContent
argument_list|(
name|child2Module
argument_list|)
expr_stmt|;
operator|(
operator|(
name|EXistResource
operator|)
name|doc
operator|)
operator|.
name|setMimeType
argument_list|(
literal|"application/xquery"
argument_list|)
expr_stmt|;
name|testCollection
operator|.
name|storeResource
argument_list|(
name|doc
argument_list|)
expr_stmt|;
name|XPathQueryService
name|service
init|=
operator|(
name|XPathQueryService
operator|)
name|testCollection
operator|.
name|getService
argument_list|(
literal|"XPathQueryService"
argument_list|,
literal|"1.0"
argument_list|)
decl_stmt|;
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"testModule 1: ========"
argument_list|)
expr_stmt|;
name|query
operator|=
literal|"xquery version \"1.0\";\n"
operator|+
literal|"import module namespace blah=\"blah\" at \""
operator|+
name|URI
operator|+
literal|"/test/"
operator|+
name|MODULE1_NAME
operator|+
literal|"\";\n"
operator|+
literal|"$blah:param"
expr_stmt|;
name|result
operator|=
name|service
operator|.
name|query
argument_list|(
name|query
argument_list|)
expr_stmt|;
name|printResult
argument_list|(
name|result
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"XQuery: "
operator|+
name|query
argument_list|,
literal|1
argument_list|,
name|result
operator|.
name|getSize
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"XQuery: "
operator|+
name|query
argument_list|,
literal|"value-1"
argument_list|,
name|result
operator|.
name|getResource
argument_list|(
literal|0
argument_list|)
operator|.
name|getContent
argument_list|()
argument_list|)
expr_stmt|;
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"testModule 2: ========"
argument_list|)
expr_stmt|;
name|query
operator|=
literal|"xquery version \"1.0\";\n"
operator|+
literal|"import module namespace blah=\"blah\" at \""
operator|+
name|URI
operator|+
literal|"/test/"
operator|+
name|MODULE1_NAME
operator|+
literal|"\";\n"
operator|+
literal|"(:: redefine variable ::)\n"
operator|+
literal|"declare variable $blah:param  {\"value-2\"};\n"
operator|+
literal|"$blah:param"
expr_stmt|;
try|try
block|{
name|message
operator|=
literal|""
expr_stmt|;
name|result
operator|=
name|service
operator|.
name|query
argument_list|(
name|query
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|XMLDBException
name|e
parameter_list|)
block|{
name|message
operator|=
name|e
operator|.
name|getMessage
argument_list|()
expr_stmt|;
block|}
name|assertTrue
argument_list|(
name|message
operator|.
name|indexOf
argument_list|(
literal|"XQST0049"
argument_list|)
operator|>
operator|-
literal|1
argument_list|)
expr_stmt|;
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"testModule 3: ========"
argument_list|)
expr_stmt|;
name|query
operator|=
literal|"xquery version \"1.0\";\n"
operator|+
literal|"import module namespace blah=\"blah\" at \""
operator|+
name|URI
operator|+
literal|"/test/"
operator|+
name|MODULE1_NAME
operator|+
literal|"\";\n"
operator|+
literal|"declare namespace blah2=\"blah\";\n"
operator|+
literal|"$blah2:param"
expr_stmt|;
name|result
operator|=
name|service
operator|.
name|query
argument_list|(
name|query
argument_list|)
expr_stmt|;
name|printResult
argument_list|(
name|result
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"XQuery: "
operator|+
name|query
argument_list|,
literal|1
argument_list|,
name|result
operator|.
name|getSize
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"XQuery: "
operator|+
name|query
argument_list|,
literal|"value-1"
argument_list|,
name|result
operator|.
name|getResource
argument_list|(
literal|0
argument_list|)
operator|.
name|getContent
argument_list|()
argument_list|)
expr_stmt|;
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"testModule 4: ========"
argument_list|)
expr_stmt|;
name|query
operator|=
literal|"xquery version \"1.0\";\n"
operator|+
literal|"import module namespace blah=\"bla\" at \""
operator|+
name|URI
operator|+
literal|"/test/"
operator|+
name|MODULE1_NAME
operator|+
literal|"\";\n"
operator|+
literal|"$blah:param"
expr_stmt|;
try|try
block|{
name|message
operator|=
literal|""
expr_stmt|;
name|result
operator|=
name|service
operator|.
name|query
argument_list|(
name|query
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|XMLDBException
name|e
parameter_list|)
block|{
name|message
operator|=
name|e
operator|.
name|getMessage
argument_list|()
expr_stmt|;
block|}
name|assertTrue
argument_list|(
name|message
operator|.
name|indexOf
argument_list|(
literal|"does not match namespace URI"
argument_list|)
operator|>
operator|-
literal|1
argument_list|)
expr_stmt|;
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"testModule 5: ========"
argument_list|)
expr_stmt|;
name|query
operator|=
literal|"xquery version \"1.0\";\n"
operator|+
literal|"import module namespace foo=\"foo\" at \""
operator|+
name|URI
operator|+
literal|"/test/"
operator|+
name|FATHER_MODULE_NAME
operator|+
literal|"\";\n"
operator|+
literal|"$foo:bar, $foo:bar1, $foo:bar2"
expr_stmt|;
name|result
operator|=
name|service
operator|.
name|query
argument_list|(
name|query
argument_list|)
expr_stmt|;
name|printResult
argument_list|(
name|result
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"XQuery: "
operator|+
name|query
argument_list|,
literal|3
argument_list|,
name|result
operator|.
name|getSize
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"XQuery: "
operator|+
name|query
argument_list|,
literal|"bar"
argument_list|,
name|result
operator|.
name|getResource
argument_list|(
literal|0
argument_list|)
operator|.
name|getContent
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"XQuery: "
operator|+
name|query
argument_list|,
literal|"bar1"
argument_list|,
name|result
operator|.
name|getResource
argument_list|(
literal|1
argument_list|)
operator|.
name|getContent
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"XQuery: "
operator|+
name|query
argument_list|,
literal|"bar2"
argument_list|,
name|result
operator|.
name|getResource
argument_list|(
literal|2
argument_list|)
operator|.
name|getContent
argument_list|()
argument_list|)
expr_stmt|;
comment|//			Non-heritance check
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"testModule 6: ========"
argument_list|)
expr_stmt|;
name|query
operator|=
literal|"xquery version \"1.0\";\n"
operator|+
literal|"import module namespace foo=\"foo\" at \""
operator|+
name|URI
operator|+
literal|"/test/"
operator|+
name|FATHER_MODULE_NAME
operator|+
literal|"\";\n"
operator|+
literal|"declare namespace foo1=\"foo1\"; \n"
operator|+
literal|"$foo1:bar"
expr_stmt|;
try|try
block|{
name|message
operator|=
literal|""
expr_stmt|;
name|result
operator|=
name|service
operator|.
name|query
argument_list|(
name|query
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|XMLDBException
name|e
parameter_list|)
block|{
name|message
operator|=
name|e
operator|.
name|getMessage
argument_list|()
expr_stmt|;
block|}
name|assertTrue
argument_list|(
name|message
operator|.
name|indexOf
argument_list|(
literal|"is not bound"
argument_list|)
operator|>
operator|-
literal|1
argument_list|)
expr_stmt|;
comment|//			Non-heritance check
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"testModule 7: ========"
argument_list|)
expr_stmt|;
name|query
operator|=
literal|"xquery version \"1.0\";\n"
operator|+
literal|"import module namespace foo=\"foo\" at \""
operator|+
name|URI
operator|+
literal|"/test/"
operator|+
name|FATHER_MODULE_NAME
operator|+
literal|"\";\n"
operator|+
literal|"declare namespace foo2=\"foo2\"; \n"
operator|+
literal|"$foo2:bar"
expr_stmt|;
try|try
block|{
name|message
operator|=
literal|""
expr_stmt|;
name|result
operator|=
name|service
operator|.
name|query
argument_list|(
name|query
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|XMLDBException
name|e
parameter_list|)
block|{
name|message
operator|=
name|e
operator|.
name|getMessage
argument_list|()
expr_stmt|;
block|}
name|assertTrue
argument_list|(
name|message
operator|.
name|indexOf
argument_list|(
literal|"is not bound"
argument_list|)
operator|>
operator|-
literal|1
argument_list|)
expr_stmt|;
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"testModule 8: ========"
argument_list|)
expr_stmt|;
name|query
operator|=
literal|"xquery version \"1.0\";\n"
operator|+
literal|"import module namespace foo1=\"foo\" at \""
operator|+
name|URI
operator|+
literal|"/test/"
operator|+
name|CHILD1_MODULE_NAME
operator|+
literal|"\";\n"
operator|+
literal|"import module namespace foo2=\"foo\" at \""
operator|+
name|URI
operator|+
literal|"/test/"
operator|+
name|CHILD1_MODULE_NAME
operator|+
literal|"\";\n"
operator|+
literal|"$foo1:bar"
expr_stmt|;
try|try
block|{
name|message
operator|=
literal|""
expr_stmt|;
name|result
operator|=
name|service
operator|.
name|query
argument_list|(
name|query
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|XMLDBException
name|e
parameter_list|)
block|{
name|message
operator|=
name|e
operator|.
name|getMessage
argument_list|()
expr_stmt|;
block|}
comment|//			Should be a XQST0047 error
name|assertTrue
argument_list|(
name|message
operator|.
name|indexOf
argument_list|(
literal|"does not match namespace URI"
argument_list|)
operator|>
operator|-
literal|1
argument_list|)
expr_stmt|;
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"testModule 9: ========"
argument_list|)
expr_stmt|;
name|query
operator|=
literal|"xquery version \"1.0\";\n"
operator|+
literal|"import module namespace foo=\"foo\" at \""
operator|+
name|URI
operator|+
literal|"/test/"
operator|+
name|MODULE3_NAME
operator|+
literal|"\";\n"
operator|+
literal|"$bar:bar"
expr_stmt|;
try|try
block|{
name|message
operator|=
literal|""
expr_stmt|;
name|result
operator|=
name|service
operator|.
name|query
argument_list|(
name|query
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|XMLDBException
name|e
parameter_list|)
block|{
name|message
operator|=
name|e
operator|.
name|getMessage
argument_list|()
expr_stmt|;
block|}
name|assertTrue
argument_list|(
name|message
operator|.
name|indexOf
argument_list|(
literal|"No namespace defined for prefix"
argument_list|)
operator|>
operator|-
literal|1
argument_list|)
expr_stmt|;
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"testModule 10: ========"
argument_list|)
expr_stmt|;
name|query
operator|=
literal|"xquery version \"1.0\";\n"
operator|+
literal|"import module namespace foo=\"foo\" at \""
operator|+
name|URI
operator|+
literal|"/test/"
operator|+
name|MODULE4_NAME
operator|+
literal|"\";\n"
operator|+
literal|"foo:bar()"
expr_stmt|;
try|try
block|{
name|message
operator|=
literal|""
expr_stmt|;
name|result
operator|=
name|service
operator|.
name|query
argument_list|(
name|query
argument_list|)
expr_stmt|;
comment|//WARNING !
comment|//This result is false ! The external vairable has not been resolved
comment|//Furthermore it is not in the module's namespace !
name|printResult
argument_list|(
name|result
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"XQuery: "
operator|+
name|query
argument_list|,
literal|0
argument_list|,
name|result
operator|.
name|getSize
argument_list|()
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|XMLDBException
name|e
parameter_list|)
block|{
name|message
operator|=
name|e
operator|.
name|getMessage
argument_list|()
expr_stmt|;
block|}
comment|//This is the good result !
comment|//assertTrue(message.indexOf("XQST0048")> -1);
block|}
catch|catch
parameter_list|(
name|XMLDBException
name|e
parameter_list|)
block|{
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"testModule : XMLDBException: "
operator|+
name|e
argument_list|)
expr_stmt|;
name|fail
argument_list|(
name|e
operator|.
name|getMessage
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
specifier|public
name|void
name|testGlobalVars
parameter_list|()
block|{
try|try
block|{
name|Collection
name|testCollection
init|=
name|getTestCollection
argument_list|()
decl_stmt|;
name|Resource
name|doc
init|=
name|testCollection
operator|.
name|createResource
argument_list|(
name|MODULE5_NAME
argument_list|,
literal|"BinaryResource"
argument_list|)
decl_stmt|;
name|doc
operator|.
name|setContent
argument_list|(
name|module5
argument_list|)
expr_stmt|;
operator|(
operator|(
name|EXistResource
operator|)
name|doc
operator|)
operator|.
name|setMimeType
argument_list|(
literal|"application/xquery"
argument_list|)
expr_stmt|;
name|testCollection
operator|.
name|storeResource
argument_list|(
name|doc
argument_list|)
expr_stmt|;
name|doc
operator|=
name|testCollection
operator|.
name|createResource
argument_list|(
name|MODULE6_NAME
argument_list|,
literal|"BinaryResource"
argument_list|)
expr_stmt|;
name|doc
operator|.
name|setContent
argument_list|(
name|module6
argument_list|)
expr_stmt|;
operator|(
operator|(
name|EXistResource
operator|)
name|doc
operator|)
operator|.
name|setMimeType
argument_list|(
literal|"application/xquery"
argument_list|)
expr_stmt|;
name|testCollection
operator|.
name|storeResource
argument_list|(
name|doc
argument_list|)
expr_stmt|;
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"testGlobalVars 1: ========"
argument_list|)
expr_stmt|;
name|XQueryService
name|service
init|=
operator|(
name|XQueryService
operator|)
name|testCollection
operator|.
name|getService
argument_list|(
literal|"XPathQueryService"
argument_list|,
literal|"1.0"
argument_list|)
decl_stmt|;
name|String
name|query
init|=
literal|"xquery version \"1.0\";\n"
operator|+
literal|"import module namespace foo=\"foo\" at \""
operator|+
name|URI
operator|+
literal|"/test/"
operator|+
name|MODULE5_NAME
operator|+
literal|"\";\n"
operator|+
literal|"$foo:bar"
decl_stmt|;
name|ResourceSet
name|result
init|=
name|service
operator|.
name|query
argument_list|(
name|query
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|result
operator|.
name|getSize
argument_list|()
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|result
operator|.
name|getResource
argument_list|(
literal|0
argument_list|)
operator|.
name|getContent
argument_list|()
argument_list|,
literal|"bar"
argument_list|)
expr_stmt|;
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"testGlobalVars 2: ========"
argument_list|)
expr_stmt|;
name|query
operator|=
literal|"xquery version \"1.0\";\n"
operator|+
literal|"declare variable $local:a := 'abc';"
operator|+
literal|"$local:a"
expr_stmt|;
name|result
operator|=
name|service
operator|.
name|query
argument_list|(
name|query
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|result
operator|.
name|getSize
argument_list|()
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|result
operator|.
name|getResource
argument_list|(
literal|0
argument_list|)
operator|.
name|getContent
argument_list|()
argument_list|,
literal|"abc"
argument_list|)
expr_stmt|;
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"testGlobalVars 3: ========"
argument_list|)
expr_stmt|;
name|boolean
name|gotException
init|=
literal|false
decl_stmt|;
try|try
block|{
name|query
operator|=
literal|"xquery version \"1.0\";\n"
operator|+
literal|"import module namespace foo=\"foo\" at \""
operator|+
name|URI
operator|+
literal|"/test/"
operator|+
name|MODULE6_NAME
operator|+
literal|"\";\n"
operator|+
literal|"$foo:bar"
expr_stmt|;
name|result
operator|=
name|service
operator|.
name|query
argument_list|(
name|query
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|XMLDBException
name|e
parameter_list|)
block|{
name|assertTrue
argument_list|(
literal|"Test should generate err:XQST0049, got: "
operator|+
name|e
operator|.
name|getMessage
argument_list|()
argument_list|,
name|e
operator|.
name|getMessage
argument_list|()
operator|.
name|indexOf
argument_list|(
literal|"err:XQST0049"
argument_list|)
operator|>
operator|-
literal|1
argument_list|)
expr_stmt|;
name|gotException
operator|=
literal|true
expr_stmt|;
block|}
name|assertTrue
argument_list|(
literal|"Duplicate global variable should generate error"
argument_list|,
name|gotException
argument_list|)
expr_stmt|;
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"testGlobalVars 4: ========"
argument_list|)
expr_stmt|;
name|gotException
operator|=
literal|false
expr_stmt|;
try|try
block|{
name|query
operator|=
literal|"xquery version \"1.0\";\n"
operator|+
literal|"declare variable $local:a := 'abc';"
operator|+
literal|"declare variable $local:a := 'abc';"
operator|+
literal|"$local:a"
expr_stmt|;
name|result
operator|=
name|service
operator|.
name|query
argument_list|(
name|query
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|XMLDBException
name|e
parameter_list|)
block|{
name|assertTrue
argument_list|(
literal|"Test should generate err:XQST0049, got: "
operator|+
name|e
operator|.
name|getMessage
argument_list|()
argument_list|,
name|e
operator|.
name|getMessage
argument_list|()
operator|.
name|indexOf
argument_list|(
literal|"err:XQST0049"
argument_list|)
operator|>
operator|-
literal|1
argument_list|)
expr_stmt|;
name|gotException
operator|=
literal|true
expr_stmt|;
block|}
name|assertTrue
argument_list|(
literal|"Duplicate global variable should generate error"
argument_list|,
name|gotException
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|XMLDBException
name|e
parameter_list|)
block|{
name|e
operator|.
name|printStackTrace
argument_list|()
expr_stmt|;
name|fail
argument_list|(
name|e
operator|.
name|getMessage
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
specifier|public
name|void
name|testFunctionDoc
parameter_list|()
block|{
name|ResourceSet
name|result
decl_stmt|;
name|String
name|query
decl_stmt|;
name|boolean
name|exceptionThrown
decl_stmt|;
name|String
name|message
decl_stmt|;
try|try
block|{
name|XPathQueryService
name|service
init|=
name|storeXMLStringAndGetQueryService
argument_list|(
name|NUMBERS_XML
argument_list|,
name|numbers
argument_list|)
decl_stmt|;
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"testFunctionDoc 1: ========"
argument_list|)
expr_stmt|;
name|query
operator|=
literal|"doc('"
operator|+
name|DBBroker
operator|.
name|ROOT_COLLECTION
operator|+
literal|"/test/"
operator|+
name|NUMBERS_XML
operator|+
literal|"')"
expr_stmt|;
name|result
operator|=
name|service
operator|.
name|query
argument_list|(
name|query
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"XQuery: "
operator|+
name|query
argument_list|,
literal|1
argument_list|,
name|result
operator|.
name|getSize
argument_list|()
argument_list|)
expr_stmt|;
try|try
block|{
name|Node
name|n
init|=
operator|(
operator|(
name|XMLResource
operator|)
name|result
operator|.
name|getResource
argument_list|(
literal|0
argument_list|)
operator|)
operator|.
name|getContentAsDOM
argument_list|()
decl_stmt|;
name|DetailedDiff
name|d
init|=
operator|new
name|DetailedDiff
argument_list|(
name|compareXML
argument_list|(
name|numbers
argument_list|,
name|n
operator|.
name|toString
argument_list|()
argument_list|)
argument_list|)
decl_stmt|;
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
name|d
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|d
operator|.
name|getAllDifferences
argument_list|()
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
comment|//ignore eXist namespace's attributes
comment|//assertEquals(1, d.getAllDifferences().size());
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"testFunctionDoc : XMLDBException: "
operator|+
name|e
argument_list|)
expr_stmt|;
name|fail
argument_list|(
name|e
operator|.
name|getMessage
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"testFunctionDoc 2: ========"
argument_list|)
expr_stmt|;
name|query
operator|=
literal|"let $v := ()\n"
operator|+
literal|"return doc($v)"
expr_stmt|;
name|result
operator|=
name|service
operator|.
name|query
argument_list|(
name|query
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"XQuery: "
operator|+
name|query
argument_list|,
literal|0
argument_list|,
name|result
operator|.
name|getSize
argument_list|()
argument_list|)
expr_stmt|;
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"testFunctionDoc 3: ========"
argument_list|)
expr_stmt|;
name|query
operator|=
literal|"doc('"
operator|+
name|DBBroker
operator|.
name|ROOT_COLLECTION
operator|+
literal|"/test/dummy"
operator|+
name|NUMBERS_XML
operator|+
literal|"')"
expr_stmt|;
try|try
block|{
name|exceptionThrown
operator|=
literal|false
expr_stmt|;
name|result
operator|=
name|service
operator|.
name|query
argument_list|(
name|query
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|XMLDBException
name|e
parameter_list|)
block|{
name|exceptionThrown
operator|=
literal|true
expr_stmt|;
name|message
operator|=
name|e
operator|.
name|getMessage
argument_list|()
expr_stmt|;
block|}
comment|//TODO : to be decided !
comment|//assertTrue(exceptionThrown);
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|result
operator|.
name|getSize
argument_list|()
argument_list|)
expr_stmt|;
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"testFunctionDoc 4: ========"
argument_list|)
expr_stmt|;
name|query
operator|=
literal|"doc-available('"
operator|+
name|DBBroker
operator|.
name|ROOT_COLLECTION
operator|+
literal|"/test/"
operator|+
name|NUMBERS_XML
operator|+
literal|"')"
expr_stmt|;
name|result
operator|=
name|service
operator|.
name|query
argument_list|(
name|query
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"XQuery: "
operator|+
name|query
argument_list|,
literal|1
argument_list|,
name|result
operator|.
name|getSize
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"XQuery: "
operator|+
name|query
argument_list|,
literal|"true"
argument_list|,
name|result
operator|.
name|getResource
argument_list|(
literal|0
argument_list|)
operator|.
name|getContent
argument_list|()
argument_list|)
expr_stmt|;
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"testFunctionDoc 5: ========"
argument_list|)
expr_stmt|;
name|query
operator|=
literal|"let $v := ()\n"
operator|+
literal|"return doc-available($v)"
expr_stmt|;
name|result
operator|=
name|service
operator|.
name|query
argument_list|(
name|query
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"XQuery: "
operator|+
name|query
argument_list|,
literal|1
argument_list|,
name|result
operator|.
name|getSize
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"XQuery: "
operator|+
name|query
argument_list|,
literal|"false"
argument_list|,
name|result
operator|.
name|getResource
argument_list|(
literal|0
argument_list|)
operator|.
name|getContent
argument_list|()
argument_list|)
expr_stmt|;
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"testFunctionDoc 6: ========"
argument_list|)
expr_stmt|;
name|query
operator|=
literal|"doc-available('"
operator|+
name|DBBroker
operator|.
name|ROOT_COLLECTION
operator|+
literal|"/test/dummy"
operator|+
name|NUMBERS_XML
operator|+
literal|"')"
expr_stmt|;
name|assertEquals
argument_list|(
literal|"XQuery: "
operator|+
name|query
argument_list|,
literal|1
argument_list|,
name|result
operator|.
name|getSize
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"XQuery: "
operator|+
name|query
argument_list|,
literal|"false"
argument_list|,
name|result
operator|.
name|getResource
argument_list|(
literal|0
argument_list|)
operator|.
name|getContent
argument_list|()
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|XMLDBException
name|e
parameter_list|)
block|{
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"testFunctionDoc : XMLDBException: "
operator|+
name|e
argument_list|)
expr_stmt|;
name|fail
argument_list|(
name|e
operator|.
name|getMessage
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
comment|//This test only works if there is an Internet access
specifier|public
name|void
name|testFunctionDocExternal
parameter_list|()
block|{
name|boolean
name|hasInternetAccess
init|=
literal|false
decl_stmt|;
name|ResourceSet
name|result
decl_stmt|;
name|String
name|query
decl_stmt|;
name|String
name|message
decl_stmt|;
comment|//Checking that we have an Internet Aceess
try|try
block|{
name|URL
name|url
init|=
operator|new
name|URL
argument_list|(
literal|"http://www.w3.org/"
argument_list|)
decl_stmt|;
name|URLConnection
name|con
init|=
name|url
operator|.
name|openConnection
argument_list|()
decl_stmt|;
if|if
condition|(
name|con
operator|instanceof
name|HttpURLConnection
condition|)
block|{
name|HttpURLConnection
name|httpConnection
init|=
operator|(
name|HttpURLConnection
operator|)
name|con
decl_stmt|;
name|hasInternetAccess
operator|=
operator|(
name|httpConnection
operator|.
name|getResponseCode
argument_list|()
operator|==
name|HttpURLConnection
operator|.
name|HTTP_OK
operator|)
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
name|MalformedURLException
name|e
parameter_list|)
block|{
name|fail
argument_list|(
literal|"Stupid error... "
operator|+
name|e
operator|.
name|getMessage
argument_list|()
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
comment|//Ignore
block|}
if|if
condition|(
operator|!
name|hasInternetAccess
condition|)
block|{
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"No Internet access: skipping 'testFunctionDocExternal' tests"
argument_list|)
expr_stmt|;
return|return;
block|}
try|try
block|{
name|XPathQueryService
name|service
init|=
name|storeXMLStringAndGetQueryService
argument_list|(
name|NUMBERS_XML
argument_list|,
name|numbers
argument_list|)
decl_stmt|;
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"testFunctionDocExternal 1: ========"
argument_list|)
expr_stmt|;
name|query
operator|=
literal|"doc(\"http://www.w3.org/RDF/\")"
expr_stmt|;
name|result
operator|=
name|service
operator|.
name|query
argument_list|(
name|query
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"XQuery: "
operator|+
name|query
argument_list|,
literal|1
argument_list|,
name|result
operator|.
name|getSize
argument_list|()
argument_list|)
expr_stmt|;
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"testFunctionDocExternal 2: ========"
argument_list|)
expr_stmt|;
name|query
operator|=
literal|"doc(\"http://www.w3.org/RDF/dummy\")"
expr_stmt|;
name|result
operator|=
name|service
operator|.
name|query
argument_list|(
name|query
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"XQuery: "
operator|+
name|query
argument_list|,
literal|0
argument_list|,
name|result
operator|.
name|getSize
argument_list|()
argument_list|)
expr_stmt|;
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"testFunctionDocExternal 3: ========"
argument_list|)
expr_stmt|;
name|query
operator|=
literal|"doc-available(\"http://www.w3.org/RDF/\")"
expr_stmt|;
name|result
operator|=
name|service
operator|.
name|query
argument_list|(
name|query
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"XQuery: "
operator|+
name|query
argument_list|,
literal|1
argument_list|,
name|result
operator|.
name|getSize
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"XQuery: "
operator|+
name|query
argument_list|,
literal|"true"
argument_list|,
name|result
operator|.
name|getResource
argument_list|(
literal|0
argument_list|)
operator|.
name|getContent
argument_list|()
argument_list|)
expr_stmt|;
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"testFunctionDocExternal 4: ========"
argument_list|)
expr_stmt|;
name|query
operator|=
literal|"doc-available(\"http://www.404brain.net/true404\")"
expr_stmt|;
name|result
operator|=
name|service
operator|.
name|query
argument_list|(
name|query
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"XQuery: "
operator|+
name|query
argument_list|,
literal|1
argument_list|,
name|result
operator|.
name|getSize
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"XQuery: "
operator|+
name|query
argument_list|,
literal|"false"
argument_list|,
name|result
operator|.
name|getResource
argument_list|(
literal|0
argument_list|)
operator|.
name|getContent
argument_list|()
argument_list|)
expr_stmt|;
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"testFunctionDocExternal 5: ========"
argument_list|)
expr_stmt|;
comment|//A redirected 404
name|query
operator|=
literal|"doc-available(\"http://java.sun.com/404\")"
expr_stmt|;
name|assertEquals
argument_list|(
literal|"XQuery: "
operator|+
name|query
argument_list|,
literal|1
argument_list|,
name|result
operator|.
name|getSize
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"XQuery: "
operator|+
name|query
argument_list|,
literal|"false"
argument_list|,
name|result
operator|.
name|getResource
argument_list|(
literal|0
argument_list|)
operator|.
name|getContent
argument_list|()
argument_list|)
expr_stmt|;
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"testFunctionDocExternal 6: ========"
argument_list|)
expr_stmt|;
name|query
operator|=
literal|"doc(\"file:////doesnotexist.xml\")"
expr_stmt|;
name|result
operator|=
name|service
operator|.
name|query
argument_list|(
name|query
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"XQuery: "
operator|+
name|query
argument_list|,
literal|0
argument_list|,
name|result
operator|.
name|getSize
argument_list|()
argument_list|)
expr_stmt|;
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"testFunctionDocExternal 7: ========"
argument_list|)
expr_stmt|;
name|query
operator|=
literal|"doc-available(\"file:////doesnotexist.xml\")"
expr_stmt|;
name|result
operator|=
name|service
operator|.
name|query
argument_list|(
name|query
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"XQuery: "
operator|+
name|query
argument_list|,
literal|1
argument_list|,
name|result
operator|.
name|getSize
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"XQuery: "
operator|+
name|query
argument_list|,
literal|"false"
argument_list|,
name|result
operator|.
name|getResource
argument_list|(
literal|0
argument_list|)
operator|.
name|getContent
argument_list|()
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|XMLDBException
name|e
parameter_list|)
block|{
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"testFunctionDoc : XMLDBException: "
operator|+
name|e
argument_list|)
expr_stmt|;
name|fail
argument_list|(
name|e
operator|.
name|getMessage
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
specifier|private
name|String
name|makeString
parameter_list|(
name|int
name|n
parameter_list|)
block|{
name|StringBuffer
name|b
init|=
operator|new
name|StringBuffer
argument_list|()
decl_stmt|;
name|char
name|c
init|=
literal|'a'
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|n
condition|;
name|i
operator|++
control|)
block|{
name|b
operator|.
name|append
argument_list|(
name|c
argument_list|)
expr_stmt|;
block|}
return|return
name|b
operator|.
name|toString
argument_list|()
return|;
block|}
specifier|public
name|void
name|testTextConstructor
parameter_list|()
block|{
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"testTextConstructor 1: ========"
argument_list|)
expr_stmt|;
name|String
name|query
init|=
literal|"text{ \"a\" }, text{ \"b\" }, text{ \"c\" }, text{ \"d\" }"
decl_stmt|;
try|try
block|{
name|XPathQueryService
name|service
init|=
operator|(
name|XPathQueryService
operator|)
name|getTestCollection
argument_list|()
operator|.
name|getService
argument_list|(
literal|"XPathQueryService"
argument_list|,
literal|"1.0"
argument_list|)
decl_stmt|;
name|ResourceSet
name|result
init|=
name|service
operator|.
name|query
argument_list|(
name|query
argument_list|)
decl_stmt|;
name|printResult
argument_list|(
name|result
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"XQuery: "
operator|+
name|query
argument_list|,
literal|4
argument_list|,
name|result
operator|.
name|getSize
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"XQuery: "
operator|+
name|query
argument_list|,
literal|"a"
argument_list|,
name|result
operator|.
name|getResource
argument_list|(
literal|0
argument_list|)
operator|.
name|getContent
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"XQuery: "
operator|+
name|query
argument_list|,
literal|"b"
argument_list|,
name|result
operator|.
name|getResource
argument_list|(
literal|1
argument_list|)
operator|.
name|getContent
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"XQuery: "
operator|+
name|query
argument_list|,
literal|"c"
argument_list|,
name|result
operator|.
name|getResource
argument_list|(
literal|2
argument_list|)
operator|.
name|getContent
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"XQuery: "
operator|+
name|query
argument_list|,
literal|"d"
argument_list|,
name|result
operator|.
name|getResource
argument_list|(
literal|3
argument_list|)
operator|.
name|getContent
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|XMLDBException
name|e
parameter_list|)
block|{
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"testAttributeAxis(): XMLDBException: "
operator|+
name|e
argument_list|)
expr_stmt|;
name|fail
argument_list|(
name|e
operator|.
name|getMessage
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
specifier|public
name|void
name|testUserEscalationForInMemoryNodes
parameter_list|()
block|{
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"testUserEscalationForInMemoryNodes 1: ========"
argument_list|)
expr_stmt|;
name|String
name|query
init|=
literal|"xmldb:login(\"xmldb:exist:///db\", \"guest\", \"guest\"), xmldb:get-current-user(), let $node :=<node id=\"1\">value</node>, $null := $node[@id eq '1'] return xmldb:get-current-user()"
decl_stmt|;
try|try
block|{
name|XPathQueryService
name|service
init|=
operator|(
name|XPathQueryService
operator|)
name|getTestCollection
argument_list|()
operator|.
name|getService
argument_list|(
literal|"XPathQueryService"
argument_list|,
literal|"1.0"
argument_list|)
decl_stmt|;
name|ResourceSet
name|result
init|=
name|service
operator|.
name|query
argument_list|(
name|query
argument_list|)
decl_stmt|;
name|printResult
argument_list|(
name|result
argument_list|)
expr_stmt|;
name|Resource
name|loggedIn
init|=
name|result
operator|.
name|getResource
argument_list|(
literal|0
argument_list|)
decl_stmt|;
name|Resource
name|currentUser
init|=
name|result
operator|.
name|getResource
argument_list|(
literal|1
argument_list|)
decl_stmt|;
name|Resource
name|currentUserAfterInMemoryOp
init|=
name|result
operator|.
name|getResource
argument_list|(
literal|2
argument_list|)
decl_stmt|;
comment|//check the login as guest worked
name|assertEquals
argument_list|(
literal|"Logged in as quest: "
operator|+
name|loggedIn
operator|.
name|getContent
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|,
literal|"true"
argument_list|,
name|loggedIn
operator|.
name|getContent
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
comment|//check that we are guest
name|assertEquals
argument_list|(
literal|"After Login as guest, User should be guest and is: "
operator|+
name|currentUser
operator|.
name|getContent
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|,
literal|"guest"
argument_list|,
name|currentUser
operator|.
name|getContent
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
comment|//check that we are still guest
name|assertEquals
argument_list|(
literal|"After Query, User should still be guest and is: "
operator|+
name|currentUserAfterInMemoryOp
operator|.
name|getContent
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|,
literal|"guest"
argument_list|,
name|currentUserAfterInMemoryOp
operator|.
name|getContent
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|XMLDBException
name|e
parameter_list|)
block|{
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"testUserEscalationForInMemoryNodes(): XMLDBException: "
operator|+
name|e
argument_list|)
expr_stmt|;
name|fail
argument_list|(
name|e
operator|.
name|getMessage
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
specifier|public
name|void
name|testConstructedAttributeValue
parameter_list|()
block|{
name|String
name|query
init|=
literal|"let $attr := attribute d { \"xxx\" } "
operator|+
literal|"return string($attr)"
decl_stmt|;
try|try
block|{
name|XPathQueryService
name|service
init|=
operator|(
name|XPathQueryService
operator|)
name|getTestCollection
argument_list|()
operator|.
name|getService
argument_list|(
literal|"XPathQueryService"
argument_list|,
literal|"1.0"
argument_list|)
decl_stmt|;
name|ResourceSet
name|result
init|=
name|service
operator|.
name|query
argument_list|(
name|query
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|result
operator|.
name|getSize
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"xxx"
argument_list|,
name|result
operator|.
name|getResource
argument_list|(
literal|0
argument_list|)
operator|.
name|getContent
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|XMLDBException
name|e
parameter_list|)
block|{
name|fail
argument_list|(
name|e
operator|.
name|getMessage
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
specifier|public
name|void
name|testAttributeAxis
parameter_list|()
block|{
name|ResourceSet
name|result
decl_stmt|;
name|String
name|query
decl_stmt|;
name|XMLResource
name|resu
decl_stmt|;
try|try
block|{
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"testAttributeAxis 1: ========"
argument_list|)
expr_stmt|;
name|String
name|large
init|=
name|createXMLContentWithLargeString
argument_list|()
decl_stmt|;
name|XPathQueryService
name|service
init|=
name|storeXMLStringAndGetQueryService
argument_list|(
name|file_name
argument_list|,
name|xml
argument_list|)
decl_stmt|;
name|query
operator|=
literal|"let $node := (<c id=\"OK\">b</c>)/descendant-or-self::*/attribute::id "
operator|+
literal|"return<a>{$node}</a>"
expr_stmt|;
name|result
operator|=
name|service
operator|.
name|query
argument_list|(
name|query
argument_list|)
expr_stmt|;
name|printResult
argument_list|(
name|result
argument_list|)
expr_stmt|;
name|resu
operator|=
operator|(
name|XMLResource
operator|)
name|result
operator|.
name|getResource
argument_list|(
literal|0
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"XQuery: "
operator|+
name|query
argument_list|,
literal|"OK"
argument_list|,
operator|(
operator|(
name|Element
operator|)
name|resu
operator|.
name|getContentAsDOM
argument_list|()
operator|)
operator|.
name|getAttribute
argument_list|(
literal|"id"
argument_list|)
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|XMLDBException
name|e
parameter_list|)
block|{
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"testAttributeAxis(): XMLDBException: "
operator|+
name|e
argument_list|)
expr_stmt|;
name|e
operator|.
name|printStackTrace
argument_list|()
expr_stmt|;
name|fail
argument_list|(
name|e
operator|.
name|getMessage
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
specifier|public
name|void
name|bugtestInstanceOf
parameter_list|()
block|{
try|try
block|{
name|XPathQueryService
name|service
init|=
name|storeXMLStringAndGetQueryService
argument_list|(
name|NUMBERS_XML
argument_list|,
name|numbers
argument_list|)
decl_stmt|;
name|String
name|query
init|=
literal|"let $doc := document {<element/> } "
operator|+
literal|"return $doc/root() instance of document-node()"
decl_stmt|;
name|ResourceSet
name|result
init|=
name|service
operator|.
name|query
argument_list|(
name|query
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|"XQuery: "
operator|+
name|query
argument_list|,
literal|"true"
argument_list|,
name|result
operator|.
name|getResource
argument_list|(
literal|0
argument_list|)
operator|.
name|getContent
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|XMLDBException
name|e
parameter_list|)
block|{
name|e
operator|.
name|printStackTrace
argument_list|()
expr_stmt|;
name|fail
argument_list|(
name|e
operator|.
name|getMessage
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
specifier|public
name|void
name|testLargeAttributeSimple
parameter_list|()
block|{
name|ResourceSet
name|result
decl_stmt|;
name|String
name|query
decl_stmt|;
name|XMLResource
name|resu
decl_stmt|;
try|try
block|{
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"testLargeAttributeSimple 1: ========"
argument_list|)
expr_stmt|;
name|String
name|large
init|=
name|createXMLContentWithLargeString
argument_list|()
decl_stmt|;
name|XPathQueryService
name|service
init|=
name|storeXMLStringAndGetQueryService
argument_list|(
name|file_name
argument_list|,
name|xml
argument_list|)
decl_stmt|;
name|query
operator|=
literal|"doc('"
operator|+
name|file_name
operator|+
literal|"') / details/metadata[@docid= '"
operator|+
name|large
operator|+
literal|"' ]"
expr_stmt|;
name|result
operator|=
name|service
operator|.
name|queryResource
argument_list|(
name|file_name
argument_list|,
name|query
argument_list|)
expr_stmt|;
name|printResult
argument_list|(
name|result
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"XQuery: "
operator|+
name|query
argument_list|,
name|nbElem
argument_list|,
name|result
operator|.
name|getSize
argument_list|()
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|XMLDBException
name|e
parameter_list|)
block|{
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"testLargeAttributeSimple(): XMLDBException: "
operator|+
name|e
argument_list|)
expr_stmt|;
name|fail
argument_list|(
name|e
operator|.
name|getMessage
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
specifier|public
name|void
name|testCDATASerialization
parameter_list|()
block|{
name|ResourceSet
name|result
decl_stmt|;
name|String
name|query
decl_stmt|;
name|XMLResource
name|resu
decl_stmt|;
try|try
block|{
name|XPathQueryService
name|service
init|=
operator|(
name|XPathQueryService
operator|)
name|getTestCollection
argument_list|()
operator|.
name|getService
argument_list|(
literal|"XPathQueryService"
argument_list|,
literal|"1.0"
argument_list|)
decl_stmt|;
name|query
operator|=
literal|"let $doc := document{<root><![CDATA[gaga]]></root> } "
operator|+
literal|"return $doc/root/string()"
expr_stmt|;
name|result
operator|=
name|service
operator|.
name|query
argument_list|(
name|query
argument_list|)
expr_stmt|;
name|resu
operator|=
operator|(
name|XMLResource
operator|)
name|result
operator|.
name|getResource
argument_list|(
literal|0
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"XQuery: "
operator|+
name|query
argument_list|,
literal|"gaga"
argument_list|,
name|resu
operator|.
name|getContent
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|XMLDBException
name|e
parameter_list|)
block|{
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"testAttributeAxis(): XMLDBException: "
operator|+
name|e
argument_list|)
expr_stmt|;
name|e
operator|.
name|printStackTrace
argument_list|()
expr_stmt|;
name|fail
argument_list|(
name|e
operator|.
name|getMessage
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
specifier|public
name|void
name|testLargeAttributeContains
parameter_list|()
block|{
name|ResourceSet
name|result
decl_stmt|;
name|String
name|query
decl_stmt|;
name|XMLResource
name|resu
decl_stmt|;
try|try
block|{
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"testLargeAttributeSimple 1: ========"
argument_list|)
expr_stmt|;
name|String
name|large
init|=
name|createXMLContentWithLargeString
argument_list|()
decl_stmt|;
name|XPathQueryService
name|service
init|=
name|storeXMLStringAndGetQueryService
argument_list|(
name|file_name
argument_list|,
name|xml
argument_list|)
decl_stmt|;
name|query
operator|=
literal|"doc('"
operator|+
name|file_name
operator|+
literal|"') / details/metadata[ contains(@docid, 'aa') ]"
expr_stmt|;
name|result
operator|=
name|service
operator|.
name|queryResource
argument_list|(
name|file_name
argument_list|,
name|query
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"XQuery: "
operator|+
name|query
argument_list|,
name|nbElem
argument_list|,
name|result
operator|.
name|getSize
argument_list|()
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|XMLDBException
name|e
parameter_list|)
block|{
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"testLargeAttributeSimple(): XMLDBException: "
operator|+
name|e
argument_list|)
expr_stmt|;
name|fail
argument_list|(
name|e
operator|.
name|getMessage
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
specifier|public
name|void
name|testLargeAttributeKeywordOperator
parameter_list|()
block|{
name|ResourceSet
name|result
decl_stmt|;
name|String
name|query
decl_stmt|;
name|XMLResource
name|resu
decl_stmt|;
try|try
block|{
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"testLargeAttributeSimple 1: ========"
argument_list|)
expr_stmt|;
name|String
name|large
init|=
name|createXMLContentWithLargeString
argument_list|()
decl_stmt|;
name|XPathQueryService
name|service
init|=
name|storeXMLStringAndGetQueryService
argument_list|(
name|file_name
argument_list|,
name|xml
argument_list|)
decl_stmt|;
name|query
operator|=
literal|"doc('"
operator|+
name|file_name
operator|+
literal|"') / details/metadata[ @docid&= '"
operator|+
name|large
operator|+
literal|"' ]"
expr_stmt|;
name|result
operator|=
name|service
operator|.
name|queryResource
argument_list|(
name|file_name
argument_list|,
name|query
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"XQuery: "
operator|+
name|query
argument_list|,
name|nbElem
argument_list|,
name|result
operator|.
name|getSize
argument_list|()
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|XMLDBException
name|e
parameter_list|)
block|{
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"testLargeAttributeSimple(): XMLDBException: "
operator|+
name|e
argument_list|)
expr_stmt|;
name|fail
argument_list|(
name|e
operator|.
name|getMessage
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
specifier|public
name|void
name|bugtestAttributeNamespace
parameter_list|()
block|{
name|String
name|query
init|=
literal|"declare function local:copy($nodes as node()*) as node()* {"
operator|+
literal|"for $n in $nodes return "
operator|+
literal|"if ($n instance of element()) then "
operator|+
literal|"  element {node-name($n)} {(local:copy($n/@*), local:copy($n/node()))} "
operator|+
literal|"else if ($n instance of attribute()) then "
operator|+
literal|"  attribute {node-name($n)} {$n} "
operator|+
literal|"else if ($n instance of text()) then "
operator|+
literal|"  text {$n} "
operator|+
literal|"else "
operator|+
literal|"<Other/>"
operator|+
literal|"};"
operator|+
literal|"let $c :="
operator|+
literal|"<c:C  xmlns:c=\"http://c\" xmlns:d=\"http://d\" d:d=\"ddd\">"
operator|+
literal|"ccc"
operator|+
literal|"</c:C>"
operator|+
literal|"return local:copy($c)"
decl_stmt|;
try|try
block|{
name|XPathQueryService
name|service
init|=
operator|(
name|XPathQueryService
operator|)
name|getTestCollection
argument_list|()
operator|.
name|getService
argument_list|(
literal|"XPathQueryService"
argument_list|,
literal|"1.0"
argument_list|)
decl_stmt|;
name|ResourceSet
name|result
init|=
name|service
operator|.
name|query
argument_list|(
name|query
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|result
operator|.
name|getSize
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"<c:C xmlns:c=\"http://c\" xmlns:d=\"http://d\" d:d=\"ddd\">"
operator|+
literal|"ccc"
operator|+
literal|"</c:C>"
argument_list|,
name|result
operator|.
name|getResource
argument_list|(
literal|0
argument_list|)
operator|.
name|getContent
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|XMLDBException
name|e
parameter_list|)
block|{
name|fail
argument_list|(
name|e
operator|.
name|getMessage
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
specifier|public
name|void
name|testNameConflicts
parameter_list|()
block|{
name|String
name|query
init|=
literal|"let $a :=<name name=\"Test\"/> return<wrap>{$a//@name}</wrap>"
decl_stmt|;
try|try
block|{
name|XPathQueryService
name|service
init|=
operator|(
name|XPathQueryService
operator|)
name|getTestCollection
argument_list|()
operator|.
name|getService
argument_list|(
literal|"XPathQueryService"
argument_list|,
literal|"1.0"
argument_list|)
decl_stmt|;
name|ResourceSet
name|result
init|=
name|service
operator|.
name|query
argument_list|(
name|query
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|result
operator|.
name|getSize
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"<wrap name=\"Test\"/>"
argument_list|,
name|result
operator|.
name|getResource
argument_list|(
literal|0
argument_list|)
operator|.
name|getContent
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|XMLDBException
name|e
parameter_list|)
block|{
name|fail
argument_list|(
name|e
operator|.
name|getMessage
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
specifier|public
name|void
name|testSerialization
parameter_list|()
block|{
name|ResourceSet
name|result
decl_stmt|;
name|String
name|query
decl_stmt|;
name|boolean
name|exceptionThrown
decl_stmt|;
name|String
name|message
decl_stmt|;
try|try
block|{
name|XPathQueryService
name|service
init|=
name|storeXMLStringAndGetQueryService
argument_list|(
name|NUMBERS_XML
argument_list|,
name|numbers
argument_list|)
decl_stmt|;
name|query
operator|=
literal|"let $a :=<test><foo name='bar'/><foo name='bar'/></test>"
operator|+
literal|"return<attribute>{$a/foo/@name}</attribute>"
expr_stmt|;
try|try
block|{
name|message
operator|=
literal|""
expr_stmt|;
name|result
operator|=
name|service
operator|.
name|query
argument_list|(
name|query
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|XMLDBException
name|e
parameter_list|)
block|{
name|message
operator|=
name|e
operator|.
name|getMessage
argument_list|()
expr_stmt|;
block|}
name|assertTrue
argument_list|(
name|message
operator|.
name|indexOf
argument_list|(
literal|"XQDY0025"
argument_list|)
operator|>
operator|-
literal|1
argument_list|)
expr_stmt|;
name|query
operator|=
literal|"let $a :=<foo name='bar'/> return $a/@name"
expr_stmt|;
try|try
block|{
name|message
operator|=
literal|""
expr_stmt|;
name|result
operator|=
name|service
operator|.
name|query
argument_list|(
name|query
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|XMLDBException
name|e
parameter_list|)
block|{
name|message
operator|=
name|e
operator|.
name|getMessage
argument_list|()
expr_stmt|;
block|}
comment|//TODO : how toserialize this resultand get the error ? -pb
comment|//assertTrue(message.indexOf("XQDY0025")> -1);
block|}
catch|catch
parameter_list|(
name|XMLDBException
name|e
parameter_list|)
block|{
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"testVariable : XMLDBException: "
operator|+
name|e
argument_list|)
expr_stmt|;
name|fail
argument_list|(
name|e
operator|.
name|getMessage
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
comment|/** CAUTION side effect on field xml 	 * @return the large string contained in the atrbute(s) 	 */
specifier|private
name|String
name|createXMLContentWithLargeString
parameter_list|()
block|{
name|String
name|large
init|=
name|makeString
argument_list|(
name|stringSize
argument_list|)
decl_stmt|;
name|String
name|head
init|=
literal|"<details format='xml'>"
decl_stmt|;
name|String
name|elem
init|=
literal|"<metadata docid='"
operator|+
name|large
operator|+
literal|"'></metadata>"
decl_stmt|;
name|String
name|tail
init|=
literal|"</details>"
decl_stmt|;
name|xml
operator|=
name|head
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|nbElem
condition|;
name|i
operator|++
control|)
name|xml
operator|+=
name|elem
expr_stmt|;
name|xml
operator|+=
name|tail
expr_stmt|;
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"XML:\n"
operator|+
name|xml
argument_list|)
expr_stmt|;
return|return
name|large
return|;
block|}
specifier|public
name|void
name|testRetrieveLargeAttribute
parameter_list|()
throws|throws
name|XMLDBException
block|{
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"testRetrieveLargeAttribute 1: ========"
argument_list|)
expr_stmt|;
name|XMLResource
name|res
init|=
operator|(
name|XMLResource
operator|)
name|getTestCollection
argument_list|()
operator|.
name|getResource
argument_list|(
name|file_name
argument_list|)
decl_stmt|;
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"res.getContent(): "
operator|+
name|res
operator|.
name|getContent
argument_list|()
argument_list|)
expr_stmt|;
block|}
comment|/** This test is obsolete because testLargeAttributeSimple() reproduces the problem without a file, 	 * but I keep it to show how one can test with an XML file. */
specifier|public
name|void
name|obsoleteTestLargeAttributeRealFile
parameter_list|()
block|{
name|ResourceSet
name|result
decl_stmt|;
name|String
name|query
decl_stmt|;
name|XMLResource
name|resu
decl_stmt|;
try|try
block|{
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"testLargeAttributeRealFile 1: ========"
argument_list|)
expr_stmt|;
name|String
name|large
decl_stmt|;
name|large
operator|=
literal|"challengesininformationretrievalandlanguagemodelingreportofaworkshopheldatthecenterforintelligentinformationretrievaluniversityofmassachusettsamherstseptember2002-extdocid-howardturtlemarksandersonnorbertfuhralansmeatonjayaslamdragomirradevwesselkraaijellenvoorheesamitsinghaldonnaharmanjaypontejamiecallannicholasbelkinjohnlaffertylizliddyronirosenfeldvictorlavrenkodavidjharperrichschwartzjohnpragerchengxiangzhaijinxixusalimroukosstephenrobertsonandrewmccallumbrucecroftrmanmathasuedumaisdjoerdhiemstraeduardhovyralphweischedelthomashofmannjamesallanchrisbuckleyphilipresnikdavidlewis2003"
expr_stmt|;
if|if
condition|(
name|attributeXML
operator|!=
literal|null
condition|)
name|large
operator|=
name|attributeXML
expr_stmt|;
name|String
name|xml
init|=
literal|"<details format='xml'><metadata docid='"
operator|+
name|large
operator|+
literal|"'></metadata></details>"
decl_stmt|;
specifier|final
name|String
name|FILE_NAME
init|=
literal|"detail_xml.xml"
decl_stmt|;
name|XPathQueryService
name|service
init|=
name|storeXMLStringAndGetQueryService
argument_list|(
name|FILE_NAME
argument_list|)
decl_stmt|;
name|query
operator|=
literal|"doc('"
operator|+
name|FILE_NAME
operator|+
literal|"') / details/metadata[@docid= '"
operator|+
name|large
operator|+
literal|"' ]"
expr_stmt|;
comment|// fails !!!
comment|// query = "doc('"+ FILE_NAME+"') / details/metadata[ docid= '" + large + "' ]"; // test passes!
name|result
operator|=
name|service
operator|.
name|queryResource
argument_list|(
name|FILE_NAME
argument_list|,
name|query
argument_list|)
expr_stmt|;
name|printResult
argument_list|(
name|result
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"XQuery: "
operator|+
name|query
argument_list|,
literal|2
argument_list|,
name|result
operator|.
name|getSize
argument_list|()
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|XMLDBException
name|e
parameter_list|)
block|{
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"testLargeAttributeRealFile(): XMLDBException: "
operator|+
name|e
argument_list|)
expr_stmt|;
name|fail
argument_list|(
name|e
operator|.
name|getMessage
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
specifier|public
name|void
name|bugtestXUpdateWithAdjacentTextNodes
parameter_list|()
block|{
name|ResourceSet
name|result
decl_stmt|;
name|String
name|query
decl_stmt|;
name|query
operator|=
literal|"let $coll := xmldb:collection('/db', 'guest', 'guest')"
operator|+
literal|"let $name := xmldb:store($coll , 'xupdateTest.xml',<test>aaa</test>)"
operator|+
literal|"let $xu :="
operator|+
literal|"<xu:modifications xmlns:xu='http://www.xmldb.org/xupdate' version='1.0'>"
operator|+
literal|"<xu:append select='/test'>"
operator|+
literal|"<xu:text>yyy</xu:text>"
operator|+
literal|"</xu:append>"
operator|+
literal|"</xu:modifications>"
operator|+
literal|"let $count := xmldb:update($coll , $xu)"
operator|+
literal|"for $textNode in document('/db/xupdateTest.xml')/test/text()"
operator|+
literal|"	return<text id='{util:node-id($textNode)}'>{$textNode}</text>"
expr_stmt|;
try|try
block|{
name|XPathQueryService
name|service
init|=
name|storeXMLStringAndGetQueryService
argument_list|(
name|NUMBERS_XML
argument_list|,
name|numbers
argument_list|)
decl_stmt|;
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"testXUpdateWithAdvancentTextNodes 1: ========"
argument_list|)
expr_stmt|;
name|result
operator|=
name|service
operator|.
name|query
argument_list|(
name|query
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"XQuery: "
operator|+
name|query
argument_list|,
literal|1
argument_list|,
name|result
operator|.
name|getSize
argument_list|()
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|XMLDBException
name|e
parameter_list|)
block|{
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"testXUpdateWithAdvancentTextNodes(): XMLDBException: "
operator|+
name|e
argument_list|)
expr_stmt|;
name|fail
argument_list|(
name|e
operator|.
name|getMessage
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
comment|//TODO : understand this test and make sure that the expected result is correct
comment|//expected:<3> but was:<2>
specifier|public
name|void
name|bugtestXUpdateAttributesAndElements
parameter_list|()
block|{
name|ResourceSet
name|result
decl_stmt|;
name|String
name|query
decl_stmt|;
name|query
operator|=
literal|"declare function local:update-game($game) {\n"
operator|+
literal|"local:update-frames($game),\n"
operator|+
literal|"update insert\n"
operator|+
literal|"<stats>\n"
operator|+
literal|"<strikes>4</strikes>\n"
operator|+
literal|"<spares>\n"
operator|+
literal|"<attempted>4</attempted>\n"
operator|+
literal|"</spares>\n"
operator|+
literal|"</stats>\n"
operator|+
literal|"into $game\n"
operator|+
literal|"};\n"
operator|+
literal|"declare function local:update-frames($game) {\n"
operator|+
comment|// Uncomment this, and it works:
comment|//"for $frame in $game/frame return update insert<processed/> into $frame,\n" +
literal|"for $frame in $game/frame\n"
operator|+
literal|"return update insert attribute points {4} into $frame\n"
operator|+
literal|"};\n"
operator|+
literal|"let $series := document('bowling.xml')/series\n"
operator|+
literal|"let $nul1 := for $game in $series/game return local:update-game($game)\n"
operator|+
literal|"return $series/game/stats\n"
expr_stmt|;
try|try
block|{
name|XPathQueryService
name|service
init|=
name|storeXMLStringAndGetQueryService
argument_list|(
name|BOWLING_XML
argument_list|,
name|bowling
argument_list|)
decl_stmt|;
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"testXUpdateAttributesAndElements 1: ========"
argument_list|)
expr_stmt|;
name|result
operator|=
name|service
operator|.
name|query
argument_list|(
name|query
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"XQuery: "
operator|+
name|query
argument_list|,
literal|3
argument_list|,
name|result
operator|.
name|getSize
argument_list|()
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|XMLDBException
name|e
parameter_list|)
block|{
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"testXUpdateAttributesAndElements(): XMLDBException: "
operator|+
name|e
argument_list|)
expr_stmt|;
name|fail
argument_list|(
name|e
operator|.
name|getMessage
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
specifier|public
name|void
name|testNodeName
parameter_list|()
block|{
name|String
name|query
init|=
literal|"declare function local:name($node as node()) as xs:string? { "
operator|+
literal|" if ($node/self::element() != '') then name($node) else () }; "
operator|+
literal|" let $n :=<!-- Just a comment! --> return local:name($n) "
decl_stmt|;
name|XPathQueryService
name|service
decl_stmt|;
try|try
block|{
name|service
operator|=
operator|(
name|XPathQueryService
operator|)
name|getTestCollection
argument_list|()
operator|.
name|getService
argument_list|(
literal|"XPathQueryService"
argument_list|,
literal|"1.0"
argument_list|)
expr_stmt|;
name|ResourceSet
name|result
init|=
name|service
operator|.
name|query
argument_list|(
name|query
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|"XQuery: "
operator|+
name|query
argument_list|,
literal|0
argument_list|,
name|result
operator|.
name|getSize
argument_list|()
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|XMLDBException
name|ex
parameter_list|)
block|{
name|fail
argument_list|(
name|ex
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
comment|// DWES Funny in sandbox and REST it fails ; here it is OK... sometimes
comment|// http://sourceforge.net/tracker/index.php?func=detail&aid=1691112&group_id=17691&atid=117691
specifier|public
name|void
name|bugtestOrder_1691112
parameter_list|()
block|{
name|String
name|query
init|=
literal|"declare namespace tt = \"http://example.com\";"
operator|+
literal|"declare function tt:function( $function as element(Function)) {"
operator|+
literal|"  let $functions :="
operator|+
literal|"    for $subfunction in $function/Function"
operator|+
literal|"    return tt:function($subfunction)"
operator|+
literal|"   let $unused := distinct-values($functions/NonExistingElement)"
operator|+
literal|"  return"
operator|+
literal|"<Function>"
operator|+
literal|"  {"
operator|+
literal|"    $function/Name,"
operator|+
literal|"    $functions"
operator|+
literal|"  }"
operator|+
literal|"</Function>"
operator|+
literal|"};"
operator|+
literal|"let $funcs :="
operator|+
literal|"<Function>"
operator|+
literal|"<Name>Airmount 1</Name>"
operator|+
literal|"<Function>"
operator|+
literal|"<Name>Position</Name>"
operator|+
literal|"</Function>"
operator|+
literal|"<Function>"
operator|+
literal|"<Name>Velocity</Name>"
operator|+
literal|"</Function>"
operator|+
literal|"</Function>"
operator|+
literal|"return"
operator|+
literal|"  tt:function($funcs)"
decl_stmt|;
name|String
name|expectedresult
init|=
literal|"<Function>\n"
operator|+
literal|"<Name>Airmount 1</Name>\n"
operator|+
literal|"<Function>\n"
operator|+
literal|"<Name>Position</Name>\n"
operator|+
literal|"</Function>\n"
operator|+
literal|"<Function>\n"
operator|+
literal|"<Name>Velocity</Name>\n"
operator|+
literal|"</Function>\n"
operator|+
literal|"</Function>"
decl_stmt|;
try|try
block|{
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
literal|25
condition|;
name|i
operator|++
control|)
block|{
comment|// repeat a few times
name|XPathQueryService
name|service
init|=
operator|(
name|XPathQueryService
operator|)
name|getTestCollection
argument_list|()
operator|.
name|getService
argument_list|(
literal|"XPathQueryService"
argument_list|,
literal|"1.0"
argument_list|)
decl_stmt|;
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"Attempt "
operator|+
name|i
argument_list|)
expr_stmt|;
name|ResourceSet
name|result
init|=
name|service
operator|.
name|query
argument_list|(
name|query
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|result
operator|.
name|getSize
argument_list|()
argument_list|)
expr_stmt|;
name|printResult
argument_list|(
name|result
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|expectedresult
argument_list|,
name|result
operator|.
name|getResource
argument_list|(
literal|0
argument_list|)
operator|.
name|getContent
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
name|Exception
name|ex
parameter_list|)
block|{
name|fail
argument_list|(
name|ex
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
comment|// http://sourceforge.net/tracker/index.php?func=detail&aid=1691177&group_id=17691&atid=117691
specifier|public
name|void
name|bugtestAttribute_1691177
parameter_list|()
block|{
name|String
name|query
init|=
literal|"declare namespace xmldb = \"http://exist-db.org/xquery/xmldb\"; "
operator|+
literal|"let $uri := xmldb:store(\"/db\", \"insertAttribDoc.xml\",<C/>) "
operator|+
literal|"let $node := doc($uri)/element() "
operator|+
literal|"let $attrib :=<Value f=\"ATTRIB VALUE\"/>/@* "
operator|+
literal|"return update insert $attrib into $node  "
decl_stmt|;
name|XPathQueryService
name|service
decl_stmt|;
try|try
block|{
name|service
operator|=
operator|(
name|XPathQueryService
operator|)
name|getTestCollection
argument_list|()
operator|.
name|getService
argument_list|(
literal|"XPathQueryService"
argument_list|,
literal|"1.0"
argument_list|)
expr_stmt|;
name|ResourceSet
name|result
init|=
name|service
operator|.
name|query
argument_list|(
name|query
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|"XQuery: "
operator|+
name|query
argument_list|,
literal|0
argument_list|,
name|result
operator|.
name|getSize
argument_list|()
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|XMLDBException
name|ex
parameter_list|)
block|{
name|fail
argument_list|(
name|ex
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
comment|// http://sourceforge.net/tracker/index.php?func=detail&aid=1691174&group_id=17691&atid=117691
specifier|public
name|void
name|bugtestAttribute_1691174
parameter_list|()
block|{
name|String
name|query
init|=
literal|"declare function local:show($el1, $el2) { "
operator|+
literal|"<Foobar> "
operator|+
literal|"	{ (\"first: \", $el1, \" second: \", $el2) } "
operator|+
literal|"</Foobar> "
operator|+
literal|"}; "
operator|+
literal|"declare function local:attrib($n as node()) { "
operator|+
literal|"<Attrib>{$n}</Attrib> "
operator|+
literal|"}; "
operator|+
literal|"local:show( "
operator|+
literal|"<Attrib name=\"value\"/>, "
operator|+
literal|"	local:attrib(attribute name {\"value\"})  (: Exist bug! :) "
operator|+
literal|")  "
decl_stmt|;
name|XPathQueryService
name|service
decl_stmt|;
try|try
block|{
name|service
operator|=
operator|(
name|XPathQueryService
operator|)
name|getTestCollection
argument_list|()
operator|.
name|getService
argument_list|(
literal|"XPathQueryService"
argument_list|,
literal|"1.0"
argument_list|)
expr_stmt|;
name|ResourceSet
name|result
init|=
name|service
operator|.
name|query
argument_list|(
name|query
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|"XQuery: "
operator|+
name|query
argument_list|,
literal|0
argument_list|,
name|result
operator|.
name|getSize
argument_list|()
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|XMLDBException
name|ex
parameter_list|)
block|{
name|fail
argument_list|(
name|ex
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
specifier|public
name|void
name|bugtestQnameToString_1632365
parameter_list|()
block|{
name|String
name|query
init|=
literal|"let $qname := QName(\"http://test.org\", \"test:name\") "
operator|+
literal|"return xs:string($qname)"
decl_stmt|;
name|String
name|expectedresult
init|=
literal|"test:name"
decl_stmt|;
try|try
block|{
name|XPathQueryService
name|service
init|=
operator|(
name|XPathQueryService
operator|)
name|getTestCollection
argument_list|()
operator|.
name|getService
argument_list|(
literal|"XPathQueryService"
argument_list|,
literal|"1.0"
argument_list|)
decl_stmt|;
name|ResourceSet
name|result
init|=
name|service
operator|.
name|query
argument_list|(
name|query
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|expectedresult
argument_list|,
name|result
operator|.
name|getResource
argument_list|(
literal|0
argument_list|)
operator|.
name|getContent
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|XMLDBException
name|ex
parameter_list|)
block|{
name|ex
operator|.
name|printStackTrace
argument_list|()
expr_stmt|;
name|fail
argument_list|(
name|ex
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
specifier|public
name|void
name|testComments_1715035
parameter_list|()
block|{
try|try
block|{
name|String
name|query
init|=
literal|"<!--< aa> -->"
decl_stmt|;
name|XPathQueryService
name|service
init|=
operator|(
name|XPathQueryService
operator|)
name|getTestCollection
argument_list|()
operator|.
name|getService
argument_list|(
literal|"XPathQueryService"
argument_list|,
literal|"1.0"
argument_list|)
decl_stmt|;
name|ResourceSet
name|result
init|=
name|service
operator|.
name|query
argument_list|(
name|query
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|query
argument_list|,
name|result
operator|.
name|getResource
argument_list|(
literal|0
argument_list|)
operator|.
name|getContent
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|XMLDBException
name|ex
parameter_list|)
block|{
name|ex
operator|.
name|printStackTrace
argument_list|()
expr_stmt|;
name|fail
argument_list|(
name|ex
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
block|}
try|try
block|{
name|String
name|query
init|=
literal|"<?pi \"<\"aa\">\"?>"
decl_stmt|;
name|XPathQueryService
name|service
init|=
operator|(
name|XPathQueryService
operator|)
name|getTestCollection
argument_list|()
operator|.
name|getService
argument_list|(
literal|"XPathQueryService"
argument_list|,
literal|"1.0"
argument_list|)
decl_stmt|;
name|ResourceSet
name|result
init|=
name|service
operator|.
name|query
argument_list|(
name|query
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|query
argument_list|,
name|result
operator|.
name|getResource
argument_list|(
literal|0
argument_list|)
operator|.
name|getContent
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|XMLDBException
name|ex
parameter_list|)
block|{
name|ex
operator|.
name|printStackTrace
argument_list|()
expr_stmt|;
name|fail
argument_list|(
name|ex
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
specifier|public
name|void
name|bugtestDocumentNode_1730690
parameter_list|()
block|{
try|try
block|{
name|String
name|query
init|=
literal|"let $doc := document {<element/> } "
operator|+
literal|"return $doc/root() instance of document-node()"
decl_stmt|;
name|XPathQueryService
name|service
init|=
operator|(
name|XPathQueryService
operator|)
name|getTestCollection
argument_list|()
operator|.
name|getService
argument_list|(
literal|"XPathQueryService"
argument_list|,
literal|"1.0"
argument_list|)
decl_stmt|;
name|ResourceSet
name|result
init|=
name|service
operator|.
name|query
argument_list|(
name|query
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|"true"
argument_list|,
name|result
operator|.
name|getResource
argument_list|(
literal|0
argument_list|)
operator|.
name|getContent
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|XMLDBException
name|ex
parameter_list|)
block|{
name|ex
operator|.
name|printStackTrace
argument_list|()
expr_stmt|;
name|fail
argument_list|(
name|ex
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
specifier|public
name|void
name|testOrderCompareAtomicType_1733265
parameter_list|()
block|{
try|try
block|{
name|String
name|query
init|=
literal|"( ) = \"A\""
decl_stmt|;
name|XPathQueryService
name|service
init|=
operator|(
name|XPathQueryService
operator|)
name|getTestCollection
argument_list|()
operator|.
name|getService
argument_list|(
literal|"XPathQueryService"
argument_list|,
literal|"1.0"
argument_list|)
decl_stmt|;
name|ResourceSet
name|result
init|=
name|service
operator|.
name|query
argument_list|(
name|query
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|"false"
argument_list|,
name|result
operator|.
name|getResource
argument_list|(
literal|0
argument_list|)
operator|.
name|getContent
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|query
operator|=
literal|"\"A\" = ( )"
expr_stmt|;
name|result
operator|=
name|service
operator|.
name|query
argument_list|(
name|query
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"false"
argument_list|,
name|result
operator|.
name|getResource
argument_list|(
literal|0
argument_list|)
operator|.
name|getContent
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|XMLDBException
name|ex
parameter_list|)
block|{
name|ex
operator|.
name|printStackTrace
argument_list|()
expr_stmt|;
name|fail
argument_list|(
name|ex
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
specifier|public
name|void
name|testPositionInPredicate
parameter_list|()
block|{
try|try
block|{
name|String
name|query
init|=
literal|"let $example :=<Root><Element>1</Element><Element>2</Element></Root>"
operator|+
literal|"return  $example/Element[1] "
decl_stmt|;
name|XPathQueryService
name|service
init|=
operator|(
name|XPathQueryService
operator|)
name|getTestCollection
argument_list|()
operator|.
name|getService
argument_list|(
literal|"XPathQueryService"
argument_list|,
literal|"1.0"
argument_list|)
decl_stmt|;
name|ResourceSet
name|result
init|=
name|service
operator|.
name|query
argument_list|(
name|query
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|"<Element>1</Element>"
argument_list|,
name|result
operator|.
name|getResource
argument_list|(
literal|0
argument_list|)
operator|.
name|getContent
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|query
operator|=
literal|"let $example :=<Root><Element>1</Element><Element>2</Element></Root>"
operator|+
literal|"return  $example/Element[position() = 1] "
expr_stmt|;
name|result
operator|=
name|service
operator|.
name|query
argument_list|(
name|query
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"<Element>1</Element>"
argument_list|,
name|result
operator|.
name|getResource
argument_list|(
literal|0
argument_list|)
operator|.
name|getContent
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|XMLDBException
name|ex
parameter_list|)
block|{
name|ex
operator|.
name|printStackTrace
argument_list|()
expr_stmt|;
name|fail
argument_list|(
name|ex
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
comment|// http://sourceforge.net/support/tracker.php?aid=1740880
specifier|public
name|void
name|testElementConstructionWithNamespace_1740880
parameter_list|()
block|{
try|try
block|{
name|String
name|query
init|=
literal|"let $a :=<foo:Bar xmlns:foo=\"urn:foo\"/> "
operator|+
literal|"let $b := element { QName(\"urn:foo\", \"foo:Bar\") } { () } "
operator|+
literal|"return deep-equal($a, $b) "
decl_stmt|;
name|XPathQueryService
name|service
init|=
operator|(
name|XPathQueryService
operator|)
name|getTestCollection
argument_list|()
operator|.
name|getService
argument_list|(
literal|"XPathQueryService"
argument_list|,
literal|"1.0"
argument_list|)
decl_stmt|;
name|ResourceSet
name|result
init|=
name|service
operator|.
name|query
argument_list|(
name|query
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|"Oops"
argument_list|,
literal|"true"
argument_list|,
name|result
operator|.
name|getResource
argument_list|(
literal|0
argument_list|)
operator|.
name|getContent
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|XMLDBException
name|ex
parameter_list|)
block|{
name|ex
operator|.
name|printStackTrace
argument_list|()
expr_stmt|;
name|fail
argument_list|(
name|ex
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
comment|// http://sourceforge.net/support/tracker.php?aid=1740883
specifier|public
name|void
name|bugtestNoErrorNeOperatorWithSequence_1740883
parameter_list|()
block|{
try|try
block|{
name|String
name|query
init|=
literal|"let $foo :=<Foo><Bar>A</Bar><Bar>B</Bar><Bar>C</Bar></Foo> "
operator|+
literal|"return $foo[Bar ne \"B\"]"
decl_stmt|;
name|XPathQueryService
name|service
init|=
operator|(
name|XPathQueryService
operator|)
name|getTestCollection
argument_list|()
operator|.
name|getService
argument_list|(
literal|"XPathQueryService"
argument_list|,
literal|"1.0"
argument_list|)
decl_stmt|;
name|ResourceSet
name|result
init|=
name|service
operator|.
name|query
argument_list|(
name|query
argument_list|)
decl_stmt|;
name|fail
argument_list|(
literal|"result should have yielded into an error like "
operator|+
literal|"'A sequence of more than one item is not allowed as the first "
operator|+
literal|"operand of 'ne'"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|XMLDBException
name|ex
parameter_list|)
block|{
name|ex
operator|.
name|printStackTrace
argument_list|()
expr_stmt|;
comment|// TODO add real test criterium
name|fail
argument_list|(
literal|"To be removed"
operator|+
name|ex
operator|.
name|getMessage
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
comment|// http://sourceforge.net/support/tracker.php?aid=1740885
specifier|public
name|void
name|testNeOperatorDoesNotWork_1740885
parameter_list|()
block|{
try|try
block|{
name|String
name|query
init|=
literal|"let $foo :=<Foo><Bar>A</Bar><Bar>B</Bar><Bar>C</Bar></Foo>"
operator|+
literal|"return $foo/Bar[. ne \"B\"]"
decl_stmt|;
name|XPathQueryService
name|service
init|=
operator|(
name|XPathQueryService
operator|)
name|getTestCollection
argument_list|()
operator|.
name|getService
argument_list|(
literal|"XPathQueryService"
argument_list|,
literal|"1.0"
argument_list|)
decl_stmt|;
name|ResourceSet
name|result
init|=
name|service
operator|.
name|query
argument_list|(
name|query
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|result
operator|.
name|getSize
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"First"
argument_list|,
literal|"<Bar>A</Bar>"
argument_list|,
name|result
operator|.
name|getResource
argument_list|(
literal|0
argument_list|)
operator|.
name|getContent
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"Second"
argument_list|,
literal|"<Bar>C</Bar>"
argument_list|,
name|result
operator|.
name|getResource
argument_list|(
literal|1
argument_list|)
operator|.
name|getContent
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|XMLDBException
name|ex
parameter_list|)
block|{
name|ex
operator|.
name|printStackTrace
argument_list|()
expr_stmt|;
name|fail
argument_list|(
name|ex
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
comment|// http://sourceforge.net/support/tracker.php?aid=1740891
specifier|public
name|void
name|testEvalLoosesContext_1740891
parameter_list|()
block|{
name|String
name|module
init|=
literal|"module namespace tst = \"urn:test\"; "
operator|+
literal|"declare namespace util = \"http://exist-db.org/xquery/util\";"
operator|+
literal|"declare function tst:bar() as element(Bar)* { "
operator|+
literal|"let $foo :=<Foo><Bar/><Bar/><Bar/></Foo> "
operator|+
literal|"let $query := \"$foo/Bar\" "
operator|+
literal|"let $bar := util:eval($query) "
operator|+
literal|"return $bar };"
decl_stmt|;
name|String
name|module_name
init|=
literal|"module.xqy"
decl_stmt|;
name|Resource
name|doc
decl_stmt|;
comment|// Store module
try|try
block|{
name|Collection
name|testCollection
init|=
name|getTestCollection
argument_list|()
decl_stmt|;
name|doc
operator|=
name|testCollection
operator|.
name|createResource
argument_list|(
name|module_name
argument_list|,
literal|"BinaryResource"
argument_list|)
expr_stmt|;
name|doc
operator|.
name|setContent
argument_list|(
name|module
argument_list|)
expr_stmt|;
operator|(
operator|(
name|EXistResource
operator|)
name|doc
operator|)
operator|.
name|setMimeType
argument_list|(
literal|"application/xquery"
argument_list|)
expr_stmt|;
name|testCollection
operator|.
name|storeResource
argument_list|(
name|doc
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|XMLDBException
name|ex
parameter_list|)
block|{
name|ex
operator|.
name|printStackTrace
argument_list|()
expr_stmt|;
name|fail
argument_list|(
name|ex
operator|.
name|getMessage
argument_list|()
argument_list|)
expr_stmt|;
block|}
try|try
block|{
name|String
name|query
init|=
literal|"import module namespace tst = \"urn:test\""
operator|+
literal|"at \"xmldb:exist:///db/test/module.xqy\"; "
operator|+
literal|"tst:bar()"
decl_stmt|;
name|XPathQueryService
name|service
init|=
operator|(
name|XPathQueryService
operator|)
name|getTestCollection
argument_list|()
operator|.
name|getService
argument_list|(
literal|"XPathQueryService"
argument_list|,
literal|"1.0"
argument_list|)
decl_stmt|;
name|ResourceSet
name|result
init|=
name|service
operator|.
name|query
argument_list|(
name|query
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|3
argument_list|,
name|result
operator|.
name|getSize
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"First"
argument_list|,
literal|"<Bar/>"
argument_list|,
name|result
operator|.
name|getResource
argument_list|(
literal|0
argument_list|)
operator|.
name|getContent
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"Second"
argument_list|,
literal|"<Bar/>"
argument_list|,
name|result
operator|.
name|getResource
argument_list|(
literal|1
argument_list|)
operator|.
name|getContent
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"Third"
argument_list|,
literal|"<Bar/>"
argument_list|,
name|result
operator|.
name|getResource
argument_list|(
literal|2
argument_list|)
operator|.
name|getContent
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|XMLDBException
name|ex
parameter_list|)
block|{
name|ex
operator|.
name|printStackTrace
argument_list|()
expr_stmt|;
name|fail
argument_list|(
name|ex
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
comment|// http://sourceforge.net/support/tracker.php?aid=1740886
specifier|public
name|void
name|testCardinalityIssues_1740886
parameter_list|()
block|{
name|String
name|xmldoc
init|=
literal|"<Foo><Bar/><Bar/><Bar/></Foo>"
decl_stmt|;
name|String
name|query
init|=
literal|"declare namespace tst = \"urn:test\"; "
operator|+
literal|"declare option exist:serialize 'indent=no';"
operator|+
comment|//======
literal|"declare function tst:bar( $foo as element(Foo) ) as element(Foo) { "
operator|+
literal|"let $dummy := $foo/Bar "
operator|+
literal|"return $foo }; "
operator|+
comment|//====== if you leave /test out......
literal|"let $foo := doc(\"/db/test/foo.xml\")/element() "
operator|+
literal|"return tst:bar($foo)"
decl_stmt|;
try|try
block|{
name|XPathQueryService
name|service
init|=
name|storeXMLStringAndGetQueryService
argument_list|(
literal|"foo.xml"
argument_list|,
name|xmldoc
argument_list|)
decl_stmt|;
name|ResourceSet
name|result
init|=
name|service
operator|.
name|query
argument_list|(
name|query
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|result
operator|.
name|getSize
argument_list|()
argument_list|)
expr_stmt|;
name|assertXMLEqual
argument_list|(
literal|"Oops"
argument_list|,
name|xmldoc
argument_list|,
name|result
operator|.
name|getResource
argument_list|(
literal|0
argument_list|)
operator|.
name|getContent
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|ex
parameter_list|)
block|{
name|ex
operator|.
name|printStackTrace
argument_list|()
expr_stmt|;
name|fail
argument_list|(
name|ex
operator|.
name|getMessage
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
comment|// http://sourceforge.net/support/tracker.php?aid=1755910
specifier|public
name|void
name|bugtestQNameString_1755910
parameter_list|()
block|{
try|try
block|{
name|String
name|query
init|=
literal|"let $qname1 := QName(\"http://www.w3.org/2001/XMLSchema\", \"xs:element\") "
operator|+
literal|"let $qname2 := QName(\"http://foo.com\", \"foo:bar\") "
operator|+
literal|"return (xs:string($qname1), xs:string($qname2))"
decl_stmt|;
name|XPathQueryService
name|service
init|=
operator|(
name|XPathQueryService
operator|)
name|getTestCollection
argument_list|()
operator|.
name|getService
argument_list|(
literal|"XPathQueryService"
argument_list|,
literal|"1.0"
argument_list|)
decl_stmt|;
name|ResourceSet
name|result
init|=
name|service
operator|.
name|query
argument_list|(
name|query
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|result
operator|.
name|getSize
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"First"
argument_list|,
literal|"xs:element"
argument_list|,
name|result
operator|.
name|getResource
argument_list|(
literal|0
argument_list|)
operator|.
name|getContent
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"Second"
argument_list|,
literal|"foo:bar"
argument_list|,
name|result
operator|.
name|getResource
argument_list|(
literal|1
argument_list|)
operator|.
name|getContent
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|XMLDBException
name|ex
parameter_list|)
block|{
name|ex
operator|.
name|printStackTrace
argument_list|()
expr_stmt|;
name|fail
argument_list|(
name|ex
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
comment|// http://sourceforge.net/support/tracker.php?aid=1665215
specifier|public
name|void
name|bugtestPredicateMinLast_1665215
parameter_list|()
block|{
try|try
block|{
name|String
name|query
init|=
literal|"declare option exist:serialize 'indent=no';"
operator|+
literal|"let $data :=<parent><child>1</child><child>2</child><child>3</child><child>4</child></parent>"
operator|+
literal|"return<result>{$data/child[min((last(),3))]}</result>"
decl_stmt|;
name|XPathQueryService
name|service
init|=
operator|(
name|XPathQueryService
operator|)
name|getTestCollection
argument_list|()
operator|.
name|getService
argument_list|(
literal|"XPathQueryService"
argument_list|,
literal|"1.0"
argument_list|)
decl_stmt|;
name|ResourceSet
name|result
init|=
name|service
operator|.
name|query
argument_list|(
name|query
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|result
operator|.
name|getSize
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"First"
argument_list|,
literal|"<result><child>3</child></result>"
argument_list|,
name|result
operator|.
name|getResource
argument_list|(
literal|0
argument_list|)
operator|.
name|getContent
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|XMLDBException
name|ex
parameter_list|)
block|{
name|ex
operator|.
name|printStackTrace
argument_list|()
expr_stmt|;
name|fail
argument_list|(
name|ex
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
comment|// http://sourceforge.net/support/tracker.php?aid=1665213
specifier|public
name|void
name|bugtestPredicatePositionLast_1665213
parameter_list|()
block|{
comment|// OK, regression
try|try
block|{
name|String
name|query
init|=
literal|"(1, 2, 3)[ position() = last() ]"
decl_stmt|;
name|XPathQueryService
name|service
init|=
operator|(
name|XPathQueryService
operator|)
name|getTestCollection
argument_list|()
operator|.
name|getService
argument_list|(
literal|"XPathQueryService"
argument_list|,
literal|"1.0"
argument_list|)
decl_stmt|;
name|ResourceSet
name|result
init|=
name|service
operator|.
name|query
argument_list|(
name|query
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|result
operator|.
name|getSize
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"First"
argument_list|,
literal|"3"
argument_list|,
name|result
operator|.
name|getResource
argument_list|(
literal|0
argument_list|)
operator|.
name|getContent
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|XMLDBException
name|ex
parameter_list|)
block|{
name|ex
operator|.
name|printStackTrace
argument_list|()
expr_stmt|;
name|fail
argument_list|(
name|ex
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
block|}
try|try
block|{
name|String
name|query
init|=
literal|"(1, 2, 3)[(position()=last() and position()< 4)]"
decl_stmt|;
name|XPathQueryService
name|service
init|=
operator|(
name|XPathQueryService
operator|)
name|getTestCollection
argument_list|()
operator|.
name|getService
argument_list|(
literal|"XPathQueryService"
argument_list|,
literal|"1.0"
argument_list|)
decl_stmt|;
name|ResourceSet
name|result
init|=
name|service
operator|.
name|query
argument_list|(
name|query
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|result
operator|.
name|getSize
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"First"
argument_list|,
literal|"3"
argument_list|,
name|result
operator|.
name|getResource
argument_list|(
literal|0
argument_list|)
operator|.
name|getContent
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|XMLDBException
name|ex
parameter_list|)
block|{
name|ex
operator|.
name|printStackTrace
argument_list|()
expr_stmt|;
name|fail
argument_list|(
name|ex
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
block|}
try|try
block|{
name|String
name|query
init|=
literal|"(1, 2, 3)[(position()=last())]"
decl_stmt|;
name|XPathQueryService
name|service
init|=
operator|(
name|XPathQueryService
operator|)
name|getTestCollection
argument_list|()
operator|.
name|getService
argument_list|(
literal|"XPathQueryService"
argument_list|,
literal|"1.0"
argument_list|)
decl_stmt|;
name|ResourceSet
name|result
init|=
name|service
operator|.
name|query
argument_list|(
name|query
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|result
operator|.
name|getSize
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"First"
argument_list|,
literal|"3"
argument_list|,
name|result
operator|.
name|getResource
argument_list|(
literal|0
argument_list|)
operator|.
name|getContent
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|XMLDBException
name|ex
parameter_list|)
block|{
name|ex
operator|.
name|printStackTrace
argument_list|()
expr_stmt|;
name|fail
argument_list|(
name|ex
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
comment|// http://sourceforge.net/support/tracker.php?aid=1769086
specifier|public
name|void
name|testCce_IndexOf_1769086
parameter_list|()
block|{
try|try
block|{
name|String
name|query
init|=
literal|"(\"One\", \"Two\", \"Three\")[index-of((\"1\", \"2\", \"3\"), \"2\")]"
decl_stmt|;
name|XPathQueryService
name|service
init|=
operator|(
name|XPathQueryService
operator|)
name|getTestCollection
argument_list|()
operator|.
name|getService
argument_list|(
literal|"XPathQueryService"
argument_list|,
literal|"1.0"
argument_list|)
decl_stmt|;
name|ResourceSet
name|result
init|=
name|service
operator|.
name|query
argument_list|(
name|query
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|result
operator|.
name|getSize
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"First"
argument_list|,
literal|"Two"
argument_list|,
name|result
operator|.
name|getResource
argument_list|(
literal|0
argument_list|)
operator|.
name|getContent
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|XMLDBException
name|ex
parameter_list|)
block|{
name|ex
operator|.
name|printStackTrace
argument_list|()
expr_stmt|;
name|fail
argument_list|(
name|ex
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
comment|// ======================================
comment|/** 	 * @return 	 * @throws XMLDBException 	 */
specifier|private
name|XPathQueryService
name|storeXMLStringAndGetQueryService
parameter_list|(
name|String
name|documentName
parameter_list|,
name|String
name|content
parameter_list|)
throws|throws
name|XMLDBException
block|{
name|Collection
name|testCollection
init|=
name|getTestCollection
argument_list|()
decl_stmt|;
name|XMLResource
name|doc
init|=
operator|(
name|XMLResource
operator|)
name|testCollection
operator|.
name|createResource
argument_list|(
name|documentName
argument_list|,
literal|"XMLResource"
argument_list|)
decl_stmt|;
name|doc
operator|.
name|setContent
argument_list|(
name|content
argument_list|)
expr_stmt|;
name|testCollection
operator|.
name|storeResource
argument_list|(
name|doc
argument_list|)
expr_stmt|;
name|XPathQueryService
name|service
init|=
operator|(
name|XPathQueryService
operator|)
name|testCollection
operator|.
name|getService
argument_list|(
literal|"XPathQueryService"
argument_list|,
literal|"1.0"
argument_list|)
decl_stmt|;
return|return
name|service
return|;
block|}
comment|/** 	 * @return 	 * @throws XMLDBException 	 */
specifier|private
name|XPathQueryService
name|storeXMLStringAndGetQueryService
parameter_list|(
name|String
name|documentName
parameter_list|)
throws|throws
name|XMLDBException
block|{
name|Collection
name|testCollection
init|=
name|getTestCollection
argument_list|()
decl_stmt|;
name|XMLResource
name|doc
init|=
operator|(
name|XMLResource
operator|)
name|testCollection
operator|.
name|createResource
argument_list|(
name|documentName
argument_list|,
literal|"XMLResource"
argument_list|)
decl_stmt|;
name|doc
operator|.
name|setContent
argument_list|(
operator|new
name|File
argument_list|(
name|documentName
argument_list|)
argument_list|)
expr_stmt|;
name|testCollection
operator|.
name|storeResource
argument_list|(
name|doc
argument_list|)
expr_stmt|;
name|XPathQueryService
name|service
init|=
operator|(
name|XPathQueryService
operator|)
name|testCollection
operator|.
name|getService
argument_list|(
literal|"XPathQueryService"
argument_list|,
literal|"1.0"
argument_list|)
decl_stmt|;
return|return
name|service
return|;
block|}
comment|/** 	 * @param result 	 * @throws XMLDBException 	 */
specifier|private
name|void
name|printResult
parameter_list|(
name|ResourceSet
name|result
parameter_list|)
throws|throws
name|XMLDBException
block|{
for|for
control|(
name|ResourceIterator
name|i
init|=
name|result
operator|.
name|getIterator
argument_list|()
init|;
name|i
operator|.
name|hasMoreResources
argument_list|()
condition|;
control|)
block|{
name|Resource
name|r
init|=
name|i
operator|.
name|nextResource
argument_list|()
decl_stmt|;
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
name|r
operator|.
name|getContent
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
specifier|public
specifier|static
name|void
name|main
parameter_list|(
name|String
index|[]
name|args
parameter_list|)
block|{
if|if
condition|(
name|args
operator|.
name|length
operator|>
literal|0
condition|)
block|{
name|attributeXML
operator|=
name|args
index|[
literal|0
index|]
expr_stmt|;
block|}
name|stringSize
operator|=
literal|513
expr_stmt|;
if|if
condition|(
name|args
operator|.
name|length
operator|>
literal|1
condition|)
block|{
name|stringSize
operator|=
name|Integer
operator|.
name|parseInt
argument_list|(
name|args
index|[
literal|1
index|]
argument_list|)
expr_stmt|;
block|}
name|nbElem
operator|=
literal|2
expr_stmt|;
if|if
condition|(
name|args
operator|.
name|length
operator|>
literal|2
condition|)
block|{
name|nbElem
operator|=
name|Integer
operator|.
name|parseInt
argument_list|(
name|args
index|[
literal|2
index|]
argument_list|)
expr_stmt|;
block|}
name|junit
operator|.
name|textui
operator|.
name|TestRunner
operator|.
name|run
argument_list|(
name|XQueryTest
operator|.
name|class
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

