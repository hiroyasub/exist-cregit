begin_unit|revision:1.0.0;language:Java;cregit-version:0.0.1
begin_package
package|package
name|org
operator|.
name|exist
operator|.
name|xquery
package|;
end_package

begin_import
import|import
name|org
operator|.
name|easymock
operator|.
name|ConstructorArgs
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|dom
operator|.
name|QName
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|dom
operator|.
name|memtree
operator|.
name|MemTreeBuilder
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|dom
operator|.
name|persistent
operator|.
name|DocumentImpl
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|dom
operator|.
name|persistent
operator|.
name|NodeProxy
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|numbering
operator|.
name|DLN
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|numbering
operator|.
name|NodeId
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|xquery
operator|.
name|value
operator|.
name|Item
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|xquery
operator|.
name|value
operator|.
name|Sequence
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|xquery
operator|.
name|value
operator|.
name|Type
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|xquery
operator|.
name|value
operator|.
name|ValueSequence
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_import
import|import
name|org
operator|.
name|w3c
operator|.
name|dom
operator|.
name|Document
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|easymock
operator|.
name|EasyMock
operator|.
name|*
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertEquals
import|;
end_import

begin_comment
comment|/**  *  * @author Adam Retter<adam.retter@googlemail.com>  */
end_comment

begin_class
specifier|public
class|class
name|IntersectTest
block|{
comment|/**      * Tests the XQuery `intersect` operator against an      * in-memory node on both the left and right sides      */
annotation|@
name|Test
specifier|public
name|void
name|memtree_intersect_memtree
parameter_list|()
throws|throws
name|XPathException
throws|,
name|NoSuchMethodException
block|{
specifier|final
name|XQueryContext
name|mockContext
init|=
name|createMock
argument_list|(
name|XQueryContext
operator|.
name|class
argument_list|)
decl_stmt|;
specifier|final
name|PathExpr
name|mockLeft
init|=
name|createMock
argument_list|(
name|PathExpr
operator|.
name|class
argument_list|)
decl_stmt|;
specifier|final
name|PathExpr
name|mockRight
init|=
name|createMock
argument_list|(
name|PathExpr
operator|.
name|class
argument_list|)
decl_stmt|;
specifier|final
name|Sequence
name|mockContextSequence
init|=
name|createMock
argument_list|(
name|Sequence
operator|.
name|class
argument_list|)
decl_stmt|;
specifier|final
name|Item
name|mockContextItem
init|=
name|createMock
argument_list|(
name|Item
operator|.
name|class
argument_list|)
decl_stmt|;
specifier|final
name|Profiler
name|mockProfiler
init|=
name|createMock
argument_list|(
name|Profiler
operator|.
name|class
argument_list|)
decl_stmt|;
name|expect
argument_list|(
name|mockContext
operator|.
name|nextExpressionId
argument_list|()
argument_list|)
operator|.
name|andReturn
argument_list|(
literal|1
argument_list|)
expr_stmt|;
name|expect
argument_list|(
name|mockContext
operator|.
name|getProfiler
argument_list|()
argument_list|)
operator|.
name|andReturn
argument_list|(
name|mockProfiler
argument_list|)
expr_stmt|;
specifier|final
name|org
operator|.
name|exist
operator|.
name|dom
operator|.
name|memtree
operator|.
name|ElementImpl
name|memElement
init|=
operator|(
name|org
operator|.
name|exist
operator|.
name|dom
operator|.
name|memtree
operator|.
name|ElementImpl
operator|)
name|createInMemoryDocument
argument_list|()
operator|.
name|getDocumentElement
argument_list|()
decl_stmt|;
name|expect
argument_list|(
name|mockLeft
operator|.
name|eval
argument_list|(
name|mockContextSequence
argument_list|,
name|mockContextItem
argument_list|)
argument_list|)
operator|.
name|andReturn
argument_list|(
name|memElement
argument_list|)
expr_stmt|;
comment|//memtree node
name|expect
argument_list|(
name|mockRight
operator|.
name|eval
argument_list|(
name|mockContextSequence
argument_list|,
name|mockContextItem
argument_list|)
argument_list|)
operator|.
name|andReturn
argument_list|(
name|memElement
argument_list|)
expr_stmt|;
comment|//same memtree node
name|expect
argument_list|(
name|mockContext
operator|.
name|getProfiler
argument_list|()
argument_list|)
operator|.
name|andReturn
argument_list|(
name|mockProfiler
argument_list|)
expr_stmt|;
name|replay
argument_list|(
name|mockRight
argument_list|,
name|mockLeft
argument_list|,
name|mockContext
argument_list|)
expr_stmt|;
comment|//test
specifier|final
name|Intersect
name|intersect
init|=
operator|new
name|Intersect
argument_list|(
name|mockContext
argument_list|,
name|mockLeft
argument_list|,
name|mockRight
argument_list|)
decl_stmt|;
specifier|final
name|Sequence
name|result
init|=
name|intersect
operator|.
name|eval
argument_list|(
name|mockContextSequence
argument_list|,
name|mockContextItem
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
operator|(
operator|(
name|ValueSequence
operator|)
name|result
operator|)
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|verify
argument_list|(
name|mockRight
argument_list|,
name|mockLeft
argument_list|,
name|mockContext
argument_list|)
expr_stmt|;
block|}
comment|/**      * Tests the XQuery `intersect` operator against an      * in-memory node on the left and a persistent node on the right      */
annotation|@
name|Test
specifier|public
name|void
name|memtree_intersect_persistent
parameter_list|()
throws|throws
name|XPathException
throws|,
name|NoSuchMethodException
block|{
specifier|final
name|XQueryContext
name|mockContext
init|=
name|createMock
argument_list|(
name|XQueryContext
operator|.
name|class
argument_list|)
decl_stmt|;
specifier|final
name|PathExpr
name|mockLeft
init|=
name|createMock
argument_list|(
name|PathExpr
operator|.
name|class
argument_list|)
decl_stmt|;
specifier|final
name|PathExpr
name|mockRight
init|=
name|createMock
argument_list|(
name|PathExpr
operator|.
name|class
argument_list|)
decl_stmt|;
specifier|final
name|Sequence
name|mockContextSequence
init|=
name|createMock
argument_list|(
name|Sequence
operator|.
name|class
argument_list|)
decl_stmt|;
specifier|final
name|Item
name|mockContextItem
init|=
name|createMock
argument_list|(
name|Item
operator|.
name|class
argument_list|)
decl_stmt|;
specifier|final
name|Profiler
name|mockProfiler
init|=
name|createMock
argument_list|(
name|Profiler
operator|.
name|class
argument_list|)
decl_stmt|;
specifier|final
name|DocumentImpl
name|mockPersistentDoc
init|=
name|createMock
argument_list|(
name|DocumentImpl
operator|.
name|class
argument_list|)
decl_stmt|;
specifier|final
name|NodeProxy
name|mockPersistentNode
init|=
name|createMock
argument_list|(
name|NodeProxy
operator|.
name|class
argument_list|,
operator|new
name|ConstructorArgs
argument_list|(
name|NodeProxy
operator|.
name|class
operator|.
name|getConstructor
argument_list|(
name|DocumentImpl
operator|.
name|class
argument_list|,
name|NodeId
operator|.
name|class
argument_list|)
argument_list|,
name|mockPersistentDoc
argument_list|,
operator|new
name|DLN
argument_list|(
literal|1
argument_list|)
argument_list|)
argument_list|,
name|NodeProxy
operator|.
name|class
operator|.
name|getMethod
argument_list|(
literal|"isEmpty"
argument_list|,
operator|new
name|Class
index|[]
block|{}
argument_list|)
argument_list|,
name|NodeProxy
operator|.
name|class
operator|.
name|getMethod
argument_list|(
literal|"getItemType"
argument_list|,
operator|new
name|Class
index|[]
block|{}
argument_list|)
argument_list|,
name|NodeProxy
operator|.
name|class
operator|.
name|getMethod
argument_list|(
literal|"equals"
argument_list|,
operator|new
name|Class
index|[]
block|{
name|Object
operator|.
name|class
block|}
argument_list|)
argument_list|)
decl_stmt|;
name|expect
argument_list|(
name|mockContext
operator|.
name|nextExpressionId
argument_list|()
argument_list|)
operator|.
name|andReturn
argument_list|(
literal|1
argument_list|)
expr_stmt|;
name|expect
argument_list|(
name|mockContext
operator|.
name|getProfiler
argument_list|()
argument_list|)
operator|.
name|andReturn
argument_list|(
name|mockProfiler
argument_list|)
expr_stmt|;
name|expect
argument_list|(
name|mockLeft
operator|.
name|eval
argument_list|(
name|mockContextSequence
argument_list|,
name|mockContextItem
argument_list|)
argument_list|)
operator|.
name|andReturn
argument_list|(
operator|(
name|org
operator|.
name|exist
operator|.
name|dom
operator|.
name|memtree
operator|.
name|ElementImpl
operator|)
name|createInMemoryDocument
argument_list|()
operator|.
name|getDocumentElement
argument_list|()
argument_list|)
expr_stmt|;
comment|//memtree node
name|expect
argument_list|(
name|mockRight
operator|.
name|eval
argument_list|(
name|mockContextSequence
argument_list|,
name|mockContextItem
argument_list|)
argument_list|)
operator|.
name|andReturn
argument_list|(
name|mockPersistentNode
argument_list|)
expr_stmt|;
comment|//persistent node
name|expect
argument_list|(
name|mockPersistentNode
operator|.
name|isEmpty
argument_list|()
argument_list|)
operator|.
name|andReturn
argument_list|(
literal|false
argument_list|)
expr_stmt|;
name|expect
argument_list|(
name|mockPersistentNode
operator|.
name|getItemType
argument_list|()
argument_list|)
operator|.
name|andReturn
argument_list|(
name|Type
operator|.
name|NODE
argument_list|)
expr_stmt|;
name|expect
argument_list|(
name|mockContext
operator|.
name|getProfiler
argument_list|()
argument_list|)
operator|.
name|andReturn
argument_list|(
name|mockProfiler
argument_list|)
expr_stmt|;
name|replay
argument_list|(
name|mockPersistentDoc
argument_list|,
name|mockPersistentNode
argument_list|,
name|mockRight
argument_list|,
name|mockLeft
argument_list|,
name|mockContext
argument_list|)
expr_stmt|;
comment|//test
specifier|final
name|Intersect
name|intersect
init|=
operator|new
name|Intersect
argument_list|(
name|mockContext
argument_list|,
name|mockLeft
argument_list|,
name|mockRight
argument_list|)
decl_stmt|;
specifier|final
name|Sequence
name|result
init|=
name|intersect
operator|.
name|eval
argument_list|(
name|mockContextSequence
argument_list|,
name|mockContextItem
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
operator|(
operator|(
name|ValueSequence
operator|)
name|result
operator|)
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|verify
argument_list|(
name|mockPersistentDoc
argument_list|,
name|mockPersistentNode
argument_list|,
name|mockRight
argument_list|,
name|mockLeft
argument_list|,
name|mockContext
argument_list|)
expr_stmt|;
block|}
comment|/**      * Tests the XQuery `intersect` operator against a      * persistent node on the left and an in-memory node on the right      */
annotation|@
name|Test
specifier|public
name|void
name|persistent_intersect_memtree
parameter_list|()
throws|throws
name|XPathException
throws|,
name|NoSuchMethodException
block|{
specifier|final
name|XQueryContext
name|mockContext
init|=
name|createMock
argument_list|(
name|XQueryContext
operator|.
name|class
argument_list|)
decl_stmt|;
specifier|final
name|PathExpr
name|mockLeft
init|=
name|createMock
argument_list|(
name|PathExpr
operator|.
name|class
argument_list|)
decl_stmt|;
specifier|final
name|PathExpr
name|mockRight
init|=
name|createMock
argument_list|(
name|PathExpr
operator|.
name|class
argument_list|)
decl_stmt|;
specifier|final
name|Sequence
name|mockContextSequence
init|=
name|createMock
argument_list|(
name|Sequence
operator|.
name|class
argument_list|)
decl_stmt|;
specifier|final
name|Item
name|mockContextItem
init|=
name|createMock
argument_list|(
name|Item
operator|.
name|class
argument_list|)
decl_stmt|;
specifier|final
name|Profiler
name|mockProfiler
init|=
name|createMock
argument_list|(
name|Profiler
operator|.
name|class
argument_list|)
decl_stmt|;
specifier|final
name|DocumentImpl
name|mockPersistentDoc
init|=
name|createMock
argument_list|(
name|DocumentImpl
operator|.
name|class
argument_list|)
decl_stmt|;
specifier|final
name|NodeProxy
name|mockPersistentNode
init|=
name|createMock
argument_list|(
name|NodeProxy
operator|.
name|class
argument_list|,
operator|new
name|ConstructorArgs
argument_list|(
name|NodeProxy
operator|.
name|class
operator|.
name|getConstructor
argument_list|(
name|DocumentImpl
operator|.
name|class
argument_list|,
name|NodeId
operator|.
name|class
argument_list|)
argument_list|,
name|mockPersistentDoc
argument_list|,
operator|new
name|DLN
argument_list|(
literal|1
argument_list|)
argument_list|)
argument_list|,
name|NodeProxy
operator|.
name|class
operator|.
name|getMethod
argument_list|(
literal|"isEmpty"
argument_list|,
operator|new
name|Class
index|[]
block|{}
argument_list|)
argument_list|,
name|NodeProxy
operator|.
name|class
operator|.
name|getMethod
argument_list|(
literal|"getItemType"
argument_list|,
operator|new
name|Class
index|[]
block|{}
argument_list|)
argument_list|,
name|NodeProxy
operator|.
name|class
operator|.
name|getMethod
argument_list|(
literal|"equals"
argument_list|,
operator|new
name|Class
index|[]
block|{
name|Object
operator|.
name|class
block|}
argument_list|)
argument_list|)
decl_stmt|;
name|expect
argument_list|(
name|mockContext
operator|.
name|nextExpressionId
argument_list|()
argument_list|)
operator|.
name|andReturn
argument_list|(
literal|1
argument_list|)
expr_stmt|;
name|expect
argument_list|(
name|mockContext
operator|.
name|getProfiler
argument_list|()
argument_list|)
operator|.
name|andReturn
argument_list|(
name|mockProfiler
argument_list|)
expr_stmt|;
name|expect
argument_list|(
name|mockLeft
operator|.
name|eval
argument_list|(
name|mockContextSequence
argument_list|,
name|mockContextItem
argument_list|)
argument_list|)
operator|.
name|andReturn
argument_list|(
name|mockPersistentNode
argument_list|)
expr_stmt|;
comment|//persistent node
name|expect
argument_list|(
name|mockRight
operator|.
name|eval
argument_list|(
name|mockContextSequence
argument_list|,
name|mockContextItem
argument_list|)
argument_list|)
operator|.
name|andReturn
argument_list|(
operator|(
name|org
operator|.
name|exist
operator|.
name|dom
operator|.
name|memtree
operator|.
name|ElementImpl
operator|)
name|createInMemoryDocument
argument_list|()
operator|.
name|getDocumentElement
argument_list|()
argument_list|)
expr_stmt|;
comment|//memtree node
name|expect
argument_list|(
name|mockPersistentNode
operator|.
name|isEmpty
argument_list|()
argument_list|)
operator|.
name|andReturn
argument_list|(
literal|false
argument_list|)
expr_stmt|;
name|expect
argument_list|(
name|mockPersistentNode
operator|.
name|getItemType
argument_list|()
argument_list|)
operator|.
name|andReturn
argument_list|(
name|Type
operator|.
name|NODE
argument_list|)
expr_stmt|;
name|expect
argument_list|(
name|mockPersistentDoc
operator|.
name|getDocId
argument_list|()
argument_list|)
operator|.
name|andReturn
argument_list|(
literal|1
argument_list|)
operator|.
name|times
argument_list|(
literal|2
argument_list|)
expr_stmt|;
name|expect
argument_list|(
name|mockContext
operator|.
name|getProfiler
argument_list|()
argument_list|)
operator|.
name|andReturn
argument_list|(
name|mockProfiler
argument_list|)
expr_stmt|;
name|replay
argument_list|(
name|mockPersistentDoc
argument_list|,
name|mockPersistentNode
argument_list|,
name|mockRight
argument_list|,
name|mockLeft
argument_list|,
name|mockContext
argument_list|)
expr_stmt|;
comment|//test
specifier|final
name|Intersect
name|intersect
init|=
operator|new
name|Intersect
argument_list|(
name|mockContext
argument_list|,
name|mockLeft
argument_list|,
name|mockRight
argument_list|)
decl_stmt|;
specifier|final
name|Sequence
name|result
init|=
name|intersect
operator|.
name|eval
argument_list|(
name|mockContextSequence
argument_list|,
name|mockContextItem
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
operator|(
operator|(
name|ValueSequence
operator|)
name|result
operator|)
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|verify
argument_list|(
name|mockPersistentDoc
argument_list|,
name|mockPersistentNode
argument_list|,
name|mockRight
argument_list|,
name|mockLeft
argument_list|,
name|mockContext
argument_list|)
expr_stmt|;
block|}
specifier|private
name|Document
name|createInMemoryDocument
parameter_list|()
block|{
specifier|final
name|MemTreeBuilder
name|memtree
init|=
operator|new
name|MemTreeBuilder
argument_list|()
decl_stmt|;
name|memtree
operator|.
name|startDocument
argument_list|()
expr_stmt|;
name|memtree
operator|.
name|startElement
argument_list|(
operator|new
name|QName
argument_list|(
literal|"m1"
argument_list|)
argument_list|,
literal|null
argument_list|)
expr_stmt|;
name|memtree
operator|.
name|startElement
argument_list|(
operator|new
name|QName
argument_list|(
literal|"m2"
argument_list|)
argument_list|,
literal|null
argument_list|)
expr_stmt|;
name|memtree
operator|.
name|characters
argument_list|(
literal|"test data"
argument_list|)
expr_stmt|;
name|memtree
operator|.
name|endElement
argument_list|()
expr_stmt|;
name|memtree
operator|.
name|endElement
argument_list|()
expr_stmt|;
name|memtree
operator|.
name|endDocument
argument_list|()
expr_stmt|;
return|return
name|memtree
operator|.
name|getDocument
argument_list|()
return|;
block|}
block|}
end_class

end_unit

