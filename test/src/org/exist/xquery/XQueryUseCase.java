begin_unit|revision:1.0.0;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  *  eXist Open Source Native XML Database  *  Copyright (C) 2001-06 Wolfgang M. Meier  *  wolfgang@exist-db.org  *  http://exist.sourceforge.net  *    *  This program is free software; you can redistribute it and/or  *  modify it under the terms of the GNU Lesser General Public License  *  as published by the Free Software Foundation; either version 2  *  of the License, or (at your option) any later version.  *    *  This program is distributed in the hope that it will be useful,  *  but WITHOUT ANY WARRANTY; without even the implied warranty of  *  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the  *  GNU Lesser General Public License for more details.  *    *  You should have received a copy of the GNU Lesser General Public License  *  along with this program; if not, write to the Free Software  *  Foundation, Inc., 675 Mass Ave, Cambridge, MA 02139, USA.  *    *  $Id$  */
end_comment

begin_package
package|package
name|org
operator|.
name|exist
operator|.
name|xquery
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|nio
operator|.
name|file
operator|.
name|Files
import|;
end_import

begin_import
import|import
name|java
operator|.
name|nio
operator|.
name|file
operator|.
name|Path
import|;
end_import

begin_import
import|import
name|java
operator|.
name|nio
operator|.
name|file
operator|.
name|Paths
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|test
operator|.
name|ExistXmldbEmbeddedServer
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|util
operator|.
name|FileUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|util
operator|.
name|XMLFilenameFilter
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|xmldb
operator|.
name|XQueryService
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Before
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|ClassRule
import|;
end_import

begin_import
import|import
name|org
operator|.
name|xmldb
operator|.
name|api
operator|.
name|base
operator|.
name|Collection
import|;
end_import

begin_import
import|import
name|org
operator|.
name|xmldb
operator|.
name|api
operator|.
name|base
operator|.
name|ResourceSet
import|;
end_import

begin_import
import|import
name|org
operator|.
name|xmldb
operator|.
name|api
operator|.
name|modules
operator|.
name|CollectionManagementService
import|;
end_import

begin_import
import|import
name|org
operator|.
name|xmldb
operator|.
name|api
operator|.
name|modules
operator|.
name|XMLResource
import|;
end_import

begin_import
import|import static
name|java
operator|.
name|nio
operator|.
name|charset
operator|.
name|StandardCharsets
operator|.
name|UTF_8
import|;
end_import

begin_comment
comment|/**  * @author Wolfgang Meier (wolfgang@exist-db.org)  */
end_comment

begin_class
specifier|public
class|class
name|XQueryUseCase
block|{
annotation|@
name|ClassRule
specifier|public
specifier|static
specifier|final
name|ExistXmldbEmbeddedServer
name|existEmbeddedServer
init|=
operator|new
name|ExistXmldbEmbeddedServer
argument_list|()
decl_stmt|;
specifier|private
specifier|final
specifier|static
name|String
name|baseDir
init|=
literal|"samples/xquery/use-cases"
decl_stmt|;
specifier|private
name|Collection
name|root
init|=
literal|null
decl_stmt|;
annotation|@
name|Before
specifier|protected
name|void
name|setUp
parameter_list|()
throws|throws
name|Exception
block|{
name|root
operator|=
name|existEmbeddedServer
operator|.
name|getRoot
argument_list|()
expr_stmt|;
block|}
specifier|public
name|void
name|doTest
parameter_list|(
name|String
name|useCase
parameter_list|)
throws|throws
name|Exception
block|{
name|CollectionManagementService
name|service
init|=
operator|(
name|CollectionManagementService
operator|)
name|root
operator|.
name|getService
argument_list|(
literal|"CollectionManagementService"
argument_list|,
literal|"1.0"
argument_list|)
decl_stmt|;
name|root
operator|=
name|service
operator|.
name|createCollection
argument_list|(
name|useCase
argument_list|)
expr_stmt|;
specifier|final
name|Path
name|file
init|=
name|Paths
operator|.
name|get
argument_list|(
name|baseDir
argument_list|)
operator|.
name|resolve
argument_list|(
name|useCase
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
operator|(
name|Files
operator|.
name|isReadable
argument_list|(
name|file
argument_list|)
operator|&&
name|Files
operator|.
name|isDirectory
argument_list|(
name|file
argument_list|)
operator|)
condition|)
block|{
throw|throw
operator|new
name|RuntimeException
argument_list|(
literal|"Cannot read data for use-case "
operator|+
name|useCase
argument_list|)
throw|;
block|}
name|setupData
argument_list|(
name|file
argument_list|)
expr_stmt|;
name|processQueries
argument_list|(
name|file
argument_list|)
expr_stmt|;
block|}
specifier|protected
name|void
name|processQueries
parameter_list|(
specifier|final
name|Path
name|file
parameter_list|)
throws|throws
name|Exception
block|{
specifier|final
name|List
argument_list|<
name|Path
argument_list|>
name|paths
init|=
name|FileUtils
operator|.
name|list
argument_list|(
name|file
argument_list|,
name|f
lambda|->
block|{
specifier|final
name|String
name|fileName
init|=
name|FileUtils
operator|.
name|fileName
argument_list|(
name|f
argument_list|)
decl_stmt|;
return|return
name|fileName
operator|.
name|startsWith
argument_list|(
literal|"q"
argument_list|)
operator|&&
name|fileName
operator|.
name|endsWith
argument_list|(
literal|".xq"
argument_list|)
return|;
block|}
argument_list|)
decl_stmt|;
for|for
control|(
specifier|final
name|Path
name|path
range|:
name|paths
control|)
block|{
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"processing use-case: "
operator|+
name|path
operator|.
name|toAbsolutePath
argument_list|()
argument_list|)
expr_stmt|;
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"========================================================================"
argument_list|)
expr_stmt|;
name|String
name|query
init|=
name|readQuery
argument_list|(
name|path
argument_list|)
decl_stmt|;
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
name|query
argument_list|)
expr_stmt|;
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"_________________________________________________________________________________"
argument_list|)
expr_stmt|;
name|XQueryService
name|service
init|=
operator|(
name|XQueryService
operator|)
name|root
operator|.
name|getService
argument_list|(
literal|"XQueryService"
argument_list|,
literal|"1.0"
argument_list|)
decl_stmt|;
name|ResourceSet
name|results
decl_stmt|;
try|try
block|{
name|results
operator|=
name|service
operator|.
name|query
argument_list|(
name|query
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|j
init|=
literal|0
init|;
name|j
operator|<
name|results
operator|.
name|getSize
argument_list|()
condition|;
name|j
operator|++
control|)
block|{
name|String
name|output
init|=
operator|(
name|String
operator|)
name|results
operator|.
name|getResource
argument_list|(
name|j
argument_list|)
operator|.
name|getContent
argument_list|()
decl_stmt|;
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
name|output
argument_list|)
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|Throwable
name|cause
init|=
name|e
operator|.
name|getCause
argument_list|()
decl_stmt|;
if|if
condition|(
name|cause
operator|==
literal|null
condition|)
name|cause
operator|=
name|e
expr_stmt|;
name|System
operator|.
name|err
operator|.
name|println
argument_list|(
literal|"Exception: "
operator|+
name|e
operator|.
name|getClass
argument_list|()
operator|+
literal|" - "
operator|+
name|cause
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|j
init|=
literal|0
init|;
name|j
operator|<
literal|4
condition|;
name|j
operator|++
control|)
block|{
name|StackTraceElement
name|el
init|=
name|cause
operator|.
name|getStackTrace
argument_list|()
index|[
name|j
index|]
decl_stmt|;
name|System
operator|.
name|err
operator|.
name|println
argument_list|(
name|el
argument_list|)
expr_stmt|;
block|}
name|e
operator|.
name|getStackTrace
argument_list|()
expr_stmt|;
comment|// rethrow for JUnit reporting
throw|throw
name|e
throw|;
block|}
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"========================================================================"
argument_list|)
expr_stmt|;
block|}
block|}
specifier|protected
name|void
name|setupData
parameter_list|(
specifier|final
name|Path
name|file
parameter_list|)
throws|throws
name|Exception
block|{
specifier|final
name|List
argument_list|<
name|Path
argument_list|>
name|paths
init|=
name|FileUtils
operator|.
name|list
argument_list|(
name|file
argument_list|,
name|XMLFilenameFilter
operator|.
name|asPredicate
argument_list|()
argument_list|)
decl_stmt|;
for|for
control|(
specifier|final
name|Path
name|path
range|:
name|paths
control|)
block|{
specifier|final
name|XMLResource
name|res
init|=
operator|(
name|XMLResource
operator|)
name|root
operator|.
name|createResource
argument_list|(
name|FileUtils
operator|.
name|fileName
argument_list|(
name|path
argument_list|)
argument_list|,
name|XMLResource
operator|.
name|RESOURCE_TYPE
argument_list|)
decl_stmt|;
name|res
operator|.
name|setContent
argument_list|(
name|path
argument_list|)
expr_stmt|;
name|root
operator|.
name|storeResource
argument_list|(
name|res
argument_list|)
expr_stmt|;
block|}
block|}
specifier|protected
name|String
name|readQuery
parameter_list|(
specifier|final
name|Path
name|f
parameter_list|)
throws|throws
name|IOException
block|{
return|return
operator|new
name|String
argument_list|(
name|Files
operator|.
name|readAllBytes
argument_list|(
name|f
argument_list|)
argument_list|,
name|UTF_8
argument_list|)
return|;
block|}
block|}
end_class

end_unit

