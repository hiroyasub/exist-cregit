begin_unit|revision:1.0.0;language:Java;cregit-version:0.0.1
begin_package
package|package
name|org
operator|.
name|exist
operator|.
name|xquery
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|io
operator|.
name|output
operator|.
name|ByteArrayOutputStream
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|test
operator|.
name|ExistWebServer
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|xmldb
operator|.
name|XPathQueryServiceImpl
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|xmldb
operator|.
name|XmldbURI
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|*
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|runner
operator|.
name|JUnitCore
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|runner
operator|.
name|RunWith
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|runners
operator|.
name|Parameterized
import|;
end_import

begin_import
import|import
name|org
operator|.
name|w3c
operator|.
name|dom
operator|.
name|Document
import|;
end_import

begin_import
import|import
name|org
operator|.
name|w3c
operator|.
name|dom
operator|.
name|Node
import|;
end_import

begin_import
import|import
name|org
operator|.
name|xml
operator|.
name|sax
operator|.
name|InputSource
import|;
end_import

begin_import
import|import
name|org
operator|.
name|xml
operator|.
name|sax
operator|.
name|SAXException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|xmldb
operator|.
name|api
operator|.
name|DatabaseManager
import|;
end_import

begin_import
import|import
name|org
operator|.
name|xmldb
operator|.
name|api
operator|.
name|base
operator|.
name|*
import|;
end_import

begin_import
import|import
name|org
operator|.
name|xmldb
operator|.
name|api
operator|.
name|modules
operator|.
name|CollectionManagementService
import|;
end_import

begin_import
import|import
name|org
operator|.
name|xmldb
operator|.
name|api
operator|.
name|modules
operator|.
name|XMLResource
import|;
end_import

begin_import
import|import
name|org
operator|.
name|xmldb
operator|.
name|api
operator|.
name|modules
operator|.
name|XPathQueryService
import|;
end_import

begin_import
import|import
name|org
operator|.
name|xmldb
operator|.
name|api
operator|.
name|modules
operator|.
name|XQueryService
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|xml
operator|.
name|parsers
operator|.
name|DocumentBuilder
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|xml
operator|.
name|parsers
operator|.
name|DocumentBuilderFactory
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|xml
operator|.
name|parsers
operator|.
name|ParserConfigurationException
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|xml
operator|.
name|transform
operator|.
name|OutputKeys
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|*
import|;
end_import

begin_import
import|import
name|java
operator|.
name|nio
operator|.
name|file
operator|.
name|Files
import|;
end_import

begin_import
import|import
name|java
operator|.
name|nio
operator|.
name|file
operator|.
name|Path
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Arrays
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|regex
operator|.
name|Matcher
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|regex
operator|.
name|Pattern
import|;
end_import

begin_import
import|import static
name|java
operator|.
name|nio
operator|.
name|charset
operator|.
name|StandardCharsets
operator|.
name|UTF_8
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|custommonkey
operator|.
name|xmlunit
operator|.
name|XMLAssert
operator|.
name|assertXMLEqual
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertEquals
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertNotNull
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertTrue
import|;
end_import

begin_class
annotation|@
name|RunWith
argument_list|(
name|Parameterized
operator|.
name|class
argument_list|)
specifier|public
class|class
name|XPathQueryTest
block|{
annotation|@
name|ClassRule
specifier|public
specifier|static
specifier|final
name|ExistWebServer
name|existWebServer
init|=
operator|new
name|ExistWebServer
argument_list|(
literal|true
argument_list|,
literal|true
argument_list|)
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|String
name|PORT_PLACEHOLDER
init|=
literal|"${PORT}"
decl_stmt|;
annotation|@
name|Parameterized
operator|.
name|Parameters
argument_list|(
name|name
operator|=
literal|"{0}"
argument_list|)
specifier|public
specifier|static
name|java
operator|.
name|util
operator|.
name|Collection
argument_list|<
name|Object
index|[]
argument_list|>
name|data
parameter_list|()
block|{
return|return
name|Arrays
operator|.
name|asList
argument_list|(
operator|new
name|Object
index|[]
index|[]
block|{
block|{
literal|"local"
block|,
name|XmldbURI
operator|.
name|LOCAL_DB
block|}
block|,
block|{
literal|"remote"
block|,
literal|"xmldb:exist://localhost:"
operator|+
name|PORT_PLACEHOLDER
operator|+
literal|"/xmlrpc"
operator|+
name|XmldbURI
operator|.
name|ROOT_COLLECTION
block|}
block|}
argument_list|)
return|;
block|}
annotation|@
name|Parameterized
operator|.
name|Parameter
specifier|public
name|String
name|apiName
decl_stmt|;
annotation|@
name|Parameterized
operator|.
name|Parameter
argument_list|(
name|value
operator|=
literal|1
argument_list|)
specifier|public
name|String
name|baseUri
decl_stmt|;
specifier|private
specifier|final
name|String
name|getBaseUri
parameter_list|()
block|{
return|return
name|baseUri
operator|.
name|replace
argument_list|(
name|PORT_PLACEHOLDER
argument_list|,
name|Integer
operator|.
name|toString
argument_list|(
name|existWebServer
operator|.
name|getPort
argument_list|()
argument_list|)
argument_list|)
return|;
block|}
specifier|private
specifier|final
specifier|static
name|String
name|nested
init|=
literal|"<?xml version=\"1.0\" encoding=\"UTF-8\"?>"
operator|+
literal|"<test><c></c><b><c><b></b></c></b><b></b><c></c></test>"
decl_stmt|;
specifier|private
specifier|final
specifier|static
name|String
name|numbers
init|=
literal|"<test>"
operator|+
literal|"<item id='1' type='alphanum'><price>5.6</price><stock>22</stock></item>"
operator|+
literal|"<item id='2'><price>7.4</price><stock>43</stock></item>"
operator|+
literal|"<item id='3'><price>18.4</price><stock>5</stock></item>"
operator|+
literal|"<item id='4'><price>65.54</price><stock>16</stock></item>"
operator|+
literal|"</test>"
decl_stmt|;
specifier|private
specifier|final
specifier|static
name|String
name|numbers2
init|=
literal|"<test xmlns=\"http://numbers.org\">"
operator|+
literal|"<item id='1' type='alphanum'><price>5.6</price><stock>22</stock></item>"
operator|+
literal|"<item id='2'><price>7.4</price><stock>43</stock></item>"
operator|+
literal|"<item id='3'><price>18.4</price><stock>5</stock></item>"
operator|+
literal|"<item id='4'><price>65.54</price><stock>16</stock></item>"
operator|+
literal|"</test>"
decl_stmt|;
specifier|private
specifier|final
specifier|static
name|String
name|namespaces
init|=
literal|"<test xmlns='http://www.foo.com'>"
operator|+
literal|"<section>"
operator|+
literal|"<title>Test Document</title>"
operator|+
literal|"<c:comment xmlns:c='http://www.other.com'>This is my comment</c:comment>"
operator|+
literal|"</section>"
operator|+
literal|"</test>"
decl_stmt|;
specifier|private
specifier|final
specifier|static
name|String
name|strings
init|=
literal|"<test>"
operator|+
literal|"<string>Hello World!</string>"
operator|+
literal|"<string value='Hello World!'/>"
operator|+
literal|"<string>Hello</string>"
operator|+
literal|"</test>"
decl_stmt|;
specifier|private
specifier|final
specifier|static
name|String
name|nested2
init|=
literal|"<RootElement>"
operator|+
literal|"<ChildA>"
operator|+
literal|"<ChildB id=\"2\"/>"
operator|+
literal|"</ChildA>"
operator|+
literal|"</RootElement>"
decl_stmt|;
specifier|private
specifier|final
specifier|static
name|String
name|nested3
init|=
literal|"<test>"
operator|+
literal|"<a>"
operator|+
literal|"<t>1</t>"
operator|+
literal|"<a>"
operator|+
literal|"<t>2</t>"
operator|+
literal|"<a>"
operator|+
literal|"<t>3</t>"
operator|+
literal|"</a>"
operator|+
literal|"</a>"
operator|+
literal|"</a>"
operator|+
literal|"</test>"
decl_stmt|;
specifier|private
specifier|final
specifier|static
name|String
name|siblings
init|=
literal|"<test>"
operator|+
literal|"<a><s>A</s><n>1</n></a>"
operator|+
literal|"<a><s>Z</s><n>2</n></a>"
operator|+
literal|"<a><s>B</s><n>3</n></a>"
operator|+
literal|"<a><s>Z</s><n>4</n></a>"
operator|+
literal|"<a><s>C</s><n>5</n></a>"
operator|+
literal|"<a><s>Z</s><n>6</n></a>"
operator|+
literal|"</test>"
decl_stmt|;
specifier|private
specifier|final
specifier|static
name|String
name|ids_content
init|=
literal|"<test xml:space=\"preserve\">"
operator|+
literal|"<a ref=\"id1\"/>"
operator|+
literal|"<a ref=\"id1\"/>"
operator|+
literal|"<d ref=\"id2\"/>"
operator|+
literal|"<b id=\"id1\"><name>one</name></b>"
operator|+
literal|"<c xml:id=\"     id2     \"><name>two</name></c>"
operator|+
literal|"</test>"
decl_stmt|;
specifier|private
specifier|final
specifier|static
name|String
name|ids
init|=
literal|"<!DOCTYPE test ["
operator|+
literal|"<!ELEMENT test (a | b | c | d)*>"
operator|+
literal|"<!ATTLIST test xml:space CDATA #IMPLIED>"
operator|+
literal|"<!ELEMENT a EMPTY>"
operator|+
literal|"<!ELEMENT b (name)>"
operator|+
literal|"<!ELEMENT c (name)>"
operator|+
literal|"<!ELEMENT d EMPTY>"
operator|+
literal|"<!ATTLIST d ref IDREF #IMPLIED>"
operator|+
literal|"<!ELEMENT name (#PCDATA)>"
operator|+
literal|"<!ATTLIST a ref IDREF #IMPLIED>"
operator|+
literal|"<!ATTLIST b id ID #IMPLIED>"
operator|+
literal|"<!ATTLIST c xml:id ID #IMPLIED>]>"
operator|+
name|ids_content
decl_stmt|;
specifier|private
specifier|final
specifier|static
name|String
name|date
init|=
literal|"<timestamp date=\"2006-04-29+02:00\"/>"
decl_stmt|;
specifier|private
specifier|final
specifier|static
name|String
name|quotes
init|=
literal|"<test><title>&quot;Hello&quot;</title></test>"
decl_stmt|;
specifier|private
specifier|final
specifier|static
name|String
name|ws
init|=
literal|"<test><parent xml:space=\"preserve\"><text></text><text xml:space=\"default\"></text></parent></test>"
decl_stmt|;
specifier|private
specifier|final
specifier|static
name|String
name|self
init|=
literal|"<test-self><a>Hello</a><b>World!</b></test-self>"
decl_stmt|;
specifier|private
specifier|final
specifier|static
name|String
name|predicates
init|=
literal|"<elem1>\n"
operator|+
literal|"<elem2>\n"
operator|+
literal|"<elem3/>\n"
operator|+
literal|"</elem2>\n"
operator|+
literal|"<elem2>\n"
operator|+
literal|"<elem3>val1</elem3>\n"
operator|+
literal|"</elem2>\n"
operator|+
literal|"<elem2>\n"
operator|+
literal|"<elem3>val2</elem3>\n"
operator|+
literal|"</elem2>\n"
operator|+
literal|"</elem1>"
decl_stmt|;
comment|// Added by Geoff Shuetrim (geoff@galexy.net) to highlight problems with XPath queries of elements called 'xpointer'.
specifier|private
specifier|final
specifier|static
name|String
name|xpointerElementName
init|=
literal|"<test><xpointer/></test>"
decl_stmt|;
specifier|private
name|Collection
name|testCollection
decl_stmt|;
annotation|@
name|Before
specifier|public
name|void
name|setUp
parameter_list|()
throws|throws
name|Exception
block|{
comment|// initialize driver
name|Class
argument_list|<
name|?
argument_list|>
name|cl
init|=
name|Class
operator|.
name|forName
argument_list|(
literal|"org.exist.xmldb.DatabaseImpl"
argument_list|)
decl_stmt|;
name|Database
name|database
init|=
operator|(
name|Database
operator|)
name|cl
operator|.
name|newInstance
argument_list|()
decl_stmt|;
name|database
operator|.
name|setProperty
argument_list|(
literal|"create-database"
argument_list|,
literal|"true"
argument_list|)
expr_stmt|;
name|DatabaseManager
operator|.
name|registerDatabase
argument_list|(
name|database
argument_list|)
expr_stmt|;
name|Collection
name|root
init|=
name|DatabaseManager
operator|.
name|getCollection
argument_list|(
name|getBaseUri
argument_list|()
argument_list|,
literal|"admin"
argument_list|,
literal|""
argument_list|)
decl_stmt|;
name|CollectionManagementService
name|service
init|=
operator|(
name|CollectionManagementService
operator|)
name|root
operator|.
name|getService
argument_list|(
literal|"CollectionManagementService"
argument_list|,
literal|"1.0"
argument_list|)
decl_stmt|;
name|testCollection
operator|=
name|service
operator|.
name|createCollection
argument_list|(
literal|"test"
argument_list|)
expr_stmt|;
name|assertNotNull
argument_list|(
name|testCollection
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|childWildcards
parameter_list|()
throws|throws
name|XMLDBException
block|{
specifier|final
name|String
name|docName
init|=
literal|"testChildWildcards.xml"
decl_stmt|;
specifier|final
name|XQueryService
name|service
init|=
name|storeXMLStringAndGetQueryService
argument_list|(
name|docName
argument_list|,
literal|"<test xmlns=\"http://test\"/>"
argument_list|)
decl_stmt|;
name|service
operator|.
name|setNamespace
argument_list|(
literal|"t"
argument_list|,
literal|"http://test"
argument_list|)
expr_stmt|;
name|queryResource
argument_list|(
name|service
argument_list|,
name|docName
argument_list|,
literal|"/t:test"
argument_list|,
literal|1
argument_list|)
expr_stmt|;
comment|//make sure all is well!
name|queryResource
argument_list|(
name|service
argument_list|,
name|docName
argument_list|,
literal|"/*"
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|queryResource
argument_list|(
name|service
argument_list|,
name|docName
argument_list|,
literal|"/t:*"
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|queryResource
argument_list|(
name|service
argument_list|,
name|docName
argument_list|,
literal|"/*:test"
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|queryResource
argument_list|(
name|service
argument_list|,
name|docName
argument_list|,
literal|"/child::*"
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|queryResource
argument_list|(
name|service
argument_list|,
name|docName
argument_list|,
literal|"/child::t:*"
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|queryResource
argument_list|(
name|service
argument_list|,
name|docName
argument_list|,
literal|"/child::*:test"
argument_list|,
literal|1
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|pathExpression
parameter_list|()
throws|throws
name|XMLDBException
block|{
specifier|final
name|XQueryService
name|service
init|=
name|storeXMLStringAndGetQueryService
argument_list|(
literal|"numbers.xml"
argument_list|,
name|numbers
argument_list|)
decl_stmt|;
comment|//Invalid path expression left operand (not a node set).
name|String
name|message
init|=
literal|""
decl_stmt|;
try|try
block|{
name|queryAndAssert
argument_list|(
name|service
argument_list|,
literal|"('a', 'b', 'c')/position()"
argument_list|,
operator|-
literal|1
argument_list|,
literal|null
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|XMLDBException
name|e
parameter_list|)
block|{
name|message
operator|=
name|e
operator|.
name|getMessage
argument_list|()
expr_stmt|;
block|}
name|assertTrue
argument_list|(
literal|"Exception wanted: "
operator|+
name|message
argument_list|,
name|message
operator|.
name|indexOf
argument_list|(
literal|"XPTY0019"
argument_list|)
operator|>
operator|-
literal|1
argument_list|)
expr_stmt|;
comment|//Undefined context sequence
name|message
operator|=
literal|""
expr_stmt|;
try|try
block|{
name|queryAndAssert
argument_list|(
name|service
argument_list|,
literal|"for $a in (<a/>,<b/>, doh,<c/>) return $a"
argument_list|,
operator|-
literal|1
argument_list|,
literal|null
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|XMLDBException
name|e
parameter_list|)
block|{
name|message
operator|=
name|e
operator|.
name|getMessage
argument_list|()
expr_stmt|;
block|}
name|assertTrue
argument_list|(
literal|"Exception wanted: "
operator|+
name|message
argument_list|,
name|message
operator|.
name|indexOf
argument_list|(
literal|"XPDY0002"
argument_list|)
operator|>
operator|-
literal|1
argument_list|)
expr_stmt|;
name|message
operator|=
literal|""
expr_stmt|;
try|try
block|{
comment|//"1 to 2" is resolved as a (1, 2), i.e. a sequence of *integers* which is *not* a singleton
name|queryAndAssert
argument_list|(
name|service
argument_list|,
literal|"let $a := (1, 2, 3) for $b in $a[1 to 2] return $b"
argument_list|,
operator|-
literal|1
argument_list|,
literal|null
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|XMLDBException
name|e
parameter_list|)
block|{
name|message
operator|=
name|e
operator|.
name|getMessage
argument_list|()
expr_stmt|;
block|}
comment|//No effective boolean value for such a kind of sequence !
name|assertTrue
argument_list|(
literal|"Exception wanted: "
operator|+
name|message
argument_list|,
name|message
operator|.
name|indexOf
argument_list|(
literal|"FORG0006"
argument_list|)
operator|>
operator|-
literal|1
argument_list|)
expr_stmt|;
name|queryAndAssert
argument_list|(
name|service
argument_list|,
literal|"let $a := ('a', 'b', 'c') return $a[2 to 2]"
argument_list|,
literal|1
argument_list|,
literal|null
argument_list|)
expr_stmt|;
name|queryAndAssert
argument_list|(
name|service
argument_list|,
literal|"let $a := ('a', 'b', 'c') return $a[(2 to 2)]"
argument_list|,
literal|1
argument_list|,
literal|null
argument_list|)
expr_stmt|;
name|queryAndAssert
argument_list|(
name|service
argument_list|,
literal|"let $x :=<a min='1' max='10'/> return ($x/@min to $x/@max)"
argument_list|,
literal|10
argument_list|,
literal|null
argument_list|)
expr_stmt|;
name|queryAndAssert
argument_list|(
name|service
argument_list|,
literal|"(1,2,3)[xs:decimal(.)]"
argument_list|,
literal|3
argument_list|,
literal|null
argument_list|)
expr_stmt|;
name|queryAndAssert
argument_list|(
name|service
argument_list|,
literal|"(1,2,3)[. lt 3]"
argument_list|,
literal|2
argument_list|,
literal|null
argument_list|)
expr_stmt|;
name|queryAndAssert
argument_list|(
name|service
argument_list|,
literal|"(0, 1, 2)[if(. eq 1) then 0 else position()]"
argument_list|,
literal|2
argument_list|,
literal|null
argument_list|)
expr_stmt|;
name|queryAndAssert
argument_list|(
name|service
argument_list|,
literal|"(1, 2, 3)[if(1) then 1 else last()]"
argument_list|,
literal|1
argument_list|,
literal|null
argument_list|)
expr_stmt|;
name|queryAndAssert
argument_list|(
name|service
argument_list|,
literal|"(1, 2, 3)[if(1) then 1 else position()]"
argument_list|,
literal|1
argument_list|,
literal|null
argument_list|)
expr_stmt|;
name|queryAndAssert
argument_list|(
name|service
argument_list|,
literal|"()/position()"
argument_list|,
literal|0
argument_list|,
literal|null
argument_list|)
expr_stmt|;
name|queryAndAssert
argument_list|(
name|service
argument_list|,
literal|"(0, 1, 2)[if(. eq 1) then 2 else 3]"
argument_list|,
literal|2
argument_list|,
literal|null
argument_list|)
expr_stmt|;
name|queryAndAssert
argument_list|(
name|service
argument_list|,
literal|"(0, 1, 2)[remove((1, 'a string'), 2)]"
argument_list|,
literal|1
argument_list|,
literal|null
argument_list|)
expr_stmt|;
name|queryAndAssert
argument_list|(
name|service
argument_list|,
literal|"let $page-ix := (1,3) return ($page-ix[1] to $page-ix[2])"
argument_list|,
literal|3
argument_list|,
literal|null
argument_list|)
expr_stmt|;
block|}
comment|/** test simple queries involving attributes */
annotation|@
name|Test
specifier|public
name|void
name|attributes
parameter_list|()
throws|throws
name|XMLDBException
block|{
specifier|final
name|String
name|testDocument
init|=
literal|"numbers.xml"
decl_stmt|;
specifier|final
name|XQueryService
name|service
init|=
name|storeXMLStringAndGetQueryService
argument_list|(
name|testDocument
argument_list|,
name|numbers
argument_list|)
decl_stmt|;
name|String
name|query
init|=
literal|"/test/item[ @id='1' ]"
decl_stmt|;
name|ResourceSet
name|result
init|=
name|service
operator|.
name|queryResource
argument_list|(
name|testDocument
argument_list|,
name|query
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|"XPath: "
operator|+
name|query
argument_list|,
literal|1
argument_list|,
name|result
operator|.
name|getSize
argument_list|()
argument_list|)
expr_stmt|;
name|XMLResource
name|resource
init|=
operator|(
name|XMLResource
operator|)
name|result
operator|.
name|getResource
argument_list|(
literal|0
argument_list|)
decl_stmt|;
name|Node
name|node
init|=
name|resource
operator|.
name|getContentAsDOM
argument_list|()
decl_stmt|;
if|if
condition|(
name|node
operator|.
name|getNodeType
argument_list|()
operator|==
name|Node
operator|.
name|DOCUMENT_NODE
condition|)
name|node
operator|=
name|node
operator|.
name|getFirstChild
argument_list|()
expr_stmt|;
name|assertEquals
argument_list|(
literal|"XPath: "
operator|+
name|query
argument_list|,
literal|"item"
argument_list|,
name|node
operator|.
name|getNodeName
argument_list|()
argument_list|)
expr_stmt|;
name|query
operator|=
literal|"/test/item [ @type='alphanum' ]"
expr_stmt|;
name|result
operator|=
name|service
operator|.
name|queryResource
argument_list|(
name|testDocument
argument_list|,
name|query
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"XPath: "
operator|+
name|query
argument_list|,
literal|1
argument_list|,
name|result
operator|.
name|getSize
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|starAxis
parameter_list|()
throws|throws
name|XMLDBException
block|{
specifier|final
name|XQueryService
name|service
init|=
name|storeXMLStringAndGetQueryService
argument_list|(
literal|"numbers.xml"
argument_list|,
name|numbers
argument_list|)
decl_stmt|;
name|ResourceSet
name|result
init|=
name|service
operator|.
name|queryResource
argument_list|(
literal|"numbers.xml"
argument_list|,
literal|"/*/item"
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|"XPath: /*/item"
argument_list|,
literal|4
argument_list|,
name|result
operator|.
name|getSize
argument_list|()
argument_list|)
expr_stmt|;
name|result
operator|=
name|service
operator|.
name|queryResource
argument_list|(
literal|"numbers.xml"
argument_list|,
literal|"/test/*"
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"XPath: /test/*"
argument_list|,
literal|4
argument_list|,
name|result
operator|.
name|getSize
argument_list|()
argument_list|)
expr_stmt|;
name|result
operator|=
name|service
operator|.
name|queryResource
argument_list|(
literal|"numbers.xml"
argument_list|,
literal|"/test/descendant-or-self::*"
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"XPath: /test/descendant-or-self::*"
argument_list|,
literal|13
argument_list|,
name|result
operator|.
name|getSize
argument_list|()
argument_list|)
expr_stmt|;
name|result
operator|=
name|service
operator|.
name|queryResource
argument_list|(
literal|"numbers.xml"
argument_list|,
literal|"/*/*"
argument_list|)
expr_stmt|;
comment|//Strange !!! Should be 8
name|assertEquals
argument_list|(
literal|"XPath: /*/*"
argument_list|,
literal|4
argument_list|,
name|result
operator|.
name|getSize
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|starAxisConstraints
parameter_list|()
throws|throws
name|XMLDBException
block|{
specifier|final
name|XQueryService
name|service
init|=
name|storeXMLStringAndGetQueryService
argument_list|(
literal|"namespaces.xml"
argument_list|,
name|namespaces
argument_list|)
decl_stmt|;
name|service
operator|.
name|setNamespace
argument_list|(
literal|"t"
argument_list|,
literal|"http://www.foo.com"
argument_list|)
expr_stmt|;
name|String
name|query
init|=
literal|"// t:title/text() [ . != 'aaaa' ]"
decl_stmt|;
name|ResourceSet
name|result
init|=
name|service
operator|.
name|queryResource
argument_list|(
literal|"namespaces.xml"
argument_list|,
name|query
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|"XPath: "
operator|+
name|query
argument_list|,
literal|1
argument_list|,
name|result
operator|.
name|getSize
argument_list|()
argument_list|)
expr_stmt|;
name|query
operator|=
literal|"/t:test/*:section[contains(., 'comment')]"
expr_stmt|;
name|result
operator|=
name|service
operator|.
name|queryResource
argument_list|(
literal|"namespaces.xml"
argument_list|,
name|query
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"XPath: "
operator|+
name|query
argument_list|,
literal|1
argument_list|,
name|result
operator|.
name|getSize
argument_list|()
argument_list|)
expr_stmt|;
name|query
operator|=
literal|"/t:test/t:*[contains(., 'comment')]"
expr_stmt|;
name|result
operator|=
name|service
operator|.
name|queryResource
argument_list|(
literal|"namespaces.xml"
argument_list|,
name|query
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"XPath: "
operator|+
name|query
argument_list|,
literal|1
argument_list|,
name|result
operator|.
name|getSize
argument_list|()
argument_list|)
expr_stmt|;
name|query
operator|=
literal|"/t:test/t:section[contains(., 'comment')]"
expr_stmt|;
name|result
operator|=
name|service
operator|.
name|queryResource
argument_list|(
literal|"namespaces.xml"
argument_list|,
name|query
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"XPath: "
operator|+
name|query
argument_list|,
literal|1
argument_list|,
name|result
operator|.
name|getSize
argument_list|()
argument_list|)
expr_stmt|;
name|query
operator|=
literal|"/t:test/t:section/*[contains(., 'comment')]"
expr_stmt|;
name|result
operator|=
name|service
operator|.
name|queryResource
argument_list|(
literal|"namespaces.xml"
argument_list|,
name|query
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"XPath: "
operator|+
name|query
argument_list|,
literal|1
argument_list|,
name|result
operator|.
name|getSize
argument_list|()
argument_list|)
expr_stmt|;
name|query
operator|=
literal|"/ * / * [ t:title ]"
expr_stmt|;
name|result
operator|=
name|service
operator|.
name|queryResource
argument_list|(
literal|"namespaces.xml"
argument_list|,
name|query
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"XPath: "
operator|+
name|query
argument_list|,
literal|1
argument_list|,
name|result
operator|.
name|getSize
argument_list|()
argument_list|)
expr_stmt|;
name|query
operator|=
literal|"/ t:test / t:section [ t:title ]"
expr_stmt|;
name|result
operator|=
name|service
operator|.
name|queryResource
argument_list|(
literal|"namespaces.xml"
argument_list|,
name|query
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"XPath: "
operator|+
name|query
argument_list|,
literal|1
argument_list|,
name|result
operator|.
name|getSize
argument_list|()
argument_list|)
expr_stmt|;
name|query
operator|=
literal|"/ t:test / t:section"
expr_stmt|;
name|result
operator|=
name|service
operator|.
name|queryResource
argument_list|(
literal|"namespaces.xml"
argument_list|,
name|query
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"XPath: "
operator|+
name|query
argument_list|,
literal|1
argument_list|,
name|result
operator|.
name|getSize
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|starAxisConstraints2
parameter_list|()
throws|throws
name|XMLDBException
block|{
specifier|final
name|XQueryService
name|service
init|=
name|storeXMLStringAndGetQueryService
argument_list|(
literal|"namespaces.xml"
argument_list|,
name|namespaces
argument_list|)
decl_stmt|;
name|service
operator|.
name|setNamespace
argument_list|(
literal|"t"
argument_list|,
literal|"http://www.foo.com"
argument_list|)
expr_stmt|;
name|String
name|query
init|=
literal|"/ * [ ./ * / t:title ]"
decl_stmt|;
name|ResourceSet
name|result
init|=
name|service
operator|.
name|queryResource
argument_list|(
literal|"namespaces.xml"
argument_list|,
name|query
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|"XPath: "
operator|+
name|query
argument_list|,
literal|1
argument_list|,
name|result
operator|.
name|getSize
argument_list|()
argument_list|)
expr_stmt|;
name|query
operator|=
literal|"/ * [ * / t:title ]"
expr_stmt|;
name|result
operator|=
name|service
operator|.
name|queryResource
argument_list|(
literal|"namespaces.xml"
argument_list|,
name|query
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"XPath: "
operator|+
name|query
argument_list|,
literal|1
argument_list|,
name|result
operator|.
name|getSize
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|starAxisConstraints3
parameter_list|()
throws|throws
name|XMLDBException
block|{
specifier|final
name|XQueryService
name|service
init|=
name|storeXMLStringAndGetQueryService
argument_list|(
literal|"namespaces.xml"
argument_list|,
name|namespaces
argument_list|)
decl_stmt|;
name|service
operator|.
name|setNamespace
argument_list|(
literal|"t"
argument_list|,
literal|"http://www.foo.com"
argument_list|)
expr_stmt|;
specifier|final
name|String
name|query
init|=
literal|"// * [ . = 'Test Document' ]"
decl_stmt|;
specifier|final
name|ResourceSet
name|result
init|=
name|service
operator|.
name|queryResource
argument_list|(
literal|"namespaces.xml"
argument_list|,
name|query
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|"XPath: "
operator|+
name|query
argument_list|,
literal|1
argument_list|,
name|result
operator|.
name|getSize
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|root
parameter_list|()
throws|throws
name|XMLDBException
block|{
name|storeXMLStringAndGetQueryService
argument_list|(
literal|"nested2.xml"
argument_list|,
name|nested2
argument_list|)
expr_stmt|;
specifier|final
name|XQueryService
name|service
init|=
name|storeXMLStringAndGetQueryService
argument_list|(
literal|"numbers.xml"
argument_list|,
name|numbers
argument_list|)
decl_stmt|;
name|String
name|query
init|=
literal|"let $doc :=<a><b/></a> return root($doc)"
decl_stmt|;
name|ResourceSet
name|result
init|=
name|service
operator|.
name|queryResource
argument_list|(
literal|"numbers.xml"
argument_list|,
name|query
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|"XPath: "
operator|+
name|query
argument_list|,
literal|1
argument_list|,
name|result
operator|.
name|getSize
argument_list|()
argument_list|)
expr_stmt|;
specifier|final
name|XMLResource
name|resource
init|=
operator|(
name|XMLResource
operator|)
name|result
operator|.
name|getResource
argument_list|(
literal|0
argument_list|)
decl_stmt|;
name|Node
name|node
init|=
name|resource
operator|.
name|getContentAsDOM
argument_list|()
decl_stmt|;
comment|//Oh dear ! Don't tell me that *I* have written this :'( -pb
if|if
condition|(
name|node
operator|.
name|getNodeType
argument_list|()
operator|==
name|Node
operator|.
name|DOCUMENT_NODE
condition|)
block|{
name|node
operator|=
name|node
operator|.
name|getFirstChild
argument_list|()
expr_stmt|;
block|}
name|assertEquals
argument_list|(
literal|"XPath: "
operator|+
name|query
argument_list|,
literal|"a"
argument_list|,
name|node
operator|.
name|getLocalName
argument_list|()
argument_list|)
expr_stmt|;
name|query
operator|=
literal|"let $c := (<a/>,<b/>,<c/>,<d/>,<e/>) return count($c/root())"
expr_stmt|;
name|result
operator|=
name|service
operator|.
name|queryResource
argument_list|(
literal|"numbers.xml"
argument_list|,
name|query
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"5"
argument_list|,
name|result
operator|.
name|getResource
argument_list|(
literal|0
argument_list|)
operator|.
name|getContent
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|name
parameter_list|()
throws|throws
name|XMLDBException
block|{
specifier|final
name|XQueryService
name|service
init|=
name|storeXMLStringAndGetQueryService
argument_list|(
literal|"nested2.xml"
argument_list|,
name|nested2
argument_list|)
decl_stmt|;
specifier|final
name|String
name|query
init|=
literal|"(<a/>,<b/>)/name()"
decl_stmt|;
specifier|final
name|ResourceSet
name|result
init|=
name|service
operator|.
name|queryResource
argument_list|(
literal|"nested2.xml"
argument_list|,
name|query
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|"XPath: "
operator|+
name|query
argument_list|,
literal|2
argument_list|,
name|result
operator|.
name|getSize
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"a"
argument_list|,
name|result
operator|.
name|getResource
argument_list|(
literal|0
argument_list|)
operator|.
name|getContent
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"b"
argument_list|,
name|result
operator|.
name|getResource
argument_list|(
literal|1
argument_list|)
operator|.
name|getContent
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|parentAxis
parameter_list|()
throws|throws
name|XMLDBException
block|{
name|XQueryService
name|service
init|=
name|storeXMLStringAndGetQueryService
argument_list|(
literal|"nested2.xml"
argument_list|,
name|nested2
argument_list|)
decl_stmt|;
name|queryResource
argument_list|(
name|service
argument_list|,
literal|"nested2.xml"
argument_list|,
literal|"(<a/>,<b/>,<c/>)/parent::*"
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|queryResource
argument_list|(
name|service
argument_list|,
literal|"nested2.xml"
argument_list|,
literal|"/RootElement//ChildB/parent::*"
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|queryResource
argument_list|(
name|service
argument_list|,
literal|"nested2.xml"
argument_list|,
literal|"/RootElement//ChildB/parent::*/ChildB"
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|queryResource
argument_list|(
name|service
argument_list|,
literal|"nested2.xml"
argument_list|,
literal|"/RootElement/ChildA/parent::*/ChildA/ChildB"
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|service
operator|=
name|storeXMLStringAndGetQueryService
argument_list|(
literal|"numbers2.xml"
argument_list|,
name|numbers2
argument_list|)
expr_stmt|;
name|service
operator|.
name|setNamespace
argument_list|(
literal|"n"
argument_list|,
literal|"http://numbers.org"
argument_list|)
expr_stmt|;
name|queryResource
argument_list|(
name|service
argument_list|,
literal|"numbers2.xml"
argument_list|,
literal|"//n:price[. = 18.4]/parent::*[@id = '3']"
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|queryResource
argument_list|(
name|service
argument_list|,
literal|"numbers2.xml"
argument_list|,
literal|"//n:price[. = 18.4]/parent::n:item[@id = '3']"
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|queryResource
argument_list|(
name|service
argument_list|,
literal|"numbers2.xml"
argument_list|,
literal|"//n:price/parent::n:item[@id = '3']"
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|ResourceSet
name|result
init|=
name|queryResource
argument_list|(
name|service
argument_list|,
literal|"numbers2.xml"
argument_list|,
literal|"//n:price[. = 18.4]/parent::n:*/string(@id)"
argument_list|,
literal|1
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|"3"
argument_list|,
name|result
operator|.
name|getResource
argument_list|(
literal|0
argument_list|)
operator|.
name|getContent
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|result
operator|=
name|queryResource
argument_list|(
name|service
argument_list|,
literal|"numbers2.xml"
argument_list|,
literal|"//n:price[. = 18.4]/parent::*:item/string(@id)"
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"3"
argument_list|,
name|result
operator|.
name|getResource
argument_list|(
literal|0
argument_list|)
operator|.
name|getContent
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|result
operator|=
name|queryResource
argument_list|(
name|service
argument_list|,
literal|"numbers2.xml"
argument_list|,
literal|"//n:price[. = 18.4]/../string(@id)"
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"3"
argument_list|,
name|result
operator|.
name|getResource
argument_list|(
literal|0
argument_list|)
operator|.
name|getContent
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|result
operator|=
name|queryResource
argument_list|(
name|service
argument_list|,
literal|"numbers2.xml"
argument_list|,
literal|"//n:price[. = 18.4]/parent::n:item/string(@id)"
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"3"
argument_list|,
name|result
operator|.
name|getResource
argument_list|(
literal|0
argument_list|)
operator|.
name|getContent
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|queryResource
argument_list|(
name|service
argument_list|,
literal|"numbers2.xml"
argument_list|,
literal|"for $price in //n:price where $price/parent::*[@id = '3']/n:stock = '5' return $price"
argument_list|,
literal|1
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|parentSelfAxis
parameter_list|()
throws|throws
name|XMLDBException
block|{
specifier|final
name|XQueryService
name|service
init|=
name|storeXMLStringAndGetQueryService
argument_list|(
literal|"nested2.xml"
argument_list|,
name|nested2
argument_list|)
decl_stmt|;
name|storeXMLStringAndGetQueryService
argument_list|(
literal|"numbers.xml"
argument_list|,
name|numbers
argument_list|)
expr_stmt|;
name|queryResource
argument_list|(
name|service
argument_list|,
literal|"nested2.xml"
argument_list|,
literal|"/RootElement/descendant::*/parent::ChildA"
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|queryResource
argument_list|(
name|service
argument_list|,
literal|"nested2.xml"
argument_list|,
literal|"/RootElement/descendant::*[self::ChildB]/parent::RootElement"
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|queryResource
argument_list|(
name|service
argument_list|,
literal|"nested2.xml"
argument_list|,
literal|"/RootElement/descendant::*[self::ChildA]/parent::RootElement"
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|queryResource
argument_list|(
name|service
argument_list|,
literal|"nested2.xml"
argument_list|,
literal|"let $a := ('', 'b', '', '') for $b in $a[.] return<blah>{$b}</blah>"
argument_list|,
literal|1
argument_list|)
expr_stmt|;
specifier|final
name|String
name|query
init|=
literal|"let $doc :=<root><page><a>a</a><b>b</b></page></root>"
operator|+
literal|"return "
operator|+
literal|"for $element in $doc/page/* "
operator|+
literal|"return "
operator|+
literal|"if($element[self::a] or $element[self::b]) then (<found/>) else (<notfound/>)"
decl_stmt|;
specifier|final
name|ResourceSet
name|result
init|=
name|service
operator|.
name|queryResource
argument_list|(
literal|"numbers.xml"
argument_list|,
name|query
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|result
operator|.
name|getSize
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|selfAxis
parameter_list|()
throws|throws
name|XMLDBException
block|{
specifier|final
name|XQueryService
name|service
init|=
name|storeXMLStringAndGetQueryService
argument_list|(
literal|"self.xml"
argument_list|,
name|self
argument_list|)
decl_stmt|;
name|queryResource
argument_list|(
name|service
argument_list|,
literal|"self.xml"
argument_list|,
literal|"/test-self/*[not(self::a)]"
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|queryResource
argument_list|(
name|service
argument_list|,
literal|"self.xml"
argument_list|,
literal|"/test-self/*[self::a]"
argument_list|,
literal|1
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|ancestorAxis
parameter_list|()
throws|throws
name|XMLDBException
block|{
specifier|final
name|XQueryService
name|service
init|=
name|storeXMLStringAndGetQueryService
argument_list|(
literal|"nested3.xml"
argument_list|,
name|nested3
argument_list|)
decl_stmt|;
comment|// test ancestor axis with positional predicate
name|queryResource
argument_list|(
name|service
argument_list|,
literal|"nested3.xml"
argument_list|,
literal|"//a[ancestor::a[2]/t = '1']"
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|queryResource
argument_list|(
name|service
argument_list|,
literal|"nested3.xml"
argument_list|,
literal|"//a[ancestor::*[2]/t = '1']"
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|queryResource
argument_list|(
name|service
argument_list|,
literal|"nested3.xml"
argument_list|,
literal|"//a[ancestor::a[1]/t = '2']"
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|queryResource
argument_list|(
name|service
argument_list|,
literal|"nested3.xml"
argument_list|,
literal|"//a[ancestor::*[1]/t = '2']"
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|queryResource
argument_list|(
name|service
argument_list|,
literal|"nested3.xml"
argument_list|,
literal|"//a[ancestor-or-self::*[3]/t = '1']"
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|queryResource
argument_list|(
name|service
argument_list|,
literal|"nested3.xml"
argument_list|,
literal|"//a[ancestor-or-self::a[3]/t = '1']"
argument_list|,
literal|1
argument_list|)
expr_stmt|;
comment|// Following test fails
comment|//            queryResource(service, "nested3.xml", "//a[ancestor-or-self::*[2]/t = '2']", 1);
name|queryResource
argument_list|(
name|service
argument_list|,
literal|"nested3.xml"
argument_list|,
literal|"//a[ancestor-or-self::a[2]/t = '2']"
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|queryResource
argument_list|(
name|service
argument_list|,
literal|"nested3.xml"
argument_list|,
literal|"//a[t = '3'][ancestor-or-self::a[3]/t = '1']"
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|queryResource
argument_list|(
name|service
argument_list|,
literal|"nested3.xml"
argument_list|,
literal|"//a[t = '3'][ancestor-or-self::*[3]/t = '1']"
argument_list|,
literal|1
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|ancestorIndex
parameter_list|()
throws|throws
name|XMLDBException
block|{
specifier|final
name|XQueryService
name|service
init|=
name|storeXMLStringAndGetQueryService
argument_list|(
literal|"nested2.xml"
argument_list|,
name|nested2
argument_list|)
decl_stmt|;
name|queryResource
argument_list|(
name|service
argument_list|,
literal|"nested2.xml"
argument_list|,
literal|"//ChildB/ancestor::*[1]/self::ChildA"
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|queryResource
argument_list|(
name|service
argument_list|,
literal|"nested2.xml"
argument_list|,
literal|"//ChildB/ancestor::*[2]/self::RootElement"
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|queryResource
argument_list|(
name|service
argument_list|,
literal|"nested2.xml"
argument_list|,
literal|"//ChildB/ancestor::*[position() = 1]/self::ChildA"
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|queryResource
argument_list|(
name|service
argument_list|,
literal|"nested2.xml"
argument_list|,
literal|"//ChildB/ancestor::*[position() = 2]/self::RootElement"
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|queryResource
argument_list|(
name|service
argument_list|,
literal|"nested2.xml"
argument_list|,
literal|"//ChildB/ancestor::*[position() = 2]/self::RootElement"
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|queryResource
argument_list|(
name|service
argument_list|,
literal|"nested2.xml"
argument_list|,
literal|"(<a/>,<b/>,<c/>)/ancestor::*"
argument_list|,
literal|0
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|precedingSiblingAxis
parameter_list|()
throws|throws
name|XMLDBException
throws|,
name|IOException
throws|,
name|SAXException
block|{
specifier|final
name|XQueryService
name|service
init|=
name|storeXMLStringAndGetQueryService
argument_list|(
literal|"siblings.xml"
argument_list|,
name|siblings
argument_list|)
decl_stmt|;
name|service
operator|.
name|setProperty
argument_list|(
name|OutputKeys
operator|.
name|OMIT_XML_DECLARATION
argument_list|,
literal|"yes"
argument_list|)
expr_stmt|;
name|service
operator|.
name|setProperty
argument_list|(
name|OutputKeys
operator|.
name|INDENT
argument_list|,
literal|"no"
argument_list|)
expr_stmt|;
name|ResourceSet
name|result
init|=
name|queryResource
argument_list|(
name|service
argument_list|,
literal|"siblings.xml"
argument_list|,
literal|"//a[preceding-sibling::*[1]/s = 'B']"
argument_list|,
literal|1
argument_list|)
decl_stmt|;
name|assertXMLEqual
argument_list|(
literal|"<a><s>Z</s><n>4</n></a>"
argument_list|,
name|result
operator|.
name|getResource
argument_list|(
literal|0
argument_list|)
operator|.
name|getContent
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|result
operator|=
name|queryResource
argument_list|(
name|service
argument_list|,
literal|"siblings.xml"
argument_list|,
literal|"//a[preceding-sibling::a[1]/s = 'B']"
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|assertXMLEqual
argument_list|(
literal|"<a><s>Z</s><n>4</n></a>"
argument_list|,
name|result
operator|.
name|getResource
argument_list|(
literal|0
argument_list|)
operator|.
name|getContent
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|result
operator|=
name|queryResource
argument_list|(
name|service
argument_list|,
literal|"siblings.xml"
argument_list|,
literal|"//a[preceding-sibling::*[2]/s = 'B']"
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|assertXMLEqual
argument_list|(
literal|"<a><s>C</s><n>5</n></a>"
argument_list|,
name|result
operator|.
name|getResource
argument_list|(
literal|0
argument_list|)
operator|.
name|getContent
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|result
operator|=
name|queryResource
argument_list|(
name|service
argument_list|,
literal|"siblings.xml"
argument_list|,
literal|"//a[preceding-sibling::a[2]/s = 'B']"
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|assertXMLEqual
argument_list|(
literal|"<a><s>C</s><n>5</n></a>"
argument_list|,
name|result
operator|.
name|getResource
argument_list|(
literal|0
argument_list|)
operator|.
name|getContent
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|queryResource
argument_list|(
name|service
argument_list|,
literal|"siblings.xml"
argument_list|,
literal|"(<a/>,<b/>,<c/>)/following-sibling::*"
argument_list|,
literal|0
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|followingSiblingAxis
parameter_list|()
throws|throws
name|XMLDBException
throws|,
name|IOException
throws|,
name|SAXException
block|{
specifier|final
name|XQueryService
name|service
init|=
name|storeXMLStringAndGetQueryService
argument_list|(
literal|"siblings.xml"
argument_list|,
name|siblings
argument_list|)
decl_stmt|;
name|service
operator|.
name|setProperty
argument_list|(
name|OutputKeys
operator|.
name|OMIT_XML_DECLARATION
argument_list|,
literal|"yes"
argument_list|)
expr_stmt|;
name|service
operator|.
name|setProperty
argument_list|(
name|OutputKeys
operator|.
name|INDENT
argument_list|,
literal|"no"
argument_list|)
expr_stmt|;
name|ResourceSet
name|result
init|=
name|queryResource
argument_list|(
name|service
argument_list|,
literal|"siblings.xml"
argument_list|,
literal|"//a[following-sibling::*[1]/s = 'B']"
argument_list|,
literal|1
argument_list|)
decl_stmt|;
name|assertXMLEqual
argument_list|(
literal|"<a><s>Z</s><n>2</n></a>"
argument_list|,
name|result
operator|.
name|getResource
argument_list|(
literal|0
argument_list|)
operator|.
name|getContent
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|result
operator|=
name|queryResource
argument_list|(
name|service
argument_list|,
literal|"siblings.xml"
argument_list|,
literal|"//a[following-sibling::a[1]/s = 'B']"
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|assertXMLEqual
argument_list|(
literal|"<a><s>Z</s><n>2</n></a>"
argument_list|,
name|result
operator|.
name|getResource
argument_list|(
literal|0
argument_list|)
operator|.
name|getContent
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|result
operator|=
name|queryResource
argument_list|(
name|service
argument_list|,
literal|"siblings.xml"
argument_list|,
literal|"//a[following-sibling::*[2]/s = 'B']"
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|assertXMLEqual
argument_list|(
literal|"<a><s>A</s><n>1</n></a>"
argument_list|,
name|result
operator|.
name|getResource
argument_list|(
literal|0
argument_list|)
operator|.
name|getContent
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|result
operator|=
name|queryResource
argument_list|(
name|service
argument_list|,
literal|"siblings.xml"
argument_list|,
literal|"//a[following-sibling::a[2]/s = 'B']"
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|assertXMLEqual
argument_list|(
literal|"<a><s>A</s><n>1</n></a>"
argument_list|,
name|result
operator|.
name|getResource
argument_list|(
literal|0
argument_list|)
operator|.
name|getContent
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|queryResource
argument_list|(
name|service
argument_list|,
literal|"siblings.xml"
argument_list|,
literal|"(<a/>,<b/>,<c/>)/following-sibling::*"
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|service
operator|.
name|setProperty
argument_list|(
name|OutputKeys
operator|.
name|OMIT_XML_DECLARATION
argument_list|,
literal|"yes"
argument_list|)
expr_stmt|;
name|service
operator|.
name|setProperty
argument_list|(
name|OutputKeys
operator|.
name|INDENT
argument_list|,
literal|"no"
argument_list|)
expr_stmt|;
name|ResourceSet
name|rs
init|=
name|service
operator|.
name|query
argument_list|(
literal|"let $doc :=<doc><div id='1'><div id='2'/></div><div id='3'/></doc> "
operator|+
literal|"return $doc/div[1]/following-sibling::div"
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|rs
operator|.
name|getSize
argument_list|()
argument_list|)
expr_stmt|;
name|assertXMLEqual
argument_list|(
literal|"<div id='3'/>"
argument_list|,
name|rs
operator|.
name|getResource
argument_list|(
literal|0
argument_list|)
operator|.
name|getContent
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|service
operator|.
name|setProperty
argument_list|(
name|OutputKeys
operator|.
name|OMIT_XML_DECLARATION
argument_list|,
literal|"yes"
argument_list|)
expr_stmt|;
name|service
operator|.
name|setProperty
argument_list|(
name|OutputKeys
operator|.
name|INDENT
argument_list|,
literal|"no"
argument_list|)
expr_stmt|;
name|rs
operator|=
name|service
operator|.
name|query
argument_list|(
literal|"let $doc :=<doc><div id='1'/><div id='2'><div id='3'/></div><div id='4'/><div id='5'><div id='6'/></div></doc> "
operator|+
literal|"return $doc/div/preceding-sibling::div"
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|3
argument_list|,
name|rs
operator|.
name|getSize
argument_list|()
argument_list|)
expr_stmt|;
name|assertXMLEqual
argument_list|(
literal|"<div id='1'/>"
argument_list|,
name|rs
operator|.
name|getResource
argument_list|(
literal|0
argument_list|)
operator|.
name|getContent
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|assertXMLEqual
argument_list|(
literal|"<div id='2'><div id='3'/></div>"
argument_list|,
name|rs
operator|.
name|getResource
argument_list|(
literal|1
argument_list|)
operator|.
name|getContent
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|assertXMLEqual
argument_list|(
literal|"<div id='4'/>"
argument_list|,
name|rs
operator|.
name|getResource
argument_list|(
literal|2
argument_list|)
operator|.
name|getContent
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|followingAxis
parameter_list|()
throws|throws
name|XMLDBException
throws|,
name|IOException
throws|,
name|SAXException
block|{
specifier|final
name|XQueryService
name|service
init|=
name|storeXMLStringAndGetQueryService
argument_list|(
literal|"siblings.xml"
argument_list|,
name|siblings
argument_list|)
decl_stmt|;
name|service
operator|.
name|setProperty
argument_list|(
name|OutputKeys
operator|.
name|OMIT_XML_DECLARATION
argument_list|,
literal|"yes"
argument_list|)
expr_stmt|;
name|service
operator|.
name|setProperty
argument_list|(
name|OutputKeys
operator|.
name|INDENT
argument_list|,
literal|"no"
argument_list|)
expr_stmt|;
name|queryResource
argument_list|(
name|service
argument_list|,
literal|"siblings.xml"
argument_list|,
literal|"//a/s[. = 'B']/following::s"
argument_list|,
literal|3
argument_list|)
expr_stmt|;
name|queryResource
argument_list|(
name|service
argument_list|,
literal|"siblings.xml"
argument_list|,
literal|"//a/s[. = 'B']/following::n"
argument_list|,
literal|4
argument_list|)
expr_stmt|;
name|ResourceSet
name|result
init|=
name|queryResource
argument_list|(
name|service
argument_list|,
literal|"siblings.xml"
argument_list|,
literal|"//a/s[. = 'B']/following::s[1]"
argument_list|,
literal|1
argument_list|)
decl_stmt|;
name|assertXMLEqual
argument_list|(
literal|"<s>Z</s>"
argument_list|,
name|result
operator|.
name|getResource
argument_list|(
literal|0
argument_list|)
operator|.
name|getContent
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|result
operator|=
name|queryResource
argument_list|(
name|service
argument_list|,
literal|"siblings.xml"
argument_list|,
literal|"//a/s[. = 'B']/following::s[2]"
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|assertXMLEqual
argument_list|(
literal|"<s>C</s>"
argument_list|,
name|result
operator|.
name|getResource
argument_list|(
literal|0
argument_list|)
operator|.
name|getContent
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|precedingAxis
parameter_list|()
throws|throws
name|XMLDBException
block|{
specifier|final
name|XQueryService
name|service
init|=
name|storeXMLStringAndGetQueryService
argument_list|(
literal|"siblings.xml"
argument_list|,
name|siblings
argument_list|)
decl_stmt|;
name|service
operator|.
name|setProperty
argument_list|(
name|OutputKeys
operator|.
name|OMIT_XML_DECLARATION
argument_list|,
literal|"yes"
argument_list|)
expr_stmt|;
name|service
operator|.
name|setProperty
argument_list|(
name|OutputKeys
operator|.
name|INDENT
argument_list|,
literal|"no"
argument_list|)
expr_stmt|;
name|queryResource
argument_list|(
name|service
argument_list|,
literal|"siblings.xml"
argument_list|,
literal|"//a/s[. = 'B']/preceding::s"
argument_list|,
literal|2
argument_list|)
expr_stmt|;
name|queryResource
argument_list|(
name|service
argument_list|,
literal|"siblings.xml"
argument_list|,
literal|"//a/s[. = 'C']/preceding::s"
argument_list|,
literal|4
argument_list|)
expr_stmt|;
name|queryResource
argument_list|(
name|service
argument_list|,
literal|"siblings.xml"
argument_list|,
literal|"//a/n[. = '3']/preceding::s"
argument_list|,
literal|3
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|position
parameter_list|()
throws|throws
name|XMLDBException
throws|,
name|IOException
throws|,
name|SAXException
block|{
specifier|final
name|XQueryService
name|service
init|=
name|storeXMLStringAndGetQueryService
argument_list|(
literal|"numbers.xml"
argument_list|,
name|numbers
argument_list|)
decl_stmt|;
name|queryResource
argument_list|(
name|service
argument_list|,
literal|"numbers.xml"
argument_list|,
literal|"//item[position() = 3]"
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|queryResource
argument_list|(
name|service
argument_list|,
literal|"numbers.xml"
argument_list|,
literal|"//item[position()< 3]"
argument_list|,
literal|2
argument_list|)
expr_stmt|;
name|queryResource
argument_list|(
name|service
argument_list|,
literal|"numbers.xml"
argument_list|,
literal|"//item[position()<= 3]"
argument_list|,
literal|3
argument_list|)
expr_stmt|;
name|queryResource
argument_list|(
name|service
argument_list|,
literal|"numbers.xml"
argument_list|,
literal|"//item[position()> 3]"
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|queryResource
argument_list|(
name|service
argument_list|,
literal|"numbers.xml"
argument_list|,
literal|"//item[position()>= 3]"
argument_list|,
literal|2
argument_list|)
expr_stmt|;
name|queryResource
argument_list|(
name|service
argument_list|,
literal|"numbers.xml"
argument_list|,
literal|"//item[position() eq 3]"
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|queryResource
argument_list|(
name|service
argument_list|,
literal|"numbers.xml"
argument_list|,
literal|"//item[position() lt 3]"
argument_list|,
literal|2
argument_list|)
expr_stmt|;
name|queryResource
argument_list|(
name|service
argument_list|,
literal|"numbers.xml"
argument_list|,
literal|"//item[position() le 3]"
argument_list|,
literal|3
argument_list|)
expr_stmt|;
name|queryResource
argument_list|(
name|service
argument_list|,
literal|"numbers.xml"
argument_list|,
literal|"//item[position() gt 3]"
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|queryResource
argument_list|(
name|service
argument_list|,
literal|"numbers.xml"
argument_list|,
literal|"//item[position() ge 3]"
argument_list|,
literal|2
argument_list|)
expr_stmt|;
name|queryResource
argument_list|(
name|service
argument_list|,
literal|"numbers.xml"
argument_list|,
literal|"//item[last() - 1]"
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|queryResource
argument_list|(
name|service
argument_list|,
literal|"numbers.xml"
argument_list|,
literal|"//item[count(('a','b')) - 1]"
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|String
name|query
init|=
literal|"for $a in (<a/>,<b/>,<c/>) return $a/position()"
decl_stmt|;
name|ResourceSet
name|result
init|=
name|service
operator|.
name|queryResource
argument_list|(
literal|"numbers.xml"
argument_list|,
name|query
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|"XPath: "
operator|+
name|query
argument_list|,
literal|3
argument_list|,
name|result
operator|.
name|getSize
argument_list|()
argument_list|)
expr_stmt|;
name|XMLResource
name|resource
init|=
operator|(
name|XMLResource
operator|)
name|result
operator|.
name|getResource
argument_list|(
literal|0
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|"XPath: "
operator|+
name|query
argument_list|,
literal|"1"
argument_list|,
name|resource
operator|.
name|getContent
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|resource
operator|=
operator|(
name|XMLResource
operator|)
name|result
operator|.
name|getResource
argument_list|(
literal|1
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"XPath: "
operator|+
name|query
argument_list|,
literal|"1"
argument_list|,
name|resource
operator|.
name|getContent
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|resource
operator|=
operator|(
name|XMLResource
operator|)
name|result
operator|.
name|getResource
argument_list|(
literal|2
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"XPath: "
operator|+
name|query
argument_list|,
literal|"1"
argument_list|,
name|resource
operator|.
name|getContent
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|query
operator|=
literal|"declare variable $doc {<root>"
operator|+
literal|"<a>1</a><a>2</a><a>3</a><a>4</a><a>5</a><a>6</a><a>7</a>"
operator|+
literal|"</root> }; "
operator|+
literal|"(for $x in $doc/a return $x)[position() mod 3 = 2]"
expr_stmt|;
name|result
operator|=
name|service
operator|.
name|queryResource
argument_list|(
literal|"numbers.xml"
argument_list|,
name|query
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"XPath: "
operator|+
name|query
argument_list|,
literal|2
argument_list|,
name|result
operator|.
name|getSize
argument_list|()
argument_list|)
expr_stmt|;
name|query
operator|=
literal|"declare variable $doc {<root>"
operator|+
literal|"<a>1</a><a>2</a><a>3</a><a>4</a><a>5</a><a>6</a><a>7</a>"
operator|+
literal|"</root> }; "
operator|+
literal|"for $x in $doc/a return $x[position() mod 3 = 2]"
expr_stmt|;
name|result
operator|=
name|service
operator|.
name|queryResource
argument_list|(
literal|"numbers.xml"
argument_list|,
name|query
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"XPath: "
operator|+
name|query
argument_list|,
literal|0
argument_list|,
name|result
operator|.
name|getSize
argument_list|()
argument_list|)
expr_stmt|;
name|query
operator|=
literal|"declare variable $doc {<root>"
operator|+
literal|"<a>1</a><a>2</a><a>3</a><a>4</a><a>5</a><a>6</a><a>7</a>"
operator|+
literal|"</root> }; "
operator|+
literal|"for $x in $doc/a[position() mod 3 = 2] return $x"
expr_stmt|;
name|result
operator|=
name|service
operator|.
name|queryResource
argument_list|(
literal|"numbers.xml"
argument_list|,
name|query
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"XPath: "
operator|+
name|query
argument_list|,
literal|2
argument_list|,
name|result
operator|.
name|getSize
argument_list|()
argument_list|)
expr_stmt|;
name|query
operator|=
literal|"let $test :=<test><a> a</a><a>a</a></test>"
operator|+
literal|"return distinct-values($test/a/normalize-space(.))"
expr_stmt|;
name|result
operator|=
name|service
operator|.
name|queryResource
argument_list|(
literal|"numbers.xml"
argument_list|,
name|query
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"XPath: "
operator|+
name|query
argument_list|,
literal|1
argument_list|,
name|result
operator|.
name|getSize
argument_list|()
argument_list|)
expr_stmt|;
name|resource
operator|=
operator|(
name|XMLResource
operator|)
name|result
operator|.
name|getResource
argument_list|(
literal|0
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"XPath: "
operator|+
name|query
argument_list|,
literal|"a"
argument_list|,
name|resource
operator|.
name|getContent
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|query
operator|=
literal|"let $doc := document {<a><b n='1'/><b n='2'/></a>} "
operator|+
literal|"return $doc//b/(if (@n = '1') then position() else ())"
expr_stmt|;
name|result
operator|=
name|service
operator|.
name|queryResource
argument_list|(
literal|"numbers.xml"
argument_list|,
name|query
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"XPath: "
operator|+
name|query
argument_list|,
literal|1
argument_list|,
name|result
operator|.
name|getSize
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"1"
argument_list|,
name|result
operator|.
name|getResource
argument_list|(
literal|0
argument_list|)
operator|.
name|getContent
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
comment|//Try a second time to see if the position is reset
name|result
operator|=
name|service
operator|.
name|queryResource
argument_list|(
literal|"numbers.xml"
argument_list|,
name|query
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"XPath: "
operator|+
name|query
argument_list|,
literal|1
argument_list|,
name|result
operator|.
name|getSize
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"1"
argument_list|,
name|result
operator|.
name|getResource
argument_list|(
literal|0
argument_list|)
operator|.
name|getContent
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|query
operator|=
literal|"let $doc := document {<a><b/></a>} "
operator|+
literal|"return $doc/a[1] [b[1]]"
expr_stmt|;
name|service
operator|.
name|setProperty
argument_list|(
name|OutputKeys
operator|.
name|INDENT
argument_list|,
literal|"no"
argument_list|)
expr_stmt|;
name|result
operator|=
name|service
operator|.
name|queryResource
argument_list|(
literal|"numbers.xml"
argument_list|,
name|query
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"XPath: "
operator|+
name|query
argument_list|,
literal|1
argument_list|,
name|result
operator|.
name|getSize
argument_list|()
argument_list|)
expr_stmt|;
name|assertXMLEqual
argument_list|(
literal|"<a><b/></a>"
argument_list|,
name|result
operator|.
name|getResource
argument_list|(
literal|0
argument_list|)
operator|.
name|getContent
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
comment|//TODO : make this work ! It currently returns some content
comment|//query = "let $doc := document {<a><b><c>1</c></b><b><c>a</c></b></a>} " +
comment|//	"return $doc/a[b[position() = 2]/c[.='1']]";
comment|//result = service.queryResource("numbers.xml", query);
comment|//assertEquals("XPath: " + query, 0, result.getSize());
comment|// TODO: make this work ! It currently returns 1
comment|//query = "let $a := ('a', 'b', 'c') for $b in $a[position()] return<blah>{$b}</blah>";
comment|//result = service.queryResource("numbers.xml", query);
comment|//assertEquals("XPath: " + query, 3, result.getSize());
block|}
annotation|@
name|Test
specifier|public
name|void
name|last
parameter_list|()
throws|throws
name|XMLDBException
block|{
specifier|final
name|XQueryService
name|service
init|=
name|storeXMLStringAndGetQueryService
argument_list|(
literal|"numbers.xml"
argument_list|,
name|numbers
argument_list|)
decl_stmt|;
specifier|final
name|String
name|query
init|=
literal|"<a><b>test1</b><b>test2</b></a>/b/last()"
decl_stmt|;
specifier|final
name|ResourceSet
name|result
init|=
name|service
operator|.
name|queryResource
argument_list|(
literal|"numbers.xml"
argument_list|,
name|query
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|"XPath: "
operator|+
name|query
argument_list|,
literal|2
argument_list|,
name|result
operator|.
name|getSize
argument_list|()
argument_list|)
expr_stmt|;
name|XMLResource
name|resource
init|=
operator|(
name|XMLResource
operator|)
name|result
operator|.
name|getResource
argument_list|(
literal|0
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|"XPath: "
operator|+
name|query
argument_list|,
literal|"2"
argument_list|,
name|resource
operator|.
name|getContent
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|resource
operator|=
operator|(
name|XMLResource
operator|)
name|result
operator|.
name|getResource
argument_list|(
literal|1
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"XPath: "
operator|+
name|query
argument_list|,
literal|"2"
argument_list|,
name|resource
operator|.
name|getContent
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|numbers
parameter_list|()
throws|throws
name|XMLDBException
block|{
specifier|final
name|XQueryService
name|service
init|=
name|storeXMLStringAndGetQueryService
argument_list|(
literal|"numbers.xml"
argument_list|,
name|numbers
argument_list|)
decl_stmt|;
name|ResourceSet
name|result
init|=
name|queryResource
argument_list|(
name|service
argument_list|,
literal|"numbers.xml"
argument_list|,
literal|"sum(/test/item/price)"
argument_list|,
literal|1
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|"96.94"
argument_list|,
name|result
operator|.
name|getResource
argument_list|(
literal|0
argument_list|)
operator|.
name|getContent
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|result
operator|=
name|queryResource
argument_list|(
name|service
argument_list|,
literal|"numbers.xml"
argument_list|,
literal|"round(sum(/test/item/price))"
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"97"
argument_list|,
name|result
operator|.
name|getResource
argument_list|(
literal|0
argument_list|)
operator|.
name|getContent
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|result
operator|=
name|queryResource
argument_list|(
name|service
argument_list|,
literal|"numbers.xml"
argument_list|,
literal|"floor(sum(/test/item/stock))"
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"86"
argument_list|,
name|result
operator|.
name|getResource
argument_list|(
literal|0
argument_list|)
operator|.
name|getContent
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|queryResource
argument_list|(
name|service
argument_list|,
literal|"numbers.xml"
argument_list|,
literal|"/test/item[round(price + 3)> 60]"
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|result
operator|=
name|queryResource
argument_list|(
name|service
argument_list|,
literal|"numbers.xml"
argument_list|,
literal|"min(( 123456789123456789123456789, "
operator|+
literal|"123456789123456789123456789123456789123456789 ))"
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"minimum of big integers"
argument_list|,
literal|"123456789123456789123456789"
argument_list|,
name|result
operator|.
name|getResource
argument_list|(
literal|0
argument_list|)
operator|.
name|getContent
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|String
name|message
init|=
literal|""
decl_stmt|;
try|try
block|{
name|queryResource
argument_list|(
name|service
argument_list|,
literal|"numbers.xml"
argument_list|,
literal|"empty(() + (1, 2))"
argument_list|,
literal|1
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|XMLDBException
name|e
parameter_list|)
block|{
name|message
operator|=
name|e
operator|.
name|getMessage
argument_list|()
expr_stmt|;
block|}
name|assertTrue
argument_list|(
name|message
operator|.
name|indexOf
argument_list|(
literal|"XPTY0004"
argument_list|)
operator|>
operator|-
literal|1
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|dates
parameter_list|()
throws|throws
name|XMLDBException
block|{
specifier|final
name|XQueryService
name|service
init|=
name|storeXMLStringAndGetQueryService
argument_list|(
literal|"numbers.xml"
argument_list|,
name|numbers
argument_list|)
decl_stmt|;
name|String
name|query
init|=
literal|"xs:untypedAtomic(\"--12-05:00\") cast as xs:gMonth"
decl_stmt|;
name|ResourceSet
name|result
init|=
name|service
operator|.
name|queryResource
argument_list|(
literal|"numbers.xml"
argument_list|,
name|query
argument_list|)
decl_stmt|;
name|XMLResource
name|resource
init|=
operator|(
name|XMLResource
operator|)
name|result
operator|.
name|getResource
argument_list|(
literal|0
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|"XPath: "
operator|+
name|query
argument_list|,
literal|"--12-05:00"
argument_list|,
name|resource
operator|.
name|getContent
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|query
operator|=
literal|"(xs:dateTime(\"0001-01-01T01:01:01Z\") + xs:yearMonthDuration(\"-P20Y07M\"))"
expr_stmt|;
name|result
operator|=
name|service
operator|.
name|queryResource
argument_list|(
literal|"numbers.xml"
argument_list|,
name|query
argument_list|)
expr_stmt|;
name|resource
operator|=
operator|(
name|XMLResource
operator|)
name|result
operator|.
name|getResource
argument_list|(
literal|0
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"XPath: "
operator|+
name|query
argument_list|,
literal|"-0021-06-01T01:01:01Z"
argument_list|,
name|resource
operator|.
name|getContent
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|generalComparison
parameter_list|()
throws|throws
name|XMLDBException
block|{
specifier|final
name|XQueryService
name|service
init|=
name|storeXMLStringAndGetQueryService
argument_list|(
literal|"dates.xml"
argument_list|,
name|date
argument_list|)
decl_stmt|;
name|queryResource
argument_list|(
name|service
argument_list|,
literal|"dates.xml"
argument_list|,
literal|"/timestamp[@date = xs:date('2006-04-29+02:00')]"
argument_list|,
literal|1
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|predicates
parameter_list|()
throws|throws
name|XMLDBException
throws|,
name|IOException
throws|,
name|SAXException
block|{
specifier|final
name|String
name|numbers
init|=
literal|"<test>"
operator|+
literal|"<item id='1' type='alphanum'><price>5.6</price><stock>22</stock></item>"
operator|+
literal|"<item id='2'><price>7.4</price><stock>43</stock></item>"
operator|+
literal|"<item id='3'><price>18.4</price><stock>5</stock></item>"
operator|+
literal|"<item id='4'><price>65.54</price><stock>16</stock></item>"
operator|+
literal|"</test>"
decl_stmt|;
specifier|final
name|XQueryService
name|service
init|=
name|storeXMLStringAndGetQueryService
argument_list|(
literal|"numbers.xml"
argument_list|,
name|numbers
argument_list|)
decl_stmt|;
name|service
operator|.
name|setProperty
argument_list|(
name|OutputKeys
operator|.
name|INDENT
argument_list|,
literal|"no"
argument_list|)
expr_stmt|;
name|ResourceSet
name|result
init|=
name|queryResource
argument_list|(
name|service
argument_list|,
literal|"numbers.xml"
argument_list|,
literal|"/test/item[2]/price/text()"
argument_list|,
literal|1
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|"7.4"
argument_list|,
name|result
operator|.
name|getResource
argument_list|(
literal|0
argument_list|)
operator|.
name|getContent
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|result
operator|=
name|queryResource
argument_list|(
name|service
argument_list|,
literal|"numbers.xml"
argument_list|,
literal|"/test/item[5]"
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|result
operator|=
name|queryResource
argument_list|(
name|service
argument_list|,
literal|"numbers.xml"
argument_list|,
literal|"/test/item[@id='4'][1]/price[1]/text()"
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"65.54"
argument_list|,
name|result
operator|.
name|getResource
argument_list|(
literal|0
argument_list|)
operator|.
name|getContent
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|result
operator|=
name|queryResource
argument_list|(
name|service
argument_list|,
literal|"numbers.xml"
argument_list|,
literal|"for $i in //item return "
operator|+
literal|"<item>{$i/price, $i/stock}</item>"
argument_list|,
literal|4
argument_list|)
expr_stmt|;
name|assertXMLEqual
argument_list|(
literal|"<item><price>5.6</price><stock>22</stock></item>"
argument_list|,
name|result
operator|.
name|getResource
argument_list|(
literal|0
argument_list|)
operator|.
name|getContent
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|assertXMLEqual
argument_list|(
literal|"<item><price>65.54</price><stock>16</stock></item>"
argument_list|,
name|result
operator|.
name|getResource
argument_list|(
literal|3
argument_list|)
operator|.
name|getContent
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
comment|// test positional predicates
name|result
operator|=
name|queryResource
argument_list|(
name|service
argument_list|,
literal|"numbers.xml"
argument_list|,
literal|"/test/node()[2]"
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|assertXMLEqual
argument_list|(
literal|"<item id='2'><price>7.4</price><stock>43</stock></item>"
argument_list|,
name|result
operator|.
name|getResource
argument_list|(
literal|0
argument_list|)
operator|.
name|getContent
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|result
operator|=
name|queryResource
argument_list|(
name|service
argument_list|,
literal|"numbers.xml"
argument_list|,
literal|"/test/element()[2]"
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|assertXMLEqual
argument_list|(
literal|"<item id='2'><price>7.4</price><stock>43</stock></item>"
argument_list|,
name|result
operator|.
name|getResource
argument_list|(
literal|0
argument_list|)
operator|.
name|getContent
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
comment|// positional predicate on sequence of atomic values
name|result
operator|=
name|queryResource
argument_list|(
name|service
argument_list|,
literal|"numbers.xml"
argument_list|,
literal|"('test', 'pass')[2]"
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"pass"
argument_list|,
name|result
operator|.
name|getResource
argument_list|(
literal|0
argument_list|)
operator|.
name|getContent
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|result
operator|=
name|queryResource
argument_list|(
name|service
argument_list|,
literal|"numbers.xml"
argument_list|,
literal|"let $credentials := ('test', 'pass') let $user := $credentials[1] return $user"
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"test"
argument_list|,
name|result
operator|.
name|getResource
argument_list|(
literal|0
argument_list|)
operator|.
name|getContent
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|result
operator|=
name|queryResource
argument_list|(
name|service
argument_list|,
literal|"numbers.xml"
argument_list|,
literal|"let $credentials := ('test', 'pass') let $user := $credentials[2] return $user"
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"pass"
argument_list|,
name|result
operator|.
name|getResource
argument_list|(
literal|0
argument_list|)
operator|.
name|getContent
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|result
operator|=
name|queryResource
argument_list|(
name|service
argument_list|,
literal|"numbers.xml"
argument_list|,
literal|"let $els :=<els><el>text1</el><el>text2</el></els> return $els/el[xs:string(.) eq 'text1'] "
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"<el>text1</el>"
argument_list|,
name|result
operator|.
name|getResource
argument_list|(
literal|0
argument_list|)
operator|.
name|getContent
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|predicates2
parameter_list|()
throws|throws
name|XMLDBException
throws|,
name|IOException
throws|,
name|SAXException
block|{
specifier|final
name|String
name|numbers
init|=
literal|"<test>"
operator|+
literal|"<item id='1' type='alphanum'><price>5.6</price><stock>22</stock></item>"
operator|+
literal|"<item id='2'><price>7.4</price><stock>43</stock></item>"
operator|+
literal|"<item id='3'><price>18.4</price><stock>5</stock></item>"
operator|+
literal|"<item id='4'><price>65.54</price><stock>16</stock></item>"
operator|+
literal|"</test>"
decl_stmt|;
specifier|final
name|XQueryService
name|service
init|=
name|storeXMLStringAndGetQueryService
argument_list|(
literal|"numbers.xml"
argument_list|,
name|numbers
argument_list|)
decl_stmt|;
name|service
operator|.
name|setProperty
argument_list|(
name|OutputKeys
operator|.
name|INDENT
argument_list|,
literal|"no"
argument_list|)
expr_stmt|;
name|String
name|query
init|=
literal|"let $t :=<test>"
operator|+
literal|"<a><s>A</s> 1</a>"
operator|+
literal|"<a><s>Z</s> 2</a>"
operator|+
literal|"<a><s>B</s> 3</a>"
operator|+
literal|"<a><s>Z</s> 4</a>"
operator|+
literal|"<a><s>C</s> 5</a>"
operator|+
literal|"<a><s>Z</s> 6</a>"
operator|+
literal|"</test>"
operator|+
literal|"return $t//a[s='Z' and preceding-sibling::*[1]/s='B']"
decl_stmt|;
name|ResourceSet
name|result
init|=
name|queryResource
argument_list|(
name|service
argument_list|,
literal|"numbers.xml"
argument_list|,
name|query
argument_list|,
literal|1
argument_list|)
decl_stmt|;
name|assertXMLEqual
argument_list|(
literal|"<a><s>Z</s> 4</a>"
argument_list|,
name|result
operator|.
name|getResource
argument_list|(
literal|0
argument_list|)
operator|.
name|getContent
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|query
operator|=
literal|"let $t :=<test>"
operator|+
literal|"<a><s>A</s> 1</a>"
operator|+
literal|"<a><s>Z</s> 2</a>"
operator|+
literal|"<a><s>B</s> 3</a>"
operator|+
literal|"<a><s>Z</s> 4</a>"
operator|+
literal|"<a><s>C</s> 5</a>"
operator|+
literal|"<a><s>Z</s> 6</a>"
operator|+
literal|"</test>"
operator|+
literal|"return $t//a[s='Z' and ./preceding-sibling::*[1]/s='B']"
expr_stmt|;
name|result
operator|=
name|queryResource
argument_list|(
name|service
argument_list|,
literal|"numbers.xml"
argument_list|,
name|query
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|assertXMLEqual
argument_list|(
literal|"<a><s>Z</s> 4</a>"
argument_list|,
name|result
operator|.
name|getResource
argument_list|(
literal|0
argument_list|)
operator|.
name|getContent
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|query
operator|=
literal|"let $doc :=<doc><rec n='1'><a>first</a><b>second</b></rec>"
operator|+
literal|"<rec n='2'><a>first</a><b>third</b></rec></doc> "
operator|+
literal|"return $doc//rec[fn:not(b = 'second') and (./a = 'first')]"
expr_stmt|;
name|result
operator|=
name|queryResource
argument_list|(
name|service
argument_list|,
literal|"numbers.xml"
argument_list|,
name|query
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|assertXMLEqual
argument_list|(
literal|"<rec n=\"2\"><a>first</a><b>third</b></rec>"
argument_list|,
name|result
operator|.
name|getResource
argument_list|(
literal|0
argument_list|)
operator|.
name|getContent
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|query
operator|=
literal|"let $doc :=<doc><a b='c' d='e'/></doc> "
operator|+
literal|"return $doc/a[$doc/a/@b or $doc/a/@d]"
expr_stmt|;
name|result
operator|=
name|queryResource
argument_list|(
name|service
argument_list|,
literal|"numbers.xml"
argument_list|,
name|query
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|assertXMLEqual
argument_list|(
literal|"<a b=\"c\" d=\"e\"/>"
argument_list|,
name|result
operator|.
name|getResource
argument_list|(
literal|0
argument_list|)
operator|.
name|getContent
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|query
operator|=
literal|"let $x :=<a><b><x/><x/></b><b><x/></b></a>"
operator|+
literal|"return $x//b[count(x) = 2]"
expr_stmt|;
name|result
operator|=
name|queryResource
argument_list|(
name|service
argument_list|,
literal|"numbers.xml"
argument_list|,
name|query
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|assertXMLEqual
argument_list|(
literal|"<b><x/><x/></b>"
argument_list|,
name|result
operator|.
name|getResource
argument_list|(
literal|0
argument_list|)
operator|.
name|getContent
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
comment|//Boolean evaluation for "." (atomic sequence)
name|query
operator|=
literal|"(1,2,3)[xs:decimal(.)]"
expr_stmt|;
name|result
operator|=
name|queryResource
argument_list|(
name|service
argument_list|,
literal|"numbers.xml"
argument_list|,
name|query
argument_list|,
literal|3
argument_list|)
expr_stmt|;
name|query
operator|=
literal|"(1,2,3)[number()]"
expr_stmt|;
name|result
operator|=
name|queryResource
argument_list|(
name|service
argument_list|,
literal|"numbers.xml"
argument_list|,
name|query
argument_list|,
literal|3
argument_list|)
expr_stmt|;
name|query
operator|=
literal|" 	let $c := (<a/>,<b/>), $i := 1 return $c[$i]"
expr_stmt|;
name|result
operator|=
name|queryResource
argument_list|(
name|service
argument_list|,
literal|"numbers.xml"
argument_list|,
name|query
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|assertXMLEqual
argument_list|(
literal|"<a/>"
argument_list|,
name|result
operator|.
name|getResource
argument_list|(
literal|0
argument_list|)
operator|.
name|getContent
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|query
operator|=
literal|"(1,2,3)[position() = last()]"
expr_stmt|;
name|result
operator|=
name|queryResource
argument_list|(
name|service
argument_list|,
literal|"numbers.xml"
argument_list|,
name|query
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"3"
argument_list|,
name|result
operator|.
name|getResource
argument_list|(
literal|0
argument_list|)
operator|.
name|getContent
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|query
operator|=
literal|"(1,2,3)[max(.)]"
expr_stmt|;
name|result
operator|=
name|queryResource
argument_list|(
name|service
argument_list|,
literal|"numbers.xml"
argument_list|,
name|query
argument_list|,
literal|3
argument_list|)
expr_stmt|;
name|query
operator|=
literal|"(1,2,3)[max(.[. gt 1])]"
expr_stmt|;
name|result
operator|=
name|queryResource
argument_list|(
name|service
argument_list|,
literal|"numbers.xml"
argument_list|,
name|query
argument_list|,
literal|2
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"2"
argument_list|,
name|result
operator|.
name|getResource
argument_list|(
literal|0
argument_list|)
operator|.
name|getContent
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"3"
argument_list|,
name|result
operator|.
name|getResource
argument_list|(
literal|1
argument_list|)
operator|.
name|getContent
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|query
operator|=
literal|"(1,2,3)[.]"
expr_stmt|;
name|result
operator|=
name|queryResource
argument_list|(
name|service
argument_list|,
literal|"numbers.xml"
argument_list|,
name|query
argument_list|,
literal|3
argument_list|)
expr_stmt|;
name|query
operator|=
literal|"declare function local:f ($n) { "
operator|+
literal|"$n "
operator|+
literal|"}; "
operator|+
literal|" "
operator|+
literal|"declare function local:g( $n ) { "
operator|+
literal|"('OK','Fine','Wrong') [local:f($n) + 1 ] "
operator|+
literal|"} ; "
operator|+
literal|" "
operator|+
literal|"declare function local:h( $n ) { "
operator|+
literal|"('OK','Fine','Wrong') [local:f($n) ] "
operator|+
literal|"} ; "
operator|+
literal|" "
operator|+
literal|"declare function local:j( $n ) { "
operator|+
literal|"let $m := local:f($n) "
operator|+
literal|"return "
operator|+
literal|"('OK','Fine','Wrong') [$m + 1 ] "
operator|+
literal|"} ; "
operator|+
literal|" "
operator|+
literal|"declare function local:k ( $n ) { "
operator|+
literal|"('OK','Fine','Wrong') [ $n + 1 ] "
operator|+
literal|"} ; "
operator|+
literal|" "
operator|+
literal|"local:f(1),local:g(1), local:h(1), local:j(1), local:k(1) "
expr_stmt|;
name|result
operator|=
name|queryResource
argument_list|(
name|service
argument_list|,
literal|"numbers.xml"
argument_list|,
name|query
argument_list|,
literal|5
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"1"
argument_list|,
name|result
operator|.
name|getResource
argument_list|(
literal|0
argument_list|)
operator|.
name|getContent
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"Fine"
argument_list|,
name|result
operator|.
name|getResource
argument_list|(
literal|1
argument_list|)
operator|.
name|getContent
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"OK"
argument_list|,
name|result
operator|.
name|getResource
argument_list|(
literal|2
argument_list|)
operator|.
name|getContent
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"Fine"
argument_list|,
name|result
operator|.
name|getResource
argument_list|(
literal|3
argument_list|)
operator|.
name|getContent
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"Fine"
argument_list|,
name|result
operator|.
name|getResource
argument_list|(
literal|4
argument_list|)
operator|.
name|getContent
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
comment|//The collection doesn't exist : let's see how the query behaves with empty sequences
name|query
operator|=
literal|"let $checkDate := xs:date(adjust-date-to-timezone(current-date(), ())) "
operator|+
literal|"let $collection := if (xmldb:collection-available(\"/db/lease\")) then collection(\"/db/lease\") else () "
operator|+
literal|"for $x in "
operator|+
literal|"$collection//Lease/Events/Type/Event[(When/Date<=$checkDate or "
operator|+
literal|"When/EstimateDate<=$checkDate) and not(Status='Complete')] "
operator|+
literal|"return $x"
expr_stmt|;
name|result
operator|=
name|queryResource
argument_list|(
name|service
argument_list|,
literal|"numbers.xml"
argument_list|,
name|query
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|query
operator|=
literal|"let $res :=<test><element name='A'/><element name='B'/></test> "
operator|+
literal|"return "
operator|+
literal|"for $name in ('A', 'B') return "
operator|+
literal|"$res/element[@name=$name][1]"
expr_stmt|;
name|result
operator|=
name|queryResource
argument_list|(
name|service
argument_list|,
literal|"numbers.xml"
argument_list|,
name|query
argument_list|,
literal|2
argument_list|)
expr_stmt|;
name|assertXMLEqual
argument_list|(
literal|"<element name='A'/>"
argument_list|,
name|result
operator|.
name|getResource
argument_list|(
literal|0
argument_list|)
operator|.
name|getContent
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|assertXMLEqual
argument_list|(
literal|"<element name='B'/>"
argument_list|,
name|result
operator|.
name|getResource
argument_list|(
literal|1
argument_list|)
operator|.
name|getContent
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
block|}
comment|/**      * @see http://sourceforge.net/tracker/index.php?func=detail&aid=1460610&group_id=17691&atid=117691      */
annotation|@
name|Test
specifier|public
name|void
name|predicates_bug1460610
parameter_list|()
throws|throws
name|XMLDBException
block|{
specifier|final
name|String
name|xQuery
init|=
literal|"(1, 2, 3)[ . lt 3]"
decl_stmt|;
specifier|final
name|XQueryService
name|service
init|=
name|getQueryService
argument_list|()
decl_stmt|;
specifier|final
name|ResourceSet
name|rs
init|=
name|service
operator|.
name|query
argument_list|(
name|xQuery
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|"SFBUG 1460610 nr of results"
argument_list|,
literal|2
argument_list|,
name|rs
operator|.
name|getSize
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"SFBUG 1460610 1st result"
argument_list|,
literal|"1"
argument_list|,
name|rs
operator|.
name|getResource
argument_list|(
literal|0
argument_list|)
operator|.
name|getContent
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"SFBUG 1460610 2nd result"
argument_list|,
literal|"2"
argument_list|,
name|rs
operator|.
name|getResource
argument_list|(
literal|1
argument_list|)
operator|.
name|getContent
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
block|}
comment|/**      * @see http://sourceforge.net/tracker/index.php?func=detail&aid=1537355&group_id=17691&atid=117691      */
annotation|@
name|Test
specifier|public
name|void
name|predicates_bug1537355
parameter_list|()
throws|throws
name|XMLDBException
block|{
specifier|final
name|String
name|xQuery
init|=
literal|"let $one := 1 return (1, 2, 3)[$one + 1]"
decl_stmt|;
specifier|final
name|XQueryService
name|service
init|=
name|getQueryService
argument_list|()
decl_stmt|;
specifier|final
name|ResourceSet
name|rs
init|=
name|service
operator|.
name|query
argument_list|(
name|xQuery
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|"SFBUG 1537355 nr of results"
argument_list|,
literal|1
argument_list|,
name|rs
operator|.
name|getSize
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"SFBUG 1537355 result"
argument_list|,
literal|"2"
argument_list|,
name|rs
operator|.
name|getResource
argument_list|(
literal|0
argument_list|)
operator|.
name|getContent
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
block|}
comment|/**      * @see http://sourceforge.net/tracker/index.php?func=detail&aid=1533053&group_id=17691&atid=117691      */
annotation|@
name|Test
specifier|public
name|void
name|nestedPredicates_bug1533053
parameter_list|()
throws|throws
name|XMLDBException
throws|,
name|IOException
throws|,
name|SAXException
block|{
name|String
name|xQuery
init|=
literal|"let $doc :=<objects>"
operator|+
literal|"<detail><class/><source><dynamic>false</dynamic></source></detail>"
operator|+
literal|"<detail><class/><source><dynamic>true</dynamic></source></detail>"
operator|+
literal|"</objects> "
operator|+
literal|"let $matches := $doc/detail[source[dynamic='false'] or class] "
operator|+
literal|"return count($matches) eq 2"
decl_stmt|;
name|XQueryService
name|service
init|=
name|getQueryService
argument_list|()
decl_stmt|;
name|ResourceSet
name|rs
init|=
name|service
operator|.
name|query
argument_list|(
name|xQuery
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|rs
operator|.
name|getSize
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"true"
argument_list|,
name|rs
operator|.
name|getResource
argument_list|(
literal|0
argument_list|)
operator|.
name|getContent
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|xQuery
operator|=
literal|"let $xml :=<test><element>"
operator|+
literal|"<complexType><attribute name=\"design\" fixed=\"1\"/></complexType>"
operator|+
literal|"</element></test> "
operator|+
literal|"return $xml//element[complexType/attribute[@name eq \"design\"]/@fixed eq \"1\"]"
expr_stmt|;
name|service
operator|=
name|getQueryService
argument_list|()
expr_stmt|;
name|service
operator|.
name|setProperty
argument_list|(
name|OutputKeys
operator|.
name|OMIT_XML_DECLARATION
argument_list|,
literal|"yes"
argument_list|)
expr_stmt|;
name|service
operator|.
name|setProperty
argument_list|(
name|OutputKeys
operator|.
name|INDENT
argument_list|,
literal|"no"
argument_list|)
expr_stmt|;
name|rs
operator|=
name|service
operator|.
name|query
argument_list|(
name|xQuery
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|rs
operator|.
name|getSize
argument_list|()
argument_list|)
expr_stmt|;
name|assertXMLEqual
argument_list|(
literal|"<element><complexType><attribute name=\"design\" fixed=\"1\"/></complexType></element>"
argument_list|,
name|rs
operator|.
name|getResource
argument_list|(
literal|0
argument_list|)
operator|.
name|getContent
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
block|}
comment|/**      * @see http://sourceforge.net/tracker/index.php?func=detail&aid=1488303&group_id=17691&atid=117691      */
annotation|@
name|Test
specifier|public
name|void
name|predicate_bug1488303
parameter_list|()
throws|throws
name|XMLDBException
block|{
name|XQueryService
name|service
init|=
name|getQueryService
argument_list|()
decl_stmt|;
name|ResourceSet
name|rs
init|=
literal|null
decl_stmt|;
comment|// test one
specifier|final
name|String
name|xQuery1
init|=
literal|"let $q :=<q><t>eXist</t></q> return $q//t"
decl_stmt|;
name|rs
operator|=
name|service
operator|.
name|query
argument_list|(
name|xQuery1
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"nr of results"
argument_list|,
literal|1
argument_list|,
name|rs
operator|.
name|getSize
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"result"
argument_list|,
literal|"<t>eXist</t>"
argument_list|,
name|rs
operator|.
name|getResource
argument_list|(
literal|0
argument_list|)
operator|.
name|getContent
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
comment|// test two
specifier|final
name|String
name|xQuery2
init|=
literal|"let $q :=<q><t>eXist</t></q> return ($q//t)[1]"
decl_stmt|;
name|rs
operator|=
name|service
operator|.
name|query
argument_list|(
name|xQuery2
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"nr of results"
argument_list|,
literal|1
argument_list|,
name|rs
operator|.
name|getSize
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"result"
argument_list|,
literal|"<t>eXist</t>"
argument_list|,
name|rs
operator|.
name|getResource
argument_list|(
literal|0
argument_list|)
operator|.
name|getContent
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
comment|// This one fails http://sourceforge.net/tracker/index.php?func=detail&aid=1488303&group_id=17691&atid=117691
specifier|final
name|String
name|xQuery3
init|=
literal|"let $q :=<q><t>eXist</t></q> return $q//t[1]"
decl_stmt|;
name|rs
operator|=
name|service
operator|.
name|query
argument_list|(
name|xQuery3
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"SFBUG 1488303 nr of results"
argument_list|,
literal|1
argument_list|,
name|rs
operator|.
name|getSize
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"SFBUG 1488303 result"
argument_list|,
literal|"<t>eXist</t>"
argument_list|,
name|rs
operator|.
name|getResource
argument_list|(
literal|0
argument_list|)
operator|.
name|getContent
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
block|}
comment|/**      * @see http://sourceforge.net/tracker/index.php?func=detail&aid=1460791&group_id=17691&atid=117691      */
annotation|@
name|Test
specifier|public
name|void
name|descendantOrSelf_bug1460791
parameter_list|()
throws|throws
name|XMLDBException
block|{
specifier|final
name|String
name|xQuery
init|=
literal|"declare option exist:serialize \"method=xml indent=no\"; let $test:=<z><a>aaa</a><z>zzz</z></z> "
operator|+
literal|"return (<one>{$test//z}</one>,<two>{$test/descendant-or-self::node()/child::z}</two> )"
decl_stmt|;
specifier|final
name|XQueryService
name|service
init|=
name|getQueryService
argument_list|()
decl_stmt|;
specifier|final
name|ResourceSet
name|rs
init|=
name|service
operator|.
name|query
argument_list|(
name|xQuery
argument_list|)
decl_stmt|;
comment|//        System.out.println("BUG1460791/1" + rs.getResource(0).getContent().toString() );
comment|//        System.out.println("BUG1460791/2" + rs.getResource(1).getContent().toString() );
name|assertEquals
argument_list|(
literal|"SFBUG 1460791 nr of results"
argument_list|,
literal|2
argument_list|,
name|rs
operator|.
name|getSize
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"SFBUG 1460791 result part 1"
argument_list|,
literal|"<one><z>zzz</z></one>"
argument_list|,
name|rs
operator|.
name|getResource
argument_list|(
literal|0
argument_list|)
operator|.
name|getContent
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"SFBUG 1460791 result part 2"
argument_list|,
literal|"<two><z>zzz</z></two>"
argument_list|,
name|rs
operator|.
name|getResource
argument_list|(
literal|1
argument_list|)
operator|.
name|getContent
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
block|}
comment|/**      * @see http://sourceforge.net/tracker/index.php?func=detail&aid=1462120&group_id=17691&atid=1176      */
annotation|@
name|Test
specifier|public
name|void
name|xpath_bug1462120
parameter_list|()
throws|throws
name|XMLDBException
block|{
specifier|final
name|String
name|xQuery
init|=
literal|"declare option exist:serialize \"method=xml indent=no\"; "
operator|+
literal|"let $m:=<Units><Unit name=\"g\" size=\"1\"/>"
operator|+
literal|"<Unit name=\"kg\" size=\"1000\"/></Units> "
operator|+
literal|"let $list:=(<Product aaa=\"g\"/>,<Product aaa=\"kg\"/>) "
operator|+
literal|"let $one:=$list[1] return ( "
operator|+
literal|"$m/Unit[string(data(@name)) eq string(data($list[1]/@aaa))],"
operator|+
literal|"<br/>,$m/Unit[string(data(@name)) eq string(data($one/@aaa))] )"
decl_stmt|;
specifier|final
name|XQueryService
name|service
init|=
name|getQueryService
argument_list|()
decl_stmt|;
specifier|final
name|ResourceSet
name|rs
init|=
name|service
operator|.
name|query
argument_list|(
name|xQuery
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|"SFBUG 1462120 nr of results"
argument_list|,
literal|3
argument_list|,
name|rs
operator|.
name|getSize
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"SFBUG 1462120 result part 1"
argument_list|,
literal|"<Unit name=\"g\" size=\"1\"/>"
argument_list|,
name|rs
operator|.
name|getResource
argument_list|(
literal|0
argument_list|)
operator|.
name|getContent
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"SFBUG 1462120 result part 2"
argument_list|,
literal|"<br/>"
argument_list|,
name|rs
operator|.
name|getResource
argument_list|(
literal|1
argument_list|)
operator|.
name|getContent
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"SFBUG 1462120 result part 3"
argument_list|,
literal|"<Unit name=\"g\" size=\"1\"/>"
argument_list|,
name|rs
operator|.
name|getResource
argument_list|(
literal|2
argument_list|)
operator|.
name|getContent
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
block|}
comment|/**      * In Predicate.java, the contextSet and the outerSequence.toNodeSet()      * documents are different so that no match can occur.      *      * @see http://wiki.exist-db.org/space/XQueryBugs      */
annotation|@
name|Test
specifier|public
name|void
name|predicate_bug_wiki_1
parameter_list|()
throws|throws
name|XMLDBException
block|{
specifier|final
name|String
name|xQuery
init|=
literal|"let $dum :=<dummy><el>1</el><el>2</el></dummy> return $dum/el[2]"
decl_stmt|;
specifier|final
name|XQueryService
name|service
init|=
name|getQueryService
argument_list|()
decl_stmt|;
specifier|final
name|ResourceSet
name|rs
init|=
name|service
operator|.
name|query
argument_list|(
name|xQuery
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|"Predicate bug wiki_1"
argument_list|,
literal|1
argument_list|,
name|rs
operator|.
name|getSize
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"Predicate bug wiki_1"
argument_list|,
literal|"<el>2</el>"
argument_list|,
name|rs
operator|.
name|getResource
argument_list|(
literal|0
argument_list|)
operator|.
name|getContent
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|predicate_bug_andrzej
parameter_list|()
throws|throws
name|XMLDBException
block|{
specifier|final
name|String
name|xQuery
init|=
literal|"doc('/db/test/predicates.xml')//elem1/elem2[ string-length( ./elem3 )> 0][1]/elem3/text()"
decl_stmt|;
specifier|final
name|XQueryService
name|service
init|=
name|storeXMLStringAndGetQueryService
argument_list|(
literal|"predicates.xml"
argument_list|,
name|predicates
argument_list|)
decl_stmt|;
specifier|final
name|ResourceSet
name|rs
init|=
name|service
operator|.
name|query
argument_list|(
name|xQuery
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|"testPredicateBUGAndrzej"
argument_list|,
literal|1
argument_list|,
name|rs
operator|.
name|getSize
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"testPredicateBUGAndrzej"
argument_list|,
literal|"val1"
argument_list|,
name|rs
operator|.
name|getResource
argument_list|(
literal|0
argument_list|)
operator|.
name|getContent
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
block|}
comment|/**      * removing Self: makes the query work OK      * @see http://wiki.exist-db.org/space/XQueryBugs      */
annotation|@
name|Test
specifier|public
name|void
name|cardinalitySelf_bug_wiki_2
parameter_list|()
throws|throws
name|XMLDBException
block|{
specifier|final
name|String
name|xQuery
init|=
literal|"let $test :=<test><works><employee>a</employee><employee>b</employee></works></test> "
operator|+
literal|"for $h in $test/works/employee[2] return fn:name($h/self::employee)"
decl_stmt|;
specifier|final
name|XQueryService
name|service
init|=
name|getQueryService
argument_list|()
decl_stmt|;
specifier|final
name|ResourceSet
name|rs
init|=
name|service
operator|.
name|query
argument_list|(
name|xQuery
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|"CardinalitySelfBUG bug wiki_2"
argument_list|,
literal|1
argument_list|,
name|rs
operator|.
name|getSize
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"CardinalitySelfBUG bug wiki_2"
argument_list|,
literal|"employee"
argument_list|,
name|rs
operator|.
name|getResource
argument_list|(
literal|0
argument_list|)
operator|.
name|getContent
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
block|}
comment|/**      * Problem in VirtualNodeSet which return 2 attributes because it       * computes every level      * @see http://wiki.exist-db.org/space/XQueryBugs      */
annotation|@
name|Test
specifier|public
name|void
name|virtualNodeset_bug_wiki_3
parameter_list|()
throws|throws
name|XMLDBException
block|{
specifier|final
name|String
name|xQuery
init|=
literal|"declare option exist:serialize \"method=xml indent=no\"; "
operator|+
literal|"let $node := (<c id=\"OK\"><b id=\"cool\"/></c>)"
operator|+
literal|"/descendant::*/attribute::id return<a>{$node}</a>"
decl_stmt|;
specifier|final
name|XQueryService
name|service
init|=
name|getQueryService
argument_list|()
decl_stmt|;
specifier|final
name|ResourceSet
name|rs
init|=
name|service
operator|.
name|query
argument_list|(
name|xQuery
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|"VirtualNodesetBUG_wiki_3"
argument_list|,
literal|1
argument_list|,
name|rs
operator|.
name|getSize
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"VirtualNodesetBUG_wiki_3"
argument_list|,
literal|"<a id=\"cool\"/>"
argument_list|,
name|rs
operator|.
name|getResource
argument_list|(
literal|0
argument_list|)
operator|.
name|getContent
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
block|}
comment|/**      * Problem in VirtualNodeSet because it computes the wrong level      *      * @see http://wiki.exist-db.org/space/XQueryBugs      */
annotation|@
name|Test
specifier|public
name|void
name|virtualNodeset_bug_wiki_4
parameter_list|()
throws|throws
name|XMLDBException
block|{
specifier|final
name|String
name|xQuery
init|=
literal|"declare option exist:serialize \"method=xml indent=no\"; "
operator|+
literal|"let $node := (<c id=\"OK\">"
operator|+
literal|"<b id=\"cool\"/></c>)/descendant-or-self::*/child::b "
operator|+
literal|"return<a>{$node}</a>"
decl_stmt|;
specifier|final
name|XQueryService
name|service
init|=
name|getQueryService
argument_list|()
decl_stmt|;
specifier|final
name|ResourceSet
name|rs
init|=
name|service
operator|.
name|query
argument_list|(
name|xQuery
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|"VirtualNodesetBUG_wiki_4"
argument_list|,
literal|1
argument_list|,
name|rs
operator|.
name|getSize
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"VirtualNodesetBUG_wiki_4"
argument_list|,
literal|"<a><b id=\"cool\"/></a>"
argument_list|,
name|rs
operator|.
name|getResource
argument_list|(
literal|0
argument_list|)
operator|.
name|getContent
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
block|}
comment|/**      * Problem in VirtualNodeSet because it computes the wrong level      *      * @see http://wiki.exist-db.org/space/XQueryBugs      */
annotation|@
name|Test
specifier|public
name|void
name|virtualNodeset_bug_wiki_5
parameter_list|()
throws|throws
name|XMLDBException
block|{
specifier|final
name|String
name|xQuery
init|=
literal|"declare option exist:serialize \"method=xml indent=no\"; "
operator|+
literal|"let $node := (<c id=\"OK\"><b id=\"cool\"/>"
operator|+
literal|"</c>)/descendant-or-self::*/descendant::b return<a>{$node}</a>"
decl_stmt|;
specifier|final
name|XQueryService
name|service
init|=
name|getQueryService
argument_list|()
decl_stmt|;
specifier|final
name|ResourceSet
name|rs
init|=
name|service
operator|.
name|query
argument_list|(
name|xQuery
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|"VirtualNodesetBUG_wiki_5"
argument_list|,
literal|1
argument_list|,
name|rs
operator|.
name|getSize
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"VirtualNodesetBUG_wiki_5"
argument_list|,
literal|"<a><b id=\"cool\"/></a>"
argument_list|,
name|rs
operator|.
name|getResource
argument_list|(
literal|0
argument_list|)
operator|.
name|getContent
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
block|}
comment|// It seems that the document builder receives events that are irrelevant.
annotation|@
name|Test
specifier|public
name|void
name|documentBuilder_bug_wiki_6
parameter_list|()
throws|throws
name|XMLDBException
block|{
specifier|final
name|String
name|xQuery
init|=
literal|"declare option exist:serialize \"method=xml indent=no\"; "
operator|+
literal|"declare function local:test() {let $results :=<dummy/>"
operator|+
literal|"return \"id\" }; "
operator|+
literal|"<wrapper><string id=\"{local:test()}\"/></wrapper>"
decl_stmt|;
specifier|final
name|XQueryService
name|service
init|=
name|getQueryService
argument_list|()
decl_stmt|;
specifier|final
name|ResourceSet
name|rs
init|=
name|service
operator|.
name|query
argument_list|(
name|xQuery
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|"testDocumentBuilderBUG_wiki_6"
argument_list|,
literal|1
argument_list|,
name|rs
operator|.
name|getSize
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"testDocumentBuilderBUG_wiki_6"
argument_list|,
literal|"<wrapper><string id=\"id\"/></wrapper>"
argument_list|,
name|rs
operator|.
name|getResource
argument_list|(
literal|0
argument_list|)
operator|.
name|getContent
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|castInPredicate_bug_wiki_7
parameter_list|()
throws|throws
name|XMLDBException
block|{
specifier|final
name|String
name|xQuery
init|=
literal|"let $number := 2, $list := (\"a\", \"b\", \"c\") return $list[xs:int($number * 2) - 1]"
decl_stmt|;
specifier|final
name|XQueryService
name|service
init|=
name|getQueryService
argument_list|()
decl_stmt|;
specifier|final
name|ResourceSet
name|rs
init|=
name|service
operator|.
name|query
argument_list|(
name|xQuery
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|"testCalculationInPredicate_wiki_7"
argument_list|,
literal|1
argument_list|,
name|rs
operator|.
name|getSize
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"testCalculationInPredicate_wiki_7"
argument_list|,
literal|"c"
argument_list|,
name|rs
operator|.
name|getResource
argument_list|(
literal|0
argument_list|)
operator|.
name|getContent
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
block|}
comment|/**       * Miscomputation of the expression context in where clause when no        * wrapper expression is used. Using, e.g. where data($x/@id) eq "id" works !       */
annotation|@
name|Test
specifier|public
name|void
name|computation_bug_wiki_8
parameter_list|()
throws|throws
name|XMLDBException
block|{
specifier|final
name|String
name|xQuery
init|=
literal|"declare option exist:serialize \"method=xml indent=no\"; "
operator|+
literal|"let $a := element node1 { attribute id {'id'}, "
operator|+
literal|"element node1 { '1'},element node2 { '2'} }"
operator|+
literal|"for $x in $a where $x/@id eq \"id\" return $x"
decl_stmt|;
specifier|final
name|XQueryService
name|service
init|=
name|getQueryService
argument_list|()
decl_stmt|;
specifier|final
name|ResourceSet
name|rs
init|=
name|service
operator|.
name|query
argument_list|(
name|xQuery
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|"testComputationBug_wiki_8"
argument_list|,
literal|1
argument_list|,
name|rs
operator|.
name|getSize
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"testComputationBug_wiki_8"
argument_list|,
literal|"<node1 id=\"id\"><node1>1</node1><node2>2</node2></node1>"
argument_list|,
name|rs
operator|.
name|getResource
argument_list|(
literal|0
argument_list|)
operator|.
name|getContent
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|strings
parameter_list|()
throws|throws
name|XMLDBException
block|{
specifier|final
name|XQueryService
name|service
init|=
name|storeXMLStringAndGetQueryService
argument_list|(
literal|"strings.xml"
argument_list|,
name|strings
argument_list|)
decl_stmt|;
name|ResourceSet
name|result
init|=
name|queryResource
argument_list|(
name|service
argument_list|,
literal|"strings.xml"
argument_list|,
literal|"substring(/test/string[1], 1, 5)"
argument_list|,
literal|1
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|"Hello"
argument_list|,
name|result
operator|.
name|getResource
argument_list|(
literal|0
argument_list|)
operator|.
name|getContent
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|queryResource
argument_list|(
name|service
argument_list|,
literal|"strings.xml"
argument_list|,
literal|"/test/string[starts-with(string(.), 'Hello')]"
argument_list|,
literal|2
argument_list|)
expr_stmt|;
name|result
operator|=
name|queryResource
argument_list|(
name|service
argument_list|,
literal|"strings.xml"
argument_list|,
literal|"count(/test/item/price)"
argument_list|,
literal|1
argument_list|,
literal|"Query should return an empty set (wrong document)"
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"0"
argument_list|,
name|result
operator|.
name|getResource
argument_list|(
literal|0
argument_list|)
operator|.
name|getContent
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|quotes
parameter_list|()
throws|throws
name|XMLDBException
block|{
specifier|final
name|XQueryService
name|service
init|=
name|storeXMLStringAndGetQueryService
argument_list|(
literal|"quotes.xml"
argument_list|,
name|quotes
argument_list|)
decl_stmt|;
name|queryResource
argument_list|(
name|service
argument_list|,
literal|"quotes.xml"
argument_list|,
literal|"/test[title = '&quot;Hello&quot;']"
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|service
operator|.
name|declareVariable
argument_list|(
literal|"content"
argument_list|,
literal|"&quot;Hello&quot;"
argument_list|)
expr_stmt|;
name|queryResource
argument_list|(
name|service
argument_list|,
literal|"quotes.xml"
argument_list|,
literal|"/test[title = $content]"
argument_list|,
literal|1
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|booleans
parameter_list|()
throws|throws
name|XMLDBException
block|{
specifier|final
name|XQueryService
name|service
init|=
name|storeXMLStringAndGetQueryService
argument_list|(
literal|"numbers.xml"
argument_list|,
name|numbers
argument_list|)
decl_stmt|;
name|ResourceSet
name|result
init|=
name|queryResource
argument_list|(
name|service
argument_list|,
literal|"numbers.xml"
argument_list|,
literal|"boolean(1.0)"
argument_list|,
literal|1
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|"boolean value of 1.0 should be true"
argument_list|,
literal|"true"
argument_list|,
name|result
operator|.
name|getResource
argument_list|(
literal|0
argument_list|)
operator|.
name|getContent
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|result
operator|=
name|queryResource
argument_list|(
name|service
argument_list|,
literal|"numbers.xml"
argument_list|,
literal|"boolean(0.0)"
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"boolean value of 0.0 should be false"
argument_list|,
literal|"false"
argument_list|,
name|result
operator|.
name|getResource
argument_list|(
literal|0
argument_list|)
operator|.
name|getContent
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|result
operator|=
name|queryResource
argument_list|(
name|service
argument_list|,
literal|"numbers.xml"
argument_list|,
literal|"boolean(xs:double(0.0))"
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"boolean value of double 0.0 should be false"
argument_list|,
literal|"false"
argument_list|,
name|result
operator|.
name|getResource
argument_list|(
literal|0
argument_list|)
operator|.
name|getContent
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|result
operator|=
name|queryResource
argument_list|(
name|service
argument_list|,
literal|"numbers.xml"
argument_list|,
literal|"boolean(xs:double(1.0))"
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"boolean value of double 1.0 should be true"
argument_list|,
literal|"true"
argument_list|,
name|result
operator|.
name|getResource
argument_list|(
literal|0
argument_list|)
operator|.
name|getContent
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|result
operator|=
name|queryResource
argument_list|(
name|service
argument_list|,
literal|"numbers.xml"
argument_list|,
literal|"boolean(xs:float(1.0))"
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"boolean value of float 1.0 should be true"
argument_list|,
literal|"true"
argument_list|,
name|result
operator|.
name|getResource
argument_list|(
literal|0
argument_list|)
operator|.
name|getContent
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|result
operator|=
name|queryResource
argument_list|(
name|service
argument_list|,
literal|"numbers.xml"
argument_list|,
literal|"boolean(xs:float(0.0))"
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"boolean value of float 0.0 should be false"
argument_list|,
literal|"false"
argument_list|,
name|result
operator|.
name|getResource
argument_list|(
literal|0
argument_list|)
operator|.
name|getContent
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|result
operator|=
name|queryResource
argument_list|(
name|service
argument_list|,
literal|"numbers.xml"
argument_list|,
literal|"boolean(xs:integer(0))"
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"boolean value of integer 0 should be false"
argument_list|,
literal|"false"
argument_list|,
name|result
operator|.
name|getResource
argument_list|(
literal|0
argument_list|)
operator|.
name|getContent
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|result
operator|=
name|queryResource
argument_list|(
name|service
argument_list|,
literal|"numbers.xml"
argument_list|,
literal|"boolean(xs:integer(1))"
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"boolean value of integer 1 should be true"
argument_list|,
literal|"true"
argument_list|,
name|result
operator|.
name|getResource
argument_list|(
literal|0
argument_list|)
operator|.
name|getContent
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|result
operator|=
name|queryResource
argument_list|(
name|service
argument_list|,
literal|"numbers.xml"
argument_list|,
literal|"'true' cast as xs:boolean"
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"boolean value of 'true' cast to xs:boolean should be true"
argument_list|,
literal|"true"
argument_list|,
name|result
operator|.
name|getResource
argument_list|(
literal|0
argument_list|)
operator|.
name|getContent
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|result
operator|=
name|queryResource
argument_list|(
name|service
argument_list|,
literal|"numbers.xml"
argument_list|,
literal|"'false' cast as xs:boolean"
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"boolean value of 'false' cast to xs:boolean should be false"
argument_list|,
literal|"false"
argument_list|,
name|result
operator|.
name|getResource
argument_list|(
literal|0
argument_list|)
operator|.
name|getContent
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|result
operator|=
name|queryResource
argument_list|(
name|service
argument_list|,
literal|"numbers.xml"
argument_list|,
literal|"boolean('Hello')"
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"boolean value of string 'Hello' should be true"
argument_list|,
literal|"true"
argument_list|,
name|result
operator|.
name|getResource
argument_list|(
literal|0
argument_list|)
operator|.
name|getContent
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|result
operator|=
name|queryResource
argument_list|(
name|service
argument_list|,
literal|"numbers.xml"
argument_list|,
literal|"boolean('')"
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"boolean value of empty string should be false"
argument_list|,
literal|"false"
argument_list|,
name|result
operator|.
name|getResource
argument_list|(
literal|0
argument_list|)
operator|.
name|getContent
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|result
operator|=
name|queryResource
argument_list|(
name|service
argument_list|,
literal|"numbers.xml"
argument_list|,
literal|"boolean(())"
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"boolean value of empty sequence should be false"
argument_list|,
literal|"false"
argument_list|,
name|result
operator|.
name|getResource
argument_list|(
literal|0
argument_list|)
operator|.
name|getContent
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|result
operator|=
name|queryResource
argument_list|(
name|service
argument_list|,
literal|"numbers.xml"
argument_list|,
literal|"boolean(('Hello'))"
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"boolean value of sequence with non-empty string should be true"
argument_list|,
literal|"true"
argument_list|,
name|result
operator|.
name|getResource
argument_list|(
literal|0
argument_list|)
operator|.
name|getContent
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
comment|//			result = queryResource(service, "numbers.xml", "boolean((0.0, 0.0))", 1);
comment|//			assertEquals("boolean value of sequence with two elements should be true", "true",
comment|//					result.getResource(0).getContent());
name|result
operator|=
name|queryResource
argument_list|(
name|service
argument_list|,
literal|"numbers.xml"
argument_list|,
literal|"boolean(//item[@id = '1']/price)"
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"boolean value of 5.6 should be true"
argument_list|,
literal|"true"
argument_list|,
name|result
operator|.
name|getResource
argument_list|(
literal|0
argument_list|)
operator|.
name|getContent
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|String
name|message
init|=
literal|""
decl_stmt|;
try|try
block|{
name|queryResource
argument_list|(
name|service
argument_list|,
literal|"numbers.xml"
argument_list|,
literal|"boolean(current-time())"
argument_list|,
literal|1
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|XMLDBException
name|e
parameter_list|)
block|{
name|message
operator|=
name|e
operator|.
name|getMessage
argument_list|()
expr_stmt|;
block|}
name|assertTrue
argument_list|(
name|message
operator|.
name|indexOf
argument_list|(
literal|"FORG0006"
argument_list|)
operator|>
operator|-
literal|1
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|not
parameter_list|()
throws|throws
name|XMLDBException
block|{
specifier|final
name|XQueryService
name|service
init|=
name|storeXMLStringAndGetQueryService
argument_list|(
literal|"strings.xml"
argument_list|,
name|strings
argument_list|)
decl_stmt|;
name|queryResource
argument_list|(
name|service
argument_list|,
literal|"strings.xml"
argument_list|,
literal|"/test/string[not(@value)]"
argument_list|,
literal|2
argument_list|)
expr_stmt|;
name|ResourceSet
name|result
init|=
name|queryResource
argument_list|(
name|service
argument_list|,
literal|"strings.xml"
argument_list|,
literal|"not(/test/abcd)"
argument_list|,
literal|1
argument_list|)
decl_stmt|;
name|Resource
name|r
init|=
name|result
operator|.
name|getResource
argument_list|(
literal|0
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|"true"
argument_list|,
name|r
operator|.
name|getContent
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|result
operator|=
name|queryResource
argument_list|(
name|service
argument_list|,
literal|"strings.xml"
argument_list|,
literal|"not(/test)"
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|r
operator|=
name|result
operator|.
name|getResource
argument_list|(
literal|0
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"false"
argument_list|,
name|r
operator|.
name|getContent
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|result
operator|=
name|queryResource
argument_list|(
name|service
argument_list|,
literal|"strings.xml"
argument_list|,
literal|"/test/string[not(@id)]"
argument_list|,
literal|3
argument_list|)
expr_stmt|;
name|r
operator|=
name|result
operator|.
name|getResource
argument_list|(
literal|0
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"<string>Hello World!</string>"
argument_list|,
name|r
operator|.
name|getContent
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
comment|// test with non-existing items
name|queryResource
argument_list|(
name|service
argument_list|,
literal|"strings.xml"
argument_list|,
literal|"xmldb:document()/blah[not(blah)]"
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|queryResource
argument_list|(
name|service
argument_list|,
literal|"strings.xml"
argument_list|,
literal|"//*[string][not(@value)]"
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|queryResource
argument_list|(
name|service
argument_list|,
literal|"strings.xml"
argument_list|,
literal|"//*[string][not(@blah)]"
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|queryResource
argument_list|(
name|service
argument_list|,
literal|"strings.xml"
argument_list|,
literal|"//*[blah][not(@blah)]"
argument_list|,
literal|0
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|logicalOr
parameter_list|()
throws|throws
name|XMLDBException
throws|,
name|IOException
throws|,
name|SAXException
block|{
specifier|final
name|XQueryService
name|service
init|=
name|storeXMLStringAndGetQueryService
argument_list|(
literal|"strings.xml"
argument_list|,
name|strings
argument_list|)
decl_stmt|;
name|ResourceSet
name|result
init|=
name|queryResource
argument_list|(
name|service
argument_list|,
literal|"strings.xml"
argument_list|,
literal|"<test>{() or ()}</test>"
argument_list|,
literal|1
argument_list|)
decl_stmt|;
name|Resource
name|r
init|=
name|result
operator|.
name|getResource
argument_list|(
literal|0
argument_list|)
decl_stmt|;
name|assertXMLEqual
argument_list|(
literal|"<test>false</test>"
argument_list|,
name|r
operator|.
name|getContent
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|result
operator|=
name|queryResource
argument_list|(
name|service
argument_list|,
literal|"strings.xml"
argument_list|,
literal|"() or ()"
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|r
operator|=
name|result
operator|.
name|getResource
argument_list|(
literal|0
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"false"
argument_list|,
name|r
operator|.
name|getContent
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|logicalAnd
parameter_list|()
throws|throws
name|XMLDBException
throws|,
name|IOException
throws|,
name|SAXException
block|{
specifier|final
name|XQueryService
name|service
init|=
name|storeXMLStringAndGetQueryService
argument_list|(
literal|"strings.xml"
argument_list|,
name|strings
argument_list|)
decl_stmt|;
name|ResourceSet
name|result
init|=
name|queryResource
argument_list|(
name|service
argument_list|,
literal|"strings.xml"
argument_list|,
literal|"<test>{() and ()}</test>"
argument_list|,
literal|1
argument_list|)
decl_stmt|;
name|Resource
name|r
init|=
name|result
operator|.
name|getResource
argument_list|(
literal|0
argument_list|)
decl_stmt|;
name|assertXMLEqual
argument_list|(
literal|"<test>false</test>"
argument_list|,
name|r
operator|.
name|getContent
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|result
operator|=
name|queryResource
argument_list|(
name|service
argument_list|,
literal|"strings.xml"
argument_list|,
literal|"() and ()"
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|r
operator|=
name|result
operator|.
name|getResource
argument_list|(
literal|0
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"false"
argument_list|,
name|r
operator|.
name|getContent
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|ids_persistent
parameter_list|()
throws|throws
name|XMLDBException
block|{
specifier|final
name|XQueryService
name|service
init|=
name|storeXMLStringAndGetQueryService
argument_list|(
literal|"ids.xml"
argument_list|,
name|ids
argument_list|)
decl_stmt|;
name|queryResource
argument_list|(
name|service
argument_list|,
literal|"ids.xml"
argument_list|,
literal|"//a/id(@ref)"
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|queryResource
argument_list|(
name|service
argument_list|,
literal|"ids.xml"
argument_list|,
literal|"/test/id(//a/@ref)"
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|ResourceSet
name|result
init|=
name|queryResource
argument_list|(
name|service
argument_list|,
literal|"ids.xml"
argument_list|,
literal|"//a/id(@ref)/name"
argument_list|,
literal|1
argument_list|)
decl_stmt|;
name|Resource
name|r
init|=
name|result
operator|.
name|getResource
argument_list|(
literal|0
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|"<name>one</name>"
argument_list|,
name|r
operator|.
name|getContent
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|result
operator|=
name|queryResource
argument_list|(
name|service
argument_list|,
literal|"ids.xml"
argument_list|,
literal|"//d/id(@ref)/name"
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|r
operator|=
name|result
operator|.
name|getResource
argument_list|(
literal|0
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"<name>two</name>"
argument_list|,
name|r
operator|.
name|getContent
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|String
name|update
init|=
literal|"update insert<t xml:id=\"id3\">Hello</t> into /test"
decl_stmt|;
name|queryResource
argument_list|(
name|service
argument_list|,
literal|"ids.xml"
argument_list|,
name|update
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|queryResource
argument_list|(
name|service
argument_list|,
literal|"ids.xml"
argument_list|,
literal|"/test/id('id3')"
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|update
operator|=
literal|"update value //t/@xml:id with 'id4'"
expr_stmt|;
name|queryResource
argument_list|(
name|service
argument_list|,
literal|"ids.xml"
argument_list|,
name|update
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|queryResource
argument_list|(
name|service
argument_list|,
literal|"ids.xml"
argument_list|,
literal|"id('id4', /test)"
argument_list|,
literal|1
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Ignore
argument_list|(
literal|"Not yet supported in eXist"
argument_list|)
annotation|@
name|Test
specifier|public
name|void
name|ids_memtree
parameter_list|()
throws|throws
name|XMLDBException
block|{
specifier|final
name|XQueryService
name|service
init|=
name|getQueryService
argument_list|()
decl_stmt|;
name|ResourceSet
name|result
init|=
name|service
operator|.
name|query
argument_list|(
literal|"document { "
operator|+
name|ids_content
operator|+
literal|" }//a/id(@ref)"
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|result
operator|.
name|getSize
argument_list|()
argument_list|)
expr_stmt|;
name|result
operator|=
name|service
operator|.
name|query
argument_list|(
literal|"document { "
operator|+
name|ids_content
operator|+
literal|" }/test/id(//a/@ref)"
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|result
operator|.
name|getSize
argument_list|()
argument_list|)
expr_stmt|;
name|result
operator|=
name|service
operator|.
name|query
argument_list|(
literal|"document { "
operator|+
name|ids_content
operator|+
literal|" }//a/id(@ref)/name"
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|result
operator|.
name|getSize
argument_list|()
argument_list|)
expr_stmt|;
name|Resource
name|r
init|=
name|result
operator|.
name|getResource
argument_list|(
literal|0
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|"<name>one</name>"
argument_list|,
name|r
operator|.
name|getContent
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|result
operator|=
name|service
operator|.
name|query
argument_list|(
literal|"document { "
operator|+
name|ids_content
operator|+
literal|" }//d/id(@ref)/name"
argument_list|)
expr_stmt|;
name|r
operator|=
name|result
operator|.
name|getResource
argument_list|(
literal|0
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"<name>two</name>"
argument_list|,
name|r
operator|.
name|getContent
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|idsOnEmptyCollection
parameter_list|()
throws|throws
name|XMLDBException
block|{
specifier|final
name|Collection
name|root
init|=
name|DatabaseManager
operator|.
name|getCollection
argument_list|(
name|getBaseUri
argument_list|()
argument_list|,
literal|"admin"
argument_list|,
literal|""
argument_list|)
decl_stmt|;
specifier|final
name|CollectionManagementService
name|service
init|=
operator|(
name|CollectionManagementService
operator|)
name|root
operator|.
name|getService
argument_list|(
literal|"CollectionManagementService"
argument_list|,
literal|"1.0"
argument_list|)
decl_stmt|;
specifier|final
name|Collection
name|emptyCollection
init|=
name|service
operator|.
name|createCollection
argument_list|(
literal|"empty"
argument_list|)
decl_stmt|;
specifier|final
name|XQueryService
name|queryService
init|=
operator|(
name|XQueryService
operator|)
name|emptyCollection
operator|.
name|getService
argument_list|(
literal|"XPathQueryService"
argument_list|,
literal|"1.0"
argument_list|)
decl_stmt|;
name|queryAndAssert
argument_list|(
name|queryService
argument_list|,
literal|"/*"
argument_list|,
literal|0
argument_list|,
literal|null
argument_list|)
expr_stmt|;
name|queryAndAssert
argument_list|(
name|queryService
argument_list|,
literal|"/id('foo')"
argument_list|,
literal|0
argument_list|,
literal|null
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|idRefs_persistent
parameter_list|()
throws|throws
name|XMLDBException
block|{
specifier|final
name|XQueryService
name|service
init|=
name|storeXMLStringAndGetQueryService
argument_list|(
literal|"ids.xml"
argument_list|,
name|ids
argument_list|)
decl_stmt|;
name|queryResource
argument_list|(
name|service
argument_list|,
literal|"ids.xml"
argument_list|,
literal|"/idref('id2')"
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|queryResource
argument_list|(
name|service
argument_list|,
literal|"ids.xml"
argument_list|,
literal|"/idref('id1')"
argument_list|,
literal|2
argument_list|)
expr_stmt|;
name|queryResource
argument_list|(
name|service
argument_list|,
literal|"ids.xml"
argument_list|,
literal|"/idref(('id2', 'id1'))"
argument_list|,
literal|3
argument_list|)
expr_stmt|;
name|queryResource
argument_list|(
name|service
argument_list|,
literal|"ids.xml"
argument_list|,
literal|"<results>{/idref('id2')}</results>"
argument_list|,
literal|1
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Ignore
argument_list|(
literal|"Not yet supported in eXist"
argument_list|)
annotation|@
name|Test
specifier|public
name|void
name|idRefs_memtree
parameter_list|()
throws|throws
name|XMLDBException
block|{
specifier|final
name|XQueryService
name|service
init|=
name|getQueryService
argument_list|()
decl_stmt|;
name|ResourceSet
name|result
init|=
name|service
operator|.
name|query
argument_list|(
literal|"document {"
operator|+
name|ids_content
operator|+
literal|"}/idref('id2')"
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|result
operator|.
name|getSize
argument_list|()
argument_list|)
expr_stmt|;
name|result
operator|=
name|service
operator|.
name|query
argument_list|(
literal|"document {"
operator|+
name|ids_content
operator|+
literal|"}/idref('id1')"
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|result
operator|.
name|getSize
argument_list|()
argument_list|)
expr_stmt|;
name|result
operator|=
name|service
operator|.
name|query
argument_list|(
literal|"document {"
operator|+
name|ids_content
operator|+
literal|"}/idref(('id2', 'id1'))"
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|3
argument_list|,
name|result
operator|.
name|getSize
argument_list|()
argument_list|)
expr_stmt|;
name|result
operator|=
name|service
operator|.
name|query
argument_list|(
literal|"let $doc := document {"
operator|+
name|ids_content
operator|+
literal|"} return<results>{$doc/idref('id2')}</results>"
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|result
operator|.
name|getSize
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|externalVars
parameter_list|()
throws|throws
name|XMLDBException
block|{
name|XQueryService
name|service
init|=
name|storeXMLStringAndGetQueryService
argument_list|(
literal|"strings.xml"
argument_list|,
name|strings
argument_list|)
decl_stmt|;
name|String
name|query
init|=
literal|"declare variable $x external;"
operator|+
literal|"$x"
decl_stmt|;
name|CompiledExpression
name|expr
init|=
name|service
operator|.
name|compile
argument_list|(
name|query
argument_list|)
decl_stmt|;
comment|//Do not declare the variable...
name|boolean
name|exceptionThrown
init|=
literal|false
decl_stmt|;
try|try
block|{
name|service
operator|.
name|execute
argument_list|(
name|expr
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|XMLDBException
name|e
parameter_list|)
block|{
name|exceptionThrown
operator|=
literal|true
expr_stmt|;
block|}
name|assertTrue
argument_list|(
literal|"Expected XPTY0002"
argument_list|,
name|exceptionThrown
argument_list|)
expr_stmt|;
name|query
operator|=
literal|"declare variable $local:string external;"
operator|+
literal|"/test/string[. = $local:string]"
expr_stmt|;
name|expr
operator|=
name|service
operator|.
name|compile
argument_list|(
name|query
argument_list|)
expr_stmt|;
name|service
operator|.
name|declareVariable
argument_list|(
literal|"local:string"
argument_list|,
literal|"Hello"
argument_list|)
expr_stmt|;
name|ResourceSet
name|result
init|=
name|service
operator|.
name|execute
argument_list|(
name|expr
argument_list|)
decl_stmt|;
specifier|final
name|XMLResource
name|r
init|=
operator|(
name|XMLResource
operator|)
name|result
operator|.
name|getResource
argument_list|(
literal|0
argument_list|)
decl_stmt|;
name|Node
name|node
init|=
name|r
operator|.
name|getContentAsDOM
argument_list|()
decl_stmt|;
if|if
condition|(
name|node
operator|.
name|getNodeType
argument_list|()
operator|==
name|Node
operator|.
name|DOCUMENT_NODE
condition|)
block|{
name|node
operator|=
name|node
operator|.
name|getFirstChild
argument_list|()
expr_stmt|;
block|}
name|assertEquals
argument_list|(
literal|"string"
argument_list|,
name|node
operator|.
name|getNodeName
argument_list|()
argument_list|)
expr_stmt|;
comment|//Instanciate a new service to prevent variable reuse
comment|//TODO : consider auto-reset ?
name|service
operator|=
name|storeXMLStringAndGetQueryService
argument_list|(
literal|"strings.xml"
argument_list|,
name|strings
argument_list|)
expr_stmt|;
name|query
operator|=
literal|"declare variable $local:string as xs:string external;"
operator|+
literal|"$local:string"
expr_stmt|;
name|expr
operator|=
name|service
operator|.
name|compile
argument_list|(
name|query
argument_list|)
expr_stmt|;
comment|//TODO : we should virtually pass any kind of value
name|service
operator|.
name|declareVariable
argument_list|(
literal|"local:string"
argument_list|,
operator|new
name|Integer
argument_list|(
literal|1
argument_list|)
argument_list|)
expr_stmt|;
name|String
name|message
init|=
literal|""
decl_stmt|;
try|try
block|{
name|service
operator|.
name|execute
argument_list|(
name|expr
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|XMLDBException
name|e
parameter_list|)
block|{
comment|//e.printStackTrace();
name|message
operator|=
name|e
operator|.
name|getMessage
argument_list|()
expr_stmt|;
block|}
name|assertTrue
argument_list|(
name|message
operator|.
name|indexOf
argument_list|(
literal|"XPTY0004"
argument_list|)
operator|>
operator|-
literal|1
argument_list|)
expr_stmt|;
name|service
operator|=
name|storeXMLStringAndGetQueryService
argument_list|(
literal|"strings.xml"
argument_list|,
name|strings
argument_list|)
expr_stmt|;
name|query
operator|=
literal|"declare variable $x as xs:integer external; "
operator|+
literal|"$x"
expr_stmt|;
name|expr
operator|=
name|service
operator|.
name|compile
argument_list|(
name|query
argument_list|)
expr_stmt|;
comment|//TODO : we should virtually pass any kind of value
name|service
operator|.
name|declareVariable
argument_list|(
literal|"x"
argument_list|,
literal|"1"
argument_list|)
expr_stmt|;
name|message
operator|=
literal|""
expr_stmt|;
try|try
block|{
name|service
operator|.
name|execute
argument_list|(
name|expr
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|XMLDBException
name|e
parameter_list|)
block|{
comment|//e.printStackTrace();
name|message
operator|=
name|e
operator|.
name|getMessage
argument_list|()
expr_stmt|;
block|}
name|assertTrue
argument_list|(
name|message
operator|.
name|indexOf
argument_list|(
literal|"XPTY0004"
argument_list|)
operator|>
operator|-
literal|1
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|externalVars2
parameter_list|()
throws|throws
name|ParserConfigurationException
throws|,
name|IOException
throws|,
name|SAXException
throws|,
name|XMLDBException
block|{
specifier|final
name|DocumentBuilderFactory
name|factory
init|=
name|DocumentBuilderFactory
operator|.
name|newInstance
argument_list|()
decl_stmt|;
specifier|final
name|DocumentBuilder
name|builder
init|=
name|factory
operator|.
name|newDocumentBuilder
argument_list|()
decl_stmt|;
specifier|final
name|InputSource
name|source
init|=
operator|new
name|InputSource
argument_list|(
operator|new
name|StringReader
argument_list|(
name|strings
argument_list|)
argument_list|)
decl_stmt|;
specifier|final
name|Document
name|doc
init|=
name|builder
operator|.
name|parse
argument_list|(
name|source
argument_list|)
decl_stmt|;
specifier|final
name|XQueryService
name|service
init|=
operator|(
name|XQueryService
operator|)
name|testCollection
operator|.
name|getService
argument_list|(
literal|"XQueryService"
argument_list|,
literal|"1.0"
argument_list|)
decl_stmt|;
specifier|final
name|CompiledExpression
name|expr
init|=
name|service
operator|.
name|compile
argument_list|(
literal|"declare variable $local:node external; $local:node//string"
argument_list|)
decl_stmt|;
name|service
operator|.
name|declareVariable
argument_list|(
literal|"local:node"
argument_list|,
name|doc
operator|.
name|getDocumentElement
argument_list|()
argument_list|)
expr_stmt|;
specifier|final
name|ResourceSet
name|result
init|=
name|service
operator|.
name|execute
argument_list|(
name|expr
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|3
argument_list|,
name|result
operator|.
name|getSize
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|queryResource
parameter_list|()
throws|throws
name|XMLDBException
block|{
name|XMLResource
name|doc
init|=
operator|(
name|XMLResource
operator|)
name|testCollection
operator|.
name|createResource
argument_list|(
literal|"strings.xml"
argument_list|,
literal|"XMLResource"
argument_list|)
decl_stmt|;
name|doc
operator|.
name|setContent
argument_list|(
name|strings
argument_list|)
expr_stmt|;
name|testCollection
operator|.
name|storeResource
argument_list|(
name|doc
argument_list|)
expr_stmt|;
name|doc
operator|=
operator|(
name|XMLResource
operator|)
name|testCollection
operator|.
name|createResource
argument_list|(
literal|"strings2.xml"
argument_list|,
literal|"XMLResource"
argument_list|)
expr_stmt|;
name|doc
operator|.
name|setContent
argument_list|(
name|strings
argument_list|)
expr_stmt|;
name|testCollection
operator|.
name|storeResource
argument_list|(
name|doc
argument_list|)
expr_stmt|;
specifier|final
name|XPathQueryService
name|query
init|=
operator|(
name|XPathQueryService
operator|)
name|testCollection
operator|.
name|getService
argument_list|(
literal|"XPathQueryService"
argument_list|,
literal|"1.0"
argument_list|)
decl_stmt|;
name|ResourceSet
name|result
init|=
name|query
operator|.
name|queryResource
argument_list|(
literal|"strings2.xml"
argument_list|,
literal|"/test/string[. = 'Hello World!']"
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|result
operator|.
name|getSize
argument_list|()
argument_list|)
expr_stmt|;
name|result
operator|=
name|query
operator|.
name|query
argument_list|(
literal|"/test/string[. = 'Hello World!']"
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|result
operator|.
name|getSize
argument_list|()
argument_list|)
expr_stmt|;
block|}
comment|/**      * test involving ancestor::      *>>>>>>> currently this produces variable corruption :      * 			The result is the ancestor<<<<<<<<<<      */
annotation|@
name|Test
specifier|public
name|void
name|ancestor
parameter_list|()
throws|throws
name|XMLDBException
block|{
specifier|final
name|XQueryService
name|service
init|=
name|storeXMLStringAndGetQueryService
argument_list|(
literal|"numbers.xml"
argument_list|,
name|numbers
argument_list|)
decl_stmt|;
specifier|final
name|String
name|query
init|=
literal|"let $all_items := /test/item "
operator|+
literal|"(: Note: variable non used but computed anyway :)"
operator|+
literal|"let $unused_variable :="
operator|+
literal|"	for $one_item in $all_items "
operator|+
literal|"			/ ancestor::*	(:<<<<< if you remove this line all is normal :)"
operator|+
literal|"		return 'foo'"
operator|+
literal|"return $all_items"
decl_stmt|;
specifier|final
name|ResourceSet
name|result
init|=
name|service
operator|.
name|queryResource
argument_list|(
literal|"numbers.xml"
argument_list|,
name|query
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|4
argument_list|,
name|result
operator|.
name|getSize
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|namespaces
parameter_list|()
throws|throws
name|XMLDBException
block|{
specifier|final
name|XQueryService
name|service
init|=
name|storeXMLStringAndGetQueryService
argument_list|(
literal|"namespaces.xml"
argument_list|,
name|namespaces
argument_list|)
decl_stmt|;
name|service
operator|.
name|setNamespace
argument_list|(
literal|"t"
argument_list|,
literal|"http://www.foo.com"
argument_list|)
expr_stmt|;
name|service
operator|.
name|setNamespace
argument_list|(
literal|"c"
argument_list|,
literal|"http://www.other.com"
argument_list|)
expr_stmt|;
name|ResourceSet
name|result
init|=
name|service
operator|.
name|queryResource
argument_list|(
literal|"namespaces.xml"
argument_list|,
literal|"//t:section"
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|result
operator|.
name|getSize
argument_list|()
argument_list|)
expr_stmt|;
name|result
operator|=
name|service
operator|.
name|queryResource
argument_list|(
literal|"namespaces.xml"
argument_list|,
literal|"/t:test//c:comment"
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|result
operator|.
name|getSize
argument_list|()
argument_list|)
expr_stmt|;
name|result
operator|=
name|service
operator|.
name|queryResource
argument_list|(
literal|"namespaces.xml"
argument_list|,
literal|"//c:*"
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|result
operator|.
name|getSize
argument_list|()
argument_list|)
expr_stmt|;
name|result
operator|=
name|service
operator|.
name|queryResource
argument_list|(
literal|"namespaces.xml"
argument_list|,
literal|"//*:comment"
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|result
operator|.
name|getSize
argument_list|()
argument_list|)
expr_stmt|;
name|result
operator|=
name|service
operator|.
name|queryResource
argument_list|(
literal|"namespaces.xml"
argument_list|,
literal|"namespace-uri(//t:test)"
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|result
operator|.
name|getSize
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"http://www.foo.com"
argument_list|,
name|result
operator|.
name|getResource
argument_list|(
literal|0
argument_list|)
operator|.
name|getContent
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|preserveSpace
parameter_list|()
throws|throws
name|XMLDBException
throws|,
name|IOException
throws|,
name|SAXException
block|{
specifier|final
name|XQueryService
name|service
init|=
name|storeXMLStringAndGetQueryService
argument_list|(
literal|"whitespace.xml"
argument_list|,
name|ws
argument_list|)
decl_stmt|;
specifier|final
name|ResourceSet
name|result
init|=
name|service
operator|.
name|queryResource
argument_list|(
literal|"whitespace.xml"
argument_list|,
literal|"//text"
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|result
operator|.
name|getSize
argument_list|()
argument_list|)
expr_stmt|;
name|String
name|item
init|=
name|result
operator|.
name|getResource
argument_list|(
literal|0
argument_list|)
operator|.
name|getContent
argument_list|()
operator|.
name|toString
argument_list|()
decl_stmt|;
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
name|item
argument_list|)
expr_stmt|;
name|assertXMLEqual
argument_list|(
literal|"<text></text>"
argument_list|,
name|item
argument_list|)
expr_stmt|;
name|item
operator|=
name|result
operator|.
name|getResource
argument_list|(
literal|1
argument_list|)
operator|.
name|getContent
argument_list|()
operator|.
name|toString
argument_list|()
expr_stmt|;
name|assertXMLEqual
argument_list|(
literal|"<text xml:space=\"default\"></text>"
argument_list|,
name|item
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|nestedElements
parameter_list|()
throws|throws
name|XMLDBException
block|{
specifier|final
name|XQueryService
name|service
init|=
name|storeXMLStringAndGetQueryService
argument_list|(
literal|"nested.xml"
argument_list|,
name|nested
argument_list|)
decl_stmt|;
specifier|final
name|ResourceSet
name|result
init|=
name|service
operator|.
name|queryResource
argument_list|(
literal|"nested.xml"
argument_list|,
literal|"//c"
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|3
argument_list|,
name|result
operator|.
name|getSize
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|staticVariables
parameter_list|()
throws|throws
name|XMLDBException
block|{
specifier|final
name|XMLResource
name|doc
init|=
operator|(
name|XMLResource
operator|)
name|testCollection
operator|.
name|createResource
argument_list|(
literal|"numbers.xml"
argument_list|,
literal|"XMLResource"
argument_list|)
decl_stmt|;
name|doc
operator|.
name|setContent
argument_list|(
name|numbers
argument_list|)
expr_stmt|;
name|testCollection
operator|.
name|storeResource
argument_list|(
name|doc
argument_list|)
expr_stmt|;
name|XPathQueryService
name|service
init|=
operator|(
name|XPathQueryService
operator|)
name|testCollection
operator|.
name|getService
argument_list|(
literal|"XPathQueryService"
argument_list|,
literal|"1.0"
argument_list|)
decl_stmt|;
specifier|final
name|XPathQueryServiceImpl
name|service2
init|=
operator|(
name|XPathQueryServiceImpl
operator|)
name|service
decl_stmt|;
name|service2
operator|.
name|declareVariable
argument_list|(
literal|"name"
argument_list|,
literal|"MONTAGUE"
argument_list|)
expr_stmt|;
name|service2
operator|.
name|declareVariable
argument_list|(
literal|"name"
argument_list|,
literal|"43"
argument_list|)
expr_stmt|;
comment|//ResourceSet result = service.query("//SPEECH[SPEAKER=$name]");
name|ResourceSet
name|result
init|=
name|service2
operator|.
name|query
argument_list|(
name|doc
argument_list|,
literal|"//item[stock=$name]"
argument_list|)
decl_stmt|;
name|result
operator|=
name|service2
operator|.
name|query
argument_list|(
literal|"$name"
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|result
operator|.
name|getSize
argument_list|()
argument_list|)
expr_stmt|;
name|result
operator|=
name|service2
operator|.
name|query
argument_list|(
name|doc
argument_list|,
literal|"//item[stock=43]"
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|result
operator|.
name|getSize
argument_list|()
argument_list|)
expr_stmt|;
name|result
operator|=
name|service2
operator|.
name|query
argument_list|(
name|doc
argument_list|,
literal|"//item"
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|4
argument_list|,
name|result
operator|.
name|getSize
argument_list|()
argument_list|)
expr_stmt|;
comment|// assertEquals(10, result.getSize());
block|}
annotation|@
name|Test
specifier|public
name|void
name|membersAsResource
parameter_list|()
throws|throws
name|XMLDBException
throws|,
name|IOException
block|{
comment|//			XPathQueryService service =
comment|//				(XPathQueryService) testCollection.getService(
comment|//					"XPathQueryService",
comment|//					"1.0");
comment|//			ResourceSet result = service.query("//SPEECH[LINE&= 'marriage']");
specifier|final
name|XQueryService
name|service
init|=
name|storeXMLStringAndGetQueryService
argument_list|(
literal|"numbers.xml"
argument_list|,
name|numbers
argument_list|)
decl_stmt|;
specifier|final
name|ResourceSet
name|result
init|=
name|service
operator|.
name|query
argument_list|(
literal|"//item/price"
argument_list|)
decl_stmt|;
specifier|final
name|Resource
name|r
init|=
name|result
operator|.
name|getMembersAsResource
argument_list|()
decl_stmt|;
specifier|final
name|Object
name|rawContent
init|=
name|r
operator|.
name|getContent
argument_list|()
decl_stmt|;
name|String
name|content
init|=
literal|null
decl_stmt|;
if|if
condition|(
name|rawContent
operator|instanceof
name|File
condition|)
block|{
specifier|final
name|Path
name|p
init|=
operator|(
operator|(
name|File
operator|)
name|rawContent
operator|)
operator|.
name|toPath
argument_list|()
decl_stmt|;
name|content
operator|=
operator|new
name|String
argument_list|(
name|Files
operator|.
name|readAllBytes
argument_list|(
name|p
argument_list|)
argument_list|,
name|UTF_8
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|content
operator|=
operator|(
name|String
operator|)
name|r
operator|.
name|getContent
argument_list|()
expr_stmt|;
block|}
specifier|final
name|Pattern
name|p
init|=
name|Pattern
operator|.
name|compile
argument_list|(
literal|".*(<price>.*){4}"
argument_list|,
name|Pattern
operator|.
name|DOTALL
argument_list|)
decl_stmt|;
specifier|final
name|Matcher
name|m
init|=
name|p
operator|.
name|matcher
argument_list|(
name|content
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
literal|"get whole document numbers.xml"
argument_list|,
name|m
operator|.
name|matches
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|satisfies
parameter_list|()
throws|throws
name|XMLDBException
block|{
specifier|final
name|XQueryService
name|service
init|=
name|getQueryService
argument_list|()
decl_stmt|;
name|ResourceSet
name|result
init|=
name|queryAndAssert
argument_list|(
name|service
argument_list|,
literal|"every $foo in (1,2,3) satisfies"
operator|+
literal|"   let $bar := 'baz'"
operator|+
literal|"       return false() "
argument_list|,
literal|1
argument_list|,
literal|""
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|"satisfies + FLWR expression allways false 1"
argument_list|,
literal|"false"
argument_list|,
name|result
operator|.
name|getResource
argument_list|(
literal|0
argument_list|)
operator|.
name|getContent
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|result
operator|=
name|queryAndAssert
argument_list|(
name|service
argument_list|,
literal|"declare function local:foo() { false() };"
operator|+
literal|"   every $bar in (1,2,3) satisfies"
operator|+
literal|"   local:foo()"
argument_list|,
literal|1
argument_list|,
literal|""
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"satisfies + FLWR expression allways false 2"
argument_list|,
literal|"false"
argument_list|,
name|result
operator|.
name|getResource
argument_list|(
literal|0
argument_list|)
operator|.
name|getContent
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|String
name|query
init|=
literal|"every $x in () satisfies false()"
decl_stmt|;
name|result
operator|=
name|queryAndAssert
argument_list|(
name|service
argument_list|,
name|query
argument_list|,
literal|1
argument_list|,
literal|""
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|query
argument_list|,
literal|"true"
argument_list|,
name|result
operator|.
name|getResource
argument_list|(
literal|0
argument_list|)
operator|.
name|getContent
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|query
operator|=
literal|"some $x in () satisfies true()"
expr_stmt|;
name|result
operator|=
name|queryAndAssert
argument_list|(
name|service
argument_list|,
name|query
argument_list|,
literal|1
argument_list|,
literal|""
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|query
argument_list|,
literal|"false"
argument_list|,
name|result
operator|.
name|getResource
argument_list|(
literal|0
argument_list|)
operator|.
name|getContent
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|intersect
parameter_list|()
throws|throws
name|XMLDBException
block|{
specifier|final
name|XQueryService
name|service
init|=
name|getQueryService
argument_list|()
decl_stmt|;
name|String
name|query
init|=
literal|"()  intersect ()"
decl_stmt|;
name|queryAndAssert
argument_list|(
name|service
argument_list|,
name|query
argument_list|,
literal|0
argument_list|,
literal|""
argument_list|)
expr_stmt|;
name|query
operator|=
literal|"()  intersect  (1)"
expr_stmt|;
name|queryAndAssert
argument_list|(
name|service
argument_list|,
name|query
argument_list|,
literal|0
argument_list|,
literal|""
argument_list|)
expr_stmt|;
name|query
operator|=
literal|"(1)  intersect  ()"
expr_stmt|;
name|queryAndAssert
argument_list|(
name|service
argument_list|,
name|query
argument_list|,
literal|0
argument_list|,
literal|""
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|union
parameter_list|()
throws|throws
name|XMLDBException
block|{
specifier|final
name|XQueryService
name|service
init|=
name|getQueryService
argument_list|()
decl_stmt|;
name|String
name|query
init|=
literal|"()  union ()"
decl_stmt|;
name|queryAndAssert
argument_list|(
name|service
argument_list|,
name|query
argument_list|,
literal|0
argument_list|,
literal|""
argument_list|)
expr_stmt|;
name|String
name|message
init|=
literal|""
decl_stmt|;
try|try
block|{
name|query
operator|=
literal|"()  union  (1)"
expr_stmt|;
name|queryAndAssert
argument_list|(
name|service
argument_list|,
name|query
argument_list|,
literal|0
argument_list|,
literal|""
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|XMLDBException
name|e
parameter_list|)
block|{
name|message
operator|=
name|e
operator|.
name|getMessage
argument_list|()
expr_stmt|;
block|}
name|assertTrue
argument_list|(
name|message
operator|.
name|indexOf
argument_list|(
literal|"XPTY0004"
argument_list|)
operator|>
operator|-
literal|1
argument_list|)
expr_stmt|;
name|message
operator|=
literal|""
expr_stmt|;
try|try
block|{
name|query
operator|=
literal|"(1)  union  ()"
expr_stmt|;
name|queryAndAssert
argument_list|(
name|service
argument_list|,
name|query
argument_list|,
literal|0
argument_list|,
literal|""
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|XMLDBException
name|e
parameter_list|)
block|{
name|message
operator|=
name|e
operator|.
name|getMessage
argument_list|()
expr_stmt|;
block|}
name|assertTrue
argument_list|(
name|message
operator|.
name|indexOf
argument_list|(
literal|"XPTY0004"
argument_list|)
operator|>
operator|-
literal|1
argument_list|)
expr_stmt|;
name|query
operator|=
literal|"<a/>  union ()"
expr_stmt|;
name|queryAndAssert
argument_list|(
name|service
argument_list|,
name|query
argument_list|,
literal|1
argument_list|,
literal|""
argument_list|)
expr_stmt|;
name|query
operator|=
literal|"()  union<a/>"
expr_stmt|;
name|queryAndAssert
argument_list|(
name|service
argument_list|,
name|query
argument_list|,
literal|1
argument_list|,
literal|""
argument_list|)
expr_stmt|;
comment|//Not the same nodes
name|query
operator|=
literal|"<a/> union<a/>"
expr_stmt|;
name|queryAndAssert
argument_list|(
name|service
argument_list|,
name|query
argument_list|,
literal|2
argument_list|,
literal|""
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|except
parameter_list|()
throws|throws
name|XMLDBException
block|{
specifier|final
name|XQueryService
name|service
init|=
name|getQueryService
argument_list|()
decl_stmt|;
name|String
name|query
init|=
literal|"()  except ()"
decl_stmt|;
name|queryAndAssert
argument_list|(
name|service
argument_list|,
name|query
argument_list|,
literal|0
argument_list|,
literal|""
argument_list|)
expr_stmt|;
name|query
operator|=
literal|"()  except  (1)"
expr_stmt|;
name|queryAndAssert
argument_list|(
name|service
argument_list|,
name|query
argument_list|,
literal|0
argument_list|,
literal|""
argument_list|)
expr_stmt|;
name|String
name|message
init|=
literal|""
decl_stmt|;
try|try
block|{
name|query
operator|=
literal|"(1)  except  ()"
expr_stmt|;
name|queryAndAssert
argument_list|(
name|service
argument_list|,
name|query
argument_list|,
literal|0
argument_list|,
literal|""
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|XMLDBException
name|e
parameter_list|)
block|{
name|message
operator|=
name|e
operator|.
name|getMessage
argument_list|()
expr_stmt|;
block|}
name|assertTrue
argument_list|(
name|message
operator|.
name|indexOf
argument_list|(
literal|"XPTY0004"
argument_list|)
operator|>
operator|-
literal|1
argument_list|)
expr_stmt|;
name|query
operator|=
literal|"<a/>  except ()"
expr_stmt|;
name|queryAndAssert
argument_list|(
name|service
argument_list|,
name|query
argument_list|,
literal|1
argument_list|,
literal|""
argument_list|)
expr_stmt|;
name|query
operator|=
literal|"()  except<a/>"
expr_stmt|;
name|queryAndAssert
argument_list|(
name|service
argument_list|,
name|query
argument_list|,
literal|0
argument_list|,
literal|""
argument_list|)
expr_stmt|;
comment|//Not the same nodes
name|query
operator|=
literal|"<a/> except<a/>"
expr_stmt|;
name|queryAndAssert
argument_list|(
name|service
argument_list|,
name|query
argument_list|,
literal|1
argument_list|,
literal|""
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|convertToBoolean
parameter_list|()
throws|throws
name|XMLDBException
block|{
specifier|final
name|XQueryService
name|service
init|=
name|getQueryService
argument_list|()
decl_stmt|;
name|ResourceSet
name|result
init|=
name|queryAndAssert
argument_list|(
name|service
argument_list|,
literal|"let $doc :=<element attribute=''/>"
operator|+
literal|"return ("
operator|+
literal|"<true>{boolean(($doc,2,3))}</true> ,"
operator|+
literal|"<true>{boolean(($doc/@*,2,3))}</true> ,"
operator|+
literal|"<true>{boolean(true())}</true> ,"
operator|+
literal|"<true>{boolean('test')}</true> ,"
operator|+
literal|"<true>{boolean(number(1))}</true> ,"
operator|+
literal|"<false>{boolean((0))}</false> ,"
operator|+
literal|"<false>{boolean(false())}</false> ,"
operator|+
literal|"<false>{boolean('')}</false> ,"
operator|+
literal|"<false>{boolean(number(0))}</false> ,"
operator|+
literal|"<false>{boolean(number('NaN'))}</false>"
operator|+
literal|")"
argument_list|,
literal|10
argument_list|,
literal|""
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
literal|10
condition|;
name|i
operator|++
control|)
block|{
if|if
condition|(
name|i
operator|<
literal|5
condition|)
block|{
name|assertEquals
argument_list|(
literal|"true "
operator|+
operator|(
name|i
operator|+
literal|1
operator|)
argument_list|,
literal|"<true>true</true>"
argument_list|,
name|result
operator|.
name|getResource
argument_list|(
name|i
argument_list|)
operator|.
name|getContent
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|assertEquals
argument_list|(
literal|"false "
operator|+
operator|(
name|i
operator|+
literal|1
operator|)
argument_list|,
literal|"<false>false</false>"
argument_list|,
name|result
operator|.
name|getResource
argument_list|(
name|i
argument_list|)
operator|.
name|getContent
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
name|boolean
name|exceptionThrown
init|=
literal|false
decl_stmt|;
name|String
name|message
init|=
literal|""
decl_stmt|;
try|try
block|{
name|queryAndAssert
argument_list|(
name|service
argument_list|,
literal|"let $doc :=<element attribute=''/>"
operator|+
literal|" return boolean( (1,2,$doc) )"
argument_list|,
literal|1
argument_list|,
literal|""
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|XMLDBException
name|e
parameter_list|)
block|{
name|exceptionThrown
operator|=
literal|true
expr_stmt|;
name|message
operator|=
name|e
operator|.
name|getMessage
argument_list|()
expr_stmt|;
block|}
name|assertTrue
argument_list|(
literal|"Exception wanted: "
operator|+
name|message
argument_list|,
name|exceptionThrown
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|compile
parameter_list|()
throws|throws
name|XMLDBException
block|{
specifier|final
name|String
name|invalidQuery
init|=
literal|"for $i in (1 to 10)\n return $b"
decl_stmt|;
specifier|final
name|String
name|validQuery
init|=
literal|"for $i in (1 to 10) return $i"
decl_stmt|;
specifier|final
name|String
name|validModule
init|=
literal|"module namespace foo=\"urn:foo\";\n"
operator|+
literal|"declare function foo:test() { \"Hello World!\" };"
decl_stmt|;
specifier|final
name|String
name|invalidModule
init|=
literal|"module namespace foo=\"urn:foo\";\n"
operator|+
literal|"declare function foo:test() { \"Hello World! };"
decl_stmt|;
specifier|final
name|org
operator|.
name|exist
operator|.
name|xmldb
operator|.
name|XQueryService
name|service
init|=
operator|(
name|org
operator|.
name|exist
operator|.
name|xmldb
operator|.
name|XQueryService
operator|)
name|getQueryService
argument_list|()
decl_stmt|;
name|boolean
name|exceptionOccurred
init|=
literal|false
decl_stmt|;
try|try
block|{
name|service
operator|.
name|compile
argument_list|(
name|invalidQuery
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|XMLDBException
name|e
parameter_list|)
block|{
name|assertEquals
argument_list|(
operator|(
operator|(
name|XPathException
operator|)
name|e
operator|.
name|getCause
argument_list|()
operator|)
operator|.
name|getLine
argument_list|()
argument_list|,
literal|2
argument_list|)
expr_stmt|;
name|exceptionOccurred
operator|=
literal|true
expr_stmt|;
block|}
name|assertTrue
argument_list|(
literal|"Expected an exception"
argument_list|,
name|exceptionOccurred
argument_list|)
expr_stmt|;
name|exceptionOccurred
operator|=
literal|false
expr_stmt|;
try|try
block|{
name|service
operator|.
name|compileAndCheck
argument_list|(
name|invalidModule
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|XPathException
name|e
parameter_list|)
block|{
name|exceptionOccurred
operator|=
literal|true
expr_stmt|;
block|}
name|assertTrue
argument_list|(
literal|"Expected an exception"
argument_list|,
name|exceptionOccurred
argument_list|)
expr_stmt|;
name|service
operator|.
name|compile
argument_list|(
name|validQuery
argument_list|)
expr_stmt|;
name|service
operator|.
name|compile
argument_list|(
name|validModule
argument_list|)
expr_stmt|;
block|}
comment|/**      * Added by Geoff Shuetrim on 15 July 2006 (geoff@galexy.net).      * This test has been added following identification of a problem running      * XPath queries that involved the name of elements with the name 'xpointer'.      * @throws XMLDBException      */
annotation|@
name|Ignore
annotation|@
name|Test
specifier|public
name|void
name|xpointerElementNameHandling
parameter_list|()
throws|throws
name|XMLDBException
block|{
specifier|final
name|XQueryService
name|service
init|=
name|storeXMLStringAndGetQueryService
argument_list|(
literal|"xpointer.xml"
argument_list|,
name|xpointerElementName
argument_list|)
decl_stmt|;
name|ResourceSet
name|result
init|=
name|service
operator|.
name|queryResource
argument_list|(
literal|"xpointer.xml"
argument_list|,
literal|"/test/.[local-name()='xpointer']"
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|result
operator|.
name|getSize
argument_list|()
argument_list|)
expr_stmt|;
name|result
operator|=
name|service
operator|.
name|queryResource
argument_list|(
literal|"xpointer.xml"
argument_list|,
literal|"/test/xpointer"
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|result
operator|.
name|getSize
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|atomization
parameter_list|()
throws|throws
name|XMLDBException
throws|,
name|IOException
throws|,
name|SAXException
block|{
specifier|final
name|String
name|query
init|=
literal|"declare namespace ex = \"http://example.org\";\n"
operator|+
literal|"declare function ex:elementName() as xs:QName {\n"
operator|+
literal|"   QName(\"http://test.org\", \"test:name\")\n"
operator|+
literal|"};\n"
operator|+
literal|"<test>{\n"
operator|+
literal|"   element {QName(\"http://test.org\", \"test:name\") }{},\n"
operator|+
literal|"   element {ex:elementName()} {}\n"
operator|+
literal|"}</test>"
decl_stmt|;
specifier|final
name|org
operator|.
name|exist
operator|.
name|xmldb
operator|.
name|XQueryService
name|service
init|=
operator|(
name|org
operator|.
name|exist
operator|.
name|xmldb
operator|.
name|XQueryService
operator|)
name|getQueryService
argument_list|()
decl_stmt|;
name|service
operator|.
name|setProperty
argument_list|(
name|OutputKeys
operator|.
name|INDENT
argument_list|,
literal|"no"
argument_list|)
expr_stmt|;
specifier|final
name|ResourceSet
name|result
init|=
name|service
operator|.
name|query
argument_list|(
name|query
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|result
operator|.
name|getSize
argument_list|()
argument_list|)
expr_stmt|;
name|assertXMLEqual
argument_list|(
literal|"<test><test:name xmlns:test=\"http://test.org\"/><test:name xmlns:test=\"http://test.org\"/></test>"
argument_list|,
name|result
operator|.
name|getResource
argument_list|(
literal|0
argument_list|)
operator|.
name|getContent
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|substring
parameter_list|()
throws|throws
name|XMLDBException
block|{
specifier|final
name|XQueryService
name|service
init|=
name|getQueryService
argument_list|()
decl_stmt|;
comment|// Test cases by MIKA
specifier|final
name|String
name|validQuery
init|=
literal|"substring(\"MK-1234\", 4,1)"
decl_stmt|;
name|ResourceSet
name|result
init|=
name|queryAndAssert
argument_list|(
name|service
argument_list|,
name|validQuery
argument_list|,
literal|1
argument_list|,
name|validQuery
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|"1"
argument_list|,
name|result
operator|.
name|getResource
argument_list|(
literal|0
argument_list|)
operator|.
name|getContent
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|String
name|invalidQuery
init|=
literal|"substring(\"MK-1234\", 4,4)"
decl_stmt|;
name|result
operator|=
name|queryAndAssert
argument_list|(
name|service
argument_list|,
name|invalidQuery
argument_list|,
literal|1
argument_list|,
name|invalidQuery
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"1234"
argument_list|,
name|result
operator|.
name|getResource
argument_list|(
literal|0
argument_list|)
operator|.
name|getContent
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
comment|// Test case by Toar
specifier|final
name|String
name|toarQuery
init|=
literal|"let $num := \"2003.123\" \n return substring($num, 1, 7)"
decl_stmt|;
name|result
operator|=
name|queryAndAssert
argument_list|(
name|service
argument_list|,
name|toarQuery
argument_list|,
literal|1
argument_list|,
name|toarQuery
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"2003.12"
argument_list|,
name|result
operator|.
name|getResource
argument_list|(
literal|0
argument_list|)
operator|.
name|getContent
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
block|}
comment|/**      * Helper that performs an XQuery and does JUnit assertion on result size.      *      * @see #queryResource(XQueryService, String, String, int, String)      */
specifier|private
name|ResourceSet
name|queryResource
parameter_list|(
specifier|final
name|XQueryService
name|service
parameter_list|,
specifier|final
name|String
name|resource
parameter_list|,
specifier|final
name|String
name|query
parameter_list|,
specifier|final
name|int
name|expected
parameter_list|)
throws|throws
name|XMLDBException
block|{
return|return
name|queryResource
argument_list|(
name|service
argument_list|,
name|resource
argument_list|,
name|query
argument_list|,
name|expected
argument_list|,
literal|null
argument_list|)
return|;
block|}
comment|/**      * Helper that performs an XQuery and does JUnit assertion on result size.      *      * @param service XQuery service      * @param resource database resource (collection) to query      * @param query      * @param expected size of result      * @param message for JUnit      *      * @return a ResourceSet, allowing to do more assertions if necessary.      * @throws XMLDBException      */
specifier|private
name|ResourceSet
name|queryResource
parameter_list|(
specifier|final
name|XQueryService
name|service
parameter_list|,
specifier|final
name|String
name|resource
parameter_list|,
specifier|final
name|String
name|query
parameter_list|,
specifier|final
name|int
name|expected
parameter_list|,
specifier|final
name|String
name|message
parameter_list|)
throws|throws
name|XMLDBException
block|{
specifier|final
name|ResourceSet
name|result
init|=
name|service
operator|.
name|queryResource
argument_list|(
name|resource
argument_list|,
name|query
argument_list|)
decl_stmt|;
if|if
condition|(
name|message
operator|==
literal|null
condition|)
block|{
name|assertEquals
argument_list|(
name|query
argument_list|,
name|expected
argument_list|,
name|result
operator|.
name|getSize
argument_list|()
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|assertEquals
argument_list|(
name|message
argument_list|,
name|expected
argument_list|,
name|result
operator|.
name|getSize
argument_list|()
argument_list|)
expr_stmt|;
block|}
return|return
name|result
return|;
block|}
comment|/** For queries without associated data */
specifier|private
name|ResourceSet
name|queryAndAssert
parameter_list|(
specifier|final
name|XQueryService
name|service
parameter_list|,
specifier|final
name|String
name|query
parameter_list|,
specifier|final
name|int
name|expected
parameter_list|,
specifier|final
name|String
name|message
parameter_list|)
throws|throws
name|XMLDBException
block|{
specifier|final
name|ResourceSet
name|result
init|=
name|service
operator|.
name|query
argument_list|(
name|query
argument_list|)
decl_stmt|;
if|if
condition|(
name|message
operator|==
literal|null
condition|)
block|{
name|assertEquals
argument_list|(
name|expected
argument_list|,
name|result
operator|.
name|getSize
argument_list|()
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|assertEquals
argument_list|(
name|message
argument_list|,
name|expected
argument_list|,
name|result
operator|.
name|getSize
argument_list|()
argument_list|)
expr_stmt|;
block|}
return|return
name|result
return|;
block|}
comment|/** For queries without associated data */
specifier|private
name|XQueryService
name|getQueryService
parameter_list|()
throws|throws
name|XMLDBException
block|{
specifier|final
name|XQueryService
name|service
init|=
operator|(
name|XQueryService
operator|)
name|testCollection
operator|.
name|getService
argument_list|(
literal|"XPathQueryService"
argument_list|,
literal|"1.0"
argument_list|)
decl_stmt|;
return|return
name|service
return|;
block|}
comment|/** stores XML String and get Query Service      * @param documentName to be stored in the DB      * @param content to be stored in the DB      * @return the XQuery Service      * @throws XMLDBException      */
specifier|private
name|XQueryService
name|storeXMLStringAndGetQueryService
parameter_list|(
specifier|final
name|String
name|documentName
parameter_list|,
specifier|final
name|String
name|content
parameter_list|)
throws|throws
name|XMLDBException
block|{
specifier|final
name|XMLResource
name|doc
init|=
operator|(
name|XMLResource
operator|)
name|testCollection
operator|.
name|createResource
argument_list|(
name|documentName
argument_list|,
literal|"XMLResource"
argument_list|)
decl_stmt|;
name|doc
operator|.
name|setContent
argument_list|(
name|content
argument_list|)
expr_stmt|;
name|testCollection
operator|.
name|storeResource
argument_list|(
name|doc
argument_list|)
expr_stmt|;
specifier|final
name|XQueryService
name|service
init|=
operator|(
name|XQueryService
operator|)
name|testCollection
operator|.
name|getService
argument_list|(
literal|"XPathQueryService"
argument_list|,
literal|"1.0"
argument_list|)
decl_stmt|;
return|return
name|service
return|;
block|}
specifier|public
specifier|static
name|void
name|main
parameter_list|(
specifier|final
name|String
index|[]
name|args
parameter_list|)
block|{
name|JUnitCore
operator|.
name|runClasses
argument_list|(
name|XPathQueryTest
operator|.
name|class
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

