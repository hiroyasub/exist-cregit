begin_unit|revision:1.0.0;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * eXist Open Source Native XML Database  * Copyright (C) 2005-2010 The eXist Project  * http://exist-db.org  *  * This program is free software; you can redistribute it and/or  * modify it under the terms of the GNU Lesser General Public License  * as published by the Free Software Foundation; either version 2  * of the License, or (at your option) any later version.  *    * This program is distributed in the hope that it will be useful,  * but WITHOUT ANY WARRANTY; without even the implied warranty of  * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the  * GNU Lesser General Public License for more details.  *   * You should have received a copy of the GNU Lesser General Public License  * along with this program; if not, write to the Free Software Foundation  * Inc., 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301, USA.  *    *  $Id$  */
end_comment

begin_package
package|package
name|org
operator|.
name|exist
operator|.
name|xquery
package|;
end_package

begin_import
import|import
name|java
operator|.
name|nio
operator|.
name|file
operator|.
name|Path
import|;
end_import

begin_import
import|import
name|java
operator|.
name|text
operator|.
name|SimpleDateFormat
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Date
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Locale
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Optional
import|;
end_import

begin_import
import|import
name|com
operator|.
name|googlecode
operator|.
name|junittoolbox
operator|.
name|ParallelRunner
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|test
operator|.
name|ExistXmldbEmbeddedServer
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|util
operator|.
name|ConfigurationHelper
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|util
operator|.
name|FileUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|xmldb
operator|.
name|XmldbURI
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|*
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|runner
operator|.
name|RunWith
import|;
end_import

begin_import
import|import
name|org
operator|.
name|xmldb
operator|.
name|api
operator|.
name|base
operator|.
name|Collection
import|;
end_import

begin_import
import|import
name|org
operator|.
name|xmldb
operator|.
name|api
operator|.
name|base
operator|.
name|ResourceSet
import|;
end_import

begin_import
import|import
name|org
operator|.
name|xmldb
operator|.
name|api
operator|.
name|base
operator|.
name|XMLDBException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|xmldb
operator|.
name|api
operator|.
name|modules
operator|.
name|BinaryResource
import|;
end_import

begin_import
import|import
name|org
operator|.
name|xmldb
operator|.
name|api
operator|.
name|modules
operator|.
name|CollectionManagementService
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertEquals
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertNotNull
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertTrue
import|;
end_import

begin_comment
comment|/**  * Tests for various standard XQuery functions  *  * @author jens  * @author perig  * @author wolf  * @author adam  * @author dannes  * @author dmitriy  * @author ljo  * @author chrisdutz  * @author harrah  * @author gvalentino  * @author jmvanel  */
end_comment

begin_class
annotation|@
name|RunWith
argument_list|(
name|ParallelRunner
operator|.
name|class
argument_list|)
specifier|public
class|class
name|XQueryFunctionsTest
block|{
annotation|@
name|ClassRule
specifier|public
specifier|static
specifier|final
name|ExistXmldbEmbeddedServer
name|existEmbeddedServer
init|=
operator|new
name|ExistXmldbEmbeddedServer
argument_list|(
literal|false
argument_list|,
literal|true
argument_list|)
decl_stmt|;
specifier|private
specifier|final
specifier|static
name|String
name|ROOT_COLLECTION_URI
init|=
literal|"xmldb:exist:///db"
decl_stmt|;
annotation|@
name|Test
specifier|public
name|void
name|arguments
parameter_list|()
throws|throws
name|XPathException
throws|,
name|XMLDBException
block|{
name|ResourceSet
name|result
init|=
name|existEmbeddedServer
operator|.
name|executeQuery
argument_list|(
literal|"declare function local:testAnyURI($uri as xs:string) as xs:string { "
operator|+
literal|"concat('Successfully processed as xs:string : ',$uri) "
operator|+
literal|"}; "
operator|+
literal|"let $a := xs:anyURI('http://exist.sourceforge.net/') "
operator|+
literal|"return local:testAnyURI($a)"
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|result
operator|.
name|getSize
argument_list|()
argument_list|)
expr_stmt|;
name|String
name|r
init|=
operator|(
name|String
operator|)
name|result
operator|.
name|getResource
argument_list|(
literal|0
argument_list|)
operator|.
name|getContent
argument_list|()
decl_stmt|;
name|assertEquals
argument_list|(
literal|"Successfully processed as xs:string : http://exist.sourceforge.net/"
argument_list|,
name|r
argument_list|)
expr_stmt|;
name|result
operator|=
name|existEmbeddedServer
operator|.
name|executeQuery
argument_list|(
literal|"declare function local:testEmpty($blah as xs:string)  as element()* { "
operator|+
literal|"for $a in (1,2,3) order by $a "
operator|+
literal|"return () "
operator|+
literal|"}; "
operator|+
literal|"local:testEmpty('test')"
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|result
operator|.
name|getSize
argument_list|()
argument_list|)
expr_stmt|;
block|}
comment|/**      * Tests the XQuery-/XPath-function fn:round-half-to-even      * with the rounding value typed xs:integer      */
annotation|@
name|Test
specifier|public
name|void
name|roundHtE_INTEGER
parameter_list|()
throws|throws
name|XPathException
throws|,
name|XMLDBException
block|{
name|String
name|query
init|=
literal|"fn:round-half-to-even( xs:integer('1'), 0 )"
decl_stmt|;
name|ResourceSet
name|result
init|=
name|existEmbeddedServer
operator|.
name|executeQuery
argument_list|(
name|query
argument_list|)
decl_stmt|;
name|String
name|r
init|=
operator|(
name|String
operator|)
name|result
operator|.
name|getResource
argument_list|(
literal|0
argument_list|)
operator|.
name|getContent
argument_list|()
decl_stmt|;
name|assertEquals
argument_list|(
literal|"1"
argument_list|,
name|r
argument_list|)
expr_stmt|;
name|query
operator|=
literal|"fn:round-half-to-even( xs:integer('6'), -1 )"
expr_stmt|;
name|result
operator|=
name|existEmbeddedServer
operator|.
name|executeQuery
argument_list|(
name|query
argument_list|)
expr_stmt|;
name|r
operator|=
operator|(
name|String
operator|)
name|result
operator|.
name|getResource
argument_list|(
literal|0
argument_list|)
operator|.
name|getContent
argument_list|()
expr_stmt|;
name|assertEquals
argument_list|(
literal|"10"
argument_list|,
name|r
argument_list|)
expr_stmt|;
name|query
operator|=
literal|"fn:round-half-to-even( xs:integer('5'), -1 )"
expr_stmt|;
name|result
operator|=
name|existEmbeddedServer
operator|.
name|executeQuery
argument_list|(
name|query
argument_list|)
expr_stmt|;
name|r
operator|=
operator|(
name|String
operator|)
name|result
operator|.
name|getResource
argument_list|(
literal|0
argument_list|)
operator|.
name|getContent
argument_list|()
expr_stmt|;
name|assertEquals
argument_list|(
literal|"0"
argument_list|,
name|r
argument_list|)
expr_stmt|;
block|}
comment|/**      * Tests the XQuery-/XPath-function fn:round-half-to-even      * with the rounding value typed xs:double      */
annotation|@
name|Test
specifier|public
name|void
name|roundHtE_DOUBLE
parameter_list|()
throws|throws
name|XPathException
throws|,
name|XMLDBException
block|{
comment|/* List of Values to test with Rounding */
name|String
index|[]
name|testvalues
init|=
block|{
literal|"0.5"
block|,
literal|"1.5"
block|,
literal|"2.5"
block|,
literal|"3.567812E+3"
block|,
literal|"4.7564E-3"
block|,
literal|"35612.25"
block|}
decl_stmt|;
name|String
index|[]
name|resultvalues
init|=
block|{
literal|"0"
block|,
literal|"2"
block|,
literal|"2"
block|,
literal|"3567.81"
block|,
literal|"0"
block|,
literal|"35600"
block|}
decl_stmt|;
name|int
index|[]
name|precision
init|=
block|{
literal|0
block|,
literal|0
block|,
literal|0
block|,
literal|2
block|,
literal|2
block|,
operator|-
literal|2
block|}
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|testvalues
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
name|String
name|query
init|=
literal|"fn:round-half-to-even( xs:double('"
operator|+
name|testvalues
index|[
name|i
index|]
operator|+
literal|"'), "
operator|+
name|precision
index|[
name|i
index|]
operator|+
literal|" )"
decl_stmt|;
name|ResourceSet
name|result
init|=
name|existEmbeddedServer
operator|.
name|executeQuery
argument_list|(
name|query
argument_list|)
decl_stmt|;
name|String
name|r
init|=
operator|(
name|String
operator|)
name|result
operator|.
name|getResource
argument_list|(
literal|0
argument_list|)
operator|.
name|getContent
argument_list|()
decl_stmt|;
name|assertEquals
argument_list|(
name|resultvalues
index|[
name|i
index|]
argument_list|,
name|r
argument_list|)
expr_stmt|;
block|}
block|}
comment|/**      * Tests the XQuery-XPath function fn:tokenize()      */
annotation|@
name|Test
specifier|public
name|void
name|tokenize
parameter_list|()
throws|throws
name|XPathException
throws|,
name|XMLDBException
block|{
name|ResourceSet
name|result
init|=
name|existEmbeddedServer
operator|.
name|executeQuery
argument_list|(
literal|"count ( tokenize('a/b' , '/') )"
argument_list|)
decl_stmt|;
name|String
name|r
init|=
operator|(
name|String
operator|)
name|result
operator|.
name|getResource
argument_list|(
literal|0
argument_list|)
operator|.
name|getContent
argument_list|()
decl_stmt|;
name|assertEquals
argument_list|(
literal|"2"
argument_list|,
name|r
argument_list|)
expr_stmt|;
name|result
operator|=
name|existEmbeddedServer
operator|.
name|executeQuery
argument_list|(
literal|"count ( tokenize('a/b/' , '/') )"
argument_list|)
expr_stmt|;
name|r
operator|=
operator|(
name|String
operator|)
name|result
operator|.
name|getResource
argument_list|(
literal|0
argument_list|)
operator|.
name|getContent
argument_list|()
expr_stmt|;
name|assertEquals
argument_list|(
literal|"3"
argument_list|,
name|r
argument_list|)
expr_stmt|;
name|result
operator|=
name|existEmbeddedServer
operator|.
name|executeQuery
argument_list|(
literal|"count ( tokenize('' , '/') )"
argument_list|)
expr_stmt|;
name|r
operator|=
operator|(
name|String
operator|)
name|result
operator|.
name|getResource
argument_list|(
literal|0
argument_list|)
operator|.
name|getContent
argument_list|()
expr_stmt|;
name|assertEquals
argument_list|(
literal|"0"
argument_list|,
name|r
argument_list|)
expr_stmt|;
name|result
operator|=
name|existEmbeddedServer
operator|.
name|executeQuery
argument_list|(
literal|"let $res := fn:tokenize('abracadabra', '(ab)|(a)')"
operator|+
literal|"let $reference := ('', 'r', 'c', 'd', 'r', '')"
operator|+
literal|"return fn:deep-equal($res, $reference)"
argument_list|)
expr_stmt|;
name|r
operator|=
operator|(
name|String
operator|)
name|result
operator|.
name|getResource
argument_list|(
literal|0
argument_list|)
operator|.
name|getContent
argument_list|()
expr_stmt|;
name|assertEquals
argument_list|(
literal|"true"
argument_list|,
name|r
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|deepEqual
parameter_list|()
throws|throws
name|XPathException
throws|,
name|XMLDBException
block|{
name|ResourceSet
name|result
init|=
name|existEmbeddedServer
operator|.
name|executeQuery
argument_list|(
literal|"let $res := ('a', 'b')"
operator|+
literal|"let $reference := ('a', 'b')"
operator|+
literal|"return fn:deep-equal($res, $reference)"
argument_list|)
decl_stmt|;
name|String
name|r
init|=
operator|(
name|String
operator|)
name|result
operator|.
name|getResource
argument_list|(
literal|0
argument_list|)
operator|.
name|getContent
argument_list|()
decl_stmt|;
name|assertEquals
argument_list|(
literal|"true"
argument_list|,
name|r
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|compare
parameter_list|()
throws|throws
name|XPathException
throws|,
name|XMLDBException
block|{
name|ResourceSet
name|result
init|=
name|existEmbeddedServer
operator|.
name|executeQuery
argument_list|(
literal|"fn:compare(\"Strasse\", \"Stra\u00DFe\")"
argument_list|)
decl_stmt|;
name|String
name|r
init|=
operator|(
name|String
operator|)
name|result
operator|.
name|getResource
argument_list|(
literal|0
argument_list|)
operator|.
name|getContent
argument_list|()
decl_stmt|;
name|assertEquals
argument_list|(
literal|"-1"
argument_list|,
name|r
argument_list|)
expr_stmt|;
comment|//result 	= existEmbeddedServer.executeQuery("fn:compare(\"Strasse\", \"Stra\u00DFe\", \"java:GermanCollator\")");
comment|//r 		= (String) result.getResource(0).getContent();
comment|//assertEquals( "0", r );
name|String
name|query
init|=
literal|"let $a :=<a><b>-1</b><b>-2</b></a> "
operator|+
literal|"return $a/b[compare(., '+') gt 0]"
decl_stmt|;
name|result
operator|=
name|existEmbeddedServer
operator|.
name|executeQuery
argument_list|(
name|query
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|result
operator|.
name|getSize
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|distinctValues
parameter_list|()
throws|throws
name|XPathException
throws|,
name|XMLDBException
block|{
name|ResourceSet
name|result
init|=
name|existEmbeddedServer
operator|.
name|executeQuery
argument_list|(
literal|"declare variable $c { distinct-values(('a', 'a')) }; $c"
argument_list|)
decl_stmt|;
name|String
name|r
init|=
operator|(
name|String
operator|)
name|result
operator|.
name|getResource
argument_list|(
literal|0
argument_list|)
operator|.
name|getContent
argument_list|()
decl_stmt|;
name|assertEquals
argument_list|(
literal|"a"
argument_list|,
name|r
argument_list|)
expr_stmt|;
name|result
operator|=
name|existEmbeddedServer
operator|.
name|executeQuery
argument_list|(
literal|"declare variable $c { distinct-values((<a>a</a>,<b>a</b>)) }; $c"
argument_list|)
expr_stmt|;
name|r
operator|=
operator|(
name|String
operator|)
name|result
operator|.
name|getResource
argument_list|(
literal|0
argument_list|)
operator|.
name|getContent
argument_list|()
expr_stmt|;
name|assertEquals
argument_list|(
literal|"a"
argument_list|,
name|r
argument_list|)
expr_stmt|;
name|result
operator|=
name|existEmbeddedServer
operator|.
name|executeQuery
argument_list|(
literal|"let $seq := ('A', 2, 'B', 2) return distinct-values($seq) "
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|3
argument_list|,
name|result
operator|.
name|getSize
argument_list|()
argument_list|)
expr_stmt|;
name|String
name|query
init|=
literal|"let $a :=<a><b>-1</b><b>-2</b></a> "
operator|+
literal|"return $a/b[distinct-values(.)]"
decl_stmt|;
name|result
operator|=
name|existEmbeddedServer
operator|.
name|executeQuery
argument_list|(
name|query
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|result
operator|.
name|getSize
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|sum
parameter_list|()
throws|throws
name|XPathException
throws|,
name|XMLDBException
block|{
name|ResourceSet
name|result
init|=
name|existEmbeddedServer
operator|.
name|executeQuery
argument_list|(
literal|"declare variable $c { sum((1, 2)) }; $c"
argument_list|)
decl_stmt|;
name|String
name|r
init|=
operator|(
name|String
operator|)
name|result
operator|.
name|getResource
argument_list|(
literal|0
argument_list|)
operator|.
name|getContent
argument_list|()
decl_stmt|;
name|assertEquals
argument_list|(
literal|"3"
argument_list|,
name|r
argument_list|)
expr_stmt|;
name|result
operator|=
name|existEmbeddedServer
operator|.
name|executeQuery
argument_list|(
literal|"declare variable $c { sum((<a>1</a>,<b>2</b>)) }; $c"
argument_list|)
expr_stmt|;
name|r
operator|=
operator|(
name|String
operator|)
name|result
operator|.
name|getResource
argument_list|(
literal|0
argument_list|)
operator|.
name|getContent
argument_list|()
expr_stmt|;
comment|//Any untyped atomic values in the sequence are converted to xs:double values ([MK Xpath 2.0], p. 432)
name|assertEquals
argument_list|(
literal|"3"
argument_list|,
name|r
argument_list|)
expr_stmt|;
name|result
operator|=
name|existEmbeddedServer
operator|.
name|executeQuery
argument_list|(
literal|"declare variable $c { sum((), 3) }; $c"
argument_list|)
expr_stmt|;
name|r
operator|=
operator|(
name|String
operator|)
name|result
operator|.
name|getResource
argument_list|(
literal|0
argument_list|)
operator|.
name|getContent
argument_list|()
expr_stmt|;
name|assertEquals
argument_list|(
literal|"3"
argument_list|,
name|r
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|avg
parameter_list|()
throws|throws
name|XPathException
throws|,
name|XMLDBException
block|{
name|ResourceSet
name|result
init|=
name|existEmbeddedServer
operator|.
name|executeQuery
argument_list|(
literal|"avg((2, 2))"
argument_list|)
decl_stmt|;
name|String
name|r
init|=
operator|(
name|String
operator|)
name|result
operator|.
name|getResource
argument_list|(
literal|0
argument_list|)
operator|.
name|getContent
argument_list|()
decl_stmt|;
name|assertEquals
argument_list|(
literal|"2"
argument_list|,
name|r
argument_list|)
expr_stmt|;
name|result
operator|=
name|existEmbeddedServer
operator|.
name|executeQuery
argument_list|(
literal|"avg((<a>2</a>,<b>2</b>))"
argument_list|)
expr_stmt|;
name|r
operator|=
operator|(
name|String
operator|)
name|result
operator|.
name|getResource
argument_list|(
literal|0
argument_list|)
operator|.
name|getContent
argument_list|()
expr_stmt|;
comment|//Any untyped atomic values in the resulting sequence
comment|//(typically, values extracted from nodes in a schemaless document)
comment|//are converted to xs:double values ([MK Xpath 2.0], p. 301)
name|assertEquals
argument_list|(
literal|"2"
argument_list|,
name|r
argument_list|)
expr_stmt|;
name|result
operator|=
name|existEmbeddedServer
operator|.
name|executeQuery
argument_list|(
literal|"avg((3, 4, 5))"
argument_list|)
expr_stmt|;
name|r
operator|=
operator|(
name|String
operator|)
name|result
operator|.
name|getResource
argument_list|(
literal|0
argument_list|)
operator|.
name|getContent
argument_list|()
expr_stmt|;
name|assertEquals
argument_list|(
literal|"4"
argument_list|,
name|r
argument_list|)
expr_stmt|;
name|result
operator|=
name|existEmbeddedServer
operator|.
name|executeQuery
argument_list|(
literal|"avg((xdt:yearMonthDuration('P20Y'), xdt:yearMonthDuration('P10M')))"
argument_list|)
expr_stmt|;
name|r
operator|=
operator|(
name|String
operator|)
name|result
operator|.
name|getResource
argument_list|(
literal|0
argument_list|)
operator|.
name|getContent
argument_list|()
expr_stmt|;
name|assertEquals
argument_list|(
literal|"P10Y5M"
argument_list|,
name|r
argument_list|)
expr_stmt|;
name|String
name|message
init|=
literal|""
decl_stmt|;
try|try
block|{
name|result
operator|=
name|existEmbeddedServer
operator|.
name|executeQuery
argument_list|(
literal|"avg((xdt:yearMonthDuration('P20Y') , (3, 4, 5)))"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|XMLDBException
name|e
parameter_list|)
block|{
name|message
operator|=
name|e
operator|.
name|getMessage
argument_list|()
expr_stmt|;
block|}
name|assertTrue
argument_list|(
name|message
operator|.
name|indexOf
argument_list|(
literal|"FORG0006"
argument_list|)
operator|>
operator|-
literal|1
argument_list|)
expr_stmt|;
name|result
operator|=
name|existEmbeddedServer
operator|.
name|executeQuery
argument_list|(
literal|"avg(())"
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|result
operator|.
name|getSize
argument_list|()
argument_list|)
expr_stmt|;
name|result
operator|=
name|existEmbeddedServer
operator|.
name|executeQuery
argument_list|(
literal|"avg(((xs:float('INF')), xs:float('-INF')))"
argument_list|)
expr_stmt|;
name|r
operator|=
operator|(
name|String
operator|)
name|result
operator|.
name|getResource
argument_list|(
literal|0
argument_list|)
operator|.
name|getContent
argument_list|()
expr_stmt|;
name|assertEquals
argument_list|(
literal|"NaN"
argument_list|,
name|r
argument_list|)
expr_stmt|;
name|result
operator|=
name|existEmbeddedServer
operator|.
name|executeQuery
argument_list|(
literal|"avg(((3, 4, 5), xs:float('NaN')))"
argument_list|)
expr_stmt|;
name|r
operator|=
operator|(
name|String
operator|)
name|result
operator|.
name|getResource
argument_list|(
literal|0
argument_list|)
operator|.
name|getContent
argument_list|()
expr_stmt|;
name|assertEquals
argument_list|(
literal|"NaN"
argument_list|,
name|r
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|min
parameter_list|()
throws|throws
name|XPathException
throws|,
name|XMLDBException
block|{
name|ResourceSet
name|result
init|=
name|existEmbeddedServer
operator|.
name|executeQuery
argument_list|(
literal|"min((1, 2))"
argument_list|)
decl_stmt|;
name|String
name|r
init|=
operator|(
name|String
operator|)
name|result
operator|.
name|getResource
argument_list|(
literal|0
argument_list|)
operator|.
name|getContent
argument_list|()
decl_stmt|;
name|assertEquals
argument_list|(
literal|"1"
argument_list|,
name|r
argument_list|)
expr_stmt|;
name|result
operator|=
name|existEmbeddedServer
operator|.
name|executeQuery
argument_list|(
literal|"min((<a>1</a>,<b>2</b>))"
argument_list|)
expr_stmt|;
name|r
operator|=
operator|(
name|String
operator|)
name|result
operator|.
name|getResource
argument_list|(
literal|0
argument_list|)
operator|.
name|getContent
argument_list|()
expr_stmt|;
name|assertEquals
argument_list|(
literal|"1"
argument_list|,
name|r
argument_list|)
expr_stmt|;
name|result
operator|=
name|existEmbeddedServer
operator|.
name|executeQuery
argument_list|(
literal|"min(())"
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|result
operator|.
name|getSize
argument_list|()
argument_list|)
expr_stmt|;
name|result
operator|=
name|existEmbeddedServer
operator|.
name|executeQuery
argument_list|(
literal|"min((xs:dateTime('2005-12-19T16:22:40.006+01:00'), xs:dateTime('2005-12-19T16:29:40.321+01:00')))"
argument_list|)
expr_stmt|;
name|r
operator|=
operator|(
name|String
operator|)
name|result
operator|.
name|getResource
argument_list|(
literal|0
argument_list|)
operator|.
name|getContent
argument_list|()
expr_stmt|;
name|assertEquals
argument_list|(
literal|"2005-12-19T16:22:40.006+01:00"
argument_list|,
name|r
argument_list|)
expr_stmt|;
name|result
operator|=
name|existEmbeddedServer
operator|.
name|executeQuery
argument_list|(
literal|"min(('a', 'b'))"
argument_list|)
expr_stmt|;
name|r
operator|=
operator|(
name|String
operator|)
name|result
operator|.
name|getResource
argument_list|(
literal|0
argument_list|)
operator|.
name|getContent
argument_list|()
expr_stmt|;
name|assertEquals
argument_list|(
literal|"a"
argument_list|,
name|r
argument_list|)
expr_stmt|;
name|String
name|message
init|=
literal|""
decl_stmt|;
try|try
block|{
name|result
operator|=
name|existEmbeddedServer
operator|.
name|executeQuery
argument_list|(
literal|"min((xs:dateTime('2005-12-19T16:22:40.006+01:00'), 'a'))"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|XMLDBException
name|e
parameter_list|)
block|{
name|message
operator|=
name|e
operator|.
name|getMessage
argument_list|()
expr_stmt|;
block|}
name|assertTrue
argument_list|(
name|message
operator|.
name|indexOf
argument_list|(
literal|"FORG0006"
argument_list|)
operator|>
operator|-
literal|1
argument_list|)
expr_stmt|;
try|try
block|{
name|message
operator|=
literal|""
expr_stmt|;
name|result
operator|=
name|existEmbeddedServer
operator|.
name|executeQuery
argument_list|(
literal|"min(1, 2)"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|XMLDBException
name|e
parameter_list|)
block|{
name|message
operator|=
name|e
operator|.
name|getMessage
argument_list|()
expr_stmt|;
block|}
comment|//depends whether we have strict type checking or not
name|assertTrue
argument_list|(
name|message
operator|.
name|indexOf
argument_list|(
literal|"XPTY0004"
argument_list|)
operator|>
operator|-
literal|1
operator||
name|message
operator|.
name|indexOf
argument_list|(
literal|"FORG0001"
argument_list|)
operator|>
operator|-
literal|1
operator||
name|message
operator|.
name|indexOf
argument_list|(
literal|"FOCH0002"
argument_list|)
operator|>
operator|-
literal|1
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|max
parameter_list|()
throws|throws
name|XPathException
throws|,
name|XMLDBException
block|{
name|ResourceSet
name|result
init|=
name|existEmbeddedServer
operator|.
name|executeQuery
argument_list|(
literal|"max((1, 2))"
argument_list|)
decl_stmt|;
name|String
name|r
init|=
operator|(
name|String
operator|)
name|result
operator|.
name|getResource
argument_list|(
literal|0
argument_list|)
operator|.
name|getContent
argument_list|()
decl_stmt|;
name|assertEquals
argument_list|(
literal|"2"
argument_list|,
name|r
argument_list|)
expr_stmt|;
name|result
operator|=
name|existEmbeddedServer
operator|.
name|executeQuery
argument_list|(
literal|"max((<a>1</a>,<b>2</b>))"
argument_list|)
expr_stmt|;
name|r
operator|=
operator|(
name|String
operator|)
name|result
operator|.
name|getResource
argument_list|(
literal|0
argument_list|)
operator|.
name|getContent
argument_list|()
expr_stmt|;
name|assertEquals
argument_list|(
literal|"2"
argument_list|,
name|r
argument_list|)
expr_stmt|;
name|result
operator|=
name|existEmbeddedServer
operator|.
name|executeQuery
argument_list|(
literal|"max(())"
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|result
operator|.
name|getSize
argument_list|()
argument_list|)
expr_stmt|;
name|result
operator|=
name|existEmbeddedServer
operator|.
name|executeQuery
argument_list|(
literal|"max((xs:dateTime('2005-12-19T16:22:40.006+01:00'), xs:dateTime('2005-12-19T16:29:40.321+01:00')))"
argument_list|)
expr_stmt|;
name|r
operator|=
operator|(
name|String
operator|)
name|result
operator|.
name|getResource
argument_list|(
literal|0
argument_list|)
operator|.
name|getContent
argument_list|()
expr_stmt|;
name|assertEquals
argument_list|(
literal|"2005-12-19T16:29:40.321+01:00"
argument_list|,
name|r
argument_list|)
expr_stmt|;
name|result
operator|=
name|existEmbeddedServer
operator|.
name|executeQuery
argument_list|(
literal|"max(('a', 'b'))"
argument_list|)
expr_stmt|;
name|r
operator|=
operator|(
name|String
operator|)
name|result
operator|.
name|getResource
argument_list|(
literal|0
argument_list|)
operator|.
name|getContent
argument_list|()
expr_stmt|;
name|assertEquals
argument_list|(
literal|"b"
argument_list|,
name|r
argument_list|)
expr_stmt|;
name|String
name|message
init|=
literal|""
decl_stmt|;
try|try
block|{
name|result
operator|=
name|existEmbeddedServer
operator|.
name|executeQuery
argument_list|(
literal|"max((xs:dateTime('2005-12-19T16:22:40.006+01:00'), 'a'))"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|XMLDBException
name|e
parameter_list|)
block|{
name|message
operator|=
name|e
operator|.
name|getMessage
argument_list|()
expr_stmt|;
block|}
name|assertTrue
argument_list|(
name|message
operator|.
name|indexOf
argument_list|(
literal|"FORG0006"
argument_list|)
operator|>
operator|-
literal|1
argument_list|)
expr_stmt|;
try|try
block|{
name|message
operator|=
literal|""
expr_stmt|;
name|result
operator|=
name|existEmbeddedServer
operator|.
name|executeQuery
argument_list|(
literal|"max(1, 2)"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|XMLDBException
name|e
parameter_list|)
block|{
name|message
operator|=
name|e
operator|.
name|getMessage
argument_list|()
expr_stmt|;
block|}
comment|//depends whether we have strict type checking or not
name|assertTrue
argument_list|(
name|message
operator|.
name|indexOf
argument_list|(
literal|"XPTY0004"
argument_list|)
operator|>
operator|-
literal|1
operator||
name|message
operator|.
name|indexOf
argument_list|(
literal|"FORG0001"
argument_list|)
operator|>
operator|-
literal|1
operator||
name|message
operator|.
name|indexOf
argument_list|(
literal|"FOCH0002"
argument_list|)
operator|>
operator|-
literal|1
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|exclusiveLock
parameter_list|()
throws|throws
name|XPathException
throws|,
name|XMLDBException
block|{
name|String
name|query
init|=
literal|"let $query1 := (<a/>)\n"
operator|+
literal|"let $query2 := (2, 3)\n"
operator|+
literal|"let $a := util:exclusive-lock(//*,($query1, $query2))\n"
operator|+
literal|"return $a"
decl_stmt|;
name|ResourceSet
name|result
init|=
name|existEmbeddedServer
operator|.
name|executeQuery
argument_list|(
name|query
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|3
argument_list|,
name|result
operator|.
name|getSize
argument_list|()
argument_list|)
expr_stmt|;
name|String
name|r
init|=
operator|(
name|String
operator|)
name|result
operator|.
name|getResource
argument_list|(
literal|0
argument_list|)
operator|.
name|getContent
argument_list|()
decl_stmt|;
name|assertEquals
argument_list|(
literal|"<a/>"
argument_list|,
name|r
argument_list|)
expr_stmt|;
name|r
operator|=
operator|(
name|String
operator|)
name|result
operator|.
name|getResource
argument_list|(
literal|1
argument_list|)
operator|.
name|getContent
argument_list|()
expr_stmt|;
name|assertEquals
argument_list|(
literal|"2"
argument_list|,
name|r
argument_list|)
expr_stmt|;
name|r
operator|=
operator|(
name|String
operator|)
name|result
operator|.
name|getResource
argument_list|(
literal|2
argument_list|)
operator|.
name|getContent
argument_list|()
expr_stmt|;
name|assertEquals
argument_list|(
literal|"3"
argument_list|,
name|r
argument_list|)
expr_stmt|;
name|query
operator|=
literal|"let $query1 := (<a/>)\n"
operator|+
literal|"let $query2 := (2, 3)\n"
operator|+
literal|"let $a := util:exclusive-lock((),($query1, $query2))\n"
operator|+
literal|"return $a"
expr_stmt|;
name|result
operator|=
name|existEmbeddedServer
operator|.
name|executeQuery
argument_list|(
name|query
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|3
argument_list|,
name|result
operator|.
name|getSize
argument_list|()
argument_list|)
expr_stmt|;
name|r
operator|=
operator|(
name|String
operator|)
name|result
operator|.
name|getResource
argument_list|(
literal|0
argument_list|)
operator|.
name|getContent
argument_list|()
expr_stmt|;
name|assertEquals
argument_list|(
literal|"<a/>"
argument_list|,
name|r
argument_list|)
expr_stmt|;
name|r
operator|=
operator|(
name|String
operator|)
name|result
operator|.
name|getResource
argument_list|(
literal|1
argument_list|)
operator|.
name|getContent
argument_list|()
expr_stmt|;
name|assertEquals
argument_list|(
literal|"2"
argument_list|,
name|r
argument_list|)
expr_stmt|;
name|r
operator|=
operator|(
name|String
operator|)
name|result
operator|.
name|getResource
argument_list|(
literal|2
argument_list|)
operator|.
name|getContent
argument_list|()
expr_stmt|;
name|assertEquals
argument_list|(
literal|"3"
argument_list|,
name|r
argument_list|)
expr_stmt|;
name|query
operator|=
literal|"let $query1 := (<a/>)\n"
operator|+
literal|"let $query2 := (2, 3)\n"
operator|+
literal|"let $a := util:exclusive-lock((),($query1, $query2))\n"
operator|+
literal|"return $a"
expr_stmt|;
name|result
operator|=
name|existEmbeddedServer
operator|.
name|executeQuery
argument_list|(
name|query
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|3
argument_list|,
name|result
operator|.
name|getSize
argument_list|()
argument_list|)
expr_stmt|;
name|r
operator|=
operator|(
name|String
operator|)
name|result
operator|.
name|getResource
argument_list|(
literal|0
argument_list|)
operator|.
name|getContent
argument_list|()
expr_stmt|;
name|assertEquals
argument_list|(
literal|"<a/>"
argument_list|,
name|r
argument_list|)
expr_stmt|;
name|r
operator|=
operator|(
name|String
operator|)
name|result
operator|.
name|getResource
argument_list|(
literal|1
argument_list|)
operator|.
name|getContent
argument_list|()
expr_stmt|;
name|assertEquals
argument_list|(
literal|"2"
argument_list|,
name|r
argument_list|)
expr_stmt|;
name|r
operator|=
operator|(
name|String
operator|)
name|result
operator|.
name|getResource
argument_list|(
literal|2
argument_list|)
operator|.
name|getContent
argument_list|()
expr_stmt|;
name|assertEquals
argument_list|(
literal|"3"
argument_list|,
name|r
argument_list|)
expr_stmt|;
name|query
operator|=
literal|"let $a := util:exclusive-lock(//*,<root/>)\n"
operator|+
literal|"return $a"
expr_stmt|;
name|result
operator|=
name|existEmbeddedServer
operator|.
name|executeQuery
argument_list|(
name|query
argument_list|)
expr_stmt|;
name|r
operator|=
operator|(
name|String
operator|)
name|result
operator|.
name|getResource
argument_list|(
literal|0
argument_list|)
operator|.
name|getContent
argument_list|()
expr_stmt|;
name|assertEquals
argument_list|(
literal|"<root/>"
argument_list|,
name|r
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Ignore
annotation|@
name|Test
specifier|public
name|void
name|utilEval1
parameter_list|()
throws|throws
name|XPathException
throws|,
name|XMLDBException
block|{
name|String
name|query
init|=
literal|"<a><b/></a>/util:eval('*')"
decl_stmt|;
name|ResourceSet
name|result
init|=
name|existEmbeddedServer
operator|.
name|executeQuery
argument_list|(
name|query
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|result
operator|.
name|getSize
argument_list|()
argument_list|)
expr_stmt|;
block|}
comment|/**      * @see http://sourceforge.net/tracker/index.php?func=detail&aid=1629363&group_id=17691&atid=117691      */
annotation|@
name|Test
specifier|public
name|void
name|utilEval2
parameter_list|()
throws|throws
name|XPathException
throws|,
name|XMLDBException
block|{
name|String
name|query
init|=
literal|"let $context :=<item/> "
operator|+
literal|"return util:eval(\"<result>{$context}</result>\")"
decl_stmt|;
comment|// TODO check result
name|ResourceSet
name|result
init|=
name|existEmbeddedServer
operator|.
name|executeQuery
argument_list|(
name|query
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|result
operator|.
name|getSize
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|utilEvalForFunction
parameter_list|()
throws|throws
name|XPathException
throws|,
name|XMLDBException
block|{
name|String
name|query
init|=
literal|"declare function local:home()\n"
operator|+
literal|"{\n"
operator|+
literal|"<b>HOME</b>\n"
operator|+
literal|"};\n"
operator|+
literal|"util:eval(\"local:home()\")\n"
decl_stmt|;
name|ResourceSet
name|result
init|=
name|existEmbeddedServer
operator|.
name|executeQuery
argument_list|(
name|query
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|result
operator|.
name|getSize
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|sharedLock
parameter_list|()
throws|throws
name|XPathException
throws|,
name|XMLDBException
block|{
name|String
name|query
init|=
literal|"let $query1 := (<a/>)\n"
operator|+
literal|"let $query2 := (2, 3)\n"
operator|+
literal|"let $a := util:shared-lock(//*,($query1, $query2))\n"
operator|+
literal|"return $a"
decl_stmt|;
name|ResourceSet
name|result
init|=
name|existEmbeddedServer
operator|.
name|executeQuery
argument_list|(
name|query
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|3
argument_list|,
name|result
operator|.
name|getSize
argument_list|()
argument_list|)
expr_stmt|;
name|String
name|r
init|=
operator|(
name|String
operator|)
name|result
operator|.
name|getResource
argument_list|(
literal|0
argument_list|)
operator|.
name|getContent
argument_list|()
decl_stmt|;
name|assertEquals
argument_list|(
literal|"<a/>"
argument_list|,
name|r
argument_list|)
expr_stmt|;
name|r
operator|=
operator|(
name|String
operator|)
name|result
operator|.
name|getResource
argument_list|(
literal|1
argument_list|)
operator|.
name|getContent
argument_list|()
expr_stmt|;
name|assertEquals
argument_list|(
literal|"2"
argument_list|,
name|r
argument_list|)
expr_stmt|;
name|r
operator|=
operator|(
name|String
operator|)
name|result
operator|.
name|getResource
argument_list|(
literal|2
argument_list|)
operator|.
name|getContent
argument_list|()
expr_stmt|;
name|assertEquals
argument_list|(
literal|"3"
argument_list|,
name|r
argument_list|)
expr_stmt|;
name|query
operator|=
literal|"let $query1 := (<a/>)\n"
operator|+
literal|"let $query2 := (2, 3)\n"
operator|+
literal|"let $a := util:shared-lock((),($query1, $query2))\n"
operator|+
literal|"return $a"
expr_stmt|;
name|result
operator|=
name|existEmbeddedServer
operator|.
name|executeQuery
argument_list|(
name|query
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|3
argument_list|,
name|result
operator|.
name|getSize
argument_list|()
argument_list|)
expr_stmt|;
name|r
operator|=
operator|(
name|String
operator|)
name|result
operator|.
name|getResource
argument_list|(
literal|0
argument_list|)
operator|.
name|getContent
argument_list|()
expr_stmt|;
name|assertEquals
argument_list|(
literal|"<a/>"
argument_list|,
name|r
argument_list|)
expr_stmt|;
name|r
operator|=
operator|(
name|String
operator|)
name|result
operator|.
name|getResource
argument_list|(
literal|1
argument_list|)
operator|.
name|getContent
argument_list|()
expr_stmt|;
name|assertEquals
argument_list|(
literal|"2"
argument_list|,
name|r
argument_list|)
expr_stmt|;
name|r
operator|=
operator|(
name|String
operator|)
name|result
operator|.
name|getResource
argument_list|(
literal|2
argument_list|)
operator|.
name|getContent
argument_list|()
expr_stmt|;
name|assertEquals
argument_list|(
literal|"3"
argument_list|,
name|r
argument_list|)
expr_stmt|;
name|query
operator|=
literal|"let $query1 := (<a/>)\n"
operator|+
literal|"let $query2 := (2, 3)\n"
operator|+
literal|"let $a := util:shared-lock((),($query1, $query2))\n"
operator|+
literal|"return $a"
expr_stmt|;
name|result
operator|=
name|existEmbeddedServer
operator|.
name|executeQuery
argument_list|(
name|query
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|3
argument_list|,
name|result
operator|.
name|getSize
argument_list|()
argument_list|)
expr_stmt|;
name|r
operator|=
operator|(
name|String
operator|)
name|result
operator|.
name|getResource
argument_list|(
literal|0
argument_list|)
operator|.
name|getContent
argument_list|()
expr_stmt|;
name|assertEquals
argument_list|(
literal|"<a/>"
argument_list|,
name|r
argument_list|)
expr_stmt|;
name|r
operator|=
operator|(
name|String
operator|)
name|result
operator|.
name|getResource
argument_list|(
literal|1
argument_list|)
operator|.
name|getContent
argument_list|()
expr_stmt|;
name|assertEquals
argument_list|(
literal|"2"
argument_list|,
name|r
argument_list|)
expr_stmt|;
name|r
operator|=
operator|(
name|String
operator|)
name|result
operator|.
name|getResource
argument_list|(
literal|2
argument_list|)
operator|.
name|getContent
argument_list|()
expr_stmt|;
name|assertEquals
argument_list|(
literal|"3"
argument_list|,
name|r
argument_list|)
expr_stmt|;
name|query
operator|=
literal|"let $a := util:shared-lock(//*,<root/>)\n"
operator|+
literal|"return $a"
expr_stmt|;
name|result
operator|=
name|existEmbeddedServer
operator|.
name|executeQuery
argument_list|(
name|query
argument_list|)
expr_stmt|;
name|r
operator|=
operator|(
name|String
operator|)
name|result
operator|.
name|getResource
argument_list|(
literal|0
argument_list|)
operator|.
name|getContent
argument_list|()
expr_stmt|;
name|assertEquals
argument_list|(
literal|"<root/>"
argument_list|,
name|r
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|encodeForURI
parameter_list|()
throws|throws
name|XMLDBException
block|{
name|String
name|string
init|=
literal|"http://www.example.com/00/Weather/CA/Los%20Angeles#ocean"
decl_stmt|;
name|String
name|expected
init|=
literal|"http%3A%2F%2Fwww.example.com%2F00%2FWeather%2FCA%2FLos%2520Angeles%23ocean"
decl_stmt|;
name|String
name|query
init|=
literal|"encode-for-uri(\""
operator|+
name|string
operator|+
literal|"\")"
decl_stmt|;
name|ResourceSet
name|result
init|=
name|existEmbeddedServer
operator|.
name|executeQuery
argument_list|(
name|query
argument_list|)
decl_stmt|;
name|String
name|r
init|=
operator|(
name|String
operator|)
name|result
operator|.
name|getResource
argument_list|(
literal|0
argument_list|)
operator|.
name|getContent
argument_list|()
decl_stmt|;
name|assertEquals
argument_list|(
name|expected
argument_list|,
name|r
argument_list|)
expr_stmt|;
name|string
operator|=
literal|"~b\u00e9b\u00e9"
expr_stmt|;
name|expected
operator|=
literal|"~b%C3%A9b%C3%A9"
expr_stmt|;
name|query
operator|=
literal|"encode-for-uri(\""
operator|+
name|string
operator|+
literal|"\")"
expr_stmt|;
name|result
operator|=
name|existEmbeddedServer
operator|.
name|executeQuery
argument_list|(
name|query
argument_list|)
expr_stmt|;
name|r
operator|=
operator|(
name|String
operator|)
name|result
operator|.
name|getResource
argument_list|(
literal|0
argument_list|)
operator|.
name|getContent
argument_list|()
expr_stmt|;
name|assertEquals
argument_list|(
name|expected
argument_list|,
name|r
argument_list|)
expr_stmt|;
name|string
operator|=
literal|"100% organic"
expr_stmt|;
name|expected
operator|=
literal|"100%25%20organic"
expr_stmt|;
name|query
operator|=
literal|"encode-for-uri(\""
operator|+
name|string
operator|+
literal|"\")"
expr_stmt|;
name|result
operator|=
name|existEmbeddedServer
operator|.
name|executeQuery
argument_list|(
name|query
argument_list|)
expr_stmt|;
name|r
operator|=
operator|(
name|String
operator|)
name|result
operator|.
name|getResource
argument_list|(
literal|0
argument_list|)
operator|.
name|getContent
argument_list|()
expr_stmt|;
name|assertEquals
argument_list|(
name|expected
argument_list|,
name|r
argument_list|)
expr_stmt|;
name|query
operator|=
literal|"let $a :=<a><b>-1</b><b>-2</b></a> "
operator|+
literal|"return $a/b[encode-for-uri(.) ne '']"
expr_stmt|;
name|result
operator|=
name|existEmbeddedServer
operator|.
name|executeQuery
argument_list|(
name|query
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|result
operator|.
name|getSize
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|iriToURI
parameter_list|()
throws|throws
name|XMLDBException
block|{
name|String
name|string
init|=
literal|"http://www.example.com/00/Weather/CA/Los%20Angeles#ocean"
decl_stmt|;
name|String
name|expected
init|=
literal|"http://www.example.com/00/Weather/CA/Los%20Angeles#ocean"
decl_stmt|;
name|String
name|query
init|=
literal|"iri-to-uri(\""
operator|+
name|string
operator|+
literal|"\")"
decl_stmt|;
name|ResourceSet
name|result
init|=
name|existEmbeddedServer
operator|.
name|executeQuery
argument_list|(
name|query
argument_list|)
decl_stmt|;
name|String
name|r
init|=
operator|(
name|String
operator|)
name|result
operator|.
name|getResource
argument_list|(
literal|0
argument_list|)
operator|.
name|getContent
argument_list|()
decl_stmt|;
name|assertEquals
argument_list|(
name|expected
argument_list|,
name|r
argument_list|)
expr_stmt|;
name|string
operator|=
literal|"http://www.example.com/~b\u00e9b\u00e9"
expr_stmt|;
name|expected
operator|=
literal|"http://www.example.com/~b%C3%A9b%C3%A9"
expr_stmt|;
name|query
operator|=
literal|"iri-to-uri(\""
operator|+
name|string
operator|+
literal|"\")"
expr_stmt|;
name|result
operator|=
name|existEmbeddedServer
operator|.
name|executeQuery
argument_list|(
name|query
argument_list|)
expr_stmt|;
name|r
operator|=
operator|(
name|String
operator|)
name|result
operator|.
name|getResource
argument_list|(
literal|0
argument_list|)
operator|.
name|getContent
argument_list|()
expr_stmt|;
name|assertEquals
argument_list|(
name|expected
argument_list|,
name|r
argument_list|)
expr_stmt|;
name|string
operator|=
literal|"$"
expr_stmt|;
name|expected
operator|=
literal|"$"
expr_stmt|;
name|query
operator|=
literal|"iri-to-uri(\""
operator|+
name|string
operator|+
literal|"\")"
expr_stmt|;
name|result
operator|=
name|existEmbeddedServer
operator|.
name|executeQuery
argument_list|(
name|query
argument_list|)
expr_stmt|;
name|r
operator|=
operator|(
name|String
operator|)
name|result
operator|.
name|getResource
argument_list|(
literal|0
argument_list|)
operator|.
name|getContent
argument_list|()
expr_stmt|;
name|assertEquals
argument_list|(
name|expected
argument_list|,
name|r
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|escapeHTMLURI
parameter_list|()
throws|throws
name|XMLDBException
block|{
name|String
name|string
init|=
literal|"http://www.example.com/00/Weather/CA/Los Angeles#ocean"
decl_stmt|;
name|String
name|expected
init|=
literal|"http://www.example.com/00/Weather/CA/Los Angeles#ocean"
decl_stmt|;
name|String
name|query
init|=
literal|"escape-html-uri(\""
operator|+
name|string
operator|+
literal|"\")"
decl_stmt|;
name|ResourceSet
name|result
init|=
name|existEmbeddedServer
operator|.
name|executeQuery
argument_list|(
name|query
argument_list|)
decl_stmt|;
name|String
name|r
init|=
operator|(
name|String
operator|)
name|result
operator|.
name|getResource
argument_list|(
literal|0
argument_list|)
operator|.
name|getContent
argument_list|()
decl_stmt|;
name|assertEquals
argument_list|(
name|expected
argument_list|,
name|r
argument_list|)
expr_stmt|;
name|string
operator|=
literal|"javascript:if (navigator.browserLanguage == 'fr') window.open('http://www.example.com/~b\u00e9b\u00e9');"
expr_stmt|;
name|expected
operator|=
literal|"javascript:if (navigator.browserLanguage == 'fr') window.open('http://www.example.com/~b%C3%A9b%C3%A9');"
expr_stmt|;
name|query
operator|=
literal|"escape-html-uri(\""
operator|+
name|string
operator|+
literal|"\")"
expr_stmt|;
name|result
operator|=
name|existEmbeddedServer
operator|.
name|executeQuery
argument_list|(
name|query
argument_list|)
expr_stmt|;
name|r
operator|=
operator|(
name|String
operator|)
name|result
operator|.
name|getResource
argument_list|(
literal|0
argument_list|)
operator|.
name|getContent
argument_list|()
expr_stmt|;
name|assertEquals
argument_list|(
name|expected
argument_list|,
name|r
argument_list|)
expr_stmt|;
name|query
operator|=
literal|"escape-html-uri('$')"
expr_stmt|;
name|result
operator|=
name|existEmbeddedServer
operator|.
name|executeQuery
argument_list|(
name|query
argument_list|)
expr_stmt|;
name|r
operator|=
operator|(
name|String
operator|)
name|result
operator|.
name|getResource
argument_list|(
literal|0
argument_list|)
operator|.
name|getContent
argument_list|()
expr_stmt|;
name|assertEquals
argument_list|(
literal|"$"
argument_list|,
name|r
argument_list|)
expr_stmt|;
name|query
operator|=
literal|"let $a :=<a><b>-1</b><b>-2</b></a> "
operator|+
literal|"return $a/b[escape-html-uri(.) ne '']"
expr_stmt|;
name|result
operator|=
name|existEmbeddedServer
operator|.
name|executeQuery
argument_list|(
name|query
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|result
operator|.
name|getSize
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|localName
parameter_list|()
throws|throws
name|XPathException
throws|,
name|XMLDBException
block|{
specifier|final
name|ResourceSet
name|result
init|=
name|existEmbeddedServer
operator|.
name|executeQuery
argument_list|(
literal|"let $a :=<a><b></b></a>"
operator|+
literal|"return fn:local-name($a)"
argument_list|)
decl_stmt|;
name|String
name|r
init|=
operator|(
name|String
operator|)
name|result
operator|.
name|getResource
argument_list|(
literal|0
argument_list|)
operator|.
name|getContent
argument_list|()
decl_stmt|;
name|assertEquals
argument_list|(
literal|"a"
argument_list|,
name|r
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|localName_empty
parameter_list|()
throws|throws
name|XPathException
throws|,
name|XMLDBException
block|{
specifier|final
name|ResourceSet
name|result
init|=
name|existEmbeddedServer
operator|.
name|executeQuery
argument_list|(
literal|"fn:local-name(())"
argument_list|)
decl_stmt|;
specifier|final
name|String
name|r
init|=
operator|(
name|String
operator|)
name|result
operator|.
name|getResource
argument_list|(
literal|0
argument_list|)
operator|.
name|getContent
argument_list|()
decl_stmt|;
name|assertEquals
argument_list|(
literal|""
argument_list|,
name|r
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|localName_emptyElement
parameter_list|()
throws|throws
name|XPathException
throws|,
name|XMLDBException
block|{
specifier|final
name|ResourceSet
name|result
init|=
name|existEmbeddedServer
operator|.
name|executeQuery
argument_list|(
literal|"<a>b</a>/fn:local-name(c)"
argument_list|)
decl_stmt|;
specifier|final
name|String
name|r
init|=
operator|(
name|String
operator|)
name|result
operator|.
name|getResource
argument_list|(
literal|0
argument_list|)
operator|.
name|getContent
argument_list|()
decl_stmt|;
name|assertEquals
argument_list|(
literal|""
argument_list|,
name|r
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|localName_emptyText
parameter_list|()
throws|throws
name|XPathException
throws|,
name|XMLDBException
block|{
specifier|final
name|ResourceSet
name|result
init|=
name|existEmbeddedServer
operator|.
name|executeQuery
argument_list|(
literal|"<a>b</a>/fn:local-name(text())"
argument_list|)
decl_stmt|;
specifier|final
name|String
name|r
init|=
operator|(
name|String
operator|)
name|result
operator|.
name|getResource
argument_list|(
literal|0
argument_list|)
operator|.
name|getContent
argument_list|()
decl_stmt|;
name|assertEquals
argument_list|(
literal|""
argument_list|,
name|r
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|localName_contextItem
parameter_list|()
throws|throws
name|XPathException
throws|,
name|XMLDBException
block|{
specifier|final
name|ResourceSet
name|result
init|=
name|existEmbeddedServer
operator|.
name|executeQuery
argument_list|(
literal|"let $a :=<a><b/></a>"
operator|+
literal|"return $a/b/fn:local-name()"
argument_list|)
decl_stmt|;
specifier|final
name|String
name|r
init|=
operator|(
name|String
operator|)
name|result
operator|.
name|getResource
argument_list|(
literal|0
argument_list|)
operator|.
name|getContent
argument_list|()
decl_stmt|;
name|assertEquals
argument_list|(
literal|"b"
argument_list|,
name|r
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|localName_contextItem_empty
parameter_list|()
throws|throws
name|XPathException
throws|,
name|XMLDBException
block|{
specifier|final
name|ResourceSet
name|result
init|=
name|existEmbeddedServer
operator|.
name|executeQuery
argument_list|(
literal|"let $a :=<a><b/></a>"
operator|+
literal|"return $a/b/c/fn:local-name()"
argument_list|)
decl_stmt|;
specifier|final
name|String
name|r
init|=
operator|(
name|String
operator|)
name|result
operator|.
name|getResource
argument_list|(
literal|0
argument_list|)
operator|.
name|getContent
argument_list|()
decl_stmt|;
name|assertEquals
argument_list|(
literal|""
argument_list|,
name|r
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|name
parameter_list|()
throws|throws
name|XPathException
throws|,
name|XMLDBException
block|{
specifier|final
name|ResourceSet
name|result
init|=
name|existEmbeddedServer
operator|.
name|executeQuery
argument_list|(
literal|"let $a :=<a><b></b></a>"
operator|+
literal|"return fn:name($a)"
argument_list|)
decl_stmt|;
name|String
name|r
init|=
operator|(
name|String
operator|)
name|result
operator|.
name|getResource
argument_list|(
literal|0
argument_list|)
operator|.
name|getContent
argument_list|()
decl_stmt|;
name|assertEquals
argument_list|(
literal|"a"
argument_list|,
name|r
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|name_empty
parameter_list|()
throws|throws
name|XPathException
throws|,
name|XMLDBException
block|{
specifier|final
name|ResourceSet
name|result
init|=
name|existEmbeddedServer
operator|.
name|executeQuery
argument_list|(
literal|"fn:name(())"
argument_list|)
decl_stmt|;
specifier|final
name|String
name|r
init|=
operator|(
name|String
operator|)
name|result
operator|.
name|getResource
argument_list|(
literal|0
argument_list|)
operator|.
name|getContent
argument_list|()
decl_stmt|;
name|assertEquals
argument_list|(
literal|""
argument_list|,
name|r
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|name_emptyElement
parameter_list|()
throws|throws
name|XPathException
throws|,
name|XMLDBException
block|{
specifier|final
name|ResourceSet
name|result
init|=
name|existEmbeddedServer
operator|.
name|executeQuery
argument_list|(
literal|"<a>b</a>/fn:name(c)"
argument_list|)
decl_stmt|;
specifier|final
name|String
name|r
init|=
operator|(
name|String
operator|)
name|result
operator|.
name|getResource
argument_list|(
literal|0
argument_list|)
operator|.
name|getContent
argument_list|()
decl_stmt|;
name|assertEquals
argument_list|(
literal|""
argument_list|,
name|r
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|name_emptyText
parameter_list|()
throws|throws
name|XPathException
throws|,
name|XMLDBException
block|{
specifier|final
name|ResourceSet
name|result
init|=
name|existEmbeddedServer
operator|.
name|executeQuery
argument_list|(
literal|"<a>b</a>/fn:local-name(text())"
argument_list|)
decl_stmt|;
specifier|final
name|String
name|r
init|=
operator|(
name|String
operator|)
name|result
operator|.
name|getResource
argument_list|(
literal|0
argument_list|)
operator|.
name|getContent
argument_list|()
decl_stmt|;
name|assertEquals
argument_list|(
literal|""
argument_list|,
name|r
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|name_contextItem
parameter_list|()
throws|throws
name|XPathException
throws|,
name|XMLDBException
block|{
specifier|final
name|ResourceSet
name|result
init|=
name|existEmbeddedServer
operator|.
name|executeQuery
argument_list|(
literal|"let $a :=<a><b/></a>"
operator|+
literal|"return $a/b/fn:name()"
argument_list|)
decl_stmt|;
specifier|final
name|String
name|r
init|=
operator|(
name|String
operator|)
name|result
operator|.
name|getResource
argument_list|(
literal|0
argument_list|)
operator|.
name|getContent
argument_list|()
decl_stmt|;
name|assertEquals
argument_list|(
literal|"b"
argument_list|,
name|r
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|name_contextItem_empty
parameter_list|()
throws|throws
name|XPathException
throws|,
name|XMLDBException
block|{
specifier|final
name|ResourceSet
name|result
init|=
name|existEmbeddedServer
operator|.
name|executeQuery
argument_list|(
literal|"let $a :=<a><b/></a>"
operator|+
literal|"return $a/b/c/fn:name()"
argument_list|)
decl_stmt|;
specifier|final
name|String
name|r
init|=
operator|(
name|String
operator|)
name|result
operator|.
name|getResource
argument_list|(
literal|0
argument_list|)
operator|.
name|getContent
argument_list|()
decl_stmt|;
name|assertEquals
argument_list|(
literal|""
argument_list|,
name|r
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|dateTimeConstructor
parameter_list|()
throws|throws
name|XPathException
throws|,
name|XMLDBException
block|{
name|ResourceSet
name|result
init|=
name|existEmbeddedServer
operator|.
name|executeQuery
argument_list|(
literal|"let $date := xs:date('2007-05-02+02:00') "
operator|+
literal|"return dateTime($date, xs:time('15:12:52.421+02:00'))"
argument_list|)
decl_stmt|;
name|String
name|r
init|=
operator|(
name|String
operator|)
name|result
operator|.
name|getResource
argument_list|(
literal|0
argument_list|)
operator|.
name|getContent
argument_list|()
decl_stmt|;
name|assertEquals
argument_list|(
literal|"2007-05-02T15:12:52.421+02:00"
argument_list|,
name|r
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|currentDateTime
parameter_list|()
throws|throws
name|XPathException
throws|,
name|XMLDBException
block|{
comment|//Do not use this test around midnight on the last day of a month ;-)
name|ResourceSet
name|result
init|=
name|existEmbeddedServer
operator|.
name|executeQuery
argument_list|(
literal|"('Jan', 'Feb', 'Mar', 'Apr', 'May', 'Jun', 'Jul', 'Aug', 'Sep', "
operator|+
literal|"'Oct', 'Nov', 'Dec')[month-from-dateTime(current-dateTime())]"
argument_list|)
decl_stmt|;
name|String
name|r
init|=
operator|(
name|String
operator|)
name|result
operator|.
name|getResource
argument_list|(
literal|0
argument_list|)
operator|.
name|getContent
argument_list|()
decl_stmt|;
name|SimpleDateFormat
name|df
init|=
operator|new
name|SimpleDateFormat
argument_list|(
literal|"MMM"
argument_list|,
operator|new
name|Locale
argument_list|(
literal|"en"
argument_list|,
literal|"US"
argument_list|)
argument_list|)
decl_stmt|;
name|Date
name|date
init|=
operator|new
name|Date
argument_list|()
decl_stmt|;
name|assertEquals
argument_list|(
name|df
operator|.
name|format
argument_list|(
name|date
argument_list|)
argument_list|,
name|r
argument_list|)
expr_stmt|;
name|String
name|query
init|=
literal|"declare option exist:current-dateTime '2007-08-23T00:01:02.062+02:00';"
operator|+
literal|"current-dateTime()"
decl_stmt|;
name|result
operator|=
name|existEmbeddedServer
operator|.
name|executeQuery
argument_list|(
name|query
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|result
operator|.
name|getSize
argument_list|()
argument_list|)
expr_stmt|;
name|r
operator|=
operator|(
name|String
operator|)
name|result
operator|.
name|getResource
argument_list|(
literal|0
argument_list|)
operator|.
name|getContent
argument_list|()
expr_stmt|;
name|assertEquals
argument_list|(
literal|"2007-08-23T00:01:02.062+02:00"
argument_list|,
name|r
argument_list|)
expr_stmt|;
block|}
comment|/**      * Bugfix 3070      *      * @see http://svn.sourceforge.net/exist/?rev=3070&view=rev      *<p/>      * seconds-from-dateTime() returned wrong value when dateTime had      * no millesecs available. Special value was returned.      */
annotation|@
name|Test
specifier|public
name|void
name|secondsFromDateTime
parameter_list|()
throws|throws
name|XMLDBException
block|{
name|ResourceSet
name|result
init|=
name|existEmbeddedServer
operator|.
name|executeQuery
argument_list|(
literal|"seconds-from-dateTime(xs:dateTime(\"2005-12-22T13:35:21.000\") )"
argument_list|)
decl_stmt|;
name|String
name|r
init|=
operator|(
name|String
operator|)
name|result
operator|.
name|getResource
argument_list|(
literal|0
argument_list|)
operator|.
name|getContent
argument_list|()
decl_stmt|;
name|assertEquals
argument_list|(
literal|"21"
argument_list|,
name|r
argument_list|)
expr_stmt|;
name|result
operator|=
name|existEmbeddedServer
operator|.
name|executeQuery
argument_list|(
literal|"seconds-from-dateTime(xs:dateTime(\"2005-12-22T13:35:21\") )"
argument_list|)
expr_stmt|;
name|r
operator|=
operator|(
name|String
operator|)
name|result
operator|.
name|getResource
argument_list|(
literal|0
argument_list|)
operator|.
name|getContent
argument_list|()
expr_stmt|;
name|assertEquals
argument_list|(
literal|"21"
argument_list|,
name|r
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|resolveQName
parameter_list|()
throws|throws
name|XMLDBException
block|{
name|String
name|query
init|=
literal|"declare namespace a=\"aes\"; "
operator|+
literal|"declare namespace n=\"ns1\"; "
operator|+
literal|"declare variable $d :=<c xmlns:x=\"ns1\"><d>x:test</d></c>; "
operator|+
literal|"for $e in $d/d "
operator|+
literal|"return fn:resolve-QName($e/text(), $e)"
decl_stmt|;
name|ResourceSet
name|result
init|=
name|existEmbeddedServer
operator|.
name|executeQuery
argument_list|(
name|query
argument_list|)
decl_stmt|;
name|String
name|r
init|=
operator|(
name|String
operator|)
name|result
operator|.
name|getResource
argument_list|(
literal|0
argument_list|)
operator|.
name|getContent
argument_list|()
decl_stmt|;
name|assertEquals
argument_list|(
literal|"x:test"
argument_list|,
name|r
argument_list|)
expr_stmt|;
name|query
operator|=
literal|"declare namespace a=\"aes\"; "
operator|+
literal|"declare namespace n=\"ns1\"; "
operator|+
literal|"declare variable $d :=<c xmlns:x=\"ns1\"><d xmlns:y=\"ns1\">y:test</d></c>; "
operator|+
literal|"for $e in $d/d "
operator|+
literal|"return fn:resolve-QName($e/text(), $e)"
expr_stmt|;
name|result
operator|=
name|existEmbeddedServer
operator|.
name|executeQuery
argument_list|(
name|query
argument_list|)
expr_stmt|;
name|r
operator|=
operator|(
name|String
operator|)
name|result
operator|.
name|getResource
argument_list|(
literal|0
argument_list|)
operator|.
name|getContent
argument_list|()
expr_stmt|;
name|assertEquals
argument_list|(
literal|"y:test"
argument_list|,
name|r
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|namespaceURI
parameter_list|()
throws|throws
name|XMLDBException
block|{
name|String
name|query
init|=
literal|"let $var :=<a xmlns='aaa'/> "
operator|+
literal|"return "
operator|+
literal|"$var[fn:namespace-uri() = 'aaa']/fn:namespace-uri()"
decl_stmt|;
name|ResourceSet
name|result
init|=
name|existEmbeddedServer
operator|.
name|executeQuery
argument_list|(
name|query
argument_list|)
decl_stmt|;
name|String
name|r
init|=
operator|(
name|String
operator|)
name|result
operator|.
name|getResource
argument_list|(
literal|0
argument_list|)
operator|.
name|getContent
argument_list|()
decl_stmt|;
name|assertEquals
argument_list|(
literal|"aaa"
argument_list|,
name|r
argument_list|)
expr_stmt|;
name|query
operator|=
literal|"for $a in<test><a xmlns=\"aaa\"><b><c/></b></a></test>//* "
operator|+
literal|"return namespace-uri($a)"
expr_stmt|;
name|result
operator|=
name|existEmbeddedServer
operator|.
name|executeQuery
argument_list|(
name|query
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|result
operator|.
name|getSize
argument_list|()
argument_list|,
literal|3
argument_list|)
expr_stmt|;
name|r
operator|=
operator|(
name|String
operator|)
name|result
operator|.
name|getResource
argument_list|(
literal|0
argument_list|)
operator|.
name|getContent
argument_list|()
expr_stmt|;
name|assertEquals
argument_list|(
literal|"aaa"
argument_list|,
name|r
argument_list|)
expr_stmt|;
name|r
operator|=
operator|(
name|String
operator|)
name|result
operator|.
name|getResource
argument_list|(
literal|1
argument_list|)
operator|.
name|getContent
argument_list|()
expr_stmt|;
name|assertEquals
argument_list|(
literal|"aaa"
argument_list|,
name|r
argument_list|)
expr_stmt|;
name|r
operator|=
operator|(
name|String
operator|)
name|result
operator|.
name|getResource
argument_list|(
literal|2
argument_list|)
operator|.
name|getContent
argument_list|()
expr_stmt|;
name|assertEquals
argument_list|(
literal|"aaa"
argument_list|,
name|r
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|namespaceURI_contextItem
parameter_list|()
throws|throws
name|XPathException
throws|,
name|XMLDBException
block|{
specifier|final
name|ResourceSet
name|result
init|=
name|existEmbeddedServer
operator|.
name|executeQuery
argument_list|(
literal|"let $a :=<a><exist:b/></a>"
operator|+
literal|"return $a/exist:b/fn:namespace-uri()"
argument_list|)
decl_stmt|;
specifier|final
name|String
name|r
init|=
operator|(
name|String
operator|)
name|result
operator|.
name|getResource
argument_list|(
literal|0
argument_list|)
operator|.
name|getContent
argument_list|()
decl_stmt|;
name|assertEquals
argument_list|(
literal|"http://exist.sourceforge.net/NS/exist"
argument_list|,
name|r
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|namespaceURI_contextItem_empty
parameter_list|()
throws|throws
name|XPathException
throws|,
name|XMLDBException
block|{
specifier|final
name|ResourceSet
name|result
init|=
name|existEmbeddedServer
operator|.
name|executeQuery
argument_list|(
literal|"let $a :=<a><b/></a>"
operator|+
literal|"return $a/exist:b/c/fn:namespace-uri()"
argument_list|)
decl_stmt|;
specifier|final
name|String
name|r
init|=
operator|(
name|String
operator|)
name|result
operator|.
name|getResource
argument_list|(
literal|0
argument_list|)
operator|.
name|getContent
argument_list|()
decl_stmt|;
name|assertEquals
argument_list|(
literal|""
argument_list|,
name|r
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|prefixFromQName
parameter_list|()
throws|throws
name|XMLDBException
block|{
name|String
name|query
init|=
literal|"declare namespace foo = \"http://example.org\"; "
operator|+
literal|"declare namespace FOO = \"http://example.org\"; "
operator|+
literal|"fn:prefix-from-QName(xs:QName(\"foo:bar\"))"
decl_stmt|;
name|ResourceSet
name|result
init|=
name|existEmbeddedServer
operator|.
name|executeQuery
argument_list|(
name|query
argument_list|)
decl_stmt|;
name|String
name|r
init|=
operator|(
name|String
operator|)
name|result
operator|.
name|getResource
argument_list|(
literal|0
argument_list|)
operator|.
name|getContent
argument_list|()
decl_stmt|;
name|assertEquals
argument_list|(
literal|"foo"
argument_list|,
name|r
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|stringJoin
parameter_list|()
throws|throws
name|XMLDBException
block|{
name|String
name|query
init|=
literal|"let $s := ('','a','b','') "
operator|+
literal|"return string-join($s,'/')"
decl_stmt|;
name|ResourceSet
name|result
init|=
name|existEmbeddedServer
operator|.
name|executeQuery
argument_list|(
name|query
argument_list|)
decl_stmt|;
name|String
name|r
init|=
operator|(
name|String
operator|)
name|result
operator|.
name|getResource
argument_list|(
literal|0
argument_list|)
operator|.
name|getContent
argument_list|()
decl_stmt|;
name|assertEquals
argument_list|(
literal|"/a/b/"
argument_list|,
name|r
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|nodeName
parameter_list|()
throws|throws
name|XMLDBException
block|{
specifier|final
name|String
name|query
init|=
literal|"let $a :=<a><b>-1</b><b>-2</b></a> "
operator|+
literal|"for $b in $a/b[fn:node-name(.) = xs:QName('b')] return $b"
decl_stmt|;
specifier|final
name|ResourceSet
name|result
init|=
name|existEmbeddedServer
operator|.
name|executeQuery
argument_list|(
name|query
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|result
operator|.
name|getSize
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|noeName_empty
parameter_list|()
throws|throws
name|XPathException
throws|,
name|XMLDBException
block|{
specifier|final
name|ResourceSet
name|result
init|=
name|existEmbeddedServer
operator|.
name|executeQuery
argument_list|(
literal|"fn:node-name(())"
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|result
operator|.
name|getSize
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|nodeName_emptyElement
parameter_list|()
throws|throws
name|XPathException
throws|,
name|XMLDBException
block|{
specifier|final
name|ResourceSet
name|result
init|=
name|existEmbeddedServer
operator|.
name|executeQuery
argument_list|(
literal|"<a>b</a>/fn:node-name(c)"
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|result
operator|.
name|getSize
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|nodeName_emptyText
parameter_list|()
throws|throws
name|XPathException
throws|,
name|XMLDBException
block|{
specifier|final
name|ResourceSet
name|result
init|=
name|existEmbeddedServer
operator|.
name|executeQuery
argument_list|(
literal|"<a>b</a>/fn:node-name(text())"
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|result
operator|.
name|getSize
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|nodeName_contextItem
parameter_list|()
throws|throws
name|XPathException
throws|,
name|XMLDBException
block|{
specifier|final
name|ResourceSet
name|result
init|=
name|existEmbeddedServer
operator|.
name|executeQuery
argument_list|(
literal|"let $a :=<a><b/></a>"
operator|+
literal|"return $a/b/fn:node-name()"
argument_list|)
decl_stmt|;
specifier|final
name|String
name|r
init|=
operator|(
name|String
operator|)
name|result
operator|.
name|getResource
argument_list|(
literal|0
argument_list|)
operator|.
name|getContent
argument_list|()
decl_stmt|;
name|assertEquals
argument_list|(
literal|"b"
argument_list|,
name|r
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|nodeName_contextItem_empty
parameter_list|()
throws|throws
name|XPathException
throws|,
name|XMLDBException
block|{
specifier|final
name|ResourceSet
name|result
init|=
name|existEmbeddedServer
operator|.
name|executeQuery
argument_list|(
literal|"let $a :=<a><b/></a>"
operator|+
literal|"return $a/b/c/fn:node-name()"
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|result
operator|.
name|getSize
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|data0
parameter_list|()
throws|throws
name|XMLDBException
block|{
specifier|final
name|String
name|query
init|=
literal|"let $a :=<a><b>1</b><b>1</b></a> "
operator|+
literal|"for $b in $a/b[data() = '1'] return $b"
decl_stmt|;
specifier|final
name|ResourceSet
name|result
init|=
name|existEmbeddedServer
operator|.
name|executeQuery
argument_list|(
name|query
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|result
operator|.
name|getSize
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|data0_atomization
parameter_list|()
throws|throws
name|XMLDBException
block|{
specifier|final
name|String
name|query
init|=
literal|"(<a>1<b>2</b>three</a>,<four>4</four>)/data()"
decl_stmt|;
specifier|final
name|ResourceSet
name|result
init|=
name|existEmbeddedServer
operator|.
name|executeQuery
argument_list|(
name|query
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|result
operator|.
name|getSize
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"12three"
argument_list|,
name|result
operator|.
name|getResource
argument_list|(
literal|0
argument_list|)
operator|.
name|getContent
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"4"
argument_list|,
name|result
operator|.
name|getResource
argument_list|(
literal|1
argument_list|)
operator|.
name|getContent
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|data1
parameter_list|()
throws|throws
name|XMLDBException
block|{
specifier|final
name|String
name|query
init|=
literal|"let $a :=<a><b>1</b><b>1</b></a> "
operator|+
literal|"for $b in $a/b[data() = '1'] return $b"
decl_stmt|;
specifier|final
name|ResourceSet
name|result
init|=
name|existEmbeddedServer
operator|.
name|executeQuery
argument_list|(
name|query
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|result
operator|.
name|getSize
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|data1_atomization
parameter_list|()
throws|throws
name|XMLDBException
block|{
specifier|final
name|String
name|query
init|=
literal|"data((<a>1<b>2</b>three</a>,<four>4</four>, xs:integer(5)))"
decl_stmt|;
specifier|final
name|ResourceSet
name|result
init|=
name|existEmbeddedServer
operator|.
name|executeQuery
argument_list|(
name|query
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|3
argument_list|,
name|result
operator|.
name|getSize
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"12three"
argument_list|,
name|result
operator|.
name|getResource
argument_list|(
literal|0
argument_list|)
operator|.
name|getContent
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"4"
argument_list|,
name|result
operator|.
name|getResource
argument_list|(
literal|1
argument_list|)
operator|.
name|getContent
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"5"
argument_list|,
name|result
operator|.
name|getResource
argument_list|(
literal|2
argument_list|)
operator|.
name|getContent
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|ceiling
parameter_list|()
throws|throws
name|XMLDBException
block|{
name|String
name|query
init|=
literal|"let $a :=<a><b>-1</b><b>-2</b></a> "
operator|+
literal|"return $a/b[abs(ceiling(.))]"
decl_stmt|;
name|ResourceSet
name|result
init|=
name|existEmbeddedServer
operator|.
name|executeQuery
argument_list|(
name|query
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|result
operator|.
name|getSize
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|concat
parameter_list|()
throws|throws
name|XMLDBException
block|{
name|String
name|query
init|=
literal|"let $a :=<a><b>-1</b><b>-2</b></a> "
operator|+
literal|"return $a/b[concat('+', ., '+') = '+-2+']"
decl_stmt|;
name|ResourceSet
name|result
init|=
name|existEmbeddedServer
operator|.
name|executeQuery
argument_list|(
name|query
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|result
operator|.
name|getSize
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|documentURI
parameter_list|()
throws|throws
name|XMLDBException
block|{
name|String
name|query
init|=
literal|"let $a :=<a><b>-1</b><b>-2</b></a> "
operator|+
literal|"return $a/b[empty(document-uri(.))]"
decl_stmt|;
name|ResourceSet
name|result
init|=
name|existEmbeddedServer
operator|.
name|executeQuery
argument_list|(
name|query
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|result
operator|.
name|getSize
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|implicitTimezone
parameter_list|()
throws|throws
name|XMLDBException
block|{
name|String
name|query
init|=
literal|"declare option exist:implicit-timezone 'PT3H';"
operator|+
literal|"implicit-timezone()"
decl_stmt|;
name|ResourceSet
name|result
init|=
name|existEmbeddedServer
operator|.
name|executeQuery
argument_list|(
name|query
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|result
operator|.
name|getSize
argument_list|()
argument_list|)
expr_stmt|;
name|String
name|r
init|=
operator|(
name|String
operator|)
name|result
operator|.
name|getResource
argument_list|(
literal|0
argument_list|)
operator|.
name|getContent
argument_list|()
decl_stmt|;
name|assertEquals
argument_list|(
literal|"PT3H"
argument_list|,
name|r
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|exists
parameter_list|()
throws|throws
name|XMLDBException
block|{
name|String
name|query
init|=
literal|"let $a :=<a><b>-1</b><b>-2</b></a> "
operator|+
literal|"return $a/b[exists(.)]"
decl_stmt|;
name|ResourceSet
name|result
init|=
name|existEmbeddedServer
operator|.
name|executeQuery
argument_list|(
name|query
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|result
operator|.
name|getSize
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|floor
parameter_list|()
throws|throws
name|XMLDBException
block|{
name|String
name|query
init|=
literal|"let $a :=<a><b>-1</b><b>-2</b></a> "
operator|+
literal|"return $a/b[abs(floor(.))]"
decl_stmt|;
name|ResourceSet
name|result
init|=
name|existEmbeddedServer
operator|.
name|executeQuery
argument_list|(
name|query
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|result
operator|.
name|getSize
argument_list|()
argument_list|)
expr_stmt|;
block|}
comment|/**      * ensure the test collection is removed and call collection-available,      * which should return false, no exception thrown      */
annotation|@
name|Test
specifier|public
name|void
name|collectionAvailable1
parameter_list|()
throws|throws
name|XMLDBException
block|{
comment|//remove the test collection if it already exists
name|String
name|collectionName
init|=
literal|"testCollectionAvailable"
decl_stmt|;
name|String
name|collectionPath
init|=
name|XmldbURI
operator|.
name|ROOT_COLLECTION
operator|+
literal|"/"
operator|+
name|collectionName
decl_stmt|;
name|String
name|collectionURI
init|=
name|ROOT_COLLECTION_URI
operator|+
literal|"/"
operator|+
name|collectionName
decl_stmt|;
name|Collection
name|testCollection
init|=
name|existEmbeddedServer
operator|.
name|getRoot
argument_list|()
operator|.
name|getChildCollection
argument_list|(
name|collectionName
argument_list|)
decl_stmt|;
if|if
condition|(
name|testCollection
operator|!=
literal|null
condition|)
block|{
name|CollectionManagementService
name|cms
init|=
operator|(
name|CollectionManagementService
operator|)
name|existEmbeddedServer
operator|.
name|getRoot
argument_list|()
operator|.
name|getService
argument_list|(
literal|"CollectionManagementService"
argument_list|,
literal|"1.0"
argument_list|)
decl_stmt|;
name|cms
operator|.
name|removeCollection
argument_list|(
name|collectionPath
argument_list|)
expr_stmt|;
block|}
name|runCollectionAvailableTest
argument_list|(
name|collectionPath
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|runCollectionAvailableTest
argument_list|(
name|collectionURI
argument_list|,
literal|false
argument_list|)
expr_stmt|;
block|}
comment|/**      * create a collection and call collection-available, which should return true,      * no exception thrown      */
annotation|@
name|Test
specifier|public
name|void
name|collectionAvailable2
parameter_list|()
throws|throws
name|XMLDBException
block|{
comment|//add the test collection
name|String
name|collectionName
init|=
literal|"testCollectionAvailable"
decl_stmt|;
name|String
name|collectionPath
init|=
name|XmldbURI
operator|.
name|ROOT_COLLECTION
operator|+
literal|"/"
operator|+
name|collectionName
decl_stmt|;
name|String
name|collectionURI
init|=
name|ROOT_COLLECTION_URI
operator|+
literal|"/"
operator|+
name|collectionName
decl_stmt|;
name|Collection
name|testCollection
init|=
name|existEmbeddedServer
operator|.
name|getRoot
argument_list|()
operator|.
name|getChildCollection
argument_list|(
name|collectionName
argument_list|)
decl_stmt|;
if|if
condition|(
name|testCollection
operator|==
literal|null
condition|)
block|{
name|CollectionManagementService
name|cms
init|=
operator|(
name|CollectionManagementService
operator|)
name|existEmbeddedServer
operator|.
name|getRoot
argument_list|()
operator|.
name|getService
argument_list|(
literal|"CollectionManagementService"
argument_list|,
literal|"1.0"
argument_list|)
decl_stmt|;
name|cms
operator|.
name|createCollection
argument_list|(
name|collectionPath
argument_list|)
expr_stmt|;
block|}
name|runCollectionAvailableTest
argument_list|(
name|collectionPath
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|runCollectionAvailableTest
argument_list|(
name|collectionURI
argument_list|,
literal|true
argument_list|)
expr_stmt|;
block|}
specifier|private
name|void
name|runCollectionAvailableTest
parameter_list|(
name|String
name|collectionPath
parameter_list|,
name|boolean
name|expectedResult
parameter_list|)
throws|throws
name|XMLDBException
block|{
comment|//collection-available should not throw an exception and should return expectedResult
name|String
name|importXMLDB
init|=
literal|"import module namespace xdb=\"http://exist-db.org/xquery/xmldb\";\n"
decl_stmt|;
name|String
name|collectionAvailable
init|=
literal|"xdb:collection-available('"
operator|+
name|collectionPath
operator|+
literal|"')"
decl_stmt|;
name|String
name|query
init|=
name|importXMLDB
operator|+
name|collectionAvailable
decl_stmt|;
name|ResourceSet
name|result
init|=
name|existEmbeddedServer
operator|.
name|executeQuery
argument_list|(
name|query
argument_list|)
decl_stmt|;
name|assertNotNull
argument_list|(
name|result
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|result
operator|.
name|getSize
argument_list|()
operator|==
literal|1
argument_list|)
expr_stmt|;
name|assertNotNull
argument_list|(
name|result
operator|.
name|getResource
argument_list|(
literal|0
argument_list|)
argument_list|)
expr_stmt|;
name|String
name|content
init|=
operator|(
name|String
operator|)
name|result
operator|.
name|getResource
argument_list|(
literal|0
argument_list|)
operator|.
name|getContent
argument_list|()
decl_stmt|;
name|assertNotNull
argument_list|(
name|content
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|expectedResult
argument_list|,
name|Boolean
operator|.
name|valueOf
argument_list|(
name|content
argument_list|)
operator|.
name|booleanValue
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|base64BinaryCast
parameter_list|()
throws|throws
name|XMLDBException
block|{
specifier|final
name|String
name|TEST_BINARY_COLLECTION
init|=
literal|"testBinary"
decl_stmt|;
specifier|final
name|String
name|TEST_COLLECTION
init|=
literal|"/db/"
operator|+
name|TEST_BINARY_COLLECTION
decl_stmt|;
specifier|final
name|String
name|BINARY_RESOURCE_FILENAME
init|=
literal|"logo.jpg"
decl_stmt|;
specifier|final
name|String
name|XML_RESOURCE_FILENAME
init|=
literal|"logo.xml"
decl_stmt|;
comment|//create a test collection
name|CollectionManagementService
name|colService
init|=
operator|(
name|CollectionManagementService
operator|)
name|existEmbeddedServer
operator|.
name|getRoot
argument_list|()
operator|.
name|getService
argument_list|(
literal|"CollectionManagementService"
argument_list|,
literal|"1.0"
argument_list|)
decl_stmt|;
name|Collection
name|testCollection
init|=
name|colService
operator|.
name|createCollection
argument_list|(
name|TEST_BINARY_COLLECTION
argument_list|)
decl_stmt|;
name|assertNotNull
argument_list|(
name|testCollection
argument_list|)
expr_stmt|;
name|Optional
argument_list|<
name|Path
argument_list|>
name|home
init|=
name|ConfigurationHelper
operator|.
name|getExistHome
argument_list|()
decl_stmt|;
name|Path
name|fLogo
init|=
name|FileUtils
operator|.
name|resolve
argument_list|(
name|home
argument_list|,
literal|"webapp"
argument_list|)
operator|.
name|resolve
argument_list|(
name|BINARY_RESOURCE_FILENAME
argument_list|)
decl_stmt|;
comment|//store the eXist logo in the test collection
name|BinaryResource
name|br
init|=
operator|(
name|BinaryResource
operator|)
name|testCollection
operator|.
name|createResource
argument_list|(
name|BINARY_RESOURCE_FILENAME
argument_list|,
literal|"BinaryResource"
argument_list|)
decl_stmt|;
name|br
operator|.
name|setContent
argument_list|(
name|fLogo
argument_list|)
expr_stmt|;
name|testCollection
operator|.
name|storeResource
argument_list|(
name|br
argument_list|)
expr_stmt|;
comment|//create an XML resource with the logo base64 embedded in it
name|String
name|queryStore
init|=
literal|"xquery version \"1.0\";\n\n"
operator|+
literal|"let $embedded :=<logo><image>{util:binary-doc(\""
operator|+
name|TEST_COLLECTION
operator|+
literal|"/"
operator|+
name|BINARY_RESOURCE_FILENAME
operator|+
literal|"\")}</image></logo> return\n"
operator|+
literal|"xmldb:store(\""
operator|+
name|TEST_COLLECTION
operator|+
literal|"\", \""
operator|+
name|XML_RESOURCE_FILENAME
operator|+
literal|"\", $embedded)"
decl_stmt|;
name|ResourceSet
name|resultStore
init|=
name|existEmbeddedServer
operator|.
name|executeQuery
argument_list|(
name|queryStore
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|"store, Expect single result"
argument_list|,
literal|1
argument_list|,
name|resultStore
operator|.
name|getSize
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"Expect stored filename as result"
argument_list|,
name|TEST_COLLECTION
operator|+
literal|"/"
operator|+
name|XML_RESOURCE_FILENAME
argument_list|,
name|resultStore
operator|.
name|getResource
argument_list|(
literal|0
argument_list|)
operator|.
name|getContent
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
comment|//retrieve the base64 image from the XML resource and try to cast to xs:base64Binary
name|String
name|queryRetreive
init|=
literal|"xquery version \"1.0\";\n\n"
operator|+
literal|"let $image := doc(\""
operator|+
name|TEST_COLLECTION
operator|+
literal|"/"
operator|+
name|XML_RESOURCE_FILENAME
operator|+
literal|"\")/logo/image return\n"
operator|+
literal|"$image/text() cast as xs:base64Binary"
decl_stmt|;
name|ResourceSet
name|resultRetreive
init|=
name|existEmbeddedServer
operator|.
name|executeQuery
argument_list|(
name|queryRetreive
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|"retreive, Expect single result"
argument_list|,
literal|1
argument_list|,
name|resultRetreive
operator|.
name|getSize
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

