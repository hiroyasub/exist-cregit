begin_unit|revision:1.0.0;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * eXist Open Source Native XML Database  * Copyright (C) 2001-2017 The eXist Project  * http://exist-db.org  *  * This program is free software; you can redistribute it and/or  * modify it under the terms of the GNU Lesser General Public License  * as published by the Free Software Foundation; either version 2  * of the License, or (at your option) any later version.  *  * This program is distributed in the hope that it will be useful,  * but WITHOUT ANY WARRANTY; without even the implied warranty of  * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the  * GNU Lesser General Public License for more details.  *  * You should have received a copy of the GNU Lesser General Public  * License along with this library; if not, write to the Free Software  * Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA  02110-1301  USA  */
end_comment

begin_package
package|package
name|org
operator|.
name|exist
operator|.
name|xquery
package|;
end_package

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|EXistException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|dom
operator|.
name|QName
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|dom
operator|.
name|persistent
operator|.
name|DocumentSet
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|security
operator|.
name|PermissionDeniedException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|storage
operator|.
name|BrokerPool
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|storage
operator|.
name|DBBroker
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|test
operator|.
name|ExistXmldbEmbeddedServer
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|xmldb
operator|.
name|EXistResource
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|xmldb
operator|.
name|XQueryService
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|xquery
operator|.
name|value
operator|.
name|FunctionReference
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|xquery
operator|.
name|value
operator|.
name|Sequence
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|After
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Before
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|ClassRule
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_import
import|import
name|org
operator|.
name|xmldb
operator|.
name|api
operator|.
name|base
operator|.
name|*
import|;
end_import

begin_import
import|import
name|org
operator|.
name|xmldb
operator|.
name|api
operator|.
name|modules
operator|.
name|CollectionManagementService
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Optional
import|;
end_import

begin_import
import|import static
name|junit
operator|.
name|framework
operator|.
name|TestCase
operator|.
name|assertEquals
import|;
end_import

begin_import
import|import static
name|junit
operator|.
name|framework
operator|.
name|TestCase
operator|.
name|assertNull
import|;
end_import

begin_comment
comment|/**  * Test if inline functions and functions defined in imported modules are properly reset.  *  * @author Wolfgang  */
end_comment

begin_class
specifier|public
class|class
name|CleanupTest
block|{
specifier|private
specifier|final
specifier|static
name|String
name|MODULE_NS
init|=
literal|"http://exist-db.org/test"
decl_stmt|;
specifier|private
specifier|final
specifier|static
name|String
name|TEST_MODULE
init|=
literal|"module namespace t=\""
operator|+
name|MODULE_NS
operator|+
literal|"\";"
operator|+
literal|"declare variable $t:VAR := 123;"
operator|+
literal|"declare function t:test($a) { $a };"
operator|+
literal|"declare function t:unused($a) { $a };"
operator|+
literal|"declare function t:inline($a) { function() { $a } };"
decl_stmt|;
specifier|private
specifier|final
specifier|static
name|String
name|TEST_QUERY
init|=
literal|"import module namespace t=\""
operator|+
name|MODULE_NS
operator|+
literal|"\" at "
operator|+
literal|"\"xmldb:exist:///db/test/test-module.xql\";"
operator|+
literal|"t:test('Hello world')"
decl_stmt|;
specifier|private
specifier|final
specifier|static
name|String
name|TEST_INLINE
init|=
literal|"let $a := \"a\"\n"
operator|+
literal|"let $func := function() { $a }\n"
operator|+
literal|"return\n"
operator|+
literal|"   $func"
decl_stmt|;
specifier|private
name|Collection
name|collection
decl_stmt|;
annotation|@
name|ClassRule
specifier|public
specifier|static
specifier|final
name|ExistXmldbEmbeddedServer
name|existEmbeddedServer
init|=
operator|new
name|ExistXmldbEmbeddedServer
argument_list|(
literal|false
argument_list|,
literal|true
argument_list|)
decl_stmt|;
annotation|@
name|Before
specifier|public
name|void
name|setup
parameter_list|()
throws|throws
name|XMLDBException
block|{
specifier|final
name|CollectionManagementService
name|service
init|=
operator|(
name|CollectionManagementService
operator|)
name|existEmbeddedServer
operator|.
name|getRoot
argument_list|()
operator|.
name|getService
argument_list|(
literal|"CollectionManagementService"
argument_list|,
literal|"1.0"
argument_list|)
decl_stmt|;
name|collection
operator|=
name|service
operator|.
name|createCollection
argument_list|(
literal|"test"
argument_list|)
expr_stmt|;
specifier|final
name|Resource
name|doc
init|=
name|collection
operator|.
name|createResource
argument_list|(
literal|"test-module.xql"
argument_list|,
literal|"BinaryResource"
argument_list|)
decl_stmt|;
name|doc
operator|.
name|setContent
argument_list|(
name|TEST_MODULE
argument_list|)
expr_stmt|;
operator|(
operator|(
name|EXistResource
operator|)
name|doc
operator|)
operator|.
name|setMimeType
argument_list|(
literal|"application/xquery"
argument_list|)
expr_stmt|;
name|collection
operator|.
name|storeResource
argument_list|(
name|doc
argument_list|)
expr_stmt|;
block|}
annotation|@
name|After
specifier|public
name|void
name|tearDown
parameter_list|()
throws|throws
name|XMLDBException
block|{
specifier|final
name|CollectionManagementService
name|service
init|=
operator|(
name|CollectionManagementService
operator|)
name|existEmbeddedServer
operator|.
name|getRoot
argument_list|()
operator|.
name|getService
argument_list|(
literal|"CollectionManagementService"
argument_list|,
literal|"1.0"
argument_list|)
decl_stmt|;
name|service
operator|.
name|removeCollection
argument_list|(
literal|"test"
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|resetStateOfUnusedModuleMembers
parameter_list|()
throws|throws
name|XMLDBException
throws|,
name|XPathException
block|{
specifier|final
name|XQueryService
name|service
init|=
operator|(
name|XQueryService
operator|)
name|collection
operator|.
name|getService
argument_list|(
literal|"XQueryService"
argument_list|,
literal|"1.0"
argument_list|)
decl_stmt|;
specifier|final
name|CompiledExpression
name|compiled
init|=
name|service
operator|.
name|compile
argument_list|(
name|TEST_QUERY
argument_list|)
decl_stmt|;
specifier|final
name|Module
name|module
init|=
operator|(
operator|(
name|PathExpr
operator|)
name|compiled
operator|)
operator|.
name|getContext
argument_list|()
operator|.
name|getModule
argument_list|(
name|MODULE_NS
argument_list|)
decl_stmt|;
specifier|final
name|UserDefinedFunction
name|unusedFunc
init|=
operator|(
operator|(
name|ExternalModule
operator|)
name|module
operator|)
operator|.
name|getFunction
argument_list|(
operator|new
name|QName
argument_list|(
literal|"unused"
argument_list|,
name|MODULE_NS
argument_list|,
literal|"t"
argument_list|)
argument_list|,
literal|1
argument_list|,
operator|(
operator|(
name|ExternalModule
operator|)
name|module
operator|)
operator|.
name|getContext
argument_list|()
argument_list|)
decl_stmt|;
specifier|final
name|java
operator|.
name|util
operator|.
name|Collection
argument_list|<
name|VariableDeclaration
argument_list|>
name|varDecls
init|=
operator|(
operator|(
name|ExternalModule
operator|)
name|module
operator|)
operator|.
name|getVariableDeclarations
argument_list|()
decl_stmt|;
specifier|final
name|VariableDeclaration
name|var
init|=
name|varDecls
operator|.
name|iterator
argument_list|()
operator|.
name|next
argument_list|()
decl_stmt|;
specifier|final
name|Expression
name|unusedBody
init|=
name|unusedFunc
operator|.
name|getFunctionBody
argument_list|()
decl_stmt|;
specifier|final
name|FunctionCall
name|root
init|=
operator|(
name|FunctionCall
operator|)
operator|(
operator|(
name|PathExpr
operator|)
name|compiled
operator|)
operator|.
name|getFirst
argument_list|()
decl_stmt|;
specifier|final
name|UserDefinedFunction
name|calledFunc
init|=
name|root
operator|.
name|getFunction
argument_list|()
decl_stmt|;
specifier|final
name|Expression
name|calledBody
init|=
name|calledFunc
operator|.
name|getFunctionBody
argument_list|()
decl_stmt|;
comment|// set some property so we can test if it gets cleared
name|calledFunc
operator|.
name|setContextDocSet
argument_list|(
name|DocumentSet
operator|.
name|EMPTY_DOCUMENT_SET
argument_list|)
expr_stmt|;
name|calledBody
operator|.
name|setContextDocSet
argument_list|(
name|DocumentSet
operator|.
name|EMPTY_DOCUMENT_SET
argument_list|)
expr_stmt|;
name|unusedBody
operator|.
name|setContextDocSet
argument_list|(
name|DocumentSet
operator|.
name|EMPTY_DOCUMENT_SET
argument_list|)
expr_stmt|;
name|var
operator|.
name|setContextDocSet
argument_list|(
name|DocumentSet
operator|.
name|EMPTY_DOCUMENT_SET
argument_list|)
expr_stmt|;
comment|// execute query and check result
specifier|final
name|ResourceSet
name|result
init|=
name|service
operator|.
name|execute
argument_list|(
name|compiled
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|result
operator|.
name|getSize
argument_list|()
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|result
operator|.
name|getResource
argument_list|(
literal|0
argument_list|)
operator|.
name|getContent
argument_list|()
argument_list|,
literal|"Hello world"
argument_list|)
expr_stmt|;
name|Sequence
index|[]
name|args
init|=
name|calledFunc
operator|.
name|getCurrentArguments
argument_list|()
decl_stmt|;
name|assertNull
argument_list|(
name|args
argument_list|)
expr_stmt|;
name|assertNull
argument_list|(
name|calledFunc
operator|.
name|getContextDocSet
argument_list|()
argument_list|)
expr_stmt|;
name|assertNull
argument_list|(
name|calledBody
operator|.
name|getContextDocSet
argument_list|()
argument_list|)
expr_stmt|;
name|args
operator|=
name|unusedFunc
operator|.
name|getCurrentArguments
argument_list|()
expr_stmt|;
name|assertNull
argument_list|(
name|args
argument_list|)
expr_stmt|;
name|assertNull
argument_list|(
name|unusedBody
operator|.
name|getContextDocSet
argument_list|()
argument_list|)
expr_stmt|;
name|assertNull
argument_list|(
name|unusedFunc
operator|.
name|getContextDocSet
argument_list|()
argument_list|)
expr_stmt|;
name|assertNull
argument_list|(
name|var
operator|.
name|getContextDocSet
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|resetStateOfInlineFunc
parameter_list|()
throws|throws
name|XMLDBException
throws|,
name|EXistException
throws|,
name|PermissionDeniedException
throws|,
name|XPathException
block|{
specifier|final
name|BrokerPool
name|pool
init|=
name|BrokerPool
operator|.
name|getInstance
argument_list|()
decl_stmt|;
specifier|final
name|XQuery
name|xquery
init|=
name|pool
operator|.
name|getXQueryService
argument_list|()
decl_stmt|;
try|try
init|(
specifier|final
name|DBBroker
name|broker
init|=
name|pool
operator|.
name|get
argument_list|(
name|Optional
operator|.
name|of
argument_list|(
name|pool
operator|.
name|getSecurityManager
argument_list|()
operator|.
name|getSystemSubject
argument_list|()
argument_list|)
argument_list|)
init|)
block|{
comment|// execute query to get a function item
specifier|final
name|Sequence
name|result
init|=
name|xquery
operator|.
name|execute
argument_list|(
name|broker
argument_list|,
name|TEST_INLINE
argument_list|,
name|Sequence
operator|.
name|EMPTY_SEQUENCE
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|result
operator|.
name|getItemCount
argument_list|()
argument_list|,
literal|1
argument_list|)
expr_stmt|;
specifier|final
name|FunctionCall
name|call
init|=
operator|(
operator|(
name|FunctionReference
operator|)
name|result
operator|.
name|itemAt
argument_list|(
literal|0
argument_list|)
operator|)
operator|.
name|getCall
argument_list|()
decl_stmt|;
comment|// closure variables are set when function item is created, but should be cleared after query
specifier|final
name|List
argument_list|<
name|ClosureVariable
argument_list|>
name|closure
init|=
name|call
operator|.
name|getFunction
argument_list|()
operator|.
name|getClosureVariables
argument_list|()
decl_stmt|;
name|assertNull
argument_list|(
name|closure
argument_list|)
expr_stmt|;
block|}
block|}
block|}
end_class

end_unit

