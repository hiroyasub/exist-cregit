begin_unit|revision:1.0.0;language:Java;cregit-version:0.0.1
begin_comment
comment|/*   *  eXist Open Source Native XML Database   *  Copyright (C) 2001-06 The eXist Project   *  http://exist-db.org   *  http://exist.sourceforge.net   *     *  This program is free software; you can redistribute it and/or   *  modify it under the terms of the GNU Lesser General Public License   *  as published by the Free Software Foundation; either version 2   *  of the License, or (at your option) any later version.   *     *  This program is distributed in the hope that it will be useful,   *  but WITHOUT ANY WARRANTY; without even the implied warranty of   *  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the   *  GNU Lesser General Public License for more details.   *     *  You should have received a copy of the GNU Lesser General Public License   *  along with this program; if not, write to the Free Software   *  Foundation, Inc., 675 Mass Ave, Cambridge, MA 02139, USA.   *     *  $Id$   */
end_comment

begin_package
package|package
name|org
operator|.
name|exist
operator|.
name|xquery
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|File
import|;
end_import

begin_import
import|import
name|org
operator|.
name|custommonkey
operator|.
name|xmlunit
operator|.
name|XMLTestCase
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|xmldb
operator|.
name|DatabaseInstanceManager
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|xmldb
operator|.
name|XmldbURI
import|;
end_import

begin_import
import|import
name|org
operator|.
name|w3c
operator|.
name|dom
operator|.
name|Element
import|;
end_import

begin_import
import|import
name|org
operator|.
name|xmldb
operator|.
name|api
operator|.
name|DatabaseManager
import|;
end_import

begin_import
import|import
name|org
operator|.
name|xmldb
operator|.
name|api
operator|.
name|base
operator|.
name|Collection
import|;
end_import

begin_import
import|import
name|org
operator|.
name|xmldb
operator|.
name|api
operator|.
name|base
operator|.
name|Database
import|;
end_import

begin_import
import|import
name|org
operator|.
name|xmldb
operator|.
name|api
operator|.
name|base
operator|.
name|Resource
import|;
end_import

begin_import
import|import
name|org
operator|.
name|xmldb
operator|.
name|api
operator|.
name|base
operator|.
name|ResourceIterator
import|;
end_import

begin_import
import|import
name|org
operator|.
name|xmldb
operator|.
name|api
operator|.
name|base
operator|.
name|ResourceSet
import|;
end_import

begin_import
import|import
name|org
operator|.
name|xmldb
operator|.
name|api
operator|.
name|base
operator|.
name|XMLDBException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|xmldb
operator|.
name|api
operator|.
name|modules
operator|.
name|CollectionManagementService
import|;
end_import

begin_import
import|import
name|org
operator|.
name|xmldb
operator|.
name|api
operator|.
name|modules
operator|.
name|XMLResource
import|;
end_import

begin_import
import|import
name|org
operator|.
name|xmldb
operator|.
name|api
operator|.
name|modules
operator|.
name|XPathQueryService
import|;
end_import

begin_comment
comment|/** concerns the Group By extension for XQuery    *    * @author Boris Verhaegen (boris.verhaegen@gmail.com)   *    *  */
end_comment

begin_class
specifier|public
class|class
name|XQueryGroupByTest
extends|extends
name|XMLTestCase
block|{
specifier|private
specifier|static
specifier|final
name|String
name|BINARYTABLE_XML
init|=
literal|"binaryTable.xml"
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|String
name|BEYER_XML
init|=
literal|"beyer.xml"
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|String
name|ITEMS_XML
init|=
literal|"items.xml"
decl_stmt|;
specifier|private
specifier|final
specifier|static
name|String
name|binaryTable
init|=
literal|"<items>"
operator|+
literal|"<item><key1>1</key1><key2>1</key2></item>"
operator|+
literal|"<item><key1>1</key1><key2>0</key2></item>"
operator|+
literal|"<item><key1>0</key1><key2>1</key2></item>"
operator|+
literal|"<item><key1>0</key1><key2>0</key2></item>"
operator|+
literal|"<item><key1>1</key1><key2>1</key2></item>"
operator|+
literal|"<item><key1>1</key1><key2>0</key2></item>"
operator|+
literal|"<item><key1>0</key1><key2>1</key2></item>"
operator|+
literal|"<item><key1>0</key1><key2>0</key2></item>"
operator|+
literal|"</items>"
decl_stmt|;
specifier|private
specifier|final
specifier|static
name|String
name|beyer
init|=
literal|"<books>"
operator|+
literal|"<book>"
operator|+
literal|"<title>Transaction Processing</title>"
operator|+
literal|"<publisher>Morgan Kaufmann</publisher>"
operator|+
literal|"<year>1993</year>"
operator|+
literal|"<price>59.00</price>"
operator|+
literal|"<categories>"
operator|+
literal|"<software>"
operator|+
literal|"<db>"
operator|+
literal|"<concurrency/>"
operator|+
literal|"</db>"
operator|+
literal|"<distributed/>"
operator|+
literal|"</software>"
operator|+
literal|"</categories>"
operator|+
literal|"</book>"
operator|+
literal|"<book>"
operator|+
literal|"<title>Readings in Database Systems</title>"
operator|+
literal|"<publisher>Morgan Kaufmann</publisher>"
operator|+
literal|"<year>1998</year>"
operator|+
literal|"<price>65.00</price>"
operator|+
literal|"<categories>"
operator|+
literal|"<software>"
operator|+
literal|"<db/>"
operator|+
literal|"</software>"
operator|+
literal|"<anthology/>"
operator|+
literal|"</categories>"
operator|+
literal|"</book>"
operator|+
literal|"</books>"
decl_stmt|;
specifier|private
specifier|final
specifier|static
name|String
name|items
init|=
literal|"<items>"
operator|+
literal|"<item><key1>11</key1><key2>1</key2></item>"
operator|+
literal|"<item><key1>1</key1><key2>11</key2></item>"
operator|+
literal|"</items>"
decl_stmt|;
specifier|private
name|Collection
name|testCollection
decl_stmt|;
specifier|private
name|Database
name|database
decl_stmt|;
specifier|private
name|CollectionManagementService
name|testService
decl_stmt|;
specifier|public
name|XQueryGroupByTest
parameter_list|(
name|String
name|arg0
parameter_list|)
block|{
name|super
argument_list|(
name|arg0
argument_list|)
expr_stmt|;
block|}
specifier|protected
name|void
name|setUp
parameter_list|()
block|{
try|try
block|{
comment|// initialize driver
name|Class
argument_list|<
name|?
argument_list|>
name|cl
init|=
name|Class
operator|.
name|forName
argument_list|(
literal|"org.exist.xmldb.DatabaseImpl"
argument_list|)
decl_stmt|;
name|database
operator|=
operator|(
name|Database
operator|)
name|cl
operator|.
name|newInstance
argument_list|()
expr_stmt|;
name|database
operator|.
name|setProperty
argument_list|(
literal|"create-database"
argument_list|,
literal|"true"
argument_list|)
expr_stmt|;
name|DatabaseManager
operator|.
name|registerDatabase
argument_list|(
name|database
argument_list|)
expr_stmt|;
name|Collection
name|root
init|=
name|DatabaseManager
operator|.
name|getCollection
argument_list|(
name|XmldbURI
operator|.
name|LOCAL_DB
argument_list|,
literal|"admin"
argument_list|,
literal|""
argument_list|)
decl_stmt|;
name|testService
operator|=
operator|(
name|CollectionManagementService
operator|)
name|root
operator|.
name|getService
argument_list|(
literal|"CollectionManagementService"
argument_list|,
literal|"1.0"
argument_list|)
expr_stmt|;
name|testCollection
operator|=
name|testService
operator|.
name|createCollection
argument_list|(
literal|"testGB"
argument_list|)
expr_stmt|;
name|assertNotNull
argument_list|(
name|testCollection
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|ClassNotFoundException
name|e
parameter_list|)
block|{
block|}
catch|catch
parameter_list|(
name|InstantiationException
name|e
parameter_list|)
block|{
block|}
catch|catch
parameter_list|(
name|IllegalAccessException
name|e
parameter_list|)
block|{
block|}
catch|catch
parameter_list|(
name|XMLDBException
name|e
parameter_list|)
block|{
name|e
operator|.
name|printStackTrace
argument_list|()
expr_stmt|;
block|}
block|}
specifier|protected
name|void
name|tearDown
parameter_list|()
throws|throws
name|Exception
block|{
name|testService
operator|.
name|removeCollection
argument_list|(
literal|"testGB"
argument_list|)
expr_stmt|;
name|DatabaseManager
operator|.
name|deregisterDatabase
argument_list|(
name|database
argument_list|)
expr_stmt|;
name|DatabaseInstanceManager
name|dim
init|=
operator|(
name|DatabaseInstanceManager
operator|)
name|testCollection
operator|.
name|getService
argument_list|(
literal|"DatabaseInstanceManager"
argument_list|,
literal|"1.0"
argument_list|)
decl_stmt|;
name|dim
operator|.
name|shutdown
argument_list|()
expr_stmt|;
name|testCollection
operator|=
literal|null
expr_stmt|;
name|database
operator|=
literal|null
expr_stmt|;
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"tearDown PASSED"
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|testGroupByOneKey
parameter_list|()
block|{
name|ResourceSet
name|result
decl_stmt|;
name|String
name|query
decl_stmt|;
try|try
block|{
name|XPathQueryService
name|service
init|=
name|storeXMLStringAndGetQueryService
argument_list|(
name|BINARYTABLE_XML
argument_list|,
name|binaryTable
argument_list|)
decl_stmt|;
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"testGroupBy 1: ========"
argument_list|)
expr_stmt|;
name|query
operator|=
literal|"for $item in //item group $item as $partition by $item/key1 "
operator|+
literal|"as $key1 return count($partition)"
expr_stmt|;
name|result
operator|=
name|service
operator|.
name|queryResource
argument_list|(
name|BINARYTABLE_XML
argument_list|,
name|query
argument_list|)
expr_stmt|;
name|printResult
argument_list|(
name|result
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"XQuery: "
operator|+
name|query
argument_list|,
literal|2
argument_list|,
name|result
operator|.
name|getSize
argument_list|()
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"testGroupByClause : XMLDBException: "
operator|+
name|e
argument_list|)
expr_stmt|;
name|fail
argument_list|(
name|e
operator|.
name|getMessage
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
specifier|public
name|void
name|testGroupByTwoKeys
parameter_list|()
block|{
name|ResourceSet
name|result
decl_stmt|;
name|String
name|query
decl_stmt|;
try|try
block|{
name|XPathQueryService
name|service
init|=
name|storeXMLStringAndGetQueryService
argument_list|(
name|BINARYTABLE_XML
argument_list|,
name|binaryTable
argument_list|)
decl_stmt|;
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"testGroupBy 2: ========"
argument_list|)
expr_stmt|;
name|query
operator|=
literal|"for $item in //item group $item as $partition by $item/key1 "
operator|+
literal|"as $key1, $item/key2 as $key2 return count($partition)"
expr_stmt|;
name|result
operator|=
name|service
operator|.
name|queryResource
argument_list|(
name|BINARYTABLE_XML
argument_list|,
name|query
argument_list|)
expr_stmt|;
name|printResult
argument_list|(
name|result
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"XQuery: "
operator|+
name|query
argument_list|,
literal|4
argument_list|,
name|result
operator|.
name|getSize
argument_list|()
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"testGroupByClause : XMLDBException: "
operator|+
name|e
argument_list|)
expr_stmt|;
name|fail
argument_list|(
name|e
operator|.
name|getMessage
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
specifier|public
name|void
name|testGroupByKeyVariable
parameter_list|()
block|{
name|ResourceSet
name|result
decl_stmt|;
name|String
name|query
decl_stmt|;
name|XMLResource
name|resu
decl_stmt|;
try|try
block|{
name|XPathQueryService
name|service
init|=
name|storeXMLStringAndGetQueryService
argument_list|(
name|BINARYTABLE_XML
argument_list|,
name|binaryTable
argument_list|)
decl_stmt|;
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"testGroupBy 3: ========"
argument_list|)
expr_stmt|;
name|query
operator|=
literal|"for $item in //item group $item as $partition by $item/key1 "
operator|+
literal|"as $key1 order by $key1 return $key1"
expr_stmt|;
name|result
operator|=
name|service
operator|.
name|queryResource
argument_list|(
name|BINARYTABLE_XML
argument_list|,
name|query
argument_list|)
expr_stmt|;
name|printResult
argument_list|(
name|result
argument_list|)
expr_stmt|;
name|resu
operator|=
operator|(
name|XMLResource
operator|)
name|result
operator|.
name|getResource
argument_list|(
literal|0
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"XQuery: "
operator|+
name|query
argument_list|,
literal|"0"
argument_list|,
operator|(
operator|(
name|Element
operator|)
name|resu
operator|.
name|getContentAsDOM
argument_list|()
operator|)
operator|.
name|getNodeValue
argument_list|()
argument_list|)
expr_stmt|;
name|resu
operator|=
operator|(
name|XMLResource
operator|)
name|result
operator|.
name|getResource
argument_list|(
literal|1
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"XQuery: "
operator|+
name|query
argument_list|,
literal|"1"
argument_list|,
operator|(
operator|(
name|Element
operator|)
name|resu
operator|.
name|getContentAsDOM
argument_list|()
operator|)
operator|.
name|getNodeValue
argument_list|()
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"testGroupByClause : XMLDBException: "
operator|+
name|e
argument_list|)
expr_stmt|;
name|fail
argument_list|(
name|e
operator|.
name|getMessage
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
specifier|public
name|void
name|testGroupByLetVariable
parameter_list|()
block|{
name|ResourceSet
name|result
decl_stmt|;
name|String
name|query
decl_stmt|;
try|try
block|{
name|XPathQueryService
name|service
init|=
name|storeXMLStringAndGetQueryService
argument_list|(
name|BINARYTABLE_XML
argument_list|,
name|binaryTable
argument_list|)
decl_stmt|;
comment|//group by a let variable
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"testGroupBy 4: ========"
argument_list|)
expr_stmt|;
name|query
operator|=
literal|"for $item in //item let $k1 := $item/key1 group $item as "
operator|+
literal|"$partition by $k1 as $key1 return count($partition)"
expr_stmt|;
name|result
operator|=
name|service
operator|.
name|queryResource
argument_list|(
name|BINARYTABLE_XML
argument_list|,
name|query
argument_list|)
expr_stmt|;
name|printResult
argument_list|(
name|result
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"XQuery: "
operator|+
name|query
argument_list|,
literal|2
argument_list|,
name|result
operator|.
name|getSize
argument_list|()
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"testGroupByClause : XMLDBException: "
operator|+
name|e
argument_list|)
expr_stmt|;
name|fail
argument_list|(
name|e
operator|.
name|getMessage
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
specifier|public
name|void
name|testGroupBySpecialFLWR
parameter_list|()
block|{
name|ResourceSet
name|result
decl_stmt|;
name|String
name|query
decl_stmt|;
try|try
block|{
name|XPathQueryService
name|service
init|=
name|storeXMLStringAndGetQueryService
argument_list|(
name|BINARYTABLE_XML
argument_list|,
name|binaryTable
argument_list|)
decl_stmt|;
comment|//group by in a flwr beginning by a let clause
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"testGroupBy 5: ========"
argument_list|)
expr_stmt|;
name|query
operator|=
literal|"let $test := //item/key1 let $brol := //item/key2 "
operator|+
literal|"for $item in //item let $k2 := $item/key2 group $item "
operator|+
literal|"as $partition by $item/key1 as $key1 return count($partition)"
expr_stmt|;
name|result
operator|=
name|service
operator|.
name|queryResource
argument_list|(
name|BINARYTABLE_XML
argument_list|,
name|query
argument_list|)
expr_stmt|;
name|printResult
argument_list|(
name|result
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"XQuery: "
operator|+
name|query
argument_list|,
literal|2
argument_list|,
name|result
operator|.
name|getSize
argument_list|()
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"testGroupByClause : XMLDBException: "
operator|+
name|e
argument_list|)
expr_stmt|;
name|fail
argument_list|(
name|e
operator|.
name|getMessage
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
specifier|public
name|void
name|testGroupByGroupedVariable
parameter_list|()
block|{
name|ResourceSet
name|result
decl_stmt|;
name|String
name|query
decl_stmt|;
try|try
block|{
name|XPathQueryService
name|service
init|=
name|storeXMLStringAndGetQueryService
argument_list|(
name|BINARYTABLE_XML
argument_list|,
name|binaryTable
argument_list|)
decl_stmt|;
comment|//test the contents of $partition
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"testGroupBy 6: ========"
argument_list|)
expr_stmt|;
name|query
operator|=
literal|"for $item in //item group $item as $partition by $item/key1 "
operator|+
literal|"as $key1, $item/key2 as $key2 order by $key1 descending, "
operator|+
literal|"$key2 descending return<group>{$partition}</group>"
expr_stmt|;
name|result
operator|=
name|service
operator|.
name|queryResource
argument_list|(
name|BINARYTABLE_XML
argument_list|,
name|query
argument_list|)
expr_stmt|;
name|printResult
argument_list|(
name|result
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"XQuery: "
operator|+
name|query
argument_list|,
literal|"<group>\n"
operator|+
literal|"<item>\n"
operator|+
literal|"<key1>1</key1>\n"
operator|+
literal|"<key2>1</key2>\n"
operator|+
literal|"</item>\n"
operator|+
literal|"<item>\n"
operator|+
literal|"<key1>1</key1>\n"
operator|+
literal|"<key2>1</key2>\n"
operator|+
literal|"</item>\n"
operator|+
literal|"</group>"
argument_list|,
operator|(
operator|(
name|XMLResource
operator|)
name|result
operator|.
name|getResource
argument_list|(
literal|0
argument_list|)
operator|)
operator|.
name|getContent
argument_list|()
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"testGroupByClause : XMLDBException: "
operator|+
name|e
argument_list|)
expr_stmt|;
name|fail
argument_list|(
name|e
operator|.
name|getMessage
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
comment|/* in a FLWR, variables binded before groupBy clause are not in scope after the groupBy clause*/
specifier|public
name|void
name|testScope1
parameter_list|()
block|{
name|ResourceSet
name|result
decl_stmt|;
name|String
name|query
decl_stmt|;
try|try
block|{
name|XPathQueryService
name|service
init|=
name|storeXMLStringAndGetQueryService
argument_list|(
name|BINARYTABLE_XML
argument_list|,
name|binaryTable
argument_list|)
decl_stmt|;
comment|//test the contents of $partition
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"testGroupBy 7: ========"
argument_list|)
expr_stmt|;
name|query
operator|=
literal|"for $item in //item group $item as $partition by "
operator|+
literal|"$item/key1 as $key1 return<group>{$item}</group>"
expr_stmt|;
name|result
operator|=
name|service
operator|.
name|queryResource
argument_list|(
name|BINARYTABLE_XML
argument_list|,
name|query
argument_list|)
expr_stmt|;
name|printResult
argument_list|(
name|result
argument_list|)
expr_stmt|;
name|fail
argument_list|(
literal|"$item variable still in scope !"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
comment|//ok, $item is not in scope
block|}
block|}
specifier|public
name|void
name|testScope2
parameter_list|()
block|{
name|ResourceSet
name|result
decl_stmt|;
name|String
name|query
decl_stmt|;
try|try
block|{
name|XPathQueryService
name|service
init|=
name|storeXMLStringAndGetQueryService
argument_list|(
name|BINARYTABLE_XML
argument_list|,
name|binaryTable
argument_list|)
decl_stmt|;
comment|//test the contents of $partition
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"testGroupBy 8: ========"
argument_list|)
expr_stmt|;
name|query
operator|=
literal|"for $item in //item group $item as $partition by $item/key1 "
operator|+
literal|"as $key1 return for $foo in $partition return "
operator|+
literal|"<test>{$foo,$key1}</test>"
expr_stmt|;
name|result
operator|=
name|service
operator|.
name|queryResource
argument_list|(
name|BINARYTABLE_XML
argument_list|,
name|query
argument_list|)
expr_stmt|;
name|printResult
argument_list|(
name|result
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"XQuery: "
operator|+
name|query
argument_list|,
literal|8
argument_list|,
name|result
operator|.
name|getSize
argument_list|()
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"testGroupByClause : XMLDBException: "
operator|+
name|e
argument_list|)
expr_stmt|;
name|fail
argument_list|(
name|e
operator|.
name|getMessage
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
specifier|public
name|void
name|testScope3
parameter_list|()
block|{
name|ResourceSet
name|result
decl_stmt|;
name|String
name|query
decl_stmt|;
try|try
block|{
name|XPathQueryService
name|service
init|=
name|storeXMLStringAndGetQueryService
argument_list|(
name|BINARYTABLE_XML
argument_list|,
name|binaryTable
argument_list|)
decl_stmt|;
comment|//test the contents of $partition
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"testGroupBy 7: ========"
argument_list|)
expr_stmt|;
name|query
operator|=
literal|"for $item in //item return for $key in $item/key1 group "
operator|+
literal|"$key as $partition by $item/key2 as $key2 return "
operator|+
literal|"<test>{$partition,$item}</test>"
expr_stmt|;
name|result
operator|=
name|service
operator|.
name|queryResource
argument_list|(
name|BINARYTABLE_XML
argument_list|,
name|query
argument_list|)
expr_stmt|;
name|printResult
argument_list|(
name|result
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"XQuery: "
operator|+
name|query
argument_list|,
literal|8
argument_list|,
name|result
operator|.
name|getSize
argument_list|()
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"testGroupByClause : XMLDBException: "
operator|+
name|e
argument_list|)
expr_stmt|;
name|fail
argument_list|(
name|e
operator|.
name|getMessage
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
comment|//test based on Kevin Beyer's publication "Extending XQuery for Analytics", Q11
comment|//this test use a recurcive function and group books by all combination of categories.
specifier|public
name|void
name|testGroupByBeyerQ11
parameter_list|()
block|{
name|ResourceSet
name|result
decl_stmt|;
name|String
name|query
decl_stmt|;
try|try
block|{
name|XPathQueryService
name|service
init|=
name|storeXMLStringAndGetQueryService
argument_list|(
name|BEYER_XML
argument_list|,
name|beyer
argument_list|)
decl_stmt|;
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"testGroupBy Beyer Q11: ========"
argument_list|)
expr_stmt|;
name|query
operator|=
literal|"declare function local:paths($x as element()*) as xs:string* {\n"
operator|+
literal|"for $i in $x\n"
operator|+
literal|"let $name := fn:local-name-from-QName(fn:node-name($i))\n"
operator|+
literal|"return ($name,\n"
operator|+
literal|"  for $j in local:paths($i/*)\n"
operator|+
literal|"        return fn:concat($name, \"/\", $j)\n"
operator|+
literal|")};\n"
operator|+
literal|"for $b in //book\n"
operator|+
literal|"for $c in local:paths($b/categories/*)\n"
operator|+
literal|"group $b as $partition by $c as $category\n"
operator|+
literal|"return\n"
operator|+
literal|"<result><category>{$category}</category> "
operator|+
literal|"<avg-price>{avg($partition/price)}</avg-price></result>\n"
expr_stmt|;
name|result
operator|=
name|service
operator|.
name|queryResource
argument_list|(
name|BEYER_XML
argument_list|,
name|query
argument_list|)
expr_stmt|;
name|printResult
argument_list|(
name|result
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"XQuery: "
operator|+
name|query
argument_list|,
literal|5
argument_list|,
name|result
operator|.
name|getSize
argument_list|()
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"testGroupByClause : XMLDBException: "
operator|+
name|e
argument_list|)
expr_stmt|;
name|fail
argument_list|(
name|e
operator|.
name|getMessage
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
comment|//test based on Kevin Beyer's publication "Extending XQuery for Analytics", Q12
specifier|public
name|void
name|testGroupByBeyerQ12
parameter_list|()
block|{
name|ResourceSet
name|result
decl_stmt|;
name|String
name|query
decl_stmt|;
try|try
block|{
name|XPathQueryService
name|service
init|=
name|storeXMLStringAndGetQueryService
argument_list|(
name|BEYER_XML
argument_list|,
name|beyer
argument_list|)
decl_stmt|;
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"testGroupBy Beyer Q12: ========"
argument_list|)
expr_stmt|;
name|query
operator|=
literal|"declare function local:cube($dims as item()*) as item()*\n"
operator|+
literal|"{\n"
operator|+
literal|"    if (fn:empty($dims)) then<group/>\n"
operator|+
literal|"    else for $subgroup in local:cube(fn:subsequence($dims, 2))\n"
operator|+
literal|"    return ($subgroup,<group>{$dims[1], $subgroup/*}</group>)\n"
operator|+
literal|"};\n"
operator|+
literal|"for $b in //book\n"
operator|+
literal|"let $pub :=<publisher>{$b/publisher}</publisher>\n"
operator|+
literal|"for $cell in local:cube(($pub,$b/year))\n"
operator|+
literal|"group $b as $partition by $cell as $cell2\n"
operator|+
literal|"order by $cell2 \n"
operator|+
literal|"return\n"
operator|+
literal|"<result>\n"
operator|+
literal|"  {$cell2}\n"
operator|+
literal|"<avg-price>{avg($partition//price)}</avg-price>\n"
operator|+
literal|"</result>\n"
expr_stmt|;
name|result
operator|=
name|service
operator|.
name|queryResource
argument_list|(
name|BEYER_XML
argument_list|,
name|query
argument_list|)
expr_stmt|;
name|printResult
argument_list|(
name|result
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"XQuery: "
operator|+
name|query
argument_list|,
literal|6
argument_list|,
name|result
operator|.
name|getSize
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"XQuery: "
operator|+
name|query
argument_list|,
literal|"<result>\n"
operator|+
literal|"<group/>\n"
operator|+
literal|"<avg-price>62</avg-price>\n"
operator|+
literal|"</result>"
argument_list|,
operator|(
operator|(
name|XMLResource
operator|)
name|result
operator|.
name|getResource
argument_list|(
literal|0
argument_list|)
operator|)
operator|.
name|getContent
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"XQuery: "
operator|+
name|query
argument_list|,
literal|"<result>\n"
operator|+
literal|"<group>\n"
operator|+
literal|"<publisher>\n"
operator|+
literal|"<publisher>Morgan Kaufmann</publisher>\n"
operator|+
literal|"</publisher>\n"
operator|+
literal|"<year>1998</year>\n"
operator|+
literal|"</group>\n"
operator|+
literal|"<avg-price>65</avg-price>\n"
operator|+
literal|"</result>"
argument_list|,
operator|(
operator|(
name|XMLResource
operator|)
name|result
operator|.
name|getResource
argument_list|(
literal|5
argument_list|)
operator|)
operator|.
name|getContent
argument_list|()
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"testGroupByClause : XMLDBException: "
operator|+
name|e
argument_list|)
expr_stmt|;
name|fail
argument_list|(
name|e
operator|.
name|getMessage
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
specifier|public
name|void
name|testHashKey
parameter_list|()
block|{
name|ResourceSet
name|result
decl_stmt|;
name|String
name|query
decl_stmt|;
try|try
block|{
name|XPathQueryService
name|service
init|=
name|storeXMLStringAndGetQueryService
argument_list|(
name|ITEMS_XML
argument_list|,
name|items
argument_list|)
decl_stmt|;
comment|//test if they are two group (11,1) and (1,11) and not only one
comment|//bug corrected with the patch 1681499 on subversion tracker
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"testGroupBy hashkey: ========"
argument_list|)
expr_stmt|;
name|query
operator|=
literal|"for $item in //item group $item as $partition by $item/key1/text() "
operator|+
literal|"as $key1, $item/key2/text() as $key2"
operator|+
literal|" return<group/>"
expr_stmt|;
name|result
operator|=
name|service
operator|.
name|queryResource
argument_list|(
name|ITEMS_XML
argument_list|,
name|query
argument_list|)
expr_stmt|;
name|printResult
argument_list|(
name|result
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"XQuery: "
operator|+
name|query
argument_list|,
literal|2
argument_list|,
name|result
operator|.
name|getSize
argument_list|()
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"testGroupByClause : XMLDBException: "
operator|+
name|e
argument_list|)
expr_stmt|;
name|fail
argument_list|(
name|e
operator|.
name|getMessage
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
specifier|protected
name|XPathQueryService
name|storeXMLStringAndGetQueryService
parameter_list|(
name|String
name|documentName
parameter_list|,
name|String
name|content
parameter_list|)
throws|throws
name|XMLDBException
block|{
name|XMLResource
name|doc
init|=
operator|(
name|XMLResource
operator|)
name|testCollection
operator|.
name|createResource
argument_list|(
name|documentName
argument_list|,
literal|"XMLResource"
argument_list|)
decl_stmt|;
name|doc
operator|.
name|setContent
argument_list|(
name|content
argument_list|)
expr_stmt|;
name|testCollection
operator|.
name|storeResource
argument_list|(
name|doc
argument_list|)
expr_stmt|;
name|XPathQueryService
name|service
init|=
operator|(
name|XPathQueryService
operator|)
name|testCollection
operator|.
name|getService
argument_list|(
literal|"XPathQueryService"
argument_list|,
literal|"1.0"
argument_list|)
decl_stmt|;
return|return
name|service
return|;
block|}
specifier|protected
name|XPathQueryService
name|storeXMLStringAndGetQueryService
parameter_list|(
name|String
name|documentName
parameter_list|)
throws|throws
name|XMLDBException
block|{
name|XMLResource
name|doc
init|=
operator|(
name|XMLResource
operator|)
name|testCollection
operator|.
name|createResource
argument_list|(
name|documentName
argument_list|,
literal|"XMLResource"
argument_list|)
decl_stmt|;
name|doc
operator|.
name|setContent
argument_list|(
operator|new
name|File
argument_list|(
name|documentName
argument_list|)
argument_list|)
expr_stmt|;
name|testCollection
operator|.
name|storeResource
argument_list|(
name|doc
argument_list|)
expr_stmt|;
name|XPathQueryService
name|service
init|=
operator|(
name|XPathQueryService
operator|)
name|testCollection
operator|.
name|getService
argument_list|(
literal|"XPathQueryService"
argument_list|,
literal|"1.0"
argument_list|)
decl_stmt|;
return|return
name|service
return|;
block|}
specifier|protected
name|void
name|printResult
parameter_list|(
name|ResourceSet
name|result
parameter_list|)
throws|throws
name|XMLDBException
block|{
for|for
control|(
name|ResourceIterator
name|i
init|=
name|result
operator|.
name|getIterator
argument_list|()
init|;
name|i
operator|.
name|hasMoreResources
argument_list|()
condition|;
control|)
block|{
name|Resource
name|r
init|=
name|i
operator|.
name|nextResource
argument_list|()
decl_stmt|;
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
name|r
operator|.
name|getContent
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
block|}
end_class

end_unit

