begin_unit|revision:1.0.0;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * eXist Open Source Native XML Database  * Copyright (C) 2001-2018 The eXist Project  * http://exist-db.org  *  * This program is free software; you can redistribute it and/or  * modify it under the terms of the GNU Lesser General Public License  * as published by the Free Software Foundation; either version 2  * of the License, or (at your option) any later version.  *  * This program is distributed in the hope that it will be useful,  * but WITHOUT ANY WARRANTY; without even the implied warranty of  * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the  * GNU Lesser General Public License for more details.  *  * You should have received a copy of the GNU Lesser General Public  * License along with this library; if not, write to the Free Software  * Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA  02110-1301  USA  */
end_comment

begin_package
package|package
name|org
operator|.
name|exist
operator|.
name|xquery
package|;
end_package

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|dom
operator|.
name|QName
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|source
operator|.
name|Source
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|source
operator|.
name|StringSource
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|test
operator|.
name|ExistXmldbEmbeddedServer
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|xmldb
operator|.
name|EXistXQueryService
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|xmldb
operator|.
name|LocalXMLResource
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|ClassRule
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_import
import|import
name|org
operator|.
name|w3c
operator|.
name|dom
operator|.
name|Node
import|;
end_import

begin_import
import|import
name|org
operator|.
name|xmldb
operator|.
name|api
operator|.
name|base
operator|.
name|ResourceSet
import|;
end_import

begin_import
import|import
name|org
operator|.
name|xmldb
operator|.
name|api
operator|.
name|base
operator|.
name|XMLDBException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|xmlunit
operator|.
name|builder
operator|.
name|DiffBuilder
import|;
end_import

begin_import
import|import
name|org
operator|.
name|xmlunit
operator|.
name|builder
operator|.
name|Input
import|;
end_import

begin_import
import|import
name|org
operator|.
name|xmlunit
operator|.
name|diff
operator|.
name|Diff
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|atomic
operator|.
name|AtomicLong
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|exist
operator|.
name|xquery
operator|.
name|InternalModuleTest
operator|.
name|TestModuleWithVariables
operator|.
name|*
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertEquals
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertFalse
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertNotNull
import|;
end_import

begin_comment
comment|/**  * @author Adam Retter<adam@evolvedbinary.com>  */
end_comment

begin_class
specifier|public
class|class
name|InternalModuleTest
block|{
specifier|private
specifier|static
specifier|final
name|AtomicLong
name|COUNTER
init|=
operator|new
name|AtomicLong
argument_list|()
decl_stmt|;
annotation|@
name|ClassRule
specifier|public
specifier|static
specifier|final
name|ExistXmldbEmbeddedServer
name|existServer
init|=
operator|new
name|ExistXmldbEmbeddedServer
argument_list|(
literal|true
argument_list|,
literal|true
argument_list|,
literal|true
argument_list|)
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|String
name|EOL
init|=
name|System
operator|.
name|getProperty
argument_list|(
literal|"line.separator"
argument_list|)
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|String
name|MODULE_VARIABLE_QUERY
init|=
literal|"import module namespace "
operator|+
name|PREFIX
operator|+
literal|" = '"
operator|+
name|NS
operator|+
literal|"' at 'java:org.exist.xquery.InternalModuleTest$TestModuleWithVariables';"
operator|+
name|EOL
operator|+
literal|"document {"
operator|+
name|EOL
operator|+
literal|"<variables>"
operator|+
name|EOL
operator|+
literal|"<var1>{$"
operator|+
name|PREFIX
operator|+
literal|":var1}</var1>"
operator|+
name|EOL
operator|+
literal|"</variables>"
operator|+
name|EOL
operator|+
literal|"}"
operator|+
name|EOL
decl_stmt|;
annotation|@
name|Test
specifier|public
name|void
name|moduleVariables
parameter_list|()
throws|throws
name|XMLDBException
block|{
specifier|final
name|Source
name|querySource
init|=
operator|new
name|StringSource
argument_list|(
name|MODULE_VARIABLE_QUERY
argument_list|)
decl_stmt|;
specifier|final
name|EXistXQueryService
name|queryService
init|=
operator|(
name|EXistXQueryService
operator|)
name|existServer
operator|.
name|getRoot
argument_list|()
operator|.
name|getService
argument_list|(
literal|"XQueryService"
argument_list|,
literal|"1.0"
argument_list|)
decl_stmt|;
name|moduleVariablesQuery
argument_list|(
name|queryService
argument_list|,
name|querySource
argument_list|)
expr_stmt|;
block|}
comment|/**      * Similar to {@link #moduleVariables()} but      * re-executes the query to ensure on subsequent      * invocations, reusing the cached query (and query      * context) do not cause problems.      */
annotation|@
name|Test
specifier|public
name|void
name|reusedModuleVariables
parameter_list|()
throws|throws
name|XMLDBException
block|{
specifier|final
name|Source
name|querySource
init|=
operator|new
name|StringSource
argument_list|(
name|MODULE_VARIABLE_QUERY
argument_list|)
decl_stmt|;
specifier|final
name|EXistXQueryService
name|queryService
init|=
operator|(
name|EXistXQueryService
operator|)
name|existServer
operator|.
name|getRoot
argument_list|()
operator|.
name|getService
argument_list|(
literal|"XQueryService"
argument_list|,
literal|"1.0"
argument_list|)
decl_stmt|;
name|moduleVariablesQuery
argument_list|(
name|queryService
argument_list|,
name|querySource
argument_list|)
expr_stmt|;
name|moduleVariablesQuery
argument_list|(
name|queryService
argument_list|,
name|querySource
argument_list|)
expr_stmt|;
name|moduleVariablesQuery
argument_list|(
name|queryService
argument_list|,
name|querySource
argument_list|)
expr_stmt|;
block|}
specifier|private
name|void
name|moduleVariablesQuery
parameter_list|(
specifier|final
name|EXistXQueryService
name|queryService
parameter_list|,
specifier|final
name|Source
name|query
parameter_list|)
throws|throws
name|XMLDBException
block|{
specifier|final
name|long
name|expectedVar1
init|=
name|COUNTER
operator|.
name|get
argument_list|()
decl_stmt|;
specifier|final
name|ResourceSet
name|result
init|=
name|queryService
operator|.
name|execute
argument_list|(
name|query
argument_list|)
decl_stmt|;
comment|// this variation of execute will use the XQueryPool for caching
name|assertNotNull
argument_list|(
name|result
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|result
operator|.
name|getSize
argument_list|()
argument_list|)
expr_stmt|;
specifier|final
name|LocalXMLResource
name|resource
init|=
operator|(
name|LocalXMLResource
operator|)
name|result
operator|.
name|getResource
argument_list|(
literal|0
argument_list|)
decl_stmt|;
name|assertNotNull
argument_list|(
name|resource
argument_list|)
expr_stmt|;
specifier|final
name|Node
name|actualDoc
init|=
name|resource
operator|.
name|getContentAsDOM
argument_list|()
decl_stmt|;
specifier|final
name|javax
operator|.
name|xml
operator|.
name|transform
operator|.
name|Source
name|expected
init|=
name|Input
operator|.
name|fromString
argument_list|(
literal|"<variables><var1>"
operator|+
name|expectedVar1
operator|+
literal|"</var1></variables>"
argument_list|)
operator|.
name|build
argument_list|()
decl_stmt|;
specifier|final
name|javax
operator|.
name|xml
operator|.
name|transform
operator|.
name|Source
name|actual
init|=
name|Input
operator|.
name|fromNode
argument_list|(
name|actualDoc
argument_list|)
operator|.
name|build
argument_list|()
decl_stmt|;
specifier|final
name|Diff
name|diff
init|=
name|DiffBuilder
operator|.
name|compare
argument_list|(
name|actual
argument_list|)
operator|.
name|withTest
argument_list|(
name|expected
argument_list|)
operator|.
name|checkForSimilar
argument_list|()
operator|.
name|build
argument_list|()
decl_stmt|;
name|assertFalse
argument_list|(
name|diff
operator|.
name|toString
argument_list|()
argument_list|,
name|diff
operator|.
name|hasDifferences
argument_list|()
argument_list|)
expr_stmt|;
block|}
specifier|public
specifier|static
class|class
name|TestModuleWithVariables
extends|extends
name|AbstractInternalModule
block|{
specifier|public
specifier|static
specifier|final
name|String
name|NS
init|=
literal|"http://TestModuleWithVariables"
decl_stmt|;
specifier|public
specifier|static
specifier|final
name|String
name|PREFIX
init|=
literal|"tmwv"
decl_stmt|;
specifier|public
specifier|static
specifier|final
name|QName
name|VAR1_NAME
init|=
operator|new
name|QName
argument_list|(
literal|"var1"
argument_list|,
name|NS
argument_list|)
decl_stmt|;
specifier|public
name|TestModuleWithVariables
parameter_list|(
specifier|final
name|Map
argument_list|<
name|String
argument_list|,
name|List
argument_list|<
name|?
argument_list|>
argument_list|>
name|parameters
parameter_list|)
throws|throws
name|XPathException
block|{
name|super
argument_list|(
operator|new
name|FunctionDef
index|[
literal|0
index|]
argument_list|,
name|parameters
argument_list|)
expr_stmt|;
name|declareVariable
argument_list|(
name|VAR1_NAME
argument_list|,
name|COUNTER
operator|.
name|getAndIncrement
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|String
name|getNamespaceURI
parameter_list|()
block|{
return|return
name|NS
return|;
block|}
annotation|@
name|Override
specifier|public
name|String
name|getDefaultPrefix
parameter_list|()
block|{
return|return
name|PREFIX
return|;
block|}
annotation|@
name|Override
specifier|public
name|String
name|getDescription
parameter_list|()
block|{
return|return
literal|"mod1"
return|;
block|}
annotation|@
name|Override
specifier|public
name|String
name|getReleaseVersion
parameter_list|()
block|{
return|return
literal|"99"
return|;
block|}
block|}
block|}
end_class

end_unit

