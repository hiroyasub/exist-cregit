begin_unit|revision:1.0.0;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  *  eXist Open Source Native XML Database  *  Copyright (C) 2001-2014 The eXist Project  *  http://exist-db.org  *  *  This program is free software; you can redistribute it and/or  *  modify it under the terms of the GNU Lesser General Public License  *  as published by the Free Software Foundation; either version 2  *  of the License, or (at your option) any later version.  *  *  This program is distributed in the hope that it will be useful,  *  but WITHOUT ANY WARRANTY; without even the implied warranty of  *  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the  *  GNU Lesser General Public License for more details.  *  *  You should have received a copy of the GNU Lesser General Public  *  License along with this library; if not, write to the Free Software  *  Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA  02110-1301  USA  */
end_comment

begin_package
package|package
name|org
operator|.
name|exist
operator|.
name|collections
operator|.
name|triggers
package|;
end_package

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertEquals
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertNotNull
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|fail
import|;
end_import

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|URISyntaxException
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|xml
operator|.
name|transform
operator|.
name|OutputKeys
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|TestUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|util
operator|.
name|Base64Decoder
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|xmldb
operator|.
name|CollectionManagementServiceImpl
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|xmldb
operator|.
name|DatabaseInstanceManager
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|xmldb
operator|.
name|EXistResource
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|xmldb
operator|.
name|IndexQueryService
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|xmldb
operator|.
name|XmldbURI
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|AfterClass
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Before
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|BeforeClass
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Ignore
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Rule
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|rules
operator|.
name|TestRule
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|rules
operator|.
name|TestWatcher
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|runner
operator|.
name|Description
import|;
end_import

begin_import
import|import
name|org
operator|.
name|xmldb
operator|.
name|api
operator|.
name|DatabaseManager
import|;
end_import

begin_import
import|import
name|org
operator|.
name|xmldb
operator|.
name|api
operator|.
name|base
operator|.
name|Collection
import|;
end_import

begin_import
import|import
name|org
operator|.
name|xmldb
operator|.
name|api
operator|.
name|base
operator|.
name|Database
import|;
end_import

begin_import
import|import
name|org
operator|.
name|xmldb
operator|.
name|api
operator|.
name|base
operator|.
name|Resource
import|;
end_import

begin_import
import|import
name|org
operator|.
name|xmldb
operator|.
name|api
operator|.
name|base
operator|.
name|ResourceSet
import|;
end_import

begin_import
import|import
name|org
operator|.
name|xmldb
operator|.
name|api
operator|.
name|base
operator|.
name|XMLDBException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|xmldb
operator|.
name|api
operator|.
name|modules
operator|.
name|BinaryResource
import|;
end_import

begin_import
import|import
name|org
operator|.
name|xmldb
operator|.
name|api
operator|.
name|modules
operator|.
name|CollectionManagementService
import|;
end_import

begin_import
import|import
name|org
operator|.
name|xmldb
operator|.
name|api
operator|.
name|modules
operator|.
name|XMLResource
import|;
end_import

begin_import
import|import
name|org
operator|.
name|xmldb
operator|.
name|api
operator|.
name|modules
operator|.
name|XPathQueryService
import|;
end_import

begin_import
import|import
name|org
operator|.
name|xmldb
operator|.
name|api
operator|.
name|modules
operator|.
name|XUpdateQueryService
import|;
end_import

begin_comment
comment|/** class under test : {@link XQueryTrigger}  * @author Pierrick Brihaye<pierrick.brihaye@free.fr>  */
end_comment

begin_class
specifier|public
class|class
name|XQueryTriggerTest
block|{
specifier|private
specifier|final
specifier|static
name|String
name|TEST_COLLECTION
init|=
literal|"testXQueryTrigger"
decl_stmt|;
comment|/** XQuery module implementing the trigger under test */
specifier|private
specifier|final
specifier|static
name|String
name|MODULE_NAME
init|=
literal|"XQueryTriggerLogger.xqm"
decl_stmt|;
specifier|private
specifier|final
specifier|static
name|String
name|COLLECTION_CONFIG
init|=
literal|"<exist:collection xmlns:exist='http://exist-db.org/collection-config/1.0'>"
operator|+
literal|"<exist:triggers>"
operator|+
literal|"<exist:trigger class='org.exist.collections.triggers.XQueryTrigger'>"
operator|+
literal|"<exist:parameter "
operator|+
literal|"			name='url' "
operator|+
literal|"			value='"
operator|+
name|XmldbURI
operator|.
name|LOCAL_DB
operator|+
literal|"/"
operator|+
name|TEST_COLLECTION
operator|+
literal|"/"
operator|+
name|MODULE_NAME
operator|+
literal|"' "
operator|+
literal|"        />"
operator|+
literal|"</exist:trigger>"
operator|+
literal|"</exist:triggers>"
operator|+
literal|"</exist:collection>"
decl_stmt|;
specifier|private
specifier|final
specifier|static
name|String
name|EMPTY_COLLECTION_CONFIG
init|=
literal|"<exist:collection xmlns:exist='http://exist-db.org/collection-config/1.0'>"
operator|+
literal|"</exist:collection>"
decl_stmt|;
specifier|private
specifier|final
specifier|static
name|String
name|DOCUMENT_NAME
init|=
literal|"test.xml"
decl_stmt|;
specifier|private
specifier|final
specifier|static
name|String
name|DOCUMENT_CONTENT
init|=
literal|"<test>"
operator|+
literal|"<item id='1'><price>5.6</price><stock>22</stock></item>"
operator|+
literal|"<item id='2'><price>7.4</price><stock>43</stock></item>"
operator|+
literal|"<item id='3'><price>18.4</price><stock>5</stock></item>"
operator|+
literal|"<item id='4'><price>65.54</price><stock>16</stock></item>"
operator|+
literal|"</test>"
decl_stmt|;
comment|/** XUpdate document update specification */
specifier|private
specifier|final
specifier|static
name|String
name|DOCUMENT_UPDATE
init|=
literal|"<xu:modifications xmlns:xu='http://www.xmldb.org/xupdate' version='1.0'>"
operator|+
literal|"<!-- special offer -->"
operator|+
literal|"<xu:update select='/test/item[@id = \"3\"]/price'>"
operator|+
literal|"15.2"
operator|+
literal|"</xu:update>"
operator|+
literal|"</xu:modifications>"
decl_stmt|;
comment|//    private final static String MODIFIED_DOCUMENT_CONTENT =
comment|//    	DOCUMENT_CONTENT.replaceAll("<price>18.4</price>", "<price>15.2</price>");
specifier|private
specifier|final
specifier|static
name|String
name|BINARY_DOCUMENT_NAME
init|=
literal|"1x1.gif"
decl_stmt|;
specifier|private
specifier|final
specifier|static
name|String
name|BINARY_DOCUMENT_CONTENT
init|=
literal|"R0lGODlhAQABAIABAAD/AP///yH+EUNyZWF0ZWQgd2l0aCBHSU1QACwAAAAAAQABAAACAkQBADs="
decl_stmt|;
comment|/** "log" document that will be updated by the trigger */
specifier|private
specifier|final
specifier|static
name|String
name|LOG_NAME
init|=
literal|"XQueryTriggerLog.xml"
decl_stmt|;
comment|/** initial content of the "log" document */
specifier|private
specifier|final
specifier|static
name|String
name|EMPTY_LOG
init|=
literal|"<events/>"
decl_stmt|;
comment|/** XQuery module implementing the trigger under test;       * the log() XQuery function will add an<event> element inside<events> element */
specifier|private
specifier|final
specifier|static
name|String
name|MODULE
init|=
literal|"module namespace trigger='http://exist-db.org/xquery/trigger'; "
operator|+
literal|"import module namespace xmldb='http://exist-db.org/xquery/xmldb'; "
operator|+
literal|"import module namespace util='http://exist-db.org/xquery/util'; "
operator|+
literal|""
operator|+
literal|"declare function trigger:logEvent($type as xs:string, $event as xs:string, $objectType as xs:string, $uri as xs:anyURI) {"
operator|+
literal|"let $isLoggedIn := xmldb:login('"
operator|+
name|XmldbURI
operator|.
name|LOCAL_DB
operator|+
literal|"/"
operator|+
name|TEST_COLLECTION
operator|+
literal|"', 'admin', '') return "
operator|+
literal|"xmldb:update("
operator|+
literal|"'"
operator|+
name|XmldbURI
operator|.
name|LOCAL_DB
operator|+
literal|"/"
operator|+
name|TEST_COLLECTION
operator|+
literal|"', "
operator|+
literal|"<xu:modifications xmlns:xu='http://www.xmldb.org/xupdate' version='1.0'>"
operator|+
literal|"<xu:append select='/events'>"
operator|+
literal|"<xu:element name='event'>"
operator|+
literal|"<xu:attribute name='time'>{current-dateTime()}</xu:attribute>"
operator|+
literal|"<xu:attribute name='type'>{$type}</xu:attribute>"
operator|+
literal|"<xu:attribute name='event'>{$event}</xu:attribute>"
operator|+
literal|"<xu:attribute name='object-type'>{$objectType}</xu:attribute>"
operator|+
literal|"<xu:element name='collection'>{$uri}</xu:element>"
operator|+
literal|"<xu:element name='uri'>{$uri}</xu:element>"
operator|+
literal|"</xu:element>"
operator|+
literal|"</xu:append>"
operator|+
literal|"</xu:modifications>"
operator|+
literal|")"
operator|+
literal|"};"
operator|+
literal|""
operator|+
literal|"declare function trigger:before-create-collection($uri as xs:anyURI) {"
operator|+
literal|"trigger:logEvent('before', 'create', 'collection', $uri)"
operator|+
literal|"};"
operator|+
literal|""
operator|+
literal|"declare function trigger:after-create-collection($uri as xs:anyURI) {"
operator|+
literal|"trigger:logEvent('after', 'create', 'collection', $uri)"
operator|+
literal|"};"
operator|+
literal|""
operator|+
literal|"declare function trigger:before-update-collection($uri as xs:anyURI) {"
operator|+
literal|"trigger:logEvent('before', 'update', 'collection', $uri)"
operator|+
literal|"};"
operator|+
literal|""
operator|+
literal|"declare function trigger:after-update-collection($uri as xs:anyURI) {"
operator|+
literal|"trigger:logEvent('after', 'update', 'collection', $uri)"
operator|+
literal|"};"
operator|+
literal|""
operator|+
literal|"declare function trigger:before-copy-collection($uri as xs:anyURI, $new-uri as xs:anyURI) {"
operator|+
literal|"trigger:logEvent('before', 'copy', 'collection', $uri)"
operator|+
literal|"};"
operator|+
literal|""
operator|+
literal|"declare function trigger:after-copy-collection($new-uri as xs:anyURI, $uri as xs:anyURI) {"
operator|+
literal|"trigger:logEvent('after', 'copy', 'collection', $new-uri)"
operator|+
literal|"};"
operator|+
literal|""
operator|+
literal|"declare function trigger:before-move-collection($uri as xs:anyURI, $new-uri as xs:anyURI) {"
operator|+
literal|"trigger:logEvent('before', 'move', 'collection', $uri)"
operator|+
literal|"};"
operator|+
literal|""
operator|+
literal|"declare function trigger:after-move-collection($new-uri as xs:anyURI, $uri as xs:anyURI) {"
operator|+
literal|"trigger:logEvent('after', 'move', 'collection', $new-uri)"
operator|+
literal|"};"
operator|+
literal|""
operator|+
literal|"declare function trigger:before-delete-collection($uri as xs:anyURI) {"
operator|+
literal|"trigger:logEvent('before', 'delete', 'collection', $uri)"
operator|+
literal|"};"
operator|+
literal|""
operator|+
literal|"declare function trigger:after-delete-collection($uri as xs:anyURI) {"
operator|+
literal|"trigger:logEvent('after', 'delete', 'collection', $uri)"
operator|+
literal|"};"
operator|+
literal|""
operator|+
comment|//DOCUMENT EVENTS
literal|"declare function trigger:before-create-document($uri as xs:anyURI) {"
operator|+
literal|"trigger:logEvent('before', 'create', 'document', $uri)"
operator|+
literal|"};"
operator|+
literal|""
operator|+
literal|"declare function trigger:after-create-document($uri as xs:anyURI) {"
operator|+
literal|"trigger:logEvent('after', 'create', 'document', $uri)"
operator|+
literal|"};"
operator|+
literal|""
operator|+
literal|"declare function trigger:before-update-document($uri as xs:anyURI) {"
operator|+
literal|"trigger:logEvent('before', 'update', 'document', $uri)"
operator|+
literal|"};"
operator|+
literal|""
operator|+
literal|"declare function trigger:after-update-document($uri as xs:anyURI) {"
operator|+
literal|"trigger:logEvent('after', 'update', 'document', $uri)"
operator|+
literal|"};"
operator|+
literal|""
operator|+
literal|"declare function trigger:before-copy-document($uri as xs:anyURI, $new-uri as xs:anyURI) {"
operator|+
literal|"trigger:logEvent('before', 'copy', 'document', $uri)"
operator|+
literal|"};"
operator|+
literal|""
operator|+
literal|"declare function trigger:after-copy-document($new-uri as xs:anyURI, $uri as xs:anyURI) {"
operator|+
literal|"trigger:logEvent('after', 'copy', 'document', $new-uri)"
operator|+
literal|"};"
operator|+
literal|""
operator|+
literal|"declare function trigger:before-move-document($uri as xs:anyURI, $new-uri as xs:anyURI) {"
operator|+
literal|"trigger:logEvent('before', 'move', 'document', $uri)"
operator|+
literal|"};"
operator|+
literal|""
operator|+
literal|"declare function trigger:after-move-document($new-uri as xs:anyURI, $uri as xs:anyURI) {"
operator|+
literal|"trigger:logEvent('after', 'move', 'document', $new-uri)"
operator|+
literal|"};"
operator|+
literal|""
operator|+
literal|"declare function trigger:before-delete-document($uri as xs:anyURI) {"
operator|+
literal|"trigger:logEvent('before', 'delete', 'document', $uri)"
operator|+
literal|"};"
operator|+
literal|""
operator|+
literal|"declare function trigger:after-delete-document($uri as xs:anyURI) {"
operator|+
literal|"trigger:logEvent('after', 'delete', 'document', $uri)"
operator|+
literal|"};"
operator|+
literal|""
decl_stmt|;
specifier|private
specifier|static
name|Collection
name|root
decl_stmt|;
specifier|private
specifier|static
name|Collection
name|testCollection
decl_stmt|;
comment|/** XQuery module implementing the invalid trigger under test */
specifier|private
specifier|final
specifier|static
name|String
name|INVALID_MODULE
init|=
literal|"module namespace log='log'; "
operator|+
literal|"import module namespace xmldb='http://exist-db.org/xquery/xmldb'; "
operator|+
literal|"declare variable $log:type external;"
operator|+
literal|"declare variable $log:collection external;"
operator|+
literal|"declare variable $log:uri external;"
operator|+
literal|"declare variable $log:event external;"
operator|+
literal|"declare function log:log($id as xs:string?) {"
operator|+
literal|"   undeclared-function-causes-trigger-error()"
operator|+
literal|"};"
decl_stmt|;
specifier|private
specifier|final
specifier|static
name|String
name|EVENTS
init|=
literal|"/events/event"
decl_stmt|;
specifier|private
specifier|final
specifier|static
name|String
name|BEFORE
init|=
name|EVENTS
operator|+
literal|"[@type = 'before']"
decl_stmt|;
specifier|private
specifier|final
specifier|static
name|String
name|AFTER
init|=
name|EVENTS
operator|+
literal|"[@type = 'after']"
decl_stmt|;
specifier|private
specifier|final
specifier|static
name|String
name|CREATE
init|=
literal|"[@event = 'create']"
decl_stmt|;
specifier|private
specifier|final
specifier|static
name|String
name|UPDATE
init|=
literal|"[@event = 'update']"
decl_stmt|;
specifier|private
specifier|final
specifier|static
name|String
name|COPY
init|=
literal|"[@event = 'copy']"
decl_stmt|;
specifier|private
specifier|final
specifier|static
name|String
name|MOVE
init|=
literal|"[@event = 'move']"
decl_stmt|;
specifier|private
specifier|final
specifier|static
name|String
name|DELETE
init|=
literal|"[@event = 'delete']"
decl_stmt|;
specifier|private
specifier|final
specifier|static
name|String
name|COLLECTION
init|=
literal|"[@object-type = 'collection']"
decl_stmt|;
specifier|private
specifier|final
specifier|static
name|String
name|DOCUMENT
init|=
literal|"[@object-type = 'document']"
decl_stmt|;
specifier|private
specifier|final
specifier|static
name|String
name|testCollectionURI
init|=
literal|"[uri/text() = '/db/testXQueryTrigger/test']"
decl_stmt|;
specifier|private
specifier|final
specifier|static
name|String
name|testDstCollectionURI
init|=
literal|"[uri/text() = '/db/testXQueryTrigger/test-dst']"
decl_stmt|;
specifier|private
specifier|final
specifier|static
name|String
name|documentURI
init|=
literal|"[uri/text() = '/db/testXQueryTrigger/test.xml']"
decl_stmt|;
specifier|private
specifier|final
specifier|static
name|String
name|binaryURI
init|=
literal|"[uri/text() = '/db/testXQueryTrigger/1x1.gif']"
decl_stmt|;
annotation|@
name|Rule
specifier|public
name|TestRule
name|watcher
init|=
operator|new
name|TestWatcher
argument_list|()
block|{
annotation|@
name|Override
specifier|protected
name|void
name|starting
parameter_list|(
name|Description
name|description
parameter_list|)
block|{
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"\nStarting test: "
operator|+
name|description
operator|.
name|getMethodName
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
decl_stmt|;
comment|/** just start the DB and create the test collection */
annotation|@
name|BeforeClass
specifier|public
specifier|static
name|void
name|startDB
parameter_list|()
throws|throws
name|ClassNotFoundException
throws|,
name|IllegalAccessException
throws|,
name|InstantiationException
throws|,
name|XMLDBException
block|{
comment|// initialize driver
specifier|final
name|Class
argument_list|<
name|?
argument_list|>
name|cl
init|=
name|Class
operator|.
name|forName
argument_list|(
literal|"org.exist.xmldb.DatabaseImpl"
argument_list|)
decl_stmt|;
specifier|final
name|Database
name|database
init|=
operator|(
name|Database
operator|)
name|cl
operator|.
name|newInstance
argument_list|()
decl_stmt|;
name|database
operator|.
name|setProperty
argument_list|(
literal|"create-database"
argument_list|,
literal|"true"
argument_list|)
expr_stmt|;
name|DatabaseManager
operator|.
name|registerDatabase
argument_list|(
name|database
argument_list|)
expr_stmt|;
name|root
operator|=
name|DatabaseManager
operator|.
name|getCollection
argument_list|(
name|XmldbURI
operator|.
name|LOCAL_DB
argument_list|,
literal|"admin"
argument_list|,
literal|""
argument_list|)
expr_stmt|;
specifier|final
name|CollectionManagementService
name|service
init|=
operator|(
name|CollectionManagementService
operator|)
name|root
operator|.
name|getService
argument_list|(
literal|"CollectionManagementService"
argument_list|,
literal|"1.0"
argument_list|)
decl_stmt|;
name|testCollection
operator|=
name|service
operator|.
name|createCollection
argument_list|(
name|TEST_COLLECTION
argument_list|)
expr_stmt|;
name|assertNotNull
argument_list|(
name|testCollection
argument_list|)
expr_stmt|;
block|}
annotation|@
name|AfterClass
specifier|public
specifier|static
name|void
name|shutdownDB
parameter_list|()
throws|throws
name|XMLDBException
block|{
name|TestUtils
operator|.
name|cleanupDB
argument_list|()
expr_stmt|;
specifier|final
name|Collection
name|root
init|=
name|DatabaseManager
operator|.
name|getCollection
argument_list|(
literal|"xmldb:exist://"
operator|+
name|XmldbURI
operator|.
name|ROOT_COLLECTION
argument_list|,
literal|"admin"
argument_list|,
literal|""
argument_list|)
decl_stmt|;
specifier|final
name|DatabaseInstanceManager
name|mgr
init|=
operator|(
name|DatabaseInstanceManager
operator|)
name|root
operator|.
name|getService
argument_list|(
literal|"DatabaseInstanceManager"
argument_list|,
literal|"1.0"
argument_list|)
decl_stmt|;
name|mgr
operator|.
name|shutdown
argument_list|()
expr_stmt|;
name|testCollection
operator|=
literal|null
expr_stmt|;
block|}
comment|/** create "log" document that will be updated by the trigger,      * and store the XQuery module implementing the trigger under test */
annotation|@
name|Before
specifier|public
name|void
name|storePreliminaryDocuments
parameter_list|()
throws|throws
name|XMLDBException
block|{
name|TestUtils
operator|.
name|cleanupDB
argument_list|()
expr_stmt|;
specifier|final
name|CollectionManagementService
name|service
init|=
operator|(
name|CollectionManagementService
operator|)
name|root
operator|.
name|getService
argument_list|(
literal|"CollectionManagementService"
argument_list|,
literal|"1.0"
argument_list|)
decl_stmt|;
name|testCollection
operator|=
name|service
operator|.
name|createCollection
argument_list|(
name|TEST_COLLECTION
argument_list|)
expr_stmt|;
name|assertNotNull
argument_list|(
name|testCollection
argument_list|)
expr_stmt|;
specifier|final
name|XMLResource
name|doc
init|=
operator|(
name|XMLResource
operator|)
name|testCollection
operator|.
name|createResource
argument_list|(
name|LOG_NAME
argument_list|,
literal|"XMLResource"
argument_list|)
decl_stmt|;
name|doc
operator|.
name|setContent
argument_list|(
name|EMPTY_LOG
argument_list|)
expr_stmt|;
name|testCollection
operator|.
name|storeResource
argument_list|(
name|doc
argument_list|)
expr_stmt|;
specifier|final
name|BinaryResource
name|module
init|=
operator|(
name|BinaryResource
operator|)
name|testCollection
operator|.
name|createResource
argument_list|(
name|MODULE_NAME
argument_list|,
literal|"BinaryResource"
argument_list|)
decl_stmt|;
operator|(
operator|(
name|EXistResource
operator|)
name|module
operator|)
operator|.
name|setMimeType
argument_list|(
literal|"application/xquery"
argument_list|)
expr_stmt|;
name|module
operator|.
name|setContent
argument_list|(
name|MODULE
operator|.
name|getBytes
argument_list|()
argument_list|)
expr_stmt|;
name|testCollection
operator|.
name|storeResource
argument_list|(
name|module
argument_list|)
expr_stmt|;
block|}
comment|/** test a trigger fired by storing a new Document  */
annotation|@
name|Test
specifier|public
name|void
name|documentCreate
parameter_list|()
throws|throws
name|XMLDBException
block|{
comment|// configure the Collection with the trigger under test
specifier|final
name|IndexQueryService
name|idxConf
init|=
operator|(
name|IndexQueryService
operator|)
name|testCollection
operator|.
name|getService
argument_list|(
literal|"IndexQueryService"
argument_list|,
literal|"1.0"
argument_list|)
decl_stmt|;
name|idxConf
operator|.
name|configureCollection
argument_list|(
name|COLLECTION_CONFIG
argument_list|)
expr_stmt|;
comment|// this will fire the trigger
specifier|final
name|XMLResource
name|doc
init|=
operator|(
name|XMLResource
operator|)
name|testCollection
operator|.
name|createResource
argument_list|(
name|DOCUMENT_NAME
argument_list|,
literal|"XMLResource"
argument_list|)
decl_stmt|;
name|doc
operator|.
name|setContent
argument_list|(
name|DOCUMENT_CONTENT
argument_list|)
expr_stmt|;
name|testCollection
operator|.
name|storeResource
argument_list|(
name|doc
argument_list|)
expr_stmt|;
comment|// remove the trigger for the Collection under test
name|idxConf
operator|.
name|configureCollection
argument_list|(
name|EMPTY_COLLECTION_CONFIG
argument_list|)
expr_stmt|;
specifier|final
name|XPathQueryService
name|service
init|=
operator|(
name|XPathQueryService
operator|)
name|testCollection
operator|.
name|getService
argument_list|(
literal|"XPathQueryService"
argument_list|,
literal|"1.0"
argument_list|)
decl_stmt|;
name|ResourceSet
name|result
init|=
name|service
operator|.
name|query
argument_list|(
name|BEFORE
operator|+
name|CREATE
operator|+
name|DOCUMENT
operator|+
name|documentURI
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|result
operator|.
name|getSize
argument_list|()
argument_list|)
expr_stmt|;
name|result
operator|=
name|service
operator|.
name|query
argument_list|(
name|AFTER
operator|+
name|CREATE
operator|+
name|DOCUMENT
operator|+
name|documentURI
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|result
operator|.
name|getSize
argument_list|()
argument_list|)
expr_stmt|;
name|result
operator|=
name|service
operator|.
name|query
argument_list|(
name|EVENTS
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|result
operator|.
name|getSize
argument_list|()
argument_list|)
expr_stmt|;
comment|//TODO: document itself
comment|//	        result = service.query(afterCreate+objDocument+documentURI+"/document/test");
comment|//	        assertEquals(1, result.getSize());
comment|//	        assertXMLEqual(DOCUMENT_CONTENT, ((XMLResource)result.getResource(0)).getContent().toString());
block|}
comment|/** test a trigger fired by a Document Update */
annotation|@
name|Test
specifier|public
name|void
name|documentUpdate
parameter_list|()
throws|throws
name|XMLDBException
block|{
specifier|final
name|IndexQueryService
name|idxConf
init|=
operator|(
name|IndexQueryService
operator|)
name|testCollection
operator|.
name|getService
argument_list|(
literal|"IndexQueryService"
argument_list|,
literal|"1.0"
argument_list|)
decl_stmt|;
name|idxConf
operator|.
name|configureCollection
argument_list|(
name|COLLECTION_CONFIG
argument_list|)
expr_stmt|;
specifier|final
name|XMLResource
name|doc
init|=
operator|(
name|XMLResource
operator|)
name|testCollection
operator|.
name|createResource
argument_list|(
name|DOCUMENT_NAME
argument_list|,
literal|"XMLResource"
argument_list|)
decl_stmt|;
name|doc
operator|.
name|setContent
argument_list|(
name|DOCUMENT_CONTENT
argument_list|)
expr_stmt|;
name|testCollection
operator|.
name|storeResource
argument_list|(
name|doc
argument_list|)
expr_stmt|;
comment|//TODO : trigger UPDATE events !
specifier|final
name|XUpdateQueryService
name|update
init|=
operator|(
name|XUpdateQueryService
operator|)
name|testCollection
operator|.
name|getService
argument_list|(
literal|"XUpdateQueryService"
argument_list|,
literal|"1.0"
argument_list|)
decl_stmt|;
name|update
operator|.
name|updateResource
argument_list|(
name|DOCUMENT_NAME
argument_list|,
name|DOCUMENT_UPDATE
argument_list|)
expr_stmt|;
name|idxConf
operator|.
name|configureCollection
argument_list|(
name|EMPTY_COLLECTION_CONFIG
argument_list|)
expr_stmt|;
specifier|final
name|XPathQueryService
name|service
init|=
operator|(
name|XPathQueryService
operator|)
name|testCollection
operator|.
name|getService
argument_list|(
literal|"XPathQueryService"
argument_list|,
literal|"1.0"
argument_list|)
decl_stmt|;
comment|// this is necessary to compare with MODIFIED_DOCUMENT_CONTENT ; TODO better compare with XML diff tool
name|service
operator|.
name|setProperty
argument_list|(
name|OutputKeys
operator|.
name|INDENT
argument_list|,
literal|"no"
argument_list|)
expr_stmt|;
name|ResourceSet
name|result
init|=
name|service
operator|.
name|query
argument_list|(
name|BEFORE
operator|+
name|CREATE
operator|+
name|DOCUMENT
operator|+
name|documentURI
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|result
operator|.
name|getSize
argument_list|()
argument_list|)
expr_stmt|;
name|result
operator|=
name|service
operator|.
name|query
argument_list|(
name|AFTER
operator|+
name|CREATE
operator|+
name|DOCUMENT
operator|+
name|documentURI
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|result
operator|.
name|getSize
argument_list|()
argument_list|)
expr_stmt|;
name|result
operator|=
name|service
operator|.
name|query
argument_list|(
name|BEFORE
operator|+
name|UPDATE
operator|+
name|DOCUMENT
operator|+
name|documentURI
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|result
operator|.
name|getSize
argument_list|()
argument_list|)
expr_stmt|;
name|result
operator|=
name|service
operator|.
name|query
argument_list|(
name|AFTER
operator|+
name|UPDATE
operator|+
name|DOCUMENT
operator|+
name|documentURI
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|result
operator|.
name|getSize
argument_list|()
argument_list|)
expr_stmt|;
name|result
operator|=
name|service
operator|.
name|query
argument_list|(
name|EVENTS
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|4
argument_list|,
name|result
operator|.
name|getSize
argument_list|()
argument_list|)
expr_stmt|;
comment|//TODO: document itself
comment|//	        result = service.query("/events/event[@id = 'trigger2']/document/test");
comment|//	        assertEquals(2, result.getSize());
comment|//	        assertXMLEqual(DOCUMENT_CONTENT, result.getResource(0).getContent().toString());
comment|//	        assertXMLEqual(MODIFIED_DOCUMENT_CONTENT, result.getResource(1).getContent().toString());
block|}
comment|/** test a trigger fired by a Document Delete */
annotation|@
name|Test
specifier|public
name|void
name|documentDelete
parameter_list|()
throws|throws
name|XMLDBException
block|{
specifier|final
name|IndexQueryService
name|idxConf
init|=
operator|(
name|IndexQueryService
operator|)
name|testCollection
operator|.
name|getService
argument_list|(
literal|"IndexQueryService"
argument_list|,
literal|"1.0"
argument_list|)
decl_stmt|;
name|idxConf
operator|.
name|configureCollection
argument_list|(
name|COLLECTION_CONFIG
argument_list|)
expr_stmt|;
specifier|final
name|XMLResource
name|doc
init|=
operator|(
name|XMLResource
operator|)
name|testCollection
operator|.
name|createResource
argument_list|(
name|DOCUMENT_NAME
argument_list|,
literal|"XMLResource"
argument_list|)
decl_stmt|;
name|doc
operator|.
name|setContent
argument_list|(
name|DOCUMENT_CONTENT
argument_list|)
expr_stmt|;
name|testCollection
operator|.
name|storeResource
argument_list|(
name|doc
argument_list|)
expr_stmt|;
name|testCollection
operator|.
name|removeResource
argument_list|(
name|testCollection
operator|.
name|getResource
argument_list|(
name|DOCUMENT_NAME
argument_list|)
argument_list|)
expr_stmt|;
name|idxConf
operator|.
name|configureCollection
argument_list|(
name|EMPTY_COLLECTION_CONFIG
argument_list|)
expr_stmt|;
specifier|final
name|XPathQueryService
name|service
init|=
operator|(
name|XPathQueryService
operator|)
name|testCollection
operator|.
name|getService
argument_list|(
literal|"XPathQueryService"
argument_list|,
literal|"1.0"
argument_list|)
decl_stmt|;
name|service
operator|.
name|setProperty
argument_list|(
name|OutputKeys
operator|.
name|INDENT
argument_list|,
literal|"no"
argument_list|)
expr_stmt|;
name|ResourceSet
name|result
init|=
name|service
operator|.
name|query
argument_list|(
name|BEFORE
operator|+
name|CREATE
operator|+
name|DOCUMENT
operator|+
name|documentURI
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|result
operator|.
name|getSize
argument_list|()
argument_list|)
expr_stmt|;
name|result
operator|=
name|service
operator|.
name|query
argument_list|(
name|AFTER
operator|+
name|CREATE
operator|+
name|DOCUMENT
operator|+
name|documentURI
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|result
operator|.
name|getSize
argument_list|()
argument_list|)
expr_stmt|;
name|result
operator|=
name|service
operator|.
name|query
argument_list|(
name|BEFORE
operator|+
name|DELETE
operator|+
name|DOCUMENT
operator|+
name|documentURI
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|result
operator|.
name|getSize
argument_list|()
argument_list|)
expr_stmt|;
name|result
operator|=
name|service
operator|.
name|query
argument_list|(
name|AFTER
operator|+
name|DELETE
operator|+
name|DOCUMENT
operator|+
name|documentURI
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|result
operator|.
name|getSize
argument_list|()
argument_list|)
expr_stmt|;
name|result
operator|=
name|service
operator|.
name|query
argument_list|(
name|EVENTS
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|4
argument_list|,
name|result
operator|.
name|getSize
argument_list|()
argument_list|)
expr_stmt|;
comment|//TODO: document itself
comment|//	        result = service.query("/events/event[@id = 'trigger3']/document/test");
comment|//	        assertEquals(1, result.getSize());
comment|//	        assertXMLEqual(MODIFIED_DOCUMENT_CONTENT, result.getResource(0).getContent().toString());
block|}
comment|/** test a trigger fired by creating a new Binary Document  */
annotation|@
name|Test
specifier|public
name|void
name|documentBinaryCreate
parameter_list|()
throws|throws
name|XMLDBException
block|{
comment|// configure the Collection with the trigger under test
specifier|final
name|IndexQueryService
name|idxConf
init|=
operator|(
name|IndexQueryService
operator|)
name|testCollection
operator|.
name|getService
argument_list|(
literal|"IndexQueryService"
argument_list|,
literal|"1.0"
argument_list|)
decl_stmt|;
name|idxConf
operator|.
name|configureCollection
argument_list|(
name|COLLECTION_CONFIG
argument_list|)
expr_stmt|;
comment|// this will fire the trigger
specifier|final
name|Resource
name|res
init|=
name|testCollection
operator|.
name|createResource
argument_list|(
name|BINARY_DOCUMENT_NAME
argument_list|,
literal|"BinaryResource"
argument_list|)
decl_stmt|;
name|Base64Decoder
name|dec
init|=
operator|new
name|Base64Decoder
argument_list|()
decl_stmt|;
name|dec
operator|.
name|translate
argument_list|(
name|BINARY_DOCUMENT_CONTENT
argument_list|)
expr_stmt|;
name|res
operator|.
name|setContent
argument_list|(
name|dec
operator|.
name|getByteArray
argument_list|()
argument_list|)
expr_stmt|;
name|testCollection
operator|.
name|storeResource
argument_list|(
name|res
argument_list|)
expr_stmt|;
comment|// remove the trigger for the Collection under test
name|idxConf
operator|.
name|configureCollection
argument_list|(
name|EMPTY_COLLECTION_CONFIG
argument_list|)
expr_stmt|;
specifier|final
name|XPathQueryService
name|service
init|=
operator|(
name|XPathQueryService
operator|)
name|testCollection
operator|.
name|getService
argument_list|(
literal|"XPathQueryService"
argument_list|,
literal|"1.0"
argument_list|)
decl_stmt|;
comment|//TODO : understand why it is necessary !
name|service
operator|.
name|setProperty
argument_list|(
name|OutputKeys
operator|.
name|INDENT
argument_list|,
literal|"no"
argument_list|)
expr_stmt|;
name|ResourceSet
name|result
init|=
name|service
operator|.
name|query
argument_list|(
name|BEFORE
operator|+
name|CREATE
operator|+
name|DOCUMENT
operator|+
name|binaryURI
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|result
operator|.
name|getSize
argument_list|()
argument_list|)
expr_stmt|;
name|result
operator|=
name|service
operator|.
name|query
argument_list|(
name|AFTER
operator|+
name|CREATE
operator|+
name|DOCUMENT
operator|+
name|binaryURI
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|result
operator|.
name|getSize
argument_list|()
argument_list|)
expr_stmt|;
name|result
operator|=
name|service
operator|.
name|query
argument_list|(
name|EVENTS
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|result
operator|.
name|getSize
argument_list|()
argument_list|)
expr_stmt|;
comment|//TODO: document itself
comment|//	        result = service.query("/events/event[@id = 'trigger1'][@type = 'finish'][collection = '" + DBBroker.ROOT_COLLECTION +  "/" + TEST_COLLECTION + "'][uri = '" + DBBroker.ROOT_COLLECTION +  "/" + TEST_COLLECTION + "/" + BINARY_DOCUMENT_NAME + "'][event = 'CREATE-DOCUMENT']/document");
comment|//	        assertEquals(1, result.getSize());
comment|//	        assertEquals("<document>" + BINARY_DOCUMENT_CONTENT + "</document>", result.getResource(0).getContent().toString());
block|}
comment|/** test a trigger fired by a Binary Document Delete */
annotation|@
name|Test
specifier|public
name|void
name|documentBinaryDelete
parameter_list|()
throws|throws
name|XMLDBException
block|{
specifier|final
name|IndexQueryService
name|idxConf
init|=
operator|(
name|IndexQueryService
operator|)
name|testCollection
operator|.
name|getService
argument_list|(
literal|"IndexQueryService"
argument_list|,
literal|"1.0"
argument_list|)
decl_stmt|;
name|idxConf
operator|.
name|configureCollection
argument_list|(
name|COLLECTION_CONFIG
argument_list|)
expr_stmt|;
comment|// this will fire the trigger
specifier|final
name|Resource
name|res
init|=
name|testCollection
operator|.
name|createResource
argument_list|(
name|BINARY_DOCUMENT_NAME
argument_list|,
literal|"BinaryResource"
argument_list|)
decl_stmt|;
specifier|final
name|Base64Decoder
name|dec
init|=
operator|new
name|Base64Decoder
argument_list|()
decl_stmt|;
name|dec
operator|.
name|translate
argument_list|(
name|BINARY_DOCUMENT_CONTENT
argument_list|)
expr_stmt|;
name|res
operator|.
name|setContent
argument_list|(
name|dec
operator|.
name|getByteArray
argument_list|()
argument_list|)
expr_stmt|;
name|testCollection
operator|.
name|storeResource
argument_list|(
name|res
argument_list|)
expr_stmt|;
name|testCollection
operator|.
name|removeResource
argument_list|(
name|testCollection
operator|.
name|getResource
argument_list|(
name|BINARY_DOCUMENT_NAME
argument_list|)
argument_list|)
expr_stmt|;
name|idxConf
operator|.
name|configureCollection
argument_list|(
name|EMPTY_COLLECTION_CONFIG
argument_list|)
expr_stmt|;
specifier|final
name|XPathQueryService
name|service
init|=
operator|(
name|XPathQueryService
operator|)
name|testCollection
operator|.
name|getService
argument_list|(
literal|"XPathQueryService"
argument_list|,
literal|"1.0"
argument_list|)
decl_stmt|;
name|service
operator|.
name|setProperty
argument_list|(
name|OutputKeys
operator|.
name|INDENT
argument_list|,
literal|"no"
argument_list|)
expr_stmt|;
name|ResourceSet
name|result
init|=
name|service
operator|.
name|query
argument_list|(
name|BEFORE
operator|+
name|CREATE
operator|+
name|DOCUMENT
operator|+
name|binaryURI
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|result
operator|.
name|getSize
argument_list|()
argument_list|)
expr_stmt|;
name|result
operator|=
name|service
operator|.
name|query
argument_list|(
name|AFTER
operator|+
name|CREATE
operator|+
name|DOCUMENT
operator|+
name|binaryURI
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|result
operator|.
name|getSize
argument_list|()
argument_list|)
expr_stmt|;
name|result
operator|=
name|service
operator|.
name|query
argument_list|(
name|BEFORE
operator|+
name|DELETE
operator|+
name|DOCUMENT
operator|+
name|binaryURI
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|result
operator|.
name|getSize
argument_list|()
argument_list|)
expr_stmt|;
name|result
operator|=
name|service
operator|.
name|query
argument_list|(
name|AFTER
operator|+
name|DELETE
operator|+
name|DOCUMENT
operator|+
name|binaryURI
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|result
operator|.
name|getSize
argument_list|()
argument_list|)
expr_stmt|;
name|result
operator|=
name|service
operator|.
name|query
argument_list|(
name|EVENTS
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|4
argument_list|,
name|result
operator|.
name|getSize
argument_list|()
argument_list|)
expr_stmt|;
comment|//TODO: document itself
comment|//	        result = service.query("/events/event[@id = 'trigger3'][@type = 'prepare'][collection = '" + DBBroker.ROOT_COLLECTION +  "/" + TEST_COLLECTION + "'][uri = '" + DBBroker.ROOT_COLLECTION +  "/" + TEST_COLLECTION + "/" + BINARY_DOCUMENT_NAME + "'][event = 'DELETE-DOCUMENT']/document");
comment|//	        assertEquals(1, result.getSize());
comment|//	        assertEquals("<document>" + BINARY_DOCUMENT_CONTENT + "</document>", result.getResource(0).getContent().toString());
block|}
comment|/** test a trigger fired by a Collection manipulations */
annotation|@
name|Test
specifier|public
name|void
name|collectionCreate
parameter_list|()
throws|throws
name|XMLDBException
block|{
specifier|final
name|IndexQueryService
name|idxConf
init|=
operator|(
name|IndexQueryService
operator|)
name|root
operator|.
name|getService
argument_list|(
literal|"IndexQueryService"
argument_list|,
literal|"1.0"
argument_list|)
decl_stmt|;
name|idxConf
operator|.
name|configureCollection
argument_list|(
name|COLLECTION_CONFIG
argument_list|)
expr_stmt|;
specifier|final
name|CollectionManagementService
name|service
init|=
operator|(
name|CollectionManagementService
operator|)
name|testCollection
operator|.
name|getService
argument_list|(
literal|"CollectionManagementService"
argument_list|,
literal|"1.0"
argument_list|)
decl_stmt|;
specifier|final
name|Collection
name|collection
init|=
name|service
operator|.
name|createCollection
argument_list|(
literal|"test"
argument_list|)
decl_stmt|;
name|assertNotNull
argument_list|(
name|collection
argument_list|)
expr_stmt|;
comment|// remove the trigger for the Collection under test
name|idxConf
operator|.
name|configureCollection
argument_list|(
name|EMPTY_COLLECTION_CONFIG
argument_list|)
expr_stmt|;
specifier|final
name|XPathQueryService
name|query
init|=
operator|(
name|XPathQueryService
operator|)
name|root
operator|.
name|getService
argument_list|(
literal|"XPathQueryService"
argument_list|,
literal|"1.0"
argument_list|)
decl_stmt|;
name|ResourceSet
name|result
init|=
name|query
operator|.
name|query
argument_list|(
name|BEFORE
operator|+
name|CREATE
operator|+
name|COLLECTION
operator|+
name|testCollectionURI
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|result
operator|.
name|getSize
argument_list|()
argument_list|)
expr_stmt|;
name|result
operator|=
name|query
operator|.
name|query
argument_list|(
name|AFTER
operator|+
name|CREATE
operator|+
name|COLLECTION
operator|+
name|testCollectionURI
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|result
operator|.
name|getSize
argument_list|()
argument_list|)
expr_stmt|;
name|result
operator|=
name|query
operator|.
name|query
argument_list|(
name|EVENTS
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|result
operator|.
name|getSize
argument_list|()
argument_list|)
expr_stmt|;
block|}
comment|/** test a trigger fired by a Collection manipulations */
annotation|@
name|Test
annotation|@
name|Ignore
specifier|public
name|void
name|collectionCopy
parameter_list|()
throws|throws
name|XMLDBException
throws|,
name|URISyntaxException
block|{
specifier|final
name|IndexQueryService
name|idxConf
init|=
operator|(
name|IndexQueryService
operator|)
name|root
operator|.
name|getService
argument_list|(
literal|"IndexQueryService"
argument_list|,
literal|"1.0"
argument_list|)
decl_stmt|;
name|idxConf
operator|.
name|configureCollection
argument_list|(
name|COLLECTION_CONFIG
argument_list|)
expr_stmt|;
specifier|final
name|XmldbURI
name|srcURI
init|=
name|XmldbURI
operator|.
name|xmldbUriFor
argument_list|(
literal|"/db/testXQueryTrigger/test"
argument_list|)
decl_stmt|;
specifier|final
name|XmldbURI
name|dstURI
init|=
name|XmldbURI
operator|.
name|xmldbUriFor
argument_list|(
literal|"/db/testXQueryTrigger/test-dst"
argument_list|)
decl_stmt|;
specifier|final
name|CollectionManagementServiceImpl
name|service
init|=
operator|(
name|CollectionManagementServiceImpl
operator|)
name|testCollection
operator|.
name|getService
argument_list|(
literal|"CollectionManagementService"
argument_list|,
literal|"1.0"
argument_list|)
decl_stmt|;
specifier|final
name|Collection
name|src
init|=
name|service
operator|.
name|createCollection
argument_list|(
literal|"test"
argument_list|)
decl_stmt|;
name|assertNotNull
argument_list|(
name|src
argument_list|)
expr_stmt|;
specifier|final
name|Collection
name|dst
init|=
name|service
operator|.
name|createCollection
argument_list|(
literal|"test-dst"
argument_list|)
decl_stmt|;
name|assertNotNull
argument_list|(
name|dst
argument_list|)
expr_stmt|;
name|service
operator|.
name|copy
argument_list|(
name|srcURI
argument_list|,
name|dstURI
argument_list|,
literal|null
argument_list|)
expr_stmt|;
comment|// remove the trigger for the Collection under test
name|idxConf
operator|.
name|configureCollection
argument_list|(
name|EMPTY_COLLECTION_CONFIG
argument_list|)
expr_stmt|;
specifier|final
name|XPathQueryService
name|query
init|=
operator|(
name|XPathQueryService
operator|)
name|root
operator|.
name|getService
argument_list|(
literal|"XPathQueryService"
argument_list|,
literal|"1.0"
argument_list|)
decl_stmt|;
name|ResourceSet
name|result
init|=
name|query
operator|.
name|query
argument_list|(
name|BEFORE
operator|+
name|CREATE
operator|+
name|COLLECTION
operator|+
name|testCollectionURI
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|result
operator|.
name|getSize
argument_list|()
argument_list|)
expr_stmt|;
name|result
operator|=
name|query
operator|.
name|query
argument_list|(
name|AFTER
operator|+
name|CREATE
operator|+
name|COLLECTION
operator|+
name|testCollectionURI
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|result
operator|.
name|getSize
argument_list|()
argument_list|)
expr_stmt|;
name|result
operator|=
name|query
operator|.
name|query
argument_list|(
name|BEFORE
operator|+
name|CREATE
operator|+
name|COLLECTION
operator|+
name|testDstCollectionURI
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|result
operator|.
name|getSize
argument_list|()
argument_list|)
expr_stmt|;
name|result
operator|=
name|query
operator|.
name|query
argument_list|(
name|AFTER
operator|+
name|CREATE
operator|+
name|COLLECTION
operator|+
name|testDstCollectionURI
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|result
operator|.
name|getSize
argument_list|()
argument_list|)
expr_stmt|;
name|result
operator|=
name|query
operator|.
name|query
argument_list|(
name|BEFORE
operator|+
name|COPY
operator|+
name|COLLECTION
operator|+
name|testCollectionURI
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|result
operator|.
name|getSize
argument_list|()
argument_list|)
expr_stmt|;
name|result
operator|=
name|query
operator|.
name|query
argument_list|(
name|AFTER
operator|+
name|COPY
operator|+
name|COLLECTION
operator|+
name|testCollectionURI
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|result
operator|.
name|getSize
argument_list|()
argument_list|)
expr_stmt|;
name|result
operator|=
name|query
operator|.
name|query
argument_list|(
name|EVENTS
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|6
argument_list|,
name|result
operator|.
name|getSize
argument_list|()
argument_list|)
expr_stmt|;
block|}
comment|/** test a trigger fired by a Collection manipulations */
annotation|@
name|Test
specifier|public
name|void
name|collectionMove
parameter_list|()
throws|throws
name|XMLDBException
throws|,
name|URISyntaxException
block|{
specifier|final
name|IndexQueryService
name|idxConf
init|=
operator|(
name|IndexQueryService
operator|)
name|root
operator|.
name|getService
argument_list|(
literal|"IndexQueryService"
argument_list|,
literal|"1.0"
argument_list|)
decl_stmt|;
name|idxConf
operator|.
name|configureCollection
argument_list|(
name|COLLECTION_CONFIG
argument_list|)
expr_stmt|;
name|XmldbURI
name|srcURI
init|=
name|XmldbURI
operator|.
name|xmldbUriFor
argument_list|(
literal|"/db/testXQueryTrigger/test"
argument_list|)
decl_stmt|;
name|XmldbURI
name|dstURI
init|=
name|XmldbURI
operator|.
name|xmldbUriFor
argument_list|(
literal|"/db/testXQueryTrigger/test-dst"
argument_list|)
decl_stmt|;
specifier|final
name|CollectionManagementServiceImpl
name|service
init|=
operator|(
name|CollectionManagementServiceImpl
operator|)
name|testCollection
operator|.
name|getService
argument_list|(
literal|"CollectionManagementService"
argument_list|,
literal|"1.0"
argument_list|)
decl_stmt|;
specifier|final
name|Collection
name|src
init|=
name|service
operator|.
name|createCollection
argument_list|(
literal|"test"
argument_list|)
decl_stmt|;
name|assertNotNull
argument_list|(
name|src
argument_list|)
expr_stmt|;
specifier|final
name|Collection
name|dst
init|=
name|service
operator|.
name|createCollection
argument_list|(
literal|"test-dst"
argument_list|)
decl_stmt|;
name|assertNotNull
argument_list|(
name|dst
argument_list|)
expr_stmt|;
name|service
operator|.
name|move
argument_list|(
name|srcURI
argument_list|,
name|dstURI
argument_list|,
literal|null
argument_list|)
expr_stmt|;
comment|// remove the trigger for the Collection under test
name|idxConf
operator|.
name|configureCollection
argument_list|(
name|EMPTY_COLLECTION_CONFIG
argument_list|)
expr_stmt|;
specifier|final
name|XPathQueryService
name|query
init|=
operator|(
name|XPathQueryService
operator|)
name|root
operator|.
name|getService
argument_list|(
literal|"XPathQueryService"
argument_list|,
literal|"1.0"
argument_list|)
decl_stmt|;
name|ResourceSet
name|result
init|=
name|query
operator|.
name|query
argument_list|(
name|BEFORE
operator|+
name|CREATE
operator|+
name|COLLECTION
operator|+
name|testCollectionURI
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|result
operator|.
name|getSize
argument_list|()
argument_list|)
expr_stmt|;
name|result
operator|=
name|query
operator|.
name|query
argument_list|(
name|AFTER
operator|+
name|CREATE
operator|+
name|COLLECTION
operator|+
name|testCollectionURI
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|result
operator|.
name|getSize
argument_list|()
argument_list|)
expr_stmt|;
name|result
operator|=
name|query
operator|.
name|query
argument_list|(
name|BEFORE
operator|+
name|CREATE
operator|+
name|COLLECTION
operator|+
name|testDstCollectionURI
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|result
operator|.
name|getSize
argument_list|()
argument_list|)
expr_stmt|;
name|result
operator|=
name|query
operator|.
name|query
argument_list|(
name|AFTER
operator|+
name|CREATE
operator|+
name|COLLECTION
operator|+
name|testDstCollectionURI
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|result
operator|.
name|getSize
argument_list|()
argument_list|)
expr_stmt|;
name|result
operator|=
name|query
operator|.
name|query
argument_list|(
name|AFTER
operator|+
name|MOVE
operator|+
name|COLLECTION
operator|+
name|testCollectionURI
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|result
operator|.
name|getSize
argument_list|()
argument_list|)
expr_stmt|;
name|result
operator|=
name|query
operator|.
name|query
argument_list|(
name|AFTER
operator|+
name|MOVE
operator|+
name|COLLECTION
operator|+
name|testCollectionURI
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|result
operator|.
name|getSize
argument_list|()
argument_list|)
expr_stmt|;
name|result
operator|=
name|query
operator|.
name|query
argument_list|(
name|EVENTS
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|6
argument_list|,
name|result
operator|.
name|getSize
argument_list|()
argument_list|)
expr_stmt|;
block|}
comment|/** test a trigger fired by a Collection manipulations */
annotation|@
name|Test
specifier|public
name|void
name|collectionDelete
parameter_list|()
throws|throws
name|XMLDBException
block|{
specifier|final
name|IndexQueryService
name|idxConf
init|=
operator|(
name|IndexQueryService
operator|)
name|testCollection
operator|.
name|getService
argument_list|(
literal|"IndexQueryService"
argument_list|,
literal|"1.0"
argument_list|)
decl_stmt|;
name|idxConf
operator|.
name|configureCollection
argument_list|(
name|COLLECTION_CONFIG
argument_list|)
expr_stmt|;
specifier|final
name|CollectionManagementService
name|service
init|=
operator|(
name|CollectionManagementService
operator|)
name|testCollection
operator|.
name|getService
argument_list|(
literal|"CollectionManagementService"
argument_list|,
literal|"1.0"
argument_list|)
decl_stmt|;
specifier|final
name|Collection
name|collection
init|=
name|service
operator|.
name|createCollection
argument_list|(
literal|"test"
argument_list|)
decl_stmt|;
name|assertNotNull
argument_list|(
name|collection
argument_list|)
expr_stmt|;
name|service
operator|.
name|removeCollection
argument_list|(
literal|"test"
argument_list|)
expr_stmt|;
comment|// remove the trigger for the Collection under test
name|idxConf
operator|.
name|configureCollection
argument_list|(
name|EMPTY_COLLECTION_CONFIG
argument_list|)
expr_stmt|;
specifier|final
name|XPathQueryService
name|query
init|=
operator|(
name|XPathQueryService
operator|)
name|root
operator|.
name|getService
argument_list|(
literal|"XPathQueryService"
argument_list|,
literal|"1.0"
argument_list|)
decl_stmt|;
name|ResourceSet
name|result
init|=
name|query
operator|.
name|query
argument_list|(
name|BEFORE
operator|+
name|CREATE
operator|+
name|COLLECTION
operator|+
name|testCollectionURI
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|result
operator|.
name|getSize
argument_list|()
argument_list|)
expr_stmt|;
name|result
operator|=
name|query
operator|.
name|query
argument_list|(
name|AFTER
operator|+
name|CREATE
operator|+
name|COLLECTION
operator|+
name|testCollectionURI
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|result
operator|.
name|getSize
argument_list|()
argument_list|)
expr_stmt|;
name|result
operator|=
name|query
operator|.
name|query
argument_list|(
name|BEFORE
operator|+
name|DELETE
operator|+
name|COLLECTION
operator|+
name|testCollectionURI
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|result
operator|.
name|getSize
argument_list|()
argument_list|)
expr_stmt|;
name|result
operator|=
name|query
operator|.
name|query
argument_list|(
name|AFTER
operator|+
name|DELETE
operator|+
name|COLLECTION
operator|+
name|testCollectionURI
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|result
operator|.
name|getSize
argument_list|()
argument_list|)
expr_stmt|;
name|result
operator|=
name|query
operator|.
name|query
argument_list|(
literal|"/events/event"
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|4
argument_list|,
name|result
operator|.
name|getSize
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|storeDocument_invalidTriggerForPrepare
parameter_list|()
throws|throws
name|XMLDBException
block|{
specifier|final
name|BinaryResource
name|invalidModule
init|=
operator|(
name|BinaryResource
operator|)
name|testCollection
operator|.
name|createResource
argument_list|(
name|MODULE_NAME
argument_list|,
literal|"BinaryResource"
argument_list|)
decl_stmt|;
operator|(
operator|(
name|EXistResource
operator|)
name|invalidModule
operator|)
operator|.
name|setMimeType
argument_list|(
literal|"application/xquery"
argument_list|)
expr_stmt|;
name|invalidModule
operator|.
name|setContent
argument_list|(
name|INVALID_MODULE
operator|.
name|getBytes
argument_list|()
argument_list|)
expr_stmt|;
name|testCollection
operator|.
name|storeResource
argument_list|(
name|invalidModule
argument_list|)
expr_stmt|;
comment|// configure the Collection with the trigger under test
specifier|final
name|IndexQueryService
name|idxConf
init|=
operator|(
name|IndexQueryService
operator|)
name|testCollection
operator|.
name|getService
argument_list|(
literal|"IndexQueryService"
argument_list|,
literal|"1.0"
argument_list|)
decl_stmt|;
name|idxConf
operator|.
name|configureCollection
argument_list|(
name|COLLECTION_CONFIG
argument_list|)
expr_stmt|;
specifier|final
name|int
name|max_store_attempts
init|=
literal|10
decl_stmt|;
name|int
name|count_prepare_exceptions
init|=
literal|0
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|max_store_attempts
condition|;
name|i
operator|++
control|)
block|{
try|try
block|{
comment|// this will fire the trigger
specifier|final
name|XMLResource
name|doc
init|=
operator|(
name|XMLResource
operator|)
name|testCollection
operator|.
name|createResource
argument_list|(
name|DOCUMENT_NAME
argument_list|,
literal|"XMLResource"
argument_list|)
decl_stmt|;
name|doc
operator|.
name|setContent
argument_list|(
name|DOCUMENT_CONTENT
argument_list|)
expr_stmt|;
name|testCollection
operator|.
name|storeResource
argument_list|(
name|doc
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|XMLDBException
name|xdbe
parameter_list|)
block|{
if|if
condition|(
name|xdbe
operator|.
name|getCause
argument_list|()
operator|instanceof
name|TriggerException
condition|)
block|{
if|if
condition|(
name|xdbe
operator|.
name|getCause
argument_list|()
operator|.
name|getMessage
argument_list|()
operator|.
name|equals
argument_list|(
name|XQueryTrigger
operator|.
name|PEPARE_EXCEIPTION_MESSAGE
argument_list|)
condition|)
block|{
name|count_prepare_exceptions
operator|++
expr_stmt|;
block|}
block|}
block|}
block|}
name|assertEquals
argument_list|(
name|max_store_attempts
argument_list|,
name|count_prepare_exceptions
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

