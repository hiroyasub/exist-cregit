begin_unit|revision:1.0.0;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * eXist Open Source Native XML Database  * Copyright (C) 2001-2017 The eXist Project  * http://exist-db.org  *  * This program is free software; you can redistribute it and/or  * modify it under the terms of the GNU Lesser General Public License  * as published by the Free Software Foundation; either version 2  * of the License, or (at your option) any later version.  *  * This program is distributed in the hope that it will be useful,  * but WITHOUT ANY WARRANTY; without even the implied warranty of  * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the  * GNU Lesser General Public License for more details.  *  * You should have received a copy of the GNU Lesser General Public  * License along with this library; if not, write to the Free Software  * Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA  02110-1301  USA  */
end_comment

begin_package
package|package
name|org
operator|.
name|exist
operator|.
name|collections
package|;
end_package

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|EXistException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|collections
operator|.
name|triggers
operator|.
name|TriggerException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|security
operator|.
name|PermissionDeniedException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|storage
operator|.
name|BrokerPool
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|storage
operator|.
name|DBBroker
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|storage
operator|.
name|lock
operator|.
name|Lock
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|storage
operator|.
name|txn
operator|.
name|Txn
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|test
operator|.
name|ExistEmbeddedServer
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|util
operator|.
name|DatabaseConfigurationException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|util
operator|.
name|LockException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|xmldb
operator|.
name|XmldbURI
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|After
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Before
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|ClassRule
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|*
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|stream
operator|.
name|Collectors
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertEquals
import|;
end_import

begin_comment
comment|/**  * Tests around the ordering of Collections and Documents  * within a Collection  *  * @author Adam Retter<adam@evolvedbinary.com>  */
end_comment

begin_class
specifier|public
class|class
name|CollectionOrderTest
block|{
annotation|@
name|ClassRule
specifier|public
specifier|static
specifier|final
name|ExistEmbeddedServer
name|existEmbeddedServer
init|=
operator|new
name|ExistEmbeddedServer
argument_list|(
literal|true
argument_list|,
literal|false
argument_list|)
decl_stmt|;
specifier|private
specifier|static
name|XmldbURI
name|TEST_COLLECTION
init|=
name|XmldbURI
operator|.
name|ROOT_COLLECTION_URI
operator|.
name|append
argument_list|(
literal|"testCollectionOrder"
argument_list|)
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|int
name|SUB_COLLECTION_COUNT
init|=
literal|1000
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|int
name|MIN_NAME_LEN
init|=
literal|8
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|int
name|MAX_NAME_LEN
init|=
literal|20
decl_stmt|;
specifier|private
specifier|final
name|Random
name|random
init|=
operator|new
name|Random
argument_list|()
decl_stmt|;
annotation|@
name|Test
specifier|public
name|void
name|collectionOrderIsOldestFirst
parameter_list|()
throws|throws
name|EXistException
throws|,
name|PermissionDeniedException
throws|,
name|IOException
throws|,
name|TriggerException
throws|,
name|LockException
block|{
specifier|final
name|BrokerPool
name|pool
init|=
name|existEmbeddedServer
operator|.
name|getBrokerPool
argument_list|()
decl_stmt|;
specifier|final
name|List
argument_list|<
name|String
argument_list|>
name|subCollectionNames1
init|=
name|generateRandomNames
argument_list|(
name|SUB_COLLECTION_COUNT
operator|/
literal|2
argument_list|)
decl_stmt|;
name|createSubCollections
argument_list|(
name|pool
argument_list|,
name|subCollectionNames1
argument_list|)
expr_stmt|;
comment|// we delete some collections to ensure that collection ids will be reused in the next createSubCollections step
specifier|final
name|List
argument_list|<
name|String
argument_list|>
name|subCollectionNames1_toDelete
init|=
name|selectRandom
argument_list|(
name|subCollectionNames1
argument_list|,
name|SUB_COLLECTION_COUNT
operator|/
literal|10
argument_list|)
decl_stmt|;
name|deleteSubCollections
argument_list|(
name|pool
argument_list|,
name|subCollectionNames1_toDelete
argument_list|)
expr_stmt|;
specifier|final
name|List
argument_list|<
name|String
argument_list|>
name|subsetSubCollectionNames1
init|=
name|filterFrom
argument_list|(
name|subCollectionNames1
argument_list|,
name|subCollectionNames1_toDelete
argument_list|)
decl_stmt|;
specifier|final
name|List
argument_list|<
name|String
argument_list|>
name|subCollectionNames2
init|=
name|generateRandomNames
argument_list|(
name|SUB_COLLECTION_COUNT
operator|/
literal|2
argument_list|)
decl_stmt|;
name|createSubCollections
argument_list|(
name|pool
argument_list|,
name|subCollectionNames2
argument_list|)
expr_stmt|;
specifier|final
name|List
argument_list|<
name|String
argument_list|>
name|allSubCollectionNames
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|(
name|subsetSubCollectionNames1
operator|.
name|size
argument_list|()
operator|+
name|subCollectionNames2
operator|.
name|size
argument_list|()
argument_list|)
decl_stmt|;
name|allSubCollectionNames
operator|.
name|addAll
argument_list|(
name|subsetSubCollectionNames1
argument_list|)
expr_stmt|;
name|allSubCollectionNames
operator|.
name|addAll
argument_list|(
name|subCollectionNames2
argument_list|)
expr_stmt|;
name|assertOrderOfSubCollections
argument_list|(
name|pool
argument_list|,
name|allSubCollectionNames
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|collectionOrderIsOldestFirst_persistedOverRestart
parameter_list|()
throws|throws
name|EXistException
throws|,
name|PermissionDeniedException
throws|,
name|IOException
throws|,
name|TriggerException
throws|,
name|LockException
throws|,
name|DatabaseConfigurationException
block|{
name|BrokerPool
name|pool
init|=
name|existEmbeddedServer
operator|.
name|getBrokerPool
argument_list|()
decl_stmt|;
specifier|final
name|List
argument_list|<
name|String
argument_list|>
name|subCollectionNames1
init|=
name|generateRandomNames
argument_list|(
name|SUB_COLLECTION_COUNT
argument_list|)
decl_stmt|;
name|createSubCollections
argument_list|(
name|pool
argument_list|,
name|subCollectionNames1
argument_list|)
expr_stmt|;
comment|// we delete some collections to ensure that collection ids will be reused in the next createSubCollections step
specifier|final
name|List
argument_list|<
name|String
argument_list|>
name|subCollectionNames1_toDelete
init|=
name|selectRandom
argument_list|(
name|subCollectionNames1
argument_list|,
name|SUB_COLLECTION_COUNT
operator|/
literal|10
argument_list|)
decl_stmt|;
name|deleteSubCollections
argument_list|(
name|pool
argument_list|,
name|subCollectionNames1_toDelete
argument_list|)
expr_stmt|;
specifier|final
name|List
argument_list|<
name|String
argument_list|>
name|subsetSubCollectionNames1
init|=
name|filterFrom
argument_list|(
name|subCollectionNames1
argument_list|,
name|subCollectionNames1_toDelete
argument_list|)
decl_stmt|;
comment|// check the order of sub-collections
name|assertOrderOfSubCollections
argument_list|(
name|pool
argument_list|,
name|subsetSubCollectionNames1
argument_list|)
expr_stmt|;
comment|// restart the server to ensure the order is correctly persisted
name|existEmbeddedServer
operator|.
name|restart
argument_list|()
expr_stmt|;
name|pool
operator|=
name|existEmbeddedServer
operator|.
name|getBrokerPool
argument_list|()
expr_stmt|;
comment|// check the order of sub-collections
name|assertOrderOfSubCollections
argument_list|(
name|pool
argument_list|,
name|subsetSubCollectionNames1
argument_list|)
expr_stmt|;
comment|// add some more sub-collections
specifier|final
name|List
argument_list|<
name|String
argument_list|>
name|subCollectionNames2
init|=
name|generateRandomNames
argument_list|(
name|SUB_COLLECTION_COUNT
operator|/
literal|2
argument_list|)
decl_stmt|;
name|createSubCollections
argument_list|(
name|pool
argument_list|,
name|subCollectionNames2
argument_list|)
expr_stmt|;
comment|// check the order of all sub-collections
specifier|final
name|List
argument_list|<
name|String
argument_list|>
name|allSubCollectionNames
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|(
name|subsetSubCollectionNames1
operator|.
name|size
argument_list|()
operator|+
name|subCollectionNames2
operator|.
name|size
argument_list|()
argument_list|)
decl_stmt|;
name|allSubCollectionNames
operator|.
name|addAll
argument_list|(
name|subsetSubCollectionNames1
argument_list|)
expr_stmt|;
name|allSubCollectionNames
operator|.
name|addAll
argument_list|(
name|subCollectionNames2
argument_list|)
expr_stmt|;
name|assertOrderOfSubCollections
argument_list|(
name|pool
argument_list|,
name|allSubCollectionNames
argument_list|)
expr_stmt|;
comment|// restart the server to ensure the order is correctly persisted
name|existEmbeddedServer
operator|.
name|restart
argument_list|()
expr_stmt|;
name|pool
operator|=
name|existEmbeddedServer
operator|.
name|getBrokerPool
argument_list|()
expr_stmt|;
comment|// check the order of all sub-collections
name|assertOrderOfSubCollections
argument_list|(
name|pool
argument_list|,
name|allSubCollectionNames
argument_list|)
expr_stmt|;
block|}
specifier|private
name|void
name|createSubCollections
parameter_list|(
specifier|final
name|BrokerPool
name|pool
parameter_list|,
specifier|final
name|List
argument_list|<
name|String
argument_list|>
name|subCollectionNames
parameter_list|)
throws|throws
name|EXistException
throws|,
name|PermissionDeniedException
throws|,
name|IOException
throws|,
name|TriggerException
block|{
comment|// create the collections
try|try
init|(
specifier|final
name|DBBroker
name|broker
init|=
name|pool
operator|.
name|get
argument_list|(
name|Optional
operator|.
name|of
argument_list|(
name|pool
operator|.
name|getSecurityManager
argument_list|()
operator|.
name|getSystemSubject
argument_list|()
argument_list|)
argument_list|)
init|;
specifier|final
name|Txn
name|transaction
init|=
name|pool
operator|.
name|getTransactionManager
argument_list|()
operator|.
name|beginTransaction
argument_list|()
init|)
block|{
for|for
control|(
specifier|final
name|String
name|subCollectionName
range|:
name|subCollectionNames
control|)
block|{
name|broker
operator|.
name|getOrCreateCollection
argument_list|(
name|transaction
argument_list|,
name|TEST_COLLECTION
operator|.
name|append
argument_list|(
name|subCollectionName
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|transaction
operator|.
name|commit
argument_list|()
expr_stmt|;
block|}
block|}
specifier|private
name|void
name|deleteSubCollections
parameter_list|(
specifier|final
name|BrokerPool
name|pool
parameter_list|,
specifier|final
name|List
argument_list|<
name|String
argument_list|>
name|subCollectionNames
parameter_list|)
throws|throws
name|EXistException
throws|,
name|PermissionDeniedException
throws|,
name|IOException
throws|,
name|TriggerException
block|{
comment|// delete the collections
try|try
init|(
specifier|final
name|DBBroker
name|broker
init|=
name|pool
operator|.
name|get
argument_list|(
name|Optional
operator|.
name|of
argument_list|(
name|pool
operator|.
name|getSecurityManager
argument_list|()
operator|.
name|getSystemSubject
argument_list|()
argument_list|)
argument_list|)
init|;
specifier|final
name|Txn
name|transaction
init|=
name|pool
operator|.
name|getTransactionManager
argument_list|()
operator|.
name|beginTransaction
argument_list|()
init|)
block|{
for|for
control|(
specifier|final
name|String
name|subCollectionName
range|:
name|subCollectionNames
control|)
block|{
try|try
init|(
specifier|final
name|Collection
name|collection
init|=
name|broker
operator|.
name|openCollection
argument_list|(
name|TEST_COLLECTION
operator|.
name|append
argument_list|(
name|subCollectionName
argument_list|)
argument_list|,
name|Lock
operator|.
name|LockMode
operator|.
name|WRITE_LOCK
argument_list|)
init|)
block|{
if|if
condition|(
name|collection
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|IllegalStateException
argument_list|(
literal|"Cannot remove non-existent Collection"
argument_list|)
throw|;
block|}
name|broker
operator|.
name|removeCollection
argument_list|(
name|transaction
argument_list|,
name|collection
argument_list|)
expr_stmt|;
block|}
block|}
name|transaction
operator|.
name|commit
argument_list|()
expr_stmt|;
block|}
block|}
comment|/**      * Filters items out of a list      *      * @param sourceList The list to filter items from      * @param excludeList The items to filter out of the sourceList      *      * @return sourceList - excludeList      */
specifier|private
parameter_list|<
name|T
parameter_list|>
name|List
argument_list|<
name|T
argument_list|>
name|filterFrom
parameter_list|(
specifier|final
name|List
argument_list|<
name|T
argument_list|>
name|sourceList
parameter_list|,
specifier|final
name|List
argument_list|<
name|T
argument_list|>
name|excludeList
parameter_list|)
block|{
specifier|final
name|Set
argument_list|<
name|T
argument_list|>
name|set
init|=
operator|new
name|HashSet
argument_list|<>
argument_list|(
name|excludeList
argument_list|)
decl_stmt|;
return|return
name|sourceList
operator|.
name|stream
argument_list|()
operator|.
name|filter
argument_list|(
name|sourceItem
lambda|->
operator|!
name|excludeList
operator|.
name|contains
argument_list|(
name|sourceItem
argument_list|)
argument_list|)
operator|.
name|collect
argument_list|(
name|Collectors
operator|.
name|toList
argument_list|()
argument_list|)
return|;
block|}
comment|/**      * Select n random elements from a list      *      * @param list A list to select from      * @param count The number of random items to select from the list      */
specifier|private
parameter_list|<
name|T
parameter_list|>
name|List
argument_list|<
name|T
argument_list|>
name|selectRandom
parameter_list|(
specifier|final
name|List
argument_list|<
name|T
argument_list|>
name|list
parameter_list|,
specifier|final
name|int
name|count
parameter_list|)
block|{
if|if
condition|(
name|count
operator|>
name|list
operator|.
name|size
argument_list|()
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"count is larger than the list size"
argument_list|)
throw|;
block|}
specifier|final
name|Set
argument_list|<
name|Integer
argument_list|>
name|idxs
init|=
operator|new
name|HashSet
argument_list|<>
argument_list|()
decl_stmt|;
while|while
condition|(
name|idxs
operator|.
name|size
argument_list|()
operator|<
name|count
condition|)
block|{
name|idxs
operator|.
name|add
argument_list|(
name|random
argument_list|(
literal|0
argument_list|,
name|list
operator|.
name|size
argument_list|()
operator|-
literal|1
argument_list|)
argument_list|)
expr_stmt|;
block|}
return|return
name|idxs
operator|.
name|stream
argument_list|()
operator|.
name|map
argument_list|(
name|list
operator|::
name|get
argument_list|)
operator|.
name|collect
argument_list|(
name|Collectors
operator|.
name|toList
argument_list|()
argument_list|)
return|;
block|}
specifier|private
name|void
name|assertOrderOfSubCollections
parameter_list|(
specifier|final
name|BrokerPool
name|pool
parameter_list|,
specifier|final
name|List
argument_list|<
name|String
argument_list|>
name|subCollectionNames
parameter_list|)
throws|throws
name|EXistException
throws|,
name|PermissionDeniedException
throws|,
name|LockException
block|{
comment|// iterate the collections ensuring they are in the same order as we created them
try|try
init|(
specifier|final
name|DBBroker
name|broker
init|=
name|pool
operator|.
name|get
argument_list|(
name|Optional
operator|.
name|of
argument_list|(
name|pool
operator|.
name|getSecurityManager
argument_list|()
operator|.
name|getSystemSubject
argument_list|()
argument_list|)
argument_list|)
init|;
specifier|final
name|Txn
name|transaction
init|=
name|pool
operator|.
name|getTransactionManager
argument_list|()
operator|.
name|beginTransaction
argument_list|()
init|)
block|{
try|try
init|(
specifier|final
name|Collection
name|testCollection
init|=
name|broker
operator|.
name|openCollection
argument_list|(
name|TEST_COLLECTION
argument_list|,
name|Lock
operator|.
name|LockMode
operator|.
name|READ_LOCK
argument_list|)
init|)
block|{
specifier|final
name|Iterator
argument_list|<
name|XmldbURI
argument_list|>
name|subCollections
init|=
name|testCollection
operator|.
name|collectionIterator
argument_list|(
name|broker
argument_list|)
decl_stmt|;
name|int
name|idx
init|=
literal|0
decl_stmt|;
while|while
condition|(
name|subCollections
operator|.
name|hasNext
argument_list|()
condition|)
block|{
specifier|final
name|XmldbURI
name|subCollection
init|=
name|subCollections
operator|.
name|next
argument_list|()
decl_stmt|;
specifier|final
name|String
name|subCollectionName
init|=
name|subCollectionNames
operator|.
name|get
argument_list|(
name|idx
operator|++
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|"sub-Collection names are not equal at index: "
operator|+
name|idx
argument_list|,
name|subCollectionName
argument_list|,
name|subCollection
operator|.
name|lastSegment
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
name|transaction
operator|.
name|commit
argument_list|()
expr_stmt|;
block|}
block|}
specifier|private
name|List
argument_list|<
name|String
argument_list|>
name|generateRandomNames
parameter_list|(
specifier|final
name|int
name|count
parameter_list|)
block|{
specifier|final
name|List
argument_list|<
name|String
argument_list|>
name|randomNames
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|count
condition|;
name|i
operator|++
control|)
block|{
name|randomNames
operator|.
name|add
argument_list|(
name|generateRandomName
argument_list|(
name|random
argument_list|(
name|MIN_NAME_LEN
argument_list|,
name|MAX_NAME_LEN
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
return|return
name|randomNames
return|;
block|}
specifier|private
name|String
name|generateRandomName
parameter_list|(
specifier|final
name|int
name|nameLength
parameter_list|)
block|{
specifier|final
name|StringBuilder
name|name
init|=
operator|new
name|StringBuilder
argument_list|()
decl_stmt|;
specifier|final
name|int
name|a
init|=
literal|'a'
decl_stmt|;
specifier|final
name|int
name|z
init|=
literal|'z'
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|nameLength
condition|;
name|i
operator|++
control|)
block|{
specifier|final
name|char
name|c
init|=
operator|(
name|char
operator|)
operator|(
name|random
argument_list|(
name|a
argument_list|,
name|z
argument_list|)
operator|&
literal|0xFF
operator|)
decl_stmt|;
name|name
operator|.
name|append
argument_list|(
name|c
argument_list|)
expr_stmt|;
block|}
return|return
name|name
operator|.
name|toString
argument_list|()
return|;
block|}
specifier|private
name|int
name|random
parameter_list|(
specifier|final
name|int
name|minInc
parameter_list|,
specifier|final
name|int
name|maxInc
parameter_list|)
block|{
return|return
name|random
operator|.
name|nextInt
argument_list|(
operator|(
name|maxInc
operator|-
name|minInc
operator|)
operator|+
literal|1
argument_list|)
operator|+
name|minInc
return|;
block|}
annotation|@
name|Before
specifier|public
name|void
name|createTestCollection
parameter_list|()
throws|throws
name|EXistException
throws|,
name|PermissionDeniedException
throws|,
name|IOException
throws|,
name|TriggerException
block|{
specifier|final
name|BrokerPool
name|pool
init|=
name|existEmbeddedServer
operator|.
name|getBrokerPool
argument_list|()
decl_stmt|;
try|try
init|(
specifier|final
name|DBBroker
name|broker
init|=
name|pool
operator|.
name|get
argument_list|(
name|Optional
operator|.
name|of
argument_list|(
name|pool
operator|.
name|getSecurityManager
argument_list|()
operator|.
name|getSystemSubject
argument_list|()
argument_list|)
argument_list|)
init|;
specifier|final
name|Txn
name|transaction
init|=
name|pool
operator|.
name|getTransactionManager
argument_list|()
operator|.
name|beginTransaction
argument_list|()
init|)
block|{
name|broker
operator|.
name|getOrCreateCollection
argument_list|(
name|transaction
argument_list|,
name|TEST_COLLECTION
argument_list|)
expr_stmt|;
name|transaction
operator|.
name|commit
argument_list|()
expr_stmt|;
block|}
block|}
annotation|@
name|After
specifier|public
name|void
name|removeTestCollection
parameter_list|()
throws|throws
name|EXistException
throws|,
name|PermissionDeniedException
throws|,
name|IOException
throws|,
name|TriggerException
block|{
specifier|final
name|BrokerPool
name|pool
init|=
name|existEmbeddedServer
operator|.
name|getBrokerPool
argument_list|()
decl_stmt|;
try|try
init|(
specifier|final
name|DBBroker
name|broker
init|=
name|pool
operator|.
name|get
argument_list|(
name|Optional
operator|.
name|of
argument_list|(
name|pool
operator|.
name|getSecurityManager
argument_list|()
operator|.
name|getSystemSubject
argument_list|()
argument_list|)
argument_list|)
init|;
specifier|final
name|Txn
name|transaction
init|=
name|pool
operator|.
name|getTransactionManager
argument_list|()
operator|.
name|beginTransaction
argument_list|()
init|)
block|{
try|try
init|(
specifier|final
name|Collection
name|testCollection
init|=
name|broker
operator|.
name|openCollection
argument_list|(
name|TEST_COLLECTION
argument_list|,
name|Lock
operator|.
name|LockMode
operator|.
name|WRITE_LOCK
argument_list|)
init|)
block|{
if|if
condition|(
name|testCollection
operator|!=
literal|null
condition|)
block|{
name|broker
operator|.
name|removeCollection
argument_list|(
name|transaction
argument_list|,
name|testCollection
argument_list|)
expr_stmt|;
block|}
name|transaction
operator|.
name|commit
argument_list|()
expr_stmt|;
block|}
block|}
block|}
block|}
end_class

end_unit

