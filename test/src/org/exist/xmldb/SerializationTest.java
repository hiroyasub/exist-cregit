begin_unit|revision:1.0.0;language:Java;cregit-version:0.0.1
begin_package
package|package
name|org
operator|.
name|exist
operator|.
name|xmldb
package|;
end_package

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|Namespaces
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|test
operator|.
name|ExistXmldbEmbeddedServer
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|After
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Before
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|ClassRule
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_import
import|import
name|org
operator|.
name|xml
operator|.
name|sax
operator|.
name|SAXException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|xmldb
operator|.
name|api
operator|.
name|base
operator|.
name|Collection
import|;
end_import

begin_import
import|import
name|org
operator|.
name|xmldb
operator|.
name|api
operator|.
name|base
operator|.
name|Resource
import|;
end_import

begin_import
import|import
name|org
operator|.
name|xmldb
operator|.
name|api
operator|.
name|base
operator|.
name|ResourceSet
import|;
end_import

begin_import
import|import
name|org
operator|.
name|xmldb
operator|.
name|api
operator|.
name|base
operator|.
name|XMLDBException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|xmldb
operator|.
name|api
operator|.
name|modules
operator|.
name|CollectionManagementService
import|;
end_import

begin_import
import|import
name|org
operator|.
name|xmldb
operator|.
name|api
operator|.
name|modules
operator|.
name|XMLResource
import|;
end_import

begin_import
import|import
name|org
operator|.
name|xmldb
operator|.
name|api
operator|.
name|modules
operator|.
name|XQueryService
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|custommonkey
operator|.
name|xmlunit
operator|.
name|XMLAssert
operator|.
name|assertXMLEqual
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertNotNull
import|;
end_import

begin_class
specifier|public
class|class
name|SerializationTest
block|{
annotation|@
name|ClassRule
specifier|public
specifier|static
specifier|final
name|ExistXmldbEmbeddedServer
name|existEmbeddedServer
init|=
operator|new
name|ExistXmldbEmbeddedServer
argument_list|(
literal|false
argument_list|,
literal|true
argument_list|)
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|String
name|TEST_COLLECTION_NAME
init|=
literal|"test"
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|String
name|XML
init|=
literal|"<root xmlns=\"http://foo.com\">"
operator|+
literal|"<entry>1</entry>"
operator|+
literal|"<entry>2</entry>"
operator|+
literal|"</root>"
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|String
name|XML_EXPECTED1
init|=
literal|"<exist:result xmlns:exist=\""
operator|+
name|Namespaces
operator|.
name|EXIST_NS
operator|+
literal|"\" hitCount=\"2\">\n"
operator|+
literal|"<entry xmlns=\"http://foo.com\">1</entry>\n"
operator|+
literal|"<entry xmlns=\"http://foo.com\">2</entry>\n"
operator|+
literal|"</exist:result>"
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|String
name|XML_EXPECTED2
init|=
literal|"<exist:result xmlns:exist=\""
operator|+
name|Namespaces
operator|.
name|EXIST_NS
operator|+
literal|"\" hitCount=\"1\">\n"
operator|+
literal|"<c:Site xmlns:c=\"urn:content\" xmlns=\"urn:content\">\n"
operator|+
comment|//BUG : we should have
comment|//<config xmlns="urn:config">123</config>
literal|"<config>123</config>\n"
operator|+
comment|//BUG : we should have
comment|//<serverconfig xmlns="urn:config">123</serverconfig>
literal|"<serverconfig>123</serverconfig>\n"
operator|+
literal|"</c:Site>\n"
operator|+
literal|"</exist:result>"
decl_stmt|;
specifier|private
name|Collection
name|testCollection
decl_stmt|;
annotation|@
name|Test
specifier|public
name|void
name|queryResults
parameter_list|()
throws|throws
name|XMLDBException
throws|,
name|IOException
throws|,
name|SAXException
block|{
name|XQueryService
name|service
init|=
operator|(
name|XQueryService
operator|)
name|testCollection
operator|.
name|getService
argument_list|(
literal|"XQueryService"
argument_list|,
literal|"1.0"
argument_list|)
decl_stmt|;
name|ResourceSet
name|result
init|=
name|service
operator|.
name|query
argument_list|(
literal|"declare namespace foo=\"http://foo.com\"; //foo:entry"
argument_list|)
decl_stmt|;
name|Resource
name|resource
init|=
name|result
operator|.
name|getMembersAsResource
argument_list|()
decl_stmt|;
name|String
name|str
init|=
name|resource
operator|.
name|getContent
argument_list|()
operator|.
name|toString
argument_list|()
decl_stmt|;
name|assertXMLEqual
argument_list|(
name|XML_EXPECTED1
argument_list|,
name|str
argument_list|)
expr_stmt|;
comment|//TODO : THIS IS BUGGY !
name|result
operator|=
name|service
operator|.
name|query
argument_list|(
literal|"declare namespace config='urn:config'; "
operator|+
literal|"declare namespace c='urn:content'; "
operator|+
literal|"declare variable $config {<config xmlns='urn:config'>123</config>}; "
operator|+
literal|"declare variable $serverConfig {<serverconfig xmlns='urn:config'>123</serverconfig>}; "
operator|+
literal|"<c:Site xmlns='urn:content' xmlns:c='urn:content'> "
operator|+
literal|"{($config,$serverConfig)} "
operator|+
literal|"</c:Site>"
argument_list|)
expr_stmt|;
name|resource
operator|=
name|result
operator|.
name|getMembersAsResource
argument_list|()
expr_stmt|;
name|str
operator|=
name|resource
operator|.
name|getContent
argument_list|()
operator|.
name|toString
argument_list|()
expr_stmt|;
name|assertXMLEqual
argument_list|(
name|XML_EXPECTED2
argument_list|,
name|str
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Before
specifier|public
name|void
name|setUp
parameter_list|()
throws|throws
name|ClassNotFoundException
throws|,
name|IllegalAccessException
throws|,
name|InstantiationException
throws|,
name|XMLDBException
block|{
specifier|final
name|CollectionManagementService
name|service
init|=
operator|(
name|CollectionManagementService
operator|)
name|existEmbeddedServer
operator|.
name|getRoot
argument_list|()
operator|.
name|getService
argument_list|(
literal|"CollectionManagementService"
argument_list|,
literal|"1.0"
argument_list|)
decl_stmt|;
name|testCollection
operator|=
name|service
operator|.
name|createCollection
argument_list|(
name|TEST_COLLECTION_NAME
argument_list|)
expr_stmt|;
name|assertNotNull
argument_list|(
name|testCollection
argument_list|)
expr_stmt|;
name|XMLResource
name|res
init|=
operator|(
name|XMLResource
operator|)
name|testCollection
operator|.
name|createResource
argument_list|(
literal|"defaultns.xml"
argument_list|,
literal|"XMLResource"
argument_list|)
decl_stmt|;
name|res
operator|.
name|setContent
argument_list|(
name|XML
argument_list|)
expr_stmt|;
name|testCollection
operator|.
name|storeResource
argument_list|(
name|res
argument_list|)
expr_stmt|;
block|}
annotation|@
name|After
specifier|public
name|void
name|tearDown
parameter_list|()
throws|throws
name|XMLDBException
block|{
specifier|final
name|CollectionManagementService
name|service
init|=
operator|(
name|CollectionManagementService
operator|)
name|existEmbeddedServer
operator|.
name|getRoot
argument_list|()
operator|.
name|getService
argument_list|(
literal|"CollectionManagementService"
argument_list|,
literal|"1.0"
argument_list|)
decl_stmt|;
name|service
operator|.
name|removeCollection
argument_list|(
name|TEST_COLLECTION_NAME
argument_list|)
expr_stmt|;
name|testCollection
operator|=
literal|null
expr_stmt|;
block|}
block|}
end_class

end_unit

