begin_unit|revision:1.0.0;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Created on 20 juil. 2004 $Id$  */
end_comment

begin_package
package|package
name|org
operator|.
name|exist
operator|.
name|xmldb
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|junit
operator|.
name|textui
operator|.
name|TestRunner
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|storage
operator|.
name|DBBroker
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|xquery
operator|.
name|util
operator|.
name|URIUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|xmldb
operator|.
name|api
operator|.
name|DatabaseManager
import|;
end_import

begin_import
import|import
name|org
operator|.
name|xmldb
operator|.
name|api
operator|.
name|base
operator|.
name|Collection
import|;
end_import

begin_import
import|import
name|org
operator|.
name|xmldb
operator|.
name|api
operator|.
name|base
operator|.
name|Resource
import|;
end_import

begin_import
import|import
name|org
operator|.
name|xmldb
operator|.
name|api
operator|.
name|base
operator|.
name|Service
import|;
end_import

begin_import
import|import
name|org
operator|.
name|xmldb
operator|.
name|api
operator|.
name|base
operator|.
name|XMLDBException
import|;
end_import

begin_comment
comment|/** A test case for accessing collections remotely  * @author jmv  * @author Pierrick Brihaye<pierrick.brihaye@free.fr>  */
end_comment

begin_class
specifier|public
class|class
name|RemoteCollectionTest
extends|extends
name|RemoteDBTest
block|{
specifier|private
specifier|final
specifier|static
name|String
name|XML_CONTENT
init|=
literal|"<xml/>"
decl_stmt|;
specifier|private
specifier|final
specifier|static
name|String
name|BINARY_CONTENT
init|=
literal|"TEXT"
decl_stmt|;
specifier|public
name|RemoteCollectionTest
parameter_list|(
name|String
name|name
parameter_list|)
block|{
name|super
argument_list|(
name|name
argument_list|)
expr_stmt|;
block|}
specifier|protected
name|void
name|setUp
parameter_list|()
block|{
try|try
block|{
comment|//Don't worry about closing the server : the shutdown hook will do the job
name|initServer
argument_list|()
expr_stmt|;
name|setUpRemoteDatabase
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|fail
argument_list|(
name|e
operator|.
name|getMessage
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
specifier|protected
name|void
name|tearDown
parameter_list|()
block|{
try|try
block|{
name|removeCollection
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|fail
argument_list|(
name|e
operator|.
name|getMessage
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
specifier|public
name|void
name|testIndexQueryService
parameter_list|()
block|{
comment|// TODO .............
block|}
specifier|public
name|void
name|testGetServices
parameter_list|()
block|{
try|try
block|{
name|Service
index|[]
name|services
init|=
name|getCollection
argument_list|()
operator|.
name|getServices
argument_list|()
decl_stmt|;
name|assertEquals
argument_list|(
literal|6
argument_list|,
name|services
operator|.
name|length
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|RemoteXPathQueryService
operator|.
name|class
argument_list|,
name|services
index|[
literal|0
index|]
operator|.
name|getClass
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|RemoteCollectionManagementService
operator|.
name|class
argument_list|,
name|services
index|[
literal|1
index|]
operator|.
name|getClass
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|RemoteUserManagementService
operator|.
name|class
argument_list|,
name|services
index|[
literal|2
index|]
operator|.
name|getClass
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|RemoteDatabaseInstanceManager
operator|.
name|class
argument_list|,
name|services
index|[
literal|3
index|]
operator|.
name|getClass
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|RemoteIndexQueryService
operator|.
name|class
argument_list|,
name|services
index|[
literal|4
index|]
operator|.
name|getClass
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|RemoteXUpdateQueryService
operator|.
name|class
argument_list|,
name|services
index|[
literal|5
index|]
operator|.
name|getClass
argument_list|()
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|fail
argument_list|(
name|e
operator|.
name|getMessage
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
specifier|public
name|void
name|testIsRemoteCollection
parameter_list|()
block|{
try|try
block|{
name|assertTrue
argument_list|(
name|getCollection
argument_list|()
operator|.
name|isRemoteCollection
argument_list|()
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|fail
argument_list|(
name|e
operator|.
name|getMessage
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
specifier|public
name|void
name|testGetPath
parameter_list|()
block|{
try|try
block|{
name|assertEquals
argument_list|(
name|DBBroker
operator|.
name|ROOT_COLLECTION
operator|+
literal|"/"
operator|+
name|getTestCollectionName
argument_list|()
argument_list|,
name|URIUtils
operator|.
name|urlDecodeUtf8
argument_list|(
name|getCollection
argument_list|()
operator|.
name|getPath
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|fail
argument_list|(
name|e
operator|.
name|getMessage
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
specifier|public
name|void
name|testCreateResource
parameter_list|()
block|{
try|try
block|{
name|Collection
name|collection
init|=
name|getCollection
argument_list|()
decl_stmt|;
block|{
comment|// XML resource:
name|Resource
name|resource
init|=
name|collection
operator|.
name|createResource
argument_list|(
literal|"testresource"
argument_list|,
literal|"XMLResource"
argument_list|)
decl_stmt|;
name|assertNotNull
argument_list|(
name|resource
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|collection
argument_list|,
name|resource
operator|.
name|getParentCollection
argument_list|()
argument_list|)
expr_stmt|;
name|resource
operator|.
name|setContent
argument_list|(
literal|"<?xml version='1.0'?><xml/>"
argument_list|)
expr_stmt|;
name|collection
operator|.
name|storeResource
argument_list|(
name|resource
argument_list|)
expr_stmt|;
block|}
block|{
comment|// binary resource:
name|Resource
name|resource
init|=
name|collection
operator|.
name|createResource
argument_list|(
literal|"testresource"
argument_list|,
literal|"BinaryResource"
argument_list|)
decl_stmt|;
name|assertNotNull
argument_list|(
name|resource
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|collection
argument_list|,
name|resource
operator|.
name|getParentCollection
argument_list|()
argument_list|)
expr_stmt|;
name|resource
operator|.
name|setContent
argument_list|(
literal|"some random binary data here :-)"
argument_list|)
expr_stmt|;
name|collection
operator|.
name|storeResource
argument_list|(
name|resource
argument_list|)
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|fail
argument_list|(
name|e
operator|.
name|getMessage
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
specifier|public
name|void
name|testGetNonExistentResource
parameter_list|()
block|{
try|try
block|{
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"Retrieving non-existing resource"
argument_list|)
expr_stmt|;
name|Collection
name|collection
init|=
name|getCollection
argument_list|()
decl_stmt|;
name|Resource
name|resource
init|=
name|collection
operator|.
name|getResource
argument_list|(
literal|"unknown.xml"
argument_list|)
decl_stmt|;
name|assertNull
argument_list|(
name|resource
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|fail
argument_list|(
name|e
operator|.
name|getMessage
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
specifier|public
name|void
name|testListResources
parameter_list|()
block|{
try|try
block|{
name|ArrayList
argument_list|<
name|String
argument_list|>
name|xmlNames
init|=
operator|new
name|ArrayList
argument_list|<
name|String
argument_list|>
argument_list|()
decl_stmt|;
name|xmlNames
operator|.
name|add
argument_list|(
literal|"xml1"
argument_list|)
expr_stmt|;
name|xmlNames
operator|.
name|add
argument_list|(
literal|"xml2"
argument_list|)
expr_stmt|;
name|xmlNames
operator|.
name|add
argument_list|(
literal|"xml3"
argument_list|)
expr_stmt|;
name|createResources
argument_list|(
name|xmlNames
argument_list|,
literal|"XMLResource"
argument_list|)
expr_stmt|;
name|ArrayList
argument_list|<
name|String
argument_list|>
name|binaryNames
init|=
operator|new
name|ArrayList
argument_list|<
name|String
argument_list|>
argument_list|()
decl_stmt|;
name|binaryNames
operator|.
name|add
argument_list|(
literal|"b1"
argument_list|)
expr_stmt|;
name|binaryNames
operator|.
name|add
argument_list|(
literal|"b2"
argument_list|)
expr_stmt|;
name|createResources
argument_list|(
name|binaryNames
argument_list|,
literal|"BinaryResource"
argument_list|)
expr_stmt|;
name|String
index|[]
name|actualContents
init|=
name|getCollection
argument_list|()
operator|.
name|listResources
argument_list|()
decl_stmt|;
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"Resources found: "
operator|+
name|actualContents
operator|.
name|length
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|actualContents
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
name|xmlNames
operator|.
name|remove
argument_list|(
name|actualContents
index|[
name|i
index|]
argument_list|)
expr_stmt|;
name|binaryNames
operator|.
name|remove
argument_list|(
name|actualContents
index|[
name|i
index|]
argument_list|)
expr_stmt|;
block|}
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|xmlNames
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|binaryNames
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|fail
argument_list|(
name|e
operator|.
name|getMessage
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
comment|/** 	 * Trying to access a collection where the parent collection does 	 * not exist caused NullPointerException on DatabaseManager.getCollection() method. 	 */
specifier|public
name|void
name|testParent
parameter_list|()
block|{
try|try
block|{
name|Collection
name|c
init|=
name|DatabaseManager
operator|.
name|getCollection
argument_list|(
name|URI
operator|+
name|DBBroker
operator|.
name|ROOT_COLLECTION
argument_list|,
literal|"admin"
argument_list|,
literal|null
argument_list|)
decl_stmt|;
name|assertNull
argument_list|(
name|c
operator|.
name|getChildCollection
argument_list|(
literal|"b"
argument_list|)
argument_list|)
expr_stmt|;
name|System
operator|.
name|err
operator|.
name|println
argument_list|(
literal|"col="
operator|+
name|c
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
name|String
name|parentName
init|=
name|c
operator|.
name|getName
argument_list|()
operator|+
literal|"/"
operator|+
name|System
operator|.
name|currentTimeMillis
argument_list|()
decl_stmt|;
name|String
name|colName
init|=
name|parentName
operator|+
literal|"/a"
decl_stmt|;
name|c
operator|=
name|DatabaseManager
operator|.
name|getCollection
argument_list|(
name|URI
operator|+
name|parentName
argument_list|,
literal|"admin"
argument_list|,
literal|null
argument_list|)
expr_stmt|;
name|assertNull
argument_list|(
name|c
argument_list|)
expr_stmt|;
comment|// following fails for XmlDb 20051203
name|c
operator|=
name|DatabaseManager
operator|.
name|getCollection
argument_list|(
name|URI
operator|+
name|colName
argument_list|,
literal|"admin"
argument_list|,
literal|null
argument_list|)
expr_stmt|;
name|assertNull
argument_list|(
name|c
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|XMLDBException
name|xe
parameter_list|)
block|{
name|System
operator|.
name|err
operator|.
name|println
argument_list|(
literal|"Unexpected Exception occured: "
operator|+
name|xe
operator|.
name|getMessage
argument_list|()
argument_list|)
expr_stmt|;
name|xe
operator|.
name|printStackTrace
argument_list|()
expr_stmt|;
block|}
block|}
specifier|private
name|void
name|createResources
parameter_list|(
name|ArrayList
argument_list|<
name|String
argument_list|>
name|names
parameter_list|,
name|String
name|type
parameter_list|)
block|{
try|try
block|{
for|for
control|(
name|String
name|name
range|:
name|names
control|)
block|{
name|Resource
name|res
init|=
name|getCollection
argument_list|()
operator|.
name|createResource
argument_list|(
name|name
argument_list|,
name|type
argument_list|)
decl_stmt|;
if|if
condition|(
name|type
operator|.
name|equals
argument_list|(
literal|"XMLResource"
argument_list|)
condition|)
name|res
operator|.
name|setContent
argument_list|(
name|XML_CONTENT
argument_list|)
expr_stmt|;
else|else
name|res
operator|.
name|setContent
argument_list|(
name|BINARY_CONTENT
argument_list|)
expr_stmt|;
name|getCollection
argument_list|()
operator|.
name|storeResource
argument_list|(
name|res
argument_list|)
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|fail
argument_list|(
name|e
operator|.
name|getMessage
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
specifier|public
specifier|static
name|void
name|main
parameter_list|(
name|String
index|[]
name|args
parameter_list|)
block|{
name|TestRunner
operator|.
name|run
argument_list|(
name|RemoteCollectionTest
operator|.
name|class
argument_list|)
expr_stmt|;
comment|//Explicit shutdown for the shutdown hook
name|System
operator|.
name|exit
argument_list|(
literal|0
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

