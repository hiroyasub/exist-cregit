begin_unit|revision:1.0.0;language:Java;cregit-version:0.0.1
begin_package
package|package
name|org
operator|.
name|exist
operator|.
name|security
package|;
end_package

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|security
operator|.
name|internal
operator|.
name|SecurityManagerImpl
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|security
operator|.
name|internal
operator|.
name|RealmImpl
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|storage
operator|.
name|io
operator|.
name|VariableByteInput
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Random
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|storage
operator|.
name|io
operator|.
name|VariableByteOutputStream
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|util
operator|.
name|SyntaxException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertTrue
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertFalse
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertEquals
import|;
end_import

begin_import
import|import
name|org
operator|.
name|easymock
operator|.
name|classextension
operator|.
name|EasyMock
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|easymock
operator|.
name|classextension
operator|.
name|EasyMock
operator|.
name|expect
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|easymock
operator|.
name|classextension
operator|.
name|EasyMock
operator|.
name|replay
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|easymock
operator|.
name|classextension
operator|.
name|EasyMock
operator|.
name|verify
import|;
end_import

begin_comment
comment|/**  *  * @author Adam Retter<adam@exist-db.org>  */
end_comment

begin_class
specifier|public
class|class
name|UnixStylePermissionTest
block|{
annotation|@
name|Test
specifier|public
name|void
name|writeRead_roundtrip
parameter_list|()
throws|throws
name|IOException
block|{
specifier|final
name|SecurityManager
name|mockSecurityManager
init|=
name|EasyMock
operator|.
name|createMock
argument_list|(
name|SecurityManager
operator|.
name|class
argument_list|)
decl_stmt|;
specifier|final
name|int
name|ownerId
init|=
operator|new
name|Random
argument_list|()
operator|.
name|nextInt
argument_list|()
decl_stmt|;
specifier|final
name|int
name|mode
init|=
literal|0700
decl_stmt|;
specifier|final
name|int
name|ownerGroupId
init|=
operator|new
name|Random
argument_list|()
operator|.
name|nextInt
argument_list|()
decl_stmt|;
specifier|final
name|VariableByteOutputStream
name|mockOstream
init|=
name|EasyMock
operator|.
name|createMock
argument_list|(
name|VariableByteOutputStream
operator|.
name|class
argument_list|)
decl_stmt|;
specifier|final
name|VariableByteInput
name|mockIstream
init|=
name|EasyMock
operator|.
name|createMock
argument_list|(
name|VariableByteInput
operator|.
name|class
argument_list|)
decl_stmt|;
name|TestableUnixStylePermission
name|permission
init|=
operator|new
name|TestableUnixStylePermission
argument_list|(
name|mockSecurityManager
argument_list|,
name|ownerId
argument_list|,
name|ownerGroupId
argument_list|,
name|mode
argument_list|)
decl_stmt|;
specifier|final
name|long
name|permissionVector
init|=
name|permission
operator|.
name|getVector_testable
argument_list|()
decl_stmt|;
comment|//expectations
name|mockOstream
operator|.
name|writeLong
argument_list|(
name|permissionVector
argument_list|)
expr_stmt|;
name|expect
argument_list|(
name|mockIstream
operator|.
name|readLong
argument_list|()
argument_list|)
operator|.
name|andReturn
argument_list|(
name|permissionVector
argument_list|)
expr_stmt|;
name|replay
argument_list|(
name|mockSecurityManager
argument_list|,
name|mockOstream
argument_list|,
name|mockIstream
argument_list|)
expr_stmt|;
name|permission
operator|.
name|write
argument_list|(
name|mockOstream
argument_list|)
expr_stmt|;
name|permission
operator|.
name|read
argument_list|(
name|mockIstream
argument_list|)
expr_stmt|;
name|verify
argument_list|(
name|mockSecurityManager
argument_list|,
name|mockOstream
argument_list|,
name|mockIstream
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|permissionVector
argument_list|,
name|permission
operator|.
name|getVector_testable
argument_list|()
argument_list|)
expr_stmt|;
block|}
comment|/**      * Tests that if we are the owner of a resource, and that resource has read permission      * granted to the owner, then we can read the resource      */
annotation|@
name|Test
specifier|public
name|void
name|validate_can_read_WhenOwnerWithRead
parameter_list|()
block|{
specifier|final
name|SecurityManager
name|mockSecurityManager
init|=
name|EasyMock
operator|.
name|createMock
argument_list|(
name|SecurityManager
operator|.
name|class
argument_list|)
decl_stmt|;
specifier|final
name|int
name|ownerId
init|=
operator|new
name|Random
argument_list|()
operator|.
name|nextInt
argument_list|(
name|SecurityManagerImpl
operator|.
name|MAX_USER_ID
argument_list|)
decl_stmt|;
specifier|final
name|int
name|mode
init|=
literal|0700
decl_stmt|;
specifier|final
name|int
name|ownerGroupId
init|=
operator|new
name|Random
argument_list|()
operator|.
name|nextInt
argument_list|(
name|SecurityManagerImpl
operator|.
name|MAX_GROUP_ID
argument_list|)
decl_stmt|;
specifier|final
name|boolean
name|hasDbaRole
init|=
literal|false
decl_stmt|;
specifier|final
name|Subject
name|mockUser
init|=
name|EasyMock
operator|.
name|createMock
argument_list|(
name|Subject
operator|.
name|class
argument_list|)
decl_stmt|;
name|expect
argument_list|(
name|mockUser
operator|.
name|hasDbaRole
argument_list|()
argument_list|)
operator|.
name|andReturn
argument_list|(
name|hasDbaRole
argument_list|)
expr_stmt|;
name|expect
argument_list|(
name|mockUser
operator|.
name|getId
argument_list|()
argument_list|)
operator|.
name|andReturn
argument_list|(
name|ownerId
argument_list|)
expr_stmt|;
name|replay
argument_list|(
name|mockSecurityManager
argument_list|,
name|mockUser
argument_list|)
expr_stmt|;
name|Permission
name|permission
init|=
operator|new
name|UnixStylePermission
argument_list|(
name|mockSecurityManager
argument_list|,
name|ownerId
argument_list|,
name|ownerGroupId
argument_list|,
name|mode
argument_list|)
decl_stmt|;
name|boolean
name|isValid
init|=
name|permission
operator|.
name|validate
argument_list|(
name|mockUser
argument_list|,
name|Permission
operator|.
name|READ
argument_list|)
decl_stmt|;
name|verify
argument_list|(
name|mockSecurityManager
argument_list|,
name|mockUser
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|isValid
argument_list|)
expr_stmt|;
block|}
comment|/**      * Tests that if we are the owner of a resource, and that resource      * does not have read permission granted to the owner,      * then we cannot read the resource      */
annotation|@
name|Test
specifier|public
name|void
name|validate_cant_read_WhenOwnerWithoutRead
parameter_list|()
block|{
specifier|final
name|SecurityManager
name|mockSecurityManager
init|=
name|EasyMock
operator|.
name|createMock
argument_list|(
name|SecurityManager
operator|.
name|class
argument_list|)
decl_stmt|;
specifier|final
name|int
name|ownerId
init|=
operator|new
name|Random
argument_list|()
operator|.
name|nextInt
argument_list|(
name|SecurityManagerImpl
operator|.
name|MAX_USER_ID
argument_list|)
decl_stmt|;
specifier|final
name|int
name|mode
init|=
literal|0077
decl_stmt|;
specifier|final
name|int
name|ownerGroupId
init|=
operator|new
name|Random
argument_list|(
name|SecurityManagerImpl
operator|.
name|MAX_GROUP_ID
argument_list|)
operator|.
name|nextInt
argument_list|()
decl_stmt|;
specifier|final
name|boolean
name|hasDbaRole
init|=
literal|false
decl_stmt|;
specifier|final
name|Subject
name|mockUser
init|=
name|EasyMock
operator|.
name|createMock
argument_list|(
name|Subject
operator|.
name|class
argument_list|)
decl_stmt|;
name|expect
argument_list|(
name|mockUser
operator|.
name|hasDbaRole
argument_list|()
argument_list|)
operator|.
name|andReturn
argument_list|(
name|hasDbaRole
argument_list|)
expr_stmt|;
name|expect
argument_list|(
name|mockUser
operator|.
name|getId
argument_list|()
argument_list|)
operator|.
name|andReturn
argument_list|(
name|ownerId
argument_list|)
expr_stmt|;
name|replay
argument_list|(
name|mockSecurityManager
argument_list|,
name|mockUser
argument_list|)
expr_stmt|;
name|Permission
name|permission
init|=
operator|new
name|UnixStylePermission
argument_list|(
name|mockSecurityManager
argument_list|,
name|ownerId
argument_list|,
name|ownerGroupId
argument_list|,
name|mode
argument_list|)
decl_stmt|;
name|boolean
name|isValid
init|=
name|permission
operator|.
name|validate
argument_list|(
name|mockUser
argument_list|,
name|Permission
operator|.
name|READ
argument_list|)
decl_stmt|;
name|verify
argument_list|(
name|mockSecurityManager
argument_list|,
name|mockUser
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|isValid
argument_list|)
expr_stmt|;
block|}
comment|/**      * Tests that if we are the owner of a resource, and that resource      * does not have read permission granted to the owner,      * then we cannot read the resource even if the owner      * is in a group that has read permission on the resource      */
annotation|@
name|Test
specifier|public
name|void
name|validate_cant_read_WhenOwnerWithoutRead_and_OwnerInGroupWithRead
parameter_list|()
block|{
specifier|final
name|SecurityManager
name|mockSecurityManager
init|=
name|EasyMock
operator|.
name|createMock
argument_list|(
name|SecurityManager
operator|.
name|class
argument_list|)
decl_stmt|;
specifier|final
name|int
name|ownerId
init|=
operator|new
name|Random
argument_list|()
operator|.
name|nextInt
argument_list|(
name|SecurityManagerImpl
operator|.
name|MAX_USER_ID
argument_list|)
decl_stmt|;
specifier|final
name|int
name|mode
init|=
literal|0077
decl_stmt|;
specifier|final
name|int
name|ownerGroupId
init|=
operator|new
name|Random
argument_list|()
operator|.
name|nextInt
argument_list|(
name|SecurityManagerImpl
operator|.
name|MAX_GROUP_ID
argument_list|)
decl_stmt|;
specifier|final
name|boolean
name|hasDbaRole
init|=
literal|false
decl_stmt|;
specifier|final
name|Subject
name|mockUser
init|=
name|EasyMock
operator|.
name|createMock
argument_list|(
name|Subject
operator|.
name|class
argument_list|)
decl_stmt|;
name|expect
argument_list|(
name|mockUser
operator|.
name|hasDbaRole
argument_list|()
argument_list|)
operator|.
name|andReturn
argument_list|(
name|hasDbaRole
argument_list|)
expr_stmt|;
name|expect
argument_list|(
name|mockUser
operator|.
name|getId
argument_list|()
argument_list|)
operator|.
name|andReturn
argument_list|(
name|ownerId
argument_list|)
expr_stmt|;
name|replay
argument_list|(
name|mockSecurityManager
argument_list|,
name|mockUser
argument_list|)
expr_stmt|;
name|Permission
name|permission
init|=
operator|new
name|UnixStylePermission
argument_list|(
name|mockSecurityManager
argument_list|,
name|ownerId
argument_list|,
name|ownerGroupId
argument_list|,
name|mode
argument_list|)
decl_stmt|;
name|boolean
name|isValid
init|=
name|permission
operator|.
name|validate
argument_list|(
name|mockUser
argument_list|,
name|Permission
operator|.
name|READ
argument_list|)
decl_stmt|;
name|verify
argument_list|(
name|mockSecurityManager
argument_list|,
name|mockUser
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|isValid
argument_list|)
expr_stmt|;
block|}
comment|/**      * Tests that if we are not the owner of a resource      * but are in the group for the resource and that group      * has read permission,      * then we cannot read the resource even if other(s)      * have read permission on the resource      */
annotation|@
name|Test
specifier|public
name|void
name|validate_cant_read_WhenNotOwner_and_InGroupWithoutRead_and_OtherCanRead
parameter_list|()
block|{
specifier|final
name|SecurityManager
name|mockSecurityManager
init|=
name|EasyMock
operator|.
name|createMock
argument_list|(
name|SecurityManager
operator|.
name|class
argument_list|)
decl_stmt|;
specifier|final
name|int
name|ownerId
init|=
operator|new
name|Random
argument_list|()
operator|.
name|nextInt
argument_list|(
name|SecurityManagerImpl
operator|.
name|MAX_USER_ID
argument_list|)
decl_stmt|;
specifier|final
name|int
name|mode
init|=
literal|0007
decl_stmt|;
specifier|final
name|int
name|ownerGroupId
init|=
operator|new
name|Random
argument_list|()
operator|.
name|nextInt
argument_list|(
name|SecurityManagerImpl
operator|.
name|MAX_GROUP_ID
argument_list|)
decl_stmt|;
specifier|final
name|boolean
name|hasDbaRole
init|=
literal|false
decl_stmt|;
specifier|final
name|Subject
name|mockUser
init|=
name|EasyMock
operator|.
name|createMock
argument_list|(
name|Subject
operator|.
name|class
argument_list|)
decl_stmt|;
specifier|final
name|int
name|userId
init|=
operator|new
name|Random
argument_list|(
name|SecurityManagerImpl
operator|.
name|MAX_GROUP_ID
argument_list|)
operator|.
name|nextInt
argument_list|()
decl_stmt|;
name|expect
argument_list|(
name|mockUser
operator|.
name|hasDbaRole
argument_list|()
argument_list|)
operator|.
name|andReturn
argument_list|(
name|hasDbaRole
argument_list|)
expr_stmt|;
name|expect
argument_list|(
name|mockUser
operator|.
name|getId
argument_list|()
argument_list|)
operator|.
name|andReturn
argument_list|(
name|userId
argument_list|)
expr_stmt|;
name|expect
argument_list|(
name|mockUser
operator|.
name|getGroupIds
argument_list|()
argument_list|)
operator|.
name|andReturn
argument_list|(
operator|new
name|int
index|[]
block|{
name|ownerGroupId
block|}
argument_list|)
expr_stmt|;
name|replay
argument_list|(
name|mockSecurityManager
argument_list|,
name|mockUser
argument_list|)
expr_stmt|;
name|Permission
name|permission
init|=
operator|new
name|UnixStylePermission
argument_list|(
name|mockSecurityManager
argument_list|,
name|ownerId
argument_list|,
name|ownerGroupId
argument_list|,
name|mode
argument_list|)
decl_stmt|;
name|boolean
name|isValid
init|=
name|permission
operator|.
name|validate
argument_list|(
name|mockUser
argument_list|,
name|Permission
operator|.
name|READ
argument_list|)
decl_stmt|;
name|verify
argument_list|(
name|mockSecurityManager
argument_list|,
name|mockUser
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|isValid
argument_list|)
expr_stmt|;
block|}
comment|/**      * Tests that if we are not the owner of a resource      * but are in the group for the resource and that group      * has read permission,      * then we cannot read the resource even if other(s)      * have read permission on the resource      */
annotation|@
name|Test
specifier|public
name|void
name|validate_can_read_WhenNotOwner_and_InGroupWithRead
parameter_list|()
block|{
specifier|final
name|SecurityManager
name|mockSecurityManager
init|=
name|EasyMock
operator|.
name|createMock
argument_list|(
name|SecurityManager
operator|.
name|class
argument_list|)
decl_stmt|;
specifier|final
name|int
name|ownerId
init|=
operator|new
name|Random
argument_list|()
operator|.
name|nextInt
argument_list|(
name|SecurityManagerImpl
operator|.
name|MAX_USER_ID
argument_list|)
decl_stmt|;
specifier|final
name|int
name|mode
init|=
literal|0077
decl_stmt|;
specifier|final
name|int
name|ownerGroupId
init|=
operator|new
name|Random
argument_list|()
operator|.
name|nextInt
argument_list|(
name|SecurityManagerImpl
operator|.
name|MAX_GROUP_ID
argument_list|)
decl_stmt|;
specifier|final
name|boolean
name|hasDbaRole
init|=
literal|false
decl_stmt|;
specifier|final
name|Subject
name|mockUser
init|=
name|EasyMock
operator|.
name|createMock
argument_list|(
name|Subject
operator|.
name|class
argument_list|)
decl_stmt|;
specifier|final
name|int
name|userId
init|=
operator|new
name|Random
argument_list|()
operator|.
name|nextInt
argument_list|(
name|SecurityManagerImpl
operator|.
name|MAX_USER_ID
argument_list|)
decl_stmt|;
name|expect
argument_list|(
name|mockUser
operator|.
name|hasDbaRole
argument_list|()
argument_list|)
operator|.
name|andReturn
argument_list|(
name|hasDbaRole
argument_list|)
expr_stmt|;
name|expect
argument_list|(
name|mockUser
operator|.
name|getId
argument_list|()
argument_list|)
operator|.
name|andReturn
argument_list|(
name|userId
argument_list|)
expr_stmt|;
name|expect
argument_list|(
name|mockUser
operator|.
name|getGroupIds
argument_list|()
argument_list|)
operator|.
name|andReturn
argument_list|(
operator|new
name|int
index|[]
block|{
name|ownerGroupId
block|}
argument_list|)
expr_stmt|;
name|replay
argument_list|(
name|mockSecurityManager
argument_list|,
name|mockUser
argument_list|)
expr_stmt|;
name|Permission
name|permission
init|=
operator|new
name|UnixStylePermission
argument_list|(
name|mockSecurityManager
argument_list|,
name|ownerId
argument_list|,
name|ownerGroupId
argument_list|,
name|mode
argument_list|)
decl_stmt|;
name|boolean
name|isValid
init|=
name|permission
operator|.
name|validate
argument_list|(
name|mockUser
argument_list|,
name|Permission
operator|.
name|READ
argument_list|)
decl_stmt|;
name|verify
argument_list|(
name|mockSecurityManager
argument_list|,
name|mockUser
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|isValid
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|validate_can_read_WhenNotOwner_and_NotInGroup_and_OtherWithRead
parameter_list|()
block|{
specifier|final
name|SecurityManager
name|mockSecurityManager
init|=
name|EasyMock
operator|.
name|createMock
argument_list|(
name|SecurityManager
operator|.
name|class
argument_list|)
decl_stmt|;
specifier|final
name|int
name|ownerId
init|=
operator|new
name|Random
argument_list|(
name|SecurityManagerImpl
operator|.
name|MAX_USER_ID
argument_list|)
operator|.
name|nextInt
argument_list|()
decl_stmt|;
specifier|final
name|int
name|mode
init|=
literal|0007
decl_stmt|;
specifier|final
name|int
name|ownerGroupId
init|=
operator|new
name|Random
argument_list|()
operator|.
name|nextInt
argument_list|(
name|SecurityManagerImpl
operator|.
name|MAX_GROUP_ID
argument_list|)
decl_stmt|;
specifier|final
name|boolean
name|hasDbaRole
init|=
literal|false
decl_stmt|;
specifier|final
name|Subject
name|mockUser
init|=
name|EasyMock
operator|.
name|createMock
argument_list|(
name|Subject
operator|.
name|class
argument_list|)
decl_stmt|;
specifier|final
name|int
name|userId
init|=
operator|new
name|Random
argument_list|()
operator|.
name|nextInt
argument_list|(
name|SecurityManagerImpl
operator|.
name|MAX_USER_ID
argument_list|)
decl_stmt|;
name|expect
argument_list|(
name|mockUser
operator|.
name|hasDbaRole
argument_list|()
argument_list|)
operator|.
name|andReturn
argument_list|(
name|hasDbaRole
argument_list|)
expr_stmt|;
name|expect
argument_list|(
name|mockUser
operator|.
name|getId
argument_list|()
argument_list|)
operator|.
name|andReturn
argument_list|(
name|userId
argument_list|)
expr_stmt|;
name|expect
argument_list|(
name|mockUser
operator|.
name|getGroupIds
argument_list|()
argument_list|)
operator|.
name|andReturn
argument_list|(
operator|new
name|int
index|[]
block|{
operator|new
name|Random
argument_list|()
operator|.
name|nextInt
argument_list|(
name|SecurityManagerImpl
operator|.
name|MAX_GROUP_ID
argument_list|)
block|}
argument_list|)
expr_stmt|;
name|replay
argument_list|(
name|mockSecurityManager
argument_list|,
name|mockUser
argument_list|)
expr_stmt|;
name|Permission
name|permission
init|=
operator|new
name|UnixStylePermission
argument_list|(
name|mockSecurityManager
argument_list|,
name|ownerId
argument_list|,
name|ownerGroupId
argument_list|,
name|mode
argument_list|)
decl_stmt|;
name|boolean
name|isValid
init|=
name|permission
operator|.
name|validate
argument_list|(
name|mockUser
argument_list|,
name|Permission
operator|.
name|READ
argument_list|)
decl_stmt|;
name|verify
argument_list|(
name|mockSecurityManager
argument_list|,
name|mockUser
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|isValid
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|validate_cant_write_WhenNotOwner_and_NotInGroup_and_OtherWithoutWrite
parameter_list|()
block|{
specifier|final
name|SecurityManager
name|mockSecurityManager
init|=
name|EasyMock
operator|.
name|createMock
argument_list|(
name|SecurityManager
operator|.
name|class
argument_list|)
decl_stmt|;
specifier|final
name|int
name|ownerId
init|=
name|RealmImpl
operator|.
name|SYSTEM_ACCOUNT_ID
decl_stmt|;
specifier|final
name|int
name|mode
init|=
literal|0001
decl_stmt|;
specifier|final
name|int
name|ownerGroupId
init|=
name|RealmImpl
operator|.
name|DBA_GROUP_ID
decl_stmt|;
specifier|final
name|boolean
name|hasDbaRole
init|=
literal|false
decl_stmt|;
specifier|final
name|Subject
name|mockUser
init|=
name|EasyMock
operator|.
name|createMock
argument_list|(
name|Subject
operator|.
name|class
argument_list|)
decl_stmt|;
specifier|final
name|int
name|userId
init|=
name|RealmImpl
operator|.
name|GUEST_ACCOUNT_ID
decl_stmt|;
specifier|final
name|int
name|userGroupIds
index|[]
init|=
operator|new
name|int
index|[]
block|{
name|RealmImpl
operator|.
name|GUEST_GROUP_ID
block|}
decl_stmt|;
name|expect
argument_list|(
name|mockUser
operator|.
name|hasDbaRole
argument_list|()
argument_list|)
operator|.
name|andReturn
argument_list|(
name|hasDbaRole
argument_list|)
expr_stmt|;
name|expect
argument_list|(
name|mockUser
operator|.
name|getId
argument_list|()
argument_list|)
operator|.
name|andReturn
argument_list|(
name|userId
argument_list|)
expr_stmt|;
name|expect
argument_list|(
name|mockUser
operator|.
name|getGroupIds
argument_list|()
argument_list|)
operator|.
name|andReturn
argument_list|(
name|userGroupIds
argument_list|)
expr_stmt|;
name|replay
argument_list|(
name|mockSecurityManager
argument_list|,
name|mockUser
argument_list|)
expr_stmt|;
name|Permission
name|permission
init|=
operator|new
name|UnixStylePermission
argument_list|(
name|mockSecurityManager
argument_list|,
name|ownerId
argument_list|,
name|ownerGroupId
argument_list|,
name|mode
argument_list|)
decl_stmt|;
name|boolean
name|isValid
init|=
name|permission
operator|.
name|validate
argument_list|(
name|mockUser
argument_list|,
name|Permission
operator|.
name|WRITE
argument_list|)
decl_stmt|;
name|verify
argument_list|(
name|mockSecurityManager
argument_list|,
name|mockUser
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|isValid
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|permission_toString
parameter_list|()
block|{
specifier|final
name|SecurityManager
name|mockSecurityManager
init|=
name|EasyMock
operator|.
name|createMock
argument_list|(
name|SecurityManager
operator|.
name|class
argument_list|)
decl_stmt|;
specifier|final
name|int
name|ownerId
init|=
operator|new
name|Random
argument_list|()
operator|.
name|nextInt
argument_list|(
name|SecurityManagerImpl
operator|.
name|MAX_USER_ID
argument_list|)
decl_stmt|;
specifier|final
name|int
name|ownerGroupId
init|=
operator|new
name|Random
argument_list|()
operator|.
name|nextInt
argument_list|(
name|SecurityManagerImpl
operator|.
name|MAX_GROUP_ID
argument_list|)
decl_stmt|;
name|Permission
name|permission
init|=
name|permission
operator|=
operator|new
name|UnixStylePermission
argument_list|(
name|mockSecurityManager
argument_list|,
name|ownerId
argument_list|,
name|ownerGroupId
argument_list|,
literal|07777
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|"rwsrwsrwt"
argument_list|,
name|permission
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|permission
operator|=
name|permission
operator|=
operator|new
name|UnixStylePermission
argument_list|(
name|mockSecurityManager
argument_list|,
name|ownerId
argument_list|,
name|ownerGroupId
argument_list|,
literal|04777
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"rwsrwurwu"
argument_list|,
name|permission
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|permission
operator|=
name|permission
operator|=
operator|new
name|UnixStylePermission
argument_list|(
name|mockSecurityManager
argument_list|,
name|ownerId
argument_list|,
name|ownerGroupId
argument_list|,
literal|02777
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"rwurwsrwu"
argument_list|,
name|permission
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|permission
operator|=
name|permission
operator|=
operator|new
name|UnixStylePermission
argument_list|(
name|mockSecurityManager
argument_list|,
name|ownerId
argument_list|,
name|ownerGroupId
argument_list|,
literal|01777
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"rwurwurwt"
argument_list|,
name|permission
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|permission
operator|=
name|permission
operator|=
operator|new
name|UnixStylePermission
argument_list|(
name|mockSecurityManager
argument_list|,
name|ownerId
argument_list|,
name|ownerGroupId
argument_list|,
literal|07000
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"--s--s--t"
argument_list|,
name|permission
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|permission
operator|=
name|permission
operator|=
operator|new
name|UnixStylePermission
argument_list|(
name|mockSecurityManager
argument_list|,
name|ownerId
argument_list|,
name|ownerGroupId
argument_list|,
literal|04000
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"--s------"
argument_list|,
name|permission
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|permission
operator|=
name|permission
operator|=
operator|new
name|UnixStylePermission
argument_list|(
name|mockSecurityManager
argument_list|,
name|ownerId
argument_list|,
name|ownerGroupId
argument_list|,
literal|02000
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"-----s---"
argument_list|,
name|permission
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|permission
operator|=
name|permission
operator|=
operator|new
name|UnixStylePermission
argument_list|(
name|mockSecurityManager
argument_list|,
name|ownerId
argument_list|,
name|ownerGroupId
argument_list|,
literal|01000
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"--------t"
argument_list|,
name|permission
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|permission
operator|=
name|permission
operator|=
operator|new
name|UnixStylePermission
argument_list|(
name|mockSecurityManager
argument_list|,
name|ownerId
argument_list|,
name|ownerGroupId
argument_list|,
literal|0777
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"rwurwurwu"
argument_list|,
name|permission
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|permission
operator|=
operator|new
name|UnixStylePermission
argument_list|(
name|mockSecurityManager
argument_list|,
name|ownerId
argument_list|,
name|ownerGroupId
argument_list|,
literal|0770
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"rwurwu---"
argument_list|,
name|permission
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|permission
operator|=
operator|new
name|UnixStylePermission
argument_list|(
name|mockSecurityManager
argument_list|,
name|ownerId
argument_list|,
name|ownerGroupId
argument_list|,
literal|0700
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"rwu------"
argument_list|,
name|permission
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|permission
operator|=
operator|new
name|UnixStylePermission
argument_list|(
name|mockSecurityManager
argument_list|,
name|ownerId
argument_list|,
name|ownerGroupId
argument_list|,
literal|0070
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"---rwu---"
argument_list|,
name|permission
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|permission
operator|=
operator|new
name|UnixStylePermission
argument_list|(
name|mockSecurityManager
argument_list|,
name|ownerId
argument_list|,
name|ownerGroupId
argument_list|,
literal|0007
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"------rwu"
argument_list|,
name|permission
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|permission
operator|=
operator|new
name|UnixStylePermission
argument_list|(
name|mockSecurityManager
argument_list|,
name|ownerId
argument_list|,
name|ownerGroupId
argument_list|,
literal|0744
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"rwur--r--"
argument_list|,
name|permission
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|permission
operator|=
operator|new
name|UnixStylePermission
argument_list|(
name|mockSecurityManager
argument_list|,
name|ownerId
argument_list|,
name|ownerGroupId
argument_list|,
literal|0740
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"rwur-----"
argument_list|,
name|permission
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|permission_setFromModeString_existSymbolic
parameter_list|()
throws|throws
name|SyntaxException
throws|,
name|PermissionDeniedException
block|{
specifier|final
name|SecurityManager
name|mockSecurityManager
init|=
name|EasyMock
operator|.
name|createMock
argument_list|(
name|SecurityManager
operator|.
name|class
argument_list|)
decl_stmt|;
specifier|final
name|int
name|ownerId
init|=
operator|new
name|Random
argument_list|()
operator|.
name|nextInt
argument_list|(
name|SecurityManagerImpl
operator|.
name|MAX_USER_ID
argument_list|)
decl_stmt|;
specifier|final
name|int
name|ownerGroupId
init|=
operator|new
name|Random
argument_list|()
operator|.
name|nextInt
argument_list|(
name|SecurityManagerImpl
operator|.
name|MAX_GROUP_ID
argument_list|)
decl_stmt|;
name|Permission
name|permission
init|=
name|permission
operator|=
operator|new
name|TestableUnixStylePermissionWithCurrentSubject
argument_list|(
name|mockSecurityManager
argument_list|,
name|ownerId
argument_list|,
name|ownerGroupId
argument_list|,
literal|0
argument_list|)
decl_stmt|;
name|permission
operator|.
name|setMode
argument_list|(
literal|"user=+read,+write,-update"
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|06
argument_list|,
name|permission
operator|.
name|getOwnerMode
argument_list|()
argument_list|)
expr_stmt|;
name|permission
operator|=
name|permission
operator|=
operator|new
name|TestableUnixStylePermissionWithCurrentSubject
argument_list|(
name|mockSecurityManager
argument_list|,
name|ownerId
argument_list|,
name|ownerGroupId
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|permission
operator|.
name|setMode
argument_list|(
literal|"user=+update,group=+update,other=+update"
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0111
argument_list|,
name|permission
operator|.
name|getMode
argument_list|()
argument_list|)
expr_stmt|;
name|permission
operator|=
name|permission
operator|=
operator|new
name|TestableUnixStylePermissionWithCurrentSubject
argument_list|(
name|mockSecurityManager
argument_list|,
name|ownerId
argument_list|,
name|ownerGroupId
argument_list|,
literal|0666
argument_list|)
expr_stmt|;
name|permission
operator|.
name|setMode
argument_list|(
literal|"user=+update,group=+update,other=+update"
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0777
argument_list|,
name|permission
operator|.
name|getMode
argument_list|()
argument_list|)
expr_stmt|;
name|permission
operator|=
name|permission
operator|=
operator|new
name|TestableUnixStylePermissionWithCurrentSubject
argument_list|(
name|mockSecurityManager
argument_list|,
name|ownerId
argument_list|,
name|ownerGroupId
argument_list|,
literal|0777
argument_list|)
expr_stmt|;
name|permission
operator|.
name|setMode
argument_list|(
literal|"user=-read,-write,-update,group=-read,-write,-update,other=-read,-write,-update"
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|permission
operator|.
name|getMode
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|permission_setFromModeString_unixSymbolic
parameter_list|()
throws|throws
name|SyntaxException
throws|,
name|PermissionDeniedException
block|{
specifier|final
name|SecurityManager
name|mockSecurityManager
init|=
name|EasyMock
operator|.
name|createMock
argument_list|(
name|SecurityManager
operator|.
name|class
argument_list|)
decl_stmt|;
specifier|final
name|int
name|ownerId
init|=
operator|new
name|Random
argument_list|()
operator|.
name|nextInt
argument_list|(
name|SecurityManagerImpl
operator|.
name|MAX_USER_ID
argument_list|)
decl_stmt|;
specifier|final
name|int
name|ownerGroupId
init|=
operator|new
name|Random
argument_list|()
operator|.
name|nextInt
argument_list|(
name|SecurityManagerImpl
operator|.
name|MAX_GROUP_ID
argument_list|)
decl_stmt|;
name|Permission
name|permission
init|=
name|permission
operator|=
operator|new
name|TestableUnixStylePermissionWithCurrentSubject
argument_list|(
name|mockSecurityManager
argument_list|,
name|ownerId
argument_list|,
name|ownerGroupId
argument_list|,
literal|0
argument_list|)
decl_stmt|;
name|permission
operator|.
name|setMode
argument_list|(
literal|"u+rw-u"
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|06
argument_list|,
name|permission
operator|.
name|getOwnerMode
argument_list|()
argument_list|)
expr_stmt|;
name|permission
operator|=
name|permission
operator|=
operator|new
name|TestableUnixStylePermissionWithCurrentSubject
argument_list|(
name|mockSecurityManager
argument_list|,
name|ownerId
argument_list|,
name|ownerGroupId
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|permission
operator|.
name|setMode
argument_list|(
literal|"u+u,g+u,o+u"
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0111
argument_list|,
name|permission
operator|.
name|getMode
argument_list|()
argument_list|)
expr_stmt|;
name|permission
operator|=
name|permission
operator|=
operator|new
name|TestableUnixStylePermissionWithCurrentSubject
argument_list|(
name|mockSecurityManager
argument_list|,
name|ownerId
argument_list|,
name|ownerGroupId
argument_list|,
literal|0666
argument_list|)
expr_stmt|;
name|permission
operator|.
name|setMode
argument_list|(
literal|"u+u,g+u,o+u"
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0777
argument_list|,
name|permission
operator|.
name|getMode
argument_list|()
argument_list|)
expr_stmt|;
name|permission
operator|=
name|permission
operator|=
operator|new
name|TestableUnixStylePermissionWithCurrentSubject
argument_list|(
name|mockSecurityManager
argument_list|,
name|ownerId
argument_list|,
name|ownerGroupId
argument_list|,
literal|0777
argument_list|)
expr_stmt|;
name|permission
operator|.
name|setMode
argument_list|(
literal|"u-rwu,g-rwu,o-rwu"
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|permission
operator|.
name|getMode
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|permission_setFromModeString_simpleSymbolic
parameter_list|()
throws|throws
name|SyntaxException
throws|,
name|PermissionDeniedException
block|{
specifier|final
name|SecurityManager
name|mockSecurityManager
init|=
name|EasyMock
operator|.
name|createMock
argument_list|(
name|SecurityManager
operator|.
name|class
argument_list|)
decl_stmt|;
specifier|final
name|int
name|ownerId
init|=
operator|new
name|Random
argument_list|()
operator|.
name|nextInt
argument_list|(
name|SecurityManagerImpl
operator|.
name|MAX_USER_ID
argument_list|)
decl_stmt|;
specifier|final
name|int
name|ownerGroupId
init|=
operator|new
name|Random
argument_list|()
operator|.
name|nextInt
argument_list|(
name|SecurityManagerImpl
operator|.
name|MAX_GROUP_ID
argument_list|)
decl_stmt|;
name|Permission
name|permission
init|=
name|permission
operator|=
operator|new
name|TestableUnixStylePermissionWithCurrentSubject
argument_list|(
name|mockSecurityManager
argument_list|,
name|ownerId
argument_list|,
name|ownerGroupId
argument_list|,
literal|0
argument_list|)
decl_stmt|;
name|permission
operator|.
name|setMode
argument_list|(
literal|"rw-------"
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|06
argument_list|,
name|permission
operator|.
name|getOwnerMode
argument_list|()
argument_list|)
expr_stmt|;
name|permission
operator|=
name|permission
operator|=
operator|new
name|TestableUnixStylePermissionWithCurrentSubject
argument_list|(
name|mockSecurityManager
argument_list|,
name|ownerId
argument_list|,
name|ownerGroupId
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|permission
operator|.
name|setMode
argument_list|(
literal|"rwurwurwu"
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0777
argument_list|,
name|permission
operator|.
name|getMode
argument_list|()
argument_list|)
expr_stmt|;
name|permission
operator|=
name|permission
operator|=
operator|new
name|TestableUnixStylePermissionWithCurrentSubject
argument_list|(
name|mockSecurityManager
argument_list|,
name|ownerId
argument_list|,
name|ownerGroupId
argument_list|,
literal|0666
argument_list|)
expr_stmt|;
name|permission
operator|.
name|setMode
argument_list|(
literal|"--u--u--u"
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0111
argument_list|,
name|permission
operator|.
name|getMode
argument_list|()
argument_list|)
expr_stmt|;
name|permission
operator|=
name|permission
operator|=
operator|new
name|TestableUnixStylePermissionWithCurrentSubject
argument_list|(
name|mockSecurityManager
argument_list|,
name|ownerId
argument_list|,
name|ownerGroupId
argument_list|,
literal|0777
argument_list|)
expr_stmt|;
name|permission
operator|.
name|setMode
argument_list|(
literal|"--r--r--r"
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0444
argument_list|,
name|permission
operator|.
name|getMode
argument_list|()
argument_list|)
expr_stmt|;
name|permission
operator|=
name|permission
operator|=
operator|new
name|TestableUnixStylePermissionWithCurrentSubject
argument_list|(
name|mockSecurityManager
argument_list|,
name|ownerId
argument_list|,
name|ownerGroupId
argument_list|,
literal|0777
argument_list|)
expr_stmt|;
name|permission
operator|.
name|setMode
argument_list|(
literal|"---------"
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|permission
operator|.
name|getMode
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|permission_setMode_roundtrip
parameter_list|()
throws|throws
name|PermissionDeniedException
block|{
specifier|final
name|SecurityManager
name|mockSecurityManager
init|=
name|EasyMock
operator|.
name|createMock
argument_list|(
name|SecurityManager
operator|.
name|class
argument_list|)
decl_stmt|;
name|Permission
name|permission
init|=
name|permission
operator|=
operator|new
name|TestableUnixStylePermissionWithCurrentSubject
argument_list|(
name|mockSecurityManager
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|mode
init|=
literal|0
init|;
name|mode
operator|<=
literal|07777
condition|;
name|mode
operator|++
control|)
block|{
name|permission
operator|.
name|setMode
argument_list|(
name|mode
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|mode
argument_list|,
name|permission
operator|.
name|getMode
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
specifier|public
class|class
name|TestableUnixStylePermission
extends|extends
name|UnixStylePermission
block|{
specifier|public
name|TestableUnixStylePermission
parameter_list|(
name|SecurityManager
name|sm
parameter_list|,
name|int
name|ownerId
parameter_list|,
name|int
name|ownerGroupId
parameter_list|,
name|int
name|mode
parameter_list|)
block|{
name|super
argument_list|(
name|sm
argument_list|,
name|ownerId
argument_list|,
name|ownerGroupId
argument_list|,
name|mode
argument_list|)
expr_stmt|;
block|}
specifier|public
name|long
name|getVector_testable
parameter_list|()
block|{
return|return
name|super
operator|.
name|getVector
argument_list|()
return|;
block|}
specifier|public
name|long
name|encodeAsBitVector_testable
parameter_list|(
name|int
name|userId
parameter_list|,
name|int
name|groupId
parameter_list|,
name|int
name|mode
parameter_list|)
block|{
return|return
name|super
operator|.
name|encodeAsBitVector
argument_list|(
name|userId
argument_list|,
name|groupId
argument_list|,
name|mode
argument_list|)
return|;
block|}
block|}
specifier|public
class|class
name|TestableUnixStylePermissionWithCurrentSubject
extends|extends
name|UnixStylePermission
block|{
specifier|public
name|TestableUnixStylePermissionWithCurrentSubject
parameter_list|(
name|SecurityManager
name|sm
parameter_list|)
block|{
name|super
argument_list|(
name|sm
argument_list|)
expr_stmt|;
block|}
specifier|public
name|TestableUnixStylePermissionWithCurrentSubject
parameter_list|(
name|SecurityManager
name|sm
parameter_list|,
name|int
name|ownerId
parameter_list|,
name|int
name|ownerGroupId
parameter_list|,
name|int
name|mode
parameter_list|)
block|{
name|super
argument_list|(
name|sm
argument_list|,
name|ownerId
argument_list|,
name|ownerGroupId
argument_list|,
name|mode
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|isCurrentSubjectDBA
parameter_list|()
block|{
return|return
literal|true
return|;
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|isCurrentSubjectInGroup
parameter_list|()
block|{
return|return
literal|true
return|;
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|isCurrentSubjectOwner
parameter_list|()
block|{
return|return
literal|true
return|;
block|}
block|}
block|}
end_class

end_unit

