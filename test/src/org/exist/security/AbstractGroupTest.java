begin_unit|revision:1.0.0;language:Java;cregit-version:0.0.1
begin_package
package|package
name|org
operator|.
name|exist
operator|.
name|security
package|;
end_package

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|Database
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|org
operator|.
name|easymock
operator|.
name|classextension
operator|.
name|EasyMock
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|easymock
operator|.
name|classextension
operator|.
name|EasyMock
operator|.
name|verify
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|easymock
operator|.
name|classextension
operator|.
name|EasyMock
operator|.
name|replay
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|easymock
operator|.
name|classextension
operator|.
name|EasyMock
operator|.
name|expect
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|config
operator|.
name|ConfigurationException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|config
operator|.
name|Reference
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|config
operator|.
name|ReferenceImpl
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertTrue
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertFalse
import|;
end_import

begin_comment
comment|/**  *  * @author aretter  */
end_comment

begin_class
specifier|public
class|class
name|AbstractGroupTest
block|{
annotation|@
name|Test
specifier|public
name|void
name|isManager_retuns_true_when_manager
parameter_list|()
throws|throws
name|ConfigurationException
block|{
name|AbstractRealm
name|mockRealm
init|=
name|EasyMock
operator|.
name|createMock
argument_list|(
name|AbstractRealm
operator|.
name|class
argument_list|)
decl_stmt|;
name|SecurityManager
name|mockSecurityManager
init|=
name|EasyMock
operator|.
name|createMock
argument_list|(
name|SecurityManager
operator|.
name|class
argument_list|)
decl_stmt|;
name|Account
name|mockAccount
init|=
name|EasyMock
operator|.
name|createMock
argument_list|(
name|Account
operator|.
name|class
argument_list|)
decl_stmt|;
name|TestableGroupImpl
name|group
init|=
operator|new
name|TestableGroupImpl
argument_list|(
name|mockRealm
argument_list|)
decl_stmt|;
specifier|final
name|List
argument_list|<
name|Reference
argument_list|<
name|SecurityManager
argument_list|,
name|Account
argument_list|>
argument_list|>
name|managers
init|=
operator|new
name|ArrayList
argument_list|<
name|Reference
argument_list|<
name|SecurityManager
argument_list|,
name|Account
argument_list|>
argument_list|>
argument_list|()
decl_stmt|;
name|managers
operator|.
name|add
argument_list|(
operator|new
name|ReferenceImpl
argument_list|<
name|SecurityManager
argument_list|,
name|Account
argument_list|>
argument_list|(
name|mockSecurityManager
argument_list|,
name|mockAccount
argument_list|)
argument_list|)
expr_stmt|;
name|group
operator|.
name|setManagers
argument_list|(
name|managers
argument_list|)
expr_stmt|;
specifier|final
name|boolean
name|result
init|=
name|group
operator|.
name|isManager
argument_list|(
name|mockAccount
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
name|result
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|isManager_returns_false_when_not_manager
parameter_list|()
throws|throws
name|ConfigurationException
block|{
name|AbstractRealm
name|mockRealm
init|=
name|EasyMock
operator|.
name|createMock
argument_list|(
name|AbstractRealm
operator|.
name|class
argument_list|)
decl_stmt|;
name|SecurityManager
name|mockSecurityManager
init|=
name|EasyMock
operator|.
name|createMock
argument_list|(
name|SecurityManager
operator|.
name|class
argument_list|)
decl_stmt|;
name|Account
name|mockAccount
init|=
name|EasyMock
operator|.
name|createMock
argument_list|(
name|Account
operator|.
name|class
argument_list|)
decl_stmt|;
name|TestableGroupImpl
name|group
init|=
operator|new
name|TestableGroupImpl
argument_list|(
name|mockRealm
argument_list|)
decl_stmt|;
specifier|final
name|List
argument_list|<
name|Reference
argument_list|<
name|SecurityManager
argument_list|,
name|Account
argument_list|>
argument_list|>
name|managers
init|=
operator|new
name|ArrayList
argument_list|<
name|Reference
argument_list|<
name|SecurityManager
argument_list|,
name|Account
argument_list|>
argument_list|>
argument_list|()
decl_stmt|;
name|managers
operator|.
name|add
argument_list|(
operator|new
name|ReferenceImpl
argument_list|<
name|SecurityManager
argument_list|,
name|Account
argument_list|>
argument_list|(
name|mockSecurityManager
argument_list|,
name|mockAccount
argument_list|)
argument_list|)
expr_stmt|;
name|group
operator|.
name|setManagers
argument_list|(
name|managers
argument_list|)
expr_stmt|;
specifier|final
name|Account
name|otherAccount
init|=
name|EasyMock
operator|.
name|createMock
argument_list|(
name|Account
operator|.
name|class
argument_list|)
decl_stmt|;
specifier|final
name|boolean
name|result
init|=
name|group
operator|.
name|isManager
argument_list|(
name|otherAccount
argument_list|)
decl_stmt|;
name|assertFalse
argument_list|(
name|result
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
argument_list|(
name|expected
operator|=
name|PermissionDeniedException
operator|.
name|class
argument_list|)
specifier|public
name|void
name|assertCanModifyGroup_fails_when_user_is_null
parameter_list|()
throws|throws
name|PermissionDeniedException
throws|,
name|ConfigurationException
block|{
name|AbstractRealm
name|mockRealm
init|=
name|EasyMock
operator|.
name|createMock
argument_list|(
name|AbstractRealm
operator|.
name|class
argument_list|)
decl_stmt|;
name|TestableGroupImpl
name|group
init|=
operator|new
name|TestableGroupImpl
argument_list|(
name|mockRealm
argument_list|)
decl_stmt|;
name|group
operator|.
name|assertCanModifyGroup
argument_list|(
literal|null
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|assertCanModifyGroup_succeeds_when_user_is_dba
parameter_list|()
throws|throws
name|PermissionDeniedException
throws|,
name|ConfigurationException
block|{
name|AbstractRealm
name|mockRealm
init|=
name|EasyMock
operator|.
name|createMock
argument_list|(
name|AbstractRealm
operator|.
name|class
argument_list|)
decl_stmt|;
name|Account
name|mockAccount
init|=
name|EasyMock
operator|.
name|createMock
argument_list|(
name|Account
operator|.
name|class
argument_list|)
decl_stmt|;
name|TestableGroupImpl
name|group
init|=
operator|new
name|TestableGroupImpl
argument_list|(
name|mockRealm
argument_list|)
decl_stmt|;
comment|//expectations
name|expect
argument_list|(
name|mockAccount
operator|.
name|hasDbaRole
argument_list|()
argument_list|)
operator|.
name|andReturn
argument_list|(
name|Boolean
operator|.
name|TRUE
argument_list|)
expr_stmt|;
name|replay
argument_list|(
name|mockAccount
argument_list|)
expr_stmt|;
comment|//test
name|group
operator|.
name|assertCanModifyGroup
argument_list|(
name|mockAccount
argument_list|)
expr_stmt|;
name|verify
argument_list|(
name|mockAccount
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
argument_list|(
name|expected
operator|=
name|PermissionDeniedException
operator|.
name|class
argument_list|)
specifier|public
name|void
name|assertCanModifyGroup_fails_when_user_is_not_dba
parameter_list|()
throws|throws
name|PermissionDeniedException
throws|,
name|ConfigurationException
block|{
name|AbstractRealm
name|mockRealm
init|=
name|EasyMock
operator|.
name|createMock
argument_list|(
name|AbstractRealm
operator|.
name|class
argument_list|)
decl_stmt|;
name|Account
name|mockAccount
init|=
name|EasyMock
operator|.
name|createMock
argument_list|(
name|Account
operator|.
name|class
argument_list|)
decl_stmt|;
name|TestableGroupImpl
name|group
init|=
operator|new
name|TestableGroupImpl
argument_list|(
name|mockRealm
argument_list|)
decl_stmt|;
comment|//expectations
name|expect
argument_list|(
name|mockAccount
operator|.
name|hasDbaRole
argument_list|()
argument_list|)
operator|.
name|andReturn
argument_list|(
name|Boolean
operator|.
name|FALSE
argument_list|)
expr_stmt|;
name|expect
argument_list|(
name|mockAccount
operator|.
name|getName
argument_list|()
argument_list|)
operator|.
name|andReturn
argument_list|(
literal|"test"
argument_list|)
expr_stmt|;
name|replay
argument_list|(
name|mockAccount
argument_list|)
expr_stmt|;
comment|//test
name|group
operator|.
name|assertCanModifyGroup
argument_list|(
name|mockAccount
argument_list|)
expr_stmt|;
name|verify
argument_list|(
name|mockAccount
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|assertCanModifyGroup_succeeds_when_user_is_manager
parameter_list|()
throws|throws
name|PermissionDeniedException
throws|,
name|ConfigurationException
block|{
name|AbstractRealm
name|mockRealm
init|=
name|EasyMock
operator|.
name|createMock
argument_list|(
name|AbstractRealm
operator|.
name|class
argument_list|)
decl_stmt|;
name|Account
name|mockAccount
init|=
name|EasyMock
operator|.
name|createMock
argument_list|(
name|Account
operator|.
name|class
argument_list|)
decl_stmt|;
name|Group
name|partialMockGroup
init|=
name|EasyMock
operator|.
name|createMockBuilder
argument_list|(
name|AbstractGroup
operator|.
name|class
argument_list|)
operator|.
name|withConstructor
argument_list|(
name|AbstractRealm
operator|.
name|class
argument_list|,
name|int
operator|.
name|class
argument_list|,
name|String
operator|.
name|class
argument_list|,
name|List
operator|.
name|class
argument_list|)
operator|.
name|withArgs
argument_list|(
name|mockRealm
argument_list|,
literal|1
argument_list|,
literal|"testGroup"
argument_list|,
literal|null
argument_list|)
operator|.
name|addMockedMethod
argument_list|(
literal|"isManager"
argument_list|)
operator|.
name|createNiceMock
argument_list|()
decl_stmt|;
comment|//expectations
name|expect
argument_list|(
name|mockAccount
operator|.
name|hasDbaRole
argument_list|()
argument_list|)
operator|.
name|andReturn
argument_list|(
name|Boolean
operator|.
name|FALSE
argument_list|)
expr_stmt|;
name|expect
argument_list|(
name|partialMockGroup
operator|.
name|isManager
argument_list|(
name|mockAccount
argument_list|)
argument_list|)
operator|.
name|andReturn
argument_list|(
name|Boolean
operator|.
name|TRUE
argument_list|)
expr_stmt|;
name|replay
argument_list|(
name|mockAccount
argument_list|,
name|partialMockGroup
argument_list|)
expr_stmt|;
comment|//test
name|partialMockGroup
operator|.
name|assertCanModifyGroup
argument_list|(
name|mockAccount
argument_list|)
expr_stmt|;
name|verify
argument_list|(
name|mockAccount
argument_list|,
name|partialMockGroup
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
argument_list|(
name|expected
operator|=
name|PermissionDeniedException
operator|.
name|class
argument_list|)
specifier|public
name|void
name|assertCanModifyGroup_fails_when_user_is_not_manager
parameter_list|()
throws|throws
name|PermissionDeniedException
throws|,
name|ConfigurationException
block|{
name|AbstractRealm
name|mockRealm
init|=
name|EasyMock
operator|.
name|createMock
argument_list|(
name|AbstractRealm
operator|.
name|class
argument_list|)
decl_stmt|;
name|Account
name|mockAccount
init|=
name|EasyMock
operator|.
name|createMock
argument_list|(
name|Account
operator|.
name|class
argument_list|)
decl_stmt|;
name|Group
name|partialMockGroup
init|=
name|EasyMock
operator|.
name|createMockBuilder
argument_list|(
name|AbstractGroup
operator|.
name|class
argument_list|)
operator|.
name|withConstructor
argument_list|(
name|AbstractRealm
operator|.
name|class
argument_list|,
name|int
operator|.
name|class
argument_list|,
name|String
operator|.
name|class
argument_list|,
name|List
operator|.
name|class
argument_list|)
operator|.
name|withArgs
argument_list|(
name|mockRealm
argument_list|,
literal|1
argument_list|,
literal|"testGroup"
argument_list|,
literal|null
argument_list|)
operator|.
name|addMockedMethod
argument_list|(
literal|"isManager"
argument_list|)
operator|.
name|createMock
argument_list|()
decl_stmt|;
comment|//expectations
name|expect
argument_list|(
name|mockAccount
operator|.
name|hasDbaRole
argument_list|()
argument_list|)
operator|.
name|andReturn
argument_list|(
name|Boolean
operator|.
name|FALSE
argument_list|)
expr_stmt|;
name|expect
argument_list|(
name|partialMockGroup
operator|.
name|isManager
argument_list|(
name|mockAccount
argument_list|)
argument_list|)
operator|.
name|andReturn
argument_list|(
name|Boolean
operator|.
name|FALSE
argument_list|)
expr_stmt|;
name|expect
argument_list|(
name|mockAccount
operator|.
name|getName
argument_list|()
argument_list|)
operator|.
name|andReturn
argument_list|(
literal|"test"
argument_list|)
expr_stmt|;
name|replay
argument_list|(
name|mockAccount
argument_list|,
name|partialMockGroup
argument_list|)
expr_stmt|;
comment|//test
name|partialMockGroup
operator|.
name|assertCanModifyGroup
argument_list|(
name|mockAccount
argument_list|)
expr_stmt|;
name|verify
argument_list|(
name|mockAccount
argument_list|,
name|partialMockGroup
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|addManager_calls_assertCanModifyGroup
parameter_list|()
throws|throws
name|PermissionDeniedException
throws|,
name|NoSuchMethodException
block|{
name|AbstractRealm
name|mockRealm
init|=
name|EasyMock
operator|.
name|createMock
argument_list|(
name|AbstractRealm
operator|.
name|class
argument_list|)
decl_stmt|;
name|Subject
name|mockSubject
init|=
name|EasyMock
operator|.
name|createMock
argument_list|(
name|Subject
operator|.
name|class
argument_list|)
decl_stmt|;
name|Database
name|mockDatabase
init|=
name|EasyMock
operator|.
name|createMock
argument_list|(
name|Database
operator|.
name|class
argument_list|)
decl_stmt|;
name|Group
name|partialMockGroup
init|=
name|EasyMock
operator|.
name|createMockBuilder
argument_list|(
name|AbstractGroup
operator|.
name|class
argument_list|)
operator|.
name|withConstructor
argument_list|(
name|AbstractRealm
operator|.
name|class
argument_list|,
name|int
operator|.
name|class
argument_list|,
name|String
operator|.
name|class
argument_list|,
name|List
operator|.
name|class
argument_list|)
operator|.
name|withArgs
argument_list|(
name|mockRealm
argument_list|,
literal|1
argument_list|,
literal|"testGroup"
argument_list|,
literal|null
argument_list|)
operator|.
name|addMockedMethod
argument_list|(
literal|"assertCanModifyGroup"
argument_list|,
name|Account
operator|.
name|class
argument_list|)
operator|.
name|addMockedMethod
argument_list|(
name|AbstractGroup
operator|.
name|class
operator|.
name|getDeclaredMethod
argument_list|(
literal|"_addManager"
argument_list|,
name|Account
operator|.
name|class
argument_list|)
argument_list|)
operator|.
name|createNiceMock
argument_list|()
decl_stmt|;
comment|//expectations
name|expect
argument_list|(
name|mockRealm
operator|.
name|getDatabase
argument_list|()
argument_list|)
operator|.
name|andReturn
argument_list|(
name|mockDatabase
argument_list|)
expr_stmt|;
name|expect
argument_list|(
name|mockDatabase
operator|.
name|getSubject
argument_list|()
argument_list|)
operator|.
name|andReturn
argument_list|(
name|mockSubject
argument_list|)
expr_stmt|;
name|partialMockGroup
operator|.
name|assertCanModifyGroup
argument_list|(
name|mockSubject
argument_list|)
expr_stmt|;
name|replay
argument_list|(
name|mockRealm
argument_list|,
name|mockDatabase
argument_list|,
name|partialMockGroup
argument_list|)
expr_stmt|;
comment|//test
name|partialMockGroup
operator|.
name|addManager
argument_list|(
operator|(
name|Account
operator|)
literal|null
argument_list|)
expr_stmt|;
name|verify
argument_list|(
name|mockRealm
argument_list|,
name|mockDatabase
argument_list|,
name|partialMockGroup
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|addManagerWithString_calls_assertCanModifyGroup
parameter_list|()
throws|throws
name|PermissionDeniedException
throws|,
name|NoSuchMethodException
block|{
name|AbstractRealm
name|mockRealm
init|=
name|EasyMock
operator|.
name|createNiceMock
argument_list|(
name|AbstractRealm
operator|.
name|class
argument_list|)
decl_stmt|;
name|Subject
name|mockSubject
init|=
name|EasyMock
operator|.
name|createMock
argument_list|(
name|Subject
operator|.
name|class
argument_list|)
decl_stmt|;
name|Database
name|mockDatabase
init|=
name|EasyMock
operator|.
name|createMock
argument_list|(
name|Database
operator|.
name|class
argument_list|)
decl_stmt|;
name|AbstractGroup
name|partialMockGroup
init|=
name|EasyMock
operator|.
name|createMockBuilder
argument_list|(
name|AbstractGroup
operator|.
name|class
argument_list|)
operator|.
name|withConstructor
argument_list|(
name|AbstractRealm
operator|.
name|class
argument_list|,
name|int
operator|.
name|class
argument_list|,
name|String
operator|.
name|class
argument_list|,
name|List
operator|.
name|class
argument_list|)
operator|.
name|withArgs
argument_list|(
name|mockRealm
argument_list|,
literal|1
argument_list|,
literal|"testGroup"
argument_list|,
literal|null
argument_list|)
operator|.
name|addMockedMethod
argument_list|(
literal|"assertCanModifyGroup"
argument_list|,
name|Account
operator|.
name|class
argument_list|)
operator|.
name|addMockedMethod
argument_list|(
name|AbstractGroup
operator|.
name|class
operator|.
name|getDeclaredMethod
argument_list|(
literal|"_addManager"
argument_list|,
name|Account
operator|.
name|class
argument_list|)
argument_list|)
operator|.
name|createNiceMock
argument_list|()
decl_stmt|;
comment|//expectations
name|expect
argument_list|(
name|mockRealm
operator|.
name|getDatabase
argument_list|()
argument_list|)
operator|.
name|andReturn
argument_list|(
name|mockDatabase
argument_list|)
expr_stmt|;
name|expect
argument_list|(
name|mockDatabase
operator|.
name|getSubject
argument_list|()
argument_list|)
operator|.
name|andReturn
argument_list|(
name|mockSubject
argument_list|)
expr_stmt|;
name|partialMockGroup
operator|.
name|assertCanModifyGroup
argument_list|(
name|mockSubject
argument_list|)
expr_stmt|;
name|replay
argument_list|(
name|mockRealm
argument_list|,
name|mockDatabase
argument_list|,
name|partialMockGroup
argument_list|)
expr_stmt|;
comment|//test
name|partialMockGroup
operator|.
name|addManager
argument_list|(
operator|(
name|String
operator|)
literal|null
argument_list|)
expr_stmt|;
name|verify
argument_list|(
name|mockRealm
argument_list|,
name|mockDatabase
argument_list|,
name|partialMockGroup
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|removeManager_calls_assertCanModifyGroup
parameter_list|()
throws|throws
name|PermissionDeniedException
throws|,
name|NoSuchMethodException
block|{
name|AbstractRealm
name|mockRealm
init|=
name|EasyMock
operator|.
name|createMock
argument_list|(
name|AbstractRealm
operator|.
name|class
argument_list|)
decl_stmt|;
name|Subject
name|mockSubject
init|=
name|EasyMock
operator|.
name|createMock
argument_list|(
name|Subject
operator|.
name|class
argument_list|)
decl_stmt|;
name|Database
name|mockDatabase
init|=
name|EasyMock
operator|.
name|createMock
argument_list|(
name|Database
operator|.
name|class
argument_list|)
decl_stmt|;
name|Group
name|partialMockGroup
init|=
name|EasyMock
operator|.
name|createMockBuilder
argument_list|(
name|AbstractGroup
operator|.
name|class
argument_list|)
operator|.
name|withConstructor
argument_list|(
name|AbstractRealm
operator|.
name|class
argument_list|,
name|int
operator|.
name|class
argument_list|,
name|String
operator|.
name|class
argument_list|,
name|List
operator|.
name|class
argument_list|)
operator|.
name|withArgs
argument_list|(
name|mockRealm
argument_list|,
literal|1
argument_list|,
literal|"testGroup"
argument_list|,
literal|null
argument_list|)
operator|.
name|addMockedMethod
argument_list|(
literal|"assertCanModifyGroup"
argument_list|,
name|Account
operator|.
name|class
argument_list|)
operator|.
name|addMockedMethod
argument_list|(
name|AbstractGroup
operator|.
name|class
operator|.
name|getDeclaredMethod
argument_list|(
literal|"_addManager"
argument_list|,
name|Account
operator|.
name|class
argument_list|)
argument_list|)
operator|.
name|createNiceMock
argument_list|()
decl_stmt|;
comment|//expectations
name|expect
argument_list|(
name|mockRealm
operator|.
name|getDatabase
argument_list|()
argument_list|)
operator|.
name|andReturn
argument_list|(
name|mockDatabase
argument_list|)
expr_stmt|;
name|expect
argument_list|(
name|mockDatabase
operator|.
name|getSubject
argument_list|()
argument_list|)
operator|.
name|andReturn
argument_list|(
name|mockSubject
argument_list|)
expr_stmt|;
name|partialMockGroup
operator|.
name|assertCanModifyGroup
argument_list|(
name|mockSubject
argument_list|)
expr_stmt|;
name|replay
argument_list|(
name|mockRealm
argument_list|,
name|mockDatabase
argument_list|,
name|partialMockGroup
argument_list|)
expr_stmt|;
comment|//test
name|partialMockGroup
operator|.
name|removeManager
argument_list|(
operator|(
name|Account
operator|)
literal|null
argument_list|)
expr_stmt|;
name|verify
argument_list|(
name|mockRealm
argument_list|,
name|mockDatabase
argument_list|,
name|partialMockGroup
argument_list|)
expr_stmt|;
block|}
specifier|public
class|class
name|TestableGroupImpl
extends|extends
name|AbstractGroup
block|{
specifier|public
name|TestableGroupImpl
parameter_list|(
name|AbstractRealm
name|realm
parameter_list|)
throws|throws
name|ConfigurationException
block|{
name|super
argument_list|(
name|realm
argument_list|,
literal|1
argument_list|,
literal|"testGroup"
argument_list|,
literal|null
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|setManagers
parameter_list|(
name|List
argument_list|<
name|Reference
argument_list|<
name|SecurityManager
argument_list|,
name|Account
argument_list|>
argument_list|>
name|managers
parameter_list|)
block|{
name|super
operator|.
name|setManagers
argument_list|(
name|managers
argument_list|)
expr_stmt|;
block|}
block|}
block|}
end_class

end_unit

