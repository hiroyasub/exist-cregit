begin_unit|revision:1.0.0;language:Java;cregit-version:0.0.1
begin_package
package|package
name|org
operator|.
name|exist
operator|.
name|security
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|org
operator|.
name|easymock
operator|.
name|classextension
operator|.
name|EasyMock
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|config
operator|.
name|ConfigurationException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|config
operator|.
name|Reference
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|config
operator|.
name|ReferenceImpl
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertTrue
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertFalse
import|;
end_import

begin_comment
comment|/**  *  * @author aretter  */
end_comment

begin_class
specifier|public
class|class
name|AbstractGroupTest
block|{
annotation|@
name|Test
specifier|public
name|void
name|isManager_retuns_true_when_manager
parameter_list|()
throws|throws
name|ConfigurationException
block|{
name|AbstractRealm
name|mockRealm
init|=
name|EasyMock
operator|.
name|createMock
argument_list|(
name|AbstractRealm
operator|.
name|class
argument_list|)
decl_stmt|;
name|SecurityManager
name|mockSecurityManager
init|=
name|EasyMock
operator|.
name|createMock
argument_list|(
name|SecurityManager
operator|.
name|class
argument_list|)
decl_stmt|;
name|Account
name|mockAccount
init|=
name|EasyMock
operator|.
name|createMock
argument_list|(
name|Account
operator|.
name|class
argument_list|)
decl_stmt|;
name|TestableGroupImpl
name|group
init|=
operator|new
name|TestableGroupImpl
argument_list|(
name|mockRealm
argument_list|)
decl_stmt|;
specifier|final
name|List
argument_list|<
name|Reference
argument_list|<
name|SecurityManager
argument_list|,
name|Account
argument_list|>
argument_list|>
name|managers
init|=
operator|new
name|ArrayList
argument_list|<
name|Reference
argument_list|<
name|SecurityManager
argument_list|,
name|Account
argument_list|>
argument_list|>
argument_list|()
decl_stmt|;
name|managers
operator|.
name|add
argument_list|(
operator|new
name|ReferenceImpl
argument_list|<
name|SecurityManager
argument_list|,
name|Account
argument_list|>
argument_list|(
name|mockSecurityManager
argument_list|,
name|mockAccount
argument_list|)
argument_list|)
expr_stmt|;
name|group
operator|.
name|setManagers
argument_list|(
name|managers
argument_list|)
expr_stmt|;
specifier|final
name|boolean
name|result
init|=
name|group
operator|.
name|isManager
argument_list|(
name|mockAccount
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
name|result
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|isManager_returns_false_when_not_manager
parameter_list|()
throws|throws
name|ConfigurationException
block|{
name|AbstractRealm
name|mockRealm
init|=
name|EasyMock
operator|.
name|createMock
argument_list|(
name|AbstractRealm
operator|.
name|class
argument_list|)
decl_stmt|;
name|SecurityManager
name|mockSecurityManager
init|=
name|EasyMock
operator|.
name|createMock
argument_list|(
name|SecurityManager
operator|.
name|class
argument_list|)
decl_stmt|;
name|Account
name|mockAccount
init|=
name|EasyMock
operator|.
name|createMock
argument_list|(
name|Account
operator|.
name|class
argument_list|)
decl_stmt|;
name|TestableGroupImpl
name|group
init|=
operator|new
name|TestableGroupImpl
argument_list|(
name|mockRealm
argument_list|)
decl_stmt|;
specifier|final
name|List
argument_list|<
name|Reference
argument_list|<
name|SecurityManager
argument_list|,
name|Account
argument_list|>
argument_list|>
name|managers
init|=
operator|new
name|ArrayList
argument_list|<
name|Reference
argument_list|<
name|SecurityManager
argument_list|,
name|Account
argument_list|>
argument_list|>
argument_list|()
decl_stmt|;
name|managers
operator|.
name|add
argument_list|(
operator|new
name|ReferenceImpl
argument_list|<
name|SecurityManager
argument_list|,
name|Account
argument_list|>
argument_list|(
name|mockSecurityManager
argument_list|,
name|mockAccount
argument_list|)
argument_list|)
expr_stmt|;
name|group
operator|.
name|setManagers
argument_list|(
name|managers
argument_list|)
expr_stmt|;
specifier|final
name|Account
name|otherAccount
init|=
name|EasyMock
operator|.
name|createMock
argument_list|(
name|Account
operator|.
name|class
argument_list|)
decl_stmt|;
specifier|final
name|boolean
name|result
init|=
name|group
operator|.
name|isManager
argument_list|(
name|otherAccount
argument_list|)
decl_stmt|;
name|assertFalse
argument_list|(
name|result
argument_list|)
expr_stmt|;
block|}
specifier|public
class|class
name|TestableGroupImpl
extends|extends
name|AbstractGroup
block|{
specifier|public
name|TestableGroupImpl
parameter_list|(
name|AbstractRealm
name|realm
parameter_list|)
throws|throws
name|ConfigurationException
block|{
name|super
argument_list|(
name|realm
argument_list|,
literal|1
argument_list|,
literal|"testGroup"
argument_list|,
literal|null
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|setManagers
parameter_list|(
name|List
argument_list|<
name|Reference
argument_list|<
name|SecurityManager
argument_list|,
name|Account
argument_list|>
argument_list|>
name|managers
parameter_list|)
block|{
name|super
operator|.
name|setManagers
argument_list|(
name|managers
argument_list|)
expr_stmt|;
block|}
block|}
block|}
end_class

end_unit

