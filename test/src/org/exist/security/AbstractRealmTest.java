begin_unit|revision:1.0.0;language:Java;cregit-version:0.0.1
begin_package
package|package
name|org
operator|.
name|exist
operator|.
name|security
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|storage
operator|.
name|DBBroker
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|Database
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_import
import|import
name|org
operator|.
name|easymock
operator|.
name|classextension
operator|.
name|EasyMock
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|EXistException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|config
operator|.
name|Configuration
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|easymock
operator|.
name|classextension
operator|.
name|EasyMock
operator|.
name|expect
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|easymock
operator|.
name|classextension
operator|.
name|EasyMock
operator|.
name|replay
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|easymock
operator|.
name|classextension
operator|.
name|EasyMock
operator|.
name|verify
import|;
end_import

begin_comment
comment|/**  *  * @author aretter  */
end_comment

begin_class
specifier|public
class|class
name|AbstractRealmTest
block|{
comment|/*     @Test     public void updateAccount_calls_assertCanModifyAccount() throws PermissionDeniedException, EXistException {         SecurityManager mockSecurityManager = EasyMock.createMock(SecurityManager.class);         Configuration mockConfiguration = EasyMock.createMock(Configuration.class);         Database mockDatabase = EasyMock.createMock(Database.class);         Subject mockSubject = EasyMock.createMock(Subject.class);          Account mockAccount = EasyMock.createMockBuilder(AbstractAccount.class)                 .addMockedMethod("getName", new Class[0])                 .addMockedMethod("getGroups", new Class[0])                 .addMockedMethod("assertCanModifyAccount", new Class[]{Account.class})                 .addMockedMethod("getRealm", new Class[0])                 .createNiceMock();         final String accountName = "someAccount";          AbstractRealm mockRealm = EasyMock                 .createMockBuilder(AbstractRealm.class)                 .withConstructor(SecurityManager.class, Configuration.class)                 .withArgs(mockSecurityManager, mockConfiguration)                 .addMockedMethod("getDatabase", new Class[0])                 .addMockedMethod("getAccount", new Class[]{Subject.class, String.class})                 .createNiceMock();          Account mockUpdatingAccount = EasyMock.createMock(Account.class);          //expectations         expect(mockRealm.getDatabase()).andReturn(mockDatabase);         expect(mockDatabase.getSubject()).andReturn(mockSubject);         mockAccount.assertCanModifyAccount(mockSubject);         expect(mockAccount.getName()).andReturn(accountName);         expect(mockRealm.getAccount(null, accountName)).andReturn(mockUpdatingAccount);         expect(mockAccount.getGroups()).andReturn(new String[0]);         expect(mockUpdatingAccount.getGroups()).andReturn(new String[0]);          replay(mockRealm, mockDatabase, mockSubject, mockUpdatingAccount, mockAccount);          mockRealm.updateAccount(null, mockAccount);          verify(mockRealm, mockDatabase, mockSubject, mockUpdatingAccount, mockAccount);     } */
annotation|@
name|Test
specifier|public
name|void
name|updateGroup_calls_assertCanModifyGroup
parameter_list|()
throws|throws
name|PermissionDeniedException
throws|,
name|EXistException
block|{
name|SecurityManager
name|mockSecurityManager
init|=
name|EasyMock
operator|.
name|createMock
argument_list|(
name|SecurityManager
operator|.
name|class
argument_list|)
decl_stmt|;
name|Configuration
name|mockConfiguration
init|=
name|EasyMock
operator|.
name|createMock
argument_list|(
name|Configuration
operator|.
name|class
argument_list|)
decl_stmt|;
name|Database
name|mockDatabase
init|=
name|EasyMock
operator|.
name|createMock
argument_list|(
name|Database
operator|.
name|class
argument_list|)
decl_stmt|;
name|DBBroker
name|mockBroker
init|=
name|EasyMock
operator|.
name|createMock
argument_list|(
name|DBBroker
operator|.
name|class
argument_list|)
decl_stmt|;
name|Subject
name|mockSubject
init|=
name|EasyMock
operator|.
name|createMock
argument_list|(
name|Subject
operator|.
name|class
argument_list|)
decl_stmt|;
name|Group
name|mockGroup
init|=
name|EasyMock
operator|.
name|createMockBuilder
argument_list|(
name|AbstractGroup
operator|.
name|class
argument_list|)
operator|.
name|addMockedMethod
argument_list|(
literal|"getName"
argument_list|,
operator|new
name|Class
index|[
literal|0
index|]
argument_list|)
operator|.
name|addMockedMethod
argument_list|(
literal|"getManagers"
argument_list|,
operator|new
name|Class
index|[
literal|0
index|]
argument_list|)
operator|.
name|addMockedMethod
argument_list|(
literal|"assertCanModifyGroup"
argument_list|,
operator|new
name|Class
index|[]
block|{
name|Account
operator|.
name|class
block|}
argument_list|)
operator|.
name|createNiceMock
argument_list|()
decl_stmt|;
specifier|final
name|String
name|groupName
init|=
literal|"someGroup"
decl_stmt|;
name|AbstractRealm
name|mockRealm
init|=
name|EasyMock
operator|.
name|createMockBuilder
argument_list|(
name|AbstractRealm
operator|.
name|class
argument_list|)
operator|.
name|withConstructor
argument_list|(
name|SecurityManager
operator|.
name|class
argument_list|,
name|Configuration
operator|.
name|class
argument_list|)
operator|.
name|withArgs
argument_list|(
name|mockSecurityManager
argument_list|,
name|mockConfiguration
argument_list|)
operator|.
name|addMockedMethod
argument_list|(
literal|"getDatabase"
argument_list|,
operator|new
name|Class
index|[
literal|0
index|]
argument_list|)
operator|.
name|addMockedMethod
argument_list|(
literal|"getGroup"
argument_list|,
operator|new
name|Class
index|[]
block|{
name|Subject
operator|.
name|class
block|,
name|String
operator|.
name|class
block|}
argument_list|)
operator|.
name|createNiceMock
argument_list|()
decl_stmt|;
name|Group
name|mockUpdatingGroup
init|=
name|EasyMock
operator|.
name|createNiceMock
argument_list|(
name|Group
operator|.
name|class
argument_list|)
decl_stmt|;
comment|//expectations
name|expect
argument_list|(
name|mockRealm
operator|.
name|getDatabase
argument_list|()
argument_list|)
operator|.
name|andReturn
argument_list|(
name|mockDatabase
argument_list|)
expr_stmt|;
name|expect
argument_list|(
name|mockDatabase
operator|.
name|get
argument_list|(
literal|null
argument_list|)
argument_list|)
operator|.
name|andReturn
argument_list|(
name|mockBroker
argument_list|)
expr_stmt|;
name|expect
argument_list|(
name|mockBroker
operator|.
name|getSubject
argument_list|()
argument_list|)
operator|.
name|andReturn
argument_list|(
name|mockSubject
argument_list|)
expr_stmt|;
name|mockGroup
operator|.
name|assertCanModifyGroup
argument_list|(
name|mockSubject
argument_list|)
expr_stmt|;
name|expect
argument_list|(
name|mockGroup
operator|.
name|getName
argument_list|()
argument_list|)
operator|.
name|andReturn
argument_list|(
name|groupName
argument_list|)
expr_stmt|;
name|expect
argument_list|(
name|mockRealm
operator|.
name|getGroup
argument_list|(
name|groupName
argument_list|)
argument_list|)
operator|.
name|andReturn
argument_list|(
name|mockUpdatingGroup
argument_list|)
expr_stmt|;
name|expect
argument_list|(
name|mockRealm
operator|.
name|getDatabase
argument_list|()
argument_list|)
operator|.
name|andReturn
argument_list|(
name|mockDatabase
argument_list|)
expr_stmt|;
name|expect
argument_list|(
name|mockGroup
operator|.
name|getManagers
argument_list|()
argument_list|)
operator|.
name|andReturn
argument_list|(
operator|new
name|ArrayList
argument_list|<
name|Account
argument_list|>
argument_list|()
argument_list|)
expr_stmt|;
name|mockGroup
operator|.
name|save
argument_list|()
expr_stmt|;
name|expect
argument_list|(
name|mockUpdatingGroup
operator|.
name|getManagers
argument_list|()
argument_list|)
operator|.
name|andReturn
argument_list|(
operator|new
name|ArrayList
argument_list|<
name|Account
argument_list|>
argument_list|()
argument_list|)
expr_stmt|;
name|mockDatabase
operator|.
name|release
argument_list|(
name|mockBroker
argument_list|)
expr_stmt|;
name|replay
argument_list|(
name|mockRealm
argument_list|,
name|mockDatabase
argument_list|,
name|mockBroker
argument_list|,
name|mockGroup
argument_list|,
name|mockSubject
argument_list|,
name|mockUpdatingGroup
argument_list|)
expr_stmt|;
name|mockRealm
operator|.
name|updateGroup
argument_list|(
name|mockGroup
argument_list|)
expr_stmt|;
name|verify
argument_list|(
name|mockRealm
argument_list|,
name|mockDatabase
argument_list|,
name|mockBroker
argument_list|,
name|mockGroup
argument_list|,
name|mockSubject
argument_list|,
name|mockUpdatingGroup
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

