begin_unit|revision:1.0.0;language:Java;cregit-version:0.0.1
begin_package
package|package
name|org
operator|.
name|exist
operator|.
name|security
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Arrays
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|security
operator|.
name|internal
operator|.
name|aider
operator|.
name|GroupAider
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|security
operator|.
name|internal
operator|.
name|aider
operator|.
name|UserAider
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|test
operator|.
name|ExistWebServer
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|xmldb
operator|.
name|CollectionManagementServiceImpl
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|xmldb
operator|.
name|UserManagementService
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|xmldb
operator|.
name|XPathQueryServiceImpl
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|xmldb
operator|.
name|XmldbURI
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|After
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|*
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Before
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|ClassRule
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|runner
operator|.
name|RunWith
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|runners
operator|.
name|Parameterized
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|runners
operator|.
name|Parameterized
operator|.
name|Parameter
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|runners
operator|.
name|Parameterized
operator|.
name|Parameters
import|;
end_import

begin_import
import|import
name|org
operator|.
name|xmldb
operator|.
name|api
operator|.
name|DatabaseManager
import|;
end_import

begin_import
import|import
name|org
operator|.
name|xmldb
operator|.
name|api
operator|.
name|base
operator|.
name|Collection
import|;
end_import

begin_import
import|import
name|org
operator|.
name|xmldb
operator|.
name|api
operator|.
name|base
operator|.
name|Resource
import|;
end_import

begin_import
import|import
name|org
operator|.
name|xmldb
operator|.
name|api
operator|.
name|base
operator|.
name|ResourceSet
import|;
end_import

begin_import
import|import
name|org
operator|.
name|xmldb
operator|.
name|api
operator|.
name|base
operator|.
name|XMLDBException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|xmldb
operator|.
name|api
operator|.
name|modules
operator|.
name|BinaryResource
import|;
end_import

begin_import
import|import
name|org
operator|.
name|xmldb
operator|.
name|api
operator|.
name|modules
operator|.
name|CollectionManagementService
import|;
end_import

begin_import
import|import
name|org
operator|.
name|xmldb
operator|.
name|api
operator|.
name|modules
operator|.
name|XMLResource
import|;
end_import

begin_class
annotation|@
name|RunWith
argument_list|(
name|Parameterized
operator|.
name|class
argument_list|)
specifier|public
class|class
name|XMLDBSecurityTest
block|{
annotation|@
name|ClassRule
specifier|public
specifier|static
specifier|final
name|ExistWebServer
name|existWebServer
init|=
operator|new
name|ExistWebServer
argument_list|(
literal|true
argument_list|)
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|String
name|PORT_PLACEHOLDER
init|=
literal|"${PORT}"
decl_stmt|;
annotation|@
name|Parameters
argument_list|(
name|name
operator|=
literal|"{0}"
argument_list|)
specifier|public
specifier|static
name|java
operator|.
name|util
operator|.
name|Collection
argument_list|<
name|Object
index|[]
argument_list|>
name|data
parameter_list|()
block|{
return|return
name|Arrays
operator|.
name|asList
argument_list|(
operator|new
name|Object
index|[]
index|[]
block|{
block|{
literal|"local"
block|,
literal|"xmldb:exist://"
block|}
block|,
block|{
literal|"remote"
block|,
literal|"xmldb:exist://localhost:"
operator|+
name|PORT_PLACEHOLDER
operator|+
literal|"/xmlrpc"
block|}
block|}
argument_list|)
return|;
block|}
annotation|@
name|Parameter
specifier|public
name|String
name|apiName
decl_stmt|;
annotation|@
name|Parameter
argument_list|(
name|value
operator|=
literal|1
argument_list|)
specifier|public
name|String
name|baseUri
decl_stmt|;
specifier|private
specifier|final
name|String
name|getBaseUri
parameter_list|()
block|{
return|return
name|baseUri
operator|.
name|replace
argument_list|(
name|PORT_PLACEHOLDER
argument_list|,
name|Integer
operator|.
name|toString
argument_list|(
name|existWebServer
operator|.
name|getPort
argument_list|()
argument_list|)
argument_list|)
return|;
block|}
annotation|@
name|Test
argument_list|(
name|expected
operator|=
name|XMLDBException
operator|.
name|class
argument_list|)
comment|// fails since guest has no write permissions
specifier|public
name|void
name|worldCreateCollection
parameter_list|()
throws|throws
name|XMLDBException
block|{
specifier|final
name|Collection
name|test
init|=
name|DatabaseManager
operator|.
name|getCollection
argument_list|(
name|getBaseUri
argument_list|()
operator|+
literal|"/db/securityTest1"
argument_list|,
literal|"guest"
argument_list|,
literal|"guest"
argument_list|)
decl_stmt|;
specifier|final
name|CollectionManagementService
name|cms
init|=
operator|(
name|CollectionManagementService
operator|)
name|test
operator|.
name|getService
argument_list|(
literal|"CollectionManagementService"
argument_list|,
literal|"1.0"
argument_list|)
decl_stmt|;
name|cms
operator|.
name|createCollection
argument_list|(
literal|"createdByGuest"
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
argument_list|(
name|expected
operator|=
name|XMLDBException
operator|.
name|class
argument_list|)
comment|// fails since guest has no write permissions
specifier|public
name|void
name|worldAddResource
parameter_list|()
throws|throws
name|XMLDBException
block|{
specifier|final
name|Collection
name|test
init|=
name|DatabaseManager
operator|.
name|getCollection
argument_list|(
name|getBaseUri
argument_list|()
operator|+
literal|"/db/securityTest1"
argument_list|,
literal|"guest"
argument_list|,
literal|"guest"
argument_list|)
decl_stmt|;
specifier|final
name|Resource
name|resource
init|=
name|test
operator|.
name|createResource
argument_list|(
literal|"createdByGuest"
argument_list|,
name|XMLResource
operator|.
name|RESOURCE_TYPE
argument_list|)
decl_stmt|;
name|resource
operator|.
name|setContent
argument_list|(
literal|"<testMe/>"
argument_list|)
expr_stmt|;
name|test
operator|.
name|storeResource
argument_list|(
name|resource
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
argument_list|(
name|expected
operator|=
name|XMLDBException
operator|.
name|class
argument_list|)
comment|// fails since guest has no write permissions
specifier|public
name|void
name|worldRemoveCollection
parameter_list|()
throws|throws
name|XMLDBException
block|{
specifier|final
name|Collection
name|root
init|=
name|DatabaseManager
operator|.
name|getCollection
argument_list|(
name|getBaseUri
argument_list|()
operator|+
literal|"/db"
argument_list|,
literal|"guest"
argument_list|,
literal|"guest"
argument_list|)
decl_stmt|;
specifier|final
name|CollectionManagementService
name|cms
init|=
operator|(
name|CollectionManagementService
operator|)
name|root
operator|.
name|getService
argument_list|(
literal|"CollectionManagementService"
argument_list|,
literal|"1.0"
argument_list|)
decl_stmt|;
name|cms
operator|.
name|removeCollection
argument_list|(
literal|"securityTest1"
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
argument_list|(
name|expected
operator|=
name|XMLDBException
operator|.
name|class
argument_list|)
comment|// fails since guest has no write permissions
specifier|public
name|void
name|worldChmodCollection
parameter_list|()
throws|throws
name|XMLDBException
block|{
specifier|final
name|Collection
name|test
init|=
name|DatabaseManager
operator|.
name|getCollection
argument_list|(
name|getBaseUri
argument_list|()
operator|+
literal|"/db/securityTest1"
argument_list|,
literal|"guest"
argument_list|,
literal|"guest"
argument_list|)
decl_stmt|;
specifier|final
name|UserManagementService
name|ums
init|=
operator|(
name|UserManagementService
operator|)
name|test
operator|.
name|getService
argument_list|(
literal|"UserManagementService"
argument_list|,
literal|"1.0"
argument_list|)
decl_stmt|;
comment|// grant myself all rights ;-)
name|ums
operator|.
name|chmod
argument_list|(
literal|0777
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
argument_list|(
name|expected
operator|=
name|XMLDBException
operator|.
name|class
argument_list|)
comment|// fails since guest has no write permissions
specifier|public
name|void
name|worldChmodResource
parameter_list|()
throws|throws
name|XMLDBException
block|{
specifier|final
name|Collection
name|test
init|=
name|DatabaseManager
operator|.
name|getCollection
argument_list|(
name|getBaseUri
argument_list|()
operator|+
literal|"/db/securityTest1"
argument_list|,
literal|"guest"
argument_list|,
literal|"guest"
argument_list|)
decl_stmt|;
specifier|final
name|Resource
name|resource
init|=
name|test
operator|.
name|getResource
argument_list|(
literal|"test.xml"
argument_list|)
decl_stmt|;
specifier|final
name|UserManagementService
name|ums
init|=
operator|(
name|UserManagementService
operator|)
name|test
operator|.
name|getService
argument_list|(
literal|"UserManagementService"
argument_list|,
literal|"1.0"
argument_list|)
decl_stmt|;
comment|// grant myself all rights ;-)
name|ums
operator|.
name|chmod
argument_list|(
name|resource
argument_list|,
literal|0777
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
argument_list|(
name|expected
operator|=
name|XMLDBException
operator|.
name|class
argument_list|)
comment|// fails since guest has no write permissions
specifier|public
name|void
name|worldChownCollection
parameter_list|()
throws|throws
name|XMLDBException
block|{
specifier|final
name|Collection
name|test
init|=
name|DatabaseManager
operator|.
name|getCollection
argument_list|(
name|getBaseUri
argument_list|()
operator|+
literal|"/db/securityTest1"
argument_list|,
literal|"guest"
argument_list|,
literal|"guest"
argument_list|)
decl_stmt|;
specifier|final
name|UserManagementService
name|ums
init|=
operator|(
name|UserManagementService
operator|)
name|test
operator|.
name|getService
argument_list|(
literal|"UserManagementService"
argument_list|,
literal|"1.0"
argument_list|)
decl_stmt|;
specifier|final
name|Account
name|guest
init|=
name|ums
operator|.
name|getAccount
argument_list|(
literal|"guest"
argument_list|)
decl_stmt|;
comment|// make myself the owner ;-)
name|ums
operator|.
name|chown
argument_list|(
name|guest
argument_list|,
literal|"guest"
argument_list|)
expr_stmt|;
block|}
comment|/**      * only the owner or dba can chown a collection or resource      */
annotation|@
name|Test
argument_list|(
name|expected
operator|=
name|XMLDBException
operator|.
name|class
argument_list|)
specifier|public
name|void
name|worldChownResource
parameter_list|()
throws|throws
name|XMLDBException
block|{
specifier|final
name|Collection
name|test
init|=
name|DatabaseManager
operator|.
name|getCollection
argument_list|(
name|getBaseUri
argument_list|()
operator|+
literal|"/db/securityTest1"
argument_list|,
literal|"guest"
argument_list|,
literal|"guest"
argument_list|)
decl_stmt|;
specifier|final
name|Resource
name|resource
init|=
name|test
operator|.
name|getResource
argument_list|(
literal|"test.xml"
argument_list|)
decl_stmt|;
specifier|final
name|UserManagementService
name|ums
init|=
operator|(
name|UserManagementService
operator|)
name|test
operator|.
name|getService
argument_list|(
literal|"UserManagementService"
argument_list|,
literal|"1.0"
argument_list|)
decl_stmt|;
comment|// grant myself all rights ;-)
specifier|final
name|Account
name|test2
init|=
name|ums
operator|.
name|getAccount
argument_list|(
literal|"guest"
argument_list|)
decl_stmt|;
name|ums
operator|.
name|chown
argument_list|(
name|resource
argument_list|,
name|test2
argument_list|,
literal|"guest"
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|groupCreateSubColl
parameter_list|()
throws|throws
name|XMLDBException
block|{
specifier|final
name|Collection
name|test
init|=
name|DatabaseManager
operator|.
name|getCollection
argument_list|(
name|getBaseUri
argument_list|()
operator|+
literal|"/db/securityTest1"
argument_list|,
literal|"test2"
argument_list|,
literal|"test2"
argument_list|)
decl_stmt|;
specifier|final
name|CollectionManagementService
name|cms
init|=
operator|(
name|CollectionManagementService
operator|)
name|test
operator|.
name|getService
argument_list|(
literal|"CollectionManagementService"
argument_list|,
literal|"1.0"
argument_list|)
decl_stmt|;
specifier|final
name|Collection
name|newCol
init|=
name|cms
operator|.
name|createCollection
argument_list|(
literal|"createdByTest2"
argument_list|)
decl_stmt|;
name|assertNotNull
argument_list|(
name|newCol
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|groupCreateResource
parameter_list|()
throws|throws
name|XMLDBException
block|{
specifier|final
name|Collection
name|test
init|=
name|DatabaseManager
operator|.
name|getCollection
argument_list|(
name|getBaseUri
argument_list|()
operator|+
literal|"/db/securityTest1"
argument_list|,
literal|"test2"
argument_list|,
literal|"test2"
argument_list|)
decl_stmt|;
name|Resource
name|resource
init|=
name|test
operator|.
name|createResource
argument_list|(
literal|"createdByTest2.xml"
argument_list|,
name|XMLResource
operator|.
name|RESOURCE_TYPE
argument_list|)
decl_stmt|;
name|resource
operator|.
name|setContent
argument_list|(
literal|"<testMe/>"
argument_list|)
expr_stmt|;
name|test
operator|.
name|storeResource
argument_list|(
name|resource
argument_list|)
expr_stmt|;
name|resource
operator|=
name|test
operator|.
name|getResource
argument_list|(
literal|"createdByTest2.xml"
argument_list|)
expr_stmt|;
name|assertNotNull
argument_list|(
name|resource
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"<testMe/>"
argument_list|,
name|resource
operator|.
name|getContent
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
argument_list|(
name|expected
operator|=
name|XMLDBException
operator|.
name|class
argument_list|)
specifier|public
name|void
name|groupRemoveCollection_canNotWriteParent
parameter_list|()
throws|throws
name|XMLDBException
block|{
specifier|final
name|Collection
name|root
init|=
name|DatabaseManager
operator|.
name|getCollection
argument_list|(
name|getBaseUri
argument_list|()
operator|+
literal|"/db"
argument_list|,
literal|"test2"
argument_list|,
literal|"test2"
argument_list|)
decl_stmt|;
specifier|final
name|CollectionManagementService
name|cms
init|=
operator|(
name|CollectionManagementService
operator|)
name|root
operator|.
name|getService
argument_list|(
literal|"CollectionManagementService"
argument_list|,
literal|"1.0"
argument_list|)
decl_stmt|;
name|cms
operator|.
name|removeCollection
argument_list|(
literal|"securityTest1"
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|groupRemoveCollection_canWriteParent
parameter_list|()
throws|throws
name|XMLDBException
block|{
specifier|final
name|Collection
name|root
init|=
name|DatabaseManager
operator|.
name|getCollection
argument_list|(
name|getBaseUri
argument_list|()
operator|+
literal|"/db"
argument_list|,
literal|"admin"
argument_list|,
literal|""
argument_list|)
decl_stmt|;
specifier|final
name|CollectionManagementService
name|cms
init|=
operator|(
name|CollectionManagementService
operator|)
name|root
operator|.
name|getService
argument_list|(
literal|"CollectionManagementService"
argument_list|,
literal|"1.0"
argument_list|)
decl_stmt|;
name|cms
operator|.
name|removeCollection
argument_list|(
literal|"securityTest1"
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
argument_list|(
name|expected
operator|=
name|XMLDBException
operator|.
name|class
argument_list|)
specifier|public
name|void
name|groupChmodCollection_asNotOwnerAndNotDBA
parameter_list|()
throws|throws
name|XMLDBException
block|{
specifier|final
name|Collection
name|test
init|=
name|DatabaseManager
operator|.
name|getCollection
argument_list|(
name|getBaseUri
argument_list|()
operator|+
literal|"/db/securityTest1"
argument_list|,
literal|"test2"
argument_list|,
literal|"test2"
argument_list|)
decl_stmt|;
specifier|final
name|UserManagementService
name|ums
init|=
operator|(
name|UserManagementService
operator|)
name|test
operator|.
name|getService
argument_list|(
literal|"UserManagementService"
argument_list|,
literal|"1.0"
argument_list|)
decl_stmt|;
comment|// grant myself all rights ;-)
name|ums
operator|.
name|chmod
argument_list|(
literal|07777
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|groupChmodCollection_asOwner
parameter_list|()
throws|throws
name|XMLDBException
block|{
specifier|final
name|Collection
name|test
init|=
name|DatabaseManager
operator|.
name|getCollection
argument_list|(
name|getBaseUri
argument_list|()
operator|+
literal|"/db/securityTest1"
argument_list|,
literal|"test1"
argument_list|,
literal|"test1"
argument_list|)
decl_stmt|;
specifier|final
name|UserManagementService
name|ums
init|=
operator|(
name|UserManagementService
operator|)
name|test
operator|.
name|getService
argument_list|(
literal|"UserManagementService"
argument_list|,
literal|"1.0"
argument_list|)
decl_stmt|;
comment|// grant myself all rights ;-)
name|ums
operator|.
name|chmod
argument_list|(
literal|07777
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"rwsrwsrwt"
argument_list|,
name|ums
operator|.
name|getPermissions
argument_list|(
name|test
argument_list|)
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
argument_list|(
name|expected
operator|=
name|XMLDBException
operator|.
name|class
argument_list|)
specifier|public
name|void
name|groupChmodResource_asNotOwnerAndNotDBA
parameter_list|()
throws|throws
name|XMLDBException
block|{
specifier|final
name|Collection
name|test
init|=
name|DatabaseManager
operator|.
name|getCollection
argument_list|(
name|getBaseUri
argument_list|()
operator|+
literal|"/db/securityTest1"
argument_list|,
literal|"test2"
argument_list|,
literal|"test2"
argument_list|)
decl_stmt|;
specifier|final
name|Resource
name|resource
init|=
name|test
operator|.
name|getResource
argument_list|(
literal|"test.xml"
argument_list|)
decl_stmt|;
specifier|final
name|UserManagementService
name|ums
init|=
operator|(
name|UserManagementService
operator|)
name|test
operator|.
name|getService
argument_list|(
literal|"UserManagementService"
argument_list|,
literal|"1.0"
argument_list|)
decl_stmt|;
comment|// grant myself all rights ;-)
name|ums
operator|.
name|chmod
argument_list|(
name|resource
argument_list|,
literal|0777
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|groupChmodResource_asOwner
parameter_list|()
throws|throws
name|XMLDBException
block|{
specifier|final
name|Collection
name|test
init|=
name|DatabaseManager
operator|.
name|getCollection
argument_list|(
name|getBaseUri
argument_list|()
operator|+
literal|"/db/securityTest1"
argument_list|,
literal|"test1"
argument_list|,
literal|"test1"
argument_list|)
decl_stmt|;
specifier|final
name|Resource
name|resource
init|=
name|test
operator|.
name|getResource
argument_list|(
literal|"test.xml"
argument_list|)
decl_stmt|;
specifier|final
name|UserManagementService
name|ums
init|=
operator|(
name|UserManagementService
operator|)
name|test
operator|.
name|getService
argument_list|(
literal|"UserManagementService"
argument_list|,
literal|"1.0"
argument_list|)
decl_stmt|;
comment|// grant myself all rights ;-)
name|ums
operator|.
name|chmod
argument_list|(
name|resource
argument_list|,
literal|0777
argument_list|)
expr_stmt|;
block|}
comment|/**      * DBA can change the owner uid of a collection      *      * As the user 'admin' (who is a DBA) attempt to change the      * ownership uid of /db/securityTest1      * to 'test2' user      */
annotation|@
name|Test
specifier|public
name|void
name|dbaChownUidCollection
parameter_list|()
throws|throws
name|XMLDBException
block|{
specifier|final
name|Collection
name|test
init|=
name|DatabaseManager
operator|.
name|getCollection
argument_list|(
name|getBaseUri
argument_list|()
operator|+
literal|"/db/securityTest1"
argument_list|,
literal|"admin"
argument_list|,
literal|""
argument_list|)
decl_stmt|;
specifier|final
name|UserManagementService
name|ums
init|=
operator|(
name|UserManagementService
operator|)
name|test
operator|.
name|getService
argument_list|(
literal|"UserManagementService"
argument_list|,
literal|"1.0"
argument_list|)
decl_stmt|;
comment|// attempt to change uid ownership of /db/securityTest1 to the test2 user
specifier|final
name|Account
name|test2
init|=
name|ums
operator|.
name|getAccount
argument_list|(
literal|"test2"
argument_list|)
decl_stmt|;
name|ums
operator|.
name|chown
argument_list|(
name|test2
argument_list|)
expr_stmt|;
block|}
comment|/**      * DBA can change the owner gid of a collection      *      * As the user 'admin' (who is a DBA) attempt to change the      * ownership gid of /db/securityTest1      * to 'guest' group      */
annotation|@
name|Test
specifier|public
name|void
name|dbaChownGidCollection
parameter_list|()
throws|throws
name|XMLDBException
block|{
specifier|final
name|Collection
name|test
init|=
name|DatabaseManager
operator|.
name|getCollection
argument_list|(
name|getBaseUri
argument_list|()
operator|+
literal|"/db/securityTest1"
argument_list|,
literal|"admin"
argument_list|,
literal|""
argument_list|)
decl_stmt|;
specifier|final
name|UserManagementService
name|ums
init|=
operator|(
name|UserManagementService
operator|)
name|test
operator|.
name|getService
argument_list|(
literal|"UserManagementService"
argument_list|,
literal|"1.0"
argument_list|)
decl_stmt|;
comment|// attempt to change uid ownership of /db/securityTest1 to the guest group
name|ums
operator|.
name|chgrp
argument_list|(
literal|"guest"
argument_list|)
expr_stmt|;
block|}
comment|/**      * Owner can NOT change the owner uid of a collection      *      * As the user 'test1' attempt to change the      * ownership uid of /db/securityTest1      * to 'test2' user      */
annotation|@
name|Test
argument_list|(
name|expected
operator|=
name|XMLDBException
operator|.
name|class
argument_list|)
specifier|public
name|void
name|ownerChownUidCollection
parameter_list|()
throws|throws
name|XMLDBException
block|{
specifier|final
name|Collection
name|test
init|=
name|DatabaseManager
operator|.
name|getCollection
argument_list|(
name|getBaseUri
argument_list|()
operator|+
literal|"/db/securityTest1"
argument_list|,
literal|"test1"
argument_list|,
literal|"test1"
argument_list|)
decl_stmt|;
specifier|final
name|UserManagementService
name|ums
init|=
operator|(
name|UserManagementService
operator|)
name|test
operator|.
name|getService
argument_list|(
literal|"UserManagementService"
argument_list|,
literal|"1.0"
argument_list|)
decl_stmt|;
comment|// attempt to change uid ownership of /db/securityTest1 to the test2 user
specifier|final
name|Account
name|test2
init|=
name|ums
operator|.
name|getAccount
argument_list|(
literal|"test2"
argument_list|)
decl_stmt|;
name|ums
operator|.
name|chown
argument_list|(
name|test2
argument_list|)
expr_stmt|;
block|}
comment|/**      * Owner can NOT change the owner gid of a collection      * to a group of which they are not a member      *      * As the user 'test1' attempt to change the      * ownership gid of /db/securityTest1      * to 'guest' group      */
annotation|@
name|Test
argument_list|(
name|expected
operator|=
name|XMLDBException
operator|.
name|class
argument_list|)
specifier|public
name|void
name|ownerChownGidCollection
parameter_list|()
throws|throws
name|XMLDBException
block|{
specifier|final
name|Collection
name|test
init|=
name|DatabaseManager
operator|.
name|getCollection
argument_list|(
name|getBaseUri
argument_list|()
operator|+
literal|"/db/securityTest1"
argument_list|,
literal|"test1"
argument_list|,
literal|"test1"
argument_list|)
decl_stmt|;
specifier|final
name|UserManagementService
name|ums
init|=
operator|(
name|UserManagementService
operator|)
name|test
operator|.
name|getService
argument_list|(
literal|"UserManagementService"
argument_list|,
literal|"1.0"
argument_list|)
decl_stmt|;
comment|// attempt to change gid ownership of /db/securityTest1 to the guest group
name|ums
operator|.
name|chgrp
argument_list|(
literal|"guest"
argument_list|)
expr_stmt|;
block|}
comment|/**      * Group member can NOT change the owner uid of a collection      *      * As the user 'test2' attempt to change the      * ownership uid of /db/securityTest1      * to ourselves      */
annotation|@
name|Test
argument_list|(
name|expected
operator|=
name|XMLDBException
operator|.
name|class
argument_list|)
specifier|public
name|void
name|groupMemberChownUidCollection
parameter_list|()
throws|throws
name|XMLDBException
block|{
specifier|final
name|Collection
name|test
init|=
name|DatabaseManager
operator|.
name|getCollection
argument_list|(
name|getBaseUri
argument_list|()
operator|+
literal|"/db/securityTest1"
argument_list|,
literal|"test2"
argument_list|,
literal|"test2"
argument_list|)
decl_stmt|;
specifier|final
name|UserManagementService
name|ums
init|=
operator|(
name|UserManagementService
operator|)
name|test
operator|.
name|getService
argument_list|(
literal|"UserManagementService"
argument_list|,
literal|"1.0"
argument_list|)
decl_stmt|;
comment|// attempt to take uid ownership of /db/securityTest1
specifier|final
name|Account
name|test2
init|=
name|ums
operator|.
name|getAccount
argument_list|(
literal|"test2"
argument_list|)
decl_stmt|;
name|ums
operator|.
name|chown
argument_list|(
name|test2
argument_list|)
expr_stmt|;
block|}
comment|/**      * Owner can change the owner gid of a collection      * to a group of which they are a member      *      * As the user 'test1' (who is the owner and      * who is in the group 'extusers')      * attempt to change ownership gid of /db/securityTest1      * to the group 'extusers'      */
annotation|@
name|Test
specifier|public
name|void
name|ownerAndGroupMemberChownGidCollection
parameter_list|()
throws|throws
name|XMLDBException
block|{
specifier|final
name|Collection
name|test
init|=
name|DatabaseManager
operator|.
name|getCollection
argument_list|(
name|getBaseUri
argument_list|()
operator|+
literal|"/db/securityTest1"
argument_list|,
literal|"test1"
argument_list|,
literal|"test1"
argument_list|)
decl_stmt|;
specifier|final
name|UserManagementService
name|ums
init|=
operator|(
name|UserManagementService
operator|)
name|test
operator|.
name|getService
argument_list|(
literal|"UserManagementService"
argument_list|,
literal|"1.0"
argument_list|)
decl_stmt|;
comment|// attempt to take gid ownership of /db/securityTest1
name|ums
operator|.
name|chgrp
argument_list|(
literal|"extusers"
argument_list|)
expr_stmt|;
specifier|final
name|Permission
name|perms
init|=
name|ums
operator|.
name|getPermissions
argument_list|(
name|test
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|"extusers"
argument_list|,
name|perms
operator|.
name|getGroup
argument_list|()
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
block|}
comment|/**      * Group Member can NOT change the owner gid of a resource      * to a group of which they are a member      *      * As the user 'test2' (who is in the group users)      * attempt to change ownership gid of /db/securityTest1/test.xml (which has gid 'users')      * to the group 'users' (of which they are a member)      */
annotation|@
name|Test
argument_list|(
name|expected
operator|=
name|XMLDBException
operator|.
name|class
argument_list|)
specifier|public
name|void
name|groupMemberChownGidCollection
parameter_list|()
throws|throws
name|XMLDBException
block|{
specifier|final
name|Collection
name|test
init|=
name|DatabaseManager
operator|.
name|getCollection
argument_list|(
name|getBaseUri
argument_list|()
operator|+
literal|"/db/securityTest1"
argument_list|,
literal|"test2"
argument_list|,
literal|"test2"
argument_list|)
decl_stmt|;
specifier|final
name|UserManagementService
name|ums
init|=
operator|(
name|UserManagementService
operator|)
name|test
operator|.
name|getService
argument_list|(
literal|"UserManagementService"
argument_list|,
literal|"1.0"
argument_list|)
decl_stmt|;
comment|// attempt to take gid ownership of /db/securityTest1/test.xml
name|ums
operator|.
name|chgrp
argument_list|(
literal|"users"
argument_list|)
expr_stmt|;
block|}
comment|/**      * Group Member can NOT change owner gid of a collection      * to a group of which we are NOT a member      *      * As the user 'test2' (who is in the group users)      * attempt to change ownership gid of /db/securityTest1      * to the group 'guest' (of which they are NOT a member)      */
annotation|@
name|Test
argument_list|(
name|expected
operator|=
name|XMLDBException
operator|.
name|class
argument_list|)
specifier|public
name|void
name|groupNonMemberChownGidCollection
parameter_list|()
throws|throws
name|XMLDBException
block|{
specifier|final
name|Collection
name|test
init|=
name|DatabaseManager
operator|.
name|getCollection
argument_list|(
name|getBaseUri
argument_list|()
operator|+
literal|"/db/securityTest1"
argument_list|,
literal|"test2"
argument_list|,
literal|"test2"
argument_list|)
decl_stmt|;
specifier|final
name|UserManagementService
name|ums
init|=
operator|(
name|UserManagementService
operator|)
name|test
operator|.
name|getService
argument_list|(
literal|"UserManagementService"
argument_list|,
literal|"1.0"
argument_list|)
decl_stmt|;
comment|// attempt to take gid ownership of /db/securityTest1
name|ums
operator|.
name|chgrp
argument_list|(
literal|"guest"
argument_list|)
expr_stmt|;
block|}
comment|/**      * DBA can change the owner uid of a resource      *      * As the user 'admin' (who is a DBA) attempt to change the      * ownership uid of /db/securityTest1/test.xml      * to 'test2' user      */
annotation|@
name|Test
specifier|public
name|void
name|dbaChownUidResource
parameter_list|()
throws|throws
name|XMLDBException
block|{
specifier|final
name|Collection
name|test
init|=
name|DatabaseManager
operator|.
name|getCollection
argument_list|(
name|getBaseUri
argument_list|()
operator|+
literal|"/db/securityTest1"
argument_list|,
literal|"admin"
argument_list|,
literal|""
argument_list|)
decl_stmt|;
specifier|final
name|Resource
name|resource
init|=
name|test
operator|.
name|getResource
argument_list|(
literal|"test.xml"
argument_list|)
decl_stmt|;
specifier|final
name|UserManagementService
name|ums
init|=
operator|(
name|UserManagementService
operator|)
name|test
operator|.
name|getService
argument_list|(
literal|"UserManagementService"
argument_list|,
literal|"1.0"
argument_list|)
decl_stmt|;
comment|// attempt to change uid ownership of /db/securityTest1/test.xml to the test2 user
specifier|final
name|Account
name|test2
init|=
name|ums
operator|.
name|getAccount
argument_list|(
literal|"test2"
argument_list|)
decl_stmt|;
name|ums
operator|.
name|chown
argument_list|(
name|resource
argument_list|,
name|test2
argument_list|)
expr_stmt|;
block|}
comment|/**      * DBA can change the owner gid of a resource      *      * As the user 'admin' (who is a DBA) attempt to change the      * ownership gid of /db/securityTest1/test1.xml      * to 'guest' group      */
annotation|@
name|Test
specifier|public
name|void
name|dbaChownGidResource
parameter_list|()
throws|throws
name|XMLDBException
block|{
specifier|final
name|Collection
name|test
init|=
name|DatabaseManager
operator|.
name|getCollection
argument_list|(
name|getBaseUri
argument_list|()
operator|+
literal|"/db/securityTest1"
argument_list|,
literal|"admin"
argument_list|,
literal|""
argument_list|)
decl_stmt|;
specifier|final
name|Resource
name|resource
init|=
name|test
operator|.
name|getResource
argument_list|(
literal|"test.xml"
argument_list|)
decl_stmt|;
specifier|final
name|UserManagementService
name|ums
init|=
operator|(
name|UserManagementService
operator|)
name|test
operator|.
name|getService
argument_list|(
literal|"UserManagementService"
argument_list|,
literal|"1.0"
argument_list|)
decl_stmt|;
comment|// attempt to change uid ownership of /db/securityTest1/test.xml to the guest group
name|ums
operator|.
name|chgrp
argument_list|(
name|resource
argument_list|,
literal|"guest"
argument_list|)
expr_stmt|;
block|}
comment|/**      * Owner can NOT change the owner uid of a resource      *      * As the user 'test1' attempt to change the      * ownership uid of /db/securityTest1/test.xml      * to 'test2' user      */
annotation|@
name|Test
argument_list|(
name|expected
operator|=
name|XMLDBException
operator|.
name|class
argument_list|)
specifier|public
name|void
name|ownerChownUidResource
parameter_list|()
throws|throws
name|XMLDBException
block|{
specifier|final
name|Collection
name|test
init|=
name|DatabaseManager
operator|.
name|getCollection
argument_list|(
name|getBaseUri
argument_list|()
operator|+
literal|"/db/securityTest1"
argument_list|,
literal|"test1"
argument_list|,
literal|"test1"
argument_list|)
decl_stmt|;
specifier|final
name|Resource
name|resource
init|=
name|test
operator|.
name|getResource
argument_list|(
literal|"test.xml"
argument_list|)
decl_stmt|;
specifier|final
name|UserManagementService
name|ums
init|=
operator|(
name|UserManagementService
operator|)
name|test
operator|.
name|getService
argument_list|(
literal|"UserManagementService"
argument_list|,
literal|"1.0"
argument_list|)
decl_stmt|;
comment|// attempt to change uid ownership of /db/securityTest1/test.xml to the test2 user
specifier|final
name|Account
name|test2
init|=
name|ums
operator|.
name|getAccount
argument_list|(
literal|"test2"
argument_list|)
decl_stmt|;
name|ums
operator|.
name|chown
argument_list|(
name|resource
argument_list|,
name|test2
argument_list|)
expr_stmt|;
block|}
comment|/**      * Owner can NOT change the owner gid of a resource      * to a group of which they are not a member      *      * As the user 'test1' attempt to change the      * ownership gid of /db/securityTest1/test.xml      * to 'guest' group      */
annotation|@
name|Test
argument_list|(
name|expected
operator|=
name|XMLDBException
operator|.
name|class
argument_list|)
specifier|public
name|void
name|ownerChownGidResource
parameter_list|()
throws|throws
name|XMLDBException
block|{
specifier|final
name|Collection
name|test
init|=
name|DatabaseManager
operator|.
name|getCollection
argument_list|(
name|getBaseUri
argument_list|()
operator|+
literal|"/db/securityTest1"
argument_list|,
literal|"test1"
argument_list|,
literal|"test1"
argument_list|)
decl_stmt|;
specifier|final
name|Resource
name|resource
init|=
name|test
operator|.
name|getResource
argument_list|(
literal|"test.xml"
argument_list|)
decl_stmt|;
specifier|final
name|UserManagementService
name|ums
init|=
operator|(
name|UserManagementService
operator|)
name|test
operator|.
name|getService
argument_list|(
literal|"UserManagementService"
argument_list|,
literal|"1.0"
argument_list|)
decl_stmt|;
comment|// attempt to change gid ownership of /db/securityTest1/test.xml to the guest group
name|ums
operator|.
name|chgrp
argument_list|(
name|resource
argument_list|,
literal|"guest"
argument_list|)
expr_stmt|;
block|}
comment|/**      * Group member can NOT change the owner uid of a resource      *      * As the user 'test2' attempt to change the      * ownership uid of /db/securityTest1/test.xml      * to ourselves      */
annotation|@
name|Test
argument_list|(
name|expected
operator|=
name|XMLDBException
operator|.
name|class
argument_list|)
specifier|public
name|void
name|groupMemberChownUidResource
parameter_list|()
throws|throws
name|XMLDBException
block|{
specifier|final
name|Collection
name|test
init|=
name|DatabaseManager
operator|.
name|getCollection
argument_list|(
name|getBaseUri
argument_list|()
operator|+
literal|"/db/securityTest1"
argument_list|,
literal|"test2"
argument_list|,
literal|"test2"
argument_list|)
decl_stmt|;
specifier|final
name|Resource
name|resource
init|=
name|test
operator|.
name|getResource
argument_list|(
literal|"test.xml"
argument_list|)
decl_stmt|;
specifier|final
name|UserManagementService
name|ums
init|=
operator|(
name|UserManagementService
operator|)
name|test
operator|.
name|getService
argument_list|(
literal|"UserManagementService"
argument_list|,
literal|"1.0"
argument_list|)
decl_stmt|;
comment|// attempt to take uid ownership of /db/securityTest1/test.xml
specifier|final
name|Account
name|test2
init|=
name|ums
operator|.
name|getAccount
argument_list|(
literal|"test2"
argument_list|)
decl_stmt|;
name|ums
operator|.
name|chown
argument_list|(
name|resource
argument_list|,
name|test2
argument_list|)
expr_stmt|;
block|}
comment|/**      * Owner can change the owner gid of a resource      * to a group of which they are a member      *      * As the user 'test1' (who is the owner and      * who is in the group 'extusers')      * attempt to change ownership gid of /db/securityTest1/test.xml      * to the group 'extusers'      */
annotation|@
name|Test
specifier|public
name|void
name|ownerAndGroupMemberChownGidResource
parameter_list|()
throws|throws
name|XMLDBException
block|{
specifier|final
name|Collection
name|test
init|=
name|DatabaseManager
operator|.
name|getCollection
argument_list|(
name|getBaseUri
argument_list|()
operator|+
literal|"/db/securityTest1"
argument_list|,
literal|"test1"
argument_list|,
literal|"test1"
argument_list|)
decl_stmt|;
specifier|final
name|Resource
name|resource
init|=
name|test
operator|.
name|getResource
argument_list|(
literal|"test.xml"
argument_list|)
decl_stmt|;
specifier|final
name|UserManagementService
name|ums
init|=
operator|(
name|UserManagementService
operator|)
name|test
operator|.
name|getService
argument_list|(
literal|"UserManagementService"
argument_list|,
literal|"1.0"
argument_list|)
decl_stmt|;
comment|// attempt to take gid ownership of /db/securityTest1
name|ums
operator|.
name|chgrp
argument_list|(
name|resource
argument_list|,
literal|"extusers"
argument_list|)
expr_stmt|;
specifier|final
name|Permission
name|perms
init|=
name|ums
operator|.
name|getPermissions
argument_list|(
name|resource
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|"extusers"
argument_list|,
name|perms
operator|.
name|getGroup
argument_list|()
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
block|}
comment|/**      * Group Member can NOT change the owner gid of a resource      * to a group of which they are a member      *      * As the user 'test2' (who is in the group users)      * attempt to change ownership gid of /db/securityTest1/test.xml (which has gid 'isers')      * to the group 'users' (of which they are a member)      */
annotation|@
name|Test
argument_list|(
name|expected
operator|=
name|XMLDBException
operator|.
name|class
argument_list|)
specifier|public
name|void
name|groupMemberChownGidResource
parameter_list|()
throws|throws
name|XMLDBException
block|{
specifier|final
name|Collection
name|test
init|=
name|DatabaseManager
operator|.
name|getCollection
argument_list|(
name|getBaseUri
argument_list|()
operator|+
literal|"/db/securityTest1"
argument_list|,
literal|"test2"
argument_list|,
literal|"test2"
argument_list|)
decl_stmt|;
specifier|final
name|Resource
name|resource
init|=
name|test
operator|.
name|getResource
argument_list|(
literal|"test.xml"
argument_list|)
decl_stmt|;
specifier|final
name|UserManagementService
name|ums
init|=
operator|(
name|UserManagementService
operator|)
name|test
operator|.
name|getService
argument_list|(
literal|"UserManagementService"
argument_list|,
literal|"1.0"
argument_list|)
decl_stmt|;
comment|// attempt to take gid ownership of /db/securityTest1/test.xml
name|ums
operator|.
name|chgrp
argument_list|(
name|resource
argument_list|,
literal|"users"
argument_list|)
expr_stmt|;
specifier|final
name|Permission
name|perms
init|=
name|ums
operator|.
name|getPermissions
argument_list|(
name|resource
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|"users"
argument_list|,
name|perms
operator|.
name|getGroup
argument_list|()
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
block|}
comment|/**      * Group Member can NOT change owner gid of a resource      * to a group of which we are NOT a member      *      * As the user 'test2' (who is in the group users)      * attempt to change ownership gid of /db/securityTest1/test.xml      * to the group 'guest' (of which they are NOT a member)      */
annotation|@
name|Test
argument_list|(
name|expected
operator|=
name|XMLDBException
operator|.
name|class
argument_list|)
specifier|public
name|void
name|groupNonMemberChownGidResource
parameter_list|()
throws|throws
name|XMLDBException
block|{
specifier|final
name|Collection
name|test
init|=
name|DatabaseManager
operator|.
name|getCollection
argument_list|(
name|getBaseUri
argument_list|()
operator|+
literal|"/db/securityTest1"
argument_list|,
literal|"test2"
argument_list|,
literal|"test2"
argument_list|)
decl_stmt|;
specifier|final
name|Resource
name|resource
init|=
name|test
operator|.
name|getResource
argument_list|(
literal|"test.xml"
argument_list|)
decl_stmt|;
specifier|final
name|UserManagementService
name|ums
init|=
operator|(
name|UserManagementService
operator|)
name|test
operator|.
name|getService
argument_list|(
literal|"UserManagementService"
argument_list|,
literal|"1.0"
argument_list|)
decl_stmt|;
comment|// attempt to take gid ownership of /db/securityTest1/test.xml
name|ums
operator|.
name|chgrp
argument_list|(
name|resource
argument_list|,
literal|"guest"
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|onlyExecuteRequiredToOpenCollectionContent
parameter_list|()
throws|throws
name|XMLDBException
block|{
specifier|final
name|Collection
name|test
init|=
name|DatabaseManager
operator|.
name|getCollection
argument_list|(
name|getBaseUri
argument_list|()
operator|+
literal|"/db/securityTest1"
argument_list|,
literal|"test1"
argument_list|,
literal|"test1"
argument_list|)
decl_stmt|;
specifier|final
name|UserManagementService
name|ums
init|=
operator|(
name|UserManagementService
operator|)
name|test
operator|.
name|getService
argument_list|(
literal|"UserManagementService"
argument_list|,
literal|"1.0"
argument_list|)
decl_stmt|;
name|ums
operator|.
name|chmod
argument_list|(
literal|"--x------"
argument_list|)
expr_stmt|;
name|test
operator|.
name|close
argument_list|()
expr_stmt|;
name|DatabaseManager
operator|.
name|getCollection
argument_list|(
name|getBaseUri
argument_list|()
operator|+
literal|"/db/securityTest1"
argument_list|,
literal|"test1"
argument_list|,
literal|"test1"
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
argument_list|(
name|expected
operator|=
name|XMLDBException
operator|.
name|class
argument_list|)
specifier|public
name|void
name|cannotOpenCollectionWithoutExecute
parameter_list|()
throws|throws
name|XMLDBException
block|{
specifier|final
name|Collection
name|test
init|=
name|DatabaseManager
operator|.
name|getCollection
argument_list|(
name|getBaseUri
argument_list|()
operator|+
literal|"/db/securityTest1"
argument_list|,
literal|"test1"
argument_list|,
literal|"test1"
argument_list|)
decl_stmt|;
specifier|final
name|UserManagementService
name|ums
init|=
operator|(
name|UserManagementService
operator|)
name|test
operator|.
name|getService
argument_list|(
literal|"UserManagementService"
argument_list|,
literal|"1.0"
argument_list|)
decl_stmt|;
name|ums
operator|.
name|chmod
argument_list|(
literal|"rw-rw-rw-"
argument_list|)
expr_stmt|;
name|test
operator|.
name|close
argument_list|()
expr_stmt|;
name|DatabaseManager
operator|.
name|getCollection
argument_list|(
name|getBaseUri
argument_list|()
operator|+
literal|"/db/securityTest1"
argument_list|,
literal|"test1"
argument_list|,
literal|"test1"
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|canOpenCollectionWithExecute
parameter_list|()
throws|throws
name|XMLDBException
block|{
specifier|final
name|Collection
name|test
init|=
name|DatabaseManager
operator|.
name|getCollection
argument_list|(
name|getBaseUri
argument_list|()
operator|+
literal|"/db/securityTest1"
argument_list|,
literal|"test1"
argument_list|,
literal|"test1"
argument_list|)
decl_stmt|;
specifier|final
name|UserManagementService
name|ums
init|=
operator|(
name|UserManagementService
operator|)
name|test
operator|.
name|getService
argument_list|(
literal|"UserManagementService"
argument_list|,
literal|"1.0"
argument_list|)
decl_stmt|;
name|ums
operator|.
name|chmod
argument_list|(
literal|"--x--x--x"
argument_list|)
expr_stmt|;
name|test
operator|.
name|close
argument_list|()
expr_stmt|;
name|DatabaseManager
operator|.
name|getCollection
argument_list|(
name|getBaseUri
argument_list|()
operator|+
literal|"/db/securityTest1"
argument_list|,
literal|"test1"
argument_list|,
literal|"test1"
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
argument_list|(
name|expected
operator|=
name|XMLDBException
operator|.
name|class
argument_list|)
specifier|public
name|void
name|cannotOpenRootCollectionWithoutExecute
parameter_list|()
throws|throws
name|XMLDBException
block|{
specifier|final
name|Collection
name|test
init|=
name|DatabaseManager
operator|.
name|getCollection
argument_list|(
name|getBaseUri
argument_list|()
operator|+
literal|"/db"
argument_list|,
literal|"admin"
argument_list|,
literal|""
argument_list|)
decl_stmt|;
specifier|final
name|UserManagementService
name|ums
init|=
operator|(
name|UserManagementService
operator|)
name|test
operator|.
name|getService
argument_list|(
literal|"UserManagementService"
argument_list|,
literal|"1.0"
argument_list|)
decl_stmt|;
name|ums
operator|.
name|chmod
argument_list|(
literal|"rw-rw-rw-"
argument_list|)
expr_stmt|;
name|test
operator|.
name|close
argument_list|()
expr_stmt|;
name|DatabaseManager
operator|.
name|getCollection
argument_list|(
name|getBaseUri
argument_list|()
operator|+
literal|"/db"
argument_list|,
literal|"test1"
argument_list|,
literal|"test1"
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|canOpenRootCollectionWithExecute
parameter_list|()
throws|throws
name|XMLDBException
block|{
specifier|final
name|Collection
name|test
init|=
name|DatabaseManager
operator|.
name|getCollection
argument_list|(
name|getBaseUri
argument_list|()
operator|+
literal|"/db"
argument_list|,
literal|"admin"
argument_list|,
literal|""
argument_list|)
decl_stmt|;
specifier|final
name|UserManagementService
name|ums
init|=
operator|(
name|UserManagementService
operator|)
name|test
operator|.
name|getService
argument_list|(
literal|"UserManagementService"
argument_list|,
literal|"1.0"
argument_list|)
decl_stmt|;
name|ums
operator|.
name|chmod
argument_list|(
literal|"--x--x--x"
argument_list|)
expr_stmt|;
name|test
operator|.
name|close
argument_list|()
expr_stmt|;
name|DatabaseManager
operator|.
name|getCollection
argument_list|(
name|getBaseUri
argument_list|()
operator|+
literal|"/db"
argument_list|,
literal|"test1"
argument_list|,
literal|"test1"
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|onlyReadAndExecuteRequiredToListCollectionResources
parameter_list|()
throws|throws
name|XMLDBException
block|{
specifier|final
name|Collection
name|test
init|=
name|DatabaseManager
operator|.
name|getCollection
argument_list|(
name|getBaseUri
argument_list|()
operator|+
literal|"/db/securityTest1"
argument_list|,
literal|"test1"
argument_list|,
literal|"test1"
argument_list|)
decl_stmt|;
specifier|final
name|UserManagementService
name|ums
init|=
operator|(
name|UserManagementService
operator|)
name|test
operator|.
name|getService
argument_list|(
literal|"UserManagementService"
argument_list|,
literal|"1.0"
argument_list|)
decl_stmt|;
name|ums
operator|.
name|chmod
argument_list|(
literal|"r-x------"
argument_list|)
expr_stmt|;
name|test
operator|.
name|listResources
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Test
argument_list|(
name|expected
operator|=
name|XMLDBException
operator|.
name|class
argument_list|)
specifier|public
name|void
name|cannotListCollectionResourcesWithoutRead
parameter_list|()
throws|throws
name|XMLDBException
block|{
name|Collection
name|test
init|=
name|DatabaseManager
operator|.
name|getCollection
argument_list|(
name|getBaseUri
argument_list|()
operator|+
literal|"/db/securityTest1"
argument_list|,
literal|"test1"
argument_list|,
literal|"test1"
argument_list|)
decl_stmt|;
specifier|final
name|UserManagementService
name|ums
init|=
operator|(
name|UserManagementService
operator|)
name|test
operator|.
name|getService
argument_list|(
literal|"UserManagementService"
argument_list|,
literal|"1.0"
argument_list|)
decl_stmt|;
name|ums
operator|.
name|chmod
argument_list|(
literal|"-wx-wx-wx"
argument_list|)
expr_stmt|;
name|test
operator|.
name|close
argument_list|()
expr_stmt|;
name|test
operator|=
name|DatabaseManager
operator|.
name|getCollection
argument_list|(
name|getBaseUri
argument_list|()
operator|+
literal|"/db/securityTest1"
argument_list|,
literal|"test1"
argument_list|,
literal|"test1"
argument_list|)
expr_stmt|;
name|test
operator|.
name|listResources
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|onlyReadAndExecuteRequiredToListCollectionSubCollections
parameter_list|()
throws|throws
name|XMLDBException
block|{
specifier|final
name|Collection
name|test
init|=
name|DatabaseManager
operator|.
name|getCollection
argument_list|(
name|getBaseUri
argument_list|()
operator|+
literal|"/db/securityTest1"
argument_list|,
literal|"test1"
argument_list|,
literal|"test1"
argument_list|)
decl_stmt|;
specifier|final
name|UserManagementService
name|ums
init|=
operator|(
name|UserManagementService
operator|)
name|test
operator|.
name|getService
argument_list|(
literal|"UserManagementService"
argument_list|,
literal|"1.0"
argument_list|)
decl_stmt|;
name|ums
operator|.
name|chmod
argument_list|(
literal|"r-x------"
argument_list|)
expr_stmt|;
name|test
operator|.
name|listChildCollections
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Test
argument_list|(
name|expected
operator|=
name|XMLDBException
operator|.
name|class
argument_list|)
specifier|public
name|void
name|cannotListCollectionSubCollectionsWithoutRead
parameter_list|()
throws|throws
name|XMLDBException
block|{
name|Collection
name|test
init|=
name|DatabaseManager
operator|.
name|getCollection
argument_list|(
name|getBaseUri
argument_list|()
operator|+
literal|"/db/securityTest1"
argument_list|,
literal|"test1"
argument_list|,
literal|"test1"
argument_list|)
decl_stmt|;
specifier|final
name|UserManagementService
name|ums
init|=
operator|(
name|UserManagementService
operator|)
name|test
operator|.
name|getService
argument_list|(
literal|"UserManagementService"
argument_list|,
literal|"1.0"
argument_list|)
decl_stmt|;
name|ums
operator|.
name|chmod
argument_list|(
literal|"-wx-wx-wx"
argument_list|)
expr_stmt|;
name|test
operator|.
name|close
argument_list|()
expr_stmt|;
name|test
operator|=
name|DatabaseManager
operator|.
name|getCollection
argument_list|(
name|getBaseUri
argument_list|()
operator|+
literal|"/db/securityTest1"
argument_list|,
literal|"test1"
argument_list|,
literal|"test1"
argument_list|)
expr_stmt|;
name|test
operator|.
name|listChildCollections
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|canReadXmlResourceWithOnlyExecutePermissionOnParentCollection
parameter_list|()
throws|throws
name|XMLDBException
block|{
name|Collection
name|test
init|=
name|DatabaseManager
operator|.
name|getCollection
argument_list|(
name|getBaseUri
argument_list|()
operator|+
literal|"/db/securityTest1"
argument_list|,
literal|"test1"
argument_list|,
literal|"test1"
argument_list|)
decl_stmt|;
specifier|final
name|UserManagementService
name|ums
init|=
operator|(
name|UserManagementService
operator|)
name|test
operator|.
name|getService
argument_list|(
literal|"UserManagementService"
argument_list|,
literal|"1.0"
argument_list|)
decl_stmt|;
name|ums
operator|.
name|chmod
argument_list|(
literal|"--x------"
argument_list|)
expr_stmt|;
name|test
operator|.
name|close
argument_list|()
expr_stmt|;
name|test
operator|=
name|DatabaseManager
operator|.
name|getCollection
argument_list|(
name|getBaseUri
argument_list|()
operator|+
literal|"/db/securityTest1"
argument_list|,
literal|"test1"
argument_list|,
literal|"test1"
argument_list|)
expr_stmt|;
specifier|final
name|Resource
name|resource
init|=
name|test
operator|.
name|getResource
argument_list|(
literal|"test.xml"
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|"<test/>"
argument_list|,
name|resource
operator|.
name|getContent
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
argument_list|(
name|expected
operator|=
name|XMLDBException
operator|.
name|class
argument_list|)
specifier|public
name|void
name|cannotReadXmlResourceWithoutExecutePermissionOnParentCollection
parameter_list|()
throws|throws
name|XMLDBException
block|{
name|Collection
name|test
init|=
name|DatabaseManager
operator|.
name|getCollection
argument_list|(
name|getBaseUri
argument_list|()
operator|+
literal|"/db/securityTest1"
argument_list|,
literal|"test1"
argument_list|,
literal|"test1"
argument_list|)
decl_stmt|;
specifier|final
name|UserManagementService
name|ums
init|=
operator|(
name|UserManagementService
operator|)
name|test
operator|.
name|getService
argument_list|(
literal|"UserManagementService"
argument_list|,
literal|"1.0"
argument_list|)
decl_stmt|;
name|ums
operator|.
name|chmod
argument_list|(
literal|"rw-------"
argument_list|)
expr_stmt|;
name|test
operator|.
name|close
argument_list|()
expr_stmt|;
name|test
operator|=
name|DatabaseManager
operator|.
name|getCollection
argument_list|(
name|getBaseUri
argument_list|()
operator|+
literal|"/db/securityTest1"
argument_list|,
literal|"test1"
argument_list|,
literal|"test1"
argument_list|)
expr_stmt|;
specifier|final
name|Resource
name|resource
init|=
name|test
operator|.
name|getResource
argument_list|(
literal|"test.xml"
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|"<test/>"
argument_list|,
name|resource
operator|.
name|getContent
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|canReadBinaryResourceWithOnlyExecutePermissionOnParentCollection
parameter_list|()
throws|throws
name|XMLDBException
block|{
name|Collection
name|test
init|=
name|DatabaseManager
operator|.
name|getCollection
argument_list|(
name|getBaseUri
argument_list|()
operator|+
literal|"/db/securityTest1"
argument_list|,
literal|"test1"
argument_list|,
literal|"test1"
argument_list|)
decl_stmt|;
specifier|final
name|UserManagementService
name|ums
init|=
operator|(
name|UserManagementService
operator|)
name|test
operator|.
name|getService
argument_list|(
literal|"UserManagementService"
argument_list|,
literal|"1.0"
argument_list|)
decl_stmt|;
name|ums
operator|.
name|chmod
argument_list|(
literal|"--x------"
argument_list|)
expr_stmt|;
name|test
operator|.
name|close
argument_list|()
expr_stmt|;
name|test
operator|=
name|DatabaseManager
operator|.
name|getCollection
argument_list|(
name|getBaseUri
argument_list|()
operator|+
literal|"/db/securityTest1"
argument_list|,
literal|"test1"
argument_list|,
literal|"test1"
argument_list|)
expr_stmt|;
specifier|final
name|Resource
name|resource
init|=
name|test
operator|.
name|getResource
argument_list|(
literal|"test.bin"
argument_list|)
decl_stmt|;
name|assertArrayEquals
argument_list|(
literal|"binary-test"
operator|.
name|getBytes
argument_list|()
argument_list|,
operator|(
name|byte
index|[]
operator|)
name|resource
operator|.
name|getContent
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
argument_list|(
name|expected
operator|=
name|XMLDBException
operator|.
name|class
argument_list|)
specifier|public
name|void
name|cannotReadBinaryResourceWithoutExecutePermissionOnParentCollection
parameter_list|()
throws|throws
name|XMLDBException
block|{
name|Collection
name|test
init|=
name|DatabaseManager
operator|.
name|getCollection
argument_list|(
name|getBaseUri
argument_list|()
operator|+
literal|"/db/securityTest1"
argument_list|,
literal|"test1"
argument_list|,
literal|"test1"
argument_list|)
decl_stmt|;
specifier|final
name|UserManagementService
name|ums
init|=
operator|(
name|UserManagementService
operator|)
name|test
operator|.
name|getService
argument_list|(
literal|"UserManagementService"
argument_list|,
literal|"1.0"
argument_list|)
decl_stmt|;
name|ums
operator|.
name|chmod
argument_list|(
literal|"rw-------"
argument_list|)
expr_stmt|;
name|test
operator|.
name|close
argument_list|()
expr_stmt|;
name|test
operator|=
name|DatabaseManager
operator|.
name|getCollection
argument_list|(
name|getBaseUri
argument_list|()
operator|+
literal|"/db/securityTest1"
argument_list|,
literal|"test1"
argument_list|,
literal|"test1"
argument_list|)
expr_stmt|;
specifier|final
name|Resource
name|resource
init|=
name|test
operator|.
name|getResource
argument_list|(
literal|"test.bin"
argument_list|)
decl_stmt|;
name|assertArrayEquals
argument_list|(
literal|"binary-test"
operator|.
name|getBytes
argument_list|()
argument_list|,
operator|(
name|byte
index|[]
operator|)
name|resource
operator|.
name|getContent
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|canReadXmlResourceWithOnlyReadPermission
parameter_list|()
throws|throws
name|XMLDBException
block|{
name|Collection
name|test
init|=
name|DatabaseManager
operator|.
name|getCollection
argument_list|(
name|getBaseUri
argument_list|()
operator|+
literal|"/db/securityTest1"
argument_list|,
literal|"test1"
argument_list|,
literal|"test1"
argument_list|)
decl_stmt|;
specifier|final
name|UserManagementService
name|ums
init|=
operator|(
name|UserManagementService
operator|)
name|test
operator|.
name|getService
argument_list|(
literal|"UserManagementService"
argument_list|,
literal|"1.0"
argument_list|)
decl_stmt|;
name|Resource
name|resource
init|=
name|test
operator|.
name|getResource
argument_list|(
literal|"test.xml"
argument_list|)
decl_stmt|;
name|ums
operator|.
name|chmod
argument_list|(
name|resource
argument_list|,
literal|"r--------"
argument_list|)
expr_stmt|;
name|test
operator|.
name|close
argument_list|()
expr_stmt|;
name|test
operator|=
name|DatabaseManager
operator|.
name|getCollection
argument_list|(
name|getBaseUri
argument_list|()
operator|+
literal|"/db/securityTest1"
argument_list|,
literal|"test1"
argument_list|,
literal|"test1"
argument_list|)
expr_stmt|;
name|resource
operator|=
name|test
operator|.
name|getResource
argument_list|(
literal|"test.xml"
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"<test/>"
argument_list|,
name|resource
operator|.
name|getContent
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
argument_list|(
name|expected
operator|=
name|XMLDBException
operator|.
name|class
argument_list|)
specifier|public
name|void
name|cannotReadXmlResourceWithoutReadPermission
parameter_list|()
throws|throws
name|XMLDBException
block|{
name|Collection
name|test
init|=
name|DatabaseManager
operator|.
name|getCollection
argument_list|(
name|getBaseUri
argument_list|()
operator|+
literal|"/db/securityTest1"
argument_list|,
literal|"test1"
argument_list|,
literal|"test1"
argument_list|)
decl_stmt|;
specifier|final
name|UserManagementService
name|ums
init|=
operator|(
name|UserManagementService
operator|)
name|test
operator|.
name|getService
argument_list|(
literal|"UserManagementService"
argument_list|,
literal|"1.0"
argument_list|)
decl_stmt|;
name|Resource
name|resource
init|=
name|test
operator|.
name|getResource
argument_list|(
literal|"test.xml"
argument_list|)
decl_stmt|;
name|ums
operator|.
name|chmod
argument_list|(
name|resource
argument_list|,
literal|"-wx------"
argument_list|)
expr_stmt|;
name|test
operator|.
name|close
argument_list|()
expr_stmt|;
name|test
operator|=
name|DatabaseManager
operator|.
name|getCollection
argument_list|(
name|getBaseUri
argument_list|()
operator|+
literal|"/db/securityTest1"
argument_list|,
literal|"test1"
argument_list|,
literal|"test1"
argument_list|)
expr_stmt|;
name|resource
operator|=
name|test
operator|.
name|getResource
argument_list|(
literal|"test.xml"
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"<test/>"
argument_list|,
name|resource
operator|.
name|getContent
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|canReadBinaryResourceWithOnlyReadPermission
parameter_list|()
throws|throws
name|XMLDBException
block|{
name|Collection
name|test
init|=
name|DatabaseManager
operator|.
name|getCollection
argument_list|(
name|getBaseUri
argument_list|()
operator|+
literal|"/db/securityTest1"
argument_list|,
literal|"test1"
argument_list|,
literal|"test1"
argument_list|)
decl_stmt|;
specifier|final
name|UserManagementService
name|ums
init|=
operator|(
name|UserManagementService
operator|)
name|test
operator|.
name|getService
argument_list|(
literal|"UserManagementService"
argument_list|,
literal|"1.0"
argument_list|)
decl_stmt|;
name|Resource
name|resource
init|=
name|test
operator|.
name|getResource
argument_list|(
literal|"test.bin"
argument_list|)
decl_stmt|;
name|ums
operator|.
name|chmod
argument_list|(
name|resource
argument_list|,
literal|"r--------"
argument_list|)
expr_stmt|;
name|test
operator|.
name|close
argument_list|()
expr_stmt|;
name|test
operator|=
name|DatabaseManager
operator|.
name|getCollection
argument_list|(
name|getBaseUri
argument_list|()
operator|+
literal|"/db/securityTest1"
argument_list|,
literal|"test1"
argument_list|,
literal|"test1"
argument_list|)
expr_stmt|;
name|resource
operator|=
name|test
operator|.
name|getResource
argument_list|(
literal|"test.bin"
argument_list|)
expr_stmt|;
name|assertArrayEquals
argument_list|(
literal|"binary-test"
operator|.
name|getBytes
argument_list|()
argument_list|,
operator|(
name|byte
index|[]
operator|)
name|resource
operator|.
name|getContent
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
argument_list|(
name|expected
operator|=
name|XMLDBException
operator|.
name|class
argument_list|)
specifier|public
name|void
name|cannotReadBinaryResourceWithoutReadPermission
parameter_list|()
throws|throws
name|XMLDBException
block|{
name|Collection
name|test
init|=
name|DatabaseManager
operator|.
name|getCollection
argument_list|(
name|getBaseUri
argument_list|()
operator|+
literal|"/db/securityTest1"
argument_list|,
literal|"test1"
argument_list|,
literal|"test1"
argument_list|)
decl_stmt|;
specifier|final
name|UserManagementService
name|ums
init|=
operator|(
name|UserManagementService
operator|)
name|test
operator|.
name|getService
argument_list|(
literal|"UserManagementService"
argument_list|,
literal|"1.0"
argument_list|)
decl_stmt|;
name|Resource
name|resource
init|=
name|test
operator|.
name|getResource
argument_list|(
literal|"test.bin"
argument_list|)
decl_stmt|;
name|ums
operator|.
name|chmod
argument_list|(
name|resource
argument_list|,
literal|"-wx------"
argument_list|)
expr_stmt|;
name|test
operator|.
name|close
argument_list|()
expr_stmt|;
name|test
operator|=
name|DatabaseManager
operator|.
name|getCollection
argument_list|(
name|getBaseUri
argument_list|()
operator|+
literal|"/db/securityTest1"
argument_list|,
literal|"test1"
argument_list|,
literal|"test1"
argument_list|)
expr_stmt|;
name|resource
operator|=
name|test
operator|.
name|getResource
argument_list|(
literal|"test.bin"
argument_list|)
expr_stmt|;
name|assertArrayEquals
argument_list|(
literal|"binary-test"
operator|.
name|getBytes
argument_list|()
argument_list|,
operator|(
name|byte
index|[]
operator|)
name|resource
operator|.
name|getContent
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|canCreateXmlResourceWithOnlyExecuteAndWritePermissionOnParentCollection
parameter_list|()
throws|throws
name|XMLDBException
block|{
name|Collection
name|test
init|=
name|DatabaseManager
operator|.
name|getCollection
argument_list|(
name|getBaseUri
argument_list|()
operator|+
literal|"/db/securityTest1"
argument_list|,
literal|"test1"
argument_list|,
literal|"test1"
argument_list|)
decl_stmt|;
specifier|final
name|UserManagementService
name|ums
init|=
operator|(
name|UserManagementService
operator|)
name|test
operator|.
name|getService
argument_list|(
literal|"UserManagementService"
argument_list|,
literal|"1.0"
argument_list|)
decl_stmt|;
name|ums
operator|.
name|chmod
argument_list|(
literal|"-wx------"
argument_list|)
expr_stmt|;
name|test
operator|.
name|close
argument_list|()
expr_stmt|;
name|test
operator|=
name|DatabaseManager
operator|.
name|getCollection
argument_list|(
name|getBaseUri
argument_list|()
operator|+
literal|"/db/securityTest1"
argument_list|,
literal|"test1"
argument_list|,
literal|"test1"
argument_list|)
expr_stmt|;
specifier|final
name|Resource
name|resource
init|=
name|test
operator|.
name|createResource
argument_list|(
literal|"other.xml"
argument_list|,
name|XMLResource
operator|.
name|RESOURCE_TYPE
argument_list|)
decl_stmt|;
name|resource
operator|.
name|setContent
argument_list|(
literal|"<other/>"
argument_list|)
expr_stmt|;
name|test
operator|.
name|storeResource
argument_list|(
name|resource
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|canCreateBinaryResourceWithOnlyExecuteAndWritePermissionOnParentCollection
parameter_list|()
throws|throws
name|XMLDBException
block|{
name|Collection
name|test
init|=
name|DatabaseManager
operator|.
name|getCollection
argument_list|(
name|getBaseUri
argument_list|()
operator|+
literal|"/db/securityTest1"
argument_list|,
literal|"test1"
argument_list|,
literal|"test1"
argument_list|)
decl_stmt|;
specifier|final
name|UserManagementService
name|ums
init|=
operator|(
name|UserManagementService
operator|)
name|test
operator|.
name|getService
argument_list|(
literal|"UserManagementService"
argument_list|,
literal|"1.0"
argument_list|)
decl_stmt|;
name|ums
operator|.
name|chmod
argument_list|(
literal|"-wx------"
argument_list|)
expr_stmt|;
name|test
operator|.
name|close
argument_list|()
expr_stmt|;
name|test
operator|=
name|DatabaseManager
operator|.
name|getCollection
argument_list|(
name|getBaseUri
argument_list|()
operator|+
literal|"/db/securityTest1"
argument_list|,
literal|"test1"
argument_list|,
literal|"test1"
argument_list|)
expr_stmt|;
specifier|final
name|Resource
name|resource
init|=
name|test
operator|.
name|createResource
argument_list|(
literal|"other.bin"
argument_list|,
name|BinaryResource
operator|.
name|RESOURCE_TYPE
argument_list|)
decl_stmt|;
name|resource
operator|.
name|setContent
argument_list|(
literal|"binary"
operator|.
name|getBytes
argument_list|()
argument_list|)
expr_stmt|;
name|test
operator|.
name|storeResource
argument_list|(
name|resource
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|canUpdateXmlResourceWithOnlyExecutePermissionOnParentCollection
parameter_list|()
throws|throws
name|XMLDBException
block|{
name|Collection
name|test
init|=
name|DatabaseManager
operator|.
name|getCollection
argument_list|(
name|getBaseUri
argument_list|()
operator|+
literal|"/db/securityTest1"
argument_list|,
literal|"test1"
argument_list|,
literal|"test1"
argument_list|)
decl_stmt|;
specifier|final
name|UserManagementService
name|ums
init|=
operator|(
name|UserManagementService
operator|)
name|test
operator|.
name|getService
argument_list|(
literal|"UserManagementService"
argument_list|,
literal|"1.0"
argument_list|)
decl_stmt|;
name|ums
operator|.
name|chmod
argument_list|(
literal|"--x------"
argument_list|)
expr_stmt|;
name|test
operator|.
name|close
argument_list|()
expr_stmt|;
name|test
operator|=
name|DatabaseManager
operator|.
name|getCollection
argument_list|(
name|getBaseUri
argument_list|()
operator|+
literal|"/db/securityTest1"
argument_list|,
literal|"test1"
argument_list|,
literal|"test1"
argument_list|)
expr_stmt|;
name|Resource
name|resource
init|=
name|test
operator|.
name|getResource
argument_list|(
literal|"test.xml"
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|"<test/>"
argument_list|,
name|resource
operator|.
name|getContent
argument_list|()
argument_list|)
expr_stmt|;
comment|//update the resource
name|resource
operator|.
name|setContent
argument_list|(
literal|"<testing/>"
argument_list|)
expr_stmt|;
name|test
operator|.
name|storeResource
argument_list|(
name|resource
argument_list|)
expr_stmt|;
name|resource
operator|=
name|test
operator|.
name|getResource
argument_list|(
literal|"test.xml"
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"<testing/>"
argument_list|,
name|resource
operator|.
name|getContent
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|canUpdateBinaryResourceWithOnlyExecutePermissionOnParentCollection
parameter_list|()
throws|throws
name|XMLDBException
block|{
name|Collection
name|test
init|=
name|DatabaseManager
operator|.
name|getCollection
argument_list|(
name|getBaseUri
argument_list|()
operator|+
literal|"/db/securityTest1"
argument_list|,
literal|"test1"
argument_list|,
literal|"test1"
argument_list|)
decl_stmt|;
specifier|final
name|UserManagementService
name|ums
init|=
operator|(
name|UserManagementService
operator|)
name|test
operator|.
name|getService
argument_list|(
literal|"UserManagementService"
argument_list|,
literal|"1.0"
argument_list|)
decl_stmt|;
name|ums
operator|.
name|chmod
argument_list|(
literal|"--x------"
argument_list|)
expr_stmt|;
name|test
operator|.
name|close
argument_list|()
expr_stmt|;
name|test
operator|=
name|DatabaseManager
operator|.
name|getCollection
argument_list|(
name|getBaseUri
argument_list|()
operator|+
literal|"/db/securityTest1"
argument_list|,
literal|"test1"
argument_list|,
literal|"test1"
argument_list|)
expr_stmt|;
name|Resource
name|resource
init|=
name|test
operator|.
name|getResource
argument_list|(
literal|"test.bin"
argument_list|)
decl_stmt|;
name|assertArrayEquals
argument_list|(
literal|"binary-test"
operator|.
name|getBytes
argument_list|()
argument_list|,
operator|(
name|byte
index|[]
operator|)
name|resource
operator|.
name|getContent
argument_list|()
argument_list|)
expr_stmt|;
comment|//update the resource
name|resource
operator|.
name|setContent
argument_list|(
literal|"testing"
operator|.
name|getBytes
argument_list|()
argument_list|)
expr_stmt|;
name|test
operator|.
name|storeResource
argument_list|(
name|resource
argument_list|)
expr_stmt|;
name|resource
operator|=
name|test
operator|.
name|getResource
argument_list|(
literal|"test.bin"
argument_list|)
expr_stmt|;
name|assertArrayEquals
argument_list|(
literal|"testing"
operator|.
name|getBytes
argument_list|()
argument_list|,
operator|(
name|byte
index|[]
operator|)
name|resource
operator|.
name|getContent
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|canExecuteXQueryWithOnlyExecutePermissionOnParentCollection
parameter_list|()
throws|throws
name|XMLDBException
block|{
name|Collection
name|test
init|=
name|DatabaseManager
operator|.
name|getCollection
argument_list|(
name|getBaseUri
argument_list|()
operator|+
literal|"/db/securityTest1"
argument_list|,
literal|"test1"
argument_list|,
literal|"test1"
argument_list|)
decl_stmt|;
specifier|final
name|UserManagementService
name|ums
init|=
operator|(
name|UserManagementService
operator|)
name|test
operator|.
name|getService
argument_list|(
literal|"UserManagementService"
argument_list|,
literal|"1.0"
argument_list|)
decl_stmt|;
specifier|final
name|String
name|xquery
init|=
literal|"<xquery>{ 1 + 1 }</xquery>"
decl_stmt|;
name|Resource
name|xqueryResource
init|=
name|test
operator|.
name|createResource
argument_list|(
literal|"test.xquery"
argument_list|,
name|BinaryResource
operator|.
name|RESOURCE_TYPE
argument_list|)
decl_stmt|;
name|xqueryResource
operator|.
name|setContent
argument_list|(
name|xquery
argument_list|)
expr_stmt|;
name|test
operator|.
name|storeResource
argument_list|(
name|xqueryResource
argument_list|)
expr_stmt|;
name|ums
operator|.
name|chmod
argument_list|(
literal|"--x------"
argument_list|)
expr_stmt|;
name|ums
operator|.
name|chmod
argument_list|(
name|xqueryResource
argument_list|,
literal|"rwx------"
argument_list|)
expr_stmt|;
comment|//set execute bit on xquery (its off by default!)
name|test
operator|.
name|close
argument_list|()
expr_stmt|;
name|test
operator|=
name|DatabaseManager
operator|.
name|getCollection
argument_list|(
name|getBaseUri
argument_list|()
operator|+
literal|"/db/securityTest1"
argument_list|,
literal|"test1"
argument_list|,
literal|"test1"
argument_list|)
expr_stmt|;
name|xqueryResource
operator|=
name|test
operator|.
name|getResource
argument_list|(
literal|"test.xquery"
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|xquery
argument_list|,
operator|new
name|String
argument_list|(
operator|(
name|byte
index|[]
operator|)
name|xqueryResource
operator|.
name|getContent
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
comment|//execute the stored XQuery
specifier|final
name|XPathQueryServiceImpl
name|queryService
init|=
operator|(
name|XPathQueryServiceImpl
operator|)
name|test
operator|.
name|getService
argument_list|(
literal|"XPathQueryService"
argument_list|,
literal|"1.0"
argument_list|)
decl_stmt|;
specifier|final
name|ResourceSet
name|result
init|=
name|queryService
operator|.
name|executeStoredQuery
argument_list|(
literal|"/db/securityTest1/test.xquery"
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|"<xquery>2</xquery>"
argument_list|,
name|result
operator|.
name|getResource
argument_list|(
literal|0
argument_list|)
operator|.
name|getContent
argument_list|()
argument_list|)
expr_stmt|;
block|}
comment|/**      * Note the eventual goal is for XQuery to be executeable in eXist      * with just the EXECUTE flag set, this however will require some      * serious refactoring. See my (Adam) posts to exist-open thread entitled      * '[HEADS-UP] Merge in of Security Branch', most significant      * messages from 08/02/2012      */
annotation|@
name|Test
specifier|public
name|void
name|canExecuteXQueryWithOnlyExecuteAndReadPermission
parameter_list|()
throws|throws
name|XMLDBException
block|{
name|Collection
name|test
init|=
name|DatabaseManager
operator|.
name|getCollection
argument_list|(
name|getBaseUri
argument_list|()
operator|+
literal|"/db/securityTest1"
argument_list|,
literal|"test1"
argument_list|,
literal|"test1"
argument_list|)
decl_stmt|;
specifier|final
name|UserManagementService
name|ums
init|=
operator|(
name|UserManagementService
operator|)
name|test
operator|.
name|getService
argument_list|(
literal|"UserManagementService"
argument_list|,
literal|"1.0"
argument_list|)
decl_stmt|;
specifier|final
name|String
name|xquery
init|=
literal|"<xquery>{ 1 + 2 }</xquery>"
decl_stmt|;
name|Resource
name|xqueryResource
init|=
name|test
operator|.
name|createResource
argument_list|(
literal|"test.xquery"
argument_list|,
name|BinaryResource
operator|.
name|RESOURCE_TYPE
argument_list|)
decl_stmt|;
name|xqueryResource
operator|.
name|setContent
argument_list|(
name|xquery
argument_list|)
expr_stmt|;
name|test
operator|.
name|storeResource
argument_list|(
name|xqueryResource
argument_list|)
expr_stmt|;
name|ums
operator|.
name|chmod
argument_list|(
name|xqueryResource
argument_list|,
literal|"r-x------"
argument_list|)
expr_stmt|;
comment|//execute only on xquery
name|test
operator|.
name|close
argument_list|()
expr_stmt|;
name|test
operator|=
name|DatabaseManager
operator|.
name|getCollection
argument_list|(
name|getBaseUri
argument_list|()
operator|+
literal|"/db/securityTest1"
argument_list|,
literal|"test1"
argument_list|,
literal|"test1"
argument_list|)
expr_stmt|;
name|xqueryResource
operator|=
name|test
operator|.
name|getResource
argument_list|(
literal|"test.xquery"
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|xquery
argument_list|,
operator|new
name|String
argument_list|(
operator|(
name|byte
index|[]
operator|)
name|xqueryResource
operator|.
name|getContent
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
comment|//execute the stored XQuery
specifier|final
name|XPathQueryServiceImpl
name|queryService
init|=
operator|(
name|XPathQueryServiceImpl
operator|)
name|test
operator|.
name|getService
argument_list|(
literal|"XPathQueryService"
argument_list|,
literal|"1.0"
argument_list|)
decl_stmt|;
specifier|final
name|ResourceSet
name|result
init|=
name|queryService
operator|.
name|executeStoredQuery
argument_list|(
literal|"/db/securityTest1/test.xquery"
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|"<xquery>3</xquery>"
argument_list|,
name|result
operator|.
name|getResource
argument_list|(
literal|0
argument_list|)
operator|.
name|getContent
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
argument_list|(
name|expected
operator|=
name|XMLDBException
operator|.
name|class
argument_list|)
specifier|public
name|void
name|cannotExecuteXQueryWithoutExecutePermission
parameter_list|()
throws|throws
name|XMLDBException
block|{
name|Collection
name|test
init|=
name|DatabaseManager
operator|.
name|getCollection
argument_list|(
name|getBaseUri
argument_list|()
operator|+
literal|"/db/securityTest1"
argument_list|,
literal|"test1"
argument_list|,
literal|"test1"
argument_list|)
decl_stmt|;
specifier|final
name|UserManagementService
name|ums
init|=
operator|(
name|UserManagementService
operator|)
name|test
operator|.
name|getService
argument_list|(
literal|"UserManagementService"
argument_list|,
literal|"1.0"
argument_list|)
decl_stmt|;
specifier|final
name|String
name|xquery
init|=
literal|"<xquery>{ 1 + 2 }</xquery>"
decl_stmt|;
name|Resource
name|xqueryResource
init|=
name|test
operator|.
name|createResource
argument_list|(
literal|"test.xquery"
argument_list|,
name|BinaryResource
operator|.
name|RESOURCE_TYPE
argument_list|)
decl_stmt|;
name|xqueryResource
operator|.
name|setContent
argument_list|(
name|xquery
argument_list|)
expr_stmt|;
name|test
operator|.
name|storeResource
argument_list|(
name|xqueryResource
argument_list|)
expr_stmt|;
name|ums
operator|.
name|chmod
argument_list|(
name|xqueryResource
argument_list|,
literal|"rw-------"
argument_list|)
expr_stmt|;
comment|//execute only on xquery
name|test
operator|.
name|close
argument_list|()
expr_stmt|;
name|test
operator|=
name|DatabaseManager
operator|.
name|getCollection
argument_list|(
name|getBaseUri
argument_list|()
operator|+
literal|"/db/securityTest1"
argument_list|,
literal|"test1"
argument_list|,
literal|"test1"
argument_list|)
expr_stmt|;
name|xqueryResource
operator|=
name|test
operator|.
name|getResource
argument_list|(
literal|"test.xquery"
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|xquery
argument_list|,
operator|new
name|String
argument_list|(
operator|(
name|byte
index|[]
operator|)
name|xqueryResource
operator|.
name|getContent
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
comment|//execute the stored XQuery
specifier|final
name|XPathQueryServiceImpl
name|queryService
init|=
operator|(
name|XPathQueryServiceImpl
operator|)
name|test
operator|.
name|getService
argument_list|(
literal|"XPathQueryService"
argument_list|,
literal|"1.0"
argument_list|)
decl_stmt|;
specifier|final
name|ResourceSet
name|result
init|=
name|queryService
operator|.
name|executeStoredQuery
argument_list|(
literal|"/db/securityTest1/test.xquery"
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|"<xquery>3</xquery>"
argument_list|,
name|result
operator|.
name|getResource
argument_list|(
literal|0
argument_list|)
operator|.
name|getContent
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
argument_list|(
name|expected
operator|=
name|XMLDBException
operator|.
name|class
argument_list|)
specifier|public
name|void
name|cannotOpenCollection
parameter_list|()
throws|throws
name|XMLDBException
block|{
comment|//check that a user not in the users group (i.e. test3) cannot open the collection /db/securityTest1
name|DatabaseManager
operator|.
name|getCollection
argument_list|(
name|getBaseUri
argument_list|()
operator|+
literal|"/db/securityTest1"
argument_list|,
literal|"test3"
argument_list|,
literal|"test3"
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|canOpenCollection
parameter_list|()
throws|throws
name|XMLDBException
block|{
comment|//check that a user in the users group (i.e. test2) can open the collection /db/securityTest1
name|DatabaseManager
operator|.
name|getCollection
argument_list|(
name|getBaseUri
argument_list|()
operator|+
literal|"/db/securityTest1"
argument_list|,
literal|"test1"
argument_list|,
literal|"test1"
argument_list|)
expr_stmt|;
name|DatabaseManager
operator|.
name|getCollection
argument_list|(
name|getBaseUri
argument_list|()
operator|+
literal|"/db/securityTest1"
argument_list|,
literal|"test2"
argument_list|,
literal|"test2"
argument_list|)
expr_stmt|;
comment|//check that any user can open the collection /db/securityTest3
name|DatabaseManager
operator|.
name|getCollection
argument_list|(
name|getBaseUri
argument_list|()
operator|+
literal|"/db/securityTest3"
argument_list|,
literal|"test1"
argument_list|,
literal|"test1"
argument_list|)
expr_stmt|;
name|DatabaseManager
operator|.
name|getCollection
argument_list|(
name|getBaseUri
argument_list|()
operator|+
literal|"/db/securityTest3"
argument_list|,
literal|"test2"
argument_list|,
literal|"test2"
argument_list|)
expr_stmt|;
name|DatabaseManager
operator|.
name|getCollection
argument_list|(
name|getBaseUri
argument_list|()
operator|+
literal|"/db/securityTest3"
argument_list|,
literal|"test3"
argument_list|,
literal|"test3"
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|copyCollectionWithResources
parameter_list|()
throws|throws
name|XMLDBException
block|{
name|Collection
name|test
init|=
name|DatabaseManager
operator|.
name|getCollection
argument_list|(
name|getBaseUri
argument_list|()
operator|+
literal|"/db/securityTest3"
argument_list|,
literal|"test1"
argument_list|,
literal|"test1"
argument_list|)
decl_stmt|;
name|CollectionManagementServiceImpl
name|cms
init|=
operator|(
name|CollectionManagementServiceImpl
operator|)
name|test
operator|.
name|getService
argument_list|(
literal|"CollectionManagementService"
argument_list|,
literal|"1.0"
argument_list|)
decl_stmt|;
comment|//create collection owned by "test1", and group "users" in /db/securityTest3
name|Collection
name|source
init|=
name|cms
operator|.
name|createCollection
argument_list|(
literal|"source"
argument_list|)
decl_stmt|;
comment|//create resource owned by "test1", and group "users" in /db/securityTest3/source
name|Resource
name|resSource
init|=
name|source
operator|.
name|createResource
argument_list|(
literal|"source1.xml"
argument_list|,
name|XMLResource
operator|.
name|RESOURCE_TYPE
argument_list|)
decl_stmt|;
name|resSource
operator|.
name|setContent
argument_list|(
literal|"<test/>"
argument_list|)
expr_stmt|;
name|source
operator|.
name|storeResource
argument_list|(
name|resSource
argument_list|)
expr_stmt|;
name|resSource
operator|=
name|source
operator|.
name|createResource
argument_list|(
literal|"source2.xml"
argument_list|,
name|XMLResource
operator|.
name|RESOURCE_TYPE
argument_list|)
expr_stmt|;
name|resSource
operator|.
name|setContent
argument_list|(
literal|"<test/>"
argument_list|)
expr_stmt|;
name|source
operator|.
name|storeResource
argument_list|(
name|resSource
argument_list|)
expr_stmt|;
comment|//as the 'test3' user copy the collection
name|test
operator|=
name|DatabaseManager
operator|.
name|getCollection
argument_list|(
name|getBaseUri
argument_list|()
operator|+
literal|"/db/securityTest3"
argument_list|,
literal|"test3"
argument_list|,
literal|"test3"
argument_list|)
expr_stmt|;
name|cms
operator|=
operator|(
name|CollectionManagementServiceImpl
operator|)
name|test
operator|.
name|getService
argument_list|(
literal|"CollectionManagementService"
argument_list|,
literal|"1.0"
argument_list|)
expr_stmt|;
name|cms
operator|.
name|copy
argument_list|(
literal|"/db/securityTest3/source"
argument_list|,
literal|"/db/securityTest3"
argument_list|,
literal|"copy-of-source"
argument_list|)
expr_stmt|;
specifier|final
name|Collection
name|copyOfSource
init|=
name|test
operator|.
name|getChildCollection
argument_list|(
literal|"copy-of-source"
argument_list|)
decl_stmt|;
name|assertNotNull
argument_list|(
name|copyOfSource
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|copyOfSource
operator|.
name|listResources
argument_list|()
operator|.
name|length
argument_list|)
expr_stmt|;
block|}
comment|/**      * As the 'test1' user, creates the collection and resource:      *      *  test1:users /db/securityTest3/source      *  test1:users /db/securityTest3/source/source1.xml      *  test1:users /db/securityTest3/source/source2.xml      *      * We then also create the Collection      *  test1:users /db/securityTest3/copy-of-source (0777)      * so that the destination (for the copy we are about      * to do) already exists and is writable...      *       * As the 'test3' user, copy the collection:      *      *  /db/securityTest3/source      *      -> /db/securityTest3/copy-of-source      */
annotation|@
name|Test
specifier|public
name|void
name|copyCollectionWithResources_destExists_destIsWritable
parameter_list|()
throws|throws
name|XMLDBException
block|{
name|Collection
name|test
init|=
name|DatabaseManager
operator|.
name|getCollection
argument_list|(
name|getBaseUri
argument_list|()
operator|+
literal|"/db/securityTest3"
argument_list|,
literal|"test1"
argument_list|,
literal|"test1"
argument_list|)
decl_stmt|;
name|CollectionManagementServiceImpl
name|cms
init|=
operator|(
name|CollectionManagementServiceImpl
operator|)
name|test
operator|.
name|getService
argument_list|(
literal|"CollectionManagementService"
argument_list|,
literal|"1.0"
argument_list|)
decl_stmt|;
comment|//create collection owned by "test1", and group "users" in /db/securityTest3
name|Collection
name|source
init|=
name|cms
operator|.
name|createCollection
argument_list|(
literal|"source"
argument_list|)
decl_stmt|;
comment|//create resource owned by "test1", and group "users" in /db/securityTest3/source
name|Resource
name|resSource
init|=
name|source
operator|.
name|createResource
argument_list|(
literal|"source1.xml"
argument_list|,
name|XMLResource
operator|.
name|RESOURCE_TYPE
argument_list|)
decl_stmt|;
name|resSource
operator|.
name|setContent
argument_list|(
literal|"<test/>"
argument_list|)
expr_stmt|;
name|source
operator|.
name|storeResource
argument_list|(
name|resSource
argument_list|)
expr_stmt|;
name|resSource
operator|=
name|source
operator|.
name|createResource
argument_list|(
literal|"source2.xml"
argument_list|,
name|XMLResource
operator|.
name|RESOURCE_TYPE
argument_list|)
expr_stmt|;
name|resSource
operator|.
name|setContent
argument_list|(
literal|"<test/>"
argument_list|)
expr_stmt|;
name|source
operator|.
name|storeResource
argument_list|(
name|resSource
argument_list|)
expr_stmt|;
comment|//pre-create the destination and set writable by all
specifier|final
name|Collection
name|dest
init|=
name|cms
operator|.
name|createCollection
argument_list|(
literal|"copy-of-source"
argument_list|)
decl_stmt|;
specifier|final
name|UserManagementService
name|ums
init|=
operator|(
name|UserManagementService
operator|)
name|dest
operator|.
name|getService
argument_list|(
literal|"UserManagementService"
argument_list|,
literal|"1.0"
argument_list|)
decl_stmt|;
name|ums
operator|.
name|chmod
argument_list|(
literal|0777
argument_list|)
expr_stmt|;
comment|//as the 'test3' user copy the collection
name|test
operator|=
name|DatabaseManager
operator|.
name|getCollection
argument_list|(
name|getBaseUri
argument_list|()
operator|+
literal|"/db/securityTest3"
argument_list|,
literal|"test3"
argument_list|,
literal|"test3"
argument_list|)
expr_stmt|;
name|cms
operator|=
operator|(
name|CollectionManagementServiceImpl
operator|)
name|test
operator|.
name|getService
argument_list|(
literal|"CollectionManagementService"
argument_list|,
literal|"1.0"
argument_list|)
expr_stmt|;
name|cms
operator|.
name|copy
argument_list|(
literal|"/db/securityTest3/source"
argument_list|,
literal|"/db/securityTest3"
argument_list|,
literal|"copy-of-source"
argument_list|)
expr_stmt|;
specifier|final
name|Collection
name|copyOfSource
init|=
name|test
operator|.
name|getChildCollection
argument_list|(
literal|"copy-of-source"
argument_list|)
decl_stmt|;
name|assertNotNull
argument_list|(
name|copyOfSource
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|copyOfSource
operator|.
name|listResources
argument_list|()
operator|.
name|length
argument_list|)
expr_stmt|;
block|}
comment|/**      * As the 'test1' user, creates the collection and resource:      *      *  test1:users /db/securityTest3/source      *  test1:users /db/securityTest3/source/source1.xml      *  test1:users /db/securityTest3/source/source2.xml      *      * We then also create the Collection      *  test1:users /db/securityTest3/copy-of-source (0755)      * so that the destination (for the copy we are about      * to do) already exists and is NOT writable...      *       * As the 'test3' user, copy the collection:      *      *  /db/securityTest3/source      *      -> /db/securityTest3/copy-of-source      */
annotation|@
name|Test
argument_list|(
name|expected
operator|=
name|XMLDBException
operator|.
name|class
argument_list|)
specifier|public
name|void
name|copyCollectionWithResources_destExists_destIsNotWritable
parameter_list|()
throws|throws
name|XMLDBException
block|{
name|Collection
name|test
init|=
name|DatabaseManager
operator|.
name|getCollection
argument_list|(
name|getBaseUri
argument_list|()
operator|+
literal|"/db/securityTest3"
argument_list|,
literal|"test1"
argument_list|,
literal|"test1"
argument_list|)
decl_stmt|;
name|CollectionManagementServiceImpl
name|cms
init|=
operator|(
name|CollectionManagementServiceImpl
operator|)
name|test
operator|.
name|getService
argument_list|(
literal|"CollectionManagementService"
argument_list|,
literal|"1.0"
argument_list|)
decl_stmt|;
comment|//create collection owned by "test1", and group "users" in /db/securityTest3
name|Collection
name|source
init|=
name|cms
operator|.
name|createCollection
argument_list|(
literal|"source"
argument_list|)
decl_stmt|;
comment|//create resource owned by "test1", and group "users" in /db/securityTest3/source
name|Resource
name|resSource
init|=
name|source
operator|.
name|createResource
argument_list|(
literal|"source1.xml"
argument_list|,
name|XMLResource
operator|.
name|RESOURCE_TYPE
argument_list|)
decl_stmt|;
name|resSource
operator|.
name|setContent
argument_list|(
literal|"<test/>"
argument_list|)
expr_stmt|;
name|source
operator|.
name|storeResource
argument_list|(
name|resSource
argument_list|)
expr_stmt|;
name|resSource
operator|=
name|source
operator|.
name|createResource
argument_list|(
literal|"source2.xml"
argument_list|,
name|XMLResource
operator|.
name|RESOURCE_TYPE
argument_list|)
expr_stmt|;
name|resSource
operator|.
name|setContent
argument_list|(
literal|"<test/>"
argument_list|)
expr_stmt|;
name|source
operator|.
name|storeResource
argument_list|(
name|resSource
argument_list|)
expr_stmt|;
comment|//pre-create the destination with default mode (0755)
comment|//so that it is not writable by 'test3' user
specifier|final
name|Collection
name|dest
init|=
name|cms
operator|.
name|createCollection
argument_list|(
literal|"copy-of-source"
argument_list|)
decl_stmt|;
comment|//as the 'test3' user copy the collection
name|test
operator|=
name|DatabaseManager
operator|.
name|getCollection
argument_list|(
name|getBaseUri
argument_list|()
operator|+
literal|"/db/securityTest3"
argument_list|,
literal|"test3"
argument_list|,
literal|"test3"
argument_list|)
expr_stmt|;
name|cms
operator|=
operator|(
name|CollectionManagementServiceImpl
operator|)
name|test
operator|.
name|getService
argument_list|(
literal|"CollectionManagementService"
argument_list|,
literal|"1.0"
argument_list|)
expr_stmt|;
name|cms
operator|.
name|copy
argument_list|(
literal|"/db/securityTest3/source"
argument_list|,
literal|"/db/securityTest3"
argument_list|,
literal|"copy-of-source"
argument_list|)
expr_stmt|;
block|}
comment|/**      * As the 'test1' user, creates the collection and resource:      *      *  test1:users /db/securityTest3/source      *  test1:users /db/securityTest3/source/source1.xml      *  test1:users /db/securityTest3/source/source2.xml      *      * We then also create the Collection      *  test1:users /db/securityTest3/copy-of-source (0777)      * so that the destination (for the copy we are about      * to do) already exists and is writable.      * We then create the resource      *  test1:users /db/securityTest/copy-of-source/source1.xml      * and set it so that it is not accessible by anyone      * apart from 'test1' user...      *       * As the 'test3' user, copy the collection:      *      *  /db/securityTest3/source      *      -> /db/securityTest3/copy-of-source      *       * The test should prove that during a copy, existing      * documents in the dest are replaced as long as the      * dest collection has write permission and that the      * permissions on the dest resource must also be writable      */
annotation|@
name|Test
argument_list|(
name|expected
operator|=
name|XMLDBException
operator|.
name|class
argument_list|)
specifier|public
name|void
name|copyCollectionWithResources_destResourceExists_destResourceIsNotWritable
parameter_list|()
throws|throws
name|XMLDBException
block|{
name|Collection
name|test
init|=
name|DatabaseManager
operator|.
name|getCollection
argument_list|(
name|getBaseUri
argument_list|()
operator|+
literal|"/db/securityTest3"
argument_list|,
literal|"test1"
argument_list|,
literal|"test1"
argument_list|)
decl_stmt|;
name|CollectionManagementServiceImpl
name|cms
init|=
operator|(
name|CollectionManagementServiceImpl
operator|)
name|test
operator|.
name|getService
argument_list|(
literal|"CollectionManagementService"
argument_list|,
literal|"1.0"
argument_list|)
decl_stmt|;
comment|//create collection owned by "test1", and group "users" in /db/securityTest3
name|Collection
name|source
init|=
name|cms
operator|.
name|createCollection
argument_list|(
literal|"source"
argument_list|)
decl_stmt|;
comment|//create resource owned by "test1", and group "users" in /db/securityTest3/source
name|Resource
name|resSource
init|=
name|source
operator|.
name|createResource
argument_list|(
literal|"source1.xml"
argument_list|,
name|XMLResource
operator|.
name|RESOURCE_TYPE
argument_list|)
decl_stmt|;
name|resSource
operator|.
name|setContent
argument_list|(
literal|"<test1/>"
argument_list|)
expr_stmt|;
name|source
operator|.
name|storeResource
argument_list|(
name|resSource
argument_list|)
expr_stmt|;
name|resSource
operator|=
name|source
operator|.
name|createResource
argument_list|(
literal|"source2.xml"
argument_list|,
name|XMLResource
operator|.
name|RESOURCE_TYPE
argument_list|)
expr_stmt|;
name|resSource
operator|.
name|setContent
argument_list|(
literal|"<test2/>"
argument_list|)
expr_stmt|;
name|source
operator|.
name|storeResource
argument_list|(
name|resSource
argument_list|)
expr_stmt|;
comment|//pre-create the destination and set writable by all
specifier|final
name|Collection
name|dest
init|=
name|cms
operator|.
name|createCollection
argument_list|(
literal|"copy-of-source"
argument_list|)
decl_stmt|;
name|UserManagementService
name|ums
init|=
operator|(
name|UserManagementService
operator|)
name|dest
operator|.
name|getService
argument_list|(
literal|"UserManagementService"
argument_list|,
literal|"1.0"
argument_list|)
decl_stmt|;
name|ums
operator|.
name|chmod
argument_list|(
literal|0777
argument_list|)
expr_stmt|;
comment|//pre-create a destination resource and set no access to group and others
name|Resource
name|resDestSource1
init|=
name|dest
operator|.
name|createResource
argument_list|(
literal|"source1.xml"
argument_list|,
name|XMLResource
operator|.
name|RESOURCE_TYPE
argument_list|)
decl_stmt|;
name|resDestSource1
operator|.
name|setContent
argument_list|(
literal|"<old/>"
argument_list|)
expr_stmt|;
name|dest
operator|.
name|storeResource
argument_list|(
name|resDestSource1
argument_list|)
expr_stmt|;
name|ums
operator|.
name|chmod
argument_list|(
name|resDestSource1
argument_list|,
literal|0700
argument_list|)
expr_stmt|;
comment|//as the 'test3' user copy the collection
name|test
operator|=
name|DatabaseManager
operator|.
name|getCollection
argument_list|(
name|getBaseUri
argument_list|()
operator|+
literal|"/db/securityTest3"
argument_list|,
literal|"test3"
argument_list|,
literal|"test3"
argument_list|)
expr_stmt|;
name|cms
operator|=
operator|(
name|CollectionManagementServiceImpl
operator|)
name|test
operator|.
name|getService
argument_list|(
literal|"CollectionManagementService"
argument_list|,
literal|"1.0"
argument_list|)
expr_stmt|;
name|cms
operator|.
name|copy
argument_list|(
literal|"/db/securityTest3/source"
argument_list|,
literal|"/db/securityTest3"
argument_list|,
literal|"copy-of-source"
argument_list|)
expr_stmt|;
specifier|final
name|Collection
name|copyOfSource
init|=
name|test
operator|.
name|getChildCollection
argument_list|(
literal|"copy-of-source"
argument_list|)
decl_stmt|;
name|assertNotNull
argument_list|(
name|copyOfSource
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|copyOfSource
operator|.
name|listResources
argument_list|()
operator|.
name|length
argument_list|)
expr_stmt|;
specifier|final
name|Resource
name|resCopyOfSource1
init|=
name|copyOfSource
operator|.
name|getResource
argument_list|(
literal|"source1.xml"
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|"<test1/>"
argument_list|,
name|resCopyOfSource1
operator|.
name|getContent
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
specifier|final
name|Resource
name|resCopyOfSource2
init|=
name|copyOfSource
operator|.
name|getResource
argument_list|(
literal|"source2.xml"
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|"<test2/>"
argument_list|,
name|resCopyOfSource2
operator|.
name|getContent
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
comment|//TODO check perms are/areNot preserved? on the replaced resource
block|}
annotation|@
name|Test
specifier|public
name|void
name|copyCollectionWithResources_withSubCollectionWithResource
parameter_list|()
throws|throws
name|XMLDBException
block|{
name|Collection
name|test
init|=
name|DatabaseManager
operator|.
name|getCollection
argument_list|(
name|getBaseUri
argument_list|()
operator|+
literal|"/db/securityTest3"
argument_list|,
literal|"test1"
argument_list|,
literal|"test1"
argument_list|)
decl_stmt|;
name|CollectionManagementServiceImpl
name|cms
init|=
operator|(
name|CollectionManagementServiceImpl
operator|)
name|test
operator|.
name|getService
argument_list|(
literal|"CollectionManagementService"
argument_list|,
literal|"1.0"
argument_list|)
decl_stmt|;
comment|//create collection owned by "test1", and group "users" in /db/securityTest3
name|Collection
name|source
init|=
name|cms
operator|.
name|createCollection
argument_list|(
literal|"source"
argument_list|)
decl_stmt|;
comment|//create resource owned by "test1", and group "users" in /db/securityTest3/source
name|Resource
name|resSource
init|=
name|source
operator|.
name|createResource
argument_list|(
literal|"source1.xml"
argument_list|,
name|XMLResource
operator|.
name|RESOURCE_TYPE
argument_list|)
decl_stmt|;
name|resSource
operator|.
name|setContent
argument_list|(
literal|"<test/>"
argument_list|)
expr_stmt|;
name|source
operator|.
name|storeResource
argument_list|(
name|resSource
argument_list|)
expr_stmt|;
name|resSource
operator|=
name|source
operator|.
name|createResource
argument_list|(
literal|"source2.xml"
argument_list|,
name|XMLResource
operator|.
name|RESOURCE_TYPE
argument_list|)
expr_stmt|;
name|resSource
operator|.
name|setContent
argument_list|(
literal|"<test/>"
argument_list|)
expr_stmt|;
name|source
operator|.
name|storeResource
argument_list|(
name|resSource
argument_list|)
expr_stmt|;
comment|//create sub-collection "sub" owned by "test1", and group "users" in /db/securityTest3/source
name|CollectionManagementService
name|cms1
init|=
operator|(
name|CollectionManagementServiceImpl
operator|)
name|source
operator|.
name|getService
argument_list|(
literal|"CollectionManagementService"
argument_list|,
literal|"1.0"
argument_list|)
decl_stmt|;
name|Collection
name|sub
init|=
name|cms1
operator|.
name|createCollection
argument_list|(
literal|"sub"
argument_list|)
decl_stmt|;
comment|//create resource owned by "test1", and group "users" in /db/securityTest3/source/sub1
name|Resource
name|resSub
init|=
name|sub
operator|.
name|createResource
argument_list|(
literal|"sub1.xml"
argument_list|,
name|XMLResource
operator|.
name|RESOURCE_TYPE
argument_list|)
decl_stmt|;
name|resSub
operator|.
name|setContent
argument_list|(
literal|"<test-sub/>"
argument_list|)
expr_stmt|;
name|sub
operator|.
name|storeResource
argument_list|(
name|resSub
argument_list|)
expr_stmt|;
comment|//as the 'test3' user copy the collection
name|test
operator|=
name|DatabaseManager
operator|.
name|getCollection
argument_list|(
name|getBaseUri
argument_list|()
operator|+
literal|"/db/securityTest3"
argument_list|,
literal|"test3"
argument_list|,
literal|"test3"
argument_list|)
expr_stmt|;
name|cms
operator|=
operator|(
name|CollectionManagementServiceImpl
operator|)
name|test
operator|.
name|getService
argument_list|(
literal|"CollectionManagementService"
argument_list|,
literal|"1.0"
argument_list|)
expr_stmt|;
name|cms
operator|.
name|copy
argument_list|(
literal|"/db/securityTest3/source"
argument_list|,
literal|"/db/securityTest3"
argument_list|,
literal|"copy-of-source"
argument_list|)
expr_stmt|;
specifier|final
name|Collection
name|copyOfSource
init|=
name|test
operator|.
name|getChildCollection
argument_list|(
literal|"copy-of-source"
argument_list|)
decl_stmt|;
name|assertNotNull
argument_list|(
name|copyOfSource
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|copyOfSource
operator|.
name|listResources
argument_list|()
operator|.
name|length
argument_list|)
expr_stmt|;
specifier|final
name|Collection
name|copyOfSub
init|=
name|copyOfSource
operator|.
name|getChildCollection
argument_list|(
literal|"sub"
argument_list|)
decl_stmt|;
name|assertNotNull
argument_list|(
name|copyOfSub
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|copyOfSub
operator|.
name|listResources
argument_list|()
operator|.
name|length
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|copyDocument_doesNotPreservePermissions
parameter_list|()
throws|throws
name|XMLDBException
block|{
name|Collection
name|test
init|=
name|DatabaseManager
operator|.
name|getCollection
argument_list|(
name|getBaseUri
argument_list|()
operator|+
literal|"/db/securityTest3"
argument_list|,
literal|"test1"
argument_list|,
literal|"test1"
argument_list|)
decl_stmt|;
name|CollectionManagementServiceImpl
name|cms
init|=
operator|(
name|CollectionManagementServiceImpl
operator|)
name|test
operator|.
name|getService
argument_list|(
literal|"CollectionManagementService"
argument_list|,
literal|"1.0"
argument_list|)
decl_stmt|;
comment|//create resource owned by "test1", and group "users" in /db/securityTest3
specifier|final
name|Resource
name|resSource
init|=
name|test
operator|.
name|createResource
argument_list|(
literal|"source.xml"
argument_list|,
name|XMLResource
operator|.
name|RESOURCE_TYPE
argument_list|)
decl_stmt|;
name|resSource
operator|.
name|setContent
argument_list|(
literal|"<test/>"
argument_list|)
expr_stmt|;
name|test
operator|.
name|storeResource
argument_list|(
name|resSource
argument_list|)
expr_stmt|;
comment|//as the 'test3' user copy the resource
name|test
operator|=
name|DatabaseManager
operator|.
name|getCollection
argument_list|(
name|getBaseUri
argument_list|()
operator|+
literal|"/db/securityTest3"
argument_list|,
literal|"test3"
argument_list|,
literal|"test3"
argument_list|)
expr_stmt|;
name|cms
operator|=
operator|(
name|CollectionManagementServiceImpl
operator|)
name|test
operator|.
name|getService
argument_list|(
literal|"CollectionManagementService"
argument_list|,
literal|"1.0"
argument_list|)
expr_stmt|;
name|cms
operator|.
name|copyResource
argument_list|(
literal|"/db/securityTest3/source.xml"
argument_list|,
literal|"/db/securityTest3"
argument_list|,
literal|"copy-of-source.xml"
argument_list|)
expr_stmt|;
specifier|final
name|UserManagementService
name|ums
init|=
operator|(
name|UserManagementService
operator|)
name|test
operator|.
name|getService
argument_list|(
literal|"UserManagementService"
argument_list|,
literal|"1.0"
argument_list|)
decl_stmt|;
specifier|final
name|Permission
name|permissions
init|=
name|ums
operator|.
name|getPermissions
argument_list|(
name|test
operator|.
name|getResource
argument_list|(
literal|"copy-of-source.xml"
argument_list|)
argument_list|)
decl_stmt|;
comment|//resource should be owned by test3:guest, i.e. permissions were not preserved from the test1 users doc /db/securityTest3/source.xml
name|assertEquals
argument_list|(
literal|"test3"
argument_list|,
name|permissions
operator|.
name|getOwner
argument_list|()
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"guest"
argument_list|,
name|permissions
operator|.
name|getGroup
argument_list|()
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|copyDocument_doesPreservePermissions_whenDestResourceExists
parameter_list|()
throws|throws
name|XMLDBException
block|{
name|Collection
name|test
init|=
name|DatabaseManager
operator|.
name|getCollection
argument_list|(
name|getBaseUri
argument_list|()
operator|+
literal|"/db/securityTest3"
argument_list|,
literal|"test1"
argument_list|,
literal|"test1"
argument_list|)
decl_stmt|;
name|CollectionManagementServiceImpl
name|cms
init|=
operator|(
name|CollectionManagementServiceImpl
operator|)
name|test
operator|.
name|getService
argument_list|(
literal|"CollectionManagementService"
argument_list|,
literal|"1.0"
argument_list|)
decl_stmt|;
comment|//create resource owned by "test1", and group "users" in /db/securityTest3
specifier|final
name|Resource
name|resSource
init|=
name|test
operator|.
name|createResource
argument_list|(
literal|"source.xml"
argument_list|,
name|XMLResource
operator|.
name|RESOURCE_TYPE
argument_list|)
decl_stmt|;
name|resSource
operator|.
name|setContent
argument_list|(
literal|"<test/>"
argument_list|)
expr_stmt|;
name|test
operator|.
name|storeResource
argument_list|(
name|resSource
argument_list|)
expr_stmt|;
comment|//pre-create the dest resource (before the copy) and set writable by all
specifier|final
name|Resource
name|resDest
init|=
name|test
operator|.
name|createResource
argument_list|(
literal|"copy-of-source.xml"
argument_list|,
name|XMLResource
operator|.
name|RESOURCE_TYPE
argument_list|)
decl_stmt|;
name|resDest
operator|.
name|setContent
argument_list|(
literal|"<old/>"
argument_list|)
expr_stmt|;
name|test
operator|.
name|storeResource
argument_list|(
name|resDest
argument_list|)
expr_stmt|;
name|UserManagementService
name|ums
init|=
operator|(
name|UserManagementService
operator|)
name|test
operator|.
name|getService
argument_list|(
literal|"UserManagementService"
argument_list|,
literal|"1.0"
argument_list|)
decl_stmt|;
name|ums
operator|.
name|chmod
argument_list|(
name|resDest
argument_list|,
literal|0777
argument_list|)
expr_stmt|;
comment|//as the 'test3' user copy the resource
name|test
operator|=
name|DatabaseManager
operator|.
name|getCollection
argument_list|(
name|getBaseUri
argument_list|()
operator|+
literal|"/db/securityTest3"
argument_list|,
literal|"test3"
argument_list|,
literal|"test3"
argument_list|)
expr_stmt|;
name|cms
operator|=
operator|(
name|CollectionManagementServiceImpl
operator|)
name|test
operator|.
name|getService
argument_list|(
literal|"CollectionManagementService"
argument_list|,
literal|"1.0"
argument_list|)
expr_stmt|;
name|cms
operator|.
name|copyResource
argument_list|(
literal|"/db/securityTest3/source.xml"
argument_list|,
literal|"/db/securityTest3"
argument_list|,
literal|"copy-of-source.xml"
argument_list|)
expr_stmt|;
comment|//as test3 user!
name|ums
operator|=
operator|(
name|UserManagementService
operator|)
name|test
operator|.
name|getService
argument_list|(
literal|"UserManagementService"
argument_list|,
literal|"1.0"
argument_list|)
expr_stmt|;
specifier|final
name|Permission
name|permissions
init|=
name|ums
operator|.
name|getPermissions
argument_list|(
name|test
operator|.
name|getResource
argument_list|(
literal|"copy-of-source.xml"
argument_list|)
argument_list|)
decl_stmt|;
comment|//resource should be owned by test3:guest, i.e. permissions were not preserved from the test1 users doc /db/securityTest3/source.xml
name|assertEquals
argument_list|(
literal|"test1"
argument_list|,
name|permissions
operator|.
name|getOwner
argument_list|()
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"users"
argument_list|,
name|permissions
operator|.
name|getGroup
argument_list|()
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
comment|//TODO copy collection should do the same??!?
block|}
annotation|@
name|Test
specifier|public
name|void
name|copyCollection_doesNotPreservePermissions
parameter_list|()
throws|throws
name|XMLDBException
block|{
name|Collection
name|test
init|=
name|DatabaseManager
operator|.
name|getCollection
argument_list|(
name|getBaseUri
argument_list|()
operator|+
literal|"/db/securityTest3"
argument_list|,
literal|"test1"
argument_list|,
literal|"test1"
argument_list|)
decl_stmt|;
name|CollectionManagementServiceImpl
name|cms
init|=
operator|(
name|CollectionManagementServiceImpl
operator|)
name|test
operator|.
name|getService
argument_list|(
literal|"CollectionManagementService"
argument_list|,
literal|"1.0"
argument_list|)
decl_stmt|;
comment|//create collection owned by "test1", and group "users" in /db/securityTest3
name|Collection
name|source
init|=
name|cms
operator|.
name|createCollection
argument_list|(
literal|"source"
argument_list|)
decl_stmt|;
comment|//as the 'test3' user copy the collection
name|test
operator|=
name|DatabaseManager
operator|.
name|getCollection
argument_list|(
name|getBaseUri
argument_list|()
operator|+
literal|"/db/securityTest3"
argument_list|,
literal|"test3"
argument_list|,
literal|"test3"
argument_list|)
expr_stmt|;
name|cms
operator|=
operator|(
name|CollectionManagementServiceImpl
operator|)
name|test
operator|.
name|getService
argument_list|(
literal|"CollectionManagementService"
argument_list|,
literal|"1.0"
argument_list|)
expr_stmt|;
name|cms
operator|.
name|copy
argument_list|(
literal|"/db/securityTest3/source"
argument_list|,
literal|"/db/securityTest3"
argument_list|,
literal|"copy-of-source"
argument_list|)
expr_stmt|;
specifier|final
name|UserManagementService
name|ums
init|=
operator|(
name|UserManagementService
operator|)
name|test
operator|.
name|getService
argument_list|(
literal|"UserManagementService"
argument_list|,
literal|"1.0"
argument_list|)
decl_stmt|;
specifier|final
name|Permission
name|permissions
init|=
name|ums
operator|.
name|getPermissions
argument_list|(
name|test
operator|.
name|getChildCollection
argument_list|(
literal|"copy-of-source"
argument_list|)
argument_list|)
decl_stmt|;
comment|//collection should be owned by test3:guest, i.e. permissions were not preserved from the test1 users collection /db/securityTest3/source
name|assertEquals
argument_list|(
literal|"test3"
argument_list|,
name|permissions
operator|.
name|getOwner
argument_list|()
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"guest"
argument_list|,
name|permissions
operator|.
name|getGroup
argument_list|()
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|copyCollection_doesPreservePermissions_whenDestCollectionExists
parameter_list|()
throws|throws
name|XMLDBException
block|{
name|Collection
name|test
init|=
name|DatabaseManager
operator|.
name|getCollection
argument_list|(
name|getBaseUri
argument_list|()
operator|+
literal|"/db/securityTest3"
argument_list|,
literal|"test1"
argument_list|,
literal|"test1"
argument_list|)
decl_stmt|;
name|CollectionManagementServiceImpl
name|cms
init|=
operator|(
name|CollectionManagementServiceImpl
operator|)
name|test
operator|.
name|getService
argument_list|(
literal|"CollectionManagementService"
argument_list|,
literal|"1.0"
argument_list|)
decl_stmt|;
comment|//create collection owned by "test1", and group "users" in /db/securityTest3
name|Collection
name|source
init|=
name|cms
operator|.
name|createCollection
argument_list|(
literal|"source"
argument_list|)
decl_stmt|;
comment|//pre-create the dest collection and grant access to all (0777)
name|Collection
name|dest
init|=
name|cms
operator|.
name|createCollection
argument_list|(
literal|"copy-of-source"
argument_list|)
decl_stmt|;
name|UserManagementService
name|ums
init|=
operator|(
name|UserManagementService
operator|)
name|dest
operator|.
name|getService
argument_list|(
literal|"UserManagementService"
argument_list|,
literal|"1.0"
argument_list|)
decl_stmt|;
name|ums
operator|.
name|chmod
argument_list|(
literal|0777
argument_list|)
expr_stmt|;
comment|//as the 'test3' user copy the collection
name|test
operator|=
name|DatabaseManager
operator|.
name|getCollection
argument_list|(
name|getBaseUri
argument_list|()
operator|+
literal|"/db/securityTest3"
argument_list|,
literal|"test3"
argument_list|,
literal|"test3"
argument_list|)
expr_stmt|;
name|cms
operator|=
operator|(
name|CollectionManagementServiceImpl
operator|)
name|test
operator|.
name|getService
argument_list|(
literal|"CollectionManagementService"
argument_list|,
literal|"1.0"
argument_list|)
expr_stmt|;
name|cms
operator|.
name|copy
argument_list|(
literal|"/db/securityTest3/source"
argument_list|,
literal|"/db/securityTest3"
argument_list|,
literal|"copy-of-source"
argument_list|)
expr_stmt|;
comment|//re-get ums as 'test3' user
name|ums
operator|=
operator|(
name|UserManagementService
operator|)
name|test
operator|.
name|getService
argument_list|(
literal|"UserManagementService"
argument_list|,
literal|"1.0"
argument_list|)
expr_stmt|;
specifier|final
name|Permission
name|permissions
init|=
name|ums
operator|.
name|getPermissions
argument_list|(
name|test
operator|.
name|getChildCollection
argument_list|(
literal|"copy-of-source"
argument_list|)
argument_list|)
decl_stmt|;
comment|//collection should STILL be owned by test1:users, i.e. permissions were preserved from the test1 users collection /db/securityTest3/copy-of-source
name|assertEquals
argument_list|(
literal|"test1"
argument_list|,
name|permissions
operator|.
name|getOwner
argument_list|()
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"users"
argument_list|,
name|permissions
operator|.
name|getGroup
argument_list|()
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|copyCollection_doesPreservePermissionsOfSubDocuments
parameter_list|()
throws|throws
name|XMLDBException
block|{
specifier|final
name|Collection
name|test
init|=
name|DatabaseManager
operator|.
name|getCollection
argument_list|(
name|getBaseUri
argument_list|()
operator|+
literal|"/db/securityTest1"
argument_list|,
literal|"test1"
argument_list|,
literal|"test1"
argument_list|)
decl_stmt|;
name|CollectionManagementServiceImpl
name|cms
init|=
operator|(
name|CollectionManagementServiceImpl
operator|)
name|test
operator|.
name|getService
argument_list|(
literal|"CollectionManagementService"
argument_list|,
literal|"1.0"
argument_list|)
decl_stmt|;
name|cms
operator|.
name|copy
argument_list|(
name|XmldbURI
operator|.
name|create
argument_list|(
literal|"/db/securityTest1"
argument_list|)
argument_list|,
name|XmldbURI
operator|.
name|create
argument_list|(
literal|"/db/securityTest3"
argument_list|)
argument_list|,
name|XmldbURI
operator|.
name|create
argument_list|(
literal|"copy-of-securityTest1"
argument_list|)
argument_list|)
expr_stmt|;
specifier|final
name|Collection
name|testCopy
init|=
name|DatabaseManager
operator|.
name|getCollection
argument_list|(
name|getBaseUri
argument_list|()
operator|+
literal|"/db/securityTest3/copy-of-securityTest1"
argument_list|,
literal|"test1"
argument_list|,
literal|"test1"
argument_list|)
decl_stmt|;
specifier|final
name|UserManagementService
name|ums
init|=
operator|(
name|UserManagementService
operator|)
name|testCopy
operator|.
name|getService
argument_list|(
literal|"UserManagementService"
argument_list|,
literal|"1.0"
argument_list|)
decl_stmt|;
specifier|final
name|Resource
name|resource
init|=
name|testCopy
operator|.
name|getResource
argument_list|(
literal|"test.xml"
argument_list|)
decl_stmt|;
specifier|final
name|Permission
name|permissions
init|=
name|ums
operator|.
name|getPermissions
argument_list|(
name|resource
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|"test1"
argument_list|,
name|permissions
operator|.
name|getOwner
argument_list|()
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"users"
argument_list|,
name|permissions
operator|.
name|getGroup
argument_list|()
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0770
argument_list|,
name|permissions
operator|.
name|getMode
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|copyCollection_doesPreservePermissionsOfSubCollections
parameter_list|()
throws|throws
name|XMLDBException
block|{
specifier|final
name|Collection
name|test
init|=
name|DatabaseManager
operator|.
name|getCollection
argument_list|(
name|getBaseUri
argument_list|()
operator|+
literal|"/db/securityTest1"
argument_list|,
literal|"test1"
argument_list|,
literal|"test1"
argument_list|)
decl_stmt|;
name|CollectionManagementServiceImpl
name|cms
init|=
operator|(
name|CollectionManagementServiceImpl
operator|)
name|test
operator|.
name|getService
argument_list|(
literal|"CollectionManagementService"
argument_list|,
literal|"1.0"
argument_list|)
decl_stmt|;
name|cms
operator|.
name|copy
argument_list|(
name|XmldbURI
operator|.
name|create
argument_list|(
literal|"/db/securityTest1"
argument_list|)
argument_list|,
name|XmldbURI
operator|.
name|create
argument_list|(
literal|"/db/securityTest3"
argument_list|)
argument_list|,
name|XmldbURI
operator|.
name|create
argument_list|(
literal|"copy-of-securityTest1"
argument_list|)
argument_list|)
expr_stmt|;
specifier|final
name|Collection
name|testCopy
init|=
name|DatabaseManager
operator|.
name|getCollection
argument_list|(
name|getBaseUri
argument_list|()
operator|+
literal|"/db/securityTest3/copy-of-securityTest1"
argument_list|,
literal|"test1"
argument_list|,
literal|"test1"
argument_list|)
decl_stmt|;
specifier|final
name|Collection
name|sub1
init|=
name|testCopy
operator|.
name|getChildCollection
argument_list|(
literal|"sub1"
argument_list|)
decl_stmt|;
specifier|final
name|UserManagementService
name|ums
init|=
operator|(
name|UserManagementService
operator|)
name|sub1
operator|.
name|getService
argument_list|(
literal|"UserManagementService"
argument_list|,
literal|"1.0"
argument_list|)
decl_stmt|;
specifier|final
name|Permission
name|permissions
init|=
name|ums
operator|.
name|getPermissions
argument_list|(
name|sub1
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|"test1"
argument_list|,
name|permissions
operator|.
name|getOwner
argument_list|()
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"users"
argument_list|,
name|permissions
operator|.
name|getGroup
argument_list|()
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0777
argument_list|,
name|permissions
operator|.
name|getMode
argument_list|()
argument_list|)
expr_stmt|;
block|}
comment|/**      * As the 'test1' user, creates the collection and resource:      *      *  test1:users /db/securityTest3/source      *  test1:users /db/securityTest3/source/source.xml      *      *      * As the 'test3' user, copy the collection:      *      *  /db/securityTest3/source      *      -> /db/securityTest3/copy-of-source      */
annotation|@
name|Test
specifier|public
name|void
name|copyCollectionWithResource_doesNotPreservePermissions
parameter_list|()
throws|throws
name|XMLDBException
block|{
name|Collection
name|test
init|=
name|DatabaseManager
operator|.
name|getCollection
argument_list|(
name|getBaseUri
argument_list|()
operator|+
literal|"/db/securityTest3"
argument_list|,
literal|"test1"
argument_list|,
literal|"test1"
argument_list|)
decl_stmt|;
name|CollectionManagementServiceImpl
name|cms
init|=
operator|(
name|CollectionManagementServiceImpl
operator|)
name|test
operator|.
name|getService
argument_list|(
literal|"CollectionManagementService"
argument_list|,
literal|"1.0"
argument_list|)
decl_stmt|;
comment|//create collection owned by "test1", and group "users" in /db/securityTest3
name|Collection
name|source
init|=
name|cms
operator|.
name|createCollection
argument_list|(
literal|"source"
argument_list|)
decl_stmt|;
comment|//create resource owned by "test1", and group "users" in /db/securityTest3/source
specifier|final
name|Resource
name|resSource
init|=
name|source
operator|.
name|createResource
argument_list|(
literal|"source.xml"
argument_list|,
name|XMLResource
operator|.
name|RESOURCE_TYPE
argument_list|)
decl_stmt|;
name|resSource
operator|.
name|setContent
argument_list|(
literal|"<test/>"
argument_list|)
expr_stmt|;
name|source
operator|.
name|storeResource
argument_list|(
name|resSource
argument_list|)
expr_stmt|;
comment|//as the 'test3' user copy the collection
name|test
operator|=
name|DatabaseManager
operator|.
name|getCollection
argument_list|(
name|getBaseUri
argument_list|()
operator|+
literal|"/db/securityTest3"
argument_list|,
literal|"test3"
argument_list|,
literal|"test3"
argument_list|)
expr_stmt|;
name|cms
operator|=
operator|(
name|CollectionManagementServiceImpl
operator|)
name|test
operator|.
name|getService
argument_list|(
literal|"CollectionManagementService"
argument_list|,
literal|"1.0"
argument_list|)
expr_stmt|;
name|cms
operator|.
name|copy
argument_list|(
literal|"/db/securityTest3/source"
argument_list|,
literal|"/db/securityTest3"
argument_list|,
literal|"copy-of-source"
argument_list|)
expr_stmt|;
name|UserManagementService
name|ums
init|=
operator|(
name|UserManagementService
operator|)
name|test
operator|.
name|getService
argument_list|(
literal|"UserManagementService"
argument_list|,
literal|"1.0"
argument_list|)
decl_stmt|;
specifier|final
name|Collection
name|copyOfSource
init|=
name|test
operator|.
name|getChildCollection
argument_list|(
literal|"copy-of-source"
argument_list|)
decl_stmt|;
name|Permission
name|permissions
init|=
name|ums
operator|.
name|getPermissions
argument_list|(
name|copyOfSource
argument_list|)
decl_stmt|;
comment|//collection should be owned by test3:guest, i.e. permissions were not preserved from the test1 users doc /db/securityTest3/source
name|assertEquals
argument_list|(
literal|"test3"
argument_list|,
name|permissions
operator|.
name|getOwner
argument_list|()
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"guest"
argument_list|,
name|permissions
operator|.
name|getGroup
argument_list|()
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
name|ums
operator|=
operator|(
name|UserManagementService
operator|)
name|copyOfSource
operator|.
name|getService
argument_list|(
literal|"UserManagementService"
argument_list|,
literal|"1.0"
argument_list|)
expr_stmt|;
specifier|final
name|Resource
name|resCopyOfSource
init|=
name|copyOfSource
operator|.
name|getResource
argument_list|(
literal|"source.xml"
argument_list|)
decl_stmt|;
name|permissions
operator|=
name|ums
operator|.
name|getPermissions
argument_list|(
name|resCopyOfSource
argument_list|)
expr_stmt|;
comment|//resource in collection should be owned by test3:guest, i.e. permissions were not preserved from the test1 users doc /db/securityTest3/source.xml
name|assertEquals
argument_list|(
literal|"test3"
argument_list|,
name|permissions
operator|.
name|getOwner
argument_list|()
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"guest"
argument_list|,
name|permissions
operator|.
name|getGroup
argument_list|()
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
block|}
comment|/**      * As the 'test1' user, creates the collection and resource:      *      *  test1:users /db/securityTest3/source      *  test1:users /db/securityTest3/source/source1.xml      *  test1:users /db/securityTest3/source/source2.xml      *  test1:users /db/securityTest3/source/sub      *  test1:users /db/securityTest3/source/sub/sub1.xml      *      *      * As the 'test3' user, copy the collection:      *      *  /db/securityTest3/source      *      -> /db/securityTest3/copy-of-source      */
annotation|@
name|Test
specifier|public
name|void
name|copyCollectionWithResources_withSubCollectionWithResource_doesNotPreservePermissions
parameter_list|()
throws|throws
name|XMLDBException
block|{
name|Collection
name|test
init|=
name|DatabaseManager
operator|.
name|getCollection
argument_list|(
name|getBaseUri
argument_list|()
operator|+
literal|"/db/securityTest3"
argument_list|,
literal|"test1"
argument_list|,
literal|"test1"
argument_list|)
decl_stmt|;
name|CollectionManagementServiceImpl
name|cms
init|=
operator|(
name|CollectionManagementServiceImpl
operator|)
name|test
operator|.
name|getService
argument_list|(
literal|"CollectionManagementService"
argument_list|,
literal|"1.0"
argument_list|)
decl_stmt|;
comment|//create collection owned by "test1", and group "users" in /db/securityTest3
name|Collection
name|source
init|=
name|cms
operator|.
name|createCollection
argument_list|(
literal|"source"
argument_list|)
decl_stmt|;
comment|//create resource owned by "test1", and group "users" in /db/securityTest3/source
name|Resource
name|resSource
init|=
name|source
operator|.
name|createResource
argument_list|(
literal|"source1.xml"
argument_list|,
name|XMLResource
operator|.
name|RESOURCE_TYPE
argument_list|)
decl_stmt|;
name|resSource
operator|.
name|setContent
argument_list|(
literal|"<test/>"
argument_list|)
expr_stmt|;
name|source
operator|.
name|storeResource
argument_list|(
name|resSource
argument_list|)
expr_stmt|;
name|resSource
operator|=
name|source
operator|.
name|createResource
argument_list|(
literal|"source2.xml"
argument_list|,
name|XMLResource
operator|.
name|RESOURCE_TYPE
argument_list|)
expr_stmt|;
name|resSource
operator|.
name|setContent
argument_list|(
literal|"<test/>"
argument_list|)
expr_stmt|;
name|source
operator|.
name|storeResource
argument_list|(
name|resSource
argument_list|)
expr_stmt|;
comment|//create sub-collection "sub" owned by "test1", and group "users" in /db/securityTest3/source
name|CollectionManagementService
name|cms1
init|=
operator|(
name|CollectionManagementServiceImpl
operator|)
name|source
operator|.
name|getService
argument_list|(
literal|"CollectionManagementService"
argument_list|,
literal|"1.0"
argument_list|)
decl_stmt|;
name|Collection
name|sub
init|=
name|cms1
operator|.
name|createCollection
argument_list|(
literal|"sub"
argument_list|)
decl_stmt|;
comment|//create resource owned by "test1", and group "users" in /db/securityTest3/source/sub1
name|Resource
name|resSub
init|=
name|sub
operator|.
name|createResource
argument_list|(
literal|"sub1.xml"
argument_list|,
name|XMLResource
operator|.
name|RESOURCE_TYPE
argument_list|)
decl_stmt|;
name|resSub
operator|.
name|setContent
argument_list|(
literal|"<test-sub/>"
argument_list|)
expr_stmt|;
name|sub
operator|.
name|storeResource
argument_list|(
name|resSub
argument_list|)
expr_stmt|;
comment|//as the 'test3' user copy the collection
name|test
operator|=
name|DatabaseManager
operator|.
name|getCollection
argument_list|(
name|getBaseUri
argument_list|()
operator|+
literal|"/db/securityTest3"
argument_list|,
literal|"test3"
argument_list|,
literal|"test3"
argument_list|)
expr_stmt|;
name|cms
operator|=
operator|(
name|CollectionManagementServiceImpl
operator|)
name|test
operator|.
name|getService
argument_list|(
literal|"CollectionManagementService"
argument_list|,
literal|"1.0"
argument_list|)
expr_stmt|;
name|cms
operator|.
name|copy
argument_list|(
literal|"/db/securityTest3/source"
argument_list|,
literal|"/db/securityTest3"
argument_list|,
literal|"copy-of-source"
argument_list|)
expr_stmt|;
specifier|final
name|Collection
name|copyOfSource
init|=
name|test
operator|.
name|getChildCollection
argument_list|(
literal|"copy-of-source"
argument_list|)
decl_stmt|;
name|assertNotNull
argument_list|(
name|copyOfSource
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|copyOfSource
operator|.
name|listResources
argument_list|()
operator|.
name|length
argument_list|)
expr_stmt|;
specifier|final
name|Collection
name|copyOfSub
init|=
name|copyOfSource
operator|.
name|getChildCollection
argument_list|(
literal|"sub"
argument_list|)
decl_stmt|;
name|assertNotNull
argument_list|(
name|copyOfSub
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|copyOfSub
operator|.
name|listResources
argument_list|()
operator|.
name|length
argument_list|)
expr_stmt|;
comment|//collection should be owned by test3:guest, i.e. permissions were not preserved from the test1 users doc /db/securityTest3/source
name|UserManagementService
name|ums
init|=
operator|(
name|UserManagementService
operator|)
name|test
operator|.
name|getService
argument_list|(
literal|"UserManagementService"
argument_list|,
literal|"1.0"
argument_list|)
decl_stmt|;
name|Permission
name|permissions
init|=
name|ums
operator|.
name|getPermissions
argument_list|(
name|copyOfSource
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|"test3"
argument_list|,
name|permissions
operator|.
name|getOwner
argument_list|()
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"guest"
argument_list|,
name|permissions
operator|.
name|getGroup
argument_list|()
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
comment|//resource in collection should be owned by test3:guest, i.e. permissions were not preserved from the test1 users doc /db/securityTest3/source/source1.xml
name|ums
operator|=
operator|(
name|UserManagementService
operator|)
name|copyOfSource
operator|.
name|getService
argument_list|(
literal|"UserManagementService"
argument_list|,
literal|"1.0"
argument_list|)
expr_stmt|;
specifier|final
name|Resource
name|resCopyOfSource1
init|=
name|copyOfSource
operator|.
name|getResource
argument_list|(
literal|"source1.xml"
argument_list|)
decl_stmt|;
name|permissions
operator|=
name|ums
operator|.
name|getPermissions
argument_list|(
name|resCopyOfSource1
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"test3"
argument_list|,
name|permissions
operator|.
name|getOwner
argument_list|()
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"guest"
argument_list|,
name|permissions
operator|.
name|getGroup
argument_list|()
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
comment|//resource in collection should be owned by test3:guest, i.e. permissions were not preserved from the test1 users doc /db/securityTest3/source/source2.xml
specifier|final
name|Resource
name|resCopyOfSource2
init|=
name|copyOfSource
operator|.
name|getResource
argument_list|(
literal|"source2.xml"
argument_list|)
decl_stmt|;
name|permissions
operator|=
name|ums
operator|.
name|getPermissions
argument_list|(
name|resCopyOfSource2
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"test3"
argument_list|,
name|permissions
operator|.
name|getOwner
argument_list|()
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"guest"
argument_list|,
name|permissions
operator|.
name|getGroup
argument_list|()
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
comment|//sub-collection should be owned by test3:guest, i.e. permissions were not preserved from the test1 users doc /db/securityTest3/source/sub
name|ums
operator|=
operator|(
name|UserManagementService
operator|)
name|copyOfSub
operator|.
name|getService
argument_list|(
literal|"UserManagementService"
argument_list|,
literal|"1.0"
argument_list|)
expr_stmt|;
name|permissions
operator|=
name|ums
operator|.
name|getPermissions
argument_list|(
name|copyOfSub
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"test3"
argument_list|,
name|permissions
operator|.
name|getOwner
argument_list|()
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"guest"
argument_list|,
name|permissions
operator|.
name|getGroup
argument_list|()
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
comment|//sub-collection/resource should be owned by test3:guest, i.e. permissions were not preserved from the test1 users doc /db/securityTest3/source/sub/sub1.xml
specifier|final
name|Resource
name|resCopyOfSub1
init|=
name|copyOfSub
operator|.
name|getResource
argument_list|(
literal|"sub1.xml"
argument_list|)
decl_stmt|;
name|permissions
operator|=
name|ums
operator|.
name|getPermissions
argument_list|(
name|resCopyOfSub1
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"test3"
argument_list|,
name|permissions
operator|.
name|getOwner
argument_list|()
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"guest"
argument_list|,
name|permissions
operator|.
name|getGroup
argument_list|()
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
block|}
comment|/**      * As the 'test1' user, creates the collection and resource:      *      *  test1:users /db/securityTest3/source      *  test1:users /db/securityTest3/source/source1.xml      *  test1:users /db/securityTest3/source/source2.xml      *      * We then also create the Collection      *  test1:users /db/securityTest3/copy-of-source (0777)      * so that the destination (for the copy we are about      * to do) already exists and is writable.      * We then create the resource      *  test1:users /db/securityTest/copy-of-source/source1.xml      * and set it so that it is writable by all (0777)...      *       * As the 'test3' user, copy the collection:      *      *  /db/securityTest3/source      *      -> /db/securityTest3/copy-of-source      *       * The test should prove that during a copy, existing      * documents in the dest are replaced as long as the      * dest collection has write permission and that the      * permissions on the dest resource must also be writable      * and that the existing permissions on the dest      * resource will be preserved      */
annotation|@
name|Test
specifier|public
name|void
name|copyCollectionWithResources_destResourceExists_destResourceIsWritable_preservePermissions
parameter_list|()
throws|throws
name|XMLDBException
block|{
name|Collection
name|test
init|=
name|DatabaseManager
operator|.
name|getCollection
argument_list|(
name|getBaseUri
argument_list|()
operator|+
literal|"/db/securityTest3"
argument_list|,
literal|"test1"
argument_list|,
literal|"test1"
argument_list|)
decl_stmt|;
name|CollectionManagementServiceImpl
name|cms
init|=
operator|(
name|CollectionManagementServiceImpl
operator|)
name|test
operator|.
name|getService
argument_list|(
literal|"CollectionManagementService"
argument_list|,
literal|"1.0"
argument_list|)
decl_stmt|;
comment|//create collection owned by "test1", and group "users" in /db/securityTest3
name|Collection
name|source
init|=
name|cms
operator|.
name|createCollection
argument_list|(
literal|"source"
argument_list|)
decl_stmt|;
comment|//create resource owned by "test1", and group "users" in /db/securityTest3/source
name|Resource
name|resSource
init|=
name|source
operator|.
name|createResource
argument_list|(
literal|"source1.xml"
argument_list|,
name|XMLResource
operator|.
name|RESOURCE_TYPE
argument_list|)
decl_stmt|;
name|resSource
operator|.
name|setContent
argument_list|(
literal|"<test1/>"
argument_list|)
expr_stmt|;
name|source
operator|.
name|storeResource
argument_list|(
name|resSource
argument_list|)
expr_stmt|;
name|resSource
operator|=
name|source
operator|.
name|createResource
argument_list|(
literal|"source2.xml"
argument_list|,
name|XMLResource
operator|.
name|RESOURCE_TYPE
argument_list|)
expr_stmt|;
name|resSource
operator|.
name|setContent
argument_list|(
literal|"<test2/>"
argument_list|)
expr_stmt|;
name|source
operator|.
name|storeResource
argument_list|(
name|resSource
argument_list|)
expr_stmt|;
comment|//pre-create the destination and set writable by all
specifier|final
name|Collection
name|dest
init|=
name|cms
operator|.
name|createCollection
argument_list|(
literal|"copy-of-source"
argument_list|)
decl_stmt|;
name|UserManagementService
name|ums
init|=
operator|(
name|UserManagementService
operator|)
name|dest
operator|.
name|getService
argument_list|(
literal|"UserManagementService"
argument_list|,
literal|"1.0"
argument_list|)
decl_stmt|;
name|ums
operator|.
name|chmod
argument_list|(
literal|0777
argument_list|)
expr_stmt|;
comment|//pre-create a destination resource and set access for all
name|Resource
name|resDestSource1
init|=
name|dest
operator|.
name|createResource
argument_list|(
literal|"source1.xml"
argument_list|,
name|XMLResource
operator|.
name|RESOURCE_TYPE
argument_list|)
decl_stmt|;
name|resDestSource1
operator|.
name|setContent
argument_list|(
literal|"<old/>"
argument_list|)
expr_stmt|;
name|dest
operator|.
name|storeResource
argument_list|(
name|resDestSource1
argument_list|)
expr_stmt|;
name|ums
operator|.
name|chmod
argument_list|(
name|resDestSource1
argument_list|,
literal|0777
argument_list|)
expr_stmt|;
comment|//as the 'test3' user copy the collection
name|test
operator|=
name|DatabaseManager
operator|.
name|getCollection
argument_list|(
name|getBaseUri
argument_list|()
operator|+
literal|"/db/securityTest3"
argument_list|,
literal|"test3"
argument_list|,
literal|"test3"
argument_list|)
expr_stmt|;
name|cms
operator|=
operator|(
name|CollectionManagementServiceImpl
operator|)
name|test
operator|.
name|getService
argument_list|(
literal|"CollectionManagementService"
argument_list|,
literal|"1.0"
argument_list|)
expr_stmt|;
name|cms
operator|.
name|copy
argument_list|(
literal|"/db/securityTest3/source"
argument_list|,
literal|"/db/securityTest3"
argument_list|,
literal|"copy-of-source"
argument_list|)
expr_stmt|;
specifier|final
name|Collection
name|copyOfSource
init|=
name|test
operator|.
name|getChildCollection
argument_list|(
literal|"copy-of-source"
argument_list|)
decl_stmt|;
name|assertNotNull
argument_list|(
name|copyOfSource
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|copyOfSource
operator|.
name|listResources
argument_list|()
operator|.
name|length
argument_list|)
expr_stmt|;
name|ums
operator|=
operator|(
name|UserManagementService
operator|)
name|copyOfSource
operator|.
name|getService
argument_list|(
literal|"UserManagementService"
argument_list|,
literal|"1.0"
argument_list|)
expr_stmt|;
comment|//permissions should NOT have changed as the dest already existed!
name|Permission
name|permissions
init|=
name|ums
operator|.
name|getPermissions
argument_list|(
name|copyOfSource
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|"test1"
argument_list|,
name|permissions
operator|.
name|getOwner
argument_list|()
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"users"
argument_list|,
name|permissions
operator|.
name|getGroup
argument_list|()
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
specifier|final
name|Resource
name|resCopyOfSource1
init|=
name|copyOfSource
operator|.
name|getResource
argument_list|(
literal|"source1.xml"
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|"<test1/>"
argument_list|,
name|resCopyOfSource1
operator|.
name|getContent
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
comment|//permissions should NOT have changed as the dest resource already existed!
name|permissions
operator|=
name|ums
operator|.
name|getPermissions
argument_list|(
name|resCopyOfSource1
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"test1"
argument_list|,
name|permissions
operator|.
name|getOwner
argument_list|()
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"users"
argument_list|,
name|permissions
operator|.
name|getGroup
argument_list|()
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
specifier|final
name|Resource
name|resCopyOfSource2
init|=
name|copyOfSource
operator|.
name|getResource
argument_list|(
literal|"source2.xml"
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|"<test2/>"
argument_list|,
name|resCopyOfSource2
operator|.
name|getContent
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
comment|//permissions SHOULD have changed as the dest resource is did NOT exist
name|permissions
operator|=
name|ums
operator|.
name|getPermissions
argument_list|(
name|resCopyOfSource2
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"test3"
argument_list|,
name|permissions
operator|.
name|getOwner
argument_list|()
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"guest"
argument_list|,
name|permissions
operator|.
name|getGroup
argument_list|()
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|setUidXQueryCanWriteRestrictedCollection
parameter_list|()
throws|throws
name|XMLDBException
block|{
specifier|final
name|Collection
name|test
init|=
name|DatabaseManager
operator|.
name|getCollection
argument_list|(
name|getBaseUri
argument_list|()
operator|+
literal|"/db/securityTest1"
argument_list|,
literal|"test1"
argument_list|,
literal|"test1"
argument_list|)
decl_stmt|;
specifier|final
name|long
name|timestamp
init|=
name|System
operator|.
name|currentTimeMillis
argument_list|()
decl_stmt|;
specifier|final
name|String
name|content
init|=
literal|"<setuid>"
operator|+
name|timestamp
operator|+
literal|"</setuid>"
decl_stmt|;
comment|//create an XQuery /db/securityTest1/setuid.xquery
specifier|final
name|String
name|xquery
init|=
literal|"xmldb:store('/db/securityTest1/forSetUidWrite', 'setuid.xml', "
operator|+
name|content
operator|+
literal|")"
decl_stmt|;
name|Resource
name|xqueryResource
init|=
name|test
operator|.
name|createResource
argument_list|(
literal|"setuid.xquery"
argument_list|,
literal|"BinaryResource"
argument_list|)
decl_stmt|;
name|xqueryResource
operator|.
name|setContent
argument_list|(
name|xquery
argument_list|)
expr_stmt|;
name|test
operator|.
name|storeResource
argument_list|(
name|xqueryResource
argument_list|)
expr_stmt|;
comment|//set the xquery to be owned by 'test1' and set it 'setuid', and set it 'rx' by 'users' group so 'test2' can execute it!
name|UserManagementService
name|ums
init|=
operator|(
name|UserManagementService
operator|)
name|test
operator|.
name|getService
argument_list|(
literal|"UserManagementService"
argument_list|,
literal|"1.0"
argument_list|)
decl_stmt|;
name|xqueryResource
operator|=
name|test
operator|.
name|getResource
argument_list|(
literal|"setuid.xquery"
argument_list|)
expr_stmt|;
name|ums
operator|.
name|chmod
argument_list|(
name|xqueryResource
argument_list|,
literal|04750
argument_list|)
expr_stmt|;
comment|//create a collection for the XQuery to write into
specifier|final
name|CollectionManagementService
name|cms
init|=
operator|(
name|CollectionManagementService
operator|)
name|test
operator|.
name|getService
argument_list|(
literal|"CollectionManagementService"
argument_list|,
literal|"1.0"
argument_list|)
decl_stmt|;
specifier|final
name|Collection
name|colForSetUid
init|=
name|cms
operator|.
name|createCollection
argument_list|(
literal|"forSetUidWrite"
argument_list|)
decl_stmt|;
comment|//only allow the user 'test1' to write into the collection
name|ums
operator|=
operator|(
name|UserManagementService
operator|)
name|colForSetUid
operator|.
name|getService
argument_list|(
literal|"UserManagementService"
argument_list|,
literal|"1.0"
argument_list|)
expr_stmt|;
name|ums
operator|.
name|chmod
argument_list|(
literal|0700
argument_list|)
expr_stmt|;
comment|//execute the XQuery as the 'test2' user... it should become 'setuid' of 'test1' and succeed.
specifier|final
name|Collection
name|test2
init|=
name|DatabaseManager
operator|.
name|getCollection
argument_list|(
name|getBaseUri
argument_list|()
operator|+
literal|"/db/securityTest1"
argument_list|,
literal|"test2"
argument_list|,
literal|"test2"
argument_list|)
decl_stmt|;
specifier|final
name|XPathQueryServiceImpl
name|queryService
init|=
operator|(
name|XPathQueryServiceImpl
operator|)
name|test2
operator|.
name|getService
argument_list|(
literal|"XPathQueryService"
argument_list|,
literal|"1.0"
argument_list|)
decl_stmt|;
specifier|final
name|ResourceSet
name|result
init|=
name|queryService
operator|.
name|executeStoredQuery
argument_list|(
literal|"/db/securityTest1/setuid.xquery"
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|"/db/securityTest1/forSetUidWrite/setuid.xml"
argument_list|,
name|result
operator|.
name|getResource
argument_list|(
literal|0
argument_list|)
operator|.
name|getContent
argument_list|()
argument_list|)
expr_stmt|;
comment|//check the written content
specifier|final
name|Resource
name|writtenXmlResource
init|=
name|colForSetUid
operator|.
name|getResource
argument_list|(
literal|"setuid.xml"
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|content
argument_list|,
name|writtenXmlResource
operator|.
name|getContent
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
argument_list|(
name|expected
operator|=
name|XMLDBException
operator|.
name|class
argument_list|)
specifier|public
name|void
name|nonSetUidXQueryCannotWriteRestrictedCollection
parameter_list|()
throws|throws
name|XMLDBException
block|{
specifier|final
name|Collection
name|test
init|=
name|DatabaseManager
operator|.
name|getCollection
argument_list|(
name|getBaseUri
argument_list|()
operator|+
literal|"/db/securityTest1"
argument_list|,
literal|"test1"
argument_list|,
literal|"test1"
argument_list|)
decl_stmt|;
specifier|final
name|long
name|timestamp
init|=
name|System
operator|.
name|currentTimeMillis
argument_list|()
decl_stmt|;
specifier|final
name|String
name|content
init|=
literal|"<not_setuid>"
operator|+
name|timestamp
operator|+
literal|"</not_setuid>"
decl_stmt|;
comment|//create an XQuery /db/securityTest1/not_setuid.xquery
specifier|final
name|String
name|xquery
init|=
literal|"xmldb:store('/db/securityTest1/forSetUidWrite', 'not_setuid.xml', "
operator|+
name|content
operator|+
literal|")"
decl_stmt|;
name|Resource
name|xqueryResource
init|=
name|test
operator|.
name|createResource
argument_list|(
literal|"not_setuid.xquery"
argument_list|,
literal|"BinaryResource"
argument_list|)
decl_stmt|;
name|xqueryResource
operator|.
name|setContent
argument_list|(
name|xquery
argument_list|)
expr_stmt|;
name|test
operator|.
name|storeResource
argument_list|(
name|xqueryResource
argument_list|)
expr_stmt|;
comment|//set the xquery to be owned by 'test1' and do NOT set it 'setuid', and do set it 'rx' by 'users' group so 'test2' can execute it!
name|UserManagementService
name|ums
init|=
operator|(
name|UserManagementService
operator|)
name|test
operator|.
name|getService
argument_list|(
literal|"UserManagementService"
argument_list|,
literal|"1.0"
argument_list|)
decl_stmt|;
name|xqueryResource
operator|=
name|test
operator|.
name|getResource
argument_list|(
literal|"not_setuid.xquery"
argument_list|)
expr_stmt|;
name|ums
operator|.
name|chmod
argument_list|(
name|xqueryResource
argument_list|,
literal|00750
argument_list|)
expr_stmt|;
comment|//NOT SETUID
comment|//create a collection for the XQuery to write into
specifier|final
name|CollectionManagementService
name|cms
init|=
operator|(
name|CollectionManagementService
operator|)
name|test
operator|.
name|getService
argument_list|(
literal|"CollectionManagementService"
argument_list|,
literal|"1.0"
argument_list|)
decl_stmt|;
specifier|final
name|Collection
name|colForSetUid
init|=
name|cms
operator|.
name|createCollection
argument_list|(
literal|"forSetUidWrite"
argument_list|)
decl_stmt|;
comment|//only allow the user 'test1' to write into the collection
name|ums
operator|=
operator|(
name|UserManagementService
operator|)
name|colForSetUid
operator|.
name|getService
argument_list|(
literal|"UserManagementService"
argument_list|,
literal|"1.0"
argument_list|)
expr_stmt|;
name|ums
operator|.
name|chmod
argument_list|(
literal|0700
argument_list|)
expr_stmt|;
comment|//execute the XQuery as the 'test2' user... it should become 'setuid' of 'test1' and succeed.
specifier|final
name|Collection
name|test2
init|=
name|DatabaseManager
operator|.
name|getCollection
argument_list|(
name|getBaseUri
argument_list|()
operator|+
literal|"/db/securityTest1"
argument_list|,
literal|"test2"
argument_list|,
literal|"test2"
argument_list|)
decl_stmt|;
specifier|final
name|XPathQueryServiceImpl
name|queryService
init|=
operator|(
name|XPathQueryServiceImpl
operator|)
name|test2
operator|.
name|getService
argument_list|(
literal|"XPathQueryService"
argument_list|,
literal|"1.0"
argument_list|)
decl_stmt|;
specifier|final
name|ResourceSet
name|result
init|=
name|queryService
operator|.
name|executeStoredQuery
argument_list|(
literal|"/db/securityTest1/not_setuid.xquery"
argument_list|)
decl_stmt|;
name|assertFalse
argument_list|(
literal|"/db/securityTest1/forSetUidWrite/not_setuid.xml"
operator|.
name|equals
argument_list|(
name|result
operator|.
name|getResource
argument_list|(
literal|0
argument_list|)
operator|.
name|getContent
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|setGidXQueryCanWriteRestrictedCollection
parameter_list|()
throws|throws
name|XMLDBException
block|{
specifier|final
name|Collection
name|test
init|=
name|DatabaseManager
operator|.
name|getCollection
argument_list|(
name|getBaseUri
argument_list|()
operator|+
literal|"/db/securityTest2"
argument_list|,
literal|"test1"
argument_list|,
literal|"test1"
argument_list|)
decl_stmt|;
specifier|final
name|long
name|timestamp
init|=
name|System
operator|.
name|currentTimeMillis
argument_list|()
decl_stmt|;
specifier|final
name|String
name|content
init|=
literal|"<setgid>"
operator|+
name|timestamp
operator|+
literal|"</setgid>"
decl_stmt|;
comment|//create an XQuery /db/securityTest1/setuid.xquery
specifier|final
name|String
name|xquery
init|=
literal|"xmldb:store('/db/securityTest2/forSetGidWrite', 'setgid.xml', "
operator|+
name|content
operator|+
literal|")"
decl_stmt|;
name|Resource
name|xqueryResource
init|=
name|test
operator|.
name|createResource
argument_list|(
literal|"setgid.xquery"
argument_list|,
literal|"BinaryResource"
argument_list|)
decl_stmt|;
name|xqueryResource
operator|.
name|setContent
argument_list|(
name|xquery
argument_list|)
expr_stmt|;
name|test
operator|.
name|storeResource
argument_list|(
name|xqueryResource
argument_list|)
expr_stmt|;
comment|//set the xquery to be owned by 'test1':'users' and set it 'setgid', and set it 'rx' by ohers, so 'test3' can execute it!
name|UserManagementService
name|ums
init|=
operator|(
name|UserManagementService
operator|)
name|test
operator|.
name|getService
argument_list|(
literal|"UserManagementService"
argument_list|,
literal|"1.0"
argument_list|)
decl_stmt|;
name|xqueryResource
operator|=
name|test
operator|.
name|getResource
argument_list|(
literal|"setgid.xquery"
argument_list|)
expr_stmt|;
name|ums
operator|.
name|chown
argument_list|(
name|xqueryResource
argument_list|,
name|ums
operator|.
name|getAccount
argument_list|(
literal|"test1"
argument_list|)
argument_list|,
literal|"users"
argument_list|)
expr_stmt|;
name|ums
operator|.
name|chmod
argument_list|(
name|xqueryResource
argument_list|,
literal|02705
argument_list|)
expr_stmt|;
comment|//setgid
comment|//create a collection for the XQuery to write into
specifier|final
name|CollectionManagementService
name|cms
init|=
operator|(
name|CollectionManagementService
operator|)
name|test
operator|.
name|getService
argument_list|(
literal|"CollectionManagementService"
argument_list|,
literal|"1.0"
argument_list|)
decl_stmt|;
specifier|final
name|Collection
name|colForSetUid
init|=
name|cms
operator|.
name|createCollection
argument_list|(
literal|"forSetGidWrite"
argument_list|)
decl_stmt|;
comment|//only allow the group 'users' to write into the collection
name|ums
operator|=
operator|(
name|UserManagementService
operator|)
name|colForSetUid
operator|.
name|getService
argument_list|(
literal|"UserManagementService"
argument_list|,
literal|"1.0"
argument_list|)
expr_stmt|;
name|ums
operator|.
name|chmod
argument_list|(
literal|0570
argument_list|)
expr_stmt|;
comment|//execute the XQuery as the 'test3' user... it should become 'setgid' of 'users' and succeed.
specifier|final
name|Collection
name|test3
init|=
name|DatabaseManager
operator|.
name|getCollection
argument_list|(
name|getBaseUri
argument_list|()
operator|+
literal|"/db/securityTest2"
argument_list|,
literal|"test3"
argument_list|,
literal|"test3"
argument_list|)
decl_stmt|;
specifier|final
name|XPathQueryServiceImpl
name|queryService
init|=
operator|(
name|XPathQueryServiceImpl
operator|)
name|test3
operator|.
name|getService
argument_list|(
literal|"XPathQueryService"
argument_list|,
literal|"1.0"
argument_list|)
decl_stmt|;
specifier|final
name|ResourceSet
name|result
init|=
name|queryService
operator|.
name|executeStoredQuery
argument_list|(
literal|"/db/securityTest2/setgid.xquery"
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|"/db/securityTest2/forSetGidWrite/setgid.xml"
argument_list|,
name|result
operator|.
name|getResource
argument_list|(
literal|0
argument_list|)
operator|.
name|getContent
argument_list|()
argument_list|)
expr_stmt|;
comment|//check the written content
specifier|final
name|Resource
name|writtenXmlResource
init|=
name|colForSetUid
operator|.
name|getResource
argument_list|(
literal|"setgid.xml"
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|content
argument_list|,
name|writtenXmlResource
operator|.
name|getContent
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
argument_list|(
name|expected
operator|=
name|XMLDBException
operator|.
name|class
argument_list|)
specifier|public
name|void
name|nonSetGidXQueryCannotWriteRestrictedCollection
parameter_list|()
throws|throws
name|XMLDBException
block|{
specifier|final
name|Collection
name|test
init|=
name|DatabaseManager
operator|.
name|getCollection
argument_list|(
name|getBaseUri
argument_list|()
operator|+
literal|"/db/securityTest2"
argument_list|,
literal|"test1"
argument_list|,
literal|"test1"
argument_list|)
decl_stmt|;
specifier|final
name|long
name|timestamp
init|=
name|System
operator|.
name|currentTimeMillis
argument_list|()
decl_stmt|;
specifier|final
name|String
name|content
init|=
literal|"<not_setgid>"
operator|+
name|timestamp
operator|+
literal|"</not_setgid>"
decl_stmt|;
comment|//create an XQuery /db/securityTest1/not_setgid.xquery
specifier|final
name|String
name|xquery
init|=
literal|"xmldb:store('/db/securityTest2/forSetGidWrite', 'not_setgid.xml', "
operator|+
name|content
operator|+
literal|")"
decl_stmt|;
name|Resource
name|xqueryResource
init|=
name|test
operator|.
name|createResource
argument_list|(
literal|"not_setgid.xquery"
argument_list|,
literal|"BinaryResource"
argument_list|)
decl_stmt|;
name|xqueryResource
operator|.
name|setContent
argument_list|(
name|xquery
argument_list|)
expr_stmt|;
name|test
operator|.
name|storeResource
argument_list|(
name|xqueryResource
argument_list|)
expr_stmt|;
comment|//set the xquery to be owned by 'test1':'users' and set it 'setgid', and set it 'rx' by ohers, so 'test3' can execute it!
name|UserManagementService
name|ums
init|=
operator|(
name|UserManagementService
operator|)
name|test
operator|.
name|getService
argument_list|(
literal|"UserManagementService"
argument_list|,
literal|"1.0"
argument_list|)
decl_stmt|;
name|xqueryResource
operator|=
name|test
operator|.
name|getResource
argument_list|(
literal|"not_setgid.xquery"
argument_list|)
expr_stmt|;
name|ums
operator|.
name|chmod
argument_list|(
name|xqueryResource
argument_list|,
literal|00705
argument_list|)
expr_stmt|;
comment|//NOT setgid
comment|//create a collection for the XQuery to write into
specifier|final
name|CollectionManagementService
name|cms
init|=
operator|(
name|CollectionManagementService
operator|)
name|test
operator|.
name|getService
argument_list|(
literal|"CollectionManagementService"
argument_list|,
literal|"1.0"
argument_list|)
decl_stmt|;
specifier|final
name|Collection
name|colForSetUid
init|=
name|cms
operator|.
name|createCollection
argument_list|(
literal|"forSetGidWrite"
argument_list|)
decl_stmt|;
comment|//only allow the group 'users' to write into the collection
name|ums
operator|=
operator|(
name|UserManagementService
operator|)
name|colForSetUid
operator|.
name|getService
argument_list|(
literal|"UserManagementService"
argument_list|,
literal|"1.0"
argument_list|)
expr_stmt|;
name|ums
operator|.
name|chmod
argument_list|(
literal|0070
argument_list|)
expr_stmt|;
comment|//execute the XQuery as the 'test3' user... it should become 'setgid' of 'users' and succeed.
specifier|final
name|Collection
name|test3
init|=
name|DatabaseManager
operator|.
name|getCollection
argument_list|(
name|getBaseUri
argument_list|()
operator|+
literal|"/db/securityTest2"
argument_list|,
literal|"test3"
argument_list|,
literal|"test3"
argument_list|)
decl_stmt|;
specifier|final
name|XPathQueryServiceImpl
name|queryService
init|=
operator|(
name|XPathQueryServiceImpl
operator|)
name|test3
operator|.
name|getService
argument_list|(
literal|"XPathQueryService"
argument_list|,
literal|"1.0"
argument_list|)
decl_stmt|;
specifier|final
name|ResourceSet
name|result
init|=
name|queryService
operator|.
name|executeStoredQuery
argument_list|(
literal|"/db/securityTest2/not_setgid.xquery"
argument_list|)
decl_stmt|;
name|assertFalse
argument_list|(
literal|"/db/securityTest2/forSetGidWrite/not_setgid.xml"
operator|.
name|equals
argument_list|(
name|result
operator|.
name|getResource
argument_list|(
literal|0
argument_list|)
operator|.
name|getContent
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|noSetGid_createSubCollection_subCollectionGroupIsUsersPrimaryGroup
parameter_list|()
throws|throws
name|XMLDBException
block|{
specifier|final
name|Collection
name|test
init|=
name|DatabaseManager
operator|.
name|getCollection
argument_list|(
name|getBaseUri
argument_list|()
operator|+
literal|"/db/securityTest2"
argument_list|,
literal|"test1"
argument_list|,
literal|"test1"
argument_list|)
decl_stmt|;
name|CollectionManagementService
name|cms
init|=
operator|(
name|CollectionManagementService
operator|)
name|test
operator|.
name|getService
argument_list|(
literal|"CollectionManagementService"
argument_list|,
literal|"1.0"
argument_list|)
decl_stmt|;
comment|//create /db/securityTest2/parentCollection with owner "test1:users" and mode "rwxr--rwx"
name|Collection
name|parentCollection
init|=
name|cms
operator|.
name|createCollection
argument_list|(
literal|"parentCollection"
argument_list|)
decl_stmt|;
name|UserManagementService
name|ums
init|=
operator|(
name|UserManagementService
operator|)
name|parentCollection
operator|.
name|getService
argument_list|(
literal|"UserManagementService"
argument_list|,
literal|"1.0"
argument_list|)
decl_stmt|;
name|ums
operator|.
name|chmod
argument_list|(
literal|"rwxr--rwx"
argument_list|)
expr_stmt|;
comment|//now create the sub-collection /db/securityTest2/parentCollection/subCollection1
comment|//as "user3:guest", it should have it's group set to the primary group of user3 i.e. 'guest'
comment|//as the collection is NOT setUid and it should NOT have the setGid bit set
name|parentCollection
operator|=
name|DatabaseManager
operator|.
name|getCollection
argument_list|(
name|getBaseUri
argument_list|()
operator|+
literal|"/db/securityTest2/parentCollection"
argument_list|,
literal|"test3"
argument_list|,
literal|"test3"
argument_list|)
expr_stmt|;
name|ums
operator|=
operator|(
name|UserManagementService
operator|)
name|parentCollection
operator|.
name|getService
argument_list|(
literal|"UserManagementService"
argument_list|,
literal|"1.0"
argument_list|)
expr_stmt|;
name|cms
operator|=
operator|(
name|CollectionManagementService
operator|)
name|parentCollection
operator|.
name|getService
argument_list|(
literal|"CollectionManagementService"
argument_list|,
literal|"1.0"
argument_list|)
expr_stmt|;
specifier|final
name|Collection
name|subCollection
init|=
name|cms
operator|.
name|createCollection
argument_list|(
literal|"subCollection1"
argument_list|)
decl_stmt|;
specifier|final
name|Permission
name|permissions
init|=
name|ums
operator|.
name|getPermissions
argument_list|(
name|subCollection
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|"guest"
argument_list|,
name|permissions
operator|.
name|getGroup
argument_list|()
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|permissions
operator|.
name|isSetGid
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|setGid_createSubCollection_subCollectionGroupInheritedFromParent
parameter_list|()
throws|throws
name|XMLDBException
block|{
specifier|final
name|Collection
name|test
init|=
name|DatabaseManager
operator|.
name|getCollection
argument_list|(
name|getBaseUri
argument_list|()
operator|+
literal|"/db/securityTest2"
argument_list|,
literal|"test1"
argument_list|,
literal|"test1"
argument_list|)
decl_stmt|;
name|CollectionManagementService
name|cms
init|=
operator|(
name|CollectionManagementService
operator|)
name|test
operator|.
name|getService
argument_list|(
literal|"CollectionManagementService"
argument_list|,
literal|"1.0"
argument_list|)
decl_stmt|;
comment|//create /db/securityTest2/parentCollection with owner "test1:users" and mode "rwxrwsrwx"
name|Collection
name|parentCollection
init|=
name|cms
operator|.
name|createCollection
argument_list|(
literal|"parentCollection"
argument_list|)
decl_stmt|;
name|UserManagementService
name|ums
init|=
operator|(
name|UserManagementService
operator|)
name|parentCollection
operator|.
name|getService
argument_list|(
literal|"UserManagementService"
argument_list|,
literal|"1.0"
argument_list|)
decl_stmt|;
name|ums
operator|.
name|chmod
argument_list|(
literal|"rwxrwsrwx"
argument_list|)
expr_stmt|;
comment|//now create the sub-collection /db/securityTest2/parentCollection/subCollection1
comment|//it should inherit the group ownership 'users' from the parent collection which is setGid
comment|//and it should inherit the setGid bit
name|parentCollection
operator|=
name|DatabaseManager
operator|.
name|getCollection
argument_list|(
name|getBaseUri
argument_list|()
operator|+
literal|"/db/securityTest2/parentCollection"
argument_list|,
literal|"test3"
argument_list|,
literal|"test3"
argument_list|)
expr_stmt|;
name|ums
operator|=
operator|(
name|UserManagementService
operator|)
name|parentCollection
operator|.
name|getService
argument_list|(
literal|"UserManagementService"
argument_list|,
literal|"1.0"
argument_list|)
expr_stmt|;
name|cms
operator|=
operator|(
name|CollectionManagementService
operator|)
name|parentCollection
operator|.
name|getService
argument_list|(
literal|"CollectionManagementService"
argument_list|,
literal|"1.0"
argument_list|)
expr_stmt|;
specifier|final
name|Collection
name|subCollection
init|=
name|cms
operator|.
name|createCollection
argument_list|(
literal|"subCollection1"
argument_list|)
decl_stmt|;
specifier|final
name|Permission
name|permissions
init|=
name|ums
operator|.
name|getPermissions
argument_list|(
name|subCollection
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|"users"
argument_list|,
name|permissions
operator|.
name|getGroup
argument_list|()
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|permissions
operator|.
name|isSetGid
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|noSetGid_createResource_resourceGroupIsUsersPrimaryGroup
parameter_list|()
throws|throws
name|XMLDBException
block|{
specifier|final
name|Collection
name|test
init|=
name|DatabaseManager
operator|.
name|getCollection
argument_list|(
name|getBaseUri
argument_list|()
operator|+
literal|"/db/securityTest2"
argument_list|,
literal|"test1"
argument_list|,
literal|"test1"
argument_list|)
decl_stmt|;
name|CollectionManagementService
name|cms
init|=
operator|(
name|CollectionManagementService
operator|)
name|test
operator|.
name|getService
argument_list|(
literal|"CollectionManagementService"
argument_list|,
literal|"1.0"
argument_list|)
decl_stmt|;
comment|//create /db/securityTest2/parentCollection with owner "test1:users" and mode "rwxrwxrwx"
name|Collection
name|parentCollection
init|=
name|cms
operator|.
name|createCollection
argument_list|(
literal|"parentCollection"
argument_list|)
decl_stmt|;
name|UserManagementService
name|ums
init|=
operator|(
name|UserManagementService
operator|)
name|parentCollection
operator|.
name|getService
argument_list|(
literal|"UserManagementService"
argument_list|,
literal|"1.0"
argument_list|)
decl_stmt|;
name|ums
operator|.
name|chmod
argument_list|(
literal|"rwxrwxrwx"
argument_list|)
expr_stmt|;
comment|//now create the sub-resource /db/securityTest2/parentCollection/test.xml
comment|//as "user3:guest", it should have it's group set to the primary group of user3 i.e. 'guest'
comment|//as the collection is NOT setGid, the file should NOT have the setGid bit set
name|parentCollection
operator|=
name|DatabaseManager
operator|.
name|getCollection
argument_list|(
name|getBaseUri
argument_list|()
operator|+
literal|"/db/securityTest2/parentCollection"
argument_list|,
literal|"test3"
argument_list|,
literal|"test3"
argument_list|)
expr_stmt|;
name|ums
operator|=
operator|(
name|UserManagementService
operator|)
name|parentCollection
operator|.
name|getService
argument_list|(
literal|"UserManagementService"
argument_list|,
literal|"1.0"
argument_list|)
expr_stmt|;
name|Resource
name|resource
init|=
name|parentCollection
operator|.
name|createResource
argument_list|(
literal|"test.xml"
argument_list|,
name|XMLResource
operator|.
name|RESOURCE_TYPE
argument_list|)
decl_stmt|;
name|resource
operator|.
name|setContent
argument_list|(
literal|"<test/>"
argument_list|)
expr_stmt|;
name|parentCollection
operator|.
name|storeResource
argument_list|(
name|resource
argument_list|)
expr_stmt|;
specifier|final
name|Permission
name|permissions
init|=
name|ums
operator|.
name|getPermissions
argument_list|(
name|resource
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|"guest"
argument_list|,
name|permissions
operator|.
name|getGroup
argument_list|()
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|permissions
operator|.
name|isSetGid
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|setGid_createResource_resourceGroupInheritedFromParent
parameter_list|()
throws|throws
name|XMLDBException
block|{
specifier|final
name|Collection
name|test
init|=
name|DatabaseManager
operator|.
name|getCollection
argument_list|(
name|getBaseUri
argument_list|()
operator|+
literal|"/db/securityTest2"
argument_list|,
literal|"test1"
argument_list|,
literal|"test1"
argument_list|)
decl_stmt|;
name|CollectionManagementService
name|cms
init|=
operator|(
name|CollectionManagementService
operator|)
name|test
operator|.
name|getService
argument_list|(
literal|"CollectionManagementService"
argument_list|,
literal|"1.0"
argument_list|)
decl_stmt|;
comment|//create /db/securityTest2/parentCollection with owner "test1:users" and mode "rwxrwsrwx"
name|Collection
name|parentCollection
init|=
name|cms
operator|.
name|createCollection
argument_list|(
literal|"parentCollection"
argument_list|)
decl_stmt|;
name|UserManagementService
name|ums
init|=
operator|(
name|UserManagementService
operator|)
name|parentCollection
operator|.
name|getService
argument_list|(
literal|"UserManagementService"
argument_list|,
literal|"1.0"
argument_list|)
decl_stmt|;
name|ums
operator|.
name|chmod
argument_list|(
literal|"rwxrwsrwx"
argument_list|)
expr_stmt|;
comment|//now as "test3:guest" create the sub-resource /db/securityTest2/parentCollection/test.xml
comment|//it should inherit the group ownership 'users' from the parent which is setGid
comment|//but it should not inherit the setGid bit as it is a resource
name|parentCollection
operator|=
name|DatabaseManager
operator|.
name|getCollection
argument_list|(
name|getBaseUri
argument_list|()
operator|+
literal|"/db/securityTest2/parentCollection"
argument_list|,
literal|"test3"
argument_list|,
literal|"test3"
argument_list|)
expr_stmt|;
name|ums
operator|=
operator|(
name|UserManagementService
operator|)
name|parentCollection
operator|.
name|getService
argument_list|(
literal|"UserManagementService"
argument_list|,
literal|"1.0"
argument_list|)
expr_stmt|;
name|Resource
name|resource
init|=
name|parentCollection
operator|.
name|createResource
argument_list|(
literal|"test.xml"
argument_list|,
name|XMLResource
operator|.
name|RESOURCE_TYPE
argument_list|)
decl_stmt|;
name|resource
operator|.
name|setContent
argument_list|(
literal|"<test/>"
argument_list|)
expr_stmt|;
name|parentCollection
operator|.
name|storeResource
argument_list|(
name|resource
argument_list|)
expr_stmt|;
specifier|final
name|Permission
name|permissions
init|=
name|ums
operator|.
name|getPermissions
argument_list|(
name|resource
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|"users"
argument_list|,
name|permissions
operator|.
name|getGroup
argument_list|()
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|permissions
operator|.
name|isSetGid
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|noSetGid_copyCollection_collectionGroupIsUsersPrimaryGroup
parameter_list|()
throws|throws
name|XMLDBException
block|{
name|Collection
name|test
init|=
name|DatabaseManager
operator|.
name|getCollection
argument_list|(
name|getBaseUri
argument_list|()
operator|+
literal|"/db/securityTest2"
argument_list|,
literal|"test1"
argument_list|,
literal|"test1"
argument_list|)
decl_stmt|;
name|CollectionManagementServiceImpl
name|cms
init|=
operator|(
name|CollectionManagementServiceImpl
operator|)
name|test
operator|.
name|getService
argument_list|(
literal|"CollectionManagementService"
argument_list|,
literal|"1.0"
argument_list|)
decl_stmt|;
comment|//create the /db/securityTest2/src collection
name|Collection
name|srcCollection
init|=
name|cms
operator|.
name|createCollection
argument_list|(
literal|"src"
argument_list|)
decl_stmt|;
comment|//create /db/securityTest2/parentCollection with owner "test1:users" and mode "rwxrwxrwx"
name|Collection
name|parentCollection
init|=
name|cms
operator|.
name|createCollection
argument_list|(
literal|"parentCollection"
argument_list|)
decl_stmt|;
name|UserManagementService
name|ums
init|=
operator|(
name|UserManagementService
operator|)
name|parentCollection
operator|.
name|getService
argument_list|(
literal|"UserManagementService"
argument_list|,
literal|"1.0"
argument_list|)
decl_stmt|;
name|ums
operator|.
name|chmod
argument_list|(
literal|"rwxrwxrwx"
argument_list|)
expr_stmt|;
comment|//now copy /db/securityTest2/src to /db/securityTest2/parentCollection/src
comment|//as "user3:guest", it should have it's group set to the primary group of "user3" i.e. 'guest'
comment|//as the collection is NOT setGid and it should NOT have it's setGid bit set
name|test
operator|=
name|DatabaseManager
operator|.
name|getCollection
argument_list|(
name|getBaseUri
argument_list|()
operator|+
literal|"/db/securityTest2"
argument_list|,
literal|"test3"
argument_list|,
literal|"test3"
argument_list|)
expr_stmt|;
name|cms
operator|=
operator|(
name|CollectionManagementServiceImpl
operator|)
name|test
operator|.
name|getService
argument_list|(
literal|"CollectionManagementService"
argument_list|,
literal|"1.0"
argument_list|)
expr_stmt|;
name|cms
operator|.
name|copy
argument_list|(
literal|"src"
argument_list|,
literal|"/db/securityTest2/parentCollection"
argument_list|,
literal|"src"
argument_list|)
expr_stmt|;
name|parentCollection
operator|=
name|DatabaseManager
operator|.
name|getCollection
argument_list|(
name|getBaseUri
argument_list|()
operator|+
literal|"/db/securityTest2/parentCollection"
argument_list|,
literal|"test3"
argument_list|,
literal|"test3"
argument_list|)
expr_stmt|;
name|ums
operator|=
operator|(
name|UserManagementService
operator|)
name|parentCollection
operator|.
name|getService
argument_list|(
literal|"UserManagementService"
argument_list|,
literal|"1.0"
argument_list|)
expr_stmt|;
name|srcCollection
operator|=
name|test
operator|.
name|getChildCollection
argument_list|(
literal|"src"
argument_list|)
expr_stmt|;
specifier|final
name|Collection
name|destCollection
init|=
name|parentCollection
operator|.
name|getChildCollection
argument_list|(
literal|"src"
argument_list|)
decl_stmt|;
specifier|final
name|Permission
name|permissions
init|=
name|ums
operator|.
name|getPermissions
argument_list|(
name|destCollection
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|"guest"
argument_list|,
name|permissions
operator|.
name|getGroup
argument_list|()
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|permissions
operator|.
name|isSetGid
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|setGid_copyCollection_collectionGroupInheritedFromParent
parameter_list|()
throws|throws
name|XMLDBException
block|{
name|Collection
name|test
init|=
name|DatabaseManager
operator|.
name|getCollection
argument_list|(
name|getBaseUri
argument_list|()
operator|+
literal|"/db/securityTest2"
argument_list|,
literal|"test1"
argument_list|,
literal|"test1"
argument_list|)
decl_stmt|;
name|CollectionManagementServiceImpl
name|cms
init|=
operator|(
name|CollectionManagementServiceImpl
operator|)
name|test
operator|.
name|getService
argument_list|(
literal|"CollectionManagementService"
argument_list|,
literal|"1.0"
argument_list|)
decl_stmt|;
name|UserManagementService
name|ums
init|=
operator|(
name|UserManagementService
operator|)
name|test
operator|.
name|getService
argument_list|(
literal|"UserManagementService"
argument_list|,
literal|"1.0"
argument_list|)
decl_stmt|;
comment|//create the /db/securityTest2/src collection with owner "test1:extusers" and default mode
name|Collection
name|srcCollection
init|=
name|cms
operator|.
name|createCollection
argument_list|(
literal|"src"
argument_list|)
decl_stmt|;
name|ums
operator|=
operator|(
name|UserManagementService
operator|)
name|srcCollection
operator|.
name|getService
argument_list|(
literal|"UserManagementService"
argument_list|,
literal|"1.0"
argument_list|)
expr_stmt|;
name|ums
operator|.
name|chgrp
argument_list|(
literal|"extusers"
argument_list|)
expr_stmt|;
comment|//create /db/securityTest2/parentCollection with owner "test1:users" and mode "rwxrwsrwx"
name|Collection
name|parentCollection
init|=
name|cms
operator|.
name|createCollection
argument_list|(
literal|"parentCollection"
argument_list|)
decl_stmt|;
name|ums
operator|=
operator|(
name|UserManagementService
operator|)
name|parentCollection
operator|.
name|getService
argument_list|(
literal|"UserManagementService"
argument_list|,
literal|"1.0"
argument_list|)
expr_stmt|;
name|ums
operator|.
name|chmod
argument_list|(
literal|"rwxrwsrwx"
argument_list|)
expr_stmt|;
comment|//now copy /db/securityTest2/src to /db/securityTest2/parentCollection/src
comment|//as "user3:guest", it should inherit the group ownership 'users' from the parent
comment|//collection which is setGid and it should have its setGid bit set
name|test
operator|=
name|DatabaseManager
operator|.
name|getCollection
argument_list|(
name|getBaseUri
argument_list|()
operator|+
literal|"/db/securityTest2"
argument_list|,
literal|"test3"
argument_list|,
literal|"test3"
argument_list|)
expr_stmt|;
name|cms
operator|=
operator|(
name|CollectionManagementServiceImpl
operator|)
name|test
operator|.
name|getService
argument_list|(
literal|"CollectionManagementService"
argument_list|,
literal|"1.0"
argument_list|)
expr_stmt|;
name|cms
operator|.
name|copy
argument_list|(
literal|"src"
argument_list|,
literal|"/db/securityTest2/parentCollection"
argument_list|,
literal|"src"
argument_list|)
expr_stmt|;
name|parentCollection
operator|=
name|DatabaseManager
operator|.
name|getCollection
argument_list|(
name|getBaseUri
argument_list|()
operator|+
literal|"/db/securityTest2/parentCollection"
argument_list|,
literal|"test3"
argument_list|,
literal|"test3"
argument_list|)
expr_stmt|;
name|ums
operator|=
operator|(
name|UserManagementService
operator|)
name|parentCollection
operator|.
name|getService
argument_list|(
literal|"UserManagementService"
argument_list|,
literal|"1.0"
argument_list|)
expr_stmt|;
specifier|final
name|Collection
name|destCollection
init|=
name|parentCollection
operator|.
name|getChildCollection
argument_list|(
literal|"src"
argument_list|)
decl_stmt|;
specifier|final
name|Permission
name|permissions
init|=
name|ums
operator|.
name|getPermissions
argument_list|(
name|destCollection
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|"users"
argument_list|,
name|permissions
operator|.
name|getGroup
argument_list|()
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|permissions
operator|.
name|isSetGid
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|noSetGid_copyResource_resourceGroupIsUsersPrimaryGroup
parameter_list|()
throws|throws
name|XMLDBException
block|{
name|Collection
name|test
init|=
name|DatabaseManager
operator|.
name|getCollection
argument_list|(
name|getBaseUri
argument_list|()
operator|+
literal|"/db/securityTest2"
argument_list|,
literal|"test1"
argument_list|,
literal|"test1"
argument_list|)
decl_stmt|;
name|CollectionManagementServiceImpl
name|cms
init|=
operator|(
name|CollectionManagementServiceImpl
operator|)
name|test
operator|.
name|getService
argument_list|(
literal|"CollectionManagementService"
argument_list|,
literal|"1.0"
argument_list|)
decl_stmt|;
comment|//create the /db/securityTest2/test.xml resource
name|Resource
name|resource
init|=
name|test
operator|.
name|createResource
argument_list|(
literal|"test.xml"
argument_list|,
name|XMLResource
operator|.
name|RESOURCE_TYPE
argument_list|)
decl_stmt|;
name|resource
operator|.
name|setContent
argument_list|(
literal|"<test/>"
argument_list|)
expr_stmt|;
name|test
operator|.
name|storeResource
argument_list|(
name|resource
argument_list|)
expr_stmt|;
comment|//create /db/securityTest2/parentCollection with owner "test1:users" and mode "rwxrwxrwx"
name|Collection
name|parentCollection
init|=
name|cms
operator|.
name|createCollection
argument_list|(
literal|"parentCollection"
argument_list|)
decl_stmt|;
name|UserManagementService
name|ums
init|=
operator|(
name|UserManagementService
operator|)
name|parentCollection
operator|.
name|getService
argument_list|(
literal|"UserManagementService"
argument_list|,
literal|"1.0"
argument_list|)
decl_stmt|;
name|ums
operator|.
name|chmod
argument_list|(
literal|"rwxrwxrwx"
argument_list|)
expr_stmt|;
comment|//now copy /db/securityTest2/test.xml to /db/securityTest2/parentCollection/test.xml
comment|//as user3, it should have it's group set to the primary group of user3 i.e. 'guest'
comment|//as the collection is NOT setGid and it should not have the setGid bit
name|test
operator|=
name|DatabaseManager
operator|.
name|getCollection
argument_list|(
name|getBaseUri
argument_list|()
operator|+
literal|"/db/securityTest2"
argument_list|,
literal|"test3"
argument_list|,
literal|"test3"
argument_list|)
expr_stmt|;
name|cms
operator|=
operator|(
name|CollectionManagementServiceImpl
operator|)
name|test
operator|.
name|getService
argument_list|(
literal|"CollectionManagementService"
argument_list|,
literal|"1.0"
argument_list|)
expr_stmt|;
name|cms
operator|.
name|copyResource
argument_list|(
literal|"test.xml"
argument_list|,
literal|"/db/securityTest2/parentCollection"
argument_list|,
literal|"test.xml"
argument_list|)
expr_stmt|;
name|ums
operator|=
operator|(
name|UserManagementService
operator|)
name|parentCollection
operator|.
name|getService
argument_list|(
literal|"UserManagementService"
argument_list|,
literal|"1.0"
argument_list|)
expr_stmt|;
name|parentCollection
operator|=
name|test
operator|.
name|getChildCollection
argument_list|(
literal|"parentCollection"
argument_list|)
expr_stmt|;
name|resource
operator|=
name|parentCollection
operator|.
name|getResource
argument_list|(
literal|"test.xml"
argument_list|)
expr_stmt|;
specifier|final
name|Permission
name|permissions
init|=
name|ums
operator|.
name|getPermissions
argument_list|(
name|resource
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|"guest"
argument_list|,
name|permissions
operator|.
name|getGroup
argument_list|()
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|permissions
operator|.
name|isSetGid
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|setGid_copyResource_resourceGroupInheritedFromParent
parameter_list|()
throws|throws
name|XMLDBException
block|{
name|Collection
name|test
init|=
name|DatabaseManager
operator|.
name|getCollection
argument_list|(
name|getBaseUri
argument_list|()
operator|+
literal|"/db/securityTest2"
argument_list|,
literal|"test1"
argument_list|,
literal|"test1"
argument_list|)
decl_stmt|;
name|CollectionManagementServiceImpl
name|cms
init|=
operator|(
name|CollectionManagementServiceImpl
operator|)
name|test
operator|.
name|getService
argument_list|(
literal|"CollectionManagementService"
argument_list|,
literal|"1.0"
argument_list|)
decl_stmt|;
name|UserManagementService
name|ums
init|=
operator|(
name|UserManagementService
operator|)
name|test
operator|.
name|getService
argument_list|(
literal|"UserManagementService"
argument_list|,
literal|"1.0"
argument_list|)
decl_stmt|;
comment|//create the /db/securityTest2/test.xml resource
name|Resource
name|resource
init|=
name|test
operator|.
name|createResource
argument_list|(
literal|"test.xml"
argument_list|,
name|XMLResource
operator|.
name|RESOURCE_TYPE
argument_list|)
decl_stmt|;
name|resource
operator|.
name|setContent
argument_list|(
literal|"<test/>"
argument_list|)
expr_stmt|;
name|test
operator|.
name|storeResource
argument_list|(
name|resource
argument_list|)
expr_stmt|;
name|ums
operator|.
name|chgrp
argument_list|(
name|resource
argument_list|,
literal|"extusers"
argument_list|)
expr_stmt|;
comment|//create /db/securityTest2/parentCollection with owner "test1:users" and mode "rwxrwsrwx"
name|Collection
name|parentCollection
init|=
name|cms
operator|.
name|createCollection
argument_list|(
literal|"parentCollection"
argument_list|)
decl_stmt|;
name|ums
operator|=
operator|(
name|UserManagementService
operator|)
name|parentCollection
operator|.
name|getService
argument_list|(
literal|"UserManagementService"
argument_list|,
literal|"1.0"
argument_list|)
expr_stmt|;
name|ums
operator|.
name|chmod
argument_list|(
literal|"rwxrwsrwx"
argument_list|)
expr_stmt|;
comment|//now copy /db/securityTest2/test.xml to /db/securityTest2/parentCollection/test.xml
comment|//as "user3:guest", it should inherit the group ownership 'users' from the parent collection which is setGid
comment|//and it should NOT have its setGid bit set as it is a resource
name|test
operator|=
name|DatabaseManager
operator|.
name|getCollection
argument_list|(
name|getBaseUri
argument_list|()
operator|+
literal|"/db/securityTest2"
argument_list|,
literal|"test3"
argument_list|,
literal|"test3"
argument_list|)
expr_stmt|;
name|cms
operator|=
operator|(
name|CollectionManagementServiceImpl
operator|)
name|test
operator|.
name|getService
argument_list|(
literal|"CollectionManagementService"
argument_list|,
literal|"1.0"
argument_list|)
expr_stmt|;
name|cms
operator|.
name|copyResource
argument_list|(
literal|"test.xml"
argument_list|,
literal|"/db/securityTest2/parentCollection"
argument_list|,
literal|"test.xml"
argument_list|)
expr_stmt|;
name|ums
operator|=
operator|(
name|UserManagementService
operator|)
name|parentCollection
operator|.
name|getService
argument_list|(
literal|"UserManagementService"
argument_list|,
literal|"1.0"
argument_list|)
expr_stmt|;
name|parentCollection
operator|=
name|test
operator|.
name|getChildCollection
argument_list|(
literal|"parentCollection"
argument_list|)
expr_stmt|;
name|resource
operator|=
name|parentCollection
operator|.
name|getResource
argument_list|(
literal|"test.xml"
argument_list|)
expr_stmt|;
specifier|final
name|Permission
name|permissions
init|=
name|ums
operator|.
name|getPermissions
argument_list|(
name|resource
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|"users"
argument_list|,
name|permissions
operator|.
name|getGroup
argument_list|()
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|permissions
operator|.
name|isSetGid
argument_list|()
argument_list|)
expr_stmt|;
block|}
comment|//TODO need tests for
comment|//4) CopyingCollections to dests where permission is denied!
comment|//5) What about move Document, move Collection?
comment|/**      * 1) Sets '/db' to rwxr-xr-x (0755)      * 2) Adds the Group 'users'      * 3) Adds the User 'test1' with password 'test1' and set's their primary group to 'users'      * 4) Creates the group 'extusers' and adds 'test1' to it      * 5) Adds the User 'test2' with password 'test2' and set's their primary group to 'users'      * 6) Adds the User 'test3' with password 'test3' and set's their primary group to 'guest'      * 7) Creates the Collection '/db/securityTest1' owned by 'test1':'users' with permissions rwxrwx--- (0770)      * 8) Creates the XML resource '/db/securityTest1/test.xml' owned by 'test1':'users' with permissions rwxrwx--- (0770)      * 9) Creates the Binary resource '/db/securityTest1/test.bin' owned by 'test1':'users' with permissions rwxrwx--- (0770)      * 10) Creates the Collection '/db/securityTest2' owned by 'test1':'users' with permissions rwxrwxr-x (0775)      * 11) Creates the Collection '/db/securityTest3' owned by 'test3':'guest' with permissions rwxrwxrwx (0777)      */
annotation|@
name|Before
specifier|public
name|void
name|setup
parameter_list|()
throws|throws
name|XMLDBException
block|{
specifier|final
name|Collection
name|root
init|=
name|DatabaseManager
operator|.
name|getCollection
argument_list|(
name|getBaseUri
argument_list|()
operator|+
literal|"/db"
argument_list|,
literal|"admin"
argument_list|,
literal|""
argument_list|)
decl_stmt|;
name|UserManagementService
name|ums
init|=
operator|(
name|UserManagementService
operator|)
name|root
operator|.
name|getService
argument_list|(
literal|"UserManagementService"
argument_list|,
literal|"1.0"
argument_list|)
decl_stmt|;
name|ums
operator|.
name|chmod
argument_list|(
literal|"rwxr-xr-x"
argument_list|)
expr_stmt|;
comment|//ensure /db is always 755
comment|//remove accounts 'test1', 'test2' and 'test3'
name|removeAccounts
argument_list|(
name|ums
argument_list|,
operator|new
name|String
index|[]
block|{
literal|"test1"
block|,
literal|"test2"
block|,
literal|"test3"
block|}
argument_list|)
expr_stmt|;
comment|//remove group 'users'
name|removeGroups
argument_list|(
name|ums
argument_list|,
operator|new
name|String
index|[]
block|{
literal|"users"
block|}
argument_list|)
expr_stmt|;
specifier|final
name|Group
name|group
init|=
operator|new
name|GroupAider
argument_list|(
literal|"exist"
argument_list|,
literal|"users"
argument_list|)
decl_stmt|;
name|ums
operator|.
name|addGroup
argument_list|(
name|group
argument_list|)
expr_stmt|;
name|UserAider
name|user
init|=
operator|new
name|UserAider
argument_list|(
literal|"test1"
argument_list|,
name|group
argument_list|)
decl_stmt|;
name|user
operator|.
name|setPassword
argument_list|(
literal|"test1"
argument_list|)
expr_stmt|;
name|ums
operator|.
name|addAccount
argument_list|(
name|user
argument_list|)
expr_stmt|;
specifier|final
name|Group
name|extGroup
init|=
operator|new
name|GroupAider
argument_list|(
literal|"exist"
argument_list|,
literal|"extusers"
argument_list|)
decl_stmt|;
name|ums
operator|.
name|addGroup
argument_list|(
name|extGroup
argument_list|)
expr_stmt|;
name|ums
operator|.
name|addAccountToGroup
argument_list|(
literal|"test1"
argument_list|,
literal|"extusers"
argument_list|)
expr_stmt|;
name|user
operator|=
operator|new
name|UserAider
argument_list|(
literal|"test2"
argument_list|,
name|group
argument_list|)
expr_stmt|;
name|user
operator|.
name|setPassword
argument_list|(
literal|"test2"
argument_list|)
expr_stmt|;
name|ums
operator|.
name|addAccount
argument_list|(
name|user
argument_list|)
expr_stmt|;
name|user
operator|=
operator|new
name|UserAider
argument_list|(
literal|"test3"
argument_list|,
name|ums
operator|.
name|getGroup
argument_list|(
literal|"guest"
argument_list|)
argument_list|)
expr_stmt|;
name|user
operator|.
name|setPassword
argument_list|(
literal|"test3"
argument_list|)
expr_stmt|;
name|ums
operator|.
name|addAccount
argument_list|(
name|user
argument_list|)
expr_stmt|;
comment|// create a collection /db/securityTest1 as owned by "test1:users" and mode 0770
name|CollectionManagementService
name|cms
init|=
operator|(
name|CollectionManagementService
operator|)
name|root
operator|.
name|getService
argument_list|(
literal|"CollectionManagementService"
argument_list|,
literal|"1.0"
argument_list|)
decl_stmt|;
name|Collection
name|test
init|=
name|cms
operator|.
name|createCollection
argument_list|(
literal|"securityTest1"
argument_list|)
decl_stmt|;
name|ums
operator|=
operator|(
name|UserManagementService
operator|)
name|test
operator|.
name|getService
argument_list|(
literal|"UserManagementService"
argument_list|,
literal|"1.0"
argument_list|)
expr_stmt|;
comment|//change ownership to test1
specifier|final
name|Account
name|test1
init|=
name|ums
operator|.
name|getAccount
argument_list|(
literal|"test1"
argument_list|)
decl_stmt|;
name|ums
operator|.
name|chown
argument_list|(
name|test1
argument_list|,
literal|"users"
argument_list|)
expr_stmt|;
comment|// full permissions for user and group, none for world
name|ums
operator|.
name|chmod
argument_list|(
literal|0770
argument_list|)
expr_stmt|;
name|test
operator|=
name|DatabaseManager
operator|.
name|getCollection
argument_list|(
name|getBaseUri
argument_list|()
operator|+
literal|"/db/securityTest1"
argument_list|,
literal|"test1"
argument_list|,
literal|"test1"
argument_list|)
expr_stmt|;
comment|// create a resource /db/securityTest1/test.xml owned by "test1:users" and mode 0770
name|Resource
name|resource
init|=
name|test
operator|.
name|createResource
argument_list|(
literal|"test.xml"
argument_list|,
name|XMLResource
operator|.
name|RESOURCE_TYPE
argument_list|)
decl_stmt|;
name|resource
operator|.
name|setContent
argument_list|(
literal|"<test/>"
argument_list|)
expr_stmt|;
name|test
operator|.
name|storeResource
argument_list|(
name|resource
argument_list|)
expr_stmt|;
name|ums
operator|.
name|chmod
argument_list|(
name|resource
argument_list|,
literal|0770
argument_list|)
expr_stmt|;
name|resource
operator|=
name|test
operator|.
name|createResource
argument_list|(
literal|"test.bin"
argument_list|,
name|BinaryResource
operator|.
name|RESOURCE_TYPE
argument_list|)
expr_stmt|;
name|resource
operator|.
name|setContent
argument_list|(
literal|"binary-test"
operator|.
name|getBytes
argument_list|()
argument_list|)
expr_stmt|;
name|test
operator|.
name|storeResource
argument_list|(
name|resource
argument_list|)
expr_stmt|;
name|ums
operator|.
name|chmod
argument_list|(
name|resource
argument_list|,
literal|0770
argument_list|)
expr_stmt|;
comment|// create a collection /db/securityTest2 as user "test1"
name|cms
operator|=
operator|(
name|CollectionManagementService
operator|)
name|root
operator|.
name|getService
argument_list|(
literal|"CollectionManagementService"
argument_list|,
literal|"1.0"
argument_list|)
expr_stmt|;
name|Collection
name|testCol2
init|=
name|cms
operator|.
name|createCollection
argument_list|(
literal|"securityTest2"
argument_list|)
decl_stmt|;
name|ums
operator|=
operator|(
name|UserManagementService
operator|)
name|testCol2
operator|.
name|getService
argument_list|(
literal|"UserManagementService"
argument_list|,
literal|"1.0"
argument_list|)
expr_stmt|;
comment|//change ownership to test1
name|ums
operator|.
name|chown
argument_list|(
name|test1
argument_list|,
literal|"users"
argument_list|)
expr_stmt|;
comment|// full permissions for user and group, none for world
name|ums
operator|.
name|chmod
argument_list|(
literal|0775
argument_list|)
expr_stmt|;
comment|// create a collection /db/securityTest3 as user "test3"
name|cms
operator|=
operator|(
name|CollectionManagementService
operator|)
name|root
operator|.
name|getService
argument_list|(
literal|"CollectionManagementService"
argument_list|,
literal|"1.0"
argument_list|)
expr_stmt|;
name|Collection
name|testCol3
init|=
name|cms
operator|.
name|createCollection
argument_list|(
literal|"securityTest3"
argument_list|)
decl_stmt|;
name|ums
operator|=
operator|(
name|UserManagementService
operator|)
name|testCol3
operator|.
name|getService
argument_list|(
literal|"UserManagementService"
argument_list|,
literal|"1.0"
argument_list|)
expr_stmt|;
comment|//change ownership to test3
specifier|final
name|Account
name|test3
init|=
name|ums
operator|.
name|getAccount
argument_list|(
literal|"test3"
argument_list|)
decl_stmt|;
name|ums
operator|.
name|chown
argument_list|(
name|test3
argument_list|,
literal|"users"
argument_list|)
expr_stmt|;
comment|// full permissions for all
name|ums
operator|.
name|chmod
argument_list|(
literal|0777
argument_list|)
expr_stmt|;
comment|// create a collection /db/securityTest1 as user "sub1"
name|cms
operator|=
operator|(
name|CollectionManagementService
operator|)
name|test
operator|.
name|getService
argument_list|(
literal|"CollectionManagementService"
argument_list|,
literal|"1.0"
argument_list|)
expr_stmt|;
name|Collection
name|sub1
init|=
name|cms
operator|.
name|createCollection
argument_list|(
literal|"sub1"
argument_list|)
decl_stmt|;
name|ums
operator|=
operator|(
name|UserManagementService
operator|)
name|sub1
operator|.
name|getService
argument_list|(
literal|"UserManagementService"
argument_list|,
literal|"1.0"
argument_list|)
expr_stmt|;
comment|//change ownership to test1
name|ums
operator|.
name|chown
argument_list|(
name|test1
argument_list|,
literal|"users"
argument_list|)
expr_stmt|;
comment|// full permissions for all
name|ums
operator|.
name|chmod
argument_list|(
literal|0777
argument_list|)
expr_stmt|;
block|}
annotation|@
name|After
specifier|public
name|void
name|cleanup
parameter_list|()
throws|throws
name|XMLDBException
block|{
specifier|final
name|Collection
name|root
init|=
name|DatabaseManager
operator|.
name|getCollection
argument_list|(
name|getBaseUri
argument_list|()
operator|+
literal|"/db"
argument_list|,
literal|"admin"
argument_list|,
literal|""
argument_list|)
decl_stmt|;
specifier|final
name|CollectionManagementService
name|cms
init|=
operator|(
name|CollectionManagementService
operator|)
name|root
operator|.
name|getService
argument_list|(
literal|"CollectionManagementService"
argument_list|,
literal|"1.0"
argument_list|)
decl_stmt|;
specifier|final
name|Collection
name|secTest1
init|=
name|root
operator|.
name|getChildCollection
argument_list|(
literal|"securityTest1"
argument_list|)
decl_stmt|;
if|if
condition|(
name|secTest1
operator|!=
literal|null
condition|)
block|{
name|secTest1
operator|.
name|close
argument_list|()
expr_stmt|;
name|cms
operator|.
name|removeCollection
argument_list|(
literal|"securityTest1"
argument_list|)
expr_stmt|;
block|}
specifier|final
name|Collection
name|secTest2
init|=
name|root
operator|.
name|getChildCollection
argument_list|(
literal|"securityTest2"
argument_list|)
decl_stmt|;
if|if
condition|(
name|secTest2
operator|!=
literal|null
condition|)
block|{
name|secTest2
operator|.
name|close
argument_list|()
expr_stmt|;
name|cms
operator|.
name|removeCollection
argument_list|(
literal|"securityTest2"
argument_list|)
expr_stmt|;
block|}
specifier|final
name|Collection
name|secTest3
init|=
name|root
operator|.
name|getChildCollection
argument_list|(
literal|"securityTest3"
argument_list|)
decl_stmt|;
if|if
condition|(
name|secTest3
operator|!=
literal|null
condition|)
block|{
name|secTest3
operator|.
name|close
argument_list|()
expr_stmt|;
name|cms
operator|.
name|removeCollection
argument_list|(
literal|"securityTest3"
argument_list|)
expr_stmt|;
block|}
specifier|final
name|UserManagementService
name|ums
init|=
operator|(
name|UserManagementService
operator|)
name|root
operator|.
name|getService
argument_list|(
literal|"UserManagementService"
argument_list|,
literal|"1.0"
argument_list|)
decl_stmt|;
comment|//remove accounts 'test1', 'test2' and 'test3'
name|removeAccounts
argument_list|(
name|ums
argument_list|,
operator|new
name|String
index|[]
block|{
literal|"test1"
block|,
literal|"test2"
block|,
literal|"test3"
block|}
argument_list|)
expr_stmt|;
comment|//remove group 'users'
name|removeGroups
argument_list|(
name|ums
argument_list|,
operator|new
name|String
index|[]
block|{
literal|"users"
block|,
literal|"extusers"
block|}
argument_list|)
expr_stmt|;
block|}
specifier|private
name|void
name|removeAccounts
parameter_list|(
specifier|final
name|UserManagementService
name|ums
parameter_list|,
specifier|final
name|String
index|[]
name|accountNames
parameter_list|)
throws|throws
name|XMLDBException
block|{
specifier|final
name|Account
index|[]
name|accounts
init|=
name|ums
operator|.
name|getAccounts
argument_list|()
decl_stmt|;
for|for
control|(
specifier|final
name|Account
name|account
range|:
name|accounts
control|)
block|{
for|for
control|(
specifier|final
name|String
name|accountName
range|:
name|accountNames
control|)
block|{
if|if
condition|(
name|account
operator|.
name|getName
argument_list|()
operator|.
name|equals
argument_list|(
name|accountName
argument_list|)
condition|)
block|{
name|ums
operator|.
name|removeAccount
argument_list|(
name|account
argument_list|)
expr_stmt|;
break|break;
block|}
block|}
block|}
block|}
specifier|private
name|void
name|removeGroups
parameter_list|(
specifier|final
name|UserManagementService
name|ums
parameter_list|,
specifier|final
name|String
index|[]
name|groupNames
parameter_list|)
throws|throws
name|XMLDBException
block|{
specifier|final
name|String
index|[]
name|groups
init|=
name|ums
operator|.
name|getGroups
argument_list|()
decl_stmt|;
for|for
control|(
specifier|final
name|String
name|group
range|:
name|groups
control|)
block|{
for|for
control|(
specifier|final
name|String
name|groupName
range|:
name|groupNames
control|)
block|{
if|if
condition|(
name|group
operator|.
name|equals
argument_list|(
name|groupName
argument_list|)
condition|)
block|{
name|ums
operator|.
name|removeGroup
argument_list|(
name|ums
operator|.
name|getGroup
argument_list|(
name|group
argument_list|)
argument_list|)
expr_stmt|;
break|break;
block|}
block|}
block|}
block|}
block|}
end_class

end_unit

