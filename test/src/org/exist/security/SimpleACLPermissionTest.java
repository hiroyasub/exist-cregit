begin_unit|revision:1.0.0;language:Java;cregit-version:0.0.1
begin_package
package|package
name|org
operator|.
name|exist
operator|.
name|security
package|;
end_package

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|storage
operator|.
name|io
operator|.
name|VariableByteInputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|ByteArrayInputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|storage
operator|.
name|io
operator|.
name|VariableByteOutputStream
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|Database
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|security
operator|.
name|ACLPermission
operator|.
name|ACE_TARGET
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|security
operator|.
name|ACLPermission
operator|.
name|ACE_ACCESS_TYPE
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|security
operator|.
name|internal
operator|.
name|SecurityManagerImpl
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Random
import|;
end_import

begin_import
import|import
name|org
operator|.
name|easymock
operator|.
name|EasyMock
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|util
operator|.
name|ByteArray
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertTrue
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertFalse
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertEquals
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|easymock
operator|.
name|EasyMock
operator|.
name|replay
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|easymock
operator|.
name|EasyMock
operator|.
name|verify
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|easymock
operator|.
name|EasyMock
operator|.
name|expect
import|;
end_import

begin_comment
comment|/**  *  * @author Adam Retter<adam@exist-db.org>  */
end_comment

begin_class
specifier|public
class|class
name|SimpleACLPermissionTest
block|{
specifier|private
specifier|final
specifier|static
name|int
name|ALL
init|=
name|Permission
operator|.
name|READ
operator||
name|Permission
operator|.
name|WRITE
operator||
name|Permission
operator|.
name|EXECUTE
decl_stmt|;
annotation|@
name|Test
specifier|public
name|void
name|add
parameter_list|()
throws|throws
name|PermissionDeniedException
block|{
specifier|final
name|SecurityManager
name|mockSecurityManager
init|=
name|EasyMock
operator|.
name|createMock
argument_list|(
name|SecurityManager
operator|.
name|class
argument_list|)
decl_stmt|;
specifier|final
name|Database
name|mockDatabase
init|=
name|EasyMock
operator|.
name|createMock
argument_list|(
name|Database
operator|.
name|class
argument_list|)
decl_stmt|;
specifier|final
name|Subject
name|mockCurrentSubject
init|=
name|EasyMock
operator|.
name|createMock
argument_list|(
name|Subject
operator|.
name|class
argument_list|)
decl_stmt|;
comment|//expect(mockSecurityManager.getDatabase()).andReturn(mockDatabase);
comment|//expect(mockDatabase.getCurrentSubject()).andReturn(mockCurrentSubject);
comment|//expect(mockCurrentSubject.hasDbaRole()).andReturn(true);
name|replay
argument_list|(
name|mockSecurityManager
argument_list|,
name|mockDatabase
argument_list|,
name|mockCurrentSubject
argument_list|)
expr_stmt|;
name|SimpleACLPermission
name|permission
init|=
operator|new
name|SimpleACLPermission
argument_list|(
name|mockSecurityManager
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|permission
operator|.
name|getACECount
argument_list|()
argument_list|)
expr_stmt|;
specifier|final
name|int
name|userId
init|=
literal|1
decl_stmt|;
specifier|final
name|int
name|mode
init|=
name|ALL
decl_stmt|;
name|permission
operator|.
name|addUserACE
argument_list|(
name|ACE_ACCESS_TYPE
operator|.
name|ALLOWED
argument_list|,
name|userId
argument_list|,
name|mode
argument_list|)
expr_stmt|;
name|verify
argument_list|(
name|mockSecurityManager
argument_list|,
name|mockDatabase
argument_list|,
name|mockCurrentSubject
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|permission
operator|.
name|getACECount
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|ACE_ACCESS_TYPE
operator|.
name|ALLOWED
argument_list|,
name|permission
operator|.
name|getACEAccessType
argument_list|(
literal|0
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|ACE_TARGET
operator|.
name|USER
argument_list|,
name|permission
operator|.
name|getACETarget
argument_list|(
literal|0
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|userId
argument_list|,
name|permission
operator|.
name|getACEId
argument_list|(
literal|0
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|mode
argument_list|,
name|permission
operator|.
name|getACEMode
argument_list|(
literal|0
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|addACE_ForUserWithModeString
parameter_list|()
throws|throws
name|PermissionDeniedException
block|{
specifier|final
name|SecurityManager
name|mockSecurityManager
init|=
name|EasyMock
operator|.
name|createMock
argument_list|(
name|SecurityManager
operator|.
name|class
argument_list|)
decl_stmt|;
specifier|final
name|Database
name|mockDatabase
init|=
name|EasyMock
operator|.
name|createMock
argument_list|(
name|Database
operator|.
name|class
argument_list|)
decl_stmt|;
specifier|final
name|Subject
name|mockCurrentSubject
init|=
name|EasyMock
operator|.
name|createMock
argument_list|(
name|Subject
operator|.
name|class
argument_list|)
decl_stmt|;
specifier|final
name|Account
name|mockAccount
init|=
name|EasyMock
operator|.
name|createMock
argument_list|(
name|Account
operator|.
name|class
argument_list|)
decl_stmt|;
name|SimpleACLPermission
name|permission
init|=
operator|new
name|SimpleACLPermission
argument_list|(
name|mockSecurityManager
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|permission
operator|.
name|getACECount
argument_list|()
argument_list|)
expr_stmt|;
specifier|final
name|int
name|userId
init|=
literal|1112
decl_stmt|;
specifier|final
name|String
name|userName
init|=
literal|"aretter"
decl_stmt|;
specifier|final
name|String
name|mode
init|=
literal|"rwx"
decl_stmt|;
comment|//expect(mockSecurityManager.getDatabase()).andReturn(mockDatabase);
comment|//expect(mockDatabase.getCurrentSubject()).andReturn(mockCurrentSubject);
comment|//expect(mockCurrentSubject.hasDbaRole()).andReturn(true);
name|expect
argument_list|(
name|mockSecurityManager
operator|.
name|getAccount
argument_list|(
name|userName
argument_list|)
argument_list|)
operator|.
name|andReturn
argument_list|(
name|mockAccount
argument_list|)
expr_stmt|;
name|expect
argument_list|(
name|mockAccount
operator|.
name|getId
argument_list|()
argument_list|)
operator|.
name|andReturn
argument_list|(
name|userId
argument_list|)
expr_stmt|;
name|replay
argument_list|(
name|mockSecurityManager
argument_list|,
name|mockDatabase
argument_list|,
name|mockCurrentSubject
argument_list|,
name|mockAccount
argument_list|)
expr_stmt|;
name|permission
operator|.
name|addACE
argument_list|(
name|ACE_ACCESS_TYPE
operator|.
name|ALLOWED
argument_list|,
name|ACE_TARGET
operator|.
name|USER
argument_list|,
name|userName
argument_list|,
name|mode
argument_list|)
expr_stmt|;
name|verify
argument_list|(
name|mockSecurityManager
argument_list|,
name|mockDatabase
argument_list|,
name|mockCurrentSubject
argument_list|,
name|mockAccount
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|permission
operator|.
name|getACECount
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|userId
argument_list|,
name|permission
operator|.
name|getACEId
argument_list|(
literal|0
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|ACE_ACCESS_TYPE
operator|.
name|ALLOWED
argument_list|,
name|permission
operator|.
name|getACEAccessType
argument_list|(
literal|0
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|ACE_TARGET
operator|.
name|USER
argument_list|,
name|permission
operator|.
name|getACETarget
argument_list|(
literal|0
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|ALL
argument_list|,
name|permission
operator|.
name|getACEMode
argument_list|(
literal|0
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|addACE_ForGroupWithModeString
parameter_list|()
throws|throws
name|PermissionDeniedException
block|{
specifier|final
name|SecurityManager
name|mockSecurityManager
init|=
name|EasyMock
operator|.
name|createMock
argument_list|(
name|SecurityManager
operator|.
name|class
argument_list|)
decl_stmt|;
specifier|final
name|Database
name|mockDatabase
init|=
name|EasyMock
operator|.
name|createMock
argument_list|(
name|Database
operator|.
name|class
argument_list|)
decl_stmt|;
specifier|final
name|Subject
name|mockCurrentSubject
init|=
name|EasyMock
operator|.
name|createMock
argument_list|(
name|Subject
operator|.
name|class
argument_list|)
decl_stmt|;
specifier|final
name|Group
name|mockGroup
init|=
name|EasyMock
operator|.
name|createMock
argument_list|(
name|Group
operator|.
name|class
argument_list|)
decl_stmt|;
name|SimpleACLPermission
name|permission
init|=
operator|new
name|SimpleACLPermission
argument_list|(
name|mockSecurityManager
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|permission
operator|.
name|getACECount
argument_list|()
argument_list|)
expr_stmt|;
specifier|final
name|int
name|groupId
init|=
literal|1112
decl_stmt|;
specifier|final
name|String
name|groupName
init|=
literal|"aretter"
decl_stmt|;
specifier|final
name|String
name|mode
init|=
literal|"rwx"
decl_stmt|;
comment|//expect(mockSecurityManager.getDatabase()).andReturn(mockDatabase);
comment|//expect(mockDatabase.getCurrentSubject()).andReturn(mockCurrentSubject);
comment|//expect(mockCurrentSubject.hasDbaRole()).andReturn(true);
name|expect
argument_list|(
name|mockSecurityManager
operator|.
name|getGroup
argument_list|(
name|groupName
argument_list|)
argument_list|)
operator|.
name|andReturn
argument_list|(
name|mockGroup
argument_list|)
expr_stmt|;
name|expect
argument_list|(
name|mockGroup
operator|.
name|getId
argument_list|()
argument_list|)
operator|.
name|andReturn
argument_list|(
name|groupId
argument_list|)
expr_stmt|;
name|replay
argument_list|(
name|mockSecurityManager
argument_list|,
name|mockDatabase
argument_list|,
name|mockCurrentSubject
argument_list|,
name|mockGroup
argument_list|)
expr_stmt|;
name|permission
operator|.
name|addACE
argument_list|(
name|ACE_ACCESS_TYPE
operator|.
name|ALLOWED
argument_list|,
name|ACE_TARGET
operator|.
name|GROUP
argument_list|,
name|groupName
argument_list|,
name|mode
argument_list|)
expr_stmt|;
name|verify
argument_list|(
name|mockSecurityManager
argument_list|,
name|mockDatabase
argument_list|,
name|mockCurrentSubject
argument_list|,
name|mockGroup
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|permission
operator|.
name|getACECount
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|groupId
argument_list|,
name|permission
operator|.
name|getACEId
argument_list|(
literal|0
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|ACE_ACCESS_TYPE
operator|.
name|ALLOWED
argument_list|,
name|permission
operator|.
name|getACEAccessType
argument_list|(
literal|0
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|ACE_TARGET
operator|.
name|GROUP
argument_list|,
name|permission
operator|.
name|getACETarget
argument_list|(
literal|0
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|ALL
argument_list|,
name|permission
operator|.
name|getACEMode
argument_list|(
literal|0
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|mode
argument_list|,
name|permission
operator|.
name|getACEModeString
argument_list|(
literal|0
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|insert_atFront_whenEmpty
parameter_list|()
throws|throws
name|PermissionDeniedException
block|{
specifier|final
name|SecurityManager
name|mockSecurityManager
init|=
name|EasyMock
operator|.
name|createMock
argument_list|(
name|SecurityManager
operator|.
name|class
argument_list|)
decl_stmt|;
specifier|final
name|Database
name|mockDatabase
init|=
name|EasyMock
operator|.
name|createMock
argument_list|(
name|Database
operator|.
name|class
argument_list|)
decl_stmt|;
specifier|final
name|Subject
name|mockCurrentSubject
init|=
name|EasyMock
operator|.
name|createMock
argument_list|(
name|Subject
operator|.
name|class
argument_list|)
decl_stmt|;
comment|//expect(mockSecurityManager.getDatabase()).andReturn(mockDatabase);
comment|//expect(mockDatabase.getCurrentSubject()).andReturn(mockCurrentSubject);
comment|//expect(mockCurrentSubject.hasDbaRole()).andReturn(true);
name|replay
argument_list|(
name|mockSecurityManager
argument_list|,
name|mockDatabase
argument_list|,
name|mockCurrentSubject
argument_list|)
expr_stmt|;
name|SimpleACLPermission
name|permission
init|=
operator|new
name|SimpleACLPermission
argument_list|(
name|mockSecurityManager
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|permission
operator|.
name|getACECount
argument_list|()
argument_list|)
expr_stmt|;
specifier|final
name|int
name|userId
init|=
literal|1112
decl_stmt|;
specifier|final
name|int
name|mode
init|=
name|ALL
decl_stmt|;
name|permission
operator|.
name|insertUserACE
argument_list|(
literal|0
argument_list|,
name|ACE_ACCESS_TYPE
operator|.
name|ALLOWED
argument_list|,
name|userId
argument_list|,
name|mode
argument_list|)
expr_stmt|;
name|verify
argument_list|(
name|mockSecurityManager
argument_list|,
name|mockDatabase
argument_list|,
name|mockCurrentSubject
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|permission
operator|.
name|getACECount
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|userId
argument_list|,
name|permission
operator|.
name|getACEId
argument_list|(
literal|0
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|ACE_ACCESS_TYPE
operator|.
name|ALLOWED
argument_list|,
name|permission
operator|.
name|getACEAccessType
argument_list|(
literal|0
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|ACE_TARGET
operator|.
name|USER
argument_list|,
name|permission
operator|.
name|getACETarget
argument_list|(
literal|0
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|ALL
argument_list|,
name|permission
operator|.
name|getACEMode
argument_list|(
literal|0
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|insert_atFront
parameter_list|()
throws|throws
name|PermissionDeniedException
block|{
specifier|final
name|SecurityManager
name|mockSecurityManager
init|=
name|EasyMock
operator|.
name|createMock
argument_list|(
name|SecurityManager
operator|.
name|class
argument_list|)
decl_stmt|;
specifier|final
name|Database
name|mockDatabase
init|=
name|EasyMock
operator|.
name|createMock
argument_list|(
name|Database
operator|.
name|class
argument_list|)
decl_stmt|;
specifier|final
name|Subject
name|mockCurrentSubject
init|=
name|EasyMock
operator|.
name|createMock
argument_list|(
name|Subject
operator|.
name|class
argument_list|)
decl_stmt|;
comment|//expect(mockSecurityManager.getDatabase()).andReturn(mockDatabase).times(2);
comment|//expect(mockDatabase.getCurrentSubject()).andReturn(mockCurrentSubject).times(2);
comment|//expect(mockCurrentSubject.hasDbaRole()).andReturn(true).times(2);
name|replay
argument_list|(
name|mockSecurityManager
argument_list|,
name|mockDatabase
argument_list|,
name|mockCurrentSubject
argument_list|)
expr_stmt|;
name|SimpleACLPermission
name|permission
init|=
operator|new
name|SimpleACLPermission
argument_list|(
name|mockSecurityManager
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|permission
operator|.
name|getACECount
argument_list|()
argument_list|)
expr_stmt|;
specifier|final
name|int
name|userId
init|=
literal|1112
decl_stmt|;
specifier|final
name|int
name|mode
init|=
name|ALL
decl_stmt|;
name|permission
operator|.
name|addUserACE
argument_list|(
name|ACE_ACCESS_TYPE
operator|.
name|ALLOWED
argument_list|,
name|userId
argument_list|,
name|mode
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|permission
operator|.
name|getACECount
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|userId
argument_list|,
name|permission
operator|.
name|getACEId
argument_list|(
literal|0
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|ACE_ACCESS_TYPE
operator|.
name|ALLOWED
argument_list|,
name|permission
operator|.
name|getACEAccessType
argument_list|(
literal|0
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|ACE_TARGET
operator|.
name|USER
argument_list|,
name|permission
operator|.
name|getACETarget
argument_list|(
literal|0
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|ALL
argument_list|,
name|permission
operator|.
name|getACEMode
argument_list|(
literal|0
argument_list|)
argument_list|)
expr_stmt|;
specifier|final
name|int
name|secondUserId
init|=
literal|1113
decl_stmt|;
specifier|final
name|int
name|secondMode
init|=
literal|04
decl_stmt|;
name|permission
operator|.
name|insertUserACE
argument_list|(
literal|0
argument_list|,
name|ACE_ACCESS_TYPE
operator|.
name|ALLOWED
argument_list|,
name|secondUserId
argument_list|,
name|secondMode
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|permission
operator|.
name|getACECount
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|secondUserId
argument_list|,
name|permission
operator|.
name|getACEId
argument_list|(
literal|0
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|ACE_ACCESS_TYPE
operator|.
name|ALLOWED
argument_list|,
name|permission
operator|.
name|getACEAccessType
argument_list|(
literal|0
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|ACE_TARGET
operator|.
name|USER
argument_list|,
name|permission
operator|.
name|getACETarget
argument_list|(
literal|0
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|secondMode
argument_list|,
name|permission
operator|.
name|getACEMode
argument_list|(
literal|0
argument_list|)
argument_list|)
expr_stmt|;
name|verify
argument_list|(
name|mockSecurityManager
argument_list|,
name|mockDatabase
argument_list|,
name|mockCurrentSubject
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|insert_inMiddle
parameter_list|()
throws|throws
name|PermissionDeniedException
block|{
specifier|final
name|SecurityManager
name|mockSecurityManager
init|=
name|EasyMock
operator|.
name|createMock
argument_list|(
name|SecurityManager
operator|.
name|class
argument_list|)
decl_stmt|;
specifier|final
name|Database
name|mockDatabase
init|=
name|EasyMock
operator|.
name|createMock
argument_list|(
name|Database
operator|.
name|class
argument_list|)
decl_stmt|;
specifier|final
name|Subject
name|mockCurrentSubject
init|=
name|EasyMock
operator|.
name|createMock
argument_list|(
name|Subject
operator|.
name|class
argument_list|)
decl_stmt|;
comment|//expect(mockSecurityManager.getDatabase()).andReturn(mockDatabase).times(3);
comment|//expect(mockDatabase.getCurrentSubject()).andReturn(mockCurrentSubject).times(3);
comment|//expect(mockCurrentSubject.hasDbaRole()).andReturn(true).times(3);
name|replay
argument_list|(
name|mockSecurityManager
argument_list|,
name|mockDatabase
argument_list|,
name|mockCurrentSubject
argument_list|)
expr_stmt|;
name|SimpleACLPermission
name|permission
init|=
operator|new
name|SimpleACLPermission
argument_list|(
name|mockSecurityManager
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|permission
operator|.
name|getACECount
argument_list|()
argument_list|)
expr_stmt|;
specifier|final
name|int
name|userId
init|=
literal|1112
decl_stmt|;
specifier|final
name|int
name|mode
init|=
name|ALL
decl_stmt|;
name|permission
operator|.
name|addUserACE
argument_list|(
name|ACE_ACCESS_TYPE
operator|.
name|ALLOWED
argument_list|,
name|userId
argument_list|,
name|mode
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|permission
operator|.
name|getACECount
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|userId
argument_list|,
name|permission
operator|.
name|getACEId
argument_list|(
literal|0
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|ACE_ACCESS_TYPE
operator|.
name|ALLOWED
argument_list|,
name|permission
operator|.
name|getACEAccessType
argument_list|(
literal|0
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|ACE_TARGET
operator|.
name|USER
argument_list|,
name|permission
operator|.
name|getACETarget
argument_list|(
literal|0
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|ALL
argument_list|,
name|permission
operator|.
name|getACEMode
argument_list|(
literal|0
argument_list|)
argument_list|)
expr_stmt|;
specifier|final
name|int
name|secondUserId
init|=
literal|1113
decl_stmt|;
specifier|final
name|int
name|secondMode
init|=
literal|04
decl_stmt|;
name|permission
operator|.
name|addUserACE
argument_list|(
name|ACE_ACCESS_TYPE
operator|.
name|ALLOWED
argument_list|,
name|secondUserId
argument_list|,
name|secondMode
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|permission
operator|.
name|getACECount
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|secondUserId
argument_list|,
name|permission
operator|.
name|getACEId
argument_list|(
literal|1
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|ACE_ACCESS_TYPE
operator|.
name|ALLOWED
argument_list|,
name|permission
operator|.
name|getACEAccessType
argument_list|(
literal|1
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|ACE_TARGET
operator|.
name|USER
argument_list|,
name|permission
operator|.
name|getACETarget
argument_list|(
literal|1
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|secondMode
argument_list|,
name|permission
operator|.
name|getACEMode
argument_list|(
literal|1
argument_list|)
argument_list|)
expr_stmt|;
specifier|final
name|int
name|thirdUserId
init|=
literal|1114
decl_stmt|;
specifier|final
name|int
name|thirdMode
init|=
literal|02
decl_stmt|;
name|permission
operator|.
name|insertUserACE
argument_list|(
literal|1
argument_list|,
name|ACE_ACCESS_TYPE
operator|.
name|ALLOWED
argument_list|,
name|thirdUserId
argument_list|,
name|thirdMode
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|3
argument_list|,
name|permission
operator|.
name|getACECount
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|userId
argument_list|,
name|permission
operator|.
name|getACEId
argument_list|(
literal|0
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|ACE_ACCESS_TYPE
operator|.
name|ALLOWED
argument_list|,
name|permission
operator|.
name|getACEAccessType
argument_list|(
literal|0
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|ACE_TARGET
operator|.
name|USER
argument_list|,
name|permission
operator|.
name|getACETarget
argument_list|(
literal|0
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|ALL
argument_list|,
name|permission
operator|.
name|getACEMode
argument_list|(
literal|0
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|thirdUserId
argument_list|,
name|permission
operator|.
name|getACEId
argument_list|(
literal|1
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|ACE_ACCESS_TYPE
operator|.
name|ALLOWED
argument_list|,
name|permission
operator|.
name|getACEAccessType
argument_list|(
literal|1
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|ACE_TARGET
operator|.
name|USER
argument_list|,
name|permission
operator|.
name|getACETarget
argument_list|(
literal|1
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|thirdMode
argument_list|,
name|permission
operator|.
name|getACEMode
argument_list|(
literal|1
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|secondUserId
argument_list|,
name|permission
operator|.
name|getACEId
argument_list|(
literal|2
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|ACE_ACCESS_TYPE
operator|.
name|ALLOWED
argument_list|,
name|permission
operator|.
name|getACEAccessType
argument_list|(
literal|2
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|ACE_TARGET
operator|.
name|USER
argument_list|,
name|permission
operator|.
name|getACETarget
argument_list|(
literal|2
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|secondMode
argument_list|,
name|permission
operator|.
name|getACEMode
argument_list|(
literal|2
argument_list|)
argument_list|)
expr_stmt|;
name|verify
argument_list|(
name|mockSecurityManager
argument_list|,
name|mockDatabase
argument_list|,
name|mockCurrentSubject
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
argument_list|(
name|expected
operator|=
name|PermissionDeniedException
operator|.
name|class
argument_list|)
specifier|public
name|void
name|insert_atEnd
parameter_list|()
throws|throws
name|PermissionDeniedException
block|{
specifier|final
name|SecurityManager
name|mockSecurityManager
init|=
name|EasyMock
operator|.
name|createMock
argument_list|(
name|SecurityManager
operator|.
name|class
argument_list|)
decl_stmt|;
specifier|final
name|Database
name|mockDatabase
init|=
name|EasyMock
operator|.
name|createMock
argument_list|(
name|Database
operator|.
name|class
argument_list|)
decl_stmt|;
specifier|final
name|Subject
name|mockCurrentSubject
init|=
name|EasyMock
operator|.
name|createMock
argument_list|(
name|Subject
operator|.
name|class
argument_list|)
decl_stmt|;
comment|//expect(mockSecurityManager.getDatabase()).andReturn(mockDatabase).times(2);
comment|//expect(mockDatabase.getCurrentSubject()).andReturn(mockCurrentSubject).times(2);
comment|//expect(mockCurrentSubject.hasDbaRole()).andReturn(true).times(2);
name|replay
argument_list|(
name|mockSecurityManager
argument_list|,
name|mockDatabase
argument_list|,
name|mockCurrentSubject
argument_list|)
expr_stmt|;
name|SimpleACLPermission
name|permission
init|=
operator|new
name|SimpleACLPermission
argument_list|(
name|mockSecurityManager
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|permission
operator|.
name|getACECount
argument_list|()
argument_list|)
expr_stmt|;
specifier|final
name|int
name|userId
init|=
literal|1112
decl_stmt|;
specifier|final
name|int
name|mode
init|=
name|ALL
decl_stmt|;
name|permission
operator|.
name|addUserACE
argument_list|(
name|ACE_ACCESS_TYPE
operator|.
name|ALLOWED
argument_list|,
name|userId
argument_list|,
name|mode
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|permission
operator|.
name|getACECount
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|userId
argument_list|,
name|permission
operator|.
name|getACEId
argument_list|(
literal|0
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|ACE_ACCESS_TYPE
operator|.
name|ALLOWED
argument_list|,
name|permission
operator|.
name|getACEAccessType
argument_list|(
literal|0
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|ACE_TARGET
operator|.
name|USER
argument_list|,
name|permission
operator|.
name|getACETarget
argument_list|(
literal|0
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|ALL
argument_list|,
name|permission
operator|.
name|getACEMode
argument_list|(
literal|0
argument_list|)
argument_list|)
expr_stmt|;
specifier|final
name|int
name|secondUserId
init|=
literal|1113
decl_stmt|;
specifier|final
name|int
name|secondMode
init|=
literal|04
decl_stmt|;
name|permission
operator|.
name|insertUserACE
argument_list|(
literal|1
argument_list|,
name|ACE_ACCESS_TYPE
operator|.
name|ALLOWED
argument_list|,
name|secondUserId
argument_list|,
name|secondMode
argument_list|)
expr_stmt|;
name|verify
argument_list|(
name|mockSecurityManager
argument_list|,
name|mockDatabase
argument_list|,
name|mockCurrentSubject
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|remove_firstACE
parameter_list|()
throws|throws
name|PermissionDeniedException
block|{
specifier|final
name|SecurityManager
name|mockSecurityManager
init|=
name|EasyMock
operator|.
name|createMock
argument_list|(
name|SecurityManager
operator|.
name|class
argument_list|)
decl_stmt|;
specifier|final
name|Database
name|mockDatabase
init|=
name|EasyMock
operator|.
name|createMock
argument_list|(
name|Database
operator|.
name|class
argument_list|)
decl_stmt|;
specifier|final
name|Subject
name|mockCurrentSubject
init|=
name|EasyMock
operator|.
name|createMock
argument_list|(
name|Subject
operator|.
name|class
argument_list|)
decl_stmt|;
comment|//expect(mockSecurityManager.getDatabase()).andReturn(mockDatabase).times(3);
comment|//expect(mockDatabase.getCurrentSubject()).andReturn(mockCurrentSubject).times(3);
comment|//expect(mockCurrentSubject.hasDbaRole()).andReturn(true).times(3);
name|replay
argument_list|(
name|mockSecurityManager
argument_list|,
name|mockDatabase
argument_list|,
name|mockCurrentSubject
argument_list|)
expr_stmt|;
name|SimpleACLPermission
name|permission
init|=
operator|new
name|SimpleACLPermission
argument_list|(
name|mockSecurityManager
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|permission
operator|.
name|getACECount
argument_list|()
argument_list|)
expr_stmt|;
name|permission
operator|.
name|addUserACE
argument_list|(
name|ACE_ACCESS_TYPE
operator|.
name|ALLOWED
argument_list|,
literal|1
argument_list|,
name|ALL
argument_list|)
expr_stmt|;
specifier|final
name|int
name|secondUserId
init|=
literal|2
decl_stmt|;
name|permission
operator|.
name|addUserACE
argument_list|(
name|ACE_ACCESS_TYPE
operator|.
name|ALLOWED
argument_list|,
name|secondUserId
argument_list|,
name|ALL
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|permission
operator|.
name|getACECount
argument_list|()
argument_list|)
expr_stmt|;
name|permission
operator|.
name|removeACE
argument_list|(
literal|0
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|permission
operator|.
name|getACECount
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|ACE_ACCESS_TYPE
operator|.
name|ALLOWED
argument_list|,
name|permission
operator|.
name|getACEAccessType
argument_list|(
literal|0
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|ACE_TARGET
operator|.
name|USER
argument_list|,
name|permission
operator|.
name|getACETarget
argument_list|(
literal|0
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|secondUserId
argument_list|,
name|permission
operator|.
name|getACEId
argument_list|(
literal|0
argument_list|)
argument_list|)
expr_stmt|;
name|verify
argument_list|(
name|mockSecurityManager
argument_list|,
name|mockDatabase
argument_list|,
name|mockCurrentSubject
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|remove_middleACE
parameter_list|()
throws|throws
name|PermissionDeniedException
block|{
specifier|final
name|SecurityManager
name|mockSecurityManager
init|=
name|EasyMock
operator|.
name|createMock
argument_list|(
name|SecurityManager
operator|.
name|class
argument_list|)
decl_stmt|;
specifier|final
name|Database
name|mockDatabase
init|=
name|EasyMock
operator|.
name|createMock
argument_list|(
name|Database
operator|.
name|class
argument_list|)
decl_stmt|;
specifier|final
name|Subject
name|mockCurrentSubject
init|=
name|EasyMock
operator|.
name|createMock
argument_list|(
name|Subject
operator|.
name|class
argument_list|)
decl_stmt|;
comment|//expect(mockSecurityManager.getDatabase()).andReturn(mockDatabase).times(4);
comment|//expect(mockDatabase.getCurrentSubject()).andReturn(mockCurrentSubject).times(4);
comment|//expect(mockCurrentSubject.hasDbaRole()).andReturn(true).times(4);
name|replay
argument_list|(
name|mockSecurityManager
argument_list|,
name|mockDatabase
argument_list|,
name|mockCurrentSubject
argument_list|)
expr_stmt|;
name|SimpleACLPermission
name|permission
init|=
operator|new
name|SimpleACLPermission
argument_list|(
name|mockSecurityManager
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|permission
operator|.
name|getACECount
argument_list|()
argument_list|)
expr_stmt|;
specifier|final
name|int
name|firstUserId
init|=
literal|1
decl_stmt|;
name|permission
operator|.
name|addUserACE
argument_list|(
name|ACE_ACCESS_TYPE
operator|.
name|ALLOWED
argument_list|,
name|firstUserId
argument_list|,
name|ALL
argument_list|)
expr_stmt|;
name|permission
operator|.
name|addUserACE
argument_list|(
name|ACE_ACCESS_TYPE
operator|.
name|ALLOWED
argument_list|,
literal|2
argument_list|,
name|ALL
argument_list|)
expr_stmt|;
specifier|final
name|int
name|thirdUserId
init|=
literal|3
decl_stmt|;
name|permission
operator|.
name|addUserACE
argument_list|(
name|ACE_ACCESS_TYPE
operator|.
name|ALLOWED
argument_list|,
name|thirdUserId
argument_list|,
name|ALL
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|3
argument_list|,
name|permission
operator|.
name|getACECount
argument_list|()
argument_list|)
expr_stmt|;
name|permission
operator|.
name|removeACE
argument_list|(
literal|1
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|permission
operator|.
name|getACECount
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|firstUserId
argument_list|,
name|permission
operator|.
name|getACEId
argument_list|(
literal|0
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|thirdUserId
argument_list|,
name|permission
operator|.
name|getACEId
argument_list|(
literal|1
argument_list|)
argument_list|)
expr_stmt|;
name|verify
argument_list|(
name|mockSecurityManager
argument_list|,
name|mockDatabase
argument_list|,
name|mockCurrentSubject
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|remove_lastACE
parameter_list|()
throws|throws
name|PermissionDeniedException
block|{
specifier|final
name|SecurityManager
name|mockSecurityManager
init|=
name|EasyMock
operator|.
name|createMock
argument_list|(
name|SecurityManager
operator|.
name|class
argument_list|)
decl_stmt|;
specifier|final
name|Database
name|mockDatabase
init|=
name|EasyMock
operator|.
name|createMock
argument_list|(
name|Database
operator|.
name|class
argument_list|)
decl_stmt|;
specifier|final
name|Subject
name|mockCurrentSubject
init|=
name|EasyMock
operator|.
name|createMock
argument_list|(
name|Subject
operator|.
name|class
argument_list|)
decl_stmt|;
comment|//expect(mockSecurityManager.getDatabase()).andReturn(mockDatabase).times(3);
comment|//expect(mockDatabase.getCurrentSubject()).andReturn(mockCurrentSubject).times(3);
comment|//expect(mockCurrentSubject.hasDbaRole()).andReturn(true).times(3);
name|replay
argument_list|(
name|mockSecurityManager
argument_list|,
name|mockDatabase
argument_list|,
name|mockCurrentSubject
argument_list|)
expr_stmt|;
name|SimpleACLPermission
name|permission
init|=
operator|new
name|SimpleACLPermission
argument_list|(
name|mockSecurityManager
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|permission
operator|.
name|getACECount
argument_list|()
argument_list|)
expr_stmt|;
specifier|final
name|int
name|firstUserId
init|=
literal|1
decl_stmt|;
name|permission
operator|.
name|addUserACE
argument_list|(
name|ACE_ACCESS_TYPE
operator|.
name|ALLOWED
argument_list|,
name|firstUserId
argument_list|,
name|ALL
argument_list|)
expr_stmt|;
name|permission
operator|.
name|addUserACE
argument_list|(
name|ACE_ACCESS_TYPE
operator|.
name|ALLOWED
argument_list|,
literal|2
argument_list|,
name|ALL
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|permission
operator|.
name|getACECount
argument_list|()
argument_list|)
expr_stmt|;
name|permission
operator|.
name|removeACE
argument_list|(
literal|1
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|permission
operator|.
name|getACECount
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|firstUserId
argument_list|,
name|permission
operator|.
name|getACEId
argument_list|(
literal|0
argument_list|)
argument_list|)
expr_stmt|;
name|verify
argument_list|(
name|mockSecurityManager
argument_list|,
name|mockDatabase
argument_list|,
name|mockCurrentSubject
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|modify
parameter_list|()
throws|throws
name|PermissionDeniedException
block|{
specifier|final
name|SecurityManager
name|mockSecurityManager
init|=
name|EasyMock
operator|.
name|createMock
argument_list|(
name|SecurityManager
operator|.
name|class
argument_list|)
decl_stmt|;
specifier|final
name|Database
name|mockDatabase
init|=
name|EasyMock
operator|.
name|createMock
argument_list|(
name|Database
operator|.
name|class
argument_list|)
decl_stmt|;
specifier|final
name|Subject
name|mockCurrentSubject
init|=
name|EasyMock
operator|.
name|createMock
argument_list|(
name|Subject
operator|.
name|class
argument_list|)
decl_stmt|;
comment|//expect(mockSecurityManager.getDatabase()).andReturn(mockDatabase).times(3);
comment|//expect(mockDatabase.getCurrentSubject()).andReturn(mockCurrentSubject).times(3);
comment|//expect(mockCurrentSubject.hasDbaRole()).andReturn(true).times(3);
name|replay
argument_list|(
name|mockSecurityManager
argument_list|,
name|mockDatabase
argument_list|,
name|mockCurrentSubject
argument_list|)
expr_stmt|;
name|SimpleACLPermission
name|permission
init|=
operator|new
name|SimpleACLPermission
argument_list|(
name|mockSecurityManager
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|permission
operator|.
name|getACECount
argument_list|()
argument_list|)
expr_stmt|;
specifier|final
name|int
name|userId
init|=
literal|1
decl_stmt|;
specifier|final
name|int
name|mode
init|=
name|Permission
operator|.
name|READ
decl_stmt|;
specifier|final
name|ACE_ACCESS_TYPE
name|access_type
init|=
name|ACE_ACCESS_TYPE
operator|.
name|ALLOWED
decl_stmt|;
name|permission
operator|.
name|addUserACE
argument_list|(
name|access_type
argument_list|,
name|userId
argument_list|,
name|mode
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|permission
operator|.
name|getACECount
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|userId
argument_list|,
name|permission
operator|.
name|getACEId
argument_list|(
literal|0
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|access_type
argument_list|,
name|permission
operator|.
name|getACEAccessType
argument_list|(
literal|0
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|ACE_TARGET
operator|.
name|USER
argument_list|,
name|permission
operator|.
name|getACETarget
argument_list|(
literal|0
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|mode
argument_list|,
name|permission
operator|.
name|getACEMode
argument_list|(
literal|0
argument_list|)
argument_list|)
expr_stmt|;
name|permission
operator|.
name|modifyACE
argument_list|(
literal|0
argument_list|,
name|access_type
argument_list|,
name|Permission
operator|.
name|WRITE
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|permission
operator|.
name|getACECount
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|userId
argument_list|,
name|permission
operator|.
name|getACEId
argument_list|(
literal|0
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|access_type
argument_list|,
name|permission
operator|.
name|getACEAccessType
argument_list|(
literal|0
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|ACE_TARGET
operator|.
name|USER
argument_list|,
name|permission
operator|.
name|getACETarget
argument_list|(
literal|0
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|Permission
operator|.
name|WRITE
argument_list|,
name|permission
operator|.
name|getACEMode
argument_list|(
literal|0
argument_list|)
argument_list|)
expr_stmt|;
name|permission
operator|.
name|modifyACE
argument_list|(
literal|0
argument_list|,
name|ACE_ACCESS_TYPE
operator|.
name|DENIED
argument_list|,
name|Permission
operator|.
name|READ
operator||
name|Permission
operator|.
name|WRITE
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|permission
operator|.
name|getACECount
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|userId
argument_list|,
name|permission
operator|.
name|getACEId
argument_list|(
literal|0
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|ACE_TARGET
operator|.
name|USER
argument_list|,
name|permission
operator|.
name|getACETarget
argument_list|(
literal|0
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|ACE_ACCESS_TYPE
operator|.
name|DENIED
argument_list|,
name|permission
operator|.
name|getACEAccessType
argument_list|(
literal|0
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|Permission
operator|.
name|READ
operator||
name|Permission
operator|.
name|WRITE
argument_list|,
name|permission
operator|.
name|getACEMode
argument_list|(
literal|0
argument_list|)
argument_list|)
expr_stmt|;
name|verify
argument_list|(
name|mockSecurityManager
argument_list|,
name|mockDatabase
argument_list|,
name|mockCurrentSubject
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|clear
parameter_list|()
throws|throws
name|PermissionDeniedException
block|{
specifier|final
name|SecurityManager
name|mockSecurityManager
init|=
name|EasyMock
operator|.
name|createMock
argument_list|(
name|SecurityManager
operator|.
name|class
argument_list|)
decl_stmt|;
specifier|final
name|Database
name|mockDatabase
init|=
name|EasyMock
operator|.
name|createMock
argument_list|(
name|Database
operator|.
name|class
argument_list|)
decl_stmt|;
specifier|final
name|Subject
name|mockCurrentSubject
init|=
name|EasyMock
operator|.
name|createMock
argument_list|(
name|Subject
operator|.
name|class
argument_list|)
decl_stmt|;
comment|//expect(mockSecurityManager.getDatabase()).andReturn(mockDatabase).times(3);
comment|//expect(mockDatabase.getCurrentSubject()).andReturn(mockCurrentSubject).times(3);
comment|//expect(mockCurrentSubject.hasDbaRole()).andReturn(true).times(3);
name|replay
argument_list|(
name|mockSecurityManager
argument_list|,
name|mockDatabase
argument_list|,
name|mockCurrentSubject
argument_list|)
expr_stmt|;
name|SimpleACLPermission
name|permission
init|=
operator|new
name|SimpleACLPermission
argument_list|(
name|mockSecurityManager
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|permission
operator|.
name|getACECount
argument_list|()
argument_list|)
expr_stmt|;
name|permission
operator|.
name|addUserACE
argument_list|(
name|ACE_ACCESS_TYPE
operator|.
name|ALLOWED
argument_list|,
literal|1
argument_list|,
name|ALL
argument_list|)
expr_stmt|;
specifier|final
name|int
name|secondUserId
init|=
literal|2
decl_stmt|;
name|permission
operator|.
name|addUserACE
argument_list|(
name|ACE_ACCESS_TYPE
operator|.
name|ALLOWED
argument_list|,
name|secondUserId
argument_list|,
name|ALL
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|permission
operator|.
name|getACECount
argument_list|()
argument_list|)
expr_stmt|;
name|permission
operator|.
name|clear
argument_list|()
expr_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|permission
operator|.
name|getACECount
argument_list|()
argument_list|)
expr_stmt|;
name|verify
argument_list|(
name|mockSecurityManager
argument_list|,
name|mockDatabase
argument_list|,
name|mockCurrentSubject
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|validate_cant_read_when_readNotInACL
parameter_list|()
throws|throws
name|PermissionDeniedException
block|{
specifier|final
name|SecurityManager
name|mockSecurityManager
init|=
name|EasyMock
operator|.
name|createMock
argument_list|(
name|SecurityManager
operator|.
name|class
argument_list|)
decl_stmt|;
specifier|final
name|int
name|ownerId
init|=
operator|new
name|Random
argument_list|()
operator|.
name|nextInt
argument_list|(
name|SecurityManagerImpl
operator|.
name|MAX_USER_ID
argument_list|)
decl_stmt|;
specifier|final
name|int
name|mode
init|=
literal|0700
decl_stmt|;
specifier|final
name|int
name|ownerGroupId
init|=
operator|new
name|Random
argument_list|()
operator|.
name|nextInt
argument_list|(
name|SecurityManagerImpl
operator|.
name|MAX_GROUP_ID
argument_list|)
decl_stmt|;
specifier|final
name|Subject
name|mockUser
init|=
name|EasyMock
operator|.
name|createMock
argument_list|(
name|Subject
operator|.
name|class
argument_list|)
decl_stmt|;
specifier|final
name|boolean
name|mockUserHasDbaRole
init|=
literal|false
decl_stmt|;
specifier|final
name|int
name|mockUserId
init|=
operator|new
name|Random
argument_list|()
operator|.
name|nextInt
argument_list|(
name|SecurityManagerImpl
operator|.
name|MAX_USER_ID
argument_list|)
decl_stmt|;
name|expect
argument_list|(
name|mockUser
operator|.
name|hasDbaRole
argument_list|()
argument_list|)
operator|.
name|andReturn
argument_list|(
name|mockUserHasDbaRole
argument_list|)
expr_stmt|;
name|expect
argument_list|(
name|mockUser
operator|.
name|getId
argument_list|()
argument_list|)
operator|.
name|andReturn
argument_list|(
name|mockUserId
argument_list|)
expr_stmt|;
name|expect
argument_list|(
name|mockUser
operator|.
name|getGroupIds
argument_list|()
argument_list|)
operator|.
name|andReturn
argument_list|(
operator|new
name|int
index|[
literal|0
index|]
argument_list|)
expr_stmt|;
name|replay
argument_list|(
name|mockSecurityManager
argument_list|,
name|mockUser
argument_list|)
expr_stmt|;
name|Permission
name|permission
init|=
operator|new
name|SimpleACLPermission
argument_list|(
name|mockSecurityManager
argument_list|,
name|ownerId
argument_list|,
name|ownerGroupId
argument_list|,
name|mode
argument_list|)
decl_stmt|;
name|boolean
name|isValid
init|=
name|permission
operator|.
name|validate
argument_list|(
name|mockUser
argument_list|,
name|Permission
operator|.
name|READ
argument_list|)
decl_stmt|;
name|verify
argument_list|(
name|mockSecurityManager
argument_list|,
name|mockUser
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|isValid
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|validate_read_when_readInACL
parameter_list|()
throws|throws
name|PermissionDeniedException
block|{
specifier|final
name|SecurityManager
name|mockSecurityManager
init|=
name|EasyMock
operator|.
name|createMock
argument_list|(
name|SecurityManager
operator|.
name|class
argument_list|)
decl_stmt|;
specifier|final
name|Database
name|mockDatabase
init|=
name|EasyMock
operator|.
name|createMock
argument_list|(
name|Database
operator|.
name|class
argument_list|)
decl_stmt|;
specifier|final
name|Subject
name|mockCurrentSubject
init|=
name|EasyMock
operator|.
name|createMock
argument_list|(
name|Subject
operator|.
name|class
argument_list|)
decl_stmt|;
comment|//expect(mockSecurityManager.getDatabase()).andReturn(mockDatabase);
comment|//expect(mockDatabase.getCurrentSubject()).andReturn(mockCurrentSubject);
comment|//expect(mockCurrentSubject.hasDbaRole()).andReturn(true);
specifier|final
name|int
name|ownerId
init|=
operator|new
name|Random
argument_list|()
operator|.
name|nextInt
argument_list|(
name|SecurityManagerImpl
operator|.
name|MAX_USER_ID
argument_list|)
decl_stmt|;
specifier|final
name|int
name|mode
init|=
literal|0700
decl_stmt|;
specifier|final
name|int
name|ownerGroupId
init|=
operator|new
name|Random
argument_list|()
operator|.
name|nextInt
argument_list|(
name|SecurityManagerImpl
operator|.
name|MAX_GROUP_ID
argument_list|)
decl_stmt|;
specifier|final
name|Subject
name|mockUser
init|=
name|EasyMock
operator|.
name|createMock
argument_list|(
name|Subject
operator|.
name|class
argument_list|)
decl_stmt|;
specifier|final
name|boolean
name|mockUserHasDbaRole
init|=
literal|false
decl_stmt|;
specifier|final
name|int
name|mockUserId
init|=
operator|new
name|Random
argument_list|()
operator|.
name|nextInt
argument_list|(
name|SecurityManagerImpl
operator|.
name|MAX_USER_ID
argument_list|)
decl_stmt|;
name|expect
argument_list|(
name|mockUser
operator|.
name|hasDbaRole
argument_list|()
argument_list|)
operator|.
name|andReturn
argument_list|(
name|mockUserHasDbaRole
argument_list|)
expr_stmt|;
name|expect
argument_list|(
name|mockUser
operator|.
name|getId
argument_list|()
argument_list|)
operator|.
name|andReturn
argument_list|(
name|mockUserId
argument_list|)
expr_stmt|;
name|expect
argument_list|(
name|mockUser
operator|.
name|getGroupIds
argument_list|()
argument_list|)
operator|.
name|andReturn
argument_list|(
operator|new
name|int
index|[
literal|0
index|]
argument_list|)
expr_stmt|;
name|replay
argument_list|(
name|mockSecurityManager
argument_list|,
name|mockDatabase
argument_list|,
name|mockCurrentSubject
argument_list|,
name|mockUser
argument_list|)
expr_stmt|;
name|SimpleACLPermission
name|permission
init|=
operator|new
name|SimpleACLPermission
argument_list|(
name|mockSecurityManager
argument_list|,
name|ownerId
argument_list|,
name|ownerGroupId
argument_list|,
name|mode
argument_list|)
decl_stmt|;
name|permission
operator|.
name|addUserACE
argument_list|(
name|ACE_ACCESS_TYPE
operator|.
name|ALLOWED
argument_list|,
name|mockUserId
argument_list|,
name|Permission
operator|.
name|READ
argument_list|)
expr_stmt|;
name|boolean
name|isValid
init|=
name|permission
operator|.
name|validate
argument_list|(
name|mockUser
argument_list|,
name|Permission
operator|.
name|READ
argument_list|)
decl_stmt|;
name|verify
argument_list|(
name|mockSecurityManager
argument_list|,
name|mockDatabase
argument_list|,
name|mockCurrentSubject
argument_list|,
name|mockUser
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|isValid
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|validate_cant_read_ACL_ordered_entries
parameter_list|()
throws|throws
name|PermissionDeniedException
block|{
specifier|final
name|SecurityManager
name|mockSecurityManager
init|=
name|EasyMock
operator|.
name|createMock
argument_list|(
name|SecurityManager
operator|.
name|class
argument_list|)
decl_stmt|;
specifier|final
name|Database
name|mockDatabase
init|=
name|EasyMock
operator|.
name|createMock
argument_list|(
name|Database
operator|.
name|class
argument_list|)
decl_stmt|;
specifier|final
name|Subject
name|mockCurrentSubject
init|=
name|EasyMock
operator|.
name|createMock
argument_list|(
name|Subject
operator|.
name|class
argument_list|)
decl_stmt|;
comment|//expect(mockSecurityManager.getDatabase()).andReturn(mockDatabase).times(2);
comment|//expect(mockDatabase.getCurrentSubject()).andReturn(mockCurrentSubject).times(2);
comment|//expect(mockCurrentSubject.hasDbaRole()).andReturn(true).times(2);
specifier|final
name|int
name|ownerId
init|=
operator|new
name|Random
argument_list|()
operator|.
name|nextInt
argument_list|(
name|SecurityManagerImpl
operator|.
name|MAX_USER_ID
argument_list|)
decl_stmt|;
specifier|final
name|int
name|mode
init|=
literal|0700
decl_stmt|;
specifier|final
name|int
name|ownerGroupId
init|=
operator|new
name|Random
argument_list|()
operator|.
name|nextInt
argument_list|(
name|SecurityManagerImpl
operator|.
name|MAX_GROUP_ID
argument_list|)
decl_stmt|;
comment|/**          * We create ACE entries which has -          * 1) user "userA" who is DENIED READ access          * 2) group "groupA" who is ALLOWED READ access          *          * userA is a member of groupA, and so should still be DENIED read access          * as the ACL is evaluated top-down          *          */
specifier|final
name|Subject
name|mockUser
init|=
name|EasyMock
operator|.
name|createMock
argument_list|(
name|Subject
operator|.
name|class
argument_list|)
decl_stmt|;
specifier|final
name|boolean
name|mockUserHasDbaRole
init|=
literal|false
decl_stmt|;
specifier|final
name|int
name|mockUserId
init|=
operator|new
name|Random
argument_list|()
operator|.
name|nextInt
argument_list|(
name|SecurityManagerImpl
operator|.
name|MAX_USER_ID
argument_list|)
decl_stmt|;
specifier|final
name|int
name|mockGroupId
init|=
operator|new
name|Random
argument_list|()
operator|.
name|nextInt
argument_list|(
name|SecurityManagerImpl
operator|.
name|MAX_GROUP_ID
argument_list|)
decl_stmt|;
name|expect
argument_list|(
name|mockUser
operator|.
name|hasDbaRole
argument_list|()
argument_list|)
operator|.
name|andReturn
argument_list|(
name|mockUserHasDbaRole
argument_list|)
expr_stmt|;
name|expect
argument_list|(
name|mockUser
operator|.
name|getId
argument_list|()
argument_list|)
operator|.
name|andReturn
argument_list|(
name|mockUserId
argument_list|)
expr_stmt|;
name|expect
argument_list|(
name|mockUser
operator|.
name|getGroupIds
argument_list|()
argument_list|)
operator|.
name|andReturn
argument_list|(
operator|new
name|int
index|[
literal|0
index|]
argument_list|)
expr_stmt|;
name|replay
argument_list|(
name|mockSecurityManager
argument_list|,
name|mockDatabase
argument_list|,
name|mockCurrentSubject
argument_list|,
name|mockUser
argument_list|)
expr_stmt|;
name|SimpleACLPermission
name|permission
init|=
operator|new
name|SimpleACLPermission
argument_list|(
name|mockSecurityManager
argument_list|,
name|ownerId
argument_list|,
name|ownerGroupId
argument_list|,
name|mode
argument_list|)
decl_stmt|;
name|permission
operator|.
name|addUserACE
argument_list|(
name|ACE_ACCESS_TYPE
operator|.
name|DENIED
argument_list|,
name|mockUserId
argument_list|,
name|Permission
operator|.
name|READ
argument_list|)
expr_stmt|;
name|permission
operator|.
name|addGroupACE
argument_list|(
name|ACE_ACCESS_TYPE
operator|.
name|ALLOWED
argument_list|,
name|mockGroupId
argument_list|,
name|Permission
operator|.
name|READ
argument_list|)
expr_stmt|;
name|boolean
name|isValid
init|=
name|permission
operator|.
name|validate
argument_list|(
name|mockUser
argument_list|,
name|Permission
operator|.
name|READ
argument_list|)
decl_stmt|;
name|verify
argument_list|(
name|mockSecurityManager
argument_list|,
name|mockDatabase
argument_list|,
name|mockCurrentSubject
argument_list|,
name|mockUser
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|isValid
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|validate_can_write_ACL_ordered_entries
parameter_list|()
throws|throws
name|PermissionDeniedException
block|{
specifier|final
name|SecurityManager
name|mockSecurityManager
init|=
name|EasyMock
operator|.
name|createMock
argument_list|(
name|SecurityManager
operator|.
name|class
argument_list|)
decl_stmt|;
specifier|final
name|Database
name|mockDatabase
init|=
name|EasyMock
operator|.
name|createMock
argument_list|(
name|Database
operator|.
name|class
argument_list|)
decl_stmt|;
specifier|final
name|Subject
name|mockCurrentSubject
init|=
name|EasyMock
operator|.
name|createMock
argument_list|(
name|Subject
operator|.
name|class
argument_list|)
decl_stmt|;
comment|//expect(mockSecurityManager.getDatabase()).andReturn(mockDatabase).times(2);
comment|//expect(mockDatabase.getCurrentSubject()).andReturn(mockCurrentSubject).times(2);
comment|//expect(mockCurrentSubject.hasDbaRole()).andReturn(true).times(2);
specifier|final
name|int
name|ownerId
init|=
operator|new
name|Random
argument_list|()
operator|.
name|nextInt
argument_list|(
name|SecurityManagerImpl
operator|.
name|MAX_USER_ID
argument_list|)
decl_stmt|;
specifier|final
name|int
name|mode
init|=
literal|0700
decl_stmt|;
specifier|final
name|int
name|ownerGroupId
init|=
operator|new
name|Random
argument_list|()
operator|.
name|nextInt
argument_list|(
name|SecurityManagerImpl
operator|.
name|MAX_GROUP_ID
argument_list|)
decl_stmt|;
comment|/**          * We create ACE entries which has -          * 1) user "userA" who is DENIED READ access          * 2) group "groupA" who is ALLOWED WRITE access          *          * userA is a member of groupA, and so should still be ALLOWED write access          * as the ACL is evaluated top-down          *          */
specifier|final
name|Subject
name|mockUser
init|=
name|EasyMock
operator|.
name|createMock
argument_list|(
name|Subject
operator|.
name|class
argument_list|)
decl_stmt|;
specifier|final
name|boolean
name|mockUserHasDbaRole
init|=
literal|false
decl_stmt|;
specifier|final
name|int
name|mockUserId
init|=
operator|new
name|Random
argument_list|()
operator|.
name|nextInt
argument_list|(
name|SecurityManagerImpl
operator|.
name|MAX_USER_ID
argument_list|)
decl_stmt|;
specifier|final
name|int
name|mockGroupId
init|=
operator|new
name|Random
argument_list|()
operator|.
name|nextInt
argument_list|(
name|SecurityManagerImpl
operator|.
name|MAX_GROUP_ID
argument_list|)
decl_stmt|;
name|expect
argument_list|(
name|mockUser
operator|.
name|hasDbaRole
argument_list|()
argument_list|)
operator|.
name|andReturn
argument_list|(
name|mockUserHasDbaRole
argument_list|)
expr_stmt|;
name|expect
argument_list|(
name|mockUser
operator|.
name|getId
argument_list|()
argument_list|)
operator|.
name|andReturn
argument_list|(
name|mockUserId
argument_list|)
expr_stmt|;
name|expect
argument_list|(
name|mockUser
operator|.
name|getGroupIds
argument_list|()
argument_list|)
operator|.
name|andReturn
argument_list|(
operator|new
name|int
index|[]
block|{
name|mockGroupId
block|}
argument_list|)
expr_stmt|;
name|replay
argument_list|(
name|mockSecurityManager
argument_list|,
name|mockDatabase
argument_list|,
name|mockCurrentSubject
argument_list|,
name|mockUser
argument_list|)
expr_stmt|;
name|SimpleACLPermission
name|permission
init|=
operator|new
name|SimpleACLPermission
argument_list|(
name|mockSecurityManager
argument_list|,
name|ownerId
argument_list|,
name|ownerGroupId
argument_list|,
name|mode
argument_list|)
decl_stmt|;
name|permission
operator|.
name|addUserACE
argument_list|(
name|ACE_ACCESS_TYPE
operator|.
name|DENIED
argument_list|,
name|mockUserId
argument_list|,
name|Permission
operator|.
name|READ
argument_list|)
expr_stmt|;
name|permission
operator|.
name|addGroupACE
argument_list|(
name|ACE_ACCESS_TYPE
operator|.
name|ALLOWED
argument_list|,
name|mockGroupId
argument_list|,
name|Permission
operator|.
name|WRITE
argument_list|)
expr_stmt|;
name|boolean
name|isValid
init|=
name|permission
operator|.
name|validate
argument_list|(
name|mockUser
argument_list|,
name|Permission
operator|.
name|WRITE
argument_list|)
decl_stmt|;
name|verify
argument_list|(
name|mockSecurityManager
argument_list|,
name|mockUser
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|isValid
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|roundtrip_write_read
parameter_list|()
throws|throws
name|PermissionDeniedException
throws|,
name|IOException
block|{
specifier|final
name|SecurityManager
name|mockSecurityManager
init|=
name|EasyMock
operator|.
name|createMock
argument_list|(
name|SecurityManager
operator|.
name|class
argument_list|)
decl_stmt|;
specifier|final
name|Database
name|mockDatabase
init|=
name|EasyMock
operator|.
name|createMock
argument_list|(
name|Database
operator|.
name|class
argument_list|)
decl_stmt|;
specifier|final
name|Subject
name|mockCurrentSubject
init|=
name|EasyMock
operator|.
name|createMock
argument_list|(
name|Subject
operator|.
name|class
argument_list|)
decl_stmt|;
name|replay
argument_list|(
name|mockSecurityManager
argument_list|,
name|mockDatabase
argument_list|,
name|mockCurrentSubject
argument_list|)
expr_stmt|;
name|SimpleACLPermission
name|permission
init|=
operator|new
name|SimpleACLPermission
argument_list|(
name|mockSecurityManager
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|permission
operator|.
name|getACECount
argument_list|()
argument_list|)
expr_stmt|;
specifier|final
name|int
name|userId1
init|=
literal|1
decl_stmt|;
specifier|final
name|int
name|mode1
init|=
name|ALL
decl_stmt|;
name|permission
operator|.
name|addUserACE
argument_list|(
name|ACE_ACCESS_TYPE
operator|.
name|ALLOWED
argument_list|,
name|userId1
argument_list|,
name|mode1
argument_list|)
expr_stmt|;
specifier|final
name|int
name|groupId2
init|=
literal|2
decl_stmt|;
specifier|final
name|int
name|mode2
init|=
name|Permission
operator|.
name|READ
decl_stmt|;
name|permission
operator|.
name|addGroupACE
argument_list|(
name|ACE_ACCESS_TYPE
operator|.
name|DENIED
argument_list|,
name|groupId2
argument_list|,
name|mode2
argument_list|)
expr_stmt|;
specifier|final
name|VariableByteOutputStream
name|os
init|=
operator|new
name|VariableByteOutputStream
argument_list|()
decl_stmt|;
comment|//write the acl out
name|permission
operator|.
name|write
argument_list|(
name|os
argument_list|)
expr_stmt|;
name|verify
argument_list|(
name|mockSecurityManager
argument_list|,
name|mockDatabase
argument_list|,
name|mockCurrentSubject
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|permission
operator|.
name|getACECount
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|ACE_ACCESS_TYPE
operator|.
name|ALLOWED
argument_list|,
name|permission
operator|.
name|getACEAccessType
argument_list|(
literal|0
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|userId1
argument_list|,
name|permission
operator|.
name|getACEId
argument_list|(
literal|0
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|ACE_TARGET
operator|.
name|USER
argument_list|,
name|permission
operator|.
name|getACETarget
argument_list|(
literal|0
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|mode1
argument_list|,
name|permission
operator|.
name|getACEMode
argument_list|(
literal|0
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|ACE_ACCESS_TYPE
operator|.
name|DENIED
argument_list|,
name|permission
operator|.
name|getACEAccessType
argument_list|(
literal|1
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|groupId2
argument_list|,
name|permission
operator|.
name|getACEId
argument_list|(
literal|1
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|ACE_TARGET
operator|.
name|GROUP
argument_list|,
name|permission
operator|.
name|getACETarget
argument_list|(
literal|1
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|mode2
argument_list|,
name|permission
operator|.
name|getACEMode
argument_list|(
literal|1
argument_list|)
argument_list|)
expr_stmt|;
comment|//get the written acl data
name|ByteArray
name|buf
init|=
name|os
operator|.
name|data
argument_list|()
decl_stmt|;
name|byte
name|data
index|[]
init|=
operator|new
name|byte
index|[
name|buf
operator|.
name|size
argument_list|()
index|]
decl_stmt|;
name|buf
operator|.
name|copyTo
argument_list|(
name|data
argument_list|,
literal|0
argument_list|)
expr_stmt|;
comment|//create a new permission instance
name|SimpleACLPermission
name|permission2
init|=
operator|new
name|SimpleACLPermission
argument_list|(
name|mockSecurityManager
argument_list|)
decl_stmt|;
comment|//read the acl in
name|permission2
operator|.
name|read
argument_list|(
operator|new
name|VariableByteInputStream
argument_list|(
operator|new
name|ByteArrayInputStream
argument_list|(
name|data
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|permission2
operator|.
name|getACECount
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|ACE_ACCESS_TYPE
operator|.
name|ALLOWED
argument_list|,
name|permission2
operator|.
name|getACEAccessType
argument_list|(
literal|0
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|userId1
argument_list|,
name|permission2
operator|.
name|getACEId
argument_list|(
literal|0
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|ACE_TARGET
operator|.
name|USER
argument_list|,
name|permission2
operator|.
name|getACETarget
argument_list|(
literal|0
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|mode1
argument_list|,
name|permission2
operator|.
name|getACEMode
argument_list|(
literal|0
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|ACE_ACCESS_TYPE
operator|.
name|DENIED
argument_list|,
name|permission2
operator|.
name|getACEAccessType
argument_list|(
literal|1
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|groupId2
argument_list|,
name|permission2
operator|.
name|getACEId
argument_list|(
literal|1
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|ACE_TARGET
operator|.
name|GROUP
argument_list|,
name|permission2
operator|.
name|getACETarget
argument_list|(
literal|1
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|mode2
argument_list|,
name|permission2
operator|.
name|getACEMode
argument_list|(
literal|1
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

