begin_unit|revision:1.0.0;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  *  eXist Open Source Native XML Database  *  Copyright (C) 2009 The eXist Project  *  http://exist-db.org  *  *  This program is free software; you can redistribute it and/or  *  modify it under the terms of the GNU Lesser General Public License  *  as published by the Free Software Foundation; either version 2  *  of the License, or (at your option) any later version.  *  *  This program is distributed in the hope that it will be useful,  *  but WITHOUT ANY WARRANTY; without even the implied warranty of  *  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the  *  GNU Lesser General Public License for more details.  *  *  You should have received a copy of the GNU Lesser General Public  *  License along with this library; if not, write to the Free Software  *  Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA  02110-1301  USA  *  * $Id$  */
end_comment

begin_package
package|package
name|org
operator|.
name|exist
operator|.
name|util
operator|.
name|sorters
package|;
end_package

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|dom
operator|.
name|NodeProxy
import|;
end_import

begin_comment
comment|/**  * Mock NodeProxy.  *<p>  * This work was undertaken as part of the development of the taxonomic  * repository at http://biodiversity.org.au . See<A  * href="ghw-at-anbg.gov.au">Greg&nbsp;Whitbread</A> for further details.  *   * @author pmurray@bigpond.com  * @author pmurray@anbg.gov.au  * @author https://sourceforge.net/users/paulmurray  * @author http://www.users.bigpond.com/pmurray  * @see NodeProxy  *   */
end_comment

begin_class
class|class
name|SortTestNodeProxy
extends|extends
name|NodeProxy
block|{
specifier|final
name|int
name|val
decl_stmt|;
specifier|public
name|SortTestNodeProxy
parameter_list|(
name|int
name|id
parameter_list|,
name|int
name|val
parameter_list|)
block|{
name|super
argument_list|(
literal|null
argument_list|,
operator|new
name|SortTestNodeId
argument_list|(
name|id
argument_list|)
argument_list|)
expr_stmt|;
name|this
operator|.
name|val
operator|=
name|val
expr_stmt|;
block|}
specifier|public
name|int
name|compareTo
parameter_list|(
name|NodeProxy
name|o
parameter_list|)
block|{
if|if
condition|(
name|val
operator|<
literal|0
condition|)
throw|throw
operator|new
name|IllegalStateException
argument_list|(
literal|"Sort ought not be looking at the value"
argument_list|)
throw|;
if|if
condition|(
operator|!
operator|(
name|o
operator|instanceof
name|SortTestNodeProxy
operator|)
condition|)
throw|throw
operator|new
name|IllegalStateException
argument_list|(
literal|"Test implementation limitation hit"
argument_list|)
throw|;
return|return
name|val
operator|-
operator|(
operator|(
name|SortTestNodeProxy
operator|)
name|o
operator|)
operator|.
name|val
return|;
block|}
empty_stmt|;
specifier|public
name|SortTestNodeId
name|getNodeId
parameter_list|()
block|{
return|return
operator|(
name|SortTestNodeId
operator|)
name|super
operator|.
name|getNodeId
argument_list|()
return|;
block|}
block|}
end_class

end_unit

