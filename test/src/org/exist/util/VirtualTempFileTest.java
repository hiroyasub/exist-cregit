begin_unit|revision:1.0.0;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  *  eXist Open Source Native XML Database  *  Copyright (C) 2011 The eXist Project  *  http://exist.sourceforge.net  *    *  This program is free software; you can redistribute it and/or  *  modify it under the terms of the GNU Lesser General Public License  *  as published by the Free Software Foundation; either version 2  *  of the License, or (at your option) any later version.  *    *  This program is distributed in the hope that it will be useful,  *  but WITHOUT ANY WARRANTY; without even the implied warranty of  *  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the  *  GNU Lesser General Public License for more details.  *    *  You should have received a copy of the GNU Lesser General Public License  *  along with this program; if not, write to the Free Software  *  Foundation, Inc., 675 Mass Ave, Cambridge, MA 02139, USA.  */
end_comment

begin_package
package|package
name|org
operator|.
name|exist
operator|.
name|util
package|;
end_package

begin_import
import|import
name|com
operator|.
name|googlecode
operator|.
name|junittoolbox
operator|.
name|ParallelRunner
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|io
operator|.
name|output
operator|.
name|ByteArrayOutputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|File
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Assert
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|runner
operator|.
name|RunWith
import|;
end_import

begin_import
import|import static
name|java
operator|.
name|nio
operator|.
name|charset
operator|.
name|StandardCharsets
operator|.
name|UTF_8
import|;
end_import

begin_comment
comment|/*  * VirtualTempFileTest.java  * A test battery for the VirtualTempFile class  *   * @author jmfernandez  */
end_comment

begin_class
annotation|@
name|RunWith
argument_list|(
name|ParallelRunner
operator|.
name|class
argument_list|)
specifier|public
class|class
name|VirtualTempFileTest
block|{
annotation|@
name|Test
specifier|public
name|void
name|testWriteSwitch
parameter_list|()
throws|throws
name|IOException
block|{
name|byte
index|[]
name|testString
init|=
literal|"teststring"
operator|.
name|getBytes
argument_list|(
name|UTF_8
argument_list|)
decl_stmt|;
name|int
name|testStringLength
init|=
name|testString
operator|.
name|length
decl_stmt|;
comment|// Test1, no temp file
name|VirtualTempFile
name|vtempFile
init|=
operator|new
name|VirtualTempFile
argument_list|(
name|testStringLength
operator|+
literal|100
argument_list|,
name|testStringLength
operator|+
literal|100
argument_list|)
decl_stmt|;
name|vtempFile
operator|.
name|write
argument_list|(
name|testString
argument_list|,
literal|0
argument_list|,
name|testStringLength
argument_list|)
expr_stmt|;
name|vtempFile
operator|.
name|close
argument_list|()
expr_stmt|;
name|Assert
operator|.
name|assertFalse
argument_list|(
name|vtempFile
operator|.
name|getContent
argument_list|()
operator|instanceof
name|File
argument_list|)
expr_stmt|;
comment|// Test2, temp file
name|vtempFile
operator|=
operator|new
name|VirtualTempFile
argument_list|(
name|testStringLength
operator|-
literal|3
argument_list|,
name|testStringLength
operator|-
literal|3
argument_list|)
expr_stmt|;
name|vtempFile
operator|.
name|write
argument_list|(
name|testString
argument_list|,
literal|0
argument_list|,
name|testStringLength
argument_list|)
expr_stmt|;
name|vtempFile
operator|.
name|close
argument_list|()
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|vtempFile
operator|.
name|getContent
argument_list|()
operator|instanceof
name|File
argument_list|)
expr_stmt|;
comment|// Test3, no temp file just at the limit
name|vtempFile
operator|=
operator|new
name|VirtualTempFile
argument_list|(
name|testStringLength
argument_list|,
name|testStringLength
argument_list|)
expr_stmt|;
name|vtempFile
operator|.
name|write
argument_list|(
name|testString
argument_list|,
literal|0
argument_list|,
name|testStringLength
argument_list|)
expr_stmt|;
name|vtempFile
operator|.
name|close
argument_list|()
expr_stmt|;
name|Assert
operator|.
name|assertFalse
argument_list|(
name|vtempFile
operator|.
name|getContent
argument_list|()
operator|instanceof
name|File
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testLength
parameter_list|()
throws|throws
name|IOException
block|{
name|byte
index|[]
name|testString
init|=
literal|"teststring"
operator|.
name|getBytes
argument_list|(
name|UTF_8
argument_list|)
decl_stmt|;
name|byte
index|[]
name|testString2
init|=
literal|"teststring2"
operator|.
name|getBytes
argument_list|(
name|UTF_8
argument_list|)
decl_stmt|;
name|int
name|testStringLength
init|=
name|testString
operator|.
name|length
decl_stmt|;
comment|// Test1, no temp file
name|VirtualTempFile
name|vtempFile
init|=
operator|new
name|VirtualTempFile
argument_list|(
name|testStringLength
operator|+
literal|100
argument_list|,
name|testStringLength
operator|+
literal|100
argument_list|)
decl_stmt|;
name|vtempFile
operator|.
name|write
argument_list|(
name|testString
argument_list|,
literal|0
argument_list|,
name|testStringLength
argument_list|)
expr_stmt|;
name|vtempFile
operator|.
name|close
argument_list|()
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|"Length must match"
argument_list|,
name|testStringLength
argument_list|,
name|vtempFile
operator|.
name|length
argument_list|()
argument_list|)
expr_stmt|;
comment|// Test2, temp file
name|vtempFile
operator|=
operator|new
name|VirtualTempFile
argument_list|(
name|testStringLength
operator|-
literal|3
argument_list|,
name|testStringLength
operator|-
literal|3
argument_list|)
expr_stmt|;
name|vtempFile
operator|.
name|write
argument_list|(
name|testString
argument_list|,
literal|0
argument_list|,
name|testStringLength
argument_list|)
expr_stmt|;
name|vtempFile
operator|.
name|close
argument_list|()
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|"Length must match"
argument_list|,
name|testStringLength
argument_list|,
name|vtempFile
operator|.
name|length
argument_list|()
argument_list|)
expr_stmt|;
comment|// Test3, several writes
name|vtempFile
operator|=
operator|new
name|VirtualTempFile
argument_list|(
name|testStringLength
argument_list|,
name|testStringLength
argument_list|)
expr_stmt|;
name|vtempFile
operator|.
name|write
argument_list|(
name|testString
argument_list|,
literal|0
argument_list|,
name|testStringLength
argument_list|)
expr_stmt|;
name|vtempFile
operator|.
name|write
argument_list|(
name|testString2
argument_list|,
literal|0
argument_list|,
name|testString2
operator|.
name|length
argument_list|)
expr_stmt|;
name|vtempFile
operator|.
name|close
argument_list|()
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|"Length must match"
argument_list|,
name|testStringLength
operator|+
name|testString2
operator|.
name|length
argument_list|,
name|vtempFile
operator|.
name|length
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testCompare
parameter_list|()
throws|throws
name|IOException
block|{
name|byte
index|[]
name|testString
init|=
literal|"teststring"
operator|.
name|getBytes
argument_list|(
name|UTF_8
argument_list|)
decl_stmt|;
name|byte
index|[]
name|testString2
init|=
literal|"teststring2"
operator|.
name|getBytes
argument_list|(
name|UTF_8
argument_list|)
decl_stmt|;
name|int
name|testStringLength
init|=
name|testString
operator|.
name|length
decl_stmt|;
comment|// Test1, no temp file
name|VirtualTempFile
name|vtempFile
init|=
operator|new
name|VirtualTempFile
argument_list|(
name|testStringLength
operator|+
literal|100
argument_list|,
name|testStringLength
operator|+
literal|100
argument_list|)
decl_stmt|;
name|vtempFile
operator|.
name|write
argument_list|(
name|testString
argument_list|,
literal|0
argument_list|,
name|testStringLength
argument_list|)
expr_stmt|;
name|vtempFile
operator|.
name|close
argument_list|()
expr_stmt|;
name|ByteArrayOutputStream
name|baos
init|=
operator|new
name|ByteArrayOutputStream
argument_list|()
decl_stmt|;
name|vtempFile
operator|.
name|writeToStream
argument_list|(
name|baos
argument_list|)
expr_stmt|;
name|baos
operator|.
name|close
argument_list|()
expr_stmt|;
name|Assert
operator|.
name|assertArrayEquals
argument_list|(
literal|"Written content must match"
argument_list|,
name|testString
argument_list|,
name|baos
operator|.
name|toByteArray
argument_list|()
argument_list|)
expr_stmt|;
comment|// Test2, temp file
name|vtempFile
operator|=
operator|new
name|VirtualTempFile
argument_list|(
name|testStringLength
operator|-
literal|3
argument_list|,
name|testStringLength
operator|-
literal|3
argument_list|)
expr_stmt|;
name|vtempFile
operator|.
name|write
argument_list|(
name|testString
argument_list|,
literal|0
argument_list|,
name|testStringLength
argument_list|)
expr_stmt|;
name|vtempFile
operator|.
name|close
argument_list|()
expr_stmt|;
name|baos
operator|=
operator|new
name|ByteArrayOutputStream
argument_list|()
expr_stmt|;
name|vtempFile
operator|.
name|writeToStream
argument_list|(
name|baos
argument_list|)
expr_stmt|;
name|baos
operator|.
name|close
argument_list|()
expr_stmt|;
name|Assert
operator|.
name|assertArrayEquals
argument_list|(
literal|"Written content must match"
argument_list|,
name|testString
argument_list|,
name|baos
operator|.
name|toByteArray
argument_list|()
argument_list|)
expr_stmt|;
comment|// Test3, several writes
name|vtempFile
operator|=
operator|new
name|VirtualTempFile
argument_list|(
name|testStringLength
argument_list|,
name|testStringLength
argument_list|)
expr_stmt|;
name|vtempFile
operator|.
name|write
argument_list|(
name|testString
argument_list|,
literal|0
argument_list|,
name|testStringLength
argument_list|)
expr_stmt|;
name|vtempFile
operator|.
name|write
argument_list|(
name|testString2
argument_list|,
literal|0
argument_list|,
name|testString2
operator|.
name|length
argument_list|)
expr_stmt|;
name|vtempFile
operator|.
name|close
argument_list|()
expr_stmt|;
name|baos
operator|=
operator|new
name|ByteArrayOutputStream
argument_list|()
expr_stmt|;
name|vtempFile
operator|.
name|writeToStream
argument_list|(
name|baos
argument_list|)
expr_stmt|;
name|baos
operator|.
name|close
argument_list|()
expr_stmt|;
name|byte
index|[]
name|joinedTestString
init|=
operator|new
name|byte
index|[
name|testStringLength
operator|+
name|testString2
operator|.
name|length
index|]
decl_stmt|;
name|System
operator|.
name|arraycopy
argument_list|(
name|testString
argument_list|,
literal|0
argument_list|,
name|joinedTestString
argument_list|,
literal|0
argument_list|,
name|testStringLength
argument_list|)
expr_stmt|;
name|System
operator|.
name|arraycopy
argument_list|(
name|testString2
argument_list|,
literal|0
argument_list|,
name|joinedTestString
argument_list|,
name|testStringLength
argument_list|,
name|testString2
operator|.
name|length
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertArrayEquals
argument_list|(
literal|"Written content must match"
argument_list|,
name|joinedTestString
argument_list|,
name|baos
operator|.
name|toByteArray
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

