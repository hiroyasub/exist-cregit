begin_unit|revision:1.0.0;language:Java;cregit-version:0.0.1
begin_package
package|package
name|org
operator|.
name|exist
operator|.
name|util
operator|.
name|serializer
operator|.
name|json
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|StringWriter
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertEquals
import|;
end_import

begin_comment
comment|/**  * @author Adam Retter<adam@exist-db.org>  */
end_comment

begin_class
specifier|public
class|class
name|JSONObjectTest
block|{
annotation|@
name|Test
specifier|public
name|void
name|simpleValue
parameter_list|()
throws|throws
name|IOException
block|{
name|JSONObject
name|root
init|=
operator|new
name|JSONObject
argument_list|(
literal|"root"
argument_list|)
decl_stmt|;
name|JSONObject
name|node
init|=
operator|new
name|JSONObject
argument_list|(
literal|"hello"
argument_list|)
decl_stmt|;
name|node
operator|.
name|addObject
argument_list|(
operator|new
name|JSONValue
argument_list|(
literal|"adam"
argument_list|)
argument_list|)
expr_stmt|;
name|root
operator|.
name|addObject
argument_list|(
name|node
argument_list|)
expr_stmt|;
name|StringWriter
name|writer
init|=
operator|new
name|StringWriter
argument_list|()
decl_stmt|;
name|root
operator|.
name|serialize
argument_list|(
name|writer
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"{ \"hello\" : \"adam\" }"
argument_list|,
name|writer
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
comment|//TODO remove trailing space
block|}
annotation|@
name|Test
specifier|public
name|void
name|simpleLiteral
parameter_list|()
throws|throws
name|IOException
block|{
name|JSONObject
name|root
init|=
operator|new
name|JSONObject
argument_list|(
literal|"root"
argument_list|)
decl_stmt|;
name|JSONObject
name|node
init|=
operator|new
name|JSONObject
argument_list|(
literal|"hello"
argument_list|)
decl_stmt|;
name|JSONValue
name|literalValue
init|=
operator|new
name|JSONValue
argument_list|(
literal|"1"
argument_list|)
decl_stmt|;
name|literalValue
operator|.
name|setSerializationDataType
argument_list|(
name|JSONNode
operator|.
name|SerializationDataType
operator|.
name|AS_LITERAL
argument_list|)
expr_stmt|;
name|node
operator|.
name|addObject
argument_list|(
name|literalValue
argument_list|)
expr_stmt|;
name|root
operator|.
name|addObject
argument_list|(
name|node
argument_list|)
expr_stmt|;
name|StringWriter
name|writer
init|=
operator|new
name|StringWriter
argument_list|()
decl_stmt|;
name|root
operator|.
name|serialize
argument_list|(
name|writer
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"{ \"hello\" : 1 }"
argument_list|,
name|writer
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
comment|//TODO remove trailing space
block|}
annotation|@
name|Test
specifier|public
name|void
name|simpleArray
parameter_list|()
throws|throws
name|IOException
block|{
name|JSONObject
name|root
init|=
operator|new
name|JSONObject
argument_list|(
literal|"root"
argument_list|)
decl_stmt|;
name|JSONObject
name|node
init|=
operator|new
name|JSONObject
argument_list|(
literal|"hello"
argument_list|)
decl_stmt|;
name|node
operator|.
name|addObject
argument_list|(
operator|new
name|JSONValue
argument_list|(
literal|"adam"
argument_list|)
argument_list|)
expr_stmt|;
name|root
operator|.
name|addObject
argument_list|(
name|node
argument_list|)
expr_stmt|;
name|JSONObject
name|node2
init|=
operator|new
name|JSONObject
argument_list|(
literal|"hello"
argument_list|)
decl_stmt|;
name|node2
operator|.
name|addObject
argument_list|(
operator|new
name|JSONValue
argument_list|(
literal|"wolfgang"
argument_list|)
argument_list|)
expr_stmt|;
name|root
operator|.
name|addObject
argument_list|(
name|node2
argument_list|)
expr_stmt|;
name|StringWriter
name|writer
init|=
operator|new
name|StringWriter
argument_list|()
decl_stmt|;
name|root
operator|.
name|serialize
argument_list|(
name|writer
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"{ \"hello\" : [\"adam\", \"wolfgang\"] }"
argument_list|,
name|writer
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
comment|//TODO remove trailing space
block|}
annotation|@
name|Test
specifier|public
name|void
name|literalArray
parameter_list|()
throws|throws
name|IOException
block|{
name|JSONObject
name|root
init|=
operator|new
name|JSONObject
argument_list|(
literal|"root"
argument_list|)
decl_stmt|;
name|JSONObject
name|node
init|=
operator|new
name|JSONObject
argument_list|(
literal|"hello"
argument_list|)
decl_stmt|;
name|JSONValue
name|literalValue1
init|=
operator|new
name|JSONValue
argument_list|(
literal|"1"
argument_list|)
decl_stmt|;
name|literalValue1
operator|.
name|setSerializationDataType
argument_list|(
name|JSONNode
operator|.
name|SerializationDataType
operator|.
name|AS_LITERAL
argument_list|)
expr_stmt|;
name|node
operator|.
name|addObject
argument_list|(
name|literalValue1
argument_list|)
expr_stmt|;
name|root
operator|.
name|addObject
argument_list|(
name|node
argument_list|)
expr_stmt|;
name|JSONObject
name|node2
init|=
operator|new
name|JSONObject
argument_list|(
literal|"hello"
argument_list|)
decl_stmt|;
name|JSONValue
name|literalValue2
init|=
operator|new
name|JSONValue
argument_list|(
literal|"2"
argument_list|)
decl_stmt|;
name|literalValue2
operator|.
name|setSerializationDataType
argument_list|(
name|JSONNode
operator|.
name|SerializationDataType
operator|.
name|AS_LITERAL
argument_list|)
expr_stmt|;
name|node2
operator|.
name|addObject
argument_list|(
name|literalValue2
argument_list|)
expr_stmt|;
name|root
operator|.
name|addObject
argument_list|(
name|node2
argument_list|)
expr_stmt|;
name|StringWriter
name|writer
init|=
operator|new
name|StringWriter
argument_list|()
decl_stmt|;
name|root
operator|.
name|serialize
argument_list|(
name|writer
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"{ \"hello\" : [1, 2] }"
argument_list|,
name|writer
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
comment|//TODO remove trailing space
block|}
annotation|@
name|Test
specifier|public
name|void
name|forcedArray
parameter_list|()
throws|throws
name|IOException
block|{
name|JSONObject
name|root
init|=
operator|new
name|JSONObject
argument_list|(
literal|"root"
argument_list|)
decl_stmt|;
name|JSONObject
name|node
init|=
operator|new
name|JSONObject
argument_list|(
literal|"hello"
argument_list|)
decl_stmt|;
name|node
operator|.
name|setSerializationType
argument_list|(
name|JSONNode
operator|.
name|SerializationType
operator|.
name|AS_ARRAY
argument_list|)
expr_stmt|;
name|node
operator|.
name|addObject
argument_list|(
operator|new
name|JSONValue
argument_list|(
literal|"adam"
argument_list|)
argument_list|)
expr_stmt|;
name|root
operator|.
name|addObject
argument_list|(
name|node
argument_list|)
expr_stmt|;
name|StringWriter
name|writer
init|=
operator|new
name|StringWriter
argument_list|()
decl_stmt|;
name|root
operator|.
name|serialize
argument_list|(
name|writer
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"{ \"hello\" : [\"adam\"] }"
argument_list|,
name|writer
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
comment|//TODO remove trailing space
block|}
annotation|@
name|Test
specifier|public
name|void
name|forcedSimpleArray
parameter_list|()
throws|throws
name|IOException
block|{
name|JSONObject
name|root
init|=
operator|new
name|JSONObject
argument_list|(
literal|"root"
argument_list|)
decl_stmt|;
name|JSONObject
name|node
init|=
operator|new
name|JSONObject
argument_list|(
literal|"hello"
argument_list|)
decl_stmt|;
name|node
operator|.
name|setSerializationType
argument_list|(
name|JSONNode
operator|.
name|SerializationType
operator|.
name|AS_ARRAY
argument_list|)
expr_stmt|;
name|node
operator|.
name|addObject
argument_list|(
operator|new
name|JSONValue
argument_list|(
literal|"adam"
argument_list|)
argument_list|)
expr_stmt|;
name|root
operator|.
name|addObject
argument_list|(
name|node
argument_list|)
expr_stmt|;
name|JSONObject
name|node2
init|=
operator|new
name|JSONObject
argument_list|(
literal|"hello"
argument_list|)
decl_stmt|;
name|node2
operator|.
name|setSerializationType
argument_list|(
name|JSONNode
operator|.
name|SerializationType
operator|.
name|AS_ARRAY
argument_list|)
expr_stmt|;
name|node2
operator|.
name|addObject
argument_list|(
operator|new
name|JSONValue
argument_list|(
literal|"wolfgang"
argument_list|)
argument_list|)
expr_stmt|;
name|root
operator|.
name|addObject
argument_list|(
name|node2
argument_list|)
expr_stmt|;
name|StringWriter
name|writer
init|=
operator|new
name|StringWriter
argument_list|()
decl_stmt|;
name|root
operator|.
name|serialize
argument_list|(
name|writer
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"{ \"hello\" : [\"adam\", \"wolfgang\"] }"
argument_list|,
name|writer
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
comment|//TODO remove trailing space
block|}
annotation|@
name|Test
specifier|public
name|void
name|literalInArrayOfOne
parameter_list|()
throws|throws
name|IOException
block|{
specifier|final
name|JSONObject
name|root
init|=
operator|new
name|JSONObject
argument_list|(
literal|"root"
argument_list|)
decl_stmt|;
specifier|final
name|JSONObject
name|node
init|=
operator|new
name|JSONObject
argument_list|(
literal|"intarray"
argument_list|)
decl_stmt|;
name|node
operator|.
name|setSerializationType
argument_list|(
name|JSONNode
operator|.
name|SerializationType
operator|.
name|AS_ARRAY
argument_list|)
expr_stmt|;
specifier|final
name|JSONValue
name|value
init|=
operator|new
name|JSONValue
argument_list|(
literal|"1"
argument_list|)
decl_stmt|;
name|value
operator|.
name|setSerializationDataType
argument_list|(
name|JSONNode
operator|.
name|SerializationDataType
operator|.
name|AS_LITERAL
argument_list|)
expr_stmt|;
name|node
operator|.
name|addObject
argument_list|(
name|value
argument_list|)
expr_stmt|;
name|root
operator|.
name|addObject
argument_list|(
name|node
argument_list|)
expr_stmt|;
specifier|final
name|StringWriter
name|writer
init|=
operator|new
name|StringWriter
argument_list|()
decl_stmt|;
name|root
operator|.
name|serialize
argument_list|(
name|writer
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"{ \"intarray\" : [1] }"
argument_list|,
name|writer
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|literalInRawArrayOfOne
parameter_list|()
throws|throws
name|IOException
block|{
specifier|final
name|JSONObject
name|root
init|=
operator|new
name|JSONObject
argument_list|(
literal|"root"
argument_list|)
decl_stmt|;
name|root
operator|.
name|setSerializationType
argument_list|(
name|JSONNode
operator|.
name|SerializationType
operator|.
name|AS_ARRAY
argument_list|)
expr_stmt|;
name|root
operator|.
name|setSerializationDataType
argument_list|(
name|JSONNode
operator|.
name|SerializationDataType
operator|.
name|AS_LITERAL
argument_list|)
expr_stmt|;
specifier|final
name|JSONValue
name|value
init|=
operator|new
name|JSONValue
argument_list|(
literal|"1"
argument_list|)
decl_stmt|;
name|value
operator|.
name|setSerializationDataType
argument_list|(
name|JSONNode
operator|.
name|SerializationDataType
operator|.
name|AS_LITERAL
argument_list|)
expr_stmt|;
name|root
operator|.
name|addObject
argument_list|(
name|value
argument_list|)
expr_stmt|;
specifier|final
name|StringWriter
name|writer
init|=
operator|new
name|StringWriter
argument_list|()
decl_stmt|;
name|root
operator|.
name|serialize
argument_list|(
name|writer
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"[1]"
argument_list|,
name|writer
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

