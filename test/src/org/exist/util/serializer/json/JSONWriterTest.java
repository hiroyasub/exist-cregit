begin_unit|revision:1.0.0;language:Java;cregit-version:0.0.1
begin_package
package|package
name|org
operator|.
name|exist
operator|.
name|util
operator|.
name|serializer
operator|.
name|json
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|StringWriter
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|xml
operator|.
name|transform
operator|.
name|TransformerException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|dom
operator|.
name|QName
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertEquals
import|;
end_import

begin_comment
comment|/**  *  * @author Adam Retter<adam@exist-db.org>  */
end_comment

begin_class
specifier|public
class|class
name|JSONWriterTest
block|{
annotation|@
name|Test
specifier|public
name|void
name|nestedArrays
parameter_list|()
throws|throws
name|TransformerException
block|{
comment|//expected result
comment|/*             [ { label: "Foo", data: [ [1, 2], [3, 4] ] },             { label: "Bar", data: [ [5, 6], [7, 8] ] } ]         */
name|QName
name|qnJsonValue
init|=
operator|new
name|QName
argument_list|(
literal|"value"
argument_list|,
name|JSONWriter
operator|.
name|JASON_NS
argument_list|,
literal|"json"
argument_list|)
decl_stmt|;
name|QName
name|qnJsonArray
init|=
operator|new
name|QName
argument_list|(
literal|"array"
argument_list|,
name|JSONWriter
operator|.
name|JASON_NS
argument_list|,
literal|"json"
argument_list|)
decl_stmt|;
name|QName
name|qnLabel
init|=
operator|new
name|QName
argument_list|(
literal|"label"
argument_list|)
decl_stmt|;
name|QName
name|qnData
init|=
operator|new
name|QName
argument_list|(
literal|"data"
argument_list|)
decl_stmt|;
name|int
name|val
init|=
literal|1
decl_stmt|;
name|StringWriter
name|writer
init|=
operator|new
name|StringWriter
argument_list|()
decl_stmt|;
name|JSONWriter
name|jsonWriter
init|=
operator|new
name|JSONWriter
argument_list|(
name|writer
argument_list|)
decl_stmt|;
name|jsonWriter
operator|.
name|startDocument
argument_list|()
expr_stmt|;
name|jsonWriter
operator|.
name|startElement
argument_list|(
name|qnJsonValue
argument_list|)
expr_stmt|;
comment|//jsonWriter.attribute(qnJsonArray, "true");
name|jsonWriter
operator|.
name|startElement
argument_list|(
name|qnJsonValue
argument_list|)
expr_stmt|;
comment|//label : "Foo"
name|jsonWriter
operator|.
name|startElement
argument_list|(
name|qnLabel
argument_list|)
expr_stmt|;
name|jsonWriter
operator|.
name|characters
argument_list|(
operator|new
name|String
argument_list|(
literal|"Foo"
argument_list|)
argument_list|)
expr_stmt|;
name|jsonWriter
operator|.
name|endElement
argument_list|(
name|qnLabel
argument_list|)
expr_stmt|;
comment|//data : [["1","2"]]
name|jsonWriter
operator|.
name|startElement
argument_list|(
name|qnData
argument_list|)
expr_stmt|;
name|jsonWriter
operator|.
name|attribute
argument_list|(
name|qnJsonArray
argument_list|,
literal|"true"
argument_list|)
expr_stmt|;
name|jsonWriter
operator|.
name|startElement
argument_list|(
name|qnJsonValue
argument_list|)
expr_stmt|;
name|jsonWriter
operator|.
name|characters
argument_list|(
name|Integer
operator|.
name|toString
argument_list|(
name|val
operator|++
argument_list|)
argument_list|)
expr_stmt|;
name|jsonWriter
operator|.
name|endElement
argument_list|(
name|qnJsonValue
argument_list|)
expr_stmt|;
name|jsonWriter
operator|.
name|startElement
argument_list|(
name|qnJsonValue
argument_list|)
expr_stmt|;
name|jsonWriter
operator|.
name|characters
argument_list|(
name|Integer
operator|.
name|toString
argument_list|(
name|val
operator|++
argument_list|)
argument_list|)
expr_stmt|;
name|jsonWriter
operator|.
name|endElement
argument_list|(
name|qnJsonValue
argument_list|)
expr_stmt|;
name|jsonWriter
operator|.
name|endElement
argument_list|(
name|qnData
argument_list|)
expr_stmt|;
name|jsonWriter
operator|.
name|endElement
argument_list|(
name|qnJsonValue
argument_list|)
expr_stmt|;
name|jsonWriter
operator|.
name|startElement
argument_list|(
name|qnJsonValue
argument_list|)
expr_stmt|;
comment|//label : "Bar"
name|jsonWriter
operator|.
name|startElement
argument_list|(
name|qnLabel
argument_list|)
expr_stmt|;
name|jsonWriter
operator|.
name|characters
argument_list|(
operator|new
name|String
argument_list|(
literal|"Bar"
argument_list|)
argument_list|)
expr_stmt|;
name|jsonWriter
operator|.
name|endElement
argument_list|(
name|qnLabel
argument_list|)
expr_stmt|;
comment|//data : [["3","4"]]
name|jsonWriter
operator|.
name|startElement
argument_list|(
name|qnData
argument_list|)
expr_stmt|;
name|jsonWriter
operator|.
name|attribute
argument_list|(
name|qnJsonArray
argument_list|,
literal|"true"
argument_list|)
expr_stmt|;
name|jsonWriter
operator|.
name|startElement
argument_list|(
name|qnJsonValue
argument_list|)
expr_stmt|;
name|jsonWriter
operator|.
name|characters
argument_list|(
name|Integer
operator|.
name|toString
argument_list|(
name|val
operator|++
argument_list|)
argument_list|)
expr_stmt|;
name|jsonWriter
operator|.
name|endElement
argument_list|(
name|qnJsonValue
argument_list|)
expr_stmt|;
name|jsonWriter
operator|.
name|startElement
argument_list|(
name|qnJsonValue
argument_list|)
expr_stmt|;
name|jsonWriter
operator|.
name|characters
argument_list|(
name|Integer
operator|.
name|toString
argument_list|(
name|val
operator|++
argument_list|)
argument_list|)
expr_stmt|;
name|jsonWriter
operator|.
name|endElement
argument_list|(
name|qnJsonValue
argument_list|)
expr_stmt|;
name|jsonWriter
operator|.
name|endElement
argument_list|(
name|qnData
argument_list|)
expr_stmt|;
name|jsonWriter
operator|.
name|endElement
argument_list|(
name|qnJsonValue
argument_list|)
expr_stmt|;
name|jsonWriter
operator|.
name|endElement
argument_list|(
name|qnJsonValue
argument_list|)
expr_stmt|;
name|jsonWriter
operator|.
name|endDocument
argument_list|()
expr_stmt|;
name|assertEquals
argument_list|(
literal|"[{ \"label\" : \"Foo\", \"data\" : [[\"1\", \"2\"]]}, { \"label\" : \"Bar\", \"data\" : [[\"3\", \"4\"]]} ]"
argument_list|,
name|writer
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

