begin_unit|revision:1.0.0;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Copyright Â© 2013, Adam Retter All rights reserved.  *  * Redistribution and use in source and binary forms, with or without  * modification, are permitted provided that the following conditions are met: *  * Redistributions of source code must retain the above copyright notice, this  * list of conditions and the following disclaimer. * Redistributions in binary  * form must reproduce the above copyright notice, this list of conditions and  * the following disclaimer in the documentation and/or other materials provided  * with the distribution. * Neither the name of the<organization> nor the names  * of its contributors may be used to endorse or promote products derived from  * this software without specific prior written permission.  *  * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"  * AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE  * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE  * ARE DISCLAIMED. IN NO EVENT SHALL<COPYRIGHT HOLDER> BE LIABLE FOR ANY  * DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES  * (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;  * LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND  * ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT  * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS  * SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.  */
end_comment

begin_package
package|package
name|org
operator|.
name|exist
operator|.
name|util
operator|.
name|io
package|;
end_package

begin_import
import|import
name|com
operator|.
name|googlecode
operator|.
name|junittoolbox
operator|.
name|ParallelParameterized
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|runners
operator|.
name|Parameterized
operator|.
name|Parameters
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collection
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Arrays
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|runner
operator|.
name|RunWith
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|ByteArrayInputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|InputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|lang
operator|.
name|reflect
operator|.
name|Constructor
import|;
end_import

begin_import
import|import
name|java
operator|.
name|lang
operator|.
name|reflect
operator|.
name|InvocationTargetException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Random
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertEquals
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertArrayEquals
import|;
end_import

begin_comment
comment|/**  * Test cases for CachingFilterInputStream  *  * @version 1.0  *  * @author Adam Retter<adam.retter@googlemail.com>  */
end_comment

begin_class
annotation|@
name|RunWith
argument_list|(
name|value
operator|=
name|ParallelParameterized
operator|.
name|class
argument_list|)
specifier|public
class|class
name|CachingFilterInputStreamTest_NonMarkableByteArrayInputStream
block|{
annotation|@
name|Parameters
specifier|public
specifier|static
name|Collection
name|data
parameter_list|()
block|{
name|Object
index|[]
index|[]
name|data
init|=
operator|new
name|Object
index|[]
index|[]
block|{
block|{
name|MemoryFilterInputStreamCache
operator|.
name|class
block|}
block|,
block|{
name|MemoryMappedFileFilterInputStreamCache
operator|.
name|class
block|}
block|,
block|{
name|FileFilterInputStreamCache
operator|.
name|class
block|}
block|}
decl_stmt|;
return|return
name|Arrays
operator|.
name|asList
argument_list|(
name|data
argument_list|)
return|;
block|}
specifier|private
specifier|final
specifier|static
name|int
name|_4KB
init|=
literal|4
operator|*
literal|1024
decl_stmt|;
specifier|private
specifier|final
specifier|static
name|int
name|_6KB
init|=
literal|6
operator|*
literal|1024
decl_stmt|;
specifier|private
specifier|final
specifier|static
name|int
name|_12KB
init|=
literal|12
operator|*
literal|1024
decl_stmt|;
specifier|private
specifier|final
specifier|static
name|int
name|_32KB
init|=
literal|32
operator|*
literal|1024
decl_stmt|;
specifier|private
specifier|final
specifier|static
name|int
name|_64KB
init|=
literal|64
operator|*
literal|1024
decl_stmt|;
specifier|private
specifier|final
name|Class
argument_list|<
name|FilterInputStreamCache
argument_list|>
name|cacheClass
decl_stmt|;
specifier|public
name|CachingFilterInputStreamTest_NonMarkableByteArrayInputStream
parameter_list|(
specifier|final
name|Class
argument_list|<
name|FilterInputStreamCache
argument_list|>
name|cacheClass
parameter_list|)
block|{
name|this
operator|.
name|cacheClass
operator|=
name|cacheClass
expr_stmt|;
block|}
specifier|private
name|FilterInputStreamCache
name|getNewCache
parameter_list|(
name|InputStream
name|is
parameter_list|)
throws|throws
name|InstantiationException
throws|,
name|IllegalAccessException
throws|,
name|NoSuchMethodException
throws|,
name|IllegalArgumentException
throws|,
name|InvocationTargetException
block|{
name|Constructor
name|ctor
init|=
name|cacheClass
operator|.
name|getDeclaredConstructor
argument_list|(
name|InputStream
operator|.
name|class
argument_list|)
decl_stmt|;
name|ctor
operator|.
name|setAccessible
argument_list|(
literal|true
argument_list|)
expr_stmt|;
return|return
operator|(
name|FilterInputStreamCache
operator|)
name|ctor
operator|.
name|newInstance
argument_list|(
name|is
argument_list|)
return|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|readByte
parameter_list|()
throws|throws
name|IOException
throws|,
name|InstantiationException
throws|,
name|IllegalAccessException
throws|,
name|NoSuchMethodException
throws|,
name|IllegalArgumentException
throws|,
name|InvocationTargetException
block|{
specifier|final
name|String
name|testString
init|=
literal|"helloWorld"
decl_stmt|;
specifier|final
name|byte
name|testData
index|[]
init|=
name|testString
operator|.
name|getBytes
argument_list|()
decl_stmt|;
specifier|final
name|InputStream
name|is
init|=
operator|new
name|ByteArrayInputStream
argument_list|(
name|testData
argument_list|)
decl_stmt|;
specifier|final
name|CachingFilterInputStream
name|cfis
init|=
operator|new
name|CachingFilterInputStream
argument_list|(
name|getNewCache
argument_list|(
name|is
argument_list|)
argument_list|)
decl_stmt|;
comment|//read the first 3 bytes
name|assertEquals
argument_list|(
name|testData
index|[
literal|0
index|]
argument_list|,
name|cfis
operator|.
name|read
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|testData
index|[
literal|1
index|]
argument_list|,
name|cfis
operator|.
name|read
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|testData
index|[
literal|2
index|]
argument_list|,
name|cfis
operator|.
name|read
argument_list|()
argument_list|)
expr_stmt|;
comment|//mark position
name|cfis
operator|.
name|mark
argument_list|(
name|Integer
operator|.
name|MAX_VALUE
argument_list|)
expr_stmt|;
comment|//read the next 3 bytes
name|assertEquals
argument_list|(
name|testData
index|[
literal|3
index|]
argument_list|,
name|cfis
operator|.
name|read
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|testData
index|[
literal|4
index|]
argument_list|,
name|cfis
operator|.
name|read
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|testData
index|[
literal|5
index|]
argument_list|,
name|cfis
operator|.
name|read
argument_list|()
argument_list|)
expr_stmt|;
comment|//reset position to the mark
name|cfis
operator|.
name|reset
argument_list|()
expr_stmt|;
comment|//attempt to reread the last 3 bytes from the mark (from the cache)
name|assertEquals
argument_list|(
name|testData
index|[
literal|3
index|]
argument_list|,
name|cfis
operator|.
name|read
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|testData
index|[
literal|4
index|]
argument_list|,
name|cfis
operator|.
name|read
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|testData
index|[
literal|5
index|]
argument_list|,
name|cfis
operator|.
name|read
argument_list|()
argument_list|)
expr_stmt|;
comment|//read the next 2 bytes past the reset mark (past the cache, e.g. from src)
name|assertEquals
argument_list|(
name|testData
index|[
literal|6
index|]
argument_list|,
name|cfis
operator|.
name|read
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|testData
index|[
literal|7
index|]
argument_list|,
name|cfis
operator|.
name|read
argument_list|()
argument_list|)
expr_stmt|;
comment|//reset position to the mark
name|cfis
operator|.
name|reset
argument_list|()
expr_stmt|;
comment|//attempt to read the last 5 bytes (from the cache)
name|assertEquals
argument_list|(
name|testData
index|[
literal|3
index|]
argument_list|,
name|cfis
operator|.
name|read
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|testData
index|[
literal|4
index|]
argument_list|,
name|cfis
operator|.
name|read
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|testData
index|[
literal|5
index|]
argument_list|,
name|cfis
operator|.
name|read
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|testData
index|[
literal|6
index|]
argument_list|,
name|cfis
operator|.
name|read
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|testData
index|[
literal|7
index|]
argument_list|,
name|cfis
operator|.
name|read
argument_list|()
argument_list|)
expr_stmt|;
comment|//mark position
name|cfis
operator|.
name|mark
argument_list|(
operator|-
literal|1
argument_list|)
expr_stmt|;
comment|//read the next 2 bytes past the reset mark (past the cache, e.g. from src)
name|assertEquals
argument_list|(
name|testData
index|[
literal|8
index|]
argument_list|,
name|cfis
operator|.
name|read
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|testData
index|[
literal|9
index|]
argument_list|,
name|cfis
operator|.
name|read
argument_list|()
argument_list|)
expr_stmt|;
comment|//reset position to the mark
name|cfis
operator|.
name|reset
argument_list|()
expr_stmt|;
comment|//attempt to reread the last 2 bytes from the mark (from the cache)
name|assertEquals
argument_list|(
name|testData
index|[
literal|8
index|]
argument_list|,
name|cfis
operator|.
name|read
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|testData
index|[
literal|9
index|]
argument_list|,
name|cfis
operator|.
name|read
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
argument_list|(
name|expected
operator|=
name|IOException
operator|.
name|class
argument_list|)
specifier|public
name|void
name|readByte_onClosedStream
parameter_list|()
throws|throws
name|IOException
throws|,
name|InstantiationException
throws|,
name|IllegalAccessException
throws|,
name|NoSuchMethodException
throws|,
name|IllegalArgumentException
throws|,
name|InvocationTargetException
block|{
specifier|final
name|String
name|testString
init|=
literal|"helloWorld"
decl_stmt|;
specifier|final
name|byte
name|testData
index|[]
init|=
name|testString
operator|.
name|getBytes
argument_list|()
decl_stmt|;
specifier|final
name|InputStream
name|is
init|=
operator|new
name|ByteArrayInputStream
argument_list|(
name|testData
argument_list|)
decl_stmt|;
specifier|final
name|CachingFilterInputStream
name|cfis
init|=
operator|new
name|CachingFilterInputStream
argument_list|(
name|getNewCache
argument_list|(
name|is
argument_list|)
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|testData
index|[
literal|0
index|]
argument_list|,
name|cfis
operator|.
name|read
argument_list|()
argument_list|)
expr_stmt|;
name|cfis
operator|.
name|close
argument_list|()
expr_stmt|;
comment|//should cause IOException
name|cfis
operator|.
name|read
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|readByte_pastEndOfStream_fromCache
parameter_list|()
throws|throws
name|IOException
throws|,
name|InstantiationException
throws|,
name|IllegalAccessException
throws|,
name|NoSuchMethodException
throws|,
name|IllegalArgumentException
throws|,
name|InvocationTargetException
block|{
specifier|final
name|String
name|testString
init|=
literal|"he"
decl_stmt|;
specifier|final
name|byte
name|testData
index|[]
init|=
name|testString
operator|.
name|getBytes
argument_list|()
decl_stmt|;
specifier|final
name|InputStream
name|is
init|=
operator|new
name|ByteArrayInputStream
argument_list|(
name|testData
argument_list|)
decl_stmt|;
specifier|final
name|CachingFilterInputStream
name|cfis
init|=
operator|new
name|CachingFilterInputStream
argument_list|(
name|getNewCache
argument_list|(
name|is
argument_list|)
argument_list|)
decl_stmt|;
name|cfis
operator|.
name|mark
argument_list|(
name|Integer
operator|.
name|MAX_VALUE
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|testData
index|[
literal|0
index|]
argument_list|,
name|cfis
operator|.
name|read
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|testData
index|[
literal|1
index|]
argument_list|,
name|cfis
operator|.
name|read
argument_list|()
argument_list|)
expr_stmt|;
name|cfis
operator|.
name|reset
argument_list|()
expr_stmt|;
name|assertEquals
argument_list|(
name|testData
index|[
literal|0
index|]
argument_list|,
name|cfis
operator|.
name|read
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|testData
index|[
literal|1
index|]
argument_list|,
name|cfis
operator|.
name|read
argument_list|()
argument_list|)
expr_stmt|;
comment|//read byte past end of cache
specifier|final
name|int
name|b
init|=
name|cfis
operator|.
name|read
argument_list|()
decl_stmt|;
name|assertEquals
argument_list|(
operator|-
literal|1
argument_list|,
name|b
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|readByte_pastEndOfStream
parameter_list|()
throws|throws
name|IOException
throws|,
name|InstantiationException
throws|,
name|IllegalAccessException
throws|,
name|NoSuchMethodException
throws|,
name|IllegalArgumentException
throws|,
name|InvocationTargetException
block|{
specifier|final
name|String
name|testString
init|=
literal|"helloWorld"
decl_stmt|;
specifier|final
name|byte
name|testData
index|[]
init|=
name|testString
operator|.
name|getBytes
argument_list|()
decl_stmt|;
specifier|final
name|InputStream
name|is
init|=
operator|new
name|ByteArrayInputStream
argument_list|(
name|testData
argument_list|)
decl_stmt|;
specifier|final
name|CachingFilterInputStream
name|cfis
init|=
operator|new
name|CachingFilterInputStream
argument_list|(
name|getNewCache
argument_list|(
name|is
argument_list|)
argument_list|)
decl_stmt|;
comment|//read all the bytes upto end of stream
name|int
name|b
init|=
operator|-
literal|1
decl_stmt|;
name|int
name|testDataOffset
init|=
literal|0
decl_stmt|;
while|while
condition|(
operator|(
name|b
operator|=
name|cfis
operator|.
name|read
argument_list|()
operator|)
operator|>
operator|-
literal|1
condition|)
block|{
name|assertEquals
argument_list|(
name|testData
index|[
name|testDataOffset
operator|++
index|]
argument_list|,
name|b
argument_list|)
expr_stmt|;
block|}
comment|//read byte past end of stream
name|b
operator|=
name|cfis
operator|.
name|read
argument_list|()
expr_stmt|;
name|assertEquals
argument_list|(
operator|-
literal|1
argument_list|,
name|b
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|readByte_allFromCache
parameter_list|()
throws|throws
name|IOException
throws|,
name|InstantiationException
throws|,
name|IllegalAccessException
throws|,
name|NoSuchMethodException
throws|,
name|IllegalArgumentException
throws|,
name|InvocationTargetException
block|{
specifier|final
name|String
name|testString
init|=
literal|"hello"
decl_stmt|;
specifier|final
name|byte
name|testData
index|[]
init|=
name|testString
operator|.
name|getBytes
argument_list|()
decl_stmt|;
specifier|final
name|InputStream
name|is
init|=
operator|new
name|ByteArrayInputStream
argument_list|(
name|testData
argument_list|)
decl_stmt|;
specifier|final
name|CachingFilterInputStream
name|cfis
init|=
operator|new
name|CachingFilterInputStream
argument_list|(
name|getNewCache
argument_list|(
name|is
argument_list|)
argument_list|)
decl_stmt|;
comment|//mark the position
name|cfis
operator|.
name|mark
argument_list|(
name|Integer
operator|.
name|MAX_VALUE
argument_list|)
expr_stmt|;
comment|//read the data
name|assertEquals
argument_list|(
name|testData
index|[
literal|0
index|]
argument_list|,
name|cfis
operator|.
name|read
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|testData
index|[
literal|1
index|]
argument_list|,
name|cfis
operator|.
name|read
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|testData
index|[
literal|2
index|]
argument_list|,
name|cfis
operator|.
name|read
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|testData
index|[
literal|3
index|]
argument_list|,
name|cfis
operator|.
name|read
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|testData
index|[
literal|4
index|]
argument_list|,
name|cfis
operator|.
name|read
argument_list|()
argument_list|)
expr_stmt|;
comment|//reset position to the mark
name|cfis
operator|.
name|reset
argument_list|()
expr_stmt|;
comment|//attempt to reread the data (from the cache)
name|assertEquals
argument_list|(
name|testData
index|[
literal|0
index|]
argument_list|,
name|cfis
operator|.
name|read
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|testData
index|[
literal|1
index|]
argument_list|,
name|cfis
operator|.
name|read
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|testData
index|[
literal|2
index|]
argument_list|,
name|cfis
operator|.
name|read
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|testData
index|[
literal|3
index|]
argument_list|,
name|cfis
operator|.
name|read
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|testData
index|[
literal|4
index|]
argument_list|,
name|cfis
operator|.
name|read
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|readBytes
parameter_list|()
throws|throws
name|IOException
throws|,
name|InstantiationException
throws|,
name|IllegalAccessException
throws|,
name|NoSuchMethodException
throws|,
name|IllegalArgumentException
throws|,
name|InvocationTargetException
block|{
specifier|final
name|String
name|testString
init|=
literal|"helloWorld"
decl_stmt|;
specifier|final
name|byte
name|testData
index|[]
init|=
name|testString
operator|.
name|getBytes
argument_list|()
decl_stmt|;
specifier|final
name|InputStream
name|is
init|=
operator|new
name|ByteArrayInputStream
argument_list|(
name|testData
argument_list|)
decl_stmt|;
specifier|final
name|CachingFilterInputStream
name|cfis
init|=
operator|new
name|CachingFilterInputStream
argument_list|(
name|getNewCache
argument_list|(
name|is
argument_list|)
argument_list|)
decl_stmt|;
comment|//read the first 3 bytes
name|byte
name|result
index|[]
init|=
operator|new
name|byte
index|[
literal|3
index|]
decl_stmt|;
name|int
name|read
init|=
name|cfis
operator|.
name|read
argument_list|(
name|result
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|3
argument_list|,
name|read
argument_list|)
expr_stmt|;
name|assertArrayEquals
argument_list|(
name|subArray
argument_list|(
name|testData
argument_list|,
literal|3
argument_list|)
argument_list|,
name|result
argument_list|)
expr_stmt|;
comment|//mark position
name|cfis
operator|.
name|mark
argument_list|(
name|Integer
operator|.
name|MAX_VALUE
argument_list|)
expr_stmt|;
comment|//read the next 3 bytes
name|result
operator|=
operator|new
name|byte
index|[
literal|3
index|]
expr_stmt|;
name|read
operator|=
name|cfis
operator|.
name|read
argument_list|(
name|result
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|3
argument_list|,
name|read
argument_list|)
expr_stmt|;
name|assertArrayEquals
argument_list|(
name|subArray
argument_list|(
name|testData
argument_list|,
literal|3
argument_list|,
literal|3
argument_list|)
argument_list|,
name|result
argument_list|)
expr_stmt|;
comment|//reset position to the mark
name|cfis
operator|.
name|reset
argument_list|()
expr_stmt|;
comment|//attempt to reread the last 3 bytes from the mark (from the cache)
name|result
operator|=
operator|new
name|byte
index|[
literal|3
index|]
expr_stmt|;
name|read
operator|=
name|cfis
operator|.
name|read
argument_list|(
name|result
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|3
argument_list|,
name|read
argument_list|)
expr_stmt|;
name|assertArrayEquals
argument_list|(
name|subArray
argument_list|(
name|testData
argument_list|,
literal|3
argument_list|,
literal|3
argument_list|)
argument_list|,
name|result
argument_list|)
expr_stmt|;
comment|//read the next 2 bytes past the reset mark (past the cache, e.g. from src)
name|result
operator|=
operator|new
name|byte
index|[
literal|2
index|]
expr_stmt|;
name|read
operator|=
name|cfis
operator|.
name|read
argument_list|(
name|result
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|read
argument_list|)
expr_stmt|;
name|assertArrayEquals
argument_list|(
name|subArray
argument_list|(
name|testData
argument_list|,
literal|6
argument_list|,
literal|2
argument_list|)
argument_list|,
name|result
argument_list|)
expr_stmt|;
comment|//reset position to the mark
name|cfis
operator|.
name|reset
argument_list|()
expr_stmt|;
comment|//attempt to read the last 5 bytes (from the cache)
name|result
operator|=
operator|new
name|byte
index|[
literal|5
index|]
expr_stmt|;
name|read
operator|=
name|cfis
operator|.
name|read
argument_list|(
name|result
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|5
argument_list|,
name|read
argument_list|)
expr_stmt|;
name|assertArrayEquals
argument_list|(
name|subArray
argument_list|(
name|testData
argument_list|,
literal|3
argument_list|,
literal|5
argument_list|)
argument_list|,
name|result
argument_list|)
expr_stmt|;
comment|//mark position
name|cfis
operator|.
name|mark
argument_list|(
operator|-
literal|1
argument_list|)
expr_stmt|;
comment|//read the next 2 bytes past the reset mark (past the cache, e.g. from src)
name|result
operator|=
operator|new
name|byte
index|[
literal|2
index|]
expr_stmt|;
name|read
operator|=
name|cfis
operator|.
name|read
argument_list|(
name|result
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|read
argument_list|)
expr_stmt|;
name|assertArrayEquals
argument_list|(
name|subArray
argument_list|(
name|testData
argument_list|,
literal|8
argument_list|,
literal|2
argument_list|)
argument_list|,
name|result
argument_list|)
expr_stmt|;
comment|//reset position to the mark
name|cfis
operator|.
name|reset
argument_list|()
expr_stmt|;
comment|//attempt to reread the last 2 bytes from the mark (from the cache)
name|result
operator|=
operator|new
name|byte
index|[
literal|2
index|]
expr_stmt|;
name|read
operator|=
name|cfis
operator|.
name|read
argument_list|(
name|result
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|read
argument_list|)
expr_stmt|;
name|assertArrayEquals
argument_list|(
name|subArray
argument_list|(
name|testData
argument_list|,
literal|8
argument_list|,
literal|2
argument_list|)
argument_list|,
name|result
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
argument_list|(
name|expected
operator|=
name|IOException
operator|.
name|class
argument_list|)
specifier|public
name|void
name|readBytes_onClosedStream
parameter_list|()
throws|throws
name|IOException
throws|,
name|InstantiationException
throws|,
name|IllegalAccessException
throws|,
name|NoSuchMethodException
throws|,
name|IllegalArgumentException
throws|,
name|InvocationTargetException
block|{
specifier|final
name|String
name|testString
init|=
literal|"helloWorld"
decl_stmt|;
specifier|final
name|byte
name|testData
index|[]
init|=
name|testString
operator|.
name|getBytes
argument_list|()
decl_stmt|;
specifier|final
name|InputStream
name|is
init|=
operator|new
name|ByteArrayInputStream
argument_list|(
name|testData
argument_list|)
decl_stmt|;
specifier|final
name|CachingFilterInputStream
name|cfis
init|=
operator|new
name|CachingFilterInputStream
argument_list|(
name|getNewCache
argument_list|(
name|is
argument_list|)
argument_list|)
decl_stmt|;
specifier|final
name|byte
name|result
index|[]
init|=
operator|new
name|byte
index|[
literal|2
index|]
decl_stmt|;
name|cfis
operator|.
name|read
argument_list|(
name|result
argument_list|)
expr_stmt|;
name|assertArrayEquals
argument_list|(
name|subArray
argument_list|(
name|testData
argument_list|,
literal|2
argument_list|)
argument_list|,
name|result
argument_list|)
expr_stmt|;
name|cfis
operator|.
name|close
argument_list|()
expr_stmt|;
comment|//should cause IOException
name|cfis
operator|.
name|read
argument_list|(
name|result
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|readBytes_pastEndOfStream
parameter_list|()
throws|throws
name|IOException
throws|,
name|InstantiationException
throws|,
name|IllegalAccessException
throws|,
name|NoSuchMethodException
throws|,
name|IllegalArgumentException
throws|,
name|InvocationTargetException
block|{
specifier|final
name|String
name|testString
init|=
literal|"helloWorld"
decl_stmt|;
specifier|final
name|byte
name|testData
index|[]
init|=
name|testString
operator|.
name|getBytes
argument_list|()
decl_stmt|;
specifier|final
name|InputStream
name|is
init|=
operator|new
name|ByteArrayInputStream
argument_list|(
name|testData
argument_list|)
decl_stmt|;
specifier|final
name|CachingFilterInputStream
name|cfis
init|=
operator|new
name|CachingFilterInputStream
argument_list|(
name|getNewCache
argument_list|(
name|is
argument_list|)
argument_list|)
decl_stmt|;
specifier|final
name|byte
name|result
index|[]
init|=
operator|new
name|byte
index|[
name|testData
operator|.
name|length
index|]
decl_stmt|;
name|int
name|read
init|=
name|cfis
operator|.
name|read
argument_list|(
name|result
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|testData
operator|.
name|length
argument_list|,
name|read
argument_list|)
expr_stmt|;
name|assertArrayEquals
argument_list|(
name|testData
argument_list|,
name|result
argument_list|)
expr_stmt|;
specifier|final
name|byte
name|endOfStreamResult
index|[]
init|=
operator|new
name|byte
index|[
name|testData
operator|.
name|length
index|]
decl_stmt|;
name|read
operator|=
name|cfis
operator|.
name|read
argument_list|(
name|endOfStreamResult
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
operator|-
literal|1
argument_list|,
name|read
argument_list|)
expr_stmt|;
name|assertArrayEquals
argument_list|(
operator|new
name|byte
index|[]
block|{
literal|0
block|,
literal|0
block|,
literal|0
block|,
literal|0
block|,
literal|0
block|,
literal|0
block|,
literal|0
block|,
literal|0
block|,
literal|0
block|,
literal|0
block|}
argument_list|,
name|endOfStreamResult
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|readBytes_pastEndOfStream_fromCache
parameter_list|()
throws|throws
name|IOException
throws|,
name|InstantiationException
throws|,
name|IllegalAccessException
throws|,
name|NoSuchMethodException
throws|,
name|IllegalArgumentException
throws|,
name|InvocationTargetException
block|{
specifier|final
name|String
name|testString
init|=
literal|"helloWorld"
decl_stmt|;
specifier|final
name|byte
name|testData
index|[]
init|=
name|testString
operator|.
name|getBytes
argument_list|()
decl_stmt|;
specifier|final
name|InputStream
name|is
init|=
operator|new
name|ByteArrayInputStream
argument_list|(
name|testData
argument_list|)
decl_stmt|;
specifier|final
name|CachingFilterInputStream
name|cfis
init|=
operator|new
name|CachingFilterInputStream
argument_list|(
name|getNewCache
argument_list|(
name|is
argument_list|)
argument_list|)
decl_stmt|;
name|cfis
operator|.
name|mark
argument_list|(
name|Integer
operator|.
name|MAX_VALUE
argument_list|)
expr_stmt|;
comment|//read first two bytes from stream
specifier|final
name|byte
name|result
index|[]
init|=
operator|new
name|byte
index|[
literal|2
index|]
decl_stmt|;
name|int
name|read
init|=
name|cfis
operator|.
name|read
argument_list|(
name|result
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|read
argument_list|)
expr_stmt|;
name|assertArrayEquals
argument_list|(
name|subArray
argument_list|(
name|testData
argument_list|,
literal|2
argument_list|)
argument_list|,
name|result
argument_list|)
expr_stmt|;
name|cfis
operator|.
name|reset
argument_list|()
expr_stmt|;
comment|//read all bytes from cache and src, +1 past end of stream
specifier|final
name|byte
name|endOfStreamResult
index|[]
init|=
operator|new
name|byte
index|[
name|testData
operator|.
name|length
operator|+
literal|1
index|]
decl_stmt|;
name|read
operator|=
name|cfis
operator|.
name|read
argument_list|(
name|endOfStreamResult
argument_list|)
expr_stmt|;
specifier|final
name|byte
name|expectedResult
index|[]
init|=
operator|new
name|byte
index|[
name|testData
operator|.
name|length
operator|+
literal|1
index|]
decl_stmt|;
name|System
operator|.
name|arraycopy
argument_list|(
name|testData
argument_list|,
literal|0
argument_list|,
name|expectedResult
argument_list|,
literal|0
argument_list|,
name|testData
operator|.
name|length
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|testData
operator|.
name|length
argument_list|,
name|read
argument_list|)
expr_stmt|;
name|assertArrayEquals
argument_list|(
name|expectedResult
argument_list|,
name|endOfStreamResult
argument_list|)
expr_stmt|;
comment|//2nd attempt to read past end of stream
name|read
operator|=
name|cfis
operator|.
name|read
argument_list|(
name|result
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
operator|-
literal|1
argument_list|,
name|read
argument_list|)
expr_stmt|;
name|read
operator|=
name|cfis
operator|.
name|read
argument_list|(
name|result
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
operator|-
literal|1
argument_list|,
name|read
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|readBytes_allFromCache
parameter_list|()
throws|throws
name|IOException
throws|,
name|InstantiationException
throws|,
name|IllegalAccessException
throws|,
name|NoSuchMethodException
throws|,
name|IllegalArgumentException
throws|,
name|InvocationTargetException
block|{
specifier|final
name|String
name|testString
init|=
literal|"hello"
decl_stmt|;
specifier|final
name|byte
name|testData
index|[]
init|=
name|testString
operator|.
name|getBytes
argument_list|()
decl_stmt|;
specifier|final
name|InputStream
name|is
init|=
operator|new
name|ByteArrayInputStream
argument_list|(
name|testData
argument_list|)
decl_stmt|;
specifier|final
name|CachingFilterInputStream
name|cfis
init|=
operator|new
name|CachingFilterInputStream
argument_list|(
name|getNewCache
argument_list|(
name|is
argument_list|)
argument_list|)
decl_stmt|;
comment|//mark the position
name|cfis
operator|.
name|mark
argument_list|(
name|Integer
operator|.
name|MAX_VALUE
argument_list|)
expr_stmt|;
comment|//read the data
name|byte
name|result
index|[]
init|=
operator|new
name|byte
index|[
name|testData
operator|.
name|length
index|]
decl_stmt|;
name|int
name|read
init|=
name|cfis
operator|.
name|read
argument_list|(
name|result
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|testData
operator|.
name|length
argument_list|,
name|read
argument_list|)
expr_stmt|;
name|assertArrayEquals
argument_list|(
name|testData
argument_list|,
name|result
argument_list|)
expr_stmt|;
comment|//reset position to the mark
name|cfis
operator|.
name|reset
argument_list|()
expr_stmt|;
comment|//attempt to reread the data (from the cache)
name|result
operator|=
operator|new
name|byte
index|[
name|testData
operator|.
name|length
index|]
expr_stmt|;
name|read
operator|=
name|cfis
operator|.
name|read
argument_list|(
name|result
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|testData
operator|.
name|length
argument_list|,
name|read
argument_list|)
expr_stmt|;
name|assertArrayEquals
argument_list|(
name|testData
argument_list|,
name|result
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|readBytes_partFromCache
parameter_list|()
throws|throws
name|IOException
throws|,
name|InstantiationException
throws|,
name|IllegalAccessException
throws|,
name|NoSuchMethodException
throws|,
name|IllegalArgumentException
throws|,
name|InvocationTargetException
block|{
specifier|final
name|String
name|testString
init|=
literal|"helloWorld"
decl_stmt|;
specifier|final
name|byte
name|testData
index|[]
init|=
name|testString
operator|.
name|getBytes
argument_list|()
decl_stmt|;
specifier|final
name|InputStream
name|is
init|=
operator|new
name|ByteArrayInputStream
argument_list|(
name|testData
argument_list|)
decl_stmt|;
specifier|final
name|CachingFilterInputStream
name|cfis
init|=
operator|new
name|CachingFilterInputStream
argument_list|(
name|getNewCache
argument_list|(
name|is
argument_list|)
argument_list|)
decl_stmt|;
comment|//mark the position
name|cfis
operator|.
name|mark
argument_list|(
name|Integer
operator|.
name|MAX_VALUE
argument_list|)
expr_stmt|;
comment|//read the first 5 byts data
name|byte
name|result
index|[]
init|=
operator|new
name|byte
index|[
literal|5
index|]
decl_stmt|;
name|int
name|read
init|=
name|cfis
operator|.
name|read
argument_list|(
name|result
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|5
argument_list|,
name|read
argument_list|)
expr_stmt|;
name|assertArrayEquals
argument_list|(
name|subArray
argument_list|(
name|testData
argument_list|,
literal|5
argument_list|)
argument_list|,
name|result
argument_list|)
expr_stmt|;
comment|//reset position to the mark
name|cfis
operator|.
name|reset
argument_list|()
expr_stmt|;
comment|//attempt to read all the data (first 5 bytes will be from the cache)
name|result
operator|=
operator|new
name|byte
index|[
name|testData
operator|.
name|length
index|]
expr_stmt|;
name|read
operator|=
name|cfis
operator|.
name|read
argument_list|(
name|result
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|testData
operator|.
name|length
argument_list|,
name|read
argument_list|)
expr_stmt|;
name|assertArrayEquals
argument_list|(
name|testData
argument_list|,
name|result
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|readBytes_withZeroOffset_allFromCache
parameter_list|()
throws|throws
name|IOException
throws|,
name|InstantiationException
throws|,
name|IllegalAccessException
throws|,
name|NoSuchMethodException
throws|,
name|IllegalArgumentException
throws|,
name|InvocationTargetException
block|{
specifier|final
name|String
name|testString
init|=
literal|"hello"
decl_stmt|;
specifier|final
name|byte
name|testData
index|[]
init|=
name|testString
operator|.
name|getBytes
argument_list|()
decl_stmt|;
specifier|final
name|InputStream
name|is
init|=
operator|new
name|ByteArrayInputStream
argument_list|(
name|testData
argument_list|)
decl_stmt|;
specifier|final
name|CachingFilterInputStream
name|cfis
init|=
operator|new
name|CachingFilterInputStream
argument_list|(
name|getNewCache
argument_list|(
name|is
argument_list|)
argument_list|)
decl_stmt|;
comment|//mark the position
name|cfis
operator|.
name|mark
argument_list|(
name|Integer
operator|.
name|MAX_VALUE
argument_list|)
expr_stmt|;
comment|//read the data
name|byte
name|result
index|[]
init|=
operator|new
name|byte
index|[
name|testData
operator|.
name|length
index|]
decl_stmt|;
name|int
name|read
init|=
name|cfis
operator|.
name|read
argument_list|(
name|result
argument_list|,
literal|0
argument_list|,
name|testData
operator|.
name|length
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|testData
operator|.
name|length
argument_list|,
name|read
argument_list|)
expr_stmt|;
name|assertArrayEquals
argument_list|(
name|testData
argument_list|,
name|result
argument_list|)
expr_stmt|;
comment|//reset position to the mark
name|cfis
operator|.
name|reset
argument_list|()
expr_stmt|;
comment|//attempt to reread the data (from the cache)
name|result
operator|=
operator|new
name|byte
index|[
name|testData
operator|.
name|length
index|]
expr_stmt|;
name|read
operator|=
name|cfis
operator|.
name|read
argument_list|(
name|result
argument_list|,
literal|0
argument_list|,
name|testData
operator|.
name|length
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|testData
operator|.
name|length
argument_list|,
name|read
argument_list|)
expr_stmt|;
name|assertArrayEquals
argument_list|(
name|testData
argument_list|,
name|result
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|readBytes_withZeroOffset_partFromCache
parameter_list|()
throws|throws
name|IOException
throws|,
name|InstantiationException
throws|,
name|IllegalAccessException
throws|,
name|NoSuchMethodException
throws|,
name|IllegalArgumentException
throws|,
name|InvocationTargetException
block|{
specifier|final
name|String
name|testString
init|=
literal|"helloWorld"
decl_stmt|;
specifier|final
name|byte
name|testData
index|[]
init|=
name|testString
operator|.
name|getBytes
argument_list|()
decl_stmt|;
specifier|final
name|InputStream
name|is
init|=
operator|new
name|ByteArrayInputStream
argument_list|(
name|testData
argument_list|)
decl_stmt|;
specifier|final
name|CachingFilterInputStream
name|cfis
init|=
operator|new
name|CachingFilterInputStream
argument_list|(
name|getNewCache
argument_list|(
name|is
argument_list|)
argument_list|)
decl_stmt|;
comment|//mark the position
name|cfis
operator|.
name|mark
argument_list|(
name|Integer
operator|.
name|MAX_VALUE
argument_list|)
expr_stmt|;
comment|//read the first 5 byts data
name|byte
name|result
index|[]
init|=
operator|new
name|byte
index|[
literal|5
index|]
decl_stmt|;
name|int
name|read
init|=
name|cfis
operator|.
name|read
argument_list|(
name|result
argument_list|,
literal|0
argument_list|,
name|result
operator|.
name|length
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|5
argument_list|,
name|read
argument_list|)
expr_stmt|;
name|assertArrayEquals
argument_list|(
name|subArray
argument_list|(
name|testData
argument_list|,
literal|5
argument_list|)
argument_list|,
name|result
argument_list|)
expr_stmt|;
comment|//reset position to the mark
name|cfis
operator|.
name|reset
argument_list|()
expr_stmt|;
comment|//attempt to read all the data (first 5 bytes will be from the cache)
name|result
operator|=
operator|new
name|byte
index|[
name|testData
operator|.
name|length
index|]
expr_stmt|;
name|read
operator|=
name|cfis
operator|.
name|read
argument_list|(
name|result
argument_list|,
literal|0
argument_list|,
name|result
operator|.
name|length
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|testData
operator|.
name|length
argument_list|,
name|read
argument_list|)
expr_stmt|;
name|assertArrayEquals
argument_list|(
name|testData
argument_list|,
name|result
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|readBytes_withOffsetAndLength_allFromCache
parameter_list|()
throws|throws
name|IOException
throws|,
name|InstantiationException
throws|,
name|IllegalAccessException
throws|,
name|NoSuchMethodException
throws|,
name|IllegalArgumentException
throws|,
name|InvocationTargetException
block|{
specifier|final
name|String
name|testString
init|=
literal|"helloWorld"
decl_stmt|;
specifier|final
name|byte
name|testData
index|[]
init|=
name|testString
operator|.
name|getBytes
argument_list|()
decl_stmt|;
specifier|final
name|InputStream
name|is
init|=
operator|new
name|ByteArrayInputStream
argument_list|(
name|testData
argument_list|)
decl_stmt|;
specifier|final
name|CachingFilterInputStream
name|cfis
init|=
operator|new
name|CachingFilterInputStream
argument_list|(
name|getNewCache
argument_list|(
name|is
argument_list|)
argument_list|)
decl_stmt|;
comment|//mark the position
name|cfis
operator|.
name|mark
argument_list|(
name|Integer
operator|.
name|MAX_VALUE
argument_list|)
expr_stmt|;
comment|//read the data
name|byte
name|result
index|[]
init|=
operator|new
name|byte
index|[
literal|4
index|]
decl_stmt|;
name|int
name|read
init|=
name|cfis
operator|.
name|read
argument_list|(
name|result
argument_list|,
literal|1
argument_list|,
literal|3
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|3
argument_list|,
name|read
argument_list|)
expr_stmt|;
name|byte
name|expected
index|[]
init|=
operator|new
name|byte
index|[
literal|4
index|]
decl_stmt|;
name|expected
index|[
literal|0
index|]
operator|=
literal|0
expr_stmt|;
name|System
operator|.
name|arraycopy
argument_list|(
name|testData
argument_list|,
literal|0
argument_list|,
name|expected
argument_list|,
literal|1
argument_list|,
literal|3
argument_list|)
expr_stmt|;
name|assertArrayEquals
argument_list|(
name|expected
argument_list|,
name|result
argument_list|)
expr_stmt|;
comment|//reset position to the mark
name|cfis
operator|.
name|reset
argument_list|()
expr_stmt|;
comment|//attempt to reread the data (from the cache)
name|result
operator|=
operator|new
name|byte
index|[
literal|4
index|]
expr_stmt|;
name|read
operator|=
name|cfis
operator|.
name|read
argument_list|(
name|result
argument_list|,
literal|2
argument_list|,
literal|2
argument_list|)
expr_stmt|;
name|expected
operator|=
operator|new
name|byte
index|[
literal|4
index|]
expr_stmt|;
name|expected
index|[
literal|0
index|]
operator|=
literal|0
expr_stmt|;
name|expected
index|[
literal|1
index|]
operator|=
literal|0
expr_stmt|;
name|System
operator|.
name|arraycopy
argument_list|(
name|testData
argument_list|,
literal|0
argument_list|,
name|expected
argument_list|,
literal|2
argument_list|,
literal|2
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|read
argument_list|)
expr_stmt|;
name|assertArrayEquals
argument_list|(
name|expected
argument_list|,
name|result
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|skip
parameter_list|()
throws|throws
name|IOException
throws|,
name|InstantiationException
throws|,
name|IllegalAccessException
throws|,
name|NoSuchMethodException
throws|,
name|IllegalArgumentException
throws|,
name|InvocationTargetException
block|{
specifier|final
name|String
name|testString
init|=
literal|"helloWorld"
decl_stmt|;
specifier|final
name|byte
name|testData
index|[]
init|=
name|testString
operator|.
name|getBytes
argument_list|()
decl_stmt|;
specifier|final
name|InputStream
name|is
init|=
operator|new
name|ByteArrayInputStream
argument_list|(
name|testData
argument_list|)
decl_stmt|;
specifier|final
name|CachingFilterInputStream
name|cfis
init|=
operator|new
name|CachingFilterInputStream
argument_list|(
name|getNewCache
argument_list|(
name|is
argument_list|)
argument_list|)
decl_stmt|;
comment|//read the first 3 bytes
name|assertEquals
argument_list|(
name|testData
index|[
literal|0
index|]
argument_list|,
name|cfis
operator|.
name|read
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|testData
index|[
literal|1
index|]
argument_list|,
name|cfis
operator|.
name|read
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|testData
index|[
literal|2
index|]
argument_list|,
name|cfis
operator|.
name|read
argument_list|()
argument_list|)
expr_stmt|;
comment|//skip 3 bytes
name|cfis
operator|.
name|skip
argument_list|(
literal|3
argument_list|)
expr_stmt|;
comment|//read bytes 5 to 7 inclusive
name|assertEquals
argument_list|(
name|testData
index|[
literal|6
index|]
argument_list|,
name|cfis
operator|.
name|read
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|testData
index|[
literal|7
index|]
argument_list|,
name|cfis
operator|.
name|read
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|testData
index|[
literal|8
index|]
argument_list|,
name|cfis
operator|.
name|read
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|skip_partFromCache
parameter_list|()
throws|throws
name|IOException
throws|,
name|InstantiationException
throws|,
name|IllegalAccessException
throws|,
name|NoSuchMethodException
throws|,
name|IllegalArgumentException
throws|,
name|InvocationTargetException
block|{
specifier|final
name|String
name|testString
init|=
literal|"helloWorld"
decl_stmt|;
specifier|final
name|byte
name|testData
index|[]
init|=
name|testString
operator|.
name|getBytes
argument_list|()
decl_stmt|;
specifier|final
name|InputStream
name|is
init|=
operator|new
name|ByteArrayInputStream
argument_list|(
name|testData
argument_list|)
decl_stmt|;
specifier|final
name|CachingFilterInputStream
name|cfis
init|=
operator|new
name|CachingFilterInputStream
argument_list|(
name|getNewCache
argument_list|(
name|is
argument_list|)
argument_list|)
decl_stmt|;
comment|//read the first 2 bytes
name|assertEquals
argument_list|(
name|testData
index|[
literal|0
index|]
argument_list|,
name|cfis
operator|.
name|read
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|testData
index|[
literal|1
index|]
argument_list|,
name|cfis
operator|.
name|read
argument_list|()
argument_list|)
expr_stmt|;
comment|//skip 2 bytes
name|cfis
operator|.
name|skip
argument_list|(
literal|2
argument_list|)
expr_stmt|;
name|cfis
operator|.
name|mark
argument_list|(
name|Integer
operator|.
name|MAX_VALUE
argument_list|)
expr_stmt|;
comment|//read byte 5
name|assertEquals
argument_list|(
name|testData
index|[
literal|4
index|]
argument_list|,
name|cfis
operator|.
name|read
argument_list|()
argument_list|)
expr_stmt|;
comment|//skip 2 bytes
name|cfis
operator|.
name|skip
argument_list|(
literal|2
argument_list|)
expr_stmt|;
comment|//read bytes 6 to 7 inclusive
name|assertEquals
argument_list|(
name|testData
index|[
literal|7
index|]
argument_list|,
name|cfis
operator|.
name|read
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|testData
index|[
literal|8
index|]
argument_list|,
name|cfis
operator|.
name|read
argument_list|()
argument_list|)
expr_stmt|;
name|cfis
operator|.
name|reset
argument_list|()
expr_stmt|;
comment|//reread bytes 5 to 7 inclusive
name|assertEquals
argument_list|(
name|testData
index|[
literal|4
index|]
argument_list|,
name|cfis
operator|.
name|read
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|testData
index|[
literal|5
index|]
argument_list|,
name|cfis
operator|.
name|read
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|testData
index|[
literal|6
index|]
argument_list|,
name|cfis
operator|.
name|read
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|testData
index|[
literal|7
index|]
argument_list|,
name|cfis
operator|.
name|read
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|testData
index|[
literal|8
index|]
argument_list|,
name|cfis
operator|.
name|read
argument_list|()
argument_list|)
expr_stmt|;
comment|//read final byte (outside cache)
name|assertEquals
argument_list|(
name|testData
index|[
literal|9
index|]
argument_list|,
name|cfis
operator|.
name|read
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
argument_list|(
name|expected
operator|=
name|IOException
operator|.
name|class
argument_list|)
specifier|public
name|void
name|skip_onClosedStream
parameter_list|()
throws|throws
name|IOException
throws|,
name|InstantiationException
throws|,
name|IllegalAccessException
throws|,
name|NoSuchMethodException
throws|,
name|IllegalArgumentException
throws|,
name|InvocationTargetException
block|{
specifier|final
name|String
name|testString
init|=
literal|"helloWorld"
decl_stmt|;
specifier|final
name|byte
name|testData
index|[]
init|=
name|testString
operator|.
name|getBytes
argument_list|()
decl_stmt|;
specifier|final
name|InputStream
name|is
init|=
operator|new
name|ByteArrayInputStream
argument_list|(
name|testData
argument_list|)
decl_stmt|;
specifier|final
name|CachingFilterInputStream
name|cfis
init|=
operator|new
name|CachingFilterInputStream
argument_list|(
name|getNewCache
argument_list|(
name|is
argument_list|)
argument_list|)
decl_stmt|;
name|cfis
operator|.
name|close
argument_list|()
expr_stmt|;
comment|//should cause IOException
name|cfis
operator|.
name|skip
argument_list|(
literal|1
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|skip_negativeBytes
parameter_list|()
throws|throws
name|IOException
throws|,
name|InstantiationException
throws|,
name|IllegalAccessException
throws|,
name|NoSuchMethodException
throws|,
name|IllegalArgumentException
throws|,
name|InvocationTargetException
block|{
specifier|final
name|String
name|testString
init|=
literal|"helloWorld"
decl_stmt|;
specifier|final
name|byte
name|testData
index|[]
init|=
name|testString
operator|.
name|getBytes
argument_list|()
decl_stmt|;
specifier|final
name|InputStream
name|is
init|=
operator|new
name|ByteArrayInputStream
argument_list|(
name|testData
argument_list|)
decl_stmt|;
specifier|final
name|CachingFilterInputStream
name|cfis
init|=
operator|new
name|CachingFilterInputStream
argument_list|(
name|getNewCache
argument_list|(
name|is
argument_list|)
argument_list|)
decl_stmt|;
comment|//should cause IOException
specifier|final
name|long
name|skipped
init|=
name|cfis
operator|.
name|skip
argument_list|(
operator|-
literal|1
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|skipped
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|available_onClosedStream
parameter_list|()
throws|throws
name|IOException
throws|,
name|InstantiationException
throws|,
name|IllegalAccessException
throws|,
name|NoSuchMethodException
throws|,
name|IllegalArgumentException
throws|,
name|InvocationTargetException
block|{
specifier|final
name|String
name|testString
init|=
literal|"helloWorld"
decl_stmt|;
specifier|final
name|byte
name|testData
index|[]
init|=
name|testString
operator|.
name|getBytes
argument_list|()
decl_stmt|;
specifier|final
name|InputStream
name|is
init|=
operator|new
name|ByteArrayInputStream
argument_list|(
name|testData
argument_list|)
decl_stmt|;
specifier|final
name|CachingFilterInputStream
name|cfis
init|=
operator|new
name|CachingFilterInputStream
argument_list|(
name|getNewCache
argument_list|(
name|is
argument_list|)
argument_list|)
decl_stmt|;
name|cfis
operator|.
name|close
argument_list|()
expr_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|cfis
operator|.
name|available
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|available_onEmptyStream
parameter_list|()
throws|throws
name|IOException
throws|,
name|InstantiationException
throws|,
name|IllegalAccessException
throws|,
name|NoSuchMethodException
throws|,
name|IllegalArgumentException
throws|,
name|InvocationTargetException
block|{
specifier|final
name|InputStream
name|is
init|=
operator|new
name|ByteArrayInputStream
argument_list|(
operator|new
name|byte
index|[]
block|{}
argument_list|)
decl_stmt|;
specifier|final
name|CachingFilterInputStream
name|cfis
init|=
operator|new
name|CachingFilterInputStream
argument_list|(
name|getNewCache
argument_list|(
name|is
argument_list|)
argument_list|)
decl_stmt|;
name|cfis
operator|.
name|close
argument_list|()
expr_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|cfis
operator|.
name|available
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|available_onUnCachedStream
parameter_list|()
throws|throws
name|IOException
throws|,
name|InstantiationException
throws|,
name|IllegalAccessException
throws|,
name|NoSuchMethodException
throws|,
name|IllegalArgumentException
throws|,
name|InvocationTargetException
block|{
specifier|final
name|String
name|testString
init|=
literal|"helloWorld"
decl_stmt|;
specifier|final
name|byte
name|testData
index|[]
init|=
name|testString
operator|.
name|getBytes
argument_list|()
decl_stmt|;
specifier|final
name|InputStream
name|is
init|=
operator|new
name|ByteArrayInputStream
argument_list|(
name|testData
argument_list|)
decl_stmt|;
specifier|final
name|CachingFilterInputStream
name|cfis
init|=
operator|new
name|CachingFilterInputStream
argument_list|(
name|getNewCache
argument_list|(
name|is
argument_list|)
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|testData
operator|.
name|length
argument_list|,
name|cfis
operator|.
name|available
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|available_onPartiallyReadStream
parameter_list|()
throws|throws
name|IOException
throws|,
name|InstantiationException
throws|,
name|IllegalAccessException
throws|,
name|NoSuchMethodException
throws|,
name|IllegalArgumentException
throws|,
name|InvocationTargetException
block|{
specifier|final
name|String
name|testString
init|=
literal|"helloWorld"
decl_stmt|;
specifier|final
name|byte
name|testData
index|[]
init|=
name|testString
operator|.
name|getBytes
argument_list|()
decl_stmt|;
specifier|final
name|InputStream
name|is
init|=
operator|new
name|ByteArrayInputStream
argument_list|(
name|testData
argument_list|)
decl_stmt|;
specifier|final
name|CachingFilterInputStream
name|cfis
init|=
operator|new
name|CachingFilterInputStream
argument_list|(
name|getNewCache
argument_list|(
name|is
argument_list|)
argument_list|)
decl_stmt|;
comment|//read first 2 bytes
name|cfis
operator|.
name|read
argument_list|()
expr_stmt|;
name|cfis
operator|.
name|read
argument_list|()
expr_stmt|;
name|assertEquals
argument_list|(
name|testData
operator|.
name|length
operator|-
literal|2
argument_list|,
name|cfis
operator|.
name|available
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|available_onPartiallyCachedStream
parameter_list|()
throws|throws
name|IOException
throws|,
name|InstantiationException
throws|,
name|IllegalAccessException
throws|,
name|NoSuchMethodException
throws|,
name|IllegalArgumentException
throws|,
name|InvocationTargetException
block|{
specifier|final
name|String
name|testString
init|=
literal|"helloWorld"
decl_stmt|;
specifier|final
name|byte
name|testData
index|[]
init|=
name|testString
operator|.
name|getBytes
argument_list|()
decl_stmt|;
specifier|final
name|InputStream
name|is
init|=
operator|new
name|ByteArrayInputStream
argument_list|(
name|testData
argument_list|)
decl_stmt|;
specifier|final
name|CachingFilterInputStream
name|cfis
init|=
operator|new
name|CachingFilterInputStream
argument_list|(
name|getNewCache
argument_list|(
name|is
argument_list|)
argument_list|)
decl_stmt|;
comment|//mark for later reset
name|cfis
operator|.
name|mark
argument_list|(
name|Integer
operator|.
name|MAX_VALUE
argument_list|)
expr_stmt|;
comment|//read first 2 bytes
name|cfis
operator|.
name|read
argument_list|()
expr_stmt|;
name|cfis
operator|.
name|read
argument_list|()
expr_stmt|;
comment|//return to the start of the stream
name|cfis
operator|.
name|reset
argument_list|()
expr_stmt|;
name|assertEquals
argument_list|(
name|testData
operator|.
name|length
argument_list|,
name|cfis
operator|.
name|available
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|available_onOffsetPartiallyCachedStream
parameter_list|()
throws|throws
name|IOException
throws|,
name|InstantiationException
throws|,
name|IllegalAccessException
throws|,
name|NoSuchMethodException
throws|,
name|IllegalArgumentException
throws|,
name|InvocationTargetException
block|{
specifier|final
name|String
name|testString
init|=
literal|"helloWorld"
decl_stmt|;
specifier|final
name|byte
name|testData
index|[]
init|=
name|testString
operator|.
name|getBytes
argument_list|()
decl_stmt|;
specifier|final
name|InputStream
name|is
init|=
operator|new
name|ByteArrayInputStream
argument_list|(
name|testData
argument_list|)
decl_stmt|;
specifier|final
name|CachingFilterInputStream
name|cfis
init|=
operator|new
name|CachingFilterInputStream
argument_list|(
name|getNewCache
argument_list|(
name|is
argument_list|)
argument_list|)
decl_stmt|;
comment|//read first 2 bytes
name|cfis
operator|.
name|read
argument_list|()
expr_stmt|;
name|cfis
operator|.
name|read
argument_list|()
expr_stmt|;
comment|//mark for later reset
name|cfis
operator|.
name|mark
argument_list|(
name|Integer
operator|.
name|MAX_VALUE
argument_list|)
expr_stmt|;
comment|//read next 2 bytes
name|cfis
operator|.
name|read
argument_list|()
expr_stmt|;
name|cfis
operator|.
name|read
argument_list|()
expr_stmt|;
comment|//return to the start of the stream
name|cfis
operator|.
name|reset
argument_list|()
expr_stmt|;
name|assertEquals
argument_list|(
name|testData
operator|.
name|length
operator|-
literal|2
argument_list|,
name|cfis
operator|.
name|available
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|available_onCachedStream
parameter_list|()
throws|throws
name|IOException
throws|,
name|InstantiationException
throws|,
name|IllegalAccessException
throws|,
name|NoSuchMethodException
throws|,
name|IllegalArgumentException
throws|,
name|InvocationTargetException
block|{
specifier|final
name|String
name|testString
init|=
literal|"helloWorld"
decl_stmt|;
specifier|final
name|byte
name|testData
index|[]
init|=
name|testString
operator|.
name|getBytes
argument_list|()
decl_stmt|;
specifier|final
name|InputStream
name|is
init|=
operator|new
name|ByteArrayInputStream
argument_list|(
name|testData
argument_list|)
decl_stmt|;
specifier|final
name|CachingFilterInputStream
name|cfis
init|=
operator|new
name|CachingFilterInputStream
argument_list|(
name|getNewCache
argument_list|(
name|is
argument_list|)
argument_list|)
decl_stmt|;
comment|//mark for later reset
name|cfis
operator|.
name|mark
argument_list|(
name|Integer
operator|.
name|MAX_VALUE
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|testData
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
name|cfis
operator|.
name|read
argument_list|()
expr_stmt|;
block|}
comment|//return to the start of the stream
name|cfis
operator|.
name|reset
argument_list|()
expr_stmt|;
name|assertEquals
argument_list|(
name|testData
operator|.
name|length
argument_list|,
name|cfis
operator|.
name|available
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|available_onOffsetCachedStream
parameter_list|()
throws|throws
name|IOException
throws|,
name|InstantiationException
throws|,
name|IllegalAccessException
throws|,
name|NoSuchMethodException
throws|,
name|IllegalArgumentException
throws|,
name|InvocationTargetException
block|{
specifier|final
name|String
name|testString
init|=
literal|"helloWorld"
decl_stmt|;
specifier|final
name|byte
name|testData
index|[]
init|=
name|testString
operator|.
name|getBytes
argument_list|()
decl_stmt|;
specifier|final
name|InputStream
name|is
init|=
operator|new
name|ByteArrayInputStream
argument_list|(
name|testData
argument_list|)
decl_stmt|;
specifier|final
name|CachingFilterInputStream
name|cfis
init|=
operator|new
name|CachingFilterInputStream
argument_list|(
name|getNewCache
argument_list|(
name|is
argument_list|)
argument_list|)
decl_stmt|;
comment|//read first 2 bytes
name|cfis
operator|.
name|read
argument_list|()
expr_stmt|;
name|cfis
operator|.
name|read
argument_list|()
expr_stmt|;
comment|//mark for later reset
name|cfis
operator|.
name|mark
argument_list|(
name|Integer
operator|.
name|MAX_VALUE
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|testData
operator|.
name|length
operator|-
literal|2
condition|;
name|i
operator|++
control|)
block|{
name|cfis
operator|.
name|read
argument_list|()
expr_stmt|;
block|}
comment|//return to the start of the stream
name|cfis
operator|.
name|reset
argument_list|()
expr_stmt|;
name|assertEquals
argument_list|(
name|testData
operator|.
name|length
operator|-
literal|2
argument_list|,
name|cfis
operator|.
name|available
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|constructed_from_CachingFilterInputStream
parameter_list|()
throws|throws
name|IOException
throws|,
name|InstantiationException
throws|,
name|IllegalAccessException
throws|,
name|NoSuchMethodException
throws|,
name|IllegalArgumentException
throws|,
name|InvocationTargetException
block|{
specifier|final
name|byte
index|[]
name|testData
init|=
name|generateRandomData
argument_list|(
name|_12KB
argument_list|)
decl_stmt|;
specifier|final
name|InputStream
name|is
init|=
operator|new
name|ByteArrayInputStream
argument_list|(
name|testData
argument_list|)
decl_stmt|;
comment|//first CachingFilterInputStream
specifier|final
name|CachingFilterInputStream
name|cfis1
init|=
operator|new
name|CachingFilterInputStream
argument_list|(
name|getNewCache
argument_list|(
name|is
argument_list|)
argument_list|)
decl_stmt|;
comment|//second CachingFilterInputStream wraps first CachingFilterInputStream
specifier|final
name|CachingFilterInputStream
name|cfis2
init|=
operator|new
name|CachingFilterInputStream
argument_list|(
name|cfis1
argument_list|)
decl_stmt|;
name|assertArrayEquals
argument_list|(
name|testData
argument_list|,
name|consumeInputStream
argument_list|(
name|cfis2
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|constructed_from_CachingFilterInputStream_consumed
parameter_list|()
throws|throws
name|IOException
throws|,
name|InstantiationException
throws|,
name|IllegalAccessException
throws|,
name|NoSuchMethodException
throws|,
name|IllegalArgumentException
throws|,
name|InvocationTargetException
block|{
specifier|final
name|byte
index|[]
name|testData
init|=
name|generateRandomData
argument_list|(
name|_12KB
argument_list|)
decl_stmt|;
specifier|final
name|InputStream
name|is
init|=
operator|new
name|NonMarkableByteArrayInputStream
argument_list|(
name|testData
argument_list|)
decl_stmt|;
comment|//first CachingFilterInputStream
specifier|final
name|CachingFilterInputStream
name|cfis1
init|=
operator|new
name|CachingFilterInputStream
argument_list|(
name|getNewCache
argument_list|(
name|is
argument_list|)
argument_list|)
decl_stmt|;
name|assertArrayEquals
argument_list|(
name|testData
argument_list|,
name|consumeInputStream
argument_list|(
name|cfis1
argument_list|)
argument_list|)
expr_stmt|;
comment|//second CachingFilterInputStream wraps first CachingFilterInputStream
specifier|final
name|CachingFilterInputStream
name|cfis2
init|=
operator|new
name|CachingFilterInputStream
argument_list|(
name|cfis1
argument_list|)
decl_stmt|;
name|assertArrayEquals
argument_list|(
name|testData
argument_list|,
name|consumeInputStream
argument_list|(
name|cfis2
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|constructed_from_CachingFilterInputStream_partiallyConsumed
parameter_list|()
throws|throws
name|IOException
throws|,
name|InstantiationException
throws|,
name|IllegalAccessException
throws|,
name|NoSuchMethodException
throws|,
name|IllegalArgumentException
throws|,
name|InvocationTargetException
block|{
specifier|final
name|byte
index|[]
name|testData
init|=
name|generateRandomData
argument_list|(
name|_12KB
argument_list|)
decl_stmt|;
specifier|final
name|InputStream
name|is
init|=
operator|new
name|NonMarkableByteArrayInputStream
argument_list|(
name|testData
argument_list|)
decl_stmt|;
comment|//first CachingFilterInputStream
specifier|final
name|CachingFilterInputStream
name|cfis1
init|=
operator|new
name|CachingFilterInputStream
argument_list|(
name|getNewCache
argument_list|(
name|is
argument_list|)
argument_list|)
decl_stmt|;
comment|//read first 6KB
specifier|final
name|byte
name|firstPart
index|[]
init|=
operator|new
name|byte
index|[
name|_6KB
index|]
decl_stmt|;
name|cfis1
operator|.
name|read
argument_list|(
name|firstPart
argument_list|)
expr_stmt|;
name|assertArrayEquals
argument_list|(
name|subArray
argument_list|(
name|testData
argument_list|,
name|_6KB
argument_list|)
argument_list|,
name|firstPart
argument_list|)
expr_stmt|;
comment|//ensure first 6KB was read!
comment|//second CachingFilterInputStream wraps first CachingFilterInputStream
specifier|final
name|CachingFilterInputStream
name|cfis2
init|=
operator|new
name|CachingFilterInputStream
argument_list|(
name|cfis1
argument_list|)
decl_stmt|;
name|assertArrayEquals
argument_list|(
name|testData
argument_list|,
name|consumeInputStream
argument_list|(
name|cfis2
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|/**      * When given an underlying InputSource and caching it twice with the same      * cache we should be able to read the input twice assuming that the input      * that we are interested in has not been read before a mark()      */
annotation|@
name|Test
specifier|public
name|void
name|interleavedSourceReads
parameter_list|()
throws|throws
name|IOException
throws|,
name|InstantiationException
throws|,
name|IllegalAccessException
throws|,
name|NoSuchMethodException
throws|,
name|IllegalArgumentException
throws|,
name|InvocationTargetException
block|{
specifier|final
name|byte
index|[]
name|testData
init|=
name|generateRandomData
argument_list|(
name|_64KB
argument_list|)
decl_stmt|;
specifier|final
name|InputStream
name|is
init|=
operator|new
name|NonMarkableByteArrayInputStream
argument_list|(
name|testData
argument_list|)
decl_stmt|;
specifier|final
name|FilterInputStreamCache
name|cache1
init|=
name|getNewCache
argument_list|(
name|is
argument_list|)
decl_stmt|;
specifier|final
name|CachingFilterInputStream
name|cfis1
init|=
operator|new
name|CachingFilterInputStream
argument_list|(
name|cache1
argument_list|)
decl_stmt|;
name|cfis1
operator|.
name|mark
argument_list|(
name|Integer
operator|.
name|MAX_VALUE
argument_list|)
expr_stmt|;
specifier|final
name|CachingFilterInputStream
name|cfis2
init|=
operator|new
name|CachingFilterInputStream
argument_list|(
name|cache1
argument_list|)
decl_stmt|;
specifier|final
name|byte
name|result1
index|[]
init|=
operator|new
name|byte
index|[
name|_12KB
index|]
decl_stmt|;
name|cfis1
operator|.
name|read
argument_list|(
name|result1
argument_list|)
expr_stmt|;
name|assertArrayEquals
argument_list|(
name|subArray
argument_list|(
name|testData
argument_list|,
name|_12KB
argument_list|)
argument_list|,
name|result1
argument_list|)
expr_stmt|;
specifier|final
name|byte
name|result2
index|[]
init|=
operator|new
name|byte
index|[
name|_12KB
index|]
decl_stmt|;
name|cfis2
operator|.
name|read
argument_list|(
name|result2
argument_list|)
expr_stmt|;
name|assertArrayEquals
argument_list|(
name|subArray
argument_list|(
name|testData
argument_list|,
name|_12KB
argument_list|)
argument_list|,
name|result2
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|sharedCacheWritesInOrder
parameter_list|()
throws|throws
name|IOException
throws|,
name|InstantiationException
throws|,
name|IllegalAccessException
throws|,
name|NoSuchMethodException
throws|,
name|IllegalArgumentException
throws|,
name|InvocationTargetException
block|{
specifier|final
name|byte
index|[]
name|testData
init|=
name|generateRandomData
argument_list|(
name|_64KB
argument_list|)
decl_stmt|;
specifier|final
name|InputStream
name|is
init|=
operator|new
name|NonMarkableByteArrayInputStream
argument_list|(
name|testData
argument_list|)
decl_stmt|;
comment|//first CachingFilterInputStream
specifier|final
name|CachingFilterInputStream
name|cfis1
init|=
operator|new
name|CachingFilterInputStream
argument_list|(
name|getNewCache
argument_list|(
name|is
argument_list|)
argument_list|)
decl_stmt|;
comment|//read first 6KB
specifier|final
name|byte
name|cfis1Part1
index|[]
init|=
operator|new
name|byte
index|[
name|_6KB
index|]
decl_stmt|;
name|cfis1
operator|.
name|read
argument_list|(
name|cfis1Part1
argument_list|)
expr_stmt|;
name|assertArrayEquals
argument_list|(
name|subArray
argument_list|(
name|testData
argument_list|,
name|_6KB
argument_list|)
argument_list|,
name|cfis1Part1
argument_list|)
expr_stmt|;
comment|//ensure first 6KB was read!
comment|//second CachingFilterInputStream wraps first CachingFilterInputStream
specifier|final
name|CachingFilterInputStream
name|cfis2
init|=
operator|new
name|CachingFilterInputStream
argument_list|(
name|cfis1
argument_list|)
decl_stmt|;
comment|//read first 32KB from second InputStream
specifier|final
name|byte
name|cfis2Part1
index|[]
init|=
operator|new
name|byte
index|[
name|_32KB
index|]
decl_stmt|;
name|cfis2
operator|.
name|read
argument_list|(
name|cfis2Part1
argument_list|)
expr_stmt|;
name|assertArrayEquals
argument_list|(
name|subArray
argument_list|(
name|testData
argument_list|,
name|_32KB
argument_list|)
argument_list|,
name|cfis2Part1
argument_list|)
expr_stmt|;
comment|//ensure next 32KB was read!
comment|//interleave by reading another 6KB from first InputStream
specifier|final
name|byte
name|cfis1Part2
index|[]
init|=
operator|new
name|byte
index|[
name|_6KB
index|]
decl_stmt|;
name|cfis1
operator|.
name|read
argument_list|(
name|cfis1Part2
argument_list|)
expr_stmt|;
name|assertArrayEquals
argument_list|(
name|subArray
argument_list|(
name|testData
argument_list|,
name|_6KB
argument_list|,
name|_6KB
argument_list|)
argument_list|,
name|cfis1Part2
argument_list|)
expr_stmt|;
comment|//ensure first 6KB was read!
block|}
specifier|private
name|byte
index|[]
name|consumeInputStream
parameter_list|(
specifier|final
name|CachingFilterInputStream
name|is
parameter_list|)
throws|throws
name|IOException
block|{
try|try
init|(
specifier|final
name|FastByteArrayOutputStream
name|baos
init|=
operator|new
name|FastByteArrayOutputStream
argument_list|()
init|)
block|{
name|baos
operator|.
name|write
argument_list|(
name|is
argument_list|)
expr_stmt|;
return|return
name|baos
operator|.
name|toByteArray
argument_list|()
return|;
block|}
block|}
specifier|private
name|byte
index|[]
name|generateRandomData
parameter_list|(
specifier|final
name|int
name|bytes
parameter_list|)
block|{
specifier|final
name|byte
index|[]
name|data
init|=
operator|new
name|byte
index|[
name|bytes
index|]
decl_stmt|;
operator|new
name|Random
argument_list|()
operator|.
name|nextBytes
argument_list|(
name|data
argument_list|)
expr_stmt|;
return|return
name|data
return|;
block|}
specifier|private
name|byte
index|[]
name|subArray
parameter_list|(
specifier|final
name|byte
name|data
index|[]
parameter_list|,
specifier|final
name|int
name|len
parameter_list|)
block|{
specifier|final
name|byte
name|newData
index|[]
init|=
operator|new
name|byte
index|[
name|len
index|]
decl_stmt|;
name|System
operator|.
name|arraycopy
argument_list|(
name|data
argument_list|,
literal|0
argument_list|,
name|newData
argument_list|,
literal|0
argument_list|,
name|len
argument_list|)
expr_stmt|;
return|return
name|newData
return|;
block|}
specifier|private
name|byte
index|[]
name|subArray
parameter_list|(
specifier|final
name|byte
name|data
index|[]
parameter_list|,
specifier|final
name|int
name|offset
parameter_list|,
specifier|final
name|int
name|len
parameter_list|)
block|{
specifier|final
name|byte
name|newData
index|[]
init|=
operator|new
name|byte
index|[
name|len
index|]
decl_stmt|;
name|System
operator|.
name|arraycopy
argument_list|(
name|data
argument_list|,
name|offset
argument_list|,
name|newData
argument_list|,
literal|0
argument_list|,
name|len
argument_list|)
expr_stmt|;
return|return
name|newData
return|;
block|}
block|}
end_class

end_unit

