begin_unit|revision:1.0.0;language:Java;cregit-version:0.0.1
begin_package
package|package
name|org
operator|.
name|exist
operator|.
name|util
operator|.
name|io
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collection
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Arrays
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|runner
operator|.
name|RunWith
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|runners
operator|.
name|Parameterized
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|runners
operator|.
name|Parameterized
operator|.
name|Parameter
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|runners
operator|.
name|Parameterized
operator|.
name|Parameters
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|ByteArrayInputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|InputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|lang
operator|.
name|reflect
operator|.
name|Constructor
import|;
end_import

begin_import
import|import
name|java
operator|.
name|lang
operator|.
name|reflect
operator|.
name|InvocationTargetException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertEquals
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertArrayEquals
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|fail
import|;
end_import

begin_comment
comment|/**  * Test cases for CachingFilterInputStream  *  * @version 1.0  *  * @author Adam Retter<adam.retter@googlemail.com>  */
end_comment

begin_class
annotation|@
name|RunWith
argument_list|(
name|value
operator|=
name|Parameterized
operator|.
name|class
argument_list|)
specifier|public
class|class
name|CachingFilterInputStreamTest
block|{
annotation|@
name|Parameters
argument_list|(
name|name
operator|=
literal|"{0}"
argument_list|)
specifier|public
specifier|static
name|Collection
argument_list|<
name|Object
index|[]
argument_list|>
name|data
parameter_list|()
block|{
return|return
name|Arrays
operator|.
name|asList
argument_list|(
operator|new
name|Object
index|[]
index|[]
block|{
block|{
literal|"MemoryFilterInputStreamCache"
block|,
name|MemoryFilterInputStreamCache
operator|.
name|class
block|}
block|,
block|{
literal|"MemoryMappedFileFilterInputStreamCache"
block|,
name|MemoryMappedFileFilterInputStreamCache
operator|.
name|class
block|}
block|,
block|{
literal|"FileFilterInputStreamCache"
block|,
name|FileFilterInputStreamCache
operator|.
name|class
block|}
block|}
argument_list|)
return|;
block|}
annotation|@
name|Parameter
specifier|public
name|String
name|cacheName
decl_stmt|;
annotation|@
name|Parameter
argument_list|(
name|value
operator|=
literal|1
argument_list|)
specifier|public
name|Class
argument_list|<
name|FilterInputStreamCache
argument_list|>
name|cacheClass
decl_stmt|;
specifier|public
name|FilterInputStreamCache
name|getNewCache
parameter_list|(
name|InputStream
name|is
parameter_list|)
throws|throws
name|InstantiationException
throws|,
name|IllegalAccessException
throws|,
name|NoSuchMethodException
throws|,
name|IllegalArgumentException
throws|,
name|InvocationTargetException
block|{
name|Constructor
name|ctor
init|=
name|cacheClass
operator|.
name|getDeclaredConstructor
argument_list|(
name|InputStream
operator|.
name|class
argument_list|)
decl_stmt|;
name|ctor
operator|.
name|setAccessible
argument_list|(
literal|true
argument_list|)
expr_stmt|;
return|return
operator|(
name|FilterInputStreamCache
operator|)
name|ctor
operator|.
name|newInstance
argument_list|(
name|is
argument_list|)
return|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|readByte
parameter_list|()
throws|throws
name|IOException
throws|,
name|InstantiationException
throws|,
name|IllegalAccessException
throws|,
name|NoSuchMethodException
throws|,
name|IllegalArgumentException
throws|,
name|InvocationTargetException
block|{
specifier|final
name|String
name|testString
init|=
literal|"helloWorld"
decl_stmt|;
specifier|final
name|byte
name|testData
index|[]
init|=
name|testString
operator|.
name|getBytes
argument_list|()
decl_stmt|;
name|InputStream
name|is
init|=
operator|new
name|ByteArrayInputStream
argument_list|(
name|testData
argument_list|)
decl_stmt|;
name|CachingFilterInputStream
name|cfis
init|=
operator|new
name|CachingFilterInputStream
argument_list|(
name|getNewCache
argument_list|(
name|is
argument_list|)
argument_list|)
decl_stmt|;
comment|//read the first 3 bytes
name|assertEquals
argument_list|(
name|testData
index|[
literal|0
index|]
argument_list|,
name|cfis
operator|.
name|read
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|testData
index|[
literal|1
index|]
argument_list|,
name|cfis
operator|.
name|read
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|testData
index|[
literal|2
index|]
argument_list|,
name|cfis
operator|.
name|read
argument_list|()
argument_list|)
expr_stmt|;
comment|//mark position
name|cfis
operator|.
name|mark
argument_list|(
name|Integer
operator|.
name|MAX_VALUE
argument_list|)
expr_stmt|;
comment|//read the next 3 bytes
name|assertEquals
argument_list|(
name|testData
index|[
literal|3
index|]
argument_list|,
name|cfis
operator|.
name|read
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|testData
index|[
literal|4
index|]
argument_list|,
name|cfis
operator|.
name|read
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|testData
index|[
literal|5
index|]
argument_list|,
name|cfis
operator|.
name|read
argument_list|()
argument_list|)
expr_stmt|;
comment|//reset position to the mark
name|cfis
operator|.
name|reset
argument_list|()
expr_stmt|;
comment|//attempt to reread the last 3 bytes from the mark (from the cache)
name|assertEquals
argument_list|(
name|testData
index|[
literal|3
index|]
argument_list|,
name|cfis
operator|.
name|read
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|testData
index|[
literal|4
index|]
argument_list|,
name|cfis
operator|.
name|read
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|testData
index|[
literal|5
index|]
argument_list|,
name|cfis
operator|.
name|read
argument_list|()
argument_list|)
expr_stmt|;
comment|//read the next 2 bytes past the reset mark (past the cache, e.g. from src)
name|assertEquals
argument_list|(
name|testData
index|[
literal|6
index|]
argument_list|,
name|cfis
operator|.
name|read
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|testData
index|[
literal|7
index|]
argument_list|,
name|cfis
operator|.
name|read
argument_list|()
argument_list|)
expr_stmt|;
comment|//reset position to the mark
name|cfis
operator|.
name|reset
argument_list|()
expr_stmt|;
comment|//attempt to read the last 5 bytes (from the cache)
name|assertEquals
argument_list|(
name|testData
index|[
literal|3
index|]
argument_list|,
name|cfis
operator|.
name|read
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|testData
index|[
literal|4
index|]
argument_list|,
name|cfis
operator|.
name|read
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|testData
index|[
literal|5
index|]
argument_list|,
name|cfis
operator|.
name|read
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|testData
index|[
literal|6
index|]
argument_list|,
name|cfis
operator|.
name|read
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|testData
index|[
literal|7
index|]
argument_list|,
name|cfis
operator|.
name|read
argument_list|()
argument_list|)
expr_stmt|;
comment|//mark position
name|cfis
operator|.
name|mark
argument_list|(
operator|-
literal|1
argument_list|)
expr_stmt|;
comment|//read the next 2 bytes past the reset mark (past the cache, e.g. from src)
name|assertEquals
argument_list|(
name|testData
index|[
literal|8
index|]
argument_list|,
name|cfis
operator|.
name|read
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|testData
index|[
literal|9
index|]
argument_list|,
name|cfis
operator|.
name|read
argument_list|()
argument_list|)
expr_stmt|;
comment|//reset position to the mark
name|cfis
operator|.
name|reset
argument_list|()
expr_stmt|;
comment|//attempt to reread the last 2 bytes from the mark (from the cache)
name|assertEquals
argument_list|(
name|testData
index|[
literal|8
index|]
argument_list|,
name|cfis
operator|.
name|read
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|testData
index|[
literal|9
index|]
argument_list|,
name|cfis
operator|.
name|read
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
argument_list|(
name|expected
operator|=
name|IOException
operator|.
name|class
argument_list|)
specifier|public
name|void
name|readByte_onClosedStream
parameter_list|()
throws|throws
name|IOException
throws|,
name|InstantiationException
throws|,
name|IllegalAccessException
throws|,
name|NoSuchMethodException
throws|,
name|IllegalArgumentException
throws|,
name|InvocationTargetException
block|{
specifier|final
name|String
name|testString
init|=
literal|"helloWorld"
decl_stmt|;
specifier|final
name|byte
name|testData
index|[]
init|=
name|testString
operator|.
name|getBytes
argument_list|()
decl_stmt|;
name|InputStream
name|is
init|=
operator|new
name|ByteArrayInputStream
argument_list|(
name|testData
argument_list|)
decl_stmt|;
name|CachingFilterInputStream
name|cfis
init|=
operator|new
name|CachingFilterInputStream
argument_list|(
name|getNewCache
argument_list|(
name|is
argument_list|)
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|testData
index|[
literal|0
index|]
argument_list|,
name|cfis
operator|.
name|read
argument_list|()
argument_list|)
expr_stmt|;
name|cfis
operator|.
name|close
argument_list|()
expr_stmt|;
comment|//should cause IOException
name|cfis
operator|.
name|read
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|readByte_pastEndOfStream_fromCache
parameter_list|()
throws|throws
name|IOException
throws|,
name|InstantiationException
throws|,
name|IllegalAccessException
throws|,
name|NoSuchMethodException
throws|,
name|IllegalArgumentException
throws|,
name|InvocationTargetException
block|{
specifier|final
name|String
name|testString
init|=
literal|"he"
decl_stmt|;
specifier|final
name|byte
name|testData
index|[]
init|=
name|testString
operator|.
name|getBytes
argument_list|()
decl_stmt|;
name|InputStream
name|is
init|=
operator|new
name|ByteArrayInputStream
argument_list|(
name|testData
argument_list|)
decl_stmt|;
name|CachingFilterInputStream
name|cfis
init|=
operator|new
name|CachingFilterInputStream
argument_list|(
name|getNewCache
argument_list|(
name|is
argument_list|)
argument_list|)
decl_stmt|;
name|cfis
operator|.
name|mark
argument_list|(
name|Integer
operator|.
name|MAX_VALUE
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|testData
index|[
literal|0
index|]
argument_list|,
name|cfis
operator|.
name|read
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|testData
index|[
literal|1
index|]
argument_list|,
name|cfis
operator|.
name|read
argument_list|()
argument_list|)
expr_stmt|;
name|cfis
operator|.
name|reset
argument_list|()
expr_stmt|;
name|assertEquals
argument_list|(
name|testData
index|[
literal|0
index|]
argument_list|,
name|cfis
operator|.
name|read
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|testData
index|[
literal|1
index|]
argument_list|,
name|cfis
operator|.
name|read
argument_list|()
argument_list|)
expr_stmt|;
comment|//read byte past end of cache
name|int
name|b
init|=
name|cfis
operator|.
name|read
argument_list|()
decl_stmt|;
name|assertEquals
argument_list|(
operator|-
literal|1
argument_list|,
name|b
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|readByte_pastEndOfStream
parameter_list|()
throws|throws
name|IOException
throws|,
name|InstantiationException
throws|,
name|IllegalAccessException
throws|,
name|NoSuchMethodException
throws|,
name|IllegalArgumentException
throws|,
name|InvocationTargetException
block|{
specifier|final
name|String
name|testString
init|=
literal|"helloWorld"
decl_stmt|;
specifier|final
name|byte
name|testData
index|[]
init|=
name|testString
operator|.
name|getBytes
argument_list|()
decl_stmt|;
name|InputStream
name|is
init|=
operator|new
name|ByteArrayInputStream
argument_list|(
name|testData
argument_list|)
decl_stmt|;
name|CachingFilterInputStream
name|cfis
init|=
operator|new
name|CachingFilterInputStream
argument_list|(
name|getNewCache
argument_list|(
name|is
argument_list|)
argument_list|)
decl_stmt|;
comment|//read all the bytes upto end of stream
name|int
name|b
init|=
operator|-
literal|1
decl_stmt|;
name|int
name|testDataOffset
init|=
literal|0
decl_stmt|;
while|while
condition|(
operator|(
name|b
operator|=
name|cfis
operator|.
name|read
argument_list|()
operator|)
operator|>
operator|-
literal|1
condition|)
block|{
name|assertEquals
argument_list|(
name|testData
index|[
name|testDataOffset
operator|++
index|]
argument_list|,
name|b
argument_list|)
expr_stmt|;
block|}
comment|//read byte past end of stream
name|b
operator|=
name|cfis
operator|.
name|read
argument_list|()
expr_stmt|;
name|assertEquals
argument_list|(
operator|-
literal|1
argument_list|,
name|b
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|readByte_allFromCache
parameter_list|()
throws|throws
name|IOException
throws|,
name|InstantiationException
throws|,
name|IllegalAccessException
throws|,
name|NoSuchMethodException
throws|,
name|IllegalArgumentException
throws|,
name|InvocationTargetException
block|{
specifier|final
name|String
name|testString
init|=
literal|"hello"
decl_stmt|;
specifier|final
name|byte
name|testData
index|[]
init|=
name|testString
operator|.
name|getBytes
argument_list|()
decl_stmt|;
name|InputStream
name|is
init|=
operator|new
name|ByteArrayInputStream
argument_list|(
name|testData
argument_list|)
decl_stmt|;
name|CachingFilterInputStream
name|cfis
init|=
operator|new
name|CachingFilterInputStream
argument_list|(
name|getNewCache
argument_list|(
name|is
argument_list|)
argument_list|)
decl_stmt|;
comment|//mark the position
name|cfis
operator|.
name|mark
argument_list|(
name|Integer
operator|.
name|MAX_VALUE
argument_list|)
expr_stmt|;
comment|//read the data
name|assertEquals
argument_list|(
name|testData
index|[
literal|0
index|]
argument_list|,
name|cfis
operator|.
name|read
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|testData
index|[
literal|1
index|]
argument_list|,
name|cfis
operator|.
name|read
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|testData
index|[
literal|2
index|]
argument_list|,
name|cfis
operator|.
name|read
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|testData
index|[
literal|3
index|]
argument_list|,
name|cfis
operator|.
name|read
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|testData
index|[
literal|4
index|]
argument_list|,
name|cfis
operator|.
name|read
argument_list|()
argument_list|)
expr_stmt|;
comment|//reset position to the mark
name|cfis
operator|.
name|reset
argument_list|()
expr_stmt|;
comment|//attempt to reread the data (from the cache)
name|assertEquals
argument_list|(
name|testData
index|[
literal|0
index|]
argument_list|,
name|cfis
operator|.
name|read
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|testData
index|[
literal|1
index|]
argument_list|,
name|cfis
operator|.
name|read
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|testData
index|[
literal|2
index|]
argument_list|,
name|cfis
operator|.
name|read
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|testData
index|[
literal|3
index|]
argument_list|,
name|cfis
operator|.
name|read
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|testData
index|[
literal|4
index|]
argument_list|,
name|cfis
operator|.
name|read
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|readBytes
parameter_list|()
throws|throws
name|IOException
throws|,
name|InstantiationException
throws|,
name|IllegalAccessException
throws|,
name|NoSuchMethodException
throws|,
name|IllegalArgumentException
throws|,
name|InvocationTargetException
block|{
specifier|final
name|String
name|testString
init|=
literal|"helloWorld"
decl_stmt|;
specifier|final
name|byte
name|testData
index|[]
init|=
name|testString
operator|.
name|getBytes
argument_list|()
decl_stmt|;
name|InputStream
name|is
init|=
operator|new
name|ByteArrayInputStream
argument_list|(
name|testData
argument_list|)
decl_stmt|;
name|CachingFilterInputStream
name|cfis
init|=
operator|new
name|CachingFilterInputStream
argument_list|(
name|getNewCache
argument_list|(
name|is
argument_list|)
argument_list|)
decl_stmt|;
comment|//read the first 3 bytes
name|byte
name|result
index|[]
init|=
operator|new
name|byte
index|[
literal|3
index|]
decl_stmt|;
name|int
name|read
init|=
name|cfis
operator|.
name|read
argument_list|(
name|result
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|3
argument_list|,
name|read
argument_list|)
expr_stmt|;
name|assertArrayEquals
argument_list|(
name|subArray
argument_list|(
name|testData
argument_list|,
literal|3
argument_list|)
argument_list|,
name|result
argument_list|)
expr_stmt|;
comment|//mark position
name|cfis
operator|.
name|mark
argument_list|(
name|Integer
operator|.
name|MAX_VALUE
argument_list|)
expr_stmt|;
comment|//read the next 3 bytes
name|result
operator|=
operator|new
name|byte
index|[
literal|3
index|]
expr_stmt|;
name|read
operator|=
name|cfis
operator|.
name|read
argument_list|(
name|result
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|3
argument_list|,
name|read
argument_list|)
expr_stmt|;
name|assertArrayEquals
argument_list|(
name|subArray
argument_list|(
name|testData
argument_list|,
literal|3
argument_list|,
literal|3
argument_list|)
argument_list|,
name|result
argument_list|)
expr_stmt|;
comment|//reset position to the mark
name|cfis
operator|.
name|reset
argument_list|()
expr_stmt|;
comment|//attempt to reread the last 3 bytes from the mark (from the cache)
name|result
operator|=
operator|new
name|byte
index|[
literal|3
index|]
expr_stmt|;
name|read
operator|=
name|cfis
operator|.
name|read
argument_list|(
name|result
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|3
argument_list|,
name|read
argument_list|)
expr_stmt|;
name|assertArrayEquals
argument_list|(
name|subArray
argument_list|(
name|testData
argument_list|,
literal|3
argument_list|,
literal|3
argument_list|)
argument_list|,
name|result
argument_list|)
expr_stmt|;
comment|//read the next 2 bytes past the reset mark (past the cache, e.g. from src)
name|result
operator|=
operator|new
name|byte
index|[
literal|2
index|]
expr_stmt|;
name|read
operator|=
name|cfis
operator|.
name|read
argument_list|(
name|result
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|read
argument_list|)
expr_stmt|;
name|assertArrayEquals
argument_list|(
name|subArray
argument_list|(
name|testData
argument_list|,
literal|6
argument_list|,
literal|2
argument_list|)
argument_list|,
name|result
argument_list|)
expr_stmt|;
comment|//reset position to the mark
name|cfis
operator|.
name|reset
argument_list|()
expr_stmt|;
comment|//attempt to read the last 5 bytes (from the cache)
name|result
operator|=
operator|new
name|byte
index|[
literal|5
index|]
expr_stmt|;
name|read
operator|=
name|cfis
operator|.
name|read
argument_list|(
name|result
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|5
argument_list|,
name|read
argument_list|)
expr_stmt|;
name|assertArrayEquals
argument_list|(
name|subArray
argument_list|(
name|testData
argument_list|,
literal|3
argument_list|,
literal|5
argument_list|)
argument_list|,
name|result
argument_list|)
expr_stmt|;
comment|//mark position
name|cfis
operator|.
name|mark
argument_list|(
operator|-
literal|1
argument_list|)
expr_stmt|;
comment|//read the next 2 bytes past the reset mark (past the cache, e.g. from src)
name|result
operator|=
operator|new
name|byte
index|[
literal|2
index|]
expr_stmt|;
name|read
operator|=
name|cfis
operator|.
name|read
argument_list|(
name|result
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|read
argument_list|)
expr_stmt|;
name|assertArrayEquals
argument_list|(
name|subArray
argument_list|(
name|testData
argument_list|,
literal|8
argument_list|,
literal|2
argument_list|)
argument_list|,
name|result
argument_list|)
expr_stmt|;
comment|//reset position to the mark
name|cfis
operator|.
name|reset
argument_list|()
expr_stmt|;
comment|//attempt to reread the last 2 bytes from the mark (from the cache)
name|result
operator|=
operator|new
name|byte
index|[
literal|2
index|]
expr_stmt|;
name|read
operator|=
name|cfis
operator|.
name|read
argument_list|(
name|result
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|read
argument_list|)
expr_stmt|;
name|assertArrayEquals
argument_list|(
name|subArray
argument_list|(
name|testData
argument_list|,
literal|8
argument_list|,
literal|2
argument_list|)
argument_list|,
name|result
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
argument_list|(
name|expected
operator|=
name|IOException
operator|.
name|class
argument_list|)
specifier|public
name|void
name|readBytes_onClosedStream
parameter_list|()
throws|throws
name|IOException
throws|,
name|InstantiationException
throws|,
name|IllegalAccessException
throws|,
name|NoSuchMethodException
throws|,
name|IllegalArgumentException
throws|,
name|InvocationTargetException
block|{
specifier|final
name|String
name|testString
init|=
literal|"helloWorld"
decl_stmt|;
specifier|final
name|byte
name|testData
index|[]
init|=
name|testString
operator|.
name|getBytes
argument_list|()
decl_stmt|;
name|InputStream
name|is
init|=
operator|new
name|ByteArrayInputStream
argument_list|(
name|testData
argument_list|)
decl_stmt|;
name|CachingFilterInputStream
name|cfis
init|=
operator|new
name|CachingFilterInputStream
argument_list|(
name|getNewCache
argument_list|(
name|is
argument_list|)
argument_list|)
decl_stmt|;
name|byte
name|result
index|[]
init|=
operator|new
name|byte
index|[
literal|2
index|]
decl_stmt|;
name|cfis
operator|.
name|read
argument_list|(
name|result
argument_list|)
expr_stmt|;
name|assertArrayEquals
argument_list|(
name|subArray
argument_list|(
name|testData
argument_list|,
literal|2
argument_list|)
argument_list|,
name|result
argument_list|)
expr_stmt|;
name|cfis
operator|.
name|close
argument_list|()
expr_stmt|;
comment|//should cause IOException
name|cfis
operator|.
name|read
argument_list|(
name|result
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|readBytes_pastEndOfStream
parameter_list|()
throws|throws
name|IOException
throws|,
name|InstantiationException
throws|,
name|IllegalAccessException
throws|,
name|NoSuchMethodException
throws|,
name|IllegalArgumentException
throws|,
name|InvocationTargetException
block|{
specifier|final
name|String
name|testString
init|=
literal|"helloWorld"
decl_stmt|;
specifier|final
name|byte
name|testData
index|[]
init|=
name|testString
operator|.
name|getBytes
argument_list|()
decl_stmt|;
name|InputStream
name|is
init|=
operator|new
name|ByteArrayInputStream
argument_list|(
name|testData
argument_list|)
decl_stmt|;
name|CachingFilterInputStream
name|cfis
init|=
operator|new
name|CachingFilterInputStream
argument_list|(
name|getNewCache
argument_list|(
name|is
argument_list|)
argument_list|)
decl_stmt|;
name|byte
name|result
index|[]
init|=
operator|new
name|byte
index|[
name|testData
operator|.
name|length
index|]
decl_stmt|;
name|int
name|read
init|=
name|cfis
operator|.
name|read
argument_list|(
name|result
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|testData
operator|.
name|length
argument_list|,
name|read
argument_list|)
expr_stmt|;
name|assertArrayEquals
argument_list|(
name|testData
argument_list|,
name|result
argument_list|)
expr_stmt|;
name|byte
name|endOfStreamResult
index|[]
init|=
operator|new
name|byte
index|[
name|testData
operator|.
name|length
index|]
decl_stmt|;
name|read
operator|=
name|cfis
operator|.
name|read
argument_list|(
name|endOfStreamResult
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
operator|-
literal|1
argument_list|,
name|read
argument_list|)
expr_stmt|;
name|assertArrayEquals
argument_list|(
operator|new
name|byte
index|[]
block|{
literal|0
block|,
literal|0
block|,
literal|0
block|,
literal|0
block|,
literal|0
block|,
literal|0
block|,
literal|0
block|,
literal|0
block|,
literal|0
block|,
literal|0
block|}
argument_list|,
name|endOfStreamResult
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|readBytes_pastEndOfStream_fromCache
parameter_list|()
throws|throws
name|IOException
throws|,
name|InstantiationException
throws|,
name|IllegalAccessException
throws|,
name|NoSuchMethodException
throws|,
name|IllegalArgumentException
throws|,
name|InvocationTargetException
block|{
specifier|final
name|String
name|testString
init|=
literal|"helloWorld"
decl_stmt|;
specifier|final
name|byte
name|testData
index|[]
init|=
name|testString
operator|.
name|getBytes
argument_list|()
decl_stmt|;
name|InputStream
name|is
init|=
operator|new
name|ByteArrayInputStream
argument_list|(
name|testData
argument_list|)
decl_stmt|;
name|CachingFilterInputStream
name|cfis
init|=
operator|new
name|CachingFilterInputStream
argument_list|(
name|getNewCache
argument_list|(
name|is
argument_list|)
argument_list|)
decl_stmt|;
name|cfis
operator|.
name|mark
argument_list|(
name|Integer
operator|.
name|MAX_VALUE
argument_list|)
expr_stmt|;
comment|//read first two bytes from stream
name|byte
name|result
index|[]
init|=
operator|new
name|byte
index|[
literal|2
index|]
decl_stmt|;
name|int
name|read
init|=
name|cfis
operator|.
name|read
argument_list|(
name|result
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|read
argument_list|)
expr_stmt|;
name|assertArrayEquals
argument_list|(
name|subArray
argument_list|(
name|testData
argument_list|,
literal|2
argument_list|)
argument_list|,
name|result
argument_list|)
expr_stmt|;
name|cfis
operator|.
name|reset
argument_list|()
expr_stmt|;
comment|//read all bytes from cache and src, +1 past end of stream
name|byte
name|endOfStreamResult
index|[]
init|=
operator|new
name|byte
index|[
name|testData
operator|.
name|length
operator|+
literal|1
index|]
decl_stmt|;
name|read
operator|=
name|cfis
operator|.
name|read
argument_list|(
name|endOfStreamResult
argument_list|)
expr_stmt|;
name|byte
name|expectedResult
index|[]
init|=
operator|new
name|byte
index|[
name|testData
operator|.
name|length
operator|+
literal|1
index|]
decl_stmt|;
name|System
operator|.
name|arraycopy
argument_list|(
name|testData
argument_list|,
literal|0
argument_list|,
name|expectedResult
argument_list|,
literal|0
argument_list|,
name|testData
operator|.
name|length
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|testData
operator|.
name|length
argument_list|,
name|read
argument_list|)
expr_stmt|;
name|assertArrayEquals
argument_list|(
name|expectedResult
argument_list|,
name|endOfStreamResult
argument_list|)
expr_stmt|;
comment|//2nd attempt to read past end of stream
name|read
operator|=
name|cfis
operator|.
name|read
argument_list|(
name|result
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
operator|-
literal|1
argument_list|,
name|read
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|readBytes_allFromCache
parameter_list|()
throws|throws
name|IOException
throws|,
name|InstantiationException
throws|,
name|IllegalAccessException
throws|,
name|NoSuchMethodException
throws|,
name|IllegalArgumentException
throws|,
name|InvocationTargetException
block|{
specifier|final
name|String
name|testString
init|=
literal|"hello"
decl_stmt|;
specifier|final
name|byte
name|testData
index|[]
init|=
name|testString
operator|.
name|getBytes
argument_list|()
decl_stmt|;
name|InputStream
name|is
init|=
operator|new
name|ByteArrayInputStream
argument_list|(
name|testData
argument_list|)
decl_stmt|;
name|CachingFilterInputStream
name|cfis
init|=
operator|new
name|CachingFilterInputStream
argument_list|(
name|getNewCache
argument_list|(
name|is
argument_list|)
argument_list|)
decl_stmt|;
comment|//mark the position
name|cfis
operator|.
name|mark
argument_list|(
name|Integer
operator|.
name|MAX_VALUE
argument_list|)
expr_stmt|;
comment|//read the data
name|byte
name|result
index|[]
init|=
operator|new
name|byte
index|[
name|testData
operator|.
name|length
index|]
decl_stmt|;
name|int
name|read
init|=
name|cfis
operator|.
name|read
argument_list|(
name|result
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|testData
operator|.
name|length
argument_list|,
name|read
argument_list|)
expr_stmt|;
name|assertArrayEquals
argument_list|(
name|testData
argument_list|,
name|result
argument_list|)
expr_stmt|;
comment|//reset position to the mark
name|cfis
operator|.
name|reset
argument_list|()
expr_stmt|;
comment|//attempt to reread the data (from the cache)
name|result
operator|=
operator|new
name|byte
index|[
name|testData
operator|.
name|length
index|]
expr_stmt|;
name|read
operator|=
name|cfis
operator|.
name|read
argument_list|(
name|result
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|testData
operator|.
name|length
argument_list|,
name|read
argument_list|)
expr_stmt|;
name|assertArrayEquals
argument_list|(
name|testData
argument_list|,
name|result
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|readBytes_partFromCache
parameter_list|()
throws|throws
name|IOException
throws|,
name|InstantiationException
throws|,
name|IllegalAccessException
throws|,
name|NoSuchMethodException
throws|,
name|IllegalArgumentException
throws|,
name|InvocationTargetException
block|{
specifier|final
name|String
name|testString
init|=
literal|"helloWorld"
decl_stmt|;
specifier|final
name|byte
name|testData
index|[]
init|=
name|testString
operator|.
name|getBytes
argument_list|()
decl_stmt|;
name|InputStream
name|is
init|=
operator|new
name|ByteArrayInputStream
argument_list|(
name|testData
argument_list|)
decl_stmt|;
name|CachingFilterInputStream
name|cfis
init|=
operator|new
name|CachingFilterInputStream
argument_list|(
name|getNewCache
argument_list|(
name|is
argument_list|)
argument_list|)
decl_stmt|;
comment|//mark the position
name|cfis
operator|.
name|mark
argument_list|(
name|Integer
operator|.
name|MAX_VALUE
argument_list|)
expr_stmt|;
comment|//read the first 5 byts data
name|byte
name|result
index|[]
init|=
operator|new
name|byte
index|[
literal|5
index|]
decl_stmt|;
name|int
name|read
init|=
name|cfis
operator|.
name|read
argument_list|(
name|result
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|5
argument_list|,
name|read
argument_list|)
expr_stmt|;
name|assertArrayEquals
argument_list|(
name|subArray
argument_list|(
name|testData
argument_list|,
literal|5
argument_list|)
argument_list|,
name|result
argument_list|)
expr_stmt|;
comment|//reset position to the mark
name|cfis
operator|.
name|reset
argument_list|()
expr_stmt|;
comment|//attempt to read all the data (first 5 bytes will be from the cache)
name|result
operator|=
operator|new
name|byte
index|[
name|testData
operator|.
name|length
index|]
expr_stmt|;
name|read
operator|=
name|cfis
operator|.
name|read
argument_list|(
name|result
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|testData
operator|.
name|length
argument_list|,
name|read
argument_list|)
expr_stmt|;
name|assertArrayEquals
argument_list|(
name|testData
argument_list|,
name|result
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|readBytes_withZeroOffset_allFromCache
parameter_list|()
throws|throws
name|IOException
throws|,
name|InstantiationException
throws|,
name|IllegalAccessException
throws|,
name|NoSuchMethodException
throws|,
name|IllegalArgumentException
throws|,
name|InvocationTargetException
block|{
specifier|final
name|String
name|testString
init|=
literal|"hello"
decl_stmt|;
specifier|final
name|byte
name|testData
index|[]
init|=
name|testString
operator|.
name|getBytes
argument_list|()
decl_stmt|;
name|InputStream
name|is
init|=
operator|new
name|ByteArrayInputStream
argument_list|(
name|testData
argument_list|)
decl_stmt|;
name|CachingFilterInputStream
name|cfis
init|=
operator|new
name|CachingFilterInputStream
argument_list|(
name|getNewCache
argument_list|(
name|is
argument_list|)
argument_list|)
decl_stmt|;
comment|//mark the position
name|cfis
operator|.
name|mark
argument_list|(
name|Integer
operator|.
name|MAX_VALUE
argument_list|)
expr_stmt|;
comment|//read the data
name|byte
name|result
index|[]
init|=
operator|new
name|byte
index|[
name|testData
operator|.
name|length
index|]
decl_stmt|;
name|int
name|read
init|=
name|cfis
operator|.
name|read
argument_list|(
name|result
argument_list|,
literal|0
argument_list|,
name|testData
operator|.
name|length
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|testData
operator|.
name|length
argument_list|,
name|read
argument_list|)
expr_stmt|;
name|assertArrayEquals
argument_list|(
name|testData
argument_list|,
name|result
argument_list|)
expr_stmt|;
comment|//reset position to the mark
name|cfis
operator|.
name|reset
argument_list|()
expr_stmt|;
comment|//attempt to reread the data (from the cache)
name|result
operator|=
operator|new
name|byte
index|[
name|testData
operator|.
name|length
index|]
expr_stmt|;
name|read
operator|=
name|cfis
operator|.
name|read
argument_list|(
name|result
argument_list|,
literal|0
argument_list|,
name|testData
operator|.
name|length
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|testData
operator|.
name|length
argument_list|,
name|read
argument_list|)
expr_stmt|;
name|assertArrayEquals
argument_list|(
name|testData
argument_list|,
name|result
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|readBytes_withZeroOffset_partFromCache
parameter_list|()
throws|throws
name|IOException
throws|,
name|InstantiationException
throws|,
name|IllegalAccessException
throws|,
name|NoSuchMethodException
throws|,
name|IllegalArgumentException
throws|,
name|InvocationTargetException
block|{
specifier|final
name|String
name|testString
init|=
literal|"helloWorld"
decl_stmt|;
specifier|final
name|byte
name|testData
index|[]
init|=
name|testString
operator|.
name|getBytes
argument_list|()
decl_stmt|;
name|InputStream
name|is
init|=
operator|new
name|ByteArrayInputStream
argument_list|(
name|testData
argument_list|)
decl_stmt|;
name|CachingFilterInputStream
name|cfis
init|=
operator|new
name|CachingFilterInputStream
argument_list|(
name|getNewCache
argument_list|(
name|is
argument_list|)
argument_list|)
decl_stmt|;
comment|//mark the position
name|cfis
operator|.
name|mark
argument_list|(
name|Integer
operator|.
name|MAX_VALUE
argument_list|)
expr_stmt|;
comment|//read the first 5 byts data
name|byte
name|result
index|[]
init|=
operator|new
name|byte
index|[
literal|5
index|]
decl_stmt|;
name|int
name|read
init|=
name|cfis
operator|.
name|read
argument_list|(
name|result
argument_list|,
literal|0
argument_list|,
name|result
operator|.
name|length
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|5
argument_list|,
name|read
argument_list|)
expr_stmt|;
name|assertArrayEquals
argument_list|(
name|subArray
argument_list|(
name|testData
argument_list|,
literal|5
argument_list|)
argument_list|,
name|result
argument_list|)
expr_stmt|;
comment|//reset position to the mark
name|cfis
operator|.
name|reset
argument_list|()
expr_stmt|;
comment|//attempt to read all the data (first 5 bytes will be from the cache)
name|result
operator|=
operator|new
name|byte
index|[
name|testData
operator|.
name|length
index|]
expr_stmt|;
name|read
operator|=
name|cfis
operator|.
name|read
argument_list|(
name|result
argument_list|,
literal|0
argument_list|,
name|result
operator|.
name|length
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|testData
operator|.
name|length
argument_list|,
name|read
argument_list|)
expr_stmt|;
name|assertArrayEquals
argument_list|(
name|testData
argument_list|,
name|result
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|readBytes_withOffsetAndLength_allFromCache
parameter_list|()
throws|throws
name|IOException
throws|,
name|InstantiationException
throws|,
name|IllegalAccessException
throws|,
name|NoSuchMethodException
throws|,
name|IllegalArgumentException
throws|,
name|InvocationTargetException
block|{
specifier|final
name|String
name|testString
init|=
literal|"helloWorld"
decl_stmt|;
specifier|final
name|byte
name|testData
index|[]
init|=
name|testString
operator|.
name|getBytes
argument_list|()
decl_stmt|;
name|InputStream
name|is
init|=
operator|new
name|ByteArrayInputStream
argument_list|(
name|testData
argument_list|)
decl_stmt|;
name|CachingFilterInputStream
name|cfis
init|=
operator|new
name|CachingFilterInputStream
argument_list|(
name|getNewCache
argument_list|(
name|is
argument_list|)
argument_list|)
decl_stmt|;
comment|//mark the position
name|cfis
operator|.
name|mark
argument_list|(
name|Integer
operator|.
name|MAX_VALUE
argument_list|)
expr_stmt|;
comment|//read the data
name|byte
name|result
index|[]
init|=
operator|new
name|byte
index|[
literal|4
index|]
decl_stmt|;
name|int
name|read
init|=
name|cfis
operator|.
name|read
argument_list|(
name|result
argument_list|,
literal|1
argument_list|,
literal|3
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|3
argument_list|,
name|read
argument_list|)
expr_stmt|;
name|byte
name|expected
index|[]
init|=
operator|new
name|byte
index|[
literal|4
index|]
decl_stmt|;
name|expected
index|[
literal|0
index|]
operator|=
literal|0
expr_stmt|;
name|System
operator|.
name|arraycopy
argument_list|(
name|testData
argument_list|,
literal|0
argument_list|,
name|expected
argument_list|,
literal|1
argument_list|,
literal|3
argument_list|)
expr_stmt|;
name|assertArrayEquals
argument_list|(
name|expected
argument_list|,
name|result
argument_list|)
expr_stmt|;
comment|//reset position to the mark
name|cfis
operator|.
name|reset
argument_list|()
expr_stmt|;
comment|//attempt to reread the data (from the cache)
name|result
operator|=
operator|new
name|byte
index|[
literal|4
index|]
expr_stmt|;
name|read
operator|=
name|cfis
operator|.
name|read
argument_list|(
name|result
argument_list|,
literal|2
argument_list|,
literal|2
argument_list|)
expr_stmt|;
name|expected
operator|=
operator|new
name|byte
index|[
literal|4
index|]
expr_stmt|;
name|expected
index|[
literal|0
index|]
operator|=
literal|0
expr_stmt|;
name|expected
index|[
literal|1
index|]
operator|=
literal|0
expr_stmt|;
name|System
operator|.
name|arraycopy
argument_list|(
name|testData
argument_list|,
literal|0
argument_list|,
name|expected
argument_list|,
literal|2
argument_list|,
literal|2
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|read
argument_list|)
expr_stmt|;
name|assertArrayEquals
argument_list|(
name|expected
argument_list|,
name|result
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|skip
parameter_list|()
throws|throws
name|IOException
throws|,
name|InstantiationException
throws|,
name|IllegalAccessException
throws|,
name|NoSuchMethodException
throws|,
name|IllegalArgumentException
throws|,
name|InvocationTargetException
block|{
specifier|final
name|String
name|testString
init|=
literal|"helloWorld"
decl_stmt|;
specifier|final
name|byte
name|testData
index|[]
init|=
name|testString
operator|.
name|getBytes
argument_list|()
decl_stmt|;
name|InputStream
name|is
init|=
operator|new
name|ByteArrayInputStream
argument_list|(
name|testData
argument_list|)
decl_stmt|;
name|CachingFilterInputStream
name|cfis
init|=
operator|new
name|CachingFilterInputStream
argument_list|(
name|getNewCache
argument_list|(
name|is
argument_list|)
argument_list|)
decl_stmt|;
comment|//read the first 3 bytes
name|assertEquals
argument_list|(
name|testData
index|[
literal|0
index|]
argument_list|,
name|cfis
operator|.
name|read
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|testData
index|[
literal|1
index|]
argument_list|,
name|cfis
operator|.
name|read
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|testData
index|[
literal|2
index|]
argument_list|,
name|cfis
operator|.
name|read
argument_list|()
argument_list|)
expr_stmt|;
comment|//skip 3 bytes
name|cfis
operator|.
name|skip
argument_list|(
literal|3
argument_list|)
expr_stmt|;
comment|//read bytes 5 to 7 inclusive
name|assertEquals
argument_list|(
name|testData
index|[
literal|6
index|]
argument_list|,
name|cfis
operator|.
name|read
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|testData
index|[
literal|7
index|]
argument_list|,
name|cfis
operator|.
name|read
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|testData
index|[
literal|8
index|]
argument_list|,
name|cfis
operator|.
name|read
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|skip_partFromCache
parameter_list|()
throws|throws
name|IOException
throws|,
name|InstantiationException
throws|,
name|IllegalAccessException
throws|,
name|NoSuchMethodException
throws|,
name|IllegalArgumentException
throws|,
name|InvocationTargetException
block|{
specifier|final
name|String
name|testString
init|=
literal|"helloWorld"
decl_stmt|;
specifier|final
name|byte
name|testData
index|[]
init|=
name|testString
operator|.
name|getBytes
argument_list|()
decl_stmt|;
name|InputStream
name|is
init|=
operator|new
name|ByteArrayInputStream
argument_list|(
name|testData
argument_list|)
decl_stmt|;
name|CachingFilterInputStream
name|cfis
init|=
operator|new
name|CachingFilterInputStream
argument_list|(
name|getNewCache
argument_list|(
name|is
argument_list|)
argument_list|)
decl_stmt|;
comment|//read the first 2 bytes
name|assertEquals
argument_list|(
name|testData
index|[
literal|0
index|]
argument_list|,
name|cfis
operator|.
name|read
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|testData
index|[
literal|1
index|]
argument_list|,
name|cfis
operator|.
name|read
argument_list|()
argument_list|)
expr_stmt|;
comment|//skip 2 bytes
name|cfis
operator|.
name|skip
argument_list|(
literal|2
argument_list|)
expr_stmt|;
name|cfis
operator|.
name|mark
argument_list|(
name|Integer
operator|.
name|MAX_VALUE
argument_list|)
expr_stmt|;
comment|//read byte 5
name|assertEquals
argument_list|(
name|testData
index|[
literal|4
index|]
argument_list|,
name|cfis
operator|.
name|read
argument_list|()
argument_list|)
expr_stmt|;
comment|//skip 2 bytes
name|cfis
operator|.
name|skip
argument_list|(
literal|2
argument_list|)
expr_stmt|;
comment|//read bytes 6 to 7 inclusive
name|assertEquals
argument_list|(
name|testData
index|[
literal|7
index|]
argument_list|,
name|cfis
operator|.
name|read
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|testData
index|[
literal|8
index|]
argument_list|,
name|cfis
operator|.
name|read
argument_list|()
argument_list|)
expr_stmt|;
name|cfis
operator|.
name|reset
argument_list|()
expr_stmt|;
comment|//reread bytes 5 to 7 inclusive
name|assertEquals
argument_list|(
name|testData
index|[
literal|4
index|]
argument_list|,
name|cfis
operator|.
name|read
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|testData
index|[
literal|5
index|]
argument_list|,
name|cfis
operator|.
name|read
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|testData
index|[
literal|6
index|]
argument_list|,
name|cfis
operator|.
name|read
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|testData
index|[
literal|7
index|]
argument_list|,
name|cfis
operator|.
name|read
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|testData
index|[
literal|8
index|]
argument_list|,
name|cfis
operator|.
name|read
argument_list|()
argument_list|)
expr_stmt|;
comment|//read final byte (outside cache)
name|assertEquals
argument_list|(
name|testData
index|[
literal|9
index|]
argument_list|,
name|cfis
operator|.
name|read
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
argument_list|(
name|expected
operator|=
name|IOException
operator|.
name|class
argument_list|)
specifier|public
name|void
name|skip_onClosedStream
parameter_list|()
throws|throws
name|IOException
throws|,
name|InstantiationException
throws|,
name|IllegalAccessException
throws|,
name|NoSuchMethodException
throws|,
name|IllegalArgumentException
throws|,
name|InvocationTargetException
block|{
specifier|final
name|String
name|testString
init|=
literal|"helloWorld"
decl_stmt|;
specifier|final
name|byte
name|testData
index|[]
init|=
name|testString
operator|.
name|getBytes
argument_list|()
decl_stmt|;
name|InputStream
name|is
init|=
operator|new
name|ByteArrayInputStream
argument_list|(
name|testData
argument_list|)
decl_stmt|;
name|CachingFilterInputStream
name|cfis
init|=
operator|new
name|CachingFilterInputStream
argument_list|(
name|getNewCache
argument_list|(
name|is
argument_list|)
argument_list|)
decl_stmt|;
name|cfis
operator|.
name|close
argument_list|()
expr_stmt|;
comment|//should cause IOException
name|cfis
operator|.
name|skip
argument_list|(
literal|1
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|skip_negativeBytes
parameter_list|()
throws|throws
name|IOException
throws|,
name|InstantiationException
throws|,
name|IllegalAccessException
throws|,
name|NoSuchMethodException
throws|,
name|IllegalArgumentException
throws|,
name|InvocationTargetException
block|{
specifier|final
name|String
name|testString
init|=
literal|"helloWorld"
decl_stmt|;
specifier|final
name|byte
name|testData
index|[]
init|=
name|testString
operator|.
name|getBytes
argument_list|()
decl_stmt|;
name|InputStream
name|is
init|=
operator|new
name|ByteArrayInputStream
argument_list|(
name|testData
argument_list|)
decl_stmt|;
name|CachingFilterInputStream
name|cfis
init|=
operator|new
name|CachingFilterInputStream
argument_list|(
name|getNewCache
argument_list|(
name|is
argument_list|)
argument_list|)
decl_stmt|;
comment|//should cause IOException
name|long
name|skipped
init|=
name|cfis
operator|.
name|skip
argument_list|(
operator|-
literal|1
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|skipped
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|skip_correctlyAdjustsSrcOffset_onSharedCache
parameter_list|()
throws|throws
name|InvocationTargetException
throws|,
name|NoSuchMethodException
throws|,
name|InstantiationException
throws|,
name|IllegalAccessException
throws|,
name|IOException
block|{
specifier|final
name|String
name|testString
init|=
literal|"helloWorld"
decl_stmt|;
specifier|final
name|byte
name|testData
index|[]
init|=
name|testString
operator|.
name|getBytes
argument_list|()
decl_stmt|;
specifier|final
name|InputStream
name|is
init|=
operator|new
name|ByteArrayInputStream
argument_list|(
name|testData
argument_list|)
decl_stmt|;
specifier|final
name|FilterInputStreamCache
name|cache
init|=
name|getNewCache
argument_list|(
name|is
argument_list|)
decl_stmt|;
specifier|final
name|CachingFilterInputStream
name|cfis1
init|=
operator|new
name|CachingFilterInputStream
argument_list|(
name|cache
argument_list|)
decl_stmt|;
specifier|final
name|CachingFilterInputStream
name|cfis2
init|=
operator|new
name|CachingFilterInputStream
argument_list|(
name|cache
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|cfis1
operator|.
name|offset
argument_list|()
argument_list|)
expr_stmt|;
specifier|final
name|long
name|skipped1
init|=
name|cfis1
operator|.
name|skip
argument_list|(
literal|5
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|5
argument_list|,
name|skipped1
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|5
argument_list|,
name|cfis1
operator|.
name|offset
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|cfis2
operator|.
name|offset
argument_list|()
argument_list|)
expr_stmt|;
specifier|final
name|long
name|skipped2
init|=
name|cfis2
operator|.
name|skip
argument_list|(
literal|5
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|5
argument_list|,
name|skipped2
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|5
argument_list|,
name|cfis2
operator|.
name|offset
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|available_onClosedStream
parameter_list|()
throws|throws
name|IOException
throws|,
name|InstantiationException
throws|,
name|IllegalAccessException
throws|,
name|NoSuchMethodException
throws|,
name|IllegalArgumentException
throws|,
name|InvocationTargetException
block|{
specifier|final
name|String
name|testString
init|=
literal|"helloWorld"
decl_stmt|;
specifier|final
name|byte
name|testData
index|[]
init|=
name|testString
operator|.
name|getBytes
argument_list|()
decl_stmt|;
name|InputStream
name|is
init|=
operator|new
name|ByteArrayInputStream
argument_list|(
name|testData
argument_list|)
decl_stmt|;
name|CachingFilterInputStream
name|cfis
init|=
operator|new
name|CachingFilterInputStream
argument_list|(
name|getNewCache
argument_list|(
name|is
argument_list|)
argument_list|)
decl_stmt|;
name|cfis
operator|.
name|close
argument_list|()
expr_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|cfis
operator|.
name|available
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|available_onEmptyStream
parameter_list|()
throws|throws
name|IOException
throws|,
name|InstantiationException
throws|,
name|IllegalAccessException
throws|,
name|NoSuchMethodException
throws|,
name|IllegalArgumentException
throws|,
name|InvocationTargetException
block|{
name|InputStream
name|is
init|=
operator|new
name|ByteArrayInputStream
argument_list|(
operator|new
name|byte
index|[]
block|{}
argument_list|)
decl_stmt|;
name|CachingFilterInputStream
name|cfis
init|=
operator|new
name|CachingFilterInputStream
argument_list|(
name|getNewCache
argument_list|(
name|is
argument_list|)
argument_list|)
decl_stmt|;
name|cfis
operator|.
name|close
argument_list|()
expr_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|cfis
operator|.
name|available
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|available_onUnCachedStream
parameter_list|()
throws|throws
name|IOException
throws|,
name|InstantiationException
throws|,
name|IllegalAccessException
throws|,
name|NoSuchMethodException
throws|,
name|IllegalArgumentException
throws|,
name|InvocationTargetException
block|{
specifier|final
name|String
name|testString
init|=
literal|"helloWorld"
decl_stmt|;
specifier|final
name|byte
name|testData
index|[]
init|=
name|testString
operator|.
name|getBytes
argument_list|()
decl_stmt|;
name|InputStream
name|is
init|=
operator|new
name|ByteArrayInputStream
argument_list|(
name|testData
argument_list|)
decl_stmt|;
name|CachingFilterInputStream
name|cfis
init|=
operator|new
name|CachingFilterInputStream
argument_list|(
name|getNewCache
argument_list|(
name|is
argument_list|)
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|testData
operator|.
name|length
argument_list|,
name|cfis
operator|.
name|available
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|available_onPartiallyReadStream
parameter_list|()
throws|throws
name|IOException
throws|,
name|InstantiationException
throws|,
name|IllegalAccessException
throws|,
name|NoSuchMethodException
throws|,
name|IllegalArgumentException
throws|,
name|InvocationTargetException
block|{
specifier|final
name|String
name|testString
init|=
literal|"helloWorld"
decl_stmt|;
specifier|final
name|byte
name|testData
index|[]
init|=
name|testString
operator|.
name|getBytes
argument_list|()
decl_stmt|;
name|InputStream
name|is
init|=
operator|new
name|ByteArrayInputStream
argument_list|(
name|testData
argument_list|)
decl_stmt|;
name|CachingFilterInputStream
name|cfis
init|=
operator|new
name|CachingFilterInputStream
argument_list|(
name|getNewCache
argument_list|(
name|is
argument_list|)
argument_list|)
decl_stmt|;
comment|//read first 2 bytes
name|cfis
operator|.
name|read
argument_list|()
expr_stmt|;
name|cfis
operator|.
name|read
argument_list|()
expr_stmt|;
name|assertEquals
argument_list|(
name|testData
operator|.
name|length
operator|-
literal|2
argument_list|,
name|cfis
operator|.
name|available
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|available_onPartiallyCachedStream
parameter_list|()
throws|throws
name|IOException
throws|,
name|InstantiationException
throws|,
name|IllegalAccessException
throws|,
name|NoSuchMethodException
throws|,
name|IllegalArgumentException
throws|,
name|InvocationTargetException
block|{
specifier|final
name|String
name|testString
init|=
literal|"helloWorld"
decl_stmt|;
specifier|final
name|byte
name|testData
index|[]
init|=
name|testString
operator|.
name|getBytes
argument_list|()
decl_stmt|;
name|InputStream
name|is
init|=
operator|new
name|ByteArrayInputStream
argument_list|(
name|testData
argument_list|)
decl_stmt|;
name|CachingFilterInputStream
name|cfis
init|=
operator|new
name|CachingFilterInputStream
argument_list|(
name|getNewCache
argument_list|(
name|is
argument_list|)
argument_list|)
decl_stmt|;
comment|//mark for later reset
name|cfis
operator|.
name|mark
argument_list|(
name|Integer
operator|.
name|MAX_VALUE
argument_list|)
expr_stmt|;
comment|//read first 2 bytes
name|cfis
operator|.
name|read
argument_list|()
expr_stmt|;
name|cfis
operator|.
name|read
argument_list|()
expr_stmt|;
comment|//return to the start of the stream
name|cfis
operator|.
name|reset
argument_list|()
expr_stmt|;
name|assertEquals
argument_list|(
name|testData
operator|.
name|length
argument_list|,
name|cfis
operator|.
name|available
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|available_onOffsetPartiallyCachedStream
parameter_list|()
throws|throws
name|IOException
throws|,
name|InstantiationException
throws|,
name|IllegalAccessException
throws|,
name|NoSuchMethodException
throws|,
name|IllegalArgumentException
throws|,
name|InvocationTargetException
block|{
specifier|final
name|String
name|testString
init|=
literal|"helloWorld"
decl_stmt|;
specifier|final
name|byte
name|testData
index|[]
init|=
name|testString
operator|.
name|getBytes
argument_list|()
decl_stmt|;
name|InputStream
name|is
init|=
operator|new
name|ByteArrayInputStream
argument_list|(
name|testData
argument_list|)
decl_stmt|;
name|CachingFilterInputStream
name|cfis
init|=
operator|new
name|CachingFilterInputStream
argument_list|(
name|getNewCache
argument_list|(
name|is
argument_list|)
argument_list|)
decl_stmt|;
comment|//read first 2 bytes
name|cfis
operator|.
name|read
argument_list|()
expr_stmt|;
name|cfis
operator|.
name|read
argument_list|()
expr_stmt|;
comment|//mark for later reset
name|cfis
operator|.
name|mark
argument_list|(
name|Integer
operator|.
name|MAX_VALUE
argument_list|)
expr_stmt|;
comment|//read next 2 bytes
name|cfis
operator|.
name|read
argument_list|()
expr_stmt|;
name|cfis
operator|.
name|read
argument_list|()
expr_stmt|;
comment|//return to the start of the stream
name|cfis
operator|.
name|reset
argument_list|()
expr_stmt|;
name|assertEquals
argument_list|(
name|testData
operator|.
name|length
operator|-
literal|2
argument_list|,
name|cfis
operator|.
name|available
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|available_onCachedStream
parameter_list|()
throws|throws
name|IOException
throws|,
name|InstantiationException
throws|,
name|IllegalAccessException
throws|,
name|NoSuchMethodException
throws|,
name|IllegalArgumentException
throws|,
name|InvocationTargetException
block|{
specifier|final
name|String
name|testString
init|=
literal|"helloWorld"
decl_stmt|;
specifier|final
name|byte
name|testData
index|[]
init|=
name|testString
operator|.
name|getBytes
argument_list|()
decl_stmt|;
name|InputStream
name|is
init|=
operator|new
name|ByteArrayInputStream
argument_list|(
name|testData
argument_list|)
decl_stmt|;
name|CachingFilterInputStream
name|cfis
init|=
operator|new
name|CachingFilterInputStream
argument_list|(
name|getNewCache
argument_list|(
name|is
argument_list|)
argument_list|)
decl_stmt|;
comment|//mark for later reset
name|cfis
operator|.
name|mark
argument_list|(
name|Integer
operator|.
name|MAX_VALUE
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|testData
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
name|cfis
operator|.
name|read
argument_list|()
expr_stmt|;
block|}
comment|//return to the start of the stream
name|cfis
operator|.
name|reset
argument_list|()
expr_stmt|;
name|assertEquals
argument_list|(
name|testData
operator|.
name|length
argument_list|,
name|cfis
operator|.
name|available
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|available_onOffsetCachedStream
parameter_list|()
throws|throws
name|IOException
throws|,
name|InstantiationException
throws|,
name|IllegalAccessException
throws|,
name|NoSuchMethodException
throws|,
name|IllegalArgumentException
throws|,
name|InvocationTargetException
block|{
specifier|final
name|String
name|testString
init|=
literal|"helloWorld"
decl_stmt|;
specifier|final
name|byte
name|testData
index|[]
init|=
name|testString
operator|.
name|getBytes
argument_list|()
decl_stmt|;
name|InputStream
name|is
init|=
operator|new
name|ByteArrayInputStream
argument_list|(
name|testData
argument_list|)
decl_stmt|;
name|CachingFilterInputStream
name|cfis
init|=
operator|new
name|CachingFilterInputStream
argument_list|(
name|getNewCache
argument_list|(
name|is
argument_list|)
argument_list|)
decl_stmt|;
comment|//read first 2 bytes
name|cfis
operator|.
name|read
argument_list|()
expr_stmt|;
name|cfis
operator|.
name|read
argument_list|()
expr_stmt|;
comment|//mark for later reset
name|cfis
operator|.
name|mark
argument_list|(
name|Integer
operator|.
name|MAX_VALUE
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|testData
operator|.
name|length
operator|-
literal|2
condition|;
name|i
operator|++
control|)
block|{
name|cfis
operator|.
name|read
argument_list|()
expr_stmt|;
block|}
comment|//return to the start of the stream
name|cfis
operator|.
name|reset
argument_list|()
expr_stmt|;
name|assertEquals
argument_list|(
name|testData
operator|.
name|length
operator|-
literal|2
argument_list|,
name|cfis
operator|.
name|available
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|sharedReferences
parameter_list|()
throws|throws
name|InvocationTargetException
throws|,
name|NoSuchMethodException
throws|,
name|InstantiationException
throws|,
name|IllegalAccessException
throws|,
name|IOException
block|{
specifier|final
name|String
name|testString
init|=
literal|"helloWorld"
decl_stmt|;
specifier|final
name|byte
name|testData
index|[]
init|=
name|testString
operator|.
name|getBytes
argument_list|()
decl_stmt|;
specifier|final
name|InputStream
name|is
init|=
operator|new
name|ByteArrayInputStream
argument_list|(
name|testData
argument_list|)
decl_stmt|;
specifier|final
name|CachingFilterInputStream
name|cfis
init|=
operator|new
name|CachingFilterInputStream
argument_list|(
name|getNewCache
argument_list|(
name|is
argument_list|)
argument_list|)
decl_stmt|;
comment|// increment shared references (will now be 2)
name|cfis
operator|.
name|incrementSharedReferences
argument_list|()
expr_stmt|;
comment|// close should not close as we just incremented the shared references
name|cfis
operator|.
name|close
argument_list|()
expr_stmt|;
comment|//read first 2 bytes
name|cfis
operator|.
name|read
argument_list|()
expr_stmt|;
name|cfis
operator|.
name|read
argument_list|()
expr_stmt|;
comment|// close the second time, should actually close, as shared references will now be zero
name|cfis
operator|.
name|close
argument_list|()
expr_stmt|;
try|try
block|{
name|cfis
operator|.
name|read
argument_list|()
expr_stmt|;
name|fail
argument_list|(
literal|"Should not be able to read after shared references reach zero"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
specifier|final
name|IOException
name|ioe
parameter_list|)
block|{
comment|// no op, we expected the IOException
block|}
block|}
specifier|private
name|byte
index|[]
name|subArray
parameter_list|(
name|byte
name|data
index|[]
parameter_list|,
name|int
name|len
parameter_list|)
block|{
name|byte
name|newData
index|[]
init|=
operator|new
name|byte
index|[
name|len
index|]
decl_stmt|;
name|System
operator|.
name|arraycopy
argument_list|(
name|data
argument_list|,
literal|0
argument_list|,
name|newData
argument_list|,
literal|0
argument_list|,
name|len
argument_list|)
expr_stmt|;
return|return
name|newData
return|;
block|}
specifier|private
name|byte
index|[]
name|subArray
parameter_list|(
name|byte
name|data
index|[]
parameter_list|,
name|int
name|offset
parameter_list|,
name|int
name|len
parameter_list|)
block|{
name|byte
name|newData
index|[]
init|=
operator|new
name|byte
index|[
name|len
index|]
decl_stmt|;
name|System
operator|.
name|arraycopy
argument_list|(
name|data
argument_list|,
name|offset
argument_list|,
name|newData
argument_list|,
literal|0
argument_list|,
name|len
argument_list|)
expr_stmt|;
return|return
name|newData
return|;
block|}
block|}
end_class

end_unit

