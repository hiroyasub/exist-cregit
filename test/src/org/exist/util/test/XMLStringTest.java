begin_unit|revision:1.0.0;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * XMLStringTest.java - Aug 11, 2003  *   * @author wolf  */
end_comment

begin_package
package|package
name|org
operator|.
name|exist
operator|.
name|util
operator|.
name|test
package|;
end_package

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|util
operator|.
name|XMLString
import|;
end_import

begin_import
import|import
name|junit
operator|.
name|framework
operator|.
name|TestCase
import|;
end_import

begin_class
specifier|public
class|class
name|XMLStringTest
extends|extends
name|TestCase
block|{
specifier|public
name|XMLStringTest
parameter_list|(
name|String
name|arg0
parameter_list|)
block|{
name|super
argument_list|(
name|arg0
argument_list|)
expr_stmt|;
block|}
specifier|public
specifier|static
name|void
name|main
parameter_list|(
name|String
index|[]
name|args
parameter_list|)
block|{
name|junit
operator|.
name|textui
operator|.
name|TestRunner
operator|.
name|run
argument_list|(
name|XMLStringTest
operator|.
name|class
argument_list|)
expr_stmt|;
block|}
comment|/* 	 * Test for XMLString append(char[], int, int) 	 */
specifier|public
name|void
name|testAppendcharArrayintint
parameter_list|()
block|{
name|XMLString
name|s
init|=
operator|new
name|XMLString
argument_list|()
decl_stmt|;
name|char
name|ch
index|[]
init|=
literal|"Hello"
operator|.
name|toCharArray
argument_list|()
decl_stmt|;
name|s
operator|.
name|append
argument_list|(
name|ch
argument_list|,
literal|0
argument_list|,
literal|5
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|s
operator|.
name|toString
argument_list|()
argument_list|,
literal|"Hello"
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|testNormalize
parameter_list|()
block|{
name|XMLString
name|s
init|=
operator|new
name|XMLString
argument_list|()
decl_stmt|;
name|char
name|ch
index|[]
init|=
literal|"\n	Hello World\r\n"
operator|.
name|toCharArray
argument_list|()
decl_stmt|;
name|s
operator|.
name|append
argument_list|(
name|ch
argument_list|,
literal|0
argument_list|,
name|ch
operator|.
name|length
argument_list|)
expr_stmt|;
name|s
operator|=
name|s
operator|.
name|normalize
argument_list|(
name|XMLString
operator|.
name|SUPPRESS_BOTH
argument_list|)
expr_stmt|;
name|String
name|r
init|=
name|s
operator|.
name|toString
argument_list|()
decl_stmt|;
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|'"'
operator|+
name|r
operator|+
literal|'"'
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|r
argument_list|,
literal|"Hello World"
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|testSubstring
parameter_list|()
block|{
name|XMLString
name|s
init|=
operator|new
name|XMLString
argument_list|()
decl_stmt|;
name|char
name|ch
index|[]
init|=
literal|"\n	Hello World\r\n"
operator|.
name|toCharArray
argument_list|()
decl_stmt|;
name|s
operator|.
name|append
argument_list|(
name|ch
argument_list|,
literal|0
argument_list|,
name|ch
operator|.
name|length
argument_list|)
expr_stmt|;
name|s
operator|=
name|s
operator|.
name|normalize
argument_list|(
name|XMLString
operator|.
name|SUPPRESS_BOTH
argument_list|)
expr_stmt|;
name|String
name|r
init|=
name|s
operator|.
name|substring
argument_list|(
literal|6
argument_list|,
literal|5
argument_list|)
decl_stmt|;
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|'"'
operator|+
name|r
operator|+
literal|'"'
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|r
argument_list|,
literal|"World"
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|testInsert
parameter_list|()
block|{
name|XMLString
name|s
init|=
operator|new
name|XMLString
argument_list|()
decl_stmt|;
name|char
name|ch
index|[]
init|=
literal|"Hello World"
operator|.
name|toCharArray
argument_list|()
decl_stmt|;
name|s
operator|.
name|append
argument_list|(
name|ch
argument_list|,
literal|0
argument_list|,
name|ch
operator|.
name|length
argument_list|)
expr_stmt|;
name|s
operator|.
name|insert
argument_list|(
literal|5
argument_list|,
literal|" happy"
argument_list|)
expr_stmt|;
name|String
name|r
init|=
name|s
operator|.
name|toString
argument_list|()
decl_stmt|;
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|'"'
operator|+
name|r
operator|+
literal|'"'
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|r
argument_list|,
literal|"Hello happy World"
argument_list|)
expr_stmt|;
name|s
operator|=
name|s
operator|.
name|delete
argument_list|(
literal|5
argument_list|,
literal|6
argument_list|)
expr_stmt|;
name|r
operator|=
name|s
operator|.
name|toString
argument_list|()
expr_stmt|;
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|'"'
operator|+
name|r
operator|+
literal|'"'
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|r
argument_list|,
literal|"Hello World"
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

