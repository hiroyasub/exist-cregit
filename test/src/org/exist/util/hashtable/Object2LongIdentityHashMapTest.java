begin_unit|revision:1.0.0;language:Java;cregit-version:0.0.1
begin_package
package|package
name|org
operator|.
name|exist
operator|.
name|util
operator|.
name|hashtable
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Iterator
import|;
end_import

begin_class
specifier|public
class|class
name|Object2LongIdentityHashMapTest
extends|extends
name|AbstractHashtableTest
argument_list|<
name|Object2LongIdentityHashMap
argument_list|,
name|Object
argument_list|,
name|Long
argument_list|>
block|{
name|java
operator|.
name|util
operator|.
name|HashMap
argument_list|<
name|Integer
argument_list|,
name|Integer
argument_list|>
name|canonicalObject
init|=
operator|new
name|java
operator|.
name|util
operator|.
name|HashMap
argument_list|<
name|Integer
argument_list|,
name|Integer
argument_list|>
argument_list|()
decl_stmt|;
specifier|protected
name|Object2LongIdentityHashMap
name|newT
parameter_list|()
block|{
return|return
operator|new
name|Object2LongIdentityHashMap
argument_list|()
return|;
block|}
annotation|@
name|SuppressWarnings
argument_list|(
literal|"unchecked"
argument_list|)
specifier|protected
name|Iterator
argument_list|<
name|?
extends|extends
name|Object
argument_list|>
name|simpleKeyIterator
parameter_list|()
block|{
return|return
name|map
operator|.
name|iterator
argument_list|()
return|;
block|}
annotation|@
name|SuppressWarnings
argument_list|(
literal|"unchecked"
argument_list|)
specifier|protected
name|Iterator
argument_list|<
name|?
extends|extends
name|Long
argument_list|>
name|simpleValueIterator
parameter_list|()
block|{
return|return
name|map
operator|.
name|valueIterator
argument_list|()
return|;
block|}
specifier|protected
name|Long
name|simpleGet
parameter_list|(
name|Object
name|k
parameter_list|)
block|{
name|long
name|foo
init|=
name|map
operator|.
name|get
argument_list|(
name|k
argument_list|)
decl_stmt|;
return|return
name|foo
operator|==
operator|-
literal|1
condition|?
literal|null
else|:
name|foo
return|;
block|}
specifier|protected
name|void
name|simplePut
parameter_list|(
name|Object
name|k
parameter_list|,
name|Long
name|v
parameter_list|)
block|{
name|map
operator|.
name|put
argument_list|(
name|k
argument_list|,
name|v
argument_list|)
expr_stmt|;
block|}
specifier|protected
name|void
name|simpleRemove
parameter_list|(
name|Object
name|k
parameter_list|)
block|{
name|map
operator|.
name|remove
argument_list|(
name|k
argument_list|)
expr_stmt|;
block|}
specifier|protected
name|boolean
name|simpleContainsKey
parameter_list|(
name|int
name|k
parameter_list|)
block|{
return|return
name|map
operator|.
name|containsKey
argument_list|(
name|keyEquiv
argument_list|(
name|k
argument_list|)
argument_list|)
return|;
block|}
specifier|protected
name|Long
name|valEquiv
parameter_list|(
name|int
name|v
parameter_list|)
block|{
return|return
operator|(
name|long
operator|)
name|v
return|;
block|}
specifier|protected
name|int
name|valEquiv
parameter_list|(
name|Long
name|v
parameter_list|)
block|{
return|return
name|v
operator|.
name|intValue
argument_list|()
return|;
block|}
specifier|protected
name|Object
name|keyEquiv
parameter_list|(
name|int
name|k
parameter_list|)
block|{
if|if
condition|(
operator|!
name|canonicalObject
operator|.
name|containsKey
argument_list|(
name|k
argument_list|)
condition|)
block|{
name|canonicalObject
operator|.
name|put
argument_list|(
name|k
argument_list|,
name|k
argument_list|)
expr_stmt|;
block|}
return|return
name|canonicalObject
operator|.
name|get
argument_list|(
name|k
argument_list|)
return|;
block|}
specifier|protected
name|int
name|keyEquiv
parameter_list|(
name|Object
name|k
parameter_list|)
block|{
return|return
operator|(
name|Integer
operator|)
name|k
return|;
block|}
specifier|protected
name|Integer
name|keyEquiv_newObject
parameter_list|(
name|int
name|k
parameter_list|)
block|{
return|return
name|Integer
operator|.
name|valueOf
argument_list|(
name|k
argument_list|)
return|;
block|}
comment|/** 	 * We override this, because the identity hash map specifically behaves differently 	 * with respect to equality. 	 */
specifier|public
name|void
name|testPutDuplicates
parameter_list|()
block|{
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
literal|10
condition|;
name|i
operator|++
control|)
for|for
control|(
name|int
name|j
init|=
literal|0
init|;
name|j
operator|<
literal|10
condition|;
name|j
operator|++
control|)
block|{
name|simpleAdd
argument_list|(
name|keyEquiv_newObject
argument_list|(
name|j
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|int
index|[]
name|test
init|=
operator|new
name|int
index|[
literal|10
index|]
decl_stmt|;
for|for
control|(
name|Iterator
argument_list|<
name|?
extends|extends
name|Object
argument_list|>
name|ki
init|=
name|simpleKeyIterator
argument_list|()
init|;
name|ki
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|Object
name|k
init|=
name|ki
operator|.
name|next
argument_list|()
decl_stmt|;
name|int
name|kk
init|=
name|keyEquiv
argument_list|(
name|k
argument_list|)
decl_stmt|;
name|test
index|[
name|kk
index|]
operator|++
expr_stmt|;
block|}
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
literal|10
condition|;
name|i
operator|++
control|)
block|{
name|assertEquals
argument_list|(
literal|"key "
operator|+
name|i
operator|+
literal|" appeared 10 times"
argument_list|,
literal|10
argument_list|,
name|test
index|[
name|i
index|]
argument_list|)
expr_stmt|;
block|}
block|}
block|}
end_class

end_unit

