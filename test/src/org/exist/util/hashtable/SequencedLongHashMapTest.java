begin_unit|revision:1.0.0;language:Java;cregit-version:0.0.1
begin_package
package|package
name|org
operator|.
name|exist
operator|.
name|util
operator|.
name|hashtable
package|;
end_package

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Iterator
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertEquals
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertFalse
import|;
end_import

begin_class
specifier|public
class|class
name|SequencedLongHashMapTest
extends|extends
name|AbstractHashtableTest
argument_list|<
name|SequencedLongHashMap
argument_list|,
name|Long
argument_list|,
name|Object
argument_list|>
block|{
specifier|protected
name|SequencedLongHashMap
name|newT
parameter_list|()
block|{
return|return
operator|new
name|SequencedLongHashMap
argument_list|()
return|;
block|}
specifier|protected
name|Object
name|simpleGet
parameter_list|(
name|Long
name|k
parameter_list|)
block|{
return|return
name|map
operator|.
name|get
argument_list|(
name|k
argument_list|)
return|;
block|}
specifier|protected
name|void
name|simplePut
parameter_list|(
name|Long
name|k
parameter_list|,
name|Object
name|v
parameter_list|)
block|{
name|map
operator|.
name|put
argument_list|(
name|k
argument_list|,
name|v
argument_list|)
expr_stmt|;
block|}
specifier|protected
name|void
name|simpleRemove
parameter_list|(
name|Long
name|k
parameter_list|)
block|{
name|map
operator|.
name|remove
argument_list|(
name|k
argument_list|)
expr_stmt|;
block|}
specifier|protected
name|boolean
name|simpleContainsKey
parameter_list|(
name|int
name|k
parameter_list|)
block|{
return|return
name|map
operator|.
name|get
argument_list|(
name|keyEquiv
argument_list|(
name|k
argument_list|)
argument_list|)
operator|!=
literal|null
return|;
block|}
annotation|@
name|SuppressWarnings
argument_list|(
literal|"unchecked"
argument_list|)
specifier|protected
name|Iterator
argument_list|<
name|?
extends|extends
name|Object
argument_list|>
name|simpleValueIterator
parameter_list|()
block|{
return|return
name|map
operator|.
name|valueIterator
argument_list|()
return|;
block|}
specifier|protected
name|Object
name|valEquiv
parameter_list|(
name|int
name|v
parameter_list|)
block|{
return|return
name|v
return|;
block|}
specifier|protected
name|int
name|valEquiv
parameter_list|(
name|Object
name|v
parameter_list|)
block|{
return|return
operator|(
name|Integer
operator|)
name|v
return|;
block|}
specifier|protected
name|Long
name|keyEquiv
parameter_list|(
name|int
name|k
parameter_list|)
block|{
return|return
operator|(
name|long
operator|)
name|k
return|;
block|}
specifier|protected
name|Long
name|keyEquiv_newObject
parameter_list|(
name|int
name|k
parameter_list|)
block|{
return|return
name|Long
operator|.
name|valueOf
argument_list|(
name|k
argument_list|)
return|;
block|}
specifier|protected
name|int
name|keyEquiv
parameter_list|(
name|Long
name|k
parameter_list|)
block|{
return|return
name|k
operator|.
name|intValue
argument_list|()
return|;
block|}
annotation|@
name|SuppressWarnings
argument_list|(
literal|"unchecked"
argument_list|)
specifier|protected
name|Iterator
argument_list|<
name|?
extends|extends
name|Long
argument_list|>
name|simpleKeyIterator
parameter_list|()
block|{
return|return
name|map
operator|.
name|iterator
argument_list|()
return|;
block|}
annotation|@
name|SuppressWarnings
argument_list|(
literal|"unchecked"
argument_list|)
annotation|@
name|Test
specifier|public
name|void
name|sequenceProperty
parameter_list|()
throws|throws
name|Exception
block|{
name|map
operator|.
name|put
argument_list|(
literal|1
argument_list|,
literal|2
argument_list|)
expr_stmt|;
name|map
operator|.
name|put
argument_list|(
literal|3
argument_list|,
literal|4
argument_list|)
expr_stmt|;
name|map
operator|.
name|put
argument_list|(
literal|11
argument_list|,
literal|12
argument_list|)
expr_stmt|;
name|map
operator|.
name|put
argument_list|(
literal|5
argument_list|,
literal|6
argument_list|)
expr_stmt|;
name|map
operator|.
name|put
argument_list|(
literal|7
argument_list|,
literal|8
argument_list|)
expr_stmt|;
name|map
operator|.
name|put
argument_list|(
literal|9
argument_list|,
literal|10
argument_list|)
expr_stmt|;
name|map
operator|.
name|put
argument_list|(
literal|3
argument_list|,
literal|2
argument_list|)
expr_stmt|;
name|map
operator|.
name|put
argument_list|(
literal|11
argument_list|,
literal|10
argument_list|)
expr_stmt|;
name|map
operator|.
name|put
argument_list|(
literal|5
argument_list|,
literal|4
argument_list|)
expr_stmt|;
name|Iterator
argument_list|<
name|Long
argument_list|>
name|ki
init|=
name|map
operator|.
name|iterator
argument_list|()
decl_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
operator|(
name|int
operator|)
operator|(
name|long
operator|)
name|ki
operator|.
name|next
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|7
argument_list|,
operator|(
name|int
operator|)
operator|(
name|long
operator|)
name|ki
operator|.
name|next
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|9
argument_list|,
operator|(
name|int
operator|)
operator|(
name|long
operator|)
name|ki
operator|.
name|next
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|3
argument_list|,
operator|(
name|int
operator|)
operator|(
name|long
operator|)
name|ki
operator|.
name|next
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|11
argument_list|,
operator|(
name|int
operator|)
operator|(
name|long
operator|)
name|ki
operator|.
name|next
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|5
argument_list|,
operator|(
name|int
operator|)
operator|(
name|long
operator|)
name|ki
operator|.
name|next
argument_list|()
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|ki
operator|.
name|hasNext
argument_list|()
argument_list|)
expr_stmt|;
name|Iterator
argument_list|<
name|Integer
argument_list|>
name|vi
init|=
name|map
operator|.
name|valueIterator
argument_list|()
decl_stmt|;
name|assertEquals
argument_list|(
literal|2
argument_list|,
operator|(
name|int
operator|)
name|vi
operator|.
name|next
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|8
argument_list|,
operator|(
name|int
operator|)
name|vi
operator|.
name|next
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|10
argument_list|,
operator|(
name|int
operator|)
name|vi
operator|.
name|next
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|2
argument_list|,
operator|(
name|int
operator|)
name|vi
operator|.
name|next
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|10
argument_list|,
operator|(
name|int
operator|)
name|vi
operator|.
name|next
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|4
argument_list|,
operator|(
name|int
operator|)
name|vi
operator|.
name|next
argument_list|()
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|vi
operator|.
name|hasNext
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

