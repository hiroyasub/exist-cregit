begin_unit|revision:1.0.0;language:Java;cregit-version:0.0.1
begin_package
package|package
name|org
operator|.
name|exist
operator|.
name|util
operator|.
name|hashtable
package|;
end_package

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|After
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Before
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Iterator
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Random
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertEquals
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertFalse
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertTrue
import|;
end_import

begin_class
specifier|public
specifier|abstract
class|class
name|AbstractHashSetTest
parameter_list|<
name|T
parameter_list|,
name|K
parameter_list|>
block|{
specifier|protected
name|T
name|map
decl_stmt|;
specifier|protected
specifier|abstract
name|T
name|newT
parameter_list|()
function_decl|;
specifier|protected
specifier|abstract
name|K
name|keyEquiv
parameter_list|(
name|int
name|k
parameter_list|)
function_decl|;
specifier|protected
specifier|abstract
name|int
name|keyEquiv
parameter_list|(
name|K
name|k
parameter_list|)
function_decl|;
comment|/* 	 * make an equivalent of k, but always use a new object. This helps us to 	 * check that keys are compared by value, not by identity. 	 */
specifier|protected
specifier|abstract
name|K
name|keyEquiv_newObject
parameter_list|(
name|int
name|k
parameter_list|)
function_decl|;
specifier|protected
specifier|abstract
name|Iterator
argument_list|<
name|?
extends|extends
name|K
argument_list|>
name|simpleKeyIterator
parameter_list|()
function_decl|;
specifier|protected
name|void
name|clearT
parameter_list|()
block|{
block|}
specifier|protected
specifier|abstract
name|void
name|simpleAdd
parameter_list|(
name|K
name|k
parameter_list|)
function_decl|;
specifier|protected
specifier|abstract
name|void
name|simpleRemove
parameter_list|(
name|K
name|k
parameter_list|)
function_decl|;
specifier|protected
name|boolean
name|simpleContainsKey
parameter_list|(
name|K
name|k
parameter_list|)
block|{
for|for
control|(
name|Iterator
argument_list|<
name|?
extends|extends
name|K
argument_list|>
name|ki
init|=
name|simpleKeyIterator
argument_list|()
init|;
name|ki
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
if|if
condition|(
name|k
operator|.
name|equals
argument_list|(
name|ki
operator|.
name|next
argument_list|()
argument_list|)
condition|)
block|{
return|return
literal|true
return|;
block|}
block|}
return|return
literal|false
return|;
block|}
annotation|@
name|Before
specifier|public
specifier|final
name|void
name|setUp
parameter_list|()
block|{
name|map
operator|=
name|newT
argument_list|()
expr_stmt|;
block|}
annotation|@
name|After
specifier|public
specifier|final
name|void
name|tearDown
parameter_list|()
block|{
name|clearT
argument_list|()
expr_stmt|;
name|map
operator|=
literal|null
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|zeroKeys
parameter_list|()
throws|throws
name|Exception
block|{
name|assertFalse
argument_list|(
literal|"empty collection should have no keys"
argument_list|,
name|simpleKeyIterator
argument_list|()
operator|.
name|hasNext
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|setPut
parameter_list|()
throws|throws
name|Exception
block|{
name|simpleAdd
argument_list|(
name|keyEquiv
argument_list|(
literal|12345
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|simpleContainsKey
argument_list|(
name|keyEquiv
argument_list|(
literal|12345
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|putAndRemove
parameter_list|()
throws|throws
name|Exception
block|{
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
literal|10
condition|;
name|i
operator|++
control|)
block|{
name|simpleAdd
argument_list|(
name|keyEquiv
argument_list|(
name|i
argument_list|)
argument_list|)
expr_stmt|;
block|}
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
literal|10
condition|;
name|i
operator|+=
literal|2
control|)
block|{
name|simpleRemove
argument_list|(
name|keyEquiv
argument_list|(
name|i
argument_list|)
argument_list|)
expr_stmt|;
block|}
for|for
control|(
name|int
name|i
init|=
literal|5
init|;
name|i
operator|<
literal|10
condition|;
name|i
operator|++
control|)
block|{
name|simpleAdd
argument_list|(
name|keyEquiv
argument_list|(
name|i
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|boolean
index|[]
name|test
init|=
operator|new
name|boolean
index|[
literal|10
index|]
decl_stmt|;
for|for
control|(
name|Iterator
argument_list|<
name|?
extends|extends
name|K
argument_list|>
name|ki
init|=
name|simpleKeyIterator
argument_list|()
init|;
name|ki
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|K
name|k
init|=
name|ki
operator|.
name|next
argument_list|()
decl_stmt|;
name|int
name|kk
init|=
name|keyEquiv
argument_list|(
name|k
argument_list|)
decl_stmt|;
name|test
index|[
name|kk
index|]
operator|=
literal|true
expr_stmt|;
block|}
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
literal|10
condition|;
name|i
operator|++
control|)
block|{
name|assertEquals
argument_list|(
name|test
index|[
name|i
index|]
argument_list|,
name|i
operator|>=
literal|5
operator|||
operator|(
name|i
operator|%
literal|2
operator|)
operator|==
literal|1
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Test
specifier|public
name|void
name|putDuplicates
parameter_list|()
block|{
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
literal|10
condition|;
name|i
operator|++
control|)
for|for
control|(
name|int
name|j
init|=
literal|0
init|;
name|j
operator|<
literal|10
condition|;
name|j
operator|++
control|)
block|{
name|simpleAdd
argument_list|(
name|keyEquiv_newObject
argument_list|(
name|j
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|boolean
index|[]
name|test
init|=
operator|new
name|boolean
index|[
literal|10
index|]
decl_stmt|;
for|for
control|(
name|Iterator
argument_list|<
name|?
extends|extends
name|K
argument_list|>
name|ki
init|=
name|simpleKeyIterator
argument_list|()
init|;
name|ki
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|K
name|k
init|=
name|ki
operator|.
name|next
argument_list|()
decl_stmt|;
name|int
name|kk
init|=
name|keyEquiv
argument_list|(
name|k
argument_list|)
decl_stmt|;
name|assertFalse
argument_list|(
literal|"Key "
operator|+
name|kk
operator|+
literal|" appears only once"
argument_list|,
name|test
index|[
name|kk
index|]
argument_list|)
expr_stmt|;
name|test
index|[
name|kk
index|]
operator|=
literal|true
expr_stmt|;
block|}
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
literal|10
condition|;
name|i
operator|++
control|)
block|{
name|assertTrue
argument_list|(
literal|"key "
operator|+
name|i
operator|+
literal|" appeared once"
argument_list|,
name|test
index|[
name|i
index|]
argument_list|)
expr_stmt|;
block|}
block|}
block|}
end_class

end_unit

