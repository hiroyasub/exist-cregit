begin_unit|revision:1.0.0;language:Java;cregit-version:0.0.1
begin_package
package|package
name|org
operator|.
name|exist
operator|.
name|xupdate
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|ByteArrayInputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|InputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|URISyntaxException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|URL
import|;
end_import

begin_import
import|import
name|java
operator|.
name|nio
operator|.
name|file
operator|.
name|Files
import|;
end_import

begin_import
import|import
name|java
operator|.
name|nio
operator|.
name|file
operator|.
name|Path
import|;
end_import

begin_import
import|import
name|java
operator|.
name|nio
operator|.
name|file
operator|.
name|Paths
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Arrays
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|xml
operator|.
name|parsers
operator|.
name|DocumentBuilder
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|xml
operator|.
name|parsers
operator|.
name|DocumentBuilderFactory
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|xml
operator|.
name|parsers
operator|.
name|ParserConfigurationException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|TestUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|security
operator|.
name|Account
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|security
operator|.
name|Permission
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|xmldb
operator|.
name|DatabaseInstanceManager
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|xmldb
operator|.
name|UserManagementService
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|xmldb
operator|.
name|XmldbURI
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|After
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Assume
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Before
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|runner
operator|.
name|RunWith
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|runners
operator|.
name|Parameterized
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|runners
operator|.
name|Parameterized
operator|.
name|Parameter
import|;
end_import

begin_import
import|import static
name|java
operator|.
name|nio
operator|.
name|charset
operator|.
name|StandardCharsets
operator|.
name|UTF_8
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|hamcrest
operator|.
name|Matchers
operator|.
name|*
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|runners
operator|.
name|Parameterized
operator|.
name|Parameters
import|;
end_import

begin_import
import|import
name|org
operator|.
name|w3c
operator|.
name|dom
operator|.
name|Document
import|;
end_import

begin_import
import|import
name|org
operator|.
name|w3c
operator|.
name|dom
operator|.
name|Node
import|;
end_import

begin_import
import|import
name|org
operator|.
name|w3c
operator|.
name|dom
operator|.
name|traversal
operator|.
name|DocumentTraversal
import|;
end_import

begin_import
import|import
name|org
operator|.
name|w3c
operator|.
name|dom
operator|.
name|traversal
operator|.
name|NodeFilter
import|;
end_import

begin_import
import|import
name|org
operator|.
name|w3c
operator|.
name|dom
operator|.
name|traversal
operator|.
name|NodeIterator
import|;
end_import

begin_import
import|import
name|org
operator|.
name|xml
operator|.
name|sax
operator|.
name|InputSource
import|;
end_import

begin_import
import|import
name|org
operator|.
name|xml
operator|.
name|sax
operator|.
name|SAXException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|xmldb
operator|.
name|api
operator|.
name|DatabaseManager
import|;
end_import

begin_import
import|import
name|org
operator|.
name|xmldb
operator|.
name|api
operator|.
name|base
operator|.
name|Collection
import|;
end_import

begin_import
import|import
name|org
operator|.
name|xmldb
operator|.
name|api
operator|.
name|base
operator|.
name|Database
import|;
end_import

begin_import
import|import
name|org
operator|.
name|xmldb
operator|.
name|api
operator|.
name|base
operator|.
name|Resource
import|;
end_import

begin_import
import|import
name|org
operator|.
name|xmldb
operator|.
name|api
operator|.
name|base
operator|.
name|XMLDBException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|xmldb
operator|.
name|api
operator|.
name|modules
operator|.
name|CollectionManagementService
import|;
end_import

begin_import
import|import
name|org
operator|.
name|xmldb
operator|.
name|api
operator|.
name|modules
operator|.
name|XMLResource
import|;
end_import

begin_import
import|import
name|org
operator|.
name|xmldb
operator|.
name|api
operator|.
name|modules
operator|.
name|XUpdateQueryService
import|;
end_import

begin_comment
comment|/**  * @author berlinge-to  */
end_comment

begin_class
annotation|@
name|RunWith
argument_list|(
name|Parameterized
operator|.
name|class
argument_list|)
specifier|public
class|class
name|XUpdateTest
block|{
comment|//TODO should not execute as 'admin' user
comment|//also additional tests needed to verify update permissions
annotation|@
name|Parameters
argument_list|(
name|name
operator|=
literal|"{0}"
argument_list|)
specifier|public
specifier|static
name|java
operator|.
name|util
operator|.
name|Collection
argument_list|<
name|Object
index|[]
argument_list|>
name|data
parameter_list|()
block|{
return|return
name|Arrays
operator|.
name|asList
argument_list|(
operator|new
name|Object
index|[]
index|[]
block|{
block|{
literal|"append"
block|,
literal|"address.xml"
block|}
block|,
block|{
literal|"insertafter"
block|,
literal|"address.xml"
block|}
block|,
block|{
literal|"insertbefore"
block|,
literal|"address.xml"
block|}
block|,
block|{
literal|"remove"
block|,
literal|"address.xml"
block|}
block|,
block|{
literal|"update"
block|,
literal|"address.xml"
block|}
block|,
block|{
literal|"append_attribute"
block|,
literal|"address.xml"
block|}
block|,
block|{
literal|"append_child"
block|,
literal|"address.xml"
block|}
block|,
block|{
literal|"insertafter_big"
block|,
literal|"address_big.xml"
block|}
block|,
block|{
literal|"conditional"
block|,
literal|"address.xml"
block|}
block|,
block|{
literal|"variables"
block|,
literal|"address.xml"
block|}
block|,
block|{
literal|"replace"
block|,
literal|"address.xml"
block|}
block|,
block|{
literal|"whitespace"
block|,
literal|"address.xml"
block|}
block|,
block|{
literal|"namespaces"
block|,
literal|"namespaces.xml"
block|}
block|,
comment|/* TODO Added by Geoff Shuetrim (geoff@galexy.net) on 15 July 2006             to highlight that root element renaming does not currently succeed,             resulting instead in a null pointer exception because the renaming             relies upon obtaining the parent element of the element being             renamed and this is null for the root element. */
block|{
literal|"rename_root_element"
block|,
literal|"address.xml"
block|}
block|,
comment|/* TODO Added by Geoff Shuetrim (geoff@galexy.net) on 15 July 2006             to highlight that renaming of an element fails when the renaming also             involves a change of namespace */
block|{
literal|"rename_including_namespace"
block|,
literal|"namespaces.xml"
block|}
block|}
argument_list|)
return|;
block|}
annotation|@
name|Parameter
specifier|public
name|String
name|testName
decl_stmt|;
annotation|@
name|Parameter
argument_list|(
name|value
operator|=
literal|1
argument_list|)
specifier|public
name|String
name|sourceFile
decl_stmt|;
specifier|private
specifier|final
specifier|static
name|String
name|URI
init|=
name|XmldbURI
operator|.
name|LOCAL_DB
decl_stmt|;
specifier|private
specifier|final
specifier|static
name|String
name|DRIVER
init|=
literal|"org.exist.xmldb.DatabaseImpl"
decl_stmt|;
specifier|private
specifier|final
specifier|static
name|String
name|XUPDATE_COLLECTION
init|=
literal|"xupdate_tests"
decl_stmt|;
specifier|private
specifier|final
specifier|static
name|String
name|MODIFICATION_DIR_NAME
init|=
literal|"modifications"
decl_stmt|;
specifier|private
specifier|final
specifier|static
name|String
name|RESULT_DIR_NAME
init|=
literal|"results"
decl_stmt|;
specifier|private
specifier|final
specifier|static
name|String
name|SOURCE_DIR_NAME
init|=
literal|"input"
decl_stmt|;
specifier|private
specifier|final
specifier|static
name|String
name|XUPDATE_FILE
init|=
literal|"xu.xml"
decl_stmt|;
comment|// xlm document name in eXist
specifier|private
name|Collection
name|col
init|=
literal|null
decl_stmt|;
annotation|@
name|Test
specifier|public
name|void
name|xupdate
parameter_list|()
throws|throws
name|Exception
block|{
comment|//skip tests from Geoff Shuetrim (see above!)
name|Assume
operator|.
name|assumeThat
argument_list|(
name|testName
argument_list|,
name|not
argument_list|(
name|anyOf
argument_list|(
name|equalTo
argument_list|(
literal|"rename_root_element"
argument_list|)
argument_list|,
name|equalTo
argument_list|(
literal|"rename_including_namespace"
argument_list|)
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|addDocument
argument_list|(
name|sourceFile
argument_list|)
expr_stmt|;
comment|//update input xml file
specifier|final
name|Path
name|modFile
init|=
name|getRelFile
argument_list|(
name|MODIFICATION_DIR_NAME
operator|+
literal|"/"
operator|+
name|testName
operator|+
literal|".xml"
argument_list|)
decl_stmt|;
name|Document
name|xupdateResult
init|=
name|updateDocument
argument_list|(
name|modFile
argument_list|)
decl_stmt|;
name|removeWhiteSpace
argument_list|(
name|xupdateResult
argument_list|)
expr_stmt|;
comment|//Read reference xml file
name|DocumentBuilderFactory
name|parserFactory
init|=
name|DocumentBuilderFactory
operator|.
name|newInstance
argument_list|()
decl_stmt|;
name|parserFactory
operator|.
name|setNamespaceAware
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|DocumentBuilder
name|builder
init|=
name|parserFactory
operator|.
name|newDocumentBuilder
argument_list|()
decl_stmt|;
specifier|final
name|Path
name|resultFile
init|=
name|getRelFile
argument_list|(
name|RESULT_DIR_NAME
operator|+
literal|"/"
operator|+
name|testName
operator|+
literal|".xml"
argument_list|)
decl_stmt|;
name|Document
name|referenceXML
init|=
name|builder
operator|.
name|parse
argument_list|(
name|resultFile
operator|.
name|toFile
argument_list|()
argument_list|)
decl_stmt|;
name|removeWhiteSpace
argument_list|(
name|referenceXML
argument_list|)
expr_stmt|;
comment|//compare
operator|new
name|CompareDocuments
argument_list|()
operator|.
name|compare
argument_list|(
name|referenceXML
argument_list|,
name|xupdateResult
argument_list|,
literal|""
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|removeDocument
argument_list|()
expr_stmt|;
block|}
comment|/*      * helperfunctions      *       */
specifier|public
name|void
name|addDocument
parameter_list|(
specifier|final
name|String
name|sourceFile
parameter_list|)
throws|throws
name|XMLDBException
throws|,
name|IOException
throws|,
name|URISyntaxException
block|{
specifier|final
name|Path
name|f
init|=
name|getRelFile
argument_list|(
name|SOURCE_DIR_NAME
operator|+
literal|"/"
operator|+
name|sourceFile
argument_list|)
decl_stmt|;
specifier|final
name|XMLResource
name|document
init|=
operator|(
name|XMLResource
operator|)
name|col
operator|.
name|createResource
argument_list|(
name|XUPDATE_FILE
argument_list|,
literal|"XMLResource"
argument_list|)
decl_stmt|;
name|document
operator|.
name|setContent
argument_list|(
name|f
argument_list|)
expr_stmt|;
name|col
operator|.
name|storeResource
argument_list|(
name|document
argument_list|)
expr_stmt|;
block|}
specifier|public
name|Path
name|getRelFile
parameter_list|(
specifier|final
name|String
name|relPath
parameter_list|)
throws|throws
name|IOException
throws|,
name|URISyntaxException
block|{
specifier|final
name|URL
name|url
init|=
name|getClass
argument_list|()
operator|.
name|getResource
argument_list|(
name|relPath
argument_list|)
decl_stmt|;
if|if
condition|(
name|url
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|IOException
argument_list|(
literal|"Can't find file: "
operator|+
name|relPath
argument_list|)
throw|;
block|}
specifier|final
name|Path
name|f
init|=
name|Paths
operator|.
name|get
argument_list|(
name|url
operator|.
name|toURI
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|Files
operator|.
name|isReadable
argument_list|(
name|f
argument_list|)
condition|)
block|{
throw|throw
operator|new
name|IOException
argument_list|(
literal|"Can't read file: "
operator|+
name|url
argument_list|)
throw|;
block|}
return|return
name|f
return|;
block|}
specifier|public
name|void
name|removeDocument
parameter_list|()
throws|throws
name|XMLDBException
block|{
specifier|final
name|Resource
name|document
init|=
name|col
operator|.
name|getResource
argument_list|(
name|XUPDATE_FILE
argument_list|)
decl_stmt|;
name|col
operator|.
name|removeResource
argument_list|(
name|document
argument_list|)
expr_stmt|;
block|}
specifier|private
name|Document
name|updateDocument
parameter_list|(
specifier|final
name|Path
name|updateFile
parameter_list|)
throws|throws
name|XMLDBException
throws|,
name|IOException
throws|,
name|ParserConfigurationException
throws|,
name|SAXException
block|{
specifier|final
name|XUpdateQueryService
name|service
init|=
operator|(
name|XUpdateQueryService
operator|)
name|col
operator|.
name|getService
argument_list|(
literal|"XUpdateQueryService"
argument_list|,
literal|"1.0"
argument_list|)
decl_stmt|;
comment|// Read XUpdate-Modifcations
specifier|final
name|String
name|xUpdateModifications
init|=
operator|new
name|String
argument_list|(
name|Files
operator|.
name|readAllBytes
argument_list|(
name|updateFile
argument_list|)
argument_list|,
name|UTF_8
argument_list|)
decl_stmt|;
comment|//
name|service
operator|.
name|update
argument_list|(
name|xUpdateModifications
argument_list|)
expr_stmt|;
comment|//col.setProperty("pretty", "true");
comment|//col.setProperty("encoding", "UTF-8");
specifier|final
name|XMLResource
name|ret
init|=
operator|(
name|XMLResource
operator|)
name|col
operator|.
name|getResource
argument_list|(
name|XUPDATE_FILE
argument_list|)
decl_stmt|;
specifier|final
name|String
name|xmlString
init|=
operator|(
operator|(
name|String
operator|)
name|ret
operator|.
name|getContent
argument_list|()
operator|)
decl_stmt|;
comment|// convert xml string to dom
comment|// todo: make it nicer
specifier|final
name|DocumentBuilderFactory
name|parserFactory
init|=
name|DocumentBuilderFactory
operator|.
name|newInstance
argument_list|()
decl_stmt|;
name|parserFactory
operator|.
name|setNamespaceAware
argument_list|(
literal|true
argument_list|)
expr_stmt|;
try|try
init|(
specifier|final
name|InputStream
name|is
init|=
operator|new
name|ByteArrayInputStream
argument_list|(
name|xmlString
operator|.
name|getBytes
argument_list|()
argument_list|)
init|)
block|{
specifier|final
name|InputSource
name|in
init|=
operator|new
name|InputSource
argument_list|(
name|is
argument_list|)
decl_stmt|;
specifier|final
name|DocumentBuilder
name|builder
init|=
name|parserFactory
operator|.
name|newDocumentBuilder
argument_list|()
decl_stmt|;
return|return
name|builder
operator|.
name|parse
argument_list|(
name|in
argument_list|)
return|;
block|}
block|}
specifier|private
name|void
name|removeWhiteSpace
parameter_list|(
specifier|final
name|Document
name|document
parameter_list|)
block|{
specifier|final
name|DocumentTraversal
name|dt
init|=
operator|(
name|DocumentTraversal
operator|)
name|document
decl_stmt|;
specifier|final
name|NodeIterator
name|nodeIterator
init|=
name|dt
operator|.
name|createNodeIterator
argument_list|(
name|document
argument_list|,
name|NodeFilter
operator|.
name|SHOW_TEXT
argument_list|,
literal|null
argument_list|,
literal|true
argument_list|)
decl_stmt|;
name|Node
name|node
init|=
name|nodeIterator
operator|.
name|nextNode
argument_list|()
decl_stmt|;
while|while
condition|(
name|node
operator|!=
literal|null
condition|)
block|{
if|if
condition|(
name|node
operator|.
name|getNodeValue
argument_list|()
operator|.
name|trim
argument_list|()
operator|.
name|compareTo
argument_list|(
literal|""
argument_list|)
operator|==
literal|0
condition|)
block|{
name|node
operator|.
name|getParentNode
argument_list|()
operator|.
name|removeChild
argument_list|(
name|node
argument_list|)
expr_stmt|;
block|}
name|node
operator|=
name|nodeIterator
operator|.
name|nextNode
argument_list|()
expr_stmt|;
block|}
block|}
annotation|@
name|Before
specifier|public
name|void
name|startup
parameter_list|()
throws|throws
name|ClassNotFoundException
throws|,
name|InstantiationException
throws|,
name|IllegalAccessException
throws|,
name|XMLDBException
block|{
specifier|final
name|Class
argument_list|<
name|?
argument_list|>
name|cl
init|=
name|Class
operator|.
name|forName
argument_list|(
name|DRIVER
argument_list|)
decl_stmt|;
specifier|final
name|Database
name|database
init|=
operator|(
name|Database
operator|)
name|cl
operator|.
name|newInstance
argument_list|()
decl_stmt|;
name|database
operator|.
name|setProperty
argument_list|(
literal|"create-database"
argument_list|,
literal|"true"
argument_list|)
expr_stmt|;
name|DatabaseManager
operator|.
name|registerDatabase
argument_list|(
name|database
argument_list|)
expr_stmt|;
name|col
operator|=
name|DatabaseManager
operator|.
name|getCollection
argument_list|(
name|URI
operator|+
literal|"/"
operator|+
name|XUPDATE_COLLECTION
argument_list|)
expr_stmt|;
if|if
condition|(
name|col
operator|==
literal|null
condition|)
block|{
specifier|final
name|Collection
name|root
init|=
name|DatabaseManager
operator|.
name|getCollection
argument_list|(
name|URI
argument_list|,
literal|"admin"
argument_list|,
literal|""
argument_list|)
decl_stmt|;
name|CollectionManagementService
name|mgtService
init|=
operator|(
name|CollectionManagementService
operator|)
name|root
operator|.
name|getService
argument_list|(
literal|"CollectionManagementService"
argument_list|,
literal|"1.0"
argument_list|)
decl_stmt|;
name|col
operator|=
name|mgtService
operator|.
name|createCollection
argument_list|(
name|XUPDATE_COLLECTION
argument_list|)
expr_stmt|;
specifier|final
name|UserManagementService
name|ums
init|=
operator|(
name|UserManagementService
operator|)
name|col
operator|.
name|getService
argument_list|(
literal|"UserManagementService"
argument_list|,
literal|"1.0"
argument_list|)
decl_stmt|;
comment|// change ownership to guest
specifier|final
name|Account
name|guest
init|=
name|ums
operator|.
name|getAccount
argument_list|(
literal|"guest"
argument_list|)
decl_stmt|;
name|ums
operator|.
name|chown
argument_list|(
name|guest
argument_list|,
name|guest
operator|.
name|getPrimaryGroup
argument_list|()
argument_list|)
expr_stmt|;
name|ums
operator|.
name|chmod
argument_list|(
name|Permission
operator|.
name|DEFAULT_COLLECTION_PERM
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|After
specifier|public
name|void
name|shutdown
parameter_list|()
throws|throws
name|XMLDBException
block|{
name|TestUtils
operator|.
name|cleanupDB
argument_list|()
expr_stmt|;
specifier|final
name|Collection
name|root
init|=
name|DatabaseManager
operator|.
name|getCollection
argument_list|(
name|URI
argument_list|,
literal|"admin"
argument_list|,
literal|""
argument_list|)
decl_stmt|;
specifier|final
name|DatabaseInstanceManager
name|mgr
init|=
operator|(
name|DatabaseInstanceManager
operator|)
name|root
operator|.
name|getService
argument_list|(
literal|"DatabaseInstanceManager"
argument_list|,
literal|"1.0"
argument_list|)
decl_stmt|;
name|mgr
operator|.
name|shutdown
argument_list|()
expr_stmt|;
block|}
block|}
end_class

end_unit

