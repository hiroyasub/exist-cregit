begin_unit|revision:1.0.0;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * eXist Open Source Native XML Database  * Copyright (C) 2001-2007 The eXist Project  * http://exist-db.org  *  * This program is free software; you can redistribute it and/or  * modify it under the terms of the GNU Lesser General Public License  * as published by the Free Software Foundation; either version 2  * of the License, or (at your option) any later version.  *    * This program is distributed in the hope that it will be useful,  * but WITHOUT ANY WARRANTY; without even the implied warranty of  * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the  * GNU Lesser General Public License for more details.  *   * You should have received a copy of the GNU Lesser General Public License  * along with this program; if not, write to the Free Software Foundation  * Inc., 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301, USA.  *    *  $Id$  */
end_comment

begin_package
package|package
name|org
operator|.
name|exist
operator|.
name|fulltext
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|File
import|;
end_import

begin_import
import|import
name|junit
operator|.
name|textui
operator|.
name|TestRunner
import|;
end_import

begin_import
import|import
name|org
operator|.
name|custommonkey
operator|.
name|xmlunit
operator|.
name|XMLTestCase
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|EXistException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|storage
operator|.
name|BrokerPool
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|util
operator|.
name|Configuration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|util
operator|.
name|DatabaseConfigurationException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|xmldb
operator|.
name|DatabaseInstanceManager
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|xmldb
operator|.
name|IndexQueryService
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|xmldb
operator|.
name|XQueryService
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|xmldb
operator|.
name|XmldbURI
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|xquery
operator|.
name|FunctionFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|xmldb
operator|.
name|api
operator|.
name|DatabaseManager
import|;
end_import

begin_import
import|import
name|org
operator|.
name|xmldb
operator|.
name|api
operator|.
name|base
operator|.
name|Collection
import|;
end_import

begin_import
import|import
name|org
operator|.
name|xmldb
operator|.
name|api
operator|.
name|base
operator|.
name|Database
import|;
end_import

begin_import
import|import
name|org
operator|.
name|xmldb
operator|.
name|api
operator|.
name|base
operator|.
name|Resource
import|;
end_import

begin_import
import|import
name|org
operator|.
name|xmldb
operator|.
name|api
operator|.
name|base
operator|.
name|ResourceIterator
import|;
end_import

begin_import
import|import
name|org
operator|.
name|xmldb
operator|.
name|api
operator|.
name|base
operator|.
name|ResourceSet
import|;
end_import

begin_import
import|import
name|org
operator|.
name|xmldb
operator|.
name|api
operator|.
name|base
operator|.
name|XMLDBException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|xmldb
operator|.
name|api
operator|.
name|modules
operator|.
name|CollectionManagementService
import|;
end_import

begin_import
import|import
name|org
operator|.
name|xmldb
operator|.
name|api
operator|.
name|modules
operator|.
name|XMLResource
import|;
end_import

begin_class
specifier|public
class|class
name|FtQueryTest
extends|extends
name|XMLTestCase
block|{
specifier|private
specifier|static
name|String
name|COLLECTION_CONFIG1
init|=
literal|"<collection xmlns=\"http://exist-db.org/collection-config/1.0\">"
operator|+
literal|"<index>"
operator|+
literal|"<fulltext default=\"all\">"
operator|+
literal|"</fulltext>"
operator|+
literal|"</index>"
operator|+
literal|"</collection>"
decl_stmt|;
specifier|private
specifier|final
specifier|static
name|String
name|TEST_XML
init|=
literal|"<test-doc>"
operator|+
literal|"<test-elem id=\"1\" attribute1=\"test some text\"/>"
operator|+
literal|"<test-elem id=\"2\" attribute2=\"test some text\"/>"
operator|+
literal|"<test-elem id=\"3\" attribute1=\"test some text\"/>"
operator|+
literal|"<test-elem id=\"4\" attribute3=\"test some text\"/>"
operator|+
literal|"</test-doc>"
decl_stmt|;
specifier|private
specifier|final
specifier|static
name|String
name|QNAME_XML
init|=
literal|"<root>"
operator|+
literal|"<test>"
operator|+
literal|"<node id=\"1\">First node</node>"
operator|+
literal|"<node id=\"2\">Second node</node>"
operator|+
literal|"</test>"
operator|+
literal|"</root>"
decl_stmt|;
specifier|private
specifier|final
specifier|static
name|String
name|NESTED_XML
init|=
literal|"<root>\n"
operator|+
literal|"<nested><s>un</s>even</nested>\n"
operator|+
literal|"<nested>un<s>suitable</s></nested>\n"
operator|+
literal|"<nested><s>in</s><s>ap</s><s>pro</s><s>pri</s><s>ate</s></nested>\n"
operator|+
literal|"</root>"
decl_stmt|;
specifier|private
specifier|final
specifier|static
name|String
name|MATCH_COUNT
init|=
literal|"<doc> term term<level1>term term</level1><level1>term<level2>term</level2></level1></doc>"
decl_stmt|;
specifier|private
specifier|final
specifier|static
name|String
name|FILES
index|[]
init|=
block|{
literal|"hamlet.xml"
block|,
literal|"macbeth.xml"
block|,
literal|"r_and_j.xml"
block|}
decl_stmt|;
specifier|static
name|File
name|existDir
decl_stmt|;
static|static
block|{
name|String
name|existHome
init|=
name|System
operator|.
name|getProperty
argument_list|(
literal|"exist.home"
argument_list|)
decl_stmt|;
name|existDir
operator|=
name|existHome
operator|==
literal|null
condition|?
operator|new
name|File
argument_list|(
literal|"."
argument_list|)
else|:
operator|new
name|File
argument_list|(
name|existHome
argument_list|)
expr_stmt|;
block|}
specifier|private
specifier|final
specifier|static
name|File
name|SHAKES_DIR
init|=
operator|new
name|File
argument_list|(
name|existDir
argument_list|,
literal|"samples"
operator|+
name|File
operator|.
name|separator
operator|+
literal|"shakespeare"
argument_list|)
decl_stmt|;
specifier|private
specifier|final
specifier|static
name|File
name|MODS_DIR
init|=
operator|new
name|File
argument_list|(
name|existDir
argument_list|,
literal|"samples"
operator|+
name|File
operator|.
name|separator
operator|+
literal|"mods"
argument_list|)
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|String
name|TEST_COLLECTION_NAME
init|=
literal|"testft"
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|String
name|TEST_COLLECTION_PATH
init|=
name|XmldbURI
operator|.
name|ROOT_COLLECTION
operator|+
literal|"/"
operator|+
name|TEST_COLLECTION_NAME
decl_stmt|;
specifier|private
name|Database
name|database
decl_stmt|;
specifier|private
name|Collection
name|testCollection
decl_stmt|;
specifier|public
name|void
name|testFtOperators
parameter_list|()
block|{
try|try
block|{
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"----- testFtOperators -----"
argument_list|)
expr_stmt|;
name|XQueryService
name|service
init|=
operator|(
name|XQueryService
operator|)
name|testCollection
operator|.
name|getService
argument_list|(
literal|"XQueryService"
argument_list|,
literal|"1.0"
argument_list|)
decl_stmt|;
name|ResourceSet
name|result
init|=
name|service
operator|.
name|query
argument_list|(
literal|"//SPEECH[LINE&= 'love']"
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|160
argument_list|,
name|result
operator|.
name|getSize
argument_list|()
argument_list|)
expr_stmt|;
name|result
operator|=
name|service
operator|.
name|query
argument_list|(
literal|"//SPEECH[LINE&= 'thou']"
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|290
argument_list|,
name|result
operator|.
name|getSize
argument_list|()
argument_list|)
expr_stmt|;
name|result
operator|=
name|service
operator|.
name|query
argument_list|(
literal|"//SPEECH[LINE&= 'thou']"
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|290
argument_list|,
name|result
operator|.
name|getSize
argument_list|()
argument_list|)
expr_stmt|;
name|result
operator|=
name|service
operator|.
name|query
argument_list|(
literal|"//SPEECH[LINE&= 'fenny snake']/LINE[1]"
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|result
operator|.
name|getSize
argument_list|()
argument_list|)
expr_stmt|;
name|assertXMLEqual
argument_list|(
name|result
operator|.
name|getResource
argument_list|(
literal|0
argument_list|)
operator|.
name|getContent
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|,
literal|"<LINE>Fillet of a fenny snake,</LINE>"
argument_list|)
expr_stmt|;
comment|//assertXMLEqual(result.getResource(0).getContent().toString(), "<LINE>Fillet of a<exist:match xmlns:exist='http://exist.sourceforge.net/NS/exist'>fenny</exist:match><exist:match xmlns:exist='http://exist.sourceforge.net/NS/exist'>snake</exist:match>,</LINE>");
name|result
operator|=
name|service
operator|.
name|query
argument_list|(
literal|"//SPEECH[LINE&= 'god*']"
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|79
argument_list|,
name|result
operator|.
name|getSize
argument_list|()
argument_list|)
expr_stmt|;
name|result
operator|=
name|service
operator|.
name|query
argument_list|(
literal|"//SPEECH[LINE&= 'god in heaven']"
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|result
operator|.
name|getSize
argument_list|()
argument_list|)
expr_stmt|;
name|result
operator|=
name|service
operator|.
name|query
argument_list|(
literal|"//SPEECH[SPEAKER&= 'Nurse']"
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|90
argument_list|,
name|result
operator|.
name|getSize
argument_list|()
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|e
operator|.
name|printStackTrace
argument_list|()
expr_stmt|;
name|fail
argument_list|(
name|e
operator|.
name|getMessage
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
specifier|public
name|void
name|testFtMatchFunctions
parameter_list|()
block|{
try|try
block|{
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"----- testFtOperators -----"
argument_list|)
expr_stmt|;
name|XQueryService
name|service
init|=
operator|(
name|XQueryService
operator|)
name|testCollection
operator|.
name|getService
argument_list|(
literal|"XQueryService"
argument_list|,
literal|"1.0"
argument_list|)
decl_stmt|;
name|ResourceSet
name|result
init|=
name|service
operator|.
name|query
argument_list|(
literal|"//SPEECH[text:match-all(LINE, 'love', 'w')]"
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|160
argument_list|,
name|result
operator|.
name|getSize
argument_list|()
argument_list|)
expr_stmt|;
name|result
operator|=
name|service
operator|.
name|query
argument_list|(
literal|"//SPEECH[text:match-all(LINE, 'love')]"
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|190
argument_list|,
name|result
operator|.
name|getSize
argument_list|()
argument_list|)
expr_stmt|;
name|result
operator|=
name|service
operator|.
name|query
argument_list|(
literal|"//SPEECH[text:match-all(LINE, 'love', 'w')]"
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|160
argument_list|,
name|result
operator|.
name|getSize
argument_list|()
argument_list|)
expr_stmt|;
name|result
operator|=
name|service
operator|.
name|query
argument_list|(
literal|"//SPEECH[text:match-all(LINE, 'fenny', 'snake')]/LINE[1]"
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|result
operator|.
name|getSize
argument_list|()
argument_list|)
expr_stmt|;
name|assertXMLEqual
argument_list|(
name|result
operator|.
name|getResource
argument_list|(
literal|0
argument_list|)
operator|.
name|getContent
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|,
literal|"<LINE>Fillet of a fenny snake,</LINE>"
argument_list|)
expr_stmt|;
comment|//assertXMLEqual(result.getResource(0).getContent().toString(), "<LINE>Fillet of a<exist:match xmlns:exist='http://exist.sourceforge.net/NS/exist'>fenny</exist:match><exist:match xmlns:exist='http://exist.sourceforge.net/NS/exist'>snake</exist:match>,</LINE>");
name|result
operator|=
name|service
operator|.
name|query
argument_list|(
literal|"//SPEECH[text:match-all(LINE, ('fenny', 'snake'))]/LINE[1]"
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|result
operator|.
name|getSize
argument_list|()
argument_list|)
expr_stmt|;
name|assertXMLEqual
argument_list|(
name|result
operator|.
name|getResource
argument_list|(
literal|0
argument_list|)
operator|.
name|getContent
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|,
literal|"<LINE>Fillet of a fenny snake,</LINE>"
argument_list|)
expr_stmt|;
comment|//assertXMLEqual(result.getResource(0).getContent().toString(), "<LINE>Fillet of a<exist:match xmlns:exist='http://exist.sourceforge.net/NS/exist'>fenny</exist:match><exist:match xmlns:exist='http://exist.sourceforge.net/NS/exist'>snake</exist:match>,</LINE>");
name|result
operator|=
name|service
operator|.
name|query
argument_list|(
literal|"//SPEECH[text:match-all(LINE, 'god.*')]"
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|79
argument_list|,
name|result
operator|.
name|getSize
argument_list|()
argument_list|)
expr_stmt|;
name|result
operator|=
name|service
operator|.
name|query
argument_list|(
literal|"//SPEECH[LINE&= 'god in heaven']"
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|result
operator|.
name|getSize
argument_list|()
argument_list|)
expr_stmt|;
name|result
operator|=
name|service
operator|.
name|query
argument_list|(
literal|"//SPEECH[SPEAKER&= 'Nurse']"
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|90
argument_list|,
name|result
operator|.
name|getSize
argument_list|()
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|e
operator|.
name|printStackTrace
argument_list|()
expr_stmt|;
name|fail
argument_list|(
name|e
operator|.
name|getMessage
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
specifier|public
name|void
name|testFtScan
parameter_list|()
block|{
try|try
block|{
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"----- testFtScan -----"
argument_list|)
expr_stmt|;
name|String
name|queryBody
init|=
literal|"declare namespace f=\'http://exist-db.org/xquery/test\';\n"
operator|+
literal|"import module namespace t=\'http://exist-db.org/xquery/text\';\n"
operator|+
literal|"\n"
operator|+
literal|"declare function f:term-callback($term as xs:string, $data as xs:int+)\n"
operator|+
literal|"as element()+ {\n"
operator|+
literal|"<item>\n"
operator|+
literal|"<term>{$term}</term>\n"
operator|+
literal|"<frequency>{$data[1]}</frequency>\n"
operator|+
literal|"</item>\n"
operator|+
literal|"};\n"
operator|+
literal|"\n"
decl_stmt|;
name|XQueryService
name|service
init|=
operator|(
name|XQueryService
operator|)
name|testCollection
operator|.
name|getService
argument_list|(
literal|"XQueryService"
argument_list|,
literal|"1.0"
argument_list|)
decl_stmt|;
name|String
name|query
init|=
name|queryBody
operator|+
literal|"t:index-terms(collection('"
operator|+
name|TEST_COLLECTION_PATH
operator|+
literal|"'), \'is\', util:function(xs:QName(\'f:term-callback\'), 2), 1000)"
decl_stmt|;
name|ResourceSet
name|result
init|=
name|service
operator|.
name|query
argument_list|(
name|query
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|6
argument_list|,
name|result
operator|.
name|getSize
argument_list|()
argument_list|)
expr_stmt|;
name|query
operator|=
name|queryBody
operator|+
literal|"t:index-terms(collection('"
operator|+
name|TEST_COLLECTION_PATH
operator|+
literal|"')//LINE, \'is\', util:function(xs:QName(\'f:term-callback\'), 2), 1000)"
expr_stmt|;
name|result
operator|=
name|service
operator|.
name|query
argument_list|(
name|query
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|6
argument_list|,
name|result
operator|.
name|getSize
argument_list|()
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|XMLDBException
name|e
parameter_list|)
block|{
name|e
operator|.
name|printStackTrace
argument_list|()
expr_stmt|;
name|fail
argument_list|(
name|e
operator|.
name|getMessage
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
specifier|public
name|void
name|testFtUpdate
parameter_list|()
block|{
try|try
block|{
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"----- testFtUpdate -----"
argument_list|)
expr_stmt|;
name|XQueryService
name|service
init|=
operator|(
name|XQueryService
operator|)
name|testCollection
operator|.
name|getService
argument_list|(
literal|"XQueryService"
argument_list|,
literal|"1.0"
argument_list|)
decl_stmt|;
name|service
operator|.
name|query
argument_list|(
literal|"update insert<SPEAKER>First Witch</SPEAKER> preceding //SPEECH[LINE&= 'fenny snake']/SPEAKER"
argument_list|)
expr_stmt|;
name|ResourceSet
name|result
init|=
name|service
operator|.
name|query
argument_list|(
literal|"//SPEECH[LINE&= 'fenny snake']/SPEAKER"
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|result
operator|.
name|getSize
argument_list|()
argument_list|)
expr_stmt|;
name|result
operator|=
name|service
operator|.
name|query
argument_list|(
literal|"//SPEECH[LINE&= 'fenny snake' and SPEAKER&= 'first']"
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|result
operator|.
name|getSize
argument_list|()
argument_list|)
expr_stmt|;
name|service
operator|.
name|query
argument_list|(
literal|"update delete //SPEECH[LINE&= 'fenny snake']/SPEAKER[2]"
argument_list|)
expr_stmt|;
name|result
operator|=
name|service
operator|.
name|query
argument_list|(
literal|"//SPEECH[LINE&= 'fenny snake' and SPEAKER&= 'first']"
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|result
operator|.
name|getSize
argument_list|()
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|XMLDBException
name|e
parameter_list|)
block|{
name|e
operator|.
name|printStackTrace
argument_list|()
expr_stmt|;
name|fail
argument_list|(
name|e
operator|.
name|getMessage
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
specifier|public
name|void
name|testFtConfiguration
parameter_list|()
block|{
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"----- testFtConfiguration -----"
argument_list|)
expr_stmt|;
try|try
block|{
comment|// check attributes="false"
name|String
name|config
init|=
literal|"<collection xmlns=\"http://exist-db.org/collection-config/1.0\">"
operator|+
literal|"<index>"
operator|+
literal|"<fulltext default=\"all\" attributes=\"false\" alphanum=\"true\">"
operator|+
literal|"<include path=\"//test-elem/@attribute1\"/>"
operator|+
literal|"</fulltext>"
operator|+
literal|"</index>"
operator|+
literal|"</collection>"
decl_stmt|;
name|IndexQueryService
name|idxConf
init|=
operator|(
name|IndexQueryService
operator|)
name|testCollection
operator|.
name|getService
argument_list|(
literal|"IndexQueryService"
argument_list|,
literal|"1.0"
argument_list|)
decl_stmt|;
name|idxConf
operator|.
name|configureCollection
argument_list|(
name|config
argument_list|)
expr_stmt|;
name|XMLResource
name|doc
init|=
operator|(
name|XMLResource
operator|)
name|testCollection
operator|.
name|createResource
argument_list|(
literal|"test-attributes.xml"
argument_list|,
literal|"XMLResource"
argument_list|)
decl_stmt|;
name|doc
operator|.
name|setContent
argument_list|(
name|TEST_XML
argument_list|)
expr_stmt|;
name|testCollection
operator|.
name|storeResource
argument_list|(
name|doc
argument_list|)
expr_stmt|;
name|XQueryService
name|service
init|=
operator|(
name|XQueryService
operator|)
name|testCollection
operator|.
name|getService
argument_list|(
literal|"XQueryService"
argument_list|,
literal|"1.0"
argument_list|)
decl_stmt|;
name|String
name|query
init|=
literal|"//test-elem[@*&= 'some text']"
decl_stmt|;
name|ResourceSet
name|result
init|=
name|service
operator|.
name|query
argument_list|(
name|query
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|result
operator|.
name|getSize
argument_list|()
argument_list|)
expr_stmt|;
comment|// check attributes="true"
name|config
operator|=
literal|"<collection xmlns=\"http://exist-db.org/collection-config/1.0\">"
operator|+
literal|"<index>"
operator|+
literal|"<fulltext default=\"all\" attributes=\"true\" alphanum=\"true\">"
operator|+
literal|"<exclude path=\"//test-elem/@attribute2\"/>"
operator|+
literal|"</fulltext>"
operator|+
literal|"</index>"
operator|+
literal|"</collection>"
expr_stmt|;
name|idxConf
operator|.
name|configureCollection
argument_list|(
name|config
argument_list|)
expr_stmt|;
name|idxConf
operator|.
name|reindexCollection
argument_list|()
expr_stmt|;
name|result
operator|=
name|service
operator|.
name|query
argument_list|(
name|query
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|3
argument_list|,
name|result
operator|.
name|getSize
argument_list|()
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|e
operator|.
name|printStackTrace
argument_list|()
expr_stmt|;
name|fail
argument_list|(
name|e
operator|.
name|getMessage
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
specifier|public
name|void
name|testMixedConfiguration
parameter_list|()
block|{
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"----- testMixedConfiguration -----"
argument_list|)
expr_stmt|;
try|try
block|{
name|String
name|config
init|=
literal|"<collection xmlns=\"http://exist-db.org/collection-config/1.0\">\n"
operator|+
literal|"<index>\n"
operator|+
literal|"<fulltext default=\"all\" attributes=\"no\">\n"
operator|+
literal|"<include path=\"//nested\" content=\"mixed\"/>\n"
operator|+
literal|"</fulltext>\n"
operator|+
literal|"</index>\n"
operator|+
literal|"</collection>"
decl_stmt|;
name|IndexQueryService
name|idxConf
init|=
operator|(
name|IndexQueryService
operator|)
name|testCollection
operator|.
name|getService
argument_list|(
literal|"IndexQueryService"
argument_list|,
literal|"1.0"
argument_list|)
decl_stmt|;
name|idxConf
operator|.
name|configureCollection
argument_list|(
name|config
argument_list|)
expr_stmt|;
name|XMLResource
name|doc
init|=
operator|(
name|XMLResource
operator|)
name|testCollection
operator|.
name|createResource
argument_list|(
literal|"test-mixed.xml"
argument_list|,
literal|"XMLResource"
argument_list|)
decl_stmt|;
name|doc
operator|.
name|setContent
argument_list|(
name|NESTED_XML
argument_list|)
expr_stmt|;
name|testCollection
operator|.
name|storeResource
argument_list|(
name|doc
argument_list|)
expr_stmt|;
name|XQueryService
name|service
init|=
operator|(
name|XQueryService
operator|)
name|testCollection
operator|.
name|getService
argument_list|(
literal|"XQueryService"
argument_list|,
literal|"1.0"
argument_list|)
decl_stmt|;
name|String
name|query
init|=
literal|"//nested[.&= 'inappropriate']"
decl_stmt|;
name|ResourceSet
name|result
init|=
name|service
operator|.
name|query
argument_list|(
name|query
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|result
operator|.
name|getSize
argument_list|()
argument_list|)
expr_stmt|;
name|query
operator|=
literal|"//nested[.&= 'pro']"
expr_stmt|;
name|result
operator|=
name|service
operator|.
name|query
argument_list|(
name|query
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|result
operator|.
name|getSize
argument_list|()
argument_list|)
expr_stmt|;
name|query
operator|=
literal|"//nested[.&= 'unsuitable']"
expr_stmt|;
name|result
operator|=
name|service
operator|.
name|query
argument_list|(
name|query
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|result
operator|.
name|getSize
argument_list|()
argument_list|)
expr_stmt|;
name|query
operator|=
literal|"//nested[.&= 'uneven']"
expr_stmt|;
name|result
operator|=
name|service
operator|.
name|query
argument_list|(
name|query
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|result
operator|.
name|getSize
argument_list|()
argument_list|)
expr_stmt|;
name|query
operator|=
literal|"//nested[.&= 'suitable']"
expr_stmt|;
name|result
operator|=
name|service
operator|.
name|query
argument_list|(
name|query
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|result
operator|.
name|getSize
argument_list|()
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|e
operator|.
name|printStackTrace
argument_list|()
expr_stmt|;
name|fail
argument_list|(
name|e
operator|.
name|getMessage
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
specifier|public
name|void
name|testQNameConfiguration
parameter_list|()
block|{
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"----- testFtConfiguration -----"
argument_list|)
expr_stmt|;
try|try
block|{
name|String
name|config
init|=
literal|"<collection xmlns=\"http://exist-db.org/collection-config/1.0\">"
operator|+
literal|"<index>"
operator|+
literal|"<fulltext default=\"none\" attributes=\"false\">"
operator|+
literal|"<include path=\"//node\"/>"
operator|+
literal|"<create qname=\"node\"/>"
operator|+
literal|"<create qname=\"@id\"/>"
operator|+
literal|"</fulltext>"
operator|+
literal|"</index>"
operator|+
literal|"</collection>"
decl_stmt|;
name|IndexQueryService
name|idxConf
init|=
operator|(
name|IndexQueryService
operator|)
name|testCollection
operator|.
name|getService
argument_list|(
literal|"IndexQueryService"
argument_list|,
literal|"1.0"
argument_list|)
decl_stmt|;
name|idxConf
operator|.
name|configureCollection
argument_list|(
name|config
argument_list|)
expr_stmt|;
name|XMLResource
name|doc
init|=
operator|(
name|XMLResource
operator|)
name|testCollection
operator|.
name|createResource
argument_list|(
literal|"test-qname.xml"
argument_list|,
literal|"XMLResource"
argument_list|)
decl_stmt|;
name|doc
operator|.
name|setContent
argument_list|(
name|QNAME_XML
argument_list|)
expr_stmt|;
name|testCollection
operator|.
name|storeResource
argument_list|(
name|doc
argument_list|)
expr_stmt|;
name|XQueryService
name|service
init|=
operator|(
name|XQueryService
operator|)
name|testCollection
operator|.
name|getService
argument_list|(
literal|"XQueryService"
argument_list|,
literal|"1.0"
argument_list|)
decl_stmt|;
name|doQuery
argument_list|(
name|service
argument_list|,
literal|"//node[@id&= '1']"
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|doQuery
argument_list|(
name|service
argument_list|,
literal|"//test[node&= 'Second node']"
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|doQuery
argument_list|(
name|service
argument_list|,
literal|"//node[.&= 'node']"
argument_list|,
literal|2
argument_list|)
expr_stmt|;
name|doQuery
argument_list|(
name|service
argument_list|,
literal|"update insert<node id='3'>Third node</node> following //test/node[last()]"
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|doQuery
argument_list|(
name|service
argument_list|,
literal|"//node[@id&= '3']"
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|doQuery
argument_list|(
name|service
argument_list|,
literal|"//test[node&= 'Third node']"
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|doQuery
argument_list|(
name|service
argument_list|,
literal|"//node[.&= 'Third node']"
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|doQuery
argument_list|(
name|service
argument_list|,
literal|"//node[.&= 'node']"
argument_list|,
literal|3
argument_list|)
expr_stmt|;
name|doQuery
argument_list|(
name|service
argument_list|,
literal|"update insert<node id='4'>Fourth<nested>node</nested></node> following //test/node[last()]"
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|doQuery
argument_list|(
name|service
argument_list|,
literal|"//node[@id&= '4']"
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|doQuery
argument_list|(
name|service
argument_list|,
literal|"//test[node&= 'Fourth node']"
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|doQuery
argument_list|(
name|service
argument_list|,
literal|"//node[.&= 'Fourth node']"
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|doQuery
argument_list|(
name|service
argument_list|,
literal|"//node[.&= 'node']"
argument_list|,
literal|4
argument_list|)
expr_stmt|;
name|doQuery
argument_list|(
name|service
argument_list|,
literal|"update delete //node[@id = '1']"
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|doQuery
argument_list|(
name|service
argument_list|,
literal|"//node[@id&= '1']"
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|doQuery
argument_list|(
name|service
argument_list|,
literal|"//test[node&= 'First node']"
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|doQuery
argument_list|(
name|service
argument_list|,
literal|"//node[.&= 'First node']"
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|doQuery
argument_list|(
name|service
argument_list|,
literal|"//node[@id&= '2']"
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|doQuery
argument_list|(
name|service
argument_list|,
literal|"//test[node&= 'Second node']"
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|doQuery
argument_list|(
name|service
argument_list|,
literal|"//node[.&= 'Second node']"
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|doQuery
argument_list|(
name|service
argument_list|,
literal|"for $i in 1 to 100 return"
operator|+
literal|"   update insert<node id='i{$i}'>Inserted node</node> preceding //test/node[1]"
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|doQuery
argument_list|(
name|service
argument_list|,
literal|"//node[@id&= 'i1']"
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|doQuery
argument_list|(
name|service
argument_list|,
literal|"//node[.&= 'Inserted']"
argument_list|,
literal|100
argument_list|)
expr_stmt|;
name|doQuery
argument_list|(
name|service
argument_list|,
literal|"//test[node&= 'Inserted']"
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|doQuery
argument_list|(
name|service
argument_list|,
literal|"//test[*&= 'Inserted node']"
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|doQuery
argument_list|(
name|service
argument_list|,
literal|"//test[.&= 'Inserted node']"
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|doQuery
argument_list|(
name|service
argument_list|,
literal|"//test[node()&= 'Second node']"
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|doQuery
argument_list|(
name|service
argument_list|,
literal|"//node[text()&= 'Second node']"
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|doQuery
argument_list|(
name|service
argument_list|,
literal|"//node[text()&= 'Inserted node']"
argument_list|,
literal|100
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|e
operator|.
name|printStackTrace
argument_list|()
expr_stmt|;
name|fail
argument_list|(
name|e
operator|.
name|getMessage
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
specifier|public
name|void
name|testFtQNameScan
parameter_list|()
block|{
try|try
block|{
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"----- testFtQNameScan -----"
argument_list|)
expr_stmt|;
name|String
name|config
init|=
literal|"<collection xmlns=\"http://exist-db.org/collection-config/1.0\">"
operator|+
literal|"<index>"
operator|+
literal|"<fulltext default=\"none\" attributes=\"false\">"
operator|+
literal|"<create qname=\"node\"/>"
operator|+
literal|"<create qname=\"@id\"/>"
operator|+
literal|"</fulltext>"
operator|+
literal|"</index>"
operator|+
literal|"</collection>"
decl_stmt|;
name|IndexQueryService
name|idxConf
init|=
operator|(
name|IndexQueryService
operator|)
name|testCollection
operator|.
name|getService
argument_list|(
literal|"IndexQueryService"
argument_list|,
literal|"1.0"
argument_list|)
decl_stmt|;
name|idxConf
operator|.
name|configureCollection
argument_list|(
name|config
argument_list|)
expr_stmt|;
name|XMLResource
name|doc
init|=
operator|(
name|XMLResource
operator|)
name|testCollection
operator|.
name|createResource
argument_list|(
literal|"test-qname.xml"
argument_list|,
literal|"XMLResource"
argument_list|)
decl_stmt|;
name|doc
operator|.
name|setContent
argument_list|(
name|QNAME_XML
argument_list|)
expr_stmt|;
name|testCollection
operator|.
name|storeResource
argument_list|(
name|doc
argument_list|)
expr_stmt|;
name|XQueryService
name|service
init|=
operator|(
name|XQueryService
operator|)
name|testCollection
operator|.
name|getService
argument_list|(
literal|"XQueryService"
argument_list|,
literal|"1.0"
argument_list|)
decl_stmt|;
name|doQuery
argument_list|(
name|service
argument_list|,
literal|"//node"
argument_list|,
literal|2
argument_list|)
expr_stmt|;
name|String
name|queryBody
init|=
literal|"declare namespace f=\'http://exist-db.org/xquery/test\';\n"
operator|+
literal|"import module namespace t=\'http://exist-db.org/xquery/text\';\n"
operator|+
literal|"\n"
operator|+
literal|"declare function f:term-callback($term as xs:string, $data as xs:int+)\n"
operator|+
literal|"as element()+ {\n"
operator|+
literal|"<item>\n"
operator|+
literal|"<term>{$term}</term>\n"
operator|+
literal|"<frequency>{$data[1]}</frequency>\n"
operator|+
literal|"</item>\n"
operator|+
literal|"};\n"
operator|+
literal|"\n"
decl_stmt|;
name|String
name|query
init|=
name|queryBody
operator|+
literal|"t:index-terms(collection('"
operator|+
name|TEST_COLLECTION_PATH
operator|+
literal|"')//node, (), util:function(xs:QName(\'f:term-callback\'), 2), 1000)"
decl_stmt|;
name|ResourceSet
name|result
init|=
name|service
operator|.
name|query
argument_list|(
name|query
argument_list|)
decl_stmt|;
for|for
control|(
name|ResourceIterator
name|i
init|=
name|result
operator|.
name|getIterator
argument_list|()
init|;
name|i
operator|.
name|hasMoreResources
argument_list|()
condition|;
control|)
block|{
name|Resource
name|resource
init|=
name|i
operator|.
name|nextResource
argument_list|()
decl_stmt|;
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
name|resource
operator|.
name|getContent
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|assertEquals
argument_list|(
literal|8
argument_list|,
name|result
operator|.
name|getSize
argument_list|()
argument_list|)
expr_stmt|;
name|query
operator|=
name|queryBody
operator|+
literal|"t:index-terms(collection('"
operator|+
name|TEST_COLLECTION_PATH
operator|+
literal|"')//node, "
operator|+
literal|"xs:QName('node'), (), util:function(xs:QName(\'f:term-callback\'), 2), 1000)"
expr_stmt|;
name|result
operator|=
name|service
operator|.
name|query
argument_list|(
name|query
argument_list|)
expr_stmt|;
for|for
control|(
name|ResourceIterator
name|i
init|=
name|result
operator|.
name|getIterator
argument_list|()
init|;
name|i
operator|.
name|hasMoreResources
argument_list|()
condition|;
control|)
block|{
name|Resource
name|resource
init|=
name|i
operator|.
name|nextResource
argument_list|()
decl_stmt|;
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
name|resource
operator|.
name|getContent
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|assertEquals
argument_list|(
literal|3
argument_list|,
name|result
operator|.
name|getSize
argument_list|()
argument_list|)
expr_stmt|;
name|query
operator|=
literal|"import module namespace t=\'http://exist-db.org/xquery/text\';\n"
operator|+
literal|"t:fuzzy-index-terms('node')"
expr_stmt|;
name|result
operator|=
name|service
operator|.
name|query
argument_list|(
name|query
argument_list|)
expr_stmt|;
for|for
control|(
name|ResourceIterator
name|i
init|=
name|result
operator|.
name|getIterator
argument_list|()
init|;
name|i
operator|.
name|hasMoreResources
argument_list|()
condition|;
control|)
block|{
name|Resource
name|resource
init|=
name|i
operator|.
name|nextResource
argument_list|()
decl_stmt|;
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
name|resource
operator|.
name|getContent
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|result
operator|.
name|getSize
argument_list|()
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|XMLDBException
name|e
parameter_list|)
block|{
name|e
operator|.
name|printStackTrace
argument_list|()
expr_stmt|;
name|fail
argument_list|(
name|e
operator|.
name|getMessage
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
specifier|public
name|void
name|testReindex
parameter_list|()
block|{
try|try
block|{
name|String
name|config
init|=
literal|"<collection xmlns=\"http://exist-db.org/collection-config/1.0\">"
operator|+
literal|"<index>"
operator|+
literal|"<fulltext default=\"none\" attributes=\"false\">"
operator|+
literal|"<include path=\"//node\"/>"
operator|+
literal|"<create qname=\"node\"/>"
operator|+
literal|"<create qname=\"@id\"/>"
operator|+
literal|"</fulltext>"
operator|+
literal|"</index>"
operator|+
literal|"</collection>"
decl_stmt|;
name|IndexQueryService
name|idxConf
init|=
operator|(
name|IndexQueryService
operator|)
name|testCollection
operator|.
name|getService
argument_list|(
literal|"IndexQueryService"
argument_list|,
literal|"1.0"
argument_list|)
decl_stmt|;
name|idxConf
operator|.
name|configureCollection
argument_list|(
name|config
argument_list|)
expr_stmt|;
name|XMLResource
name|doc
init|=
operator|(
name|XMLResource
operator|)
name|testCollection
operator|.
name|createResource
argument_list|(
literal|"test-qname.xml"
argument_list|,
literal|"XMLResource"
argument_list|)
decl_stmt|;
name|doc
operator|.
name|setContent
argument_list|(
name|QNAME_XML
argument_list|)
expr_stmt|;
name|testCollection
operator|.
name|storeResource
argument_list|(
name|doc
argument_list|)
expr_stmt|;
name|XQueryService
name|service
init|=
operator|(
name|XQueryService
operator|)
name|testCollection
operator|.
name|getService
argument_list|(
literal|"XQueryService"
argument_list|,
literal|"1.0"
argument_list|)
decl_stmt|;
name|doQuery
argument_list|(
name|service
argument_list|,
literal|"update insert<node id='3'>Third node</node> following //test/node[last()]"
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|doQuery
argument_list|(
name|service
argument_list|,
literal|"//node[@id&= '3']"
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|doQuery
argument_list|(
name|service
argument_list|,
literal|"//test[node&= 'Third node']"
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|doQuery
argument_list|(
name|service
argument_list|,
literal|"//node[.&= 'Third node']"
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|doQuery
argument_list|(
name|service
argument_list|,
literal|"//node[.&= 'node']"
argument_list|,
literal|3
argument_list|)
expr_stmt|;
name|IndexQueryService
name|mgmt
init|=
operator|(
name|IndexQueryService
operator|)
name|testCollection
operator|.
name|getService
argument_list|(
literal|"IndexQueryService"
argument_list|,
literal|"1.0"
argument_list|)
decl_stmt|;
name|mgmt
operator|.
name|reindexCollection
argument_list|()
expr_stmt|;
name|doQuery
argument_list|(
name|service
argument_list|,
literal|"//node[@id&= '1']"
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|doQuery
argument_list|(
name|service
argument_list|,
literal|"//test[node&= 'Second node']"
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|doQuery
argument_list|(
name|service
argument_list|,
literal|"//node[.&= 'Second node']"
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|doQuery
argument_list|(
name|service
argument_list|,
literal|"//node[.&= 'node']"
argument_list|,
literal|3
argument_list|)
expr_stmt|;
name|doQuery
argument_list|(
name|service
argument_list|,
literal|"//node[@id&= '3']"
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|doQuery
argument_list|(
name|service
argument_list|,
literal|"//test[node&= 'Third node']"
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|doQuery
argument_list|(
name|service
argument_list|,
literal|"//node[.&= 'Third node']"
argument_list|,
literal|1
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|e
operator|.
name|printStackTrace
argument_list|()
expr_stmt|;
name|fail
argument_list|(
name|e
operator|.
name|getMessage
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
specifier|public
name|void
name|testMatchCount
parameter_list|()
block|{
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"----- testMatchCount -----"
argument_list|)
expr_stmt|;
try|try
block|{
name|String
name|config
init|=
literal|"<collection xmlns=\"http://exist-db.org/collection-config/1.0\">"
operator|+
literal|"<index>"
operator|+
literal|"<fulltext default=\"none\" attributes=\"false\">"
operator|+
literal|"<include path=\"/doc\"/>"
operator|+
literal|"</fulltext>"
operator|+
literal|"</index>"
operator|+
literal|"</collection>"
decl_stmt|;
name|IndexQueryService
name|idxConf
init|=
operator|(
name|IndexQueryService
operator|)
name|testCollection
operator|.
name|getService
argument_list|(
literal|"IndexQueryService"
argument_list|,
literal|"1.0"
argument_list|)
decl_stmt|;
name|idxConf
operator|.
name|configureCollection
argument_list|(
name|config
argument_list|)
expr_stmt|;
name|XMLResource
name|doc
init|=
operator|(
name|XMLResource
operator|)
name|testCollection
operator|.
name|createResource
argument_list|(
literal|"test-match-count.xml"
argument_list|,
literal|"XMLResource"
argument_list|)
decl_stmt|;
name|doc
operator|.
name|setContent
argument_list|(
name|MATCH_COUNT
argument_list|)
expr_stmt|;
name|testCollection
operator|.
name|storeResource
argument_list|(
name|doc
argument_list|)
expr_stmt|;
name|XQueryService
name|service
init|=
operator|(
name|XQueryService
operator|)
name|testCollection
operator|.
name|getService
argument_list|(
literal|"XQueryService"
argument_list|,
literal|"1.0"
argument_list|)
decl_stmt|;
name|String
name|query
init|=
literal|"for $d in /doc[.&= 'term'] "
operator|+
literal|"return (text:match-count($d), "
operator|+
literal|"for $l in $d/level1 return text:match-count($l))"
decl_stmt|;
name|ResourceSet
name|result
init|=
name|service
operator|.
name|query
argument_list|(
name|query
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|3
argument_list|,
name|result
operator|.
name|getSize
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"6"
argument_list|,
name|result
operator|.
name|getResource
argument_list|(
literal|0
argument_list|)
operator|.
name|getContent
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"2"
argument_list|,
name|result
operator|.
name|getResource
argument_list|(
literal|1
argument_list|)
operator|.
name|getContent
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"2"
argument_list|,
name|result
operator|.
name|getResource
argument_list|(
literal|2
argument_list|)
operator|.
name|getContent
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|e
operator|.
name|printStackTrace
argument_list|()
expr_stmt|;
name|fail
argument_list|(
name|e
operator|.
name|getMessage
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
comment|//It looks like matches are not copied along all axes
specifier|public
name|void
name|bugtestMatchCount
parameter_list|()
block|{
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"----- testMatchCount -----"
argument_list|)
expr_stmt|;
try|try
block|{
name|String
name|config
init|=
literal|"<collection xmlns=\"http://exist-db.org/collection-config/1.0\">"
operator|+
literal|"<index>"
operator|+
literal|"<fulltext default=\"none\" attributes=\"false\">"
operator|+
literal|"<include path=\"/doc\"/>"
operator|+
literal|"</fulltext>"
operator|+
literal|"</index>"
operator|+
literal|"</collection>"
decl_stmt|;
name|IndexQueryService
name|idxConf
init|=
operator|(
name|IndexQueryService
operator|)
name|testCollection
operator|.
name|getService
argument_list|(
literal|"IndexQueryService"
argument_list|,
literal|"1.0"
argument_list|)
decl_stmt|;
name|idxConf
operator|.
name|configureCollection
argument_list|(
name|config
argument_list|)
expr_stmt|;
name|XMLResource
name|doc
init|=
operator|(
name|XMLResource
operator|)
name|testCollection
operator|.
name|createResource
argument_list|(
literal|"test-match-count.xml"
argument_list|,
literal|"XMLResource"
argument_list|)
decl_stmt|;
name|doc
operator|.
name|setContent
argument_list|(
name|MATCH_COUNT
argument_list|)
expr_stmt|;
name|testCollection
operator|.
name|storeResource
argument_list|(
name|doc
argument_list|)
expr_stmt|;
name|XQueryService
name|service
init|=
operator|(
name|XQueryService
operator|)
name|testCollection
operator|.
name|getService
argument_list|(
literal|"XQueryService"
argument_list|,
literal|"1.0"
argument_list|)
decl_stmt|;
name|String
name|query
init|=
literal|"for $d in /doc[.&= 'term'] "
operator|+
literal|"return text:match-count($d/level1[1]/..)"
decl_stmt|;
name|ResourceSet
name|result
init|=
name|service
operator|.
name|query
argument_list|(
name|query
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|result
operator|.
name|getSize
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"2"
argument_list|,
name|result
operator|.
name|getResource
argument_list|(
literal|0
argument_list|)
operator|.
name|getContent
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|query
operator|=
literal|"for $node in /doc//*[.&= 'term'] "
operator|+
literal|"return concat(local-name($node), '(', text:match-count($node), ')')"
expr_stmt|;
name|result
operator|=
name|service
operator|.
name|query
argument_list|(
name|query
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|4
argument_list|,
name|result
operator|.
name|getSize
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"doc(6)"
argument_list|,
name|result
operator|.
name|getResource
argument_list|(
literal|0
argument_list|)
operator|.
name|getContent
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"level1(2)"
argument_list|,
name|result
operator|.
name|getResource
argument_list|(
literal|1
argument_list|)
operator|.
name|getContent
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"level1(2)"
argument_list|,
name|result
operator|.
name|getResource
argument_list|(
literal|2
argument_list|)
operator|.
name|getContent
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"level2(1)"
argument_list|,
name|result
operator|.
name|getResource
argument_list|(
literal|3
argument_list|)
operator|.
name|getContent
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|e
operator|.
name|printStackTrace
argument_list|()
expr_stmt|;
name|fail
argument_list|(
name|e
operator|.
name|getMessage
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
specifier|private
name|void
name|doQuery
parameter_list|(
name|XQueryService
name|service
parameter_list|,
name|String
name|query
parameter_list|,
name|int
name|expected
parameter_list|)
throws|throws
name|XMLDBException
block|{
name|ResourceSet
name|result
init|=
name|service
operator|.
name|query
argument_list|(
name|query
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|expected
argument_list|,
name|result
operator|.
name|getSize
argument_list|()
argument_list|)
expr_stmt|;
block|}
specifier|protected
name|void
name|setUp
parameter_list|()
block|{
try|try
block|{
comment|//Since we use the deprecated fn:match-all() function, we have to be sure is is enabled
name|Configuration
name|config
init|=
operator|new
name|Configuration
argument_list|()
decl_stmt|;
name|config
operator|.
name|setProperty
argument_list|(
name|FunctionFactory
operator|.
name|PROPERTY_DISABLE_DEPRECATED_FUNCTIONS
argument_list|,
operator|new
name|Boolean
argument_list|(
literal|false
argument_list|)
argument_list|)
expr_stmt|;
name|BrokerPool
operator|.
name|configure
argument_list|(
literal|1
argument_list|,
literal|5
argument_list|,
name|config
argument_list|)
expr_stmt|;
comment|// initialize driver
name|Class
argument_list|<
name|?
argument_list|>
name|cl
init|=
name|Class
operator|.
name|forName
argument_list|(
literal|"org.exist.xmldb.DatabaseImpl"
argument_list|)
decl_stmt|;
name|database
operator|=
operator|(
name|Database
operator|)
name|cl
operator|.
name|newInstance
argument_list|()
expr_stmt|;
name|database
operator|.
name|setProperty
argument_list|(
literal|"create-database"
argument_list|,
literal|"true"
argument_list|)
expr_stmt|;
name|DatabaseManager
operator|.
name|registerDatabase
argument_list|(
name|database
argument_list|)
expr_stmt|;
name|Collection
name|root
init|=
name|DatabaseManager
operator|.
name|getCollection
argument_list|(
name|XmldbURI
operator|.
name|LOCAL_DB
argument_list|,
literal|"admin"
argument_list|,
literal|""
argument_list|)
decl_stmt|;
name|CollectionManagementService
name|service
init|=
operator|(
name|CollectionManagementService
operator|)
name|root
operator|.
name|getService
argument_list|(
literal|"CollectionManagementService"
argument_list|,
literal|"1.0"
argument_list|)
decl_stmt|;
name|testCollection
operator|=
name|service
operator|.
name|createCollection
argument_list|(
name|TEST_COLLECTION_NAME
argument_list|)
expr_stmt|;
name|assertNotNull
argument_list|(
name|testCollection
argument_list|)
expr_stmt|;
name|IndexQueryService
name|idxConf
init|=
operator|(
name|IndexQueryService
operator|)
name|testCollection
operator|.
name|getService
argument_list|(
literal|"IndexQueryService"
argument_list|,
literal|"1.0"
argument_list|)
decl_stmt|;
name|idxConf
operator|.
name|configureCollection
argument_list|(
name|COLLECTION_CONFIG1
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|FILES
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
name|XMLResource
name|doc
init|=
operator|(
name|XMLResource
operator|)
name|testCollection
operator|.
name|createResource
argument_list|(
name|FILES
index|[
name|i
index|]
argument_list|,
literal|"XMLResource"
argument_list|)
decl_stmt|;
name|doc
operator|.
name|setContent
argument_list|(
operator|new
name|File
argument_list|(
name|SHAKES_DIR
argument_list|,
name|FILES
index|[
name|i
index|]
argument_list|)
argument_list|)
expr_stmt|;
name|testCollection
operator|.
name|storeResource
argument_list|(
name|doc
argument_list|)
expr_stmt|;
name|assertNotNull
argument_list|(
name|testCollection
operator|.
name|getResource
argument_list|(
name|FILES
index|[
name|i
index|]
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
name|ClassNotFoundException
name|e
parameter_list|)
block|{
block|}
catch|catch
parameter_list|(
name|InstantiationException
name|e
parameter_list|)
block|{
block|}
catch|catch
parameter_list|(
name|IllegalAccessException
name|e
parameter_list|)
block|{
block|}
catch|catch
parameter_list|(
name|DatabaseConfigurationException
name|e
parameter_list|)
block|{
block|}
catch|catch
parameter_list|(
name|EXistException
name|e
parameter_list|)
block|{
block|}
catch|catch
parameter_list|(
name|XMLDBException
name|e
parameter_list|)
block|{
name|e
operator|.
name|printStackTrace
argument_list|()
expr_stmt|;
block|}
block|}
comment|/*      * @see TestCase#tearDown()      */
specifier|protected
name|void
name|tearDown
parameter_list|()
block|{
try|try
block|{
comment|//	        TestUtils.cleanupDB();
name|DatabaseManager
operator|.
name|deregisterDatabase
argument_list|(
name|database
argument_list|)
expr_stmt|;
name|DatabaseInstanceManager
name|dim
init|=
operator|(
name|DatabaseInstanceManager
operator|)
name|testCollection
operator|.
name|getService
argument_list|(
literal|"DatabaseInstanceManager"
argument_list|,
literal|"1.0"
argument_list|)
decl_stmt|;
name|dim
operator|.
name|shutdown
argument_list|()
expr_stmt|;
name|database
operator|=
literal|null
expr_stmt|;
name|testCollection
operator|=
literal|null
expr_stmt|;
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"tearDown PASSED"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|XMLDBException
name|e
parameter_list|)
block|{
name|e
operator|.
name|printStackTrace
argument_list|()
expr_stmt|;
block|}
block|}
specifier|public
specifier|static
name|void
name|main
parameter_list|(
name|String
index|[]
name|args
parameter_list|)
block|{
name|TestRunner
operator|.
name|run
argument_list|(
name|FtQueryTest
operator|.
name|class
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

