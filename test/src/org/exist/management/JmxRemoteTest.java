begin_unit|revision:1.0.0;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * eXist Open Source Native XML Database  * Copyright (C) 2001-2018 The eXist Project  * http://exist-db.org  *  * This program is free software; you can redistribute it and/or  * modify it under the terms of the GNU Lesser General Public License  * as published by the Free Software Foundation; either version 2  * of the License, or (at your option) any later version.  *  * This program is distributed in the hope that it will be useful,  * but WITHOUT ANY WARRANTY; without even the implied warranty of  * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the  * GNU Lesser General Public License for more details.  *  * You should have received a copy of the GNU Lesser General Public  * License along with this library; if not, write to the Free Software  * Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA  02110-1301  USA  */
end_comment

begin_package
package|package
name|org
operator|.
name|exist
operator|.
name|management
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|http
operator|.
name|HttpResponse
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|http
operator|.
name|HttpStatus
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|http
operator|.
name|client
operator|.
name|fluent
operator|.
name|Request
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|http
operator|.
name|entity
operator|.
name|ContentType
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|http
operator|.
name|message
operator|.
name|BasicHeader
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|test
operator|.
name|ExistWebServer
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|ClassRule
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|hamcrest
operator|.
name|MatcherAssert
operator|.
name|assertThat
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertEquals
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|xmlunit
operator|.
name|matchers
operator|.
name|HasXPathMatcher
operator|.
name|hasXPath
import|;
end_import

begin_class
specifier|public
class|class
name|JmxRemoteTest
block|{
annotation|@
name|ClassRule
specifier|public
specifier|static
specifier|final
name|ExistWebServer
name|existWebServer
init|=
operator|new
name|ExistWebServer
argument_list|(
literal|true
argument_list|,
literal|true
argument_list|,
literal|true
argument_list|,
literal|true
argument_list|,
literal|false
argument_list|)
decl_stmt|;
specifier|private
specifier|static
name|String
name|getServerUri
parameter_list|()
block|{
return|return
literal|"http://localhost:"
operator|+
name|existWebServer
operator|.
name|getPort
argument_list|()
operator|+
literal|"/exist/status"
return|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|checkContent
parameter_list|()
throws|throws
name|Exception
block|{
comment|// Get content
name|String
name|jmxXML
init|=
name|Request
operator|.
name|Get
argument_list|(
name|getServerUri
argument_list|()
argument_list|)
operator|.
name|execute
argument_list|()
operator|.
name|returnContent
argument_list|()
operator|.
name|asString
argument_list|()
decl_stmt|;
comment|// Prepare XPath validation
name|HashMap
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|prefix2Uri
init|=
operator|new
name|HashMap
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
argument_list|()
decl_stmt|;
name|prefix2Uri
operator|.
name|put
argument_list|(
literal|"jmx"
argument_list|,
literal|"http://exist-db.org/jmx"
argument_list|)
expr_stmt|;
comment|// Java GC
name|assertThat
argument_list|(
name|jmxXML
argument_list|,
name|hasXPath
argument_list|(
literal|"//jmx:GarbageCollectorImpl"
argument_list|)
operator|.
name|withNamespaceContext
argument_list|(
name|prefix2Uri
argument_list|)
argument_list|)
expr_stmt|;
comment|// Jetty
name|assertThat
argument_list|(
name|jmxXML
argument_list|,
name|hasXPath
argument_list|(
literal|"//jmx:WebAppContext"
argument_list|)
operator|.
name|withNamespaceContext
argument_list|(
name|prefix2Uri
argument_list|)
argument_list|)
expr_stmt|;
comment|// eXist-db
name|assertThat
argument_list|(
name|jmxXML
argument_list|,
name|hasXPath
argument_list|(
literal|"//jmx:ProcessReport"
argument_list|)
operator|.
name|withNamespaceContext
argument_list|(
name|prefix2Uri
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|jmxXML
argument_list|,
name|hasXPath
argument_list|(
literal|"//jmx:Cache"
argument_list|)
operator|.
name|withNamespaceContext
argument_list|(
name|prefix2Uri
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|jmxXML
argument_list|,
name|hasXPath
argument_list|(
literal|"//jmx:SystemInfo"
argument_list|)
operator|.
name|withNamespaceContext
argument_list|(
name|prefix2Uri
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|jmxXML
argument_list|,
name|hasXPath
argument_list|(
literal|"//jmx:CacheManager"
argument_list|)
operator|.
name|withNamespaceContext
argument_list|(
name|prefix2Uri
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|jmxXML
argument_list|,
name|hasXPath
argument_list|(
literal|"//jmx:LockManager"
argument_list|)
operator|.
name|withNamespaceContext
argument_list|(
name|prefix2Uri
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|jmxXML
argument_list|,
name|hasXPath
argument_list|(
literal|"//jmx:SanityReport"
argument_list|)
operator|.
name|withNamespaceContext
argument_list|(
name|prefix2Uri
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|jmxXML
argument_list|,
name|hasXPath
argument_list|(
literal|"//jmx:Database"
argument_list|)
operator|.
name|withNamespaceContext
argument_list|(
name|prefix2Uri
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|checkBasicRequest
parameter_list|()
throws|throws
name|Exception
block|{
name|HttpResponse
name|response
init|=
name|Request
operator|.
name|Get
argument_list|(
name|getServerUri
argument_list|()
argument_list|)
operator|.
name|addHeader
argument_list|(
operator|new
name|BasicHeader
argument_list|(
literal|"Accept"
argument_list|,
name|ContentType
operator|.
name|APPLICATION_XML
operator|.
name|toString
argument_list|()
argument_list|)
argument_list|)
operator|.
name|execute
argument_list|()
operator|.
name|returnResponse
argument_list|()
decl_stmt|;
name|assertEquals
argument_list|(
name|HttpStatus
operator|.
name|SC_OK
argument_list|,
name|response
operator|.
name|getStatusLine
argument_list|()
operator|.
name|getStatusCode
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"application/xml"
argument_list|,
name|response
operator|.
name|getEntity
argument_list|()
operator|.
name|getContentType
argument_list|()
operator|.
name|getValue
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

