begin_unit|revision:1.0.0;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  *  eXist Open Source Native XML Database  *  Copyright (C) 2001-04 The eXist Project  *  http://exist-db.org  *  *  This program is free software; you can redistribute it and/or  *  modify it under the terms of the GNU Lesser General Public License  *  as published by the Free Software Foundation; either version 2  *  of the License, or (at your option) any later version.  *  *  This program is distributed in the hope that it will be useful,  *  but WITHOUT ANY WARRANTY; without even the implied warranty of  *  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the  *  GNU Lesser General Public License for more details.  *  *  You should have received a copy of the GNU Lesser General Public License  *  along with this program; if not, write to the Free Software  *  Foundation, Inc., 675 Mass Ave, Cambridge, MA 02139, USA.  *  *  $Id$  */
end_comment

begin_package
package|package
name|org
operator|.
name|exist
operator|.
name|validation
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|File
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|FileInputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|URISyntaxException
import|;
end_import

begin_import
import|import
name|junit
operator|.
name|framework
operator|.
name|Test
import|;
end_import

begin_import
import|import
name|junit
operator|.
name|framework
operator|.
name|TestCase
import|;
end_import

begin_import
import|import
name|junit
operator|.
name|framework
operator|.
name|TestSuite
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|storage
operator|.
name|BrokerPool
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|util
operator|.
name|Configuration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|validation
operator|.
name|internal
operator|.
name|DatabaseResources
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|xmldb
operator|.
name|XmldbURI
import|;
end_import

begin_comment
comment|/**  *  "DatabaseResources.class" jUnit tests.  *  * @author dizzzz  */
end_comment

begin_class
specifier|public
class|class
name|DatabaseResourcesTest
extends|extends
name|TestCase
block|{
specifier|private
specifier|final
specifier|static
name|String
name|ABOOKFILES
init|=
literal|"samples/validation/addressbook"
decl_stmt|;
specifier|private
specifier|final
specifier|static
name|String
name|DTDFILES
init|=
literal|"samples/validation/dtd"
decl_stmt|;
specifier|private
specifier|final
specifier|static
name|String
name|DBGRAMMARS
init|=
literal|"/db/grammar"
decl_stmt|;
specifier|private
specifier|static
name|DatabaseTools
name|dt
init|=
literal|null
decl_stmt|;
specifier|private
specifier|static
name|String
name|eXistHome
init|=
literal|null
decl_stmt|;
specifier|private
specifier|static
name|BrokerPool
name|pool
init|=
literal|null
decl_stmt|;
specifier|private
specifier|static
name|Validator
name|validator
init|=
literal|null
decl_stmt|;
specifier|private
specifier|static
name|DatabaseResources
name|dbResources
init|=
literal|null
decl_stmt|;
specifier|private
specifier|static
name|XmldbURI
name|baseURI
init|=
literal|null
decl_stmt|;
specifier|public
name|DatabaseResourcesTest
parameter_list|(
name|String
name|testName
parameter_list|)
block|{
name|super
argument_list|(
name|testName
argument_list|)
expr_stmt|;
block|}
specifier|public
specifier|static
name|Test
name|suite
parameter_list|()
block|{
name|TestSuite
name|suite
init|=
operator|new
name|TestSuite
argument_list|(
name|DatabaseResourcesTest
operator|.
name|class
argument_list|)
decl_stmt|;
return|return
name|suite
return|;
block|}
specifier|protected
name|BrokerPool
name|startDB
parameter_list|()
block|{
try|try
block|{
name|Configuration
name|config
init|=
operator|new
name|Configuration
argument_list|()
decl_stmt|;
name|config
operator|.
name|setProperty
argument_list|(
literal|"indexer.validation"
argument_list|,
literal|"no"
argument_list|)
expr_stmt|;
name|BrokerPool
operator|.
name|configure
argument_list|(
literal|1
argument_list|,
literal|5
argument_list|,
name|config
argument_list|)
expr_stmt|;
return|return
name|BrokerPool
operator|.
name|getInstance
argument_list|()
return|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|e
operator|.
name|printStackTrace
argument_list|()
expr_stmt|;
name|fail
argument_list|(
name|e
operator|.
name|getMessage
argument_list|()
argument_list|)
expr_stmt|;
block|}
return|return
literal|null
return|;
block|}
comment|// ---------------------------------------------------
specifier|public
name|void
name|testStart
parameter_list|()
block|{
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|">>> testStart"
argument_list|)
expr_stmt|;
name|eXistHome
operator|=
name|Configuration
operator|.
name|getExistHome
argument_list|()
operator|.
name|getAbsolutePath
argument_list|()
expr_stmt|;
name|pool
operator|=
name|startDB
argument_list|()
expr_stmt|;
name|validator
operator|=
operator|new
name|Validator
argument_list|(
name|pool
argument_list|)
expr_stmt|;
name|dbResources
operator|=
name|validator
operator|.
name|getDatabaseResources
argument_list|()
expr_stmt|;
name|dt
operator|=
operator|new
name|DatabaseTools
argument_list|(
name|pool
argument_list|)
expr_stmt|;
try|try
block|{
name|baseURI
operator|=
name|XmldbURI
operator|.
name|xmldbUriFor
argument_list|(
literal|"xmldb:exist:///db"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|URISyntaxException
name|ex
parameter_list|)
block|{
name|ex
operator|.
name|printStackTrace
argument_list|()
expr_stmt|;
name|fail
argument_list|(
name|ex
operator|.
name|getMessage
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"<<<\n"
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|testInsertXsdGrammar
parameter_list|()
block|{
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|">>> testInsertXsdGrammar"
argument_list|)
expr_stmt|;
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
name|eXistHome
argument_list|)
expr_stmt|;
name|File
name|schema
init|=
operator|new
name|File
argument_list|(
name|eXistHome
argument_list|,
name|ABOOKFILES
operator|+
literal|"/addressbook.xsd"
argument_list|)
decl_stmt|;
name|byte
name|grammar
index|[]
init|=
name|dt
operator|.
name|readFile
argument_list|(
name|schema
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
name|dbResources
operator|.
name|insertResource
argument_list|(
name|DBGRAMMARS
operator|+
literal|"/schemas/addressbook.xsd"
argument_list|,
name|grammar
argument_list|)
argument_list|)
expr_stmt|;
name|File
name|catalog
init|=
operator|new
name|File
argument_list|(
name|eXistHome
argument_list|,
name|ABOOKFILES
operator|+
literal|"/catalog_schema.xml"
argument_list|)
decl_stmt|;
name|grammar
operator|=
name|dt
operator|.
name|readFile
argument_list|(
name|catalog
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|dbResources
operator|.
name|insertResource
argument_list|(
name|DBGRAMMARS
operator|+
literal|"/schemas/catalog_schema.xml"
argument_list|,
name|grammar
argument_list|)
argument_list|)
expr_stmt|;
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"<<<"
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|testInsertDtdGrammar
parameter_list|()
block|{
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|">>> testInsertDtdGrammar"
argument_list|)
expr_stmt|;
name|File
name|dtd
init|=
operator|new
name|File
argument_list|(
name|eXistHome
argument_list|,
name|DTDFILES
operator|+
literal|"/play.dtd"
argument_list|)
decl_stmt|;
name|byte
name|grammar
index|[]
init|=
name|dt
operator|.
name|readFile
argument_list|(
name|dtd
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
name|dbResources
operator|.
name|insertResource
argument_list|(
name|DBGRAMMARS
operator|+
literal|"/dtds/play.dtd"
argument_list|,
name|grammar
argument_list|)
argument_list|)
expr_stmt|;
name|File
name|catalog
init|=
operator|new
name|File
argument_list|(
name|eXistHome
argument_list|,
name|DTDFILES
operator|+
literal|"/catalog.xml"
argument_list|)
decl_stmt|;
name|grammar
operator|=
name|dt
operator|.
name|readFile
argument_list|(
name|catalog
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|dbResources
operator|.
name|insertResource
argument_list|(
name|DBGRAMMARS
operator|+
literal|"/dtds/catalog.xml"
argument_list|,
name|grammar
argument_list|)
argument_list|)
expr_stmt|;
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"<<<"
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|testInsertTestDocuments
parameter_list|()
block|{
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|">>> testInsertTestDocuments"
argument_list|)
expr_stmt|;
name|File
name|file
init|=
operator|new
name|File
argument_list|(
name|eXistHome
argument_list|,
name|ABOOKFILES
operator|+
literal|"/addressbook_valid.xml"
argument_list|)
decl_stmt|;
name|byte
name|data
index|[]
init|=
name|dt
operator|.
name|readFile
argument_list|(
name|file
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
name|dbResources
operator|.
name|insertResource
argument_list|(
name|DBGRAMMARS
operator|+
literal|"/addressbook_valid.xml"
argument_list|,
name|data
argument_list|)
argument_list|)
expr_stmt|;
name|file
operator|=
operator|new
name|File
argument_list|(
name|eXistHome
argument_list|,
name|ABOOKFILES
operator|+
literal|"/addressbook_invalid.xml"
argument_list|)
expr_stmt|;
name|data
operator|=
name|dt
operator|.
name|readFile
argument_list|(
name|file
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|dbResources
operator|.
name|insertResource
argument_list|(
name|DBGRAMMARS
operator|+
literal|"/addressbook_invalid.xml"
argument_list|,
name|data
argument_list|)
argument_list|)
expr_stmt|;
name|file
operator|=
operator|new
name|File
argument_list|(
name|eXistHome
argument_list|,
name|DTDFILES
operator|+
literal|"/hamlet_valid.xml"
argument_list|)
expr_stmt|;
name|data
operator|=
name|dt
operator|.
name|readFile
argument_list|(
name|file
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|dbResources
operator|.
name|insertResource
argument_list|(
name|DBGRAMMARS
operator|+
literal|"/hamlet_valid.xml"
argument_list|,
name|data
argument_list|)
argument_list|)
expr_stmt|;
name|file
operator|=
operator|new
name|File
argument_list|(
name|eXistHome
argument_list|,
name|DTDFILES
operator|+
literal|"/hamlet_invalid.xml"
argument_list|)
expr_stmt|;
name|data
operator|=
name|dt
operator|.
name|readFile
argument_list|(
name|file
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|dbResources
operator|.
name|insertResource
argument_list|(
name|DBGRAMMARS
operator|+
literal|"/hamlet_invalid.xml"
argument_list|,
name|data
argument_list|)
argument_list|)
expr_stmt|;
name|file
operator|=
operator|new
name|File
argument_list|(
name|eXistHome
argument_list|,
name|DTDFILES
operator|+
literal|"/hamlet_nodoctype.xml"
argument_list|)
expr_stmt|;
name|data
operator|=
name|dt
operator|.
name|readFile
argument_list|(
name|file
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|dbResources
operator|.
name|insertResource
argument_list|(
name|DBGRAMMARS
operator|+
literal|"/hamlet_nodoctype.xml"
argument_list|,
name|data
argument_list|)
argument_list|)
expr_stmt|;
name|file
operator|=
operator|new
name|File
argument_list|(
name|eXistHome
argument_list|,
name|DTDFILES
operator|+
literal|"/hamlet_wrongdoctype.xml"
argument_list|)
expr_stmt|;
name|data
operator|=
name|dt
operator|.
name|readFile
argument_list|(
name|file
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|dbResources
operator|.
name|insertResource
argument_list|(
name|DBGRAMMARS
operator|+
literal|"/hamlet_wrongdoctype.xml"
argument_list|,
name|data
argument_list|)
argument_list|)
expr_stmt|;
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"<<<"
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|testIsGrammarInDatabase
parameter_list|()
block|{
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|">>> testIsGrammarInDatabase"
argument_list|)
expr_stmt|;
comment|//        assertTrue( c.hasGrammar( DatabaseResources.GRAMMAR_XSD,
comment|//                "http://jmvanel.free.fr/xsd/addressBook" ) );
name|assertNotNull
argument_list|(
name|dbResources
operator|.
name|getSchemaPath
argument_list|(
name|baseURI
argument_list|,
literal|"http://jmvanel.free.fr/xsd/addressBook"
argument_list|)
argument_list|)
expr_stmt|;
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"<<<"
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|testIsGrammarNotInDatabase
parameter_list|()
block|{
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|">>> testIsGrammarNotInDatabase"
argument_list|)
expr_stmt|;
name|assertNull
argument_list|(
name|dbResources
operator|.
name|getSchemaPath
argument_list|(
name|baseURI
argument_list|,
literal|"http://jmvanel.free.fr/xsd/addressBooky"
argument_list|)
argument_list|)
expr_stmt|;
comment|//        assertFalse( dbResources.hasGrammar( DatabaseResources.GRAMMAR_XSD,
comment|//                "http://jmvanel.free.fr/xsd/addressBooky" ) );
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"<<<"
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|testXsdValidDocument
parameter_list|()
block|{
try|try
block|{
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|">>> testXsdValidDocument"
argument_list|)
expr_stmt|;
name|validator
operator|.
name|getGrammarPool
argument_list|()
operator|.
name|clear
argument_list|()
expr_stmt|;
name|File
name|file
init|=
operator|new
name|File
argument_list|(
name|eXistHome
argument_list|,
name|ABOOKFILES
operator|+
literal|"/addressbook_valid.xml"
argument_list|)
decl_stmt|;
name|ValidationReport
name|report
init|=
name|validator
operator|.
name|validate
argument_list|(
operator|new
name|FileInputStream
argument_list|(
name|file
argument_list|)
argument_list|)
decl_stmt|;
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
name|report
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|report
operator|.
name|isValid
argument_list|()
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|fail
argument_list|(
name|e
operator|.
name|getMessage
argument_list|()
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"<<<"
argument_list|)
expr_stmt|;
block|}
block|}
specifier|public
name|void
name|testXsdInvalidDocument
parameter_list|()
block|{
try|try
block|{
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|">>> testXsdInvalidDocument"
argument_list|)
expr_stmt|;
name|validator
operator|.
name|getGrammarPool
argument_list|()
operator|.
name|clear
argument_list|()
expr_stmt|;
name|File
name|file
init|=
operator|new
name|File
argument_list|(
name|eXistHome
argument_list|,
name|ABOOKFILES
operator|+
literal|"/addressbook_invalid.xml"
argument_list|)
decl_stmt|;
name|ValidationReport
name|report
init|=
name|validator
operator|.
name|validate
argument_list|(
operator|new
name|FileInputStream
argument_list|(
name|file
argument_list|)
argument_list|)
decl_stmt|;
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
name|report
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|report
operator|.
name|isValid
argument_list|()
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|fail
argument_list|(
name|e
operator|.
name|getMessage
argument_list|()
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"<<<"
argument_list|)
expr_stmt|;
block|}
block|}
specifier|public
name|void
name|testDtdValidDocument
parameter_list|()
block|{
try|try
block|{
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|">>> testDtdValidDocument"
argument_list|)
expr_stmt|;
name|validator
operator|.
name|getGrammarPool
argument_list|()
operator|.
name|clear
argument_list|()
expr_stmt|;
name|File
name|file
init|=
operator|new
name|File
argument_list|(
name|eXistHome
argument_list|,
name|DTDFILES
operator|+
literal|"/hamlet_valid.xml"
argument_list|)
decl_stmt|;
name|ValidationReport
name|report
init|=
name|validator
operator|.
name|validate
argument_list|(
operator|new
name|FileInputStream
argument_list|(
name|file
argument_list|)
argument_list|,
literal|"/db/grammar/dtds/catalog.xml"
argument_list|)
decl_stmt|;
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
name|report
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|report
operator|.
name|isValid
argument_list|()
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|fail
argument_list|(
name|e
operator|.
name|getMessage
argument_list|()
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"<<<"
argument_list|)
expr_stmt|;
block|}
block|}
specifier|public
name|void
name|testDtdInvalidDocument
parameter_list|()
block|{
try|try
block|{
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|">>> testDtdInvalidDocument"
argument_list|)
expr_stmt|;
name|validator
operator|.
name|getGrammarPool
argument_list|()
operator|.
name|clear
argument_list|()
expr_stmt|;
name|File
name|file
init|=
operator|new
name|File
argument_list|(
name|eXistHome
argument_list|,
name|DTDFILES
operator|+
literal|"/hamlet_invalid.xml"
argument_list|)
decl_stmt|;
name|ValidationReport
name|report
init|=
name|validator
operator|.
name|validate
argument_list|(
operator|new
name|FileInputStream
argument_list|(
name|file
argument_list|)
argument_list|)
decl_stmt|;
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
name|report
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|report
operator|.
name|isValid
argument_list|()
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|fail
argument_list|(
name|e
operator|.
name|getMessage
argument_list|()
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"<<<"
argument_list|)
expr_stmt|;
block|}
block|}
specifier|public
name|void
name|testCatalogValidXml
parameter_list|()
block|{
try|try
block|{
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|">>> testCatalogValidXml"
argument_list|)
expr_stmt|;
name|validator
operator|.
name|getGrammarPool
argument_list|()
operator|.
name|clear
argument_list|()
expr_stmt|;
name|File
name|file
init|=
operator|new
name|File
argument_list|(
name|eXistHome
argument_list|,
name|ABOOKFILES
operator|+
literal|"/addressbook_valid.xml"
argument_list|)
decl_stmt|;
name|ValidationReport
name|report
init|=
name|validator
operator|.
name|validate
argument_list|(
operator|new
name|FileInputStream
argument_list|(
name|file
argument_list|)
argument_list|,
name|DBGRAMMARS
operator|+
literal|"/schemas/catalog_schema.xml"
argument_list|)
decl_stmt|;
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
name|report
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|report
operator|.
name|isValid
argument_list|()
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|fail
argument_list|(
name|e
operator|.
name|getMessage
argument_list|()
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"<<<"
argument_list|)
expr_stmt|;
block|}
block|}
specifier|public
name|void
name|testCatalogInvalidXml
parameter_list|()
block|{
try|try
block|{
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|">>> testCatalogInvalidXml"
argument_list|)
expr_stmt|;
name|validator
operator|.
name|getGrammarPool
argument_list|()
operator|.
name|clear
argument_list|()
expr_stmt|;
name|File
name|file
init|=
operator|new
name|File
argument_list|(
name|eXistHome
argument_list|,
name|ABOOKFILES
operator|+
literal|"/addressbook_invalid.xml"
argument_list|)
decl_stmt|;
name|ValidationReport
name|report
init|=
name|validator
operator|.
name|validate
argument_list|(
operator|new
name|FileInputStream
argument_list|(
name|file
argument_list|)
argument_list|,
name|DBGRAMMARS
operator|+
literal|"/schemas/catalog_schema.xml"
argument_list|)
decl_stmt|;
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
name|report
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|report
operator|.
name|isValid
argument_list|()
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
literal|"Error report indicates that grammar or catalog could not be found"
argument_list|,
name|report
operator|.
name|toString
argument_list|()
operator|.
name|indexOf
argument_list|(
literal|"Error (2,61) : cvc-elt.1: Cannot find the declaration of element 'addressBook'."
argument_list|)
operator|!=
operator|-
literal|1
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
literal|"Content error report is different then exptected"
argument_list|,
name|report
operator|.
name|toString
argument_list|()
operator|.
name|indexOf
argument_list|(
literal|"Error (12,15) : cvc-complex-type.2.4.a: Invalid content was found starting with element 'name'. One of '{\"http://jmvanel.free.fr/xsd/addressBook\":cname}' is expected."
argument_list|)
operator|!=
operator|-
literal|1
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|fail
argument_list|(
name|e
operator|.
name|getMessage
argument_list|()
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"<<<"
argument_list|)
expr_stmt|;
block|}
block|}
specifier|public
name|void
name|testShutdown
parameter_list|()
block|{
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|">>> testShutdown"
argument_list|)
expr_stmt|;
comment|// TODO why o why, tell me why to leave this one out
comment|//BrokerPool.stopAll(false);
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"<<<\n"
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

