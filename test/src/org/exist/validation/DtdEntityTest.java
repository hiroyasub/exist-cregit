begin_unit|revision:1.0.0;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  *  eXist Open Source Native XML Database  *  Copyright (C) 2009 The eXist Project  *  http://exist-db.org  *  *  This program is free software; you can redistribute it and/or  *  modify it under the terms of the GNU Lesser General Public License  *  as published by the Free Software Foundation; either version 2  *  of the License, or (at your option) any later version.  *  *  This program is distributed in the hope that it will be useful,  *  but WITHOUT ANY WARRANTY; without even the implied warranty of  *  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the  *  GNU Lesser General Public License for more details.  *  *  You should have received a copy of the GNU Lesser General Public  *  License along with this library; if not, write to the Free Software  *  Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA  02110-1301  USA  *  * $Id$  */
end_comment

begin_package
package|package
name|org
operator|.
name|exist
operator|.
name|validation
package|;
end_package

begin_import
import|import static
name|java
operator|.
name|nio
operator|.
name|charset
operator|.
name|StandardCharsets
operator|.
name|UTF_8
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|*
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|test
operator|.
name|ExistXmldbEmbeddedServer
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|*
import|;
end_import

begin_import
import|import
name|org
operator|.
name|xmldb
operator|.
name|api
operator|.
name|base
operator|.
name|Collection
import|;
end_import

begin_import
import|import
name|org
operator|.
name|xmldb
operator|.
name|api
operator|.
name|base
operator|.
name|XMLDBException
import|;
end_import

begin_comment
comment|/**  * Small test to show than entities are required to be resolved.  *   * @author wessels  */
end_comment

begin_class
specifier|public
class|class
name|DtdEntityTest
block|{
annotation|@
name|ClassRule
specifier|public
specifier|static
specifier|final
name|ExistXmldbEmbeddedServer
name|existEmbeddedServer
init|=
operator|new
name|ExistXmldbEmbeddedServer
argument_list|()
decl_stmt|;
annotation|@
name|Test
specifier|public
name|void
name|loadWithEntities
parameter_list|()
throws|throws
name|XMLDBException
block|{
specifier|final
name|String
name|input
init|=
literal|"<a>first empty:&empty; then trade:&trade;</a>"
decl_stmt|;
name|Collection
name|col
init|=
literal|null
decl_stmt|;
try|try
block|{
name|col
operator|=
name|existEmbeddedServer
operator|.
name|createCollection
argument_list|(
name|existEmbeddedServer
operator|.
name|getRoot
argument_list|()
argument_list|,
literal|"entity"
argument_list|)
expr_stmt|;
name|ExistXmldbEmbeddedServer
operator|.
name|storeResource
argument_list|(
name|col
argument_list|,
literal|"docname.xml"
argument_list|,
name|input
operator|.
name|getBytes
argument_list|()
argument_list|)
expr_stmt|;
comment|// should throw XMLDBException
name|ExistXmldbEmbeddedServer
operator|.
name|getXMLResource
argument_list|(
name|col
argument_list|,
literal|"docname.xml"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
specifier|final
name|XMLDBException
name|e
parameter_list|)
block|{
name|assertTrue
argument_list|(
name|e
operator|.
name|getMessage
argument_list|()
operator|.
name|contains
argument_list|(
literal|"The entity \"empty\" was referenced, but not declared"
argument_list|)
argument_list|)
expr_stmt|;
return|return;
block|}
finally|finally
block|{
if|if
condition|(
name|col
operator|!=
literal|null
condition|)
block|{
name|col
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
block|}
name|fail
argument_list|(
literal|"Should have thrown XMLDBException"
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
annotation|@
name|Ignore
argument_list|(
literal|"Entity resolve bug"
argument_list|)
specifier|public
name|void
name|bugloadWithEntities
parameter_list|()
throws|throws
name|XMLDBException
block|{
specifier|final
name|String
name|input
init|=
literal|"<?xml version=\"1.0\" encoding=\"UTF-8\"?>"
operator|+
literal|"<!DOCTYPE procedure PUBLIC \"-//AAAA//DTD Procedure 0.4//EN\" \"aaaa.dtd\">"
operator|+
literal|"<a>first empty:&empty; then trade:&trade;</a>"
decl_stmt|;
name|Collection
name|col
init|=
literal|null
decl_stmt|;
try|try
block|{
name|col
operator|=
name|existEmbeddedServer
operator|.
name|createCollection
argument_list|(
name|existEmbeddedServer
operator|.
name|getRoot
argument_list|()
argument_list|,
literal|"entity"
argument_list|)
expr_stmt|;
name|ExistXmldbEmbeddedServer
operator|.
name|storeResource
argument_list|(
name|col
argument_list|,
literal|"docname.xml"
argument_list|,
name|input
operator|.
name|getBytes
argument_list|(
name|UTF_8
argument_list|)
argument_list|)
expr_stmt|;
comment|// should throw XMLDBException
name|ExistXmldbEmbeddedServer
operator|.
name|getXMLResource
argument_list|(
name|col
argument_list|,
literal|"docname.xml"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
specifier|final
name|XMLDBException
name|e
parameter_list|)
block|{
name|assertTrue
argument_list|(
name|e
operator|.
name|getMessage
argument_list|()
operator|.
name|contains
argument_list|(
literal|"The entity \"empty\" was referenced, but not declared"
argument_list|)
argument_list|)
expr_stmt|;
return|return;
block|}
finally|finally
block|{
if|if
condition|(
name|col
operator|!=
literal|null
condition|)
block|{
name|col
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
block|}
name|fail
argument_list|(
literal|"Should have thrown XMLDBException"
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

