begin_unit|revision:1.0.0;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  *  eXist Open Source Native XML Database  *  Copyright (C) 2001-07 The eXist Project  *  http://exist-db.org  *  *  This program is free software; you can redistribute it and/or  *  modify it under the terms of the GNU Lesser General Public License  *  as published by the Free Software Foundation; either version 2  *  of the License, or (at your option) any later version.  *  *  This program is distributed in the hope that it will be useful,  *  but WITHOUT ANY WARRANTY; without even the implied warranty of  *  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the  *  GNU Lesser General Public License for more details.  *  *  You should have received a copy of the GNU Lesser General Public  *  License along with this library; if not, write to the Free Software  *  Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA  02110-1301  USA  *  * $Id$  */
end_comment

begin_package
package|package
name|org
operator|.
name|exist
operator|.
name|validation
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|ByteArrayInputStream
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|external
operator|.
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|io
operator|.
name|output
operator|.
name|ByteArrayOutputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|File
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|FileInputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|InputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|OutputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|URL
import|;
end_import

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|URLConnection
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|util
operator|.
name|ConfigurationHelper
import|;
end_import

begin_comment
comment|/**  *  A set of helper methods for the validation tests.  *  * @author Dannes Wessels (dizzzz@exist-db.org)  */
end_comment

begin_class
specifier|public
class|class
name|TestTools
block|{
specifier|public
specifier|final
specifier|static
name|String
name|VALIDATION_HOME_COLLECTION
init|=
literal|"validation"
decl_stmt|;
specifier|public
specifier|final
specifier|static
name|String
name|VALIDATION_DTD_COLLECTION
init|=
literal|"dtd"
decl_stmt|;
specifier|public
specifier|final
specifier|static
name|String
name|VALIDATION_XSD_COLLECTION
init|=
literal|"xsd"
decl_stmt|;
specifier|public
specifier|final
specifier|static
name|String
name|VALIDATION_TMP_COLLECTION
init|=
literal|"tmp"
decl_stmt|;
comment|/*     public static void insertResources(){          try {             String eXistHome = ConfigurationHelper.getExistHome().getAbsolutePath();              Class<?> cl = Class.forName("org.exist.xmldb.DatabaseImpl");             Database database = (Database) cl.newInstance();             database.setProperty("create-database", "true");             DatabaseManager.registerDatabase(database);             Collection root = DatabaseManager.getCollection("xmldb:exist://" + DBBroker.ROOT_COLLECTION, "admin", null);             XPathQueryService service = (XPathQueryService) root.getService("XQueryService", "1.0");              CollectionManagementService cmservice = (CollectionManagementService) root.getService("CollectionManagementService", "1.0");             Collection col1 = cmservice.createCollection(TestTools.VALIDATION_HOME);             Collection col2 = cmservice.createCollection(TestTools.VALIDATION_XSD);              Permission permission = PermissionAiderFactory.getPermission("guest", "guest", 999);              UserManagementService umservice = (UserManagementService) root.getService("UserManagementService", "1.0");             umservice.setPermissions(col1, permission);             umservice.setPermissions(col2, permission);              String addressbook = eXistHome + "/samples/validation/addressbook";              TestTools.insertDocumentToURL(addressbook + "/addressbook.xsd",                     "xmldb:exist://" + TestTools.VALIDATION_XSD + "/addressbook.xsd");             TestTools.insertDocumentToURL(addressbook + "/catalog.xml",                     "xmldb:exist://" + TestTools.VALIDATION_XSD + "/catalog.xml");              TestTools.insertDocumentToURL(addressbook + "/addressbook_valid.xml",                     "xmldb:exist://" + TestTools.VALIDATION_HOME + "/addressbook_valid.xml");             TestTools.insertDocumentToURL(addressbook + "/addressbook_invalid.xml",                     "xmldb:exist://" + TestTools.VALIDATION_HOME + "/addressbook_invalid.xml");          } catch (Throwable ex) {             ex.printStackTrace();         }     }*/
comment|// Transfer bytes from in to out
specifier|public
specifier|static
name|void
name|copyStream
parameter_list|(
name|InputStream
name|is
parameter_list|,
name|OutputStream
name|os
parameter_list|)
throws|throws
name|IOException
block|{
name|byte
index|[]
name|buf
init|=
operator|new
name|byte
index|[
literal|1024
index|]
decl_stmt|;
name|int
name|len
decl_stmt|;
while|while
condition|(
operator|(
name|len
operator|=
name|is
operator|.
name|read
argument_list|(
name|buf
argument_list|)
operator|)
operator|>
literal|0
condition|)
block|{
name|os
operator|.
name|write
argument_list|(
name|buf
argument_list|,
literal|0
argument_list|,
name|len
argument_list|)
expr_stmt|;
block|}
block|}
comment|/**      *      * @param file     File to be uploaded      * @param target  Target URL (e.g. xmldb:exist:///db/collection/document.xml)      * @throws java.lang.Exception  Oops.....      */
specifier|public
specifier|static
name|void
name|insertDocumentToURL
parameter_list|(
name|String
name|file
parameter_list|,
name|String
name|target
parameter_list|)
throws|throws
name|IOException
block|{
name|InputStream
name|is
init|=
literal|null
decl_stmt|;
name|OutputStream
name|os
init|=
literal|null
decl_stmt|;
try|try
block|{
name|is
operator|=
operator|new
name|FileInputStream
argument_list|(
name|file
argument_list|)
expr_stmt|;
specifier|final
name|URL
name|url
init|=
operator|new
name|URL
argument_list|(
name|target
argument_list|)
decl_stmt|;
specifier|final
name|URLConnection
name|connection
init|=
name|url
operator|.
name|openConnection
argument_list|()
decl_stmt|;
name|os
operator|=
name|connection
operator|.
name|getOutputStream
argument_list|()
expr_stmt|;
name|TestTools
operator|.
name|copyStream
argument_list|(
name|is
argument_list|,
name|os
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
if|if
condition|(
name|is
operator|!=
literal|null
condition|)
block|{
name|is
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
if|if
condition|(
name|os
operator|!=
literal|null
condition|)
block|{
name|os
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
block|}
block|}
specifier|public
specifier|static
name|String
name|getEXistHome
parameter_list|()
block|{
return|return
name|ConfigurationHelper
operator|.
name|getExistHome
argument_list|()
operator|.
name|getAbsolutePath
argument_list|()
return|;
block|}
specifier|public
specifier|static
name|byte
index|[]
name|getHamlet
parameter_list|()
throws|throws
name|IOException
block|{
return|return
name|loadSample
argument_list|(
literal|"shakespeare/hamlet.xml"
argument_list|)
return|;
block|}
specifier|public
specifier|static
name|byte
index|[]
name|loadSample
parameter_list|(
name|String
name|sampleRelativePath
parameter_list|)
throws|throws
name|IOException
block|{
name|File
name|file
init|=
operator|new
name|File
argument_list|(
name|getEXistHome
argument_list|()
argument_list|,
literal|"samples/"
operator|+
name|sampleRelativePath
argument_list|)
decl_stmt|;
name|InputStream
name|fis
init|=
literal|null
decl_stmt|;
name|ByteArrayOutputStream
name|baos
init|=
literal|null
decl_stmt|;
try|try
block|{
name|fis
operator|=
operator|new
name|FileInputStream
argument_list|(
name|file
argument_list|)
expr_stmt|;
name|baos
operator|=
operator|new
name|ByteArrayOutputStream
argument_list|()
expr_stmt|;
name|TestTools
operator|.
name|copyStream
argument_list|(
name|fis
argument_list|,
name|baos
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
if|if
condition|(
name|fis
operator|!=
literal|null
condition|)
block|{
name|fis
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
if|if
condition|(
name|baos
operator|!=
literal|null
condition|)
block|{
name|baos
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
block|}
return|return
name|baos
operator|.
name|toByteArray
argument_list|()
return|;
block|}
specifier|public
specifier|static
name|void
name|insertDocumentToURL
parameter_list|(
name|byte
index|[]
name|data
parameter_list|,
name|String
name|target
parameter_list|)
throws|throws
name|IOException
block|{
specifier|final
name|URL
name|url
init|=
operator|new
name|URL
argument_list|(
name|target
argument_list|)
decl_stmt|;
specifier|final
name|URLConnection
name|connection
init|=
name|url
operator|.
name|openConnection
argument_list|()
decl_stmt|;
name|InputStream
name|is
init|=
literal|null
decl_stmt|;
name|OutputStream
name|os
init|=
literal|null
decl_stmt|;
try|try
block|{
name|is
operator|=
operator|new
name|ByteArrayInputStream
argument_list|(
name|data
argument_list|)
expr_stmt|;
name|os
operator|=
name|connection
operator|.
name|getOutputStream
argument_list|()
expr_stmt|;
name|TestTools
operator|.
name|copyStream
argument_list|(
name|is
argument_list|,
name|os
argument_list|)
expr_stmt|;
name|os
operator|.
name|flush
argument_list|()
expr_stmt|;
block|}
finally|finally
block|{
if|if
condition|(
name|is
operator|!=
literal|null
condition|)
block|{
name|is
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
if|if
condition|(
name|os
operator|!=
literal|null
condition|)
block|{
name|os
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
block|}
block|}
block|}
end_class

end_unit

