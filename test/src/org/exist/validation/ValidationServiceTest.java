begin_unit|revision:1.0.0;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  *  eXist Open Source Native XML Database  *  Copyright (C) 2001-07 The eXist Project  *  http://exist-db.org  *  *  This program is free software; you can redistribute it and/or  *  modify it under the terms of the GNU Lesser General Public License  *  as published by the Free Software Foundation; either version 2  *  of the License, or (at your option) any later version.  *  *  This program is distributed in the hope that it will be useful,  *  but WITHOUT ANY WARRANTY; without even the implied warranty of  *  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the  *  GNU Lesser General Public License for more details.  *  *  You should have received a copy of the GNU Lesser General Public  *  License along with this library; if not, write to the Free Software  *  Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA  02110-1301  USA  *  * $Id$  */
end_comment

begin_package
package|package
name|org
operator|.
name|exist
operator|.
name|validation
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|log4j
operator|.
name|BasicConfigurator
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|storage
operator|.
name|DBBroker
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|storage
operator|.
name|io
operator|.
name|ExistIOException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|validation
operator|.
name|service
operator|.
name|ValidationService
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Assert
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Before
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|BeforeClass
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Ignore
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_import
import|import
name|org
operator|.
name|xmldb
operator|.
name|api
operator|.
name|DatabaseManager
import|;
end_import

begin_import
import|import
name|org
operator|.
name|xmldb
operator|.
name|api
operator|.
name|base
operator|.
name|Collection
import|;
end_import

begin_import
import|import
name|org
operator|.
name|xmldb
operator|.
name|api
operator|.
name|base
operator|.
name|Database
import|;
end_import

begin_comment
comment|/**  *  Tests for the Validation Service, e.g. used by InteractiveClient  *  * @author Dannes Wessels (dizzzz@exist-db.org)  */
end_comment

begin_class
specifier|public
class|class
name|ValidationServiceTest
block|{
specifier|private
specifier|final
specifier|static
name|String
name|URI
init|=
literal|"xmldb:exist://"
operator|+
name|DBBroker
operator|.
name|ROOT_COLLECTION
decl_stmt|;
specifier|private
specifier|final
specifier|static
name|String
name|DRIVER
init|=
literal|"org.exist.xmldb.DatabaseImpl"
decl_stmt|;
specifier|private
specifier|static
name|Collection
name|rootCollection
init|=
literal|null
decl_stmt|;
specifier|private
specifier|static
name|ValidationService
name|service
init|=
literal|null
decl_stmt|;
comment|//    public ValidationServiceTest(String testName) {
comment|//        super(testName);
comment|//    }
comment|//
comment|//    public static Test suite() {
comment|//        TestSuite suite = new TestSuite(ValidationServiceTest.class);
comment|//        return suite;
comment|//    }
annotation|@
name|BeforeClass
specifier|public
specifier|static
name|void
name|init
parameter_list|()
block|{
name|BasicConfigurator
operator|.
name|configure
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Before
specifier|public
name|void
name|setUp
parameter_list|()
block|{
try|try
block|{
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|">>> setUp"
argument_list|)
expr_stmt|;
name|Class
name|cl
init|=
name|Class
operator|.
name|forName
argument_list|(
name|DRIVER
argument_list|)
decl_stmt|;
name|Database
name|database
init|=
operator|(
name|Database
operator|)
name|cl
operator|.
name|newInstance
argument_list|()
decl_stmt|;
name|database
operator|.
name|setProperty
argument_list|(
literal|"create-database"
argument_list|,
literal|"true"
argument_list|)
expr_stmt|;
name|DatabaseManager
operator|.
name|registerDatabase
argument_list|(
name|database
argument_list|)
expr_stmt|;
name|rootCollection
operator|=
name|DatabaseManager
operator|.
name|getCollection
argument_list|(
name|URI
argument_list|,
literal|"admin"
argument_list|,
literal|null
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertNotNull
argument_list|(
literal|"Could not connect to database."
argument_list|)
expr_stmt|;
name|service
operator|=
name|getValidationService
argument_list|()
expr_stmt|;
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"<<<\n"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|e
operator|.
name|printStackTrace
argument_list|()
expr_stmt|;
name|Assert
operator|.
name|fail
argument_list|(
name|e
operator|.
name|getMessage
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
specifier|private
name|ValidationService
name|getValidationService
parameter_list|()
block|{
try|try
block|{
return|return
operator|(
name|ValidationService
operator|)
name|rootCollection
operator|.
name|getService
argument_list|(
literal|"ValidationService"
argument_list|,
literal|"1.0"
argument_list|)
return|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|e
operator|.
name|printStackTrace
argument_list|()
expr_stmt|;
name|Assert
operator|.
name|fail
argument_list|(
name|e
operator|.
name|getMessage
argument_list|()
argument_list|)
expr_stmt|;
block|}
return|return
literal|null
return|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testGetName
parameter_list|()
block|{
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"testGetName"
argument_list|)
expr_stmt|;
try|try
block|{
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|"ValidationService check"
argument_list|,
name|service
operator|.
name|getName
argument_list|()
argument_list|,
literal|"ValidationService"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|e
operator|.
name|printStackTrace
argument_list|()
expr_stmt|;
name|Assert
operator|.
name|fail
argument_list|(
name|e
operator|.
name|getMessage
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Test
specifier|public
name|void
name|testGetVersion
parameter_list|()
block|{
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"testGetVersion"
argument_list|)
expr_stmt|;
try|try
block|{
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|"ValidationService check"
argument_list|,
name|service
operator|.
name|getVersion
argument_list|()
argument_list|,
literal|"1.0"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|e
operator|.
name|printStackTrace
argument_list|()
expr_stmt|;
name|Assert
operator|.
name|fail
argument_list|(
name|e
operator|.
name|getMessage
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Test
specifier|public
name|void
name|testXsdValidDocument
parameter_list|()
block|{
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"testXsdValidDocument"
argument_list|)
expr_stmt|;
try|try
block|{
name|Assert
operator|.
name|assertFalse
argument_list|(
literal|"system catalog"
argument_list|,
name|service
operator|.
name|validateResource
argument_list|(
literal|"/db/validation/addressbook_valid.xml"
argument_list|)
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
literal|"specified catalog"
argument_list|,
name|service
operator|.
name|validateResource
argument_list|(
literal|"/db/validation/addressbook_valid.xml"
argument_list|,
literal|"/db/validation/xsd/catalog.xml"
argument_list|)
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
literal|"specified grammar"
argument_list|,
name|service
operator|.
name|validateResource
argument_list|(
literal|"/db/validation/addressbook_valid.xml"
argument_list|,
literal|"/db/validation/xsd/addressbook.xsd"
argument_list|)
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|e
operator|.
name|printStackTrace
argument_list|()
expr_stmt|;
name|Assert
operator|.
name|fail
argument_list|(
name|e
operator|.
name|getMessage
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Test
specifier|public
name|void
name|testXsdInvalidDocument
parameter_list|()
block|{
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"testXsdInvalidDocument"
argument_list|)
expr_stmt|;
try|try
block|{
name|Assert
operator|.
name|assertFalse
argument_list|(
literal|"system catalog"
argument_list|,
name|service
operator|.
name|validateResource
argument_list|(
literal|"/db/validation/addressbook_invalid.xml"
argument_list|)
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertFalse
argument_list|(
literal|"specified catalog"
argument_list|,
name|service
operator|.
name|validateResource
argument_list|(
literal|"/db/validation/addressbook_invalid.xml"
argument_list|,
literal|"/db/validation/xsd/catalog.xml"
argument_list|)
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertFalse
argument_list|(
literal|"specified grammar"
argument_list|,
name|service
operator|.
name|validateResource
argument_list|(
literal|"/db/validation/addressbook_invalid.xml"
argument_list|,
literal|"/db/validation/xsd/addressbook.xsd"
argument_list|)
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|e
operator|.
name|printStackTrace
argument_list|()
expr_stmt|;
name|Assert
operator|.
name|fail
argument_list|(
name|e
operator|.
name|getMessage
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Test
specifier|public
name|void
name|testNonexistingDocument
parameter_list|()
block|{
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"testNonexistingDocument"
argument_list|)
expr_stmt|;
try|try
block|{
name|Assert
operator|.
name|assertFalse
argument_list|(
literal|"non existing document"
argument_list|,
name|service
operator|.
name|validateResource
argument_list|(
name|DBBroker
operator|.
name|ROOT_COLLECTION
operator|+
literal|"/foobar.xml"
argument_list|)
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|e
operator|.
name|printStackTrace
argument_list|()
expr_stmt|;
name|Assert
operator|.
name|fail
argument_list|(
name|e
operator|.
name|getMessage
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Test
specifier|public
name|void
name|testDtdValidDocument
parameter_list|()
block|{
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"testDtdValidDocument"
argument_list|)
expr_stmt|;
try|try
block|{
name|Assert
operator|.
name|assertFalse
argument_list|(
literal|"system catalog"
argument_list|,
name|service
operator|.
name|validateResource
argument_list|(
literal|"/db/validation/hamlet_valid.xml"
argument_list|)
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
literal|"specified catalog"
argument_list|,
name|service
operator|.
name|validateResource
argument_list|(
literal|"/db/validation/hamlet_valid.xml"
argument_list|,
literal|"/db/validation/dtd/catalog.xml"
argument_list|)
argument_list|)
expr_stmt|;
comment|//            Assert.assertTrue( "specified grammar", service.validateResource("/db/validation/hamlet_valid.xml",
comment|//                "/db/validation/dtd/hamlet.dtd") );
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|e
operator|.
name|printStackTrace
argument_list|()
expr_stmt|;
name|Assert
operator|.
name|fail
argument_list|(
name|e
operator|.
name|getMessage
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Ignore
argument_list|(
literal|"cannot specify dtd as second parameter"
argument_list|)
annotation|@
name|Test
specifier|public
name|void
name|testDtdValidDocument2
parameter_list|()
block|{
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"testDtdValidDocument"
argument_list|)
expr_stmt|;
try|try
block|{
name|Assert
operator|.
name|assertTrue
argument_list|(
literal|"specified grammar"
argument_list|,
name|service
operator|.
name|validateResource
argument_list|(
literal|"/db/validation/hamlet_valid.xml"
argument_list|,
literal|"/db/validation/dtd/hamlet.dtd"
argument_list|)
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|e
operator|.
name|printStackTrace
argument_list|()
expr_stmt|;
name|Assert
operator|.
name|fail
argument_list|(
name|e
operator|.
name|getMessage
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Test
specifier|public
name|void
name|testDtdInvalidDocument
parameter_list|()
block|{
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"testDtdInvalidDocument"
argument_list|)
expr_stmt|;
try|try
block|{
name|Assert
operator|.
name|assertFalse
argument_list|(
literal|"system catalog"
argument_list|,
name|service
operator|.
name|validateResource
argument_list|(
literal|"/db/grammar/hamlet_invalid.xml"
argument_list|)
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertFalse
argument_list|(
literal|"specified catalog"
argument_list|,
name|service
operator|.
name|validateResource
argument_list|(
literal|"/db/validation/hamlet_invalid.xml"
argument_list|,
literal|"/db/validation/dtd/catalog.xml"
argument_list|)
argument_list|)
expr_stmt|;
comment|//            Assert.assertFalse( "specified grammar", service.validateResource("/db/validation/hamlet_invalid.xml",
comment|//                "/db/validation/dtd/hamlet.dtd") );
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|e
operator|.
name|printStackTrace
argument_list|()
expr_stmt|;
name|Assert
operator|.
name|fail
argument_list|(
name|e
operator|.
name|getMessage
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Test
specifier|public
name|void
name|testNoDoctype
parameter_list|()
block|{
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"testNoDoctype"
argument_list|)
expr_stmt|;
try|try
block|{
name|Assert
operator|.
name|assertFalse
argument_list|(
literal|"system catalog"
argument_list|,
name|service
operator|.
name|validateResource
argument_list|(
literal|"/db/validation/hamlet_nodoctype.xml"
argument_list|)
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertFalse
argument_list|(
literal|"specified catalog"
argument_list|,
name|service
operator|.
name|validateResource
argument_list|(
literal|"/db/validation/hamlet_nodoctype.xml"
argument_list|,
literal|"/db/validation/dtd/catalog.xml"
argument_list|)
argument_list|)
expr_stmt|;
comment|//            Assert.assertFalse( "specified grammar", service.validateResource("/db/validation/hamlet_nodoctype.xml",
comment|//                "/db/validation/dtd/hamlet.dtd") );
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|e
operator|.
name|printStackTrace
argument_list|()
expr_stmt|;
name|Assert
operator|.
name|fail
argument_list|(
name|e
operator|.
name|getMessage
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Test
specifier|public
name|void
name|testWrongDoctype
parameter_list|()
block|{
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"testWrongDoctype"
argument_list|)
expr_stmt|;
try|try
block|{
name|Assert
operator|.
name|assertFalse
argument_list|(
literal|"system catalog"
argument_list|,
name|service
operator|.
name|validateResource
argument_list|(
literal|"/db/validation/hamlet_wrongdoctype.xml"
argument_list|)
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertFalse
argument_list|(
literal|"specified catalog"
argument_list|,
name|service
operator|.
name|validateResource
argument_list|(
literal|"/db/validation/hamlet_wrongdoctype.xml"
argument_list|,
literal|"/db/validation/dtd/catalog.xml"
argument_list|)
argument_list|)
expr_stmt|;
comment|//            Assert.assertFalse( "specified grammar", service.validateResource("/db/validation/hamlet_wrongdoctype.xml",
comment|//                "/db/validation/dtd/hamlet.dtd") );
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
if|if
condition|(
name|e
operator|instanceof
name|ExistIOException
condition|)
block|{
name|e
operator|.
name|getCause
argument_list|()
operator|.
name|printStackTrace
argument_list|()
expr_stmt|;
name|Assert
operator|.
name|fail
argument_list|(
name|e
operator|.
name|getCause
argument_list|()
operator|.
name|getMessage
argument_list|()
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|e
operator|.
name|printStackTrace
argument_list|()
expr_stmt|;
name|Assert
operator|.
name|fail
argument_list|(
name|e
operator|.
name|getMessage
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
end_class

end_unit

