begin_unit|revision:1.0.0;language:Java;cregit-version:0.0.1
begin_package
package|package
name|org
operator|.
name|exist
package|;
end_package

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|collections
operator|.
name|Collection
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|dom
operator|.
name|persistent
operator|.
name|DocumentImpl
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|start
operator|.
name|Main
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|storage
operator|.
name|BrokerPool
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|storage
operator|.
name|DBBroker
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|storage
operator|.
name|txn
operator|.
name|Txn
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|util
operator|.
name|Configuration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|util
operator|.
name|DatabaseConfigurationException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|util
operator|.
name|FileUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|xmldb
operator|.
name|XmldbURI
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertNotNull
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|fail
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|nio
operator|.
name|file
operator|.
name|Files
import|;
end_import

begin_import
import|import
name|java
operator|.
name|nio
operator|.
name|file
operator|.
name|Path
import|;
end_import

begin_import
import|import
name|java
operator|.
name|nio
operator|.
name|file
operator|.
name|StandardCopyOption
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Iterator
import|;
end_import

begin_comment
comment|/**  * Created by IntelliJ IDEA.  * User: wolf  * Date: Oct 29, 2007  * Time: 4:28:26 PM  * To change this template use File | Settings | File Templates.  */
end_comment

begin_class
specifier|public
class|class
name|TestUtils
block|{
specifier|public
specifier|static
name|void
name|cleanupDB
parameter_list|()
block|{
try|try
block|{
name|BrokerPool
name|pool
init|=
name|BrokerPool
operator|.
name|getInstance
argument_list|()
decl_stmt|;
name|assertNotNull
argument_list|(
name|pool
argument_list|)
expr_stmt|;
try|try
init|(
specifier|final
name|DBBroker
name|broker
init|=
name|pool
operator|.
name|get
argument_list|(
name|pool
operator|.
name|getSecurityManager
argument_list|()
operator|.
name|getSystemSubject
argument_list|()
argument_list|)
init|;
specifier|final
name|Txn
name|transaction
init|=
name|pool
operator|.
name|getTransactionManager
argument_list|()
operator|.
name|beginTransaction
argument_list|()
init|)
block|{
comment|// Remove all collections below the /db root, except /db/system
name|Collection
name|root
init|=
name|broker
operator|.
name|getOrCreateCollection
argument_list|(
name|transaction
argument_list|,
name|XmldbURI
operator|.
name|ROOT_COLLECTION_URI
argument_list|)
decl_stmt|;
name|assertNotNull
argument_list|(
name|root
argument_list|)
expr_stmt|;
for|for
control|(
name|Iterator
argument_list|<
name|DocumentImpl
argument_list|>
name|i
init|=
name|root
operator|.
name|iterator
argument_list|(
name|broker
argument_list|)
init|;
name|i
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|DocumentImpl
name|doc
init|=
name|i
operator|.
name|next
argument_list|()
decl_stmt|;
name|root
operator|.
name|removeXMLResource
argument_list|(
name|transaction
argument_list|,
name|broker
argument_list|,
name|doc
operator|.
name|getURI
argument_list|()
operator|.
name|lastSegment
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|broker
operator|.
name|saveCollection
argument_list|(
name|transaction
argument_list|,
name|root
argument_list|)
expr_stmt|;
for|for
control|(
name|Iterator
argument_list|<
name|XmldbURI
argument_list|>
name|i
init|=
name|root
operator|.
name|collectionIterator
argument_list|(
name|broker
argument_list|)
init|;
name|i
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|XmldbURI
name|childName
init|=
name|i
operator|.
name|next
argument_list|()
decl_stmt|;
if|if
condition|(
name|childName
operator|.
name|equals
argument_list|(
literal|"system"
argument_list|)
condition|)
continue|continue;
name|Collection
name|childColl
init|=
name|broker
operator|.
name|getOrCreateCollection
argument_list|(
name|transaction
argument_list|,
name|XmldbURI
operator|.
name|ROOT_COLLECTION_URI
operator|.
name|append
argument_list|(
name|childName
argument_list|)
argument_list|)
decl_stmt|;
name|assertNotNull
argument_list|(
name|childColl
argument_list|)
expr_stmt|;
name|broker
operator|.
name|removeCollection
argument_list|(
name|transaction
argument_list|,
name|childColl
argument_list|)
expr_stmt|;
block|}
comment|// Remove /db/system/config/db and all collection configurations with it
name|Collection
name|config
init|=
name|broker
operator|.
name|getOrCreateCollection
argument_list|(
name|transaction
argument_list|,
name|XmldbURI
operator|.
name|create
argument_list|(
name|XmldbURI
operator|.
name|CONFIG_COLLECTION
operator|+
literal|"/db"
argument_list|)
argument_list|)
decl_stmt|;
name|assertNotNull
argument_list|(
name|config
argument_list|)
expr_stmt|;
name|broker
operator|.
name|removeCollection
argument_list|(
name|transaction
argument_list|,
name|config
argument_list|)
expr_stmt|;
name|pool
operator|.
name|getTransactionManager
argument_list|()
operator|.
name|commit
argument_list|(
name|transaction
argument_list|)
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|e
operator|.
name|printStackTrace
argument_list|()
expr_stmt|;
name|fail
argument_list|(
name|e
operator|.
name|getMessage
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
specifier|public
specifier|static
name|Main
name|startupDatabase
parameter_list|()
block|{
name|Main
name|database
init|=
operator|new
name|org
operator|.
name|exist
operator|.
name|start
operator|.
name|Main
argument_list|(
literal|"jetty"
argument_list|)
decl_stmt|;
name|database
operator|.
name|run
argument_list|(
operator|new
name|String
index|[]
block|{
literal|"jetty"
block|}
argument_list|)
expr_stmt|;
return|return
name|database
return|;
block|}
specifier|public
specifier|static
name|void
name|stopDatabase
parameter_list|(
name|Main
name|database
parameter_list|)
block|{
name|database
operator|.
name|shutdown
argument_list|()
expr_stmt|;
block|}
comment|/**      * Moves the current data directory to a backup location and places a       * clean data directory in it's place. This way we don't loose data when       * we run a unit test      *       * @return the path to the data backup directory      * @throws IOException      * @author Patrick Bosek<patrick.bosek@jorsek.com>      * @throws DatabaseConfigurationException       */
specifier|public
specifier|static
name|Path
name|moveDataDirToTempAndCreateClean
parameter_list|()
throws|throws
name|IOException
throws|,
name|DatabaseConfigurationException
block|{
name|Configuration
name|conf
init|=
operator|new
name|Configuration
argument_list|()
decl_stmt|;
name|Path
name|dataDirPath
init|=
operator|(
name|Path
operator|)
name|conf
operator|.
name|getProperty
argument_list|(
name|BrokerPool
operator|.
name|PROPERTY_DATA_DIR
argument_list|)
decl_stmt|;
if|if
condition|(
name|dataDirPath
operator|==
literal|null
operator|||
name|dataDirPath
operator|.
name|toString
argument_list|()
operator|.
name|equals
argument_list|(
literal|""
argument_list|)
condition|)
block|{
throw|throw
operator|new
name|DatabaseConfigurationException
argument_list|(
literal|"Could not find configuration for data directory"
argument_list|)
throw|;
block|}
comment|//		java.util.GregorianCalendar cal = new java.util.GregorianCalendar();
comment|//		String dateString = cal.toString();
specifier|final
name|Path
name|dataBackup
init|=
name|dataDirPath
operator|.
name|resolve
argument_list|(
literal|".temp-test-bak"
argument_list|)
decl_stmt|;
name|Files
operator|.
name|move
argument_list|(
name|dataDirPath
argument_list|,
name|dataBackup
argument_list|,
name|StandardCopyOption
operator|.
name|ATOMIC_MOVE
argument_list|)
expr_stmt|;
name|Files
operator|.
name|createDirectory
argument_list|(
name|dataDirPath
argument_list|)
expr_stmt|;
return|return
name|dataBackup
return|;
block|}
comment|/** 	 * Restores the data directory from before the test run and moves 	 * the data directory used durring the test to data.last-test-run 	 * so it can be inspected if desired. 	 *  	 * @param backupDataDirPath 	 * @throws IOException 	 * @author Patrick Bosek<patrick.bosek@jorsek.com> 	 * @throws DatabaseConfigurationException  	 */
specifier|public
specifier|static
name|void
name|moveDataDirBack
parameter_list|(
specifier|final
name|Path
name|backupDataDirPath
parameter_list|)
throws|throws
name|IOException
throws|,
name|DatabaseConfigurationException
block|{
name|Configuration
name|conf
init|=
operator|new
name|Configuration
argument_list|()
decl_stmt|;
name|Path
name|dataDirPath
init|=
operator|(
name|Path
operator|)
name|conf
operator|.
name|getProperty
argument_list|(
name|BrokerPool
operator|.
name|PROPERTY_DATA_DIR
argument_list|)
decl_stmt|;
specifier|final
name|Path
name|lastTestRunDataDir
init|=
name|dataDirPath
operator|.
name|resolve
argument_list|(
literal|".last-test-run"
argument_list|)
decl_stmt|;
if|if
condition|(
name|Files
operator|.
name|exists
argument_list|(
name|lastTestRunDataDir
argument_list|)
condition|)
block|{
name|FileUtils
operator|.
name|delete
argument_list|(
name|lastTestRunDataDir
argument_list|)
expr_stmt|;
block|}
name|Files
operator|.
name|move
argument_list|(
name|dataDirPath
argument_list|,
name|lastTestRunDataDir
argument_list|,
name|StandardCopyOption
operator|.
name|ATOMIC_MOVE
argument_list|)
expr_stmt|;
name|Files
operator|.
name|move
argument_list|(
name|backupDataDirPath
argument_list|,
name|dataDirPath
argument_list|,
name|StandardCopyOption
operator|.
name|ATOMIC_MOVE
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

