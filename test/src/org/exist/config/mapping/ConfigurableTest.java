begin_unit|revision:1.0.0;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  *  eXist Open Source Native XML Database  *  Copyright (C) 2009-2010 The eXist Project  *  http://exist-db.org  *    *  This program is free software; you can redistribute it and/or  *  modify it under the terms of the GNU Lesser General Public License  *  as published by the Free Software Foundation; either version 2  *  of the License, or (at your option) any later version.  *    *  This program is distributed in the hope that it will be useful,  *  but WITHOUT ANY WARRANTY; without even the implied warranty of  *  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the  *  GNU Lesser General Public License for more details.  *    *  You should have received a copy of the GNU Lesser General Public License  *  along with this program; if not, write to the Free Software  *  Foundation, Inc., 675 Mass Ave, Cambridge, MA 02139, USA.  *    *  $Id: ConfigurableTest.java 13769 2011-02-12 17:47:00Z shabanovd $  */
end_comment

begin_package
package|package
name|org
operator|.
name|exist
operator|.
name|config
operator|.
name|mapping
package|;
end_package

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|*
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|ByteArrayInputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|InputStream
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|config
operator|.
name|Configuration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|config
operator|.
name|Configurator
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_comment
comment|/**  * @author<a href="mailto:shabanovd@gmail.com">Dmitriy Shabanov</a>  *  */
end_comment

begin_class
specifier|public
class|class
name|ConfigurableTest
block|{
name|String
name|config1
init|=
literal|""
operator|+
literal|"<instance xmlns='http://exist-db.org/Configuration'>"
operator|+
literal|"<mappedConfig name='A' version='1'>"
operator|+
literal|"<subconfig key='1' secret='secret1'/>"
operator|+
comment|//XXX: "<subconfig key='2' secret='secret2'/>"+
literal|"</mappedConfig> "
operator|+
literal|"</instance>"
decl_stmt|;
annotation|@
name|Test
specifier|public
name|void
name|simple
parameter_list|()
throws|throws
name|Exception
block|{
name|InputStream
name|is
init|=
operator|new
name|ByteArrayInputStream
argument_list|(
name|config1
operator|.
name|getBytes
argument_list|(
literal|"UTF-8"
argument_list|)
argument_list|)
decl_stmt|;
name|Configuration
name|config
init|=
name|Configurator
operator|.
name|parse
argument_list|(
name|is
argument_list|)
decl_stmt|;
name|ConfigurableObject
name|object
init|=
operator|new
name|ConfigurableObject
argument_list|(
name|config
argument_list|)
decl_stmt|;
name|assertNotNull
argument_list|(
name|object
operator|.
name|subclasses
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"A"
argument_list|,
name|object
operator|.
name|subclasses
operator|.
name|name
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"1"
argument_list|,
name|object
operator|.
name|subclasses
operator|.
name|version
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|object
operator|.
name|subclasses
operator|.
name|subconfs
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
comment|//XXX: assertEquals(2, object.subclasses.subconfs.size());
name|assertEquals
argument_list|(
literal|"1"
argument_list|,
name|object
operator|.
name|subclasses
operator|.
name|subconfs
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|getKey
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"secret1"
argument_list|,
name|object
operator|.
name|subclasses
operator|.
name|subconfs
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|getSecret
argument_list|()
argument_list|)
expr_stmt|;
comment|//XXX: assertEquals("2", object.subclasses.subconfs.get(1).getKey());
comment|//XXX: assertEquals("secret2", object.subclasses.subconfs.get(1).getSecret());
block|}
block|}
end_class

end_unit

