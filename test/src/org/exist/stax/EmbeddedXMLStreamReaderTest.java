begin_unit|revision:1.0.0;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * eXist Open Source Native XML Database  * Copyright (C) 2001-2018 The eXist Project  * http://exist-db.org  *  * This program is free software; you can redistribute it and/or  * modify it under the terms of the GNU Lesser General Public License  * as published by the Free Software Foundation; either version 2  * of the License, or (at your option) any later version.  *  * This program is distributed in the hope that it will be useful,  * but WITHOUT ANY WARRANTY; without even the implied warranty of  * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the  * GNU Lesser General Public License for more details.  *  * You should have received a copy of the GNU Lesser General Public  * License along with this library; if not, write to the Free Software  * Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA  02110-1301  USA  */
end_comment

begin_package
package|package
name|org
operator|.
name|exist
operator|.
name|stax
package|;
end_package

begin_import
import|import
name|com
operator|.
name|evolvedbinary
operator|.
name|j8fu
operator|.
name|tuple
operator|.
name|Tuple2
import|;
end_import

begin_import
import|import
name|com
operator|.
name|googlecode
operator|.
name|junittoolbox
operator|.
name|ParallelRunner
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|EXistException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|collections
operator|.
name|Collection
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|collections
operator|.
name|IndexInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|collections
operator|.
name|triggers
operator|.
name|TriggerException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|dom
operator|.
name|persistent
operator|.
name|LockedDocument
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|dom
operator|.
name|persistent
operator|.
name|NodeHandle
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|security
operator|.
name|PermissionDeniedException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|storage
operator|.
name|BrokerPool
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|storage
operator|.
name|DBBroker
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|storage
operator|.
name|lock
operator|.
name|Lock
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|storage
operator|.
name|lock
operator|.
name|ManagedCollectionLock
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|storage
operator|.
name|txn
operator|.
name|Txn
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|test
operator|.
name|ExistEmbeddedServer
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|util
operator|.
name|LockException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|xmldb
operator|.
name|XmldbURI
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|AfterClass
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|BeforeClass
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|ClassRule
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|runner
operator|.
name|RunWith
import|;
end_import

begin_import
import|import
name|org
operator|.
name|w3c
operator|.
name|dom
operator|.
name|Document
import|;
end_import

begin_import
import|import
name|org
operator|.
name|xml
operator|.
name|sax
operator|.
name|SAXException
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|xml
operator|.
name|stream
operator|.
name|XMLStreamConstants
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|xml
operator|.
name|stream
operator|.
name|XMLStreamException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|*
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|function
operator|.
name|Function
import|;
end_import

begin_import
import|import static
name|com
operator|.
name|evolvedbinary
operator|.
name|j8fu
operator|.
name|tuple
operator|.
name|Tuple
operator|.
name|Tuple
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertArrayEquals
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertNotNull
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|exist
operator|.
name|stax
operator|.
name|EmbeddedXMLStreamReaderTest
operator|.
name|NamedEvent
operator|.
name|*
import|;
end_import

begin_class
annotation|@
name|RunWith
argument_list|(
name|ParallelRunner
operator|.
name|class
argument_list|)
specifier|public
class|class
name|EmbeddedXMLStreamReaderTest
block|{
annotation|@
name|ClassRule
specifier|public
specifier|static
name|ExistEmbeddedServer
name|existEmbeddedServer
init|=
operator|new
name|ExistEmbeddedServer
argument_list|(
literal|true
argument_list|,
literal|true
argument_list|)
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|XmldbURI
name|TEST_MIXED_XML_COLLECTION
init|=
name|XmldbURI
operator|.
name|create
argument_list|(
literal|"/db/persistent-dom-mixed-test"
argument_list|)
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|XmldbURI
name|MIXED_XML_NAME
init|=
name|XmldbURI
operator|.
name|create
argument_list|(
literal|"mixed.xml"
argument_list|)
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|String
name|MIXED_XML
init|=
literal|"<!-- 1 -->\n"
operator|+
literal|"<x>\n"
operator|+
literal|"<!-- x.1 -->\n"
operator|+
literal|"<y1>text1<z1/><!-- y.1 --></y1>\n"
operator|+
literal|"<!-- x.2 -->\n"
operator|+
literal|"<y2>text2<z2/><!-- y.2 --></y2>\n"
operator|+
literal|"<!-- x.3 -->\n"
operator|+
literal|"</x>\n"
operator|+
literal|"<!-- 2 -->"
decl_stmt|;
comment|/**      * Attempts to read all nodes in the document starting from the first node of the document.      */
annotation|@
name|Test
specifier|public
name|void
name|allNodesInDocument_fromFirstChild
parameter_list|()
throws|throws
name|EXistException
throws|,
name|PermissionDeniedException
throws|,
name|IOException
throws|,
name|XMLStreamException
block|{
specifier|final
name|NamedEvent
index|[]
name|expected
init|=
block|{
name|COMMENT
block|,
comment|//<!-- 1 -->
name|START_ELEMENT
block|,
comment|//<x>
name|CHARACTERS
block|,
comment|// "\n  "
name|COMMENT
block|,
comment|//<!-- x.1 -->
name|CHARACTERS
block|,
comment|// "\n  "
name|START_ELEMENT
block|,
comment|//<y1>
name|CHARACTERS
block|,
comment|// text1
name|START_ELEMENT
block|,
comment|//<z1>
name|END_ELEMENT
block|,
comment|//</z1>
name|COMMENT
block|,
comment|//<!-- y.1 -->
name|END_ELEMENT
block|,
comment|//</y1>
name|CHARACTERS
block|,
comment|// "\n  "
name|COMMENT
block|,
comment|//<!-- x.2 -->
name|CHARACTERS
block|,
comment|// "\n  "
name|START_ELEMENT
block|,
comment|//<y2>
name|CHARACTERS
block|,
comment|// text2
name|START_ELEMENT
block|,
comment|//<z2>
name|END_ELEMENT
block|,
comment|//</z2>
name|COMMENT
block|,
comment|//<!-- y.2 -->
name|END_ELEMENT
block|,
comment|//</y2>
name|CHARACTERS
block|,
comment|// "\n  "
name|COMMENT
block|,
comment|//<!-- x.3 -->
name|CHARACTERS
block|,
comment|// "\n"
name|END_ELEMENT
block|,
comment|//</x>
name|COMMENT
comment|//<!-- 2 -->
block|}
decl_stmt|;
name|assertNodesIn
argument_list|(
name|expected
argument_list|,
name|document
lambda|->
operator|(
name|NodeHandle
operator|)
name|document
operator|.
name|getFirstChild
argument_list|()
argument_list|)
expr_stmt|;
block|}
comment|/**      * Attempts to read all nodes in the document element.      */
annotation|@
name|Test
specifier|public
name|void
name|allNodesInDocumentElement
parameter_list|()
throws|throws
name|EXistException
throws|,
name|PermissionDeniedException
throws|,
name|IOException
throws|,
name|XMLStreamException
block|{
specifier|final
name|NamedEvent
index|[]
name|expected
init|=
block|{
name|START_ELEMENT
block|,
comment|//<x>
name|CHARACTERS
block|,
comment|// "\n  "
name|COMMENT
block|,
comment|//<!-- x.1 -->
name|CHARACTERS
block|,
comment|// "\n  "
name|START_ELEMENT
block|,
comment|//<y1>
name|CHARACTERS
block|,
comment|// text1
name|START_ELEMENT
block|,
comment|//<z1>
name|END_ELEMENT
block|,
comment|//</z1>
name|COMMENT
block|,
comment|//<!-- y.1 -->
name|END_ELEMENT
block|,
comment|//</y1>
name|CHARACTERS
block|,
comment|// "\n  "
name|COMMENT
block|,
comment|//<!-- x.2 -->
name|CHARACTERS
block|,
comment|// "\n  "
name|START_ELEMENT
block|,
comment|//<y2>
name|CHARACTERS
block|,
comment|// text2
name|START_ELEMENT
block|,
comment|//<z2>
name|END_ELEMENT
block|,
comment|//</z2>
name|COMMENT
block|,
comment|//<!-- y.2 -->
name|END_ELEMENT
block|,
comment|//</y2>
name|CHARACTERS
block|,
comment|// "\n  "
name|COMMENT
block|,
comment|//<!-- x.3 -->
name|CHARACTERS
block|,
comment|// "\n"
name|END_ELEMENT
comment|//</x>
block|}
decl_stmt|;
name|assertNodesIn
argument_list|(
name|expected
argument_list|,
name|document
lambda|->
operator|(
name|NodeHandle
operator|)
name|document
operator|.
name|getDocumentElement
argument_list|()
argument_list|)
expr_stmt|;
block|}
comment|/**      * Attempts to read all nodes in the "y1" element.      */
annotation|@
name|Test
specifier|public
name|void
name|allNodesInY1Element
parameter_list|()
throws|throws
name|EXistException
throws|,
name|PermissionDeniedException
throws|,
name|IOException
throws|,
name|XMLStreamException
block|{
specifier|final
name|NamedEvent
index|[]
name|expected
init|=
block|{
name|START_ELEMENT
block|,
comment|//<y1>
name|CHARACTERS
block|,
comment|// text1
name|START_ELEMENT
block|,
comment|//<z1>
name|END_ELEMENT
block|,
comment|//</z1>
name|COMMENT
block|,
comment|//<!-- y.1 -->
name|END_ELEMENT
comment|//</y1>
block|}
decl_stmt|;
name|assertNodesIn
argument_list|(
name|expected
argument_list|,
name|document
lambda|->
operator|(
name|NodeHandle
operator|)
name|document
operator|.
name|getDocumentElement
argument_list|()
operator|.
name|getElementsByTagName
argument_list|(
literal|"y1"
argument_list|)
operator|.
name|item
argument_list|(
literal|0
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|/**      * Attempts to read all nodes in the "y2" element.      */
annotation|@
name|Test
specifier|public
name|void
name|allNodesInY2Element
parameter_list|()
throws|throws
name|EXistException
throws|,
name|PermissionDeniedException
throws|,
name|IOException
throws|,
name|XMLStreamException
block|{
specifier|final
name|NamedEvent
index|[]
name|expected
init|=
block|{
name|START_ELEMENT
block|,
comment|//<y2>
name|CHARACTERS
block|,
comment|// text2
name|START_ELEMENT
block|,
comment|//<z2>
name|END_ELEMENT
block|,
comment|//</z2>
name|COMMENT
block|,
comment|//<!-- y.2 -->
name|END_ELEMENT
comment|//</y2>
block|}
decl_stmt|;
name|assertNodesIn
argument_list|(
name|expected
argument_list|,
name|document
lambda|->
operator|(
name|NodeHandle
operator|)
name|document
operator|.
name|getDocumentElement
argument_list|()
operator|.
name|getElementsByTagName
argument_list|(
literal|"y2"
argument_list|)
operator|.
name|item
argument_list|(
literal|0
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|/**      * Attempts to read all nodes in the "z1" element.      */
annotation|@
name|Test
specifier|public
name|void
name|allNodesInZ1Element
parameter_list|()
throws|throws
name|EXistException
throws|,
name|PermissionDeniedException
throws|,
name|IOException
throws|,
name|XMLStreamException
block|{
specifier|final
name|NamedEvent
index|[]
name|expected
init|=
block|{
name|START_ELEMENT
block|,
comment|//<z1>
name|END_ELEMENT
comment|//</z1>
block|}
decl_stmt|;
name|assertNodesIn
argument_list|(
name|expected
argument_list|,
name|document
lambda|->
operator|(
name|NodeHandle
operator|)
name|document
operator|.
name|getDocumentElement
argument_list|()
operator|.
name|getElementsByTagName
argument_list|(
literal|"z1"
argument_list|)
operator|.
name|item
argument_list|(
literal|0
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|/**      * Attempts to read all nodes in the "z1" element.      */
annotation|@
name|Test
specifier|public
name|void
name|allNodesInZ2Element
parameter_list|()
throws|throws
name|EXistException
throws|,
name|PermissionDeniedException
throws|,
name|IOException
throws|,
name|XMLStreamException
block|{
specifier|final
name|NamedEvent
index|[]
name|expected
init|=
block|{
name|START_ELEMENT
block|,
comment|//<z1>
name|END_ELEMENT
comment|//</z1>
block|}
decl_stmt|;
name|assertNodesIn
argument_list|(
name|expected
argument_list|,
name|document
lambda|->
operator|(
name|NodeHandle
operator|)
name|document
operator|.
name|getDocumentElement
argument_list|()
operator|.
name|getElementsByTagName
argument_list|(
literal|"z1"
argument_list|)
operator|.
name|item
argument_list|(
literal|0
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|/**      * Attempts to read all nodes in the document element.      */
annotation|@
name|Test
specifier|public
name|void
name|allNodesInDocumentElement_fromFirstChild
parameter_list|()
throws|throws
name|EXistException
throws|,
name|PermissionDeniedException
throws|,
name|IOException
throws|,
name|XMLStreamException
block|{
specifier|final
name|NamedEvent
index|[]
name|expected
init|=
block|{
name|CHARACTERS
block|,
comment|// "\n  "
name|COMMENT
block|,
comment|//<!-- x.1 -->
name|CHARACTERS
block|,
comment|// "\n  "
name|START_ELEMENT
block|,
comment|//<y1>
name|CHARACTERS
block|,
comment|// text1
name|START_ELEMENT
block|,
comment|//<z1>
name|END_ELEMENT
block|,
comment|//</z1>
name|COMMENT
block|,
comment|//<!-- y.1 -->
name|END_ELEMENT
block|,
comment|//</y1>
name|CHARACTERS
block|,
comment|// "\n  "
name|COMMENT
block|,
comment|//<!-- x.2 -->
name|CHARACTERS
block|,
comment|// "\n  "
name|START_ELEMENT
block|,
comment|//<y2>
name|CHARACTERS
block|,
comment|// text2
name|START_ELEMENT
block|,
comment|//<z2>
name|END_ELEMENT
block|,
comment|//</z2>
name|COMMENT
block|,
comment|//<!-- y.2 -->
name|END_ELEMENT
block|,
comment|//</y2>
name|CHARACTERS
block|,
comment|// "\n  "
name|COMMENT
block|,
comment|//<!-- x.3 -->
name|CHARACTERS
comment|// "\n"
block|}
decl_stmt|;
name|assertNodesIn
argument_list|(
name|expected
argument_list|,
name|document
lambda|->
operator|(
name|NodeHandle
operator|)
name|document
operator|.
name|getDocumentElement
argument_list|()
operator|.
name|getFirstChild
argument_list|()
argument_list|)
expr_stmt|;
block|}
comment|/**      * Attempts to read all nodes in the document element.      */
annotation|@
name|Test
specifier|public
name|void
name|allNodesInDocumentElement_fromY1
parameter_list|()
throws|throws
name|EXistException
throws|,
name|PermissionDeniedException
throws|,
name|IOException
throws|,
name|XMLStreamException
block|{
specifier|final
name|NamedEvent
index|[]
name|expected
init|=
block|{
name|START_ELEMENT
block|,
comment|//<y1>
name|CHARACTERS
block|,
comment|// text1
name|START_ELEMENT
block|,
comment|//<z1>
name|END_ELEMENT
block|,
comment|//</z1>
name|COMMENT
block|,
comment|//<!-- y.1 -->
name|END_ELEMENT
block|,
comment|//</y1>
name|CHARACTERS
block|,
comment|// "\n  "
name|COMMENT
block|,
comment|//<!-- x.2 -->
name|CHARACTERS
block|,
comment|// "\n  "
name|START_ELEMENT
block|,
comment|//<y2>
name|CHARACTERS
block|,
comment|// text2
name|START_ELEMENT
block|,
comment|//<z2>
name|END_ELEMENT
block|,
comment|//</z2>
name|COMMENT
block|,
comment|//<!-- y.2 -->
name|END_ELEMENT
block|,
comment|//</y2>
name|CHARACTERS
block|,
comment|// "\n  "
name|COMMENT
block|,
comment|//<!-- x.3 -->
name|CHARACTERS
comment|// "\n"
block|}
decl_stmt|;
name|assertNodesIn
argument_list|(
name|expected
argument_list|,
name|document
lambda|->
operator|(
name|NodeHandle
operator|)
name|document
operator|.
name|getDocumentElement
argument_list|()
operator|.
name|getElementsByTagName
argument_list|(
literal|"y1"
argument_list|)
operator|.
name|item
argument_list|(
literal|0
argument_list|)
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|assertNodesIn
parameter_list|(
specifier|final
name|NamedEvent
index|[]
name|expected
parameter_list|,
specifier|final
name|Function
argument_list|<
name|Document
argument_list|,
name|NodeHandle
argument_list|>
name|initialNodeFun
parameter_list|)
throws|throws
name|EXistException
throws|,
name|PermissionDeniedException
throws|,
name|IOException
throws|,
name|XMLStreamException
block|{
specifier|final
name|BrokerPool
name|pool
init|=
name|existEmbeddedServer
operator|.
name|getBrokerPool
argument_list|()
decl_stmt|;
try|try
init|(
specifier|final
name|DBBroker
name|broker
init|=
name|pool
operator|.
name|get
argument_list|(
name|Optional
operator|.
name|of
argument_list|(
name|pool
operator|.
name|getSecurityManager
argument_list|()
operator|.
name|getSystemSubject
argument_list|()
argument_list|)
argument_list|)
init|;
specifier|final
name|Txn
name|transaction
init|=
name|pool
operator|.
name|getTransactionManager
argument_list|()
operator|.
name|beginTransaction
argument_list|()
init|)
block|{
try|try
init|(
specifier|final
name|LockedDocument
name|lockedDocument
init|=
name|broker
operator|.
name|getXMLResource
argument_list|(
name|TEST_MIXED_XML_COLLECTION
operator|.
name|append
argument_list|(
name|MIXED_XML_NAME
argument_list|)
argument_list|,
name|Lock
operator|.
name|LockMode
operator|.
name|WRITE_LOCK
argument_list|)
init|)
block|{
name|assertNotNull
argument_list|(
name|lockedDocument
argument_list|)
expr_stmt|;
specifier|final
name|Document
name|document
init|=
name|lockedDocument
operator|.
name|getDocument
argument_list|()
decl_stmt|;
name|assertNotNull
argument_list|(
name|document
argument_list|)
expr_stmt|;
specifier|final
name|NodeHandle
name|initialNode
init|=
name|initialNodeFun
operator|.
name|apply
argument_list|(
name|document
argument_list|)
decl_stmt|;
specifier|final
name|IEmbeddedXMLStreamReader
name|xmlStreamReader
init|=
name|broker
operator|.
name|getXMLStreamReader
argument_list|(
name|initialNode
argument_list|,
literal|false
argument_list|)
decl_stmt|;
specifier|final
name|NamedEvent
index|[]
name|actual
init|=
name|readAllEvents
argument_list|(
name|xmlStreamReader
argument_list|)
decl_stmt|;
name|assertArrayEquals
argument_list|(
name|formatExpectedActual
argument_list|(
name|expected
argument_list|,
name|actual
argument_list|)
argument_list|,
name|expected
argument_list|,
name|actual
argument_list|)
expr_stmt|;
block|}
name|transaction
operator|.
name|commit
argument_list|()
expr_stmt|;
block|}
block|}
specifier|private
name|String
name|formatExpectedActual
parameter_list|(
specifier|final
name|NamedEvent
index|[]
name|expected
parameter_list|,
specifier|final
name|NamedEvent
index|[]
name|actual
parameter_list|)
block|{
specifier|final
name|int
name|maxLen
init|=
name|Math
operator|.
name|max
argument_list|(
name|expected
operator|.
name|length
argument_list|,
name|actual
operator|.
name|length
argument_list|)
decl_stmt|;
specifier|final
name|int
name|maxIdxLen
init|=
name|String
operator|.
name|valueOf
argument_list|(
name|maxLen
argument_list|)
operator|.
name|length
argument_list|()
decl_stmt|;
specifier|final
name|int
name|maxNameLen
init|=
name|Math
operator|.
name|max
argument_list|(
name|maxNameLen
argument_list|(
name|expected
argument_list|)
argument_list|,
name|maxNameLen
argument_list|(
name|actual
argument_list|)
argument_list|)
decl_stmt|;
specifier|final
name|String
name|EOL
init|=
name|System
operator|.
name|getProperty
argument_list|(
literal|"line.separator"
argument_list|)
decl_stmt|;
specifier|final
name|StringBuilder
name|tableBuilder
init|=
operator|new
name|StringBuilder
argument_list|()
decl_stmt|;
name|append
argument_list|(
name|tableBuilder
argument_list|,
literal|"#"
argument_list|,
name|maxIdxLen
argument_list|)
operator|.
name|append
argument_list|(
literal|" | "
argument_list|)
expr_stmt|;
name|append
argument_list|(
name|tableBuilder
argument_list|,
literal|"Expected"
argument_list|,
name|maxNameLen
argument_list|)
operator|.
name|append
argument_list|(
literal|" | Actual"
argument_list|)
operator|.
name|append
argument_list|(
name|EOL
argument_list|)
expr_stmt|;
name|appendRep
argument_list|(
name|tableBuilder
argument_list|,
literal|'-'
argument_list|,
name|maxIdxLen
operator|+
literal|3
operator|+
name|maxNameLen
operator|+
literal|9
argument_list|)
operator|.
name|append
argument_list|(
name|EOL
argument_list|)
expr_stmt|;
name|int
name|diffIdx
init|=
operator|-
literal|1
decl_stmt|;
comment|// index of where the arrays first differ
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|maxLen
condition|;
name|i
operator|++
control|)
block|{
name|append
argument_list|(
name|tableBuilder
argument_list|,
name|String
operator|.
name|valueOf
argument_list|(
name|i
argument_list|)
argument_list|,
name|maxIdxLen
argument_list|)
operator|.
name|append
argument_list|(
literal|" | "
argument_list|)
expr_stmt|;
specifier|final
name|String
name|expectedStr
init|=
name|i
operator|<
name|expected
operator|.
name|length
condition|?
name|expected
index|[
name|i
index|]
operator|.
name|name
argument_list|()
else|:
literal|"null"
decl_stmt|;
name|append
argument_list|(
name|tableBuilder
argument_list|,
name|expectedStr
argument_list|,
name|maxNameLen
argument_list|)
expr_stmt|;
name|tableBuilder
operator|.
name|append
argument_list|(
literal|" | "
argument_list|)
expr_stmt|;
specifier|final
name|String
name|actualStr
init|=
name|i
operator|<
name|actual
operator|.
name|length
condition|?
name|actual
index|[
name|i
index|]
operator|.
name|name
argument_list|()
else|:
literal|"null"
decl_stmt|;
name|tableBuilder
operator|.
name|append
argument_list|(
name|actualStr
argument_list|)
expr_stmt|;
name|tableBuilder
operator|.
name|append
argument_list|(
name|EOL
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|expectedStr
operator|.
name|equals
argument_list|(
name|actualStr
argument_list|)
operator|&&
name|diffIdx
operator|==
operator|-
literal|1
condition|)
block|{
name|diffIdx
operator|=
name|i
expr_stmt|;
block|}
block|}
specifier|final
name|StringBuilder
name|builder
init|=
operator|new
name|StringBuilder
argument_list|(
literal|"Expected and actual arrays differ starting at index: "
argument_list|)
operator|.
name|append
argument_list|(
name|diffIdx
argument_list|)
operator|.
name|append
argument_list|(
name|EOL
argument_list|)
operator|.
name|append
argument_list|(
name|tableBuilder
argument_list|)
decl_stmt|;
return|return
name|builder
operator|.
name|toString
argument_list|()
return|;
block|}
specifier|private
name|StringBuilder
name|append
parameter_list|(
specifier|final
name|StringBuilder
name|builder
parameter_list|,
specifier|final
name|String
name|str
parameter_list|,
specifier|final
name|int
name|fixedLen
parameter_list|)
block|{
name|builder
operator|.
name|append
argument_list|(
name|str
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
name|str
operator|.
name|length
argument_list|()
init|;
name|i
operator|<
name|fixedLen
condition|;
name|i
operator|++
control|)
block|{
name|builder
operator|.
name|append
argument_list|(
literal|' '
argument_list|)
expr_stmt|;
block|}
return|return
name|builder
return|;
block|}
specifier|private
name|StringBuilder
name|appendRep
parameter_list|(
specifier|final
name|StringBuilder
name|builder
parameter_list|,
specifier|final
name|char
name|c
parameter_list|,
specifier|final
name|int
name|fixedLen
parameter_list|)
block|{
specifier|final
name|char
index|[]
name|tmp
init|=
operator|new
name|char
index|[
name|fixedLen
index|]
decl_stmt|;
name|Arrays
operator|.
name|fill
argument_list|(
name|tmp
argument_list|,
name|c
argument_list|)
expr_stmt|;
name|builder
operator|.
name|append
argument_list|(
name|tmp
argument_list|)
expr_stmt|;
return|return
name|builder
return|;
block|}
specifier|private
name|int
name|maxNameLen
parameter_list|(
specifier|final
name|NamedEvent
index|[]
name|namedEvents
parameter_list|)
block|{
name|int
name|len
init|=
literal|0
decl_stmt|;
for|for
control|(
specifier|final
name|NamedEvent
name|namedEvent
range|:
name|namedEvents
control|)
block|{
specifier|final
name|int
name|nameLen
init|=
name|namedEvent
operator|.
name|name
argument_list|()
operator|.
name|length
argument_list|()
decl_stmt|;
if|if
condition|(
name|nameLen
operator|>
name|len
condition|)
block|{
name|len
operator|=
name|nameLen
expr_stmt|;
block|}
block|}
return|return
name|len
return|;
block|}
specifier|private
name|NamedEvent
index|[]
name|readAllEvents
parameter_list|(
specifier|final
name|IEmbeddedXMLStreamReader
name|xmlStreamReader
parameter_list|)
throws|throws
name|XMLStreamException
block|{
specifier|final
name|List
argument_list|<
name|NamedEvent
argument_list|>
name|events
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
while|while
condition|(
name|xmlStreamReader
operator|.
name|hasNext
argument_list|()
condition|)
block|{
name|events
operator|.
name|add
argument_list|(
name|NamedEvent
operator|.
name|fromEvent
argument_list|(
name|xmlStreamReader
operator|.
name|next
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
return|return
name|events
operator|.
name|toArray
argument_list|(
operator|new
name|NamedEvent
index|[
name|events
operator|.
name|size
argument_list|()
index|]
argument_list|)
return|;
block|}
annotation|@
name|BeforeClass
specifier|public
specifier|static
name|void
name|setup
parameter_list|()
throws|throws
name|EXistException
throws|,
name|LockException
throws|,
name|SAXException
throws|,
name|PermissionDeniedException
throws|,
name|IOException
block|{
specifier|final
name|BrokerPool
name|pool
init|=
name|existEmbeddedServer
operator|.
name|getBrokerPool
argument_list|()
decl_stmt|;
try|try
init|(
specifier|final
name|DBBroker
name|broker
init|=
name|pool
operator|.
name|get
argument_list|(
name|Optional
operator|.
name|of
argument_list|(
name|pool
operator|.
name|getSecurityManager
argument_list|()
operator|.
name|getSystemSubject
argument_list|()
argument_list|)
argument_list|)
init|;
specifier|final
name|Txn
name|transaction
init|=
name|pool
operator|.
name|getTransactionManager
argument_list|()
operator|.
name|beginTransaction
argument_list|()
init|)
block|{
name|createCollection
argument_list|(
name|broker
argument_list|,
name|transaction
argument_list|,
name|TEST_MIXED_XML_COLLECTION
argument_list|,
name|Tuple
argument_list|(
name|MIXED_XML_NAME
argument_list|,
name|MIXED_XML
argument_list|)
argument_list|)
expr_stmt|;
name|transaction
operator|.
name|commit
argument_list|()
expr_stmt|;
block|}
block|}
annotation|@
name|AfterClass
specifier|public
specifier|static
name|void
name|cleanup
parameter_list|()
throws|throws
name|EXistException
throws|,
name|PermissionDeniedException
throws|,
name|IOException
throws|,
name|TriggerException
block|{
specifier|final
name|BrokerPool
name|pool
init|=
name|existEmbeddedServer
operator|.
name|getBrokerPool
argument_list|()
decl_stmt|;
try|try
init|(
specifier|final
name|DBBroker
name|broker
init|=
name|pool
operator|.
name|get
argument_list|(
name|Optional
operator|.
name|of
argument_list|(
name|pool
operator|.
name|getSecurityManager
argument_list|()
operator|.
name|getSystemSubject
argument_list|()
argument_list|)
argument_list|)
init|;
specifier|final
name|Txn
name|transaction
init|=
name|pool
operator|.
name|getTransactionManager
argument_list|()
operator|.
name|beginTransaction
argument_list|()
init|)
block|{
name|deleteCollection
argument_list|(
name|broker
argument_list|,
name|transaction
argument_list|,
name|TEST_MIXED_XML_COLLECTION
argument_list|)
expr_stmt|;
name|transaction
operator|.
name|commit
argument_list|()
expr_stmt|;
block|}
block|}
specifier|private
specifier|static
name|void
name|createCollection
parameter_list|(
specifier|final
name|DBBroker
name|broker
parameter_list|,
specifier|final
name|Txn
name|transaction
parameter_list|,
specifier|final
name|XmldbURI
name|collectionUri
parameter_list|,
specifier|final
name|Tuple2
argument_list|<
name|XmldbURI
argument_list|,
name|String
argument_list|>
modifier|...
name|docs
parameter_list|)
throws|throws
name|PermissionDeniedException
throws|,
name|IOException
throws|,
name|SAXException
throws|,
name|LockException
throws|,
name|EXistException
block|{
try|try
init|(
specifier|final
name|ManagedCollectionLock
name|collectionLock
init|=
name|broker
operator|.
name|getBrokerPool
argument_list|()
operator|.
name|getLockManager
argument_list|()
operator|.
name|acquireCollectionWriteLock
argument_list|(
name|collectionUri
argument_list|)
init|)
block|{
specifier|final
name|Collection
name|collection
init|=
name|broker
operator|.
name|getOrCreateCollection
argument_list|(
name|transaction
argument_list|,
name|collectionUri
argument_list|)
decl_stmt|;
name|broker
operator|.
name|saveCollection
argument_list|(
name|transaction
argument_list|,
name|collection
argument_list|)
expr_stmt|;
for|for
control|(
specifier|final
name|Tuple2
argument_list|<
name|XmldbURI
argument_list|,
name|String
argument_list|>
name|doc
range|:
name|docs
control|)
block|{
name|storeXml
argument_list|(
name|broker
argument_list|,
name|transaction
argument_list|,
name|collection
argument_list|,
name|doc
operator|.
name|_1
argument_list|,
name|doc
operator|.
name|_2
argument_list|)
expr_stmt|;
block|}
block|}
block|}
specifier|private
specifier|static
name|void
name|storeXml
parameter_list|(
specifier|final
name|DBBroker
name|broker
parameter_list|,
specifier|final
name|Txn
name|transaction
parameter_list|,
specifier|final
name|Collection
name|collection
parameter_list|,
specifier|final
name|XmldbURI
name|name
parameter_list|,
specifier|final
name|String
name|xml
parameter_list|)
throws|throws
name|LockException
throws|,
name|SAXException
throws|,
name|PermissionDeniedException
throws|,
name|EXistException
throws|,
name|IOException
block|{
specifier|final
name|IndexInfo
name|indexInfo
init|=
name|collection
operator|.
name|validateXMLResource
argument_list|(
name|transaction
argument_list|,
name|broker
argument_list|,
name|name
argument_list|,
name|xml
argument_list|)
decl_stmt|;
name|collection
operator|.
name|store
argument_list|(
name|transaction
argument_list|,
name|broker
argument_list|,
name|indexInfo
argument_list|,
name|xml
argument_list|)
expr_stmt|;
block|}
specifier|private
specifier|static
name|void
name|deleteCollection
parameter_list|(
specifier|final
name|DBBroker
name|broker
parameter_list|,
specifier|final
name|Txn
name|transaction
parameter_list|,
specifier|final
name|XmldbURI
name|collectionUri
parameter_list|)
throws|throws
name|PermissionDeniedException
throws|,
name|IOException
throws|,
name|TriggerException
block|{
try|try
init|(
specifier|final
name|Collection
name|collection
init|=
name|broker
operator|.
name|openCollection
argument_list|(
name|collectionUri
argument_list|,
name|Lock
operator|.
name|LockMode
operator|.
name|WRITE_LOCK
argument_list|)
init|)
block|{
if|if
condition|(
name|collection
operator|!=
literal|null
condition|)
block|{
name|broker
operator|.
name|removeCollection
argument_list|(
name|transaction
argument_list|,
name|collection
argument_list|)
expr_stmt|;
block|}
block|}
block|}
enum|enum
name|NamedEvent
block|{
name|START_ELEMENT
argument_list|(
name|XMLStreamConstants
operator|.
name|START_ELEMENT
argument_list|)
block|,
name|END_ELEMENT
argument_list|(
name|XMLStreamConstants
operator|.
name|END_ELEMENT
argument_list|)
block|,
name|PROCESSING_INSTRUCTION
argument_list|(
name|XMLStreamConstants
operator|.
name|PROCESSING_INSTRUCTION
argument_list|)
block|,
name|CHARACTERS
argument_list|(
name|XMLStreamConstants
operator|.
name|CHARACTERS
argument_list|)
block|,
name|COMMENT
argument_list|(
name|XMLStreamConstants
operator|.
name|COMMENT
argument_list|)
block|,
name|SPACE
argument_list|(
name|XMLStreamConstants
operator|.
name|SPACE
argument_list|)
block|,
name|START_DOCUMENT
argument_list|(
name|XMLStreamConstants
operator|.
name|START_DOCUMENT
argument_list|)
block|,
name|END_DOCUMENT
argument_list|(
name|XMLStreamConstants
operator|.
name|END_DOCUMENT
argument_list|)
block|,
name|ENTITY_REFERENCE
argument_list|(
name|XMLStreamConstants
operator|.
name|ENTITY_REFERENCE
argument_list|)
block|,
name|ATTRIBUTE
argument_list|(
name|XMLStreamConstants
operator|.
name|ATTRIBUTE
argument_list|)
block|,
name|DTD
argument_list|(
name|XMLStreamConstants
operator|.
name|DTD
argument_list|)
block|,
name|CDATA
argument_list|(
name|XMLStreamConstants
operator|.
name|CDATA
argument_list|)
block|,
name|NAMESPACE
argument_list|(
name|XMLStreamConstants
operator|.
name|NAMESPACE
argument_list|)
block|,
name|NOTATION_DECLARATION
argument_list|(
name|XMLStreamConstants
operator|.
name|NOTATION_DECLARATION
argument_list|)
block|,
name|ENTITY_DECLARATION
argument_list|(
name|XMLStreamConstants
operator|.
name|ENTITY_DECLARATION
argument_list|)
block|;
specifier|private
specifier|final
name|int
name|event
decl_stmt|;
name|NamedEvent
parameter_list|(
specifier|final
name|int
name|event
parameter_list|)
block|{
name|this
operator|.
name|event
operator|=
name|event
expr_stmt|;
block|}
specifier|public
name|int
name|getEvent
parameter_list|()
block|{
return|return
name|event
return|;
block|}
specifier|public
specifier|static
name|NamedEvent
name|fromEvent
parameter_list|(
specifier|final
name|int
name|event
parameter_list|)
block|{
for|for
control|(
specifier|final
name|NamedEvent
name|namedEvent
range|:
name|NamedEvent
operator|.
name|values
argument_list|()
control|)
block|{
if|if
condition|(
name|namedEvent
operator|.
name|event
operator|==
name|event
condition|)
block|{
return|return
name|namedEvent
return|;
block|}
block|}
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"No named event for XMLStreamConstants event: "
operator|+
name|event
argument_list|)
throw|;
block|}
block|}
block|}
end_class

end_unit

