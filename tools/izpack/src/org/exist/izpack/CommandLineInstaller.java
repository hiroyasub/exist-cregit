begin_unit|revision:1.0.0;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * eXist Open Source Native XML Database  * Copyright (C) 2005-2009 The eXist Project  * http://exist-db.org  *  * This program is free software; you can redistribute it and/or  * modify it under the terms of the GNU Lesser General Public License  * as published by the Free Software Foundation; either version 2  * of the License, or (at your option) any later version.  *    * This program is distributed in the hope that it will be useful,  * but WITHOUT ANY WARRANTY; without even the implied warranty of  * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the  * GNU Lesser General Public License for more details.  *   * You should have received a copy of the GNU Lesser General Public License  * along with this program; if not, write to the Free Software Foundation  * Inc., 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301, USA.  *    *  $Id$  */
end_comment

begin_package
package|package
name|org
operator|.
name|exist
operator|.
name|izpack
package|;
end_package

begin_import
import|import
name|com
operator|.
name|izforge
operator|.
name|izpack
operator|.
name|installer
operator|.
name|AutomatedInstaller
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|File
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|FileWriter
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|Writer
import|;
end_import

begin_comment
comment|/**  * @author wolf  *  */
end_comment

begin_class
specifier|public
class|class
name|CommandLineInstaller
block|{
specifier|private
specifier|final
specifier|static
name|String
name|HELP_OPT
init|=
literal|"-h"
decl_stmt|;
specifier|private
specifier|final
specifier|static
name|String
name|PATH_OPT
init|=
literal|"-p"
decl_stmt|;
comment|/** 	 *  	 */
specifier|public
name|CommandLineInstaller
parameter_list|()
block|{
block|}
specifier|protected
name|void
name|execute
parameter_list|(
name|String
index|[]
name|args
parameter_list|)
throws|throws
name|Exception
block|{
if|if
condition|(
name|args
operator|.
name|length
operator|==
literal|0
operator|&&
operator|!
name|System
operator|.
name|getProperty
argument_list|(
literal|"os.name"
argument_list|)
operator|.
name|startsWith
argument_list|(
literal|"OpenServer"
argument_list|)
condition|)
block|{
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"\neXist Installation"
argument_list|)
expr_stmt|;
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"------------------------"
argument_list|)
expr_stmt|;
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"Using GUI mode ..."
argument_list|)
expr_stmt|;
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"On a headless system, add parameter -p install-path"
argument_list|)
expr_stmt|;
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"to install without GUI."
argument_list|)
expr_stmt|;
comment|// can't load the GUIInstaller class on headless machines,
comment|// so we use Class.forName to force lazy loading.
name|Class
operator|.
name|forName
argument_list|(
literal|"com.izforge.izpack.installer.GUIInstaller"
argument_list|)
operator|.
name|newInstance
argument_list|()
expr_stmt|;
block|}
else|else
block|{
name|String
name|installPath
init|=
name|System
operator|.
name|getProperty
argument_list|(
literal|"user.home"
argument_list|)
operator|+
literal|"/eXist"
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|args
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
if|if
condition|(
name|args
index|[
name|i
index|]
operator|.
name|equals
argument_list|(
name|HELP_OPT
argument_list|)
condition|)
block|{
name|printHelp
argument_list|()
expr_stmt|;
return|return;
block|}
if|else if
condition|(
name|args
index|[
name|i
index|]
operator|.
name|equals
argument_list|(
name|PATH_OPT
argument_list|)
condition|)
block|{
if|if
condition|(
operator|++
name|i
operator|==
name|args
operator|.
name|length
condition|)
block|{
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"Option -p requires an argument: the path to the directory "
operator|+
literal|"where you want to have eXist installed."
argument_list|)
expr_stmt|;
return|return;
block|}
name|installPath
operator|=
name|args
index|[
name|i
index|]
expr_stmt|;
block|}
block|}
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"Installing into directory: "
operator|+
name|installPath
argument_list|)
expr_stmt|;
name|String
name|filename
init|=
name|File
operator|.
name|createTempFile
argument_list|(
literal|"inst"
argument_list|,
literal|".xml"
argument_list|)
operator|.
name|getAbsolutePath
argument_list|()
decl_stmt|;
name|Writer
name|w
init|=
operator|new
name|FileWriter
argument_list|(
name|filename
argument_list|)
decl_stmt|;
name|w
operator|.
name|write
argument_list|(
literal|"<AutomatedInstallation langpack=\"eng\">\n"
argument_list|)
expr_stmt|;
name|w
operator|.
name|write
argument_list|(
literal|"<com.izforge.izpack.panels.HelloPanel/>\n"
operator|+
literal|"<com.izforge.izpack.panels.JDKPathPanel>\n"
operator|+
literal|"<JDKPath>"
operator|+
name|System
operator|.
name|getProperty
argument_list|(
literal|"java.home"
argument_list|)
operator|+
literal|"</JDKPath>\n"
operator|+
literal|"</com.izforge.izpack.panels.JDKPathPanel>\n"
operator|+
literal|"<com.izforge.izpack.panels.PacksPanel>\n"
operator|+
literal|"<pack name=\"core\" index=\"0\" selected=\"true\"/>\n"
operator|+
literal|"<pack name=\"sources\" index=\"1\" selected=\"true\"/>\n"
operator|+
literal|"<pack name=\"javadoc\" index=\"2\" selected=\"true\"/>\n"
operator|+
literal|"</com.izforge.izpack.panels.PacksPanel>"
argument_list|)
expr_stmt|;
name|w
operator|.
name|write
argument_list|(
literal|"<com.izforge.izpack.panels.TargetPanel>\n"
operator|+
literal|"<installpath>"
operator|+
name|installPath
operator|+
literal|"</installpath>\n"
operator|+
literal|"</com.izforge.izpack.panels.TargetPanel>\n"
argument_list|)
expr_stmt|;
name|w
operator|.
name|write
argument_list|(
literal|"<com.izforge.izpack.panels.UserInputPanel>\n"
operator|+
literal|"<userInput>\n"
operator|+
literal|"<entry key=\"adminPasswd\" value=\"\"/>\n"
operator|+
literal|"</userInput>\n"
operator|+
literal|"</com.izforge.izpack.panels.UserInputPanel>"
argument_list|)
expr_stmt|;
name|w
operator|.
name|write
argument_list|(
literal|"<com.izforge.izpack.panels.InstallPanel />\n"
operator|+
literal|"<com.izforge.izpack.panels.ShortcutPanel>\n"
operator|+
literal|"<programGroup/>"
operator|+
literal|"</com.izforge.izpack.panels.ShortcutPanel>\n"
operator|+
literal|"<com.izforge.izpack.panels.ProcessPanel />\n"
operator|+
literal|"<com.izforge.izpack.panels.HTMLInfoPanel />\n"
operator|+
literal|"<com.izforge.izpack.panels.FinishPanel />"
argument_list|)
expr_stmt|;
name|w
operator|.
name|write
argument_list|(
literal|"</AutomatedInstallation>"
argument_list|)
expr_stmt|;
name|w
operator|.
name|close
argument_list|()
expr_stmt|;
name|EXistAutomatedInstaller
name|installer
init|=
operator|new
name|EXistAutomatedInstaller
argument_list|(
name|filename
argument_list|)
decl_stmt|;
name|installer
operator|.
name|run
argument_list|()
expr_stmt|;
operator|new
name|File
argument_list|(
name|filename
argument_list|)
operator|.
name|delete
argument_list|()
expr_stmt|;
block|}
block|}
specifier|private
specifier|static
name|void
name|printHelp
parameter_list|()
block|{
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"Usage: java "
operator|+
name|CommandLineInstaller
operator|.
name|class
operator|.
name|getName
argument_list|()
operator|+
literal|" [options]"
argument_list|)
expr_stmt|;
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"Options:"
argument_list|)
expr_stmt|;
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"    -p install-path"
argument_list|)
expr_stmt|;
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"        Install eXist with default options and no GUI into directory 'install-path'"
argument_list|)
expr_stmt|;
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"    -h"
argument_list|)
expr_stmt|;
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"        Print this help message and exit"
argument_list|)
expr_stmt|;
block|}
comment|/**      * Workaround: AutomatedInstaller.doInstall is protected, so we can't call it      * directly. Instead we have to create a subclass which calls it.      */
specifier|private
class|class
name|EXistAutomatedInstaller
extends|extends
name|AutomatedInstaller
block|{
specifier|public
name|EXistAutomatedInstaller
parameter_list|(
name|String
name|string
parameter_list|)
throws|throws
name|Exception
block|{
name|super
argument_list|(
name|string
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|run
parameter_list|()
throws|throws
name|Exception
block|{
name|super
operator|.
name|doInstall
argument_list|()
expr_stmt|;
block|}
block|}
comment|/** 	 * @param args 	 */
specifier|public
specifier|static
name|void
name|main
parameter_list|(
name|String
index|[]
name|args
parameter_list|)
block|{
name|CommandLineInstaller
name|inst
init|=
operator|new
name|CommandLineInstaller
argument_list|()
decl_stmt|;
try|try
block|{
name|inst
operator|.
name|execute
argument_list|(
name|args
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|System
operator|.
name|err
operator|.
name|println
argument_list|(
literal|"Installer exited with an error: "
operator|+
name|e
operator|.
name|getMessage
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
block|}
end_class

end_unit

