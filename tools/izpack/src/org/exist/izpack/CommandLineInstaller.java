begin_unit|revision:1.0.0;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  *  eXist Open Source Native XML Database  *  Copyright (C) 2001-04 The eXist Team  *  *  http://exist-db.org  *    *  This program is free software; you can redistribute it and/or  *  modify it under the terms of the GNU Lesser General Public License  *  as published by the Free Software Foundation; either version 2  *  of the License, or (at your option) any later version.  *    *  This program is distributed in the hope that it will be useful,  *  but WITHOUT ANY WARRANTY; without even the implied warranty of  *  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the  *  GNU Lesser General Public License for more details.  *    *  You should have received a copy of the GNU Lesser General Public License  *  along with this program; if not, write to the Free Software  *  Foundation, Inc., 675 Mass Ave, Cambridge, MA 02139, USA.  *    *  $Id$  */
end_comment

begin_package
package|package
name|org
operator|.
name|exist
operator|.
name|izpack
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|BufferedWriter
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|File
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|FileWriter
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|Writer
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|avalon
operator|.
name|excalibur
operator|.
name|cli
operator|.
name|CLArgsParser
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|avalon
operator|.
name|excalibur
operator|.
name|cli
operator|.
name|CLOption
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|avalon
operator|.
name|excalibur
operator|.
name|cli
operator|.
name|CLOptionDescriptor
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|avalon
operator|.
name|excalibur
operator|.
name|cli
operator|.
name|CLUtil
import|;
end_import

begin_import
import|import
name|com
operator|.
name|izforge
operator|.
name|izpack
operator|.
name|installer
operator|.
name|AutomatedInstaller
import|;
end_import

begin_comment
comment|/**  * @author wolf  *  */
end_comment

begin_class
specifier|public
class|class
name|CommandLineInstaller
block|{
specifier|private
specifier|final
specifier|static
name|int
name|HELP_OPT
init|=
literal|'h'
decl_stmt|;
specifier|private
specifier|final
specifier|static
name|int
name|PATH_OPT
init|=
literal|'p'
decl_stmt|;
specifier|private
specifier|final
specifier|static
name|CLOptionDescriptor
name|OPTIONS
index|[]
init|=
operator|new
name|CLOptionDescriptor
index|[]
block|{
operator|new
name|CLOptionDescriptor
argument_list|(
literal|"help"
argument_list|,
name|CLOptionDescriptor
operator|.
name|ARGUMENT_DISALLOWED
argument_list|,
name|HELP_OPT
argument_list|,
literal|"print help on command line options and exit."
argument_list|)
block|,
operator|new
name|CLOptionDescriptor
argument_list|(
literal|"path"
argument_list|,
name|CLOptionDescriptor
operator|.
name|ARGUMENT_REQUIRED
argument_list|,
name|PATH_OPT
argument_list|,
literal|"the directory where eXist should be installed."
argument_list|)
block|}
decl_stmt|;
comment|/** 	 *  	 */
specifier|public
name|CommandLineInstaller
parameter_list|()
block|{
block|}
specifier|protected
name|void
name|execute
parameter_list|(
name|String
index|[]
name|args
parameter_list|)
throws|throws
name|Exception
block|{
if|if
condition|(
name|args
operator|.
name|length
operator|==
literal|0
operator|&&
operator|!
name|System
operator|.
name|getProperty
argument_list|(
literal|"os.name"
argument_list|)
operator|.
name|startsWith
argument_list|(
literal|"OpenServer"
argument_list|)
condition|)
block|{
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"\neXist Installation"
argument_list|)
expr_stmt|;
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"------------------------"
argument_list|)
expr_stmt|;
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"Using GUI mode ..."
argument_list|)
expr_stmt|;
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"On a headless system, add parameter -p install-path"
argument_list|)
expr_stmt|;
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"to install without GUI. If you are running JDK 1.4, you may"
argument_list|)
expr_stmt|;
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"also try to pass: -Djava.awt.headless=true -p install-path"
argument_list|)
expr_stmt|;
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"as arguments to the Java executable."
argument_list|)
expr_stmt|;
comment|// can't load the GUIInstaller class on headless machines,
comment|// so we use Class.forName to force lazy loading.
name|Class
operator|.
name|forName
argument_list|(
literal|"com.izforge.izpack.installer.GUIInstaller"
argument_list|)
operator|.
name|newInstance
argument_list|()
expr_stmt|;
block|}
else|else
block|{
name|CLArgsParser
name|optParser
init|=
operator|new
name|CLArgsParser
argument_list|(
name|args
argument_list|,
name|OPTIONS
argument_list|)
decl_stmt|;
if|if
condition|(
name|optParser
operator|.
name|getErrorString
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|System
operator|.
name|err
operator|.
name|println
argument_list|(
literal|"ERROR: "
operator|+
name|optParser
operator|.
name|getErrorString
argument_list|()
argument_list|)
expr_stmt|;
return|return;
block|}
name|List
name|opt
init|=
name|optParser
operator|.
name|getArguments
argument_list|()
decl_stmt|;
name|int
name|size
init|=
name|opt
operator|.
name|size
argument_list|()
decl_stmt|;
name|String
name|installPath
init|=
name|System
operator|.
name|getProperty
argument_list|(
literal|"user.home"
argument_list|)
operator|+
literal|"/eXist"
decl_stmt|;
name|CLOption
name|option
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|size
condition|;
name|i
operator|++
control|)
block|{
name|option
operator|=
operator|(
name|CLOption
operator|)
name|opt
operator|.
name|get
argument_list|(
name|i
argument_list|)
expr_stmt|;
switch|switch
condition|(
name|option
operator|.
name|getId
argument_list|()
condition|)
block|{
case|case
name|HELP_OPT
case|:
name|printHelp
argument_list|()
expr_stmt|;
return|return;
case|case
name|PATH_OPT
case|:
name|installPath
operator|=
name|option
operator|.
name|getArgument
argument_list|()
expr_stmt|;
break|break;
block|}
block|}
name|String
name|filename
init|=
name|File
operator|.
name|createTempFile
argument_list|(
literal|"inst"
argument_list|,
literal|".xml"
argument_list|)
operator|.
name|toString
argument_list|()
decl_stmt|;
name|Writer
name|w
init|=
operator|new
name|BufferedWriter
argument_list|(
operator|new
name|FileWriter
argument_list|(
name|filename
argument_list|)
argument_list|)
decl_stmt|;
name|w
operator|.
name|write
argument_list|(
literal|"<AutomatedInstallation langpack=\"eng\">\n"
argument_list|)
expr_stmt|;
name|w
operator|.
name|write
argument_list|(
literal|"<com.izforge.izpack.panels.HelloPanel/>\n"
operator|+
literal|"<com.izforge.izpack.panels.PacksPanel>\n"
operator|+
literal|"<selected>\n"
operator|+
literal|"<pack index=\"0\"/>\n"
operator|+
literal|"<pack index=\"1\"/>\n"
operator|+
literal|"<pack index=\"2\"/>\n"
operator|+
literal|"</selected>\n"
operator|+
literal|"</com.izforge.izpack.panels.PacksPanel>\n"
argument_list|)
expr_stmt|;
name|w
operator|.
name|write
argument_list|(
literal|"<com.izforge.izpack.panels.TargetPanel>\n"
operator|+
literal|"<installpath>"
operator|+
name|installPath
operator|+
literal|"</installpath>\n"
operator|+
literal|"</com.izforge.izpack.panels.TargetPanel>\n"
argument_list|)
expr_stmt|;
name|w
operator|.
name|write
argument_list|(
literal|"<com.izforge.izpack.panels.InstallPanel/>\n"
argument_list|)
expr_stmt|;
name|w
operator|.
name|write
argument_list|(
literal|"<com.izforge.izpack.panels.FinishPanel/>\n"
argument_list|)
expr_stmt|;
name|w
operator|.
name|write
argument_list|(
literal|"</AutomatedInstallation>"
argument_list|)
expr_stmt|;
name|w
operator|.
name|close
argument_list|()
expr_stmt|;
operator|new
name|AutomatedInstaller
argument_list|(
name|filename
argument_list|)
expr_stmt|;
operator|new
name|File
argument_list|(
name|filename
argument_list|)
operator|.
name|delete
argument_list|()
expr_stmt|;
block|}
block|}
specifier|private
specifier|static
name|void
name|printHelp
parameter_list|()
block|{
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"Usage: java "
operator|+
name|CommandLineInstaller
operator|.
name|class
operator|.
name|getName
argument_list|()
operator|+
literal|" [options]"
argument_list|)
expr_stmt|;
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
name|CLUtil
operator|.
name|describeOptions
argument_list|(
name|OPTIONS
argument_list|)
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
block|}
comment|/** 	 * @param args 	 */
specifier|public
specifier|static
name|void
name|main
parameter_list|(
name|String
index|[]
name|args
parameter_list|)
block|{
name|CommandLineInstaller
name|inst
init|=
operator|new
name|CommandLineInstaller
argument_list|()
decl_stmt|;
try|try
block|{
name|inst
operator|.
name|execute
argument_list|(
name|args
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|System
operator|.
name|err
operator|.
name|println
argument_list|(
literal|"Installer exited with an error: "
operator|+
name|e
operator|.
name|getMessage
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
block|}
end_class

end_unit

