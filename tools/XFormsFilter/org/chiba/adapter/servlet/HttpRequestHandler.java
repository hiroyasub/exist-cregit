begin_unit|revision:1.0.0;language:Java;cregit-version:0.0.1
begin_comment
comment|// Copyright 2005 Chibacon
end_comment

begin_comment
comment|/*  *  *    Artistic License  *  *    Preamble  *  *    The intent of this document is to state the conditions under which a Package may be copied, such that  *    the Copyright Holder maintains some semblance of artistic control over the development of the  *    package, while giving the users of the package the right to use and distribute the Package in a  *    more-or-less customary fashion, plus the right to make reasonable modifications.  *  *    Definitions:  *  *    "Package" refers to the collection of files distributed by the Copyright Holder, and derivatives  *    of that collection of files created through textual modification.  *  *    "Standard Version" refers to such a Package if it has not been modified, or has been modified  *    in accordance with the wishes of the Copyright Holder.  *  *    "Copyright Holder" is whoever is named in the copyright or copyrights for the package.  *  *    "You" is you, if you're thinking about copying or distributing this Package.  *  *    "Reasonable copying fee" is whatever you can justify on the basis of media cost, duplication  *    charges, time of people involved, and so on. (You will not be required to justify it to the  *    Copyright Holder, but only to the computing community at large as a market that must bear the  *    fee.)  *  *    "Freely Available" means that no fee is charged for the item itself, though there may be fees  *    involved in handling the item. It also means that recipients of the item may redistribute it under  *    the same conditions they received it.  *  *    1. You may make and give away verbatim copies of the source form of the Standard Version of this  *    Package without restriction, provided that you duplicate all of the original copyright notices and  *    associated disclaimers.  *  *    2. You may apply bug fixes, portability fixes and other modifications derived from the Public Domain  *    or from the Copyright Holder. A Package modified in such a way shall still be considered the  *    Standard Version.  *  *    3. You may otherwise modify your copy of this Package in any way, provided that you insert a  *    prominent notice in each changed file stating how and when you changed that file, and provided that  *    you do at least ONE of the following:  *  *        a) place your modifications in the Public Domain or otherwise make them Freely  *        Available, such as by posting said modifications to Usenet or an equivalent medium, or  *        placing the modifications on a major archive site such as ftp.uu.net, or by allowing the  *        Copyright Holder to include your modifications in the Standard Version of the Package.  *  *        b) use the modified Package only within your corporation or organization.  *  *        c) rename any non-standard executables so the names do not conflict with standard  *        executables, which must also be provided, and provide a separate manual page for each  *        non-standard executable that clearly documents how it differs from the Standard  *        Version.  *  *        d) make other distribution arrangements with the Copyright Holder.  *  *    4. You may distribute the programs of this Package in object code or executable form, provided that  *    you do at least ONE of the following:  *  *        a) distribute a Standard Version of the executables and library files, together with  *        instructions (in the manual page or equivalent) on where to get the Standard Version.  *  *        b) accompany the distribution with the machine-readable source of the Package with  *        your modifications.  *  *        c) accompany any non-standard executables with their corresponding Standard Version  *        executables, giving the non-standard executables non-standard names, and clearly  *        documenting the differences in manual pages (or equivalent), together with instructions  *        on where to get the Standard Version.  *  *        d) make other distribution arrangements with the Copyright Holder.  *  *    5. You may charge a reasonable copying fee for any distribution of this Package. You may charge  *    any fee you choose for support of this Package. You may not charge a fee for this Package itself.  *    However, you may distribute this Package in aggregate with other (possibly commercial) programs as  *    part of a larger (possibly commercial) software distribution provided that you do not advertise this  *    Package as a product of your own.  *  *    6. The scripts and library files supplied as input to or produced as output from the programs of this  *    Package do not automatically fall under the copyright of this Package, but belong to whomever  *    generated them, and may be sold commercially, and may be aggregated with this Package.  *  *    7. C or perl subroutines supplied by you and linked into this Package shall not be considered part of  *    this Package.  *  *    8. The name of the Copyright Holder may not be used to endorse or promote products derived from  *    this software without specific prior written permission.  *  *    9. THIS PACKAGE IS PROVIDED "AS IS" AND WITHOUT ANY EXPRESS OR IMPLIED  *    WARRANTIES, INCLUDING, WITHOUT LIMITATION, THE IMPLIED WARRANTIES OF  *    MERCHANTIBILITY AND FITNESS FOR A PARTICULAR PURPOSE.  *  */
end_comment

begin_comment
comment|// Copyright 2005 Chibacon Lissï¿½/Turner GbR
end_comment

begin_package
package|package
name|org
operator|.
name|chiba
operator|.
name|adapter
operator|.
name|servlet
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|fileupload
operator|.
name|FileItem
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|fileupload
operator|.
name|FileUpload
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|fileupload
operator|.
name|FileUploadException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|fileupload
operator|.
name|disk
operator|.
name|DiskFileItemFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|fileupload
operator|.
name|servlet
operator|.
name|ServletFileUpload
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|fileupload
operator|.
name|servlet
operator|.
name|ServletRequestContext
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|log4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|chiba
operator|.
name|adapter
operator|.
name|upload
operator|.
name|MonitoredDiskFileItemFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|chiba
operator|.
name|adapter
operator|.
name|upload
operator|.
name|UploadListener
import|;
end_import

begin_import
import|import
name|org
operator|.
name|chiba
operator|.
name|xml
operator|.
name|events
operator|.
name|DOMEventNames
import|;
end_import

begin_import
import|import
name|org
operator|.
name|chiba
operator|.
name|xml
operator|.
name|xforms
operator|.
name|ChibaBean
import|;
end_import

begin_import
import|import
name|org
operator|.
name|chiba
operator|.
name|xml
operator|.
name|xforms
operator|.
name|config
operator|.
name|Config
import|;
end_import

begin_import
import|import
name|org
operator|.
name|chiba
operator|.
name|xml
operator|.
name|xforms
operator|.
name|exception
operator|.
name|XFormsException
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|servlet
operator|.
name|http
operator|.
name|HttpServletRequest
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|File
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|UnsupportedEncodingException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Enumeration
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Iterator
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_comment
comment|/**  * Default implementation for handling HTTP requests.  *  * @author Ulrich Nicolas Liss&eacute;  * @version $Id: HttpRequestHandler.java,v 1.1 2006/09/10 19:50:51 joernt Exp $  */
end_comment

begin_class
specifier|public
class|class
name|HttpRequestHandler
block|{
specifier|private
specifier|static
specifier|final
name|Logger
name|LOGGER
init|=
name|Logger
operator|.
name|getLogger
argument_list|(
name|HttpRequestHandler
operator|.
name|class
argument_list|)
decl_stmt|;
comment|// todo: ioc
specifier|public
specifier|static
specifier|final
name|String
name|DATA_PREFIX_PROPERTY
init|=
literal|"chiba.web.dataPrefix"
decl_stmt|;
specifier|public
specifier|static
specifier|final
name|String
name|TRIGGER_PREFIX_PROPERTY
init|=
literal|"chiba.web.triggerPrefix"
decl_stmt|;
specifier|public
specifier|static
specifier|final
name|String
name|SELECTOR_PREFIX_PROPERTY
init|=
literal|"chiba.web.selectorPrefix"
decl_stmt|;
specifier|public
specifier|static
specifier|final
name|String
name|REMOVE_UPLOAD_PREFIX_PROPERTY
init|=
literal|"chiba.web.removeUploadPrefix"
decl_stmt|;
specifier|public
specifier|static
specifier|final
name|String
name|DATETIME_PREFIX_PROPERTY
init|=
literal|"chiba.web.dateTimePrefix"
decl_stmt|;
specifier|public
specifier|static
specifier|final
name|String
name|DATA_PREFIX_DEFAULT
init|=
literal|"d_"
decl_stmt|;
specifier|public
specifier|static
specifier|final
name|String
name|TRIGGER_PREFIX_DEFAULT
init|=
literal|"t_"
decl_stmt|;
specifier|public
specifier|static
specifier|final
name|String
name|SELECTOR_PREFIX_DEFAULT
init|=
literal|"s_"
decl_stmt|;
specifier|public
specifier|static
specifier|final
name|String
name|REMOVE_UPLOAD_PREFIX_DEFAULT
init|=
literal|"ru_"
decl_stmt|;
specifier|public
specifier|static
specifier|final
name|String
name|DATETIME_PREFIX_DEFAULT
init|=
literal|"dt_"
decl_stmt|;
comment|// todo: remove
specifier|private
name|String
name|removeUploadPrefix
decl_stmt|;
specifier|private
name|ChibaBean
name|chibaBean
decl_stmt|;
specifier|private
name|String
name|uploadRoot
decl_stmt|;
specifier|private
name|String
name|sessionKey
decl_stmt|;
specifier|private
name|String
name|dataPrefix
decl_stmt|;
specifier|private
name|String
name|selectorPrefix
decl_stmt|;
specifier|private
name|String
name|triggerPrefix
decl_stmt|;
specifier|private
name|String
name|dateTimePrefix
decl_stmt|;
specifier|private
name|HashMap
name|dateTimeValues
init|=
operator|new
name|HashMap
argument_list|()
decl_stmt|;
specifier|public
name|HttpRequestHandler
parameter_list|(
name|ChibaBean
name|chibaBean
parameter_list|)
block|{
name|this
operator|.
name|chibaBean
operator|=
name|chibaBean
expr_stmt|;
block|}
specifier|public
name|void
name|setUploadRoot
parameter_list|(
name|String
name|uploadRoot
parameter_list|)
block|{
name|this
operator|.
name|uploadRoot
operator|=
name|uploadRoot
expr_stmt|;
block|}
specifier|public
name|void
name|setSessionKey
parameter_list|(
name|String
name|sessionKey
parameter_list|)
block|{
name|this
operator|.
name|sessionKey
operator|=
name|sessionKey
expr_stmt|;
block|}
comment|/**      * Handles a HTTP request.      *<p/>      * After parsing the request will processed in following steps:      *<ol>      *<li>Upload controls are updated if any.</li>      *<li>All other controls are updated if any changes arrive with the request.</li>      *<li>Repeat indices are updated if any.</li>      *<li>Triggers are activated if any.</li>      *</ol>      *<p/>      *<b>Note:</b> In case the request is<code>multipart/form-data</code>-encoded,      * it will be processed with<code>org.apache.commons.fileupload.FileUpload</code>      * which appears to<i>consume</i> all request parameters.      *      * @param request a HTTP request.      * @throws XFormsException if any error occurred during request processing.      */
specifier|public
name|void
name|handleRequest
parameter_list|(
name|HttpServletRequest
name|request
parameter_list|)
throws|throws
name|XFormsException
block|{
if|if
condition|(
name|LOGGER
operator|.
name|isDebugEnabled
argument_list|()
condition|)
block|{
name|LOGGER
operator|.
name|debug
argument_list|(
literal|"handle request: "
operator|+
name|request
operator|.
name|getRequestURI
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|Map
index|[]
name|parameters
decl_stmt|;
try|try
block|{
name|parameters
operator|=
name|parseRequest
argument_list|(
name|request
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|XFormsException
argument_list|(
literal|"could not parse request"
argument_list|,
name|e
argument_list|)
throw|;
block|}
comment|// todo: implement action block behaviour ?
if|if
condition|(
name|parameters
index|[
literal|0
index|]
operator|!=
literal|null
condition|)
block|{
name|processUploadParameters
argument_list|(
name|parameters
index|[
literal|0
index|]
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|parameters
index|[
literal|1
index|]
operator|!=
literal|null
condition|)
block|{
name|processControlParameters
argument_list|(
name|parameters
index|[
literal|1
index|]
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|parameters
index|[
literal|2
index|]
operator|!=
literal|null
condition|)
block|{
name|processRepeatParameters
argument_list|(
name|parameters
index|[
literal|2
index|]
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|parameters
index|[
literal|3
index|]
operator|!=
literal|null
condition|)
block|{
name|processTriggerParameters
argument_list|(
name|parameters
index|[
literal|3
index|]
argument_list|)
expr_stmt|;
block|}
block|}
comment|/**      * Parses a HTTP request. Returns an array containing maps for upload      * controls, other controls, repeat indices, and trigger. The individual      * maps may be null in case no corresponding parameters appear in the      * request.      *      * @param request a HTTP request.      * @return an array of maps containing the parsed request parameters.      * @throws FileUploadException if an error occurred during file upload.      * @throws UnsupportedEncodingException if an error occurred during      * parameter value decoding.      */
specifier|protected
name|Map
index|[]
name|parseRequest
parameter_list|(
name|HttpServletRequest
name|request
parameter_list|)
throws|throws
name|FileUploadException
throws|,
name|UnsupportedEncodingException
block|{
name|Map
index|[]
name|parameters
init|=
operator|new
name|Map
index|[
literal|4
index|]
decl_stmt|;
if|if
condition|(
name|FileUpload
operator|.
name|isMultipartContent
argument_list|(
operator|new
name|ServletRequestContext
argument_list|(
name|request
argument_list|)
argument_list|)
condition|)
block|{
name|UploadListener
name|uploadListener
init|=
operator|new
name|UploadListener
argument_list|(
name|request
argument_list|,
name|this
operator|.
name|sessionKey
argument_list|)
decl_stmt|;
name|DiskFileItemFactory
name|factory
init|=
operator|new
name|MonitoredDiskFileItemFactory
argument_list|(
name|uploadListener
argument_list|)
decl_stmt|;
name|factory
operator|.
name|setRepository
argument_list|(
operator|new
name|File
argument_list|(
name|this
operator|.
name|uploadRoot
argument_list|)
argument_list|)
expr_stmt|;
name|ServletFileUpload
name|upload
init|=
operator|new
name|ServletFileUpload
argument_list|(
name|factory
argument_list|)
decl_stmt|;
name|String
name|encoding
init|=
name|request
operator|.
name|getCharacterEncoding
argument_list|()
decl_stmt|;
if|if
condition|(
name|encoding
operator|==
literal|null
condition|)
block|{
name|encoding
operator|=
literal|"UTF-8"
expr_stmt|;
block|}
name|Iterator
name|iterator
init|=
name|upload
operator|.
name|parseRequest
argument_list|(
name|request
argument_list|)
operator|.
name|iterator
argument_list|()
decl_stmt|;
name|FileItem
name|item
decl_stmt|;
while|while
condition|(
name|iterator
operator|.
name|hasNext
argument_list|()
condition|)
block|{
name|item
operator|=
operator|(
name|FileItem
operator|)
name|iterator
operator|.
name|next
argument_list|()
expr_stmt|;
if|if
condition|(
name|LOGGER
operator|.
name|isDebugEnabled
argument_list|()
condition|)
block|{
if|if
condition|(
name|item
operator|.
name|isFormField
argument_list|()
condition|)
block|{
name|LOGGER
operator|.
name|debug
argument_list|(
literal|"request param: "
operator|+
name|item
operator|.
name|getFieldName
argument_list|()
operator|+
literal|" - value='"
operator|+
name|item
operator|.
name|getString
argument_list|()
operator|+
literal|"'"
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|LOGGER
operator|.
name|debug
argument_list|(
literal|"file in request: "
operator|+
name|item
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
name|parseMultiPartParameter
argument_list|(
name|item
argument_list|,
name|encoding
argument_list|,
name|parameters
argument_list|)
expr_stmt|;
block|}
block|}
else|else
block|{
name|Enumeration
name|enumeration
init|=
name|request
operator|.
name|getParameterNames
argument_list|()
decl_stmt|;
name|String
name|name
decl_stmt|;
name|String
index|[]
name|values
decl_stmt|;
while|while
condition|(
name|enumeration
operator|.
name|hasMoreElements
argument_list|()
condition|)
block|{
name|name
operator|=
operator|(
name|String
operator|)
name|enumeration
operator|.
name|nextElement
argument_list|()
expr_stmt|;
name|values
operator|=
name|request
operator|.
name|getParameterValues
argument_list|(
name|name
argument_list|)
expr_stmt|;
name|parseURLEncodedParameter
argument_list|(
name|name
argument_list|,
name|values
argument_list|,
name|parameters
argument_list|)
expr_stmt|;
block|}
block|}
return|return
name|parameters
return|;
block|}
comment|/**      * Parses a<code>application/x-www-form-urlencoded</code>-encoded request      * parameter and stores it in the parameter map.      *      * @param name the paremeter name.      * @param values the paremeter value(s).      * @param parameters the parameters map.      */
specifier|protected
name|void
name|parseURLEncodedParameter
parameter_list|(
name|String
name|name
parameter_list|,
name|String
index|[]
name|values
parameter_list|,
name|Map
index|[]
name|parameters
parameter_list|)
block|{
if|if
condition|(
name|name
operator|.
name|startsWith
argument_list|(
name|getDataPrefix
argument_list|()
argument_list|)
operator|||
name|name
operator|.
name|startsWith
argument_list|(
name|getDateTimePrefix
argument_list|()
argument_list|)
condition|)
block|{
name|StringBuffer
name|buffer
init|=
operator|new
name|StringBuffer
argument_list|(
name|values
index|[
literal|0
index|]
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|index
init|=
literal|1
init|;
name|index
operator|<
name|values
operator|.
name|length
condition|;
name|index
operator|++
control|)
block|{
name|buffer
operator|.
name|append
argument_list|(
literal|" "
argument_list|)
operator|.
name|append
argument_list|(
name|values
index|[
name|index
index|]
argument_list|)
expr_stmt|;
block|}
name|parameters
index|[
literal|1
index|]
operator|=
name|parseControlParameter
argument_list|(
name|name
argument_list|,
name|buffer
operator|.
name|toString
argument_list|()
operator|.
name|trim
argument_list|()
argument_list|,
name|parameters
index|[
literal|1
index|]
argument_list|)
expr_stmt|;
block|}
if|else if
condition|(
name|name
operator|.
name|startsWith
argument_list|(
name|getSelectorPrefix
argument_list|()
argument_list|)
condition|)
block|{
name|parameters
index|[
literal|2
index|]
operator|=
name|parseRepeatParameter
argument_list|(
name|name
argument_list|,
name|values
index|[
literal|0
index|]
argument_list|,
name|parameters
index|[
literal|2
index|]
argument_list|)
expr_stmt|;
block|}
if|else if
condition|(
name|name
operator|.
name|startsWith
argument_list|(
name|getTriggerPrefix
argument_list|()
argument_list|)
condition|)
block|{
name|parameters
index|[
literal|3
index|]
operator|=
name|parseTriggerParameter
argument_list|(
name|name
argument_list|,
name|values
index|[
literal|0
index|]
argument_list|,
name|parameters
index|[
literal|3
index|]
argument_list|)
expr_stmt|;
block|}
block|}
comment|/**      * Parses a<code>multipart/form-data</code>-encoded request parameter and      * stores it in the parameter map.      *      * @param item the uploaded file item.      * @param encoding the parameter encoding.      * @param parameters the parameters map.      * @throws UnsupportedEncodingException if an error occurred during      * parameter value decoding.      */
specifier|protected
name|void
name|parseMultiPartParameter
parameter_list|(
name|FileItem
name|item
parameter_list|,
name|String
name|encoding
parameter_list|,
name|Map
index|[]
name|parameters
parameter_list|)
throws|throws
name|UnsupportedEncodingException
block|{
name|String
name|name
init|=
name|item
operator|.
name|getFieldName
argument_list|()
decl_stmt|;
if|if
condition|(
name|name
operator|.
name|startsWith
argument_list|(
name|getDataPrefix
argument_list|()
argument_list|)
operator|||
name|name
operator|.
name|startsWith
argument_list|(
name|getDateTimePrefix
argument_list|()
argument_list|)
condition|)
block|{
if|if
condition|(
name|item
operator|.
name|isFormField
argument_list|()
condition|)
block|{
name|parameters
index|[
literal|1
index|]
operator|=
name|parseControlParameter
argument_list|(
name|name
argument_list|,
name|item
operator|.
name|getString
argument_list|(
name|encoding
argument_list|)
argument_list|,
name|parameters
index|[
literal|1
index|]
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|parameters
index|[
literal|0
index|]
operator|=
name|parseUploadParameter
argument_list|(
name|name
argument_list|,
name|item
argument_list|,
name|parameters
index|[
literal|0
index|]
argument_list|)
expr_stmt|;
block|}
block|}
if|else if
condition|(
name|name
operator|.
name|startsWith
argument_list|(
name|getSelectorPrefix
argument_list|()
argument_list|)
condition|)
block|{
name|parameters
index|[
literal|2
index|]
operator|=
name|parseRepeatParameter
argument_list|(
name|name
argument_list|,
name|item
operator|.
name|getString
argument_list|(
name|encoding
argument_list|)
argument_list|,
name|parameters
index|[
literal|2
index|]
argument_list|)
expr_stmt|;
block|}
if|else if
condition|(
name|name
operator|.
name|startsWith
argument_list|(
name|getTriggerPrefix
argument_list|()
argument_list|)
condition|)
block|{
name|parameters
index|[
literal|3
index|]
operator|=
name|parseTriggerParameter
argument_list|(
name|name
argument_list|,
name|item
operator|.
name|getString
argument_list|(
name|encoding
argument_list|)
argument_list|,
name|parameters
index|[
literal|3
index|]
argument_list|)
expr_stmt|;
block|}
block|}
specifier|protected
name|Map
name|parseUploadParameter
parameter_list|(
name|String
name|name
parameter_list|,
name|FileItem
name|item
parameter_list|,
name|Map
name|uploads
parameter_list|)
block|{
if|if
condition|(
name|uploads
operator|==
literal|null
condition|)
block|{
name|uploads
operator|=
operator|new
name|HashMap
argument_list|()
expr_stmt|;
block|}
name|String
name|id
init|=
name|name
operator|.
name|substring
argument_list|(
name|getDataPrefix
argument_list|()
operator|.
name|length
argument_list|()
argument_list|)
decl_stmt|;
name|uploads
operator|.
name|put
argument_list|(
name|id
argument_list|,
name|item
argument_list|)
expr_stmt|;
return|return
name|uploads
return|;
block|}
specifier|protected
name|Map
name|parseControlParameter
parameter_list|(
name|String
name|name
parameter_list|,
name|String
name|value
parameter_list|,
name|Map
name|controls
parameter_list|)
block|{
if|if
condition|(
name|controls
operator|==
literal|null
condition|)
block|{
name|controls
operator|=
operator|new
name|HashMap
argument_list|()
expr_stmt|;
block|}
name|String
name|id
init|=
literal|null
decl_stmt|;
if|if
condition|(
name|name
operator|.
name|startsWith
argument_list|(
name|getDateTimePrefix
argument_list|()
argument_list|)
condition|)
block|{
comment|//xs:date or xs:dateTime bound control
name|id
operator|=
name|name
operator|.
name|substring
argument_list|(
name|getDateTimePrefix
argument_list|()
operator|.
name|length
argument_list|()
argument_list|)
expr_stmt|;
name|String
name|part
init|=
name|id
operator|.
name|substring
argument_list|(
literal|0
argument_list|,
name|id
operator|.
name|indexOf
argument_list|(
literal|'_'
argument_list|)
argument_list|)
decl_stmt|;
name|id
operator|=
name|id
operator|.
name|substring
argument_list|(
name|part
operator|.
name|length
argument_list|()
operator|+
literal|1
argument_list|)
expr_stmt|;
name|DateTimeValue
name|dtValue
init|=
operator|(
name|DateTimeValue
operator|)
name|dateTimeValues
operator|.
name|get
argument_list|(
name|id
argument_list|)
decl_stmt|;
if|if
condition|(
name|dtValue
operator|==
literal|null
condition|)
name|dtValue
operator|=
operator|new
name|DateTimeValue
argument_list|()
expr_stmt|;
if|if
condition|(
name|part
operator|.
name|equals
argument_list|(
literal|"year"
argument_list|)
condition|)
block|{
name|dtValue
operator|.
name|setYear
argument_list|(
name|value
argument_list|)
expr_stmt|;
block|}
if|else if
condition|(
name|part
operator|.
name|equals
argument_list|(
literal|"month"
argument_list|)
condition|)
block|{
name|dtValue
operator|.
name|setMonth
argument_list|(
name|value
argument_list|)
expr_stmt|;
block|}
if|else if
condition|(
name|part
operator|.
name|equals
argument_list|(
literal|"day"
argument_list|)
condition|)
block|{
name|dtValue
operator|.
name|setDay
argument_list|(
name|value
argument_list|)
expr_stmt|;
block|}
if|else if
condition|(
name|part
operator|.
name|equals
argument_list|(
literal|"hour"
argument_list|)
condition|)
block|{
name|dtValue
operator|.
name|setHour
argument_list|(
name|value
argument_list|)
expr_stmt|;
block|}
if|else if
condition|(
name|part
operator|.
name|equals
argument_list|(
literal|"minute"
argument_list|)
condition|)
block|{
name|dtValue
operator|.
name|setMinute
argument_list|(
name|value
argument_list|)
expr_stmt|;
block|}
if|else if
condition|(
name|part
operator|.
name|equals
argument_list|(
literal|"second"
argument_list|)
condition|)
block|{
name|dtValue
operator|.
name|setSecond
argument_list|(
name|value
argument_list|)
expr_stmt|;
block|}
if|else if
condition|(
name|part
operator|.
name|equals
argument_list|(
literal|"timezone"
argument_list|)
condition|)
block|{
name|dtValue
operator|.
name|setTimeZone
argument_list|(
name|value
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|dtValue
operator|.
name|isComplete
argument_list|()
condition|)
block|{
name|value
operator|=
name|dtValue
operator|.
name|toString
argument_list|()
expr_stmt|;
name|dateTimeValues
operator|.
name|remove
argument_list|(
name|id
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|dateTimeValues
operator|.
name|put
argument_list|(
name|id
argument_list|,
name|dtValue
argument_list|)
expr_stmt|;
return|return
name|controls
return|;
block|}
block|}
else|else
block|{
comment|//other bound control
name|id
operator|=
name|name
operator|.
name|substring
argument_list|(
name|getDataPrefix
argument_list|()
operator|.
name|length
argument_list|()
argument_list|)
expr_stmt|;
block|}
comment|//get existing list of values
name|String
name|list
init|=
operator|(
name|String
operator|)
name|controls
operator|.
name|get
argument_list|(
name|id
argument_list|)
decl_stmt|;
if|if
condition|(
name|list
operator|==
literal|null
condition|)
block|{
comment|//set the value
name|list
operator|=
name|value
expr_stmt|;
block|}
else|else
block|{
comment|//add the value to the list
name|list
operator|=
name|list
operator|.
name|concat
argument_list|(
literal|" "
argument_list|)
operator|.
name|concat
argument_list|(
name|value
argument_list|)
operator|.
name|trim
argument_list|()
expr_stmt|;
block|}
comment|//store the controls updated value
name|controls
operator|.
name|put
argument_list|(
name|id
argument_list|,
name|list
argument_list|)
expr_stmt|;
return|return
name|controls
return|;
block|}
specifier|protected
name|Map
name|parseRepeatParameter
parameter_list|(
name|String
name|name
parameter_list|,
name|String
name|value
parameter_list|,
name|Map
name|repeats
parameter_list|)
block|{
if|if
condition|(
name|repeats
operator|==
literal|null
condition|)
block|{
name|repeats
operator|=
operator|new
name|HashMap
argument_list|()
expr_stmt|;
block|}
name|int
name|separator
init|=
name|value
operator|.
name|lastIndexOf
argument_list|(
literal|':'
argument_list|)
decl_stmt|;
name|String
name|id
init|=
name|value
operator|.
name|substring
argument_list|(
literal|0
argument_list|,
name|separator
argument_list|)
decl_stmt|;
name|String
name|index
init|=
name|value
operator|.
name|substring
argument_list|(
name|separator
operator|+
literal|1
argument_list|)
decl_stmt|;
name|repeats
operator|.
name|put
argument_list|(
name|id
argument_list|,
name|index
argument_list|)
expr_stmt|;
return|return
name|repeats
return|;
block|}
specifier|protected
name|Map
name|parseTriggerParameter
parameter_list|(
name|String
name|name
parameter_list|,
name|String
name|value
parameter_list|,
name|Map
name|trigger
parameter_list|)
block|{
if|if
condition|(
name|trigger
operator|==
literal|null
condition|)
block|{
name|trigger
operator|=
operator|new
name|HashMap
argument_list|()
expr_stmt|;
block|}
name|String
name|id
init|=
name|name
operator|.
name|substring
argument_list|(
name|getTriggerPrefix
argument_list|()
operator|.
name|length
argument_list|()
argument_list|)
decl_stmt|;
name|int
name|x
init|=
name|id
operator|.
name|lastIndexOf
argument_list|(
literal|".x"
argument_list|)
decl_stmt|;
if|if
condition|(
name|x
operator|>
operator|-
literal|1
condition|)
block|{
name|id
operator|=
name|id
operator|.
name|substring
argument_list|(
literal|0
argument_list|,
name|x
argument_list|)
expr_stmt|;
block|}
name|int
name|y
init|=
name|id
operator|.
name|lastIndexOf
argument_list|(
literal|".y"
argument_list|)
decl_stmt|;
if|if
condition|(
name|y
operator|>
operator|-
literal|1
condition|)
block|{
name|id
operator|=
name|id
operator|.
name|substring
argument_list|(
literal|0
argument_list|,
name|y
argument_list|)
expr_stmt|;
block|}
name|trigger
operator|.
name|put
argument_list|(
name|id
argument_list|,
name|DOMEventNames
operator|.
name|ACTIVATE
argument_list|)
expr_stmt|;
return|return
name|trigger
return|;
block|}
specifier|protected
name|void
name|processUploadParameters
parameter_list|(
name|Map
name|uploads
parameter_list|)
throws|throws
name|XFormsException
block|{
if|if
condition|(
name|LOGGER
operator|.
name|isDebugEnabled
argument_list|()
condition|)
block|{
name|LOGGER
operator|.
name|debug
argument_list|(
literal|"updating "
operator|+
name|uploads
operator|.
name|keySet
argument_list|()
operator|.
name|size
argument_list|()
operator|+
literal|" uploads(s)"
argument_list|)
expr_stmt|;
block|}
try|try
block|{
comment|// update repeat indices
name|Iterator
name|iterator
init|=
name|uploads
operator|.
name|keySet
argument_list|()
operator|.
name|iterator
argument_list|()
decl_stmt|;
name|String
name|id
decl_stmt|;
name|FileItem
name|item
decl_stmt|;
name|byte
index|[]
name|data
decl_stmt|;
while|while
condition|(
name|iterator
operator|.
name|hasNext
argument_list|()
condition|)
block|{
name|id
operator|=
operator|(
name|String
operator|)
name|iterator
operator|.
name|next
argument_list|()
expr_stmt|;
name|item
operator|=
operator|(
name|FileItem
operator|)
name|uploads
operator|.
name|get
argument_list|(
name|id
argument_list|)
expr_stmt|;
if|if
condition|(
name|item
operator|.
name|getSize
argument_list|()
operator|>
literal|0
condition|)
block|{
if|if
condition|(
name|this
operator|.
name|chibaBean
operator|.
name|hasControlType
argument_list|(
name|id
argument_list|,
literal|"anyURI"
argument_list|)
condition|)
block|{
name|String
name|localPath
init|=
operator|new
name|StringBuffer
argument_list|()
operator|.
name|append
argument_list|(
name|System
operator|.
name|currentTimeMillis
argument_list|()
argument_list|)
operator|.
name|append
argument_list|(
literal|'/'
argument_list|)
operator|.
name|append
argument_list|(
name|item
operator|.
name|getName
argument_list|()
argument_list|)
operator|.
name|toString
argument_list|()
decl_stmt|;
name|File
name|localFile
init|=
operator|new
name|File
argument_list|(
name|this
operator|.
name|uploadRoot
argument_list|,
name|localPath
argument_list|)
decl_stmt|;
name|localFile
operator|.
name|getParentFile
argument_list|()
operator|.
name|mkdirs
argument_list|()
expr_stmt|;
name|item
operator|.
name|write
argument_list|(
name|localFile
argument_list|)
expr_stmt|;
comment|// todo: externalize file handling and uri generation
name|data
operator|=
name|localFile
operator|.
name|toURI
argument_list|()
operator|.
name|toString
argument_list|()
operator|.
name|getBytes
argument_list|(
literal|"UTF-8"
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|data
operator|=
name|item
operator|.
name|get
argument_list|()
expr_stmt|;
block|}
name|this
operator|.
name|chibaBean
operator|.
name|updateControlValue
argument_list|(
name|id
argument_list|,
name|item
operator|.
name|getContentType
argument_list|()
argument_list|,
name|item
operator|.
name|getName
argument_list|()
argument_list|,
name|data
argument_list|)
expr_stmt|;
block|}
else|else
block|{
if|if
condition|(
name|LOGGER
operator|.
name|isDebugEnabled
argument_list|()
condition|)
block|{
name|LOGGER
operator|.
name|debug
argument_list|(
literal|"ignoring empty upload "
operator|+
name|id
argument_list|)
expr_stmt|;
block|}
comment|// todo: removal ?
block|}
name|item
operator|.
name|delete
argument_list|()
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|XFormsException
argument_list|(
name|e
argument_list|)
throw|;
block|}
block|}
specifier|protected
name|void
name|processControlParameters
parameter_list|(
name|Map
name|controls
parameter_list|)
throws|throws
name|XFormsException
block|{
comment|// first filter out all unchanged controls ...
name|Iterator
name|iterator
init|=
name|controls
operator|.
name|keySet
argument_list|()
operator|.
name|iterator
argument_list|()
decl_stmt|;
name|String
name|id
decl_stmt|;
name|String
name|value
decl_stmt|;
name|int
name|unchanged
init|=
literal|0
decl_stmt|;
while|while
condition|(
name|iterator
operator|.
name|hasNext
argument_list|()
condition|)
block|{
name|id
operator|=
operator|(
name|String
operator|)
name|iterator
operator|.
name|next
argument_list|()
expr_stmt|;
name|value
operator|=
operator|(
name|String
operator|)
name|controls
operator|.
name|get
argument_list|(
name|id
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|this
operator|.
name|chibaBean
operator|.
name|hasControlChanged
argument_list|(
name|id
argument_list|,
name|value
argument_list|)
condition|)
block|{
name|controls
operator|.
name|put
argument_list|(
name|id
argument_list|,
literal|null
argument_list|)
expr_stmt|;
name|unchanged
operator|++
expr_stmt|;
block|}
block|}
if|if
condition|(
name|LOGGER
operator|.
name|isDebugEnabled
argument_list|()
condition|)
block|{
name|int
name|all
init|=
name|controls
operator|.
name|keySet
argument_list|()
operator|.
name|size
argument_list|()
decl_stmt|;
name|int
name|changed
init|=
name|all
operator|-
name|unchanged
decl_stmt|;
if|if
condition|(
name|changed
operator|>
literal|0
condition|)
block|{
name|LOGGER
operator|.
name|debug
argument_list|(
literal|"updating "
operator|+
name|changed
operator|+
literal|" of "
operator|+
name|all
operator|+
literal|" control(s)"
argument_list|)
expr_stmt|;
block|}
block|}
comment|// ... then update changed controls to avoid side-effects
name|iterator
operator|=
name|controls
operator|.
name|keySet
argument_list|()
operator|.
name|iterator
argument_list|()
expr_stmt|;
while|while
condition|(
name|iterator
operator|.
name|hasNext
argument_list|()
condition|)
block|{
name|id
operator|=
operator|(
name|String
operator|)
name|iterator
operator|.
name|next
argument_list|()
expr_stmt|;
name|value
operator|=
operator|(
name|String
operator|)
name|controls
operator|.
name|get
argument_list|(
name|id
argument_list|)
expr_stmt|;
if|if
condition|(
name|value
operator|!=
literal|null
condition|)
block|{
name|this
operator|.
name|chibaBean
operator|.
name|updateControlValue
argument_list|(
name|id
argument_list|,
name|value
argument_list|)
expr_stmt|;
block|}
block|}
block|}
specifier|protected
name|void
name|processRepeatParameters
parameter_list|(
name|Map
name|repeats
parameter_list|)
throws|throws
name|XFormsException
block|{
if|if
condition|(
name|LOGGER
operator|.
name|isDebugEnabled
argument_list|()
condition|)
block|{
name|LOGGER
operator|.
name|debug
argument_list|(
literal|"updating "
operator|+
name|repeats
operator|.
name|keySet
argument_list|()
operator|.
name|size
argument_list|()
operator|+
literal|" repeat(s)"
argument_list|)
expr_stmt|;
block|}
comment|// update repeat indices
name|Iterator
name|iterator
init|=
name|repeats
operator|.
name|keySet
argument_list|()
operator|.
name|iterator
argument_list|()
decl_stmt|;
name|String
name|id
decl_stmt|;
name|int
name|index
decl_stmt|;
while|while
condition|(
name|iterator
operator|.
name|hasNext
argument_list|()
condition|)
block|{
name|id
operator|=
operator|(
name|String
operator|)
name|iterator
operator|.
name|next
argument_list|()
expr_stmt|;
name|index
operator|=
name|Integer
operator|.
name|parseInt
argument_list|(
operator|(
name|String
operator|)
name|repeats
operator|.
name|get
argument_list|(
name|id
argument_list|)
argument_list|)
expr_stmt|;
comment|// todo: change detection ?
name|this
operator|.
name|chibaBean
operator|.
name|updateRepeatIndex
argument_list|(
name|id
argument_list|,
name|index
argument_list|)
expr_stmt|;
block|}
block|}
specifier|protected
name|void
name|processTriggerParameters
parameter_list|(
name|Map
name|trigger
parameter_list|)
throws|throws
name|XFormsException
block|{
if|if
condition|(
name|LOGGER
operator|.
name|isDebugEnabled
argument_list|()
condition|)
block|{
name|LOGGER
operator|.
name|debug
argument_list|(
literal|"activating "
operator|+
name|trigger
operator|.
name|keySet
argument_list|()
operator|.
name|size
argument_list|()
operator|+
literal|" trigger"
argument_list|)
expr_stmt|;
block|}
comment|// update repeat indices
name|Iterator
name|iterator
init|=
name|trigger
operator|.
name|keySet
argument_list|()
operator|.
name|iterator
argument_list|()
decl_stmt|;
name|String
name|id
decl_stmt|;
name|String
name|event
decl_stmt|;
while|while
condition|(
name|iterator
operator|.
name|hasNext
argument_list|()
condition|)
block|{
name|id
operator|=
operator|(
name|String
operator|)
name|iterator
operator|.
name|next
argument_list|()
expr_stmt|;
name|event
operator|=
operator|(
name|String
operator|)
name|trigger
operator|.
name|get
argument_list|(
name|id
argument_list|)
expr_stmt|;
name|this
operator|.
name|chibaBean
operator|.
name|dispatch
argument_list|(
name|id
argument_list|,
name|event
argument_list|)
expr_stmt|;
block|}
block|}
comment|// todo: remove and introduce setters (ioc)
specifier|protected
specifier|final
name|String
name|getTriggerPrefix
parameter_list|()
block|{
if|if
condition|(
name|this
operator|.
name|triggerPrefix
operator|==
literal|null
condition|)
block|{
try|try
block|{
name|this
operator|.
name|triggerPrefix
operator|=
name|Config
operator|.
name|getInstance
argument_list|()
operator|.
name|getProperty
argument_list|(
name|TRIGGER_PREFIX_PROPERTY
argument_list|,
name|TRIGGER_PREFIX_DEFAULT
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|this
operator|.
name|triggerPrefix
operator|=
name|TRIGGER_PREFIX_DEFAULT
expr_stmt|;
block|}
block|}
return|return
name|this
operator|.
name|triggerPrefix
return|;
block|}
specifier|protected
specifier|final
name|String
name|getDataPrefix
parameter_list|()
block|{
if|if
condition|(
name|this
operator|.
name|dataPrefix
operator|==
literal|null
condition|)
block|{
try|try
block|{
name|this
operator|.
name|dataPrefix
operator|=
name|Config
operator|.
name|getInstance
argument_list|()
operator|.
name|getProperty
argument_list|(
name|DATA_PREFIX_PROPERTY
argument_list|,
name|DATA_PREFIX_DEFAULT
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|this
operator|.
name|dataPrefix
operator|=
name|DATA_PREFIX_DEFAULT
expr_stmt|;
block|}
block|}
return|return
name|this
operator|.
name|dataPrefix
return|;
block|}
specifier|protected
specifier|final
name|String
name|getRemoveUploadPrefix
parameter_list|()
block|{
if|if
condition|(
name|this
operator|.
name|removeUploadPrefix
operator|==
literal|null
condition|)
block|{
try|try
block|{
name|this
operator|.
name|removeUploadPrefix
operator|=
name|Config
operator|.
name|getInstance
argument_list|()
operator|.
name|getProperty
argument_list|(
name|REMOVE_UPLOAD_PREFIX_PROPERTY
argument_list|,
name|REMOVE_UPLOAD_PREFIX_DEFAULT
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|this
operator|.
name|removeUploadPrefix
operator|=
name|REMOVE_UPLOAD_PREFIX_DEFAULT
expr_stmt|;
block|}
block|}
return|return
name|this
operator|.
name|removeUploadPrefix
return|;
block|}
specifier|protected
specifier|final
name|String
name|getSelectorPrefix
parameter_list|()
block|{
if|if
condition|(
name|this
operator|.
name|selectorPrefix
operator|==
literal|null
condition|)
block|{
try|try
block|{
name|this
operator|.
name|selectorPrefix
operator|=
name|Config
operator|.
name|getInstance
argument_list|()
operator|.
name|getProperty
argument_list|(
name|SELECTOR_PREFIX_PROPERTY
argument_list|,
name|SELECTOR_PREFIX_DEFAULT
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|this
operator|.
name|selectorPrefix
operator|=
name|SELECTOR_PREFIX_DEFAULT
expr_stmt|;
block|}
block|}
return|return
name|this
operator|.
name|selectorPrefix
return|;
block|}
specifier|protected
specifier|final
name|String
name|getDateTimePrefix
parameter_list|()
block|{
if|if
condition|(
name|this
operator|.
name|dateTimePrefix
operator|==
literal|null
condition|)
block|{
try|try
block|{
name|this
operator|.
name|dateTimePrefix
operator|=
name|Config
operator|.
name|getInstance
argument_list|()
operator|.
name|getProperty
argument_list|(
name|DATETIME_PREFIX_PROPERTY
argument_list|,
name|DATETIME_PREFIX_DEFAULT
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|this
operator|.
name|dateTimePrefix
operator|=
name|DATETIME_PREFIX_DEFAULT
expr_stmt|;
block|}
block|}
return|return
name|this
operator|.
name|dateTimePrefix
return|;
block|}
specifier|private
class|class
name|DateTimeValue
block|{
comment|/**     	 * xs:dateTime looks like 2006-09-19T10:56:00.00+1:00 or YYYY-MM-DDTHH:mm:ss.ms+tz     	 *      	 * YYYY = the year, string index 0 to 3     	 * MM = the month, string index 5 to 6     	 * DD = the day, string index 8 to 9     	 * HH = the hour, string index 11 to 12     	 * mm = the minute, string index 14 to 15     	 * ss = the second, string index 17 to 18     	 * ms = the milliseconds     	 * tz = the timezone if any     	 */
specifier|private
name|String
name|year
init|=
operator|new
name|String
argument_list|()
decl_stmt|;
specifier|private
name|String
name|month
init|=
operator|new
name|String
argument_list|()
decl_stmt|;
specifier|private
name|String
name|day
init|=
operator|new
name|String
argument_list|()
decl_stmt|;
specifier|private
name|String
name|hour
init|=
operator|new
name|String
argument_list|()
decl_stmt|;
specifier|private
name|String
name|minute
init|=
operator|new
name|String
argument_list|()
decl_stmt|;
specifier|private
name|String
name|second
init|=
operator|new
name|String
argument_list|()
decl_stmt|;
specifier|private
name|String
name|millisecond
init|=
literal|"000"
decl_stmt|;
specifier|private
name|String
name|timezone
init|=
operator|new
name|String
argument_list|()
decl_stmt|;
specifier|public
name|void
name|setYear
parameter_list|(
name|String
name|year
parameter_list|)
block|{
if|if
condition|(
name|year
operator|.
name|length
argument_list|()
operator|==
literal|2
condition|)
block|{
name|this
operator|.
name|year
operator|=
literal|"20"
operator|+
name|year
expr_stmt|;
block|}
if|if
condition|(
name|year
operator|.
name|length
argument_list|()
operator|==
literal|4
condition|)
block|{
name|this
operator|.
name|year
operator|=
name|year
expr_stmt|;
block|}
block|}
specifier|public
name|void
name|setMonth
parameter_list|(
name|String
name|month
parameter_list|)
block|{
if|if
condition|(
name|month
operator|.
name|length
argument_list|()
operator|==
literal|1
condition|)
block|{
name|this
operator|.
name|month
operator|=
literal|'0'
operator|+
name|month
expr_stmt|;
block|}
if|if
condition|(
name|month
operator|.
name|length
argument_list|()
operator|==
literal|2
condition|)
block|{
name|this
operator|.
name|month
operator|=
name|month
expr_stmt|;
block|}
block|}
specifier|public
name|void
name|setDay
parameter_list|(
name|String
name|day
parameter_list|)
block|{
if|if
condition|(
name|day
operator|.
name|length
argument_list|()
operator|==
literal|1
condition|)
block|{
name|this
operator|.
name|day
operator|=
literal|'0'
operator|+
name|day
expr_stmt|;
block|}
if|if
condition|(
name|day
operator|.
name|length
argument_list|()
operator|==
literal|2
condition|)
block|{
name|this
operator|.
name|day
operator|=
name|day
expr_stmt|;
block|}
block|}
specifier|public
name|void
name|setHour
parameter_list|(
name|String
name|hour
parameter_list|)
block|{
if|if
condition|(
name|hour
operator|.
name|length
argument_list|()
operator|==
literal|1
condition|)
block|{
name|this
operator|.
name|hour
operator|=
literal|'0'
operator|+
name|hour
expr_stmt|;
block|}
if|if
condition|(
name|hour
operator|.
name|length
argument_list|()
operator|==
literal|2
condition|)
block|{
name|this
operator|.
name|hour
operator|=
name|hour
expr_stmt|;
block|}
block|}
specifier|public
name|void
name|setMinute
parameter_list|(
name|String
name|minute
parameter_list|)
block|{
if|if
condition|(
name|minute
operator|.
name|length
argument_list|()
operator|==
literal|1
condition|)
block|{
name|this
operator|.
name|minute
operator|=
literal|'0'
operator|+
name|minute
expr_stmt|;
block|}
if|if
condition|(
name|minute
operator|.
name|length
argument_list|()
operator|==
literal|2
condition|)
block|{
name|this
operator|.
name|minute
operator|=
name|minute
expr_stmt|;
block|}
block|}
specifier|public
name|void
name|setSecond
parameter_list|(
name|String
name|second
parameter_list|)
block|{
if|if
condition|(
name|second
operator|.
name|length
argument_list|()
operator|==
literal|1
condition|)
block|{
name|this
operator|.
name|second
operator|=
literal|'0'
operator|+
name|second
expr_stmt|;
block|}
if|if
condition|(
name|second
operator|.
name|length
argument_list|()
operator|==
literal|2
condition|)
block|{
name|this
operator|.
name|second
operator|=
name|second
expr_stmt|;
block|}
block|}
specifier|public
name|void
name|setTimeZone
parameter_list|(
name|String
name|timezone
parameter_list|)
block|{
if|if
condition|(
name|timezone
operator|.
name|length
argument_list|()
operator|==
literal|5
condition|)
block|{
name|this
operator|.
name|timezone
operator|=
name|timezone
operator|.
name|substring
argument_list|(
literal|0
argument_list|,
literal|1
argument_list|)
operator|+
literal|'0'
operator|+
name|timezone
operator|.
name|substring
argument_list|(
literal|1
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|timezone
operator|.
name|length
argument_list|()
operator|==
literal|6
condition|)
block|{
name|this
operator|.
name|timezone
operator|=
name|timezone
expr_stmt|;
block|}
block|}
specifier|private
name|boolean
name|isCompleteDate
parameter_list|()
block|{
return|return
operator|(
name|year
operator|.
name|length
argument_list|()
operator|==
literal|4
operator|&&
name|month
operator|.
name|length
argument_list|()
operator|==
literal|2
operator|&&
name|day
operator|.
name|length
argument_list|()
operator|==
literal|2
operator|)
return|;
block|}
specifier|private
name|boolean
name|isCompleteDateTime
parameter_list|()
block|{
if|if
condition|(
name|isCompleteDate
argument_list|()
condition|)
block|{
return|return
operator|(
name|hour
operator|.
name|length
argument_list|()
operator|==
literal|2
operator|&&
name|minute
operator|.
name|length
argument_list|()
operator|==
literal|2
operator|&&
name|second
operator|.
name|length
argument_list|()
operator|==
literal|2
operator|&&
name|millisecond
operator|.
name|length
argument_list|()
operator|==
literal|3
operator|&&
name|timezone
operator|.
name|length
argument_list|()
operator|==
literal|6
operator|)
return|;
block|}
return|return
literal|false
return|;
block|}
specifier|public
name|boolean
name|isComplete
parameter_list|()
block|{
return|return
operator|(
name|isCompleteDate
argument_list|()
operator|||
name|isCompleteDateTime
argument_list|()
operator|)
return|;
block|}
specifier|private
name|String
name|toDateString
parameter_list|()
block|{
return|return
operator|new
name|String
argument_list|(
name|year
operator|+
literal|"-"
operator|+
name|month
operator|+
literal|"-"
operator|+
name|day
argument_list|)
return|;
block|}
specifier|private
name|String
name|toDateTimeString
parameter_list|()
block|{
return|return
operator|new
name|String
argument_list|(
name|toDateString
argument_list|()
operator|+
literal|"T"
operator|+
name|hour
operator|+
literal|":"
operator|+
name|minute
operator|+
literal|":"
operator|+
name|second
operator|+
literal|"."
operator|+
name|millisecond
operator|+
name|timezone
argument_list|)
return|;
block|}
specifier|public
name|String
name|toString
parameter_list|()
block|{
if|if
condition|(
name|isCompleteDateTime
argument_list|()
condition|)
return|return
name|toDateTimeString
argument_list|()
return|;
if|if
condition|(
name|isCompleteDate
argument_list|()
condition|)
return|return
name|toDateString
argument_list|()
return|;
return|return
operator|new
name|String
argument_list|()
return|;
block|}
block|}
block|}
end_class

begin_comment
comment|// end of class
end_comment

end_unit

