begin_unit|revision:1.0.0;language:Java;cregit-version:0.0.1
begin_comment
comment|// Copyright 2005 Chibacon
end_comment

begin_comment
comment|/*  *  *    Artistic License  *  *    Preamble  *  *    The intent of this document is to state the conditions under which a Package may be copied, such that  *    the Copyright Holder maintains some semblance of artistic control over the development of the  *    package, while giving the users of the package the right to use and distribute the Package in a  *    more-or-less customary fashion, plus the right to make reasonable modifications.  *  *    Definitions:  *  *    "Package" refers to the collection of files distributed by the Copyright Holder, and derivatives  *    of that collection of files created through textual modification.  *  *    "Standard Version" refers to such a Package if it has not been modified, or has been modified  *    in accordance with the wishes of the Copyright Holder.  *  *    "Copyright Holder" is whoever is named in the copyright or copyrights for the package.  *  *    "You" is you, if you're thinking about copying or distributing this Package.  *  *    "Reasonable copying fee" is whatever you can justify on the basis of media cost, duplication  *    charges, time of people involved, and so on. (You will not be required to justify it to the  *    Copyright Holder, but only to the computing community at large as a market that must bear the  *    fee.)  *  *    "Freely Available" means that no fee is charged for the item itself, though there may be fees  *    involved in handling the item. It also means that recipients of the item may redistribute it under  *    the same conditions they received it.  *  *    1. You may make and give away verbatim copies of the source form of the Standard Version of this  *    Package without restriction, provided that you duplicate all of the original copyright notices and  *    associated disclaimers.  *  *    2. You may apply bug fixes, portability fixes and other modifications derived from the Public Domain  *    or from the Copyright Holder. A Package modified in such a way shall still be considered the  *    Standard Version.  *  *    3. You may otherwise modify your copy of this Package in any way, provided that you insert a  *    prominent notice in each changed file stating how and when you changed that file, and provided that  *    you do at least ONE of the following:  *  *        a) place your modifications in the Public Domain or otherwise make them Freely  *        Available, such as by posting said modifications to Usenet or an equivalent medium, or  *        placing the modifications on a major archive site such as ftp.uu.net, or by allowing the  *        Copyright Holder to include your modifications in the Standard Version of the Package.  *  *        b) use the modified Package only within your corporation or organization.  *  *        c) rename any non-standard executables so the names do not conflict with standard  *        executables, which must also be provided, and provide a separate manual page for each  *        non-standard executable that clearly documents how it differs from the Standard  *        Version.  *  *        d) make other distribution arrangements with the Copyright Holder.  *  *    4. You may distribute the programs of this Package in object code or executable form, provided that  *    you do at least ONE of the following:  *  *        a) distribute a Standard Version of the executables and library files, together with  *        instructions (in the manual page or equivalent) on where to get the Standard Version.  *  *        b) accompany the distribution with the machine-readable source of the Package with  *        your modifications.  *  *        c) accompany any non-standard executables with their corresponding Standard Version  *        executables, giving the non-standard executables non-standard names, and clearly  *        documenting the differences in manual pages (or equivalent), together with instructions  *        on where to get the Standard Version.  *  *        d) make other distribution arrangements with the Copyright Holder.  *  *    5. You may charge a reasonable copying fee for any distribution of this Package. You may charge  *    any fee you choose for support of this Package. You may not charge a fee for this Package itself.  *    However, you may distribute this Package in aggregate with other (possibly commercial) programs as  *    part of a larger (possibly commercial) software distribution provided that you do not advertise this  *    Package as a product of your own.  *  *    6. The scripts and library files supplied as input to or produced as output from the programs of this  *    Package do not automatically fall under the copyright of this Package, but belong to whomever  *    generated them, and may be sold commercially, and may be aggregated with this Package.  *  *    7. C or perl subroutines supplied by you and linked into this Package shall not be considered part of  *    this Package.  *  *    8. The name of the Copyright Holder may not be used to endorse or promote products derived from  *    this software without specific prior written permission.  *  *    9. THIS PACKAGE IS PROVIDED "AS IS" AND WITHOUT ANY EXPRESS OR IMPLIED  *    WARRANTIES, INCLUDING, WITHOUT LIMITATION, THE IMPLIED WARRANTIES OF  *    MERCHANTIBILITY AND FITNESS FOR A PARTICULAR PURPOSE.  *  */
end_comment

begin_package
package|package
name|org
operator|.
name|chiba
operator|.
name|adapter
operator|.
name|servlet
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|log4j
operator|.
name|Category
import|;
end_import

begin_import
import|import
name|org
operator|.
name|chiba
operator|.
name|adapter
operator|.
name|AbstractChibaAdapter
import|;
end_import

begin_import
import|import
name|org
operator|.
name|chiba
operator|.
name|adapter
operator|.
name|ChibaEvent
import|;
end_import

begin_import
import|import
name|org
operator|.
name|chiba
operator|.
name|xml
operator|.
name|events
operator|.
name|ChibaEventNames
import|;
end_import

begin_import
import|import
name|org
operator|.
name|chiba
operator|.
name|xml
operator|.
name|events
operator|.
name|XMLEvent
import|;
end_import

begin_import
import|import
name|org
operator|.
name|chiba
operator|.
name|xml
operator|.
name|xforms
operator|.
name|exception
operator|.
name|XFormsException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|w3c
operator|.
name|dom
operator|.
name|Element
import|;
end_import

begin_import
import|import
name|org
operator|.
name|w3c
operator|.
name|dom
operator|.
name|events
operator|.
name|Event
import|;
end_import

begin_import
import|import
name|org
operator|.
name|w3c
operator|.
name|dom
operator|.
name|events
operator|.
name|EventListener
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|servlet
operator|.
name|http
operator|.
name|HttpServletRequest
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_comment
comment|/**  * integrates XForms Processor into Web-applications and handles request  * processing. This is the default implementation of ChibaAdapter and besides  * handling the interaction it also manages a UIGenerator to build the rendered  * output for the browser.  *  * @author joern turner  * @version $Id: ServletAdapter.java,v 1.11 2006/08/24 11:37:26 unl Exp $  */
end_comment

begin_class
specifier|public
class|class
name|ServletAdapter
extends|extends
name|AbstractChibaAdapter
implements|implements
name|EventListener
block|{
specifier|private
specifier|static
specifier|final
name|Category
name|LOGGER
init|=
name|Category
operator|.
name|getInstance
argument_list|(
name|ServletAdapter
operator|.
name|class
argument_list|)
decl_stmt|;
specifier|public
specifier|static
specifier|final
name|String
name|HTTP_SERVLET_REQUEST
init|=
literal|"chiba.web.request"
decl_stmt|;
comment|//public static final String HTTP_SESSION_OBJECT = "chiba.web.session";
specifier|public
specifier|static
specifier|final
name|String
name|HTTP_UPLOAD_DIR
init|=
literal|"chiba.web.uploadDir"
decl_stmt|;
comment|//private ChibaBean chibaBean = null;
comment|//private String formURI = null;
comment|//private String actionUrl = null;
comment|//private String CSSFile = null;
comment|//private String stylesheet = null;
comment|//private UIGenerator generator = null;
comment|//private String stylesheetPath = null;
comment|//private HashMap context = null;
specifier|public
specifier|static
specifier|final
name|String
name|USERAGENT
init|=
literal|"chiba.useragent"
decl_stmt|;
specifier|public
specifier|static
specifier|final
name|Object
name|XSLT_PATH
init|=
literal|"xslt-path"
decl_stmt|;
specifier|private
name|HttpRequestHandler
name|httpRequestHandler
decl_stmt|;
comment|/**      * Creates a new ServletAdapter object.      */
specifier|public
name|ServletAdapter
parameter_list|()
block|{
name|this
operator|.
name|chibaBean
operator|=
name|createXFormsProcessor
argument_list|()
expr_stmt|;
block|}
comment|/**      * place to put application-specific params or configurations before      * actually starting off the XFormsProcessor. It's the responsibility of      * this method to call chibaBean.init() to finish up the processor setup.      *      * @throws XFormsException If an error occurs      */
specifier|public
name|void
name|init
parameter_list|()
throws|throws
name|XFormsException
block|{
comment|// todo: register for load/replace/message before init
name|this
operator|.
name|chibaBean
operator|.
name|init
argument_list|()
expr_stmt|;
comment|// todo: check for load/replace/message during init, signal to servlet ?
block|}
comment|/**      * ServletAdapter knows and executes only one ChibaEvent: 'http-request'      * which will contain the HttpServletRequest as contextInfo.      *      * @param event only events of type 'http-request' will be handled      * @throws XFormsException      */
specifier|public
name|void
name|dispatch
parameter_list|(
name|ChibaEvent
name|event
parameter_list|)
throws|throws
name|XFormsException
block|{
if|if
condition|(
name|event
operator|.
name|getEventName
argument_list|()
operator|.
name|equalsIgnoreCase
argument_list|(
literal|"http-request"
argument_list|)
condition|)
block|{
name|HttpServletRequest
name|request
init|=
operator|(
name|HttpServletRequest
operator|)
name|event
operator|.
name|getContextInfo
argument_list|()
decl_stmt|;
name|getHttpRequestHandler
argument_list|()
operator|.
name|handleRequest
argument_list|(
name|request
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|LOGGER
operator|.
name|warn
argument_list|(
literal|"ignoring unknown event '"
operator|+
name|event
operator|.
name|getEventName
argument_list|()
operator|+
literal|"'"
argument_list|)
expr_stmt|;
block|}
block|}
comment|/**      * terminates the XForms processing. right place to do cleanup of      * resources.      *      * @throws org.chiba.xml.xforms.exception.XFormsException      */
specifier|public
name|void
name|shutdown
parameter_list|()
throws|throws
name|XFormsException
block|{
name|this
operator|.
name|chibaBean
operator|.
name|shutdown
argument_list|()
expr_stmt|;
block|}
comment|// todo: remove
comment|/**      * Instructs the application environment to forward the given response.      *      * @param response a map containing at least a response stream and optional      * header information.      * @deprecated      */
specifier|public
name|void
name|forward
parameter_list|(
name|Map
name|response
parameter_list|)
block|{
name|this
operator|.
name|chibaBean
operator|.
name|getContext
argument_list|()
operator|.
name|put
argument_list|(
name|SUBMISSION_RESPONSE
argument_list|,
name|response
argument_list|)
expr_stmt|;
block|}
comment|// event handling
comment|// todo: should be moved up to base class
comment|/**      * This method is called whenever an event occurs of the type for which the      *<code> EventListener</code> interface was registered.      *      * @param event The<code>Event</code> contains contextual information about      * the event. It also contains the<code>stopPropagation</code> and      *<code>preventDefault</code> methods which are used in determining the      * event's flow and default action.      */
specifier|public
name|void
name|handleEvent
parameter_list|(
name|Event
name|event
parameter_list|)
block|{
name|String
name|type
init|=
name|event
operator|.
name|getType
argument_list|()
decl_stmt|;
name|String
name|targetId
init|=
operator|(
operator|(
name|Element
operator|)
name|event
operator|.
name|getTarget
argument_list|()
operator|)
operator|.
name|getAttributeNS
argument_list|(
literal|null
argument_list|,
literal|"id"
argument_list|)
decl_stmt|;
name|XMLEvent
name|xmlEvent
init|=
operator|(
name|XMLEvent
operator|)
name|event
decl_stmt|;
if|if
condition|(
name|ChibaEventNames
operator|.
name|LOAD_URI
operator|.
name|equals
argument_list|(
name|type
argument_list|)
condition|)
block|{
name|handleLoadURI
argument_list|(
name|targetId
argument_list|,
operator|(
name|String
operator|)
name|xmlEvent
operator|.
name|getContextInfo
argument_list|(
literal|"uri"
argument_list|)
argument_list|,
operator|(
name|String
operator|)
name|xmlEvent
operator|.
name|getContextInfo
argument_list|(
literal|"show"
argument_list|)
argument_list|)
expr_stmt|;
return|return;
block|}
if|if
condition|(
name|ChibaEventNames
operator|.
name|RENDER_MESSAGE
operator|.
name|equals
argument_list|(
name|type
argument_list|)
condition|)
block|{
name|handleMessage
argument_list|(
name|targetId
argument_list|,
operator|(
name|String
operator|)
name|xmlEvent
operator|.
name|getContextInfo
argument_list|(
literal|"message"
argument_list|)
argument_list|,
operator|(
name|String
operator|)
name|xmlEvent
operator|.
name|getContextInfo
argument_list|(
literal|"level"
argument_list|)
argument_list|)
expr_stmt|;
return|return;
block|}
if|if
condition|(
name|ChibaEventNames
operator|.
name|REPLACE_ALL
operator|.
name|equals
argument_list|(
name|type
argument_list|)
condition|)
block|{
name|handleReplaceAll
argument_list|(
name|targetId
argument_list|,
operator|(
name|Map
operator|)
name|xmlEvent
operator|.
name|getContextInfo
argument_list|(
literal|"header"
argument_list|)
argument_list|,
name|xmlEvent
operator|.
name|getContextInfo
argument_list|(
literal|"body"
argument_list|)
argument_list|)
expr_stmt|;
return|return;
block|}
comment|// unknown event ignored
block|}
comment|// todo: *either* move up these three methods as abstract template methods *or* use event log ?
specifier|public
name|void
name|handleLoadURI
parameter_list|(
name|String
name|targetId
parameter_list|,
name|String
name|uri
parameter_list|,
name|String
name|show
parameter_list|)
block|{
comment|// todo
block|}
specifier|public
name|void
name|handleMessage
parameter_list|(
name|String
name|targetId
parameter_list|,
name|String
name|message
parameter_list|,
name|String
name|level
parameter_list|)
block|{
comment|// todo
block|}
specifier|public
name|void
name|handleReplaceAll
parameter_list|(
name|String
name|targetId
parameter_list|,
name|Map
name|header
parameter_list|,
name|Object
name|body
parameter_list|)
block|{
comment|// todo
block|}
comment|// todo: should be moved up to web adapter
specifier|protected
name|HttpRequestHandler
name|getHttpRequestHandler
parameter_list|()
block|{
if|if
condition|(
name|this
operator|.
name|httpRequestHandler
operator|==
literal|null
condition|)
block|{
name|this
operator|.
name|httpRequestHandler
operator|=
operator|new
name|HttpRequestHandler
argument_list|(
name|this
operator|.
name|chibaBean
argument_list|)
expr_stmt|;
name|this
operator|.
name|httpRequestHandler
operator|.
name|setUploadRoot
argument_list|(
name|this
operator|.
name|uploadDestination
argument_list|)
expr_stmt|;
block|}
return|return
name|this
operator|.
name|httpRequestHandler
return|;
block|}
block|}
end_class

begin_comment
comment|// end of class
end_comment

end_unit

