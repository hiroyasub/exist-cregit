begin_unit|revision:1.0.0;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  *  XFormsFilter  *  Copyright (C) 2006 Adam Retter, Devon Portal Project<adam.retter@devon.gov.uk>  *  www.devonline.gov.uk  *    *  This program is free software; you can redistribute it and/or  *  modify it under the terms of the GNU Lesser General Public License  *  as published by the Free Software Foundation; either version 2  *  of the License, or (at your option) any later version.  *    *  This program is distributed in the hope that it will be useful,  *  but WITHOUT ANY WARRANTY; without even the implied warranty of  *  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the  *  GNU Lesser General Public License for more details.  *    *  You should have received a copy of the GNU Lesser General Public License  *  along with this program; if not, write to the Free Software  *  Foundation, Inc., 675 Mass Ave, Cambridge, MA 02139, USA.  *    *  $Id$  */
end_comment

begin_package
package|package
name|uk
operator|.
name|gov
operator|.
name|devonline
operator|.
name|www
operator|.
name|xforms
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|BufferedOutputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|ByteArrayInputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|File
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|InputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|OutputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|lang
operator|.
name|Integer
import|;
end_import

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|URI
import|;
end_import

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|URISyntaxException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Enumeration
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Iterator
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|servlet
operator|.
name|Filter
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|servlet
operator|.
name|FilterChain
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|servlet
operator|.
name|FilterConfig
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|servlet
operator|.
name|http
operator|.
name|HttpServletRequest
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|servlet
operator|.
name|http
operator|.
name|HttpServletResponse
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|servlet
operator|.
name|http
operator|.
name|HttpSession
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|servlet
operator|.
name|ServletException
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|servlet
operator|.
name|ServletRequest
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|servlet
operator|.
name|ServletResponse
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|xml
operator|.
name|transform
operator|.
name|TransformerFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|httpclient
operator|.
name|Cookie
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|log4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|chiba
operator|.
name|adapter
operator|.
name|ChibaAdapter
import|;
end_import

begin_import
import|import
name|org
operator|.
name|chiba
operator|.
name|adapter
operator|.
name|ChibaEvent
import|;
end_import

begin_import
import|import
name|org
operator|.
name|chiba
operator|.
name|adapter
operator|.
name|DefaultChibaEventImpl
import|;
end_import

begin_import
import|import
name|org
operator|.
name|chiba
operator|.
name|adapter
operator|.
name|ui
operator|.
name|UIGenerator
import|;
end_import

begin_import
import|import
name|org
operator|.
name|chiba
operator|.
name|adapter
operator|.
name|ui
operator|.
name|XSLTGenerator
import|;
end_import

begin_import
import|import
name|org
operator|.
name|chiba
operator|.
name|web
operator|.
name|WebAdapter
import|;
end_import

begin_import
import|import
name|org
operator|.
name|chiba
operator|.
name|web
operator|.
name|servlet
operator|.
name|ChibaServlet
import|;
end_import

begin_import
import|import
name|org
operator|.
name|chiba
operator|.
name|web
operator|.
name|servlet
operator|.
name|HttpRequestHandler
import|;
end_import

begin_import
import|import
name|org
operator|.
name|chiba
operator|.
name|web
operator|.
name|servlet
operator|.
name|ServletAdapter
import|;
end_import

begin_import
import|import
name|org
operator|.
name|chiba
operator|.
name|web
operator|.
name|session
operator|.
name|XFormsSession
import|;
end_import

begin_import
import|import
name|org
operator|.
name|chiba
operator|.
name|web
operator|.
name|session
operator|.
name|XFormsSessionManager
import|;
end_import

begin_import
import|import
name|org
operator|.
name|chiba
operator|.
name|web
operator|.
name|session
operator|.
name|impl
operator|.
name|DefaultXFormsSessionManagerImpl
import|;
end_import

begin_import
import|import
name|org
operator|.
name|chiba
operator|.
name|xml
operator|.
name|events
operator|.
name|ChibaEventNames
import|;
end_import

begin_import
import|import
name|org
operator|.
name|chiba
operator|.
name|xml
operator|.
name|events
operator|.
name|XMLEvent
import|;
end_import

begin_import
import|import
name|org
operator|.
name|chiba
operator|.
name|xml
operator|.
name|xforms
operator|.
name|config
operator|.
name|Config
import|;
end_import

begin_import
import|import
name|org
operator|.
name|chiba
operator|.
name|xml
operator|.
name|xforms
operator|.
name|config
operator|.
name|XFormsConfigException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|chiba
operator|.
name|xml
operator|.
name|xforms
operator|.
name|connector
operator|.
name|http
operator|.
name|AbstractHTTPConnector
import|;
end_import

begin_import
import|import
name|org
operator|.
name|chiba
operator|.
name|xml
operator|.
name|xforms
operator|.
name|exception
operator|.
name|XFormsException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|chiba
operator|.
name|xml
operator|.
name|xslt
operator|.
name|TransformerService
import|;
end_import

begin_import
import|import
name|org
operator|.
name|chiba
operator|.
name|xml
operator|.
name|xslt
operator|.
name|impl
operator|.
name|CachingTransformerService
import|;
end_import

begin_import
import|import
name|org
operator|.
name|chiba
operator|.
name|xml
operator|.
name|xslt
operator|.
name|impl
operator|.
name|FileResourceResolver
import|;
end_import

begin_comment
comment|/**  * A Servlet Filter to provide XForms functionality to existing Servlets  *   * Currently borrows heavily from org.chiba.web.servlet.* in particular ChibaServlet  *   *   * @author Adam Retter  * @version 1.2  * @serial 2006-12-15T13:41  *   *   * Initialization parameters for the ServletFilter  *   * chiba.denug							true or false indicating if Chiba should run in debug mode  * chiba.config							Path to Chiba's configuration file  * chiba.upload							Path to upload temporary files to  * chiba.xslt.cache						true or false indicating if Chiba should Cache XSLT  * chiba.web.xslt.path					Path to XSLT location  * chiba.web.xslt.default				XSLT file in XSLT_STYLESHEET_PATH to use for processing  * chiba.CSSPath						Path to xforms.css to use, relevant to servlet context  * chiba.XFormsSessionChecking			Period in milliseconds that XForms sessions should be checked  * chiba.XFormsSessionTimeout			Period in milliseconds of XForms session expiry when inactive  */
end_comment

begin_class
specifier|public
class|class
name|XFormsFilter
implements|implements
name|Filter
block|{
specifier|protected
specifier|final
specifier|static
name|Logger
name|LOG
init|=
name|Logger
operator|.
name|getLogger
argument_list|(
name|XFormsFilter
operator|.
name|class
argument_list|)
decl_stmt|;
specifier|private
name|FilterConfig
name|filterConfig
init|=
literal|null
decl_stmt|;
specifier|private
specifier|final
specifier|static
name|boolean
name|DEFAULT_CHIBA_DEBUG
init|=
literal|true
decl_stmt|;
specifier|private
specifier|final
specifier|static
name|String
name|DEFAULT_CHIBA_CONFIG
init|=
literal|"/eXist/tools/XFormsFilter/chiba.default.xml"
decl_stmt|;
specifier|private
specifier|final
specifier|static
name|String
name|DEFAULT_CHIBA_TEMP_UPLOAD_DESTINATION
init|=
literal|"/tmp"
decl_stmt|;
specifier|private
specifier|final
specifier|static
name|boolean
name|DEFAULT_CHIBA_XSLT_CACHE
init|=
literal|true
decl_stmt|;
specifier|private
specifier|final
specifier|static
name|String
name|DEFAULT_CHIBA_STYLESHEET_PATH
init|=
literal|"/exist/tools/XFormsFilter/xslt"
decl_stmt|;
specifier|private
specifier|final
specifier|static
name|String
name|DEFAULT_CHIBA_STYLESHEET_FILE
init|=
literal|"xhtml.xsl"
decl_stmt|;
specifier|private
specifier|final
specifier|static
name|String
name|DEFAULT_CHIBA_CSS_PATH
init|=
literal|"/servlet/db/system/xformsfilter"
decl_stmt|;
specifier|private
specifier|final
specifier|static
name|int
name|DEFAULT_CHIBA_XFORMS_SESSION_CHECKING
init|=
literal|300000
decl_stmt|;
specifier|private
specifier|final
specifier|static
name|int
name|DEFAULT_CHIBA_XFORMS_SESSION_TIMEOUT
init|=
literal|1200000
decl_stmt|;
specifier|private
name|boolean
name|CHIBA_DEBUG
init|=
name|DEFAULT_CHIBA_DEBUG
decl_stmt|;
specifier|private
name|String
name|CHIBA_CONFIG
init|=
name|DEFAULT_CHIBA_CONFIG
decl_stmt|;
specifier|private
name|String
name|CHIBA_TEMP_UPLOAD_DESTINATION
init|=
name|DEFAULT_CHIBA_TEMP_UPLOAD_DESTINATION
decl_stmt|;
specifier|private
name|boolean
name|CHIBA_XSLT_CACHE
init|=
name|DEFAULT_CHIBA_XSLT_CACHE
decl_stmt|;
specifier|private
name|String
name|CHIBA_STYLESHEET_PATH
init|=
name|DEFAULT_CHIBA_STYLESHEET_PATH
decl_stmt|;
specifier|private
name|String
name|CHIBA_STYLESHEET_FILE
init|=
name|DEFAULT_CHIBA_STYLESHEET_FILE
decl_stmt|;
specifier|private
name|String
name|CHIBA_CSS_PATH
init|=
name|DEFAULT_CHIBA_CSS_PATH
decl_stmt|;
specifier|private
name|int
name|CHIBA_XFORMS_SESSION_CHECKING
init|=
name|DEFAULT_CHIBA_XFORMS_SESSION_CHECKING
decl_stmt|;
specifier|private
name|int
name|CHIBA_XFORMS_SESSION_TIMEOUT
init|=
name|DEFAULT_CHIBA_XFORMS_SESSION_TIMEOUT
decl_stmt|;
specifier|protected
specifier|static
specifier|final
name|String
name|HTML_CONTENT_TYPE
init|=
literal|"text/html;charset=UTF-8"
decl_stmt|;
specifier|private
specifier|final
specifier|static
name|String
index|[]
name|CHIBA_QUERYSTRING_PARAMS
init|=
block|{
literal|"form"
block|,
literal|"xslt"
block|,
literal|"action_url"
block|,
literal|"JavaScript"
block|}
decl_stmt|;
comment|/** 	 * Filter initialisation 	 *  	 * @see http://java.sun.com/j2ee/sdk_1.3/techdocs/api/javax/servlet/Filter.html#init(javax.servlet.FilterConfig) 	 */
specifier|public
name|void
name|init
parameter_list|(
name|FilterConfig
name|filterConfig
parameter_list|)
throws|throws
name|ServletException
block|{
name|this
operator|.
name|filterConfig
operator|=
name|filterConfig
expr_stmt|;
name|setupConfig
argument_list|()
expr_stmt|;
name|setupTransformerService
argument_list|()
expr_stmt|;
name|createXFormsSessionManager
argument_list|()
expr_stmt|;
block|}
comment|/** 	 * Filter shutdown 	 *  	 * @see http://java.sun.com/j2ee/sdk_1.3/techdocs/api/javax/servlet/Filter.html#destroy() 	 */
specifier|public
name|void
name|destroy
parameter_list|()
block|{
comment|// TODO Auto-generated method stub
block|}
comment|/** 	 * Set's up variables from the filter configuration 	 */
specifier|private
name|void
name|setupConfig
parameter_list|()
block|{
if|if
condition|(
name|filterConfig
operator|.
name|getInitParameter
argument_list|(
literal|"chiba.debug"
argument_list|)
operator|!=
literal|null
condition|)
block|{
name|CHIBA_DEBUG
operator|=
name|filterConfig
operator|.
name|getInitParameter
argument_list|(
literal|"chiba.debug"
argument_list|)
operator|.
name|toLowerCase
argument_list|()
operator|.
name|equals
argument_list|(
literal|"true"
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|filterConfig
operator|.
name|getInitParameter
argument_list|(
literal|"chiba.config"
argument_list|)
operator|!=
literal|null
condition|)
block|{
name|CHIBA_CONFIG
operator|=
name|filterConfig
operator|.
name|getInitParameter
argument_list|(
literal|"chiba.config"
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|filterConfig
operator|.
name|getInitParameter
argument_list|(
literal|"chiba.upload"
argument_list|)
operator|!=
literal|null
condition|)
block|{
name|CHIBA_TEMP_UPLOAD_DESTINATION
operator|=
name|filterConfig
operator|.
name|getInitParameter
argument_list|(
literal|"chiba.upload"
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|filterConfig
operator|.
name|getInitParameter
argument_list|(
literal|"chiba.xslt.cache"
argument_list|)
operator|!=
literal|null
condition|)
block|{
name|CHIBA_XSLT_CACHE
operator|=
name|filterConfig
operator|.
name|getInitParameter
argument_list|(
literal|"chiba.xslt.cache"
argument_list|)
operator|.
name|toLowerCase
argument_list|()
operator|.
name|equals
argument_list|(
literal|"true"
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|filterConfig
operator|.
name|getInitParameter
argument_list|(
literal|"chiba.web.xslt.path"
argument_list|)
operator|!=
literal|null
condition|)
block|{
name|CHIBA_STYLESHEET_PATH
operator|=
name|filterConfig
operator|.
name|getInitParameter
argument_list|(
literal|"chiba.web.xslt.path"
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|filterConfig
operator|.
name|getInitParameter
argument_list|(
literal|"chiba.web.xslt.default"
argument_list|)
operator|!=
literal|null
condition|)
block|{
name|CHIBA_STYLESHEET_FILE
operator|=
name|filterConfig
operator|.
name|getInitParameter
argument_list|(
literal|"chiba.web.xslt.default"
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|filterConfig
operator|.
name|getInitParameter
argument_list|(
literal|"chiba.CSSPath"
argument_list|)
operator|!=
literal|null
condition|)
block|{
name|CHIBA_CSS_PATH
operator|=
name|filterConfig
operator|.
name|getInitParameter
argument_list|(
literal|"chiba.CSSPath"
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|filterConfig
operator|.
name|getInitParameter
argument_list|(
literal|"chiba.XFormsSessionChecking"
argument_list|)
operator|!=
literal|null
condition|)
block|{
name|CHIBA_XFORMS_SESSION_CHECKING
operator|=
name|Integer
operator|.
name|parseInt
argument_list|(
name|filterConfig
operator|.
name|getInitParameter
argument_list|(
literal|"chiba.XFormsSessionChecking"
argument_list|)
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|filterConfig
operator|.
name|getInitParameter
argument_list|(
literal|"chiba.XFormsSessionTimeout"
argument_list|)
operator|!=
literal|null
condition|)
block|{
name|CHIBA_XFORMS_SESSION_TIMEOUT
operator|=
name|Integer
operator|.
name|parseInt
argument_list|(
name|filterConfig
operator|.
name|getInitParameter
argument_list|(
literal|"chiba.XFormsSessionTimeout"
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
specifier|private
name|void
name|setupTransformerService
parameter_list|()
throws|throws
name|ServletException
block|{
name|TransformerService
name|transformerService
init|=
operator|new
name|CachingTransformerService
argument_list|(
operator|new
name|FileResourceResolver
argument_list|()
argument_list|)
decl_stmt|;
name|transformerService
operator|.
name|setTransformerFactory
argument_list|(
name|TransformerFactory
operator|.
name|newInstance
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|CHIBA_XSLT_CACHE
condition|)
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"initializing xslt cache"
argument_list|)
expr_stmt|;
comment|// load default stylesheet
comment|// todo: extract parameter names
try|try
block|{
name|URI
name|uri
init|=
operator|new
name|File
argument_list|(
name|CHIBA_STYLESHEET_PATH
argument_list|)
operator|.
name|toURI
argument_list|()
operator|.
name|resolve
argument_list|(
operator|new
name|URI
argument_list|(
name|CHIBA_STYLESHEET_FILE
argument_list|)
argument_list|)
decl_stmt|;
name|transformerService
operator|.
name|getTransformer
argument_list|(
name|uri
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|ServletException
argument_list|(
name|e
argument_list|)
throw|;
block|}
block|}
comment|// store service in servlet context
comment|// todo: contemplate about transformer service thread-safety
name|filterConfig
operator|.
name|getServletContext
argument_list|()
operator|.
name|setAttribute
argument_list|(
name|TransformerService
operator|.
name|class
operator|.
name|getName
argument_list|()
argument_list|,
name|transformerService
argument_list|)
expr_stmt|;
block|}
specifier|private
name|void
name|createXFormsSessionManager
parameter_list|()
block|{
name|XFormsSessionManager
name|manager
init|=
name|DefaultXFormsSessionManagerImpl
operator|.
name|getInstance
argument_list|()
decl_stmt|;
name|manager
operator|.
name|setInterval
argument_list|(
name|CHIBA_XFORMS_SESSION_CHECKING
argument_list|)
expr_stmt|;
name|manager
operator|.
name|setTimeout
argument_list|(
name|CHIBA_XFORMS_SESSION_TIMEOUT
argument_list|)
expr_stmt|;
comment|//start running the session cleanup
name|manager
operator|.
name|init
argument_list|()
expr_stmt|;
block|}
comment|/** 	 * The actual filtering method 	 *  	 * @see http://java.sun.com/j2ee/sdk_1.3/techdocs/api/javax/servlet/Filter.html#doFilter(javax.servlet.ServletRequest,%20javax.servlet.ServletResponse,%20javax.servlet.FilterChain) 	 */
specifier|public
name|void
name|doFilter
parameter_list|(
name|ServletRequest
name|srvRequest
parameter_list|,
name|ServletResponse
name|srvResponse
parameter_list|,
name|FilterChain
name|filterChain
parameter_list|)
throws|throws
name|IOException
throws|,
name|ServletException
block|{
comment|/* before servlet request */
if|if
condition|(
name|isXFormUpdateRequest
argument_list|(
name|srvRequest
argument_list|)
condition|)
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"Start Update XForm"
argument_list|)
expr_stmt|;
name|updateXForm
argument_list|(
name|srvRequest
argument_list|,
name|srvResponse
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"End Update XForm"
argument_list|)
expr_stmt|;
block|}
else|else
block|{
comment|/* do servlet request */
name|LOG
operator|.
name|info
argument_list|(
literal|"Passing to Chain"
argument_list|)
expr_stmt|;
name|BufferedHttpServletResponseWrapper
name|bufResponse
init|=
operator|new
name|BufferedHttpServletResponseWrapper
argument_list|(
operator|(
name|HttpServletResponse
operator|)
name|srvResponse
argument_list|)
decl_stmt|;
name|filterChain
operator|.
name|doFilter
argument_list|(
name|srvRequest
argument_list|,
name|bufResponse
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"Returned from Chain"
argument_list|)
expr_stmt|;
comment|/* after servlet request */
if|if
condition|(
name|hasXForm
argument_list|(
name|bufResponse
argument_list|)
condition|)
block|{
name|bufResponse
operator|.
name|getOutputStream
argument_list|()
operator|.
name|close
argument_list|()
expr_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"Start Render XForm"
argument_list|)
expr_stmt|;
comment|//remove DOCTYPE PI if it exists, Xerces in Chiba otherwise may try to download the system DTD (can cause latency problems)
name|byte
index|[]
name|data
init|=
name|removeDocumentTypePI
argument_list|(
name|bufResponse
operator|.
name|getData
argument_list|()
argument_list|)
decl_stmt|;
comment|//correct the<xforms:instance> xmlns="" problem (workaround for namespace problems in eXist)
name|data
operator|=
name|correctInstanceXMLNS
argument_list|(
name|data
argument_list|)
expr_stmt|;
name|renderXForm
argument_list|(
operator|new
name|ByteArrayInputStream
argument_list|(
name|data
argument_list|)
argument_list|,
name|srvRequest
argument_list|,
name|srvResponse
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"End Render XForm"
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|srvResponse
operator|.
name|getOutputStream
argument_list|()
operator|.
name|write
argument_list|(
name|bufResponse
operator|.
name|getData
argument_list|()
argument_list|)
expr_stmt|;
name|srvResponse
operator|.
name|getOutputStream
argument_list|()
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
block|}
block|}
comment|/** 	 * Removes the DOCTYPE Processing Instruction from the content if it exists 	 *  	 * @param content	The HTML page content 	 *  	 * @return	The content without the DOCTYPE PI  	 */
specifier|public
name|byte
index|[]
name|removeDocumentTypePI
parameter_list|(
name|byte
index|[]
name|content
parameter_list|)
block|{
name|String
name|buf
init|=
operator|new
name|String
argument_list|(
name|content
argument_list|)
decl_stmt|;
name|int
name|iStartDoctype
init|=
name|buf
operator|.
name|indexOf
argument_list|(
literal|"<!DOCTYPE"
argument_list|)
decl_stmt|;
if|if
condition|(
name|iStartDoctype
operator|>
operator|-
literal|1
condition|)
block|{
name|int
name|iEndDoctype
init|=
name|buf
operator|.
name|indexOf
argument_list|(
literal|'>'
argument_list|,
name|iStartDoctype
argument_list|)
decl_stmt|;
name|String
name|newBuf
init|=
name|buf
operator|.
name|substring
argument_list|(
literal|0
argument_list|,
name|iStartDoctype
operator|-
literal|1
argument_list|)
decl_stmt|;
name|newBuf
operator|+=
name|buf
operator|.
name|substring
argument_list|(
name|iEndDoctype
operator|+
literal|1
argument_list|)
expr_stmt|;
return|return
name|newBuf
operator|.
name|getBytes
argument_list|()
return|;
block|}
return|return
name|content
return|;
block|}
comment|/** 	 * Inserts the attribute xmlns="" on the xforms:instance node if it is missing 	 *  	 * @param content	The HTML page content 	 *  	 * @return	The content with the corrected xforms:instance  	 */
specifier|public
name|byte
index|[]
name|correctInstanceXMLNS
parameter_list|(
name|byte
index|[]
name|content
parameter_list|)
block|{
name|String
name|buf
init|=
operator|new
name|String
argument_list|(
name|content
argument_list|)
decl_stmt|;
if|if
condition|(
name|buf
operator|.
name|indexOf
argument_list|(
literal|"<xforms:instance xmlns=\"\">"
argument_list|)
operator|==
operator|-
literal|1
condition|)
block|{
name|String
name|newBuf
init|=
name|buf
operator|.
name|replace
argument_list|(
literal|"<xforms:instance>"
argument_list|,
literal|"<xforms:instance xmlns=\"\">"
argument_list|)
decl_stmt|;
return|return
name|newBuf
operator|.
name|getBytes
argument_list|()
return|;
block|}
return|return
name|content
return|;
block|}
comment|/** 	 * Checks if the request is to update an XForm 	 *  	 * @param srvRequest	The request 	 *  	 * @return true if the request is to update an XForm, false otherwise  	 */
specifier|public
name|boolean
name|isXFormUpdateRequest
parameter_list|(
name|ServletRequest
name|srvRequest
parameter_list|)
block|{
comment|//get the http request object
name|HttpServletRequest
name|request
init|=
operator|(
name|HttpServletRequest
operator|)
name|srvRequest
decl_stmt|;
comment|//must be a POST request
if|if
condition|(
operator|!
name|request
operator|.
name|getMethod
argument_list|()
operator|.
name|equals
argument_list|(
literal|"POST"
argument_list|)
condition|)
return|return
literal|false
return|;
comment|//get the Chiba Adapter from the session
name|String
name|key
init|=
name|request
operator|.
name|getParameter
argument_list|(
literal|"sessionKey"
argument_list|)
decl_stmt|;
if|if
condition|(
name|key
operator|==
literal|null
condition|)
return|return
literal|false
return|;
name|XFormsSessionManager
name|manager
init|=
operator|(
name|XFormsSessionManager
operator|)
name|request
operator|.
name|getSession
argument_list|()
operator|.
name|getAttribute
argument_list|(
name|XFormsSessionManager
operator|.
name|XFORMS_SESSION_MANAGER
argument_list|)
decl_stmt|;
name|XFormsSession
name|xFormsSession
init|=
name|manager
operator|.
name|getXFormsSession
argument_list|(
name|key
argument_list|)
decl_stmt|;
if|if
condition|(
name|xFormsSession
operator|==
literal|null
condition|)
return|return
literal|false
return|;
comment|//ChibaAdapter adapter = (ChibaAdapter)request.getSession().getAttribute(SESSION_CHIBA_ADAPTER);
name|WebAdapter
name|adapter
init|=
name|xFormsSession
operator|.
name|getAdapter
argument_list|()
decl_stmt|;
if|if
condition|(
name|adapter
operator|==
literal|null
condition|)
return|return
literal|false
return|;
name|String
name|actionURL
decl_stmt|;
if|if
condition|(
name|request
operator|.
name|getQueryString
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|actionURL
operator|=
name|request
operator|.
name|getRequestURL
argument_list|()
operator|+
literal|"?"
operator|+
name|request
operator|.
name|getQueryString
argument_list|()
expr_stmt|;
block|}
else|else
block|{
name|actionURL
operator|=
name|request
operator|.
name|getRequestURL
argument_list|()
operator|.
name|toString
argument_list|()
expr_stmt|;
block|}
comment|//remove the sessionKey (if any) before comparing the action URL
name|int
name|posSessionKey
init|=
name|actionURL
operator|.
name|indexOf
argument_list|(
literal|"sessionKey"
argument_list|)
decl_stmt|;
if|if
condition|(
name|posSessionKey
operator|>
operator|-
literal|1
condition|)
block|{
name|char
name|preSep
init|=
name|actionURL
operator|.
name|charAt
argument_list|(
name|posSessionKey
operator|-
literal|1
argument_list|)
decl_stmt|;
if|if
condition|(
name|preSep
operator|==
literal|'?'
condition|)
block|{
if|if
condition|(
name|actionURL
operator|.
name|indexOf
argument_list|(
literal|'&'
argument_list|)
operator|>
operator|-
literal|1
condition|)
block|{
name|actionURL
operator|=
name|actionURL
operator|.
name|substring
argument_list|(
literal|0
argument_list|,
name|posSessionKey
argument_list|)
operator|+
name|actionURL
operator|.
name|substring
argument_list|(
name|actionURL
operator|.
name|indexOf
argument_list|(
literal|'&'
argument_list|)
operator|+
literal|1
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|actionURL
operator|=
name|actionURL
operator|.
name|substring
argument_list|(
literal|0
argument_list|,
name|posSessionKey
operator|-
literal|1
argument_list|)
expr_stmt|;
block|}
block|}
if|else if
condition|(
name|preSep
operator|==
literal|'&'
condition|)
block|{
name|actionURL
operator|=
name|actionURL
operator|.
name|substring
argument_list|(
literal|0
argument_list|,
name|posSessionKey
operator|-
literal|1
argument_list|)
expr_stmt|;
block|}
block|}
comment|//if the action-url in the adapters context param is the same as that of the action url then we know we are updating
return|return
operator|(
name|adapter
operator|.
name|getContextParam
argument_list|(
literal|"action-url"
argument_list|)
operator|.
name|equals
argument_list|(
name|actionURL
argument_list|)
operator|)
return|;
block|}
comment|/** 	 * Checks if the response contains an XForm 	 *  	 * @param bufResponse	The buffered response 	 *  	 * @return true if the response contains an XForm, false otherwise  	 */
specifier|public
name|boolean
name|hasXForm
parameter_list|(
name|BufferedHttpServletResponseWrapper
name|bufResponse
parameter_list|)
block|{
name|String
name|strResponse
init|=
name|bufResponse
operator|.
name|getDataAsString
argument_list|()
decl_stmt|;
if|if
condition|(
name|strResponse
operator|.
name|contains
argument_list|(
operator|new
name|String
argument_list|(
literal|"<xforms:model"
argument_list|)
argument_list|)
operator|&&
name|strResponse
operator|.
name|contains
argument_list|(
operator|new
name|String
argument_list|(
literal|"<xforms:instance"
argument_list|)
argument_list|)
condition|)
block|{
return|return
literal|true
return|;
block|}
return|return
literal|false
return|;
block|}
comment|/** 	 * Renders an XForm described in bufServletResponseWrapper using the Chiba XForms Engine 	 *  	 *  @param srvRequest	The Servlet request object 	 *  @param bufServletResponseWrapper	The response from the Servlet 	 */
specifier|public
name|void
name|renderXForm
parameter_list|(
name|InputStream
name|isXForm
parameter_list|,
name|ServletRequest
name|srvRequest
parameter_list|,
name|ServletResponse
name|srvResponse
parameter_list|)
block|{
name|HttpServletRequest
name|request
init|=
operator|(
name|HttpServletRequest
operator|)
name|srvRequest
decl_stmt|;
name|HttpServletResponse
name|response
init|=
operator|(
name|HttpServletResponse
operator|)
name|srvResponse
decl_stmt|;
name|HttpSession
name|session
init|=
name|request
operator|.
name|getSession
argument_list|(
literal|true
argument_list|)
decl_stmt|;
name|WebAdapter
name|adapter
init|=
literal|null
decl_stmt|;
comment|/*         the XFormsSessionManager is kept in the http-session though it is accessible as singleton. Subsequent         servlets should access the manager through the http-session attribute as below to ensure the http-session         is refreshed.         */
name|XFormsSessionManager
name|sessionManager
init|=
name|getXFormsSessionManager
argument_list|()
decl_stmt|;
name|XFormsSession
name|xFormsSession
init|=
name|sessionManager
operator|.
name|createXFormsSession
argument_list|()
decl_stmt|;
name|session
operator|.
name|setAttribute
argument_list|(
name|XFormsSessionManager
operator|.
name|XFORMS_SESSION_MANAGER
argument_list|,
name|sessionManager
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|debug
argument_list|(
literal|"Created XFormsSession with key: "
operator|+
name|xFormsSession
operator|.
name|getKey
argument_list|()
argument_list|)
expr_stmt|;
comment|//Dont set in filter -> is set by servlet!
comment|/*         request.setCharacterEncoding("UTF-8");         response.setHeader("Cache-Control","private, no-store,  no-cache, must-revalidate");         response.setHeader("Pragma","no-cache");         response.setDateHeader("Expires",-1);         */
try|try
block|{
comment|//get the base URI
name|String
name|baseURI
init|=
name|request
operator|.
name|getRequestURL
argument_list|()
operator|.
name|toString
argument_list|()
decl_stmt|;
comment|//get the action URL
name|String
name|actionURL
decl_stmt|;
if|if
condition|(
name|request
operator|.
name|getQueryString
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|actionURL
operator|=
name|request
operator|.
name|getRequestURL
argument_list|()
operator|+
literal|"?"
operator|+
name|request
operator|.
name|getQueryString
argument_list|()
expr_stmt|;
block|}
else|else
block|{
name|actionURL
operator|=
name|request
operator|.
name|getRequestURL
argument_list|()
operator|.
name|toString
argument_list|()
expr_stmt|;
block|}
comment|//new chiba adapter (ServletAdapter for HTML/XForms | FluxAdapter for AJAX/XForms)
name|adapter
operator|=
operator|new
name|ServletAdapter
argument_list|()
expr_stmt|;
name|adapter
operator|=
name|setupAdapter
argument_list|(
name|adapter
argument_list|,
name|xFormsSession
argument_list|,
name|baseURI
argument_list|,
name|isXForm
argument_list|)
expr_stmt|;
name|setContextParams
argument_list|(
name|request
argument_list|,
name|adapter
argument_list|)
expr_stmt|;
name|storeCookies
argument_list|(
name|request
argument_list|,
name|adapter
argument_list|)
expr_stmt|;
name|storeAcceptLanguage
argument_list|(
name|request
argument_list|,
name|adapter
argument_list|)
expr_stmt|;
comment|//set some parameters for checking on POST
name|adapter
operator|.
name|setContextParam
argument_list|(
literal|"action-url"
argument_list|,
name|actionURL
argument_list|)
expr_stmt|;
comment|//initialise the adapter
name|adapter
operator|.
name|init
argument_list|()
expr_stmt|;
comment|//handle exit event
name|XMLEvent
name|exitEvent
init|=
name|adapter
operator|.
name|checkForExitEvent
argument_list|()
decl_stmt|;
if|if
condition|(
name|exitEvent
operator|!=
literal|null
condition|)
block|{
name|handleExit
argument_list|(
name|exitEvent
argument_list|,
name|xFormsSession
argument_list|,
name|session
argument_list|,
name|request
argument_list|,
name|response
argument_list|)
expr_stmt|;
block|}
else|else
block|{
comment|//TODO: needed?
comment|//response.setContentType(HTML_CONTENT_TYPE);
name|UIGenerator
name|uiGenerator
init|=
name|createUIGenerator
argument_list|(
name|request
argument_list|,
name|xFormsSession
argument_list|,
name|actionURL
argument_list|,
literal|null
argument_list|)
decl_stmt|;
comment|//Generate the UI
name|uiGenerator
operator|.
name|setInput
argument_list|(
name|adapter
operator|.
name|getXForms
argument_list|()
argument_list|)
expr_stmt|;
name|uiGenerator
operator|.
name|setOutput
argument_list|(
name|response
operator|.
name|getOutputStream
argument_list|()
argument_list|)
expr_stmt|;
name|uiGenerator
operator|.
name|generate
argument_list|()
expr_stmt|;
comment|//store WebAdapter in XFormsSession
name|xFormsSession
operator|.
name|setAdapter
argument_list|(
name|adapter
argument_list|)
expr_stmt|;
comment|//store UIGenerator in XFormsSession as property
name|xFormsSession
operator|.
name|setProperty
argument_list|(
name|XFormsSession
operator|.
name|UIGENERATOR
argument_list|,
name|uiGenerator
argument_list|)
expr_stmt|;
comment|//store queryString as 'referer' in XFormsSession
name|xFormsSession
operator|.
name|setProperty
argument_list|(
name|XFormsSession
operator|.
name|REFERER
argument_list|,
name|request
operator|.
name|getQueryString
argument_list|()
argument_list|)
expr_stmt|;
comment|//actually add the XFormsSession ot the manager
name|sessionManager
operator|.
name|addXFormsSession
argument_list|(
name|xFormsSession
argument_list|)
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|error
argument_list|(
name|e
argument_list|)
expr_stmt|;
name|e
operator|.
name|printStackTrace
argument_list|()
expr_stmt|;
name|shutdown
argument_list|(
name|adapter
argument_list|,
name|session
argument_list|,
name|e
argument_list|,
name|response
argument_list|,
name|request
argument_list|,
name|xFormsSession
operator|.
name|getKey
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
comment|/** 	 * Updates the state of an XForm 	 *  	 *  @param srvRequest	The Servlet request object to read the update from 	 *  @param srvResponse	The Servlet response to write the result to 	 */
specifier|private
name|void
name|updateXForm
parameter_list|(
name|ServletRequest
name|srvRequest
parameter_list|,
name|ServletResponse
name|srvResponse
parameter_list|)
block|{
name|HttpServletRequest
name|request
init|=
operator|(
name|HttpServletRequest
operator|)
name|srvRequest
decl_stmt|;
name|HttpServletResponse
name|response
init|=
operator|(
name|HttpServletResponse
operator|)
name|srvResponse
decl_stmt|;
name|HttpSession
name|session
init|=
name|request
operator|.
name|getSession
argument_list|()
decl_stmt|;
name|WebAdapter
name|adapter
init|=
literal|null
decl_stmt|;
name|String
name|key
init|=
name|request
operator|.
name|getParameter
argument_list|(
literal|"sessionKey"
argument_list|)
decl_stmt|;
comment|/* 		 * (ChibaAdapter)session.getAttribute(SESSION_CHIBA_ADAPTER); 		*/
try|try
block|{
name|XFormsSessionManager
name|manager
init|=
operator|(
name|XFormsSessionManager
operator|)
name|session
operator|.
name|getAttribute
argument_list|(
name|XFormsSessionManager
operator|.
name|XFORMS_SESSION_MANAGER
argument_list|)
decl_stmt|;
name|XFormsSession
name|xFormsSession
init|=
name|manager
operator|.
name|getXFormsSession
argument_list|(
name|key
argument_list|)
decl_stmt|;
name|String
name|referer
init|=
operator|(
name|String
operator|)
name|xFormsSession
operator|.
name|getProperty
argument_list|(
name|XFormsSession
operator|.
name|REFERER
argument_list|)
decl_stmt|;
name|LOG
operator|.
name|debug
argument_list|(
literal|"Referer: "
operator|+
name|referer
argument_list|)
expr_stmt|;
name|adapter
operator|=
name|xFormsSession
operator|.
name|getAdapter
argument_list|()
expr_stmt|;
if|if
condition|(
name|adapter
operator|==
literal|null
condition|)
block|{
name|LOG
operator|.
name|error
argument_list|(
literal|"No chiba adapter in session!"
argument_list|)
expr_stmt|;
return|return;
block|}
name|ChibaEvent
name|chibaEvent
init|=
operator|new
name|DefaultChibaEventImpl
argument_list|()
decl_stmt|;
name|chibaEvent
operator|.
name|initEvent
argument_list|(
literal|"http-request"
argument_list|,
literal|null
argument_list|,
name|request
argument_list|)
expr_stmt|;
name|adapter
operator|.
name|dispatch
argument_list|(
name|chibaEvent
argument_list|)
expr_stmt|;
comment|//handle exit event
name|XMLEvent
name|exitEvent
init|=
name|adapter
operator|.
name|checkForExitEvent
argument_list|()
decl_stmt|;
if|if
condition|(
name|exitEvent
operator|!=
literal|null
condition|)
block|{
name|handleExit
argument_list|(
name|exitEvent
argument_list|,
name|xFormsSession
argument_list|,
name|session
argument_list|,
name|request
argument_list|,
name|response
argument_list|)
expr_stmt|;
block|}
else|else
block|{
comment|//TODO: needed?
comment|//response.setContentType(HTML_CONTENT_TYPE);
comment|//Dont set in filter -> is set by servlet!
comment|/* 		        request.setCharacterEncoding("UTF-8"); 		        response.setHeader("Cache-Control","private, no-store,  no-cache, must-revalidate"); 		        response.setHeader("Pragma","no-cache"); 		        response.setDateHeader("Expires",-1); 		        */
name|UIGenerator
name|uiGenerator
init|=
operator|(
name|UIGenerator
operator|)
name|xFormsSession
operator|.
name|getProperty
argument_list|(
name|XFormsSession
operator|.
name|UIGENERATOR
argument_list|)
decl_stmt|;
comment|//TODO: needed?
name|response
operator|.
name|setCharacterEncoding
argument_list|(
literal|"UTF-8"
argument_list|)
expr_stmt|;
name|uiGenerator
operator|.
name|setInput
argument_list|(
name|adapter
operator|.
name|getXForms
argument_list|()
argument_list|)
expr_stmt|;
name|uiGenerator
operator|.
name|setOutput
argument_list|(
name|response
operator|.
name|getOutputStream
argument_list|()
argument_list|)
expr_stmt|;
name|uiGenerator
operator|.
name|generate
argument_list|()
expr_stmt|;
name|response
operator|.
name|getOutputStream
argument_list|()
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|error
argument_list|(
name|e
argument_list|)
expr_stmt|;
name|e
operator|.
name|printStackTrace
argument_list|()
expr_stmt|;
name|shutdown
argument_list|(
name|adapter
argument_list|,
name|session
argument_list|,
name|e
argument_list|,
name|response
argument_list|,
name|request
argument_list|,
name|key
argument_list|)
expr_stmt|;
block|}
block|}
comment|/**      * configures the an Adapter for interacting with the XForms processor (ChibaBean). The Adapter itself      * will create the XFormsProcessor (ChibaBean) and configure it for processing.      *<p/>      * If you'd like to use a different source of XForms documents e.g. DOM you should extend this class and      * overwrite this method. Please take care to also set the baseURI of the processor to a reasonable value      * cause this will be the fundament for all URI resolutions taking place.      *      * @param adapter  the WebAdapter implementation to setup      * @param XFormsSession	The XFormsSession for this adapter       * @param baseURI	The URI to use as a base for resolving URI's      * @param isXForm	The input stream for the XForm      *       * @return ServletAdapter      */
specifier|protected
name|WebAdapter
name|setupAdapter
parameter_list|(
name|WebAdapter
name|adapter
parameter_list|,
name|XFormsSession
name|xFormsSession
parameter_list|,
name|String
name|baseURI
parameter_list|,
name|InputStream
name|isXForm
parameter_list|)
throws|throws
name|XFormsException
throws|,
name|URISyntaxException
throws|,
name|IOException
block|{
comment|//set the adapters xforms session
name|adapter
operator|.
name|setXFormsSession
argument_list|(
name|xFormsSession
argument_list|)
expr_stmt|;
comment|//set the config file
name|adapter
operator|.
name|setConfigPath
argument_list|(
name|CHIBA_CONFIG
argument_list|)
expr_stmt|;
comment|//set the xform, then close the input stream
name|adapter
operator|.
name|setXForms
argument_list|(
name|isXForm
argument_list|)
expr_stmt|;
name|isXForm
operator|.
name|close
argument_list|()
expr_stmt|;
comment|//set the base URI
name|adapter
operator|.
name|setBaseURI
argument_list|(
name|baseURI
argument_list|)
expr_stmt|;
comment|//set the temporary file upload location
name|adapter
operator|.
name|setUploadDestination
argument_list|(
name|CHIBA_TEMP_UPLOAD_DESTINATION
argument_list|)
expr_stmt|;
name|Map
name|servletMap
init|=
operator|new
name|HashMap
argument_list|()
decl_stmt|;
name|servletMap
operator|.
name|put
argument_list|(
name|WebAdapter
operator|.
name|SESSION_ID
argument_list|,
name|xFormsSession
operator|.
name|getKey
argument_list|()
argument_list|)
expr_stmt|;
name|adapter
operator|.
name|setContextParam
argument_list|(
name|ChibaAdapter
operator|.
name|SUBMISSION_RESPONSE
argument_list|,
name|servletMap
argument_list|)
expr_stmt|;
return|return
name|adapter
return|;
block|}
comment|/**      * this method is responsible for passing all context information needed by the Adapter and Processor from      * ServletRequest to ChibaContext. Will be called only once when the form-session is inited (GET).      *      * @param request    the ServletRequest      * @param adapter the WebAdapter to use      */
specifier|protected
name|void
name|setContextParams
parameter_list|(
name|HttpServletRequest
name|request
parameter_list|,
name|WebAdapter
name|adapter
parameter_list|)
block|{
comment|//[1] pass user-agent to Adapter for UI-building
name|adapter
operator|.
name|setContextParam
argument_list|(
name|WebAdapter
operator|.
name|USERAGENT
argument_list|,
name|request
operator|.
name|getHeader
argument_list|(
literal|"User-Agent"
argument_list|)
argument_list|)
expr_stmt|;
name|adapter
operator|.
name|setContextParam
argument_list|(
name|WebAdapter
operator|.
name|REQUEST_URI
argument_list|,
name|getRequestURI
argument_list|(
name|request
argument_list|)
argument_list|)
expr_stmt|;
comment|//[2] read any request params that are *not* Chiba params and pass them into the context map
name|Enumeration
name|params
init|=
name|request
operator|.
name|getParameterNames
argument_list|()
decl_stmt|;
name|String
name|paramName
decl_stmt|;
while|while
condition|(
name|params
operator|.
name|hasMoreElements
argument_list|()
condition|)
block|{
name|paramName
operator|=
operator|(
name|String
operator|)
name|params
operator|.
name|nextElement
argument_list|()
expr_stmt|;
name|boolean
name|isChibaParam
init|=
literal|false
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|CHIBA_QUERYSTRING_PARAMS
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
if|if
condition|(
name|paramName
operator|.
name|equals
argument_list|(
name|CHIBA_QUERYSTRING_PARAMS
index|[
name|i
index|]
argument_list|)
condition|)
block|{
name|isChibaParam
operator|=
literal|true
expr_stmt|;
block|}
block|}
if|if
condition|(
operator|!
name|isChibaParam
condition|)
block|{
name|String
name|paramValue
init|=
name|request
operator|.
name|getParameter
argument_list|(
name|paramName
argument_list|)
decl_stmt|;
name|adapter
operator|.
name|setContextParam
argument_list|(
name|paramName
argument_list|,
name|paramValue
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|debug
argument_list|(
literal|"Request param: "
operator|+
name|paramName
operator|+
literal|" added to the context"
argument_list|)
expr_stmt|;
block|}
block|}
block|}
comment|/**      * stores cookies that may exist in request and passes them on to processor for usage in      * HTTPConnectors. Instance loading and submission then uses these cookies. Important for      * applications using auth.      *      * @param request the servlet request      * @param adapter the WebAdapter instance      */
specifier|protected
name|void
name|storeCookies
parameter_list|(
name|HttpServletRequest
name|request
parameter_list|,
name|WebAdapter
name|adapter
parameter_list|)
block|{
name|javax
operator|.
name|servlet
operator|.
name|http
operator|.
name|Cookie
index|[]
name|cookiesIn
init|=
name|request
operator|.
name|getCookies
argument_list|()
decl_stmt|;
if|if
condition|(
name|cookiesIn
operator|!=
literal|null
condition|)
block|{
name|Cookie
index|[]
name|commonsCookies
init|=
operator|new
name|Cookie
index|[
name|cookiesIn
operator|.
name|length
index|]
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|cookiesIn
operator|.
name|length
condition|;
name|i
operator|+=
literal|1
control|)
block|{
name|javax
operator|.
name|servlet
operator|.
name|http
operator|.
name|Cookie
name|c
init|=
name|cookiesIn
index|[
name|i
index|]
decl_stmt|;
name|String
name|domain
init|=
name|c
operator|.
name|getDomain
argument_list|()
decl_stmt|;
if|if
condition|(
name|domain
operator|==
literal|null
condition|)
block|{
name|domain
operator|=
literal|""
expr_stmt|;
block|}
name|String
name|path
init|=
name|c
operator|.
name|getPath
argument_list|()
decl_stmt|;
if|if
condition|(
name|path
operator|==
literal|null
condition|)
block|{
name|path
operator|=
literal|"/"
expr_stmt|;
block|}
name|commonsCookies
index|[
name|i
index|]
operator|=
operator|new
name|Cookie
argument_list|(
name|domain
argument_list|,
name|c
operator|.
name|getName
argument_list|()
argument_list|,
name|c
operator|.
name|getValue
argument_list|()
argument_list|,
name|path
argument_list|,
name|c
operator|.
name|getMaxAge
argument_list|()
argument_list|,
name|c
operator|.
name|getSecure
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|adapter
operator|.
name|setContextParam
argument_list|(
name|AbstractHTTPConnector
operator|.
name|REQUEST_COOKIE
argument_list|,
name|commonsCookies
argument_list|)
expr_stmt|;
block|}
block|}
specifier|protected
name|void
name|storeAcceptLanguage
parameter_list|(
name|HttpServletRequest
name|request
parameter_list|,
name|WebAdapter
name|adapter
parameter_list|)
block|{
name|String
name|acceptLanguage
init|=
name|request
operator|.
name|getHeader
argument_list|(
literal|"accept-language"
argument_list|)
decl_stmt|;
if|if
condition|(
operator|(
name|acceptLanguage
operator|!=
literal|null
operator|)
operator|&&
operator|(
name|acceptLanguage
operator|.
name|length
argument_list|()
operator|>
literal|0
operator|)
condition|)
block|{
name|adapter
operator|.
name|setContextParam
argument_list|(
name|AbstractHTTPConnector
operator|.
name|ACCEPT_LANGUAGE
argument_list|,
name|acceptLanguage
argument_list|)
expr_stmt|;
block|}
block|}
specifier|protected
name|UIGenerator
name|createUIGenerator
parameter_list|(
name|HttpServletRequest
name|request
parameter_list|,
name|XFormsSession
name|xFormsSession
parameter_list|,
name|String
name|actionURL
parameter_list|,
name|String
name|js
parameter_list|)
throws|throws
name|URISyntaxException
throws|,
name|XFormsConfigException
block|{
name|TransformerService
name|transformerService
init|=
operator|(
name|TransformerService
operator|)
name|filterConfig
operator|.
name|getServletContext
argument_list|()
operator|.
name|getAttribute
argument_list|(
name|TransformerService
operator|.
name|class
operator|.
name|getName
argument_list|()
argument_list|)
decl_stmt|;
name|URI
name|uri
init|=
operator|new
name|File
argument_list|(
name|CHIBA_STYLESHEET_PATH
argument_list|)
operator|.
name|toURI
argument_list|()
operator|.
name|resolve
argument_list|(
operator|new
name|URI
argument_list|(
name|CHIBA_STYLESHEET_FILE
argument_list|)
argument_list|)
decl_stmt|;
name|XSLTGenerator
name|generator
init|=
operator|new
name|XSLTGenerator
argument_list|()
decl_stmt|;
name|generator
operator|.
name|setTransformerService
argument_list|(
name|transformerService
argument_list|)
expr_stmt|;
name|generator
operator|.
name|setStylesheetURI
argument_list|(
name|uri
argument_list|)
expr_stmt|;
comment|// todo: unify and extract parameter names
name|generator
operator|.
name|setParameter
argument_list|(
literal|"contextroot"
argument_list|,
name|request
operator|.
name|getContextPath
argument_list|()
argument_list|)
expr_stmt|;
name|generator
operator|.
name|setParameter
argument_list|(
literal|"sessionKey"
argument_list|,
name|xFormsSession
operator|.
name|getKey
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|xFormsSession
operator|.
name|getProperty
argument_list|(
name|XFormsSession
operator|.
name|KEEPALIVE_PULSE
argument_list|)
operator|!=
literal|null
condition|)
block|{
name|generator
operator|.
name|setParameter
argument_list|(
literal|"keepalive-pulse"
argument_list|,
name|xFormsSession
operator|.
name|getProperty
argument_list|(
name|XFormsSession
operator|.
name|KEEPALIVE_PULSE
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|generator
operator|.
name|setParameter
argument_list|(
literal|"action-url"
argument_list|,
name|actionURL
argument_list|)
expr_stmt|;
name|generator
operator|.
name|setParameter
argument_list|(
literal|"debug-enabled"
argument_list|,
name|CHIBA_DEBUG
argument_list|)
expr_stmt|;
name|String
name|selectorPrefix
init|=
name|Config
operator|.
name|getInstance
argument_list|()
operator|.
name|getProperty
argument_list|(
name|HttpRequestHandler
operator|.
name|SELECTOR_PREFIX_PROPERTY
argument_list|,
name|HttpRequestHandler
operator|.
name|SELECTOR_PREFIX_DEFAULT
argument_list|)
decl_stmt|;
name|generator
operator|.
name|setParameter
argument_list|(
literal|"selector-prefix"
argument_list|,
name|selectorPrefix
argument_list|)
expr_stmt|;
name|String
name|removeUploadPrefix
init|=
name|Config
operator|.
name|getInstance
argument_list|()
operator|.
name|getProperty
argument_list|(
name|HttpRequestHandler
operator|.
name|REMOVE_UPLOAD_PREFIX_PROPERTY
argument_list|,
name|HttpRequestHandler
operator|.
name|REMOVE_UPLOAD_PREFIX_DEFAULT
argument_list|)
decl_stmt|;
name|generator
operator|.
name|setParameter
argument_list|(
literal|"remove-upload-prefix"
argument_list|,
name|removeUploadPrefix
argument_list|)
expr_stmt|;
name|String
name|dataPrefix
init|=
name|Config
operator|.
name|getInstance
argument_list|()
operator|.
name|getProperty
argument_list|(
literal|"chiba.web.dataPrefix"
argument_list|)
decl_stmt|;
name|generator
operator|.
name|setParameter
argument_list|(
literal|"data-prefix"
argument_list|,
name|dataPrefix
argument_list|)
expr_stmt|;
name|String
name|triggerPrefix
init|=
name|Config
operator|.
name|getInstance
argument_list|()
operator|.
name|getProperty
argument_list|(
literal|"chiba.web.triggerPrefix"
argument_list|)
decl_stmt|;
name|generator
operator|.
name|setParameter
argument_list|(
literal|"trigger-prefix"
argument_list|,
name|triggerPrefix
argument_list|)
expr_stmt|;
name|generator
operator|.
name|setParameter
argument_list|(
literal|"user-agent"
argument_list|,
name|request
operator|.
name|getHeader
argument_list|(
literal|"User-Agent"
argument_list|)
argument_list|)
expr_stmt|;
name|generator
operator|.
name|setParameter
argument_list|(
literal|"scripted"
argument_list|,
name|String
operator|.
name|valueOf
argument_list|(
name|js
operator|!=
literal|null
argument_list|)
argument_list|)
expr_stmt|;
comment|//TODO: enable for AJAX/XForms
comment|/*if(scriptPath != null)         {             generator.setParameter("scriptPath", scriptPath);         }*/
name|generator
operator|.
name|setParameter
argument_list|(
literal|"CSSPath"
argument_list|,
name|CHIBA_CSS_PATH
operator|+
literal|'/'
argument_list|)
expr_stmt|;
return|return
name|generator
return|;
block|}
specifier|private
name|String
name|getRequestURI
parameter_list|(
name|HttpServletRequest
name|request
parameter_list|)
block|{
name|StringBuffer
name|buffer
init|=
operator|new
name|StringBuffer
argument_list|(
name|request
operator|.
name|getScheme
argument_list|()
argument_list|)
decl_stmt|;
name|buffer
operator|.
name|append
argument_list|(
literal|"://"
argument_list|)
expr_stmt|;
name|buffer
operator|.
name|append
argument_list|(
name|request
operator|.
name|getServerName
argument_list|()
argument_list|)
expr_stmt|;
name|buffer
operator|.
name|append
argument_list|(
literal|":"
argument_list|)
expr_stmt|;
name|buffer
operator|.
name|append
argument_list|(
name|request
operator|.
name|getServerPort
argument_list|()
argument_list|)
expr_stmt|;
name|buffer
operator|.
name|append
argument_list|(
name|request
operator|.
name|getContextPath
argument_list|()
argument_list|)
expr_stmt|;
return|return
name|buffer
operator|.
name|toString
argument_list|()
return|;
block|}
comment|/**      * returns a specific implementation of XFormsSessionManager. Plugin your own implementations here if needed.      *      * @return a specific implementation of XFormsSessionManager (defaults to DefaultXFormsSessionManagerImpl)      */
specifier|protected
name|XFormsSessionManager
name|getXFormsSessionManager
parameter_list|()
block|{
return|return
name|DefaultXFormsSessionManagerImpl
operator|.
name|getInstance
argument_list|()
return|;
block|}
specifier|protected
name|void
name|handleExit
parameter_list|(
name|XMLEvent
name|exitEvent
parameter_list|,
name|XFormsSession
name|xFormsSession
parameter_list|,
name|HttpSession
name|session
parameter_list|,
name|HttpServletRequest
name|request
parameter_list|,
name|HttpServletResponse
name|response
parameter_list|)
throws|throws
name|IOException
block|{
if|if
condition|(
name|ChibaEventNames
operator|.
name|REPLACE_ALL
operator|.
name|equals
argument_list|(
name|exitEvent
operator|.
name|getType
argument_list|()
argument_list|)
condition|)
block|{
name|submissionResponse
argument_list|(
name|xFormsSession
argument_list|,
name|request
argument_list|,
name|response
argument_list|)
expr_stmt|;
comment|//response.sendRedirect(response.encodeRedirectURL(request.getContextPath() + "/SubmissionResponse?sessionKey=" + xFormsSession.getKey()));
block|}
if|else if
condition|(
name|ChibaEventNames
operator|.
name|LOAD_URI
operator|.
name|equals
argument_list|(
name|exitEvent
operator|.
name|getType
argument_list|()
argument_list|)
condition|)
block|{
if|if
condition|(
name|exitEvent
operator|.
name|getContextInfo
argument_list|(
literal|"show"
argument_list|)
operator|!=
literal|null
condition|)
block|{
name|String
name|loadURI
init|=
operator|(
name|String
operator|)
name|exitEvent
operator|.
name|getContextInfo
argument_list|(
literal|"uri"
argument_list|)
decl_stmt|;
comment|//kill XFormsSession
name|xFormsSession
operator|.
name|getManager
argument_list|()
operator|.
name|deleteXFormsSession
argument_list|(
name|xFormsSession
operator|.
name|getKey
argument_list|()
argument_list|)
expr_stmt|;
name|response
operator|.
name|sendRedirect
argument_list|(
name|response
operator|.
name|encodeRedirectURL
argument_list|(
name|loadURI
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
name|LOG
operator|.
name|debug
argument_list|(
literal|"EXITED DURING XFORMS MODEL INIT!"
argument_list|)
expr_stmt|;
block|}
specifier|private
name|void
name|submissionResponse
parameter_list|(
name|XFormsSession
name|xFormsSession
parameter_list|,
name|HttpServletRequest
name|request
parameter_list|,
name|HttpServletResponse
name|response
parameter_list|)
throws|throws
name|IOException
block|{
comment|// lookup attribute containing submission response map
name|Map
name|submissionResponse
init|=
operator|(
name|Map
operator|)
name|xFormsSession
operator|.
name|getProperty
argument_list|(
name|ChibaServlet
operator|.
name|CHIBA_SUBMISSION_RESPONSE
argument_list|)
decl_stmt|;
if|if
condition|(
name|submissionResponse
operator|!=
literal|null
condition|)
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"Handling submission/@replace='all'"
argument_list|)
expr_stmt|;
comment|// copy header fields
name|Map
name|headerMap
init|=
operator|(
name|Map
operator|)
name|submissionResponse
operator|.
name|get
argument_list|(
literal|"header"
argument_list|)
decl_stmt|;
name|String
name|name
decl_stmt|;
name|String
name|value
decl_stmt|;
name|Iterator
name|iterator
init|=
name|headerMap
operator|.
name|keySet
argument_list|()
operator|.
name|iterator
argument_list|()
decl_stmt|;
while|while
condition|(
name|iterator
operator|.
name|hasNext
argument_list|()
condition|)
block|{
name|name
operator|=
operator|(
name|String
operator|)
name|iterator
operator|.
name|next
argument_list|()
expr_stmt|;
if|if
condition|(
name|name
operator|.
name|equalsIgnoreCase
argument_list|(
literal|"Transfer-Encoding"
argument_list|)
condition|)
block|{
comment|// Some servers (e.g. WebSphere) may set a "Transfer-Encoding"
comment|// with the value "chunked". This may confuse the client since
comment|// ChibaServlet output is not encoded as "chunked", so this
comment|// header is ignored.
continue|continue;
block|}
name|value
operator|=
operator|(
name|String
operator|)
name|headerMap
operator|.
name|get
argument_list|(
name|name
argument_list|)
expr_stmt|;
name|response
operator|.
name|setHeader
argument_list|(
name|name
argument_list|,
name|value
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|debug
argument_list|(
literal|"Added header: "
operator|+
name|name
operator|+
literal|"="
operator|+
name|value
argument_list|)
expr_stmt|;
block|}
comment|// copy body stream
name|InputStream
name|bodyStream
init|=
operator|(
name|InputStream
operator|)
name|submissionResponse
operator|.
name|get
argument_list|(
literal|"body"
argument_list|)
decl_stmt|;
name|OutputStream
name|outputStream
init|=
operator|new
name|BufferedOutputStream
argument_list|(
name|response
operator|.
name|getOutputStream
argument_list|()
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|b
init|=
name|bodyStream
operator|.
name|read
argument_list|()
init|;
name|b
operator|>
operator|-
literal|1
condition|;
name|b
operator|=
name|bodyStream
operator|.
name|read
argument_list|()
control|)
block|{
name|outputStream
operator|.
name|write
argument_list|(
name|b
argument_list|)
expr_stmt|;
block|}
comment|// close streams
name|bodyStream
operator|.
name|close
argument_list|()
expr_stmt|;
name|outputStream
operator|.
name|close
argument_list|()
expr_stmt|;
comment|//kill XFormsSession
name|XFormsSessionManager
name|sessionManager
init|=
name|xFormsSession
operator|.
name|getManager
argument_list|()
decl_stmt|;
name|sessionManager
operator|.
name|deleteXFormsSession
argument_list|(
name|xFormsSession
operator|.
name|getKey
argument_list|()
argument_list|)
expr_stmt|;
return|return;
block|}
name|response
operator|.
name|sendError
argument_list|(
name|HttpServletResponse
operator|.
name|SC_FORBIDDEN
argument_list|,
literal|"no submission response available"
argument_list|)
expr_stmt|;
block|}
specifier|protected
name|void
name|shutdown
parameter_list|(
name|WebAdapter
name|adapter
parameter_list|,
name|HttpSession
name|session
parameter_list|,
name|Exception
name|e
parameter_list|,
name|HttpServletResponse
name|response
parameter_list|,
name|HttpServletRequest
name|request
parameter_list|,
name|String
name|key
parameter_list|)
block|{
comment|// attempt to shutdown processor
if|if
condition|(
name|adapter
operator|!=
literal|null
condition|)
block|{
try|try
block|{
name|adapter
operator|.
name|shutdown
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|XFormsException
name|xfe
parameter_list|)
block|{
name|LOG
operator|.
name|error
argument_list|(
name|xfe
argument_list|)
expr_stmt|;
name|xfe
operator|.
name|printStackTrace
argument_list|()
expr_stmt|;
block|}
block|}
comment|// store exception
comment|//todo: move exceptions to XFormsSession
name|session
operator|.
name|setAttribute
argument_list|(
literal|"chiba.exception"
argument_list|,
name|e
argument_list|)
expr_stmt|;
comment|//remove xformssession from httpsession
name|session
operator|.
name|removeAttribute
argument_list|(
name|key
argument_list|)
expr_stmt|;
comment|//TODO: should we pass the error upto the servlet somehow?
comment|// redirect to error page (after encoding session id if required)
comment|//response.sendRedirect(response.encodeRedirectURL(request.getContextPath() + "/" + request.getSession().getServletContext().getInitParameter("error.page")));
block|}
block|}
end_class

end_unit

