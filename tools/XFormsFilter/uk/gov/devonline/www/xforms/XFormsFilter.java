begin_unit|revision:1.0.0;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  *  XFormsFilter  *  Copyright (C) 2006 Adam Retter, Devon Portal Project<adam.retter@devon.gov.uk>  *  www.devonline.gov.uk  *    *  This program is free software; you can redistribute it and/or  *  modify it under the terms of the GNU Lesser General Public License  *  as published by the Free Software Foundation; either version 2  *  of the License, or (at your option) any later version.  *    *  This program is distributed in the hope that it will be useful,  *  but WITHOUT ANY WARRANTY; without even the implied warranty of  *  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the  *  GNU Lesser General Public License for more details.  *    *  You should have received a copy of the GNU Lesser General Public License  *  along with this program; if not, write to the Free Software  *  Foundation, Inc., 675 Mass Ave, Cambridge, MA 02139, USA.  *    *  $Id: XFormsFilter.java 4565 2006-10-12 12:42:18 +0000 (Thu, 12 Oct 2006) deliriumsky $  */
end_comment

begin_package
package|package
name|uk
operator|.
name|gov
operator|.
name|devonline
operator|.
name|www
operator|.
name|xforms
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|BufferedOutputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|ByteArrayInputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|InputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|OutputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Enumeration
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Iterator
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|servlet
operator|.
name|Filter
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|servlet
operator|.
name|FilterChain
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|servlet
operator|.
name|FilterConfig
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|servlet
operator|.
name|http
operator|.
name|HttpServletRequest
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|servlet
operator|.
name|http
operator|.
name|HttpServletResponse
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|servlet
operator|.
name|http
operator|.
name|HttpSession
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|servlet
operator|.
name|ServletException
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|servlet
operator|.
name|ServletRequest
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|servlet
operator|.
name|ServletResponse
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|httpclient
operator|.
name|Cookie
import|;
end_import

begin_import
import|import
name|org
operator|.
name|chiba
operator|.
name|adapter
operator|.
name|ChibaAdapter
import|;
end_import

begin_import
import|import
name|org
operator|.
name|chiba
operator|.
name|adapter
operator|.
name|ChibaEvent
import|;
end_import

begin_import
import|import
name|org
operator|.
name|chiba
operator|.
name|adapter
operator|.
name|DefaultChibaEventImpl
import|;
end_import

begin_import
import|import
name|org
operator|.
name|chiba
operator|.
name|adapter
operator|.
name|servlet
operator|.
name|ServletAdapter
import|;
end_import

begin_import
import|import
name|org
operator|.
name|chiba
operator|.
name|tools
operator|.
name|xslt
operator|.
name|StylesheetLoader
import|;
end_import

begin_import
import|import
name|org
operator|.
name|chiba
operator|.
name|tools
operator|.
name|xslt
operator|.
name|UIGenerator
import|;
end_import

begin_import
import|import
name|org
operator|.
name|chiba
operator|.
name|tools
operator|.
name|xslt
operator|.
name|XSLTGenerator
import|;
end_import

begin_import
import|import
name|org
operator|.
name|chiba
operator|.
name|xml
operator|.
name|xforms
operator|.
name|connector
operator|.
name|http
operator|.
name|AbstractHTTPConnector
import|;
end_import

begin_import
import|import
name|org
operator|.
name|chiba
operator|.
name|xml
operator|.
name|xforms
operator|.
name|exception
operator|.
name|XFormsException
import|;
end_import

begin_comment
comment|/**  * A Servlet Filter to provide XForms functionality to existing Servlets  *   * @author Adam Retter  * @version 1.1  * @serial 2006-09-18T15:15  *   *   * Initialization parameters for the ServletFilter  *   * CHIBA_DEBUG							true or false indicating if Chiba should run in debug mode  * CHIBA_CONFIG							Path to Chiba's configuration file  * CHIBA_TEMP_UPLOAD_DESTINATION		Path to upload temporary files to  * CHIBA_STYLESHEET_PATH				Path to XSLT location  * CHIBA_STYLESHEET_FILE				XSLT file in XSLT_STYLESHEET_PATH to use for processing  * CHIBA_CSS							Path and filename of CSS file to use, relevant to servlet url  */
end_comment

begin_class
specifier|public
class|class
name|XFormsFilter
implements|implements
name|Filter
block|{
specifier|private
specifier|static
name|FilterConfig
name|filterConfig
init|=
literal|null
decl_stmt|;
specifier|private
specifier|final
specifier|static
name|boolean
name|DEFAULT_CHIBA_DEBUG
init|=
literal|true
decl_stmt|;
specifier|private
specifier|final
specifier|static
name|String
name|DEFAULT_CHIBA_CONFIG
init|=
literal|"/usr/local/tomcat5/webapps/chiba2/WEB-INF/default.xml"
decl_stmt|;
specifier|private
specifier|final
specifier|static
name|String
name|DEFAULT_CHIBA_TEMP_UPLOAD_DESTINATION
init|=
literal|"/tmp"
decl_stmt|;
specifier|private
specifier|final
specifier|static
name|String
name|DEFAULT_CHIBA_STYLESHEET_PATH
init|=
literal|"/usr/local/tomcat5/webapps/chiba2/forms/xslt.adam"
decl_stmt|;
specifier|private
specifier|final
specifier|static
name|String
name|DEFAULT_CHIBA_STYLESHEET_FILE
init|=
literal|"xhtml.xsl"
decl_stmt|;
specifier|private
specifier|final
specifier|static
name|String
name|DEFAULT_CHIBA_CSS
init|=
literal|"/exist/servlet/db/xforms-test/xforms.css"
decl_stmt|;
specifier|private
specifier|static
name|boolean
name|CHIBA_DEBUG
init|=
name|DEFAULT_CHIBA_DEBUG
decl_stmt|;
specifier|private
specifier|static
name|String
name|CHIBA_CONFIG
init|=
name|DEFAULT_CHIBA_CONFIG
decl_stmt|;
specifier|private
specifier|static
name|String
name|CHIBA_TEMP_UPLOAD_DESTINATION
init|=
name|DEFAULT_CHIBA_TEMP_UPLOAD_DESTINATION
decl_stmt|;
specifier|private
specifier|static
name|String
name|CHIBA_STYLESHEET_PATH
init|=
name|DEFAULT_CHIBA_STYLESHEET_PATH
decl_stmt|;
specifier|private
specifier|static
name|String
name|CHIBA_STYLESHEET_FILE
init|=
name|DEFAULT_CHIBA_STYLESHEET_FILE
decl_stmt|;
specifier|private
specifier|static
name|String
name|CHIBA_CSS
init|=
name|DEFAULT_CHIBA_CSS
decl_stmt|;
specifier|private
specifier|final
specifier|static
name|String
name|SESSION_CHIBA_ADAPTER
init|=
literal|"chiba.adapter"
decl_stmt|;
specifier|private
specifier|final
specifier|static
name|String
name|SESSION_CHIBA_UIGENERATOR
init|=
literal|"chiba.uiGenerator"
decl_stmt|;
specifier|private
specifier|final
specifier|static
name|String
index|[]
name|CHIBA_QUERYSTRING_PARAMS
init|=
block|{
literal|"form"
block|,
literal|"xslt"
block|,
literal|"action_url"
block|,
literal|"JavaScript"
block|}
decl_stmt|;
comment|//TODO: could create a single UIGenerator, start it up in init() and close it down in destroy()???
comment|/** 	 * Filter initialisation 	 *  	 * @see http://java.sun.com/j2ee/sdk_1.3/techdocs/api/javax/servlet/Filter.html#init(javax.servlet.FilterConfig) 	 */
specifier|public
name|void
name|init
parameter_list|(
name|FilterConfig
name|filterConfig
parameter_list|)
throws|throws
name|ServletException
block|{
name|this
operator|.
name|filterConfig
operator|=
name|filterConfig
expr_stmt|;
name|setupConfig
argument_list|()
expr_stmt|;
block|}
comment|/** 	 * Filter shutdown 	 *  	 * @see http://java.sun.com/j2ee/sdk_1.3/techdocs/api/javax/servlet/Filter.html#destroy() 	 */
specifier|public
name|void
name|destroy
parameter_list|()
block|{
comment|// TODO Auto-generated method stub
block|}
comment|/** 	 * Set's up variables from the filter configuration 	 */
specifier|private
name|void
name|setupConfig
parameter_list|()
block|{
if|if
condition|(
name|filterConfig
operator|.
name|getInitParameter
argument_list|(
literal|"CHIBA_DEBUG"
argument_list|)
operator|!=
literal|null
condition|)
block|{
name|CHIBA_DEBUG
operator|=
name|filterConfig
operator|.
name|getInitParameter
argument_list|(
literal|"CHIBA_DEBUG"
argument_list|)
operator|.
name|toLowerCase
argument_list|()
operator|.
name|equals
argument_list|(
literal|"true"
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|filterConfig
operator|.
name|getInitParameter
argument_list|(
literal|"CHIBA_CONFIG"
argument_list|)
operator|!=
literal|null
condition|)
block|{
name|CHIBA_CONFIG
operator|=
name|filterConfig
operator|.
name|getInitParameter
argument_list|(
literal|"CHIBA_CONFIG"
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|filterConfig
operator|.
name|getInitParameter
argument_list|(
literal|"CHIBA_TEMP_UPLOAD_DESTINATION"
argument_list|)
operator|!=
literal|null
condition|)
block|{
name|CHIBA_TEMP_UPLOAD_DESTINATION
operator|=
name|filterConfig
operator|.
name|getInitParameter
argument_list|(
literal|"CHIBA_TEMP_UPLOAD_DESTINATION"
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|filterConfig
operator|.
name|getInitParameter
argument_list|(
literal|"CHIBA_STYLESHEET_PATH"
argument_list|)
operator|!=
literal|null
condition|)
block|{
name|CHIBA_STYLESHEET_PATH
operator|=
name|filterConfig
operator|.
name|getInitParameter
argument_list|(
literal|"CHIBA_STYLESHEET_PATH"
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|filterConfig
operator|.
name|getInitParameter
argument_list|(
literal|"CHIBA_STYLESHEET_FILE"
argument_list|)
operator|!=
literal|null
condition|)
block|{
name|CHIBA_STYLESHEET_FILE
operator|=
name|filterConfig
operator|.
name|getInitParameter
argument_list|(
literal|"CHIBA_STYLESHEET_FILE"
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|filterConfig
operator|.
name|getInitParameter
argument_list|(
literal|"CHIBA_CSS"
argument_list|)
operator|!=
literal|null
condition|)
block|{
name|CHIBA_CSS
operator|=
name|filterConfig
operator|.
name|getInitParameter
argument_list|(
literal|"CHIBA_CSS"
argument_list|)
expr_stmt|;
block|}
block|}
comment|/** 	 * The actual filtering method 	 *  	 * @see http://java.sun.com/j2ee/sdk_1.3/techdocs/api/javax/servlet/Filter.html#doFilter(javax.servlet.ServletRequest,%20javax.servlet.ServletResponse,%20javax.servlet.FilterChain) 	 */
specifier|public
name|void
name|doFilter
parameter_list|(
name|ServletRequest
name|srvRequest
parameter_list|,
name|ServletResponse
name|srvResponse
parameter_list|,
name|FilterChain
name|filterChain
parameter_list|)
throws|throws
name|IOException
throws|,
name|ServletException
block|{
comment|/* before servlet request */
if|if
condition|(
name|isXFormUpdateRequest
argument_list|(
name|srvRequest
argument_list|)
condition|)
block|{
name|log
argument_list|(
literal|"Start Update XForm"
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|updateXForm
argument_list|(
name|srvRequest
argument_list|,
name|srvResponse
argument_list|)
expr_stmt|;
name|log
argument_list|(
literal|"End Update XForm"
argument_list|,
literal|false
argument_list|)
expr_stmt|;
block|}
else|else
block|{
comment|/* do servlet request */
name|log
argument_list|(
literal|"Passing to Chain"
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|BufferedHttpServletResponseWrapper
name|bufResponse
init|=
operator|new
name|BufferedHttpServletResponseWrapper
argument_list|(
operator|(
name|HttpServletResponse
operator|)
name|srvResponse
argument_list|)
decl_stmt|;
name|filterChain
operator|.
name|doFilter
argument_list|(
name|srvRequest
argument_list|,
name|bufResponse
argument_list|)
expr_stmt|;
name|log
argument_list|(
literal|"Returned from Chain"
argument_list|,
literal|false
argument_list|)
expr_stmt|;
comment|/* after servlet request */
if|if
condition|(
name|hasXForm
argument_list|(
name|bufResponse
argument_list|)
condition|)
block|{
name|bufResponse
operator|.
name|getOutputStream
argument_list|()
operator|.
name|close
argument_list|()
expr_stmt|;
name|log
argument_list|(
literal|"Start Render XForm"
argument_list|,
literal|false
argument_list|)
expr_stmt|;
comment|//remove DOCTYPE PI if it exists, Xerces in Chiba otherwise may try to download the system DTD (can cause latency problems)
name|byte
index|[]
name|data
init|=
name|removeDocumentTypePI
argument_list|(
name|bufResponse
operator|.
name|getData
argument_list|()
argument_list|)
decl_stmt|;
comment|//correct the<xforms:instance> xmlns="" problem (workaround for namespace problems in eXist)
name|data
operator|=
name|correctInstanceXMLNS
argument_list|(
name|data
argument_list|)
expr_stmt|;
name|renderXForm
argument_list|(
operator|new
name|ByteArrayInputStream
argument_list|(
name|data
argument_list|)
argument_list|,
name|srvRequest
argument_list|,
name|srvResponse
argument_list|)
expr_stmt|;
name|log
argument_list|(
literal|"End Render XForm"
argument_list|,
literal|false
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|srvResponse
operator|.
name|getOutputStream
argument_list|()
operator|.
name|write
argument_list|(
name|bufResponse
operator|.
name|getData
argument_list|()
argument_list|)
expr_stmt|;
name|srvResponse
operator|.
name|getOutputStream
argument_list|()
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
block|}
block|}
comment|/** 	 * Log's a message 	 *  	 * @param message	The message to log 	 * @param error		If the message is an error message 	 */
specifier|private
name|void
name|log
parameter_list|(
name|String
name|message
parameter_list|,
name|boolean
name|error
parameter_list|)
block|{
if|if
condition|(
name|error
condition|)
block|{
name|filterConfig
operator|.
name|getServletContext
argument_list|()
operator|.
name|log
argument_list|(
literal|"XFormsFilter ERROR: "
operator|+
name|message
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|filterConfig
operator|.
name|getServletContext
argument_list|()
operator|.
name|log
argument_list|(
literal|"XFormsFilter: "
operator|+
name|message
argument_list|)
expr_stmt|;
block|}
block|}
comment|/** 	 * Removes the DOCTYPE Processing Instruction from the content if it exists 	 *  	 * @param content	The HTML page content 	 *  	 * @return	The content without the DOCTYPE PI  	 */
specifier|public
name|byte
index|[]
name|removeDocumentTypePI
parameter_list|(
name|byte
index|[]
name|content
parameter_list|)
block|{
name|String
name|buf
init|=
operator|new
name|String
argument_list|(
name|content
argument_list|)
decl_stmt|;
name|int
name|iStartDoctype
init|=
name|buf
operator|.
name|indexOf
argument_list|(
literal|"<!DOCTYPE"
argument_list|)
decl_stmt|;
if|if
condition|(
name|iStartDoctype
operator|>
operator|-
literal|1
condition|)
block|{
name|int
name|iEndDoctype
init|=
name|buf
operator|.
name|indexOf
argument_list|(
literal|'>'
argument_list|,
name|iStartDoctype
argument_list|)
decl_stmt|;
name|String
name|newBuf
init|=
name|buf
operator|.
name|substring
argument_list|(
literal|0
argument_list|,
name|iStartDoctype
operator|-
literal|1
argument_list|)
decl_stmt|;
name|newBuf
operator|+=
name|buf
operator|.
name|substring
argument_list|(
name|iEndDoctype
operator|+
literal|1
argument_list|)
expr_stmt|;
return|return
name|newBuf
operator|.
name|getBytes
argument_list|()
return|;
block|}
return|return
name|content
return|;
block|}
comment|/** 	 * Inserts the attribute xmlns="" on the xforms:instance node if it is missing 	 *  	 * @param content	The HTML page content 	 *  	 * @return	The content with the corrected xforms:instance  	 */
specifier|public
name|byte
index|[]
name|correctInstanceXMLNS
parameter_list|(
name|byte
index|[]
name|content
parameter_list|)
block|{
name|String
name|buf
init|=
operator|new
name|String
argument_list|(
name|content
argument_list|)
decl_stmt|;
if|if
condition|(
name|buf
operator|.
name|indexOf
argument_list|(
literal|"<xforms:instance xmlns=\"\">"
argument_list|)
operator|==
operator|-
literal|1
condition|)
block|{
name|String
name|newBuf
init|=
name|buf
operator|.
name|replace
argument_list|(
literal|"<xforms:instance>"
argument_list|,
literal|"<xforms:instance xmlns=\"\">"
argument_list|)
decl_stmt|;
return|return
name|newBuf
operator|.
name|getBytes
argument_list|()
return|;
block|}
return|return
name|content
return|;
block|}
comment|/** 	 * Checks if the request is to update an XForm 	 *  	 * @param srvRequest	The request 	 *  	 * @return true if the request is to update an XForm, false otherwise  	 */
specifier|public
name|boolean
name|isXFormUpdateRequest
parameter_list|(
name|ServletRequest
name|srvRequest
parameter_list|)
block|{
comment|//get the http request object
name|HttpServletRequest
name|request
init|=
operator|(
name|HttpServletRequest
operator|)
name|srvRequest
decl_stmt|;
comment|//must be a POST request
if|if
condition|(
name|request
operator|.
name|getMethod
argument_list|()
operator|.
name|equals
argument_list|(
literal|"POST"
argument_list|)
condition|)
block|{
comment|//get the Chiba Adapter from the session
name|ChibaAdapter
name|adapter
init|=
operator|(
name|ChibaAdapter
operator|)
name|request
operator|.
name|getSession
argument_list|()
operator|.
name|getAttribute
argument_list|(
name|SESSION_CHIBA_ADAPTER
argument_list|)
decl_stmt|;
if|if
condition|(
name|adapter
operator|!=
literal|null
condition|)
block|{
name|String
name|actionURL
decl_stmt|;
if|if
condition|(
name|request
operator|.
name|getQueryString
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|actionURL
operator|=
name|request
operator|.
name|getRequestURL
argument_list|()
operator|+
literal|"?"
operator|+
name|request
operator|.
name|getQueryString
argument_list|()
expr_stmt|;
block|}
else|else
block|{
name|actionURL
operator|=
name|request
operator|.
name|getRequestURL
argument_list|()
operator|.
name|toString
argument_list|()
expr_stmt|;
block|}
if|if
condition|(
name|actionURL
operator|.
name|indexOf
argument_list|(
literal|"&sessionKey="
argument_list|)
operator|>
operator|-
literal|1
condition|)
block|{
name|actionURL
operator|=
name|actionURL
operator|.
name|substring
argument_list|(
literal|0
argument_list|,
name|actionURL
operator|.
name|indexOf
argument_list|(
literal|"&sessionKey="
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|//if the action-url in the adapters context param is the same as that of the action url then we know we are updating
if|if
condition|(
name|adapter
operator|.
name|getContextParam
argument_list|(
literal|"action-url"
argument_list|)
operator|.
name|equals
argument_list|(
name|actionURL
argument_list|)
condition|)
block|{
return|return
literal|true
return|;
block|}
block|}
block|}
return|return
literal|false
return|;
block|}
comment|/** 	 * Checks if the response contains an XForm 	 *  	 * @param bufResponse	The buffered response 	 *  	 * @return true if the response contains an XForm, false otherwise  	 */
specifier|public
name|boolean
name|hasXForm
parameter_list|(
name|BufferedHttpServletResponseWrapper
name|bufResponse
parameter_list|)
block|{
name|String
name|strResponse
init|=
name|bufResponse
operator|.
name|getDataAsString
argument_list|()
decl_stmt|;
if|if
condition|(
name|strResponse
operator|.
name|contains
argument_list|(
operator|new
name|String
argument_list|(
literal|"<xforms:model"
argument_list|)
argument_list|)
operator|&&
name|strResponse
operator|.
name|contains
argument_list|(
operator|new
name|String
argument_list|(
literal|"<xforms:instance"
argument_list|)
argument_list|)
condition|)
block|{
return|return
literal|true
return|;
block|}
return|return
literal|false
return|;
block|}
comment|/** 	 * Renders an XForm described in bufServletResponseWrapper using the Chiba XForms Engine 	 *  	 *  @param srvRequest	The Servlet request object 	 *  @param bufServletResponseWrapper	The response from the Servlet 	 */
specifier|public
name|void
name|renderXForm
parameter_list|(
name|InputStream
name|isXForm
parameter_list|,
name|ServletRequest
name|srvRequest
parameter_list|,
name|ServletResponse
name|srvResponse
parameter_list|)
block|{
name|HttpServletRequest
name|request
init|=
operator|(
name|HttpServletRequest
operator|)
name|srvRequest
decl_stmt|;
name|HttpServletResponse
name|response
init|=
operator|(
name|HttpServletResponse
operator|)
name|srvResponse
decl_stmt|;
name|HttpSession
name|session
init|=
name|request
operator|.
name|getSession
argument_list|(
literal|true
argument_list|)
decl_stmt|;
try|try
block|{
name|String
name|baseURI
init|=
name|request
operator|.
name|getRequestURL
argument_list|()
operator|.
name|toString
argument_list|()
decl_stmt|;
name|String
name|actionURL
decl_stmt|;
if|if
condition|(
name|request
operator|.
name|getQueryString
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|actionURL
operator|=
name|request
operator|.
name|getRequestURL
argument_list|()
operator|+
literal|"?"
operator|+
name|request
operator|.
name|getQueryString
argument_list|()
expr_stmt|;
block|}
else|else
block|{
name|actionURL
operator|=
name|request
operator|.
name|getRequestURL
argument_list|()
operator|.
name|toString
argument_list|()
expr_stmt|;
block|}
comment|//new chiba adapter
name|ChibaAdapter
name|adapter
init|=
operator|new
name|ServletAdapter
argument_list|()
decl_stmt|;
comment|//Create a Chiba Bean
comment|//adapter.createXFormsProcessor();	//no longer needed after Chiba 2.0.0RC1
comment|//set the config file
name|adapter
operator|.
name|setConfigPath
argument_list|(
name|CHIBA_CONFIG
argument_list|)
expr_stmt|;
comment|//set some parameters for checking on POST
name|adapter
operator|.
name|setContextParam
argument_list|(
literal|"action-url"
argument_list|,
name|actionURL
argument_list|)
expr_stmt|;
comment|//set the XForm
name|adapter
operator|.
name|setXForms
argument_list|(
name|isXForm
argument_list|)
expr_stmt|;
name|isXForm
operator|.
name|close
argument_list|()
expr_stmt|;
name|adapter
operator|.
name|setBaseURI
argument_list|(
name|baseURI
argument_list|)
expr_stmt|;
name|adapter
operator|.
name|setUploadDestination
argument_list|(
name|CHIBA_TEMP_UPLOAD_DESTINATION
argument_list|)
expr_stmt|;
name|Map
name|servletMap
init|=
operator|new
name|HashMap
argument_list|()
decl_stmt|;
name|servletMap
operator|.
name|put
argument_list|(
name|ChibaAdapter
operator|.
name|SESSION_ID
argument_list|,
name|session
operator|.
name|getId
argument_list|()
argument_list|)
expr_stmt|;
name|adapter
operator|.
name|setContextParam
argument_list|(
name|ChibaAdapter
operator|.
name|SUBMISSION_RESPONSE
argument_list|,
name|servletMap
argument_list|)
expr_stmt|;
comment|//pass user-agent to Adapter for UI-building
name|adapter
operator|.
name|setContextParam
argument_list|(
literal|"chiba.useragent"
argument_list|,
name|request
operator|.
name|getHeader
argument_list|(
literal|"User-Agent"
argument_list|)
argument_list|)
expr_stmt|;
comment|//copy all request querystring parameters that
comment|//arent chiba related into the context
name|Enumeration
name|params
init|=
name|request
operator|.
name|getParameterNames
argument_list|()
decl_stmt|;
name|String
name|paramName
decl_stmt|;
while|while
condition|(
name|params
operator|.
name|hasMoreElements
argument_list|()
condition|)
block|{
name|paramName
operator|=
operator|(
name|String
operator|)
name|params
operator|.
name|nextElement
argument_list|()
expr_stmt|;
name|boolean
name|isChibaParam
init|=
literal|false
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|CHIBA_QUERYSTRING_PARAMS
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
if|if
condition|(
name|paramName
operator|.
name|equals
argument_list|(
name|CHIBA_QUERYSTRING_PARAMS
index|[
name|i
index|]
argument_list|)
condition|)
block|{
name|isChibaParam
operator|=
literal|true
expr_stmt|;
block|}
block|}
if|if
condition|(
operator|!
name|isChibaParam
condition|)
block|{
name|String
name|paramValue
init|=
name|request
operator|.
name|getParameter
argument_list|(
name|paramName
argument_list|)
decl_stmt|;
name|adapter
operator|.
name|setContextParam
argument_list|(
name|paramName
argument_list|,
name|paramValue
argument_list|)
expr_stmt|;
block|}
block|}
comment|//store cookies that may exist in request and passes them on to processor for usage in
comment|//HTTPConnectors. Instance loading and submission then uses these cookies. Important for
comment|//applications using auth
name|javax
operator|.
name|servlet
operator|.
name|http
operator|.
name|Cookie
index|[]
name|cookiesIn
init|=
name|request
operator|.
name|getCookies
argument_list|()
decl_stmt|;
if|if
condition|(
name|cookiesIn
operator|!=
literal|null
condition|)
block|{
name|Cookie
index|[]
name|commonsCookies
init|=
operator|new
name|Cookie
index|[
name|cookiesIn
operator|.
name|length
index|]
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|cookiesIn
operator|.
name|length
condition|;
name|i
operator|+=
literal|1
control|)
block|{
name|javax
operator|.
name|servlet
operator|.
name|http
operator|.
name|Cookie
name|c
init|=
name|cookiesIn
index|[
name|i
index|]
decl_stmt|;
name|String
name|domain
init|=
name|c
operator|.
name|getDomain
argument_list|()
decl_stmt|;
if|if
condition|(
name|domain
operator|==
literal|null
condition|)
block|{
name|domain
operator|=
literal|""
expr_stmt|;
block|}
name|String
name|path
init|=
name|c
operator|.
name|getPath
argument_list|()
decl_stmt|;
if|if
condition|(
name|path
operator|==
literal|null
condition|)
block|{
name|path
operator|=
literal|"/"
expr_stmt|;
block|}
name|commonsCookies
index|[
name|i
index|]
operator|=
operator|new
name|Cookie
argument_list|(
name|domain
argument_list|,
name|c
operator|.
name|getName
argument_list|()
argument_list|,
name|c
operator|.
name|getValue
argument_list|()
argument_list|,
name|path
argument_list|,
name|c
operator|.
name|getMaxAge
argument_list|()
argument_list|,
name|c
operator|.
name|getSecure
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|adapter
operator|.
name|setContextParam
argument_list|(
name|AbstractHTTPConnector
operator|.
name|REQUEST_COOKIE
argument_list|,
name|commonsCookies
argument_list|)
expr_stmt|;
block|}
comment|//initialise the adapter
name|adapter
operator|.
name|init
argument_list|()
expr_stmt|;
if|if
condition|(
name|chibaLoad
argument_list|(
name|adapter
argument_list|,
name|response
argument_list|)
condition|)
block|{
return|return;
block|}
if|if
condition|(
name|chibaReplaceAll
argument_list|(
name|adapter
argument_list|,
name|response
argument_list|)
condition|)
block|{
return|return;
block|}
comment|//create the UI Generator
name|StylesheetLoader
name|stylesheetLoader
init|=
operator|new
name|StylesheetLoader
argument_list|(
name|CHIBA_STYLESHEET_PATH
argument_list|)
decl_stmt|;
name|stylesheetLoader
operator|.
name|setStylesheetFile
argument_list|(
name|CHIBA_STYLESHEET_FILE
argument_list|)
expr_stmt|;
name|UIGenerator
name|uiGenerator
init|=
operator|new
name|XSLTGenerator
argument_list|(
name|stylesheetLoader
argument_list|)
decl_stmt|;
comment|/* START set parameters */
name|uiGenerator
operator|.
name|setParameter
argument_list|(
literal|"contextroot"
argument_list|,
name|request
operator|.
name|getContextPath
argument_list|()
argument_list|)
expr_stmt|;
name|uiGenerator
operator|.
name|setParameter
argument_list|(
literal|"sessionKey"
argument_list|,
name|session
operator|.
name|getId
argument_list|()
argument_list|)
expr_stmt|;
name|uiGenerator
operator|.
name|setParameter
argument_list|(
literal|"action-url"
argument_list|,
name|actionURL
argument_list|)
expr_stmt|;
name|uiGenerator
operator|.
name|setParameter
argument_list|(
literal|"debug-enabled"
argument_list|,
operator|new
name|Boolean
argument_list|(
name|CHIBA_DEBUG
argument_list|)
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|uiGenerator
operator|.
name|setParameter
argument_list|(
literal|"selector-prefix"
argument_list|,
literal|"s_"
argument_list|)
expr_stmt|;
name|uiGenerator
operator|.
name|setParameter
argument_list|(
literal|"remove-upload-prefix"
argument_list|,
literal|"ru_"
argument_list|)
expr_stmt|;
name|uiGenerator
operator|.
name|setParameter
argument_list|(
literal|"data-prefix"
argument_list|,
literal|"d_"
argument_list|)
expr_stmt|;
name|uiGenerator
operator|.
name|setParameter
argument_list|(
literal|"trigger-prefix"
argument_list|,
literal|"t_"
argument_list|)
expr_stmt|;
name|uiGenerator
operator|.
name|setParameter
argument_list|(
literal|"user-agent"
argument_list|,
name|request
operator|.
name|getHeader
argument_list|(
literal|"User-Agent"
argument_list|)
argument_list|)
expr_stmt|;
name|uiGenerator
operator|.
name|setParameter
argument_list|(
literal|"css-file"
argument_list|,
name|CHIBA_CSS
argument_list|)
expr_stmt|;
comment|/* END set parameters */
comment|//Generate the UI
name|uiGenerator
operator|.
name|setInputNode
argument_list|(
name|adapter
operator|.
name|getXForms
argument_list|()
argument_list|)
expr_stmt|;
name|uiGenerator
operator|.
name|setOutput
argument_list|(
name|response
operator|.
name|getWriter
argument_list|()
argument_list|)
expr_stmt|;
name|uiGenerator
operator|.
name|generate
argument_list|()
expr_stmt|;
comment|//store adapter and uigenerator in session
name|session
operator|.
name|setAttribute
argument_list|(
name|SESSION_CHIBA_ADAPTER
argument_list|,
name|adapter
argument_list|)
expr_stmt|;
name|session
operator|.
name|setAttribute
argument_list|(
name|SESSION_CHIBA_UIGENERATOR
argument_list|,
name|uiGenerator
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|XFormsException
name|xfe
parameter_list|)
block|{
name|System
operator|.
name|err
operator|.
name|println
argument_list|(
name|xfe
operator|.
name|getMessage
argument_list|()
argument_list|)
expr_stmt|;
name|xfe
operator|.
name|printStackTrace
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|ioe
parameter_list|)
block|{
name|System
operator|.
name|err
operator|.
name|println
argument_list|(
name|ioe
operator|.
name|getMessage
argument_list|()
argument_list|)
expr_stmt|;
name|ioe
operator|.
name|printStackTrace
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|System
operator|.
name|err
operator|.
name|println
argument_list|(
name|e
operator|.
name|getMessage
argument_list|()
argument_list|)
expr_stmt|;
name|e
operator|.
name|printStackTrace
argument_list|()
expr_stmt|;
block|}
block|}
comment|/** 	 * Updates the state of an XForm 	 *  	 *  @param srvRequest	The Servlet request object to read the update from 	 *  @param srvResponse	The Servlet response to write the result to 	 */
specifier|private
name|void
name|updateXForm
parameter_list|(
name|ServletRequest
name|srvRequest
parameter_list|,
name|ServletResponse
name|srvResponse
parameter_list|)
block|{
name|HttpServletRequest
name|request
init|=
operator|(
name|HttpServletRequest
operator|)
name|srvRequest
decl_stmt|;
name|HttpSession
name|session
init|=
name|request
operator|.
name|getSession
argument_list|()
decl_stmt|;
name|ChibaAdapter
name|adapter
init|=
operator|(
name|ChibaAdapter
operator|)
name|session
operator|.
name|getAttribute
argument_list|(
name|SESSION_CHIBA_ADAPTER
argument_list|)
decl_stmt|;
if|if
condition|(
name|adapter
operator|==
literal|null
condition|)
block|{
name|log
argument_list|(
literal|"No chiba adapter in session"
argument_list|,
literal|true
argument_list|)
expr_stmt|;
return|return;
block|}
name|ChibaEvent
name|chibaEvent
init|=
operator|new
name|DefaultChibaEventImpl
argument_list|()
decl_stmt|;
name|chibaEvent
operator|.
name|initEvent
argument_list|(
literal|"http-request"
argument_list|,
literal|null
argument_list|,
name|request
argument_list|)
expr_stmt|;
try|try
block|{
name|adapter
operator|.
name|dispatch
argument_list|(
name|chibaEvent
argument_list|)
expr_stmt|;
if|if
condition|(
name|chibaLoad
argument_list|(
name|adapter
argument_list|,
name|srvResponse
argument_list|)
condition|)
block|{
comment|//clear session
name|session
operator|.
name|removeAttribute
argument_list|(
name|SESSION_CHIBA_ADAPTER
argument_list|)
expr_stmt|;
name|session
operator|.
name|removeAttribute
argument_list|(
name|SESSION_CHIBA_UIGENERATOR
argument_list|)
expr_stmt|;
return|return;
block|}
if|if
condition|(
name|chibaReplaceAll
argument_list|(
name|adapter
argument_list|,
name|srvResponse
argument_list|)
condition|)
block|{
comment|//clear session
name|session
operator|.
name|removeAttribute
argument_list|(
name|SESSION_CHIBA_ADAPTER
argument_list|)
expr_stmt|;
name|session
operator|.
name|removeAttribute
argument_list|(
name|SESSION_CHIBA_UIGENERATOR
argument_list|)
expr_stmt|;
return|return;
block|}
name|UIGenerator
name|uiGenerator
init|=
operator|(
name|UIGenerator
operator|)
name|request
operator|.
name|getSession
argument_list|()
operator|.
name|getAttribute
argument_list|(
name|SESSION_CHIBA_UIGENERATOR
argument_list|)
decl_stmt|;
name|srvResponse
operator|.
name|setCharacterEncoding
argument_list|(
literal|"UTF-8"
argument_list|)
expr_stmt|;
name|uiGenerator
operator|.
name|setInputNode
argument_list|(
name|adapter
operator|.
name|getXForms
argument_list|()
argument_list|)
expr_stmt|;
name|uiGenerator
operator|.
name|setOutput
argument_list|(
name|srvResponse
operator|.
name|getWriter
argument_list|()
argument_list|)
expr_stmt|;
name|uiGenerator
operator|.
name|generate
argument_list|()
expr_stmt|;
name|srvResponse
operator|.
name|getWriter
argument_list|()
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|XFormsException
name|xfe
parameter_list|)
block|{
name|System
operator|.
name|err
operator|.
name|println
argument_list|(
name|xfe
operator|.
name|getMessage
argument_list|()
argument_list|)
expr_stmt|;
name|xfe
operator|.
name|printStackTrace
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|ioe
parameter_list|)
block|{
name|System
operator|.
name|err
operator|.
name|println
argument_list|(
name|ioe
operator|.
name|getMessage
argument_list|()
argument_list|)
expr_stmt|;
name|ioe
operator|.
name|printStackTrace
argument_list|()
expr_stmt|;
block|}
block|}
comment|/** 	 * should be re-implemented using chiba events on adapter 	 */
specifier|protected
name|boolean
name|chibaLoad
parameter_list|(
name|ChibaAdapter
name|adapter
parameter_list|,
name|ServletResponse
name|srvResponse
parameter_list|)
throws|throws
name|XFormsException
throws|,
name|IOException
block|{
name|HttpServletResponse
name|response
init|=
operator|(
name|HttpServletResponse
operator|)
name|srvResponse
decl_stmt|;
if|if
condition|(
name|adapter
operator|.
name|getContextParam
argument_list|(
name|ChibaAdapter
operator|.
name|LOAD_URI
argument_list|)
operator|!=
literal|null
condition|)
block|{
name|String
name|redirectTo
init|=
operator|(
name|String
operator|)
name|adapter
operator|.
name|removeContextParam
argument_list|(
name|ChibaAdapter
operator|.
name|LOAD_URI
argument_list|)
decl_stmt|;
name|adapter
operator|.
name|shutdown
argument_list|()
expr_stmt|;
name|response
operator|.
name|sendRedirect
argument_list|(
name|response
operator|.
name|encodeRedirectURL
argument_list|(
name|redirectTo
argument_list|)
argument_list|)
expr_stmt|;
return|return
literal|true
return|;
block|}
return|return
literal|false
return|;
block|}
comment|/** 	 * should be re-implemented using chiba events on adapter 	 */
specifier|protected
name|boolean
name|chibaReplaceAll
parameter_list|(
name|ChibaAdapter
name|chibaAdapter
parameter_list|,
name|ServletResponse
name|srvResponse
parameter_list|)
throws|throws
name|XFormsException
throws|,
name|IOException
block|{
if|if
condition|(
name|chibaAdapter
operator|.
name|getContextParam
argument_list|(
name|ChibaAdapter
operator|.
name|SUBMISSION_RESPONSE
argument_list|)
operator|!=
literal|null
condition|)
block|{
name|Map
name|forwardMap
init|=
operator|(
name|Map
operator|)
name|chibaAdapter
operator|.
name|removeContextParam
argument_list|(
name|ChibaAdapter
operator|.
name|SUBMISSION_RESPONSE
argument_list|)
decl_stmt|;
if|if
condition|(
name|forwardMap
operator|.
name|containsKey
argument_list|(
name|ChibaAdapter
operator|.
name|SUBMISSION_RESPONSE_STREAM
argument_list|)
condition|)
block|{
name|chibaForwardResponse
argument_list|(
name|forwardMap
argument_list|,
name|srvResponse
argument_list|)
expr_stmt|;
name|chibaAdapter
operator|.
name|shutdown
argument_list|()
expr_stmt|;
return|return
literal|true
return|;
block|}
block|}
return|return
literal|false
return|;
block|}
specifier|private
name|void
name|chibaForwardResponse
parameter_list|(
name|Map
name|forwardMap
parameter_list|,
name|ServletResponse
name|srvResponse
parameter_list|)
throws|throws
name|IOException
block|{
name|HttpServletResponse
name|response
init|=
operator|(
name|HttpServletResponse
operator|)
name|srvResponse
decl_stmt|;
comment|// fetch response stream
name|InputStream
name|responseStream
init|=
operator|(
name|InputStream
operator|)
name|forwardMap
operator|.
name|remove
argument_list|(
name|ChibaAdapter
operator|.
name|SUBMISSION_RESPONSE_STREAM
argument_list|)
decl_stmt|;
comment|// copy header information
name|Iterator
name|iterator
init|=
name|forwardMap
operator|.
name|keySet
argument_list|()
operator|.
name|iterator
argument_list|()
decl_stmt|;
while|while
condition|(
name|iterator
operator|.
name|hasNext
argument_list|()
condition|)
block|{
name|String
name|name
init|=
operator|(
name|String
operator|)
name|iterator
operator|.
name|next
argument_list|()
decl_stmt|;
if|if
condition|(
literal|"Transfer-Encoding"
operator|.
name|equalsIgnoreCase
argument_list|(
name|name
argument_list|)
condition|)
block|{
comment|// Some servers (e.g. WebSphere) may set a "Transfer-Encoding"
comment|// with the value "chunked". This may confuse the client since
comment|// ChibaServlet output is not encoded as "chunked", so this
comment|// header is ignored.
continue|continue;
block|}
name|String
name|value
init|=
operator|(
name|String
operator|)
name|forwardMap
operator|.
name|get
argument_list|(
name|name
argument_list|)
decl_stmt|;
name|response
operator|.
name|setHeader
argument_list|(
name|name
argument_list|,
name|value
argument_list|)
expr_stmt|;
block|}
comment|// copy stream content
name|OutputStream
name|outputStream
init|=
operator|new
name|BufferedOutputStream
argument_list|(
name|response
operator|.
name|getOutputStream
argument_list|()
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|b
init|=
name|responseStream
operator|.
name|read
argument_list|()
init|;
name|b
operator|>
operator|-
literal|1
condition|;
name|b
operator|=
name|responseStream
operator|.
name|read
argument_list|()
control|)
block|{
name|outputStream
operator|.
name|write
argument_list|(
name|b
argument_list|)
expr_stmt|;
block|}
comment|// close streams
name|responseStream
operator|.
name|close
argument_list|()
expr_stmt|;
name|outputStream
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
block|}
end_class

end_unit

