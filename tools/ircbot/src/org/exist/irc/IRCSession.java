begin_unit|revision:1.0.0;language:Java;cregit-version:0.0.1
begin_package
package|package
name|org
operator|.
name|exist
operator|.
name|irc
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|OutputStreamWriter
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|PrintWriter
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|StringWriter
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|servlet
operator|.
name|ServletOutputStream
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|servlet
operator|.
name|http
operator|.
name|HttpServletResponse
import|;
end_import

begin_import
import|import
name|org
operator|.
name|jibble
operator|.
name|pircbot
operator|.
name|IrcException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|jibble
operator|.
name|pircbot
operator|.
name|NickAlreadyInUseException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|jibble
operator|.
name|pircbot
operator|.
name|PircBot
import|;
end_import

begin_import
import|import
name|org
operator|.
name|jibble
operator|.
name|pircbot
operator|.
name|User
import|;
end_import

begin_class
specifier|public
class|class
name|IRCSession
extends|extends
name|PircBot
block|{
specifier|private
specifier|static
specifier|final
name|String
name|EV_MESSAGE
init|=
literal|"message"
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|String
name|EV_NOTICE
init|=
literal|"notice"
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|String
name|EV_JOIN
init|=
literal|"join"
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|String
name|EV_PART
init|=
literal|"part"
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|String
name|EV_USERS_LIST
init|=
literal|"users"
decl_stmt|;
comment|// server and channel settings
specifier|private
name|String
name|channel
decl_stmt|;
specifier|private
name|String
name|sessionId
decl_stmt|;
specifier|private
name|PrintWriter
name|writer
decl_stmt|;
specifier|private
name|StringWriter
name|tempWriter
init|=
operator|new
name|StringWriter
argument_list|()
decl_stmt|;
specifier|private
name|boolean
name|disconnect
init|=
literal|false
decl_stmt|;
specifier|public
name|IRCSession
parameter_list|(
name|String
name|server
parameter_list|,
name|String
name|channel
parameter_list|,
name|String
name|nick
parameter_list|)
throws|throws
name|IOException
throws|,
name|NickAlreadyInUseException
throws|,
name|IrcException
block|{
name|super
argument_list|()
expr_stmt|;
name|this
operator|.
name|channel
operator|=
name|channel
expr_stmt|;
name|this
operator|.
name|sessionId
operator|=
name|Integer
operator|.
name|toString
argument_list|(
name|hashCode
argument_list|()
argument_list|)
expr_stmt|;
name|this
operator|.
name|writer
operator|=
operator|new
name|PrintWriter
argument_list|(
name|tempWriter
argument_list|)
expr_stmt|;
name|this
operator|.
name|setVersion
argument_list|(
literal|"XIRCProxy 0.1"
argument_list|)
expr_stmt|;
name|this
operator|.
name|setName
argument_list|(
name|nick
argument_list|)
expr_stmt|;
name|this
operator|.
name|setVerbose
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|log
argument_list|(
literal|"Connecting to "
operator|+
name|server
argument_list|)
expr_stmt|;
name|connect
argument_list|(
name|server
argument_list|)
expr_stmt|;
name|log
argument_list|(
literal|"Join channel: "
operator|+
name|channel
argument_list|)
expr_stmt|;
name|joinChannel
argument_list|(
name|channel
argument_list|)
expr_stmt|;
block|}
specifier|public
name|String
name|getSessionId
parameter_list|()
block|{
return|return
name|sessionId
return|;
block|}
specifier|public
specifier|synchronized
name|void
name|run
parameter_list|(
name|HttpServletResponse
name|response
parameter_list|)
block|{
name|response
operator|.
name|setContentType
argument_list|(
literal|"text/html"
argument_list|)
expr_stmt|;
name|response
operator|.
name|setBufferSize
argument_list|(
literal|64
argument_list|)
expr_stmt|;
try|try
block|{
name|ServletOutputStream
name|os
init|=
name|response
operator|.
name|getOutputStream
argument_list|()
decl_stmt|;
name|writer
operator|=
operator|new
name|PrintWriter
argument_list|(
operator|new
name|OutputStreamWriter
argument_list|(
name|os
argument_list|,
literal|"UTF-8"
argument_list|)
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|writer
operator|.
name|println
argument_list|(
literal|"<html><head><title>IRCProxy</title>"
argument_list|)
expr_stmt|;
name|writer
operator|.
name|println
argument_list|(
literal|"</head><body>"
argument_list|)
expr_stmt|;
name|writer
operator|.
name|println
argument_list|(
name|tempWriter
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|tempWriter
operator|=
literal|null
expr_stmt|;
name|writer
operator|.
name|flush
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
comment|// TODO Auto-generated catch block
name|e
operator|.
name|printStackTrace
argument_list|()
expr_stmt|;
block|}
name|log
argument_list|(
literal|"Listening to chat events ..."
argument_list|)
expr_stmt|;
while|while
condition|(
operator|!
name|disconnect
condition|)
block|{
try|try
block|{
name|wait
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|InterruptedException
name|e
parameter_list|)
block|{
block|}
block|}
block|}
specifier|public
name|void
name|quit
parameter_list|()
block|{
name|disconnect
argument_list|()
expr_stmt|;
block|}
specifier|public
specifier|synchronized
name|void
name|send
parameter_list|(
name|String
name|message
parameter_list|)
block|{
name|sendMessage
argument_list|(
name|channel
argument_list|,
name|message
argument_list|)
expr_stmt|;
name|writeMessage
argument_list|(
name|getNick
argument_list|()
argument_list|,
name|message
argument_list|)
expr_stmt|;
block|}
specifier|protected
specifier|synchronized
name|void
name|onDisconnect
parameter_list|()
block|{
name|disconnect
operator|=
literal|true
expr_stmt|;
name|notifyAll
argument_list|()
expr_stmt|;
block|}
specifier|protected
name|void
name|onMessage
parameter_list|(
name|String
name|channel
parameter_list|,
name|String
name|sender
parameter_list|,
name|String
name|login
parameter_list|,
name|String
name|hostname
parameter_list|,
name|String
name|message
parameter_list|)
block|{
name|log
argument_list|(
literal|"Message from "
operator|+
name|sender
argument_list|)
expr_stmt|;
name|writeMessage
argument_list|(
name|sender
argument_list|,
name|message
argument_list|)
expr_stmt|;
block|}
specifier|protected
name|void
name|onJoin
parameter_list|(
name|String
name|channel
parameter_list|,
name|String
name|sender
parameter_list|,
name|String
name|login
parameter_list|,
name|String
name|hostname
parameter_list|)
block|{
try|try
block|{
name|writer
operator|.
name|println
argument_list|(
literal|"<script language=\"JavaScript\" type=\"text/javascript\">"
argument_list|)
expr_stmt|;
name|writer
operator|.
name|println
argument_list|(
name|jsCall
argument_list|(
literal|"dispatchEvent"
argument_list|,
operator|new
name|String
index|[]
block|{
name|EV_JOIN
block|,
name|sender
block|,
name|sender
operator|+
literal|" ["
operator|+
name|hostname
operator|+
literal|"] has joined "
operator|+
name|channel
block|}
argument_list|)
argument_list|)
expr_stmt|;
name|writer
operator|.
name|println
argument_list|(
literal|"</script>\n\n"
argument_list|)
expr_stmt|;
name|writer
operator|.
name|flush
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|e
operator|.
name|printStackTrace
argument_list|()
expr_stmt|;
name|closeConnection
argument_list|(
name|e
operator|.
name|getMessage
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
specifier|protected
name|void
name|onPart
parameter_list|(
name|String
name|channel
parameter_list|,
name|String
name|sender
parameter_list|,
name|String
name|login
parameter_list|,
name|String
name|hostname
parameter_list|)
block|{
try|try
block|{
name|writer
operator|.
name|println
argument_list|(
literal|"<script language=\"JavaScript\" type=\"text/javascript\">"
argument_list|)
expr_stmt|;
name|writer
operator|.
name|println
argument_list|(
name|jsCall
argument_list|(
literal|"dispatchEvent"
argument_list|,
operator|new
name|String
index|[]
block|{
name|EV_PART
block|,
name|sender
block|,
name|sender
operator|+
literal|" ["
operator|+
name|hostname
operator|+
literal|"] has left "
operator|+
name|channel
block|}
argument_list|)
argument_list|)
expr_stmt|;
name|writer
operator|.
name|println
argument_list|(
literal|"</script>\n\n"
argument_list|)
expr_stmt|;
name|writer
operator|.
name|flush
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|e
operator|.
name|printStackTrace
argument_list|()
expr_stmt|;
name|closeConnection
argument_list|(
name|e
operator|.
name|getMessage
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
specifier|protected
name|void
name|onQuit
parameter_list|(
name|String
name|sourceNick
parameter_list|,
name|String
name|sourceLogin
parameter_list|,
name|String
name|sourceHostname
parameter_list|,
name|String
name|reason
parameter_list|)
block|{
try|try
block|{
name|writer
operator|.
name|println
argument_list|(
literal|"<script language=\"JavaScript\" type=\"text/javascript\">"
argument_list|)
expr_stmt|;
name|writer
operator|.
name|println
argument_list|(
name|jsCall
argument_list|(
literal|"dispatchEvent"
argument_list|,
operator|new
name|String
index|[]
block|{
name|EV_PART
block|,
name|sourceNick
block|,
name|sourceNick
operator|+
literal|" ["
operator|+
name|sourceLogin
operator|+
literal|'@'
operator|+
name|sourceHostname
operator|+
literal|"] has quit: \""
operator|+
name|reason
operator|+
literal|'"'
block|}
argument_list|)
argument_list|)
expr_stmt|;
name|writer
operator|.
name|println
argument_list|(
literal|"</script>\n\n"
argument_list|)
expr_stmt|;
name|writer
operator|.
name|flush
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|e
operator|.
name|printStackTrace
argument_list|()
expr_stmt|;
name|closeConnection
argument_list|(
name|e
operator|.
name|getMessage
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
specifier|protected
name|void
name|onNotice
parameter_list|(
name|String
name|sourceNick
parameter_list|,
name|String
name|sourceLogin
parameter_list|,
name|String
name|sourceHostname
parameter_list|,
name|String
name|target
parameter_list|,
name|String
name|notice
parameter_list|)
block|{
name|writeEvent
argument_list|(
literal|"Notice from "
operator|+
name|sourceNick
operator|+
literal|" ["
operator|+
name|sourceHostname
operator|+
literal|"] to "
operator|+
name|target
operator|+
literal|": "
operator|+
name|notice
argument_list|,
name|EV_NOTICE
argument_list|)
expr_stmt|;
block|}
specifier|protected
name|void
name|onUserList
parameter_list|(
name|String
name|channel
parameter_list|,
name|User
index|[]
name|users
parameter_list|)
block|{
name|String
name|args
index|[]
init|=
operator|new
name|String
index|[
name|users
operator|.
name|length
operator|+
literal|1
index|]
decl_stmt|;
name|args
index|[
literal|0
index|]
operator|=
name|EV_USERS_LIST
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|users
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
name|args
index|[
name|i
operator|+
literal|1
index|]
operator|=
name|users
index|[
name|i
index|]
operator|.
name|getNick
argument_list|()
expr_stmt|;
block|}
try|try
block|{
name|writer
operator|.
name|println
argument_list|(
literal|"<script language=\"JavaScript\" type=\"text/javascript\">"
argument_list|)
expr_stmt|;
name|writer
operator|.
name|println
argument_list|(
name|jsCall
argument_list|(
literal|"dispatchEvent"
argument_list|,
name|args
argument_list|)
argument_list|)
expr_stmt|;
name|writer
operator|.
name|println
argument_list|(
literal|"</script>\n\n"
argument_list|)
expr_stmt|;
name|writer
operator|.
name|flush
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|e
operator|.
name|printStackTrace
argument_list|()
expr_stmt|;
name|closeConnection
argument_list|(
name|e
operator|.
name|getMessage
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
specifier|private
name|void
name|writeMessage
parameter_list|(
name|String
name|sender
parameter_list|,
name|String
name|message
parameter_list|)
block|{
name|String
name|js
init|=
name|jsCall
argument_list|(
literal|"dispatchEvent"
argument_list|,
operator|new
name|String
index|[]
block|{
name|EV_MESSAGE
block|,
name|sender
block|,
name|message
block|}
argument_list|)
decl_stmt|;
name|writeLine
argument_list|(
name|js
argument_list|)
expr_stmt|;
block|}
specifier|private
name|void
name|writeEvent
parameter_list|(
name|String
name|message
parameter_list|,
name|String
name|cls
parameter_list|)
block|{
name|String
name|js
init|=
name|jsCall
argument_list|(
literal|"dispatchEvent"
argument_list|,
operator|new
name|String
index|[]
block|{
name|cls
block|,
name|message
block|}
argument_list|)
decl_stmt|;
name|writeLine
argument_list|(
name|js
argument_list|)
expr_stmt|;
block|}
specifier|private
name|void
name|writeLine
parameter_list|(
name|String
name|data
parameter_list|)
block|{
try|try
block|{
name|writer
operator|.
name|println
argument_list|(
literal|"<script language=\"JavaScript\" type=\"text/javascript\">"
argument_list|)
expr_stmt|;
name|writer
operator|.
name|println
argument_list|(
name|data
argument_list|)
expr_stmt|;
name|writer
operator|.
name|println
argument_list|(
literal|"</script>\n\n"
argument_list|)
expr_stmt|;
name|writer
operator|.
name|flush
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|e
operator|.
name|printStackTrace
argument_list|()
expr_stmt|;
name|closeConnection
argument_list|(
name|e
operator|.
name|getMessage
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
specifier|private
name|String
name|jsCall
parameter_list|(
name|String
name|func
parameter_list|,
name|String
index|[]
name|params
parameter_list|)
block|{
name|StringBuffer
name|buf
init|=
operator|new
name|StringBuffer
argument_list|()
decl_stmt|;
name|buf
operator|.
name|append
argument_list|(
literal|"top."
argument_list|)
operator|.
name|append
argument_list|(
name|func
argument_list|)
operator|.
name|append
argument_list|(
literal|"('"
argument_list|)
expr_stmt|;
name|buf
operator|.
name|append
argument_list|(
name|sessionId
argument_list|)
expr_stmt|;
name|buf
operator|.
name|append
argument_list|(
literal|'\''
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|params
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
name|buf
operator|.
name|append
argument_list|(
literal|", '"
argument_list|)
expr_stmt|;
name|buf
operator|.
name|append
argument_list|(
name|escape
argument_list|(
name|params
index|[
name|i
index|]
argument_list|)
argument_list|)
expr_stmt|;
name|buf
operator|.
name|append
argument_list|(
literal|'\''
argument_list|)
expr_stmt|;
block|}
name|buf
operator|.
name|append
argument_list|(
literal|");"
argument_list|)
expr_stmt|;
return|return
name|buf
operator|.
name|toString
argument_list|()
return|;
block|}
specifier|private
name|void
name|closeConnection
parameter_list|(
name|String
name|message
parameter_list|)
block|{
if|if
condition|(
name|writer
operator|!=
literal|null
condition|)
block|{
name|writer
operator|.
name|println
argument_list|(
literal|"<h1>Error</h1>"
argument_list|)
expr_stmt|;
name|writer
operator|.
name|println
argument_list|(
literal|"<p>Error found: "
operator|+
name|message
operator|+
literal|"</p>"
argument_list|)
expr_stmt|;
name|writer
operator|.
name|println
argument_list|(
literal|"<p>Closing connection.</p>"
argument_list|)
expr_stmt|;
name|writer
operator|.
name|flush
argument_list|()
expr_stmt|;
block|}
name|partChannel
argument_list|(
name|channel
argument_list|)
expr_stmt|;
name|quitServer
argument_list|()
expr_stmt|;
block|}
specifier|private
name|String
name|escape
parameter_list|(
name|String
name|in
parameter_list|)
block|{
name|StringBuffer
name|buf
init|=
operator|new
name|StringBuffer
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|in
operator|.
name|length
argument_list|()
condition|;
name|i
operator|++
control|)
block|{
name|char
name|ch
init|=
name|in
operator|.
name|charAt
argument_list|(
name|i
argument_list|)
decl_stmt|;
switch|switch
condition|(
name|ch
condition|)
block|{
case|case
literal|'\''
case|:
name|buf
operator|.
name|append
argument_list|(
literal|"&quot;"
argument_list|)
expr_stmt|;
break|break;
case|case
literal|'<'
case|:
name|buf
operator|.
name|append
argument_list|(
literal|"&lt;"
argument_list|)
expr_stmt|;
break|break;
case|case
literal|'>'
case|:
name|buf
operator|.
name|append
argument_list|(
literal|"&gt;"
argument_list|)
expr_stmt|;
break|break;
case|case
literal|'&'
case|:
name|buf
operator|.
name|append
argument_list|(
literal|"&amp;"
argument_list|)
expr_stmt|;
break|break;
default|default:
name|buf
operator|.
name|append
argument_list|(
name|ch
argument_list|)
expr_stmt|;
break|break;
block|}
block|}
return|return
name|buf
operator|.
name|toString
argument_list|()
return|;
block|}
block|}
end_class

end_unit

