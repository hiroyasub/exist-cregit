begin_unit|revision:1.0.0;language:Java;cregit-version:0.0.1
begin_package
package|package
name|org
operator|.
name|exist
operator|.
name|yajsw
package|;
end_package

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|start
operator|.
name|Classpath
import|;
end_import

begin_import
import|import
name|org
operator|.
name|rzo
operator|.
name|yajsw
operator|.
name|app
operator|.
name|WrapperJVMMain
import|;
end_import

begin_import
import|import
name|java
operator|.
name|lang
operator|.
name|reflect
operator|.
name|Method
import|;
end_import

begin_import
import|import
name|java
operator|.
name|nio
operator|.
name|file
operator|.
name|Path
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Observable
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Observer
import|;
end_import

begin_comment
comment|/**  *  */
end_comment

begin_class
specifier|public
class|class
name|Main
implements|implements
name|Observer
implements|,
name|Comparable
block|{
specifier|public
specifier|static
specifier|final
name|int
name|WAIT_HINT_UPDATE
init|=
literal|10000
decl_stmt|;
specifier|public
name|void
name|start
parameter_list|(
name|String
index|[]
name|args
parameter_list|)
block|{
try|try
block|{
comment|// use the bootstrap loader to autodetect EXIST_HOME and
comment|// construct a correct classpath
specifier|final
name|org
operator|.
name|exist
operator|.
name|start
operator|.
name|Main
name|loader
init|=
operator|new
name|org
operator|.
name|exist
operator|.
name|start
operator|.
name|Main
argument_list|(
name|args
index|[
literal|0
index|]
argument_list|)
decl_stmt|;
comment|//            final Path homeDir = loader.detectHome();
comment|//            final Classpath classpath = loader.constructClasspath(homeDir, args);
specifier|final
name|Classpath
name|classpath
init|=
operator|new
name|Classpath
argument_list|()
decl_stmt|;
specifier|final
name|ClassLoader
name|cl
init|=
name|classpath
operator|.
name|getClassLoader
argument_list|(
literal|null
argument_list|)
decl_stmt|;
name|Thread
operator|.
name|currentThread
argument_list|()
operator|.
name|setContextClassLoader
argument_list|(
name|cl
argument_list|)
expr_stmt|;
specifier|final
name|Class
argument_list|<
name|?
argument_list|>
name|klazz
init|=
name|cl
operator|.
name|loadClass
argument_list|(
literal|"org.exist.jetty.JettyStart"
argument_list|)
decl_stmt|;
comment|// find the run() method in the class
specifier|final
name|Class
argument_list|<
name|?
argument_list|>
index|[]
name|methodParamTypes
init|=
operator|new
name|Class
index|[
literal|2
index|]
decl_stmt|;
name|methodParamTypes
index|[
literal|0
index|]
operator|=
name|args
operator|.
name|getClass
argument_list|()
expr_stmt|;
name|methodParamTypes
index|[
literal|1
index|]
operator|=
name|Observer
operator|.
name|class
expr_stmt|;
specifier|final
name|Method
name|method
init|=
name|klazz
operator|.
name|getDeclaredMethod
argument_list|(
literal|"run"
argument_list|,
name|methodParamTypes
argument_list|)
decl_stmt|;
comment|// create a new instance and invoke the run() method
specifier|final
name|Object
name|app
init|=
name|klazz
operator|.
name|newInstance
argument_list|()
decl_stmt|;
specifier|final
name|String
index|[]
name|myArgs
init|=
operator|new
name|String
index|[
name|args
operator|.
name|length
operator|-
literal|1
index|]
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|1
init|;
name|i
operator|<
name|args
operator|.
name|length
condition|;
name|i
operator|++
control|)
name|myArgs
index|[
name|i
operator|-
literal|1
index|]
operator|=
name|args
index|[
name|i
index|]
expr_stmt|;
specifier|final
name|Object
index|[]
name|params
init|=
operator|new
name|Object
index|[
literal|2
index|]
decl_stmt|;
name|params
index|[
literal|0
index|]
operator|=
name|myArgs
expr_stmt|;
name|params
index|[
literal|1
index|]
operator|=
name|this
expr_stmt|;
name|method
operator|.
name|invoke
argument_list|(
name|app
argument_list|,
name|params
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|e
operator|.
name|printStackTrace
argument_list|()
expr_stmt|;
block|}
block|}
annotation|@
name|Override
specifier|public
name|void
name|update
parameter_list|(
name|Observable
name|o
parameter_list|,
name|Object
name|arg
parameter_list|)
block|{
if|if
condition|(
literal|"shutdown"
operator|.
name|equals
argument_list|(
name|arg
argument_list|)
condition|)
block|{
name|WrapperJVMMain
operator|.
name|WRAPPER_MANAGER
operator|.
name|signalStopping
argument_list|(
name|WAIT_HINT_UPDATE
argument_list|)
expr_stmt|;
block|}
if|else if
condition|(
literal|"started"
operator|.
name|equals
argument_list|(
name|arg
argument_list|)
condition|)
block|{
name|WrapperJVMMain
operator|.
name|WRAPPER_MANAGER
operator|.
name|reportServiceStartup
argument_list|()
expr_stmt|;
block|}
block|}
specifier|public
specifier|static
name|void
name|main
parameter_list|(
name|String
index|[]
name|args
parameter_list|)
block|{
specifier|final
name|Main
name|main
init|=
operator|new
name|Main
argument_list|()
decl_stmt|;
name|main
operator|.
name|start
argument_list|(
name|args
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|int
name|compareTo
parameter_list|(
name|Object
name|o
parameter_list|)
block|{
return|return
name|o
operator|==
name|this
condition|?
literal|0
else|:
operator|-
literal|1
return|;
block|}
block|}
end_class

end_unit

