begin_unit|revision:1.0.0;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  *  eXist Open Source Native XML Database  *  Copyright (C) 2001-07 The eXist Project  *  http://exist-db.org  *  *  This program is free software; you can redistribute it and/or  *  modify it under the terms of the GNU Lesser General Public License  *  as published by the Free Software Foundation; either version 2  *  of the License, or (at your option) any later version.  *  *  This program is distributed in the hope that it will be useful,  *  but WITHOUT ANY WARRANTY; without even the implied warranty of  *  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the  *  GNU Lesser General Public License for more details.  *  *  You should have received a copy of the GNU Lesser General Public  *  License along with this library; if not, write to the Free Software  *  Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA  02110-1301  USA  *  * $Id$  */
end_comment

begin_package
package|package
name|org
operator|.
name|exist
operator|.
name|management
operator|.
name|impl
package|;
end_package

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|management
operator|.
name|LockManagerMBean
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|storage
operator|.
name|lock
operator|.
name|DeadlockDetection
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|storage
operator|.
name|lock
operator|.
name|LockInfo
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|management
operator|.
name|openmbean
operator|.
name|*
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Iterator
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_comment
comment|/**  * Created by IntelliJ IDEA.  * User: wolf  * Date: Jul 6, 2007  * Time: 10:48:35 AM  * To change this template use File | Settings | File Templates.  */
end_comment

begin_class
specifier|public
class|class
name|LockManager
implements|implements
name|LockManagerMBean
block|{
specifier|public
name|TabularData
name|getWaitingThreads
parameter_list|()
block|{
name|Map
name|map
init|=
name|DeadlockDetection
operator|.
name|getWaitingThreads
argument_list|()
decl_stmt|;
try|try
block|{
return|return
name|lockMapToComposite
argument_list|(
name|map
argument_list|)
return|;
block|}
catch|catch
parameter_list|(
name|OpenDataException
name|e
parameter_list|)
block|{
name|e
operator|.
name|printStackTrace
argument_list|()
expr_stmt|;
return|return
literal|null
return|;
block|}
block|}
specifier|private
specifier|static
name|String
index|[]
name|itemNames
init|=
block|{
literal|"waitingThread"
block|,
literal|"lockType"
block|,
literal|"lockMode"
block|,
literal|"id"
block|,
literal|"owner"
block|,
literal|"waitingForRead"
block|,
literal|"waitingForWrite"
block|}
decl_stmt|;
specifier|private
specifier|static
name|String
index|[]
name|itemDescriptions
init|=
block|{
literal|"Name of the thread waiting for the lock"
block|,
literal|"Type of the lock (COLLECTION or RESOURCE)"
block|,
literal|"Mode of the lock (READ or WRITE)"
block|,
literal|"Id of the lock (resource or collection path)"
block|,
literal|"The names of the threads currently holding the lock"
block|,
literal|"Names of threads currently waiting for a read lock"
block|,
literal|"Names of threads currently waiting for a write lock"
block|}
decl_stmt|;
specifier|private
specifier|static
name|String
index|[]
name|indexNames
init|=
block|{
literal|"waitingThread"
block|}
decl_stmt|;
specifier|private
name|TabularData
name|lockMapToComposite
parameter_list|(
name|Map
name|map
parameter_list|)
throws|throws
name|OpenDataException
block|{
name|OpenType
index|[]
name|itemTypes
init|=
block|{
name|SimpleType
operator|.
name|STRING
block|,
name|SimpleType
operator|.
name|STRING
block|,
name|SimpleType
operator|.
name|STRING
block|,
name|SimpleType
operator|.
name|STRING
block|,
operator|new
name|ArrayType
argument_list|(
literal|1
argument_list|,
name|SimpleType
operator|.
name|STRING
argument_list|)
block|,
operator|new
name|ArrayType
argument_list|(
literal|1
argument_list|,
name|SimpleType
operator|.
name|STRING
argument_list|)
block|,
operator|new
name|ArrayType
argument_list|(
literal|1
argument_list|,
name|SimpleType
operator|.
name|STRING
argument_list|)
block|}
decl_stmt|;
name|CompositeType
name|lockType
init|=
operator|new
name|CompositeType
argument_list|(
literal|"lockInfo"
argument_list|,
literal|"Provides information on a thread waiting for a lock"
argument_list|,
name|itemNames
argument_list|,
name|itemDescriptions
argument_list|,
name|itemTypes
argument_list|)
decl_stmt|;
name|TabularType
name|tabularType
init|=
operator|new
name|TabularType
argument_list|(
literal|"waitingThreads"
argument_list|,
literal|"Lists all threads waiting for a lock"
argument_list|,
name|lockType
argument_list|,
name|indexNames
argument_list|)
decl_stmt|;
name|TabularDataSupport
name|data
init|=
operator|new
name|TabularDataSupport
argument_list|(
name|tabularType
argument_list|)
decl_stmt|;
for|for
control|(
name|Iterator
name|i
init|=
name|map
operator|.
name|entrySet
argument_list|()
operator|.
name|iterator
argument_list|()
init|;
name|i
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|Map
operator|.
name|Entry
name|entry
init|=
operator|(
name|Map
operator|.
name|Entry
operator|)
name|i
operator|.
name|next
argument_list|()
decl_stmt|;
name|LockInfo
name|info
init|=
operator|(
name|LockInfo
operator|)
name|entry
operator|.
name|getValue
argument_list|()
decl_stmt|;
name|Object
index|[]
name|itemValues
init|=
block|{
name|entry
operator|.
name|getKey
argument_list|()
block|,
name|info
operator|.
name|getLockType
argument_list|()
block|,
name|info
operator|.
name|getLockMode
argument_list|()
block|,
name|info
operator|.
name|getId
argument_list|()
block|,
name|info
operator|.
name|getOwners
argument_list|()
block|,
name|info
operator|.
name|getWaitingForRead
argument_list|()
block|,
name|info
operator|.
name|getWaitingForWrite
argument_list|()
block|}
decl_stmt|;
name|data
operator|.
name|put
argument_list|(
operator|new
name|CompositeDataSupport
argument_list|(
name|lockType
argument_list|,
name|itemNames
argument_list|,
name|itemValues
argument_list|)
argument_list|)
expr_stmt|;
block|}
return|return
name|data
return|;
block|}
block|}
end_class

end_unit

