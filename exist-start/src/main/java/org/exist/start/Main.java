begin_unit|revision:1.0.0;language:Java;cregit-version:0.0.1
begin_comment
comment|// ========================================================================
end_comment

begin_comment
comment|// Copyright (c) 2002 Mort Bay Consulting (Australia) Pty. Ltd.
end_comment

begin_comment
comment|// $Id$
end_comment

begin_comment
comment|// ========================================================================
end_comment

begin_package
package|package
name|org
operator|.
name|exist
operator|.
name|start
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|*
import|;
end_import

begin_import
import|import
name|java
operator|.
name|lang
operator|.
name|reflect
operator|.
name|InvocationTargetException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|lang
operator|.
name|reflect
operator|.
name|Method
import|;
end_import

begin_import
import|import
name|java
operator|.
name|nio
operator|.
name|file
operator|.
name|Files
import|;
end_import

begin_import
import|import
name|java
operator|.
name|nio
operator|.
name|file
operator|.
name|InvalidPathException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|nio
operator|.
name|file
operator|.
name|Path
import|;
end_import

begin_import
import|import
name|java
operator|.
name|nio
operator|.
name|file
operator|.
name|Paths
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|*
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|function
operator|.
name|Predicate
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|stream
operator|.
name|Collectors
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|stream
operator|.
name|Stream
import|;
end_import

begin_comment
comment|/**  * This is an adopted version of the corresponding classes shipped  * with Jetty. Modified for eXist-db!  *  * @author Jan Hlavaty (hlavac@code.cz)  * @author Wolfgang Meier (meier@ifs.tu-darmstadt.de)  * @version $Revision$  *          TODO:  *          - finish possible jetty.home locations  *          - better handling of errors (i.e. when jetty.home cannot be autodetected...)  *          - include entries from lib _when needed_  */
end_comment

begin_class
specifier|public
class|class
name|Main
block|{
specifier|public
specifier|static
specifier|final
name|String
name|STANDARD_ENABLED_JETTY_CONFIGS
init|=
literal|"standard.enabled-jetty-configs"
decl_stmt|;
specifier|public
specifier|static
specifier|final
name|String
name|STANDALONE_ENABLED_JETTY_CONFIGS
init|=
literal|"standalone.enabled-jetty-configs"
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|int
name|ERROR_CODE_GENERAL
init|=
literal|1
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|int
name|ERROR_CODE_NO_JETTY_CONFIG
init|=
literal|7
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|String
name|CONFIG_DIR_NAME
init|=
literal|"etc"
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|String
name|PROP_EXIST_START_DEBUG
init|=
literal|"exist.start.debug"
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|String
name|PROP_EXIST_JETTY_CONFIG
init|=
literal|"exist.jetty.config"
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|String
name|PROP_EXIST_HOME
init|=
literal|"exist.home"
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|String
name|PROP_JETTY_HOME
init|=
literal|"jetty.home"
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|String
name|PROP_LOG4J_CONFIGURATION_FILE
init|=
literal|"log4j.configurationFile"
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|String
name|PROP_JUL_MANAGER
init|=
literal|"java.util.logging.manager"
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|String
name|PROP_JAVA_TEMP_DIR
init|=
literal|"java.io.tmpdir"
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|String
name|ENV_EXIST_JETTY_CONFIG
init|=
literal|"EXIST_JETTY_CONFIG"
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|String
name|ENV_EXIST_HOME
init|=
literal|"EXIST_HOME"
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|String
name|ENV_JETTY_HOME
init|=
literal|"JETTY_HOME"
decl_stmt|;
specifier|private
specifier|static
name|Main
name|exist
decl_stmt|;
specifier|private
name|String
name|_mode
init|=
literal|"jetty"
decl_stmt|;
specifier|private
name|boolean
name|_debug
init|=
name|Boolean
operator|.
name|getBoolean
argument_list|(
name|PROP_EXIST_START_DEBUG
argument_list|)
decl_stmt|;
specifier|public
specifier|static
name|void
name|main
parameter_list|(
specifier|final
name|String
index|[]
name|args
parameter_list|)
block|{
try|try
block|{
name|getMain
argument_list|()
operator|.
name|run
argument_list|(
name|args
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
specifier|final
name|Exception
name|e
parameter_list|)
block|{
name|e
operator|.
name|printStackTrace
argument_list|()
expr_stmt|;
name|System
operator|.
name|exit
argument_list|(
name|ERROR_CODE_GENERAL
argument_list|)
expr_stmt|;
block|}
block|}
comment|/**      * Singleton Factory Method      */
specifier|public
specifier|static
name|Main
name|getMain
parameter_list|()
block|{
if|if
condition|(
name|exist
operator|==
literal|null
condition|)
block|{
name|exist
operator|=
operator|new
name|Main
argument_list|()
expr_stmt|;
block|}
return|return
name|exist
return|;
block|}
specifier|public
name|String
name|getMode
parameter_list|()
block|{
return|return
name|this
operator|.
name|_mode
return|;
block|}
specifier|private
name|Main
parameter_list|()
block|{
block|}
specifier|public
name|Main
parameter_list|(
specifier|final
name|String
name|mode
parameter_list|)
block|{
name|this
operator|.
name|_mode
operator|=
name|mode
expr_stmt|;
block|}
specifier|private
specifier|static
name|Path
name|getDirectory
parameter_list|(
specifier|final
name|String
name|name
parameter_list|)
block|{
try|try
block|{
if|if
condition|(
name|name
operator|!=
literal|null
condition|)
block|{
specifier|final
name|Path
name|dir
init|=
name|Paths
operator|.
name|get
argument_list|(
name|name
argument_list|)
operator|.
name|normalize
argument_list|()
operator|.
name|toAbsolutePath
argument_list|()
decl_stmt|;
if|if
condition|(
name|Files
operator|.
name|isDirectory
argument_list|(
name|dir
argument_list|)
condition|)
block|{
return|return
name|dir
return|;
block|}
block|}
block|}
catch|catch
parameter_list|(
specifier|final
name|InvalidPathException
name|e
parameter_list|)
block|{
comment|// NOP
block|}
return|return
literal|null
return|;
block|}
specifier|private
specifier|static
name|void
name|invokeMain
parameter_list|(
specifier|final
name|ClassLoader
name|classloader
parameter_list|,
specifier|final
name|String
name|classname
parameter_list|,
specifier|final
name|String
index|[]
name|args
parameter_list|)
throws|throws
name|IllegalAccessException
throws|,
name|InvocationTargetException
throws|,
name|NoSuchMethodException
throws|,
name|ClassNotFoundException
block|{
specifier|final
name|Class
argument_list|<
name|?
argument_list|>
name|invoked_class
init|=
name|classloader
operator|.
name|loadClass
argument_list|(
name|classname
argument_list|)
decl_stmt|;
specifier|final
name|Class
argument_list|<
name|?
argument_list|>
index|[]
name|method_param_types
init|=
operator|new
name|Class
index|[
literal|1
index|]
decl_stmt|;
name|method_param_types
index|[
literal|0
index|]
operator|=
name|args
operator|.
name|getClass
argument_list|()
expr_stmt|;
specifier|final
name|Method
name|main
init|=
name|invoked_class
operator|.
name|getDeclaredMethod
argument_list|(
literal|"main"
argument_list|,
name|method_param_types
argument_list|)
decl_stmt|;
specifier|final
name|Object
index|[]
name|method_params
init|=
operator|new
name|Object
index|[
literal|1
index|]
decl_stmt|;
name|method_params
index|[
literal|0
index|]
operator|=
name|args
expr_stmt|;
name|main
operator|.
name|invoke
argument_list|(
literal|null
argument_list|,
name|method_params
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|run
parameter_list|(
name|String
index|[]
name|args
parameter_list|)
block|{
specifier|final
name|String
name|_classname
decl_stmt|;
if|if
condition|(
name|args
operator|.
name|length
operator|>
literal|0
condition|)
block|{
if|if
condition|(
literal|"client"
operator|.
name|equals
argument_list|(
name|args
index|[
literal|0
index|]
argument_list|)
condition|)
block|{
name|_classname
operator|=
literal|"org.exist.client.InteractiveClient"
expr_stmt|;
name|_mode
operator|=
literal|"client"
expr_stmt|;
block|}
if|else if
condition|(
literal|"backup"
operator|.
name|equals
argument_list|(
name|args
index|[
literal|0
index|]
argument_list|)
condition|)
block|{
name|_classname
operator|=
literal|"org.exist.backup.Main"
expr_stmt|;
name|_mode
operator|=
literal|"backup"
expr_stmt|;
block|}
if|else if
condition|(
literal|"jetty"
operator|.
name|equals
argument_list|(
name|args
index|[
literal|0
index|]
argument_list|)
operator|||
literal|"standalone"
operator|.
name|equals
argument_list|(
name|args
index|[
literal|0
index|]
argument_list|)
condition|)
block|{
name|_classname
operator|=
literal|"org.exist.jetty.JettyStart"
expr_stmt|;
name|_mode
operator|=
name|args
index|[
literal|0
index|]
expr_stmt|;
block|}
if|else if
condition|(
literal|"launch"
operator|.
name|equals
argument_list|(
name|args
index|[
literal|0
index|]
argument_list|)
condition|)
block|{
name|_classname
operator|=
literal|"org.exist.launcher.LauncherWrapper"
expr_stmt|;
name|_mode
operator|=
literal|"jetty"
expr_stmt|;
block|}
if|else if
condition|(
literal|"shutdown"
operator|.
name|equals
argument_list|(
name|args
index|[
literal|0
index|]
argument_list|)
condition|)
block|{
name|_classname
operator|=
literal|"org.exist.jetty.ServerShutdown"
expr_stmt|;
name|_mode
operator|=
literal|"other"
expr_stmt|;
block|}
else|else
block|{
name|_classname
operator|=
name|args
index|[
literal|0
index|]
expr_stmt|;
name|_mode
operator|=
literal|"other"
expr_stmt|;
block|}
name|String
index|[]
name|nargs
init|=
operator|new
name|String
index|[
name|args
operator|.
name|length
operator|-
literal|1
index|]
decl_stmt|;
if|if
condition|(
name|args
operator|.
name|length
operator|>
literal|1
condition|)
block|{
name|System
operator|.
name|arraycopy
argument_list|(
name|args
argument_list|,
literal|1
argument_list|,
name|nargs
argument_list|,
literal|0
argument_list|,
name|args
operator|.
name|length
operator|-
literal|1
argument_list|)
expr_stmt|;
block|}
name|args
operator|=
name|nargs
expr_stmt|;
block|}
else|else
block|{
name|_classname
operator|=
literal|"org.exist.launcher.LauncherWrapper"
expr_stmt|;
name|_mode
operator|=
literal|"other"
expr_stmt|;
block|}
if|if
condition|(
name|_debug
condition|)
block|{
name|System
operator|.
name|err
operator|.
name|println
argument_list|(
literal|"mode="
operator|+
name|_mode
argument_list|)
expr_stmt|;
block|}
comment|// try and figure out exist home dir
specifier|final
name|Optional
argument_list|<
name|Path
argument_list|>
name|existHomeDir
init|=
name|getFromSysPropOrEnv
argument_list|(
name|PROP_EXIST_HOME
argument_list|,
name|ENV_EXIST_HOME
argument_list|)
operator|.
name|map
argument_list|(
name|Paths
operator|::
name|get
argument_list|)
decl_stmt|;
comment|// try to find Jetty
if|if
condition|(
literal|"jetty"
operator|.
name|equals
argument_list|(
name|_mode
argument_list|)
operator|||
literal|"standalone"
operator|.
name|equals
argument_list|(
name|_mode
argument_list|)
condition|)
block|{
specifier|final
name|Optional
argument_list|<
name|Path
argument_list|>
name|jettyHomeDir
init|=
name|getFromSysPropOrEnv
argument_list|(
name|PROP_JETTY_HOME
argument_list|,
name|ENV_JETTY_HOME
argument_list|)
operator|.
name|map
argument_list|(
name|Paths
operator|::
name|get
argument_list|)
decl_stmt|;
name|Optional
argument_list|<
name|Path
argument_list|>
name|existJettyConfigFile
init|=
name|getFromSysPropOrEnv
argument_list|(
name|PROP_EXIST_JETTY_CONFIG
argument_list|,
name|ENV_EXIST_JETTY_CONFIG
argument_list|)
operator|.
name|map
argument_list|(
name|Paths
operator|::
name|get
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|existJettyConfigFile
operator|.
name|isPresent
argument_list|()
condition|)
block|{
specifier|final
name|String
name|config
decl_stmt|;
if|if
condition|(
literal|"jetty"
operator|.
name|equals
argument_list|(
name|_mode
argument_list|)
condition|)
block|{
name|config
operator|=
name|STANDARD_ENABLED_JETTY_CONFIGS
expr_stmt|;
block|}
else|else
block|{
name|config
operator|=
name|STANDALONE_ENABLED_JETTY_CONFIGS
expr_stmt|;
block|}
if|if
condition|(
name|jettyHomeDir
operator|.
name|isPresent
argument_list|()
operator|&&
name|Files
operator|.
name|exists
argument_list|(
name|jettyHomeDir
operator|.
name|get
argument_list|()
operator|.
name|resolve
argument_list|(
name|CONFIG_DIR_NAME
argument_list|)
argument_list|)
condition|)
block|{
name|existJettyConfigFile
operator|=
name|jettyHomeDir
operator|.
name|map
argument_list|(
name|f
lambda|->
name|f
operator|.
name|resolve
argument_list|(
name|CONFIG_DIR_NAME
argument_list|)
operator|.
name|resolve
argument_list|(
name|config
argument_list|)
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|existHomeDir
operator|.
name|isPresent
argument_list|()
operator|&&
name|Files
operator|.
name|exists
argument_list|(
name|existHomeDir
operator|.
name|get
argument_list|()
operator|.
name|resolve
argument_list|(
name|CONFIG_DIR_NAME
argument_list|)
argument_list|)
condition|)
block|{
name|existJettyConfigFile
operator|=
name|existHomeDir
operator|.
name|map
argument_list|(
name|f
lambda|->
name|f
operator|.
name|resolve
argument_list|(
name|CONFIG_DIR_NAME
argument_list|)
operator|.
name|resolve
argument_list|(
name|config
argument_list|)
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
operator|!
name|existJettyConfigFile
operator|.
name|isPresent
argument_list|()
condition|)
block|{
name|System
operator|.
name|err
operator|.
name|println
argument_list|(
literal|"ERROR: jetty config file could not be found! Make sure to set exist.jetty.config or EXIST_JETTY_CONFIG."
argument_list|)
expr_stmt|;
name|System
operator|.
name|err
operator|.
name|flush
argument_list|()
expr_stmt|;
name|System
operator|.
name|exit
argument_list|(
name|ERROR_CODE_NO_JETTY_CONFIG
argument_list|)
expr_stmt|;
return|return;
block|}
block|}
specifier|final
name|String
index|[]
name|jettyStartArgs
init|=
operator|new
name|String
index|[
literal|1
operator|+
name|args
operator|.
name|length
index|]
decl_stmt|;
name|jettyStartArgs
index|[
literal|0
index|]
operator|=
name|existJettyConfigFile
operator|.
name|get
argument_list|()
operator|.
name|toAbsolutePath
argument_list|()
operator|.
name|toString
argument_list|()
expr_stmt|;
name|System
operator|.
name|arraycopy
argument_list|(
name|args
argument_list|,
literal|0
argument_list|,
name|jettyStartArgs
argument_list|,
literal|1
argument_list|,
name|args
operator|.
name|length
argument_list|)
expr_stmt|;
name|args
operator|=
name|jettyStartArgs
expr_stmt|;
block|}
comment|// find log4j2.xml
name|Optional
argument_list|<
name|Path
argument_list|>
name|log4jConfigurationFile
init|=
name|Optional
operator|.
name|ofNullable
argument_list|(
name|System
operator|.
name|getProperty
argument_list|(
name|PROP_LOG4J_CONFIGURATION_FILE
argument_list|)
argument_list|)
operator|.
name|map
argument_list|(
name|Paths
operator|::
name|get
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|log4jConfigurationFile
operator|.
name|isPresent
argument_list|()
condition|)
block|{
if|if
condition|(
name|existHomeDir
operator|.
name|isPresent
argument_list|()
operator|&&
name|Files
operator|.
name|exists
argument_list|(
name|existHomeDir
operator|.
name|get
argument_list|()
operator|.
name|resolve
argument_list|(
name|CONFIG_DIR_NAME
argument_list|)
argument_list|)
condition|)
block|{
name|log4jConfigurationFile
operator|=
name|existHomeDir
operator|.
name|map
argument_list|(
name|f
lambda|->
name|f
operator|.
name|resolve
argument_list|(
name|CONFIG_DIR_NAME
argument_list|)
operator|.
name|resolve
argument_list|(
literal|"log4j2.xml"
argument_list|)
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|log4jConfigurationFile
operator|.
name|isPresent
argument_list|()
operator|&&
name|Files
operator|.
name|isReadable
argument_list|(
name|log4jConfigurationFile
operator|.
name|get
argument_list|()
argument_list|)
condition|)
block|{
comment|//                System.setProperty(PROP_LOG4J_CONFIGURATION_FILE, log4jConfigurationFile.get().toUri().toASCIIString());
name|System
operator|.
name|setProperty
argument_list|(
name|PROP_LOG4J_CONFIGURATION_FILE
argument_list|,
name|log4jConfigurationFile
operator|.
name|get
argument_list|()
operator|.
name|toAbsolutePath
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
if|if
condition|(
name|log4jConfigurationFile
operator|.
name|isPresent
argument_list|()
condition|)
block|{
comment|//redirect JUL to log4j2 unless otherwise specified
name|System
operator|.
name|setProperty
argument_list|(
name|PROP_JUL_MANAGER
argument_list|,
name|Optional
operator|.
name|ofNullable
argument_list|(
name|System
operator|.
name|getProperty
argument_list|(
name|PROP_JUL_MANAGER
argument_list|)
argument_list|)
operator|.
name|orElse
argument_list|(
literal|"org.apache.logging.log4j.jul.LogManager"
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|// clean up tempdir for Jetty...
try|try
block|{
specifier|final
name|Path
name|tmpdir
init|=
name|Paths
operator|.
name|get
argument_list|(
name|System
operator|.
name|getProperty
argument_list|(
name|PROP_JAVA_TEMP_DIR
argument_list|)
argument_list|)
operator|.
name|toAbsolutePath
argument_list|()
decl_stmt|;
if|if
condition|(
name|Files
operator|.
name|isDirectory
argument_list|(
name|tmpdir
argument_list|)
condition|)
block|{
name|System
operator|.
name|setProperty
argument_list|(
name|PROP_JAVA_TEMP_DIR
argument_list|,
name|tmpdir
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
specifier|final
name|InvalidPathException
name|e
parameter_list|)
block|{
comment|// ignore
block|}
if|if
condition|(
name|_debug
condition|)
block|{
name|System
operator|.
name|err
operator|.
name|println
argument_list|(
name|PROP_JAVA_TEMP_DIR
operator|+
literal|"="
operator|+
name|System
operator|.
name|getProperty
argument_list|(
name|PROP_JAVA_TEMP_DIR
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|// setup classloader
specifier|final
name|Classpath
name|_classpath
init|=
operator|new
name|Classpath
argument_list|()
decl_stmt|;
specifier|final
name|EXistClassLoader
name|cl
init|=
name|_classpath
operator|.
name|getClassLoader
argument_list|(
literal|null
argument_list|)
decl_stmt|;
name|Thread
operator|.
name|currentThread
argument_list|()
operator|.
name|setContextClassLoader
argument_list|(
name|cl
argument_list|)
expr_stmt|;
comment|// Invoke main class using new classloader.
try|try
block|{
name|invokeMain
argument_list|(
name|cl
argument_list|,
name|_classname
argument_list|,
name|args
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
specifier|final
name|Exception
name|e
parameter_list|)
block|{
name|e
operator|.
name|printStackTrace
argument_list|()
expr_stmt|;
name|System
operator|.
name|exit
argument_list|(
name|ERROR_CODE_GENERAL
argument_list|)
expr_stmt|;
return|return;
block|}
block|}
specifier|private
name|Optional
argument_list|<
name|String
argument_list|>
name|getFromSysPropOrEnv
parameter_list|(
specifier|final
name|String
name|sysPropName
parameter_list|,
specifier|final
name|String
name|envVarName
parameter_list|)
block|{
name|Optional
argument_list|<
name|String
argument_list|>
name|value
init|=
name|Optional
operator|.
name|ofNullable
argument_list|(
name|System
operator|.
name|getProperty
argument_list|(
name|sysPropName
argument_list|)
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|value
operator|.
name|isPresent
argument_list|()
condition|)
block|{
name|value
operator|=
name|Optional
operator|.
name|ofNullable
argument_list|(
name|System
operator|.
name|getenv
argument_list|()
operator|.
name|get
argument_list|(
name|envVarName
argument_list|)
argument_list|)
expr_stmt|;
if|if
condition|(
name|value
operator|.
name|isPresent
argument_list|()
condition|)
block|{
comment|// if we managed to detect from environment, store it in a system property
name|System
operator|.
name|setProperty
argument_list|(
name|sysPropName
argument_list|,
name|value
operator|.
name|get
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
if|if
condition|(
name|_debug
operator|&&
name|value
operator|.
name|isPresent
argument_list|()
condition|)
block|{
name|System
operator|.
name|err
operator|.
name|println
argument_list|(
name|sysPropName
operator|+
literal|"="
operator|+
name|System
operator|.
name|getProperty
argument_list|(
name|sysPropName
argument_list|)
argument_list|)
expr_stmt|;
block|}
return|return
name|value
return|;
block|}
specifier|public
name|void
name|shutdown
parameter_list|()
block|{
comment|// only used in test suite
try|try
block|{
specifier|final
name|Class
argument_list|<
name|?
argument_list|>
name|brokerPool
init|=
name|Class
operator|.
name|forName
argument_list|(
literal|"org.exist.storage.BrokerPools"
argument_list|)
decl_stmt|;
specifier|final
name|Method
name|stopAll
init|=
name|brokerPool
operator|.
name|getDeclaredMethod
argument_list|(
literal|"stopAll"
argument_list|,
name|boolean
operator|.
name|class
argument_list|)
decl_stmt|;
name|stopAll
operator|.
name|setAccessible
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|stopAll
operator|.
name|invoke
argument_list|(
literal|null
argument_list|,
literal|false
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
specifier|final
name|ClassNotFoundException
decl||
name|NoSuchMethodException
decl||
name|IllegalAccessException
decl||
name|InvocationTargetException
name|e
parameter_list|)
block|{
name|e
operator|.
name|printStackTrace
argument_list|()
expr_stmt|;
block|}
block|}
comment|/**      * Copied from {@link org.exist.util.FileUtils#list(Path, Predicate)}      * as org.exist.start is compiled into a separate Jar and doesn't have      * the rest of eXist available on the classpath      */
specifier|static
name|List
argument_list|<
name|Path
argument_list|>
name|list
parameter_list|(
specifier|final
name|Path
name|directory
parameter_list|,
specifier|final
name|Predicate
argument_list|<
name|Path
argument_list|>
name|filter
parameter_list|)
throws|throws
name|IOException
block|{
try|try
init|(
specifier|final
name|Stream
argument_list|<
name|Path
argument_list|>
name|entries
init|=
name|Files
operator|.
name|list
argument_list|(
name|directory
argument_list|)
operator|.
name|filter
argument_list|(
name|filter
argument_list|)
init|)
block|{
return|return
name|entries
operator|.
name|collect
argument_list|(
name|Collectors
operator|.
name|toList
argument_list|()
argument_list|)
return|;
block|}
block|}
comment|/**      * Copied from {@link org.exist.util.FileUtils#fileName(Path)}      * as org.exist.start is compiled into a separate Jar and doesn't have      * the rest of eXist available on the classpath      */
specifier|static
name|String
name|fileName
parameter_list|(
specifier|final
name|Path
name|path
parameter_list|)
block|{
return|return
name|path
operator|.
name|getFileName
argument_list|()
operator|.
name|toString
argument_list|()
return|;
block|}
block|}
end_class

end_unit

