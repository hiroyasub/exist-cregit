<?xml version="1.0" encoding="UTF-8"?>
<?xml-stylesheet 
	href="file://localhost/home/wolf/Java/Morphon_XML-Editor_3.1/Examples/docbook/docbook.css" 
	type="text/css"?>
<book xmlns:ci="http://apache.org/cocoon/include/1.0">
	<bookinfo>
		<graphic fileref="logo.jpg"/>
		<productname>Open Source Native XML Database</productname>
		<title>Server Deployment</title>
		<author>
			<firstname>Wolfgang M.</firstname>
			<surname>Meier</surname>
			<affiliation>
				<address format="linespecific">
					<email>wolfgang at exist-db.org</email>
				</address>
			</affiliation>
		</author>
	</bookinfo>
	<ci:include src="sidebar.xml"/>
	<chapter>
		<title>Server Deployment</title>
		<section>
			<title>Overview</title>

			<para>There are <emphasis>three</emphasis> ways to deploy the eXist database server:</para>
			<orderedlist>
				<listitem>
					<para>
						<emphasis>Stand-alone Server Process</emphasis>
					</para>
					<para>In stand-alone mode, eXist runs in its own Java virtual machine (JVM).
						Clients have to access the database through the network, either using the
						XML-RPC protocol or the REST-style HTTP API (see the <ulink
							url="devguide.xml">Developer's Guide</ulink>). Note that SOAP and WebDAV
						are not available in stand-alone mode.</para>
				</listitem>
				<listitem>
					<para>
						<emphasis>Embedded in an Application</emphasis>
					</para>
					<para>In embedded mode, the database is controlled by the client application. It
						runs in the same Java virtual machine as the client, thus no network
						connection is needed and the client has full access to the database.</para>
				</listitem>
				<listitem>
					<para>
						<emphasis>Stand-alone in a Servlet Context</emphasis>
					</para>
					<para>eXist can also run in connection with a servlet engine. In this case, the
						database is deployed as part of a web application. This is the default mode
						established when the database has been deployed according to instructions
						provided in the <ulink url="quickstart.xml">Quick Start Guide</ulink>. All
						resources used by eXist in this mode will have paths relative to the web
						application's current context. For example, eXist will store all its
						database files in the <filename>WEB-INF/data</filename> directory of the web
						application.</para>
				</listitem>
			</orderedlist>
			<para>Note that all three deployments are thread-safe and allow concurrent operations by
				multiple users. Also note that servlets running in the same web application context
				will have direct access to the database - a Cocoon-driven application would be one
				example of this. External client applications may still use the supplied network
				interfaces.</para>

			<para>As detailed instructions on how to set up eXist for use with a servlet-engine are
				provided in the <ulink url="quickstart.xml">Quick Start Guide</ulink>, the sections
				in this document concern the other two deployment options. In section 2, we
				introduce the XML:DB URI and explain how different servers are addressed by Java
				clients. Section 3 deals with running eXist as a stand-alone server, and in Section
				4 we discuss the required steps to directly embed eXist into an application,
				including how to embed in the <ulink url="http://titanium.dstc.edu.au"
				>XMLdbGUI</ulink>.</para>
		</section>
		<section>
			<title>Addressing Different Servers using the XML:DB URI</title>
			<para>The preferred way to access eXist from Java applications is to use the XML:DB API.
				This API provides a common, Java interface to native or XML-enabled databases. The
				interactive command-line client, as well as the Cocoon integration, also offer
				useful interface capabilities.</para>
			<para>eXist's XML:DB API implementation supports <emphasis>transparent access</emphasis>
				to remote as well as embedded database servers. This means the database on the
				server is available on the client as though it were locally connected to the client
				- i.e. the user should not have to be aware of where a resource is physically
				located. Given this transparency, applications need not be affected by how the
				database has been deployed.</para>
			<para>Specifically, the XML:DB API uses URIs to locate a collection of XML resources on
				the server. The URI identifies the database implementation, the name of the
				collection, and optionally the location of the database server on the network. For
				example, the URI:</para>
			<synopsis format="linespecific">xmldb:exist://localhost:8080/exist/xmlrpc/db/shakespeare</synopsis>
			<para>points to the shakespeare-collection on a remote server which is running in a
				servlet-engine. The host part: <filename>localhost:8080/exist/xmlrpc</filename>
				describes the path to the XML-RPC listener, which is running as a servlet. The
				collection part (<filename>/db/shakespeare</filename>) defines the collection to
				retrieve. If eXist had started as a stand-alone server, the URI would change its
				port to <option>8088</option> to become:</para>
			<synopsis format="linespecific">xmldb:exist://localhost:8088/xmlrpc/db/shakespeare</synopsis>
			<para>Finally, to access an embedded instance of the database, we simply drop the host
				part altogether, and use three forward slashes (<option>///</option>) in front of
				the collection path:</para>
			<synopsis format="linespecific">xmldb:exist:///db/shakespeare</synopsis>
			<para>You can also use the command-line client to experiment with these settings. The
				client utilizes the XML:DB API to access the database, and is configured through a
				properties-file called <filename moreinfo="none">client.properties</filename>. By
				default, the client tries to access the database engine located at the base URI:</para>
			<synopsis format="linespecific">xmldb:exist://localhost:8080/exist/xmlrpc/</synopsis>
			<para>To use the client with another server, you can simply change the
				<option>uri</option> property for the server location. For permanent changes, edit
				the properties-file <filename moreinfo="none">client.properties</filename>. To make
				temporary changes, pass the <option>-o</option> option on the command line. For
				example, if you start the Admin client using the command:</para>
			<synopsis format="linespecific">bin/client.sh -o uri=xmldb:exist://</synopsis>
			<para>this will cause a local database instance to run in the same Java virtual machine
				as the client. Note that the short form for this particular command uses the
					<option>-l</option> option that causes the client to launch a local database
				instance - i.e.:</para>
			<synopsis format="linespecific">bin/client.sh -l</synopsis>
		</section>
		<section>
			<title>Running eXist as a Stand-alone Server</title>
			<para>There are many cases in which it is preferable to have the database engine running
				in its own Java virtual machine. In general, this database mode is more reliable,
				since no other threads (simultaneously tasks) are running, which might cause
				problems. If your application does not need Cocoon or SOAP, you should use the
				stand-alone server.</para>
			<para>The stand-alone database server also offers XML-RPC, WebDAV and REST-style HTTP
				interfaces for external client access. Please note that It does not support SOAP.
				The XML-RPC and REST interfaces are explained in-depth in the <ulink
					url="devguide.xml">Developer's Guide</ulink>.</para>
			<para>by default, the stand-alone server listens on port <filename>8088</filename>. You
				can specify a different listening port using the <option>-p</option> option when
				starting the server on the command line (see below). Note that the corresponding
				Java class for the server is <classname>org.exist.Server</classname>.</para>
			<section>
				<title>Starting the Stand-alone Server</title>
				<para>To start the server, launch either the Unix shell script:</para>
				<synopsis format="linespecific">bin/server.sh</synopsis>
				<para>OR the Windows/DOS batch file:</para>
				<synopsis format="linespecific">bin\server.bat</synopsis>
				<para>The server is multi-threaded - a server thread is assigned to each client
					request. If the specified maximum number of threads is reached, the server will
					block the client until one of the server-threads is available to respond. By
					default, the maximum number of threads is 5. To change this, use the
					<option>-t</option> option, e.g.:</para>
				<synopsis format="linespecific">bin\server.bat -t 20</synopsis>
				<para/>
			</section>
			<section>
				<title>Changing the XML:DB Server URI</title>
				<para>To access the stand-alone server using the interactive command line client (or
					by your own Java classes), you must change the XML:DB server URI set by the
						<option>uri</option> property, as described above, to the following:</para>
				<synopsis format="linespecific">xmldb:exist://localhost:8088/xmlrpc</synopsis>
				<para>The same change is also required for Cocoon-based applications. To access the
					stand-alone server from an XSP page, you have to change the corresponding line
					of code defining the XML:DB collection URI. As well, you may be required to
					modify the <filename>xmldb://</filename> URIs in Cocoon's <filename
						moreinfo="none">sitemap.xmap</filename> configuration file located in the
						<filename moreinfo="none">webapp</filename> directory. For example, the URI:</para>
				<synopsis format="linespecific">xmldb:exist:///db/shakespeare/plays/{1}.xml</synopsis>
				<para>should be changed to:</para>
				<synopsis format="linespecific">xmldb:exist://localhost:8088/xmlrpc/db/shakespeare/plays/{1}.xml</synopsis>
			</section>
			<section>
				<title>Shutting Down the Database</title>

				<para>By default, the <filename>shutdown.bat</filename> (Windows/DOS) and
						<filename>shutdown.sh</filename> (Unix) scripts try to connect to the
					default server URI - i.e.:</para>
				<synopsis format="linespecific">xmldb:exist://localhost:8080/exist/xmlrpc</synopsis>
				<para>If your database is not running within the supplied Jetty webserver, you must
					specify a different server URI. Specifically, to stop eXist when running in
					stand-alone mode listening on port <option>8088</option>, use the following:</para>
				<synopsis format="linespecific">java -jar start.jar shutdown -uri=xmldb:exist://localhost:8088/xmlrpc</synopsis>
			</section>
		</section>

		<section>
			<title id="embedded">Embedding eXist in an Application</title>
			<para>In the embedded mode, the database runs in the same Java virtual machine as the
				client application. The database will not be accessible by any outside application,
				and no network listeners are started.</para>
			<para>You can embed eXist into any Java application that supports the XML:DB API.
				Internally, eXist has two different XML:DB driver implementations: the first
				communicates with a remote database engine using XML-RPC calls; the second has
				direct access to a local instance of eXist. Which implementation is selected depends
				on the XML:DB URI as described above. To access an embedded database, simply drop
				the host portion (i.e. <filename>localhost:8088/xmlrpc/</filename>) from the URI -
				for instance:</para>
			<synopsis format="linespecific">xmldb:exist:///db</synopsis>
			<para>To start an embedded database instance, simply set the system property
					<property>exist.initdb</property> to <option>true</option>. This will notify the
				XML:DB driver to read the configuration settings when starting the database if none
				has been previously started. For example, to launch your own Java application with
				an embedded instance, you may enter the command:</para>
			<synopsis format="linespecific">java -Dexist.initdb=true MyApp</synopsis>
			<para>The driver will try to read the eXist configuration file, create the required
				database files if they have not already been created, and launch the database. This
				of course implies that the driver should be able to read the configuration file
					<filename moreinfo="none">conf.xml</filename>. In fact, the driver looks for
					<filename moreinfo="none">conf.xml</filename> in the directory specified by the
					<option>exist.home</option> system property. You should therefore ensure a copy
				of <filename moreinfo="none">conf.xml</filename> is placed in the correct directory.
				For example, to launch your own application, while setting
				<option>exist.home</option>, you may enter:</para>
			<synopsis format="linespecific">java -Dexist.initdb=true 
				-D exist.home=/home/exist/eXist-0.9 MyApp</synopsis>
			<para>Please note that you must change the directory path settings for the data and log
				files if <filename moreinfo="none">conf.xml</filename></para>
			<para>Instead of using the <option>-Dexist.initdb</option> property, you can also tell
				the database driver directly to create a local database instance during the
				initialization of the XML:DB database manager. To do this, simply set the
					<property>create-database</property> property on the created
				<classname>Database</classname> object to <option>true</option> - for example:</para>
			<example>
				<title>Initializing a Local Database Instance</title>
				<programlisting format="linespecific"><![CDATA[
  Class cl = Class.forName("org.exist.xmldb.DatabaseImpl");
       Database database = (Database) cl.newInstance();
       database.setProperty("create-database", "true");
       DatabaseManager.registerDatabase(database);]]></programlisting>
			</example>
			<para>When running eXist in embedded mode, you must ensure to properly shut down the
				database before your application exits. The main reason for this action is to flush
				all of the unwritten data buffers to disk. The database uses a background thread to
				periodically synchronize its buffers with the data files on the disk, and this
				thread will keep running if you don't shut down the database.</para>
			<para>There is a special XML:DB service, <classname>DatabaseInstanceManager</classname>,
				which contains a single method: <methodname>shutdown</methodname>. To properly shut
				down the database instance, retrieve the service from the
				<filename>/db-collection</filename> and call <methodname>shutdown()</methodname>.
				For example:</para>
			<para/>
			<example>
				<title>Shutting down the Database</title>
				<programlisting format="linespecific"><![CDATA[
  DatabaseInstanceManager 
       manager = (DatabaseInstanceManager) 
       collection.getService("DatabaseInstanceManager", "1.0"); 
       manager.shutdown();]]></programlisting>
			</example>
			<para>As a final example, we may try to embed eXist directly into the <ulink
					url="http://titanium.dstc.edu.au">XMLdbGUI</ulink> provided by the DSTC. For
				this, follow these steps:</para>
			<procedure>
				<step>
					<para>Copy the <filename moreinfo="none">conf.xml</filename> file to the root
						directory of the XMLdbGUI distribution.</para>
				</step>
				<step>
					<para>Modify the line calling Java in <filename moreinfo="none"
						>run.sh</filename> (Unix) or <filename moreinfo="none">run.bat</filename>
						(Windows/DOS) to include the option <option>-Dexist.initdb=true</option> -
						i.e.:</para>
					<synopsis format="linespecific">$JAVA_HOME/bin/java 
						-Dxmldbgui.home=$XMLDBGUI_HOME -Dexist.initdb=true 
						-classpath=$_LIBJARS com.dstc.xml.xmldb.gui.XMLdbGUI 
						"$@"</synopsis>
				</step>
				<step>
					<para>Create two sub-directories required by eXist in the root directory called:
							<filename moreinfo="none">log</filename> and <filename moreinfo="none"
							>data</filename>.</para>
				</step>
				<step>
					<para>Copy the required eXist jar files to the <filename>lib</filename>
						directory and change the XML:DB base URI for eXist in XMLdbGUIs
						configuration file <filename>conf/conf.xml</filename>. </para>
				</step>
			</procedure>
		</section>
	</chapter>
</book>
