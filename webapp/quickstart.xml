<?xml version="1.0" encoding="UTF-8"?>
<book xmlns:ci="http://apache.org/cocoon/include/1.0">
	<bookinfo>
		<graphic fileref="logo.jpg"/>
        <title>Open Source Native XML Database</title>
		<author>
			<firstname>Wolfgang M.</firstname>
			<surname>Meier</surname>
			<affiliation>
				<address format="linespecific">
					<email>wolfgang@exist-db.org</email>
				</address>
			</affiliation>
		</author>
	</bookinfo>
	<ci:include src="sidebar.xml"/>
	<chapter>
		<title>Quick Start</title>
		<para>For a quick start, the following sections describe how to start 
			the server and add some files to the database.</para>
		<section>
			<title>Installation</title>
			<para>For a quick start, we will use the server through 
				a servlet engine. The source distribution already includes
                a servlet engine (<ulink
                url="http://www.jetty.org">Jetty</ulink>), so no additional
                software is required.
				For other deployment options, have a look at 
				the documentation on <ulink url="deployment.xml">Server
                Deployment</ulink>.</para>
			<section>
				<title>Installer</title>
				<para>The installer will try to determine correct paths and 
					environment variables to launch eXist. On Windows, it can 
					also create desktop shortcuts. The installer is started 
					either by double-clicking the downloaded jar-file 
					(Windows/MAC) or by calling java with the 
					<option>-jar</option> option: </para>
				<synopsis format="linespecific">java -jar eXist-{version}.jar</synopsis>
				<para>After the installation has completed, you should be ready 
					to launch eXist. If the installer has created shortcuts, 
					you may simply click on the <emphasis>"eXist Database 
					Startup"</emphasis> icon on the desktop or select the 
					corresponding item in the Windows start menu. On some OS, 
					you can also double-click on the 
					<emphasis>start.jar</emphasis> file, which can be found in 
					the root directory of the installation. In other cases, you 
					have to start eXist manually: Open a shell or DOS command 
					prompt, change into the location where you installed eXist 
					and enter:</para>
				<synopsis format="linespecific">bin/startup.sh</synopsis>
				<para>(Unix) or</para>
				<synopsis format="linespecific">bin\startup.bat</synopsis>
				<para>If the provided scripts don't work for you, you may 
					directly call the bootstrap loader with</para>
				<synopsis>java -Xmx128M -Djava.endorsed.dirs=lib/endorsed -jar 
					start.jar jetty</synopsis>
				<para>This will launch the included Jetty webserver and eXist. 
					Now continue with <ulink url="#sect3">section 
					3</ulink>.</para>
			</section>
			<section>
				<title>Installing the Source Distribution</title>
				<para>Simply unzip or untar the distribution file to some 
					suitable location. Your JAVA_HOME environment variable 
					should point to the Java installation directory.</para>
				<para>Now set the EXIST_HOME environment variable to eXist's 
					base directory, e.g.:</para>
				<synopsis format="linespecific">set 
					EXIST_HOME=c:\Devel\eXist-{version}</synopsis>
				<para>or on a Unix system:</para>
				<synopsis format="linespecific">export 
					EXIST_HOME=/home/wolf/eXist-{version}</synopsis>
				<para>The distribution contains several shell and batch scripts 
					to start the servers and various clients in directory 
					<filename moreinfo="none">bin</filename>. To launch the 
					included webserver, use the scripts <filename 
					moreinfo="none">startup.sh</filename> or <filename 
					moreinfo="none">startup.bat</filename> from the root 
					directory of the distribution: </para>
				<synopsis format="linespecific">bin\startup.bat</synopsis>
				<para>The scripts will set a few parameters and then call the 
					startup bootloader in <filename 
					moreinfo="none">start.jar</filename>. <filename 
					moreinfo="none">start.jar</filename>, will try to determine 
					correct classpath settings.</para>
				<para>If the provided scripts don't work for you, you may 
					directly call the bootstrap loader with</para>
				<synopsis>java -Xmx128M -Djava.endorsed.dirs=lib/endorsed -jar 
					start.jar jetty</synopsis>
				<para>Now continue with <ulink url="#sect3">section 
					3</ulink>.</para>
			</section>
			<section id="sect2">
				<title>Installing eXist as a Web Application</title>
				<para>To install eXist with an existing servlet-engine, 
					download the .war-file and put it into a proper location 
					where your servlet-engine can find it. Most installations 
					have a directory called <filename 
					moreinfo="none">webapps</filename> and will automatically 
					launch any .war-files found therein. Please rename the file 
					to <filename moreinfo="none">exist.war</filename> 
					(otherwise some examples may not work correctly).</para>
				<important>
					<para>Most servlet-engines will automatically unpack 
						war-files (Tomcat does so). If not, you have to do this 
						by hand (otherwise eXist's data may get lost if you 
						shutdown the servlet-engine). Create a sub-directory 
						<filename moreinfo="none">exist</filename> in <filename 
						moreinfo="none">webapps</filename>, cd into it and 
						unpack the archive using <command 
						moreinfo="none">jar</command>. For example:</para>
					<example>
						<title>Unpack the .war file</title>
						<screen format="linespecific"><![CDATA[
mkdir exist
cd exist
jar xfv ../exist.war]]></screen>
					</example>
					<para>Finally, remove the .war file.</para>
				</important>
				<para>You may have to restart your servlet-engine now.</para>
				<para>If eXist is running inside a servlet-engine, its home 
					directory will always be in <filename 
					moreinfo="none">WEB-INF</filename>. This is where the main 
					configuration file <filename 
					moreinfo="none">conf.xml</filename> and the database files 
					reside. Log files will be written to <filename 
					moreinfo="none">WEB-INF/logs</filename>. </para>
			</section>
		</section>
		<section id="sect3">
			<title>Check if the server is running</title>
			<para>eXist's home page should now be available at <ulink 
				url="http://localhost:8080/exist/index.xml">http://localhost:8080/exist/index.xml</ulink>. 
				To see if the database engine is running, you may click on the 
				<command moreinfo="none">Server status</command> menu entry in 
				the sidebar or browse directly to <ulink 
				url="http://localhost:8080/exist/status"> 
				http://localhost:8080/exist/status</ulink>. The server will 
				present you some information on the configuration, the data 
				directory used by the engine and available database instances. 
				If this worked, continue <ulink url="#sect4">to read 
				below</ulink>.</para>
			<para>If anything goes wrong, you may try to set the <command 
				moreinfo="none">EXIST_HOME</command> environment variable. It 
				should point to the directory where the configuration file <filename 
				moreinfo="none">conf.xml</filename> can be found. The server 
				will try to read the file from <filename 
				moreinfo="none">EXIST_HOME/conf.xml</filename>. For the source 
				distribution EXIST_HOME is simply the root directory of the 
				distribution as explained above. If you installed eXist as a 
				web application, EXIST_HOME should be set to the <filename 
				moreinfo="none">WEB-INF</filename> directory of the web 
				application, e.g.:</para>
			<synopsis format="linespecific">set 
				EXIST_HOME=c:\jakarta-tomcat-4.x\webapps\exist\WEB-INF</synopsis>
			<para>You should also ensure that you have write permissions for 
				the <filename moreinfo="none">data</filename> directory. You 
				will find it in <filename 
				moreinfo="none">webapps/WEB-INF/data</filename> or <filename 
				moreinfo="none">WEB-INF/data</filename>.</para>
                
            <para>Another frequent problem is caused by conflicting versions of Xalan
            (Apache's XSL processor): Java already contains an outdated version
            of the Xalan library. However, Cocoon needs a newer version to function
            properly.</para>
            
            <para>You have to overwrite Java's default settings to get the
            correct versions of Xalan and Xerces. This can be done in two
            ways:</para>
            
            <itemizedlist>
                <listitem>
                    <para>Set the system property
                    <option>java.endorsed.dirs</option> to point to the supplied
                    jar files in <filename>lib/endorsed</filename>, e.g.:</para>
                    
                    <synopsis>java -Xmx128M -Djava.endorsed.dirs=lib/endorsed -jar 
					start.jar jetty</synopsis>
                    
                    <para>This is what the shell scripts do.</para>
                </listitem>
                <listitem>
                    <para>Copy the jars in <filename>lib/endorsed</filename> to
                    directory <filename>$JAVA_HOME/jre/lib/endorsed</filename>.
                    $JAVA_HOME is where your JDK has been installed. The endorsed 
                    subdirectory may not exist, so you have to create it first.</para>
                </listitem>
            </itemizedlist>
		</section>
		<section id="sect4">
			<title>Installed Files</title>
			<para>The <filename>bin</filename> directory contains a number of 
				shell and batch scripts. If you installed the source 
				distribution or used the installer, you will find the 
				<filename>bin</filename> directory directly below the root 
				directory of the distribution. If you installed the exist.war 
				file, you have to look into the location where the war file has 
				been unpacked and find the <filename>bin</filename> directory 
				there.</para>
			<para>In fact, the shell and batch scripts are just wrappers around 
				the bootstrap loader contained in the jar file 
				<filename>start.jar</filename>. If the scripts don't work for 
				your os, just call java with start.jar and pass it a command to 
				specify which application you would like to start.</para>
			<para>The different applications are:</para>
			<variablelist>
				<varlistentry>
					<term>startup.sh</term>
					<listitem>
						<para>Has the same effect as calling</para>
						<synopsis>java -jar start.jar jetty</synopsis>
						<para>Starts the included Jetty webserver at port 8080. 
							eXist and Cocoon are installed as a web 
							application, located at <ulink 
							url="http://localhost:8080/exist/">http://localhost:8080/exist/</ulink>. 
							</para>
					</listitem>
				</varlistentry>
				<varlistentry>
					<term>shutdown.sh</term>
					<listitem>
						<para>Same as</para>
						<synopsis>java -jar start.jar shutdown</synopsis>
						<para>Use this to cleanly shut down a running instance 
							of eXist. If eXist has been started with 
							<filename>startup.sh</filename>, calling shutdown 
							will also stop the Jetty webserver. In other cases, 
							eXist has no control over the environment it is 
							running in, so only the database is stopped. 
							However, you should <emphasis>always</emphasis> 
							call <filename>shutdown</filename> before killing 
							the server process.</para>
					</listitem>
				</varlistentry>
				<varlistentry>
					<term>server.sh</term>
					<listitem>
						<para>Same as</para>
						<synopsis>java -jar start.jar server</synopsis>
						<para>This launches eXist as a stand-alone server 
							process. In this setup, eXist is only accessible 
							through the XMLRPC and the simple, built-in HTTP 
							interface.</para>
					</listitem>
				</varlistentry>
				<varlistentry>
					<term>client.sh</term>
					<listitem>
						<para>Same as</para>
						<synopsis>java -jar start.jar client</synopsis>
						<para>Launches the Java client. This is also the default
                        if no application is selected on the command line, i.e.</para>
                        <synopsis>java -jar start.jar</synopsis>
					</listitem>
				</varlistentry>
			</variablelist>
		</section>
		<section>
			<title>Using the Client to Index Files</title>
			<para>There is no preferred way to work with eXist. The server 
				offers quite a number of different interfaces, including 
				XML-RPC, SOAP, REST-style HTTP or direct access via Cocoon 
                and the XML:DB API.</para>
			<para>This section explains how to add and query files using the 
				admin client. The command-line client may either be controlled by 
				parameters, or used interactively. If no action is specified on 
				the command-line, the client will enter interactive mode and 
				start a graphical user interface. More information on the 
				client is available in the corresponding client <ulink 
				url="client.xml">documentation</ulink>.</para>
            <para>On windows, you can start the client through the created desktop 
            shortcut or start menu entry.</para>
			<para>For other systems, the shell scripts to start the client are called</para>
			<synopsis format="linespecific">bin\client.bat</synopsis>
			<para>on DOS/Windows or on Unix:</para>
			<synopsis format="linespecific">bin/client.sh</synopsis>
			<para>or alternatively</para>
			<synopsis>java -jar start.jar client</synopsis>
			<note>
				<para>If you can't execute the shell script on Unix, try to do 
					a <command moreinfo="none">chmod +x bin/client.sh</command> 
					first.</para>
			</note>
			<para>For the first time let's index some sample files provided in 
				directory <filename moreinfo="none">samples</filename> using 
				interactive mode.</para>
			<para>If you start the client without arguments, it will connect to 
				the database, enter interactive mode and present the graphical 
				interface. In graphical mode, the client first prompts for a 
				username and password. As long as no password is specified for 
				the admin user, the database grants access to any user. Thus, 
				simply pressing enter is enough. Now, the GUI will show 
				up:</para>
			<screenshot>
				<graphic fileref="client-1.png"/>
			</screenshot>
			<para>At the bottom you see the shell window. It offers the same 
				commands as in pure shell mode. If you type <command 
				moreinfo="none">help</command>, a list of known commands is 
				displayed.</para>
			<para>eXist organizes all documents in hierarchical collections. 
				Collections are like directories. They are used to group 
				related documents together. So first of all we should add new 
				collections for our documents. To create a new collection, 
				press on the <guibutton moreinfo="none">Create New 
				Collection</guibutton> button in the toolbar. Enter the name of 
				the new collection into the dialog:</para>
			<screenshot>
				<graphic fileref="client-2.png"/>
			</screenshot>
			<para>Now add another collection called <emphasis>plays</emphasis> 
				below the <emphasis>shakespeare</emphasis> collection. You can 
				change into the <emphasis>shakespeare</emphasis> collection by 
				double-clicking on it in the table view.</para>
			<para>Finally, we add some documents to the collection. Just press 
				the <guibutton moreinfo="none">Store</guibutton> button. A file 
				selection dialog will pop up. You may select either a single 
				file, multiple files (hold the ctrl-key during selection) or 
				entire directories. Selecting an entire directory means that 
				all files in the directory and all its descendant directories 
				are stored to the database. We thus just select the <filename 
				moreinfo="none">shakespeare</filename> directory, which can be 
				found in <filename 
				moreinfo="none">EXIST_HOME/samples</filename>. After you have 
				finished the selection, a progress monitor will appear while 
				the client sends the files to the server:</para>
			<screenshot>
				<graphic fileref="client-3.png"/>
			</screenshot>
			<note>
				<para>The second progress bar will only change if you run the 
					client with an embedded database instance. Otherwise, the 
					client has no information on parsing progress.</para>
			</note>
			<para>In addition to the Shakespeare plays, you should also create 
				a collection /db/library and put the file samples/biblio.rdf 
				into it. Finally, to experiment with XInclude, you should add 
				the files in samples/xinclude to another collection 
				/db/xinclude.</para>
		</section>
		<section>
			<title>Querying documents</title>
			<para>The client also offers a graphical interface to query the 
				database, which can be found in the toolbar.</para>
			<para>For example, to find all SPEECH elements where Juliet talks 
				about love to her Romeo you may use the simple query:</para>
			<synopsis format="linespecific">//SPEECH[SPEAKER &amp;= 'juliet' 
				and . &amp;= 'love romeo']</synopsis>
			<para>Just open the query interface and enter the query into the 
				text box at the top. Then press <guibutton>submit</guibutton>. 
				The results are show in the text box at the bottom.</para>
			<screenshot>
				<graphic fileref="client-8.png"/>
			</screenshot>
			<para>For more information on XQuery support in eXist, please refer 
				to the <ulink url="xquery.xml">XQuery 
				documentation</ulink>.</para>
		</section>
		<section>
			<title>Sample pages</title>
			<para>Now that we have added some files to the database, you may 
				have a look at the <ulink url="examples.xml">example 
				pages</ulink> available through the web interface.</para>
		</section>
		<section>
			<title>Shutting down the database</title>
			<para>It is always recommended to cleanly shut down the database 
				before killing the server process. Otherwise, data files may 
				get corrupted. The simplest way to shut down the database is 
				through the corresponding menu entry in the Java client.</para>
			<para>Otherwise, you can use the <filename 
				moreinfo="none">bin/shutdown.sh</filename> or <filename 
				moreinfo="none">bin\shutdown.bat</filename> scripts to cleany 
				shut down the database and stop the webserver. Again, you can 
				also use the <filename moreinfo="none">start.jar</filename> 
				bootloader to do the same thing:</para>
			<synopsis format="linespecific">java -jar start.jar 
				shutdown</synopsis>
			<note>
				<para>If eXist has been deployed as a web application in 
					another web server than the supplied Jetty, calling 
					shutdown will just close the database instance, not the 
					server process of the webserver. eXist doesn't know in 
					which environment it is running, so it can just take care 
					of itself.</para>
				<para>Nevertheless, closing the database explicitely is always 
					a good idea.</para>
			</note>
		</section>
		<section>
			<title>Backup/Restore</title>
			<para>The graphical user interface of the client provides a 
				convenient way to create backups and to restore them after a 
				server crash. You may backup any local or remote collection 
				available through the XML:DB API. To create a backup, simply 
				click on the <emphasis>Create Backup</emphasis> button in the 
				toolbar. You will be asked to select a collection and a 
				directory. During backup, a hierarchy of directories will be 
				created below the backup directory. The directories correspond 
				to the hierarchy of collections found in the database.</para>
			<para>The tool will also backup user permissions for each 
				collection and document. This information is written into the 
				special file <filename>__contents__.xml</filename> placed in 
				each subdirectory. You need these files to restore the database 
				contents.<abbrev></abbrev> </para>
			<screenshot>
				<graphic fileref="client-4.png"/>
			</screenshot>
			<para>To restore selected collections, click on the 
				<emphasis>Restore Files from Backup</emphasis> button. As shown 
				above, you will be asked to select one of the 
				<filename>__contents__.xml</filename> files, which have been 
				created inside each backup directory. For example, to restore 
				the entire database, select 
				<filename>BACKUP_DIR/db/__contents__.xml</filename>. To restore 
				a specific collection, just select the __contents__.xml file in 
				the directory corresponding to the collection. Once you have 
				selected a file, the client will begin to restore the 
				collection contents, showing the following progress 
				monitor:</para>
			<screenshot>
				<graphic fileref="client-7.png"/>
			</screenshot>
			<note>
				<para>Please note that - if you restore the root collection - the 
                client will also restore the user settings which were in effect 
                at the time you created the backup. If new users have been created 
                in the meantime, they will be overwritten.</para>
			</note>
		</section>
		<section id="webdav">
			<title>Using WebDAV</title>
			<para>The distribution includes <ulink 
				url="http://www.mucl.de/~jmetzner/xincon/">xincon</ulink>, a 
				WebDAV module to access an XML:DB database from any file 
				manager or application supporting the WebDAV protocol. WebDAV 
				makes it possible to manage database collections in eXist just 
				like directories in a file system. You may copy, remove, view 
				or edit files with any application supporting the WebDAV 
				protocol, including, for example, Windows Explorer, <ulink 
				url="http://www.webdav.org/cadaver">cadaver</ulink>, Linux 
				Davfs, XML Spy and many others.</para>
			<para>Though xincon has been written for Xindice it works perfectly 
				well with eXist. However, xincon is still alpha, so please do 
				not expect everything to work. On my machine, Windows Explorer 
				will hang for some time when changing directories.</para>
			<para>The xincon module listens at <ulink 
				url="http://localhost:8080/exist/webdav/"> 
				http://localhost:8080/exist/webdav/</ulink>. If you browse to 
				this URL with your web browser you will see xincon's web-based 
				administration interface. More interesting, you may use WebDAV 
				with a file manager like Windows Explorer. On Windows, just 
				create a web-folder using the above URL.</para>
			<para>The screen dump below shows an example session using the 
				cadaver WebDAV client on Linux:</para>
			<example>
				<title>Using WebDAV with cadaver</title>
				<screen format="linespecific"><![CDATA[
[wolf@zarathustra eXist-0.8]$ cadaver http://localhost:8080/exist/webdav
Looking up hostname... Connecting to server... connected.
dav:/exist/webdav/> mkcol shakespeare
Creating `shakespeare': succeeded.
dav:/exist/webdav/> cd shakespeare
dav:/exist/webdav/shakespeare/> mkcol plays
Creating `plays': succeeded.
dav:/exist/webdav/shakespeare/> put samples/shakespeare/hamlet.xml
Uploading samples/shakespeare/hamlet.xml to `/exist/webdav/shakespeare/hamlet.xml':
Progress: [=============================>] 100.0% of 288832 bytes succeeded.
dav:/exist/webdav/shakespeare/>
]]></screen>
			</example>
		</section>
		<section>
			<title>Log Files</title>
			<para>eXist uses the log4j-package to write logging output. By
            default logging 
				output is written to <filename 
				moreinfo="none">webapp/WEB-INF/logs</filename>.
            </para>
			<para>If you experience any problems with eXist, please have a look 
				at the corresponding log-files (exist.log). This is also recommended if 
				Cocoon presents you an error-report. Cocoon log-files also reside in 
				the <filename moreinfo="none">WEB-INF/logs</filename> 
				directory. Usually, looking at these files helps to understand 
				why an exception occurred.</para>
		</section>
		<section>
			<title>What Next?</title>
			<para>To use all the power of eXist you should read the <ulink 
				url="xquery.xml">XQuery docs</ulink>. eXist provides a number 
				of extensions and you can make your queries a lot faster by 
				using these extensions, so don't miss them.</para>
                
            <para>Available APIs are covered by the <ulink url="devguide.xml">
            Developer's Guide</ulink>. The directory
            <filename>samples/</filename> contains example code for all the
            APIs, using different programming languages.</para>
            
			<para>If you would like to know more about the different deployment 
				options, read the document about <ulink 
				url="deployment.xml">Server Deployment</ulink>. Security 
				related issues are covered by <ulink 
				url="security.xml">security.xml</ulink>.</para>
		</section>
	</chapter>
</book>