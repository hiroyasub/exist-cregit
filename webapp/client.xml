<?xml version="1.0" encoding="UTF-8"?>

<!--<!DOCTYPE book PUBLIC "-//OASIS//DTD DocBook XML V4.1.2//EN" "docbookx.dtd">-->
<book xmlns:ci="http://apache.org/cocoon/include/1.0">
    <bookinfo>
        <graphic fileref="logo.jpg"/>
        <title>Open Source Native XML Database</title>
        <author>
            <firstname>Wolfgang M.</firstname>
            <surname>Meier</surname>
            <affiliation>
                <address format="linespecific">
                    <email>meier@ifs.tu-darmstadt.de</email>
                </address>
            </affiliation>
        </author>
    </bookinfo>
    <ci:include src="sidebar.xml"/>
    <chapter id="ch01">
        <title>Command-Line Client</title>
        
        <para>eXist offers a command-line client in class
        <classname>org.exist.InteractiveClient</classname>. 
        The client is entirely based on the XML:DB API and provides
        commands for most database related tasks, like creating and
        removing collections, user management, batch-loading XML data
        or querying.</para>
        
        <para>The following sections provide a short description of the
        most common tasks.</para>
        
        <section>
        	<title>Introduction</title>
        	
        	<para>Class <classname>InteractiveClient</classname> can be
            launched in two ways: first, you may use the 
            <command>bin/client.sh</command> or <command>bin\client.bat</command>
            skripts. Second, you may use eXist's own startup mechanism
            contained in the <filename>start.jar</filename> jar-file. To select
            the client, pass the string "client" as first argument, e.g.</para>
            
            <synopsis>java -jar start.jar client</synopsis>
            
            <para>The shell scripts basically do the same thing.</para>
            
            <para>The client offers two modes of operation:</para>
            
            <orderedlist>
            	<listitem>If an action is specified on the command-line,
            	it will be processed in non-interactive mode and the client
            	will terminate after completition.</listitem>
            	<listitem>Without an action, the client switches to
            	interactive mode and prompts for user commands.</listitem>
            </orderedlist>
            
            <para>We will not describe interactive mode in this document.
            Most commands work like their counterparts specified on the 
            command line. Just type <command>help</command> to get a list 
            of supported commands.</para>
            
            <para>Please note that the interactive mode may support full
            command line history and command completition, depending on your
           	type of operating system. On Unix systems, the client will try
           	to load the GNU readline library, which is part of most Unix
           	installations. This gives you access to all the nice things you
           	probably know from Linux shells. For example, pressing the tab-key
           	will try to complete collection and document names. However, for 
           	this to work, the native library
           	<filename>lib/core/libJavaReadline.so</filename> has to be found
           	by the system's loader. On Linux, just add <filename>lib/core</filename>
           	to your <option>LD_LIBRARY_PATH</option> (the client.sh script does this
           	automatically).</para>
           	
           	<para>On Windows OS, you should at least be able to use the 
           	cursor-up/cursor-down keys to browse through the command history.
           	</para>
        </section>
        
        <section>
            <title>General Configuration</title>
            
            <para>The client reads its default options from the properties
            file <filename>client.properties</filename>. Most of the
            properties can be overwritten by command-line parameters or
            by the <command>set</command> command in interactive mode.</para>
            
            <para>The client relies on the XML:DB API to communicate with
            the database. It will thus work with remote as well as embedded
            database instances. The correct database instance is determined
            through the XML:DB base URI as specified in the properties file or
            through command-line options. The <ulink href="deployment.xml">
            deployment</ulink> document describes how different servers
            are addressed by the XML:DB URI.</para>
            
            <para>The XML:DB base URI used by the client for connections is
            defined by the <option>uri=</option> property. By default, this
            is set to <option>uri=xmldb:exist://localhost:8080/exist/xmlrpc</option>.
            The client will thus try to connect to a database instance running
            inside the webserver at port 8080 of the local host. This doesn't
            mean that the client is not communicating through the network. In fact,
            any XML:DB URI containing a host part is accessed through the XMLRPC
            protocol.</para>
            
            <para>There are several ways to specify an alternate XML:DB base URI:
            first, you may change the <option>uri=</option> property in 
            <filename>client.properties</filename>. Second, you may use 
            the <option>-o</option> parameter on the command-line to temporarily
            select another target for the connection. For example, to start
            the client in local mode, use:</para>
            
            <synopsis>bin/client.sh -ouri=xmldb:exist://</synopsis>
            
            <para>To access a server running inside the Jetty webserver at port
            8080 on a remote host, use</para>
            
            <synopsis>bin/client.sh -ouri=xmldb:exist://host:8080/exist/xmlrpc</synopsis>
            
            <para><emphasis>Local mode</emphasis> means here, that an embedded
            database instance will be initialized and started by the client. It
            will thus have direct access to the database instance. Use this option
            if you want to batch-load a large document or a huge collection of 
            documents.</para>
            
            <para>Using the <option>-o</option>, you can temporarily change any 
            property specified in the properties file. Since switching to local
            mode is required quite often, there's also a shortcut for the 
            command shown above: specifying</para>
            
            <synopsis>bin/client.sh -l</synopsis>
            
            <para>is equivalent to the <option>-ouri=</option> option shown
            above.</para>
            
            <para>If you have set a password for the admin user (as described
            in the <ulink href="security.xml">security</ulink> doc), you may
            have to authenticate yourself to the database. In this case,
            specify the <option>-u username</option> on the command line, 
            e.g.</para>
            
            <synopsis>bin/client.sh -l -u peter -P somepass</synopsis>
            
            <para>If the <option>-P</option> password option is missing, the 
            client will prompt for the password.</para>
            
		</section>
		
		<section>
			<title>Storing documents</title>
			
			<para>To store a set of documents, use the <option>-m</option> and
			<option>-p</option> parameters, e.g.</para>
			
			<synopsis>bin/client.sh -m /db/shakespeare/plays -p /home/exist/xml/shakespeare</synopsis>
			
			<para>The <option>-m</option> argument differs from the <option>-c</option>
			option, because it tells the client to implicitely create any missing 
			collection. The <option>-p</option> parameter means that all of the
			following arguments should be interpreted as a list of paths to XML documents,
			i.e. you may specify more than one document or directory.</para>
			
			<para>If the passed path denotes a directory, the client will try to
			store all documents in that directory to the database. However, it
			will not recurse into subdirectories. For this, you have to pass
			the <option>-d</option>. For example,</para>
			
			<synopsis>bin/client.sh -d -m /db/movies -p /home/exist/xml/movies</synopsis>
			
			<para>will recurse into all directories below 
			<filename>/home/exist/xml/movies</filename>. For each subdirectory,
			a collection will be created below the <filename>/db/movies</filename>
			root collection, i.e. you may use this option to recursively import
			an entire collection tree.</para>
			
		</section>
		
		<section>
			<title>Removing Collections/Documents</title>
			
			<para>The <option>-r</option> and <option>-R</option> parameters
			are used to remove a document or collection. <option>-r</option>
			removes a single document from the collection specified in the
			<option>-c</option> parameter. For example,</para>
			
			<synopsis>bin/client.sh -c /db/shakespeare/plays -r hamlet.xml</synopsis>
			
			<para>removes the document <filename>hamlet.xml</filename> from the
			<filename>/db/shakespeare/plays</filename> collection. To remove
			the entire <filename>plays</filename> collection, use</para>
			
			<synopsis>bin/client.sh -c /db/shakespeare -R plays</synopsis>
		</section>
		
		<section>
			<title>Executing XPath Queries</title>
			
			<para>To execute XPath queries, use the <option>-x</option>
			parameter. This parameter accepts an optional argument, which
			specifies the query to execute. However, passing XPath queries
			on the command-line is a problem on many operating systems,
			because the command shell may interprete whitespace characters
			as command separators. Thus, if no argument is passed to
			<option>-x</option>, the client will try to read the query
			from standard input. For example, on Unix you may do</para>
			
			<synopsis>echo "//SPEECH[LINE &amp;= 'love']" | bin/client.sh -x</synopsis>
			
			<para>There's an additional parameter to be used in
			conjunction with <option>-x</option>: <option>-n</option> 
			specifies the number of hits that should be printed to 
			the standard output.</para>
		</section>
		
	</chapter>
	
	<chapter>
		<title>Backup/Restore</title>
		
		<para>Release 0.9.1 contains a simple backup/restore client, launched
		through the <command>bin/backup.sh</command> or 
		<command>bin\backup.bat</command> scripts. The client allows to 
		backup any local or remote collection available through the 
		XML:DB API. To backup a collection, use for example</para>
		
		<synopsis>bin/backup.sh -d backup -u admin -p somepass -b /db
		-ouri=xmldb:exist://</synopsis>
		
		<para>This will launch a database instance in local mode and backup
		the <filename>/db</filename> root collection. A hierarchy of directories 
		will be created below the <filename>backup</filename> directory. The
		directories correspond to the hierarchy of collections found in the
		database.</para>
		
		<para>The tool will also backup user permissions for each collection
		and document. This information is written into the special file
		<filename>__contents__.xml</filename> placed in each subdirectory.
		You need these files to restore the database contents.</para>
		
		<para>To restore the backuped data, use the <option>-r</option> option
		and pass one of the <filename>__contents__.xml</filename>
		files as an argument. The tool will restore all files and collections 
		described in the XML file, for example,</para>
		
		<synopsis>bin/backup.sh -r backup/db/__contents__.xml -ouri=xmldb:exist://</synopsis>
		
		<para>will restore the entire database, while</para>
		
		<synopsis>bin/backup.sh -r backup/db/shakespeare/__contents__.xml -ouri=xmldb:exist://</synopsis>
		
		<para>restores only the <filename>/db/shakespeare</filename> collection.</para>
		
		<para>Please note that users and groups are defined in the database
		collection <filename>/db/system</filename>. This collection will thus
		be restored first.</para>
		
	</chapter>
</book>