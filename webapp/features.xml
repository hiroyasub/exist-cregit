<?xml version="1.0"?>
<!--<!DOCTYPE book PUBLIC "-//OASIS//DTD DocBook XML V4.1.2//EN" "docbookx.dtd">-->

<book xmlns:ci="http://apache.org/cocoon/include/1.0">
    
    <bookinfo>
        <graphic fileref="logo.jpg"/>
		<title>Open Source XML Database</title>
        <author> 
          <firstname>Wolfgang M.</firstname>
          <surname>Meier</surname>
          <affiliation>
            <address format="linespecific">
              <email>meier@ifs.tu-darmstadt.de</email>
            </address>
          </affiliation>
        </author>
    </bookinfo>

    <ci:include src="sidebar.xml"/>
      
    <chapter>
        <title>Feature Overview</title>
        
        <section>
            <title>Managing Documents in Collections</title>
            
            <para>Documents are managed in hierarchical collections, similar 
            to storing files in a file system. Collections are not 
            bound to a predefined schema or document type, so
            the number of document types used by documents in one collection is
            not constrained. Arbitrary documents may be mixed inside the same
            collection. Also, documents are not required to have an associated
            schema or DTD, though the XML parser will validate a document against
            a schema or DTD if one has been defined.</para>
        </section>
        
        <section>
            <title>Index-based Query Processing</title>
            
            <para>Most XPath processors currently available 
            to open source developers rely on conventional top-down or 
            bottom-up tree traversals for processing path expressions.
            Despite the clean design supported by these approaches, they
            tend to become inefficient for lage document collections. For example,
            consider an XPath expression selecting the titles of all figures
            in a collection of books:</para>
            
            <synopsis>/book//figure/title</synopsis>
            
            <para>In a conventional, top-down tree-traversal approach, the
            query processor has to follow every path beginning at "book" elements
            to check for potential "figure" descendants. There is no
            way to determine the possible location of "figure" descendants in
            advance. This implies that a great number of nodes not being 
            "figure" elements have to be accessed to test (i) if the node is an
            element and (ii) if its qualified name matches "figure".</para>
            
            <para>Thus index structures are needed to efficiently perform queries
            on large, unconstrained document collections. Indexing in eXist is 
            based on a numbering scheme which supports quick identification
            of structural relationships between nodes, such as parent-child, 
            ancestor-descendant or previous-/next-sibling. This way,
            a wide range of common path expressions is processed only using
            indexing information. Access to the actual nodes, which are 
            stored in the central XML document store, is not required for 
            these types of expressions. Furthermore indexing is not only
            applied to elements and attributes but also to text and attribute 
            values to support keyword search. Thus, the query engine will evaluate
            a query like</para>
            
            <synopsis>/PLAY//SCENE[SPEECH[SPEAKER &amp;= 'witch' and 
            near(LINE, 'fenny snake')]]</synopsis>
            
            <para>just using the node identifiers supplied in the
		    index files and without ever loading the actual nodes.</para>
            
        </section>
        
        <section>
            <title>XPath Extensions for Querying Text</title>
            
            <para>eXist extends XPath to implement index-based
            queries on the fulltext-content of nodes. Extensions
            include additional operators for keyword search, a range 
            function for queries on the proximity of search terms,
            simple wildcard and full regular expression matches. More 
            information can be found in the 
            <ulink href="xpath.xml">XPath HowTo</ulink>.</para>
        </section>
        
        <section>
            <title>Deployment</title>
            
            <para>eXist is lightweight and may be easily deployed with
            existing applications. The database engine may either run
            as a stand-alone server, embedded into an application
            or in connection with a servlet-container (see 
            <ulink href="deployment.xml">documentation</ulink>). It is also possible
            to run eXist from a read-only filesystem like a CD.</para>
        </section>
        
        <section>
        	<title>XUpdate</title>
        	
        	<para>Beginning with version 0.9.2, eXist comes with support for XUpdate.
        	XUpdate is a standard proposed by the XML:DB initiative for updates of
        	selected parts of a document.</para>
        	
        </section>
        
        <section>
            <title>Interfaces</title>
            
            <para>The database server offers XML-RPC, HTTP, WebDAV 
            (using <ulink href="http://www.mucl.de/~jmetzner/xincon/">xincon</ulink>) 
            and SOAP interfaces. For Java programming, two implementations
            of the XML:DB API are available. The first will talk to a remote
            database engine using XML-RPC calls, the second has direct access
            to a locally running database instance. The second option allows
            to embed eXist into a stand-alone application without running
            an external server process. This way you will also have direct 
            access to the persistent DOM. For a description of the different
            interface, read the 
            <ulink href="development.xml">Developer's Guide</ulink>.</para>
            
            <para>Integration with Cocoon is also completely based on the
            XML:DB API. Using the xmldb pseudo-protocol, resources stored
            in eXist may be directly referenced from Cocoon's site map. 
            Since eXist may be configured to run in the same 
            web-application context, Cocoon has direct access to eXist. An
            XML:DB based XSP logic sheet is provided to ease the development 
            of dynamic web pages.</para>
        </section>
        
        <section>
            <title>Security</title>
            <para>The database engine supports basic user authentication and
                access control. It has Unix-like access permissions for users and
                groups. The XML:DB API implementation fully supports user 
                authentication and has some extension for user and resource 
                management. For more information have a look at the 
                <ulink href="security.xml">docs</ulink>.</para>
        </section>
    </chapter>
</book>
        
