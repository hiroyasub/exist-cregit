<?xml version="1.0" encoding="UTF-8"?>
<!--DOCTYPE book SYSTEM "file:/Users/byoung/Documents/dtd/docbook-xml-4.2/docbookx.dtd"-->
<book xmlns:ci="http://apache.org/cocoon/include/1.0">
  <bookinfo>
    <graphic fileref="logo.jpg"/>
    <title>Open Source XML Database</title>
    <author> 
      <firstname>Wolfgang M.</firstname>
      <surname>Meier</surname>
      <affiliation>
        <address format="linespecific">
          <email>meier@ifs.tu-darmstadt.de</email>
        </address>
      </affiliation>
    </author>
    <author>
		<firstname>Benjamin</firstname>
  		<surname>Young</surname>
  		<affiliation>
      		<address format="linespecific">
        		<email>byoung@bigbluehat.com</email>
      		</address>
  		</affiliation>
  	</author>
  	<author>
		<firstname>Michael I.</firstname>
  		<surname>Angermann</surname>
  		<affiliation>
      		<address format="linespecific">
        		<email>byoung@bigbluehat.com</email>
      		</address>
  		</affiliation>
  	</author>
  </bookinfo>
  
  <ci:include src="sidebar.xml"/>
  
  <chapter>
    <title>How-Tos</title>

	<section>
		<title>Entity resolution</title>
		
		<para>If a local XML file is uploaded to the database server, the server may have difficulties to resolve 
		external entities like, for example, document type declarations. This applies in particular to system 
		identifiers using local paths. We thus need a way to map those local paths into paths accessible to
		the server.</para>
		
		<para>eXist uses the same entity resolution mechanism as Cocoon. This mechanism is based on catalog 
		files. The catalog file maps public identifiers to their correct physical location, i.e. their system identifier. 
		It can also map one system identifiers to an alternate system identifier. For example, the minimal catalog
		shipped with eXist looks as follows:</para>
		
		<example>
			<title>Example Catalog</title>
			<programlisting><![CDATA[
OVERRIDE YES
PUBLIC "-//PLAY//EN"
       "entities/play.dtd"
OVERRIDE YES
SYSTEM "play.dtd" "entities/play.dtd"
]]></programlisting>
		</example>
		
		<para>The catalog first maps the public identifier "-//PLAY//EN" to the file 
		<filename>entities/play.dtd</filename>. Filenames are relative to eXist's home
		directory (which is <filename>webapp/WEB-INF</filename> in this case). </para>
		
		<para>Second, the system identifier "play.dtd" is mapped to the same physical location
		as the public identifier. This second rule applies, if an XML document declares its 
		doctype as</para>
		
		<synopsis>&lt;!DOCTYPE PLAY SYSTEM "play.dtd"&gt;</synopsis>
		
		<para>The server will map "play.dtd" into the path "entities/play.dtd" relative to the
		home directory of eXist.</para>
		
		<para>If you would like to add other mappings, you may either edit the default catalog file or
		specify an alternate file in the indexer/entity-resolver section of <filename>conf.xml</filename>.</para>
	</section>
	
	<section>
		<title>Integrating eXist into an existing Cocoon installation</title>
		
		<para> eXist comes with its own pre-installed Cocoon. However, integrating eXist into an already
		    running Cocoon is not very difficult. The following paragraphs assume that you have already set up a web application based on 
            Cocoon.</para>
		
		<para>First create a directory named data in the WEB-INF folder of your Cocoon based web application.
		    This is where the database files will be created by eXist.</para>
		    
		<para>Next, copy the <filename>conf.xml</filename> configuration file from eXist's 
        <filename>webapp/WEB-INF/</filename> directory into the <filename>WEB-INF</filename> 
        folder of your Cocoon application. Additionally, you have to copy a number of jar-files 
        from the <filename>lib</filename> folder into the <filename>WEB-INF/lib</filename> directory
		of your Cocoon application:</para>

		<itemizedlist>
			<listitem><para>exist.jar (from the root directory of eXist)</para></listitem>
			<listitem><para>lib/core/antlr.jar</para></listitem>
            <listitem><para>lib/core/jakarta-oro-x.x.x.jar</para></listitem>
            <listitem><para>lib/core/log4j.jar</para></listitem>
            <listitem><para>lib/core/xmldb.jar</para></listitem>
            <listitem><para>lib/core/xmlrpc-x.x.jar</para></listitem>
            <listitem><para>lib/core/fastutil-x.x.jar</para></listitem>
			<listitem><para>lib/optional/axis.jar</para></listitem>
			<listitem><para>lib/optional/clutil.jar</para></listitem>
            <listitem><para>lib/optional/commons-logging-x.x.x.jar</para></listitem>
			<listitem><para>lib/optional/jaxrpc.jar</para></listitem>
			<listitem><para>lib/optional/saaj.jar</para></listitem>
			<listitem><para>lib/optional/tt-bytecode.jar</para></listitem>
			<listitem><para>lib/optional/wsdl4j.jar</para></listitem>
		</itemizedlist>
		
		<para>If you want WebDAV access you'll also need:</para>
		
		<itemizedlist>
			<listitem><para>webapp/WEB-INF/lib/dom4j.jar</para></listitem>
			<listitem><para>webapp/WEB-INF/lib/xincon.jar</para></listitem>
			<listitem><para>webapp/WEB-INF/lib/catalina-util.jar</para></listitem>
		</itemizedlist>

		<para>Next step: edit the <filename>web.xml</filename> file in your <filename>WEB-INF</filename> directory.
		From the <filename>web.xml</filename> file that comes with eXist copy the servlet definitions for the
		RpcServlet, DatabaseAdminServlet, AxisServlet, AdminServlet and (optionally) the xincon servlet into your
		own <filename>web.xml</filename>. Additionally, copy all the servlet-mapping sections for these servlets.
		Please note that order is important in the <filename>web.xml</filename> file: the block with &lt;servlet&gt; sections
		should always precede the &lt;servlet-mapping&gt; sections.</para>
		
		<para>An example <filename>web.xml</filename> file is shown below:</para>
		
		<example>
			<title>web.xml example (Cocoon version 2.0.4 and eXist 0.9)</title>
			
			<screen>
			    <![CDATA[
<?xml version="1.0" encoding="ISO-8859-1"?>

    <!--+
    | Configuration file for the web application. 
    |
    | Provides XMLRPC + SOAP access to eXist and configures Cocoon2. If you don't need
    | XMLRPC or SOAP or Cocoon, remove the corresponding servlets and servlet-mappings.
    +-->
<!DOCTYPE web-app
    PUBLIC "-//Sun Microsystems, Inc.//DTD Web Application 2.2//EN"
    "http://java.sun.com/j2ee/dtds/web-app_2_2.dtd">
<web-app>
    <display-name>eXist Server</display-name>
    <description>eXist Server Setup</description>
	
    <!-- RpcServlet provides XML-RPC access to eXist -->
    <servlet>
        <servlet-name>org.exist.xmlrpc.RpcServlet</servlet-name>
        <servlet-class>org.exist.xmlrpc.RpcServlet</servlet-class>
    </servlet>
  
    <!-- DatabaseAdminServlet: this servlet can be used to ensure that
     eXist is running in the background. Just set the start-parameter to true and
     load-on-startup to greater 0 -->
    <servlet>
        <servlet-name>org.exist.DatabaseAdminServlet</servlet-name>
        <servlet-class>org.exist.DatabaseAdminServlet</servlet-class>
    
        <!-- where to find eXist's configuration file
             relative to the basedir of the web-application.
        -->
        <init-param>
            <param-name>configuration</param-name>
            <param-value>conf.xml</param-value>
        </init-param>

        <!-- eXist's home directory. All file names in 
        the configuration file will be relative to this
        directory.
        -->
        <init-param>
            <param-name>basedir</param-name>
            <param-value>WEB-INF/</param-value>
        </init-param>

        <init-param>
            <param-name>start</param-name>
            <param-value>true</param-value>
        </init-param>

        <load-on-startup>2</load-on-startup>

    </servlet>
  
  <!-- configure the Axis servlet. Axis provides eXist's
  web-services via SOAP -->
  <servlet>
        <servlet-name>AxisServlet</servlet-name>
        <display-name>Apache-Axis Servlet</display-name>
        <servlet-class>org.apache.axis.transport.http.AxisServlet</servlet-class>
    </servlet>

    <servlet>
        <servlet-name>AdminServlet</servlet-name>
        <display-name>Axis Admin Servlet</display-name>
        <servlet-class>
        org.apache.axis.transport.http.AdminServlet
    </servlet-class>
        <load-on-startup>100</load-on-startup>
	</servlet>
  
  <!-- xincon: Provides Webdav for eXist -->
    <servlet>
        <servlet-name>xincon</servlet-name>
        <servlet-class>xincon.WebdavServlet</servlet-class>
        <init-param>
            <param-name>dbroot</param-name>
            <param-value>xmldb:exist:///db</param-value>
        </init-param>

        <init-param>
            <param-name>log4j-priority</param-name>
            <param-value>DEBUG</param-value>
        </init-param>
        <init-param>
            <param-name>log4j-layout</param-name>
            <param-value>%-5p [%M] %m%n</param-value>
        </init-param>

        <load-on-startup>1</load-on-startup>
    </servlet>
	
  <!-- Cocoon2 Configuration starts here ================================ -->

    <servlet>
        <servlet-name>Cocoon</servlet-name>
        <display-name>Cocoon</display-name>
        <description>Cocoon</description>

    <!--
      The regular servlet class (trusts the servlet container classloader)
      -->
        <servlet-class>org.apache.cocoon.servlet.CocoonServlet</servlet-class>
    
    <!--
      This parameter points to the main configuration file for Cocoon.
      Note that the path is specified in absolute notation but it will be
      resolved relative to the servlets webapp context path
    -->
        <init-param>
            <param-name>configurations</param-name>
            <param-value>/WEB-INF/cocoon.xconf</param-value>
        </init-param>

    <!--
      This parameter indicates the configuration file of the LogKit management
    -->
        <init-param>
            <param-name>logkit-config</param-name>
            <param-value>/WEB-INF/logkit.xconf</param-value>
        </init-param>

    <!--
      This parameter indicates the category id of the logger from the LogKit
      configuration used by the CocoonServlet.
    -->
        <init-param>
            <param-name>servlet-logger</param-name>
            <param-value>access</param-value>
        </init-param>

    <!--
      This parameter indicates the category id of the logger from the LogKit
      management configuration for the Cocoon engine.
      This logger is used for all components described in the cocoon.xconf
      and sitemap.xmap file not having specified a logger with the
      logger="..." attribute in the component configuration file.
    -->
        <init-param>
            <param-name>cocoon-logger</param-name>
            <param-value>core</param-value>
        </init-param>

    <!--
      This parameter indicates the log level to use throughout startup of the system.
      As soon as the logkit.xconf the setting of the logkit.xconf configuration is
      used instead! Only for startup and if the logkit.xconf is not readable/available
      this log level is of importance.

      Available levels are:
        DEBUG:        prints all level of log messages.
        INFO:         prints all level of log messages except DEBUG ones.
        WARN:         prints all level of log messages except DEBUG and INFO ones.
        ERROR:        prints all level of log messages except DEBUG, INFO and WARN ones.
        FATAL_ERROR: prints only log messages of this level
    -->
        <init-param>
            <param-name>log-level</param-name>
            <param-value>WARN</param-value>
        </init-param>

    <!--
      Allow reinstantiating (reloading) of the cocoon instance. If this is
      set to "yes" or "true", a new cocoon instance can be created using
      the request parameter "cocoon-reload".
    -->
        <init-param>
            <param-name>allow-reload</param-name>
            <param-value>no</param-value>
        </init-param>

    <!--
      Causes all files in multipart requests to be processed.
      Default is false for security reasons.  
      Unsupported values will be interpreted as false.
    -->
        <init-param>
            <param-name>enable-uploads</param-name>
			<param-value>true</param-value>
        </init-param>
    
    <!--
      This parameter allows to specify where Cocoon should put uploaded files.
      The path specified can be either absolute or relative to the context 
      path of the servlet. On windows platform, absolute directory must start
      with volume: C:\Path\To\Upload\Directory

      The default directory is "upload-dir" in the work-directory

    <init-param>
      <param-name>upload-directory</param-name>
      <param-value>WEB-INF/work/upload-dir</param-value>
    </init-param>
    -->

    <!--
      Causes all files in multipart requests to be saved to upload-dir.
      Default is true for security reasons.  
      Unsupported values will be interpreted as false.
    -->
        <init-param>
            <param-name>autosave-uploads</param-name>
            <param-value>true</param-value>
        </init-param>

    <!--
      Specify handling of name conflicts when saving uploaded files
      to disk.  Acceptable values are deny, allow, rename (default).
      Files are renamed x_filename where x is an integer value incremented
      to make the new filename unique.
    -->
        <init-param>
            <param-name>overwrite-uploads</param-name>
			<param-value>allow</param-value>
        </init-param>

    <!--
       If true or not set, this class will try to catch and handle all Cocoon exceptions.
       If false, it will rethrow them to the servlet container.
    -->
        <init-param>
            <param-name>manage-exceptions</param-name>
            <param-value>true</param-value>
        </init-param>

    <!--
      Set encoding used by the container. If not set the ISO-8859-1 encoding will be assumed.
    -->
	<init-param>
      <param-name>container-encoding</param-name>
	  <param-value>ISO-8859-1</param-value>
    </init-param>

    <!--
      Set form encoding. This will be the character set used to decode request parameters.
      If not set the ISO-8859-1 encoding will be assumed. 
    -->
    <init-param>
      <param-name>form-encoding</param-name>
      <param-value>UTF-8</param-value>
    </init-param>

    <!--
      This parameter allows you to startup Cocoon2 immediately after startup
      of your servlet engine.
    -->
        <load-on-startup>1</load-on-startup>
    </servlet>

  <!-- URL space mappings ============================================= -->

  <!-- Define where the XMLRPC servlet listens -->
  <servlet-mapping>
    <servlet-name>org.exist.xmlrpc.RpcServlet</servlet-name>
    <url-pattern>/xmlrpc</url-pattern>
  </servlet-mapping>
  
  <!-- eXist's DatabaseAdminServlet -->
  <servlet-mapping>
    <servlet-name>org.exist.DatabaseAdminServlet</servlet-name>
    <url-pattern>/admin</url-pattern>
  </servlet-mapping>
  
  <!-- Define where Xincon listens for WebDAV requests -->
  <servlet-mapping>
		<servlet-name>xincon</servlet-name>
		<url-pattern>/webdav/*</url-pattern>
	</servlet-mapping>
    
  <!-- The following servlet-mappings are for Axis (SOAP) -->
  <servlet-mapping>
    <servlet-name>AxisServlet</servlet-name>
	<url-pattern>/servlet/AxisServlet</url-pattern>
  </servlet-mapping>

  <servlet-mapping>
    <servlet-name>AxisServlet</servlet-name>
    <url-pattern>*.jws</url-pattern>
  </servlet-mapping>

  <servlet-mapping>
    <servlet-name>AxisServlet</servlet-name>
    <url-pattern>/services/*</url-pattern>
  </servlet-mapping>

  <servlet-mapping>
    <servlet-name>AdminServlet</servlet-name>
	<url-pattern>/servlet/AdminServlet</url-pattern>
  </servlet-mapping>
  
  <!-- Finally, we establish the main mapping for Cocoon  -->
  
  <!--
    Cocoon handles all the URL space assigned to the webapp using its sitemap.
    It is recommended to leave it unchanged. Under some circumstances though
    (like integration with proprietary webapps or servlets) you might have
    to change this parameter.
  -->
    <servlet-mapping>
        <servlet-name>Cocoon</servlet-name>
        <url-pattern>/</url-pattern>
    </servlet-mapping>
  
  <!--
    Some servlet engines (Tomcat) have defaults which are not overriden
    by '/' mapping, but must be overriden explicitly.
  -->
    <servlet-mapping>
        <servlet-name>Cocoon</servlet-name>
        <url-pattern>*.jsp</url-pattern>

    </servlet-mapping>
  <!--
    Some servlet engines (WebLogic) have defaults which are not overriden
    by '/' mapping, but must be overriden explicitly.
  -->
    <servlet-mapping>
        <servlet-name>Cocoon</servlet-name>
        <url-pattern>*.html</url-pattern>
    </servlet-mapping>

  <!-- various MIME type mappings ====================================== -->

    <mime-mapping>
        <extension>css</extension>
        <mime-type>text/css</mime-type>
    </mime-mapping>

    <mime-mapping>
        <extension>xml</extension>
        <mime-type>text/xml</mime-type>
    </mime-mapping>

    <mime-mapping>
        <extension>xsl</extension>
        <mime-type>text/xml</mime-type>
    </mime-mapping>

    <mime-mapping>
        <extension>xconf</extension>
        <mime-type>text/xml</mime-type>
    </mime-mapping>

    <mime-mapping>
        <extension>xmap</extension>
        <mime-type>text/xml</mime-type>
    </mime-mapping>

    <mime-mapping>
        <extension>ent</extension>
        <mime-type>text/plain</mime-type>
    </mime-mapping>

    <mime-mapping>
        <extension>grm</extension>
        <mime-type>text/plain</mime-type>
    </mime-mapping>

</web-app>]]>
			</screen>
		</example>
		
		<para>Finally, to use the XML:DB taglib included with eXist, you should define
		it as a built-in logicsheet in the configuration of Cocoon. Add the following 
		to <filename>WEB-INF/cocoon.xconf</filename>:</para>
		
		<example>
			<title>Adding a new built-in logicsheet to cocoon.xconf</title>
			
			<screen><![CDATA[
<target-language name="java">
        <!-- Defines the XSP Core logicsheet for the Java language -->
        <parameter name="core-logicsheet" value="resource://org/apache/cocoon/components/language/markup/xsp/java/xsp.xsl"/>

		<!-- Insert the following section: -->
		<builtin-logicsheet>
            <parameter name="prefix" value="xmldb"/>
            <parameter name="uri" value="http://exist-db.org/xmldb/1.0"/>
            <parameter name="href" value="resource://org/exist/xmldb.xsl"/>
        </builtin-logicsheet>
        
        <!-- ... more builtin-logicsheets ... -->
</target-language>
]]>
			</screen>
		</example>

		<para>If you want to access eXist through Cocoon's XML:DB pseudo protocol,
		don't forget to add eXist's XML:DB driver to the &lt;source-handler&gt;
		section. The section should look something like this:</para>
		
		<example>
			<title>Adding eXist's XML:DB driver</title>
			<screen><![CDATA[
<!-- xmldb pseudo protocol -->
<source-handler logger="core.source-handler">
    <!-- ...other predefined protocol handlers... -->
    <!-- xmldb pseudo protocol -->
    <protocol class="org.apache.cocoon.components.source.XMLDBSourceFactory">
        <!-- Xindice driver -->
            <driver class="org.apache.xindice.client.xmldb.DatabaseImpl" type="xindice"/>
        <!-- Add here other XML:DB compliant databases drivers -->
            <driver class="org.exist.xmldb.DatabaseImpl" type="exist"/>
    </protocol>
</source-handler>]]>
			</screen>
		</example>
		
		<para>You should now be able to restart your servlet-engine. You may check
		if eXist is running by browsing to http://your-host:8080/your-app/admin</para>
	</section>
	
	<section>
        <title>Getting up and running with Jetty</title>
        
        <para>contributed by <emphasis>Michael I. Angermann</emphasis></para>
        
		<para>Besides Tomcat, eXist runs very well on
		<ulink href="http://jetty.mortbay.org/jetty/">Jetty</ulink>.
		Jetty is a 100% Java HTTP Server and Servlet Container.</para>

		<para>To get <filename>jetty-4.1.1.zip</filename> up and running with 
		<filename>eXist-0.8.1.zip</filename></para>

		<para>Make a directory called <filename>exist</filename> in 
		<filename>c:\jetty\demo\webapps</filename></para>

		<para>Unpack <filename>eXist-0.8.1.war.zip</filename> into 
		<filename>c:\jetty\demo\webapps\exist</filename></para>

		<para>From <ulink href="http://hsqldb.sourceforge.net">
		http://hsqldb.sourceforge.net</ulink>
		add <filename>hsqldb.jar</filename> to 
		<filename>c:\jetty\demo\webapps\exist\WEB-INF\lib</filename>.</para>

		<para>Put these files in <filename>c:\jetty\lib</filename>:</para>

		<unorderedlist>
			<listitem><para>tools.jar</para></listitem>
			<listitem><para>xalan.jar</para></listitem>
			<listitem><para>xercesImpl.jar</para></listitem>
			<listitem><para>xml-apis.jar</para></listitem>
		</unorderedlist>
		
		<note>
			<para><filename>tools.jar</filename> comes from the jdk 
			release under <filename>c:\jdk\lib</filename></para></note>

		<note>
			<para>
				<filename>xalan.jar</filename>, <filename>xercesImpl.jar</filename>,
				<filename>xml-apis.jar</filename> comes from
				<ulink href="http://xml.apache.org">http://xml.apache.org</ulink>.
				Xalan Java Version 2.4.0 (<filename>xalan-j_2_4_0-bin.zip</filename>,
				dated Sept. 03, 2002).
			</para>
		</note>

		<para>Modify the following (2) files:</para>
		
		<unorderedlist>
			<listitem><para><filename>c:\jetty\build.xml</filename></para></listitem>
			<listitem><para><filename>c:\jetty\etc\demo.xml</filename></para></listitem>
		</unorderedlist>
		
		<para>Add these lines in to build.xml</para>

		<example>
			<title>Added lines in build.xml</title>
			
			<screen><![CDATA[
<property name="xerces.jar"     
value="${lib}/xercesImpl.jar"/>

<property name="xmlapis.jar"     
value="${lib}/xml-apis.jar"/>

<property name="xalan.jar"      
value="${lib}/xalan.jar"/>

<property name="tools.jar"      
value="${lib}/tools.jar"/>

<!-- Modify the classpath id with the following
pathelements -->

<path id="classpath">
  <pathelement location="${jetty1.2.jar}" />
  <pathelement location="${jasper.jar}" />
  <pathelement location="${servlet.jar}" />

  <!--  add in these lines     -->

  <pathelement location="${tools.jar}" />
  <pathelement location="${xalan.jar}" />
  <pathelement location="${xmlapis.jar}" />
  <pathelement location="${xerces.jar}" />
  <path refid="extpath" />
</path>			
			]]></screen>
		</example>

		<para>Add the following lines to demo.xml:</para>

		<example>
			<title>Added lines in demo.xml</title>
			
			<screen><![CDATA[
<Call name="addWebApplication">
 <Arg>/exist/*</Arg>
 <Arg><SystemProperty name="jetty.home"
      default="."/>/demo/webapps/exist/</Arg>
 <Arg><SystemProperty name="jetty.home"
      default="."/>/etc/webdefault.xml</Arg>
 <Arg type="boolean">false</Arg> <!-- if true,
      expand war in temp dir -->
</Call>			
			]]></screen>
		</example>

		<para>To bring up jetty and exist type</para>
		
		<synopsis>ant demo</synopsis>

		<para>Type into your browser</para>
		
		<synopsis>http://localhost:8080/exist/index.xml</synopsis>

	</section>
</chapter>

</book>
