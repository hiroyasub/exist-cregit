begin_unit|revision:1.0.0;language:Java;cregit-version:0.0.1
begin_package
package|package
name|org
operator|.
name|exist
operator|.
name|ant
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|tools
operator|.
name|ant
operator|.
name|Project
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|util
operator|.
name|FileUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|After
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Before
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Rule
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|rules
operator|.
name|TemporaryFolder
import|;
end_import

begin_import
import|import
name|org
operator|.
name|xmldb
operator|.
name|api
operator|.
name|base
operator|.
name|Collection
import|;
end_import

begin_import
import|import
name|org
operator|.
name|xmldb
operator|.
name|api
operator|.
name|base
operator|.
name|Resource
import|;
end_import

begin_import
import|import
name|org
operator|.
name|xmldb
operator|.
name|api
operator|.
name|base
operator|.
name|XMLDBException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|xmldb
operator|.
name|api
operator|.
name|modules
operator|.
name|BinaryResource
import|;
end_import

begin_import
import|import
name|org
operator|.
name|xmldb
operator|.
name|api
operator|.
name|modules
operator|.
name|CollectionManagementService
import|;
end_import

begin_import
import|import
name|org
operator|.
name|xmldb
operator|.
name|api
operator|.
name|modules
operator|.
name|XMLResource
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|annotation
operator|.
name|Nullable
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|URL
import|;
end_import

begin_import
import|import
name|java
operator|.
name|nio
operator|.
name|file
operator|.
name|Files
import|;
end_import

begin_import
import|import
name|java
operator|.
name|nio
operator|.
name|file
operator|.
name|Path
import|;
end_import

begin_import
import|import static
name|java
operator|.
name|nio
operator|.
name|charset
operator|.
name|StandardCharsets
operator|.
name|UTF_8
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|hamcrest
operator|.
name|CoreMatchers
operator|.
name|containsString
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|hamcrest
operator|.
name|core
operator|.
name|AllOf
operator|.
name|allOf
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|*
import|;
end_import

begin_class
specifier|public
class|class
name|XmldbTaskTest
extends|extends
name|AbstractTaskTest
block|{
specifier|private
specifier|static
specifier|final
name|String
name|TEST_COLLECTION_NAME
init|=
literal|"test"
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|String
name|TEST_COLLECTION2_NAME
init|=
literal|"test2"
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|String
name|OTHER_TEST_COLLECTION_NAME
init|=
literal|"other-test"
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|String
name|TEST_RESOURCE_NAME
init|=
literal|"test.xml"
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|String
name|TEST_RESOURCE2_NAME
init|=
literal|"test2.xml"
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|String
name|OTHER_TEST_RESOURCE_NAME
init|=
literal|"other-test.xml"
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|String
name|BIN_TEST_RESOURCE_NAME
init|=
literal|"bin-test.bin"
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|String
name|PROP_ANT_TEST_DATA_TEST_COLLECTION
init|=
literal|"test.data.test.collection"
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|String
name|PROP_ANT_TEST_DATA_TEST_COLLECTION2
init|=
literal|"test.data.test.collection2"
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|String
name|PROP_ANT_TEST_DATA_TEST_RESOURCE
init|=
literal|"test.data.test.resource"
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|String
name|PROP_ANT_TEST_DATA_TEST_RESOURCE2
init|=
literal|"test.data.test.resource2"
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|String
name|PROP_ANT_TEST_DATA_BIN_TEST_RESOURCE
init|=
literal|"test.data.bin.test.resource"
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|String
name|PROP_ANT_TEST_DATA_TMP_DIR
init|=
literal|"test.data.tmp.dir"
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|String
name|PROP_ANT_TEST_DATA_TMP_FILE
init|=
literal|"test.data.tmp.file"
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|String
name|PROP_ANT_TEST_DATA_TMP_FILE_NAME
init|=
literal|"test.data.tmp.file.name"
decl_stmt|;
annotation|@
name|Rule
specifier|public
specifier|final
name|TemporaryFolder
name|temporaryFolder
init|=
operator|new
name|TemporaryFolder
argument_list|()
decl_stmt|;
annotation|@
name|Nullable
annotation|@
name|Override
specifier|protected
name|URL
name|getBuildFile
parameter_list|()
block|{
return|return
name|getClass
argument_list|()
operator|.
name|getResource
argument_list|(
literal|"xmldb.xml"
argument_list|)
return|;
block|}
annotation|@
name|Before
specifier|public
name|void
name|fileSetup
parameter_list|()
throws|throws
name|XMLDBException
block|{
specifier|final
name|Collection
name|col
init|=
name|existEmbeddedServer
operator|.
name|createCollection
argument_list|(
name|existEmbeddedServer
operator|.
name|getRoot
argument_list|()
argument_list|,
name|TEST_COLLECTION_NAME
argument_list|)
decl_stmt|;
specifier|final
name|Resource
name|res
init|=
name|col
operator|.
name|createResource
argument_list|(
name|TEST_RESOURCE_NAME
argument_list|,
name|XMLResource
operator|.
name|RESOURCE_TYPE
argument_list|)
decl_stmt|;
name|res
operator|.
name|setContent
argument_list|(
literal|"<test>hello<subject>world</subject></test>"
argument_list|)
expr_stmt|;
name|col
operator|.
name|storeResource
argument_list|(
name|res
argument_list|)
expr_stmt|;
specifier|final
name|Resource
name|binResource
init|=
name|col
operator|.
name|createResource
argument_list|(
name|BIN_TEST_RESOURCE_NAME
argument_list|,
name|BinaryResource
operator|.
name|RESOURCE_TYPE
argument_list|)
decl_stmt|;
name|binResource
operator|.
name|setContent
argument_list|(
literal|"blah blah"
argument_list|)
expr_stmt|;
name|col
operator|.
name|storeResource
argument_list|(
name|binResource
argument_list|)
expr_stmt|;
specifier|final
name|CollectionManagementService
name|service
init|=
operator|(
name|CollectionManagementService
operator|)
name|col
operator|.
name|getService
argument_list|(
literal|"CollectionManagementService"
argument_list|,
literal|"1.0"
argument_list|)
decl_stmt|;
specifier|final
name|Collection
name|otherCol
init|=
name|service
operator|.
name|createCollection
argument_list|(
name|OTHER_TEST_COLLECTION_NAME
argument_list|)
decl_stmt|;
specifier|final
name|Resource
name|otherRes
init|=
name|otherCol
operator|.
name|createResource
argument_list|(
name|OTHER_TEST_RESOURCE_NAME
argument_list|,
name|XMLResource
operator|.
name|RESOURCE_TYPE
argument_list|)
decl_stmt|;
name|otherRes
operator|.
name|setContent
argument_list|(
literal|"<test>other</test>"
argument_list|)
expr_stmt|;
name|otherCol
operator|.
name|storeResource
argument_list|(
name|otherRes
argument_list|)
expr_stmt|;
name|otherCol
operator|.
name|close
argument_list|()
expr_stmt|;
name|col
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
annotation|@
name|After
specifier|public
name|void
name|fileCleanup
parameter_list|()
throws|throws
name|XMLDBException
block|{
specifier|final
name|CollectionManagementService
name|service
init|=
operator|(
name|CollectionManagementService
operator|)
name|existEmbeddedServer
operator|.
name|getRoot
argument_list|()
operator|.
name|getService
argument_list|(
literal|"CollectionManagementService"
argument_list|,
literal|"1.0"
argument_list|)
decl_stmt|;
name|service
operator|.
name|removeCollection
argument_list|(
name|TEST_COLLECTION_NAME
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|copy
parameter_list|()
block|{
specifier|final
name|Project
name|project
init|=
name|buildFileRule
operator|.
name|getProject
argument_list|()
decl_stmt|;
name|project
operator|.
name|setProperty
argument_list|(
name|PROP_ANT_TEST_DATA_TEST_COLLECTION
argument_list|,
name|TEST_COLLECTION_NAME
argument_list|)
expr_stmt|;
name|project
operator|.
name|setProperty
argument_list|(
name|PROP_ANT_TEST_DATA_TEST_RESOURCE
argument_list|,
name|TEST_RESOURCE_NAME
argument_list|)
expr_stmt|;
name|project
operator|.
name|setProperty
argument_list|(
name|PROP_ANT_TEST_DATA_TEST_RESOURCE2
argument_list|,
name|TEST_RESOURCE2_NAME
argument_list|)
expr_stmt|;
name|buildFileRule
operator|.
name|executeTarget
argument_list|(
literal|"copy"
argument_list|)
expr_stmt|;
specifier|final
name|String
name|result
init|=
name|project
operator|.
name|getProperty
argument_list|(
name|PROP_ANT_TEST_DATA_RESULT
argument_list|)
decl_stmt|;
name|assertThat
argument_list|(
name|result
argument_list|,
name|allOf
argument_list|(
name|containsString
argument_list|(
name|TEST_RESOURCE_NAME
argument_list|)
argument_list|,
name|containsString
argument_list|(
name|TEST_RESOURCE2_NAME
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|create
parameter_list|()
block|{
specifier|final
name|Project
name|project
init|=
name|buildFileRule
operator|.
name|getProject
argument_list|()
decl_stmt|;
name|project
operator|.
name|setProperty
argument_list|(
name|PROP_ANT_TEST_DATA_TEST_COLLECTION
argument_list|,
name|TEST_COLLECTION_NAME
argument_list|)
expr_stmt|;
name|project
operator|.
name|setProperty
argument_list|(
name|PROP_ANT_TEST_DATA_TEST_COLLECTION2
argument_list|,
name|TEST_COLLECTION2_NAME
argument_list|)
expr_stmt|;
name|project
operator|.
name|setProperty
argument_list|(
name|PROP_ANT_TEST_DATA_TEST_RESOURCE
argument_list|,
name|TEST_RESOURCE_NAME
argument_list|)
expr_stmt|;
name|buildFileRule
operator|.
name|executeTarget
argument_list|(
literal|"create"
argument_list|)
expr_stmt|;
specifier|final
name|String
name|result
init|=
name|project
operator|.
name|getProperty
argument_list|(
name|PROP_ANT_TEST_DATA_RESULT
argument_list|)
decl_stmt|;
name|assertThat
argument_list|(
name|result
argument_list|,
name|containsString
argument_list|(
name|TEST_COLLECTION2_NAME
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|exists
parameter_list|()
block|{
specifier|final
name|Project
name|project
init|=
name|buildFileRule
operator|.
name|getProject
argument_list|()
decl_stmt|;
name|project
operator|.
name|setProperty
argument_list|(
name|PROP_ANT_TEST_DATA_TEST_COLLECTION
argument_list|,
name|TEST_COLLECTION_NAME
argument_list|)
expr_stmt|;
name|project
operator|.
name|setProperty
argument_list|(
name|PROP_ANT_TEST_DATA_TEST_RESOURCE
argument_list|,
name|TEST_RESOURCE_NAME
argument_list|)
expr_stmt|;
name|buildFileRule
operator|.
name|executeTarget
argument_list|(
literal|"exists"
argument_list|)
expr_stmt|;
specifier|final
name|String
name|result
init|=
name|project
operator|.
name|getProperty
argument_list|(
name|PROP_ANT_TEST_DATA_RESULT
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
name|Boolean
operator|.
name|parseBoolean
argument_list|(
name|result
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|extract
parameter_list|()
throws|throws
name|IOException
block|{
specifier|final
name|Path
name|tmpFile
init|=
name|temporaryFolder
operator|.
name|newFile
argument_list|()
operator|.
name|toPath
argument_list|()
decl_stmt|;
specifier|final
name|Project
name|project
init|=
name|buildFileRule
operator|.
name|getProject
argument_list|()
decl_stmt|;
name|project
operator|.
name|setProperty
argument_list|(
name|PROP_ANT_TEST_DATA_TEST_COLLECTION
argument_list|,
name|TEST_COLLECTION_NAME
argument_list|)
expr_stmt|;
name|project
operator|.
name|setProperty
argument_list|(
name|PROP_ANT_TEST_DATA_TEST_RESOURCE
argument_list|,
name|TEST_RESOURCE_NAME
argument_list|)
expr_stmt|;
name|project
operator|.
name|setProperty
argument_list|(
name|PROP_ANT_TEST_DATA_TMP_FILE
argument_list|,
name|tmpFile
operator|.
name|toAbsolutePath
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|buildFileRule
operator|.
name|executeTarget
argument_list|(
literal|"extract"
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|Files
operator|.
name|exists
argument_list|(
name|tmpFile
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|extractCreateDirectories
parameter_list|()
throws|throws
name|IOException
block|{
specifier|final
name|Path
name|tmpDir
init|=
name|temporaryFolder
operator|.
name|newFolder
argument_list|()
operator|.
name|toPath
argument_list|()
decl_stmt|;
name|Files
operator|.
name|createDirectories
argument_list|(
name|tmpDir
argument_list|)
expr_stmt|;
specifier|final
name|Project
name|project
init|=
name|buildFileRule
operator|.
name|getProject
argument_list|()
decl_stmt|;
name|project
operator|.
name|setProperty
argument_list|(
name|PROP_ANT_TEST_DATA_TEST_COLLECTION
argument_list|,
name|TEST_COLLECTION_NAME
argument_list|)
expr_stmt|;
name|project
operator|.
name|setProperty
argument_list|(
name|PROP_ANT_TEST_DATA_TEST_RESOURCE
argument_list|,
name|TEST_RESOURCE_NAME
argument_list|)
expr_stmt|;
name|project
operator|.
name|setProperty
argument_list|(
name|PROP_ANT_TEST_DATA_TMP_DIR
argument_list|,
name|tmpDir
operator|.
name|toAbsolutePath
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|buildFileRule
operator|.
name|executeTarget
argument_list|(
literal|"extractCreateDirectories"
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|Files
operator|.
name|exists
argument_list|(
name|tmpDir
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|Files
operator|.
name|exists
argument_list|(
name|tmpDir
operator|.
name|resolve
argument_list|(
name|TEST_RESOURCE_NAME
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|Files
operator|.
name|exists
argument_list|(
name|tmpDir
operator|.
name|resolve
argument_list|(
name|OTHER_TEST_COLLECTION_NAME
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|Files
operator|.
name|exists
argument_list|(
name|tmpDir
operator|.
name|resolve
argument_list|(
name|OTHER_TEST_COLLECTION_NAME
argument_list|)
operator|.
name|resolve
argument_list|(
name|OTHER_TEST_RESOURCE_NAME
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|extractCreateDirectoriesDestDir
parameter_list|()
throws|throws
name|IOException
block|{
specifier|final
name|Path
name|tmpFile
init|=
name|temporaryFolder
operator|.
name|newFolder
argument_list|()
operator|.
name|toPath
argument_list|()
operator|.
name|resolve
argument_list|(
literal|"new-sub-dir"
argument_list|)
operator|.
name|resolve
argument_list|(
name|TEST_RESOURCE_NAME
argument_list|)
decl_stmt|;
specifier|final
name|Project
name|project
init|=
name|buildFileRule
operator|.
name|getProject
argument_list|()
decl_stmt|;
name|project
operator|.
name|setProperty
argument_list|(
name|PROP_ANT_TEST_DATA_TEST_COLLECTION
argument_list|,
name|TEST_COLLECTION_NAME
argument_list|)
expr_stmt|;
name|project
operator|.
name|setProperty
argument_list|(
name|PROP_ANT_TEST_DATA_TEST_RESOURCE
argument_list|,
name|TEST_RESOURCE_NAME
argument_list|)
expr_stmt|;
name|project
operator|.
name|setProperty
argument_list|(
name|PROP_ANT_TEST_DATA_TMP_FILE
argument_list|,
name|tmpFile
operator|.
name|toAbsolutePath
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|buildFileRule
operator|.
name|executeTarget
argument_list|(
literal|"extractCreateDirectoriesDestDir"
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|Files
operator|.
name|exists
argument_list|(
name|tmpFile
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|extractCreateDirectoriesOverwriteFile
parameter_list|()
throws|throws
name|IOException
block|{
specifier|final
name|Path
name|tmpFile
init|=
name|temporaryFolder
operator|.
name|newFile
argument_list|(
name|TEST_RESOURCE_NAME
argument_list|)
operator|.
name|toPath
argument_list|()
decl_stmt|;
name|assertTrue
argument_list|(
name|Files
operator|.
name|exists
argument_list|(
name|tmpFile
argument_list|)
argument_list|)
expr_stmt|;
comment|// to ensure we can overwrite from Ant task
specifier|final
name|Project
name|project
init|=
name|buildFileRule
operator|.
name|getProject
argument_list|()
decl_stmt|;
name|project
operator|.
name|setProperty
argument_list|(
name|PROP_ANT_TEST_DATA_TEST_COLLECTION
argument_list|,
name|TEST_COLLECTION_NAME
argument_list|)
expr_stmt|;
name|project
operator|.
name|setProperty
argument_list|(
name|PROP_ANT_TEST_DATA_TEST_RESOURCE
argument_list|,
name|TEST_RESOURCE_NAME
argument_list|)
expr_stmt|;
name|project
operator|.
name|setProperty
argument_list|(
name|PROP_ANT_TEST_DATA_TMP_FILE
argument_list|,
name|tmpFile
operator|.
name|toAbsolutePath
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|buildFileRule
operator|.
name|executeTarget
argument_list|(
literal|"extractCreateDirectoriesOverwriteFile"
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|Files
operator|.
name|exists
argument_list|(
name|tmpFile
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|extractCreateDirectoriesOverwriteDir
parameter_list|()
throws|throws
name|IOException
block|{
specifier|final
name|Path
name|tmpDir
init|=
name|temporaryFolder
operator|.
name|newFolder
argument_list|()
operator|.
name|toPath
argument_list|()
decl_stmt|;
name|assertTrue
argument_list|(
name|Files
operator|.
name|exists
argument_list|(
name|tmpDir
argument_list|)
argument_list|)
expr_stmt|;
comment|// to ensure we can overwrite from Ant task
specifier|final
name|Project
name|project
init|=
name|buildFileRule
operator|.
name|getProject
argument_list|()
decl_stmt|;
name|project
operator|.
name|setProperty
argument_list|(
name|PROP_ANT_TEST_DATA_TEST_COLLECTION
argument_list|,
name|TEST_COLLECTION_NAME
argument_list|)
expr_stmt|;
name|project
operator|.
name|setProperty
argument_list|(
name|PROP_ANT_TEST_DATA_TMP_DIR
argument_list|,
name|tmpDir
operator|.
name|toAbsolutePath
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|buildFileRule
operator|.
name|executeTarget
argument_list|(
literal|"extractCreateDirectoriesOverwriteDir"
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|Files
operator|.
name|exists
argument_list|(
name|tmpDir
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|extractBinary
parameter_list|()
throws|throws
name|IOException
block|{
specifier|final
name|Path
name|tmpFile
init|=
name|temporaryFolder
operator|.
name|newFile
argument_list|()
operator|.
name|toPath
argument_list|()
decl_stmt|;
specifier|final
name|Project
name|project
init|=
name|buildFileRule
operator|.
name|getProject
argument_list|()
decl_stmt|;
name|project
operator|.
name|setProperty
argument_list|(
name|PROP_ANT_TEST_DATA_TEST_COLLECTION
argument_list|,
name|TEST_COLLECTION_NAME
argument_list|)
expr_stmt|;
name|project
operator|.
name|setProperty
argument_list|(
name|PROP_ANT_TEST_DATA_BIN_TEST_RESOURCE
argument_list|,
name|BIN_TEST_RESOURCE_NAME
argument_list|)
expr_stmt|;
name|project
operator|.
name|setProperty
argument_list|(
name|PROP_ANT_TEST_DATA_TMP_FILE
argument_list|,
name|tmpFile
operator|.
name|toAbsolutePath
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|buildFileRule
operator|.
name|executeTarget
argument_list|(
literal|"extractBinary"
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|Files
operator|.
name|exists
argument_list|(
name|tmpFile
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|list
parameter_list|()
block|{
specifier|final
name|Project
name|project
init|=
name|buildFileRule
operator|.
name|getProject
argument_list|()
decl_stmt|;
name|project
operator|.
name|setProperty
argument_list|(
name|PROP_ANT_TEST_DATA_TEST_COLLECTION
argument_list|,
name|TEST_COLLECTION_NAME
argument_list|)
expr_stmt|;
name|buildFileRule
operator|.
name|executeTarget
argument_list|(
literal|"list"
argument_list|)
expr_stmt|;
specifier|final
name|String
name|result
init|=
name|project
operator|.
name|getProperty
argument_list|(
name|PROP_ANT_TEST_DATA_RESULT
argument_list|)
decl_stmt|;
name|assertThat
argument_list|(
name|result
argument_list|,
name|allOf
argument_list|(
name|containsString
argument_list|(
name|TEST_RESOURCE_NAME
argument_list|)
argument_list|,
name|containsString
argument_list|(
name|BIN_TEST_RESOURCE_NAME
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|move
parameter_list|()
block|{
specifier|final
name|Project
name|project
init|=
name|buildFileRule
operator|.
name|getProject
argument_list|()
decl_stmt|;
name|project
operator|.
name|setProperty
argument_list|(
name|PROP_ANT_TEST_DATA_TEST_COLLECTION
argument_list|,
name|TEST_COLLECTION_NAME
argument_list|)
expr_stmt|;
name|project
operator|.
name|setProperty
argument_list|(
name|PROP_ANT_TEST_DATA_TEST_RESOURCE
argument_list|,
name|TEST_RESOURCE_NAME
argument_list|)
expr_stmt|;
name|project
operator|.
name|setProperty
argument_list|(
name|PROP_ANT_TEST_DATA_TEST_RESOURCE2
argument_list|,
name|TEST_RESOURCE2_NAME
argument_list|)
expr_stmt|;
name|buildFileRule
operator|.
name|executeTarget
argument_list|(
literal|"move"
argument_list|)
expr_stmt|;
specifier|final
name|String
name|result
init|=
name|project
operator|.
name|getProperty
argument_list|(
name|PROP_ANT_TEST_DATA_RESULT
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
name|Boolean
operator|.
name|parseBoolean
argument_list|(
name|result
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|store
parameter_list|()
throws|throws
name|IOException
block|{
specifier|final
name|Path
name|tmpFile
init|=
name|temporaryFolder
operator|.
name|newFile
argument_list|()
operator|.
name|toPath
argument_list|()
decl_stmt|;
name|Files
operator|.
name|write
argument_list|(
name|tmpFile
argument_list|,
literal|"<hello/>"
operator|.
name|getBytes
argument_list|(
name|UTF_8
argument_list|)
argument_list|)
expr_stmt|;
specifier|final
name|Project
name|project
init|=
name|buildFileRule
operator|.
name|getProject
argument_list|()
decl_stmt|;
name|project
operator|.
name|setProperty
argument_list|(
name|PROP_ANT_TEST_DATA_TEST_COLLECTION
argument_list|,
name|TEST_COLLECTION_NAME
argument_list|)
expr_stmt|;
name|project
operator|.
name|setProperty
argument_list|(
name|PROP_ANT_TEST_DATA_TMP_FILE
argument_list|,
name|tmpFile
operator|.
name|toAbsolutePath
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|project
operator|.
name|setProperty
argument_list|(
name|PROP_ANT_TEST_DATA_TMP_FILE_NAME
argument_list|,
name|FileUtils
operator|.
name|fileName
argument_list|(
name|tmpFile
argument_list|)
argument_list|)
expr_stmt|;
name|buildFileRule
operator|.
name|executeTarget
argument_list|(
literal|"store"
argument_list|)
expr_stmt|;
specifier|final
name|String
name|result
init|=
name|project
operator|.
name|getProperty
argument_list|(
name|PROP_ANT_TEST_DATA_RESULT
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
name|Boolean
operator|.
name|parseBoolean
argument_list|(
name|result
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|storeEmptyFile
parameter_list|()
throws|throws
name|IOException
block|{
specifier|final
name|Path
name|tmpFile
init|=
name|temporaryFolder
operator|.
name|newFile
argument_list|()
operator|.
name|toPath
argument_list|()
decl_stmt|;
specifier|final
name|Project
name|project
init|=
name|buildFileRule
operator|.
name|getProject
argument_list|()
decl_stmt|;
name|project
operator|.
name|setProperty
argument_list|(
name|PROP_ANT_TEST_DATA_TEST_COLLECTION
argument_list|,
name|TEST_COLLECTION_NAME
argument_list|)
expr_stmt|;
name|project
operator|.
name|setProperty
argument_list|(
name|PROP_ANT_TEST_DATA_TMP_FILE
argument_list|,
name|tmpFile
operator|.
name|toAbsolutePath
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|project
operator|.
name|setProperty
argument_list|(
name|PROP_ANT_TEST_DATA_TMP_FILE_NAME
argument_list|,
name|FileUtils
operator|.
name|fileName
argument_list|(
name|tmpFile
argument_list|)
argument_list|)
expr_stmt|;
name|buildFileRule
operator|.
name|executeTarget
argument_list|(
literal|"store"
argument_list|)
expr_stmt|;
specifier|final
name|String
name|result
init|=
name|project
operator|.
name|getProperty
argument_list|(
name|PROP_ANT_TEST_DATA_RESULT
argument_list|)
decl_stmt|;
name|assertFalse
argument_list|(
name|Boolean
operator|.
name|parseBoolean
argument_list|(
name|result
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|xpath
parameter_list|()
block|{
specifier|final
name|Project
name|project
init|=
name|buildFileRule
operator|.
name|getProject
argument_list|()
decl_stmt|;
name|project
operator|.
name|setProperty
argument_list|(
name|PROP_ANT_TEST_DATA_TEST_COLLECTION
argument_list|,
name|TEST_COLLECTION_NAME
argument_list|)
expr_stmt|;
name|buildFileRule
operator|.
name|executeTarget
argument_list|(
literal|"xpath"
argument_list|)
expr_stmt|;
specifier|final
name|String
name|result
init|=
name|project
operator|.
name|getProperty
argument_list|(
name|PROP_ANT_TEST_DATA_RESULT
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|"world"
argument_list|,
name|result
operator|.
name|trim
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|xpathXml
parameter_list|()
block|{
specifier|final
name|Project
name|project
init|=
name|buildFileRule
operator|.
name|getProject
argument_list|()
decl_stmt|;
name|project
operator|.
name|setProperty
argument_list|(
name|PROP_ANT_TEST_DATA_TEST_COLLECTION
argument_list|,
name|TEST_COLLECTION_NAME
argument_list|)
expr_stmt|;
name|buildFileRule
operator|.
name|executeTarget
argument_list|(
literal|"xpathXml"
argument_list|)
expr_stmt|;
specifier|final
name|String
name|result
init|=
name|project
operator|.
name|getProperty
argument_list|(
name|PROP_ANT_TEST_DATA_RESULT
argument_list|)
decl_stmt|;
name|assertThat
argument_list|(
name|result
operator|.
name|replaceAll
argument_list|(
literal|"\\s"
argument_list|,
literal|""
argument_list|)
argument_list|,
name|allOf
argument_list|(
name|containsString
argument_list|(
literal|"<test>hello<subject>world</subject></test>"
argument_list|)
argument_list|,
name|containsString
argument_list|(
literal|"<test>other</test>"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|xquery
parameter_list|()
block|{
specifier|final
name|Project
name|project
init|=
name|buildFileRule
operator|.
name|getProject
argument_list|()
decl_stmt|;
name|project
operator|.
name|setProperty
argument_list|(
name|PROP_ANT_TEST_DATA_TEST_COLLECTION
argument_list|,
name|TEST_COLLECTION_NAME
argument_list|)
expr_stmt|;
name|buildFileRule
operator|.
name|executeTarget
argument_list|(
literal|"xquery"
argument_list|)
expr_stmt|;
specifier|final
name|String
name|result
init|=
name|project
operator|.
name|getProperty
argument_list|(
name|PROP_ANT_TEST_DATA_RESULT
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|"<subject>world</subject>"
argument_list|,
name|result
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|xupdate
parameter_list|()
block|{
name|buildFileRule
operator|.
name|executeTarget
argument_list|(
literal|"xupdate"
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

