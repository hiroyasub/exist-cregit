begin_unit|revision:1.0.0;language:Java;cregit-version:0.0.1
begin_package
package|package
name|org
operator|.
name|exist
operator|.
name|ant
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|tools
operator|.
name|ant
operator|.
name|Project
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Rule
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|rules
operator|.
name|TemporaryFolder
import|;
end_import

begin_import
import|import
name|org
operator|.
name|xmldb
operator|.
name|api
operator|.
name|base
operator|.
name|Resource
import|;
end_import

begin_import
import|import
name|org
operator|.
name|xmldb
operator|.
name|api
operator|.
name|base
operator|.
name|XMLDBException
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|annotation
operator|.
name|Nullable
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|URISyntaxException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|URL
import|;
end_import

begin_import
import|import
name|java
operator|.
name|nio
operator|.
name|file
operator|.
name|Files
import|;
end_import

begin_import
import|import
name|java
operator|.
name|nio
operator|.
name|file
operator|.
name|Path
import|;
end_import

begin_import
import|import
name|java
operator|.
name|nio
operator|.
name|file
operator|.
name|Paths
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertNotNull
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertTrue
import|;
end_import

begin_class
specifier|public
class|class
name|ServerTaskTest
extends|extends
name|AbstractTaskTest
block|{
specifier|private
specifier|static
specifier|final
name|String
name|PROP_ANT_TEST_DATA_BACKUP_DIR
init|=
literal|"test.data.backup.dir"
decl_stmt|;
annotation|@
name|Rule
specifier|public
specifier|final
name|TemporaryFolder
name|temporaryFolder
init|=
operator|new
name|TemporaryFolder
argument_list|()
decl_stmt|;
annotation|@
name|Nullable
annotation|@
name|Override
specifier|protected
name|URL
name|getBuildFile
parameter_list|()
block|{
return|return
name|getClass
argument_list|()
operator|.
name|getResource
argument_list|(
literal|"server.xml"
argument_list|)
return|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|backup
parameter_list|()
throws|throws
name|IOException
block|{
specifier|final
name|Project
name|project
init|=
name|buildFileRule
operator|.
name|getProject
argument_list|()
decl_stmt|;
specifier|final
name|Path
name|backupDir
init|=
name|temporaryFolder
operator|.
name|newFolder
argument_list|()
operator|.
name|toPath
argument_list|()
decl_stmt|;
name|project
operator|.
name|setProperty
argument_list|(
name|PROP_ANT_TEST_DATA_BACKUP_DIR
argument_list|,
name|backupDir
operator|.
name|toAbsolutePath
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|buildFileRule
operator|.
name|executeTarget
argument_list|(
literal|"backup"
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|Files
operator|.
name|exists
argument_list|(
name|backupDir
operator|.
name|resolve
argument_list|(
literal|"db"
argument_list|)
operator|.
name|resolve
argument_list|(
literal|"__contents__.xml"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|restore
parameter_list|()
throws|throws
name|URISyntaxException
throws|,
name|XMLDBException
block|{
specifier|final
name|URL
name|backupContentsUrl
init|=
name|getClass
argument_list|()
operator|.
name|getResource
argument_list|(
literal|"backup-test/db/__contents__.xml"
argument_list|)
decl_stmt|;
name|assertNotNull
argument_list|(
name|backupContentsUrl
argument_list|)
expr_stmt|;
specifier|final
name|Path
name|backupDir
init|=
name|Paths
operator|.
name|get
argument_list|(
name|backupContentsUrl
operator|.
name|toURI
argument_list|()
argument_list|)
operator|.
name|getParent
argument_list|()
operator|.
name|getParent
argument_list|()
decl_stmt|;
specifier|final
name|Project
name|project
init|=
name|buildFileRule
operator|.
name|getProject
argument_list|()
decl_stmt|;
name|project
operator|.
name|setProperty
argument_list|(
name|PROP_ANT_TEST_DATA_BACKUP_DIR
argument_list|,
name|backupDir
operator|.
name|toAbsolutePath
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|buildFileRule
operator|.
name|executeTarget
argument_list|(
literal|"restore"
argument_list|)
expr_stmt|;
specifier|final
name|Resource
name|res
init|=
name|existEmbeddedServer
operator|.
name|getRoot
argument_list|()
operator|.
name|getResource
argument_list|(
literal|"example.xml"
argument_list|)
decl_stmt|;
name|assertNotNull
argument_list|(
name|res
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|backupRestore
parameter_list|()
throws|throws
name|IOException
block|{
specifier|final
name|Project
name|project
init|=
name|buildFileRule
operator|.
name|getProject
argument_list|()
decl_stmt|;
specifier|final
name|Path
name|backupDir
init|=
name|temporaryFolder
operator|.
name|newFolder
argument_list|()
operator|.
name|toPath
argument_list|()
decl_stmt|;
name|project
operator|.
name|setProperty
argument_list|(
name|PROP_ANT_TEST_DATA_BACKUP_DIR
argument_list|,
name|backupDir
operator|.
name|toAbsolutePath
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|buildFileRule
operator|.
name|executeTarget
argument_list|(
literal|"backup"
argument_list|)
expr_stmt|;
name|buildFileRule
operator|.
name|executeTarget
argument_list|(
literal|"restore"
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|shutdown
parameter_list|()
block|{
name|buildFileRule
operator|.
name|executeTarget
argument_list|(
literal|"shutdown"
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

