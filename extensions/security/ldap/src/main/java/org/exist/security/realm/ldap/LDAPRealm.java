begin_unit|revision:1.0.0;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  *  eXist Open Source Native XML Database  *  Copyright (C) 2010 The eXist Project  *  http://exist-db.org  *  *  This program is free software; you can redistribute it and/or  *  modify it under the terms of the GNU Lesser General Public License  *  as published by the Free Software Foundation; either version 2  *  of the License, or (at your option) any later version.  *  *  This program is distributed in the hope that it will be useful,  *  but WITHOUT ANY WARRANTY; without even the implied warranty of  *  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the  *  GNU Lesser General Public License for more details.  *  *  You should have received a copy of the GNU Lesser General Public License  *  along with this program; if not, write to the Free Software  *  Foundation, Inc., 675 Mass Ave, Cambridge, MA 02139, USA.  *  *  $Id$  */
end_comment

begin_package
package|package
name|org
operator|.
name|exist
operator|.
name|security
operator|.
name|realm
operator|.
name|ldap
package|;
end_package

begin_import
import|import
name|java
operator|.
name|lang
operator|.
name|reflect
operator|.
name|Field
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|AbstractMap
operator|.
name|SimpleEntry
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Optional
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Set
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|annotation
operator|.
name|Nullable
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|naming
operator|.
name|NamingEnumeration
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|naming
operator|.
name|NamingException
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|naming
operator|.
name|directory
operator|.
name|Attribute
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|naming
operator|.
name|directory
operator|.
name|Attributes
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|naming
operator|.
name|directory
operator|.
name|DirContext
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|naming
operator|.
name|directory
operator|.
name|SearchControls
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|naming
operator|.
name|directory
operator|.
name|SearchResult
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|naming
operator|.
name|ldap
operator|.
name|LdapContext
import|;
end_import

begin_import
import|import
name|com
operator|.
name|evolvedbinary
operator|.
name|j8fu
operator|.
name|tuple
operator|.
name|Tuple2
import|;
end_import

begin_import
import|import
name|com
operator|.
name|evolvedbinary
operator|.
name|j8fu
operator|.
name|function
operator|.
name|BiFunction3E
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|logging
operator|.
name|log4j
operator|.
name|LogManager
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|logging
operator|.
name|log4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|EXistException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|config
operator|.
name|Configuration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|config
operator|.
name|annotation
operator|.
name|*
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|security
operator|.
name|AXSchemaType
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|security
operator|.
name|AbstractAccount
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|security
operator|.
name|AbstractRealm
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|security
operator|.
name|Account
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|security
operator|.
name|AuthenticationException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|security
operator|.
name|Group
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|security
operator|.
name|PermissionDeniedException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|security
operator|.
name|SchemaType
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|security
operator|.
name|Subject
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|security
operator|.
name|internal
operator|.
name|SecurityManagerImpl
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|security
operator|.
name|internal
operator|.
name|SubjectAccreditedImpl
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|security
operator|.
name|internal
operator|.
name|aider
operator|.
name|GroupAider
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|security
operator|.
name|internal
operator|.
name|aider
operator|.
name|UserAider
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|security
operator|.
name|realm
operator|.
name|ldap
operator|.
name|AbstractLDAPSearchPrincipal
operator|.
name|LDAPSearchAttributeKey
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|storage
operator|.
name|DBBroker
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|storage
operator|.
name|txn
operator|.
name|Txn
import|;
end_import

begin_import
import|import static
name|com
operator|.
name|evolvedbinary
operator|.
name|j8fu
operator|.
name|tuple
operator|.
name|Tuple
operator|.
name|Tuple
import|;
end_import

begin_comment
comment|/**  * @author<a href="mailto:shabanovd@gmail.com">Dmitriy Shabanov</a>  * @author<a href="mailto:adam@exist-db.org">Adam Retter</a>  */
end_comment

begin_class
annotation|@
name|ConfigurationClass
argument_list|(
literal|"realm"
argument_list|)
comment|//TODO: id = LDAP
specifier|public
class|class
name|LDAPRealm
extends|extends
name|AbstractRealm
block|{
specifier|private
specifier|static
specifier|final
name|Logger
name|LOG
init|=
name|LogManager
operator|.
name|getLogger
argument_list|(
name|LDAPRealm
operator|.
name|class
argument_list|)
decl_stmt|;
annotation|@
name|ConfigurationFieldAsAttribute
argument_list|(
literal|"id"
argument_list|)
specifier|public
specifier|static
name|String
name|ID
init|=
literal|"LDAP"
decl_stmt|;
annotation|@
name|ConfigurationFieldAsAttribute
argument_list|(
literal|"version"
argument_list|)
specifier|public
specifier|static
specifier|final
name|String
name|version
init|=
literal|"1.0"
decl_stmt|;
annotation|@
name|ConfigurationFieldAsAttribute
argument_list|(
literal|"principals-are-case-insensitive"
argument_list|)
specifier|private
name|boolean
name|principalsAreCaseInsensitive
decl_stmt|;
annotation|@
name|ConfigurationFieldAsElement
argument_list|(
literal|"context"
argument_list|)
specifier|protected
name|LdapContextFactory
name|ldapContextFactory
decl_stmt|;
specifier|public
name|LDAPRealm
parameter_list|(
specifier|final
name|SecurityManagerImpl
name|sm
parameter_list|,
specifier|final
name|Configuration
name|config
parameter_list|)
block|{
name|super
argument_list|(
name|sm
argument_list|,
name|config
argument_list|)
expr_stmt|;
block|}
specifier|protected
name|LdapContextFactory
name|ensureContextFactory
parameter_list|()
block|{
if|if
condition|(
name|this
operator|.
name|ldapContextFactory
operator|==
literal|null
condition|)
block|{
if|if
condition|(
name|LOG
operator|.
name|isDebugEnabled
argument_list|()
condition|)
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"No LdapContextFactory specified - creating a default instance."
argument_list|)
expr_stmt|;
block|}
name|this
operator|.
name|ldapContextFactory
operator|=
operator|new
name|LdapContextFactory
argument_list|(
name|configuration
argument_list|)
expr_stmt|;
block|}
return|return
name|this
operator|.
name|ldapContextFactory
return|;
block|}
annotation|@
name|Override
specifier|public
name|String
name|getId
parameter_list|()
block|{
return|return
name|ID
return|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|start
parameter_list|(
specifier|final
name|DBBroker
name|broker
parameter_list|,
specifier|final
name|Txn
name|transaction
parameter_list|)
throws|throws
name|EXistException
block|{
name|super
operator|.
name|start
argument_list|(
name|broker
argument_list|,
name|transaction
argument_list|)
expr_stmt|;
block|}
specifier|private
name|String
name|ensureCase
parameter_list|(
specifier|final
name|String
name|username
parameter_list|)
block|{
if|if
condition|(
name|username
operator|==
literal|null
condition|)
block|{
return|return
literal|null
return|;
block|}
if|if
condition|(
name|principalsAreCaseInsensitive
condition|)
block|{
return|return
name|username
operator|.
name|toLowerCase
argument_list|()
return|;
block|}
return|return
name|username
return|;
block|}
annotation|@
name|Override
specifier|public
name|Subject
name|authenticate
parameter_list|(
specifier|final
name|String
name|username
parameter_list|,
specifier|final
name|Object
name|credentials
parameter_list|)
throws|throws
name|AuthenticationException
block|{
specifier|final
name|String
name|name
init|=
name|ensureCase
argument_list|(
name|username
argument_list|)
decl_stmt|;
comment|// Binds using the username and password provided by the user.
name|LdapContext
name|ctx
init|=
literal|null
decl_stmt|;
try|try
block|{
name|ctx
operator|=
name|getContextWithCredentials
argument_list|(
name|Optional
operator|.
name|of
argument_list|(
name|Tuple
argument_list|(
name|name
argument_list|,
name|String
operator|.
name|valueOf
argument_list|(
name|credentials
argument_list|)
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
specifier|final
name|AbstractAccount
name|account
init|=
operator|(
name|AbstractAccount
operator|)
name|getAccount
argument_list|(
name|ctx
argument_list|,
name|name
argument_list|)
decl_stmt|;
if|if
condition|(
name|account
operator|==
literal|null
condition|)
block|{
if|if
condition|(
name|LOG
operator|.
name|isDebugEnabled
argument_list|()
condition|)
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"Account '"
operator|+
name|name
operator|+
literal|"' can not be found."
argument_list|)
expr_stmt|;
block|}
throw|throw
operator|new
name|AuthenticationException
argument_list|(
name|AuthenticationException
operator|.
name|ACCOUNT_NOT_FOUND
argument_list|,
literal|"Account '"
operator|+
name|name
operator|+
literal|"' can not be found."
argument_list|)
throw|;
block|}
return|return
operator|new
name|AuthenticatedLdapSubjectAccreditedImpl
argument_list|(
name|account
argument_list|,
name|ctx
argument_list|,
name|String
operator|.
name|valueOf
argument_list|(
name|credentials
argument_list|)
argument_list|)
return|;
block|}
catch|catch
parameter_list|(
specifier|final
name|NamingException
name|e
parameter_list|)
block|{
if|if
condition|(
name|LOG
operator|.
name|isDebugEnabled
argument_list|()
condition|)
block|{
name|LOG
operator|.
name|debug
argument_list|(
name|e
operator|.
name|getMessage
argument_list|()
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|e
operator|instanceof
name|javax
operator|.
name|naming
operator|.
name|AuthenticationException
condition|)
block|{
throw|throw
operator|new
name|AuthenticationException
argument_list|(
name|AuthenticationException
operator|.
name|ACCOUNT_NOT_FOUND
argument_list|,
name|e
operator|.
name|getMessage
argument_list|()
argument_list|)
throw|;
block|}
else|else
block|{
throw|throw
operator|new
name|AuthenticationException
argument_list|(
name|AuthenticationException
operator|.
name|UNNOWN_EXCEPTION
argument_list|,
name|e
operator|.
name|getMessage
argument_list|()
argument_list|)
throw|;
block|}
block|}
finally|finally
block|{
name|LdapUtils
operator|.
name|closeContext
argument_list|(
name|ctx
argument_list|)
expr_stmt|;
block|}
block|}
specifier|private
name|List
argument_list|<
name|Group
argument_list|>
name|getGroupMembershipForLdapUser
parameter_list|(
specifier|final
name|LdapContext
name|ctx
parameter_list|,
specifier|final
name|DBBroker
name|broker
parameter_list|,
specifier|final
name|SearchResult
name|ldapUser
parameter_list|)
throws|throws
name|NamingException
block|{
specifier|final
name|List
argument_list|<
name|Group
argument_list|>
name|memberOf_groups
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
specifier|final
name|LDAPSearchContext
name|search
init|=
name|ensureContextFactory
argument_list|()
operator|.
name|getSearch
argument_list|()
decl_stmt|;
specifier|final
name|String
name|userDistinguishedName
init|=
operator|(
name|String
operator|)
name|ldapUser
operator|.
name|getAttributes
argument_list|()
operator|.
name|get
argument_list|(
name|search
operator|.
name|getSearchAccount
argument_list|()
operator|.
name|getSearchAttribute
argument_list|(
name|LDAPSearchAttributeKey
operator|.
name|DN
argument_list|)
argument_list|)
operator|.
name|get
argument_list|()
decl_stmt|;
specifier|final
name|List
argument_list|<
name|String
argument_list|>
name|memberOf_groupNames
init|=
name|findGroupnamesForUserDistinguishedName
argument_list|(
name|ctx
argument_list|,
name|userDistinguishedName
argument_list|)
decl_stmt|;
for|for
control|(
specifier|final
name|String
name|memberOf_groupName
range|:
name|memberOf_groupNames
control|)
block|{
name|memberOf_groups
operator|.
name|add
argument_list|(
name|getGroup
argument_list|(
name|ctx
argument_list|,
name|broker
argument_list|,
name|memberOf_groupName
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|//TODO expand to a general method that rewrites the useraider based on the realTransformation
if|if
condition|(
name|ensureContextFactory
argument_list|()
operator|.
name|getTransformationContext
argument_list|()
operator|!=
literal|null
condition|)
block|{
specifier|final
name|List
argument_list|<
name|String
argument_list|>
name|additionalGroupNames
init|=
name|ensureContextFactory
argument_list|()
operator|.
name|getTransformationContext
argument_list|()
operator|.
name|getAdditionalGroups
argument_list|()
decl_stmt|;
if|if
condition|(
name|additionalGroupNames
operator|!=
literal|null
condition|)
block|{
for|for
control|(
specifier|final
name|String
name|additionalGroupName
range|:
name|additionalGroupNames
control|)
block|{
specifier|final
name|Group
name|additionalGroup
init|=
name|getSecurityManager
argument_list|()
operator|.
name|getGroup
argument_list|(
name|additionalGroupName
argument_list|)
decl_stmt|;
if|if
condition|(
name|additionalGroup
operator|!=
literal|null
condition|)
block|{
name|memberOf_groups
operator|.
name|add
argument_list|(
name|additionalGroup
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
return|return
name|memberOf_groups
return|;
block|}
specifier|private
name|List
argument_list|<
name|SimpleEntry
argument_list|<
name|AXSchemaType
argument_list|,
name|String
argument_list|>
argument_list|>
name|getMetadataForLdapUser
parameter_list|(
specifier|final
name|SearchResult
name|ldapUser
parameter_list|)
throws|throws
name|NamingException
block|{
specifier|final
name|List
argument_list|<
name|SimpleEntry
argument_list|<
name|AXSchemaType
argument_list|,
name|String
argument_list|>
argument_list|>
name|metadata
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
specifier|final
name|LDAPSearchAccount
name|searchAccount
init|=
name|ensureContextFactory
argument_list|()
operator|.
name|getSearch
argument_list|()
operator|.
name|getSearchAccount
argument_list|()
decl_stmt|;
specifier|final
name|Attributes
name|userAttributes
init|=
name|ldapUser
operator|.
name|getAttributes
argument_list|()
decl_stmt|;
comment|//store any requested metadata
for|for
control|(
specifier|final
name|AXSchemaType
name|axSchemaType
range|:
name|searchAccount
operator|.
name|getMetadataSearchAttributeKeys
argument_list|()
control|)
block|{
specifier|final
name|String
name|searchAttribute
init|=
name|searchAccount
operator|.
name|getMetadataSearchAttribute
argument_list|(
name|axSchemaType
argument_list|)
decl_stmt|;
if|if
condition|(
name|userAttributes
operator|!=
literal|null
condition|)
block|{
specifier|final
name|Attribute
name|userAttribute
init|=
name|userAttributes
operator|.
name|get
argument_list|(
name|searchAttribute
argument_list|)
decl_stmt|;
if|if
condition|(
name|userAttribute
operator|!=
literal|null
condition|)
block|{
specifier|final
name|String
name|attributeValue
init|=
name|userAttribute
operator|.
name|get
argument_list|()
operator|.
name|toString
argument_list|()
decl_stmt|;
name|metadata
operator|.
name|add
argument_list|(
operator|new
name|SimpleEntry
argument_list|<>
argument_list|(
name|axSchemaType
argument_list|,
name|attributeValue
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
block|}
return|return
name|metadata
return|;
block|}
specifier|public
name|Account
name|refreshAccountFromLdap
parameter_list|(
specifier|final
name|Account
name|account
parameter_list|)
throws|throws
name|PermissionDeniedException
throws|,
name|AuthenticationException
block|{
specifier|final
name|int
name|UPDATE_NONE
init|=
literal|0
decl_stmt|;
specifier|final
name|int
name|UPDATE_GROUP
init|=
literal|1
decl_stmt|;
specifier|final
name|int
name|UPDATE_METADATA
init|=
literal|2
decl_stmt|;
specifier|final
name|Subject
name|invokingUser
init|=
name|getSecurityManager
argument_list|()
operator|.
name|getCurrentSubject
argument_list|()
decl_stmt|;
if|if
condition|(
operator|!
name|invokingUser
operator|.
name|hasDbaRole
argument_list|()
operator|&&
name|invokingUser
operator|.
name|getId
argument_list|()
operator|!=
name|account
operator|.
name|getId
argument_list|()
condition|)
block|{
throw|throw
operator|new
name|PermissionDeniedException
argument_list|(
literal|"You do not have permission to modify the account"
argument_list|)
throw|;
block|}
name|LdapContext
name|ctx
init|=
literal|null
decl_stmt|;
try|try
block|{
name|ctx
operator|=
name|getContext
argument_list|(
name|invokingUser
argument_list|)
expr_stmt|;
specifier|final
name|SearchResult
name|ldapUser
init|=
name|findAccountByAccountName
argument_list|(
name|ctx
argument_list|,
name|account
operator|.
name|getName
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|ldapUser
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|AuthenticationException
argument_list|(
name|AuthenticationException
operator|.
name|ACCOUNT_NOT_FOUND
argument_list|,
literal|"Could not find the account in the LDAP"
argument_list|)
throw|;
block|}
return|return
name|executeAsSystemUser
argument_list|(
name|ctx
argument_list|,
parameter_list|(
name|ctx2
parameter_list|,
name|broker
parameter_list|)
lambda|->
block|{
name|int
name|update
init|=
name|UPDATE_NONE
decl_stmt|;
comment|//1) get the ldap group membership
specifier|final
name|List
argument_list|<
name|Group
argument_list|>
name|memberOf_groups
init|=
name|getGroupMembershipForLdapUser
argument_list|(
name|ctx2
argument_list|,
name|broker
argument_list|,
name|ldapUser
argument_list|)
decl_stmt|;
comment|//2) get the ldap primary group
specifier|final
name|String
name|primaryGroup
init|=
name|findGroupBySID
argument_list|(
name|ctx2
argument_list|,
name|getPrimaryGroupSID
argument_list|(
name|ldapUser
argument_list|)
argument_list|)
decl_stmt|;
comment|//append the ldap primaryGroup to the head of the ldap group list, and compare
comment|//to the account group list
name|memberOf_groups
operator|.
name|add
argument_list|(
literal|0
argument_list|,
name|getGroup
argument_list|(
name|ctx2
argument_list|,
name|broker
argument_list|,
name|primaryGroup
argument_list|)
argument_list|)
expr_stmt|;
specifier|final
name|String
name|accountGroups
index|[]
init|=
name|account
operator|.
name|getGroups
argument_list|()
decl_stmt|;
if|if
condition|(
operator|!
name|accountGroups
index|[
literal|0
index|]
operator|.
name|equals
argument_list|(
name|ensureCase
argument_list|(
name|primaryGroup
argument_list|)
argument_list|)
condition|)
block|{
name|update
operator||=
name|UPDATE_GROUP
expr_stmt|;
block|}
else|else
block|{
if|if
condition|(
name|accountGroups
operator|.
name|length
operator|!=
name|memberOf_groups
operator|.
name|size
argument_list|()
condition|)
block|{
name|update
operator||=
name|UPDATE_GROUP
expr_stmt|;
block|}
else|else
block|{
for|for
control|(
specifier|final
name|String
name|accountGroup
range|:
name|accountGroups
control|)
block|{
name|boolean
name|found
init|=
literal|false
decl_stmt|;
for|for
control|(
specifier|final
name|Group
name|memberOf_group
range|:
name|memberOf_groups
control|)
block|{
if|if
condition|(
name|accountGroup
operator|.
name|equals
argument_list|(
name|ensureCase
argument_list|(
name|memberOf_group
operator|.
name|getName
argument_list|()
argument_list|)
argument_list|)
condition|)
block|{
name|found
operator|=
literal|true
expr_stmt|;
break|break;
block|}
block|}
if|if
condition|(
operator|!
name|found
condition|)
block|{
name|update
operator||=
name|UPDATE_GROUP
expr_stmt|;
break|break;
block|}
block|}
block|}
block|}
comment|//3) check metadata
specifier|final
name|List
argument_list|<
name|SimpleEntry
argument_list|<
name|AXSchemaType
argument_list|,
name|String
argument_list|>
argument_list|>
name|ldapMetadatas
init|=
name|getMetadataForLdapUser
argument_list|(
name|ldapUser
argument_list|)
decl_stmt|;
specifier|final
name|Set
argument_list|<
name|SchemaType
argument_list|>
name|accountMetadataKeys
init|=
name|account
operator|.
name|getMetadataKeys
argument_list|()
decl_stmt|;
if|if
condition|(
name|accountMetadataKeys
operator|.
name|size
argument_list|()
operator|!=
name|ldapMetadatas
operator|.
name|size
argument_list|()
condition|)
block|{
name|update
operator||=
name|UPDATE_METADATA
expr_stmt|;
block|}
else|else
block|{
for|for
control|(
name|SchemaType
name|accountMetadataKey
range|:
name|accountMetadataKeys
control|)
block|{
specifier|final
name|String
name|accountMetadataValue
init|=
name|account
operator|.
name|getMetadataValue
argument_list|(
name|accountMetadataKey
argument_list|)
decl_stmt|;
name|boolean
name|found
init|=
literal|false
decl_stmt|;
for|for
control|(
name|SimpleEntry
argument_list|<
name|AXSchemaType
argument_list|,
name|String
argument_list|>
name|ldapMetadata
range|:
name|ldapMetadatas
control|)
block|{
if|if
condition|(
name|accountMetadataKey
operator|.
name|equals
argument_list|(
name|ldapMetadata
operator|.
name|getKey
argument_list|()
argument_list|)
operator|&&
name|accountMetadataValue
operator|.
name|equals
argument_list|(
name|ldapMetadata
operator|.
name|getValue
argument_list|()
argument_list|)
condition|)
block|{
name|found
operator|=
literal|true
expr_stmt|;
break|break;
block|}
block|}
if|if
condition|(
operator|!
name|found
condition|)
block|{
name|update
operator||=
name|UPDATE_METADATA
expr_stmt|;
break|break;
block|}
block|}
block|}
comment|//update the groups?
if|if
condition|(
operator|(
name|update
operator|&
name|UPDATE_GROUP
operator|)
operator|==
name|UPDATE_GROUP
condition|)
block|{
try|try
block|{
specifier|final
name|Field
name|fld
init|=
name|account
operator|.
name|getClass
argument_list|()
operator|.
name|getSuperclass
argument_list|()
operator|.
name|getDeclaredField
argument_list|(
literal|"groups"
argument_list|)
decl_stmt|;
name|fld
operator|.
name|setAccessible
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|fld
operator|.
name|set
argument_list|(
name|account
argument_list|,
name|memberOf_groups
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
specifier|final
name|NoSuchFieldException
decl||
name|IllegalAccessException
name|nsfe
parameter_list|)
block|{
throw|throw
operator|new
name|EXistException
argument_list|(
name|nsfe
operator|.
name|getMessage
argument_list|()
argument_list|,
name|nsfe
argument_list|)
throw|;
block|}
block|}
comment|//update the metdata?
if|if
condition|(
operator|(
name|update
operator|&
name|UPDATE_METADATA
operator|)
operator|==
name|UPDATE_METADATA
condition|)
block|{
name|account
operator|.
name|clearMetadata
argument_list|()
expr_stmt|;
for|for
control|(
specifier|final
name|SimpleEntry
argument_list|<
name|AXSchemaType
argument_list|,
name|String
argument_list|>
name|ldapMetadata
range|:
name|ldapMetadatas
control|)
block|{
name|account
operator|.
name|setMetadataValue
argument_list|(
name|ldapMetadata
operator|.
name|getKey
argument_list|()
argument_list|,
name|ldapMetadata
operator|.
name|getValue
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
if|if
condition|(
name|update
operator|!=
name|UPDATE_NONE
condition|)
block|{
specifier|final
name|boolean
name|updated
init|=
name|getSecurityManager
argument_list|()
operator|.
name|updateAccount
argument_list|(
name|account
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|updated
condition|)
block|{
name|LOG
operator|.
name|error
argument_list|(
literal|"Could not update account"
argument_list|)
expr_stmt|;
block|}
block|}
return|return
name|account
return|;
block|}
argument_list|)
return|;
block|}
catch|catch
parameter_list|(
specifier|final
name|NamingException
decl||
name|EXistException
name|ne
parameter_list|)
block|{
throw|throw
operator|new
name|AuthenticationException
argument_list|(
name|AuthenticationException
operator|.
name|UNNOWN_EXCEPTION
argument_list|,
name|ne
operator|.
name|getMessage
argument_list|()
argument_list|,
name|ne
argument_list|)
throw|;
block|}
finally|finally
block|{
name|LdapUtils
operator|.
name|closeContext
argument_list|(
name|ctx
argument_list|)
expr_stmt|;
block|}
block|}
specifier|private
name|Account
name|createAccountInDatabase
parameter_list|(
specifier|final
name|LdapContext
name|ctx
parameter_list|,
specifier|final
name|String
name|username
parameter_list|,
specifier|final
name|SearchResult
name|ldapUser
parameter_list|,
specifier|final
name|String
name|primaryGroupName
parameter_list|)
throws|throws
name|AuthenticationException
block|{
comment|//final LDAPSearchAccount searchAccount = ensureContextFactory().getSearch().getSearchAccount();
try|try
block|{
return|return
name|executeAsSystemUser
argument_list|(
name|ctx
argument_list|,
parameter_list|(
name|ctx2
parameter_list|,
name|broker
parameter_list|)
lambda|->
block|{
if|if
condition|(
name|LOG
operator|.
name|isDebugEnabled
argument_list|()
condition|)
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"Saving account '"
operator|+
name|username
operator|+
literal|"'."
argument_list|)
expr_stmt|;
block|}
comment|//get (or create) the primary group if it doesnt exist
specifier|final
name|Group
name|primaryGroup
init|=
name|getGroup
argument_list|(
name|ctx
argument_list|,
name|broker
argument_list|,
name|primaryGroupName
argument_list|)
decl_stmt|;
comment|//get (or create) member groups
comment|/*LDAPSearchContext search = ensureContextFactory().getSearch();                     String userDistinguishedName = (String)ldapUser.getAttributes().get(search.getSearchAccount().getSearchAttribute(LDAPSearchAttributeKey.DN)).get();                     List<String> memberOf_groupNames = findGroupnamesForUserDistinguishedName(invokingUser, userDistinguishedName);                      List<Group> memberOf_groups = new ArrayList<Group>();                     for(String memberOf_groupName : memberOf_groupNames) {                         memberOf_groups.add(getGroup(invokingUser, memberOf_groupName));                     }*/
comment|//create the user account
specifier|final
name|UserAider
name|userAider
init|=
operator|new
name|UserAider
argument_list|(
name|ID
argument_list|,
name|username
argument_list|,
name|primaryGroup
argument_list|)
decl_stmt|;
comment|//add the member groups
for|for
control|(
specifier|final
name|Group
name|memberOf_group
range|:
name|getGroupMembershipForLdapUser
argument_list|(
name|ctx
argument_list|,
name|broker
argument_list|,
name|ldapUser
argument_list|)
control|)
block|{
name|userAider
operator|.
name|addGroup
argument_list|(
name|memberOf_group
argument_list|)
expr_stmt|;
block|}
comment|//store any requested metadata
for|for
control|(
specifier|final
name|SimpleEntry
argument_list|<
name|AXSchemaType
argument_list|,
name|String
argument_list|>
name|metadata
range|:
name|getMetadataForLdapUser
argument_list|(
name|ldapUser
argument_list|)
control|)
block|{
name|userAider
operator|.
name|setMetadataValue
argument_list|(
name|metadata
operator|.
name|getKey
argument_list|()
argument_list|,
name|metadata
operator|.
name|getValue
argument_list|()
argument_list|)
expr_stmt|;
block|}
specifier|final
name|Account
name|account
init|=
name|getSecurityManager
argument_list|()
operator|.
name|addAccount
argument_list|(
name|userAider
argument_list|)
decl_stmt|;
comment|//LDAPAccountImpl account = sm.addAccount(instantiateAccount(ID, username));
comment|//TODO expand to a general method that rewrites the useraider based on the realTransformation
comment|/*                     boolean updatedAccount = false;                     if(ensureContextFactory().getTransformationContext() != null){                         List<String> additionalGroupNames = ensureContextFactory().getTransformationContext().getAdditionalGroups();                         if(additionalGroupNames != null) {                             for(String additionalGroupName : additionalGroupNames) {                                 Group additionalGroup = getSecurityManager().getGroup(invokingUser, ensureCase(additionalGroupName));                                 if(additionalGroup != null) {                                     account.addGroup(additionalGroup);                                     updatedAccount = true;                                 }                             }                         }                     }                     if(updatedAccount) {                         boolean updated = getSecurityManager().updateAccount(invokingUser, account);                         if(!updated) {                             LOG.error("Could not update account");                         }                     }*/
return|return
name|account
return|;
block|}
argument_list|)
return|;
block|}
catch|catch
parameter_list|(
specifier|final
name|Exception
name|e
parameter_list|)
block|{
if|if
condition|(
name|LOG
operator|.
name|isDebugEnabled
argument_list|()
condition|)
block|{
name|LOG
operator|.
name|debug
argument_list|(
name|e
argument_list|)
expr_stmt|;
block|}
throw|throw
operator|new
name|AuthenticationException
argument_list|(
name|AuthenticationException
operator|.
name|UNNOWN_EXCEPTION
argument_list|,
name|e
operator|.
name|getMessage
argument_list|()
argument_list|,
name|e
argument_list|)
throw|;
block|}
block|}
specifier|private
interface|interface
name|LDAPFunction
parameter_list|<
name|R
parameter_list|>
extends|extends
name|BiFunction3E
argument_list|<
name|LdapContext
argument_list|,
name|DBBroker
argument_list|,
name|R
argument_list|,
name|EXistException
argument_list|,
name|PermissionDeniedException
argument_list|,
name|NamingException
argument_list|>
block|{}
specifier|private
parameter_list|<
name|R
parameter_list|>
name|R
name|executeAsSystemUser
parameter_list|(
specifier|final
name|LdapContext
name|ctx
parameter_list|,
specifier|final
name|LDAPFunction
argument_list|<
name|R
argument_list|>
name|ldapFunction
parameter_list|)
throws|throws
name|EXistException
throws|,
name|PermissionDeniedException
throws|,
name|NamingException
block|{
try|try
init|(
specifier|final
name|DBBroker
name|broker
init|=
name|getDatabase
argument_list|()
operator|.
name|get
argument_list|(
name|Optional
operator|.
name|of
argument_list|(
name|getSecurityManager
argument_list|()
operator|.
name|getSystemSubject
argument_list|()
argument_list|)
argument_list|)
init|)
block|{
comment|//perform as SYSTEM user
return|return
name|ldapFunction
operator|.
name|apply
argument_list|(
name|ctx
argument_list|,
name|broker
argument_list|)
return|;
block|}
block|}
specifier|private
name|Group
name|createGroupInDatabase
parameter_list|(
specifier|final
name|DBBroker
name|broker
parameter_list|,
specifier|final
name|String
name|groupname
parameter_list|)
throws|throws
name|AuthenticationException
block|{
try|try
block|{
comment|//return sm.addGroup(instantiateGroup(this, groupname));
return|return
name|getSecurityManager
argument_list|()
operator|.
name|addGroup
argument_list|(
name|broker
argument_list|,
operator|new
name|GroupAider
argument_list|(
name|ID
argument_list|,
name|groupname
argument_list|)
argument_list|)
return|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|AuthenticationException
argument_list|(
name|AuthenticationException
operator|.
name|UNNOWN_EXCEPTION
argument_list|,
name|e
operator|.
name|getMessage
argument_list|()
argument_list|,
name|e
argument_list|)
throw|;
block|}
block|}
specifier|private
name|LdapContext
name|getContext
parameter_list|(
annotation|@
name|Nullable
specifier|final
name|Subject
name|invokingUser
parameter_list|)
throws|throws
name|NamingException
block|{
return|return
name|getContext
argument_list|(
name|Optional
operator|.
name|ofNullable
argument_list|(
name|invokingUser
argument_list|)
argument_list|)
return|;
block|}
specifier|private
name|LdapContext
name|getContext
parameter_list|(
specifier|final
name|Optional
argument_list|<
name|Subject
argument_list|>
name|invokingUser
parameter_list|)
throws|throws
name|NamingException
block|{
specifier|final
name|Optional
argument_list|<
name|Tuple2
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
argument_list|>
name|credentials
init|=
name|invokingUser
operator|.
name|filter
argument_list|(
name|subject
lambda|->
name|subject
operator|instanceof
name|AuthenticatedLdapSubjectAccreditedImpl
argument_list|)
operator|.
name|map
argument_list|(
name|subject
lambda|->
operator|(
name|AuthenticatedLdapSubjectAccreditedImpl
operator|)
name|subject
argument_list|)
operator|.
name|map
argument_list|(
name|subject
lambda|->
name|Tuple
argument_list|(
name|subject
operator|.
name|getUsername
argument_list|()
argument_list|,
name|subject
operator|.
name|getAuthenticatedCredentials
argument_list|()
argument_list|)
argument_list|)
decl_stmt|;
return|return
name|getContextWithCredentials
argument_list|(
name|credentials
argument_list|)
return|;
block|}
comment|/**      * Gets an LDAP Context for the provided user details,      * or if none are provided the default configured      * credentials are used.      *      * @param optCredentials Explicit credentials      * @return An LDAP Context      */
specifier|private
name|LdapContext
name|getContextWithCredentials
parameter_list|(
specifier|final
name|Optional
argument_list|<
name|Tuple2
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
argument_list|>
name|optCredentials
parameter_list|)
throws|throws
name|NamingException
block|{
specifier|final
name|LdapContextFactory
name|ctxFactory
init|=
name|ensureContextFactory
argument_list|()
decl_stmt|;
specifier|final
name|Tuple2
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|credentials
init|=
name|optCredentials
operator|.
name|orElseGet
argument_list|(
parameter_list|()
lambda|->
name|defaultCredentials
argument_list|(
name|ctxFactory
argument_list|)
argument_list|)
decl_stmt|;
return|return
name|ctxFactory
operator|.
name|getLdapContext
argument_list|(
name|credentials
operator|.
name|_1
argument_list|,
name|credentials
operator|.
name|_2
argument_list|,
literal|null
argument_list|)
return|;
block|}
specifier|private
name|Tuple2
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|defaultCredentials
parameter_list|(
specifier|final
name|LdapContextFactory
name|ctxFactory
parameter_list|)
block|{
specifier|final
name|LDAPSearchContext
name|searchCtx
init|=
name|ctxFactory
operator|.
name|getSearch
argument_list|()
decl_stmt|;
return|return
name|Tuple
argument_list|(
name|searchCtx
operator|.
name|getDefaultUsername
argument_list|()
argument_list|,
name|searchCtx
operator|.
name|getDefaultPassword
argument_list|()
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
specifier|final
specifier|synchronized
name|Account
name|getAccount
parameter_list|(
name|String
name|name
parameter_list|)
block|{
name|name
operator|=
name|ensureCase
argument_list|(
name|name
argument_list|)
expr_stmt|;
comment|//first attempt to get the cached account
specifier|final
name|Account
name|acct
init|=
name|super
operator|.
name|getAccount
argument_list|(
name|name
argument_list|)
decl_stmt|;
if|if
condition|(
name|acct
operator|!=
literal|null
condition|)
block|{
return|return
name|acct
return|;
block|}
else|else
block|{
name|LdapContext
name|ctx
init|=
literal|null
decl_stmt|;
try|try
block|{
name|ctx
operator|=
name|getContext
argument_list|(
name|getSecurityManager
argument_list|()
operator|.
name|getDatabase
argument_list|()
operator|.
name|getActiveBroker
argument_list|()
operator|.
name|getCurrentSubject
argument_list|()
argument_list|)
expr_stmt|;
return|return
name|getAccount
argument_list|(
name|ctx
argument_list|,
name|name
argument_list|)
return|;
block|}
catch|catch
parameter_list|(
specifier|final
name|NamingException
name|ne
parameter_list|)
block|{
if|if
condition|(
name|LOG
operator|.
name|isDebugEnabled
argument_list|()
condition|)
block|{
name|LOG
operator|.
name|debug
argument_list|(
name|ne
operator|.
name|getMessage
argument_list|()
argument_list|,
name|ne
argument_list|)
expr_stmt|;
block|}
name|LOG
operator|.
name|error
argument_list|(
operator|new
name|AuthenticationException
argument_list|(
name|AuthenticationException
operator|.
name|UNNOWN_EXCEPTION
argument_list|,
name|ne
operator|.
name|getMessage
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
return|return
literal|null
return|;
block|}
finally|finally
block|{
if|if
condition|(
name|ctx
operator|!=
literal|null
condition|)
block|{
name|LdapUtils
operator|.
name|closeContext
argument_list|(
name|ctx
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
specifier|private
specifier|synchronized
name|Account
name|getAccount
parameter_list|(
specifier|final
name|LdapContext
name|ctx
parameter_list|,
name|String
name|name
parameter_list|)
block|{
name|name
operator|=
name|ensureCase
argument_list|(
name|name
argument_list|)
expr_stmt|;
if|if
condition|(
name|LOG
operator|.
name|isDebugEnabled
argument_list|()
condition|)
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"Get request for account '"
operator|+
name|name
operator|+
literal|"'."
argument_list|)
expr_stmt|;
block|}
comment|//first attempt to get the cached account
specifier|final
name|Account
name|acct
init|=
name|super
operator|.
name|getAccount
argument_list|(
name|name
argument_list|)
decl_stmt|;
if|if
condition|(
name|acct
operator|!=
literal|null
condition|)
block|{
if|if
condition|(
name|LOG
operator|.
name|isDebugEnabled
argument_list|()
condition|)
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"Cached used."
argument_list|)
expr_stmt|;
block|}
comment|//XXX: synchronize with LDAP
return|return
name|acct
return|;
block|}
else|else
block|{
comment|//if the account is not cached, we should try and find it in LDAP and cache it if it exists
try|try
block|{
comment|//do the lookup
specifier|final
name|SearchResult
name|ldapUser
init|=
name|findAccountByAccountName
argument_list|(
name|ctx
argument_list|,
name|name
argument_list|)
decl_stmt|;
if|if
condition|(
name|LOG
operator|.
name|isDebugEnabled
argument_list|()
condition|)
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"LDAP search return '"
operator|+
name|ldapUser
operator|+
literal|"'."
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|ldapUser
operator|==
literal|null
condition|)
block|{
return|return
literal|null
return|;
block|}
else|else
block|{
comment|//found a user from ldap so cache them and return
try|try
block|{
specifier|final
name|String
name|primaryGroupSID
init|=
name|getPrimaryGroupSID
argument_list|(
name|ldapUser
argument_list|)
decl_stmt|;
specifier|final
name|String
name|primaryGroup
init|=
name|findGroupBySID
argument_list|(
name|ctx
argument_list|,
name|primaryGroupSID
argument_list|)
decl_stmt|;
if|if
condition|(
name|LOG
operator|.
name|isDebugEnabled
argument_list|()
condition|)
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"LDAP search for primary group by SID '"
operator|+
name|primaryGroupSID
operator|+
literal|"', found '"
operator|+
name|primaryGroup
operator|+
literal|"'."
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|primaryGroup
operator|==
literal|null
condition|)
block|{
comment|//or exception?
return|return
literal|null
return|;
block|}
return|return
name|createAccountInDatabase
argument_list|(
name|ctx
argument_list|,
name|name
argument_list|,
name|ldapUser
argument_list|,
name|ensureCase
argument_list|(
name|primaryGroup
argument_list|)
argument_list|)
return|;
comment|//registerAccount(acct); //TODO do we need this
block|}
catch|catch
parameter_list|(
specifier|final
name|AuthenticationException
name|ae
parameter_list|)
block|{
name|LOG
operator|.
name|error
argument_list|(
name|ae
operator|.
name|getMessage
argument_list|()
argument_list|,
name|ae
argument_list|)
expr_stmt|;
return|return
literal|null
return|;
block|}
block|}
block|}
catch|catch
parameter_list|(
specifier|final
name|NamingException
name|ne
parameter_list|)
block|{
if|if
condition|(
name|LOG
operator|.
name|isDebugEnabled
argument_list|()
condition|)
block|{
name|LOG
operator|.
name|debug
argument_list|(
name|ne
operator|.
name|getMessage
argument_list|()
argument_list|,
name|ne
argument_list|)
expr_stmt|;
block|}
comment|//LOG.error(new AuthenticationException(AuthenticationException.UNNOWN_EXCEPTION, ne.getMessage()));
return|return
literal|null
return|;
block|}
block|}
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|hasAccount
parameter_list|(
specifier|final
name|String
name|name
parameter_list|)
block|{
return|return
name|getAccount
argument_list|(
name|name
argument_list|)
operator|!=
literal|null
return|;
block|}
comment|/**      * The binary data is in form:      * byte[0] - revision level      * byte[1] - count of sub-authorities      * byte[2-7] - 48 bit authority (big-endian)      * and then count x 32 bit sub authorities (little-endian)      *      * The String value is: S-Revision-Authority-SubAuthority[n]...      *      * http://forums.oracle.com/forums/thread.jspa?threadID=1155740&tstart=0      */
specifier|private
specifier|static
name|String
name|decodeSID
parameter_list|(
specifier|final
name|byte
index|[]
name|sid
parameter_list|)
block|{
specifier|final
name|StringBuilder
name|strSid
init|=
operator|new
name|StringBuilder
argument_list|(
literal|"S-"
argument_list|)
decl_stmt|;
comment|// get version
specifier|final
name|int
name|revision
init|=
name|sid
index|[
literal|0
index|]
decl_stmt|;
name|strSid
operator|.
name|append
argument_list|(
name|Integer
operator|.
name|toString
argument_list|(
name|revision
argument_list|)
argument_list|)
expr_stmt|;
comment|//next byte is the count of sub-authorities
specifier|final
name|int
name|countSubAuths
init|=
name|sid
index|[
literal|1
index|]
operator|&
literal|0xFF
decl_stmt|;
comment|//get the authority
name|long
name|authority
init|=
literal|0
decl_stmt|;
comment|//String rid = "";
for|for
control|(
name|int
name|i
init|=
literal|2
init|;
name|i
operator|<=
literal|7
condition|;
name|i
operator|++
control|)
block|{
name|authority
operator||=
operator|(
operator|(
name|long
operator|)
name|sid
index|[
name|i
index|]
operator|)
operator|<<
operator|(
literal|8
operator|*
operator|(
literal|5
operator|-
operator|(
name|i
operator|-
literal|2
operator|)
operator|)
operator|)
expr_stmt|;
block|}
name|strSid
operator|.
name|append
argument_list|(
literal|"-"
argument_list|)
expr_stmt|;
name|strSid
operator|.
name|append
argument_list|(
name|Long
operator|.
name|toHexString
argument_list|(
name|authority
argument_list|)
argument_list|)
expr_stmt|;
comment|//iterate all the sub-auths
name|int
name|offset
init|=
literal|8
decl_stmt|;
name|int
name|size
init|=
literal|4
decl_stmt|;
comment|//4 bytes for each sub auth
for|for
control|(
name|int
name|j
init|=
literal|0
init|;
name|j
operator|<
name|countSubAuths
condition|;
name|j
operator|++
control|)
block|{
name|long
name|subAuthority
init|=
literal|0
decl_stmt|;
for|for
control|(
name|int
name|k
init|=
literal|0
init|;
name|k
operator|<
name|size
condition|;
name|k
operator|++
control|)
block|{
name|subAuthority
operator||=
operator|(
name|long
operator|)
operator|(
name|sid
index|[
name|offset
operator|+
name|k
index|]
operator|&
literal|0xFF
operator|)
operator|<<
operator|(
literal|8
operator|*
name|k
operator|)
expr_stmt|;
block|}
name|strSid
operator|.
name|append
argument_list|(
literal|"-"
argument_list|)
expr_stmt|;
name|strSid
operator|.
name|append
argument_list|(
name|subAuthority
argument_list|)
expr_stmt|;
name|offset
operator|+=
name|size
expr_stmt|;
block|}
return|return
name|strSid
operator|.
name|toString
argument_list|()
return|;
block|}
specifier|private
name|String
name|getPrimaryGroupSID
parameter_list|(
specifier|final
name|SearchResult
name|ldapUser
parameter_list|)
throws|throws
name|NamingException
block|{
specifier|final
name|LDAPSearchContext
name|search
init|=
name|ensureContextFactory
argument_list|()
operator|.
name|getSearch
argument_list|()
decl_stmt|;
specifier|final
name|Object
name|objSID
init|=
name|ldapUser
operator|.
name|getAttributes
argument_list|()
operator|.
name|get
argument_list|(
name|search
operator|.
name|getSearchAccount
argument_list|()
operator|.
name|getSearchAttribute
argument_list|(
name|LDAPSearchAttributeKey
operator|.
name|OBJECT_SID
argument_list|)
argument_list|)
operator|.
name|get
argument_list|()
decl_stmt|;
specifier|final
name|String
name|strObjectSid
decl_stmt|;
if|if
condition|(
name|objSID
operator|instanceof
name|String
condition|)
block|{
name|strObjectSid
operator|=
name|objSID
operator|.
name|toString
argument_list|()
expr_stmt|;
block|}
else|else
block|{
name|strObjectSid
operator|=
name|decodeSID
argument_list|(
operator|(
name|byte
index|[]
operator|)
name|objSID
argument_list|)
expr_stmt|;
block|}
specifier|final
name|String
name|strPrimaryGroupID
init|=
operator|(
name|String
operator|)
name|ldapUser
operator|.
name|getAttributes
argument_list|()
operator|.
name|get
argument_list|(
name|search
operator|.
name|getSearchAccount
argument_list|()
operator|.
name|getSearchAttribute
argument_list|(
name|LDAPSearchAttributeKey
operator|.
name|PRIMARY_GROUP_ID
argument_list|)
argument_list|)
operator|.
name|get
argument_list|()
decl_stmt|;
return|return
name|strObjectSid
operator|.
name|substring
argument_list|(
literal|0
argument_list|,
name|strObjectSid
operator|.
name|lastIndexOf
argument_list|(
literal|'-'
argument_list|)
operator|+
literal|1
argument_list|)
operator|+
name|strPrimaryGroupID
return|;
block|}
specifier|public
specifier|final
specifier|synchronized
name|Group
name|getGroup
parameter_list|(
specifier|final
name|Subject
name|invokingUser
parameter_list|,
specifier|final
name|DBBroker
name|broker
parameter_list|,
name|String
name|name
parameter_list|)
block|{
name|name
operator|=
name|ensureCase
argument_list|(
name|name
argument_list|)
expr_stmt|;
specifier|final
name|Group
name|grp
init|=
name|getGroup
argument_list|(
name|name
argument_list|)
decl_stmt|;
if|if
condition|(
name|grp
operator|!=
literal|null
condition|)
block|{
return|return
name|grp
return|;
block|}
else|else
block|{
comment|//if the group is not cached, we should try and find it in LDAP and cache it if it exists
name|LdapContext
name|ctx
init|=
literal|null
decl_stmt|;
try|try
block|{
name|ctx
operator|=
name|getContext
argument_list|(
name|invokingUser
argument_list|)
expr_stmt|;
return|return
name|getGroup
argument_list|(
name|ctx
argument_list|,
name|broker
argument_list|,
name|name
argument_list|)
return|;
block|}
catch|catch
parameter_list|(
specifier|final
name|NamingException
name|ne
parameter_list|)
block|{
name|LOG
operator|.
name|error
argument_list|(
operator|new
name|AuthenticationException
argument_list|(
name|AuthenticationException
operator|.
name|UNNOWN_EXCEPTION
argument_list|,
name|ne
operator|.
name|getMessage
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
return|return
literal|null
return|;
block|}
finally|finally
block|{
if|if
condition|(
name|ctx
operator|!=
literal|null
condition|)
block|{
name|LdapUtils
operator|.
name|closeContext
argument_list|(
name|ctx
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
specifier|private
specifier|synchronized
name|Group
name|getGroup
parameter_list|(
specifier|final
name|LdapContext
name|ctx
parameter_list|,
specifier|final
name|DBBroker
name|broker
parameter_list|,
specifier|final
name|String
name|name
parameter_list|)
block|{
if|if
condition|(
name|name
operator|==
literal|null
condition|)
block|{
return|return
literal|null
return|;
block|}
specifier|final
name|String
name|gName
init|=
name|ensureCase
argument_list|(
name|name
argument_list|)
decl_stmt|;
specifier|final
name|Group
name|grp
init|=
name|getGroup
argument_list|(
name|gName
argument_list|)
decl_stmt|;
if|if
condition|(
name|grp
operator|!=
literal|null
condition|)
block|{
return|return
name|grp
return|;
block|}
else|else
block|{
comment|//if the group is not cached, we should try and find it in LDAP and cache it if it exists
try|try
block|{
comment|//do the lookup
specifier|final
name|SearchResult
name|ldapGroup
init|=
name|findGroupByGroupName
argument_list|(
name|ctx
argument_list|,
name|removeDomainPostfix
argument_list|(
name|gName
argument_list|)
argument_list|)
decl_stmt|;
if|if
condition|(
name|ldapGroup
operator|==
literal|null
condition|)
block|{
return|return
literal|null
return|;
block|}
else|else
block|{
comment|//found a group from ldap so cache them and return
try|try
block|{
return|return
name|createGroupInDatabase
argument_list|(
name|broker
argument_list|,
name|gName
argument_list|)
return|;
comment|//registerGroup(grp); //TODO do we need to do this?
block|}
catch|catch
parameter_list|(
specifier|final
name|AuthenticationException
name|ae
parameter_list|)
block|{
name|LOG
operator|.
name|error
argument_list|(
name|ae
operator|.
name|getMessage
argument_list|()
argument_list|,
name|ae
argument_list|)
expr_stmt|;
return|return
literal|null
return|;
block|}
block|}
block|}
catch|catch
parameter_list|(
specifier|final
name|NamingException
name|ne
parameter_list|)
block|{
name|LOG
operator|.
name|error
argument_list|(
operator|new
name|AuthenticationException
argument_list|(
name|AuthenticationException
operator|.
name|UNNOWN_EXCEPTION
argument_list|,
name|ne
operator|.
name|getMessage
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
return|return
literal|null
return|;
block|}
block|}
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|hasGroup
parameter_list|(
specifier|final
name|String
name|name
parameter_list|)
block|{
return|return
name|getGroup
argument_list|(
operator|(
name|Subject
operator|)
literal|null
argument_list|,
name|getSecurityManager
argument_list|()
operator|.
name|getDatabase
argument_list|()
operator|.
name|getActiveBroker
argument_list|()
argument_list|,
name|name
argument_list|)
operator|!=
literal|null
return|;
block|}
specifier|private
name|String
name|addDomainPostfix
parameter_list|(
specifier|final
name|String
name|principalName
parameter_list|)
block|{
name|String
name|name
init|=
name|principalName
decl_stmt|;
if|if
condition|(
operator|!
name|name
operator|.
name|contains
argument_list|(
literal|"@"
argument_list|)
condition|)
block|{
name|name
operator|+=
literal|'@'
operator|+
name|ensureContextFactory
argument_list|()
operator|.
name|getDomain
argument_list|()
expr_stmt|;
block|}
return|return
name|name
return|;
block|}
specifier|private
name|String
name|removeDomainPostfix
parameter_list|(
specifier|final
name|String
name|principalName
parameter_list|)
block|{
name|String
name|name
init|=
name|principalName
decl_stmt|;
if|if
condition|(
name|name
operator|.
name|contains
argument_list|(
literal|"@"
argument_list|)
operator|&&
name|name
operator|.
name|endsWith
argument_list|(
name|ensureContextFactory
argument_list|()
operator|.
name|getDomain
argument_list|()
argument_list|)
condition|)
block|{
name|name
operator|=
name|name
operator|.
name|substring
argument_list|(
literal|0
argument_list|,
name|name
operator|.
name|indexOf
argument_list|(
literal|'@'
argument_list|)
argument_list|)
expr_stmt|;
block|}
return|return
name|name
return|;
block|}
specifier|private
name|boolean
name|checkAccountRestrictionList
parameter_list|(
specifier|final
name|String
name|accountname
parameter_list|)
block|{
specifier|final
name|LDAPSearchContext
name|search
init|=
name|ensureContextFactory
argument_list|()
operator|.
name|getSearch
argument_list|()
decl_stmt|;
return|return
name|checkPrincipalRestrictionList
argument_list|(
name|accountname
argument_list|,
name|search
operator|.
name|getSearchAccount
argument_list|()
argument_list|)
return|;
block|}
specifier|private
name|boolean
name|checkGroupRestrictionList
parameter_list|(
specifier|final
name|String
name|groupname
parameter_list|)
block|{
specifier|final
name|LDAPSearchContext
name|search
init|=
name|ensureContextFactory
argument_list|()
operator|.
name|getSearch
argument_list|()
decl_stmt|;
return|return
name|checkPrincipalRestrictionList
argument_list|(
name|groupname
argument_list|,
name|search
operator|.
name|getSearchGroup
argument_list|()
argument_list|)
return|;
block|}
specifier|private
name|boolean
name|checkPrincipalRestrictionList
parameter_list|(
specifier|final
name|String
name|principalName
parameter_list|,
specifier|final
name|AbstractLDAPSearchPrincipal
name|searchPrinciple
parameter_list|)
block|{
name|String
name|name
init|=
name|ensureCase
argument_list|(
name|principalName
argument_list|)
decl_stmt|;
if|if
condition|(
name|name
operator|.
name|indexOf
argument_list|(
literal|'@'
argument_list|)
operator|>
operator|-
literal|1
condition|)
block|{
name|name
operator|=
name|name
operator|.
name|substring
argument_list|(
literal|0
argument_list|,
name|name
operator|.
name|indexOf
argument_list|(
literal|'@'
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|List
argument_list|<
name|String
argument_list|>
name|blackList
init|=
literal|null
decl_stmt|;
if|if
condition|(
name|searchPrinciple
operator|.
name|getBlackList
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|blackList
operator|=
name|searchPrinciple
operator|.
name|getBlackList
argument_list|()
operator|.
name|getPrincipals
argument_list|()
expr_stmt|;
block|}
name|List
argument_list|<
name|String
argument_list|>
name|whiteList
init|=
literal|null
decl_stmt|;
if|if
condition|(
name|searchPrinciple
operator|.
name|getWhiteList
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|whiteList
operator|=
name|searchPrinciple
operator|.
name|getWhiteList
argument_list|()
operator|.
name|getPrincipals
argument_list|()
expr_stmt|;
block|}
if|if
condition|(
name|blackList
operator|!=
literal|null
condition|)
block|{
for|for
control|(
name|String
name|blackEntry
range|:
name|blackList
control|)
block|{
if|if
condition|(
name|ensureCase
argument_list|(
name|blackEntry
argument_list|)
operator|.
name|equals
argument_list|(
name|name
argument_list|)
condition|)
block|{
return|return
literal|false
return|;
block|}
block|}
block|}
if|if
condition|(
name|whiteList
operator|!=
literal|null
operator|&&
name|whiteList
operator|.
name|size
argument_list|()
operator|>
literal|0
condition|)
block|{
for|for
control|(
name|String
name|whiteEntry
range|:
name|whiteList
control|)
block|{
if|if
condition|(
name|ensureCase
argument_list|(
name|whiteEntry
argument_list|)
operator|.
name|equals
argument_list|(
name|name
argument_list|)
condition|)
block|{
return|return
literal|true
return|;
block|}
block|}
return|return
literal|false
return|;
block|}
return|return
literal|true
return|;
block|}
comment|/**      * Escapes '\', '(', and ')' characters.      *      * @param searchAttribute The search attribute string.      *      * @return the escaped search attribute.      */
specifier|private
name|String
name|escapeSearchAttribute
parameter_list|(
specifier|final
name|String
name|searchAttribute
parameter_list|)
block|{
return|return
name|searchAttribute
operator|.
name|replace
argument_list|(
literal|"\\"
argument_list|,
literal|"\\5c"
argument_list|)
operator|.
name|replace
argument_list|(
literal|"("
argument_list|,
literal|"\\28"
argument_list|)
operator|.
name|replace
argument_list|(
literal|")"
argument_list|,
literal|"\\29"
argument_list|)
return|;
block|}
specifier|private
name|SearchResult
name|findAccountByAccountName
parameter_list|(
specifier|final
name|DirContext
name|ctx
parameter_list|,
specifier|final
name|String
name|accountName
parameter_list|)
throws|throws
name|NamingException
block|{
if|if
condition|(
operator|!
name|checkAccountRestrictionList
argument_list|(
name|accountName
argument_list|)
condition|)
block|{
return|return
literal|null
return|;
block|}
specifier|final
name|String
name|userName
init|=
name|escapeSearchAttribute
argument_list|(
name|removeDomainPostfix
argument_list|(
name|accountName
argument_list|)
argument_list|)
decl_stmt|;
specifier|final
name|LDAPSearchContext
name|search
init|=
name|ensureContextFactory
argument_list|()
operator|.
name|getSearch
argument_list|()
decl_stmt|;
specifier|final
name|SearchAttribute
name|sa
init|=
operator|new
name|SearchAttribute
argument_list|(
name|search
operator|.
name|getSearchAccount
argument_list|()
operator|.
name|getSearchAttribute
argument_list|(
name|LDAPSearchAttributeKey
operator|.
name|NAME
argument_list|)
argument_list|,
name|userName
argument_list|)
decl_stmt|;
specifier|final
name|String
name|searchFilter
init|=
name|buildSearchFilter
argument_list|(
name|search
operator|.
name|getSearchAccount
argument_list|()
operator|.
name|getSearchFilterPrefix
argument_list|()
argument_list|,
name|sa
argument_list|)
decl_stmt|;
specifier|final
name|SearchControls
name|searchControls
init|=
operator|new
name|SearchControls
argument_list|()
decl_stmt|;
name|searchControls
operator|.
name|setSearchScope
argument_list|(
name|SearchControls
operator|.
name|SUBTREE_SCOPE
argument_list|)
expr_stmt|;
specifier|final
name|NamingEnumeration
argument_list|<
name|SearchResult
argument_list|>
name|results
init|=
name|ctx
operator|.
name|search
argument_list|(
name|search
operator|.
name|getBase
argument_list|()
argument_list|,
name|searchFilter
argument_list|,
name|searchControls
argument_list|)
decl_stmt|;
name|SearchResult
name|searchResult
init|=
literal|null
decl_stmt|;
if|if
condition|(
name|results
operator|.
name|hasMoreElements
argument_list|()
condition|)
block|{
name|searchResult
operator|=
name|results
operator|.
name|nextElement
argument_list|()
expr_stmt|;
comment|//make sure there is not another item available, there should be only 1 match
if|if
condition|(
name|results
operator|.
name|hasMoreElements
argument_list|()
condition|)
block|{
name|LOG
operator|.
name|error
argument_list|(
literal|"Matched multiple users for the accountName: "
operator|+
name|accountName
argument_list|)
expr_stmt|;
block|}
block|}
return|return
name|searchResult
return|;
block|}
specifier|private
name|String
name|findGroupBySID
parameter_list|(
specifier|final
name|DirContext
name|ctx
parameter_list|,
specifier|final
name|String
name|sid
parameter_list|)
throws|throws
name|NamingException
block|{
specifier|final
name|LDAPSearchContext
name|search
init|=
name|ensureContextFactory
argument_list|()
operator|.
name|getSearch
argument_list|()
decl_stmt|;
specifier|final
name|SearchAttribute
name|sa
init|=
operator|new
name|SearchAttribute
argument_list|(
name|search
operator|.
name|getSearchGroup
argument_list|()
operator|.
name|getSearchAttribute
argument_list|(
name|LDAPSearchAttributeKey
operator|.
name|OBJECT_SID
argument_list|)
argument_list|,
name|sid
argument_list|)
decl_stmt|;
specifier|final
name|String
name|searchFilter
init|=
name|buildSearchFilter
argument_list|(
name|search
operator|.
name|getSearchGroup
argument_list|()
operator|.
name|getSearchFilterPrefix
argument_list|()
argument_list|,
name|sa
argument_list|)
decl_stmt|;
specifier|final
name|SearchControls
name|searchControls
init|=
operator|new
name|SearchControls
argument_list|()
decl_stmt|;
name|searchControls
operator|.
name|setSearchScope
argument_list|(
name|SearchControls
operator|.
name|SUBTREE_SCOPE
argument_list|)
expr_stmt|;
specifier|final
name|NamingEnumeration
argument_list|<
name|SearchResult
argument_list|>
name|results
init|=
name|ctx
operator|.
name|search
argument_list|(
name|search
operator|.
name|getAbsoluteBase
argument_list|()
argument_list|,
name|searchFilter
argument_list|,
name|searchControls
argument_list|)
decl_stmt|;
if|if
condition|(
name|results
operator|.
name|hasMoreElements
argument_list|()
condition|)
block|{
name|SearchResult
name|searchResult
init|=
name|results
operator|.
name|nextElement
argument_list|()
decl_stmt|;
comment|//make sure there is not another item available, there should be only 1 match
if|if
condition|(
name|results
operator|.
name|hasMoreElements
argument_list|()
condition|)
block|{
name|LOG
operator|.
name|error
argument_list|(
literal|"Matched multiple groups for the group with SID: "
operator|+
name|sid
argument_list|)
expr_stmt|;
return|return
literal|null
return|;
block|}
else|else
block|{
return|return
name|addDomainPostfix
argument_list|(
operator|(
name|String
operator|)
name|searchResult
operator|.
name|getAttributes
argument_list|()
operator|.
name|get
argument_list|(
name|search
operator|.
name|getSearchGroup
argument_list|()
operator|.
name|getSearchAttribute
argument_list|(
name|LDAPSearchAttributeKey
operator|.
name|NAME
argument_list|)
argument_list|)
operator|.
name|get
argument_list|()
argument_list|)
return|;
block|}
block|}
name|LOG
operator|.
name|error
argument_list|(
literal|"Matched no group with SID: "
operator|+
name|sid
argument_list|)
expr_stmt|;
return|return
literal|null
return|;
block|}
specifier|private
annotation|@
name|Nullable
name|SearchResult
name|findGroupByGroupName
parameter_list|(
specifier|final
name|DirContext
name|ctx
parameter_list|,
specifier|final
name|String
name|groupName
parameter_list|)
throws|throws
name|NamingException
block|{
if|if
condition|(
operator|!
name|checkGroupRestrictionList
argument_list|(
name|groupName
argument_list|)
condition|)
block|{
return|return
literal|null
return|;
block|}
specifier|final
name|LDAPSearchContext
name|search
init|=
name|ensureContextFactory
argument_list|()
operator|.
name|getSearch
argument_list|()
decl_stmt|;
specifier|final
name|SearchAttribute
name|sa
init|=
operator|new
name|SearchAttribute
argument_list|(
name|search
operator|.
name|getSearchGroup
argument_list|()
operator|.
name|getSearchAttribute
argument_list|(
name|LDAPSearchAttributeKey
operator|.
name|NAME
argument_list|)
argument_list|,
name|escapeSearchAttribute
argument_list|(
name|groupName
argument_list|)
argument_list|)
decl_stmt|;
specifier|final
name|String
name|searchFilter
init|=
name|buildSearchFilter
argument_list|(
name|search
operator|.
name|getSearchGroup
argument_list|()
operator|.
name|getSearchFilterPrefix
argument_list|()
argument_list|,
name|sa
argument_list|)
decl_stmt|;
specifier|final
name|SearchControls
name|searchControls
init|=
operator|new
name|SearchControls
argument_list|()
decl_stmt|;
name|searchControls
operator|.
name|setSearchScope
argument_list|(
name|SearchControls
operator|.
name|SUBTREE_SCOPE
argument_list|)
expr_stmt|;
specifier|final
name|NamingEnumeration
argument_list|<
name|SearchResult
argument_list|>
name|results
init|=
name|ctx
operator|.
name|search
argument_list|(
name|search
operator|.
name|getAbsoluteBase
argument_list|()
argument_list|,
name|searchFilter
argument_list|,
name|searchControls
argument_list|)
decl_stmt|;
if|if
condition|(
name|results
operator|.
name|hasMoreElements
argument_list|()
condition|)
block|{
specifier|final
name|SearchResult
name|searchResult
init|=
name|results
operator|.
name|nextElement
argument_list|()
decl_stmt|;
comment|//make sure there is not another item available, there should be only 1 match
if|if
condition|(
name|results
operator|.
name|hasMoreElements
argument_list|()
condition|)
block|{
name|LOG
operator|.
name|error
argument_list|(
literal|"Matched multiple groups for the groupName: "
operator|+
name|groupName
argument_list|)
expr_stmt|;
return|return
literal|null
return|;
block|}
else|else
block|{
return|return
name|searchResult
return|;
block|}
block|}
name|LOG
operator|.
name|error
argument_list|(
literal|"Matched no groups for the groupName: "
operator|+
name|groupName
argument_list|)
expr_stmt|;
return|return
literal|null
return|;
block|}
comment|// configurable methods
annotation|@
name|Override
specifier|public
name|boolean
name|isConfigured
parameter_list|()
block|{
return|return
operator|(
name|configuration
operator|!=
literal|null
operator|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|Configuration
name|getConfiguration
parameter_list|()
block|{
return|return
name|configuration
return|;
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|updateAccount
parameter_list|(
specifier|final
name|Account
name|account
parameter_list|)
throws|throws
name|PermissionDeniedException
throws|,
name|EXistException
block|{
return|return
name|super
operator|.
name|updateAccount
argument_list|(
name|account
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|deleteAccount
parameter_list|(
specifier|final
name|Account
name|account
parameter_list|)
block|{
comment|// TODO we dont support writting to LDAP
comment|//XXX: delete local cache?
return|return
literal|false
return|;
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|updateGroup
parameter_list|(
specifier|final
name|Group
name|group
parameter_list|)
throws|throws
name|PermissionDeniedException
throws|,
name|EXistException
block|{
return|return
name|super
operator|.
name|updateGroup
argument_list|(
name|group
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|deleteGroup
parameter_list|(
specifier|final
name|Group
name|group
parameter_list|)
block|{
comment|//XXX: delete local cache?
return|return
literal|false
return|;
block|}
specifier|private
class|class
name|SearchAttribute
block|{
specifier|private
specifier|final
name|String
name|name
decl_stmt|;
specifier|private
specifier|final
name|String
name|value
decl_stmt|;
name|SearchAttribute
parameter_list|(
specifier|final
name|String
name|name
parameter_list|,
specifier|final
name|String
name|value
parameter_list|)
block|{
name|this
operator|.
name|name
operator|=
name|name
expr_stmt|;
name|this
operator|.
name|value
operator|=
name|value
expr_stmt|;
block|}
specifier|public
name|String
name|getName
parameter_list|()
block|{
return|return
name|name
return|;
block|}
specifier|public
name|String
name|getValue
parameter_list|()
block|{
return|return
name|value
return|;
block|}
block|}
specifier|private
name|String
name|buildSearchFilter
parameter_list|(
specifier|final
name|String
name|searchPrefix
parameter_list|,
specifier|final
name|SearchAttribute
name|sa
parameter_list|)
block|{
specifier|final
name|StringBuilder
name|builder
init|=
operator|new
name|StringBuilder
argument_list|()
decl_stmt|;
name|builder
operator|.
name|append
argument_list|(
literal|"("
argument_list|)
expr_stmt|;
name|builder
operator|.
name|append
argument_list|(
name|buildSearchCriteria
argument_list|(
name|searchPrefix
argument_list|)
argument_list|)
expr_stmt|;
if|if
condition|(
name|sa
operator|.
name|getName
argument_list|()
operator|!=
literal|null
operator|&&
name|sa
operator|.
name|getValue
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|builder
operator|.
name|append
argument_list|(
literal|"("
argument_list|)
expr_stmt|;
name|builder
operator|.
name|append
argument_list|(
name|sa
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
name|builder
operator|.
name|append
argument_list|(
literal|"="
argument_list|)
expr_stmt|;
name|builder
operator|.
name|append
argument_list|(
name|sa
operator|.
name|getValue
argument_list|()
argument_list|)
expr_stmt|;
name|builder
operator|.
name|append
argument_list|(
literal|")"
argument_list|)
expr_stmt|;
block|}
name|builder
operator|.
name|append
argument_list|(
literal|")"
argument_list|)
expr_stmt|;
return|return
name|builder
operator|.
name|toString
argument_list|()
return|;
block|}
specifier|private
name|String
name|buildSearchFilterUnion
parameter_list|(
specifier|final
name|String
name|searchPrefix
parameter_list|,
specifier|final
name|List
argument_list|<
name|SearchAttribute
argument_list|>
name|searchAttributes
parameter_list|)
block|{
specifier|final
name|StringBuilder
name|builder
init|=
operator|new
name|StringBuilder
argument_list|()
decl_stmt|;
name|builder
operator|.
name|append
argument_list|(
literal|"("
argument_list|)
expr_stmt|;
name|builder
operator|.
name|append
argument_list|(
name|buildSearchCriteria
argument_list|(
name|searchPrefix
argument_list|)
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|searchAttributes
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|builder
operator|.
name|append
argument_list|(
literal|"(|"
argument_list|)
expr_stmt|;
for|for
control|(
specifier|final
name|SearchAttribute
name|sa
range|:
name|searchAttributes
control|)
block|{
name|builder
operator|.
name|append
argument_list|(
literal|"("
argument_list|)
expr_stmt|;
name|builder
operator|.
name|append
argument_list|(
name|sa
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
name|builder
operator|.
name|append
argument_list|(
literal|"="
argument_list|)
expr_stmt|;
name|builder
operator|.
name|append
argument_list|(
name|sa
operator|.
name|getValue
argument_list|()
argument_list|)
expr_stmt|;
name|builder
operator|.
name|append
argument_list|(
literal|")"
argument_list|)
expr_stmt|;
block|}
name|builder
operator|.
name|append
argument_list|(
literal|")"
argument_list|)
expr_stmt|;
block|}
name|builder
operator|.
name|append
argument_list|(
literal|")"
argument_list|)
expr_stmt|;
return|return
name|builder
operator|.
name|toString
argument_list|()
return|;
block|}
specifier|private
name|String
name|buildSearchCriteria
parameter_list|(
specifier|final
name|String
name|searchPrefix
parameter_list|)
block|{
return|return
literal|"&("
operator|+
name|searchPrefix
operator|+
literal|")"
return|;
block|}
annotation|@
name|Override
specifier|public
name|List
argument_list|<
name|String
argument_list|>
name|findUsernamesWhereNameStarts
parameter_list|(
name|String
name|startsWith
parameter_list|)
block|{
name|startsWith
operator|=
name|escapeSearchAttribute
argument_list|(
name|ensureCase
argument_list|(
name|startsWith
argument_list|)
argument_list|)
expr_stmt|;
specifier|final
name|List
argument_list|<
name|String
argument_list|>
name|usernames
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
name|LdapContext
name|ctx
init|=
literal|null
decl_stmt|;
try|try
block|{
name|ctx
operator|=
name|getContext
argument_list|(
name|getSecurityManager
argument_list|()
operator|.
name|getCurrentSubject
argument_list|()
argument_list|)
expr_stmt|;
specifier|final
name|LDAPSearchContext
name|search
init|=
name|ensureContextFactory
argument_list|()
operator|.
name|getSearch
argument_list|()
decl_stmt|;
specifier|final
name|SearchAttribute
name|sa
init|=
operator|new
name|SearchAttribute
argument_list|(
name|search
operator|.
name|getSearchAccount
argument_list|()
operator|.
name|getMetadataSearchAttribute
argument_list|(
name|AXSchemaType
operator|.
name|FULLNAME
argument_list|)
argument_list|,
name|startsWith
operator|+
literal|"*"
argument_list|)
decl_stmt|;
specifier|final
name|String
name|searchFilter
init|=
name|buildSearchFilter
argument_list|(
name|search
operator|.
name|getSearchAccount
argument_list|()
operator|.
name|getSearchFilterPrefix
argument_list|()
argument_list|,
name|sa
argument_list|)
decl_stmt|;
specifier|final
name|SearchControls
name|searchControls
init|=
operator|new
name|SearchControls
argument_list|()
decl_stmt|;
name|searchControls
operator|.
name|setSearchScope
argument_list|(
name|SearchControls
operator|.
name|SUBTREE_SCOPE
argument_list|)
expr_stmt|;
name|searchControls
operator|.
name|setReturningAttributes
argument_list|(
operator|new
name|String
index|[]
block|{
name|search
operator|.
name|getSearchAccount
argument_list|()
operator|.
name|getSearchAttribute
argument_list|(
name|LDAPSearchAttributeKey
operator|.
name|NAME
argument_list|)
block|}
argument_list|)
expr_stmt|;
specifier|final
name|NamingEnumeration
argument_list|<
name|SearchResult
argument_list|>
name|results
init|=
name|ctx
operator|.
name|search
argument_list|(
name|search
operator|.
name|getBase
argument_list|()
argument_list|,
name|searchFilter
argument_list|,
name|searchControls
argument_list|)
decl_stmt|;
while|while
condition|(
name|results
operator|.
name|hasMoreElements
argument_list|()
condition|)
block|{
specifier|final
name|SearchResult
name|searchResult
init|=
name|results
operator|.
name|nextElement
argument_list|()
decl_stmt|;
specifier|final
name|String
name|username
init|=
name|ensureCase
argument_list|(
name|addDomainPostfix
argument_list|(
operator|(
name|String
operator|)
name|searchResult
operator|.
name|getAttributes
argument_list|()
operator|.
name|get
argument_list|(
name|search
operator|.
name|getSearchAccount
argument_list|()
operator|.
name|getSearchAttribute
argument_list|(
name|LDAPSearchAttributeKey
operator|.
name|NAME
argument_list|)
argument_list|)
operator|.
name|get
argument_list|()
argument_list|)
argument_list|)
decl_stmt|;
if|if
condition|(
name|checkAccountRestrictionList
argument_list|(
name|username
argument_list|)
condition|)
block|{
name|usernames
operator|.
name|add
argument_list|(
name|username
argument_list|)
expr_stmt|;
block|}
block|}
block|}
catch|catch
parameter_list|(
specifier|final
name|NamingException
name|ne
parameter_list|)
block|{
name|LOG
operator|.
name|error
argument_list|(
operator|new
name|AuthenticationException
argument_list|(
name|AuthenticationException
operator|.
name|UNNOWN_EXCEPTION
argument_list|,
name|ne
operator|.
name|getMessage
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
if|if
condition|(
name|ctx
operator|!=
literal|null
condition|)
block|{
name|LdapUtils
operator|.
name|closeContext
argument_list|(
name|ctx
argument_list|)
expr_stmt|;
block|}
block|}
return|return
name|usernames
return|;
block|}
annotation|@
name|Override
specifier|public
name|List
argument_list|<
name|String
argument_list|>
name|findUsernamesWhereNamePartStarts
parameter_list|(
specifier|final
name|String
name|startsWith
parameter_list|)
block|{
specifier|final
name|String
name|sWith
init|=
name|escapeSearchAttribute
argument_list|(
name|ensureCase
argument_list|(
name|startsWith
argument_list|)
argument_list|)
decl_stmt|;
specifier|final
name|List
argument_list|<
name|String
argument_list|>
name|usernames
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
name|LdapContext
name|ctx
init|=
literal|null
decl_stmt|;
try|try
block|{
name|ctx
operator|=
name|getContext
argument_list|(
name|getSecurityManager
argument_list|()
operator|.
name|getCurrentSubject
argument_list|()
argument_list|)
expr_stmt|;
specifier|final
name|LDAPSearchContext
name|search
init|=
name|ensureContextFactory
argument_list|()
operator|.
name|getSearch
argument_list|()
decl_stmt|;
specifier|final
name|SearchAttribute
name|firstNameSa
init|=
operator|new
name|SearchAttribute
argument_list|(
name|search
operator|.
name|getSearchAccount
argument_list|()
operator|.
name|getMetadataSearchAttribute
argument_list|(
name|AXSchemaType
operator|.
name|FIRSTNAME
argument_list|)
argument_list|,
name|sWith
operator|+
literal|"*"
argument_list|)
decl_stmt|;
specifier|final
name|SearchAttribute
name|lastNameSa
init|=
operator|new
name|SearchAttribute
argument_list|(
name|search
operator|.
name|getSearchAccount
argument_list|()
operator|.
name|getMetadataSearchAttribute
argument_list|(
name|AXSchemaType
operator|.
name|LASTNAME
argument_list|)
argument_list|,
name|sWith
operator|+
literal|"*"
argument_list|)
decl_stmt|;
specifier|final
name|List
argument_list|<
name|SearchAttribute
argument_list|>
name|sas
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
name|sas
operator|.
name|add
argument_list|(
name|firstNameSa
argument_list|)
expr_stmt|;
name|sas
operator|.
name|add
argument_list|(
name|lastNameSa
argument_list|)
expr_stmt|;
specifier|final
name|String
name|searchFilter
init|=
name|buildSearchFilterUnion
argument_list|(
name|search
operator|.
name|getSearchAccount
argument_list|()
operator|.
name|getSearchFilterPrefix
argument_list|()
argument_list|,
name|sas
argument_list|)
decl_stmt|;
specifier|final
name|SearchControls
name|searchControls
init|=
operator|new
name|SearchControls
argument_list|()
decl_stmt|;
name|searchControls
operator|.
name|setSearchScope
argument_list|(
name|SearchControls
operator|.
name|SUBTREE_SCOPE
argument_list|)
expr_stmt|;
name|searchControls
operator|.
name|setReturningAttributes
argument_list|(
operator|new
name|String
index|[]
block|{
name|search
operator|.
name|getSearchAccount
argument_list|()
operator|.
name|getSearchAttribute
argument_list|(
name|LDAPSearchAttributeKey
operator|.
name|NAME
argument_list|)
block|}
argument_list|)
expr_stmt|;
specifier|final
name|NamingEnumeration
argument_list|<
name|SearchResult
argument_list|>
name|results
init|=
name|ctx
operator|.
name|search
argument_list|(
name|search
operator|.
name|getBase
argument_list|()
argument_list|,
name|searchFilter
argument_list|,
name|searchControls
argument_list|)
decl_stmt|;
while|while
condition|(
name|results
operator|.
name|hasMoreElements
argument_list|()
condition|)
block|{
specifier|final
name|SearchResult
name|searchResult
init|=
name|results
operator|.
name|nextElement
argument_list|()
decl_stmt|;
specifier|final
name|String
name|username
init|=
name|ensureCase
argument_list|(
name|addDomainPostfix
argument_list|(
operator|(
name|String
operator|)
name|searchResult
operator|.
name|getAttributes
argument_list|()
operator|.
name|get
argument_list|(
name|search
operator|.
name|getSearchAccount
argument_list|()
operator|.
name|getSearchAttribute
argument_list|(
name|LDAPSearchAttributeKey
operator|.
name|NAME
argument_list|)
argument_list|)
operator|.
name|get
argument_list|()
argument_list|)
argument_list|)
decl_stmt|;
if|if
condition|(
name|checkAccountRestrictionList
argument_list|(
name|username
argument_list|)
condition|)
block|{
name|usernames
operator|.
name|add
argument_list|(
name|username
argument_list|)
expr_stmt|;
block|}
block|}
block|}
catch|catch
parameter_list|(
specifier|final
name|NamingException
name|ne
parameter_list|)
block|{
name|LOG
operator|.
name|error
argument_list|(
operator|new
name|AuthenticationException
argument_list|(
name|AuthenticationException
operator|.
name|UNNOWN_EXCEPTION
argument_list|,
name|ne
operator|.
name|getMessage
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
if|if
condition|(
name|ctx
operator|!=
literal|null
condition|)
block|{
name|LdapUtils
operator|.
name|closeContext
argument_list|(
name|ctx
argument_list|)
expr_stmt|;
block|}
block|}
return|return
name|usernames
return|;
block|}
annotation|@
name|Override
specifier|public
name|List
argument_list|<
name|String
argument_list|>
name|findUsernamesWhereUsernameStarts
parameter_list|(
specifier|final
name|String
name|startsWith
parameter_list|)
block|{
specifier|final
name|String
name|sWith
init|=
name|escapeSearchAttribute
argument_list|(
name|ensureCase
argument_list|(
name|startsWith
argument_list|)
argument_list|)
decl_stmt|;
specifier|final
name|List
argument_list|<
name|String
argument_list|>
name|usernames
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
name|LdapContext
name|ctx
init|=
literal|null
decl_stmt|;
try|try
block|{
name|ctx
operator|=
name|getContext
argument_list|(
name|getSecurityManager
argument_list|()
operator|.
name|getCurrentSubject
argument_list|()
argument_list|)
expr_stmt|;
specifier|final
name|LDAPSearchContext
name|search
init|=
name|ensureContextFactory
argument_list|()
operator|.
name|getSearch
argument_list|()
decl_stmt|;
specifier|final
name|SearchAttribute
name|sa
init|=
operator|new
name|SearchAttribute
argument_list|(
name|search
operator|.
name|getSearchAccount
argument_list|()
operator|.
name|getSearchAttribute
argument_list|(
name|LDAPSearchAttributeKey
operator|.
name|NAME
argument_list|)
argument_list|,
name|sWith
operator|+
literal|"*"
argument_list|)
decl_stmt|;
specifier|final
name|String
name|searchFilter
init|=
name|buildSearchFilter
argument_list|(
name|search
operator|.
name|getSearchAccount
argument_list|()
operator|.
name|getSearchFilterPrefix
argument_list|()
argument_list|,
name|sa
argument_list|)
decl_stmt|;
specifier|final
name|SearchControls
name|searchControls
init|=
operator|new
name|SearchControls
argument_list|()
decl_stmt|;
name|searchControls
operator|.
name|setSearchScope
argument_list|(
name|SearchControls
operator|.
name|SUBTREE_SCOPE
argument_list|)
expr_stmt|;
name|searchControls
operator|.
name|setReturningAttributes
argument_list|(
operator|new
name|String
index|[]
block|{
name|search
operator|.
name|getSearchAccount
argument_list|()
operator|.
name|getSearchAttribute
argument_list|(
name|LDAPSearchAttributeKey
operator|.
name|NAME
argument_list|)
block|}
argument_list|)
expr_stmt|;
specifier|final
name|NamingEnumeration
argument_list|<
name|SearchResult
argument_list|>
name|results
init|=
name|ctx
operator|.
name|search
argument_list|(
name|search
operator|.
name|getBase
argument_list|()
argument_list|,
name|searchFilter
argument_list|,
name|searchControls
argument_list|)
decl_stmt|;
while|while
condition|(
name|results
operator|.
name|hasMoreElements
argument_list|()
condition|)
block|{
specifier|final
name|SearchResult
name|searchResult
init|=
name|results
operator|.
name|nextElement
argument_list|()
decl_stmt|;
specifier|final
name|String
name|username
init|=
name|ensureCase
argument_list|(
name|addDomainPostfix
argument_list|(
operator|(
name|String
operator|)
name|searchResult
operator|.
name|getAttributes
argument_list|()
operator|.
name|get
argument_list|(
name|search
operator|.
name|getSearchAccount
argument_list|()
operator|.
name|getSearchAttribute
argument_list|(
name|LDAPSearchAttributeKey
operator|.
name|NAME
argument_list|)
argument_list|)
operator|.
name|get
argument_list|()
argument_list|)
argument_list|)
decl_stmt|;
if|if
condition|(
name|checkAccountRestrictionList
argument_list|(
name|username
argument_list|)
condition|)
block|{
name|usernames
operator|.
name|add
argument_list|(
name|username
argument_list|)
expr_stmt|;
block|}
block|}
block|}
catch|catch
parameter_list|(
specifier|final
name|NamingException
name|ne
parameter_list|)
block|{
name|LOG
operator|.
name|error
argument_list|(
operator|new
name|AuthenticationException
argument_list|(
name|AuthenticationException
operator|.
name|UNNOWN_EXCEPTION
argument_list|,
name|ne
operator|.
name|getMessage
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
if|if
condition|(
name|ctx
operator|!=
literal|null
condition|)
block|{
name|LdapUtils
operator|.
name|closeContext
argument_list|(
name|ctx
argument_list|)
expr_stmt|;
block|}
block|}
return|return
name|usernames
return|;
block|}
specifier|private
name|List
argument_list|<
name|String
argument_list|>
name|findGroupnamesForUserDistinguishedName
parameter_list|(
specifier|final
name|LdapContext
name|ctx
parameter_list|,
specifier|final
name|String
name|userDistinguishedName
parameter_list|)
block|{
specifier|final
name|List
argument_list|<
name|String
argument_list|>
name|groupnames
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
try|try
block|{
specifier|final
name|LDAPSearchContext
name|search
init|=
name|ensureContextFactory
argument_list|()
operator|.
name|getSearch
argument_list|()
decl_stmt|;
specifier|final
name|SearchAttribute
name|sa
init|=
operator|new
name|SearchAttribute
argument_list|(
name|search
operator|.
name|getSearchGroup
argument_list|()
operator|.
name|getSearchAttribute
argument_list|(
name|LDAPSearchAttributeKey
operator|.
name|MEMBER
argument_list|)
argument_list|,
name|escapeSearchAttribute
argument_list|(
name|userDistinguishedName
argument_list|)
argument_list|)
decl_stmt|;
specifier|final
name|String
name|searchFilter
init|=
name|buildSearchFilter
argument_list|(
name|search
operator|.
name|getSearchGroup
argument_list|()
operator|.
name|getSearchFilterPrefix
argument_list|()
argument_list|,
name|sa
argument_list|)
decl_stmt|;
specifier|final
name|SearchControls
name|searchControls
init|=
operator|new
name|SearchControls
argument_list|()
decl_stmt|;
name|searchControls
operator|.
name|setSearchScope
argument_list|(
name|SearchControls
operator|.
name|SUBTREE_SCOPE
argument_list|)
expr_stmt|;
name|searchControls
operator|.
name|setReturningAttributes
argument_list|(
operator|new
name|String
index|[]
block|{
name|search
operator|.
name|getSearchGroup
argument_list|()
operator|.
name|getSearchAttribute
argument_list|(
name|LDAPSearchAttributeKey
operator|.
name|NAME
argument_list|)
block|}
argument_list|)
expr_stmt|;
specifier|final
name|NamingEnumeration
argument_list|<
name|SearchResult
argument_list|>
name|results
init|=
name|ctx
operator|.
name|search
argument_list|(
name|search
operator|.
name|getAbsoluteBase
argument_list|()
argument_list|,
name|searchFilter
argument_list|,
name|searchControls
argument_list|)
decl_stmt|;
while|while
condition|(
name|results
operator|.
name|hasMoreElements
argument_list|()
condition|)
block|{
specifier|final
name|SearchResult
name|searchResult
init|=
name|results
operator|.
name|nextElement
argument_list|()
decl_stmt|;
specifier|final
name|String
name|groupname
init|=
name|ensureCase
argument_list|(
name|addDomainPostfix
argument_list|(
operator|(
name|String
operator|)
name|searchResult
operator|.
name|getAttributes
argument_list|()
operator|.
name|get
argument_list|(
name|search
operator|.
name|getSearchGroup
argument_list|()
operator|.
name|getSearchAttribute
argument_list|(
name|LDAPSearchAttributeKey
operator|.
name|NAME
argument_list|)
argument_list|)
operator|.
name|get
argument_list|()
argument_list|)
argument_list|)
decl_stmt|;
if|if
condition|(
name|checkGroupRestrictionList
argument_list|(
name|groupname
argument_list|)
condition|)
block|{
name|groupnames
operator|.
name|add
argument_list|(
name|groupname
argument_list|)
expr_stmt|;
block|}
block|}
block|}
catch|catch
parameter_list|(
specifier|final
name|NamingException
name|ne
parameter_list|)
block|{
name|LOG
operator|.
name|error
argument_list|(
operator|new
name|AuthenticationException
argument_list|(
name|AuthenticationException
operator|.
name|UNNOWN_EXCEPTION
argument_list|,
name|ne
operator|.
name|getMessage
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
return|return
name|groupnames
return|;
block|}
annotation|@
name|Override
specifier|public
name|List
argument_list|<
name|String
argument_list|>
name|findGroupnamesWhereGroupnameStarts
parameter_list|(
specifier|final
name|String
name|startsWith
parameter_list|)
block|{
specifier|final
name|String
name|sWith
init|=
name|escapeSearchAttribute
argument_list|(
name|ensureCase
argument_list|(
name|startsWith
argument_list|)
argument_list|)
decl_stmt|;
specifier|final
name|List
argument_list|<
name|String
argument_list|>
name|groupnames
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
name|LdapContext
name|ctx
init|=
literal|null
decl_stmt|;
try|try
block|{
name|ctx
operator|=
name|getContext
argument_list|(
name|getSecurityManager
argument_list|()
operator|.
name|getCurrentSubject
argument_list|()
argument_list|)
expr_stmt|;
specifier|final
name|LDAPSearchContext
name|search
init|=
name|ensureContextFactory
argument_list|()
operator|.
name|getSearch
argument_list|()
decl_stmt|;
specifier|final
name|SearchAttribute
name|sa
init|=
operator|new
name|SearchAttribute
argument_list|(
name|search
operator|.
name|getSearchGroup
argument_list|()
operator|.
name|getSearchAttribute
argument_list|(
name|LDAPSearchAttributeKey
operator|.
name|NAME
argument_list|)
argument_list|,
name|sWith
operator|+
literal|"*"
argument_list|)
decl_stmt|;
specifier|final
name|String
name|searchFilter
init|=
name|buildSearchFilter
argument_list|(
name|search
operator|.
name|getSearchGroup
argument_list|()
operator|.
name|getSearchFilterPrefix
argument_list|()
argument_list|,
name|sa
argument_list|)
decl_stmt|;
specifier|final
name|SearchControls
name|searchControls
init|=
operator|new
name|SearchControls
argument_list|()
decl_stmt|;
name|searchControls
operator|.
name|setSearchScope
argument_list|(
name|SearchControls
operator|.
name|SUBTREE_SCOPE
argument_list|)
expr_stmt|;
name|searchControls
operator|.
name|setReturningAttributes
argument_list|(
operator|new
name|String
index|[]
block|{
name|search
operator|.
name|getSearchGroup
argument_list|()
operator|.
name|getSearchAttribute
argument_list|(
name|LDAPSearchAttributeKey
operator|.
name|NAME
argument_list|)
block|}
argument_list|)
expr_stmt|;
specifier|final
name|NamingEnumeration
argument_list|<
name|SearchResult
argument_list|>
name|results
init|=
name|ctx
operator|.
name|search
argument_list|(
name|search
operator|.
name|getBase
argument_list|()
argument_list|,
name|searchFilter
argument_list|,
name|searchControls
argument_list|)
decl_stmt|;
while|while
condition|(
name|results
operator|.
name|hasMoreElements
argument_list|()
condition|)
block|{
specifier|final
name|SearchResult
name|searchResult
init|=
name|results
operator|.
name|nextElement
argument_list|()
decl_stmt|;
specifier|final
name|String
name|groupname
init|=
name|ensureCase
argument_list|(
name|addDomainPostfix
argument_list|(
operator|(
name|String
operator|)
name|searchResult
operator|.
name|getAttributes
argument_list|()
operator|.
name|get
argument_list|(
name|search
operator|.
name|getSearchGroup
argument_list|()
operator|.
name|getSearchAttribute
argument_list|(
name|LDAPSearchAttributeKey
operator|.
name|NAME
argument_list|)
argument_list|)
operator|.
name|get
argument_list|()
argument_list|)
argument_list|)
decl_stmt|;
if|if
condition|(
name|checkGroupRestrictionList
argument_list|(
name|groupname
argument_list|)
condition|)
block|{
name|groupnames
operator|.
name|add
argument_list|(
name|groupname
argument_list|)
expr_stmt|;
block|}
block|}
block|}
catch|catch
parameter_list|(
specifier|final
name|NamingException
name|ne
parameter_list|)
block|{
name|LOG
operator|.
name|error
argument_list|(
operator|new
name|AuthenticationException
argument_list|(
name|AuthenticationException
operator|.
name|UNNOWN_EXCEPTION
argument_list|,
name|ne
operator|.
name|getMessage
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
if|if
condition|(
name|ctx
operator|!=
literal|null
condition|)
block|{
name|LdapUtils
operator|.
name|closeContext
argument_list|(
name|ctx
argument_list|)
expr_stmt|;
block|}
block|}
return|return
name|groupnames
return|;
block|}
annotation|@
name|Override
specifier|public
name|List
argument_list|<
name|String
argument_list|>
name|findGroupnamesWhereGroupnameContains
parameter_list|(
specifier|final
name|String
name|fragment
parameter_list|)
block|{
specifier|final
name|String
name|part
init|=
name|escapeSearchAttribute
argument_list|(
name|ensureCase
argument_list|(
name|fragment
argument_list|)
argument_list|)
decl_stmt|;
specifier|final
name|List
argument_list|<
name|String
argument_list|>
name|groupnames
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
name|LdapContext
name|ctx
init|=
literal|null
decl_stmt|;
try|try
block|{
name|ctx
operator|=
name|getContext
argument_list|(
name|getSecurityManager
argument_list|()
operator|.
name|getCurrentSubject
argument_list|()
argument_list|)
expr_stmt|;
specifier|final
name|LDAPSearchContext
name|search
init|=
name|ensureContextFactory
argument_list|()
operator|.
name|getSearch
argument_list|()
decl_stmt|;
specifier|final
name|SearchAttribute
name|sa
init|=
operator|new
name|SearchAttribute
argument_list|(
name|search
operator|.
name|getSearchGroup
argument_list|()
operator|.
name|getSearchAttribute
argument_list|(
name|LDAPSearchAttributeKey
operator|.
name|NAME
argument_list|)
argument_list|,
literal|"*"
operator|+
name|part
operator|+
literal|"*"
argument_list|)
decl_stmt|;
specifier|final
name|String
name|searchFilter
init|=
name|buildSearchFilter
argument_list|(
name|search
operator|.
name|getSearchGroup
argument_list|()
operator|.
name|getSearchFilterPrefix
argument_list|()
argument_list|,
name|sa
argument_list|)
decl_stmt|;
specifier|final
name|SearchControls
name|searchControls
init|=
operator|new
name|SearchControls
argument_list|()
decl_stmt|;
name|searchControls
operator|.
name|setSearchScope
argument_list|(
name|SearchControls
operator|.
name|SUBTREE_SCOPE
argument_list|)
expr_stmt|;
name|searchControls
operator|.
name|setReturningAttributes
argument_list|(
operator|new
name|String
index|[]
block|{
name|search
operator|.
name|getSearchGroup
argument_list|()
operator|.
name|getSearchAttribute
argument_list|(
name|LDAPSearchAttributeKey
operator|.
name|NAME
argument_list|)
block|}
argument_list|)
expr_stmt|;
specifier|final
name|NamingEnumeration
argument_list|<
name|SearchResult
argument_list|>
name|results
init|=
name|ctx
operator|.
name|search
argument_list|(
name|search
operator|.
name|getBase
argument_list|()
argument_list|,
name|searchFilter
argument_list|,
name|searchControls
argument_list|)
decl_stmt|;
while|while
condition|(
name|results
operator|.
name|hasMoreElements
argument_list|()
condition|)
block|{
specifier|final
name|SearchResult
name|searchResult
init|=
name|results
operator|.
name|nextElement
argument_list|()
decl_stmt|;
specifier|final
name|String
name|groupname
init|=
name|ensureCase
argument_list|(
name|addDomainPostfix
argument_list|(
operator|(
name|String
operator|)
name|searchResult
operator|.
name|getAttributes
argument_list|()
operator|.
name|get
argument_list|(
name|search
operator|.
name|getSearchGroup
argument_list|()
operator|.
name|getSearchAttribute
argument_list|(
name|LDAPSearchAttributeKey
operator|.
name|NAME
argument_list|)
argument_list|)
operator|.
name|get
argument_list|()
argument_list|)
argument_list|)
decl_stmt|;
if|if
condition|(
name|checkGroupRestrictionList
argument_list|(
name|groupname
argument_list|)
condition|)
block|{
name|groupnames
operator|.
name|add
argument_list|(
name|groupname
argument_list|)
expr_stmt|;
block|}
block|}
block|}
catch|catch
parameter_list|(
specifier|final
name|NamingException
name|ne
parameter_list|)
block|{
name|LOG
operator|.
name|error
argument_list|(
name|ne
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
if|if
condition|(
name|ctx
operator|!=
literal|null
condition|)
block|{
name|LdapUtils
operator|.
name|closeContext
argument_list|(
name|ctx
argument_list|)
expr_stmt|;
block|}
block|}
return|return
name|groupnames
return|;
block|}
annotation|@
name|Override
specifier|public
name|List
argument_list|<
name|String
argument_list|>
name|findAllGroupNames
parameter_list|()
block|{
specifier|final
name|List
argument_list|<
name|String
argument_list|>
name|groupnames
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
name|LdapContext
name|ctx
init|=
literal|null
decl_stmt|;
try|try
block|{
name|ctx
operator|=
name|getContext
argument_list|(
name|getSecurityManager
argument_list|()
operator|.
name|getCurrentSubject
argument_list|()
argument_list|)
expr_stmt|;
specifier|final
name|LDAPSearchContext
name|search
init|=
name|ensureContextFactory
argument_list|()
operator|.
name|getSearch
argument_list|()
decl_stmt|;
specifier|final
name|SearchAttribute
name|sa
init|=
operator|new
name|SearchAttribute
argument_list|(
literal|null
argument_list|,
literal|null
argument_list|)
decl_stmt|;
specifier|final
name|String
name|searchFilter
init|=
name|buildSearchFilter
argument_list|(
name|search
operator|.
name|getSearchGroup
argument_list|()
operator|.
name|getSearchFilterPrefix
argument_list|()
argument_list|,
name|sa
argument_list|)
decl_stmt|;
specifier|final
name|SearchControls
name|searchControls
init|=
operator|new
name|SearchControls
argument_list|()
decl_stmt|;
name|searchControls
operator|.
name|setSearchScope
argument_list|(
name|SearchControls
operator|.
name|SUBTREE_SCOPE
argument_list|)
expr_stmt|;
name|searchControls
operator|.
name|setReturningAttributes
argument_list|(
operator|new
name|String
index|[]
block|{
name|search
operator|.
name|getSearchGroup
argument_list|()
operator|.
name|getSearchAttribute
argument_list|(
name|LDAPSearchAttributeKey
operator|.
name|NAME
argument_list|)
block|}
argument_list|)
expr_stmt|;
specifier|final
name|NamingEnumeration
argument_list|<
name|SearchResult
argument_list|>
name|results
init|=
name|ctx
operator|.
name|search
argument_list|(
name|search
operator|.
name|getBase
argument_list|()
argument_list|,
name|searchFilter
argument_list|,
name|searchControls
argument_list|)
decl_stmt|;
while|while
condition|(
name|results
operator|.
name|hasMoreElements
argument_list|()
condition|)
block|{
specifier|final
name|SearchResult
name|searchResult
init|=
name|results
operator|.
name|nextElement
argument_list|()
decl_stmt|;
specifier|final
name|String
name|groupname
init|=
name|ensureCase
argument_list|(
name|addDomainPostfix
argument_list|(
operator|(
name|String
operator|)
name|searchResult
operator|.
name|getAttributes
argument_list|()
operator|.
name|get
argument_list|(
name|search
operator|.
name|getSearchGroup
argument_list|()
operator|.
name|getSearchAttribute
argument_list|(
name|LDAPSearchAttributeKey
operator|.
name|NAME
argument_list|)
argument_list|)
operator|.
name|get
argument_list|()
argument_list|)
argument_list|)
decl_stmt|;
if|if
condition|(
name|checkGroupRestrictionList
argument_list|(
name|groupname
argument_list|)
condition|)
block|{
name|groupnames
operator|.
name|add
argument_list|(
name|groupname
argument_list|)
expr_stmt|;
block|}
block|}
block|}
catch|catch
parameter_list|(
specifier|final
name|NamingException
name|ne
parameter_list|)
block|{
name|LOG
operator|.
name|error
argument_list|(
operator|new
name|AuthenticationException
argument_list|(
name|AuthenticationException
operator|.
name|UNNOWN_EXCEPTION
argument_list|,
name|ne
operator|.
name|getMessage
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
if|if
condition|(
name|ctx
operator|!=
literal|null
condition|)
block|{
name|LdapUtils
operator|.
name|closeContext
argument_list|(
name|ctx
argument_list|)
expr_stmt|;
block|}
block|}
return|return
name|groupnames
return|;
block|}
annotation|@
name|Override
specifier|public
name|List
argument_list|<
name|String
argument_list|>
name|findAllUserNames
parameter_list|()
block|{
specifier|final
name|List
argument_list|<
name|String
argument_list|>
name|usernames
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
name|LdapContext
name|ctx
init|=
literal|null
decl_stmt|;
try|try
block|{
name|ctx
operator|=
name|getContext
argument_list|(
name|getSecurityManager
argument_list|()
operator|.
name|getCurrentSubject
argument_list|()
argument_list|)
expr_stmt|;
specifier|final
name|LDAPSearchContext
name|search
init|=
name|ensureContextFactory
argument_list|()
operator|.
name|getSearch
argument_list|()
decl_stmt|;
specifier|final
name|SearchAttribute
name|sa
init|=
operator|new
name|SearchAttribute
argument_list|(
literal|null
argument_list|,
literal|null
argument_list|)
decl_stmt|;
specifier|final
name|String
name|searchFilter
init|=
name|buildSearchFilter
argument_list|(
name|search
operator|.
name|getSearchAccount
argument_list|()
operator|.
name|getSearchFilterPrefix
argument_list|()
argument_list|,
name|sa
argument_list|)
decl_stmt|;
specifier|final
name|SearchControls
name|searchControls
init|=
operator|new
name|SearchControls
argument_list|()
decl_stmt|;
name|searchControls
operator|.
name|setSearchScope
argument_list|(
name|SearchControls
operator|.
name|SUBTREE_SCOPE
argument_list|)
expr_stmt|;
name|searchControls
operator|.
name|setReturningAttributes
argument_list|(
operator|new
name|String
index|[]
block|{
name|search
operator|.
name|getSearchAccount
argument_list|()
operator|.
name|getSearchAttribute
argument_list|(
name|LDAPSearchAttributeKey
operator|.
name|NAME
argument_list|)
block|}
argument_list|)
expr_stmt|;
specifier|final
name|NamingEnumeration
argument_list|<
name|SearchResult
argument_list|>
name|results
init|=
name|ctx
operator|.
name|search
argument_list|(
name|search
operator|.
name|getBase
argument_list|()
argument_list|,
name|searchFilter
argument_list|,
name|searchControls
argument_list|)
decl_stmt|;
while|while
condition|(
name|results
operator|.
name|hasMoreElements
argument_list|()
condition|)
block|{
specifier|final
name|SearchResult
name|searchResult
init|=
name|results
operator|.
name|nextElement
argument_list|()
decl_stmt|;
specifier|final
name|String
name|accountname
init|=
name|ensureCase
argument_list|(
name|addDomainPostfix
argument_list|(
operator|(
name|String
operator|)
name|searchResult
operator|.
name|getAttributes
argument_list|()
operator|.
name|get
argument_list|(
name|search
operator|.
name|getSearchAccount
argument_list|()
operator|.
name|getSearchAttribute
argument_list|(
name|LDAPSearchAttributeKey
operator|.
name|NAME
argument_list|)
argument_list|)
operator|.
name|get
argument_list|()
argument_list|)
argument_list|)
decl_stmt|;
if|if
condition|(
name|checkAccountRestrictionList
argument_list|(
name|accountname
argument_list|)
condition|)
block|{
name|usernames
operator|.
name|add
argument_list|(
name|accountname
argument_list|)
expr_stmt|;
block|}
block|}
block|}
catch|catch
parameter_list|(
specifier|final
name|NamingException
name|ne
parameter_list|)
block|{
name|LOG
operator|.
name|error
argument_list|(
operator|new
name|AuthenticationException
argument_list|(
name|AuthenticationException
operator|.
name|UNNOWN_EXCEPTION
argument_list|,
name|ne
operator|.
name|getMessage
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
if|if
condition|(
name|ctx
operator|!=
literal|null
condition|)
block|{
name|LdapUtils
operator|.
name|closeContext
argument_list|(
name|ctx
argument_list|)
expr_stmt|;
block|}
block|}
return|return
name|usernames
return|;
block|}
annotation|@
name|Override
specifier|public
name|List
argument_list|<
name|String
argument_list|>
name|findAllGroupMembers
parameter_list|(
specifier|final
name|String
name|groupName
parameter_list|)
block|{
specifier|final
name|String
name|name
init|=
name|escapeSearchAttribute
argument_list|(
name|ensureCase
argument_list|(
name|groupName
argument_list|)
argument_list|)
decl_stmt|;
specifier|final
name|List
argument_list|<
name|String
argument_list|>
name|groupMembers
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
if|if
condition|(
operator|!
name|checkGroupRestrictionList
argument_list|(
name|name
argument_list|)
condition|)
block|{
return|return
name|groupMembers
return|;
block|}
name|LdapContext
name|ctx
init|=
literal|null
decl_stmt|;
try|try
block|{
name|ctx
operator|=
name|getContext
argument_list|(
name|getSecurityManager
argument_list|()
operator|.
name|getCurrentSubject
argument_list|()
argument_list|)
expr_stmt|;
comment|//find the dn of the group
name|SearchResult
name|searchResult
init|=
name|findGroupByGroupName
argument_list|(
name|ctx
argument_list|,
name|removeDomainPostfix
argument_list|(
name|name
argument_list|)
argument_list|)
decl_stmt|;
if|if
condition|(
name|searchResult
operator|==
literal|null
condition|)
block|{
comment|// no such group
return|return
name|groupMembers
return|;
block|}
specifier|final
name|LDAPSearchContext
name|search
init|=
name|ensureContextFactory
argument_list|()
operator|.
name|getSearch
argument_list|()
decl_stmt|;
specifier|final
name|String
name|dnGroup
init|=
operator|(
name|String
operator|)
name|searchResult
operator|.
name|getAttributes
argument_list|()
operator|.
name|get
argument_list|(
name|search
operator|.
name|getSearchGroup
argument_list|()
operator|.
name|getSearchAttribute
argument_list|(
name|LDAPSearchAttributeKey
operator|.
name|DN
argument_list|)
argument_list|)
operator|.
name|get
argument_list|()
decl_stmt|;
comment|//find all accounts that are a member of the group
specifier|final
name|SearchAttribute
name|sa
init|=
operator|new
name|SearchAttribute
argument_list|(
name|search
operator|.
name|getSearchAccount
argument_list|()
operator|.
name|getSearchAttribute
argument_list|(
name|LDAPSearchAttributeKey
operator|.
name|MEMBER_OF
argument_list|)
argument_list|,
name|escapeSearchAttribute
argument_list|(
name|dnGroup
argument_list|)
argument_list|)
decl_stmt|;
specifier|final
name|String
name|searchFilter
init|=
name|buildSearchFilter
argument_list|(
name|search
operator|.
name|getSearchAccount
argument_list|()
operator|.
name|getSearchFilterPrefix
argument_list|()
argument_list|,
name|sa
argument_list|)
decl_stmt|;
specifier|final
name|SearchControls
name|searchControls
init|=
operator|new
name|SearchControls
argument_list|()
decl_stmt|;
name|searchControls
operator|.
name|setSearchScope
argument_list|(
name|SearchControls
operator|.
name|SUBTREE_SCOPE
argument_list|)
expr_stmt|;
name|searchControls
operator|.
name|setReturningAttributes
argument_list|(
operator|new
name|String
index|[]
block|{
name|search
operator|.
name|getSearchAccount
argument_list|()
operator|.
name|getSearchAttribute
argument_list|(
name|LDAPSearchAttributeKey
operator|.
name|NAME
argument_list|)
block|}
argument_list|)
expr_stmt|;
specifier|final
name|NamingEnumeration
argument_list|<
name|SearchResult
argument_list|>
name|results
init|=
name|ctx
operator|.
name|search
argument_list|(
name|search
operator|.
name|getBase
argument_list|()
argument_list|,
name|searchFilter
argument_list|,
name|searchControls
argument_list|)
decl_stmt|;
while|while
condition|(
name|results
operator|.
name|hasMoreElements
argument_list|()
condition|)
block|{
name|searchResult
operator|=
name|results
operator|.
name|nextElement
argument_list|()
expr_stmt|;
specifier|final
name|String
name|member
init|=
name|ensureCase
argument_list|(
name|addDomainPostfix
argument_list|(
operator|(
name|String
operator|)
name|searchResult
operator|.
name|getAttributes
argument_list|()
operator|.
name|get
argument_list|(
name|search
operator|.
name|getSearchAccount
argument_list|()
operator|.
name|getSearchAttribute
argument_list|(
name|LDAPSearchAttributeKey
operator|.
name|NAME
argument_list|)
argument_list|)
operator|.
name|get
argument_list|()
argument_list|)
argument_list|)
decl_stmt|;
if|if
condition|(
name|checkAccountRestrictionList
argument_list|(
name|member
argument_list|)
condition|)
block|{
name|groupMembers
operator|.
name|add
argument_list|(
name|member
argument_list|)
expr_stmt|;
block|}
block|}
block|}
catch|catch
parameter_list|(
specifier|final
name|NamingException
name|ne
parameter_list|)
block|{
name|LOG
operator|.
name|error
argument_list|(
operator|new
name|AuthenticationException
argument_list|(
name|AuthenticationException
operator|.
name|UNNOWN_EXCEPTION
argument_list|,
name|ne
operator|.
name|getMessage
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
if|if
condition|(
name|ctx
operator|!=
literal|null
condition|)
block|{
name|LdapUtils
operator|.
name|closeContext
argument_list|(
name|ctx
argument_list|)
expr_stmt|;
block|}
block|}
return|return
name|groupMembers
return|;
block|}
specifier|private
specifier|final
class|class
name|AuthenticatedLdapSubjectAccreditedImpl
extends|extends
name|SubjectAccreditedImpl
block|{
specifier|private
specifier|final
name|String
name|authenticatedCredentials
decl_stmt|;
specifier|private
name|AuthenticatedLdapSubjectAccreditedImpl
parameter_list|(
specifier|final
name|AbstractAccount
name|account
parameter_list|,
specifier|final
name|LdapContext
name|ctx
parameter_list|,
specifier|final
name|String
name|authenticatedCredentials
parameter_list|)
block|{
name|super
argument_list|(
name|account
argument_list|,
name|ctx
argument_list|)
expr_stmt|;
name|this
operator|.
name|authenticatedCredentials
operator|=
name|authenticatedCredentials
expr_stmt|;
block|}
specifier|private
name|String
name|getAuthenticatedCredentials
parameter_list|()
block|{
return|return
name|authenticatedCredentials
return|;
block|}
block|}
block|}
end_class

end_unit

