begin_unit|revision:1.0.0;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  *  eXist Open Source Native XML Database  *  Copyright (C) 2010 The eXist Project  *  http://exist-db.org  *    *  This program is free software; you can redistribute it and/or  *  modify it under the terms of the GNU Lesser General Public License  *  as published by the Free Software Foundation; either version 2  *  of the License, or (at your option) any later version.  *    *  This program is distributed in the hope that it will be useful,  *  but WITHOUT ANY WARRANTY; without even the implied warranty of  *  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the  *  GNU Lesser General Public License for more details.  *    *  You should have received a copy of the GNU Lesser General Public License  *  along with this program; if not, write to the Free Software  *  Foundation, Inc., 675 Mass Ave, Cambridge, MA 02139, USA.  *    *  $Id$  */
end_comment

begin_package
package|package
name|org
operator|.
name|exist
operator|.
name|security
operator|.
name|realm
operator|.
name|ldap
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|naming
operator|.
name|NamingEnumeration
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|naming
operator|.
name|NamingException
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|naming
operator|.
name|directory
operator|.
name|Attribute
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|naming
operator|.
name|directory
operator|.
name|Attributes
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|naming
operator|.
name|directory
operator|.
name|DirContext
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|naming
operator|.
name|directory
operator|.
name|SearchControls
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|naming
operator|.
name|directory
operator|.
name|SearchResult
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|naming
operator|.
name|ldap
operator|.
name|LdapContext
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|log4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|EXistException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|config
operator|.
name|Configuration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|config
operator|.
name|annotation
operator|.
name|*
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|security
operator|.
name|AXSchemaType
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|security
operator|.
name|Account
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|security
operator|.
name|AuthenticationException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|security
operator|.
name|PermissionDeniedException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|security
operator|.
name|Subject
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|security
operator|.
name|AbstractAccount
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|security
operator|.
name|AbstractRealm
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|security
operator|.
name|Group
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|security
operator|.
name|internal
operator|.
name|SecurityManagerImpl
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|security
operator|.
name|internal
operator|.
name|SubjectAccreditedImpl
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|security
operator|.
name|internal
operator|.
name|aider
operator|.
name|GroupAider
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|security
operator|.
name|internal
operator|.
name|aider
operator|.
name|UserAider
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|security
operator|.
name|realm
operator|.
name|ldap
operator|.
name|AbstractLDAPSearchPrincipal
operator|.
name|LDAPSearchAttributeKey
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|storage
operator|.
name|DBBroker
import|;
end_import

begin_comment
comment|/**  * @author<a href="mailto:shabanovd@gmail.com">Dmitriy Shabanov</a>  * @author Adam Retter<adam@exist-db.org>  */
end_comment

begin_class
annotation|@
name|ConfigurationClass
argument_list|(
literal|"realm"
argument_list|)
comment|//TODO: id = LDAP
specifier|public
class|class
name|LDAPRealm
extends|extends
name|AbstractRealm
block|{
specifier|private
specifier|final
specifier|static
name|Logger
name|LOG
init|=
name|Logger
operator|.
name|getLogger
argument_list|(
name|LDAPRealm
operator|.
name|class
argument_list|)
decl_stmt|;
annotation|@
name|ConfigurationFieldAsAttribute
argument_list|(
literal|"id"
argument_list|)
specifier|public
specifier|static
name|String
name|ID
init|=
literal|"LDAP"
decl_stmt|;
annotation|@
name|ConfigurationFieldAsAttribute
argument_list|(
literal|"version"
argument_list|)
specifier|public
specifier|final
specifier|static
name|String
name|version
init|=
literal|"1.0"
decl_stmt|;
annotation|@
name|ConfigurationFieldAsElement
argument_list|(
literal|"context"
argument_list|)
specifier|protected
name|LdapContextFactory
name|ldapContextFactory
decl_stmt|;
specifier|public
name|LDAPRealm
parameter_list|(
name|SecurityManagerImpl
name|sm
parameter_list|,
name|Configuration
name|config
parameter_list|)
block|{
name|super
argument_list|(
name|sm
argument_list|,
name|config
argument_list|)
expr_stmt|;
block|}
specifier|protected
name|LdapContextFactory
name|ensureContextFactory
parameter_list|()
block|{
if|if
condition|(
name|this
operator|.
name|ldapContextFactory
operator|==
literal|null
condition|)
block|{
if|if
condition|(
name|LOG
operator|.
name|isDebugEnabled
argument_list|()
condition|)
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"No LdapContextFactory specified - creating a default instance."
argument_list|)
expr_stmt|;
block|}
name|LdapContextFactory
name|factory
init|=
operator|new
name|LdapContextFactory
argument_list|(
name|configuration
argument_list|)
decl_stmt|;
name|this
operator|.
name|ldapContextFactory
operator|=
name|factory
expr_stmt|;
block|}
return|return
name|this
operator|.
name|ldapContextFactory
return|;
block|}
annotation|@
name|Override
specifier|public
name|String
name|getId
parameter_list|()
block|{
return|return
name|ID
return|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|startUp
parameter_list|(
name|DBBroker
name|broker
parameter_list|)
throws|throws
name|EXistException
block|{
name|super
operator|.
name|startUp
argument_list|(
name|broker
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|Subject
name|authenticate
parameter_list|(
name|String
name|username
parameter_list|,
name|Object
name|credentials
parameter_list|)
throws|throws
name|AuthenticationException
block|{
comment|// Binds using the username and password provided by the user.
name|LdapContext
name|ctx
init|=
literal|null
decl_stmt|;
try|try
block|{
name|ctx
operator|=
name|ensureContextFactory
argument_list|()
operator|.
name|getLdapContext
argument_list|(
name|username
argument_list|,
name|String
operator|.
name|valueOf
argument_list|(
name|credentials
argument_list|)
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|NamingException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|AuthenticationException
argument_list|(
name|AuthenticationException
operator|.
name|UNNOWN_EXCEPTION
argument_list|,
name|e
operator|.
name|getMessage
argument_list|()
argument_list|)
throw|;
block|}
finally|finally
block|{
name|LdapUtils
operator|.
name|closeContext
argument_list|(
name|ctx
argument_list|)
expr_stmt|;
block|}
name|AbstractAccount
name|account
init|=
operator|(
name|AbstractAccount
operator|)
name|getAccount
argument_list|(
literal|null
argument_list|,
name|username
argument_list|)
decl_stmt|;
comment|/*if(account == null) {             account = (AbstractAccount) createAccountInDatabase(null, username);         }*/
return|return
operator|new
name|AuthenticatedLdapSubjectAccreditedImpl
argument_list|(
name|account
argument_list|,
name|ctx
argument_list|,
name|String
operator|.
name|valueOf
argument_list|(
name|credentials
argument_list|)
argument_list|)
return|;
block|}
specifier|private
name|Account
name|createAccountInDatabase
parameter_list|(
name|Subject
name|invokingUser
parameter_list|,
name|String
name|username
parameter_list|,
name|SearchResult
name|ldapUser
parameter_list|,
name|String
name|primaryGroupName
parameter_list|)
throws|throws
name|AuthenticationException
block|{
name|LDAPSearchAccount
name|searchAccount
init|=
name|ensureContextFactory
argument_list|()
operator|.
name|getSearch
argument_list|()
operator|.
name|getSearchAccount
argument_list|()
decl_stmt|;
name|DBBroker
name|broker
init|=
literal|null
decl_stmt|;
try|try
block|{
name|broker
operator|=
name|getDatabase
argument_list|()
operator|.
name|get
argument_list|(
name|invokingUser
argument_list|)
expr_stmt|;
comment|//elevate to system privs
name|broker
operator|.
name|setUser
argument_list|(
name|getSecurityManager
argument_list|()
operator|.
name|getSystemSubject
argument_list|()
argument_list|)
expr_stmt|;
comment|//get (or create) the primary group if it doesnt exist
name|Group
name|primaryGroup
init|=
name|getGroup
argument_list|(
name|invokingUser
argument_list|,
name|primaryGroupName
argument_list|)
decl_stmt|;
comment|//get (or create) member groups
name|LDAPSearchContext
name|search
init|=
name|ensureContextFactory
argument_list|()
operator|.
name|getSearch
argument_list|()
decl_stmt|;
name|String
name|userDistinguishedName
init|=
operator|(
name|String
operator|)
name|ldapUser
operator|.
name|getAttributes
argument_list|()
operator|.
name|get
argument_list|(
name|search
operator|.
name|getSearchAccount
argument_list|()
operator|.
name|getSearchAttribute
argument_list|(
name|LDAPSearchAttributeKey
operator|.
name|DN
argument_list|)
argument_list|)
operator|.
name|get
argument_list|()
decl_stmt|;
name|List
argument_list|<
name|String
argument_list|>
name|memberOf_groupNames
init|=
name|findGroupnamesForUserDistinguishedName
argument_list|(
name|invokingUser
argument_list|,
name|userDistinguishedName
argument_list|)
decl_stmt|;
name|List
argument_list|<
name|Group
argument_list|>
name|memberOf_groups
init|=
operator|new
name|ArrayList
argument_list|<
name|Group
argument_list|>
argument_list|()
decl_stmt|;
for|for
control|(
name|String
name|memberOf_groupName
range|:
name|memberOf_groupNames
control|)
block|{
name|memberOf_groups
operator|.
name|add
argument_list|(
name|getGroup
argument_list|(
name|invokingUser
argument_list|,
name|memberOf_groupName
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|//create the user account
name|UserAider
name|userAider
init|=
operator|new
name|UserAider
argument_list|(
name|ID
argument_list|,
name|username
argument_list|,
name|primaryGroup
argument_list|)
decl_stmt|;
comment|//add the member groups
for|for
control|(
name|Group
name|memberOf_group
range|:
name|memberOf_groups
control|)
block|{
name|userAider
operator|.
name|addGroup
argument_list|(
name|memberOf_group
argument_list|)
expr_stmt|;
block|}
comment|//store any requested metadata
for|for
control|(
name|AXSchemaType
name|axSchemaType
range|:
name|searchAccount
operator|.
name|getMetadataSearchAttributeKeys
argument_list|()
control|)
block|{
name|String
name|searchAttribute
init|=
name|searchAccount
operator|.
name|getMetadataSearchAttribute
argument_list|(
name|axSchemaType
argument_list|)
decl_stmt|;
name|Attributes
name|userAttributes
init|=
name|ldapUser
operator|.
name|getAttributes
argument_list|()
decl_stmt|;
if|if
condition|(
name|userAttributes
operator|!=
literal|null
condition|)
block|{
name|Attribute
name|userAttribute
init|=
name|userAttributes
operator|.
name|get
argument_list|(
name|searchAttribute
argument_list|)
decl_stmt|;
if|if
condition|(
name|userAttribute
operator|!=
literal|null
condition|)
block|{
name|String
name|attributeValue
init|=
name|userAttribute
operator|.
name|get
argument_list|()
operator|.
name|toString
argument_list|()
decl_stmt|;
name|userAider
operator|.
name|setMetadataValue
argument_list|(
name|axSchemaType
argument_list|,
name|attributeValue
argument_list|)
expr_stmt|;
block|}
block|}
block|}
name|Account
name|account
init|=
name|getSecurityManager
argument_list|()
operator|.
name|addAccount
argument_list|(
name|userAider
argument_list|)
decl_stmt|;
comment|//LDAPAccountImpl account = sm.addAccount(instantiateAccount(ID, username));
comment|//TODO expand to a general method that rewrites the useraider based on the realTransformation
name|boolean
name|updatedAccount
init|=
literal|false
decl_stmt|;
if|if
condition|(
name|ensureContextFactory
argument_list|()
operator|.
name|getTransformationContext
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|List
argument_list|<
name|String
argument_list|>
name|additionalGroupNames
init|=
name|ensureContextFactory
argument_list|()
operator|.
name|getTransformationContext
argument_list|()
operator|.
name|getAdditionalGroups
argument_list|()
decl_stmt|;
if|if
condition|(
name|additionalGroupNames
operator|!=
literal|null
condition|)
block|{
for|for
control|(
name|String
name|additionalGroupName
range|:
name|additionalGroupNames
control|)
block|{
name|Group
name|additionalGroup
init|=
name|getSecurityManager
argument_list|()
operator|.
name|getGroup
argument_list|(
name|invokingUser
argument_list|,
name|additionalGroupName
argument_list|)
decl_stmt|;
if|if
condition|(
name|additionalGroup
operator|!=
literal|null
condition|)
block|{
name|account
operator|.
name|addGroup
argument_list|(
name|additionalGroup
argument_list|)
expr_stmt|;
name|updatedAccount
operator|=
literal|true
expr_stmt|;
block|}
block|}
block|}
block|}
if|if
condition|(
name|updatedAccount
condition|)
block|{
name|boolean
name|updated
init|=
name|getSecurityManager
argument_list|()
operator|.
name|updateAccount
argument_list|(
name|invokingUser
argument_list|,
name|account
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|updated
condition|)
block|{
name|LOG
operator|.
name|error
argument_list|(
literal|"Could not update account"
argument_list|)
expr_stmt|;
block|}
block|}
return|return
name|account
return|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|AuthenticationException
argument_list|(
name|AuthenticationException
operator|.
name|UNNOWN_EXCEPTION
argument_list|,
name|e
operator|.
name|getMessage
argument_list|()
argument_list|,
name|e
argument_list|)
throw|;
block|}
finally|finally
block|{
if|if
condition|(
name|broker
operator|!=
literal|null
condition|)
block|{
name|broker
operator|.
name|setUser
argument_list|(
name|invokingUser
argument_list|)
expr_stmt|;
name|getDatabase
argument_list|()
operator|.
name|release
argument_list|(
name|broker
argument_list|)
expr_stmt|;
block|}
block|}
block|}
specifier|private
name|Group
name|createGroupInDatabase
parameter_list|(
name|Subject
name|invokingUser
parameter_list|,
name|String
name|groupname
parameter_list|)
throws|throws
name|AuthenticationException
block|{
name|DBBroker
name|broker
init|=
literal|null
decl_stmt|;
try|try
block|{
name|broker
operator|=
name|getDatabase
argument_list|()
operator|.
name|get
argument_list|(
name|invokingUser
argument_list|)
expr_stmt|;
comment|//elevate to system privs
name|broker
operator|.
name|setUser
argument_list|(
name|getSecurityManager
argument_list|()
operator|.
name|getSystemSubject
argument_list|()
argument_list|)
expr_stmt|;
comment|//return sm.addGroup(instantiateGroup(this, groupname));
return|return
name|getSecurityManager
argument_list|()
operator|.
name|addGroup
argument_list|(
operator|new
name|GroupAider
argument_list|(
name|ID
argument_list|,
name|groupname
argument_list|)
argument_list|)
return|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|AuthenticationException
argument_list|(
name|AuthenticationException
operator|.
name|UNNOWN_EXCEPTION
argument_list|,
name|e
operator|.
name|getMessage
argument_list|()
argument_list|,
name|e
argument_list|)
throw|;
block|}
finally|finally
block|{
if|if
condition|(
name|broker
operator|!=
literal|null
condition|)
block|{
name|broker
operator|.
name|setUser
argument_list|(
name|invokingUser
argument_list|)
expr_stmt|;
name|getDatabase
argument_list|()
operator|.
name|release
argument_list|(
name|broker
argument_list|)
expr_stmt|;
block|}
block|}
block|}
specifier|private
name|LdapContext
name|getContext
parameter_list|(
name|Subject
name|invokingUser
parameter_list|)
throws|throws
name|NamingException
block|{
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|additionalEnv
init|=
operator|new
name|HashMap
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
argument_list|()
decl_stmt|;
name|additionalEnv
operator|.
name|put
argument_list|(
literal|"java.naming.ldap.attributes.binary"
argument_list|,
literal|"objectSID"
argument_list|)
expr_stmt|;
name|LdapContextFactory
name|ctxFactory
init|=
name|ensureContextFactory
argument_list|()
decl_stmt|;
name|LdapContext
name|ctx
init|=
literal|null
decl_stmt|;
if|if
condition|(
name|invokingUser
operator|!=
literal|null
operator|&&
name|invokingUser
operator|instanceof
name|AuthenticatedLdapSubjectAccreditedImpl
condition|)
block|{
comment|//use the provided credentials for the lookup
name|ctx
operator|=
name|ctxFactory
operator|.
name|getLdapContext
argument_list|(
name|invokingUser
operator|.
name|getUsername
argument_list|()
argument_list|,
operator|(
operator|(
name|AuthenticatedLdapSubjectAccreditedImpl
operator|)
name|invokingUser
operator|)
operator|.
name|getAuthenticatedCredentials
argument_list|()
argument_list|,
name|additionalEnv
argument_list|)
expr_stmt|;
block|}
else|else
block|{
comment|//use the default credentials for lookup
name|LDAPSearchContext
name|searchCtx
init|=
name|ctxFactory
operator|.
name|getSearch
argument_list|()
decl_stmt|;
name|ctx
operator|=
name|ctxFactory
operator|.
name|getLdapContext
argument_list|(
name|searchCtx
operator|.
name|getDefaultUsername
argument_list|()
argument_list|,
name|searchCtx
operator|.
name|getDefaultPassword
argument_list|()
argument_list|,
name|additionalEnv
argument_list|)
expr_stmt|;
block|}
return|return
name|ctx
return|;
block|}
annotation|@
name|Override
specifier|public
specifier|final
specifier|synchronized
name|Account
name|getAccount
parameter_list|(
name|Subject
name|invokingUser
parameter_list|,
name|String
name|name
parameter_list|)
block|{
comment|//first attempt to get the cached account
name|Account
name|acct
init|=
name|super
operator|.
name|getAccount
argument_list|(
name|invokingUser
argument_list|,
name|name
argument_list|)
decl_stmt|;
if|if
condition|(
name|acct
operator|!=
literal|null
condition|)
block|{
return|return
name|acct
return|;
block|}
else|else
block|{
comment|//if the account is not cached, we should try and find it in LDAP and cache it if it exists
name|LdapContext
name|ctx
init|=
literal|null
decl_stmt|;
try|try
block|{
name|ctx
operator|=
name|getContext
argument_list|(
name|invokingUser
argument_list|)
expr_stmt|;
comment|//do the lookup
name|SearchResult
name|ldapUser
init|=
name|findAccountByAccountName
argument_list|(
name|ctx
argument_list|,
name|name
argument_list|)
decl_stmt|;
if|if
condition|(
name|ldapUser
operator|==
literal|null
condition|)
block|{
return|return
literal|null
return|;
block|}
else|else
block|{
comment|//found a user from ldap so cache them and return
try|try
block|{
name|LDAPSearchContext
name|search
init|=
name|ensureContextFactory
argument_list|()
operator|.
name|getSearch
argument_list|()
decl_stmt|;
name|String
name|primaryGroup
init|=
name|findGroupBySID
argument_list|(
name|ctx
argument_list|,
name|getPrimaryGroupSID
argument_list|(
name|ldapUser
argument_list|)
argument_list|)
decl_stmt|;
return|return
name|createAccountInDatabase
argument_list|(
name|invokingUser
argument_list|,
name|name
argument_list|,
name|ldapUser
argument_list|,
name|primaryGroup
argument_list|)
return|;
comment|//registerAccount(acct); //TODO do we need this
block|}
catch|catch
parameter_list|(
name|AuthenticationException
name|ae
parameter_list|)
block|{
name|LOG
operator|.
name|error
argument_list|(
name|ae
operator|.
name|getMessage
argument_list|()
argument_list|,
name|ae
argument_list|)
expr_stmt|;
return|return
literal|null
return|;
block|}
block|}
block|}
catch|catch
parameter_list|(
name|NamingException
name|ne
parameter_list|)
block|{
name|LOG
operator|.
name|error
argument_list|(
operator|new
name|AuthenticationException
argument_list|(
name|AuthenticationException
operator|.
name|UNNOWN_EXCEPTION
argument_list|,
name|ne
operator|.
name|getMessage
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
return|return
literal|null
return|;
block|}
finally|finally
block|{
if|if
condition|(
name|ctx
operator|!=
literal|null
condition|)
block|{
name|LdapUtils
operator|.
name|closeContext
argument_list|(
name|ctx
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
comment|/**      * The binary data is in form:      * byte[0] - revision level      * byte[1] - count of sub-authorities      * byte[2-7] - 48 bit authority (big-endian)      * and then count x 32 bit sub authorities (little-endian)      *       * The String value is: S-Revision-Authority-SubAuthority[n]...      *       * http://forums.oracle.com/forums/thread.jspa?threadID=1155740&tstart=0      */
specifier|public
specifier|static
name|String
name|decodeSID
parameter_list|(
name|byte
index|[]
name|sid
parameter_list|)
block|{
specifier|final
name|StringBuilder
name|strSid
init|=
operator|new
name|StringBuilder
argument_list|(
literal|"S-"
argument_list|)
decl_stmt|;
comment|// get version
specifier|final
name|int
name|version
init|=
name|sid
index|[
literal|0
index|]
decl_stmt|;
name|strSid
operator|.
name|append
argument_list|(
name|Integer
operator|.
name|toString
argument_list|(
name|version
argument_list|)
argument_list|)
expr_stmt|;
comment|//get the authority
name|String
name|rid
init|=
literal|""
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|2
init|;
name|i
operator|<=
literal|7
condition|;
name|i
operator|++
control|)
block|{
name|rid
operator|+=
name|byte2hex
argument_list|(
name|sid
index|[
name|i
index|]
argument_list|)
expr_stmt|;
block|}
comment|// get authority
specifier|final
name|long
name|authority
init|=
name|Long
operator|.
name|parseLong
argument_list|(
name|rid
argument_list|)
decl_stmt|;
name|strSid
operator|.
name|append
argument_list|(
literal|"-"
argument_list|)
expr_stmt|;
name|strSid
operator|.
name|append
argument_list|(
name|Long
operator|.
name|toString
argument_list|(
name|authority
argument_list|)
argument_list|)
expr_stmt|;
comment|//next byte is the count of sub-authorities
specifier|final
name|int
name|count
init|=
name|sid
index|[
literal|1
index|]
operator|&
literal|0xFF
decl_stmt|;
comment|//iterate all the sub-auths
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|count
condition|;
name|i
operator|++
control|)
block|{
name|rid
operator|=
literal|""
expr_stmt|;
for|for
control|(
name|int
name|j
init|=
literal|11
init|;
name|j
operator|>
literal|7
condition|;
name|j
operator|--
control|)
block|{
name|rid
operator|+=
name|byte2hex
argument_list|(
name|sid
index|[
name|j
operator|+
operator|(
name|i
operator|*
literal|4
operator|)
index|]
argument_list|)
expr_stmt|;
block|}
name|strSid
operator|.
name|append
argument_list|(
literal|"-"
argument_list|)
expr_stmt|;
name|strSid
operator|.
name|append
argument_list|(
name|Long
operator|.
name|parseLong
argument_list|(
name|rid
argument_list|,
literal|16
argument_list|)
argument_list|)
expr_stmt|;
block|}
return|return
name|strSid
operator|.
name|toString
argument_list|()
return|;
block|}
specifier|public
specifier|static
name|String
name|byte2hex
parameter_list|(
name|byte
name|b
parameter_list|)
block|{
name|String
name|ret
init|=
name|Integer
operator|.
name|toHexString
argument_list|(
operator|(
name|int
operator|)
name|b
operator|&
literal|0xFF
argument_list|)
decl_stmt|;
if|if
condition|(
name|ret
operator|.
name|length
argument_list|()
operator|<
literal|2
condition|)
block|{
name|ret
operator|=
literal|"0"
operator|+
name|ret
expr_stmt|;
block|}
return|return
name|ret
return|;
block|}
specifier|private
name|String
name|getPrimaryGroupSID
parameter_list|(
name|SearchResult
name|ldapUser
parameter_list|)
throws|throws
name|NamingException
block|{
name|LDAPSearchContext
name|search
init|=
name|ensureContextFactory
argument_list|()
operator|.
name|getSearch
argument_list|()
decl_stmt|;
name|byte
index|[]
name|objectSID
init|=
operator|(
name|byte
index|[]
operator|)
name|ldapUser
operator|.
name|getAttributes
argument_list|()
operator|.
name|get
argument_list|(
name|search
operator|.
name|getSearchAccount
argument_list|()
operator|.
name|getSearchAttribute
argument_list|(
name|LDAPSearchAttributeKey
operator|.
name|OBJECT_SID
argument_list|)
argument_list|)
operator|.
name|get
argument_list|()
decl_stmt|;
name|String
name|strPrimaryGroupID
init|=
operator|(
name|String
operator|)
name|ldapUser
operator|.
name|getAttributes
argument_list|()
operator|.
name|get
argument_list|(
name|search
operator|.
name|getSearchAccount
argument_list|()
operator|.
name|getSearchAttribute
argument_list|(
name|LDAPSearchAttributeKey
operator|.
name|PRIMARY_GROUP_ID
argument_list|)
argument_list|)
operator|.
name|get
argument_list|()
decl_stmt|;
name|String
name|strObjectSid
init|=
name|decodeSID
argument_list|(
name|objectSID
argument_list|)
decl_stmt|;
return|return
name|strObjectSid
operator|.
name|substring
argument_list|(
literal|0
argument_list|,
name|strObjectSid
operator|.
name|lastIndexOf
argument_list|(
literal|'-'
argument_list|)
operator|+
literal|1
argument_list|)
operator|+
name|strPrimaryGroupID
return|;
block|}
annotation|@
name|Override
specifier|public
specifier|final
specifier|synchronized
name|Group
name|getGroup
parameter_list|(
name|Subject
name|invokingUser
parameter_list|,
name|String
name|name
parameter_list|)
block|{
name|Group
name|grp
init|=
name|groupsByName
operator|.
name|get
argument_list|(
name|name
argument_list|)
decl_stmt|;
if|if
condition|(
name|grp
operator|!=
literal|null
condition|)
block|{
return|return
name|grp
return|;
block|}
else|else
block|{
comment|//if the group is not cached, we should try and find it in LDAP and cache it if it exists
name|LdapContext
name|ctx
init|=
literal|null
decl_stmt|;
try|try
block|{
name|ctx
operator|=
name|getContext
argument_list|(
name|invokingUser
argument_list|)
expr_stmt|;
comment|//do the lookup
name|SearchResult
name|ldapGroup
init|=
name|findGroupByGroupName
argument_list|(
name|ctx
argument_list|,
name|removeDomainPostfix
argument_list|(
name|name
argument_list|)
argument_list|)
decl_stmt|;
if|if
condition|(
name|ldapGroup
operator|==
literal|null
condition|)
block|{
return|return
literal|null
return|;
block|}
else|else
block|{
comment|//found a group from ldap so cache them and return
try|try
block|{
return|return
name|createGroupInDatabase
argument_list|(
name|invokingUser
argument_list|,
name|name
argument_list|)
return|;
comment|//registerGroup(grp); //TODO do we need to do this?
block|}
catch|catch
parameter_list|(
name|AuthenticationException
name|ae
parameter_list|)
block|{
name|LOG
operator|.
name|error
argument_list|(
name|ae
operator|.
name|getMessage
argument_list|()
argument_list|,
name|ae
argument_list|)
expr_stmt|;
return|return
literal|null
return|;
block|}
block|}
block|}
catch|catch
parameter_list|(
name|NamingException
name|ne
parameter_list|)
block|{
name|LOG
operator|.
name|error
argument_list|(
operator|new
name|AuthenticationException
argument_list|(
name|AuthenticationException
operator|.
name|UNNOWN_EXCEPTION
argument_list|,
name|ne
operator|.
name|getMessage
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
return|return
literal|null
return|;
block|}
finally|finally
block|{
if|if
condition|(
name|ctx
operator|!=
literal|null
condition|)
block|{
name|LdapUtils
operator|.
name|closeContext
argument_list|(
name|ctx
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
specifier|private
name|String
name|addDomainPostfix
parameter_list|(
name|String
name|principalName
parameter_list|)
block|{
name|String
name|name
init|=
name|principalName
decl_stmt|;
if|if
condition|(
name|name
operator|.
name|indexOf
argument_list|(
literal|"@"
argument_list|)
operator|==
operator|-
literal|1
condition|)
block|{
name|name
operator|+=
literal|'@'
operator|+
name|ensureContextFactory
argument_list|()
operator|.
name|getDomain
argument_list|()
expr_stmt|;
block|}
return|return
name|name
return|;
block|}
specifier|private
name|String
name|removeDomainPostfix
parameter_list|(
name|String
name|principalName
parameter_list|)
block|{
name|String
name|name
init|=
name|principalName
decl_stmt|;
if|if
condition|(
name|name
operator|.
name|indexOf
argument_list|(
literal|'@'
argument_list|)
operator|>
operator|-
literal|1
operator|&&
name|name
operator|.
name|endsWith
argument_list|(
name|ensureContextFactory
argument_list|()
operator|.
name|getDomain
argument_list|()
argument_list|)
condition|)
block|{
name|name
operator|=
name|name
operator|.
name|substring
argument_list|(
literal|0
argument_list|,
name|name
operator|.
name|indexOf
argument_list|(
literal|'@'
argument_list|)
argument_list|)
expr_stmt|;
block|}
return|return
name|name
return|;
block|}
specifier|private
name|boolean
name|checkAccountRestrictionList
parameter_list|(
name|String
name|accountname
parameter_list|)
block|{
name|LDAPSearchContext
name|search
init|=
name|ensureContextFactory
argument_list|()
operator|.
name|getSearch
argument_list|()
decl_stmt|;
return|return
name|checkPrincipalRestrictionList
argument_list|(
name|accountname
argument_list|,
name|search
operator|.
name|getSearchAccount
argument_list|()
argument_list|)
return|;
block|}
specifier|private
name|boolean
name|checkGroupRestrictionList
parameter_list|(
name|String
name|groupname
parameter_list|)
block|{
name|LDAPSearchContext
name|search
init|=
name|ensureContextFactory
argument_list|()
operator|.
name|getSearch
argument_list|()
decl_stmt|;
return|return
name|checkPrincipalRestrictionList
argument_list|(
name|groupname
argument_list|,
name|search
operator|.
name|getSearchGroup
argument_list|()
argument_list|)
return|;
block|}
specifier|private
name|boolean
name|checkPrincipalRestrictionList
parameter_list|(
name|String
name|principalName
parameter_list|,
name|AbstractLDAPSearchPrincipal
name|searchPrinciple
parameter_list|)
block|{
if|if
condition|(
name|principalName
operator|.
name|indexOf
argument_list|(
literal|'@'
argument_list|)
operator|>
operator|-
literal|1
condition|)
block|{
name|principalName
operator|=
name|principalName
operator|.
name|substring
argument_list|(
literal|0
argument_list|,
name|principalName
operator|.
name|indexOf
argument_list|(
literal|'@'
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|List
argument_list|<
name|String
argument_list|>
name|blackList
init|=
literal|null
decl_stmt|;
if|if
condition|(
name|searchPrinciple
operator|.
name|getBlackList
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|blackList
operator|=
name|searchPrinciple
operator|.
name|getBlackList
argument_list|()
operator|.
name|getRestrictionList
argument_list|()
expr_stmt|;
block|}
name|List
argument_list|<
name|String
argument_list|>
name|whiteList
init|=
literal|null
decl_stmt|;
if|if
condition|(
name|searchPrinciple
operator|.
name|getWhiteList
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|whiteList
operator|=
name|searchPrinciple
operator|.
name|getWhiteList
argument_list|()
operator|.
name|getRestrictionList
argument_list|()
expr_stmt|;
block|}
if|if
condition|(
name|blackList
operator|!=
literal|null
condition|)
block|{
for|for
control|(
name|String
name|blackEntry
range|:
name|blackList
control|)
block|{
if|if
condition|(
name|blackEntry
operator|.
name|equals
argument_list|(
name|principalName
argument_list|)
condition|)
block|{
return|return
literal|false
return|;
block|}
block|}
block|}
if|if
condition|(
name|whiteList
operator|!=
literal|null
operator|&&
name|whiteList
operator|.
name|size
argument_list|()
operator|>
literal|0
condition|)
block|{
for|for
control|(
name|String
name|whiteEntry
range|:
name|whiteList
control|)
block|{
if|if
condition|(
name|whiteEntry
operator|.
name|equals
argument_list|(
name|principalName
argument_list|)
condition|)
block|{
return|return
literal|true
return|;
block|}
block|}
return|return
literal|false
return|;
block|}
return|return
literal|true
return|;
block|}
specifier|private
name|SearchResult
name|findAccountByAccountName
parameter_list|(
name|DirContext
name|ctx
parameter_list|,
name|String
name|accountName
parameter_list|)
throws|throws
name|NamingException
block|{
if|if
condition|(
operator|!
name|checkAccountRestrictionList
argument_list|(
name|accountName
argument_list|)
condition|)
block|{
return|return
literal|null
return|;
block|}
name|String
name|userName
init|=
name|removeDomainPostfix
argument_list|(
name|accountName
argument_list|)
decl_stmt|;
name|LDAPSearchContext
name|search
init|=
name|ensureContextFactory
argument_list|()
operator|.
name|getSearch
argument_list|()
decl_stmt|;
name|String
name|searchFilter
init|=
name|buildSearchFilter
argument_list|(
name|search
operator|.
name|getSearchAccount
argument_list|()
operator|.
name|getSearchFilterPrefix
argument_list|()
argument_list|,
name|search
operator|.
name|getSearchAccount
argument_list|()
operator|.
name|getSearchAttribute
argument_list|(
name|LDAPSearchAttributeKey
operator|.
name|NAME
argument_list|)
argument_list|,
name|userName
argument_list|)
decl_stmt|;
name|SearchControls
name|searchControls
init|=
operator|new
name|SearchControls
argument_list|()
decl_stmt|;
name|searchControls
operator|.
name|setSearchScope
argument_list|(
name|SearchControls
operator|.
name|SUBTREE_SCOPE
argument_list|)
expr_stmt|;
name|NamingEnumeration
argument_list|<
name|SearchResult
argument_list|>
name|results
init|=
name|ctx
operator|.
name|search
argument_list|(
name|search
operator|.
name|getBase
argument_list|()
argument_list|,
name|searchFilter
argument_list|,
name|searchControls
argument_list|)
decl_stmt|;
name|SearchResult
name|searchResult
init|=
literal|null
decl_stmt|;
if|if
condition|(
name|results
operator|.
name|hasMoreElements
argument_list|()
condition|)
block|{
name|searchResult
operator|=
operator|(
name|SearchResult
operator|)
name|results
operator|.
name|nextElement
argument_list|()
expr_stmt|;
comment|//make sure there is not another item available, there should be only 1 match
if|if
condition|(
name|results
operator|.
name|hasMoreElements
argument_list|()
condition|)
block|{
name|LOG
operator|.
name|error
argument_list|(
literal|"Matched multiple users for the accountName: "
operator|+
name|accountName
argument_list|)
expr_stmt|;
block|}
block|}
return|return
name|searchResult
return|;
block|}
specifier|private
name|String
name|findGroupBySID
parameter_list|(
name|DirContext
name|ctx
parameter_list|,
name|String
name|sid
parameter_list|)
throws|throws
name|NamingException
block|{
name|LDAPSearchContext
name|search
init|=
name|ensureContextFactory
argument_list|()
operator|.
name|getSearch
argument_list|()
decl_stmt|;
name|String
name|searchFilter
init|=
name|buildSearchFilter
argument_list|(
name|search
operator|.
name|getSearchGroup
argument_list|()
operator|.
name|getSearchFilterPrefix
argument_list|()
argument_list|,
name|search
operator|.
name|getSearchGroup
argument_list|()
operator|.
name|getSearchAttribute
argument_list|(
name|LDAPSearchAttributeKey
operator|.
name|OBJECT_SID
argument_list|)
argument_list|,
name|sid
argument_list|)
decl_stmt|;
name|SearchControls
name|searchControls
init|=
operator|new
name|SearchControls
argument_list|()
decl_stmt|;
name|searchControls
operator|.
name|setSearchScope
argument_list|(
name|SearchControls
operator|.
name|SUBTREE_SCOPE
argument_list|)
expr_stmt|;
name|NamingEnumeration
argument_list|<
name|SearchResult
argument_list|>
name|results
init|=
name|ctx
operator|.
name|search
argument_list|(
name|search
operator|.
name|getAbsoluteBase
argument_list|()
argument_list|,
name|searchFilter
argument_list|,
name|searchControls
argument_list|)
decl_stmt|;
if|if
condition|(
name|results
operator|.
name|hasMoreElements
argument_list|()
condition|)
block|{
name|SearchResult
name|searchResult
init|=
operator|(
name|SearchResult
operator|)
name|results
operator|.
name|nextElement
argument_list|()
decl_stmt|;
comment|//make sure there is not another item available, there should be only 1 match
if|if
condition|(
name|results
operator|.
name|hasMoreElements
argument_list|()
condition|)
block|{
name|LOG
operator|.
name|error
argument_list|(
literal|"Matched multiple groups for the group with SID: "
operator|+
name|sid
argument_list|)
expr_stmt|;
return|return
literal|null
return|;
block|}
else|else
block|{
return|return
name|addDomainPostfix
argument_list|(
operator|(
name|String
operator|)
name|searchResult
operator|.
name|getAttributes
argument_list|()
operator|.
name|get
argument_list|(
name|search
operator|.
name|getSearchGroup
argument_list|()
operator|.
name|getSearchAttribute
argument_list|(
name|LDAPSearchAttributeKey
operator|.
name|NAME
argument_list|)
argument_list|)
operator|.
name|get
argument_list|()
argument_list|)
return|;
block|}
block|}
return|return
literal|null
return|;
block|}
specifier|private
name|SearchResult
name|findGroupByGroupName
parameter_list|(
name|DirContext
name|ctx
parameter_list|,
name|String
name|groupName
parameter_list|)
throws|throws
name|NamingException
block|{
if|if
condition|(
operator|!
name|checkGroupRestrictionList
argument_list|(
name|groupName
argument_list|)
condition|)
block|{
return|return
literal|null
return|;
block|}
name|LDAPSearchContext
name|search
init|=
name|ensureContextFactory
argument_list|()
operator|.
name|getSearch
argument_list|()
decl_stmt|;
name|String
name|searchFilter
init|=
name|buildSearchFilter
argument_list|(
name|search
operator|.
name|getSearchGroup
argument_list|()
operator|.
name|getSearchFilterPrefix
argument_list|()
argument_list|,
name|search
operator|.
name|getSearchGroup
argument_list|()
operator|.
name|getSearchAttribute
argument_list|(
name|LDAPSearchAttributeKey
operator|.
name|NAME
argument_list|)
argument_list|,
name|groupName
argument_list|)
decl_stmt|;
name|SearchControls
name|searchControls
init|=
operator|new
name|SearchControls
argument_list|()
decl_stmt|;
name|searchControls
operator|.
name|setSearchScope
argument_list|(
name|SearchControls
operator|.
name|SUBTREE_SCOPE
argument_list|)
expr_stmt|;
name|NamingEnumeration
argument_list|<
name|SearchResult
argument_list|>
name|results
init|=
name|ctx
operator|.
name|search
argument_list|(
name|search
operator|.
name|getAbsoluteBase
argument_list|()
argument_list|,
name|searchFilter
argument_list|,
name|searchControls
argument_list|)
decl_stmt|;
if|if
condition|(
name|results
operator|.
name|hasMoreElements
argument_list|()
condition|)
block|{
name|SearchResult
name|searchResult
init|=
operator|(
name|SearchResult
operator|)
name|results
operator|.
name|nextElement
argument_list|()
decl_stmt|;
comment|//make sure there is not another item available, there should be only 1 match
if|if
condition|(
name|results
operator|.
name|hasMoreElements
argument_list|()
condition|)
block|{
name|LOG
operator|.
name|error
argument_list|(
literal|"Matched multiple groups for the groupName: "
operator|+
name|groupName
argument_list|)
expr_stmt|;
return|return
literal|null
return|;
block|}
else|else
block|{
return|return
name|searchResult
return|;
block|}
block|}
return|return
literal|null
return|;
block|}
comment|// configurable methods
annotation|@
name|Override
specifier|public
name|boolean
name|isConfigured
parameter_list|()
block|{
return|return
operator|(
name|configuration
operator|!=
literal|null
operator|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|Configuration
name|getConfiguration
parameter_list|()
block|{
return|return
name|configuration
return|;
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|updateAccount
parameter_list|(
name|Subject
name|invokingUser
parameter_list|,
name|Account
name|account
parameter_list|)
throws|throws
name|PermissionDeniedException
throws|,
name|EXistException
block|{
comment|// TODO Auto-generated method stub
return|return
name|super
operator|.
name|updateAccount
argument_list|(
name|invokingUser
argument_list|,
name|account
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|deleteAccount
parameter_list|(
name|Subject
name|invokingUser
parameter_list|,
name|Account
name|account
parameter_list|)
throws|throws
name|PermissionDeniedException
throws|,
name|EXistException
block|{
comment|// TODO we dont support writting to LDAP
return|return
literal|false
return|;
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|updateGroup
parameter_list|(
name|Subject
name|invokingUser
parameter_list|,
name|Group
name|group
parameter_list|)
throws|throws
name|PermissionDeniedException
throws|,
name|EXistException
block|{
comment|// TODO we dont support writting to LDAP
return|return
literal|false
return|;
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|deleteGroup
parameter_list|(
name|Group
name|group
parameter_list|)
throws|throws
name|PermissionDeniedException
throws|,
name|EXistException
block|{
comment|// TODO Auto-generated method stub
return|return
literal|false
return|;
block|}
specifier|private
name|String
name|buildSearchFilter
parameter_list|(
name|String
name|searchPrefix
parameter_list|,
name|String
name|attrName
parameter_list|,
name|String
name|attrValue
parameter_list|)
block|{
name|StringBuilder
name|builder
init|=
operator|new
name|StringBuilder
argument_list|()
decl_stmt|;
name|builder
operator|.
name|append
argument_list|(
literal|"("
argument_list|)
expr_stmt|;
name|builder
operator|.
name|append
argument_list|(
name|buildSearchCriteria
argument_list|(
name|searchPrefix
argument_list|)
argument_list|)
expr_stmt|;
if|if
condition|(
name|attrName
operator|!=
literal|null
operator|&&
name|attrValue
operator|!=
literal|null
condition|)
block|{
name|builder
operator|.
name|append
argument_list|(
literal|"("
argument_list|)
expr_stmt|;
name|builder
operator|.
name|append
argument_list|(
name|attrName
argument_list|)
expr_stmt|;
name|builder
operator|.
name|append
argument_list|(
literal|"="
argument_list|)
expr_stmt|;
name|builder
operator|.
name|append
argument_list|(
name|attrValue
argument_list|)
expr_stmt|;
name|builder
operator|.
name|append
argument_list|(
literal|")"
argument_list|)
expr_stmt|;
block|}
name|builder
operator|.
name|append
argument_list|(
literal|")"
argument_list|)
expr_stmt|;
return|return
name|builder
operator|.
name|toString
argument_list|()
return|;
block|}
specifier|private
name|String
name|buildSearchCriteria
parameter_list|(
name|String
name|searchPrefix
parameter_list|)
block|{
return|return
literal|"&("
operator|+
name|searchPrefix
operator|+
literal|")"
return|;
block|}
annotation|@
name|Override
specifier|public
name|List
argument_list|<
name|String
argument_list|>
name|findUsernamesWhereNameStarts
parameter_list|(
name|Subject
name|invokingUser
parameter_list|,
name|String
name|startsWith
parameter_list|)
block|{
name|List
argument_list|<
name|String
argument_list|>
name|usernames
init|=
operator|new
name|ArrayList
argument_list|<
name|String
argument_list|>
argument_list|()
decl_stmt|;
name|LdapContext
name|ctx
init|=
literal|null
decl_stmt|;
try|try
block|{
name|ctx
operator|=
name|getContext
argument_list|(
name|invokingUser
argument_list|)
expr_stmt|;
name|LDAPSearchContext
name|search
init|=
name|ensureContextFactory
argument_list|()
operator|.
name|getSearch
argument_list|()
decl_stmt|;
name|String
name|searchFilter
init|=
name|buildSearchFilter
argument_list|(
name|search
operator|.
name|getSearchAccount
argument_list|()
operator|.
name|getSearchFilterPrefix
argument_list|()
argument_list|,
name|search
operator|.
name|getSearchAccount
argument_list|()
operator|.
name|getMetadataSearchAttribute
argument_list|(
name|AXSchemaType
operator|.
name|FULLNAME
argument_list|)
argument_list|,
name|startsWith
operator|+
literal|"*"
argument_list|)
decl_stmt|;
name|SearchControls
name|searchControls
init|=
operator|new
name|SearchControls
argument_list|()
decl_stmt|;
name|searchControls
operator|.
name|setSearchScope
argument_list|(
name|SearchControls
operator|.
name|SUBTREE_SCOPE
argument_list|)
expr_stmt|;
name|searchControls
operator|.
name|setReturningAttributes
argument_list|(
operator|new
name|String
index|[]
block|{
name|search
operator|.
name|getSearchAccount
argument_list|()
operator|.
name|getSearchAttribute
argument_list|(
name|LDAPSearchAttributeKey
operator|.
name|NAME
argument_list|)
block|}
argument_list|)
expr_stmt|;
name|NamingEnumeration
argument_list|<
name|SearchResult
argument_list|>
name|results
init|=
name|ctx
operator|.
name|search
argument_list|(
name|search
operator|.
name|getBase
argument_list|()
argument_list|,
name|searchFilter
argument_list|,
name|searchControls
argument_list|)
decl_stmt|;
name|SearchResult
name|searchResult
init|=
literal|null
decl_stmt|;
while|while
condition|(
name|results
operator|.
name|hasMoreElements
argument_list|()
condition|)
block|{
name|searchResult
operator|=
operator|(
name|SearchResult
operator|)
name|results
operator|.
name|nextElement
argument_list|()
expr_stmt|;
name|String
name|username
init|=
name|addDomainPostfix
argument_list|(
operator|(
name|String
operator|)
name|searchResult
operator|.
name|getAttributes
argument_list|()
operator|.
name|get
argument_list|(
name|search
operator|.
name|getSearchAccount
argument_list|()
operator|.
name|getSearchAttribute
argument_list|(
name|LDAPSearchAttributeKey
operator|.
name|NAME
argument_list|)
argument_list|)
operator|.
name|get
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|checkAccountRestrictionList
argument_list|(
name|username
argument_list|)
condition|)
block|{
name|usernames
operator|.
name|add
argument_list|(
name|username
argument_list|)
expr_stmt|;
block|}
block|}
block|}
catch|catch
parameter_list|(
name|NamingException
name|ne
parameter_list|)
block|{
name|LOG
operator|.
name|error
argument_list|(
operator|new
name|AuthenticationException
argument_list|(
name|AuthenticationException
operator|.
name|UNNOWN_EXCEPTION
argument_list|,
name|ne
operator|.
name|getMessage
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
if|if
condition|(
name|ctx
operator|!=
literal|null
condition|)
block|{
name|LdapUtils
operator|.
name|closeContext
argument_list|(
name|ctx
argument_list|)
expr_stmt|;
block|}
block|}
return|return
name|usernames
return|;
block|}
annotation|@
name|Override
specifier|public
name|List
argument_list|<
name|String
argument_list|>
name|findUsernamesWhereUsernameStarts
parameter_list|(
name|Subject
name|invokingUser
parameter_list|,
name|String
name|startsWith
parameter_list|)
block|{
name|List
argument_list|<
name|String
argument_list|>
name|usernames
init|=
operator|new
name|ArrayList
argument_list|<
name|String
argument_list|>
argument_list|()
decl_stmt|;
name|LdapContext
name|ctx
init|=
literal|null
decl_stmt|;
try|try
block|{
name|ctx
operator|=
name|getContext
argument_list|(
name|invokingUser
argument_list|)
expr_stmt|;
name|LDAPSearchContext
name|search
init|=
name|ensureContextFactory
argument_list|()
operator|.
name|getSearch
argument_list|()
decl_stmt|;
name|String
name|searchFilter
init|=
name|buildSearchFilter
argument_list|(
name|search
operator|.
name|getSearchAccount
argument_list|()
operator|.
name|getSearchFilterPrefix
argument_list|()
argument_list|,
name|search
operator|.
name|getSearchAccount
argument_list|()
operator|.
name|getSearchAttribute
argument_list|(
name|LDAPSearchAttributeKey
operator|.
name|NAME
argument_list|)
argument_list|,
name|startsWith
operator|+
literal|"*"
argument_list|)
decl_stmt|;
name|SearchControls
name|searchControls
init|=
operator|new
name|SearchControls
argument_list|()
decl_stmt|;
name|searchControls
operator|.
name|setSearchScope
argument_list|(
name|SearchControls
operator|.
name|SUBTREE_SCOPE
argument_list|)
expr_stmt|;
name|searchControls
operator|.
name|setReturningAttributes
argument_list|(
operator|new
name|String
index|[]
block|{
name|search
operator|.
name|getSearchAccount
argument_list|()
operator|.
name|getSearchAttribute
argument_list|(
name|LDAPSearchAttributeKey
operator|.
name|NAME
argument_list|)
block|}
argument_list|)
expr_stmt|;
name|NamingEnumeration
argument_list|<
name|SearchResult
argument_list|>
name|results
init|=
name|ctx
operator|.
name|search
argument_list|(
name|search
operator|.
name|getBase
argument_list|()
argument_list|,
name|searchFilter
argument_list|,
name|searchControls
argument_list|)
decl_stmt|;
name|SearchResult
name|searchResult
init|=
literal|null
decl_stmt|;
while|while
condition|(
name|results
operator|.
name|hasMoreElements
argument_list|()
condition|)
block|{
name|searchResult
operator|=
operator|(
name|SearchResult
operator|)
name|results
operator|.
name|nextElement
argument_list|()
expr_stmt|;
name|String
name|username
init|=
name|addDomainPostfix
argument_list|(
operator|(
name|String
operator|)
name|searchResult
operator|.
name|getAttributes
argument_list|()
operator|.
name|get
argument_list|(
name|search
operator|.
name|getSearchAccount
argument_list|()
operator|.
name|getSearchAttribute
argument_list|(
name|LDAPSearchAttributeKey
operator|.
name|NAME
argument_list|)
argument_list|)
operator|.
name|get
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|checkAccountRestrictionList
argument_list|(
name|username
argument_list|)
condition|)
block|{
name|usernames
operator|.
name|add
argument_list|(
name|username
argument_list|)
expr_stmt|;
block|}
block|}
block|}
catch|catch
parameter_list|(
name|NamingException
name|ne
parameter_list|)
block|{
name|LOG
operator|.
name|error
argument_list|(
operator|new
name|AuthenticationException
argument_list|(
name|AuthenticationException
operator|.
name|UNNOWN_EXCEPTION
argument_list|,
name|ne
operator|.
name|getMessage
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
if|if
condition|(
name|ctx
operator|!=
literal|null
condition|)
block|{
name|LdapUtils
operator|.
name|closeContext
argument_list|(
name|ctx
argument_list|)
expr_stmt|;
block|}
block|}
return|return
name|usernames
return|;
block|}
specifier|private
name|List
argument_list|<
name|String
argument_list|>
name|findGroupnamesForUserDistinguishedName
parameter_list|(
name|Subject
name|invokingUser
parameter_list|,
name|String
name|userDistinguishedName
parameter_list|)
block|{
name|List
argument_list|<
name|String
argument_list|>
name|groupnames
init|=
operator|new
name|ArrayList
argument_list|<
name|String
argument_list|>
argument_list|()
decl_stmt|;
name|LdapContext
name|ctx
init|=
literal|null
decl_stmt|;
try|try
block|{
name|ctx
operator|=
name|getContext
argument_list|(
name|invokingUser
argument_list|)
expr_stmt|;
name|LDAPSearchContext
name|search
init|=
name|ensureContextFactory
argument_list|()
operator|.
name|getSearch
argument_list|()
decl_stmt|;
name|String
name|searchFilter
init|=
name|buildSearchFilter
argument_list|(
name|search
operator|.
name|getSearchGroup
argument_list|()
operator|.
name|getSearchFilterPrefix
argument_list|()
argument_list|,
name|search
operator|.
name|getSearchGroup
argument_list|()
operator|.
name|getSearchAttribute
argument_list|(
name|LDAPSearchAttributeKey
operator|.
name|MEMBER
argument_list|)
argument_list|,
name|userDistinguishedName
argument_list|)
decl_stmt|;
name|SearchControls
name|searchControls
init|=
operator|new
name|SearchControls
argument_list|()
decl_stmt|;
name|searchControls
operator|.
name|setSearchScope
argument_list|(
name|SearchControls
operator|.
name|SUBTREE_SCOPE
argument_list|)
expr_stmt|;
name|searchControls
operator|.
name|setReturningAttributes
argument_list|(
operator|new
name|String
index|[]
block|{
name|search
operator|.
name|getSearchGroup
argument_list|()
operator|.
name|getSearchAttribute
argument_list|(
name|LDAPSearchAttributeKey
operator|.
name|NAME
argument_list|)
block|}
argument_list|)
expr_stmt|;
name|NamingEnumeration
argument_list|<
name|SearchResult
argument_list|>
name|results
init|=
name|ctx
operator|.
name|search
argument_list|(
name|search
operator|.
name|getAbsoluteBase
argument_list|()
argument_list|,
name|searchFilter
argument_list|,
name|searchControls
argument_list|)
decl_stmt|;
name|SearchResult
name|searchResult
init|=
literal|null
decl_stmt|;
while|while
condition|(
name|results
operator|.
name|hasMoreElements
argument_list|()
condition|)
block|{
name|searchResult
operator|=
operator|(
name|SearchResult
operator|)
name|results
operator|.
name|nextElement
argument_list|()
expr_stmt|;
name|String
name|groupname
init|=
name|addDomainPostfix
argument_list|(
operator|(
name|String
operator|)
name|searchResult
operator|.
name|getAttributes
argument_list|()
operator|.
name|get
argument_list|(
name|search
operator|.
name|getSearchGroup
argument_list|()
operator|.
name|getSearchAttribute
argument_list|(
name|LDAPSearchAttributeKey
operator|.
name|NAME
argument_list|)
argument_list|)
operator|.
name|get
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|checkGroupRestrictionList
argument_list|(
name|groupname
argument_list|)
condition|)
block|{
name|groupnames
operator|.
name|add
argument_list|(
name|groupname
argument_list|)
expr_stmt|;
block|}
block|}
block|}
catch|catch
parameter_list|(
name|NamingException
name|ne
parameter_list|)
block|{
name|LOG
operator|.
name|error
argument_list|(
operator|new
name|AuthenticationException
argument_list|(
name|AuthenticationException
operator|.
name|UNNOWN_EXCEPTION
argument_list|,
name|ne
operator|.
name|getMessage
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
if|if
condition|(
name|ctx
operator|!=
literal|null
condition|)
block|{
name|LdapUtils
operator|.
name|closeContext
argument_list|(
name|ctx
argument_list|)
expr_stmt|;
block|}
block|}
return|return
name|groupnames
return|;
block|}
annotation|@
name|Override
specifier|public
name|List
argument_list|<
name|String
argument_list|>
name|findGroupnamesWhereGroupnameStarts
parameter_list|(
name|Subject
name|invokingUser
parameter_list|,
name|String
name|startsWith
parameter_list|)
block|{
name|List
argument_list|<
name|String
argument_list|>
name|groupnames
init|=
operator|new
name|ArrayList
argument_list|<
name|String
argument_list|>
argument_list|()
decl_stmt|;
name|LdapContext
name|ctx
init|=
literal|null
decl_stmt|;
try|try
block|{
name|ctx
operator|=
name|getContext
argument_list|(
name|invokingUser
argument_list|)
expr_stmt|;
name|LDAPSearchContext
name|search
init|=
name|ensureContextFactory
argument_list|()
operator|.
name|getSearch
argument_list|()
decl_stmt|;
name|String
name|searchFilter
init|=
name|buildSearchFilter
argument_list|(
name|search
operator|.
name|getSearchGroup
argument_list|()
operator|.
name|getSearchFilterPrefix
argument_list|()
argument_list|,
name|search
operator|.
name|getSearchGroup
argument_list|()
operator|.
name|getSearchAttribute
argument_list|(
name|LDAPSearchAttributeKey
operator|.
name|NAME
argument_list|)
argument_list|,
name|startsWith
operator|+
literal|"*"
argument_list|)
decl_stmt|;
name|SearchControls
name|searchControls
init|=
operator|new
name|SearchControls
argument_list|()
decl_stmt|;
name|searchControls
operator|.
name|setSearchScope
argument_list|(
name|SearchControls
operator|.
name|SUBTREE_SCOPE
argument_list|)
expr_stmt|;
name|searchControls
operator|.
name|setReturningAttributes
argument_list|(
operator|new
name|String
index|[]
block|{
name|search
operator|.
name|getSearchGroup
argument_list|()
operator|.
name|getSearchAttribute
argument_list|(
name|LDAPSearchAttributeKey
operator|.
name|NAME
argument_list|)
block|}
argument_list|)
expr_stmt|;
name|NamingEnumeration
argument_list|<
name|SearchResult
argument_list|>
name|results
init|=
name|ctx
operator|.
name|search
argument_list|(
name|search
operator|.
name|getBase
argument_list|()
argument_list|,
name|searchFilter
argument_list|,
name|searchControls
argument_list|)
decl_stmt|;
name|SearchResult
name|searchResult
init|=
literal|null
decl_stmt|;
while|while
condition|(
name|results
operator|.
name|hasMoreElements
argument_list|()
condition|)
block|{
name|searchResult
operator|=
operator|(
name|SearchResult
operator|)
name|results
operator|.
name|nextElement
argument_list|()
expr_stmt|;
name|String
name|groupname
init|=
name|addDomainPostfix
argument_list|(
operator|(
name|String
operator|)
name|searchResult
operator|.
name|getAttributes
argument_list|()
operator|.
name|get
argument_list|(
name|search
operator|.
name|getSearchGroup
argument_list|()
operator|.
name|getSearchAttribute
argument_list|(
name|LDAPSearchAttributeKey
operator|.
name|NAME
argument_list|)
argument_list|)
operator|.
name|get
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|checkGroupRestrictionList
argument_list|(
name|groupname
argument_list|)
condition|)
block|{
name|groupnames
operator|.
name|add
argument_list|(
name|groupname
argument_list|)
expr_stmt|;
block|}
block|}
block|}
catch|catch
parameter_list|(
name|NamingException
name|ne
parameter_list|)
block|{
name|LOG
operator|.
name|error
argument_list|(
operator|new
name|AuthenticationException
argument_list|(
name|AuthenticationException
operator|.
name|UNNOWN_EXCEPTION
argument_list|,
name|ne
operator|.
name|getMessage
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
if|if
condition|(
name|ctx
operator|!=
literal|null
condition|)
block|{
name|LdapUtils
operator|.
name|closeContext
argument_list|(
name|ctx
argument_list|)
expr_stmt|;
block|}
block|}
return|return
name|groupnames
return|;
block|}
annotation|@
name|Override
specifier|public
name|List
argument_list|<
name|String
argument_list|>
name|findAllGroupNames
parameter_list|(
name|Subject
name|invokingUser
parameter_list|)
block|{
name|List
argument_list|<
name|String
argument_list|>
name|groupnames
init|=
operator|new
name|ArrayList
argument_list|<
name|String
argument_list|>
argument_list|()
decl_stmt|;
name|LdapContext
name|ctx
init|=
literal|null
decl_stmt|;
try|try
block|{
name|ctx
operator|=
name|getContext
argument_list|(
name|invokingUser
argument_list|)
expr_stmt|;
name|LDAPSearchContext
name|search
init|=
name|ensureContextFactory
argument_list|()
operator|.
name|getSearch
argument_list|()
decl_stmt|;
name|String
name|searchFilter
init|=
name|buildSearchFilter
argument_list|(
name|search
operator|.
name|getSearchGroup
argument_list|()
operator|.
name|getSearchFilterPrefix
argument_list|()
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|)
decl_stmt|;
name|SearchControls
name|searchControls
init|=
operator|new
name|SearchControls
argument_list|()
decl_stmt|;
name|searchControls
operator|.
name|setSearchScope
argument_list|(
name|SearchControls
operator|.
name|SUBTREE_SCOPE
argument_list|)
expr_stmt|;
name|searchControls
operator|.
name|setReturningAttributes
argument_list|(
operator|new
name|String
index|[]
block|{
name|search
operator|.
name|getSearchGroup
argument_list|()
operator|.
name|getSearchAttribute
argument_list|(
name|LDAPSearchAttributeKey
operator|.
name|NAME
argument_list|)
block|}
argument_list|)
expr_stmt|;
name|NamingEnumeration
argument_list|<
name|SearchResult
argument_list|>
name|results
init|=
name|ctx
operator|.
name|search
argument_list|(
name|search
operator|.
name|getBase
argument_list|()
argument_list|,
name|searchFilter
argument_list|,
name|searchControls
argument_list|)
decl_stmt|;
name|SearchResult
name|searchResult
init|=
literal|null
decl_stmt|;
while|while
condition|(
name|results
operator|.
name|hasMoreElements
argument_list|()
condition|)
block|{
name|searchResult
operator|=
operator|(
name|SearchResult
operator|)
name|results
operator|.
name|nextElement
argument_list|()
expr_stmt|;
name|String
name|groupname
init|=
name|addDomainPostfix
argument_list|(
operator|(
name|String
operator|)
name|searchResult
operator|.
name|getAttributes
argument_list|()
operator|.
name|get
argument_list|(
name|search
operator|.
name|getSearchGroup
argument_list|()
operator|.
name|getSearchAttribute
argument_list|(
name|LDAPSearchAttributeKey
operator|.
name|NAME
argument_list|)
argument_list|)
operator|.
name|get
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|checkGroupRestrictionList
argument_list|(
name|groupname
argument_list|)
condition|)
block|{
name|groupnames
operator|.
name|add
argument_list|(
name|groupname
argument_list|)
expr_stmt|;
block|}
block|}
block|}
catch|catch
parameter_list|(
name|NamingException
name|ne
parameter_list|)
block|{
name|LOG
operator|.
name|error
argument_list|(
operator|new
name|AuthenticationException
argument_list|(
name|AuthenticationException
operator|.
name|UNNOWN_EXCEPTION
argument_list|,
name|ne
operator|.
name|getMessage
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
if|if
condition|(
name|ctx
operator|!=
literal|null
condition|)
block|{
name|LdapUtils
operator|.
name|closeContext
argument_list|(
name|ctx
argument_list|)
expr_stmt|;
block|}
block|}
return|return
name|groupnames
return|;
block|}
annotation|@
name|Override
specifier|public
name|List
argument_list|<
name|String
argument_list|>
name|findAllGroupMembers
parameter_list|(
name|Subject
name|invokingUser
parameter_list|,
name|String
name|groupName
parameter_list|)
block|{
name|List
argument_list|<
name|String
argument_list|>
name|groupMembers
init|=
operator|new
name|ArrayList
argument_list|<
name|String
argument_list|>
argument_list|()
decl_stmt|;
if|if
condition|(
operator|!
name|checkGroupRestrictionList
argument_list|(
name|groupName
argument_list|)
condition|)
block|{
return|return
name|groupMembers
return|;
block|}
name|LdapContext
name|ctx
init|=
literal|null
decl_stmt|;
try|try
block|{
name|ctx
operator|=
name|getContext
argument_list|(
name|invokingUser
argument_list|)
expr_stmt|;
comment|//find the dn of the group
name|SearchResult
name|searchResult
init|=
name|findGroupByGroupName
argument_list|(
name|ctx
argument_list|,
name|removeDomainPostfix
argument_list|(
name|groupName
argument_list|)
argument_list|)
decl_stmt|;
name|LDAPSearchContext
name|search
init|=
name|ensureContextFactory
argument_list|()
operator|.
name|getSearch
argument_list|()
decl_stmt|;
name|String
name|dnGroup
init|=
operator|(
name|String
operator|)
name|searchResult
operator|.
name|getAttributes
argument_list|()
operator|.
name|get
argument_list|(
name|search
operator|.
name|getSearchGroup
argument_list|()
operator|.
name|getSearchAttribute
argument_list|(
name|LDAPSearchAttributeKey
operator|.
name|DN
argument_list|)
argument_list|)
operator|.
name|get
argument_list|()
decl_stmt|;
comment|//find all accounts that are a member of the group
name|String
name|searchFilter
init|=
name|buildSearchFilter
argument_list|(
name|search
operator|.
name|getSearchAccount
argument_list|()
operator|.
name|getSearchFilterPrefix
argument_list|()
argument_list|,
name|search
operator|.
name|getSearchAccount
argument_list|()
operator|.
name|getSearchAttribute
argument_list|(
name|LDAPSearchAttributeKey
operator|.
name|MEMBER_OF
argument_list|)
argument_list|,
name|dnGroup
argument_list|)
decl_stmt|;
name|SearchControls
name|searchControls
init|=
operator|new
name|SearchControls
argument_list|()
decl_stmt|;
name|searchControls
operator|.
name|setSearchScope
argument_list|(
name|SearchControls
operator|.
name|SUBTREE_SCOPE
argument_list|)
expr_stmt|;
name|searchControls
operator|.
name|setReturningAttributes
argument_list|(
operator|new
name|String
index|[]
block|{
name|search
operator|.
name|getSearchAccount
argument_list|()
operator|.
name|getSearchAttribute
argument_list|(
name|LDAPSearchAttributeKey
operator|.
name|NAME
argument_list|)
block|}
argument_list|)
expr_stmt|;
name|NamingEnumeration
argument_list|<
name|SearchResult
argument_list|>
name|results
init|=
name|ctx
operator|.
name|search
argument_list|(
name|search
operator|.
name|getBase
argument_list|()
argument_list|,
name|searchFilter
argument_list|,
name|searchControls
argument_list|)
decl_stmt|;
while|while
condition|(
name|results
operator|.
name|hasMoreElements
argument_list|()
condition|)
block|{
name|searchResult
operator|=
operator|(
name|SearchResult
operator|)
name|results
operator|.
name|nextElement
argument_list|()
expr_stmt|;
name|String
name|member
init|=
name|addDomainPostfix
argument_list|(
operator|(
name|String
operator|)
name|searchResult
operator|.
name|getAttributes
argument_list|()
operator|.
name|get
argument_list|(
name|search
operator|.
name|getSearchAccount
argument_list|()
operator|.
name|getSearchAttribute
argument_list|(
name|LDAPSearchAttributeKey
operator|.
name|NAME
argument_list|)
argument_list|)
operator|.
name|get
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|checkAccountRestrictionList
argument_list|(
name|member
argument_list|)
condition|)
block|{
name|groupMembers
operator|.
name|add
argument_list|(
name|member
argument_list|)
expr_stmt|;
block|}
block|}
block|}
catch|catch
parameter_list|(
name|NamingException
name|ne
parameter_list|)
block|{
name|LOG
operator|.
name|error
argument_list|(
operator|new
name|AuthenticationException
argument_list|(
name|AuthenticationException
operator|.
name|UNNOWN_EXCEPTION
argument_list|,
name|ne
operator|.
name|getMessage
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
if|if
condition|(
name|ctx
operator|!=
literal|null
condition|)
block|{
name|LdapUtils
operator|.
name|closeContext
argument_list|(
name|ctx
argument_list|)
expr_stmt|;
block|}
block|}
return|return
name|groupMembers
return|;
block|}
comment|//    @Override
comment|//    public LDAPGroupImpl instantiateGroup(AbstractRealm realm, Configuration config) throws ConfigurationException {
comment|//        return new LDAPGroupImpl(realm, config);
comment|//    }
comment|//
comment|//    @Override
comment|//    public LDAPGroupImpl instantiateGroup(AbstractRealm realm, Configuration config, boolean removed) throws ConfigurationException {
comment|//        return new LDAPGroupImpl(realm, config, removed);
comment|//    }
comment|//
comment|//    @Override
comment|//    public LDAPGroupImpl instantiateGroup(AbstractRealm realm, int id, String name) throws ConfigurationException {
comment|//        return new LDAPGroupImpl(realm, id, name);
comment|//    }
comment|//
comment|//    @Override
comment|//    public LDAPGroupImpl instantiateGroup(AbstractRealm realm, String name) throws ConfigurationException {
comment|//        return new LDAPGroupImpl(realm, name);
comment|//    }
comment|//
comment|//    @Override
comment|//    public LDAPAccountImpl instantiateAccount(AbstractRealm realm, String username) throws ConfigurationException {
comment|//        return new LDAPAccountImpl(realm, username);
comment|//    }
comment|//
comment|//    @Override
comment|//    public LDAPAccountImpl instantiateAccount(AbstractRealm realm, Configuration config) throws ConfigurationException {
comment|//        return new LDAPAccountImpl(realm, config);
comment|//    }
comment|//
comment|//    @Override
comment|//    public LDAPAccountImpl instantiateAccount(AbstractRealm realm, Configuration config, boolean removed) throws ConfigurationException {
comment|//        return new LDAPAccountImpl(realm, config, removed);
comment|//    }
comment|//
comment|//    @Override
comment|//    public LDAPAccountImpl instantiateAccount(AbstractRealm realm, int id, Account from_account) throws ConfigurationException, PermissionDeniedException {
comment|//        return new LDAPAccountImpl(realm, id, from_account);
comment|//    }
specifier|private
specifier|final
class|class
name|AuthenticatedLdapSubjectAccreditedImpl
extends|extends
name|SubjectAccreditedImpl
block|{
specifier|private
specifier|final
name|String
name|authenticatedCredentials
decl_stmt|;
specifier|private
name|AuthenticatedLdapSubjectAccreditedImpl
parameter_list|(
name|AbstractAccount
name|account
parameter_list|,
name|LdapContext
name|ctx
parameter_list|,
name|String
name|authenticatedCredentials
parameter_list|)
block|{
name|super
argument_list|(
name|account
argument_list|,
name|ctx
argument_list|)
expr_stmt|;
name|this
operator|.
name|authenticatedCredentials
operator|=
name|authenticatedCredentials
expr_stmt|;
block|}
specifier|private
name|String
name|getAuthenticatedCredentials
parameter_list|()
block|{
return|return
name|authenticatedCredentials
return|;
block|}
block|}
block|}
end_class

end_unit

