begin_unit|revision:1.0.0;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  *  eXist Open Source Native XML Database  *  Copyright (C) 2010 The eXist Project  *  http://exist-db.org  *    *  This program is free software; you can redistribute it and/or  *  modify it under the terms of the GNU Lesser General Public License  *  as published by the Free Software Foundation; either version 2  *  of the License, or (at your option) any later version.  *    *  This program is distributed in the hope that it will be useful,  *  but WITHOUT ANY WARRANTY; without even the implied warranty of  *  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the  *  GNU Lesser General Public License for more details.  *    *  You should have received a copy of the GNU Lesser General Public License  *  along with this program; if not, write to the Free Software  *  Foundation, Inc., 675 Mass Ave, Cambridge, MA 02139, USA.  *    *  $Id$  */
end_comment

begin_package
package|package
name|org
operator|.
name|exist
operator|.
name|security
operator|.
name|realm
operator|.
name|openid
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Set
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|config
operator|.
name|ConfigurationException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|config
operator|.
name|annotation
operator|.
name|ConfigurationClass
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|security
operator|.
name|AXSchemaType
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|security
operator|.
name|Group
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|security
operator|.
name|PermissionDeniedException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|security
operator|.
name|AbstractAccount
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|security
operator|.
name|AbstractRealm
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|security
operator|.
name|Account
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|security
operator|.
name|internal
operator|.
name|GroupImpl
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|security
operator|.
name|SecurityManager
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|xmldb
operator|.
name|XmldbURI
import|;
end_import

begin_import
import|import
name|org
operator|.
name|openid4java
operator|.
name|discovery
operator|.
name|Identifier
import|;
end_import

begin_comment
comment|/**  * @author<a href="mailto:shabanovd@gmail.com">Dmitriy Shabanov</a>  *  */
end_comment

begin_class
annotation|@
name|ConfigurationClass
argument_list|(
literal|"account"
argument_list|)
specifier|public
class|class
name|AccountImpl
extends|extends
name|AbstractAccount
block|{
name|Identifier
name|_identifier
init|=
literal|null
decl_stmt|;
specifier|public
name|AccountImpl
parameter_list|(
name|AbstractRealm
name|realm
parameter_list|,
name|Identifier
name|identifier
parameter_list|)
throws|throws
name|ConfigurationException
block|{
name|super
argument_list|(
name|realm
argument_list|,
operator|-
literal|1
argument_list|,
name|identifier
operator|.
name|getIdentifier
argument_list|()
argument_list|)
expr_stmt|;
name|_identifier
operator|=
name|identifier
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|setPassword
parameter_list|(
name|String
name|passwd
parameter_list|)
block|{
block|}
annotation|@
name|Override
specifier|public
name|String
name|getPassword
parameter_list|()
block|{
return|return
literal|null
return|;
block|}
annotation|@
name|Override
specifier|public
name|XmldbURI
name|getHome
parameter_list|()
block|{
comment|// TODO Auto-generated method stub
return|return
literal|null
return|;
block|}
annotation|@
name|Override
specifier|public
name|String
name|getDigestPassword
parameter_list|()
block|{
return|return
literal|null
return|;
block|}
comment|//TODO: find a place to construct 'full' name
specifier|public
name|String
name|getName_
parameter_list|()
block|{
name|String
name|name
init|=
literal|""
decl_stmt|;
name|Set
argument_list|<
name|AXSchemaType
argument_list|>
name|metadataKeys
init|=
name|getMetadataKeys
argument_list|()
decl_stmt|;
if|if
condition|(
name|metadataKeys
operator|.
name|contains
argument_list|(
name|AXSchemaType
operator|.
name|FIRSTNAME
argument_list|)
condition|)
block|{
name|name
operator|+=
name|getMetadataValue
argument_list|(
name|AXSchemaType
operator|.
name|FIRSTNAME
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|metadataKeys
operator|.
name|contains
argument_list|(
name|AXSchemaType
operator|.
name|LASTNAME
argument_list|)
condition|)
block|{
if|if
condition|(
name|name
operator|.
name|length
argument_list|()
operator|>
literal|0
condition|)
block|{
name|name
operator|+=
literal|" "
expr_stmt|;
block|}
name|name
operator|+=
name|getMetadataValue
argument_list|(
name|AXSchemaType
operator|.
name|LASTNAME
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|name
operator|.
name|length
argument_list|()
operator|==
literal|0
condition|)
block|{
name|name
operator|+=
name|getMetadataValue
argument_list|(
name|AXSchemaType
operator|.
name|FULLNAME
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|name
operator|.
name|length
argument_list|()
operator|==
literal|0
condition|)
block|{
name|name
operator|=
name|_identifier
operator|.
name|getIdentifier
argument_list|()
expr_stmt|;
block|}
return|return
name|name
return|;
block|}
annotation|@
name|Override
specifier|public
name|Group
name|addGroup
parameter_list|(
name|Group
name|group
parameter_list|)
throws|throws
name|PermissionDeniedException
block|{
if|if
condition|(
name|group
operator|==
literal|null
condition|)
block|{
return|return
literal|null
return|;
block|}
name|Account
name|user
init|=
name|getDatabase
argument_list|()
operator|.
name|getSubject
argument_list|()
decl_stmt|;
if|if
condition|(
operator|!
operator|(
operator|(
name|user
operator|!=
literal|null
operator|&&
name|user
operator|.
name|hasDbaRole
argument_list|()
operator|)
operator|||
operator|(
operator|(
name|GroupImpl
operator|)
name|group
operator|)
operator|.
name|isMembersManager
argument_list|(
name|user
argument_list|)
operator|)
condition|)
block|{
throw|throw
operator|new
name|PermissionDeniedException
argument_list|(
literal|"not allowed to change group memberships"
argument_list|)
throw|;
block|}
if|if
condition|(
operator|!
name|groups
operator|.
name|contains
argument_list|(
name|group
argument_list|)
condition|)
block|{
name|groups
operator|.
name|add
argument_list|(
name|group
argument_list|)
expr_stmt|;
if|if
condition|(
name|SecurityManager
operator|.
name|DBA_GROUP
operator|.
name|equals
argument_list|(
name|name
argument_list|)
condition|)
block|{
name|hasDbaRole
operator|=
literal|true
expr_stmt|;
block|}
block|}
return|return
name|group
return|;
block|}
block|}
end_class

end_unit

