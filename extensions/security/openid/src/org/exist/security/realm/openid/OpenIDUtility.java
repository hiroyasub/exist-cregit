begin_unit|revision:1.0.0;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  *  eXist Open Source Native XML Database  *  Copyright (C) 2010-2011 The eXist Project  *  http://exist-db.org  *  *  This program is free software; you can redistribute it and/or  *  modify it under the terms of the GNU Lesser General Public License  *  as published by the Free Software Foundation; either version 2  *  of the License, or (at your option) any later version.  *  *  This program is distributed in the hope that it will be useful,  *  but WITHOUT ANY WARRANTY; without even the implied warranty of  *  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the  *  GNU Lesser General Public License for more details.  *  *  You should have received a copy of the GNU Lesser General Public License  *  along with this program; if not, write to the Free Software  *  Foundation, Inc., 675 Mass Ave, Cambridge, MA 02139, USA.  *  *  $Id$  */
end_comment

begin_package
package|package
name|org
operator|.
name|exist
operator|.
name|security
operator|.
name|realm
operator|.
name|openid
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|logging
operator|.
name|log4j
operator|.
name|LogManager
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|logging
operator|.
name|log4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|dom
operator|.
name|persistent
operator|.
name|BinaryDocument
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|dom
operator|.
name|persistent
operator|.
name|DocumentImpl
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|security
operator|.
name|SchemaType
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|security
operator|.
name|Subject
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|security
operator|.
name|xacml
operator|.
name|AccessContext
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|source
operator|.
name|Source
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|source
operator|.
name|DBSource
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|storage
operator|.
name|BrokerPool
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|storage
operator|.
name|DBBroker
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|storage
operator|.
name|lock
operator|.
name|Lock
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|xmldb
operator|.
name|XmldbURI
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|xquery
operator|.
name|CompiledXQuery
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|xquery
operator|.
name|XQuery
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|xquery
operator|.
name|XQueryContext
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|xquery
operator|.
name|value
operator|.
name|Sequence
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Properties
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|security
operator|.
name|AXSchemaType
import|;
end_import

begin_comment
comment|/**  *  */
end_comment

begin_class
specifier|public
class|class
name|OpenIDUtility
block|{
specifier|private
specifier|final
specifier|static
name|Logger
name|LOG
init|=
name|LogManager
operator|.
name|getLogger
argument_list|(
name|OpenIDUtility
operator|.
name|class
argument_list|)
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|String
name|REGISTER_XQUERY_SCRIPT_PROPERTY
init|=
literal|"org.exist.security.openid.verify_logging_script"
decl_stmt|;
comment|//TODO: implement this at eXist's security core
comment|/**      * Executes an XQuery script whose filename is retrieved from the      * java option 'org.exist.security.openid.verify_logging_script'.      *      * If the java option is not set, then log that fact and then return.      *      * If the java option is set, then retrieve the script from the file      * or resource designated by the value of the property.  Execute the      * XQuery script executed with the context of the given principal.      *      * @param principal The OpenID user to be registered in the database.      * @return true if the resource exists and the script successfully executed.      */
specifier|public
specifier|static
name|boolean
name|registerUser
parameter_list|(
name|Subject
name|principal
parameter_list|)
block|{
if|if
condition|(
name|principal
operator|==
literal|null
condition|)
block|{
name|LOG
operator|.
name|error
argument_list|(
literal|"No principal value exists.  Returning with no actions performed."
argument_list|)
expr_stmt|;
return|return
literal|false
return|;
block|}
name|String
name|userInfo
init|=
literal|"registerUser: ["
operator|+
name|principal
operator|.
name|getMetadataValue
argument_list|(
name|AXSchemaType
operator|.
name|ALIAS_USERNAME
argument_list|)
operator|+
literal|", "
decl_stmt|;
for|for
control|(
name|SchemaType
name|metadataKey
range|:
name|principal
operator|.
name|getMetadataKeys
argument_list|()
control|)
block|{
name|userInfo
operator|+=
name|metadataKey
operator|.
name|getNamespace
argument_list|()
operator|+
literal|"("
operator|+
name|principal
operator|.
name|getMetadataValue
argument_list|(
name|metadataKey
argument_list|)
operator|+
literal|"), "
expr_stmt|;
block|}
name|userInfo
operator|+=
literal|"]"
expr_stmt|;
name|LOG
operator|.
name|info
argument_list|(
name|userInfo
argument_list|)
expr_stmt|;
name|String
name|xqueryResourcePath
init|=
name|System
operator|.
name|getProperty
argument_list|(
name|REGISTER_XQUERY_SCRIPT_PROPERTY
argument_list|)
decl_stmt|;
if|if
condition|(
name|xqueryResourcePath
operator|==
literal|null
operator|||
name|xqueryResourcePath
operator|.
name|length
argument_list|()
operator|<=
literal|0
condition|)
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"no property set for "
operator|+
name|REGISTER_XQUERY_SCRIPT_PROPERTY
argument_list|)
expr_stmt|;
return|return
literal|true
return|;
block|}
name|xqueryResourcePath
operator|=
name|xqueryResourcePath
operator|.
name|trim
argument_list|()
expr_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"org.exist.security.openid.verify_logging_script = \""
operator|+
name|xqueryResourcePath
operator|+
literal|"\""
argument_list|)
expr_stmt|;
name|BrokerPool
name|pool
init|=
literal|null
decl_stmt|;
name|DBBroker
name|broker
init|=
literal|null
decl_stmt|;
try|try
block|{
name|DocumentImpl
name|resource
init|=
literal|null
decl_stmt|;
name|Source
name|source
init|=
literal|null
decl_stmt|;
name|pool
operator|=
name|BrokerPool
operator|.
name|getInstance
argument_list|()
expr_stmt|;
name|broker
operator|=
name|pool
operator|.
name|get
argument_list|(
name|principal
argument_list|)
expr_stmt|;
if|if
condition|(
name|broker
operator|==
literal|null
condition|)
block|{
name|LOG
operator|.
name|error
argument_list|(
literal|"Unable to retrieve DBBroker for "
operator|+
name|principal
operator|.
name|getMetadataValue
argument_list|(
name|AXSchemaType
operator|.
name|ALIAS_USERNAME
argument_list|)
argument_list|)
expr_stmt|;
return|return
literal|false
return|;
block|}
name|XmldbURI
name|pathUri
init|=
name|XmldbURI
operator|.
name|create
argument_list|(
name|xqueryResourcePath
argument_list|)
decl_stmt|;
name|resource
operator|=
name|broker
operator|.
name|getXMLResource
argument_list|(
name|pathUri
argument_list|,
name|Lock
operator|.
name|READ_LOCK
argument_list|)
expr_stmt|;
if|if
condition|(
name|resource
operator|!=
literal|null
condition|)
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"Resource "
operator|+
name|xqueryResourcePath
operator|+
literal|" exists."
argument_list|)
expr_stmt|;
name|source
operator|=
operator|new
name|DBSource
argument_list|(
name|broker
argument_list|,
operator|(
name|BinaryDocument
operator|)
name|resource
argument_list|,
literal|true
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"Resource "
operator|+
name|xqueryResourcePath
operator|+
literal|" does not exist."
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"pathURI "
operator|+
name|pathUri
argument_list|)
expr_stmt|;
return|return
literal|true
return|;
block|}
name|XQuery
name|xquery
init|=
name|pool
operator|.
name|getXQueryService
argument_list|()
decl_stmt|;
if|if
condition|(
name|xquery
operator|==
literal|null
condition|)
block|{
name|LOG
operator|.
name|error
argument_list|(
literal|"broker unable to retrieve XQueryService"
argument_list|)
expr_stmt|;
return|return
literal|false
return|;
block|}
name|XQueryContext
name|context
init|=
operator|new
name|XQueryContext
argument_list|(
name|broker
operator|.
name|getBrokerPool
argument_list|()
argument_list|,
name|AccessContext
operator|.
name|REST
argument_list|)
decl_stmt|;
name|CompiledXQuery
name|compiled
init|=
name|xquery
operator|.
name|compile
argument_list|(
name|broker
argument_list|,
name|context
argument_list|,
name|source
argument_list|)
decl_stmt|;
name|Properties
name|outputProperties
init|=
operator|new
name|Properties
argument_list|()
decl_stmt|;
name|Sequence
name|result
init|=
name|xquery
operator|.
name|execute
argument_list|(
name|broker
argument_list|,
name|compiled
argument_list|,
literal|null
argument_list|,
name|outputProperties
argument_list|)
decl_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"XQuery execution results: "
operator|+
name|result
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|error
argument_list|(
literal|"Exception while executing OpenID registration script for "
operator|+
name|principal
operator|.
name|getMetadataValue
argument_list|(
name|AXSchemaType
operator|.
name|ALIAS_USERNAME
argument_list|)
argument_list|,
name|e
argument_list|)
expr_stmt|;
return|return
literal|false
return|;
block|}
finally|finally
block|{
if|if
condition|(
name|pool
operator|!=
literal|null
condition|)
name|pool
operator|.
name|release
argument_list|(
name|broker
argument_list|)
expr_stmt|;
block|}
return|return
literal|true
return|;
block|}
block|}
end_class

end_unit

