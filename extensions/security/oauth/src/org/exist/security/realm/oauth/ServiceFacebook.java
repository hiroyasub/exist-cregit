begin_unit|revision:1.0.0;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  *  eXist Open Source Native XML Database  *  Copyright (C) 2011 The eXist Project  *  http://exist-db.org  *  *  This program is free software; you can redistribute it and/or  *  modify it under the terms of the GNU Lesser General Public License  *  as published by the Free Software Foundation; either version 2  *  of the License, or (at your option) any later version.  *  *  This program is distributed in the hope that it will be useful,  *  but WITHOUT ANY WARRANTY; without even the implied warranty of  *  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the  *  GNU Lesser General Public License for more details.  *  *  You should have received a copy of the GNU Lesser General Public  *  License along with this library; if not, write to the Free Software  *  Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA  02110-1301  USA  *  *  $Id$  */
end_comment

begin_package
package|package
name|org
operator|.
name|exist
operator|.
name|security
operator|.
name|realm
operator|.
name|oauth
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|ByteArrayOutputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|InputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Iterator
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|LinkedHashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|servlet
operator|.
name|http
operator|.
name|HttpServletRequest
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|security
operator|.
name|AXSchemaType
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|security
operator|.
name|Account
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|security
operator|.
name|SchemaType
import|;
end_import

begin_import
import|import
name|org
operator|.
name|json
operator|.
name|JSONException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|json
operator|.
name|JSONObject
import|;
end_import

begin_import
import|import
name|net
operator|.
name|oauth
operator|.
name|exception
operator|.
name|OAuthException
import|;
end_import

begin_import
import|import
name|net
operator|.
name|oauth
operator|.
name|token
operator|.
name|v2
operator|.
name|AccessToken
import|;
end_import

begin_import
import|import
name|net
operator|.
name|oauth
operator|.
name|util
operator|.
name|OAuthUtil
import|;
end_import

begin_import
import|import
name|com
operator|.
name|neurologic
operator|.
name|exception
operator|.
name|HttpException
import|;
end_import

begin_import
import|import
name|com
operator|.
name|neurologic
operator|.
name|http
operator|.
name|HttpClient
import|;
end_import

begin_import
import|import
name|com
operator|.
name|neurologic
operator|.
name|http
operator|.
name|impl
operator|.
name|ApacheHttpClient
import|;
end_import

begin_import
import|import
name|com
operator|.
name|neurologic
operator|.
name|oauth
operator|.
name|service
operator|.
name|impl
operator|.
name|OAuth2Service
import|;
end_import

begin_comment
comment|/**  * @author<a href="mailto:shabanovd@gmail.com">Dmitriy Shabanov</a>  *   */
end_comment

begin_class
specifier|public
class|class
name|ServiceFacebook
extends|extends
name|OAuth2Service
block|{
specifier|public
specifier|static
specifier|final
name|String
name|FACEBOOK_ACCESS_TOKEN_SESSION
init|=
literal|"FACEBOOK_ACCESS_TOKEN_SESSION"
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|String
name|REDIRECT_URL
init|=
literal|"http://localhost:8080/exist/oauth/cook"
decl_stmt|;
annotation|@
name|Override
specifier|public
name|void
name|saveAccessToken
parameter_list|(
name|HttpServletRequest
name|request
parameter_list|,
name|AccessToken
name|accessToken
parameter_list|)
block|{
name|HttpClient
name|client
init|=
operator|new
name|ApacheHttpClient
argument_list|()
decl_stmt|;
try|try
block|{
name|InputStream
name|in
init|=
name|client
operator|.
name|connect
argument_list|(
literal|"GET"
argument_list|,
literal|"https://graph.facebook.com/me?access_token="
operator|+
name|accessToken
operator|.
name|getAccessToken
argument_list|()
argument_list|)
decl_stmt|;
name|String
name|contentType
init|=
name|client
operator|.
name|getResponseHeaderValue
argument_list|(
literal|"Content-Type"
argument_list|)
decl_stmt|;
if|if
condition|(
name|contentType
operator|==
literal|null
condition|)
name|contentType
operator|=
literal|""
expr_stmt|;
name|String
name|charset
init|=
literal|""
decl_stmt|;
name|int
name|semicolonPos
init|=
name|contentType
operator|.
name|indexOf
argument_list|(
literal|';'
argument_list|)
decl_stmt|;
if|if
condition|(
name|semicolonPos
operator|>
literal|0
condition|)
block|{
name|String
name|_charset
init|=
name|contentType
operator|.
name|substring
argument_list|(
name|semicolonPos
operator|+
literal|1
argument_list|)
operator|.
name|trim
argument_list|()
decl_stmt|;
if|if
condition|(
name|_charset
operator|.
name|startsWith
argument_list|(
literal|"charset"
argument_list|)
condition|)
block|{
name|charset
operator|=
name|_charset
operator|.
name|substring
argument_list|(
name|_charset
operator|.
name|indexOf
argument_list|(
literal|'='
argument_list|)
operator|+
literal|1
argument_list|)
expr_stmt|;
block|}
name|contentType
operator|=
name|contentType
operator|.
name|substring
argument_list|(
literal|0
argument_list|,
name|semicolonPos
argument_list|)
expr_stmt|;
block|}
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|responseAttributes
init|=
literal|null
decl_stmt|;
name|String
name|response
init|=
name|streamToString
argument_list|(
name|in
argument_list|,
name|charset
argument_list|)
decl_stmt|;
if|if
condition|(
literal|"application/json"
operator|.
name|equals
argument_list|(
name|contentType
argument_list|)
operator|||
operator|(
name|response
operator|.
name|startsWith
argument_list|(
literal|"{"
argument_list|)
operator|&&
name|response
operator|.
name|endsWith
argument_list|(
literal|"}"
argument_list|)
operator|)
condition|)
block|{
name|JSONObject
name|jsonResponse
init|=
operator|new
name|JSONObject
argument_list|(
name|response
argument_list|)
decl_stmt|;
if|if
condition|(
name|jsonResponse
operator|!=
literal|null
condition|)
block|{
if|if
condition|(
name|jsonResponse
operator|.
name|has
argument_list|(
literal|"error"
argument_list|)
condition|)
block|{
throw|throw
operator|new
name|OAuthException
argument_list|(
literal|"Error getting access token: "
operator|+
name|System
operator|.
name|getProperty
argument_list|(
literal|"line.separator"
argument_list|)
operator|+
name|jsonResponse
operator|.
name|toString
argument_list|()
argument_list|)
throw|;
block|}
name|responseAttributes
operator|=
name|parseJSONObject
argument_list|(
name|jsonResponse
argument_list|)
expr_stmt|;
block|}
block|}
if|else if
condition|(
literal|"text/plain"
operator|.
name|equals
argument_list|(
name|contentType
argument_list|)
operator|||
operator|(
name|response
operator|.
name|contains
argument_list|(
literal|"="
argument_list|)
operator|&&
name|response
operator|.
name|contains
argument_list|(
literal|"&"
argument_list|)
operator|)
condition|)
block|{
name|responseAttributes
operator|=
name|OAuthUtil
operator|.
name|parseQueryString
argument_list|(
name|response
argument_list|)
expr_stmt|;
block|}
for|for
control|(
name|String
name|key
range|:
name|responseAttributes
operator|.
name|keySet
argument_list|()
control|)
block|{
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|" "
operator|+
name|key
operator|+
literal|" = "
operator|+
name|responseAttributes
operator|.
name|get
argument_list|(
name|key
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|String
name|id
init|=
name|responseAttributes
operator|.
name|get
argument_list|(
literal|"id"
argument_list|)
decl_stmt|;
name|Account
name|found
init|=
literal|null
decl_stmt|;
comment|//XXX: use index somehow
for|for
control|(
name|Account
name|account
range|:
name|OAuthRealm
operator|.
name|_
operator|.
name|getAccounts
argument_list|()
control|)
block|{
if|if
condition|(
name|account
operator|.
name|getMetadataValue
argument_list|(
name|FBSchemaType
operator|.
name|ID
argument_list|)
operator|.
name|equals
argument_list|(
name|id
argument_list|)
condition|)
block|{
name|found
operator|=
name|account
expr_stmt|;
break|break;
block|}
block|}
if|if
condition|(
name|found
operator|==
literal|null
condition|)
block|{
block|}
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|request
operator|.
name|setAttribute
argument_list|(
literal|"exception"
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
name|request
operator|.
name|getSession
argument_list|()
operator|.
name|setAttribute
argument_list|(
name|FACEBOOK_ACCESS_TOKEN_SESSION
argument_list|,
name|accessToken
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|String
name|getRedirectUri
parameter_list|()
block|{
return|return
name|REDIRECT_URL
return|;
block|}
annotation|@
name|Override
specifier|protected
name|String
index|[]
name|getScope
parameter_list|()
block|{
comment|// TODO Auto-generated method stub
return|return
literal|null
return|;
block|}
annotation|@
name|Override
specifier|protected
name|String
name|getScopeDelimiter
parameter_list|()
block|{
comment|// TODO Auto-generated method stub
return|return
literal|null
return|;
block|}
annotation|@
name|Override
specifier|protected
name|String
name|getState
parameter_list|()
block|{
comment|// TODO Auto-generated method stub
return|return
literal|null
return|;
block|}
specifier|private
name|String
name|streamToString
parameter_list|(
name|InputStream
name|stream
parameter_list|,
name|String
name|charset
parameter_list|)
throws|throws
name|IOException
block|{
if|if
condition|(
name|stream
operator|==
literal|null
condition|)
block|{
return|return
literal|null
return|;
block|}
name|ByteArrayOutputStream
name|byteArray
init|=
operator|new
name|ByteArrayOutputStream
argument_list|()
decl_stmt|;
name|int
name|c
decl_stmt|;
while|while
condition|(
operator|(
name|c
operator|=
name|stream
operator|.
name|read
argument_list|()
operator|)
operator|!=
operator|-
literal|1
condition|)
block|{
name|byteArray
operator|.
name|write
argument_list|(
name|c
argument_list|)
expr_stmt|;
block|}
return|return
operator|new
name|String
argument_list|(
name|byteArray
operator|.
name|toByteArray
argument_list|()
argument_list|,
name|charset
argument_list|)
return|;
block|}
specifier|private
specifier|synchronized
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|parseJSONObject
parameter_list|(
name|JSONObject
name|json
parameter_list|)
throws|throws
name|JSONException
block|{
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|parameters
init|=
literal|null
decl_stmt|;
if|if
condition|(
name|json
operator|!=
literal|null
operator|&&
name|json
operator|.
name|length
argument_list|()
operator|>
literal|0
condition|)
block|{
name|parameters
operator|=
operator|new
name|LinkedHashMap
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
argument_list|()
expr_stmt|;
annotation|@
name|SuppressWarnings
argument_list|(
literal|"unchecked"
argument_list|)
name|Iterator
argument_list|<
name|String
argument_list|>
name|iter
init|=
name|json
operator|.
name|keys
argument_list|()
decl_stmt|;
if|if
condition|(
name|iter
operator|!=
literal|null
condition|)
block|{
while|while
condition|(
name|iter
operator|.
name|hasNext
argument_list|()
condition|)
block|{
name|String
name|key
init|=
name|iter
operator|.
name|next
argument_list|()
decl_stmt|;
name|parameters
operator|.
name|put
argument_list|(
name|key
argument_list|,
name|json
operator|.
name|getString
argument_list|(
name|key
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
block|}
return|return
name|parameters
return|;
block|}
specifier|public
enum|enum
name|FBSchemaType
implements|implements
name|SchemaType
block|{
name|ID
argument_list|(
literal|"https://graph.facebook.com/me/id"
argument_list|,
literal|"id"
argument_list|)
block|;
specifier|private
specifier|final
name|String
name|namespace
decl_stmt|;
specifier|private
specifier|final
name|String
name|alias
decl_stmt|;
name|FBSchemaType
parameter_list|(
name|String
name|namespace
parameter_list|,
name|String
name|alias
parameter_list|)
block|{
name|this
operator|.
name|namespace
operator|=
name|namespace
expr_stmt|;
name|this
operator|.
name|alias
operator|=
name|alias
expr_stmt|;
block|}
specifier|public
specifier|static
name|FBSchemaType
name|valueOfNamespace
parameter_list|(
name|String
name|namespace
parameter_list|)
block|{
for|for
control|(
name|FBSchemaType
name|schemaType
range|:
name|FBSchemaType
operator|.
name|values
argument_list|()
control|)
block|{
if|if
condition|(
name|schemaType
operator|.
name|getNamespace
argument_list|()
operator|.
name|equals
argument_list|(
name|namespace
argument_list|)
condition|)
block|{
return|return
name|schemaType
return|;
block|}
block|}
return|return
literal|null
return|;
block|}
specifier|public
specifier|static
name|FBSchemaType
name|valueOfAlias
parameter_list|(
name|String
name|alias
parameter_list|)
block|{
for|for
control|(
name|FBSchemaType
name|schemaType
range|:
name|FBSchemaType
operator|.
name|values
argument_list|()
control|)
block|{
if|if
condition|(
name|schemaType
operator|.
name|getAlias
argument_list|()
operator|.
name|equals
argument_list|(
name|alias
argument_list|)
condition|)
block|{
return|return
name|schemaType
return|;
block|}
block|}
return|return
literal|null
return|;
block|}
specifier|public
name|String
name|getNamespace
parameter_list|()
block|{
return|return
name|namespace
return|;
block|}
specifier|public
name|String
name|getAlias
parameter_list|()
block|{
return|return
name|alias
return|;
block|}
block|}
block|}
end_class

end_unit

