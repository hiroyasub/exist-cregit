begin_unit|revision:1.0.0;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  *  eXist Open Source Native XML Database  *  Copyright (C) 2011 The eXist Project  *  http://exist-db.org  *  *  This program is free software; you can redistribute it and/or  *  modify it under the terms of the GNU Lesser General Public License  *  as published by the Free Software Foundation; either version 2  *  of the License, or (at your option) any later version.  *  *  This program is distributed in the hope that it will be useful,  *  but WITHOUT ANY WARRANTY; without even the implied warranty of  *  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the  *  GNU Lesser General Public License for more details.  *  *  You should have received a copy of the GNU Lesser General Public  *  License along with this library; if not, write to the Free Software  *  Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA  02110-1301  USA  *  *  $Id$  */
end_comment

begin_package
package|package
name|org
operator|.
name|exist
operator|.
name|security
operator|.
name|realm
operator|.
name|oauth
package|;
end_package

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|config
operator|.
name|Configurable
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|config
operator|.
name|Configuration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|config
operator|.
name|Configurator
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|config
operator|.
name|annotation
operator|.
name|ConfigurationClass
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|config
operator|.
name|annotation
operator|.
name|ConfigurationFieldAsAttribute
import|;
end_import

begin_import
import|import
name|org
operator|.
name|scribe
operator|.
name|builder
operator|.
name|ServiceBuilder
import|;
end_import

begin_import
import|import
name|org
operator|.
name|scribe
operator|.
name|builder
operator|.
name|api
operator|.
name|Api
import|;
end_import

begin_import
import|import
name|org
operator|.
name|scribe
operator|.
name|builder
operator|.
name|api
operator|.
name|FacebookApi
import|;
end_import

begin_comment
comment|/**  *<service name="app" key="APP_ID" secret="APP_SECRET" />  *   * @author<a href="mailto:shabanovd@gmail.com">Dmitriy Shabanov</a>  *  */
end_comment

begin_class
annotation|@
name|ConfigurationClass
argument_list|(
literal|"service"
argument_list|)
specifier|public
class|class
name|Service
implements|implements
name|Configurable
block|{
specifier|private
name|Configuration
name|configuration
init|=
literal|null
decl_stmt|;
annotation|@
name|ConfigurationFieldAsAttribute
argument_list|(
literal|"name"
argument_list|)
name|String
name|name
decl_stmt|;
annotation|@
name|ConfigurationFieldAsAttribute
argument_list|(
literal|"key"
argument_list|)
name|String
name|apiKey
decl_stmt|;
annotation|@
name|ConfigurationFieldAsAttribute
argument_list|(
literal|"secret"
argument_list|)
name|String
name|apiSecret
decl_stmt|;
annotation|@
name|ConfigurationFieldAsAttribute
argument_list|(
literal|"provider"
argument_list|)
name|String
name|provider
decl_stmt|;
specifier|public
name|Service
parameter_list|(
name|OAuthRealm
name|realm
parameter_list|,
name|Configuration
name|config
parameter_list|)
block|{
name|configuration
operator|=
name|Configurator
operator|.
name|configure
argument_list|(
name|this
argument_list|,
name|config
argument_list|)
expr_stmt|;
block|}
specifier|public
name|String
name|getName
parameter_list|()
block|{
return|return
name|name
return|;
block|}
specifier|public
name|ServiceBuilder
name|getServiceBuilder
parameter_list|()
block|{
return|return
operator|new
name|ServiceBuilder
argument_list|()
operator|.
name|provider
argument_list|(
name|getProviderClass
argument_list|()
argument_list|)
operator|.
name|apiKey
argument_list|(
name|apiKey
argument_list|)
operator|.
name|apiSecret
argument_list|(
name|apiSecret
argument_list|)
return|;
block|}
specifier|private
name|Class
argument_list|<
name|?
extends|extends
name|Api
argument_list|>
name|getProviderClass
parameter_list|()
block|{
if|if
condition|(
name|provider
operator|.
name|equalsIgnoreCase
argument_list|(
literal|"facebook"
argument_list|)
condition|)
return|return
name|FacebookApi
operator|.
name|class
return|;
if|else if
condition|(
name|provider
operator|.
name|equalsIgnoreCase
argument_list|(
literal|"google"
argument_list|)
condition|)
return|return
name|Google2Api
operator|.
name|class
return|;
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"Unknown provider '"
operator|+
name|provider
operator|+
literal|"'"
argument_list|)
throw|;
block|}
specifier|public
name|boolean
name|isConfigured
parameter_list|()
block|{
return|return
name|configuration
operator|!=
literal|null
return|;
block|}
specifier|public
name|Configuration
name|getConfiguration
parameter_list|()
block|{
return|return
name|configuration
return|;
block|}
block|}
end_class

end_unit

