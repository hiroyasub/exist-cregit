begin_unit|revision:1.0.0;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  *  eXist Open Source Native XML Database  *  Copyright (C) 2011 The eXist Project  *  http://exist-db.org  *  *  This program is free software; you can redistribute it and/or  *  modify it under the terms of the GNU Lesser General Public License  *  as published by the Free Software Foundation; either version 2  *  of the License, or (at your option) any later version.  *  *  This program is distributed in the hope that it will be useful,  *  but WITHOUT ANY WARRANTY; without even the implied warranty of  *  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the  *  GNU Lesser General Public License for more details.  *  *  You should have received a copy of the GNU Lesser General Public  *  License along with this library; if not, write to the Free Software  *  Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA  02110-1301  USA  *  *  $Id$  */
end_comment

begin_package
package|package
name|org
operator|.
name|exist
operator|.
name|security
operator|.
name|realm
operator|.
name|oauth
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|servlet
operator|.
name|ServletException
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|servlet
operator|.
name|http
operator|.
name|HttpServlet
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|servlet
operator|.
name|http
operator|.
name|HttpServletRequest
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|servlet
operator|.
name|http
operator|.
name|HttpServletResponse
import|;
end_import

begin_import
import|import
name|org
operator|.
name|scribe
operator|.
name|model
operator|.
name|OAuthConstants
import|;
end_import

begin_import
import|import
name|org
operator|.
name|scribe
operator|.
name|model
operator|.
name|OAuthRequest
import|;
end_import

begin_import
import|import
name|org
operator|.
name|scribe
operator|.
name|model
operator|.
name|Token
import|;
end_import

begin_import
import|import
name|org
operator|.
name|scribe
operator|.
name|model
operator|.
name|Verifier
import|;
end_import

begin_import
import|import
name|org
operator|.
name|scribe
operator|.
name|oauth
operator|.
name|OAuthService
import|;
end_import

begin_comment
comment|/**  * @author<a href="mailto:shabanovd@gmail.com">Dmitriy Shabanov</a>  *  */
end_comment

begin_class
specifier|public
class|class
name|OAuthServlet
extends|extends
name|HttpServlet
block|{
specifier|private
specifier|static
specifier|final
name|long
name|serialVersionUID
init|=
operator|-
literal|4097068486788440559L
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|String
name|RETURN_TO_PAGE
init|=
literal|"returnToPage"
decl_stmt|;
specifier|private
name|Token
name|EMPTY_TOKEN
init|=
literal|null
decl_stmt|;
specifier|public
name|void
name|init
parameter_list|()
throws|throws
name|ServletException
block|{
block|}
comment|/* (non-Javadoc)      * @see javax.servlet.http.HttpServlet#doGet(javax.servlet.http.HttpServletRequest, javax.servlet.http.HttpServletResponse)      */
annotation|@
name|Override
specifier|protected
name|void
name|doGet
parameter_list|(
name|HttpServletRequest
name|request
parameter_list|,
name|HttpServletResponse
name|response
parameter_list|)
throws|throws
name|ServletException
throws|,
name|IOException
block|{
name|process
argument_list|(
name|request
argument_list|,
name|response
argument_list|)
expr_stmt|;
block|}
comment|/* (non-Javadoc)      * @see javax.servlet.http.HttpServlet#doPost(javax.servlet.http.HttpServletRequest, javax.servlet.http.HttpServletResponse)      */
annotation|@
name|Override
specifier|protected
name|void
name|doPost
parameter_list|(
name|HttpServletRequest
name|request
parameter_list|,
name|HttpServletResponse
name|response
parameter_list|)
throws|throws
name|ServletException
throws|,
name|IOException
block|{
name|process
argument_list|(
name|request
argument_list|,
name|response
argument_list|)
expr_stmt|;
block|}
specifier|private
name|void
name|process
parameter_list|(
name|HttpServletRequest
name|request
parameter_list|,
name|HttpServletResponse
name|response
parameter_list|)
throws|throws
name|ServletException
throws|,
name|IOException
block|{
if|if
condition|(
name|request
operator|.
name|getPathInfo
argument_list|()
operator|==
literal|null
condition|)
return|return;
name|String
name|path
init|=
name|request
operator|.
name|getPathInfo
argument_list|()
operator|.
name|replace
argument_list|(
literal|"/"
argument_list|,
literal|""
argument_list|)
decl_stmt|;
if|if
condition|(
name|OAuthRealm
operator|.
name|LOG
operator|.
name|isTraceEnabled
argument_list|()
condition|)
name|OAuthRealm
operator|.
name|LOG
operator|.
name|trace
argument_list|(
literal|"the "
operator|+
name|request
operator|.
name|getMethod
argument_list|()
operator|+
literal|" method, path info "
operator|+
name|path
argument_list|)
expr_stmt|;
name|OAuthService
name|service
init|=
name|OAuthRealm
operator|.
name|_
operator|.
name|getServiceBulderByPath
argument_list|(
name|path
argument_list|)
operator|.
name|getServiceBuilder
argument_list|()
operator|.
name|callback
argument_list|(
name|request
operator|.
name|getRequestURL
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|)
operator|.
name|build
argument_list|()
decl_stmt|;
if|if
condition|(
name|request
operator|.
name|getParameterMap
argument_list|()
operator|.
name|containsKey
argument_list|(
name|RETURN_TO_PAGE
argument_list|)
condition|)
block|{
name|String
name|authorizationUrl
init|=
name|service
operator|.
name|getAuthorizationUrl
argument_list|(
name|EMPTY_TOKEN
argument_list|)
decl_stmt|;
name|request
operator|.
name|getSession
argument_list|()
operator|.
name|setAttribute
argument_list|(
name|RETURN_TO_PAGE
argument_list|,
name|request
operator|.
name|getParameter
argument_list|(
name|RETURN_TO_PAGE
argument_list|)
argument_list|)
expr_stmt|;
name|response
operator|.
name|sendRedirect
argument_list|(
name|authorizationUrl
argument_list|)
expr_stmt|;
return|return;
block|}
name|String
name|verification
init|=
name|request
operator|.
name|getParameter
argument_list|(
literal|"code"
argument_list|)
decl_stmt|;
name|Verifier
name|verifier
init|=
operator|new
name|Verifier
argument_list|(
name|verification
argument_list|)
decl_stmt|;
name|Token
name|accessToken
init|=
literal|null
decl_stmt|;
comment|//workaround google API
if|if
condition|(
name|OAuthRealm
operator|.
name|_
operator|.
name|getServiceBulderByPath
argument_list|(
name|path
argument_list|)
operator|.
name|provider
operator|.
name|equalsIgnoreCase
argument_list|(
literal|"google"
argument_list|)
condition|)
block|{
name|Google2Api
name|api
init|=
operator|new
name|Google2Api
argument_list|()
decl_stmt|;
name|Service
name|config
init|=
name|OAuthRealm
operator|.
name|_
operator|.
name|getServiceBulderByPath
argument_list|(
name|path
argument_list|)
decl_stmt|;
name|OAuthRequest
name|req
init|=
operator|new
name|OAuthRequest
argument_list|(
name|api
operator|.
name|getAccessTokenVerb
argument_list|()
argument_list|,
name|api
operator|.
name|getAccessTokenEndpoint
argument_list|()
argument_list|)
decl_stmt|;
name|req
operator|.
name|addBodyParameter
argument_list|(
name|OAuthConstants
operator|.
name|CLIENT_ID
argument_list|,
name|config
operator|.
name|getApiKey
argument_list|()
argument_list|)
expr_stmt|;
name|req
operator|.
name|addBodyParameter
argument_list|(
name|OAuthConstants
operator|.
name|CLIENT_SECRET
argument_list|,
name|config
operator|.
name|getApiSecret
argument_list|()
argument_list|)
expr_stmt|;
name|req
operator|.
name|addBodyParameter
argument_list|(
name|OAuthConstants
operator|.
name|CODE
argument_list|,
name|verification
argument_list|)
expr_stmt|;
comment|// jetty.port.jetty
name|req
operator|.
name|addBodyParameter
argument_list|(
name|OAuthConstants
operator|.
name|REDIRECT_URI
argument_list|,
literal|"http://localhost:"
operator|+
name|System
operator|.
name|getProperty
argument_list|(
literal|"jetty.port"
argument_list|)
operator|+
literal|"/oauth/cook2gl"
argument_list|)
expr_stmt|;
name|req
operator|.
name|addBodyParameter
argument_list|(
literal|"grant_type"
argument_list|,
literal|"authorization_code"
argument_list|)
expr_stmt|;
name|accessToken
operator|=
name|api
operator|.
name|getAccessTokenExtractor
argument_list|()
operator|.
name|extract
argument_list|(
name|req
operator|.
name|send
argument_list|()
operator|.
name|getBody
argument_list|()
argument_list|)
expr_stmt|;
block|}
else|else
name|accessToken
operator|=
name|service
operator|.
name|getAccessToken
argument_list|(
name|EMPTY_TOKEN
argument_list|,
name|verifier
argument_list|)
expr_stmt|;
try|try
block|{
name|OAuthRealm
operator|.
name|_
operator|.
name|getServiceBulderByPath
argument_list|(
name|path
argument_list|)
operator|.
name|saveAccessToken
argument_list|(
name|request
argument_list|,
name|service
argument_list|,
name|accessToken
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|ServletException
argument_list|(
name|e
argument_list|)
throw|;
block|}
name|String
name|returnToPage
init|=
operator|(
name|String
operator|)
name|request
operator|.
name|getSession
argument_list|()
operator|.
name|getAttribute
argument_list|(
name|RETURN_TO_PAGE
argument_list|)
decl_stmt|;
name|response
operator|.
name|sendRedirect
argument_list|(
name|returnToPage
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

