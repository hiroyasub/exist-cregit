begin_unit|revision:1.0.0;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  *  eXist Open Source Native XML Database  *  Copyright (C) 2010 The eXist Project  *  http://exist-db.org  *    *  This program is free software; you can redistribute it and/or  *  modify it under the terms of the GNU Lesser General Public License  *  as published by the Free Software Foundation; either version 2  *  of the License, or (at your option) any later version.  *    *  This program is distributed in the hope that it will be useful,  *  but WITHOUT ANY WARRANTY; without even the implied warranty of  *  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the  *  GNU Lesser General Public License for more details.  *    *  You should have received a copy of the GNU Lesser General Public License  *  along with this program; if not, write to the Free Software  *  Foundation, Inc., 675 Mass Ave, Cambridge, MA 02139, USA.  *    *  $Id$  */
end_comment

begin_package
package|package
name|org
operator|.
name|exist
operator|.
name|commands
operator|.
name|threads
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|plugin
operator|.
name|command
operator|.
name|AbstractCommand
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|plugin
operator|.
name|command
operator|.
name|CommandException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|xmldb
operator|.
name|XmldbURI
import|;
end_import

begin_comment
comment|/**  * @author<a href="mailto:shabanovd@gmail.com">Dmitriy Shabanov</a>  *  */
end_comment

begin_class
specifier|public
class|class
name|List
extends|extends
name|AbstractCommand
block|{
specifier|public
name|List
parameter_list|()
block|{
name|names
operator|=
operator|new
name|String
index|[]
block|{
literal|"list"
block|,
literal|"l"
block|}
expr_stmt|;
block|}
comment|/* (non-Javadoc) 	 * @see org.exist.plugin.command.AbstractCommand#process(org.exist.xmldb.XmldbURI, java.lang.String[]) 	 */
annotation|@
name|Override
specifier|public
name|void
name|process
parameter_list|(
name|XmldbURI
name|collection
parameter_list|,
name|String
index|[]
name|commandData
parameter_list|)
throws|throws
name|CommandException
block|{
name|Map
argument_list|<
name|Thread
argument_list|,
name|StackTraceElement
index|[]
argument_list|>
name|stackTraces
init|=
name|Thread
operator|.
name|getAllStackTraces
argument_list|()
decl_stmt|;
for|for
control|(
name|Map
operator|.
name|Entry
argument_list|<
name|Thread
argument_list|,
name|StackTraceElement
index|[]
argument_list|>
name|entry
range|:
name|stackTraces
operator|.
name|entrySet
argument_list|()
control|)
block|{
name|StackTraceElement
index|[]
name|stacks
init|=
name|entry
operator|.
name|getValue
argument_list|()
decl_stmt|;
name|out
argument_list|()
operator|.
name|println
argument_list|(
literal|"THREAD: "
operator|+
name|entry
operator|.
name|getKey
argument_list|()
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|stacks
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
name|out
argument_list|()
operator|.
name|print
argument_list|(
literal|" "
argument_list|)
expr_stmt|;
name|out
argument_list|()
operator|.
name|println
argument_list|(
name|stacks
index|[
name|i
index|]
argument_list|)
expr_stmt|;
block|}
block|}
if|if
condition|(
name|stackTraces
operator|.
name|isEmpty
argument_list|()
condition|)
name|out
argument_list|()
operator|.
name|println
argument_list|(
literal|"No threads."
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

