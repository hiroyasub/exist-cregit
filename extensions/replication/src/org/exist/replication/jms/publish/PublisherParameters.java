begin_unit|revision:1.0.0;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  *  eXist Open Source Native XML Database  *  Copyright (C) 2012 The eXist Project  *  http://exist-db.org  *  *  This program is free software; you can redistribute it and/or  *  modify it under the terms of the GNU Lesser General Public License  *  as published by the Free Software Foundation; either version 2  *  of the License, or (at your option) any later version.  *  *  This program is distributed in the hope that it will be useful,  *  but WITHOUT ANY WARRANTY; without even the implied warranty of  *  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the  *  GNU Lesser General Public License for more details.  *  *  You should have received a copy of the GNU Lesser General Public  *  License along with this library; if not, write to the Free Software  *  Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA  02110-1301  USA  *  *  $Id$  */
end_comment

begin_package
package|package
name|org
operator|.
name|exist
operator|.
name|replication
operator|.
name|jms
operator|.
name|publish
package|;
end_package

begin_import
import|import
name|javax
operator|.
name|naming
operator|.
name|Context
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|replication
operator|.
name|shared
operator|.
name|ClientParameters
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|replication
operator|.
name|shared
operator|.
name|TransportException
import|;
end_import

begin_comment
comment|/**  *  * @author Dannes Wessels  */
end_comment

begin_class
specifier|public
class|class
name|PublisherParameters
extends|extends
name|ClientParameters
block|{
specifier|public
specifier|static
specifier|final
name|String
name|TIME_TO_LIVE
init|=
literal|"time-to-live"
decl_stmt|;
specifier|public
specifier|static
specifier|final
name|String
name|PRIORITY
init|=
literal|"priority"
decl_stmt|;
specifier|private
name|Long
name|timeToLive
decl_stmt|;
specifier|private
name|Integer
name|priority
decl_stmt|;
specifier|public
name|Long
name|getTimeToLive
parameter_list|()
block|{
return|return
name|timeToLive
return|;
block|}
specifier|public
name|Integer
name|getPriority
parameter_list|()
block|{
return|return
name|priority
return|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|processParameters
parameter_list|()
throws|throws
name|TransportException
block|{
comment|// java.naming.factory.initial
name|String
name|value
init|=
name|props
operator|.
name|getProperty
argument_list|(
name|Context
operator|.
name|INITIAL_CONTEXT_FACTORY
argument_list|)
decl_stmt|;
name|initialContextFactory
operator|=
name|value
expr_stmt|;
comment|// java.naming.provider.url
name|value
operator|=
name|props
operator|.
name|getProperty
argument_list|(
name|Context
operator|.
name|PROVIDER_URL
argument_list|)
expr_stmt|;
name|providerUrl
operator|=
name|value
expr_stmt|;
comment|// Connection factory
name|value
operator|=
name|props
operator|.
name|getProperty
argument_list|(
name|CONNECTION_FACTORY
argument_list|)
expr_stmt|;
if|if
condition|(
name|value
operator|==
literal|null
operator|||
name|value
operator|.
name|equals
argument_list|(
literal|""
argument_list|)
condition|)
block|{
name|value
operator|=
literal|"ConnectionFactory"
expr_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"No "
operator|+
name|CONNECTION_FACTORY
operator|+
literal|" set, using default value '"
operator|+
name|value
operator|+
literal|"'"
argument_list|)
expr_stmt|;
block|}
name|connectionFactory
operator|=
name|value
expr_stmt|;
comment|// Setup destination
name|value
operator|=
name|props
operator|.
name|getProperty
argument_list|(
name|TOPIC
argument_list|)
expr_stmt|;
if|if
condition|(
name|value
operator|==
literal|null
operator|||
name|value
operator|.
name|equals
argument_list|(
literal|""
argument_list|)
condition|)
block|{
name|value
operator|=
literal|"dynamicTopics/eXistdb"
expr_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"No "
operator|+
name|TOPIC
operator|+
literal|" set (topic), using default value '"
operator|+
name|value
operator|+
literal|"' which is suitable for activeMQ"
argument_list|)
expr_stmt|;
block|}
name|topic
operator|=
name|value
expr_stmt|;
name|value
operator|=
name|props
operator|.
name|getProperty
argument_list|(
name|CLIENT_ID
argument_list|)
expr_stmt|;
if|if
condition|(
name|value
operator|==
literal|null
operator|||
name|value
operator|.
name|equals
argument_list|(
literal|""
argument_list|)
condition|)
block|{
name|String
name|errorText
init|=
literal|"'"
operator|+
name|CLIENT_ID
operator|+
literal|"' is not set."
decl_stmt|;
name|LOG
operator|.
name|error
argument_list|(
name|errorText
argument_list|)
expr_stmt|;
throw|throw
operator|new
name|TransportException
argument_list|(
name|errorText
argument_list|)
throw|;
block|}
name|clientId
operator|=
name|value
expr_stmt|;
comment|// Get time to live value
name|value
operator|=
name|props
operator|.
name|getProperty
argument_list|(
name|TIME_TO_LIVE
argument_list|)
expr_stmt|;
if|if
condition|(
name|value
operator|!=
literal|null
operator|&&
operator|!
name|value
operator|.
name|equals
argument_list|(
literal|""
argument_list|)
condition|)
block|{
try|try
block|{
name|timeToLive
operator|=
name|Long
operator|.
name|valueOf
argument_list|(
name|value
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|NumberFormatException
name|ex
parameter_list|)
block|{
name|String
name|errorText
init|=
literal|"Unable to set TTL; got '"
operator|+
name|value
operator|+
literal|"'. "
operator|+
name|ex
operator|.
name|getMessage
argument_list|()
decl_stmt|;
name|LOG
operator|.
name|error
argument_list|(
name|errorText
argument_list|)
expr_stmt|;
throw|throw
operator|new
name|TransportException
argument_list|(
name|errorText
argument_list|)
throw|;
block|}
block|}
comment|// Get priority
name|value
operator|=
name|props
operator|.
name|getProperty
argument_list|(
name|PRIORITY
argument_list|)
expr_stmt|;
if|if
condition|(
name|value
operator|!=
literal|null
operator|&&
operator|!
name|value
operator|.
name|equals
argument_list|(
literal|""
argument_list|)
condition|)
block|{
try|try
block|{
name|priority
operator|=
name|Integer
operator|.
name|valueOf
argument_list|(
name|value
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|NumberFormatException
name|ex
parameter_list|)
block|{
name|String
name|errorText
init|=
literal|"Unable to set priority; got '"
operator|+
name|value
operator|+
literal|"'. "
operator|+
name|ex
operator|.
name|getMessage
argument_list|()
decl_stmt|;
name|LOG
operator|.
name|error
argument_list|(
name|errorText
argument_list|)
expr_stmt|;
throw|throw
operator|new
name|TransportException
argument_list|(
name|errorText
argument_list|)
throw|;
block|}
block|}
block|}
annotation|@
name|Override
specifier|public
name|String
name|getReport
parameter_list|()
block|{
name|StringBuilder
name|sb
init|=
operator|new
name|StringBuilder
argument_list|()
decl_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|"Publisher configuration: "
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
name|Context
operator|.
name|INITIAL_CONTEXT_FACTORY
argument_list|)
operator|.
name|append
argument_list|(
literal|"='"
argument_list|)
operator|.
name|append
argument_list|(
name|initialContextFactory
argument_list|)
operator|.
name|append
argument_list|(
literal|"'"
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|" "
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
name|Context
operator|.
name|PROVIDER_URL
argument_list|)
operator|.
name|append
argument_list|(
literal|"='"
argument_list|)
operator|.
name|append
argument_list|(
name|providerUrl
argument_list|)
operator|.
name|append
argument_list|(
literal|"'"
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|" "
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
name|TOPIC
argument_list|)
operator|.
name|append
argument_list|(
literal|"='"
argument_list|)
operator|.
name|append
argument_list|(
name|topic
argument_list|)
operator|.
name|append
argument_list|(
literal|"'"
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|" "
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
name|CLIENT_ID
argument_list|)
operator|.
name|append
argument_list|(
literal|"='"
argument_list|)
operator|.
name|append
argument_list|(
name|clientId
argument_list|)
operator|.
name|append
argument_list|(
literal|"'"
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|" "
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
name|TIME_TO_LIVE
argument_list|)
operator|.
name|append
argument_list|(
literal|"='"
argument_list|)
operator|.
name|append
argument_list|(
name|timeToLive
argument_list|)
operator|.
name|append
argument_list|(
literal|"'"
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|" "
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
name|PRIORITY
argument_list|)
operator|.
name|append
argument_list|(
literal|"='"
argument_list|)
operator|.
name|append
argument_list|(
name|priority
argument_list|)
operator|.
name|append
argument_list|(
literal|"'"
argument_list|)
expr_stmt|;
return|return
name|sb
operator|.
name|toString
argument_list|()
return|;
block|}
block|}
end_class

end_unit

