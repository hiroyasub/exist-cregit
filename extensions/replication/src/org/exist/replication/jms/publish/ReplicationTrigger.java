begin_unit|revision:1.0.0;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  *  eXist Open Source Native XML Database  *  Copyright (C) 2012 The eXist Project  *  http://exist-db.org  *  *  This program is free software; you can redistribute it and/or  *  modify it under the terms of the GNU Lesser General Public License  *  as published by the Free Software Foundation; either version 2  *  of the License, or (at your option) any later version.  *  *  This program is distributed in the hope that it will be useful,  *  but WITHOUT ANY WARRANTY; without even the implied warranty of  *  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the  *  GNU Lesser General Public License for more details.  *  *  You should have received a copy of the GNU Lesser General Public  *  License along with this library; if not, write to the Free Software  *  Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA  02110-1301  USA  *  *  $Id$  */
end_comment

begin_package
package|package
name|org
operator|.
name|exist
operator|.
name|replication
operator|.
name|jms
operator|.
name|publish
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|log4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|collections
operator|.
name|Collection
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|collections
operator|.
name|triggers
operator|.
name|CollectionTrigger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|collections
operator|.
name|triggers
operator|.
name|DocumentTrigger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|collections
operator|.
name|triggers
operator|.
name|FilteringTrigger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|collections
operator|.
name|triggers
operator|.
name|TriggerException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|dom
operator|.
name|DocumentImpl
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|replication
operator|.
name|shared
operator|.
name|MessageHelper
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|replication
operator|.
name|shared
operator|.
name|TransportException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|replication
operator|.
name|shared
operator|.
name|eXistMessage
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|storage
operator|.
name|DBBroker
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|storage
operator|.
name|txn
operator|.
name|Txn
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|xmldb
operator|.
name|XmldbURI
import|;
end_import

begin_comment
comment|/**  * Trigger for detecting document and collection changes to have the changes  * propagated to remote eXist-db instances.  *  * @author Dannes Wessels (dannes@exist-db.org)  */
end_comment

begin_class
specifier|public
class|class
name|ReplicationTrigger
extends|extends
name|FilteringTrigger
implements|implements
name|DocumentTrigger
implements|,
name|CollectionTrigger
block|{
specifier|private
specifier|final
specifier|static
name|Logger
name|LOG
init|=
name|Logger
operator|.
name|getLogger
argument_list|(
name|ReplicationTrigger
operator|.
name|class
argument_list|)
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|String
name|BLOCKED_MESSAGE
init|=
literal|"Blocked replication trigger for %s: was received by replication extension."
decl_stmt|;
specifier|public
specifier|static
specifier|final
name|String
name|JMS_EXTENSION_PKG
init|=
literal|"org.exist.replication.jms"
decl_stmt|;
specifier|private
name|Map
argument_list|<
name|String
argument_list|,
name|List
argument_list|<
name|?
argument_list|>
argument_list|>
name|parameters
decl_stmt|;
comment|//
comment|// Document Triggers
comment|//
specifier|private
name|void
name|afterUpdateCreateDocument
parameter_list|(
name|DBBroker
name|broker
parameter_list|,
name|Txn
name|transaction
parameter_list|,
name|DocumentImpl
name|document
parameter_list|,
name|eXistMessage
operator|.
name|ResourceOperation
name|operation
parameter_list|)
comment|/* throws TriggerException */
block|{
if|if
condition|(
name|LOG
operator|.
name|isDebugEnabled
argument_list|()
condition|)
block|{
name|LOG
operator|.
name|debug
argument_list|(
name|document
operator|.
name|getURI
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|transaction
operator|.
name|getOriginId
argument_list|()
operator|!=
literal|null
operator|&&
name|transaction
operator|.
name|getOriginId
argument_list|()
operator|.
name|startsWith
argument_list|(
name|JMS_EXTENSION_PKG
argument_list|)
condition|)
block|{
name|LOG
operator|.
name|info
argument_list|(
name|String
operator|.
name|format
argument_list|(
name|BLOCKED_MESSAGE
argument_list|,
name|document
operator|.
name|getURI
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
return|return;
block|}
comment|// Create Message
name|eXistMessage
name|msg
init|=
operator|new
name|eXistMessage
argument_list|()
decl_stmt|;
name|msg
operator|.
name|setResourceType
argument_list|(
name|eXistMessage
operator|.
name|ResourceType
operator|.
name|DOCUMENT
argument_list|)
expr_stmt|;
name|msg
operator|.
name|setResourceOperation
argument_list|(
name|operation
argument_list|)
expr_stmt|;
name|msg
operator|.
name|setResourcePath
argument_list|(
name|document
operator|.
name|getURI
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
comment|// Retrieve Metadata
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|md
init|=
name|msg
operator|.
name|getMetadata
argument_list|()
decl_stmt|;
name|MessageHelper
operator|.
name|retrieveDocMetadata
argument_list|(
name|md
argument_list|,
name|document
operator|.
name|getMetadata
argument_list|()
argument_list|)
expr_stmt|;
name|MessageHelper
operator|.
name|retrieveFromDocument
argument_list|(
name|md
argument_list|,
name|document
argument_list|)
expr_stmt|;
name|MessageHelper
operator|.
name|retrievePermission
argument_list|(
name|md
argument_list|,
name|document
operator|.
name|getPermissions
argument_list|()
argument_list|)
expr_stmt|;
comment|// The content is always gzip-ped
name|md
operator|.
name|put
argument_list|(
name|MessageHelper
operator|.
name|EXIST_MESSAGE_CONTENTENCODING
argument_list|,
literal|"gzip"
argument_list|)
expr_stmt|;
comment|// Serialize document
try|try
block|{
name|msg
operator|.
name|setPayload
argument_list|(
name|MessageHelper
operator|.
name|gzipSerialize
argument_list|(
name|broker
argument_list|,
name|document
argument_list|)
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Throwable
name|ex
parameter_list|)
block|{
name|LOG
operator|.
name|error
argument_list|(
name|String
operator|.
name|format
argument_list|(
literal|"Problem while serializing document (contentLength=%s) to compressed message:%s"
argument_list|,
name|document
operator|.
name|getContentLength
argument_list|()
argument_list|,
name|ex
operator|.
name|getMessage
argument_list|()
argument_list|)
argument_list|,
name|ex
argument_list|)
expr_stmt|;
comment|//throw new TriggerException("Unable to retrieve message payload: " + ex.getMessage());
block|}
comment|// Send Message
name|sendMessage
argument_list|(
name|msg
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|afterCreateDocument
parameter_list|(
name|DBBroker
name|broker
parameter_list|,
name|Txn
name|transaction
parameter_list|,
name|DocumentImpl
name|document
parameter_list|)
throws|throws
name|TriggerException
block|{
if|if
condition|(
name|LOG
operator|.
name|isDebugEnabled
argument_list|()
condition|)
block|{
name|LOG
operator|.
name|debug
argument_list|(
name|document
operator|.
name|getURI
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|transaction
operator|.
name|getOriginId
argument_list|()
operator|!=
literal|null
operator|&&
name|transaction
operator|.
name|getOriginId
argument_list|()
operator|.
name|startsWith
argument_list|(
name|JMS_EXTENSION_PKG
argument_list|)
condition|)
block|{
name|LOG
operator|.
name|info
argument_list|(
name|String
operator|.
name|format
argument_list|(
name|BLOCKED_MESSAGE
argument_list|,
name|document
operator|.
name|getURI
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
return|return;
block|}
name|this
operator|.
name|afterUpdateCreateDocument
argument_list|(
name|broker
argument_list|,
name|transaction
argument_list|,
name|document
argument_list|,
name|eXistMessage
operator|.
name|ResourceOperation
operator|.
name|CREATE
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|afterUpdateDocument
parameter_list|(
name|DBBroker
name|broker
parameter_list|,
name|Txn
name|transaction
parameter_list|,
name|DocumentImpl
name|document
parameter_list|)
throws|throws
name|TriggerException
block|{
if|if
condition|(
name|LOG
operator|.
name|isDebugEnabled
argument_list|()
condition|)
block|{
name|LOG
operator|.
name|debug
argument_list|(
name|document
operator|.
name|getURI
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|transaction
operator|.
name|getOriginId
argument_list|()
operator|!=
literal|null
operator|&&
name|transaction
operator|.
name|getOriginId
argument_list|()
operator|.
name|startsWith
argument_list|(
name|JMS_EXTENSION_PKG
argument_list|)
condition|)
block|{
name|LOG
operator|.
name|info
argument_list|(
name|String
operator|.
name|format
argument_list|(
name|BLOCKED_MESSAGE
argument_list|,
name|document
operator|.
name|getURI
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
return|return;
block|}
name|this
operator|.
name|afterUpdateCreateDocument
argument_list|(
name|broker
argument_list|,
name|transaction
argument_list|,
name|document
argument_list|,
name|eXistMessage
operator|.
name|ResourceOperation
operator|.
name|UPDATE
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|afterCopyDocument
parameter_list|(
name|DBBroker
name|broker
parameter_list|,
name|Txn
name|transaction
parameter_list|,
name|DocumentImpl
name|document
parameter_list|,
name|XmldbURI
name|oldUri
parameter_list|)
throws|throws
name|TriggerException
block|{
if|if
condition|(
name|LOG
operator|.
name|isDebugEnabled
argument_list|()
condition|)
block|{
name|LOG
operator|.
name|debug
argument_list|(
name|String
operator|.
name|format
argument_list|(
literal|"%s %s"
argument_list|,
name|document
operator|.
name|getURI
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|,
name|oldUri
operator|.
name|toString
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|transaction
operator|.
name|getOriginId
argument_list|()
operator|!=
literal|null
operator|&&
name|transaction
operator|.
name|getOriginId
argument_list|()
operator|.
name|startsWith
argument_list|(
name|JMS_EXTENSION_PKG
argument_list|)
condition|)
block|{
name|LOG
operator|.
name|info
argument_list|(
name|String
operator|.
name|format
argument_list|(
name|BLOCKED_MESSAGE
argument_list|,
name|document
operator|.
name|getURI
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
return|return;
block|}
comment|// Create Message
name|eXistMessage
name|msg
init|=
operator|new
name|eXistMessage
argument_list|()
decl_stmt|;
name|msg
operator|.
name|setResourceType
argument_list|(
name|eXistMessage
operator|.
name|ResourceType
operator|.
name|DOCUMENT
argument_list|)
expr_stmt|;
name|msg
operator|.
name|setResourceOperation
argument_list|(
name|eXistMessage
operator|.
name|ResourceOperation
operator|.
name|COPY
argument_list|)
expr_stmt|;
name|msg
operator|.
name|setResourcePath
argument_list|(
name|oldUri
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|msg
operator|.
name|setDestinationPath
argument_list|(
name|document
operator|.
name|getURI
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
comment|// Send Message
name|sendMessage
argument_list|(
name|msg
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|afterMoveDocument
parameter_list|(
name|DBBroker
name|broker
parameter_list|,
name|Txn
name|transaction
parameter_list|,
name|DocumentImpl
name|document
parameter_list|,
name|XmldbURI
name|oldUri
parameter_list|)
throws|throws
name|TriggerException
block|{
if|if
condition|(
name|LOG
operator|.
name|isDebugEnabled
argument_list|()
condition|)
block|{
name|LOG
operator|.
name|debug
argument_list|(
name|String
operator|.
name|format
argument_list|(
literal|"%s %s"
argument_list|,
name|document
operator|.
name|getURI
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|,
name|oldUri
operator|.
name|toString
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|transaction
operator|.
name|getOriginId
argument_list|()
operator|!=
literal|null
operator|&&
name|transaction
operator|.
name|getOriginId
argument_list|()
operator|.
name|startsWith
argument_list|(
name|JMS_EXTENSION_PKG
argument_list|)
condition|)
block|{
name|LOG
operator|.
name|info
argument_list|(
name|String
operator|.
name|format
argument_list|(
name|BLOCKED_MESSAGE
argument_list|,
name|document
operator|.
name|getURI
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
return|return;
block|}
comment|// Create Message
name|eXistMessage
name|msg
init|=
operator|new
name|eXistMessage
argument_list|()
decl_stmt|;
name|msg
operator|.
name|setResourceType
argument_list|(
name|eXistMessage
operator|.
name|ResourceType
operator|.
name|DOCUMENT
argument_list|)
expr_stmt|;
name|msg
operator|.
name|setResourceOperation
argument_list|(
name|eXistMessage
operator|.
name|ResourceOperation
operator|.
name|MOVE
argument_list|)
expr_stmt|;
name|msg
operator|.
name|setResourcePath
argument_list|(
name|oldUri
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|msg
operator|.
name|setDestinationPath
argument_list|(
name|document
operator|.
name|getURI
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
comment|// Send Message
name|sendMessage
argument_list|(
name|msg
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|afterDeleteDocument
parameter_list|(
name|DBBroker
name|broker
parameter_list|,
name|Txn
name|transaction
parameter_list|,
name|XmldbURI
name|uri
parameter_list|)
throws|throws
name|TriggerException
block|{
if|if
condition|(
name|LOG
operator|.
name|isDebugEnabled
argument_list|()
condition|)
block|{
name|LOG
operator|.
name|debug
argument_list|(
name|uri
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|transaction
operator|.
name|getOriginId
argument_list|()
operator|!=
literal|null
operator|&&
name|transaction
operator|.
name|getOriginId
argument_list|()
operator|.
name|startsWith
argument_list|(
name|JMS_EXTENSION_PKG
argument_list|)
condition|)
block|{
name|LOG
operator|.
name|info
argument_list|(
name|String
operator|.
name|format
argument_list|(
name|BLOCKED_MESSAGE
argument_list|,
name|uri
operator|.
name|toString
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
return|return;
block|}
comment|// Create Message
name|eXistMessage
name|msg
init|=
operator|new
name|eXistMessage
argument_list|()
decl_stmt|;
name|msg
operator|.
name|setResourceType
argument_list|(
name|eXistMessage
operator|.
name|ResourceType
operator|.
name|DOCUMENT
argument_list|)
expr_stmt|;
name|msg
operator|.
name|setResourceOperation
argument_list|(
name|eXistMessage
operator|.
name|ResourceOperation
operator|.
name|DELETE
argument_list|)
expr_stmt|;
name|msg
operator|.
name|setResourcePath
argument_list|(
name|uri
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
comment|// Send Message
name|sendMessage
argument_list|(
name|msg
argument_list|)
expr_stmt|;
block|}
comment|//
comment|// Collection Triggers
comment|//
annotation|@
name|Override
specifier|public
name|void
name|afterCreateCollection
parameter_list|(
name|DBBroker
name|broker
parameter_list|,
name|Txn
name|transaction
parameter_list|,
name|Collection
name|collection
parameter_list|)
throws|throws
name|TriggerException
block|{
if|if
condition|(
name|LOG
operator|.
name|isDebugEnabled
argument_list|()
condition|)
block|{
name|LOG
operator|.
name|debug
argument_list|(
name|collection
operator|.
name|getURI
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|transaction
operator|.
name|getOriginId
argument_list|()
operator|!=
literal|null
operator|&&
name|transaction
operator|.
name|getOriginId
argument_list|()
operator|.
name|startsWith
argument_list|(
name|JMS_EXTENSION_PKG
argument_list|)
condition|)
block|{
name|LOG
operator|.
name|info
argument_list|(
name|String
operator|.
name|format
argument_list|(
name|BLOCKED_MESSAGE
argument_list|,
name|collection
operator|.
name|getURI
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|// Create Message
name|eXistMessage
name|msg
init|=
operator|new
name|eXistMessage
argument_list|()
decl_stmt|;
name|msg
operator|.
name|setResourceType
argument_list|(
name|eXistMessage
operator|.
name|ResourceType
operator|.
name|COLLECTION
argument_list|)
expr_stmt|;
name|msg
operator|.
name|setResourceOperation
argument_list|(
name|eXistMessage
operator|.
name|ResourceOperation
operator|.
name|CREATE
argument_list|)
expr_stmt|;
name|msg
operator|.
name|setResourcePath
argument_list|(
name|collection
operator|.
name|getURI
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|md
init|=
name|msg
operator|.
name|getMetadata
argument_list|()
decl_stmt|;
name|MessageHelper
operator|.
name|retrievePermission
argument_list|(
name|md
argument_list|,
name|collection
operator|.
name|getPermissions
argument_list|()
argument_list|)
expr_stmt|;
comment|// Send Message
name|sendMessage
argument_list|(
name|msg
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|afterCopyCollection
parameter_list|(
name|DBBroker
name|broker
parameter_list|,
name|Txn
name|transaction
parameter_list|,
name|Collection
name|collection
parameter_list|,
name|XmldbURI
name|oldUri
parameter_list|)
throws|throws
name|TriggerException
block|{
if|if
condition|(
name|LOG
operator|.
name|isDebugEnabled
argument_list|()
condition|)
block|{
name|LOG
operator|.
name|debug
argument_list|(
name|String
operator|.
name|format
argument_list|(
literal|"%s %s"
argument_list|,
name|collection
operator|.
name|getURI
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|,
name|oldUri
operator|.
name|toString
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|transaction
operator|.
name|getOriginId
argument_list|()
operator|!=
literal|null
operator|&&
name|transaction
operator|.
name|getOriginId
argument_list|()
operator|.
name|startsWith
argument_list|(
name|JMS_EXTENSION_PKG
argument_list|)
condition|)
block|{
name|LOG
operator|.
name|info
argument_list|(
name|String
operator|.
name|format
argument_list|(
name|BLOCKED_MESSAGE
argument_list|,
name|collection
operator|.
name|getURI
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|// Create Message
name|eXistMessage
name|msg
init|=
operator|new
name|eXistMessage
argument_list|()
decl_stmt|;
name|msg
operator|.
name|setResourceType
argument_list|(
name|eXistMessage
operator|.
name|ResourceType
operator|.
name|COLLECTION
argument_list|)
expr_stmt|;
name|msg
operator|.
name|setResourceOperation
argument_list|(
name|eXistMessage
operator|.
name|ResourceOperation
operator|.
name|COPY
argument_list|)
expr_stmt|;
name|msg
operator|.
name|setResourcePath
argument_list|(
name|oldUri
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|msg
operator|.
name|setDestinationPath
argument_list|(
name|collection
operator|.
name|getURI
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
comment|// Send Message
name|sendMessage
argument_list|(
name|msg
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|afterMoveCollection
parameter_list|(
name|DBBroker
name|broker
parameter_list|,
name|Txn
name|transaction
parameter_list|,
name|Collection
name|collection
parameter_list|,
name|XmldbURI
name|oldUri
parameter_list|)
throws|throws
name|TriggerException
block|{
if|if
condition|(
name|LOG
operator|.
name|isDebugEnabled
argument_list|()
condition|)
block|{
name|LOG
operator|.
name|debug
argument_list|(
name|String
operator|.
name|format
argument_list|(
literal|"%s %s"
argument_list|,
name|collection
operator|.
name|getURI
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|,
name|oldUri
operator|.
name|toString
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|transaction
operator|.
name|getOriginId
argument_list|()
operator|!=
literal|null
operator|&&
name|transaction
operator|.
name|getOriginId
argument_list|()
operator|.
name|startsWith
argument_list|(
name|JMS_EXTENSION_PKG
argument_list|)
condition|)
block|{
name|LOG
operator|.
name|info
argument_list|(
name|String
operator|.
name|format
argument_list|(
name|BLOCKED_MESSAGE
argument_list|,
name|collection
operator|.
name|getURI
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
return|return;
block|}
comment|// Create Message
name|eXistMessage
name|msg
init|=
operator|new
name|eXistMessage
argument_list|()
decl_stmt|;
name|msg
operator|.
name|setResourceType
argument_list|(
name|eXistMessage
operator|.
name|ResourceType
operator|.
name|COLLECTION
argument_list|)
expr_stmt|;
name|msg
operator|.
name|setResourceOperation
argument_list|(
name|eXistMessage
operator|.
name|ResourceOperation
operator|.
name|MOVE
argument_list|)
expr_stmt|;
name|msg
operator|.
name|setResourcePath
argument_list|(
name|oldUri
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|msg
operator|.
name|setDestinationPath
argument_list|(
name|collection
operator|.
name|getURI
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
comment|// Send Message
name|sendMessage
argument_list|(
name|msg
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|afterDeleteCollection
parameter_list|(
name|DBBroker
name|broker
parameter_list|,
name|Txn
name|transaction
parameter_list|,
name|XmldbURI
name|uri
parameter_list|)
throws|throws
name|TriggerException
block|{
if|if
condition|(
name|LOG
operator|.
name|isDebugEnabled
argument_list|()
condition|)
block|{
name|LOG
operator|.
name|debug
argument_list|(
name|uri
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|transaction
operator|.
name|getOriginId
argument_list|()
operator|!=
literal|null
operator|&&
name|transaction
operator|.
name|getOriginId
argument_list|()
operator|.
name|startsWith
argument_list|(
name|JMS_EXTENSION_PKG
argument_list|)
condition|)
block|{
name|LOG
operator|.
name|info
argument_list|(
name|String
operator|.
name|format
argument_list|(
name|BLOCKED_MESSAGE
argument_list|,
name|uri
operator|.
name|toString
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
return|return;
block|}
comment|// Create Message
name|eXistMessage
name|msg
init|=
operator|new
name|eXistMessage
argument_list|()
decl_stmt|;
name|msg
operator|.
name|setResourceType
argument_list|(
name|eXistMessage
operator|.
name|ResourceType
operator|.
name|COLLECTION
argument_list|)
expr_stmt|;
name|msg
operator|.
name|setResourceOperation
argument_list|(
name|eXistMessage
operator|.
name|ResourceOperation
operator|.
name|DELETE
argument_list|)
expr_stmt|;
name|msg
operator|.
name|setResourcePath
argument_list|(
name|uri
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
comment|// Send Message
name|sendMessage
argument_list|(
name|msg
argument_list|)
expr_stmt|;
block|}
comment|//
comment|// Metadata triggers
comment|//
annotation|@
name|Override
specifier|public
name|void
name|afterUpdateDocumentMetadata
parameter_list|(
name|DBBroker
name|broker
parameter_list|,
name|Txn
name|transaction
parameter_list|,
name|DocumentImpl
name|document
parameter_list|)
throws|throws
name|TriggerException
block|{
if|if
condition|(
name|LOG
operator|.
name|isDebugEnabled
argument_list|()
condition|)
block|{
name|LOG
operator|.
name|debug
argument_list|(
name|document
operator|.
name|getURI
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|transaction
operator|.
name|getOriginId
argument_list|()
operator|!=
literal|null
operator|&&
name|transaction
operator|.
name|getOriginId
argument_list|()
operator|.
name|startsWith
argument_list|(
name|JMS_EXTENSION_PKG
argument_list|)
condition|)
block|{
name|LOG
operator|.
name|info
argument_list|(
name|String
operator|.
name|format
argument_list|(
name|BLOCKED_MESSAGE
argument_list|,
name|document
operator|.
name|getURI
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
return|return;
block|}
comment|// Create Message
name|eXistMessage
name|msg
init|=
operator|new
name|eXistMessage
argument_list|()
decl_stmt|;
name|msg
operator|.
name|setResourceType
argument_list|(
name|eXistMessage
operator|.
name|ResourceType
operator|.
name|DOCUMENT
argument_list|)
expr_stmt|;
name|msg
operator|.
name|setResourceOperation
argument_list|(
name|eXistMessage
operator|.
name|ResourceOperation
operator|.
name|METADATA
argument_list|)
expr_stmt|;
name|msg
operator|.
name|setResourcePath
argument_list|(
name|document
operator|.
name|getURI
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
comment|// Retrieve Metadata
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|md
init|=
name|msg
operator|.
name|getMetadata
argument_list|()
decl_stmt|;
name|MessageHelper
operator|.
name|retrieveDocMetadata
argument_list|(
name|md
argument_list|,
name|document
operator|.
name|getMetadata
argument_list|()
argument_list|)
expr_stmt|;
name|MessageHelper
operator|.
name|retrieveFromDocument
argument_list|(
name|md
argument_list|,
name|document
argument_list|)
expr_stmt|;
name|MessageHelper
operator|.
name|retrievePermission
argument_list|(
name|md
argument_list|,
name|document
operator|.
name|getPermissions
argument_list|()
argument_list|)
expr_stmt|;
comment|// Send Message
name|sendMessage
argument_list|(
name|msg
argument_list|)
expr_stmt|;
block|}
comment|//
comment|// Misc
comment|//
annotation|@
name|Override
specifier|public
name|void
name|configure
parameter_list|(
name|DBBroker
name|broker
parameter_list|,
name|Collection
name|parent
parameter_list|,
name|Map
argument_list|<
name|String
argument_list|,
name|List
argument_list|<
name|?
argument_list|>
argument_list|>
name|parameters
parameter_list|)
throws|throws
name|TriggerException
block|{
name|super
operator|.
name|configure
argument_list|(
name|broker
argument_list|,
name|parent
argument_list|,
name|parameters
argument_list|)
expr_stmt|;
name|this
operator|.
name|parameters
operator|=
name|parameters
expr_stmt|;
block|}
comment|/**      * Send 'trigger' message with parameters set using      * {@link #configure(org.exist.storage.DBBroker, org.exist.collections.Collection, java.util.Map)}      */
specifier|private
name|void
name|sendMessage
parameter_list|(
name|eXistMessage
name|msg
parameter_list|)
comment|/* throws TriggerException  */
block|{
comment|// Send Message
name|JMSMessageSender
name|sender
init|=
operator|new
name|JMSMessageSender
argument_list|(
name|parameters
argument_list|)
decl_stmt|;
try|try
block|{
name|sender
operator|.
name|sendMessage
argument_list|(
name|msg
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|TransportException
name|ex
parameter_list|)
block|{
name|LOG
operator|.
name|error
argument_list|(
name|ex
operator|.
name|getMessage
argument_list|()
argument_list|,
name|ex
argument_list|)
expr_stmt|;
comment|//throw new TriggerException(ex.getMessage(), ex);
block|}
catch|catch
parameter_list|(
name|Throwable
name|ex
parameter_list|)
block|{
name|LOG
operator|.
name|error
argument_list|(
name|ex
operator|.
name|getMessage
argument_list|()
argument_list|,
name|ex
argument_list|)
expr_stmt|;
comment|//throw new TriggerException(ex.getMessage(), ex);
block|}
block|}
comment|/*      * ****** unused methods follow ******      */
annotation|@
name|Override
annotation|@
name|Deprecated
specifier|public
name|void
name|prepare
parameter_list|(
name|int
name|event
parameter_list|,
name|DBBroker
name|broker
parameter_list|,
name|Txn
name|transaction
parameter_list|,
name|XmldbURI
name|documentPath
parameter_list|,
name|DocumentImpl
name|existingDocument
parameter_list|)
throws|throws
name|TriggerException
block|{
comment|// Ignored
block|}
annotation|@
name|Override
annotation|@
name|Deprecated
specifier|public
name|void
name|finish
parameter_list|(
name|int
name|event
parameter_list|,
name|DBBroker
name|broker
parameter_list|,
name|Txn
name|transaction
parameter_list|,
name|XmldbURI
name|documentPath
parameter_list|,
name|DocumentImpl
name|document
parameter_list|)
block|{
comment|// Ignored
block|}
annotation|@
name|Override
specifier|public
name|void
name|beforeCreateDocument
parameter_list|(
name|DBBroker
name|broker
parameter_list|,
name|Txn
name|transaction
parameter_list|,
name|XmldbURI
name|uri
parameter_list|)
throws|throws
name|TriggerException
block|{
comment|// Ignored
block|}
annotation|@
name|Override
specifier|public
name|void
name|beforeUpdateDocument
parameter_list|(
name|DBBroker
name|broker
parameter_list|,
name|Txn
name|transaction
parameter_list|,
name|DocumentImpl
name|document
parameter_list|)
throws|throws
name|TriggerException
block|{
comment|// Ignored
block|}
annotation|@
name|Override
specifier|public
name|void
name|beforeCopyDocument
parameter_list|(
name|DBBroker
name|broker
parameter_list|,
name|Txn
name|transaction
parameter_list|,
name|DocumentImpl
name|document
parameter_list|,
name|XmldbURI
name|newUri
parameter_list|)
throws|throws
name|TriggerException
block|{
comment|// Ignored
block|}
annotation|@
name|Override
specifier|public
name|void
name|beforeMoveDocument
parameter_list|(
name|DBBroker
name|broker
parameter_list|,
name|Txn
name|transaction
parameter_list|,
name|DocumentImpl
name|document
parameter_list|,
name|XmldbURI
name|newUri
parameter_list|)
throws|throws
name|TriggerException
block|{
comment|// Ignored
block|}
annotation|@
name|Override
specifier|public
name|void
name|beforeDeleteDocument
parameter_list|(
name|DBBroker
name|broker
parameter_list|,
name|Txn
name|transaction
parameter_list|,
name|DocumentImpl
name|document
parameter_list|)
throws|throws
name|TriggerException
block|{
comment|// Ignored
block|}
annotation|@
name|Override
specifier|public
name|void
name|beforeUpdateDocumentMetadata
parameter_list|(
name|DBBroker
name|broker
parameter_list|,
name|Txn
name|txn
parameter_list|,
name|DocumentImpl
name|document
parameter_list|)
throws|throws
name|TriggerException
block|{
comment|// Ignored
block|}
annotation|@
name|Override
annotation|@
name|Deprecated
specifier|public
name|void
name|prepare
parameter_list|(
name|int
name|event
parameter_list|,
name|DBBroker
name|broker
parameter_list|,
name|Txn
name|transaction
parameter_list|,
name|Collection
name|collection
parameter_list|,
name|Collection
name|newCollection
parameter_list|)
throws|throws
name|TriggerException
block|{
comment|// Ignored
block|}
annotation|@
name|Override
annotation|@
name|Deprecated
specifier|public
name|void
name|finish
parameter_list|(
name|int
name|event
parameter_list|,
name|DBBroker
name|broker
parameter_list|,
name|Txn
name|transaction
parameter_list|,
name|Collection
name|collection
parameter_list|,
name|Collection
name|newCollection
parameter_list|)
block|{
comment|// Ignored
block|}
annotation|@
name|Override
specifier|public
name|void
name|beforeCreateCollection
parameter_list|(
name|DBBroker
name|broker
parameter_list|,
name|Txn
name|transaction
parameter_list|,
name|XmldbURI
name|uri
parameter_list|)
throws|throws
name|TriggerException
block|{
comment|// Ignored
block|}
annotation|@
name|Override
specifier|public
name|void
name|beforeCopyCollection
parameter_list|(
name|DBBroker
name|broker
parameter_list|,
name|Txn
name|transaction
parameter_list|,
name|Collection
name|collection
parameter_list|,
name|XmldbURI
name|newUri
parameter_list|)
throws|throws
name|TriggerException
block|{
comment|// Ignored
block|}
annotation|@
name|Override
specifier|public
name|void
name|beforeMoveCollection
parameter_list|(
name|DBBroker
name|broker
parameter_list|,
name|Txn
name|transaction
parameter_list|,
name|Collection
name|collection
parameter_list|,
name|XmldbURI
name|newUri
parameter_list|)
throws|throws
name|TriggerException
block|{
comment|// Ignored
block|}
annotation|@
name|Override
specifier|public
name|void
name|beforeDeleteCollection
parameter_list|(
name|DBBroker
name|broker
parameter_list|,
name|Txn
name|transaction
parameter_list|,
name|Collection
name|collection
parameter_list|)
throws|throws
name|TriggerException
block|{
comment|// Ignored
block|}
block|}
end_class

end_unit

