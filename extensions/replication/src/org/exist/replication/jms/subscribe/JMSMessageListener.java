begin_unit|revision:1.0.0;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  *  eXist Open Source Native XML Database  *  Copyright (C) 2010 The eXist Project  *  http://exist-db.org  *  *  This program is free software; you can redistribute it and/or  *  modify it under the terms of the GNU Lesser General Public License  *  as published by the Free Software Foundation; either version 2  *  of the License, or (at your option) any later version.  *  *  This program is distributed in the hope that it will be useful,  *  but WITHOUT ANY WARRANTY; without even the implied warranty of  *  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the  *  GNU Lesser General Public License for more details.  *  *  You should have received a copy of the GNU Lesser General Public  *  License along with this library; if not, write to the Free Software  *  Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA  02110-1301  USA  *  *  $Id$  */
end_comment

begin_package
package|package
name|org
operator|.
name|exist
operator|.
name|replication
operator|.
name|jms
operator|.
name|subscribe
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|BufferedInputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|ByteArrayInputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|InputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Enumeration
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|zip
operator|.
name|GZIPInputStream
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|jms
operator|.
name|BytesMessage
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|jms
operator|.
name|JMSException
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|jms
operator|.
name|Message
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|jms
operator|.
name|MessageListener
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|log4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|collections
operator|.
name|Collection
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|collections
operator|.
name|IndexInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|dom
operator|.
name|DocumentImpl
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|dom
operator|.
name|DocumentMetadata
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|replication
operator|.
name|shared
operator|.
name|MessageHelper
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|replication
operator|.
name|shared
operator|.
name|eXistMessage
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|security
operator|.
name|Account
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|security
operator|.
name|Group
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|security
operator|.
name|Permission
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|storage
operator|.
name|BrokerPool
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|storage
operator|.
name|DBBroker
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|storage
operator|.
name|lock
operator|.
name|Lock
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|storage
operator|.
name|txn
operator|.
name|TransactionManager
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|storage
operator|.
name|txn
operator|.
name|Txn
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|util
operator|.
name|MimeTable
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|util
operator|.
name|MimeType
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|util
operator|.
name|VirtualTempFile
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|util
operator|.
name|VirtualTempFileInputSource
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|xmldb
operator|.
name|XmldbURI
import|;
end_import

begin_import
import|import
name|org
operator|.
name|xml
operator|.
name|sax
operator|.
name|InputSource
import|;
end_import

begin_comment
comment|/**  * JMS listener for receiving JMS messages  *  * @author Dannes Wessels  */
end_comment

begin_class
specifier|public
class|class
name|JMSMessageListener
implements|implements
name|MessageListener
block|{
specifier|private
specifier|final
specifier|static
name|Logger
name|LOG
init|=
name|Logger
operator|.
name|getLogger
argument_list|(
name|JMSMessageListener
operator|.
name|class
argument_list|)
decl_stmt|;
specifier|private
name|BrokerPool
name|brokerPool
init|=
literal|null
decl_stmt|;
specifier|private
name|org
operator|.
name|exist
operator|.
name|security
operator|.
name|SecurityManager
name|securityManager
init|=
literal|null
decl_stmt|;
comment|/**      * Constructor      *      * @param brokerpool Reference to database brokerpool      */
specifier|public
name|JMSMessageListener
parameter_list|(
name|BrokerPool
name|brokerpool
parameter_list|)
block|{
name|brokerPool
operator|=
name|brokerpool
expr_stmt|;
name|securityManager
operator|=
name|brokerpool
operator|.
name|getSecurityManager
argument_list|()
expr_stmt|;
block|}
comment|/**      * Convert JMS ByteMessage into an eXist-db specific message.      *      * @param bm The original message      * @return The converted message      */
specifier|private
name|eXistMessage
name|convertMessage
parameter_list|(
name|BytesMessage
name|bm
parameter_list|)
block|{
name|eXistMessage
name|em
init|=
operator|new
name|eXistMessage
argument_list|()
decl_stmt|;
try|try
block|{
name|String
name|value
init|=
name|bm
operator|.
name|getStringProperty
argument_list|(
name|eXistMessage
operator|.
name|EXIST_RESOURCE_TYPE
argument_list|)
decl_stmt|;
name|em
operator|.
name|setResourceType
argument_list|(
name|value
argument_list|)
expr_stmt|;
name|value
operator|=
name|bm
operator|.
name|getStringProperty
argument_list|(
name|eXistMessage
operator|.
name|EXIST_RESOURCE_OPERATION
argument_list|)
expr_stmt|;
name|em
operator|.
name|setResourceOperation
argument_list|(
name|value
argument_list|)
expr_stmt|;
name|value
operator|=
name|bm
operator|.
name|getStringProperty
argument_list|(
name|eXistMessage
operator|.
name|EXIST_SOURCE_PATH
argument_list|)
expr_stmt|;
name|em
operator|.
name|setResourcePath
argument_list|(
name|value
argument_list|)
expr_stmt|;
name|value
operator|=
name|bm
operator|.
name|getStringProperty
argument_list|(
name|eXistMessage
operator|.
name|EXIST_DESTINATION_PATH
argument_list|)
expr_stmt|;
name|em
operator|.
name|setDestinationPath
argument_list|(
name|value
argument_list|)
expr_stmt|;
comment|// This is potentially memory intensive
name|long
name|size
init|=
name|bm
operator|.
name|getBodyLength
argument_list|()
decl_stmt|;
name|byte
index|[]
name|payload
init|=
operator|new
name|byte
index|[
operator|(
name|int
operator|)
name|size
index|]
decl_stmt|;
name|bm
operator|.
name|readBytes
argument_list|(
name|payload
argument_list|)
expr_stmt|;
name|em
operator|.
name|setPayload
argument_list|(
name|payload
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|JMSException
name|ex
parameter_list|)
block|{
name|String
name|errorMessage
init|=
literal|"Unable to convert incoming message. ("
operator|+
name|ex
operator|.
name|getErrorCode
argument_list|()
operator|+
literal|"):  "
operator|+
name|ex
operator|.
name|getMessage
argument_list|()
decl_stmt|;
name|LOG
operator|.
name|error
argument_list|(
name|errorMessage
argument_list|,
name|ex
argument_list|)
expr_stmt|;
throw|throw
operator|new
name|MessageReceiveException
argument_list|(
name|errorMessage
argument_list|)
throw|;
block|}
catch|catch
parameter_list|(
name|IllegalArgumentException
name|ex
parameter_list|)
block|{
name|String
name|errorMessage
init|=
literal|"Unable to convert incoming message. "
operator|+
name|ex
operator|.
name|getMessage
argument_list|()
decl_stmt|;
name|LOG
operator|.
name|error
argument_list|(
name|errorMessage
argument_list|,
name|ex
argument_list|)
expr_stmt|;
throw|throw
operator|new
name|MessageReceiveException
argument_list|(
name|errorMessage
argument_list|)
throw|;
block|}
return|return
name|em
return|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|onMessage
parameter_list|(
name|Message
name|msg
parameter_list|)
block|{
try|try
block|{
if|if
condition|(
name|msg
operator|instanceof
name|BytesMessage
condition|)
block|{
comment|// Prepare received message
name|eXistMessage
name|em
init|=
name|convertMessage
argument_list|(
operator|(
name|BytesMessage
operator|)
name|msg
argument_list|)
decl_stmt|;
name|Enumeration
name|e
init|=
name|msg
operator|.
name|getPropertyNames
argument_list|()
decl_stmt|;
while|while
condition|(
name|e
operator|.
name|hasMoreElements
argument_list|()
condition|)
block|{
name|Object
name|next
init|=
name|e
operator|.
name|nextElement
argument_list|()
decl_stmt|;
if|if
condition|(
name|next
operator|instanceof
name|String
condition|)
block|{
name|em
operator|.
name|getMetadata
argument_list|()
operator|.
name|put
argument_list|(
operator|(
name|String
operator|)
name|next
argument_list|,
name|msg
operator|.
name|getObjectProperty
argument_list|(
operator|(
name|String
operator|)
name|next
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
comment|// Report some details into logging
if|if
condition|(
name|LOG
operator|.
name|isDebugEnabled
argument_list|()
condition|)
block|{
name|LOG
operator|.
name|debug
argument_list|(
name|em
operator|.
name|getReport
argument_list|()
argument_list|)
expr_stmt|;
block|}
comment|// First step: distinct between update for documents and messsages
switch|switch
condition|(
name|em
operator|.
name|getResourceType
argument_list|()
condition|)
block|{
case|case
name|DOCUMENT
case|:
name|handleDocument
argument_list|(
name|em
argument_list|)
expr_stmt|;
break|break;
case|case
name|COLLECTION
case|:
name|handleCollection
argument_list|(
name|em
argument_list|)
expr_stmt|;
break|break;
default|default:
name|String
name|errorMessage
init|=
literal|"Unknown resource type "
operator|+
name|em
operator|.
name|getResourceType
argument_list|()
decl_stmt|;
name|LOG
operator|.
name|error
argument_list|(
name|errorMessage
argument_list|)
expr_stmt|;
throw|throw
operator|new
name|MessageReceiveException
argument_list|(
name|errorMessage
argument_list|)
throw|;
block|}
block|}
else|else
block|{
comment|// Only ByteMessage objects supported.
throw|throw
operator|new
name|MessageReceiveException
argument_list|(
literal|"Could not handle message type "
operator|+
name|msg
operator|.
name|getClass
argument_list|()
operator|.
name|getSimpleName
argument_list|()
argument_list|)
throw|;
block|}
block|}
catch|catch
parameter_list|(
name|MessageReceiveException
name|ex
parameter_list|)
block|{
comment|// Thrown by local code. Just make it pass
name|LOG
operator|.
name|error
argument_list|(
literal|"Could not handle received message: "
operator|+
name|ex
operator|.
name|getMessage
argument_list|()
argument_list|,
name|ex
argument_list|)
expr_stmt|;
throw|throw
name|ex
throw|;
block|}
catch|catch
parameter_list|(
name|Throwable
name|t
parameter_list|)
block|{
comment|// Something really unexpected happened. Report
name|LOG
operator|.
name|error
argument_list|(
name|t
operator|.
name|getMessage
argument_list|()
argument_list|,
name|t
argument_list|)
expr_stmt|;
throw|throw
operator|new
name|MessageReceiveException
argument_list|(
literal|"Could not handle received message: "
operator|+
name|t
operator|.
name|getMessage
argument_list|()
argument_list|,
name|t
argument_list|)
throw|;
block|}
block|}
comment|/**      * Handle operation on documents      *      * @param em Message containing information about documents      */
specifier|private
name|void
name|handleDocument
parameter_list|(
name|eXistMessage
name|em
parameter_list|)
block|{
switch|switch
condition|(
name|em
operator|.
name|getResourceOperation
argument_list|()
condition|)
block|{
case|case
name|CREATE
case|:
case|case
name|UPDATE
case|:
name|createDocument
argument_list|(
name|em
argument_list|)
expr_stmt|;
break|break;
case|case
name|METADATA
case|:
name|updateMetadataDocument
argument_list|(
name|em
argument_list|)
expr_stmt|;
break|break;
case|case
name|DELETE
case|:
name|deleteDocument
argument_list|(
name|em
argument_list|)
expr_stmt|;
break|break;
case|case
name|MOVE
case|:
name|relocateDocument
argument_list|(
name|em
argument_list|,
literal|false
argument_list|)
expr_stmt|;
break|break;
case|case
name|COPY
case|:
name|relocateDocument
argument_list|(
name|em
argument_list|,
literal|true
argument_list|)
expr_stmt|;
break|break;
default|default:
name|String
name|errorMessage
init|=
literal|"Unknown resource type "
operator|+
name|em
operator|.
name|getResourceOperation
argument_list|()
decl_stmt|;
name|LOG
operator|.
name|error
argument_list|(
name|errorMessage
argument_list|)
expr_stmt|;
throw|throw
operator|new
name|MessageReceiveException
argument_list|(
name|errorMessage
argument_list|)
throw|;
block|}
block|}
comment|/**      * Handle operation on collections      *      * @param em Message containing information about collections      */
specifier|private
name|void
name|handleCollection
parameter_list|(
name|eXistMessage
name|em
parameter_list|)
block|{
switch|switch
condition|(
name|em
operator|.
name|getResourceOperation
argument_list|()
condition|)
block|{
case|case
name|CREATE
case|:
case|case
name|UPDATE
case|:
name|createCollection
argument_list|(
name|em
argument_list|)
expr_stmt|;
break|break;
case|case
name|DELETE
case|:
name|deleteCollection
argument_list|(
name|em
argument_list|)
expr_stmt|;
break|break;
case|case
name|MOVE
case|:
name|relocateCollection
argument_list|(
name|em
argument_list|,
literal|false
argument_list|)
expr_stmt|;
break|break;
case|case
name|COPY
case|:
name|relocateCollection
argument_list|(
name|em
argument_list|,
literal|true
argument_list|)
expr_stmt|;
break|break;
default|default:
name|String
name|errorMessage
init|=
literal|"Unknown change type"
decl_stmt|;
name|LOG
operator|.
name|error
argument_list|(
name|errorMessage
argument_list|)
expr_stmt|;
throw|throw
operator|new
name|MessageReceiveException
argument_list|(
name|errorMessage
argument_list|)
throw|;
block|}
block|}
comment|/**      * Created document in database      */
specifier|private
name|void
name|createDocument
parameter_list|(
name|eXistMessage
name|em
parameter_list|)
block|{
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|props
init|=
name|em
operator|.
name|getMetadata
argument_list|()
decl_stmt|;
name|XmldbURI
name|sourcePath
init|=
name|XmldbURI
operator|.
name|create
argument_list|(
name|em
operator|.
name|getResourcePath
argument_list|()
argument_list|)
decl_stmt|;
name|XmldbURI
name|colURI
init|=
name|sourcePath
operator|.
name|removeLastSegment
argument_list|()
decl_stmt|;
name|XmldbURI
name|docURI
init|=
name|sourcePath
operator|.
name|lastSegment
argument_list|()
decl_stmt|;
comment|// References to the database
name|DBBroker
name|broker
init|=
literal|null
decl_stmt|;
name|Collection
name|collection
init|=
literal|null
decl_stmt|;
comment|// Get mime, or NULL when not available
name|MimeType
name|mime
init|=
name|MimeTable
operator|.
name|getInstance
argument_list|()
operator|.
name|getContentTypeFor
argument_list|(
name|docURI
operator|.
name|toString
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|mime
operator|==
literal|null
condition|)
block|{
name|mime
operator|=
name|MimeType
operator|.
name|BINARY_TYPE
expr_stmt|;
block|}
comment|// Get OWNER
name|String
name|userName
init|=
literal|null
decl_stmt|;
name|Object
name|prop
init|=
name|props
operator|.
name|get
argument_list|(
name|MessageHelper
operator|.
name|EXIST_RESOURCE_OWNER
argument_list|)
decl_stmt|;
if|if
condition|(
name|prop
operator|!=
literal|null
operator|&&
name|prop
operator|instanceof
name|String
condition|)
block|{
name|userName
operator|=
operator|(
name|String
operator|)
name|prop
expr_stmt|;
block|}
name|Account
name|account
init|=
name|securityManager
operator|.
name|getAccount
argument_list|(
name|userName
argument_list|)
decl_stmt|;
if|if
condition|(
name|account
operator|==
literal|null
condition|)
block|{
name|String
name|errorText
init|=
literal|"Username "
operator|+
name|userName
operator|+
literal|" does not exist."
decl_stmt|;
name|LOG
operator|.
name|error
argument_list|(
name|errorText
argument_list|)
expr_stmt|;
throw|throw
operator|new
name|MessageReceiveException
argument_list|(
name|errorText
argument_list|)
throw|;
block|}
comment|// Get GROUP
name|String
name|groupName
init|=
literal|null
decl_stmt|;
name|prop
operator|=
name|props
operator|.
name|get
argument_list|(
name|MessageHelper
operator|.
name|EXIST_RESOURCE_GROUP
argument_list|)
expr_stmt|;
if|if
condition|(
name|prop
operator|!=
literal|null
operator|&&
name|prop
operator|instanceof
name|String
condition|)
block|{
name|groupName
operator|=
operator|(
name|String
operator|)
name|prop
expr_stmt|;
block|}
name|Group
name|group
init|=
name|securityManager
operator|.
name|getGroup
argument_list|(
name|groupName
argument_list|)
decl_stmt|;
if|if
condition|(
name|group
operator|==
literal|null
condition|)
block|{
name|String
name|errorText
init|=
literal|"Group "
operator|+
name|groupName
operator|+
literal|" does not exist."
decl_stmt|;
name|LOG
operator|.
name|error
argument_list|(
name|errorText
argument_list|)
expr_stmt|;
throw|throw
operator|new
name|MessageReceiveException
argument_list|(
name|errorText
argument_list|)
throw|;
block|}
comment|// Get MIME_TYPE
name|MimeTable
name|mimeTable
init|=
name|MimeTable
operator|.
name|getInstance
argument_list|()
decl_stmt|;
name|String
name|mimeType
init|=
literal|null
decl_stmt|;
name|prop
operator|=
name|props
operator|.
name|get
argument_list|(
name|MessageHelper
operator|.
name|EXIST_RESOURCE_MIMETYPE
argument_list|)
expr_stmt|;
if|if
condition|(
name|prop
operator|!=
literal|null
operator|&&
name|prop
operator|instanceof
name|String
condition|)
block|{
name|MimeType
name|mT
init|=
name|mimeTable
operator|.
name|getContentTypeFor
argument_list|(
operator|(
name|String
operator|)
name|prop
argument_list|)
decl_stmt|;
if|if
condition|(
name|mT
operator|!=
literal|null
condition|)
block|{
name|mimeType
operator|=
name|mT
operator|.
name|getName
argument_list|()
expr_stmt|;
block|}
block|}
comment|// Fallback based on filename
if|if
condition|(
name|mimeType
operator|==
literal|null
condition|)
block|{
name|MimeType
name|mT
init|=
name|mimeTable
operator|.
name|getContentTypeFor
argument_list|(
name|sourcePath
argument_list|)
decl_stmt|;
if|if
condition|(
name|mT
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|MessageReceiveException
argument_list|(
literal|"Unable to determine mimetype"
argument_list|)
throw|;
block|}
name|mimeType
operator|=
name|mT
operator|.
name|getName
argument_list|()
expr_stmt|;
block|}
comment|// Get/Set permissions
name|Integer
name|mode
init|=
literal|null
decl_stmt|;
name|prop
operator|=
name|props
operator|.
name|get
argument_list|(
name|MessageHelper
operator|.
name|EXIST_RESOURCE_MODE
argument_list|)
expr_stmt|;
if|if
condition|(
name|prop
operator|!=
literal|null
operator|&&
name|prop
operator|instanceof
name|Integer
condition|)
block|{
name|mode
operator|=
operator|(
name|Integer
operator|)
name|prop
expr_stmt|;
block|}
comment|// Start transaction
name|TransactionManager
name|txnManager
init|=
name|brokerPool
operator|.
name|getTransactionManager
argument_list|()
decl_stmt|;
name|Txn
name|txn
init|=
name|txnManager
operator|.
name|beginTransaction
argument_list|()
decl_stmt|;
try|try
block|{
comment|// TODO get user
name|broker
operator|=
name|brokerPool
operator|.
name|get
argument_list|(
name|securityManager
operator|.
name|getSystemSubject
argument_list|()
argument_list|)
expr_stmt|;
comment|// Check if collection exists. not likely to happen since availability is checked
comment|// by ResourceFactory
name|collection
operator|=
name|broker
operator|.
name|openCollection
argument_list|(
name|colURI
argument_list|,
name|Lock
operator|.
name|WRITE_LOCK
argument_list|)
expr_stmt|;
comment|//            collection.setTriggersEnabled(false);
if|if
condition|(
name|collection
operator|==
literal|null
condition|)
block|{
name|String
name|errorMessage
init|=
literal|"Collection "
operator|+
name|colURI
operator|+
literal|" does not exist"
decl_stmt|;
name|LOG
operator|.
name|error
argument_list|(
name|errorMessage
argument_list|)
expr_stmt|;
name|txnManager
operator|.
name|abort
argument_list|(
name|txn
argument_list|)
expr_stmt|;
throw|throw
operator|new
name|MessageReceiveException
argument_list|(
name|errorMessage
argument_list|)
throw|;
block|}
name|DocumentImpl
name|doc
init|=
literal|null
decl_stmt|;
if|if
condition|(
name|mime
operator|.
name|isXMLType
argument_list|()
condition|)
block|{
comment|// Stream into database
name|VirtualTempFile
name|vtf
init|=
operator|new
name|VirtualTempFile
argument_list|(
name|em
operator|.
name|getPayload
argument_list|()
argument_list|)
decl_stmt|;
name|VirtualTempFileInputSource
name|vt
init|=
operator|new
name|VirtualTempFileInputSource
argument_list|(
name|vtf
argument_list|)
decl_stmt|;
name|InputStream
name|byteInputStream
init|=
name|vt
operator|.
name|getByteStream
argument_list|()
decl_stmt|;
comment|// DW: future improvement: determine compression based on property.
name|GZIPInputStream
name|gis
init|=
operator|new
name|GZIPInputStream
argument_list|(
name|byteInputStream
argument_list|)
decl_stmt|;
name|InputSource
name|inputsource
init|=
operator|new
name|InputSource
argument_list|(
name|gis
argument_list|)
decl_stmt|;
name|IndexInfo
name|info
init|=
name|collection
operator|.
name|validateXMLResource
argument_list|(
name|txn
argument_list|,
name|broker
argument_list|,
name|docURI
argument_list|,
name|inputsource
argument_list|)
decl_stmt|;
name|doc
operator|=
name|info
operator|.
name|getDocument
argument_list|()
expr_stmt|;
name|doc
operator|.
name|getMetadata
argument_list|()
operator|.
name|setMimeType
argument_list|(
name|mimeType
argument_list|)
expr_stmt|;
comment|// reconstruct gzip input stream
name|byteInputStream
operator|.
name|reset
argument_list|()
expr_stmt|;
name|gis
operator|=
operator|new
name|GZIPInputStream
argument_list|(
name|byteInputStream
argument_list|)
expr_stmt|;
name|inputsource
operator|=
operator|new
name|InputSource
argument_list|(
name|gis
argument_list|)
expr_stmt|;
name|collection
operator|.
name|store
argument_list|(
name|txn
argument_list|,
name|broker
argument_list|,
name|info
argument_list|,
name|inputsource
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|inputsource
operator|.
name|getByteStream
argument_list|()
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
else|else
block|{
comment|// Stream into database
name|byte
index|[]
name|payload
init|=
name|em
operator|.
name|getPayload
argument_list|()
decl_stmt|;
name|ByteArrayInputStream
name|bais
init|=
operator|new
name|ByteArrayInputStream
argument_list|(
name|payload
argument_list|)
decl_stmt|;
name|GZIPInputStream
name|gis
init|=
operator|new
name|GZIPInputStream
argument_list|(
name|bais
argument_list|)
decl_stmt|;
name|BufferedInputStream
name|bis
init|=
operator|new
name|BufferedInputStream
argument_list|(
name|gis
argument_list|)
decl_stmt|;
name|doc
operator|=
name|collection
operator|.
name|addBinaryResource
argument_list|(
name|txn
argument_list|,
name|broker
argument_list|,
name|docURI
argument_list|,
name|bis
argument_list|,
name|mimeType
argument_list|,
name|payload
operator|.
name|length
argument_list|)
expr_stmt|;
name|bis
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
comment|// Set owner,group and permissions
name|Permission
name|permission
init|=
name|doc
operator|.
name|getPermissions
argument_list|()
decl_stmt|;
if|if
condition|(
name|userName
operator|!=
literal|null
condition|)
block|{
name|permission
operator|.
name|setOwner
argument_list|(
name|userName
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|groupName
operator|!=
literal|null
condition|)
block|{
name|permission
operator|.
name|setGroup
argument_list|(
name|groupName
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|mode
operator|!=
literal|null
condition|)
block|{
name|permission
operator|.
name|setMode
argument_list|(
name|mode
argument_list|)
expr_stmt|;
block|}
comment|// Commit change
name|txnManager
operator|.
name|commit
argument_list|(
name|txn
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Throwable
name|ex
parameter_list|)
block|{
if|if
condition|(
name|LOG
operator|.
name|isDebugEnabled
argument_list|()
condition|)
block|{
name|LOG
operator|.
name|error
argument_list|(
name|ex
operator|.
name|getMessage
argument_list|()
argument_list|,
name|ex
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|LOG
operator|.
name|error
argument_list|(
name|ex
operator|.
name|getMessage
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|txnManager
operator|.
name|abort
argument_list|(
name|txn
argument_list|)
expr_stmt|;
throw|throw
operator|new
name|MessageReceiveException
argument_list|(
literal|"Unable to write document into database: "
operator|+
name|ex
operator|.
name|getMessage
argument_list|()
argument_list|)
throw|;
block|}
finally|finally
block|{
comment|// TODO: check if can be done earlier
if|if
condition|(
name|collection
operator|!=
literal|null
condition|)
block|{
name|collection
operator|.
name|release
argument_list|(
name|Lock
operator|.
name|WRITE_LOCK
argument_list|)
expr_stmt|;
comment|//collection.setTriggersEnabled(true);
block|}
name|txnManager
operator|.
name|close
argument_list|(
name|txn
argument_list|)
expr_stmt|;
name|brokerPool
operator|.
name|release
argument_list|(
name|broker
argument_list|)
expr_stmt|;
block|}
block|}
comment|/**      * Metadata is updated in database      */
specifier|private
name|void
name|updateMetadataDocument
parameter_list|(
name|eXistMessage
name|em
parameter_list|)
block|{
comment|// Permissions
comment|// Mimetype
comment|// owner/groupname
name|XmldbURI
name|sourcePath
init|=
name|XmldbURI
operator|.
name|create
argument_list|(
name|em
operator|.
name|getResourcePath
argument_list|()
argument_list|)
decl_stmt|;
name|XmldbURI
name|colURI
init|=
name|sourcePath
operator|.
name|removeLastSegment
argument_list|()
decl_stmt|;
name|XmldbURI
name|docURI
init|=
name|sourcePath
operator|.
name|lastSegment
argument_list|()
decl_stmt|;
comment|// References to the database
name|DBBroker
name|broker
init|=
literal|null
decl_stmt|;
name|Collection
name|collection
init|=
literal|null
decl_stmt|;
name|DocumentImpl
name|resource
init|=
literal|null
decl_stmt|;
name|TransactionManager
name|txnManager
init|=
name|brokerPool
operator|.
name|getTransactionManager
argument_list|()
decl_stmt|;
name|Txn
name|txn
init|=
name|txnManager
operator|.
name|beginTransaction
argument_list|()
decl_stmt|;
try|try
block|{
comment|// TODO get user
name|broker
operator|=
name|brokerPool
operator|.
name|get
argument_list|(
name|securityManager
operator|.
name|getSystemSubject
argument_list|()
argument_list|)
expr_stmt|;
comment|// Open collection if possible, else abort
name|collection
operator|=
name|broker
operator|.
name|openCollection
argument_list|(
name|colURI
argument_list|,
name|Lock
operator|.
name|WRITE_LOCK
argument_list|)
expr_stmt|;
if|if
condition|(
name|collection
operator|==
literal|null
condition|)
block|{
name|String
name|errorText
init|=
literal|"Collection does not exist "
operator|+
name|colURI
decl_stmt|;
name|LOG
operator|.
name|error
argument_list|(
name|errorText
argument_list|)
expr_stmt|;
name|txnManager
operator|.
name|abort
argument_list|(
name|txn
argument_list|)
expr_stmt|;
throw|throw
operator|new
name|MessageReceiveException
argument_list|(
name|errorText
argument_list|)
throw|;
block|}
comment|// Open document if possible, else abort
name|resource
operator|=
name|collection
operator|.
name|getDocument
argument_list|(
name|broker
argument_list|,
name|docURI
argument_list|)
expr_stmt|;
if|if
condition|(
name|resource
operator|==
literal|null
condition|)
block|{
name|String
name|errorText
init|=
literal|"No resource found for path: "
operator|+
name|sourcePath
decl_stmt|;
name|LOG
operator|.
name|error
argument_list|(
name|errorText
argument_list|)
expr_stmt|;
name|txnManager
operator|.
name|abort
argument_list|(
name|txn
argument_list|)
expr_stmt|;
throw|throw
operator|new
name|MessageReceiveException
argument_list|(
name|errorText
argument_list|)
throw|;
block|}
name|DocumentMetadata
name|metadata
init|=
name|resource
operator|.
name|getMetadata
argument_list|()
decl_stmt|;
comment|//DW: to do something
comment|// Commit change
name|txnManager
operator|.
name|commit
argument_list|(
name|txn
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Throwable
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|error
argument_list|(
name|e
argument_list|)
expr_stmt|;
name|txnManager
operator|.
name|abort
argument_list|(
name|txn
argument_list|)
expr_stmt|;
throw|throw
operator|new
name|MessageReceiveException
argument_list|(
name|e
operator|.
name|getMessage
argument_list|()
argument_list|,
name|e
argument_list|)
throw|;
block|}
finally|finally
block|{
comment|// TODO: check if can be done earlier
if|if
condition|(
name|collection
operator|!=
literal|null
condition|)
block|{
name|collection
operator|.
name|release
argument_list|(
name|Lock
operator|.
name|WRITE_LOCK
argument_list|)
expr_stmt|;
block|}
name|txnManager
operator|.
name|close
argument_list|(
name|txn
argument_list|)
expr_stmt|;
name|brokerPool
operator|.
name|release
argument_list|(
name|broker
argument_list|)
expr_stmt|;
block|}
block|}
comment|/**      * Remove document from database      */
specifier|private
name|void
name|deleteDocument
parameter_list|(
name|eXistMessage
name|em
parameter_list|)
block|{
name|XmldbURI
name|sourcePath
init|=
name|XmldbURI
operator|.
name|create
argument_list|(
name|em
operator|.
name|getResourcePath
argument_list|()
argument_list|)
decl_stmt|;
name|XmldbURI
name|colURI
init|=
name|sourcePath
operator|.
name|removeLastSegment
argument_list|()
decl_stmt|;
name|XmldbURI
name|docURI
init|=
name|sourcePath
operator|.
name|lastSegment
argument_list|()
decl_stmt|;
comment|// References to the database
name|DBBroker
name|broker
init|=
literal|null
decl_stmt|;
name|Collection
name|collection
init|=
literal|null
decl_stmt|;
name|DocumentImpl
name|resource
init|=
literal|null
decl_stmt|;
name|TransactionManager
name|txnManager
init|=
name|brokerPool
operator|.
name|getTransactionManager
argument_list|()
decl_stmt|;
name|Txn
name|txn
init|=
name|txnManager
operator|.
name|beginTransaction
argument_list|()
decl_stmt|;
try|try
block|{
comment|// TODO get user
name|broker
operator|=
name|brokerPool
operator|.
name|get
argument_list|(
name|securityManager
operator|.
name|getSystemSubject
argument_list|()
argument_list|)
expr_stmt|;
comment|// Open collection if possible, else abort
name|collection
operator|=
name|broker
operator|.
name|openCollection
argument_list|(
name|colURI
argument_list|,
name|Lock
operator|.
name|WRITE_LOCK
argument_list|)
expr_stmt|;
if|if
condition|(
name|collection
operator|==
literal|null
condition|)
block|{
name|String
name|errorText
init|=
literal|"Collection does not exist "
operator|+
name|colURI
decl_stmt|;
name|LOG
operator|.
name|error
argument_list|(
name|errorText
argument_list|)
expr_stmt|;
name|txnManager
operator|.
name|abort
argument_list|(
name|txn
argument_list|)
expr_stmt|;
throw|throw
operator|new
name|MessageReceiveException
argument_list|(
name|errorText
argument_list|)
throw|;
block|}
comment|// Open document if possible, else abort
name|resource
operator|=
name|collection
operator|.
name|getDocument
argument_list|(
name|broker
argument_list|,
name|docURI
argument_list|)
expr_stmt|;
if|if
condition|(
name|resource
operator|==
literal|null
condition|)
block|{
name|String
name|errorText
init|=
literal|"No resource found for path: "
operator|+
name|sourcePath
decl_stmt|;
name|LOG
operator|.
name|error
argument_list|(
name|errorText
argument_list|)
expr_stmt|;
name|txnManager
operator|.
name|abort
argument_list|(
name|txn
argument_list|)
expr_stmt|;
throw|throw
operator|new
name|MessageReceiveException
argument_list|(
name|errorText
argument_list|)
throw|;
block|}
comment|// This delete is based on mime-type /ljo
if|if
condition|(
name|resource
operator|.
name|getResourceType
argument_list|()
operator|==
name|DocumentImpl
operator|.
name|BINARY_FILE
condition|)
block|{
name|collection
operator|.
name|removeBinaryResource
argument_list|(
name|txn
argument_list|,
name|broker
argument_list|,
name|resource
operator|.
name|getFileURI
argument_list|()
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|collection
operator|.
name|removeXMLResource
argument_list|(
name|txn
argument_list|,
name|broker
argument_list|,
name|resource
operator|.
name|getFileURI
argument_list|()
argument_list|)
expr_stmt|;
block|}
comment|// Commit change
name|txnManager
operator|.
name|commit
argument_list|(
name|txn
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Throwable
name|t
parameter_list|)
block|{
if|if
condition|(
name|LOG
operator|.
name|isDebugEnabled
argument_list|()
condition|)
block|{
name|LOG
operator|.
name|error
argument_list|(
name|t
operator|.
name|getMessage
argument_list|()
argument_list|,
name|t
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|LOG
operator|.
name|error
argument_list|(
name|t
operator|.
name|getMessage
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|txnManager
operator|.
name|abort
argument_list|(
name|txn
argument_list|)
expr_stmt|;
throw|throw
operator|new
name|MessageReceiveException
argument_list|(
name|t
operator|.
name|getMessage
argument_list|()
argument_list|,
name|t
argument_list|)
throw|;
block|}
finally|finally
block|{
comment|// TODO: check if can be done earlier
if|if
condition|(
name|collection
operator|!=
literal|null
condition|)
block|{
name|collection
operator|.
name|release
argument_list|(
name|Lock
operator|.
name|WRITE_LOCK
argument_list|)
expr_stmt|;
block|}
name|txnManager
operator|.
name|close
argument_list|(
name|txn
argument_list|)
expr_stmt|;
name|brokerPool
operator|.
name|release
argument_list|(
name|broker
argument_list|)
expr_stmt|;
block|}
block|}
comment|/**      * Remove collection from database      */
specifier|private
name|void
name|deleteCollection
parameter_list|(
name|eXistMessage
name|em
parameter_list|)
block|{
name|XmldbURI
name|sourcePath
init|=
name|XmldbURI
operator|.
name|create
argument_list|(
name|em
operator|.
name|getResourcePath
argument_list|()
argument_list|)
decl_stmt|;
comment|//XmldbURI colURI = sourcePath.removeLastSegment();
comment|//XmldbURI docURI = sourcePath.lastSegment();
name|DBBroker
name|broker
init|=
literal|null
decl_stmt|;
name|Collection
name|collection
init|=
literal|null
decl_stmt|;
name|TransactionManager
name|txnManager
init|=
name|brokerPool
operator|.
name|getTransactionManager
argument_list|()
decl_stmt|;
name|Txn
name|txn
init|=
name|txnManager
operator|.
name|beginTransaction
argument_list|()
decl_stmt|;
try|try
block|{
comment|// TODO get user
name|broker
operator|=
name|brokerPool
operator|.
name|get
argument_list|(
name|securityManager
operator|.
name|getSystemSubject
argument_list|()
argument_list|)
expr_stmt|;
comment|// Open collection if possible, else abort
comment|//collection = broker.openCollection(colURI, Lock.WRITE_LOCK);
name|collection
operator|=
name|broker
operator|.
name|openCollection
argument_list|(
name|sourcePath
argument_list|,
name|Lock
operator|.
name|WRITE_LOCK
argument_list|)
expr_stmt|;
if|if
condition|(
name|collection
operator|==
literal|null
condition|)
block|{
name|txnManager
operator|.
name|abort
argument_list|(
name|txn
argument_list|)
expr_stmt|;
return|return;
block|}
comment|// Remove collection
name|broker
operator|.
name|removeCollection
argument_list|(
name|txn
argument_list|,
name|collection
argument_list|)
expr_stmt|;
comment|// Commit change
name|txnManager
operator|.
name|commit
argument_list|(
name|txn
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Throwable
name|t
parameter_list|)
block|{
if|if
condition|(
name|LOG
operator|.
name|isDebugEnabled
argument_list|()
condition|)
block|{
name|LOG
operator|.
name|error
argument_list|(
name|t
operator|.
name|getMessage
argument_list|()
argument_list|,
name|t
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|LOG
operator|.
name|error
argument_list|(
name|t
operator|.
name|getMessage
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|txnManager
operator|.
name|abort
argument_list|(
name|txn
argument_list|)
expr_stmt|;
throw|throw
operator|new
name|MessageReceiveException
argument_list|(
name|t
operator|.
name|getMessage
argument_list|()
argument_list|)
throw|;
block|}
finally|finally
block|{
comment|// TODO: check if can be done earlier
if|if
condition|(
name|collection
operator|!=
literal|null
condition|)
block|{
name|collection
operator|.
name|release
argument_list|(
name|Lock
operator|.
name|WRITE_LOCK
argument_list|)
expr_stmt|;
block|}
name|txnManager
operator|.
name|close
argument_list|(
name|txn
argument_list|)
expr_stmt|;
name|brokerPool
operator|.
name|release
argument_list|(
name|broker
argument_list|)
expr_stmt|;
block|}
block|}
comment|/**      * Created collection in database      */
specifier|private
name|void
name|createCollection
parameter_list|(
name|eXistMessage
name|em
parameter_list|)
block|{
name|XmldbURI
name|sourcePath
init|=
name|XmldbURI
operator|.
name|create
argument_list|(
name|em
operator|.
name|getResourcePath
argument_list|()
argument_list|)
decl_stmt|;
comment|//XmldbURI colURI = sourcePath.removeLastSegment();
comment|//XmldbURI docURI = sourcePath.lastSegment();
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|props
init|=
name|em
operator|.
name|getMetadata
argument_list|()
decl_stmt|;
comment|// Get OWNER
name|String
name|userName
init|=
literal|null
decl_stmt|;
name|Object
name|prop
init|=
name|props
operator|.
name|get
argument_list|(
name|MessageHelper
operator|.
name|EXIST_RESOURCE_OWNER
argument_list|)
decl_stmt|;
if|if
condition|(
name|prop
operator|!=
literal|null
operator|&&
name|prop
operator|instanceof
name|String
condition|)
block|{
name|userName
operator|=
operator|(
name|String
operator|)
name|prop
expr_stmt|;
block|}
name|Account
name|account
init|=
name|securityManager
operator|.
name|getAccount
argument_list|(
name|userName
argument_list|)
decl_stmt|;
if|if
condition|(
name|account
operator|==
literal|null
condition|)
block|{
name|String
name|errorText
init|=
literal|"Username "
operator|+
name|userName
operator|+
literal|" does not exist."
decl_stmt|;
name|LOG
operator|.
name|error
argument_list|(
name|errorText
argument_list|)
expr_stmt|;
throw|throw
operator|new
name|MessageReceiveException
argument_list|(
name|errorText
argument_list|)
throw|;
block|}
comment|// Get GROUP
name|String
name|groupName
init|=
literal|null
decl_stmt|;
name|prop
operator|=
name|props
operator|.
name|get
argument_list|(
name|MessageHelper
operator|.
name|EXIST_RESOURCE_GROUP
argument_list|)
expr_stmt|;
if|if
condition|(
name|prop
operator|!=
literal|null
operator|&&
name|prop
operator|instanceof
name|String
condition|)
block|{
name|groupName
operator|=
operator|(
name|String
operator|)
name|prop
expr_stmt|;
block|}
comment|// Get/Set permissions
name|Integer
name|mode
init|=
literal|null
decl_stmt|;
name|prop
operator|=
name|props
operator|.
name|get
argument_list|(
name|MessageHelper
operator|.
name|EXIST_RESOURCE_MODE
argument_list|)
expr_stmt|;
if|if
condition|(
name|prop
operator|!=
literal|null
operator|&&
name|prop
operator|instanceof
name|Integer
condition|)
block|{
name|mode
operator|=
operator|(
name|Integer
operator|)
name|prop
expr_stmt|;
block|}
name|DBBroker
name|broker
init|=
literal|null
decl_stmt|;
name|Collection
name|collection
init|=
literal|null
decl_stmt|;
name|TransactionManager
name|txnManager
init|=
name|brokerPool
operator|.
name|getTransactionManager
argument_list|()
decl_stmt|;
name|Txn
name|txn
init|=
name|txnManager
operator|.
name|beginTransaction
argument_list|()
decl_stmt|;
try|try
block|{
comment|// TODO get user
name|broker
operator|=
name|brokerPool
operator|.
name|get
argument_list|(
name|securityManager
operator|.
name|getSystemSubject
argument_list|()
argument_list|)
expr_stmt|;
comment|// TODO ... consider to swallow situation transparently
name|collection
operator|=
name|broker
operator|.
name|openCollection
argument_list|(
name|sourcePath
argument_list|,
name|Lock
operator|.
name|WRITE_LOCK
argument_list|)
expr_stmt|;
if|if
condition|(
name|collection
operator|!=
literal|null
condition|)
block|{
name|String
name|errorText
init|=
literal|"Collection "
operator|+
name|sourcePath
operator|+
literal|" already exists"
decl_stmt|;
name|LOG
operator|.
name|error
argument_list|(
name|errorText
argument_list|)
expr_stmt|;
name|txnManager
operator|.
name|abort
argument_list|(
name|txn
argument_list|)
expr_stmt|;
throw|throw
operator|new
name|MessageReceiveException
argument_list|(
name|errorText
argument_list|)
throw|;
block|}
comment|// Create collection
name|Collection
name|newCollection
init|=
name|broker
operator|.
name|getOrCreateCollection
argument_list|(
name|txn
argument_list|,
name|sourcePath
argument_list|)
decl_stmt|;
comment|// Set owner,group and permissions
name|Permission
name|permission
init|=
name|newCollection
operator|.
name|getPermissions
argument_list|()
decl_stmt|;
if|if
condition|(
name|userName
operator|!=
literal|null
condition|)
block|{
name|permission
operator|.
name|setOwner
argument_list|(
name|userName
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|groupName
operator|!=
literal|null
condition|)
block|{
name|permission
operator|.
name|setGroup
argument_list|(
name|groupName
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|mode
operator|!=
literal|null
condition|)
block|{
name|permission
operator|.
name|setMode
argument_list|(
name|mode
argument_list|)
expr_stmt|;
block|}
name|broker
operator|.
name|saveCollection
argument_list|(
name|txn
argument_list|,
name|newCollection
argument_list|)
expr_stmt|;
name|broker
operator|.
name|flush
argument_list|()
expr_stmt|;
comment|// Commit change
name|txnManager
operator|.
name|commit
argument_list|(
name|txn
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Throwable
name|t
parameter_list|)
block|{
if|if
condition|(
name|LOG
operator|.
name|isDebugEnabled
argument_list|()
condition|)
block|{
name|LOG
operator|.
name|error
argument_list|(
name|t
operator|.
name|getMessage
argument_list|()
argument_list|,
name|t
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|LOG
operator|.
name|error
argument_list|(
name|t
operator|.
name|getMessage
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|txnManager
operator|.
name|abort
argument_list|(
name|txn
argument_list|)
expr_stmt|;
throw|throw
operator|new
name|MessageReceiveException
argument_list|(
name|t
operator|.
name|getMessage
argument_list|()
argument_list|,
name|t
argument_list|)
throw|;
block|}
finally|finally
block|{
comment|// TODO: check if can be done earlier
if|if
condition|(
name|collection
operator|!=
literal|null
condition|)
block|{
name|collection
operator|.
name|release
argument_list|(
name|Lock
operator|.
name|WRITE_LOCK
argument_list|)
expr_stmt|;
block|}
name|txnManager
operator|.
name|close
argument_list|(
name|txn
argument_list|)
expr_stmt|;
name|brokerPool
operator|.
name|release
argument_list|(
name|broker
argument_list|)
expr_stmt|;
block|}
block|}
specifier|private
name|void
name|relocateDocument
parameter_list|(
name|eXistMessage
name|em
parameter_list|,
name|boolean
name|keepDocument
parameter_list|)
block|{
name|XmldbURI
name|sourcePath
init|=
name|XmldbURI
operator|.
name|create
argument_list|(
name|em
operator|.
name|getResourcePath
argument_list|()
argument_list|)
decl_stmt|;
name|XmldbURI
name|sourceColURI
init|=
name|sourcePath
operator|.
name|removeLastSegment
argument_list|()
decl_stmt|;
name|XmldbURI
name|sourceDocURI
init|=
name|sourcePath
operator|.
name|lastSegment
argument_list|()
decl_stmt|;
name|XmldbURI
name|destPath
init|=
name|XmldbURI
operator|.
name|create
argument_list|(
name|em
operator|.
name|getDestinationPath
argument_list|()
argument_list|)
decl_stmt|;
name|XmldbURI
name|destColURI
init|=
name|destPath
operator|.
name|removeLastSegment
argument_list|()
decl_stmt|;
name|XmldbURI
name|destDocURI
init|=
name|destPath
operator|.
name|lastSegment
argument_list|()
decl_stmt|;
name|DBBroker
name|broker
init|=
literal|null
decl_stmt|;
name|Collection
name|srcCollection
init|=
literal|null
decl_stmt|;
name|DocumentImpl
name|srcDocument
init|=
literal|null
decl_stmt|;
name|Collection
name|destCollection
init|=
literal|null
decl_stmt|;
name|TransactionManager
name|txnManager
init|=
name|brokerPool
operator|.
name|getTransactionManager
argument_list|()
decl_stmt|;
name|Txn
name|txn
init|=
name|txnManager
operator|.
name|beginTransaction
argument_list|()
decl_stmt|;
try|try
block|{
comment|// TODO get user
name|broker
operator|=
name|brokerPool
operator|.
name|get
argument_list|(
name|securityManager
operator|.
name|getSystemSubject
argument_list|()
argument_list|)
expr_stmt|;
comment|// Open collection if possible, else abort
name|srcCollection
operator|=
name|broker
operator|.
name|openCollection
argument_list|(
name|sourceColURI
argument_list|,
name|Lock
operator|.
name|WRITE_LOCK
argument_list|)
expr_stmt|;
if|if
condition|(
name|srcCollection
operator|==
literal|null
condition|)
block|{
name|String
name|errorMessage
init|=
literal|"Collection not found: "
operator|+
name|sourceColURI
decl_stmt|;
name|LOG
operator|.
name|error
argument_list|(
name|errorMessage
argument_list|)
expr_stmt|;
name|txnManager
operator|.
name|abort
argument_list|(
name|txn
argument_list|)
expr_stmt|;
throw|throw
operator|new
name|MessageReceiveException
argument_list|(
name|errorMessage
argument_list|)
throw|;
block|}
comment|// Open document if possible, else abort
name|srcDocument
operator|=
name|srcCollection
operator|.
name|getDocument
argument_list|(
name|broker
argument_list|,
name|sourceDocURI
argument_list|)
expr_stmt|;
if|if
condition|(
name|srcDocument
operator|==
literal|null
condition|)
block|{
name|String
name|errorMessage
init|=
literal|"No resource found for path: "
operator|+
name|sourcePath
decl_stmt|;
name|LOG
operator|.
name|error
argument_list|(
name|errorMessage
argument_list|)
expr_stmt|;
name|txnManager
operator|.
name|abort
argument_list|(
name|txn
argument_list|)
expr_stmt|;
throw|throw
operator|new
name|MessageReceiveException
argument_list|(
name|errorMessage
argument_list|)
throw|;
block|}
comment|// Open collection if possible, else abort
name|destCollection
operator|=
name|broker
operator|.
name|openCollection
argument_list|(
name|destColURI
argument_list|,
name|Lock
operator|.
name|WRITE_LOCK
argument_list|)
expr_stmt|;
if|if
condition|(
name|destCollection
operator|==
literal|null
condition|)
block|{
name|String
name|errorMessage
init|=
literal|"Destination collection "
operator|+
name|destColURI
operator|+
literal|" does not exist."
decl_stmt|;
name|LOG
operator|.
name|error
argument_list|(
name|errorMessage
argument_list|)
expr_stmt|;
name|txnManager
operator|.
name|abort
argument_list|(
name|txn
argument_list|)
expr_stmt|;
throw|throw
operator|new
name|MessageReceiveException
argument_list|(
name|errorMessage
argument_list|)
throw|;
block|}
comment|// Perform actial move/copy
if|if
condition|(
name|keepDocument
condition|)
block|{
name|broker
operator|.
name|copyResource
argument_list|(
name|txn
argument_list|,
name|srcDocument
argument_list|,
name|destCollection
argument_list|,
name|destDocURI
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|broker
operator|.
name|moveResource
argument_list|(
name|txn
argument_list|,
name|srcDocument
argument_list|,
name|destCollection
argument_list|,
name|destDocURI
argument_list|)
expr_stmt|;
block|}
comment|// Commit change
name|txnManager
operator|.
name|commit
argument_list|(
name|txn
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Throwable
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|error
argument_list|(
name|e
argument_list|)
expr_stmt|;
name|txnManager
operator|.
name|abort
argument_list|(
name|txn
argument_list|)
expr_stmt|;
throw|throw
operator|new
name|MessageReceiveException
argument_list|(
name|e
operator|.
name|getMessage
argument_list|()
argument_list|,
name|e
argument_list|)
throw|;
block|}
finally|finally
block|{
comment|// TODO: check if can be done earlier
if|if
condition|(
name|destCollection
operator|!=
literal|null
condition|)
block|{
name|destCollection
operator|.
name|release
argument_list|(
name|Lock
operator|.
name|WRITE_LOCK
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|srcCollection
operator|!=
literal|null
condition|)
block|{
name|srcCollection
operator|.
name|release
argument_list|(
name|Lock
operator|.
name|WRITE_LOCK
argument_list|)
expr_stmt|;
block|}
name|txnManager
operator|.
name|close
argument_list|(
name|txn
argument_list|)
expr_stmt|;
name|brokerPool
operator|.
name|release
argument_list|(
name|broker
argument_list|)
expr_stmt|;
block|}
block|}
specifier|private
name|void
name|relocateCollection
parameter_list|(
name|eXistMessage
name|em
parameter_list|,
name|boolean
name|keepCollection
parameter_list|)
block|{
name|XmldbURI
name|sourcePath
init|=
name|XmldbURI
operator|.
name|create
argument_list|(
name|em
operator|.
name|getResourcePath
argument_list|()
argument_list|)
decl_stmt|;
comment|//XmldbURI sourceColURI = sourcePath.removeLastSegment();
comment|//XmldbURI sourceDocURI = sourcePath.lastSegment();
name|XmldbURI
name|destPath
init|=
name|XmldbURI
operator|.
name|create
argument_list|(
name|em
operator|.
name|getDestinationPath
argument_list|()
argument_list|)
decl_stmt|;
name|XmldbURI
name|destColURI
init|=
name|destPath
operator|.
name|removeLastSegment
argument_list|()
decl_stmt|;
name|XmldbURI
name|destDocURI
init|=
name|destPath
operator|.
name|lastSegment
argument_list|()
decl_stmt|;
name|DBBroker
name|broker
init|=
literal|null
decl_stmt|;
name|Collection
name|srcCollection
init|=
literal|null
decl_stmt|;
name|Collection
name|destCollection
init|=
literal|null
decl_stmt|;
name|TransactionManager
name|txnManager
init|=
name|brokerPool
operator|.
name|getTransactionManager
argument_list|()
decl_stmt|;
name|Txn
name|txn
init|=
name|txnManager
operator|.
name|beginTransaction
argument_list|()
decl_stmt|;
try|try
block|{
comment|// TODO get user
name|broker
operator|=
name|brokerPool
operator|.
name|get
argument_list|(
name|securityManager
operator|.
name|getSystemSubject
argument_list|()
argument_list|)
expr_stmt|;
comment|// Open collection if possible, else abort
name|srcCollection
operator|=
name|broker
operator|.
name|openCollection
argument_list|(
name|sourcePath
argument_list|,
name|Lock
operator|.
name|WRITE_LOCK
argument_list|)
expr_stmt|;
if|if
condition|(
name|srcCollection
operator|==
literal|null
condition|)
block|{
name|String
name|errorMessage
init|=
literal|"Collection "
operator|+
name|sourcePath
operator|+
literal|" does not exist."
decl_stmt|;
name|LOG
operator|.
name|error
argument_list|(
name|errorMessage
argument_list|)
expr_stmt|;
name|txnManager
operator|.
name|abort
argument_list|(
name|txn
argument_list|)
expr_stmt|;
throw|throw
operator|new
name|MessageReceiveException
argument_list|(
name|errorMessage
argument_list|)
throw|;
block|}
comment|// Open collection if possible, else abort
name|destCollection
operator|=
name|broker
operator|.
name|openCollection
argument_list|(
name|destColURI
argument_list|,
name|Lock
operator|.
name|WRITE_LOCK
argument_list|)
expr_stmt|;
if|if
condition|(
name|destCollection
operator|==
literal|null
condition|)
block|{
name|String
name|errorMessage
init|=
literal|"Destination collection "
operator|+
name|destColURI
operator|+
literal|" does not exist."
decl_stmt|;
name|LOG
operator|.
name|error
argument_list|(
name|errorMessage
argument_list|)
expr_stmt|;
name|txnManager
operator|.
name|abort
argument_list|(
name|txn
argument_list|)
expr_stmt|;
throw|throw
operator|new
name|MessageReceiveException
argument_list|(
name|errorMessage
argument_list|)
throw|;
block|}
comment|// Perform actual move/copy
if|if
condition|(
name|keepCollection
condition|)
block|{
name|broker
operator|.
name|copyCollection
argument_list|(
name|txn
argument_list|,
name|srcCollection
argument_list|,
name|destCollection
argument_list|,
name|destDocURI
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|broker
operator|.
name|moveCollection
argument_list|(
name|txn
argument_list|,
name|srcCollection
argument_list|,
name|destCollection
argument_list|,
name|destDocURI
argument_list|)
expr_stmt|;
block|}
comment|// Commit change
name|txnManager
operator|.
name|commit
argument_list|(
name|txn
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Throwable
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|error
argument_list|(
name|e
argument_list|)
expr_stmt|;
name|txnManager
operator|.
name|abort
argument_list|(
name|txn
argument_list|)
expr_stmt|;
throw|throw
operator|new
name|MessageReceiveException
argument_list|(
name|e
operator|.
name|getMessage
argument_list|()
argument_list|)
throw|;
block|}
finally|finally
block|{
if|if
condition|(
name|destCollection
operator|!=
literal|null
condition|)
block|{
name|destCollection
operator|.
name|release
argument_list|(
name|Lock
operator|.
name|WRITE_LOCK
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|srcCollection
operator|!=
literal|null
condition|)
block|{
name|srcCollection
operator|.
name|release
argument_list|(
name|Lock
operator|.
name|WRITE_LOCK
argument_list|)
expr_stmt|;
block|}
name|txnManager
operator|.
name|close
argument_list|(
name|txn
argument_list|)
expr_stmt|;
name|brokerPool
operator|.
name|release
argument_list|(
name|broker
argument_list|)
expr_stmt|;
block|}
block|}
block|}
end_class

end_unit

