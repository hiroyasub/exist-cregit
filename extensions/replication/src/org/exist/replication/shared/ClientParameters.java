begin_unit|revision:1.0.0;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  *  eXist Open Source Native XML Database  *  Copyright (C) 2012 The eXist Project  *  http://exist-db.org  *  *  This program is free software; you can redistribute it and/or  *  modify it under the terms of the GNU Lesser General Public License  *  as published by the Free Software Foundation; either version 2  *  of the License, or (at your option) any later version.  *  *  This program is distributed in the hope that it will be useful,  *  but WITHOUT ANY WARRANTY; without even the implied warranty of  *  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the  *  GNU Lesser General Public License for more details.  *  *  You should have received a copy of the GNU Lesser General Public  *  License along with this library; if not, write to the Free Software  *  Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA  02110-1301  USA  *  *  $Id$  */
end_comment

begin_package
package|package
name|org
operator|.
name|exist
operator|.
name|replication
operator|.
name|shared
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Properties
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|naming
operator|.
name|Context
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|log4j
operator|.
name|Logger
import|;
end_import

begin_comment
comment|/**  *  * @author Dannes Wessels  */
end_comment

begin_class
specifier|public
specifier|abstract
class|class
name|ClientParameters
block|{
specifier|protected
specifier|final
specifier|static
name|Logger
name|LOG
init|=
name|Logger
operator|.
name|getLogger
argument_list|(
name|ClientParameters
operator|.
name|class
argument_list|)
decl_stmt|;
specifier|public
specifier|static
specifier|final
name|String
name|CONNECTION_FACTORY
init|=
literal|"connectionfactory"
decl_stmt|;
specifier|public
specifier|static
specifier|final
name|String
name|TOPIC
init|=
literal|"topic"
decl_stmt|;
specifier|public
specifier|static
specifier|final
name|String
name|CLIENT_ID
init|=
literal|"client-id"
decl_stmt|;
specifier|protected
name|String
name|connectionFactory
init|=
literal|null
decl_stmt|;
specifier|protected
name|String
name|clientId
init|=
literal|null
decl_stmt|;
specifier|protected
name|String
name|topic
init|=
literal|null
decl_stmt|;
specifier|protected
name|String
name|initialContextFactory
init|=
literal|null
decl_stmt|;
specifier|protected
name|String
name|providerUrl
init|=
literal|null
decl_stmt|;
specifier|protected
name|Properties
name|props
init|=
operator|new
name|Properties
argument_list|()
decl_stmt|;
comment|/**      *  Get all JMS  settings from supplied parameters.      *       * @param params Multi value parameters      */
specifier|public
name|void
name|setMultiValueParameters
parameter_list|(
name|Map
argument_list|<
name|String
argument_list|,
name|List
argument_list|<
name|?
argument_list|>
argument_list|>
name|params
parameter_list|)
block|{
for|for
control|(
specifier|final
name|String
name|key
range|:
name|params
operator|.
name|keySet
argument_list|()
control|)
block|{
name|List
argument_list|<
name|?
argument_list|>
name|values
init|=
name|params
operator|.
name|get
argument_list|(
name|key
argument_list|)
decl_stmt|;
if|if
condition|(
name|values
operator|!=
literal|null
operator|&&
operator|!
name|values
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
comment|// Only get first value
name|Object
name|value
init|=
name|values
operator|.
name|get
argument_list|(
literal|0
argument_list|)
decl_stmt|;
if|if
condition|(
name|value
operator|instanceof
name|String
condition|)
block|{
name|props
operator|.
name|setProperty
argument_list|(
name|key
argument_list|,
operator|(
name|String
operator|)
name|value
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
comment|/**      *  Get all JMS settings from supplied parameters.      *       * @param params Single valued parameters.      *       * @return  Values as properties.      */
specifier|public
name|void
name|setSingleValueParameters
parameter_list|(
specifier|final
name|Map
argument_list|<
name|String
argument_list|,
name|List
argument_list|<
name|?
extends|extends
name|Object
argument_list|>
argument_list|>
name|params
parameter_list|)
block|{
for|for
control|(
specifier|final
name|String
name|key
range|:
name|params
operator|.
name|keySet
argument_list|()
control|)
block|{
specifier|final
name|String
name|value
init|=
name|getConfigurationValue
argument_list|(
name|params
argument_list|,
name|key
argument_list|)
decl_stmt|;
if|if
condition|(
name|value
operator|!=
literal|null
condition|)
block|{
name|props
operator|.
name|setProperty
argument_list|(
name|key
argument_list|,
name|value
argument_list|)
expr_stmt|;
block|}
block|}
block|}
comment|/**      * Retrieve configuration value when available as String.      *      * @param params Map containing all parameter values      * @param name Name of configuration item      * @return Value of item, or NULL if not existent or existent and not a      * String object      */
specifier|private
specifier|static
name|String
name|getConfigurationValue
parameter_list|(
specifier|final
name|Map
argument_list|<
name|String
argument_list|,
name|List
argument_list|<
name|?
extends|extends
name|Object
argument_list|>
argument_list|>
name|params
parameter_list|,
name|String
name|name
parameter_list|)
block|{
name|String
name|retVal
init|=
literal|null
decl_stmt|;
specifier|final
name|List
argument_list|<
name|?
extends|extends
name|Object
argument_list|>
name|value
init|=
name|params
operator|.
name|get
argument_list|(
name|name
argument_list|)
decl_stmt|;
if|if
condition|(
name|value
operator|!=
literal|null
condition|)
block|{
if|if
condition|(
name|value
operator|.
name|size
argument_list|()
operator|>
literal|0
condition|)
block|{
name|retVal
operator|=
name|value
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|toString
argument_list|()
expr_stmt|;
block|}
block|}
return|return
name|retVal
return|;
block|}
comment|/**      * Fill properties object with default values for      * java.naming.factory.initial and java.naming.provider.url if not provided.      * Defaults are set to match the Apache ActiveMQ message broker on      * localhost.      *      */
specifier|protected
name|void
name|fillActiveMQbrokerDefaults
parameter_list|()
block|{
if|if
condition|(
name|props
operator|.
name|getProperty
argument_list|(
name|Context
operator|.
name|INITIAL_CONTEXT_FACTORY
argument_list|)
operator|==
literal|null
condition|)
block|{
name|String
name|defaultValue
init|=
literal|"org.apache.activemq.jndi.ActiveMQInitialContextFactory"
decl_stmt|;
name|props
operator|.
name|setProperty
argument_list|(
name|Context
operator|.
name|INITIAL_CONTEXT_FACTORY
argument_list|,
name|defaultValue
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"No value set for '"
operator|+
name|Context
operator|.
name|INITIAL_CONTEXT_FACTORY
operator|+
literal|"', "
operator|+
literal|"using default value '"
operator|+
name|defaultValue
operator|+
literal|"' "
operator|+
literal|"which is suitable for activeMQ"
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|props
operator|.
name|getProperty
argument_list|(
name|Context
operator|.
name|PROVIDER_URL
argument_list|)
operator|==
literal|null
condition|)
block|{
name|String
name|defaultValue
init|=
literal|"tcp://localhost:61616"
decl_stmt|;
name|props
operator|.
name|setProperty
argument_list|(
name|Context
operator|.
name|PROVIDER_URL
argument_list|,
name|defaultValue
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"No value set for '"
operator|+
name|Context
operator|.
name|PROVIDER_URL
operator|+
literal|"', using default value '"
operator|+
name|defaultValue
operator|+
literal|"' "
operator|+
literal|"which is suitable for activeMQ"
argument_list|)
expr_stmt|;
block|}
block|}
comment|/**      *  Retrieve initial context properties, e.g. {@link Context.INITIAL_CONTEXT_FACTORY}      * and {@link Context.PROVIDER_URL}      */
specifier|public
name|Properties
name|getInitialContextProps
parameter_list|()
block|{
name|Properties
name|contextProps
init|=
operator|new
name|Properties
argument_list|()
decl_stmt|;
comment|// Copy all properties that start with "java."
for|for
control|(
name|String
name|key
range|:
name|props
operator|.
name|stringPropertyNames
argument_list|()
control|)
block|{
if|if
condition|(
name|key
operator|.
name|startsWith
argument_list|(
literal|"java."
argument_list|)
condition|)
block|{
name|contextProps
operator|.
name|setProperty
argument_list|(
name|key
argument_list|,
name|props
operator|.
name|getProperty
argument_list|(
name|key
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
return|return
name|contextProps
return|;
block|}
specifier|abstract
specifier|public
name|void
name|processParameters
parameter_list|()
throws|throws
name|TransportException
throws|,
name|ClientParameterException
function_decl|;
specifier|abstract
specifier|public
name|String
name|getReport
parameter_list|()
function_decl|;
specifier|public
name|String
name|getConnectionFactory
parameter_list|()
block|{
return|return
name|connectionFactory
return|;
block|}
specifier|public
name|String
name|getClientId
parameter_list|()
block|{
return|return
name|clientId
return|;
block|}
specifier|public
name|String
name|getTopic
parameter_list|()
block|{
return|return
name|topic
return|;
block|}
specifier|public
name|Properties
name|getProps
parameter_list|()
block|{
return|return
name|props
return|;
block|}
specifier|public
name|String
name|getInitialContextFactory
parameter_list|()
block|{
return|return
name|initialContextFactory
return|;
block|}
specifier|public
name|String
name|getProviderUrl
parameter_list|()
block|{
return|return
name|providerUrl
return|;
block|}
block|}
end_class

end_unit

