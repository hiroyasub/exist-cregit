begin_unit|revision:1.0.0;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  *  eXist Open Source Native XML Database  *  Copyright (C) 2012 The eXist Project  *  http://exist-db.org  *  *  This program is free software; you can redistribute it and/or  *  modify it under the terms of the GNU Lesser General Public License  *  as published by the Free Software Foundation; either version 2  *  of the License, or (at your option) any later version.  *  *  This program is distributed in the hope that it will be useful,  *  but WITHOUT ANY WARRANTY; without even the implied warranty of  *  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the  *  GNU Lesser General Public License for more details.  *  *  You should have received a copy of the GNU Lesser General Public  *  License along with this library; if not, write to the Free Software  *  Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA  02110-1301  USA  *  *  $Id$  */
end_comment

begin_package
package|package
name|org
operator|.
name|exist
operator|.
name|replication
operator|.
name|shared
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|OutputStreamWriter
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|Writer
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Properties
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|zip
operator|.
name|GZIPOutputStream
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|xml
operator|.
name|transform
operator|.
name|OutputKeys
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|io
operator|.
name|output
operator|.
name|ByteArrayOutputStream
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|log4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|dom
operator|.
name|BinaryDocument
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|dom
operator|.
name|DocumentImpl
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|dom
operator|.
name|DocumentMetadata
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|security
operator|.
name|Permission
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|storage
operator|.
name|DBBroker
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|storage
operator|.
name|serializers
operator|.
name|EXistOutputKeys
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|storage
operator|.
name|serializers
operator|.
name|Serializer
import|;
end_import

begin_import
import|import
name|org
operator|.
name|xml
operator|.
name|sax
operator|.
name|SAXException
import|;
end_import

begin_comment
comment|/**  *  Helper class for retrieving (meta)data from an in eXist stored document.  *   * @author Dannes Wessels  */
end_comment

begin_class
specifier|public
class|class
name|MessageHelper
block|{
specifier|public
specifier|static
specifier|final
name|String
name|EXIST_RESOURCE_CONTENTLENGTH
init|=
literal|"exist.resource.contentlength"
decl_stmt|;
specifier|public
specifier|static
specifier|final
name|String
name|EXIST_RESOURCE_DOCUMENTID
init|=
literal|"exist.resource.documentid"
decl_stmt|;
specifier|public
specifier|static
specifier|final
name|String
name|EXIST_RESOURCE_GROUP
init|=
literal|"exist.resource.group"
decl_stmt|;
specifier|public
specifier|static
specifier|final
name|String
name|EXIST_RESOURCE_MIMETYPE
init|=
literal|"exist.resource.mimetype"
decl_stmt|;
specifier|public
specifier|static
specifier|final
name|String
name|EXIST_RESOURCE_OWNER
init|=
literal|"exist.resource.owner"
decl_stmt|;
specifier|public
specifier|static
specifier|final
name|String
name|EXIST_RESOURCE_TYPE
init|=
literal|"exist.resource.type"
decl_stmt|;
specifier|public
specifier|static
specifier|final
name|String
name|EXIST_RESOURCE_MODE
init|=
literal|"exist.resource.permission.mode"
decl_stmt|;
specifier|public
specifier|static
specifier|final
name|String
name|EXIST_MESSAGE_CONTENTENCODING
init|=
literal|"exist.message.content-encoding"
decl_stmt|;
specifier|private
specifier|final
specifier|static
name|Logger
name|LOG
init|=
name|Logger
operator|.
name|getLogger
argument_list|(
name|MessageHelper
operator|.
name|class
argument_list|)
decl_stmt|;
comment|//	Copied from webdav interface ; there is a better one
specifier|public
specifier|final
specifier|static
name|Properties
name|OUTPUT_PROPERTIES
init|=
operator|new
name|Properties
argument_list|()
decl_stmt|;
static|static
block|{
name|OUTPUT_PROPERTIES
operator|.
name|setProperty
argument_list|(
name|OutputKeys
operator|.
name|INDENT
argument_list|,
literal|"yes"
argument_list|)
expr_stmt|;
name|OUTPUT_PROPERTIES
operator|.
name|setProperty
argument_list|(
name|OutputKeys
operator|.
name|ENCODING
argument_list|,
literal|"UTF-8"
argument_list|)
expr_stmt|;
name|OUTPUT_PROPERTIES
operator|.
name|setProperty
argument_list|(
name|OutputKeys
operator|.
name|OMIT_XML_DECLARATION
argument_list|,
literal|"no"
argument_list|)
expr_stmt|;
name|OUTPUT_PROPERTIES
operator|.
name|setProperty
argument_list|(
name|EXistOutputKeys
operator|.
name|EXPAND_XINCLUDES
argument_list|,
literal|"no"
argument_list|)
expr_stmt|;
name|OUTPUT_PROPERTIES
operator|.
name|setProperty
argument_list|(
name|EXistOutputKeys
operator|.
name|PROCESS_XSL_PI
argument_list|,
literal|"no"
argument_list|)
expr_stmt|;
block|}
comment|/**      *  Serialize document to byte array as gzipped document.      *       * @param broker      * @param document      * @return      * @throws IOException       */
specifier|public
specifier|static
name|byte
index|[]
name|gzipSerialize
parameter_list|(
name|DBBroker
name|broker
parameter_list|,
name|DocumentImpl
name|document
parameter_list|)
throws|throws
name|IOException
block|{
comment|// This is the weak spot, the data is serialized into
comment|// a byte array. Better to have an overloap to a file,
name|byte
index|[]
name|payload
decl_stmt|;
name|ByteArrayOutputStream
name|baos
init|=
operator|new
name|ByteArrayOutputStream
argument_list|()
decl_stmt|;
name|GZIPOutputStream
name|gos
init|=
operator|new
name|GZIPOutputStream
argument_list|(
name|baos
argument_list|)
decl_stmt|;
if|if
condition|(
name|document
operator|.
name|getResourceType
argument_list|()
operator|==
name|DocumentImpl
operator|.
name|XML_FILE
condition|)
block|{
comment|// Stream XML document
name|Serializer
name|serializer
init|=
name|broker
operator|.
name|getSerializer
argument_list|()
decl_stmt|;
name|serializer
operator|.
name|reset
argument_list|()
expr_stmt|;
try|try
block|{
name|serializer
operator|.
name|setProperties
argument_list|(
name|OUTPUT_PROPERTIES
argument_list|)
expr_stmt|;
name|Writer
name|w
init|=
operator|new
name|OutputStreamWriter
argument_list|(
name|gos
argument_list|,
literal|"UTF-8"
argument_list|)
decl_stmt|;
name|serializer
operator|.
name|serialize
argument_list|(
name|document
argument_list|,
name|w
argument_list|)
expr_stmt|;
name|w
operator|.
name|flush
argument_list|()
expr_stmt|;
name|w
operator|.
name|close
argument_list|()
expr_stmt|;
name|payload
operator|=
name|baos
operator|.
name|toByteArray
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|SAXException
name|e
parameter_list|)
block|{
name|payload
operator|=
operator|new
name|byte
index|[
literal|0
index|]
expr_stmt|;
name|LOG
operator|.
name|error
argument_list|(
name|e
argument_list|)
expr_stmt|;
throw|throw
operator|new
name|IOException
argument_list|(
literal|"Error while serializing XML document: "
operator|+
name|e
operator|.
name|getMessage
argument_list|()
argument_list|,
name|e
argument_list|)
throw|;
block|}
catch|catch
parameter_list|(
name|Throwable
name|e
parameter_list|)
block|{
name|payload
operator|=
operator|new
name|byte
index|[
literal|0
index|]
expr_stmt|;
name|System
operator|.
name|gc
argument_list|()
expr_stmt|;
comment|// recover from out of memory exception
name|LOG
operator|.
name|error
argument_list|(
name|e
argument_list|)
expr_stmt|;
throw|throw
operator|new
name|IOException
argument_list|(
literal|"Error while serializing XML document: "
operator|+
name|e
operator|.
name|getMessage
argument_list|()
argument_list|,
name|e
argument_list|)
throw|;
block|}
block|}
else|else
block|{
comment|// Stream NON-XML document
try|try
block|{
name|broker
operator|.
name|readBinaryResource
argument_list|(
operator|(
name|BinaryDocument
operator|)
name|document
argument_list|,
name|gos
argument_list|)
expr_stmt|;
name|gos
operator|.
name|flush
argument_list|()
expr_stmt|;
name|gos
operator|.
name|close
argument_list|()
expr_stmt|;
name|payload
operator|=
name|baos
operator|.
name|toByteArray
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
name|payload
operator|=
operator|new
name|byte
index|[
literal|0
index|]
expr_stmt|;
name|LOG
operator|.
name|error
argument_list|(
name|e
argument_list|)
expr_stmt|;
throw|throw
operator|new
name|IOException
argument_list|(
literal|"Error while serializing binary document: "
operator|+
name|e
operator|.
name|getMessage
argument_list|()
argument_list|,
name|e
argument_list|)
throw|;
block|}
catch|catch
parameter_list|(
name|Throwable
name|e
parameter_list|)
block|{
name|payload
operator|=
operator|new
name|byte
index|[
literal|0
index|]
expr_stmt|;
name|System
operator|.
name|gc
argument_list|()
expr_stmt|;
comment|// recover from out of memory exception
name|LOG
operator|.
name|error
argument_list|(
name|e
argument_list|)
expr_stmt|;
throw|throw
operator|new
name|IOException
argument_list|(
literal|"Error while serializing binary document: "
operator|+
name|e
operator|.
name|getMessage
argument_list|()
argument_list|,
name|e
argument_list|)
throw|;
block|}
block|}
return|return
name|payload
return|;
block|}
specifier|public
specifier|static
name|void
name|retrieveDocMetadata
parameter_list|(
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|props
parameter_list|,
name|DocumentMetadata
name|docMetadata
parameter_list|)
block|{
if|if
condition|(
name|docMetadata
operator|==
literal|null
condition|)
block|{
name|LOG
operator|.
name|error
argument_list|(
literal|"no metadata supplied"
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|props
operator|.
name|put
argument_list|(
name|EXIST_RESOURCE_MIMETYPE
argument_list|,
name|docMetadata
operator|.
name|getMimeType
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
specifier|public
specifier|static
name|void
name|retrievePermission
parameter_list|(
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|props
parameter_list|,
name|Permission
name|perm
parameter_list|)
block|{
if|if
condition|(
name|perm
operator|==
literal|null
condition|)
block|{
name|LOG
operator|.
name|error
argument_list|(
literal|"no permissions supplied"
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|props
operator|.
name|put
argument_list|(
name|EXIST_RESOURCE_OWNER
argument_list|,
name|perm
operator|.
name|getOwner
argument_list|()
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
name|props
operator|.
name|put
argument_list|(
name|EXIST_RESOURCE_GROUP
argument_list|,
name|perm
operator|.
name|getGroup
argument_list|()
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
name|props
operator|.
name|put
argument_list|(
name|EXIST_RESOURCE_MODE
argument_list|,
name|perm
operator|.
name|getMode
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
specifier|public
specifier|static
name|void
name|retrieveFromDocument
parameter_list|(
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|props
parameter_list|,
name|DocumentImpl
name|document
parameter_list|)
block|{
comment|// We do not differ between DOCUMENT subtypes,
comment|// mime-type is set in document metadata EXIST_RESOURCE_MIMETYPE. /ljo
name|props
operator|.
name|put
argument_list|(
name|EXIST_RESOURCE_TYPE
argument_list|,
name|eXistMessage
operator|.
name|ResourceType
operator|.
name|DOCUMENT
argument_list|)
expr_stmt|;
name|props
operator|.
name|put
argument_list|(
name|EXIST_RESOURCE_DOCUMENTID
argument_list|,
name|document
operator|.
name|getDocId
argument_list|()
argument_list|)
expr_stmt|;
name|props
operator|.
name|put
argument_list|(
name|EXIST_RESOURCE_CONTENTLENGTH
argument_list|,
name|document
operator|.
name|getContentLength
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

