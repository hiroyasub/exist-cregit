begin_unit|revision:1.0.0;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  *  eXist Open Source Native XML Database  *  Copyright (C) 2012 The eXist Project  *  http://exist-db.org  *  *  This program is free software; you can redistribute it and/or  *  modify it under the terms of the GNU Lesser General Public License  *  as published by the Free Software Foundation; either version 2  *  of the License, or (at your option) any later version.  *  *  This program is distributed in the hope that it will be useful,  *  but WITHOUT ANY WARRANTY; without even the implied warranty of  *  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the  *  GNU Lesser General Public License for more details.  *  *  You should have received a copy of the GNU Lesser General Public  *  License along with this library; if not, write to the Free Software  *  Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA  02110-1301  USA  *  *  $Id$  */
end_comment

begin_package
package|package
name|org
operator|.
name|exist
operator|.
name|messaging
operator|.
name|configuration
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|xquery
operator|.
name|value
operator|.
name|NodeValue
import|;
end_import

begin_import
import|import
name|org
operator|.
name|w3c
operator|.
name|dom
operator|.
name|Node
import|;
end_import

begin_import
import|import
name|org
operator|.
name|w3c
operator|.
name|dom
operator|.
name|NodeList
import|;
end_import

begin_comment
comment|/**  * Helper class for parsing an exist-db node.<BR>  *  * COnverts a structure like  *  *<A><B><C>dd</C></B><E><F>gg</F></E></A>  *  * into a map like  *  * A.B.C = dd A.B.D = gg  *  * @author Dannes Wessels (dannes@exist-db.org)  */
end_comment

begin_class
specifier|public
specifier|abstract
class|class
name|NodeParser
block|{
specifier|private
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|valueMap
init|=
operator|new
name|HashMap
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
argument_list|()
decl_stmt|;
specifier|private
name|String
name|rootName
decl_stmt|;
specifier|public
name|String
name|getRawConfigurationItem
parameter_list|(
name|String
name|key
parameter_list|)
block|{
return|return
name|valueMap
operator|.
name|get
argument_list|(
name|key
argument_list|)
return|;
block|}
specifier|public
name|String
name|getConfigurationItem
parameter_list|(
name|String
name|key
parameter_list|)
block|{
return|return
name|valueMap
operator|.
name|get
argument_list|(
name|rootName
operator|+
literal|"."
operator|+
name|key
argument_list|)
return|;
block|}
specifier|public
name|String
name|getRootName
parameter_list|()
block|{
return|return
name|rootName
return|;
block|}
specifier|public
name|void
name|parseDocument
parameter_list|(
name|NodeValue
name|configNode
parameter_list|)
block|{
name|Node
name|doc
init|=
name|configNode
operator|.
name|getNode
argument_list|()
decl_stmt|;
name|rootName
operator|=
name|doc
operator|.
name|getLocalName
argument_list|()
expr_stmt|;
name|parseNode
argument_list|(
name|doc
argument_list|,
name|rootName
argument_list|)
expr_stmt|;
block|}
specifier|public
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|getRawValueMap
parameter_list|()
block|{
return|return
name|valueMap
return|;
block|}
specifier|public
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|getValueMap
parameter_list|()
block|{
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|retVal
init|=
operator|new
name|HashMap
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
argument_list|()
decl_stmt|;
name|String
name|prefix
init|=
name|rootName
operator|+
literal|"."
decl_stmt|;
name|int
name|offset
init|=
name|prefix
operator|.
name|length
argument_list|()
decl_stmt|;
for|for
control|(
name|String
name|key
range|:
name|valueMap
operator|.
name|keySet
argument_list|()
control|)
block|{
name|String
name|value
init|=
name|valueMap
operator|.
name|get
argument_list|(
name|key
argument_list|)
decl_stmt|;
if|if
condition|(
name|key
operator|.
name|startsWith
argument_list|(
name|prefix
argument_list|)
condition|)
block|{
name|key
operator|=
name|key
operator|.
name|substring
argument_list|(
name|offset
argument_list|)
expr_stmt|;
block|}
name|retVal
operator|.
name|put
argument_list|(
name|key
argument_list|,
name|value
argument_list|)
expr_stmt|;
block|}
return|return
name|retVal
return|;
block|}
comment|/**      * Iterate over all child elements in node, if no child nodes present, read      * value of element.      *      * @param node Node to be parsed      * @param path path to current node, like a.b.c      */
specifier|private
name|void
name|parseNode
parameter_list|(
name|Node
name|node
parameter_list|,
name|String
name|path
parameter_list|)
block|{
name|NodeList
name|nodeList
init|=
name|node
operator|.
name|getChildNodes
argument_list|()
decl_stmt|;
name|int
name|length
init|=
name|nodeList
operator|.
name|getLength
argument_list|()
decl_stmt|;
if|if
condition|(
name|length
operator|>
literal|0
condition|)
block|{
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|length
condition|;
name|i
operator|++
control|)
block|{
name|Node
name|child
init|=
name|nodeList
operator|.
name|item
argument_list|(
name|i
argument_list|)
decl_stmt|;
if|if
condition|(
name|child
operator|.
name|getNodeType
argument_list|()
operator|==
name|Node
operator|.
name|ELEMENT_NODE
condition|)
block|{
name|parseNode
argument_list|(
name|child
argument_list|,
name|path
operator|+
literal|"."
operator|+
name|child
operator|.
name|getLocalName
argument_list|()
argument_list|)
expr_stmt|;
block|}
if|else if
condition|(
name|child
operator|.
name|getNodeType
argument_list|()
operator|==
name|Node
operator|.
name|TEXT_NODE
condition|)
block|{
name|valueMap
operator|.
name|put
argument_list|(
name|path
argument_list|,
name|node
operator|.
name|getNodeValue
argument_list|()
argument_list|)
expr_stmt|;
block|}
else|else
block|{
comment|// ignore
block|}
block|}
block|}
block|}
block|}
end_class

end_unit

