begin_unit|revision:1.0.0;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  *  eXist Open Source Native XML Database  *  Copyright (C) 2010 The eXist Project  *  http://exist-db.org  *    *  This program is free software; you can redistribute it and/or  *  modify it under the terms of the GNU Lesser General Public License  *  as published by the Free Software Foundation; either version 2  *  of the License, or (at your option) any later version.  *    *  This program is distributed in the hope that it will be useful,  *  but WITHOUT ANY WARRANTY; without even the implied warranty of  *  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the  *  GNU Lesser General Public License for more details.  *    *  You should have received a copy of the GNU Lesser General Public License  *  along with this program; if not, write to the Free Software  *  Foundation, Inc., 675 Mass Ave, Cambridge, MA 02139, USA.  *    *  $Id$  */
end_comment

begin_package
package|package
name|org
operator|.
name|exist
operator|.
name|synchro
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|File
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|log4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|indexing
operator|.
name|AbstractIndex
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|indexing
operator|.
name|IndexWorker
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|storage
operator|.
name|BrokerPool
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|storage
operator|.
name|DBBroker
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|storage
operator|.
name|DefaultCacheManager
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|storage
operator|.
name|btree
operator|.
name|DBException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|storage
operator|.
name|index
operator|.
name|BFile
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|storage
operator|.
name|lock
operator|.
name|Lock
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|util
operator|.
name|DatabaseConfigurationException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|util
operator|.
name|LockException
import|;
end_import

begin_comment
comment|/**  * @author<a href="mailto:shabanovd@gmail.com">Dmitriy Shabanov</a>  *  */
end_comment

begin_class
specifier|public
class|class
name|DBWatch
extends|extends
name|AbstractIndex
block|{
specifier|protected
specifier|static
specifier|final
name|Logger
name|LOG
init|=
name|Logger
operator|.
name|getLogger
argument_list|(
name|DBWatch
operator|.
name|class
argument_list|)
decl_stmt|;
specifier|public
specifier|final
specifier|static
name|String
name|ID
init|=
name|DBWatch
operator|.
name|class
operator|.
name|getName
argument_list|()
decl_stmt|;
specifier|public
specifier|static
specifier|final
name|String
name|FILE_NAME
init|=
literal|"dbWatch.dbx"
decl_stmt|;
specifier|public
specifier|static
name|double
name|cacheGrowth
init|=
literal|1.25
decl_stmt|;
specifier|public
specifier|static
name|double
name|keyThreshold
init|=
literal|0.01
decl_stmt|;
specifier|public
specifier|static
name|double
name|valueThreshold
init|=
literal|0.04
decl_stmt|;
specifier|protected
name|BFile
name|btree
decl_stmt|;
specifier|protected
name|Synchro
name|synchro
decl_stmt|;
specifier|public
name|DBWatch
parameter_list|(
name|Synchro
name|synchro
parameter_list|)
block|{
name|this
operator|.
name|synchro
operator|=
name|synchro
expr_stmt|;
block|}
specifier|public
name|Synchro
name|getSynchro
parameter_list|()
block|{
return|return
name|synchro
return|;
block|}
comment|/* (non-Javadoc) 	 * @see org.exist.indexing.AbstractIndex#open() 	 */
annotation|@
name|Override
specifier|public
name|void
name|open
parameter_list|()
throws|throws
name|DatabaseConfigurationException
block|{
name|File
name|file
init|=
operator|new
name|File
argument_list|(
name|getDataDir
argument_list|()
argument_list|,
name|FILE_NAME
argument_list|)
decl_stmt|;
name|LOG
operator|.
name|debug
argument_list|(
literal|"Creating '"
operator|+
name|file
operator|.
name|getName
argument_list|()
operator|+
literal|"'..."
argument_list|)
expr_stmt|;
try|try
block|{
name|btree
operator|=
operator|new
name|BFile
argument_list|(
operator|(
name|BrokerPool
operator|)
name|synchro
operator|.
name|getDatabase
argument_list|()
argument_list|,
operator|(
name|byte
operator|)
literal|0
argument_list|,
literal|false
argument_list|,
name|file
argument_list|,
operator|(
name|DefaultCacheManager
operator|)
name|synchro
operator|.
name|getDatabase
argument_list|()
operator|.
name|getCacheManager
argument_list|()
argument_list|,
name|cacheGrowth
argument_list|,
name|keyThreshold
argument_list|,
name|valueThreshold
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|DBException
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|error
argument_list|(
literal|"Failed to initialize structural index: "
operator|+
name|e
operator|.
name|getMessage
argument_list|()
argument_list|,
name|e
argument_list|)
expr_stmt|;
throw|throw
operator|new
name|DatabaseConfigurationException
argument_list|(
name|e
operator|.
name|getMessage
argument_list|()
argument_list|,
name|e
argument_list|)
throw|;
block|}
block|}
comment|/* (non-Javadoc) 	 * @see org.exist.indexing.AbstractIndex#close() 	 */
annotation|@
name|Override
specifier|public
name|void
name|close
parameter_list|()
throws|throws
name|DBException
block|{
name|btree
operator|.
name|close
argument_list|()
expr_stmt|;
name|btree
operator|=
literal|null
expr_stmt|;
block|}
comment|/* (non-Javadoc) 	 * @see org.exist.indexing.AbstractIndex#sync() 	 */
annotation|@
name|Override
specifier|public
name|void
name|sync
parameter_list|()
throws|throws
name|DBException
block|{
if|if
condition|(
name|btree
operator|==
literal|null
condition|)
return|return;
specifier|final
name|Lock
name|lock
init|=
name|btree
operator|.
name|getLock
argument_list|()
decl_stmt|;
try|try
block|{
name|lock
operator|.
name|acquire
argument_list|(
name|Lock
operator|.
name|WRITE_LOCK
argument_list|)
expr_stmt|;
name|btree
operator|.
name|flush
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|LockException
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|warn
argument_list|(
literal|"Failed to acquire lock for '"
operator|+
name|btree
operator|.
name|getFile
argument_list|()
operator|.
name|getName
argument_list|()
operator|+
literal|"'"
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|DBException
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|error
argument_list|(
name|e
operator|.
name|getMessage
argument_list|()
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
name|lock
operator|.
name|release
argument_list|(
name|Lock
operator|.
name|WRITE_LOCK
argument_list|)
expr_stmt|;
block|}
block|}
comment|/* (non-Javadoc) 	 * @see org.exist.indexing.AbstractIndex#remove() 	 */
annotation|@
name|Override
specifier|public
name|void
name|remove
parameter_list|()
throws|throws
name|DBException
block|{
comment|// TODO Auto-generated method stub
block|}
comment|/* (non-Javadoc) 	 * @see org.exist.indexing.AbstractIndex#getWorker(org.exist.storage.DBBroker) 	 */
annotation|@
name|Override
specifier|public
name|IndexWorker
name|getWorker
parameter_list|(
name|DBBroker
name|broker
parameter_list|)
block|{
return|return
operator|new
name|DBWatchWorker
argument_list|(
name|this
argument_list|)
return|;
block|}
comment|/* (non-Javadoc) 	 * @see org.exist.indexing.AbstractIndex#checkIndex(org.exist.storage.DBBroker) 	 */
annotation|@
name|Override
specifier|public
name|boolean
name|checkIndex
parameter_list|(
name|DBBroker
name|broker
parameter_list|)
block|{
comment|// TODO Auto-generated method stub
return|return
literal|false
return|;
block|}
block|}
end_class

end_unit

