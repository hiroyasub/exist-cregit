begin_unit|revision:1.0.0;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  *  eXist Open Source Native XML Database  *  Copyright (C) 2010 The eXist Project  *  http://exist-db.org  *    *  This program is free software; you can redistribute it and/or  *  modify it under the terms of the GNU Lesser General Public License  *  as published by the Free Software Foundation; either version 2  *  of the License, or (at your option) any later version.  *    *  This program is distributed in the hope that it will be useful,  *  but WITHOUT ANY WARRANTY; without even the implied warranty of  *  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the  *  GNU Lesser General Public License for more details.  *    *  You should have received a copy of the GNU Lesser General Public License  *  along with this program; if not, write to the Free Software  *  Foundation, Inc., 675 Mass Ave, Cambridge, MA 02139, USA.  *    *  $Id$  */
end_comment

begin_package
package|package
name|org
operator|.
name|exist
operator|.
name|synchro
package|;
end_package

begin_import
import|import
name|java
operator|.
name|lang
operator|.
name|reflect
operator|.
name|Method
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|config
operator|.
name|annotation
operator|.
name|ConfigurationClass
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|config
operator|.
name|annotation
operator|.
name|ConfigurationFieldAsAttribute
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|config
operator|.
name|annotation
operator|.
name|ConfigurationFieldAsElement
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|xmldb
operator|.
name|XmldbURI
import|;
end_import

begin_import
import|import
name|org
operator|.
name|jgroups
operator|.
name|*
import|;
end_import

begin_import
import|import
name|org
operator|.
name|jgroups
operator|.
name|blocks
operator|.
name|MethodCall
import|;
end_import

begin_import
import|import
name|org
operator|.
name|jgroups
operator|.
name|blocks
operator|.
name|MethodLookup
import|;
end_import

begin_import
import|import
name|org
operator|.
name|jgroups
operator|.
name|blocks
operator|.
name|RequestOptions
import|;
end_import

begin_import
import|import
name|org
operator|.
name|jgroups
operator|.
name|blocks
operator|.
name|RpcDispatcher
import|;
end_import

begin_import
import|import
name|org
operator|.
name|jgroups
operator|.
name|util
operator|.
name|RspList
import|;
end_import

begin_comment
comment|/**  * @author<a href="mailto:shabanovd@gmail.com">Dmitriy Shabanov</a>  *  */
end_comment

begin_class
annotation|@
name|ConfigurationClass
argument_list|(
literal|"cluster"
argument_list|)
specifier|public
class|class
name|Communicator
extends|extends
name|ReceiverAdapter
block|{
annotation|@
name|ConfigurationFieldAsAttribute
argument_list|(
literal|"id"
argument_list|)
specifier|private
name|String
name|id
init|=
literal|"eXist-dzone"
decl_stmt|;
annotation|@
name|ConfigurationFieldAsElement
argument_list|(
literal|"collection"
argument_list|)
specifier|protected
name|XmldbURI
name|collection
init|=
name|XmldbURI
operator|.
name|ROOT_COLLECTION_URI
decl_stmt|;
annotation|@
name|ConfigurationFieldAsElement
argument_list|(
literal|"protocol"
argument_list|)
specifier|private
name|String
name|protocol
init|=
literal|"udp.xml"
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|short
name|CREATE
init|=
literal|1
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|short
name|UPDATE
init|=
literal|2
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|short
name|DELETE
init|=
literal|3
decl_stmt|;
specifier|protected
specifier|static
name|Map
argument_list|<
name|Short
argument_list|,
name|Method
argument_list|>
name|methods
decl_stmt|;
static|static
block|{
try|try
block|{
name|methods
operator|=
operator|new
name|HashMap
argument_list|<
name|Short
argument_list|,
name|Method
argument_list|>
argument_list|(
literal|3
argument_list|)
expr_stmt|;
name|methods
operator|.
name|put
argument_list|(
name|CREATE
argument_list|,
name|Communicator
operator|.
name|class
operator|.
name|getMethod
argument_list|(
literal|"_create"
argument_list|,
name|String
operator|.
name|class
argument_list|,
name|XmldbURI
operator|.
name|class
argument_list|)
argument_list|)
expr_stmt|;
name|methods
operator|.
name|put
argument_list|(
name|UPDATE
argument_list|,
name|Communicator
operator|.
name|class
operator|.
name|getMethod
argument_list|(
literal|"_update"
argument_list|,
name|String
operator|.
name|class
argument_list|,
name|XmldbURI
operator|.
name|class
argument_list|)
argument_list|)
expr_stmt|;
name|methods
operator|.
name|put
argument_list|(
name|DELETE
argument_list|,
name|Communicator
operator|.
name|class
operator|.
name|getMethod
argument_list|(
literal|"_delete"
argument_list|,
name|String
operator|.
name|class
argument_list|,
name|XmldbURI
operator|.
name|class
argument_list|)
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|NoSuchMethodException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|RuntimeException
argument_list|(
name|e
argument_list|)
throw|;
block|}
block|}
specifier|protected
name|JChannel
name|channel
decl_stmt|;
specifier|protected
name|RpcDispatcher
name|dispatcher
decl_stmt|;
specifier|private
name|RequestOptions
name|opts
init|=
name|RequestOptions
operator|.
name|SYNC
decl_stmt|;
specifier|protected
name|Communicator
parameter_list|()
throws|throws
name|ChannelException
block|{
name|channel
operator|=
operator|new
name|JChannel
argument_list|(
name|protocol
argument_list|)
expr_stmt|;
name|init
argument_list|()
expr_stmt|;
name|channel
operator|.
name|connect
argument_list|(
name|id
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|shutdown
parameter_list|()
block|{
if|if
condition|(
name|dispatcher
operator|!=
literal|null
condition|)
block|{
name|dispatcher
operator|.
name|stop
argument_list|()
expr_stmt|;
name|dispatcher
operator|=
literal|null
expr_stmt|;
block|}
if|if
condition|(
name|channel
operator|!=
literal|null
condition|)
block|{
name|channel
operator|.
name|close
argument_list|()
expr_stmt|;
name|channel
operator|=
literal|null
expr_stmt|;
block|}
block|}
specifier|protected
specifier|final
name|void
name|init
parameter_list|()
block|{
name|dispatcher
operator|=
operator|new
name|RpcDispatcher
argument_list|(
name|channel
argument_list|,
name|this
argument_list|,
name|this
argument_list|,
name|this
argument_list|)
expr_stmt|;
name|dispatcher
operator|.
name|setMethodLookup
argument_list|(
operator|new
name|MethodLookup
argument_list|()
block|{
specifier|public
name|Method
name|findMethod
parameter_list|(
name|short
name|id
parameter_list|)
block|{
return|return
name|methods
operator|.
name|get
argument_list|(
name|id
argument_list|)
return|;
block|}
block|}
argument_list|)
expr_stmt|;
name|dispatcher
operator|.
name|setServerObject
argument_list|(
name|this
argument_list|)
expr_stmt|;
name|dispatcher
operator|.
name|start
argument_list|()
expr_stmt|;
block|}
specifier|private
name|void
name|callRemoteMethods
parameter_list|(
name|MethodCall
name|methodCall
parameter_list|)
block|{
try|try
block|{
name|dispatcher
operator|.
name|callRemoteMethods
argument_list|(
literal|null
argument_list|,
name|methodCall
argument_list|,
name|opts
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Throwable
name|e
parameter_list|)
block|{
name|e
operator|.
name|printStackTrace
argument_list|()
expr_stmt|;
block|}
block|}
specifier|public
name|void
name|create
parameter_list|(
name|XmldbURI
name|uri
parameter_list|)
block|{
name|callRemoteMethods
argument_list|(
operator|new
name|MethodCall
argument_list|(
name|CREATE
argument_list|,
name|channel
operator|.
name|getName
argument_list|()
argument_list|,
name|uri
argument_list|)
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|update
parameter_list|(
name|XmldbURI
name|uri
parameter_list|)
block|{
name|callRemoteMethods
argument_list|(
operator|new
name|MethodCall
argument_list|(
name|UPDATE
argument_list|,
name|channel
operator|.
name|getName
argument_list|()
argument_list|,
name|uri
argument_list|)
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|delete
parameter_list|(
name|XmldbURI
name|uri
parameter_list|)
block|{
name|callRemoteMethods
argument_list|(
operator|new
name|MethodCall
argument_list|(
name|DELETE
argument_list|,
name|channel
operator|.
name|getName
argument_list|()
argument_list|,
name|uri
argument_list|)
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|_create
parameter_list|(
name|String
name|eventOwner
parameter_list|,
name|XmldbURI
name|uri
parameter_list|)
block|{
if|if
condition|(
operator|!
name|channel
operator|.
name|getName
argument_list|()
operator|.
name|equals
argument_list|(
name|eventOwner
argument_list|)
condition|)
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|""
operator|+
name|channel
operator|.
name|getName
argument_list|()
operator|+
literal|" create uri = "
operator|+
name|uri
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|_update
parameter_list|(
name|String
name|eventOwner
parameter_list|,
name|XmldbURI
name|uri
parameter_list|)
block|{
if|if
condition|(
operator|!
name|channel
operator|.
name|getName
argument_list|()
operator|.
name|equals
argument_list|(
name|eventOwner
argument_list|)
condition|)
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|""
operator|+
name|channel
operator|.
name|getName
argument_list|()
operator|+
literal|" update uri = "
operator|+
name|uri
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|_delete
parameter_list|(
name|String
name|eventOwner
parameter_list|,
name|XmldbURI
name|uri
parameter_list|)
block|{
if|if
condition|(
operator|!
name|channel
operator|.
name|getName
argument_list|()
operator|.
name|equals
argument_list|(
name|eventOwner
argument_list|)
condition|)
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|""
operator|+
name|channel
operator|.
name|getName
argument_list|()
operator|+
literal|" delete uri = "
operator|+
name|uri
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

