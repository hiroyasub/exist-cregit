begin_unit|revision:1.0.0;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  *  eXist Open Source Native XML Database  *  Copyright (C) 2008-2010 The eXist Project  *  http://exist-db.org  *  *  This program is free software; you can redistribute it and/or  *  modify it under the terms of the GNU Lesser General Public License  *  as published by the Free Software Foundation; either version 2  *  of the License, or (at your option) any later version.  *  *  This program is distributed in the hope that it will be useful,  *  but WITHOUT ANY WARRANTY; without even the implied warranty of  *  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the  *  GNU Lesser General Public License for more details.  *  *  You should have received a copy of the GNU Lesser General Public License  *  along with this program; if not, write to the Free Software  *  Foundation, Inc., 675 Mass Ave, Cambridge, MA 02139, USA.  *  *  $Id: Format_date.java 11970 2010-07-15 19:33:11Z shabanovd $  */
end_comment

begin_package
package|package
name|org
operator|.
name|exist
operator|.
name|xslt
operator|.
name|functions
package|;
end_package

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|xquery
operator|.
name|Cardinality
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|xquery
operator|.
name|value
operator|.
name|SequenceType
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|xquery
operator|.
name|value
operator|.
name|Type
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|xquery
operator|.
name|value
operator|.
name|FunctionParameterSequenceType
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|xquery
operator|.
name|value
operator|.
name|FunctionReturnSequenceType
import|;
end_import

begin_import
import|import
name|java
operator|.
name|lang
operator|.
name|String
import|;
end_import

begin_comment
comment|/**  * format-date( $value  as xs:date?, $picture  as xs:string,  * 	$language  as xs:string?, $calendar  as xs:string?,  * 	$country  as xs:string?) as xs:string?  *  * format-date($value as xs:date?, $picture as xs:string) as xs:string?  *  * @author<a href="mailto:shabanovd@gmail.com">Dmitriy Shabanov</a>  *  */
end_comment

begin_class
specifier|public
class|class
name|FormatFunctionConstants
block|{
specifier|public
specifier|static
specifier|final
name|SequenceType
name|DATE_PARAMETER
init|=
operator|new
name|FunctionParameterSequenceType
argument_list|(
literal|"date"
argument_list|,
name|Type
operator|.
name|DATE
argument_list|,
name|Cardinality
operator|.
name|ZERO_OR_ONE
argument_list|,
literal|"The date value"
argument_list|)
decl_stmt|;
specifier|public
specifier|static
specifier|final
name|SequenceType
name|DATE_TIME_PARAMETER
init|=
operator|new
name|FunctionParameterSequenceType
argument_list|(
literal|"date-TIME"
argument_list|,
name|Type
operator|.
name|DATE_TIME
argument_list|,
name|Cardinality
operator|.
name|ZERO_OR_ONE
argument_list|,
literal|"The date-time value"
argument_list|)
decl_stmt|;
specifier|public
specifier|static
specifier|final
name|SequenceType
name|TIME_PARAMETER
init|=
operator|new
name|FunctionParameterSequenceType
argument_list|(
literal|"time"
argument_list|,
name|Type
operator|.
name|TIME
argument_list|,
name|Cardinality
operator|.
name|ZERO_OR_ONE
argument_list|,
literal|"The time value"
argument_list|)
decl_stmt|;
specifier|public
specifier|static
specifier|final
name|SequenceType
name|PICTURE_PARAMETER
init|=
operator|new
name|FunctionParameterSequenceType
argument_list|(
literal|"picture"
argument_list|,
name|Type
operator|.
name|STRING
argument_list|,
name|Cardinality
operator|.
name|ONE
argument_list|,
literal|"The picture string"
argument_list|)
decl_stmt|;
specifier|public
specifier|static
specifier|final
name|SequenceType
name|LANGUAGE_PARAMETER
init|=
operator|new
name|FunctionParameterSequenceType
argument_list|(
literal|"language"
argument_list|,
name|Type
operator|.
name|STRING
argument_list|,
name|Cardinality
operator|.
name|ZERO_OR_ONE
argument_list|,
literal|"The language parameter"
argument_list|)
decl_stmt|;
specifier|public
specifier|static
specifier|final
name|SequenceType
name|CALENDAR_PARAMETER
init|=
operator|new
name|FunctionParameterSequenceType
argument_list|(
literal|"calendar"
argument_list|,
name|Type
operator|.
name|STRING
argument_list|,
name|Cardinality
operator|.
name|ZERO_OR_ONE
argument_list|,
literal|"The calendar parameter"
argument_list|)
decl_stmt|;
specifier|public
specifier|static
specifier|final
name|SequenceType
name|COUNTRY_PARAMETER
init|=
operator|new
name|FunctionParameterSequenceType
argument_list|(
literal|"country"
argument_list|,
name|Type
operator|.
name|STRING
argument_list|,
name|Cardinality
operator|.
name|ZERO_OR_ONE
argument_list|,
literal|"The country parameter"
argument_list|)
decl_stmt|;
specifier|public
specifier|static
specifier|final
name|SequenceType
name|RETURN_TYPE
init|=
operator|new
name|FunctionReturnSequenceType
argument_list|(
name|Type
operator|.
name|STRING
argument_list|,
name|Cardinality
operator|.
name|ZERO_OR_ONE
argument_list|,
literal|"The formatted string"
argument_list|)
decl_stmt|;
specifier|public
specifier|static
specifier|final
name|String
name|DATE_FUNCTION_DESCRIPTION
init|=
literal|"The functions formats a date as a string using the picture string."
decl_stmt|;
specifier|public
specifier|static
specifier|final
name|String
name|DATE_TIME_FUNCTION_DESCRIPTION
init|=
literal|"The functions formats a dateTime as a string using the picture string."
decl_stmt|;
specifier|public
specifier|static
specifier|final
name|String
name|TIME_FUNCTION_DESCRIPTION
init|=
literal|"The functions formats a time as a string using the picture string."
decl_stmt|;
specifier|public
specifier|static
name|String
name|translate
parameter_list|(
name|String
name|input
parameter_list|)
block|{
name|StringBuffer
name|buffer
init|=
operator|new
name|StringBuffer
argument_list|(
name|input
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|index
init|=
literal|0
init|;
name|index
operator|<
name|buffer
operator|.
name|length
argument_list|()
condition|;
name|index
operator|++
control|)
block|{
name|char
name|testChar
init|=
name|buffer
operator|.
name|charAt
argument_list|(
name|index
argument_list|)
decl_stmt|;
switch|switch
condition|(
name|testChar
condition|)
block|{
case|case
literal|'Y'
case|:
name|buffer
operator|.
name|setCharAt
argument_list|(
name|index
argument_list|,
literal|'y'
argument_list|)
expr_stmt|;
break|break;
case|case
literal|'D'
case|:
name|buffer
operator|.
name|setCharAt
argument_list|(
name|index
argument_list|,
literal|'d'
argument_list|)
expr_stmt|;
break|break;
case|case
literal|'d'
case|:
name|buffer
operator|.
name|setCharAt
argument_list|(
name|index
argument_list|,
literal|'D'
argument_list|)
expr_stmt|;
break|break;
case|case
literal|'F'
case|:
name|buffer
operator|.
name|setCharAt
argument_list|(
name|index
argument_list|,
literal|'E'
argument_list|)
expr_stmt|;
break|break;
case|case
literal|'W'
case|:
name|buffer
operator|.
name|setCharAt
argument_list|(
name|index
argument_list|,
literal|'w'
argument_list|)
expr_stmt|;
break|break;
case|case
literal|'w'
case|:
name|buffer
operator|.
name|setCharAt
argument_list|(
name|index
argument_list|,
literal|'W'
argument_list|)
expr_stmt|;
break|break;
case|case
literal|'P'
case|:
name|buffer
operator|.
name|setCharAt
argument_list|(
name|index
argument_list|,
literal|'a'
argument_list|)
expr_stmt|;
break|break;
case|case
literal|'f'
case|:
name|buffer
operator|.
name|setCharAt
argument_list|(
name|index
argument_list|,
literal|'S'
argument_list|)
expr_stmt|;
break|break;
case|case
literal|'E'
case|:
name|buffer
operator|.
name|setCharAt
argument_list|(
name|index
argument_list|,
literal|'G'
argument_list|)
expr_stmt|;
break|break;
block|}
block|}
return|return
name|buffer
operator|.
name|toString
argument_list|()
return|;
block|}
block|}
end_class

end_unit

