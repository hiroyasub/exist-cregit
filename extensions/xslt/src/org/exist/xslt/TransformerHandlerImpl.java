begin_unit|revision:1.0.0;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  *  eXist Open Source Native XML Database  *  Copyright (C) 2008-2010 The eXist Project  *  http://exist-db.org  *    *  This program is free software; you can redistribute it and/or  *  modify it under the terms of the GNU Lesser General Public License  *  as published by the Free Software Foundation; either version 2  *  of the License, or (at your option) any later version.  *    *  This program is distributed in the hope that it will be useful,  *  but WITHOUT ANY WARRANTY; without even the implied warranty of  *  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the  *  GNU Lesser General Public License for more details.  *    *  You should have received a copy of the GNU Lesser General Public License  *  along with this program; if not, write to the Free Software  *  Foundation, Inc., 675 Mass Ave, Cambridge, MA 02139, USA.  *    *  $Id$  */
end_comment

begin_package
package|package
name|org
operator|.
name|exist
operator|.
name|xslt
package|;
end_package

begin_import
import|import
name|javax
operator|.
name|xml
operator|.
name|transform
operator|.
name|Result
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|xml
operator|.
name|transform
operator|.
name|Transformer
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|xml
operator|.
name|transform
operator|.
name|sax
operator|.
name|TransformerHandler
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|memtree
operator|.
name|SAXAdapter
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|xquery
operator|.
name|XQueryContext
import|;
end_import

begin_import
import|import
name|org
operator|.
name|xml
operator|.
name|sax
operator|.
name|SAXException
import|;
end_import

begin_comment
comment|/**  * @author<a href="mailto:shabanovd@gmail.com">Dmitriy Shabanov</a>  *  */
end_comment

begin_class
specifier|public
class|class
name|TransformerHandlerImpl
extends|extends
name|SAXAdapter
implements|implements
name|TransformerHandler
block|{
comment|//XXX: handle SAX events
specifier|private
name|Transformer
name|transformer
decl_stmt|;
specifier|private
name|String
name|SystemId
init|=
literal|null
decl_stmt|;
specifier|private
name|Result
name|result
decl_stmt|;
specifier|protected
name|TransformerHandlerImpl
parameter_list|(
name|XSLContext
name|context
parameter_list|,
name|Transformer
name|transformer
parameter_list|)
block|{
name|super
argument_list|(
operator|(
name|XQueryContext
operator|)
name|context
argument_list|)
expr_stmt|;
name|this
operator|.
name|transformer
operator|=
name|transformer
expr_stmt|;
block|}
comment|/* (non-Javadoc) 	 * @see javax.xml.transform.sax.TransformerHandler#getSystemId() 	 */
specifier|public
name|String
name|getSystemId
parameter_list|()
block|{
return|return
name|SystemId
return|;
block|}
comment|/* (non-Javadoc) 	 * @see javax.xml.transform.sax.TransformerHandler#getTransformer() 	 */
specifier|public
name|Transformer
name|getTransformer
parameter_list|()
block|{
return|return
name|transformer
return|;
block|}
comment|/* (non-Javadoc) 	 * @see javax.xml.transform.sax.TransformerHandler#setResult(javax.xml.transform.Result) 	 */
specifier|public
name|void
name|setResult
parameter_list|(
name|Result
name|result
parameter_list|)
throws|throws
name|IllegalArgumentException
block|{
name|this
operator|.
name|result
operator|=
name|result
expr_stmt|;
block|}
comment|/* (non-Javadoc) 	 * @see javax.xml.transform.sax.TransformerHandler#setSystemId(java.lang.String) 	 */
specifier|public
name|void
name|setSystemId
parameter_list|(
name|String
name|systemID
parameter_list|)
block|{
name|this
operator|.
name|SystemId
operator|=
name|systemID
expr_stmt|;
block|}
comment|/* (non-Javadoc) 	 * @see org.xml.sax.DTDHandler#notationDecl(java.lang.String, java.lang.String, java.lang.String) 	 */
specifier|public
name|void
name|notationDecl
parameter_list|(
name|String
name|name
parameter_list|,
name|String
name|publicId
parameter_list|,
name|String
name|systemId
parameter_list|)
throws|throws
name|SAXException
block|{
throw|throw
operator|new
name|RuntimeException
argument_list|(
literal|"notationDecl(String name, String publicId, String systemId) not implemented on class "
operator|+
name|getClass
argument_list|()
operator|.
name|getName
argument_list|()
argument_list|)
throw|;
block|}
comment|/* (non-Javadoc) 	 * @see org.xml.sax.DTDHandler#unparsedEntityDecl(java.lang.String, java.lang.String, java.lang.String, java.lang.String) 	 */
specifier|public
name|void
name|unparsedEntityDecl
parameter_list|(
name|String
name|name
parameter_list|,
name|String
name|publicId
parameter_list|,
name|String
name|systemId
parameter_list|,
name|String
name|notationName
parameter_list|)
throws|throws
name|SAXException
block|{
throw|throw
operator|new
name|RuntimeException
argument_list|(
literal|"unparsedEntityDecl(String name, String publicId, String systemId, String notationName) not implemented on class "
operator|+
name|getClass
argument_list|()
operator|.
name|getName
argument_list|()
argument_list|)
throw|;
block|}
block|}
end_class

end_unit

