begin_unit|revision:1.0.0;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  *  eXist Open Source Native XML Database  *  Copyright (C) 2008-2010 The eXist Project  *  http://exist-db.org  *    *  This program is free software; you can redistribute it and/or  *  modify it under the terms of the GNU Lesser General Public License  *  as published by the Free Software Foundation; either version 2  *  of the License, or (at your option) any later version.  *    *  This program is distributed in the hope that it will be useful,  *  but WITHOUT ANY WARRANTY; without even the implied warranty of  *  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the  *  GNU Lesser General Public License for more details.  *    *  You should have received a copy of the GNU Lesser General Public License  *  along with this program; if not, write to the Free Software  *  Foundation, Inc., 675 Mass Ave, Cambridge, MA 02139, USA.  *    *  $Id$  */
end_comment

begin_package
package|package
name|org
operator|.
name|exist
operator|.
name|xslt
operator|.
name|expression
package|;
end_package

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|interpreter
operator|.
name|ContextAtExist
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|xquery
operator|.
name|XPathException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|xquery
operator|.
name|util
operator|.
name|ExpressionDumper
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|xquery
operator|.
name|value
operator|.
name|Item
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|xquery
operator|.
name|value
operator|.
name|Sequence
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|xslt
operator|.
name|XSLContext
import|;
end_import

begin_import
import|import
name|org
operator|.
name|w3c
operator|.
name|dom
operator|.
name|Attr
import|;
end_import

begin_comment
comment|/**  *<!-- Category: instruction -->  *<xsl:number  *   value? = expression  *   select? = expression  *   level? = "single" | "multiple" | "any"  *   count? = pattern  *   from? = pattern  *   format? = { string }  *   lang? = { nmtoken }  *   letter-value? = { "alphabetic" | "traditional" }  *   ordinal? = { string }  *   grouping-separator? = { char }  *   grouping-size? = { number } />  *   * @author<a href="mailto:shabanovd@gmail.com">Dmitriy Shabanov</a>  *  */
end_comment

begin_class
specifier|public
class|class
name|Number
extends|extends
name|Declaration
block|{
specifier|private
name|String
name|value
init|=
literal|null
decl_stmt|;
specifier|private
name|String
name|select
init|=
literal|null
decl_stmt|;
specifier|private
name|String
name|level
init|=
literal|null
decl_stmt|;
specifier|private
name|String
name|count
init|=
literal|null
decl_stmt|;
specifier|private
name|String
name|from
init|=
literal|null
decl_stmt|;
specifier|private
name|String
name|format
init|=
literal|null
decl_stmt|;
specifier|private
name|String
name|lang
init|=
literal|null
decl_stmt|;
specifier|private
name|String
name|letter_value
init|=
literal|null
decl_stmt|;
specifier|private
name|String
name|ordinal
init|=
literal|null
decl_stmt|;
specifier|private
name|String
name|grouping_separator
init|=
literal|null
decl_stmt|;
specifier|private
name|String
name|grouping_size
init|=
literal|null
decl_stmt|;
specifier|public
name|Number
parameter_list|(
name|XSLContext
name|context
parameter_list|)
block|{
name|super
argument_list|(
name|context
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|setToDefaults
parameter_list|()
block|{
name|value
operator|=
literal|null
expr_stmt|;
name|select
operator|=
literal|null
expr_stmt|;
name|level
operator|=
literal|null
expr_stmt|;
name|count
operator|=
literal|null
expr_stmt|;
name|from
operator|=
literal|null
expr_stmt|;
name|format
operator|=
literal|null
expr_stmt|;
name|lang
operator|=
literal|null
expr_stmt|;
name|letter_value
operator|=
literal|null
expr_stmt|;
name|ordinal
operator|=
literal|null
expr_stmt|;
name|grouping_separator
operator|=
literal|null
expr_stmt|;
name|grouping_size
operator|=
literal|null
expr_stmt|;
block|}
specifier|public
name|void
name|prepareAttribute
parameter_list|(
name|ContextAtExist
name|context
parameter_list|,
name|Attr
name|attr
parameter_list|)
throws|throws
name|XPathException
block|{
name|String
name|attr_name
init|=
name|attr
operator|.
name|getLocalName
argument_list|()
decl_stmt|;
if|if
condition|(
name|attr_name
operator|.
name|equals
argument_list|(
name|VALUE
argument_list|)
condition|)
block|{
name|value
operator|=
name|attr
operator|.
name|getValue
argument_list|()
expr_stmt|;
block|}
if|else if
condition|(
name|attr_name
operator|.
name|equals
argument_list|(
name|SELECT
argument_list|)
condition|)
block|{
name|select
operator|=
name|attr
operator|.
name|getValue
argument_list|()
expr_stmt|;
block|}
if|else if
condition|(
name|attr_name
operator|.
name|equals
argument_list|(
name|LEVEL
argument_list|)
condition|)
block|{
name|level
operator|=
name|attr
operator|.
name|getValue
argument_list|()
expr_stmt|;
block|}
if|else if
condition|(
name|attr_name
operator|.
name|equals
argument_list|(
name|COUNT
argument_list|)
condition|)
block|{
name|count
operator|=
name|attr
operator|.
name|getValue
argument_list|()
expr_stmt|;
block|}
if|else if
condition|(
name|attr_name
operator|.
name|equals
argument_list|(
name|FROM
argument_list|)
condition|)
block|{
name|from
operator|=
name|attr
operator|.
name|getValue
argument_list|()
expr_stmt|;
block|}
if|else if
condition|(
name|attr_name
operator|.
name|equals
argument_list|(
name|FORMAT
argument_list|)
condition|)
block|{
name|format
operator|=
name|attr
operator|.
name|getValue
argument_list|()
expr_stmt|;
block|}
if|else if
condition|(
name|attr_name
operator|.
name|equals
argument_list|(
name|LANG
argument_list|)
condition|)
block|{
name|lang
operator|=
name|attr
operator|.
name|getValue
argument_list|()
expr_stmt|;
block|}
if|else if
condition|(
name|attr_name
operator|.
name|equals
argument_list|(
name|LETTER_VALUE
argument_list|)
condition|)
block|{
name|letter_value
operator|=
name|attr
operator|.
name|getValue
argument_list|()
expr_stmt|;
block|}
if|else if
condition|(
name|attr_name
operator|.
name|equals
argument_list|(
name|ORDINAL
argument_list|)
condition|)
block|{
name|ordinal
operator|=
name|attr
operator|.
name|getValue
argument_list|()
expr_stmt|;
block|}
if|else if
condition|(
name|attr_name
operator|.
name|equals
argument_list|(
name|GROUPING_SEPARATOR
argument_list|)
condition|)
block|{
name|grouping_separator
operator|=
name|attr
operator|.
name|getValue
argument_list|()
expr_stmt|;
block|}
if|else if
condition|(
name|attr_name
operator|.
name|equals
argument_list|(
name|GROUPING_SIZE
argument_list|)
condition|)
block|{
name|grouping_size
operator|=
name|attr
operator|.
name|getValue
argument_list|()
expr_stmt|;
block|}
block|}
specifier|public
name|Sequence
name|eval
parameter_list|(
name|Sequence
name|contextSequence
parameter_list|,
name|Item
name|contextItem
parameter_list|)
throws|throws
name|XPathException
block|{
throw|throw
operator|new
name|RuntimeException
argument_list|(
literal|"eval(Sequence contextSequence, Item contextItem) at "
operator|+
name|this
operator|.
name|getClass
argument_list|()
argument_list|)
throw|;
block|}
comment|/* (non-Javadoc)      * @see org.exist.xquery.Expression#dump(org.exist.xquery.util.ExpressionDumper)      */
specifier|public
name|void
name|dump
parameter_list|(
name|ExpressionDumper
name|dumper
parameter_list|)
block|{
name|dumper
operator|.
name|display
argument_list|(
literal|"<xsl:number"
argument_list|)
expr_stmt|;
if|if
condition|(
name|value
operator|!=
literal|null
condition|)
block|{
name|dumper
operator|.
name|display
argument_list|(
literal|" value = "
argument_list|)
expr_stmt|;
name|dumper
operator|.
name|display
argument_list|(
name|value
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|select
operator|!=
literal|null
condition|)
block|{
name|dumper
operator|.
name|display
argument_list|(
literal|" select = "
argument_list|)
expr_stmt|;
name|dumper
operator|.
name|display
argument_list|(
name|select
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|level
operator|!=
literal|null
condition|)
block|{
name|dumper
operator|.
name|display
argument_list|(
literal|" level = "
argument_list|)
expr_stmt|;
name|dumper
operator|.
name|display
argument_list|(
name|level
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|count
operator|!=
literal|null
condition|)
block|{
name|dumper
operator|.
name|display
argument_list|(
literal|" count = "
argument_list|)
expr_stmt|;
name|dumper
operator|.
name|display
argument_list|(
name|count
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|from
operator|!=
literal|null
condition|)
block|{
name|dumper
operator|.
name|display
argument_list|(
literal|" from = "
argument_list|)
expr_stmt|;
name|dumper
operator|.
name|display
argument_list|(
name|from
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|format
operator|!=
literal|null
condition|)
block|{
name|dumper
operator|.
name|display
argument_list|(
literal|" format = "
argument_list|)
expr_stmt|;
name|dumper
operator|.
name|display
argument_list|(
name|format
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|lang
operator|!=
literal|null
condition|)
block|{
name|dumper
operator|.
name|display
argument_list|(
literal|" lang = "
argument_list|)
expr_stmt|;
name|dumper
operator|.
name|display
argument_list|(
name|lang
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|letter_value
operator|!=
literal|null
condition|)
block|{
name|dumper
operator|.
name|display
argument_list|(
literal|" letter_value = "
argument_list|)
expr_stmt|;
name|dumper
operator|.
name|display
argument_list|(
name|letter_value
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|ordinal
operator|!=
literal|null
condition|)
block|{
name|dumper
operator|.
name|display
argument_list|(
literal|" ordinal = "
argument_list|)
expr_stmt|;
name|dumper
operator|.
name|display
argument_list|(
name|ordinal
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|grouping_separator
operator|!=
literal|null
condition|)
block|{
name|dumper
operator|.
name|display
argument_list|(
literal|" grouping_separator = "
argument_list|)
expr_stmt|;
name|dumper
operator|.
name|display
argument_list|(
name|grouping_separator
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|grouping_size
operator|!=
literal|null
condition|)
block|{
name|dumper
operator|.
name|display
argument_list|(
literal|" grouping_size = "
argument_list|)
expr_stmt|;
name|dumper
operator|.
name|display
argument_list|(
name|grouping_size
argument_list|)
expr_stmt|;
block|}
name|super
operator|.
name|dump
argument_list|(
name|dumper
argument_list|)
expr_stmt|;
name|dumper
operator|.
name|display
argument_list|(
literal|"</xsl:number>"
argument_list|)
expr_stmt|;
block|}
specifier|public
name|String
name|toString
parameter_list|()
block|{
name|StringBuilder
name|result
init|=
operator|new
name|StringBuilder
argument_list|()
decl_stmt|;
name|result
operator|.
name|append
argument_list|(
literal|"<xsl:number"
argument_list|)
expr_stmt|;
if|if
condition|(
name|value
operator|!=
literal|null
condition|)
name|result
operator|.
name|append
argument_list|(
literal|" value = "
operator|+
name|value
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|select
operator|!=
literal|null
condition|)
name|result
operator|.
name|append
argument_list|(
literal|" select = "
operator|+
name|select
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|level
operator|!=
literal|null
condition|)
name|result
operator|.
name|append
argument_list|(
literal|" level = "
operator|+
name|level
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|count
operator|!=
literal|null
condition|)
name|result
operator|.
name|append
argument_list|(
literal|" count = "
operator|+
name|count
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|from
operator|!=
literal|null
condition|)
name|result
operator|.
name|append
argument_list|(
literal|" from = "
operator|+
name|from
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|format
operator|!=
literal|null
condition|)
name|result
operator|.
name|append
argument_list|(
literal|" format = "
operator|+
name|format
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|lang
operator|!=
literal|null
condition|)
name|result
operator|.
name|append
argument_list|(
literal|" lang = "
operator|+
name|lang
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|letter_value
operator|!=
literal|null
condition|)
name|result
operator|.
name|append
argument_list|(
literal|" letter_value = "
operator|+
name|letter_value
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|ordinal
operator|!=
literal|null
condition|)
name|result
operator|.
name|append
argument_list|(
literal|" ordinal = "
operator|+
name|ordinal
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|grouping_separator
operator|!=
literal|null
condition|)
name|result
operator|.
name|append
argument_list|(
literal|" grouping_separator = "
operator|+
name|grouping_separator
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|grouping_size
operator|!=
literal|null
condition|)
name|result
operator|.
name|append
argument_list|(
literal|" grouping_size = "
operator|+
name|grouping_size
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|result
operator|.
name|append
argument_list|(
literal|"> "
argument_list|)
expr_stmt|;
name|result
operator|.
name|append
argument_list|(
name|super
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|result
operator|.
name|append
argument_list|(
literal|"</xsl:number> "
argument_list|)
expr_stmt|;
return|return
name|result
operator|.
name|toString
argument_list|()
return|;
block|}
block|}
end_class

end_unit

