begin_unit|revision:1.0.0;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  *  eXist Open Source Native XML Database  *  Copyright (C) 2008-2010 The eXist Project  *  http://exist-db.org  *    *  This program is free software; you can redistribute it and/or  *  modify it under the terms of the GNU Lesser General Public License  *  as published by the Free Software Foundation; either version 2  *  of the License, or (at your option) any later version.  *    *  This program is distributed in the hope that it will be useful,  *  but WITHOUT ANY WARRANTY; without even the implied warranty of  *  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the  *  GNU Lesser General Public License for more details.  *    *  You should have received a copy of the GNU Lesser General Public License  *  along with this program; if not, write to the Free Software  *  Foundation, Inc., 675 Mass Ave, Cambridge, MA 02139, USA.  *    *  $Id$  */
end_comment

begin_package
package|package
name|org
operator|.
name|exist
operator|.
name|xslt
operator|.
name|expression
package|;
end_package

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|dom
operator|.
name|persistent
operator|.
name|QName
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|dom
operator|.
name|persistent
operator|.
name|QNameable
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|interpreter
operator|.
name|ContextAtExist
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|memtree
operator|.
name|MemTreeBuilder
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|memtree
operator|.
name|NodeImpl
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|xquery
operator|.
name|XPathException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|xquery
operator|.
name|util
operator|.
name|ExpressionDumper
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|xquery
operator|.
name|value
operator|.
name|Item
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|xquery
operator|.
name|value
operator|.
name|NodeValue
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|xquery
operator|.
name|value
operator|.
name|QNameValue
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|xquery
operator|.
name|value
operator|.
name|Sequence
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|xquery
operator|.
name|value
operator|.
name|SequenceIterator
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|xquery
operator|.
name|value
operator|.
name|ValueSequence
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|xslt
operator|.
name|XSLContext
import|;
end_import

begin_import
import|import
name|org
operator|.
name|w3c
operator|.
name|dom
operator|.
name|Attr
import|;
end_import

begin_comment
comment|/**  *<!-- Category: instruction -->  *<xsl:copy  *   copy-namespaces? = "yes" | "no"  *   inherit-namespaces? = "yes" | "no"  *   use-attribute-sets? = qnames  *   type? = qname  *   validation? = "strict" | "lax" | "preserve" | "strip">  *<!-- Content: sequence-constructor -->  *</xsl:copy>  *   * @author<a href="mailto:shabanovd@gmail.com">Dmitriy Shabanov</a>  *  */
end_comment

begin_class
specifier|public
class|class
name|Copy
extends|extends
name|Declaration
block|{
specifier|private
name|Boolean
name|copy_namespaces
init|=
literal|null
decl_stmt|;
specifier|private
name|Boolean
name|inherit_namespaces
init|=
literal|null
decl_stmt|;
specifier|private
name|String
name|use_attribute_sets
init|=
literal|null
decl_stmt|;
specifier|private
name|String
name|type
init|=
literal|null
decl_stmt|;
specifier|private
name|String
name|validation
init|=
literal|null
decl_stmt|;
specifier|public
name|Copy
parameter_list|(
name|XSLContext
name|context
parameter_list|)
block|{
name|super
argument_list|(
name|context
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|setToDefaults
parameter_list|()
block|{
name|copy_namespaces
operator|=
literal|null
expr_stmt|;
name|inherit_namespaces
operator|=
literal|null
expr_stmt|;
name|use_attribute_sets
operator|=
literal|null
expr_stmt|;
name|type
operator|=
literal|null
expr_stmt|;
name|validation
operator|=
literal|null
expr_stmt|;
block|}
specifier|public
name|void
name|prepareAttribute
parameter_list|(
name|ContextAtExist
name|context
parameter_list|,
name|Attr
name|attr
parameter_list|)
throws|throws
name|XPathException
block|{
name|String
name|attr_name
init|=
name|attr
operator|.
name|getLocalName
argument_list|()
decl_stmt|;
if|if
condition|(
name|attr_name
operator|.
name|equals
argument_list|(
name|COPY_NAMESPACES
argument_list|)
condition|)
block|{
name|copy_namespaces
operator|=
name|getBoolean
argument_list|(
name|attr
operator|.
name|getValue
argument_list|()
argument_list|)
expr_stmt|;
block|}
if|else if
condition|(
name|attr_name
operator|.
name|equals
argument_list|(
name|INHERIT_NAMESPACES
argument_list|)
condition|)
block|{
name|inherit_namespaces
operator|=
name|getBoolean
argument_list|(
name|attr
operator|.
name|getValue
argument_list|()
argument_list|)
expr_stmt|;
block|}
if|else if
condition|(
name|attr_name
operator|.
name|equals
argument_list|(
name|USE_ATTRIBUTE_SETS
argument_list|)
condition|)
block|{
name|use_attribute_sets
operator|=
name|attr
operator|.
name|getValue
argument_list|()
expr_stmt|;
block|}
if|else if
condition|(
name|attr_name
operator|.
name|equals
argument_list|(
name|TYPE
argument_list|)
condition|)
block|{
name|type
operator|=
name|attr
operator|.
name|getValue
argument_list|()
expr_stmt|;
block|}
if|else if
condition|(
name|attr_name
operator|.
name|equals
argument_list|(
name|VALIDATION
argument_list|)
condition|)
block|{
name|validation
operator|=
name|attr
operator|.
name|getValue
argument_list|()
expr_stmt|;
block|}
block|}
specifier|public
name|Sequence
name|eval
parameter_list|(
name|Sequence
name|contextSequence
parameter_list|,
name|Item
name|contextItem
parameter_list|)
throws|throws
name|XPathException
block|{
name|Sequence
name|result
init|=
operator|new
name|ValueSequence
argument_list|()
decl_stmt|;
if|if
condition|(
name|contextItem
operator|!=
literal|null
condition|)
name|contextSequence
operator|=
name|contextItem
operator|.
name|toSequence
argument_list|()
expr_stmt|;
name|context
operator|.
name|pushInScopeNamespaces
argument_list|()
expr_stmt|;
name|MemTreeBuilder
name|builder
init|=
name|context
operator|.
name|getDocumentBuilder
argument_list|()
decl_stmt|;
try|try
block|{
comment|//            for (Item item : contextSequence) {
for|for
control|(
name|SequenceIterator
name|iterInner
init|=
name|contextSequence
operator|.
name|iterate
argument_list|()
init|;
name|iterInner
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|Item
name|i
init|=
name|iterInner
operator|.
name|nextItem
argument_list|()
decl_stmt|;
name|org
operator|.
name|w3c
operator|.
name|dom
operator|.
name|Node
name|item
decl_stmt|;
if|if
condition|(
name|i
operator|instanceof
name|NodeValue
condition|)
block|{
name|item
operator|=
operator|(
operator|(
name|NodeValue
operator|)
name|i
operator|)
operator|.
name|getNode
argument_list|()
expr_stmt|;
block|}
else|else
name|item
operator|=
operator|(
name|org
operator|.
name|w3c
operator|.
name|dom
operator|.
name|Node
operator|)
name|i
expr_stmt|;
comment|//UNDERSTAND: strange place to workaround
if|if
condition|(
name|item
operator|instanceof
name|org
operator|.
name|w3c
operator|.
name|dom
operator|.
name|Document
condition|)
block|{
name|org
operator|.
name|w3c
operator|.
name|dom
operator|.
name|Document
name|document
init|=
operator|(
name|org
operator|.
name|w3c
operator|.
name|dom
operator|.
name|Document
operator|)
name|item
decl_stmt|;
name|item
operator|=
name|document
operator|.
name|getDocumentElement
argument_list|()
expr_stmt|;
block|}
if|if
condition|(
name|item
operator|instanceof
name|org
operator|.
name|w3c
operator|.
name|dom
operator|.
name|Element
condition|)
block|{
name|QName
name|qn
decl_stmt|;
if|if
condition|(
name|item
operator|instanceof
name|QNameValue
condition|)
block|{
name|qn
operator|=
operator|(
operator|(
name|QNameValue
operator|)
name|item
operator|)
operator|.
name|getQName
argument_list|()
expr_stmt|;
block|}
else|else
block|{
name|qn
operator|=
operator|(
operator|(
name|QNameable
operator|)
name|item
operator|)
operator|.
name|getQName
argument_list|()
expr_stmt|;
if|if
condition|(
name|qn
operator|.
name|getPrefix
argument_list|()
operator|==
literal|null
operator|&&
name|context
operator|.
name|getInScopeNamespace
argument_list|(
literal|""
argument_list|)
operator|!=
literal|null
condition|)
block|{
name|qn
operator|.
name|setNamespaceURI
argument_list|(
name|context
operator|.
name|getInScopeNamespace
argument_list|(
literal|""
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
name|int
name|nodeNr
init|=
name|builder
operator|.
name|startElement
argument_list|(
name|qn
argument_list|,
literal|null
argument_list|)
decl_stmt|;
if|if
condition|(
name|use_attribute_sets
operator|!=
literal|null
condition|)
name|getXSLContext
argument_list|()
operator|.
name|getXSLStylesheet
argument_list|()
operator|.
name|attributeSet
argument_list|(
name|use_attribute_sets
argument_list|,
name|contextSequence
argument_list|,
name|i
argument_list|)
expr_stmt|;
name|super
operator|.
name|eval
argument_list|(
name|contextSequence
argument_list|,
name|i
argument_list|)
expr_stmt|;
name|builder
operator|.
name|endElement
argument_list|()
expr_stmt|;
name|NodeImpl
name|node
init|=
name|builder
operator|.
name|getDocument
argument_list|()
operator|.
name|getNode
argument_list|(
name|nodeNr
argument_list|)
decl_stmt|;
name|result
operator|.
name|add
argument_list|(
name|node
argument_list|)
expr_stmt|;
block|}
if|else if
condition|(
name|item
operator|instanceof
name|org
operator|.
name|w3c
operator|.
name|dom
operator|.
name|Text
condition|)
block|{
name|int
name|nodeNr
init|=
name|builder
operator|.
name|characters
argument_list|(
name|i
operator|.
name|getStringValue
argument_list|()
argument_list|)
decl_stmt|;
name|NodeImpl
name|node
init|=
name|builder
operator|.
name|getDocument
argument_list|()
operator|.
name|getNode
argument_list|(
name|nodeNr
argument_list|)
decl_stmt|;
name|result
operator|.
name|add
argument_list|(
name|node
argument_list|)
expr_stmt|;
block|}
else|else
block|{
throw|throw
operator|new
name|XPathException
argument_list|(
literal|"not supported node type "
operator|+
name|i
operator|.
name|getType
argument_list|()
argument_list|)
throw|;
block|}
block|}
block|}
finally|finally
block|{
name|context
operator|.
name|popInScopeNamespaces
argument_list|()
expr_stmt|;
block|}
return|return
name|result
return|;
block|}
comment|/* (non-Javadoc)      * @see org.exist.xquery.Expression#dump(org.exist.xquery.util.ExpressionDumper)      */
specifier|public
name|void
name|dump
parameter_list|(
name|ExpressionDumper
name|dumper
parameter_list|)
block|{
name|dumper
operator|.
name|display
argument_list|(
literal|"<xsl:copy"
argument_list|)
expr_stmt|;
if|if
condition|(
name|copy_namespaces
operator|!=
literal|null
condition|)
block|{
name|dumper
operator|.
name|display
argument_list|(
literal|" copy_namespaces = "
argument_list|)
expr_stmt|;
name|dumper
operator|.
name|display
argument_list|(
name|copy_namespaces
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|inherit_namespaces
operator|!=
literal|null
condition|)
block|{
name|dumper
operator|.
name|display
argument_list|(
literal|" inherit_namespaces = "
argument_list|)
expr_stmt|;
name|dumper
operator|.
name|display
argument_list|(
name|inherit_namespaces
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|use_attribute_sets
operator|!=
literal|null
condition|)
block|{
name|dumper
operator|.
name|display
argument_list|(
literal|" use_attribute_sets = "
argument_list|)
expr_stmt|;
name|dumper
operator|.
name|display
argument_list|(
name|use_attribute_sets
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|type
operator|!=
literal|null
condition|)
block|{
name|dumper
operator|.
name|display
argument_list|(
literal|" type = "
argument_list|)
expr_stmt|;
name|dumper
operator|.
name|display
argument_list|(
name|type
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|validation
operator|!=
literal|null
condition|)
block|{
name|dumper
operator|.
name|display
argument_list|(
literal|" validation = "
argument_list|)
expr_stmt|;
name|dumper
operator|.
name|display
argument_list|(
name|validation
argument_list|)
expr_stmt|;
block|}
name|super
operator|.
name|dump
argument_list|(
name|dumper
argument_list|)
expr_stmt|;
name|dumper
operator|.
name|display
argument_list|(
literal|"</xsl:copy>"
argument_list|)
expr_stmt|;
block|}
specifier|public
name|String
name|toString
parameter_list|()
block|{
name|StringBuilder
name|result
init|=
operator|new
name|StringBuilder
argument_list|()
decl_stmt|;
name|result
operator|.
name|append
argument_list|(
literal|"<xsl:copy"
argument_list|)
expr_stmt|;
if|if
condition|(
name|copy_namespaces
operator|!=
literal|null
condition|)
name|result
operator|.
name|append
argument_list|(
literal|" copy_namespaces = "
operator|+
name|copy_namespaces
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|inherit_namespaces
operator|!=
literal|null
condition|)
name|result
operator|.
name|append
argument_list|(
literal|" inherit_namespaces = "
operator|+
name|inherit_namespaces
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|use_attribute_sets
operator|!=
literal|null
condition|)
name|result
operator|.
name|append
argument_list|(
literal|" use_attribute_sets = "
operator|+
name|use_attribute_sets
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|type
operator|!=
literal|null
condition|)
name|result
operator|.
name|append
argument_list|(
literal|" type = "
operator|+
name|type
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|validation
operator|!=
literal|null
condition|)
name|result
operator|.
name|append
argument_list|(
literal|" validation = "
operator|+
name|validation
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|result
operator|.
name|append
argument_list|(
literal|"> "
argument_list|)
expr_stmt|;
name|result
operator|.
name|append
argument_list|(
name|super
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|result
operator|.
name|append
argument_list|(
literal|"</xsl:copy> "
argument_list|)
expr_stmt|;
return|return
name|result
operator|.
name|toString
argument_list|()
return|;
block|}
block|}
end_class

end_unit

