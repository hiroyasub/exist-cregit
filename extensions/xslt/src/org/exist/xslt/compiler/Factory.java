begin_unit|revision:1.0.0;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  *  eXist Open Source Native XML Database  *  Copyright (C) 2008-2009 The eXist Project  *  http://exist-db.org  *    *  This program is free software; you can redistribute it and/or  *  modify it under the terms of the GNU Lesser General Public License  *  as published by the Free Software Foundation; either version 2  *  of the License, or (at your option) any later version.  *    *  This program is distributed in the hope that it will be useful,  *  but WITHOUT ANY WARRANTY; without even the implied warranty of  *  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the  *  GNU Lesser General Public License for more details.  *    *  You should have received a copy of the GNU Lesser General Public License  *  along with this program; if not, write to the Free Software  *  Foundation, Inc., 675 Mass Ave, Cambridge, MA 02139, USA.  *    *  $Id$  */
end_comment

begin_package
package|package
name|org
operator|.
name|exist
operator|.
name|xslt
operator|.
name|compiler
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|dom
operator|.
name|QName
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|xslt
operator|.
name|XSLStylesheet
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|xslt
operator|.
name|expression
operator|.
name|*
import|;
end_import

begin_comment
comment|/**  * @author<a href="mailto:shabanovd@gmail.com">Dmitriy Shabanov</a>  *  */
end_comment

begin_class
specifier|public
class|class
name|Factory
block|{
specifier|public
specifier|static
specifier|final
name|String
name|prefix
init|=
literal|"xsl"
decl_stmt|;
specifier|public
specifier|static
specifier|final
name|String
name|namespaceURI
init|=
literal|"http://www.w3.org/1999/XSL/Transform"
decl_stmt|;
specifier|public
specifier|static
specifier|final
name|Map
argument_list|<
name|QName
argument_list|,
name|Class
argument_list|>
name|qns
init|=
operator|new
name|HashMap
argument_list|<
name|QName
argument_list|,
name|Class
argument_list|>
argument_list|()
decl_stmt|;
static|static
block|{
name|qns
operator|.
name|put
argument_list|(
operator|new
name|QName
argument_list|(
literal|"stylesheet"
argument_list|,
name|namespaceURI
argument_list|,
name|prefix
argument_list|)
argument_list|,
name|XSLStylesheet
operator|.
name|class
argument_list|)
expr_stmt|;
name|qns
operator|.
name|put
argument_list|(
operator|new
name|QName
argument_list|(
literal|"transform"
argument_list|,
name|namespaceURI
argument_list|,
name|prefix
argument_list|)
argument_list|,
name|XSLStylesheet
operator|.
name|class
argument_list|)
expr_stmt|;
name|qns
operator|.
name|put
argument_list|(
operator|new
name|QName
argument_list|(
literal|"template"
argument_list|,
name|namespaceURI
argument_list|,
name|prefix
argument_list|)
argument_list|,
name|Template
operator|.
name|class
argument_list|)
expr_stmt|;
name|qns
operator|.
name|put
argument_list|(
operator|new
name|QName
argument_list|(
literal|"value-of"
argument_list|,
name|namespaceURI
argument_list|,
name|prefix
argument_list|)
argument_list|,
name|ValueOf
operator|.
name|class
argument_list|)
expr_stmt|;
name|qns
operator|.
name|put
argument_list|(
operator|new
name|QName
argument_list|(
literal|"import"
argument_list|,
name|namespaceURI
argument_list|,
name|prefix
argument_list|)
argument_list|,
name|Import
operator|.
name|class
argument_list|)
expr_stmt|;
name|qns
operator|.
name|put
argument_list|(
operator|new
name|QName
argument_list|(
literal|"include"
argument_list|,
name|namespaceURI
argument_list|,
name|prefix
argument_list|)
argument_list|,
name|Include
operator|.
name|class
argument_list|)
expr_stmt|;
name|qns
operator|.
name|put
argument_list|(
operator|new
name|QName
argument_list|(
literal|"attribute-set"
argument_list|,
name|namespaceURI
argument_list|,
name|prefix
argument_list|)
argument_list|,
name|AttributeSet
operator|.
name|class
argument_list|)
expr_stmt|;
name|qns
operator|.
name|put
argument_list|(
operator|new
name|QName
argument_list|(
literal|"character-map"
argument_list|,
name|namespaceURI
argument_list|,
name|prefix
argument_list|)
argument_list|,
name|CharacterMap
operator|.
name|class
argument_list|)
expr_stmt|;
name|qns
operator|.
name|put
argument_list|(
operator|new
name|QName
argument_list|(
literal|"decimal-format"
argument_list|,
name|namespaceURI
argument_list|,
name|prefix
argument_list|)
argument_list|,
name|DecimalFormat
operator|.
name|class
argument_list|)
expr_stmt|;
name|qns
operator|.
name|put
argument_list|(
operator|new
name|QName
argument_list|(
literal|"function"
argument_list|,
name|namespaceURI
argument_list|,
name|prefix
argument_list|)
argument_list|,
name|Function
operator|.
name|class
argument_list|)
expr_stmt|;
name|qns
operator|.
name|put
argument_list|(
operator|new
name|QName
argument_list|(
literal|"import-schema"
argument_list|,
name|namespaceURI
argument_list|,
name|prefix
argument_list|)
argument_list|,
name|ImportSchema
operator|.
name|class
argument_list|)
expr_stmt|;
name|qns
operator|.
name|put
argument_list|(
operator|new
name|QName
argument_list|(
literal|"key"
argument_list|,
name|namespaceURI
argument_list|,
name|prefix
argument_list|)
argument_list|,
name|Key
operator|.
name|class
argument_list|)
expr_stmt|;
name|qns
operator|.
name|put
argument_list|(
operator|new
name|QName
argument_list|(
literal|"namespace-alias"
argument_list|,
name|namespaceURI
argument_list|,
name|prefix
argument_list|)
argument_list|,
name|NamespaceAlias
operator|.
name|class
argument_list|)
expr_stmt|;
name|qns
operator|.
name|put
argument_list|(
operator|new
name|QName
argument_list|(
literal|"output"
argument_list|,
name|namespaceURI
argument_list|,
name|prefix
argument_list|)
argument_list|,
name|Output
operator|.
name|class
argument_list|)
expr_stmt|;
name|qns
operator|.
name|put
argument_list|(
operator|new
name|QName
argument_list|(
literal|"param"
argument_list|,
name|namespaceURI
argument_list|,
name|prefix
argument_list|)
argument_list|,
name|Param
operator|.
name|class
argument_list|)
expr_stmt|;
name|qns
operator|.
name|put
argument_list|(
operator|new
name|QName
argument_list|(
literal|"preserve-space"
argument_list|,
name|namespaceURI
argument_list|,
name|prefix
argument_list|)
argument_list|,
name|PreserveSpace
operator|.
name|class
argument_list|)
expr_stmt|;
name|qns
operator|.
name|put
argument_list|(
operator|new
name|QName
argument_list|(
literal|"strip-space"
argument_list|,
name|namespaceURI
argument_list|,
name|prefix
argument_list|)
argument_list|,
name|StripSpace
operator|.
name|class
argument_list|)
expr_stmt|;
name|qns
operator|.
name|put
argument_list|(
operator|new
name|QName
argument_list|(
literal|"variable"
argument_list|,
name|namespaceURI
argument_list|,
name|prefix
argument_list|)
argument_list|,
name|Variable
operator|.
name|class
argument_list|)
expr_stmt|;
name|qns
operator|.
name|put
argument_list|(
operator|new
name|QName
argument_list|(
literal|"attribute"
argument_list|,
name|namespaceURI
argument_list|,
name|prefix
argument_list|)
argument_list|,
name|Attribute
operator|.
name|class
argument_list|)
expr_stmt|;
name|qns
operator|.
name|put
argument_list|(
operator|new
name|QName
argument_list|(
literal|"copy"
argument_list|,
name|namespaceURI
argument_list|,
name|prefix
argument_list|)
argument_list|,
name|Copy
operator|.
name|class
argument_list|)
expr_stmt|;
name|qns
operator|.
name|put
argument_list|(
operator|new
name|QName
argument_list|(
literal|"element"
argument_list|,
name|namespaceURI
argument_list|,
name|prefix
argument_list|)
argument_list|,
name|org
operator|.
name|exist
operator|.
name|xslt
operator|.
name|expression
operator|.
name|Element
operator|.
name|class
argument_list|)
expr_stmt|;
name|qns
operator|.
name|put
argument_list|(
operator|new
name|QName
argument_list|(
literal|"document"
argument_list|,
name|namespaceURI
argument_list|,
name|prefix
argument_list|)
argument_list|,
name|Document
operator|.
name|class
argument_list|)
expr_stmt|;
name|qns
operator|.
name|put
argument_list|(
operator|new
name|QName
argument_list|(
literal|"result-document"
argument_list|,
name|namespaceURI
argument_list|,
name|prefix
argument_list|)
argument_list|,
name|ResultDocument
operator|.
name|class
argument_list|)
expr_stmt|;
name|qns
operator|.
name|put
argument_list|(
operator|new
name|QName
argument_list|(
literal|"comment"
argument_list|,
name|namespaceURI
argument_list|,
name|prefix
argument_list|)
argument_list|,
name|Comment
operator|.
name|class
argument_list|)
expr_stmt|;
name|qns
operator|.
name|put
argument_list|(
operator|new
name|QName
argument_list|(
literal|"text"
argument_list|,
name|namespaceURI
argument_list|,
name|prefix
argument_list|)
argument_list|,
name|Text
operator|.
name|class
argument_list|)
expr_stmt|;
name|qns
operator|.
name|put
argument_list|(
operator|new
name|QName
argument_list|(
literal|"message"
argument_list|,
name|namespaceURI
argument_list|,
name|prefix
argument_list|)
argument_list|,
name|Message
operator|.
name|class
argument_list|)
expr_stmt|;
name|qns
operator|.
name|put
argument_list|(
operator|new
name|QName
argument_list|(
literal|"analyze-string"
argument_list|,
name|namespaceURI
argument_list|,
name|prefix
argument_list|)
argument_list|,
name|AnalyzeString
operator|.
name|class
argument_list|)
expr_stmt|;
name|qns
operator|.
name|put
argument_list|(
operator|new
name|QName
argument_list|(
literal|"apply-imports"
argument_list|,
name|namespaceURI
argument_list|,
name|prefix
argument_list|)
argument_list|,
name|ApplyImports
operator|.
name|class
argument_list|)
expr_stmt|;
name|qns
operator|.
name|put
argument_list|(
operator|new
name|QName
argument_list|(
literal|"apply-templates"
argument_list|,
name|namespaceURI
argument_list|,
name|prefix
argument_list|)
argument_list|,
name|ApplyTemplates
operator|.
name|class
argument_list|)
expr_stmt|;
name|qns
operator|.
name|put
argument_list|(
operator|new
name|QName
argument_list|(
literal|"call-template"
argument_list|,
name|namespaceURI
argument_list|,
name|prefix
argument_list|)
argument_list|,
name|CallTemplate
operator|.
name|class
argument_list|)
expr_stmt|;
name|qns
operator|.
name|put
argument_list|(
operator|new
name|QName
argument_list|(
literal|"choose"
argument_list|,
name|namespaceURI
argument_list|,
name|prefix
argument_list|)
argument_list|,
name|Choose
operator|.
name|class
argument_list|)
expr_stmt|;
name|qns
operator|.
name|put
argument_list|(
operator|new
name|QName
argument_list|(
literal|"fallback"
argument_list|,
name|namespaceURI
argument_list|,
name|prefix
argument_list|)
argument_list|,
name|Fallback
operator|.
name|class
argument_list|)
expr_stmt|;
name|qns
operator|.
name|put
argument_list|(
operator|new
name|QName
argument_list|(
literal|"for-each"
argument_list|,
name|namespaceURI
argument_list|,
name|prefix
argument_list|)
argument_list|,
name|ForEach
operator|.
name|class
argument_list|)
expr_stmt|;
name|qns
operator|.
name|put
argument_list|(
operator|new
name|QName
argument_list|(
literal|"for-each-group"
argument_list|,
name|namespaceURI
argument_list|,
name|prefix
argument_list|)
argument_list|,
name|ForEachGroup
operator|.
name|class
argument_list|)
expr_stmt|;
name|qns
operator|.
name|put
argument_list|(
operator|new
name|QName
argument_list|(
literal|"if"
argument_list|,
name|namespaceURI
argument_list|,
name|prefix
argument_list|)
argument_list|,
name|If
operator|.
name|class
argument_list|)
expr_stmt|;
name|qns
operator|.
name|put
argument_list|(
operator|new
name|QName
argument_list|(
literal|"matching-substring"
argument_list|,
name|namespaceURI
argument_list|,
name|prefix
argument_list|)
argument_list|,
name|MatchingSubstring
operator|.
name|class
argument_list|)
expr_stmt|;
name|qns
operator|.
name|put
argument_list|(
operator|new
name|QName
argument_list|(
literal|"next-match"
argument_list|,
name|namespaceURI
argument_list|,
name|prefix
argument_list|)
argument_list|,
name|NextMatch
operator|.
name|class
argument_list|)
expr_stmt|;
name|qns
operator|.
name|put
argument_list|(
operator|new
name|QName
argument_list|(
literal|"non-matching-substring"
argument_list|,
name|namespaceURI
argument_list|,
name|prefix
argument_list|)
argument_list|,
name|NonMatchingSubstring
operator|.
name|class
argument_list|)
expr_stmt|;
name|qns
operator|.
name|put
argument_list|(
operator|new
name|QName
argument_list|(
literal|"otherwise"
argument_list|,
name|namespaceURI
argument_list|,
name|prefix
argument_list|)
argument_list|,
name|Otherwise
operator|.
name|class
argument_list|)
expr_stmt|;
name|qns
operator|.
name|put
argument_list|(
operator|new
name|QName
argument_list|(
literal|"perform-sort"
argument_list|,
name|namespaceURI
argument_list|,
name|prefix
argument_list|)
argument_list|,
name|PerformSort
operator|.
name|class
argument_list|)
expr_stmt|;
name|qns
operator|.
name|put
argument_list|(
operator|new
name|QName
argument_list|(
literal|"sequence"
argument_list|,
name|namespaceURI
argument_list|,
name|prefix
argument_list|)
argument_list|,
name|SequenceConstructor
operator|.
name|class
argument_list|)
expr_stmt|;
name|qns
operator|.
name|put
argument_list|(
operator|new
name|QName
argument_list|(
literal|"when"
argument_list|,
name|namespaceURI
argument_list|,
name|prefix
argument_list|)
argument_list|,
name|When
operator|.
name|class
argument_list|)
expr_stmt|;
name|qns
operator|.
name|put
argument_list|(
operator|new
name|QName
argument_list|(
literal|"copy-of"
argument_list|,
name|namespaceURI
argument_list|,
name|prefix
argument_list|)
argument_list|,
name|CopyOf
operator|.
name|class
argument_list|)
expr_stmt|;
name|qns
operator|.
name|put
argument_list|(
operator|new
name|QName
argument_list|(
literal|"namespace"
argument_list|,
name|namespaceURI
argument_list|,
name|prefix
argument_list|)
argument_list|,
name|Namespace
operator|.
name|class
argument_list|)
expr_stmt|;
name|qns
operator|.
name|put
argument_list|(
operator|new
name|QName
argument_list|(
literal|"number"
argument_list|,
name|namespaceURI
argument_list|,
name|prefix
argument_list|)
argument_list|,
name|org
operator|.
name|exist
operator|.
name|xslt
operator|.
name|expression
operator|.
name|Number
operator|.
name|class
argument_list|)
expr_stmt|;
name|qns
operator|.
name|put
argument_list|(
operator|new
name|QName
argument_list|(
literal|"output-character"
argument_list|,
name|namespaceURI
argument_list|,
name|prefix
argument_list|)
argument_list|,
name|OutputCharacter
operator|.
name|class
argument_list|)
expr_stmt|;
name|qns
operator|.
name|put
argument_list|(
operator|new
name|QName
argument_list|(
literal|"processing-instruction"
argument_list|,
name|namespaceURI
argument_list|,
name|prefix
argument_list|)
argument_list|,
name|ProcessingInstruction
operator|.
name|class
argument_list|)
expr_stmt|;
name|qns
operator|.
name|put
argument_list|(
operator|new
name|QName
argument_list|(
literal|"sort"
argument_list|,
name|namespaceURI
argument_list|,
name|prefix
argument_list|)
argument_list|,
name|Sort
operator|.
name|class
argument_list|)
expr_stmt|;
name|qns
operator|.
name|put
argument_list|(
operator|new
name|QName
argument_list|(
literal|"with-param"
argument_list|,
name|namespaceURI
argument_list|,
name|prefix
argument_list|)
argument_list|,
name|WithParam
operator|.
name|class
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

