begin_unit|revision:1.0.0;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  *  eXist Open Source Native XML Database  *  Copyright (C) 2008-2009 The eXist Project  *  http://exist-db.org  *    *  This program is free software; you can redistribute it and/or  *  modify it under the terms of the GNU Lesser General Public License  *  as published by the Free Software Foundation; either version 2  *  of the License, or (at your option) any later version.  *    *  This program is distributed in the hope that it will be useful,  *  but WITHOUT ANY WARRANTY; without even the implied warranty of  *  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the  *  GNU Lesser General Public License for more details.  *    *  You should have received a copy of the GNU Lesser General Public License  *  along with this program; if not, write to the Free Software  *  Foundation, Inc., 675 Mass Ave, Cambridge, MA 02139, USA.  *    *  $Id$  */
end_comment

begin_package
package|package
name|org
operator|.
name|exist
operator|.
name|xslt
operator|.
name|compiler
package|;
end_package

begin_import
import|import
name|java
operator|.
name|lang
operator|.
name|reflect
operator|.
name|Constructor
import|;
end_import

begin_import
import|import
name|java
operator|.
name|lang
operator|.
name|reflect
operator|.
name|InvocationTargetException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|numbering
operator|.
name|NodeId
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|xquery
operator|.
name|AttributeConstructor
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|xquery
operator|.
name|CDATAConstructor
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|xquery
operator|.
name|CommentConstructor
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|xquery
operator|.
name|ElementConstructor
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|xquery
operator|.
name|Expression
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|xquery
operator|.
name|NodeConstructor
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|xquery
operator|.
name|NodeTest
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|xquery
operator|.
name|PathExpr
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|xquery
operator|.
name|TextConstructor
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|xquery
operator|.
name|XPathException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|xquery
operator|.
name|XQueryContext
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|dom
operator|.
name|NodeListImpl
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|dom
operator|.
name|QName
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|dom
operator|.
name|DocumentAtExist
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|dom
operator|.
name|ElementAtExist
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|dom
operator|.
name|NodeAtExist
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|xslt
operator|.
name|XSLContext
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|xslt
operator|.
name|XSLStylesheet
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|xslt
operator|.
name|expression
operator|.
name|XSLExpression
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|xslt
operator|.
name|expression
operator|.
name|XSLPathExpr
import|;
end_import

begin_import
import|import
name|org
operator|.
name|w3c
operator|.
name|dom
operator|.
name|Attr
import|;
end_import

begin_import
import|import
name|org
operator|.
name|w3c
operator|.
name|dom
operator|.
name|DOMException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|w3c
operator|.
name|dom
operator|.
name|Document
import|;
end_import

begin_import
import|import
name|org
operator|.
name|w3c
operator|.
name|dom
operator|.
name|NamedNodeMap
import|;
end_import

begin_import
import|import
name|org
operator|.
name|w3c
operator|.
name|dom
operator|.
name|Node
import|;
end_import

begin_import
import|import
name|org
operator|.
name|w3c
operator|.
name|dom
operator|.
name|NodeList
import|;
end_import

begin_import
import|import
name|org
operator|.
name|w3c
operator|.
name|dom
operator|.
name|TypeInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|w3c
operator|.
name|dom
operator|.
name|UserDataHandler
import|;
end_import

begin_comment
comment|/**  * @author<a href="mailto:shabanovd@gmail.com">Dmitriy Shabanov</a>  *  */
end_comment

begin_class
specifier|public
class|class
name|XSLElement
implements|implements
name|ElementAtExist
implements|,
name|Names
block|{
specifier|protected
name|XSLPathExpr
name|expr
init|=
literal|null
decl_stmt|;
specifier|protected
name|ElementAtExist
name|element
decl_stmt|;
specifier|public
name|XSLElement
parameter_list|(
name|ElementAtExist
name|element
parameter_list|)
block|{
name|this
operator|.
name|element
operator|=
name|element
expr_stmt|;
block|}
specifier|protected
name|XQueryContext
name|getContext
parameter_list|()
block|{
return|return
operator|(
name|XQueryContext
operator|)
name|getDocument
argument_list|()
operator|.
name|getContext
argument_list|()
return|;
block|}
annotation|@
name|SuppressWarnings
argument_list|(
literal|"unchecked"
argument_list|)
specifier|protected
name|XSLPathExpr
name|getExpressionInstance
parameter_list|()
throws|throws
name|XPathException
block|{
if|if
condition|(
name|expr
operator|!=
literal|null
condition|)
return|return
name|expr
return|;
if|if
condition|(
name|getQName
argument_list|()
operator|==
literal|null
condition|)
comment|//TODO: remove
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
name|getQName
argument_list|()
argument_list|)
expr_stmt|;
name|Class
argument_list|<
name|XSLPathExpr
argument_list|>
name|clazz
init|=
name|Factory
operator|.
name|qns
operator|.
name|get
argument_list|(
name|getQName
argument_list|()
argument_list|)
decl_stmt|;
try|try
block|{
name|Constructor
argument_list|<
name|XSLPathExpr
argument_list|>
name|constructor
init|=
name|clazz
operator|.
name|getConstructor
argument_list|(
name|XSLContext
operator|.
name|class
argument_list|)
decl_stmt|;
name|expr
operator|=
name|constructor
operator|.
name|newInstance
argument_list|(
name|getContext
argument_list|()
argument_list|)
expr_stmt|;
return|return
name|expr
return|;
block|}
catch|catch
parameter_list|(
name|SecurityException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|XPathException
argument_list|(
literal|"SecurityException"
argument_list|,
name|e
argument_list|)
throw|;
block|}
catch|catch
parameter_list|(
name|NoSuchMethodException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|XPathException
argument_list|(
literal|"NoSuchMethodException"
argument_list|,
name|e
argument_list|)
throw|;
block|}
catch|catch
parameter_list|(
name|IllegalArgumentException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|XPathException
argument_list|(
literal|"IllegalArgumentException"
argument_list|,
name|e
argument_list|)
throw|;
block|}
catch|catch
parameter_list|(
name|InstantiationException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|XPathException
argument_list|(
literal|"InstantiationException"
argument_list|,
name|e
argument_list|)
throw|;
block|}
catch|catch
parameter_list|(
name|IllegalAccessException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|XPathException
argument_list|(
literal|"IllegalAccessException"
argument_list|,
name|e
argument_list|)
throw|;
block|}
catch|catch
parameter_list|(
name|InvocationTargetException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|XPathException
argument_list|(
literal|"InvocationTargetException"
argument_list|,
name|e
argument_list|)
throw|;
block|}
block|}
specifier|public
name|Expression
name|compile
parameter_list|()
throws|throws
name|XPathException
block|{
name|XSLPathExpr
name|exec
decl_stmt|;
if|if
condition|(
operator|(
operator|!
name|isXSLElement
argument_list|(
name|this
argument_list|)
operator|)
operator|&&
operator|(
name|isParentNode
argument_list|()
operator|)
condition|)
block|{
comment|//UNDERSTAND: put to XSLStylesheet?
name|expr
operator|=
operator|new
name|XSLStylesheet
argument_list|(
operator|(
name|XSLContext
operator|)
name|getContext
argument_list|()
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|NodeConstructor
name|constructer
init|=
name|getNodeConstructor
argument_list|(
name|this
argument_list|,
name|expr
argument_list|)
decl_stmt|;
if|if
condition|(
name|constructer
operator|!=
literal|null
condition|)
block|{
name|expr
operator|.
name|add
argument_list|(
name|constructer
argument_list|)
expr_stmt|;
name|compileNode
argument_list|(
name|expr
argument_list|,
name|this
argument_list|)
expr_stmt|;
block|}
name|exec
operator|=
name|expr
expr_stmt|;
block|}
else|else
block|{
name|preprocess
argument_list|()
expr_stmt|;
name|exec
operator|=
name|getExpressionInstance
argument_list|()
expr_stmt|;
name|compileNode
argument_list|(
operator|(
name|PathExpr
operator|)
name|exec
argument_list|,
name|this
argument_list|)
expr_stmt|;
block|}
name|exec
operator|.
name|validate
argument_list|()
expr_stmt|;
comment|//UNDERSTAND: at compile time??? analyze ???
return|return
name|exec
return|;
block|}
specifier|private
name|NodeConstructor
name|getNodeConstructor
parameter_list|(
name|NodeAtExist
name|node
parameter_list|,
name|PathExpr
name|content
parameter_list|)
throws|throws
name|XPathException
block|{
name|NodeConstructor
name|constructer
init|=
literal|null
decl_stmt|;
if|if
condition|(
name|node
operator|.
name|getNodeType
argument_list|()
operator|==
name|Node
operator|.
name|ELEMENT_NODE
condition|)
block|{
name|ElementConstructor
name|elementConstructer
init|=
operator|new
name|ElementConstructor
argument_list|(
name|getContext
argument_list|()
argument_list|,
name|node
operator|.
name|getNodeName
argument_list|()
argument_list|)
decl_stmt|;
name|content
operator|.
name|add
argument_list|(
name|elementConstructer
argument_list|)
expr_stmt|;
name|PathExpr
name|content_sub
init|=
operator|new
name|PathExpr
argument_list|(
name|getContext
argument_list|()
argument_list|)
decl_stmt|;
name|elementConstructer
operator|.
name|setContent
argument_list|(
name|content_sub
argument_list|)
expr_stmt|;
name|NamedNodeMap
name|attrs
init|=
name|node
operator|.
name|getAttributes
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|index
init|=
literal|0
init|;
name|index
operator|<
name|attrs
operator|.
name|getLength
argument_list|()
condition|;
name|index
operator|++
control|)
block|{
name|Node
name|attr
init|=
name|attrs
operator|.
name|item
argument_list|(
name|index
argument_list|)
decl_stmt|;
if|if
condition|(
operator|(
literal|"xmlns:"
operator|.
name|equals
argument_list|(
name|attr
operator|.
name|getNodeName
argument_list|()
argument_list|)
operator|)
operator|&&
operator|(
literal|""
operator|.
name|equals
argument_list|(
name|attr
operator|.
name|getLocalName
argument_list|()
argument_list|)
operator|)
condition|)
block|{
comment|//getNodeValue
continue|continue;
comment|//UNDERSTAND: is it required, to have empty namespace
block|}
if|if
condition|(
name|isParentNode
argument_list|()
condition|)
block|{
if|if
condition|(
literal|"xmlns:xsl"
operator|.
name|equals
argument_list|(
name|attr
operator|.
name|getNodeName
argument_list|()
argument_list|)
condition|)
block|{
continue|continue;
block|}
if|else if
condition|(
name|attr
operator|.
name|getNodeName
argument_list|()
operator|.
name|startsWith
argument_list|(
literal|"xsl"
argument_list|)
condition|)
block|{
continue|continue;
block|}
block|}
name|AttributeConstructor
name|attributeConstructer
init|=
operator|new
name|AttributeConstructor
argument_list|(
name|getContext
argument_list|()
argument_list|,
name|attr
operator|.
name|getNodeName
argument_list|()
argument_list|)
decl_stmt|;
comment|//XXX: rethinks
name|String
name|value
init|=
name|attr
operator|.
name|getNodeValue
argument_list|()
decl_stmt|;
if|if
condition|(
name|value
operator|.
name|contains
argument_list|(
literal|"{"
argument_list|)
condition|)
block|{
name|value
operator|=
name|value
operator|.
name|replace
argument_list|(
literal|"{"
argument_list|,
literal|""
argument_list|)
expr_stmt|;
name|value
operator|=
name|value
operator|.
name|replace
argument_list|(
literal|"}"
argument_list|,
literal|""
argument_list|)
expr_stmt|;
name|PathExpr
name|expr
init|=
operator|new
name|PathExpr
argument_list|(
name|getContext
argument_list|()
argument_list|)
decl_stmt|;
name|org
operator|.
name|exist
operator|.
name|xslt
operator|.
name|pattern
operator|.
name|Pattern
operator|.
name|parse
argument_list|(
name|getContext
argument_list|()
argument_list|,
name|value
argument_list|,
name|expr
argument_list|)
expr_stmt|;
name|attributeConstructer
operator|.
name|addEnclosedExpr
argument_list|(
name|expr
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|attributeConstructer
operator|.
name|addValue
argument_list|(
name|value
argument_list|)
expr_stmt|;
block|}
name|elementConstructer
operator|.
name|addAttribute
argument_list|(
name|attributeConstructer
argument_list|)
expr_stmt|;
block|}
name|compileNode
argument_list|(
name|content_sub
argument_list|,
name|node
argument_list|)
expr_stmt|;
block|}
if|else if
condition|(
name|node
operator|.
name|getNodeType
argument_list|()
operator|==
name|Node
operator|.
name|COMMENT_NODE
condition|)
block|{
name|constructer
operator|=
operator|new
name|CommentConstructor
argument_list|(
name|getContext
argument_list|()
argument_list|,
name|node
operator|.
name|getNodeName
argument_list|()
argument_list|)
expr_stmt|;
block|}
if|else if
condition|(
name|node
operator|.
name|getNodeType
argument_list|()
operator|==
name|Node
operator|.
name|TEXT_NODE
condition|)
block|{
if|if
condition|(
name|content
operator|instanceof
name|XSLPathExpr
condition|)
block|{
name|XSLPathExpr
name|xslExpr
init|=
operator|(
name|XSLPathExpr
operator|)
name|content
decl_stmt|;
name|xslExpr
operator|.
name|addText
argument_list|(
name|node
operator|.
name|getNodeValue
argument_list|()
argument_list|)
expr_stmt|;
block|}
else|else
name|constructer
operator|=
operator|new
name|TextConstructor
argument_list|(
name|getContext
argument_list|()
argument_list|,
name|node
operator|.
name|getNodeValue
argument_list|()
argument_list|)
expr_stmt|;
block|}
if|else if
condition|(
name|node
operator|.
name|getNodeType
argument_list|()
operator|==
name|Node
operator|.
name|CDATA_SECTION_NODE
condition|)
block|{
name|constructer
operator|=
operator|new
name|CDATAConstructor
argument_list|(
name|getContext
argument_list|()
argument_list|,
name|node
operator|.
name|getNodeName
argument_list|()
argument_list|)
expr_stmt|;
block|}
else|else
block|{
throw|throw
operator|new
name|XPathException
argument_list|(
literal|"not supported node type: "
operator|+
name|node
operator|.
name|getNodeType
argument_list|()
argument_list|)
throw|;
comment|//	    	ATTRIBUTE_NODE            = 2;
comment|//	    	CDATA_SECTION_NODE        = 4;
comment|//	    	ENTITY_REFERENCE_NODE     = 5;
comment|//	    	ENTITY_NODE               = 6;
comment|//	    	PROCESSING_INSTRUCTION_NODE = 7;
comment|//	    	DOCUMENT_NODE             = 9;
comment|//	    	DOCUMENT_TYPE_NODE        = 10;
comment|//	    	DOCUMENT_FRAGMENT_NODE    = 11;
comment|//	    	NOTATION_NODE             = 12;
block|}
return|return
name|constructer
return|;
block|}
specifier|public
name|void
name|compileNode
parameter_list|(
name|PathExpr
name|content
parameter_list|,
name|Node
name|node
parameter_list|)
throws|throws
name|XPathException
block|{
comment|//namespaces
if|if
condition|(
name|node
operator|instanceof
name|ElementAtExist
condition|)
block|{
name|ElementAtExist
name|elementAtExist
init|=
operator|(
name|ElementAtExist
operator|)
name|node
decl_stmt|;
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|namespaceMap
init|=
name|elementAtExist
operator|.
name|getNamespaceMap
argument_list|()
decl_stmt|;
for|for
control|(
name|String
name|name
range|:
name|namespaceMap
operator|.
name|keySet
argument_list|()
control|)
block|{
comment|//getContext().declareInScopeNamespace(name, namespaceMap.get(name));
name|getContext
argument_list|()
operator|.
name|declareNamespace
argument_list|(
name|name
argument_list|,
name|namespaceMap
operator|.
name|get
argument_list|(
name|name
argument_list|)
argument_list|)
expr_stmt|;
comment|//TODO: rewrite, changes at xquery.parser. it use static
block|}
block|}
if|if
condition|(
operator|!
name|node
operator|.
name|hasChildNodes
argument_list|()
condition|)
return|return;
name|NodeConstructor
name|constructer
init|=
literal|null
decl_stmt|;
name|NodeList
name|children
init|=
name|node
operator|.
name|getChildNodes
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|children
operator|.
name|getLength
argument_list|()
condition|;
name|i
operator|++
control|)
block|{
name|constructer
operator|=
literal|null
expr_stmt|;
name|NodeAtExist
name|child
init|=
operator|(
name|NodeAtExist
operator|)
name|children
operator|.
name|item
argument_list|(
name|i
argument_list|)
decl_stmt|;
if|if
condition|(
name|isXSLElement
argument_list|(
name|child
argument_list|)
condition|)
block|{
name|XSLElement
name|xslElement
init|=
operator|(
name|XSLElement
operator|)
name|child
decl_stmt|;
name|content
operator|.
name|add
argument_list|(
name|xslElement
operator|.
name|compile
argument_list|()
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|constructer
operator|=
name|getNodeConstructor
argument_list|(
name|child
argument_list|,
name|content
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|constructer
operator|!=
literal|null
condition|)
block|{
name|content
operator|.
name|add
argument_list|(
name|constructer
argument_list|)
expr_stmt|;
name|compileNode
argument_list|(
name|content
argument_list|,
name|child
argument_list|)
expr_stmt|;
block|}
block|}
block|}
specifier|protected
name|void
name|prepareAttributes
parameter_list|()
throws|throws
name|XPathException
block|{
name|XSLExpression
name|exec
init|=
name|getExpressionInstance
argument_list|()
decl_stmt|;
name|NamedNodeMap
name|attrs
init|=
name|getAttributes
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|attrs
operator|.
name|getLength
argument_list|()
condition|;
name|i
operator|++
control|)
name|exec
operator|.
name|prepareAttribute
argument_list|(
operator|(
name|Attr
operator|)
name|attrs
operator|.
name|item
argument_list|(
name|i
argument_list|)
argument_list|)
expr_stmt|;
block|}
specifier|protected
name|void
name|preprocess
parameter_list|()
throws|throws
name|XPathException
block|{
comment|//		XSLPathExpr exec = getExpressionInstance();
name|prepareAttributes
argument_list|()
expr_stmt|;
name|preprocessNode
argument_list|(
name|this
argument_list|)
expr_stmt|;
block|}
specifier|protected
name|void
name|preprocessNode
parameter_list|(
name|Node
name|node
parameter_list|)
throws|throws
name|XPathException
block|{
if|if
condition|(
operator|!
name|node
operator|.
name|hasChildNodes
argument_list|()
condition|)
return|return;
name|NodeList
name|children
init|=
name|node
operator|.
name|getChildNodes
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|children
operator|.
name|getLength
argument_list|()
condition|;
name|i
operator|++
control|)
block|{
name|NodeAtExist
name|child
init|=
operator|(
name|NodeAtExist
operator|)
name|children
operator|.
name|item
argument_list|(
name|i
argument_list|)
decl_stmt|;
if|if
condition|(
name|isXSLElement
argument_list|(
name|child
argument_list|)
condition|)
block|{
name|XSLElement
name|xslElement
init|=
operator|(
name|XSLElement
operator|)
name|child
decl_stmt|;
name|xslElement
operator|.
name|preprocess
argument_list|()
expr_stmt|;
block|}
else|else
block|{
name|preprocessNode
argument_list|(
name|child
argument_list|)
expr_stmt|;
block|}
block|}
block|}
specifier|private
name|boolean
name|isXSLElement
parameter_list|(
name|NodeAtExist
name|child
parameter_list|)
block|{
return|return
name|Factory
operator|.
name|qns
operator|.
name|containsKey
argument_list|(
name|child
operator|.
name|getQName
argument_list|()
argument_list|)
return|;
block|}
comment|/* (non-Javadoc) 	 * @see org.exist.dom.i.NodeAtExist#getDocument() 	 */
specifier|public
name|DocumentAtExist
name|getDocument
parameter_list|()
block|{
return|return
name|element
operator|.
name|getDocument
argument_list|()
return|;
block|}
comment|/* (non-Javadoc) 	 * @see org.w3c.dom.Node#appendChild(org.w3c.dom.Node) 	 */
specifier|public
name|Node
name|appendChild
parameter_list|(
name|Node
name|newChild
parameter_list|)
throws|throws
name|DOMException
block|{
return|return
name|element
operator|.
name|appendChild
argument_list|(
name|newChild
argument_list|)
return|;
block|}
comment|/* (non-Javadoc) 	 * @see org.w3c.dom.Node#cloneNode(boolean) 	 */
specifier|public
name|Node
name|cloneNode
parameter_list|(
name|boolean
name|deep
parameter_list|)
block|{
return|return
name|element
operator|.
name|cloneNode
argument_list|(
name|deep
argument_list|)
return|;
block|}
comment|/* (non-Javadoc) 	 * @see org.w3c.dom.Node#compareDocumentPosition(org.w3c.dom.Node) 	 */
specifier|public
name|short
name|compareDocumentPosition
parameter_list|(
name|Node
name|other
parameter_list|)
throws|throws
name|DOMException
block|{
return|return
name|element
operator|.
name|compareDocumentPosition
argument_list|(
name|other
argument_list|)
return|;
block|}
comment|/* (non-Javadoc) 	 * @see org.w3c.dom.Node#getAttributes() 	 */
specifier|public
name|NamedNodeMap
name|getAttributes
parameter_list|()
block|{
return|return
name|element
operator|.
name|getAttributes
argument_list|()
return|;
block|}
comment|/* (non-Javadoc) 	 * @see org.w3c.dom.Node#getBaseURI() 	 */
specifier|public
name|String
name|getBaseURI
parameter_list|()
block|{
return|return
name|element
operator|.
name|getBaseURI
argument_list|()
return|;
block|}
name|NodeListImpl
name|nl
decl_stmt|;
comment|//TODO: handle changes some how
comment|/* (non-Javadoc) 	 * @see org.w3c.dom.Node#getChildNodes() 	 */
specifier|public
name|NodeList
name|getChildNodes
parameter_list|()
block|{
if|if
condition|(
name|nl
operator|!=
literal|null
condition|)
return|return
name|nl
return|;
name|DocumentAtExist
name|document
init|=
name|getDocument
argument_list|()
decl_stmt|;
name|nl
operator|=
operator|new
name|NodeListImpl
argument_list|()
expr_stmt|;
name|int
name|nextNode
init|=
name|document
operator|.
name|getFirstChildFor
argument_list|(
name|getNodeNumber
argument_list|()
argument_list|)
decl_stmt|;
while|while
condition|(
name|nextNode
operator|>
name|getNodeNumber
argument_list|()
condition|)
block|{
name|NodeAtExist
name|n
init|=
name|document
operator|.
name|getNode
argument_list|(
name|nextNode
argument_list|)
decl_stmt|;
if|if
condition|(
name|n
operator|instanceof
name|ElementAtExist
condition|)
block|{
name|n
operator|=
operator|new
name|XSLElement
argument_list|(
operator|(
name|ElementAtExist
operator|)
name|n
argument_list|)
expr_stmt|;
block|}
name|nl
operator|.
name|add
argument_list|(
name|n
argument_list|)
expr_stmt|;
name|nextNode
operator|=
name|document
operator|.
name|getNextNodeNumber
argument_list|(
name|nextNode
argument_list|)
expr_stmt|;
block|}
return|return
name|nl
return|;
block|}
comment|/* (non-Javadoc) 	 * @see org.w3c.dom.Node#getFeature(java.lang.String, java.lang.String) 	 */
specifier|public
name|Object
name|getFeature
parameter_list|(
name|String
name|feature
parameter_list|,
name|String
name|version
parameter_list|)
block|{
return|return
name|element
operator|.
name|getFeature
argument_list|(
name|feature
argument_list|,
name|version
argument_list|)
return|;
block|}
comment|/* (non-Javadoc) 	 * @see org.w3c.dom.Node#getFirstChild() 	 */
specifier|public
name|Node
name|getFirstChild
parameter_list|()
block|{
return|return
name|element
operator|.
name|getFirstChild
argument_list|()
return|;
block|}
comment|/* (non-Javadoc) 	 * @see org.w3c.dom.Node#getLastChild() 	 */
specifier|public
name|Node
name|getLastChild
parameter_list|()
block|{
return|return
name|element
operator|.
name|getLastChild
argument_list|()
return|;
block|}
comment|/* (non-Javadoc) 	 * @see org.w3c.dom.Node#getLocalName() 	 */
specifier|public
name|String
name|getLocalName
parameter_list|()
block|{
return|return
name|element
operator|.
name|getLocalName
argument_list|()
return|;
block|}
comment|/* (non-Javadoc) 	 * @see org.w3c.dom.Node#getNamespaceURI() 	 */
specifier|public
name|String
name|getNamespaceURI
parameter_list|()
block|{
return|return
name|element
operator|.
name|getNamespaceURI
argument_list|()
return|;
block|}
comment|/* (non-Javadoc) 	 * @see org.w3c.dom.Node#getNextSibling() 	 */
specifier|public
name|Node
name|getNextSibling
parameter_list|()
block|{
return|return
name|element
operator|.
name|getNextSibling
argument_list|()
return|;
block|}
comment|/* (non-Javadoc) 	 * @see org.w3c.dom.Node#getNodeName() 	 */
specifier|public
name|String
name|getNodeName
parameter_list|()
block|{
return|return
name|element
operator|.
name|getNodeName
argument_list|()
return|;
block|}
comment|/* (non-Javadoc) 	 * @see org.w3c.dom.Node#getNodeType() 	 */
specifier|public
name|short
name|getNodeType
parameter_list|()
block|{
return|return
name|element
operator|.
name|getNodeType
argument_list|()
return|;
block|}
comment|/* (non-Javadoc) 	 * @see org.w3c.dom.Node#getNodeValue() 	 */
specifier|public
name|String
name|getNodeValue
parameter_list|()
throws|throws
name|DOMException
block|{
return|return
name|element
operator|.
name|getNodeValue
argument_list|()
return|;
block|}
comment|/* (non-Javadoc) 	 * @see org.w3c.dom.Node#getOwnerDocument() 	 */
specifier|public
name|Document
name|getOwnerDocument
parameter_list|()
block|{
return|return
name|element
operator|.
name|getOwnerDocument
argument_list|()
return|;
block|}
comment|/* (non-Javadoc) 	 * @see org.w3c.dom.Node#getParentNode() 	 */
specifier|public
name|Node
name|getParentNode
parameter_list|()
block|{
return|return
name|element
operator|.
name|getParentNode
argument_list|()
return|;
block|}
specifier|public
name|boolean
name|isParentNode
parameter_list|()
block|{
return|return
operator|(
name|element
operator|.
name|getNodeId
argument_list|()
operator|.
name|getTreeLevel
argument_list|()
operator|==
literal|1
operator|)
return|;
block|}
comment|/* (non-Javadoc) 	 * @see org.w3c.dom.Node#getPrefix() 	 */
specifier|public
name|String
name|getPrefix
parameter_list|()
block|{
return|return
name|element
operator|.
name|getPrefix
argument_list|()
return|;
block|}
comment|/* (non-Javadoc) 	 * @see org.w3c.dom.Node#getPreviousSibling() 	 */
specifier|public
name|Node
name|getPreviousSibling
parameter_list|()
block|{
return|return
name|element
operator|.
name|getPreviousSibling
argument_list|()
return|;
block|}
comment|/* (non-Javadoc) 	 * @see org.w3c.dom.Node#getTextContent() 	 */
specifier|public
name|String
name|getTextContent
parameter_list|()
throws|throws
name|DOMException
block|{
return|return
name|element
operator|.
name|getTextContent
argument_list|()
return|;
block|}
comment|/* (non-Javadoc) 	 * @see org.w3c.dom.Node#getUserData(java.lang.String) 	 */
specifier|public
name|Object
name|getUserData
parameter_list|(
name|String
name|key
parameter_list|)
block|{
return|return
name|element
operator|.
name|getUserData
argument_list|(
name|key
argument_list|)
return|;
block|}
comment|/* (non-Javadoc) 	 * @see org.w3c.dom.Node#hasAttributes() 	 */
specifier|public
name|boolean
name|hasAttributes
parameter_list|()
block|{
return|return
name|element
operator|.
name|hasAttributes
argument_list|()
return|;
block|}
comment|/* (non-Javadoc) 	 * @see org.w3c.dom.Node#hasChildNodes() 	 */
specifier|public
name|boolean
name|hasChildNodes
parameter_list|()
block|{
return|return
name|element
operator|.
name|hasChildNodes
argument_list|()
return|;
block|}
comment|/* (non-Javadoc) 	 * @see org.w3c.dom.Node#insertBefore(org.w3c.dom.Node, org.w3c.dom.Node) 	 */
specifier|public
name|Node
name|insertBefore
parameter_list|(
name|Node
name|newChild
parameter_list|,
name|Node
name|refChild
parameter_list|)
throws|throws
name|DOMException
block|{
return|return
name|element
operator|.
name|insertBefore
argument_list|(
name|newChild
argument_list|,
name|refChild
argument_list|)
return|;
block|}
comment|/* (non-Javadoc) 	 * @see org.w3c.dom.Node#isDefaultNamespace(java.lang.String) 	 */
specifier|public
name|boolean
name|isDefaultNamespace
parameter_list|(
name|String
name|namespaceURI
parameter_list|)
block|{
return|return
name|element
operator|.
name|isDefaultNamespace
argument_list|(
name|namespaceURI
argument_list|)
return|;
block|}
comment|/* (non-Javadoc) 	 * @see org.w3c.dom.Node#isEqualNode(org.w3c.dom.Node) 	 */
specifier|public
name|boolean
name|isEqualNode
parameter_list|(
name|Node
name|arg
parameter_list|)
block|{
return|return
name|element
operator|.
name|isEqualNode
argument_list|(
name|arg
argument_list|)
return|;
block|}
comment|/* (non-Javadoc) 	 * @see org.w3c.dom.Node#isSameNode(org.w3c.dom.Node) 	 */
specifier|public
name|boolean
name|isSameNode
parameter_list|(
name|Node
name|other
parameter_list|)
block|{
return|return
name|element
operator|.
name|isSameNode
argument_list|(
name|other
argument_list|)
return|;
block|}
comment|/* (non-Javadoc) 	 * @see org.w3c.dom.Node#isSupported(java.lang.String, java.lang.String) 	 */
specifier|public
name|boolean
name|isSupported
parameter_list|(
name|String
name|feature
parameter_list|,
name|String
name|version
parameter_list|)
block|{
return|return
name|element
operator|.
name|isSupported
argument_list|(
name|feature
argument_list|,
name|version
argument_list|)
return|;
block|}
comment|/* (non-Javadoc) 	 * @see org.w3c.dom.Node#lookupNamespaceURI(java.lang.String) 	 */
specifier|public
name|String
name|lookupNamespaceURI
parameter_list|(
name|String
name|prefix
parameter_list|)
block|{
return|return
name|element
operator|.
name|lookupNamespaceURI
argument_list|(
name|prefix
argument_list|)
return|;
block|}
comment|/* (non-Javadoc) 	 * @see org.w3c.dom.Node#lookupPrefix(java.lang.String) 	 */
specifier|public
name|String
name|lookupPrefix
parameter_list|(
name|String
name|namespaceURI
parameter_list|)
block|{
return|return
name|element
operator|.
name|lookupPrefix
argument_list|(
name|namespaceURI
argument_list|)
return|;
block|}
comment|/* (non-Javadoc) 	 * @see org.w3c.dom.Node#normalize() 	 */
specifier|public
name|void
name|normalize
parameter_list|()
block|{
name|element
operator|.
name|normalize
argument_list|()
expr_stmt|;
block|}
comment|/* (non-Javadoc) 	 * @see org.w3c.dom.Node#removeChild(org.w3c.dom.Node) 	 */
specifier|public
name|Node
name|removeChild
parameter_list|(
name|Node
name|oldChild
parameter_list|)
throws|throws
name|DOMException
block|{
return|return
name|element
operator|.
name|removeChild
argument_list|(
name|oldChild
argument_list|)
return|;
block|}
comment|/* (non-Javadoc) 	 * @see org.w3c.dom.Node#replaceChild(org.w3c.dom.Node, org.w3c.dom.Node) 	 */
specifier|public
name|Node
name|replaceChild
parameter_list|(
name|Node
name|newChild
parameter_list|,
name|Node
name|oldChild
parameter_list|)
throws|throws
name|DOMException
block|{
return|return
name|element
operator|.
name|replaceChild
argument_list|(
name|newChild
argument_list|,
name|oldChild
argument_list|)
return|;
block|}
comment|/* (non-Javadoc) 	 * @see org.w3c.dom.Node#setNodeValue(java.lang.String) 	 */
specifier|public
name|void
name|setNodeValue
parameter_list|(
name|String
name|nodeValue
parameter_list|)
throws|throws
name|DOMException
block|{
name|element
operator|.
name|setNodeValue
argument_list|(
name|nodeValue
argument_list|)
expr_stmt|;
block|}
comment|/* (non-Javadoc) 	 * @see org.w3c.dom.Node#setPrefix(java.lang.String) 	 */
specifier|public
name|void
name|setPrefix
parameter_list|(
name|String
name|prefix
parameter_list|)
throws|throws
name|DOMException
block|{
name|element
operator|.
name|setPrefix
argument_list|(
name|prefix
argument_list|)
expr_stmt|;
block|}
comment|/* (non-Javadoc) 	 * @see org.w3c.dom.Node#setTextContent(java.lang.String) 	 */
specifier|public
name|void
name|setTextContent
parameter_list|(
name|String
name|textContent
parameter_list|)
throws|throws
name|DOMException
block|{
name|element
operator|.
name|setTextContent
argument_list|(
name|textContent
argument_list|)
expr_stmt|;
block|}
comment|/* (non-Javadoc) 	 * @see org.w3c.dom.Node#setUserData(java.lang.String, java.lang.Object, org.w3c.dom.UserDataHandler) 	 */
specifier|public
name|Object
name|setUserData
parameter_list|(
name|String
name|key
parameter_list|,
name|Object
name|data
parameter_list|,
name|UserDataHandler
name|handler
parameter_list|)
block|{
return|return
name|element
operator|.
name|setUserData
argument_list|(
name|key
argument_list|,
name|data
argument_list|,
name|handler
argument_list|)
return|;
block|}
comment|/* (non-Javadoc) 	 * @see org.w3c.dom.Element#getAttribute(java.lang.String) 	 */
specifier|public
name|String
name|getAttribute
parameter_list|(
name|String
name|name
parameter_list|)
block|{
return|return
name|element
operator|.
name|getAttribute
argument_list|(
name|name
argument_list|)
return|;
block|}
comment|/* (non-Javadoc) 	 * @see org.w3c.dom.Element#getAttributeNS(java.lang.String, java.lang.String) 	 */
specifier|public
name|String
name|getAttributeNS
parameter_list|(
name|String
name|namespaceURI
parameter_list|,
name|String
name|localName
parameter_list|)
throws|throws
name|DOMException
block|{
return|return
name|element
operator|.
name|getAttributeNS
argument_list|(
name|namespaceURI
argument_list|,
name|localName
argument_list|)
return|;
block|}
comment|/* (non-Javadoc) 	 * @see org.w3c.dom.Element#getAttributeNode(java.lang.String) 	 */
specifier|public
name|Attr
name|getAttributeNode
parameter_list|(
name|String
name|name
parameter_list|)
block|{
return|return
name|element
operator|.
name|getAttributeNode
argument_list|(
name|name
argument_list|)
return|;
block|}
comment|/* (non-Javadoc) 	 * @see org.w3c.dom.Element#getAttributeNodeNS(java.lang.String, java.lang.String) 	 */
specifier|public
name|Attr
name|getAttributeNodeNS
parameter_list|(
name|String
name|namespaceURI
parameter_list|,
name|String
name|localName
parameter_list|)
throws|throws
name|DOMException
block|{
return|return
name|element
operator|.
name|getAttributeNodeNS
argument_list|(
name|namespaceURI
argument_list|,
name|localName
argument_list|)
return|;
block|}
comment|/* (non-Javadoc) 	 * @see org.w3c.dom.Element#getElementsByTagName(java.lang.String) 	 */
specifier|public
name|NodeList
name|getElementsByTagName
parameter_list|(
name|String
name|name
parameter_list|)
block|{
return|return
name|element
operator|.
name|getElementsByTagName
argument_list|(
name|name
argument_list|)
return|;
block|}
comment|/* (non-Javadoc) 	 * @see org.w3c.dom.Element#getElementsByTagNameNS(java.lang.String, java.lang.String) 	 */
specifier|public
name|NodeList
name|getElementsByTagNameNS
parameter_list|(
name|String
name|namespaceURI
parameter_list|,
name|String
name|localName
parameter_list|)
throws|throws
name|DOMException
block|{
return|return
name|element
operator|.
name|getElementsByTagNameNS
argument_list|(
name|namespaceURI
argument_list|,
name|localName
argument_list|)
return|;
block|}
comment|/* (non-Javadoc) 	 * @see org.w3c.dom.Element#getSchemaTypeInfo() 	 */
specifier|public
name|TypeInfo
name|getSchemaTypeInfo
parameter_list|()
block|{
return|return
name|element
operator|.
name|getSchemaTypeInfo
argument_list|()
return|;
block|}
comment|/* (non-Javadoc) 	 * @see org.w3c.dom.Element#getTagName() 	 */
specifier|public
name|String
name|getTagName
parameter_list|()
block|{
return|return
name|element
operator|.
name|getTagName
argument_list|()
return|;
block|}
comment|/* (non-Javadoc) 	 * @see org.w3c.dom.Element#hasAttribute(java.lang.String) 	 */
specifier|public
name|boolean
name|hasAttribute
parameter_list|(
name|String
name|name
parameter_list|)
block|{
return|return
name|element
operator|.
name|hasAttribute
argument_list|(
name|name
argument_list|)
return|;
block|}
comment|/* (non-Javadoc) 	 * @see org.w3c.dom.Element#hasAttributeNS(java.lang.String, java.lang.String) 	 */
specifier|public
name|boolean
name|hasAttributeNS
parameter_list|(
name|String
name|namespaceURI
parameter_list|,
name|String
name|localName
parameter_list|)
throws|throws
name|DOMException
block|{
return|return
name|element
operator|.
name|hasAttributeNS
argument_list|(
name|namespaceURI
argument_list|,
name|localName
argument_list|)
return|;
block|}
comment|/* (non-Javadoc) 	 * @see org.w3c.dom.Element#removeAttribute(java.lang.String) 	 */
specifier|public
name|void
name|removeAttribute
parameter_list|(
name|String
name|name
parameter_list|)
throws|throws
name|DOMException
block|{
name|element
operator|.
name|removeAttribute
argument_list|(
name|name
argument_list|)
expr_stmt|;
block|}
comment|/* (non-Javadoc) 	 * @see org.w3c.dom.Element#removeAttributeNS(java.lang.String, java.lang.String) 	 */
specifier|public
name|void
name|removeAttributeNS
parameter_list|(
name|String
name|namespaceURI
parameter_list|,
name|String
name|localName
parameter_list|)
throws|throws
name|DOMException
block|{
name|element
operator|.
name|removeAttributeNS
argument_list|(
name|namespaceURI
argument_list|,
name|localName
argument_list|)
expr_stmt|;
block|}
comment|/* (non-Javadoc) 	 * @see org.w3c.dom.Element#removeAttributeNode(org.w3c.dom.Attr) 	 */
specifier|public
name|Attr
name|removeAttributeNode
parameter_list|(
name|Attr
name|oldAttr
parameter_list|)
throws|throws
name|DOMException
block|{
return|return
name|element
operator|.
name|removeAttributeNode
argument_list|(
name|oldAttr
argument_list|)
return|;
block|}
comment|/* (non-Javadoc) 	 * @see org.w3c.dom.Element#setAttribute(java.lang.String, java.lang.String) 	 */
specifier|public
name|void
name|setAttribute
parameter_list|(
name|String
name|name
parameter_list|,
name|String
name|value
parameter_list|)
throws|throws
name|DOMException
block|{
name|element
operator|.
name|setAttribute
argument_list|(
name|name
argument_list|,
name|value
argument_list|)
expr_stmt|;
block|}
comment|/* (non-Javadoc) 	 * @see org.w3c.dom.Element#setAttributeNS(java.lang.String, java.lang.String, java.lang.String) 	 */
specifier|public
name|void
name|setAttributeNS
parameter_list|(
name|String
name|namespaceURI
parameter_list|,
name|String
name|qualifiedName
parameter_list|,
name|String
name|value
parameter_list|)
throws|throws
name|DOMException
block|{
name|element
operator|.
name|setAttributeNS
argument_list|(
name|namespaceURI
argument_list|,
name|qualifiedName
argument_list|,
name|value
argument_list|)
expr_stmt|;
block|}
comment|/* (non-Javadoc) 	 * @see org.w3c.dom.Element#setAttributeNode(org.w3c.dom.Attr) 	 */
specifier|public
name|Attr
name|setAttributeNode
parameter_list|(
name|Attr
name|newAttr
parameter_list|)
throws|throws
name|DOMException
block|{
return|return
name|element
operator|.
name|setAttributeNode
argument_list|(
name|newAttr
argument_list|)
return|;
block|}
comment|/* (non-Javadoc) 	 * @see org.w3c.dom.Element#setAttributeNodeNS(org.w3c.dom.Attr) 	 */
specifier|public
name|Attr
name|setAttributeNodeNS
parameter_list|(
name|Attr
name|newAttr
parameter_list|)
throws|throws
name|DOMException
block|{
return|return
name|element
operator|.
name|setAttributeNodeNS
argument_list|(
name|newAttr
argument_list|)
return|;
block|}
comment|/* (non-Javadoc) 	 * @see org.w3c.dom.Element#setIdAttribute(java.lang.String, boolean) 	 */
specifier|public
name|void
name|setIdAttribute
parameter_list|(
name|String
name|name
parameter_list|,
name|boolean
name|isId
parameter_list|)
throws|throws
name|DOMException
block|{
name|element
operator|.
name|setIdAttribute
argument_list|(
name|name
argument_list|,
name|isId
argument_list|)
expr_stmt|;
block|}
comment|/* (non-Javadoc) 	 * @see org.w3c.dom.Element#setIdAttributeNS(java.lang.String, java.lang.String, boolean) 	 */
specifier|public
name|void
name|setIdAttributeNS
parameter_list|(
name|String
name|namespaceURI
parameter_list|,
name|String
name|localName
parameter_list|,
name|boolean
name|isId
parameter_list|)
throws|throws
name|DOMException
block|{
name|element
operator|.
name|setIdAttributeNS
argument_list|(
name|namespaceURI
argument_list|,
name|localName
argument_list|,
name|isId
argument_list|)
expr_stmt|;
block|}
comment|/* (non-Javadoc) 	 * @see org.w3c.dom.Element#setIdAttributeNode(org.w3c.dom.Attr, boolean) 	 */
specifier|public
name|void
name|setIdAttributeNode
parameter_list|(
name|Attr
name|idAttr
parameter_list|,
name|boolean
name|isId
parameter_list|)
throws|throws
name|DOMException
block|{
name|element
operator|.
name|setIdAttributeNode
argument_list|(
name|idAttr
argument_list|,
name|isId
argument_list|)
expr_stmt|;
block|}
comment|/* (non-Javadoc) 	 * @see org.exist.dom.QNameable#getQName() 	 */
specifier|public
name|QName
name|getQName
parameter_list|()
block|{
return|return
name|element
operator|.
name|getQName
argument_list|()
return|;
block|}
comment|/* (non-Javadoc) 	 * @see org.exist.dom.i.NodeAtExist#getNodeNumber() 	 */
specifier|public
name|int
name|getNodeNumber
parameter_list|()
block|{
return|return
name|element
operator|.
name|getNodeNumber
argument_list|()
return|;
block|}
comment|/* (non-Javadoc) 	 * @see java.lang.Comparable#compareTo(java.lang.Object) 	 */
specifier|public
name|int
name|compareTo
parameter_list|(
name|Object
name|o
parameter_list|)
block|{
return|return
name|element
operator|.
name|compareTo
argument_list|(
name|o
argument_list|)
return|;
block|}
comment|/* (non-Javadoc) 	 * @see org.exist.dom.i.NodeAtExist#matchChildren(org.exist.xquery.NodeTest) 	 */
specifier|public
name|Boolean
name|matchChildren
parameter_list|(
name|NodeTest
name|test
parameter_list|)
throws|throws
name|XPathException
block|{
return|return
name|element
operator|.
name|matchChildren
argument_list|(
name|test
argument_list|)
return|;
block|}
specifier|public
name|String
name|toString
parameter_list|()
block|{
return|return
name|element
operator|.
name|toString
argument_list|()
return|;
block|}
comment|/* (non-Javadoc) 	 * @see org.exist.dom.i.ElementAtExist#getNamespaceMap() 	 */
specifier|public
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|getNamespaceMap
parameter_list|()
block|{
return|return
name|element
operator|.
name|getNamespaceMap
argument_list|()
return|;
block|}
comment|/* (non-Javadoc) 	 * @see org.exist.dom.i.NodeAtExist#getNodeId() 	 */
specifier|public
name|NodeId
name|getNodeId
parameter_list|()
block|{
return|return
name|element
operator|.
name|getNodeId
argument_list|()
return|;
block|}
block|}
end_class

end_unit

