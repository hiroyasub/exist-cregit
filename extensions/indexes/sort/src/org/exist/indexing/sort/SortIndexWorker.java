begin_unit|revision:1.0.0;language:Java;cregit-version:0.0.1
begin_package
package|package
name|org
operator|.
name|exist
operator|.
name|indexing
operator|.
name|sort
package|;
end_package

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|EXistException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|collections
operator|.
name|Collection
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|dom
operator|.
name|*
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|indexing
operator|.
name|IndexController
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|indexing
operator|.
name|IndexWorker
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|indexing
operator|.
name|MatchListener
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|indexing
operator|.
name|StreamListener
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|storage
operator|.
name|DBBroker
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|storage
operator|.
name|NodePath
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|storage
operator|.
name|btree
operator|.
name|BTreeCallback
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|storage
operator|.
name|btree
operator|.
name|BTreeException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|storage
operator|.
name|btree
operator|.
name|IndexQuery
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|storage
operator|.
name|btree
operator|.
name|Value
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|storage
operator|.
name|lock
operator|.
name|Lock
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|util
operator|.
name|*
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|xquery
operator|.
name|TerminatedException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|xquery
operator|.
name|XQueryContext
import|;
end_import

begin_import
import|import
name|org
operator|.
name|w3c
operator|.
name|dom
operator|.
name|NodeList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_class
specifier|public
class|class
name|SortIndexWorker
implements|implements
name|IndexWorker
block|{
specifier|private
name|int
name|mode
init|=
literal|0
decl_stmt|;
specifier|private
name|DocumentImpl
name|document
init|=
literal|null
decl_stmt|;
specifier|private
name|SortIndex
name|index
decl_stmt|;
specifier|public
name|SortIndexWorker
parameter_list|(
name|SortIndex
name|index
parameter_list|)
block|{
name|this
operator|.
name|index
operator|=
name|index
expr_stmt|;
block|}
specifier|public
name|void
name|setDocument
parameter_list|(
name|DocumentImpl
name|doc
parameter_list|,
name|int
name|mode
parameter_list|)
block|{
name|this
operator|.
name|document
operator|=
name|doc
expr_stmt|;
name|this
operator|.
name|mode
operator|=
name|mode
expr_stmt|;
block|}
specifier|public
name|void
name|setMode
parameter_list|(
name|int
name|mode
parameter_list|)
block|{
name|this
operator|.
name|mode
operator|=
name|mode
expr_stmt|;
block|}
specifier|public
name|String
name|getIndexId
parameter_list|()
block|{
return|return
name|SortIndex
operator|.
name|ID
return|;
block|}
specifier|public
name|String
name|getIndexName
parameter_list|()
block|{
return|return
name|index
operator|.
name|getIndexName
argument_list|()
return|;
block|}
specifier|public
name|void
name|flush
parameter_list|()
block|{
switch|switch
condition|(
name|mode
condition|)
block|{
case|case
name|StreamListener
operator|.
name|REMOVE_ALL_NODES
case|:
name|remove
argument_list|(
name|document
argument_list|)
expr_stmt|;
break|break;
block|}
block|}
comment|/**      * Create a new sort index identified by a name. The method iterates through all items in      * the items list and adds the nodes to the index. It assumes that the list is already ordered.      *      * @param name the name by which the index will be identified      * @param items ordered list of items to store      *      * @throws EXistException      * @throws LockException      */
specifier|public
name|void
name|createIndex
parameter_list|(
name|String
name|name
parameter_list|,
name|List
argument_list|<
name|SortItem
argument_list|>
name|items
parameter_list|)
throws|throws
name|EXistException
throws|,
name|LockException
block|{
comment|// get an id for the new index
name|short
name|id
init|=
name|getOrRegisterId
argument_list|(
name|name
argument_list|)
decl_stmt|;
specifier|final
name|Lock
name|lock
init|=
name|index
operator|.
name|btree
operator|.
name|getLock
argument_list|()
decl_stmt|;
try|try
block|{
name|lock
operator|.
name|acquire
argument_list|(
name|Lock
operator|.
name|WRITE_LOCK
argument_list|)
expr_stmt|;
name|long
name|idx
init|=
literal|0
decl_stmt|;
for|for
control|(
name|SortItem
name|item
range|:
name|items
control|)
block|{
name|byte
index|[]
name|key
init|=
name|computeKey
argument_list|(
name|id
argument_list|,
name|item
operator|.
name|node
argument_list|)
decl_stmt|;
name|index
operator|.
name|btree
operator|.
name|addValue
argument_list|(
operator|new
name|Value
argument_list|(
name|key
argument_list|)
argument_list|,
name|idx
operator|++
argument_list|)
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
name|LockException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|EXistException
argument_list|(
literal|"Exception caught while creating sort index: "
operator|+
name|e
operator|.
name|getMessage
argument_list|()
argument_list|,
name|e
argument_list|)
throw|;
block|}
catch|catch
parameter_list|(
name|BTreeException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|EXistException
argument_list|(
literal|"Exception caught while creating sort index: "
operator|+
name|e
operator|.
name|getMessage
argument_list|()
argument_list|,
name|e
argument_list|)
throw|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|EXistException
argument_list|(
literal|"Exception caught while creating sort index: "
operator|+
name|e
operator|.
name|getMessage
argument_list|()
argument_list|,
name|e
argument_list|)
throw|;
block|}
finally|finally
block|{
name|lock
operator|.
name|release
argument_list|(
name|Lock
operator|.
name|WRITE_LOCK
argument_list|)
expr_stmt|;
block|}
block|}
comment|/**      * Looks up the given node in the specified index and returns its original position      * in the ordered set as a long integer.      *      * @param name the name of the index      * @param proxy the node      * @return the original position of the node in the ordered set      * @throws EXistException      * @throws LockException      */
specifier|public
name|long
name|getIndex
parameter_list|(
name|String
name|name
parameter_list|,
name|NodeProxy
name|proxy
parameter_list|)
throws|throws
name|EXistException
throws|,
name|LockException
block|{
name|short
name|id
init|=
name|getId
argument_list|(
name|name
argument_list|)
decl_stmt|;
specifier|final
name|Lock
name|lock
init|=
name|index
operator|.
name|btree
operator|.
name|getLock
argument_list|()
decl_stmt|;
try|try
block|{
name|lock
operator|.
name|acquire
argument_list|(
name|Lock
operator|.
name|READ_LOCK
argument_list|)
expr_stmt|;
name|byte
index|[]
name|key
init|=
name|computeKey
argument_list|(
name|id
argument_list|,
name|proxy
argument_list|)
decl_stmt|;
return|return
name|index
operator|.
name|btree
operator|.
name|findValue
argument_list|(
operator|new
name|Value
argument_list|(
name|key
argument_list|)
argument_list|)
return|;
block|}
catch|catch
parameter_list|(
name|LockException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|EXistException
argument_list|(
literal|"Exception caught while reading sort index: "
operator|+
name|e
operator|.
name|getMessage
argument_list|()
argument_list|,
name|e
argument_list|)
throw|;
block|}
catch|catch
parameter_list|(
name|BTreeException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|EXistException
argument_list|(
literal|"Exception caught while reading sort index: "
operator|+
name|e
operator|.
name|getMessage
argument_list|()
argument_list|,
name|e
argument_list|)
throw|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|EXistException
argument_list|(
literal|"Exception caught while reading sort index: "
operator|+
name|e
operator|.
name|getMessage
argument_list|()
argument_list|,
name|e
argument_list|)
throw|;
block|}
finally|finally
block|{
name|lock
operator|.
name|release
argument_list|(
name|Lock
operator|.
name|READ_LOCK
argument_list|)
expr_stmt|;
block|}
block|}
comment|/**      * Completely remove the index identified by its name.      *      * @param name the name of the index      *      * @throws EXistException      * @throws LockException      */
specifier|public
name|void
name|remove
parameter_list|(
name|String
name|name
parameter_list|)
throws|throws
name|EXistException
throws|,
name|LockException
block|{
name|short
name|id
init|=
name|getId
argument_list|(
name|name
argument_list|)
decl_stmt|;
specifier|final
name|Lock
name|lock
init|=
name|index
operator|.
name|btree
operator|.
name|getLock
argument_list|()
decl_stmt|;
try|try
block|{
name|lock
operator|.
name|acquire
argument_list|(
name|Lock
operator|.
name|READ_LOCK
argument_list|)
expr_stmt|;
name|byte
index|[]
name|fromKey
init|=
name|computeKey
argument_list|(
name|id
argument_list|)
decl_stmt|;
name|byte
index|[]
name|toKey
init|=
name|computeKey
argument_list|(
operator|(
name|short
operator|)
operator|(
name|id
operator|+
literal|1
operator|)
argument_list|)
decl_stmt|;
specifier|final
name|IndexQuery
name|query
init|=
operator|new
name|IndexQuery
argument_list|(
name|IndexQuery
operator|.
name|RANGE
argument_list|,
operator|new
name|Value
argument_list|(
name|fromKey
argument_list|)
argument_list|,
operator|new
name|Value
argument_list|(
name|toKey
argument_list|)
argument_list|)
decl_stmt|;
name|index
operator|.
name|btree
operator|.
name|remove
argument_list|(
name|query
argument_list|,
literal|null
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|BTreeException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|EXistException
argument_list|(
literal|"Exception caught while deleting sort index: "
operator|+
name|e
operator|.
name|getMessage
argument_list|()
argument_list|,
name|e
argument_list|)
throw|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|EXistException
argument_list|(
literal|"Exception caught while deleting sort index: "
operator|+
name|e
operator|.
name|getMessage
argument_list|()
argument_list|,
name|e
argument_list|)
throw|;
block|}
catch|catch
parameter_list|(
name|TerminatedException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|EXistException
argument_list|(
literal|"Exception caught while deleting sort index: "
operator|+
name|e
operator|.
name|getMessage
argument_list|()
argument_list|,
name|e
argument_list|)
throw|;
block|}
finally|finally
block|{
name|lock
operator|.
name|release
argument_list|(
name|Lock
operator|.
name|READ_LOCK
argument_list|)
expr_stmt|;
block|}
block|}
specifier|public
name|void
name|remove
parameter_list|(
name|String
name|name
parameter_list|,
name|DocumentImpl
name|doc
parameter_list|)
throws|throws
name|EXistException
throws|,
name|LockException
block|{
name|short
name|id
init|=
name|getId
argument_list|(
name|name
argument_list|)
decl_stmt|;
name|remove
argument_list|(
name|doc
argument_list|,
name|id
argument_list|)
expr_stmt|;
block|}
specifier|private
name|void
name|remove
parameter_list|(
name|DocumentImpl
name|doc
parameter_list|,
name|short
name|id
parameter_list|)
throws|throws
name|LockException
throws|,
name|EXistException
block|{
specifier|final
name|Lock
name|lock
init|=
name|index
operator|.
name|btree
operator|.
name|getLock
argument_list|()
decl_stmt|;
try|try
block|{
name|lock
operator|.
name|acquire
argument_list|(
name|Lock
operator|.
name|READ_LOCK
argument_list|)
expr_stmt|;
name|byte
index|[]
name|fromKey
init|=
name|computeKey
argument_list|(
name|id
argument_list|,
name|doc
operator|.
name|getDocId
argument_list|()
argument_list|)
decl_stmt|;
name|byte
index|[]
name|toKey
init|=
name|computeKey
argument_list|(
name|id
argument_list|,
name|doc
operator|.
name|getDocId
argument_list|()
operator|+
literal|1
argument_list|)
decl_stmt|;
specifier|final
name|IndexQuery
name|query
init|=
operator|new
name|IndexQuery
argument_list|(
name|IndexQuery
operator|.
name|RANGE
argument_list|,
operator|new
name|Value
argument_list|(
name|fromKey
argument_list|)
argument_list|,
operator|new
name|Value
argument_list|(
name|toKey
argument_list|)
argument_list|)
decl_stmt|;
name|index
operator|.
name|btree
operator|.
name|remove
argument_list|(
name|query
argument_list|,
literal|null
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|BTreeException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|EXistException
argument_list|(
literal|"Exception caught while deleting sort index: "
operator|+
name|e
operator|.
name|getMessage
argument_list|()
argument_list|,
name|e
argument_list|)
throw|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|EXistException
argument_list|(
literal|"Exception caught while deleting sort index: "
operator|+
name|e
operator|.
name|getMessage
argument_list|()
argument_list|,
name|e
argument_list|)
throw|;
block|}
catch|catch
parameter_list|(
name|TerminatedException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|EXistException
argument_list|(
literal|"Exception caught while deleting sort index: "
operator|+
name|e
operator|.
name|getMessage
argument_list|()
argument_list|,
name|e
argument_list|)
throw|;
block|}
finally|finally
block|{
name|lock
operator|.
name|release
argument_list|(
name|Lock
operator|.
name|READ_LOCK
argument_list|)
expr_stmt|;
block|}
block|}
specifier|public
name|void
name|remove
parameter_list|(
name|DocumentImpl
name|doc
parameter_list|)
block|{
if|if
condition|(
name|index
operator|.
name|btree
operator|==
literal|null
condition|)
return|return;
name|byte
index|[]
name|fromKey
init|=
operator|new
name|byte
index|[]
block|{
literal|1
block|}
decl_stmt|;
name|byte
index|[]
name|endKey
init|=
operator|new
name|byte
index|[]
block|{
literal|2
block|}
decl_stmt|;
specifier|final
name|Lock
name|lock
init|=
name|index
operator|.
name|btree
operator|.
name|getLock
argument_list|()
decl_stmt|;
try|try
block|{
name|lock
operator|.
name|acquire
argument_list|(
name|Lock
operator|.
name|READ_LOCK
argument_list|)
expr_stmt|;
name|IndexQuery
name|query
init|=
operator|new
name|IndexQuery
argument_list|(
name|IndexQuery
operator|.
name|RANGE
argument_list|,
operator|new
name|Value
argument_list|(
name|fromKey
argument_list|)
argument_list|,
operator|new
name|Value
argument_list|(
name|endKey
argument_list|)
argument_list|)
decl_stmt|;
name|FindIdCallback
name|callback
init|=
operator|new
name|FindIdCallback
argument_list|(
literal|true
argument_list|)
decl_stmt|;
name|index
operator|.
name|btree
operator|.
name|query
argument_list|(
name|query
argument_list|,
name|callback
argument_list|)
expr_stmt|;
for|for
control|(
name|long
name|id
range|:
name|callback
operator|.
name|allIds
control|)
block|{
name|remove
argument_list|(
name|doc
argument_list|,
operator|(
name|short
operator|)
name|id
argument_list|)
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
name|BTreeException
name|e
parameter_list|)
block|{
name|SortIndex
operator|.
name|LOG
operator|.
name|debug
argument_list|(
literal|"Exception caught while reading sort index: "
operator|+
name|e
operator|.
name|getMessage
argument_list|()
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
name|SortIndex
operator|.
name|LOG
operator|.
name|debug
argument_list|(
literal|"Exception caught while reading sort index: "
operator|+
name|e
operator|.
name|getMessage
argument_list|()
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|TerminatedException
name|e
parameter_list|)
block|{
name|SortIndex
operator|.
name|LOG
operator|.
name|debug
argument_list|(
literal|"Exception caught while reading sort index: "
operator|+
name|e
operator|.
name|getMessage
argument_list|()
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|LockException
name|e
parameter_list|)
block|{
name|SortIndex
operator|.
name|LOG
operator|.
name|debug
argument_list|(
literal|"Exception caught while reading sort index: "
operator|+
name|e
operator|.
name|getMessage
argument_list|()
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|EXistException
name|e
parameter_list|)
block|{
name|SortIndex
operator|.
name|LOG
operator|.
name|debug
argument_list|(
literal|"Exception caught while reading sort index: "
operator|+
name|e
operator|.
name|getMessage
argument_list|()
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
name|lock
operator|.
name|release
argument_list|(
name|Lock
operator|.
name|READ_LOCK
argument_list|)
expr_stmt|;
block|}
block|}
comment|/**      * Register the given index name and return a short id for it.      *      * @param name the name of the index      * @return a unique id to be used for the index entries      *      * @throws EXistException      * @throws LockException      */
specifier|private
name|short
name|getOrRegisterId
parameter_list|(
name|String
name|name
parameter_list|)
throws|throws
name|EXistException
throws|,
name|LockException
block|{
name|short
name|id
init|=
name|getId
argument_list|(
name|name
argument_list|)
decl_stmt|;
if|if
condition|(
name|id
operator|<
literal|0
condition|)
block|{
name|byte
index|[]
name|fromKey
init|=
block|{
literal|1
block|}
decl_stmt|;
name|byte
index|[]
name|endKey
init|=
block|{
literal|2
block|}
decl_stmt|;
name|IndexQuery
name|query
init|=
operator|new
name|IndexQuery
argument_list|(
name|IndexQuery
operator|.
name|RANGE
argument_list|,
operator|new
name|Value
argument_list|(
name|fromKey
argument_list|)
argument_list|,
operator|new
name|Value
argument_list|(
name|endKey
argument_list|)
argument_list|)
decl_stmt|;
specifier|final
name|Lock
name|lock
init|=
name|index
operator|.
name|btree
operator|.
name|getLock
argument_list|()
decl_stmt|;
try|try
block|{
name|lock
operator|.
name|acquire
argument_list|(
name|Lock
operator|.
name|READ_LOCK
argument_list|)
expr_stmt|;
name|FindIdCallback
name|callback
init|=
operator|new
name|FindIdCallback
argument_list|(
literal|false
argument_list|)
decl_stmt|;
name|index
operator|.
name|btree
operator|.
name|query
argument_list|(
name|query
argument_list|,
name|callback
argument_list|)
expr_stmt|;
name|id
operator|=
operator|(
name|short
operator|)
operator|(
name|callback
operator|.
name|max
operator|+
literal|1
operator|)
expr_stmt|;
name|registerId
argument_list|(
name|id
argument_list|,
name|name
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|EXistException
argument_list|(
literal|"Exception caught while reading sort index: "
operator|+
name|e
operator|.
name|getMessage
argument_list|()
argument_list|,
name|e
argument_list|)
throw|;
block|}
catch|catch
parameter_list|(
name|BTreeException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|EXistException
argument_list|(
literal|"Exception caught while reading sort index: "
operator|+
name|e
operator|.
name|getMessage
argument_list|()
argument_list|,
name|e
argument_list|)
throw|;
block|}
catch|catch
parameter_list|(
name|TerminatedException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|EXistException
argument_list|(
literal|"Exception caught while reading sort index: "
operator|+
name|e
operator|.
name|getMessage
argument_list|()
argument_list|,
name|e
argument_list|)
throw|;
block|}
finally|finally
block|{
name|lock
operator|.
name|release
argument_list|(
name|Lock
operator|.
name|READ_LOCK
argument_list|)
expr_stmt|;
block|}
block|}
return|return
name|id
return|;
block|}
specifier|private
specifier|final
specifier|static
class|class
name|FindIdCallback
implements|implements
name|BTreeCallback
block|{
name|long
name|max
init|=
literal|0
decl_stmt|;
name|List
argument_list|<
name|Long
argument_list|>
name|allIds
init|=
literal|null
decl_stmt|;
specifier|private
name|FindIdCallback
parameter_list|(
name|boolean
name|findIds
parameter_list|)
block|{
if|if
condition|(
name|findIds
condition|)
name|allIds
operator|=
operator|new
name|ArrayList
argument_list|<
name|Long
argument_list|>
argument_list|(
literal|10
argument_list|)
expr_stmt|;
block|}
specifier|public
name|boolean
name|indexInfo
parameter_list|(
name|Value
name|value
parameter_list|,
name|long
name|pointer
parameter_list|)
throws|throws
name|TerminatedException
block|{
name|max
operator|=
name|Math
operator|.
name|max
argument_list|(
name|max
argument_list|,
name|pointer
argument_list|)
expr_stmt|;
if|if
condition|(
name|allIds
operator|!=
literal|null
condition|)
block|{
name|allIds
operator|.
name|add
argument_list|(
name|pointer
argument_list|)
expr_stmt|;
block|}
return|return
literal|true
return|;
block|}
block|}
specifier|private
name|void
name|registerId
parameter_list|(
name|short
name|id
parameter_list|,
name|String
name|name
parameter_list|)
throws|throws
name|EXistException
block|{
name|byte
index|[]
name|key
init|=
operator|new
name|byte
index|[
literal|1
operator|+
name|UTF8
operator|.
name|encoded
argument_list|(
name|name
argument_list|)
index|]
decl_stmt|;
name|key
index|[
literal|0
index|]
operator|=
literal|1
expr_stmt|;
name|UTF8
operator|.
name|encode
argument_list|(
name|name
argument_list|,
name|key
argument_list|,
literal|1
argument_list|)
expr_stmt|;
specifier|final
name|Lock
name|lock
init|=
name|index
operator|.
name|btree
operator|.
name|getLock
argument_list|()
decl_stmt|;
try|try
block|{
name|lock
operator|.
name|acquire
argument_list|(
name|Lock
operator|.
name|READ_LOCK
argument_list|)
expr_stmt|;
name|index
operator|.
name|btree
operator|.
name|addValue
argument_list|(
operator|new
name|Value
argument_list|(
name|key
argument_list|)
argument_list|,
name|id
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|LockException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|EXistException
argument_list|(
literal|"Exception caught while reading sort index: "
operator|+
name|e
operator|.
name|getMessage
argument_list|()
argument_list|,
name|e
argument_list|)
throw|;
block|}
catch|catch
parameter_list|(
name|BTreeException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|EXistException
argument_list|(
literal|"Exception caught while reading sort index: "
operator|+
name|e
operator|.
name|getMessage
argument_list|()
argument_list|,
name|e
argument_list|)
throw|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|EXistException
argument_list|(
literal|"Exception caught while reading sort index: "
operator|+
name|e
operator|.
name|getMessage
argument_list|()
argument_list|,
name|e
argument_list|)
throw|;
block|}
finally|finally
block|{
name|lock
operator|.
name|release
argument_list|(
name|Lock
operator|.
name|READ_LOCK
argument_list|)
expr_stmt|;
block|}
block|}
specifier|private
name|short
name|getId
parameter_list|(
name|String
name|name
parameter_list|)
throws|throws
name|EXistException
throws|,
name|LockException
block|{
name|byte
index|[]
name|key
init|=
operator|new
name|byte
index|[
literal|1
operator|+
name|UTF8
operator|.
name|encoded
argument_list|(
name|name
argument_list|)
index|]
decl_stmt|;
name|key
index|[
literal|0
index|]
operator|=
literal|1
expr_stmt|;
name|UTF8
operator|.
name|encode
argument_list|(
name|name
argument_list|,
name|key
argument_list|,
literal|1
argument_list|)
expr_stmt|;
specifier|final
name|Lock
name|lock
init|=
name|index
operator|.
name|btree
operator|.
name|getLock
argument_list|()
decl_stmt|;
try|try
block|{
name|lock
operator|.
name|acquire
argument_list|(
name|Lock
operator|.
name|READ_LOCK
argument_list|)
expr_stmt|;
return|return
operator|(
name|short
operator|)
name|index
operator|.
name|btree
operator|.
name|findValue
argument_list|(
operator|new
name|Value
argument_list|(
name|key
argument_list|)
argument_list|)
return|;
block|}
catch|catch
parameter_list|(
name|BTreeException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|EXistException
argument_list|(
literal|"Exception caught while reading sort index: "
operator|+
name|e
operator|.
name|getMessage
argument_list|()
argument_list|,
name|e
argument_list|)
throw|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|EXistException
argument_list|(
literal|"Exception caught while reading sort index: "
operator|+
name|e
operator|.
name|getMessage
argument_list|()
argument_list|,
name|e
argument_list|)
throw|;
block|}
finally|finally
block|{
name|lock
operator|.
name|release
argument_list|(
name|Lock
operator|.
name|READ_LOCK
argument_list|)
expr_stmt|;
block|}
block|}
specifier|private
name|byte
index|[]
name|computeKey
parameter_list|(
name|short
name|id
parameter_list|,
name|NodeProxy
name|proxy
parameter_list|)
block|{
name|byte
index|[]
name|data
init|=
operator|new
name|byte
index|[
literal|7
operator|+
name|proxy
operator|.
name|getNodeId
argument_list|()
operator|.
name|size
argument_list|()
index|]
decl_stmt|;
name|data
index|[
literal|0
index|]
operator|=
literal|0
expr_stmt|;
name|ByteConversion
operator|.
name|shortToByteH
argument_list|(
name|id
argument_list|,
name|data
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|ByteConversion
operator|.
name|intToByteH
argument_list|(
name|proxy
operator|.
name|getDocument
argument_list|()
operator|.
name|getDocId
argument_list|()
argument_list|,
name|data
argument_list|,
literal|3
argument_list|)
expr_stmt|;
name|proxy
operator|.
name|getNodeId
argument_list|()
operator|.
name|serialize
argument_list|(
name|data
argument_list|,
literal|7
argument_list|)
expr_stmt|;
return|return
name|data
return|;
block|}
specifier|private
name|byte
index|[]
name|computeKey
parameter_list|(
name|short
name|id
parameter_list|,
name|int
name|docId
parameter_list|)
block|{
name|byte
index|[]
name|data
init|=
operator|new
name|byte
index|[
literal|7
index|]
decl_stmt|;
name|data
index|[
literal|0
index|]
operator|=
literal|0
expr_stmt|;
name|ByteConversion
operator|.
name|shortToByteH
argument_list|(
name|id
argument_list|,
name|data
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|ByteConversion
operator|.
name|intToByteH
argument_list|(
name|docId
argument_list|,
name|data
argument_list|,
literal|3
argument_list|)
expr_stmt|;
return|return
name|data
return|;
block|}
specifier|private
name|byte
index|[]
name|computeKey
parameter_list|(
name|short
name|id
parameter_list|)
block|{
name|byte
index|[]
name|data
init|=
operator|new
name|byte
index|[
literal|3
index|]
decl_stmt|;
name|data
index|[
literal|0
index|]
operator|=
literal|0
expr_stmt|;
name|ByteConversion
operator|.
name|shortToByteH
argument_list|(
name|id
argument_list|,
name|data
argument_list|,
literal|1
argument_list|)
expr_stmt|;
return|return
name|data
return|;
block|}
specifier|public
name|Object
name|configure
parameter_list|(
name|IndexController
name|controller
parameter_list|,
name|NodeList
name|configNodes
parameter_list|,
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|namespaces
parameter_list|)
throws|throws
name|DatabaseConfigurationException
block|{
return|return
literal|null
return|;
block|}
specifier|public
name|void
name|setDocument
parameter_list|(
name|DocumentImpl
name|doc
parameter_list|)
block|{
name|this
operator|.
name|document
operator|=
name|doc
expr_stmt|;
block|}
specifier|public
name|DocumentImpl
name|getDocument
parameter_list|()
block|{
return|return
name|document
return|;
block|}
specifier|public
name|int
name|getMode
parameter_list|()
block|{
return|return
name|mode
return|;
block|}
specifier|public
name|StoredNode
name|getReindexRoot
parameter_list|(
name|StoredNode
name|node
parameter_list|,
name|NodePath
name|path
parameter_list|,
name|boolean
name|includeSelf
parameter_list|)
block|{
return|return
name|node
return|;
block|}
specifier|public
name|StreamListener
name|getListener
parameter_list|()
block|{
return|return
literal|null
return|;
block|}
specifier|public
name|MatchListener
name|getMatchListener
parameter_list|(
name|DBBroker
name|broker
parameter_list|,
name|NodeProxy
name|proxy
parameter_list|)
block|{
return|return
literal|null
return|;
block|}
specifier|public
name|void
name|removeCollection
parameter_list|(
name|Collection
name|collection
parameter_list|,
name|DBBroker
name|broker
parameter_list|)
block|{
block|}
specifier|public
name|boolean
name|checkIndex
parameter_list|(
name|DBBroker
name|broker
parameter_list|)
block|{
return|return
literal|false
return|;
block|}
specifier|public
name|Occurrences
index|[]
name|scanIndex
parameter_list|(
name|XQueryContext
name|context
parameter_list|,
name|DocumentSet
name|docs
parameter_list|,
name|NodeSet
name|contextSet
parameter_list|,
name|Map
name|hints
parameter_list|)
block|{
return|return
operator|new
name|Occurrences
index|[
literal|0
index|]
return|;
block|}
block|}
end_class

end_unit

