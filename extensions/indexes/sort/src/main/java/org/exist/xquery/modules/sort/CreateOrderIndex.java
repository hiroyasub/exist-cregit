begin_unit|revision:1.0.0;language:Java;cregit-version:0.0.1
begin_package
package|package
name|org
operator|.
name|exist
operator|.
name|xquery
operator|.
name|modules
operator|.
name|sort
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|logging
operator|.
name|log4j
operator|.
name|LogManager
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|logging
operator|.
name|log4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|EXistException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|dom
operator|.
name|QName
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|dom
operator|.
name|persistent
operator|.
name|NodeProxy
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|indexing
operator|.
name|sort
operator|.
name|SortIndex
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|indexing
operator|.
name|sort
operator|.
name|SortIndexWorker
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|indexing
operator|.
name|sort
operator|.
name|SortItem
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|util
operator|.
name|FastQSort
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|util
operator|.
name|LockException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|xquery
operator|.
name|*
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|xquery
operator|.
name|value
operator|.
name|*
import|;
end_import

begin_import
import|import
name|org
operator|.
name|w3c
operator|.
name|dom
operator|.
name|Element
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_class
specifier|public
class|class
name|CreateOrderIndex
extends|extends
name|BasicFunction
block|{
specifier|public
specifier|final
specifier|static
name|FunctionSignature
index|[]
name|signatures
init|=
block|{
operator|new
name|FunctionSignature
argument_list|(
operator|new
name|QName
argument_list|(
literal|"create-index"
argument_list|,
name|SortModule
operator|.
name|NAMESPACE_URI
argument_list|,
name|SortModule
operator|.
name|PREFIX
argument_list|)
argument_list|,
literal|"Create a sort index to be used within an 'order by' expression."
argument_list|,
operator|new
name|SequenceType
index|[]
block|{
operator|new
name|FunctionParameterSequenceType
argument_list|(
literal|"id"
argument_list|,
name|Type
operator|.
name|STRING
argument_list|,
name|Cardinality
operator|.
name|EXACTLY_ONE
argument_list|,
literal|"The id by which the index will be known and distinguished from other indexes "
operator|+
literal|"on the same nodes."
argument_list|)
block|,
operator|new
name|FunctionParameterSequenceType
argument_list|(
literal|"nodes"
argument_list|,
name|Type
operator|.
name|NODE
argument_list|,
name|Cardinality
operator|.
name|ZERO_OR_MORE
argument_list|,
literal|"The node set to be indexed."
argument_list|)
block|,
operator|new
name|FunctionParameterSequenceType
argument_list|(
literal|"values"
argument_list|,
name|Type
operator|.
name|ATOMIC
argument_list|,
name|Cardinality
operator|.
name|ZERO_OR_MORE
argument_list|,
literal|"The values to be indexed. There should be one value for each node in $nodes. "
operator|+
literal|"$values thus needs to contain as many items as $nodes. If not, a dynamic error "
operator|+
literal|"is triggered."
argument_list|)
block|,
operator|new
name|FunctionParameterSequenceType
argument_list|(
literal|"options"
argument_list|,
name|Type
operator|.
name|ELEMENT
argument_list|,
name|Cardinality
operator|.
name|ZERO_OR_ONE
argument_list|,
literal|"<options order='ascending|descending' empty='least|greatest'/>"
argument_list|)
block|}
argument_list|,
operator|new
name|FunctionReturnSequenceType
argument_list|(
name|Type
operator|.
name|ITEM
argument_list|,
name|Cardinality
operator|.
name|ZERO_OR_MORE
argument_list|,
literal|""
argument_list|)
argument_list|)
block|,
operator|new
name|FunctionSignature
argument_list|(
operator|new
name|QName
argument_list|(
literal|"create-index-callback"
argument_list|,
name|SortModule
operator|.
name|NAMESPACE_URI
argument_list|,
name|SortModule
operator|.
name|PREFIX
argument_list|)
argument_list|,
literal|"Create a sort index to be used within an 'order by' expression."
argument_list|,
operator|new
name|SequenceType
index|[]
block|{
operator|new
name|FunctionParameterSequenceType
argument_list|(
literal|"id"
argument_list|,
name|Type
operator|.
name|STRING
argument_list|,
name|Cardinality
operator|.
name|EXACTLY_ONE
argument_list|,
literal|"The id by which the index will be known and distinguished from other indexes "
operator|+
literal|"on the same nodes."
argument_list|)
block|,
operator|new
name|FunctionParameterSequenceType
argument_list|(
literal|"nodes"
argument_list|,
name|Type
operator|.
name|NODE
argument_list|,
name|Cardinality
operator|.
name|ZERO_OR_MORE
argument_list|,
literal|"The node set to be indexed."
argument_list|)
block|,
operator|new
name|FunctionParameterSequenceType
argument_list|(
literal|"callback"
argument_list|,
name|Type
operator|.
name|FUNCTION_REFERENCE
argument_list|,
name|Cardinality
operator|.
name|EXACTLY_ONE
argument_list|,
literal|"A callback function which will be called for every node in the $nodes input set. "
operator|+
literal|"The function receives the current node as single argument and should return "
operator|+
literal|"an atomic value by which the node will be sorted."
argument_list|)
block|,
operator|new
name|FunctionParameterSequenceType
argument_list|(
literal|"options"
argument_list|,
name|Type
operator|.
name|ELEMENT
argument_list|,
name|Cardinality
operator|.
name|ZERO_OR_ONE
argument_list|,
literal|"<options order='ascending|descending' empty='least|greatest'/>"
argument_list|)
block|}
argument_list|,
operator|new
name|FunctionReturnSequenceType
argument_list|(
name|Type
operator|.
name|ITEM
argument_list|,
name|Cardinality
operator|.
name|ZERO_OR_MORE
argument_list|,
literal|""
argument_list|)
argument_list|)
block|}
decl_stmt|;
specifier|protected
specifier|static
specifier|final
name|Logger
name|LOG
init|=
name|LogManager
operator|.
name|getLogger
argument_list|(
name|CreateOrderIndex
operator|.
name|class
argument_list|)
decl_stmt|;
specifier|private
name|boolean
name|descending
init|=
literal|false
decl_stmt|;
specifier|private
name|boolean
name|emptyLeast
init|=
literal|false
decl_stmt|;
specifier|public
name|CreateOrderIndex
parameter_list|(
specifier|final
name|XQueryContext
name|context
parameter_list|,
specifier|final
name|FunctionSignature
name|signature
parameter_list|)
block|{
name|super
argument_list|(
name|context
argument_list|,
name|signature
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|Sequence
name|eval
parameter_list|(
specifier|final
name|Sequence
index|[]
name|args
parameter_list|,
specifier|final
name|Sequence
name|contextSequence
parameter_list|)
throws|throws
name|XPathException
block|{
if|if
condition|(
name|args
index|[
literal|1
index|]
operator|.
name|isEmpty
argument_list|()
condition|)
return|return
name|Sequence
operator|.
name|EMPTY_SEQUENCE
return|;
specifier|final
name|String
name|id
init|=
name|args
index|[
literal|0
index|]
operator|.
name|getStringValue
argument_list|()
decl_stmt|;
comment|// check how the function was called and prepare callback
name|FunctionReference
name|call
init|=
literal|null
decl_stmt|;
if|if
condition|(
name|isCalledAs
argument_list|(
literal|"create-index-callback"
argument_list|)
condition|)
block|{
name|call
operator|=
operator|(
name|FunctionReference
operator|)
name|args
index|[
literal|2
index|]
operator|.
name|itemAt
argument_list|(
literal|0
argument_list|)
expr_stmt|;
block|}
if|else if
condition|(
name|args
index|[
literal|2
index|]
operator|.
name|getItemCount
argument_list|()
operator|!=
name|args
index|[
literal|1
index|]
operator|.
name|getItemCount
argument_list|()
condition|)
throw|throw
operator|new
name|XPathException
argument_list|(
name|this
argument_list|,
literal|"$nodes and $values sequences need to have the same length."
argument_list|)
throw|;
comment|// options
if|if
condition|(
name|args
index|[
literal|3
index|]
operator|.
name|getItemCount
argument_list|()
operator|>
literal|0
condition|)
block|{
specifier|final
name|NodeValue
name|optionValue
init|=
operator|(
name|NodeValue
operator|)
name|args
index|[
literal|3
index|]
operator|.
name|itemAt
argument_list|(
literal|0
argument_list|)
decl_stmt|;
specifier|final
name|Element
name|options
init|=
operator|(
name|Element
operator|)
name|optionValue
operator|.
name|getNode
argument_list|()
decl_stmt|;
name|String
name|option
init|=
name|options
operator|.
name|getAttribute
argument_list|(
literal|"order"
argument_list|)
decl_stmt|;
if|if
condition|(
name|option
operator|!=
literal|null
condition|)
block|{
name|descending
operator|=
name|option
operator|.
name|equalsIgnoreCase
argument_list|(
literal|"descending"
argument_list|)
expr_stmt|;
block|}
name|option
operator|=
name|options
operator|.
name|getAttribute
argument_list|(
literal|"empty"
argument_list|)
expr_stmt|;
if|if
condition|(
name|option
operator|!=
literal|null
condition|)
block|{
name|emptyLeast
operator|=
name|option
operator|.
name|equalsIgnoreCase
argument_list|(
literal|"least"
argument_list|)
expr_stmt|;
block|}
block|}
comment|// create the input list to be sorted below
specifier|final
name|List
argument_list|<
name|SortItem
argument_list|>
name|items
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|(
name|args
index|[
literal|1
index|]
operator|.
name|getItemCount
argument_list|()
argument_list|)
decl_stmt|;
specifier|final
name|Sequence
index|[]
name|params
init|=
operator|new
name|Sequence
index|[
literal|1
index|]
decl_stmt|;
name|SequenceIterator
name|valuesIter
init|=
literal|null
decl_stmt|;
if|if
condition|(
name|call
operator|==
literal|null
condition|)
name|valuesIter
operator|=
name|args
index|[
literal|2
index|]
operator|.
name|iterate
argument_list|()
expr_stmt|;
name|int
name|c
init|=
literal|0
decl_stmt|;
specifier|final
name|int
name|len
init|=
name|args
index|[
literal|1
index|]
operator|.
name|getItemCount
argument_list|()
decl_stmt|;
specifier|final
name|int
name|logChunk
init|=
literal|1
operator|+
operator|(
name|len
operator|/
literal|20
operator|)
decl_stmt|;
for|for
control|(
specifier|final
name|SequenceIterator
name|nodesIter
init|=
name|args
index|[
literal|1
index|]
operator|.
name|iterate
argument_list|()
init|;
name|nodesIter
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
specifier|final
name|NodeValue
name|nv
init|=
operator|(
name|NodeValue
operator|)
name|nodesIter
operator|.
name|nextItem
argument_list|()
decl_stmt|;
if|if
condition|(
name|nv
operator|.
name|getImplementationType
argument_list|()
operator|==
name|NodeValue
operator|.
name|IN_MEMORY_NODE
condition|)
throw|throw
operator|new
name|XPathException
argument_list|(
name|this
argument_list|,
literal|"Cannot create order-index on an in-memory node"
argument_list|)
throw|;
specifier|final
name|NodeProxy
name|node
init|=
operator|(
name|NodeProxy
operator|)
name|nv
decl_stmt|;
specifier|final
name|SortItem
name|si
init|=
operator|new
name|SortItemImpl
argument_list|(
name|node
argument_list|)
decl_stmt|;
if|if
condition|(
name|LOG
operator|.
name|isDebugEnabled
argument_list|()
operator|&&
operator|++
name|c
operator|%
name|logChunk
operator|==
literal|0
condition|)
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"Storing item "
operator|+
name|c
operator|+
literal|" out of "
operator|+
name|len
operator|+
literal|" to sort index."
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|call
operator|!=
literal|null
condition|)
block|{
comment|// call the callback function to get value
name|params
index|[
literal|0
index|]
operator|=
name|node
expr_stmt|;
specifier|final
name|Sequence
name|r
init|=
name|call
operator|.
name|evalFunction
argument_list|(
name|contextSequence
argument_list|,
literal|null
argument_list|,
name|params
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|r
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|AtomicValue
name|v
init|=
name|r
operator|.
name|itemAt
argument_list|(
literal|0
argument_list|)
operator|.
name|atomize
argument_list|()
decl_stmt|;
if|if
condition|(
name|v
operator|.
name|getType
argument_list|()
operator|==
name|Type
operator|.
name|UNTYPED_ATOMIC
condition|)
name|v
operator|=
name|v
operator|.
name|convertTo
argument_list|(
name|Type
operator|.
name|STRING
argument_list|)
expr_stmt|;
name|si
operator|.
name|setValue
argument_list|(
name|v
argument_list|)
expr_stmt|;
block|}
block|}
else|else
block|{
comment|// no callback, take value from second sequence
name|AtomicValue
name|v
init|=
name|valuesIter
operator|.
name|nextItem
argument_list|()
operator|.
name|atomize
argument_list|()
decl_stmt|;
if|if
condition|(
name|v
operator|.
name|getType
argument_list|()
operator|==
name|Type
operator|.
name|UNTYPED_ATOMIC
condition|)
name|v
operator|=
name|v
operator|.
name|convertTo
argument_list|(
name|Type
operator|.
name|STRING
argument_list|)
expr_stmt|;
name|si
operator|.
name|setValue
argument_list|(
name|v
argument_list|)
expr_stmt|;
block|}
name|items
operator|.
name|add
argument_list|(
name|si
argument_list|)
expr_stmt|;
block|}
comment|// sort the set
name|FastQSort
operator|.
name|sort
argument_list|(
name|items
argument_list|,
literal|0
argument_list|,
name|items
operator|.
name|size
argument_list|()
operator|-
literal|1
argument_list|)
expr_stmt|;
comment|// create the index
specifier|final
name|SortIndexWorker
name|index
init|=
operator|(
name|SortIndexWorker
operator|)
name|context
operator|.
name|getBroker
argument_list|()
operator|.
name|getIndexController
argument_list|()
operator|.
name|getWorkerByIndexId
argument_list|(
name|SortIndex
operator|.
name|ID
argument_list|)
decl_stmt|;
try|try
block|{
name|index
operator|.
name|createIndex
argument_list|(
name|id
argument_list|,
name|items
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
specifier|final
name|EXistException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|XPathException
argument_list|(
name|this
argument_list|,
name|e
operator|.
name|getMessage
argument_list|()
argument_list|,
name|e
argument_list|)
throw|;
block|}
catch|catch
parameter_list|(
specifier|final
name|LockException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|XPathException
argument_list|(
name|this
argument_list|,
literal|"Caught lock error while creating index. Giving up."
argument_list|,
name|e
argument_list|)
throw|;
block|}
return|return
name|Sequence
operator|.
name|EMPTY_SEQUENCE
return|;
block|}
specifier|private
class|class
name|SortItemImpl
implements|implements
name|SortItem
block|{
name|NodeProxy
name|node
decl_stmt|;
name|AtomicValue
name|value
init|=
name|AtomicValue
operator|.
name|EMPTY_VALUE
decl_stmt|;
specifier|public
name|SortItemImpl
parameter_list|(
specifier|final
name|NodeProxy
name|node
parameter_list|)
block|{
name|this
operator|.
name|node
operator|=
name|node
expr_stmt|;
block|}
specifier|public
name|NodeProxy
name|getNode
parameter_list|()
block|{
return|return
name|node
return|;
block|}
specifier|public
name|AtomicValue
name|getValue
parameter_list|()
block|{
return|return
name|value
return|;
block|}
specifier|public
name|void
name|setValue
parameter_list|(
specifier|final
name|AtomicValue
name|value
parameter_list|)
block|{
if|if
condition|(
name|value
operator|.
name|hasOne
argument_list|()
condition|)
name|this
operator|.
name|value
operator|=
name|value
expr_stmt|;
block|}
specifier|public
name|int
name|compareTo
parameter_list|(
specifier|final
name|SortItem
name|other
parameter_list|)
block|{
name|int
name|cmp
init|=
literal|0
decl_stmt|;
specifier|final
name|AtomicValue
name|a
init|=
name|this
operator|.
name|value
decl_stmt|;
specifier|final
name|AtomicValue
name|b
init|=
name|other
operator|.
name|getValue
argument_list|()
decl_stmt|;
specifier|final
name|boolean
name|aIsEmpty
init|=
operator|(
name|a
operator|.
name|isEmpty
argument_list|()
operator|||
operator|(
name|Type
operator|.
name|subTypeOfUnion
argument_list|(
name|a
operator|.
name|getType
argument_list|()
argument_list|,
name|Type
operator|.
name|NUMBER
argument_list|)
operator|&&
operator|(
operator|(
name|NumericValue
operator|)
name|a
operator|)
operator|.
name|isNaN
argument_list|()
operator|)
operator|)
decl_stmt|;
specifier|final
name|boolean
name|bIsEmpty
init|=
operator|(
name|b
operator|.
name|isEmpty
argument_list|()
operator|||
operator|(
name|Type
operator|.
name|subTypeOfUnion
argument_list|(
name|b
operator|.
name|getType
argument_list|()
argument_list|,
name|Type
operator|.
name|NUMBER
argument_list|)
operator|&&
operator|(
operator|(
name|NumericValue
operator|)
name|b
operator|)
operator|.
name|isNaN
argument_list|()
operator|)
operator|)
decl_stmt|;
if|if
condition|(
name|aIsEmpty
condition|)
block|{
if|if
condition|(
name|bIsEmpty
condition|)
comment|// both values are empty
return|return
name|Constants
operator|.
name|EQUAL
return|;
if|else if
condition|(
name|emptyLeast
condition|)
name|cmp
operator|=
name|Constants
operator|.
name|INFERIOR
expr_stmt|;
else|else
name|cmp
operator|=
name|Constants
operator|.
name|SUPERIOR
expr_stmt|;
block|}
if|else if
condition|(
name|bIsEmpty
condition|)
block|{
comment|// we don't need to check for equality since we know a is not empty
if|if
condition|(
name|emptyLeast
condition|)
name|cmp
operator|=
name|Constants
operator|.
name|SUPERIOR
expr_stmt|;
else|else
name|cmp
operator|=
name|Constants
operator|.
name|INFERIOR
expr_stmt|;
block|}
if|else if
condition|(
name|a
operator|==
name|AtomicValue
operator|.
name|EMPTY_VALUE
operator|&&
name|b
operator|!=
name|AtomicValue
operator|.
name|EMPTY_VALUE
condition|)
block|{
if|if
condition|(
name|emptyLeast
condition|)
name|cmp
operator|=
name|Constants
operator|.
name|INFERIOR
expr_stmt|;
else|else
name|cmp
operator|=
name|Constants
operator|.
name|SUPERIOR
expr_stmt|;
block|}
if|else if
condition|(
name|b
operator|==
name|AtomicValue
operator|.
name|EMPTY_VALUE
operator|&&
name|a
operator|!=
name|AtomicValue
operator|.
name|EMPTY_VALUE
condition|)
block|{
if|if
condition|(
name|emptyLeast
condition|)
name|cmp
operator|=
name|Constants
operator|.
name|SUPERIOR
expr_stmt|;
else|else
name|cmp
operator|=
name|Constants
operator|.
name|INFERIOR
expr_stmt|;
block|}
else|else
name|cmp
operator|=
name|a
operator|.
name|compareTo
argument_list|(
name|b
argument_list|)
expr_stmt|;
if|if
condition|(
name|descending
condition|)
name|cmp
operator|=
name|cmp
operator|*
operator|-
literal|1
expr_stmt|;
return|return
name|cmp
return|;
block|}
block|}
block|}
end_class

end_unit

