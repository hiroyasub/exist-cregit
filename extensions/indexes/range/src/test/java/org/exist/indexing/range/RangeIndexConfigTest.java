begin_unit|revision:1.0.0;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * eXist Open Source Native XML Database  * Copyright (C) 2001-2017 The eXist Project  * http://exist-db.org  *  * This program is free software; you can redistribute it and/or  * modify it under the terms of the GNU Lesser General Public License  * as published by the Free Software Foundation; either version 2  * of the License, or (at your option) any later version.  *  * This program is distributed in the hope that it will be useful,  * but WITHOUT ANY WARRANTY; without even the implied warranty of  * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the  * GNU Lesser General Public License for more details.  *  * You should have received a copy of the GNU Lesser General Public  * License along with this library; if not, write to the Free Software  * Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA  02110-1301  USA  */
end_comment

begin_package
package|package
name|org
operator|.
name|exist
operator|.
name|indexing
operator|.
name|range
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|logging
operator|.
name|log4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|easymock
operator|.
name|Capture
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_import
import|import
name|org
operator|.
name|w3c
operator|.
name|dom
operator|.
name|Document
import|;
end_import

begin_import
import|import
name|org
operator|.
name|w3c
operator|.
name|dom
operator|.
name|Element
import|;
end_import

begin_import
import|import
name|org
operator|.
name|w3c
operator|.
name|dom
operator|.
name|NodeList
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|xml
operator|.
name|soap
operator|.
name|Node
import|;
end_import

begin_import
import|import
name|java
operator|.
name|lang
operator|.
name|reflect
operator|.
name|Field
import|;
end_import

begin_import
import|import
name|java
operator|.
name|lang
operator|.
name|reflect
operator|.
name|Modifier
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import static
name|junit
operator|.
name|framework
operator|.
name|TestCase
operator|.
name|assertTrue
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|easymock
operator|.
name|EasyMock
operator|.
name|*
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|exist
operator|.
name|indexing
operator|.
name|lucene
operator|.
name|LuceneIndexConfig
operator|.
name|MATCH_ATTR
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|exist
operator|.
name|indexing
operator|.
name|lucene
operator|.
name|LuceneIndexConfig
operator|.
name|QNAME_ATTR
import|;
end_import

begin_class
specifier|public
class|class
name|RangeIndexConfigTest
block|{
comment|/**      * @see https://github.com/eXist-db/exist/issues/1339      */
annotation|@
name|Test
specifier|public
name|void
name|errorsHaveSourceContext
parameter_list|()
throws|throws
name|NoSuchFieldException
throws|,
name|IllegalAccessException
block|{
specifier|final
name|String
name|badCreateQName
init|=
literal|"tei:persName "
decl_stmt|;
comment|// Note the trailing
specifier|final
name|String
name|mockCollectionXConfUri
init|=
literal|"/db/system/conf/db/mock/collection.xconf"
decl_stmt|;
specifier|final
name|NodeList
name|mockConfigNodes
init|=
name|createMock
argument_list|(
name|NodeList
operator|.
name|class
argument_list|)
decl_stmt|;
specifier|final
name|Element
name|mockConfigNode
init|=
name|createMock
argument_list|(
name|Element
operator|.
name|class
argument_list|)
decl_stmt|;
specifier|final
name|NodeList
name|mockCreates
init|=
name|createMock
argument_list|(
name|NodeList
operator|.
name|class
argument_list|)
decl_stmt|;
specifier|final
name|Document
name|mockCreateDocument
init|=
name|createMock
argument_list|(
name|Document
operator|.
name|class
argument_list|)
decl_stmt|;
specifier|final
name|Element
name|mockCreate
init|=
name|createMock
argument_list|(
name|Element
operator|.
name|class
argument_list|)
decl_stmt|;
specifier|final
name|NodeList
name|mockEmptyNodeList
init|=
name|createMock
argument_list|(
name|NodeList
operator|.
name|class
argument_list|)
decl_stmt|;
specifier|final
name|Logger
name|mockLogger
init|=
name|createMock
argument_list|(
name|Logger
operator|.
name|class
argument_list|)
decl_stmt|;
name|expect
argument_list|(
name|mockConfigNodes
operator|.
name|getLength
argument_list|()
argument_list|)
operator|.
name|andReturn
argument_list|(
literal|1
argument_list|)
operator|.
name|times
argument_list|(
literal|2
argument_list|)
expr_stmt|;
name|expect
argument_list|(
name|mockConfigNodes
operator|.
name|item
argument_list|(
literal|0
argument_list|)
argument_list|)
operator|.
name|andReturn
argument_list|(
name|mockConfigNode
argument_list|)
expr_stmt|;
name|expect
argument_list|(
name|mockConfigNode
operator|.
name|getNodeType
argument_list|()
argument_list|)
operator|.
name|andReturn
argument_list|(
name|Node
operator|.
name|ELEMENT_NODE
argument_list|)
expr_stmt|;
name|expect
argument_list|(
name|mockConfigNode
operator|.
name|getLocalName
argument_list|()
argument_list|)
operator|.
name|andReturn
argument_list|(
name|RangeIndexConfig
operator|.
name|CONFIG_ROOT
argument_list|)
expr_stmt|;
name|expect
argument_list|(
name|mockConfigNode
operator|.
name|getChildNodes
argument_list|()
argument_list|)
operator|.
name|andReturn
argument_list|(
name|mockCreates
argument_list|)
expr_stmt|;
name|expect
argument_list|(
name|mockCreates
operator|.
name|getLength
argument_list|()
argument_list|)
operator|.
name|andReturn
argument_list|(
literal|1
argument_list|)
operator|.
name|times
argument_list|(
literal|2
argument_list|)
expr_stmt|;
name|expect
argument_list|(
name|mockCreates
operator|.
name|item
argument_list|(
literal|0
argument_list|)
argument_list|)
operator|.
name|andReturn
argument_list|(
name|mockCreate
argument_list|)
expr_stmt|;
name|expect
argument_list|(
name|mockCreate
operator|.
name|getNodeType
argument_list|()
argument_list|)
operator|.
name|andReturn
argument_list|(
name|Node
operator|.
name|ELEMENT_NODE
argument_list|)
expr_stmt|;
name|expect
argument_list|(
name|mockCreate
operator|.
name|getLocalName
argument_list|()
argument_list|)
operator|.
name|andReturn
argument_list|(
name|RangeIndexConfig
operator|.
name|CREATE_ELEM
argument_list|)
expr_stmt|;
comment|// skip getFieldsAndConditions
name|expect
argument_list|(
name|mockCreate
operator|.
name|getChildNodes
argument_list|()
argument_list|)
operator|.
name|andReturn
argument_list|(
name|mockEmptyNodeList
argument_list|)
expr_stmt|;
name|expect
argument_list|(
name|mockEmptyNodeList
operator|.
name|getLength
argument_list|()
argument_list|)
operator|.
name|andReturn
argument_list|(
literal|0
argument_list|)
expr_stmt|;
name|expect
argument_list|(
name|mockCreate
operator|.
name|getAttribute
argument_list|(
name|MATCH_ATTR
argument_list|)
argument_list|)
operator|.
name|andReturn
argument_list|(
literal|null
argument_list|)
expr_stmt|;
name|expect
argument_list|(
name|mockCreate
operator|.
name|hasAttribute
argument_list|(
name|QNAME_ATTR
argument_list|)
argument_list|)
operator|.
name|andReturn
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|expect
argument_list|(
name|mockCreate
operator|.
name|getAttribute
argument_list|(
name|QNAME_ATTR
argument_list|)
argument_list|)
operator|.
name|andReturn
argument_list|(
name|badCreateQName
argument_list|)
expr_stmt|;
name|expect
argument_list|(
name|mockCreate
operator|.
name|getOwnerDocument
argument_list|()
argument_list|)
operator|.
name|andReturn
argument_list|(
name|mockCreateDocument
argument_list|)
expr_stmt|;
name|expect
argument_list|(
name|mockCreateDocument
operator|.
name|getDocumentURI
argument_list|()
argument_list|)
operator|.
name|andReturn
argument_list|(
name|mockCollectionXConfUri
argument_list|)
expr_stmt|;
specifier|final
name|Capture
argument_list|<
name|String
argument_list|>
name|errorMsgCapture
init|=
name|newCapture
argument_list|()
decl_stmt|;
name|mockLogger
operator|.
name|error
argument_list|(
name|capture
argument_list|(
name|errorMsgCapture
argument_list|)
argument_list|)
expr_stmt|;
name|replay
argument_list|(
name|mockConfigNodes
argument_list|,
name|mockConfigNode
argument_list|,
name|mockCreates
argument_list|,
name|mockCreateDocument
argument_list|,
name|mockCreate
argument_list|,
name|mockEmptyNodeList
argument_list|,
name|mockLogger
argument_list|)
expr_stmt|;
specifier|final
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|namespaces
init|=
operator|new
name|HashMap
argument_list|<>
argument_list|()
decl_stmt|;
name|namespaces
operator|.
name|put
argument_list|(
literal|"tei"
argument_list|,
literal|"http://www.tei-c.org/ns/1.0"
argument_list|)
expr_stmt|;
name|overrideLogger
argument_list|(
name|RangeIndexConfig
operator|.
name|class
argument_list|,
name|mockLogger
argument_list|)
expr_stmt|;
specifier|final
name|RangeIndexConfig
name|config
init|=
operator|new
name|RangeIndexConfig
argument_list|(
name|mockConfigNodes
argument_list|,
name|namespaces
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
name|errorMsgCapture
operator|.
name|getValue
argument_list|()
operator|.
name|contains
argument_list|(
literal|"Illegal QName: '"
operator|+
name|badCreateQName
operator|+
literal|"'.. QName is invalid: INVALID_LOCAL_PART"
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|errorMsgCapture
operator|.
name|getValue
argument_list|()
operator|.
name|contains
argument_list|(
literal|"("
operator|+
name|mockCollectionXConfUri
operator|+
literal|")"
argument_list|)
argument_list|)
expr_stmt|;
name|verify
argument_list|(
name|mockConfigNodes
argument_list|,
name|mockConfigNode
argument_list|,
name|mockCreates
argument_list|,
name|mockCreateDocument
argument_list|,
name|mockCreate
argument_list|,
name|mockEmptyNodeList
argument_list|,
name|mockLogger
argument_list|)
expr_stmt|;
block|}
specifier|private
name|void
name|overrideLogger
parameter_list|(
specifier|final
name|Class
name|clazz
parameter_list|,
specifier|final
name|Logger
name|logger
parameter_list|)
throws|throws
name|NoSuchFieldException
throws|,
name|IllegalAccessException
block|{
specifier|final
name|Field
name|loggerField
init|=
name|clazz
operator|.
name|getDeclaredField
argument_list|(
literal|"LOG"
argument_list|)
decl_stmt|;
comment|// allow access to private field
name|loggerField
operator|.
name|setAccessible
argument_list|(
literal|true
argument_list|)
expr_stmt|;
comment|// remove final modifier
specifier|final
name|Field
name|modifiersField
init|=
name|Field
operator|.
name|class
operator|.
name|getDeclaredField
argument_list|(
literal|"modifiers"
argument_list|)
decl_stmt|;
name|modifiersField
operator|.
name|setAccessible
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|modifiersField
operator|.
name|setInt
argument_list|(
name|loggerField
argument_list|,
name|loggerField
operator|.
name|getModifiers
argument_list|()
operator|&
operator|~
name|Modifier
operator|.
name|FINAL
argument_list|)
expr_stmt|;
name|loggerField
operator|.
name|set
argument_list|(
literal|null
argument_list|,
name|logger
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

