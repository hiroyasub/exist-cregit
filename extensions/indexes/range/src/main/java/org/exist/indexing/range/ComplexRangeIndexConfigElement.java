begin_unit|revision:1.0.0;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  *  eXist Open Source Native XML Database  *  Copyright (C) 2013 The eXist Project  *  http://exist-db.org  *  *  This program is free software; you can redistribute it and/or  *  modify it under the terms of the GNU Lesser General Public License  *  as published by the Free Software Foundation; either version 2  *  of the License, or (at your option) any later version.  *  *  This program is distributed in the hope that it will be useful,  *  but WITHOUT ANY WARRANTY; without even the implied warranty of  *  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the  *  GNU Lesser General Public License for more details.  *  *  You should have received a copy of the GNU Lesser General Public  *  License along with this library; if not, write to the Free Software  *  Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA  02110-1301  USA  *  *  $Id$  */
end_comment

begin_package
package|package
name|org
operator|.
name|exist
operator|.
name|indexing
operator|.
name|range
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|logging
operator|.
name|log4j
operator|.
name|LogManager
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|logging
operator|.
name|log4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|analysis
operator|.
name|Analyzer
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|dom
operator|.
name|QName
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|storage
operator|.
name|NodePath
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|util
operator|.
name|DatabaseConfigurationException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|xquery
operator|.
name|Predicate
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|xquery
operator|.
name|value
operator|.
name|Type
import|;
end_import

begin_import
import|import
name|org
operator|.
name|w3c
operator|.
name|dom
operator|.
name|Element
import|;
end_import

begin_import
import|import
name|org
operator|.
name|w3c
operator|.
name|dom
operator|.
name|Node
import|;
end_import

begin_import
import|import
name|org
operator|.
name|w3c
operator|.
name|dom
operator|.
name|NodeList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|*
import|;
end_import

begin_class
specifier|public
class|class
name|ComplexRangeIndexConfigElement
extends|extends
name|RangeIndexConfigElement
block|{
specifier|public
specifier|static
specifier|final
name|Comparator
argument_list|<
name|ComplexRangeIndexConfigElement
argument_list|>
name|NUM_CONDITIONS_COMPARATOR
init|=
name|Comparator
operator|.
name|comparingInt
argument_list|(
name|ComplexRangeIndexConfigElement
operator|::
name|getNumberOfConditions
argument_list|)
operator|.
name|reversed
argument_list|()
decl_stmt|;
specifier|public
specifier|final
specifier|static
name|String
name|FIELD_ELEMENT
init|=
literal|"field"
decl_stmt|;
specifier|public
specifier|final
specifier|static
name|String
name|CONDITION_ELEMENT
init|=
literal|"condition"
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|Logger
name|LOG
init|=
name|LogManager
operator|.
name|getLogger
argument_list|(
name|ComplexRangeIndexConfigElement
operator|.
name|class
argument_list|)
decl_stmt|;
specifier|private
name|Map
argument_list|<
name|String
argument_list|,
name|RangeIndexConfigField
argument_list|>
name|fields
init|=
operator|new
name|HashMap
argument_list|<
name|String
argument_list|,
name|RangeIndexConfigField
argument_list|>
argument_list|()
decl_stmt|;
specifier|protected
name|ArrayList
argument_list|<
name|RangeIndexConfigCondition
argument_list|>
name|conditions
init|=
operator|new
name|ArrayList
argument_list|<
name|RangeIndexConfigCondition
argument_list|>
argument_list|()
decl_stmt|;
specifier|public
name|ArrayList
argument_list|<
name|RangeIndexConfigCondition
argument_list|>
name|getConditions
parameter_list|()
block|{
return|return
name|conditions
return|;
block|}
specifier|public
name|int
name|getNumberOfConditions
parameter_list|()
block|{
return|return
name|conditions
operator|.
name|size
argument_list|()
return|;
block|}
specifier|public
name|ComplexRangeIndexConfigElement
parameter_list|(
specifier|final
name|Element
name|node
parameter_list|,
specifier|final
name|NodeList
name|children
parameter_list|,
specifier|final
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|namespaces
parameter_list|)
throws|throws
name|DatabaseConfigurationException
block|{
name|super
argument_list|(
name|node
argument_list|,
name|namespaces
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|children
operator|.
name|getLength
argument_list|()
condition|;
name|i
operator|++
control|)
block|{
name|Node
name|child
init|=
name|children
operator|.
name|item
argument_list|(
name|i
argument_list|)
decl_stmt|;
if|if
condition|(
name|child
operator|.
name|getNodeType
argument_list|()
operator|==
name|Node
operator|.
name|ELEMENT_NODE
condition|)
block|{
if|if
condition|(
name|FIELD_ELEMENT
operator|.
name|equals
argument_list|(
name|child
operator|.
name|getLocalName
argument_list|()
argument_list|)
condition|)
block|{
name|RangeIndexConfigField
name|field
init|=
operator|new
name|RangeIndexConfigField
argument_list|(
name|path
argument_list|,
operator|(
name|Element
operator|)
name|child
argument_list|,
name|namespaces
argument_list|)
decl_stmt|;
name|fields
operator|.
name|put
argument_list|(
name|field
operator|.
name|getName
argument_list|()
argument_list|,
name|field
argument_list|)
expr_stmt|;
block|}
if|else if
condition|(
name|CONDITION_ELEMENT
operator|.
name|equals
argument_list|(
name|child
operator|.
name|getLocalName
argument_list|()
argument_list|)
condition|)
block|{
name|conditions
operator|.
name|add
argument_list|(
operator|new
name|RangeIndexConfigAttributeCondition
argument_list|(
operator|(
name|Element
operator|)
name|child
argument_list|,
name|path
argument_list|)
argument_list|)
expr_stmt|;
block|}
if|else if
condition|(
name|FILTER_ELEMENT
operator|.
name|equals
argument_list|(
name|child
operator|.
name|getLocalName
argument_list|()
argument_list|)
condition|)
block|{
name|analyzer
operator|.
name|addFilter
argument_list|(
operator|(
name|Element
operator|)
name|child
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|LOG
operator|.
name|warn
argument_list|(
literal|"Invalid element encountered for range index configuration: "
operator|+
name|child
operator|.
name|getLocalName
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|isComplex
parameter_list|()
block|{
return|return
literal|true
return|;
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|isCaseSensitive
parameter_list|(
name|String
name|fieldName
parameter_list|)
block|{
for|for
control|(
name|RangeIndexConfigField
name|field
range|:
name|fields
operator|.
name|values
argument_list|()
control|)
block|{
if|if
condition|(
name|fieldName
operator|!=
literal|null
operator|&&
name|fieldName
operator|.
name|equals
argument_list|(
name|field
operator|.
name|getName
argument_list|()
argument_list|)
condition|)
block|{
return|return
name|field
operator|.
name|isCaseSensitive
argument_list|()
return|;
block|}
block|}
return|return
name|caseSensitive
return|;
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|match
parameter_list|(
name|NodePath
name|other
parameter_list|)
block|{
if|if
condition|(
name|isQNameIndex
condition|)
block|{
specifier|final
name|QName
name|qn1
init|=
name|path
operator|.
name|getLastComponent
argument_list|()
decl_stmt|;
specifier|final
name|QName
name|qn2
init|=
name|other
operator|.
name|getLastComponent
argument_list|()
decl_stmt|;
return|return
name|qn1
operator|.
name|getNameType
argument_list|()
operator|==
name|qn2
operator|.
name|getNameType
argument_list|()
operator|&&
name|qn2
operator|.
name|equals
argument_list|(
name|qn1
argument_list|)
return|;
block|}
return|return
name|path
operator|.
name|match
argument_list|(
name|other
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|find
parameter_list|(
name|NodePath
name|other
parameter_list|)
block|{
return|return
operator|(
name|getField
argument_list|(
name|other
argument_list|)
operator|!=
literal|null
operator|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|TextCollector
name|getCollector
parameter_list|(
name|NodePath
name|path
parameter_list|)
block|{
return|return
operator|new
name|ComplexTextCollector
argument_list|(
name|this
argument_list|,
name|path
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|Analyzer
name|getAnalyzer
parameter_list|(
name|String
name|fieldName
parameter_list|)
block|{
if|if
condition|(
name|fields
operator|.
name|containsKey
argument_list|(
name|fieldName
argument_list|)
condition|)
block|{
return|return
name|analyzer
return|;
block|}
return|return
literal|null
return|;
block|}
specifier|public
name|RangeIndexConfigField
name|getField
parameter_list|(
name|NodePath
name|path
parameter_list|)
block|{
for|for
control|(
name|RangeIndexConfigField
name|field
range|:
name|fields
operator|.
name|values
argument_list|()
control|)
block|{
if|if
condition|(
name|field
operator|.
name|match
argument_list|(
name|path
argument_list|)
condition|)
return|return
name|field
return|;
block|}
return|return
literal|null
return|;
block|}
specifier|public
name|RangeIndexConfigField
name|getField
parameter_list|(
name|NodePath
name|parentPath
parameter_list|,
name|NodePath
name|path
parameter_list|)
block|{
for|for
control|(
name|RangeIndexConfigField
name|field
range|:
name|fields
operator|.
name|values
argument_list|()
control|)
block|{
if|if
condition|(
name|field
operator|.
name|match
argument_list|(
name|parentPath
argument_list|,
name|path
argument_list|)
condition|)
return|return
name|field
return|;
block|}
return|return
literal|null
return|;
block|}
annotation|@
name|Override
specifier|public
name|int
name|getType
parameter_list|(
name|String
name|fieldName
parameter_list|)
block|{
name|RangeIndexConfigField
name|field
init|=
name|fields
operator|.
name|get
argument_list|(
name|fieldName
argument_list|)
decl_stmt|;
if|if
condition|(
name|field
operator|!=
literal|null
condition|)
block|{
return|return
name|field
operator|.
name|getType
argument_list|()
return|;
block|}
return|return
name|Type
operator|.
name|ITEM
return|;
block|}
annotation|@
name|Override
specifier|public
name|org
operator|.
name|exist
operator|.
name|indexing
operator|.
name|range
operator|.
name|conversion
operator|.
name|TypeConverter
name|getTypeConverter
parameter_list|(
name|String
name|fieldName
parameter_list|)
block|{
name|RangeIndexConfigField
name|field
init|=
name|fields
operator|.
name|get
argument_list|(
name|fieldName
argument_list|)
decl_stmt|;
if|if
condition|(
name|field
operator|!=
literal|null
condition|)
block|{
return|return
name|field
operator|.
name|getTypeConverter
argument_list|()
return|;
block|}
return|return
literal|null
return|;
block|}
specifier|public
name|boolean
name|matchConditions
parameter_list|(
name|Node
name|node
parameter_list|)
block|{
for|for
control|(
name|RangeIndexConfigCondition
name|condition
range|:
name|conditions
control|)
block|{
if|if
condition|(
operator|!
name|condition
operator|.
name|matches
argument_list|(
name|node
argument_list|)
condition|)
return|return
literal|false
return|;
block|}
return|return
literal|true
return|;
block|}
specifier|public
name|boolean
name|findCondition
parameter_list|(
name|Predicate
name|predicate
parameter_list|)
block|{
for|for
control|(
name|RangeIndexConfigCondition
name|condition
range|:
name|conditions
control|)
block|{
if|if
condition|(
name|condition
operator|.
name|find
argument_list|(
name|predicate
argument_list|)
condition|)
return|return
literal|true
return|;
block|}
return|return
literal|false
return|;
block|}
block|}
end_class

end_unit

