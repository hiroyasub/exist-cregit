begin_unit|revision:1.0.0;language:Java;cregit-version:0.0.1
begin_package
package|package
name|org
operator|.
name|exist
operator|.
name|xquery
operator|.
name|modules
operator|.
name|range
package|;
end_package

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|indexing
operator|.
name|range
operator|.
name|*
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|storage
operator|.
name|NodePath
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|xquery
operator|.
name|*
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|xquery
operator|.
name|value
operator|.
name|StringValue
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_comment
comment|/**  * Query rewriter for the range index. May replace path expressions like a[b = "c"] or a[b = "c"][d = "e"]  * with either a[range:equals(b, "c")] or range:field-equals("  */
end_comment

begin_class
specifier|public
class|class
name|RangeQueryRewriter
extends|extends
name|QueryRewriter
block|{
specifier|private
specifier|final
name|RangeIndexWorker
name|worker
decl_stmt|;
specifier|private
specifier|final
name|List
argument_list|<
name|Object
argument_list|>
name|configs
decl_stmt|;
specifier|public
name|RangeQueryRewriter
parameter_list|(
name|RangeIndexWorker
name|worker
parameter_list|,
name|List
argument_list|<
name|Object
argument_list|>
name|configs
parameter_list|,
name|XQueryContext
name|context
parameter_list|)
block|{
name|super
argument_list|(
name|context
argument_list|)
expr_stmt|;
name|this
operator|.
name|worker
operator|=
name|worker
expr_stmt|;
name|this
operator|.
name|configs
operator|=
name|configs
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|rewriteLocationStep
parameter_list|(
name|LocationStep
name|locationStep
parameter_list|)
throws|throws
name|XPathException
block|{
if|if
condition|(
name|locationStep
operator|.
name|hasPredicates
argument_list|()
condition|)
block|{
name|Expression
name|parentExpr
init|=
name|locationStep
operator|.
name|getParentExpression
argument_list|()
decl_stmt|;
if|if
condition|(
operator|!
operator|(
name|parentExpr
operator|instanceof
name|RewritableExpression
operator|)
condition|)
block|{
return|return
literal|true
return|;
block|}
specifier|final
name|List
argument_list|<
name|Predicate
argument_list|>
name|preds
init|=
name|locationStep
operator|.
name|getPredicates
argument_list|()
decl_stmt|;
comment|// flag to indicate if entire expression can be rewritten
name|boolean
name|rewriteAll
init|=
literal|true
decl_stmt|;
comment|// get path of path expression before the predicates
name|NodePath
name|contextPath
init|=
name|toNodePath
argument_list|(
name|getPrecedingSteps
argument_list|(
name|locationStep
argument_list|)
argument_list|)
decl_stmt|;
name|List
argument_list|<
name|Expression
argument_list|>
name|args
init|=
literal|null
decl_stmt|;
name|SequenceConstructor
name|arg0
init|=
literal|null
decl_stmt|;
comment|// walk through the predicates attached to the current location step
comment|// check if expression can be optimized
for|for
control|(
specifier|final
name|Predicate
name|pred
range|:
name|preds
control|)
block|{
if|if
condition|(
name|pred
operator|.
name|getLength
argument_list|()
operator|!=
literal|1
condition|)
block|{
comment|// can only optimize predicates with one expression
continue|continue;
block|}
name|Expression
name|innerExpr
init|=
name|pred
operator|.
name|getExpression
argument_list|(
literal|0
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
operator|(
name|innerExpr
operator|instanceof
name|GeneralComparison
operator|)
condition|)
block|{
comment|// can only optimize comparisons
continue|continue;
block|}
name|GeneralComparison
name|comparison
init|=
operator|(
name|GeneralComparison
operator|)
name|innerExpr
decl_stmt|;
name|List
argument_list|<
name|LocationStep
argument_list|>
name|steps
init|=
name|BasicExpressionVisitor
operator|.
name|findLocationSteps
argument_list|(
name|comparison
operator|.
name|getLeft
argument_list|()
argument_list|)
decl_stmt|;
comment|// compute left hand path
name|NodePath
name|innerPath
init|=
name|toNodePath
argument_list|(
name|steps
argument_list|)
decl_stmt|;
if|if
condition|(
name|innerPath
operator|==
literal|null
condition|)
block|{
name|rewriteAll
operator|=
literal|false
expr_stmt|;
continue|continue;
block|}
name|NodePath
name|path
decl_stmt|;
if|if
condition|(
name|contextPath
operator|==
literal|null
condition|)
block|{
comment|// without context path, we cannot rewrite the entire query
comment|// but we may still be able to optimize the predicate itself
name|path
operator|=
name|innerPath
expr_stmt|;
name|rewriteAll
operator|=
literal|false
expr_stmt|;
block|}
else|else
block|{
name|path
operator|=
operator|new
name|NodePath
argument_list|(
name|contextPath
argument_list|)
expr_stmt|;
name|path
operator|.
name|append
argument_list|(
name|innerPath
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|path
operator|.
name|length
argument_list|()
operator|>
literal|0
condition|)
block|{
comment|// find a range index configuration matching the full path to the predicate expression
name|RangeIndexConfigElement
name|rice
init|=
name|findConfiguration
argument_list|(
name|path
argument_list|)
decl_stmt|;
if|if
condition|(
name|rice
operator|!=
literal|null
condition|)
block|{
comment|// found index configuration with sub-fields
if|if
condition|(
name|rice
operator|.
name|isComplex
argument_list|()
operator|&&
name|rewriteAll
operator|&&
name|rice
operator|.
name|getNodePath
argument_list|()
operator|.
name|match
argument_list|(
name|contextPath
argument_list|)
condition|)
block|{
comment|// check for a matching sub-path and retrieve field information
name|RangeIndexConfigField
name|field
init|=
operator|(
operator|(
name|ComplexRangeIndexConfigElement
operator|)
name|rice
operator|)
operator|.
name|getField
argument_list|(
name|path
argument_list|)
decl_stmt|;
if|if
condition|(
name|field
operator|!=
literal|null
condition|)
block|{
if|if
condition|(
name|args
operator|==
literal|null
condition|)
block|{
comment|// initialize args
name|args
operator|=
operator|new
name|ArrayList
argument_list|<
name|Expression
argument_list|>
argument_list|(
literal|4
argument_list|)
expr_stmt|;
name|arg0
operator|=
operator|new
name|SequenceConstructor
argument_list|(
name|getContext
argument_list|()
argument_list|)
expr_stmt|;
name|args
operator|.
name|add
argument_list|(
name|arg0
argument_list|)
expr_stmt|;
block|}
comment|// field is added to the sequence in first parameter
name|arg0
operator|.
name|add
argument_list|(
operator|new
name|LiteralValue
argument_list|(
name|getContext
argument_list|()
argument_list|,
operator|new
name|StringValue
argument_list|(
name|field
operator|.
name|getName
argument_list|()
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
comment|// append right hand expression as additional parameter
name|args
operator|.
name|add
argument_list|(
name|comparison
operator|.
name|getRight
argument_list|()
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|rewriteAll
operator|=
literal|false
expr_stmt|;
block|}
block|}
else|else
block|{
comment|// found simple index configuration: replace with call to range:equals
if|if
condition|(
name|comparison
operator|.
name|getRelation
argument_list|()
operator|==
name|Constants
operator|.
name|EQ
condition|)
block|{
name|ArrayList
argument_list|<
name|Expression
argument_list|>
name|eqArgs
init|=
operator|new
name|ArrayList
argument_list|<
name|Expression
argument_list|>
argument_list|(
literal|2
argument_list|)
decl_stmt|;
name|eqArgs
operator|.
name|add
argument_list|(
name|comparison
operator|.
name|getLeft
argument_list|()
argument_list|)
expr_stmt|;
name|eqArgs
operator|.
name|add
argument_list|(
name|comparison
operator|.
name|getRight
argument_list|()
argument_list|)
expr_stmt|;
name|Lookup
name|func
init|=
operator|new
name|Lookup
argument_list|(
name|getContext
argument_list|()
argument_list|,
name|Lookup
operator|.
name|signatures
index|[
literal|0
index|]
argument_list|)
decl_stmt|;
name|func
operator|.
name|setArguments
argument_list|(
name|eqArgs
argument_list|)
expr_stmt|;
name|pred
operator|.
name|replace
argument_list|(
name|comparison
argument_list|,
operator|new
name|InternalFunctionCall
argument_list|(
name|func
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|rewriteAll
operator|=
literal|false
expr_stmt|;
block|}
block|}
else|else
block|{
name|rewriteAll
operator|=
literal|false
expr_stmt|;
block|}
block|}
else|else
block|{
name|rewriteAll
operator|=
literal|false
expr_stmt|;
block|}
block|}
if|if
condition|(
name|rewriteAll
operator|&&
name|args
operator|!=
literal|null
condition|)
block|{
comment|// the entire filter expression can be replaced
name|RewritableExpression
name|parent
init|=
operator|(
name|RewritableExpression
operator|)
name|parentExpr
decl_stmt|;
comment|// create range:field-equals function
name|FieldLookup
name|func
init|=
operator|new
name|FieldLookup
argument_list|(
name|getContext
argument_list|()
argument_list|,
name|FieldLookup
operator|.
name|signatures
index|[
literal|0
index|]
argument_list|)
decl_stmt|;
name|func
operator|.
name|setArguments
argument_list|(
name|args
argument_list|)
expr_stmt|;
name|parent
operator|.
name|replace
argument_list|(
name|locationStep
argument_list|,
operator|new
name|InternalFunctionCall
argument_list|(
name|func
argument_list|)
argument_list|)
expr_stmt|;
return|return
literal|false
return|;
block|}
block|}
return|return
literal|true
return|;
block|}
comment|/**      * Scan all index configurations to find one matching path.      */
specifier|private
name|RangeIndexConfigElement
name|findConfiguration
parameter_list|(
name|NodePath
name|path
parameter_list|)
block|{
for|for
control|(
name|Object
name|configObj
range|:
name|configs
control|)
block|{
specifier|final
name|RangeIndexConfig
name|config
init|=
operator|(
name|RangeIndexConfig
operator|)
name|configObj
decl_stmt|;
specifier|final
name|RangeIndexConfigElement
name|rice
init|=
name|config
operator|.
name|find
argument_list|(
name|path
argument_list|)
decl_stmt|;
if|if
condition|(
name|rice
operator|!=
literal|null
condition|)
block|{
return|return
name|rice
return|;
block|}
block|}
return|return
literal|null
return|;
block|}
specifier|private
name|NodePath
name|toNodePath
parameter_list|(
name|List
argument_list|<
name|LocationStep
argument_list|>
name|steps
parameter_list|)
block|{
name|NodePath
name|path
init|=
operator|new
name|NodePath
argument_list|()
decl_stmt|;
for|for
control|(
name|LocationStep
name|step
range|:
name|steps
control|)
block|{
if|if
condition|(
name|step
operator|==
literal|null
condition|)
block|{
return|return
literal|null
return|;
block|}
name|NodeTest
name|test
init|=
name|step
operator|.
name|getTest
argument_list|()
decl_stmt|;
if|if
condition|(
operator|!
name|test
operator|.
name|isWildcardTest
argument_list|()
operator|&&
name|test
operator|.
name|getName
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|int
name|axis
init|=
name|step
operator|.
name|getAxis
argument_list|()
decl_stmt|;
if|if
condition|(
name|axis
operator|==
name|Constants
operator|.
name|DESCENDANT_AXIS
operator|||
name|axis
operator|==
name|Constants
operator|.
name|DESCENDANT_SELF_AXIS
condition|)
block|{
name|path
operator|.
name|addComponent
argument_list|(
name|NodePath
operator|.
name|SKIP
argument_list|)
expr_stmt|;
block|}
if|else if
condition|(
name|axis
operator|!=
name|Constants
operator|.
name|CHILD_AXIS
operator|&&
name|axis
operator|!=
name|Constants
operator|.
name|ATTRIBUTE_AXIS
condition|)
block|{
return|return
literal|null
return|;
comment|// not optimizable
block|}
name|path
operator|.
name|addComponent
argument_list|(
name|test
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
return|return
name|path
return|;
block|}
specifier|private
name|List
argument_list|<
name|LocationStep
argument_list|>
name|getPrecedingSteps
parameter_list|(
name|LocationStep
name|current
parameter_list|)
block|{
name|Expression
name|parentExpr
init|=
name|current
operator|.
name|getParentExpression
argument_list|()
decl_stmt|;
if|if
condition|(
operator|!
operator|(
name|parentExpr
operator|instanceof
name|RewritableExpression
operator|)
condition|)
block|{
return|return
literal|null
return|;
block|}
specifier|final
name|List
argument_list|<
name|LocationStep
argument_list|>
name|prevSteps
init|=
operator|new
name|ArrayList
argument_list|<
name|LocationStep
argument_list|>
argument_list|()
decl_stmt|;
name|prevSteps
operator|.
name|add
argument_list|(
name|current
argument_list|)
expr_stmt|;
name|RewritableExpression
name|parent
init|=
operator|(
name|RewritableExpression
operator|)
name|parentExpr
decl_stmt|;
name|Expression
name|previous
init|=
name|parent
operator|.
name|getPrevious
argument_list|(
name|current
argument_list|)
decl_stmt|;
if|if
condition|(
name|previous
operator|!=
literal|null
condition|)
block|{
while|while
condition|(
name|previous
operator|!=
literal|null
operator|&&
name|previous
operator|!=
name|parent
operator|.
name|getFirst
argument_list|()
operator|&&
name|previous
operator|instanceof
name|LocationStep
condition|)
block|{
specifier|final
name|LocationStep
name|prevStep
init|=
operator|(
name|LocationStep
operator|)
name|previous
decl_stmt|;
name|prevSteps
operator|.
name|add
argument_list|(
literal|0
argument_list|,
name|prevStep
argument_list|)
expr_stmt|;
name|previous
operator|=
name|parent
operator|.
name|getPrevious
argument_list|(
name|previous
argument_list|)
expr_stmt|;
block|}
block|}
return|return
name|prevSteps
return|;
block|}
block|}
end_class

end_unit

