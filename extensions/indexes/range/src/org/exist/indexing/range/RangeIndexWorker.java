begin_unit|revision:1.0.0;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  *  eXist Open Source Native XML Database  *  Copyright (C) 2013 The eXist Project  *  http://exist-db.org  *  *  This program is free software; you can redistribute it and/or  *  modify it under the terms of the GNU Lesser General Public License  *  as published by the Free Software Foundation; either version 2  *  of the License, or (at your option) any later version.  *  *  This program is distributed in the hope that it will be useful,  *  but WITHOUT ANY WARRANTY; without even the implied warranty of  *  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the  *  GNU Lesser General Public License for more details.  *  *  You should have received a copy of the GNU Lesser General Public  *  License along with this library; if not, write to the Free Software  *  Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA  02110-1301  USA  *  *  $Id$  */
end_comment

begin_package
package|package
name|org
operator|.
name|exist
operator|.
name|indexing
operator|.
name|range
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|util
operator|.
name|BytesRefBuilder
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|dom
operator|.
name|persistent
operator|.
name|ElementImpl
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|dom
operator|.
name|persistent
operator|.
name|NodeSet
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|dom
operator|.
name|persistent
operator|.
name|NewArrayNodeSet
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|dom
operator|.
name|persistent
operator|.
name|NodeHandle
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|dom
operator|.
name|persistent
operator|.
name|DocumentImpl
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|dom
operator|.
name|persistent
operator|.
name|IStoredNode
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|dom
operator|.
name|persistent
operator|.
name|AttrImpl
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|dom
operator|.
name|persistent
operator|.
name|DocumentSet
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|dom
operator|.
name|QName
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|dom
operator|.
name|persistent
operator|.
name|AbstractCharacterData
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|dom
operator|.
name|persistent
operator|.
name|NodeProxy
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|logging
operator|.
name|log4j
operator|.
name|LogManager
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|logging
operator|.
name|log4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|analysis
operator|.
name|Analyzer
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|analysis
operator|.
name|TokenStream
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|analysis
operator|.
name|tokenattributes
operator|.
name|TermToBytesRefAttribute
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|document
operator|.
name|*
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|index
operator|.
name|*
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|search
operator|.
name|*
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|util
operator|.
name|Bits
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|util
operator|.
name|BytesRef
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|util
operator|.
name|NumericUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|collections
operator|.
name|Collection
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|indexing
operator|.
name|*
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|indexing
operator|.
name|StreamListener
operator|.
name|ReindexMode
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|indexing
operator|.
name|lucene
operator|.
name|BinaryTokenStream
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|indexing
operator|.
name|lucene
operator|.
name|LuceneIndexWorker
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|indexing
operator|.
name|lucene
operator|.
name|LuceneUtil
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|numbering
operator|.
name|NodeId
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|security
operator|.
name|PermissionDeniedException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|storage
operator|.
name|DBBroker
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|storage
operator|.
name|ElementValue
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|storage
operator|.
name|IndexSpec
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|storage
operator|.
name|NodePath
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|storage
operator|.
name|btree
operator|.
name|DBException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|storage
operator|.
name|txn
operator|.
name|Txn
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|util
operator|.
name|ByteConversion
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|util
operator|.
name|DatabaseConfigurationException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|util
operator|.
name|Occurrences
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|xquery
operator|.
name|*
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|xquery
operator|.
name|modules
operator|.
name|range
operator|.
name|RangeQueryRewriter
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|xquery
operator|.
name|value
operator|.
name|*
import|;
end_import

begin_import
import|import
name|org
operator|.
name|w3c
operator|.
name|dom
operator|.
name|Node
import|;
end_import

begin_import
import|import
name|org
operator|.
name|w3c
operator|.
name|dom
operator|.
name|NodeList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|StringReader
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|*
import|;
end_import

begin_comment
comment|/**  * The main worker class for the range index.  *  * @author Wolfgang Meier  */
end_comment

begin_class
specifier|public
class|class
name|RangeIndexWorker
implements|implements
name|OrderedValuesIndex
implements|,
name|QNamedKeysIndex
block|{
specifier|private
specifier|static
specifier|final
name|Logger
name|LOG
init|=
name|LogManager
operator|.
name|getLogger
argument_list|(
name|RangeIndexWorker
operator|.
name|class
argument_list|)
decl_stmt|;
specifier|public
specifier|static
specifier|final
name|String
name|FIELD_NODE_ID
init|=
literal|"nodeId"
decl_stmt|;
specifier|public
specifier|static
specifier|final
name|String
name|FIELD_DOC_ID
init|=
literal|"docId"
decl_stmt|;
specifier|public
specifier|static
specifier|final
name|String
name|FIELD_ADDRESS
init|=
literal|"address"
decl_stmt|;
specifier|public
specifier|static
specifier|final
name|String
name|FIELD_ID
init|=
literal|"id"
decl_stmt|;
specifier|private
specifier|static
name|Set
argument_list|<
name|String
argument_list|>
name|LOAD_FIELDS
init|=
operator|new
name|TreeSet
argument_list|<
name|String
argument_list|>
argument_list|()
decl_stmt|;
static|static
block|{
name|LOAD_FIELDS
operator|.
name|add
argument_list|(
name|FIELD_DOC_ID
argument_list|)
expr_stmt|;
name|LOAD_FIELDS
operator|.
name|add
argument_list|(
name|FIELD_NODE_ID
argument_list|)
expr_stmt|;
block|}
specifier|private
specifier|final
name|RangeIndex
name|index
decl_stmt|;
specifier|private
specifier|final
name|DBBroker
name|broker
decl_stmt|;
specifier|private
name|IndexController
name|controller
decl_stmt|;
specifier|private
name|DocumentImpl
name|currentDoc
decl_stmt|;
specifier|private
name|ReindexMode
name|mode
init|=
name|ReindexMode
operator|.
name|STORE
decl_stmt|;
specifier|private
name|List
argument_list|<
name|RangeIndexDoc
argument_list|>
name|nodesToWrite
decl_stmt|;
specifier|private
name|Set
argument_list|<
name|NodeId
argument_list|>
name|nodesToRemove
init|=
literal|null
decl_stmt|;
specifier|private
name|RangeIndexConfig
name|config
init|=
literal|null
decl_stmt|;
specifier|private
name|RangeIndexListener
name|listener
init|=
operator|new
name|RangeIndexListener
argument_list|()
decl_stmt|;
specifier|private
name|Stack
argument_list|<
name|TextCollector
argument_list|>
name|contentStack
init|=
literal|null
decl_stmt|;
specifier|private
name|int
name|cachedNodesSize
init|=
literal|0
decl_stmt|;
specifier|private
name|int
name|maxCachedNodesSize
init|=
literal|4096
operator|*
literal|1024
decl_stmt|;
specifier|public
name|RangeIndexWorker
parameter_list|(
name|RangeIndex
name|index
parameter_list|,
name|DBBroker
name|broker
parameter_list|)
block|{
name|this
operator|.
name|index
operator|=
name|index
expr_stmt|;
name|this
operator|.
name|broker
operator|=
name|broker
expr_stmt|;
block|}
specifier|public
name|Query
name|toQuery
parameter_list|(
name|String
name|field
parameter_list|,
name|QName
name|qname
parameter_list|,
name|AtomicValue
name|content
parameter_list|,
name|RangeIndex
operator|.
name|Operator
name|operator
parameter_list|,
name|DocumentSet
name|docs
parameter_list|)
throws|throws
name|XPathException
block|{
specifier|final
name|int
name|type
init|=
name|content
operator|.
name|getType
argument_list|()
decl_stmt|;
name|BytesRef
name|bytes
decl_stmt|;
if|if
condition|(
name|Type
operator|.
name|subTypeOf
argument_list|(
name|type
argument_list|,
name|Type
operator|.
name|STRING
argument_list|)
condition|)
block|{
name|BytesRef
name|key
init|=
literal|null
decl_stmt|;
if|if
condition|(
name|operator
operator|!=
name|RangeIndex
operator|.
name|Operator
operator|.
name|MATCH
condition|)
block|{
name|key
operator|=
name|analyzeContent
argument_list|(
name|field
argument_list|,
name|qname
argument_list|,
name|content
operator|.
name|getStringValue
argument_list|()
argument_list|,
name|docs
argument_list|)
expr_stmt|;
block|}
name|WildcardQuery
name|query
decl_stmt|;
switch|switch
condition|(
name|operator
condition|)
block|{
case|case
name|EQ
case|:
return|return
operator|new
name|TermQuery
argument_list|(
operator|new
name|Term
argument_list|(
name|field
argument_list|,
name|key
argument_list|)
argument_list|)
return|;
case|case
name|NE
case|:
specifier|final
name|BooleanQuery
name|qnot
init|=
operator|new
name|BooleanQuery
argument_list|()
decl_stmt|;
name|bytes
operator|=
operator|new
name|BytesRef
argument_list|(
literal|"*"
argument_list|)
expr_stmt|;
name|query
operator|=
operator|new
name|WildcardQuery
argument_list|(
operator|new
name|Term
argument_list|(
name|field
argument_list|,
name|bytes
argument_list|)
argument_list|)
expr_stmt|;
name|query
operator|.
name|setRewriteMethod
argument_list|(
name|MultiTermQuery
operator|.
name|CONSTANT_SCORE_FILTER_REWRITE
argument_list|)
expr_stmt|;
name|qnot
operator|.
name|add
argument_list|(
name|query
argument_list|,
name|BooleanClause
operator|.
name|Occur
operator|.
name|MUST
argument_list|)
expr_stmt|;
name|qnot
operator|.
name|add
argument_list|(
operator|new
name|TermQuery
argument_list|(
operator|new
name|Term
argument_list|(
name|field
argument_list|,
name|key
argument_list|)
argument_list|)
argument_list|,
name|BooleanClause
operator|.
name|Occur
operator|.
name|MUST_NOT
argument_list|)
expr_stmt|;
return|return
name|qnot
return|;
case|case
name|STARTS_WITH
case|:
return|return
operator|new
name|PrefixQuery
argument_list|(
operator|new
name|Term
argument_list|(
name|field
argument_list|,
name|key
argument_list|)
argument_list|)
return|;
case|case
name|ENDS_WITH
case|:
name|bytes
operator|=
operator|new
name|BytesRef
argument_list|(
literal|"*"
argument_list|)
expr_stmt|;
name|bytes
operator|.
name|append
argument_list|(
name|key
argument_list|)
expr_stmt|;
name|query
operator|=
operator|new
name|WildcardQuery
argument_list|(
operator|new
name|Term
argument_list|(
name|field
argument_list|,
name|bytes
argument_list|)
argument_list|)
expr_stmt|;
name|query
operator|.
name|setRewriteMethod
argument_list|(
name|MultiTermQuery
operator|.
name|CONSTANT_SCORE_FILTER_REWRITE
argument_list|)
expr_stmt|;
return|return
name|query
return|;
case|case
name|CONTAINS
case|:
name|bytes
operator|=
operator|new
name|BytesRef
argument_list|(
literal|"*"
argument_list|)
expr_stmt|;
name|bytes
operator|.
name|append
argument_list|(
name|key
argument_list|)
expr_stmt|;
name|bytes
operator|.
name|append
argument_list|(
operator|new
name|BytesRef
argument_list|(
literal|"*"
argument_list|)
argument_list|)
expr_stmt|;
name|query
operator|=
operator|new
name|WildcardQuery
argument_list|(
operator|new
name|Term
argument_list|(
name|field
argument_list|,
name|bytes
argument_list|)
argument_list|)
expr_stmt|;
name|query
operator|.
name|setRewriteMethod
argument_list|(
name|MultiTermQuery
operator|.
name|CONSTANT_SCORE_FILTER_REWRITE
argument_list|)
expr_stmt|;
return|return
name|query
return|;
case|case
name|MATCH
case|:
name|RegexpQuery
name|regexQuery
init|=
operator|new
name|RegexpQuery
argument_list|(
operator|new
name|Term
argument_list|(
name|field
argument_list|,
name|content
operator|.
name|getStringValue
argument_list|()
argument_list|)
argument_list|)
decl_stmt|;
name|regexQuery
operator|.
name|setRewriteMethod
argument_list|(
name|MultiTermQuery
operator|.
name|CONSTANT_SCORE_FILTER_REWRITE
argument_list|)
expr_stmt|;
return|return
name|regexQuery
return|;
block|}
block|}
if|if
condition|(
name|operator
operator|==
name|RangeIndex
operator|.
name|Operator
operator|.
name|EQ
condition|)
block|{
return|return
operator|new
name|TermQuery
argument_list|(
operator|new
name|Term
argument_list|(
name|field
argument_list|,
name|RangeIndexConfigElement
operator|.
name|convertToBytes
argument_list|(
name|content
argument_list|)
argument_list|)
argument_list|)
return|;
block|}
if|if
condition|(
name|operator
operator|==
name|RangeIndex
operator|.
name|Operator
operator|.
name|NE
condition|)
block|{
specifier|final
name|BooleanQuery
name|nq
init|=
operator|new
name|BooleanQuery
argument_list|()
decl_stmt|;
name|nq
operator|.
name|add
argument_list|(
operator|new
name|MatchAllDocsQuery
argument_list|()
argument_list|,
name|BooleanClause
operator|.
name|Occur
operator|.
name|MUST
argument_list|)
expr_stmt|;
name|nq
operator|.
name|add
argument_list|(
operator|new
name|TermQuery
argument_list|(
operator|new
name|Term
argument_list|(
name|field
argument_list|,
name|RangeIndexConfigElement
operator|.
name|convertToBytes
argument_list|(
name|content
argument_list|)
argument_list|)
argument_list|)
argument_list|,
name|BooleanClause
operator|.
name|Occur
operator|.
name|MUST_NOT
argument_list|)
expr_stmt|;
return|return
name|nq
return|;
block|}
specifier|final
name|boolean
name|includeUpper
init|=
name|operator
operator|==
name|RangeIndex
operator|.
name|Operator
operator|.
name|LE
decl_stmt|;
specifier|final
name|boolean
name|includeLower
init|=
name|operator
operator|==
name|RangeIndex
operator|.
name|Operator
operator|.
name|GE
decl_stmt|;
switch|switch
condition|(
name|type
condition|)
block|{
case|case
name|Type
operator|.
name|INTEGER
case|:
case|case
name|Type
operator|.
name|LONG
case|:
case|case
name|Type
operator|.
name|UNSIGNED_LONG
case|:
if|if
condition|(
name|operator
operator|==
name|RangeIndex
operator|.
name|Operator
operator|.
name|LT
operator|||
name|operator
operator|==
name|RangeIndex
operator|.
name|Operator
operator|.
name|LE
condition|)
block|{
return|return
name|NumericRangeQuery
operator|.
name|newLongRange
argument_list|(
name|field
argument_list|,
literal|null
argument_list|,
operator|(
operator|(
name|NumericValue
operator|)
name|content
operator|)
operator|.
name|getLong
argument_list|()
argument_list|,
name|includeLower
argument_list|,
name|includeUpper
argument_list|)
return|;
block|}
else|else
block|{
return|return
name|NumericRangeQuery
operator|.
name|newLongRange
argument_list|(
name|field
argument_list|,
operator|(
operator|(
name|NumericValue
operator|)
name|content
operator|)
operator|.
name|getLong
argument_list|()
argument_list|,
literal|null
argument_list|,
name|includeLower
argument_list|,
name|includeUpper
argument_list|)
return|;
block|}
case|case
name|Type
operator|.
name|INT
case|:
case|case
name|Type
operator|.
name|UNSIGNED_INT
case|:
case|case
name|Type
operator|.
name|SHORT
case|:
case|case
name|Type
operator|.
name|UNSIGNED_SHORT
case|:
if|if
condition|(
name|operator
operator|==
name|RangeIndex
operator|.
name|Operator
operator|.
name|LT
operator|||
name|operator
operator|==
name|RangeIndex
operator|.
name|Operator
operator|.
name|LE
condition|)
block|{
return|return
name|NumericRangeQuery
operator|.
name|newIntRange
argument_list|(
name|field
argument_list|,
literal|null
argument_list|,
operator|(
operator|(
name|NumericValue
operator|)
name|content
operator|)
operator|.
name|getInt
argument_list|()
argument_list|,
name|includeLower
argument_list|,
name|includeUpper
argument_list|)
return|;
block|}
else|else
block|{
return|return
name|NumericRangeQuery
operator|.
name|newIntRange
argument_list|(
name|field
argument_list|,
operator|(
operator|(
name|NumericValue
operator|)
name|content
operator|)
operator|.
name|getInt
argument_list|()
argument_list|,
literal|null
argument_list|,
name|includeLower
argument_list|,
name|includeUpper
argument_list|)
return|;
block|}
case|case
name|Type
operator|.
name|DECIMAL
case|:
case|case
name|Type
operator|.
name|DOUBLE
case|:
if|if
condition|(
name|operator
operator|==
name|RangeIndex
operator|.
name|Operator
operator|.
name|LT
operator|||
name|operator
operator|==
name|RangeIndex
operator|.
name|Operator
operator|.
name|LE
condition|)
block|{
return|return
name|NumericRangeQuery
operator|.
name|newDoubleRange
argument_list|(
name|field
argument_list|,
literal|null
argument_list|,
operator|(
operator|(
name|NumericValue
operator|)
name|content
operator|)
operator|.
name|getDouble
argument_list|()
argument_list|,
name|includeLower
argument_list|,
name|includeUpper
argument_list|)
return|;
block|}
else|else
block|{
return|return
name|NumericRangeQuery
operator|.
name|newDoubleRange
argument_list|(
name|field
argument_list|,
operator|(
operator|(
name|NumericValue
operator|)
name|content
operator|)
operator|.
name|getDouble
argument_list|()
argument_list|,
literal|null
argument_list|,
name|includeLower
argument_list|,
name|includeUpper
argument_list|)
return|;
block|}
case|case
name|Type
operator|.
name|FLOAT
case|:
if|if
condition|(
name|operator
operator|==
name|RangeIndex
operator|.
name|Operator
operator|.
name|LT
operator|||
name|operator
operator|==
name|RangeIndex
operator|.
name|Operator
operator|.
name|LE
condition|)
block|{
return|return
name|NumericRangeQuery
operator|.
name|newFloatRange
argument_list|(
name|field
argument_list|,
literal|null
argument_list|,
operator|(
name|float
operator|)
operator|(
operator|(
name|NumericValue
operator|)
name|content
operator|)
operator|.
name|getDouble
argument_list|()
argument_list|,
name|includeLower
argument_list|,
name|includeUpper
argument_list|)
return|;
block|}
else|else
block|{
return|return
name|NumericRangeQuery
operator|.
name|newFloatRange
argument_list|(
name|field
argument_list|,
operator|(
name|float
operator|)
operator|(
operator|(
name|NumericValue
operator|)
name|content
operator|)
operator|.
name|getDouble
argument_list|()
argument_list|,
literal|null
argument_list|,
name|includeLower
argument_list|,
name|includeUpper
argument_list|)
return|;
block|}
case|case
name|Type
operator|.
name|DATE
case|:
name|long
name|dl
init|=
name|RangeIndexConfigElement
operator|.
name|dateToLong
argument_list|(
operator|(
name|DateValue
operator|)
name|content
argument_list|)
decl_stmt|;
if|if
condition|(
name|operator
operator|==
name|RangeIndex
operator|.
name|Operator
operator|.
name|LT
operator|||
name|operator
operator|==
name|RangeIndex
operator|.
name|Operator
operator|.
name|LE
condition|)
block|{
return|return
name|NumericRangeQuery
operator|.
name|newLongRange
argument_list|(
name|field
argument_list|,
literal|null
argument_list|,
name|dl
argument_list|,
name|includeLower
argument_list|,
name|includeUpper
argument_list|)
return|;
block|}
else|else
block|{
return|return
name|NumericRangeQuery
operator|.
name|newLongRange
argument_list|(
name|field
argument_list|,
name|dl
argument_list|,
literal|null
argument_list|,
name|includeLower
argument_list|,
name|includeUpper
argument_list|)
return|;
block|}
case|case
name|Type
operator|.
name|TIME
case|:
name|long
name|tl
init|=
name|RangeIndexConfigElement
operator|.
name|timeToLong
argument_list|(
operator|(
name|TimeValue
operator|)
name|content
argument_list|)
decl_stmt|;
if|if
condition|(
name|operator
operator|==
name|RangeIndex
operator|.
name|Operator
operator|.
name|LT
operator|||
name|operator
operator|==
name|RangeIndex
operator|.
name|Operator
operator|.
name|LE
condition|)
block|{
return|return
name|NumericRangeQuery
operator|.
name|newLongRange
argument_list|(
name|field
argument_list|,
literal|null
argument_list|,
name|tl
argument_list|,
name|includeLower
argument_list|,
name|includeUpper
argument_list|)
return|;
block|}
else|else
block|{
return|return
name|NumericRangeQuery
operator|.
name|newLongRange
argument_list|(
name|field
argument_list|,
name|tl
argument_list|,
literal|null
argument_list|,
name|includeLower
argument_list|,
name|includeUpper
argument_list|)
return|;
block|}
case|case
name|Type
operator|.
name|DATE_TIME
case|:
default|default:
if|if
condition|(
name|operator
operator|==
name|RangeIndex
operator|.
name|Operator
operator|.
name|LT
operator|||
name|operator
operator|==
name|RangeIndex
operator|.
name|Operator
operator|.
name|LE
condition|)
block|{
return|return
operator|new
name|TermRangeQuery
argument_list|(
name|field
argument_list|,
literal|null
argument_list|,
name|RangeIndexConfigElement
operator|.
name|convertToBytes
argument_list|(
name|content
argument_list|)
argument_list|,
name|includeLower
argument_list|,
name|includeUpper
argument_list|)
return|;
block|}
else|else
block|{
return|return
operator|new
name|TermRangeQuery
argument_list|(
name|field
argument_list|,
name|RangeIndexConfigElement
operator|.
name|convertToBytes
argument_list|(
name|content
argument_list|)
argument_list|,
literal|null
argument_list|,
name|includeLower
argument_list|,
name|includeUpper
argument_list|)
return|;
block|}
block|}
block|}
annotation|@
name|Override
specifier|public
name|String
name|getIndexId
parameter_list|()
block|{
return|return
name|index
operator|.
name|getIndexId
argument_list|()
return|;
block|}
annotation|@
name|Override
specifier|public
name|String
name|getIndexName
parameter_list|()
block|{
return|return
name|index
operator|.
name|getIndexName
argument_list|()
return|;
block|}
annotation|@
name|Override
specifier|public
name|Object
name|configure
parameter_list|(
name|IndexController
name|controller
parameter_list|,
name|NodeList
name|configNodes
parameter_list|,
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|namespaces
parameter_list|)
throws|throws
name|DatabaseConfigurationException
block|{
name|this
operator|.
name|controller
operator|=
name|controller
expr_stmt|;
name|LOG
operator|.
name|debug
argument_list|(
literal|"Configuring lucene index..."
argument_list|)
expr_stmt|;
return|return
operator|new
name|RangeIndexConfig
argument_list|(
name|configNodes
argument_list|,
name|namespaces
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|setDocument
parameter_list|(
name|DocumentImpl
name|document
parameter_list|)
block|{
name|setDocument
argument_list|(
name|document
argument_list|,
name|ReindexMode
operator|.
name|UNKNOWN
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|setDocument
parameter_list|(
name|DocumentImpl
name|document
parameter_list|,
name|ReindexMode
name|mode
parameter_list|)
block|{
name|this
operator|.
name|currentDoc
operator|=
name|document
expr_stmt|;
name|IndexSpec
name|indexConf
init|=
name|document
operator|.
name|getCollection
argument_list|()
operator|.
name|getIndexConfiguration
argument_list|(
name|broker
argument_list|)
decl_stmt|;
if|if
condition|(
name|indexConf
operator|!=
literal|null
condition|)
block|{
name|config
operator|=
operator|(
name|RangeIndexConfig
operator|)
name|indexConf
operator|.
name|getCustomIndexSpec
argument_list|(
name|RangeIndex
operator|.
name|ID
argument_list|)
expr_stmt|;
if|if
condition|(
name|config
operator|!=
literal|null
condition|)
comment|// Create a copy of the original RangeIndexConfig (there's only one per db instance),
comment|// so we can safely work with it.
name|config
operator|=
operator|new
name|RangeIndexConfig
argument_list|(
name|config
argument_list|)
expr_stmt|;
block|}
name|this
operator|.
name|mode
operator|=
name|mode
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|setMode
parameter_list|(
name|ReindexMode
name|mode
parameter_list|)
block|{
name|this
operator|.
name|mode
operator|=
name|mode
expr_stmt|;
switch|switch
condition|(
name|mode
condition|)
block|{
case|case
name|STORE
case|:
if|if
condition|(
name|nodesToWrite
operator|==
literal|null
condition|)
name|nodesToWrite
operator|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
expr_stmt|;
else|else
name|nodesToWrite
operator|.
name|clear
argument_list|()
expr_stmt|;
name|cachedNodesSize
operator|=
literal|0
expr_stmt|;
break|break;
case|case
name|REMOVE_SOME_NODES
case|:
name|nodesToRemove
operator|=
operator|new
name|TreeSet
argument_list|<>
argument_list|()
expr_stmt|;
break|break;
block|}
block|}
annotation|@
name|Override
specifier|public
name|DocumentImpl
name|getDocument
parameter_list|()
block|{
return|return
name|currentDoc
return|;
block|}
annotation|@
name|Override
specifier|public
name|ReindexMode
name|getMode
parameter_list|()
block|{
return|return
name|mode
return|;
block|}
annotation|@
name|Override
specifier|public
parameter_list|<
name|T
extends|extends
name|IStoredNode
parameter_list|>
name|IStoredNode
name|getReindexRoot
parameter_list|(
name|IStoredNode
argument_list|<
name|T
argument_list|>
name|node
parameter_list|,
name|NodePath
name|path
parameter_list|,
name|boolean
name|insert
parameter_list|,
name|boolean
name|includeSelf
parameter_list|)
block|{
comment|//        if (node.getNodeType() == Node.ATTRIBUTE_NODE)
comment|//            return null;
if|if
condition|(
name|config
operator|==
literal|null
condition|)
return|return
literal|null
return|;
name|NodePath
name|p
init|=
operator|new
name|NodePath
argument_list|(
name|path
argument_list|)
decl_stmt|;
name|boolean
name|reindexRequired
init|=
literal|false
decl_stmt|;
if|if
condition|(
name|node
operator|.
name|getNodeType
argument_list|()
operator|==
name|Node
operator|.
name|ELEMENT_NODE
operator|&&
operator|!
name|includeSelf
condition|)
name|p
operator|.
name|removeLastComponent
argument_list|()
expr_stmt|;
while|while
condition|(
name|p
operator|.
name|length
argument_list|()
operator|>
literal|0
condition|)
block|{
if|if
condition|(
name|config
operator|.
name|matches
argument_list|(
name|p
argument_list|)
condition|)
block|{
name|reindexRequired
operator|=
literal|true
expr_stmt|;
break|break;
block|}
name|p
operator|.
name|removeLastComponent
argument_list|()
expr_stmt|;
block|}
if|if
condition|(
name|reindexRequired
condition|)
block|{
name|p
operator|=
operator|new
name|NodePath
argument_list|(
name|path
argument_list|)
expr_stmt|;
name|IStoredNode
name|topMost
init|=
literal|null
decl_stmt|;
name|IStoredNode
name|currentNode
init|=
name|node
decl_stmt|;
if|if
condition|(
name|currentNode
operator|.
name|getNodeType
argument_list|()
operator|!=
name|Node
operator|.
name|ELEMENT_NODE
condition|)
name|currentNode
operator|=
name|currentNode
operator|.
name|getParentStoredNode
argument_list|()
expr_stmt|;
while|while
condition|(
name|currentNode
operator|!=
literal|null
condition|)
block|{
if|if
condition|(
name|config
operator|.
name|matches
argument_list|(
name|p
argument_list|)
condition|)
name|topMost
operator|=
name|currentNode
expr_stmt|;
name|currentNode
operator|=
name|currentNode
operator|.
name|getParentStoredNode
argument_list|()
expr_stmt|;
name|p
operator|.
name|removeLastComponent
argument_list|()
expr_stmt|;
block|}
return|return
name|topMost
return|;
block|}
return|return
literal|null
return|;
block|}
annotation|@
name|Override
specifier|public
name|QueryRewriter
name|getQueryRewriter
parameter_list|(
name|XQueryContext
name|context
parameter_list|)
block|{
return|return
operator|new
name|RangeQueryRewriter
argument_list|(
name|context
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|StreamListener
name|getListener
parameter_list|()
block|{
return|return
name|listener
return|;
block|}
annotation|@
name|Override
specifier|public
name|MatchListener
name|getMatchListener
parameter_list|(
name|DBBroker
name|broker
parameter_list|,
name|NodeProxy
name|proxy
parameter_list|)
block|{
comment|// range index does not support matches
return|return
literal|null
return|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|flush
parameter_list|()
block|{
switch|switch
condition|(
name|mode
condition|)
block|{
case|case
name|STORE
case|:
name|write
argument_list|()
expr_stmt|;
break|break;
case|case
name|REMOVE_SOME_NODES
case|:
name|removeNodes
argument_list|()
expr_stmt|;
break|break;
case|case
name|REMOVE_ALL_NODES
case|:
name|removeDocument
argument_list|(
name|currentDoc
operator|.
name|getDocId
argument_list|()
argument_list|)
expr_stmt|;
break|break;
block|}
block|}
annotation|@
name|Override
specifier|public
name|void
name|removeCollection
parameter_list|(
name|Collection
name|collection
parameter_list|,
name|DBBroker
name|broker
parameter_list|,
name|boolean
name|reindex
parameter_list|)
throws|throws
name|PermissionDeniedException
block|{
if|if
condition|(
name|LOG
operator|.
name|isDebugEnabled
argument_list|()
condition|)
name|LOG
operator|.
name|debug
argument_list|(
literal|"Removing collection "
operator|+
name|collection
operator|.
name|getURI
argument_list|()
argument_list|)
expr_stmt|;
name|IndexWriter
name|writer
init|=
literal|null
decl_stmt|;
try|try
block|{
name|writer
operator|=
name|index
operator|.
name|getWriter
argument_list|()
expr_stmt|;
for|for
control|(
name|Iterator
argument_list|<
name|DocumentImpl
argument_list|>
name|i
init|=
name|collection
operator|.
name|iterator
argument_list|(
name|broker
argument_list|)
init|;
name|i
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|DocumentImpl
name|doc
init|=
name|i
operator|.
name|next
argument_list|()
decl_stmt|;
specifier|final
name|BytesRefBuilder
name|bytes
init|=
operator|new
name|BytesRefBuilder
argument_list|()
decl_stmt|;
name|NumericUtils
operator|.
name|intToPrefixCoded
argument_list|(
name|doc
operator|.
name|getDocId
argument_list|()
argument_list|,
literal|0
argument_list|,
name|bytes
argument_list|)
expr_stmt|;
name|Term
name|dt
init|=
operator|new
name|Term
argument_list|(
name|FIELD_DOC_ID
argument_list|,
name|bytes
operator|.
name|toBytesRef
argument_list|()
argument_list|)
decl_stmt|;
name|writer
operator|.
name|deleteDocuments
argument_list|(
name|dt
argument_list|)
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|error
argument_list|(
literal|"Error while removing lucene index: "
operator|+
name|e
operator|.
name|getMessage
argument_list|()
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|PermissionDeniedException
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|error
argument_list|(
literal|"Error while removing lucene index: "
operator|+
name|e
operator|.
name|getMessage
argument_list|()
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
name|index
operator|.
name|releaseWriter
argument_list|(
name|writer
argument_list|)
expr_stmt|;
if|if
condition|(
name|reindex
condition|)
block|{
try|try
block|{
name|index
operator|.
name|sync
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|DBException
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|warn
argument_list|(
literal|"Exception during reindex: "
operator|+
name|e
operator|.
name|getMessage
argument_list|()
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
block|}
name|mode
operator|=
name|ReindexMode
operator|.
name|STORE
expr_stmt|;
block|}
if|if
condition|(
name|LOG
operator|.
name|isDebugEnabled
argument_list|()
condition|)
name|LOG
operator|.
name|debug
argument_list|(
literal|"Collection removed."
argument_list|)
expr_stmt|;
block|}
specifier|protected
name|void
name|removeDocument
parameter_list|(
name|int
name|docId
parameter_list|)
block|{
name|IndexWriter
name|writer
init|=
literal|null
decl_stmt|;
try|try
block|{
name|writer
operator|=
name|index
operator|.
name|getWriter
argument_list|()
expr_stmt|;
specifier|final
name|BytesRefBuilder
name|bytes
init|=
operator|new
name|BytesRefBuilder
argument_list|()
decl_stmt|;
name|NumericUtils
operator|.
name|intToPrefixCoded
argument_list|(
name|docId
argument_list|,
literal|0
argument_list|,
name|bytes
argument_list|)
expr_stmt|;
name|Term
name|dt
init|=
operator|new
name|Term
argument_list|(
name|FIELD_DOC_ID
argument_list|,
name|bytes
operator|.
name|toBytesRef
argument_list|()
argument_list|)
decl_stmt|;
name|writer
operator|.
name|deleteDocuments
argument_list|(
name|dt
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|warn
argument_list|(
literal|"Error while removing lucene index: "
operator|+
name|e
operator|.
name|getMessage
argument_list|()
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
name|index
operator|.
name|releaseWriter
argument_list|(
name|writer
argument_list|)
expr_stmt|;
name|mode
operator|=
name|ReindexMode
operator|.
name|STORE
expr_stmt|;
block|}
block|}
comment|/**      * Remove specific nodes from the index. This method is used for node updates      * and called from flush() if the worker is in {@link ReindexMode#REMOVE_SOME_NODES}      * mode.      */
specifier|protected
name|void
name|removeNodes
parameter_list|()
block|{
if|if
condition|(
name|nodesToRemove
operator|==
literal|null
condition|)
return|return;
name|IndexWriter
name|writer
init|=
literal|null
decl_stmt|;
try|try
block|{
name|writer
operator|=
name|index
operator|.
name|getWriter
argument_list|()
expr_stmt|;
for|for
control|(
name|NodeId
name|nodeId
range|:
name|nodesToRemove
control|)
block|{
comment|// build id from nodeId and docId
name|int
name|nodeIdLen
init|=
name|nodeId
operator|.
name|size
argument_list|()
decl_stmt|;
name|byte
index|[]
name|data
init|=
operator|new
name|byte
index|[
name|nodeIdLen
operator|+
literal|4
index|]
decl_stmt|;
name|ByteConversion
operator|.
name|intToByteH
argument_list|(
name|currentDoc
operator|.
name|getDocId
argument_list|()
argument_list|,
name|data
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|nodeId
operator|.
name|serialize
argument_list|(
name|data
argument_list|,
literal|4
argument_list|)
expr_stmt|;
name|Term
name|it
init|=
operator|new
name|Term
argument_list|(
name|FIELD_ID
argument_list|,
operator|new
name|BytesRef
argument_list|(
name|data
argument_list|)
argument_list|)
decl_stmt|;
name|TermQuery
name|iq
init|=
operator|new
name|TermQuery
argument_list|(
name|it
argument_list|)
decl_stmt|;
name|writer
operator|.
name|deleteDocuments
argument_list|(
name|iq
argument_list|)
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|warn
argument_list|(
literal|"Error while deleting lucene index entries: "
operator|+
name|e
operator|.
name|getMessage
argument_list|()
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
name|nodesToRemove
operator|=
literal|null
expr_stmt|;
name|index
operator|.
name|releaseWriter
argument_list|(
name|writer
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|checkIndex
parameter_list|(
name|DBBroker
name|broker
parameter_list|)
block|{
return|return
literal|false
return|;
comment|//To change body of implemented methods use File | Settings | File Templates.
block|}
specifier|protected
name|void
name|indexText
parameter_list|(
name|NodeHandle
name|nodeHandle
parameter_list|,
name|QName
name|qname
parameter_list|,
name|NodePath
name|path
parameter_list|,
name|RangeIndexConfigElement
name|config
parameter_list|,
name|TextCollector
name|collector
parameter_list|)
block|{
name|RangeIndexDoc
name|pending
init|=
operator|new
name|RangeIndexDoc
argument_list|(
name|nodeHandle
operator|.
name|getNodeId
argument_list|()
argument_list|,
name|qname
argument_list|,
name|path
argument_list|,
name|collector
argument_list|,
name|config
argument_list|)
decl_stmt|;
name|pending
operator|.
name|setAddress
argument_list|(
name|nodeHandle
operator|.
name|getInternalAddress
argument_list|()
argument_list|)
expr_stmt|;
name|nodesToWrite
operator|.
name|add
argument_list|(
name|pending
argument_list|)
expr_stmt|;
name|cachedNodesSize
operator|+=
name|collector
operator|.
name|length
argument_list|()
expr_stmt|;
if|if
condition|(
name|cachedNodesSize
operator|>
name|maxCachedNodesSize
condition|)
name|write
argument_list|()
expr_stmt|;
block|}
specifier|private
name|void
name|write
parameter_list|()
block|{
if|if
condition|(
name|nodesToWrite
operator|==
literal|null
operator|||
name|nodesToWrite
operator|.
name|size
argument_list|()
operator|==
literal|0
condition|)
return|return;
name|IndexWriter
name|writer
init|=
literal|null
decl_stmt|;
try|try
block|{
name|writer
operator|=
name|index
operator|.
name|getWriter
argument_list|()
expr_stmt|;
comment|// docId and nodeId are stored as doc value
name|IntDocValuesField
name|fDocId
init|=
operator|new
name|IntDocValuesField
argument_list|(
name|FIELD_DOC_ID
argument_list|,
literal|0
argument_list|)
decl_stmt|;
name|BinaryDocValuesField
name|fNodeId
init|=
operator|new
name|BinaryDocValuesField
argument_list|(
name|FIELD_NODE_ID
argument_list|,
operator|new
name|BytesRef
argument_list|(
literal|8
argument_list|)
argument_list|)
decl_stmt|;
name|BinaryDocValuesField
name|fAddress
init|=
operator|new
name|BinaryDocValuesField
argument_list|(
name|FIELD_ADDRESS
argument_list|,
operator|new
name|BytesRef
argument_list|(
literal|8
argument_list|)
argument_list|)
decl_stmt|;
comment|// docId also needs to be indexed
name|IntField
name|fDocIdIdx
init|=
operator|new
name|IntField
argument_list|(
name|FIELD_DOC_ID
argument_list|,
literal|0
argument_list|,
name|IntField
operator|.
name|TYPE_NOT_STORED
argument_list|)
decl_stmt|;
for|for
control|(
name|RangeIndexDoc
name|pending
range|:
name|nodesToWrite
control|)
block|{
name|Document
name|doc
init|=
operator|new
name|Document
argument_list|()
decl_stmt|;
name|fDocId
operator|.
name|setIntValue
argument_list|(
name|currentDoc
operator|.
name|getDocId
argument_list|()
argument_list|)
expr_stmt|;
name|doc
operator|.
name|add
argument_list|(
name|fDocId
argument_list|)
expr_stmt|;
comment|// store the node id
name|int
name|nodeIdLen
init|=
name|pending
operator|.
name|getNodeId
argument_list|()
operator|.
name|size
argument_list|()
decl_stmt|;
name|byte
index|[]
name|data
init|=
operator|new
name|byte
index|[
name|nodeIdLen
operator|+
literal|2
index|]
decl_stmt|;
name|ByteConversion
operator|.
name|shortToByte
argument_list|(
operator|(
name|short
operator|)
name|pending
operator|.
name|getNodeId
argument_list|()
operator|.
name|units
argument_list|()
argument_list|,
name|data
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|pending
operator|.
name|getNodeId
argument_list|()
operator|.
name|serialize
argument_list|(
name|data
argument_list|,
literal|2
argument_list|)
expr_stmt|;
name|fNodeId
operator|.
name|setBytesValue
argument_list|(
name|data
argument_list|)
expr_stmt|;
name|doc
operator|.
name|add
argument_list|(
name|fNodeId
argument_list|)
expr_stmt|;
if|if
condition|(
name|pending
operator|.
name|getCollector
argument_list|()
operator|.
name|hasFields
argument_list|()
operator|&&
name|pending
operator|.
name|getAddress
argument_list|()
operator|!=
operator|-
literal|1
condition|)
block|{
name|fAddress
operator|.
name|setBytesValue
argument_list|(
name|ByteConversion
operator|.
name|longToByte
argument_list|(
name|pending
operator|.
name|getAddress
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|doc
operator|.
name|add
argument_list|(
name|fAddress
argument_list|)
expr_stmt|;
block|}
comment|// add separate index for node id
name|byte
index|[]
name|idData
init|=
operator|new
name|byte
index|[
name|nodeIdLen
operator|+
literal|4
index|]
decl_stmt|;
name|ByteConversion
operator|.
name|intToByteH
argument_list|(
name|currentDoc
operator|.
name|getDocId
argument_list|()
argument_list|,
name|idData
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|pending
operator|.
name|getNodeId
argument_list|()
operator|.
name|serialize
argument_list|(
name|idData
argument_list|,
literal|4
argument_list|)
expr_stmt|;
name|BinaryTokenStream
name|bts
init|=
operator|new
name|BinaryTokenStream
argument_list|(
operator|new
name|BytesRef
argument_list|(
name|idData
argument_list|)
argument_list|)
decl_stmt|;
name|Field
name|fNodeIdIdx
init|=
operator|new
name|Field
argument_list|(
name|FIELD_ID
argument_list|,
name|bts
argument_list|,
name|LuceneIndexWorker
operator|.
name|TYPE_NODE_ID
argument_list|)
decl_stmt|;
name|doc
operator|.
name|add
argument_list|(
name|fNodeIdIdx
argument_list|)
expr_stmt|;
for|for
control|(
name|TextCollector
operator|.
name|Field
name|field
range|:
name|pending
operator|.
name|getCollector
argument_list|()
operator|.
name|getFields
argument_list|()
control|)
block|{
name|String
name|contentField
decl_stmt|;
if|if
condition|(
name|field
operator|.
name|isNamed
argument_list|()
condition|)
name|contentField
operator|=
name|field
operator|.
name|getName
argument_list|()
expr_stmt|;
else|else
name|contentField
operator|=
name|LuceneUtil
operator|.
name|encodeQName
argument_list|(
name|pending
operator|.
name|getQName
argument_list|()
argument_list|,
name|index
operator|.
name|getBrokerPool
argument_list|()
operator|.
name|getSymbols
argument_list|()
argument_list|)
expr_stmt|;
name|Field
name|fld
init|=
name|pending
operator|.
name|getConfig
argument_list|()
operator|.
name|convertToField
argument_list|(
name|contentField
argument_list|,
name|field
operator|.
name|getContent
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|fld
operator|!=
literal|null
condition|)
block|{
name|doc
operator|.
name|add
argument_list|(
name|fld
argument_list|)
expr_stmt|;
block|}
block|}
name|fDocIdIdx
operator|.
name|setIntValue
argument_list|(
name|currentDoc
operator|.
name|getDocId
argument_list|()
argument_list|)
expr_stmt|;
name|doc
operator|.
name|add
argument_list|(
name|fDocIdIdx
argument_list|)
expr_stmt|;
name|Analyzer
name|analyzer
init|=
name|pending
operator|.
name|getConfig
argument_list|()
operator|.
name|getAnalyzer
argument_list|()
decl_stmt|;
if|if
condition|(
name|analyzer
operator|==
literal|null
condition|)
block|{
name|analyzer
operator|=
name|config
operator|.
name|getDefaultAnalyzer
argument_list|()
expr_stmt|;
block|}
name|writer
operator|.
name|addDocument
argument_list|(
name|doc
argument_list|,
name|analyzer
argument_list|)
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|warn
argument_list|(
literal|"An exception was caught while indexing document: "
operator|+
name|e
operator|.
name|getMessage
argument_list|()
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
name|index
operator|.
name|releaseWriter
argument_list|(
name|writer
argument_list|)
expr_stmt|;
name|nodesToWrite
operator|=
operator|new
name|ArrayList
argument_list|<
name|RangeIndexDoc
argument_list|>
argument_list|()
expr_stmt|;
name|cachedNodesSize
operator|=
literal|0
expr_stmt|;
block|}
block|}
specifier|public
name|NodeSet
name|query
parameter_list|(
name|int
name|contextId
parameter_list|,
name|DocumentSet
name|docs
parameter_list|,
name|NodeSet
name|contextSet
parameter_list|,
name|List
argument_list|<
name|QName
argument_list|>
name|qnames
parameter_list|,
name|AtomicValue
index|[]
name|keys
parameter_list|,
name|RangeIndex
operator|.
name|Operator
name|operator
parameter_list|,
name|int
name|axis
parameter_list|)
throws|throws
name|IOException
throws|,
name|XPathException
block|{
return|return
name|index
operator|.
name|withSearcher
argument_list|(
name|searcher
lambda|->
block|{
name|List
argument_list|<
name|QName
argument_list|>
name|definedIndexes
init|=
name|getDefinedIndexes
argument_list|(
name|qnames
argument_list|)
decl_stmt|;
name|NodeSet
name|resultSet
init|=
operator|new
name|NewArrayNodeSet
argument_list|()
decl_stmt|;
for|for
control|(
name|QName
name|qname
range|:
name|definedIndexes
control|)
block|{
name|Query
name|query
decl_stmt|;
name|String
name|field
init|=
name|LuceneUtil
operator|.
name|encodeQName
argument_list|(
name|qname
argument_list|,
name|index
operator|.
name|getBrokerPool
argument_list|()
operator|.
name|getSymbols
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|keys
operator|.
name|length
operator|>
literal|1
condition|)
block|{
name|BooleanQuery
name|bool
init|=
operator|new
name|BooleanQuery
argument_list|()
decl_stmt|;
for|for
control|(
name|AtomicValue
name|key
range|:
name|keys
control|)
block|{
name|bool
operator|.
name|add
argument_list|(
name|toQuery
argument_list|(
name|field
argument_list|,
name|qname
argument_list|,
name|key
argument_list|,
name|operator
argument_list|,
name|docs
argument_list|)
argument_list|,
name|BooleanClause
operator|.
name|Occur
operator|.
name|SHOULD
argument_list|)
expr_stmt|;
block|}
name|query
operator|=
name|bool
expr_stmt|;
block|}
else|else
block|{
name|query
operator|=
name|toQuery
argument_list|(
name|field
argument_list|,
name|qname
argument_list|,
name|keys
index|[
literal|0
index|]
argument_list|,
name|operator
argument_list|,
name|docs
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|contextSet
operator|!=
literal|null
operator|&&
name|contextSet
operator|.
name|hasOne
argument_list|()
operator|&&
name|contextSet
operator|.
name|getItemType
argument_list|()
operator|!=
name|Type
operator|.
name|DOCUMENT
condition|)
block|{
name|NodesFilter
name|filter
init|=
operator|new
name|NodesFilter
argument_list|(
name|contextSet
argument_list|)
decl_stmt|;
name|filter
operator|.
name|init
argument_list|(
name|searcher
operator|.
name|getIndexReader
argument_list|()
argument_list|)
expr_stmt|;
name|FilteredQuery
name|filtered
init|=
operator|new
name|FilteredQuery
argument_list|(
name|query
argument_list|,
name|filter
argument_list|,
name|FilteredQuery
operator|.
name|LEAP_FROG_FILTER_FIRST_STRATEGY
argument_list|)
decl_stmt|;
name|resultSet
operator|.
name|addAll
argument_list|(
name|doQuery
argument_list|(
name|contextId
argument_list|,
name|docs
argument_list|,
name|contextSet
argument_list|,
name|axis
argument_list|,
name|searcher
argument_list|,
literal|null
argument_list|,
name|filtered
argument_list|,
literal|null
argument_list|)
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|resultSet
operator|.
name|addAll
argument_list|(
name|doQuery
argument_list|(
name|contextId
argument_list|,
name|docs
argument_list|,
name|contextSet
argument_list|,
name|axis
argument_list|,
name|searcher
argument_list|,
literal|null
argument_list|,
name|query
argument_list|,
literal|null
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
return|return
name|resultSet
return|;
block|}
argument_list|)
return|;
block|}
specifier|public
name|NodeSet
name|queryField
parameter_list|(
name|int
name|contextId
parameter_list|,
name|DocumentSet
name|docs
parameter_list|,
name|NodeSet
name|contextSet
parameter_list|,
name|Sequence
name|fields
parameter_list|,
name|Sequence
index|[]
name|keys
parameter_list|,
name|RangeIndex
operator|.
name|Operator
index|[]
name|operators
parameter_list|,
name|int
name|axis
parameter_list|)
throws|throws
name|IOException
throws|,
name|XPathException
block|{
return|return
name|index
operator|.
name|withSearcher
argument_list|(
name|searcher
lambda|->
block|{
name|BooleanQuery
name|query
init|=
operator|new
name|BooleanQuery
argument_list|()
decl_stmt|;
name|int
name|j
init|=
literal|0
decl_stmt|;
for|for
control|(
name|SequenceIterator
name|i
init|=
name|fields
operator|.
name|iterate
argument_list|()
init|;
name|i
operator|.
name|hasNext
argument_list|()
condition|;
name|j
operator|++
control|)
block|{
name|String
name|field
init|=
name|i
operator|.
name|nextItem
argument_list|()
operator|.
name|getStringValue
argument_list|()
decl_stmt|;
if|if
condition|(
name|keys
index|[
name|j
index|]
operator|.
name|getItemCount
argument_list|()
operator|>
literal|1
condition|)
block|{
name|BooleanQuery
name|bool
init|=
operator|new
name|BooleanQuery
argument_list|()
decl_stmt|;
name|bool
operator|.
name|setMinimumNumberShouldMatch
argument_list|(
literal|1
argument_list|)
expr_stmt|;
for|for
control|(
name|SequenceIterator
name|ki
init|=
name|keys
index|[
name|j
index|]
operator|.
name|iterate
argument_list|()
init|;
name|ki
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|Item
name|key
init|=
name|ki
operator|.
name|nextItem
argument_list|()
decl_stmt|;
name|Query
name|q
init|=
name|toQuery
argument_list|(
name|field
argument_list|,
literal|null
argument_list|,
name|key
operator|.
name|atomize
argument_list|()
argument_list|,
name|operators
index|[
name|j
index|]
argument_list|,
name|docs
argument_list|)
decl_stmt|;
name|bool
operator|.
name|add
argument_list|(
name|q
argument_list|,
name|BooleanClause
operator|.
name|Occur
operator|.
name|SHOULD
argument_list|)
expr_stmt|;
block|}
name|query
operator|.
name|add
argument_list|(
name|bool
argument_list|,
name|BooleanClause
operator|.
name|Occur
operator|.
name|MUST
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|Query
name|q
init|=
name|toQuery
argument_list|(
name|field
argument_list|,
literal|null
argument_list|,
name|keys
index|[
name|j
index|]
operator|.
name|itemAt
argument_list|(
literal|0
argument_list|)
operator|.
name|atomize
argument_list|()
argument_list|,
name|operators
index|[
name|j
index|]
argument_list|,
name|docs
argument_list|)
decl_stmt|;
name|query
operator|.
name|add
argument_list|(
name|q
argument_list|,
name|BooleanClause
operator|.
name|Occur
operator|.
name|MUST
argument_list|)
expr_stmt|;
block|}
block|}
name|Query
name|qu
init|=
name|query
decl_stmt|;
name|BooleanClause
index|[]
name|clauses
init|=
name|query
operator|.
name|getClauses
argument_list|()
decl_stmt|;
if|if
condition|(
name|clauses
operator|.
name|length
operator|==
literal|1
condition|)
block|{
name|qu
operator|=
name|clauses
index|[
literal|0
index|]
operator|.
name|getQuery
argument_list|()
expr_stmt|;
block|}
name|NodeSet
name|resultSet
init|=
operator|new
name|NewArrayNodeSet
argument_list|()
decl_stmt|;
if|if
condition|(
name|contextSet
operator|!=
literal|null
operator|&&
name|contextSet
operator|.
name|hasOne
argument_list|()
operator|&&
name|contextSet
operator|.
name|getItemType
argument_list|()
operator|!=
name|Type
operator|.
name|DOCUMENT
condition|)
block|{
name|NodesFilter
name|filter
init|=
operator|new
name|NodesFilter
argument_list|(
name|contextSet
argument_list|)
decl_stmt|;
name|filter
operator|.
name|init
argument_list|(
name|searcher
operator|.
name|getIndexReader
argument_list|()
argument_list|)
expr_stmt|;
name|FilteredQuery
name|filtered
init|=
operator|new
name|FilteredQuery
argument_list|(
name|qu
argument_list|,
name|filter
argument_list|,
name|FilteredQuery
operator|.
name|LEAP_FROG_FILTER_FIRST_STRATEGY
argument_list|)
decl_stmt|;
name|resultSet
operator|.
name|addAll
argument_list|(
name|doQuery
argument_list|(
name|contextId
argument_list|,
name|docs
argument_list|,
name|contextSet
argument_list|,
name|axis
argument_list|,
name|searcher
argument_list|,
literal|null
argument_list|,
name|filtered
argument_list|,
literal|null
argument_list|)
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|resultSet
operator|.
name|addAll
argument_list|(
name|doQuery
argument_list|(
name|contextId
argument_list|,
name|docs
argument_list|,
name|contextSet
argument_list|,
name|axis
argument_list|,
name|searcher
argument_list|,
literal|null
argument_list|,
name|qu
argument_list|,
literal|null
argument_list|)
argument_list|)
expr_stmt|;
block|}
return|return
name|resultSet
return|;
block|}
argument_list|)
return|;
block|}
comment|//    private OpenBitSet getDocs(DocumentSet docs, IndexSearcher searcher) throws IOException {
comment|//        OpenBitSet bits = new OpenBitSet(searcher.getIndexReader().maxDoc());
comment|//        for (Iterator i = docs.getDocumentIterator(); i.hasNext(); ) {
comment|//            DocumentImpl nextDoc = (DocumentImpl) i.next();
comment|//            Term dt = new Term(FIELD_DOC_ID, NumericUtils.intToPrefixCoded(nextDoc.getDocId()));
comment|//            TermDocs td = searcher.getIndexReader().termDocs(dt);
comment|//            while (td.next()) {
comment|//                bits.set(td.doc());
comment|//            }
comment|//            td.close();
comment|//        }
comment|//        return bits;
comment|//    }
specifier|private
name|NodeSet
name|doQuery
parameter_list|(
specifier|final
name|int
name|contextId
parameter_list|,
specifier|final
name|DocumentSet
name|docs
parameter_list|,
specifier|final
name|NodeSet
name|contextSet
parameter_list|,
specifier|final
name|int
name|axis
parameter_list|,
name|IndexSearcher
name|searcher
parameter_list|,
specifier|final
name|QName
name|qname
parameter_list|,
name|Query
name|query
parameter_list|,
name|Filter
name|filter
parameter_list|)
throws|throws
name|IOException
block|{
name|SearchCollector
name|collector
init|=
operator|new
name|SearchCollector
argument_list|(
name|docs
argument_list|,
name|contextSet
argument_list|,
name|qname
argument_list|,
name|axis
argument_list|,
name|contextId
argument_list|)
decl_stmt|;
name|searcher
operator|.
name|search
argument_list|(
name|query
argument_list|,
name|filter
argument_list|,
name|collector
argument_list|)
expr_stmt|;
return|return
name|collector
operator|.
name|getResultSet
argument_list|()
return|;
block|}
specifier|private
class|class
name|SearchCollector
extends|extends
name|Collector
block|{
specifier|private
specifier|final
name|NodeSet
name|resultSet
decl_stmt|;
specifier|private
specifier|final
name|NodeSet
name|contextSet
decl_stmt|;
specifier|private
specifier|final
name|QName
name|qname
decl_stmt|;
specifier|private
specifier|final
name|int
name|axis
decl_stmt|;
specifier|private
specifier|final
name|int
name|contextId
decl_stmt|;
specifier|private
specifier|final
name|DocumentSet
name|docs
decl_stmt|;
specifier|private
name|AtomicReader
name|reader
decl_stmt|;
specifier|private
name|NumericDocValues
name|docIdValues
decl_stmt|;
specifier|private
name|BinaryDocValues
name|nodeIdValues
decl_stmt|;
specifier|private
name|BinaryDocValues
name|addressValues
decl_stmt|;
specifier|private
specifier|final
name|byte
index|[]
name|buf
init|=
operator|new
name|byte
index|[
literal|1024
index|]
decl_stmt|;
specifier|public
name|SearchCollector
parameter_list|(
name|DocumentSet
name|docs
parameter_list|,
name|NodeSet
name|contextSet
parameter_list|,
name|QName
name|qname
parameter_list|,
name|int
name|axis
parameter_list|,
name|int
name|contextId
parameter_list|)
block|{
name|this
operator|.
name|resultSet
operator|=
operator|new
name|NewArrayNodeSet
argument_list|()
expr_stmt|;
name|this
operator|.
name|docs
operator|=
name|docs
expr_stmt|;
name|this
operator|.
name|contextSet
operator|=
name|contextSet
expr_stmt|;
name|this
operator|.
name|qname
operator|=
name|qname
expr_stmt|;
name|this
operator|.
name|axis
operator|=
name|axis
expr_stmt|;
name|this
operator|.
name|contextId
operator|=
name|contextId
expr_stmt|;
block|}
specifier|public
name|NodeSet
name|getResultSet
parameter_list|()
block|{
return|return
name|resultSet
return|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|setScorer
parameter_list|(
name|Scorer
name|scorer
parameter_list|)
throws|throws
name|IOException
block|{
comment|// ignore
block|}
annotation|@
name|Override
specifier|public
name|void
name|collect
parameter_list|(
name|int
name|doc
parameter_list|)
throws|throws
name|IOException
block|{
name|int
name|docId
init|=
operator|(
name|int
operator|)
name|this
operator|.
name|docIdValues
operator|.
name|get
argument_list|(
name|doc
argument_list|)
decl_stmt|;
name|DocumentImpl
name|storedDocument
init|=
name|docs
operator|.
name|getDoc
argument_list|(
name|docId
argument_list|)
decl_stmt|;
if|if
condition|(
name|storedDocument
operator|==
literal|null
condition|)
block|{
return|return;
block|}
specifier|final
name|BytesRef
name|ref
init|=
name|this
operator|.
name|nodeIdValues
operator|.
name|get
argument_list|(
name|doc
argument_list|)
decl_stmt|;
name|int
name|units
init|=
name|ByteConversion
operator|.
name|byteToShort
argument_list|(
name|ref
operator|.
name|bytes
argument_list|,
name|ref
operator|.
name|offset
argument_list|)
decl_stmt|;
name|NodeId
name|nodeId
init|=
name|index
operator|.
name|getBrokerPool
argument_list|()
operator|.
name|getNodeFactory
argument_list|()
operator|.
name|createFromData
argument_list|(
name|units
argument_list|,
name|ref
operator|.
name|bytes
argument_list|,
name|ref
operator|.
name|offset
operator|+
literal|2
argument_list|)
decl_stmt|;
comment|// if a context set is specified, we can directly check if the
comment|// matching node is a descendant of one of the nodes
comment|// in the context set.
if|if
condition|(
name|contextSet
operator|!=
literal|null
condition|)
block|{
name|int
name|sizeHint
init|=
name|contextSet
operator|.
name|getSizeHint
argument_list|(
name|storedDocument
argument_list|)
decl_stmt|;
name|NodeProxy
name|parentNode
init|=
name|contextSet
operator|.
name|parentWithChild
argument_list|(
name|storedDocument
argument_list|,
name|nodeId
argument_list|,
literal|false
argument_list|,
literal|true
argument_list|)
decl_stmt|;
if|if
condition|(
name|parentNode
operator|!=
literal|null
condition|)
block|{
name|NodeProxy
name|storedNode
init|=
operator|new
name|NodeProxy
argument_list|(
name|storedDocument
argument_list|,
name|nodeId
argument_list|)
decl_stmt|;
if|if
condition|(
name|qname
operator|!=
literal|null
condition|)
name|storedNode
operator|.
name|setNodeType
argument_list|(
name|qname
operator|.
name|getNameType
argument_list|()
operator|==
name|ElementValue
operator|.
name|ATTRIBUTE
condition|?
name|Node
operator|.
name|ATTRIBUTE_NODE
else|:
name|Node
operator|.
name|ELEMENT_NODE
argument_list|)
expr_stmt|;
name|getAddress
argument_list|(
name|doc
argument_list|,
name|storedNode
argument_list|)
expr_stmt|;
if|if
condition|(
name|axis
operator|==
name|NodeSet
operator|.
name|ANCESTOR
condition|)
block|{
name|resultSet
operator|.
name|add
argument_list|(
name|parentNode
argument_list|,
name|sizeHint
argument_list|)
expr_stmt|;
if|if
condition|(
name|Expression
operator|.
name|NO_CONTEXT_ID
operator|!=
name|contextId
condition|)
block|{
name|parentNode
operator|.
name|deepCopyContext
argument_list|(
name|storedNode
argument_list|,
name|contextId
argument_list|)
expr_stmt|;
block|}
else|else
name|parentNode
operator|.
name|copyContext
argument_list|(
name|storedNode
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|resultSet
operator|.
name|add
argument_list|(
name|storedNode
argument_list|,
name|sizeHint
argument_list|)
expr_stmt|;
block|}
block|}
block|}
else|else
block|{
name|NodeProxy
name|storedNode
init|=
operator|new
name|NodeProxy
argument_list|(
name|storedDocument
argument_list|,
name|nodeId
argument_list|)
decl_stmt|;
if|if
condition|(
name|qname
operator|!=
literal|null
condition|)
name|storedNode
operator|.
name|setNodeType
argument_list|(
name|qname
operator|.
name|getNameType
argument_list|()
operator|==
name|ElementValue
operator|.
name|ATTRIBUTE
condition|?
name|Node
operator|.
name|ATTRIBUTE_NODE
else|:
name|Node
operator|.
name|ELEMENT_NODE
argument_list|)
expr_stmt|;
name|getAddress
argument_list|(
name|doc
argument_list|,
name|storedNode
argument_list|)
expr_stmt|;
name|resultSet
operator|.
name|add
argument_list|(
name|storedNode
argument_list|)
expr_stmt|;
block|}
block|}
specifier|private
name|void
name|getAddress
parameter_list|(
name|int
name|doc
parameter_list|,
name|NodeHandle
name|storedNode
parameter_list|)
block|{
if|if
condition|(
name|addressValues
operator|!=
literal|null
condition|)
block|{
specifier|final
name|BytesRef
name|ref
init|=
name|addressValues
operator|.
name|get
argument_list|(
name|doc
argument_list|)
decl_stmt|;
if|if
condition|(
name|ref
operator|.
name|offset
operator|<
name|ref
operator|.
name|bytes
operator|.
name|length
condition|)
block|{
specifier|final
name|long
name|address
init|=
name|ByteConversion
operator|.
name|byteToLong
argument_list|(
name|ref
operator|.
name|bytes
argument_list|,
name|ref
operator|.
name|offset
argument_list|)
decl_stmt|;
name|storedNode
operator|.
name|setInternalAddress
argument_list|(
name|address
argument_list|)
expr_stmt|;
block|}
block|}
block|}
annotation|@
name|Override
specifier|public
name|void
name|setNextReader
parameter_list|(
name|AtomicReaderContext
name|atomicReaderContext
parameter_list|)
throws|throws
name|IOException
block|{
name|this
operator|.
name|reader
operator|=
name|atomicReaderContext
operator|.
name|reader
argument_list|()
expr_stmt|;
name|this
operator|.
name|docIdValues
operator|=
name|this
operator|.
name|reader
operator|.
name|getNumericDocValues
argument_list|(
name|FIELD_DOC_ID
argument_list|)
expr_stmt|;
name|this
operator|.
name|nodeIdValues
operator|=
name|this
operator|.
name|reader
operator|.
name|getBinaryDocValues
argument_list|(
name|FIELD_NODE_ID
argument_list|)
expr_stmt|;
name|this
operator|.
name|addressValues
operator|=
name|this
operator|.
name|reader
operator|.
name|getBinaryDocValues
argument_list|(
name|FIELD_ADDRESS
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|acceptsDocsOutOfOrder
parameter_list|()
block|{
return|return
literal|true
return|;
block|}
block|}
comment|/**      * Check index configurations for all collection in the given DocumentSet and return      * a list of QNames, which have indexes defined on them.      *      * @return List of QName objects on which indexes are defined      */
specifier|private
name|List
argument_list|<
name|QName
argument_list|>
name|getDefinedIndexes
parameter_list|(
name|List
argument_list|<
name|QName
argument_list|>
name|qnames
parameter_list|)
throws|throws
name|IOException
block|{
name|List
argument_list|<
name|QName
argument_list|>
name|indexes
init|=
operator|new
name|ArrayList
argument_list|<
name|QName
argument_list|>
argument_list|(
literal|20
argument_list|)
decl_stmt|;
if|if
condition|(
name|qnames
operator|!=
literal|null
operator|&&
operator|!
name|qnames
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
for|for
control|(
name|QName
name|qname
range|:
name|qnames
control|)
block|{
if|if
condition|(
name|qname
operator|.
name|getLocalPart
argument_list|()
operator|==
literal|null
operator|||
name|qname
operator|.
name|getNamespaceURI
argument_list|()
operator|==
literal|null
condition|)
name|getDefinedIndexesFor
argument_list|(
name|qname
argument_list|,
name|indexes
argument_list|)
expr_stmt|;
else|else
name|indexes
operator|.
name|add
argument_list|(
name|qname
argument_list|)
expr_stmt|;
block|}
return|return
name|indexes
return|;
block|}
return|return
name|getDefinedIndexesFor
argument_list|(
literal|null
argument_list|,
name|indexes
argument_list|)
return|;
block|}
specifier|private
name|List
argument_list|<
name|QName
argument_list|>
name|getDefinedIndexesFor
parameter_list|(
name|QName
name|qname
parameter_list|,
specifier|final
name|List
argument_list|<
name|QName
argument_list|>
name|indexes
parameter_list|)
throws|throws
name|IOException
block|{
return|return
name|index
operator|.
name|withReader
argument_list|(
name|reader
lambda|->
block|{
for|for
control|(
name|FieldInfo
name|info
range|:
name|MultiFields
operator|.
name|getMergedFieldInfos
argument_list|(
name|reader
argument_list|)
control|)
block|{
if|if
condition|(
operator|!
name|FIELD_DOC_ID
operator|.
name|equals
argument_list|(
name|info
operator|.
name|name
argument_list|)
condition|)
block|{
name|QName
name|name
init|=
name|LuceneUtil
operator|.
name|decodeQName
argument_list|(
name|info
operator|.
name|name
argument_list|,
name|index
operator|.
name|getBrokerPool
argument_list|()
operator|.
name|getSymbols
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|name
operator|!=
literal|null
operator|&&
operator|(
name|qname
operator|==
literal|null
operator|||
name|matchQName
argument_list|(
name|qname
argument_list|,
name|name
argument_list|)
operator|)
condition|)
name|indexes
operator|.
name|add
argument_list|(
name|name
argument_list|)
expr_stmt|;
block|}
block|}
return|return
name|indexes
return|;
block|}
argument_list|)
return|;
block|}
specifier|protected
name|BytesRef
name|analyzeContent
parameter_list|(
name|String
name|field
parameter_list|,
name|QName
name|qname
parameter_list|,
name|String
name|data
parameter_list|,
name|DocumentSet
name|docs
parameter_list|)
throws|throws
name|XPathException
block|{
specifier|final
name|Analyzer
name|analyzer
init|=
name|getAnalyzer
argument_list|(
name|qname
argument_list|,
name|field
argument_list|,
name|docs
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|isCaseSensitive
argument_list|(
name|qname
argument_list|,
name|field
argument_list|,
name|docs
argument_list|)
condition|)
block|{
name|data
operator|=
name|data
operator|.
name|toLowerCase
argument_list|()
expr_stmt|;
block|}
if|if
condition|(
name|analyzer
operator|==
literal|null
condition|)
block|{
return|return
operator|new
name|BytesRef
argument_list|(
name|data
argument_list|)
return|;
block|}
try|try
block|{
name|TokenStream
name|stream
init|=
name|analyzer
operator|.
name|tokenStream
argument_list|(
name|field
argument_list|,
operator|new
name|StringReader
argument_list|(
name|data
argument_list|)
argument_list|)
decl_stmt|;
name|TermToBytesRefAttribute
name|termAttr
init|=
name|stream
operator|.
name|addAttribute
argument_list|(
name|TermToBytesRefAttribute
operator|.
name|class
argument_list|)
decl_stmt|;
name|BytesRef
name|token
init|=
literal|null
decl_stmt|;
try|try
block|{
name|stream
operator|.
name|reset
argument_list|()
expr_stmt|;
if|if
condition|(
name|stream
operator|.
name|incrementToken
argument_list|()
condition|)
block|{
name|termAttr
operator|.
name|fillBytesRef
argument_list|()
expr_stmt|;
name|token
operator|=
name|termAttr
operator|.
name|getBytesRef
argument_list|()
expr_stmt|;
block|}
name|stream
operator|.
name|end
argument_list|()
expr_stmt|;
block|}
finally|finally
block|{
name|stream
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
return|return
name|token
return|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|XPathException
argument_list|(
literal|"Error analyzing the query string: "
operator|+
name|e
operator|.
name|getMessage
argument_list|()
argument_list|,
name|e
argument_list|)
throw|;
block|}
block|}
comment|/**      * Return the analyzer to be used for the given field or qname. Either field      * or qname should be specified.      */
specifier|private
name|Analyzer
name|getAnalyzer
parameter_list|(
name|QName
name|qname
parameter_list|,
name|String
name|fieldName
parameter_list|,
name|DocumentSet
name|docs
parameter_list|)
block|{
for|for
control|(
name|Iterator
argument_list|<
name|Collection
argument_list|>
name|i
init|=
name|docs
operator|.
name|getCollectionIterator
argument_list|()
init|;
name|i
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|Collection
name|collection
init|=
name|i
operator|.
name|next
argument_list|()
decl_stmt|;
name|IndexSpec
name|idxConf
init|=
name|collection
operator|.
name|getIndexConfiguration
argument_list|(
name|broker
argument_list|)
decl_stmt|;
if|if
condition|(
name|idxConf
operator|!=
literal|null
condition|)
block|{
name|RangeIndexConfig
name|config
init|=
operator|(
name|RangeIndexConfig
operator|)
name|idxConf
operator|.
name|getCustomIndexSpec
argument_list|(
name|RangeIndex
operator|.
name|ID
argument_list|)
decl_stmt|;
if|if
condition|(
name|config
operator|!=
literal|null
condition|)
block|{
name|Analyzer
name|analyzer
init|=
name|config
operator|.
name|getAnalyzer
argument_list|(
name|qname
argument_list|,
name|fieldName
argument_list|)
decl_stmt|;
if|if
condition|(
name|analyzer
operator|!=
literal|null
condition|)
return|return
name|analyzer
return|;
block|}
block|}
block|}
return|return
literal|null
return|;
block|}
comment|/**      * Return the analyzer to be used for the given field or qname. Either field      * or qname should be specified.      */
specifier|private
name|boolean
name|isCaseSensitive
parameter_list|(
name|QName
name|qname
parameter_list|,
name|String
name|fieldName
parameter_list|,
name|DocumentSet
name|docs
parameter_list|)
block|{
for|for
control|(
name|Iterator
argument_list|<
name|Collection
argument_list|>
name|i
init|=
name|docs
operator|.
name|getCollectionIterator
argument_list|()
init|;
name|i
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|Collection
name|collection
init|=
name|i
operator|.
name|next
argument_list|()
decl_stmt|;
name|IndexSpec
name|idxConf
init|=
name|collection
operator|.
name|getIndexConfiguration
argument_list|(
name|broker
argument_list|)
decl_stmt|;
if|if
condition|(
name|idxConf
operator|!=
literal|null
condition|)
block|{
name|RangeIndexConfig
name|config
init|=
operator|(
name|RangeIndexConfig
operator|)
name|idxConf
operator|.
name|getCustomIndexSpec
argument_list|(
name|RangeIndex
operator|.
name|ID
argument_list|)
decl_stmt|;
if|if
condition|(
name|config
operator|!=
literal|null
operator|&&
operator|!
name|config
operator|.
name|isCaseSensitive
argument_list|(
name|qname
argument_list|,
name|fieldName
argument_list|)
condition|)
block|{
return|return
literal|false
return|;
block|}
block|}
block|}
return|return
literal|true
return|;
block|}
specifier|private
specifier|static
name|boolean
name|matchQName
parameter_list|(
name|QName
name|qname
parameter_list|,
name|QName
name|candidate
parameter_list|)
block|{
name|boolean
name|match
init|=
literal|true
decl_stmt|;
if|if
condition|(
name|qname
operator|.
name|getLocalPart
argument_list|()
operator|!=
literal|null
condition|)
name|match
operator|=
name|qname
operator|.
name|getLocalPart
argument_list|()
operator|.
name|equals
argument_list|(
name|candidate
operator|.
name|getLocalPart
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|match
operator|&&
name|qname
operator|.
name|getNamespaceURI
argument_list|()
operator|!=
literal|null
operator|&&
name|qname
operator|.
name|getNamespaceURI
argument_list|()
operator|.
name|length
argument_list|()
operator|>
literal|0
condition|)
name|match
operator|=
name|qname
operator|.
name|getNamespaceURI
argument_list|()
operator|.
name|equals
argument_list|(
name|candidate
operator|.
name|getNamespaceURI
argument_list|()
argument_list|)
expr_stmt|;
return|return
name|match
return|;
block|}
specifier|private
class|class
name|RangeIndexListener
extends|extends
name|AbstractStreamListener
block|{
annotation|@
name|Override
specifier|public
name|void
name|startElement
parameter_list|(
name|Txn
name|transaction
parameter_list|,
name|ElementImpl
name|element
parameter_list|,
name|NodePath
name|path
parameter_list|)
block|{
if|if
condition|(
name|mode
operator|==
name|ReindexMode
operator|.
name|STORE
operator|&&
name|config
operator|!=
literal|null
condition|)
block|{
if|if
condition|(
name|contentStack
operator|!=
literal|null
operator|&&
operator|!
name|contentStack
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
for|for
control|(
name|TextCollector
name|extractor
range|:
name|contentStack
control|)
block|{
name|extractor
operator|.
name|startElement
argument_list|(
name|element
operator|.
name|getQName
argument_list|()
argument_list|,
name|path
argument_list|)
expr_stmt|;
block|}
block|}
name|Iterator
argument_list|<
name|RangeIndexConfigElement
argument_list|>
name|configIter
init|=
name|config
operator|.
name|getConfig
argument_list|(
name|path
argument_list|)
decl_stmt|;
if|if
condition|(
name|configIter
operator|!=
literal|null
condition|)
block|{
if|if
condition|(
name|contentStack
operator|==
literal|null
condition|)
name|contentStack
operator|=
operator|new
name|Stack
argument_list|<
name|TextCollector
argument_list|>
argument_list|()
expr_stmt|;
while|while
condition|(
name|configIter
operator|.
name|hasNext
argument_list|()
condition|)
block|{
name|RangeIndexConfigElement
name|configuration
init|=
name|configIter
operator|.
name|next
argument_list|()
decl_stmt|;
if|if
condition|(
name|configuration
operator|.
name|match
argument_list|(
name|path
argument_list|)
condition|)
block|{
name|TextCollector
name|collector
init|=
name|configuration
operator|.
name|getCollector
argument_list|(
name|path
argument_list|)
decl_stmt|;
name|collector
operator|.
name|startElement
argument_list|(
name|element
operator|.
name|getQName
argument_list|()
argument_list|,
name|path
argument_list|)
expr_stmt|;
name|contentStack
operator|.
name|push
argument_list|(
name|collector
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
name|super
operator|.
name|startElement
argument_list|(
name|transaction
argument_list|,
name|element
argument_list|,
name|path
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|attribute
parameter_list|(
name|Txn
name|transaction
parameter_list|,
name|AttrImpl
name|attrib
parameter_list|,
name|NodePath
name|path
parameter_list|)
block|{
name|path
operator|.
name|addComponent
argument_list|(
name|attrib
operator|.
name|getQName
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|contentStack
operator|!=
literal|null
operator|&&
operator|!
name|contentStack
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
for|for
control|(
name|TextCollector
name|collector
range|:
name|contentStack
control|)
block|{
name|collector
operator|.
name|attribute
argument_list|(
name|attrib
argument_list|,
name|path
argument_list|)
expr_stmt|;
block|}
block|}
name|Iterator
argument_list|<
name|RangeIndexConfigElement
argument_list|>
name|configIter
init|=
literal|null
decl_stmt|;
if|if
condition|(
name|config
operator|!=
literal|null
condition|)
name|configIter
operator|=
name|config
operator|.
name|getConfig
argument_list|(
name|path
argument_list|)
expr_stmt|;
if|if
condition|(
name|mode
operator|!=
name|ReindexMode
operator|.
name|REMOVE_ALL_NODES
operator|&&
name|configIter
operator|!=
literal|null
condition|)
block|{
if|if
condition|(
name|mode
operator|==
name|ReindexMode
operator|.
name|REMOVE_SOME_NODES
condition|)
block|{
name|nodesToRemove
operator|.
name|add
argument_list|(
name|attrib
operator|.
name|getNodeId
argument_list|()
argument_list|)
expr_stmt|;
block|}
else|else
block|{
while|while
condition|(
name|configIter
operator|.
name|hasNext
argument_list|()
condition|)
block|{
name|RangeIndexConfigElement
name|configuration
init|=
name|configIter
operator|.
name|next
argument_list|()
decl_stmt|;
if|if
condition|(
name|configuration
operator|.
name|match
argument_list|(
name|path
argument_list|)
condition|)
block|{
name|SimpleTextCollector
name|collector
init|=
operator|new
name|SimpleTextCollector
argument_list|(
name|attrib
operator|.
name|getValue
argument_list|()
argument_list|)
decl_stmt|;
name|indexText
argument_list|(
name|attrib
argument_list|,
name|attrib
operator|.
name|getQName
argument_list|()
argument_list|,
name|path
argument_list|,
name|configuration
argument_list|,
name|collector
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
name|path
operator|.
name|removeLastComponent
argument_list|()
expr_stmt|;
name|super
operator|.
name|attribute
argument_list|(
name|transaction
argument_list|,
name|attrib
argument_list|,
name|path
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|endElement
parameter_list|(
name|Txn
name|transaction
parameter_list|,
name|ElementImpl
name|element
parameter_list|,
name|NodePath
name|path
parameter_list|)
block|{
if|if
condition|(
name|config
operator|!=
literal|null
condition|)
block|{
if|if
condition|(
name|mode
operator|==
name|ReindexMode
operator|.
name|STORE
operator|&&
name|contentStack
operator|!=
literal|null
operator|&&
operator|!
name|contentStack
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
for|for
control|(
name|TextCollector
name|extractor
range|:
name|contentStack
control|)
block|{
name|extractor
operator|.
name|endElement
argument_list|(
name|element
operator|.
name|getQName
argument_list|()
argument_list|,
name|path
argument_list|)
expr_stmt|;
block|}
block|}
name|Iterator
argument_list|<
name|RangeIndexConfigElement
argument_list|>
name|configIter
init|=
name|config
operator|.
name|getConfig
argument_list|(
name|path
argument_list|)
decl_stmt|;
if|if
condition|(
name|mode
operator|!=
name|ReindexMode
operator|.
name|REMOVE_ALL_NODES
operator|&&
name|configIter
operator|!=
literal|null
condition|)
block|{
if|if
condition|(
name|mode
operator|==
name|ReindexMode
operator|.
name|REMOVE_SOME_NODES
condition|)
block|{
name|nodesToRemove
operator|.
name|add
argument_list|(
name|element
operator|.
name|getNodeId
argument_list|()
argument_list|)
expr_stmt|;
block|}
else|else
block|{
while|while
condition|(
name|configIter
operator|.
name|hasNext
argument_list|()
condition|)
block|{
name|RangeIndexConfigElement
name|configuration
init|=
name|configIter
operator|.
name|next
argument_list|()
decl_stmt|;
if|if
condition|(
name|configuration
operator|.
name|match
argument_list|(
name|path
argument_list|)
condition|)
block|{
name|TextCollector
name|collector
init|=
name|contentStack
operator|.
name|pop
argument_list|()
decl_stmt|;
name|indexText
argument_list|(
name|element
argument_list|,
name|element
operator|.
name|getQName
argument_list|()
argument_list|,
name|path
argument_list|,
name|configuration
argument_list|,
name|collector
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
block|}
name|super
operator|.
name|endElement
argument_list|(
name|transaction
argument_list|,
name|element
argument_list|,
name|path
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|characters
parameter_list|(
name|Txn
name|transaction
parameter_list|,
name|AbstractCharacterData
name|text
parameter_list|,
name|NodePath
name|path
parameter_list|)
block|{
if|if
condition|(
name|contentStack
operator|!=
literal|null
operator|&&
operator|!
name|contentStack
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
for|for
control|(
name|TextCollector
name|collector
range|:
name|contentStack
control|)
block|{
name|collector
operator|.
name|characters
argument_list|(
name|text
argument_list|,
name|path
argument_list|)
expr_stmt|;
block|}
block|}
name|super
operator|.
name|characters
argument_list|(
name|transaction
argument_list|,
name|text
argument_list|,
name|path
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|IndexWorker
name|getWorker
parameter_list|()
block|{
return|return
name|RangeIndexWorker
operator|.
name|this
return|;
block|}
block|}
comment|/**      * Optimize the Lucene index by merging all segments into a single one. This      * may take a while and write operations will be blocked during the optimize.      *      * @see org.apache.lucene.index.IndexWriter#forceMerge(int)      */
specifier|public
name|void
name|optimize
parameter_list|()
block|{
name|IndexWriter
name|writer
init|=
literal|null
decl_stmt|;
try|try
block|{
name|writer
operator|=
name|index
operator|.
name|getWriter
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|writer
operator|.
name|forceMerge
argument_list|(
literal|1
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|writer
operator|.
name|commit
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|warn
argument_list|(
literal|"An exception was caught while optimizing the lucene index: "
operator|+
name|e
operator|.
name|getMessage
argument_list|()
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
name|index
operator|.
name|releaseWriter
argument_list|(
name|writer
argument_list|)
expr_stmt|;
block|}
block|}
comment|//    public static class DocIdSelector implements FieldSelector {
comment|//
comment|//        private static final long serialVersionUID = -4899170629980829109L;
comment|//
comment|//        public FieldSelectorResult accept(String fieldName) {
comment|//            if (FIELD_DOC_ID.equals(fieldName)) {
comment|//                return FieldSelectorResult.LOAD;
comment|//            } else if (FIELD_NODE_ID.equals(fieldName)) {
comment|//                return FieldSelectorResult.LATENT;
comment|//            }
comment|//            return FieldSelectorResult.NO_LOAD;
comment|//        }
comment|//    }
annotation|@
name|Override
specifier|public
name|Occurrences
index|[]
name|scanIndex
parameter_list|(
name|XQueryContext
name|context
parameter_list|,
name|DocumentSet
name|docs
parameter_list|,
name|NodeSet
name|nodes
parameter_list|,
name|Map
name|hints
parameter_list|)
block|{
try|try
block|{
name|List
argument_list|<
name|QName
argument_list|>
name|qnames
init|=
name|hints
operator|==
literal|null
condition|?
literal|null
else|:
operator|(
name|List
argument_list|<
name|QName
argument_list|>
operator|)
name|hints
operator|.
name|get
argument_list|(
name|QNAMES_KEY
argument_list|)
decl_stmt|;
name|qnames
operator|=
name|getDefinedIndexes
argument_list|(
name|qnames
argument_list|)
expr_stmt|;
comment|//Expects a StringValue
name|String
name|start
init|=
literal|null
decl_stmt|,
name|end
init|=
literal|null
decl_stmt|;
name|long
name|max
init|=
name|Long
operator|.
name|MAX_VALUE
decl_stmt|;
if|if
condition|(
name|hints
operator|!=
literal|null
condition|)
block|{
name|Object
name|vstart
init|=
name|hints
operator|.
name|get
argument_list|(
name|START_VALUE
argument_list|)
decl_stmt|;
name|Object
name|vend
init|=
name|hints
operator|.
name|get
argument_list|(
name|END_VALUE
argument_list|)
decl_stmt|;
name|start
operator|=
name|vstart
operator|==
literal|null
condition|?
literal|null
else|:
name|vstart
operator|.
name|toString
argument_list|()
expr_stmt|;
name|end
operator|=
name|vend
operator|==
literal|null
condition|?
literal|null
else|:
name|vend
operator|.
name|toString
argument_list|()
expr_stmt|;
name|IntegerValue
name|vmax
init|=
operator|(
name|IntegerValue
operator|)
name|hints
operator|.
name|get
argument_list|(
name|VALUE_COUNT
argument_list|)
decl_stmt|;
name|max
operator|=
name|vmax
operator|==
literal|null
condition|?
name|Long
operator|.
name|MAX_VALUE
else|:
name|vmax
operator|.
name|getValue
argument_list|()
expr_stmt|;
block|}
return|return
name|scanIndexByQName
argument_list|(
name|qnames
argument_list|,
name|docs
argument_list|,
name|nodes
argument_list|,
name|start
argument_list|,
name|end
argument_list|,
name|max
argument_list|)
return|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|warn
argument_list|(
literal|"Failed to scan index: "
operator|+
name|e
operator|.
name|getMessage
argument_list|()
argument_list|,
name|e
argument_list|)
expr_stmt|;
return|return
operator|new
name|Occurrences
index|[
literal|0
index|]
return|;
block|}
block|}
specifier|public
name|Occurrences
index|[]
name|scanIndexByField
parameter_list|(
name|String
name|field
parameter_list|,
name|DocumentSet
name|docs
parameter_list|,
name|String
name|start
parameter_list|,
name|long
name|max
parameter_list|)
block|{
try|try
block|{
return|return
name|index
operator|.
name|withReader
argument_list|(
name|reader
lambda|->
block|{
name|TreeMap
argument_list|<
name|String
argument_list|,
name|Occurrences
argument_list|>
name|map
init|=
operator|new
name|TreeMap
argument_list|<
name|String
argument_list|,
name|Occurrences
argument_list|>
argument_list|()
decl_stmt|;
name|scan
argument_list|(
name|docs
argument_list|,
literal|null
argument_list|,
name|start
argument_list|,
literal|null
argument_list|,
name|max
argument_list|,
name|map
argument_list|,
name|reader
argument_list|,
name|field
argument_list|)
expr_stmt|;
name|Occurrences
index|[]
name|occur
init|=
operator|new
name|Occurrences
index|[
name|map
operator|.
name|size
argument_list|()
index|]
decl_stmt|;
return|return
name|map
operator|.
name|values
argument_list|()
operator|.
name|toArray
argument_list|(
name|occur
argument_list|)
return|;
block|}
argument_list|)
return|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|warn
argument_list|(
literal|"Failed to scan index: "
operator|+
name|e
operator|.
name|getMessage
argument_list|()
argument_list|,
name|e
argument_list|)
expr_stmt|;
return|return
operator|new
name|Occurrences
index|[
literal|0
index|]
return|;
block|}
block|}
specifier|private
name|Occurrences
index|[]
name|scanIndexByQName
parameter_list|(
name|List
argument_list|<
name|QName
argument_list|>
name|qnames
parameter_list|,
name|DocumentSet
name|docs
parameter_list|,
name|NodeSet
name|nodes
parameter_list|,
name|String
name|start
parameter_list|,
name|String
name|end
parameter_list|,
name|long
name|max
parameter_list|)
throws|throws
name|IOException
block|{
return|return
name|index
operator|.
name|withReader
argument_list|(
name|reader
lambda|->
block|{
name|TreeMap
argument_list|<
name|String
argument_list|,
name|Occurrences
argument_list|>
name|map
init|=
operator|new
name|TreeMap
argument_list|<
name|String
argument_list|,
name|Occurrences
argument_list|>
argument_list|()
decl_stmt|;
for|for
control|(
name|QName
name|qname
range|:
name|qnames
control|)
block|{
name|String
name|field
init|=
name|LuceneUtil
operator|.
name|encodeQName
argument_list|(
name|qname
argument_list|,
name|index
operator|.
name|getBrokerPool
argument_list|()
operator|.
name|getSymbols
argument_list|()
argument_list|)
decl_stmt|;
name|scan
argument_list|(
name|docs
argument_list|,
name|nodes
argument_list|,
name|start
argument_list|,
name|end
argument_list|,
name|max
argument_list|,
name|map
argument_list|,
name|reader
argument_list|,
name|field
argument_list|)
expr_stmt|;
block|}
name|Occurrences
index|[]
name|occur
init|=
operator|new
name|Occurrences
index|[
name|map
operator|.
name|size
argument_list|()
index|]
decl_stmt|;
return|return
name|map
operator|.
name|values
argument_list|()
operator|.
name|toArray
argument_list|(
name|occur
argument_list|)
return|;
block|}
argument_list|)
return|;
block|}
specifier|private
name|void
name|scan
parameter_list|(
name|DocumentSet
name|docs
parameter_list|,
name|NodeSet
name|nodes
parameter_list|,
name|String
name|start
parameter_list|,
name|String
name|end
parameter_list|,
name|long
name|max
parameter_list|,
name|TreeMap
argument_list|<
name|String
argument_list|,
name|Occurrences
argument_list|>
name|map
parameter_list|,
name|IndexReader
name|reader
parameter_list|,
name|String
name|field
parameter_list|)
throws|throws
name|IOException
block|{
name|List
argument_list|<
name|AtomicReaderContext
argument_list|>
name|leaves
init|=
name|reader
operator|.
name|leaves
argument_list|()
decl_stmt|;
for|for
control|(
name|AtomicReaderContext
name|context
range|:
name|leaves
control|)
block|{
name|NumericDocValues
name|docIdValues
init|=
name|context
operator|.
name|reader
argument_list|()
operator|.
name|getNumericDocValues
argument_list|(
name|FIELD_DOC_ID
argument_list|)
decl_stmt|;
name|BinaryDocValues
name|nodeIdValues
init|=
name|context
operator|.
name|reader
argument_list|()
operator|.
name|getBinaryDocValues
argument_list|(
name|FIELD_NODE_ID
argument_list|)
decl_stmt|;
name|Bits
name|liveDocs
init|=
name|context
operator|.
name|reader
argument_list|()
operator|.
name|getLiveDocs
argument_list|()
decl_stmt|;
name|Terms
name|terms
init|=
name|context
operator|.
name|reader
argument_list|()
operator|.
name|terms
argument_list|(
name|field
argument_list|)
decl_stmt|;
if|if
condition|(
name|terms
operator|==
literal|null
condition|)
continue|continue;
name|TermsEnum
name|termsIter
init|=
name|terms
operator|.
name|iterator
argument_list|(
literal|null
argument_list|)
decl_stmt|;
if|if
condition|(
name|termsIter
operator|.
name|next
argument_list|()
operator|==
literal|null
condition|)
block|{
continue|continue;
block|}
do|do
block|{
if|if
condition|(
name|map
operator|.
name|size
argument_list|()
operator|>=
name|max
condition|)
block|{
break|break;
block|}
name|BytesRef
name|ref
init|=
name|termsIter
operator|.
name|term
argument_list|()
decl_stmt|;
name|String
name|term
init|=
name|ref
operator|.
name|utf8ToString
argument_list|()
decl_stmt|;
name|boolean
name|include
init|=
literal|true
decl_stmt|;
if|if
condition|(
name|end
operator|!=
literal|null
condition|)
block|{
if|if
condition|(
name|term
operator|.
name|compareTo
argument_list|(
name|end
argument_list|)
operator|>
literal|0
condition|)
name|include
operator|=
literal|false
expr_stmt|;
block|}
if|else if
condition|(
name|start
operator|!=
literal|null
operator|&&
operator|!
name|term
operator|.
name|startsWith
argument_list|(
name|start
argument_list|)
condition|)
name|include
operator|=
literal|false
expr_stmt|;
if|if
condition|(
name|include
condition|)
block|{
name|DocsEnum
name|docsEnum
init|=
name|termsIter
operator|.
name|docs
argument_list|(
literal|null
argument_list|,
literal|null
argument_list|)
decl_stmt|;
while|while
condition|(
name|docsEnum
operator|.
name|nextDoc
argument_list|()
operator|!=
name|DocsEnum
operator|.
name|NO_MORE_DOCS
condition|)
block|{
if|if
condition|(
name|liveDocs
operator|!=
literal|null
operator|&&
operator|!
name|liveDocs
operator|.
name|get
argument_list|(
name|docsEnum
operator|.
name|docID
argument_list|()
argument_list|)
condition|)
block|{
continue|continue;
block|}
name|int
name|docId
init|=
operator|(
name|int
operator|)
name|docIdValues
operator|.
name|get
argument_list|(
name|docsEnum
operator|.
name|docID
argument_list|()
argument_list|)
decl_stmt|;
name|DocumentImpl
name|storedDocument
init|=
name|docs
operator|.
name|getDoc
argument_list|(
name|docId
argument_list|)
decl_stmt|;
if|if
condition|(
name|storedDocument
operator|==
literal|null
condition|)
continue|continue;
name|NodeId
name|nodeId
init|=
literal|null
decl_stmt|;
if|if
condition|(
name|nodes
operator|!=
literal|null
condition|)
block|{
specifier|final
name|BytesRef
name|nodeIdRef
init|=
name|nodeIdValues
operator|.
name|get
argument_list|(
name|docsEnum
operator|.
name|docID
argument_list|()
argument_list|)
decl_stmt|;
name|int
name|units
init|=
name|ByteConversion
operator|.
name|byteToShort
argument_list|(
name|nodeIdRef
operator|.
name|bytes
argument_list|,
name|nodeIdRef
operator|.
name|offset
argument_list|)
decl_stmt|;
name|nodeId
operator|=
name|index
operator|.
name|getBrokerPool
argument_list|()
operator|.
name|getNodeFactory
argument_list|()
operator|.
name|createFromData
argument_list|(
name|units
argument_list|,
name|nodeIdRef
operator|.
name|bytes
argument_list|,
name|nodeIdRef
operator|.
name|offset
operator|+
literal|2
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|nodeId
operator|==
literal|null
operator|||
name|nodes
operator|.
name|get
argument_list|(
name|storedDocument
argument_list|,
name|nodeId
argument_list|)
operator|!=
literal|null
condition|)
block|{
name|Occurrences
name|oc
init|=
name|map
operator|.
name|get
argument_list|(
name|term
argument_list|)
decl_stmt|;
if|if
condition|(
name|oc
operator|==
literal|null
condition|)
block|{
name|oc
operator|=
operator|new
name|Occurrences
argument_list|(
name|term
argument_list|)
expr_stmt|;
name|map
operator|.
name|put
argument_list|(
name|term
argument_list|,
name|oc
argument_list|)
expr_stmt|;
block|}
name|oc
operator|.
name|addDocument
argument_list|(
name|storedDocument
argument_list|)
expr_stmt|;
name|oc
operator|.
name|addOccurrences
argument_list|(
name|docsEnum
operator|.
name|freq
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
do|while
condition|(
name|termsIter
operator|.
name|next
argument_list|()
operator|!=
literal|null
condition|)
do|;
block|}
block|}
block|}
end_class

end_unit

