begin_unit|revision:1.0.0;language:Java;cregit-version:0.0.1
begin_package
package|package
name|org
operator|.
name|exist
operator|.
name|indexing
operator|.
name|range
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|document
operator|.
name|*
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|index
operator|.
name|Term
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|search
operator|.
name|NumericRangeQuery
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|search
operator|.
name|Query
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|search
operator|.
name|TermQuery
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|search
operator|.
name|TermRangeQuery
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|util
operator|.
name|BytesRef
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|util
operator|.
name|NumericUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|dom
operator|.
name|QName
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|indexing
operator|.
name|lucene
operator|.
name|LuceneIndexConfig
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|storage
operator|.
name|NodePath
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|util
operator|.
name|DatabaseConfigurationException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|xquery
operator|.
name|Constants
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|xquery
operator|.
name|XPathException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|xquery
operator|.
name|value
operator|.
name|*
import|;
end_import

begin_import
import|import
name|org
operator|.
name|w3c
operator|.
name|dom
operator|.
name|Element
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_class
specifier|public
class|class
name|RangeIndexConfigElement
block|{
specifier|protected
name|NodePath
name|path
init|=
literal|null
decl_stmt|;
specifier|private
name|int
name|type
init|=
name|Type
operator|.
name|STRING
decl_stmt|;
specifier|private
name|RangeIndexConfigElement
name|nextConfig
init|=
literal|null
decl_stmt|;
specifier|private
name|boolean
name|isQNameIndex
init|=
literal|false
decl_stmt|;
specifier|public
name|RangeIndexConfigElement
parameter_list|()
block|{
block|}
specifier|public
name|RangeIndexConfigElement
parameter_list|(
name|Element
name|node
parameter_list|,
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|namespaces
parameter_list|)
throws|throws
name|DatabaseConfigurationException
block|{
name|String
name|match
init|=
name|node
operator|.
name|getAttribute
argument_list|(
literal|"match"
argument_list|)
decl_stmt|;
if|if
condition|(
name|match
operator|!=
literal|null
operator|&&
name|match
operator|.
name|length
argument_list|()
operator|>
literal|0
condition|)
block|{
try|try
block|{
name|path
operator|=
operator|new
name|NodePath
argument_list|(
name|namespaces
argument_list|,
name|match
argument_list|)
expr_stmt|;
if|if
condition|(
name|path
operator|.
name|length
argument_list|()
operator|==
literal|0
condition|)
throw|throw
operator|new
name|DatabaseConfigurationException
argument_list|(
literal|"Range index module: Invalid match path in collection config: "
operator|+
name|match
argument_list|)
throw|;
block|}
catch|catch
parameter_list|(
name|IllegalArgumentException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|DatabaseConfigurationException
argument_list|(
literal|"Range index module: invalid qname in configuration: "
operator|+
name|e
operator|.
name|getMessage
argument_list|()
argument_list|)
throw|;
block|}
block|}
if|else if
condition|(
name|node
operator|.
name|hasAttribute
argument_list|(
literal|"qname"
argument_list|)
condition|)
block|{
name|QName
name|qname
init|=
name|LuceneIndexConfig
operator|.
name|parseQName
argument_list|(
name|node
argument_list|,
name|namespaces
argument_list|)
decl_stmt|;
name|path
operator|=
operator|new
name|NodePath
argument_list|(
name|qname
argument_list|)
expr_stmt|;
name|isQNameIndex
operator|=
literal|true
expr_stmt|;
block|}
name|String
name|typeStr
init|=
name|node
operator|.
name|getAttribute
argument_list|(
literal|"type"
argument_list|)
decl_stmt|;
if|if
condition|(
name|typeStr
operator|!=
literal|null
operator|&&
name|typeStr
operator|.
name|length
argument_list|()
operator|>
literal|0
condition|)
block|{
try|try
block|{
name|this
operator|.
name|type
operator|=
name|Type
operator|.
name|getType
argument_list|(
name|typeStr
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|XPathException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|DatabaseConfigurationException
argument_list|(
literal|"Invalid type declared for range index on "
operator|+
name|match
operator|+
literal|": "
operator|+
name|typeStr
argument_list|)
throw|;
block|}
block|}
block|}
specifier|public
name|Field
name|convertToField
parameter_list|(
name|String
name|fieldName
parameter_list|,
name|String
name|content
parameter_list|)
block|{
name|int
name|fieldType
init|=
name|getType
argument_list|(
name|fieldName
argument_list|)
decl_stmt|;
try|try
block|{
switch|switch
condition|(
name|fieldType
condition|)
block|{
case|case
name|Type
operator|.
name|INTEGER
case|:
case|case
name|Type
operator|.
name|LONG
case|:
case|case
name|Type
operator|.
name|UNSIGNED_LONG
case|:
name|long
name|lvalue
init|=
name|Long
operator|.
name|parseLong
argument_list|(
name|content
argument_list|)
decl_stmt|;
return|return
operator|new
name|LongField
argument_list|(
name|fieldName
argument_list|,
name|lvalue
argument_list|,
name|LongField
operator|.
name|TYPE_NOT_STORED
argument_list|)
return|;
case|case
name|Type
operator|.
name|INT
case|:
case|case
name|Type
operator|.
name|UNSIGNED_INT
case|:
case|case
name|Type
operator|.
name|SHORT
case|:
case|case
name|Type
operator|.
name|UNSIGNED_SHORT
case|:
name|int
name|ivalue
init|=
name|Integer
operator|.
name|parseInt
argument_list|(
name|content
argument_list|)
decl_stmt|;
return|return
operator|new
name|IntField
argument_list|(
name|fieldName
argument_list|,
name|ivalue
argument_list|,
name|IntField
operator|.
name|TYPE_NOT_STORED
argument_list|)
return|;
case|case
name|Type
operator|.
name|DECIMAL
case|:
case|case
name|Type
operator|.
name|DOUBLE
case|:
name|double
name|dvalue
init|=
name|Double
operator|.
name|parseDouble
argument_list|(
name|content
argument_list|)
decl_stmt|;
return|return
operator|new
name|DoubleField
argument_list|(
name|fieldName
argument_list|,
name|dvalue
argument_list|,
name|DoubleField
operator|.
name|TYPE_NOT_STORED
argument_list|)
return|;
case|case
name|Type
operator|.
name|FLOAT
case|:
name|float
name|fvalue
init|=
name|Float
operator|.
name|parseFloat
argument_list|(
name|content
argument_list|)
decl_stmt|;
return|return
operator|new
name|FloatField
argument_list|(
name|fieldName
argument_list|,
name|fvalue
argument_list|,
name|FloatField
operator|.
name|TYPE_NOT_STORED
argument_list|)
return|;
default|default:
comment|// default: treat as text string
return|return
operator|new
name|TextField
argument_list|(
name|fieldName
argument_list|,
name|content
argument_list|,
name|Field
operator|.
name|Store
operator|.
name|NO
argument_list|)
return|;
block|}
block|}
catch|catch
parameter_list|(
name|NumberFormatException
name|e
parameter_list|)
block|{
comment|// wrong type: ignore
block|}
return|return
literal|null
return|;
block|}
specifier|public
specifier|static
name|Query
name|toQuery
parameter_list|(
name|String
name|field
parameter_list|,
name|AtomicValue
name|content
parameter_list|,
name|int
name|operator
parameter_list|)
throws|throws
name|XPathException
block|{
if|if
condition|(
name|operator
operator|==
name|Constants
operator|.
name|EQ
condition|)
block|{
return|return
operator|new
name|TermQuery
argument_list|(
operator|new
name|Term
argument_list|(
name|field
argument_list|,
name|convertToBytes
argument_list|(
name|content
argument_list|)
argument_list|)
argument_list|)
return|;
block|}
specifier|final
name|int
name|type
init|=
name|content
operator|.
name|getType
argument_list|()
decl_stmt|;
specifier|final
name|boolean
name|includeUpper
init|=
name|operator
operator|==
name|Constants
operator|.
name|LTEQ
decl_stmt|;
specifier|final
name|boolean
name|includeLower
init|=
name|operator
operator|==
name|Constants
operator|.
name|GTEQ
decl_stmt|;
switch|switch
condition|(
name|type
condition|)
block|{
case|case
name|Type
operator|.
name|INTEGER
case|:
case|case
name|Type
operator|.
name|LONG
case|:
case|case
name|Type
operator|.
name|UNSIGNED_LONG
case|:
if|if
condition|(
name|operator
operator|==
name|Constants
operator|.
name|LT
operator|||
name|operator
operator|==
name|Constants
operator|.
name|LTEQ
condition|)
block|{
return|return
name|NumericRangeQuery
operator|.
name|newLongRange
argument_list|(
name|field
argument_list|,
literal|null
argument_list|,
operator|(
operator|(
name|NumericValue
operator|)
name|content
operator|)
operator|.
name|getLong
argument_list|()
argument_list|,
name|includeLower
argument_list|,
name|includeUpper
argument_list|)
return|;
block|}
else|else
block|{
return|return
name|NumericRangeQuery
operator|.
name|newLongRange
argument_list|(
name|field
argument_list|,
operator|(
operator|(
name|NumericValue
operator|)
name|content
operator|)
operator|.
name|getLong
argument_list|()
argument_list|,
literal|null
argument_list|,
name|includeLower
argument_list|,
name|includeUpper
argument_list|)
return|;
block|}
case|case
name|Type
operator|.
name|INT
case|:
case|case
name|Type
operator|.
name|UNSIGNED_INT
case|:
case|case
name|Type
operator|.
name|SHORT
case|:
case|case
name|Type
operator|.
name|UNSIGNED_SHORT
case|:
if|if
condition|(
name|operator
operator|==
name|Constants
operator|.
name|LT
operator|||
name|operator
operator|==
name|Constants
operator|.
name|LTEQ
condition|)
block|{
return|return
name|NumericRangeQuery
operator|.
name|newIntRange
argument_list|(
name|field
argument_list|,
literal|null
argument_list|,
operator|(
operator|(
name|NumericValue
operator|)
name|content
operator|)
operator|.
name|getInt
argument_list|()
argument_list|,
name|includeLower
argument_list|,
name|includeUpper
argument_list|)
return|;
block|}
else|else
block|{
return|return
name|NumericRangeQuery
operator|.
name|newIntRange
argument_list|(
name|field
argument_list|,
operator|(
operator|(
name|NumericValue
operator|)
name|content
operator|)
operator|.
name|getInt
argument_list|()
argument_list|,
literal|null
argument_list|,
name|includeLower
argument_list|,
name|includeUpper
argument_list|)
return|;
block|}
case|case
name|Type
operator|.
name|DECIMAL
case|:
case|case
name|Type
operator|.
name|DOUBLE
case|:
if|if
condition|(
name|operator
operator|==
name|Constants
operator|.
name|LT
operator|||
name|operator
operator|==
name|Constants
operator|.
name|LTEQ
condition|)
block|{
return|return
name|NumericRangeQuery
operator|.
name|newDoubleRange
argument_list|(
name|field
argument_list|,
literal|null
argument_list|,
operator|(
operator|(
name|NumericValue
operator|)
name|content
operator|)
operator|.
name|getDouble
argument_list|()
argument_list|,
name|includeLower
argument_list|,
name|includeUpper
argument_list|)
return|;
block|}
else|else
block|{
return|return
name|NumericRangeQuery
operator|.
name|newDoubleRange
argument_list|(
name|field
argument_list|,
operator|(
operator|(
name|NumericValue
operator|)
name|content
operator|)
operator|.
name|getDouble
argument_list|()
argument_list|,
literal|null
argument_list|,
name|includeLower
argument_list|,
name|includeUpper
argument_list|)
return|;
block|}
case|case
name|Type
operator|.
name|FLOAT
case|:
if|if
condition|(
name|operator
operator|==
name|Constants
operator|.
name|LT
operator|||
name|operator
operator|==
name|Constants
operator|.
name|LTEQ
condition|)
block|{
return|return
name|NumericRangeQuery
operator|.
name|newFloatRange
argument_list|(
name|field
argument_list|,
literal|null
argument_list|,
operator|(
name|float
operator|)
operator|(
operator|(
name|NumericValue
operator|)
name|content
operator|)
operator|.
name|getDouble
argument_list|()
argument_list|,
name|includeLower
argument_list|,
name|includeUpper
argument_list|)
return|;
block|}
else|else
block|{
return|return
name|NumericRangeQuery
operator|.
name|newFloatRange
argument_list|(
name|field
argument_list|,
operator|(
name|float
operator|)
operator|(
operator|(
name|NumericValue
operator|)
name|content
operator|)
operator|.
name|getDouble
argument_list|()
argument_list|,
literal|null
argument_list|,
name|includeLower
argument_list|,
name|includeUpper
argument_list|)
return|;
block|}
default|default:
if|if
condition|(
name|operator
operator|==
name|Constants
operator|.
name|LT
operator|||
name|operator
operator|==
name|Constants
operator|.
name|LTEQ
condition|)
block|{
return|return
operator|new
name|TermRangeQuery
argument_list|(
name|field
argument_list|,
literal|null
argument_list|,
name|convertToBytes
argument_list|(
name|content
argument_list|)
argument_list|,
name|includeLower
argument_list|,
name|includeUpper
argument_list|)
return|;
block|}
else|else
block|{
return|return
operator|new
name|TermRangeQuery
argument_list|(
name|field
argument_list|,
name|convertToBytes
argument_list|(
name|content
argument_list|)
argument_list|,
literal|null
argument_list|,
name|includeLower
argument_list|,
name|includeUpper
argument_list|)
return|;
block|}
block|}
block|}
specifier|public
specifier|static
name|BytesRef
name|convertToBytes
parameter_list|(
name|AtomicValue
name|content
parameter_list|)
throws|throws
name|XPathException
block|{
name|BytesRef
name|bytes
decl_stmt|;
switch|switch
condition|(
name|content
operator|.
name|getType
argument_list|()
condition|)
block|{
case|case
name|Type
operator|.
name|INTEGER
case|:
case|case
name|Type
operator|.
name|LONG
case|:
case|case
name|Type
operator|.
name|UNSIGNED_LONG
case|:
name|bytes
operator|=
operator|new
name|BytesRef
argument_list|(
name|NumericUtils
operator|.
name|BUF_SIZE_LONG
argument_list|)
expr_stmt|;
name|NumericUtils
operator|.
name|longToPrefixCoded
argument_list|(
operator|(
operator|(
name|IntegerValue
operator|)
name|content
operator|)
operator|.
name|getLong
argument_list|()
argument_list|,
literal|0
argument_list|,
name|bytes
argument_list|)
expr_stmt|;
return|return
name|bytes
return|;
case|case
name|Type
operator|.
name|SHORT
case|:
case|case
name|Type
operator|.
name|UNSIGNED_SHORT
case|:
case|case
name|Type
operator|.
name|INT
case|:
case|case
name|Type
operator|.
name|UNSIGNED_INT
case|:
name|bytes
operator|=
operator|new
name|BytesRef
argument_list|(
name|NumericUtils
operator|.
name|BUF_SIZE_INT
argument_list|)
expr_stmt|;
name|NumericUtils
operator|.
name|intToPrefixCoded
argument_list|(
operator|(
operator|(
name|IntegerValue
operator|)
name|content
operator|)
operator|.
name|getInt
argument_list|()
argument_list|,
literal|0
argument_list|,
name|bytes
argument_list|)
expr_stmt|;
return|return
name|bytes
return|;
case|case
name|Type
operator|.
name|DECIMAL
case|:
name|long
name|dv
init|=
name|NumericUtils
operator|.
name|doubleToSortableLong
argument_list|(
operator|(
operator|(
name|DecimalValue
operator|)
name|content
operator|)
operator|.
name|getDouble
argument_list|()
argument_list|)
decl_stmt|;
name|bytes
operator|=
operator|new
name|BytesRef
argument_list|(
name|NumericUtils
operator|.
name|BUF_SIZE_LONG
argument_list|)
expr_stmt|;
name|NumericUtils
operator|.
name|longToPrefixCoded
argument_list|(
name|dv
argument_list|,
literal|0
argument_list|,
name|bytes
argument_list|)
expr_stmt|;
return|return
name|bytes
return|;
case|case
name|Type
operator|.
name|DOUBLE
case|:
name|long
name|lv
init|=
name|NumericUtils
operator|.
name|doubleToSortableLong
argument_list|(
operator|(
operator|(
name|DoubleValue
operator|)
name|content
operator|)
operator|.
name|getDouble
argument_list|()
argument_list|)
decl_stmt|;
name|bytes
operator|=
operator|new
name|BytesRef
argument_list|(
name|NumericUtils
operator|.
name|BUF_SIZE_LONG
argument_list|)
expr_stmt|;
name|NumericUtils
operator|.
name|longToPrefixCoded
argument_list|(
name|lv
argument_list|,
literal|0
argument_list|,
name|bytes
argument_list|)
expr_stmt|;
return|return
name|bytes
return|;
case|case
name|Type
operator|.
name|FLOAT
case|:
name|int
name|iv
init|=
name|NumericUtils
operator|.
name|floatToSortableInt
argument_list|(
operator|(
operator|(
name|FloatValue
operator|)
name|content
operator|)
operator|.
name|getValue
argument_list|()
argument_list|)
decl_stmt|;
name|bytes
operator|=
operator|new
name|BytesRef
argument_list|(
name|NumericUtils
operator|.
name|BUF_SIZE_INT
argument_list|)
expr_stmt|;
name|NumericUtils
operator|.
name|longToPrefixCoded
argument_list|(
name|iv
argument_list|,
literal|0
argument_list|,
name|bytes
argument_list|)
expr_stmt|;
return|return
name|bytes
return|;
default|default:
return|return
operator|new
name|BytesRef
argument_list|(
name|content
operator|.
name|getStringValue
argument_list|()
argument_list|)
return|;
block|}
block|}
specifier|public
specifier|static
name|Term
name|convertToTerm
parameter_list|(
name|String
name|fieldName
parameter_list|,
name|AtomicValue
name|content
parameter_list|)
throws|throws
name|XPathException
block|{
name|BytesRef
name|bytes
decl_stmt|;
switch|switch
condition|(
name|content
operator|.
name|getType
argument_list|()
condition|)
block|{
case|case
name|Type
operator|.
name|INTEGER
case|:
case|case
name|Type
operator|.
name|LONG
case|:
case|case
name|Type
operator|.
name|UNSIGNED_LONG
case|:
name|bytes
operator|=
operator|new
name|BytesRef
argument_list|(
name|NumericUtils
operator|.
name|BUF_SIZE_LONG
argument_list|)
expr_stmt|;
name|NumericUtils
operator|.
name|longToPrefixCoded
argument_list|(
operator|(
operator|(
name|IntegerValue
operator|)
name|content
operator|)
operator|.
name|getLong
argument_list|()
argument_list|,
literal|0
argument_list|,
name|bytes
argument_list|)
expr_stmt|;
return|return
operator|new
name|Term
argument_list|(
name|fieldName
argument_list|,
name|bytes
argument_list|)
return|;
case|case
name|Type
operator|.
name|SHORT
case|:
case|case
name|Type
operator|.
name|UNSIGNED_SHORT
case|:
case|case
name|Type
operator|.
name|INT
case|:
case|case
name|Type
operator|.
name|UNSIGNED_INT
case|:
name|bytes
operator|=
operator|new
name|BytesRef
argument_list|(
name|NumericUtils
operator|.
name|BUF_SIZE_INT
argument_list|)
expr_stmt|;
name|NumericUtils
operator|.
name|intToPrefixCoded
argument_list|(
operator|(
operator|(
name|IntegerValue
operator|)
name|content
operator|)
operator|.
name|getInt
argument_list|()
argument_list|,
literal|0
argument_list|,
name|bytes
argument_list|)
expr_stmt|;
return|return
operator|new
name|Term
argument_list|(
name|fieldName
argument_list|,
name|bytes
argument_list|)
return|;
case|case
name|Type
operator|.
name|DECIMAL
case|:
name|long
name|dv
init|=
name|NumericUtils
operator|.
name|doubleToSortableLong
argument_list|(
operator|(
operator|(
name|DecimalValue
operator|)
name|content
operator|)
operator|.
name|getDouble
argument_list|()
argument_list|)
decl_stmt|;
name|bytes
operator|=
operator|new
name|BytesRef
argument_list|(
name|NumericUtils
operator|.
name|BUF_SIZE_LONG
argument_list|)
expr_stmt|;
name|NumericUtils
operator|.
name|longToPrefixCoded
argument_list|(
name|dv
argument_list|,
literal|0
argument_list|,
name|bytes
argument_list|)
expr_stmt|;
return|return
operator|new
name|Term
argument_list|(
name|fieldName
argument_list|,
name|bytes
argument_list|)
return|;
case|case
name|Type
operator|.
name|DOUBLE
case|:
name|long
name|lv
init|=
name|NumericUtils
operator|.
name|doubleToSortableLong
argument_list|(
operator|(
operator|(
name|DoubleValue
operator|)
name|content
operator|)
operator|.
name|getDouble
argument_list|()
argument_list|)
decl_stmt|;
name|bytes
operator|=
operator|new
name|BytesRef
argument_list|(
name|NumericUtils
operator|.
name|BUF_SIZE_LONG
argument_list|)
expr_stmt|;
name|NumericUtils
operator|.
name|longToPrefixCoded
argument_list|(
name|lv
argument_list|,
literal|0
argument_list|,
name|bytes
argument_list|)
expr_stmt|;
return|return
operator|new
name|Term
argument_list|(
name|fieldName
argument_list|,
name|bytes
argument_list|)
return|;
case|case
name|Type
operator|.
name|FLOAT
case|:
name|int
name|iv
init|=
name|NumericUtils
operator|.
name|floatToSortableInt
argument_list|(
operator|(
operator|(
name|FloatValue
operator|)
name|content
operator|)
operator|.
name|getValue
argument_list|()
argument_list|)
decl_stmt|;
name|bytes
operator|=
operator|new
name|BytesRef
argument_list|(
name|NumericUtils
operator|.
name|BUF_SIZE_INT
argument_list|)
expr_stmt|;
name|NumericUtils
operator|.
name|longToPrefixCoded
argument_list|(
name|iv
argument_list|,
literal|0
argument_list|,
name|bytes
argument_list|)
expr_stmt|;
return|return
operator|new
name|Term
argument_list|(
name|fieldName
argument_list|,
name|bytes
argument_list|)
return|;
default|default:
return|return
operator|new
name|Term
argument_list|(
name|fieldName
argument_list|,
name|content
operator|.
name|getStringValue
argument_list|()
argument_list|)
return|;
block|}
block|}
specifier|public
name|TextCollector
name|getCollector
parameter_list|()
block|{
return|return
operator|new
name|SimpleTextCollector
argument_list|()
return|;
block|}
specifier|public
name|boolean
name|isComplex
parameter_list|()
block|{
return|return
literal|false
return|;
block|}
specifier|public
name|int
name|getType
parameter_list|(
name|String
name|fieldName
parameter_list|)
block|{
comment|// no fields: return type
return|return
name|type
return|;
block|}
specifier|public
name|int
name|getType
parameter_list|()
block|{
return|return
name|type
return|;
block|}
specifier|public
name|NodePath
name|getNodePath
parameter_list|()
block|{
return|return
name|path
return|;
block|}
specifier|public
name|void
name|add
parameter_list|(
name|RangeIndexConfigElement
name|config
parameter_list|)
block|{
if|if
condition|(
name|nextConfig
operator|==
literal|null
condition|)
name|nextConfig
operator|=
name|config
expr_stmt|;
else|else
name|nextConfig
operator|.
name|add
argument_list|(
name|config
argument_list|)
expr_stmt|;
block|}
specifier|public
name|RangeIndexConfigElement
name|getNext
parameter_list|()
block|{
return|return
name|nextConfig
return|;
block|}
specifier|public
name|boolean
name|match
parameter_list|(
name|NodePath
name|other
parameter_list|)
block|{
if|if
condition|(
name|isQNameIndex
condition|)
return|return
name|other
operator|.
name|getLastComponent
argument_list|()
operator|.
name|equalsSimple
argument_list|(
name|path
operator|.
name|getLastComponent
argument_list|()
argument_list|)
return|;
return|return
name|other
operator|.
name|match
argument_list|(
name|path
argument_list|)
return|;
block|}
specifier|public
name|boolean
name|find
parameter_list|(
name|NodePath
name|other
parameter_list|)
block|{
return|return
name|match
argument_list|(
name|other
argument_list|)
return|;
block|}
block|}
end_class

end_unit

