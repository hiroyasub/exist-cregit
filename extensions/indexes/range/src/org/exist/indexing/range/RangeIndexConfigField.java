begin_unit|revision:1.0.0;language:Java;cregit-version:0.0.1
begin_package
package|package
name|org
operator|.
name|exist
operator|.
name|indexing
operator|.
name|range
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|analysis
operator|.
name|Analyzer
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|collation
operator|.
name|CollationKeyAnalyzer
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|util
operator|.
name|Version
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|dom
operator|.
name|QName
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|indexing
operator|.
name|lucene
operator|.
name|LuceneIndexConfig
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|storage
operator|.
name|NodePath
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|util
operator|.
name|Collations
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|util
operator|.
name|DatabaseConfigurationException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|util
operator|.
name|XMLString
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|xquery
operator|.
name|XPathException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|xquery
operator|.
name|value
operator|.
name|Type
import|;
end_import

begin_import
import|import
name|org
operator|.
name|w3c
operator|.
name|dom
operator|.
name|Element
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_class
specifier|public
class|class
name|RangeIndexConfigField
block|{
specifier|private
name|String
name|name
decl_stmt|;
specifier|private
name|NodePath
name|path
init|=
literal|null
decl_stmt|;
specifier|private
name|NodePath
name|relPath
init|=
literal|null
decl_stmt|;
specifier|private
name|int
name|type
init|=
name|Type
operator|.
name|STRING
decl_stmt|;
specifier|protected
name|boolean
name|includeNested
init|=
literal|false
decl_stmt|;
specifier|protected
name|int
name|wsTreatment
init|=
name|XMLString
operator|.
name|SUPPRESS_NONE
decl_stmt|;
specifier|protected
name|boolean
name|isQNameIndex
init|=
literal|false
decl_stmt|;
specifier|public
name|RangeIndexConfigField
parameter_list|(
name|NodePath
name|parentPath
parameter_list|,
name|Element
name|elem
parameter_list|,
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|namespaces
parameter_list|)
throws|throws
name|DatabaseConfigurationException
block|{
name|name
operator|=
name|elem
operator|.
name|getAttribute
argument_list|(
literal|"name"
argument_list|)
expr_stmt|;
name|path
operator|=
name|parentPath
expr_stmt|;
if|if
condition|(
name|name
operator|==
literal|null
operator|||
name|name
operator|.
name|length
argument_list|()
operator|==
literal|0
condition|)
block|{
throw|throw
operator|new
name|DatabaseConfigurationException
argument_list|(
literal|"Range index module: field element requires a name attribute"
argument_list|)
throw|;
block|}
name|String
name|match
init|=
name|elem
operator|.
name|getAttribute
argument_list|(
literal|"match"
argument_list|)
decl_stmt|;
if|if
condition|(
name|match
operator|!=
literal|null
operator|&&
name|match
operator|.
name|length
argument_list|()
operator|>
literal|0
condition|)
block|{
try|try
block|{
name|relPath
operator|=
operator|new
name|NodePath
argument_list|(
name|namespaces
argument_list|,
name|match
argument_list|)
expr_stmt|;
if|if
condition|(
name|relPath
operator|.
name|length
argument_list|()
operator|==
literal|0
condition|)
throw|throw
operator|new
name|DatabaseConfigurationException
argument_list|(
literal|"Range index module: Invalid match path in collection config: "
operator|+
name|match
argument_list|)
throw|;
name|path
operator|=
operator|new
name|NodePath
argument_list|(
name|parentPath
argument_list|)
expr_stmt|;
name|path
operator|.
name|append
argument_list|(
name|relPath
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IllegalArgumentException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|DatabaseConfigurationException
argument_list|(
literal|"Range index module: invalid qname in configuration: "
operator|+
name|e
operator|.
name|getMessage
argument_list|()
argument_list|)
throw|;
block|}
block|}
if|else if
condition|(
name|elem
operator|.
name|hasAttribute
argument_list|(
literal|"qname"
argument_list|)
condition|)
block|{
name|QName
name|qname
init|=
name|LuceneIndexConfig
operator|.
name|parseQName
argument_list|(
name|elem
argument_list|,
name|namespaces
argument_list|)
decl_stmt|;
name|path
operator|=
operator|new
name|NodePath
argument_list|(
name|qname
argument_list|)
expr_stmt|;
name|relPath
operator|=
name|path
expr_stmt|;
name|isQNameIndex
operator|=
literal|true
expr_stmt|;
block|}
name|String
name|typeStr
init|=
name|elem
operator|.
name|getAttribute
argument_list|(
literal|"type"
argument_list|)
decl_stmt|;
if|if
condition|(
name|typeStr
operator|!=
literal|null
operator|&&
name|typeStr
operator|.
name|length
argument_list|()
operator|>
literal|0
condition|)
block|{
try|try
block|{
name|this
operator|.
name|type
operator|=
name|Type
operator|.
name|getType
argument_list|(
name|typeStr
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|XPathException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|DatabaseConfigurationException
argument_list|(
literal|"Invalid type declared for range index on "
operator|+
name|match
operator|+
literal|": "
operator|+
name|typeStr
argument_list|)
throw|;
block|}
block|}
name|String
name|nested
init|=
name|elem
operator|.
name|getAttribute
argument_list|(
literal|"nested"
argument_list|)
decl_stmt|;
name|includeNested
operator|=
operator|(
name|nested
operator|==
literal|null
operator|||
name|nested
operator|.
name|equalsIgnoreCase
argument_list|(
literal|"yes"
argument_list|)
operator|)
expr_stmt|;
comment|// normalize whitespace if whitespace="normalize"
name|String
name|whitespace
init|=
name|elem
operator|.
name|getAttribute
argument_list|(
literal|"whitespace"
argument_list|)
decl_stmt|;
if|if
condition|(
name|whitespace
operator|!=
literal|null
condition|)
block|{
if|if
condition|(
literal|"trim"
operator|.
name|equalsIgnoreCase
argument_list|(
name|whitespace
argument_list|)
condition|)
block|{
name|wsTreatment
operator|=
name|XMLString
operator|.
name|SUPPRESS_BOTH
expr_stmt|;
block|}
if|else if
condition|(
literal|"normalize"
operator|.
name|equalsIgnoreCase
argument_list|(
name|whitespace
argument_list|)
condition|)
block|{
name|wsTreatment
operator|=
name|XMLString
operator|.
name|NORMALIZE
expr_stmt|;
block|}
block|}
block|}
specifier|public
name|String
name|getName
parameter_list|()
block|{
return|return
name|name
return|;
block|}
specifier|public
name|NodePath
name|getPath
parameter_list|()
block|{
return|return
name|path
return|;
block|}
specifier|public
name|NodePath
name|getRelPath
parameter_list|()
block|{
return|return
name|relPath
return|;
block|}
specifier|public
name|int
name|getType
parameter_list|()
block|{
return|return
name|type
return|;
block|}
specifier|public
name|boolean
name|match
parameter_list|(
name|NodePath
name|other
parameter_list|)
block|{
return|return
name|path
operator|.
name|match
argument_list|(
name|other
argument_list|)
return|;
block|}
specifier|public
name|boolean
name|match
parameter_list|(
name|NodePath
name|parentPath
parameter_list|,
name|NodePath
name|other
parameter_list|)
block|{
name|NodePath
name|absPath
init|=
operator|new
name|NodePath
argument_list|(
name|parentPath
argument_list|)
decl_stmt|;
name|absPath
operator|.
name|append
argument_list|(
name|relPath
argument_list|)
expr_stmt|;
return|return
name|absPath
operator|.
name|match
argument_list|(
name|other
argument_list|)
return|;
block|}
specifier|public
name|int
name|whitespaceTreatment
parameter_list|()
block|{
return|return
name|wsTreatment
return|;
block|}
specifier|public
name|boolean
name|includeNested
parameter_list|()
block|{
return|return
name|includeNested
return|;
block|}
block|}
end_class

end_unit

