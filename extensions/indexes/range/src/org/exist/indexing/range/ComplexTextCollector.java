begin_unit|revision:1.0.0;language:Java;cregit-version:0.0.1
begin_package
package|package
name|org
operator|.
name|exist
operator|.
name|indexing
operator|.
name|range
package|;
end_package

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|dom
operator|.
name|persistent
operator|.
name|AttrImpl
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|dom
operator|.
name|persistent
operator|.
name|AbstractCharacterData
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|dom
operator|.
name|QName
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|storage
operator|.
name|NodePath
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|*
import|;
end_import

begin_class
specifier|public
class|class
name|ComplexTextCollector
implements|implements
name|TextCollector
block|{
specifier|private
name|NodePath
name|parentPath
decl_stmt|;
specifier|private
name|ComplexRangeIndexConfigElement
name|config
decl_stmt|;
specifier|private
name|List
argument_list|<
name|Field
argument_list|>
name|fields
init|=
operator|new
name|LinkedList
argument_list|<
name|Field
argument_list|>
argument_list|()
decl_stmt|;
specifier|private
name|RangeIndexConfigField
name|currentField
init|=
literal|null
decl_stmt|;
specifier|private
name|int
name|length
init|=
literal|0
decl_stmt|;
specifier|public
name|ComplexTextCollector
parameter_list|(
name|ComplexRangeIndexConfigElement
name|configuration
parameter_list|,
name|NodePath
name|parentPath
parameter_list|)
block|{
name|this
operator|.
name|config
operator|=
name|configuration
expr_stmt|;
name|this
operator|.
name|parentPath
operator|=
operator|new
name|NodePath
argument_list|(
name|parentPath
argument_list|,
literal|false
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|startElement
parameter_list|(
name|QName
name|qname
parameter_list|,
name|NodePath
name|path
parameter_list|)
block|{
name|RangeIndexConfigField
name|fieldConf
init|=
name|config
operator|.
name|getField
argument_list|(
name|parentPath
argument_list|,
name|path
argument_list|)
decl_stmt|;
if|if
condition|(
name|fieldConf
operator|!=
literal|null
condition|)
block|{
name|currentField
operator|=
name|fieldConf
expr_stmt|;
name|Field
name|field
init|=
operator|new
name|Field
argument_list|(
name|currentField
operator|.
name|getName
argument_list|()
argument_list|,
literal|false
argument_list|,
name|fieldConf
operator|.
name|whitespaceTreatment
argument_list|()
argument_list|,
name|fieldConf
operator|.
name|isCaseSensitive
argument_list|()
argument_list|)
decl_stmt|;
name|fields
operator|.
name|add
argument_list|(
name|field
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Override
specifier|public
name|void
name|endElement
parameter_list|(
name|QName
name|qname
parameter_list|,
name|NodePath
name|path
parameter_list|)
block|{
if|if
condition|(
name|currentField
operator|!=
literal|null
operator|&&
name|currentField
operator|.
name|match
argument_list|(
name|path
argument_list|)
condition|)
block|{
name|currentField
operator|=
literal|null
expr_stmt|;
block|}
block|}
annotation|@
name|Override
specifier|public
name|void
name|attribute
parameter_list|(
name|AttrImpl
name|attribute
parameter_list|,
name|NodePath
name|path
parameter_list|)
block|{
name|RangeIndexConfigField
name|fieldConf
init|=
name|config
operator|.
name|getField
argument_list|(
name|parentPath
argument_list|,
name|path
argument_list|)
decl_stmt|;
if|if
condition|(
name|fieldConf
operator|!=
literal|null
condition|)
block|{
name|Field
name|field
init|=
operator|new
name|Field
argument_list|(
name|fieldConf
operator|.
name|getName
argument_list|()
argument_list|,
literal|true
argument_list|,
name|fieldConf
operator|.
name|whitespaceTreatment
argument_list|()
argument_list|,
name|fieldConf
operator|.
name|isCaseSensitive
argument_list|()
argument_list|)
decl_stmt|;
name|field
operator|.
name|content
operator|.
name|append
argument_list|(
name|attribute
operator|.
name|getValue
argument_list|()
argument_list|)
expr_stmt|;
name|fields
operator|.
name|add
argument_list|(
literal|0
argument_list|,
name|field
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Override
specifier|public
name|void
name|characters
parameter_list|(
name|AbstractCharacterData
name|text
parameter_list|,
name|NodePath
name|path
parameter_list|)
block|{
if|if
condition|(
name|currentField
operator|!=
literal|null
condition|)
block|{
name|Field
name|field
init|=
name|fields
operator|.
name|get
argument_list|(
name|fields
operator|.
name|size
argument_list|()
operator|-
literal|1
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|field
operator|.
name|isAttribute
argument_list|()
operator|&&
operator|(
name|currentField
operator|.
name|includeNested
argument_list|()
operator|||
name|currentField
operator|.
name|match
argument_list|(
name|path
argument_list|)
operator|)
condition|)
block|{
name|field
operator|.
name|content
operator|.
name|append
argument_list|(
name|text
operator|.
name|getXMLString
argument_list|()
argument_list|)
expr_stmt|;
name|length
operator|+=
name|text
operator|.
name|getXMLString
argument_list|()
operator|.
name|length
argument_list|()
expr_stmt|;
block|}
block|}
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|hasFields
parameter_list|()
block|{
return|return
literal|true
return|;
block|}
annotation|@
name|Override
specifier|public
name|int
name|length
parameter_list|()
block|{
return|return
name|length
return|;
block|}
specifier|public
name|List
argument_list|<
name|Field
argument_list|>
name|getFields
parameter_list|()
block|{
return|return
name|fields
return|;
block|}
specifier|public
name|ComplexRangeIndexConfigElement
name|getConfig
parameter_list|()
block|{
return|return
name|config
return|;
block|}
block|}
end_class

end_unit

