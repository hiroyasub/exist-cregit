begin_unit|revision:1.0.0;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  *  eXist Open Source Native XML Database  *  Copyright (C) 2013 The eXist Project  *  http://exist-db.org  *  *  This program is free software; you can redistribute it and/or  *  modify it under the terms of the GNU Lesser General Public License  *  as published by the Free Software Foundation; either version 2  *  of the License, or (at your option) any later version.  *  *  This program is distributed in the hope that it will be useful,  *  but WITHOUT ANY WARRANTY; without even the implied warranty of  *  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the  *  GNU Lesser General Public License for more details.  *  *  You should have received a copy of the GNU Lesser General Public  *  License along with this library; if not, write to the Free Software  *  Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA  02110-1301  USA  *  *  $Id$  */
end_comment

begin_package
package|package
name|org
operator|.
name|exist
operator|.
name|indexing
operator|.
name|range
package|;
end_package

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|dom
operator|.
name|QName
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|storage
operator|.
name|ElementValue
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|storage
operator|.
name|NodePath
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|util
operator|.
name|DatabaseConfigurationException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|xquery
operator|.
name|*
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|xquery
operator|.
name|modules
operator|.
name|range
operator|.
name|Lookup
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|xquery
operator|.
name|modules
operator|.
name|range
operator|.
name|RangeQueryRewriter
import|;
end_import

begin_import
import|import
name|org
operator|.
name|w3c
operator|.
name|dom
operator|.
name|Element
import|;
end_import

begin_import
import|import
name|org
operator|.
name|w3c
operator|.
name|dom
operator|.
name|Node
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|xml
operator|.
name|XMLConstants
import|;
end_import

begin_comment
comment|/**  *  * A condition that can be defined for complex range config elements.  * As of now, limited to attribute equality.  *  * @author Marcel Schaeben  */
end_comment

begin_class
specifier|public
class|class
name|RangeIndexConfigAttributeCondition
extends|extends
name|RangeIndexConfigCondition
block|{
specifier|private
specifier|final
name|String
name|attributeString
decl_stmt|;
specifier|private
specifier|final
name|QName
name|attribute
decl_stmt|;
specifier|private
specifier|final
name|String
name|value
decl_stmt|;
specifier|private
specifier|final
name|RangeIndex
operator|.
name|Operator
name|operator
decl_stmt|;
specifier|public
name|RangeIndexConfigAttributeCondition
parameter_list|(
name|Element
name|elem
parameter_list|,
name|NodePath
name|parentPath
parameter_list|)
throws|throws
name|DatabaseConfigurationException
block|{
name|this
operator|.
name|operator
operator|=
name|RangeIndex
operator|.
name|Operator
operator|.
name|EQ
expr_stmt|;
name|this
operator|.
name|attributeString
operator|=
name|elem
operator|.
name|getAttribute
argument_list|(
literal|"attribute"
argument_list|)
expr_stmt|;
if|if
condition|(
name|parentPath
operator|.
name|getLastComponent
argument_list|()
operator|.
name|getNameType
argument_list|()
operator|==
name|ElementValue
operator|.
name|ATTRIBUTE
condition|)
block|{
throw|throw
operator|new
name|DatabaseConfigurationException
argument_list|(
literal|"Range index module: Attribute condition cannot be defined for an attribute:"
operator|+
name|parentPath
operator|.
name|toString
argument_list|()
argument_list|)
throw|;
block|}
if|if
condition|(
name|this
operator|.
name|attributeString
operator|==
literal|null
operator|||
name|this
operator|.
name|attributeString
operator|.
name|length
argument_list|()
operator|==
literal|0
condition|)
block|{
throw|throw
operator|new
name|DatabaseConfigurationException
argument_list|(
literal|"Range index module: Empty or no attribute qname in condition"
argument_list|)
throw|;
block|}
else|else
block|{
name|this
operator|.
name|attribute
operator|=
operator|new
name|QName
argument_list|(
name|QName
operator|.
name|extractLocalName
argument_list|(
name|this
operator|.
name|attributeString
argument_list|)
argument_list|,
name|XMLConstants
operator|.
name|NULL_NS_URI
argument_list|,
name|QName
operator|.
name|extractPrefix
argument_list|(
name|this
operator|.
name|attributeString
argument_list|)
argument_list|,
name|ElementValue
operator|.
name|ATTRIBUTE
argument_list|)
expr_stmt|;
name|this
operator|.
name|value
operator|=
name|elem
operator|.
name|getAttribute
argument_list|(
literal|"value"
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|matches
parameter_list|(
name|Node
name|node
parameter_list|)
block|{
if|if
condition|(
name|node
operator|.
name|getNodeType
argument_list|()
operator|==
name|Node
operator|.
name|ELEMENT_NODE
operator|&&
operator|(
operator|(
name|Element
operator|)
name|node
operator|)
operator|.
name|getAttribute
argument_list|(
name|attributeString
argument_list|)
operator|.
name|equals
argument_list|(
name|value
argument_list|)
condition|)
block|{
return|return
literal|true
return|;
block|}
return|return
literal|false
return|;
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|find
parameter_list|(
name|Predicate
name|predicate
parameter_list|)
block|{
name|Expression
name|inner
init|=
name|this
operator|.
name|getInnerExpression
argument_list|(
name|predicate
argument_list|)
decl_stmt|;
if|if
condition|(
name|inner
operator|instanceof
name|GeneralComparison
condition|)
block|{
specifier|final
name|GeneralComparison
name|comparison
init|=
operator|(
name|GeneralComparison
operator|)
name|inner
decl_stmt|;
specifier|final
name|Expression
name|lhe
init|=
name|comparison
operator|.
name|getLeft
argument_list|()
decl_stmt|;
specifier|final
name|Expression
name|rhe
init|=
name|comparison
operator|.
name|getRight
argument_list|()
decl_stmt|;
if|if
condition|(
name|lhe
operator|instanceof
name|LocationStep
operator|&&
name|rhe
operator|instanceof
name|LiteralValue
condition|)
block|{
specifier|final
name|QName
name|attribute
init|=
operator|(
operator|(
name|LocationStep
operator|)
name|lhe
operator|)
operator|.
name|getTest
argument_list|()
operator|.
name|getName
argument_list|()
decl_stmt|;
specifier|final
name|String
name|value
init|=
operator|(
operator|(
name|LiteralValue
operator|)
name|rhe
operator|)
operator|.
name|getValue
argument_list|()
operator|.
name|toString
argument_list|()
decl_stmt|;
specifier|final
name|RangeIndex
operator|.
name|Operator
name|operator
init|=
name|RangeQueryRewriter
operator|.
name|getOperator
argument_list|(
name|inner
argument_list|)
decl_stmt|;
if|if
condition|(
name|operator
operator|.
name|equals
argument_list|(
name|this
operator|.
name|operator
argument_list|)
operator|&&
name|attribute
operator|.
name|equals
argument_list|(
name|this
operator|.
name|attribute
argument_list|)
operator|&&
name|value
operator|.
name|equals
argument_list|(
name|value
argument_list|)
condition|)
block|{
return|return
literal|true
return|;
block|}
block|}
block|}
return|return
literal|false
return|;
block|}
block|}
end_class

end_unit

