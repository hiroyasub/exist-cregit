begin_unit|revision:1.0.0;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  *  eXist Open Source Native XML Database  *  Copyright (C) 2013 The eXist Project  *  http://exist-db.org  *  *  This program is free software; you can redistribute it and/or  *  modify it under the terms of the GNU Lesser General Public License  *  as published by the Free Software Foundation; either version 2  *  of the License, or (at your option) any later version.  *  *  This program is distributed in the hope that it will be useful,  *  but WITHOUT ANY WARRANTY; without even the implied warranty of  *  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the  *  GNU Lesser General Public License for more details.  *  *  You should have received a copy of the GNU Lesser General Public  *  License along with this library; if not, write to the Free Software  *  Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA  02110-1301  USA  *  *  $Id$  */
end_comment

begin_package
package|package
name|org
operator|.
name|exist
operator|.
name|indexing
operator|.
name|range
package|;
end_package

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|dom
operator|.
name|QName
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|storage
operator|.
name|ElementValue
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|storage
operator|.
name|NodePath
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|util
operator|.
name|DatabaseConfigurationException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|xquery
operator|.
name|*
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|xquery
operator|.
name|modules
operator|.
name|range
operator|.
name|RangeQueryRewriter
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|indexing
operator|.
name|range
operator|.
name|RangeIndex
operator|.
name|Operator
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|xquery
operator|.
name|value
operator|.
name|AtomicValue
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|xquery
operator|.
name|value
operator|.
name|NumericValue
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|xquery
operator|.
name|value
operator|.
name|Sequence
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|xquery
operator|.
name|value
operator|.
name|StringValue
import|;
end_import

begin_import
import|import
name|org
operator|.
name|w3c
operator|.
name|dom
operator|.
name|Element
import|;
end_import

begin_import
import|import
name|org
operator|.
name|w3c
operator|.
name|dom
operator|.
name|Node
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|xml
operator|.
name|XMLConstants
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|regex
operator|.
name|Matcher
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|regex
operator|.
name|Pattern
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|regex
operator|.
name|PatternSyntaxException
import|;
end_import

begin_import
import|import static
name|java
operator|.
name|util
operator|.
name|regex
operator|.
name|Pattern
operator|.
name|CASE_INSENSITIVE
import|;
end_import

begin_comment
comment|/**  *  * A condition that can be defined for complex range config elements  * that compares an attribute.  *  * @author Marcel Schaeben  */
end_comment

begin_class
specifier|public
class|class
name|RangeIndexConfigAttributeCondition
extends|extends
name|RangeIndexConfigCondition
block|{
specifier|private
specifier|final
name|String
name|attributeName
decl_stmt|;
specifier|private
specifier|final
name|QName
name|attribute
decl_stmt|;
specifier|private
specifier|final
name|String
name|value
decl_stmt|;
specifier|private
specifier|final
name|Operator
name|operator
decl_stmt|;
specifier|private
name|boolean
name|caseSensitive
init|=
literal|true
decl_stmt|;
specifier|private
name|boolean
name|numericComparison
init|=
literal|false
decl_stmt|;
specifier|private
name|Double
name|numericValue
init|=
literal|null
decl_stmt|;
specifier|private
name|String
name|lowercaseValue
init|=
literal|null
decl_stmt|;
specifier|private
name|Pattern
name|pattern
init|=
literal|null
decl_stmt|;
specifier|public
name|RangeIndexConfigAttributeCondition
parameter_list|(
name|Element
name|elem
parameter_list|,
name|NodePath
name|parentPath
parameter_list|)
throws|throws
name|DatabaseConfigurationException
block|{
if|if
condition|(
name|parentPath
operator|.
name|getLastComponent
argument_list|()
operator|.
name|getNameType
argument_list|()
operator|==
name|ElementValue
operator|.
name|ATTRIBUTE
condition|)
block|{
throw|throw
operator|new
name|DatabaseConfigurationException
argument_list|(
literal|"Range index module: Attribute condition cannot be defined for an attribute:"
operator|+
name|parentPath
operator|.
name|toString
argument_list|()
argument_list|)
throw|;
block|}
name|this
operator|.
name|attributeName
operator|=
name|elem
operator|.
name|getAttribute
argument_list|(
literal|"attribute"
argument_list|)
expr_stmt|;
if|if
condition|(
name|this
operator|.
name|attributeName
operator|==
literal|null
operator|||
name|this
operator|.
name|attributeName
operator|.
name|length
argument_list|()
operator|==
literal|0
condition|)
block|{
throw|throw
operator|new
name|DatabaseConfigurationException
argument_list|(
literal|"Range index module: Empty or no attribute qname in condition"
argument_list|)
throw|;
block|}
name|this
operator|.
name|attribute
operator|=
operator|new
name|QName
argument_list|(
name|QName
operator|.
name|extractLocalName
argument_list|(
name|this
operator|.
name|attributeName
argument_list|)
argument_list|,
name|XMLConstants
operator|.
name|NULL_NS_URI
argument_list|,
name|QName
operator|.
name|extractPrefix
argument_list|(
name|this
operator|.
name|attributeName
argument_list|)
argument_list|,
name|ElementValue
operator|.
name|ATTRIBUTE
argument_list|)
expr_stmt|;
name|this
operator|.
name|value
operator|=
name|elem
operator|.
name|getAttribute
argument_list|(
literal|"value"
argument_list|)
expr_stmt|;
comment|// parse operator (default to 'eq' if missing)
if|if
condition|(
name|elem
operator|.
name|hasAttribute
argument_list|(
literal|"operator"
argument_list|)
condition|)
block|{
specifier|final
name|String
name|operatorName
init|=
name|elem
operator|.
name|getAttribute
argument_list|(
literal|"operator"
argument_list|)
decl_stmt|;
name|this
operator|.
name|operator
operator|=
name|Operator
operator|.
name|getByName
argument_list|(
name|operatorName
operator|.
name|toLowerCase
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|this
operator|.
name|operator
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|DatabaseConfigurationException
argument_list|(
literal|"Range index module: Invalid operator specified in range index condition: "
operator|+
name|operatorName
operator|+
literal|"."
argument_list|)
throw|;
block|}
block|}
else|else
block|{
name|this
operator|.
name|operator
operator|=
name|Operator
operator|.
name|EQ
expr_stmt|;
block|}
specifier|final
name|String
name|caseString
init|=
name|elem
operator|.
name|getAttribute
argument_list|(
literal|"case"
argument_list|)
decl_stmt|;
specifier|final
name|String
name|numericString
init|=
name|elem
operator|.
name|getAttribute
argument_list|(
literal|"numeric"
argument_list|)
decl_stmt|;
name|this
operator|.
name|caseSensitive
operator|=
operator|(
name|caseString
operator|!=
literal|null
operator|&&
operator|!
name|caseString
operator|.
name|equalsIgnoreCase
argument_list|(
literal|"no"
argument_list|)
operator|)
expr_stmt|;
name|this
operator|.
name|numericComparison
operator|=
operator|(
name|numericString
operator|!=
literal|null
operator|&&
name|numericString
operator|.
name|equalsIgnoreCase
argument_list|(
literal|"yes"
argument_list|)
operator|)
expr_stmt|;
comment|// try to create a pattern matcher for a 'matches' condition
if|if
condition|(
name|this
operator|.
name|operator
operator|==
name|Operator
operator|.
name|MATCH
condition|)
block|{
specifier|final
name|int
name|flags
init|=
name|this
operator|.
name|caseSensitive
condition|?
literal|0
else|:
name|CASE_INSENSITIVE
decl_stmt|;
try|try
block|{
name|this
operator|.
name|pattern
operator|=
name|Pattern
operator|.
name|compile
argument_list|(
name|this
operator|.
name|value
argument_list|,
name|flags
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|PatternSyntaxException
name|e
parameter_list|)
block|{
name|RangeIndex
operator|.
name|LOG
operator|.
name|error
argument_list|(
name|e
argument_list|)
expr_stmt|;
throw|throw
operator|new
name|DatabaseConfigurationException
argument_list|(
literal|"Range index module: Invalid regular expression in condition: "
operator|+
name|this
operator|.
name|value
argument_list|)
throw|;
block|}
block|}
comment|// try to parse the number value if numeric comparison is specified
comment|// store a reference to numeric value to avoid having to parse each time
if|if
condition|(
name|this
operator|.
name|numericComparison
condition|)
block|{
switch|switch
condition|(
name|this
operator|.
name|operator
condition|)
block|{
case|case
name|MATCH
case|:
case|case
name|STARTS_WITH
case|:
case|case
name|ENDS_WITH
case|:
case|case
name|CONTAINS
case|:
throw|throw
operator|new
name|DatabaseConfigurationException
argument_list|(
literal|"Range index module: Numeric comparison not applicable for operator: "
operator|+
name|this
operator|.
name|operator
operator|.
name|name
argument_list|()
argument_list|)
throw|;
block|}
try|try
block|{
name|this
operator|.
name|numericValue
operator|=
name|Double
operator|.
name|parseDouble
argument_list|(
name|this
operator|.
name|value
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|NumberFormatException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|DatabaseConfigurationException
argument_list|(
literal|"Range index module: Numeric attribute condition specified, but required value cannot be parsed as number: "
operator|+
name|this
operator|.
name|value
argument_list|)
throw|;
block|}
block|}
block|}
comment|// lazily evaluate lowercase value to convert once when needed
specifier|private
name|String
name|getLowercaseValue
parameter_list|()
block|{
if|if
condition|(
name|this
operator|.
name|lowercaseValue
operator|==
literal|null
condition|)
block|{
if|if
condition|(
name|this
operator|.
name|value
operator|!=
literal|null
condition|)
block|{
name|this
operator|.
name|lowercaseValue
operator|=
name|this
operator|.
name|value
operator|.
name|toLowerCase
argument_list|()
expr_stmt|;
block|}
block|}
return|return
name|this
operator|.
name|lowercaseValue
return|;
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|matches
parameter_list|(
name|Node
name|node
parameter_list|)
block|{
if|if
condition|(
name|node
operator|.
name|getNodeType
argument_list|()
operator|==
name|Node
operator|.
name|ELEMENT_NODE
operator|&&
name|matchValue
argument_list|(
operator|(
operator|(
name|Element
operator|)
name|node
operator|)
operator|.
name|getAttribute
argument_list|(
name|attributeName
argument_list|)
argument_list|)
condition|)
block|{
return|return
literal|true
return|;
block|}
return|return
literal|false
return|;
block|}
specifier|private
name|boolean
name|matchValue
parameter_list|(
name|String
name|testValue
parameter_list|)
block|{
switch|switch
condition|(
name|operator
condition|)
block|{
case|case
name|EQ
case|:
case|case
name|NE
case|:
name|boolean
name|matches
decl_stmt|;
if|if
condition|(
name|this
operator|.
name|numericComparison
condition|)
block|{
name|double
name|testDouble
init|=
name|toDouble
argument_list|(
name|testValue
argument_list|)
decl_stmt|;
name|matches
operator|=
name|this
operator|.
name|numericValue
operator|.
name|equals
argument_list|(
name|testDouble
argument_list|)
expr_stmt|;
block|}
if|else if
condition|(
operator|!
name|this
operator|.
name|caseSensitive
condition|)
block|{
name|matches
operator|=
name|this
operator|.
name|value
operator|.
name|equalsIgnoreCase
argument_list|(
name|testValue
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|matches
operator|=
name|this
operator|.
name|value
operator|.
name|equals
argument_list|(
name|testValue
argument_list|)
expr_stmt|;
block|}
return|return
name|this
operator|.
name|operator
operator|==
name|Operator
operator|.
name|EQ
condition|?
name|matches
else|:
operator|!
name|matches
return|;
case|case
name|GT
case|:
case|case
name|LT
case|:
case|case
name|GE
case|:
case|case
name|LE
case|:
name|int
name|result
decl_stmt|;
if|if
condition|(
name|this
operator|.
name|numericComparison
condition|)
block|{
specifier|final
name|double
name|testDouble
init|=
name|toDouble
argument_list|(
name|testValue
argument_list|)
decl_stmt|;
name|result
operator|=
name|Double
operator|.
name|compare
argument_list|(
name|testDouble
argument_list|,
name|this
operator|.
name|numericValue
argument_list|)
expr_stmt|;
block|}
if|else if
condition|(
operator|!
name|this
operator|.
name|caseSensitive
condition|)
block|{
name|result
operator|=
name|testValue
operator|.
name|toLowerCase
argument_list|()
operator|.
name|compareTo
argument_list|(
name|this
operator|.
name|getLowercaseValue
argument_list|()
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|result
operator|=
name|testValue
operator|.
name|compareTo
argument_list|(
name|this
operator|.
name|value
argument_list|)
expr_stmt|;
block|}
return|return
name|matchOrdinal
argument_list|(
name|this
operator|.
name|operator
argument_list|,
name|result
argument_list|)
return|;
case|case
name|ENDS_WITH
case|:
return|return
name|this
operator|.
name|caseSensitive
condition|?
name|testValue
operator|.
name|endsWith
argument_list|(
name|this
operator|.
name|value
argument_list|)
else|:
name|testValue
operator|.
name|toLowerCase
argument_list|()
operator|.
name|endsWith
argument_list|(
name|this
operator|.
name|getLowercaseValue
argument_list|()
argument_list|)
return|;
case|case
name|STARTS_WITH
case|:
return|return
name|this
operator|.
name|caseSensitive
condition|?
name|testValue
operator|.
name|startsWith
argument_list|(
name|this
operator|.
name|value
argument_list|)
else|:
name|testValue
operator|.
name|toLowerCase
argument_list|()
operator|.
name|startsWith
argument_list|(
name|this
operator|.
name|getLowercaseValue
argument_list|()
argument_list|)
return|;
case|case
name|CONTAINS
case|:
return|return
name|this
operator|.
name|caseSensitive
condition|?
name|testValue
operator|.
name|contains
argument_list|(
name|this
operator|.
name|value
argument_list|)
else|:
name|testValue
operator|.
name|toLowerCase
argument_list|()
operator|.
name|contains
argument_list|(
name|this
operator|.
name|getLowercaseValue
argument_list|()
argument_list|)
return|;
case|case
name|MATCH
case|:
specifier|final
name|Matcher
name|matcher
init|=
name|this
operator|.
name|pattern
operator|.
name|matcher
argument_list|(
name|testValue
argument_list|)
decl_stmt|;
return|return
name|matcher
operator|.
name|matches
argument_list|()
return|;
block|}
return|return
literal|false
return|;
block|}
specifier|private
name|boolean
name|matchOrdinal
parameter_list|(
name|Operator
name|operator
parameter_list|,
name|int
name|result
parameter_list|)
block|{
switch|switch
condition|(
name|operator
condition|)
block|{
case|case
name|GT
case|:
return|return
name|result
operator|>
literal|0
return|;
case|case
name|LT
case|:
return|return
name|result
operator|<
literal|0
return|;
case|case
name|GE
case|:
return|return
name|result
operator|>=
literal|0
return|;
case|case
name|LE
case|:
return|return
name|result
operator|<=
literal|0
return|;
block|}
return|return
literal|false
return|;
block|}
specifier|private
name|Double
name|toDouble
parameter_list|(
name|String
name|value
parameter_list|)
block|{
try|try
block|{
return|return
name|Double
operator|.
name|parseDouble
argument_list|(
name|value
argument_list|)
return|;
block|}
catch|catch
parameter_list|(
name|NumberFormatException
name|e
parameter_list|)
block|{
name|RangeIndex
operator|.
name|LOG
operator|.
name|debug
argument_list|(
literal|"Non-numeric value encountered for numeric condition on @'"
operator|+
name|this
operator|.
name|attributeName
operator|+
literal|"': "
operator|+
name|value
argument_list|)
expr_stmt|;
return|return
operator|new
name|Double
argument_list|(
literal|0
argument_list|)
return|;
block|}
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|find
parameter_list|(
name|Predicate
name|predicate
parameter_list|)
block|{
specifier|final
name|Expression
name|inner
init|=
name|this
operator|.
name|getInnerExpression
argument_list|(
name|predicate
argument_list|)
decl_stmt|;
name|Operator
name|operator
decl_stmt|;
name|Expression
name|lhe
decl_stmt|;
name|Expression
name|rhe
decl_stmt|;
comment|// get the type of the expression inside the predicate and determine right and left hand arguments
if|if
condition|(
name|inner
operator|instanceof
name|GeneralComparison
condition|)
block|{
specifier|final
name|GeneralComparison
name|comparison
init|=
operator|(
name|GeneralComparison
operator|)
name|inner
decl_stmt|;
name|operator
operator|=
name|RangeQueryRewriter
operator|.
name|getOperator
argument_list|(
name|inner
argument_list|)
expr_stmt|;
name|lhe
operator|=
name|comparison
operator|.
name|getLeft
argument_list|()
expr_stmt|;
name|rhe
operator|=
name|comparison
operator|.
name|getRight
argument_list|()
expr_stmt|;
block|}
if|else if
condition|(
name|inner
operator|instanceof
name|InternalFunctionCall
condition|)
block|{
comment|// calls to matches() will not have been rewritten to a comparison, so check for function call
specifier|final
name|Function
name|func
init|=
operator|(
operator|(
name|InternalFunctionCall
operator|)
name|inner
operator|)
operator|.
name|getFunction
argument_list|()
decl_stmt|;
if|if
condition|(
name|func
operator|.
name|isCalledAs
argument_list|(
literal|"matches"
argument_list|)
condition|)
block|{
name|operator
operator|=
name|Operator
operator|.
name|MATCH
expr_stmt|;
name|lhe
operator|=
name|func
operator|.
name|getArgument
argument_list|(
literal|0
argument_list|)
expr_stmt|;
name|rhe
operator|=
name|func
operator|.
name|getArgument
argument_list|(
literal|1
argument_list|)
expr_stmt|;
name|lhe
operator|=
name|unwrapSubExpression
argument_list|(
name|lhe
argument_list|)
expr_stmt|;
name|rhe
operator|=
name|unwrapSubExpression
argument_list|(
name|rhe
argument_list|)
expr_stmt|;
block|}
else|else
block|{
comment|// predicate expression cannot be parsed as condition
return|return
literal|false
return|;
block|}
block|}
else|else
block|{
comment|// predicate expression cannot be parsed as condition
return|return
literal|false
return|;
block|}
comment|// find the attribute name and value pair from the predicate to check against
comment|// first assume attribute is on the left and value is on the right
name|LocationStep
name|testStep
init|=
name|findLocationStep
argument_list|(
name|lhe
argument_list|)
decl_stmt|;
name|AtomicValue
name|testValue
init|=
name|findAtomicValue
argument_list|(
name|rhe
argument_list|)
decl_stmt|;
switch|switch
condition|(
name|this
operator|.
name|operator
condition|)
block|{
case|case
name|EQ
case|:
case|case
name|NE
case|:
comment|// the equality operators are commutative so if attribute/value pair has not been found,
comment|// check the other way around
if|if
condition|(
name|testStep
operator|==
literal|null
operator|&&
name|testValue
operator|==
literal|null
condition|)
block|{
name|testStep
operator|=
name|findLocationStep
argument_list|(
name|rhe
argument_list|)
expr_stmt|;
name|testValue
operator|=
name|findAtomicValue
argument_list|(
name|lhe
argument_list|)
expr_stmt|;
block|}
case|case
name|GT
case|:
case|case
name|LT
case|:
case|case
name|GE
case|:
case|case
name|LE
case|:
comment|// for ordinal comparisons, attribute and value can also be the other way around in the predicate
comment|// but the operator has to be inverted
if|if
condition|(
name|testStep
operator|==
literal|null
operator|&&
name|testValue
operator|==
literal|null
condition|)
block|{
name|testStep
operator|=
name|findLocationStep
argument_list|(
name|rhe
argument_list|)
expr_stmt|;
name|testValue
operator|=
name|findAtomicValue
argument_list|(
name|lhe
argument_list|)
expr_stmt|;
name|operator
operator|=
name|invertOrdinalOperator
argument_list|(
name|operator
argument_list|)
expr_stmt|;
block|}
block|}
if|if
condition|(
name|testStep
operator|!=
literal|null
operator|&&
name|testValue
operator|!=
literal|null
condition|)
block|{
specifier|final
name|QName
name|qname
init|=
name|testStep
operator|.
name|getTest
argument_list|()
operator|.
name|getName
argument_list|()
decl_stmt|;
name|Comparable
name|foundValue
decl_stmt|;
name|Comparable
name|requiredValue
decl_stmt|;
name|boolean
name|valueTypeMatches
decl_stmt|;
try|try
block|{
if|if
condition|(
name|this
operator|.
name|numericComparison
condition|)
block|{
name|valueTypeMatches
operator|=
name|testValue
operator|instanceof
name|NumericValue
expr_stmt|;
name|requiredValue
operator|=
name|this
operator|.
name|numericValue
expr_stmt|;
name|foundValue
operator|=
name|testValue
operator|.
name|toJavaObject
argument_list|(
name|Double
operator|.
name|class
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|valueTypeMatches
operator|=
name|testValue
operator|instanceof
name|StringValue
expr_stmt|;
if|if
condition|(
name|this
operator|.
name|caseSensitive
condition|)
block|{
name|requiredValue
operator|=
name|this
operator|.
name|getLowercaseValue
argument_list|()
expr_stmt|;
name|foundValue
operator|=
name|testValue
operator|.
name|getStringValue
argument_list|()
operator|.
name|toLowerCase
argument_list|()
expr_stmt|;
block|}
else|else
block|{
name|requiredValue
operator|=
name|this
operator|.
name|value
expr_stmt|;
name|foundValue
operator|=
name|testValue
operator|.
name|getStringValue
argument_list|()
expr_stmt|;
block|}
block|}
if|if
condition|(
name|qname
operator|.
name|getNameType
argument_list|()
operator|==
name|ElementValue
operator|.
name|ATTRIBUTE
operator|&&
name|operator
operator|.
name|equals
argument_list|(
name|this
operator|.
name|operator
argument_list|)
operator|&&
name|qname
operator|.
name|equals
argument_list|(
name|this
operator|.
name|attribute
argument_list|)
operator|&&
name|valueTypeMatches
operator|&&
name|foundValue
operator|.
name|equals
argument_list|(
name|requiredValue
argument_list|)
condition|)
block|{
return|return
literal|true
return|;
block|}
block|}
catch|catch
parameter_list|(
name|XPathException
name|e
parameter_list|)
block|{
name|RangeIndex
operator|.
name|LOG
operator|.
name|error
argument_list|(
literal|"Value conversion error when testing predicate for condition, value: "
operator|+
name|testValue
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|RangeIndex
operator|.
name|LOG
operator|.
name|error
argument_list|(
name|e
argument_list|)
expr_stmt|;
block|}
block|}
return|return
literal|false
return|;
block|}
specifier|private
name|Expression
name|unwrapSubExpression
parameter_list|(
name|Expression
name|expr
parameter_list|)
block|{
if|if
condition|(
name|expr
operator|instanceof
name|Atomize
condition|)
block|{
name|expr
operator|=
operator|(
operator|(
name|Atomize
operator|)
name|expr
operator|)
operator|.
name|getExpression
argument_list|()
expr_stmt|;
block|}
if|if
condition|(
name|expr
operator|instanceof
name|DynamicCardinalityCheck
condition|)
block|{
if|if
condition|(
name|expr
operator|.
name|getSubExpressionCount
argument_list|()
operator|==
literal|1
condition|)
block|{
name|expr
operator|=
name|expr
operator|.
name|getSubExpression
argument_list|(
literal|0
argument_list|)
expr_stmt|;
block|}
block|}
if|if
condition|(
name|expr
operator|instanceof
name|PathExpr
condition|)
block|{
if|if
condition|(
name|expr
operator|.
name|getSubExpressionCount
argument_list|()
operator|==
literal|1
condition|)
block|{
name|expr
operator|=
name|expr
operator|.
name|getSubExpression
argument_list|(
literal|0
argument_list|)
expr_stmt|;
block|}
block|}
return|return
name|expr
return|;
block|}
specifier|private
name|LocationStep
name|findLocationStep
parameter_list|(
name|Expression
name|expr
parameter_list|)
block|{
if|if
condition|(
name|expr
operator|instanceof
name|LocationStep
condition|)
block|{
return|return
operator|(
name|LocationStep
operator|)
name|expr
return|;
block|}
return|return
literal|null
return|;
block|}
specifier|private
name|AtomicValue
name|findAtomicValue
parameter_list|(
name|Expression
name|expr
parameter_list|)
block|{
if|if
condition|(
name|expr
operator|instanceof
name|AtomicValue
condition|)
block|{
return|return
operator|(
name|AtomicValue
operator|)
name|expr
return|;
block|}
if|else if
condition|(
name|expr
operator|instanceof
name|LiteralValue
condition|)
block|{
return|return
operator|(
operator|(
name|LiteralValue
operator|)
name|expr
operator|)
operator|.
name|getValue
argument_list|()
return|;
block|}
if|else if
condition|(
name|expr
operator|instanceof
name|VariableReference
operator|||
name|expr
operator|instanceof
name|Function
condition|)
block|{
try|try
block|{
specifier|final
name|Sequence
name|result
init|=
name|expr
operator|.
name|eval
argument_list|(
literal|null
argument_list|)
decl_stmt|;
if|if
condition|(
name|result
operator|instanceof
name|AtomicValue
condition|)
block|{
return|return
operator|(
name|AtomicValue
operator|)
name|result
return|;
block|}
block|}
catch|catch
parameter_list|(
name|XPathException
name|e
parameter_list|)
block|{
name|RangeIndex
operator|.
name|LOG
operator|.
name|error
argument_list|(
name|e
argument_list|)
expr_stmt|;
block|}
block|}
return|return
literal|null
return|;
block|}
specifier|private
name|Operator
name|invertOrdinalOperator
parameter_list|(
name|Operator
name|operator
parameter_list|)
block|{
switch|switch
condition|(
name|operator
condition|)
block|{
case|case
name|LE
case|:
return|return
name|Operator
operator|.
name|GE
return|;
case|case
name|GE
case|:
return|return
name|Operator
operator|.
name|LE
return|;
case|case
name|LT
case|:
return|return
name|Operator
operator|.
name|GT
return|;
case|case
name|GT
case|:
return|return
name|Operator
operator|.
name|LT
return|;
block|}
return|return
literal|null
return|;
block|}
block|}
end_class

end_unit

