begin_unit|revision:1.0.0;language:Java;cregit-version:0.0.1
begin_package
package|package
name|org
operator|.
name|exist
operator|.
name|indexing
operator|.
name|range
package|;
end_package

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|dom
operator|.
name|persistent
operator|.
name|AttrImpl
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|dom
operator|.
name|persistent
operator|.
name|CharacterDataImpl
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|dom
operator|.
name|persistent
operator|.
name|QName
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|storage
operator|.
name|NodePath
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|util
operator|.
name|XMLString
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_class
specifier|public
class|class
name|SimpleTextCollector
implements|implements
name|TextCollector
block|{
specifier|private
name|boolean
name|includeNested
init|=
literal|true
decl_stmt|;
specifier|private
name|RangeIndexConfigElement
name|config
init|=
literal|null
decl_stmt|;
specifier|private
name|XMLString
name|buf
init|=
operator|new
name|XMLString
argument_list|()
decl_stmt|;
specifier|private
name|int
name|wsTreatment
init|=
name|XMLString
operator|.
name|SUPPRESS_NONE
decl_stmt|;
specifier|private
name|boolean
name|caseSensitive
init|=
literal|true
decl_stmt|;
specifier|public
name|SimpleTextCollector
parameter_list|(
name|RangeIndexConfigElement
name|config
parameter_list|,
name|boolean
name|includeNested
parameter_list|,
name|int
name|wsTreatment
parameter_list|,
name|boolean
name|caseSensitive
parameter_list|)
block|{
name|this
operator|.
name|config
operator|=
name|config
expr_stmt|;
name|this
operator|.
name|includeNested
operator|=
name|includeNested
expr_stmt|;
name|this
operator|.
name|wsTreatment
operator|=
name|wsTreatment
expr_stmt|;
name|this
operator|.
name|caseSensitive
operator|=
name|caseSensitive
expr_stmt|;
block|}
specifier|public
name|SimpleTextCollector
parameter_list|(
name|String
name|content
parameter_list|)
block|{
name|buf
operator|.
name|append
argument_list|(
name|content
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|startElement
parameter_list|(
name|QName
name|qname
parameter_list|,
name|NodePath
name|path
parameter_list|)
block|{
block|}
annotation|@
name|Override
specifier|public
name|void
name|endElement
parameter_list|(
name|QName
name|qname
parameter_list|,
name|NodePath
name|path
parameter_list|)
block|{
block|}
annotation|@
name|Override
specifier|public
name|void
name|characters
parameter_list|(
name|CharacterDataImpl
name|text
parameter_list|,
name|NodePath
name|path
parameter_list|)
block|{
if|if
condition|(
name|includeNested
operator|||
name|config
operator|.
name|match
argument_list|(
name|path
argument_list|)
condition|)
block|{
name|buf
operator|.
name|append
argument_list|(
name|text
operator|.
name|getXMLString
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Override
specifier|public
name|void
name|attribute
parameter_list|(
name|AttrImpl
name|attribute
parameter_list|,
name|NodePath
name|path
parameter_list|)
block|{
block|}
annotation|@
name|Override
specifier|public
name|int
name|length
parameter_list|()
block|{
return|return
name|buf
operator|.
name|length
argument_list|()
return|;
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|hasFields
parameter_list|()
block|{
return|return
literal|false
return|;
block|}
annotation|@
name|Override
specifier|public
name|List
argument_list|<
name|Field
argument_list|>
name|getFields
parameter_list|()
block|{
name|List
argument_list|<
name|Field
argument_list|>
name|fields
init|=
operator|new
name|ArrayList
argument_list|<
name|Field
argument_list|>
argument_list|(
literal|1
argument_list|)
decl_stmt|;
name|fields
operator|.
name|add
argument_list|(
operator|new
name|Field
argument_list|(
name|buf
argument_list|,
name|wsTreatment
argument_list|,
name|caseSensitive
argument_list|)
argument_list|)
expr_stmt|;
return|return
name|fields
return|;
block|}
block|}
end_class

end_unit

