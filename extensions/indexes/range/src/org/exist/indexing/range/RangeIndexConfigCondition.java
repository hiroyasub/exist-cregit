begin_unit|revision:1.0.0;language:Java;cregit-version:0.0.1
begin_package
package|package
name|org
operator|.
name|exist
operator|.
name|indexing
operator|.
name|range
package|;
end_package

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|xquery
operator|.
name|*
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|xquery
operator|.
name|modules
operator|.
name|range
operator|.
name|Lookup
import|;
end_import

begin_import
import|import
name|org
operator|.
name|w3c
operator|.
name|dom
operator|.
name|Node
import|;
end_import

begin_comment
comment|/**  *  * Base class for conditions that can be defined for complex range config elements.  *  * @author Marcel Schaeben  */
end_comment

begin_class
specifier|public
specifier|abstract
class|class
name|RangeIndexConfigCondition
block|{
comment|/**      * Test if a node matches this condition. Used by the indexer.      * @param node The node to test.      * @return true if the node is an element node and an attribute matches this condition.      */
specifier|public
specifier|abstract
name|boolean
name|matches
parameter_list|(
name|Node
name|node
parameter_list|)
function_decl|;
comment|/**      * Test if an expression defined by the arguments matches this condition. Used by the query rewriter.      * @param predicate The predicate to test.      * @return true if the predicate matches this condition.      */
specifier|public
name|boolean
name|find
parameter_list|(
name|Predicate
name|predicate
parameter_list|)
block|{
return|return
literal|false
return|;
block|}
comment|/**      * Get the inner expression of a predicate. Will unwrap the original expression if it has previously      * been rewritten into an index function call.      * @param predicate The predicate to test.      * @return The fallback expression from a rewritten function call or the original inner expression.      */
specifier|protected
name|Expression
name|getInnerExpression
parameter_list|(
name|Predicate
name|predicate
parameter_list|)
block|{
name|Expression
name|inner
init|=
name|predicate
operator|.
name|getExpression
argument_list|(
literal|0
argument_list|)
decl_stmt|;
if|if
condition|(
name|inner
operator|instanceof
name|InternalFunctionCall
condition|)
block|{
name|Function
name|function
init|=
operator|(
operator|(
name|InternalFunctionCall
operator|)
name|inner
operator|)
operator|.
name|getFunction
argument_list|()
decl_stmt|;
if|if
condition|(
name|function
operator|instanceof
name|Lookup
condition|)
block|{
return|return
operator|(
operator|(
name|Lookup
operator|)
name|function
operator|)
operator|.
name|getFallback
argument_list|()
return|;
block|}
block|}
return|return
name|inner
return|;
block|}
block|}
end_class

end_unit

