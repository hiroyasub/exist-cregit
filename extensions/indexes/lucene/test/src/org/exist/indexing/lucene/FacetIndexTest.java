begin_unit|revision:1.0.0;language:Java;cregit-version:0.0.1
begin_package
package|package
name|org
operator|.
name|exist
operator|.
name|indexing
operator|.
name|lucene
package|;
end_package

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertEquals
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertNotNull
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|fail
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|*
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|analysis
operator|.
name|Analyzer
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|facet
operator|.
name|params
operator|.
name|FacetSearchParams
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|facet
operator|.
name|search
operator|.
name|CountFacetRequest
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|facet
operator|.
name|search
operator|.
name|FacetResult
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|facet
operator|.
name|search
operator|.
name|FacetResultNode
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|facet
operator|.
name|taxonomy
operator|.
name|CategoryPath
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|queryparser
operator|.
name|classic
operator|.
name|QueryParser
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|search
operator|.
name|Query
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|dom
operator|.
name|DocumentSet
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|dom
operator|.
name|QName
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|storage
operator|.
name|DBBroker
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_class
specifier|public
class|class
name|FacetIndexTest
extends|extends
name|FacetAbstractTest
block|{
specifier|protected
specifier|static
name|String
name|XUPDATE_START
init|=
literal|"<xu:modifications version=\"1.0\" xmlns:xu=\"http://www.xmldb.org/xupdate\">"
decl_stmt|;
specifier|protected
specifier|static
name|String
name|XUPDATE_END
init|=
literal|"</xu:modifications>"
decl_stmt|;
specifier|private
specifier|static
name|String
name|XML5
init|=
literal|"<article>"
operator|+
literal|"<head>The<b>title</b>of it</head>"
operator|+
literal|"<p>A simple paragraph with<hi>highlighted</hi> text<note>and a note</note> "
operator|+
literal|"       in it.</p>"
operator|+
literal|"<p>Paragraphs with<s>mix</s><s>ed</s> content are<s>danger</s>ous.</p>"
operator|+
literal|"<p><note1>ignore</note1><s2>warn</s2>ings</p>"
operator|+
literal|"<p>Another simple paragraph.</p>"
operator|+
literal|"</article>"
decl_stmt|;
specifier|private
specifier|static
name|String
name|COLLECTION_CONFIG5
init|=
literal|"<collection xmlns=\"http://exist-db.org/collection-config/1.0\">"
operator|+
literal|"<index xmlns:tei=\"http://www.tei-c.org/ns/1.0\">"
operator|+
literal|"<fulltext default=\"none\" attributes=\"no\">"
operator|+
literal|"</fulltext>"
operator|+
literal|"<lucene>"
operator|+
literal|"<text qname=\"article\">"
operator|+
literal|"<ignore qname=\"note\"/>"
operator|+
literal|"<inline qname=\"s\"/>"
operator|+
literal|"</text>"
operator|+
literal|"<text qname=\"p\">"
operator|+
literal|"<ignore qname=\"note\"/>"
operator|+
literal|"<inline qname=\"s\"/>"
operator|+
literal|"</text>"
operator|+
literal|"<text qname=\"head\"/>"
operator|+
literal|"<ignore qname=\"note1\"/>"
operator|+
literal|"<inline qname=\"s2\"/>"
operator|+
literal|"</lucene>"
operator|+
literal|"</index>"
operator|+
literal|"</collection>"
decl_stmt|;
specifier|private
specifier|static
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|metas1
init|=
operator|new
name|HashMap
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
argument_list|()
decl_stmt|;
static|static
block|{
name|metas1
operator|.
name|put
argument_list|(
literal|"status"
argument_list|,
literal|"draft"
argument_list|)
expr_stmt|;
block|}
specifier|private
specifier|static
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|metas2
init|=
operator|new
name|HashMap
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
argument_list|()
decl_stmt|;
static|static
block|{
name|metas2
operator|.
name|put
argument_list|(
literal|"status"
argument_list|,
literal|"final"
argument_list|)
expr_stmt|;
block|}
specifier|private
name|void
name|checkFacet
parameter_list|(
name|List
argument_list|<
name|FacetResult
argument_list|>
name|facets
parameter_list|)
block|{
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|facets
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|FacetResult
name|facet
init|=
name|facets
operator|.
name|get
argument_list|(
literal|0
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|facet
operator|.
name|getNumValidDescendants
argument_list|()
argument_list|)
expr_stmt|;
name|FacetResultNode
name|node
init|=
name|facet
operator|.
name|getFacetResultNode
argument_list|()
decl_stmt|;
name|assertEquals
argument_list|(
literal|0.0
argument_list|,
name|node
operator|.
name|value
argument_list|,
literal|0.0001
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"status"
argument_list|,
name|node
operator|.
name|label
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|FacetResultNode
argument_list|>
name|subResults
init|=
name|node
operator|.
name|subResults
decl_stmt|;
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|subResults
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|node
operator|=
name|subResults
operator|.
name|get
argument_list|(
literal|0
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1.0
argument_list|,
name|node
operator|.
name|value
argument_list|,
literal|0.0001
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"status/final"
argument_list|,
name|node
operator|.
name|label
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|node
operator|=
name|subResults
operator|.
name|get
argument_list|(
literal|1
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1.0
argument_list|,
name|node
operator|.
name|value
argument_list|,
literal|0.0001
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"status/draft"
argument_list|,
name|node
operator|.
name|label
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|inlineAndIgnore
parameter_list|()
block|{
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"Test simple queries ..."
argument_list|)
expr_stmt|;
name|DocumentSet
name|docs
init|=
name|configureAndStore
argument_list|(
name|COLLECTION_CONFIG5
argument_list|,
operator|new
name|Resource
index|[]
block|{
operator|new
name|Resource
argument_list|(
literal|"test1.xml"
argument_list|,
name|XML5
argument_list|,
name|metas1
argument_list|)
block|,
operator|new
name|Resource
argument_list|(
literal|"test2.xml"
argument_list|,
name|XML5
argument_list|,
name|metas2
argument_list|)
block|,                 }
argument_list|)
decl_stmt|;
name|DBBroker
name|broker
init|=
literal|null
decl_stmt|;
try|try
block|{
name|broker
operator|=
name|db
operator|.
name|get
argument_list|(
name|db
operator|.
name|getSecurityManager
argument_list|()
operator|.
name|getSystemSubject
argument_list|()
argument_list|)
expr_stmt|;
name|assertNotNull
argument_list|(
name|broker
argument_list|)
expr_stmt|;
comment|//            checkIndex(docs, broker, new QName[] { new QName("head", "") }, "title", 2);
comment|//            checkIndex(docs, broker, new QName[] { new QName("p", "") }, "simple", 2);
comment|//            checkIndex(docs, broker, new QName[] { new QName("p", "") }, "mixed", 2);
comment|//            checkIndex(docs, broker, new QName[] { new QName("p", "") }, "dangerous", 2);
comment|//            checkIndex(docs, broker, new QName[] { new QName("p", "") }, "note", 0);
comment|//            checkIndex(docs, broker, new QName[] { new QName("p", "") }, "ignore", 0);
comment|//            checkIndex(docs, broker, new QName[] { new QName("p", "") }, "warnings", 2);
specifier|final
name|LuceneIndexWorker
name|worker
init|=
operator|(
name|LuceneIndexWorker
operator|)
name|broker
operator|.
name|getIndexController
argument_list|()
operator|.
name|getWorkerByIndexId
argument_list|(
name|LuceneIndex
operator|.
name|ID
argument_list|)
decl_stmt|;
name|FacetSearchParams
name|fsp
init|=
operator|new
name|FacetSearchParams
argument_list|(
operator|new
name|CountFacetRequest
argument_list|(
operator|new
name|CategoryPath
argument_list|(
literal|"status"
argument_list|)
argument_list|,
literal|10
argument_list|)
comment|//                new CountFacetRequest(new CategoryPath("Author"), 10)
argument_list|)
decl_stmt|;
name|CountDocuments
name|cb
init|=
operator|new
name|CountDocuments
argument_list|()
decl_stmt|;
name|List
argument_list|<
name|QName
argument_list|>
name|qnames
init|=
operator|new
name|ArrayList
argument_list|<
name|QName
argument_list|>
argument_list|()
decl_stmt|;
name|qnames
operator|.
name|add
argument_list|(
operator|new
name|QName
argument_list|(
literal|"head"
argument_list|,
literal|""
argument_list|)
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|FacetResult
argument_list|>
name|results
init|=
name|QueryDocuments
operator|.
name|query
argument_list|(
name|worker
argument_list|,
name|docs
argument_list|,
name|qnames
argument_list|,
literal|"title"
argument_list|,
name|fsp
argument_list|,
literal|null
argument_list|,
name|cb
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|cb
operator|.
name|count
argument_list|)
expr_stmt|;
name|checkFacet
argument_list|(
name|results
argument_list|)
expr_stmt|;
name|cb
operator|.
name|count
operator|=
literal|0
expr_stmt|;
comment|//Lucene query
name|QName
name|qname
init|=
operator|new
name|QName
argument_list|(
literal|"head"
argument_list|,
literal|""
argument_list|)
decl_stmt|;
name|String
name|field
init|=
name|LuceneUtil
operator|.
name|encodeQName
argument_list|(
operator|new
name|QName
argument_list|(
literal|"head"
argument_list|,
literal|""
argument_list|)
argument_list|,
name|db
operator|.
name|getSymbols
argument_list|()
argument_list|)
decl_stmt|;
name|Analyzer
name|analyzer
init|=
name|worker
operator|.
name|getAnalyzer
argument_list|(
literal|null
argument_list|,
name|qname
argument_list|,
name|broker
argument_list|,
name|docs
argument_list|)
decl_stmt|;
name|QueryParser
name|parser
init|=
operator|new
name|QueryParser
argument_list|(
name|LuceneIndex
operator|.
name|LUCENE_VERSION_IN_USE
argument_list|,
name|field
argument_list|,
name|analyzer
argument_list|)
decl_stmt|;
comment|//worker.setOptions(options, parser);
name|Query
name|query
init|=
name|parser
operator|.
name|parse
argument_list|(
literal|"title"
argument_list|)
decl_stmt|;
name|results
operator|=
name|QueryDocuments
operator|.
name|query
argument_list|(
name|worker
argument_list|,
name|docs
argument_list|,
name|query
argument_list|,
name|fsp
argument_list|,
name|cb
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|cb
operator|.
name|count
argument_list|)
expr_stmt|;
name|checkFacet
argument_list|(
name|results
argument_list|)
expr_stmt|;
name|cb
operator|.
name|count
operator|=
literal|0
expr_stmt|;
comment|//check document filtering
name|qnames
operator|=
operator|new
name|ArrayList
argument_list|<
name|QName
argument_list|>
argument_list|()
expr_stmt|;
name|qnames
operator|.
name|add
argument_list|(
operator|new
name|QName
argument_list|(
literal|"p"
argument_list|,
literal|""
argument_list|)
argument_list|)
expr_stmt|;
name|results
operator|=
name|QueryDocuments
operator|.
name|query
argument_list|(
name|worker
argument_list|,
name|docs
argument_list|,
name|qnames
argument_list|,
literal|"paragraph"
argument_list|,
name|fsp
argument_list|,
literal|null
argument_list|,
name|cb
argument_list|)
expr_stmt|;
for|for
control|(
name|FacetResult
name|result
range|:
name|results
control|)
block|{
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
name|result
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|cb
operator|.
name|count
argument_list|)
expr_stmt|;
name|checkFacet
argument_list|(
name|results
argument_list|)
expr_stmt|;
name|cb
operator|.
name|count
operator|=
literal|0
expr_stmt|;
comment|//            seq = xquery.execute("/article[ft:query(p, 'highlighted')]", null, AccessContext.TEST);
comment|//            assertNotNull(seq);
comment|//            assertEquals(1, seq.getItemCount());
comment|//
comment|//            seq = xquery.execute("/article[ft:query(p, 'mixed')]", null, AccessContext.TEST);
comment|//            assertNotNull(seq);
comment|//            assertEquals(1, seq.getItemCount());
comment|//
comment|//            seq = xquery.execute("/article[ft:query(p, 'mix')]", null, AccessContext.TEST);
comment|//            assertNotNull(seq);
comment|//            assertEquals(0, seq.getItemCount());
comment|//
comment|//            seq = xquery.execute("/article[ft:query(p, 'dangerous')]", null, AccessContext.TEST);
comment|//            assertNotNull(seq);
comment|//            assertEquals(1, seq.getItemCount());
comment|//
comment|//            seq = xquery.execute("/article[ft:query(p, 'ous')]", null, AccessContext.TEST);
comment|//            assertNotNull(seq);
comment|//            assertEquals(0, seq.getItemCount());
comment|//
comment|//            seq = xquery.execute("/article[ft:query(p, 'danger')]", null, AccessContext.TEST);
comment|//            assertNotNull(seq);
comment|//            assertEquals(0, seq.getItemCount());
comment|//
comment|//            seq = xquery.execute("/article[ft:query(p, 'note')]", null, AccessContext.TEST);
comment|//            assertNotNull(seq);
comment|//            assertEquals(0, seq.getItemCount());
comment|//
comment|//            seq = xquery.execute("/article[ft:query(., 'highlighted')]", null, AccessContext.TEST);
comment|//            assertNotNull(seq);
comment|//            assertEquals(1, seq.getItemCount());
comment|//
comment|//            seq = xquery.execute("/article[ft:query(., 'mixed')]", null, AccessContext.TEST);
comment|//            assertNotNull(seq);
comment|//            assertEquals(1, seq.getItemCount());
comment|//
comment|//            seq = xquery.execute("/article[ft:query(., 'dangerous')]", null, AccessContext.TEST);
comment|//            assertNotNull(seq);
comment|//            assertEquals(1, seq.getItemCount());
comment|//
comment|//            seq = xquery.execute("/article[ft:query(., 'warnings')]", null, AccessContext.TEST);
comment|//            assertNotNull(seq);
comment|//            assertEquals(1, seq.getItemCount());
comment|//
comment|//            seq = xquery.execute("/article[ft:query(., 'danger')]", null, AccessContext.TEST);
comment|//            assertNotNull(seq);
comment|//            assertEquals(0, seq.getItemCount());
comment|//
comment|//            seq = xquery.execute("/article[ft:query(., 'note')]", null, AccessContext.TEST);
comment|//            assertNotNull(seq);
comment|//            assertEquals(0, seq.getItemCount());
comment|//
comment|//            seq = xquery.execute("/article[ft:query(., 'ignore')]", null, AccessContext.TEST);
comment|//            assertNotNull(seq);
comment|//            assertEquals(0, seq.getItemCount());
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|e
operator|.
name|printStackTrace
argument_list|()
expr_stmt|;
name|fail
argument_list|(
name|e
operator|.
name|getMessage
argument_list|()
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
name|db
operator|.
name|release
argument_list|(
name|broker
argument_list|)
expr_stmt|;
block|}
block|}
block|}
end_class

end_unit

