begin_unit|revision:1.0.0;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  *  eXist Open Source Native XML Database  *  Copyright (C) 2001-2015 The eXist Project  *  http://exist-db.org  *  *  This program is free software; you can redistribute it and/or  *  modify it under the terms of the GNU Lesser General Public License  *  as published by the Free Software Foundation; either version 2  *  of the License, or (at your option) any later version.  *  *  This program is distributed in the hope that it will be useful,  *  but WITHOUT ANY WARRANTY; without even the implied warranty of  *  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the  *  GNU Lesser General Public License for more details.  *  *  You should have received a copy of the GNU Lesser General Public  *  License along with this library; if not, write to the Free Software  *  Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA  02110-1301  USA  */
end_comment

begin_package
package|package
name|org
operator|.
name|exist
operator|.
name|indexing
operator|.
name|lucene
package|;
end_package

begin_import
import|import static
name|java
operator|.
name|nio
operator|.
name|charset
operator|.
name|StandardCharsets
operator|.
name|UTF_8
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|exist
operator|.
name|util
operator|.
name|PropertiesBuilder
operator|.
name|propertiesBuilder
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertEquals
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertNotNull
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|InputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|StringReader
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|*
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|xml
operator|.
name|XMLConstants
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|xml
operator|.
name|parsers
operator|.
name|ParserConfigurationException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|EXistException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|Indexer
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|TestUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|collections
operator|.
name|Collection
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|collections
operator|.
name|CollectionConfigurationManager
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|collections
operator|.
name|CollectionConfigurationException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|collections
operator|.
name|IndexInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|collections
operator|.
name|triggers
operator|.
name|TriggerException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|dom
operator|.
name|QName
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|dom
operator|.
name|persistent
operator|.
name|DefaultDocumentSet
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|dom
operator|.
name|persistent
operator|.
name|DocumentSet
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|dom
operator|.
name|persistent
operator|.
name|MutableDocumentSet
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|indexing
operator|.
name|OrderedValuesIndex
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|indexing
operator|.
name|QNamedKeysIndex
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|security
operator|.
name|PermissionDeniedException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|storage
operator|.
name|BrokerPool
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|storage
operator|.
name|DBBroker
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|storage
operator|.
name|ElementValue
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|storage
operator|.
name|txn
operator|.
name|TransactionManager
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|storage
operator|.
name|txn
operator|.
name|Txn
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|test
operator|.
name|ExistEmbeddedServer
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|test
operator|.
name|TestConstants
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|util
operator|.
name|*
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|util
operator|.
name|io
operator|.
name|InputStreamUtil
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|xmldb
operator|.
name|XmldbURI
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|xquery
operator|.
name|XQuery
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|xquery
operator|.
name|XQueryContext
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|xquery
operator|.
name|CompiledXQuery
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|xquery
operator|.
name|XPathException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|xquery
operator|.
name|value
operator|.
name|Sequence
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|xupdate
operator|.
name|Modification
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|xupdate
operator|.
name|XUpdateProcessor
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|*
import|;
end_import

begin_import
import|import
name|org
operator|.
name|xml
operator|.
name|sax
operator|.
name|InputSource
import|;
end_import

begin_import
import|import
name|org
operator|.
name|xml
operator|.
name|sax
operator|.
name|SAXException
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|exist
operator|.
name|samples
operator|.
name|Samples
operator|.
name|SAMPLES
import|;
end_import

begin_class
specifier|public
class|class
name|LuceneIndexTest
block|{
specifier|protected
specifier|static
name|String
name|XUPDATE_START
init|=
literal|"<xu:modifications version=\"1.0\" xmlns:xu=\"http://www.xmldb.org/xupdate\">"
decl_stmt|;
specifier|protected
specifier|static
name|String
name|XUPDATE_END
init|=
literal|"</xu:modifications>"
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|String
name|XML1
init|=
literal|"<section>"
operator|+
literal|"<head>The title in big letters</head>"
operator|+
literal|"<p rend=\"center\">A simple paragraph with<hi>just</hi> text in it.</p>"
operator|+
literal|"<p rend=\"right\">paragraphs with<span>mix</span><span>ed</span> content are<span>danger</span>ous.</p>"
operator|+
literal|"</section>"
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|String
name|XML2
init|=
literal|"<test>"
operator|+
literal|"<item id='1' attr='attribute'><description>Chair</description></item>"
operator|+
literal|"<item id='2'><description>Table</description>\n<condition>good</condition></item>"
operator|+
literal|"<item id='3'><description>Cabinet</description>\n<condition>bad</condition></item>"
operator|+
literal|"</test>"
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|String
name|XML3
init|=
literal|"<section>"
operator|+
literal|"<head>TITLE IN UPPERCASE LETTERS</head>"
operator|+
literal|"<p>UPPERCASE PARAGRAPH</p>"
operator|+
literal|"</section>"
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|String
name|XML4
init|=
literal|"<test><a>A X</a><b><c>B X</c> C</b></test>"
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|String
name|XML5
init|=
literal|"<article>"
operator|+
literal|"<head>The<b>title</b>of it</head>"
operator|+
literal|"<p>A simple paragraph with<hi>highlighted</hi> text<note>and a note</note> "
operator|+
literal|"       in it.</p>"
operator|+
literal|"<p>Paragraphs with<s>mix</s><s>ed</s> content are<s>danger</s>ous.</p>"
operator|+
literal|"<p><note1>ignore</note1><s2>warn</s2>ings</p>"
operator|+
literal|"</article>"
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|String
name|XML6
init|=
literal|"<a>"
operator|+
literal|"<b>AAA</b>"
operator|+
literal|"<c>AAA</c>"
operator|+
literal|"<b>AAA</b>"
operator|+
literal|"</a>"
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|String
name|XML7
init|=
literal|"<section>"
operator|+
literal|"<head>Query Test</head>"
operator|+
literal|"<p>Eine wunderbare Heiterkeit hat meine ganze Seele eingenommen, gleich den "
operator|+
literal|"   sÃ¼Ãen FrÃ¼hlingsmorgen, die ich mit ganzem Herzen genieÃe. Ich bin allein und "
operator|+
literal|"   freue mich meines Lebens in dieser Gegend, die fÃ¼r solche Seelen geschaffen "
operator|+
literal|"   ist wie die meine. Ich bin so glÃ¼cklich, mein Bester, so ganz in dem GefÃ¼hle "
operator|+
literal|"   von ruhigem Dasein versunken, daÃ meine Kunst darunter leidet.</p>"
operator|+
literal|"</section>"
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|String
name|XML8
init|=
literal|"<a>"
operator|+
literal|"<b att='att on b1'>AAA on b1</b>"
operator|+
literal|"<b att='att on b2' attr='attr on b2'>AAA on b2</b>"
operator|+
literal|"<bb><b att='att on b3' attr='attr on b3'>AAA on b3</b></bb>"
operator|+
literal|"<c att='att on c1'>AAA on c1</c>"
operator|+
literal|"<c>AAA on c2</c>"
operator|+
literal|"</a>"
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|String
name|XML9
init|=
literal|"<TEI xmlns=\"http://www.tei-c.org/ns/1.0\">"
operator|+
literal|"<body>"
operator|+
literal|"<p>erste aus haus maus zaus yaus raus qaus leisten</p>"
operator|+
literal|"<p>ausser aus</p>"
operator|+
literal|"<p>auf boden</p>"
operator|+
literal|"</body>"
operator|+
literal|"</TEI>"
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|String
name|COLLECTION_CONFIG1
init|=
literal|"<collection xmlns=\"http://exist-db.org/collection-config/1.0\">"
operator|+
literal|"<index>"
operator|+
literal|"<lucene>"
operator|+
literal|"<analyzer class=\"org.apache.lucene.analysis.core.SimpleAnalyzer\"/>"
operator|+
literal|"<text match=\"/section/p\"/>"
operator|+
literal|"<text qname=\"head\"/>"
operator|+
literal|"<text qname=\"@rend\"/>"
operator|+
literal|"<text qname=\"hi\"/>"
operator|+
literal|"<text qname=\"LINE\"/>"
operator|+
literal|"</lucene>"
operator|+
literal|"</index>"
operator|+
literal|"</collection>"
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|String
name|COLLECTION_CONFIG2
init|=
literal|"<collection xmlns=\"http://exist-db.org/collection-config/1.0\">"
operator|+
literal|"<index>"
operator|+
literal|"<lucene>"
operator|+
literal|"<text qname=\"item\"/>"
operator|+
literal|"<text match=\"//description\"/>"
operator|+
literal|"<text qname=\"condition\"/>"
operator|+
literal|"<text qname=\"@attr\"/>"
operator|+
literal|"</lucene>"
operator|+
literal|"</index>"
operator|+
literal|"</collection>"
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|String
name|COLLECTION_CONFIG3
init|=
literal|"<collection xmlns=\"http://exist-db.org/collection-config/1.0\">"
operator|+
literal|"<index>"
operator|+
literal|"<lucene>"
operator|+
literal|"<analyzer id=\"whitespace\" class=\"org.apache.lucene.analysis.core.WhitespaceAnalyzer\"/>"
operator|+
literal|"<text match=\"/section/head\" analyzer=\"whitespace\"/>"
operator|+
literal|"<text match=\"//p\"/>"
operator|+
literal|"</lucene>"
operator|+
literal|"</index>"
operator|+
literal|"</collection>"
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|String
name|COLLECTION_CONFIG4
init|=
literal|"<collection xmlns=\"http://exist-db.org/collection-config/1.0\">"
operator|+
literal|"<index>"
operator|+
literal|"<lucene>"
operator|+
literal|"<text match=\"/test/a\"/>"
operator|+
literal|"<text match=\"/test/b/*\"/>"
operator|+
literal|"</lucene>"
operator|+
literal|"</index>"
operator|+
literal|"</collection>"
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|String
name|COLLECTION_CONFIG5
init|=
literal|"<collection xmlns=\"http://exist-db.org/collection-config/1.0\">"
operator|+
literal|"<index xmlns:tei=\"http://www.tei-c.org/ns/1.0\">"
operator|+
literal|"<lucene>"
operator|+
literal|"<text qname=\"article\">"
operator|+
literal|"<ignore qname=\"note\"/>"
operator|+
literal|"<inline qname=\"s\"/>"
operator|+
literal|"</text>"
operator|+
literal|"<text qname=\"p\">"
operator|+
literal|"<ignore qname=\"note\"/>"
operator|+
literal|"<inline qname=\"s\"/>"
operator|+
literal|"</text>"
operator|+
literal|"<text qname=\"head\"/>"
operator|+
literal|"<ignore qname=\"note1\"/>"
operator|+
literal|"<inline qname=\"s2\"/>"
operator|+
literal|"</lucene>"
operator|+
literal|"</index>"
operator|+
literal|"</collection>"
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|String
name|COLLECTION_CONFIG6
init|=
literal|"<collection xmlns=\"http://exist-db.org/collection-config/1.0\">"
operator|+
literal|"<index xmlns:tei=\"http://www.tei-c.org/ns/1.0\">"
operator|+
literal|"<lucene>"
operator|+
literal|"<text qname=\"b\"/>"
operator|+
literal|"<text qname=\"c\" boost=\"2.0\"/>"
operator|+
literal|"</lucene>"
operator|+
literal|"</index>"
operator|+
literal|"</collection>"
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|String
name|COLLECTION_CONFIG7
init|=
literal|"<collection xmlns=\"http://exist-db.org/collection-config/1.0\">"
operator|+
literal|"<index xmlns:tei=\"http://www.tei-c.org/ns/1.0\">"
operator|+
literal|"<lucene>"
operator|+
literal|"<text qname='c'>"
operator|+
literal|"<has-attribute qname='att' boost='30'/>"
operator|+
literal|"</text>"
operator|+
literal|"<text qname='b' boost='5'>"
operator|+
literal|"<match-attribute qname='att' value='att on b2' boost='30'/>"
operator|+
literal|"<match-attribute qname='attr' value='attr on b3' boost='5'/>"
operator|+
literal|"<has-attribute qname='attr' boost='15'/>"
operator|+
literal|"</text>"
operator|+
literal|"<text qname='@att'>"
operator|+
literal|"<match-sibling-attribute qname='attr' value='attr on b2' boost='2'/>"
operator|+
literal|"<has-sibling-attribute qname='attr' boost='2'/>"
operator|+
literal|"</text>"
operator|+
literal|"</lucene>"
operator|+
literal|"</index>"
operator|+
literal|"</collection>"
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|String
name|COLLECTION_CONFIG8
init|=
literal|"<collection xmlns=\"http://exist-db.org/collection-config/1.0\">"
operator|+
literal|"<index xmlns:tei=\"http://www.tei-c.org/ns/1.0\">"
operator|+
literal|"<lucene>"
operator|+
literal|"<analyzer class=\"org.apache.lucene.analysis.standard.StandardAnalyzer\"/>"
operator|+
literal|"<text qname=\"tei:p\"/>"
operator|+
literal|"</lucene>"
operator|+
literal|"</index>"
operator|+
literal|"</collection>"
decl_stmt|;
specifier|private
specifier|static
name|Collection
name|root
decl_stmt|;
specifier|private
name|Boolean
name|savedConfig
decl_stmt|;
annotation|@
name|Test
specifier|public
name|void
name|simpleQueries
parameter_list|()
throws|throws
name|EXistException
throws|,
name|CollectionConfigurationException
throws|,
name|PermissionDeniedException
throws|,
name|SAXException
throws|,
name|LockException
throws|,
name|IOException
throws|,
name|XPathException
throws|,
name|QName
operator|.
name|IllegalQNameException
block|{
specifier|final
name|DocumentSet
name|docs
init|=
name|configureAndStore
argument_list|(
name|COLLECTION_CONFIG1
argument_list|,
name|XML1
argument_list|,
literal|"test.xml"
argument_list|)
decl_stmt|;
specifier|final
name|BrokerPool
name|pool
init|=
name|existEmbeddedServer
operator|.
name|getBrokerPool
argument_list|()
decl_stmt|;
try|try
init|(
specifier|final
name|DBBroker
name|broker
init|=
name|pool
operator|.
name|get
argument_list|(
name|Optional
operator|.
name|of
argument_list|(
name|pool
operator|.
name|getSecurityManager
argument_list|()
operator|.
name|getSystemSubject
argument_list|()
argument_list|)
argument_list|)
init|)
block|{
name|checkIndex
argument_list|(
name|docs
argument_list|,
name|broker
argument_list|,
operator|new
name|QName
index|[]
block|{
operator|new
name|QName
argument_list|(
literal|"head"
argument_list|)
block|}
argument_list|,
literal|"title"
argument_list|,
literal|1
argument_list|)
expr_stmt|;
specifier|final
name|Occurrences
index|[]
name|o
init|=
name|checkIndex
argument_list|(
name|docs
argument_list|,
name|broker
argument_list|,
operator|new
name|QName
index|[]
block|{
operator|new
name|QName
argument_list|(
literal|"p"
argument_list|)
block|}
argument_list|,
literal|"with"
argument_list|,
literal|1
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|o
index|[
literal|0
index|]
operator|.
name|getOccurrences
argument_list|()
argument_list|)
expr_stmt|;
name|checkIndex
argument_list|(
name|docs
argument_list|,
name|broker
argument_list|,
operator|new
name|QName
index|[]
block|{
operator|new
name|QName
argument_list|(
literal|"hi"
argument_list|)
block|}
argument_list|,
literal|"just"
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|checkIndex
argument_list|(
name|docs
argument_list|,
name|broker
argument_list|,
literal|null
argument_list|,
literal|"in"
argument_list|,
literal|1
argument_list|)
expr_stmt|;
specifier|final
name|QName
name|attrQN
init|=
operator|new
name|QName
argument_list|(
literal|"rend"
argument_list|,
name|XMLConstants
operator|.
name|NULL_NS_URI
argument_list|,
name|ElementValue
operator|.
name|ATTRIBUTE
argument_list|)
decl_stmt|;
name|checkIndex
argument_list|(
name|docs
argument_list|,
name|broker
argument_list|,
operator|new
name|QName
index|[]
block|{
name|attrQN
block|}
argument_list|,
literal|null
argument_list|,
literal|2
argument_list|)
expr_stmt|;
name|checkIndex
argument_list|(
name|docs
argument_list|,
name|broker
argument_list|,
operator|new
name|QName
index|[]
block|{
name|attrQN
block|}
argument_list|,
literal|"center"
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|checkIndex
argument_list|(
name|docs
argument_list|,
name|broker
argument_list|,
operator|new
name|QName
index|[]
block|{
name|attrQN
block|}
argument_list|,
literal|"right"
argument_list|,
literal|1
argument_list|)
expr_stmt|;
specifier|final
name|XQuery
name|xquery
init|=
name|pool
operator|.
name|getXQueryService
argument_list|()
decl_stmt|;
name|assertNotNull
argument_list|(
name|xquery
argument_list|)
expr_stmt|;
name|Sequence
name|seq
init|=
name|xquery
operator|.
name|execute
argument_list|(
name|broker
argument_list|,
literal|"/section[ft:query(p, 'content')]"
argument_list|,
literal|null
argument_list|)
decl_stmt|;
name|assertNotNull
argument_list|(
name|seq
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|seq
operator|.
name|getItemCount
argument_list|()
argument_list|)
expr_stmt|;
name|seq
operator|=
name|xquery
operator|.
name|execute
argument_list|(
name|broker
argument_list|,
literal|"/section[ft:query(p/@rend, 'center')]"
argument_list|,
literal|null
argument_list|)
expr_stmt|;
name|assertNotNull
argument_list|(
name|seq
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|seq
operator|.
name|getItemCount
argument_list|()
argument_list|)
expr_stmt|;
name|seq
operator|=
name|xquery
operator|.
name|execute
argument_list|(
name|broker
argument_list|,
literal|"/section[ft:query(hi, 'just')]"
argument_list|,
literal|null
argument_list|)
expr_stmt|;
name|assertNotNull
argument_list|(
name|seq
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|seq
operator|.
name|getItemCount
argument_list|()
argument_list|)
expr_stmt|;
name|seq
operator|=
name|xquery
operator|.
name|execute
argument_list|(
name|broker
argument_list|,
literal|"/section[ft:query(p/*, 'just')]"
argument_list|,
literal|null
argument_list|)
expr_stmt|;
name|assertNotNull
argument_list|(
name|seq
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|seq
operator|.
name|getItemCount
argument_list|()
argument_list|)
expr_stmt|;
name|seq
operator|=
name|xquery
operator|.
name|execute
argument_list|(
name|broker
argument_list|,
literal|"/section[ft:query(head/*, 'just')]"
argument_list|,
literal|null
argument_list|)
expr_stmt|;
name|assertNotNull
argument_list|(
name|seq
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|seq
operator|.
name|getItemCount
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Test
specifier|public
name|void
name|moreElaborateQueries
parameter_list|()
throws|throws
name|EXistException
throws|,
name|CollectionConfigurationException
throws|,
name|PermissionDeniedException
throws|,
name|SAXException
throws|,
name|LockException
throws|,
name|IOException
throws|,
name|XPathException
throws|,
name|QName
operator|.
name|IllegalQNameException
block|{
specifier|final
name|String
name|XML10
init|=
literal|"<TEI>\n"
operator|+
comment|// xmlns=\"http://www.tei-c.org/ns/1.0\">\n" +
literal|"<teiHeader>\n"
operator|+
literal|"<title type='t' xml:lang=\"Sa-Ltn\">       Buick</title> \n"
operator|+
comment|// this should get indexed
literal|"<title type='t'     lang=\"Sa-Ltn\">       Cadillac</title> \n"
operator|+
comment|// this should not get indexed -- attribute name ns does not match
literal|"<title type='t' xml:lang=\"En\">       Dodge</title> \n"
operator|+
comment|// this should not get indexed -- attribute value does not match
literal|"<title type='t'>       Ford</title> \n"
operator|+
comment|// this should not get indexed -- attribute is entirely missing
literal|"<title type='t' xml:lang=\"Sa-Ltn\"><tag> ABuick</tag></title> \n"
operator|+
comment|// this should get indexed
literal|"<title type='t'     lang=\"Sa-Ltn\"><tag> ACadillac</tag></title> \n"
operator|+
comment|// this should not get indexed -- attribute name ns does not match
literal|"<title type='t' xml:lang=\"En\"><tag> ADodge</tag></title> \n"
operator|+
comment|// this should not get indexed -- attribute value does not match
literal|"<title type='t'><tag> AFord</tag></title> \n"
operator|+
comment|// this should not get indexed -- attribute is entirely missing
literal|"</teiHeader>\n"
operator|+
literal|"<text>\n"
operator|+
literal|"<group>\n"
operator|+
literal|"<text>Nested</text>\n"
operator|+
literal|"</group>\n"
operator|+
literal|"</text>\n"
operator|+
literal|"</TEI>"
decl_stmt|;
specifier|final
name|String
name|COLLECTION_CONFIG10
init|=
literal|"<collection xmlns=\"http://exist-db.org/collection-config/1.0\">\n"
operator|+
literal|"<index>\n"
operator|+
literal|"<!-- Lucene indexes -->\n"
operator|+
literal|"<lucene diacritics='no'>\n"
operator|+
literal|"<analyzer class='org.apache.lucene.analysis.standard.StandardAnalyzer'/>\n"
operator|+
literal|"<text match=\"//title[@xml:lang='Sa-Ltn']\"/>\n"
operator|+
literal|"<text match=\"/TEI/text\"><ignore qname=\"text\"/></text>\n"
operator|+
literal|"<text field=\"not-equals-Sa-Ltn\" match=\"//title[@xml:lang != 'Sa-Ltn']\"/>\n"
operator|+
literal|"<text field=\"ne-Sa-Ltn\" match=\"//title[fn:not(@xml:lang='Sa-Ltn')]\"/>\n"
operator|+
literal|"<text field=\"eq-Sa-Ltn\" match=\"//title[@xml:lang eq 'Sa-Ltn']\"/>\n"
operator|+
literal|"</lucene> \n"
operator|+
literal|"</index>\n"
operator|+
literal|"</collection>"
decl_stmt|;
specifier|final
name|DocumentSet
name|docs
init|=
name|configureAndStore
argument_list|(
name|COLLECTION_CONFIG10
argument_list|,
name|XML10
argument_list|,
literal|"test.xml"
argument_list|)
decl_stmt|;
specifier|final
name|BrokerPool
name|pool
init|=
name|existEmbeddedServer
operator|.
name|getBrokerPool
argument_list|()
decl_stmt|;
try|try
init|(
specifier|final
name|DBBroker
name|broker
init|=
name|pool
operator|.
name|get
argument_list|(
name|Optional
operator|.
name|of
argument_list|(
name|pool
operator|.
name|getSecurityManager
argument_list|()
operator|.
name|getSystemSubject
argument_list|()
argument_list|)
argument_list|)
init|)
block|{
comment|// unbeknownst to me, the test on the next line fails if the literal "buick" is replaced with "Buick":
name|checkIndex
argument_list|(
name|docs
argument_list|,
name|broker
argument_list|,
operator|new
name|QName
index|[]
block|{
operator|new
name|QName
argument_list|(
literal|"title"
argument_list|)
block|}
argument_list|,
literal|"buick"
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|checkIndex
argument_list|(
name|docs
argument_list|,
name|broker
argument_list|,
operator|new
name|QName
index|[]
block|{
operator|new
name|QName
argument_list|(
literal|"title"
argument_list|)
block|}
argument_list|,
literal|"cadillac"
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|checkIndex
argument_list|(
name|docs
argument_list|,
name|broker
argument_list|,
operator|new
name|QName
index|[]
block|{
operator|new
name|QName
argument_list|(
literal|"title"
argument_list|)
block|}
argument_list|,
literal|"dodge"
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|checkIndex
argument_list|(
name|docs
argument_list|,
name|broker
argument_list|,
operator|new
name|QName
index|[]
block|{
operator|new
name|QName
argument_list|(
literal|"title"
argument_list|)
block|}
argument_list|,
literal|"ford"
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|checkIndex
argument_list|(
name|docs
argument_list|,
name|broker
argument_list|,
operator|new
name|QName
index|[]
block|{
operator|new
name|QName
argument_list|(
literal|"title"
argument_list|)
block|}
argument_list|,
literal|"abuick"
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|checkIndex
argument_list|(
name|docs
argument_list|,
name|broker
argument_list|,
operator|new
name|QName
index|[]
block|{
operator|new
name|QName
argument_list|(
literal|"title"
argument_list|)
block|}
argument_list|,
literal|"acadillac"
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|checkIndex
argument_list|(
name|docs
argument_list|,
name|broker
argument_list|,
operator|new
name|QName
index|[]
block|{
operator|new
name|QName
argument_list|(
literal|"title"
argument_list|)
block|}
argument_list|,
literal|"adodge"
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|checkIndex
argument_list|(
name|docs
argument_list|,
name|broker
argument_list|,
operator|new
name|QName
index|[]
block|{
operator|new
name|QName
argument_list|(
literal|"title"
argument_list|)
block|}
argument_list|,
literal|"aford"
argument_list|,
literal|0
argument_list|)
expr_stmt|;
comment|// nested<text> should be ignored and not indexed by match="/TEI/text"
name|checkIndex
argument_list|(
name|docs
argument_list|,
name|broker
argument_list|,
operator|new
name|QName
index|[]
block|{
operator|new
name|QName
argument_list|(
literal|"text"
argument_list|)
block|}
argument_list|,
literal|"nested"
argument_list|,
literal|0
argument_list|)
expr_stmt|;
specifier|final
name|XQuery
name|xquery
init|=
name|pool
operator|.
name|getXQueryService
argument_list|()
decl_stmt|;
name|assertNotNull
argument_list|(
name|xquery
argument_list|)
expr_stmt|;
name|String
index|[]
name|searchTerms
init|=
block|{
literal|"Buick"
block|,
literal|"Cadillac"
block|,
literal|"Dodge"
block|,
literal|"Ford"
block|,
literal|"ABuick"
block|,
literal|"ACadillac"
block|,
literal|"ADodge"
block|,
literal|"AFord"
block|,             }
decl_stmt|;
name|String
index|[]
name|queryTemplates
init|=
block|{
literal|"//.[ft:query(title, '%s')]"
block|,
comment|// Field query with != attribute predicate:<text field="non-En" match="//title[@xml:lang != 'En']"/>:
literal|"//.[ft:query-field('not-equals-Sa-Ltn', '%s')]"
block|,
comment|// Field query with 'ne' attribute predicate:<text field="non-En" match="//title[@xml:lang ne 'En']"/>:
literal|"//.[ft:query-field('ne-Sa-Ltn', '%s')]"
block|,
comment|// Field query with 'eq' attribute predicate:<text field="non-En" match="//title[@xml:lang ne 'En']"/>:
literal|"//.[ft:query-field('eq-Sa-Ltn', '%s')]"
block|,             }
decl_stmt|;
name|int
index|[]
index|[]
name|resultCounts
init|=
block|{
block|{
literal|1
block|,
literal|0
block|,
literal|0
block|,
literal|0
block|}
block|,
block|{
literal|0
block|,
literal|0
block|,
literal|1
block|,
literal|0
block|}
block|,
block|{
literal|0
block|,
literal|1
block|,
literal|1
block|,
literal|1
block|}
block|,
block|{
literal|1
block|,
literal|0
block|,
literal|0
block|,
literal|0
block|}
block|,             }
decl_stmt|;
for|for
control|(
name|int
name|qi
init|=
literal|0
init|;
name|qi
operator|<
name|queryTemplates
operator|.
name|length
condition|;
operator|++
name|qi
control|)
block|{
name|int
index|[]
name|resultCount
init|=
name|resultCounts
index|[
name|qi
index|]
decl_stmt|;
for|for
control|(
name|int
name|ri
init|=
literal|0
init|;
name|ri
operator|<
name|searchTerms
operator|.
name|length
condition|;
operator|++
name|ri
control|)
block|{
name|String
name|query
init|=
name|String
operator|.
name|format
argument_list|(
name|queryTemplates
index|[
name|qi
index|]
argument_list|,
name|searchTerms
index|[
name|ri
index|]
argument_list|)
decl_stmt|;
name|Sequence
name|seq
init|=
name|xquery
operator|.
name|execute
argument_list|(
name|broker
argument_list|,
name|query
argument_list|,
literal|null
argument_list|)
decl_stmt|;
name|assertNotNull
argument_list|(
name|seq
argument_list|)
expr_stmt|;
name|int
name|expected
init|=
name|resultCount
index|[
name|ri
operator|%
name|resultCount
operator|.
name|length
index|]
decl_stmt|;
name|assertEquals
argument_list|(
name|query
argument_list|,
name|expected
argument_list|,
name|seq
operator|.
name|getItemCount
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
annotation|@
name|Test
specifier|public
name|void
name|configuration
parameter_list|()
throws|throws
name|EXistException
throws|,
name|CollectionConfigurationException
throws|,
name|PermissionDeniedException
throws|,
name|SAXException
throws|,
name|LockException
throws|,
name|IOException
throws|,
name|XPathException
throws|,
name|QName
operator|.
name|IllegalQNameException
block|{
specifier|final
name|DocumentSet
name|docs
init|=
name|configureAndStore
argument_list|(
name|COLLECTION_CONFIG4
argument_list|,
name|XML4
argument_list|,
literal|"test.xml"
argument_list|)
decl_stmt|;
specifier|final
name|BrokerPool
name|pool
init|=
name|existEmbeddedServer
operator|.
name|getBrokerPool
argument_list|()
decl_stmt|;
try|try
init|(
specifier|final
name|DBBroker
name|broker
init|=
name|pool
operator|.
name|get
argument_list|(
name|Optional
operator|.
name|of
argument_list|(
name|pool
operator|.
name|getSecurityManager
argument_list|()
operator|.
name|getSystemSubject
argument_list|()
argument_list|)
argument_list|)
init|)
block|{
name|checkIndex
argument_list|(
name|docs
argument_list|,
name|broker
argument_list|,
operator|new
name|QName
index|[]
block|{
operator|new
name|QName
argument_list|(
literal|"a"
argument_list|)
block|}
argument_list|,
literal|"x"
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|checkIndex
argument_list|(
name|docs
argument_list|,
name|broker
argument_list|,
operator|new
name|QName
index|[]
block|{
operator|new
name|QName
argument_list|(
literal|"c"
argument_list|)
block|}
argument_list|,
literal|"x"
argument_list|,
literal|1
argument_list|)
expr_stmt|;
specifier|final
name|XQuery
name|xquery
init|=
name|pool
operator|.
name|getXQueryService
argument_list|()
decl_stmt|;
name|assertNotNull
argument_list|(
name|xquery
argument_list|)
expr_stmt|;
name|Sequence
name|seq
init|=
name|xquery
operator|.
name|execute
argument_list|(
name|broker
argument_list|,
literal|"/test[ft:query(a, 'x')]"
argument_list|,
literal|null
argument_list|)
decl_stmt|;
name|assertNotNull
argument_list|(
name|seq
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|seq
operator|.
name|getItemCount
argument_list|()
argument_list|)
expr_stmt|;
name|seq
operator|=
name|xquery
operator|.
name|execute
argument_list|(
name|broker
argument_list|,
literal|"/test[ft:query(.//c, 'x')]"
argument_list|,
literal|null
argument_list|)
expr_stmt|;
name|assertNotNull
argument_list|(
name|seq
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|seq
operator|.
name|getItemCount
argument_list|()
argument_list|)
expr_stmt|;
name|seq
operator|=
name|xquery
operator|.
name|execute
argument_list|(
name|broker
argument_list|,
literal|"/test[ft:query(b, 'x')]"
argument_list|,
literal|null
argument_list|)
expr_stmt|;
name|assertNotNull
argument_list|(
name|seq
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|seq
operator|.
name|getItemCount
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Test
specifier|public
name|void
name|inlineAndIgnore
parameter_list|()
throws|throws
name|EXistException
throws|,
name|CollectionConfigurationException
throws|,
name|PermissionDeniedException
throws|,
name|SAXException
throws|,
name|LockException
throws|,
name|IOException
throws|,
name|XPathException
throws|,
name|QName
operator|.
name|IllegalQNameException
block|{
specifier|final
name|DocumentSet
name|docs
init|=
name|configureAndStore
argument_list|(
name|COLLECTION_CONFIG5
argument_list|,
name|XML5
argument_list|,
literal|"test.xml"
argument_list|)
decl_stmt|;
specifier|final
name|BrokerPool
name|pool
init|=
name|existEmbeddedServer
operator|.
name|getBrokerPool
argument_list|()
decl_stmt|;
try|try
init|(
specifier|final
name|DBBroker
name|broker
init|=
name|pool
operator|.
name|get
argument_list|(
name|Optional
operator|.
name|of
argument_list|(
name|pool
operator|.
name|getSecurityManager
argument_list|()
operator|.
name|getSystemSubject
argument_list|()
argument_list|)
argument_list|)
init|)
block|{
name|checkIndex
argument_list|(
name|docs
argument_list|,
name|broker
argument_list|,
operator|new
name|QName
index|[]
block|{
operator|new
name|QName
argument_list|(
literal|"head"
argument_list|)
block|}
argument_list|,
literal|"title"
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|checkIndex
argument_list|(
name|docs
argument_list|,
name|broker
argument_list|,
operator|new
name|QName
index|[]
block|{
operator|new
name|QName
argument_list|(
literal|"p"
argument_list|)
block|}
argument_list|,
literal|"simple"
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|checkIndex
argument_list|(
name|docs
argument_list|,
name|broker
argument_list|,
operator|new
name|QName
index|[]
block|{
operator|new
name|QName
argument_list|(
literal|"p"
argument_list|)
block|}
argument_list|,
literal|"mixed"
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|checkIndex
argument_list|(
name|docs
argument_list|,
name|broker
argument_list|,
operator|new
name|QName
index|[]
block|{
operator|new
name|QName
argument_list|(
literal|"p"
argument_list|)
block|}
argument_list|,
literal|"dangerous"
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|checkIndex
argument_list|(
name|docs
argument_list|,
name|broker
argument_list|,
operator|new
name|QName
index|[]
block|{
operator|new
name|QName
argument_list|(
literal|"p"
argument_list|)
block|}
argument_list|,
literal|"note"
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|checkIndex
argument_list|(
name|docs
argument_list|,
name|broker
argument_list|,
operator|new
name|QName
index|[]
block|{
operator|new
name|QName
argument_list|(
literal|"p"
argument_list|)
block|}
argument_list|,
literal|"ignore"
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|checkIndex
argument_list|(
name|docs
argument_list|,
name|broker
argument_list|,
operator|new
name|QName
index|[]
block|{
operator|new
name|QName
argument_list|(
literal|"p"
argument_list|)
block|}
argument_list|,
literal|"warnings"
argument_list|,
literal|1
argument_list|)
expr_stmt|;
specifier|final
name|XQuery
name|xquery
init|=
name|pool
operator|.
name|getXQueryService
argument_list|()
decl_stmt|;
name|assertNotNull
argument_list|(
name|xquery
argument_list|)
expr_stmt|;
name|Sequence
name|seq
init|=
name|xquery
operator|.
name|execute
argument_list|(
name|broker
argument_list|,
literal|"/article[ft:query(head, 'title')]"
argument_list|,
literal|null
argument_list|)
decl_stmt|;
name|assertNotNull
argument_list|(
name|seq
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|seq
operator|.
name|getItemCount
argument_list|()
argument_list|)
expr_stmt|;
name|seq
operator|=
name|xquery
operator|.
name|execute
argument_list|(
name|broker
argument_list|,
literal|"/article[ft:query(p, 'highlighted')]"
argument_list|,
literal|null
argument_list|)
expr_stmt|;
name|assertNotNull
argument_list|(
name|seq
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|seq
operator|.
name|getItemCount
argument_list|()
argument_list|)
expr_stmt|;
name|seq
operator|=
name|xquery
operator|.
name|execute
argument_list|(
name|broker
argument_list|,
literal|"/article[ft:query(p, 'mixed')]"
argument_list|,
literal|null
argument_list|)
expr_stmt|;
name|assertNotNull
argument_list|(
name|seq
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|seq
operator|.
name|getItemCount
argument_list|()
argument_list|)
expr_stmt|;
name|seq
operator|=
name|xquery
operator|.
name|execute
argument_list|(
name|broker
argument_list|,
literal|"/article[ft:query(p, 'mix')]"
argument_list|,
literal|null
argument_list|)
expr_stmt|;
name|assertNotNull
argument_list|(
name|seq
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|seq
operator|.
name|getItemCount
argument_list|()
argument_list|)
expr_stmt|;
name|seq
operator|=
name|xquery
operator|.
name|execute
argument_list|(
name|broker
argument_list|,
literal|"/article[ft:query(p, 'dangerous')]"
argument_list|,
literal|null
argument_list|)
expr_stmt|;
name|assertNotNull
argument_list|(
name|seq
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|seq
operator|.
name|getItemCount
argument_list|()
argument_list|)
expr_stmt|;
name|seq
operator|=
name|xquery
operator|.
name|execute
argument_list|(
name|broker
argument_list|,
literal|"/article[ft:query(p, 'ous')]"
argument_list|,
literal|null
argument_list|)
expr_stmt|;
name|assertNotNull
argument_list|(
name|seq
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|seq
operator|.
name|getItemCount
argument_list|()
argument_list|)
expr_stmt|;
name|seq
operator|=
name|xquery
operator|.
name|execute
argument_list|(
name|broker
argument_list|,
literal|"/article[ft:query(p, 'danger')]"
argument_list|,
literal|null
argument_list|)
expr_stmt|;
name|assertNotNull
argument_list|(
name|seq
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|seq
operator|.
name|getItemCount
argument_list|()
argument_list|)
expr_stmt|;
name|seq
operator|=
name|xquery
operator|.
name|execute
argument_list|(
name|broker
argument_list|,
literal|"/article[ft:query(p, 'note')]"
argument_list|,
literal|null
argument_list|)
expr_stmt|;
name|assertNotNull
argument_list|(
name|seq
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|seq
operator|.
name|getItemCount
argument_list|()
argument_list|)
expr_stmt|;
name|seq
operator|=
name|xquery
operator|.
name|execute
argument_list|(
name|broker
argument_list|,
literal|"/article[ft:query(., 'highlighted')]"
argument_list|,
literal|null
argument_list|)
expr_stmt|;
name|assertNotNull
argument_list|(
name|seq
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|seq
operator|.
name|getItemCount
argument_list|()
argument_list|)
expr_stmt|;
name|seq
operator|=
name|xquery
operator|.
name|execute
argument_list|(
name|broker
argument_list|,
literal|"/article[ft:query(., 'mixed')]"
argument_list|,
literal|null
argument_list|)
expr_stmt|;
name|assertNotNull
argument_list|(
name|seq
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|seq
operator|.
name|getItemCount
argument_list|()
argument_list|)
expr_stmt|;
name|seq
operator|=
name|xquery
operator|.
name|execute
argument_list|(
name|broker
argument_list|,
literal|"/article[ft:query(., 'dangerous')]"
argument_list|,
literal|null
argument_list|)
expr_stmt|;
name|assertNotNull
argument_list|(
name|seq
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|seq
operator|.
name|getItemCount
argument_list|()
argument_list|)
expr_stmt|;
name|seq
operator|=
name|xquery
operator|.
name|execute
argument_list|(
name|broker
argument_list|,
literal|"/article[ft:query(., 'warnings')]"
argument_list|,
literal|null
argument_list|)
expr_stmt|;
name|assertNotNull
argument_list|(
name|seq
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|seq
operator|.
name|getItemCount
argument_list|()
argument_list|)
expr_stmt|;
name|seq
operator|=
name|xquery
operator|.
name|execute
argument_list|(
name|broker
argument_list|,
literal|"/article[ft:query(., 'danger')]"
argument_list|,
literal|null
argument_list|)
expr_stmt|;
name|assertNotNull
argument_list|(
name|seq
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|seq
operator|.
name|getItemCount
argument_list|()
argument_list|)
expr_stmt|;
name|seq
operator|=
name|xquery
operator|.
name|execute
argument_list|(
name|broker
argument_list|,
literal|"/article[ft:query(., 'note')]"
argument_list|,
literal|null
argument_list|)
expr_stmt|;
name|assertNotNull
argument_list|(
name|seq
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|seq
operator|.
name|getItemCount
argument_list|()
argument_list|)
expr_stmt|;
name|seq
operator|=
name|xquery
operator|.
name|execute
argument_list|(
name|broker
argument_list|,
literal|"/article[ft:query(., 'ignore')]"
argument_list|,
literal|null
argument_list|)
expr_stmt|;
name|assertNotNull
argument_list|(
name|seq
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|seq
operator|.
name|getItemCount
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Test
specifier|public
name|void
name|attributeMatch
parameter_list|()
throws|throws
name|EXistException
throws|,
name|CollectionConfigurationException
throws|,
name|PermissionDeniedException
throws|,
name|SAXException
throws|,
name|TriggerException
throws|,
name|LockException
throws|,
name|IOException
throws|,
name|XPathException
throws|,
name|ParserConfigurationException
block|{
specifier|final
name|DocumentSet
name|docs
init|=
name|configureAndStore
argument_list|(
name|COLLECTION_CONFIG7
argument_list|,
name|XML8
argument_list|,
literal|"test.xml"
argument_list|)
decl_stmt|;
specifier|final
name|BrokerPool
name|pool
init|=
name|existEmbeddedServer
operator|.
name|getBrokerPool
argument_list|()
decl_stmt|;
specifier|final
name|TransactionManager
name|transact
init|=
name|pool
operator|.
name|getTransactionManager
argument_list|()
decl_stmt|;
try|try
init|(
specifier|final
name|DBBroker
name|broker
init|=
name|pool
operator|.
name|get
argument_list|(
name|Optional
operator|.
name|of
argument_list|(
name|pool
operator|.
name|getSecurityManager
argument_list|()
operator|.
name|getSystemSubject
argument_list|()
argument_list|)
argument_list|)
init|;
specifier|final
name|Txn
name|transaction
init|=
name|transact
operator|.
name|beginTransaction
argument_list|()
init|)
block|{
specifier|final
name|XQuery
name|xquery
init|=
name|pool
operator|.
name|getXQueryService
argument_list|()
decl_stmt|;
name|assertNotNull
argument_list|(
name|xquery
argument_list|)
expr_stmt|;
name|Sequence
name|seq
init|=
name|xquery
operator|.
name|execute
argument_list|(
name|broker
argument_list|,
literal|"for $a in ft:query((//b|//c), 'AAA') order by ft:score($a) descending return xs:string($a)"
argument_list|,
literal|null
argument_list|)
decl_stmt|;
name|assertNotNull
argument_list|(
name|seq
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|5
argument_list|,
name|seq
operator|.
name|getItemCount
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"AAA on b2"
argument_list|,
name|seq
operator|.
name|itemAt
argument_list|(
literal|0
argument_list|)
operator|.
name|getStringValue
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"AAA on c1"
argument_list|,
name|seq
operator|.
name|itemAt
argument_list|(
literal|1
argument_list|)
operator|.
name|getStringValue
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"AAA on b3"
argument_list|,
name|seq
operator|.
name|itemAt
argument_list|(
literal|2
argument_list|)
operator|.
name|getStringValue
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"AAA on b1"
argument_list|,
name|seq
operator|.
name|itemAt
argument_list|(
literal|3
argument_list|)
operator|.
name|getStringValue
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"AAA on c2"
argument_list|,
name|seq
operator|.
name|itemAt
argument_list|(
literal|4
argument_list|)
operator|.
name|getStringValue
argument_list|()
argument_list|)
expr_stmt|;
comment|// path: /a/b
name|seq
operator|=
name|xquery
operator|.
name|execute
argument_list|(
name|broker
argument_list|,
literal|"for $a in ft:query(/a/b, 'AAA') order by ft:score($a) descending return xs:string($a)"
argument_list|,
literal|null
argument_list|)
expr_stmt|;
name|assertNotNull
argument_list|(
name|seq
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|seq
operator|.
name|getItemCount
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"AAA on b2"
argument_list|,
name|seq
operator|.
name|itemAt
argument_list|(
literal|0
argument_list|)
operator|.
name|getStringValue
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"AAA on b1"
argument_list|,
name|seq
operator|.
name|itemAt
argument_list|(
literal|1
argument_list|)
operator|.
name|getStringValue
argument_list|()
argument_list|)
expr_stmt|;
name|seq
operator|=
name|xquery
operator|.
name|execute
argument_list|(
name|broker
argument_list|,
literal|"for $a in ft:query(//@att, 'att') order by ft:score($a) descending return xs:string($a)"
argument_list|,
literal|null
argument_list|)
expr_stmt|;
name|assertNotNull
argument_list|(
name|seq
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|4
argument_list|,
name|seq
operator|.
name|getItemCount
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"att on b2"
argument_list|,
name|seq
operator|.
name|itemAt
argument_list|(
literal|0
argument_list|)
operator|.
name|getStringValue
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"att on b3"
argument_list|,
name|seq
operator|.
name|itemAt
argument_list|(
literal|1
argument_list|)
operator|.
name|getStringValue
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"att on b1"
argument_list|,
name|seq
operator|.
name|itemAt
argument_list|(
literal|2
argument_list|)
operator|.
name|getStringValue
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"att on c1"
argument_list|,
name|seq
operator|.
name|itemAt
argument_list|(
literal|3
argument_list|)
operator|.
name|getStringValue
argument_list|()
argument_list|)
expr_stmt|;
comment|// modify with xupdate and check if boosts are updated accordingly
specifier|final
name|XUpdateProcessor
name|proc
init|=
operator|new
name|XUpdateProcessor
argument_list|(
name|broker
argument_list|,
name|docs
argument_list|)
decl_stmt|;
name|assertNotNull
argument_list|(
name|proc
argument_list|)
expr_stmt|;
name|proc
operator|.
name|setBroker
argument_list|(
name|broker
argument_list|)
expr_stmt|;
name|proc
operator|.
name|setDocumentSet
argument_list|(
name|docs
argument_list|)
expr_stmt|;
comment|// remove 'att' attribute from first c element: it gets no boost
comment|// also append an 'att' attribute on second c element which will
comment|// make the two switch order in the result sequence.
name|String
name|xupdate
init|=
name|XUPDATE_START
operator|+
literal|"<xu:remove select=\"//c[1]/@att\"/>"
operator|+
literal|"<xu:append select=\"//c[2]\"><xu:attribute name=\"att\">att on c2</xu:attribute></xu:append>"
operator|+
name|XUPDATE_END
decl_stmt|;
specifier|final
name|Modification
index|[]
name|modifications
init|=
name|proc
operator|.
name|parse
argument_list|(
operator|new
name|InputSource
argument_list|(
operator|new
name|StringReader
argument_list|(
name|xupdate
argument_list|)
argument_list|)
argument_list|)
decl_stmt|;
name|assertNotNull
argument_list|(
name|modifications
argument_list|)
expr_stmt|;
name|modifications
index|[
literal|0
index|]
operator|.
name|process
argument_list|(
name|transaction
argument_list|)
expr_stmt|;
name|modifications
index|[
literal|1
index|]
operator|.
name|process
argument_list|(
name|transaction
argument_list|)
expr_stmt|;
name|proc
operator|.
name|reset
argument_list|()
expr_stmt|;
name|transact
operator|.
name|commit
argument_list|(
name|transaction
argument_list|)
expr_stmt|;
name|seq
operator|=
name|xquery
operator|.
name|execute
argument_list|(
name|broker
argument_list|,
literal|"for $a in ft:query((//b|//c), 'AAA') order by ft:score($a) descending return xs:string($a)"
argument_list|,
literal|null
argument_list|)
expr_stmt|;
name|assertNotNull
argument_list|(
name|seq
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|5
argument_list|,
name|seq
operator|.
name|getItemCount
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"AAA on b2"
argument_list|,
name|seq
operator|.
name|itemAt
argument_list|(
literal|0
argument_list|)
operator|.
name|getStringValue
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"AAA on c2"
argument_list|,
name|seq
operator|.
name|itemAt
argument_list|(
literal|1
argument_list|)
operator|.
name|getStringValue
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"AAA on b3"
argument_list|,
name|seq
operator|.
name|itemAt
argument_list|(
literal|2
argument_list|)
operator|.
name|getStringValue
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"AAA on b1"
argument_list|,
name|seq
operator|.
name|itemAt
argument_list|(
literal|3
argument_list|)
operator|.
name|getStringValue
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"AAA on c1"
argument_list|,
name|seq
operator|.
name|itemAt
argument_list|(
literal|4
argument_list|)
operator|.
name|getStringValue
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Test
specifier|public
name|void
name|boosts
parameter_list|()
throws|throws
name|EXistException
throws|,
name|CollectionConfigurationException
throws|,
name|PermissionDeniedException
throws|,
name|SAXException
throws|,
name|TriggerException
throws|,
name|LockException
throws|,
name|IOException
throws|,
name|XPathException
block|{
name|configureAndStore
argument_list|(
name|COLLECTION_CONFIG6
argument_list|,
name|XML6
argument_list|,
literal|"test.xml"
argument_list|)
expr_stmt|;
specifier|final
name|BrokerPool
name|pool
init|=
name|existEmbeddedServer
operator|.
name|getBrokerPool
argument_list|()
decl_stmt|;
try|try
init|(
specifier|final
name|DBBroker
name|broker
init|=
name|pool
operator|.
name|get
argument_list|(
name|Optional
operator|.
name|of
argument_list|(
name|pool
operator|.
name|getSecurityManager
argument_list|()
operator|.
name|getSystemSubject
argument_list|()
argument_list|)
argument_list|)
init|)
block|{
specifier|final
name|XQuery
name|xquery
init|=
name|pool
operator|.
name|getXQueryService
argument_list|()
decl_stmt|;
name|assertNotNull
argument_list|(
name|xquery
argument_list|)
expr_stmt|;
name|Sequence
name|seq
init|=
name|xquery
operator|.
name|execute
argument_list|(
name|broker
argument_list|,
literal|"for $a in ft:query((//b|//c), 'AAA') "
operator|+
literal|"order by ft:score($a) descending return $a/local-name(.)"
argument_list|,
literal|null
argument_list|)
decl_stmt|;
name|assertNotNull
argument_list|(
name|seq
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|3
argument_list|,
name|seq
operator|.
name|getItemCount
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"c"
argument_list|,
name|seq
operator|.
name|getStringValue
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Test
specifier|public
name|void
name|queryTranslation
parameter_list|()
throws|throws
name|EXistException
throws|,
name|CollectionConfigurationException
throws|,
name|PermissionDeniedException
throws|,
name|SAXException
throws|,
name|TriggerException
throws|,
name|LockException
throws|,
name|IOException
throws|,
name|XPathException
block|{
name|configureAndStore
argument_list|(
name|COLLECTION_CONFIG1
argument_list|,
name|XML7
argument_list|,
literal|"test.xml"
argument_list|)
expr_stmt|;
specifier|final
name|BrokerPool
name|pool
init|=
name|existEmbeddedServer
operator|.
name|getBrokerPool
argument_list|()
decl_stmt|;
try|try
init|(
specifier|final
name|DBBroker
name|broker
init|=
name|pool
operator|.
name|get
argument_list|(
name|Optional
operator|.
name|of
argument_list|(
name|pool
operator|.
name|getSecurityManager
argument_list|()
operator|.
name|getSystemSubject
argument_list|()
argument_list|)
argument_list|)
init|)
block|{
specifier|final
name|XQuery
name|xquery
init|=
name|pool
operator|.
name|getXQueryService
argument_list|()
decl_stmt|;
name|assertNotNull
argument_list|(
name|xquery
argument_list|)
expr_stmt|;
specifier|final
name|XQueryContext
name|context
init|=
operator|new
name|XQueryContext
argument_list|(
name|broker
operator|.
name|getBrokerPool
argument_list|()
argument_list|)
decl_stmt|;
specifier|final
name|CompiledXQuery
name|compiled
init|=
name|xquery
operator|.
name|compile
argument_list|(
name|broker
argument_list|,
name|context
argument_list|,
literal|"declare variable $q external; "
operator|+
literal|"ft:query(//p, parse-xml($q)/query)"
argument_list|)
decl_stmt|;
name|context
operator|.
name|declareVariable
argument_list|(
literal|"q"
argument_list|,
literal|"<query><term>heiterkeit</term></query>"
argument_list|)
expr_stmt|;
name|Sequence
name|seq
init|=
name|xquery
operator|.
name|execute
argument_list|(
name|broker
argument_list|,
name|compiled
argument_list|,
literal|null
argument_list|)
decl_stmt|;
name|assertNotNull
argument_list|(
name|seq
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|seq
operator|.
name|getItemCount
argument_list|()
argument_list|)
expr_stmt|;
name|context
operator|.
name|declareVariable
argument_list|(
literal|"q"
argument_list|,
literal|"<query>"
operator|+
literal|"<bool>"
operator|+
literal|"<term>heiterkeit</term><term>blablabla</term>"
operator|+
literal|"</bool>"
operator|+
literal|"</query>"
argument_list|)
expr_stmt|;
name|seq
operator|=
name|xquery
operator|.
name|execute
argument_list|(
name|broker
argument_list|,
name|compiled
argument_list|,
literal|null
argument_list|)
expr_stmt|;
name|assertNotNull
argument_list|(
name|seq
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|seq
operator|.
name|getItemCount
argument_list|()
argument_list|)
expr_stmt|;
name|context
operator|.
name|declareVariable
argument_list|(
literal|"q"
argument_list|,
literal|"<query>"
operator|+
literal|"<bool>"
operator|+
literal|"<term occur='should'>heiterkeit</term><term occur='should'>blablabla</term>"
operator|+
literal|"</bool>"
operator|+
literal|"</query>"
argument_list|)
expr_stmt|;
name|seq
operator|=
name|xquery
operator|.
name|execute
argument_list|(
name|broker
argument_list|,
name|compiled
argument_list|,
literal|null
argument_list|)
expr_stmt|;
name|assertNotNull
argument_list|(
name|seq
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|seq
operator|.
name|getItemCount
argument_list|()
argument_list|)
expr_stmt|;
name|context
operator|.
name|declareVariable
argument_list|(
literal|"q"
argument_list|,
literal|"<query>"
operator|+
literal|"<bool>"
operator|+
literal|"<term occur='must'>heiterkeit</term><term occur='must'>blablabla</term>"
operator|+
literal|"</bool>"
operator|+
literal|"</query>"
argument_list|)
expr_stmt|;
name|seq
operator|=
name|xquery
operator|.
name|execute
argument_list|(
name|broker
argument_list|,
name|compiled
argument_list|,
literal|null
argument_list|)
expr_stmt|;
name|assertNotNull
argument_list|(
name|seq
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|seq
operator|.
name|getItemCount
argument_list|()
argument_list|)
expr_stmt|;
name|context
operator|.
name|declareVariable
argument_list|(
literal|"q"
argument_list|,
literal|"<query>"
operator|+
literal|"<bool>"
operator|+
literal|"<term occur='must'>heiterkeit</term><term occur='not'>herzen</term>"
operator|+
literal|"</bool>"
operator|+
literal|"</query>"
argument_list|)
expr_stmt|;
name|seq
operator|=
name|xquery
operator|.
name|execute
argument_list|(
name|broker
argument_list|,
name|compiled
argument_list|,
literal|null
argument_list|)
expr_stmt|;
name|assertNotNull
argument_list|(
name|seq
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|seq
operator|.
name|getItemCount
argument_list|()
argument_list|)
expr_stmt|;
name|context
operator|.
name|declareVariable
argument_list|(
literal|"q"
argument_list|,
literal|"<query>"
operator|+
literal|"<bool>"
operator|+
literal|"<phrase occur='must'>wunderbare heiterkeit</phrase><term occur='must'>herzen</term>"
operator|+
literal|"</bool>"
operator|+
literal|"</query>"
argument_list|)
expr_stmt|;
name|seq
operator|=
name|xquery
operator|.
name|execute
argument_list|(
name|broker
argument_list|,
name|compiled
argument_list|,
literal|null
argument_list|)
expr_stmt|;
name|assertNotNull
argument_list|(
name|seq
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|seq
operator|.
name|getItemCount
argument_list|()
argument_list|)
expr_stmt|;
name|context
operator|.
name|declareVariable
argument_list|(
literal|"q"
argument_list|,
literal|"<query>"
operator|+
literal|"<phrase slop='5'>heiterkeit seele eingenommen</phrase>"
operator|+
literal|"</query>"
argument_list|)
expr_stmt|;
name|seq
operator|=
name|xquery
operator|.
name|execute
argument_list|(
name|broker
argument_list|,
name|compiled
argument_list|,
literal|null
argument_list|)
expr_stmt|;
name|assertNotNull
argument_list|(
name|seq
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|seq
operator|.
name|getItemCount
argument_list|()
argument_list|)
expr_stmt|;
comment|// phrase with wildcards
name|context
operator|.
name|declareVariable
argument_list|(
literal|"q"
argument_list|,
literal|"<query>"
operator|+
literal|"<phrase slop='5'><term>heiter*</term><term>se?nnnle*</term></phrase>"
operator|+
literal|"</query>"
argument_list|)
expr_stmt|;
name|seq
operator|=
name|xquery
operator|.
name|execute
argument_list|(
name|broker
argument_list|,
name|compiled
argument_list|,
literal|null
argument_list|)
expr_stmt|;
name|assertNotNull
argument_list|(
name|seq
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|seq
operator|.
name|getItemCount
argument_list|()
argument_list|)
expr_stmt|;
name|context
operator|.
name|declareVariable
argument_list|(
literal|"q"
argument_list|,
literal|"<query>"
operator|+
literal|"<wildcard>?eiter*</wildcard>"
operator|+
literal|"</query>"
argument_list|)
expr_stmt|;
name|seq
operator|=
name|xquery
operator|.
name|execute
argument_list|(
name|broker
argument_list|,
name|compiled
argument_list|,
literal|null
argument_list|)
expr_stmt|;
name|assertNotNull
argument_list|(
name|seq
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|seq
operator|.
name|getItemCount
argument_list|()
argument_list|)
expr_stmt|;
name|context
operator|.
name|declareVariable
argument_list|(
literal|"q"
argument_list|,
literal|"<query>"
operator|+
literal|"<fuzzy max-edits='2'>selee</fuzzy>"
operator|+
literal|"</query>"
argument_list|)
expr_stmt|;
name|seq
operator|=
name|xquery
operator|.
name|execute
argument_list|(
name|broker
argument_list|,
name|compiled
argument_list|,
literal|null
argument_list|)
expr_stmt|;
name|assertNotNull
argument_list|(
name|seq
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|seq
operator|.
name|getItemCount
argument_list|()
argument_list|)
expr_stmt|;
name|context
operator|.
name|declareVariable
argument_list|(
literal|"q"
argument_list|,
literal|"<query>"
operator|+
literal|"<bool>"
operator|+
literal|"<fuzzy occur='must' max-edits='2'>selee</fuzzy>"
operator|+
literal|"<wildcard occur='should'>bla*</wildcard>"
operator|+
literal|"</bool>"
operator|+
literal|"</query>"
argument_list|)
expr_stmt|;
name|seq
operator|=
name|xquery
operator|.
name|execute
argument_list|(
name|broker
argument_list|,
name|compiled
argument_list|,
literal|null
argument_list|)
expr_stmt|;
name|assertNotNull
argument_list|(
name|seq
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|seq
operator|.
name|getItemCount
argument_list|()
argument_list|)
expr_stmt|;
name|context
operator|.
name|declareVariable
argument_list|(
literal|"q"
argument_list|,
literal|"<query>"
operator|+
literal|"<regex>heit.*keit</regex>"
operator|+
literal|"</query>"
argument_list|)
expr_stmt|;
name|seq
operator|=
name|xquery
operator|.
name|execute
argument_list|(
name|broker
argument_list|,
name|compiled
argument_list|,
literal|null
argument_list|)
expr_stmt|;
name|assertNotNull
argument_list|(
name|seq
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|seq
operator|.
name|getItemCount
argument_list|()
argument_list|)
expr_stmt|;
name|context
operator|.
name|declareVariable
argument_list|(
literal|"q"
argument_list|,
literal|"<query>"
operator|+
literal|"<phrase><term>wunderbare</term><regex>heit.*keit</regex></phrase>"
operator|+
literal|"</query>"
argument_list|)
expr_stmt|;
name|seq
operator|=
name|xquery
operator|.
name|execute
argument_list|(
name|broker
argument_list|,
name|compiled
argument_list|,
literal|null
argument_list|)
expr_stmt|;
name|assertNotNull
argument_list|(
name|seq
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|seq
operator|.
name|getItemCount
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Test
specifier|public
name|void
name|analyzers
parameter_list|()
throws|throws
name|EXistException
throws|,
name|CollectionConfigurationException
throws|,
name|PermissionDeniedException
throws|,
name|SAXException
throws|,
name|LockException
throws|,
name|IOException
throws|,
name|XPathException
throws|,
name|QName
operator|.
name|IllegalQNameException
block|{
specifier|final
name|DocumentSet
name|docs
init|=
name|configureAndStore
argument_list|(
name|COLLECTION_CONFIG3
argument_list|,
name|XML3
argument_list|,
literal|"test.xml"
argument_list|)
decl_stmt|;
specifier|final
name|BrokerPool
name|pool
init|=
name|existEmbeddedServer
operator|.
name|getBrokerPool
argument_list|()
decl_stmt|;
try|try
init|(
specifier|final
name|DBBroker
name|broker
init|=
name|pool
operator|.
name|get
argument_list|(
name|Optional
operator|.
name|of
argument_list|(
name|pool
operator|.
name|getSecurityManager
argument_list|()
operator|.
name|getSystemSubject
argument_list|()
argument_list|)
argument_list|)
init|)
block|{
name|checkIndex
argument_list|(
name|docs
argument_list|,
name|broker
argument_list|,
operator|new
name|QName
index|[]
block|{
operator|new
name|QName
argument_list|(
literal|"head"
argument_list|)
block|}
argument_list|,
literal|"TITLE"
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|checkIndex
argument_list|(
name|docs
argument_list|,
name|broker
argument_list|,
operator|new
name|QName
index|[]
block|{
operator|new
name|QName
argument_list|(
literal|"p"
argument_list|)
block|}
argument_list|,
literal|"uppercase"
argument_list|,
literal|1
argument_list|)
expr_stmt|;
specifier|final
name|XQuery
name|xquery
init|=
name|pool
operator|.
name|getXQueryService
argument_list|()
decl_stmt|;
name|assertNotNull
argument_list|(
name|xquery
argument_list|)
expr_stmt|;
name|Sequence
name|seq
init|=
name|xquery
operator|.
name|execute
argument_list|(
name|broker
argument_list|,
literal|"/section[ft:query(p, 'UPPERCASE')]"
argument_list|,
literal|null
argument_list|)
decl_stmt|;
name|assertNotNull
argument_list|(
name|seq
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|seq
operator|.
name|getItemCount
argument_list|()
argument_list|)
expr_stmt|;
name|seq
operator|=
name|xquery
operator|.
name|execute
argument_list|(
name|broker
argument_list|,
literal|"/section[ft:query(head, 'TITLE')]"
argument_list|,
literal|null
argument_list|)
expr_stmt|;
name|assertNotNull
argument_list|(
name|seq
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|seq
operator|.
name|getItemCount
argument_list|()
argument_list|)
expr_stmt|;
name|seq
operator|=
name|xquery
operator|.
name|execute
argument_list|(
name|broker
argument_list|,
literal|"/section[ft:query(head, 'title')]"
argument_list|,
literal|null
argument_list|)
expr_stmt|;
name|assertNotNull
argument_list|(
name|seq
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|seq
operator|.
name|getItemCount
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Test
specifier|public
name|void
name|MultiTermQueryRewriteMethod
parameter_list|()
throws|throws
name|EXistException
throws|,
name|CollectionConfigurationException
throws|,
name|PermissionDeniedException
throws|,
name|SAXException
throws|,
name|TriggerException
throws|,
name|LockException
throws|,
name|IOException
throws|,
name|XPathException
block|{
name|configureAndStore
argument_list|(
name|COLLECTION_CONFIG8
argument_list|,
name|XML9
argument_list|,
literal|"test.xml"
argument_list|)
expr_stmt|;
specifier|final
name|BrokerPool
name|pool
init|=
name|existEmbeddedServer
operator|.
name|getBrokerPool
argument_list|()
decl_stmt|;
try|try
init|(
specifier|final
name|DBBroker
name|broker
init|=
name|pool
operator|.
name|get
argument_list|(
name|Optional
operator|.
name|of
argument_list|(
name|pool
operator|.
name|getSecurityManager
argument_list|()
operator|.
name|getSystemSubject
argument_list|()
argument_list|)
argument_list|)
init|)
block|{
specifier|final
name|XQuery
name|xquery
init|=
name|pool
operator|.
name|getXQueryService
argument_list|()
decl_stmt|;
name|assertNotNull
argument_list|(
name|xquery
argument_list|)
expr_stmt|;
name|Sequence
name|seq
init|=
name|xquery
operator|.
name|execute
argument_list|(
name|broker
argument_list|,
literal|"declare namespace tei=\"http://www.tei-c.org/ns/1.0\";"
operator|+
literal|" for $expr in (\"au*\", \"ha*\", \"ma*\", \"za*\", \"ya*\", \"ra*\", \"qa*\")"
operator|+
literal|" let $query :=<query><wildcard>{$expr}</wildcard></query>"
operator|+
literal|" return for $hit in //tei:p[ft:query(., $query)]"
operator|+
literal|" return util:expand($hit)//exist:match"
argument_list|,
literal|null
argument_list|)
decl_stmt|;
name|assertNotNull
argument_list|(
name|seq
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|10
argument_list|,
name|seq
operator|.
name|getItemCount
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"aus"
argument_list|,
name|seq
operator|.
name|itemAt
argument_list|(
literal|0
argument_list|)
operator|.
name|getStringValue
argument_list|()
argument_list|)
expr_stmt|;
name|seq
operator|=
name|xquery
operator|.
name|execute
argument_list|(
name|broker
argument_list|,
literal|"declare namespace tei=\"http://www.tei-c.org/ns/1.0\";"
operator|+
literal|" for $expr in (\"ha*\", \"ma*\")"
operator|+
literal|" let $query :=<query><wildcard>{$expr}</wildcard></query>"
operator|+
literal|" return for $hit in //tei:p[ft:query(., $query)]"
operator|+
literal|" return util:expand($hit)//exist:match"
argument_list|,
literal|null
argument_list|)
expr_stmt|;
name|assertNotNull
argument_list|(
name|seq
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|seq
operator|.
name|getItemCount
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"haus"
argument_list|,
name|seq
operator|.
name|itemAt
argument_list|(
literal|0
argument_list|)
operator|.
name|getStringValue
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Test
specifier|public
name|void
name|dropSingleDoc
parameter_list|()
throws|throws
name|EXistException
throws|,
name|CollectionConfigurationException
throws|,
name|PermissionDeniedException
throws|,
name|SAXException
throws|,
name|TriggerException
throws|,
name|LockException
throws|,
name|IOException
block|{
specifier|final
name|DocumentSet
name|docs
init|=
name|configureAndStore
argument_list|(
name|COLLECTION_CONFIG1
argument_list|,
name|XML1
argument_list|,
literal|"dropDocument.xml"
argument_list|)
decl_stmt|;
specifier|final
name|BrokerPool
name|pool
init|=
name|existEmbeddedServer
operator|.
name|getBrokerPool
argument_list|()
decl_stmt|;
specifier|final
name|TransactionManager
name|transact
init|=
name|pool
operator|.
name|getTransactionManager
argument_list|()
decl_stmt|;
try|try
init|(
specifier|final
name|DBBroker
name|broker
init|=
name|pool
operator|.
name|get
argument_list|(
name|Optional
operator|.
name|of
argument_list|(
name|pool
operator|.
name|getSecurityManager
argument_list|()
operator|.
name|getSystemSubject
argument_list|()
argument_list|)
argument_list|)
init|;
specifier|final
name|Txn
name|transaction
init|=
name|transact
operator|.
name|beginTransaction
argument_list|()
init|)
block|{
name|root
operator|.
name|removeXMLResource
argument_list|(
name|transaction
argument_list|,
name|broker
argument_list|,
name|XmldbURI
operator|.
name|create
argument_list|(
literal|"dropDocument.xml"
argument_list|)
argument_list|)
expr_stmt|;
name|transact
operator|.
name|commit
argument_list|(
name|transaction
argument_list|)
expr_stmt|;
name|checkIndex
argument_list|(
name|docs
argument_list|,
name|broker
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|,
literal|0
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Test
specifier|public
name|void
name|dropDocuments
parameter_list|()
throws|throws
name|EXistException
throws|,
name|CollectionConfigurationException
throws|,
name|PermissionDeniedException
throws|,
name|SAXException
throws|,
name|TriggerException
throws|,
name|LockException
throws|,
name|IOException
throws|,
name|XPathException
block|{
name|configureAndStore
argument_list|(
name|COLLECTION_CONFIG1
argument_list|,
name|SAMPLES
operator|.
name|getShakespeareXmlSampleNames
argument_list|()
argument_list|)
expr_stmt|;
specifier|final
name|BrokerPool
name|pool
init|=
name|existEmbeddedServer
operator|.
name|getBrokerPool
argument_list|()
decl_stmt|;
specifier|final
name|TransactionManager
name|transact
init|=
name|pool
operator|.
name|getTransactionManager
argument_list|()
decl_stmt|;
try|try
init|(
specifier|final
name|DBBroker
name|broker
init|=
name|pool
operator|.
name|get
argument_list|(
name|Optional
operator|.
name|of
argument_list|(
name|pool
operator|.
name|getSecurityManager
argument_list|()
operator|.
name|getSystemSubject
argument_list|()
argument_list|)
argument_list|)
init|)
block|{
specifier|final
name|XQuery
name|xquery
init|=
name|pool
operator|.
name|getXQueryService
argument_list|()
decl_stmt|;
name|assertNotNull
argument_list|(
name|xquery
argument_list|)
expr_stmt|;
try|try
init|(
specifier|final
name|Txn
name|transaction
init|=
name|transact
operator|.
name|beginTransaction
argument_list|()
init|)
block|{
name|Sequence
name|seq
init|=
name|xquery
operator|.
name|execute
argument_list|(
name|broker
argument_list|,
literal|"//LINE[ft:query(., 'bark')]"
argument_list|,
literal|null
argument_list|)
decl_stmt|;
name|assertNotNull
argument_list|(
name|seq
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|6
argument_list|,
name|seq
operator|.
name|getItemCount
argument_list|()
argument_list|)
expr_stmt|;
name|root
operator|.
name|removeXMLResource
argument_list|(
name|transaction
argument_list|,
name|broker
argument_list|,
name|XmldbURI
operator|.
name|create
argument_list|(
literal|"r_and_j.xml"
argument_list|)
argument_list|)
expr_stmt|;
name|transact
operator|.
name|commit
argument_list|(
name|transaction
argument_list|)
expr_stmt|;
name|seq
operator|=
name|xquery
operator|.
name|execute
argument_list|(
name|broker
argument_list|,
literal|"//LINE[ft:query(., 'bark')]"
argument_list|,
literal|null
argument_list|)
expr_stmt|;
name|assertNotNull
argument_list|(
name|seq
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|3
argument_list|,
name|seq
operator|.
name|getItemCount
argument_list|()
argument_list|)
expr_stmt|;
block|}
try|try
init|(
specifier|final
name|Txn
name|transaction
init|=
name|transact
operator|.
name|beginTransaction
argument_list|()
init|)
block|{
name|root
operator|.
name|removeXMLResource
argument_list|(
name|transaction
argument_list|,
name|broker
argument_list|,
name|XmldbURI
operator|.
name|create
argument_list|(
literal|"hamlet.xml"
argument_list|)
argument_list|)
expr_stmt|;
name|transact
operator|.
name|commit
argument_list|(
name|transaction
argument_list|)
expr_stmt|;
name|Sequence
name|seq
init|=
name|xquery
operator|.
name|execute
argument_list|(
name|broker
argument_list|,
literal|"//LINE[ft:query(., 'bark')]"
argument_list|,
literal|null
argument_list|)
decl_stmt|;
name|assertNotNull
argument_list|(
name|seq
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|seq
operator|.
name|getItemCount
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
block|}
annotation|@
name|Test
specifier|public
name|void
name|removeCollection
parameter_list|()
throws|throws
name|EXistException
throws|,
name|CollectionConfigurationException
throws|,
name|PermissionDeniedException
throws|,
name|SAXException
throws|,
name|TriggerException
throws|,
name|LockException
throws|,
name|IOException
throws|,
name|XPathException
block|{
specifier|final
name|DocumentSet
name|docs
init|=
name|configureAndStore
argument_list|(
name|COLLECTION_CONFIG1
argument_list|,
name|SAMPLES
operator|.
name|getShakespeareXmlSampleNames
argument_list|()
argument_list|)
decl_stmt|;
specifier|final
name|BrokerPool
name|pool
init|=
name|existEmbeddedServer
operator|.
name|getBrokerPool
argument_list|()
decl_stmt|;
specifier|final
name|TransactionManager
name|transact
init|=
name|pool
operator|.
name|getTransactionManager
argument_list|()
decl_stmt|;
try|try
init|(
specifier|final
name|DBBroker
name|broker
init|=
name|pool
operator|.
name|get
argument_list|(
name|Optional
operator|.
name|of
argument_list|(
name|pool
operator|.
name|getSecurityManager
argument_list|()
operator|.
name|getSystemSubject
argument_list|()
argument_list|)
argument_list|)
init|;
specifier|final
name|Txn
name|transaction
init|=
name|transact
operator|.
name|beginTransaction
argument_list|()
init|)
block|{
specifier|final
name|XQuery
name|xquery
init|=
name|pool
operator|.
name|getXQueryService
argument_list|()
decl_stmt|;
name|assertNotNull
argument_list|(
name|xquery
argument_list|)
expr_stmt|;
name|Sequence
name|seq
init|=
name|xquery
operator|.
name|execute
argument_list|(
name|broker
argument_list|,
literal|"//SPEECH[ft:query(LINE, 'love')]"
argument_list|,
literal|null
argument_list|)
decl_stmt|;
name|assertNotNull
argument_list|(
name|seq
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|166
argument_list|,
name|seq
operator|.
name|getItemCount
argument_list|()
argument_list|)
expr_stmt|;
name|broker
operator|.
name|removeCollection
argument_list|(
name|transaction
argument_list|,
name|root
argument_list|)
expr_stmt|;
name|root
operator|=
name|broker
operator|.
name|getOrCreateCollection
argument_list|(
name|transaction
argument_list|,
name|TestConstants
operator|.
name|TEST_COLLECTION_URI
argument_list|)
expr_stmt|;
name|assertNotNull
argument_list|(
name|root
argument_list|)
expr_stmt|;
name|broker
operator|.
name|saveCollection
argument_list|(
name|transaction
argument_list|,
name|root
argument_list|)
expr_stmt|;
name|transact
operator|.
name|commit
argument_list|(
name|transaction
argument_list|)
expr_stmt|;
name|root
operator|=
literal|null
expr_stmt|;
name|checkIndex
argument_list|(
name|docs
argument_list|,
name|broker
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|,
literal|0
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Test
specifier|public
name|void
name|reindex
parameter_list|()
throws|throws
name|EXistException
throws|,
name|CollectionConfigurationException
throws|,
name|PermissionDeniedException
throws|,
name|SAXException
throws|,
name|LockException
throws|,
name|IOException
throws|,
name|QName
operator|.
name|IllegalQNameException
block|{
specifier|final
name|DocumentSet
name|docs
init|=
name|configureAndStore
argument_list|(
name|COLLECTION_CONFIG1
argument_list|,
name|XML1
argument_list|,
literal|"dropDocument.xml"
argument_list|)
decl_stmt|;
specifier|final
name|BrokerPool
name|pool
init|=
name|existEmbeddedServer
operator|.
name|getBrokerPool
argument_list|()
decl_stmt|;
specifier|final
name|TransactionManager
name|transact
init|=
name|pool
operator|.
name|getTransactionManager
argument_list|()
decl_stmt|;
try|try
init|(
specifier|final
name|DBBroker
name|broker
init|=
name|pool
operator|.
name|get
argument_list|(
name|Optional
operator|.
name|of
argument_list|(
name|pool
operator|.
name|getSecurityManager
argument_list|()
operator|.
name|getSystemSubject
argument_list|()
argument_list|)
argument_list|)
init|;
specifier|final
name|Txn
name|transaction
init|=
name|transact
operator|.
name|beginTransaction
argument_list|()
init|)
block|{
name|broker
operator|.
name|reindexCollection
argument_list|(
name|transaction
argument_list|,
name|TestConstants
operator|.
name|TEST_COLLECTION_URI
argument_list|)
expr_stmt|;
name|checkIndex
argument_list|(
name|docs
argument_list|,
name|broker
argument_list|,
operator|new
name|QName
index|[]
block|{
operator|new
name|QName
argument_list|(
literal|"head"
argument_list|)
block|}
argument_list|,
literal|"title"
argument_list|,
literal|1
argument_list|)
expr_stmt|;
specifier|final
name|Occurrences
index|[]
name|o
init|=
name|checkIndex
argument_list|(
name|docs
argument_list|,
name|broker
argument_list|,
operator|new
name|QName
index|[]
block|{
operator|new
name|QName
argument_list|(
literal|"p"
argument_list|)
block|}
argument_list|,
literal|"with"
argument_list|,
literal|1
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|o
index|[
literal|0
index|]
operator|.
name|getOccurrences
argument_list|()
argument_list|)
expr_stmt|;
name|checkIndex
argument_list|(
name|docs
argument_list|,
name|broker
argument_list|,
operator|new
name|QName
index|[]
block|{
operator|new
name|QName
argument_list|(
literal|"hi"
argument_list|)
block|}
argument_list|,
literal|"just"
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|checkIndex
argument_list|(
name|docs
argument_list|,
name|broker
argument_list|,
literal|null
argument_list|,
literal|"in"
argument_list|,
literal|1
argument_list|)
expr_stmt|;
specifier|final
name|QName
name|attrQN
init|=
operator|new
name|QName
argument_list|(
literal|"rend"
argument_list|,
name|XMLConstants
operator|.
name|NULL_NS_URI
argument_list|,
name|ElementValue
operator|.
name|ATTRIBUTE
argument_list|)
decl_stmt|;
name|checkIndex
argument_list|(
name|docs
argument_list|,
name|broker
argument_list|,
operator|new
name|QName
index|[]
block|{
name|attrQN
block|}
argument_list|,
literal|null
argument_list|,
literal|2
argument_list|)
expr_stmt|;
name|checkIndex
argument_list|(
name|docs
argument_list|,
name|broker
argument_list|,
operator|new
name|QName
index|[]
block|{
name|attrQN
block|}
argument_list|,
literal|"center"
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|transaction
operator|.
name|commit
argument_list|()
expr_stmt|;
block|}
block|}
comment|/**      * Remove nodes from different levels of the tree and check if the index is      * correctly updated.      */
annotation|@
name|Test
specifier|public
name|void
name|xupdateRemove
parameter_list|()
throws|throws
name|EXistException
throws|,
name|CollectionConfigurationException
throws|,
name|PermissionDeniedException
throws|,
name|SAXException
throws|,
name|LockException
throws|,
name|IOException
throws|,
name|XPathException
throws|,
name|ParserConfigurationException
throws|,
name|QName
operator|.
name|IllegalQNameException
block|{
specifier|final
name|DocumentSet
name|docs
init|=
name|configureAndStore
argument_list|(
name|COLLECTION_CONFIG2
argument_list|,
name|XML2
argument_list|,
literal|"xupdate.xml"
argument_list|)
decl_stmt|;
specifier|final
name|BrokerPool
name|pool
init|=
name|existEmbeddedServer
operator|.
name|getBrokerPool
argument_list|()
decl_stmt|;
specifier|final
name|TransactionManager
name|transact
init|=
name|pool
operator|.
name|getTransactionManager
argument_list|()
decl_stmt|;
try|try
init|(
specifier|final
name|DBBroker
name|broker
init|=
name|pool
operator|.
name|get
argument_list|(
name|Optional
operator|.
name|of
argument_list|(
name|pool
operator|.
name|getSecurityManager
argument_list|()
operator|.
name|getSystemSubject
argument_list|()
argument_list|)
argument_list|)
init|;
specifier|final
name|Txn
name|transaction
init|=
name|transact
operator|.
name|beginTransaction
argument_list|()
init|)
block|{
name|checkIndex
argument_list|(
name|docs
argument_list|,
name|broker
argument_list|,
operator|new
name|QName
index|[]
block|{
operator|new
name|QName
argument_list|(
literal|"description"
argument_list|)
block|}
argument_list|,
literal|"chair"
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|checkIndex
argument_list|(
name|docs
argument_list|,
name|broker
argument_list|,
operator|new
name|QName
index|[]
block|{
operator|new
name|QName
argument_list|(
literal|"item"
argument_list|)
block|}
argument_list|,
literal|null
argument_list|,
literal|5
argument_list|)
expr_stmt|;
name|checkIndex
argument_list|(
name|docs
argument_list|,
name|broker
argument_list|,
operator|new
name|QName
index|[]
block|{
operator|new
name|QName
argument_list|(
literal|"condition"
argument_list|)
block|}
argument_list|,
literal|null
argument_list|,
literal|2
argument_list|)
expr_stmt|;
specifier|final
name|XQuery
name|xquery
init|=
name|pool
operator|.
name|getXQueryService
argument_list|()
decl_stmt|;
name|assertNotNull
argument_list|(
name|xquery
argument_list|)
expr_stmt|;
name|Sequence
name|seq
init|=
name|xquery
operator|.
name|execute
argument_list|(
name|broker
argument_list|,
literal|"//item[ft:query(description, 'chair')]"
argument_list|,
literal|null
argument_list|)
decl_stmt|;
name|assertNotNull
argument_list|(
name|seq
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|seq
operator|.
name|getItemCount
argument_list|()
argument_list|)
expr_stmt|;
specifier|final
name|XUpdateProcessor
name|proc
init|=
operator|new
name|XUpdateProcessor
argument_list|(
name|broker
argument_list|,
name|docs
argument_list|)
decl_stmt|;
name|assertNotNull
argument_list|(
name|proc
argument_list|)
expr_stmt|;
name|proc
operator|.
name|setBroker
argument_list|(
name|broker
argument_list|)
expr_stmt|;
name|proc
operator|.
name|setDocumentSet
argument_list|(
name|docs
argument_list|)
expr_stmt|;
name|String
name|xupdate
init|=
name|XUPDATE_START
operator|+
literal|"<xu:remove select=\"//item[@id='2']/condition\"/>"
operator|+
name|XUPDATE_END
decl_stmt|;
name|Modification
index|[]
name|modifications
init|=
name|proc
operator|.
name|parse
argument_list|(
operator|new
name|InputSource
argument_list|(
operator|new
name|StringReader
argument_list|(
name|xupdate
argument_list|)
argument_list|)
argument_list|)
decl_stmt|;
name|assertNotNull
argument_list|(
name|modifications
argument_list|)
expr_stmt|;
name|modifications
index|[
literal|0
index|]
operator|.
name|process
argument_list|(
name|transaction
argument_list|)
expr_stmt|;
name|proc
operator|.
name|reset
argument_list|()
expr_stmt|;
name|checkIndex
argument_list|(
name|docs
argument_list|,
name|broker
argument_list|,
operator|new
name|QName
index|[]
block|{
operator|new
name|QName
argument_list|(
literal|"condition"
argument_list|)
block|}
argument_list|,
literal|null
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|checkIndex
argument_list|(
name|docs
argument_list|,
name|broker
argument_list|,
operator|new
name|QName
index|[]
block|{
operator|new
name|QName
argument_list|(
literal|"item"
argument_list|)
block|}
argument_list|,
literal|null
argument_list|,
literal|4
argument_list|)
expr_stmt|;
name|checkIndex
argument_list|(
name|docs
argument_list|,
name|broker
argument_list|,
operator|new
name|QName
index|[]
block|{
operator|new
name|QName
argument_list|(
literal|"condition"
argument_list|)
block|}
argument_list|,
literal|"good"
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|checkIndex
argument_list|(
name|docs
argument_list|,
name|broker
argument_list|,
operator|new
name|QName
index|[]
block|{
operator|new
name|QName
argument_list|(
literal|"item"
argument_list|)
block|}
argument_list|,
literal|"good"
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|Occurrences
name|o
index|[]
init|=
name|checkIndex
argument_list|(
name|docs
argument_list|,
name|broker
argument_list|,
operator|new
name|QName
index|[]
block|{
operator|new
name|QName
argument_list|(
literal|"description"
argument_list|)
block|}
argument_list|,
literal|"table"
argument_list|,
literal|1
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|"table"
argument_list|,
name|o
index|[
literal|0
index|]
operator|.
name|getTerm
argument_list|()
argument_list|)
expr_stmt|;
name|o
operator|=
name|checkIndex
argument_list|(
name|docs
argument_list|,
name|broker
argument_list|,
operator|new
name|QName
index|[]
block|{
operator|new
name|QName
argument_list|(
literal|"description"
argument_list|)
block|}
argument_list|,
literal|"cabinet"
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"cabinet"
argument_list|,
name|o
index|[
literal|0
index|]
operator|.
name|getTerm
argument_list|()
argument_list|)
expr_stmt|;
name|o
operator|=
name|checkIndex
argument_list|(
name|docs
argument_list|,
name|broker
argument_list|,
operator|new
name|QName
index|[]
block|{
operator|new
name|QName
argument_list|(
literal|"item"
argument_list|)
block|}
argument_list|,
literal|"table"
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"table"
argument_list|,
name|o
index|[
literal|0
index|]
operator|.
name|getTerm
argument_list|()
argument_list|)
expr_stmt|;
name|o
operator|=
name|checkIndex
argument_list|(
name|docs
argument_list|,
name|broker
argument_list|,
operator|new
name|QName
index|[]
block|{
operator|new
name|QName
argument_list|(
literal|"item"
argument_list|)
block|}
argument_list|,
literal|"cabinet"
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"cabinet"
argument_list|,
name|o
index|[
literal|0
index|]
operator|.
name|getTerm
argument_list|()
argument_list|)
expr_stmt|;
name|proc
operator|.
name|setBroker
argument_list|(
name|broker
argument_list|)
expr_stmt|;
name|proc
operator|.
name|setDocumentSet
argument_list|(
name|docs
argument_list|)
expr_stmt|;
name|xupdate
operator|=
name|XUPDATE_START
operator|+
literal|"<xu:remove select=\"//item[@id='3']/description/text()\"/>"
operator|+
name|XUPDATE_END
expr_stmt|;
name|modifications
operator|=
name|proc
operator|.
name|parse
argument_list|(
operator|new
name|InputSource
argument_list|(
operator|new
name|StringReader
argument_list|(
name|xupdate
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|assertNotNull
argument_list|(
name|modifications
argument_list|)
expr_stmt|;
name|modifications
index|[
literal|0
index|]
operator|.
name|process
argument_list|(
name|transaction
argument_list|)
expr_stmt|;
name|proc
operator|.
name|reset
argument_list|()
expr_stmt|;
name|proc
operator|.
name|setBroker
argument_list|(
name|broker
argument_list|)
expr_stmt|;
name|proc
operator|.
name|setDocumentSet
argument_list|(
name|docs
argument_list|)
expr_stmt|;
name|xupdate
operator|=
name|XUPDATE_START
operator|+
literal|"<xu:remove select=\"//item[@id='1']\"/>"
operator|+
name|XUPDATE_END
expr_stmt|;
name|modifications
operator|=
name|proc
operator|.
name|parse
argument_list|(
operator|new
name|InputSource
argument_list|(
operator|new
name|StringReader
argument_list|(
name|xupdate
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|assertNotNull
argument_list|(
name|modifications
argument_list|)
expr_stmt|;
name|modifications
index|[
literal|0
index|]
operator|.
name|process
argument_list|(
name|transaction
argument_list|)
expr_stmt|;
name|proc
operator|.
name|reset
argument_list|()
expr_stmt|;
name|o
operator|=
name|checkIndex
argument_list|(
name|docs
argument_list|,
name|broker
argument_list|,
operator|new
name|QName
index|[]
block|{
operator|new
name|QName
argument_list|(
literal|"description"
argument_list|)
block|}
argument_list|,
literal|null
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"table"
argument_list|,
name|o
index|[
literal|0
index|]
operator|.
name|getTerm
argument_list|()
argument_list|)
expr_stmt|;
name|checkIndex
argument_list|(
name|docs
argument_list|,
name|broker
argument_list|,
operator|new
name|QName
index|[]
block|{
operator|new
name|QName
argument_list|(
literal|"description"
argument_list|)
block|}
argument_list|,
literal|"chair"
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|checkIndex
argument_list|(
name|docs
argument_list|,
name|broker
argument_list|,
operator|new
name|QName
index|[]
block|{
operator|new
name|QName
argument_list|(
literal|"item"
argument_list|)
block|}
argument_list|,
literal|"chair"
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|transact
operator|.
name|commit
argument_list|(
name|transaction
argument_list|)
expr_stmt|;
block|}
block|}
comment|/**      * Remove nodes from different levels of the tree and check if the index is      * correctly updated.      */
annotation|@
name|Test
specifier|public
name|void
name|xupdateInsert
parameter_list|()
throws|throws
name|EXistException
throws|,
name|CollectionConfigurationException
throws|,
name|PermissionDeniedException
throws|,
name|SAXException
throws|,
name|LockException
throws|,
name|IOException
throws|,
name|XPathException
throws|,
name|ParserConfigurationException
throws|,
name|QName
operator|.
name|IllegalQNameException
block|{
specifier|final
name|DocumentSet
name|docs
init|=
name|configureAndStore
argument_list|(
name|COLLECTION_CONFIG2
argument_list|,
name|XML2
argument_list|,
literal|"xupdate.xml"
argument_list|)
decl_stmt|;
specifier|final
name|BrokerPool
name|pool
init|=
name|existEmbeddedServer
operator|.
name|getBrokerPool
argument_list|()
decl_stmt|;
specifier|final
name|TransactionManager
name|transact
init|=
name|pool
operator|.
name|getTransactionManager
argument_list|()
decl_stmt|;
try|try
init|(
specifier|final
name|DBBroker
name|broker
init|=
name|pool
operator|.
name|get
argument_list|(
name|Optional
operator|.
name|of
argument_list|(
name|pool
operator|.
name|getSecurityManager
argument_list|()
operator|.
name|getSystemSubject
argument_list|()
argument_list|)
argument_list|)
init|;
specifier|final
name|Txn
name|transaction
init|=
name|transact
operator|.
name|beginTransaction
argument_list|()
init|)
block|{
specifier|final
name|Occurrences
name|occur
index|[]
init|=
name|checkIndex
argument_list|(
name|docs
argument_list|,
name|broker
argument_list|,
operator|new
name|QName
index|[]
block|{
operator|new
name|QName
argument_list|(
literal|"description"
argument_list|)
block|}
argument_list|,
literal|"chair"
argument_list|,
literal|1
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|"chair"
argument_list|,
name|occur
index|[
literal|0
index|]
operator|.
name|getTerm
argument_list|()
argument_list|)
expr_stmt|;
name|checkIndex
argument_list|(
name|docs
argument_list|,
name|broker
argument_list|,
operator|new
name|QName
index|[]
block|{
operator|new
name|QName
argument_list|(
literal|"item"
argument_list|)
block|}
argument_list|,
literal|null
argument_list|,
literal|5
argument_list|)
expr_stmt|;
specifier|final
name|XQuery
name|xquery
init|=
name|pool
operator|.
name|getXQueryService
argument_list|()
decl_stmt|;
name|assertNotNull
argument_list|(
name|xquery
argument_list|)
expr_stmt|;
name|Sequence
name|seq
init|=
name|xquery
operator|.
name|execute
argument_list|(
name|broker
argument_list|,
literal|"//item[ft:query(description, 'chair')]"
argument_list|,
literal|null
argument_list|)
decl_stmt|;
name|assertNotNull
argument_list|(
name|seq
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|seq
operator|.
name|getItemCount
argument_list|()
argument_list|)
expr_stmt|;
comment|// Append to root node
specifier|final
name|XUpdateProcessor
name|proc
init|=
operator|new
name|XUpdateProcessor
argument_list|(
name|broker
argument_list|,
name|docs
argument_list|)
decl_stmt|;
name|assertNotNull
argument_list|(
name|proc
argument_list|)
expr_stmt|;
name|proc
operator|.
name|setBroker
argument_list|(
name|broker
argument_list|)
expr_stmt|;
name|proc
operator|.
name|setDocumentSet
argument_list|(
name|docs
argument_list|)
expr_stmt|;
name|String
name|xupdate
init|=
name|XUPDATE_START
operator|+
literal|"<xu:append select=\"/test\">"
operator|+
literal|"<item id='4'><description>Armchair</description><condition>bad</condition></item>"
operator|+
literal|"</xu:append>"
operator|+
name|XUPDATE_END
decl_stmt|;
name|Modification
index|[]
name|modifications
init|=
name|proc
operator|.
name|parse
argument_list|(
operator|new
name|InputSource
argument_list|(
operator|new
name|StringReader
argument_list|(
name|xupdate
argument_list|)
argument_list|)
argument_list|)
decl_stmt|;
name|assertNotNull
argument_list|(
name|modifications
argument_list|)
expr_stmt|;
name|modifications
index|[
literal|0
index|]
operator|.
name|process
argument_list|(
name|transaction
argument_list|)
expr_stmt|;
name|proc
operator|.
name|reset
argument_list|()
expr_stmt|;
name|Occurrences
name|o
index|[]
init|=
name|checkIndex
argument_list|(
name|docs
argument_list|,
name|broker
argument_list|,
operator|new
name|QName
index|[]
block|{
operator|new
name|QName
argument_list|(
literal|"condition"
argument_list|)
block|}
argument_list|,
literal|null
argument_list|,
literal|2
argument_list|)
decl_stmt|;
name|checkIndex
argument_list|(
name|docs
argument_list|,
name|broker
argument_list|,
operator|new
name|QName
index|[]
block|{
operator|new
name|QName
argument_list|(
literal|"description"
argument_list|)
block|}
argument_list|,
literal|null
argument_list|,
literal|4
argument_list|)
expr_stmt|;
name|checkIndex
argument_list|(
name|docs
argument_list|,
name|broker
argument_list|,
operator|new
name|QName
index|[]
block|{
operator|new
name|QName
argument_list|(
literal|"item"
argument_list|)
block|}
argument_list|,
literal|null
argument_list|,
literal|6
argument_list|)
expr_stmt|;
name|o
operator|=
name|checkIndex
argument_list|(
name|docs
argument_list|,
name|broker
argument_list|,
operator|new
name|QName
index|[]
block|{
operator|new
name|QName
argument_list|(
literal|"condition"
argument_list|)
block|}
argument_list|,
literal|"bad"
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"bad"
argument_list|,
name|o
index|[
literal|0
index|]
operator|.
name|getTerm
argument_list|()
argument_list|)
expr_stmt|;
name|o
operator|=
name|checkIndex
argument_list|(
name|docs
argument_list|,
name|broker
argument_list|,
operator|new
name|QName
index|[]
block|{
operator|new
name|QName
argument_list|(
literal|"description"
argument_list|)
block|}
argument_list|,
literal|"armchair"
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"armchair"
argument_list|,
name|o
index|[
literal|0
index|]
operator|.
name|getTerm
argument_list|()
argument_list|)
expr_stmt|;
name|o
operator|=
name|checkIndex
argument_list|(
name|docs
argument_list|,
name|broker
argument_list|,
operator|new
name|QName
index|[]
block|{
operator|new
name|QName
argument_list|(
literal|"item"
argument_list|)
block|}
argument_list|,
literal|"bad"
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"bad"
argument_list|,
name|o
index|[
literal|0
index|]
operator|.
name|getTerm
argument_list|()
argument_list|)
expr_stmt|;
name|o
operator|=
name|checkIndex
argument_list|(
name|docs
argument_list|,
name|broker
argument_list|,
operator|new
name|QName
index|[]
block|{
operator|new
name|QName
argument_list|(
literal|"item"
argument_list|)
block|}
argument_list|,
literal|"armchair"
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"armchair"
argument_list|,
name|o
index|[
literal|0
index|]
operator|.
name|getTerm
argument_list|()
argument_list|)
expr_stmt|;
comment|// Insert before top element
name|proc
operator|.
name|setBroker
argument_list|(
name|broker
argument_list|)
expr_stmt|;
name|proc
operator|.
name|setDocumentSet
argument_list|(
name|docs
argument_list|)
expr_stmt|;
name|xupdate
operator|=
name|XUPDATE_START
operator|+
literal|"<xu:insert-before select=\"//item[@id = '1']\">"
operator|+
literal|"<item id='0'><description>Wheelchair</description><condition>poor</condition></item>"
operator|+
literal|"</xu:insert-before>"
operator|+
name|XUPDATE_END
expr_stmt|;
name|modifications
operator|=
name|proc
operator|.
name|parse
argument_list|(
operator|new
name|InputSource
argument_list|(
operator|new
name|StringReader
argument_list|(
name|xupdate
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|assertNotNull
argument_list|(
name|modifications
argument_list|)
expr_stmt|;
name|modifications
index|[
literal|0
index|]
operator|.
name|process
argument_list|(
name|transaction
argument_list|)
expr_stmt|;
name|proc
operator|.
name|reset
argument_list|()
expr_stmt|;
name|checkIndex
argument_list|(
name|docs
argument_list|,
name|broker
argument_list|,
operator|new
name|QName
index|[]
block|{
operator|new
name|QName
argument_list|(
literal|"condition"
argument_list|)
block|}
argument_list|,
literal|null
argument_list|,
literal|3
argument_list|)
expr_stmt|;
name|checkIndex
argument_list|(
name|docs
argument_list|,
name|broker
argument_list|,
operator|new
name|QName
index|[]
block|{
operator|new
name|QName
argument_list|(
literal|"description"
argument_list|)
block|}
argument_list|,
literal|null
argument_list|,
literal|5
argument_list|)
expr_stmt|;
name|checkIndex
argument_list|(
name|docs
argument_list|,
name|broker
argument_list|,
operator|new
name|QName
index|[]
block|{
operator|new
name|QName
argument_list|(
literal|"item"
argument_list|)
block|}
argument_list|,
literal|null
argument_list|,
literal|8
argument_list|)
expr_stmt|;
name|o
operator|=
name|checkIndex
argument_list|(
name|docs
argument_list|,
name|broker
argument_list|,
operator|new
name|QName
index|[]
block|{
operator|new
name|QName
argument_list|(
literal|"condition"
argument_list|)
block|}
argument_list|,
literal|"poor"
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"poor"
argument_list|,
name|o
index|[
literal|0
index|]
operator|.
name|getTerm
argument_list|()
argument_list|)
expr_stmt|;
name|o
operator|=
name|checkIndex
argument_list|(
name|docs
argument_list|,
name|broker
argument_list|,
operator|new
name|QName
index|[]
block|{
operator|new
name|QName
argument_list|(
literal|"description"
argument_list|)
block|}
argument_list|,
literal|"wheelchair"
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"wheelchair"
argument_list|,
name|o
index|[
literal|0
index|]
operator|.
name|getTerm
argument_list|()
argument_list|)
expr_stmt|;
name|o
operator|=
name|checkIndex
argument_list|(
name|docs
argument_list|,
name|broker
argument_list|,
operator|new
name|QName
index|[]
block|{
operator|new
name|QName
argument_list|(
literal|"item"
argument_list|)
block|}
argument_list|,
literal|"poor"
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"poor"
argument_list|,
name|o
index|[
literal|0
index|]
operator|.
name|getTerm
argument_list|()
argument_list|)
expr_stmt|;
name|o
operator|=
name|checkIndex
argument_list|(
name|docs
argument_list|,
name|broker
argument_list|,
operator|new
name|QName
index|[]
block|{
operator|new
name|QName
argument_list|(
literal|"item"
argument_list|)
block|}
argument_list|,
literal|"wheelchair"
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"wheelchair"
argument_list|,
name|o
index|[
literal|0
index|]
operator|.
name|getTerm
argument_list|()
argument_list|)
expr_stmt|;
comment|// Insert after element
name|proc
operator|.
name|setBroker
argument_list|(
name|broker
argument_list|)
expr_stmt|;
name|proc
operator|.
name|setDocumentSet
argument_list|(
name|docs
argument_list|)
expr_stmt|;
name|xupdate
operator|=
name|XUPDATE_START
operator|+
literal|"<xu:insert-after select=\"//item[@id = '1']\">"
operator|+
literal|"<item id='1.1'><description>refrigerator</description><condition>perfect</condition></item>"
operator|+
literal|"</xu:insert-after>"
operator|+
name|XUPDATE_END
expr_stmt|;
name|modifications
operator|=
name|proc
operator|.
name|parse
argument_list|(
operator|new
name|InputSource
argument_list|(
operator|new
name|StringReader
argument_list|(
name|xupdate
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|assertNotNull
argument_list|(
name|modifications
argument_list|)
expr_stmt|;
name|modifications
index|[
literal|0
index|]
operator|.
name|process
argument_list|(
name|transaction
argument_list|)
expr_stmt|;
name|proc
operator|.
name|reset
argument_list|()
expr_stmt|;
name|checkIndex
argument_list|(
name|docs
argument_list|,
name|broker
argument_list|,
operator|new
name|QName
index|[]
block|{
operator|new
name|QName
argument_list|(
literal|"condition"
argument_list|)
block|}
argument_list|,
literal|null
argument_list|,
literal|4
argument_list|)
expr_stmt|;
name|checkIndex
argument_list|(
name|docs
argument_list|,
name|broker
argument_list|,
operator|new
name|QName
index|[]
block|{
operator|new
name|QName
argument_list|(
literal|"description"
argument_list|)
block|}
argument_list|,
literal|null
argument_list|,
literal|6
argument_list|)
expr_stmt|;
name|checkIndex
argument_list|(
name|docs
argument_list|,
name|broker
argument_list|,
operator|new
name|QName
index|[]
block|{
operator|new
name|QName
argument_list|(
literal|"item"
argument_list|)
block|}
argument_list|,
literal|null
argument_list|,
literal|10
argument_list|)
expr_stmt|;
name|o
operator|=
name|checkIndex
argument_list|(
name|docs
argument_list|,
name|broker
argument_list|,
operator|new
name|QName
index|[]
block|{
operator|new
name|QName
argument_list|(
literal|"condition"
argument_list|)
block|}
argument_list|,
literal|"perfect"
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"perfect"
argument_list|,
name|o
index|[
literal|0
index|]
operator|.
name|getTerm
argument_list|()
argument_list|)
expr_stmt|;
name|o
operator|=
name|checkIndex
argument_list|(
name|docs
argument_list|,
name|broker
argument_list|,
operator|new
name|QName
index|[]
block|{
operator|new
name|QName
argument_list|(
literal|"description"
argument_list|)
block|}
argument_list|,
literal|"refrigerator"
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"refrigerator"
argument_list|,
name|o
index|[
literal|0
index|]
operator|.
name|getTerm
argument_list|()
argument_list|)
expr_stmt|;
name|o
operator|=
name|checkIndex
argument_list|(
name|docs
argument_list|,
name|broker
argument_list|,
operator|new
name|QName
index|[]
block|{
operator|new
name|QName
argument_list|(
literal|"item"
argument_list|)
block|}
argument_list|,
literal|"perfect"
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"perfect"
argument_list|,
name|o
index|[
literal|0
index|]
operator|.
name|getTerm
argument_list|()
argument_list|)
expr_stmt|;
name|o
operator|=
name|checkIndex
argument_list|(
name|docs
argument_list|,
name|broker
argument_list|,
operator|new
name|QName
index|[]
block|{
operator|new
name|QName
argument_list|(
literal|"item"
argument_list|)
block|}
argument_list|,
literal|"refrigerator"
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"refrigerator"
argument_list|,
name|o
index|[
literal|0
index|]
operator|.
name|getTerm
argument_list|()
argument_list|)
expr_stmt|;
name|proc
operator|.
name|setBroker
argument_list|(
name|broker
argument_list|)
expr_stmt|;
name|proc
operator|.
name|setDocumentSet
argument_list|(
name|docs
argument_list|)
expr_stmt|;
name|xupdate
operator|=
name|XUPDATE_START
operator|+
literal|"<xu:insert-after select=\"//item[@id = '1']/description\">"
operator|+
literal|"<condition>average</condition>"
operator|+
literal|"</xu:insert-after>"
operator|+
name|XUPDATE_END
expr_stmt|;
name|modifications
operator|=
name|proc
operator|.
name|parse
argument_list|(
operator|new
name|InputSource
argument_list|(
operator|new
name|StringReader
argument_list|(
name|xupdate
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|assertNotNull
argument_list|(
name|modifications
argument_list|)
expr_stmt|;
name|modifications
index|[
literal|0
index|]
operator|.
name|process
argument_list|(
name|transaction
argument_list|)
expr_stmt|;
name|proc
operator|.
name|reset
argument_list|()
expr_stmt|;
name|checkIndex
argument_list|(
name|docs
argument_list|,
name|broker
argument_list|,
operator|new
name|QName
index|[]
block|{
operator|new
name|QName
argument_list|(
literal|"condition"
argument_list|)
block|}
argument_list|,
literal|null
argument_list|,
literal|5
argument_list|)
expr_stmt|;
name|checkIndex
argument_list|(
name|docs
argument_list|,
name|broker
argument_list|,
operator|new
name|QName
index|[]
block|{
operator|new
name|QName
argument_list|(
literal|"item"
argument_list|)
block|}
argument_list|,
literal|null
argument_list|,
literal|11
argument_list|)
expr_stmt|;
name|o
operator|=
name|checkIndex
argument_list|(
name|docs
argument_list|,
name|broker
argument_list|,
operator|new
name|QName
index|[]
block|{
operator|new
name|QName
argument_list|(
literal|"condition"
argument_list|)
block|}
argument_list|,
literal|"average"
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"average"
argument_list|,
name|o
index|[
literal|0
index|]
operator|.
name|getTerm
argument_list|()
argument_list|)
expr_stmt|;
name|o
operator|=
name|checkIndex
argument_list|(
name|docs
argument_list|,
name|broker
argument_list|,
operator|new
name|QName
index|[]
block|{
operator|new
name|QName
argument_list|(
literal|"item"
argument_list|)
block|}
argument_list|,
literal|"average"
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"average"
argument_list|,
name|o
index|[
literal|0
index|]
operator|.
name|getTerm
argument_list|()
argument_list|)
expr_stmt|;
comment|// Insert before nested element
name|proc
operator|.
name|setBroker
argument_list|(
name|broker
argument_list|)
expr_stmt|;
name|proc
operator|.
name|setDocumentSet
argument_list|(
name|docs
argument_list|)
expr_stmt|;
name|xupdate
operator|=
name|XUPDATE_START
operator|+
literal|"<xu:insert-before select=\"//item[@id = '1']/description\">"
operator|+
literal|"<condition>awesome</condition>"
operator|+
literal|"</xu:insert-before>"
operator|+
name|XUPDATE_END
expr_stmt|;
name|modifications
operator|=
name|proc
operator|.
name|parse
argument_list|(
operator|new
name|InputSource
argument_list|(
operator|new
name|StringReader
argument_list|(
name|xupdate
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|assertNotNull
argument_list|(
name|modifications
argument_list|)
expr_stmt|;
name|modifications
index|[
literal|0
index|]
operator|.
name|process
argument_list|(
name|transaction
argument_list|)
expr_stmt|;
name|proc
operator|.
name|reset
argument_list|()
expr_stmt|;
name|checkIndex
argument_list|(
name|docs
argument_list|,
name|broker
argument_list|,
operator|new
name|QName
index|[]
block|{
operator|new
name|QName
argument_list|(
literal|"condition"
argument_list|)
block|}
argument_list|,
literal|null
argument_list|,
literal|6
argument_list|)
expr_stmt|;
name|checkIndex
argument_list|(
name|docs
argument_list|,
name|broker
argument_list|,
operator|new
name|QName
index|[]
block|{
operator|new
name|QName
argument_list|(
literal|"item"
argument_list|)
block|}
argument_list|,
literal|null
argument_list|,
literal|12
argument_list|)
expr_stmt|;
name|o
operator|=
name|checkIndex
argument_list|(
name|docs
argument_list|,
name|broker
argument_list|,
operator|new
name|QName
index|[]
block|{
operator|new
name|QName
argument_list|(
literal|"condition"
argument_list|)
block|}
argument_list|,
literal|"awesome"
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"awesome"
argument_list|,
name|o
index|[
literal|0
index|]
operator|.
name|getTerm
argument_list|()
argument_list|)
expr_stmt|;
name|o
operator|=
name|checkIndex
argument_list|(
name|docs
argument_list|,
name|broker
argument_list|,
operator|new
name|QName
index|[]
block|{
operator|new
name|QName
argument_list|(
literal|"item"
argument_list|)
block|}
argument_list|,
literal|"awesome"
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"awesome"
argument_list|,
name|o
index|[
literal|0
index|]
operator|.
name|getTerm
argument_list|()
argument_list|)
expr_stmt|;
comment|// Overwrite attribute
name|proc
operator|.
name|setBroker
argument_list|(
name|broker
argument_list|)
expr_stmt|;
name|proc
operator|.
name|setDocumentSet
argument_list|(
name|docs
argument_list|)
expr_stmt|;
name|xupdate
operator|=
name|XUPDATE_START
operator|+
literal|"<xu:append select=\"//item[@id = '1']\">"
operator|+
literal|"<xu:attribute name=\"attr\">abc</xu:attribute>"
operator|+
literal|"</xu:append>"
operator|+
name|XUPDATE_END
expr_stmt|;
name|modifications
operator|=
name|proc
operator|.
name|parse
argument_list|(
operator|new
name|InputSource
argument_list|(
operator|new
name|StringReader
argument_list|(
name|xupdate
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|assertNotNull
argument_list|(
name|modifications
argument_list|)
expr_stmt|;
name|modifications
index|[
literal|0
index|]
operator|.
name|process
argument_list|(
name|transaction
argument_list|)
expr_stmt|;
name|proc
operator|.
name|reset
argument_list|()
expr_stmt|;
name|QName
name|qnattr
index|[]
init|=
block|{
operator|new
name|QName
argument_list|(
literal|"attr"
argument_list|,
name|XMLConstants
operator|.
name|NULL_NS_URI
argument_list|,
name|XMLConstants
operator|.
name|DEFAULT_NS_PREFIX
argument_list|,
name|ElementValue
operator|.
name|ATTRIBUTE
argument_list|)
block|}
decl_stmt|;
name|o
operator|=
name|checkIndex
argument_list|(
name|docs
argument_list|,
name|broker
argument_list|,
name|qnattr
argument_list|,
literal|null
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"abc"
argument_list|,
name|o
index|[
literal|0
index|]
operator|.
name|getTerm
argument_list|()
argument_list|)
expr_stmt|;
name|checkIndex
argument_list|(
name|docs
argument_list|,
name|broker
argument_list|,
name|qnattr
argument_list|,
literal|"attribute"
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|transact
operator|.
name|commit
argument_list|(
name|transaction
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Test
specifier|public
name|void
name|xupdateUpdate
parameter_list|()
throws|throws
name|EXistException
throws|,
name|CollectionConfigurationException
throws|,
name|PermissionDeniedException
throws|,
name|SAXException
throws|,
name|LockException
throws|,
name|IOException
throws|,
name|XPathException
throws|,
name|ParserConfigurationException
throws|,
name|QName
operator|.
name|IllegalQNameException
block|{
specifier|final
name|DocumentSet
name|docs
init|=
name|configureAndStore
argument_list|(
name|COLLECTION_CONFIG2
argument_list|,
name|XML2
argument_list|,
literal|"xupdate.xml"
argument_list|)
decl_stmt|;
specifier|final
name|BrokerPool
name|pool
init|=
name|existEmbeddedServer
operator|.
name|getBrokerPool
argument_list|()
decl_stmt|;
specifier|final
name|TransactionManager
name|transact
init|=
name|pool
operator|.
name|getTransactionManager
argument_list|()
decl_stmt|;
try|try
init|(
specifier|final
name|DBBroker
name|broker
init|=
name|pool
operator|.
name|get
argument_list|(
name|Optional
operator|.
name|of
argument_list|(
name|pool
operator|.
name|getSecurityManager
argument_list|()
operator|.
name|getSystemSubject
argument_list|()
argument_list|)
argument_list|)
init|;
specifier|final
name|Txn
name|transaction
init|=
name|transact
operator|.
name|beginTransaction
argument_list|()
init|)
block|{
specifier|final
name|Occurrences
name|occur
index|[]
init|=
name|checkIndex
argument_list|(
name|docs
argument_list|,
name|broker
argument_list|,
operator|new
name|QName
index|[]
block|{
operator|new
name|QName
argument_list|(
literal|"description"
argument_list|)
block|}
argument_list|,
literal|"chair"
argument_list|,
literal|1
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|"chair"
argument_list|,
name|occur
index|[
literal|0
index|]
operator|.
name|getTerm
argument_list|()
argument_list|)
expr_stmt|;
name|checkIndex
argument_list|(
name|docs
argument_list|,
name|broker
argument_list|,
operator|new
name|QName
index|[]
block|{
operator|new
name|QName
argument_list|(
literal|"item"
argument_list|)
block|}
argument_list|,
literal|null
argument_list|,
literal|5
argument_list|)
expr_stmt|;
specifier|final
name|XQuery
name|xquery
init|=
name|pool
operator|.
name|getXQueryService
argument_list|()
decl_stmt|;
name|assertNotNull
argument_list|(
name|xquery
argument_list|)
expr_stmt|;
name|Sequence
name|seq
init|=
name|xquery
operator|.
name|execute
argument_list|(
name|broker
argument_list|,
literal|"//item[ft:query(description, 'chair')]"
argument_list|,
literal|null
argument_list|)
decl_stmt|;
name|assertNotNull
argument_list|(
name|seq
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|seq
operator|.
name|getItemCount
argument_list|()
argument_list|)
expr_stmt|;
comment|// Update element content
specifier|final
name|XUpdateProcessor
name|proc
init|=
operator|new
name|XUpdateProcessor
argument_list|(
name|broker
argument_list|,
name|docs
argument_list|)
decl_stmt|;
name|proc
operator|.
name|setBroker
argument_list|(
name|broker
argument_list|)
expr_stmt|;
name|proc
operator|.
name|setDocumentSet
argument_list|(
name|docs
argument_list|)
expr_stmt|;
name|String
name|xupdate
init|=
name|XUPDATE_START
operator|+
literal|"<xu:update select=\"//item[@id = '1']/description\">wardrobe</xu:update>"
operator|+
name|XUPDATE_END
decl_stmt|;
name|Modification
index|[]
name|modifications
init|=
name|proc
operator|.
name|parse
argument_list|(
operator|new
name|InputSource
argument_list|(
operator|new
name|StringReader
argument_list|(
name|xupdate
argument_list|)
argument_list|)
argument_list|)
decl_stmt|;
name|assertNotNull
argument_list|(
name|modifications
argument_list|)
expr_stmt|;
name|modifications
index|[
literal|0
index|]
operator|.
name|process
argument_list|(
name|transaction
argument_list|)
expr_stmt|;
name|proc
operator|.
name|reset
argument_list|()
expr_stmt|;
name|checkIndex
argument_list|(
name|docs
argument_list|,
name|broker
argument_list|,
operator|new
name|QName
index|[]
block|{
operator|new
name|QName
argument_list|(
literal|"description"
argument_list|)
block|}
argument_list|,
literal|null
argument_list|,
literal|3
argument_list|)
expr_stmt|;
name|checkIndex
argument_list|(
name|docs
argument_list|,
name|broker
argument_list|,
operator|new
name|QName
index|[]
block|{
operator|new
name|QName
argument_list|(
literal|"item"
argument_list|)
block|}
argument_list|,
literal|null
argument_list|,
literal|5
argument_list|)
expr_stmt|;
name|checkIndex
argument_list|(
name|docs
argument_list|,
name|broker
argument_list|,
operator|new
name|QName
index|[]
block|{
operator|new
name|QName
argument_list|(
literal|"description"
argument_list|)
block|}
argument_list|,
literal|"chair"
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|checkIndex
argument_list|(
name|docs
argument_list|,
name|broker
argument_list|,
operator|new
name|QName
index|[]
block|{
operator|new
name|QName
argument_list|(
literal|"item"
argument_list|)
block|}
argument_list|,
literal|"chair"
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|Occurrences
name|o
index|[]
init|=
name|checkIndex
argument_list|(
name|docs
argument_list|,
name|broker
argument_list|,
operator|new
name|QName
index|[]
block|{
operator|new
name|QName
argument_list|(
literal|"description"
argument_list|)
block|}
argument_list|,
literal|"wardrobe"
argument_list|,
literal|1
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|"wardrobe"
argument_list|,
name|o
index|[
literal|0
index|]
operator|.
name|getTerm
argument_list|()
argument_list|)
expr_stmt|;
comment|// Update text node
name|proc
operator|.
name|setBroker
argument_list|(
name|broker
argument_list|)
expr_stmt|;
name|proc
operator|.
name|setDocumentSet
argument_list|(
name|docs
argument_list|)
expr_stmt|;
name|xupdate
operator|=
name|XUPDATE_START
operator|+
literal|"<xu:update select=\"//item[@id = '1']/description/text()\">Wheelchair</xu:update>"
operator|+
name|XUPDATE_END
expr_stmt|;
name|modifications
operator|=
name|proc
operator|.
name|parse
argument_list|(
operator|new
name|InputSource
argument_list|(
operator|new
name|StringReader
argument_list|(
name|xupdate
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|assertNotNull
argument_list|(
name|modifications
argument_list|)
expr_stmt|;
name|modifications
index|[
literal|0
index|]
operator|.
name|process
argument_list|(
name|transaction
argument_list|)
expr_stmt|;
name|proc
operator|.
name|reset
argument_list|()
expr_stmt|;
name|checkIndex
argument_list|(
name|docs
argument_list|,
name|broker
argument_list|,
operator|new
name|QName
index|[]
block|{
operator|new
name|QName
argument_list|(
literal|"description"
argument_list|)
block|}
argument_list|,
literal|null
argument_list|,
literal|3
argument_list|)
expr_stmt|;
name|checkIndex
argument_list|(
name|docs
argument_list|,
name|broker
argument_list|,
operator|new
name|QName
index|[]
block|{
operator|new
name|QName
argument_list|(
literal|"item"
argument_list|)
block|}
argument_list|,
literal|null
argument_list|,
literal|5
argument_list|)
expr_stmt|;
name|checkIndex
argument_list|(
name|docs
argument_list|,
name|broker
argument_list|,
operator|new
name|QName
index|[]
block|{
operator|new
name|QName
argument_list|(
literal|"description"
argument_list|)
block|}
argument_list|,
literal|"wardrobe"
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|checkIndex
argument_list|(
name|docs
argument_list|,
name|broker
argument_list|,
operator|new
name|QName
index|[]
block|{
operator|new
name|QName
argument_list|(
literal|"item"
argument_list|)
block|}
argument_list|,
literal|"wardrobe"
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|o
operator|=
name|checkIndex
argument_list|(
name|docs
argument_list|,
name|broker
argument_list|,
operator|new
name|QName
index|[]
block|{
operator|new
name|QName
argument_list|(
literal|"description"
argument_list|)
block|}
argument_list|,
literal|"wheelchair"
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"wheelchair"
argument_list|,
name|o
index|[
literal|0
index|]
operator|.
name|getTerm
argument_list|()
argument_list|)
expr_stmt|;
comment|// Update attribute value
name|proc
operator|.
name|setBroker
argument_list|(
name|broker
argument_list|)
expr_stmt|;
name|proc
operator|.
name|setDocumentSet
argument_list|(
name|docs
argument_list|)
expr_stmt|;
name|xupdate
operator|=
name|XUPDATE_START
operator|+
literal|"<xu:update select=\"//item[@id = '1']/@attr\">abc</xu:update>"
operator|+
name|XUPDATE_END
expr_stmt|;
name|modifications
operator|=
name|proc
operator|.
name|parse
argument_list|(
operator|new
name|InputSource
argument_list|(
operator|new
name|StringReader
argument_list|(
name|xupdate
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|assertNotNull
argument_list|(
name|modifications
argument_list|)
expr_stmt|;
name|modifications
index|[
literal|0
index|]
operator|.
name|process
argument_list|(
name|transaction
argument_list|)
expr_stmt|;
name|proc
operator|.
name|reset
argument_list|()
expr_stmt|;
specifier|final
name|QName
name|qnattr
index|[]
init|=
block|{
operator|new
name|QName
argument_list|(
literal|"attr"
argument_list|,
name|XMLConstants
operator|.
name|NULL_NS_URI
argument_list|,
name|XMLConstants
operator|.
name|DEFAULT_NS_PREFIX
argument_list|,
name|ElementValue
operator|.
name|ATTRIBUTE
argument_list|)
block|}
decl_stmt|;
name|o
operator|=
name|checkIndex
argument_list|(
name|docs
argument_list|,
name|broker
argument_list|,
name|qnattr
argument_list|,
literal|null
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"abc"
argument_list|,
name|o
index|[
literal|0
index|]
operator|.
name|getTerm
argument_list|()
argument_list|)
expr_stmt|;
name|checkIndex
argument_list|(
name|docs
argument_list|,
name|broker
argument_list|,
name|qnattr
argument_list|,
literal|"attribute"
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|transact
operator|.
name|commit
argument_list|(
name|transaction
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Test
specifier|public
name|void
name|xupdateReplace
parameter_list|()
throws|throws
name|EXistException
throws|,
name|CollectionConfigurationException
throws|,
name|PermissionDeniedException
throws|,
name|SAXException
throws|,
name|LockException
throws|,
name|IOException
throws|,
name|XPathException
throws|,
name|ParserConfigurationException
throws|,
name|QName
operator|.
name|IllegalQNameException
block|{
specifier|final
name|DocumentSet
name|docs
init|=
name|configureAndStore
argument_list|(
name|COLLECTION_CONFIG2
argument_list|,
name|XML2
argument_list|,
literal|"xupdate.xml"
argument_list|)
decl_stmt|;
specifier|final
name|BrokerPool
name|pool
init|=
name|existEmbeddedServer
operator|.
name|getBrokerPool
argument_list|()
decl_stmt|;
specifier|final
name|TransactionManager
name|transact
init|=
name|pool
operator|.
name|getTransactionManager
argument_list|()
decl_stmt|;
try|try
init|(
specifier|final
name|DBBroker
name|broker
init|=
name|pool
operator|.
name|get
argument_list|(
name|Optional
operator|.
name|of
argument_list|(
name|pool
operator|.
name|getSecurityManager
argument_list|()
operator|.
name|getSystemSubject
argument_list|()
argument_list|)
argument_list|)
init|;
specifier|final
name|Txn
name|transaction
init|=
name|transact
operator|.
name|beginTransaction
argument_list|()
init|)
block|{
specifier|final
name|Occurrences
name|occur
index|[]
init|=
name|checkIndex
argument_list|(
name|docs
argument_list|,
name|broker
argument_list|,
operator|new
name|QName
index|[]
block|{
operator|new
name|QName
argument_list|(
literal|"description"
argument_list|)
block|}
argument_list|,
literal|"chair"
argument_list|,
literal|1
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|"chair"
argument_list|,
name|occur
index|[
literal|0
index|]
operator|.
name|getTerm
argument_list|()
argument_list|)
expr_stmt|;
name|checkIndex
argument_list|(
name|docs
argument_list|,
name|broker
argument_list|,
operator|new
name|QName
index|[]
block|{
operator|new
name|QName
argument_list|(
literal|"item"
argument_list|)
block|}
argument_list|,
literal|null
argument_list|,
literal|5
argument_list|)
expr_stmt|;
specifier|final
name|XQuery
name|xquery
init|=
name|pool
operator|.
name|getXQueryService
argument_list|()
decl_stmt|;
name|assertNotNull
argument_list|(
name|xquery
argument_list|)
expr_stmt|;
name|Sequence
name|seq
init|=
name|xquery
operator|.
name|execute
argument_list|(
name|broker
argument_list|,
literal|"//item[ft:query(description, 'chair')]"
argument_list|,
literal|null
argument_list|)
decl_stmt|;
name|assertNotNull
argument_list|(
name|seq
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|seq
operator|.
name|getItemCount
argument_list|()
argument_list|)
expr_stmt|;
specifier|final
name|XUpdateProcessor
name|proc
init|=
operator|new
name|XUpdateProcessor
argument_list|(
name|broker
argument_list|,
name|docs
argument_list|)
decl_stmt|;
name|assertNotNull
argument_list|(
name|proc
argument_list|)
expr_stmt|;
name|proc
operator|.
name|setBroker
argument_list|(
name|broker
argument_list|)
expr_stmt|;
name|proc
operator|.
name|setDocumentSet
argument_list|(
name|docs
argument_list|)
expr_stmt|;
name|String
name|xupdate
init|=
name|XUPDATE_START
operator|+
literal|"<xu:replace select=\"//item[@id = '1']\">"
operator|+
literal|"<item id='4'><description>Wheelchair</description><condition>poor</condition></item>"
operator|+
literal|"</xu:replace>"
operator|+
name|XUPDATE_END
decl_stmt|;
name|Modification
index|[]
name|modifications
init|=
name|proc
operator|.
name|parse
argument_list|(
operator|new
name|InputSource
argument_list|(
operator|new
name|StringReader
argument_list|(
name|xupdate
argument_list|)
argument_list|)
argument_list|)
decl_stmt|;
name|assertNotNull
argument_list|(
name|modifications
argument_list|)
expr_stmt|;
name|modifications
index|[
literal|0
index|]
operator|.
name|process
argument_list|(
name|transaction
argument_list|)
expr_stmt|;
name|proc
operator|.
name|reset
argument_list|()
expr_stmt|;
name|checkIndex
argument_list|(
name|docs
argument_list|,
name|broker
argument_list|,
operator|new
name|QName
index|[]
block|{
operator|new
name|QName
argument_list|(
literal|"description"
argument_list|)
block|}
argument_list|,
literal|null
argument_list|,
literal|3
argument_list|)
expr_stmt|;
name|checkIndex
argument_list|(
name|docs
argument_list|,
name|broker
argument_list|,
operator|new
name|QName
index|[]
block|{
operator|new
name|QName
argument_list|(
literal|"condition"
argument_list|)
block|}
argument_list|,
literal|null
argument_list|,
literal|3
argument_list|)
expr_stmt|;
name|checkIndex
argument_list|(
name|docs
argument_list|,
name|broker
argument_list|,
operator|new
name|QName
index|[]
block|{
operator|new
name|QName
argument_list|(
literal|"item"
argument_list|)
block|}
argument_list|,
literal|null
argument_list|,
literal|6
argument_list|)
expr_stmt|;
name|checkIndex
argument_list|(
name|docs
argument_list|,
name|broker
argument_list|,
operator|new
name|QName
index|[]
block|{
operator|new
name|QName
argument_list|(
literal|"description"
argument_list|)
block|}
argument_list|,
literal|"chair"
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|checkIndex
argument_list|(
name|docs
argument_list|,
name|broker
argument_list|,
operator|new
name|QName
index|[]
block|{
operator|new
name|QName
argument_list|(
literal|"item"
argument_list|)
block|}
argument_list|,
literal|"chair"
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|Occurrences
name|o
index|[]
init|=
name|checkIndex
argument_list|(
name|docs
argument_list|,
name|broker
argument_list|,
operator|new
name|QName
index|[]
block|{
operator|new
name|QName
argument_list|(
literal|"description"
argument_list|)
block|}
argument_list|,
literal|"wheelchair"
argument_list|,
literal|1
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|"wheelchair"
argument_list|,
name|o
index|[
literal|0
index|]
operator|.
name|getTerm
argument_list|()
argument_list|)
expr_stmt|;
name|o
operator|=
name|checkIndex
argument_list|(
name|docs
argument_list|,
name|broker
argument_list|,
operator|new
name|QName
index|[]
block|{
operator|new
name|QName
argument_list|(
literal|"condition"
argument_list|)
block|}
argument_list|,
literal|"poor"
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"poor"
argument_list|,
name|o
index|[
literal|0
index|]
operator|.
name|getTerm
argument_list|()
argument_list|)
expr_stmt|;
name|o
operator|=
name|checkIndex
argument_list|(
name|docs
argument_list|,
name|broker
argument_list|,
operator|new
name|QName
index|[]
block|{
operator|new
name|QName
argument_list|(
literal|"item"
argument_list|)
block|}
argument_list|,
literal|"wheelchair"
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"wheelchair"
argument_list|,
name|o
index|[
literal|0
index|]
operator|.
name|getTerm
argument_list|()
argument_list|)
expr_stmt|;
name|o
operator|=
name|checkIndex
argument_list|(
name|docs
argument_list|,
name|broker
argument_list|,
operator|new
name|QName
index|[]
block|{
operator|new
name|QName
argument_list|(
literal|"item"
argument_list|)
block|}
argument_list|,
literal|"poor"
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"poor"
argument_list|,
name|o
index|[
literal|0
index|]
operator|.
name|getTerm
argument_list|()
argument_list|)
expr_stmt|;
name|proc
operator|.
name|setBroker
argument_list|(
name|broker
argument_list|)
expr_stmt|;
name|proc
operator|.
name|setDocumentSet
argument_list|(
name|docs
argument_list|)
expr_stmt|;
name|xupdate
operator|=
name|XUPDATE_START
operator|+
literal|"<xu:replace select=\"//item[@id = '4']/description\">"
operator|+
literal|"<description>Armchair</description>"
operator|+
literal|"</xu:replace>"
operator|+
name|XUPDATE_END
expr_stmt|;
name|modifications
operator|=
name|proc
operator|.
name|parse
argument_list|(
operator|new
name|InputSource
argument_list|(
operator|new
name|StringReader
argument_list|(
name|xupdate
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|assertNotNull
argument_list|(
name|modifications
argument_list|)
expr_stmt|;
name|modifications
index|[
literal|0
index|]
operator|.
name|process
argument_list|(
name|transaction
argument_list|)
expr_stmt|;
name|proc
operator|.
name|reset
argument_list|()
expr_stmt|;
name|checkIndex
argument_list|(
name|docs
argument_list|,
name|broker
argument_list|,
operator|new
name|QName
index|[]
block|{
operator|new
name|QName
argument_list|(
literal|"description"
argument_list|)
block|}
argument_list|,
literal|null
argument_list|,
literal|3
argument_list|)
expr_stmt|;
name|checkIndex
argument_list|(
name|docs
argument_list|,
name|broker
argument_list|,
operator|new
name|QName
index|[]
block|{
operator|new
name|QName
argument_list|(
literal|"item"
argument_list|)
block|}
argument_list|,
literal|null
argument_list|,
literal|6
argument_list|)
expr_stmt|;
name|checkIndex
argument_list|(
name|docs
argument_list|,
name|broker
argument_list|,
operator|new
name|QName
index|[]
block|{
operator|new
name|QName
argument_list|(
literal|"description"
argument_list|)
block|}
argument_list|,
literal|"wheelchair"
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|checkIndex
argument_list|(
name|docs
argument_list|,
name|broker
argument_list|,
operator|new
name|QName
index|[]
block|{
operator|new
name|QName
argument_list|(
literal|"item"
argument_list|)
block|}
argument_list|,
literal|"wheelchair"
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|o
operator|=
name|checkIndex
argument_list|(
name|docs
argument_list|,
name|broker
argument_list|,
operator|new
name|QName
index|[]
block|{
operator|new
name|QName
argument_list|(
literal|"description"
argument_list|)
block|}
argument_list|,
literal|"armchair"
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"armchair"
argument_list|,
name|o
index|[
literal|0
index|]
operator|.
name|getTerm
argument_list|()
argument_list|)
expr_stmt|;
name|o
operator|=
name|checkIndex
argument_list|(
name|docs
argument_list|,
name|broker
argument_list|,
operator|new
name|QName
index|[]
block|{
operator|new
name|QName
argument_list|(
literal|"item"
argument_list|)
block|}
argument_list|,
literal|"armchair"
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"armchair"
argument_list|,
name|o
index|[
literal|0
index|]
operator|.
name|getTerm
argument_list|()
argument_list|)
expr_stmt|;
name|transact
operator|.
name|commit
argument_list|(
name|transaction
argument_list|)
expr_stmt|;
block|}
block|}
specifier|private
name|DocumentSet
name|configureAndStore
parameter_list|(
specifier|final
name|String
name|configuration
parameter_list|,
specifier|final
name|String
name|data
parameter_list|,
specifier|final
name|String
name|docName
parameter_list|)
throws|throws
name|EXistException
throws|,
name|CollectionConfigurationException
throws|,
name|PermissionDeniedException
throws|,
name|SAXException
throws|,
name|TriggerException
throws|,
name|LockException
throws|,
name|IOException
block|{
specifier|final
name|MutableDocumentSet
name|docs
init|=
operator|new
name|DefaultDocumentSet
argument_list|()
decl_stmt|;
specifier|final
name|BrokerPool
name|pool
init|=
name|existEmbeddedServer
operator|.
name|getBrokerPool
argument_list|()
decl_stmt|;
specifier|final
name|TransactionManager
name|transact
init|=
name|pool
operator|.
name|getTransactionManager
argument_list|()
decl_stmt|;
try|try
init|(
specifier|final
name|DBBroker
name|broker
init|=
name|pool
operator|.
name|get
argument_list|(
name|Optional
operator|.
name|of
argument_list|(
name|pool
operator|.
name|getSecurityManager
argument_list|()
operator|.
name|getSystemSubject
argument_list|()
argument_list|)
argument_list|)
init|;
specifier|final
name|Txn
name|transaction
init|=
name|transact
operator|.
name|beginTransaction
argument_list|()
init|)
block|{
if|if
condition|(
name|configuration
operator|!=
literal|null
condition|)
block|{
specifier|final
name|CollectionConfigurationManager
name|mgr
init|=
name|pool
operator|.
name|getConfigurationManager
argument_list|()
decl_stmt|;
name|mgr
operator|.
name|addConfiguration
argument_list|(
name|transaction
argument_list|,
name|broker
argument_list|,
name|root
argument_list|,
name|configuration
argument_list|)
expr_stmt|;
block|}
specifier|final
name|IndexInfo
name|info
init|=
name|root
operator|.
name|validateXMLResource
argument_list|(
name|transaction
argument_list|,
name|broker
argument_list|,
name|XmldbURI
operator|.
name|create
argument_list|(
name|docName
argument_list|)
argument_list|,
name|data
argument_list|)
decl_stmt|;
name|assertNotNull
argument_list|(
name|info
argument_list|)
expr_stmt|;
name|root
operator|.
name|store
argument_list|(
name|transaction
argument_list|,
name|broker
argument_list|,
name|info
argument_list|,
name|data
argument_list|)
expr_stmt|;
name|docs
operator|.
name|add
argument_list|(
name|info
operator|.
name|getDocument
argument_list|()
argument_list|)
expr_stmt|;
name|transact
operator|.
name|commit
argument_list|(
name|transaction
argument_list|)
expr_stmt|;
block|}
return|return
name|docs
return|;
block|}
specifier|private
name|DocumentSet
name|configureAndStore
parameter_list|(
name|String
name|configuration
parameter_list|,
specifier|final
name|String
index|[]
name|sampleNames
parameter_list|)
throws|throws
name|EXistException
throws|,
name|CollectionConfigurationException
throws|,
name|PermissionDeniedException
throws|,
name|SAXException
throws|,
name|TriggerException
throws|,
name|LockException
throws|,
name|IOException
block|{
specifier|final
name|MutableDocumentSet
name|docs
init|=
operator|new
name|DefaultDocumentSet
argument_list|()
decl_stmt|;
specifier|final
name|BrokerPool
name|pool
init|=
name|existEmbeddedServer
operator|.
name|getBrokerPool
argument_list|()
decl_stmt|;
specifier|final
name|TransactionManager
name|transact
init|=
name|pool
operator|.
name|getTransactionManager
argument_list|()
decl_stmt|;
try|try
init|(
specifier|final
name|DBBroker
name|broker
init|=
name|pool
operator|.
name|get
argument_list|(
name|Optional
operator|.
name|of
argument_list|(
name|pool
operator|.
name|getSecurityManager
argument_list|()
operator|.
name|getSystemSubject
argument_list|()
argument_list|)
argument_list|)
init|;
specifier|final
name|Txn
name|transaction
init|=
name|transact
operator|.
name|beginTransaction
argument_list|()
init|)
block|{
if|if
condition|(
name|configuration
operator|!=
literal|null
condition|)
block|{
specifier|final
name|CollectionConfigurationManager
name|mgr
init|=
name|pool
operator|.
name|getConfigurationManager
argument_list|()
decl_stmt|;
name|mgr
operator|.
name|addConfiguration
argument_list|(
name|transaction
argument_list|,
name|broker
argument_list|,
name|root
argument_list|,
name|configuration
argument_list|)
expr_stmt|;
block|}
for|for
control|(
specifier|final
name|String
name|sampleName
range|:
name|sampleNames
control|)
block|{
try|try
init|(
specifier|final
name|InputStream
name|is
init|=
name|SAMPLES
operator|.
name|getShakespeareSample
argument_list|(
name|sampleName
argument_list|)
init|)
block|{
specifier|final
name|String
name|sample
init|=
name|InputStreamUtil
operator|.
name|readString
argument_list|(
name|is
argument_list|,
name|UTF_8
argument_list|)
decl_stmt|;
specifier|final
name|IndexInfo
name|info
init|=
name|root
operator|.
name|validateXMLResource
argument_list|(
name|transaction
argument_list|,
name|broker
argument_list|,
name|XmldbURI
operator|.
name|create
argument_list|(
name|sampleName
argument_list|)
argument_list|,
name|sample
argument_list|)
decl_stmt|;
name|assertNotNull
argument_list|(
name|info
argument_list|)
expr_stmt|;
name|root
operator|.
name|store
argument_list|(
name|transaction
argument_list|,
name|broker
argument_list|,
name|info
argument_list|,
name|sample
argument_list|)
expr_stmt|;
name|docs
operator|.
name|add
argument_list|(
name|info
operator|.
name|getDocument
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
name|transact
operator|.
name|commit
argument_list|(
name|transaction
argument_list|)
expr_stmt|;
block|}
return|return
name|docs
return|;
block|}
comment|/** It really depends on the Analyzer used with the index,      *  but probably you would like to have the 'term' argument all lower cased.      *  @see<a href='https://sourceforge.net/p/exist/mailman/message/36436727/'>Help needed with a test case</a>      */
specifier|private
name|Occurrences
index|[]
name|checkIndex
parameter_list|(
specifier|final
name|DocumentSet
name|docs
parameter_list|,
specifier|final
name|DBBroker
name|broker
parameter_list|,
specifier|final
name|QName
index|[]
name|qn
parameter_list|,
specifier|final
name|String
name|term
parameter_list|,
specifier|final
name|int
name|expected
parameter_list|)
block|{
specifier|final
name|LuceneIndexWorker
name|index
init|=
operator|(
name|LuceneIndexWorker
operator|)
name|broker
operator|.
name|getIndexController
argument_list|()
operator|.
name|getWorkerByIndexId
argument_list|(
name|LuceneIndex
operator|.
name|ID
argument_list|)
decl_stmt|;
specifier|final
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|hints
init|=
operator|new
name|HashMap
argument_list|<>
argument_list|()
decl_stmt|;
if|if
condition|(
name|term
operator|!=
literal|null
condition|)
block|{
name|hints
operator|.
name|put
argument_list|(
name|OrderedValuesIndex
operator|.
name|START_VALUE
argument_list|,
name|term
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|qn
operator|!=
literal|null
operator|&&
name|qn
operator|.
name|length
operator|>
literal|0
condition|)
block|{
specifier|final
name|List
argument_list|<
name|QName
argument_list|>
name|qnlist
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|(
name|qn
operator|.
name|length
argument_list|)
decl_stmt|;
name|qnlist
operator|.
name|addAll
argument_list|(
name|Arrays
operator|.
name|asList
argument_list|(
name|qn
argument_list|)
argument_list|)
expr_stmt|;
name|hints
operator|.
name|put
argument_list|(
name|QNamedKeysIndex
operator|.
name|QNAMES_KEY
argument_list|,
name|qnlist
argument_list|)
expr_stmt|;
block|}
specifier|final
name|XQueryContext
name|context
init|=
operator|new
name|XQueryContext
argument_list|(
name|broker
operator|.
name|getBrokerPool
argument_list|()
argument_list|)
decl_stmt|;
specifier|final
name|Occurrences
index|[]
name|occur
init|=
name|index
operator|.
name|scanIndex
argument_list|(
name|context
argument_list|,
name|docs
argument_list|,
literal|null
argument_list|,
name|hints
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|expected
argument_list|,
name|occur
operator|.
name|length
argument_list|)
expr_stmt|;
return|return
name|occur
return|;
block|}
annotation|@
name|Before
specifier|public
name|void
name|setup
parameter_list|()
throws|throws
name|EXistException
throws|,
name|PermissionDeniedException
throws|,
name|IOException
throws|,
name|TriggerException
block|{
specifier|final
name|BrokerPool
name|pool
init|=
name|existEmbeddedServer
operator|.
name|getBrokerPool
argument_list|()
decl_stmt|;
specifier|final
name|TransactionManager
name|transact
init|=
name|pool
operator|.
name|getTransactionManager
argument_list|()
decl_stmt|;
try|try
init|(
specifier|final
name|DBBroker
name|broker
init|=
name|pool
operator|.
name|get
argument_list|(
name|Optional
operator|.
name|of
argument_list|(
name|pool
operator|.
name|getSecurityManager
argument_list|()
operator|.
name|getSystemSubject
argument_list|()
argument_list|)
argument_list|)
init|;
specifier|final
name|Txn
name|transaction
init|=
name|transact
operator|.
name|beginTransaction
argument_list|()
init|)
block|{
name|root
operator|=
name|broker
operator|.
name|getOrCreateCollection
argument_list|(
name|transaction
argument_list|,
name|TestConstants
operator|.
name|TEST_COLLECTION_URI
argument_list|)
expr_stmt|;
name|assertNotNull
argument_list|(
name|root
argument_list|)
expr_stmt|;
name|broker
operator|.
name|saveCollection
argument_list|(
name|transaction
argument_list|,
name|root
argument_list|)
expr_stmt|;
name|transact
operator|.
name|commit
argument_list|(
name|transaction
argument_list|)
expr_stmt|;
specifier|final
name|Configuration
name|config
init|=
name|BrokerPool
operator|.
name|getInstance
argument_list|()
operator|.
name|getConfiguration
argument_list|()
decl_stmt|;
name|savedConfig
operator|=
operator|(
name|Boolean
operator|)
name|config
operator|.
name|getProperty
argument_list|(
name|Indexer
operator|.
name|PROPERTY_PRESERVE_WS_MIXED_CONTENT
argument_list|)
expr_stmt|;
name|config
operator|.
name|setProperty
argument_list|(
name|Indexer
operator|.
name|PROPERTY_PRESERVE_WS_MIXED_CONTENT
argument_list|,
name|Boolean
operator|.
name|TRUE
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|After
specifier|public
name|void
name|cleanup
parameter_list|()
throws|throws
name|EXistException
throws|,
name|PermissionDeniedException
throws|,
name|IOException
throws|,
name|TriggerException
block|{
specifier|final
name|BrokerPool
name|pool
init|=
name|existEmbeddedServer
operator|.
name|getBrokerPool
argument_list|()
decl_stmt|;
specifier|final
name|TransactionManager
name|transact
init|=
name|pool
operator|.
name|getTransactionManager
argument_list|()
decl_stmt|;
try|try
init|(
specifier|final
name|DBBroker
name|broker
init|=
name|pool
operator|.
name|get
argument_list|(
name|Optional
operator|.
name|of
argument_list|(
name|pool
operator|.
name|getSecurityManager
argument_list|()
operator|.
name|getSystemSubject
argument_list|()
argument_list|)
argument_list|)
init|;
specifier|final
name|Txn
name|transaction
init|=
name|transact
operator|.
name|beginTransaction
argument_list|()
init|)
block|{
specifier|final
name|Collection
name|collConfig
init|=
name|broker
operator|.
name|getOrCreateCollection
argument_list|(
name|transaction
argument_list|,
name|XmldbURI
operator|.
name|create
argument_list|(
name|XmldbURI
operator|.
name|CONFIG_COLLECTION
operator|+
literal|"/db"
argument_list|)
argument_list|)
decl_stmt|;
name|assertNotNull
argument_list|(
name|collConfig
argument_list|)
expr_stmt|;
name|broker
operator|.
name|removeCollection
argument_list|(
name|transaction
argument_list|,
name|collConfig
argument_list|)
expr_stmt|;
if|if
condition|(
name|root
operator|!=
literal|null
condition|)
block|{
name|assertNotNull
argument_list|(
name|root
argument_list|)
expr_stmt|;
name|broker
operator|.
name|removeCollection
argument_list|(
name|transaction
argument_list|,
name|root
argument_list|)
expr_stmt|;
block|}
name|transact
operator|.
name|commit
argument_list|(
name|transaction
argument_list|)
expr_stmt|;
specifier|final
name|Configuration
name|config
init|=
name|BrokerPool
operator|.
name|getInstance
argument_list|()
operator|.
name|getConfiguration
argument_list|()
decl_stmt|;
name|config
operator|.
name|setProperty
argument_list|(
name|Indexer
operator|.
name|PROPERTY_PRESERVE_WS_MIXED_CONTENT
argument_list|,
name|savedConfig
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|ClassRule
specifier|public
specifier|static
specifier|final
name|ExistEmbeddedServer
name|existEmbeddedServer
init|=
operator|new
name|ExistEmbeddedServer
argument_list|(
name|propertiesBuilder
argument_list|()
operator|.
name|set
argument_list|(
name|Indexer
operator|.
name|PROPERTY_SUPPRESS_WHITESPACE
argument_list|,
literal|"none"
argument_list|)
operator|.
name|put
argument_list|(
name|Indexer
operator|.
name|PRESERVE_WS_MIXED_CONTENT_ATTRIBUTE
argument_list|,
name|Boolean
operator|.
name|TRUE
argument_list|)
operator|.
name|build
argument_list|()
argument_list|,
literal|true
argument_list|,
literal|false
argument_list|)
decl_stmt|;
annotation|@
name|AfterClass
specifier|public
specifier|static
name|void
name|cleanupDb
parameter_list|()
throws|throws
name|LockException
throws|,
name|TriggerException
throws|,
name|PermissionDeniedException
throws|,
name|EXistException
throws|,
name|IOException
block|{
name|TestUtils
operator|.
name|cleanupDB
argument_list|()
expr_stmt|;
block|}
block|}
end_class

end_unit

