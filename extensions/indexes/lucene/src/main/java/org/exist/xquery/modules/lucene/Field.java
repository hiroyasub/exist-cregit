begin_unit|revision:1.0.0;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * eXist Open Source Native XML Database  * Copyright (C) 2001-2019 The eXist Project  * http://exist-db.org  *  * This program is free software; you can redistribute it and/or  * modify it under the terms of the GNU Lesser General Public License  * as published by the Free Software Foundation; either version 2  * of the License, or (at your option) any later version.  *  * This program is distributed in the hope that it will be useful,  * but WITHOUT ANY WARRANTY; without even the implied warranty of  * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the  * GNU Lesser General Public License for more details.  *  * You should have received a copy of the GNU Lesser General Public  * License along with this library; if not, write to the Free Software  * Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA  02110-1301  USA  */
end_comment

begin_package
package|package
name|org
operator|.
name|exist
operator|.
name|xquery
operator|.
name|modules
operator|.
name|lucene
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|analysis
operator|.
name|Analyzer
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|analysis
operator|.
name|TokenStream
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|analysis
operator|.
name|tokenattributes
operator|.
name|CharTermAttribute
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|analysis
operator|.
name|tokenattributes
operator|.
name|OffsetAttribute
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|index
operator|.
name|Term
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|search
operator|.
name|PhraseQuery
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|search
operator|.
name|Query
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|Namespaces
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|dom
operator|.
name|QName
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|dom
operator|.
name|memtree
operator|.
name|InMemoryNodeSet
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|dom
operator|.
name|memtree
operator|.
name|MemTreeBuilder
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|dom
operator|.
name|persistent
operator|.
name|Match
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|dom
operator|.
name|persistent
operator|.
name|NodeProxy
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|indexing
operator|.
name|lucene
operator|.
name|*
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|storage
operator|.
name|NodePath
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|xquery
operator|.
name|*
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|xquery
operator|.
name|value
operator|.
name|*
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|annotation
operator|.
name|Nullable
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|Reader
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|StringReader
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_class
specifier|public
class|class
name|Field
extends|extends
name|BasicFunction
block|{
specifier|public
specifier|final
specifier|static
name|FunctionSignature
index|[]
name|signatures
init|=
block|{
operator|new
name|FunctionSignature
argument_list|(
operator|new
name|QName
argument_list|(
literal|"field"
argument_list|,
name|LuceneModule
operator|.
name|NAMESPACE_URI
argument_list|,
name|LuceneModule
operator|.
name|PREFIX
argument_list|)
argument_list|,
literal|"Returns the value of a field attached to a particular node obtained via a full text search."
operator|+
literal|"Only fields listed in the 'fields' option of ft:query will be attached to the query result."
argument_list|,
operator|new
name|SequenceType
index|[]
block|{
operator|new
name|FunctionParameterSequenceType
argument_list|(
literal|"node"
argument_list|,
name|Type
operator|.
name|NODE
argument_list|,
name|Cardinality
operator|.
name|EXACTLY_ONE
argument_list|,
literal|"the context node to check for attached fields"
argument_list|)
block|,
operator|new
name|FunctionParameterSequenceType
argument_list|(
literal|"field"
argument_list|,
name|Type
operator|.
name|STRING
argument_list|,
name|Cardinality
operator|.
name|EXACTLY_ONE
argument_list|,
literal|"name of the field"
argument_list|)
block|}
argument_list|,
operator|new
name|FunctionReturnSequenceType
argument_list|(
name|Type
operator|.
name|STRING
argument_list|,
name|Cardinality
operator|.
name|ZERO_OR_MORE
argument_list|,
literal|"One or more string values corresponding to the values of the field attached"
argument_list|)
argument_list|)
block|,
operator|new
name|FunctionSignature
argument_list|(
operator|new
name|QName
argument_list|(
literal|"field"
argument_list|,
name|LuceneModule
operator|.
name|NAMESPACE_URI
argument_list|,
name|LuceneModule
operator|.
name|PREFIX
argument_list|)
argument_list|,
literal|"Returns the value of a field attached to a particular node obtained via a full text search."
operator|+
literal|"Only fields listed in the 'fields' option of ft:query will be attached to the query result."
operator|+
literal|"Accepts an additional parameter to name the target type into which the field "
operator|+
literal|"value should be cast. This is mainly relevant for fields having a different type than xs:string. "
operator|+
literal|"As lucene does not record type information, numbers or dates would be returned as numbers by default."
argument_list|,
operator|new
name|SequenceType
index|[]
block|{
operator|new
name|FunctionParameterSequenceType
argument_list|(
literal|"node"
argument_list|,
name|Type
operator|.
name|NODE
argument_list|,
name|Cardinality
operator|.
name|EXACTLY_ONE
argument_list|,
literal|"the context node to check for attached fields"
argument_list|)
block|,
operator|new
name|FunctionParameterSequenceType
argument_list|(
literal|"field"
argument_list|,
name|Type
operator|.
name|STRING
argument_list|,
name|Cardinality
operator|.
name|EXACTLY_ONE
argument_list|,
literal|"name of the field"
argument_list|)
block|,
operator|new
name|FunctionParameterSequenceType
argument_list|(
literal|"type"
argument_list|,
name|Type
operator|.
name|STRING
argument_list|,
name|Cardinality
operator|.
name|EXACTLY_ONE
argument_list|,
literal|"intended target type to cast the field value to. Casting may fail with a dynamic error."
argument_list|)
block|}
argument_list|,
operator|new
name|FunctionReturnSequenceType
argument_list|(
name|Type
operator|.
name|ITEM
argument_list|,
name|Cardinality
operator|.
name|ZERO_OR_MORE
argument_list|,
literal|"Sequence corresponding to the values of the field attached, cast to the desired target type"
argument_list|)
argument_list|)
block|,
operator|new
name|FunctionSignature
argument_list|(
operator|new
name|QName
argument_list|(
literal|"highlight-field-matches"
argument_list|,
name|LuceneModule
operator|.
name|NAMESPACE_URI
argument_list|,
name|LuceneModule
operator|.
name|PREFIX
argument_list|)
argument_list|,
literal|"Highlights matches for the last executed lucene query within the value of a field "
operator|+
literal|"attached to a particular node obtained via a full text search. Only fields listed in the 'fields' option of ft:query will be "
operator|+
literal|"available to highlighting."
argument_list|,
operator|new
name|SequenceType
index|[]
block|{
operator|new
name|FunctionParameterSequenceType
argument_list|(
literal|"node"
argument_list|,
name|Type
operator|.
name|NODE
argument_list|,
name|Cardinality
operator|.
name|EXACTLY_ONE
argument_list|,
literal|"the context node to check for attached fields which should be highlighted"
argument_list|)
block|,
operator|new
name|FunctionParameterSequenceType
argument_list|(
literal|"field"
argument_list|,
name|Type
operator|.
name|STRING
argument_list|,
name|Cardinality
operator|.
name|EXACTLY_ONE
argument_list|,
literal|"name of the field to highlight"
argument_list|)
block|}
argument_list|,
operator|new
name|FunctionReturnSequenceType
argument_list|(
name|Type
operator|.
name|ELEMENT
argument_list|,
name|Cardinality
operator|.
name|ZERO_OR_ONE
argument_list|,
literal|"An exist:field containing the content of the requested field with all query "
operator|+
literal|"matches enclosed in an exist:match"
argument_list|)
argument_list|)
block|}
decl_stmt|;
specifier|public
name|Field
parameter_list|(
name|XQueryContext
name|context
parameter_list|,
name|FunctionSignature
name|signature
parameter_list|)
block|{
name|super
argument_list|(
name|context
argument_list|,
name|signature
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|Sequence
name|eval
parameter_list|(
name|Sequence
index|[]
name|args
parameter_list|,
name|Sequence
name|contextSequence
parameter_list|)
throws|throws
name|XPathException
block|{
name|NodeValue
name|nodeValue
init|=
operator|(
name|NodeValue
operator|)
name|args
index|[
literal|0
index|]
operator|.
name|itemAt
argument_list|(
literal|0
argument_list|)
decl_stmt|;
if|if
condition|(
name|nodeValue
operator|.
name|getImplementationType
argument_list|()
operator|!=
name|NodeValue
operator|.
name|PERSISTENT_NODE
condition|)
block|{
return|return
name|Sequence
operator|.
name|EMPTY_SEQUENCE
return|;
block|}
specifier|final
name|String
name|fieldName
init|=
name|args
index|[
literal|1
index|]
operator|.
name|itemAt
argument_list|(
literal|0
argument_list|)
operator|.
name|getStringValue
argument_list|()
decl_stmt|;
name|int
name|type
init|=
name|Type
operator|.
name|STRING
decl_stmt|;
if|if
condition|(
name|getArgumentCount
argument_list|()
operator|==
literal|3
condition|)
block|{
specifier|final
name|String
name|typeStr
init|=
name|args
index|[
literal|2
index|]
operator|.
name|itemAt
argument_list|(
literal|0
argument_list|)
operator|.
name|getStringValue
argument_list|()
decl_stmt|;
name|type
operator|=
name|Type
operator|.
name|getType
argument_list|(
name|typeStr
argument_list|)
expr_stmt|;
block|}
specifier|final
name|NodeProxy
name|proxy
init|=
operator|(
name|NodeProxy
operator|)
name|nodeValue
decl_stmt|;
specifier|final
name|LuceneMatch
name|match
init|=
name|getMatch
argument_list|(
name|proxy
argument_list|)
decl_stmt|;
if|if
condition|(
name|match
operator|==
literal|null
condition|)
block|{
return|return
name|Sequence
operator|.
name|EMPTY_SEQUENCE
return|;
block|}
specifier|final
name|Sequence
name|text
init|=
name|match
operator|.
name|getField
argument_list|(
name|fieldName
argument_list|,
name|type
argument_list|)
decl_stmt|;
if|if
condition|(
name|isCalledAs
argument_list|(
literal|"highlight-field-matches"
argument_list|)
condition|)
block|{
try|try
block|{
return|return
name|highlightMatches
argument_list|(
name|fieldName
argument_list|,
name|proxy
argument_list|,
name|match
argument_list|,
name|text
argument_list|)
return|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|XPathException
argument_list|(
name|this
argument_list|,
name|LuceneModule
operator|.
name|EXXQDYFT0002
argument_list|,
literal|"Error highlighting matches in field: "
operator|+
name|e
operator|.
name|getMessage
argument_list|()
argument_list|)
throw|;
block|}
block|}
return|return
name|text
return|;
block|}
comment|/**      * Highlight matches in field content using the analyzer defined for the field.      *      * @param fieldName the name of the field      * @param proxy node on which the field is defined      * @param match the lucene match attached to the node      * @param text the content of the field      * @return a sequence of exist:field elements containing the field content with matches enclosed in exist:match      * @throws XPathException in case of error      * @throws IOException in case of a lucene error      */
specifier|private
name|Sequence
name|highlightMatches
parameter_list|(
specifier|final
name|String
name|fieldName
parameter_list|,
specifier|final
name|NodeProxy
name|proxy
parameter_list|,
specifier|final
name|LuceneMatch
name|match
parameter_list|,
specifier|final
name|Sequence
name|text
parameter_list|)
throws|throws
name|XPathException
throws|,
name|IOException
block|{
specifier|final
name|LuceneIndexWorker
name|index
init|=
operator|(
name|LuceneIndexWorker
operator|)
name|context
operator|.
name|getBroker
argument_list|()
operator|.
name|getIndexController
argument_list|()
operator|.
name|getWorkerByIndexId
argument_list|(
name|LuceneIndex
operator|.
name|ID
argument_list|)
decl_stmt|;
specifier|final
name|Map
argument_list|<
name|Object
argument_list|,
name|Query
argument_list|>
name|terms
init|=
name|index
operator|.
name|getTerms
argument_list|(
name|match
operator|.
name|getQuery
argument_list|()
argument_list|)
decl_stmt|;
specifier|final
name|NodePath
name|path
init|=
name|LuceneMatchListener
operator|.
name|getPath
argument_list|(
name|proxy
argument_list|)
decl_stmt|;
specifier|final
name|LuceneConfig
name|config
init|=
name|index
operator|.
name|getLuceneConfig
argument_list|(
name|context
operator|.
name|getBroker
argument_list|()
argument_list|,
name|proxy
operator|.
name|getDocumentSet
argument_list|()
argument_list|)
decl_stmt|;
name|LuceneIndexConfig
name|idxConf
init|=
name|config
operator|.
name|getConfig
argument_list|(
name|path
argument_list|)
operator|.
name|next
argument_list|()
decl_stmt|;
if|if
condition|(
name|idxConf
operator|==
literal|null
condition|)
block|{
comment|// no lucene index: no fields to highlight
return|return
name|Sequence
operator|.
name|EMPTY_SEQUENCE
return|;
block|}
specifier|final
name|Analyzer
name|analyzer
init|=
name|idxConf
operator|.
name|getAnalyzer
argument_list|()
decl_stmt|;
name|context
operator|.
name|pushDocumentContext
argument_list|()
expr_stmt|;
try|try
block|{
specifier|final
name|MemTreeBuilder
name|builder
init|=
name|context
operator|.
name|getDocumentBuilder
argument_list|()
decl_stmt|;
name|builder
operator|.
name|startDocument
argument_list|()
expr_stmt|;
specifier|final
name|InMemoryNodeSet
name|result
init|=
operator|new
name|InMemoryNodeSet
argument_list|(
name|text
operator|.
name|getItemCount
argument_list|()
argument_list|)
decl_stmt|;
for|for
control|(
specifier|final
name|SequenceIterator
name|si
init|=
name|text
operator|.
name|iterate
argument_list|()
init|;
name|si
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
specifier|final
name|int
name|nodeNr
init|=
name|builder
operator|.
name|startElement
argument_list|(
name|Namespaces
operator|.
name|EXIST_NS
argument_list|,
literal|"field"
argument_list|,
literal|"exist:field"
argument_list|,
literal|null
argument_list|)
decl_stmt|;
specifier|final
name|String
name|content
init|=
name|si
operator|.
name|nextItem
argument_list|()
operator|.
name|getStringValue
argument_list|()
decl_stmt|;
name|int
name|currentPos
init|=
literal|0
decl_stmt|;
try|try
init|(
specifier|final
name|Reader
name|reader
init|=
operator|new
name|StringReader
argument_list|(
name|content
argument_list|)
init|;
specifier|final
name|TokenStream
name|tokenStream
init|=
name|analyzer
operator|.
name|tokenStream
argument_list|(
name|fieldName
argument_list|,
name|reader
argument_list|)
init|)
block|{
name|tokenStream
operator|.
name|reset
argument_list|()
expr_stmt|;
specifier|final
name|MarkableTokenFilter
name|stream
init|=
operator|new
name|MarkableTokenFilter
argument_list|(
name|tokenStream
argument_list|)
decl_stmt|;
while|while
condition|(
name|stream
operator|.
name|incrementToken
argument_list|()
condition|)
block|{
name|String
name|token
init|=
name|stream
operator|.
name|getAttribute
argument_list|(
name|CharTermAttribute
operator|.
name|class
argument_list|)
operator|.
name|toString
argument_list|()
decl_stmt|;
specifier|final
name|Query
name|query
init|=
name|terms
operator|.
name|get
argument_list|(
name|token
argument_list|)
decl_stmt|;
if|if
condition|(
name|query
operator|!=
literal|null
condition|)
block|{
if|if
condition|(
name|match
operator|.
name|getQuery
argument_list|()
operator|instanceof
name|PhraseQuery
condition|)
block|{
specifier|final
name|Term
name|phraseTerms
index|[]
init|=
operator|(
operator|(
name|PhraseQuery
operator|)
name|match
operator|.
name|getQuery
argument_list|()
operator|)
operator|.
name|getTerms
argument_list|()
decl_stmt|;
if|if
condition|(
name|token
operator|.
name|equals
argument_list|(
name|phraseTerms
index|[
literal|0
index|]
operator|.
name|text
argument_list|()
argument_list|)
condition|)
block|{
comment|// Scan the following text and collect tokens to see
comment|// if they are part of the phrase.
name|stream
operator|.
name|mark
argument_list|()
expr_stmt|;
name|int
name|t
init|=
literal|1
decl_stmt|;
name|OffsetAttribute
name|offset
init|=
name|stream
operator|.
name|getAttribute
argument_list|(
name|OffsetAttribute
operator|.
name|class
argument_list|)
decl_stmt|;
specifier|final
name|int
name|startOffset
init|=
name|offset
operator|.
name|startOffset
argument_list|()
decl_stmt|;
name|int
name|endOffset
init|=
name|offset
operator|.
name|endOffset
argument_list|()
decl_stmt|;
while|while
condition|(
name|stream
operator|.
name|incrementToken
argument_list|()
operator|&&
name|t
operator|<
name|phraseTerms
operator|.
name|length
condition|)
block|{
name|token
operator|=
name|stream
operator|.
name|getAttribute
argument_list|(
name|CharTermAttribute
operator|.
name|class
argument_list|)
operator|.
name|toString
argument_list|()
expr_stmt|;
if|if
condition|(
name|token
operator|.
name|equals
argument_list|(
name|phraseTerms
index|[
name|t
index|]
operator|.
name|text
argument_list|()
argument_list|)
condition|)
block|{
name|offset
operator|=
name|stream
operator|.
name|getAttribute
argument_list|(
name|OffsetAttribute
operator|.
name|class
argument_list|)
expr_stmt|;
name|endOffset
operator|=
name|offset
operator|.
name|endOffset
argument_list|()
expr_stmt|;
name|t
operator|++
expr_stmt|;
if|if
condition|(
name|t
operator|==
name|phraseTerms
operator|.
name|length
condition|)
block|{
break|break;
block|}
block|}
else|else
block|{
break|break;
block|}
block|}
if|if
condition|(
name|t
operator|==
name|phraseTerms
operator|.
name|length
condition|)
block|{
if|if
condition|(
name|currentPos
operator|<
name|startOffset
condition|)
block|{
name|builder
operator|.
name|characters
argument_list|(
name|content
operator|.
name|substring
argument_list|(
name|currentPos
argument_list|,
name|startOffset
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|builder
operator|.
name|startElement
argument_list|(
name|Namespaces
operator|.
name|EXIST_NS
argument_list|,
literal|"match"
argument_list|,
literal|"exist:match"
argument_list|,
literal|null
argument_list|)
expr_stmt|;
name|builder
operator|.
name|characters
argument_list|(
name|content
operator|.
name|substring
argument_list|(
name|startOffset
argument_list|,
name|endOffset
argument_list|)
argument_list|)
expr_stmt|;
name|builder
operator|.
name|endElement
argument_list|()
expr_stmt|;
name|currentPos
operator|=
name|endOffset
expr_stmt|;
block|}
block|}
comment|// End of phrase handling
block|}
else|else
block|{
specifier|final
name|OffsetAttribute
name|offset
init|=
name|stream
operator|.
name|getAttribute
argument_list|(
name|OffsetAttribute
operator|.
name|class
argument_list|)
decl_stmt|;
if|if
condition|(
name|currentPos
operator|<
name|offset
operator|.
name|startOffset
argument_list|()
condition|)
block|{
name|builder
operator|.
name|characters
argument_list|(
name|content
operator|.
name|substring
argument_list|(
name|currentPos
argument_list|,
name|offset
operator|.
name|startOffset
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|builder
operator|.
name|startElement
argument_list|(
name|Namespaces
operator|.
name|EXIST_NS
argument_list|,
literal|"match"
argument_list|,
literal|"exist:match"
argument_list|,
literal|null
argument_list|)
expr_stmt|;
name|builder
operator|.
name|characters
argument_list|(
name|content
operator|.
name|substring
argument_list|(
name|offset
operator|.
name|startOffset
argument_list|()
argument_list|,
name|offset
operator|.
name|endOffset
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|builder
operator|.
name|endElement
argument_list|()
expr_stmt|;
name|currentPos
operator|=
name|offset
operator|.
name|endOffset
argument_list|()
expr_stmt|;
block|}
block|}
block|}
block|}
if|if
condition|(
name|currentPos
operator|<
name|content
operator|.
name|length
argument_list|()
operator|-
literal|1
condition|)
block|{
name|builder
operator|.
name|characters
argument_list|(
name|content
operator|.
name|substring
argument_list|(
name|currentPos
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|builder
operator|.
name|endElement
argument_list|()
expr_stmt|;
name|result
operator|.
name|add
argument_list|(
name|builder
operator|.
name|getDocument
argument_list|()
operator|.
name|getNode
argument_list|(
name|nodeNr
argument_list|)
argument_list|)
expr_stmt|;
block|}
return|return
name|result
return|;
block|}
finally|finally
block|{
name|context
operator|.
name|popDocumentContext
argument_list|()
expr_stmt|;
block|}
block|}
comment|/**      * Get the lucene match object attached to the given node      *      * @param proxy node to check for matches      * @return the LuceneMatch object attached to the node or null      */
specifier|static
annotation|@
name|Nullable
name|LuceneMatch
name|getMatch
parameter_list|(
name|NodeProxy
name|proxy
parameter_list|)
block|{
name|Match
name|match
init|=
name|proxy
operator|.
name|getMatches
argument_list|()
decl_stmt|;
while|while
condition|(
name|match
operator|!=
literal|null
condition|)
block|{
if|if
condition|(
name|match
operator|.
name|getIndexId
argument_list|()
operator|.
name|equals
argument_list|(
name|LuceneIndex
operator|.
name|ID
argument_list|)
condition|)
block|{
return|return
operator|(
name|LuceneMatch
operator|)
name|match
return|;
block|}
name|match
operator|=
name|match
operator|.
name|getNextMatch
argument_list|()
expr_stmt|;
block|}
return|return
literal|null
return|;
block|}
block|}
end_class

end_unit

