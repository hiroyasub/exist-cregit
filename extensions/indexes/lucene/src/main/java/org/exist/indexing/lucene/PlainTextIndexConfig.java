begin_unit|revision:1.0.0;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  *  eXist Open Source Native XML Database  *  Copyright (C) 2001-2015 The eXist Project  *  http://exist-db.org  *  *  This program is free software; you can redistribute it and/or  *  modify it under the terms of the GNU Lesser General Public License  *  as published by the Free Software Foundation; either version 2  *  of the License, or (at your option) any later version.  *  *  This program is distributed in the hope that it will be useful,  *  but WITHOUT ANY WARRANTY; without even the implied warranty of  *  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the  *  GNU Lesser General Public License for more details.  *  *  You should have received a copy of the GNU Lesser General Public  *  License along with this library; if not, write to the Free Software  *  Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA  02110-1301  USA  */
end_comment

begin_package
package|package
name|org
operator|.
name|exist
operator|.
name|indexing
operator|.
name|lucene
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|document
operator|.
name|Field
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|dom
operator|.
name|memtree
operator|.
name|NodeImpl
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|xquery
operator|.
name|value
operator|.
name|NodeValue
import|;
end_import

begin_import
import|import
name|org
operator|.
name|w3c
operator|.
name|dom
operator|.
name|NamedNodeMap
import|;
end_import

begin_import
import|import
name|org
operator|.
name|w3c
operator|.
name|dom
operator|.
name|Node
import|;
end_import

begin_import
import|import
name|org
operator|.
name|w3c
operator|.
name|dom
operator|.
name|NodeList
import|;
end_import

begin_comment
comment|/**  * Private class for representing the add/doc Solr xml fragment   */
end_comment

begin_class
specifier|public
class|class
name|PlainTextIndexConfig
block|{
specifier|private
name|PlainTextDoc
name|solrDoc
init|=
operator|new
name|PlainTextDoc
argument_list|()
decl_stmt|;
specifier|private
name|ArrayList
argument_list|<
name|PlainTextField
argument_list|>
name|solrFields
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
comment|/**      * Helper method for retrieving boost value, defaults to 1.0f      */
specifier|private
name|float
name|getFloatValue
parameter_list|(
name|String
name|value
parameter_list|)
block|{
name|float
name|retVal
init|=
literal|1.0f
decl_stmt|;
if|if
condition|(
name|value
operator|!=
literal|null
operator|&&
name|value
operator|.
name|length
argument_list|()
operator|>
literal|0
condition|)
block|{
try|try
block|{
name|retVal
operator|=
name|Float
operator|.
name|parseFloat
argument_list|(
name|value
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|NumberFormatException
name|e
parameter_list|)
block|{
comment|// TODO throw exception?
name|LuceneIndexWorker
operator|.
name|LOG
operator|.
name|error
argument_list|(
name|e
operator|.
name|getMessage
argument_list|()
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
block|}
return|return
name|retVal
return|;
block|}
comment|/**      * Retrieve Solr configuration info from NodeValue structure      */
name|boolean
name|parse
parameter_list|(
name|NodeValue
name|descriptor
parameter_list|)
block|{
if|if
condition|(
name|descriptor
operator|.
name|getImplementationType
argument_list|()
operator|==
name|NodeValue
operator|.
name|IN_MEMORY_NODE
condition|)
operator|(
operator|(
name|NodeImpl
operator|)
name|descriptor
operator|)
operator|.
name|expand
argument_list|()
expr_stmt|;
comment|/* Check<doc> and retrieve boost value */
name|Node
name|doc
init|=
name|descriptor
operator|.
name|getNode
argument_list|()
decl_stmt|;
comment|// Get QName and text from descriptor
if|if
condition|(
operator|!
name|doc
operator|.
name|getLocalName
argument_list|()
operator|.
name|contentEquals
argument_list|(
literal|"doc"
argument_list|)
condition|)
block|{
comment|// throw exception
name|LuceneIndexWorker
operator|.
name|LOG
operator|.
name|error
argument_list|(
literal|"Expected<doc> got<"
operator|+
name|descriptor
operator|.
name|getNode
argument_list|()
operator|.
name|getLocalName
argument_list|()
operator|+
literal|">"
argument_list|)
expr_stmt|;
return|return
literal|false
return|;
block|}
name|NamedNodeMap
name|nnm
init|=
name|doc
operator|.
name|getAttributes
argument_list|()
decl_stmt|;
name|Node
name|attributeNode
init|=
name|nnm
operator|.
name|getNamedItem
argument_list|(
literal|"boost"
argument_list|)
decl_stmt|;
if|if
condition|(
name|attributeNode
operator|!=
literal|null
condition|)
block|{
name|solrDoc
operator|.
name|setBoost
argument_list|(
name|getFloatValue
argument_list|(
name|attributeNode
operator|.
name|getNodeValue
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|/* Check<fields> and retrieve name, boost and value */
name|List
argument_list|<
name|PlainTextField
argument_list|>
name|fields
init|=
name|getFields
argument_list|()
decl_stmt|;
name|NodeList
name|nodeList
init|=
name|descriptor
operator|.
name|getNode
argument_list|()
operator|.
name|getChildNodes
argument_list|()
decl_stmt|;
name|int
name|length
init|=
name|nodeList
operator|.
name|getLength
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|length
condition|;
name|i
operator|++
control|)
block|{
name|Node
name|child
init|=
name|nodeList
operator|.
name|item
argument_list|(
name|i
argument_list|)
decl_stmt|;
name|String
name|childname
init|=
name|child
operator|.
name|getLocalName
argument_list|()
decl_stmt|;
if|if
condition|(
operator|!
literal|"field"
operator|.
name|equals
argument_list|(
name|childname
argument_list|)
condition|)
block|{
name|LuceneIndexWorker
operator|.
name|LOG
operator|.
name|error
argument_list|(
literal|"Expected<field> got<"
operator|+
name|childname
operator|+
literal|">"
argument_list|)
expr_stmt|;
block|}
else|else
block|{
comment|// field element found
name|PlainTextField
name|field
init|=
operator|new
name|PlainTextField
argument_list|()
decl_stmt|;
name|fields
operator|.
name|add
argument_list|(
name|field
argument_list|)
expr_stmt|;
comment|// Find mandatory attribute
name|nnm
operator|=
name|child
operator|.
name|getAttributes
argument_list|()
expr_stmt|;
name|attributeNode
operator|=
name|nnm
operator|.
name|getNamedItem
argument_list|(
literal|"name"
argument_list|)
expr_stmt|;
if|if
condition|(
name|attributeNode
operator|==
literal|null
condition|)
block|{
comment|// attribute not found
name|LuceneIndexWorker
operator|.
name|LOG
operator|.
name|error
argument_list|(
literal|"No name attribute"
argument_list|)
expr_stmt|;
block|}
else|else
block|{
comment|// Get vlaue of name attribute
name|String
name|name
init|=
name|attributeNode
operator|.
name|getNodeValue
argument_list|()
decl_stmt|;
name|field
operator|.
name|setName
argument_list|(
name|name
argument_list|)
expr_stmt|;
comment|// Get value of optional boost attribute
name|attributeNode
operator|=
name|nnm
operator|.
name|getNamedItem
argument_list|(
literal|"boost"
argument_list|)
expr_stmt|;
if|if
condition|(
name|attributeNode
operator|!=
literal|null
condition|)
block|{
name|String
name|boost
init|=
name|attributeNode
operator|.
name|getNodeValue
argument_list|()
decl_stmt|;
name|field
operator|.
name|setBoost
argument_list|(
name|getFloatValue
argument_list|(
name|boost
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|// Get value of optional store attribute
name|attributeNode
operator|=
name|nnm
operator|.
name|getNamedItem
argument_list|(
literal|"store"
argument_list|)
expr_stmt|;
if|if
condition|(
name|attributeNode
operator|!=
literal|null
condition|)
block|{
name|String
name|val
init|=
name|attributeNode
operator|.
name|getNodeValue
argument_list|()
decl_stmt|;
name|boolean
name|store
init|=
name|val
operator|!=
literal|null
operator|&&
name|val
operator|.
name|equalsIgnoreCase
argument_list|(
literal|"yes"
argument_list|)
decl_stmt|;
name|field
operator|.
name|setStore
argument_list|(
name|store
argument_list|)
expr_stmt|;
block|}
comment|// Collect data
name|CharSequence
name|content
init|=
name|child
operator|.
name|getTextContent
argument_list|()
decl_stmt|;
name|field
operator|.
name|setContent
argument_list|(
name|content
argument_list|)
expr_stmt|;
block|}
block|}
block|}
return|return
literal|true
return|;
block|}
name|ArrayList
argument_list|<
name|PlainTextField
argument_list|>
name|getFields
parameter_list|()
block|{
return|return
name|solrFields
return|;
block|}
specifier|private
name|void
name|setFields
parameter_list|(
name|ArrayList
argument_list|<
name|PlainTextField
argument_list|>
name|solrField
parameter_list|)
block|{
name|this
operator|.
name|solrFields
operator|=
name|solrField
expr_stmt|;
block|}
name|PlainTextDoc
name|getDoc
parameter_list|()
block|{
return|return
name|solrDoc
return|;
block|}
specifier|private
name|void
name|setDoc
parameter_list|(
name|PlainTextDoc
name|doc
parameter_list|)
block|{
name|this
operator|.
name|solrDoc
operator|=
name|doc
expr_stmt|;
block|}
comment|/**      * Private class representing the&lt;field&gt; element (name, boost, content)      */
specifier|public
specifier|static
class|class
name|PlainTextField
block|{
specifier|private
name|Field
operator|.
name|Store
name|store
init|=
name|Field
operator|.
name|Store
operator|.
name|NO
decl_stmt|;
specifier|private
name|String
name|name
decl_stmt|;
specifier|private
name|float
name|boost
init|=
literal|1.0f
decl_stmt|;
specifier|private
name|CharSequence
name|data
decl_stmt|;
name|void
name|setStore
parameter_list|(
name|boolean
name|setStore
parameter_list|)
block|{
name|store
operator|=
name|setStore
condition|?
name|Field
operator|.
name|Store
operator|.
name|YES
else|:
name|Field
operator|.
name|Store
operator|.
name|NO
expr_stmt|;
block|}
name|void
name|setName
parameter_list|(
name|String
name|name
parameter_list|)
block|{
name|this
operator|.
name|name
operator|=
name|name
expr_stmt|;
block|}
name|void
name|setBoost
parameter_list|(
name|float
name|value
parameter_list|)
block|{
name|boost
operator|=
name|value
expr_stmt|;
block|}
name|void
name|setContent
parameter_list|(
name|CharSequence
name|value
parameter_list|)
block|{
name|data
operator|=
name|value
expr_stmt|;
block|}
specifier|public
name|float
name|getBoost
parameter_list|()
block|{
return|return
name|boost
return|;
block|}
specifier|public
name|CharSequence
name|getData
parameter_list|()
block|{
return|return
name|data
return|;
block|}
specifier|public
name|String
name|getName
parameter_list|()
block|{
return|return
name|name
return|;
block|}
specifier|public
name|Field
operator|.
name|Store
name|getStore
parameter_list|()
block|{
return|return
name|store
return|;
block|}
block|}
comment|/**      * Private class representing the&lt;doc&gt; element (boost).      */
specifier|public
specifier|static
class|class
name|PlainTextDoc
block|{
specifier|private
name|float
name|boost
init|=
literal|1.0f
decl_stmt|;
name|void
name|setBoost
parameter_list|(
name|float
name|value
parameter_list|)
block|{
name|boost
operator|=
name|value
expr_stmt|;
block|}
specifier|public
name|float
name|getBoost
parameter_list|()
block|{
return|return
name|boost
return|;
block|}
block|}
block|}
end_class

end_unit

