begin_unit|revision:1.0.0;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * eXist Open Source Native XML Database  * Copyright (C) 2001-2018 The eXist Project  * http://exist-db.org  *  * This program is free software; you can redistribute it and/or  * modify it under the terms of the GNU Lesser General Public License  * as published by the Free Software Foundation; either version 2  * of the License, or (at your option) any later version.  *  * This program is distributed in the hope that it will be useful,  * but WITHOUT ANY WARRANTY; without even the implied warranty of  * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the  * GNU Lesser General Public License for more details.  *  * You should have received a copy of the GNU Lesser General Public  * License along with this library; if not, write to the Free Software  * Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA  02110-1301  USA  */
end_comment

begin_package
package|package
name|org
operator|.
name|exist
operator|.
name|indexing
operator|.
name|lucene
package|;
end_package

begin_comment
comment|//import org.apache.logging.log4j.LogManager;
end_comment

begin_comment
comment|//import org.apache.logging.log4j.Logger;
end_comment

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|dom
operator|.
name|QName
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|storage
operator|.
name|NodePath
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|storage
operator|.
name|NodePath2
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|util
operator|.
name|FastStringBuffer
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_comment
comment|/**  * @author<a href="mailto:stenlee@gmail.com">Stanislav Jordanov</a>  * @version 1.0  *  * Class NodePathPattern is a replacement for class NodePath  * in cases it was used not as a path, but as a path pattern.  * Most notably this mis-design was employed in LuceneConfig and LuceneIndexConfig.  *  * This is required in order to implement the feature requested/discussed here:  * @see<a href='https://sourceforge.net/p/exist/mailman/message/36392026/'>  * [Exist-open] Are more elaborate xpath expressions allowed in Lucene's index config<text match='...'/>  *</a>  *  * After class NodePath2 was introduced and replaced NodePath in all cases related to Lucene index  * element walking and matching, now all that is left in order to have the desired feature implemented  * is implementing properly NodePathPattern.match methods, w/o modifying the originally used NodePath.  */
end_comment

begin_class
specifier|public
class|class
name|NodePathPattern
block|{
specifier|private
specifier|final
name|NodePath
name|qnPath
decl_stmt|;
specifier|private
specifier|final
name|ArrayList
argument_list|<
name|Predicate
argument_list|>
name|predicates
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
interface|interface
name|Predicate
block|{
name|boolean
name|evaluate
parameter_list|(
name|NodePath2
name|nodePath
parameter_list|,
name|int
name|elementIdx
parameter_list|)
function_decl|;
block|}
specifier|private
specifier|final
specifier|static
name|Predicate
name|CONST_TRUE_PREDICATE
init|=
operator|new
name|Predicate
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|boolean
name|evaluate
parameter_list|(
name|NodePath2
name|nodePath
parameter_list|,
name|int
name|elementIdx
parameter_list|)
block|{
return|return
literal|true
return|;
block|}
block|}
decl_stmt|;
specifier|static
class|class
name|SimpleAttrEqValuePredicate
implements|implements
name|Predicate
block|{
specifier|private
specifier|final
name|String
name|attrName
decl_stmt|;
specifier|private
specifier|final
name|String
name|attrVal
decl_stmt|;
name|SimpleAttrEqValuePredicate
parameter_list|(
name|String
name|attrName
parameter_list|,
name|String
name|attrVal
parameter_list|)
block|{
name|this
operator|.
name|attrName
operator|=
name|attrName
expr_stmt|;
name|this
operator|.
name|attrVal
operator|=
name|attrVal
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|evaluate
parameter_list|(
name|NodePath2
name|nodePath
parameter_list|,
name|int
name|elementIdx
parameter_list|)
block|{
name|String
name|val
init|=
name|nodePath
operator|.
name|attribs
argument_list|(
name|elementIdx
argument_list|)
operator|.
name|get
argument_list|(
name|attrName
argument_list|)
decl_stmt|;
return|return
name|val
operator|!=
literal|null
condition|?
name|val
operator|.
name|equals
argument_list|(
name|attrVal
argument_list|)
else|:
name|attrVal
operator|==
literal|null
return|;
block|}
block|}
specifier|public
name|NodePathPattern
parameter_list|(
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|namespaces
parameter_list|,
name|String
name|matchPattern
parameter_list|)
block|{
name|qnPath
operator|=
operator|new
name|NodePath
argument_list|()
expr_stmt|;
name|qnPath
operator|.
name|setIncludeDescendants
argument_list|(
literal|false
argument_list|)
expr_stmt|;
name|parseXPathExpression
argument_list|(
name|namespaces
argument_list|,
name|matchPattern
argument_list|)
expr_stmt|;
block|}
specifier|public
name|NodePathPattern
parameter_list|(
specifier|final
name|QName
name|qname
parameter_list|)
block|{
name|qnPath
operator|=
operator|new
name|NodePath
argument_list|(
name|qname
argument_list|)
expr_stmt|;
block|}
specifier|private
name|void
name|parseXPathExpression
parameter_list|(
specifier|final
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|namespaces
parameter_list|,
specifier|final
name|String
name|matchPattern
parameter_list|)
block|{
specifier|final
name|FastStringBuffer
name|token
init|=
operator|new
name|FastStringBuffer
argument_list|(
name|matchPattern
operator|.
name|length
argument_list|()
argument_list|)
decl_stmt|;
name|int
name|pos
init|=
literal|0
decl_stmt|;
while|while
condition|(
name|pos
operator|<
name|matchPattern
operator|.
name|length
argument_list|()
condition|)
block|{
specifier|final
name|char
name|ch
init|=
name|matchPattern
operator|.
name|charAt
argument_list|(
name|pos
argument_list|)
decl_stmt|;
switch|switch
condition|(
name|ch
condition|)
block|{
case|case
literal|'/'
case|:
specifier|final
name|String
name|next
init|=
name|token
operator|.
name|toString
argument_list|()
decl_stmt|;
name|token
operator|.
name|setLength
argument_list|(
literal|0
argument_list|)
expr_stmt|;
if|if
condition|(
name|next
operator|.
name|length
argument_list|()
operator|>
literal|0
condition|)
block|{
name|addSegment
argument_list|(
name|namespaces
argument_list|,
name|next
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|matchPattern
operator|.
name|charAt
argument_list|(
operator|++
name|pos
argument_list|)
operator|==
literal|'/'
condition|)
block|{
name|qnPath
operator|.
name|addComponent
argument_list|(
name|NodePath
operator|.
name|SKIP
argument_list|)
expr_stmt|;
name|predicates
operator|.
name|add
argument_list|(
name|CONST_TRUE_PREDICATE
argument_list|)
expr_stmt|;
block|}
break|break;
default|default:
name|token
operator|.
name|append
argument_list|(
name|ch
argument_list|)
expr_stmt|;
name|pos
operator|++
expr_stmt|;
break|break;
block|}
block|}
if|if
condition|(
name|token
operator|.
name|length
argument_list|()
operator|>
literal|0
condition|)
block|{
name|addSegment
argument_list|(
name|namespaces
argument_list|,
name|token
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
specifier|private
name|void
name|addSegment
parameter_list|(
specifier|final
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|namespaces
parameter_list|,
specifier|final
name|String
name|segment
parameter_list|)
block|{
name|String
name|qname
decl_stmt|;
name|int
name|predBeg
init|=
name|segment
operator|.
name|indexOf
argument_list|(
literal|'['
argument_list|)
decl_stmt|;
name|Predicate
name|pred
init|=
literal|null
decl_stmt|;
if|if
condition|(
name|predBeg
operator|>=
literal|0
condition|)
block|{
name|qname
operator|=
name|segment
operator|.
name|substring
argument_list|(
literal|0
argument_list|,
name|predBeg
argument_list|)
expr_stmt|;
name|pred
operator|=
name|parsePredicate
argument_list|(
name|segment
operator|.
name|substring
argument_list|(
name|predBeg
argument_list|)
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|qname
operator|=
name|segment
operator|.
name|trim
argument_list|()
expr_stmt|;
name|pred
operator|=
name|CONST_TRUE_PREDICATE
expr_stmt|;
block|}
if|if
condition|(
literal|"*"
operator|.
name|equals
argument_list|(
name|qname
argument_list|)
condition|)
block|{
name|qnPath
operator|.
name|addComponent
argument_list|(
name|NodePath
operator|.
name|WILDCARD
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|qnPath
operator|.
name|addComponent
argument_list|(
name|namespaces
argument_list|,
name|qname
argument_list|)
expr_stmt|;
block|}
name|predicates
operator|.
name|add
argument_list|(
name|pred
argument_list|)
expr_stmt|;
block|}
specifier|private
name|Predicate
name|parsePredicate
parameter_list|(
name|String
name|input
parameter_list|)
block|{
if|if
condition|(
operator|!
name|input
operator|.
name|startsWith
argument_list|(
literal|"["
argument_list|)
operator|||
operator|!
name|input
operator|.
name|endsWith
argument_list|(
literal|"]"
argument_list|)
operator|||
name|input
operator|.
name|charAt
argument_list|(
literal|1
argument_list|)
operator|!=
literal|'@'
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"Bad predicate spec: "
operator|+
name|input
operator|+
literal|"\nOnly [@attr=value] is supported"
argument_list|)
throw|;
block|}
comment|// So far we're supporting only [@attr=value] predicates:
name|int
name|eqIdx
init|=
name|input
operator|.
name|indexOf
argument_list|(
literal|'='
argument_list|)
decl_stmt|;
if|if
condition|(
name|eqIdx
operator|<
literal|0
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"Bad predicate spec: "
operator|+
name|input
operator|+
literal|"\nOnly [@attr=value] is supported"
argument_list|)
throw|;
block|}
name|String
name|name
init|=
name|input
operator|.
name|substring
argument_list|(
literal|2
argument_list|,
name|eqIdx
argument_list|)
operator|.
name|trim
argument_list|()
decl_stmt|;
comment|// 2 is to skip the leading [@
name|String
name|val
init|=
name|input
operator|.
name|substring
argument_list|(
name|eqIdx
operator|+
literal|1
argument_list|,
name|input
operator|.
name|length
argument_list|()
operator|-
literal|1
argument_list|)
operator|.
name|trim
argument_list|()
decl_stmt|;
comment|// -1 is to skip the trailing ]
if|if
condition|(
operator|!
operator|(
name|val
operator|.
name|startsWith
argument_list|(
literal|"\'"
argument_list|)
operator|&&
name|val
operator|.
name|endsWith
argument_list|(
literal|"\'"
argument_list|)
operator|||
name|val
operator|.
name|startsWith
argument_list|(
literal|"\""
argument_list|)
operator|&&
name|val
operator|.
name|endsWith
argument_list|(
literal|"\""
argument_list|)
operator|)
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"Bad predicate spec: "
operator|+
name|input
operator|+
literal|"\nAttribute value not in quotes"
argument_list|)
throw|;
block|}
else|else
block|{
name|val
operator|=
name|val
operator|.
name|substring
argument_list|(
literal|1
argument_list|,
name|val
operator|.
name|length
argument_list|()
operator|-
literal|1
argument_list|)
expr_stmt|;
comment|// strip the quotes
block|}
return|return
operator|new
name|SimpleAttrEqValuePredicate
argument_list|(
name|name
argument_list|,
name|val
argument_list|)
return|;
block|}
specifier|public
name|int
name|length
parameter_list|()
block|{
return|return
name|qnPath
operator|.
name|length
argument_list|()
return|;
block|}
specifier|public
name|QName
name|getLastComponent
parameter_list|()
block|{
return|return
name|qnPath
operator|.
name|getLastComponent
argument_list|()
return|;
block|}
specifier|public
name|boolean
name|hasWildcard
parameter_list|()
block|{
return|return
name|qnPath
operator|.
name|hasWildcard
argument_list|()
return|;
block|}
specifier|public
specifier|final
name|boolean
name|match
parameter_list|(
specifier|final
name|QName
name|qname
parameter_list|)
block|{
return|return
name|qnPath
operator|.
name|match
argument_list|(
name|qname
argument_list|)
return|;
block|}
specifier|public
specifier|final
name|boolean
name|match
parameter_list|(
specifier|final
name|NodePath
name|other
parameter_list|)
block|{
return|return
name|match
argument_list|(
name|other
argument_list|,
literal|0
argument_list|)
return|;
block|}
specifier|private
specifier|final
name|boolean
name|match
parameter_list|(
specifier|final
name|NodePath
name|o
parameter_list|,
specifier|final
name|int
name|from_pos
parameter_list|)
block|{
comment|// TODO cast NodePath to NodePath2 and do 'extended' matching
specifier|final
name|NodePath2
name|other
init|=
operator|(
name|NodePath2
operator|)
name|o
decl_stmt|;
specifier|final
name|int
name|other_len
init|=
name|other
operator|.
name|length
argument_list|()
decl_stmt|;
specifier|final
name|int
name|len
init|=
name|qnPath
operator|.
name|length
argument_list|()
decl_stmt|;
name|boolean
name|skip
init|=
literal|false
decl_stmt|;
name|int
name|i
init|=
literal|0
decl_stmt|;
name|QName
name|components_i
init|=
literal|null
decl_stmt|;
for|for
control|(
name|int
name|j
init|=
name|from_pos
init|;
name|j
operator|<
name|other_len
condition|;
name|j
operator|++
control|)
block|{
if|if
condition|(
name|i
operator|==
name|len
condition|)
block|{
return|return
name|qnPath
operator|.
name|includeDescendants
argument_list|()
return|;
block|}
if|if
condition|(
name|components_i
operator|==
literal|null
condition|)
name|components_i
operator|=
name|qnPath
operator|.
name|getComponent
argument_list|(
name|i
argument_list|)
expr_stmt|;
if|if
condition|(
name|components_i
operator|==
name|NodePath
operator|.
name|SKIP
condition|)
block|{
name|components_i
operator|=
name|qnPath
operator|.
name|getComponent
argument_list|(
operator|++
name|i
argument_list|)
expr_stmt|;
name|skip
operator|=
literal|true
expr_stmt|;
block|}
if|if
condition|(
operator|(
name|components_i
operator|==
name|NodePath
operator|.
name|WILDCARD
operator|||
name|other
operator|.
name|getComponent
argument_list|(
name|j
argument_list|)
operator|.
name|compareTo
argument_list|(
name|components_i
argument_list|)
operator|==
literal|0
operator|)
operator|&&
name|predicates
operator|.
name|get
argument_list|(
name|i
argument_list|)
operator|.
name|evaluate
argument_list|(
name|other
argument_list|,
name|j
argument_list|)
operator|&&
operator|(
operator|!
name|skip
operator|||
name|j
operator|+
literal|1
operator|==
name|other_len
operator|||
name|other
operator|.
name|getComponent
argument_list|(
name|j
operator|+
literal|1
argument_list|)
operator|.
name|compareTo
argument_list|(
name|components_i
argument_list|)
operator|!=
literal|0
operator|||
operator|!
name|predicates
operator|.
name|get
argument_list|(
name|i
argument_list|)
operator|.
name|evaluate
argument_list|(
name|other
argument_list|,
name|j
operator|+
literal|1
argument_list|)
operator|)
condition|)
block|{
operator|++
name|i
expr_stmt|;
name|components_i
operator|=
literal|null
expr_stmt|;
name|skip
operator|=
literal|false
expr_stmt|;
block|}
if|else if
condition|(
name|skip
condition|)
block|{
continue|continue;
block|}
else|else
block|{
return|return
literal|false
return|;
block|}
block|}
return|return
operator|(
name|i
operator|==
name|len
operator|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|equals
parameter_list|(
specifier|final
name|Object
name|obj
parameter_list|)
block|{
return|return
name|qnPath
operator|.
name|equals
argument_list|(
name|obj
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|int
name|hashCode
parameter_list|()
block|{
return|return
name|qnPath
operator|.
name|hashCode
argument_list|()
return|;
block|}
block|}
end_class

end_unit

