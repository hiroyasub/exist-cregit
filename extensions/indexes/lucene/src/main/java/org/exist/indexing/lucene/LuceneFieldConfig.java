begin_unit|revision:1.0.0;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * eXist Open Source Native XML Database  * Copyright (C) 2001-2019 The eXist Project  * http://exist-db.org  *  * This program is free software; you can redistribute it and/or  * modify it under the terms of the GNU Lesser General Public License  * as published by the Free Software Foundation; either version 2  * of the License, or (at your option) any later version.  *  * This program is distributed in the hope that it will be useful,  * but WITHOUT ANY WARRANTY; without even the implied warranty of  * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the  * GNU Lesser General Public License for more details.  *  * You should have received a copy of the GNU Lesser General Public  * License along with this library; if not, write to the Free Software  * Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA  02110-1301  USA  */
end_comment

begin_package
package|package
name|org
operator|.
name|exist
operator|.
name|indexing
operator|.
name|lucene
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|lang3
operator|.
name|StringUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|analysis
operator|.
name|Analyzer
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|document
operator|.
name|*
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|dom
operator|.
name|persistent
operator|.
name|DocumentImpl
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|dom
operator|.
name|persistent
operator|.
name|NodeProxy
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|numbering
operator|.
name|NodeId
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|security
operator|.
name|PermissionDeniedException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|storage
operator|.
name|DBBroker
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|util
operator|.
name|DatabaseConfigurationException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|xquery
operator|.
name|CompiledXQuery
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|xquery
operator|.
name|XPathException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|xquery
operator|.
name|XQuery
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|xquery
operator|.
name|value
operator|.
name|*
import|;
end_import

begin_import
import|import
name|org
operator|.
name|w3c
operator|.
name|dom
operator|.
name|Element
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|annotation
operator|.
name|Nonnull
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|annotation
operator|.
name|Nullable
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|xml
operator|.
name|datatype
operator|.
name|XMLGregorianCalendar
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Optional
import|;
end_import

begin_comment
comment|/**  * Configuration for a field definition nested inside a lucene index configuration element.  * A field must have a name attribute. It may have an expression attribute containing an XQuery  * expression, which is called to retrieve the content to be indexed. If no expression attribute  * is present, the field will share content with its parent expression.  *  * Optionally an if attribute may contain an XQuery expression to be evaluated. If the effective  * boolean value of the result is false, the field will not be created.  *  * A field may also be associated with an analyzer, could have a type and may be stored or not.  *  * @author Wolfgang Meier  */
end_comment

begin_class
specifier|public
class|class
name|LuceneFieldConfig
extends|extends
name|AbstractFieldConfig
block|{
specifier|private
specifier|final
specifier|static
name|String
name|ATTR_FIELD_NAME
init|=
literal|"name"
decl_stmt|;
specifier|private
specifier|final
specifier|static
name|String
name|ATTR_TYPE
init|=
literal|"type"
decl_stmt|;
specifier|private
specifier|final
specifier|static
name|String
name|ATTR_STORE
init|=
literal|"store"
decl_stmt|;
specifier|private
specifier|final
specifier|static
name|String
name|ATTR_ANALYZER
init|=
literal|"analyzer"
decl_stmt|;
specifier|private
specifier|final
specifier|static
name|String
name|ATTR_IF
init|=
literal|"if"
decl_stmt|;
specifier|protected
name|String
name|fieldName
decl_stmt|;
specifier|protected
name|int
name|type
init|=
name|Type
operator|.
name|STRING
decl_stmt|;
specifier|protected
name|boolean
name|store
init|=
literal|true
decl_stmt|;
specifier|protected
name|Analyzer
name|analyzer
init|=
literal|null
decl_stmt|;
specifier|protected
name|Optional
argument_list|<
name|String
argument_list|>
name|condition
init|=
name|Optional
operator|.
name|empty
argument_list|()
decl_stmt|;
specifier|protected
name|CompiledXQuery
name|compiledCondition
init|=
literal|null
decl_stmt|;
name|LuceneFieldConfig
parameter_list|(
name|LuceneConfig
name|config
parameter_list|,
name|Element
name|configElement
parameter_list|,
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|namespaces
parameter_list|,
name|AnalyzerConfig
name|analyzers
parameter_list|)
throws|throws
name|DatabaseConfigurationException
block|{
name|super
argument_list|(
name|config
argument_list|,
name|configElement
argument_list|,
name|namespaces
argument_list|)
expr_stmt|;
name|fieldName
operator|=
name|configElement
operator|.
name|getAttribute
argument_list|(
name|ATTR_FIELD_NAME
argument_list|)
expr_stmt|;
if|if
condition|(
name|StringUtils
operator|.
name|isEmpty
argument_list|(
name|fieldName
argument_list|)
condition|)
block|{
throw|throw
operator|new
name|DatabaseConfigurationException
argument_list|(
literal|"Invalid config: attribute 'name' must be given"
argument_list|)
throw|;
block|}
specifier|final
name|String
name|typeStr
init|=
name|configElement
operator|.
name|getAttribute
argument_list|(
name|ATTR_TYPE
argument_list|)
decl_stmt|;
if|if
condition|(
name|StringUtils
operator|.
name|isNotEmpty
argument_list|(
name|typeStr
argument_list|)
condition|)
block|{
try|try
block|{
name|this
operator|.
name|type
operator|=
name|Type
operator|.
name|getType
argument_list|(
name|typeStr
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|XPathException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|DatabaseConfigurationException
argument_list|(
literal|"Invalid type declared for field "
operator|+
name|fieldName
operator|+
literal|": "
operator|+
name|typeStr
argument_list|)
throw|;
block|}
block|}
specifier|final
name|String
name|storeStr
init|=
name|configElement
operator|.
name|getAttribute
argument_list|(
name|ATTR_STORE
argument_list|)
decl_stmt|;
if|if
condition|(
name|StringUtils
operator|.
name|isNotEmpty
argument_list|(
name|storeStr
argument_list|)
condition|)
block|{
name|this
operator|.
name|store
operator|=
name|storeStr
operator|.
name|equalsIgnoreCase
argument_list|(
literal|"yes"
argument_list|)
operator|||
name|storeStr
operator|.
name|equalsIgnoreCase
argument_list|(
literal|"true"
argument_list|)
expr_stmt|;
block|}
specifier|final
name|String
name|analyzerOpt
init|=
name|configElement
operator|.
name|getAttribute
argument_list|(
name|ATTR_ANALYZER
argument_list|)
decl_stmt|;
if|if
condition|(
name|StringUtils
operator|.
name|isNotEmpty
argument_list|(
name|analyzerOpt
argument_list|)
condition|)
block|{
name|analyzer
operator|=
name|analyzers
operator|.
name|getAnalyzerById
argument_list|(
name|analyzerOpt
argument_list|)
expr_stmt|;
if|if
condition|(
name|analyzer
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|DatabaseConfigurationException
argument_list|(
literal|"Analyzer for field "
operator|+
name|fieldName
operator|+
literal|" not found"
argument_list|)
throw|;
block|}
block|}
specifier|final
name|String
name|cond
init|=
name|configElement
operator|.
name|getAttribute
argument_list|(
name|ATTR_IF
argument_list|)
decl_stmt|;
if|if
condition|(
name|StringUtils
operator|.
name|isNotEmpty
argument_list|(
name|cond
argument_list|)
condition|)
block|{
name|this
operator|.
name|condition
operator|=
name|Optional
operator|.
name|of
argument_list|(
name|cond
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Nonnull
specifier|public
name|String
name|getName
parameter_list|()
block|{
return|return
name|fieldName
return|;
block|}
annotation|@
name|Nullable
annotation|@
name|Override
specifier|public
name|Analyzer
name|getAnalyzer
parameter_list|()
block|{
return|return
name|analyzer
return|;
block|}
annotation|@
name|Override
specifier|protected
name|void
name|build
parameter_list|(
name|DBBroker
name|broker
parameter_list|,
name|DocumentImpl
name|document
parameter_list|,
name|NodeId
name|nodeId
parameter_list|,
name|Document
name|luceneDoc
parameter_list|,
name|CharSequence
name|text
parameter_list|)
block|{
try|try
block|{
if|if
condition|(
name|checkCondition
argument_list|(
name|broker
argument_list|,
name|document
argument_list|,
name|nodeId
argument_list|)
condition|)
block|{
name|doBuild
argument_list|(
name|broker
argument_list|,
name|document
argument_list|,
name|nodeId
argument_list|,
name|luceneDoc
argument_list|,
name|text
argument_list|)
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
name|XPathException
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|warn
argument_list|(
literal|"XPath error while evaluating expression for field named '"
operator|+
name|fieldName
operator|+
literal|"': "
operator|+
name|expression
operator|+
literal|": "
operator|+
name|e
operator|.
name|getMessage
argument_list|()
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|PermissionDeniedException
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|warn
argument_list|(
literal|"Permission denied while evaluating expression for field named '"
operator|+
name|fieldName
operator|+
literal|"': "
operator|+
name|expression
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
block|}
specifier|private
name|boolean
name|checkCondition
parameter_list|(
name|DBBroker
name|broker
parameter_list|,
name|DocumentImpl
name|document
parameter_list|,
name|NodeId
name|nodeId
parameter_list|)
throws|throws
name|PermissionDeniedException
throws|,
name|XPathException
block|{
if|if
condition|(
operator|!
name|condition
operator|.
name|isPresent
argument_list|()
condition|)
block|{
return|return
literal|true
return|;
block|}
if|if
condition|(
name|compiledCondition
operator|==
literal|null
operator|&&
name|isValid
condition|)
block|{
name|compiledCondition
operator|=
name|compile
argument_list|(
name|broker
argument_list|,
name|condition
operator|.
name|get
argument_list|()
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
operator|!
name|isValid
condition|)
block|{
return|return
literal|false
return|;
block|}
specifier|final
name|XQuery
name|xquery
init|=
name|broker
operator|.
name|getBrokerPool
argument_list|()
operator|.
name|getXQueryService
argument_list|()
decl_stmt|;
specifier|final
name|NodeProxy
name|currentNode
init|=
operator|new
name|NodeProxy
argument_list|(
name|document
argument_list|,
name|nodeId
argument_list|)
decl_stmt|;
try|try
block|{
name|Sequence
name|result
init|=
name|xquery
operator|.
name|execute
argument_list|(
name|broker
argument_list|,
name|compiledCondition
argument_list|,
name|currentNode
argument_list|)
decl_stmt|;
return|return
name|result
operator|!=
literal|null
operator|&&
name|result
operator|.
name|effectiveBooleanValue
argument_list|()
return|;
block|}
catch|catch
parameter_list|(
name|PermissionDeniedException
decl||
name|XPathException
name|e
parameter_list|)
block|{
name|isValid
operator|=
literal|false
expr_stmt|;
throw|throw
name|e
throw|;
block|}
finally|finally
block|{
name|compiledCondition
operator|.
name|reset
argument_list|()
expr_stmt|;
name|compiledCondition
operator|.
name|getContext
argument_list|()
operator|.
name|reset
argument_list|()
expr_stmt|;
block|}
block|}
annotation|@
name|Override
specifier|protected
name|void
name|processResult
parameter_list|(
name|Sequence
name|result
parameter_list|,
name|Document
name|luceneDoc
parameter_list|)
throws|throws
name|XPathException
block|{
for|for
control|(
name|SequenceIterator
name|i
init|=
name|result
operator|.
name|unorderedIterator
argument_list|()
init|;
name|i
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
specifier|final
name|String
name|text
init|=
name|i
operator|.
name|nextItem
argument_list|()
operator|.
name|getStringValue
argument_list|()
decl_stmt|;
specifier|final
name|Field
name|field
init|=
name|convertToField
argument_list|(
name|text
argument_list|)
decl_stmt|;
if|if
condition|(
name|field
operator|!=
literal|null
condition|)
block|{
name|luceneDoc
operator|.
name|add
argument_list|(
name|field
argument_list|)
expr_stmt|;
block|}
block|}
block|}
annotation|@
name|Override
specifier|protected
name|void
name|processText
parameter_list|(
name|CharSequence
name|text
parameter_list|,
name|Document
name|luceneDoc
parameter_list|)
block|{
specifier|final
name|Field
name|field
init|=
name|convertToField
argument_list|(
name|text
operator|.
name|toString
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|field
operator|!=
literal|null
condition|)
block|{
name|luceneDoc
operator|.
name|add
argument_list|(
name|field
argument_list|)
expr_stmt|;
block|}
block|}
specifier|private
name|Field
name|convertToField
parameter_list|(
name|String
name|content
parameter_list|)
block|{
try|try
block|{
switch|switch
condition|(
name|type
condition|)
block|{
case|case
name|Type
operator|.
name|INTEGER
case|:
case|case
name|Type
operator|.
name|LONG
case|:
case|case
name|Type
operator|.
name|UNSIGNED_LONG
case|:
name|long
name|lvalue
init|=
name|Long
operator|.
name|parseLong
argument_list|(
name|content
argument_list|)
decl_stmt|;
return|return
operator|new
name|LongField
argument_list|(
name|fieldName
argument_list|,
name|lvalue
argument_list|,
name|LongField
operator|.
name|TYPE_STORED
argument_list|)
return|;
case|case
name|Type
operator|.
name|INT
case|:
case|case
name|Type
operator|.
name|UNSIGNED_INT
case|:
case|case
name|Type
operator|.
name|SHORT
case|:
case|case
name|Type
operator|.
name|UNSIGNED_SHORT
case|:
name|int
name|ivalue
init|=
name|Integer
operator|.
name|parseInt
argument_list|(
name|content
argument_list|)
decl_stmt|;
return|return
operator|new
name|IntField
argument_list|(
name|fieldName
argument_list|,
name|ivalue
argument_list|,
name|IntField
operator|.
name|TYPE_STORED
argument_list|)
return|;
case|case
name|Type
operator|.
name|DECIMAL
case|:
case|case
name|Type
operator|.
name|DOUBLE
case|:
name|double
name|dvalue
init|=
name|Double
operator|.
name|parseDouble
argument_list|(
name|content
argument_list|)
decl_stmt|;
return|return
operator|new
name|DoubleField
argument_list|(
name|fieldName
argument_list|,
name|dvalue
argument_list|,
name|DoubleField
operator|.
name|TYPE_STORED
argument_list|)
return|;
case|case
name|Type
operator|.
name|FLOAT
case|:
name|float
name|fvalue
init|=
name|Float
operator|.
name|parseFloat
argument_list|(
name|content
argument_list|)
decl_stmt|;
return|return
operator|new
name|FloatField
argument_list|(
name|fieldName
argument_list|,
name|fvalue
argument_list|,
name|FloatField
operator|.
name|TYPE_STORED
argument_list|)
return|;
case|case
name|Type
operator|.
name|DATE
case|:
name|DateValue
name|dv
init|=
operator|new
name|DateValue
argument_list|(
name|content
argument_list|)
decl_stmt|;
name|long
name|dl
init|=
name|dateToLong
argument_list|(
name|dv
argument_list|)
decl_stmt|;
return|return
operator|new
name|LongField
argument_list|(
name|fieldName
argument_list|,
name|dl
argument_list|,
name|LongField
operator|.
name|TYPE_STORED
argument_list|)
return|;
case|case
name|Type
operator|.
name|TIME
case|:
name|TimeValue
name|tv
init|=
operator|new
name|TimeValue
argument_list|(
name|content
argument_list|)
decl_stmt|;
name|long
name|tl
init|=
name|timeToLong
argument_list|(
name|tv
argument_list|)
decl_stmt|;
return|return
operator|new
name|LongField
argument_list|(
name|fieldName
argument_list|,
name|tl
argument_list|,
name|LongField
operator|.
name|TYPE_STORED
argument_list|)
return|;
case|case
name|Type
operator|.
name|DATE_TIME
case|:
name|DateTimeValue
name|dtv
init|=
operator|new
name|DateTimeValue
argument_list|(
name|content
argument_list|)
decl_stmt|;
name|String
name|dateStr
init|=
name|dateTimeToString
argument_list|(
name|dtv
argument_list|)
decl_stmt|;
return|return
operator|new
name|TextField
argument_list|(
name|fieldName
argument_list|,
name|dateStr
argument_list|,
name|Field
operator|.
name|Store
operator|.
name|YES
argument_list|)
return|;
default|default:
return|return
operator|new
name|TextField
argument_list|(
name|fieldName
argument_list|,
name|content
argument_list|,
name|store
condition|?
name|Field
operator|.
name|Store
operator|.
name|YES
else|:
name|Field
operator|.
name|Store
operator|.
name|NO
argument_list|)
return|;
block|}
block|}
catch|catch
parameter_list|(
name|NumberFormatException
decl||
name|XPathException
name|e
parameter_list|)
block|{
comment|// wrong type: ignore
name|LOG
operator|.
name|trace
argument_list|(
literal|"Cannot convert field "
operator|+
name|fieldName
operator|+
literal|" to type "
operator|+
name|Type
operator|.
name|getTypeName
argument_list|(
name|type
argument_list|)
operator|+
literal|". Content was: "
operator|+
name|content
argument_list|)
expr_stmt|;
block|}
return|return
literal|null
return|;
block|}
specifier|private
specifier|static
name|long
name|dateToLong
parameter_list|(
name|DateValue
name|date
parameter_list|)
block|{
specifier|final
name|XMLGregorianCalendar
name|utccal
init|=
name|date
operator|.
name|calendar
operator|.
name|normalize
argument_list|()
decl_stmt|;
return|return
operator|(
operator|(
name|long
operator|)
name|utccal
operator|.
name|getYear
argument_list|()
operator|<<
literal|16
operator|)
operator|+
operator|(
operator|(
name|long
operator|)
name|utccal
operator|.
name|getMonth
argument_list|()
operator|<<
literal|8
operator|)
operator|+
operator|(
operator|(
name|long
operator|)
name|utccal
operator|.
name|getDay
argument_list|()
operator|)
return|;
block|}
specifier|private
specifier|static
name|long
name|timeToLong
parameter_list|(
name|TimeValue
name|time
parameter_list|)
block|{
return|return
name|time
operator|.
name|getTimeInMillis
argument_list|()
return|;
block|}
specifier|private
specifier|static
name|String
name|dateTimeToString
parameter_list|(
name|DateTimeValue
name|dtv
parameter_list|)
block|{
specifier|final
name|XMLGregorianCalendar
name|utccal
init|=
name|dtv
operator|.
name|calendar
operator|.
name|normalize
argument_list|()
decl_stmt|;
specifier|final
name|StringBuilder
name|sb
init|=
operator|new
name|StringBuilder
argument_list|()
decl_stmt|;
name|formatNumber
argument_list|(
name|utccal
operator|.
name|getMillisecond
argument_list|()
argument_list|,
literal|3
argument_list|,
name|sb
argument_list|)
expr_stmt|;
name|formatNumber
argument_list|(
name|utccal
operator|.
name|getSecond
argument_list|()
argument_list|,
literal|2
argument_list|,
name|sb
argument_list|)
expr_stmt|;
name|formatNumber
argument_list|(
name|utccal
operator|.
name|getMinute
argument_list|()
argument_list|,
literal|2
argument_list|,
name|sb
argument_list|)
expr_stmt|;
name|formatNumber
argument_list|(
name|utccal
operator|.
name|getHour
argument_list|()
argument_list|,
literal|2
argument_list|,
name|sb
argument_list|)
expr_stmt|;
name|formatNumber
argument_list|(
name|utccal
operator|.
name|getDay
argument_list|()
argument_list|,
literal|2
argument_list|,
name|sb
argument_list|)
expr_stmt|;
name|formatNumber
argument_list|(
name|utccal
operator|.
name|getMonth
argument_list|()
argument_list|,
literal|2
argument_list|,
name|sb
argument_list|)
expr_stmt|;
name|formatNumber
argument_list|(
name|utccal
operator|.
name|getYear
argument_list|()
argument_list|,
literal|4
argument_list|,
name|sb
argument_list|)
expr_stmt|;
return|return
name|sb
operator|.
name|toString
argument_list|()
return|;
block|}
specifier|private
specifier|static
name|void
name|formatNumber
parameter_list|(
name|int
name|number
parameter_list|,
name|int
name|digits
parameter_list|,
name|StringBuilder
name|sb
parameter_list|)
block|{
name|int
name|count
init|=
literal|0
decl_stmt|;
name|long
name|n
init|=
name|number
decl_stmt|;
while|while
condition|(
name|n
operator|>
literal|0
condition|)
block|{
specifier|final
name|int
name|digit
init|=
literal|'0'
operator|+
operator|(
name|int
operator|)
name|n
operator|%
literal|10
decl_stmt|;
name|sb
operator|.
name|insert
argument_list|(
literal|0
argument_list|,
operator|(
name|char
operator|)
name|digit
argument_list|)
expr_stmt|;
name|count
operator|++
expr_stmt|;
if|if
condition|(
name|count
operator|==
name|digits
condition|)
block|{
break|break;
block|}
name|n
operator|=
name|n
operator|/
literal|10
expr_stmt|;
block|}
if|if
condition|(
name|count
operator|<
name|digits
condition|)
block|{
for|for
control|(
name|int
name|i
init|=
name|count
init|;
name|i
operator|<
name|digits
condition|;
name|i
operator|++
control|)
block|{
name|sb
operator|.
name|insert
argument_list|(
literal|0
argument_list|,
literal|'0'
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
end_class

end_unit

