begin_unit|revision:1.0.0;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  *  eXist Open Source Native XML Database  *  Copyright (C) 2001-2015 The eXist Project  *  http://exist-db.org  *  *  This program is free software; you can redistribute it and/or  *  modify it under the terms of the GNU Lesser General Public License  *  as published by the Free Software Foundation; either version 2  *  of the License, or (at your option) any later version.  *  *  This program is distributed in the hope that it will be useful,  *  but WITHOUT ANY WARRANTY; without even the implied warranty of  *  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the  *  GNU Lesser General Public License for more details.  *  *  You should have received a copy of the GNU Lesser General Public  *  License along with this library; if not, write to the Free Software  *  Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA  02110-1301  USA  */
end_comment

begin_package
package|package
name|org
operator|.
name|exist
operator|.
name|indexing
operator|.
name|lucene
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|analysis
operator|.
name|TokenStream
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|analysis
operator|.
name|tokenattributes
operator|.
name|TermToBytesRefAttribute
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|util
operator|.
name|AttributeImpl
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|util
operator|.
name|BytesRef
import|;
end_import

begin_comment
comment|/**  * A binary tokenstream that lets you index a single  * binary token (BytesRef value).  *  */
end_comment

begin_class
specifier|public
specifier|final
class|class
name|BinaryTokenStream
extends|extends
name|TokenStream
block|{
specifier|private
specifier|final
name|ByteTermAttribute
name|bytesAtt
init|=
name|addAttribute
argument_list|(
name|ByteTermAttribute
operator|.
name|class
argument_list|)
decl_stmt|;
specifier|private
name|boolean
name|available
init|=
literal|true
decl_stmt|;
specifier|public
name|BinaryTokenStream
parameter_list|(
name|BytesRef
name|bytes
parameter_list|)
block|{
name|bytesAtt
operator|.
name|setBytesRef
argument_list|(
name|bytes
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|incrementToken
parameter_list|()
block|{
if|if
condition|(
name|available
condition|)
block|{
name|available
operator|=
literal|false
expr_stmt|;
return|return
literal|true
return|;
block|}
return|return
literal|false
return|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|reset
parameter_list|()
block|{
name|available
operator|=
literal|true
expr_stmt|;
block|}
specifier|public
interface|interface
name|ByteTermAttribute
extends|extends
name|TermToBytesRefAttribute
block|{
specifier|public
name|void
name|setBytesRef
parameter_list|(
name|BytesRef
name|bytes
parameter_list|)
function_decl|;
block|}
specifier|public
specifier|static
class|class
name|ByteTermAttributeImpl
extends|extends
name|AttributeImpl
implements|implements
name|ByteTermAttribute
implements|,
name|TermToBytesRefAttribute
block|{
specifier|private
name|BytesRef
name|bytes
decl_stmt|;
annotation|@
name|Override
specifier|public
name|void
name|fillBytesRef
parameter_list|()
block|{
block|}
annotation|@
name|Override
specifier|public
name|BytesRef
name|getBytesRef
parameter_list|()
block|{
return|return
name|bytes
return|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|setBytesRef
parameter_list|(
name|BytesRef
name|bytes
parameter_list|)
block|{
name|this
operator|.
name|bytes
operator|=
name|bytes
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|clear
parameter_list|()
block|{
block|}
annotation|@
name|Override
specifier|public
name|void
name|copyTo
parameter_list|(
name|AttributeImpl
name|target
parameter_list|)
block|{
name|ByteTermAttributeImpl
name|other
init|=
operator|(
name|ByteTermAttributeImpl
operator|)
name|target
decl_stmt|;
name|other
operator|.
name|bytes
operator|=
name|bytes
expr_stmt|;
block|}
block|}
block|}
end_class

end_unit

