begin_unit|revision:1.0.0;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * eXist Open Source Native XML Database  * Copyright (C) 2001-2019 The eXist Project  * http://exist-db.org  *  * This program is free software; you can redistribute it and/or  * modify it under the terms of the GNU Lesser General Public License  * as published by the Free Software Foundation; either version 2  * of the License, or (at your option) any later version.  *  * This program is distributed in the hope that it will be useful,  * but WITHOUT ANY WARRANTY; without even the implied warranty of  * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the  * GNU Lesser General Public License for more details.  *  * You should have received a copy of the GNU Lesser General Public  * License along with this library; if not, write to the Free Software  * Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA  02110-1301  USA  */
end_comment

begin_package
package|package
name|org
operator|.
name|exist
operator|.
name|indexing
operator|.
name|lucene
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|facet
operator|.
name|FacetsConfig
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|util
operator|.
name|DatabaseConfigurationException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|w3c
operator|.
name|dom
operator|.
name|Element
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_class
specifier|public
class|class
name|LuceneFacetConfig
block|{
specifier|public
specifier|final
specifier|static
name|String
name|CATEGORY_ATTR
init|=
literal|"category"
decl_stmt|;
specifier|public
specifier|final
specifier|static
name|String
name|XPATH_ATTR
init|=
literal|"xpath"
decl_stmt|;
specifier|protected
name|String
name|category
decl_stmt|;
specifier|protected
name|String
name|expression
decl_stmt|;
specifier|protected
name|FacetsBuilder
name|builder
decl_stmt|;
specifier|public
name|LuceneFacetConfig
parameter_list|(
name|Element
name|configElement
parameter_list|,
name|FacetsConfig
name|facetsConfig
parameter_list|,
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|namespaces
parameter_list|)
throws|throws
name|DatabaseConfigurationException
block|{
name|this
operator|.
name|category
operator|=
name|configElement
operator|.
name|getAttribute
argument_list|(
name|CATEGORY_ATTR
argument_list|)
expr_stmt|;
specifier|final
name|String
name|xpath
init|=
name|configElement
operator|.
name|getAttribute
argument_list|(
name|XPATH_ATTR
argument_list|)
decl_stmt|;
if|if
condition|(
name|xpath
operator|==
literal|null
operator|||
name|xpath
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
throw|throw
operator|new
name|DatabaseConfigurationException
argument_list|(
literal|"facet definition needs an attribute 'xpath': "
operator|+
name|configElement
operator|.
name|toString
argument_list|()
argument_list|)
throw|;
block|}
specifier|final
name|StringBuilder
name|sb
init|=
operator|new
name|StringBuilder
argument_list|()
decl_stmt|;
name|namespaces
operator|.
name|forEach
argument_list|(
parameter_list|(
name|prefix
parameter_list|,
name|uri
parameter_list|)
lambda|->
block|{
if|if
condition|(
operator|!
name|prefix
operator|.
name|equals
argument_list|(
literal|"xml"
argument_list|)
condition|)
block|{
name|sb
operator|.
name|append
argument_list|(
literal|"declare namespace "
argument_list|)
operator|.
name|append
argument_list|(
name|prefix
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|"=\""
argument_list|)
operator|.
name|append
argument_list|(
name|uri
argument_list|)
operator|.
name|append
argument_list|(
literal|"\";\n"
argument_list|)
expr_stmt|;
block|}
block|}
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
name|xpath
argument_list|)
expr_stmt|;
name|this
operator|.
name|expression
operator|=
name|sb
operator|.
name|toString
argument_list|()
expr_stmt|;
name|facetsConfig
operator|.
name|setMultiValued
argument_list|(
name|category
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|builder
operator|=
operator|new
name|FacetsBuilder
argument_list|(
name|this
argument_list|)
expr_stmt|;
block|}
specifier|public
name|String
name|getCategory
parameter_list|()
block|{
return|return
name|category
return|;
block|}
specifier|public
name|String
name|getExpression
parameter_list|()
block|{
return|return
name|expression
return|;
block|}
block|}
end_class

end_unit

