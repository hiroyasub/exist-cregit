begin_unit|revision:1.0.0;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * eXist Open Source Native XML Database  * Copyright (C) 2001-2019 The eXist Project  * http://exist-db.org  *  * This program is free software; you can redistribute it and/or  * modify it under the terms of the GNU Lesser General Public License  * as published by the Free Software Foundation; either version 2  * of the License, or (at your option) any later version.  *  * This program is distributed in the hope that it will be useful,  * but WITHOUT ANY WARRANTY; without even the implied warranty of  * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the  * GNU Lesser General Public License for more details.  *  * You should have received a copy of the GNU Lesser General Public  * License along with this library; if not, write to the Free Software  * Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA  02110-1301  USA  */
end_comment

begin_package
package|package
name|org
operator|.
name|exist
operator|.
name|indexing
operator|.
name|lucene
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|lang3
operator|.
name|StringUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|document
operator|.
name|Document
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|facet
operator|.
name|FacetField
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|dom
operator|.
name|persistent
operator|.
name|DocumentImpl
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|numbering
operator|.
name|NodeId
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|security
operator|.
name|PermissionDeniedException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|storage
operator|.
name|DBBroker
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|util
operator|.
name|DatabaseConfigurationException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|xquery
operator|.
name|XPathException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|xquery
operator|.
name|functions
operator|.
name|array
operator|.
name|ArrayType
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|xquery
operator|.
name|value
operator|.
name|Sequence
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|xquery
operator|.
name|value
operator|.
name|SequenceIterator
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|xquery
operator|.
name|value
operator|.
name|Type
import|;
end_import

begin_import
import|import
name|org
operator|.
name|w3c
operator|.
name|dom
operator|.
name|Element
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|annotation
operator|.
name|Nonnull
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_comment
comment|/**  * Configuration for a facet definition nested inside a lucene index configuration element.  * A facet has a dimension and content returned by an XQuery expression.  *  * @author Wolfgang Meier  */
end_comment

begin_class
specifier|public
class|class
name|LuceneFacetConfig
extends|extends
name|AbstractFieldConfig
block|{
specifier|public
specifier|final
specifier|static
name|String
name|DIMENSION
init|=
literal|"dimension"
decl_stmt|;
specifier|public
specifier|final
specifier|static
name|String
name|HIERARCHICAL
init|=
literal|"hierarchical"
decl_stmt|;
specifier|protected
name|String
name|dimension
decl_stmt|;
specifier|protected
name|boolean
name|isHierarchical
decl_stmt|;
specifier|public
name|LuceneFacetConfig
parameter_list|(
name|LuceneConfig
name|config
parameter_list|,
name|Element
name|configElement
parameter_list|,
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|namespaces
parameter_list|)
throws|throws
name|DatabaseConfigurationException
block|{
name|super
argument_list|(
name|config
argument_list|,
name|configElement
argument_list|,
name|namespaces
argument_list|)
expr_stmt|;
name|dimension
operator|=
name|configElement
operator|.
name|getAttribute
argument_list|(
name|DIMENSION
argument_list|)
expr_stmt|;
if|if
condition|(
name|StringUtils
operator|.
name|isEmpty
argument_list|(
name|dimension
argument_list|)
condition|)
block|{
throw|throw
operator|new
name|DatabaseConfigurationException
argument_list|(
literal|"Attribute 'dimension' on facet configuration should not be empty"
argument_list|)
throw|;
block|}
specifier|final
name|String
name|hierarchicalOpt
init|=
name|configElement
operator|.
name|getAttribute
argument_list|(
name|HIERARCHICAL
argument_list|)
decl_stmt|;
name|isHierarchical
operator|=
name|hierarchicalOpt
operator|!=
literal|null
operator|&&
operator|(
name|hierarchicalOpt
operator|.
name|equalsIgnoreCase
argument_list|(
literal|"true"
argument_list|)
operator|||
name|hierarchicalOpt
operator|.
name|equalsIgnoreCase
argument_list|(
literal|"yes"
argument_list|)
operator|)
expr_stmt|;
name|config
operator|.
name|facetsConfig
operator|.
name|setHierarchical
argument_list|(
name|dimension
argument_list|,
name|isHierarchical
argument_list|)
expr_stmt|;
name|config
operator|.
name|facetsConfig
operator|.
name|setMultiValued
argument_list|(
name|dimension
argument_list|,
literal|true
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Nonnull
specifier|public
name|String
name|getDimension
parameter_list|()
block|{
return|return
name|dimension
return|;
block|}
annotation|@
name|Override
specifier|protected
name|void
name|processResult
parameter_list|(
specifier|final
name|Sequence
name|result
parameter_list|,
specifier|final
name|Document
name|luceneDoc
parameter_list|)
throws|throws
name|XPathException
block|{
if|if
condition|(
name|isHierarchical
condition|)
block|{
comment|// hierarchical facets may be multi-valued, so if we receive an array,
comment|// create one hierarchical facet for each member
if|if
condition|(
name|result
operator|.
name|hasOne
argument_list|()
operator|&&
name|result
operator|.
name|getItemType
argument_list|()
operator|==
name|Type
operator|.
name|ARRAY
condition|)
block|{
specifier|final
name|ArrayType
name|array
init|=
operator|(
name|ArrayType
operator|)
name|result
operator|.
name|itemAt
argument_list|(
literal|0
argument_list|)
decl_stmt|;
for|for
control|(
name|Sequence
name|seq
range|:
name|array
operator|.
name|toArray
argument_list|()
control|)
block|{
name|createHierarchicalFacet
argument_list|(
name|luceneDoc
argument_list|,
name|seq
argument_list|)
expr_stmt|;
block|}
block|}
else|else
block|{
comment|// otherwise create a single hierarchical facet
name|createHierarchicalFacet
argument_list|(
name|luceneDoc
argument_list|,
name|result
argument_list|)
expr_stmt|;
block|}
block|}
else|else
block|{
for|for
control|(
name|SequenceIterator
name|i
init|=
name|result
operator|.
name|unorderedIterator
argument_list|()
init|;
name|i
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
specifier|final
name|String
name|value
init|=
name|i
operator|.
name|nextItem
argument_list|()
operator|.
name|getStringValue
argument_list|()
decl_stmt|;
if|if
condition|(
name|value
operator|.
name|length
argument_list|()
operator|>
literal|0
condition|)
block|{
name|luceneDoc
operator|.
name|add
argument_list|(
operator|new
name|FacetField
argument_list|(
name|dimension
argument_list|,
name|value
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
specifier|private
name|void
name|createHierarchicalFacet
parameter_list|(
name|Document
name|luceneDoc
parameter_list|,
name|Sequence
name|seq
parameter_list|)
throws|throws
name|XPathException
block|{
specifier|final
name|List
argument_list|<
name|String
argument_list|>
name|paths
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|(
name|seq
operator|.
name|getItemCount
argument_list|()
argument_list|)
decl_stmt|;
for|for
control|(
name|SequenceIterator
name|i
init|=
name|seq
operator|.
name|unorderedIterator
argument_list|()
init|;
name|i
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
specifier|final
name|String
name|value
init|=
name|i
operator|.
name|nextItem
argument_list|()
operator|.
name|getStringValue
argument_list|()
decl_stmt|;
if|if
condition|(
name|value
operator|.
name|length
argument_list|()
operator|>
literal|0
condition|)
block|{
name|paths
operator|.
name|add
argument_list|(
name|value
argument_list|)
expr_stmt|;
block|}
block|}
if|if
condition|(
operator|!
name|paths
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|luceneDoc
operator|.
name|add
argument_list|(
operator|new
name|FacetField
argument_list|(
name|dimension
argument_list|,
name|paths
operator|.
name|toArray
argument_list|(
operator|new
name|String
index|[
literal|0
index|]
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Override
specifier|protected
name|void
name|processText
parameter_list|(
name|CharSequence
name|text
parameter_list|,
name|Document
name|luceneDoc
parameter_list|)
block|{
if|if
condition|(
name|text
operator|.
name|length
argument_list|()
operator|>
literal|0
condition|)
block|{
name|luceneDoc
operator|.
name|add
argument_list|(
operator|new
name|FacetField
argument_list|(
name|dimension
argument_list|,
name|text
operator|.
name|toString
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
specifier|public
name|void
name|build
parameter_list|(
name|DBBroker
name|broker
parameter_list|,
name|DocumentImpl
name|document
parameter_list|,
name|NodeId
name|nodeId
parameter_list|,
name|Document
name|luceneDoc
parameter_list|,
name|CharSequence
name|text
parameter_list|)
block|{
try|try
block|{
name|doBuild
argument_list|(
name|broker
argument_list|,
name|document
argument_list|,
name|nodeId
argument_list|,
name|luceneDoc
argument_list|,
name|text
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|PermissionDeniedException
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|warn
argument_list|(
literal|"Permission denied while evaluating expression for facet '"
operator|+
name|dimension
operator|+
literal|"': "
operator|+
name|expression
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|XPathException
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|warn
argument_list|(
literal|"XPath error while evaluating expression for facet '"
operator|+
name|dimension
operator|+
literal|"': "
operator|+
name|expression
operator|+
literal|": "
operator|+
name|e
operator|.
name|getMessage
argument_list|()
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
block|}
block|}
end_class

end_unit

