begin_unit|revision:1.0.0;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * eXist Open Source Native XML Database  * Copyright (C) 2001-2019 The eXist Project  * http://exist-db.org  *  * This program is free software; you can redistribute it and/or  * modify it under the terms of the GNU Lesser General Public License  * as published by the Free Software Foundation; either version 2  * of the License, or (at your option) any later version.  *  * This program is distributed in the hope that it will be useful,  * but WITHOUT ANY WARRANTY; without even the implied warranty of  * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the  * GNU Lesser General Public License for more details.  *  * You should have received a copy of the GNU Lesser General Public  * License along with this library; if not, write to the Free Software  * Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA  02110-1301  USA  */
end_comment

begin_package
package|package
name|org
operator|.
name|exist
operator|.
name|indexing
operator|.
name|lucene
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|logging
operator|.
name|log4j
operator|.
name|LogManager
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|logging
operator|.
name|log4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|document
operator|.
name|Document
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|facet
operator|.
name|FacetField
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|facet
operator|.
name|FacetsConfig
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|dom
operator|.
name|persistent
operator|.
name|DocumentImpl
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|dom
operator|.
name|persistent
operator|.
name|NodeProxy
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|numbering
operator|.
name|NodeId
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|security
operator|.
name|PermissionDeniedException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|storage
operator|.
name|DBBroker
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|util
operator|.
name|DatabaseConfigurationException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|xquery
operator|.
name|CompiledXQuery
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|xquery
operator|.
name|XPathException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|xquery
operator|.
name|XQuery
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|xquery
operator|.
name|XQueryContext
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|xquery
operator|.
name|value
operator|.
name|Sequence
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|xquery
operator|.
name|value
operator|.
name|SequenceIterator
import|;
end_import

begin_import
import|import
name|org
operator|.
name|w3c
operator|.
name|dom
operator|.
name|Element
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_class
specifier|public
class|class
name|LuceneFacetConfig
block|{
specifier|static
specifier|final
name|Logger
name|LOG
init|=
name|LogManager
operator|.
name|getLogger
argument_list|(
name|LuceneFacetConfig
operator|.
name|class
argument_list|)
decl_stmt|;
specifier|public
specifier|final
specifier|static
name|String
name|DIMENSION
init|=
literal|"dimension"
decl_stmt|;
specifier|public
specifier|final
specifier|static
name|String
name|XPATH_ATTR
init|=
literal|"expression"
decl_stmt|;
specifier|public
specifier|final
specifier|static
name|String
name|HIERARCHICAL
init|=
literal|"hierarchical"
decl_stmt|;
specifier|protected
name|String
name|dimension
decl_stmt|;
specifier|protected
name|String
name|expression
decl_stmt|;
specifier|protected
name|boolean
name|isHierarchical
init|=
literal|false
decl_stmt|;
specifier|private
name|boolean
name|isValid
init|=
literal|true
decl_stmt|;
specifier|private
name|CompiledXQuery
name|compiled
init|=
literal|null
decl_stmt|;
specifier|public
name|LuceneFacetConfig
parameter_list|(
name|Element
name|configElement
parameter_list|,
name|FacetsConfig
name|facetsConfig
parameter_list|,
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|namespaces
parameter_list|)
throws|throws
name|DatabaseConfigurationException
block|{
name|this
operator|.
name|dimension
operator|=
name|configElement
operator|.
name|getAttribute
argument_list|(
name|DIMENSION
argument_list|)
expr_stmt|;
specifier|final
name|String
name|xpath
init|=
name|configElement
operator|.
name|getAttribute
argument_list|(
name|XPATH_ATTR
argument_list|)
decl_stmt|;
if|if
condition|(
name|xpath
operator|==
literal|null
operator|||
name|xpath
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
throw|throw
operator|new
name|DatabaseConfigurationException
argument_list|(
literal|"facet definition needs an attribute 'xpath': "
operator|+
name|configElement
operator|.
name|toString
argument_list|()
argument_list|)
throw|;
block|}
specifier|final
name|String
name|hierarchicalOpt
init|=
name|configElement
operator|.
name|getAttribute
argument_list|(
name|HIERARCHICAL
argument_list|)
decl_stmt|;
name|isHierarchical
operator|=
name|hierarchicalOpt
operator|!=
literal|null
operator|&&
operator|(
name|hierarchicalOpt
operator|.
name|equalsIgnoreCase
argument_list|(
literal|"true"
argument_list|)
operator|||
name|hierarchicalOpt
operator|.
name|equalsIgnoreCase
argument_list|(
literal|"yes"
argument_list|)
operator|)
expr_stmt|;
specifier|final
name|StringBuilder
name|sb
init|=
operator|new
name|StringBuilder
argument_list|()
decl_stmt|;
name|namespaces
operator|.
name|forEach
argument_list|(
parameter_list|(
name|prefix
parameter_list|,
name|uri
parameter_list|)
lambda|->
block|{
if|if
condition|(
operator|!
name|prefix
operator|.
name|equals
argument_list|(
literal|"xml"
argument_list|)
condition|)
block|{
name|sb
operator|.
name|append
argument_list|(
literal|"declare namespace "
argument_list|)
operator|.
name|append
argument_list|(
name|prefix
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|"=\""
argument_list|)
operator|.
name|append
argument_list|(
name|uri
argument_list|)
operator|.
name|append
argument_list|(
literal|"\";\n"
argument_list|)
expr_stmt|;
block|}
block|}
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
name|xpath
argument_list|)
expr_stmt|;
name|this
operator|.
name|expression
operator|=
name|sb
operator|.
name|toString
argument_list|()
expr_stmt|;
name|facetsConfig
operator|.
name|setHierarchical
argument_list|(
name|dimension
argument_list|,
name|isHierarchical
argument_list|)
expr_stmt|;
name|facetsConfig
operator|.
name|setMultiValued
argument_list|(
name|dimension
argument_list|,
operator|!
name|isHierarchical
argument_list|)
expr_stmt|;
block|}
specifier|public
name|String
name|getDimension
parameter_list|()
block|{
return|return
name|dimension
return|;
block|}
specifier|public
name|String
name|getExpression
parameter_list|()
block|{
return|return
name|expression
return|;
block|}
specifier|public
name|void
name|build
parameter_list|(
name|DBBroker
name|broker
parameter_list|,
name|DocumentImpl
name|document
parameter_list|,
name|NodeId
name|nodeId
parameter_list|,
name|Document
name|luceneDoc
parameter_list|)
block|{
name|compile
argument_list|(
name|broker
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|isValid
condition|)
block|{
return|return;
block|}
specifier|final
name|XQuery
name|xquery
init|=
name|broker
operator|.
name|getBrokerPool
argument_list|()
operator|.
name|getXQueryService
argument_list|()
decl_stmt|;
specifier|final
name|NodeProxy
name|currentNode
init|=
operator|new
name|NodeProxy
argument_list|(
name|document
argument_list|,
name|nodeId
argument_list|)
decl_stmt|;
try|try
block|{
name|Sequence
name|result
init|=
name|xquery
operator|.
name|execute
argument_list|(
name|broker
argument_list|,
name|compiled
argument_list|,
name|currentNode
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|result
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
if|if
condition|(
name|isHierarchical
condition|)
block|{
name|String
name|paths
index|[]
init|=
operator|new
name|String
index|[
name|result
operator|.
name|getItemCount
argument_list|()
index|]
decl_stmt|;
name|int
name|j
init|=
literal|0
decl_stmt|;
for|for
control|(
name|SequenceIterator
name|i
init|=
name|result
operator|.
name|unorderedIterator
argument_list|()
init|;
name|i
operator|.
name|hasNext
argument_list|()
condition|;
name|j
operator|++
control|)
block|{
specifier|final
name|String
name|value
init|=
name|i
operator|.
name|nextItem
argument_list|()
operator|.
name|getStringValue
argument_list|()
decl_stmt|;
if|if
condition|(
name|value
operator|.
name|length
argument_list|()
operator|>
literal|0
condition|)
block|{
name|paths
index|[
name|j
index|]
operator|=
name|value
expr_stmt|;
block|}
block|}
name|luceneDoc
operator|.
name|add
argument_list|(
operator|new
name|FacetField
argument_list|(
name|dimension
argument_list|,
name|paths
argument_list|)
argument_list|)
expr_stmt|;
block|}
else|else
block|{
for|for
control|(
name|SequenceIterator
name|i
init|=
name|result
operator|.
name|unorderedIterator
argument_list|()
init|;
name|i
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
specifier|final
name|String
name|value
init|=
name|i
operator|.
name|nextItem
argument_list|()
operator|.
name|getStringValue
argument_list|()
decl_stmt|;
if|if
condition|(
name|value
operator|.
name|length
argument_list|()
operator|>
literal|0
condition|)
block|{
name|luceneDoc
operator|.
name|add
argument_list|(
operator|new
name|FacetField
argument_list|(
name|dimension
argument_list|,
name|value
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
block|}
catch|catch
parameter_list|(
name|PermissionDeniedException
name|e
parameter_list|)
block|{
name|isValid
operator|=
literal|false
expr_stmt|;
name|LOG
operator|.
name|warn
argument_list|(
literal|"Permission denied while evaluating expression for facet '"
operator|+
name|dimension
operator|+
literal|"': "
operator|+
name|expression
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|XPathException
name|e
parameter_list|)
block|{
name|isValid
operator|=
literal|false
expr_stmt|;
name|LOG
operator|.
name|warn
argument_list|(
literal|"XPath error while evaluating expression for facet '"
operator|+
name|dimension
operator|+
literal|"': "
operator|+
name|expression
operator|+
literal|": "
operator|+
name|e
operator|.
name|getMessage
argument_list|()
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
block|}
specifier|private
name|void
name|compile
parameter_list|(
name|DBBroker
name|broker
parameter_list|)
block|{
if|if
condition|(
name|compiled
operator|==
literal|null
operator|&&
name|isValid
condition|)
block|{
specifier|final
name|XQuery
name|xquery
init|=
name|broker
operator|.
name|getBrokerPool
argument_list|()
operator|.
name|getXQueryService
argument_list|()
decl_stmt|;
specifier|final
name|XQueryContext
name|context
init|=
operator|new
name|XQueryContext
argument_list|(
name|broker
operator|.
name|getBrokerPool
argument_list|()
argument_list|)
decl_stmt|;
try|try
block|{
name|this
operator|.
name|compiled
operator|=
name|xquery
operator|.
name|compile
argument_list|(
name|broker
argument_list|,
name|context
argument_list|,
name|expression
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|XPathException
decl||
name|PermissionDeniedException
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|error
argument_list|(
literal|"Failed to compile facet expression: "
operator|+
name|expression
operator|+
literal|": "
operator|+
name|e
operator|.
name|getMessage
argument_list|()
argument_list|,
name|e
argument_list|)
expr_stmt|;
name|isValid
operator|=
literal|false
expr_stmt|;
block|}
block|}
block|}
block|}
end_class

end_unit

