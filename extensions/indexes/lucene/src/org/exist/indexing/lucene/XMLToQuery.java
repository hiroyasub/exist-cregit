begin_unit|revision:1.0.0;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  *  eXist Open Source Native XML Database  *  Copyright (C) 2001-07 The eXist Project  *  http://exist-db.org  *  *  This program is free software; you can redistribute it and/or  *  modify it under the terms of the GNU Lesser General Public License  *  as published by the Free Software Foundation; either version 2  *  of the License, or (at your option) any later version.  *  *  This program is distributed in the hope that it will be useful,  *  but WITHOUT ANY WARRANTY; without even the implied warranty of  *  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the  *  GNU Lesser General Public License for more details.  *  *  You should have received a copy of the GNU Lesser General Public  *  License along with this library; if not, write to the Free Software  *  Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA  02110-1301  USA  *  * \$Id\$  */
end_comment

begin_package
package|package
name|org
operator|.
name|exist
operator|.
name|indexing
operator|.
name|lucene
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|analysis
operator|.
name|Analyzer
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|analysis
operator|.
name|TokenStream
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|analysis
operator|.
name|tokenattributes
operator|.
name|CharTermAttribute
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|index
operator|.
name|*
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|search
operator|.
name|*
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|search
operator|.
name|spans
operator|.
name|SpanFirstQuery
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|search
operator|.
name|spans
operator|.
name|SpanNearQuery
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|search
operator|.
name|spans
operator|.
name|SpanQuery
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|search
operator|.
name|spans
operator|.
name|SpanTermQuery
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|util
operator|.
name|BytesRef
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|util
operator|.
name|automaton
operator|.
name|Automaton
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|util
operator|.
name|automaton
operator|.
name|CompiledAutomaton
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|util
operator|.
name|automaton
operator|.
name|LevenshteinAutomata
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|xquery
operator|.
name|XPathException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|w3c
operator|.
name|dom
operator|.
name|Element
import|;
end_import

begin_import
import|import
name|org
operator|.
name|w3c
operator|.
name|dom
operator|.
name|Node
import|;
end_import

begin_import
import|import
name|org
operator|.
name|w3c
operator|.
name|dom
operator|.
name|NodeList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|StringReader
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Properties
import|;
end_import

begin_comment
comment|/**  * Parses the XML representation of a Lucene query and transforms  * it into a tree of {@link org.apache.lucene.search.Query} objects.  */
end_comment

begin_class
specifier|public
class|class
name|XMLToQuery
block|{
specifier|private
specifier|final
name|LuceneIndex
name|index
decl_stmt|;
specifier|public
name|XMLToQuery
parameter_list|(
name|LuceneIndex
name|index
parameter_list|)
block|{
name|this
operator|.
name|index
operator|=
name|index
expr_stmt|;
block|}
specifier|public
name|Query
name|parse
parameter_list|(
name|String
name|field
parameter_list|,
name|Element
name|root
parameter_list|,
name|Analyzer
name|analyzer
parameter_list|,
name|Properties
name|options
parameter_list|)
throws|throws
name|XPathException
block|{
name|Query
name|query
init|=
literal|null
decl_stmt|;
name|String
name|localName
init|=
name|root
operator|.
name|getLocalName
argument_list|()
decl_stmt|;
if|if
condition|(
literal|null
operator|!=
name|localName
condition|)
block|{
switch|switch
condition|(
name|localName
condition|)
block|{
case|case
literal|"query"
case|:
name|query
operator|=
name|parseChildren
argument_list|(
name|field
argument_list|,
name|root
argument_list|,
name|analyzer
argument_list|,
name|options
argument_list|)
expr_stmt|;
break|break;
case|case
literal|"term"
case|:
name|query
operator|=
name|termQuery
argument_list|(
name|field
argument_list|,
name|root
argument_list|,
name|analyzer
argument_list|)
expr_stmt|;
break|break;
case|case
literal|"wildcard"
case|:
name|query
operator|=
name|wildcardQuery
argument_list|(
name|field
argument_list|,
name|root
argument_list|,
name|analyzer
argument_list|,
name|options
argument_list|)
expr_stmt|;
break|break;
case|case
literal|"prefix"
case|:
name|query
operator|=
name|prefixQuery
argument_list|(
name|field
argument_list|,
name|root
argument_list|,
name|options
argument_list|)
expr_stmt|;
break|break;
case|case
literal|"fuzzy"
case|:
name|query
operator|=
name|fuzzyQuery
argument_list|(
name|field
argument_list|,
name|root
argument_list|)
expr_stmt|;
break|break;
case|case
literal|"bool"
case|:
name|query
operator|=
name|booleanQuery
argument_list|(
name|field
argument_list|,
name|root
argument_list|,
name|analyzer
argument_list|,
name|options
argument_list|)
expr_stmt|;
break|break;
case|case
literal|"phrase"
case|:
name|query
operator|=
name|phraseQuery
argument_list|(
name|field
argument_list|,
name|root
argument_list|,
name|analyzer
argument_list|)
expr_stmt|;
break|break;
case|case
literal|"near"
case|:
name|query
operator|=
name|nearQuery
argument_list|(
name|field
argument_list|,
name|root
argument_list|,
name|analyzer
argument_list|)
expr_stmt|;
break|break;
case|case
literal|"first"
case|:
name|query
operator|=
name|getSpanFirst
argument_list|(
name|field
argument_list|,
name|root
argument_list|,
name|analyzer
argument_list|)
expr_stmt|;
break|break;
case|case
literal|"regex"
case|:
name|query
operator|=
name|regexQuery
argument_list|(
name|field
argument_list|,
name|root
argument_list|,
name|options
argument_list|)
expr_stmt|;
break|break;
default|default:
throw|throw
operator|new
name|XPathException
argument_list|(
literal|"Unknown element in lucene query expression: "
operator|+
name|localName
argument_list|)
throw|;
block|}
block|}
if|if
condition|(
name|query
operator|!=
literal|null
condition|)
block|{
name|setBoost
argument_list|(
name|root
argument_list|,
name|query
argument_list|)
expr_stmt|;
block|}
return|return
name|query
return|;
block|}
specifier|private
name|Query
name|phraseQuery
parameter_list|(
name|String
name|field
parameter_list|,
name|Element
name|node
parameter_list|,
name|Analyzer
name|analyzer
parameter_list|)
throws|throws
name|XPathException
block|{
name|NodeList
name|termList
init|=
name|node
operator|.
name|getElementsByTagName
argument_list|(
literal|"term"
argument_list|)
decl_stmt|;
if|if
condition|(
name|termList
operator|.
name|getLength
argument_list|()
operator|==
literal|0
condition|)
block|{
name|PhraseQuery
name|query
init|=
operator|new
name|PhraseQuery
argument_list|()
decl_stmt|;
name|String
name|qstr
init|=
name|getText
argument_list|(
name|node
argument_list|)
decl_stmt|;
try|try
block|{
name|TokenStream
name|stream
init|=
name|analyzer
operator|.
name|tokenStream
argument_list|(
name|field
argument_list|,
operator|new
name|StringReader
argument_list|(
name|qstr
argument_list|)
argument_list|)
decl_stmt|;
name|CharTermAttribute
name|termAttr
init|=
name|stream
operator|.
name|addAttribute
argument_list|(
name|CharTermAttribute
operator|.
name|class
argument_list|)
decl_stmt|;
name|stream
operator|.
name|reset
argument_list|()
expr_stmt|;
while|while
condition|(
name|stream
operator|.
name|incrementToken
argument_list|()
condition|)
block|{
name|query
operator|.
name|add
argument_list|(
operator|new
name|Term
argument_list|(
name|field
argument_list|,
name|termAttr
operator|.
name|toString
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|stream
operator|.
name|end
argument_list|()
expr_stmt|;
name|stream
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|XPathException
argument_list|(
literal|"Error while parsing phrase query: "
operator|+
name|qstr
argument_list|)
throw|;
block|}
name|int
name|slop
init|=
name|getSlop
argument_list|(
name|node
argument_list|)
decl_stmt|;
if|if
condition|(
name|slop
operator|>
operator|-
literal|1
condition|)
name|query
operator|.
name|setSlop
argument_list|(
name|slop
argument_list|)
expr_stmt|;
return|return
name|query
return|;
block|}
name|MultiPhraseQuery
name|query
init|=
operator|new
name|MultiPhraseQuery
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|termList
operator|.
name|getLength
argument_list|()
condition|;
name|i
operator|++
control|)
block|{
name|Element
name|elem
init|=
operator|(
name|Element
operator|)
name|termList
operator|.
name|item
argument_list|(
name|i
argument_list|)
decl_stmt|;
name|String
name|text
init|=
name|getText
argument_list|(
name|elem
argument_list|)
decl_stmt|;
if|if
condition|(
name|text
operator|.
name|indexOf
argument_list|(
literal|'?'
argument_list|)
operator|>
operator|-
literal|1
operator|||
name|text
operator|.
name|indexOf
argument_list|(
literal|'*'
argument_list|)
operator|>
literal|0
condition|)
block|{
name|Term
index|[]
name|expanded
init|=
name|expandTerms
argument_list|(
name|field
argument_list|,
name|text
argument_list|)
decl_stmt|;
if|if
condition|(
name|expanded
operator|.
name|length
operator|>
literal|0
condition|)
name|query
operator|.
name|add
argument_list|(
name|expanded
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|String
name|termStr
init|=
name|getTerm
argument_list|(
name|field
argument_list|,
name|text
argument_list|,
name|analyzer
argument_list|)
decl_stmt|;
if|if
condition|(
name|termStr
operator|!=
literal|null
condition|)
name|query
operator|.
name|add
argument_list|(
operator|new
name|Term
argument_list|(
name|field
argument_list|,
name|text
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
name|int
name|slop
init|=
name|getSlop
argument_list|(
name|node
argument_list|)
decl_stmt|;
if|if
condition|(
name|slop
operator|>
operator|-
literal|1
condition|)
name|query
operator|.
name|setSlop
argument_list|(
name|slop
argument_list|)
expr_stmt|;
return|return
name|query
return|;
block|}
specifier|private
name|SpanQuery
name|nearQuery
parameter_list|(
name|String
name|field
parameter_list|,
name|Element
name|node
parameter_list|,
name|Analyzer
name|analyzer
parameter_list|)
throws|throws
name|XPathException
block|{
name|int
name|slop
init|=
name|getSlop
argument_list|(
name|node
argument_list|)
decl_stmt|;
if|if
condition|(
name|slop
operator|<
literal|0
condition|)
name|slop
operator|=
literal|0
expr_stmt|;
name|boolean
name|inOrder
init|=
literal|true
decl_stmt|;
if|if
condition|(
name|node
operator|.
name|hasAttribute
argument_list|(
literal|"ordered"
argument_list|)
condition|)
name|inOrder
operator|=
name|node
operator|.
name|getAttribute
argument_list|(
literal|"ordered"
argument_list|)
operator|.
name|equals
argument_list|(
literal|"yes"
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|hasElementContent
argument_list|(
name|node
argument_list|)
condition|)
block|{
name|String
name|qstr
init|=
name|getText
argument_list|(
name|node
argument_list|)
decl_stmt|;
name|List
argument_list|<
name|SpanTermQuery
argument_list|>
name|list
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|(
literal|8
argument_list|)
decl_stmt|;
try|try
block|{
name|TokenStream
name|stream
init|=
name|analyzer
operator|.
name|tokenStream
argument_list|(
name|field
argument_list|,
operator|new
name|StringReader
argument_list|(
name|qstr
argument_list|)
argument_list|)
decl_stmt|;
name|CharTermAttribute
name|termAttr
init|=
name|stream
operator|.
name|addAttribute
argument_list|(
name|CharTermAttribute
operator|.
name|class
argument_list|)
decl_stmt|;
name|stream
operator|.
name|reset
argument_list|()
expr_stmt|;
while|while
condition|(
name|stream
operator|.
name|incrementToken
argument_list|()
condition|)
block|{
name|list
operator|.
name|add
argument_list|(
operator|new
name|SpanTermQuery
argument_list|(
operator|new
name|Term
argument_list|(
name|field
argument_list|,
name|termAttr
operator|.
name|toString
argument_list|()
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|stream
operator|.
name|end
argument_list|()
expr_stmt|;
name|stream
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|XPathException
argument_list|(
literal|"Error while parsing phrase query: "
operator|+
name|qstr
argument_list|)
throw|;
block|}
return|return
operator|new
name|SpanNearQuery
argument_list|(
name|list
operator|.
name|toArray
argument_list|(
operator|new
name|SpanTermQuery
index|[
name|list
operator|.
name|size
argument_list|()
index|]
argument_list|)
argument_list|,
name|slop
argument_list|,
name|inOrder
argument_list|)
return|;
block|}
name|SpanQuery
index|[]
name|children
init|=
name|parseSpanChildren
argument_list|(
name|field
argument_list|,
name|node
argument_list|,
name|analyzer
argument_list|)
decl_stmt|;
return|return
operator|new
name|SpanNearQuery
argument_list|(
name|children
argument_list|,
name|slop
argument_list|,
name|inOrder
argument_list|)
return|;
block|}
specifier|private
name|SpanQuery
index|[]
name|parseSpanChildren
parameter_list|(
name|String
name|field
parameter_list|,
name|Element
name|node
parameter_list|,
name|Analyzer
name|analyzer
parameter_list|)
throws|throws
name|XPathException
block|{
name|List
argument_list|<
name|SpanQuery
argument_list|>
name|list
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|(
literal|8
argument_list|)
decl_stmt|;
name|Node
name|child
init|=
name|node
operator|.
name|getFirstChild
argument_list|()
decl_stmt|;
while|while
condition|(
name|child
operator|!=
literal|null
condition|)
block|{
if|if
condition|(
name|child
operator|.
name|getNodeType
argument_list|()
operator|==
name|Node
operator|.
name|ELEMENT_NODE
condition|)
block|{
specifier|final
name|String
name|localName
init|=
name|child
operator|.
name|getLocalName
argument_list|()
decl_stmt|;
if|if
condition|(
literal|null
operator|!=
name|localName
condition|)
block|{
switch|switch
condition|(
name|localName
condition|)
block|{
case|case
literal|"term"
case|:
name|getSpanTerm
argument_list|(
name|list
argument_list|,
name|field
argument_list|,
operator|(
name|Element
operator|)
name|child
argument_list|,
name|analyzer
argument_list|)
expr_stmt|;
break|break;
case|case
literal|"near"
case|:
name|list
operator|.
name|add
argument_list|(
name|nearQuery
argument_list|(
name|field
argument_list|,
operator|(
name|Element
operator|)
name|child
argument_list|,
name|analyzer
argument_list|)
argument_list|)
expr_stmt|;
break|break;
case|case
literal|"first"
case|:
name|list
operator|.
name|add
argument_list|(
name|getSpanFirst
argument_list|(
name|field
argument_list|,
operator|(
name|Element
operator|)
name|child
argument_list|,
name|analyzer
argument_list|)
argument_list|)
expr_stmt|;
break|break;
comment|//                      case "regex":
comment|//                          list.add(getSpanRegex(field, (Element) child, analyzer));
default|default:
throw|throw
operator|new
name|XPathException
argument_list|(
literal|"Unknown query element: "
operator|+
name|child
operator|.
name|getNodeName
argument_list|()
argument_list|)
throw|;
block|}
block|}
block|}
name|child
operator|=
name|child
operator|.
name|getNextSibling
argument_list|()
expr_stmt|;
block|}
return|return
name|list
operator|.
name|toArray
argument_list|(
operator|new
name|SpanQuery
index|[
name|list
operator|.
name|size
argument_list|()
index|]
argument_list|)
return|;
block|}
specifier|private
name|void
name|getSpanTerm
parameter_list|(
name|List
argument_list|<
name|SpanQuery
argument_list|>
name|list
parameter_list|,
name|String
name|field
parameter_list|,
name|Element
name|node
parameter_list|,
name|Analyzer
name|analyzer
parameter_list|)
throws|throws
name|XPathException
block|{
name|String
name|termStr
init|=
name|getTerm
argument_list|(
name|field
argument_list|,
name|getText
argument_list|(
name|node
argument_list|)
argument_list|,
name|analyzer
argument_list|)
decl_stmt|;
if|if
condition|(
name|termStr
operator|!=
literal|null
condition|)
name|list
operator|.
name|add
argument_list|(
operator|new
name|SpanTermQuery
argument_list|(
operator|new
name|Term
argument_list|(
name|field
argument_list|,
name|termStr
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|//    private SpanQuery getSpanRegex(String field, Element node, Analyzer analyzer) {
comment|//    	String regex = getText(node);
comment|//    	return new SpanRegexQuery(new Term(field, regex));
comment|//    }
specifier|private
name|SpanQuery
name|getSpanFirst
parameter_list|(
name|String
name|field
parameter_list|,
name|Element
name|node
parameter_list|,
name|Analyzer
name|analyzer
parameter_list|)
throws|throws
name|XPathException
block|{
name|int
name|slop
init|=
name|getSlop
argument_list|(
name|node
argument_list|)
decl_stmt|;
if|if
condition|(
name|slop
operator|<
literal|0
condition|)
name|slop
operator|=
literal|0
expr_stmt|;
name|boolean
name|inOrder
init|=
literal|true
decl_stmt|;
if|if
condition|(
name|node
operator|.
name|hasAttribute
argument_list|(
literal|"ordered"
argument_list|)
condition|)
name|inOrder
operator|=
name|node
operator|.
name|getAttribute
argument_list|(
literal|"ordered"
argument_list|)
operator|.
name|equals
argument_list|(
literal|"yes"
argument_list|)
expr_stmt|;
name|SpanQuery
name|query
init|=
literal|null
decl_stmt|;
if|if
condition|(
name|hasElementContent
argument_list|(
name|node
argument_list|)
condition|)
block|{
name|SpanQuery
index|[]
name|children
init|=
name|parseSpanChildren
argument_list|(
name|field
argument_list|,
name|node
argument_list|,
name|analyzer
argument_list|)
decl_stmt|;
name|query
operator|=
operator|new
name|SpanNearQuery
argument_list|(
name|children
argument_list|,
name|slop
argument_list|,
name|inOrder
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|String
name|termStr
init|=
name|getTerm
argument_list|(
name|field
argument_list|,
name|getText
argument_list|(
name|node
argument_list|)
argument_list|,
name|analyzer
argument_list|)
decl_stmt|;
if|if
condition|(
name|termStr
operator|!=
literal|null
condition|)
name|query
operator|=
operator|new
name|SpanTermQuery
argument_list|(
operator|new
name|Term
argument_list|(
name|field
argument_list|,
name|termStr
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|int
name|end
init|=
literal|0
decl_stmt|;
if|if
condition|(
name|node
operator|.
name|hasAttribute
argument_list|(
literal|"end"
argument_list|)
condition|)
block|{
try|try
block|{
name|end
operator|=
name|Integer
operator|.
name|parseInt
argument_list|(
name|node
operator|.
name|getAttribute
argument_list|(
literal|"end"
argument_list|)
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|NumberFormatException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|XPathException
argument_list|(
literal|"Attribute 'end' to query element 'first' should be a "
operator|+
literal|"valid integer. Got: "
operator|+
name|node
operator|.
name|getAttribute
argument_list|(
literal|"end"
argument_list|)
argument_list|)
throw|;
block|}
block|}
return|return
name|query
operator|!=
literal|null
condition|?
operator|new
name|SpanFirstQuery
argument_list|(
name|query
argument_list|,
name|end
argument_list|)
else|:
literal|null
return|;
block|}
specifier|private
name|int
name|getSlop
parameter_list|(
name|Element
name|node
parameter_list|)
throws|throws
name|XPathException
block|{
name|String
name|slop
init|=
name|node
operator|.
name|getAttribute
argument_list|(
literal|"slop"
argument_list|)
decl_stmt|;
if|if
condition|(
name|slop
operator|!=
literal|null
operator|&&
name|slop
operator|.
name|length
argument_list|()
operator|>
literal|0
condition|)
block|{
try|try
block|{
return|return
name|Integer
operator|.
name|parseInt
argument_list|(
name|slop
argument_list|)
return|;
block|}
catch|catch
parameter_list|(
name|NumberFormatException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|XPathException
argument_list|(
literal|"Query parameter 'slop' should be an integer value. Got: "
operator|+
name|slop
argument_list|)
throw|;
block|}
block|}
return|return
operator|-
literal|1
return|;
block|}
specifier|private
name|Term
index|[]
name|expandTerms
parameter_list|(
name|String
name|field
parameter_list|,
name|String
name|queryStr
parameter_list|)
throws|throws
name|XPathException
block|{
name|List
argument_list|<
name|Term
argument_list|>
name|termList
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|(
literal|8
argument_list|)
decl_stmt|;
name|Automaton
name|automaton
init|=
name|WildcardQuery
operator|.
name|toAutomaton
argument_list|(
operator|new
name|Term
argument_list|(
name|field
argument_list|,
name|queryStr
argument_list|)
argument_list|)
decl_stmt|;
name|CompiledAutomaton
name|compiled
init|=
operator|new
name|CompiledAutomaton
argument_list|(
name|automaton
argument_list|)
decl_stmt|;
name|IndexReader
name|reader
init|=
literal|null
decl_stmt|;
try|try
block|{
name|reader
operator|=
name|index
operator|.
name|getReader
argument_list|()
expr_stmt|;
for|for
control|(
name|AtomicReaderContext
name|atomic
range|:
name|reader
operator|.
name|leaves
argument_list|()
control|)
block|{
name|Terms
name|terms
init|=
name|atomic
operator|.
name|reader
argument_list|()
operator|.
name|terms
argument_list|(
name|field
argument_list|)
decl_stmt|;
if|if
condition|(
name|terms
operator|!=
literal|null
condition|)
block|{
name|TermsEnum
name|termsEnum
init|=
name|compiled
operator|.
name|getTermsEnum
argument_list|(
name|terms
argument_list|)
decl_stmt|;
name|BytesRef
name|data
init|=
name|termsEnum
operator|.
name|next
argument_list|()
decl_stmt|;
while|while
condition|(
name|data
operator|!=
literal|null
condition|)
block|{
name|String
name|term
init|=
name|data
operator|.
name|utf8ToString
argument_list|()
decl_stmt|;
name|termList
operator|.
name|add
argument_list|(
operator|new
name|Term
argument_list|(
name|field
argument_list|,
name|term
argument_list|)
argument_list|)
expr_stmt|;
name|data
operator|=
name|termsEnum
operator|.
name|next
argument_list|()
expr_stmt|;
block|}
block|}
block|}
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|XPathException
argument_list|(
literal|"Lucene index error while creating query: "
operator|+
name|e
operator|.
name|getMessage
argument_list|()
argument_list|,
name|e
argument_list|)
throw|;
block|}
finally|finally
block|{
name|index
operator|.
name|releaseReader
argument_list|(
name|reader
argument_list|)
expr_stmt|;
block|}
name|Term
index|[]
name|matchingTerms
init|=
operator|new
name|Term
index|[
name|termList
operator|.
name|size
argument_list|()
index|]
decl_stmt|;
return|return
name|termList
operator|.
name|toArray
argument_list|(
name|matchingTerms
argument_list|)
return|;
block|}
specifier|private
name|Query
name|termQuery
parameter_list|(
name|String
name|field
parameter_list|,
name|Element
name|node
parameter_list|,
name|Analyzer
name|analyzer
parameter_list|)
throws|throws
name|XPathException
block|{
name|String
name|termStr
init|=
name|getTerm
argument_list|(
name|field
argument_list|,
name|getText
argument_list|(
name|node
argument_list|)
argument_list|,
name|analyzer
argument_list|)
decl_stmt|;
return|return
name|termStr
operator|==
literal|null
condition|?
literal|null
else|:
operator|new
name|TermQuery
argument_list|(
operator|new
name|Term
argument_list|(
name|field
argument_list|,
name|termStr
argument_list|)
argument_list|)
return|;
block|}
specifier|private
name|String
name|getTerm
parameter_list|(
name|String
name|field
parameter_list|,
name|String
name|text
parameter_list|,
name|Analyzer
name|analyzer
parameter_list|)
throws|throws
name|XPathException
block|{
name|String
name|term
init|=
literal|null
decl_stmt|;
try|try
block|{
name|TokenStream
name|stream
init|=
name|analyzer
operator|.
name|tokenStream
argument_list|(
name|field
argument_list|,
operator|new
name|StringReader
argument_list|(
name|text
argument_list|)
argument_list|)
decl_stmt|;
name|CharTermAttribute
name|termAttr
init|=
name|stream
operator|.
name|addAttribute
argument_list|(
name|CharTermAttribute
operator|.
name|class
argument_list|)
decl_stmt|;
name|stream
operator|.
name|reset
argument_list|()
expr_stmt|;
if|if
condition|(
name|stream
operator|.
name|incrementToken
argument_list|()
condition|)
block|{
name|term
operator|=
name|termAttr
operator|.
name|toString
argument_list|()
expr_stmt|;
block|}
name|stream
operator|.
name|end
argument_list|()
expr_stmt|;
name|stream
operator|.
name|close
argument_list|()
expr_stmt|;
return|return
name|term
return|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|XPathException
argument_list|(
literal|"Lucene index error while creating query: "
operator|+
name|e
operator|.
name|getMessage
argument_list|()
argument_list|,
name|e
argument_list|)
throw|;
block|}
block|}
specifier|private
name|Query
name|wildcardQuery
parameter_list|(
name|String
name|field
parameter_list|,
name|Element
name|node
parameter_list|,
name|Analyzer
name|analyzer
parameter_list|,
name|Properties
name|options
parameter_list|)
throws|throws
name|XPathException
block|{
name|WildcardQuery
name|query
init|=
operator|new
name|WildcardQuery
argument_list|(
operator|new
name|Term
argument_list|(
name|field
argument_list|,
name|getText
argument_list|(
name|node
argument_list|)
argument_list|)
argument_list|)
decl_stmt|;
name|setRewriteMethod
argument_list|(
name|query
argument_list|,
name|node
argument_list|,
name|options
argument_list|)
expr_stmt|;
return|return
name|query
return|;
block|}
specifier|private
name|Query
name|prefixQuery
parameter_list|(
name|String
name|field
parameter_list|,
name|Element
name|node
parameter_list|,
name|Properties
name|options
parameter_list|)
block|{
name|PrefixQuery
name|query
init|=
operator|new
name|PrefixQuery
argument_list|(
operator|new
name|Term
argument_list|(
name|field
argument_list|,
name|getText
argument_list|(
name|node
argument_list|)
argument_list|)
argument_list|)
decl_stmt|;
name|setRewriteMethod
argument_list|(
name|query
argument_list|,
name|node
argument_list|,
name|options
argument_list|)
expr_stmt|;
return|return
name|query
return|;
block|}
specifier|private
name|Query
name|fuzzyQuery
parameter_list|(
name|String
name|field
parameter_list|,
name|Element
name|node
parameter_list|)
throws|throws
name|XPathException
block|{
name|int
name|maxEdits
init|=
name|FuzzyQuery
operator|.
name|defaultMaxEdits
decl_stmt|;
name|String
name|attr
init|=
name|node
operator|.
name|getAttribute
argument_list|(
literal|"max-edits"
argument_list|)
decl_stmt|;
if|if
condition|(
name|attr
operator|!=
literal|null
operator|&&
name|attr
operator|.
name|length
argument_list|()
operator|>
literal|0
condition|)
block|{
try|try
block|{
name|maxEdits
operator|=
name|Integer
operator|.
name|parseInt
argument_list|(
name|attr
argument_list|)
expr_stmt|;
if|if
condition|(
name|maxEdits
operator|<
literal|0
operator|||
name|maxEdits
operator|>
name|LevenshteinAutomata
operator|.
name|MAXIMUM_SUPPORTED_DISTANCE
condition|)
block|{
throw|throw
operator|new
name|XPathException
argument_list|(
literal|"Query parameter max-edits must by<= "
operator|+
name|LevenshteinAutomata
operator|.
name|MAXIMUM_SUPPORTED_DISTANCE
argument_list|)
throw|;
block|}
block|}
catch|catch
parameter_list|(
name|NumberFormatException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|XPathException
argument_list|(
literal|"Query parameter 'max-edits' should be an integer value. Got: "
operator|+
name|attr
argument_list|)
throw|;
block|}
block|}
return|return
operator|new
name|FuzzyQuery
argument_list|(
operator|new
name|Term
argument_list|(
name|field
argument_list|,
name|getText
argument_list|(
name|node
argument_list|)
argument_list|)
argument_list|,
name|maxEdits
argument_list|)
return|;
block|}
specifier|private
name|Query
name|regexQuery
parameter_list|(
name|String
name|field
parameter_list|,
name|Element
name|node
parameter_list|,
name|Properties
name|options
parameter_list|)
block|{
name|RegexpQuery
name|query
init|=
operator|new
name|RegexpQuery
argument_list|(
operator|new
name|Term
argument_list|(
name|field
argument_list|,
name|getText
argument_list|(
name|node
argument_list|)
argument_list|)
argument_list|)
decl_stmt|;
name|setRewriteMethod
argument_list|(
name|query
argument_list|,
name|node
argument_list|,
name|options
argument_list|)
expr_stmt|;
return|return
name|query
return|;
block|}
specifier|private
name|Query
name|booleanQuery
parameter_list|(
name|String
name|field
parameter_list|,
name|Element
name|node
parameter_list|,
name|Analyzer
name|analyzer
parameter_list|,
name|Properties
name|options
parameter_list|)
throws|throws
name|XPathException
block|{
name|BooleanQuery
name|query
init|=
operator|new
name|BooleanQuery
argument_list|()
decl_stmt|;
name|Node
name|child
init|=
name|node
operator|.
name|getFirstChild
argument_list|()
decl_stmt|;
while|while
condition|(
name|child
operator|!=
literal|null
condition|)
block|{
if|if
condition|(
name|child
operator|.
name|getNodeType
argument_list|()
operator|==
name|Node
operator|.
name|ELEMENT_NODE
condition|)
block|{
name|Element
name|elem
init|=
operator|(
name|Element
operator|)
name|child
decl_stmt|;
name|Query
name|childQuery
init|=
name|parse
argument_list|(
name|field
argument_list|,
name|elem
argument_list|,
name|analyzer
argument_list|,
name|options
argument_list|)
decl_stmt|;
if|if
condition|(
name|childQuery
operator|!=
literal|null
condition|)
block|{
name|BooleanClause
operator|.
name|Occur
name|occur
init|=
name|getOccur
argument_list|(
name|elem
argument_list|)
decl_stmt|;
name|query
operator|.
name|add
argument_list|(
name|childQuery
argument_list|,
name|occur
argument_list|)
expr_stmt|;
block|}
block|}
name|child
operator|=
name|child
operator|.
name|getNextSibling
argument_list|()
expr_stmt|;
block|}
return|return
name|query
return|;
block|}
specifier|private
name|void
name|setRewriteMethod
parameter_list|(
name|MultiTermQuery
name|query
parameter_list|,
name|Element
name|node
parameter_list|,
name|Properties
name|options
parameter_list|)
block|{
name|String
name|option
init|=
name|node
operator|.
name|getAttribute
argument_list|(
literal|"filter-rewrite"
argument_list|)
decl_stmt|;
if|if
condition|(
name|option
operator|==
literal|null
condition|)
name|option
operator|=
literal|"yes"
expr_stmt|;
if|if
condition|(
name|options
operator|!=
literal|null
condition|)
name|option
operator|=
name|options
operator|.
name|getProperty
argument_list|(
name|LuceneIndexWorker
operator|.
name|OPTION_FILTER_REWRITE
argument_list|,
literal|"yes"
argument_list|)
expr_stmt|;
if|if
condition|(
name|option
operator|.
name|equalsIgnoreCase
argument_list|(
literal|"yes"
argument_list|)
condition|)
name|query
operator|.
name|setRewriteMethod
argument_list|(
name|MultiTermQuery
operator|.
name|CONSTANT_SCORE_FILTER_REWRITE
argument_list|)
expr_stmt|;
else|else
name|query
operator|.
name|setRewriteMethod
argument_list|(
name|MultiTermQuery
operator|.
name|CONSTANT_SCORE_AUTO_REWRITE_DEFAULT
argument_list|)
expr_stmt|;
block|}
specifier|private
name|BooleanClause
operator|.
name|Occur
name|getOccur
parameter_list|(
name|Element
name|elem
parameter_list|)
block|{
name|BooleanClause
operator|.
name|Occur
name|occur
init|=
name|BooleanClause
operator|.
name|Occur
operator|.
name|SHOULD
decl_stmt|;
name|String
name|occurOpt
init|=
name|elem
operator|.
name|getAttribute
argument_list|(
literal|"occur"
argument_list|)
decl_stmt|;
if|if
condition|(
name|occurOpt
operator|!=
literal|null
condition|)
block|{
switch|switch
condition|(
name|occurOpt
condition|)
block|{
case|case
literal|"must"
case|:
name|occur
operator|=
name|BooleanClause
operator|.
name|Occur
operator|.
name|MUST
expr_stmt|;
break|break;
case|case
literal|"not"
case|:
name|occur
operator|=
name|BooleanClause
operator|.
name|Occur
operator|.
name|MUST_NOT
expr_stmt|;
break|break;
case|case
literal|"should"
case|:
name|occur
operator|=
name|BooleanClause
operator|.
name|Occur
operator|.
name|SHOULD
expr_stmt|;
break|break;
block|}
block|}
return|return
name|occur
return|;
block|}
specifier|private
name|Query
name|parseChildren
parameter_list|(
name|String
name|field
parameter_list|,
name|Element
name|root
parameter_list|,
name|Analyzer
name|analyzer
parameter_list|,
name|Properties
name|options
parameter_list|)
throws|throws
name|XPathException
block|{
name|Query
name|query
init|=
literal|null
decl_stmt|;
name|Node
name|child
init|=
name|root
operator|.
name|getFirstChild
argument_list|()
decl_stmt|;
while|while
condition|(
name|child
operator|!=
literal|null
condition|)
block|{
if|if
condition|(
name|child
operator|.
name|getNodeType
argument_list|()
operator|==
name|Node
operator|.
name|ELEMENT_NODE
condition|)
block|{
name|Query
name|childQuery
init|=
name|parse
argument_list|(
name|field
argument_list|,
operator|(
name|Element
operator|)
name|child
argument_list|,
name|analyzer
argument_list|,
name|options
argument_list|)
decl_stmt|;
if|if
condition|(
name|query
operator|!=
literal|null
condition|)
block|{
if|if
condition|(
name|query
operator|instanceof
name|BooleanQuery
condition|)
operator|(
operator|(
name|BooleanQuery
operator|)
name|query
operator|)
operator|.
name|add
argument_list|(
name|childQuery
argument_list|,
name|BooleanClause
operator|.
name|Occur
operator|.
name|SHOULD
argument_list|)
expr_stmt|;
else|else
block|{
name|BooleanQuery
name|boolQuery
init|=
operator|new
name|BooleanQuery
argument_list|()
decl_stmt|;
name|boolQuery
operator|.
name|add
argument_list|(
name|query
argument_list|,
name|BooleanClause
operator|.
name|Occur
operator|.
name|SHOULD
argument_list|)
expr_stmt|;
name|boolQuery
operator|.
name|add
argument_list|(
name|childQuery
argument_list|,
name|BooleanClause
operator|.
name|Occur
operator|.
name|SHOULD
argument_list|)
expr_stmt|;
name|query
operator|=
name|boolQuery
expr_stmt|;
block|}
block|}
else|else
name|query
operator|=
name|childQuery
expr_stmt|;
block|}
name|child
operator|=
name|child
operator|.
name|getNextSibling
argument_list|()
expr_stmt|;
block|}
return|return
name|query
return|;
block|}
specifier|private
name|void
name|setBoost
parameter_list|(
name|Element
name|node
parameter_list|,
name|Query
name|query
parameter_list|)
throws|throws
name|XPathException
block|{
name|String
name|boost
init|=
name|node
operator|.
name|getAttribute
argument_list|(
literal|"boost"
argument_list|)
decl_stmt|;
if|if
condition|(
name|boost
operator|!=
literal|null
operator|&&
name|boost
operator|.
name|length
argument_list|()
operator|>
literal|0
condition|)
block|{
try|try
block|{
name|query
operator|.
name|setBoost
argument_list|(
name|Float
operator|.
name|parseFloat
argument_list|(
name|boost
argument_list|)
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|NumberFormatException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|XPathException
argument_list|(
literal|"Bad value for boost in query parameter. Got: "
operator|+
name|boost
argument_list|)
throw|;
block|}
block|}
block|}
specifier|private
name|String
name|getText
parameter_list|(
name|Element
name|root
parameter_list|)
block|{
name|StringBuilder
name|buf
init|=
operator|new
name|StringBuilder
argument_list|()
decl_stmt|;
name|Node
name|child
init|=
name|root
operator|.
name|getFirstChild
argument_list|()
decl_stmt|;
while|while
condition|(
name|child
operator|!=
literal|null
condition|)
block|{
if|if
condition|(
name|child
operator|.
name|getNodeType
argument_list|()
operator|==
name|Node
operator|.
name|TEXT_NODE
condition|)
name|buf
operator|.
name|append
argument_list|(
name|child
operator|.
name|getNodeValue
argument_list|()
argument_list|)
expr_stmt|;
name|child
operator|=
name|child
operator|.
name|getNextSibling
argument_list|()
expr_stmt|;
block|}
return|return
name|buf
operator|.
name|toString
argument_list|()
return|;
block|}
specifier|private
name|boolean
name|hasElementContent
parameter_list|(
name|Element
name|root
parameter_list|)
block|{
name|Node
name|child
init|=
name|root
operator|.
name|getFirstChild
argument_list|()
decl_stmt|;
while|while
condition|(
name|child
operator|!=
literal|null
condition|)
block|{
if|if
condition|(
name|child
operator|.
name|getNodeType
argument_list|()
operator|==
name|Node
operator|.
name|ELEMENT_NODE
condition|)
return|return
literal|true
return|;
name|child
operator|=
name|child
operator|.
name|getNextSibling
argument_list|()
expr_stmt|;
block|}
return|return
literal|false
return|;
block|}
block|}
end_class

end_unit

