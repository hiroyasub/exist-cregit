begin_unit|revision:1.0.0;language:Java;cregit-version:0.0.1
begin_package
package|package
name|org
operator|.
name|exist
operator|.
name|indexing
operator|.
name|lucene
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|analysis
operator|.
name|Analyzer
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|queryparser
operator|.
name|flexible
operator|.
name|core
operator|.
name|QueryNodeException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|queryparser
operator|.
name|flexible
operator|.
name|standard
operator|.
name|CommonQueryParserConfiguration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|queryparser
operator|.
name|flexible
operator|.
name|standard
operator|.
name|StandardQueryParser
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|search
operator|.
name|Query
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|xquery
operator|.
name|XPathException
import|;
end_import

begin_comment
comment|/**  * Wrapper around Lucene's new flexible {@link StandardQueryParser}.  *  * @author Wolfgang  */
end_comment

begin_class
specifier|public
class|class
name|StandardQueryParserWrapper
extends|extends
name|QueryParserWrapper
block|{
specifier|private
name|String
name|field
init|=
literal|null
decl_stmt|;
specifier|private
name|StandardQueryParser
name|parser
init|=
literal|null
decl_stmt|;
specifier|public
name|StandardQueryParserWrapper
parameter_list|(
name|String
name|field
parameter_list|,
name|Analyzer
name|analyzer
parameter_list|)
block|{
name|super
argument_list|(
name|field
argument_list|,
name|analyzer
argument_list|)
expr_stmt|;
name|this
operator|.
name|field
operator|=
name|field
expr_stmt|;
name|this
operator|.
name|parser
operator|=
operator|new
name|StandardQueryParser
argument_list|(
name|analyzer
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|CommonQueryParserConfiguration
name|getConfiguration
parameter_list|()
block|{
return|return
name|parser
return|;
block|}
annotation|@
name|Override
specifier|public
name|Query
name|parse
parameter_list|(
name|String
name|query
parameter_list|)
throws|throws
name|XPathException
block|{
try|try
block|{
return|return
name|parser
operator|.
name|parse
argument_list|(
name|query
argument_list|,
name|field
argument_list|)
return|;
block|}
catch|catch
parameter_list|(
name|QueryNodeException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|XPathException
argument_list|(
literal|"Syntax error in Lucene query string: "
operator|+
name|e
operator|.
name|getMessage
argument_list|()
argument_list|)
throw|;
block|}
block|}
block|}
end_class

end_unit

