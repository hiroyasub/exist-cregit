begin_unit|revision:1.0.0;language:Java;cregit-version:0.0.1
begin_package
package|package
name|org
operator|.
name|exist
operator|.
name|indexing
operator|.
name|lucene
package|;
end_package

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|util
operator|.
name|DatabaseConfigurationException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|dom
operator|.
name|QName
import|;
end_import

begin_import
import|import
name|org
operator|.
name|w3c
operator|.
name|dom
operator|.
name|Element
import|;
end_import

begin_import
import|import
name|org
operator|.
name|w3c
operator|.
name|dom
operator|.
name|Node
import|;
end_import

begin_import
import|import
name|org
operator|.
name|w3c
operator|.
name|dom
operator|.
name|NodeList
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|analysis
operator|.
name|Analyzer
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|TreeMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Iterator
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_class
specifier|public
class|class
name|LuceneConfig
block|{
specifier|private
specifier|final
specifier|static
name|String
name|CONFIG_ROOT
init|=
literal|"lucene"
decl_stmt|;
specifier|private
specifier|final
specifier|static
name|String
name|INDEX_ELEMENT
init|=
literal|"text"
decl_stmt|;
specifier|private
specifier|final
specifier|static
name|String
name|ANALYZER_ELEMENT
init|=
literal|"analyzer"
decl_stmt|;
specifier|private
name|Map
name|qnames
init|=
operator|new
name|TreeMap
argument_list|()
decl_stmt|;
specifier|private
name|AnalyzerConfig
name|analyzers
init|=
operator|new
name|AnalyzerConfig
argument_list|()
decl_stmt|;
specifier|public
name|LuceneConfig
parameter_list|(
name|NodeList
name|configNodes
parameter_list|,
name|Map
name|namespaces
parameter_list|)
throws|throws
name|DatabaseConfigurationException
block|{
name|parseConfig
argument_list|(
name|configNodes
argument_list|,
name|namespaces
argument_list|)
expr_stmt|;
block|}
specifier|public
name|boolean
name|matches
parameter_list|(
name|QName
name|qname
parameter_list|)
block|{
return|return
name|qnames
operator|.
name|get
argument_list|(
name|qname
argument_list|)
operator|!=
literal|null
return|;
block|}
specifier|public
name|Analyzer
name|getAnalyzer
parameter_list|(
name|QName
name|qname
parameter_list|)
block|{
name|LuceneIndexConfig
name|config
init|=
operator|(
name|LuceneIndexConfig
operator|)
name|qnames
operator|.
name|get
argument_list|(
name|qname
argument_list|)
decl_stmt|;
if|if
condition|(
name|config
operator|!=
literal|null
condition|)
block|{
name|String
name|id
init|=
name|config
operator|.
name|getAnalyzerId
argument_list|()
decl_stmt|;
if|if
condition|(
name|id
operator|!=
literal|null
condition|)
return|return
name|analyzers
operator|.
name|getAnalyzerById
argument_list|(
name|config
operator|.
name|getAnalyzerId
argument_list|()
argument_list|)
return|;
block|}
return|return
name|analyzers
operator|.
name|getDefaultAnalyzer
argument_list|()
return|;
block|}
specifier|public
name|void
name|getDefinedIndexes
parameter_list|(
name|List
name|indexes
parameter_list|)
block|{
for|for
control|(
name|Iterator
name|ci
init|=
name|qnames
operator|.
name|keySet
argument_list|()
operator|.
name|iterator
argument_list|()
init|;
name|ci
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|QName
name|qn
init|=
operator|(
name|QName
operator|)
name|ci
operator|.
name|next
argument_list|()
decl_stmt|;
name|indexes
operator|.
name|add
argument_list|(
name|qn
argument_list|)
expr_stmt|;
block|}
block|}
comment|/**      * Parse a configuration entry. The main configuration entries for this index      * are the&lt;text&gt; elements. They may be enclosed by a&lt;lucene&gt; element.      *      * @param configNodes      * @param namespaces      * @throws org.exist.util.DatabaseConfigurationException      */
specifier|protected
name|void
name|parseConfig
parameter_list|(
name|NodeList
name|configNodes
parameter_list|,
name|Map
name|namespaces
parameter_list|)
throws|throws
name|DatabaseConfigurationException
block|{
name|Node
name|node
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|configNodes
operator|.
name|getLength
argument_list|()
condition|;
name|i
operator|++
control|)
block|{
name|node
operator|=
name|configNodes
operator|.
name|item
argument_list|(
name|i
argument_list|)
expr_stmt|;
if|if
condition|(
name|node
operator|.
name|getNodeType
argument_list|()
operator|==
name|Node
operator|.
name|ELEMENT_NODE
condition|)
block|{
if|if
condition|(
name|CONFIG_ROOT
operator|.
name|equals
argument_list|(
name|node
operator|.
name|getLocalName
argument_list|()
argument_list|)
condition|)
name|parseConfig
argument_list|(
name|node
operator|.
name|getChildNodes
argument_list|()
argument_list|,
name|namespaces
argument_list|)
expr_stmt|;
if|else if
condition|(
name|ANALYZER_ELEMENT
operator|.
name|equals
argument_list|(
name|node
operator|.
name|getLocalName
argument_list|()
argument_list|)
condition|)
block|{
name|analyzers
operator|.
name|addAnalyzer
argument_list|(
operator|(
name|Element
operator|)
name|node
argument_list|)
expr_stmt|;
block|}
if|else if
condition|(
name|INDEX_ELEMENT
operator|.
name|equals
argument_list|(
name|node
operator|.
name|getLocalName
argument_list|()
argument_list|)
condition|)
block|{
name|LuceneIndexConfig
name|config
init|=
operator|new
name|LuceneIndexConfig
argument_list|(
operator|(
name|Element
operator|)
name|node
argument_list|,
name|namespaces
argument_list|,
name|analyzers
argument_list|)
decl_stmt|;
name|qnames
operator|.
name|put
argument_list|(
name|config
operator|.
name|getQName
argument_list|()
argument_list|,
name|config
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
block|}
end_class

end_unit

