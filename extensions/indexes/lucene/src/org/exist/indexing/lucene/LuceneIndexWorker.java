begin_unit|revision:1.0.0;language:Java;cregit-version:0.0.1
begin_package
package|package
name|org
operator|.
name|exist
operator|.
name|indexing
operator|.
name|lucene
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|log4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|document
operator|.
name|Document
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|document
operator|.
name|Field
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|index
operator|.
name|IndexReader
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|index
operator|.
name|IndexWriter
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|index
operator|.
name|Term
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|index
operator|.
name|TermDocs
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|index
operator|.
name|TermEnum
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|queryParser
operator|.
name|ParseException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|queryParser
operator|.
name|QueryParser
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|search
operator|.
name|Hits
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|search
operator|.
name|IndexSearcher
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|search
operator|.
name|Query
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|collections
operator|.
name|Collection
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|dom
operator|.
name|DocumentImpl
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|dom
operator|.
name|DocumentSet
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|dom
operator|.
name|ElementImpl
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|dom
operator|.
name|Match
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|dom
operator|.
name|NewArrayNodeSet
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|dom
operator|.
name|NodeProxy
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|dom
operator|.
name|NodeSet
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|dom
operator|.
name|QName
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|dom
operator|.
name|StoredNode
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|dom
operator|.
name|SymbolTable
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|dom
operator|.
name|TextImpl
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|dom
operator|.
name|AttrImpl
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|indexing
operator|.
name|AbstractStreamListener
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|indexing
operator|.
name|IndexController
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|indexing
operator|.
name|IndexWorker
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|indexing
operator|.
name|MatchListener
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|indexing
operator|.
name|OrderedValuesIndex
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|indexing
operator|.
name|QNamedKeysIndex
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|indexing
operator|.
name|StreamListener
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|numbering
operator|.
name|NodeId
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|storage
operator|.
name|DBBroker
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|storage
operator|.
name|IndexSpec
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|storage
operator|.
name|NodePath
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|storage
operator|.
name|txn
operator|.
name|Txn
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|util
operator|.
name|ByteConversion
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|util
operator|.
name|DatabaseConfigurationException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|util
operator|.
name|Occurrences
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|util
operator|.
name|XMLString
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|xquery
operator|.
name|Expression
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|xquery
operator|.
name|XQueryContext
import|;
end_import

begin_import
import|import
name|org
operator|.
name|w3c
operator|.
name|dom
operator|.
name|Element
import|;
end_import

begin_import
import|import
name|org
operator|.
name|w3c
operator|.
name|dom
operator|.
name|Node
import|;
end_import

begin_import
import|import
name|org
operator|.
name|w3c
operator|.
name|dom
operator|.
name|NodeList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Iterator
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Set
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Stack
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|TreeMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|TreeSet
import|;
end_import

begin_class
specifier|public
class|class
name|LuceneIndexWorker
implements|implements
name|OrderedValuesIndex
implements|,
name|QNamedKeysIndex
block|{
specifier|private
specifier|static
specifier|final
name|Logger
name|LOG
init|=
name|Logger
operator|.
name|getLogger
argument_list|(
name|LuceneIndexWorker
operator|.
name|class
argument_list|)
decl_stmt|;
specifier|private
specifier|final
specifier|static
name|String
name|CONFIG_ROOT
init|=
literal|"lucene"
decl_stmt|;
specifier|private
specifier|final
specifier|static
name|String
name|INDEX_ELEMENT
init|=
literal|"text"
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|String
name|QNAME_ATTR
init|=
literal|"qname"
decl_stmt|;
specifier|private
name|LuceneIndex
name|index
decl_stmt|;
specifier|private
name|IndexController
name|controller
decl_stmt|;
specifier|private
name|DocumentImpl
name|currentDoc
init|=
literal|null
decl_stmt|;
specifier|private
name|int
name|mode
init|=
literal|0
decl_stmt|;
specifier|private
name|Map
name|config
decl_stmt|;
specifier|private
name|Stack
name|contentStack
init|=
literal|null
decl_stmt|;
specifier|private
name|Set
name|nodesToRemove
init|=
literal|null
decl_stmt|;
specifier|private
name|IndexWriter
name|writer
init|=
literal|null
decl_stmt|;
specifier|public
name|LuceneIndexWorker
parameter_list|(
name|LuceneIndex
name|parent
parameter_list|)
block|{
name|this
operator|.
name|index
operator|=
name|parent
expr_stmt|;
block|}
specifier|public
name|String
name|getIndexId
parameter_list|()
block|{
return|return
name|LuceneIndex
operator|.
name|ID
return|;
block|}
specifier|public
name|String
name|getIndexName
parameter_list|()
block|{
return|return
name|index
operator|.
name|getIndexName
argument_list|()
return|;
block|}
specifier|public
name|Object
name|configure
parameter_list|(
name|IndexController
name|controller
parameter_list|,
name|NodeList
name|configNodes
parameter_list|,
name|Map
name|namespaces
parameter_list|)
throws|throws
name|DatabaseConfigurationException
block|{
name|this
operator|.
name|controller
operator|=
name|controller
expr_stmt|;
name|LOG
operator|.
name|debug
argument_list|(
literal|"Configuring lucene index"
argument_list|)
expr_stmt|;
comment|// We use a map to store the QNames to be indexed
name|Map
name|map
init|=
operator|new
name|TreeMap
argument_list|()
decl_stmt|;
name|parseConfig
argument_list|(
name|configNodes
argument_list|,
name|namespaces
argument_list|,
name|map
argument_list|)
expr_stmt|;
return|return
name|map
return|;
block|}
comment|/**      * Parse a configuration entry. The main configuration entries for this index      * are the&lt;text&gt; elements. They may be enclosed by a&lt;lucene&gt; element.      *       * @param configNodes      * @param namespaces      * @param map      * @throws DatabaseConfigurationException      */
specifier|private
name|void
name|parseConfig
parameter_list|(
name|NodeList
name|configNodes
parameter_list|,
name|Map
name|namespaces
parameter_list|,
name|Map
name|map
parameter_list|)
throws|throws
name|DatabaseConfigurationException
block|{
name|Node
name|node
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|configNodes
operator|.
name|getLength
argument_list|()
condition|;
name|i
operator|++
control|)
block|{
name|node
operator|=
name|configNodes
operator|.
name|item
argument_list|(
name|i
argument_list|)
expr_stmt|;
if|if
condition|(
name|node
operator|.
name|getNodeType
argument_list|()
operator|==
name|Node
operator|.
name|ELEMENT_NODE
condition|)
block|{
if|if
condition|(
name|CONFIG_ROOT
operator|.
name|equals
argument_list|(
name|node
operator|.
name|getLocalName
argument_list|()
argument_list|)
condition|)
name|parseConfig
argument_list|(
name|node
operator|.
name|getChildNodes
argument_list|()
argument_list|,
name|namespaces
argument_list|,
name|map
argument_list|)
expr_stmt|;
if|else if
condition|(
name|INDEX_ELEMENT
operator|.
name|equals
argument_list|(
name|node
operator|.
name|getLocalName
argument_list|()
argument_list|)
condition|)
block|{
name|String
name|qname
init|=
operator|(
operator|(
name|Element
operator|)
name|node
operator|)
operator|.
name|getAttribute
argument_list|(
name|QNAME_ATTR
argument_list|)
decl_stmt|;
if|if
condition|(
name|qname
operator|==
literal|null
operator|||
name|qname
operator|.
name|length
argument_list|()
operator|==
literal|0
condition|)
throw|throw
operator|new
name|DatabaseConfigurationException
argument_list|(
literal|"Configuration error: element "
operator|+
name|node
operator|.
name|getNodeName
argument_list|()
operator|+
literal|" must have an attribute "
operator|+
name|QNAME_ATTR
argument_list|)
throw|;
name|LuceneIndexConfig
name|config
init|=
operator|new
name|LuceneIndexConfig
argument_list|(
name|namespaces
argument_list|,
name|qname
argument_list|)
decl_stmt|;
name|map
operator|.
name|put
argument_list|(
name|config
operator|.
name|getQName
argument_list|()
argument_list|,
name|config
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
specifier|public
name|void
name|flush
parameter_list|()
block|{
try|try
block|{
switch|switch
condition|(
name|mode
condition|)
block|{
case|case
name|StreamListener
operator|.
name|STORE
case|:
if|if
condition|(
name|writer
operator|!=
literal|null
condition|)
block|{
name|writer
operator|.
name|flush
argument_list|()
expr_stmt|;
name|index
operator|.
name|releaseWriter
argument_list|(
name|writer
argument_list|)
expr_stmt|;
block|}
name|writer
operator|=
literal|null
expr_stmt|;
break|break;
case|case
name|StreamListener
operator|.
name|REMOVE_ALL_NODES
case|:
name|removeDocument
argument_list|(
name|currentDoc
operator|.
name|getDocId
argument_list|()
argument_list|)
expr_stmt|;
break|break;
case|case
name|StreamListener
operator|.
name|REMOVE_SOME_NODES
case|:
name|removeNodes
argument_list|()
expr_stmt|;
break|break;
block|}
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|warn
argument_list|(
literal|"Caught an exception while flushing lucene index: "
operator|+
name|e
operator|.
name|getMessage
argument_list|()
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
block|}
specifier|public
name|void
name|setDocument
parameter_list|(
name|DocumentImpl
name|document
parameter_list|)
block|{
name|setDocument
argument_list|(
name|document
argument_list|,
name|StreamListener
operator|.
name|UNKNOWN
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|setDocument
parameter_list|(
name|DocumentImpl
name|document
parameter_list|,
name|int
name|newMode
parameter_list|)
block|{
name|currentDoc
operator|=
name|document
expr_stmt|;
comment|//config = null;
name|contentStack
operator|=
literal|null
expr_stmt|;
name|IndexSpec
name|indexConf
init|=
name|document
operator|.
name|getCollection
argument_list|()
operator|.
name|getIndexConfiguration
argument_list|(
name|document
operator|.
name|getBroker
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|indexConf
operator|!=
literal|null
condition|)
name|config
operator|=
operator|(
name|Map
operator|)
name|indexConf
operator|.
name|getCustomIndexSpec
argument_list|(
name|LuceneIndex
operator|.
name|ID
argument_list|)
expr_stmt|;
name|mode
operator|=
name|newMode
expr_stmt|;
block|}
specifier|public
name|void
name|setMode
parameter_list|(
name|int
name|mode
parameter_list|)
block|{
name|this
operator|.
name|mode
operator|=
name|mode
expr_stmt|;
try|try
block|{
switch|switch
condition|(
name|mode
condition|)
block|{
case|case
name|StreamListener
operator|.
name|STORE
case|:
name|writer
operator|=
name|index
operator|.
name|getWriter
argument_list|()
expr_stmt|;
break|break;
case|case
name|StreamListener
operator|.
name|REMOVE_SOME_NODES
case|:
name|nodesToRemove
operator|=
operator|new
name|TreeSet
argument_list|()
expr_stmt|;
break|break;
block|}
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|warn
argument_list|(
literal|"Caught exception while preparing lucene index: "
operator|+
name|e
operator|.
name|getMessage
argument_list|()
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
block|}
specifier|public
name|DocumentImpl
name|getDocument
parameter_list|()
block|{
return|return
name|currentDoc
return|;
block|}
specifier|public
name|int
name|getMode
parameter_list|()
block|{
return|return
name|this
operator|.
name|mode
return|;
block|}
specifier|public
name|StoredNode
name|getReindexRoot
parameter_list|(
name|StoredNode
name|node
parameter_list|,
name|NodePath
name|path
parameter_list|,
name|boolean
name|includeSelf
parameter_list|)
block|{
if|if
condition|(
name|node
operator|.
name|getNodeType
argument_list|()
operator|==
name|Node
operator|.
name|ATTRIBUTE_NODE
condition|)
return|return
literal|null
return|;
if|if
condition|(
name|config
operator|==
literal|null
condition|)
return|return
literal|null
return|;
name|boolean
name|reindexRequired
init|=
literal|false
decl_stmt|;
name|int
name|len
init|=
name|node
operator|.
name|getNodeType
argument_list|()
operator|==
name|Node
operator|.
name|ELEMENT_NODE
operator|&&
operator|!
name|includeSelf
condition|?
name|path
operator|.
name|length
argument_list|()
operator|-
literal|1
else|:
name|path
operator|.
name|length
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|len
condition|;
name|i
operator|++
control|)
block|{
name|QName
name|qn
init|=
name|path
operator|.
name|getComponent
argument_list|(
name|i
argument_list|)
decl_stmt|;
if|if
condition|(
name|config
operator|.
name|get
argument_list|(
name|qn
argument_list|)
operator|!=
literal|null
condition|)
block|{
name|reindexRequired
operator|=
literal|true
expr_stmt|;
break|break;
block|}
block|}
if|if
condition|(
name|reindexRequired
condition|)
block|{
name|StoredNode
name|topMost
init|=
literal|null
decl_stmt|;
name|StoredNode
name|currentNode
init|=
name|node
decl_stmt|;
while|while
condition|(
name|currentNode
operator|!=
literal|null
condition|)
block|{
if|if
condition|(
name|config
operator|.
name|get
argument_list|(
name|currentNode
operator|.
name|getQName
argument_list|()
argument_list|)
operator|!=
literal|null
condition|)
name|topMost
operator|=
name|currentNode
expr_stmt|;
name|currentNode
operator|=
name|currentNode
operator|.
name|getParentStoredNode
argument_list|()
expr_stmt|;
block|}
return|return
name|topMost
return|;
block|}
return|return
literal|null
return|;
block|}
specifier|private
name|StreamListener
name|listener
init|=
operator|new
name|LuceneStreamListener
argument_list|()
decl_stmt|;
specifier|public
name|StreamListener
name|getListener
parameter_list|()
block|{
return|return
name|listener
return|;
block|}
specifier|public
name|MatchListener
name|getMatchListener
parameter_list|(
name|DBBroker
name|broker
parameter_list|,
name|NodeProxy
name|proxy
parameter_list|)
block|{
return|return
literal|null
return|;
comment|//To change body of implemented methods use File | Settings | File Templates.
block|}
specifier|protected
name|void
name|removeDocument
parameter_list|(
name|int
name|docId
parameter_list|)
block|{
name|IndexReader
name|reader
init|=
literal|null
decl_stmt|;
try|try
block|{
name|reader
operator|=
name|index
operator|.
name|getReader
argument_list|()
expr_stmt|;
name|Term
name|dt
init|=
operator|new
name|Term
argument_list|(
literal|"docId"
argument_list|,
name|Integer
operator|.
name|toString
argument_list|(
name|docId
argument_list|)
argument_list|)
decl_stmt|;
name|reader
operator|.
name|deleteDocuments
argument_list|(
name|dt
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|warn
argument_list|(
literal|"Error while removing lucene index: "
operator|+
name|e
operator|.
name|getMessage
argument_list|()
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
name|index
operator|.
name|releaseReader
argument_list|(
name|reader
argument_list|)
expr_stmt|;
block|}
block|}
specifier|public
name|void
name|removeCollection
parameter_list|(
name|Collection
name|collection
parameter_list|,
name|DBBroker
name|broker
parameter_list|)
block|{
if|if
condition|(
name|LOG
operator|.
name|isDebugEnabled
argument_list|()
condition|)
name|LOG
operator|.
name|debug
argument_list|(
literal|"Removing collection "
operator|+
name|collection
operator|.
name|getURI
argument_list|()
argument_list|)
expr_stmt|;
name|IndexReader
name|reader
init|=
literal|null
decl_stmt|;
try|try
block|{
name|reader
operator|=
name|index
operator|.
name|getReader
argument_list|()
expr_stmt|;
for|for
control|(
name|Iterator
name|i
init|=
name|collection
operator|.
name|iterator
argument_list|(
name|broker
argument_list|)
init|;
name|i
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|DocumentImpl
name|doc
init|=
operator|(
name|DocumentImpl
operator|)
name|i
operator|.
name|next
argument_list|()
decl_stmt|;
name|Term
name|dt
init|=
operator|new
name|Term
argument_list|(
literal|"docId"
argument_list|,
name|Integer
operator|.
name|toString
argument_list|(
name|doc
operator|.
name|getDocId
argument_list|()
argument_list|)
argument_list|)
decl_stmt|;
name|TermDocs
name|td
init|=
name|reader
operator|.
name|termDocs
argument_list|(
name|dt
argument_list|)
decl_stmt|;
while|while
condition|(
name|td
operator|.
name|next
argument_list|()
condition|)
block|{
name|reader
operator|.
name|deleteDocument
argument_list|(
name|td
operator|.
name|doc
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
name|reader
operator|.
name|flush
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|warn
argument_list|(
literal|"Error while removing lucene index: "
operator|+
name|e
operator|.
name|getMessage
argument_list|()
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
name|index
operator|.
name|releaseReader
argument_list|(
name|reader
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|LOG
operator|.
name|isDebugEnabled
argument_list|()
condition|)
name|LOG
operator|.
name|debug
argument_list|(
literal|"Collection removed."
argument_list|)
expr_stmt|;
block|}
comment|/**      * Remove specific nodes from the index. This method is used for node updates      * and called from flush() if the worker is in {@link StreamListener#REMOVE_SOME_NODES}      * mode.      */
specifier|protected
name|void
name|removeNodes
parameter_list|()
block|{
if|if
condition|(
name|nodesToRemove
operator|==
literal|null
condition|)
return|return;
name|IndexReader
name|reader
init|=
literal|null
decl_stmt|;
try|try
block|{
name|reader
operator|=
name|index
operator|.
name|getReader
argument_list|()
expr_stmt|;
name|Term
name|dt
init|=
operator|new
name|Term
argument_list|(
literal|"docId"
argument_list|,
name|Integer
operator|.
name|toString
argument_list|(
name|currentDoc
operator|.
name|getDocId
argument_list|()
argument_list|)
argument_list|)
decl_stmt|;
name|TermDocs
name|docsEnum
init|=
name|reader
operator|.
name|termDocs
argument_list|(
name|dt
argument_list|)
decl_stmt|;
while|while
condition|(
name|docsEnum
operator|.
name|next
argument_list|()
condition|)
block|{
name|Document
name|doc
init|=
name|reader
operator|.
name|document
argument_list|(
name|docsEnum
operator|.
name|doc
argument_list|()
argument_list|)
decl_stmt|;
name|NodeId
name|nodeId
init|=
name|readNodeId
argument_list|(
name|doc
argument_list|)
decl_stmt|;
if|if
condition|(
name|nodesToRemove
operator|.
name|contains
argument_list|(
name|nodeId
argument_list|)
condition|)
block|{
name|reader
operator|.
name|deleteDocument
argument_list|(
name|docsEnum
operator|.
name|doc
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
name|nodesToRemove
operator|=
literal|null
expr_stmt|;
name|reader
operator|.
name|flush
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|warn
argument_list|(
literal|"Error while deleting lucene index entries: "
operator|+
name|e
operator|.
name|getMessage
argument_list|()
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
name|index
operator|.
name|releaseReader
argument_list|(
name|reader
argument_list|)
expr_stmt|;
block|}
block|}
comment|/**      * Query the index. Returns a node set containing all matching nodes. Each node      * in the node set has a {@link org.exist.indexing.lucene.LuceneIndexWorker.LuceneMatch}      * element attached, which stores the score and a link to the query which generated it.      *      * @param context current XQuery context      * @param contextId current context id, identify to track the position inside nested XPath predicates      * @param docs query will be restricted to documents in this set      * @param contextSet if specified, returned nodes will be descendants of the nodes in this set      * @param qnames query will be restricted to nodes with the qualified names given here      * @param queryStr a lucene query string      * @param axis which node is returned: the node in which a match was found or the corresponding ancestor      *  from the contextSet      * @return node set containing all matching nodes      *       * @throws IOException      * @throws ParseException      */
specifier|public
name|NodeSet
name|query
parameter_list|(
name|XQueryContext
name|context
parameter_list|,
name|int
name|contextId
parameter_list|,
name|DocumentSet
name|docs
parameter_list|,
name|NodeSet
name|contextSet
parameter_list|,
name|List
name|qnames
parameter_list|,
name|String
name|queryStr
parameter_list|,
name|int
name|axis
parameter_list|)
throws|throws
name|IOException
throws|,
name|ParseException
block|{
if|if
condition|(
name|qnames
operator|==
literal|null
operator|||
name|qnames
operator|.
name|isEmpty
argument_list|()
condition|)
name|qnames
operator|=
name|getDefinedIndexes
argument_list|(
name|context
operator|.
name|getBroker
argument_list|()
argument_list|,
name|docs
argument_list|)
expr_stmt|;
name|NodeSet
name|resultSet
init|=
operator|new
name|NewArrayNodeSet
argument_list|()
decl_stmt|;
name|boolean
name|returnAncestor
init|=
name|axis
operator|==
name|NodeSet
operator|.
name|ANCESTOR
decl_stmt|;
name|IndexSearcher
name|searcher
init|=
literal|null
decl_stmt|;
try|try
block|{
name|searcher
operator|=
name|index
operator|.
name|getSearcher
argument_list|()
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|qnames
operator|.
name|size
argument_list|()
condition|;
name|i
operator|++
control|)
block|{
name|QName
name|qname
init|=
operator|(
name|QName
operator|)
name|qnames
operator|.
name|get
argument_list|(
name|i
argument_list|)
decl_stmt|;
name|String
name|field
init|=
name|encodeQName
argument_list|(
name|qname
argument_list|)
decl_stmt|;
name|QueryParser
name|parser
init|=
operator|new
name|QueryParser
argument_list|(
name|field
argument_list|,
name|index
operator|.
name|getAnalyzer
argument_list|()
argument_list|)
decl_stmt|;
name|Query
name|query
init|=
name|parser
operator|.
name|parse
argument_list|(
name|queryStr
argument_list|)
decl_stmt|;
name|Hits
name|hits
init|=
name|searcher
operator|.
name|search
argument_list|(
name|query
argument_list|)
decl_stmt|;
if|if
condition|(
name|LOG
operator|.
name|isDebugEnabled
argument_list|()
condition|)
name|LOG
operator|.
name|debug
argument_list|(
literal|"Found "
operator|+
name|hits
operator|.
name|length
argument_list|()
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|j
init|=
literal|0
init|;
name|j
operator|<
name|hits
operator|.
name|length
argument_list|()
condition|;
name|j
operator|++
control|)
block|{
name|Document
name|doc
init|=
name|hits
operator|.
name|doc
argument_list|(
name|j
argument_list|)
decl_stmt|;
name|Field
name|fDocId
init|=
name|doc
operator|.
name|getField
argument_list|(
literal|"docId"
argument_list|)
decl_stmt|;
name|int
name|docId
init|=
name|Integer
operator|.
name|parseInt
argument_list|(
name|fDocId
operator|.
name|stringValue
argument_list|()
argument_list|)
decl_stmt|;
name|DocumentImpl
name|storedDocument
init|=
name|docs
operator|.
name|getDoc
argument_list|(
name|docId
argument_list|)
decl_stmt|;
if|if
condition|(
name|storedDocument
operator|==
literal|null
condition|)
continue|continue;
name|NodeId
name|nodeId
init|=
name|readNodeId
argument_list|(
name|doc
argument_list|)
decl_stmt|;
name|NodeProxy
name|storedNode
init|=
operator|new
name|NodeProxy
argument_list|(
name|storedDocument
argument_list|,
name|nodeId
argument_list|)
decl_stmt|;
comment|// if a context set is specified, we can directly check if the
comment|// matching node is a descendant of one of the nodes
comment|// in the context set.
if|if
condition|(
name|contextSet
operator|!=
literal|null
condition|)
block|{
name|int
name|sizeHint
init|=
name|contextSet
operator|.
name|getSizeHint
argument_list|(
name|storedDocument
argument_list|)
decl_stmt|;
if|if
condition|(
name|returnAncestor
condition|)
block|{
name|NodeProxy
name|parentNode
init|=
name|contextSet
operator|.
name|parentWithChild
argument_list|(
name|storedNode
argument_list|,
literal|false
argument_list|,
literal|true
argument_list|,
name|NodeProxy
operator|.
name|UNKNOWN_NODE_LEVEL
argument_list|)
decl_stmt|;
if|if
condition|(
name|parentNode
operator|!=
literal|null
condition|)
block|{
name|LuceneMatch
name|match
init|=
operator|new
name|LuceneMatch
argument_list|(
name|contextId
argument_list|,
name|nodeId
argument_list|,
name|query
argument_list|)
decl_stmt|;
name|match
operator|.
name|setScore
argument_list|(
name|hits
operator|.
name|score
argument_list|(
name|j
argument_list|)
argument_list|)
expr_stmt|;
name|parentNode
operator|.
name|addMatch
argument_list|(
name|match
argument_list|)
expr_stmt|;
name|resultSet
operator|.
name|add
argument_list|(
name|parentNode
argument_list|,
name|sizeHint
argument_list|)
expr_stmt|;
if|if
condition|(
name|Expression
operator|.
name|NO_CONTEXT_ID
operator|!=
name|contextId
condition|)
block|{
name|parentNode
operator|.
name|deepCopyContext
argument_list|(
name|storedNode
argument_list|,
name|contextId
argument_list|)
expr_stmt|;
block|}
else|else
name|parentNode
operator|.
name|copyContext
argument_list|(
name|storedNode
argument_list|)
expr_stmt|;
block|}
block|}
else|else
block|{
name|LuceneMatch
name|match
init|=
operator|new
name|LuceneMatch
argument_list|(
name|contextId
argument_list|,
name|nodeId
argument_list|,
name|query
argument_list|)
decl_stmt|;
name|match
operator|.
name|setScore
argument_list|(
name|hits
operator|.
name|score
argument_list|(
name|j
argument_list|)
argument_list|)
expr_stmt|;
name|storedNode
operator|.
name|addMatch
argument_list|(
name|match
argument_list|)
expr_stmt|;
name|resultSet
operator|.
name|add
argument_list|(
name|storedNode
argument_list|,
name|sizeHint
argument_list|)
expr_stmt|;
block|}
block|}
else|else
block|{
name|LuceneMatch
name|match
init|=
operator|new
name|LuceneMatch
argument_list|(
name|contextId
argument_list|,
name|nodeId
argument_list|,
name|query
argument_list|)
decl_stmt|;
name|match
operator|.
name|setScore
argument_list|(
name|hits
operator|.
name|score
argument_list|(
name|j
argument_list|)
argument_list|)
expr_stmt|;
name|storedNode
operator|.
name|addMatch
argument_list|(
name|match
argument_list|)
expr_stmt|;
name|resultSet
operator|.
name|add
argument_list|(
name|storedNode
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
finally|finally
block|{
name|index
operator|.
name|releaseSearcher
argument_list|(
name|searcher
argument_list|)
expr_stmt|;
block|}
return|return
name|resultSet
return|;
block|}
specifier|private
name|NodeId
name|readNodeId
parameter_list|(
name|Document
name|doc
parameter_list|)
block|{
name|byte
index|[]
name|temp
decl_stmt|;
name|Field
name|fNodeId
init|=
name|doc
operator|.
name|getField
argument_list|(
literal|"nodeId"
argument_list|)
decl_stmt|;
name|temp
operator|=
name|fNodeId
operator|.
name|binaryValue
argument_list|()
expr_stmt|;
name|int
name|units
init|=
name|ByteConversion
operator|.
name|byteToShort
argument_list|(
name|temp
argument_list|,
literal|0
argument_list|)
decl_stmt|;
name|NodeId
name|nodeId
init|=
name|index
operator|.
name|getBrokerPool
argument_list|()
operator|.
name|getNodeFactory
argument_list|()
operator|.
name|createFromData
argument_list|(
name|units
argument_list|,
name|temp
argument_list|,
literal|2
argument_list|)
decl_stmt|;
return|return
name|nodeId
return|;
block|}
comment|/**      * Check index configurations for all collection in the given DocumentSet and return      * a list of QNames, which have indexes defined on them.      *      * @param broker      * @param docs      * @return      */
specifier|private
name|List
name|getDefinedIndexes
parameter_list|(
name|DBBroker
name|broker
parameter_list|,
name|DocumentSet
name|docs
parameter_list|)
block|{
name|List
name|indexes
init|=
operator|new
name|ArrayList
argument_list|(
literal|20
argument_list|)
decl_stmt|;
for|for
control|(
name|Iterator
name|i
init|=
name|docs
operator|.
name|getCollectionIterator
argument_list|()
init|;
name|i
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|Collection
name|collection
init|=
operator|(
name|Collection
operator|)
name|i
operator|.
name|next
argument_list|()
decl_stmt|;
name|IndexSpec
name|idxConf
init|=
name|collection
operator|.
name|getIndexConfiguration
argument_list|(
name|broker
argument_list|)
decl_stmt|;
if|if
condition|(
name|idxConf
operator|!=
literal|null
condition|)
block|{
name|Map
name|config
init|=
operator|(
name|Map
operator|)
name|idxConf
operator|.
name|getCustomIndexSpec
argument_list|(
name|LuceneIndex
operator|.
name|ID
argument_list|)
decl_stmt|;
if|if
condition|(
name|config
operator|!=
literal|null
condition|)
block|{
for|for
control|(
name|Iterator
name|ci
init|=
name|config
operator|.
name|keySet
argument_list|()
operator|.
name|iterator
argument_list|()
init|;
name|ci
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|QName
name|qn
init|=
operator|(
name|QName
operator|)
name|ci
operator|.
name|next
argument_list|()
decl_stmt|;
name|indexes
operator|.
name|add
argument_list|(
name|qn
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
return|return
name|indexes
return|;
block|}
specifier|public
name|boolean
name|checkIndex
parameter_list|(
name|DBBroker
name|broker
parameter_list|)
block|{
return|return
literal|false
return|;
comment|//To change body of implemented methods use File | Settings | File Templates.
block|}
specifier|public
name|Occurrences
index|[]
name|scanIndex
parameter_list|(
name|XQueryContext
name|context
parameter_list|,
name|DocumentSet
name|docs
parameter_list|,
name|NodeSet
name|contextSet
parameter_list|,
name|Map
name|hints
parameter_list|)
block|{
name|List
name|qnames
init|=
name|hints
operator|==
literal|null
condition|?
literal|null
else|:
operator|(
name|List
operator|)
name|hints
operator|.
name|get
argument_list|(
name|QNAMES_KEY
argument_list|)
decl_stmt|;
if|if
condition|(
name|qnames
operator|==
literal|null
operator|||
name|qnames
operator|.
name|isEmpty
argument_list|()
condition|)
name|qnames
operator|=
name|getDefinedIndexes
argument_list|(
name|context
operator|.
name|getBroker
argument_list|()
argument_list|,
name|docs
argument_list|)
expr_stmt|;
comment|//Expects a StringValue
name|Object
name|start
init|=
name|hints
operator|==
literal|null
condition|?
literal|null
else|:
name|hints
operator|.
name|get
argument_list|(
name|START_VALUE
argument_list|)
decl_stmt|;
name|Object
name|end
init|=
name|hints
operator|==
literal|null
condition|?
literal|null
else|:
name|hints
operator|.
name|get
argument_list|(
name|END_VALUE
argument_list|)
decl_stmt|;
name|TreeMap
name|map
init|=
operator|new
name|TreeMap
argument_list|()
decl_stmt|;
name|IndexReader
name|reader
init|=
literal|null
decl_stmt|;
try|try
block|{
name|reader
operator|=
name|index
operator|.
name|getReader
argument_list|()
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|qnames
operator|.
name|size
argument_list|()
condition|;
name|i
operator|++
control|)
block|{
name|QName
name|qname
init|=
operator|(
name|QName
operator|)
name|qnames
operator|.
name|get
argument_list|(
name|i
argument_list|)
decl_stmt|;
name|String
name|field
init|=
name|encodeQName
argument_list|(
name|qname
argument_list|)
decl_stmt|;
name|TermEnum
name|terms
decl_stmt|;
if|if
condition|(
name|start
operator|==
literal|null
condition|)
name|terms
operator|=
name|reader
operator|.
name|terms
argument_list|(
operator|new
name|Term
argument_list|(
name|field
argument_list|,
literal|""
argument_list|)
argument_list|)
expr_stmt|;
else|else
name|terms
operator|=
name|reader
operator|.
name|terms
argument_list|(
operator|new
name|Term
argument_list|(
name|field
argument_list|,
name|start
operator|.
name|toString
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
if|if
condition|(
name|terms
operator|==
literal|null
condition|)
continue|continue;
name|Term
name|term
decl_stmt|;
do|do
block|{
name|term
operator|=
name|terms
operator|.
name|term
argument_list|()
expr_stmt|;
if|if
condition|(
name|term
operator|!=
literal|null
operator|&&
name|term
operator|.
name|field
argument_list|()
operator|.
name|equals
argument_list|(
name|field
argument_list|)
condition|)
block|{
name|boolean
name|include
init|=
literal|true
decl_stmt|;
if|if
condition|(
name|end
operator|!=
literal|null
condition|)
block|{
if|if
condition|(
name|term
operator|.
name|text
argument_list|()
operator|.
name|compareTo
argument_list|(
name|start
operator|.
name|toString
argument_list|()
argument_list|)
operator|>
literal|0
condition|)
name|include
operator|=
literal|false
expr_stmt|;
block|}
if|else if
condition|(
name|start
operator|!=
literal|null
operator|&&
operator|!
name|term
operator|.
name|text
argument_list|()
operator|.
name|startsWith
argument_list|(
name|start
operator|.
name|toString
argument_list|()
argument_list|)
condition|)
name|include
operator|=
literal|false
expr_stmt|;
if|if
condition|(
name|include
condition|)
block|{
name|TermDocs
name|docsEnum
init|=
name|reader
operator|.
name|termDocs
argument_list|(
name|term
argument_list|)
decl_stmt|;
while|while
condition|(
name|docsEnum
operator|.
name|next
argument_list|()
condition|)
block|{
if|if
condition|(
name|reader
operator|.
name|isDeleted
argument_list|(
name|docsEnum
operator|.
name|doc
argument_list|()
argument_list|)
condition|)
continue|continue;
name|Document
name|doc
init|=
name|reader
operator|.
name|document
argument_list|(
name|docsEnum
operator|.
name|doc
argument_list|()
argument_list|)
decl_stmt|;
name|Field
name|fDocId
init|=
name|doc
operator|.
name|getField
argument_list|(
literal|"docId"
argument_list|)
decl_stmt|;
name|int
name|docId
init|=
name|Integer
operator|.
name|parseInt
argument_list|(
name|fDocId
operator|.
name|stringValue
argument_list|()
argument_list|)
decl_stmt|;
name|DocumentImpl
name|storedDocument
init|=
name|docs
operator|.
name|getDoc
argument_list|(
name|docId
argument_list|)
decl_stmt|;
if|if
condition|(
name|storedDocument
operator|==
literal|null
condition|)
continue|continue;
if|if
condition|(
name|contextSet
operator|!=
literal|null
condition|)
block|{
name|NodeId
name|nodeId
init|=
name|readNodeId
argument_list|(
name|doc
argument_list|)
decl_stmt|;
name|NodeProxy
name|parentNode
init|=
name|contextSet
operator|.
name|parentWithChild
argument_list|(
name|storedDocument
argument_list|,
name|nodeId
argument_list|,
literal|false
argument_list|,
literal|true
argument_list|)
decl_stmt|;
name|include
operator|=
operator|(
name|parentNode
operator|!=
literal|null
operator|)
expr_stmt|;
block|}
if|if
condition|(
name|include
condition|)
block|{
name|Occurrences
name|oc
init|=
operator|(
name|Occurrences
operator|)
name|map
operator|.
name|get
argument_list|(
name|term
argument_list|)
decl_stmt|;
if|if
condition|(
name|oc
operator|==
literal|null
condition|)
block|{
name|oc
operator|=
operator|new
name|Occurrences
argument_list|(
name|term
operator|.
name|text
argument_list|()
argument_list|)
expr_stmt|;
name|map
operator|.
name|put
argument_list|(
name|term
argument_list|,
name|oc
argument_list|)
expr_stmt|;
block|}
name|oc
operator|.
name|addDocument
argument_list|(
name|storedDocument
argument_list|)
expr_stmt|;
name|oc
operator|.
name|addOccurrences
argument_list|(
name|docsEnum
operator|.
name|freq
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
name|docsEnum
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
block|}
block|}
do|while
condition|(
name|terms
operator|.
name|next
argument_list|()
condition|)
do|;
name|terms
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|warn
argument_list|(
literal|"Error while scanning lucene index entries: "
operator|+
name|e
operator|.
name|getMessage
argument_list|()
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
name|index
operator|.
name|releaseReader
argument_list|(
name|reader
argument_list|)
expr_stmt|;
block|}
name|Occurrences
index|[]
name|occur
init|=
operator|new
name|Occurrences
index|[
name|map
operator|.
name|size
argument_list|()
index|]
decl_stmt|;
return|return
operator|(
name|Occurrences
index|[]
operator|)
name|map
operator|.
name|values
argument_list|()
operator|.
name|toArray
argument_list|(
name|occur
argument_list|)
return|;
block|}
comment|/**      * Adds the passed character sequence to the lucene index. We      * create one lucene document per XML node, using 2 fields to identify      * the node:      *      *<ul>      *<li>docId: eXist-internal document id of the node, stored as string.</li>      *<li>nodeId: the id of the node, stored in binary compressed form.</li>      *</ul>      *      * The text is indexed into a field whose name encodes the qualified name of      * the node. The qualified name is stored as a hex sequence pointing into the      * global symbol table.      *      * @param nodeId      * @param qname      * @param content      */
specifier|protected
name|void
name|indexText
parameter_list|(
name|NodeId
name|nodeId
parameter_list|,
name|QName
name|qname
parameter_list|,
name|CharSequence
name|content
parameter_list|)
block|{
if|if
condition|(
name|writer
operator|==
literal|null
condition|)
return|return;
name|Document
name|doc
init|=
operator|new
name|Document
argument_list|()
decl_stmt|;
comment|// store the node id
name|int
name|nodeIdLen
init|=
name|nodeId
operator|.
name|size
argument_list|()
decl_stmt|;
name|byte
index|[]
name|data
init|=
operator|new
name|byte
index|[
name|nodeIdLen
operator|+
literal|2
index|]
decl_stmt|;
name|ByteConversion
operator|.
name|shortToByte
argument_list|(
operator|(
name|short
operator|)
name|nodeId
operator|.
name|units
argument_list|()
argument_list|,
name|data
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|nodeId
operator|.
name|serialize
argument_list|(
name|data
argument_list|,
literal|2
argument_list|)
expr_stmt|;
name|String
name|contentField
init|=
name|encodeQName
argument_list|(
name|qname
argument_list|)
decl_stmt|;
name|doc
operator|.
name|add
argument_list|(
operator|new
name|Field
argument_list|(
literal|"docId"
argument_list|,
name|Integer
operator|.
name|toString
argument_list|(
name|currentDoc
operator|.
name|getDocId
argument_list|()
argument_list|)
argument_list|,
name|Field
operator|.
name|Store
operator|.
name|COMPRESS
argument_list|,
name|Field
operator|.
name|Index
operator|.
name|UN_TOKENIZED
argument_list|)
argument_list|)
expr_stmt|;
name|doc
operator|.
name|add
argument_list|(
operator|new
name|Field
argument_list|(
literal|"nodeId"
argument_list|,
name|data
argument_list|,
name|Field
operator|.
name|Store
operator|.
name|YES
argument_list|)
argument_list|)
expr_stmt|;
name|doc
operator|.
name|add
argument_list|(
operator|new
name|Field
argument_list|(
name|contentField
argument_list|,
name|content
operator|.
name|toString
argument_list|()
argument_list|,
name|Field
operator|.
name|Store
operator|.
name|NO
argument_list|,
name|Field
operator|.
name|Index
operator|.
name|TOKENIZED
argument_list|)
argument_list|)
expr_stmt|;
try|try
block|{
name|writer
operator|.
name|addDocument
argument_list|(
name|doc
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|warn
argument_list|(
literal|"An exception was caught while indexing document: "
operator|+
name|e
operator|.
name|getMessage
argument_list|()
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
block|}
specifier|private
name|String
name|encodeQName
parameter_list|(
name|QName
name|qname
parameter_list|)
block|{
name|SymbolTable
name|symbols
init|=
name|index
operator|.
name|getBrokerPool
argument_list|()
operator|.
name|getSymbols
argument_list|()
decl_stmt|;
name|short
name|namespaceId
init|=
name|symbols
operator|.
name|getNSSymbol
argument_list|(
name|qname
operator|.
name|getNamespaceURI
argument_list|()
argument_list|)
decl_stmt|;
name|short
name|localNameId
init|=
name|symbols
operator|.
name|getSymbol
argument_list|(
name|qname
operator|.
name|getLocalName
argument_list|()
argument_list|)
decl_stmt|;
name|long
name|nameId
init|=
name|qname
operator|.
name|getNameType
argument_list|()
operator||
operator|(
operator|(
operator|(
name|int
operator|)
name|namespaceId
operator|)
operator|&
literal|0xFFFF
operator|)
operator|<<
literal|16
operator||
operator|(
operator|(
operator|(
name|long
operator|)
name|localNameId
operator|)
operator|&
literal|0xFFFFFFFFL
operator|)
operator|<<
literal|32
decl_stmt|;
return|return
name|Long
operator|.
name|toHexString
argument_list|(
name|nameId
argument_list|)
return|;
block|}
specifier|private
class|class
name|LuceneStreamListener
extends|extends
name|AbstractStreamListener
block|{
specifier|public
name|void
name|startElement
parameter_list|(
name|Txn
name|transaction
parameter_list|,
name|ElementImpl
name|element
parameter_list|,
name|NodePath
name|path
parameter_list|)
block|{
if|if
condition|(
name|mode
operator|==
name|STORE
operator|&&
name|config
operator|!=
literal|null
operator|&&
name|config
operator|.
name|get
argument_list|(
name|element
operator|.
name|getQName
argument_list|()
argument_list|)
operator|!=
literal|null
condition|)
block|{
if|if
condition|(
name|contentStack
operator|==
literal|null
condition|)
name|contentStack
operator|=
operator|new
name|Stack
argument_list|()
expr_stmt|;
name|XMLString
name|contentBuf
init|=
operator|new
name|XMLString
argument_list|()
decl_stmt|;
name|contentStack
operator|.
name|push
argument_list|(
name|contentBuf
argument_list|)
expr_stmt|;
block|}
name|super
operator|.
name|startElement
argument_list|(
name|transaction
argument_list|,
name|element
argument_list|,
name|path
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|endElement
parameter_list|(
name|Txn
name|transaction
parameter_list|,
name|ElementImpl
name|element
parameter_list|,
name|NodePath
name|path
parameter_list|)
block|{
if|if
condition|(
name|mode
operator|!=
name|REMOVE_ALL_NODES
operator|&&
name|config
operator|!=
literal|null
operator|&&
name|config
operator|.
name|get
argument_list|(
name|element
operator|.
name|getQName
argument_list|()
argument_list|)
operator|!=
literal|null
condition|)
block|{
if|if
condition|(
name|mode
operator|==
name|REMOVE_SOME_NODES
condition|)
block|{
name|nodesToRemove
operator|.
name|add
argument_list|(
name|element
operator|.
name|getNodeId
argument_list|()
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|XMLString
name|content
init|=
operator|(
name|XMLString
operator|)
name|contentStack
operator|.
name|pop
argument_list|()
decl_stmt|;
name|indexText
argument_list|(
name|element
operator|.
name|getNodeId
argument_list|()
argument_list|,
name|element
operator|.
name|getQName
argument_list|()
argument_list|,
name|content
argument_list|)
expr_stmt|;
block|}
block|}
name|super
operator|.
name|endElement
argument_list|(
name|transaction
argument_list|,
name|element
argument_list|,
name|path
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|attribute
parameter_list|(
name|Txn
name|transaction
parameter_list|,
name|AttrImpl
name|attrib
parameter_list|,
name|NodePath
name|path
parameter_list|)
block|{
if|if
condition|(
name|mode
operator|!=
name|REMOVE_ALL_NODES
operator|&&
name|config
operator|!=
literal|null
operator|&&
name|config
operator|.
name|get
argument_list|(
name|attrib
operator|.
name|getQName
argument_list|()
argument_list|)
operator|!=
literal|null
condition|)
block|{
if|if
condition|(
name|mode
operator|==
name|REMOVE_SOME_NODES
condition|)
block|{
name|nodesToRemove
operator|.
name|add
argument_list|(
name|attrib
operator|.
name|getNodeId
argument_list|()
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|indexText
argument_list|(
name|attrib
operator|.
name|getNodeId
argument_list|()
argument_list|,
name|attrib
operator|.
name|getQName
argument_list|()
argument_list|,
name|attrib
operator|.
name|getValue
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
name|super
operator|.
name|attribute
argument_list|(
name|transaction
argument_list|,
name|attrib
argument_list|,
name|path
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|characters
parameter_list|(
name|Txn
name|transaction
parameter_list|,
name|TextImpl
name|text
parameter_list|,
name|NodePath
name|path
parameter_list|)
block|{
if|if
condition|(
name|contentStack
operator|!=
literal|null
operator|&&
operator|!
name|contentStack
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|contentStack
operator|.
name|size
argument_list|()
condition|;
name|i
operator|++
control|)
block|{
name|XMLString
name|next
init|=
operator|(
name|XMLString
operator|)
name|contentStack
operator|.
name|get
argument_list|(
name|i
argument_list|)
decl_stmt|;
name|next
operator|.
name|append
argument_list|(
name|text
operator|.
name|getXMLString
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
name|super
operator|.
name|characters
argument_list|(
name|transaction
argument_list|,
name|text
argument_list|,
name|path
argument_list|)
expr_stmt|;
block|}
specifier|public
name|IndexWorker
name|getWorker
parameter_list|()
block|{
return|return
name|LuceneIndexWorker
operator|.
name|this
return|;
block|}
block|}
comment|/**      * Match class containing the score of a match and a reference to      * the query that generated it.      */
specifier|public
class|class
name|LuceneMatch
extends|extends
name|Match
block|{
specifier|private
name|float
name|score
init|=
literal|0.0f
decl_stmt|;
specifier|private
name|Query
name|query
decl_stmt|;
specifier|public
name|LuceneMatch
parameter_list|(
name|int
name|contextId
parameter_list|,
name|NodeId
name|nodeId
parameter_list|,
name|Query
name|query
parameter_list|)
block|{
name|super
argument_list|(
name|contextId
argument_list|,
name|nodeId
argument_list|,
literal|null
argument_list|)
expr_stmt|;
name|this
operator|.
name|query
operator|=
name|query
expr_stmt|;
block|}
specifier|public
name|LuceneMatch
parameter_list|(
name|LuceneMatch
name|copy
parameter_list|)
block|{
name|super
argument_list|(
name|copy
argument_list|)
expr_stmt|;
name|this
operator|.
name|score
operator|=
name|copy
operator|.
name|score
expr_stmt|;
name|this
operator|.
name|query
operator|=
name|copy
operator|.
name|query
expr_stmt|;
block|}
specifier|public
name|Match
name|createInstance
parameter_list|(
name|int
name|contextId
parameter_list|,
name|NodeId
name|nodeId
parameter_list|,
name|String
name|matchTerm
parameter_list|)
block|{
return|return
literal|null
return|;
block|}
specifier|public
name|Match
name|createInstance
parameter_list|(
name|int
name|contextId
parameter_list|,
name|NodeId
name|nodeId
parameter_list|,
name|Query
name|query
parameter_list|)
block|{
return|return
operator|new
name|LuceneMatch
argument_list|(
name|contextId
argument_list|,
name|nodeId
argument_list|,
name|query
argument_list|)
return|;
block|}
specifier|public
name|Match
name|newCopy
parameter_list|()
block|{
return|return
operator|new
name|LuceneMatch
argument_list|(
name|this
argument_list|)
return|;
block|}
specifier|public
name|String
name|getIndexId
parameter_list|()
block|{
return|return
name|LuceneIndex
operator|.
name|ID
return|;
block|}
specifier|public
name|Query
name|getQuery
parameter_list|()
block|{
return|return
name|query
return|;
block|}
specifier|public
name|float
name|getScore
parameter_list|()
block|{
return|return
name|score
return|;
block|}
specifier|private
name|void
name|setScore
parameter_list|(
name|float
name|score
parameter_list|)
block|{
name|this
operator|.
name|score
operator|=
name|score
expr_stmt|;
block|}
specifier|public
name|boolean
name|equals
parameter_list|(
name|Object
name|other
parameter_list|)
block|{
if|if
condition|(
operator|!
operator|(
name|other
operator|instanceof
name|LuceneMatch
operator|)
condition|)
return|return
literal|false
return|;
return|return
name|query
operator|==
operator|(
operator|(
name|LuceneMatch
operator|)
name|other
operator|)
operator|.
name|query
return|;
block|}
specifier|public
name|boolean
name|matchEquals
parameter_list|(
name|Match
name|other
parameter_list|)
block|{
return|return
name|equals
argument_list|(
name|other
argument_list|)
return|;
block|}
block|}
block|}
end_class

end_unit

