begin_unit|revision:1.0.0;language:Java;cregit-version:0.0.1
begin_package
package|package
name|org
operator|.
name|exist
operator|.
name|indexing
operator|.
name|lucene
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|*
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|log4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|analysis
operator|.
name|Analyzer
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|document
operator|.
name|Document
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|document
operator|.
name|Field
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|document
operator|.
name|FieldSelector
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|document
operator|.
name|FieldSelectorResult
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|index
operator|.
name|*
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|queryParser
operator|.
name|ParseException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|queryParser
operator|.
name|QueryParser
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|search
operator|.
name|*
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|util
operator|.
name|BitVector
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|util
operator|.
name|DocIdBitSet
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|util
operator|.
name|OpenBitSet
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|collections
operator|.
name|Collection
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|dom
operator|.
name|*
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|indexing
operator|.
name|AbstractStreamListener
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|indexing
operator|.
name|IndexController
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|indexing
operator|.
name|IndexWorker
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|indexing
operator|.
name|MatchListener
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|indexing
operator|.
name|OrderedValuesIndex
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|indexing
operator|.
name|QNamedKeysIndex
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|indexing
operator|.
name|StreamListener
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|numbering
operator|.
name|NodeId
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|storage
operator|.
name|DBBroker
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|storage
operator|.
name|IndexSpec
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|storage
operator|.
name|NodePath
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|storage
operator|.
name|txn
operator|.
name|Txn
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|util
operator|.
name|ByteConversion
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|util
operator|.
name|DatabaseConfigurationException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|util
operator|.
name|Occurrences
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|xquery
operator|.
name|Expression
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|xquery
operator|.
name|XQueryContext
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|xquery
operator|.
name|XPathException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|xquery
operator|.
name|value
operator|.
name|IntegerValue
import|;
end_import

begin_import
import|import
name|org
operator|.
name|w3c
operator|.
name|dom
operator|.
name|Node
import|;
end_import

begin_import
import|import
name|org
operator|.
name|w3c
operator|.
name|dom
operator|.
name|NodeList
import|;
end_import

begin_import
import|import
name|org
operator|.
name|w3c
operator|.
name|dom
operator|.
name|Element
import|;
end_import

begin_class
specifier|public
class|class
name|LuceneIndexWorker
implements|implements
name|OrderedValuesIndex
implements|,
name|QNamedKeysIndex
block|{
specifier|public
specifier|static
specifier|final
name|String
name|OPTION_DEFAULT_OPERATOR
init|=
literal|"default-operator"
decl_stmt|;
specifier|public
specifier|static
specifier|final
name|String
name|OPTION_PHRASE_SLOP
init|=
literal|"phrase-slop"
decl_stmt|;
specifier|public
specifier|static
specifier|final
name|String
name|OPTION_LEADING_WILDCARD
init|=
literal|"leading-wildcard"
decl_stmt|;
specifier|public
specifier|static
specifier|final
name|String
name|OPTION_FILTER_REWRITE
init|=
literal|"filter-rewrite"
decl_stmt|;
specifier|public
specifier|static
specifier|final
name|String
name|DEFAULT_OPERATOR_OR
init|=
literal|"or"
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|Logger
name|LOG
init|=
name|Logger
operator|.
name|getLogger
argument_list|(
name|LuceneIndexWorker
operator|.
name|class
argument_list|)
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|FieldSelector
name|NODE_FIELD_SELECTOR
init|=
operator|new
name|NodeFieldSelector
argument_list|()
decl_stmt|;
specifier|private
name|LuceneIndex
name|index
decl_stmt|;
annotation|@
name|SuppressWarnings
argument_list|(
literal|"unused"
argument_list|)
specifier|private
name|IndexController
name|controller
decl_stmt|;
specifier|private
name|LuceneMatchListener
name|matchListener
init|=
literal|null
decl_stmt|;
specifier|private
name|XMLToQuery
name|queryTranslator
decl_stmt|;
specifier|private
name|DBBroker
name|broker
decl_stmt|;
specifier|private
name|DocumentImpl
name|currentDoc
init|=
literal|null
decl_stmt|;
specifier|private
name|int
name|mode
init|=
literal|0
decl_stmt|;
specifier|private
name|LuceneConfig
name|config
decl_stmt|;
specifier|private
name|Stack
argument_list|<
name|TextExtractor
argument_list|>
name|contentStack
init|=
literal|null
decl_stmt|;
specifier|private
name|Set
argument_list|<
name|NodeId
argument_list|>
name|nodesToRemove
init|=
literal|null
decl_stmt|;
specifier|private
name|List
argument_list|<
name|PendingDoc
argument_list|>
name|nodesToWrite
init|=
literal|null
decl_stmt|;
specifier|private
name|int
name|cachedNodesSize
init|=
literal|0
decl_stmt|;
specifier|private
name|int
name|maxCachedNodesSize
init|=
literal|4096
operator|*
literal|1024
decl_stmt|;
specifier|private
name|Analyzer
name|analyzer
decl_stmt|;
specifier|public
name|LuceneIndexWorker
parameter_list|(
name|LuceneIndex
name|parent
parameter_list|,
name|DBBroker
name|broker
parameter_list|)
block|{
name|this
operator|.
name|index
operator|=
name|parent
expr_stmt|;
name|this
operator|.
name|broker
operator|=
name|broker
expr_stmt|;
name|this
operator|.
name|queryTranslator
operator|=
operator|new
name|XMLToQuery
argument_list|(
name|index
argument_list|)
expr_stmt|;
block|}
specifier|public
name|String
name|getIndexId
parameter_list|()
block|{
return|return
name|LuceneIndex
operator|.
name|ID
return|;
block|}
specifier|public
name|String
name|getIndexName
parameter_list|()
block|{
return|return
name|index
operator|.
name|getIndexName
argument_list|()
return|;
block|}
specifier|public
name|Object
name|configure
parameter_list|(
name|IndexController
name|controller
parameter_list|,
name|NodeList
name|configNodes
parameter_list|,
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|namespaces
parameter_list|)
throws|throws
name|DatabaseConfigurationException
block|{
name|this
operator|.
name|controller
operator|=
name|controller
expr_stmt|;
name|LOG
operator|.
name|debug
argument_list|(
literal|"Configuring lucene index"
argument_list|)
expr_stmt|;
name|config
operator|=
operator|new
name|LuceneConfig
argument_list|(
name|configNodes
argument_list|,
name|namespaces
argument_list|)
expr_stmt|;
return|return
name|config
return|;
block|}
specifier|public
name|void
name|flush
parameter_list|()
block|{
switch|switch
condition|(
name|mode
condition|)
block|{
case|case
name|StreamListener
operator|.
name|STORE
case|:
name|write
argument_list|()
expr_stmt|;
break|break;
case|case
name|StreamListener
operator|.
name|REMOVE_ALL_NODES
case|:
name|removeDocument
argument_list|(
name|currentDoc
operator|.
name|getDocId
argument_list|()
argument_list|)
expr_stmt|;
break|break;
case|case
name|StreamListener
operator|.
name|REMOVE_SOME_NODES
case|:
name|removeNodes
argument_list|()
expr_stmt|;
break|break;
block|}
block|}
specifier|public
name|void
name|setDocument
parameter_list|(
name|DocumentImpl
name|document
parameter_list|)
block|{
name|setDocument
argument_list|(
name|document
argument_list|,
name|StreamListener
operator|.
name|UNKNOWN
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|setDocument
parameter_list|(
name|DocumentImpl
name|document
parameter_list|,
name|int
name|newMode
parameter_list|)
block|{
name|currentDoc
operator|=
name|document
expr_stmt|;
comment|//config = null;
name|contentStack
operator|=
literal|null
expr_stmt|;
name|IndexSpec
name|indexConf
init|=
name|document
operator|.
name|getCollection
argument_list|()
operator|.
name|getIndexConfiguration
argument_list|(
name|broker
argument_list|)
decl_stmt|;
if|if
condition|(
name|indexConf
operator|!=
literal|null
condition|)
name|config
operator|=
operator|(
name|LuceneConfig
operator|)
name|indexConf
operator|.
name|getCustomIndexSpec
argument_list|(
name|LuceneIndex
operator|.
name|ID
argument_list|)
expr_stmt|;
name|mode
operator|=
name|newMode
expr_stmt|;
block|}
specifier|public
name|void
name|setMode
parameter_list|(
name|int
name|mode
parameter_list|)
block|{
name|this
operator|.
name|mode
operator|=
name|mode
expr_stmt|;
switch|switch
condition|(
name|mode
condition|)
block|{
case|case
name|StreamListener
operator|.
name|STORE
case|:
if|if
condition|(
name|nodesToWrite
operator|==
literal|null
condition|)
name|nodesToWrite
operator|=
operator|new
name|ArrayList
argument_list|<
name|PendingDoc
argument_list|>
argument_list|()
expr_stmt|;
else|else
name|nodesToWrite
operator|.
name|clear
argument_list|()
expr_stmt|;
name|cachedNodesSize
operator|=
literal|0
expr_stmt|;
break|break;
case|case
name|StreamListener
operator|.
name|REMOVE_SOME_NODES
case|:
name|nodesToRemove
operator|=
operator|new
name|TreeSet
argument_list|<
name|NodeId
argument_list|>
argument_list|()
expr_stmt|;
break|break;
block|}
block|}
specifier|public
name|DocumentImpl
name|getDocument
parameter_list|()
block|{
return|return
name|currentDoc
return|;
block|}
specifier|public
name|int
name|getMode
parameter_list|()
block|{
return|return
name|this
operator|.
name|mode
return|;
block|}
specifier|public
name|StoredNode
name|getReindexRoot
parameter_list|(
name|StoredNode
name|node
parameter_list|,
name|NodePath
name|path
parameter_list|,
name|boolean
name|includeSelf
parameter_list|)
block|{
if|if
condition|(
name|node
operator|.
name|getNodeType
argument_list|()
operator|==
name|Node
operator|.
name|ATTRIBUTE_NODE
condition|)
return|return
literal|null
return|;
if|if
condition|(
name|config
operator|==
literal|null
condition|)
return|return
literal|null
return|;
name|NodePath
name|p
init|=
operator|new
name|NodePath
argument_list|(
name|path
argument_list|)
decl_stmt|;
name|boolean
name|reindexRequired
init|=
literal|false
decl_stmt|;
if|if
condition|(
name|node
operator|.
name|getNodeType
argument_list|()
operator|==
name|Node
operator|.
name|ELEMENT_NODE
operator|&&
operator|!
name|includeSelf
condition|)
name|p
operator|.
name|removeLastComponent
argument_list|()
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|p
operator|.
name|length
argument_list|()
condition|;
name|i
operator|++
control|)
block|{
if|if
condition|(
name|config
operator|.
name|matches
argument_list|(
name|p
argument_list|)
condition|)
block|{
name|reindexRequired
operator|=
literal|true
expr_stmt|;
break|break;
block|}
name|p
operator|.
name|removeLastComponent
argument_list|()
expr_stmt|;
block|}
if|if
condition|(
name|reindexRequired
condition|)
block|{
name|p
operator|=
operator|new
name|NodePath
argument_list|(
name|path
argument_list|)
expr_stmt|;
name|StoredNode
name|topMost
init|=
literal|null
decl_stmt|;
name|StoredNode
name|currentNode
init|=
name|node
decl_stmt|;
if|if
condition|(
name|currentNode
operator|.
name|getNodeType
argument_list|()
operator|!=
name|Node
operator|.
name|ELEMENT_NODE
condition|)
name|currentNode
operator|=
name|currentNode
operator|.
name|getParentStoredNode
argument_list|()
expr_stmt|;
while|while
condition|(
name|currentNode
operator|!=
literal|null
condition|)
block|{
if|if
condition|(
name|config
operator|.
name|matches
argument_list|(
name|p
argument_list|)
condition|)
name|topMost
operator|=
name|currentNode
expr_stmt|;
name|currentNode
operator|=
name|currentNode
operator|.
name|getParentStoredNode
argument_list|()
expr_stmt|;
name|p
operator|.
name|removeLastComponent
argument_list|()
expr_stmt|;
block|}
return|return
name|topMost
return|;
block|}
return|return
literal|null
return|;
block|}
specifier|private
name|StreamListener
name|listener
init|=
operator|new
name|LuceneStreamListener
argument_list|()
decl_stmt|;
specifier|public
name|StreamListener
name|getListener
parameter_list|()
block|{
return|return
name|listener
return|;
block|}
specifier|public
name|MatchListener
name|getMatchListener
parameter_list|(
name|DBBroker
name|broker
parameter_list|,
name|NodeProxy
name|proxy
parameter_list|)
block|{
name|boolean
name|needToFilter
init|=
literal|false
decl_stmt|;
name|Match
name|nextMatch
init|=
name|proxy
operator|.
name|getMatches
argument_list|()
decl_stmt|;
while|while
condition|(
name|nextMatch
operator|!=
literal|null
condition|)
block|{
if|if
condition|(
name|nextMatch
operator|.
name|getIndexId
argument_list|()
operator|==
name|LuceneIndex
operator|.
name|ID
condition|)
block|{
name|needToFilter
operator|=
literal|true
expr_stmt|;
break|break;
block|}
name|nextMatch
operator|=
name|nextMatch
operator|.
name|getNextMatch
argument_list|()
expr_stmt|;
block|}
if|if
condition|(
operator|!
name|needToFilter
condition|)
return|return
literal|null
return|;
if|if
condition|(
name|matchListener
operator|==
literal|null
condition|)
name|matchListener
operator|=
operator|new
name|LuceneMatchListener
argument_list|(
name|index
argument_list|,
name|broker
argument_list|,
name|proxy
argument_list|)
expr_stmt|;
else|else
name|matchListener
operator|.
name|reset
argument_list|(
name|broker
argument_list|,
name|proxy
argument_list|)
expr_stmt|;
return|return
name|matchListener
return|;
block|}
specifier|protected
name|void
name|removeDocument
parameter_list|(
name|int
name|docId
parameter_list|)
block|{
name|IndexReader
name|reader
init|=
literal|null
decl_stmt|;
try|try
block|{
name|reader
operator|=
name|index
operator|.
name|getWritingReader
argument_list|()
expr_stmt|;
name|Term
name|dt
init|=
operator|new
name|Term
argument_list|(
literal|"docId"
argument_list|,
name|Integer
operator|.
name|toString
argument_list|(
name|docId
argument_list|)
argument_list|)
decl_stmt|;
name|reader
operator|.
name|deleteDocuments
argument_list|(
name|dt
argument_list|)
expr_stmt|;
name|reader
operator|.
name|flush
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|warn
argument_list|(
literal|"Error while removing lucene index: "
operator|+
name|e
operator|.
name|getMessage
argument_list|()
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
name|index
operator|.
name|releaseWritingReader
argument_list|(
name|reader
argument_list|)
expr_stmt|;
name|mode
operator|=
name|StreamListener
operator|.
name|STORE
expr_stmt|;
block|}
block|}
specifier|public
name|void
name|removeCollection
parameter_list|(
name|Collection
name|collection
parameter_list|,
name|DBBroker
name|broker
parameter_list|)
block|{
if|if
condition|(
name|LOG
operator|.
name|isDebugEnabled
argument_list|()
condition|)
name|LOG
operator|.
name|debug
argument_list|(
literal|"Removing collection "
operator|+
name|collection
operator|.
name|getURI
argument_list|()
argument_list|)
expr_stmt|;
name|IndexReader
name|reader
init|=
literal|null
decl_stmt|;
try|try
block|{
name|reader
operator|=
name|index
operator|.
name|getWritingReader
argument_list|()
expr_stmt|;
for|for
control|(
name|Iterator
argument_list|<
name|DocumentImpl
argument_list|>
name|i
init|=
name|collection
operator|.
name|iterator
argument_list|(
name|broker
argument_list|)
init|;
name|i
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|DocumentImpl
name|doc
init|=
name|i
operator|.
name|next
argument_list|()
decl_stmt|;
name|Term
name|dt
init|=
operator|new
name|Term
argument_list|(
literal|"docId"
argument_list|,
name|Integer
operator|.
name|toString
argument_list|(
name|doc
operator|.
name|getDocId
argument_list|()
argument_list|)
argument_list|)
decl_stmt|;
name|TermDocs
name|td
init|=
name|reader
operator|.
name|termDocs
argument_list|(
name|dt
argument_list|)
decl_stmt|;
while|while
condition|(
name|td
operator|.
name|next
argument_list|()
condition|)
block|{
name|reader
operator|.
name|deleteDocument
argument_list|(
name|td
operator|.
name|doc
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
name|reader
operator|.
name|flush
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|warn
argument_list|(
literal|"Error while removing lucene index: "
operator|+
name|e
operator|.
name|getMessage
argument_list|()
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
name|index
operator|.
name|releaseWritingReader
argument_list|(
name|reader
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|LOG
operator|.
name|isDebugEnabled
argument_list|()
condition|)
name|LOG
operator|.
name|debug
argument_list|(
literal|"Collection removed."
argument_list|)
expr_stmt|;
block|}
comment|/**      * Remove specific nodes from the index. This method is used for node updates      * and called from flush() if the worker is in {@link StreamListener#REMOVE_SOME_NODES}      * mode.      */
specifier|protected
name|void
name|removeNodes
parameter_list|()
block|{
if|if
condition|(
name|nodesToRemove
operator|==
literal|null
condition|)
return|return;
name|IndexReader
name|reader
init|=
literal|null
decl_stmt|;
try|try
block|{
name|reader
operator|=
name|index
operator|.
name|getWritingReader
argument_list|()
expr_stmt|;
name|Term
name|dt
init|=
operator|new
name|Term
argument_list|(
literal|"docId"
argument_list|,
name|Integer
operator|.
name|toString
argument_list|(
name|currentDoc
operator|.
name|getDocId
argument_list|()
argument_list|)
argument_list|)
decl_stmt|;
name|TermDocs
name|docsEnum
init|=
name|reader
operator|.
name|termDocs
argument_list|(
name|dt
argument_list|)
decl_stmt|;
while|while
condition|(
name|docsEnum
operator|.
name|next
argument_list|()
condition|)
block|{
name|Document
name|doc
init|=
name|reader
operator|.
name|document
argument_list|(
name|docsEnum
operator|.
name|doc
argument_list|()
argument_list|)
decl_stmt|;
name|NodeId
name|nodeId
init|=
name|readNodeId
argument_list|(
name|doc
argument_list|)
decl_stmt|;
if|if
condition|(
name|nodesToRemove
operator|.
name|contains
argument_list|(
name|nodeId
argument_list|)
condition|)
block|{
name|reader
operator|.
name|deleteDocument
argument_list|(
name|docsEnum
operator|.
name|doc
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
name|nodesToRemove
operator|=
literal|null
expr_stmt|;
name|reader
operator|.
name|flush
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|warn
argument_list|(
literal|"Error while deleting lucene index entries: "
operator|+
name|e
operator|.
name|getMessage
argument_list|()
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
name|index
operator|.
name|releaseWritingReader
argument_list|(
name|reader
argument_list|)
expr_stmt|;
block|}
block|}
comment|/**      * Query the index. Returns a node set containing all matching nodes. Each node      * in the node set has a {@link org.exist.indexing.lucene.LuceneIndexWorker.LuceneMatch}      * element attached, which stores the score and a link to the query which generated it.      *      * @param context current XQuery context      * @param contextId current context id, identify to track the position inside nested XPath predicates      * @param docs query will be restricted to documents in this set      * @param contextSet if specified, returned nodes will be descendants of the nodes in this set      * @param qnames query will be restricted to nodes with the qualified names given here      * @param queryStr a lucene query string      * @param axis which node is returned: the node in which a match was found or the corresponding ancestor      *  from the contextSet      * @return node set containing all matching nodes      *       * @throws IOException      * @throws ParseException      */
specifier|public
name|NodeSet
name|query
parameter_list|(
name|XQueryContext
name|context
parameter_list|,
name|int
name|contextId
parameter_list|,
name|DocumentSet
name|docs
parameter_list|,
name|NodeSet
name|contextSet
parameter_list|,
name|List
argument_list|<
name|QName
argument_list|>
name|qnames
parameter_list|,
name|String
name|queryStr
parameter_list|,
name|int
name|axis
parameter_list|,
name|Properties
name|options
parameter_list|)
throws|throws
name|IOException
throws|,
name|ParseException
block|{
if|if
condition|(
name|qnames
operator|==
literal|null
operator|||
name|qnames
operator|.
name|isEmpty
argument_list|()
condition|)
name|qnames
operator|=
name|getDefinedIndexes
argument_list|()
expr_stmt|;
name|NodeSet
name|resultSet
init|=
operator|new
name|NewArrayNodeSet
argument_list|()
decl_stmt|;
name|boolean
name|returnAncestor
init|=
name|axis
operator|==
name|NodeSet
operator|.
name|ANCESTOR
decl_stmt|;
name|IndexSearcher
name|searcher
init|=
literal|null
decl_stmt|;
try|try
block|{
name|searcher
operator|=
name|index
operator|.
name|getSearcher
argument_list|()
expr_stmt|;
for|for
control|(
name|QName
name|qname
range|:
name|qnames
control|)
block|{
name|String
name|field
init|=
name|encodeQName
argument_list|(
name|qname
argument_list|)
decl_stmt|;
name|Analyzer
name|analyzer
init|=
name|getAnalyzer
argument_list|(
name|qname
argument_list|,
name|context
operator|.
name|getBroker
argument_list|()
argument_list|,
name|docs
argument_list|)
decl_stmt|;
name|QueryParser
name|parser
init|=
operator|new
name|QueryParser
argument_list|(
name|field
argument_list|,
name|analyzer
argument_list|)
decl_stmt|;
name|setOptions
argument_list|(
name|options
argument_list|,
name|parser
argument_list|)
expr_stmt|;
name|Query
name|query
init|=
name|parser
operator|.
name|parse
argument_list|(
name|queryStr
argument_list|)
decl_stmt|;
name|LuceneHitCollector
name|collector
init|=
operator|new
name|LuceneHitCollector
argument_list|()
decl_stmt|;
name|searcher
operator|.
name|search
argument_list|(
name|query
argument_list|,
name|collector
argument_list|)
expr_stmt|;
name|processHits
argument_list|(
name|collector
operator|.
name|getDocs
argument_list|()
argument_list|,
name|searcher
argument_list|,
name|contextId
argument_list|,
name|docs
argument_list|,
name|contextSet
argument_list|,
name|resultSet
argument_list|,
name|returnAncestor
argument_list|,
name|query
argument_list|)
expr_stmt|;
block|}
block|}
finally|finally
block|{
name|index
operator|.
name|releaseSearcher
argument_list|(
name|searcher
argument_list|)
expr_stmt|;
block|}
return|return
name|resultSet
return|;
block|}
specifier|private
name|void
name|setOptions
parameter_list|(
name|Properties
name|options
parameter_list|,
name|QueryParser
name|parser
parameter_list|)
throws|throws
name|ParseException
block|{
if|if
condition|(
name|options
operator|==
literal|null
condition|)
return|return;
name|String
name|option
init|=
name|options
operator|.
name|getProperty
argument_list|(
name|OPTION_DEFAULT_OPERATOR
argument_list|)
decl_stmt|;
if|if
condition|(
name|option
operator|!=
literal|null
condition|)
block|{
if|if
condition|(
name|DEFAULT_OPERATOR_OR
operator|.
name|equals
argument_list|(
name|option
argument_list|)
condition|)
name|parser
operator|.
name|setDefaultOperator
argument_list|(
name|QueryParser
operator|.
name|OR_OPERATOR
argument_list|)
expr_stmt|;
else|else
name|parser
operator|.
name|setDefaultOperator
argument_list|(
name|QueryParser
operator|.
name|AND_OPERATOR
argument_list|)
expr_stmt|;
block|}
name|option
operator|=
name|options
operator|.
name|getProperty
argument_list|(
name|OPTION_LEADING_WILDCARD
argument_list|)
expr_stmt|;
if|if
condition|(
name|option
operator|!=
literal|null
condition|)
name|parser
operator|.
name|setAllowLeadingWildcard
argument_list|(
name|option
operator|.
name|equalsIgnoreCase
argument_list|(
literal|"yes"
argument_list|)
argument_list|)
expr_stmt|;
name|option
operator|=
name|options
operator|.
name|getProperty
argument_list|(
name|OPTION_PHRASE_SLOP
argument_list|)
expr_stmt|;
if|if
condition|(
name|option
operator|!=
literal|null
condition|)
block|{
try|try
block|{
name|int
name|slop
init|=
name|Integer
operator|.
name|parseInt
argument_list|(
name|option
argument_list|)
decl_stmt|;
name|parser
operator|.
name|setPhraseSlop
argument_list|(
name|slop
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|NumberFormatException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|ParseException
argument_list|(
literal|"value for option "
operator|+
name|OPTION_PHRASE_SLOP
operator|+
literal|" needs to be a number"
argument_list|)
throw|;
block|}
block|}
name|option
operator|=
name|options
operator|.
name|getProperty
argument_list|(
name|OPTION_FILTER_REWRITE
argument_list|)
expr_stmt|;
if|if
condition|(
name|option
operator|!=
literal|null
condition|)
block|{
if|if
condition|(
name|option
operator|.
name|equalsIgnoreCase
argument_list|(
literal|"yes"
argument_list|)
condition|)
name|parser
operator|.
name|setMultiTermRewriteMethod
argument_list|(
name|MultiTermQuery
operator|.
name|CONSTANT_SCORE_FILTER_REWRITE
argument_list|)
expr_stmt|;
else|else
name|parser
operator|.
name|setMultiTermRewriteMethod
argument_list|(
name|MultiTermQuery
operator|.
name|CONSTANT_SCORE_BOOLEAN_QUERY_REWRITE
argument_list|)
expr_stmt|;
block|}
block|}
comment|/**      * Query the index. Returns a node set containing all matching nodes. Each node      * in the node set has a {@link org.exist.indexing.lucene.LuceneIndexWorker.LuceneMatch}      * element attached, which stores the score and a link to the query which generated it.      *      * @param context current XQuery context      * @param contextId current context id, identify to track the position inside nested XPath predicates      * @param docs query will be restricted to documents in this set      * @param contextSet if specified, returned nodes will be descendants of the nodes in this set      * @param qnames query will be restricted to nodes with the qualified names given here      * @param queryRoot an XML representation of the query, see {@link XMLToQuery}.      * @param axis which node is returned: the node in which a match was found or the corresponding ancestor      *  from the contextSet      * @return node set containing all matching nodes      *      * @throws IOException      * @throws ParseException      */
specifier|public
name|NodeSet
name|query
parameter_list|(
name|XQueryContext
name|context
parameter_list|,
name|int
name|contextId
parameter_list|,
name|DocumentSet
name|docs
parameter_list|,
name|NodeSet
name|contextSet
parameter_list|,
name|List
argument_list|<
name|QName
argument_list|>
name|qnames
parameter_list|,
name|Element
name|queryRoot
parameter_list|,
name|int
name|axis
parameter_list|,
name|Properties
name|options
parameter_list|)
throws|throws
name|IOException
throws|,
name|ParseException
throws|,
name|XPathException
block|{
if|if
condition|(
name|qnames
operator|==
literal|null
operator|||
name|qnames
operator|.
name|isEmpty
argument_list|()
condition|)
name|qnames
operator|=
name|getDefinedIndexes
argument_list|()
expr_stmt|;
name|NodeSet
name|resultSet
init|=
operator|new
name|NewArrayNodeSet
argument_list|()
decl_stmt|;
name|boolean
name|returnAncestor
init|=
name|axis
operator|==
name|NodeSet
operator|.
name|ANCESTOR
decl_stmt|;
name|IndexSearcher
name|searcher
init|=
literal|null
decl_stmt|;
try|try
block|{
name|searcher
operator|=
name|index
operator|.
name|getSearcher
argument_list|()
expr_stmt|;
for|for
control|(
name|QName
name|qname
range|:
name|qnames
control|)
block|{
name|String
name|field
init|=
name|encodeQName
argument_list|(
name|qname
argument_list|)
decl_stmt|;
name|analyzer
operator|=
name|getAnalyzer
argument_list|(
name|qname
argument_list|,
name|context
operator|.
name|getBroker
argument_list|()
argument_list|,
name|docs
argument_list|)
expr_stmt|;
name|Query
name|query
init|=
name|queryTranslator
operator|.
name|parse
argument_list|(
name|field
argument_list|,
name|queryRoot
argument_list|,
name|analyzer
argument_list|,
name|options
argument_list|)
decl_stmt|;
name|LuceneHitCollector
name|collector
init|=
operator|new
name|LuceneHitCollector
argument_list|()
decl_stmt|;
name|searcher
operator|.
name|search
argument_list|(
name|query
argument_list|,
name|collector
argument_list|)
expr_stmt|;
name|processHits
argument_list|(
name|collector
operator|.
name|getDocs
argument_list|()
argument_list|,
name|searcher
argument_list|,
name|contextId
argument_list|,
name|docs
argument_list|,
name|contextSet
argument_list|,
name|resultSet
argument_list|,
name|returnAncestor
argument_list|,
name|query
argument_list|)
expr_stmt|;
block|}
block|}
finally|finally
block|{
name|index
operator|.
name|releaseSearcher
argument_list|(
name|searcher
argument_list|)
expr_stmt|;
block|}
return|return
name|resultSet
return|;
block|}
comment|/**      * Process the query results collected from the Lucene index and      * map them to the corresponding XML nodes in eXist.      */
specifier|private
name|void
name|processHits
parameter_list|(
name|List
argument_list|<
name|ScoreDoc
argument_list|>
name|hits
parameter_list|,
name|IndexSearcher
name|searcher
parameter_list|,
name|int
name|contextId
parameter_list|,
name|DocumentSet
name|docs
parameter_list|,
name|NodeSet
name|contextSet
parameter_list|,
name|NodeSet
name|resultSet
parameter_list|,
name|boolean
name|returnAncestor
parameter_list|,
name|Query
name|query
parameter_list|)
block|{
for|for
control|(
name|ScoreDoc
name|scoreDoc
range|:
name|hits
control|)
block|{
try|try
block|{
name|Document
name|doc
init|=
name|searcher
operator|.
name|doc
argument_list|(
name|scoreDoc
operator|.
name|doc
argument_list|,
name|NODE_FIELD_SELECTOR
argument_list|)
decl_stmt|;
name|String
name|fDocId
init|=
name|doc
operator|.
name|get
argument_list|(
literal|"docId"
argument_list|)
decl_stmt|;
name|int
name|docId
init|=
name|Integer
operator|.
name|parseInt
argument_list|(
name|fDocId
argument_list|)
decl_stmt|;
name|DocumentImpl
name|storedDocument
init|=
name|docs
operator|.
name|getDoc
argument_list|(
name|docId
argument_list|)
decl_stmt|;
if|if
condition|(
name|storedDocument
operator|==
literal|null
condition|)
return|return;
name|NodeId
name|nodeId
init|=
name|readNodeId
argument_list|(
name|doc
argument_list|)
decl_stmt|;
name|NodeProxy
name|storedNode
init|=
operator|new
name|NodeProxy
argument_list|(
name|storedDocument
argument_list|,
name|nodeId
argument_list|)
decl_stmt|;
comment|// if a context set is specified, we can directly check if the
comment|// matching node is a descendant of one of the nodes
comment|// in the context set.
if|if
condition|(
name|contextSet
operator|!=
literal|null
condition|)
block|{
name|int
name|sizeHint
init|=
name|contextSet
operator|.
name|getSizeHint
argument_list|(
name|storedDocument
argument_list|)
decl_stmt|;
if|if
condition|(
name|returnAncestor
condition|)
block|{
name|NodeProxy
name|parentNode
init|=
name|contextSet
operator|.
name|parentWithChild
argument_list|(
name|storedNode
argument_list|,
literal|false
argument_list|,
literal|true
argument_list|,
name|NodeProxy
operator|.
name|UNKNOWN_NODE_LEVEL
argument_list|)
decl_stmt|;
if|if
condition|(
name|parentNode
operator|!=
literal|null
condition|)
block|{
name|LuceneMatch
name|match
init|=
operator|new
name|LuceneMatch
argument_list|(
name|contextId
argument_list|,
name|nodeId
argument_list|,
name|query
argument_list|)
decl_stmt|;
name|match
operator|.
name|setScore
argument_list|(
name|scoreDoc
operator|.
name|score
argument_list|)
expr_stmt|;
name|parentNode
operator|.
name|addMatch
argument_list|(
name|match
argument_list|)
expr_stmt|;
name|resultSet
operator|.
name|add
argument_list|(
name|parentNode
argument_list|,
name|sizeHint
argument_list|)
expr_stmt|;
if|if
condition|(
name|Expression
operator|.
name|NO_CONTEXT_ID
operator|!=
name|contextId
condition|)
block|{
name|parentNode
operator|.
name|deepCopyContext
argument_list|(
name|storedNode
argument_list|,
name|contextId
argument_list|)
expr_stmt|;
block|}
else|else
name|parentNode
operator|.
name|copyContext
argument_list|(
name|storedNode
argument_list|)
expr_stmt|;
block|}
block|}
else|else
block|{
name|LuceneMatch
name|match
init|=
operator|new
name|LuceneMatch
argument_list|(
name|contextId
argument_list|,
name|nodeId
argument_list|,
name|query
argument_list|)
decl_stmt|;
name|match
operator|.
name|setScore
argument_list|(
name|scoreDoc
operator|.
name|score
argument_list|)
expr_stmt|;
name|storedNode
operator|.
name|addMatch
argument_list|(
name|match
argument_list|)
expr_stmt|;
name|resultSet
operator|.
name|add
argument_list|(
name|storedNode
argument_list|,
name|sizeHint
argument_list|)
expr_stmt|;
block|}
block|}
else|else
block|{
name|LuceneMatch
name|match
init|=
operator|new
name|LuceneMatch
argument_list|(
name|contextId
argument_list|,
name|nodeId
argument_list|,
name|query
argument_list|)
decl_stmt|;
name|match
operator|.
name|setScore
argument_list|(
name|scoreDoc
operator|.
name|score
argument_list|)
expr_stmt|;
name|storedNode
operator|.
name|addMatch
argument_list|(
name|match
argument_list|)
expr_stmt|;
name|resultSet
operator|.
name|add
argument_list|(
name|storedNode
argument_list|)
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
name|e
operator|.
name|printStackTrace
argument_list|()
expr_stmt|;
block|}
block|}
block|}
specifier|private
specifier|static
class|class
name|LuceneHitCollector
extends|extends
name|Collector
block|{
specifier|private
name|List
argument_list|<
name|ScoreDoc
argument_list|>
name|docs
init|=
operator|new
name|ArrayList
argument_list|<
name|ScoreDoc
argument_list|>
argument_list|()
decl_stmt|;
specifier|private
name|int
name|docBase
decl_stmt|;
specifier|private
name|Scorer
name|scorer
decl_stmt|;
specifier|private
name|LuceneHitCollector
parameter_list|()
throws|throws
name|IOException
block|{
block|}
specifier|public
name|List
argument_list|<
name|ScoreDoc
argument_list|>
name|getDocs
parameter_list|()
block|{
return|return
name|docs
return|;
block|}
specifier|public
name|void
name|setScorer
parameter_list|(
name|Scorer
name|scorer
parameter_list|)
throws|throws
name|IOException
block|{
name|this
operator|.
name|scorer
operator|=
name|scorer
expr_stmt|;
block|}
specifier|public
name|void
name|setNextReader
parameter_list|(
name|IndexReader
name|indexReader
parameter_list|,
name|int
name|docBase
parameter_list|)
throws|throws
name|IOException
block|{
name|this
operator|.
name|docBase
operator|=
name|docBase
expr_stmt|;
block|}
specifier|public
name|boolean
name|acceptsDocsOutOfOrder
parameter_list|()
block|{
return|return
literal|false
return|;
block|}
specifier|public
name|void
name|collect
parameter_list|(
name|int
name|doc
parameter_list|)
block|{
try|try
block|{
name|float
name|score
init|=
name|scorer
operator|.
name|score
argument_list|()
decl_stmt|;
name|docs
operator|.
name|add
argument_list|(
operator|new
name|ScoreDoc
argument_list|(
name|doc
operator|+
name|docBase
argument_list|,
name|score
argument_list|)
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
name|e
operator|.
name|printStackTrace
argument_list|()
expr_stmt|;
block|}
block|}
block|}
specifier|private
name|NodeId
name|readNodeId
parameter_list|(
name|Document
name|doc
parameter_list|)
block|{
name|byte
index|[]
name|temp
init|=
name|doc
operator|.
name|getBinaryValue
argument_list|(
literal|"nodeId"
argument_list|)
decl_stmt|;
name|int
name|units
init|=
name|ByteConversion
operator|.
name|byteToShort
argument_list|(
name|temp
argument_list|,
literal|0
argument_list|)
decl_stmt|;
return|return
name|index
operator|.
name|getBrokerPool
argument_list|()
operator|.
name|getNodeFactory
argument_list|()
operator|.
name|createFromData
argument_list|(
name|units
argument_list|,
name|temp
argument_list|,
literal|2
argument_list|)
return|;
block|}
comment|/**      * Check index configurations for all collection in the given DocumentSet and return      * a list of QNames, which have indexes defined on them.      *      * @return List of QName objects on which indexes are defined      */
specifier|private
name|List
argument_list|<
name|QName
argument_list|>
name|getDefinedIndexes
parameter_list|()
block|{
name|List
argument_list|<
name|QName
argument_list|>
name|indexes
init|=
operator|new
name|ArrayList
argument_list|<
name|QName
argument_list|>
argument_list|(
literal|20
argument_list|)
decl_stmt|;
name|IndexReader
name|reader
init|=
literal|null
decl_stmt|;
try|try
block|{
name|reader
operator|=
name|index
operator|.
name|getReader
argument_list|()
expr_stmt|;
name|java
operator|.
name|util
operator|.
name|Collection
argument_list|<
name|?
argument_list|>
name|fields
init|=
name|reader
operator|.
name|getFieldNames
argument_list|(
name|IndexReader
operator|.
name|FieldOption
operator|.
name|INDEXED
argument_list|)
decl_stmt|;
for|for
control|(
name|Iterator
argument_list|<
name|?
argument_list|>
name|i
init|=
name|fields
operator|.
name|iterator
argument_list|()
init|;
name|i
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|String
name|field
init|=
operator|(
name|String
operator|)
name|i
operator|.
name|next
argument_list|()
decl_stmt|;
if|if
condition|(
operator|!
literal|"docId"
operator|.
name|equals
argument_list|(
name|field
argument_list|)
condition|)
name|indexes
operator|.
name|add
argument_list|(
name|decodeQName
argument_list|(
name|field
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
name|e
operator|.
name|printStackTrace
argument_list|()
expr_stmt|;
block|}
finally|finally
block|{
name|index
operator|.
name|releaseReader
argument_list|(
name|reader
argument_list|)
expr_stmt|;
block|}
return|return
name|indexes
return|;
block|}
specifier|private
name|Analyzer
name|getAnalyzer
parameter_list|(
name|QName
name|qname
parameter_list|,
name|DBBroker
name|broker
parameter_list|,
name|DocumentSet
name|docs
parameter_list|)
block|{
for|for
control|(
name|Iterator
argument_list|<
name|Collection
argument_list|>
name|i
init|=
name|docs
operator|.
name|getCollectionIterator
argument_list|()
init|;
name|i
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|Collection
name|collection
init|=
name|i
operator|.
name|next
argument_list|()
decl_stmt|;
name|IndexSpec
name|idxConf
init|=
name|collection
operator|.
name|getIndexConfiguration
argument_list|(
name|broker
argument_list|)
decl_stmt|;
if|if
condition|(
name|idxConf
operator|!=
literal|null
condition|)
block|{
name|LuceneConfig
name|config
init|=
operator|(
name|LuceneConfig
operator|)
name|idxConf
operator|.
name|getCustomIndexSpec
argument_list|(
name|LuceneIndex
operator|.
name|ID
argument_list|)
decl_stmt|;
if|if
condition|(
name|config
operator|!=
literal|null
condition|)
block|{
name|Analyzer
name|analyzer
init|=
name|config
operator|.
name|getAnalyzer
argument_list|(
name|qname
argument_list|)
decl_stmt|;
if|if
condition|(
name|analyzer
operator|!=
literal|null
condition|)
return|return
name|analyzer
return|;
block|}
block|}
block|}
return|return
name|index
operator|.
name|getDefaultAnalyzer
argument_list|()
return|;
block|}
specifier|public
name|boolean
name|checkIndex
parameter_list|(
name|DBBroker
name|broker
parameter_list|)
block|{
return|return
literal|false
return|;
comment|//To change body of implemented methods use File | Settings | File Templates.
block|}
specifier|public
name|Occurrences
index|[]
name|scanIndex
parameter_list|(
name|XQueryContext
name|context
parameter_list|,
name|DocumentSet
name|docs
parameter_list|,
name|NodeSet
name|nodes
parameter_list|,
name|Map
name|hints
parameter_list|)
block|{
name|List
argument_list|<
name|QName
argument_list|>
name|qnames
init|=
name|hints
operator|==
literal|null
condition|?
literal|null
else|:
operator|(
name|List
argument_list|<
name|QName
argument_list|>
operator|)
name|hints
operator|.
name|get
argument_list|(
name|QNAMES_KEY
argument_list|)
decl_stmt|;
if|if
condition|(
name|qnames
operator|==
literal|null
operator|||
name|qnames
operator|.
name|isEmpty
argument_list|()
condition|)
name|qnames
operator|=
name|getDefinedIndexes
argument_list|()
expr_stmt|;
comment|//Expects a StringValue
name|String
name|start
init|=
literal|null
decl_stmt|,
name|end
init|=
literal|null
decl_stmt|;
name|long
name|max
init|=
name|Long
operator|.
name|MAX_VALUE
decl_stmt|;
if|if
condition|(
name|hints
operator|!=
literal|null
condition|)
block|{
name|Object
name|vstart
init|=
name|hints
operator|.
name|get
argument_list|(
name|START_VALUE
argument_list|)
decl_stmt|;
name|Object
name|vend
init|=
name|hints
operator|.
name|get
argument_list|(
name|END_VALUE
argument_list|)
decl_stmt|;
name|start
operator|=
name|vstart
operator|==
literal|null
condition|?
literal|null
else|:
name|vstart
operator|.
name|toString
argument_list|()
expr_stmt|;
name|end
operator|=
name|vend
operator|==
literal|null
condition|?
literal|null
else|:
name|vend
operator|.
name|toString
argument_list|()
expr_stmt|;
name|IntegerValue
name|vmax
init|=
operator|(
name|IntegerValue
operator|)
name|hints
operator|.
name|get
argument_list|(
name|VALUE_COUNT
argument_list|)
decl_stmt|;
name|max
operator|=
name|vmax
operator|==
literal|null
condition|?
name|Long
operator|.
name|MAX_VALUE
else|:
name|vmax
operator|.
name|getValue
argument_list|()
expr_stmt|;
block|}
if|if
condition|(
name|nodes
operator|==
literal|null
condition|)
return|return
name|scanIndexByQName
argument_list|(
name|qnames
argument_list|,
name|docs
argument_list|,
name|start
argument_list|,
name|end
argument_list|,
name|max
argument_list|)
return|;
else|else
return|return
name|scanIndexByNodes
argument_list|(
name|qnames
argument_list|,
name|docs
argument_list|,
name|nodes
argument_list|,
name|start
argument_list|,
name|end
argument_list|,
name|max
argument_list|)
return|;
block|}
specifier|private
name|Occurrences
index|[]
name|scanIndexByQName
parameter_list|(
name|List
argument_list|<
name|QName
argument_list|>
name|qnames
parameter_list|,
name|DocumentSet
name|docs
parameter_list|,
name|String
name|start
parameter_list|,
name|String
name|end
parameter_list|,
name|long
name|max
parameter_list|)
block|{
name|TreeMap
argument_list|<
name|String
argument_list|,
name|Occurrences
argument_list|>
name|map
init|=
operator|new
name|TreeMap
argument_list|<
name|String
argument_list|,
name|Occurrences
argument_list|>
argument_list|()
decl_stmt|;
name|IndexReader
name|reader
init|=
literal|null
decl_stmt|;
try|try
block|{
name|reader
operator|=
name|index
operator|.
name|getReader
argument_list|()
expr_stmt|;
for|for
control|(
name|QName
name|qname
range|:
name|qnames
control|)
block|{
name|String
name|field
init|=
name|encodeQName
argument_list|(
name|qname
argument_list|)
decl_stmt|;
name|TermEnum
name|terms
decl_stmt|;
if|if
condition|(
name|start
operator|==
literal|null
condition|)
name|terms
operator|=
name|reader
operator|.
name|terms
argument_list|(
operator|new
name|Term
argument_list|(
name|field
argument_list|,
literal|""
argument_list|)
argument_list|)
expr_stmt|;
else|else
name|terms
operator|=
name|reader
operator|.
name|terms
argument_list|(
operator|new
name|Term
argument_list|(
name|field
argument_list|,
name|start
operator|.
name|toString
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
if|if
condition|(
name|terms
operator|==
literal|null
condition|)
continue|continue;
name|Term
name|term
decl_stmt|;
name|TermDocs
name|termDocs
init|=
name|reader
operator|.
name|termDocs
argument_list|()
decl_stmt|;
do|do
block|{
name|term
operator|=
name|terms
operator|.
name|term
argument_list|()
expr_stmt|;
if|if
condition|(
name|term
operator|!=
literal|null
operator|&&
name|term
operator|.
name|field
argument_list|()
operator|.
name|equals
argument_list|(
name|field
argument_list|)
condition|)
block|{
name|boolean
name|include
init|=
literal|true
decl_stmt|;
if|if
condition|(
name|end
operator|!=
literal|null
condition|)
block|{
if|if
condition|(
name|term
operator|.
name|text
argument_list|()
operator|.
name|compareTo
argument_list|(
name|start
argument_list|)
operator|>
literal|0
condition|)
name|include
operator|=
literal|false
expr_stmt|;
block|}
if|else if
condition|(
name|start
operator|!=
literal|null
operator|&&
operator|!
name|term
operator|.
name|text
argument_list|()
operator|.
name|startsWith
argument_list|(
name|start
argument_list|)
condition|)
name|include
operator|=
literal|false
expr_stmt|;
if|if
condition|(
name|include
condition|)
block|{
name|termDocs
operator|.
name|seek
argument_list|(
name|term
argument_list|)
expr_stmt|;
while|while
condition|(
name|termDocs
operator|.
name|next
argument_list|()
condition|)
block|{
if|if
condition|(
name|reader
operator|.
name|isDeleted
argument_list|(
name|termDocs
operator|.
name|doc
argument_list|()
argument_list|)
condition|)
continue|continue;
name|Document
name|doc
init|=
name|reader
operator|.
name|document
argument_list|(
name|termDocs
operator|.
name|doc
argument_list|()
argument_list|)
decl_stmt|;
name|Field
name|fDocId
init|=
name|doc
operator|.
name|getField
argument_list|(
literal|"docId"
argument_list|)
decl_stmt|;
name|int
name|docId
init|=
name|Integer
operator|.
name|parseInt
argument_list|(
name|fDocId
operator|.
name|stringValue
argument_list|()
argument_list|)
decl_stmt|;
name|DocumentImpl
name|storedDocument
init|=
name|docs
operator|.
name|getDoc
argument_list|(
name|docId
argument_list|)
decl_stmt|;
if|if
condition|(
name|storedDocument
operator|==
literal|null
condition|)
continue|continue;
name|Occurrences
name|oc
init|=
name|map
operator|.
name|get
argument_list|(
name|term
operator|.
name|text
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|oc
operator|==
literal|null
condition|)
block|{
name|oc
operator|=
operator|new
name|Occurrences
argument_list|(
name|term
operator|.
name|text
argument_list|()
argument_list|)
expr_stmt|;
name|map
operator|.
name|put
argument_list|(
name|term
operator|.
name|text
argument_list|()
argument_list|,
name|oc
argument_list|)
expr_stmt|;
block|}
name|oc
operator|.
name|addDocument
argument_list|(
name|storedDocument
argument_list|)
expr_stmt|;
name|oc
operator|.
name|addOccurrences
argument_list|(
name|termDocs
operator|.
name|freq
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|termDocs
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
block|}
if|if
condition|(
name|map
operator|.
name|size
argument_list|()
operator|>=
name|max
condition|)
break|break;
block|}
do|while
condition|(
name|terms
operator|.
name|next
argument_list|()
condition|)
do|;
name|termDocs
operator|.
name|close
argument_list|()
expr_stmt|;
name|terms
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|warn
argument_list|(
literal|"Error while scanning lucene index entries: "
operator|+
name|e
operator|.
name|getMessage
argument_list|()
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
name|index
operator|.
name|releaseReader
argument_list|(
name|reader
argument_list|)
expr_stmt|;
block|}
name|Occurrences
index|[]
name|occur
init|=
operator|new
name|Occurrences
index|[
name|map
operator|.
name|size
argument_list|()
index|]
decl_stmt|;
return|return
name|map
operator|.
name|values
argument_list|()
operator|.
name|toArray
argument_list|(
name|occur
argument_list|)
return|;
block|}
specifier|private
name|Occurrences
index|[]
name|scanIndexByNodes
parameter_list|(
name|List
argument_list|<
name|QName
argument_list|>
name|qnames
parameter_list|,
name|DocumentSet
name|docs
parameter_list|,
name|NodeSet
name|nodes
parameter_list|,
name|String
name|start
parameter_list|,
name|String
name|end
parameter_list|,
name|long
name|max
parameter_list|)
block|{
name|TreeMap
argument_list|<
name|String
argument_list|,
name|Occurrences
argument_list|>
name|map
init|=
operator|new
name|TreeMap
argument_list|<
name|String
argument_list|,
name|Occurrences
argument_list|>
argument_list|()
decl_stmt|;
name|FieldSelector
name|selector
init|=
operator|new
name|FieldSelector
argument_list|()
block|{
specifier|public
name|FieldSelectorResult
name|accept
parameter_list|(
name|String
name|field
parameter_list|)
block|{
if|if
condition|(
name|field
operator|.
name|equals
argument_list|(
literal|"nodeId"
argument_list|)
condition|)
return|return
name|FieldSelectorResult
operator|.
name|LOAD
return|;
else|else
return|return
name|FieldSelectorResult
operator|.
name|NO_LOAD
return|;
block|}
block|}
decl_stmt|;
name|long
name|startTime
init|=
name|System
operator|.
name|currentTimeMillis
argument_list|()
decl_stmt|;
name|IndexSearcher
name|searcher
init|=
literal|null
decl_stmt|;
try|try
block|{
name|searcher
operator|=
name|index
operator|.
name|getSearcher
argument_list|()
expr_stmt|;
name|IndexReader
name|reader
init|=
name|searcher
operator|.
name|getIndexReader
argument_list|()
decl_stmt|;
for|for
control|(
name|Iterator
argument_list|<
name|DocumentImpl
argument_list|>
name|i
init|=
name|docs
operator|.
name|getDocumentIterator
argument_list|()
init|;
name|i
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|DocumentImpl
name|doc
init|=
name|i
operator|.
name|next
argument_list|()
decl_stmt|;
name|Query
name|query
init|=
operator|new
name|TermQuery
argument_list|(
operator|new
name|Term
argument_list|(
literal|"docId"
argument_list|,
name|Integer
operator|.
name|toString
argument_list|(
name|doc
operator|.
name|getDocId
argument_list|()
argument_list|)
argument_list|)
argument_list|)
decl_stmt|;
name|DocumentCollector
name|collector
init|=
operator|new
name|DocumentCollector
argument_list|(
name|searcher
operator|.
name|maxDoc
argument_list|()
argument_list|)
decl_stmt|;
name|searcher
operator|.
name|search
argument_list|(
name|query
argument_list|,
name|collector
argument_list|)
expr_stmt|;
name|DocIdSetIterator
name|iter
init|=
name|collector
operator|.
name|docs
operator|.
name|iterator
argument_list|()
decl_stmt|;
name|int
name|next
decl_stmt|;
while|while
condition|(
operator|(
name|next
operator|=
name|iter
operator|.
name|nextDoc
argument_list|()
operator|)
operator|!=
name|DocIdSetIterator
operator|.
name|NO_MORE_DOCS
condition|)
block|{
name|NodeId
name|nodeId
init|=
literal|null
decl_stmt|;
if|if
condition|(
name|nodes
operator|!=
literal|null
condition|)
block|{
comment|// load document to check if the current node is in the passed context set, if any
name|Document
name|luceneDoc
init|=
name|searcher
operator|.
name|doc
argument_list|(
name|next
argument_list|,
name|selector
argument_list|)
decl_stmt|;
name|nodeId
operator|=
name|readNodeId
argument_list|(
name|luceneDoc
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|nodeId
operator|==
literal|null
operator|||
name|nodes
operator|.
name|get
argument_list|(
name|doc
argument_list|,
name|nodeId
argument_list|)
operator|!=
literal|null
condition|)
block|{
for|for
control|(
name|QName
name|qname
range|:
name|qnames
control|)
block|{
name|String
name|field
init|=
name|encodeQName
argument_list|(
name|qname
argument_list|)
decl_stmt|;
name|TermFreqVector
name|tfv
init|=
name|reader
operator|.
name|getTermFreqVector
argument_list|(
name|next
argument_list|,
name|field
argument_list|)
decl_stmt|;
if|if
condition|(
name|tfv
operator|!=
literal|null
condition|)
block|{
name|String
index|[]
name|terms
init|=
name|tfv
operator|.
name|getTerms
argument_list|()
decl_stmt|;
name|int
index|[]
name|freq
init|=
name|tfv
operator|.
name|getTermFrequencies
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|j
init|=
literal|0
init|;
name|j
operator|<
name|terms
operator|.
name|length
condition|;
name|j
operator|++
control|)
block|{
name|boolean
name|include
init|=
literal|true
decl_stmt|;
if|if
condition|(
name|end
operator|!=
literal|null
condition|)
block|{
if|if
condition|(
name|terms
index|[
name|j
index|]
operator|.
name|compareTo
argument_list|(
name|start
argument_list|)
operator|>
literal|0
condition|)
name|include
operator|=
literal|false
expr_stmt|;
block|}
if|else if
condition|(
name|start
operator|!=
literal|null
operator|&&
operator|!
name|terms
index|[
name|j
index|]
operator|.
name|startsWith
argument_list|(
name|start
argument_list|)
condition|)
name|include
operator|=
literal|false
expr_stmt|;
if|if
condition|(
name|include
condition|)
block|{
name|Occurrences
name|oc
init|=
name|map
operator|.
name|get
argument_list|(
name|terms
index|[
name|j
index|]
argument_list|)
decl_stmt|;
if|if
condition|(
name|oc
operator|==
literal|null
condition|)
block|{
name|oc
operator|=
operator|new
name|Occurrences
argument_list|(
name|terms
index|[
name|j
index|]
argument_list|)
expr_stmt|;
name|map
operator|.
name|put
argument_list|(
name|terms
index|[
name|j
index|]
argument_list|,
name|oc
argument_list|)
expr_stmt|;
if|if
condition|(
name|map
operator|.
name|size
argument_list|()
operator|>=
name|max
condition|)
return|return
name|occurrencesToArray
argument_list|(
name|map
argument_list|)
return|;
block|}
name|oc
operator|.
name|addDocument
argument_list|(
name|doc
argument_list|)
expr_stmt|;
name|oc
operator|.
name|addOccurrences
argument_list|(
name|freq
index|[
name|j
index|]
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
block|}
block|}
block|}
name|LOG
operator|.
name|debug
argument_list|(
literal|"findDocuments took "
operator|+
operator|(
name|System
operator|.
name|currentTimeMillis
argument_list|()
operator|-
name|startTime
operator|)
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|warn
argument_list|(
literal|"Error while scanning lucene index entries: "
operator|+
name|e
operator|.
name|getMessage
argument_list|()
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
name|index
operator|.
name|releaseSearcher
argument_list|(
name|searcher
argument_list|)
expr_stmt|;
block|}
return|return
name|occurrencesToArray
argument_list|(
name|map
argument_list|)
return|;
block|}
specifier|private
name|Occurrences
index|[]
name|occurrencesToArray
parameter_list|(
name|TreeMap
argument_list|<
name|String
argument_list|,
name|Occurrences
argument_list|>
name|map
parameter_list|)
block|{
name|Occurrences
index|[]
name|occur
init|=
operator|new
name|Occurrences
index|[
name|map
operator|.
name|size
argument_list|()
index|]
decl_stmt|;
return|return
name|map
operator|.
name|values
argument_list|()
operator|.
name|toArray
argument_list|(
name|occur
argument_list|)
return|;
block|}
specifier|private
specifier|static
class|class
name|DocumentCollector
extends|extends
name|Collector
block|{
name|OpenBitSet
name|docs
decl_stmt|;
name|int
name|base
init|=
literal|0
decl_stmt|;
specifier|private
name|DocumentCollector
parameter_list|(
name|int
name|size
parameter_list|)
block|{
name|docs
operator|=
operator|new
name|OpenBitSet
argument_list|(
name|size
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|setScorer
parameter_list|(
name|Scorer
name|scorer
parameter_list|)
throws|throws
name|IOException
block|{
block|}
annotation|@
name|Override
specifier|public
name|void
name|collect
parameter_list|(
name|int
name|doc
parameter_list|)
throws|throws
name|IOException
block|{
name|docs
operator|.
name|set
argument_list|(
name|base
operator|+
name|doc
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|setNextReader
parameter_list|(
name|IndexReader
name|indexReader
parameter_list|,
name|int
name|base
parameter_list|)
throws|throws
name|IOException
block|{
name|this
operator|.
name|base
operator|=
name|base
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|acceptsDocsOutOfOrder
parameter_list|()
block|{
return|return
literal|true
return|;
block|}
block|}
comment|/**      * Adds the passed character sequence to the lucene index. We      * create one lucene document per XML node, using 2 fields to identify      * the node:      *      *<ul>      *<li>docId: eXist-internal document id of the node, stored as string.</li>      *<li>nodeId: the id of the node, stored in binary compressed form.</li>      *</ul>      *      * The text is indexed into a field whose name encodes the qualified name of      * the node. The qualified name is stored as a hex sequence pointing into the      * global symbol table.      *      * @param nodeId      * @param qname      * @param content      */
specifier|protected
name|void
name|indexText
parameter_list|(
name|NodeId
name|nodeId
parameter_list|,
name|QName
name|qname
parameter_list|,
name|NodePath
name|path
parameter_list|,
name|CharSequence
name|content
parameter_list|,
name|float
name|boost
parameter_list|)
block|{
if|if
condition|(
name|path
operator|.
name|length
argument_list|()
operator|==
literal|0
condition|)
throw|throw
operator|new
name|RuntimeException
argument_list|()
throw|;
name|PendingDoc
name|pending
init|=
operator|new
name|PendingDoc
argument_list|(
name|nodeId
argument_list|,
name|content
argument_list|,
name|path
argument_list|,
name|qname
argument_list|,
name|boost
argument_list|)
decl_stmt|;
name|nodesToWrite
operator|.
name|add
argument_list|(
name|pending
argument_list|)
expr_stmt|;
name|cachedNodesSize
operator|+=
name|content
operator|.
name|length
argument_list|()
expr_stmt|;
if|if
condition|(
name|cachedNodesSize
operator|>
name|maxCachedNodesSize
condition|)
name|write
argument_list|()
expr_stmt|;
block|}
specifier|private
class|class
name|PendingDoc
block|{
name|NodeId
name|nodeId
decl_stmt|;
name|CharSequence
name|text
decl_stmt|;
name|QName
name|qname
decl_stmt|;
name|Analyzer
name|analyzer
decl_stmt|;
name|float
name|boost
decl_stmt|;
specifier|private
name|PendingDoc
parameter_list|(
name|NodeId
name|nodeId
parameter_list|,
name|CharSequence
name|text
parameter_list|,
name|NodePath
name|path
parameter_list|,
name|QName
name|qname
parameter_list|,
name|float
name|boost
parameter_list|)
block|{
name|this
operator|.
name|nodeId
operator|=
name|nodeId
expr_stmt|;
name|this
operator|.
name|text
operator|=
name|text
expr_stmt|;
name|this
operator|.
name|qname
operator|=
name|qname
expr_stmt|;
name|this
operator|.
name|analyzer
operator|=
name|config
operator|.
name|getAnalyzer
argument_list|(
name|path
argument_list|)
expr_stmt|;
name|this
operator|.
name|boost
operator|=
name|boost
expr_stmt|;
block|}
block|}
specifier|private
name|void
name|write
parameter_list|()
block|{
if|if
condition|(
name|nodesToWrite
operator|==
literal|null
operator|||
name|nodesToWrite
operator|.
name|size
argument_list|()
operator|==
literal|0
condition|)
return|return;
name|IndexWriter
name|writer
init|=
literal|null
decl_stmt|;
try|try
block|{
name|writer
operator|=
name|index
operator|.
name|getWriter
argument_list|()
expr_stmt|;
comment|// by default, Lucene only indexes the first 10,000 terms in a field
name|writer
operator|.
name|setMaxFieldLength
argument_list|(
name|Integer
operator|.
name|MAX_VALUE
argument_list|)
expr_stmt|;
for|for
control|(
name|PendingDoc
name|pending
range|:
name|nodesToWrite
control|)
block|{
name|Document
name|doc
init|=
operator|new
name|Document
argument_list|()
decl_stmt|;
if|if
condition|(
name|pending
operator|.
name|boost
operator|>
literal|0
condition|)
name|doc
operator|.
name|setBoost
argument_list|(
name|pending
operator|.
name|boost
argument_list|)
expr_stmt|;
if|else if
condition|(
name|config
operator|.
name|getBoost
argument_list|()
operator|>
literal|0
condition|)
name|doc
operator|.
name|setBoost
argument_list|(
name|config
operator|.
name|getBoost
argument_list|()
argument_list|)
expr_stmt|;
comment|// store the node id
name|int
name|nodeIdLen
init|=
name|pending
operator|.
name|nodeId
operator|.
name|size
argument_list|()
decl_stmt|;
name|byte
index|[]
name|data
init|=
operator|new
name|byte
index|[
name|nodeIdLen
operator|+
literal|2
index|]
decl_stmt|;
name|ByteConversion
operator|.
name|shortToByte
argument_list|(
operator|(
name|short
operator|)
name|pending
operator|.
name|nodeId
operator|.
name|units
argument_list|()
argument_list|,
name|data
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|pending
operator|.
name|nodeId
operator|.
name|serialize
argument_list|(
name|data
argument_list|,
literal|2
argument_list|)
expr_stmt|;
name|String
name|contentField
init|=
name|encodeQName
argument_list|(
name|pending
operator|.
name|qname
argument_list|)
decl_stmt|;
name|doc
operator|.
name|add
argument_list|(
operator|new
name|Field
argument_list|(
literal|"docId"
argument_list|,
name|Integer
operator|.
name|toString
argument_list|(
name|currentDoc
operator|.
name|getDocId
argument_list|()
argument_list|)
argument_list|,
name|Field
operator|.
name|Store
operator|.
name|YES
argument_list|,
name|Field
operator|.
name|Index
operator|.
name|NOT_ANALYZED
argument_list|)
argument_list|)
expr_stmt|;
name|doc
operator|.
name|add
argument_list|(
operator|new
name|Field
argument_list|(
literal|"nodeId"
argument_list|,
name|data
argument_list|,
name|Field
operator|.
name|Store
operator|.
name|YES
argument_list|)
argument_list|)
expr_stmt|;
name|doc
operator|.
name|add
argument_list|(
operator|new
name|Field
argument_list|(
name|contentField
argument_list|,
name|pending
operator|.
name|text
operator|.
name|toString
argument_list|()
argument_list|,
name|Field
operator|.
name|Store
operator|.
name|NO
argument_list|,
name|Field
operator|.
name|Index
operator|.
name|ANALYZED
argument_list|,
name|Field
operator|.
name|TermVector
operator|.
name|YES
argument_list|)
argument_list|)
expr_stmt|;
if|if
condition|(
name|pending
operator|.
name|analyzer
operator|==
literal|null
condition|)
name|writer
operator|.
name|addDocument
argument_list|(
name|doc
argument_list|)
expr_stmt|;
else|else
name|writer
operator|.
name|addDocument
argument_list|(
name|doc
argument_list|,
name|pending
operator|.
name|analyzer
argument_list|)
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|warn
argument_list|(
literal|"An exception was caught while indexing document: "
operator|+
name|e
operator|.
name|getMessage
argument_list|()
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
name|index
operator|.
name|releaseWriter
argument_list|(
name|writer
argument_list|)
expr_stmt|;
name|nodesToWrite
operator|=
operator|new
name|ArrayList
argument_list|<
name|PendingDoc
argument_list|>
argument_list|()
expr_stmt|;
name|cachedNodesSize
operator|=
literal|0
expr_stmt|;
block|}
block|}
comment|/**      * Optimize the Lucene index by merging all segments into a single one. This      * may take a while and write operations will be blocked during the optimize.      *      * @see http://lucene.apache.org/java/3_0_1/api/all/org/apache/lucene/index/IndexWriter.html#optimize()      */
specifier|public
name|void
name|optimize
parameter_list|()
block|{
name|IndexWriter
name|writer
init|=
literal|null
decl_stmt|;
try|try
block|{
name|writer
operator|=
name|index
operator|.
name|getWriter
argument_list|()
expr_stmt|;
name|writer
operator|.
name|optimize
argument_list|(
literal|true
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|warn
argument_list|(
literal|"An exception was caught while optimizing the lucene index: "
operator|+
name|e
operator|.
name|getMessage
argument_list|()
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
name|index
operator|.
name|releaseWriter
argument_list|(
name|writer
argument_list|)
expr_stmt|;
block|}
block|}
specifier|private
name|String
name|encodeQName
parameter_list|(
name|QName
name|qname
parameter_list|)
block|{
name|SymbolTable
name|symbols
init|=
name|index
operator|.
name|getBrokerPool
argument_list|()
operator|.
name|getSymbols
argument_list|()
decl_stmt|;
name|short
name|namespaceId
init|=
name|symbols
operator|.
name|getNSSymbol
argument_list|(
name|qname
operator|.
name|getNamespaceURI
argument_list|()
argument_list|)
decl_stmt|;
name|short
name|localNameId
init|=
name|symbols
operator|.
name|getSymbol
argument_list|(
name|qname
operator|.
name|getLocalName
argument_list|()
argument_list|)
decl_stmt|;
name|long
name|nameId
init|=
name|qname
operator|.
name|getNameType
argument_list|()
operator||
operator|(
operator|(
operator|(
name|int
operator|)
name|namespaceId
operator|)
operator|&
literal|0xFFFF
operator|)
operator|<<
literal|16
operator||
operator|(
operator|(
operator|(
name|long
operator|)
name|localNameId
operator|)
operator|&
literal|0xFFFFFFFFL
operator|)
operator|<<
literal|32
decl_stmt|;
return|return
name|Long
operator|.
name|toHexString
argument_list|(
name|nameId
argument_list|)
return|;
block|}
specifier|private
name|QName
name|decodeQName
parameter_list|(
name|String
name|s
parameter_list|)
block|{
name|SymbolTable
name|symbols
init|=
name|index
operator|.
name|getBrokerPool
argument_list|()
operator|.
name|getSymbols
argument_list|()
decl_stmt|;
name|long
name|l
init|=
name|Long
operator|.
name|parseLong
argument_list|(
name|s
argument_list|,
literal|16
argument_list|)
decl_stmt|;
name|short
name|namespaceId
init|=
operator|(
name|short
operator|)
operator|(
operator|(
name|l
operator|>>>
literal|16
operator|)
operator|&
literal|0xFFFFL
operator|)
decl_stmt|;
name|short
name|localNameId
init|=
operator|(
name|short
operator|)
operator|(
operator|(
name|l
operator|>>>
literal|32
operator|)
operator|&
literal|0xFFFFL
operator|)
decl_stmt|;
name|byte
name|type
init|=
operator|(
name|byte
operator|)
operator|(
name|l
operator|&
literal|0xFFL
operator|)
decl_stmt|;
name|String
name|namespaceURI
init|=
name|symbols
operator|.
name|getNamespace
argument_list|(
name|namespaceId
argument_list|)
decl_stmt|;
name|String
name|localName
init|=
name|symbols
operator|.
name|getName
argument_list|(
name|localNameId
argument_list|)
decl_stmt|;
name|QName
name|qname
init|=
operator|new
name|QName
argument_list|(
name|localName
argument_list|,
name|namespaceURI
argument_list|,
literal|""
argument_list|)
decl_stmt|;
name|qname
operator|.
name|setNameType
argument_list|(
name|type
argument_list|)
expr_stmt|;
return|return
name|qname
return|;
block|}
specifier|private
class|class
name|LuceneStreamListener
extends|extends
name|AbstractStreamListener
block|{
specifier|public
name|void
name|startElement
parameter_list|(
name|Txn
name|transaction
parameter_list|,
name|ElementImpl
name|element
parameter_list|,
name|NodePath
name|path
parameter_list|)
block|{
if|if
condition|(
name|mode
operator|==
name|STORE
operator|&&
name|config
operator|!=
literal|null
condition|)
block|{
if|if
condition|(
name|contentStack
operator|!=
literal|null
operator|&&
operator|!
name|contentStack
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
for|for
control|(
name|TextExtractor
name|extractor
range|:
name|contentStack
control|)
block|{
name|extractor
operator|.
name|startElement
argument_list|(
name|element
operator|.
name|getQName
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
name|LuceneIndexConfig
name|idxConf
init|=
name|config
operator|.
name|getConfig
argument_list|(
name|path
argument_list|)
decl_stmt|;
if|if
condition|(
name|idxConf
operator|!=
literal|null
condition|)
block|{
if|if
condition|(
name|contentStack
operator|==
literal|null
condition|)
name|contentStack
operator|=
operator|new
name|Stack
argument_list|<
name|TextExtractor
argument_list|>
argument_list|()
expr_stmt|;
name|TextExtractor
name|extractor
init|=
operator|new
name|DefaultTextExtractor
argument_list|()
decl_stmt|;
name|extractor
operator|.
name|configure
argument_list|(
name|config
argument_list|,
name|idxConf
argument_list|)
expr_stmt|;
name|contentStack
operator|.
name|push
argument_list|(
name|extractor
argument_list|)
expr_stmt|;
block|}
block|}
name|super
operator|.
name|startElement
argument_list|(
name|transaction
argument_list|,
name|element
argument_list|,
name|path
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|endElement
parameter_list|(
name|Txn
name|transaction
parameter_list|,
name|ElementImpl
name|element
parameter_list|,
name|NodePath
name|path
parameter_list|)
block|{
if|if
condition|(
name|config
operator|!=
literal|null
condition|)
block|{
if|if
condition|(
name|mode
operator|==
name|STORE
operator|&&
name|contentStack
operator|!=
literal|null
operator|&&
operator|!
name|contentStack
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
for|for
control|(
name|TextExtractor
name|extractor
range|:
name|contentStack
control|)
block|{
name|extractor
operator|.
name|endElement
argument_list|(
name|element
operator|.
name|getQName
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
name|LuceneIndexConfig
name|idxConf
init|=
name|config
operator|.
name|getConfig
argument_list|(
name|path
argument_list|)
decl_stmt|;
if|if
condition|(
name|mode
operator|!=
name|REMOVE_ALL_NODES
operator|&&
name|idxConf
operator|!=
literal|null
condition|)
block|{
if|if
condition|(
name|mode
operator|==
name|REMOVE_SOME_NODES
condition|)
block|{
name|nodesToRemove
operator|.
name|add
argument_list|(
name|element
operator|.
name|getNodeId
argument_list|()
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|TextExtractor
name|extractor
init|=
name|contentStack
operator|.
name|pop
argument_list|()
decl_stmt|;
name|indexText
argument_list|(
name|element
operator|.
name|getNodeId
argument_list|()
argument_list|,
name|element
operator|.
name|getQName
argument_list|()
argument_list|,
name|path
argument_list|,
name|extractor
operator|.
name|getText
argument_list|()
argument_list|,
name|idxConf
operator|.
name|getBoost
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
block|}
name|super
operator|.
name|endElement
argument_list|(
name|transaction
argument_list|,
name|element
argument_list|,
name|path
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|attribute
parameter_list|(
name|Txn
name|transaction
parameter_list|,
name|AttrImpl
name|attrib
parameter_list|,
name|NodePath
name|path
parameter_list|)
block|{
name|path
operator|.
name|addComponent
argument_list|(
name|attrib
operator|.
name|getQName
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|mode
operator|!=
name|REMOVE_ALL_NODES
operator|&&
name|config
operator|!=
literal|null
operator|&&
name|config
operator|.
name|matches
argument_list|(
name|path
argument_list|)
condition|)
block|{
if|if
condition|(
name|mode
operator|==
name|REMOVE_SOME_NODES
condition|)
block|{
name|nodesToRemove
operator|.
name|add
argument_list|(
name|attrib
operator|.
name|getNodeId
argument_list|()
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|indexText
argument_list|(
name|attrib
operator|.
name|getNodeId
argument_list|()
argument_list|,
name|attrib
operator|.
name|getQName
argument_list|()
argument_list|,
name|path
argument_list|,
name|attrib
operator|.
name|getValue
argument_list|()
argument_list|,
name|config
operator|.
name|getBoost
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
name|path
operator|.
name|removeLastComponent
argument_list|()
expr_stmt|;
name|super
operator|.
name|attribute
argument_list|(
name|transaction
argument_list|,
name|attrib
argument_list|,
name|path
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|characters
parameter_list|(
name|Txn
name|transaction
parameter_list|,
name|CharacterDataImpl
name|text
parameter_list|,
name|NodePath
name|path
parameter_list|)
block|{
if|if
condition|(
name|contentStack
operator|!=
literal|null
operator|&&
operator|!
name|contentStack
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
for|for
control|(
name|TextExtractor
name|extractor
range|:
name|contentStack
control|)
block|{
name|extractor
operator|.
name|characters
argument_list|(
name|text
operator|.
name|getXMLString
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
name|super
operator|.
name|characters
argument_list|(
name|transaction
argument_list|,
name|text
argument_list|,
name|path
argument_list|)
expr_stmt|;
block|}
specifier|public
name|IndexWorker
name|getWorker
parameter_list|()
block|{
return|return
name|LuceneIndexWorker
operator|.
name|this
return|;
block|}
block|}
comment|/**      * Match class containing the score of a match and a reference to      * the query that generated it.      */
specifier|public
class|class
name|LuceneMatch
extends|extends
name|Match
block|{
specifier|private
name|float
name|score
init|=
literal|0.0f
decl_stmt|;
specifier|private
name|Query
name|query
decl_stmt|;
specifier|public
name|LuceneMatch
parameter_list|(
name|int
name|contextId
parameter_list|,
name|NodeId
name|nodeId
parameter_list|,
name|Query
name|query
parameter_list|)
block|{
name|super
argument_list|(
name|contextId
argument_list|,
name|nodeId
argument_list|,
literal|null
argument_list|)
expr_stmt|;
name|this
operator|.
name|query
operator|=
name|query
expr_stmt|;
block|}
specifier|public
name|LuceneMatch
parameter_list|(
name|LuceneMatch
name|copy
parameter_list|)
block|{
name|super
argument_list|(
name|copy
argument_list|)
expr_stmt|;
name|this
operator|.
name|score
operator|=
name|copy
operator|.
name|score
expr_stmt|;
name|this
operator|.
name|query
operator|=
name|copy
operator|.
name|query
expr_stmt|;
block|}
specifier|public
name|Match
name|createInstance
parameter_list|(
name|int
name|contextId
parameter_list|,
name|NodeId
name|nodeId
parameter_list|,
name|String
name|matchTerm
parameter_list|)
block|{
return|return
literal|null
return|;
block|}
specifier|public
name|Match
name|createInstance
parameter_list|(
name|int
name|contextId
parameter_list|,
name|NodeId
name|nodeId
parameter_list|,
name|Query
name|query
parameter_list|)
block|{
return|return
operator|new
name|LuceneMatch
argument_list|(
name|contextId
argument_list|,
name|nodeId
argument_list|,
name|query
argument_list|)
return|;
block|}
specifier|public
name|Match
name|newCopy
parameter_list|()
block|{
return|return
operator|new
name|LuceneMatch
argument_list|(
name|this
argument_list|)
return|;
block|}
specifier|public
name|String
name|getIndexId
parameter_list|()
block|{
return|return
name|LuceneIndex
operator|.
name|ID
return|;
block|}
specifier|public
name|Query
name|getQuery
parameter_list|()
block|{
return|return
name|query
return|;
block|}
specifier|public
name|float
name|getScore
parameter_list|()
block|{
return|return
name|score
return|;
block|}
specifier|private
name|void
name|setScore
parameter_list|(
name|float
name|score
parameter_list|)
block|{
name|this
operator|.
name|score
operator|=
name|score
expr_stmt|;
block|}
specifier|public
name|boolean
name|equals
parameter_list|(
name|Object
name|other
parameter_list|)
block|{
if|if
condition|(
operator|!
operator|(
name|other
operator|instanceof
name|LuceneMatch
operator|)
condition|)
return|return
literal|false
return|;
name|LuceneMatch
name|o
init|=
operator|(
name|LuceneMatch
operator|)
name|other
decl_stmt|;
return|return
operator|(
name|nodeId
operator|==
name|o
operator|.
name|nodeId
operator|||
name|nodeId
operator|.
name|equals
argument_list|(
name|o
operator|.
name|nodeId
argument_list|)
operator|)
operator|&&
name|query
operator|==
operator|(
operator|(
name|LuceneMatch
operator|)
name|other
operator|)
operator|.
name|query
return|;
block|}
specifier|public
name|boolean
name|matchEquals
parameter_list|(
name|Match
name|other
parameter_list|)
block|{
return|return
name|equals
argument_list|(
name|other
argument_list|)
return|;
block|}
block|}
specifier|private
specifier|static
class|class
name|NodeFieldSelector
implements|implements
name|FieldSelector
block|{
specifier|private
specifier|static
specifier|final
name|long
name|serialVersionUID
init|=
operator|-
literal|4899170629980829109L
decl_stmt|;
specifier|public
name|FieldSelectorResult
name|accept
parameter_list|(
name|String
name|fieldName
parameter_list|)
block|{
if|if
condition|(
literal|"nodeId"
operator|.
name|equals
argument_list|(
name|fieldName
argument_list|)
operator|||
literal|"docId"
operator|.
name|equals
argument_list|(
name|fieldName
argument_list|)
condition|)
return|return
name|FieldSelectorResult
operator|.
name|LOAD
return|;
return|return
name|FieldSelectorResult
operator|.
name|NO_LOAD
return|;
block|}
block|}
block|}
end_class

end_unit

