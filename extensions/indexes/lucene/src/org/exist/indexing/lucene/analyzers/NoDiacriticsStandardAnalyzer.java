begin_unit|revision:1.0.0;language:Java;cregit-version:0.0.1
begin_package
package|package
name|org
operator|.
name|exist
operator|.
name|indexing
operator|.
name|lucene
operator|.
name|analyzers
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|analysis
operator|.
name|*
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|analysis
operator|.
name|standard
operator|.
name|StandardFilter
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|analysis
operator|.
name|standard
operator|.
name|StandardTokenizer
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|util
operator|.
name|Version
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|Reader
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Set
import|;
end_import

begin_comment
comment|/**  * A copy of StandardAnalyzer using an additional ASCIIFoldingFilter to  * strip diacritics.  */
end_comment

begin_class
specifier|public
class|class
name|NoDiacriticsStandardAnalyzer
extends|extends
name|StopwordAnalyzerBase
block|{
comment|/** Default maximum allowed token length */
specifier|public
specifier|static
specifier|final
name|int
name|DEFAULT_MAX_TOKEN_LENGTH
init|=
literal|255
decl_stmt|;
specifier|private
name|int
name|maxTokenLength
init|=
name|DEFAULT_MAX_TOKEN_LENGTH
decl_stmt|;
comment|/**      * Specifies whether deprecated acronyms should be replaced with HOST type.      * See {@linkplain "https://issues.apache.org/jira/browse/LUCENE-1068"}      */
specifier|private
specifier|final
name|boolean
name|replaceInvalidAcronym
decl_stmt|;
comment|/** An unmodifiable set containing some common English words that are usually not      useful for searching. */
specifier|public
specifier|static
specifier|final
name|Set
argument_list|<
name|?
argument_list|>
name|STOP_WORDS_SET
init|=
name|StopAnalyzer
operator|.
name|ENGLISH_STOP_WORDS_SET
decl_stmt|;
comment|/** Builds an analyzer with the given stop words.      * @param matchVersion Lucene version to match See {@link      *<a href="#version">above</a>}      * @param stopWords stop words */
specifier|public
name|NoDiacriticsStandardAnalyzer
parameter_list|(
name|Version
name|matchVersion
parameter_list|,
name|Set
argument_list|<
name|?
argument_list|>
name|stopWords
parameter_list|)
block|{
name|super
argument_list|(
name|matchVersion
argument_list|,
name|stopWords
argument_list|)
expr_stmt|;
name|replaceInvalidAcronym
operator|=
name|matchVersion
operator|.
name|onOrAfter
argument_list|(
name|Version
operator|.
name|LUCENE_24
argument_list|)
expr_stmt|;
block|}
comment|/** Builds an analyzer with the default stop words ({@link      * #STOP_WORDS_SET}).      * @param matchVersion Lucene version to match See {@link      *<a href="#version">above</a>}      */
specifier|public
name|NoDiacriticsStandardAnalyzer
parameter_list|(
name|Version
name|matchVersion
parameter_list|)
block|{
name|this
argument_list|(
name|matchVersion
argument_list|,
name|STOP_WORDS_SET
argument_list|)
expr_stmt|;
block|}
comment|/** Builds an analyzer with the stop words from the given reader.      * @see WordlistLoader#getWordSet(Reader, Version)      * @param matchVersion Lucene version to match See {@link      *<a href="#version">above</a>}      * @param stopwords Reader to read stop words from */
specifier|public
name|NoDiacriticsStandardAnalyzer
parameter_list|(
name|Version
name|matchVersion
parameter_list|,
name|Reader
name|stopwords
parameter_list|)
throws|throws
name|IOException
block|{
name|this
argument_list|(
name|matchVersion
argument_list|,
name|WordlistLoader
operator|.
name|getWordSet
argument_list|(
name|stopwords
argument_list|,
name|matchVersion
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|/**      * Set maximum allowed token length.  If a token is seen      * that exceeds this length then it is discarded.  This      * setting only takes effect the next time tokenStream or      * reusableTokenStream is called.      */
specifier|public
name|void
name|setMaxTokenLength
parameter_list|(
name|int
name|length
parameter_list|)
block|{
name|maxTokenLength
operator|=
name|length
expr_stmt|;
block|}
comment|/**      * @see #setMaxTokenLength      */
specifier|public
name|int
name|getMaxTokenLength
parameter_list|()
block|{
return|return
name|maxTokenLength
return|;
block|}
annotation|@
name|Override
specifier|protected
name|TokenStreamComponents
name|createComponents
parameter_list|(
specifier|final
name|String
name|fieldName
parameter_list|,
specifier|final
name|Reader
name|reader
parameter_list|)
block|{
specifier|final
name|StandardTokenizer
name|src
init|=
operator|new
name|StandardTokenizer
argument_list|(
name|matchVersion
argument_list|,
name|reader
argument_list|)
decl_stmt|;
name|src
operator|.
name|setMaxTokenLength
argument_list|(
name|maxTokenLength
argument_list|)
expr_stmt|;
name|src
operator|.
name|setReplaceInvalidAcronym
argument_list|(
name|replaceInvalidAcronym
argument_list|)
expr_stmt|;
name|TokenStream
name|tok
init|=
operator|new
name|StandardFilter
argument_list|(
name|matchVersion
argument_list|,
name|src
argument_list|)
decl_stmt|;
name|tok
operator|=
operator|new
name|ASCIIFoldingFilter
argument_list|(
name|tok
argument_list|)
expr_stmt|;
name|tok
operator|=
operator|new
name|LowerCaseFilter
argument_list|(
name|matchVersion
argument_list|,
name|tok
argument_list|)
expr_stmt|;
name|tok
operator|=
operator|new
name|StopFilter
argument_list|(
name|matchVersion
argument_list|,
name|tok
argument_list|,
name|stopwords
argument_list|)
expr_stmt|;
return|return
operator|new
name|TokenStreamComponents
argument_list|(
name|src
argument_list|,
name|tok
argument_list|)
block|{
annotation|@
name|Override
specifier|protected
name|boolean
name|reset
parameter_list|(
specifier|final
name|Reader
name|reader
parameter_list|)
throws|throws
name|IOException
block|{
name|src
operator|.
name|setMaxTokenLength
argument_list|(
name|NoDiacriticsStandardAnalyzer
operator|.
name|this
operator|.
name|maxTokenLength
argument_list|)
expr_stmt|;
return|return
name|super
operator|.
name|reset
argument_list|(
name|reader
argument_list|)
return|;
block|}
block|}
return|;
block|}
block|}
end_class

end_unit

