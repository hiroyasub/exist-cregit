begin_unit|revision:1.0.0;language:Java;cregit-version:0.0.1
begin_package
package|package
name|org
operator|.
name|exist
operator|.
name|indexing
operator|.
name|lucene
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|analysis
operator|.
name|TokenFilter
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|analysis
operator|.
name|TokenStream
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|analysis
operator|.
name|Token
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|LinkedList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_comment
comment|/**  * A caching token filter which can be reset to a position marked  * via method {@link #mark()}.  */
end_comment

begin_class
specifier|public
class|class
name|MarkableTokenFilter
extends|extends
name|TokenFilter
block|{
specifier|private
name|List
argument_list|<
name|Token
argument_list|>
name|cache
init|=
literal|null
decl_stmt|;
specifier|private
name|boolean
name|isCaching
init|=
literal|false
decl_stmt|;
specifier|public
name|MarkableTokenFilter
parameter_list|(
name|TokenStream
name|tokenStream
parameter_list|)
block|{
name|super
argument_list|(
name|tokenStream
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|mark
parameter_list|()
block|{
name|isCaching
operator|=
literal|true
expr_stmt|;
name|cache
operator|=
operator|new
name|LinkedList
argument_list|<
name|Token
argument_list|>
argument_list|()
expr_stmt|;
block|}
specifier|public
name|void
name|reset
parameter_list|()
throws|throws
name|IOException
block|{
name|isCaching
operator|=
literal|false
expr_stmt|;
block|}
specifier|public
name|Token
name|next
parameter_list|()
throws|throws
name|IOException
block|{
return|return
name|next
argument_list|(
operator|new
name|Token
argument_list|()
argument_list|)
return|;
block|}
specifier|public
name|Token
name|next
parameter_list|(
name|Token
name|token
parameter_list|)
throws|throws
name|IOException
block|{
if|if
condition|(
name|isCaching
condition|)
block|{
name|Token
name|nextToken
init|=
name|input
operator|.
name|next
argument_list|(
operator|new
name|Token
argument_list|()
argument_list|)
decl_stmt|;
name|cache
operator|.
name|add
argument_list|(
name|nextToken
argument_list|)
expr_stmt|;
return|return
name|nextToken
return|;
block|}
if|else if
condition|(
name|cache
operator|==
literal|null
condition|)
block|{
return|return
name|input
operator|.
name|next
argument_list|(
name|token
argument_list|)
return|;
block|}
else|else
block|{
name|Token
name|nextToken
init|=
name|cache
operator|.
name|remove
argument_list|(
literal|0
argument_list|)
decl_stmt|;
if|if
condition|(
name|cache
operator|.
name|isEmpty
argument_list|()
condition|)
name|cache
operator|=
literal|null
expr_stmt|;
return|return
name|nextToken
return|;
block|}
block|}
block|}
end_class

end_unit

