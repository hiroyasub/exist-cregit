begin_unit|revision:1.0.0;language:Java;cregit-version:0.0.1
begin_package
package|package
name|org
operator|.
name|exist
operator|.
name|indexing
operator|.
name|lucene
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|analysis
operator|.
name|TokenFilter
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|analysis
operator|.
name|TokenStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|LinkedList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Iterator
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|util
operator|.
name|AttributeSource
import|;
end_import

begin_comment
comment|/**  * A caching token filter which can be reset to a position marked  * via method {@link #mark()}.  */
end_comment

begin_class
specifier|public
class|class
name|MarkableTokenFilter
extends|extends
name|TokenFilter
block|{
specifier|private
name|List
argument_list|<
name|AttributeSource
operator|.
name|State
argument_list|>
name|cache
init|=
literal|null
decl_stmt|;
specifier|private
name|Iterator
argument_list|<
name|AttributeSource
operator|.
name|State
argument_list|>
name|iterator
init|=
literal|null
decl_stmt|;
specifier|private
name|AttributeSource
operator|.
name|State
name|finalState
decl_stmt|;
comment|//private List<Token> cache = null;
specifier|private
name|boolean
name|isCaching
init|=
literal|false
decl_stmt|;
specifier|public
name|MarkableTokenFilter
parameter_list|(
name|TokenStream
name|tokenStream
parameter_list|)
block|{
name|super
argument_list|(
name|tokenStream
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|mark
parameter_list|()
block|{
name|isCaching
operator|=
literal|true
expr_stmt|;
name|cache
operator|=
operator|new
name|LinkedList
argument_list|<>
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|reset
parameter_list|()
throws|throws
name|IOException
block|{
name|isCaching
operator|=
literal|false
expr_stmt|;
if|if
condition|(
name|cache
operator|!=
literal|null
condition|)
block|{
name|iterator
operator|=
name|cache
operator|.
name|iterator
argument_list|()
expr_stmt|;
block|}
block|}
annotation|@
name|Override
specifier|public
specifier|final
name|void
name|end
parameter_list|()
throws|throws
name|IOException
block|{
if|if
condition|(
name|finalState
operator|!=
literal|null
condition|)
block|{
name|restoreState
argument_list|(
name|finalState
argument_list|)
expr_stmt|;
block|}
block|}
comment|/*     @Override     public Token next(Token token) throws IOException {         if (isCaching) {             Token nextToken = input.next(new Token());             cache.add(nextToken);             return nextToken;         } else if (cache == null) {             return input.next(token);         } else {             Token nextToken = cache.remove(0);             if (cache.isEmpty())                 cache = null;             return nextToken;         }     }*/
annotation|@
name|Override
specifier|public
specifier|final
name|boolean
name|incrementToken
parameter_list|()
throws|throws
name|IOException
block|{
if|if
condition|(
name|isCaching
condition|)
block|{
if|if
condition|(
operator|!
name|input
operator|.
name|incrementToken
argument_list|()
condition|)
block|{
name|input
operator|.
name|end
argument_list|()
expr_stmt|;
name|finalState
operator|=
name|captureState
argument_list|()
expr_stmt|;
return|return
literal|false
return|;
block|}
else|else
block|{
name|cache
operator|.
name|add
argument_list|(
name|captureState
argument_list|()
argument_list|)
expr_stmt|;
return|return
literal|true
return|;
block|}
block|}
if|else if
condition|(
name|cache
operator|==
literal|null
condition|)
block|{
if|if
condition|(
operator|!
name|input
operator|.
name|incrementToken
argument_list|()
condition|)
block|{
name|input
operator|.
name|end
argument_list|()
expr_stmt|;
name|finalState
operator|=
name|captureState
argument_list|()
expr_stmt|;
return|return
literal|false
return|;
block|}
else|else
block|{
return|return
literal|true
return|;
block|}
block|}
else|else
block|{
if|if
condition|(
operator|!
name|iterator
operator|.
name|hasNext
argument_list|()
condition|)
block|{
comment|// the cache is exhausted, return false
name|cache
operator|=
literal|null
expr_stmt|;
return|return
literal|false
return|;
block|}
comment|// Since the TokenFilter can be reset, the tokens need to be preserved as immutable.
name|restoreState
argument_list|(
name|iterator
operator|.
name|next
argument_list|()
argument_list|)
expr_stmt|;
return|return
literal|true
return|;
block|}
block|}
block|}
end_class

end_unit

