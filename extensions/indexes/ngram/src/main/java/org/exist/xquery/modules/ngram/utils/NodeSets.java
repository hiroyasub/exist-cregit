begin_unit|revision:1.0.0;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  *  eXist Open Source Native XML Database  *  Copyright (C) 2001-2015 The eXist Project  *  http://exist-db.org  *  *  This program is free software; you can redistribute it and/or  *  modify it under the terms of the GNU Lesser General Public License  *  as published by the Free Software Foundation; either version 2  *  of the License, or (at your option) any later version.  *  *  This program is distributed in the hope that it will be useful,  *  but WITHOUT ANY WARRANTY; without even the implied warranty of  *  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the  *  GNU Lesser General Public License for more details.  *  *  You should have received a copy of the GNU Lesser General Public  *  License along with this library; if not, write to the Free Software  *  Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA  02110-1301  USA  */
end_comment

begin_package
package|package
name|org
operator|.
name|exist
operator|.
name|xquery
operator|.
name|modules
operator|.
name|ngram
operator|.
name|utils
package|;
end_package

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|dom
operator|.
name|persistent
operator|.
name|ExtArrayNodeSet
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|dom
operator|.
name|persistent
operator|.
name|NodeProxy
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|dom
operator|.
name|persistent
operator|.
name|NodeSet
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|dom
operator|.
name|persistent
operator|.
name|NodeSetIterator
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|xquery
operator|.
name|XPathException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|function
operator|.
name|Function
import|;
end_import

begin_class
specifier|public
specifier|final
class|class
name|NodeSets
block|{
specifier|private
name|NodeSets
parameter_list|()
block|{
block|}
comment|/**      * Builds a new NodeSet by applying a function to all NodeProxys of the supplied NodeSet and returning all non-null      * results.      *       * @param nodes      *            the NodeSet containig the NodeProys to be transformed      * @param transform      *            the function to be applied to all NodeProxys in nodes      * @return a new NodeSet containing the non-null results of f applied to the NodeProxys in nodes      *      * @throws XPathException if an error occurs with the query.      */
specifier|public
specifier|static
name|NodeSet
name|transformNodes
parameter_list|(
specifier|final
name|NodeSet
name|nodes
parameter_list|,
specifier|final
name|Function
argument_list|<
name|NodeProxy
argument_list|,
name|NodeProxy
argument_list|>
name|transform
parameter_list|)
throws|throws
name|XPathException
block|{
specifier|final
name|NodeSet
name|result
init|=
operator|new
name|ExtArrayNodeSet
argument_list|()
decl_stmt|;
for|for
control|(
specifier|final
name|NodeSetIterator
name|iterator
init|=
name|nodes
operator|.
name|iterator
argument_list|()
init|;
name|iterator
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
specifier|final
name|NodeProxy
name|node
init|=
name|transform
operator|.
name|apply
argument_list|(
name|iterator
operator|.
name|next
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|node
operator|!=
literal|null
condition|)
block|{
name|result
operator|.
name|add
argument_list|(
name|node
argument_list|)
expr_stmt|;
block|}
block|}
name|result
operator|.
name|iterate
argument_list|()
expr_stmt|;
comment|// ensure result is ready to use
return|return
name|result
return|;
block|}
specifier|public
specifier|static
name|NodeSet
name|getNodesMatchingAtStart
parameter_list|(
specifier|final
name|NodeSet
name|nodes
parameter_list|,
specifier|final
name|int
name|expressionId
parameter_list|)
throws|throws
name|XPathException
block|{
return|return
name|transformNodes
argument_list|(
name|nodes
argument_list|,
name|proxy
lambda|->
name|NodeProxies
operator|.
name|transformOwnMatches
argument_list|(
name|proxy
argument_list|,
name|match
lambda|->
name|match
operator|.
name|filterOffsetsStartingAt
argument_list|(
literal|0
argument_list|)
argument_list|,
name|expressionId
argument_list|)
argument_list|)
return|;
block|}
specifier|public
specifier|static
name|NodeSet
name|getNodesMatchingAtEnd
parameter_list|(
specifier|final
name|NodeSet
name|nodes
parameter_list|,
specifier|final
name|int
name|expressionId
parameter_list|)
throws|throws
name|XPathException
block|{
return|return
name|transformNodes
argument_list|(
name|nodes
argument_list|,
name|proxy
lambda|->
name|NodeProxies
operator|.
name|transformOwnMatches
argument_list|(
name|proxy
argument_list|,
name|match
lambda|->
name|match
operator|.
name|filterOffsetsEndingAt
argument_list|(
name|proxy
operator|.
name|getNodeValue
argument_list|()
operator|.
name|length
argument_list|()
argument_list|)
argument_list|,
name|expressionId
argument_list|)
argument_list|)
return|;
block|}
block|}
end_class

end_unit

