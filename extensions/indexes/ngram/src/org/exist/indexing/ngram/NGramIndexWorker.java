begin_unit|revision:1.0.0;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  *  eXist Open Source Native XML Database  *  Copyright (C) 2001-2015 The eXist Project  *  http://exist-db.org  *  *  This program is free software; you can redistribute it and/or  *  modify it under the terms of the GNU Lesser General Public License  *  as published by the Free Software Foundation; either version 2  *  of the License, or (at your option) any later version.  *  *  This program is distributed in the hope that it will be useful,  *  but WITHOUT ANY WARRANTY; without even the implied warranty of  *  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the  *  GNU Lesser General Public License for more details.  *  *  You should have received a copy of the GNU Lesser General Public  *  License along with this library; if not, write to the Free Software  *  Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA  02110-1301  USA  */
end_comment

begin_package
package|package
name|org
operator|.
name|exist
operator|.
name|indexing
operator|.
name|ngram
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Arrays
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Iterator
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Stack
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|TreeMap
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|xml
operator|.
name|stream
operator|.
name|XMLStreamConstants
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|xml
operator|.
name|stream
operator|.
name|XMLStreamException
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|xml
operator|.
name|stream
operator|.
name|XMLStreamReader
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|logging
operator|.
name|log4j
operator|.
name|LogManager
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|logging
operator|.
name|log4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|collections
operator|.
name|Collection
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|dom
operator|.
name|persistent
operator|.
name|AttrImpl
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|dom
operator|.
name|persistent
operator|.
name|AbstractCharacterData
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|dom
operator|.
name|persistent
operator|.
name|DocumentImpl
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|dom
operator|.
name|persistent
operator|.
name|DocumentSet
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|dom
operator|.
name|persistent
operator|.
name|ElementImpl
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|dom
operator|.
name|persistent
operator|.
name|ExtArrayNodeSet
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|dom
operator|.
name|persistent
operator|.
name|IStoredNode
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|dom
operator|.
name|persistent
operator|.
name|Match
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|dom
operator|.
name|persistent
operator|.
name|NodeProxy
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|dom
operator|.
name|persistent
operator|.
name|NodeSet
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|dom
operator|.
name|QName
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|dom
operator|.
name|persistent
operator|.
name|SymbolTable
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|indexing
operator|.
name|AbstractMatchListener
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|indexing
operator|.
name|AbstractStreamListener
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|indexing
operator|.
name|Index
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|indexing
operator|.
name|IndexController
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|indexing
operator|.
name|IndexWorker
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|indexing
operator|.
name|MatchListener
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|indexing
operator|.
name|OrderedValuesIndex
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|indexing
operator|.
name|QNamedKeysIndex
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|indexing
operator|.
name|StreamListener
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|numbering
operator|.
name|NodeId
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|stax
operator|.
name|ExtendedXMLStreamReader
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|storage
operator|.
name|DBBroker
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|storage
operator|.
name|ElementValue
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|storage
operator|.
name|IndexSpec
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|storage
operator|.
name|NodePath
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|storage
operator|.
name|OccurrenceList
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|storage
operator|.
name|btree
operator|.
name|BTreeCallback
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|storage
operator|.
name|btree
operator|.
name|BTreeException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|storage
operator|.
name|btree
operator|.
name|IndexQuery
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|storage
operator|.
name|btree
operator|.
name|Value
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|storage
operator|.
name|index
operator|.
name|BFile
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|storage
operator|.
name|io
operator|.
name|VariableByteInput
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|storage
operator|.
name|io
operator|.
name|VariableByteOutputStream
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|storage
operator|.
name|lock
operator|.
name|Lock
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|storage
operator|.
name|txn
operator|.
name|Txn
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|util
operator|.
name|*
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|util
operator|.
name|serializer
operator|.
name|AttrList
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|xquery
operator|.
name|*
import|;
end_import

begin_import
import|import
name|org
operator|.
name|w3c
operator|.
name|dom
operator|.
name|Element
import|;
end_import

begin_import
import|import
name|org
operator|.
name|w3c
operator|.
name|dom
operator|.
name|Node
import|;
end_import

begin_import
import|import
name|org
operator|.
name|w3c
operator|.
name|dom
operator|.
name|NodeList
import|;
end_import

begin_import
import|import
name|org
operator|.
name|xml
operator|.
name|sax
operator|.
name|SAXException
import|;
end_import

begin_import
import|import static
name|java
operator|.
name|nio
operator|.
name|charset
operator|.
name|StandardCharsets
operator|.
name|UTF_8
import|;
end_import

begin_comment
comment|/**  *  * Each index entry maps a key (collectionId, ngram) to a list of occurrences, which has the  * following structure:  *  *<pre>[docId : int, nameType: byte, occurrenceCount: int, entrySize: long, [id: NodeId, offset: int, ...]* ]</pre>  */
end_comment

begin_class
specifier|public
class|class
name|NGramIndexWorker
implements|implements
name|OrderedValuesIndex
implements|,
name|QNamedKeysIndex
block|{
specifier|private
specifier|static
specifier|final
name|Logger
name|LOG
init|=
name|LogManager
operator|.
name|getLogger
argument_list|(
name|NGramIndexWorker
operator|.
name|class
argument_list|)
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|String
name|INDEX_ELEMENT
init|=
literal|"ngram"
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|String
name|QNAME_ATTR
init|=
literal|"qname"
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|byte
name|IDX_QNAME
init|=
literal|0
decl_stmt|;
annotation|@
name|SuppressWarnings
argument_list|(
literal|"unused"
argument_list|)
specifier|private
specifier|static
specifier|final
name|byte
name|IDX_GENERIC
init|=
literal|1
decl_stmt|;
specifier|private
name|int
name|mode
init|=
literal|0
decl_stmt|;
specifier|private
specifier|final
name|org
operator|.
name|exist
operator|.
name|indexing
operator|.
name|ngram
operator|.
name|NGramIndex
name|index
decl_stmt|;
specifier|private
name|char
index|[]
name|buf
init|=
operator|new
name|char
index|[
literal|1024
index|]
decl_stmt|;
specifier|private
name|int
name|currentChar
init|=
literal|0
decl_stmt|;
specifier|private
name|DocumentImpl
name|currentDoc
init|=
literal|null
decl_stmt|;
specifier|private
specifier|final
name|DBBroker
name|broker
decl_stmt|;
annotation|@
name|SuppressWarnings
argument_list|(
literal|"unused"
argument_list|)
specifier|private
name|IndexController
name|controller
decl_stmt|;
specifier|private
specifier|final
name|Map
argument_list|<
name|QNameTerm
argument_list|,
name|OccurrenceList
argument_list|>
name|ngrams
init|=
operator|new
name|TreeMap
argument_list|<
name|QNameTerm
argument_list|,
name|OccurrenceList
argument_list|>
argument_list|()
decl_stmt|;
specifier|private
specifier|final
name|VariableByteOutputStream
name|os
init|=
operator|new
name|VariableByteOutputStream
argument_list|(
literal|7
argument_list|)
decl_stmt|;
specifier|private
name|NGramMatchListener
name|matchListener
init|=
literal|null
decl_stmt|;
specifier|public
name|NGramIndexWorker
parameter_list|(
name|DBBroker
name|broker
parameter_list|,
name|org
operator|.
name|exist
operator|.
name|indexing
operator|.
name|ngram
operator|.
name|NGramIndex
name|index
parameter_list|)
block|{
name|this
operator|.
name|broker
operator|=
name|broker
expr_stmt|;
name|this
operator|.
name|index
operator|=
name|index
expr_stmt|;
name|Arrays
operator|.
name|fill
argument_list|(
name|buf
argument_list|,
literal|' '
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|String
name|getIndexId
parameter_list|()
block|{
return|return
name|org
operator|.
name|exist
operator|.
name|indexing
operator|.
name|ngram
operator|.
name|NGramIndex
operator|.
name|ID
return|;
block|}
annotation|@
name|Override
specifier|public
name|String
name|getIndexName
parameter_list|()
block|{
return|return
name|index
operator|.
name|getIndexName
argument_list|()
return|;
block|}
specifier|public
name|Index
name|getIndex
parameter_list|()
block|{
return|return
name|index
return|;
block|}
specifier|public
name|int
name|getN
parameter_list|()
block|{
return|return
name|index
operator|.
name|getN
argument_list|()
return|;
block|}
annotation|@
name|Override
specifier|public
name|Object
name|configure
parameter_list|(
name|IndexController
name|controller
parameter_list|,
name|NodeList
name|configNodes
parameter_list|,
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|namespaces
parameter_list|)
throws|throws
name|DatabaseConfigurationException
block|{
name|this
operator|.
name|controller
operator|=
name|controller
expr_stmt|;
comment|// We use a map to store the QNames to be indexed
name|Map
argument_list|<
name|QName
argument_list|,
name|NGramIndexConfig
argument_list|>
name|map
init|=
operator|new
name|TreeMap
argument_list|<
name|QName
argument_list|,
name|NGramIndexConfig
argument_list|>
argument_list|()
decl_stmt|;
name|Node
name|node
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|configNodes
operator|.
name|getLength
argument_list|()
condition|;
name|i
operator|++
control|)
block|{
name|node
operator|=
name|configNodes
operator|.
name|item
argument_list|(
name|i
argument_list|)
expr_stmt|;
if|if
condition|(
name|node
operator|.
name|getNodeType
argument_list|()
operator|==
name|Node
operator|.
name|ELEMENT_NODE
operator|&&
name|INDEX_ELEMENT
operator|.
name|equals
argument_list|(
name|node
operator|.
name|getLocalName
argument_list|()
argument_list|)
condition|)
block|{
name|String
name|qname
init|=
operator|(
operator|(
name|Element
operator|)
name|node
operator|)
operator|.
name|getAttribute
argument_list|(
name|QNAME_ATTR
argument_list|)
decl_stmt|;
if|if
condition|(
name|qname
operator|==
literal|null
operator|||
name|qname
operator|.
name|length
argument_list|()
operator|==
literal|0
condition|)
throw|throw
operator|new
name|DatabaseConfigurationException
argument_list|(
literal|"Configuration error: element "
operator|+
name|node
operator|.
name|getNodeName
argument_list|()
operator|+
literal|" must have an attribute "
operator|+
name|QNAME_ATTR
argument_list|)
throw|;
if|if
condition|(
name|LOG
operator|.
name|isTraceEnabled
argument_list|()
condition|)
name|LOG
operator|.
name|trace
argument_list|(
literal|"NGram index defined on "
operator|+
name|qname
argument_list|)
expr_stmt|;
name|NGramIndexConfig
name|config
init|=
operator|new
name|NGramIndexConfig
argument_list|(
name|namespaces
argument_list|,
name|qname
argument_list|)
decl_stmt|;
name|map
operator|.
name|put
argument_list|(
name|config
operator|.
name|getQName
argument_list|()
argument_list|,
name|config
argument_list|)
expr_stmt|;
block|}
block|}
return|return
name|map
return|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|flush
parameter_list|()
block|{
switch|switch
condition|(
name|mode
condition|)
block|{
case|case
name|StreamListener
operator|.
name|STORE
case|:
name|saveIndex
argument_list|()
expr_stmt|;
break|break;
case|case
name|StreamListener
operator|.
name|REMOVE_ALL_NODES
case|:
case|case
name|StreamListener
operator|.
name|REMOVE_SOME_NODES
case|:
name|dropIndex
argument_list|(
name|mode
argument_list|)
expr_stmt|;
break|break;
block|}
block|}
specifier|private
name|void
name|saveIndex
parameter_list|()
block|{
if|if
condition|(
name|ngrams
operator|.
name|size
argument_list|()
operator|==
literal|0
condition|)
return|return;
for|for
control|(
name|Map
operator|.
name|Entry
argument_list|<
name|QNameTerm
argument_list|,
name|OccurrenceList
argument_list|>
name|entry
range|:
name|ngrams
operator|.
name|entrySet
argument_list|()
control|)
block|{
name|QNameTerm
name|key
init|=
name|entry
operator|.
name|getKey
argument_list|()
decl_stmt|;
name|OccurrenceList
name|occurences
init|=
name|entry
operator|.
name|getValue
argument_list|()
decl_stmt|;
name|occurences
operator|.
name|sort
argument_list|()
expr_stmt|;
name|os
operator|.
name|clear
argument_list|()
expr_stmt|;
name|os
operator|.
name|writeInt
argument_list|(
name|currentDoc
operator|.
name|getDocId
argument_list|()
argument_list|)
expr_stmt|;
name|os
operator|.
name|writeByte
argument_list|(
name|key
operator|.
name|qname
operator|.
name|getNameType
argument_list|()
argument_list|)
expr_stmt|;
name|os
operator|.
name|writeInt
argument_list|(
name|occurences
operator|.
name|getTermCount
argument_list|()
argument_list|)
expr_stmt|;
comment|//Mark position
name|int
name|lenOffset
init|=
name|os
operator|.
name|position
argument_list|()
decl_stmt|;
comment|//Dummy value : actual one will be written below
name|os
operator|.
name|writeFixedInt
argument_list|(
literal|0
argument_list|)
expr_stmt|;
name|NodeId
name|previous
init|=
literal|null
decl_stmt|;
for|for
control|(
name|int
name|m
init|=
literal|0
init|;
name|m
operator|<
name|occurences
operator|.
name|getSize
argument_list|()
condition|;
control|)
block|{
try|try
block|{
name|previous
operator|=
name|occurences
operator|.
name|getNode
argument_list|(
name|m
argument_list|)
operator|.
name|write
argument_list|(
name|previous
argument_list|,
name|os
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|error
argument_list|(
literal|"IOException while writing nGram index: "
operator|+
name|e
operator|.
name|getMessage
argument_list|()
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
name|int
name|freq
init|=
name|occurences
operator|.
name|getOccurrences
argument_list|(
name|m
argument_list|)
decl_stmt|;
name|os
operator|.
name|writeInt
argument_list|(
name|freq
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|n
init|=
literal|0
init|;
name|n
operator|<
name|freq
condition|;
name|n
operator|++
control|)
block|{
name|os
operator|.
name|writeInt
argument_list|(
name|occurences
operator|.
name|getOffset
argument_list|(
name|m
operator|+
name|n
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|m
operator|+=
name|freq
expr_stmt|;
block|}
comment|//Write (variable) length of node IDs + frequency + offsets
name|os
operator|.
name|writeFixedInt
argument_list|(
name|lenOffset
argument_list|,
name|os
operator|.
name|position
argument_list|()
operator|-
name|lenOffset
operator|-
literal|4
argument_list|)
expr_stmt|;
name|ByteArray
name|data
init|=
name|os
operator|.
name|data
argument_list|()
decl_stmt|;
if|if
condition|(
name|data
operator|.
name|size
argument_list|()
operator|==
literal|0
condition|)
continue|continue;
name|Lock
name|lock
init|=
name|index
operator|.
name|db
operator|.
name|getLock
argument_list|()
decl_stmt|;
try|try
block|{
name|lock
operator|.
name|acquire
argument_list|(
name|Lock
operator|.
name|WRITE_LOCK
argument_list|)
expr_stmt|;
name|NGramQNameKey
name|value
init|=
operator|new
name|NGramQNameKey
argument_list|(
name|currentDoc
operator|.
name|getCollection
argument_list|()
operator|.
name|getId
argument_list|()
argument_list|,
name|key
operator|.
name|qname
argument_list|,
name|index
operator|.
name|getBrokerPool
argument_list|()
operator|.
name|getSymbols
argument_list|()
argument_list|,
name|key
operator|.
name|term
argument_list|)
decl_stmt|;
name|index
operator|.
name|db
operator|.
name|append
argument_list|(
name|value
argument_list|,
name|data
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|LockException
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|warn
argument_list|(
literal|"Failed to acquire lock for file "
operator|+
name|index
operator|.
name|db
operator|.
name|getFile
argument_list|()
operator|.
name|getName
argument_list|()
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|warn
argument_list|(
literal|"IO error for file "
operator|+
name|index
operator|.
name|db
operator|.
name|getFile
argument_list|()
operator|.
name|getName
argument_list|()
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|ReadOnlyException
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|warn
argument_list|(
literal|"Read-only error for file "
operator|+
name|index
operator|.
name|db
operator|.
name|getFile
argument_list|()
operator|.
name|getName
argument_list|()
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
name|lock
operator|.
name|release
argument_list|(
name|Lock
operator|.
name|WRITE_LOCK
argument_list|)
expr_stmt|;
name|os
operator|.
name|clear
argument_list|()
expr_stmt|;
block|}
block|}
name|ngrams
operator|.
name|clear
argument_list|()
expr_stmt|;
block|}
specifier|private
name|void
name|dropIndex
parameter_list|(
name|int
name|mode
parameter_list|)
block|{
if|if
condition|(
name|ngrams
operator|.
name|size
argument_list|()
operator|==
literal|0
condition|)
return|return;
for|for
control|(
name|Map
operator|.
name|Entry
argument_list|<
name|QNameTerm
argument_list|,
name|OccurrenceList
argument_list|>
name|entry
range|:
name|ngrams
operator|.
name|entrySet
argument_list|()
control|)
block|{
name|QNameTerm
name|key
init|=
name|entry
operator|.
name|getKey
argument_list|()
decl_stmt|;
name|OccurrenceList
name|occurencesList
init|=
name|entry
operator|.
name|getValue
argument_list|()
decl_stmt|;
name|occurencesList
operator|.
name|sort
argument_list|()
expr_stmt|;
name|os
operator|.
name|clear
argument_list|()
expr_stmt|;
name|Lock
name|lock
init|=
name|index
operator|.
name|db
operator|.
name|getLock
argument_list|()
decl_stmt|;
try|try
block|{
name|lock
operator|.
name|acquire
argument_list|(
name|Lock
operator|.
name|WRITE_LOCK
argument_list|)
expr_stmt|;
name|NGramQNameKey
name|value
init|=
operator|new
name|NGramQNameKey
argument_list|(
name|currentDoc
operator|.
name|getCollection
argument_list|()
operator|.
name|getId
argument_list|()
argument_list|,
name|key
operator|.
name|qname
argument_list|,
name|index
operator|.
name|getBrokerPool
argument_list|()
operator|.
name|getSymbols
argument_list|()
argument_list|,
name|key
operator|.
name|term
argument_list|)
decl_stmt|;
name|boolean
name|changed
init|=
literal|false
decl_stmt|;
name|os
operator|.
name|clear
argument_list|()
expr_stmt|;
name|VariableByteInput
name|is
init|=
name|index
operator|.
name|db
operator|.
name|getAsStream
argument_list|(
name|value
argument_list|)
decl_stmt|;
if|if
condition|(
name|is
operator|==
literal|null
condition|)
continue|continue;
while|while
condition|(
name|is
operator|.
name|available
argument_list|()
operator|>
literal|0
condition|)
block|{
name|int
name|storedDocId
init|=
name|is
operator|.
name|readInt
argument_list|()
decl_stmt|;
name|byte
name|nameType
init|=
name|is
operator|.
name|readByte
argument_list|()
decl_stmt|;
name|int
name|occurrences
init|=
name|is
operator|.
name|readInt
argument_list|()
decl_stmt|;
comment|//Read (variable) length of node IDs + frequency + offsets
name|int
name|length
init|=
name|is
operator|.
name|readFixedInt
argument_list|()
decl_stmt|;
if|if
condition|(
name|storedDocId
operator|!=
name|currentDoc
operator|.
name|getDocId
argument_list|()
condition|)
block|{
comment|// data are related to another document:
comment|// copy them to any existing data
name|os
operator|.
name|writeInt
argument_list|(
name|storedDocId
argument_list|)
expr_stmt|;
name|os
operator|.
name|writeByte
argument_list|(
name|nameType
argument_list|)
expr_stmt|;
name|os
operator|.
name|writeInt
argument_list|(
name|occurrences
argument_list|)
expr_stmt|;
name|os
operator|.
name|writeFixedInt
argument_list|(
name|length
argument_list|)
expr_stmt|;
name|is
operator|.
name|copyRaw
argument_list|(
name|os
argument_list|,
name|length
argument_list|)
expr_stmt|;
block|}
else|else
block|{
comment|// data are related to our document:
if|if
condition|(
name|mode
operator|==
name|StreamListener
operator|.
name|REMOVE_ALL_NODES
condition|)
block|{
comment|// skip them
name|is
operator|.
name|skipBytes
argument_list|(
name|length
argument_list|)
expr_stmt|;
block|}
else|else
block|{
comment|// removing nodes: need to filter out the node ids to be removed
comment|// feed the new list with the GIDs
name|NodeId
name|previous
init|=
literal|null
decl_stmt|;
name|OccurrenceList
name|newOccurrences
init|=
operator|new
name|OccurrenceList
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|m
init|=
literal|0
init|;
name|m
operator|<
name|occurrences
condition|;
name|m
operator|++
control|)
block|{
name|NodeId
name|nodeId
init|=
name|index
operator|.
name|getBrokerPool
argument_list|()
operator|.
name|getNodeFactory
argument_list|()
operator|.
name|createFromStream
argument_list|(
name|previous
argument_list|,
name|is
argument_list|)
decl_stmt|;
name|previous
operator|=
name|nodeId
expr_stmt|;
name|int
name|freq
init|=
name|is
operator|.
name|readInt
argument_list|()
decl_stmt|;
comment|// add the node to the new list if it is not
comment|// in the list of removed nodes
if|if
condition|(
operator|!
name|occurencesList
operator|.
name|contains
argument_list|(
name|nodeId
argument_list|)
condition|)
block|{
for|for
control|(
name|int
name|n
init|=
literal|0
init|;
name|n
operator|<
name|freq
condition|;
name|n
operator|++
control|)
block|{
name|newOccurrences
operator|.
name|add
argument_list|(
name|nodeId
argument_list|,
name|is
operator|.
name|readInt
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
else|else
block|{
name|is
operator|.
name|skip
argument_list|(
name|freq
argument_list|)
expr_stmt|;
block|}
block|}
comment|// append the data from the new list
if|if
condition|(
name|newOccurrences
operator|.
name|getSize
argument_list|()
operator|>
literal|0
condition|)
block|{
comment|//Don't forget this one
name|newOccurrences
operator|.
name|sort
argument_list|()
expr_stmt|;
name|os
operator|.
name|writeInt
argument_list|(
name|currentDoc
operator|.
name|getDocId
argument_list|()
argument_list|)
expr_stmt|;
name|os
operator|.
name|writeByte
argument_list|(
name|nameType
argument_list|)
expr_stmt|;
name|os
operator|.
name|writeInt
argument_list|(
name|newOccurrences
operator|.
name|getTermCount
argument_list|()
argument_list|)
expr_stmt|;
comment|//Mark position
name|int
name|lenOffset
init|=
name|os
operator|.
name|position
argument_list|()
decl_stmt|;
comment|//Dummy value : actual one will be written below
name|os
operator|.
name|writeFixedInt
argument_list|(
literal|0
argument_list|)
expr_stmt|;
name|previous
operator|=
literal|null
expr_stmt|;
for|for
control|(
name|int
name|m
init|=
literal|0
init|;
name|m
operator|<
name|newOccurrences
operator|.
name|getSize
argument_list|()
condition|;
control|)
block|{
name|previous
operator|=
name|newOccurrences
operator|.
name|getNode
argument_list|(
name|m
argument_list|)
operator|.
name|write
argument_list|(
name|previous
argument_list|,
name|os
argument_list|)
expr_stmt|;
name|int
name|freq
init|=
name|newOccurrences
operator|.
name|getOccurrences
argument_list|(
name|m
argument_list|)
decl_stmt|;
name|os
operator|.
name|writeInt
argument_list|(
name|freq
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|n
init|=
literal|0
init|;
name|n
operator|<
name|freq
condition|;
name|n
operator|++
control|)
block|{
name|os
operator|.
name|writeInt
argument_list|(
name|newOccurrences
operator|.
name|getOffset
argument_list|(
name|m
operator|+
name|n
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|m
operator|+=
name|freq
expr_stmt|;
block|}
comment|//Write (variable) length of node IDs + frequency + offsets
name|os
operator|.
name|writeFixedInt
argument_list|(
name|lenOffset
argument_list|,
name|os
operator|.
name|position
argument_list|()
operator|-
name|lenOffset
operator|-
literal|4
argument_list|)
expr_stmt|;
block|}
block|}
name|changed
operator|=
literal|true
expr_stmt|;
block|}
block|}
comment|//Store new data, if relevant
if|if
condition|(
name|changed
condition|)
block|{
comment|//Well, nothing to store : remove the existing data
if|if
condition|(
name|os
operator|.
name|data
argument_list|()
operator|.
name|size
argument_list|()
operator|==
literal|0
condition|)
block|{
name|index
operator|.
name|db
operator|.
name|remove
argument_list|(
name|value
argument_list|)
expr_stmt|;
block|}
else|else
block|{
if|if
condition|(
name|index
operator|.
name|db
operator|.
name|put
argument_list|(
name|value
argument_list|,
name|os
operator|.
name|data
argument_list|()
argument_list|)
operator|==
name|BFile
operator|.
name|UNKNOWN_ADDRESS
condition|)
block|{
name|LOG
operator|.
name|error
argument_list|(
literal|"Could not put index data for token '"
operator|+
name|key
operator|.
name|term
operator|+
literal|"' in '"
operator|+
name|index
operator|.
name|db
operator|.
name|getFile
argument_list|()
operator|.
name|getName
argument_list|()
operator|+
literal|"'"
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
catch|catch
parameter_list|(
name|LockException
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|warn
argument_list|(
literal|"Failed to acquire lock for file "
operator|+
name|index
operator|.
name|db
operator|.
name|getFile
argument_list|()
operator|.
name|getName
argument_list|()
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|warn
argument_list|(
literal|"IO error for file "
operator|+
name|index
operator|.
name|db
operator|.
name|getFile
argument_list|()
operator|.
name|getName
argument_list|()
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|ReadOnlyException
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|warn
argument_list|(
literal|"Read-only error for file "
operator|+
name|index
operator|.
name|db
operator|.
name|getFile
argument_list|()
operator|.
name|getName
argument_list|()
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
name|lock
operator|.
name|release
argument_list|(
name|Lock
operator|.
name|WRITE_LOCK
argument_list|)
expr_stmt|;
name|os
operator|.
name|clear
argument_list|()
expr_stmt|;
block|}
block|}
name|ngrams
operator|.
name|clear
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|removeCollection
parameter_list|(
name|Collection
name|collection
parameter_list|,
name|DBBroker
name|broker
parameter_list|,
name|boolean
name|reindex
parameter_list|)
block|{
if|if
condition|(
name|LOG
operator|.
name|isDebugEnabled
argument_list|()
condition|)
name|LOG
operator|.
name|debug
argument_list|(
literal|"Dropping NGram index for collection "
operator|+
name|collection
operator|.
name|getURI
argument_list|()
argument_list|)
expr_stmt|;
specifier|final
name|Lock
name|lock
init|=
name|index
operator|.
name|db
operator|.
name|getLock
argument_list|()
decl_stmt|;
try|try
block|{
name|lock
operator|.
name|acquire
argument_list|(
name|Lock
operator|.
name|WRITE_LOCK
argument_list|)
expr_stmt|;
comment|// remove generic index
name|Value
name|value
init|=
operator|new
name|NGramQNameKey
argument_list|(
name|collection
operator|.
name|getId
argument_list|()
argument_list|)
decl_stmt|;
name|index
operator|.
name|db
operator|.
name|removeAll
argument_list|(
literal|null
argument_list|,
operator|new
name|IndexQuery
argument_list|(
name|IndexQuery
operator|.
name|TRUNC_RIGHT
argument_list|,
name|value
argument_list|)
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|LockException
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|warn
argument_list|(
literal|"Failed to acquire lock for '"
operator|+
name|index
operator|.
name|db
operator|.
name|getFile
argument_list|()
operator|.
name|getName
argument_list|()
operator|+
literal|"'"
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|BTreeException
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|error
argument_list|(
name|e
operator|.
name|getMessage
argument_list|()
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|error
argument_list|(
name|e
operator|.
name|getMessage
argument_list|()
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
name|lock
operator|.
name|release
argument_list|(
name|Lock
operator|.
name|WRITE_LOCK
argument_list|)
expr_stmt|;
block|}
block|}
specifier|public
name|NodeSet
name|search
parameter_list|(
name|int
name|contextId
parameter_list|,
name|DocumentSet
name|docs
parameter_list|,
name|List
argument_list|<
name|QName
argument_list|>
name|qnames
parameter_list|,
name|String
name|query
parameter_list|,
name|String
name|ngram
parameter_list|,
name|XQueryContext
name|context
parameter_list|,
name|NodeSet
name|contextSet
parameter_list|,
name|int
name|axis
parameter_list|)
throws|throws
name|XPathException
block|{
if|if
condition|(
name|qnames
operator|==
literal|null
operator|||
name|qnames
operator|.
name|isEmpty
argument_list|()
condition|)
name|qnames
operator|=
name|getDefinedIndexes
argument_list|(
name|context
operator|.
name|getBroker
argument_list|()
argument_list|,
name|docs
argument_list|)
expr_stmt|;
specifier|final
name|NodeSet
name|result
init|=
operator|new
name|ExtArrayNodeSet
argument_list|(
name|docs
operator|.
name|getDocumentCount
argument_list|()
argument_list|,
literal|250
argument_list|)
decl_stmt|;
for|for
control|(
name|Iterator
argument_list|<
name|org
operator|.
name|exist
operator|.
name|collections
operator|.
name|Collection
argument_list|>
name|iter
init|=
name|docs
operator|.
name|getCollectionIterator
argument_list|()
init|;
name|iter
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
specifier|final
name|int
name|collectionId
init|=
name|iter
operator|.
name|next
argument_list|()
operator|.
name|getId
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|qnames
operator|.
name|size
argument_list|()
condition|;
name|i
operator|++
control|)
block|{
name|QName
name|qname
init|=
name|qnames
operator|.
name|get
argument_list|(
name|i
argument_list|)
decl_stmt|;
name|NGramQNameKey
name|key
init|=
operator|new
name|NGramQNameKey
argument_list|(
name|collectionId
argument_list|,
name|qname
argument_list|,
name|index
operator|.
name|getBrokerPool
argument_list|()
operator|.
name|getSymbols
argument_list|()
argument_list|,
name|query
argument_list|)
decl_stmt|;
specifier|final
name|Lock
name|lock
init|=
name|index
operator|.
name|db
operator|.
name|getLock
argument_list|()
decl_stmt|;
try|try
block|{
name|lock
operator|.
name|acquire
argument_list|(
name|Lock
operator|.
name|READ_LOCK
argument_list|)
expr_stmt|;
name|SearchCallback
name|cb
init|=
operator|new
name|SearchCallback
argument_list|(
name|contextId
argument_list|,
name|query
argument_list|,
name|ngram
argument_list|,
name|docs
argument_list|,
name|contextSet
argument_list|,
name|context
argument_list|,
name|result
argument_list|,
name|axis
operator|==
name|NodeSet
operator|.
name|ANCESTOR
argument_list|)
decl_stmt|;
name|int
name|op
init|=
name|query
operator|.
name|codePointCount
argument_list|(
literal|0
argument_list|,
name|query
operator|.
name|length
argument_list|()
argument_list|)
operator|<
name|getN
argument_list|()
condition|?
name|IndexQuery
operator|.
name|TRUNC_RIGHT
else|:
name|IndexQuery
operator|.
name|EQ
decl_stmt|;
name|index
operator|.
name|db
operator|.
name|query
argument_list|(
operator|new
name|IndexQuery
argument_list|(
name|op
argument_list|,
name|key
argument_list|)
argument_list|,
name|cb
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|LockException
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|warn
argument_list|(
literal|"Failed to acquire lock for '"
operator|+
name|index
operator|.
name|db
operator|.
name|getFile
argument_list|()
operator|.
name|getName
argument_list|()
operator|+
literal|"'"
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|error
argument_list|(
name|e
operator|.
name|getMessage
argument_list|()
operator|+
literal|" in '"
operator|+
name|index
operator|.
name|db
operator|.
name|getFile
argument_list|()
operator|.
name|getName
argument_list|()
operator|+
literal|"'"
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|BTreeException
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|error
argument_list|(
name|e
operator|.
name|getMessage
argument_list|()
operator|+
literal|" in '"
operator|+
name|index
operator|.
name|db
operator|.
name|getFile
argument_list|()
operator|.
name|getName
argument_list|()
operator|+
literal|"'"
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
name|lock
operator|.
name|release
argument_list|(
name|Lock
operator|.
name|READ_LOCK
argument_list|)
expr_stmt|;
block|}
block|}
block|}
name|result
operator|.
name|iterate
argument_list|()
expr_stmt|;
comment|// ensure result is ready to use
return|return
name|result
return|;
block|}
comment|/**      * Check index configurations for all collection in the given DocumentSet and return      * a list of QNames, which have indexes defined on them.      *      * @param broker      * @param docs      *       */
specifier|private
name|List
argument_list|<
name|QName
argument_list|>
name|getDefinedIndexes
parameter_list|(
name|DBBroker
name|broker
parameter_list|,
name|DocumentSet
name|docs
parameter_list|)
block|{
name|List
argument_list|<
name|QName
argument_list|>
name|indexes
init|=
operator|new
name|ArrayList
argument_list|<
name|QName
argument_list|>
argument_list|(
literal|20
argument_list|)
decl_stmt|;
for|for
control|(
name|Iterator
argument_list|<
name|Collection
argument_list|>
name|i
init|=
name|docs
operator|.
name|getCollectionIterator
argument_list|()
init|;
name|i
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|Collection
name|collection
init|=
name|i
operator|.
name|next
argument_list|()
decl_stmt|;
name|IndexSpec
name|idxConf
init|=
name|collection
operator|.
name|getIndexConfiguration
argument_list|(
name|broker
argument_list|)
decl_stmt|;
if|if
condition|(
name|idxConf
operator|!=
literal|null
condition|)
block|{
name|Map
argument_list|<
name|?
argument_list|,
name|?
argument_list|>
name|config
init|=
operator|(
name|Map
argument_list|<
name|?
argument_list|,
name|?
argument_list|>
operator|)
name|idxConf
operator|.
name|getCustomIndexSpec
argument_list|(
name|NGramIndex
operator|.
name|ID
argument_list|)
decl_stmt|;
if|if
condition|(
name|config
operator|!=
literal|null
condition|)
block|{
for|for
control|(
name|Object
name|name
range|:
name|config
operator|.
name|keySet
argument_list|()
control|)
block|{
name|QName
name|qn
init|=
operator|(
name|QName
operator|)
name|name
decl_stmt|;
name|indexes
operator|.
name|add
argument_list|(
name|qn
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
return|return
name|indexes
return|;
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|checkIndex
parameter_list|(
name|DBBroker
name|broker
parameter_list|)
block|{
return|return
literal|true
return|;
block|}
annotation|@
name|Override
specifier|public
name|Occurrences
index|[]
name|scanIndex
parameter_list|(
name|XQueryContext
name|context
parameter_list|,
name|DocumentSet
name|docs
parameter_list|,
name|NodeSet
name|contextSet
parameter_list|,
name|Map
name|hints
parameter_list|)
block|{
name|List
argument_list|<
name|QName
argument_list|>
name|qnames
init|=
name|hints
operator|==
literal|null
condition|?
literal|null
else|:
operator|(
name|List
argument_list|<
name|QName
argument_list|>
operator|)
name|hints
operator|.
name|get
argument_list|(
name|QNAMES_KEY
argument_list|)
decl_stmt|;
comment|//Expects a StringValue
name|Object
name|start
init|=
name|hints
operator|==
literal|null
condition|?
literal|null
else|:
name|hints
operator|.
name|get
argument_list|(
name|START_VALUE
argument_list|)
decl_stmt|;
comment|//Expects a StringValue
name|Object
name|end
init|=
name|hints
operator|==
literal|null
condition|?
literal|null
else|:
name|hints
operator|.
name|get
argument_list|(
name|END_VALUE
argument_list|)
decl_stmt|;
if|if
condition|(
name|qnames
operator|==
literal|null
operator|||
name|qnames
operator|.
name|isEmpty
argument_list|()
condition|)
name|qnames
operator|=
name|getDefinedIndexes
argument_list|(
name|context
operator|.
name|getBroker
argument_list|()
argument_list|,
name|docs
argument_list|)
expr_stmt|;
comment|//TODO : use the IndexWorker.VALUE_COUNT hint, if present, to limit the number of returned entries
specifier|final
name|Lock
name|lock
init|=
name|index
operator|.
name|db
operator|.
name|getLock
argument_list|()
decl_stmt|;
specifier|final
name|IndexScanCallback
name|cb
init|=
operator|new
name|IndexScanCallback
argument_list|(
name|docs
argument_list|,
name|contextSet
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|q
init|=
literal|0
init|;
name|q
operator|<
name|qnames
operator|.
name|size
argument_list|()
condition|;
name|q
operator|++
control|)
block|{
for|for
control|(
name|Iterator
argument_list|<
name|Collection
argument_list|>
name|i
init|=
name|docs
operator|.
name|getCollectionIterator
argument_list|()
init|;
name|i
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
specifier|final
name|int
name|collectionId
init|=
name|i
operator|.
name|next
argument_list|()
operator|.
name|getId
argument_list|()
decl_stmt|;
specifier|final
name|IndexQuery
name|query
decl_stmt|;
if|if
condition|(
name|start
operator|==
literal|null
condition|)
block|{
name|Value
name|startRef
init|=
operator|new
name|NGramQNameKey
argument_list|(
name|collectionId
argument_list|)
decl_stmt|;
name|query
operator|=
operator|new
name|IndexQuery
argument_list|(
name|IndexQuery
operator|.
name|TRUNC_RIGHT
argument_list|,
name|startRef
argument_list|)
expr_stmt|;
block|}
if|else if
condition|(
name|end
operator|==
literal|null
condition|)
block|{
name|Value
name|startRef
init|=
operator|new
name|NGramQNameKey
argument_list|(
name|collectionId
argument_list|,
name|qnames
operator|.
name|get
argument_list|(
name|q
argument_list|)
argument_list|,
name|index
operator|.
name|getBrokerPool
argument_list|()
operator|.
name|getSymbols
argument_list|()
argument_list|,
name|start
operator|.
name|toString
argument_list|()
operator|.
name|toLowerCase
argument_list|()
argument_list|)
decl_stmt|;
name|query
operator|=
operator|new
name|IndexQuery
argument_list|(
name|IndexQuery
operator|.
name|TRUNC_RIGHT
argument_list|,
name|startRef
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|Value
name|startRef
init|=
operator|new
name|NGramQNameKey
argument_list|(
name|collectionId
argument_list|,
name|qnames
operator|.
name|get
argument_list|(
name|q
argument_list|)
argument_list|,
name|index
operator|.
name|getBrokerPool
argument_list|()
operator|.
name|getSymbols
argument_list|()
argument_list|,
name|start
operator|.
name|toString
argument_list|()
operator|.
name|toLowerCase
argument_list|()
argument_list|)
decl_stmt|;
name|Value
name|endRef
init|=
operator|new
name|NGramQNameKey
argument_list|(
name|collectionId
argument_list|,
name|qnames
operator|.
name|get
argument_list|(
name|q
argument_list|)
argument_list|,
name|index
operator|.
name|getBrokerPool
argument_list|()
operator|.
name|getSymbols
argument_list|()
argument_list|,
name|end
operator|.
name|toString
argument_list|()
operator|.
name|toLowerCase
argument_list|()
argument_list|)
decl_stmt|;
name|query
operator|=
operator|new
name|IndexQuery
argument_list|(
name|IndexQuery
operator|.
name|BW
argument_list|,
name|startRef
argument_list|,
name|endRef
argument_list|)
expr_stmt|;
block|}
try|try
block|{
name|lock
operator|.
name|acquire
argument_list|(
name|Lock
operator|.
name|READ_LOCK
argument_list|)
expr_stmt|;
name|index
operator|.
name|db
operator|.
name|query
argument_list|(
name|query
argument_list|,
name|cb
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|LockException
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|warn
argument_list|(
literal|"Failed to acquire lock for '"
operator|+
name|index
operator|.
name|db
operator|.
name|getFile
argument_list|()
operator|.
name|getName
argument_list|()
operator|+
literal|"'"
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|error
argument_list|(
name|e
operator|.
name|getMessage
argument_list|()
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|BTreeException
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|error
argument_list|(
name|e
operator|.
name|getMessage
argument_list|()
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|TerminatedException
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|warn
argument_list|(
name|e
operator|.
name|getMessage
argument_list|()
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
name|lock
operator|.
name|release
argument_list|(
name|Lock
operator|.
name|READ_LOCK
argument_list|)
expr_stmt|;
block|}
block|}
block|}
name|Occurrences
index|[]
name|result
init|=
operator|new
name|Occurrences
index|[
name|cb
operator|.
name|map
operator|.
name|size
argument_list|()
index|]
decl_stmt|;
return|return
name|cb
operator|.
name|map
operator|.
name|values
argument_list|()
operator|.
name|toArray
argument_list|(
name|result
argument_list|)
return|;
block|}
comment|//This listener is always the same whatever the document and the mode
comment|//It should thus be declared static
specifier|private
specifier|final
name|StreamListener
name|listener
init|=
operator|new
name|NGramStreamListener
argument_list|()
decl_stmt|;
annotation|@
name|Override
specifier|public
name|StreamListener
name|getListener
parameter_list|()
block|{
return|return
name|listener
return|;
block|}
annotation|@
name|Override
specifier|public
name|MatchListener
name|getMatchListener
parameter_list|(
name|DBBroker
name|broker
parameter_list|,
name|NodeProxy
name|proxy
parameter_list|)
block|{
return|return
name|getMatchListener
argument_list|(
name|broker
argument_list|,
name|proxy
argument_list|,
literal|null
argument_list|)
return|;
block|}
specifier|public
name|MatchListener
name|getMatchListener
parameter_list|(
name|DBBroker
name|broker
parameter_list|,
name|NodeProxy
name|proxy
parameter_list|,
name|NGramMatchCallback
name|callback
parameter_list|)
block|{
name|boolean
name|needToFilter
init|=
literal|false
decl_stmt|;
name|Match
name|nextMatch
init|=
name|proxy
operator|.
name|getMatches
argument_list|()
decl_stmt|;
while|while
condition|(
name|nextMatch
operator|!=
literal|null
condition|)
block|{
if|if
condition|(
name|nextMatch
operator|.
name|getIndexId
argument_list|()
operator|==
name|org
operator|.
name|exist
operator|.
name|indexing
operator|.
name|ngram
operator|.
name|NGramIndex
operator|.
name|ID
condition|)
block|{
name|needToFilter
operator|=
literal|true
expr_stmt|;
break|break;
block|}
name|nextMatch
operator|=
name|nextMatch
operator|.
name|getNextMatch
argument_list|()
expr_stmt|;
block|}
if|if
condition|(
operator|!
name|needToFilter
condition|)
return|return
literal|null
return|;
if|if
condition|(
name|matchListener
operator|==
literal|null
condition|)
name|matchListener
operator|=
operator|new
name|NGramMatchListener
argument_list|(
name|broker
argument_list|,
name|proxy
argument_list|)
expr_stmt|;
else|else
name|matchListener
operator|.
name|reset
argument_list|(
name|broker
argument_list|,
name|proxy
argument_list|)
expr_stmt|;
name|matchListener
operator|.
name|setMatchCallback
argument_list|(
name|callback
argument_list|)
expr_stmt|;
return|return
name|matchListener
return|;
block|}
annotation|@
name|Override
specifier|public
parameter_list|<
name|T
extends|extends
name|IStoredNode
parameter_list|>
name|IStoredNode
name|getReindexRoot
parameter_list|(
name|IStoredNode
argument_list|<
name|T
argument_list|>
name|node
parameter_list|,
name|NodePath
name|path
parameter_list|,
name|boolean
name|insert
parameter_list|,
name|boolean
name|includeSelf
parameter_list|)
block|{
if|if
condition|(
name|node
operator|.
name|getNodeType
argument_list|()
operator|==
name|Node
operator|.
name|ATTRIBUTE_NODE
condition|)
return|return
literal|null
return|;
name|IndexSpec
name|indexConf
init|=
name|node
operator|.
name|getOwnerDocument
argument_list|()
operator|.
name|getCollection
argument_list|()
operator|.
name|getIndexConfiguration
argument_list|(
name|broker
argument_list|)
decl_stmt|;
if|if
condition|(
name|indexConf
operator|!=
literal|null
condition|)
block|{
name|Map
argument_list|<
name|?
argument_list|,
name|?
argument_list|>
name|config
init|=
operator|(
name|Map
argument_list|<
name|?
argument_list|,
name|?
argument_list|>
operator|)
name|indexConf
operator|.
name|getCustomIndexSpec
argument_list|(
name|NGramIndex
operator|.
name|ID
argument_list|)
decl_stmt|;
if|if
condition|(
name|config
operator|==
literal|null
condition|)
return|return
literal|null
return|;
name|boolean
name|reindexRequired
init|=
literal|false
decl_stmt|;
name|int
name|len
init|=
name|node
operator|.
name|getNodeType
argument_list|()
operator|==
name|Node
operator|.
name|ELEMENT_NODE
operator|&&
operator|!
name|includeSelf
condition|?
name|path
operator|.
name|length
argument_list|()
operator|-
literal|1
else|:
name|path
operator|.
name|length
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|len
condition|;
name|i
operator|++
control|)
block|{
name|QName
name|qn
init|=
name|path
operator|.
name|getComponent
argument_list|(
name|i
argument_list|)
decl_stmt|;
if|if
condition|(
name|config
operator|.
name|get
argument_list|(
name|qn
argument_list|)
operator|!=
literal|null
condition|)
block|{
name|reindexRequired
operator|=
literal|true
expr_stmt|;
break|break;
block|}
block|}
if|if
condition|(
name|reindexRequired
condition|)
block|{
name|IStoredNode
name|topMost
init|=
literal|null
decl_stmt|;
name|IStoredNode
argument_list|<
name|T
argument_list|>
name|currentNode
init|=
name|node
decl_stmt|;
while|while
condition|(
name|currentNode
operator|!=
literal|null
condition|)
block|{
if|if
condition|(
name|config
operator|.
name|get
argument_list|(
name|currentNode
operator|.
name|getQName
argument_list|()
argument_list|)
operator|!=
literal|null
condition|)
name|topMost
operator|=
name|currentNode
expr_stmt|;
if|if
condition|(
name|currentNode
operator|.
name|getOwnerDocument
argument_list|()
operator|.
name|getCollection
argument_list|()
operator|.
name|isTempCollection
argument_list|()
operator|&&
name|currentNode
operator|.
name|getNodeId
argument_list|()
operator|.
name|getTreeLevel
argument_list|()
operator|==
literal|2
condition|)
break|break;
comment|//currentNode = (StoredNode) currentNode.getParentNode();
name|currentNode
operator|=
name|currentNode
operator|.
name|getParentStoredNode
argument_list|()
expr_stmt|;
block|}
return|return
name|topMost
return|;
block|}
block|}
return|return
literal|null
return|;
block|}
comment|/**      * Split the given text string into ngrams. The size of an ngram is determined      * by counting the codepoints, not the characters. The resulting strings may      * thus be longer than the ngram size.      *      * @param text      *       */
specifier|public
name|String
index|[]
name|tokenize
parameter_list|(
name|String
name|text
parameter_list|)
block|{
name|int
name|len
init|=
name|text
operator|.
name|codePointCount
argument_list|(
literal|0
argument_list|,
name|text
operator|.
name|length
argument_list|()
argument_list|)
decl_stmt|;
name|int
name|gramSize
init|=
name|index
operator|.
name|getN
argument_list|()
decl_stmt|;
name|String
index|[]
name|ngrams
init|=
operator|new
name|String
index|[
name|len
index|]
decl_stmt|;
name|int
name|next
init|=
literal|0
decl_stmt|;
name|int
name|pos
init|=
literal|0
decl_stmt|;
name|StringBuilder
name|bld
init|=
operator|new
name|StringBuilder
argument_list|(
name|gramSize
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|len
condition|;
name|i
operator|++
control|)
block|{
name|bld
operator|.
name|setLength
argument_list|(
literal|0
argument_list|)
expr_stmt|;
name|int
name|offset
init|=
name|pos
decl_stmt|;
for|for
control|(
name|int
name|count
init|=
literal|0
init|;
name|count
operator|<
name|gramSize
operator|&&
name|offset
operator|<
name|text
operator|.
name|length
argument_list|()
condition|;
name|count
operator|++
control|)
block|{
name|int
name|codepoint
init|=
name|Character
operator|.
name|toLowerCase
argument_list|(
name|text
operator|.
name|codePointAt
argument_list|(
name|offset
argument_list|)
argument_list|)
decl_stmt|;
name|offset
operator|+=
name|Character
operator|.
name|charCount
argument_list|(
name|codepoint
argument_list|)
expr_stmt|;
if|if
condition|(
name|count
operator|==
literal|0
condition|)
name|pos
operator|=
name|offset
expr_stmt|;
comment|// advance pos to next character
name|bld
operator|.
name|appendCodePoint
argument_list|(
name|codepoint
argument_list|)
expr_stmt|;
block|}
name|ngrams
index|[
name|next
operator|++
index|]
operator|=
name|bld
operator|.
name|toString
argument_list|()
expr_stmt|;
block|}
return|return
name|ngrams
return|;
block|}
specifier|private
name|void
name|indexText
parameter_list|(
name|NodeId
name|nodeId
parameter_list|,
name|QName
name|qname
parameter_list|,
name|String
name|text
parameter_list|)
block|{
specifier|final
name|String
index|[]
name|ngram
init|=
name|tokenize
argument_list|(
name|text
argument_list|)
decl_stmt|;
specifier|final
name|int
name|len
init|=
name|text
operator|.
name|length
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|,
name|j
init|=
literal|0
init|,
name|cp
init|;
name|i
operator|<
name|len
condition|;
name|i
operator|+=
name|Character
operator|.
name|charCount
argument_list|(
name|cp
argument_list|)
operator|,
name|j
operator|++
control|)
block|{
name|cp
operator|=
name|text
operator|.
name|codePointAt
argument_list|(
name|i
argument_list|)
expr_stmt|;
specifier|final
name|QNameTerm
name|key
init|=
operator|new
name|QNameTerm
argument_list|(
name|qname
argument_list|,
name|ngram
index|[
name|j
index|]
argument_list|)
decl_stmt|;
name|OccurrenceList
name|list
init|=
name|ngrams
operator|.
name|get
argument_list|(
name|key
argument_list|)
decl_stmt|;
if|if
condition|(
name|list
operator|==
literal|null
condition|)
block|{
name|list
operator|=
operator|new
name|OccurrenceList
argument_list|()
expr_stmt|;
name|list
operator|.
name|add
argument_list|(
name|nodeId
argument_list|,
name|i
argument_list|)
expr_stmt|;
name|ngrams
operator|.
name|put
argument_list|(
name|key
argument_list|,
name|list
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|list
operator|.
name|add
argument_list|(
name|nodeId
argument_list|,
name|i
argument_list|)
expr_stmt|;
block|}
block|}
block|}
specifier|private
name|void
name|checkBuffer
parameter_list|()
block|{
if|if
condition|(
name|currentChar
operator|+
name|index
operator|.
name|getN
argument_list|()
operator|>
name|buf
operator|.
name|length
condition|)
block|{
name|buf
operator|=
operator|new
name|char
index|[
literal|1024
index|]
expr_stmt|;
name|Arrays
operator|.
name|fill
argument_list|(
name|buf
argument_list|,
literal|' '
argument_list|)
expr_stmt|;
name|currentChar
operator|=
literal|0
expr_stmt|;
block|}
block|}
specifier|private
name|Map
argument_list|<
name|QName
argument_list|,
name|?
argument_list|>
name|config
decl_stmt|;
specifier|private
name|Stack
argument_list|<
name|XMLString
argument_list|>
name|contentStack
init|=
literal|null
decl_stmt|;
annotation|@
name|Override
specifier|public
name|void
name|setDocument
parameter_list|(
name|DocumentImpl
name|document
parameter_list|)
block|{
name|setDocument
argument_list|(
name|document
argument_list|,
name|StreamListener
operator|.
name|UNKNOWN
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|setMode
parameter_list|(
name|int
name|newMode
parameter_list|)
block|{
comment|// wolf: unnecessary call to setDocument?
comment|//    	setDocument(currentDoc, newMode);
name|mode
operator|=
name|newMode
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|DocumentImpl
name|getDocument
parameter_list|()
block|{
return|return
name|currentDoc
return|;
block|}
annotation|@
name|Override
specifier|public
name|int
name|getMode
parameter_list|()
block|{
return|return
name|mode
return|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|setDocument
parameter_list|(
name|DocumentImpl
name|document
parameter_list|,
name|int
name|newMode
parameter_list|)
block|{
name|currentDoc
operator|=
name|document
expr_stmt|;
comment|//config = null;
name|contentStack
operator|=
literal|null
expr_stmt|;
name|IndexSpec
name|indexConf
init|=
name|document
operator|.
name|getCollection
argument_list|()
operator|.
name|getIndexConfiguration
argument_list|(
name|broker
argument_list|)
decl_stmt|;
if|if
condition|(
name|indexConf
operator|!=
literal|null
condition|)
name|config
operator|=
operator|(
name|Map
argument_list|<
name|QName
argument_list|,
name|?
argument_list|>
operator|)
name|indexConf
operator|.
name|getCustomIndexSpec
argument_list|(
name|org
operator|.
name|exist
operator|.
name|indexing
operator|.
name|ngram
operator|.
name|NGramIndex
operator|.
name|ID
argument_list|)
expr_stmt|;
name|mode
operator|=
name|newMode
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|QueryRewriter
name|getQueryRewriter
parameter_list|(
name|XQueryContext
name|context
parameter_list|)
block|{
return|return
literal|null
return|;
block|}
specifier|private
class|class
name|NGramStreamListener
extends|extends
name|AbstractStreamListener
block|{
specifier|public
name|NGramStreamListener
parameter_list|()
block|{
comment|//Nothing to do
block|}
annotation|@
name|Override
specifier|public
name|void
name|startElement
parameter_list|(
name|Txn
name|transaction
parameter_list|,
name|ElementImpl
name|element
parameter_list|,
name|NodePath
name|path
parameter_list|)
block|{
if|if
condition|(
name|config
operator|!=
literal|null
operator|&&
name|config
operator|.
name|get
argument_list|(
name|element
operator|.
name|getQName
argument_list|()
argument_list|)
operator|!=
literal|null
condition|)
block|{
if|if
condition|(
name|contentStack
operator|==
literal|null
condition|)
name|contentStack
operator|=
operator|new
name|Stack
argument_list|<
name|XMLString
argument_list|>
argument_list|()
expr_stmt|;
name|XMLString
name|contentBuf
init|=
operator|new
name|XMLString
argument_list|()
decl_stmt|;
name|contentStack
operator|.
name|push
argument_list|(
name|contentBuf
argument_list|)
expr_stmt|;
block|}
name|super
operator|.
name|startElement
argument_list|(
name|transaction
argument_list|,
name|element
argument_list|,
name|path
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|attribute
parameter_list|(
name|Txn
name|transaction
parameter_list|,
name|AttrImpl
name|attrib
parameter_list|,
name|NodePath
name|path
parameter_list|)
block|{
if|if
condition|(
name|config
operator|!=
literal|null
operator|&&
name|config
operator|.
name|get
argument_list|(
name|attrib
operator|.
name|getQName
argument_list|()
argument_list|)
operator|!=
literal|null
condition|)
block|{
name|indexText
argument_list|(
name|attrib
operator|.
name|getNodeId
argument_list|()
argument_list|,
name|attrib
operator|.
name|getQName
argument_list|()
argument_list|,
name|attrib
operator|.
name|getValue
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|super
operator|.
name|attribute
argument_list|(
name|transaction
argument_list|,
name|attrib
argument_list|,
name|path
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|endElement
parameter_list|(
name|Txn
name|transaction
parameter_list|,
name|ElementImpl
name|element
parameter_list|,
name|NodePath
name|path
parameter_list|)
block|{
if|if
condition|(
name|config
operator|!=
literal|null
operator|&&
name|config
operator|.
name|get
argument_list|(
name|element
operator|.
name|getQName
argument_list|()
argument_list|)
operator|!=
literal|null
condition|)
block|{
name|XMLString
name|content
init|=
name|contentStack
operator|.
name|pop
argument_list|()
decl_stmt|;
name|indexText
argument_list|(
name|element
operator|.
name|getNodeId
argument_list|()
argument_list|,
name|element
operator|.
name|getQName
argument_list|()
argument_list|,
name|content
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|super
operator|.
name|endElement
argument_list|(
name|transaction
argument_list|,
name|element
argument_list|,
name|path
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|characters
parameter_list|(
name|Txn
name|transaction
parameter_list|,
name|AbstractCharacterData
name|text
parameter_list|,
name|NodePath
name|path
parameter_list|)
block|{
if|if
condition|(
name|contentStack
operator|!=
literal|null
operator|&&
operator|!
name|contentStack
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
for|for
control|(
name|XMLString
name|next
range|:
name|contentStack
control|)
block|{
name|next
operator|.
name|append
argument_list|(
name|text
operator|.
name|getXMLString
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
name|super
operator|.
name|characters
argument_list|(
name|transaction
argument_list|,
name|text
argument_list|,
name|path
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|IndexWorker
name|getWorker
parameter_list|()
block|{
return|return
name|NGramIndexWorker
operator|.
name|this
return|;
block|}
block|}
specifier|private
class|class
name|NGramMatchListener
extends|extends
name|AbstractMatchListener
block|{
specifier|private
name|Match
name|match
decl_stmt|;
specifier|private
name|Stack
argument_list|<
name|NodeOffset
argument_list|>
name|offsetStack
init|=
literal|null
decl_stmt|;
specifier|private
name|NGramMatchCallback
name|callback
init|=
literal|null
decl_stmt|;
annotation|@
name|SuppressWarnings
argument_list|(
literal|"unused"
argument_list|)
specifier|private
name|NodeProxy
name|root
decl_stmt|;
specifier|public
name|NGramMatchListener
parameter_list|(
name|DBBroker
name|broker
parameter_list|,
name|NodeProxy
name|proxy
parameter_list|)
block|{
name|reset
argument_list|(
name|broker
argument_list|,
name|proxy
argument_list|)
expr_stmt|;
block|}
specifier|protected
name|void
name|setMatchCallback
parameter_list|(
name|NGramMatchCallback
name|cb
parameter_list|)
block|{
name|this
operator|.
name|callback
operator|=
name|cb
expr_stmt|;
block|}
specifier|protected
name|void
name|reset
parameter_list|(
name|DBBroker
name|broker
parameter_list|,
name|NodeProxy
name|proxy
parameter_list|)
block|{
name|this
operator|.
name|root
operator|=
name|proxy
expr_stmt|;
name|this
operator|.
name|match
operator|=
name|proxy
operator|.
name|getMatches
argument_list|()
expr_stmt|;
name|setNextInChain
argument_list|(
literal|null
argument_list|)
expr_stmt|;
comment|/* Check if an index is defined on an ancestor of the current node.              * If yes, scan the ancestor to get the offset of the first character              * in the current node. For example, if the indexed node is&lt;a>abc&lt;b>de&lt;/b></a>              * and we query for //a[text:ngram-contains(., 'de')]/b, proxy will be a&lt;b> node, but              * the offsets of the matches are relative to the start of&lt;a>.              */
name|NodeSet
name|ancestors
init|=
literal|null
decl_stmt|;
name|Match
name|nextMatch
init|=
name|this
operator|.
name|match
decl_stmt|;
while|while
condition|(
name|nextMatch
operator|!=
literal|null
condition|)
block|{
if|if
condition|(
name|proxy
operator|.
name|getNodeId
argument_list|()
operator|.
name|isDescendantOf
argument_list|(
name|nextMatch
operator|.
name|getNodeId
argument_list|()
argument_list|)
condition|)
block|{
if|if
condition|(
name|ancestors
operator|==
literal|null
condition|)
name|ancestors
operator|=
operator|new
name|ExtArrayNodeSet
argument_list|()
expr_stmt|;
name|ancestors
operator|.
name|add
argument_list|(
operator|new
name|NodeProxy
argument_list|(
name|proxy
operator|.
name|getOwnerDocument
argument_list|()
argument_list|,
name|nextMatch
operator|.
name|getNodeId
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|nextMatch
operator|=
name|nextMatch
operator|.
name|getNextMatch
argument_list|()
expr_stmt|;
block|}
if|if
condition|(
name|ancestors
operator|!=
literal|null
operator|&&
operator|!
name|ancestors
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
for|for
control|(
name|NodeProxy
name|p
range|:
name|ancestors
control|)
block|{
name|int
name|startOffset
init|=
literal|0
decl_stmt|;
try|try
block|{
name|XMLStreamReader
name|reader
init|=
name|broker
operator|.
name|getXMLStreamReader
argument_list|(
name|p
argument_list|,
literal|false
argument_list|)
decl_stmt|;
while|while
condition|(
name|reader
operator|.
name|hasNext
argument_list|()
condition|)
block|{
name|int
name|ev
init|=
name|reader
operator|.
name|next
argument_list|()
decl_stmt|;
name|NodeId
name|nodeId
init|=
operator|(
name|NodeId
operator|)
name|reader
operator|.
name|getProperty
argument_list|(
name|ExtendedXMLStreamReader
operator|.
name|PROPERTY_NODE_ID
argument_list|)
decl_stmt|;
if|if
condition|(
name|nodeId
operator|.
name|equals
argument_list|(
name|proxy
operator|.
name|getNodeId
argument_list|()
argument_list|)
condition|)
break|break;
if|if
condition|(
name|ev
operator|==
name|XMLStreamConstants
operator|.
name|CHARACTERS
condition|)
name|startOffset
operator|+=
name|reader
operator|.
name|getText
argument_list|()
operator|.
name|length
argument_list|()
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|warn
argument_list|(
literal|"Problem found while serializing XML: "
operator|+
name|e
operator|.
name|getMessage
argument_list|()
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|XMLStreamException
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|warn
argument_list|(
literal|"Problem found while serializing XML: "
operator|+
name|e
operator|.
name|getMessage
argument_list|()
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|offsetStack
operator|==
literal|null
condition|)
name|offsetStack
operator|=
operator|new
name|Stack
argument_list|<
name|NodeOffset
argument_list|>
argument_list|()
expr_stmt|;
name|offsetStack
operator|.
name|push
argument_list|(
operator|new
name|NodeOffset
argument_list|(
name|p
operator|.
name|getNodeId
argument_list|()
argument_list|,
name|startOffset
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
block|}
annotation|@
name|Override
specifier|public
name|void
name|startElement
parameter_list|(
name|QName
name|qname
parameter_list|,
name|AttrList
name|attribs
parameter_list|)
throws|throws
name|SAXException
block|{
name|Match
name|nextMatch
init|=
name|match
decl_stmt|;
comment|// check if there are any matches in the current element
comment|// if yes, push a NodeOffset object to the stack to track
comment|// the node contents
while|while
condition|(
name|nextMatch
operator|!=
literal|null
condition|)
block|{
if|if
condition|(
name|nextMatch
operator|.
name|getNodeId
argument_list|()
operator|.
name|equals
argument_list|(
name|getCurrentNode
argument_list|()
operator|.
name|getNodeId
argument_list|()
argument_list|)
condition|)
block|{
if|if
condition|(
name|offsetStack
operator|==
literal|null
condition|)
name|offsetStack
operator|=
operator|new
name|Stack
argument_list|<
name|NodeOffset
argument_list|>
argument_list|()
expr_stmt|;
name|offsetStack
operator|.
name|push
argument_list|(
operator|new
name|NodeOffset
argument_list|(
name|nextMatch
operator|.
name|getNodeId
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
break|break;
block|}
name|nextMatch
operator|=
name|nextMatch
operator|.
name|getNextMatch
argument_list|()
expr_stmt|;
block|}
name|super
operator|.
name|startElement
argument_list|(
name|qname
argument_list|,
name|attribs
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|endElement
parameter_list|(
name|QName
name|qname
parameter_list|)
throws|throws
name|SAXException
block|{
name|Match
name|nextMatch
init|=
name|match
decl_stmt|;
comment|// check if we need to pop the stack
while|while
condition|(
name|nextMatch
operator|!=
literal|null
condition|)
block|{
if|if
condition|(
name|nextMatch
operator|.
name|getNodeId
argument_list|()
operator|.
name|equals
argument_list|(
name|getCurrentNode
argument_list|()
operator|.
name|getNodeId
argument_list|()
argument_list|)
condition|)
block|{
name|offsetStack
operator|.
name|pop
argument_list|()
expr_stmt|;
break|break;
block|}
name|nextMatch
operator|=
name|nextMatch
operator|.
name|getNextMatch
argument_list|()
expr_stmt|;
block|}
name|super
operator|.
name|endElement
argument_list|(
name|qname
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|characters
parameter_list|(
name|CharSequence
name|seq
parameter_list|)
throws|throws
name|SAXException
block|{
name|List
argument_list|<
name|Match
operator|.
name|Offset
argument_list|>
name|offsets
init|=
literal|null
decl_stmt|;
comment|// a list of offsets to process
if|if
condition|(
name|offsetStack
operator|!=
literal|null
condition|)
block|{
comment|// walk through the stack to find matches which start in
comment|// the current string of text
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|offsetStack
operator|.
name|size
argument_list|()
condition|;
name|i
operator|++
control|)
block|{
name|NodeOffset
name|no
init|=
name|offsetStack
operator|.
name|get
argument_list|(
name|i
argument_list|)
decl_stmt|;
name|int
name|end
init|=
name|no
operator|.
name|offset
operator|+
name|seq
operator|.
name|length
argument_list|()
decl_stmt|;
comment|// scan all matches
name|Match
name|next
init|=
name|match
decl_stmt|;
while|while
condition|(
name|next
operator|!=
literal|null
condition|)
block|{
if|if
condition|(
name|next
operator|.
name|getIndexId
argument_list|()
operator|==
name|NGramIndex
operator|.
name|ID
operator|&&
name|next
operator|.
name|getNodeId
argument_list|()
operator|.
name|equals
argument_list|(
name|no
operator|.
name|nodeId
argument_list|)
condition|)
block|{
name|int
name|freq
init|=
name|next
operator|.
name|getFrequency
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|j
init|=
literal|0
init|;
name|j
operator|<
name|freq
condition|;
name|j
operator|++
control|)
block|{
name|Match
operator|.
name|Offset
name|offset
init|=
name|next
operator|.
name|getOffset
argument_list|(
name|j
argument_list|)
decl_stmt|;
if|if
condition|(
name|offset
operator|.
name|getOffset
argument_list|()
operator|<
name|end
operator|&&
name|offset
operator|.
name|getOffset
argument_list|()
operator|+
name|offset
operator|.
name|getLength
argument_list|()
operator|>
name|no
operator|.
name|offset
condition|)
block|{
comment|// add it to the list to be processed
if|if
condition|(
name|offsets
operator|==
literal|null
condition|)
block|{
name|offsets
operator|=
operator|new
name|ArrayList
argument_list|<
name|Match
operator|.
name|Offset
argument_list|>
argument_list|(
literal|4
argument_list|)
expr_stmt|;
block|}
comment|// adjust the offset and add it to the list
name|int
name|start
init|=
name|offset
operator|.
name|getOffset
argument_list|()
operator|-
name|no
operator|.
name|offset
decl_stmt|;
name|int
name|len
init|=
name|offset
operator|.
name|getLength
argument_list|()
decl_stmt|;
if|if
condition|(
name|start
operator|<
literal|0
condition|)
block|{
name|len
operator|=
name|len
operator|-
name|Math
operator|.
name|abs
argument_list|(
name|start
argument_list|)
expr_stmt|;
name|start
operator|=
literal|0
expr_stmt|;
block|}
if|if
condition|(
name|start
operator|+
name|len
operator|>
name|seq
operator|.
name|length
argument_list|()
condition|)
name|len
operator|=
name|seq
operator|.
name|length
argument_list|()
operator|-
name|start
expr_stmt|;
name|offsets
operator|.
name|add
argument_list|(
operator|new
name|Match
operator|.
name|Offset
argument_list|(
name|start
argument_list|,
name|len
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
block|}
name|next
operator|=
name|next
operator|.
name|getNextMatch
argument_list|()
expr_stmt|;
block|}
comment|// add the length of the current text to the element content length
name|no
operator|.
name|offset
operator|=
name|end
expr_stmt|;
block|}
block|}
comment|// now print out the text, marking all matches with a match element
if|if
condition|(
name|offsets
operator|!=
literal|null
condition|)
block|{
name|FastQSort
operator|.
name|sort
argument_list|(
name|offsets
argument_list|,
literal|0
argument_list|,
name|offsets
operator|.
name|size
argument_list|()
operator|-
literal|1
argument_list|)
expr_stmt|;
name|String
name|s
init|=
name|seq
operator|.
name|toString
argument_list|()
decl_stmt|;
name|int
name|pos
init|=
literal|0
decl_stmt|;
for|for
control|(
name|Match
operator|.
name|Offset
name|offset
range|:
name|offsets
control|)
block|{
if|if
condition|(
name|offset
operator|.
name|getOffset
argument_list|()
operator|>
name|pos
condition|)
block|{
name|super
operator|.
name|characters
argument_list|(
name|s
operator|.
name|substring
argument_list|(
name|pos
argument_list|,
name|pos
operator|+
operator|(
name|offset
operator|.
name|getOffset
argument_list|()
operator|-
name|pos
operator|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|callback
operator|==
literal|null
condition|)
block|{
name|super
operator|.
name|startElement
argument_list|(
name|MATCH_ELEMENT
argument_list|,
literal|null
argument_list|)
expr_stmt|;
name|super
operator|.
name|characters
argument_list|(
name|s
operator|.
name|substring
argument_list|(
name|offset
operator|.
name|getOffset
argument_list|()
argument_list|,
name|offset
operator|.
name|getOffset
argument_list|()
operator|+
name|offset
operator|.
name|getLength
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|super
operator|.
name|endElement
argument_list|(
name|MATCH_ELEMENT
argument_list|)
expr_stmt|;
block|}
else|else
block|{
try|try
block|{
name|callback
operator|.
name|match
argument_list|(
name|nextListener
argument_list|,
name|s
operator|.
name|substring
argument_list|(
name|offset
operator|.
name|getOffset
argument_list|()
argument_list|,
name|offset
operator|.
name|getOffset
argument_list|()
operator|+
name|offset
operator|.
name|getLength
argument_list|()
argument_list|)
argument_list|,
operator|new
name|NodeProxy
argument_list|(
name|getCurrentNode
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|XPathException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|SAXException
argument_list|(
literal|"An error occurred while calling match callback: "
operator|+
name|e
operator|.
name|getMessage
argument_list|()
argument_list|,
name|e
argument_list|)
throw|;
block|}
block|}
name|pos
operator|=
name|offset
operator|.
name|getOffset
argument_list|()
operator|+
name|offset
operator|.
name|getLength
argument_list|()
expr_stmt|;
block|}
if|if
condition|(
name|pos
operator|<
name|s
operator|.
name|length
argument_list|()
condition|)
block|{
name|super
operator|.
name|characters
argument_list|(
name|s
operator|.
name|substring
argument_list|(
name|pos
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
else|else
name|super
operator|.
name|characters
argument_list|(
name|seq
argument_list|)
expr_stmt|;
block|}
block|}
specifier|private
specifier|static
class|class
name|NodeOffset
block|{
name|NodeId
name|nodeId
decl_stmt|;
name|int
name|offset
init|=
literal|0
decl_stmt|;
specifier|public
name|NodeOffset
parameter_list|(
name|NodeId
name|nodeId
parameter_list|)
block|{
name|this
operator|.
name|nodeId
operator|=
name|nodeId
expr_stmt|;
block|}
specifier|public
name|NodeOffset
parameter_list|(
name|NodeId
name|nodeId
parameter_list|,
name|int
name|offset
parameter_list|)
block|{
name|this
operator|.
name|nodeId
operator|=
name|nodeId
expr_stmt|;
name|this
operator|.
name|offset
operator|=
name|offset
expr_stmt|;
block|}
block|}
specifier|private
specifier|static
class|class
name|QNameTerm
implements|implements
name|Comparable
argument_list|<
name|QNameTerm
argument_list|>
block|{
name|QName
name|qname
decl_stmt|;
name|String
name|term
decl_stmt|;
specifier|public
name|QNameTerm
parameter_list|(
name|QName
name|qname
parameter_list|,
name|String
name|term
parameter_list|)
block|{
name|this
operator|.
name|qname
operator|=
name|qname
expr_stmt|;
name|this
operator|.
name|term
operator|=
name|term
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|int
name|compareTo
parameter_list|(
name|QNameTerm
name|other
parameter_list|)
block|{
name|int
name|cmp
init|=
name|qname
operator|.
name|compareTo
argument_list|(
name|other
operator|.
name|qname
argument_list|)
decl_stmt|;
if|if
condition|(
name|cmp
operator|==
literal|0
condition|)
return|return
name|term
operator|.
name|compareTo
argument_list|(
name|other
operator|.
name|term
argument_list|)
return|;
return|return
name|cmp
return|;
block|}
block|}
specifier|private
specifier|static
class|class
name|NGramQNameKey
extends|extends
name|Value
block|{
specifier|private
specifier|static
specifier|final
name|int
name|COLLECTION_ID_OFFSET
init|=
literal|1
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|int
name|NAMETYPE_OFFSET
init|=
name|COLLECTION_ID_OFFSET
operator|+
name|Collection
operator|.
name|LENGTH_COLLECTION_ID
decl_stmt|;
comment|// 5
specifier|private
specifier|static
specifier|final
name|int
name|NAMESPACE_OFFSET
init|=
name|NAMETYPE_OFFSET
operator|+
name|ElementValue
operator|.
name|LENGTH_TYPE
decl_stmt|;
comment|// 6
specifier|private
specifier|static
specifier|final
name|int
name|LOCALNAME_OFFSET
init|=
name|NAMESPACE_OFFSET
operator|+
name|SymbolTable
operator|.
name|LENGTH_NS_URI
decl_stmt|;
comment|// 8
specifier|private
specifier|static
specifier|final
name|int
name|NGRAM_OFFSET
init|=
name|LOCALNAME_OFFSET
operator|+
name|SymbolTable
operator|.
name|LENGTH_LOCAL_NAME
decl_stmt|;
comment|// 10
specifier|public
name|NGramQNameKey
parameter_list|(
name|int
name|collectionId
parameter_list|)
block|{
name|len
operator|=
name|Collection
operator|.
name|LENGTH_COLLECTION_ID
operator|+
literal|1
expr_stmt|;
name|data
operator|=
operator|new
name|byte
index|[
name|len
index|]
expr_stmt|;
name|data
index|[
literal|0
index|]
operator|=
name|IDX_QNAME
expr_stmt|;
name|ByteConversion
operator|.
name|intToByte
argument_list|(
name|collectionId
argument_list|,
name|data
argument_list|,
name|COLLECTION_ID_OFFSET
argument_list|)
expr_stmt|;
block|}
comment|/*         public NGramQNameKey(int collectionId, QName qname, SymbolTable symbols) {             len = NGRAM_OFFSET;             data = new byte[len];             data[0] = IDX_QNAME;             ByteConversion.intToByte(collectionId, data, COLLECTION_ID_OFFSET);             final short namespaceId = symbols.getNSSymbol(qname.getNamespaceURI());             final short localNameId = symbols.getSymbol(qname.getLocalPart());             data[NAMETYPE_OFFSET] = qname.getNameType();             ByteConversion.shortToByte(namespaceId, data, NAMESPACE_OFFSET);             ByteConversion.shortToByte(localNameId, data, LOCALNAME_OFFSET);         }         */
specifier|public
name|NGramQNameKey
parameter_list|(
name|int
name|collectionId
parameter_list|,
name|QName
name|qname
parameter_list|,
name|SymbolTable
name|symbols
parameter_list|,
name|String
name|ngram
parameter_list|)
block|{
name|len
operator|=
name|UTF8
operator|.
name|encoded
argument_list|(
name|ngram
argument_list|)
operator|+
name|NGRAM_OFFSET
expr_stmt|;
name|data
operator|=
operator|new
name|byte
index|[
name|len
index|]
expr_stmt|;
name|data
index|[
literal|0
index|]
operator|=
name|IDX_QNAME
expr_stmt|;
name|ByteConversion
operator|.
name|intToByte
argument_list|(
name|collectionId
argument_list|,
name|data
argument_list|,
name|COLLECTION_ID_OFFSET
argument_list|)
expr_stmt|;
specifier|final
name|short
name|namespaceId
init|=
name|symbols
operator|.
name|getNSSymbol
argument_list|(
name|qname
operator|.
name|getNamespaceURI
argument_list|()
argument_list|)
decl_stmt|;
specifier|final
name|short
name|localNameId
init|=
name|symbols
operator|.
name|getSymbol
argument_list|(
name|qname
operator|.
name|getLocalPart
argument_list|()
argument_list|)
decl_stmt|;
name|data
index|[
name|NAMETYPE_OFFSET
index|]
operator|=
name|qname
operator|.
name|getNameType
argument_list|()
expr_stmt|;
name|ByteConversion
operator|.
name|shortToByte
argument_list|(
name|namespaceId
argument_list|,
name|data
argument_list|,
name|NAMESPACE_OFFSET
argument_list|)
expr_stmt|;
name|ByteConversion
operator|.
name|shortToByte
argument_list|(
name|localNameId
argument_list|,
name|data
argument_list|,
name|LOCALNAME_OFFSET
argument_list|)
expr_stmt|;
name|UTF8
operator|.
name|encode
argument_list|(
name|ngram
argument_list|,
name|data
argument_list|,
name|NGRAM_OFFSET
argument_list|)
expr_stmt|;
block|}
block|}
specifier|private
specifier|final
class|class
name|SearchCallback
implements|implements
name|BTreeCallback
block|{
specifier|private
specifier|final
name|int
name|contextId
decl_stmt|;
specifier|private
specifier|final
name|String
name|query
decl_stmt|;
specifier|private
specifier|final
name|String
name|ngram
decl_stmt|;
specifier|private
specifier|final
name|DocumentSet
name|docs
decl_stmt|;
specifier|private
specifier|final
name|NodeSet
name|contextSet
decl_stmt|;
specifier|private
specifier|final
name|XQueryContext
name|context
decl_stmt|;
specifier|private
specifier|final
name|NodeSet
name|resultSet
decl_stmt|;
specifier|private
specifier|final
name|boolean
name|returnAncestor
decl_stmt|;
specifier|public
name|SearchCallback
parameter_list|(
name|int
name|contextId
parameter_list|,
name|String
name|query
parameter_list|,
name|String
name|ngram
parameter_list|,
name|DocumentSet
name|docs
parameter_list|,
name|NodeSet
name|contextSet
parameter_list|,
name|XQueryContext
name|context
parameter_list|,
name|NodeSet
name|result
parameter_list|,
name|boolean
name|returnAncestor
parameter_list|)
block|{
name|this
operator|.
name|contextId
operator|=
name|contextId
expr_stmt|;
name|this
operator|.
name|query
operator|=
name|query
expr_stmt|;
name|this
operator|.
name|ngram
operator|=
name|ngram
expr_stmt|;
name|this
operator|.
name|docs
operator|=
name|docs
expr_stmt|;
name|this
operator|.
name|context
operator|=
name|context
expr_stmt|;
name|this
operator|.
name|contextSet
operator|=
name|contextSet
expr_stmt|;
name|this
operator|.
name|resultSet
operator|=
name|result
expr_stmt|;
name|this
operator|.
name|returnAncestor
operator|=
name|returnAncestor
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|indexInfo
parameter_list|(
name|Value
name|key
parameter_list|,
name|long
name|pointer
parameter_list|)
throws|throws
name|TerminatedException
block|{
name|String
name|ngram
init|=
operator|new
name|String
argument_list|(
name|key
operator|.
name|getData
argument_list|()
argument_list|,
name|NGramQNameKey
operator|.
name|NGRAM_OFFSET
argument_list|,
name|key
operator|.
name|getLength
argument_list|()
operator|-
name|NGramQNameKey
operator|.
name|NGRAM_OFFSET
argument_list|,
name|UTF_8
argument_list|)
decl_stmt|;
name|VariableByteInput
name|is
decl_stmt|;
try|try
block|{
name|is
operator|=
name|index
operator|.
name|db
operator|.
name|getAsStream
argument_list|(
name|pointer
argument_list|)
expr_stmt|;
comment|//Does the token already has data in the index ?
if|if
condition|(
name|is
operator|==
literal|null
condition|)
return|return
literal|true
return|;
while|while
condition|(
name|is
operator|.
name|available
argument_list|()
operator|>
literal|0
condition|)
block|{
name|int
name|storedDocId
init|=
name|is
operator|.
name|readInt
argument_list|()
decl_stmt|;
name|byte
name|nameType
init|=
name|is
operator|.
name|readByte
argument_list|()
decl_stmt|;
name|int
name|occurrences
init|=
name|is
operator|.
name|readInt
argument_list|()
decl_stmt|;
comment|//Read (variable) length of node IDs + frequency + offsets
name|int
name|length
init|=
name|is
operator|.
name|readFixedInt
argument_list|()
decl_stmt|;
name|DocumentImpl
name|storedDocument
init|=
name|docs
operator|.
name|getDoc
argument_list|(
name|storedDocId
argument_list|)
decl_stmt|;
comment|//Exit if the document is not concerned
if|if
condition|(
name|storedDocument
operator|==
literal|null
condition|)
block|{
name|is
operator|.
name|skipBytes
argument_list|(
name|length
argument_list|)
expr_stmt|;
continue|continue;
block|}
name|NodeId
name|previous
init|=
literal|null
decl_stmt|;
for|for
control|(
name|int
name|m
init|=
literal|0
init|;
name|m
operator|<
name|occurrences
condition|;
name|m
operator|++
control|)
block|{
name|NodeId
name|nodeId
init|=
name|index
operator|.
name|getBrokerPool
argument_list|()
operator|.
name|getNodeFactory
argument_list|()
operator|.
name|createFromStream
argument_list|(
name|previous
argument_list|,
name|is
argument_list|)
decl_stmt|;
name|previous
operator|=
name|nodeId
expr_stmt|;
name|int
name|freq
init|=
name|is
operator|.
name|readInt
argument_list|()
decl_stmt|;
name|NodeProxy
name|nodeProxy
init|=
operator|new
name|NodeProxy
argument_list|(
name|storedDocument
argument_list|,
name|nodeId
argument_list|,
name|nameTypeToNodeType
argument_list|(
name|nameType
argument_list|)
argument_list|)
decl_stmt|;
comment|// if a context set is specified, we can directly check if the
comment|// matching node is a descendant of one of the nodes
comment|// in the context set.
if|if
condition|(
name|contextSet
operator|!=
literal|null
condition|)
block|{
name|int
name|sizeHint
init|=
name|contextSet
operator|.
name|getSizeHint
argument_list|(
name|storedDocument
argument_list|)
decl_stmt|;
if|if
condition|(
name|returnAncestor
condition|)
block|{
name|NodeProxy
name|parentNode
init|=
name|contextSet
operator|.
name|parentWithChild
argument_list|(
name|nodeProxy
argument_list|,
literal|false
argument_list|,
literal|true
argument_list|,
name|NodeProxy
operator|.
name|UNKNOWN_NODE_LEVEL
argument_list|)
decl_stmt|;
if|if
condition|(
name|parentNode
operator|!=
literal|null
condition|)
block|{
name|readMatches
argument_list|(
name|ngram
argument_list|,
name|is
argument_list|,
name|nodeId
argument_list|,
name|freq
argument_list|,
name|parentNode
argument_list|)
expr_stmt|;
name|resultSet
operator|.
name|add
argument_list|(
name|parentNode
argument_list|,
name|sizeHint
argument_list|)
expr_stmt|;
block|}
else|else
name|is
operator|.
name|skip
argument_list|(
name|freq
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|readMatches
argument_list|(
name|ngram
argument_list|,
name|is
argument_list|,
name|nodeId
argument_list|,
name|freq
argument_list|,
name|nodeProxy
argument_list|)
expr_stmt|;
name|resultSet
operator|.
name|add
argument_list|(
name|nodeProxy
argument_list|,
name|sizeHint
argument_list|)
expr_stmt|;
block|}
comment|// otherwise, we add all text nodes without check
block|}
else|else
block|{
name|readMatches
argument_list|(
name|ngram
argument_list|,
name|is
argument_list|,
name|nodeId
argument_list|,
name|freq
argument_list|,
name|nodeProxy
argument_list|)
expr_stmt|;
name|resultSet
operator|.
name|add
argument_list|(
name|nodeProxy
argument_list|,
name|Constants
operator|.
name|NO_SIZE_HINT
argument_list|)
expr_stmt|;
block|}
name|context
operator|.
name|proceed
argument_list|()
expr_stmt|;
block|}
block|}
return|return
literal|false
return|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|error
argument_list|(
name|e
operator|.
name|getMessage
argument_list|()
argument_list|,
name|e
argument_list|)
expr_stmt|;
return|return
literal|true
return|;
block|}
block|}
specifier|private
name|short
name|nameTypeToNodeType
parameter_list|(
specifier|final
name|byte
name|nameType
parameter_list|)
block|{
switch|switch
condition|(
name|nameType
condition|)
block|{
case|case
name|ElementValue
operator|.
name|ELEMENT
case|:
return|return
name|Node
operator|.
name|ELEMENT_NODE
return|;
case|case
name|ElementValue
operator|.
name|ATTRIBUTE
case|:
return|return
name|Node
operator|.
name|ATTRIBUTE_NODE
return|;
case|case
name|ElementValue
operator|.
name|UNKNOWN
case|:
default|default:
return|return
name|NodeProxy
operator|.
name|UNKNOWN_NODE_TYPE
return|;
block|}
block|}
specifier|private
name|void
name|readMatches
parameter_list|(
name|String
name|current
parameter_list|,
name|VariableByteInput
name|is
parameter_list|,
name|NodeId
name|nodeId
parameter_list|,
name|int
name|freq
parameter_list|,
name|NodeProxy
name|parentNode
parameter_list|)
throws|throws
name|IOException
block|{
name|int
name|diff
init|=
literal|0
decl_stmt|;
if|if
condition|(
name|current
operator|.
name|length
argument_list|()
operator|>
name|ngram
operator|.
name|length
argument_list|()
condition|)
name|diff
operator|=
name|current
operator|.
name|lastIndexOf
argument_list|(
name|ngram
argument_list|)
expr_stmt|;
name|Match
name|match
init|=
operator|new
name|NGramMatch
argument_list|(
name|contextId
argument_list|,
name|nodeId
argument_list|,
name|ngram
argument_list|,
name|freq
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|n
init|=
literal|0
init|;
name|n
operator|<
name|freq
condition|;
name|n
operator|++
control|)
block|{
name|int
name|offset
init|=
name|is
operator|.
name|readInt
argument_list|()
decl_stmt|;
if|if
condition|(
name|diff
operator|>
literal|0
condition|)
name|offset
operator|+=
name|diff
expr_stmt|;
name|match
operator|.
name|addOffset
argument_list|(
name|offset
argument_list|,
name|ngram
operator|.
name|length
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|parentNode
operator|.
name|addMatch
argument_list|(
name|match
argument_list|)
expr_stmt|;
block|}
block|}
specifier|private
specifier|final
class|class
name|IndexScanCallback
implements|implements
name|BTreeCallback
block|{
specifier|private
specifier|final
name|DocumentSet
name|docs
decl_stmt|;
specifier|private
name|NodeSet
name|contextSet
decl_stmt|;
specifier|private
specifier|final
name|Map
argument_list|<
name|String
argument_list|,
name|Occurrences
argument_list|>
name|map
init|=
operator|new
name|TreeMap
argument_list|<
name|String
argument_list|,
name|Occurrences
argument_list|>
argument_list|()
decl_stmt|;
comment|//IndexScanCallback(DocumentSet docs) {
comment|//this.docs = docs;
comment|//}
name|IndexScanCallback
parameter_list|(
name|DocumentSet
name|docs
parameter_list|,
name|NodeSet
name|contextSet
parameter_list|)
block|{
name|this
operator|.
name|docs
operator|=
name|docs
expr_stmt|;
name|this
operator|.
name|contextSet
operator|=
name|contextSet
expr_stmt|;
block|}
comment|/* (non-Javadoc)          * @see org.dbxml.core.filer.BTreeCallback#indexInfo(org.dbxml.core.data.Value, long)          */
annotation|@
name|Override
specifier|public
name|boolean
name|indexInfo
parameter_list|(
name|Value
name|key
parameter_list|,
name|long
name|pointer
parameter_list|)
throws|throws
name|TerminatedException
block|{
name|String
name|term
init|=
operator|new
name|String
argument_list|(
name|key
operator|.
name|getData
argument_list|()
argument_list|,
name|NGramQNameKey
operator|.
name|NGRAM_OFFSET
argument_list|,
name|key
operator|.
name|getLength
argument_list|()
operator|-
name|NGramQNameKey
operator|.
name|NGRAM_OFFSET
argument_list|,
name|UTF_8
argument_list|)
decl_stmt|;
name|VariableByteInput
name|is
decl_stmt|;
try|try
block|{
name|is
operator|=
name|index
operator|.
name|db
operator|.
name|getAsStream
argument_list|(
name|pointer
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|error
argument_list|(
name|e
operator|.
name|getMessage
argument_list|()
argument_list|,
name|e
argument_list|)
expr_stmt|;
return|return
literal|true
return|;
block|}
try|try
block|{
while|while
condition|(
name|is
operator|.
name|available
argument_list|()
operator|>
literal|0
condition|)
block|{
name|boolean
name|docAdded
init|=
literal|false
decl_stmt|;
name|int
name|storedDocId
init|=
name|is
operator|.
name|readInt
argument_list|()
decl_stmt|;
name|byte
name|nameType
init|=
name|is
operator|.
name|readByte
argument_list|()
decl_stmt|;
name|int
name|occurrences
init|=
name|is
operator|.
name|readInt
argument_list|()
decl_stmt|;
comment|//Read (variable) length of node IDs + frequency + offsets
name|int
name|length
init|=
name|is
operator|.
name|readFixedInt
argument_list|()
decl_stmt|;
name|DocumentImpl
name|storedDocument
init|=
name|docs
operator|.
name|getDoc
argument_list|(
name|storedDocId
argument_list|)
decl_stmt|;
comment|//Exit if the document is not concerned
if|if
condition|(
name|storedDocument
operator|==
literal|null
condition|)
block|{
name|is
operator|.
name|skipBytes
argument_list|(
name|length
argument_list|)
expr_stmt|;
continue|continue;
block|}
name|NodeId
name|previous
init|=
literal|null
decl_stmt|;
for|for
control|(
name|int
name|m
init|=
literal|0
init|;
name|m
operator|<
name|occurrences
condition|;
name|m
operator|++
control|)
block|{
name|NodeId
name|nodeId
init|=
name|index
operator|.
name|getBrokerPool
argument_list|()
operator|.
name|getNodeFactory
argument_list|()
operator|.
name|createFromStream
argument_list|(
name|previous
argument_list|,
name|is
argument_list|)
decl_stmt|;
name|previous
operator|=
name|nodeId
expr_stmt|;
name|int
name|freq
init|=
name|is
operator|.
name|readInt
argument_list|()
decl_stmt|;
name|is
operator|.
name|skip
argument_list|(
name|freq
argument_list|)
expr_stmt|;
name|boolean
name|include
init|=
literal|true
decl_stmt|;
comment|//TODO : revisit
if|if
condition|(
name|contextSet
operator|!=
literal|null
condition|)
block|{
name|NodeProxy
name|parentNode
init|=
name|contextSet
operator|.
name|parentWithChild
argument_list|(
name|storedDocument
argument_list|,
name|nodeId
argument_list|,
literal|false
argument_list|,
literal|true
argument_list|)
decl_stmt|;
name|include
operator|=
operator|(
name|parentNode
operator|!=
literal|null
operator|)
expr_stmt|;
block|}
if|if
condition|(
name|include
condition|)
block|{
name|Occurrences
name|oc
init|=
name|map
operator|.
name|get
argument_list|(
name|term
argument_list|)
decl_stmt|;
if|if
condition|(
name|oc
operator|==
literal|null
condition|)
block|{
name|oc
operator|=
operator|new
name|Occurrences
argument_list|(
name|term
argument_list|)
expr_stmt|;
name|map
operator|.
name|put
argument_list|(
name|term
argument_list|,
name|oc
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
operator|!
name|docAdded
condition|)
block|{
name|oc
operator|.
name|addDocument
argument_list|(
name|storedDocument
argument_list|)
expr_stmt|;
name|docAdded
operator|=
literal|true
expr_stmt|;
block|}
name|oc
operator|.
name|addOccurrences
argument_list|(
name|freq
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|error
argument_list|(
name|e
operator|.
name|getMessage
argument_list|()
operator|+
literal|" in '"
operator|+
name|index
operator|.
name|db
operator|.
name|getFile
argument_list|()
operator|.
name|getName
argument_list|()
operator|+
literal|"'"
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
return|return
literal|true
return|;
block|}
block|}
block|}
end_class

end_unit

