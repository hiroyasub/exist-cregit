begin_unit|revision:1.0.0;language:Java;cregit-version:0.0.1
begin_package
package|package
name|org
operator|.
name|exist
operator|.
name|xquery
operator|.
name|modules
operator|.
name|ngram
operator|.
name|utils
package|;
end_package

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|dom
operator|.
name|ExtArrayNodeSet
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|dom
operator|.
name|Match
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|dom
operator|.
name|NodeProxy
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|dom
operator|.
name|NodeSet
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|dom
operator|.
name|NodeSetIterator
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|xquery
operator|.
name|XPathException
import|;
end_import

begin_class
specifier|public
specifier|final
class|class
name|NodeSets
block|{
specifier|private
name|NodeSets
parameter_list|()
block|{
block|}
comment|/**      * Builds a new NodeSet by applying a function to all NodeProxys of the supplied NodeSet and returning all non-null      * results.      *       * @param nodes      *            the NodeSet containig the NodeProys to be transformed      * @param f      *            the function to be applied to all NodeProxys in nodes      * @return a new NodeSet containing the non-null results of f applied to the NodeProxys in nodes      * @throws XPathException      */
specifier|public
specifier|static
name|NodeSet
name|fmapNodes
parameter_list|(
specifier|final
name|NodeSet
name|nodes
parameter_list|,
specifier|final
name|F
argument_list|<
name|NodeProxy
argument_list|,
name|NodeProxy
argument_list|>
name|f
parameter_list|)
throws|throws
name|XPathException
block|{
name|NodeSet
name|result
init|=
operator|new
name|ExtArrayNodeSet
argument_list|()
decl_stmt|;
for|for
control|(
name|NodeSetIterator
name|iterator
init|=
name|nodes
operator|.
name|iterator
argument_list|()
init|;
name|iterator
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|NodeProxy
name|node
init|=
name|f
operator|.
name|f
argument_list|(
name|iterator
operator|.
name|next
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|node
operator|!=
literal|null
condition|)
name|result
operator|.
name|add
argument_list|(
name|node
argument_list|)
expr_stmt|;
block|}
name|result
operator|.
name|iterate
argument_list|()
expr_stmt|;
comment|// ensure result is ready to use
return|return
name|result
return|;
block|}
specifier|public
specifier|static
name|NodeSet
name|getNodesMatchingAtStart
parameter_list|(
specifier|final
name|NodeSet
name|nodes
parameter_list|,
specifier|final
name|int
name|expressionId
parameter_list|)
throws|throws
name|XPathException
block|{
return|return
name|fmapNodes
argument_list|(
name|nodes
argument_list|,
operator|new
name|F
argument_list|<
name|NodeProxy
argument_list|,
name|NodeProxy
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|NodeProxy
name|f
parameter_list|(
name|NodeProxy
name|a
parameter_list|)
block|{
return|return
name|NodeProxies
operator|.
name|fmapOwnMatches
argument_list|(
name|a
argument_list|,
operator|new
name|F
argument_list|<
name|Match
argument_list|,
name|Match
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|Match
name|f
parameter_list|(
name|Match
name|a
parameter_list|)
block|{
return|return
name|a
operator|.
name|filterOffsetsStartingAt
argument_list|(
literal|0
argument_list|)
return|;
block|}
block|}
argument_list|,
name|expressionId
argument_list|)
return|;
block|}
block|}
argument_list|)
return|;
block|}
specifier|public
specifier|static
name|NodeSet
name|getNodesMatchingAtEnd
parameter_list|(
specifier|final
name|NodeSet
name|nodes
parameter_list|,
specifier|final
name|int
name|expressionId
parameter_list|)
throws|throws
name|XPathException
block|{
return|return
name|fmapNodes
argument_list|(
name|nodes
argument_list|,
operator|new
name|F
argument_list|<
name|NodeProxy
argument_list|,
name|NodeProxy
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|NodeProxy
name|f
parameter_list|(
name|NodeProxy
name|a
parameter_list|)
block|{
specifier|final
name|int
name|len
init|=
name|a
operator|.
name|getNodeValue
argument_list|()
operator|.
name|length
argument_list|()
decl_stmt|;
return|return
name|NodeProxies
operator|.
name|fmapOwnMatches
argument_list|(
name|a
argument_list|,
operator|new
name|F
argument_list|<
name|Match
argument_list|,
name|Match
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|Match
name|f
parameter_list|(
name|Match
name|a
parameter_list|)
block|{
return|return
name|a
operator|.
name|filterOffsetsEndingAt
argument_list|(
name|len
argument_list|)
return|;
block|}
block|}
argument_list|,
name|expressionId
argument_list|)
return|;
block|}
block|}
argument_list|)
return|;
block|}
block|}
end_class

end_unit

