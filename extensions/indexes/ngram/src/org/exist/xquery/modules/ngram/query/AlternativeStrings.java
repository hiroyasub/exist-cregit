begin_unit|revision:1.0.0;language:Java;cregit-version:0.0.1
begin_package
package|package
name|org
operator|.
name|exist
operator|.
name|xquery
operator|.
name|modules
operator|.
name|ngram
operator|.
name|query
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashSet
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Set
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|dom
operator|.
name|persistent
operator|.
name|DocumentSet
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|dom
operator|.
name|persistent
operator|.
name|ExtArrayNodeSet
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|dom
operator|.
name|persistent
operator|.
name|NodeSet
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|dom
operator|.
name|QName
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|indexing
operator|.
name|ngram
operator|.
name|NGramIndexWorker
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|xquery
operator|.
name|XPathException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|xquery
operator|.
name|modules
operator|.
name|ngram
operator|.
name|NGramSearch
import|;
end_import

begin_class
specifier|public
class|class
name|AlternativeStrings
implements|implements
name|EvaluatableExpression
implements|,
name|MergeableExpression
block|{
comment|/**      *      */
specifier|private
specifier|final
name|NGramSearch
name|nGramSearch
decl_stmt|;
specifier|final
name|Set
argument_list|<
name|String
argument_list|>
name|strings
decl_stmt|;
specifier|public
name|AlternativeStrings
parameter_list|(
name|NGramSearch
name|nGramSearch
parameter_list|,
specifier|final
name|Set
argument_list|<
name|String
argument_list|>
name|strings
parameter_list|)
block|{
name|this
operator|.
name|nGramSearch
operator|=
name|nGramSearch
expr_stmt|;
name|this
operator|.
name|strings
operator|=
name|strings
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|NodeSet
name|eval
parameter_list|(
specifier|final
name|NGramIndexWorker
name|index
parameter_list|,
specifier|final
name|DocumentSet
name|docs
parameter_list|,
specifier|final
name|List
argument_list|<
name|QName
argument_list|>
name|qnames
parameter_list|,
specifier|final
name|NodeSet
name|nodeSet
parameter_list|,
specifier|final
name|int
name|axis
parameter_list|,
specifier|final
name|int
name|expressionId
parameter_list|)
throws|throws
name|XPathException
block|{
name|NodeSet
name|result
init|=
operator|new
name|ExtArrayNodeSet
argument_list|()
decl_stmt|;
for|for
control|(
name|String
name|s
range|:
name|strings
control|)
block|{
name|result
operator|.
name|addAll
argument_list|(
name|nGramSearch
operator|.
name|fixedStringSearch
argument_list|(
name|index
argument_list|,
name|docs
argument_list|,
name|qnames
argument_list|,
name|s
argument_list|,
name|nodeSet
argument_list|,
name|axis
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|result
operator|.
name|iterate
argument_list|()
expr_stmt|;
comment|// ensure result is ready to use
return|return
name|result
return|;
block|}
annotation|@
name|Override
specifier|public
name|String
name|toString
parameter_list|()
block|{
name|StringBuilder
name|builder
init|=
operator|new
name|StringBuilder
argument_list|(
literal|"AlternativeStrings("
argument_list|)
decl_stmt|;
for|for
control|(
name|String
name|str
range|:
name|strings
control|)
block|{
name|builder
operator|.
name|append
argument_list|(
literal|", "
argument_list|)
expr_stmt|;
name|builder
operator|.
name|append
argument_list|(
name|str
argument_list|)
expr_stmt|;
block|}
name|builder
operator|.
name|append
argument_list|(
literal|")"
argument_list|)
expr_stmt|;
return|return
name|builder
operator|.
name|toString
argument_list|()
return|;
block|}
annotation|@
name|Override
specifier|public
name|AlternativeStrings
name|mergeWith
parameter_list|(
specifier|final
name|WildcardedExpression
name|otherExpression
parameter_list|)
block|{
name|Set
argument_list|<
name|String
argument_list|>
name|concatenatedStrings
init|=
literal|null
decl_stmt|;
if|if
condition|(
name|otherExpression
operator|instanceof
name|FixedString
condition|)
block|{
name|FixedString
name|fixedString
init|=
operator|(
name|FixedString
operator|)
name|otherExpression
decl_stmt|;
name|concatenatedStrings
operator|=
operator|new
name|HashSet
argument_list|<
name|String
argument_list|>
argument_list|(
name|strings
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
for|for
control|(
name|String
name|s
range|:
name|strings
control|)
name|concatenatedStrings
operator|.
name|add
argument_list|(
name|s
operator|+
name|fixedString
operator|.
name|fixedString
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|AlternativeStrings
name|otherAlternatives
init|=
operator|(
name|AlternativeStrings
operator|)
name|otherExpression
decl_stmt|;
name|concatenatedStrings
operator|=
operator|new
name|HashSet
argument_list|<
name|String
argument_list|>
argument_list|(
name|strings
operator|.
name|size
argument_list|()
operator|*
name|otherAlternatives
operator|.
name|strings
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
for|for
control|(
name|String
name|s
range|:
name|strings
control|)
for|for
control|(
name|String
name|os
range|:
name|otherAlternatives
operator|.
name|strings
control|)
name|concatenatedStrings
operator|.
name|add
argument_list|(
name|s
operator|+
name|os
argument_list|)
expr_stmt|;
block|}
return|return
operator|new
name|AlternativeStrings
argument_list|(
name|this
operator|.
name|nGramSearch
argument_list|,
name|concatenatedStrings
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|mergeableWith
parameter_list|(
specifier|final
name|WildcardedExpression
name|otherExpression
parameter_list|)
block|{
return|return
operator|(
operator|(
name|otherExpression
operator|instanceof
name|FixedString
operator|)
operator|||
operator|(
name|otherExpression
operator|instanceof
name|AlternativeStrings
operator|)
operator|)
return|;
block|}
block|}
end_class

end_unit

