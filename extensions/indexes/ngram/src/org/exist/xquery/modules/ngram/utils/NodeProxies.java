begin_unit|revision:1.0.0;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  *  eXist Open Source Native XML Database  *  Copyright (C) 2001-2015 The eXist Project  *  http://exist-db.org  *  *  This program is free software; you can redistribute it and/or  *  modify it under the terms of the GNU Lesser General Public License  *  as published by the Free Software Foundation; either version 2  *  of the License, or (at your option) any later version.  *  *  This program is distributed in the hope that it will be useful,  *  but WITHOUT ANY WARRANTY; without even the implied warranty of  *  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the  *  GNU Lesser General Public License for more details.  *  *  You should have received a copy of the GNU Lesser General Public  *  License along with this library; if not, write to the Free Software  *  Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA  02110-1301  USA  */
end_comment

begin_package
package|package
name|org
operator|.
name|exist
operator|.
name|xquery
operator|.
name|modules
operator|.
name|ngram
operator|.
name|utils
package|;
end_package

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|dom
operator|.
name|persistent
operator|.
name|Match
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|dom
operator|.
name|persistent
operator|.
name|NodeProxy
import|;
end_import

begin_class
specifier|public
specifier|final
class|class
name|NodeProxies
block|{
specifier|private
name|NodeProxies
parameter_list|()
block|{
block|}
comment|/**      * Filters the full-text matches on the supplied node, leaving only those for which the predicate is true.      *      * @param node      *            the node whose full-text matches are to be filtered      * @param predicate      *            the predicate based on which the full-text matches are filtered: If the predicate returns true the      *            match stays, if not the match is removed.      */
specifier|public
specifier|static
name|void
name|filterMatches
parameter_list|(
specifier|final
name|NodeProxy
name|node
parameter_list|,
specifier|final
name|F
argument_list|<
name|Match
argument_list|,
name|Boolean
argument_list|>
name|predicate
parameter_list|)
block|{
name|Match
name|m
init|=
name|node
operator|.
name|getMatches
argument_list|()
decl_stmt|;
name|node
operator|.
name|setMatches
argument_list|(
literal|null
argument_list|)
expr_stmt|;
while|while
condition|(
name|m
operator|!=
literal|null
condition|)
block|{
if|if
condition|(
name|predicate
operator|.
name|f
argument_list|(
name|m
argument_list|)
operator|.
name|booleanValue
argument_list|()
condition|)
name|node
operator|.
name|addMatch
argument_list|(
name|m
argument_list|)
expr_stmt|;
name|m
operator|=
name|m
operator|.
name|getNextMatch
argument_list|()
expr_stmt|;
block|}
block|}
comment|/**      * Applies a supplied function to all matches with the supplied expression id on the supplied NodeProxy and returns      * the NodeProxy with the modified matches if at least one match with the supplied expression id was not transformed      * to null or null otherwise.      *      * @param node      *            the NodeProxy to modify      * @param f      *            the function to apply to all matches with the supplied expression id      * @param ownExpressionId      *            the expression id of the matches to be transformed      * @return the modified node if at least one match with the supplied expression id was not transformed to null or      *         null otherwise      */
specifier|public
specifier|static
name|NodeProxy
name|fmapOwnMatches
parameter_list|(
specifier|final
name|NodeProxy
name|node
parameter_list|,
specifier|final
name|F
argument_list|<
name|Match
argument_list|,
name|Match
argument_list|>
name|f
parameter_list|,
name|int
name|ownExpressionId
parameter_list|)
block|{
name|Match
name|m
init|=
name|node
operator|.
name|getMatches
argument_list|()
decl_stmt|;
name|node
operator|.
name|setMatches
argument_list|(
literal|null
argument_list|)
expr_stmt|;
name|boolean
name|ownMatch
init|=
literal|false
decl_stmt|;
while|while
condition|(
name|m
operator|!=
literal|null
condition|)
block|{
if|if
condition|(
name|m
operator|.
name|getContextId
argument_list|()
operator|!=
name|ownExpressionId
condition|)
block|{
name|node
operator|.
name|addMatch
argument_list|(
name|m
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|Match
name|nm
init|=
name|f
operator|.
name|f
argument_list|(
name|m
argument_list|)
decl_stmt|;
if|if
condition|(
name|nm
operator|!=
literal|null
condition|)
block|{
name|node
operator|.
name|addMatch
argument_list|(
name|nm
argument_list|)
expr_stmt|;
name|ownMatch
operator|=
literal|true
expr_stmt|;
block|}
block|}
name|m
operator|=
name|m
operator|.
name|getNextMatch
argument_list|()
expr_stmt|;
block|}
if|if
condition|(
name|ownMatch
condition|)
return|return
name|node
return|;
else|else
return|return
literal|null
return|;
block|}
block|}
end_class

end_unit

