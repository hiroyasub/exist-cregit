begin_unit|revision:1.0.0;language:Java;cregit-version:0.0.1
begin_package
package|package
name|org
operator|.
name|exist
operator|.
name|xquery
operator|.
name|modules
operator|.
name|ngram
operator|.
name|query
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|log4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|dom
operator|.
name|persistent
operator|.
name|DocumentSet
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|dom
operator|.
name|persistent
operator|.
name|Match
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|dom
operator|.
name|persistent
operator|.
name|NodeProxy
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|dom
operator|.
name|persistent
operator|.
name|NodeSet
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|dom
operator|.
name|persistent
operator|.
name|QName
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|indexing
operator|.
name|ngram
operator|.
name|NGramIndexWorker
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|xquery
operator|.
name|XPathException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|xquery
operator|.
name|modules
operator|.
name|ngram
operator|.
name|utils
operator|.
name|F
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|xquery
operator|.
name|modules
operator|.
name|ngram
operator|.
name|utils
operator|.
name|NodeProxies
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|xquery
operator|.
name|modules
operator|.
name|ngram
operator|.
name|utils
operator|.
name|NodeSets
import|;
end_import

begin_class
specifier|public
class|class
name|WildcardedExpressionTriple
implements|implements
name|EvaluatableExpression
block|{
comment|/**      *      */
specifier|private
specifier|final
name|EvaluatableExpression
name|head
decl_stmt|;
specifier|private
specifier|final
name|Wildcard
name|wildcard
decl_stmt|;
specifier|private
specifier|final
name|EvaluatableExpression
name|tail
decl_stmt|;
specifier|protected
specifier|static
name|Logger
name|LOG
init|=
name|Logger
operator|.
name|getLogger
argument_list|(
name|WildcardedExpressionTriple
operator|.
name|class
argument_list|)
decl_stmt|;
specifier|public
name|WildcardedExpressionTriple
parameter_list|(
specifier|final
name|EvaluatableExpression
name|head
parameter_list|,
specifier|final
name|Wildcard
name|wildcard
parameter_list|,
specifier|final
name|EvaluatableExpression
name|tail
parameter_list|)
block|{
name|this
operator|.
name|head
operator|=
name|head
expr_stmt|;
name|this
operator|.
name|wildcard
operator|=
name|wildcard
expr_stmt|;
name|this
operator|.
name|tail
operator|=
name|tail
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|NodeSet
name|eval
parameter_list|(
specifier|final
name|NGramIndexWorker
name|index
parameter_list|,
specifier|final
name|DocumentSet
name|docs
parameter_list|,
specifier|final
name|List
argument_list|<
name|QName
argument_list|>
name|qnames
parameter_list|,
specifier|final
name|NodeSet
name|nodeSet
parameter_list|,
specifier|final
name|int
name|axis
parameter_list|,
specifier|final
name|int
name|expressionId
parameter_list|)
throws|throws
name|XPathException
block|{
specifier|final
name|NodeSet
name|headNodes
init|=
name|head
operator|.
name|eval
argument_list|(
name|index
argument_list|,
name|docs
argument_list|,
name|qnames
argument_list|,
name|nodeSet
argument_list|,
name|axis
argument_list|,
name|expressionId
argument_list|)
decl_stmt|;
if|if
condition|(
name|headNodes
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
return|return
name|headNodes
return|;
block|}
specifier|final
name|NodeSet
name|tailNodes
init|=
name|tail
operator|.
name|eval
argument_list|(
name|index
argument_list|,
name|docs
argument_list|,
name|qnames
argument_list|,
name|nodeSet
argument_list|,
name|axis
argument_list|,
name|expressionId
argument_list|)
decl_stmt|;
if|if
condition|(
name|tailNodes
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
return|return
name|tailNodes
return|;
block|}
name|NodeSet
name|result
init|=
name|NodeSets
operator|.
name|fmapNodes
argument_list|(
name|headNodes
argument_list|,
operator|new
name|F
argument_list|<
name|NodeProxy
argument_list|,
name|NodeProxy
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|NodeProxy
name|f
parameter_list|(
name|NodeProxy
name|headNode
parameter_list|)
block|{
name|NodeProxy
name|tailNode
init|=
name|tailNodes
operator|.
name|get
argument_list|(
name|headNode
argument_list|)
decl_stmt|;
if|if
condition|(
name|tailNode
operator|!=
literal|null
condition|)
block|{
return|return
name|getMatchingNode
argument_list|(
name|headNode
argument_list|,
name|tailNode
argument_list|,
name|expressionId
argument_list|)
return|;
block|}
else|else
block|{
return|return
literal|null
return|;
block|}
block|}
block|}
argument_list|)
decl_stmt|;
return|return
name|result
return|;
block|}
specifier|private
name|NodeProxy
name|getMatchingNode
parameter_list|(
name|NodeProxy
name|headNode
parameter_list|,
name|NodeProxy
name|tailNode
parameter_list|,
specifier|final
name|int
name|expressionId
parameter_list|)
block|{
name|NodeProxy
name|result
init|=
literal|null
decl_stmt|;
name|Match
name|match
init|=
literal|null
decl_stmt|;
name|boolean
name|found
init|=
literal|false
decl_stmt|;
for|for
control|(
name|Match
name|headMatch
init|=
name|headNode
operator|.
name|getMatches
argument_list|()
init|;
name|headMatch
operator|!=
literal|null
operator|&&
operator|!
name|found
condition|;
name|headMatch
operator|=
name|headMatch
operator|.
name|getNextMatch
argument_list|()
control|)
block|{
for|for
control|(
name|Match
name|tailMatch
init|=
name|tailNode
operator|.
name|getMatches
argument_list|()
init|;
name|tailMatch
operator|!=
literal|null
operator|&&
operator|!
name|found
condition|;
name|tailMatch
operator|=
name|tailMatch
operator|.
name|getNextMatch
argument_list|()
control|)
block|{
name|match
operator|=
name|headMatch
operator|.
name|followedBy
argument_list|(
name|tailMatch
argument_list|,
name|wildcard
operator|.
name|getMinimumLength
argument_list|()
argument_list|,
name|wildcard
operator|.
name|getMaximumLength
argument_list|()
argument_list|)
expr_stmt|;
name|found
operator|=
operator|(
name|match
operator|!=
literal|null
operator|)
expr_stmt|;
block|}
block|}
comment|// preserve other matches, add new match
if|if
condition|(
name|found
condition|)
block|{
comment|// Remove own (partial) matches and add new complete match
name|NodeProxies
operator|.
name|filterMatches
argument_list|(
name|tailNode
argument_list|,
operator|new
name|F
argument_list|<
name|Match
argument_list|,
name|Boolean
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|Boolean
name|f
parameter_list|(
name|Match
name|a
parameter_list|)
block|{
return|return
name|a
operator|.
name|getContextId
argument_list|()
operator|!=
name|expressionId
return|;
block|}
block|}
argument_list|)
expr_stmt|;
name|tailNode
operator|.
name|addMatch
argument_list|(
name|match
argument_list|)
expr_stmt|;
name|result
operator|=
name|tailNode
expr_stmt|;
block|}
return|return
name|result
return|;
block|}
annotation|@
name|Override
specifier|public
name|String
name|toString
parameter_list|()
block|{
return|return
literal|"WildcardedExpressionTriple("
operator|+
name|head
operator|+
literal|", "
operator|+
name|wildcard
operator|+
literal|", "
operator|+
name|tail
operator|+
literal|")"
return|;
block|}
block|}
end_class

end_unit

