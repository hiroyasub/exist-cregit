begin_unit|revision:1.0.0;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  *  eXist Open Source Native XML Database  *  Copyright (C) 2001-2015 The eXist Project  *  http://exist-db.org  *  *  This program is free software; you can redistribute it and/or  *  modify it under the terms of the GNU Lesser General Public License  *  as published by the Free Software Foundation; either version 2  *  of the License, or (at your option) any later version.  *  *  This program is distributed in the hope that it will be useful,  *  but WITHOUT ANY WARRANTY; without even the implied warranty of  *  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the  *  GNU Lesser General Public License for more details.  *  *  You should have received a copy of the GNU Lesser General Public  *  License along with this library; if not, write to the Free Software  *  Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA  02110-1301  USA  */
end_comment

begin_package
package|package
name|org
operator|.
name|exist
operator|.
name|indexing
operator|.
name|ngram
package|;
end_package

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertEquals
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertNotNull
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertTrue
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Optional
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Properties
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|xml
operator|.
name|transform
operator|.
name|OutputKeys
import|;
end_import

begin_import
import|import
name|org
operator|.
name|custommonkey
operator|.
name|xmlunit
operator|.
name|NamespaceContext
import|;
end_import

begin_import
import|import
name|org
operator|.
name|custommonkey
operator|.
name|xmlunit
operator|.
name|SimpleNamespaceContext
import|;
end_import

begin_import
import|import
name|org
operator|.
name|custommonkey
operator|.
name|xmlunit
operator|.
name|XMLAssert
import|;
end_import

begin_import
import|import
name|org
operator|.
name|custommonkey
operator|.
name|xmlunit
operator|.
name|XMLUnit
import|;
end_import

begin_import
import|import
name|org
operator|.
name|custommonkey
operator|.
name|xmlunit
operator|.
name|XpathEngine
import|;
end_import

begin_import
import|import
name|org
operator|.
name|custommonkey
operator|.
name|xmlunit
operator|.
name|exceptions
operator|.
name|XpathException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|EXistException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|collections
operator|.
name|Collection
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|collections
operator|.
name|CollectionConfigurationException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|collections
operator|.
name|CollectionConfigurationManager
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|collections
operator|.
name|IndexInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|collections
operator|.
name|triggers
operator|.
name|TriggerException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|security
operator|.
name|PermissionDeniedException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|storage
operator|.
name|BrokerPool
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|storage
operator|.
name|DBBroker
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|storage
operator|.
name|serializers
operator|.
name|EXistOutputKeys
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|storage
operator|.
name|serializers
operator|.
name|Serializer
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|storage
operator|.
name|txn
operator|.
name|TransactionManager
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|storage
operator|.
name|txn
operator|.
name|Txn
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|test
operator|.
name|ExistEmbeddedServer
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|test
operator|.
name|TestConstants
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|util
operator|.
name|DatabaseConfigurationException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|util
operator|.
name|LockException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|xmldb
operator|.
name|XmldbURI
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|xquery
operator|.
name|XPathException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|xquery
operator|.
name|XQuery
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|xquery
operator|.
name|value
operator|.
name|NodeValue
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|xquery
operator|.
name|value
operator|.
name|Sequence
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|AfterClass
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|BeforeClass
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|ClassRule
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_import
import|import
name|org
operator|.
name|w3c
operator|.
name|dom
operator|.
name|NodeList
import|;
end_import

begin_import
import|import
name|org
operator|.
name|xml
operator|.
name|sax
operator|.
name|SAXException
import|;
end_import

begin_class
specifier|public
class|class
name|MatchListenerTest
block|{
specifier|private
specifier|static
name|String
name|XML
init|=
literal|"<root>"
operator|+
literal|"<para>some paragraph with<hi>mixed</hi> content.</para>"
operator|+
literal|"<para>another paragraph with<note><hi>nested</hi> inner</note> elements.</para>"
operator|+
literal|"<para>a third paragraph with<term>term</term>.</para>"
operator|+
literal|"<para>double match double match</para>"
operator|+
literal|"<para>abaaba</para>"
operator|+
literal|"<para>aaa aaa aaa</para>"
operator|+
literal|"<para>Where did all the *s go?</para>"
operator|+
literal|"<para>aaacaaa</para>"
operator|+
literal|"<para>test]test test[test test?test</para>"
operator|+
literal|"<para>a simple paragraph</para>"
operator|+
literal|"<para>ucjkewbuwdcoikjewkj</para><para>ucjkewboislksoikjewkj</para><para>ucjkewbsdcoikjewkj</para><para>ucjkewbaaasaaacoikjewkj</para>"
operator|+
literal|"</root>"
decl_stmt|;
specifier|private
specifier|static
name|String
name|XML2
init|=
literal|"<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n"
operator|+
literal|"<p xmlns=\"http://www.tei-c.org/ns/1.0\" xml:id=\"pT01p0257c1501\">ç¾ææä¸­ãæä¸å°èãåæ°é¾è­·ãæå·å¯¶æã \n"
operator|+
literal|"<lb n=\"0257c16\" ed=\"T\"/>ä¾ç«ä½å´ãæå°èé¾è­·ç½ä½è¨ãä¸å°ãæè¦ \n"
operator|+
literal|"<lb n=\"0257c17\" ed=\"T\"/>è«¸éªå¤éå°¼ä¹¾å­ç­ãæ¼ä½ä¸å°ãåä¸èµ·ä¿¡ã \n"
operator|+
literal|"<lb n=\"0257c18\" ed=\"T\"/>å¯æ¼éªéãç«¶èªªåè½ãæ¯ææä»å»ºç«è¡¨å \n"
operator|+
literal|"<lb n=\"0257c19\" ed=\"T\"/>å®£ç¤ºæ¼ä¸ãå¸ä½¿èç¥ä½ååå¾·ãæ¼ä½ä¸å°ãæ¯ \n"
operator|+
literal|"<lb n=\"0257c20\" ed=\"T\"/>å¤§ä¸å¤«ãæå°æä¸ãç¡æç­èã\n"
operator|+
literal|"</p>"
decl_stmt|;
specifier|private
specifier|static
name|String
name|CONF1
init|=
literal|"<collection xmlns=\"http://exist-db.org/collection-config/1.0\">"
operator|+
literal|"<index>"
operator|+
literal|"<ngram qname=\"para\"/>"
operator|+
literal|"<ngram qname=\"term\"/>"
operator|+
literal|"</index>"
operator|+
literal|"</collection>"
decl_stmt|;
specifier|private
specifier|static
name|String
name|CONF2
init|=
literal|"<collection xmlns=\"http://exist-db.org/collection-config/1.0\">"
operator|+
literal|"<index>"
operator|+
literal|"<ngram qname=\"note\"/>"
operator|+
literal|"</index>"
operator|+
literal|"</collection>"
decl_stmt|;
specifier|private
specifier|static
name|String
name|CONF3
init|=
literal|"<collection xmlns=\"http://exist-db.org/collection-config/1.0\">"
operator|+
literal|"<index xmlns:tei=\"http://www.tei-c.org/ns/1.0\">"
operator|+
literal|"<ngram qname=\"tei:p\"/>"
operator|+
literal|"</index>"
operator|+
literal|"</collection>"
decl_stmt|;
specifier|private
specifier|static
name|String
name|MATCH_START
init|=
literal|"<exist:match xmlns:exist=\"http://exist.sourceforge.net/NS/exist\">"
decl_stmt|;
specifier|private
specifier|static
name|String
name|MATCH_END
init|=
literal|"</exist:match>"
decl_stmt|;
annotation|@
name|Test
specifier|public
name|void
name|nestedContent
parameter_list|()
throws|throws
name|PermissionDeniedException
throws|,
name|IOException
throws|,
name|LockException
throws|,
name|CollectionConfigurationException
throws|,
name|SAXException
throws|,
name|EXistException
throws|,
name|XPathException
block|{
name|configureAndStore
argument_list|(
name|CONF1
argument_list|,
name|XML
argument_list|)
expr_stmt|;
specifier|final
name|BrokerPool
name|pool
init|=
name|existEmbeddedServer
operator|.
name|getBrokerPool
argument_list|()
decl_stmt|;
try|try
init|(
specifier|final
name|DBBroker
name|broker
init|=
name|pool
operator|.
name|get
argument_list|(
name|Optional
operator|.
name|of
argument_list|(
name|pool
operator|.
name|getSecurityManager
argument_list|()
operator|.
name|getSystemSubject
argument_list|()
argument_list|)
argument_list|)
init|;
init|)
block|{
specifier|final
name|XQuery
name|xquery
init|=
name|pool
operator|.
name|getXQueryService
argument_list|()
decl_stmt|;
name|assertNotNull
argument_list|(
name|xquery
argument_list|)
expr_stmt|;
name|Sequence
name|seq
init|=
name|xquery
operator|.
name|execute
argument_list|(
name|broker
argument_list|,
literal|"//para[ngram:contains(., 'mixed')]"
argument_list|,
literal|null
argument_list|)
decl_stmt|;
name|assertNotNull
argument_list|(
name|seq
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|seq
operator|.
name|getItemCount
argument_list|()
argument_list|)
expr_stmt|;
name|String
name|result
init|=
name|queryResult2String
argument_list|(
name|broker
argument_list|,
name|seq
argument_list|,
literal|0
argument_list|)
decl_stmt|;
name|XMLAssert
operator|.
name|assertEquals
argument_list|(
literal|"<para>some paragraph with<hi>"
operator|+
name|MATCH_START
operator|+
literal|"mixed"
operator|+
name|MATCH_END
operator|+
literal|"</hi> content.</para>"
argument_list|,
name|result
argument_list|)
expr_stmt|;
name|seq
operator|=
name|xquery
operator|.
name|execute
argument_list|(
name|broker
argument_list|,
literal|"//para[ngram:contains(., 'content')]"
argument_list|,
literal|null
argument_list|)
expr_stmt|;
name|assertNotNull
argument_list|(
name|seq
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|seq
operator|.
name|getItemCount
argument_list|()
argument_list|)
expr_stmt|;
name|result
operator|=
name|queryResult2String
argument_list|(
name|broker
argument_list|,
name|seq
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|XMLAssert
operator|.
name|assertEquals
argument_list|(
literal|"<para>some paragraph with<hi>mixed</hi> "
operator|+
name|MATCH_START
operator|+
literal|"content"
operator|+
name|MATCH_END
operator|+
literal|".</para>"
argument_list|,
name|result
argument_list|)
expr_stmt|;
name|seq
operator|=
name|xquery
operator|.
name|execute
argument_list|(
name|broker
argument_list|,
literal|"//para[ngram:contains(., 'nested')]"
argument_list|,
literal|null
argument_list|)
expr_stmt|;
name|assertNotNull
argument_list|(
name|seq
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|seq
operator|.
name|getItemCount
argument_list|()
argument_list|)
expr_stmt|;
name|result
operator|=
name|queryResult2String
argument_list|(
name|broker
argument_list|,
name|seq
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|XMLAssert
operator|.
name|assertEquals
argument_list|(
literal|"<para>another paragraph with<note><hi>"
operator|+
name|MATCH_START
operator|+
literal|"nested"
operator|+
name|MATCH_END
operator|+
literal|"</hi> inner</note> elements.</para>"
argument_list|,
name|result
argument_list|)
expr_stmt|;
name|seq
operator|=
name|xquery
operator|.
name|execute
argument_list|(
name|broker
argument_list|,
literal|"//para[ngram:contains(., 'content') and ngram:contains(., 'mixed')]"
argument_list|,
literal|null
argument_list|)
expr_stmt|;
name|assertNotNull
argument_list|(
name|seq
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|seq
operator|.
name|getItemCount
argument_list|()
argument_list|)
expr_stmt|;
name|result
operator|=
name|queryResult2String
argument_list|(
name|broker
argument_list|,
name|seq
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|XMLAssert
operator|.
name|assertEquals
argument_list|(
literal|"<para>some paragraph with<hi>"
operator|+
name|MATCH_START
operator|+
literal|"mixed"
operator|+
name|MATCH_END
operator|+
literal|"</hi> "
operator|+
name|MATCH_START
operator|+
literal|"content"
operator|+
name|MATCH_END
operator|+
literal|".</para>"
argument_list|,
name|result
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Test
specifier|public
name|void
name|matchInParent
parameter_list|()
throws|throws
name|PermissionDeniedException
throws|,
name|IOException
throws|,
name|LockException
throws|,
name|CollectionConfigurationException
throws|,
name|SAXException
throws|,
name|EXistException
throws|,
name|XPathException
block|{
name|configureAndStore
argument_list|(
name|CONF1
argument_list|,
name|XML
argument_list|)
expr_stmt|;
specifier|final
name|BrokerPool
name|pool
init|=
name|existEmbeddedServer
operator|.
name|getBrokerPool
argument_list|()
decl_stmt|;
try|try
init|(
specifier|final
name|DBBroker
name|broker
init|=
name|pool
operator|.
name|get
argument_list|(
name|Optional
operator|.
name|of
argument_list|(
name|pool
operator|.
name|getSecurityManager
argument_list|()
operator|.
name|getSystemSubject
argument_list|()
argument_list|)
argument_list|)
init|;
init|)
block|{
specifier|final
name|XQuery
name|xquery
init|=
name|pool
operator|.
name|getXQueryService
argument_list|()
decl_stmt|;
name|assertNotNull
argument_list|(
name|xquery
argument_list|)
expr_stmt|;
specifier|final
name|Sequence
name|seq
init|=
name|xquery
operator|.
name|execute
argument_list|(
name|broker
argument_list|,
literal|"//para[ngram:contains(., 'mixed')]/hi"
argument_list|,
literal|null
argument_list|)
decl_stmt|;
name|assertNotNull
argument_list|(
name|seq
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|seq
operator|.
name|getItemCount
argument_list|()
argument_list|)
expr_stmt|;
specifier|final
name|String
name|result
init|=
name|queryResult2String
argument_list|(
name|broker
argument_list|,
name|seq
argument_list|,
literal|0
argument_list|)
decl_stmt|;
name|XMLAssert
operator|.
name|assertEquals
argument_list|(
literal|"<hi>"
operator|+
name|MATCH_START
operator|+
literal|"mixed"
operator|+
name|MATCH_END
operator|+
literal|"</hi>"
argument_list|,
name|result
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Test
specifier|public
name|void
name|matchInAncestor
parameter_list|()
throws|throws
name|PermissionDeniedException
throws|,
name|IOException
throws|,
name|LockException
throws|,
name|CollectionConfigurationException
throws|,
name|SAXException
throws|,
name|EXistException
throws|,
name|XPathException
block|{
name|configureAndStore
argument_list|(
name|CONF1
argument_list|,
name|XML
argument_list|)
expr_stmt|;
specifier|final
name|BrokerPool
name|pool
init|=
name|existEmbeddedServer
operator|.
name|getBrokerPool
argument_list|()
decl_stmt|;
try|try
init|(
specifier|final
name|DBBroker
name|broker
init|=
name|pool
operator|.
name|get
argument_list|(
name|Optional
operator|.
name|of
argument_list|(
name|pool
operator|.
name|getSecurityManager
argument_list|()
operator|.
name|getSystemSubject
argument_list|()
argument_list|)
argument_list|)
init|;
init|)
block|{
specifier|final
name|XQuery
name|xquery
init|=
name|pool
operator|.
name|getXQueryService
argument_list|()
decl_stmt|;
name|assertNotNull
argument_list|(
name|xquery
argument_list|)
expr_stmt|;
name|Sequence
name|seq
init|=
name|xquery
operator|.
name|execute
argument_list|(
name|broker
argument_list|,
literal|"//para[ngram:contains(., 'nested')]/note"
argument_list|,
literal|null
argument_list|)
decl_stmt|;
name|assertNotNull
argument_list|(
name|seq
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|seq
operator|.
name|getItemCount
argument_list|()
argument_list|)
expr_stmt|;
name|String
name|result
init|=
name|queryResult2String
argument_list|(
name|broker
argument_list|,
name|seq
argument_list|,
literal|0
argument_list|)
decl_stmt|;
name|XMLAssert
operator|.
name|assertEquals
argument_list|(
literal|"<note><hi>"
operator|+
name|MATCH_START
operator|+
literal|"nested"
operator|+
name|MATCH_END
operator|+
literal|"</hi> inner</note>"
argument_list|,
name|result
argument_list|)
expr_stmt|;
name|seq
operator|=
name|xquery
operator|.
name|execute
argument_list|(
name|broker
argument_list|,
literal|"//para[ngram:contains(., 'nested')]//hi"
argument_list|,
literal|null
argument_list|)
expr_stmt|;
name|assertNotNull
argument_list|(
name|seq
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|seq
operator|.
name|getItemCount
argument_list|()
argument_list|)
expr_stmt|;
name|result
operator|=
name|queryResult2String
argument_list|(
name|broker
argument_list|,
name|seq
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|XMLAssert
operator|.
name|assertEquals
argument_list|(
literal|"<hi>"
operator|+
name|MATCH_START
operator|+
literal|"nested"
operator|+
name|MATCH_END
operator|+
literal|"</hi>"
argument_list|,
name|result
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Test
specifier|public
name|void
name|nestedIndex
parameter_list|()
throws|throws
name|PermissionDeniedException
throws|,
name|IOException
throws|,
name|LockException
throws|,
name|CollectionConfigurationException
throws|,
name|SAXException
throws|,
name|EXistException
throws|,
name|XPathException
block|{
name|configureAndStore
argument_list|(
name|CONF1
argument_list|,
name|XML
argument_list|)
expr_stmt|;
specifier|final
name|BrokerPool
name|pool
init|=
name|existEmbeddedServer
operator|.
name|getBrokerPool
argument_list|()
decl_stmt|;
try|try
init|(
specifier|final
name|DBBroker
name|broker
init|=
name|pool
operator|.
name|get
argument_list|(
name|Optional
operator|.
name|of
argument_list|(
name|pool
operator|.
name|getSecurityManager
argument_list|()
operator|.
name|getSystemSubject
argument_list|()
argument_list|)
argument_list|)
init|;
init|)
block|{
specifier|final
name|XQuery
name|xquery
init|=
name|pool
operator|.
name|getXQueryService
argument_list|()
decl_stmt|;
name|assertNotNull
argument_list|(
name|xquery
argument_list|)
expr_stmt|;
name|Sequence
name|seq
init|=
name|xquery
operator|.
name|execute
argument_list|(
name|broker
argument_list|,
literal|"//para[ngram:contains(term, 'term')]"
argument_list|,
literal|null
argument_list|)
decl_stmt|;
name|assertNotNull
argument_list|(
name|seq
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|seq
operator|.
name|getItemCount
argument_list|()
argument_list|)
expr_stmt|;
name|String
name|result
init|=
name|queryResult2String
argument_list|(
name|broker
argument_list|,
name|seq
argument_list|,
literal|0
argument_list|)
decl_stmt|;
name|XMLAssert
operator|.
name|assertEquals
argument_list|(
literal|"<para>a third paragraph with<term>"
operator|+
name|MATCH_START
operator|+
literal|"term"
operator|+
name|MATCH_END
operator|+
literal|"</term>.</para>"
argument_list|,
name|result
argument_list|)
expr_stmt|;
name|seq
operator|=
name|xquery
operator|.
name|execute
argument_list|(
name|broker
argument_list|,
literal|"//term[ngram:contains(., 'term')]/.."
argument_list|,
literal|null
argument_list|)
expr_stmt|;
name|assertNotNull
argument_list|(
name|seq
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|seq
operator|.
name|getItemCount
argument_list|()
argument_list|)
expr_stmt|;
name|result
operator|=
name|queryResult2String
argument_list|(
name|broker
argument_list|,
name|seq
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|XMLAssert
operator|.
name|assertEquals
argument_list|(
literal|"<para>a third paragraph with<term>"
operator|+
name|MATCH_START
operator|+
literal|"term"
operator|+
name|MATCH_END
operator|+
literal|"</term>.</para>"
argument_list|,
name|result
argument_list|)
expr_stmt|;
name|seq
operator|=
name|xquery
operator|.
name|execute
argument_list|(
name|broker
argument_list|,
literal|"//term[ngram:contains(., 'term')]/ancestor::para"
argument_list|,
literal|null
argument_list|)
expr_stmt|;
name|assertNotNull
argument_list|(
name|seq
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|seq
operator|.
name|getItemCount
argument_list|()
argument_list|)
expr_stmt|;
name|result
operator|=
name|queryResult2String
argument_list|(
name|broker
argument_list|,
name|seq
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|XMLAssert
operator|.
name|assertEquals
argument_list|(
literal|"<para>a third paragraph with<term>"
operator|+
name|MATCH_START
operator|+
literal|"term"
operator|+
name|MATCH_END
operator|+
literal|"</term>.</para>"
argument_list|,
name|result
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Test
specifier|public
name|void
name|mixedContentQueries
parameter_list|()
throws|throws
name|PermissionDeniedException
throws|,
name|XPathException
throws|,
name|SAXException
throws|,
name|EXistException
throws|,
name|CollectionConfigurationException
throws|,
name|LockException
throws|,
name|IOException
block|{
name|configureAndStore
argument_list|(
name|CONF1
argument_list|,
name|XML
argument_list|)
expr_stmt|;
specifier|final
name|BrokerPool
name|pool
init|=
name|existEmbeddedServer
operator|.
name|getBrokerPool
argument_list|()
decl_stmt|;
try|try
init|(
specifier|final
name|DBBroker
name|broker
init|=
name|pool
operator|.
name|get
argument_list|(
name|Optional
operator|.
name|of
argument_list|(
name|pool
operator|.
name|getSecurityManager
argument_list|()
operator|.
name|getSystemSubject
argument_list|()
argument_list|)
argument_list|)
init|;
init|)
block|{
specifier|final
name|XQuery
name|xquery
init|=
name|pool
operator|.
name|getXQueryService
argument_list|()
decl_stmt|;
name|assertNotNull
argument_list|(
name|xquery
argument_list|)
expr_stmt|;
name|Sequence
name|seq
init|=
name|xquery
operator|.
name|execute
argument_list|(
name|broker
argument_list|,
literal|"//para[ngram:contains(., 'mixed content')]"
argument_list|,
literal|null
argument_list|)
decl_stmt|;
name|assertNotNull
argument_list|(
name|seq
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|seq
operator|.
name|getItemCount
argument_list|()
argument_list|)
expr_stmt|;
name|String
name|result
init|=
name|queryResult2String
argument_list|(
name|broker
argument_list|,
name|seq
argument_list|,
literal|0
argument_list|)
decl_stmt|;
name|XMLAssert
operator|.
name|assertEquals
argument_list|(
literal|"<para>some paragraph with<hi>"
operator|+
name|MATCH_START
operator|+
literal|"mixed"
operator|+
name|MATCH_END
operator|+
literal|"</hi>"
operator|+
name|MATCH_START
operator|+
literal|" content"
operator|+
name|MATCH_END
operator|+
literal|".</para>"
argument_list|,
name|result
argument_list|)
expr_stmt|;
name|seq
operator|=
name|xquery
operator|.
name|execute
argument_list|(
name|broker
argument_list|,
literal|"//para[ngram:contains(., 'with mixed content')]"
argument_list|,
literal|null
argument_list|)
expr_stmt|;
name|assertNotNull
argument_list|(
name|seq
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|seq
operator|.
name|getItemCount
argument_list|()
argument_list|)
expr_stmt|;
name|result
operator|=
name|queryResult2String
argument_list|(
name|broker
argument_list|,
name|seq
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|XMLAssert
operator|.
name|assertEquals
argument_list|(
literal|"<para>some paragraph "
operator|+
name|MATCH_START
operator|+
literal|"with "
operator|+
name|MATCH_END
operator|+
literal|"<hi>"
operator|+
name|MATCH_START
operator|+
literal|"mixed"
operator|+
name|MATCH_END
operator|+
literal|"</hi>"
operator|+
name|MATCH_START
operator|+
literal|" content"
operator|+
name|MATCH_END
operator|+
literal|".</para>"
argument_list|,
name|result
argument_list|)
expr_stmt|;
name|seq
operator|=
name|xquery
operator|.
name|execute
argument_list|(
name|broker
argument_list|,
literal|"//para[ngram:contains(., 'with nested')]"
argument_list|,
literal|null
argument_list|)
expr_stmt|;
name|assertNotNull
argument_list|(
name|seq
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|seq
operator|.
name|getItemCount
argument_list|()
argument_list|)
expr_stmt|;
name|result
operator|=
name|queryResult2String
argument_list|(
name|broker
argument_list|,
name|seq
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|XMLAssert
operator|.
name|assertEquals
argument_list|(
literal|"<para>another paragraph "
operator|+
name|MATCH_START
operator|+
literal|"with "
operator|+
name|MATCH_END
operator|+
literal|"<note><hi>"
operator|+
name|MATCH_START
operator|+
literal|"nested"
operator|+
name|MATCH_END
operator|+
literal|"</hi> inner</note> elements.</para>"
argument_list|,
name|result
argument_list|)
expr_stmt|;
name|seq
operator|=
name|xquery
operator|.
name|execute
argument_list|(
name|broker
argument_list|,
literal|"//para[ngram:contains(., 'with nested inner elements')]"
argument_list|,
literal|null
argument_list|)
expr_stmt|;
name|assertNotNull
argument_list|(
name|seq
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|seq
operator|.
name|getItemCount
argument_list|()
argument_list|)
expr_stmt|;
name|result
operator|=
name|queryResult2String
argument_list|(
name|broker
argument_list|,
name|seq
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|XMLAssert
operator|.
name|assertEquals
argument_list|(
literal|"<para>another paragraph "
operator|+
name|MATCH_START
operator|+
literal|"with "
operator|+
name|MATCH_END
operator|+
literal|"<note><hi>"
operator|+
name|MATCH_START
operator|+
literal|"nested"
operator|+
name|MATCH_END
operator|+
literal|"</hi>"
operator|+
name|MATCH_START
operator|+
literal|" inner"
operator|+
name|MATCH_END
operator|+
literal|"</note>"
operator|+
name|MATCH_START
operator|+
literal|" elements"
operator|+
name|MATCH_END
operator|+
literal|".</para>"
argument_list|,
name|result
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Test
specifier|public
name|void
name|indexOnInnerElement
parameter_list|()
throws|throws
name|PermissionDeniedException
throws|,
name|IOException
throws|,
name|LockException
throws|,
name|CollectionConfigurationException
throws|,
name|SAXException
throws|,
name|EXistException
throws|,
name|XPathException
block|{
name|configureAndStore
argument_list|(
name|CONF2
argument_list|,
name|XML
argument_list|)
expr_stmt|;
specifier|final
name|BrokerPool
name|pool
init|=
name|existEmbeddedServer
operator|.
name|getBrokerPool
argument_list|()
decl_stmt|;
try|try
init|(
specifier|final
name|DBBroker
name|broker
init|=
name|pool
operator|.
name|get
argument_list|(
name|Optional
operator|.
name|of
argument_list|(
name|pool
operator|.
name|getSecurityManager
argument_list|()
operator|.
name|getSystemSubject
argument_list|()
argument_list|)
argument_list|)
init|;
init|)
block|{
specifier|final
name|XQuery
name|xquery
init|=
name|pool
operator|.
name|getXQueryService
argument_list|()
decl_stmt|;
name|assertNotNull
argument_list|(
name|xquery
argument_list|)
expr_stmt|;
name|Sequence
name|seq
init|=
name|xquery
operator|.
name|execute
argument_list|(
name|broker
argument_list|,
literal|"//para[ngram:contains(note, 'nested inner')]"
argument_list|,
literal|null
argument_list|)
decl_stmt|;
name|assertNotNull
argument_list|(
name|seq
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|seq
operator|.
name|getItemCount
argument_list|()
argument_list|)
expr_stmt|;
name|String
name|result
init|=
name|queryResult2String
argument_list|(
name|broker
argument_list|,
name|seq
argument_list|,
literal|0
argument_list|)
decl_stmt|;
name|XMLAssert
operator|.
name|assertEquals
argument_list|(
literal|"<para>another paragraph with<note><hi>"
operator|+
name|MATCH_START
operator|+
literal|"nested"
operator|+
name|MATCH_END
operator|+
literal|"</hi>"
operator|+
name|MATCH_START
operator|+
literal|" inner"
operator|+
name|MATCH_END
operator|+
literal|"</note> elements.</para>"
argument_list|,
name|result
argument_list|)
expr_stmt|;
name|seq
operator|=
name|xquery
operator|.
name|execute
argument_list|(
name|broker
argument_list|,
literal|"//note[ngram:contains(., 'nested inner')]/parent::para"
argument_list|,
literal|null
argument_list|)
expr_stmt|;
name|assertNotNull
argument_list|(
name|seq
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|seq
operator|.
name|getItemCount
argument_list|()
argument_list|)
expr_stmt|;
name|result
operator|=
name|queryResult2String
argument_list|(
name|broker
argument_list|,
name|seq
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|XMLAssert
operator|.
name|assertEquals
argument_list|(
literal|"<para>another paragraph with<note><hi>"
operator|+
name|MATCH_START
operator|+
literal|"nested"
operator|+
name|MATCH_END
operator|+
literal|"</hi>"
operator|+
name|MATCH_START
operator|+
literal|" inner"
operator|+
name|MATCH_END
operator|+
literal|"</note> elements.</para>"
argument_list|,
name|result
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Test
specifier|public
name|void
name|doubleMatch
parameter_list|()
throws|throws
name|PermissionDeniedException
throws|,
name|XPathException
throws|,
name|SAXException
throws|,
name|EXistException
throws|,
name|CollectionConfigurationException
throws|,
name|LockException
throws|,
name|IOException
block|{
name|configureAndStore
argument_list|(
name|CONF1
argument_list|,
name|XML
argument_list|)
expr_stmt|;
specifier|final
name|BrokerPool
name|pool
init|=
name|existEmbeddedServer
operator|.
name|getBrokerPool
argument_list|()
decl_stmt|;
try|try
init|(
specifier|final
name|DBBroker
name|broker
init|=
name|pool
operator|.
name|get
argument_list|(
name|Optional
operator|.
name|of
argument_list|(
name|pool
operator|.
name|getSecurityManager
argument_list|()
operator|.
name|getSystemSubject
argument_list|()
argument_list|)
argument_list|)
init|;
init|)
block|{
specifier|final
name|XQuery
name|xquery
init|=
name|pool
operator|.
name|getXQueryService
argument_list|()
decl_stmt|;
name|assertNotNull
argument_list|(
name|xquery
argument_list|)
expr_stmt|;
name|Sequence
name|seq
init|=
name|xquery
operator|.
name|execute
argument_list|(
name|broker
argument_list|,
literal|"//para[ngram:contains(., 'double match')]"
argument_list|,
literal|null
argument_list|)
decl_stmt|;
name|assertNotNull
argument_list|(
name|seq
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|seq
operator|.
name|getItemCount
argument_list|()
argument_list|)
expr_stmt|;
name|String
name|result
init|=
name|queryResult2String
argument_list|(
name|broker
argument_list|,
name|seq
argument_list|,
literal|0
argument_list|)
decl_stmt|;
name|XMLAssert
operator|.
name|assertEquals
argument_list|(
literal|"<para>"
operator|+
name|MATCH_START
operator|+
literal|"double match"
operator|+
name|MATCH_END
operator|+
literal|" "
operator|+
name|MATCH_START
operator|+
literal|"double match"
operator|+
name|MATCH_END
operator|+
literal|"</para>"
argument_list|,
name|result
argument_list|)
expr_stmt|;
name|seq
operator|=
name|xquery
operator|.
name|execute
argument_list|(
name|broker
argument_list|,
literal|"//para[ngram:contains(., 'aaa aaa')]"
argument_list|,
literal|null
argument_list|)
expr_stmt|;
name|assertNotNull
argument_list|(
name|seq
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|seq
operator|.
name|getItemCount
argument_list|()
argument_list|)
expr_stmt|;
name|result
operator|=
name|queryResult2String
argument_list|(
name|broker
argument_list|,
name|seq
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|XMLAssert
operator|.
name|assertEquals
argument_list|(
literal|"<para>"
operator|+
name|MATCH_START
operator|+
literal|"aaa aaa"
operator|+
name|MATCH_END
operator|+
literal|" aaa</para>"
argument_list|,
name|result
argument_list|)
expr_stmt|;
name|seq
operator|=
name|xquery
operator|.
name|execute
argument_list|(
name|broker
argument_list|,
literal|"//para[ngram:ends-with(., 'aaa aaa')]"
argument_list|,
literal|null
argument_list|)
expr_stmt|;
name|assertNotNull
argument_list|(
name|seq
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|seq
operator|.
name|getItemCount
argument_list|()
argument_list|)
expr_stmt|;
name|result
operator|=
name|queryResult2String
argument_list|(
name|broker
argument_list|,
name|seq
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|XMLAssert
operator|.
name|assertEquals
argument_list|(
literal|"<para>aaa "
operator|+
name|MATCH_START
operator|+
literal|"aaa aaa"
operator|+
name|MATCH_END
operator|+
literal|"</para>"
argument_list|,
name|result
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Test
specifier|public
name|void
name|wildcardMatch
parameter_list|()
throws|throws
name|PermissionDeniedException
throws|,
name|IOException
throws|,
name|LockException
throws|,
name|CollectionConfigurationException
throws|,
name|SAXException
throws|,
name|EXistException
throws|,
name|XPathException
throws|,
name|XpathException
block|{
name|configureAndStore
argument_list|(
name|CONF1
argument_list|,
name|XML
argument_list|)
expr_stmt|;
specifier|final
name|BrokerPool
name|pool
init|=
name|existEmbeddedServer
operator|.
name|getBrokerPool
argument_list|()
decl_stmt|;
try|try
init|(
specifier|final
name|DBBroker
name|broker
init|=
name|pool
operator|.
name|get
argument_list|(
name|Optional
operator|.
name|of
argument_list|(
name|pool
operator|.
name|getSecurityManager
argument_list|()
operator|.
name|getSystemSubject
argument_list|()
argument_list|)
argument_list|)
init|;
init|)
block|{
specifier|final
name|XQuery
name|xquery
init|=
name|pool
operator|.
name|getXQueryService
argument_list|()
decl_stmt|;
name|assertNotNull
argument_list|(
name|xquery
argument_list|)
expr_stmt|;
name|Sequence
name|seq
init|=
name|xquery
operator|.
name|execute
argument_list|(
name|broker
argument_list|,
literal|"//para[ngram:wildcard-contains(., 'double.*match')]"
argument_list|,
literal|null
argument_list|)
decl_stmt|;
name|assertNotNull
argument_list|(
name|seq
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|seq
operator|.
name|getItemCount
argument_list|()
argument_list|)
expr_stmt|;
name|String
name|result
init|=
name|queryResult2String
argument_list|(
name|broker
argument_list|,
name|seq
argument_list|,
literal|0
argument_list|)
decl_stmt|;
name|XMLAssert
operator|.
name|assertEquals
argument_list|(
literal|"<para>"
operator|+
name|MATCH_START
operator|+
literal|"double match double match"
operator|+
name|MATCH_END
operator|+
literal|"</para>"
argument_list|,
name|result
argument_list|)
expr_stmt|;
name|seq
operator|=
name|xquery
operator|.
name|execute
argument_list|(
name|broker
argument_list|,
literal|"//para[ngram:wildcard-contains(., 'paragraph.*content\\.')]"
argument_list|,
literal|null
argument_list|)
expr_stmt|;
name|assertNotNull
argument_list|(
name|seq
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|seq
operator|.
name|getItemCount
argument_list|()
argument_list|)
expr_stmt|;
name|result
operator|=
name|queryResult2String
argument_list|(
name|broker
argument_list|,
name|seq
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|XMLAssert
operator|.
name|assertEquals
argument_list|(
literal|"<para>some "
operator|+
name|MATCH_START
operator|+
literal|"paragraph with "
operator|+
name|MATCH_END
operator|+
literal|"<hi>"
operator|+
name|MATCH_START
operator|+
literal|"mixed"
operator|+
name|MATCH_END
operator|+
literal|"</hi>"
operator|+
name|MATCH_START
operator|+
literal|" content."
operator|+
name|MATCH_END
operator|+
literal|"</para>"
argument_list|,
name|result
argument_list|)
expr_stmt|;
name|String
name|wildcardQuery
init|=
literal|"...with.*[tn].*ele.ent[sc].*"
decl_stmt|;
name|seq
operator|=
name|xquery
operator|.
name|execute
argument_list|(
name|broker
argument_list|,
literal|"//para[ngram:wildcard-contains(., '"
operator|+
name|wildcardQuery
operator|+
literal|"')]"
argument_list|,
literal|null
argument_list|)
expr_stmt|;
name|assertNotNull
argument_list|(
name|seq
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|seq
operator|.
name|getItemCount
argument_list|()
argument_list|)
expr_stmt|;
name|result
operator|=
name|queryResult2String
argument_list|(
name|broker
argument_list|,
name|seq
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|XMLAssert
operator|.
name|assertEquals
argument_list|(
literal|"<para>another paragra"
operator|+
name|MATCH_START
operator|+
literal|"ph with "
operator|+
name|MATCH_END
operator|+
literal|"<note><hi>"
operator|+
name|MATCH_START
operator|+
literal|"nested"
operator|+
name|MATCH_END
operator|+
literal|"</hi>"
operator|+
name|MATCH_START
operator|+
literal|" inner"
operator|+
name|MATCH_END
operator|+
literal|"</note>"
operator|+
name|MATCH_START
operator|+
literal|" elements."
operator|+
name|MATCH_END
operator|+
literal|"</para>"
argument_list|,
name|result
argument_list|)
expr_stmt|;
specifier|final
name|XpathEngine
name|xpe
init|=
name|XMLUnit
operator|.
name|newXpathEngine
argument_list|()
decl_stmt|;
specifier|final
name|NodeList
name|matches
init|=
name|xpe
operator|.
name|getMatchingNodes
argument_list|(
literal|"//exist:match"
argument_list|,
name|XMLUnit
operator|.
name|buildControlDocument
argument_list|(
name|result
argument_list|)
argument_list|)
decl_stmt|;
specifier|final
name|StringBuilder
name|m
init|=
operator|new
name|StringBuilder
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|matches
operator|.
name|getLength
argument_list|()
condition|;
name|i
operator|++
control|)
block|{
name|m
operator|.
name|append
argument_list|(
name|matches
operator|.
name|item
argument_list|(
name|i
argument_list|)
operator|.
name|getTextContent
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|String
name|match
init|=
name|m
operator|.
name|toString
argument_list|()
decl_stmt|;
name|assertMatches
argument_list|(
name|wildcardQuery
argument_list|,
name|match
argument_list|)
expr_stmt|;
name|wildcardQuery
operator|=
literal|"\\*.*\\?"
expr_stmt|;
name|seq
operator|=
name|xquery
operator|.
name|execute
argument_list|(
name|broker
argument_list|,
literal|"//para[ngram:wildcard-contains(., '"
operator|+
name|wildcardQuery
operator|+
literal|"')]"
argument_list|,
literal|null
argument_list|)
expr_stmt|;
name|assertNotNull
argument_list|(
name|seq
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|seq
operator|.
name|getItemCount
argument_list|()
argument_list|)
expr_stmt|;
name|result
operator|=
name|queryResult2String
argument_list|(
name|broker
argument_list|,
name|seq
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|XMLAssert
operator|.
name|assertEquals
argument_list|(
literal|"<para>Where did all the "
operator|+
name|MATCH_START
operator|+
literal|"*s go?"
operator|+
name|MATCH_END
operator|+
literal|"</para>"
argument_list|,
name|result
argument_list|)
expr_stmt|;
name|match
operator|=
name|xpe
operator|.
name|evaluate
argument_list|(
literal|"//exist:match"
argument_list|,
name|XMLUnit
operator|.
name|buildControlDocument
argument_list|(
name|result
argument_list|)
argument_list|)
expr_stmt|;
name|assertMatches
argument_list|(
name|wildcardQuery
argument_list|,
name|match
argument_list|)
expr_stmt|;
name|wildcardQuery
operator|=
literal|".est[][?]tes."
expr_stmt|;
name|seq
operator|=
name|xquery
operator|.
name|execute
argument_list|(
name|broker
argument_list|,
literal|"//para[ngram:wildcard-contains(., '"
operator|+
name|wildcardQuery
operator|+
literal|"')]"
argument_list|,
literal|null
argument_list|)
expr_stmt|;
name|assertNotNull
argument_list|(
name|seq
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|seq
operator|.
name|getItemCount
argument_list|()
argument_list|)
expr_stmt|;
name|result
operator|=
name|queryResult2String
argument_list|(
name|broker
argument_list|,
name|seq
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|XMLAssert
operator|.
name|assertEquals
argument_list|(
literal|"<para>"
operator|+
name|MATCH_START
operator|+
literal|"test]test"
operator|+
name|MATCH_END
operator|+
literal|" "
operator|+
name|MATCH_START
operator|+
literal|"test[test"
operator|+
name|MATCH_END
operator|+
literal|" "
operator|+
name|MATCH_START
operator|+
literal|"test?test"
operator|+
name|MATCH_END
operator|+
literal|"</para>"
argument_list|,
name|result
argument_list|)
expr_stmt|;
name|match
operator|=
name|xpe
operator|.
name|evaluate
argument_list|(
literal|"//exist:match"
argument_list|,
name|XMLUnit
operator|.
name|buildControlDocument
argument_list|(
name|result
argument_list|)
argument_list|)
expr_stmt|;
name|seq
operator|=
name|xquery
operator|.
name|execute
argument_list|(
name|broker
argument_list|,
literal|"//para[ngram:wildcard-contains(., '^"
operator|+
name|wildcardQuery
operator|+
literal|"')]"
argument_list|,
literal|null
argument_list|)
expr_stmt|;
name|assertNotNull
argument_list|(
name|seq
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|seq
operator|.
name|getItemCount
argument_list|()
argument_list|)
expr_stmt|;
name|result
operator|=
name|queryResult2String
argument_list|(
name|broker
argument_list|,
name|seq
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|XMLAssert
operator|.
name|assertEquals
argument_list|(
literal|"<para>"
operator|+
name|MATCH_START
operator|+
literal|"test]test"
operator|+
name|MATCH_END
operator|+
literal|" test[test test?test</para>"
argument_list|,
name|result
argument_list|)
expr_stmt|;
name|match
operator|=
name|xpe
operator|.
name|evaluate
argument_list|(
literal|"//exist:match"
argument_list|,
name|XMLUnit
operator|.
name|buildControlDocument
argument_list|(
name|result
argument_list|)
argument_list|)
expr_stmt|;
name|seq
operator|=
name|xquery
operator|.
name|execute
argument_list|(
name|broker
argument_list|,
literal|"//para[ngram:wildcard-contains(., '"
operator|+
name|wildcardQuery
operator|+
literal|"$')]"
argument_list|,
literal|null
argument_list|)
expr_stmt|;
name|assertNotNull
argument_list|(
name|seq
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|seq
operator|.
name|getItemCount
argument_list|()
argument_list|)
expr_stmt|;
name|result
operator|=
name|queryResult2String
argument_list|(
name|broker
argument_list|,
name|seq
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|XMLAssert
operator|.
name|assertEquals
argument_list|(
literal|"<para>test]test test[test "
operator|+
name|MATCH_START
operator|+
literal|"test?test"
operator|+
name|MATCH_END
operator|+
literal|"</para>"
argument_list|,
name|result
argument_list|)
expr_stmt|;
name|match
operator|=
name|xpe
operator|.
name|evaluate
argument_list|(
literal|"//exist:match"
argument_list|,
name|XMLUnit
operator|.
name|buildControlDocument
argument_list|(
name|result
argument_list|)
argument_list|)
expr_stmt|;
name|wildcardQuery
operator|=
literal|"^aaa.aaa$"
expr_stmt|;
name|seq
operator|=
name|xquery
operator|.
name|execute
argument_list|(
name|broker
argument_list|,
literal|"//para[ngram:wildcard-contains(., '"
operator|+
name|wildcardQuery
operator|+
literal|"')]"
argument_list|,
literal|null
argument_list|)
expr_stmt|;
name|assertNotNull
argument_list|(
name|seq
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|seq
operator|.
name|getItemCount
argument_list|()
argument_list|)
expr_stmt|;
name|result
operator|=
name|queryResult2String
argument_list|(
name|broker
argument_list|,
name|seq
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|XMLAssert
operator|.
name|assertEquals
argument_list|(
literal|"<para>"
operator|+
name|MATCH_START
operator|+
literal|"aaacaaa"
operator|+
name|MATCH_END
operator|+
literal|"</para>"
argument_list|,
name|result
argument_list|)
expr_stmt|;
name|match
operator|=
name|xpe
operator|.
name|evaluate
argument_list|(
literal|"//exist:match"
argument_list|,
name|XMLUnit
operator|.
name|buildControlDocument
argument_list|(
name|result
argument_list|)
argument_list|)
expr_stmt|;
name|assertMatches
argument_list|(
name|wildcardQuery
argument_list|,
name|match
argument_list|)
expr_stmt|;
name|wildcardQuery
operator|=
literal|".+simple"
expr_stmt|;
name|seq
operator|=
name|xquery
operator|.
name|execute
argument_list|(
name|broker
argument_list|,
literal|"//para[ngram:wildcard-contains(., '"
operator|+
name|wildcardQuery
operator|+
literal|"')]"
argument_list|,
literal|null
argument_list|)
expr_stmt|;
name|assertNotNull
argument_list|(
name|seq
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|seq
operator|.
name|getItemCount
argument_list|()
argument_list|)
expr_stmt|;
name|result
operator|=
name|queryResult2String
argument_list|(
name|broker
argument_list|,
name|seq
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|XMLAssert
operator|.
name|assertEquals
argument_list|(
literal|"<para>"
operator|+
name|MATCH_START
operator|+
literal|"a simple"
operator|+
name|MATCH_END
operator|+
literal|" paragraph</para>"
argument_list|,
name|result
argument_list|)
expr_stmt|;
name|match
operator|=
name|xpe
operator|.
name|evaluate
argument_list|(
literal|"//exist:match"
argument_list|,
name|XMLUnit
operator|.
name|buildControlDocument
argument_list|(
name|result
argument_list|)
argument_list|)
expr_stmt|;
name|assertMatches
argument_list|(
name|wildcardQuery
argument_list|,
name|match
argument_list|)
expr_stmt|;
name|wildcardQuery
operator|=
literal|"a s.?i.?m.?p.?l.?e.?"
expr_stmt|;
name|seq
operator|=
name|xquery
operator|.
name|execute
argument_list|(
name|broker
argument_list|,
literal|"//para[ngram:wildcard-contains(., '"
operator|+
name|wildcardQuery
operator|+
literal|"')]"
argument_list|,
literal|null
argument_list|)
expr_stmt|;
name|assertNotNull
argument_list|(
name|seq
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|seq
operator|.
name|getItemCount
argument_list|()
argument_list|)
expr_stmt|;
name|result
operator|=
name|queryResult2String
argument_list|(
name|broker
argument_list|,
name|seq
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|XMLAssert
operator|.
name|assertEquals
argument_list|(
literal|"<para>"
operator|+
name|MATCH_START
operator|+
literal|"a simple "
operator|+
name|MATCH_END
operator|+
literal|"paragraph</para>"
argument_list|,
name|result
argument_list|)
expr_stmt|;
name|match
operator|=
name|xpe
operator|.
name|evaluate
argument_list|(
literal|"//exist:match"
argument_list|,
name|XMLUnit
operator|.
name|buildControlDocument
argument_list|(
name|result
argument_list|)
argument_list|)
expr_stmt|;
name|assertMatches
argument_list|(
name|wildcardQuery
argument_list|,
name|match
argument_list|)
expr_stmt|;
name|wildcardQuery
operator|=
literal|"a s.?i.?m.?p.?l.?e.?"
expr_stmt|;
name|seq
operator|=
name|xquery
operator|.
name|execute
argument_list|(
name|broker
argument_list|,
literal|"//para[ngram:wildcard-contains(., '"
operator|+
name|wildcardQuery
operator|+
literal|"')]"
argument_list|,
literal|null
argument_list|)
expr_stmt|;
name|assertNotNull
argument_list|(
name|seq
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|seq
operator|.
name|getItemCount
argument_list|()
argument_list|)
expr_stmt|;
name|result
operator|=
name|queryResult2String
argument_list|(
name|broker
argument_list|,
name|seq
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|XMLAssert
operator|.
name|assertEquals
argument_list|(
literal|"<para>"
operator|+
name|MATCH_START
operator|+
literal|"a simple "
operator|+
name|MATCH_END
operator|+
literal|"paragraph</para>"
argument_list|,
name|result
argument_list|)
expr_stmt|;
name|match
operator|=
name|xpe
operator|.
name|evaluate
argument_list|(
literal|"//exist:match"
argument_list|,
name|XMLUnit
operator|.
name|buildControlDocument
argument_list|(
name|result
argument_list|)
argument_list|)
expr_stmt|;
name|assertMatches
argument_list|(
name|wildcardQuery
argument_list|,
name|match
argument_list|)
expr_stmt|;
name|wildcardQuery
operator|=
literal|"b.{3,6}c"
expr_stmt|;
name|seq
operator|=
name|xquery
operator|.
name|execute
argument_list|(
name|broker
argument_list|,
literal|"//para[ngram:wildcard-contains(., '"
operator|+
name|wildcardQuery
operator|+
literal|"')]"
argument_list|,
literal|null
argument_list|)
expr_stmt|;
name|assertNotNull
argument_list|(
name|seq
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|seq
operator|.
name|getItemCount
argument_list|()
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
literal|2
condition|;
name|i
operator|++
control|)
block|{
name|result
operator|=
name|queryResult2String
argument_list|(
name|broker
argument_list|,
name|seq
argument_list|,
name|i
argument_list|)
expr_stmt|;
name|match
operator|=
name|xpe
operator|.
name|evaluate
argument_list|(
literal|"//exist:match"
argument_list|,
name|XMLUnit
operator|.
name|buildControlDocument
argument_list|(
name|result
argument_list|)
argument_list|)
expr_stmt|;
name|assertMatches
argument_list|(
name|wildcardQuery
argument_list|,
name|match
argument_list|)
expr_stmt|;
block|}
block|}
block|}
specifier|private
specifier|static
name|void
name|assertMatches
parameter_list|(
name|String
name|regex
parameter_list|,
name|String
name|actual
parameter_list|)
block|{
name|assertTrue
argument_list|(
literal|"actual value "
operator|+
name|actual
operator|+
literal|" does not match "
operator|+
name|regex
argument_list|,
name|actual
operator|.
name|matches
argument_list|(
name|regex
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|smallStrings
parameter_list|()
throws|throws
name|PermissionDeniedException
throws|,
name|IOException
throws|,
name|LockException
throws|,
name|CollectionConfigurationException
throws|,
name|SAXException
throws|,
name|EXistException
throws|,
name|XPathException
throws|,
name|XpathException
block|{
name|configureAndStore
argument_list|(
name|CONF3
argument_list|,
name|XML2
argument_list|)
expr_stmt|;
specifier|final
name|BrokerPool
name|pool
init|=
name|existEmbeddedServer
operator|.
name|getBrokerPool
argument_list|()
decl_stmt|;
try|try
init|(
specifier|final
name|DBBroker
name|broker
init|=
name|pool
operator|.
name|get
argument_list|(
name|Optional
operator|.
name|of
argument_list|(
name|pool
operator|.
name|getSecurityManager
argument_list|()
operator|.
name|getSystemSubject
argument_list|()
argument_list|)
argument_list|)
init|;
init|)
block|{
specifier|final
name|XQuery
name|xquery
init|=
name|pool
operator|.
name|getXQueryService
argument_list|()
decl_stmt|;
name|assertNotNull
argument_list|(
name|xquery
argument_list|)
expr_stmt|;
specifier|final
name|String
index|[]
name|strings
init|=
operator|new
name|String
index|[]
block|{
literal|"é¾"
block|,
literal|"é¾è­·"
block|,
literal|"æ°é¾è­·"
block|,
literal|"åæ°é¾è­·"
block|}
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|strings
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
specifier|final
name|Sequence
name|seq
init|=
name|xquery
operator|.
name|execute
argument_list|(
name|broker
argument_list|,
literal|"declare namespace tei=\"http://www.tei-c.org/ns/1.0\";\n"
operator|+
literal|"//tei:p[ngram:contains(., '"
operator|+
name|strings
index|[
name|i
index|]
operator|+
literal|"')]"
argument_list|,
literal|null
argument_list|)
decl_stmt|;
name|assertNotNull
argument_list|(
name|seq
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|seq
operator|.
name|getItemCount
argument_list|()
argument_list|)
expr_stmt|;
specifier|final
name|String
name|result
init|=
name|queryResult2String
argument_list|(
name|broker
argument_list|,
name|seq
argument_list|,
literal|0
argument_list|)
decl_stmt|;
name|XMLAssert
operator|.
name|assertXpathEvaluatesTo
argument_list|(
name|i
operator|<
literal|2
condition|?
literal|"2"
else|:
literal|"1"
argument_list|,
literal|"count(//exist:match)"
argument_list|,
name|result
argument_list|)
expr_stmt|;
name|XMLAssert
operator|.
name|assertXpathExists
argument_list|(
literal|"//exist:match[text() = '"
operator|+
name|strings
index|[
name|i
index|]
operator|+
literal|"']"
argument_list|,
name|result
argument_list|)
expr_stmt|;
block|}
block|}
block|}
annotation|@
name|Test
specifier|public
name|void
name|constructedNodes
parameter_list|()
throws|throws
name|PermissionDeniedException
throws|,
name|XPathException
throws|,
name|SAXException
throws|,
name|IOException
throws|,
name|XpathException
throws|,
name|CollectionConfigurationException
throws|,
name|LockException
throws|,
name|EXistException
block|{
name|configureAndStore
argument_list|(
name|CONF3
argument_list|,
name|XML2
argument_list|)
expr_stmt|;
specifier|final
name|BrokerPool
name|pool
init|=
name|existEmbeddedServer
operator|.
name|getBrokerPool
argument_list|()
decl_stmt|;
try|try
init|(
specifier|final
name|DBBroker
name|broker
init|=
name|pool
operator|.
name|get
argument_list|(
name|Optional
operator|.
name|of
argument_list|(
name|pool
operator|.
name|getSecurityManager
argument_list|()
operator|.
name|getSystemSubject
argument_list|()
argument_list|)
argument_list|)
init|;
init|)
block|{
specifier|final
name|XQuery
name|xquery
init|=
name|pool
operator|.
name|getXQueryService
argument_list|()
decl_stmt|;
name|assertNotNull
argument_list|(
name|xquery
argument_list|)
expr_stmt|;
specifier|final
name|String
index|[]
name|strings
init|=
operator|new
name|String
index|[]
block|{
literal|"é¾"
block|,
literal|"é¾è­·"
block|,
literal|"æ°é¾è­·"
block|,
literal|"åæ°é¾è­·"
block|}
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|strings
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
specifier|final
name|Sequence
name|seq
init|=
name|xquery
operator|.
name|execute
argument_list|(
name|broker
argument_list|,
literal|"declare namespace tei=\"http://www.tei-c.org/ns/1.0\";\n"
operator|+
literal|"for $para in //tei:p[ngram:contains(., '"
operator|+
name|strings
index|[
name|i
index|]
operator|+
literal|"')]\n"
operator|+
literal|"return\n"
operator|+
literal|"<match>{$para}</match>"
argument_list|,
literal|null
argument_list|)
decl_stmt|;
name|assertNotNull
argument_list|(
name|seq
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|seq
operator|.
name|getItemCount
argument_list|()
argument_list|)
expr_stmt|;
specifier|final
name|String
name|result
init|=
name|queryResult2String
argument_list|(
name|broker
argument_list|,
name|seq
argument_list|,
literal|0
argument_list|)
decl_stmt|;
name|XMLAssert
operator|.
name|assertXpathEvaluatesTo
argument_list|(
name|i
operator|<
literal|2
condition|?
literal|"2"
else|:
literal|"1"
argument_list|,
literal|"count(//exist:match)"
argument_list|,
name|result
argument_list|)
expr_stmt|;
name|XMLAssert
operator|.
name|assertXpathExists
argument_list|(
literal|"//exist:match[text() = '"
operator|+
name|strings
index|[
name|i
index|]
operator|+
literal|"']"
argument_list|,
name|result
argument_list|)
expr_stmt|;
block|}
block|}
block|}
annotation|@
name|ClassRule
specifier|public
specifier|static
specifier|final
name|ExistEmbeddedServer
name|existEmbeddedServer
init|=
operator|new
name|ExistEmbeddedServer
argument_list|(
literal|true
argument_list|,
literal|false
argument_list|)
decl_stmt|;
annotation|@
name|BeforeClass
specifier|public
specifier|static
name|void
name|startDB
parameter_list|()
throws|throws
name|EXistException
throws|,
name|DatabaseConfigurationException
throws|,
name|PermissionDeniedException
throws|,
name|IOException
throws|,
name|TriggerException
block|{
specifier|final
name|BrokerPool
name|pool
init|=
name|existEmbeddedServer
operator|.
name|getBrokerPool
argument_list|()
decl_stmt|;
specifier|final
name|TransactionManager
name|transact
init|=
name|pool
operator|.
name|getTransactionManager
argument_list|()
decl_stmt|;
try|try
init|(
specifier|final
name|DBBroker
name|broker
init|=
name|pool
operator|.
name|get
argument_list|(
name|Optional
operator|.
name|of
argument_list|(
name|pool
operator|.
name|getSecurityManager
argument_list|()
operator|.
name|getSystemSubject
argument_list|()
argument_list|)
argument_list|)
init|;
specifier|final
name|Txn
name|transaction
init|=
name|transact
operator|.
name|beginTransaction
argument_list|()
init|)
block|{
specifier|final
name|Collection
name|root
init|=
name|broker
operator|.
name|getOrCreateCollection
argument_list|(
name|transaction
argument_list|,
name|TestConstants
operator|.
name|TEST_COLLECTION_URI
argument_list|)
decl_stmt|;
name|assertNotNull
argument_list|(
name|root
argument_list|)
expr_stmt|;
name|broker
operator|.
name|saveCollection
argument_list|(
name|transaction
argument_list|,
name|root
argument_list|)
expr_stmt|;
name|transact
operator|.
name|commit
argument_list|(
name|transaction
argument_list|)
expr_stmt|;
block|}
specifier|final
name|HashMap
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|m
init|=
operator|new
name|HashMap
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
argument_list|()
decl_stmt|;
name|m
operator|.
name|put
argument_list|(
literal|"tei"
argument_list|,
literal|"http://www.tei-c.org/ns/1.0"
argument_list|)
expr_stmt|;
name|m
operator|.
name|put
argument_list|(
literal|"exist"
argument_list|,
literal|"http://exist.sourceforge.net/NS/exist"
argument_list|)
expr_stmt|;
specifier|final
name|NamespaceContext
name|ctx
init|=
operator|new
name|SimpleNamespaceContext
argument_list|(
name|m
argument_list|)
decl_stmt|;
name|XMLUnit
operator|.
name|setXpathNamespaceContext
argument_list|(
name|ctx
argument_list|)
expr_stmt|;
block|}
annotation|@
name|AfterClass
specifier|public
specifier|static
name|void
name|closeDB
parameter_list|()
throws|throws
name|EXistException
throws|,
name|PermissionDeniedException
throws|,
name|IOException
throws|,
name|TriggerException
block|{
specifier|final
name|BrokerPool
name|pool
init|=
name|existEmbeddedServer
operator|.
name|getBrokerPool
argument_list|()
decl_stmt|;
specifier|final
name|TransactionManager
name|transact
init|=
name|pool
operator|.
name|getTransactionManager
argument_list|()
decl_stmt|;
try|try
init|(
specifier|final
name|DBBroker
name|broker
init|=
name|pool
operator|.
name|get
argument_list|(
name|Optional
operator|.
name|of
argument_list|(
name|pool
operator|.
name|getSecurityManager
argument_list|()
operator|.
name|getSystemSubject
argument_list|()
argument_list|)
argument_list|)
init|;
specifier|final
name|Txn
name|transaction
init|=
name|transact
operator|.
name|beginTransaction
argument_list|()
init|)
block|{
specifier|final
name|Collection
name|root
init|=
name|broker
operator|.
name|getOrCreateCollection
argument_list|(
name|transaction
argument_list|,
name|TestConstants
operator|.
name|TEST_COLLECTION_URI
argument_list|)
decl_stmt|;
name|assertNotNull
argument_list|(
name|root
argument_list|)
expr_stmt|;
name|broker
operator|.
name|removeCollection
argument_list|(
name|transaction
argument_list|,
name|root
argument_list|)
expr_stmt|;
specifier|final
name|Collection
name|config
init|=
name|broker
operator|.
name|getOrCreateCollection
argument_list|(
name|transaction
argument_list|,
name|XmldbURI
operator|.
name|create
argument_list|(
name|CollectionConfigurationManager
operator|.
name|CONFIG_COLLECTION
operator|+
literal|"/db"
argument_list|)
argument_list|)
decl_stmt|;
name|assertNotNull
argument_list|(
name|config
argument_list|)
expr_stmt|;
name|broker
operator|.
name|removeCollection
argument_list|(
name|transaction
argument_list|,
name|config
argument_list|)
expr_stmt|;
name|transact
operator|.
name|commit
argument_list|(
name|transaction
argument_list|)
expr_stmt|;
block|}
block|}
specifier|private
name|void
name|configureAndStore
parameter_list|(
name|String
name|config
parameter_list|,
name|String
name|xml
parameter_list|)
throws|throws
name|PermissionDeniedException
throws|,
name|IOException
throws|,
name|SAXException
throws|,
name|EXistException
throws|,
name|LockException
throws|,
name|CollectionConfigurationException
block|{
specifier|final
name|BrokerPool
name|pool
init|=
name|existEmbeddedServer
operator|.
name|getBrokerPool
argument_list|()
decl_stmt|;
specifier|final
name|TransactionManager
name|transact
init|=
name|pool
operator|.
name|getTransactionManager
argument_list|()
decl_stmt|;
try|try
init|(
specifier|final
name|DBBroker
name|broker
init|=
name|pool
operator|.
name|get
argument_list|(
name|Optional
operator|.
name|of
argument_list|(
name|pool
operator|.
name|getSecurityManager
argument_list|()
operator|.
name|getSystemSubject
argument_list|()
argument_list|)
argument_list|)
init|;
specifier|final
name|Txn
name|transaction
init|=
name|transact
operator|.
name|beginTransaction
argument_list|()
init|)
block|{
specifier|final
name|Collection
name|root
init|=
name|broker
operator|.
name|getOrCreateCollection
argument_list|(
name|transaction
argument_list|,
name|TestConstants
operator|.
name|TEST_COLLECTION_URI
argument_list|)
decl_stmt|;
name|assertNotNull
argument_list|(
name|root
argument_list|)
expr_stmt|;
specifier|final
name|CollectionConfigurationManager
name|mgr
init|=
name|pool
operator|.
name|getConfigurationManager
argument_list|()
decl_stmt|;
name|mgr
operator|.
name|addConfiguration
argument_list|(
name|transaction
argument_list|,
name|broker
argument_list|,
name|root
argument_list|,
name|config
argument_list|)
expr_stmt|;
specifier|final
name|IndexInfo
name|info
init|=
name|root
operator|.
name|validateXMLResource
argument_list|(
name|transaction
argument_list|,
name|broker
argument_list|,
name|XmldbURI
operator|.
name|create
argument_list|(
literal|"test_matches.xml"
argument_list|)
argument_list|,
name|xml
argument_list|)
decl_stmt|;
name|assertNotNull
argument_list|(
name|info
argument_list|)
expr_stmt|;
name|root
operator|.
name|store
argument_list|(
name|transaction
argument_list|,
name|broker
argument_list|,
name|info
argument_list|,
name|xml
argument_list|)
expr_stmt|;
name|transact
operator|.
name|commit
argument_list|(
name|transaction
argument_list|)
expr_stmt|;
block|}
block|}
specifier|private
name|String
name|queryResult2String
parameter_list|(
name|DBBroker
name|broker
parameter_list|,
name|Sequence
name|seq
parameter_list|,
name|int
name|index
parameter_list|)
throws|throws
name|SAXException
throws|,
name|XPathException
block|{
name|Properties
name|props
init|=
operator|new
name|Properties
argument_list|()
decl_stmt|;
name|props
operator|.
name|setProperty
argument_list|(
name|OutputKeys
operator|.
name|INDENT
argument_list|,
literal|"no"
argument_list|)
expr_stmt|;
name|props
operator|.
name|setProperty
argument_list|(
name|EXistOutputKeys
operator|.
name|HIGHLIGHT_MATCHES
argument_list|,
literal|"elements"
argument_list|)
expr_stmt|;
name|Serializer
name|serializer
init|=
name|broker
operator|.
name|getSerializer
argument_list|()
decl_stmt|;
name|serializer
operator|.
name|reset
argument_list|()
expr_stmt|;
name|serializer
operator|.
name|setProperties
argument_list|(
name|props
argument_list|)
expr_stmt|;
return|return
name|serializer
operator|.
name|serialize
argument_list|(
operator|(
name|NodeValue
operator|)
name|seq
operator|.
name|itemAt
argument_list|(
name|index
argument_list|)
argument_list|)
return|;
block|}
block|}
end_class

end_unit

