begin_unit|revision:1.0.0;language:Java;cregit-version:0.0.1
begin_package
package|package
name|org
operator|.
name|exist
operator|.
name|xquery
operator|.
name|modules
operator|.
name|spatial
package|;
end_package

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|dom
operator|.
name|NodeProxy
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|dom
operator|.
name|QName
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|indexing
operator|.
name|spatial
operator|.
name|AbstractGMLJDBCIndex
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|indexing
operator|.
name|spatial
operator|.
name|AbstractGMLJDBCIndexWorker
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|indexing
operator|.
name|spatial
operator|.
name|AbstractGMLJDBCIndex
operator|.
name|SpatialOperator
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|xquery
operator|.
name|BasicFunction
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|xquery
operator|.
name|Cardinality
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|xquery
operator|.
name|FunctionSignature
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|xquery
operator|.
name|XPathException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|xquery
operator|.
name|XQueryContext
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|xquery
operator|.
name|value
operator|.
name|NodeValue
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|xquery
operator|.
name|value
operator|.
name|Sequence
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|xquery
operator|.
name|value
operator|.
name|SequenceType
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|xquery
operator|.
name|value
operator|.
name|Type
import|;
end_import

begin_import
import|import
name|org
operator|.
name|geotools
operator|.
name|gml
operator|.
name|GMLFilterDocument
import|;
end_import

begin_import
import|import
name|org
operator|.
name|geotools
operator|.
name|gml
operator|.
name|GMLFilterGeometry
import|;
end_import

begin_import
import|import
name|org
operator|.
name|geotools
operator|.
name|gml
operator|.
name|GMLHandlerJTS
import|;
end_import

begin_import
import|import
name|org
operator|.
name|opengis
operator|.
name|referencing
operator|.
name|operation
operator|.
name|MathTransform
import|;
end_import

begin_import
import|import
name|org
operator|.
name|opengis
operator|.
name|referencing
operator|.
name|operation
operator|.
name|TransformException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|w3c
operator|.
name|dom
operator|.
name|Element
import|;
end_import

begin_import
import|import
name|org
operator|.
name|xml
operator|.
name|sax
operator|.
name|ContentHandler
import|;
end_import

begin_import
import|import
name|org
operator|.
name|xml
operator|.
name|sax
operator|.
name|SAXException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|xml
operator|.
name|sax
operator|.
name|helpers
operator|.
name|XMLFilterImpl
import|;
end_import

begin_import
import|import
name|com
operator|.
name|vividsolutions
operator|.
name|jts
operator|.
name|geom
operator|.
name|Geometry
import|;
end_import

begin_comment
comment|/**  * Created by IntelliJ IDEA.  * User: wolf  * Date: 28-Feb-2007  * Time: 15:18:59  * To change this template use File | Settings | File Templates.  */
end_comment

begin_class
specifier|public
class|class
name|FunSpatialSearch
extends|extends
name|BasicFunction
block|{
specifier|public
specifier|final
specifier|static
name|FunctionSignature
index|[]
name|signatures
init|=
block|{
operator|new
name|FunctionSignature
argument_list|(
operator|new
name|QName
argument_list|(
literal|"equals"
argument_list|,
name|SpatialModule
operator|.
name|NAMESPACE_URI
argument_list|,
name|SpatialModule
operator|.
name|PREFIX
argument_list|)
argument_list|,
literal|"Returns the nodes in $a that contain a geometry which is equal to geometry $b"
argument_list|,
operator|new
name|SequenceType
index|[]
block|{
operator|new
name|SequenceType
argument_list|(
name|Type
operator|.
name|NODE
argument_list|,
name|Cardinality
operator|.
name|ZERO_OR_MORE
argument_list|)
block|,
operator|new
name|SequenceType
argument_list|(
name|Type
operator|.
name|NODE
argument_list|,
name|Cardinality
operator|.
name|ZERO_OR_ONE
argument_list|)
block|}
argument_list|,
operator|new
name|SequenceType
argument_list|(
name|Type
operator|.
name|NODE
argument_list|,
name|Cardinality
operator|.
name|ZERO_OR_MORE
argument_list|)
argument_list|)
block|,
operator|new
name|FunctionSignature
argument_list|(
operator|new
name|QName
argument_list|(
literal|"disjoint"
argument_list|,
name|SpatialModule
operator|.
name|NAMESPACE_URI
argument_list|,
name|SpatialModule
operator|.
name|PREFIX
argument_list|)
argument_list|,
literal|"Returns the nodes in $a that contain a geometry which is disjoint with geometry $b"
argument_list|,
operator|new
name|SequenceType
index|[]
block|{
operator|new
name|SequenceType
argument_list|(
name|Type
operator|.
name|NODE
argument_list|,
name|Cardinality
operator|.
name|ZERO_OR_MORE
argument_list|)
block|,
operator|new
name|SequenceType
argument_list|(
name|Type
operator|.
name|NODE
argument_list|,
name|Cardinality
operator|.
name|ZERO_OR_ONE
argument_list|)
block|}
argument_list|,
operator|new
name|SequenceType
argument_list|(
name|Type
operator|.
name|NODE
argument_list|,
name|Cardinality
operator|.
name|ZERO_OR_MORE
argument_list|)
argument_list|)
block|,
operator|new
name|FunctionSignature
argument_list|(
operator|new
name|QName
argument_list|(
literal|"intersects"
argument_list|,
name|SpatialModule
operator|.
name|NAMESPACE_URI
argument_list|,
name|SpatialModule
operator|.
name|PREFIX
argument_list|)
argument_list|,
literal|"Returns the nodes in $a that contain a geometry which instersects with geometry $b"
argument_list|,
operator|new
name|SequenceType
index|[]
block|{
operator|new
name|SequenceType
argument_list|(
name|Type
operator|.
name|NODE
argument_list|,
name|Cardinality
operator|.
name|ZERO_OR_MORE
argument_list|)
block|,
operator|new
name|SequenceType
argument_list|(
name|Type
operator|.
name|NODE
argument_list|,
name|Cardinality
operator|.
name|ZERO_OR_ONE
argument_list|)
block|}
argument_list|,
operator|new
name|SequenceType
argument_list|(
name|Type
operator|.
name|NODE
argument_list|,
name|Cardinality
operator|.
name|ZERO_OR_MORE
argument_list|)
argument_list|)
block|,
operator|new
name|FunctionSignature
argument_list|(
operator|new
name|QName
argument_list|(
literal|"touches"
argument_list|,
name|SpatialModule
operator|.
name|NAMESPACE_URI
argument_list|,
name|SpatialModule
operator|.
name|PREFIX
argument_list|)
argument_list|,
literal|"Returns the nodes in $a that contain a geometry which touches geometry $b"
argument_list|,
operator|new
name|SequenceType
index|[]
block|{
operator|new
name|SequenceType
argument_list|(
name|Type
operator|.
name|NODE
argument_list|,
name|Cardinality
operator|.
name|ZERO_OR_MORE
argument_list|)
block|,
operator|new
name|SequenceType
argument_list|(
name|Type
operator|.
name|NODE
argument_list|,
name|Cardinality
operator|.
name|ZERO_OR_ONE
argument_list|)
block|}
argument_list|,
operator|new
name|SequenceType
argument_list|(
name|Type
operator|.
name|NODE
argument_list|,
name|Cardinality
operator|.
name|ZERO_OR_MORE
argument_list|)
argument_list|)
block|,
operator|new
name|FunctionSignature
argument_list|(
operator|new
name|QName
argument_list|(
literal|"crosses"
argument_list|,
name|SpatialModule
operator|.
name|NAMESPACE_URI
argument_list|,
name|SpatialModule
operator|.
name|PREFIX
argument_list|)
argument_list|,
literal|"Returns the nodes in $a that contain a geometry which crosses geometry $b"
argument_list|,
operator|new
name|SequenceType
index|[]
block|{
operator|new
name|SequenceType
argument_list|(
name|Type
operator|.
name|NODE
argument_list|,
name|Cardinality
operator|.
name|ZERO_OR_MORE
argument_list|)
block|,
operator|new
name|SequenceType
argument_list|(
name|Type
operator|.
name|NODE
argument_list|,
name|Cardinality
operator|.
name|ZERO_OR_ONE
argument_list|)
block|}
argument_list|,
operator|new
name|SequenceType
argument_list|(
name|Type
operator|.
name|NODE
argument_list|,
name|Cardinality
operator|.
name|ZERO_OR_MORE
argument_list|)
argument_list|)
block|,
operator|new
name|FunctionSignature
argument_list|(
operator|new
name|QName
argument_list|(
literal|"within"
argument_list|,
name|SpatialModule
operator|.
name|NAMESPACE_URI
argument_list|,
name|SpatialModule
operator|.
name|PREFIX
argument_list|)
argument_list|,
literal|"Returns the nodes in $a that contain a geometry which is within geometry $b"
argument_list|,
operator|new
name|SequenceType
index|[]
block|{
operator|new
name|SequenceType
argument_list|(
name|Type
operator|.
name|NODE
argument_list|,
name|Cardinality
operator|.
name|ZERO_OR_MORE
argument_list|)
block|,
operator|new
name|SequenceType
argument_list|(
name|Type
operator|.
name|NODE
argument_list|,
name|Cardinality
operator|.
name|ZERO_OR_ONE
argument_list|)
block|}
argument_list|,
operator|new
name|SequenceType
argument_list|(
name|Type
operator|.
name|NODE
argument_list|,
name|Cardinality
operator|.
name|ZERO_OR_MORE
argument_list|)
argument_list|)
block|,
operator|new
name|FunctionSignature
argument_list|(
operator|new
name|QName
argument_list|(
literal|"contains"
argument_list|,
name|SpatialModule
operator|.
name|NAMESPACE_URI
argument_list|,
name|SpatialModule
operator|.
name|PREFIX
argument_list|)
argument_list|,
literal|"Returns the nodes in $a that contain a geometry which contains geometry $b"
argument_list|,
operator|new
name|SequenceType
index|[]
block|{
operator|new
name|SequenceType
argument_list|(
name|Type
operator|.
name|NODE
argument_list|,
name|Cardinality
operator|.
name|ZERO_OR_MORE
argument_list|)
block|,
operator|new
name|SequenceType
argument_list|(
name|Type
operator|.
name|NODE
argument_list|,
name|Cardinality
operator|.
name|ZERO_OR_ONE
argument_list|)
block|}
argument_list|,
operator|new
name|SequenceType
argument_list|(
name|Type
operator|.
name|NODE
argument_list|,
name|Cardinality
operator|.
name|ZERO_OR_MORE
argument_list|)
argument_list|)
block|,
operator|new
name|FunctionSignature
argument_list|(
operator|new
name|QName
argument_list|(
literal|"overlaps"
argument_list|,
name|SpatialModule
operator|.
name|NAMESPACE_URI
argument_list|,
name|SpatialModule
operator|.
name|PREFIX
argument_list|)
argument_list|,
literal|"Returns the nodes in $a that contain a geometry which overlaps geometry $b"
argument_list|,
operator|new
name|SequenceType
index|[]
block|{
operator|new
name|SequenceType
argument_list|(
name|Type
operator|.
name|NODE
argument_list|,
name|Cardinality
operator|.
name|ZERO_OR_MORE
argument_list|)
block|,
operator|new
name|SequenceType
argument_list|(
name|Type
operator|.
name|NODE
argument_list|,
name|Cardinality
operator|.
name|ZERO_OR_ONE
argument_list|)
block|}
argument_list|,
operator|new
name|SequenceType
argument_list|(
name|Type
operator|.
name|NODE
argument_list|,
name|Cardinality
operator|.
name|ZERO_OR_MORE
argument_list|)
argument_list|)
block|}
decl_stmt|;
specifier|private
name|Geometry
name|currentGeometry
decl_stmt|;
specifier|public
name|FunSpatialSearch
parameter_list|(
name|XQueryContext
name|context
parameter_list|,
name|FunctionSignature
name|signature
parameter_list|)
block|{
name|super
argument_list|(
name|context
argument_list|,
name|signature
argument_list|)
expr_stmt|;
block|}
specifier|public
name|Sequence
name|eval
parameter_list|(
name|Sequence
index|[]
name|args
parameter_list|,
name|Sequence
name|contextSequence
parameter_list|)
throws|throws
name|XPathException
block|{
name|Sequence
name|result
init|=
literal|null
decl_stmt|;
name|Sequence
name|nodes
init|=
name|args
index|[
literal|0
index|]
decl_stmt|;
if|if
condition|(
name|nodes
operator|.
name|isEmpty
argument_list|()
condition|)
name|result
operator|=
name|Sequence
operator|.
name|EMPTY_SEQUENCE
expr_stmt|;
if|else if
condition|(
name|args
index|[
literal|1
index|]
operator|.
name|isEmpty
argument_list|()
condition|)
name|result
operator|=
name|nodes
expr_stmt|;
else|else
block|{
name|AbstractGMLJDBCIndexWorker
name|indexWorker
init|=
operator|(
name|AbstractGMLJDBCIndexWorker
operator|)
name|context
operator|.
name|getBroker
argument_list|()
operator|.
name|getIndexController
argument_list|()
operator|.
name|getIndexWorkerById
argument_list|(
name|AbstractGMLJDBCIndex
operator|.
name|ID
argument_list|)
decl_stmt|;
if|if
condition|(
name|indexWorker
operator|==
literal|null
condition|)
throw|throw
operator|new
name|XPathException
argument_list|(
literal|"Unable to find a spatial index worker"
argument_list|)
throw|;
name|Geometry
name|EPSG4326_geometry
init|=
literal|null
decl_stmt|;
name|NodeValue
name|geometryNode
init|=
operator|(
name|NodeValue
operator|)
name|args
index|[
literal|1
index|]
operator|.
name|itemAt
argument_list|(
literal|0
argument_list|)
decl_stmt|;
if|if
condition|(
name|geometryNode
operator|.
name|getImplementationType
argument_list|()
operator|==
name|NodeValue
operator|.
name|PERSISTENT_NODE
condition|)
comment|//The node should be indexed
name|EPSG4326_geometry
operator|=
name|indexWorker
operator|.
name|getGeometryForNode
argument_list|(
name|context
operator|.
name|getBroker
argument_list|()
argument_list|,
operator|(
name|NodeProxy
operator|)
name|geometryNode
argument_list|)
expr_stmt|;
if|if
condition|(
name|EPSG4326_geometry
operator|==
literal|null
condition|)
block|{
comment|//builds the geometry
name|GMLHandlerJTS
name|geometryHandler
init|=
operator|new
name|GeometryHandler
argument_list|()
decl_stmt|;
name|GMLFilterGeometry
name|geometryFilter
init|=
operator|new
name|GMLFilterGeometry
argument_list|(
name|geometryHandler
argument_list|)
decl_stmt|;
name|GMLFilterDocument
name|handler
init|=
operator|new
name|GMLFilterDocument
argument_list|(
name|geometryFilter
argument_list|)
decl_stmt|;
try|try
block|{
name|geometryNode
operator|.
name|toSAX
argument_list|(
name|context
operator|.
name|getBroker
argument_list|()
argument_list|,
operator|(
name|ContentHandler
operator|)
name|handler
argument_list|,
literal|null
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|SAXException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|XPathException
argument_list|(
literal|"Unable to serialize '"
operator|+
name|geometryNode
operator|+
literal|"' as a valid GML geometry"
argument_list|,
name|e
argument_list|)
throw|;
block|}
if|if
condition|(
name|currentGeometry
operator|==
literal|null
condition|)
throw|throw
operator|new
name|XPathException
argument_list|(
name|geometryNode
operator|.
name|getNode
argument_list|()
operator|.
name|getLocalName
argument_list|()
operator|+
literal|" is not a GML geometry node"
argument_list|)
throw|;
name|String
name|srsName
init|=
operator|(
operator|(
name|Element
operator|)
name|geometryNode
operator|)
operator|.
name|getAttribute
argument_list|(
literal|"srsName"
argument_list|)
decl_stmt|;
comment|//provisional workaround
if|if
condition|(
literal|"osgb:BNG"
operator|.
name|equals
argument_list|(
name|srsName
argument_list|)
condition|)
name|srsName
operator|=
literal|"EPSG:27700"
expr_stmt|;
name|MathTransform
name|mathTransform
init|=
name|indexWorker
operator|.
name|getTransform
argument_list|(
name|srsName
argument_list|,
literal|"EPSG:4326"
argument_list|)
decl_stmt|;
if|if
condition|(
name|mathTransform
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|XPathException
argument_list|(
literal|"Unable to get a transformation from '"
operator|+
name|srsName
operator|+
literal|"' to 'EPSG:4326'"
argument_list|)
throw|;
block|}
name|indexWorker
operator|.
name|getCoordinateTransformer
argument_list|()
operator|.
name|setMathTransform
argument_list|(
name|mathTransform
argument_list|)
expr_stmt|;
try|try
block|{
name|EPSG4326_geometry
operator|=
name|indexWorker
operator|.
name|getCoordinateTransformer
argument_list|()
operator|.
name|transform
argument_list|(
name|currentGeometry
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|TransformException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|XPathException
argument_list|(
name|e
argument_list|)
throw|;
block|}
block|}
name|int
name|spatialOp
init|=
name|SpatialOperator
operator|.
name|UNKNOWN
decl_stmt|;
if|if
condition|(
name|isCalledAs
argument_list|(
literal|"equals"
argument_list|)
condition|)
name|spatialOp
operator|=
name|SpatialOperator
operator|.
name|EQUALS
expr_stmt|;
if|else if
condition|(
name|isCalledAs
argument_list|(
literal|"disjoint"
argument_list|)
condition|)
name|spatialOp
operator|=
name|SpatialOperator
operator|.
name|DISJOINT
expr_stmt|;
if|else if
condition|(
name|isCalledAs
argument_list|(
literal|"intersects"
argument_list|)
condition|)
name|spatialOp
operator|=
name|SpatialOperator
operator|.
name|INTERSECTS
expr_stmt|;
if|else if
condition|(
name|isCalledAs
argument_list|(
literal|"touches"
argument_list|)
condition|)
name|spatialOp
operator|=
name|SpatialOperator
operator|.
name|TOUCHES
expr_stmt|;
if|else if
condition|(
name|isCalledAs
argument_list|(
literal|"crosses"
argument_list|)
condition|)
name|spatialOp
operator|=
name|SpatialOperator
operator|.
name|CROSSES
expr_stmt|;
if|else if
condition|(
name|isCalledAs
argument_list|(
literal|"within"
argument_list|)
condition|)
name|spatialOp
operator|=
name|SpatialOperator
operator|.
name|WITHIN
expr_stmt|;
if|else if
condition|(
name|isCalledAs
argument_list|(
literal|"contains"
argument_list|)
condition|)
name|spatialOp
operator|=
name|SpatialOperator
operator|.
name|CONTAINS
expr_stmt|;
if|else if
condition|(
name|isCalledAs
argument_list|(
literal|"overlaps"
argument_list|)
condition|)
name|spatialOp
operator|=
name|SpatialOperator
operator|.
name|OVERLAPS
expr_stmt|;
name|result
operator|=
name|indexWorker
operator|.
name|search
argument_list|(
name|context
operator|.
name|getBroker
argument_list|()
argument_list|,
name|nodes
operator|.
name|toNodeSet
argument_list|()
argument_list|,
name|EPSG4326_geometry
argument_list|,
name|spatialOp
argument_list|)
expr_stmt|;
block|}
return|return
name|result
return|;
block|}
specifier|public
name|int
name|returnsType
parameter_list|()
block|{
return|return
name|Type
operator|.
name|NODE
return|;
block|}
specifier|private
class|class
name|GeometryHandler
extends|extends
name|XMLFilterImpl
implements|implements
name|GMLHandlerJTS
block|{
specifier|public
name|void
name|geometry
parameter_list|(
name|Geometry
name|geometry
parameter_list|)
block|{
name|currentGeometry
operator|=
name|geometry
expr_stmt|;
block|}
block|}
block|}
end_class

end_unit

