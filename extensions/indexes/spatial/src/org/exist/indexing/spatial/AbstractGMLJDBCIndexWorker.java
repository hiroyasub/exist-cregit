begin_unit|revision:1.0.0;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  *  eXist Open Source Native XML Database  *  Copyright (C) 2007 The eXist Project  *  http://exist-db.org  *  *  This program is free software; you can redistribute it and/or  *  modify it under the terms of the GNU Lesser General Public License  *  as published by the Free Software Foundation; either version 2  *  of the License, or (at your option) any later version.  *  *  This program is distributed in the hope that it will be useful,  *  but WITHOUT ANY WARRANTY; without even the implied warranty of  *  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the  *  GNU Lesser General Public License for more details.  *  *  You should have received a copy of the GNU Lesser General Public License  *  along with this program; if not, write to the Free Software  *  Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301  USA  *   *  $Id$  *    *  @author Pierrick Brihaye<pierrick.brihaye@free.fr>  */
end_comment

begin_package
package|package
name|org
operator|.
name|exist
operator|.
name|indexing
operator|.
name|spatial
package|;
end_package

begin_import
import|import
name|com
operator|.
name|vividsolutions
operator|.
name|jts
operator|.
name|geom
operator|.
name|Geometry
import|;
end_import

begin_import
import|import
name|com
operator|.
name|vividsolutions
operator|.
name|jts
operator|.
name|io
operator|.
name|WKBReader
import|;
end_import

begin_import
import|import
name|com
operator|.
name|vividsolutions
operator|.
name|jts
operator|.
name|io
operator|.
name|WKBWriter
import|;
end_import

begin_import
import|import
name|com
operator|.
name|vividsolutions
operator|.
name|jts
operator|.
name|io
operator|.
name|WKTReader
import|;
end_import

begin_import
import|import
name|com
operator|.
name|vividsolutions
operator|.
name|jts
operator|.
name|io
operator|.
name|WKTWriter
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|log4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|collections
operator|.
name|Collection
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|dom
operator|.
name|AttrImpl
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|dom
operator|.
name|DocumentImpl
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|dom
operator|.
name|DocumentSet
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|dom
operator|.
name|ElementImpl
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|dom
operator|.
name|NodeProxy
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|dom
operator|.
name|NodeSet
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|dom
operator|.
name|StoredNode
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|dom
operator|.
name|TextImpl
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|indexing
operator|.
name|AbstractStreamListener
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|indexing
operator|.
name|Index
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|indexing
operator|.
name|IndexController
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|indexing
operator|.
name|IndexWorker
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|indexing
operator|.
name|MatchListener
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|indexing
operator|.
name|StreamListener
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|numbering
operator|.
name|NodeId
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|storage
operator|.
name|DBBroker
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|storage
operator|.
name|IndexSpec
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|storage
operator|.
name|NodePath
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|storage
operator|.
name|txn
operator|.
name|Txn
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|util
operator|.
name|Base64Decoder
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|util
operator|.
name|Base64Encoder
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|util
operator|.
name|DatabaseConfigurationException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|util
operator|.
name|Occurrences
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|util
operator|.
name|serializer
operator|.
name|Receiver
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|xquery
operator|.
name|XPathException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|xquery
operator|.
name|XQueryContext
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|xquery
operator|.
name|value
operator|.
name|AtomicValue
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|xquery
operator|.
name|value
operator|.
name|NodeValue
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|xquery
operator|.
name|value
operator|.
name|ValueSequence
import|;
end_import

begin_import
import|import
name|org
operator|.
name|geotools
operator|.
name|geometry
operator|.
name|jts
operator|.
name|GeometryCoordinateSequenceTransformer
import|;
end_import

begin_import
import|import
name|org
operator|.
name|geotools
operator|.
name|gml
operator|.
name|GMLFilterDocument
import|;
end_import

begin_import
import|import
name|org
operator|.
name|geotools
operator|.
name|gml
operator|.
name|GMLFilterGeometry
import|;
end_import

begin_import
import|import
name|org
operator|.
name|geotools
operator|.
name|gml
operator|.
name|GMLHandlerJTS
import|;
end_import

begin_import
import|import
name|org
operator|.
name|geotools
operator|.
name|gml
operator|.
name|producer
operator|.
name|GeometryTransformer
import|;
end_import

begin_import
import|import
name|org
operator|.
name|geotools
operator|.
name|referencing
operator|.
name|CRS
import|;
end_import

begin_import
import|import
name|org
operator|.
name|opengis
operator|.
name|referencing
operator|.
name|FactoryException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|opengis
operator|.
name|referencing
operator|.
name|NoSuchAuthorityCodeException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|opengis
operator|.
name|referencing
operator|.
name|operation
operator|.
name|MathTransform
import|;
end_import

begin_import
import|import
name|org
operator|.
name|opengis
operator|.
name|referencing
operator|.
name|operation
operator|.
name|OperationNotFoundException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|opengis
operator|.
name|referencing
operator|.
name|operation
operator|.
name|TransformException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|w3c
operator|.
name|dom
operator|.
name|Document
import|;
end_import

begin_import
import|import
name|org
operator|.
name|w3c
operator|.
name|dom
operator|.
name|Element
import|;
end_import

begin_import
import|import
name|org
operator|.
name|w3c
operator|.
name|dom
operator|.
name|NamedNodeMap
import|;
end_import

begin_import
import|import
name|org
operator|.
name|w3c
operator|.
name|dom
operator|.
name|Node
import|;
end_import

begin_import
import|import
name|org
operator|.
name|w3c
operator|.
name|dom
operator|.
name|NodeList
import|;
end_import

begin_import
import|import
name|org
operator|.
name|xml
operator|.
name|sax
operator|.
name|ContentHandler
import|;
end_import

begin_import
import|import
name|org
operator|.
name|xml
operator|.
name|sax
operator|.
name|InputSource
import|;
end_import

begin_import
import|import
name|org
operator|.
name|xml
operator|.
name|sax
operator|.
name|SAXException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|xml
operator|.
name|sax
operator|.
name|XMLReader
import|;
end_import

begin_import
import|import
name|org
operator|.
name|xml
operator|.
name|sax
operator|.
name|helpers
operator|.
name|AttributesImpl
import|;
end_import

begin_import
import|import
name|org
operator|.
name|xml
operator|.
name|sax
operator|.
name|helpers
operator|.
name|XMLFilterImpl
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|xml
operator|.
name|parsers
operator|.
name|ParserConfigurationException
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|xml
operator|.
name|parsers
operator|.
name|SAXParser
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|xml
operator|.
name|parsers
operator|.
name|SAXParserFactory
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|xml
operator|.
name|transform
operator|.
name|TransformerException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|StringReader
import|;
end_import

begin_import
import|import
name|java
operator|.
name|sql
operator|.
name|Connection
import|;
end_import

begin_import
import|import
name|java
operator|.
name|sql
operator|.
name|SQLException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Iterator
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Stack
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|TreeMap
import|;
end_import

begin_class
specifier|public
specifier|abstract
class|class
name|AbstractGMLJDBCIndexWorker
implements|implements
name|IndexWorker
block|{
specifier|public
specifier|static
specifier|final
name|String
name|GML_NS
init|=
literal|"http://www.opengis.net/gml"
decl_stmt|;
comment|//The general configuration's element name to configure this kind of worker
specifier|protected
specifier|final
specifier|static
name|String
name|INDEX_ELEMENT
init|=
literal|"gml"
decl_stmt|;
specifier|public
specifier|static
specifier|final
name|String
name|START_KEY
init|=
literal|"start_key"
decl_stmt|;
specifier|public
specifier|static
specifier|final
name|String
name|END_KEY
init|=
literal|"end_key"
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|Logger
name|LOG
init|=
name|Logger
operator|.
name|getLogger
argument_list|(
name|AbstractGMLJDBCIndexWorker
operator|.
name|class
argument_list|)
decl_stmt|;
specifier|protected
name|IndexController
name|controller
decl_stmt|;
specifier|protected
name|AbstractGMLJDBCIndex
name|index
decl_stmt|;
specifier|protected
name|DBBroker
name|broker
decl_stmt|;
specifier|protected
name|int
name|currentMode
init|=
name|StreamListener
operator|.
name|UNKNOWN
decl_stmt|;
specifier|protected
name|DocumentImpl
name|currentDoc
init|=
literal|null
decl_stmt|;
specifier|private
name|boolean
name|isDocumentGMLAware
init|=
literal|false
decl_stmt|;
specifier|protected
name|Map
name|geometries
init|=
operator|new
name|TreeMap
argument_list|()
decl_stmt|;
name|NodeId
name|currentNodeId
init|=
literal|null
decl_stmt|;
name|Geometry
name|streamedGeometry
init|=
literal|null
decl_stmt|;
name|boolean
name|documentDeleted
init|=
literal|false
decl_stmt|;
name|int
name|flushAfter
init|=
operator|-
literal|1
decl_stmt|;
specifier|protected
name|GMLHandlerJTS
name|geometryHandler
init|=
operator|new
name|GeometryHandler
argument_list|()
decl_stmt|;
specifier|protected
name|GMLFilterGeometry
name|geometryFilter
init|=
operator|new
name|GMLFilterGeometry
argument_list|(
name|geometryHandler
argument_list|)
decl_stmt|;
specifier|protected
name|GMLFilterDocument
name|geometryDocument
init|=
operator|new
name|GMLFilterDocument
argument_list|(
name|geometryFilter
argument_list|)
decl_stmt|;
specifier|protected
name|GMLStreamListener
name|gmlStreamListener
init|=
operator|new
name|GMLStreamListener
argument_list|()
decl_stmt|;
specifier|protected
name|TreeMap
name|transformations
init|=
operator|new
name|TreeMap
argument_list|()
decl_stmt|;
specifier|protected
name|boolean
name|useLenientMode
init|=
literal|false
decl_stmt|;
specifier|protected
name|GeometryCoordinateSequenceTransformer
name|coordinateTransformer
init|=
operator|new
name|GeometryCoordinateSequenceTransformer
argument_list|()
decl_stmt|;
specifier|protected
name|GeometryTransformer
name|gmlTransformer
init|=
operator|new
name|GeometryTransformer
argument_list|()
decl_stmt|;
specifier|protected
name|WKBWriter
name|wkbWriter
init|=
operator|new
name|WKBWriter
argument_list|()
decl_stmt|;
specifier|protected
name|WKBReader
name|wkbReader
init|=
operator|new
name|WKBReader
argument_list|()
decl_stmt|;
specifier|protected
name|WKTWriter
name|wktWriter
init|=
operator|new
name|WKTWriter
argument_list|()
decl_stmt|;
specifier|protected
name|WKTReader
name|wktReader
init|=
operator|new
name|WKTReader
argument_list|()
decl_stmt|;
specifier|protected
name|Base64Encoder
name|base64Encoder
init|=
operator|new
name|Base64Encoder
argument_list|()
decl_stmt|;
specifier|protected
name|Base64Decoder
name|base64Decoder
init|=
operator|new
name|Base64Decoder
argument_list|()
decl_stmt|;
specifier|public
name|AbstractGMLJDBCIndexWorker
parameter_list|(
name|AbstractGMLJDBCIndex
name|index
parameter_list|,
name|DBBroker
name|broker
parameter_list|)
block|{
name|this
operator|.
name|index
operator|=
name|index
expr_stmt|;
name|this
operator|.
name|broker
operator|=
name|broker
expr_stmt|;
block|}
specifier|public
name|String
name|getIndexId
parameter_list|()
block|{
return|return
name|AbstractGMLJDBCIndex
operator|.
name|ID
return|;
block|}
specifier|public
name|String
name|getIndexName
parameter_list|()
block|{
return|return
name|index
operator|.
name|getIndexName
argument_list|()
return|;
block|}
specifier|public
name|Index
name|getIndex
parameter_list|()
block|{
return|return
name|index
return|;
block|}
specifier|public
name|Object
name|configure
parameter_list|(
name|IndexController
name|controller
parameter_list|,
name|NodeList
name|configNodes
parameter_list|,
name|Map
name|namespaces
parameter_list|)
throws|throws
name|DatabaseConfigurationException
block|{
name|this
operator|.
name|controller
operator|=
name|controller
expr_stmt|;
name|Map
name|map
init|=
literal|null
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|configNodes
operator|.
name|getLength
argument_list|()
condition|;
name|i
operator|++
control|)
block|{
name|Node
name|node
init|=
name|configNodes
operator|.
name|item
argument_list|(
name|i
argument_list|)
decl_stmt|;
if|if
condition|(
name|node
operator|.
name|getNodeType
argument_list|()
operator|==
name|Node
operator|.
name|ELEMENT_NODE
operator|&&
name|INDEX_ELEMENT
operator|.
name|equals
argument_list|(
name|node
operator|.
name|getLocalName
argument_list|()
argument_list|)
condition|)
block|{
name|map
operator|=
operator|new
name|TreeMap
argument_list|()
expr_stmt|;
name|GMLIndexConfig
name|config
init|=
operator|new
name|GMLIndexConfig
argument_list|(
name|namespaces
argument_list|,
operator|(
name|Element
operator|)
name|node
argument_list|)
decl_stmt|;
name|map
operator|.
name|put
argument_list|(
name|AbstractGMLJDBCIndex
operator|.
name|ID
argument_list|,
name|config
argument_list|)
expr_stmt|;
block|}
block|}
return|return
name|map
return|;
block|}
specifier|public
name|void
name|setDocument
parameter_list|(
name|DocumentImpl
name|document
parameter_list|)
block|{
name|isDocumentGMLAware
operator|=
literal|false
expr_stmt|;
name|documentDeleted
operator|=
literal|false
expr_stmt|;
if|if
condition|(
name|document
operator|!=
literal|null
condition|)
block|{
name|IndexSpec
name|idxConf
init|=
name|document
operator|.
name|getCollection
argument_list|()
operator|.
name|getIndexConfiguration
argument_list|(
name|document
operator|.
name|getBroker
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|idxConf
operator|!=
literal|null
condition|)
block|{
name|Map
name|collectionConfig
init|=
operator|(
name|Map
operator|)
name|idxConf
operator|.
name|getCustomIndexSpec
argument_list|(
name|AbstractGMLJDBCIndex
operator|.
name|ID
argument_list|)
decl_stmt|;
if|if
condition|(
name|collectionConfig
operator|!=
literal|null
condition|)
block|{
name|isDocumentGMLAware
operator|=
literal|true
expr_stmt|;
if|if
condition|(
name|collectionConfig
operator|.
name|get
argument_list|(
name|AbstractGMLJDBCIndex
operator|.
name|ID
argument_list|)
operator|!=
literal|null
condition|)
name|flushAfter
operator|=
operator|(
operator|(
name|GMLIndexConfig
operator|)
name|collectionConfig
operator|.
name|get
argument_list|(
name|AbstractGMLJDBCIndex
operator|.
name|ID
argument_list|)
operator|)
operator|.
name|getFlushAfter
argument_list|()
expr_stmt|;
block|}
block|}
block|}
if|if
condition|(
name|isDocumentGMLAware
condition|)
block|{
name|currentDoc
operator|=
name|document
expr_stmt|;
block|}
else|else
block|{
name|currentDoc
operator|=
literal|null
expr_stmt|;
name|currentMode
operator|=
name|StreamListener
operator|.
name|UNKNOWN
expr_stmt|;
block|}
block|}
specifier|public
name|void
name|setMode
parameter_list|(
name|int
name|newMode
parameter_list|)
block|{
name|currentMode
operator|=
name|newMode
expr_stmt|;
block|}
specifier|public
name|void
name|setDocument
parameter_list|(
name|DocumentImpl
name|doc
parameter_list|,
name|int
name|mode
parameter_list|)
block|{
name|setDocument
argument_list|(
name|doc
argument_list|)
expr_stmt|;
name|setMode
argument_list|(
name|mode
argument_list|)
expr_stmt|;
block|}
comment|/**      * Returns the document for the next operation.      *       * @return the document      */
specifier|public
name|DocumentImpl
name|getDocument
parameter_list|()
block|{
return|return
name|currentDoc
return|;
block|}
comment|/**      * Returns the mode for the next operation.      *       * @return the document      */
specifier|public
name|int
name|getMode
parameter_list|()
block|{
return|return
name|currentMode
return|;
block|}
specifier|public
name|StreamListener
name|getListener
parameter_list|()
block|{
comment|//We won't listen to anything here
if|if
condition|(
name|currentDoc
operator|==
literal|null
operator|||
name|currentMode
operator|==
name|StreamListener
operator|.
name|REMOVE_ALL_NODES
condition|)
return|return
literal|null
return|;
return|return
name|gmlStreamListener
return|;
block|}
specifier|public
name|MatchListener
name|getMatchListener
parameter_list|(
name|DBBroker
name|broker
parameter_list|,
name|NodeProxy
name|proxy
parameter_list|)
block|{
return|return
literal|null
return|;
block|}
specifier|public
name|StoredNode
name|getReindexRoot
parameter_list|(
name|StoredNode
name|node
parameter_list|,
name|NodePath
name|path
parameter_list|,
name|boolean
name|includeSelf
parameter_list|)
block|{
if|if
condition|(
operator|!
name|isDocumentGMLAware
condition|)
comment|//Not concerned
return|return
literal|null
return|;
name|StoredNode
name|topMost
init|=
name|node
decl_stmt|;
name|StoredNode
name|currentNode
init|=
name|node
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
name|path
operator|.
name|length
argument_list|()
init|;
name|i
operator|>
literal|0
condition|;
name|i
operator|--
control|)
block|{
name|currentNode
operator|=
operator|(
name|StoredNode
operator|)
name|currentNode
operator|.
name|getParentNode
argument_list|()
expr_stmt|;
if|if
condition|(
name|GML_NS
operator|.
name|equals
argument_list|(
name|currentNode
operator|.
name|getNamespaceURI
argument_list|()
argument_list|)
condition|)
comment|//TODO : retain only geometries
name|topMost
operator|=
name|currentNode
expr_stmt|;
block|}
return|return
name|topMost
return|;
block|}
specifier|public
name|void
name|flush
parameter_list|()
block|{
if|if
condition|(
operator|!
name|isDocumentGMLAware
condition|)
comment|//Not concerned
return|return;
comment|//Is the job already done ?
if|if
condition|(
name|currentMode
operator|==
name|StreamListener
operator|.
name|REMOVE_ALL_NODES
operator|&&
name|documentDeleted
condition|)
return|return;
name|Connection
name|conn
init|=
literal|null
decl_stmt|;
try|try
block|{
name|conn
operator|=
name|acquireConnection
argument_list|()
expr_stmt|;
name|conn
operator|.
name|setAutoCommit
argument_list|(
literal|false
argument_list|)
expr_stmt|;
switch|switch
condition|(
name|currentMode
condition|)
block|{
case|case
name|StreamListener
operator|.
name|STORE
case|:
name|saveDocumentNodes
argument_list|(
name|conn
argument_list|)
expr_stmt|;
break|break;
case|case
name|StreamListener
operator|.
name|REMOVE_SOME_NODES
case|:
name|dropDocumentNode
argument_list|(
name|conn
argument_list|)
expr_stmt|;
break|break;
case|case
name|StreamListener
operator|.
name|REMOVE_ALL_NODES
case|:
name|removeDocument
argument_list|(
name|conn
argument_list|)
expr_stmt|;
name|documentDeleted
operator|=
literal|true
expr_stmt|;
break|break;
block|}
name|conn
operator|.
name|commit
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|SQLException
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|error
argument_list|(
literal|"Document: "
operator|+
name|currentDoc
operator|+
literal|" NodeID: "
operator|+
name|currentNodeId
argument_list|,
name|e
argument_list|)
expr_stmt|;
try|try
block|{
name|conn
operator|.
name|rollback
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|SQLException
name|ee
parameter_list|)
block|{
name|LOG
operator|.
name|error
argument_list|(
name|ee
argument_list|)
expr_stmt|;
block|}
block|}
finally|finally
block|{
try|try
block|{
if|if
condition|(
name|conn
operator|!=
literal|null
condition|)
block|{
name|conn
operator|.
name|setAutoCommit
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|releaseConnection
argument_list|(
name|conn
argument_list|)
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
name|SQLException
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|error
argument_list|(
name|e
argument_list|)
expr_stmt|;
block|}
block|}
block|}
specifier|private
name|void
name|saveDocumentNodes
parameter_list|(
name|Connection
name|conn
parameter_list|)
throws|throws
name|SQLException
block|{
if|if
condition|(
name|geometries
operator|.
name|size
argument_list|()
operator|==
literal|0
condition|)
return|return;
try|try
block|{
for|for
control|(
name|Iterator
name|iterator
init|=
name|geometries
operator|.
name|entrySet
argument_list|()
operator|.
name|iterator
argument_list|()
init|;
name|iterator
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|Map
operator|.
name|Entry
name|entry
init|=
operator|(
name|Map
operator|.
name|Entry
operator|)
name|iterator
operator|.
name|next
argument_list|()
decl_stmt|;
name|NodeId
name|nodeId
init|=
operator|(
name|NodeId
operator|)
name|entry
operator|.
name|getKey
argument_list|()
decl_stmt|;
name|SRSGeometry
name|srsGeometry
init|=
operator|(
name|SRSGeometry
operator|)
name|entry
operator|.
name|getValue
argument_list|()
decl_stmt|;
try|try
block|{
name|saveGeometryNode
argument_list|(
name|srsGeometry
operator|.
name|getGeometry
argument_list|()
argument_list|,
name|srsGeometry
operator|.
name|getSRSName
argument_list|()
argument_list|,
name|currentDoc
argument_list|,
name|nodeId
argument_list|,
name|conn
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
comment|//Help the garbage collector
name|srsGeometry
operator|=
literal|null
expr_stmt|;
block|}
block|}
block|}
finally|finally
block|{
name|geometries
operator|.
name|clear
argument_list|()
expr_stmt|;
block|}
block|}
specifier|private
name|void
name|dropDocumentNode
parameter_list|(
name|Connection
name|conn
parameter_list|)
throws|throws
name|SQLException
block|{
if|if
condition|(
name|currentNodeId
operator|==
literal|null
condition|)
return|return;
try|try
block|{
name|boolean
name|removed
init|=
name|removeDocumentNode
argument_list|(
name|currentDoc
argument_list|,
name|currentNodeId
argument_list|,
name|conn
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|removed
condition|)
name|LOG
operator|.
name|error
argument_list|(
literal|"No data dropped for node "
operator|+
name|currentNodeId
operator|.
name|toString
argument_list|()
operator|+
literal|" from GML index"
argument_list|)
expr_stmt|;
else|else
block|{
if|if
condition|(
name|LOG
operator|.
name|isDebugEnabled
argument_list|()
condition|)
name|LOG
operator|.
name|debug
argument_list|(
literal|"Dropped data for node "
operator|+
name|currentNodeId
operator|.
name|toString
argument_list|()
operator|+
literal|" from GML index"
argument_list|)
expr_stmt|;
block|}
block|}
finally|finally
block|{
name|currentNodeId
operator|=
literal|null
expr_stmt|;
block|}
block|}
specifier|private
name|void
name|removeDocument
parameter_list|(
name|Connection
name|conn
parameter_list|)
throws|throws
name|SQLException
block|{
if|if
condition|(
name|LOG
operator|.
name|isDebugEnabled
argument_list|()
condition|)
name|LOG
operator|.
name|debug
argument_list|(
literal|"Dropping GML index for document "
operator|+
name|currentDoc
operator|.
name|getURI
argument_list|()
argument_list|)
expr_stmt|;
name|int
name|nodeCount
init|=
name|removeDocument
argument_list|(
name|currentDoc
argument_list|,
name|conn
argument_list|)
decl_stmt|;
if|if
condition|(
name|LOG
operator|.
name|isDebugEnabled
argument_list|()
condition|)
name|LOG
operator|.
name|debug
argument_list|(
literal|"Dropped "
operator|+
name|nodeCount
operator|+
literal|" nodes from GML index"
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|removeCollection
parameter_list|(
name|Collection
name|collection
parameter_list|,
name|DBBroker
name|broker
parameter_list|)
block|{
name|boolean
name|isCollectionGMLAware
init|=
literal|false
decl_stmt|;
name|IndexSpec
name|idxConf
init|=
name|collection
operator|.
name|getIndexConfiguration
argument_list|(
name|broker
argument_list|)
decl_stmt|;
if|if
condition|(
name|idxConf
operator|!=
literal|null
condition|)
block|{
name|Map
name|collectionConfig
init|=
operator|(
name|Map
operator|)
name|idxConf
operator|.
name|getCustomIndexSpec
argument_list|(
name|AbstractGMLJDBCIndex
operator|.
name|ID
argument_list|)
decl_stmt|;
if|if
condition|(
name|collectionConfig
operator|!=
literal|null
condition|)
block|{
name|isCollectionGMLAware
operator|=
operator|(
name|collectionConfig
operator|!=
literal|null
operator|)
expr_stmt|;
block|}
block|}
if|if
condition|(
operator|!
name|isCollectionGMLAware
condition|)
return|return;
name|Connection
name|conn
init|=
literal|null
decl_stmt|;
try|try
block|{
name|conn
operator|=
name|acquireConnection
argument_list|()
expr_stmt|;
if|if
condition|(
name|LOG
operator|.
name|isDebugEnabled
argument_list|()
condition|)
name|LOG
operator|.
name|debug
argument_list|(
literal|"Dropping GML index for collection "
operator|+
name|collection
operator|.
name|getURI
argument_list|()
argument_list|)
expr_stmt|;
name|int
name|nodeCount
init|=
name|removeCollection
argument_list|(
name|collection
argument_list|,
name|conn
argument_list|)
decl_stmt|;
if|if
condition|(
name|LOG
operator|.
name|isDebugEnabled
argument_list|()
condition|)
name|LOG
operator|.
name|debug
argument_list|(
literal|"Dropped "
operator|+
name|nodeCount
operator|+
literal|" nodes from GML index"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|SQLException
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|error
argument_list|(
name|e
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
try|try
block|{
if|if
condition|(
name|conn
operator|!=
literal|null
condition|)
name|releaseConnection
argument_list|(
name|conn
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|SQLException
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|error
argument_list|(
name|e
argument_list|)
expr_stmt|;
block|}
block|}
block|}
specifier|public
name|NodeSet
name|search
parameter_list|(
name|DBBroker
name|broker
parameter_list|,
name|NodeSet
name|contextSet
parameter_list|,
name|Geometry
name|EPSG4326_geometry
parameter_list|,
name|int
name|spatialOp
parameter_list|)
throws|throws
name|SpatialIndexException
block|{
name|Connection
name|conn
init|=
literal|null
decl_stmt|;
try|try
block|{
name|conn
operator|=
name|acquireConnection
argument_list|()
expr_stmt|;
return|return
name|search
argument_list|(
name|broker
argument_list|,
name|contextSet
argument_list|,
name|EPSG4326_geometry
argument_list|,
name|spatialOp
argument_list|,
name|conn
argument_list|)
return|;
block|}
catch|catch
parameter_list|(
name|SQLException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|SpatialIndexException
argument_list|(
name|e
argument_list|)
throw|;
block|}
finally|finally
block|{
try|try
block|{
if|if
condition|(
name|conn
operator|!=
literal|null
condition|)
name|releaseConnection
argument_list|(
name|conn
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|SQLException
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|error
argument_list|(
name|e
argument_list|)
expr_stmt|;
return|return
literal|null
return|;
block|}
block|}
block|}
specifier|public
name|Geometry
name|getGeometryForNode
parameter_list|(
name|DBBroker
name|broker
parameter_list|,
name|NodeProxy
name|p
parameter_list|,
name|boolean
name|getEPSG4326
parameter_list|)
throws|throws
name|SpatialIndexException
block|{
name|Connection
name|conn
init|=
literal|null
decl_stmt|;
try|try
block|{
name|conn
operator|=
name|acquireConnection
argument_list|()
expr_stmt|;
return|return
name|getGeometryForNode
argument_list|(
name|broker
argument_list|,
name|p
argument_list|,
name|getEPSG4326
argument_list|,
name|conn
argument_list|)
return|;
block|}
catch|catch
parameter_list|(
name|SQLException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|SpatialIndexException
argument_list|(
name|e
argument_list|)
throw|;
block|}
finally|finally
block|{
try|try
block|{
if|if
condition|(
name|conn
operator|!=
literal|null
condition|)
name|releaseConnection
argument_list|(
name|conn
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|SQLException
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|error
argument_list|(
name|e
argument_list|)
expr_stmt|;
return|return
literal|null
return|;
block|}
block|}
block|}
specifier|protected
name|Geometry
index|[]
name|getGeometriesForNodes
parameter_list|(
name|DBBroker
name|broker
parameter_list|,
name|NodeSet
name|contextSet
parameter_list|,
name|boolean
name|getEPSG4326
parameter_list|)
throws|throws
name|SpatialIndexException
block|{
name|Connection
name|conn
init|=
literal|null
decl_stmt|;
try|try
block|{
name|conn
operator|=
name|acquireConnection
argument_list|()
expr_stmt|;
return|return
name|getGeometriesForNodes
argument_list|(
name|broker
argument_list|,
name|contextSet
argument_list|,
name|getEPSG4326
argument_list|,
name|conn
argument_list|)
return|;
block|}
catch|catch
parameter_list|(
name|SQLException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|SpatialIndexException
argument_list|(
name|e
argument_list|)
throw|;
block|}
finally|finally
block|{
try|try
block|{
if|if
condition|(
name|conn
operator|!=
literal|null
condition|)
name|releaseConnection
argument_list|(
name|conn
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|SQLException
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|error
argument_list|(
name|e
argument_list|)
expr_stmt|;
return|return
literal|null
return|;
block|}
block|}
block|}
specifier|public
name|AtomicValue
name|getGeometricPropertyForNode
parameter_list|(
name|DBBroker
name|broker
parameter_list|,
name|NodeProxy
name|p
parameter_list|,
name|String
name|propertyName
parameter_list|)
throws|throws
name|SpatialIndexException
block|{
name|Connection
name|conn
init|=
literal|null
decl_stmt|;
try|try
block|{
name|conn
operator|=
name|acquireConnection
argument_list|()
expr_stmt|;
return|return
name|getGeometricPropertyForNode
argument_list|(
name|broker
argument_list|,
name|p
argument_list|,
name|conn
argument_list|,
name|propertyName
argument_list|)
return|;
block|}
catch|catch
parameter_list|(
name|SQLException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|SpatialIndexException
argument_list|(
name|e
argument_list|)
throw|;
block|}
catch|catch
parameter_list|(
name|XPathException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|SpatialIndexException
argument_list|(
name|e
argument_list|)
throw|;
block|}
finally|finally
block|{
try|try
block|{
if|if
condition|(
name|conn
operator|!=
literal|null
condition|)
name|releaseConnection
argument_list|(
name|conn
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|SQLException
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|error
argument_list|(
name|e
argument_list|)
expr_stmt|;
return|return
literal|null
return|;
block|}
block|}
block|}
specifier|public
name|ValueSequence
name|getGeometricPropertyForNodes
parameter_list|(
name|DBBroker
name|broker
parameter_list|,
name|NodeSet
name|contextSet
parameter_list|,
name|String
name|propertyName
parameter_list|)
throws|throws
name|SpatialIndexException
block|{
name|Connection
name|conn
init|=
literal|null
decl_stmt|;
try|try
block|{
name|conn
operator|=
name|acquireConnection
argument_list|()
expr_stmt|;
return|return
name|getGeometricPropertyForNodes
argument_list|(
name|broker
argument_list|,
name|contextSet
argument_list|,
name|conn
argument_list|,
name|propertyName
argument_list|)
return|;
block|}
catch|catch
parameter_list|(
name|SQLException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|SpatialIndexException
argument_list|(
name|e
argument_list|)
throw|;
block|}
catch|catch
parameter_list|(
name|XPathException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|SpatialIndexException
argument_list|(
name|e
argument_list|)
throw|;
block|}
finally|finally
block|{
try|try
block|{
if|if
condition|(
name|conn
operator|!=
literal|null
condition|)
name|releaseConnection
argument_list|(
name|conn
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|SQLException
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|error
argument_list|(
name|e
argument_list|)
expr_stmt|;
return|return
literal|null
return|;
block|}
block|}
block|}
specifier|public
name|boolean
name|checkIndex
parameter_list|(
name|DBBroker
name|broker
parameter_list|)
block|{
name|Connection
name|conn
init|=
literal|null
decl_stmt|;
try|try
block|{
name|conn
operator|=
name|acquireConnection
argument_list|()
expr_stmt|;
return|return
name|checkIndex
argument_list|(
name|broker
argument_list|,
name|conn
argument_list|)
return|;
block|}
catch|catch
parameter_list|(
name|SQLException
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|error
argument_list|(
name|e
argument_list|)
expr_stmt|;
return|return
literal|false
return|;
block|}
catch|catch
parameter_list|(
name|SpatialIndexException
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|error
argument_list|(
name|e
argument_list|)
expr_stmt|;
return|return
literal|false
return|;
block|}
finally|finally
block|{
try|try
block|{
if|if
condition|(
name|conn
operator|!=
literal|null
condition|)
name|releaseConnection
argument_list|(
name|conn
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|SQLException
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|error
argument_list|(
name|e
argument_list|)
expr_stmt|;
return|return
literal|false
return|;
block|}
block|}
block|}
specifier|protected
specifier|abstract
name|boolean
name|saveGeometryNode
parameter_list|(
name|Geometry
name|geometry
parameter_list|,
name|String
name|srsName
parameter_list|,
name|DocumentImpl
name|doc
parameter_list|,
name|NodeId
name|nodeId
parameter_list|,
name|Connection
name|conn
parameter_list|)
throws|throws
name|SQLException
function_decl|;
specifier|protected
specifier|abstract
name|boolean
name|removeDocumentNode
parameter_list|(
name|DocumentImpl
name|doc
parameter_list|,
name|NodeId
name|nodeID
parameter_list|,
name|Connection
name|conn
parameter_list|)
throws|throws
name|SQLException
function_decl|;
specifier|protected
specifier|abstract
name|int
name|removeDocument
parameter_list|(
name|DocumentImpl
name|doc
parameter_list|,
name|Connection
name|conn
parameter_list|)
throws|throws
name|SQLException
function_decl|;
specifier|protected
specifier|abstract
name|int
name|removeCollection
parameter_list|(
name|Collection
name|collection
parameter_list|,
name|Connection
name|conn
parameter_list|)
throws|throws
name|SQLException
function_decl|;
specifier|protected
specifier|abstract
name|Map
name|getGeometriesForDocument
parameter_list|(
name|DocumentImpl
name|doc
parameter_list|,
name|Connection
name|conn
parameter_list|)
throws|throws
name|SQLException
function_decl|;
specifier|protected
specifier|abstract
name|AtomicValue
name|getGeometricPropertyForNode
parameter_list|(
name|DBBroker
name|broker
parameter_list|,
name|NodeProxy
name|p
parameter_list|,
name|Connection
name|conn
parameter_list|,
name|String
name|propertyName
parameter_list|)
throws|throws
name|SQLException
throws|,
name|XPathException
function_decl|;
specifier|protected
specifier|abstract
name|ValueSequence
name|getGeometricPropertyForNodes
parameter_list|(
name|DBBroker
name|broker
parameter_list|,
name|NodeSet
name|contextSet
parameter_list|,
name|Connection
name|conn
parameter_list|,
name|String
name|propertyName
parameter_list|)
throws|throws
name|SQLException
throws|,
name|XPathException
function_decl|;
specifier|protected
specifier|abstract
name|Geometry
name|getGeometryForNode
parameter_list|(
name|DBBroker
name|broker
parameter_list|,
name|NodeProxy
name|p
parameter_list|,
name|boolean
name|getEPSG4326
parameter_list|,
name|Connection
name|conn
parameter_list|)
throws|throws
name|SQLException
function_decl|;
specifier|protected
specifier|abstract
name|Geometry
index|[]
name|getGeometriesForNodes
parameter_list|(
name|DBBroker
name|broker
parameter_list|,
name|NodeSet
name|contextSet
parameter_list|,
name|boolean
name|getEPSG4326
parameter_list|,
name|Connection
name|conn
parameter_list|)
throws|throws
name|SQLException
function_decl|;
specifier|protected
specifier|abstract
name|NodeSet
name|search
parameter_list|(
name|DBBroker
name|broker
parameter_list|,
name|NodeSet
name|contextSet
parameter_list|,
name|Geometry
name|EPSG4326_geometry
parameter_list|,
name|int
name|spatialOp
parameter_list|,
name|Connection
name|conn
parameter_list|)
throws|throws
name|SQLException
function_decl|;
specifier|protected
specifier|abstract
name|boolean
name|checkIndex
parameter_list|(
name|DBBroker
name|broker
parameter_list|,
name|Connection
name|conn
parameter_list|)
throws|throws
name|SQLException
throws|,
name|SpatialIndexException
function_decl|;
specifier|protected
specifier|abstract
name|Connection
name|acquireConnection
parameter_list|()
throws|throws
name|SQLException
function_decl|;
specifier|protected
specifier|abstract
name|void
name|releaseConnection
parameter_list|(
name|Connection
name|conn
parameter_list|)
throws|throws
name|SQLException
function_decl|;
specifier|public
name|Occurrences
index|[]
name|scanIndex
parameter_list|(
name|XQueryContext
name|context
parameter_list|,
name|DocumentSet
name|docs
parameter_list|,
name|NodeSet
name|contextSet
parameter_list|,
name|Map
name|hints
parameter_list|)
block|{
comment|//TODO : try to use contextSet
name|Map
name|occurences
init|=
operator|new
name|TreeMap
argument_list|()
decl_stmt|;
name|Connection
name|conn
init|=
literal|null
decl_stmt|;
try|try
block|{
name|conn
operator|=
name|acquireConnection
argument_list|()
expr_stmt|;
comment|//Collect the (normalized) geometries for each document
for|for
control|(
name|Iterator
name|iDoc
init|=
name|docs
operator|.
name|getDocumentIterator
argument_list|()
init|;
name|iDoc
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|DocumentImpl
name|doc
init|=
operator|(
name|DocumentImpl
operator|)
name|iDoc
operator|.
name|next
argument_list|()
decl_stmt|;
comment|//TODO : check if document is GML-aware ?
comment|//Aggregate the occurences between different documents
for|for
control|(
name|Iterator
name|iGeom
init|=
name|getGeometriesForDocument
argument_list|(
name|doc
argument_list|,
name|conn
argument_list|)
operator|.
name|entrySet
argument_list|()
operator|.
name|iterator
argument_list|()
init|;
name|iGeom
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
comment|///TODO : use the IndexWorker.VALUE_COUNT hint, if present, to limit the number of returned entries
name|Map
operator|.
name|Entry
name|entry
init|=
operator|(
name|Map
operator|.
name|Entry
operator|)
name|iGeom
operator|.
name|next
argument_list|()
decl_stmt|;
name|Geometry
name|key
init|=
operator|(
name|Geometry
operator|)
name|entry
operator|.
name|getKey
argument_list|()
decl_stmt|;
comment|//Do we already have an occurence for this geometry ?
name|Occurrences
name|oc
init|=
operator|(
name|Occurrences
operator|)
name|occurences
operator|.
name|get
argument_list|(
name|key
argument_list|)
decl_stmt|;
if|if
condition|(
name|oc
operator|!=
literal|null
condition|)
block|{
comment|//Yes : increment occurence count
name|oc
operator|.
name|addOccurrences
argument_list|(
name|oc
operator|.
name|getOccurrences
argument_list|()
operator|+
literal|1
argument_list|)
expr_stmt|;
comment|//...and reference the document
name|oc
operator|.
name|addDocument
argument_list|(
name|doc
argument_list|)
expr_stmt|;
block|}
else|else
block|{
comment|//No : create a new occurence with EPSG4326_WKT as "term"
name|oc
operator|=
operator|new
name|Occurrences
argument_list|(
operator|(
name|String
operator|)
name|entry
operator|.
name|getValue
argument_list|()
argument_list|)
expr_stmt|;
comment|//... with a count set to 1
name|oc
operator|.
name|addOccurrences
argument_list|(
literal|1
argument_list|)
expr_stmt|;
comment|//... and reference the document
name|oc
operator|.
name|addDocument
argument_list|(
name|doc
argument_list|)
expr_stmt|;
name|occurences
operator|.
name|put
argument_list|(
name|key
argument_list|,
name|oc
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
catch|catch
parameter_list|(
name|SQLException
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|error
argument_list|(
name|e
argument_list|)
expr_stmt|;
return|return
literal|null
return|;
block|}
finally|finally
block|{
try|try
block|{
if|if
condition|(
name|conn
operator|!=
literal|null
condition|)
name|releaseConnection
argument_list|(
name|conn
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|SQLException
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|error
argument_list|(
name|e
argument_list|)
expr_stmt|;
return|return
literal|null
return|;
block|}
block|}
name|Occurrences
index|[]
name|result
init|=
operator|new
name|Occurrences
index|[
name|occurences
operator|.
name|size
argument_list|()
index|]
decl_stmt|;
name|occurences
operator|.
name|values
argument_list|()
operator|.
name|toArray
argument_list|(
name|result
argument_list|)
expr_stmt|;
return|return
name|result
return|;
block|}
specifier|public
name|Geometry
name|streamNodeToGeometry
parameter_list|(
name|XQueryContext
name|context
parameter_list|,
name|NodeValue
name|node
parameter_list|)
throws|throws
name|SpatialIndexException
block|{
try|try
block|{
name|context
operator|.
name|pushDocumentContext
argument_list|()
expr_stmt|;
try|try
block|{
comment|//TODO : get rid of the context dependency
name|node
operator|.
name|toSAX
argument_list|(
name|context
operator|.
name|getBroker
argument_list|()
argument_list|,
name|geometryDocument
argument_list|,
literal|null
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
name|context
operator|.
name|popDocumentContext
argument_list|()
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
name|SAXException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|SpatialIndexException
argument_list|(
name|e
argument_list|)
throw|;
block|}
return|return
name|streamedGeometry
return|;
block|}
specifier|public
name|Element
name|streamGeometryToElement
parameter_list|(
name|Geometry
name|geometry
parameter_list|,
name|String
name|srsName
parameter_list|,
name|Receiver
name|receiver
parameter_list|)
throws|throws
name|SpatialIndexException
block|{
comment|//YES !!!
name|String
name|gmlString
init|=
literal|null
decl_stmt|;
try|try
block|{
comment|//TODO : find a way to pass
comment|//1) the SRS
comment|//2) gmlPrefix
comment|//3) other stuff...
comment|//This will possible require some changes in GeometryTransformer
name|gmlString
operator|=
name|gmlTransformer
operator|.
name|transform
argument_list|(
name|geometry
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|TransformerException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|SpatialIndexException
argument_list|(
name|e
argument_list|)
throw|;
block|}
try|try
block|{
comment|//Copied from org.exist.xquery.functions.request.getData
name|SAXParserFactory
name|factory
init|=
name|SAXParserFactory
operator|.
name|newInstance
argument_list|()
decl_stmt|;
name|factory
operator|.
name|setNamespaceAware
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|InputSource
name|src
init|=
operator|new
name|InputSource
argument_list|(
operator|new
name|StringReader
argument_list|(
name|gmlString
argument_list|)
argument_list|)
decl_stmt|;
name|SAXParser
name|parser
init|=
name|factory
operator|.
name|newSAXParser
argument_list|()
decl_stmt|;
name|XMLReader
name|reader
init|=
name|parser
operator|.
name|getXMLReader
argument_list|()
decl_stmt|;
name|reader
operator|.
name|setContentHandler
argument_list|(
operator|(
name|ContentHandler
operator|)
name|receiver
argument_list|)
expr_stmt|;
name|reader
operator|.
name|parse
argument_list|(
name|src
argument_list|)
expr_stmt|;
name|Document
name|doc
init|=
name|receiver
operator|.
name|getDocument
argument_list|()
decl_stmt|;
return|return
name|doc
operator|.
name|getDocumentElement
argument_list|()
return|;
block|}
catch|catch
parameter_list|(
name|ParserConfigurationException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|SpatialIndexException
argument_list|(
name|e
argument_list|)
throw|;
block|}
catch|catch
parameter_list|(
name|SAXException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|SpatialIndexException
argument_list|(
name|e
argument_list|)
throw|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|SpatialIndexException
argument_list|(
name|e
argument_list|)
throw|;
block|}
block|}
specifier|public
name|Geometry
name|transformGeometry
parameter_list|(
name|Geometry
name|geometry
parameter_list|,
name|String
name|sourceCRS
parameter_list|,
name|String
name|targetCRS
parameter_list|)
throws|throws
name|SpatialIndexException
block|{
comment|//provisional workarounds
if|if
condition|(
literal|"osgb:BNG"
operator|.
name|equalsIgnoreCase
argument_list|(
name|sourceCRS
operator|.
name|trim
argument_list|()
argument_list|)
condition|)
name|sourceCRS
operator|=
literal|"EPSG:27700"
expr_stmt|;
if|if
condition|(
literal|"osgb:BNG"
operator|.
name|equalsIgnoreCase
argument_list|(
name|targetCRS
operator|.
name|trim
argument_list|()
argument_list|)
condition|)
name|targetCRS
operator|=
literal|"EPSG:27700"
expr_stmt|;
name|MathTransform
name|transform
init|=
operator|(
name|MathTransform
operator|)
name|transformations
operator|.
name|get
argument_list|(
name|sourceCRS
operator|+
literal|"_"
operator|+
name|targetCRS
argument_list|)
decl_stmt|;
if|if
condition|(
name|transform
operator|==
literal|null
condition|)
block|{
try|try
block|{
try|try
block|{
name|transform
operator|=
name|CRS
operator|.
name|findMathTransform
argument_list|(
name|CRS
operator|.
name|decode
argument_list|(
name|sourceCRS
argument_list|)
argument_list|,
name|CRS
operator|.
name|decode
argument_list|(
name|targetCRS
argument_list|)
argument_list|,
name|useLenientMode
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|OperationNotFoundException
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|info
argument_list|(
name|e
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"Switching to lenient mode... beware of precision loss !"
argument_list|)
expr_stmt|;
comment|//Last parameter set to true ; won't bail out if it can't find the Bursa Wolf parameters
comment|//as it is the case in current gt2-epsg-wkt-2.4-M1.jar
name|useLenientMode
operator|=
literal|true
expr_stmt|;
name|transform
operator|=
name|CRS
operator|.
name|findMathTransform
argument_list|(
name|CRS
operator|.
name|decode
argument_list|(
name|sourceCRS
argument_list|)
argument_list|,
name|CRS
operator|.
name|decode
argument_list|(
name|targetCRS
argument_list|)
argument_list|,
name|useLenientMode
argument_list|)
expr_stmt|;
block|}
name|transformations
operator|.
name|put
argument_list|(
name|sourceCRS
operator|+
literal|"_"
operator|+
name|targetCRS
argument_list|,
name|transform
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|debug
argument_list|(
literal|"Instantiated transformation from '"
operator|+
name|sourceCRS
operator|+
literal|"' to '"
operator|+
name|targetCRS
operator|+
literal|"'"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|NoSuchAuthorityCodeException
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|error
argument_list|(
name|e
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|FactoryException
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|error
argument_list|(
name|e
argument_list|)
expr_stmt|;
block|}
block|}
if|if
condition|(
name|transform
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|SpatialIndexException
argument_list|(
literal|"Unable to get a transformation from '"
operator|+
name|sourceCRS
operator|+
literal|"' to '"
operator|+
name|targetCRS
operator|+
literal|"'"
argument_list|)
throw|;
block|}
name|coordinateTransformer
operator|.
name|setMathTransform
argument_list|(
name|transform
argument_list|)
expr_stmt|;
try|try
block|{
return|return
name|coordinateTransformer
operator|.
name|transform
argument_list|(
name|geometry
argument_list|)
return|;
block|}
catch|catch
parameter_list|(
name|TransformException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|SpatialIndexException
argument_list|(
name|e
argument_list|)
throw|;
block|}
block|}
specifier|private
class|class
name|GMLStreamListener
extends|extends
name|AbstractStreamListener
block|{
name|Stack
name|srsNamesStack
init|=
operator|new
name|Stack
argument_list|()
decl_stmt|;
name|ElementImpl
name|deferredElement
decl_stmt|;
specifier|public
name|IndexWorker
name|getWorker
parameter_list|()
block|{
return|return
name|AbstractGMLJDBCIndexWorker
operator|.
name|this
return|;
block|}
specifier|public
name|void
name|startElement
parameter_list|(
name|Txn
name|transaction
parameter_list|,
name|ElementImpl
name|element
parameter_list|,
name|NodePath
name|path
parameter_list|)
block|{
if|if
condition|(
name|isDocumentGMLAware
condition|)
block|{
comment|//Release the deferred element if any
if|if
condition|(
name|deferredElement
operator|!=
literal|null
condition|)
name|processDeferredElement
argument_list|()
expr_stmt|;
comment|//Retain this element
name|deferredElement
operator|=
name|element
expr_stmt|;
block|}
comment|//Forward the event to the next listener
name|super
operator|.
name|startElement
argument_list|(
name|transaction
argument_list|,
name|element
argument_list|,
name|path
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|attribute
parameter_list|(
name|Txn
name|transaction
parameter_list|,
name|AttrImpl
name|attrib
parameter_list|,
name|NodePath
name|path
parameter_list|)
block|{
comment|//Forward the event to the next listener
name|super
operator|.
name|attribute
argument_list|(
name|transaction
argument_list|,
name|attrib
argument_list|,
name|path
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|characters
parameter_list|(
name|Txn
name|transaction
parameter_list|,
name|TextImpl
name|text
parameter_list|,
name|NodePath
name|path
parameter_list|)
block|{
if|if
condition|(
name|isDocumentGMLAware
condition|)
block|{
comment|//Release the deferred element if any
if|if
condition|(
name|deferredElement
operator|!=
literal|null
condition|)
name|processDeferredElement
argument_list|()
expr_stmt|;
try|try
block|{
name|geometryDocument
operator|.
name|characters
argument_list|(
name|text
operator|.
name|getData
argument_list|()
operator|.
name|toCharArray
argument_list|()
argument_list|,
literal|0
argument_list|,
name|text
operator|.
name|getLength
argument_list|()
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|error
argument_list|(
name|e
argument_list|)
expr_stmt|;
block|}
block|}
comment|//Forward the event to the next listener
name|super
operator|.
name|characters
argument_list|(
name|transaction
argument_list|,
name|text
argument_list|,
name|path
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|endElement
parameter_list|(
name|Txn
name|transaction
parameter_list|,
name|ElementImpl
name|element
parameter_list|,
name|NodePath
name|path
parameter_list|)
block|{
if|if
condition|(
name|isDocumentGMLAware
condition|)
block|{
comment|//Release the deferred element if any
if|if
condition|(
name|deferredElement
operator|!=
literal|null
condition|)
name|processDeferredElement
argument_list|()
expr_stmt|;
comment|//Process the element
name|processCurrentElement
argument_list|(
name|element
argument_list|)
expr_stmt|;
block|}
comment|//Forward the event to the next listener
name|super
operator|.
name|endElement
argument_list|(
name|transaction
argument_list|,
name|element
argument_list|,
name|path
argument_list|)
expr_stmt|;
block|}
specifier|private
name|void
name|processDeferredElement
parameter_list|()
block|{
comment|//We need to collect the deferred element's attributes in order to feed the SAX handler
name|AttributesImpl
name|attList
init|=
operator|new
name|AttributesImpl
argument_list|()
decl_stmt|;
name|NamedNodeMap
name|attrs
init|=
name|deferredElement
operator|.
name|getAttributes
argument_list|()
decl_stmt|;
name|String
name|whatToPush
init|=
literal|null
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|attrs
operator|.
name|getLength
argument_list|()
condition|;
name|i
operator|++
control|)
block|{
name|AttrImpl
name|attrib
init|=
operator|(
name|AttrImpl
operator|)
name|attrs
operator|.
name|item
argument_list|(
name|i
argument_list|)
decl_stmt|;
comment|//Store the srs
if|if
condition|(
name|GML_NS
operator|.
name|equals
argument_list|(
name|deferredElement
operator|.
name|getNamespaceURI
argument_list|()
argument_list|)
condition|)
block|{
comment|//Maybe we could assume a configurable default value here
if|if
condition|(
name|attrib
operator|.
name|getName
argument_list|()
operator|.
name|equals
argument_list|(
literal|"srsName"
argument_list|)
condition|)
block|{
name|whatToPush
operator|=
name|attrib
operator|.
name|getValue
argument_list|()
expr_stmt|;
block|}
block|}
name|attList
operator|.
name|addAttribute
argument_list|(
name|attrib
operator|.
name|getNamespaceURI
argument_list|()
argument_list|,
name|attrib
operator|.
name|getLocalName
argument_list|()
argument_list|,
name|attrib
operator|.
name|getQName
argument_list|()
operator|.
name|getStringValue
argument_list|()
argument_list|,
name|Integer
operator|.
name|toString
argument_list|(
name|attrib
operator|.
name|getType
argument_list|()
argument_list|)
argument_list|,
name|attrib
operator|.
name|getValue
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|srsNamesStack
operator|.
name|push
argument_list|(
name|whatToPush
argument_list|)
expr_stmt|;
try|try
block|{
name|geometryDocument
operator|.
name|startElement
argument_list|(
name|deferredElement
operator|.
name|getNamespaceURI
argument_list|()
argument_list|,
name|deferredElement
operator|.
name|getLocalName
argument_list|()
argument_list|,
name|deferredElement
operator|.
name|getQName
argument_list|()
operator|.
name|getStringValue
argument_list|()
argument_list|,
name|attList
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|e
operator|.
name|printStackTrace
argument_list|()
expr_stmt|;
name|LOG
operator|.
name|error
argument_list|(
name|e
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
name|deferredElement
operator|=
literal|null
expr_stmt|;
block|}
block|}
specifier|private
name|void
name|processCurrentElement
parameter_list|(
name|ElementImpl
name|element
parameter_list|)
block|{
name|currentNodeId
operator|=
name|element
operator|.
name|getNodeId
argument_list|()
expr_stmt|;
name|String
name|currentSrsName
init|=
operator|(
name|String
operator|)
name|srsNamesStack
operator|.
name|pop
argument_list|()
decl_stmt|;
try|try
block|{
name|geometryDocument
operator|.
name|endElement
argument_list|(
name|element
operator|.
name|getNamespaceURI
argument_list|()
argument_list|,
name|element
operator|.
name|getLocalName
argument_list|()
argument_list|,
name|element
operator|.
name|getQName
argument_list|()
operator|.
name|getStringValue
argument_list|()
argument_list|)
expr_stmt|;
comment|//Some invalid/(yet) incomplete geometries don't have a SRS
if|if
condition|(
name|streamedGeometry
operator|!=
literal|null
operator|&&
name|currentSrsName
operator|!=
literal|null
condition|)
block|{
name|geometries
operator|.
name|put
argument_list|(
name|currentNodeId
argument_list|,
operator|new
name|SRSGeometry
argument_list|(
name|currentSrsName
argument_list|,
name|streamedGeometry
argument_list|)
argument_list|)
expr_stmt|;
if|if
condition|(
name|flushAfter
operator|!=
operator|-
literal|1
operator|&&
name|geometries
operator|.
name|size
argument_list|()
operator|>=
name|flushAfter
condition|)
block|{
comment|//Mmmh... doesn't flush since it is currently dependant from the
comment|//number of nodes in the DOM file ; would need refactorings
comment|//currentDoc.getBroker().checkAvailableMemory();
name|currentDoc
operator|.
name|getBroker
argument_list|()
operator|.
name|flush
argument_list|()
expr_stmt|;
comment|///Aaaaaargl !
specifier|final
name|double
name|percent
init|=
operator|(
operator|(
name|double
operator|)
name|Runtime
operator|.
name|getRuntime
argument_list|()
operator|.
name|freeMemory
argument_list|()
operator|/
operator|(
name|double
operator|)
name|Runtime
operator|.
name|getRuntime
argument_list|()
operator|.
name|maxMemory
argument_list|()
operator|)
operator|*
literal|100
decl_stmt|;
if|if
condition|(
name|percent
operator|<
literal|30
condition|)
block|{
name|System
operator|.
name|gc
argument_list|()
expr_stmt|;
block|}
block|}
block|}
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|error
argument_list|(
literal|"Unable to collect geometry for node: "
operator|+
name|currentNodeId
operator|+
literal|". Indexing will be skipped"
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
name|streamedGeometry
operator|=
literal|null
expr_stmt|;
block|}
block|}
block|}
specifier|private
class|class
name|GeometryHandler
extends|extends
name|XMLFilterImpl
implements|implements
name|GMLHandlerJTS
block|{
specifier|public
name|void
name|geometry
parameter_list|(
name|Geometry
name|geometry
parameter_list|)
block|{
name|streamedGeometry
operator|=
name|geometry
expr_stmt|;
comment|//TODO : null geometries can be returned for many reasons, including a (too) strict
comment|//topology check done by the Geotools SAX parser.
comment|//It would be nice to have static classes extending Geometry to report such geometries
if|if
condition|(
name|geometry
operator|==
literal|null
condition|)
name|LOG
operator|.
name|error
argument_list|(
literal|"Collected null geometry for node: "
operator|+
name|currentNodeId
operator|+
literal|". Indexing will be skipped"
argument_list|)
expr_stmt|;
block|}
block|}
specifier|private
class|class
name|SRSGeometry
block|{
specifier|private
name|String
name|SRSName
decl_stmt|;
specifier|private
name|Geometry
name|geometry
decl_stmt|;
specifier|public
name|SRSGeometry
parameter_list|(
name|String
name|SRSName
parameter_list|,
name|Geometry
name|geometry
parameter_list|)
block|{
comment|//TODO : implement a default, eventually configurable, SRS ?
if|if
condition|(
name|SRSName
operator|==
literal|null
condition|)
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"Got null SRS"
argument_list|)
throw|;
if|if
condition|(
name|geometry
operator|==
literal|null
condition|)
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"Got null geometry"
argument_list|)
throw|;
name|this
operator|.
name|SRSName
operator|=
name|SRSName
expr_stmt|;
name|this
operator|.
name|geometry
operator|=
name|geometry
expr_stmt|;
block|}
specifier|public
name|String
name|getSRSName
parameter_list|()
block|{
return|return
name|SRSName
return|;
block|}
specifier|public
name|Geometry
name|getGeometry
parameter_list|()
block|{
return|return
name|geometry
return|;
block|}
block|}
block|}
end_class

end_unit

