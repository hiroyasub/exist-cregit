begin_unit|revision:1.0.0;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  *  eXist Open Source Native XML Database  *  Copyright (C) 2007 The eXist Project  *  http://exist-db.org  *  *  This program is free software; you can redistribute it and/or  *  modify it under the terms of the GNU Lesser General Public License  *  as published by the Free Software Foundation; either version 2  *  of the License, or (at your option) any later version.  *  *  This program is distributed in the hope that it will be useful,  *  but WITHOUT ANY WARRANTY; without even the implied warranty of  *  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the  *  GNU Lesser General Public License for more details.  *  *  You should have received a copy of the GNU Lesser General Public License  *  along with this program; if not, write to the Free Software  *  Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301  USA  *   *  $Id$  *    *  @author Pierrick Brihaye<pierrick.brihaye@free.fr>  */
end_comment

begin_package
package|package
name|org
operator|.
name|exist
operator|.
name|indexing
operator|.
name|spatial
package|;
end_package

begin_import
import|import
name|java
operator|.
name|sql
operator|.
name|Connection
import|;
end_import

begin_import
import|import
name|java
operator|.
name|sql
operator|.
name|PreparedStatement
import|;
end_import

begin_import
import|import
name|java
operator|.
name|sql
operator|.
name|ResultSet
import|;
end_import

begin_import
import|import
name|java
operator|.
name|sql
operator|.
name|SQLException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Iterator
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|TreeMap
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|logging
operator|.
name|log4j
operator|.
name|LogManager
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|logging
operator|.
name|log4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|collections
operator|.
name|Collection
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|dom
operator|.
name|persistent
operator|.
name|*
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|indexing
operator|.
name|spatial
operator|.
name|AbstractGMLJDBCIndex
operator|.
name|SpatialOperator
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|numbering
operator|.
name|DLN
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|numbering
operator|.
name|NodeId
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|security
operator|.
name|PermissionDeniedException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|storage
operator|.
name|DBBroker
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|storage
operator|.
name|NodePath
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|xmldb
operator|.
name|XmldbURI
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|xquery
operator|.
name|QueryRewriter
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|xquery
operator|.
name|XPathException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|xquery
operator|.
name|value
operator|.
name|AtomicValue
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|xquery
operator|.
name|value
operator|.
name|BooleanValue
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|xquery
operator|.
name|value
operator|.
name|DoubleValue
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|xquery
operator|.
name|value
operator|.
name|StringValue
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|xquery
operator|.
name|value
operator|.
name|ValueSequence
import|;
end_import

begin_import
import|import
name|com
operator|.
name|vividsolutions
operator|.
name|jts
operator|.
name|geom
operator|.
name|Geometry
import|;
end_import

begin_import
import|import
name|com
operator|.
name|vividsolutions
operator|.
name|jts
operator|.
name|io
operator|.
name|ParseException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|util
operator|.
name|io
operator|.
name|FastByteArrayInputStream
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|xquery
operator|.
name|XQueryContext
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|xquery
operator|.
name|value
operator|.
name|Base64BinaryValueType
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|xquery
operator|.
name|value
operator|.
name|BinaryValueFromInputStream
import|;
end_import

begin_class
specifier|public
class|class
name|GMLHSQLIndexWorker
extends|extends
name|AbstractGMLJDBCIndexWorker
block|{
specifier|private
specifier|static
specifier|final
name|Logger
name|LOG
init|=
name|LogManager
operator|.
name|getLogger
argument_list|(
name|GMLHSQLIndexWorker
operator|.
name|class
argument_list|)
decl_stmt|;
specifier|public
name|GMLHSQLIndexWorker
parameter_list|(
name|GMLHSQLIndex
name|index
parameter_list|,
name|DBBroker
name|broker
parameter_list|)
block|{
name|super
argument_list|(
name|index
argument_list|,
name|broker
argument_list|)
expr_stmt|;
comment|//TODO : evaluate one connection per worker
comment|/*         try {             conn = DriverManager.getConnection("jdbc:hsqldb:" + index.getDataDir() + "/" +                  index.db_file_name_prefix + ";shutdown=true", "sa", "");         } catch (SQLException e) {             LOG.error(e);         }         */
block|}
annotation|@
name|Override
specifier|protected
name|boolean
name|saveGeometryNode
parameter_list|(
name|Geometry
name|geometry
parameter_list|,
name|String
name|srsName
parameter_list|,
name|DocumentImpl
name|doc
parameter_list|,
name|NodeId
name|nodeId
parameter_list|,
name|PreparedStatement
name|ps
parameter_list|)
throws|throws
name|SQLException
block|{
try|try
block|{
name|Geometry
name|EPSG4326_geometry
init|=
literal|null
decl_stmt|;
try|try
block|{
name|EPSG4326_geometry
operator|=
name|transformGeometry
argument_list|(
name|geometry
argument_list|,
name|srsName
argument_list|,
literal|"EPSG:4326"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|SpatialIndexException
name|e
parameter_list|)
block|{
comment|//Transforms the exception into an SQLException.
name|SQLException
name|ee
init|=
operator|new
name|SQLException
argument_list|(
name|e
operator|.
name|getMessage
argument_list|()
argument_list|)
decl_stmt|;
name|ee
operator|.
name|initCause
argument_list|(
name|e
argument_list|)
expr_stmt|;
throw|throw
name|ee
throw|;
block|}
name|ps
operator|.
name|clearParameters
argument_list|()
expr_stmt|;
comment|/*DOCUMENT_URI*/
name|ps
operator|.
name|setString
argument_list|(
literal|1
argument_list|,
name|doc
operator|.
name|getURI
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
comment|/*NODE_ID_UNITS*/
name|ps
operator|.
name|setInt
argument_list|(
literal|2
argument_list|,
name|nodeId
operator|.
name|units
argument_list|()
argument_list|)
expr_stmt|;
name|byte
index|[]
name|bytes
init|=
operator|new
name|byte
index|[
name|nodeId
operator|.
name|size
argument_list|()
index|]
decl_stmt|;
name|nodeId
operator|.
name|serialize
argument_list|(
name|bytes
argument_list|,
literal|0
argument_list|)
expr_stmt|;
comment|/*NODE_ID*/
name|ps
operator|.
name|setBytes
argument_list|(
literal|3
argument_list|,
name|bytes
argument_list|)
expr_stmt|;
comment|/*GEOMETRY_TYPE*/
name|ps
operator|.
name|setString
argument_list|(
literal|4
argument_list|,
name|geometry
operator|.
name|getGeometryType
argument_list|()
argument_list|)
expr_stmt|;
comment|/*SRS_NAME*/
name|ps
operator|.
name|setString
argument_list|(
literal|5
argument_list|,
name|srsName
argument_list|)
expr_stmt|;
comment|/*WKT*/
name|ps
operator|.
name|setString
argument_list|(
literal|6
argument_list|,
name|wktWriter
operator|.
name|write
argument_list|(
name|geometry
argument_list|)
argument_list|)
expr_stmt|;
comment|/*WKB*/
name|ps
operator|.
name|setBytes
argument_list|(
literal|7
argument_list|,
name|wkbWriter
operator|.
name|write
argument_list|(
name|geometry
argument_list|)
argument_list|)
expr_stmt|;
comment|/*MINX*/
name|ps
operator|.
name|setDouble
argument_list|(
literal|8
argument_list|,
name|geometry
operator|.
name|getEnvelopeInternal
argument_list|()
operator|.
name|getMinX
argument_list|()
argument_list|)
expr_stmt|;
comment|/*MAXX*/
name|ps
operator|.
name|setDouble
argument_list|(
literal|9
argument_list|,
name|geometry
operator|.
name|getEnvelopeInternal
argument_list|()
operator|.
name|getMaxX
argument_list|()
argument_list|)
expr_stmt|;
comment|/*MINY*/
name|ps
operator|.
name|setDouble
argument_list|(
literal|10
argument_list|,
name|geometry
operator|.
name|getEnvelopeInternal
argument_list|()
operator|.
name|getMinY
argument_list|()
argument_list|)
expr_stmt|;
comment|/*MAXY*/
name|ps
operator|.
name|setDouble
argument_list|(
literal|11
argument_list|,
name|geometry
operator|.
name|getEnvelopeInternal
argument_list|()
operator|.
name|getMaxY
argument_list|()
argument_list|)
expr_stmt|;
comment|/*CENTROID_X*/
name|ps
operator|.
name|setDouble
argument_list|(
literal|12
argument_list|,
name|geometry
operator|.
name|getCentroid
argument_list|()
operator|.
name|getCoordinate
argument_list|()
operator|.
name|x
argument_list|)
expr_stmt|;
comment|/*CENTROID_Y*/
name|ps
operator|.
name|setDouble
argument_list|(
literal|13
argument_list|,
name|geometry
operator|.
name|getCentroid
argument_list|()
operator|.
name|getCoordinate
argument_list|()
operator|.
name|y
argument_list|)
expr_stmt|;
comment|//geometry.getRepresentativePoint()
comment|/*AREA*/
name|ps
operator|.
name|setDouble
argument_list|(
literal|14
argument_list|,
name|geometry
operator|.
name|getArea
argument_list|()
argument_list|)
expr_stmt|;
comment|//Boundary ?
comment|/*EPSG4326_WKT*/
name|ps
operator|.
name|setString
argument_list|(
literal|15
argument_list|,
name|wktWriter
operator|.
name|write
argument_list|(
name|EPSG4326_geometry
argument_list|)
argument_list|)
expr_stmt|;
comment|/*EPSG4326_WKB*/
name|ps
operator|.
name|setBytes
argument_list|(
literal|16
argument_list|,
name|wkbWriter
operator|.
name|write
argument_list|(
name|EPSG4326_geometry
argument_list|)
argument_list|)
expr_stmt|;
comment|/*EPSG4326_MINX*/
name|ps
operator|.
name|setDouble
argument_list|(
literal|17
argument_list|,
name|EPSG4326_geometry
operator|.
name|getEnvelopeInternal
argument_list|()
operator|.
name|getMinX
argument_list|()
argument_list|)
expr_stmt|;
comment|/*EPSG4326_MAXX*/
name|ps
operator|.
name|setDouble
argument_list|(
literal|18
argument_list|,
name|EPSG4326_geometry
operator|.
name|getEnvelopeInternal
argument_list|()
operator|.
name|getMaxX
argument_list|()
argument_list|)
expr_stmt|;
comment|/*EPSG4326_MINY*/
name|ps
operator|.
name|setDouble
argument_list|(
literal|19
argument_list|,
name|EPSG4326_geometry
operator|.
name|getEnvelopeInternal
argument_list|()
operator|.
name|getMinY
argument_list|()
argument_list|)
expr_stmt|;
comment|/*EPSG4326_MAXY*/
name|ps
operator|.
name|setDouble
argument_list|(
literal|20
argument_list|,
name|EPSG4326_geometry
operator|.
name|getEnvelopeInternal
argument_list|()
operator|.
name|getMaxY
argument_list|()
argument_list|)
expr_stmt|;
comment|/*EPSG4326_CENTROID_X*/
name|ps
operator|.
name|setDouble
argument_list|(
literal|21
argument_list|,
name|EPSG4326_geometry
operator|.
name|getCentroid
argument_list|()
operator|.
name|getCoordinate
argument_list|()
operator|.
name|x
argument_list|)
expr_stmt|;
comment|/*EPSG4326_CENTROID_Y*/
name|ps
operator|.
name|setDouble
argument_list|(
literal|22
argument_list|,
name|EPSG4326_geometry
operator|.
name|getCentroid
argument_list|()
operator|.
name|getCoordinate
argument_list|()
operator|.
name|y
argument_list|)
expr_stmt|;
comment|//EPSG4326_geometry.getRepresentativePoint()
comment|/*EPSG4326_AREA*/
name|ps
operator|.
name|setDouble
argument_list|(
literal|23
argument_list|,
name|EPSG4326_geometry
operator|.
name|getArea
argument_list|()
argument_list|)
expr_stmt|;
comment|//Boundary ?
comment|//As discussed earlier, all instances of SFS geometry classes
comment|//are topologically closed by definition.
comment|//For empty Curves, isClosed is defined to have the value false.
comment|/*IS_CLOSED*/
name|ps
operator|.
name|setBoolean
argument_list|(
literal|24
argument_list|,
operator|!
name|geometry
operator|.
name|isEmpty
argument_list|()
argument_list|)
expr_stmt|;
comment|/*IS_SIMPLE*/
name|ps
operator|.
name|setBoolean
argument_list|(
literal|25
argument_list|,
name|geometry
operator|.
name|isSimple
argument_list|()
argument_list|)
expr_stmt|;
comment|//Should always be true (the GML SAX parser makes a too severe check)
comment|/*IS_VALID*/
name|ps
operator|.
name|setBoolean
argument_list|(
literal|26
argument_list|,
name|geometry
operator|.
name|isValid
argument_list|()
argument_list|)
expr_stmt|;
return|return
operator|(
name|ps
operator|.
name|executeUpdate
argument_list|()
operator|==
literal|1
operator|)
return|;
block|}
finally|finally
block|{
comment|//Let's help the garbage collector...
name|geometry
operator|=
literal|null
expr_stmt|;
name|ps
operator|.
name|clearParameters
argument_list|()
expr_stmt|;
block|}
block|}
annotation|@
name|Override
specifier|protected
name|boolean
name|removeDocumentNode
parameter_list|(
name|DocumentImpl
name|doc
parameter_list|,
name|NodeId
name|nodeId
parameter_list|,
name|Connection
name|conn
parameter_list|)
throws|throws
name|SQLException
block|{
name|PreparedStatement
name|ps
init|=
name|conn
operator|.
name|prepareStatement
argument_list|(
literal|"DELETE FROM "
operator|+
name|GMLHSQLIndex
operator|.
name|TABLE_NAME
operator|+
literal|" WHERE DOCUMENT_URI = ? AND NODE_ID_UNITS = ? AND NODE_ID = ?;"
argument_list|)
decl_stmt|;
name|ps
operator|.
name|setString
argument_list|(
literal|1
argument_list|,
name|doc
operator|.
name|getURI
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|ps
operator|.
name|setInt
argument_list|(
literal|2
argument_list|,
name|nodeId
operator|.
name|units
argument_list|()
argument_list|)
expr_stmt|;
name|byte
index|[]
name|bytes
init|=
operator|new
name|byte
index|[
name|nodeId
operator|.
name|size
argument_list|()
index|]
decl_stmt|;
name|nodeId
operator|.
name|serialize
argument_list|(
name|bytes
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|ps
operator|.
name|setBytes
argument_list|(
literal|3
argument_list|,
name|bytes
argument_list|)
expr_stmt|;
try|try
block|{
return|return
operator|(
name|ps
operator|.
name|executeUpdate
argument_list|()
operator|==
literal|1
operator|)
return|;
block|}
finally|finally
block|{
name|ps
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
block|}
annotation|@
name|Override
specifier|protected
name|int
name|removeDocument
parameter_list|(
name|DocumentImpl
name|doc
parameter_list|,
name|Connection
name|conn
parameter_list|)
throws|throws
name|SQLException
block|{
name|PreparedStatement
name|ps
init|=
name|conn
operator|.
name|prepareStatement
argument_list|(
literal|"DELETE FROM "
operator|+
name|GMLHSQLIndex
operator|.
name|TABLE_NAME
operator|+
literal|" WHERE DOCUMENT_URI = ?;"
argument_list|)
decl_stmt|;
name|ps
operator|.
name|setString
argument_list|(
literal|1
argument_list|,
name|doc
operator|.
name|getURI
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
try|try
block|{
return|return
name|ps
operator|.
name|executeUpdate
argument_list|()
return|;
block|}
finally|finally
block|{
name|ps
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
block|}
annotation|@
name|Override
specifier|protected
name|int
name|removeCollection
parameter_list|(
name|Collection
name|collection
parameter_list|,
name|Connection
name|conn
parameter_list|)
throws|throws
name|SQLException
block|{
name|PreparedStatement
name|ps
init|=
name|conn
operator|.
name|prepareStatement
argument_list|(
literal|"DELETE FROM "
operator|+
name|GMLHSQLIndex
operator|.
name|TABLE_NAME
operator|+
literal|" WHERE SUBSTRING(DOCUMENT_URI, 1, ?) = ?;"
argument_list|)
decl_stmt|;
name|ps
operator|.
name|setInt
argument_list|(
literal|1
argument_list|,
name|collection
operator|.
name|getURI
argument_list|()
operator|.
name|toString
argument_list|()
operator|.
name|length
argument_list|()
argument_list|)
expr_stmt|;
name|ps
operator|.
name|setString
argument_list|(
literal|2
argument_list|,
name|collection
operator|.
name|getURI
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
try|try
block|{
return|return
name|ps
operator|.
name|executeUpdate
argument_list|()
return|;
block|}
finally|finally
block|{
name|ps
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
block|}
comment|//Since an embedded HSQL has only one connection available (unless I'm totally dumb)
comment|//acquire and release the connection from the index, which is *the* connection's owner
annotation|@
name|Override
specifier|protected
name|Connection
name|acquireConnection
parameter_list|()
throws|throws
name|SQLException
block|{
return|return
name|index
operator|.
name|acquireConnection
argument_list|(
name|this
operator|.
name|broker
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|protected
name|void
name|releaseConnection
parameter_list|(
name|Connection
name|conn
parameter_list|)
throws|throws
name|SQLException
block|{
name|index
operator|.
name|releaseConnection
argument_list|(
name|this
operator|.
name|broker
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|protected
name|NodeSet
name|search
parameter_list|(
name|DBBroker
name|broker
parameter_list|,
name|NodeSet
name|contextSet
parameter_list|,
name|Geometry
name|EPSG4326_geometry
parameter_list|,
name|int
name|spatialOp
parameter_list|,
name|Connection
name|conn
parameter_list|)
throws|throws
name|SQLException
block|{
name|String
name|extraSelection
init|=
literal|null
decl_stmt|;
name|String
name|bboxConstraint
init|=
literal|null
decl_stmt|;
comment|//TODO : generate it in AbstractGMLJDBCIndexWorker
name|String
name|docConstraint
init|=
literal|""
decl_stmt|;
name|boolean
name|refine_query_on_doc
init|=
literal|false
decl_stmt|;
if|if
condition|(
name|contextSet
operator|!=
literal|null
condition|)
block|{
if|if
condition|(
name|contextSet
operator|.
name|getDocumentSet
argument_list|()
operator|.
name|getDocumentCount
argument_list|()
operator|<=
name|index
operator|.
name|getMaxDocsInContextToRefineQuery
argument_list|()
condition|)
block|{
name|refine_query_on_doc
operator|=
literal|true
expr_stmt|;
name|DocumentImpl
name|doc
decl_stmt|;
name|Iterator
argument_list|<
name|DocumentImpl
argument_list|>
name|it
init|=
name|contextSet
operator|.
name|getDocumentSet
argument_list|()
operator|.
name|getDocumentIterator
argument_list|()
decl_stmt|;
name|doc
operator|=
name|it
operator|.
name|next
argument_list|()
expr_stmt|;
name|docConstraint
operator|=
literal|"(DOCUMENT_URI = '"
operator|+
name|doc
operator|.
name|getURI
argument_list|()
operator|.
name|toString
argument_list|()
operator|+
literal|"')"
expr_stmt|;
while|while
condition|(
name|it
operator|.
name|hasNext
argument_list|()
condition|)
block|{
name|doc
operator|=
name|it
operator|.
name|next
argument_list|()
expr_stmt|;
name|docConstraint
operator|=
name|docConstraint
operator|+
literal|" OR (DOCUMENT_URI = '"
operator|+
name|doc
operator|.
name|getURI
argument_list|()
operator|.
name|toString
argument_list|()
operator|+
literal|"')"
expr_stmt|;
block|}
if|if
condition|(
name|LOG
operator|.
name|isDebugEnabled
argument_list|()
condition|)
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"Refine query on documents is enabled."
argument_list|)
expr_stmt|;
block|}
block|}
else|else
block|{
if|if
condition|(
name|LOG
operator|.
name|isDebugEnabled
argument_list|()
condition|)
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"Refine query on documents is disabled."
argument_list|)
expr_stmt|;
block|}
block|}
block|}
switch|switch
condition|(
name|spatialOp
condition|)
block|{
comment|//BBoxes are equal
case|case
name|SpatialOperator
operator|.
name|EQUALS
case|:
name|bboxConstraint
operator|=
literal|"(EPSG4326_MINX = ? AND EPSG4326_MAXX = ?)"
operator|+
literal|" AND (EPSG4326_MINY = ? AND EPSG4326_MAXY = ?)"
expr_stmt|;
break|break;
comment|//Nothing much we can do with the BBox at this stage
case|case
name|SpatialOperator
operator|.
name|DISJOINT
case|:
comment|//Retrieve the BBox though...
name|extraSelection
operator|=
literal|", EPSG4326_MINX, EPSG4326_MAXX, EPSG4326_MINY, EPSG4326_MAXY"
expr_stmt|;
break|break;
comment|//BBoxes intersect themselves
case|case
name|SpatialOperator
operator|.
name|INTERSECTS
case|:
case|case
name|SpatialOperator
operator|.
name|TOUCHES
case|:
case|case
name|SpatialOperator
operator|.
name|CROSSES
case|:
case|case
name|SpatialOperator
operator|.
name|OVERLAPS
case|:
name|bboxConstraint
operator|=
literal|"(EPSG4326_MAXX>= ? AND EPSG4326_MINX<= ?)"
operator|+
literal|" AND (EPSG4326_MAXY>= ? AND EPSG4326_MINY<= ?)"
expr_stmt|;
break|break;
comment|//BBox is fully within
case|case
name|SpatialOperator
operator|.
name|WITHIN
case|:
name|bboxConstraint
operator|=
literal|"(EPSG4326_MINX>= ? AND EPSG4326_MAXX<= ?)"
operator|+
literal|" AND (EPSG4326_MINY>= ? AND EPSG4326_MAXY<= ?)"
expr_stmt|;
break|break;
comment|//BBox fully contains
case|case
name|SpatialOperator
operator|.
name|CONTAINS
case|:
name|bboxConstraint
operator|=
literal|"(EPSG4326_MINX<= ? AND EPSG4326_MAXX>= ?)"
operator|+
literal|" AND (EPSG4326_MINY<= ? AND EPSG4326_MAXY>= ?)"
expr_stmt|;
break|break;
default|default:
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"Unsupported spatial operator:"
operator|+
name|spatialOp
argument_list|)
throw|;
block|}
name|PreparedStatement
name|ps
init|=
name|conn
operator|.
name|prepareStatement
argument_list|(
literal|"SELECT EPSG4326_WKB, DOCUMENT_URI, NODE_ID_UNITS, NODE_ID"
operator|+
operator|(
name|extraSelection
operator|==
literal|null
condition|?
literal|""
else|:
name|extraSelection
operator|)
operator|+
literal|" FROM "
operator|+
name|GMLHSQLIndex
operator|.
name|TABLE_NAME
operator|+
operator|(
name|bboxConstraint
operator|==
literal|null
condition|?
operator|(
name|refine_query_on_doc
condition|?
literal|" WHERE "
operator|+
name|docConstraint
else|:
literal|""
operator|)
else|:
literal|" WHERE "
operator|+
operator|(
name|refine_query_on_doc
condition|?
literal|"("
operator|+
name|docConstraint
operator|+
literal|") AND "
else|:
literal|""
operator|)
operator|+
name|bboxConstraint
operator|)
operator|+
literal|";"
argument_list|)
decl_stmt|;
if|if
condition|(
name|bboxConstraint
operator|!=
literal|null
condition|)
block|{
name|ps
operator|.
name|setDouble
argument_list|(
literal|1
argument_list|,
name|EPSG4326_geometry
operator|.
name|getEnvelopeInternal
argument_list|()
operator|.
name|getMinX
argument_list|()
argument_list|)
expr_stmt|;
name|ps
operator|.
name|setDouble
argument_list|(
literal|2
argument_list|,
name|EPSG4326_geometry
operator|.
name|getEnvelopeInternal
argument_list|()
operator|.
name|getMaxX
argument_list|()
argument_list|)
expr_stmt|;
name|ps
operator|.
name|setDouble
argument_list|(
literal|3
argument_list|,
name|EPSG4326_geometry
operator|.
name|getEnvelopeInternal
argument_list|()
operator|.
name|getMinY
argument_list|()
argument_list|)
expr_stmt|;
name|ps
operator|.
name|setDouble
argument_list|(
literal|4
argument_list|,
name|EPSG4326_geometry
operator|.
name|getEnvelopeInternal
argument_list|()
operator|.
name|getMaxY
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|ResultSet
name|rs
init|=
literal|null
decl_stmt|;
name|NodeSet
name|result
init|=
literal|null
decl_stmt|;
try|try
block|{
name|int
name|disjointPostFiltered
init|=
literal|0
decl_stmt|;
name|rs
operator|=
name|ps
operator|.
name|executeQuery
argument_list|()
expr_stmt|;
name|result
operator|=
operator|new
name|ExtArrayNodeSet
argument_list|()
expr_stmt|;
comment|//new ExtArrayNodeSet(docs.getLength(), 250)
while|while
condition|(
name|rs
operator|.
name|next
argument_list|()
condition|)
block|{
name|DocumentImpl
name|doc
init|=
literal|null
decl_stmt|;
try|try
block|{
name|doc
operator|=
operator|(
name|DocumentImpl
operator|)
name|broker
operator|.
name|getXMLResource
argument_list|(
name|XmldbURI
operator|.
name|create
argument_list|(
name|rs
operator|.
name|getString
argument_list|(
literal|"DOCUMENT_URI"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|PermissionDeniedException
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|debug
argument_list|(
name|e
argument_list|)
expr_stmt|;
comment|//Ignore since the broker has no right on the document
continue|continue;
block|}
comment|//contextSet == null should be used to scan the whole index
if|if
condition|(
name|contextSet
operator|==
literal|null
operator|||
name|refine_query_on_doc
operator|||
name|contextSet
operator|.
name|getDocumentSet
argument_list|()
operator|.
name|contains
argument_list|(
name|doc
operator|.
name|getDocId
argument_list|()
argument_list|)
condition|)
block|{
name|NodeId
name|nodeId
init|=
operator|new
name|DLN
argument_list|(
name|rs
operator|.
name|getInt
argument_list|(
literal|"NODE_ID_UNITS"
argument_list|)
argument_list|,
name|rs
operator|.
name|getBytes
argument_list|(
literal|"NODE_ID"
argument_list|)
argument_list|,
literal|0
argument_list|)
decl_stmt|;
name|NodeProxy
name|p
init|=
operator|new
name|NodeProxy
argument_list|(
name|doc
argument_list|,
name|nodeId
argument_list|)
decl_stmt|;
comment|//Node is in the context : check if it is accurate
comment|//contextSet.contains(p) would have made more sense but there is a problem with
comment|//VirtualNodeSet when on the DESCENDANT_OR_SELF axis
if|if
condition|(
name|contextSet
operator|==
literal|null
operator|||
name|contextSet
operator|.
name|get
argument_list|(
name|p
argument_list|)
operator|!=
literal|null
condition|)
block|{
name|boolean
name|geometryMatches
init|=
literal|false
decl_stmt|;
if|if
condition|(
name|spatialOp
operator|==
name|SpatialOperator
operator|.
name|DISJOINT
condition|)
block|{
comment|//No BBox intersection : obviously disjoint
if|if
condition|(
name|rs
operator|.
name|getDouble
argument_list|(
literal|"EPSG4326_MAXX"
argument_list|)
operator|<
name|EPSG4326_geometry
operator|.
name|getEnvelopeInternal
argument_list|()
operator|.
name|getMinX
argument_list|()
operator|||
name|rs
operator|.
name|getDouble
argument_list|(
literal|"EPSG4326_MINX"
argument_list|)
operator|>
name|EPSG4326_geometry
operator|.
name|getEnvelopeInternal
argument_list|()
operator|.
name|getMaxX
argument_list|()
operator|||
name|rs
operator|.
name|getDouble
argument_list|(
literal|"EPSG4326_MAXY"
argument_list|)
operator|<
name|EPSG4326_geometry
operator|.
name|getEnvelopeInternal
argument_list|()
operator|.
name|getMinY
argument_list|()
operator|||
name|rs
operator|.
name|getDouble
argument_list|(
literal|"EPSG4326_MINY"
argument_list|)
operator|>
name|EPSG4326_geometry
operator|.
name|getEnvelopeInternal
argument_list|()
operator|.
name|getMaxY
argument_list|()
condition|)
block|{
name|geometryMatches
operator|=
literal|true
expr_stmt|;
name|disjointPostFiltered
operator|++
expr_stmt|;
block|}
block|}
comment|//Possible match : check the geometry
if|if
condition|(
operator|!
name|geometryMatches
condition|)
block|{
try|try
block|{
name|Geometry
name|geometry
init|=
name|wkbReader
operator|.
name|read
argument_list|(
name|rs
operator|.
name|getBytes
argument_list|(
literal|"EPSG4326_WKB"
argument_list|)
argument_list|)
decl_stmt|;
switch|switch
condition|(
name|spatialOp
condition|)
block|{
case|case
name|SpatialOperator
operator|.
name|EQUALS
case|:
name|geometryMatches
operator|=
name|geometry
operator|.
name|equals
argument_list|(
name|EPSG4326_geometry
argument_list|)
expr_stmt|;
break|break;
case|case
name|SpatialOperator
operator|.
name|DISJOINT
case|:
name|geometryMatches
operator|=
name|geometry
operator|.
name|disjoint
argument_list|(
name|EPSG4326_geometry
argument_list|)
expr_stmt|;
break|break;
case|case
name|SpatialOperator
operator|.
name|INTERSECTS
case|:
name|geometryMatches
operator|=
name|geometry
operator|.
name|intersects
argument_list|(
name|EPSG4326_geometry
argument_list|)
expr_stmt|;
break|break;
case|case
name|SpatialOperator
operator|.
name|TOUCHES
case|:
name|geometryMatches
operator|=
name|geometry
operator|.
name|touches
argument_list|(
name|EPSG4326_geometry
argument_list|)
expr_stmt|;
break|break;
case|case
name|SpatialOperator
operator|.
name|CROSSES
case|:
name|geometryMatches
operator|=
name|geometry
operator|.
name|crosses
argument_list|(
name|EPSG4326_geometry
argument_list|)
expr_stmt|;
break|break;
case|case
name|SpatialOperator
operator|.
name|WITHIN
case|:
name|geometryMatches
operator|=
name|geometry
operator|.
name|within
argument_list|(
name|EPSG4326_geometry
argument_list|)
expr_stmt|;
break|break;
case|case
name|SpatialOperator
operator|.
name|CONTAINS
case|:
name|geometryMatches
operator|=
name|geometry
operator|.
name|contains
argument_list|(
name|EPSG4326_geometry
argument_list|)
expr_stmt|;
break|break;
case|case
name|SpatialOperator
operator|.
name|OVERLAPS
case|:
name|geometryMatches
operator|=
name|geometry
operator|.
name|overlaps
argument_list|(
name|EPSG4326_geometry
argument_list|)
expr_stmt|;
break|break;
block|}
block|}
catch|catch
parameter_list|(
name|ParseException
name|e
parameter_list|)
block|{
comment|//Transforms the exception into an SQLException.
comment|//Very unlikely to happen though...
name|SQLException
name|ee
init|=
operator|new
name|SQLException
argument_list|(
name|e
operator|.
name|getMessage
argument_list|()
argument_list|)
decl_stmt|;
name|ee
operator|.
name|initCause
argument_list|(
name|e
argument_list|)
expr_stmt|;
throw|throw
name|ee
throw|;
block|}
block|}
if|if
condition|(
name|geometryMatches
condition|)
name|result
operator|.
name|add
argument_list|(
name|p
argument_list|)
expr_stmt|;
block|}
block|}
block|}
if|if
condition|(
name|LOG
operator|.
name|isDebugEnabled
argument_list|()
condition|)
block|{
name|LOG
operator|.
name|debug
argument_list|(
name|rs
operator|.
name|getRow
argument_list|()
operator|+
literal|" eligible geometries, "
operator|+
name|result
operator|.
name|getItemCount
argument_list|()
operator|+
literal|"selected"
operator|+
operator|(
name|spatialOp
operator|==
name|SpatialOperator
operator|.
name|DISJOINT
condition|?
literal|"("
operator|+
name|disjointPostFiltered
operator|+
literal|" post filtered)"
else|:
literal|""
operator|)
argument_list|)
expr_stmt|;
block|}
return|return
name|result
return|;
block|}
finally|finally
block|{
if|if
condition|(
name|rs
operator|!=
literal|null
condition|)
name|rs
operator|.
name|close
argument_list|()
expr_stmt|;
if|if
condition|(
name|ps
operator|!=
literal|null
condition|)
name|ps
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
block|}
annotation|@
name|Override
specifier|protected
name|Map
argument_list|<
name|Geometry
argument_list|,
name|String
argument_list|>
name|getGeometriesForDocument
parameter_list|(
name|DocumentImpl
name|doc
parameter_list|,
name|Connection
name|conn
parameter_list|)
throws|throws
name|SQLException
block|{
name|PreparedStatement
name|ps
init|=
name|conn
operator|.
name|prepareStatement
argument_list|(
literal|"SELECT EPSG4326_WKB, EPSG4326_WKT FROM "
operator|+
name|GMLHSQLIndex
operator|.
name|TABLE_NAME
operator|+
literal|" WHERE DOCUMENT_URI = ?;"
argument_list|)
decl_stmt|;
name|ps
operator|.
name|setString
argument_list|(
literal|1
argument_list|,
name|doc
operator|.
name|getURI
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|ResultSet
name|rs
init|=
literal|null
decl_stmt|;
try|try
block|{
name|rs
operator|=
name|ps
operator|.
name|executeQuery
argument_list|()
expr_stmt|;
name|Map
argument_list|<
name|Geometry
argument_list|,
name|String
argument_list|>
name|map
init|=
operator|new
name|TreeMap
argument_list|<
name|Geometry
argument_list|,
name|String
argument_list|>
argument_list|()
decl_stmt|;
while|while
condition|(
name|rs
operator|.
name|next
argument_list|()
condition|)
block|{
name|Geometry
name|EPSG4326_geometry
init|=
name|wkbReader
operator|.
name|read
argument_list|(
name|rs
operator|.
name|getBytes
argument_list|(
literal|"EPSG4326_WKB"
argument_list|)
argument_list|)
decl_stmt|;
comment|//Returns the EPSG:4326 WKT for every geometry to make occurrence aggregation consistent
name|map
operator|.
name|put
argument_list|(
name|EPSG4326_geometry
argument_list|,
name|rs
operator|.
name|getString
argument_list|(
literal|"EPSG4326_WKT"
argument_list|)
argument_list|)
expr_stmt|;
block|}
return|return
name|map
return|;
block|}
catch|catch
parameter_list|(
name|ParseException
name|e
parameter_list|)
block|{
comment|//Transforms the exception into an SQLException.
comment|//Very unlikely to happen though...
name|SQLException
name|ee
init|=
operator|new
name|SQLException
argument_list|(
name|e
operator|.
name|getMessage
argument_list|()
argument_list|)
decl_stmt|;
name|ee
operator|.
name|initCause
argument_list|(
name|e
argument_list|)
expr_stmt|;
throw|throw
name|ee
throw|;
block|}
finally|finally
block|{
if|if
condition|(
name|rs
operator|!=
literal|null
condition|)
name|rs
operator|.
name|close
argument_list|()
expr_stmt|;
if|if
condition|(
name|ps
operator|!=
literal|null
condition|)
name|ps
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
block|}
annotation|@
name|Override
specifier|protected
name|Geometry
name|getGeometryForNode
parameter_list|(
name|DBBroker
name|broker
parameter_list|,
name|NodeProxy
name|p
parameter_list|,
name|boolean
name|getEPSG4326
parameter_list|,
name|Connection
name|conn
parameter_list|)
throws|throws
name|SQLException
block|{
name|PreparedStatement
name|ps
init|=
name|conn
operator|.
name|prepareStatement
argument_list|(
literal|"SELECT "
operator|+
operator|(
name|getEPSG4326
condition|?
literal|"EPSG4326_WKB"
else|:
literal|"WKB"
operator|)
operator|+
literal|" FROM "
operator|+
name|GMLHSQLIndex
operator|.
name|TABLE_NAME
operator|+
literal|" WHERE DOCUMENT_URI = ? AND NODE_ID_UNITS = ? AND NODE_ID = ?;"
argument_list|)
decl_stmt|;
name|ps
operator|.
name|setString
argument_list|(
literal|1
argument_list|,
name|p
operator|.
name|getOwnerDocument
argument_list|()
operator|.
name|getURI
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|ps
operator|.
name|setInt
argument_list|(
literal|2
argument_list|,
name|p
operator|.
name|getNodeId
argument_list|()
operator|.
name|units
argument_list|()
argument_list|)
expr_stmt|;
name|byte
index|[]
name|bytes
init|=
operator|new
name|byte
index|[
name|p
operator|.
name|getNodeId
argument_list|()
operator|.
name|size
argument_list|()
index|]
decl_stmt|;
name|p
operator|.
name|getNodeId
argument_list|()
operator|.
name|serialize
argument_list|(
name|bytes
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|ps
operator|.
name|setBytes
argument_list|(
literal|3
argument_list|,
name|bytes
argument_list|)
expr_stmt|;
name|ResultSet
name|rs
init|=
literal|null
decl_stmt|;
try|try
block|{
name|rs
operator|=
name|ps
operator|.
name|executeQuery
argument_list|()
expr_stmt|;
if|if
condition|(
operator|!
name|rs
operator|.
name|next
argument_list|()
condition|)
comment|//Nothing returned
return|return
literal|null
return|;
name|Geometry
name|geometry
init|=
name|wkbReader
operator|.
name|read
argument_list|(
name|rs
operator|.
name|getBytes
argument_list|(
literal|1
argument_list|)
argument_list|)
decl_stmt|;
if|if
condition|(
name|rs
operator|.
name|next
argument_list|()
condition|)
block|{
comment|//Should be impossible
throw|throw
operator|new
name|SQLException
argument_list|(
literal|"More than one geometry for node "
operator|+
name|p
argument_list|)
throw|;
block|}
return|return
name|geometry
return|;
block|}
catch|catch
parameter_list|(
name|ParseException
name|e
parameter_list|)
block|{
comment|//Transforms the exception into an SQLException.
comment|//Very unlikely to happen though...
name|SQLException
name|ee
init|=
operator|new
name|SQLException
argument_list|(
name|e
operator|.
name|getMessage
argument_list|()
argument_list|)
decl_stmt|;
name|ee
operator|.
name|initCause
argument_list|(
name|e
argument_list|)
expr_stmt|;
throw|throw
name|ee
throw|;
block|}
finally|finally
block|{
if|if
condition|(
name|rs
operator|!=
literal|null
condition|)
name|rs
operator|.
name|close
argument_list|()
expr_stmt|;
name|ps
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
block|}
annotation|@
name|Override
specifier|protected
name|Geometry
index|[]
name|getGeometriesForNodes
parameter_list|(
name|DBBroker
name|broker
parameter_list|,
name|NodeSet
name|contextSet
parameter_list|,
name|boolean
name|getEPSG4326
parameter_list|,
name|Connection
name|conn
parameter_list|)
throws|throws
name|SQLException
block|{
comment|//TODO : generate it in AbstractGMLJDBCIndexWorker
name|String
name|docConstraint
init|=
literal|""
decl_stmt|;
name|boolean
name|refine_query_on_doc
init|=
literal|false
decl_stmt|;
if|if
condition|(
name|contextSet
operator|!=
literal|null
condition|)
block|{
if|if
condition|(
name|contextSet
operator|.
name|getDocumentSet
argument_list|()
operator|.
name|getDocumentCount
argument_list|()
operator|<=
name|index
operator|.
name|getMaxDocsInContextToRefineQuery
argument_list|()
condition|)
block|{
name|DocumentImpl
name|doc
decl_stmt|;
name|Iterator
argument_list|<
name|DocumentImpl
argument_list|>
name|it
init|=
name|contextSet
operator|.
name|getDocumentSet
argument_list|()
operator|.
name|getDocumentIterator
argument_list|()
decl_stmt|;
name|doc
operator|=
name|it
operator|.
name|next
argument_list|()
expr_stmt|;
name|docConstraint
operator|=
literal|"(DOCUMENT_URI = '"
operator|+
name|doc
operator|.
name|getURI
argument_list|()
operator|.
name|toString
argument_list|()
operator|+
literal|"')"
expr_stmt|;
while|while
condition|(
name|it
operator|.
name|hasNext
argument_list|()
condition|)
block|{
name|doc
operator|=
name|it
operator|.
name|next
argument_list|()
expr_stmt|;
name|docConstraint
operator|=
name|docConstraint
operator|+
literal|" OR (DOCUMENT_URI = '"
operator|+
name|doc
operator|.
name|getURI
argument_list|()
operator|.
name|toString
argument_list|()
operator|+
literal|"')"
expr_stmt|;
block|}
block|}
block|}
if|if
condition|(
name|LOG
operator|.
name|isDebugEnabled
argument_list|()
condition|)
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"Refine query on documents is "
operator|+
operator|(
name|refine_query_on_doc
condition|?
literal|"enabled."
else|:
literal|"disabled."
operator|)
argument_list|)
expr_stmt|;
block|}
name|PreparedStatement
name|ps
init|=
name|conn
operator|.
name|prepareStatement
argument_list|(
literal|"SELECT "
operator|+
operator|(
name|getEPSG4326
condition|?
literal|"EPSG4326_WKB"
else|:
literal|"WKB"
operator|)
operator|+
literal|", DOCUMENT_URI, NODE_ID_UNITS, NODE_ID"
operator|+
literal|" FROM "
operator|+
name|GMLHSQLIndex
operator|.
name|TABLE_NAME
operator|+
operator|(
name|refine_query_on_doc
condition|?
literal|" WHERE "
operator|+
name|docConstraint
else|:
literal|""
operator|)
argument_list|)
decl_stmt|;
name|ResultSet
name|rs
init|=
literal|null
decl_stmt|;
try|try
block|{
name|rs
operator|=
name|ps
operator|.
name|executeQuery
argument_list|()
expr_stmt|;
name|Geometry
index|[]
name|result
init|=
operator|new
name|Geometry
index|[
name|contextSet
operator|.
name|getLength
argument_list|()
index|]
decl_stmt|;
name|int
name|index
init|=
literal|0
decl_stmt|;
while|while
condition|(
name|rs
operator|.
name|next
argument_list|()
condition|)
block|{
name|DocumentImpl
name|doc
init|=
literal|null
decl_stmt|;
try|try
block|{
name|doc
operator|=
operator|(
name|DocumentImpl
operator|)
name|broker
operator|.
name|getXMLResource
argument_list|(
name|XmldbURI
operator|.
name|create
argument_list|(
name|rs
operator|.
name|getString
argument_list|(
literal|"DOCUMENT_URI"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|PermissionDeniedException
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|debug
argument_list|(
name|e
argument_list|)
expr_stmt|;
name|result
index|[
name|index
operator|++
index|]
operator|=
literal|null
expr_stmt|;
comment|//Ignore since the broker has no right on the document
continue|continue;
block|}
if|if
condition|(
name|contextSet
operator|==
literal|null
operator|||
name|refine_query_on_doc
operator|||
name|contextSet
operator|.
name|getDocumentSet
argument_list|()
operator|.
name|contains
argument_list|(
name|doc
operator|.
name|getDocId
argument_list|()
argument_list|)
condition|)
block|{
name|NodeId
name|nodeId
init|=
operator|new
name|DLN
argument_list|(
name|rs
operator|.
name|getInt
argument_list|(
literal|"NODE_ID_UNITS"
argument_list|)
argument_list|,
name|rs
operator|.
name|getBytes
argument_list|(
literal|"NODE_ID"
argument_list|)
argument_list|,
literal|0
argument_list|)
decl_stmt|;
name|NodeProxy
name|p
init|=
operator|new
name|NodeProxy
argument_list|(
name|doc
argument_list|,
name|nodeId
argument_list|)
decl_stmt|;
comment|//Node is in the context : check if it is accurate
comment|//contextSet.contains(p) would have made more sense but there is a problem with
comment|//VirtualNodeSet when on the DESCENDANT_OR_SELF axis
if|if
condition|(
name|contextSet
operator|.
name|get
argument_list|(
name|p
argument_list|)
operator|!=
literal|null
condition|)
block|{
name|Geometry
name|geometry
init|=
name|wkbReader
operator|.
name|read
argument_list|(
name|rs
operator|.
name|getBytes
argument_list|(
literal|1
argument_list|)
argument_list|)
decl_stmt|;
name|result
index|[
name|index
operator|++
index|]
operator|=
name|geometry
expr_stmt|;
block|}
block|}
block|}
return|return
name|result
return|;
block|}
catch|catch
parameter_list|(
name|ParseException
name|e
parameter_list|)
block|{
comment|//Transforms the exception into an SQLException.
comment|//Very unlikely to happen though...
name|SQLException
name|ee
init|=
operator|new
name|SQLException
argument_list|(
name|e
operator|.
name|getMessage
argument_list|()
argument_list|)
decl_stmt|;
name|ee
operator|.
name|initCause
argument_list|(
name|e
argument_list|)
expr_stmt|;
throw|throw
name|ee
throw|;
block|}
finally|finally
block|{
if|if
condition|(
name|rs
operator|!=
literal|null
condition|)
name|rs
operator|.
name|close
argument_list|()
expr_stmt|;
if|if
condition|(
name|ps
operator|!=
literal|null
condition|)
name|ps
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
block|}
annotation|@
name|Override
specifier|protected
name|AtomicValue
name|getGeometricPropertyForNode
parameter_list|(
name|XQueryContext
name|context
parameter_list|,
name|NodeProxy
name|p
parameter_list|,
name|Connection
name|conn
parameter_list|,
name|String
name|propertyName
parameter_list|)
throws|throws
name|SQLException
throws|,
name|XPathException
block|{
name|PreparedStatement
name|ps
init|=
name|conn
operator|.
name|prepareStatement
argument_list|(
literal|"SELECT "
operator|+
name|propertyName
operator|+
literal|" FROM "
operator|+
name|GMLHSQLIndex
operator|.
name|TABLE_NAME
operator|+
literal|" WHERE DOCUMENT_URI = ? AND NODE_ID_UNITS = ? AND NODE_ID = ?"
argument_list|)
decl_stmt|;
name|ps
operator|.
name|setString
argument_list|(
literal|1
argument_list|,
name|p
operator|.
name|getOwnerDocument
argument_list|()
operator|.
name|getURI
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|ps
operator|.
name|setInt
argument_list|(
literal|2
argument_list|,
name|p
operator|.
name|getNodeId
argument_list|()
operator|.
name|units
argument_list|()
argument_list|)
expr_stmt|;
name|byte
index|[]
name|bytes
init|=
operator|new
name|byte
index|[
name|p
operator|.
name|getNodeId
argument_list|()
operator|.
name|size
argument_list|()
index|]
decl_stmt|;
name|p
operator|.
name|getNodeId
argument_list|()
operator|.
name|serialize
argument_list|(
name|bytes
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|ps
operator|.
name|setBytes
argument_list|(
literal|3
argument_list|,
name|bytes
argument_list|)
expr_stmt|;
name|ResultSet
name|rs
init|=
literal|null
decl_stmt|;
try|try
block|{
name|rs
operator|=
name|ps
operator|.
name|executeQuery
argument_list|()
expr_stmt|;
if|if
condition|(
operator|!
name|rs
operator|.
name|next
argument_list|()
condition|)
comment|//Nothing returned
return|return
name|AtomicValue
operator|.
name|EMPTY_VALUE
return|;
name|AtomicValue
name|result
init|=
literal|null
decl_stmt|;
if|if
condition|(
name|rs
operator|.
name|getMetaData
argument_list|()
operator|.
name|getColumnClassName
argument_list|(
literal|1
argument_list|)
operator|.
name|equals
argument_list|(
name|Boolean
operator|.
name|class
operator|.
name|getName
argument_list|()
argument_list|)
condition|)
block|{
name|result
operator|=
operator|new
name|BooleanValue
argument_list|(
name|rs
operator|.
name|getBoolean
argument_list|(
literal|1
argument_list|)
argument_list|)
expr_stmt|;
block|}
if|else if
condition|(
name|rs
operator|.
name|getMetaData
argument_list|()
operator|.
name|getColumnClassName
argument_list|(
literal|1
argument_list|)
operator|.
name|equals
argument_list|(
name|Double
operator|.
name|class
operator|.
name|getName
argument_list|()
argument_list|)
condition|)
block|{
name|result
operator|=
operator|new
name|DoubleValue
argument_list|(
name|rs
operator|.
name|getDouble
argument_list|(
literal|1
argument_list|)
argument_list|)
expr_stmt|;
block|}
if|else if
condition|(
name|rs
operator|.
name|getMetaData
argument_list|()
operator|.
name|getColumnClassName
argument_list|(
literal|1
argument_list|)
operator|.
name|equals
argument_list|(
name|String
operator|.
name|class
operator|.
name|getName
argument_list|()
argument_list|)
condition|)
block|{
name|result
operator|=
operator|new
name|StringValue
argument_list|(
name|rs
operator|.
name|getString
argument_list|(
literal|1
argument_list|)
argument_list|)
expr_stmt|;
block|}
if|else if
condition|(
name|rs
operator|.
name|getMetaData
argument_list|()
operator|.
name|getColumnType
argument_list|(
literal|1
argument_list|)
operator|==
name|java
operator|.
name|sql
operator|.
name|Types
operator|.
name|BINARY
condition|)
block|{
name|result
operator|=
name|BinaryValueFromInputStream
operator|.
name|getInstance
argument_list|(
name|context
argument_list|,
operator|new
name|Base64BinaryValueType
argument_list|()
argument_list|,
operator|new
name|FastByteArrayInputStream
argument_list|(
name|rs
operator|.
name|getBytes
argument_list|(
literal|1
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
else|else
throw|throw
operator|new
name|SQLException
argument_list|(
literal|"Unable to make an atomic value from '"
operator|+
name|rs
operator|.
name|getMetaData
argument_list|()
operator|.
name|getColumnClassName
argument_list|(
literal|1
argument_list|)
operator|+
literal|"'"
argument_list|)
throw|;
if|if
condition|(
name|rs
operator|.
name|next
argument_list|()
condition|)
block|{
comment|//Should be impossible
throw|throw
operator|new
name|SQLException
argument_list|(
literal|"More than one geometry for node "
operator|+
name|p
argument_list|)
throw|;
block|}
return|return
name|result
return|;
block|}
finally|finally
block|{
if|if
condition|(
name|rs
operator|!=
literal|null
condition|)
name|rs
operator|.
name|close
argument_list|()
expr_stmt|;
name|ps
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
block|}
annotation|@
name|Override
specifier|protected
name|ValueSequence
name|getGeometricPropertyForNodes
parameter_list|(
name|XQueryContext
name|context
parameter_list|,
name|NodeSet
name|contextSet
parameter_list|,
name|Connection
name|conn
parameter_list|,
name|String
name|propertyName
parameter_list|)
throws|throws
name|SQLException
throws|,
name|XPathException
block|{
comment|//TODO : generate it in AbstractGMLJDBCIndexWorker
name|String
name|docConstraint
init|=
literal|""
decl_stmt|;
name|boolean
name|refine_query_on_doc
init|=
literal|false
decl_stmt|;
if|if
condition|(
name|contextSet
operator|!=
literal|null
condition|)
block|{
if|if
condition|(
name|contextSet
operator|.
name|getDocumentSet
argument_list|()
operator|.
name|getDocumentCount
argument_list|()
operator|<=
name|index
operator|.
name|getMaxDocsInContextToRefineQuery
argument_list|()
condition|)
block|{
name|DocumentImpl
name|doc
decl_stmt|;
name|Iterator
argument_list|<
name|DocumentImpl
argument_list|>
name|it
init|=
name|contextSet
operator|.
name|getDocumentSet
argument_list|()
operator|.
name|getDocumentIterator
argument_list|()
decl_stmt|;
name|doc
operator|=
name|it
operator|.
name|next
argument_list|()
expr_stmt|;
name|docConstraint
operator|=
literal|"(DOCUMENT_URI = '"
operator|+
name|doc
operator|.
name|getURI
argument_list|()
operator|.
name|toString
argument_list|()
operator|+
literal|"')"
expr_stmt|;
while|while
condition|(
name|it
operator|.
name|hasNext
argument_list|()
condition|)
block|{
name|doc
operator|=
name|it
operator|.
name|next
argument_list|()
expr_stmt|;
name|docConstraint
operator|=
name|docConstraint
operator|+
literal|" OR (DOCUMENT_URI = '"
operator|+
name|doc
operator|.
name|getURI
argument_list|()
operator|.
name|toString
argument_list|()
operator|+
literal|"')"
expr_stmt|;
block|}
if|if
condition|(
name|LOG
operator|.
name|isDebugEnabled
argument_list|()
condition|)
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"Refine query on documents is enabled."
argument_list|)
expr_stmt|;
block|}
block|}
else|else
block|{
if|if
condition|(
name|LOG
operator|.
name|isDebugEnabled
argument_list|()
condition|)
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"Refine query on documents is disabled."
argument_list|)
expr_stmt|;
block|}
block|}
block|}
name|PreparedStatement
name|ps
init|=
name|conn
operator|.
name|prepareStatement
argument_list|(
literal|"SELECT "
operator|+
name|propertyName
operator|+
literal|", DOCUMENT_URI, NODE_ID_UNITS, NODE_ID"
operator|+
literal|" FROM "
operator|+
name|GMLHSQLIndex
operator|.
name|TABLE_NAME
operator|+
operator|(
name|refine_query_on_doc
condition|?
literal|" WHERE "
operator|+
name|docConstraint
else|:
literal|""
operator|)
argument_list|)
decl_stmt|;
name|ResultSet
name|rs
init|=
literal|null
decl_stmt|;
try|try
block|{
name|rs
operator|=
name|ps
operator|.
name|executeQuery
argument_list|()
expr_stmt|;
name|ValueSequence
name|result
decl_stmt|;
if|if
condition|(
name|contextSet
operator|==
literal|null
condition|)
name|result
operator|=
operator|new
name|ValueSequence
argument_list|()
expr_stmt|;
else|else
name|result
operator|=
operator|new
name|ValueSequence
argument_list|(
name|contextSet
operator|.
name|getLength
argument_list|()
argument_list|)
expr_stmt|;
while|while
condition|(
name|rs
operator|.
name|next
argument_list|()
condition|)
block|{
name|DocumentImpl
name|doc
init|=
literal|null
decl_stmt|;
try|try
block|{
name|doc
operator|=
operator|(
name|DocumentImpl
operator|)
name|broker
operator|.
name|getXMLResource
argument_list|(
name|XmldbURI
operator|.
name|create
argument_list|(
name|rs
operator|.
name|getString
argument_list|(
literal|"DOCUMENT_URI"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|PermissionDeniedException
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|debug
argument_list|(
name|e
argument_list|)
expr_stmt|;
comment|//Untested, but that is roughly what should be returned.
if|if
condition|(
name|rs
operator|.
name|getMetaData
argument_list|()
operator|.
name|getColumnClassName
argument_list|(
literal|1
argument_list|)
operator|.
name|equals
argument_list|(
name|Boolean
operator|.
name|class
operator|.
name|getName
argument_list|()
argument_list|)
condition|)
block|{
name|result
operator|.
name|add
argument_list|(
name|AtomicValue
operator|.
name|EMPTY_VALUE
argument_list|)
expr_stmt|;
block|}
if|else if
condition|(
name|rs
operator|.
name|getMetaData
argument_list|()
operator|.
name|getColumnClassName
argument_list|(
literal|1
argument_list|)
operator|.
name|equals
argument_list|(
name|Double
operator|.
name|class
operator|.
name|getName
argument_list|()
argument_list|)
condition|)
block|{
name|result
operator|.
name|add
argument_list|(
name|AtomicValue
operator|.
name|EMPTY_VALUE
argument_list|)
expr_stmt|;
block|}
if|else if
condition|(
name|rs
operator|.
name|getMetaData
argument_list|()
operator|.
name|getColumnClassName
argument_list|(
literal|1
argument_list|)
operator|.
name|equals
argument_list|(
name|String
operator|.
name|class
operator|.
name|getName
argument_list|()
argument_list|)
condition|)
block|{
name|result
operator|.
name|add
argument_list|(
name|AtomicValue
operator|.
name|EMPTY_VALUE
argument_list|)
expr_stmt|;
block|}
if|else if
condition|(
name|rs
operator|.
name|getMetaData
argument_list|()
operator|.
name|getColumnType
argument_list|(
literal|1
argument_list|)
operator|==
name|java
operator|.
name|sql
operator|.
name|Types
operator|.
name|BINARY
condition|)
block|{
name|result
operator|.
name|add
argument_list|(
name|AtomicValue
operator|.
name|EMPTY_VALUE
argument_list|)
expr_stmt|;
block|}
else|else
throw|throw
operator|new
name|SQLException
argument_list|(
literal|"Unable to make an atomic value from '"
operator|+
name|rs
operator|.
name|getMetaData
argument_list|()
operator|.
name|getColumnClassName
argument_list|(
literal|1
argument_list|)
operator|+
literal|"'"
argument_list|)
throw|;
comment|//Ignore since the broker has no right on the document
continue|continue;
block|}
if|if
condition|(
name|contextSet
operator|.
name|getDocumentSet
argument_list|()
operator|.
name|contains
argument_list|(
name|doc
operator|.
name|getDocId
argument_list|()
argument_list|)
condition|)
block|{
name|NodeId
name|nodeId
init|=
operator|new
name|DLN
argument_list|(
name|rs
operator|.
name|getInt
argument_list|(
literal|"NODE_ID_UNITS"
argument_list|)
argument_list|,
name|rs
operator|.
name|getBytes
argument_list|(
literal|"NODE_ID"
argument_list|)
argument_list|,
literal|0
argument_list|)
decl_stmt|;
name|NodeProxy
name|p
init|=
operator|new
name|NodeProxy
argument_list|(
name|doc
argument_list|,
name|nodeId
argument_list|)
decl_stmt|;
comment|//Node is in the context : check if it is accurate
comment|//contextSet.contains(p) would have made more sense but there is a problem with
comment|//VirtualNodeSet when on the DESCENDANT_OR_SELF axis
if|if
condition|(
name|contextSet
operator|.
name|get
argument_list|(
name|p
argument_list|)
operator|!=
literal|null
condition|)
block|{
if|if
condition|(
name|rs
operator|.
name|getMetaData
argument_list|()
operator|.
name|getColumnClassName
argument_list|(
literal|1
argument_list|)
operator|.
name|equals
argument_list|(
name|Boolean
operator|.
name|class
operator|.
name|getName
argument_list|()
argument_list|)
condition|)
block|{
name|result
operator|.
name|add
argument_list|(
operator|new
name|BooleanValue
argument_list|(
name|rs
operator|.
name|getBoolean
argument_list|(
literal|1
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
if|else if
condition|(
name|rs
operator|.
name|getMetaData
argument_list|()
operator|.
name|getColumnClassName
argument_list|(
literal|1
argument_list|)
operator|.
name|equals
argument_list|(
name|Double
operator|.
name|class
operator|.
name|getName
argument_list|()
argument_list|)
condition|)
block|{
name|result
operator|.
name|add
argument_list|(
operator|new
name|DoubleValue
argument_list|(
name|rs
operator|.
name|getDouble
argument_list|(
literal|1
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
if|else if
condition|(
name|rs
operator|.
name|getMetaData
argument_list|()
operator|.
name|getColumnClassName
argument_list|(
literal|1
argument_list|)
operator|.
name|equals
argument_list|(
name|String
operator|.
name|class
operator|.
name|getName
argument_list|()
argument_list|)
condition|)
block|{
name|result
operator|.
name|add
argument_list|(
operator|new
name|StringValue
argument_list|(
name|rs
operator|.
name|getString
argument_list|(
literal|1
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
if|else if
condition|(
name|rs
operator|.
name|getMetaData
argument_list|()
operator|.
name|getColumnType
argument_list|(
literal|1
argument_list|)
operator|==
name|java
operator|.
name|sql
operator|.
name|Types
operator|.
name|BINARY
condition|)
block|{
name|result
operator|.
name|add
argument_list|(
name|BinaryValueFromInputStream
operator|.
name|getInstance
argument_list|(
name|context
argument_list|,
operator|new
name|Base64BinaryValueType
argument_list|()
argument_list|,
operator|new
name|ByteArrayInputStream
argument_list|(
name|rs
operator|.
name|getBytes
argument_list|(
literal|1
argument_list|)
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
else|else
throw|throw
operator|new
name|SQLException
argument_list|(
literal|"Unable to make an atomic value from '"
operator|+
name|rs
operator|.
name|getMetaData
argument_list|()
operator|.
name|getColumnClassName
argument_list|(
literal|1
argument_list|)
operator|+
literal|"'"
argument_list|)
throw|;
block|}
block|}
block|}
return|return
name|result
return|;
block|}
finally|finally
block|{
if|if
condition|(
name|rs
operator|!=
literal|null
condition|)
name|rs
operator|.
name|close
argument_list|()
expr_stmt|;
if|if
condition|(
name|ps
operator|!=
literal|null
condition|)
name|ps
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
block|}
annotation|@
name|Override
specifier|protected
name|boolean
name|checkIndex
parameter_list|(
name|DBBroker
name|broker
parameter_list|,
name|Connection
name|conn
parameter_list|)
throws|throws
name|SQLException
block|{
name|PreparedStatement
name|ps
init|=
name|conn
operator|.
name|prepareStatement
argument_list|(
literal|"SELECT * FROM "
operator|+
name|GMLHSQLIndex
operator|.
name|TABLE_NAME
operator|+
literal|";"
argument_list|)
decl_stmt|;
name|ResultSet
name|rs
init|=
literal|null
decl_stmt|;
try|try
block|{
name|rs
operator|=
name|ps
operator|.
name|executeQuery
argument_list|()
expr_stmt|;
while|while
condition|(
name|rs
operator|.
name|next
argument_list|()
condition|)
block|{
name|Geometry
name|original_geometry
init|=
name|wkbReader
operator|.
name|read
argument_list|(
name|rs
operator|.
name|getBytes
argument_list|(
literal|"WKB"
argument_list|)
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|original_geometry
operator|.
name|equals
argument_list|(
name|wktReader
operator|.
name|read
argument_list|(
name|rs
operator|.
name|getString
argument_list|(
literal|"WKT"
argument_list|)
argument_list|)
argument_list|)
condition|)
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"Inconsistent WKT : "
operator|+
name|rs
operator|.
name|getString
argument_list|(
literal|"WKT"
argument_list|)
argument_list|)
expr_stmt|;
return|return
literal|false
return|;
block|}
name|Geometry
name|EPSG4326_geometry
init|=
name|wkbReader
operator|.
name|read
argument_list|(
name|rs
operator|.
name|getBytes
argument_list|(
literal|"EPSG4326_WKB"
argument_list|)
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|EPSG4326_geometry
operator|.
name|equals
argument_list|(
name|wktReader
operator|.
name|read
argument_list|(
name|rs
operator|.
name|getString
argument_list|(
literal|"EPSG4326_WKT"
argument_list|)
argument_list|)
argument_list|)
condition|)
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"Inconsistent WKT : "
operator|+
name|rs
operator|.
name|getString
argument_list|(
literal|"EPSG4326_WKT"
argument_list|)
argument_list|)
expr_stmt|;
return|return
literal|false
return|;
block|}
if|if
condition|(
operator|!
name|original_geometry
operator|.
name|getGeometryType
argument_list|()
operator|.
name|equals
argument_list|(
name|rs
operator|.
name|getString
argument_list|(
literal|"GEOMETRY_TYPE"
argument_list|)
argument_list|)
condition|)
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"Inconsistent geometry type: "
operator|+
name|rs
operator|.
name|getDouble
argument_list|(
literal|"GEOMETRY_TYPE"
argument_list|)
argument_list|)
expr_stmt|;
return|return
literal|false
return|;
block|}
if|if
condition|(
name|original_geometry
operator|.
name|getEnvelopeInternal
argument_list|()
operator|.
name|getMinX
argument_list|()
operator|!=
name|rs
operator|.
name|getDouble
argument_list|(
literal|"MINX"
argument_list|)
condition|)
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"Inconsistent MinX: "
operator|+
name|rs
operator|.
name|getDouble
argument_list|(
literal|"MINX"
argument_list|)
argument_list|)
expr_stmt|;
return|return
literal|false
return|;
block|}
if|if
condition|(
name|original_geometry
operator|.
name|getEnvelopeInternal
argument_list|()
operator|.
name|getMaxX
argument_list|()
operator|!=
name|rs
operator|.
name|getDouble
argument_list|(
literal|"MAXX"
argument_list|)
condition|)
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"Inconsistent MaxX: "
operator|+
name|rs
operator|.
name|getDouble
argument_list|(
literal|"MAXX"
argument_list|)
argument_list|)
expr_stmt|;
return|return
literal|false
return|;
block|}
if|if
condition|(
name|original_geometry
operator|.
name|getEnvelopeInternal
argument_list|()
operator|.
name|getMinY
argument_list|()
operator|!=
name|rs
operator|.
name|getDouble
argument_list|(
literal|"MINY"
argument_list|)
condition|)
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"Inconsistent MinY: "
operator|+
name|rs
operator|.
name|getDouble
argument_list|(
literal|"MINY"
argument_list|)
argument_list|)
expr_stmt|;
return|return
literal|false
return|;
block|}
if|if
condition|(
name|original_geometry
operator|.
name|getEnvelopeInternal
argument_list|()
operator|.
name|getMaxY
argument_list|()
operator|!=
name|rs
operator|.
name|getDouble
argument_list|(
literal|"MAXY"
argument_list|)
condition|)
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"Inconsistent MaxY: "
operator|+
name|rs
operator|.
name|getDouble
argument_list|(
literal|"MAXY"
argument_list|)
argument_list|)
expr_stmt|;
return|return
literal|false
return|;
block|}
if|if
condition|(
name|original_geometry
operator|.
name|getCentroid
argument_list|()
operator|.
name|getCoordinate
argument_list|()
operator|.
name|x
operator|!=
name|rs
operator|.
name|getDouble
argument_list|(
literal|"CENTROID_X"
argument_list|)
condition|)
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"Inconsistent X for centroid : "
operator|+
name|rs
operator|.
name|getDouble
argument_list|(
literal|"CENTROID_X"
argument_list|)
argument_list|)
expr_stmt|;
return|return
literal|false
return|;
block|}
if|if
condition|(
name|original_geometry
operator|.
name|getCentroid
argument_list|()
operator|.
name|getCoordinate
argument_list|()
operator|.
name|y
operator|!=
name|rs
operator|.
name|getDouble
argument_list|(
literal|"CENTROID_Y"
argument_list|)
condition|)
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"Inconsistent Y for centroid : "
operator|+
name|rs
operator|.
name|getDouble
argument_list|(
literal|"CENTROID_Y"
argument_list|)
argument_list|)
expr_stmt|;
return|return
literal|false
return|;
block|}
if|if
condition|(
name|original_geometry
operator|.
name|getArea
argument_list|()
operator|!=
name|rs
operator|.
name|getDouble
argument_list|(
literal|"AREA"
argument_list|)
condition|)
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"Inconsistent area: "
operator|+
name|rs
operator|.
name|getDouble
argument_list|(
literal|"AREA"
argument_list|)
argument_list|)
expr_stmt|;
return|return
literal|false
return|;
block|}
name|String
name|srsName
init|=
name|rs
operator|.
name|getString
argument_list|(
literal|"SRS_NAME"
argument_list|)
decl_stmt|;
try|try
block|{
if|if
condition|(
operator|!
name|transformGeometry
argument_list|(
name|original_geometry
argument_list|,
name|srsName
argument_list|,
literal|"EPSG:4326"
argument_list|)
operator|.
name|equals
argument_list|(
name|EPSG4326_geometry
argument_list|)
condition|)
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"Transformed original geometry inconsistent with stored tranformed one"
argument_list|)
expr_stmt|;
return|return
literal|false
return|;
block|}
block|}
catch|catch
parameter_list|(
name|SpatialIndexException
name|e
parameter_list|)
block|{
comment|//Transforms the exception into an SQLException.
name|SQLException
name|ee
init|=
operator|new
name|SQLException
argument_list|(
name|e
operator|.
name|getMessage
argument_list|()
argument_list|)
decl_stmt|;
name|ee
operator|.
name|initCause
argument_list|(
name|e
argument_list|)
expr_stmt|;
throw|throw
name|ee
throw|;
block|}
if|if
condition|(
name|EPSG4326_geometry
operator|.
name|getEnvelopeInternal
argument_list|()
operator|.
name|getMinX
argument_list|()
operator|!=
name|rs
operator|.
name|getDouble
argument_list|(
literal|"EPSG4326_MINX"
argument_list|)
condition|)
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"Inconsistent MinX: "
operator|+
name|rs
operator|.
name|getDouble
argument_list|(
literal|"EPSG4326_MINX"
argument_list|)
argument_list|)
expr_stmt|;
return|return
literal|false
return|;
block|}
if|if
condition|(
name|EPSG4326_geometry
operator|.
name|getEnvelopeInternal
argument_list|()
operator|.
name|getMaxX
argument_list|()
operator|!=
name|rs
operator|.
name|getDouble
argument_list|(
literal|"EPSG4326_MAXX"
argument_list|)
condition|)
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"Inconsistent MaxX: "
operator|+
name|rs
operator|.
name|getDouble
argument_list|(
literal|"EPSG4326_MAXX"
argument_list|)
argument_list|)
expr_stmt|;
return|return
literal|false
return|;
block|}
if|if
condition|(
name|EPSG4326_geometry
operator|.
name|getEnvelopeInternal
argument_list|()
operator|.
name|getMinY
argument_list|()
operator|!=
name|rs
operator|.
name|getDouble
argument_list|(
literal|"EPSG4326_MINY"
argument_list|)
condition|)
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"Inconsistent MinY: "
operator|+
name|rs
operator|.
name|getDouble
argument_list|(
literal|"EPSG4326_MINY"
argument_list|)
argument_list|)
expr_stmt|;
return|return
literal|false
return|;
block|}
if|if
condition|(
name|EPSG4326_geometry
operator|.
name|getEnvelopeInternal
argument_list|()
operator|.
name|getMaxY
argument_list|()
operator|!=
name|rs
operator|.
name|getDouble
argument_list|(
literal|"EPSG4326_MAXY"
argument_list|)
condition|)
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"Inconsistent MaxY: "
operator|+
name|rs
operator|.
name|getDouble
argument_list|(
literal|"EPSG4326_MAXY"
argument_list|)
argument_list|)
expr_stmt|;
return|return
literal|false
return|;
block|}
if|if
condition|(
name|EPSG4326_geometry
operator|.
name|getCentroid
argument_list|()
operator|.
name|getCoordinate
argument_list|()
operator|.
name|x
operator|!=
name|rs
operator|.
name|getDouble
argument_list|(
literal|"EPSG4326_CENTROID_X"
argument_list|)
condition|)
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"Inconsistent X for centroid : "
operator|+
name|rs
operator|.
name|getDouble
argument_list|(
literal|"EPSG4326_CENTROID_X"
argument_list|)
argument_list|)
expr_stmt|;
return|return
literal|false
return|;
block|}
if|if
condition|(
name|EPSG4326_geometry
operator|.
name|getCentroid
argument_list|()
operator|.
name|getCoordinate
argument_list|()
operator|.
name|y
operator|!=
name|rs
operator|.
name|getDouble
argument_list|(
literal|"EPSG4326_CENTROID_Y"
argument_list|)
condition|)
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"Inconsistent Y for centroid : "
operator|+
name|rs
operator|.
name|getDouble
argument_list|(
literal|"EPSG4326_CENTROID_Y"
argument_list|)
argument_list|)
expr_stmt|;
return|return
literal|false
return|;
block|}
if|if
condition|(
name|EPSG4326_geometry
operator|.
name|getArea
argument_list|()
operator|!=
name|rs
operator|.
name|getDouble
argument_list|(
literal|"EPSG4326_AREA"
argument_list|)
condition|)
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"Inconsistent area: "
operator|+
name|rs
operator|.
name|getDouble
argument_list|(
literal|"EPSG4326_AREA"
argument_list|)
argument_list|)
expr_stmt|;
return|return
literal|false
return|;
block|}
if|if
condition|(
name|original_geometry
operator|.
name|isEmpty
argument_list|()
operator|==
name|rs
operator|.
name|getBoolean
argument_list|(
literal|"IS_CLOSED"
argument_list|)
condition|)
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"Inconsistent area: "
operator|+
name|rs
operator|.
name|getBoolean
argument_list|(
literal|"IS_CLOSED"
argument_list|)
argument_list|)
expr_stmt|;
return|return
literal|false
return|;
block|}
if|if
condition|(
name|original_geometry
operator|.
name|isSimple
argument_list|()
operator|!=
name|rs
operator|.
name|getBoolean
argument_list|(
literal|"IS_SIMPLE"
argument_list|)
condition|)
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"Inconsistent area: "
operator|+
name|rs
operator|.
name|getBoolean
argument_list|(
literal|"IS_SIMPLE"
argument_list|)
argument_list|)
expr_stmt|;
return|return
literal|false
return|;
block|}
if|if
condition|(
name|original_geometry
operator|.
name|isValid
argument_list|()
operator|!=
name|rs
operator|.
name|getBoolean
argument_list|(
literal|"IS_VALID"
argument_list|)
condition|)
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"Inconsistent area: "
operator|+
name|rs
operator|.
name|getBoolean
argument_list|(
literal|"IS_VALID"
argument_list|)
argument_list|)
expr_stmt|;
return|return
literal|false
return|;
block|}
name|DocumentImpl
name|doc
init|=
literal|null
decl_stmt|;
try|try
block|{
name|doc
operator|=
operator|(
name|DocumentImpl
operator|)
name|broker
operator|.
name|getXMLResource
argument_list|(
name|XmldbURI
operator|.
name|create
argument_list|(
name|rs
operator|.
name|getString
argument_list|(
literal|"DOCUMENT_URI"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|PermissionDeniedException
name|e
parameter_list|)
block|{
comment|//The broker has no right on the document
name|LOG
operator|.
name|error
argument_list|(
name|e
argument_list|)
expr_stmt|;
return|return
literal|false
return|;
block|}
name|NodeId
name|nodeId
init|=
operator|new
name|DLN
argument_list|(
name|rs
operator|.
name|getInt
argument_list|(
literal|"NODE_ID_UNITS"
argument_list|)
argument_list|,
name|rs
operator|.
name|getBytes
argument_list|(
literal|"NODE_ID"
argument_list|)
argument_list|,
literal|0
argument_list|)
decl_stmt|;
name|IStoredNode
name|node
init|=
name|broker
operator|.
name|objectWith
argument_list|(
operator|new
name|NodeProxy
argument_list|(
name|doc
argument_list|,
name|nodeId
argument_list|)
argument_list|)
decl_stmt|;
if|if
condition|(
name|node
operator|==
literal|null
condition|)
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"Node "
operator|+
name|nodeId
operator|+
literal|"doesn't exist"
argument_list|)
expr_stmt|;
return|return
literal|false
return|;
block|}
if|if
condition|(
operator|!
name|AbstractGMLJDBCIndexWorker
operator|.
name|GML_NS
operator|.
name|equals
argument_list|(
name|node
operator|.
name|getNamespaceURI
argument_list|()
argument_list|)
condition|)
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"GML indexed node ("
operator|+
name|node
operator|.
name|getNodeId
argument_list|()
operator|+
literal|") is in the '"
operator|+
name|node
operator|.
name|getNamespaceURI
argument_list|()
operator|+
literal|"' namespace. '"
operator|+
name|AbstractGMLJDBCIndexWorker
operator|.
name|GML_NS
operator|+
literal|"' was expected !"
argument_list|)
expr_stmt|;
return|return
literal|false
return|;
block|}
if|if
condition|(
operator|!
name|original_geometry
operator|.
name|getGeometryType
argument_list|()
operator|.
name|equals
argument_list|(
name|node
operator|.
name|getLocalName
argument_list|()
argument_list|)
condition|)
block|{
if|if
condition|(
literal|"Box"
operator|.
name|equals
argument_list|(
name|node
operator|.
name|getLocalName
argument_list|()
argument_list|)
operator|&&
literal|"Polygon"
operator|.
name|equals
argument_list|(
name|original_geometry
operator|.
name|getGeometryType
argument_list|()
argument_list|)
condition|)
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"GML indexed node ("
operator|+
name|node
operator|.
name|getNodeId
argument_list|()
operator|+
literal|") is a gml:Box indexed as a polygon"
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"GML indexed node ("
operator|+
name|node
operator|.
name|getNodeId
argument_list|()
operator|+
literal|") has '"
operator|+
name|node
operator|.
name|getLocalName
argument_list|()
operator|+
literal|"' as its local name. '"
operator|+
name|original_geometry
operator|.
name|getGeometryType
argument_list|()
operator|+
literal|"' was expected !"
argument_list|)
expr_stmt|;
return|return
literal|false
return|;
block|}
block|}
name|LOG
operator|.
name|info
argument_list|(
name|node
argument_list|)
expr_stmt|;
block|}
return|return
literal|true
return|;
block|}
catch|catch
parameter_list|(
name|ParseException
name|e
parameter_list|)
block|{
comment|//Transforms the exception into an SQLException.
comment|//Very unlikely to happen though...
name|SQLException
name|ee
init|=
operator|new
name|SQLException
argument_list|(
name|e
operator|.
name|getMessage
argument_list|()
argument_list|)
decl_stmt|;
name|ee
operator|.
name|initCause
argument_list|(
name|e
argument_list|)
expr_stmt|;
throw|throw
name|ee
throw|;
block|}
finally|finally
block|{
if|if
condition|(
name|rs
operator|!=
literal|null
condition|)
name|rs
operator|.
name|close
argument_list|()
expr_stmt|;
if|if
condition|(
name|ps
operator|!=
literal|null
condition|)
name|ps
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
block|}
annotation|@
name|Override
specifier|public
parameter_list|<
name|T
extends|extends
name|IStoredNode
parameter_list|>
name|IStoredNode
name|getReindexRoot
parameter_list|(
name|IStoredNode
argument_list|<
name|T
argument_list|>
name|node
parameter_list|,
name|NodePath
name|path
parameter_list|,
name|boolean
name|insert
parameter_list|,
name|boolean
name|includeSelf
parameter_list|)
block|{
return|return
literal|null
return|;
block|}
annotation|@
name|Override
specifier|public
name|QueryRewriter
name|getQueryRewriter
parameter_list|(
name|XQueryContext
name|context
parameter_list|)
block|{
return|return
literal|null
return|;
block|}
block|}
end_class

end_unit

