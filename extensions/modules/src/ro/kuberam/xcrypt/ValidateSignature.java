begin_unit|revision:1.0.0;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  *  eXist Java Cryptographic Extension  *  Copyright (C) 2010 Claudius Teodorescu at http://kuberam.ro  *  *  Released under LGPL License - http://gnu.org/licenses/lgpl.html.  *  */
end_comment

begin_package
package|package
name|ro
operator|.
name|kuberam
operator|.
name|xcrypt
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|StringReader
import|;
end_import

begin_import
import|import
name|java
operator|.
name|security
operator|.
name|Key
import|;
end_import

begin_import
import|import
name|java
operator|.
name|security
operator|.
name|KeyException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|security
operator|.
name|PublicKey
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Iterator
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|xml
operator|.
name|crypto
operator|.
name|AlgorithmMethod
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|xml
operator|.
name|crypto
operator|.
name|KeySelector
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|xml
operator|.
name|crypto
operator|.
name|KeySelectorException
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|xml
operator|.
name|crypto
operator|.
name|KeySelectorResult
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|xml
operator|.
name|crypto
operator|.
name|XMLCryptoContext
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|xml
operator|.
name|crypto
operator|.
name|XMLStructure
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|xml
operator|.
name|crypto
operator|.
name|dsig
operator|.
name|Reference
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|xml
operator|.
name|crypto
operator|.
name|dsig
operator|.
name|SignatureMethod
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|xml
operator|.
name|crypto
operator|.
name|dsig
operator|.
name|XMLSignature
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|xml
operator|.
name|crypto
operator|.
name|dsig
operator|.
name|XMLSignatureFactory
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|xml
operator|.
name|crypto
operator|.
name|dsig
operator|.
name|dom
operator|.
name|DOMValidateContext
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|xml
operator|.
name|crypto
operator|.
name|dsig
operator|.
name|keyinfo
operator|.
name|KeyInfo
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|xml
operator|.
name|crypto
operator|.
name|dsig
operator|.
name|keyinfo
operator|.
name|KeyValue
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|xml
operator|.
name|parsers
operator|.
name|DocumentBuilderFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|w3c
operator|.
name|dom
operator|.
name|Document
import|;
end_import

begin_import
import|import
name|org
operator|.
name|w3c
operator|.
name|dom
operator|.
name|NodeList
import|;
end_import

begin_import
import|import
name|org
operator|.
name|xml
operator|.
name|sax
operator|.
name|InputSource
import|;
end_import

begin_comment
comment|/**  *  * @author claudius  */
end_comment

begin_class
specifier|public
class|class
name|ValidateSignature
block|{
specifier|public
specifier|static
name|Boolean
name|ValidateDigitalSignature
parameter_list|(
name|org
operator|.
name|w3c
operator|.
name|dom
operator|.
name|Document
name|inputDoc
parameter_list|)
throws|throws
name|Exception
block|{
comment|// Find Signature element
name|NodeList
name|nl
init|=
name|inputDoc
operator|.
name|getElementsByTagNameNS
argument_list|(
name|XMLSignature
operator|.
name|XMLNS
argument_list|,
literal|"Signature"
argument_list|)
decl_stmt|;
if|if
condition|(
name|nl
operator|.
name|getLength
argument_list|()
operator|==
literal|0
condition|)
block|{
throw|throw
operator|new
name|Exception
argument_list|(
literal|"Cannot find Signature element"
argument_list|)
throw|;
block|}
comment|// Create a DOM XMLSignatureFactory that will be used to unmarshal the
comment|// document containing the XMLSignature
name|XMLSignatureFactory
name|fac
init|=
name|XMLSignatureFactory
operator|.
name|getInstance
argument_list|(
literal|"DOM"
argument_list|)
decl_stmt|;
comment|// Create a DOMValidateContext and specify a KeyValue KeySelector
comment|// and document context
name|DOMValidateContext
name|valContext
init|=
operator|new
name|DOMValidateContext
argument_list|(
operator|new
name|KeyValueKeySelector
argument_list|()
argument_list|,
name|nl
operator|.
name|item
argument_list|(
literal|0
argument_list|)
argument_list|)
decl_stmt|;
comment|// unmarshal the XMLSignature
name|XMLSignature
name|signature
init|=
name|fac
operator|.
name|unmarshalXMLSignature
argument_list|(
name|valContext
argument_list|)
decl_stmt|;
comment|// Validate the XMLSignature (generated above)
name|boolean
name|coreValidity
init|=
name|signature
operator|.
name|validate
argument_list|(
name|valContext
argument_list|)
decl_stmt|;
comment|// Check core validation status
if|if
condition|(
name|coreValidity
operator|==
literal|false
condition|)
block|{
name|System
operator|.
name|err
operator|.
name|println
argument_list|(
literal|"Signature failed core validation"
argument_list|)
expr_stmt|;
name|boolean
name|sv
init|=
name|signature
operator|.
name|getSignatureValue
argument_list|()
operator|.
name|validate
argument_list|(
name|valContext
argument_list|)
decl_stmt|;
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"signature validation status: "
operator|+
name|sv
argument_list|)
expr_stmt|;
comment|// check the validation status of each Reference
name|Iterator
name|i
init|=
name|signature
operator|.
name|getSignedInfo
argument_list|()
operator|.
name|getReferences
argument_list|()
operator|.
name|iterator
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|j
init|=
literal|0
init|;
name|i
operator|.
name|hasNext
argument_list|()
condition|;
name|j
operator|++
control|)
block|{
name|boolean
name|refValid
init|=
operator|(
operator|(
name|Reference
operator|)
name|i
operator|.
name|next
argument_list|()
operator|)
operator|.
name|validate
argument_list|(
name|valContext
argument_list|)
decl_stmt|;
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"ref["
operator|+
name|j
operator|+
literal|"] validity status: "
operator|+
name|refValid
argument_list|)
expr_stmt|;
block|}
block|}
return|return
name|coreValidity
return|;
block|}
comment|/**      * KeySelector which retrieves the public key out of the      * KeyValue element and returns it.      * NOTE: If the key algorithm doesn't match signature algorithm,      * then the public key will be ignored.      */
specifier|private
specifier|static
class|class
name|KeyValueKeySelector
extends|extends
name|KeySelector
block|{
specifier|public
name|KeySelectorResult
name|select
parameter_list|(
name|KeyInfo
name|keyInfo
parameter_list|,
name|KeySelector
operator|.
name|Purpose
name|purpose
parameter_list|,
name|AlgorithmMethod
name|method
parameter_list|,
name|XMLCryptoContext
name|context
parameter_list|)
throws|throws
name|KeySelectorException
block|{
if|if
condition|(
name|keyInfo
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|KeySelectorException
argument_list|(
literal|"Null KeyInfo object!"
argument_list|)
throw|;
block|}
name|SignatureMethod
name|sm
init|=
operator|(
name|SignatureMethod
operator|)
name|method
decl_stmt|;
name|List
name|list
init|=
name|keyInfo
operator|.
name|getContent
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|list
operator|.
name|size
argument_list|()
condition|;
name|i
operator|++
control|)
block|{
name|XMLStructure
name|xmlStructure
init|=
operator|(
name|XMLStructure
operator|)
name|list
operator|.
name|get
argument_list|(
name|i
argument_list|)
decl_stmt|;
if|if
condition|(
name|xmlStructure
operator|instanceof
name|KeyValue
condition|)
block|{
name|PublicKey
name|pk
init|=
literal|null
decl_stmt|;
try|try
block|{
name|pk
operator|=
operator|(
operator|(
name|KeyValue
operator|)
name|xmlStructure
operator|)
operator|.
name|getPublicKey
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|KeyException
name|ke
parameter_list|)
block|{
throw|throw
operator|new
name|KeySelectorException
argument_list|(
name|ke
argument_list|)
throw|;
block|}
comment|// make sure algorithm is compatible with method
if|if
condition|(
name|algEquals
argument_list|(
name|sm
operator|.
name|getAlgorithm
argument_list|()
argument_list|,
name|pk
operator|.
name|getAlgorithm
argument_list|()
argument_list|)
condition|)
block|{
return|return
operator|new
name|SimpleKeySelectorResult
argument_list|(
name|pk
argument_list|)
return|;
block|}
block|}
block|}
throw|throw
operator|new
name|KeySelectorException
argument_list|(
literal|"No KeyValue element found!"
argument_list|)
throw|;
block|}
specifier|static
name|boolean
name|algEquals
parameter_list|(
name|String
name|algURI
parameter_list|,
name|String
name|algName
parameter_list|)
block|{
if|if
condition|(
name|algName
operator|.
name|equalsIgnoreCase
argument_list|(
literal|"DSA"
argument_list|)
operator|&&
name|algURI
operator|.
name|equalsIgnoreCase
argument_list|(
name|SignatureMethod
operator|.
name|DSA_SHA1
argument_list|)
condition|)
block|{
return|return
literal|true
return|;
block|}
if|else if
condition|(
name|algName
operator|.
name|equalsIgnoreCase
argument_list|(
literal|"RSA"
argument_list|)
operator|&&
name|algURI
operator|.
name|equalsIgnoreCase
argument_list|(
name|SignatureMethod
operator|.
name|RSA_SHA1
argument_list|)
condition|)
block|{
return|return
literal|true
return|;
block|}
else|else
block|{
return|return
literal|false
return|;
block|}
block|}
block|}
specifier|private
specifier|static
class|class
name|SimpleKeySelectorResult
implements|implements
name|KeySelectorResult
block|{
specifier|private
name|PublicKey
name|pk
decl_stmt|;
name|SimpleKeySelectorResult
parameter_list|(
name|PublicKey
name|pk
parameter_list|)
block|{
name|this
operator|.
name|pk
operator|=
name|pk
expr_stmt|;
block|}
specifier|public
name|Key
name|getKey
parameter_list|()
block|{
return|return
name|pk
return|;
block|}
block|}
specifier|public
specifier|static
name|void
name|main
parameter_list|(
name|String
index|[]
name|args
parameter_list|)
throws|throws
name|Exception
block|{
name|String
name|docString
init|=
literal|"<data>"
operator|+
literal|"<a xml:id=\"type\">17</a>"
operator|+
literal|"<dsig:Signature xmlns:dsig=\"http://www.w3.org/2000/09/xmldsig#\">"
operator|+
literal|"<dsig:SignedInfo>"
operator|+
literal|"<dsig:CanonicalizationMethod Algorithm=\"http://www.w3.org/TR/2001/REC-xml-c14n-20010315\"/>"
operator|+
literal|"<dsig:SignatureMethod Algorithm=\"http://www.w3.org/2000/09/xmldsig#dsa-sha1\"/>"
operator|+
literal|"<dsig:Reference URI=\"\">"
operator|+
literal|"<dsig:Transforms>"
operator|+
literal|"<dsig:Transform Algorithm=\"http://www.w3.org/2000/09/xmldsig#enveloped-signature\"/>"
operator|+
literal|"</dsig:Transforms>"
operator|+
literal|"<dsig:DigestMethod Algorithm=\"http://www.w3.org/2000/09/xmldsig#sha1\"/>"
operator|+
literal|"<dsig:DigestValue>YHmHtPDiBQLusVhIZECdZ60C9vA=</dsig:DigestValue>"
operator|+
literal|"</dsig:Reference>"
operator|+
literal|"</dsig:SignedInfo>"
operator|+
literal|"<dsig:SignatureValue>dfpLi1wje1gAOgclv91hkJ2GupQgkIeth1IVQuCmDvMDy6C2U+XYDA==</dsig:SignatureValue>"
operator|+
literal|"<dsig:KeyInfo>"
operator|+
literal|"<dsig:KeyValue>"
operator|+
literal|"<dsig:DSAKeyValue>"
operator|+
literal|"<dsig:P>/KaCzo4Syrom78z3EQ5SbbB4sF7ey80etKII864WF64B81uRpH5t9jQTxeEu0ImbzRMqzVDZkVG9xD7nN1kuFw==</dsig:P>"
operator|+
literal|"<dsig:Q>li7dzDacuo67Jg7mtqEm2TRuOMU=</dsig:Q>"
operator|+
literal|"<dsig:G>Z4Rxsnqc9E7pGknFFH2xqaryRPBaQ01khpMdLRQnG541Awtx/XPaF5Bpsy4pNWMOHCBiNU0NogpsQW5QvnlMpA==</dsig:G>"
operator|+
literal|"<dsig:Y>A7M8Zg/MvIPQyRECctmsr+GpqjMGLgWDG9Bmz4DWIDJqzHjE1kGpkrmuhE1sOr8KYGBfj+zVP310fAhCR2+mxg==</dsig:Y>"
operator|+
literal|"</dsig:DSAKeyValue>"
operator|+
literal|"</dsig:KeyValue>"
operator|+
literal|"</dsig:KeyInfo>"
operator|+
literal|"</dsig:Signature>"
operator|+
literal|"</data>"
decl_stmt|;
name|DocumentBuilderFactory
name|dbf
init|=
name|DocumentBuilderFactory
operator|.
name|newInstance
argument_list|()
decl_stmt|;
name|dbf
operator|.
name|setNamespaceAware
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|Document
name|inputDoc
init|=
name|dbf
operator|.
name|newDocumentBuilder
argument_list|()
operator|.
name|parse
argument_list|(
operator|new
name|InputSource
argument_list|(
operator|new
name|StringReader
argument_list|(
name|docString
argument_list|)
argument_list|)
argument_list|)
decl_stmt|;
name|Boolean
name|isValid
init|=
name|ValidateDigitalSignature
argument_list|(
name|inputDoc
argument_list|)
decl_stmt|;
name|System
operator|.
name|out
operator|.
name|print
argument_list|(
name|isValid
operator|+
literal|"\n"
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

