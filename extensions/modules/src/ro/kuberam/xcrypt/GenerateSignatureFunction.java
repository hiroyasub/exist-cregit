begin_unit|revision:1.0.0;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  *  eXist Java Cryptographic Extension  *  Copyright (C) 2010 Claudius Teodorescu at http://kuberam.ro  *    *  Released under LGPL License - http://gnu.org/licenses/lgpl.html.  *    */
end_comment

begin_package
package|package
name|ro
operator|.
name|kuberam
operator|.
name|xcrypt
package|;
end_package

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|URISyntaxException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|log4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|InputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|StringReader
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|xml
operator|.
name|crypto
operator|.
name|dsig
operator|.
name|CanonicalizationMethod
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|xml
operator|.
name|crypto
operator|.
name|dsig
operator|.
name|DigestMethod
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|xml
operator|.
name|crypto
operator|.
name|dsig
operator|.
name|SignatureMethod
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|xml
operator|.
name|parsers
operator|.
name|DocumentBuilderFactory
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|xml
operator|.
name|parsers
operator|.
name|DocumentBuilder
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|xml
operator|.
name|parsers
operator|.
name|ParserConfigurationException
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|xml
operator|.
name|parsers
operator|.
name|SAXParser
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|xml
operator|.
name|parsers
operator|.
name|SAXParserFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|Namespaces
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|dom
operator|.
name|BinaryDocument
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|memtree
operator|.
name|DocumentImpl
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|dom
operator|.
name|QName
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|security
operator|.
name|PermissionDeniedException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|xquery
operator|.
name|BasicFunction
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|xquery
operator|.
name|Cardinality
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|xquery
operator|.
name|FunctionSignature
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|xquery
operator|.
name|XPathException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|xquery
operator|.
name|XQueryContext
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|xquery
operator|.
name|value
operator|.
name|FunctionParameterSequenceType
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|xquery
operator|.
name|value
operator|.
name|Sequence
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|xquery
operator|.
name|value
operator|.
name|SequenceType
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|xquery
operator|.
name|value
operator|.
name|Type
import|;
end_import

begin_import
import|import
name|org
operator|.
name|xml
operator|.
name|sax
operator|.
name|InputSource
import|;
end_import

begin_import
import|import
name|org
operator|.
name|xml
operator|.
name|sax
operator|.
name|SAXException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|xquery
operator|.
name|value
operator|.
name|FunctionReturnSequenceType
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|memtree
operator|.
name|SAXAdapter
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|storage
operator|.
name|lock
operator|.
name|Lock
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|storage
operator|.
name|serializers
operator|.
name|Serializer
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|validation
operator|.
name|internal
operator|.
name|node
operator|.
name|NodeInputStream
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|xmldb
operator|.
name|XmldbURI
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|xquery
operator|.
name|value
operator|.
name|NodeValue
import|;
end_import

begin_import
import|import
name|org
operator|.
name|w3c
operator|.
name|dom
operator|.
name|Node
import|;
end_import

begin_import
import|import
name|org
operator|.
name|w3c
operator|.
name|dom
operator|.
name|NodeList
import|;
end_import

begin_import
import|import
name|org
operator|.
name|xml
operator|.
name|sax
operator|.
name|XMLReader
import|;
end_import

begin_comment
comment|/**  * Cryptographic extension functions.  *   * @author Claudius Teodorescu (claud108@yahoo.com)  */
end_comment

begin_class
specifier|public
class|class
name|GenerateSignatureFunction
extends|extends
name|BasicFunction
block|{
specifier|private
specifier|final
specifier|static
name|Logger
name|logger
init|=
name|Logger
operator|.
name|getLogger
argument_list|(
name|GenerateSignatureFunction
operator|.
name|class
argument_list|)
decl_stmt|;
specifier|private
specifier|final
specifier|static
name|String
name|digitalCertificateDetailsDescription
init|=
literal|"Details about the digital certificate to be used for signing the input document."
operator|+
literal|" These details have be passed using an XML fragment with the following structure (this is an example): "
operator|+
literal|"<digital-certificate>"
operator|+
literal|"<keystore-type>JKS</keystore-type>"
operator|+
literal|"<keystore-password>ab987c</keystore-password>"
operator|+
literal|"<key-alias>eXist</key-alias>"
operator|+
literal|"<private-key-password>kpi135</private-key-password>"
operator|+
literal|"<keystore-uri>/db/mykeystoreEXist</keystore-uri>"
operator|+
literal|"</digital-certificate>."
decl_stmt|;
specifier|private
specifier|final
specifier|static
name|String
name|certificateRootElementName
init|=
literal|"digital-certificate"
decl_stmt|;
specifier|private
specifier|final
specifier|static
name|String
index|[]
name|certificateChildElementNames
init|=
block|{
literal|"keystore-type"
block|,
literal|"keystore-password"
block|,
literal|"key-alias"
block|,
literal|"private-key-password"
block|,
literal|"keystore-uri"
block|}
decl_stmt|;
specifier|public
specifier|final
specifier|static
name|FunctionSignature
name|signatures
index|[]
init|=
block|{
operator|new
name|FunctionSignature
argument_list|(
operator|new
name|QName
argument_list|(
literal|"generate-signature"
argument_list|,
name|XcryptModule
operator|.
name|NAMESPACE_URI
argument_list|,
name|XcryptModule
operator|.
name|PREFIX
argument_list|)
argument_list|,
literal|"Generate an XML digital signature based on generated key pair. This signature is for the whole document"
argument_list|,
operator|new
name|SequenceType
index|[]
block|{
operator|new
name|FunctionParameterSequenceType
argument_list|(
literal|"input-doc"
argument_list|,
name|Type
operator|.
name|NODE
argument_list|,
name|Cardinality
operator|.
name|EXACTLY_ONE
argument_list|,
literal|"The document to be signed."
argument_list|)
block|,
operator|new
name|FunctionParameterSequenceType
argument_list|(
literal|"canonicalization-algorithm"
argument_list|,
name|Type
operator|.
name|STRING
argument_list|,
name|Cardinality
operator|.
name|EXACTLY_ONE
argument_list|,
literal|"The canonicalization algorithm applied to the SignedInfo element prior to performing signature calculations. Possible values are: 'exclusive', 'exclusive-with-comments', 'inclusive', and 'inclusive-with-comments'. The default value is 'inclusive-with-comments'."
argument_list|)
block|,
operator|new
name|FunctionParameterSequenceType
argument_list|(
literal|"digest-algorithm"
argument_list|,
name|Type
operator|.
name|STRING
argument_list|,
name|Cardinality
operator|.
name|EXACTLY_ONE
argument_list|,
literal|"The digest algorithm to be applied to the signed object. Possible values are: 'SHA1', 'SHA256', and 'SHA512'. The default value is 'SHA1'."
argument_list|)
block|,
operator|new
name|FunctionParameterSequenceType
argument_list|(
literal|"signature-algorithm"
argument_list|,
name|Type
operator|.
name|STRING
argument_list|,
name|Cardinality
operator|.
name|EXACTLY_ONE
argument_list|,
literal|"The algorithm used for signature generation and validation. Possible values are: 'DSA_SHA1', and 'RSA_SHA1'. The default value is 'RSA_SHA1'."
argument_list|)
block|,
operator|new
name|FunctionParameterSequenceType
argument_list|(
literal|"signature-namespace-prefix"
argument_list|,
name|Type
operator|.
name|STRING
argument_list|,
name|Cardinality
operator|.
name|EXACTLY_ONE
argument_list|,
literal|"The default namespace prefix for signature."
argument_list|)
block|,
operator|new
name|FunctionParameterSequenceType
argument_list|(
literal|"signature-type"
argument_list|,
name|Type
operator|.
name|STRING
argument_list|,
name|Cardinality
operator|.
name|EXACTLY_ONE
argument_list|,
literal|"The method used for signing the content of signature. Possible values are: 'enveloping', 'enveloped', and 'detached'. The default value is 'enveloped'."
argument_list|)
block|}
argument_list|,
operator|new
name|FunctionReturnSequenceType
argument_list|(
name|Type
operator|.
name|NODE
argument_list|,
name|Cardinality
operator|.
name|EXACTLY_ONE
argument_list|,
literal|"the signed document (or signature) as node()."
argument_list|)
argument_list|)
block|,
operator|new
name|FunctionSignature
argument_list|(
operator|new
name|QName
argument_list|(
literal|"generate-signature"
argument_list|,
name|XcryptModule
operator|.
name|NAMESPACE_URI
argument_list|,
name|XcryptModule
operator|.
name|PREFIX
argument_list|)
argument_list|,
literal|"Generate an XML digital signature based on generated key pair. This signature is for node(s) selected using an XPath expression"
argument_list|,
operator|new
name|SequenceType
index|[]
block|{
operator|new
name|FunctionParameterSequenceType
argument_list|(
literal|"input-doc"
argument_list|,
name|Type
operator|.
name|NODE
argument_list|,
name|Cardinality
operator|.
name|EXACTLY_ONE
argument_list|,
literal|"The document to be signed."
argument_list|)
block|,
operator|new
name|FunctionParameterSequenceType
argument_list|(
literal|"canonicalization-algorithm"
argument_list|,
name|Type
operator|.
name|STRING
argument_list|,
name|Cardinality
operator|.
name|EXACTLY_ONE
argument_list|,
literal|"The canonicalization algorithm applied to the SignedInfo element prior to performing signature calculations. Possible values are: 'exclusive', 'exclusive-with-comments', 'inclusive', and 'inclusive-with-comments'. The default value is 'inclusive-with-comments'."
argument_list|)
block|,
operator|new
name|FunctionParameterSequenceType
argument_list|(
literal|"digest-algorithm"
argument_list|,
name|Type
operator|.
name|STRING
argument_list|,
name|Cardinality
operator|.
name|EXACTLY_ONE
argument_list|,
literal|"The digest algorithm to be applied to the signed object. Possible values are: 'SHA1', 'SHA256', and 'SHA512'. The default value is 'SHA1'."
argument_list|)
block|,
operator|new
name|FunctionParameterSequenceType
argument_list|(
literal|"signature-algorithm"
argument_list|,
name|Type
operator|.
name|STRING
argument_list|,
name|Cardinality
operator|.
name|EXACTLY_ONE
argument_list|,
literal|"The algorithm used for signature generation and validation. Possible values are: 'DSA_SHA1', and 'RSA_SHA1'. The default value is 'RSA_SHA1'."
argument_list|)
block|,
operator|new
name|FunctionParameterSequenceType
argument_list|(
literal|"signature-namespace-prefix"
argument_list|,
name|Type
operator|.
name|STRING
argument_list|,
name|Cardinality
operator|.
name|EXACTLY_ONE
argument_list|,
literal|"The default namespace prefix for signature."
argument_list|)
block|,
operator|new
name|FunctionParameterSequenceType
argument_list|(
literal|"signature-type"
argument_list|,
name|Type
operator|.
name|STRING
argument_list|,
name|Cardinality
operator|.
name|EXACTLY_ONE
argument_list|,
literal|"The method used for signing the content of signature. Possible values are: 'enveloping', 'enveloped', and 'detached'. The default value is 'enveloped'."
argument_list|)
block|,
operator|new
name|FunctionParameterSequenceType
argument_list|(
literal|"xpath-expression"
argument_list|,
name|Type
operator|.
name|ANY_TYPE
argument_list|,
name|Cardinality
operator|.
name|EXACTLY_ONE
argument_list|,
literal|"The XPath expression used for selecting the node(s) to be signed."
argument_list|)
block|}
argument_list|,
operator|new
name|FunctionReturnSequenceType
argument_list|(
name|Type
operator|.
name|NODE
argument_list|,
name|Cardinality
operator|.
name|EXACTLY_ONE
argument_list|,
literal|"the signed document (or signature) as node()."
argument_list|)
argument_list|)
block|,
operator|new
name|FunctionSignature
argument_list|(
operator|new
name|QName
argument_list|(
literal|"generate-signature"
argument_list|,
name|XcryptModule
operator|.
name|NAMESPACE_URI
argument_list|,
name|XcryptModule
operator|.
name|PREFIX
argument_list|)
argument_list|,
literal|"Generate an XML digital signature based on X.509 certificate."
argument_list|,
operator|new
name|SequenceType
index|[]
block|{
operator|new
name|FunctionParameterSequenceType
argument_list|(
literal|"input-doc"
argument_list|,
name|Type
operator|.
name|NODE
argument_list|,
name|Cardinality
operator|.
name|EXACTLY_ONE
argument_list|,
literal|"The document to be signed."
argument_list|)
block|,
operator|new
name|FunctionParameterSequenceType
argument_list|(
literal|"canonicalization-algorithm"
argument_list|,
name|Type
operator|.
name|STRING
argument_list|,
name|Cardinality
operator|.
name|EXACTLY_ONE
argument_list|,
literal|"The canonicalization algorithm applied to the SignedInfo element prior to performing signature calculations. Possible values are: 'exclusive', 'exclusive-with-comments', 'inclusive', and 'inclusive-with-comments'. The default value is 'inclusive-with-comments'."
argument_list|)
block|,
operator|new
name|FunctionParameterSequenceType
argument_list|(
literal|"digest-algorithm"
argument_list|,
name|Type
operator|.
name|STRING
argument_list|,
name|Cardinality
operator|.
name|EXACTLY_ONE
argument_list|,
literal|"The digest algorithm to be applied to the signed object. Possible values are: 'SHA1', 'SHA256', and 'SHA512'. The default value is 'SHA1'."
argument_list|)
block|,
operator|new
name|FunctionParameterSequenceType
argument_list|(
literal|"signature-algorithm"
argument_list|,
name|Type
operator|.
name|STRING
argument_list|,
name|Cardinality
operator|.
name|EXACTLY_ONE
argument_list|,
literal|"The algorithm used for signature generation and validation. Possible values are: 'DSA_SHA1', and 'RSA_SHA1'. The default value is 'RSA_SHA1'."
argument_list|)
block|,
operator|new
name|FunctionParameterSequenceType
argument_list|(
literal|"signature-namespace-prefix"
argument_list|,
name|Type
operator|.
name|STRING
argument_list|,
name|Cardinality
operator|.
name|EXACTLY_ONE
argument_list|,
literal|"The default namespace prefix for signature."
argument_list|)
block|,
operator|new
name|FunctionParameterSequenceType
argument_list|(
literal|"signature-type"
argument_list|,
name|Type
operator|.
name|STRING
argument_list|,
name|Cardinality
operator|.
name|EXACTLY_ONE
argument_list|,
literal|"The method used for signing the content of signature. Possible values are: 'enveloping', 'enveloped', and 'detached'. The default value is 'enveloped'."
argument_list|)
block|,
operator|new
name|FunctionParameterSequenceType
argument_list|(
literal|"digital-certificate"
argument_list|,
name|Type
operator|.
name|ANY_TYPE
argument_list|,
name|Cardinality
operator|.
name|ONE
argument_list|,
name|digitalCertificateDetailsDescription
argument_list|)
block|}
argument_list|,
operator|new
name|FunctionReturnSequenceType
argument_list|(
name|Type
operator|.
name|NODE
argument_list|,
name|Cardinality
operator|.
name|EXACTLY_ONE
argument_list|,
literal|"the signed document (or signature) as node()."
argument_list|)
argument_list|)
block|,
operator|new
name|FunctionSignature
argument_list|(
operator|new
name|QName
argument_list|(
literal|"generate-signature"
argument_list|,
name|XcryptModule
operator|.
name|NAMESPACE_URI
argument_list|,
name|XcryptModule
operator|.
name|PREFIX
argument_list|)
argument_list|,
literal|"Generate an XML digital signature based on generated key pair. This signature is for node(s) selected using an XPath expression"
argument_list|,
operator|new
name|SequenceType
index|[]
block|{
operator|new
name|FunctionParameterSequenceType
argument_list|(
literal|"input-doc"
argument_list|,
name|Type
operator|.
name|NODE
argument_list|,
name|Cardinality
operator|.
name|EXACTLY_ONE
argument_list|,
literal|"The document to be signed."
argument_list|)
block|,
operator|new
name|FunctionParameterSequenceType
argument_list|(
literal|"canonicalization-algorithm"
argument_list|,
name|Type
operator|.
name|STRING
argument_list|,
name|Cardinality
operator|.
name|EXACTLY_ONE
argument_list|,
literal|"The canonicalization algorithm applied to the SignedInfo element prior to performing signature calculations. Possible values are: 'exclusive', 'exclusive-with-comments', 'inclusive', and 'inclusive-with-comments'. The default value is 'inclusive-with-comments'."
argument_list|)
block|,
operator|new
name|FunctionParameterSequenceType
argument_list|(
literal|"digest-algorithm"
argument_list|,
name|Type
operator|.
name|STRING
argument_list|,
name|Cardinality
operator|.
name|EXACTLY_ONE
argument_list|,
literal|"The digest algorithm to be applied to the signed object. Possible values are: 'SHA1', 'SHA256', and 'SHA512'. The default value is 'SHA1'."
argument_list|)
block|,
operator|new
name|FunctionParameterSequenceType
argument_list|(
literal|"signature-algorithm"
argument_list|,
name|Type
operator|.
name|STRING
argument_list|,
name|Cardinality
operator|.
name|EXACTLY_ONE
argument_list|,
literal|"The algorithm used for signature generation and validation. Possible values are: 'DSA_SHA1', and 'RSA_SHA1'. The default value is 'RSA_SHA1'."
argument_list|)
block|,
operator|new
name|FunctionParameterSequenceType
argument_list|(
literal|"signature-namespace-prefix"
argument_list|,
name|Type
operator|.
name|STRING
argument_list|,
name|Cardinality
operator|.
name|EXACTLY_ONE
argument_list|,
literal|"The default namespace prefix for signature."
argument_list|)
block|,
operator|new
name|FunctionParameterSequenceType
argument_list|(
literal|"signature-type"
argument_list|,
name|Type
operator|.
name|STRING
argument_list|,
name|Cardinality
operator|.
name|EXACTLY_ONE
argument_list|,
literal|"The method used for signing the content of signature. Possible values are: 'enveloping', 'enveloped', and 'detached'. The default value is 'enveloped'."
argument_list|)
block|,
operator|new
name|FunctionParameterSequenceType
argument_list|(
literal|"xpath-expression"
argument_list|,
name|Type
operator|.
name|ANY_TYPE
argument_list|,
name|Cardinality
operator|.
name|EXACTLY_ONE
argument_list|,
literal|"The XPath expression used for selecting the node(s) to be signed."
argument_list|)
block|,
operator|new
name|FunctionParameterSequenceType
argument_list|(
literal|"digital-certificate"
argument_list|,
name|Type
operator|.
name|ANY_TYPE
argument_list|,
name|Cardinality
operator|.
name|ONE
argument_list|,
name|digitalCertificateDetailsDescription
argument_list|)
block|}
argument_list|,
operator|new
name|FunctionReturnSequenceType
argument_list|(
name|Type
operator|.
name|NODE
argument_list|,
name|Cardinality
operator|.
name|EXACTLY_ONE
argument_list|,
literal|"the signed document (or signature) as node()."
argument_list|)
argument_list|)
block|}
decl_stmt|;
specifier|public
name|GenerateSignatureFunction
parameter_list|(
name|XQueryContext
name|context
parameter_list|,
name|FunctionSignature
name|signature
parameter_list|)
block|{
name|super
argument_list|(
name|context
argument_list|,
name|signature
argument_list|)
expr_stmt|;
block|}
specifier|public
name|Sequence
name|eval
parameter_list|(
name|Sequence
index|[]
name|args
parameter_list|,
name|Sequence
name|contextSequence
parameter_list|)
throws|throws
name|XPathException
block|{
comment|//get  and process the input document or node to InputStream, in order to be transformed into DOM Document
name|Serializer
name|serializer
init|=
name|context
operator|.
name|getBroker
argument_list|()
operator|.
name|getSerializer
argument_list|()
decl_stmt|;
name|NodeValue
name|inputNode
init|=
operator|(
name|NodeValue
operator|)
name|args
index|[
literal|0
index|]
operator|.
name|itemAt
argument_list|(
literal|0
argument_list|)
decl_stmt|;
name|InputStream
name|inputNodeStream
init|=
operator|new
name|NodeInputStream
argument_list|(
name|serializer
argument_list|,
name|inputNode
argument_list|)
decl_stmt|;
comment|//get the canonicalization method
name|String
name|canonicalizationAlgorithm
init|=
name|args
index|[
literal|1
index|]
operator|.
name|getStringValue
argument_list|()
decl_stmt|;
comment|//get the canonicalization method URI
name|String
name|canonicalizationAlgorithmURI
init|=
name|CanonicalizationMethod
operator|.
name|INCLUSIVE_WITH_COMMENTS
decl_stmt|;
if|if
condition|(
name|canonicalizationAlgorithm
operator|.
name|equals
argument_list|(
literal|"exclusive"
argument_list|)
condition|)
block|{
name|canonicalizationAlgorithmURI
operator|=
name|CanonicalizationMethod
operator|.
name|EXCLUSIVE
expr_stmt|;
block|}
if|else if
condition|(
name|canonicalizationAlgorithm
operator|.
name|equals
argument_list|(
literal|"exclusive-with-comments"
argument_list|)
condition|)
block|{
name|canonicalizationAlgorithmURI
operator|=
name|CanonicalizationMethod
operator|.
name|EXCLUSIVE_WITH_COMMENTS
expr_stmt|;
block|}
if|else if
condition|(
name|canonicalizationAlgorithm
operator|.
name|equals
argument_list|(
literal|"inclusive"
argument_list|)
condition|)
block|{
name|canonicalizationAlgorithmURI
operator|=
name|CanonicalizationMethod
operator|.
name|INCLUSIVE
expr_stmt|;
block|}
else|else
block|{
throw|throw
operator|new
name|XPathException
argument_list|(
name|this
argument_list|,
literal|"This canonicalization algorithm is not supported!"
argument_list|)
throw|;
block|}
comment|//get the digest algorithm
name|String
name|digestAlgorithm
init|=
name|args
index|[
literal|2
index|]
operator|.
name|getStringValue
argument_list|()
decl_stmt|;
comment|//get the digest algorithm URI
name|String
name|digestAlgorithmURI
init|=
literal|""
decl_stmt|;
if|if
condition|(
name|digestAlgorithm
operator|.
name|equals
argument_list|(
literal|"SHA256"
argument_list|)
condition|)
block|{
name|digestAlgorithmURI
operator|=
name|DigestMethod
operator|.
name|SHA256
expr_stmt|;
block|}
if|else if
condition|(
name|digestAlgorithm
operator|.
name|equals
argument_list|(
literal|"SHA512"
argument_list|)
condition|)
block|{
name|digestAlgorithmURI
operator|=
name|DigestMethod
operator|.
name|SHA512
expr_stmt|;
block|}
if|else if
condition|(
name|digestAlgorithm
operator|.
name|equals
argument_list|(
literal|"SHA1"
argument_list|)
operator|||
name|digestAlgorithm
operator|.
name|equals
argument_list|(
literal|""
argument_list|)
condition|)
block|{
name|digestAlgorithmURI
operator|=
name|DigestMethod
operator|.
name|SHA1
expr_stmt|;
block|}
else|else
block|{
throw|throw
operator|new
name|XPathException
argument_list|(
name|this
argument_list|,
literal|"This digest algorithm is not supported!"
argument_list|)
throw|;
block|}
comment|//get the signature algorithm
name|String
name|signatureAlgorithm
init|=
name|args
index|[
literal|3
index|]
operator|.
name|getStringValue
argument_list|()
decl_stmt|;
comment|//get the signature algorithm URI
name|String
name|signatureAlgorithmURI
init|=
literal|""
decl_stmt|;
if|if
condition|(
name|signatureAlgorithm
operator|.
name|equals
argument_list|(
literal|"DSA_SHA1"
argument_list|)
condition|)
block|{
name|signatureAlgorithmURI
operator|=
name|SignatureMethod
operator|.
name|DSA_SHA1
expr_stmt|;
block|}
if|else if
condition|(
name|signatureAlgorithm
operator|.
name|equals
argument_list|(
literal|"RSA_SHA1"
argument_list|)
operator|||
name|signatureAlgorithm
operator|.
name|equals
argument_list|(
literal|""
argument_list|)
condition|)
block|{
name|signatureAlgorithmURI
operator|=
name|SignatureMethod
operator|.
name|RSA_SHA1
expr_stmt|;
block|}
else|else
block|{
throw|throw
operator|new
name|XPathException
argument_list|(
name|this
argument_list|,
literal|"This signature algorithm is not supported!"
argument_list|)
throw|;
block|}
comment|//get the key pair algorithm
name|String
name|keyPairAlgorithm
init|=
name|signatureAlgorithm
operator|.
name|substring
argument_list|(
literal|0
argument_list|,
literal|3
argument_list|)
decl_stmt|;
comment|//get the signature namespace prefix
name|String
name|signatureNamespacePrefix
init|=
name|args
index|[
literal|4
index|]
operator|.
name|getStringValue
argument_list|()
decl_stmt|;
comment|//get the signature type
name|String
name|signatureType
init|=
name|args
index|[
literal|5
index|]
operator|.
name|getStringValue
argument_list|()
decl_stmt|;
comment|/*if ( ( args.length == 7 || args.length == 8 )&& args[6].getItemType() == Type.STRING ) {                         }*/
comment|//get the XPath expression and/or the certificate's details
name|String
name|xpathExprString
init|=
literal|null
decl_stmt|;
name|String
index|[]
name|certificateDetails
init|=
operator|new
name|String
index|[
literal|5
index|]
decl_stmt|;
name|certificateDetails
index|[
literal|0
index|]
operator|=
literal|""
expr_stmt|;
name|InputStream
name|keyStoreInputStream
init|=
literal|null
decl_stmt|;
comment|//function with 7 arguments
if|if
condition|(
name|args
operator|.
name|length
operator|==
literal|7
condition|)
block|{
if|if
condition|(
name|args
index|[
literal|6
index|]
operator|.
name|itemAt
argument_list|(
literal|0
argument_list|)
operator|.
name|getType
argument_list|()
operator|==
literal|22
condition|)
block|{
name|xpathExprString
operator|=
name|args
index|[
literal|6
index|]
operator|.
name|getStringValue
argument_list|()
expr_stmt|;
block|}
if|else if
condition|(
name|args
index|[
literal|6
index|]
operator|.
name|itemAt
argument_list|(
literal|0
argument_list|)
operator|.
name|getType
argument_list|()
operator|==
literal|1
condition|)
block|{
name|Node
name|certificateDetailsNode
init|=
operator|(
operator|(
name|NodeValue
operator|)
name|args
index|[
literal|6
index|]
operator|.
name|itemAt
argument_list|(
literal|0
argument_list|)
operator|)
operator|.
name|getNode
argument_list|()
decl_stmt|;
comment|//get the certificate details
name|certificateDetails
operator|=
name|getDigitalCertificateDetails
argument_list|(
name|certificateDetails
argument_list|,
name|certificateDetailsNode
argument_list|)
expr_stmt|;
comment|//get the keystore InputStream
name|keyStoreInputStream
operator|=
name|getKeyStoreInputStream
argument_list|(
name|keyStoreInputStream
argument_list|,
name|certificateDetails
index|[
literal|4
index|]
argument_list|)
expr_stmt|;
block|}
block|}
comment|//function with 8 arguments
if|if
condition|(
name|args
operator|.
name|length
operator|==
literal|8
condition|)
block|{
name|xpathExprString
operator|=
name|args
index|[
literal|6
index|]
operator|.
name|getStringValue
argument_list|()
expr_stmt|;
name|Node
name|certificateDetailsNode
init|=
operator|(
operator|(
name|NodeValue
operator|)
name|args
index|[
literal|7
index|]
operator|.
name|itemAt
argument_list|(
literal|0
argument_list|)
operator|)
operator|.
name|getNode
argument_list|()
decl_stmt|;
comment|//get the certificate details
name|certificateDetails
operator|=
name|getDigitalCertificateDetails
argument_list|(
name|certificateDetails
argument_list|,
name|certificateDetailsNode
argument_list|)
expr_stmt|;
comment|//get the keystore InputStream
name|keyStoreInputStream
operator|=
name|getKeyStoreInputStream
argument_list|(
name|keyStoreInputStream
argument_list|,
name|certificateDetails
index|[
literal|4
index|]
argument_list|)
expr_stmt|;
block|}
comment|//initialize the document builder
name|DocumentBuilderFactory
name|dbf
init|=
name|DocumentBuilderFactory
operator|.
name|newInstance
argument_list|()
decl_stmt|;
name|dbf
operator|.
name|setNamespaceAware
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|DocumentBuilder
name|db
init|=
literal|null
decl_stmt|;
try|try
block|{
name|db
operator|=
name|dbf
operator|.
name|newDocumentBuilder
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|ParserConfigurationException
name|ex
parameter_list|)
block|{
block|}
comment|//process the input string to DOM document
name|org
operator|.
name|w3c
operator|.
name|dom
operator|.
name|Document
name|inputDOMDoc
init|=
literal|null
decl_stmt|;
try|try
block|{
name|inputDOMDoc
operator|=
name|db
operator|.
name|parse
argument_list|(
name|inputNodeStream
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|SAXException
name|ex
parameter_list|)
block|{
name|ex
operator|.
name|getMessage
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|ex
parameter_list|)
block|{
name|ex
operator|.
name|getMessage
argument_list|()
expr_stmt|;
block|}
comment|//sign the document
name|String
name|outputString
init|=
literal|null
decl_stmt|;
try|try
block|{
name|outputString
operator|=
name|GenerateSignature
operator|.
name|GenerateDigitalSignature
argument_list|(
name|inputDOMDoc
argument_list|,
name|canonicalizationAlgorithmURI
argument_list|,
name|digestAlgorithmURI
argument_list|,
name|signatureAlgorithmURI
argument_list|,
name|keyPairAlgorithm
argument_list|,
name|signatureNamespacePrefix
argument_list|,
name|signatureType
argument_list|,
name|xpathExprString
argument_list|,
name|certificateDetails
argument_list|,
name|keyStoreInputStream
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|ex
parameter_list|)
block|{
throw|throw
operator|new
name|XPathException
argument_list|(
name|ex
operator|.
name|getMessage
argument_list|()
argument_list|)
throw|;
block|}
comment|//process the output (signed) document from string to node()
name|org
operator|.
name|w3c
operator|.
name|dom
operator|.
name|Document
name|outputDOMDoc
init|=
literal|null
decl_stmt|;
name|SAXAdapter
name|adapter
init|=
literal|null
decl_stmt|;
try|try
block|{
name|SAXParserFactory
name|factory
init|=
name|SAXParserFactory
operator|.
name|newInstance
argument_list|()
decl_stmt|;
name|factory
operator|.
name|setNamespaceAware
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|SAXParser
name|parser
init|=
name|factory
operator|.
name|newSAXParser
argument_list|()
decl_stmt|;
name|XMLReader
name|xr
init|=
name|parser
operator|.
name|getXMLReader
argument_list|()
decl_stmt|;
name|adapter
operator|=
operator|new
name|SAXAdapter
argument_list|(
name|context
argument_list|)
expr_stmt|;
name|xr
operator|.
name|setContentHandler
argument_list|(
name|adapter
argument_list|)
expr_stmt|;
name|xr
operator|.
name|setProperty
argument_list|(
name|Namespaces
operator|.
name|SAX_LEXICAL_HANDLER
argument_list|,
name|adapter
argument_list|)
expr_stmt|;
name|xr
operator|.
name|parse
argument_list|(
operator|new
name|InputSource
argument_list|(
operator|new
name|StringReader
argument_list|(
name|outputString
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|ParserConfigurationException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|XPathException
argument_list|(
name|this
argument_list|,
literal|"Error while constructing XML parser: "
operator|+
name|e
operator|.
name|getMessage
argument_list|()
argument_list|,
name|e
argument_list|)
throw|;
block|}
catch|catch
parameter_list|(
name|SAXException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|XPathException
argument_list|(
name|this
argument_list|,
literal|"Error while parsing XML: "
operator|+
name|e
operator|.
name|getMessage
argument_list|()
argument_list|,
name|e
argument_list|)
throw|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|XPathException
argument_list|(
name|this
argument_list|,
literal|"Error while parsing XML: "
operator|+
name|e
operator|.
name|getMessage
argument_list|()
argument_list|,
name|e
argument_list|)
throw|;
block|}
return|return
operator|(
name|Sequence
operator|)
operator|(
name|DocumentImpl
operator|)
name|adapter
operator|.
name|getDocument
argument_list|()
return|;
block|}
specifier|private
name|String
index|[]
name|getDigitalCertificateDetails
parameter_list|(
name|String
index|[]
name|certificateDetails
parameter_list|,
name|Node
name|certificateDetailsNode
parameter_list|)
throws|throws
name|XPathException
block|{
if|if
condition|(
operator|!
name|certificateDetailsNode
operator|.
name|getNodeName
argument_list|()
operator|.
name|equals
argument_list|(
name|certificateRootElementName
argument_list|)
condition|)
block|{
throw|throw
operator|new
name|XPathException
argument_list|(
name|this
argument_list|,
literal|"The root element of argument $digital-certificate must have the name 'digital-certificate'."
argument_list|)
throw|;
block|}
name|NodeList
name|certificateDetailsNodeList
init|=
name|certificateDetailsNode
operator|.
name|getChildNodes
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|,
name|il
init|=
name|certificateDetailsNodeList
operator|.
name|getLength
argument_list|()
init|;
name|i
operator|<
name|il
condition|;
name|i
operator|++
control|)
block|{
name|Node
name|child
init|=
name|certificateDetailsNodeList
operator|.
name|item
argument_list|(
name|i
argument_list|)
decl_stmt|;
if|if
condition|(
name|child
operator|.
name|getNodeName
argument_list|()
operator|.
name|equals
argument_list|(
name|certificateChildElementNames
index|[
name|i
index|]
argument_list|)
condition|)
block|{
name|certificateDetails
index|[
name|i
index|]
operator|=
name|child
operator|.
name|getFirstChild
argument_list|()
operator|.
name|getNodeValue
argument_list|()
expr_stmt|;
block|}
else|else
block|{
throw|throw
operator|new
name|XPathException
argument_list|(
name|this
argument_list|,
literal|"The child element of argument $digital-certificate having position "
operator|+
operator|(
name|i
operator|+
literal|1
operator|)
operator|+
literal|" must have the name '"
operator|+
name|certificateChildElementNames
index|[
name|i
index|]
operator|+
literal|"'."
argument_list|)
throw|;
block|}
block|}
return|return
name|certificateDetails
return|;
block|}
specifier|private
name|InputStream
name|getKeyStoreInputStream
parameter_list|(
name|InputStream
name|keyStoreInputStream
parameter_list|,
name|String
name|keystoreURI
parameter_list|)
throws|throws
name|XPathException
block|{
comment|//get the keystore as InputStream
name|org
operator|.
name|exist
operator|.
name|dom
operator|.
name|DocumentImpl
name|keyStoreDoc
init|=
literal|null
decl_stmt|;
try|try
block|{
try|try
block|{
name|keyStoreDoc
operator|=
name|context
operator|.
name|getBroker
argument_list|()
operator|.
name|getXMLResource
argument_list|(
name|XmldbURI
operator|.
name|xmldbUriFor
argument_list|(
name|keystoreURI
argument_list|)
argument_list|,
name|Lock
operator|.
name|READ_LOCK
argument_list|)
expr_stmt|;
if|if
condition|(
name|keyStoreDoc
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|XPathException
argument_list|(
name|this
argument_list|,
literal|"The keystore located at URL '"
operator|+
name|keystoreURI
operator|+
literal|"' is null'."
argument_list|)
throw|;
block|}
name|BinaryDocument
name|keyStoreBinaryDoc
init|=
operator|(
name|BinaryDocument
operator|)
name|keyStoreDoc
decl_stmt|;
try|try
block|{
name|keyStoreInputStream
operator|=
name|context
operator|.
name|getBroker
argument_list|()
operator|.
name|getBinaryResource
argument_list|(
name|keyStoreBinaryDoc
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|ex
parameter_list|)
block|{
name|logger
operator|.
name|error
argument_list|(
name|keystoreURI
operator|+
literal|": I/O error while reading resource"
argument_list|,
name|ex
argument_list|)
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
name|PermissionDeniedException
name|ex
parameter_list|)
block|{
name|logger
operator|.
name|info
argument_list|(
name|keystoreURI
operator|+
literal|": permission denied to read resource"
argument_list|,
name|ex
argument_list|)
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
name|URISyntaxException
name|ex
parameter_list|)
block|{
name|logger
operator|.
name|error
argument_list|(
literal|"Invalid resource URI"
argument_list|,
name|ex
argument_list|)
expr_stmt|;
block|}
return|return
name|keyStoreInputStream
return|;
block|}
block|}
end_class

end_unit

