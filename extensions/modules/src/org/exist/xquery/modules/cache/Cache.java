begin_unit|revision:1.0.0;language:Java;cregit-version:0.0.1
begin_package
package|package
name|org
operator|.
name|exist
operator|.
name|xquery
operator|.
name|modules
operator|.
name|cache
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|xquery
operator|.
name|value
operator|.
name|*
import|;
end_import

begin_comment
comment|/**  * Static Global cache model  *   * @author Evgeny Gazdovsky<gazdovsky@gmail.com>  * @version 1.0  */
end_comment

begin_class
specifier|public
class|class
name|Cache
extends|extends
name|HashMap
argument_list|<
name|String
argument_list|,
name|Sequence
argument_list|>
block|{
specifier|private
specifier|static
specifier|final
name|long
name|serialVersionUID
init|=
literal|2560835928124595024L
decl_stmt|;
specifier|private
specifier|static
name|HashMap
argument_list|<
name|String
argument_list|,
name|Cache
argument_list|>
name|globalCache
init|=
operator|new
name|HashMap
argument_list|<>
argument_list|()
decl_stmt|;
specifier|public
name|Cache
parameter_list|(
name|String
name|name
parameter_list|)
block|{
name|super
argument_list|()
expr_stmt|;
name|globalCache
operator|.
name|put
argument_list|(
name|name
argument_list|,
name|this
argument_list|)
expr_stmt|;
block|}
specifier|public
specifier|static
name|Cache
name|getInstance
parameter_list|(
name|String
name|name
parameter_list|)
block|{
name|Cache
name|cache
init|=
name|globalCache
operator|.
name|get
argument_list|(
name|name
argument_list|)
decl_stmt|;
if|if
condition|(
name|cache
operator|==
literal|null
condition|)
block|{
name|cache
operator|=
operator|new
name|Cache
argument_list|(
name|name
argument_list|)
expr_stmt|;
block|}
return|return
name|cache
return|;
block|}
specifier|public
name|Sequence
name|put
parameter_list|(
name|String
name|key
parameter_list|,
name|Sequence
name|value
parameter_list|)
block|{
name|Sequence
name|v
init|=
name|super
operator|.
name|put
argument_list|(
name|key
argument_list|,
name|value
argument_list|)
decl_stmt|;
return|return
operator|(
name|v
operator|==
literal|null
operator|)
condition|?
name|Sequence
operator|.
name|EMPTY_SEQUENCE
else|:
name|v
return|;
block|}
specifier|public
specifier|static
name|Sequence
name|put
parameter_list|(
name|String
name|name
parameter_list|,
name|String
name|key
parameter_list|,
name|Sequence
name|value
parameter_list|)
block|{
return|return
name|getInstance
argument_list|(
name|name
argument_list|)
operator|.
name|put
argument_list|(
name|key
argument_list|,
name|value
argument_list|)
return|;
block|}
specifier|public
name|Sequence
name|get
parameter_list|(
name|String
name|key
parameter_list|)
block|{
name|Sequence
name|v
init|=
name|super
operator|.
name|get
argument_list|(
name|key
argument_list|)
decl_stmt|;
return|return
operator|(
name|v
operator|==
literal|null
operator|)
condition|?
name|Sequence
operator|.
name|EMPTY_SEQUENCE
else|:
name|v
return|;
block|}
specifier|public
specifier|static
name|Sequence
name|get
parameter_list|(
name|String
name|name
parameter_list|,
name|String
name|key
parameter_list|)
block|{
return|return
name|getInstance
argument_list|(
name|name
argument_list|)
operator|.
name|get
argument_list|(
name|key
argument_list|)
return|;
block|}
specifier|public
specifier|static
name|Sequence
name|keys
parameter_list|(
name|String
name|name
parameter_list|)
block|{
name|ValueSequence
name|keys
init|=
operator|new
name|ValueSequence
argument_list|()
decl_stmt|;
for|for
control|(
name|String
name|key
range|:
name|getInstance
argument_list|(
name|name
argument_list|)
operator|.
name|keySet
argument_list|()
control|)
block|{
name|keys
operator|.
name|add
argument_list|(
operator|new
name|StringValue
argument_list|(
name|key
argument_list|)
argument_list|)
expr_stmt|;
block|}
return|return
name|keys
return|;
block|}
specifier|public
name|Sequence
name|remove
parameter_list|(
name|String
name|key
parameter_list|)
block|{
name|Sequence
name|v
init|=
name|super
operator|.
name|remove
argument_list|(
name|key
argument_list|)
decl_stmt|;
return|return
operator|(
name|v
operator|==
literal|null
operator|)
condition|?
name|Sequence
operator|.
name|EMPTY_SEQUENCE
else|:
name|v
return|;
block|}
specifier|public
specifier|static
name|Sequence
name|remove
parameter_list|(
name|String
name|name
parameter_list|,
name|String
name|key
parameter_list|)
block|{
return|return
name|getInstance
argument_list|(
name|name
argument_list|)
operator|.
name|remove
argument_list|(
name|key
argument_list|)
return|;
block|}
specifier|public
specifier|static
name|void
name|clear
parameter_list|(
name|String
name|name
parameter_list|)
block|{
name|getInstance
argument_list|(
name|name
argument_list|)
operator|.
name|clear
argument_list|()
expr_stmt|;
block|}
specifier|public
specifier|static
name|void
name|clearGlobal
parameter_list|()
block|{
name|globalCache
operator|.
name|clear
argument_list|()
expr_stmt|;
block|}
block|}
end_class

end_unit

