begin_unit|revision:1.0.0;language:Java;cregit-version:0.0.1
begin_package
package|package
name|org
operator|.
name|exist
operator|.
name|xquery
operator|.
name|modules
operator|.
name|cache
package|;
end_package

begin_import
import|import
name|com
operator|.
name|github
operator|.
name|benmanes
operator|.
name|caffeine
operator|.
name|cache
operator|.
name|Caffeine
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|xquery
operator|.
name|XPathException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|xquery
operator|.
name|value
operator|.
name|Sequence
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|xquery
operator|.
name|value
operator|.
name|ValueSequence
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Arrays
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|TimeUnit
import|;
end_import

begin_comment
comment|/**  * The cache itself.  *  * Just a small wrapper around {@link com.github.benmanes.caffeine.cache.Cache} to manage  * translating to/from sequences  */
end_comment

begin_class
class|class
name|Cache
block|{
specifier|private
specifier|final
name|CacheConfig
name|config
decl_stmt|;
specifier|private
specifier|final
name|com
operator|.
name|github
operator|.
name|benmanes
operator|.
name|caffeine
operator|.
name|cache
operator|.
name|Cache
argument_list|<
name|String
argument_list|,
name|Sequence
argument_list|>
name|store
decl_stmt|;
specifier|public
name|Cache
parameter_list|(
specifier|final
name|CacheConfig
name|config
parameter_list|)
block|{
name|this
operator|.
name|config
operator|=
name|config
expr_stmt|;
specifier|final
name|Caffeine
argument_list|<
name|Object
argument_list|,
name|Object
argument_list|>
name|cacheBuilder
init|=
name|Caffeine
operator|.
name|newBuilder
argument_list|()
decl_stmt|;
name|config
operator|.
name|getMaximumSize
argument_list|()
operator|.
name|map
argument_list|(
name|cacheBuilder
operator|::
name|maximumSize
argument_list|)
expr_stmt|;
name|config
operator|.
name|getExpireAfterAccess
argument_list|()
operator|.
name|map
argument_list|(
name|ms
lambda|->
name|cacheBuilder
operator|.
name|expireAfterAccess
argument_list|(
name|ms
argument_list|,
name|TimeUnit
operator|.
name|MILLISECONDS
argument_list|)
argument_list|)
expr_stmt|;
name|this
operator|.
name|store
operator|=
name|cacheBuilder
operator|.
name|build
argument_list|()
expr_stmt|;
block|}
specifier|public
name|CacheConfig
name|getConfig
parameter_list|()
block|{
return|return
name|config
return|;
block|}
specifier|public
name|Sequence
name|put
parameter_list|(
specifier|final
name|String
name|key
parameter_list|,
specifier|final
name|Sequence
name|value
parameter_list|)
block|{
return|return
name|store
operator|.
name|asMap
argument_list|()
operator|.
name|put
argument_list|(
name|key
argument_list|,
name|value
argument_list|)
return|;
block|}
specifier|public
name|Sequence
name|list
parameter_list|(
specifier|final
name|String
index|[]
name|keys
parameter_list|)
throws|throws
name|XPathException
block|{
specifier|final
name|ValueSequence
name|values
init|=
operator|new
name|ValueSequence
argument_list|()
decl_stmt|;
if|if
condition|(
name|keys
operator|.
name|length
operator|==
literal|0
condition|)
block|{
comment|// all keys
for|for
control|(
specifier|final
name|Sequence
name|value
range|:
name|store
operator|.
name|asMap
argument_list|()
operator|.
name|values
argument_list|()
control|)
block|{
name|values
operator|.
name|addAll
argument_list|(
name|value
argument_list|)
expr_stmt|;
block|}
block|}
else|else
block|{
comment|// just the specified keys
specifier|final
name|Map
argument_list|<
name|String
argument_list|,
name|Sequence
argument_list|>
name|entries
init|=
name|store
operator|.
name|getAllPresent
argument_list|(
name|Arrays
operator|.
name|asList
argument_list|(
name|keys
argument_list|)
argument_list|)
decl_stmt|;
for|for
control|(
specifier|final
name|Sequence
name|value
range|:
name|entries
operator|.
name|values
argument_list|()
control|)
block|{
name|values
operator|.
name|addAll
argument_list|(
name|value
argument_list|)
expr_stmt|;
block|}
block|}
return|return
name|values
return|;
block|}
specifier|public
name|Sequence
name|get
parameter_list|(
specifier|final
name|String
name|key
parameter_list|)
block|{
specifier|final
name|Sequence
name|value
init|=
name|store
operator|.
name|getIfPresent
argument_list|(
name|key
argument_list|)
decl_stmt|;
if|if
condition|(
name|value
operator|==
literal|null
condition|)
block|{
return|return
name|Sequence
operator|.
name|EMPTY_SEQUENCE
return|;
block|}
else|else
block|{
return|return
name|value
return|;
block|}
block|}
specifier|public
name|Sequence
name|remove
parameter_list|(
specifier|final
name|String
name|key
parameter_list|)
block|{
specifier|final
name|Sequence
name|prevValue
init|=
name|store
operator|.
name|asMap
argument_list|()
operator|.
name|remove
argument_list|(
name|key
argument_list|)
decl_stmt|;
if|if
condition|(
name|prevValue
operator|==
literal|null
condition|)
block|{
return|return
name|Sequence
operator|.
name|EMPTY_SEQUENCE
return|;
block|}
else|else
block|{
return|return
name|prevValue
return|;
block|}
block|}
specifier|public
name|void
name|clear
parameter_list|()
block|{
name|store
operator|.
name|invalidateAll
argument_list|()
expr_stmt|;
block|}
block|}
end_class

end_unit

