begin_unit|revision:1.0.0;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * eXist Open Source Native XML Database  * Copyright (C) 2001-2017 The eXist Project  * http://exist-db.org  *  * This program is free software; you can redistribute it and/or  * modify it under the terms of the GNU Lesser General Public License  * as published by the Free Software Foundation; either version 2  * of the License, or (at your option) any later version.  *  * This program is distributed in the hope that it will be useful,  * but WITHOUT ANY WARRANTY; without even the implied warranty of  * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the  * GNU Lesser General Public License for more details.  *  * You should have received a copy of the GNU Lesser General Public  * License along with this library; if not, write to the Free Software  * Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA  02110-1301  USA  */
end_comment

begin_package
package|package
name|org
operator|.
name|exist
operator|.
name|xquery
operator|.
name|modules
operator|.
name|cache
package|;
end_package

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|storage
operator|.
name|serializers
operator|.
name|Serializer
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|xquery
operator|.
name|BasicFunction
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|xquery
operator|.
name|FunctionSignature
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|xquery
operator|.
name|XPathException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|xquery
operator|.
name|XQueryContext
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|xquery
operator|.
name|functions
operator|.
name|map
operator|.
name|AbstractMapType
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|xquery
operator|.
name|functions
operator|.
name|map
operator|.
name|MapType
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|xquery
operator|.
name|value
operator|.
name|*
import|;
end_import

begin_import
import|import
name|org
operator|.
name|xml
operator|.
name|sax
operator|.
name|SAXException
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|xml
operator|.
name|transform
operator|.
name|OutputKeys
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collection
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Optional
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Properties
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|exist
operator|.
name|xquery
operator|.
name|FunctionDSL
operator|.
name|*
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|exist
operator|.
name|xquery
operator|.
name|modules
operator|.
name|cache
operator|.
name|CacheModule
operator|.
name|*
import|;
end_import

begin_comment
comment|/**  * Function implementations for the Cache Module  *  * @author<a href="mailto:adam@evolvedbinary.com">Adam Retter</a>  */
end_comment

begin_class
specifier|public
class|class
name|CacheFunctions
extends|extends
name|BasicFunction
block|{
specifier|private
specifier|final
specifier|static
name|Properties
name|OUTPUT_PROPERTIES
init|=
operator|new
name|Properties
argument_list|()
decl_stmt|;
static|static
block|{
name|OUTPUT_PROPERTIES
operator|.
name|setProperty
argument_list|(
name|OutputKeys
operator|.
name|INDENT
argument_list|,
literal|"no"
argument_list|)
expr_stmt|;
name|OUTPUT_PROPERTIES
operator|.
name|setProperty
argument_list|(
name|OutputKeys
operator|.
name|OMIT_XML_DECLARATION
argument_list|,
literal|"yes"
argument_list|)
expr_stmt|;
block|}
specifier|private
specifier|static
specifier|final
name|FunctionParameterSequenceType
name|FS_PARAM_CACHE_NAME
init|=
name|param
argument_list|(
literal|"cache-name"
argument_list|,
name|Type
operator|.
name|STRING
argument_list|,
literal|"The name of the cache"
argument_list|)
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|FunctionParameterSequenceType
name|FS_PARAM_KEY
init|=
name|manyParam
argument_list|(
literal|"key"
argument_list|,
name|Type
operator|.
name|ANY_TYPE
argument_list|,
literal|"The key"
argument_list|)
decl_stmt|;
annotation|@
name|Deprecated
specifier|private
specifier|static
specifier|final
name|String
name|FS_CACHE_NAME
init|=
literal|"cache"
decl_stmt|;
annotation|@
name|Deprecated
specifier|static
specifier|final
name|FunctionSignature
name|FS_CACHE
init|=
name|deprecated
argument_list|(
literal|"Deprecated as Caches are now created on demand, or by cache:create($name, $config)"
argument_list|,
name|functionSignature
argument_list|(
name|FS_CACHE_NAME
argument_list|,
literal|"Get/create a cache using the specified name."
argument_list|,
name|returns
argument_list|(
name|Type
operator|.
name|STRING
argument_list|,
literal|"The name of the cache."
argument_list|)
argument_list|,
name|FS_PARAM_CACHE_NAME
argument_list|)
argument_list|)
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|String
name|FS_CREATE_NAME
init|=
literal|"create"
decl_stmt|;
specifier|static
specifier|final
name|FunctionSignature
name|FS_CREATE_CACHE
init|=
name|functionSignature
argument_list|(
name|FS_CREATE_NAME
argument_list|,
literal|"Explicitly create a cache with a specific configuration"
argument_list|,
name|returns
argument_list|(
name|Type
operator|.
name|BOOLEAN
argument_list|,
literal|"true if the cache was created, false if the cache already exists"
argument_list|)
argument_list|,
name|FS_PARAM_CACHE_NAME
argument_list|,
name|param
argument_list|(
literal|"config"
argument_list|,
name|Type
operator|.
name|MAP
argument_list|,
literal|"A map with configuration for the cache. At present cache LRU and permission groups may be specified, for operations on the cache. `maximumSize` is optional and specifies the maximum number of entries. `expireAfterAccess` is optional and specified the expiry period for infrequently accessed entries (in milliseconds). If a permission group is not specified for an operation, then permissions are not checked for that operation. Should have the format: map { \"maximumSize\": 1000, \"expireAfterAccess\": 120000, \"permissions\": map { \"put-group\": \"group1\", \"get-group\": \"group2\", \"remove-group\": \"group3\", \"clear-group\": \"group4\"} }"
argument_list|)
argument_list|)
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|String
name|FS_NAMES_NAME
init|=
literal|"names"
decl_stmt|;
specifier|static
specifier|final
name|FunctionSignature
name|FS_NAMES
init|=
name|functionSignature
argument_list|(
name|FS_NAMES_NAME
argument_list|,
literal|"Get the names of all current caches"
argument_list|,
name|returnsOptMany
argument_list|(
name|Type
operator|.
name|STRING
argument_list|,
literal|"The names of all caches currently in use."
argument_list|)
argument_list|)
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|String
name|FS_PUT_NAME
init|=
literal|"put"
decl_stmt|;
specifier|static
specifier|final
name|FunctionSignature
name|FS_PUT
init|=
name|functionSignature
argument_list|(
name|FS_PUT_NAME
argument_list|,
literal|"Put data with a key into the identified cache. Returns the previous value associated with the key"
argument_list|,
name|returnsOptMany
argument_list|(
name|Type
operator|.
name|ITEM
argument_list|,
literal|"The previous value associated with the key"
argument_list|)
argument_list|,
name|FS_PARAM_CACHE_NAME
argument_list|,
name|FS_PARAM_KEY
argument_list|,
name|optManyParam
argument_list|(
literal|"value"
argument_list|,
name|Type
operator|.
name|ITEM
argument_list|,
literal|"The value"
argument_list|)
argument_list|)
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|String
name|FS_LIST_NAME
init|=
literal|"list"
decl_stmt|;
specifier|static
specifier|final
name|FunctionSignature
name|FS_LIST
init|=
name|functionSignature
argument_list|(
name|FS_LIST_NAME
argument_list|,
literal|"List all values (for the associated keys) stored in a cache."
argument_list|,
name|returnsOptMany
argument_list|(
name|Type
operator|.
name|ITEM
argument_list|,
literal|"The values associated with the keys"
argument_list|)
argument_list|,
name|FS_PARAM_CACHE_NAME
argument_list|,
name|optManyParam
argument_list|(
literal|"keys"
argument_list|,
name|Type
operator|.
name|ANY_TYPE
argument_list|,
literal|"The keys, if none are specified, all values are returned"
argument_list|)
argument_list|)
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|String
name|FS_KEYS_NAME
init|=
literal|"keys"
decl_stmt|;
specifier|static
specifier|final
name|FunctionSignature
name|FS_KEYS
init|=
name|functionSignature
argument_list|(
name|FS_KEYS_NAME
argument_list|,
literal|"List all keys stored in a cache. Note this operation is expensive."
argument_list|,
name|returnsOptMany
argument_list|(
name|Type
operator|.
name|STRING
argument_list|,
literal|"The keys in the cache. Note these will be returned in serialized string form, as that is used internally."
argument_list|)
argument_list|,
name|FS_PARAM_CACHE_NAME
argument_list|)
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|String
name|FS_GET_NAME
init|=
literal|"get"
decl_stmt|;
specifier|static
specifier|final
name|FunctionSignature
name|FS_GET
init|=
name|functionSignature
argument_list|(
name|FS_GET_NAME
argument_list|,
literal|"Get data from identified global cache by key"
argument_list|,
name|returnsOptMany
argument_list|(
name|Type
operator|.
name|ITEM
argument_list|,
literal|"The value associated with the key"
argument_list|)
argument_list|,
name|FS_PARAM_CACHE_NAME
argument_list|,
name|FS_PARAM_KEY
argument_list|)
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|String
name|FS_REMOVE_NAME
init|=
literal|"remove"
decl_stmt|;
specifier|static
specifier|final
name|FunctionSignature
name|FS_REMOVE
init|=
name|functionSignature
argument_list|(
name|FS_REMOVE_NAME
argument_list|,
literal|"Remove data from the identified cache by the key. Returns the value that was previously associated with key"
argument_list|,
name|returnsOptMany
argument_list|(
name|Type
operator|.
name|ITEM
argument_list|,
literal|"The value that was previously associated with the key"
argument_list|)
argument_list|,
name|FS_PARAM_CACHE_NAME
argument_list|,
name|FS_PARAM_KEY
argument_list|)
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|String
name|FS_CLEAR_NAME
init|=
literal|"clear"
decl_stmt|;
specifier|static
specifier|final
name|FunctionSignature
index|[]
name|FS_CLEAR
init|=
name|functionSignatures
argument_list|(
name|FS_CLEAR_NAME
argument_list|,
literal|"Clears all key/values from either all caches or the named cache"
argument_list|,
name|returnsNothing
argument_list|()
argument_list|,
name|arities
argument_list|(
name|arity
argument_list|()
argument_list|,
name|arity
argument_list|(
name|FS_PARAM_CACHE_NAME
argument_list|)
argument_list|)
argument_list|)
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|String
name|FS_CLEANUP_NAME
init|=
literal|"cleanup"
decl_stmt|;
specifier|static
specifier|final
name|FunctionSignature
name|FS_CLEANUP
init|=
name|functionSignature
argument_list|(
name|FS_CLEANUP_NAME
argument_list|,
literal|"Eviction policy work of the cache is performed asynchronously. Performs any pending maintenance operations needed by the cache, on the current thread. Typically not needed by users, and only used for testing scenarios. Requires 'clear' permissions."
argument_list|,
name|returnsNothing
argument_list|()
argument_list|,
name|FS_PARAM_CACHE_NAME
argument_list|)
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|String
name|FS_DESTROY_NAME
init|=
literal|"destroy"
decl_stmt|;
specifier|static
specifier|final
name|FunctionSignature
name|FS_DESTROY
init|=
name|functionSignature
argument_list|(
name|FS_DESTROY_NAME
argument_list|,
literal|"Destroys a cache entirely"
argument_list|,
name|returnsNothing
argument_list|()
argument_list|,
name|FS_PARAM_CACHE_NAME
argument_list|)
decl_stmt|;
specifier|public
name|CacheFunctions
parameter_list|(
specifier|final
name|XQueryContext
name|context
parameter_list|,
specifier|final
name|FunctionSignature
name|signature
parameter_list|)
block|{
name|super
argument_list|(
name|context
argument_list|,
name|signature
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|Sequence
name|eval
parameter_list|(
specifier|final
name|Sequence
index|[]
name|args
parameter_list|,
specifier|final
name|Sequence
name|contextSequence
parameter_list|)
throws|throws
name|XPathException
block|{
specifier|final
name|String
name|cacheName
decl_stmt|;
if|if
condition|(
name|args
operator|.
name|length
operator|>
literal|0
condition|)
block|{
name|cacheName
operator|=
name|args
index|[
literal|0
index|]
operator|.
name|itemAt
argument_list|(
literal|0
argument_list|)
operator|.
name|getStringValue
argument_list|()
expr_stmt|;
block|}
else|else
block|{
name|cacheName
operator|=
literal|null
expr_stmt|;
block|}
switch|switch
condition|(
name|getName
argument_list|()
operator|.
name|getLocalPart
argument_list|()
condition|)
block|{
case|case
name|FS_CACHE_NAME
case|:
if|if
condition|(
name|CacheModule
operator|.
name|caches
operator|.
name|containsKey
argument_list|(
name|cacheName
argument_list|)
condition|)
block|{
return|return
name|args
index|[
literal|0
index|]
return|;
block|}
name|createCache
argument_list|(
name|cacheName
argument_list|,
operator|new
name|CacheConfig
argument_list|()
argument_list|)
expr_stmt|;
return|return
name|args
index|[
literal|0
index|]
return|;
case|case
name|FS_CREATE_NAME
case|:
if|if
condition|(
name|CacheModule
operator|.
name|caches
operator|.
name|containsKey
argument_list|(
name|cacheName
argument_list|)
condition|)
block|{
return|return
name|BooleanValue
operator|.
name|FALSE
return|;
block|}
return|return
name|BooleanValue
operator|.
name|valueOf
argument_list|(
name|createCache
argument_list|(
name|cacheName
argument_list|,
name|extractCacheConfig
argument_list|(
operator|(
name|MapType
operator|)
name|args
index|[
literal|1
index|]
argument_list|)
argument_list|)
argument_list|)
return|;
case|case
name|FS_NAMES_NAME
case|:
return|return
name|cacheNames
argument_list|()
return|;
case|case
name|FS_PUT_NAME
case|:
comment|// lazy create cache if it doesn't exist
if|if
condition|(
operator|!
name|CacheModule
operator|.
name|caches
operator|.
name|containsKey
argument_list|(
name|cacheName
argument_list|)
condition|)
block|{
name|createCache
argument_list|(
name|cacheName
argument_list|,
operator|new
name|CacheConfig
argument_list|()
argument_list|)
expr_stmt|;
block|}
specifier|final
name|String
name|putKey
init|=
name|toMapKey
argument_list|(
name|args
index|[
literal|1
index|]
argument_list|)
decl_stmt|;
specifier|final
name|Sequence
name|value
init|=
name|args
index|[
literal|2
index|]
decl_stmt|;
return|return
name|put
argument_list|(
name|cacheName
argument_list|,
name|putKey
argument_list|,
name|value
argument_list|)
return|;
case|case
name|FS_LIST_NAME
case|:
comment|// lazy create cache if it doesn't exist
if|if
condition|(
operator|!
name|CacheModule
operator|.
name|caches
operator|.
name|containsKey
argument_list|(
name|cacheName
argument_list|)
condition|)
block|{
name|createCache
argument_list|(
name|cacheName
argument_list|,
operator|new
name|CacheConfig
argument_list|()
argument_list|)
expr_stmt|;
block|}
specifier|final
name|String
index|[]
name|keys
init|=
name|toMapKeys
argument_list|(
name|args
index|[
literal|1
index|]
argument_list|)
decl_stmt|;
return|return
name|list
argument_list|(
name|cacheName
argument_list|,
name|keys
argument_list|)
return|;
case|case
name|FS_KEYS_NAME
case|:
comment|// lazy create cache if it doesn't exist
if|if
condition|(
operator|!
name|CacheModule
operator|.
name|caches
operator|.
name|containsKey
argument_list|(
name|cacheName
argument_list|)
condition|)
block|{
name|createCache
argument_list|(
name|cacheName
argument_list|,
operator|new
name|CacheConfig
argument_list|()
argument_list|)
expr_stmt|;
block|}
return|return
name|listKeys
argument_list|(
name|cacheName
argument_list|)
return|;
case|case
name|FS_GET_NAME
case|:
comment|// lazy create cache if it doesn't exist
if|if
condition|(
operator|!
name|CacheModule
operator|.
name|caches
operator|.
name|containsKey
argument_list|(
name|cacheName
argument_list|)
condition|)
block|{
name|createCache
argument_list|(
name|cacheName
argument_list|,
operator|new
name|CacheConfig
argument_list|()
argument_list|)
expr_stmt|;
block|}
specifier|final
name|String
name|getKey
init|=
name|toMapKey
argument_list|(
name|args
index|[
literal|1
index|]
argument_list|)
decl_stmt|;
return|return
name|get
argument_list|(
name|cacheName
argument_list|,
name|getKey
argument_list|)
return|;
case|case
name|FS_REMOVE_NAME
case|:
comment|// lazy create cache if it doesn't exist
if|if
condition|(
operator|!
name|CacheModule
operator|.
name|caches
operator|.
name|containsKey
argument_list|(
name|cacheName
argument_list|)
condition|)
block|{
name|createCache
argument_list|(
name|cacheName
argument_list|,
operator|new
name|CacheConfig
argument_list|()
argument_list|)
expr_stmt|;
block|}
specifier|final
name|String
name|removeKey
init|=
name|toMapKey
argument_list|(
name|args
index|[
literal|1
index|]
argument_list|)
decl_stmt|;
return|return
name|remove
argument_list|(
name|cacheName
argument_list|,
name|removeKey
argument_list|)
return|;
case|case
name|FS_CLEAR_NAME
case|:
if|if
condition|(
name|args
operator|.
name|length
operator|==
literal|0
condition|)
block|{
comment|// clear all caches
name|clearAll
argument_list|()
expr_stmt|;
block|}
else|else
block|{
comment|// clear specific cache
if|if
condition|(
name|CacheModule
operator|.
name|caches
operator|.
name|containsKey
argument_list|(
name|cacheName
argument_list|)
condition|)
block|{
comment|// only clear the cache if it exists
name|clear
argument_list|(
name|cacheName
argument_list|)
expr_stmt|;
block|}
block|}
return|return
name|Sequence
operator|.
name|EMPTY_SEQUENCE
return|;
case|case
name|FS_CLEANUP_NAME
case|:
if|if
condition|(
name|CacheModule
operator|.
name|caches
operator|.
name|containsKey
argument_list|(
name|cacheName
argument_list|)
condition|)
block|{
comment|// only cleanup the cache if it exists
name|cleanup
argument_list|(
name|cacheName
argument_list|)
expr_stmt|;
block|}
return|return
name|Sequence
operator|.
name|EMPTY_SEQUENCE
return|;
case|case
name|FS_DESTROY_NAME
case|:
comment|// destroy specific cache
specifier|final
name|Cache
name|oldCache
init|=
name|CacheModule
operator|.
name|caches
operator|.
name|remove
argument_list|(
name|cacheName
argument_list|)
decl_stmt|;
if|if
condition|(
name|oldCache
operator|!=
literal|null
condition|)
block|{
comment|// only clear the cache after we have removed it
name|oldCache
operator|.
name|clear
argument_list|()
expr_stmt|;
block|}
return|return
name|Sequence
operator|.
name|EMPTY_SEQUENCE
return|;
default|default:
throw|throw
operator|new
name|XPathException
argument_list|(
name|this
argument_list|,
literal|"No function: "
operator|+
name|getName
argument_list|()
operator|+
literal|"#"
operator|+
name|getSignature
argument_list|()
operator|.
name|getArgumentCount
argument_list|()
argument_list|)
throw|;
block|}
block|}
specifier|private
name|CacheConfig
name|extractCacheConfig
parameter_list|(
specifier|final
name|MapType
name|configMap
parameter_list|)
throws|throws
name|XPathException
block|{
specifier|final
name|Sequence
name|permsSeq
init|=
name|configMap
operator|.
name|get
argument_list|(
operator|new
name|StringValue
argument_list|(
literal|"permissions"
argument_list|)
argument_list|)
decl_stmt|;
specifier|final
name|Optional
argument_list|<
name|CacheConfig
operator|.
name|Permissions
argument_list|>
name|permissions
decl_stmt|;
if|if
condition|(
name|permsSeq
operator|!=
literal|null
operator|&&
name|permsSeq
operator|.
name|getItemCount
argument_list|()
operator|>
literal|0
condition|)
block|{
specifier|final
name|MapType
name|permsMap
init|=
operator|(
name|MapType
operator|)
name|permsSeq
operator|.
name|itemAt
argument_list|(
literal|0
argument_list|)
decl_stmt|;
specifier|final
name|Optional
argument_list|<
name|String
argument_list|>
name|putGroup
init|=
name|getStringValue
argument_list|(
literal|"put-group"
argument_list|,
name|permsMap
argument_list|)
decl_stmt|;
specifier|final
name|Optional
argument_list|<
name|String
argument_list|>
name|getGroup
init|=
name|getStringValue
argument_list|(
literal|"get-group"
argument_list|,
name|permsMap
argument_list|)
decl_stmt|;
specifier|final
name|Optional
argument_list|<
name|String
argument_list|>
name|removeGroup
init|=
name|getStringValue
argument_list|(
literal|"remove-group"
argument_list|,
name|permsMap
argument_list|)
decl_stmt|;
specifier|final
name|Optional
argument_list|<
name|String
argument_list|>
name|clearGroup
init|=
name|getStringValue
argument_list|(
literal|"clear-group"
argument_list|,
name|permsMap
argument_list|)
decl_stmt|;
name|permissions
operator|=
name|Optional
operator|.
name|of
argument_list|(
operator|new
name|CacheConfig
operator|.
name|Permissions
argument_list|(
name|putGroup
argument_list|,
name|getGroup
argument_list|,
name|removeGroup
argument_list|,
name|clearGroup
argument_list|)
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|permissions
operator|=
name|Optional
operator|.
name|empty
argument_list|()
expr_stmt|;
block|}
specifier|final
name|Sequence
name|maximumSizeSeq
init|=
name|configMap
operator|.
name|get
argument_list|(
operator|new
name|StringValue
argument_list|(
literal|"maximumSize"
argument_list|)
argument_list|)
decl_stmt|;
specifier|final
name|Optional
argument_list|<
name|Long
argument_list|>
name|maximumSize
decl_stmt|;
if|if
condition|(
name|maximumSizeSeq
operator|!=
literal|null
operator|&&
name|maximumSizeSeq
operator|.
name|getItemCount
argument_list|()
operator|==
literal|1
condition|)
block|{
specifier|final
name|long
name|l
init|=
name|maximumSizeSeq
operator|.
name|itemAt
argument_list|(
literal|0
argument_list|)
operator|.
name|toJavaObject
argument_list|(
name|Long
operator|.
name|class
argument_list|)
decl_stmt|;
name|maximumSize
operator|=
name|Optional
operator|.
name|of
argument_list|(
name|l
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|maximumSize
operator|=
name|Optional
operator|.
name|empty
argument_list|()
expr_stmt|;
block|}
specifier|final
name|Sequence
name|expireAfterAccessSeq
init|=
name|configMap
operator|.
name|get
argument_list|(
operator|new
name|StringValue
argument_list|(
literal|"expireAfterAccess"
argument_list|)
argument_list|)
decl_stmt|;
specifier|final
name|Optional
argument_list|<
name|Long
argument_list|>
name|expireAfterAccess
decl_stmt|;
if|if
condition|(
name|expireAfterAccessSeq
operator|!=
literal|null
operator|&&
name|expireAfterAccessSeq
operator|.
name|getItemCount
argument_list|()
operator|==
literal|1
condition|)
block|{
specifier|final
name|long
name|l
init|=
name|expireAfterAccessSeq
operator|.
name|itemAt
argument_list|(
literal|0
argument_list|)
operator|.
name|toJavaObject
argument_list|(
name|Long
operator|.
name|class
argument_list|)
decl_stmt|;
name|expireAfterAccess
operator|=
name|Optional
operator|.
name|of
argument_list|(
name|l
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|expireAfterAccess
operator|=
name|Optional
operator|.
name|empty
argument_list|()
expr_stmt|;
block|}
return|return
operator|new
name|CacheConfig
argument_list|(
name|permissions
argument_list|,
name|maximumSize
argument_list|,
name|expireAfterAccess
argument_list|)
return|;
block|}
specifier|private
name|Optional
argument_list|<
name|String
argument_list|>
name|getStringValue
parameter_list|(
specifier|final
name|String
name|key
parameter_list|,
specifier|final
name|AbstractMapType
name|map
parameter_list|)
block|{
return|return
name|Optional
operator|.
name|ofNullable
argument_list|(
name|map
operator|.
name|get
argument_list|(
operator|new
name|StringValue
argument_list|(
name|key
argument_list|)
argument_list|)
argument_list|)
operator|.
name|filter
argument_list|(
name|v
lambda|->
operator|!
name|v
operator|.
name|isEmpty
argument_list|()
argument_list|)
operator|.
name|flatMap
argument_list|(
name|v
lambda|->
name|Optional
operator|.
name|ofNullable
argument_list|(
operator|(
operator|(
name|StringValue
operator|)
name|v
operator|)
operator|.
name|getStringValue
argument_list|()
argument_list|)
argument_list|)
return|;
block|}
specifier|private
name|boolean
name|createCache
parameter_list|(
specifier|final
name|String
name|cacheName
parameter_list|,
specifier|final
name|CacheConfig
name|config
parameter_list|)
block|{
comment|// we must test for preemption, i.e the cache may have already been created
specifier|final
name|Cache
name|newOrExisting
init|=
name|CacheModule
operator|.
name|caches
operator|.
name|computeIfAbsent
argument_list|(
name|cacheName
argument_list|,
name|key
lambda|->
operator|new
name|Cache
argument_list|(
name|config
argument_list|)
argument_list|)
decl_stmt|;
comment|// is new
return|return
name|newOrExisting
operator|.
name|getConfig
argument_list|()
operator|==
name|config
return|;
block|}
specifier|private
name|Sequence
name|cacheNames
parameter_list|()
throws|throws
name|XPathException
block|{
specifier|final
name|Sequence
name|result
init|=
operator|new
name|ValueSequence
argument_list|()
decl_stmt|;
for|for
control|(
specifier|final
name|String
name|cacheName
range|:
name|CacheModule
operator|.
name|caches
operator|.
name|keySet
argument_list|()
control|)
block|{
name|result
operator|.
name|add
argument_list|(
operator|new
name|StringValue
argument_list|(
name|cacheName
argument_list|)
argument_list|)
expr_stmt|;
block|}
return|return
name|result
return|;
block|}
specifier|private
name|Sequence
name|put
parameter_list|(
specifier|final
name|String
name|cacheName
parameter_list|,
specifier|final
name|String
name|key
parameter_list|,
specifier|final
name|Sequence
name|value
parameter_list|)
throws|throws
name|XPathException
block|{
specifier|final
name|Cache
name|cache
init|=
name|CacheModule
operator|.
name|caches
operator|.
name|get
argument_list|(
name|cacheName
argument_list|)
decl_stmt|;
comment|// check permissions
if|if
condition|(
operator|!
name|context
operator|.
name|getEffectiveUser
argument_list|()
operator|.
name|hasDbaRole
argument_list|()
condition|)
block|{
specifier|final
name|Optional
argument_list|<
name|String
argument_list|>
name|putGroup
init|=
name|cache
operator|.
name|getConfig
argument_list|()
operator|.
name|getPermissions
argument_list|()
operator|.
name|flatMap
argument_list|(
name|CacheConfig
operator|.
name|Permissions
operator|::
name|getPutGroup
argument_list|)
decl_stmt|;
if|if
condition|(
name|putGroup
operator|.
name|isPresent
argument_list|()
condition|)
block|{
if|if
condition|(
operator|!
name|context
operator|.
name|getEffectiveUser
argument_list|()
operator|.
name|hasGroup
argument_list|(
name|putGroup
operator|.
name|get
argument_list|()
argument_list|)
condition|)
block|{
throw|throw
operator|new
name|XPathException
argument_list|(
name|this
argument_list|,
name|INSUFFICIENT_PERMISSIONS
argument_list|,
literal|"User does not have the appropriate permissions to put data into this cache"
argument_list|)
throw|;
block|}
block|}
block|}
return|return
name|cache
operator|.
name|put
argument_list|(
name|key
argument_list|,
name|value
argument_list|)
return|;
block|}
specifier|private
name|Sequence
name|list
parameter_list|(
specifier|final
name|String
name|cacheName
parameter_list|,
specifier|final
name|String
index|[]
name|keys
parameter_list|)
throws|throws
name|XPathException
block|{
specifier|final
name|Cache
name|cache
init|=
name|CacheModule
operator|.
name|caches
operator|.
name|get
argument_list|(
name|cacheName
argument_list|)
decl_stmt|;
comment|// check permissions
if|if
condition|(
operator|!
name|context
operator|.
name|getEffectiveUser
argument_list|()
operator|.
name|hasDbaRole
argument_list|()
condition|)
block|{
specifier|final
name|Optional
argument_list|<
name|String
argument_list|>
name|getGroup
init|=
name|cache
operator|.
name|getConfig
argument_list|()
operator|.
name|getPermissions
argument_list|()
operator|.
name|flatMap
argument_list|(
name|CacheConfig
operator|.
name|Permissions
operator|::
name|getGetGroup
argument_list|)
decl_stmt|;
if|if
condition|(
name|getGroup
operator|.
name|isPresent
argument_list|()
condition|)
block|{
if|if
condition|(
operator|!
name|context
operator|.
name|getEffectiveUser
argument_list|()
operator|.
name|hasGroup
argument_list|(
name|getGroup
operator|.
name|get
argument_list|()
argument_list|)
condition|)
block|{
throw|throw
operator|new
name|XPathException
argument_list|(
name|this
argument_list|,
name|INSUFFICIENT_PERMISSIONS
argument_list|,
literal|"User does not have the appropriate permissions to list data in this cache"
argument_list|)
throw|;
block|}
block|}
block|}
return|return
name|cache
operator|.
name|list
argument_list|(
name|keys
argument_list|)
return|;
block|}
specifier|private
name|Sequence
name|listKeys
parameter_list|(
specifier|final
name|String
name|cacheName
parameter_list|)
throws|throws
name|XPathException
block|{
specifier|final
name|Cache
name|cache
init|=
name|CacheModule
operator|.
name|caches
operator|.
name|get
argument_list|(
name|cacheName
argument_list|)
decl_stmt|;
comment|// check permissions
if|if
condition|(
operator|!
name|context
operator|.
name|getEffectiveUser
argument_list|()
operator|.
name|hasDbaRole
argument_list|()
condition|)
block|{
specifier|final
name|Optional
argument_list|<
name|String
argument_list|>
name|getGroup
init|=
name|cache
operator|.
name|getConfig
argument_list|()
operator|.
name|getPermissions
argument_list|()
operator|.
name|flatMap
argument_list|(
name|CacheConfig
operator|.
name|Permissions
operator|::
name|getGetGroup
argument_list|)
decl_stmt|;
if|if
condition|(
name|getGroup
operator|.
name|isPresent
argument_list|()
condition|)
block|{
if|if
condition|(
operator|!
name|context
operator|.
name|getEffectiveUser
argument_list|()
operator|.
name|hasGroup
argument_list|(
name|getGroup
operator|.
name|get
argument_list|()
argument_list|)
condition|)
block|{
throw|throw
operator|new
name|XPathException
argument_list|(
name|this
argument_list|,
name|INSUFFICIENT_PERMISSIONS
argument_list|,
literal|"User does not have the appropriate permissions to list data in this cache"
argument_list|)
throw|;
block|}
block|}
block|}
return|return
name|cache
operator|.
name|listKeys
argument_list|()
return|;
block|}
specifier|private
name|Sequence
name|get
parameter_list|(
specifier|final
name|String
name|cacheName
parameter_list|,
specifier|final
name|String
name|key
parameter_list|)
throws|throws
name|XPathException
block|{
specifier|final
name|Cache
name|cache
init|=
name|CacheModule
operator|.
name|caches
operator|.
name|get
argument_list|(
name|cacheName
argument_list|)
decl_stmt|;
comment|// check permissions
if|if
condition|(
operator|!
name|context
operator|.
name|getEffectiveUser
argument_list|()
operator|.
name|hasDbaRole
argument_list|()
condition|)
block|{
specifier|final
name|Optional
argument_list|<
name|String
argument_list|>
name|getGroup
init|=
name|cache
operator|.
name|getConfig
argument_list|()
operator|.
name|getPermissions
argument_list|()
operator|.
name|flatMap
argument_list|(
name|CacheConfig
operator|.
name|Permissions
operator|::
name|getGetGroup
argument_list|)
decl_stmt|;
if|if
condition|(
name|getGroup
operator|.
name|isPresent
argument_list|()
condition|)
block|{
if|if
condition|(
operator|!
name|context
operator|.
name|getEffectiveUser
argument_list|()
operator|.
name|hasGroup
argument_list|(
name|getGroup
operator|.
name|get
argument_list|()
argument_list|)
condition|)
block|{
throw|throw
operator|new
name|XPathException
argument_list|(
name|this
argument_list|,
name|INSUFFICIENT_PERMISSIONS
argument_list|,
literal|"User does not have the appropriate permissions to get data from this cache"
argument_list|)
throw|;
block|}
block|}
block|}
return|return
name|cache
operator|.
name|get
argument_list|(
name|key
argument_list|)
return|;
block|}
specifier|private
name|Sequence
name|remove
parameter_list|(
specifier|final
name|String
name|cacheName
parameter_list|,
specifier|final
name|String
name|key
parameter_list|)
throws|throws
name|XPathException
block|{
specifier|final
name|Cache
name|cache
init|=
name|CacheModule
operator|.
name|caches
operator|.
name|get
argument_list|(
name|cacheName
argument_list|)
decl_stmt|;
comment|// check permissions
if|if
condition|(
operator|!
name|context
operator|.
name|getEffectiveUser
argument_list|()
operator|.
name|hasDbaRole
argument_list|()
condition|)
block|{
specifier|final
name|Optional
argument_list|<
name|String
argument_list|>
name|removeGroup
init|=
name|cache
operator|.
name|getConfig
argument_list|()
operator|.
name|getPermissions
argument_list|()
operator|.
name|flatMap
argument_list|(
name|CacheConfig
operator|.
name|Permissions
operator|::
name|getRemoveGroup
argument_list|)
decl_stmt|;
if|if
condition|(
name|removeGroup
operator|.
name|isPresent
argument_list|()
condition|)
block|{
if|if
condition|(
operator|!
name|context
operator|.
name|getEffectiveUser
argument_list|()
operator|.
name|hasGroup
argument_list|(
name|removeGroup
operator|.
name|get
argument_list|()
argument_list|)
condition|)
block|{
throw|throw
operator|new
name|XPathException
argument_list|(
name|this
argument_list|,
name|INSUFFICIENT_PERMISSIONS
argument_list|,
literal|"User does not have the appropriate permissions to remove data from this cache"
argument_list|)
throw|;
block|}
block|}
block|}
return|return
name|cache
operator|.
name|remove
argument_list|(
name|key
argument_list|)
return|;
block|}
specifier|private
name|void
name|clearAll
parameter_list|()
throws|throws
name|XPathException
block|{
specifier|final
name|Collection
argument_list|<
name|Cache
argument_list|>
name|caches
init|=
name|CacheModule
operator|.
name|caches
operator|.
name|values
argument_list|()
decl_stmt|;
comment|// check all permissions first
if|if
condition|(
operator|!
name|context
operator|.
name|getEffectiveUser
argument_list|()
operator|.
name|hasDbaRole
argument_list|()
condition|)
block|{
for|for
control|(
specifier|final
name|Cache
name|cache
range|:
name|caches
control|)
block|{
specifier|final
name|Optional
argument_list|<
name|String
argument_list|>
name|clearGroup
init|=
name|cache
operator|.
name|getConfig
argument_list|()
operator|.
name|getPermissions
argument_list|()
operator|.
name|flatMap
argument_list|(
name|CacheConfig
operator|.
name|Permissions
operator|::
name|getClearGroup
argument_list|)
decl_stmt|;
if|if
condition|(
name|clearGroup
operator|.
name|isPresent
argument_list|()
condition|)
block|{
if|if
condition|(
operator|!
name|context
operator|.
name|getEffectiveUser
argument_list|()
operator|.
name|hasGroup
argument_list|(
name|clearGroup
operator|.
name|get
argument_list|()
argument_list|)
condition|)
block|{
throw|throw
operator|new
name|XPathException
argument_list|(
name|this
argument_list|,
name|INSUFFICIENT_PERMISSIONS
argument_list|,
literal|"User does not have the appropriate permissions to clear data from all caches"
argument_list|)
throw|;
block|}
block|}
block|}
block|}
comment|// finally clear the caches
for|for
control|(
specifier|final
name|Cache
name|cache
range|:
name|caches
control|)
block|{
name|cache
operator|.
name|clear
argument_list|()
expr_stmt|;
block|}
block|}
specifier|private
name|void
name|clear
parameter_list|(
specifier|final
name|String
name|cacheName
parameter_list|)
throws|throws
name|XPathException
block|{
specifier|final
name|Cache
name|cache
init|=
name|CacheModule
operator|.
name|caches
operator|.
name|get
argument_list|(
name|cacheName
argument_list|)
decl_stmt|;
comment|// check permissions
if|if
condition|(
operator|!
name|context
operator|.
name|getEffectiveUser
argument_list|()
operator|.
name|hasDbaRole
argument_list|()
condition|)
block|{
specifier|final
name|Optional
argument_list|<
name|String
argument_list|>
name|clearGroup
init|=
name|cache
operator|.
name|getConfig
argument_list|()
operator|.
name|getPermissions
argument_list|()
operator|.
name|flatMap
argument_list|(
name|CacheConfig
operator|.
name|Permissions
operator|::
name|getClearGroup
argument_list|)
decl_stmt|;
if|if
condition|(
name|clearGroup
operator|.
name|isPresent
argument_list|()
condition|)
block|{
if|if
condition|(
operator|!
name|context
operator|.
name|getEffectiveUser
argument_list|()
operator|.
name|hasGroup
argument_list|(
name|clearGroup
operator|.
name|get
argument_list|()
argument_list|)
condition|)
block|{
throw|throw
operator|new
name|XPathException
argument_list|(
name|this
argument_list|,
name|INSUFFICIENT_PERMISSIONS
argument_list|,
literal|"User does not have the appropriate permissions to clear data from this cache"
argument_list|)
throw|;
block|}
block|}
block|}
name|cache
operator|.
name|clear
argument_list|()
expr_stmt|;
block|}
specifier|private
name|void
name|cleanup
parameter_list|(
specifier|final
name|String
name|cacheName
parameter_list|)
throws|throws
name|XPathException
block|{
specifier|final
name|Cache
name|cache
init|=
name|CacheModule
operator|.
name|caches
operator|.
name|get
argument_list|(
name|cacheName
argument_list|)
decl_stmt|;
comment|// check permissions
if|if
condition|(
operator|!
name|context
operator|.
name|getEffectiveUser
argument_list|()
operator|.
name|hasDbaRole
argument_list|()
condition|)
block|{
specifier|final
name|Optional
argument_list|<
name|String
argument_list|>
name|clearGroup
init|=
name|cache
operator|.
name|getConfig
argument_list|()
operator|.
name|getPermissions
argument_list|()
operator|.
name|flatMap
argument_list|(
name|CacheConfig
operator|.
name|Permissions
operator|::
name|getClearGroup
argument_list|)
decl_stmt|;
if|if
condition|(
name|clearGroup
operator|.
name|isPresent
argument_list|()
condition|)
block|{
if|if
condition|(
operator|!
name|context
operator|.
name|getEffectiveUser
argument_list|()
operator|.
name|hasGroup
argument_list|(
name|clearGroup
operator|.
name|get
argument_list|()
argument_list|)
condition|)
block|{
throw|throw
operator|new
name|XPathException
argument_list|(
name|this
argument_list|,
name|INSUFFICIENT_PERMISSIONS
argument_list|,
literal|"User does not have the appropriate permissions to clear data from this cache"
argument_list|)
throw|;
block|}
block|}
block|}
name|cache
operator|.
name|cleanup
argument_list|()
expr_stmt|;
block|}
specifier|private
name|String
name|toMapKey
parameter_list|(
specifier|final
name|Sequence
name|key
parameter_list|)
throws|throws
name|XPathException
block|{
if|if
condition|(
name|key
operator|.
name|getItemCount
argument_list|()
operator|==
literal|1
condition|)
block|{
specifier|final
name|Item
name|item1
init|=
name|key
operator|.
name|itemAt
argument_list|(
literal|0
argument_list|)
decl_stmt|;
if|if
condition|(
name|item1
operator|.
name|getType
argument_list|()
operator|==
name|Type
operator|.
name|STRING
condition|)
block|{
return|return
name|item1
operator|.
name|getStringValue
argument_list|()
return|;
block|}
block|}
return|return
name|serializeKey
argument_list|(
name|key
argument_list|)
return|;
block|}
specifier|private
name|String
index|[]
name|toMapKeys
parameter_list|(
specifier|final
name|Sequence
name|keys
parameter_list|)
throws|throws
name|XPathException
block|{
specifier|final
name|String
index|[]
name|mapKeys
init|=
operator|new
name|String
index|[
name|keys
operator|.
name|getItemCount
argument_list|()
index|]
decl_stmt|;
specifier|final
name|Serializer
name|serializer
init|=
name|context
operator|.
name|getBroker
argument_list|()
operator|.
name|getSerializer
argument_list|()
decl_stmt|;
name|serializer
operator|.
name|reset
argument_list|()
expr_stmt|;
try|try
block|{
name|serializer
operator|.
name|setProperties
argument_list|(
name|OUTPUT_PROPERTIES
argument_list|)
expr_stmt|;
name|int
name|i
init|=
literal|0
decl_stmt|;
for|for
control|(
specifier|final
name|SequenceIterator
name|it
init|=
name|keys
operator|.
name|iterate
argument_list|()
init|;
name|it
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
specifier|final
name|Item
name|item
init|=
name|it
operator|.
name|nextItem
argument_list|()
decl_stmt|;
try|try
block|{
specifier|final
name|NodeValue
name|node
init|=
operator|(
name|NodeValue
operator|)
name|item
decl_stmt|;
name|mapKeys
index|[
name|i
index|]
operator|=
name|serializer
operator|.
name|serialize
argument_list|(
name|node
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
specifier|final
name|ClassCastException
name|e
parameter_list|)
block|{
name|mapKeys
index|[
name|i
index|]
operator|=
name|item
operator|.
name|getStringValue
argument_list|()
expr_stmt|;
block|}
name|i
operator|++
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
specifier|final
name|SAXException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|XPathException
argument_list|(
name|this
argument_list|,
name|KEY_SERIALIZATION
argument_list|,
name|e
argument_list|)
throw|;
block|}
return|return
name|mapKeys
return|;
block|}
specifier|private
name|String
name|serializeKey
parameter_list|(
specifier|final
name|Sequence
name|key
parameter_list|)
throws|throws
name|XPathException
block|{
specifier|final
name|StringBuilder
name|builder
init|=
operator|new
name|StringBuilder
argument_list|()
decl_stmt|;
specifier|final
name|Serializer
name|serializer
init|=
name|context
operator|.
name|getBroker
argument_list|()
operator|.
name|getSerializer
argument_list|()
decl_stmt|;
name|serializer
operator|.
name|reset
argument_list|()
expr_stmt|;
try|try
block|{
name|serializer
operator|.
name|setProperties
argument_list|(
name|OUTPUT_PROPERTIES
argument_list|)
expr_stmt|;
for|for
control|(
specifier|final
name|SequenceIterator
name|i
init|=
name|key
operator|.
name|iterate
argument_list|()
init|;
name|i
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
specifier|final
name|Item
name|item
init|=
name|i
operator|.
name|nextItem
argument_list|()
decl_stmt|;
try|try
block|{
specifier|final
name|NodeValue
name|node
init|=
operator|(
name|NodeValue
operator|)
name|item
decl_stmt|;
name|builder
operator|.
name|append
argument_list|(
name|serializer
operator|.
name|serialize
argument_list|(
name|node
argument_list|)
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
specifier|final
name|ClassCastException
name|e
parameter_list|)
block|{
name|builder
operator|.
name|append
argument_list|(
name|item
operator|.
name|getStringValue
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
return|return
name|builder
operator|.
name|toString
argument_list|()
return|;
block|}
catch|catch
parameter_list|(
specifier|final
name|SAXException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|XPathException
argument_list|(
name|this
argument_list|,
name|KEY_SERIALIZATION
argument_list|,
name|e
argument_list|)
throw|;
block|}
block|}
block|}
end_class

end_unit

