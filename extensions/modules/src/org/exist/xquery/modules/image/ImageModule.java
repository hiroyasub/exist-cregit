begin_unit|revision:1.0.0;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  *  eXist Image Module Extension  *  Copyright (C) 2006 Adam Retter<adam.retter@devon.gov.uk>  *  www.adamretter.co.uk  *    *  This program is free software; you can redistribute it and/or  *  modify it under the terms of the GNU Lesser General Public License  *  as published by the Free Software Foundation; either version 2  *  of the License, or (at your option) any later version.  *    *  This program is distributed in the hope that it will be useful,  *  but WITHOUT ANY WARRANTY; without even the implied warranty of  *  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the  *  GNU Lesser General Public License for more details.  *    *  You should have received a copy of the GNU Lesser General Public License  *  along with this program; if not, write to the Free Software  *  Foundation, Inc., 675 Mass Ave, Cambridge, MA 02139, USA.  *    *  $Id$  */
end_comment

begin_package
package|package
name|org
operator|.
name|exist
operator|.
name|xquery
operator|.
name|modules
operator|.
name|image
package|;
end_package

begin_import
import|import
name|java
operator|.
name|awt
operator|.
name|Graphics2D
import|;
end_import

begin_import
import|import
name|java
operator|.
name|awt
operator|.
name|Image
import|;
end_import

begin_import
import|import
name|java
operator|.
name|awt
operator|.
name|RenderingHints
import|;
end_import

begin_import
import|import
name|java
operator|.
name|awt
operator|.
name|image
operator|.
name|BufferedImage
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|ByteArrayInputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|imageio
operator|.
name|ImageIO
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|util
operator|.
name|Base64Decoder
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|xquery
operator|.
name|AbstractInternalModule
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|xquery
operator|.
name|FunctionDef
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|xquery
operator|.
name|XPathException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|xquery
operator|.
name|value
operator|.
name|Base64Binary
import|;
end_import

begin_comment
comment|/**  * eXist Image Module Extension  *   * An extension module for the eXist Native XML Database that allows operations  * on images stored in the eXist database.  *   * @author Adam Retter<adam.retter@devon.gov.uk>  * @serial 2006-03-10  * @version 1.0  *  * @see org.exist.xquery.AbstractInternalModule#AbstractInternalModule(org.exist.xquery.FunctionDef[])  */
end_comment

begin_comment
comment|/*  * TODO: metadata extraction from images, especially JPEG's  */
end_comment

begin_class
specifier|public
class|class
name|ImageModule
extends|extends
name|AbstractInternalModule
block|{
specifier|public
specifier|final
specifier|static
name|String
name|NAMESPACE_URI
init|=
literal|"http://exist-db.org/xquery/image"
decl_stmt|;
specifier|public
specifier|final
specifier|static
name|String
name|PREFIX
init|=
literal|"image"
decl_stmt|;
specifier|private
specifier|final
specifier|static
name|FunctionDef
index|[]
name|functions
init|=
block|{
operator|new
name|FunctionDef
argument_list|(
name|GetWidthFunction
operator|.
name|signature
argument_list|,
name|GetWidthFunction
operator|.
name|class
argument_list|)
block|,
operator|new
name|FunctionDef
argument_list|(
name|GetHeightFunction
operator|.
name|signature
argument_list|,
name|GetHeightFunction
operator|.
name|class
argument_list|)
block|,
operator|new
name|FunctionDef
argument_list|(
name|GetMetadataFunction
operator|.
name|signature
argument_list|,
name|GetMetadataFunction
operator|.
name|class
argument_list|)
block|,
operator|new
name|FunctionDef
argument_list|(
name|ScaleFunction
operator|.
name|signature
argument_list|,
name|ScaleFunction
operator|.
name|class
argument_list|)
block|,
operator|new
name|FunctionDef
argument_list|(
name|GetThumbnailsFunction
operator|.
name|signature
argument_list|,
name|GetThumbnailsFunction
operator|.
name|class
argument_list|)
block|}
decl_stmt|;
specifier|public
name|ImageModule
parameter_list|()
block|{
name|super
argument_list|(
name|functions
argument_list|)
expr_stmt|;
block|}
specifier|public
name|String
name|getNamespaceURI
parameter_list|()
block|{
return|return
name|NAMESPACE_URI
return|;
block|}
specifier|public
name|String
name|getDefaultPrefix
parameter_list|()
block|{
return|return
name|PREFIX
return|;
block|}
specifier|public
name|String
name|getDescription
parameter_list|()
block|{
return|return
literal|"A module for performing operations on Images stored in the eXist db"
return|;
block|}
comment|/** 	 * Get's an the raw binary data from base64 binary encoded image data 	 *  	 * @param imgBase64Data	The base64 encoded image data 	 *  	 * @return The raw binary data 	 */
specifier|protected
specifier|static
name|byte
index|[]
name|getImageData
parameter_list|(
name|Base64Binary
name|imgBase64Data
parameter_list|)
throws|throws
name|XPathException
block|{
comment|//decode the base64 image data
name|Base64Decoder
name|dec
init|=
operator|new
name|Base64Decoder
argument_list|()
decl_stmt|;
name|dec
operator|.
name|translate
argument_list|(
name|imgBase64Data
operator|.
name|getStringValue
argument_list|()
argument_list|)
expr_stmt|;
comment|//return the raw binary data
return|return
name|dec
operator|.
name|getByteArray
argument_list|()
return|;
block|}
comment|/** 	 * Get's an Image object from base64 binary encoded image data 	 *  	 * @param imgBase64Data	The base64 encoded image data 	 *  	 * @return An Image object 	 */
specifier|protected
specifier|static
name|Image
name|getImage
parameter_list|(
name|Base64Binary
name|imgBase64Data
parameter_list|)
throws|throws
name|IOException
throws|,
name|XPathException
block|{
comment|//Create an Image object from the byte array
return|return
name|ImageIO
operator|.
name|read
argument_list|(
operator|new
name|ByteArrayInputStream
argument_list|(
name|getImageData
argument_list|(
name|imgBase64Data
argument_list|)
argument_list|)
argument_list|)
return|;
block|}
comment|/** 	 * @author Rafael Troilo (rtroilo@gmail.com) 	 */
specifier|protected
specifier|static
name|BufferedImage
name|createThumb
parameter_list|(
name|Image
name|image
parameter_list|,
name|int
name|height
parameter_list|,
name|int
name|width
parameter_list|)
block|{
name|int
name|thumbWidth
init|=
literal|0
decl_stmt|;
name|int
name|thumbHeight
init|=
literal|0
decl_stmt|;
name|double
name|scaleFactor
init|=
literal|0.0
decl_stmt|;
name|BufferedImage
name|thumbImage
init|=
literal|null
decl_stmt|;
name|Graphics2D
name|graphics2D
init|=
literal|null
decl_stmt|;
name|int
name|imageHeight
init|=
name|image
operator|.
name|getHeight
argument_list|(
literal|null
argument_list|)
decl_stmt|;
name|int
name|imageWidth
init|=
name|image
operator|.
name|getWidth
argument_list|(
literal|null
argument_list|)
decl_stmt|;
if|if
condition|(
name|imageHeight
operator|>=
name|imageWidth
condition|)
block|{
name|scaleFactor
operator|=
operator|(
name|double
operator|)
name|height
operator|/
operator|(
name|double
operator|)
name|imageHeight
expr_stmt|;
name|thumbWidth
operator|=
operator|(
name|int
operator|)
operator|(
name|imageWidth
operator|*
name|scaleFactor
operator|)
expr_stmt|;
name|thumbHeight
operator|=
name|height
expr_stmt|;
if|if
condition|(
name|thumbWidth
operator|>
name|width
condition|)
block|{
comment|// thumbwidth is greater than
comment|// maxThumbWidth, so we have to scale
comment|// again
name|scaleFactor
operator|=
operator|(
name|double
operator|)
name|width
operator|/
operator|(
name|double
operator|)
name|thumbWidth
expr_stmt|;
name|thumbHeight
operator|=
operator|(
name|int
operator|)
operator|(
name|thumbHeight
operator|*
name|scaleFactor
operator|)
expr_stmt|;
name|thumbWidth
operator|=
name|width
expr_stmt|;
block|}
block|}
else|else
block|{
name|scaleFactor
operator|=
operator|(
name|double
operator|)
name|width
operator|/
operator|(
name|double
operator|)
name|imageWidth
expr_stmt|;
name|thumbHeight
operator|=
operator|(
name|int
operator|)
operator|(
name|imageHeight
operator|*
name|scaleFactor
operator|)
expr_stmt|;
name|thumbWidth
operator|=
name|width
expr_stmt|;
if|if
condition|(
name|thumbHeight
operator|>
name|height
condition|)
block|{
comment|// thumbHeight is greater than
comment|// maxThumbHeight, so we have to scale
comment|// again
name|scaleFactor
operator|=
operator|(
name|double
operator|)
name|height
operator|/
operator|(
name|double
operator|)
name|thumbHeight
expr_stmt|;
name|thumbWidth
operator|=
operator|(
name|int
operator|)
operator|(
name|thumbWidth
operator|*
name|scaleFactor
operator|)
expr_stmt|;
name|thumbHeight
operator|=
name|height
expr_stmt|;
block|}
block|}
name|thumbImage
operator|=
operator|new
name|BufferedImage
argument_list|(
name|thumbWidth
argument_list|,
name|thumbHeight
argument_list|,
name|BufferedImage
operator|.
name|TYPE_INT_RGB
argument_list|)
expr_stmt|;
name|graphics2D
operator|=
name|thumbImage
operator|.
name|createGraphics
argument_list|()
expr_stmt|;
name|graphics2D
operator|.
name|setRenderingHint
argument_list|(
name|RenderingHints
operator|.
name|KEY_INTERPOLATION
argument_list|,
name|RenderingHints
operator|.
name|VALUE_INTERPOLATION_BILINEAR
argument_list|)
expr_stmt|;
name|graphics2D
operator|.
name|drawImage
argument_list|(
name|image
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|,
name|thumbWidth
argument_list|,
name|thumbHeight
argument_list|,
literal|null
argument_list|)
expr_stmt|;
return|return
name|thumbImage
return|;
block|}
block|}
end_class

end_unit

