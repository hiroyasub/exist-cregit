begin_unit|revision:1.0.0;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * eXist Open Source Native XML Database  * Copyright (C) 2001-2018 The eXist Project  * http://exist-db.org  *  * This program is free software; you can redistribute it and/or  * modify it under the terms of the GNU Lesser General Public License  * as published by the Free Software Foundation; either version 2  * of the License, or (at your option) any later version.  *  * This program is distributed in the hope that it will be useful,  * but WITHOUT ANY WARRANTY; without even the implied warranty of  * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the  * GNU Lesser General Public License for more details.  *  * You should have received a copy of the GNU Lesser General Public  * License along with this library; if not, write to the Free Software  * Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA  02110-1301  USA  */
end_comment

begin_package
package|package
name|org
operator|.
name|exist
operator|.
name|xquery
operator|.
name|modules
operator|.
name|compression
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|logging
operator|.
name|log4j
operator|.
name|LogManager
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|logging
operator|.
name|log4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|EXistException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|collections
operator|.
name|Collection
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|collections
operator|.
name|triggers
operator|.
name|TriggerException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|security
operator|.
name|PermissionDeniedException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|storage
operator|.
name|lock
operator|.
name|Lock
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|storage
operator|.
name|txn
operator|.
name|TransactionException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|storage
operator|.
name|txn
operator|.
name|Txn
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|util
operator|.
name|LockException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|util
operator|.
name|MimeTable
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|xmldb
operator|.
name|XmldbURI
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|xquery
operator|.
name|*
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|xquery
operator|.
name|value
operator|.
name|*
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|InputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|OutputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|URI
import|;
end_import

begin_import
import|import
name|java
operator|.
name|nio
operator|.
name|file
operator|.
name|Files
import|;
end_import

begin_import
import|import
name|java
operator|.
name|nio
operator|.
name|file
operator|.
name|Path
import|;
end_import

begin_import
import|import
name|java
operator|.
name|nio
operator|.
name|file
operator|.
name|Paths
import|;
end_import

begin_import
import|import
name|java
operator|.
name|nio
operator|.
name|file
operator|.
name|StandardOpenOption
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Optional
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|exist
operator|.
name|xquery
operator|.
name|FunctionDSL
operator|.
name|*
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|exist
operator|.
name|xquery
operator|.
name|modules
operator|.
name|compression
operator|.
name|CompressionModule
operator|.
name|functionSignature
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|exist
operator|.
name|xquery
operator|.
name|modules
operator|.
name|compression
operator|.
name|CompressionModule
operator|.
name|functionSignatures
import|;
end_import

begin_comment
comment|/**  * Various Entry helper functions for filtering etc.  *  * @author<a href="mailto:adam@evolvedbinary.com">Adam Retter</a>  */
end_comment

begin_class
specifier|public
class|class
name|EntryFunctions
extends|extends
name|BasicFunction
block|{
specifier|private
specifier|final
specifier|static
name|Logger
name|LOG
init|=
name|LogManager
operator|.
name|getLogger
argument_list|(
name|EntryFunctions
operator|.
name|class
argument_list|)
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|FunctionParameterSequenceType
name|FS_PARAM_PATH
init|=
name|param
argument_list|(
literal|"path"
argument_list|,
name|Type
operator|.
name|STRING
argument_list|,
literal|"The path of the entry"
argument_list|)
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|FunctionParameterSequenceType
name|FS_PARAM_DATA_TYPE
init|=
name|param
argument_list|(
literal|"data-type"
argument_list|,
name|Type
operator|.
name|STRING
argument_list|,
literal|"The type of the entry, either 'directory' or 'resource'."
argument_list|)
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|FunctionParameterSequenceType
name|FS_PARAM_PARAM
init|=
name|optManyParam
argument_list|(
literal|"param"
argument_list|,
name|Type
operator|.
name|ITEM
argument_list|,
literal|"One or more parameters."
argument_list|)
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|FunctionParameterSequenceType
name|FS_PARAM_DATA
init|=
name|optParam
argument_list|(
literal|"data"
argument_list|,
name|Type
operator|.
name|ITEM
argument_list|,
literal|"The data of the entry in the archive"
argument_list|)
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|FunctionParameterSequenceType
name|FS_PARAM_FS_DEST_PATH
init|=
name|optParam
argument_list|(
literal|"destination"
argument_list|,
name|Type
operator|.
name|STRING
argument_list|,
literal|"A path to a directory on the filesystem where the entry should be extracted. If the path does not exist it will be created."
argument_list|)
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|FunctionParameterSequenceType
name|FS_PARAM_DB_DEST_COLLECTION
init|=
name|optParam
argument_list|(
literal|"destination"
argument_list|,
name|Type
operator|.
name|STRING
argument_list|,
literal|"A path to a Collection in the database where the entry should be extracted. If the Collection does not exist it will be created."
argument_list|)
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|String
name|FS_NO_FILTER_NAME
init|=
literal|"no-filter"
decl_stmt|;
specifier|static
specifier|final
name|FunctionSignature
index|[]
name|FS_NO_FILTER
init|=
name|functionSignatures
argument_list|(
name|FS_NO_FILTER_NAME
argument_list|,
literal|"Does not filter any entries."
argument_list|,
name|returns
argument_list|(
name|Type
operator|.
name|BOOLEAN
argument_list|,
literal|"Always true, so that no entries are filtered. Parameters are ignored."
argument_list|)
argument_list|,
name|arities
argument_list|(
name|arity
argument_list|(
name|FS_PARAM_PATH
argument_list|,
name|FS_PARAM_DATA_TYPE
argument_list|)
argument_list|,
name|arity
argument_list|(
name|FS_PARAM_PATH
argument_list|,
name|FS_PARAM_DATA_TYPE
argument_list|,
name|FS_PARAM_PARAM
argument_list|)
argument_list|)
argument_list|)
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|String
name|FS_FS_STORE_ENTRY_NAME3
init|=
literal|"fs-store-entry3"
decl_stmt|;
specifier|static
specifier|final
name|FunctionSignature
name|FS_FS_STORE_ENTRY3
init|=
name|functionSignature
argument_list|(
name|FS_FS_STORE_ENTRY_NAME3
argument_list|,
literal|"Stores an entry to the filesystem. This method is only available to the DBA role. Attempts to guard against exit attacks; If an exit attack is detected then the error `compression:archive-exit-attack is raised`."
argument_list|,
name|returns
argument_list|(
name|Type
operator|.
name|FUNCTION_REFERENCE
argument_list|,
literal|"A function suitable for passing as the $entry-data#3"
argument_list|)
argument_list|,
name|FS_PARAM_FS_DEST_PATH
argument_list|)
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|String
name|FS_FS_STORE_ENTRY_NAME4
init|=
literal|"fs-store-entry4"
decl_stmt|;
specifier|static
specifier|final
name|FunctionSignature
name|FS_FS_STORE_ENTRY4
init|=
name|functionSignature
argument_list|(
name|FS_FS_STORE_ENTRY_NAME4
argument_list|,
literal|"Stores an entry to the filesystem. This method is only available to the DBA role. Attempts to guard against exit attacks; If an exit attack is detected then the error `compression:archive-exit-attack is raised`."
argument_list|,
name|returns
argument_list|(
name|Type
operator|.
name|FUNCTION_REFERENCE
argument_list|,
literal|"A function suitable for passing as the $entry-data#4"
argument_list|)
argument_list|,
name|FS_PARAM_FS_DEST_PATH
argument_list|)
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|String
name|FS_DB_STORE_ENTRY_NAME3
init|=
literal|"db-store-entry3"
decl_stmt|;
specifier|static
specifier|final
name|FunctionSignature
name|FS_DB_STORE_ENTRY3
init|=
name|functionSignature
argument_list|(
name|FS_DB_STORE_ENTRY_NAME3
argument_list|,
literal|"Stores an entry to the database. Attempts to guard against exit attacks; If an exit attack is detected then the error `compression:archive-exit-attack is raised`."
argument_list|,
name|returns
argument_list|(
name|Type
operator|.
name|FUNCTION_REFERENCE
argument_list|,
literal|"A function suitable for passing as the $entry-data#3"
argument_list|)
argument_list|,
name|FS_PARAM_DB_DEST_COLLECTION
argument_list|)
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|String
name|FS_DB_STORE_ENTRY_NAME4
init|=
literal|"db-store-entry4"
decl_stmt|;
specifier|static
specifier|final
name|FunctionSignature
name|FS_DB_STORE_ENTRY4
init|=
name|functionSignature
argument_list|(
name|FS_DB_STORE_ENTRY_NAME4
argument_list|,
literal|"Stores an entry to the database. Attempts to guard against exit attacks; If an exit attack is detected then the error `compression:archive-exit-attack is raised`."
argument_list|,
name|returns
argument_list|(
name|Type
operator|.
name|FUNCTION_REFERENCE
argument_list|,
literal|"A function suitable for passing as the $entry-data#4"
argument_list|)
argument_list|,
name|FS_PARAM_DB_DEST_COLLECTION
argument_list|)
decl_stmt|;
specifier|public
name|EntryFunctions
parameter_list|(
specifier|final
name|XQueryContext
name|context
parameter_list|,
specifier|final
name|FunctionSignature
name|signature
parameter_list|)
block|{
name|super
argument_list|(
name|context
argument_list|,
name|signature
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|Sequence
name|eval
parameter_list|(
specifier|final
name|Sequence
index|[]
name|args
parameter_list|,
specifier|final
name|Sequence
name|contextSequence
parameter_list|)
throws|throws
name|XPathException
block|{
switch|switch
condition|(
name|getName
argument_list|()
operator|.
name|getLocalPart
argument_list|()
condition|)
block|{
case|case
name|FS_NO_FILTER_NAME
case|:
return|return
name|BooleanValue
operator|.
name|TRUE
return|;
case|case
name|FS_FS_STORE_ENTRY_NAME3
case|:
name|checkIsDBA
argument_list|()
expr_stmt|;
return|return
name|fsStoreEntry3
argument_list|(
name|args
argument_list|)
return|;
case|case
name|FS_FS_STORE_ENTRY_NAME4
case|:
name|checkIsDBA
argument_list|()
expr_stmt|;
return|return
name|fsStoreEntry4
argument_list|(
name|args
argument_list|)
return|;
case|case
name|FS_DB_STORE_ENTRY_NAME3
case|:
return|return
name|dbStoreEntry3
argument_list|(
name|args
argument_list|)
return|;
case|case
name|FS_DB_STORE_ENTRY_NAME4
case|:
return|return
name|dbStoreEntry4
argument_list|(
name|args
argument_list|)
return|;
default|default:
throw|throw
operator|new
name|XPathException
argument_list|(
name|this
argument_list|,
literal|"No function: "
operator|+
name|getName
argument_list|()
operator|+
literal|"#"
operator|+
name|getSignature
argument_list|()
operator|.
name|getArgumentCount
argument_list|()
argument_list|)
throw|;
block|}
block|}
specifier|private
name|void
name|checkIsDBA
parameter_list|()
throws|throws
name|XPathException
block|{
if|if
condition|(
operator|!
name|context
operator|.
name|getSubject
argument_list|()
operator|.
name|hasDbaRole
argument_list|()
condition|)
block|{
specifier|final
name|XPathException
name|xpe
init|=
operator|new
name|XPathException
argument_list|(
name|this
argument_list|,
literal|"Permission denied, calling user '"
operator|+
name|context
operator|.
name|getSubject
argument_list|()
operator|.
name|getName
argument_list|()
operator|+
literal|"' must be a DBA to call this function."
argument_list|)
decl_stmt|;
name|LOG
operator|.
name|error
argument_list|(
literal|"Invalid user"
argument_list|,
name|xpe
argument_list|)
expr_stmt|;
throw|throw
name|xpe
throw|;
block|}
block|}
comment|// returns a function reference like: ($path as xs:string, $data-type as xs:string, $data as item()?) as empty-sequence()
specifier|private
name|FunctionReference
name|fsStoreEntry3
parameter_list|(
specifier|final
name|Sequence
index|[]
name|args
parameter_list|)
throws|throws
name|XPathException
block|{
specifier|final
name|Path
name|fsDest
init|=
name|getFile
argument_list|(
name|args
index|[
literal|0
index|]
operator|.
name|itemAt
argument_list|(
literal|0
argument_list|)
operator|.
name|toString
argument_list|()
argument_list|)
decl_stmt|;
return|return
operator|new
name|FunctionReference
argument_list|(
operator|new
name|FunctionCall
argument_list|(
name|context
argument_list|,
operator|new
name|StoreFsFunction3
argument_list|(
name|context
argument_list|,
name|fsDest
argument_list|)
argument_list|)
argument_list|)
return|;
block|}
comment|// returns a function reference like: ($path as xs:string, $data-type as xs:string, $data as item()?, $param as item()*) as empty-sequence()
specifier|private
name|FunctionReference
name|fsStoreEntry4
parameter_list|(
specifier|final
name|Sequence
index|[]
name|args
parameter_list|)
throws|throws
name|XPathException
block|{
specifier|final
name|Path
name|fsDest
init|=
name|getFile
argument_list|(
name|args
index|[
literal|0
index|]
operator|.
name|itemAt
argument_list|(
literal|0
argument_list|)
operator|.
name|toString
argument_list|()
argument_list|)
decl_stmt|;
return|return
operator|new
name|FunctionReference
argument_list|(
operator|new
name|FunctionCall
argument_list|(
name|context
argument_list|,
operator|new
name|StoreFsFunction4
argument_list|(
name|context
argument_list|,
name|fsDest
argument_list|)
argument_list|)
argument_list|)
return|;
block|}
comment|// returns a function reference like: ($path as xs:string, $data-type as xs:string, $data as item()?) as empty-sequence()
specifier|private
name|FunctionReference
name|dbStoreEntry3
parameter_list|(
specifier|final
name|Sequence
index|[]
name|args
parameter_list|)
throws|throws
name|XPathException
block|{
specifier|final
name|XmldbURI
name|destCollection
init|=
name|XmldbURI
operator|.
name|create
argument_list|(
name|args
index|[
literal|0
index|]
operator|.
name|itemAt
argument_list|(
literal|0
argument_list|)
operator|.
name|toString
argument_list|()
argument_list|)
decl_stmt|;
return|return
operator|new
name|FunctionReference
argument_list|(
operator|new
name|FunctionCall
argument_list|(
name|context
argument_list|,
operator|new
name|StoreDbFunction3
argument_list|(
name|context
argument_list|,
name|destCollection
argument_list|)
argument_list|)
argument_list|)
return|;
block|}
comment|// returns a function reference like: ($path as xs:string, $data-type as xs:string, $data as item()?, $param as item()*) as empty-sequence()
specifier|private
name|FunctionReference
name|dbStoreEntry4
parameter_list|(
specifier|final
name|Sequence
index|[]
name|args
parameter_list|)
throws|throws
name|XPathException
block|{
specifier|final
name|XmldbURI
name|destCollection
init|=
name|XmldbURI
operator|.
name|create
argument_list|(
name|args
index|[
literal|0
index|]
operator|.
name|itemAt
argument_list|(
literal|0
argument_list|)
operator|.
name|toString
argument_list|()
argument_list|)
decl_stmt|;
return|return
operator|new
name|FunctionReference
argument_list|(
operator|new
name|FunctionCall
argument_list|(
name|context
argument_list|,
operator|new
name|StoreDbFunction4
argument_list|(
name|context
argument_list|,
name|destCollection
argument_list|)
argument_list|)
argument_list|)
return|;
block|}
specifier|private
specifier|static
class|class
name|StoreFsFunction3
extends|extends
name|StoreFsFunction
block|{
specifier|public
name|StoreFsFunction3
parameter_list|(
specifier|final
name|XQueryContext
name|context
parameter_list|,
specifier|final
name|Path
name|fsDest
parameter_list|)
block|{
name|super
argument_list|(
name|context
argument_list|,
name|fsDest
argument_list|,
name|FS_FS_STORE_ENTRY_NAME3
operator|+
literal|"-store"
argument_list|,
name|FS_PARAM_PATH
argument_list|,
name|FS_PARAM_DATA_TYPE
argument_list|,
name|FS_PARAM_DATA
argument_list|)
expr_stmt|;
block|}
block|}
specifier|private
specifier|static
class|class
name|StoreFsFunction4
extends|extends
name|StoreFsFunction
block|{
specifier|public
name|StoreFsFunction4
parameter_list|(
specifier|final
name|XQueryContext
name|context
parameter_list|,
specifier|final
name|Path
name|fsDest
parameter_list|)
block|{
name|super
argument_list|(
name|context
argument_list|,
name|fsDest
argument_list|,
name|FS_FS_STORE_ENTRY_NAME4
operator|+
literal|"-store"
argument_list|,
name|FS_PARAM_PATH
argument_list|,
name|FS_PARAM_DATA_TYPE
argument_list|,
name|FS_PARAM_DATA
argument_list|,
name|FS_PARAM_PARAM
argument_list|)
expr_stmt|;
block|}
block|}
specifier|private
specifier|static
class|class
name|StoreDbFunction3
extends|extends
name|StoreDbFunction
block|{
specifier|public
name|StoreDbFunction3
parameter_list|(
specifier|final
name|XQueryContext
name|context
parameter_list|,
specifier|final
name|XmldbURI
name|destCollection
parameter_list|)
block|{
name|super
argument_list|(
name|context
argument_list|,
name|destCollection
argument_list|,
name|FS_DB_STORE_ENTRY_NAME3
operator|+
literal|"-store"
argument_list|,
name|FS_PARAM_PATH
argument_list|,
name|FS_PARAM_DATA_TYPE
argument_list|,
name|FS_PARAM_DATA
argument_list|)
expr_stmt|;
block|}
block|}
specifier|private
specifier|static
class|class
name|StoreDbFunction4
extends|extends
name|StoreDbFunction
block|{
specifier|public
name|StoreDbFunction4
parameter_list|(
specifier|final
name|XQueryContext
name|context
parameter_list|,
specifier|final
name|XmldbURI
name|destCollection
parameter_list|)
block|{
name|super
argument_list|(
name|context
argument_list|,
name|destCollection
argument_list|,
name|FS_DB_STORE_ENTRY_NAME4
operator|+
literal|"-store"
argument_list|,
name|FS_PARAM_PATH
argument_list|,
name|FS_PARAM_DATA_TYPE
argument_list|,
name|FS_PARAM_DATA
argument_list|,
name|FS_PARAM_PARAM
argument_list|)
expr_stmt|;
block|}
block|}
specifier|private
specifier|static
specifier|abstract
class|class
name|StoreFsFunction
extends|extends
name|StoreFunction
block|{
specifier|private
specifier|final
name|Path
name|fsDest
decl_stmt|;
specifier|public
name|StoreFsFunction
parameter_list|(
specifier|final
name|XQueryContext
name|context
parameter_list|,
specifier|final
name|Path
name|fsDest
parameter_list|,
specifier|final
name|String
name|functionName
parameter_list|,
specifier|final
name|FunctionParameterSequenceType
modifier|...
name|paramTypes
parameter_list|)
block|{
name|super
argument_list|(
name|context
argument_list|,
name|functionName
argument_list|,
literal|"Stores an entry to the filesystem."
argument_list|,
name|paramTypes
argument_list|)
expr_stmt|;
name|this
operator|.
name|fsDest
operator|=
name|fsDest
expr_stmt|;
block|}
annotation|@
name|Override
specifier|protected
name|void
name|eval
parameter_list|(
specifier|final
name|String
name|path
parameter_list|,
specifier|final
name|DataType
name|dataType
parameter_list|,
specifier|final
name|Optional
argument_list|<
name|Item
argument_list|>
name|data
parameter_list|)
throws|throws
name|XPathException
block|{
specifier|final
name|Path
name|destPath
init|=
name|fsDest
operator|.
name|resolve
argument_list|(
name|path
argument_list|)
operator|.
name|normalize
argument_list|()
decl_stmt|;
if|if
condition|(
operator|!
name|destPath
operator|.
name|startsWith
argument_list|(
name|fsDest
argument_list|)
condition|)
block|{
throw|throw
operator|new
name|XPathException
argument_list|(
name|this
argument_list|,
name|CompressionModule
operator|.
name|ARCHIVE_EXIT_ATTACK
argument_list|,
literal|"Detected archive exit attack!"
argument_list|)
throw|;
block|}
switch|switch
condition|(
name|dataType
condition|)
block|{
case|case
name|resource
case|:
name|mkdirs
argument_list|(
name|destPath
operator|.
name|getParent
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|data
operator|.
name|isPresent
argument_list|()
condition|)
block|{
comment|// store the resource
try|try
init|(
specifier|final
name|OutputStream
name|os
init|=
name|Files
operator|.
name|newOutputStream
argument_list|(
name|destPath
argument_list|,
name|StandardOpenOption
operator|.
name|WRITE
argument_list|,
name|StandardOpenOption
operator|.
name|CREATE
argument_list|,
name|StandardOpenOption
operator|.
name|TRUNCATE_EXISTING
argument_list|)
init|)
block|{
operator|(
operator|(
name|BinaryValue
operator|)
name|data
operator|.
name|get
argument_list|()
operator|)
operator|.
name|streamBinaryTo
argument_list|(
name|os
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
specifier|final
name|IOException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|XPathException
argument_list|(
name|this
argument_list|,
literal|"Cannot serialize file. A problem occurred while serializing the binary data: "
operator|+
name|e
operator|.
name|getMessage
argument_list|()
argument_list|,
name|e
argument_list|)
throw|;
block|}
block|}
break|break;
case|case
name|directory
case|:
name|mkdirs
argument_list|(
name|destPath
argument_list|)
expr_stmt|;
break|break;
block|}
block|}
comment|/**          * Create the directory path if it does not exist.          *          * @param dir the directory path to create.          */
specifier|private
name|void
name|mkdirs
parameter_list|(
specifier|final
name|Path
name|dir
parameter_list|)
throws|throws
name|XPathException
block|{
try|try
block|{
if|if
condition|(
operator|!
name|Files
operator|.
name|exists
argument_list|(
name|dir
argument_list|)
condition|)
block|{
name|Files
operator|.
name|createDirectories
argument_list|(
name|dir
argument_list|)
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
specifier|final
name|IOException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|XPathException
argument_list|(
name|this
argument_list|,
literal|"Cannot create directory(s): "
operator|+
name|e
operator|.
name|getMessage
argument_list|()
argument_list|,
name|e
argument_list|)
throw|;
block|}
block|}
block|}
specifier|private
specifier|static
specifier|abstract
class|class
name|StoreDbFunction
extends|extends
name|StoreFunction
block|{
specifier|private
specifier|final
name|XmldbURI
name|destCollection
decl_stmt|;
specifier|public
name|StoreDbFunction
parameter_list|(
specifier|final
name|XQueryContext
name|context
parameter_list|,
specifier|final
name|XmldbURI
name|destCollection
parameter_list|,
specifier|final
name|String
name|functionName
parameter_list|,
specifier|final
name|FunctionParameterSequenceType
modifier|...
name|paramTypes
parameter_list|)
block|{
name|super
argument_list|(
name|context
argument_list|,
name|functionName
argument_list|,
literal|"Stores an entry to the filesystem."
argument_list|,
name|paramTypes
argument_list|)
expr_stmt|;
name|this
operator|.
name|destCollection
operator|=
name|destCollection
expr_stmt|;
block|}
annotation|@
name|Override
specifier|protected
name|void
name|eval
parameter_list|(
specifier|final
name|String
name|path
parameter_list|,
specifier|final
name|DataType
name|dataType
parameter_list|,
specifier|final
name|Optional
argument_list|<
name|Item
argument_list|>
name|data
parameter_list|)
throws|throws
name|XPathException
block|{
specifier|final
name|XmldbURI
name|destPath
init|=
name|destCollection
operator|.
name|resolveCollectionPath
argument_list|(
name|XmldbURI
operator|.
name|create
argument_list|(
name|path
argument_list|)
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|destPath
operator|.
name|startsWith
argument_list|(
name|destCollection
argument_list|)
condition|)
block|{
throw|throw
operator|new
name|XPathException
argument_list|(
name|this
argument_list|,
name|CompressionModule
operator|.
name|ARCHIVE_EXIT_ATTACK
argument_list|,
literal|"Detected archive exit attack!"
argument_list|)
throw|;
block|}
switch|switch
condition|(
name|dataType
condition|)
block|{
case|case
name|resource
case|:
name|mkcols
argument_list|(
name|destPath
operator|.
name|removeLastSegment
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|data
operator|.
name|isPresent
argument_list|()
condition|)
block|{
comment|// store the resource
name|Collection
name|collection
init|=
literal|null
decl_stmt|;
try|try
init|(
specifier|final
name|Txn
name|transaction
init|=
name|context
operator|.
name|getBroker
argument_list|()
operator|.
name|getBrokerPool
argument_list|()
operator|.
name|getTransactionManager
argument_list|()
operator|.
name|beginTransaction
argument_list|()
init|)
block|{
name|collection
operator|=
name|context
operator|.
name|getBroker
argument_list|()
operator|.
name|openCollection
argument_list|(
name|destPath
operator|.
name|removeLastSegment
argument_list|()
argument_list|,
name|Lock
operator|.
name|LockMode
operator|.
name|WRITE_LOCK
argument_list|)
expr_stmt|;
specifier|final
name|BinaryValue
name|binaryValue
init|=
operator|(
name|BinaryValue
operator|)
name|data
operator|.
name|get
argument_list|()
decl_stmt|;
specifier|final
name|String
name|mediaType
init|=
name|MimeTable
operator|.
name|getInstance
argument_list|()
operator|.
name|getContentTypeFor
argument_list|(
name|destPath
operator|.
name|lastSegment
argument_list|()
argument_list|)
operator|.
name|getName
argument_list|()
decl_stmt|;
try|try
init|(
specifier|final
name|InputStream
name|is
init|=
name|binaryValue
operator|.
name|getInputStream
argument_list|()
init|)
block|{
name|collection
operator|.
name|addBinaryResource
argument_list|(
name|transaction
argument_list|,
name|context
operator|.
name|getBroker
argument_list|()
argument_list|,
name|destPath
operator|.
name|lastSegment
argument_list|()
argument_list|,
name|is
argument_list|,
name|mediaType
argument_list|,
operator|-
literal|1
argument_list|)
expr_stmt|;
block|}
name|transaction
operator|.
name|commit
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
specifier|final
name|IOException
decl||
name|PermissionDeniedException
decl||
name|EXistException
decl||
name|LockException
decl||
name|TriggerException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|XPathException
argument_list|(
name|this
argument_list|,
literal|"Cannot serialize file. A problem occurred while serializing the binary data: "
operator|+
name|e
operator|.
name|getMessage
argument_list|()
argument_list|,
name|e
argument_list|)
throw|;
block|}
finally|finally
block|{
if|if
condition|(
name|collection
operator|!=
literal|null
condition|)
block|{
name|collection
operator|.
name|getLock
argument_list|()
operator|.
name|release
argument_list|(
name|Lock
operator|.
name|LockMode
operator|.
name|WRITE_LOCK
argument_list|)
expr_stmt|;
block|}
block|}
block|}
break|break;
case|case
name|directory
case|:
name|mkcols
argument_list|(
name|destPath
argument_list|)
expr_stmt|;
break|break;
block|}
block|}
comment|/**          * Create the Collection path if it does not exist.          *          * @param collection The collection path to create.          */
specifier|private
name|void
name|mkcols
parameter_list|(
specifier|final
name|XmldbURI
name|collection
parameter_list|)
throws|throws
name|XPathException
block|{
try|try
init|(
specifier|final
name|Txn
name|transaction
init|=
name|context
operator|.
name|getBroker
argument_list|()
operator|.
name|getBrokerPool
argument_list|()
operator|.
name|getTransactionManager
argument_list|()
operator|.
name|beginTransaction
argument_list|()
init|)
block|{
name|context
operator|.
name|getBroker
argument_list|()
operator|.
name|getOrCreateCollection
argument_list|(
name|transaction
argument_list|,
name|collection
argument_list|)
expr_stmt|;
name|transaction
operator|.
name|commit
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
specifier|final
name|IOException
decl||
name|PermissionDeniedException
decl||
name|TriggerException
decl||
name|TransactionException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|XPathException
argument_list|(
name|this
argument_list|,
literal|"Cannot create Collection(s): "
operator|+
name|e
operator|.
name|getMessage
argument_list|()
argument_list|,
name|e
argument_list|)
throw|;
block|}
block|}
block|}
specifier|private
specifier|static
specifier|abstract
class|class
name|StoreFunction
extends|extends
name|UserDefinedFunction
block|{
specifier|public
name|StoreFunction
parameter_list|(
specifier|final
name|XQueryContext
name|context
parameter_list|,
specifier|final
name|String
name|functionName
parameter_list|,
specifier|final
name|String
name|description
parameter_list|,
specifier|final
name|FunctionParameterSequenceType
modifier|...
name|paramTypes
parameter_list|)
block|{
name|super
argument_list|(
name|context
argument_list|,
name|functionSignature
argument_list|(
name|functionName
argument_list|,
name|description
argument_list|,
name|returnsNothing
argument_list|()
argument_list|,
name|paramTypes
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|accept
parameter_list|(
specifier|final
name|ExpressionVisitor
name|visitor
parameter_list|)
block|{
if|if
condition|(
name|visited
condition|)
block|{
return|return;
block|}
name|visited
operator|=
literal|true
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
specifier|final
name|Sequence
name|eval
parameter_list|(
specifier|final
name|Sequence
name|contextSequence
parameter_list|,
specifier|final
name|Item
name|contextItem
parameter_list|)
throws|throws
name|XPathException
block|{
specifier|final
name|Sequence
name|arg1
init|=
name|getCurrentArguments
argument_list|()
index|[
literal|0
index|]
decl_stmt|;
specifier|final
name|String
name|path
init|=
name|arg1
operator|.
name|itemAt
argument_list|(
literal|0
argument_list|)
operator|.
name|getStringValue
argument_list|()
decl_stmt|;
specifier|final
name|Sequence
name|arg2
init|=
name|getCurrentArguments
argument_list|()
index|[
literal|1
index|]
decl_stmt|;
specifier|final
name|String
name|dataType
init|=
name|arg2
operator|.
name|itemAt
argument_list|(
literal|0
argument_list|)
operator|.
name|getStringValue
argument_list|()
decl_stmt|;
specifier|final
name|Sequence
name|dataSeq
init|=
name|getCurrentArguments
argument_list|()
index|[
literal|2
index|]
decl_stmt|;
specifier|final
name|Optional
argument_list|<
name|Item
argument_list|>
name|data
decl_stmt|;
if|if
condition|(
operator|!
name|dataSeq
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|data
operator|=
name|Optional
operator|.
name|of
argument_list|(
name|dataSeq
operator|.
name|itemAt
argument_list|(
literal|0
argument_list|)
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|data
operator|=
name|Optional
operator|.
name|empty
argument_list|()
expr_stmt|;
block|}
name|eval
argument_list|(
name|path
argument_list|,
name|DataType
operator|.
name|valueOf
argument_list|(
name|dataType
argument_list|)
argument_list|,
name|data
argument_list|)
expr_stmt|;
return|return
name|Sequence
operator|.
name|EMPTY_SEQUENCE
return|;
block|}
specifier|protected
specifier|abstract
name|void
name|eval
parameter_list|(
specifier|final
name|String
name|path
parameter_list|,
specifier|final
name|DataType
name|dataType
parameter_list|,
specifier|final
name|Optional
argument_list|<
name|Item
argument_list|>
name|data
parameter_list|)
throws|throws
name|XPathException
function_decl|;
block|}
specifier|private
enum|enum
name|DataType
block|{
name|resource
block|,
name|directory
block|}
comment|/**      *  Convert path (URL, file path) to a File object.      *      * @param path Path written as OS specific path or as URL      * @return File object      * @throws XPathException Thrown when the URL cannot be used.      */
specifier|public
specifier|static
name|Path
name|getFile
parameter_list|(
specifier|final
name|String
name|path
parameter_list|)
throws|throws
name|XPathException
block|{
if|if
condition|(
name|path
operator|.
name|startsWith
argument_list|(
literal|"file:"
argument_list|)
condition|)
block|{
try|try
block|{
return|return
name|Paths
operator|.
name|get
argument_list|(
operator|new
name|URI
argument_list|(
name|path
argument_list|)
argument_list|)
return|;
block|}
catch|catch
parameter_list|(
name|Exception
name|ex
parameter_list|)
block|{
comment|// catch all (URISyntaxException)
throw|throw
operator|new
name|XPathException
argument_list|(
name|path
operator|+
literal|" is not a valid URI: '"
operator|+
name|ex
operator|.
name|getMessage
argument_list|()
operator|+
literal|"'"
argument_list|)
throw|;
block|}
block|}
else|else
block|{
return|return
name|Paths
operator|.
name|get
argument_list|(
name|path
argument_list|)
return|;
block|}
block|}
block|}
end_class

end_unit

