begin_unit|revision:1.0.0;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  *  eXist Open Source Native XML Database  *  Copyright (C) 2007-2018 The eXist Project  *  http://exist-db.org  *  *  This program is free software; you can redistribute it and/or  *  modify it under the terms of the GNU Lesser General Public License  *  as published by the Free Software Foundation; either version 2  *  of the License, or (at your option) any later version.  *  *  This program is distributed in the hope that it will be useful,  *  but WITHOUT ANY WARRANTY; without even the implied warranty of  *  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the  *  GNU Lesser General Public License for more details.  *  *  You should have received a copy of the GNU Lesser General Public  *  License along with this library; if not, write to the Free Software  *  Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA  02110-1301  USA  */
end_comment

begin_package
package|package
name|org
operator|.
name|exist
operator|.
name|xquery
operator|.
name|modules
operator|.
name|compression
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|dom
operator|.
name|QName
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|xquery
operator|.
name|*
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|xquery
operator|.
name|value
operator|.
name|FunctionParameterSequenceType
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|xquery
operator|.
name|value
operator|.
name|FunctionReturnSequenceType
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|exist
operator|.
name|xquery
operator|.
name|FunctionDSL
operator|.
name|functionDefs
import|;
end_import

begin_comment
comment|/**  * XQuery Extension module for compression and de-compression functions  *   * @author Adam Retter<adam@exist-db.org>  * @author ljo  */
end_comment

begin_class
specifier|public
class|class
name|CompressionModule
extends|extends
name|AbstractInternalModule
block|{
specifier|public
specifier|final
specifier|static
name|String
name|NAMESPACE_URI
init|=
literal|"http://exist-db.org/xquery/compression"
decl_stmt|;
specifier|public
specifier|final
specifier|static
name|String
name|PREFIX
init|=
literal|"compression"
decl_stmt|;
specifier|public
specifier|final
specifier|static
name|String
name|INCLUSION_DATE
init|=
literal|"2007-07-10"
decl_stmt|;
specifier|public
specifier|final
specifier|static
name|String
name|RELEASED_IN_VERSION
init|=
literal|"eXist-1.2"
decl_stmt|;
specifier|private
specifier|final
specifier|static
name|FunctionDef
index|[]
name|functions
init|=
name|functionDefs
argument_list|(
name|functionDefs
argument_list|(
name|ZipFunction
operator|.
name|class
argument_list|,
name|ZipFunction
operator|.
name|signatures
index|[
literal|0
index|]
argument_list|,
name|ZipFunction
operator|.
name|signatures
index|[
literal|1
index|]
argument_list|,
name|ZipFunction
operator|.
name|signatures
index|[
literal|2
index|]
argument_list|)
argument_list|,
name|functionDefs
argument_list|(
name|UnZipFunction
operator|.
name|class
argument_list|,
name|UnZipFunction
operator|.
name|FS_UNZIP
index|[
literal|0
index|]
argument_list|,
name|UnZipFunction
operator|.
name|FS_UNZIP
index|[
literal|1
index|]
argument_list|)
argument_list|,
name|functionDefs
argument_list|(
name|GZipFunction
operator|.
name|class
argument_list|,
name|GZipFunction
operator|.
name|signatures
index|[
literal|0
index|]
argument_list|)
argument_list|,
name|functionDefs
argument_list|(
name|UnGZipFunction
operator|.
name|class
argument_list|,
name|UnGZipFunction
operator|.
name|signatures
index|[
literal|0
index|]
argument_list|)
argument_list|,
name|functionDefs
argument_list|(
name|TarFunction
operator|.
name|class
argument_list|,
name|TarFunction
operator|.
name|signatures
index|[
literal|0
index|]
argument_list|,
name|TarFunction
operator|.
name|signatures
index|[
literal|1
index|]
argument_list|,
name|TarFunction
operator|.
name|signatures
index|[
literal|2
index|]
argument_list|)
argument_list|,
name|functionDefs
argument_list|(
name|UnTarFunction
operator|.
name|class
argument_list|,
name|UnTarFunction
operator|.
name|FS_UNTAR
index|[
literal|0
index|]
argument_list|,
name|UnTarFunction
operator|.
name|FS_UNTAR
index|[
literal|1
index|]
argument_list|)
argument_list|,
name|functionDefs
argument_list|(
name|EntryFunctions
operator|.
name|class
argument_list|,
name|EntryFunctions
operator|.
name|FS_NO_FILTER
index|[
literal|0
index|]
argument_list|,
name|EntryFunctions
operator|.
name|FS_NO_FILTER
index|[
literal|1
index|]
argument_list|,
name|EntryFunctions
operator|.
name|FS_FS_STORE_ENTRY4
argument_list|,
name|EntryFunctions
operator|.
name|FS_DB_STORE_ENTRY4
argument_list|)
argument_list|)
decl_stmt|;
specifier|public
name|CompressionModule
parameter_list|(
specifier|final
name|Map
argument_list|<
name|String
argument_list|,
name|List
argument_list|<
name|?
argument_list|>
argument_list|>
name|parameters
parameter_list|)
block|{
name|super
argument_list|(
name|functions
argument_list|,
name|parameters
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|String
name|getNamespaceURI
parameter_list|()
block|{
return|return
name|NAMESPACE_URI
return|;
block|}
annotation|@
name|Override
specifier|public
name|String
name|getDefaultPrefix
parameter_list|()
block|{
return|return
name|PREFIX
return|;
block|}
specifier|public
name|String
name|getDescription
parameter_list|()
block|{
return|return
literal|"A module for compression and decompression functions"
return|;
block|}
specifier|public
name|String
name|getReleaseVersion
parameter_list|()
block|{
return|return
name|RELEASED_IN_VERSION
return|;
block|}
specifier|static
name|FunctionSignature
name|functionSignature
parameter_list|(
specifier|final
name|String
name|name
parameter_list|,
specifier|final
name|String
name|description
parameter_list|,
specifier|final
name|FunctionReturnSequenceType
name|returnType
parameter_list|,
specifier|final
name|FunctionParameterSequenceType
modifier|...
name|paramTypes
parameter_list|)
block|{
return|return
name|FunctionDSL
operator|.
name|functionSignature
argument_list|(
operator|new
name|QName
argument_list|(
name|name
argument_list|,
name|NAMESPACE_URI
argument_list|)
argument_list|,
name|description
argument_list|,
name|returnType
argument_list|,
name|paramTypes
argument_list|)
return|;
block|}
specifier|static
name|FunctionSignature
index|[]
name|functionSignatures
parameter_list|(
specifier|final
name|String
name|name
parameter_list|,
specifier|final
name|String
name|description
parameter_list|,
specifier|final
name|FunctionReturnSequenceType
name|returnType
parameter_list|,
specifier|final
name|FunctionParameterSequenceType
index|[]
index|[]
name|variableParamTypes
parameter_list|)
block|{
return|return
name|FunctionDSL
operator|.
name|functionSignatures
argument_list|(
operator|new
name|QName
argument_list|(
name|name
argument_list|,
name|NAMESPACE_URI
argument_list|)
argument_list|,
name|description
argument_list|,
name|returnType
argument_list|,
name|variableParamTypes
argument_list|)
return|;
block|}
specifier|static
class|class
name|CompressionModuleErrorCode
extends|extends
name|ErrorCodes
operator|.
name|ErrorCode
block|{
specifier|private
name|CompressionModuleErrorCode
parameter_list|(
specifier|final
name|String
name|code
parameter_list|,
specifier|final
name|String
name|description
parameter_list|)
block|{
name|super
argument_list|(
operator|new
name|QName
argument_list|(
name|code
argument_list|,
name|NAMESPACE_URI
argument_list|,
name|PREFIX
argument_list|)
argument_list|,
name|description
argument_list|)
expr_stmt|;
block|}
block|}
specifier|static
specifier|final
name|ErrorCodes
operator|.
name|ErrorCode
name|ARCHIVE_EXIT_ATTACK
init|=
operator|new
name|CompressionModuleErrorCode
argument_list|(
literal|"archive-exit-attack"
argument_list|,
literal|"The archive likely contains an exit attack, whereby a file extraction tries to escape the destination path."
argument_list|)
decl_stmt|;
block|}
end_class

end_unit

