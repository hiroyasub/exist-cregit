begin_unit|revision:1.0.0;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  *  eXist Open Source Native XML Database  *  Copyright (C) 2001-08 The eXist Project  *  http://exist-db.org  *  *  This program is free software; you can redistribute it and/or  *  modify it under the terms of the GNU Lesser General Public License  *  as published by the Free Software Foundation; either version 2  *  of the License, or (at your option) any later version.  *  *  This program is distributed in the hope that it will be useful,  *  but WITHOUT ANY WARRANTY; without even the implied warranty of  *  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the  *  GNU Lesser General Public License for more details.  *  *  You should have received a copy of the GNU Lesser General Public  *  License along with this library; if not, write to the Free Software  *  Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA  02110-1301  USA  *  * $Id$  */
end_comment

begin_package
package|package
name|org
operator|.
name|exist
operator|.
name|xquery
operator|.
name|modules
operator|.
name|compression
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|InputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|ByteArrayOutputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Iterator
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|tools
operator|.
name|tar
operator|.
name|TarEntry
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|tools
operator|.
name|tar
operator|.
name|TarOutputStream
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|collections
operator|.
name|Collection
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|dom
operator|.
name|BinaryDocument
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|dom
operator|.
name|DefaultDocumentSet
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|dom
operator|.
name|DocumentImpl
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|dom
operator|.
name|MutableDocumentSet
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|dom
operator|.
name|QName
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|security
operator|.
name|PermissionDeniedException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|storage
operator|.
name|lock
operator|.
name|Lock
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|storage
operator|.
name|serializers
operator|.
name|Serializer
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|util
operator|.
name|LockException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|xmldb
operator|.
name|XmldbURI
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|xquery
operator|.
name|BasicFunction
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|xquery
operator|.
name|Cardinality
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|xquery
operator|.
name|FunctionSignature
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|xquery
operator|.
name|XPathException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|xquery
operator|.
name|XQueryContext
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|xquery
operator|.
name|value
operator|.
name|AnyURIValue
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|xquery
operator|.
name|value
operator|.
name|Base64Binary
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|xquery
operator|.
name|value
operator|.
name|Sequence
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|xquery
operator|.
name|value
operator|.
name|SequenceIterator
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|xquery
operator|.
name|value
operator|.
name|SequenceType
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|xquery
operator|.
name|value
operator|.
name|Type
import|;
end_import

begin_import
import|import
name|org
operator|.
name|xml
operator|.
name|sax
operator|.
name|SAXException
import|;
end_import

begin_comment
comment|/**  * Compresses a sequence of resources and/or collections into a Tar file  *   * @author Adam Retter<adam@exist-db.org>  * @version 1.0  */
end_comment

begin_class
specifier|public
class|class
name|TarFunction
extends|extends
name|BasicFunction
block|{
specifier|public
specifier|final
specifier|static
name|FunctionSignature
name|signatures
index|[]
init|=
block|{
operator|new
name|FunctionSignature
argument_list|(
operator|new
name|QName
argument_list|(
literal|"tar"
argument_list|,
name|CompressionModule
operator|.
name|NAMESPACE_URI
argument_list|,
name|CompressionModule
operator|.
name|PREFIX
argument_list|)
argument_list|,
literal|"Tar's resources and/or collections. $a is a sequence of URI's, if a URI points to a collection"
operator|+
literal|"then the collection, its resources and sub-collections are tarred recursively. "
operator|+
literal|"$b indicates whether to use the collection hierarchy in the tar file."
argument_list|,
operator|new
name|SequenceType
index|[]
block|{
operator|new
name|SequenceType
argument_list|(
name|Type
operator|.
name|ANY_URI
argument_list|,
name|Cardinality
operator|.
name|ONE_OR_MORE
argument_list|)
block|,
operator|new
name|SequenceType
argument_list|(
name|Type
operator|.
name|BOOLEAN
argument_list|,
name|Cardinality
operator|.
name|EXACTLY_ONE
argument_list|)
block|}
argument_list|,
operator|new
name|SequenceType
argument_list|(
name|Type
operator|.
name|BASE64_BINARY
argument_list|,
name|Cardinality
operator|.
name|ZERO_OR_MORE
argument_list|)
argument_list|)
block|,
operator|new
name|FunctionSignature
argument_list|(
operator|new
name|QName
argument_list|(
literal|"tar"
argument_list|,
name|CompressionModule
operator|.
name|NAMESPACE_URI
argument_list|,
name|CompressionModule
operator|.
name|PREFIX
argument_list|)
argument_list|,
literal|"Tar's resources and/or collections. $a is a sequence of URI's, if a URI points to a collection"
operator|+
literal|"then the collection, its resources and sub-collections are tarred recursively. "
operator|+
literal|"$b indicates whether to use the collection hierarchy in the tar file."
operator|+
literal|"$c is removed from the beginning of each file path."
argument_list|,
operator|new
name|SequenceType
index|[]
block|{
operator|new
name|SequenceType
argument_list|(
name|Type
operator|.
name|ANY_URI
argument_list|,
name|Cardinality
operator|.
name|ONE_OR_MORE
argument_list|)
block|,
operator|new
name|SequenceType
argument_list|(
name|Type
operator|.
name|BOOLEAN
argument_list|,
name|Cardinality
operator|.
name|EXACTLY_ONE
argument_list|)
block|,
operator|new
name|SequenceType
argument_list|(
name|Type
operator|.
name|STRING
argument_list|,
name|Cardinality
operator|.
name|EXACTLY_ONE
argument_list|)
block|}
argument_list|,
operator|new
name|SequenceType
argument_list|(
name|Type
operator|.
name|BASE64_BINARY
argument_list|,
name|Cardinality
operator|.
name|ZERO_OR_MORE
argument_list|)
argument_list|)
block|}
decl_stmt|;
specifier|public
name|TarFunction
parameter_list|(
name|XQueryContext
name|context
parameter_list|,
name|FunctionSignature
name|signature
parameter_list|)
block|{
name|super
argument_list|(
name|context
argument_list|,
name|signature
argument_list|)
expr_stmt|;
block|}
specifier|public
name|Sequence
name|eval
parameter_list|(
name|Sequence
index|[]
name|args
parameter_list|,
name|Sequence
name|contextSequence
parameter_list|)
throws|throws
name|XPathException
block|{
comment|// are there some uri's to tar?
if|if
condition|(
name|args
index|[
literal|0
index|]
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
return|return
name|Sequence
operator|.
name|EMPTY_SEQUENCE
return|;
block|}
comment|// use a hierarchy in the tar file?
name|boolean
name|useHierarchy
init|=
name|args
index|[
literal|1
index|]
operator|.
name|effectiveBooleanValue
argument_list|()
decl_stmt|;
comment|// Get offset
name|String
name|stripOffset
init|=
literal|""
decl_stmt|;
if|if
condition|(
name|args
operator|.
name|length
operator|==
literal|3
condition|)
block|{
name|stripOffset
operator|=
name|args
index|[
literal|2
index|]
operator|.
name|getStringValue
argument_list|()
expr_stmt|;
block|}
name|ByteArrayOutputStream
name|baos
init|=
operator|new
name|ByteArrayOutputStream
argument_list|()
decl_stmt|;
name|TarOutputStream
name|tos
init|=
operator|new
name|TarOutputStream
argument_list|(
name|baos
argument_list|)
decl_stmt|;
comment|// iterate through the argument sequence
for|for
control|(
name|SequenceIterator
name|i
init|=
name|args
index|[
literal|0
index|]
operator|.
name|iterate
argument_list|()
init|;
name|i
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|AnyURIValue
name|uri
init|=
operator|(
name|AnyURIValue
operator|)
name|i
operator|.
name|nextItem
argument_list|()
decl_stmt|;
name|DocumentImpl
name|doc
init|=
literal|null
decl_stmt|;
try|try
block|{
comment|// try for a doc
name|doc
operator|=
name|context
operator|.
name|getBroker
argument_list|()
operator|.
name|getXMLResource
argument_list|(
name|uri
operator|.
name|toXmldbURI
argument_list|()
argument_list|,
name|Lock
operator|.
name|READ_LOCK
argument_list|)
expr_stmt|;
if|if
condition|(
name|doc
operator|==
literal|null
condition|)
block|{
comment|// no doc, try for a collection
name|Collection
name|col
init|=
name|context
operator|.
name|getBroker
argument_list|()
operator|.
name|getCollection
argument_list|(
name|uri
operator|.
name|toXmldbURI
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|col
operator|!=
literal|null
condition|)
block|{
comment|// got a collection
name|tarCollection
argument_list|(
name|tos
argument_list|,
name|col
argument_list|,
name|useHierarchy
argument_list|,
name|stripOffset
argument_list|)
expr_stmt|;
block|}
else|else
block|{
comment|// no doc or collection
throw|throw
operator|new
name|XPathException
argument_list|(
name|getASTNode
argument_list|()
argument_list|,
literal|"Invalid URI: "
operator|+
name|uri
operator|.
name|toString
argument_list|()
argument_list|)
throw|;
block|}
block|}
else|else
block|{
comment|// got a doc
name|tarResource
argument_list|(
name|tos
argument_list|,
name|doc
argument_list|,
name|useHierarchy
argument_list|,
name|stripOffset
argument_list|)
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
name|PermissionDeniedException
name|pde
parameter_list|)
block|{
throw|throw
operator|new
name|XPathException
argument_list|(
name|getASTNode
argument_list|()
argument_list|,
name|pde
operator|.
name|getMessage
argument_list|()
argument_list|)
throw|;
block|}
catch|catch
parameter_list|(
name|IOException
name|ioe
parameter_list|)
block|{
throw|throw
operator|new
name|XPathException
argument_list|(
name|getASTNode
argument_list|()
argument_list|,
name|ioe
operator|.
name|getMessage
argument_list|()
argument_list|)
throw|;
block|}
catch|catch
parameter_list|(
name|SAXException
name|se
parameter_list|)
block|{
throw|throw
operator|new
name|XPathException
argument_list|(
name|getASTNode
argument_list|()
argument_list|,
name|se
operator|.
name|getMessage
argument_list|()
argument_list|)
throw|;
block|}
catch|catch
parameter_list|(
name|LockException
name|le
parameter_list|)
block|{
throw|throw
operator|new
name|XPathException
argument_list|(
name|getASTNode
argument_list|()
argument_list|,
name|le
operator|.
name|getMessage
argument_list|()
argument_list|)
throw|;
block|}
finally|finally
block|{
if|if
condition|(
name|doc
operator|!=
literal|null
condition|)
block|{
name|doc
operator|.
name|getUpdateLock
argument_list|()
operator|.
name|release
argument_list|(
name|Lock
operator|.
name|READ_LOCK
argument_list|)
expr_stmt|;
block|}
block|}
block|}
try|try
block|{
name|tos
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|ioe
parameter_list|)
block|{
throw|throw
operator|new
name|XPathException
argument_list|(
name|getASTNode
argument_list|()
argument_list|,
name|ioe
operator|.
name|getMessage
argument_list|()
argument_list|)
throw|;
block|}
return|return
operator|new
name|Base64Binary
argument_list|(
name|baos
operator|.
name|toByteArray
argument_list|()
argument_list|)
return|;
block|}
comment|/** 	 * Adds a document to a Tar 	 *  	 * @param tos 	 *            The Tar Output Stream to add the document to 	 * @param doc 	 *            The document to add to the Tar 	 * @param useHierarchy 	 *            Whether to use a folder hierarchy in the Tar file that 	 *            reflects the collection hierarchy 	 */
specifier|private
name|void
name|tarResource
parameter_list|(
name|TarOutputStream
name|tos
parameter_list|,
name|DocumentImpl
name|doc
parameter_list|,
name|boolean
name|useHierarchy
parameter_list|,
name|String
name|stripOffset
parameter_list|)
throws|throws
name|IOException
throws|,
name|SAXException
block|{
comment|// create an entry in the Tar for the document
name|TarEntry
name|entry
init|=
literal|null
decl_stmt|;
if|if
condition|(
name|useHierarchy
condition|)
block|{
name|String
name|docCollection
init|=
name|doc
operator|.
name|getCollection
argument_list|()
operator|.
name|getURI
argument_list|()
operator|.
name|toString
argument_list|()
decl_stmt|;
comment|// remove leading offset
if|if
condition|(
name|docCollection
operator|.
name|startsWith
argument_list|(
name|stripOffset
argument_list|)
condition|)
block|{
name|docCollection
operator|=
name|docCollection
operator|.
name|substring
argument_list|(
name|stripOffset
operator|.
name|length
argument_list|()
argument_list|)
expr_stmt|;
block|}
comment|// remove leading /
if|if
condition|(
name|docCollection
operator|.
name|startsWith
argument_list|(
literal|"/"
argument_list|)
condition|)
block|{
name|docCollection
operator|=
name|docCollection
operator|.
name|substring
argument_list|(
literal|1
argument_list|)
expr_stmt|;
block|}
name|XmldbURI
name|collection
init|=
name|XmldbURI
operator|.
name|create
argument_list|(
name|docCollection
argument_list|)
decl_stmt|;
name|entry
operator|=
operator|new
name|TarEntry
argument_list|(
name|collection
operator|.
name|append
argument_list|(
name|doc
operator|.
name|getFileURI
argument_list|()
argument_list|)
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|entry
operator|=
operator|new
name|TarEntry
argument_list|(
name|doc
operator|.
name|getFileURI
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|tos
operator|.
name|putNextEntry
argument_list|(
name|entry
argument_list|)
expr_stmt|;
comment|// add the document to the Tar
if|if
condition|(
name|doc
operator|.
name|getResourceType
argument_list|()
operator|==
name|DocumentImpl
operator|.
name|XML_FILE
condition|)
block|{
comment|// xml file
name|Serializer
name|serializer
init|=
name|context
operator|.
name|getBroker
argument_list|()
operator|.
name|getSerializer
argument_list|()
decl_stmt|;
name|serializer
operator|.
name|setUser
argument_list|(
name|context
operator|.
name|getUser
argument_list|()
argument_list|)
expr_stmt|;
name|serializer
operator|.
name|setProperty
argument_list|(
literal|"omit-xml-declaration"
argument_list|,
literal|"no"
argument_list|)
expr_stmt|;
name|String
name|strDoc
init|=
name|serializer
operator|.
name|serialize
argument_list|(
name|doc
argument_list|)
decl_stmt|;
name|tos
operator|.
name|write
argument_list|(
name|strDoc
operator|.
name|getBytes
argument_list|()
argument_list|)
expr_stmt|;
block|}
if|else if
condition|(
name|doc
operator|.
name|getResourceType
argument_list|()
operator|==
name|DocumentImpl
operator|.
name|BINARY_FILE
condition|)
block|{
comment|// binary file
name|InputStream
name|is
init|=
name|context
operator|.
name|getBroker
argument_list|()
operator|.
name|getBinaryResource
argument_list|(
operator|(
name|BinaryDocument
operator|)
name|doc
argument_list|)
decl_stmt|;
name|byte
index|[]
name|data
init|=
operator|new
name|byte
index|[
literal|16384
index|]
decl_stmt|;
name|int
name|len
init|=
literal|0
decl_stmt|;
while|while
condition|(
operator|(
name|len
operator|=
name|is
operator|.
name|read
argument_list|(
name|data
argument_list|,
literal|0
argument_list|,
name|data
operator|.
name|length
argument_list|)
operator|)
operator|>
literal|0
condition|)
block|{
name|tos
operator|.
name|write
argument_list|(
name|data
argument_list|,
literal|0
argument_list|,
name|len
argument_list|)
expr_stmt|;
block|}
name|is
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
comment|// close the entry in the Tar
name|tos
operator|.
name|closeEntry
argument_list|()
expr_stmt|;
block|}
comment|/** 	 * Adds a Collection and its child collections and resources recursively to 	 * a Tar 	 *  	 * @param tos 	 *            The Tar Output Stream to add the document to 	 * @param col 	 *            The Collection to add to the Tar 	 * @param useHierarchy 	 *            Whether to use a folder hierarchy in the Tar file that 	 *            reflects the collection hierarchy 	 */
specifier|private
name|void
name|tarCollection
parameter_list|(
name|TarOutputStream
name|tos
parameter_list|,
name|Collection
name|col
parameter_list|,
name|boolean
name|useHierarchy
parameter_list|,
name|String
name|stripOffset
parameter_list|)
throws|throws
name|IOException
throws|,
name|SAXException
throws|,
name|LockException
block|{
comment|// iterate over child documents
name|MutableDocumentSet
name|childDocs
init|=
operator|new
name|DefaultDocumentSet
argument_list|()
decl_stmt|;
name|col
operator|.
name|getDocuments
argument_list|(
name|context
operator|.
name|getBroker
argument_list|()
argument_list|,
name|childDocs
argument_list|,
literal|true
argument_list|)
expr_stmt|;
for|for
control|(
name|Iterator
name|itChildDocs
init|=
name|childDocs
operator|.
name|getDocumentIterator
argument_list|()
init|;
name|itChildDocs
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|DocumentImpl
name|childDoc
init|=
operator|(
name|DocumentImpl
operator|)
name|itChildDocs
operator|.
name|next
argument_list|()
decl_stmt|;
name|childDoc
operator|.
name|getUpdateLock
argument_list|()
operator|.
name|acquire
argument_list|(
name|Lock
operator|.
name|READ_LOCK
argument_list|)
expr_stmt|;
try|try
block|{
comment|// tar the resource
name|tarResource
argument_list|(
name|tos
argument_list|,
name|childDoc
argument_list|,
name|useHierarchy
argument_list|,
name|stripOffset
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
name|childDoc
operator|.
name|getUpdateLock
argument_list|()
operator|.
name|release
argument_list|(
name|Lock
operator|.
name|READ_LOCK
argument_list|)
expr_stmt|;
block|}
block|}
comment|// iterate over child collections
for|for
control|(
name|Iterator
name|itChildCols
init|=
name|col
operator|.
name|collectionIterator
argument_list|()
init|;
name|itChildCols
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
comment|// get the child collection
name|XmldbURI
name|childColURI
init|=
operator|(
name|XmldbURI
operator|)
name|itChildCols
operator|.
name|next
argument_list|()
decl_stmt|;
name|Collection
name|childCol
init|=
name|context
operator|.
name|getBroker
argument_list|()
operator|.
name|getCollection
argument_list|(
name|col
operator|.
name|getURI
argument_list|()
operator|.
name|append
argument_list|(
name|childColURI
argument_list|)
argument_list|)
decl_stmt|;
comment|// recurse
name|tarCollection
argument_list|(
name|tos
argument_list|,
name|childCol
argument_list|,
name|useHierarchy
argument_list|,
name|stripOffset
argument_list|)
expr_stmt|;
block|}
block|}
block|}
end_class

end_unit

