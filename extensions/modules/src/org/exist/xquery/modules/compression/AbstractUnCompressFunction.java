begin_unit|revision:1.0.0;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  *  eXist Open Source Native XML Database  *  Copyright (C) 2001-08 The eXist Project  *  http://exist-db.org  *  *  This program is free software; you can redistribute it and/or  *  modify it under the terms of the GNU Lesser General Public License  *  as published by the Free Software Foundation; either version 2  *  of the License, or (at your option) any later version.  *  *  This program is distributed in the hope that it will be useful,  *  but WITHOUT ANY WARRANTY; without even the implied warranty of  *  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the  *  GNU Lesser General Public License for more details.  *  *  You should have received a copy of the GNU Lesser General Public  *  License along with this library; if not, write to the Free Software  *  Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA  02110-1301  USA  *  * $Id$  */
end_comment

begin_package
package|package
name|org
operator|.
name|exist
operator|.
name|xquery
operator|.
name|modules
operator|.
name|compression
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|io
operator|.
name|output
operator|.
name|ByteArrayOutputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|ByteArrayInputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|File
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|InputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashSet
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|dom
operator|.
name|QName
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|memtree
operator|.
name|DocumentBuilderReceiver
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|memtree
operator|.
name|MemTreeBuilder
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|memtree
operator|.
name|NodeImpl
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|util
operator|.
name|MimeTable
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|util
operator|.
name|MimeType
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|xmldb
operator|.
name|EXistResource
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|xquery
operator|.
name|FunctionSignature
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|xquery
operator|.
name|XPathException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|xquery
operator|.
name|XQueryContext
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|xquery
operator|.
name|functions
operator|.
name|xmldb
operator|.
name|XMLDBAbstractCollectionManipulator
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|xquery
operator|.
name|modules
operator|.
name|ModuleUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|xquery
operator|.
name|value
operator|.
name|AtomicValue
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|xquery
operator|.
name|value
operator|.
name|Base64Binary
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|xquery
operator|.
name|value
operator|.
name|Item
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|xquery
operator|.
name|value
operator|.
name|NodeValue
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|xquery
operator|.
name|value
operator|.
name|Sequence
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|xquery
operator|.
name|value
operator|.
name|SequenceIterator
import|;
end_import

begin_import
import|import
name|org
operator|.
name|xml
operator|.
name|sax
operator|.
name|ContentHandler
import|;
end_import

begin_import
import|import
name|org
operator|.
name|xml
operator|.
name|sax
operator|.
name|SAXException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|xmldb
operator|.
name|api
operator|.
name|base
operator|.
name|Collection
import|;
end_import

begin_import
import|import
name|org
operator|.
name|xmldb
operator|.
name|api
operator|.
name|base
operator|.
name|Resource
import|;
end_import

begin_import
import|import
name|org
operator|.
name|xmldb
operator|.
name|api
operator|.
name|base
operator|.
name|XMLDBException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|xmldb
operator|.
name|api
operator|.
name|modules
operator|.
name|XMLResource
import|;
end_import

begin_comment
comment|/**  * Compresses a sequence of resources and/or collections into a Tar file  *   * @author Adam Retter<adam@exist-db.org>  * @version 1.0  */
end_comment

begin_class
specifier|public
specifier|abstract
class|class
name|AbstractUnCompressFunction
extends|extends
name|XMLDBAbstractCollectionManipulator
block|{
specifier|private
name|HashSet
argument_list|<
name|String
argument_list|>
name|list
init|=
operator|new
name|HashSet
argument_list|<
name|String
argument_list|>
argument_list|()
decl_stmt|;
specifier|protected
name|boolean
name|doUncompress
parameter_list|(
name|String
name|name
parameter_list|)
block|{
name|boolean
name|f
init|=
name|list
operator|.
name|isEmpty
argument_list|()
operator|||
name|list
operator|.
name|contains
argument_list|(
name|name
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|f
condition|)
block|{
for|for
control|(
name|String
name|i
range|:
name|list
control|)
block|{
name|f
operator||=
name|name
operator|.
name|startsWith
argument_list|(
name|i
operator|+
literal|"/"
argument_list|)
expr_stmt|;
if|if
condition|(
name|f
condition|)
break|break;
block|}
block|}
return|return
name|f
return|;
block|}
specifier|private
name|ByteArrayInputStream
name|preEval
parameter_list|(
name|Base64Binary
name|data
parameter_list|,
name|Sequence
name|list
parameter_list|)
throws|throws
name|XPathException
block|{
for|for
control|(
name|SequenceIterator
name|i
init|=
name|list
operator|.
name|iterate
argument_list|()
init|;
name|i
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|String
name|r
init|=
name|i
operator|.
name|nextItem
argument_list|()
operator|.
name|toString
argument_list|()
decl_stmt|;
if|if
condition|(
name|r
operator|.
name|startsWith
argument_list|(
literal|"/"
argument_list|)
condition|)
block|{
name|r
operator|=
name|r
operator|.
name|substring
argument_list|(
literal|1
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|r
operator|.
name|endsWith
argument_list|(
literal|"/"
argument_list|)
condition|)
block|{
name|r
operator|=
name|r
operator|.
name|substring
argument_list|(
literal|0
argument_list|,
name|r
operator|.
name|length
argument_list|()
operator|-
literal|1
argument_list|)
expr_stmt|;
block|}
name|this
operator|.
name|list
operator|.
name|add
argument_list|(
name|r
argument_list|)
expr_stmt|;
block|}
return|return
operator|new
name|ByteArrayInputStream
argument_list|(
name|data
operator|.
name|getBinaryData
argument_list|()
argument_list|)
return|;
block|}
specifier|public
name|AbstractUnCompressFunction
parameter_list|(
name|XQueryContext
name|context
parameter_list|,
name|FunctionSignature
name|signature
parameter_list|)
block|{
name|super
argument_list|(
name|context
argument_list|,
name|signature
argument_list|)
expr_stmt|;
name|setCollectionParameterNubmer
argument_list|(
literal|2
argument_list|)
expr_stmt|;
block|}
specifier|protected
name|Sequence
name|evalWithCollection
parameter_list|(
name|Collection
name|collection
parameter_list|,
name|Sequence
index|[]
name|args
parameter_list|,
name|Sequence
name|contextSequence
parameter_list|)
throws|throws
name|XPathException
block|{
return|return
name|unCompress
argument_list|(
name|preEval
argument_list|(
operator|(
name|Base64Binary
operator|)
name|args
index|[
literal|0
index|]
operator|.
name|itemAt
argument_list|(
literal|0
argument_list|)
argument_list|,
name|args
index|[
literal|1
index|]
argument_list|)
argument_list|,
name|collection
argument_list|)
return|;
block|}
specifier|public
name|Sequence
name|eval
parameter_list|(
name|Sequence
index|[]
name|args
parameter_list|,
name|Sequence
name|contextSequence
parameter_list|)
throws|throws
name|XPathException
block|{
if|if
condition|(
name|args
index|[
literal|0
index|]
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
return|return
name|Sequence
operator|.
name|EMPTY_SEQUENCE
return|;
block|}
if|if
condition|(
name|args
operator|.
name|length
operator|>
name|getCollectionParameterNumber
argument_list|()
condition|)
block|{
return|return
name|super
operator|.
name|eval
argument_list|(
name|args
argument_list|,
name|contextSequence
argument_list|)
return|;
block|}
else|else
block|{
return|return
name|unCompress
argument_list|(
name|preEval
argument_list|(
operator|(
name|Base64Binary
operator|)
name|args
index|[
literal|0
index|]
operator|.
name|itemAt
argument_list|(
literal|0
argument_list|)
argument_list|,
name|args
index|[
literal|1
index|]
argument_list|)
argument_list|)
return|;
block|}
block|}
specifier|private
name|Item
name|createEntry
parameter_list|(
name|String
name|name
parameter_list|,
name|String
name|type
parameter_list|,
name|MimeType
name|mime
parameter_list|,
name|Item
name|content
parameter_list|)
throws|throws
name|XPathException
block|{
name|MemTreeBuilder
name|builder
init|=
name|context
operator|.
name|getDocumentBuilder
argument_list|()
decl_stmt|;
name|builder
operator|.
name|startDocument
argument_list|()
expr_stmt|;
name|builder
operator|.
name|startElement
argument_list|(
operator|new
name|QName
argument_list|(
literal|"entry"
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|)
argument_list|,
literal|null
argument_list|)
expr_stmt|;
name|builder
operator|.
name|addAttribute
argument_list|(
operator|new
name|QName
argument_list|(
literal|"name"
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|)
argument_list|,
name|name
argument_list|)
expr_stmt|;
name|builder
operator|.
name|addAttribute
argument_list|(
operator|new
name|QName
argument_list|(
literal|"type"
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|)
argument_list|,
name|type
argument_list|)
expr_stmt|;
if|if
condition|(
name|mime
operator|!=
literal|null
condition|)
block|{
name|builder
operator|.
name|addAttribute
argument_list|(
operator|new
name|QName
argument_list|(
literal|"mime-type"
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|)
argument_list|,
name|mime
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|content
operator|!=
literal|null
condition|)
block|{
if|if
condition|(
name|content
operator|instanceof
name|AtomicValue
condition|)
block|{
name|builder
operator|.
name|characters
argument_list|(
name|content
operator|.
name|getStringValue
argument_list|()
argument_list|)
expr_stmt|;
block|}
else|else
block|{
try|try
block|{
operator|(
operator|(
name|NodeImpl
operator|)
name|content
operator|)
operator|.
name|copyTo
argument_list|(
literal|null
argument_list|,
operator|new
name|DocumentBuilderReceiver
argument_list|(
name|builder
argument_list|)
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|SAXException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|XPathException
argument_list|(
name|this
argument_list|,
name|e
operator|.
name|getMessage
argument_list|()
argument_list|)
throw|;
block|}
block|}
block|}
name|builder
operator|.
name|endElement
argument_list|()
expr_stmt|;
return|return
operator|(
name|Item
operator|)
name|builder
operator|.
name|getDocument
argument_list|()
operator|.
name|getDocumentElement
argument_list|()
return|;
block|}
specifier|private
name|Item
name|createXMLEntry
parameter_list|(
name|ByteArrayOutputStream
name|baos
parameter_list|,
name|String
name|name
parameter_list|,
name|MimeType
name|mime
parameter_list|)
throws|throws
name|XPathException
throws|,
name|SAXException
block|{
name|Item
name|content
init|=
name|ModuleUtils
operator|.
name|streamToXML
argument_list|(
name|context
argument_list|,
operator|new
name|ByteArrayInputStream
argument_list|(
name|baos
operator|.
name|toByteArray
argument_list|()
argument_list|)
argument_list|)
decl_stmt|;
return|return
name|createEntry
argument_list|(
name|name
argument_list|,
literal|"xml"
argument_list|,
name|mime
argument_list|,
name|content
argument_list|)
return|;
block|}
specifier|private
name|Item
name|createBinaryEntry
parameter_list|(
name|ByteArrayOutputStream
name|baos
parameter_list|,
name|String
name|name
parameter_list|,
name|MimeType
name|mime
parameter_list|)
throws|throws
name|XPathException
block|{
name|Item
name|content
init|=
operator|new
name|Base64Binary
argument_list|(
name|baos
operator|.
name|toByteArray
argument_list|()
argument_list|)
decl_stmt|;
return|return
name|createEntry
argument_list|(
name|name
argument_list|,
literal|"binary"
argument_list|,
name|mime
argument_list|,
name|content
argument_list|)
return|;
block|}
specifier|protected
name|Item
name|createResourceEntry
parameter_list|(
name|InputStream
name|is
parameter_list|,
name|String
name|name
parameter_list|)
throws|throws
name|IOException
throws|,
name|XPathException
block|{
name|MimeType
name|mime
init|=
name|MimeTable
operator|.
name|getInstance
argument_list|()
operator|.
name|getContentTypeFor
argument_list|(
name|name
argument_list|)
decl_stmt|;
name|ByteArrayOutputStream
name|baos
init|=
name|baos
argument_list|(
name|is
argument_list|)
decl_stmt|;
try|try
block|{
return|return
name|createXMLEntry
argument_list|(
name|baos
argument_list|,
name|name
argument_list|,
name|mime
argument_list|)
return|;
block|}
catch|catch
parameter_list|(
name|SAXException
name|e
parameter_list|)
block|{
return|return
name|createBinaryEntry
argument_list|(
name|baos
argument_list|,
name|name
argument_list|,
name|mime
argument_list|)
return|;
block|}
block|}
specifier|protected
name|Item
name|createCollectionEntry
parameter_list|(
name|String
name|name
parameter_list|)
throws|throws
name|XPathException
block|{
return|return
name|createEntry
argument_list|(
name|name
argument_list|,
literal|"collection"
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|)
return|;
block|}
specifier|private
name|Resource
name|createXMLResource
parameter_list|(
name|ByteArrayOutputStream
name|baos
parameter_list|,
name|Collection
name|collection
parameter_list|,
name|String
name|name
parameter_list|)
throws|throws
name|XMLDBException
throws|,
name|XPathException
throws|,
name|SAXException
block|{
name|NodeValue
name|content
init|=
name|ModuleUtils
operator|.
name|streamToXML
argument_list|(
name|context
argument_list|,
operator|new
name|ByteArrayInputStream
argument_list|(
name|baos
operator|.
name|toByteArray
argument_list|()
argument_list|)
argument_list|)
decl_stmt|;
name|Resource
name|resource
init|=
name|collection
operator|.
name|createResource
argument_list|(
name|name
argument_list|,
literal|"XMLResource"
argument_list|)
decl_stmt|;
name|ContentHandler
name|handler
init|=
operator|(
operator|(
name|XMLResource
operator|)
name|resource
operator|)
operator|.
name|setContentAsSAX
argument_list|()
decl_stmt|;
name|handler
operator|.
name|startDocument
argument_list|()
expr_stmt|;
name|content
operator|.
name|toSAX
argument_list|(
name|context
operator|.
name|getBroker
argument_list|()
argument_list|,
name|handler
argument_list|,
literal|null
argument_list|)
expr_stmt|;
name|handler
operator|.
name|endDocument
argument_list|()
expr_stmt|;
return|return
name|resource
return|;
block|}
specifier|private
name|Resource
name|createBinaryResource
parameter_list|(
name|ByteArrayOutputStream
name|baos
parameter_list|,
name|Collection
name|collection
parameter_list|,
name|String
name|name
parameter_list|)
throws|throws
name|XMLDBException
block|{
name|Resource
name|resource
init|=
name|collection
operator|.
name|createResource
argument_list|(
name|name
argument_list|,
literal|"BinaryResource"
argument_list|)
decl_stmt|;
name|resource
operator|.
name|setContent
argument_list|(
name|baos
operator|.
name|toByteArray
argument_list|()
argument_list|)
expr_stmt|;
return|return
name|resource
return|;
block|}
specifier|protected
name|Resource
name|createResource
parameter_list|(
name|InputStream
name|is
parameter_list|,
name|Collection
name|collection
parameter_list|,
name|String
name|path
parameter_list|)
throws|throws
name|IOException
throws|,
name|XMLDBException
throws|,
name|XPathException
block|{
name|Resource
name|resource
init|=
literal|null
decl_stmt|;
name|File
name|file
init|=
operator|new
name|File
argument_list|(
name|path
argument_list|)
decl_stmt|;
name|String
name|name
init|=
name|file
operator|.
name|getName
argument_list|()
decl_stmt|;
name|path
operator|=
name|file
operator|.
name|getParent
argument_list|()
expr_stmt|;
name|Collection
name|target
init|=
operator|(
name|path
operator|==
literal|null
operator|)
condition|?
name|collection
else|:
name|createCollection
argument_list|(
name|collection
argument_list|,
name|path
argument_list|)
decl_stmt|;
name|MimeType
name|mime
init|=
name|MimeTable
operator|.
name|getInstance
argument_list|()
operator|.
name|getContentTypeFor
argument_list|(
name|name
argument_list|)
decl_stmt|;
name|ByteArrayOutputStream
name|baos
init|=
name|baos
argument_list|(
name|is
argument_list|)
decl_stmt|;
try|try
block|{
name|resource
operator|=
name|createXMLResource
argument_list|(
name|baos
argument_list|,
name|target
argument_list|,
name|name
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|SAXException
name|e
parameter_list|)
block|{
name|resource
operator|=
name|createBinaryResource
argument_list|(
name|baos
argument_list|,
name|target
argument_list|,
name|name
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|resource
operator|!=
literal|null
condition|)
block|{
if|if
condition|(
name|mime
operator|!=
literal|null
condition|)
block|{
operator|(
operator|(
name|EXistResource
operator|)
name|resource
operator|)
operator|.
name|setMimeType
argument_list|(
name|mime
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|target
operator|.
name|storeResource
argument_list|(
name|resource
argument_list|)
expr_stmt|;
block|}
return|return
name|resource
return|;
block|}
specifier|private
specifier|static
name|ByteArrayOutputStream
name|baos
parameter_list|(
name|InputStream
name|is
parameter_list|)
throws|throws
name|IOException
block|{
name|ByteArrayOutputStream
name|baos
init|=
operator|new
name|ByteArrayOutputStream
argument_list|()
decl_stmt|;
name|int
name|size
decl_stmt|;
name|byte
index|[]
name|b
init|=
operator|new
name|byte
index|[
literal|4096
index|]
decl_stmt|;
while|while
condition|(
operator|(
name|size
operator|=
name|is
operator|.
name|read
argument_list|(
name|b
argument_list|,
literal|0
argument_list|,
literal|4096
argument_list|)
operator|)
operator|!=
operator|-
literal|1
condition|)
block|{
name|baos
operator|.
name|write
argument_list|(
name|b
argument_list|,
literal|0
argument_list|,
name|size
argument_list|)
expr_stmt|;
block|}
name|baos
operator|.
name|flush
argument_list|()
expr_stmt|;
name|baos
operator|.
name|close
argument_list|()
expr_stmt|;
return|return
name|baos
return|;
block|}
specifier|protected
specifier|abstract
name|Sequence
name|unCompress
parameter_list|(
name|ByteArrayInputStream
name|bais
parameter_list|,
name|Collection
name|collection
parameter_list|)
throws|throws
name|XPathException
function_decl|;
specifier|protected
specifier|abstract
name|Sequence
name|unCompress
parameter_list|(
name|ByteArrayInputStream
name|bais
parameter_list|)
throws|throws
name|XPathException
function_decl|;
block|}
end_class

end_unit

