begin_unit|revision:1.0.0;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  *  eXist Open Source Native XML Database  *  Copyright (C) 2001-09 Wolfgang M. Meier  *  wolfgang@exist-db.org  *  http://exist.sourceforge.net  *    *  This program is free software; you can redistribute it and/or  *  modify it under the terms of the GNU Lesser General Public License  *  as published by the Free Software Foundation; either version 2  *  of the License, or (at your option) any later version.  *    *  This program is distributed in the hope that it will be useful,  *  but WITHOUT ANY WARRANTY; without even the implied warranty of  *  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the  *  GNU Lesser General Public License for more details.  *    *  You should have received a copy of the GNU Lesser General Public License  *  along with this program; if not, write to the Free Software  *  Foundation, Inc., 675 Mass Ave, Cambridge, MA 02139, USA.  *    *  $Id: BuiltinFunctions.java 9598 2009-07-31 05:45:57Z ixitar $  */
end_comment

begin_package
package|package
name|org
operator|.
name|exist
operator|.
name|xquery
operator|.
name|modules
operator|.
name|context
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|log4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|dom
operator|.
name|persistent
operator|.
name|QName
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|xquery
operator|.
name|Cardinality
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|xquery
operator|.
name|Dependency
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|xquery
operator|.
name|Function
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|xquery
operator|.
name|FunctionSignature
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|xquery
operator|.
name|Profiler
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|xquery
operator|.
name|XPathException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|xquery
operator|.
name|XQueryContext
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|xquery
operator|.
name|XQueryWatchDog
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|xquery
operator|.
name|value
operator|.
name|FunctionParameterSequenceType
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|xquery
operator|.
name|value
operator|.
name|FunctionReturnSequenceType
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|xquery
operator|.
name|value
operator|.
name|IntegerValue
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|xquery
operator|.
name|value
operator|.
name|Item
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|xquery
operator|.
name|value
operator|.
name|Sequence
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|xquery
operator|.
name|value
operator|.
name|SequenceType
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|xquery
operator|.
name|value
operator|.
name|Type
import|;
end_import

begin_class
specifier|public
class|class
name|ContextAttributes
extends|extends
name|Function
block|{
specifier|public
specifier|final
specifier|static
name|String
name|ATTRIBUTES_CONTEXTVAR
init|=
literal|"_eXist_xquery_context_attributes"
decl_stmt|;
specifier|protected
specifier|static
specifier|final
name|Logger
name|logger
init|=
name|Logger
operator|.
name|getLogger
argument_list|(
name|ContextAttributes
operator|.
name|class
argument_list|)
decl_stmt|;
specifier|protected
specifier|static
specifier|final
name|FunctionParameterSequenceType
name|ATTRIBUTE_NAME_PARAM
init|=
operator|new
name|FunctionParameterSequenceType
argument_list|(
literal|"name"
argument_list|,
name|Type
operator|.
name|STRING
argument_list|,
name|Cardinality
operator|.
name|EXACTLY_ONE
argument_list|,
literal|"The attribute name"
argument_list|)
decl_stmt|;
specifier|protected
specifier|static
specifier|final
name|FunctionParameterSequenceType
name|ATTRIBUTE_VALUE_PARAM
init|=
operator|new
name|FunctionParameterSequenceType
argument_list|(
literal|"value"
argument_list|,
name|Type
operator|.
name|ITEM
argument_list|,
name|Cardinality
operator|.
name|ZERO_OR_MORE
argument_list|,
literal|"The value to be stored in the context by attribute name"
argument_list|)
decl_stmt|;
specifier|protected
specifier|static
specifier|final
name|FunctionParameterSequenceType
name|XQUERY_ID_PARAM
init|=
operator|new
name|FunctionParameterSequenceType
argument_list|(
literal|"xquery-id"
argument_list|,
name|Type
operator|.
name|INTEGER
argument_list|,
name|Cardinality
operator|.
name|EXACTLY_ONE
argument_list|,
literal|"The XQuery ID"
argument_list|)
decl_stmt|;
specifier|public
specifier|final
specifier|static
name|FunctionSignature
name|signatures
index|[]
init|=
block|{
operator|new
name|FunctionSignature
argument_list|(
operator|new
name|QName
argument_list|(
literal|"get-attribute"
argument_list|,
name|ContextModule
operator|.
name|NAMESPACE_URI
argument_list|,
name|ContextModule
operator|.
name|PREFIX
argument_list|)
argument_list|,
literal|"Returns the value associated with the given name, which was stored in the XQuery"
operator|+
literal|"context. This function is useful for storing temporary information if you don't have "
operator|+
literal|"a servlet request or session, that is you're running an XQuery as a scheduled task."
argument_list|,
operator|new
name|SequenceType
index|[]
block|{
name|ATTRIBUTE_NAME_PARAM
block|}
argument_list|,
operator|new
name|FunctionReturnSequenceType
argument_list|(
name|Type
operator|.
name|ITEM
argument_list|,
name|Cardinality
operator|.
name|ZERO_OR_MORE
argument_list|,
literal|"The attribute value"
argument_list|)
argument_list|)
block|,
operator|new
name|FunctionSignature
argument_list|(
operator|new
name|QName
argument_list|(
literal|"set-attribute"
argument_list|,
name|ContextModule
operator|.
name|NAMESPACE_URI
argument_list|,
name|ContextModule
operator|.
name|PREFIX
argument_list|)
argument_list|,
literal|"Set the value of an XQuery context attribute with the specified name "
operator|+
literal|"This function is useful for storing temporary information if you don't have "
operator|+
literal|"a servlet request or session, that is you're running an XQuery as a scheduled task."
argument_list|,
operator|new
name|SequenceType
index|[]
block|{
name|ATTRIBUTE_NAME_PARAM
block|,
name|ATTRIBUTE_VALUE_PARAM
block|}
argument_list|,
operator|new
name|FunctionReturnSequenceType
argument_list|(
name|Type
operator|.
name|ITEM
argument_list|,
name|Cardinality
operator|.
name|EMPTY
argument_list|,
literal|"Returns an empty sequence"
argument_list|)
argument_list|)
block|,
operator|new
name|FunctionSignature
argument_list|(
operator|new
name|QName
argument_list|(
literal|"get-attribute"
argument_list|,
name|ContextModule
operator|.
name|NAMESPACE_URI
argument_list|,
name|ContextModule
operator|.
name|PREFIX
argument_list|)
argument_list|,
literal|"Returns the value associated with the given name, which was stored in the XQuery"
operator|+
literal|"context for the XQuery with the provided id. (dba role only). This function can be sued for simple inter-XQuery communication."
argument_list|,
operator|new
name|SequenceType
index|[]
block|{
name|ATTRIBUTE_NAME_PARAM
block|,
name|XQUERY_ID_PARAM
block|}
argument_list|,
operator|new
name|FunctionReturnSequenceType
argument_list|(
name|Type
operator|.
name|ITEM
argument_list|,
name|Cardinality
operator|.
name|ZERO_OR_MORE
argument_list|,
literal|"The attribute value"
argument_list|)
argument_list|)
block|,
operator|new
name|FunctionSignature
argument_list|(
operator|new
name|QName
argument_list|(
literal|"set-attribute"
argument_list|,
name|ContextModule
operator|.
name|NAMESPACE_URI
argument_list|,
name|ContextModule
operator|.
name|PREFIX
argument_list|)
argument_list|,
literal|"Set the value of an XQuery context attribute with the specified name for the XQuery with the provided id. (dba role only)"
operator|+
literal|"This function can be used for simple inter-XQuery communication."
argument_list|,
operator|new
name|SequenceType
index|[]
block|{
name|ATTRIBUTE_NAME_PARAM
block|,
name|ATTRIBUTE_VALUE_PARAM
block|,
name|XQUERY_ID_PARAM
block|}
argument_list|,
operator|new
name|FunctionReturnSequenceType
argument_list|(
name|Type
operator|.
name|ITEM
argument_list|,
name|Cardinality
operator|.
name|EMPTY
argument_list|,
literal|"Returns an empty sequence"
argument_list|)
argument_list|)
block|}
decl_stmt|;
specifier|public
name|ContextAttributes
parameter_list|(
name|XQueryContext
name|context
parameter_list|,
name|FunctionSignature
name|signature
parameter_list|)
block|{
name|super
argument_list|(
name|context
argument_list|,
name|signature
argument_list|)
expr_stmt|;
block|}
comment|/* (non-Javadoc) 	 * @see org.exist.xquery.Expression#eval(org.exist.dom.persistent.DocumentSet, org.exist.xquery.value.Sequence, org.exist.xquery.value.Item) 	 */
specifier|public
name|Sequence
name|eval
parameter_list|(
name|Sequence
name|contextSequence
parameter_list|,
name|Item
name|contextItem
parameter_list|)
throws|throws
name|XPathException
block|{
name|Sequence
name|ret
init|=
name|Sequence
operator|.
name|EMPTY_SEQUENCE
decl_stmt|;
if|if
condition|(
name|context
operator|.
name|getProfiler
argument_list|()
operator|.
name|isEnabled
argument_list|()
condition|)
block|{
name|context
operator|.
name|getProfiler
argument_list|()
operator|.
name|start
argument_list|(
name|this
argument_list|)
expr_stmt|;
name|context
operator|.
name|getProfiler
argument_list|()
operator|.
name|message
argument_list|(
name|this
argument_list|,
name|Profiler
operator|.
name|DEPENDENCIES
argument_list|,
literal|"DEPENDENCIES"
argument_list|,
name|Dependency
operator|.
name|getDependenciesName
argument_list|(
name|this
operator|.
name|getDependencies
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
if|if
condition|(
name|contextSequence
operator|!=
literal|null
condition|)
block|{
name|context
operator|.
name|getProfiler
argument_list|()
operator|.
name|message
argument_list|(
name|this
argument_list|,
name|Profiler
operator|.
name|START_SEQUENCES
argument_list|,
literal|"CONTEXT SEQUENCE"
argument_list|,
name|contextSequence
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|contextItem
operator|!=
literal|null
condition|)
block|{
name|context
operator|.
name|getProfiler
argument_list|()
operator|.
name|message
argument_list|(
name|this
argument_list|,
name|Profiler
operator|.
name|START_SEQUENCES
argument_list|,
literal|"CONTEXT ITEM"
argument_list|,
name|contextItem
operator|.
name|toSequence
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
comment|// get attribute name parameter
name|String
name|attribName
init|=
name|getArgument
argument_list|(
literal|0
argument_list|)
operator|.
name|eval
argument_list|(
name|contextSequence
argument_list|,
name|contextItem
argument_list|)
operator|.
name|getStringValue
argument_list|()
decl_stmt|;
if|if
condition|(
name|isCalledAs
argument_list|(
literal|"get-attribute"
argument_list|)
condition|)
block|{
if|if
condition|(
name|getArgumentCount
argument_list|()
operator|>
literal|1
condition|)
block|{
name|long
name|xqueryID
init|=
operator|(
operator|(
name|IntegerValue
operator|)
operator|(
name|getArgument
argument_list|(
literal|1
argument_list|)
operator|.
name|eval
argument_list|(
name|contextSequence
argument_list|,
name|contextItem
argument_list|)
operator|.
name|itemAt
argument_list|(
literal|0
argument_list|)
operator|)
operator|)
operator|.
name|getLong
argument_list|()
decl_stmt|;
name|ret
operator|=
name|retrieveAttribute
argument_list|(
name|getForeignContext
argument_list|(
name|xqueryID
argument_list|)
argument_list|,
name|attribName
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|ret
operator|=
name|retrieveAttribute
argument_list|(
name|context
argument_list|,
name|attribName
argument_list|)
expr_stmt|;
block|}
block|}
else|else
block|{
name|Sequence
name|attribValue
init|=
name|getArgument
argument_list|(
literal|1
argument_list|)
operator|.
name|eval
argument_list|(
name|contextSequence
argument_list|,
name|contextItem
argument_list|)
decl_stmt|;
if|if
condition|(
name|getArgumentCount
argument_list|()
operator|>
literal|2
condition|)
block|{
name|long
name|xqueryID
init|=
operator|(
operator|(
name|IntegerValue
operator|)
operator|(
name|getArgument
argument_list|(
literal|2
argument_list|)
operator|.
name|eval
argument_list|(
name|contextSequence
argument_list|,
name|contextItem
argument_list|)
operator|.
name|itemAt
argument_list|(
literal|0
argument_list|)
operator|)
operator|)
operator|.
name|getLong
argument_list|()
decl_stmt|;
name|ret
operator|=
name|storeAttribute
argument_list|(
name|getForeignContext
argument_list|(
name|xqueryID
argument_list|)
argument_list|,
name|attribName
argument_list|,
name|attribValue
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|ret
operator|=
name|storeAttribute
argument_list|(
name|context
argument_list|,
name|attribName
argument_list|,
name|attribValue
argument_list|)
expr_stmt|;
block|}
block|}
return|return
operator|(
name|ret
operator|)
return|;
block|}
comment|//***************************************************************************
comment|//*
comment|//*    Foreign Context Methods
comment|//*
comment|//***************************************************************************/
specifier|private
name|XQueryContext
name|getForeignContext
parameter_list|(
name|long
name|id
parameter_list|)
throws|throws
name|XPathException
block|{
name|XQueryContext
name|foreignContext
init|=
literal|null
decl_stmt|;
if|if
condition|(
operator|!
name|context
operator|.
name|getUser
argument_list|()
operator|.
name|hasDbaRole
argument_list|()
condition|)
block|{
throw|throw
operator|(
operator|new
name|XPathException
argument_list|(
name|this
argument_list|,
literal|"Permission denied, calling user '"
operator|+
name|context
operator|.
name|getUser
argument_list|()
operator|.
name|getName
argument_list|()
operator|+
literal|"' must be a DBA to access foreign contexts"
argument_list|)
operator|)
throw|;
block|}
if|if
condition|(
name|id
operator|!=
literal|0
condition|)
block|{
name|XQueryWatchDog
name|watchdogs
index|[]
init|=
name|getContext
argument_list|()
operator|.
name|getBroker
argument_list|()
operator|.
name|getBrokerPool
argument_list|()
operator|.
name|getProcessMonitor
argument_list|()
operator|.
name|getRunningXQueries
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|watchdogs
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
name|XQueryContext
name|ctx
init|=
name|watchdogs
index|[
name|i
index|]
operator|.
name|getContext
argument_list|()
decl_stmt|;
if|if
condition|(
name|id
operator|==
name|ctx
operator|.
name|hashCode
argument_list|()
condition|)
block|{
if|if
condition|(
operator|!
name|watchdogs
index|[
name|i
index|]
operator|.
name|isTerminating
argument_list|()
condition|)
block|{
name|foreignContext
operator|=
name|ctx
expr_stmt|;
block|}
break|break;
block|}
block|}
block|}
if|if
condition|(
name|foreignContext
operator|==
literal|null
condition|)
block|{
throw|throw
operator|(
operator|new
name|XPathException
argument_list|(
name|this
argument_list|,
literal|"Foreign XQuery with id: "
operator|+
name|id
operator|+
literal|" not found or is terminating"
argument_list|)
operator|)
throw|;
block|}
return|return
operator|(
name|foreignContext
operator|)
return|;
block|}
comment|//***************************************************************************
comment|//*
comment|//*    Context Attribute Methods
comment|//*
comment|//***************************************************************************/
comment|/** 	 * Retrieves a previously stored Attribute from the Context of an XQuery 	 *  	 * @param context 			The Context of the XQuery containing the attribute 	 * @param key	 			The key of the attribute to retrieve from the Context of the XQuery 	 */
specifier|private
name|Sequence
name|retrieveAttribute
parameter_list|(
name|XQueryContext
name|context
parameter_list|,
name|String
name|key
parameter_list|)
block|{
name|Sequence
name|attribute
init|=
name|Sequence
operator|.
name|EMPTY_SEQUENCE
decl_stmt|;
synchronized|synchronized
init|(
name|context
init|)
block|{
comment|// get the existing attributes map from the context
name|HashMap
argument_list|<
name|String
argument_list|,
name|Sequence
argument_list|>
name|attributes
init|=
operator|(
name|HashMap
argument_list|<
name|String
argument_list|,
name|Sequence
argument_list|>
operator|)
name|context
operator|.
name|getXQueryContextVar
argument_list|(
name|ATTRIBUTES_CONTEXTVAR
argument_list|)
decl_stmt|;
if|if
condition|(
name|attributes
operator|!=
literal|null
condition|)
block|{
name|Sequence
name|value
init|=
name|attributes
operator|.
name|get
argument_list|(
name|key
argument_list|)
decl_stmt|;
if|if
condition|(
name|value
operator|!=
literal|null
condition|)
block|{
name|attribute
operator|=
name|value
expr_stmt|;
block|}
block|}
block|}
return|return
operator|(
operator|(
name|Sequence
operator|)
name|attribute
operator|)
return|;
block|}
comment|/** 	 * Stores an attribute in the Context of an XQuery 	 *  	 * @param context 			The Context of the XQuery to store the attribute in 	 * @param key	 			The key of the attribute to store in the Context of the XQuery 	 * @param attribute 		The attribute to store 	 *  	 * @return empty sequence 	 */
specifier|private
name|Sequence
name|storeAttribute
parameter_list|(
name|XQueryContext
name|context
parameter_list|,
name|String
name|key
parameter_list|,
name|Sequence
name|attribute
parameter_list|)
block|{
synchronized|synchronized
init|(
name|context
init|)
block|{
comment|// get the existing attributes map from the context
name|HashMap
argument_list|<
name|String
argument_list|,
name|Sequence
argument_list|>
name|attributes
init|=
operator|(
name|HashMap
argument_list|<
name|String
argument_list|,
name|Sequence
argument_list|>
operator|)
name|context
operator|.
name|getXQueryContextVar
argument_list|(
name|ATTRIBUTES_CONTEXTVAR
argument_list|)
decl_stmt|;
if|if
condition|(
name|attributes
operator|==
literal|null
condition|)
block|{
comment|// if there is no attributes map, create a new one
name|attributes
operator|=
operator|new
name|HashMap
argument_list|<
name|String
argument_list|,
name|Sequence
argument_list|>
argument_list|()
expr_stmt|;
block|}
comment|// place the attribute in the attributes map
name|attributes
operator|.
name|put
argument_list|(
name|key
argument_list|,
name|attribute
argument_list|)
expr_stmt|;
comment|// store the updated sessions map back in the context
name|context
operator|.
name|setXQueryContextVar
argument_list|(
name|ATTRIBUTES_CONTEXTVAR
argument_list|,
name|attributes
argument_list|)
expr_stmt|;
block|}
return|return
operator|(
name|Sequence
operator|.
name|EMPTY_SEQUENCE
operator|)
return|;
block|}
block|}
end_class

end_unit

