begin_unit|revision:1.0.0;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  *  eXist SQL Module Extension  *  Copyright (C) 2006-2009 Adam Retter<adam@exist-db.org>  *  www.adamretter.co.uk  *    *  This program is free software; you can redistribute it and/or  *  modify it under the terms of the GNU Lesser General Public License  *  as published by the Free Software Foundation; either version 2  *  of the License, or (at your option) any later version.  *    *  This program is distributed in the hope that it will be useful,  *  but WITHOUT ANY WARRANTY; without even the implied warranty of  *  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the  *  GNU Lesser General Public License for more details.  *    *  You should have received a copy of the GNU Lesser General Public License  *  along with this program; if not, write to the Free Software  *  Foundation, Inc., 675 Mass Ave, Cambridge, MA 02139, USA.  *    *  $Id$  */
end_comment

begin_package
package|package
name|org
operator|.
name|exist
operator|.
name|xquery
operator|.
name|modules
operator|.
name|sql
package|;
end_package

begin_import
import|import
name|java
operator|.
name|sql
operator|.
name|Connection
import|;
end_import

begin_import
import|import
name|java
operator|.
name|sql
operator|.
name|SQLException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Iterator
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Set
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|log4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|xquery
operator|.
name|AbstractInternalModule
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|xquery
operator|.
name|FunctionDef
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|xquery
operator|.
name|XQueryContext
import|;
end_import

begin_comment
comment|/**  * eXist SQL Module Extension  *   * An extension module for the eXist Native XML Database that allows queries  * against SQL Databases, returning an XML representation of the result set.  *   * @author Adam Retter<adam@exist-db.org>  * @serial 2008-05-19  * @version 1.1  *   * @see org.exist.xquery.AbstractInternalModule#AbstractInternalModule(org.exist.xquery.FunctionDef[])  */
end_comment

begin_class
specifier|public
class|class
name|SQLModule
extends|extends
name|AbstractInternalModule
block|{
specifier|protected
specifier|final
specifier|static
name|Logger
name|LOG
init|=
name|Logger
operator|.
name|getLogger
argument_list|(
name|SQLModule
operator|.
name|class
argument_list|)
decl_stmt|;
specifier|public
specifier|final
specifier|static
name|String
name|NAMESPACE_URI
init|=
literal|"http://exist-db.org/xquery/sql"
decl_stmt|;
specifier|public
specifier|final
specifier|static
name|String
name|PREFIX
init|=
literal|"sql"
decl_stmt|;
specifier|public
specifier|final
specifier|static
name|String
name|INCLUSION_DATE
init|=
literal|"2006-09-25"
decl_stmt|;
specifier|public
specifier|final
specifier|static
name|String
name|RELEASED_IN_VERSION
init|=
literal|"eXist-1.2"
decl_stmt|;
specifier|private
specifier|final
specifier|static
name|FunctionDef
index|[]
name|functions
init|=
block|{
operator|new
name|FunctionDef
argument_list|(
name|GetConnectionFunction
operator|.
name|signatures
index|[
literal|0
index|]
argument_list|,
name|GetConnectionFunction
operator|.
name|class
argument_list|)
block|,
operator|new
name|FunctionDef
argument_list|(
name|GetConnectionFunction
operator|.
name|signatures
index|[
literal|1
index|]
argument_list|,
name|GetConnectionFunction
operator|.
name|class
argument_list|)
block|,
operator|new
name|FunctionDef
argument_list|(
name|GetConnectionFunction
operator|.
name|signatures
index|[
literal|2
index|]
argument_list|,
name|GetConnectionFunction
operator|.
name|class
argument_list|)
block|,
operator|new
name|FunctionDef
argument_list|(
name|GetJNDIConnectionFunction
operator|.
name|signatures
index|[
literal|0
index|]
argument_list|,
name|GetJNDIConnectionFunction
operator|.
name|class
argument_list|)
block|,
operator|new
name|FunctionDef
argument_list|(
name|GetJNDIConnectionFunction
operator|.
name|signatures
index|[
literal|1
index|]
argument_list|,
name|GetJNDIConnectionFunction
operator|.
name|class
argument_list|)
block|,
operator|new
name|FunctionDef
argument_list|(
name|ExecuteFunction
operator|.
name|signatures
index|[
literal|0
index|]
argument_list|,
name|ExecuteFunction
operator|.
name|class
argument_list|)
block|,  	}
decl_stmt|;
specifier|private
specifier|static
name|long
name|currentConnectionUID
init|=
name|System
operator|.
name|currentTimeMillis
argument_list|()
decl_stmt|;
specifier|public
specifier|final
specifier|static
name|String
name|CONNECTIONS_CONTEXTVAR
init|=
literal|"_eXist_sql_connections"
decl_stmt|;
specifier|public
name|SQLModule
parameter_list|()
block|{
name|super
argument_list|(
name|functions
argument_list|)
expr_stmt|;
block|}
specifier|public
name|String
name|getNamespaceURI
parameter_list|()
block|{
return|return
name|NAMESPACE_URI
return|;
block|}
specifier|public
name|String
name|getDefaultPrefix
parameter_list|()
block|{
return|return
name|PREFIX
return|;
block|}
specifier|public
name|String
name|getDescription
parameter_list|()
block|{
return|return
literal|"A module for performing SQL queries against Databases, returning XML representations of the result sets."
return|;
block|}
specifier|public
name|String
name|getReleaseVersion
parameter_list|()
block|{
return|return
name|RELEASED_IN_VERSION
return|;
block|}
comment|/** 	 * Retrieves a previously stored Connection from the Context of an XQuery 	 *  	 * @param context 	 *            The Context of the XQuery containing the Connection 	 * @param connectionUID 	 *            The UID of the Connection to retrieve from the Context of the 	 *            XQuery 	 */
specifier|public
specifier|final
specifier|static
name|Connection
name|retrieveConnection
parameter_list|(
name|XQueryContext
name|context
parameter_list|,
name|long
name|connectionUID
parameter_list|)
block|{
comment|// get the existing connections map from the context
name|HashMap
name|connections
init|=
operator|(
name|HashMap
operator|)
name|context
operator|.
name|getXQueryContextVar
argument_list|(
name|SQLModule
operator|.
name|CONNECTIONS_CONTEXTVAR
argument_list|)
decl_stmt|;
if|if
condition|(
name|connections
operator|==
literal|null
condition|)
block|{
return|return
literal|null
return|;
block|}
comment|// get the connection
return|return
operator|(
name|Connection
operator|)
name|connections
operator|.
name|get
argument_list|(
operator|new
name|Long
argument_list|(
name|connectionUID
argument_list|)
argument_list|)
return|;
block|}
comment|/** 	 * Stores a Connection in the Context of an XQuery 	 *  	 * @param context 	 *            The Context of the XQuery to store the Connection in 	 * @param con 	 *            The connection to store 	 *  	 * @return A unique ID representing the connection 	 */
specifier|public
specifier|final
specifier|static
specifier|synchronized
name|long
name|storeConnection
parameter_list|(
name|XQueryContext
name|context
parameter_list|,
name|Connection
name|con
parameter_list|)
block|{
comment|// get the existing connections map from the context
name|HashMap
name|connections
init|=
operator|(
name|HashMap
operator|)
name|context
operator|.
name|getXQueryContextVar
argument_list|(
name|SQLModule
operator|.
name|CONNECTIONS_CONTEXTVAR
argument_list|)
decl_stmt|;
if|if
condition|(
name|connections
operator|==
literal|null
condition|)
block|{
comment|// if there is no connections map, create a new one
name|connections
operator|=
operator|new
name|HashMap
argument_list|()
expr_stmt|;
block|}
comment|// get an id for the connection
name|long
name|conID
init|=
name|getUID
argument_list|()
decl_stmt|;
comment|// place the connection in the connections map
name|connections
operator|.
name|put
argument_list|(
operator|new
name|Long
argument_list|(
name|conID
argument_list|)
argument_list|,
name|con
argument_list|)
expr_stmt|;
comment|// store the updated connections map back in the context
name|context
operator|.
name|setXQueryContextVar
argument_list|(
name|SQLModule
operator|.
name|CONNECTIONS_CONTEXTVAR
argument_list|,
name|connections
argument_list|)
expr_stmt|;
return|return
name|conID
return|;
block|}
comment|/** 	 * Closes all the open DB connections for the specified XQueryContext 	 *  	 * @param xqueryContext 	 *            The context to close JDBC connections for 	 */
specifier|private
specifier|final
specifier|static
name|void
name|closeAllConnections
parameter_list|(
name|XQueryContext
name|xqueryContext
parameter_list|)
block|{
comment|// get the existing connections map from the context
name|HashMap
name|connections
init|=
operator|(
name|HashMap
operator|)
name|xqueryContext
operator|.
name|getXQueryContextVar
argument_list|(
name|SQLModule
operator|.
name|CONNECTIONS_CONTEXTVAR
argument_list|)
decl_stmt|;
if|if
condition|(
name|connections
operator|!=
literal|null
condition|)
block|{
comment|// iterate over each connection
name|Set
name|keys
init|=
name|connections
operator|.
name|keySet
argument_list|()
decl_stmt|;
for|for
control|(
name|Iterator
name|itKeys
init|=
name|keys
operator|.
name|iterator
argument_list|()
init|;
name|itKeys
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
comment|// get the connection
name|Long
name|conID
init|=
operator|(
name|Long
operator|)
name|itKeys
operator|.
name|next
argument_list|()
decl_stmt|;
name|Connection
name|con
init|=
operator|(
name|Connection
operator|)
name|connections
operator|.
name|get
argument_list|(
name|conID
argument_list|)
decl_stmt|;
try|try
block|{
comment|// close the connection
name|con
operator|.
name|close
argument_list|()
expr_stmt|;
comment|// remove it from the connections map
name|connections
operator|.
name|remove
argument_list|(
name|conID
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|SQLException
name|se
parameter_list|)
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"Unable to close JDBC connection"
argument_list|,
name|se
argument_list|)
expr_stmt|;
block|}
block|}
comment|// update the context
name|xqueryContext
operator|.
name|setXQueryContextVar
argument_list|(
name|SQLModule
operator|.
name|CONNECTIONS_CONTEXTVAR
argument_list|,
name|connections
argument_list|)
expr_stmt|;
block|}
block|}
comment|/** 	 * Returns a Unique ID based on the System Time 	 *  	 * @return The Unique ID 	 */
specifier|private
specifier|static
specifier|synchronized
name|long
name|getUID
parameter_list|()
block|{
return|return
name|currentConnectionUID
operator|++
return|;
block|}
comment|/** 	 * Resets the Module Context and closes any DB connections for the 	 * XQueryContext 	 *  	 * @param xqueryContext 	 *            The XQueryContext 	 */
specifier|public
name|void
name|reset
parameter_list|(
name|XQueryContext
name|xqueryContext
parameter_list|)
block|{
comment|// reset the module context
name|super
operator|.
name|reset
argument_list|(
name|xqueryContext
argument_list|)
expr_stmt|;
comment|// close any open connections
name|closeAllConnections
argument_list|(
name|xqueryContext
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

