begin_unit|revision:1.0.0;language:Java;cregit-version:0.0.1
begin_package
package|package
name|org
operator|.
name|exist
operator|.
name|xquery
operator|.
name|modules
operator|.
name|counter
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|logging
operator|.
name|log4j
operator|.
name|LogManager
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|logging
operator|.
name|log4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|EXistException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|dom
operator|.
name|QName
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|storage
operator|.
name|BrokerPool
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|xquery
operator|.
name|BasicFunction
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|xquery
operator|.
name|Cardinality
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|xquery
operator|.
name|FunctionSignature
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|xquery
operator|.
name|XPathException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|xquery
operator|.
name|XQueryContext
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|xquery
operator|.
name|value
operator|.
name|BooleanValue
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|xquery
operator|.
name|value
operator|.
name|FunctionParameterSequenceType
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|xquery
operator|.
name|value
operator|.
name|FunctionReturnSequenceType
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|xquery
operator|.
name|value
operator|.
name|IntegerValue
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|xquery
operator|.
name|value
operator|.
name|Sequence
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|xquery
operator|.
name|value
operator|.
name|SequenceType
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|xquery
operator|.
name|value
operator|.
name|Type
import|;
end_import

begin_comment
comment|/**  * @author Jasper Linthorst (jasper.linthorst@gmail.com)  *  */
end_comment

begin_class
specifier|public
class|class
name|CounterFunctions
extends|extends
name|BasicFunction
block|{
specifier|private
name|Counters
name|counters
init|=
literal|null
decl_stmt|;
specifier|protected
specifier|static
specifier|final
name|Logger
name|logger
init|=
name|LogManager
operator|.
name|getLogger
argument_list|(
name|CounterFunctions
operator|.
name|class
argument_list|)
decl_stmt|;
specifier|public
specifier|final
specifier|static
name|FunctionSignature
name|createCounter
init|=
operator|new
name|FunctionSignature
argument_list|(
operator|new
name|QName
argument_list|(
literal|"create"
argument_list|,
name|CounterModule
operator|.
name|NAMESPACE_URI
argument_list|,
name|CounterModule
operator|.
name|PREFIX
argument_list|)
argument_list|,
literal|"Create a unique counter named $counter-name."
argument_list|,
operator|new
name|SequenceType
index|[]
block|{
operator|new
name|FunctionParameterSequenceType
argument_list|(
literal|"counter-name"
argument_list|,
name|Type
operator|.
name|ITEM
argument_list|,
name|Cardinality
operator|.
name|EXACTLY_ONE
argument_list|,
literal|"Name of the counter."
argument_list|)
block|}
argument_list|,
operator|new
name|FunctionReturnSequenceType
argument_list|(
name|Type
operator|.
name|LONG
argument_list|,
name|Cardinality
operator|.
name|ZERO_OR_ONE
argument_list|,
literal|"the value of the newly created counter."
argument_list|)
argument_list|)
decl_stmt|;
specifier|public
specifier|final
specifier|static
name|FunctionSignature
name|createCounterAndInit
init|=
operator|new
name|FunctionSignature
argument_list|(
operator|new
name|QName
argument_list|(
literal|"create"
argument_list|,
name|CounterModule
operator|.
name|NAMESPACE_URI
argument_list|,
name|CounterModule
operator|.
name|PREFIX
argument_list|)
argument_list|,
literal|"Create a unique counter named $counter-name and initialize it with value $init-value."
argument_list|,
operator|new
name|SequenceType
index|[]
block|{
operator|new
name|FunctionParameterSequenceType
argument_list|(
literal|"counter-name"
argument_list|,
name|Type
operator|.
name|ITEM
argument_list|,
name|Cardinality
operator|.
name|EXACTLY_ONE
argument_list|,
literal|"Name of the counter."
argument_list|)
block|,
operator|new
name|FunctionParameterSequenceType
argument_list|(
literal|"init-value"
argument_list|,
name|Type
operator|.
name|LONG
argument_list|,
name|Cardinality
operator|.
name|EXACTLY_ONE
argument_list|,
literal|"The initial value of the counter."
argument_list|)
block|}
argument_list|,
operator|new
name|FunctionReturnSequenceType
argument_list|(
name|Type
operator|.
name|LONG
argument_list|,
name|Cardinality
operator|.
name|ZERO_OR_ONE
argument_list|,
literal|"the value of the newly created counter."
argument_list|)
argument_list|)
decl_stmt|;
specifier|public
specifier|final
specifier|static
name|FunctionSignature
name|nextValue
init|=
operator|new
name|FunctionSignature
argument_list|(
operator|new
name|QName
argument_list|(
literal|"next-value"
argument_list|,
name|CounterModule
operator|.
name|NAMESPACE_URI
argument_list|,
name|CounterModule
operator|.
name|PREFIX
argument_list|)
argument_list|,
literal|"Increment the counter $counter-name and return its new value."
argument_list|,
operator|new
name|SequenceType
index|[]
block|{
operator|new
name|FunctionParameterSequenceType
argument_list|(
literal|"counter-name"
argument_list|,
name|Type
operator|.
name|ITEM
argument_list|,
name|Cardinality
operator|.
name|EXACTLY_ONE
argument_list|,
literal|"Name of the counter."
argument_list|)
block|}
argument_list|,
operator|new
name|FunctionReturnSequenceType
argument_list|(
name|Type
operator|.
name|LONG
argument_list|,
name|Cardinality
operator|.
name|ZERO_OR_ONE
argument_list|,
literal|"the new value of the specified counter,"
operator|+
literal|" or -1 if the counter does not exist."
argument_list|)
argument_list|)
decl_stmt|;
specifier|public
specifier|final
specifier|static
name|FunctionSignature
name|destroyCounter
init|=
operator|new
name|FunctionSignature
argument_list|(
operator|new
name|QName
argument_list|(
literal|"destroy"
argument_list|,
name|CounterModule
operator|.
name|NAMESPACE_URI
argument_list|,
name|CounterModule
operator|.
name|PREFIX
argument_list|)
argument_list|,
literal|"Destroy the counter named $counter-name."
argument_list|,
operator|new
name|SequenceType
index|[]
block|{
operator|new
name|FunctionParameterSequenceType
argument_list|(
literal|"counter-name"
argument_list|,
name|Type
operator|.
name|ITEM
argument_list|,
name|Cardinality
operator|.
name|EXACTLY_ONE
argument_list|,
literal|"Name of the counter."
argument_list|)
block|}
argument_list|,
operator|new
name|FunctionReturnSequenceType
argument_list|(
name|Type
operator|.
name|BOOLEAN
argument_list|,
name|Cardinality
operator|.
name|ZERO_OR_ONE
argument_list|,
literal|"boolean value true() if removal as successful, otherwise return value false()."
argument_list|)
argument_list|)
decl_stmt|;
specifier|public
name|CounterFunctions
parameter_list|(
name|XQueryContext
name|context
parameter_list|,
name|FunctionSignature
name|signature
parameter_list|)
block|{
name|super
argument_list|(
name|context
argument_list|,
name|signature
argument_list|)
expr_stmt|;
comment|// Setup counters
name|String
name|counterDir
init|=
operator|(
name|String
operator|)
name|context
operator|.
name|getBroker
argument_list|()
operator|.
name|getConfiguration
argument_list|()
operator|.
name|getProperty
argument_list|(
name|BrokerPool
operator|.
name|PROPERTY_DATA_DIR
argument_list|)
decl_stmt|;
name|logger
operator|.
name|debug
argument_list|(
literal|"Counters directory: "
operator|+
name|counterDir
argument_list|)
expr_stmt|;
comment|// Get reference to counters object
try|try
block|{
if|if
condition|(
name|counters
operator|==
literal|null
condition|)
block|{
name|counters
operator|=
name|Counters
operator|.
name|getInstance
argument_list|(
name|counterDir
argument_list|)
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
name|EXistException
name|ex
parameter_list|)
block|{
name|logger
operator|.
name|error
argument_list|(
literal|"Unable to initialize counters. "
operator|+
name|ex
operator|.
name|getMessage
argument_list|()
argument_list|,
name|ex
argument_list|)
expr_stmt|;
block|}
block|}
comment|/* (non-Javadoc)      * @see org.exist.xquery.BasicFunction#eval(org.exist.xquery.value.Sequence[], org.exist.xquery.value.Sequence)      */
specifier|public
name|Sequence
name|eval
parameter_list|(
name|Sequence
index|[]
name|args
parameter_list|,
name|Sequence
name|contextSequence
parameter_list|)
throws|throws
name|XPathException
block|{
comment|// Precondition check
if|if
condition|(
name|counters
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|XPathException
argument_list|(
literal|"Counters are not initialized."
argument_list|)
throw|;
block|}
name|String
name|counterName
init|=
name|args
index|[
literal|0
index|]
operator|.
name|getStringValue
argument_list|()
decl_stmt|;
if|if
condition|(
name|getSignature
argument_list|()
operator|.
name|equals
argument_list|(
name|createCounter
argument_list|)
condition|)
block|{
try|try
block|{
if|if
condition|(
name|counterName
operator|.
name|contains
argument_list|(
name|Counters
operator|.
name|DELIMITER
argument_list|)
condition|)
block|{
throw|throw
operator|new
name|EXistException
argument_list|(
literal|"Invalid name for counter, character '"
operator|+
name|Counters
operator|.
name|DELIMITER
operator|+
literal|"' is not allowed."
argument_list|)
throw|;
block|}
else|else
block|{
return|return
operator|new
name|IntegerValue
argument_list|(
name|counters
operator|.
name|createCounter
argument_list|(
name|counterName
argument_list|)
argument_list|,
name|Type
operator|.
name|LONG
argument_list|)
return|;
block|}
block|}
catch|catch
parameter_list|(
name|EXistException
name|e
parameter_list|)
block|{
name|logger
operator|.
name|error
argument_list|(
name|e
operator|.
name|getMessage
argument_list|()
argument_list|)
expr_stmt|;
return|return
name|Sequence
operator|.
name|EMPTY_SEQUENCE
return|;
block|}
block|}
if|else if
condition|(
name|getSignature
argument_list|()
operator|.
name|equals
argument_list|(
name|createCounterAndInit
argument_list|)
condition|)
block|{
try|try
block|{
name|Long
name|initValue
init|=
name|Long
operator|.
name|parseLong
argument_list|(
name|args
index|[
literal|1
index|]
operator|.
name|getStringValue
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|counterName
operator|.
name|contains
argument_list|(
name|Counters
operator|.
name|DELIMITER
argument_list|)
condition|)
block|{
throw|throw
operator|new
name|EXistException
argument_list|(
literal|"Invalid name for counter, character '"
operator|+
name|Counters
operator|.
name|DELIMITER
operator|+
literal|"' is not allowed."
argument_list|)
throw|;
block|}
else|else
block|{
return|return
operator|new
name|IntegerValue
argument_list|(
name|counters
operator|.
name|createCounter
argument_list|(
name|counterName
argument_list|,
name|initValue
argument_list|)
argument_list|,
name|Type
operator|.
name|LONG
argument_list|)
return|;
block|}
block|}
catch|catch
parameter_list|(
name|EXistException
name|e
parameter_list|)
block|{
name|logger
operator|.
name|error
argument_list|(
name|e
operator|.
name|getMessage
argument_list|()
argument_list|)
expr_stmt|;
return|return
name|Sequence
operator|.
name|EMPTY_SEQUENCE
return|;
block|}
block|}
else|else
block|{
try|try
block|{
if|if
condition|(
name|getSignature
argument_list|()
operator|.
name|equals
argument_list|(
name|destroyCounter
argument_list|)
condition|)
block|{
return|return
operator|new
name|BooleanValue
argument_list|(
name|counters
operator|.
name|destroyCounter
argument_list|(
name|counterName
argument_list|)
argument_list|)
return|;
block|}
if|else if
condition|(
name|getSignature
argument_list|()
operator|.
name|equals
argument_list|(
name|nextValue
argument_list|)
condition|)
block|{
return|return
operator|new
name|IntegerValue
argument_list|(
name|counters
operator|.
name|nextValue
argument_list|(
name|counterName
argument_list|)
argument_list|,
name|Type
operator|.
name|LONG
argument_list|)
return|;
block|}
else|else
block|{
return|return
name|Sequence
operator|.
name|EMPTY_SEQUENCE
return|;
block|}
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|logger
operator|.
name|error
argument_list|(
name|e
operator|.
name|getMessage
argument_list|()
argument_list|,
name|e
argument_list|)
expr_stmt|;
return|return
name|Sequence
operator|.
name|EMPTY_SEQUENCE
return|;
block|}
block|}
block|}
block|}
end_class

end_unit

