begin_unit|revision:1.0.0;language:Java;cregit-version:0.0.1
begin_package
package|package
name|org
operator|.
name|exist
operator|.
name|xquery
operator|.
name|modules
operator|.
name|counter
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|*
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Hashtable
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Iterator
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Set
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|logging
operator|.
name|log4j
operator|.
name|LogManager
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|logging
operator|.
name|log4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|EXistException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|backup
operator|.
name|RawDataBackup
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|indexing
operator|.
name|AbstractIndex
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|indexing
operator|.
name|IndexWorker
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|indexing
operator|.
name|RawBackupSupport
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|storage
operator|.
name|DBBroker
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|storage
operator|.
name|btree
operator|.
name|DBException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|util
operator|.
name|DatabaseConfigurationException
import|;
end_import

begin_comment
comment|/**  * @author Jasper Linthorst (jasper.linthorst@gmail.com)  *  */
end_comment

begin_class
specifier|public
class|class
name|Counters
implements|implements
name|RawBackupSupport
block|{
specifier|private
specifier|final
specifier|static
name|Logger
name|LOG
init|=
name|LogManager
operator|.
name|getLogger
argument_list|(
name|Counters
operator|.
name|class
argument_list|)
decl_stmt|;
specifier|private
specifier|static
specifier|volatile
name|Counters
name|instance
decl_stmt|;
specifier|public
specifier|final
specifier|static
name|String
name|COUNTERSTORE
init|=
literal|"counters"
decl_stmt|;
specifier|public
specifier|final
specifier|static
name|String
name|DELIMITER
init|=
literal|";"
decl_stmt|;
specifier|private
name|File
name|store
init|=
literal|null
decl_stmt|;
specifier|private
name|Hashtable
argument_list|<
name|String
argument_list|,
name|Long
argument_list|>
name|counters
init|=
operator|new
name|Hashtable
argument_list|<
name|String
argument_list|,
name|Long
argument_list|>
argument_list|()
decl_stmt|;
specifier|private
name|Counters
parameter_list|(
name|String
name|dataDir
parameter_list|)
throws|throws
name|EXistException
block|{
name|store
operator|=
operator|new
name|File
argument_list|(
name|dataDir
argument_list|,
name|COUNTERSTORE
argument_list|)
expr_stmt|;
name|BufferedReader
name|br
init|=
literal|null
decl_stmt|;
try|try
block|{
name|br
operator|=
operator|new
name|BufferedReader
argument_list|(
operator|new
name|FileReader
argument_list|(
name|store
argument_list|)
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|FileNotFoundException
name|e
parameter_list|)
block|{
try|try
block|{
name|store
operator|.
name|createNewFile
argument_list|()
expr_stmt|;
name|br
operator|=
operator|new
name|BufferedReader
argument_list|(
operator|new
name|FileReader
argument_list|(
name|store
argument_list|)
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e1
parameter_list|)
block|{
comment|// Failed to create an empty file, probably no write permission..
throw|throw
operator|new
name|EXistException
argument_list|(
literal|"Unable to create counter store file."
argument_list|)
throw|;
block|}
block|}
try|try
block|{
if|if
condition|(
name|store
operator|.
name|exists
argument_list|()
operator|&&
name|store
operator|.
name|canRead
argument_list|()
condition|)
block|{
name|String
name|line
init|=
literal|""
decl_stmt|;
while|while
condition|(
operator|(
name|line
operator|=
name|br
operator|.
name|readLine
argument_list|()
operator|)
operator|!=
literal|null
condition|)
block|{
comment|//Use ; as a DELIMITER, counter names must be tested and rejected when they contain this character!
name|String
index|[]
name|tokens
init|=
name|line
operator|.
name|split
argument_list|(
name|DELIMITER
argument_list|)
decl_stmt|;
name|counters
operator|.
name|put
argument_list|(
name|tokens
index|[
literal|0
index|]
argument_list|,
name|Long
operator|.
name|parseLong
argument_list|(
name|tokens
index|[
literal|1
index|]
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|br
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|EXistException
argument_list|(
literal|"IOException occurred when reading counter store file."
argument_list|)
throw|;
block|}
catch|catch
parameter_list|(
name|NumberFormatException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|EXistException
argument_list|(
literal|"Corrupt counter store file: "
operator|+
name|store
operator|.
name|getAbsolutePath
argument_list|()
argument_list|)
throw|;
block|}
catch|catch
parameter_list|(
name|ArrayIndexOutOfBoundsException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|EXistException
argument_list|(
literal|"Corrupt counter store file: "
operator|+
name|store
operator|.
name|getAbsolutePath
argument_list|()
argument_list|)
throw|;
block|}
block|}
comment|/**      *  Get singleton of Counters object.      */
specifier|public
specifier|static
name|Counters
name|getInstance
parameter_list|(
name|String
name|dataDir
parameter_list|)
throws|throws
name|EXistException
block|{
if|if
condition|(
name|instance
operator|==
literal|null
condition|)
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"Initializing counters."
argument_list|)
expr_stmt|;
name|instance
operator|=
operator|new
name|Counters
argument_list|(
name|dataDir
argument_list|)
expr_stmt|;
block|}
return|return
name|instance
return|;
block|}
specifier|public
specifier|static
name|Counters
name|getInstance
parameter_list|()
throws|throws
name|EXistException
block|{
if|if
condition|(
name|instance
operator|==
literal|null
condition|)
block|{
name|instance
operator|=
name|getInstance
argument_list|(
name|COUNTERSTORE
argument_list|)
expr_stmt|;
block|}
return|return
name|instance
return|;
block|}
comment|/**      * Creates a new Counter, initializes it to 0 and returns the current value in a long.      *       * @param counterName      * @return the initial value of the newly created counter      * @throws EXistException      */
specifier|public
name|long
name|createCounter
parameter_list|(
name|String
name|counterName
parameter_list|)
throws|throws
name|EXistException
block|{
return|return
name|createCounter
argument_list|(
name|counterName
argument_list|,
operator|(
name|long
operator|)
literal|0
argument_list|)
return|;
block|}
comment|/**      * Creates a new Counter, initializes it to initValue and returns the current value in a long.      * If there already is a counter with the same name, the current value of this counter is returned.      *       * @param counterName      * @param initValue      * @return the current value of the named counter      * @throws EXistException       */
specifier|public
specifier|synchronized
name|long
name|createCounter
parameter_list|(
name|String
name|counterName
parameter_list|,
name|long
name|initValue
parameter_list|)
throws|throws
name|EXistException
block|{
if|if
condition|(
name|counters
operator|.
name|containsKey
argument_list|(
name|counterName
argument_list|)
condition|)
block|{
return|return
name|counters
operator|.
name|get
argument_list|(
name|counterName
argument_list|)
return|;
block|}
else|else
block|{
name|counters
operator|.
name|put
argument_list|(
name|counterName
argument_list|,
name|initValue
argument_list|)
expr_stmt|;
try|try
block|{
name|serializeTable
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|FileNotFoundException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|EXistException
argument_list|(
literal|"Unable to save to counter store file."
argument_list|)
throw|;
block|}
return|return
name|counters
operator|.
name|get
argument_list|(
name|counterName
argument_list|)
return|;
block|}
block|}
comment|/**      * Removes a counter by the specified name.      *       * @param counterName      * @return true if the counter is removed      * @throws EXistException       */
specifier|public
specifier|synchronized
name|boolean
name|destroyCounter
parameter_list|(
name|String
name|counterName
parameter_list|)
throws|throws
name|EXistException
block|{
if|if
condition|(
name|counters
operator|.
name|containsKey
argument_list|(
name|counterName
argument_list|)
condition|)
block|{
name|counters
operator|.
name|remove
argument_list|(
name|counterName
argument_list|)
expr_stmt|;
try|try
block|{
name|serializeTable
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|FileNotFoundException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|EXistException
argument_list|(
literal|"Unable to remove counter from counter store file."
argument_list|)
throw|;
block|}
return|return
literal|true
return|;
block|}
else|else
block|{
return|return
literal|false
return|;
block|}
block|}
comment|/**      * Retrieves the next value of a counter (specified by name).      *       * @param counterName      * @return the next counter value or -1 if the counter does not exist.      * @throws EXistException      */
specifier|public
specifier|synchronized
name|long
name|nextValue
parameter_list|(
name|String
name|counterName
parameter_list|)
throws|throws
name|EXistException
block|{
if|if
condition|(
operator|!
name|counters
operator|.
name|containsKey
argument_list|(
name|counterName
argument_list|)
condition|)
block|{
return|return
operator|-
literal|1
return|;
block|}
name|long
name|c
init|=
name|counters
operator|.
name|get
argument_list|(
name|counterName
argument_list|)
decl_stmt|;
name|c
operator|++
expr_stmt|;
name|counters
operator|.
name|put
argument_list|(
name|counterName
argument_list|,
name|c
argument_list|)
expr_stmt|;
try|try
block|{
name|serializeTable
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|FileNotFoundException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|EXistException
argument_list|(
literal|"Unable to save to counter store file."
argument_list|)
throw|;
block|}
return|return
name|c
return|;
block|}
comment|/**      * Returns all available counters in a Set of Strings.      *       * @return all available counters in a Set of Strings      */
specifier|public
name|Set
argument_list|<
name|String
argument_list|>
name|availableCounters
parameter_list|()
block|{
return|return
name|counters
operator|.
name|keySet
argument_list|()
return|;
block|}
comment|/**      * Serializes the Map with counters to the filesystem.      *       * @throws FileNotFoundException      */
specifier|private
specifier|synchronized
name|void
name|serializeTable
parameter_list|()
throws|throws
name|FileNotFoundException
block|{
name|PrintWriter
name|p
init|=
operator|new
name|PrintWriter
argument_list|(
name|store
argument_list|)
decl_stmt|;
name|Iterator
argument_list|<
name|String
argument_list|>
name|i
init|=
name|counters
operator|.
name|keySet
argument_list|()
operator|.
name|iterator
argument_list|()
decl_stmt|;
name|String
name|k
init|=
literal|""
decl_stmt|;
name|long
name|v
init|=
literal|0
decl_stmt|;
while|while
condition|(
name|i
operator|.
name|hasNext
argument_list|()
condition|)
block|{
name|k
operator|=
operator|(
name|String
operator|)
name|i
operator|.
name|next
argument_list|()
expr_stmt|;
name|v
operator|=
name|counters
operator|.
name|get
argument_list|(
name|k
argument_list|)
expr_stmt|;
name|p
operator|.
name|println
argument_list|(
name|k
operator|+
name|DELIMITER
operator|+
name|v
argument_list|)
expr_stmt|;
block|}
name|p
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|backupToArchive
parameter_list|(
name|RawDataBackup
name|backup
parameter_list|)
throws|throws
name|IOException
block|{
if|if
condition|(
operator|!
name|store
operator|.
name|exists
argument_list|()
condition|)
return|return;
name|OutputStream
name|os
init|=
name|backup
operator|.
name|newEntry
argument_list|(
name|store
operator|.
name|getName
argument_list|()
argument_list|)
decl_stmt|;
name|InputStream
name|is
init|=
operator|new
name|FileInputStream
argument_list|(
name|store
argument_list|)
decl_stmt|;
name|byte
index|[]
name|buf
init|=
operator|new
name|byte
index|[
literal|4096
index|]
decl_stmt|;
name|int
name|len
decl_stmt|;
while|while
condition|(
operator|(
name|len
operator|=
name|is
operator|.
name|read
argument_list|(
name|buf
argument_list|)
operator|)
operator|>
literal|0
condition|)
block|{
name|os
operator|.
name|write
argument_list|(
name|buf
argument_list|,
literal|0
argument_list|,
name|len
argument_list|)
expr_stmt|;
block|}
name|is
operator|.
name|close
argument_list|()
expr_stmt|;
name|os
operator|.
name|close
argument_list|()
expr_stmt|;
name|backup
operator|.
name|closeEntry
argument_list|()
expr_stmt|;
block|}
block|}
end_class

end_unit

