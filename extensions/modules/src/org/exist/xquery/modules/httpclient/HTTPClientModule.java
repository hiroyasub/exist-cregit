begin_unit|revision:1.0.0;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * eXist Open Source Native XML Database  * Copyright (C) 2007-2009 The eXist Project  * http://exist-db.org  *  * This program is free software; you can redistribute it and/or  * modify it under the terms of the GNU Lesser General Public License  * as published by the Free Software Foundation; either version 2  * of the License, or (at your option) any later version.  *  * This program is distributed in the hope that it will be useful,  * but WITHOUT ANY WARRANTY; without even the implied warranty of  * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the  * GNU Lesser General Public License for more details.  *  * You should have received a copy of the GNU Lesser General Public License  * along with this program; if not, write to the Free Software Foundation  * Inc., 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301, USA.  *  *  $Id$  */
end_comment

begin_package
package|package
name|org
operator|.
name|exist
operator|.
name|xquery
operator|.
name|modules
operator|.
name|httpclient
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|File
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|FileInputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|InputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Properties
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|httpclient
operator|.
name|*
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|httpclient
operator|.
name|auth
operator|.
name|AuthScope
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|logging
operator|.
name|log4j
operator|.
name|LogManager
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|logging
operator|.
name|log4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|xquery
operator|.
name|AbstractInternalModule
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|xquery
operator|.
name|FunctionDef
import|;
end_import

begin_comment
comment|/**  * HTTPClient module  *  * @author   Adam Retter<adam.retter@devon.gov.uk>  * @author   Andrzej Taramina<andrzej@chaeron.com>  * @author   ljo  * @version  1.3  * @serial   20100228  */
end_comment

begin_class
specifier|public
class|class
name|HTTPClientModule
extends|extends
name|AbstractInternalModule
block|{
specifier|private
specifier|final
specifier|static
name|Logger
name|LOG
init|=
name|LogManager
operator|.
name|getLogger
argument_list|(
name|HTTPClientModule
operator|.
name|class
argument_list|)
decl_stmt|;
specifier|public
specifier|final
specifier|static
name|String
name|NAMESPACE_URI
init|=
literal|"http://exist-db.org/xquery/httpclient"
decl_stmt|;
specifier|public
specifier|final
specifier|static
name|String
name|PREFIX
init|=
literal|"httpclient"
decl_stmt|;
specifier|public
specifier|final
specifier|static
name|String
name|INCLUSION_DATE
init|=
literal|"2007-09-06"
decl_stmt|;
specifier|public
specifier|final
specifier|static
name|String
name|RELEASED_IN_VERSION
init|=
literal|"eXist-1.2"
decl_stmt|;
specifier|public
specifier|final
specifier|static
name|String
name|HTTP_MODULE_PERSISTENT_STATE
init|=
literal|"_eXist_httpclient_module_persistent_state"
decl_stmt|;
specifier|public
specifier|final
specifier|static
name|String
name|HTTP_MODULE_PERSISTENT_OPTIONS
init|=
literal|"_eXist_httpclient_module_persistent_options"
decl_stmt|;
specifier|final
specifier|static
name|HttpClient
name|httpClient
init|=
name|setupHttpClient
argument_list|()
decl_stmt|;
specifier|private
specifier|final
specifier|static
name|FunctionDef
index|[]
name|functions
init|=
block|{
operator|new
name|FunctionDef
argument_list|(
name|GETFunction
operator|.
name|signatures
index|[
literal|0
index|]
argument_list|,
name|GETFunction
operator|.
name|class
argument_list|)
block|,
operator|new
name|FunctionDef
argument_list|(
name|GETFunction
operator|.
name|signatures
index|[
literal|1
index|]
argument_list|,
name|GETFunction
operator|.
name|class
argument_list|)
block|,
operator|new
name|FunctionDef
argument_list|(
name|PUTFunction
operator|.
name|signatures
index|[
literal|0
index|]
argument_list|,
name|PUTFunction
operator|.
name|class
argument_list|)
block|,
operator|new
name|FunctionDef
argument_list|(
name|PUTFunction
operator|.
name|signatures
index|[
literal|1
index|]
argument_list|,
name|PUTFunction
operator|.
name|class
argument_list|)
block|,
operator|new
name|FunctionDef
argument_list|(
name|DELETEFunction
operator|.
name|signature
argument_list|,
name|DELETEFunction
operator|.
name|class
argument_list|)
block|,
operator|new
name|FunctionDef
argument_list|(
name|POSTFunction
operator|.
name|signatures
index|[
literal|0
index|]
argument_list|,
name|POSTFunction
operator|.
name|class
argument_list|)
block|,
operator|new
name|FunctionDef
argument_list|(
name|POSTFunction
operator|.
name|signatures
index|[
literal|1
index|]
argument_list|,
name|POSTFunction
operator|.
name|class
argument_list|)
block|,
operator|new
name|FunctionDef
argument_list|(
name|HEADFunction
operator|.
name|signature
argument_list|,
name|HEADFunction
operator|.
name|class
argument_list|)
block|,
operator|new
name|FunctionDef
argument_list|(
name|OPTIONSFunction
operator|.
name|signature
argument_list|,
name|OPTIONSFunction
operator|.
name|class
argument_list|)
block|,
operator|new
name|FunctionDef
argument_list|(
name|ClearFunction
operator|.
name|signatures
index|[
literal|0
index|]
argument_list|,
name|ClearFunction
operator|.
name|class
argument_list|)
block|,
operator|new
name|FunctionDef
argument_list|(
name|SetOptionsFunction
operator|.
name|signatures
index|[
literal|0
index|]
argument_list|,
name|SetOptionsFunction
operator|.
name|class
argument_list|)
block|}
decl_stmt|;
specifier|public
name|HTTPClientModule
parameter_list|(
name|Map
argument_list|<
name|String
argument_list|,
name|List
argument_list|<
name|?
extends|extends
name|Object
argument_list|>
argument_list|>
name|parameters
parameter_list|)
block|{
name|super
argument_list|(
name|functions
argument_list|,
name|parameters
argument_list|)
expr_stmt|;
block|}
specifier|public
name|String
name|getNamespaceURI
parameter_list|()
block|{
return|return
operator|(
name|NAMESPACE_URI
operator|)
return|;
block|}
specifier|public
name|String
name|getDefaultPrefix
parameter_list|()
block|{
return|return
operator|(
name|PREFIX
operator|)
return|;
block|}
specifier|public
name|String
name|getDescription
parameter_list|()
block|{
return|return
operator|(
literal|"A module for performing HTTP requests as a client"
operator|)
return|;
block|}
specifier|public
name|String
name|getReleaseVersion
parameter_list|()
block|{
return|return
operator|(
name|RELEASED_IN_VERSION
operator|)
return|;
block|}
specifier|private
specifier|static
name|HttpClient
name|setupHttpClient
parameter_list|()
block|{
specifier|final
name|HttpConnectionManager
name|httpConnectionManager
init|=
operator|new
name|MultiThreadedHttpConnectionManager
argument_list|()
decl_stmt|;
specifier|final
name|HttpClient
name|client
init|=
operator|new
name|HttpClient
argument_list|(
name|httpConnectionManager
argument_list|)
decl_stmt|;
comment|//config from file if present
specifier|final
name|String
name|configFile
init|=
name|System
operator|.
name|getProperty
argument_list|(
literal|"http.configfile"
argument_list|)
decl_stmt|;
if|if
condition|(
name|configFile
operator|!=
literal|null
condition|)
block|{
specifier|final
name|File
name|f
init|=
operator|new
name|File
argument_list|(
name|configFile
argument_list|)
decl_stmt|;
if|if
condition|(
name|f
operator|.
name|exists
argument_list|()
condition|)
block|{
name|setConfigFromFile
argument_list|(
name|f
argument_list|,
name|client
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|LOG
operator|.
name|warn
argument_list|(
literal|"http.configfile '"
operator|+
name|f
operator|.
name|getAbsolutePath
argument_list|()
operator|+
literal|"' does not exist!"
argument_list|)
expr_stmt|;
block|}
block|}
comment|// Legacy: set the proxy server (if any) from system properties
specifier|final
name|String
name|proxyHost
init|=
name|System
operator|.
name|getProperty
argument_list|(
literal|"http.proxyHost"
argument_list|)
decl_stmt|;
if|if
condition|(
name|proxyHost
operator|!=
literal|null
condition|)
block|{
comment|//TODO: support for http.nonProxyHosts e.g. -Dhttp.nonProxyHosts="*.devonline.gov.uk|*.devon.gov.uk"
specifier|final
name|ProxyHost
name|proxy
init|=
operator|new
name|ProxyHost
argument_list|(
name|proxyHost
argument_list|,
name|Integer
operator|.
name|parseInt
argument_list|(
name|System
operator|.
name|getProperty
argument_list|(
literal|"http.proxyPort"
argument_list|)
argument_list|)
argument_list|)
decl_stmt|;
name|client
operator|.
name|getHostConfiguration
argument_list|()
operator|.
name|setProxyHost
argument_list|(
name|proxy
argument_list|)
expr_stmt|;
block|}
return|return
name|client
return|;
block|}
specifier|private
specifier|static
name|void
name|setConfigFromFile
parameter_list|(
specifier|final
name|File
name|configFile
parameter_list|,
specifier|final
name|HttpClient
name|http
parameter_list|)
block|{
if|if
condition|(
name|LOG
operator|.
name|isDebugEnabled
argument_list|()
condition|)
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"http.configfile='"
operator|+
name|configFile
operator|.
name|getAbsolutePath
argument_list|()
operator|+
literal|"'"
argument_list|)
expr_stmt|;
block|}
specifier|final
name|Properties
name|props
init|=
operator|new
name|Properties
argument_list|()
decl_stmt|;
try|try
init|(
specifier|final
name|InputStream
name|is
init|=
operator|new
name|FileInputStream
argument_list|(
name|configFile
argument_list|)
init|)
block|{
if|if
condition|(
name|LOG
operator|.
name|isDebugEnabled
argument_list|()
condition|)
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"Loading proxy settings from "
operator|+
name|configFile
operator|.
name|getAbsolutePath
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|props
operator|.
name|load
argument_list|(
name|is
argument_list|)
expr_stmt|;
comment|// Hostname / port
specifier|final
name|String
name|proxyHost
init|=
name|props
operator|.
name|getProperty
argument_list|(
literal|"proxy.host"
argument_list|)
decl_stmt|;
specifier|final
name|int
name|proxyPort
init|=
name|Integer
operator|.
name|parseInt
argument_list|(
name|props
operator|.
name|getProperty
argument_list|(
literal|"proxy.port"
argument_list|,
literal|"8080"
argument_list|)
argument_list|)
decl_stmt|;
comment|// Username / password
specifier|final
name|String
name|proxyUser
init|=
name|props
operator|.
name|getProperty
argument_list|(
literal|"proxy.user"
argument_list|)
decl_stmt|;
specifier|final
name|String
name|proxyPassword
init|=
name|props
operator|.
name|getProperty
argument_list|(
literal|"proxy.password"
argument_list|)
decl_stmt|;
comment|// NTLM specifics
name|String
name|proxyDomain
init|=
name|props
operator|.
name|getProperty
argument_list|(
literal|"proxy.ntlm.domain"
argument_list|)
decl_stmt|;
if|if
condition|(
literal|"NONE"
operator|.
name|equalsIgnoreCase
argument_list|(
name|proxyDomain
argument_list|)
condition|)
block|{
if|if
condition|(
name|LOG
operator|.
name|isDebugEnabled
argument_list|()
condition|)
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"Forcing removal NTLM"
argument_list|)
expr_stmt|;
block|}
name|proxyDomain
operator|=
literal|null
expr_stmt|;
block|}
comment|// Set scope
specifier|final
name|AuthScope
name|authScope
init|=
operator|new
name|AuthScope
argument_list|(
name|proxyHost
argument_list|,
name|proxyPort
argument_list|)
decl_stmt|;
comment|// Setup right credentials
specifier|final
name|Credentials
name|credentials
decl_stmt|;
if|if
condition|(
name|proxyDomain
operator|==
literal|null
condition|)
block|{
name|credentials
operator|=
operator|new
name|UsernamePasswordCredentials
argument_list|(
name|proxyUser
argument_list|,
name|proxyPassword
argument_list|)
expr_stmt|;
block|}
else|else
block|{
if|if
condition|(
name|LOG
operator|.
name|isDebugEnabled
argument_list|()
condition|)
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"Using NTLM authentication for '"
operator|+
name|proxyDomain
operator|+
literal|"'"
argument_list|)
expr_stmt|;
block|}
name|credentials
operator|=
operator|new
name|NTCredentials
argument_list|(
name|proxyUser
argument_list|,
name|proxyPassword
argument_list|,
name|proxyHost
argument_list|,
name|proxyDomain
argument_list|)
expr_stmt|;
block|}
comment|// Set details
specifier|final
name|HttpState
name|state
init|=
name|http
operator|.
name|getState
argument_list|()
decl_stmt|;
name|http
operator|.
name|getHostConfiguration
argument_list|()
operator|.
name|setProxy
argument_list|(
name|proxyHost
argument_list|,
name|proxyPort
argument_list|)
expr_stmt|;
name|state
operator|.
name|setProxyCredentials
argument_list|(
name|authScope
argument_list|,
name|credentials
argument_list|)
expr_stmt|;
if|if
condition|(
name|LOG
operator|.
name|isDebugEnabled
argument_list|()
condition|)
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"Set proxy: "
operator|+
name|proxyUser
operator|+
literal|"@"
operator|+
name|proxyHost
operator|+
literal|":"
operator|+
name|proxyPort
operator|+
operator|(
name|proxyDomain
operator|==
literal|null
condition|?
literal|""
else|:
literal|" (NTLM:'"
operator|+
name|proxyDomain
operator|+
literal|"')"
operator|)
argument_list|)
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
specifier|final
name|IOException
name|ex
parameter_list|)
block|{
name|LOG
operator|.
name|error
argument_list|(
literal|"Failed to read proxy configuration from '"
operator|+
name|configFile
operator|+
literal|"'"
argument_list|)
expr_stmt|;
block|}
block|}
block|}
end_class

end_unit

