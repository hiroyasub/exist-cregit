begin_unit|revision:1.0.0;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  *  eXist Open Source Native XML Database  *  Copyright (C) 2007-2010 The eXist Project  *  http://exist-db.org  *  *  This program is free software; you can redistribute it and/or  *  modify it under the terms of the GNU Lesser General Public License  *  as published by the Free Software Foundation; either version 2  *  of the License, or (at your option) any later version.  *  *  This program is distributed in the hope that it will be useful,  *  but WITHOUT ANY WARRANTY; without even the implied warranty of  *  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the  *  GNU Lesser General Public License for more details.  *  *  You should have received a copy of the GNU Lesser General Public  *  License along with this library; if not, write to the Free Software  *  Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA  02110-1301  USA  */
end_comment

begin_package
package|package
name|org
operator|.
name|exist
operator|.
name|xquery
operator|.
name|modules
operator|.
name|exi
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|InputStream
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|dom
operator|.
name|QName
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|dom
operator|.
name|memtree
operator|.
name|AppendingSAXAdapter
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|dom
operator|.
name|memtree
operator|.
name|MemTreeBuilder
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|dom
operator|.
name|memtree
operator|.
name|SAXAdapter
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|xquery
operator|.
name|BasicFunction
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|xquery
operator|.
name|Cardinality
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|xquery
operator|.
name|ErrorCodes
operator|.
name|JavaErrorCode
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|xquery
operator|.
name|FunctionSignature
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|xquery
operator|.
name|XPathException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|xquery
operator|.
name|XQueryContext
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|xquery
operator|.
name|value
operator|.
name|BinaryValue
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|xquery
operator|.
name|value
operator|.
name|FunctionParameterSequenceType
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|xquery
operator|.
name|value
operator|.
name|FunctionReturnSequenceType
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|xquery
operator|.
name|value
operator|.
name|Item
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|xquery
operator|.
name|value
operator|.
name|NodeValue
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|xquery
operator|.
name|value
operator|.
name|Sequence
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|xquery
operator|.
name|value
operator|.
name|SequenceType
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|xquery
operator|.
name|value
operator|.
name|Type
import|;
end_import

begin_import
import|import
name|org
operator|.
name|xml
operator|.
name|sax
operator|.
name|InputSource
import|;
end_import

begin_import
import|import
name|org
operator|.
name|xml
operator|.
name|sax
operator|.
name|SAXException
import|;
end_import

begin_import
import|import
name|com
operator|.
name|siemens
operator|.
name|ct
operator|.
name|exi
operator|.
name|EXIFactory
import|;
end_import

begin_import
import|import
name|com
operator|.
name|siemens
operator|.
name|ct
operator|.
name|exi
operator|.
name|GrammarFactory
import|;
end_import

begin_import
import|import
name|com
operator|.
name|siemens
operator|.
name|ct
operator|.
name|exi
operator|.
name|api
operator|.
name|sax
operator|.
name|SAXDecoder
import|;
end_import

begin_import
import|import
name|com
operator|.
name|siemens
operator|.
name|ct
operator|.
name|exi
operator|.
name|exceptions
operator|.
name|EXIException
import|;
end_import

begin_import
import|import
name|com
operator|.
name|siemens
operator|.
name|ct
operator|.
name|exi
operator|.
name|grammars
operator|.
name|Grammars
import|;
end_import

begin_import
import|import
name|com
operator|.
name|siemens
operator|.
name|ct
operator|.
name|exi
operator|.
name|helpers
operator|.
name|DefaultEXIFactory
import|;
end_import

begin_comment
comment|/**  * eXist EXI Module Extension DecodeExiFunction.  *   * Decodes an Efficient XML Interchange (EXI) source to XML.  *   * @author Rob Walpole  * @version 1.0  *  */
end_comment

begin_class
specifier|public
class|class
name|DecodeExiFunction
extends|extends
name|BasicFunction
block|{
specifier|public
specifier|final
specifier|static
name|FunctionSignature
index|[]
name|signatures
init|=
block|{
operator|new
name|FunctionSignature
argument_list|(
operator|new
name|QName
argument_list|(
literal|"decode-to-xml"
argument_list|,
name|ExiModule
operator|.
name|NAMESPACE_URI
argument_list|,
name|ExiModule
operator|.
name|PREFIX
argument_list|)
argument_list|,
literal|"A function which returns XML from a decoded EXI source"
argument_list|,
operator|new
name|SequenceType
index|[]
block|{
operator|new
name|FunctionParameterSequenceType
argument_list|(
literal|"source-exi"
argument_list|,
name|Type
operator|.
name|BASE64_BINARY
argument_list|,
name|Cardinality
operator|.
name|EXACTLY_ONE
argument_list|,
literal|"the EXI source"
argument_list|)
block|}
argument_list|,
operator|new
name|FunctionReturnSequenceType
argument_list|(
name|Type
operator|.
name|NODE
argument_list|,
name|Cardinality
operator|.
name|ZERO_OR_ONE
argument_list|,
literal|"the XML result"
argument_list|)
argument_list|)
block|,
operator|new
name|FunctionSignature
argument_list|(
operator|new
name|QName
argument_list|(
literal|"decode-to-xml"
argument_list|,
name|ExiModule
operator|.
name|NAMESPACE_URI
argument_list|,
name|ExiModule
operator|.
name|PREFIX
argument_list|)
argument_list|,
literal|"A function which return XML from a schema decoded EXI source"
argument_list|,
operator|new
name|SequenceType
index|[]
block|{
operator|new
name|FunctionParameterSequenceType
argument_list|(
literal|"source-exi"
argument_list|,
name|Type
operator|.
name|BASE64_BINARY
argument_list|,
name|Cardinality
operator|.
name|EXACTLY_ONE
argument_list|,
literal|"the EXI source"
argument_list|)
block|,
operator|new
name|FunctionParameterSequenceType
argument_list|(
literal|"schema-location"
argument_list|,
name|Type
operator|.
name|ITEM
argument_list|,
name|Cardinality
operator|.
name|EXACTLY_ONE
argument_list|,
literal|"the XSD schema location"
argument_list|)
block|}
argument_list|,
operator|new
name|FunctionReturnSequenceType
argument_list|(
name|Type
operator|.
name|NODE
argument_list|,
name|Cardinality
operator|.
name|ZERO_OR_ONE
argument_list|,
literal|"the XML result"
argument_list|)
argument_list|)
block|}
decl_stmt|;
specifier|public
name|DecodeExiFunction
parameter_list|(
name|XQueryContext
name|context
parameter_list|,
name|FunctionSignature
name|signature
parameter_list|)
block|{
name|super
argument_list|(
name|context
argument_list|,
name|signature
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|Sequence
name|eval
parameter_list|(
name|Sequence
index|[]
name|args
parameter_list|,
name|Sequence
name|contextSequence
parameter_list|)
throws|throws
name|XPathException
block|{
if|if
condition|(
name|args
index|[
literal|0
index|]
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
return|return
name|Sequence
operator|.
name|EMPTY_SEQUENCE
return|;
block|}
try|try
block|{
name|BinaryValue
name|exiBinary
init|=
operator|(
operator|(
name|BinaryValue
operator|)
name|args
index|[
literal|0
index|]
operator|.
name|itemAt
argument_list|(
literal|0
argument_list|)
operator|)
decl_stmt|;
name|MemTreeBuilder
name|builder
init|=
name|context
operator|.
name|getDocumentBuilder
argument_list|()
decl_stmt|;
comment|// create default factory and EXI grammar for schema
name|EXIFactory
name|exiFactory
init|=
name|DefaultEXIFactory
operator|.
name|newInstance
argument_list|()
decl_stmt|;
if|if
condition|(
name|args
operator|.
name|length
operator|>
literal|1
condition|)
block|{
if|if
condition|(
operator|!
name|args
index|[
literal|1
index|]
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|Item
name|xsdItem
init|=
name|args
index|[
literal|1
index|]
operator|.
name|itemAt
argument_list|(
literal|0
argument_list|)
decl_stmt|;
name|InputStream
name|xsdInputStream
init|=
name|EXIUtils
operator|.
name|getInputStream
argument_list|(
name|xsdItem
argument_list|,
name|context
argument_list|)
decl_stmt|;
name|GrammarFactory
name|grammarFactory
init|=
name|GrammarFactory
operator|.
name|newInstance
argument_list|()
decl_stmt|;
name|Grammars
name|grammar
init|=
name|grammarFactory
operator|.
name|createGrammars
argument_list|(
name|xsdInputStream
argument_list|)
decl_stmt|;
name|exiFactory
operator|.
name|setGrammars
argument_list|(
name|grammar
argument_list|)
expr_stmt|;
block|}
block|}
name|SAXDecoder
name|decoder
init|=
operator|new
name|SAXDecoder
argument_list|(
name|exiFactory
argument_list|)
decl_stmt|;
name|SAXAdapter
name|adapter
init|=
operator|new
name|AppendingSAXAdapter
argument_list|(
name|builder
argument_list|)
decl_stmt|;
name|decoder
operator|.
name|setContentHandler
argument_list|(
name|adapter
argument_list|)
expr_stmt|;
name|decoder
operator|.
name|parse
argument_list|(
operator|new
name|InputSource
argument_list|(
name|exiBinary
operator|.
name|getInputStream
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
return|return
operator|(
name|NodeValue
operator|)
name|builder
operator|.
name|getDocument
argument_list|()
operator|.
name|getDocumentElement
argument_list|()
return|;
block|}
catch|catch
parameter_list|(
name|EXIException
decl||
name|SAXException
decl||
name|IOException
name|exie
parameter_list|)
block|{
throw|throw
operator|new
name|XPathException
argument_list|(
name|this
argument_list|,
operator|new
name|JavaErrorCode
argument_list|(
name|exie
operator|.
name|getCause
argument_list|()
argument_list|)
argument_list|,
name|exie
operator|.
name|getMessage
argument_list|()
argument_list|)
throw|;
block|}
block|}
block|}
end_class

end_unit

