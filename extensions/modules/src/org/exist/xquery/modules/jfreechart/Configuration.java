begin_unit|revision:1.0.0;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  *  eXist Open Source Native XML Database  *  Copyright (C) 2009 The eXist Project  *  http://exist-db.org  *  *  This program is free software; you can redistribute it and/or  *  modify it under the terms of the GNU Lesser General Public License  *  as published by the Free Software Foundation; either version 2  *  of the License, or (at your option) any later version.  *  *  This program is distributed in the hope that it will be useful,  *  but WITHOUT ANY WARRANTY; without even the implied warranty of  *  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the  *  GNU Lesser General Public License for more details.  *  *  You should have received a copy of the GNU Lesser General Public  *  License along with this library; if not, write to the Free Software  *  Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA  02110-1301  USA  *  *  $Id$  */
end_comment

begin_package
package|package
name|org
operator|.
name|exist
operator|.
name|xquery
operator|.
name|modules
operator|.
name|jfreechart
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|log4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|xquery
operator|.
name|XPathException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|jfree
operator|.
name|chart
operator|.
name|plot
operator|.
name|PlotOrientation
import|;
end_import

begin_import
import|import
name|org
operator|.
name|jfree
operator|.
name|util
operator|.
name|TableOrder
import|;
end_import

begin_import
import|import
name|org
operator|.
name|w3c
operator|.
name|dom
operator|.
name|Node
import|;
end_import

begin_import
import|import
name|java
operator|.
name|awt
operator|.
name|Color
import|;
end_import

begin_comment
comment|/**  * Class for storing all configuration items for charts, except chart type.  *  * @author Dannes Wessels (dizzzz@exist-db.org)  * @author Andrzej Taramina (andrzej@chaeron.com)  */
end_comment

begin_class
specifier|public
class|class
name|Configuration
block|{
specifier|private
specifier|final
specifier|static
name|Logger
name|logger
init|=
name|Logger
operator|.
name|getLogger
argument_list|(
name|Configuration
operator|.
name|class
argument_list|)
decl_stmt|;
comment|// Default dimension of image
specifier|private
name|int
name|imageHeight
init|=
literal|300
decl_stmt|;
specifier|private
name|int
name|imageWidth
init|=
literal|400
decl_stmt|;
comment|// Chart title
specifier|private
name|String
name|title
decl_stmt|;
comment|// Image type
specifier|private
name|String
name|imageType
init|=
literal|"png"
decl_stmt|;
comment|// Labels
specifier|private
name|String
name|categoryAxisLabel
decl_stmt|;
specifier|private
name|String
name|domainAxisLabel
decl_stmt|;
specifier|private
name|String
name|rangeAxisLabel
decl_stmt|;
specifier|private
name|String
name|timeAxisLabel
decl_stmt|;
specifier|private
name|String
name|valueAxisLabel
decl_stmt|;
specifier|private
name|String
name|pieSectionLabel
decl_stmt|;
specifier|private
name|String
name|pieSectionNumberFormat
init|=
literal|"0"
decl_stmt|;
specifier|private
name|String
name|pieSectionPercentFormat
init|=
literal|"0.0%"
decl_stmt|;
specifier|private
name|String
name|categoryItemLabelGeneratorClass
decl_stmt|;
specifier|private
name|String
name|categoryItemLabelGeneratorParameter
init|=
literal|"{2}"
decl_stmt|;
specifier|private
name|String
name|categoryItemLabelGeneratorNumberFormat
init|=
literal|"0"
decl_stmt|;
comment|// Orientation and Order
specifier|private
name|TableOrder
name|order
init|=
name|TableOrder
operator|.
name|BY_COLUMN
decl_stmt|;
specifier|private
name|PlotOrientation
name|orientation
init|=
name|PlotOrientation
operator|.
name|HORIZONTAL
decl_stmt|;
comment|// Colors
specifier|private
name|Color
name|titleColor
decl_stmt|;
specifier|private
name|Color
name|chartBackgroundColor
decl_stmt|;
specifier|private
name|Color
name|plotBackgroundColor
decl_stmt|;
specifier|private
name|Color
name|categoryAxisColor
decl_stmt|;
specifier|private
name|Color
name|timeAxisColor
decl_stmt|;
specifier|private
name|Color
name|valueAxisColor
decl_stmt|;
specifier|private
name|String
name|seriesColors
decl_stmt|;
specifier|private
name|String
name|sectionColors
decl_stmt|;
specifier|private
name|String
name|sectionColorsDelimiter
init|=
literal|","
decl_stmt|;
comment|// Range
specifier|private
name|Double
name|rangeLowerBound
decl_stmt|;
specifier|private
name|Double
name|rangeUpperBound
decl_stmt|;
comment|// Misc flags
specifier|private
name|boolean
name|generateLegend
init|=
literal|false
decl_stmt|;
specifier|private
name|boolean
name|generateTooltips
init|=
literal|false
decl_stmt|;
specifier|private
name|boolean
name|generateUrls
init|=
literal|false
decl_stmt|;
comment|// =========================
comment|// Getters
specifier|public
name|String
name|getImageType
parameter_list|()
block|{
return|return
name|imageType
return|;
block|}
specifier|public
name|String
name|getTimeAxisLabel
parameter_list|()
block|{
return|return
name|timeAxisLabel
return|;
block|}
specifier|public
name|Color
name|getTimeAxisColor
parameter_list|()
block|{
return|return
name|timeAxisColor
return|;
block|}
specifier|public
name|String
name|getCategoryAxisLabel
parameter_list|()
block|{
return|return
name|categoryAxisLabel
return|;
block|}
specifier|public
name|Color
name|getCategoryAxisColor
parameter_list|()
block|{
return|return
name|categoryAxisColor
return|;
block|}
specifier|public
name|boolean
name|isGenerateLegend
parameter_list|()
block|{
return|return
name|generateLegend
return|;
block|}
specifier|public
name|boolean
name|isGenerateTooltips
parameter_list|()
block|{
return|return
name|generateTooltips
return|;
block|}
specifier|public
name|boolean
name|isGenerateUrls
parameter_list|()
block|{
return|return
name|generateUrls
return|;
block|}
specifier|public
name|PlotOrientation
name|getOrientation
parameter_list|()
block|{
return|return
name|orientation
return|;
block|}
specifier|public
name|TableOrder
name|getOrder
parameter_list|()
block|{
return|return
name|order
return|;
block|}
specifier|public
name|String
name|getTitle
parameter_list|()
block|{
return|return
name|title
return|;
block|}
specifier|public
name|String
name|getValueAxisLabel
parameter_list|()
block|{
return|return
name|valueAxisLabel
return|;
block|}
specifier|public
name|Color
name|getValueAxisColor
parameter_list|()
block|{
return|return
name|valueAxisColor
return|;
block|}
specifier|public
name|int
name|getImageHeight
parameter_list|()
block|{
return|return
name|imageHeight
return|;
block|}
specifier|public
name|int
name|getImageWidth
parameter_list|()
block|{
return|return
name|imageWidth
return|;
block|}
specifier|public
name|String
name|getDomainAxisLabel
parameter_list|()
block|{
return|return
name|domainAxisLabel
return|;
block|}
specifier|public
name|String
name|getRangeAxisLabel
parameter_list|()
block|{
return|return
name|rangeAxisLabel
return|;
block|}
specifier|public
name|String
name|getPieSectionLabel
parameter_list|()
block|{
return|return
name|pieSectionLabel
return|;
block|}
specifier|public
name|String
name|getPieSectionNumberFormat
parameter_list|()
block|{
return|return
name|pieSectionNumberFormat
return|;
block|}
specifier|public
name|String
name|getPieSectionPercentFormat
parameter_list|()
block|{
return|return
name|pieSectionPercentFormat
return|;
block|}
specifier|public
name|Color
name|getTitleColor
parameter_list|()
block|{
return|return
name|titleColor
return|;
block|}
specifier|public
name|Color
name|getChartBackgroundColor
parameter_list|()
block|{
return|return
name|chartBackgroundColor
return|;
block|}
specifier|public
name|Color
name|getPlotBackgroundColor
parameter_list|()
block|{
return|return
name|plotBackgroundColor
return|;
block|}
specifier|public
name|Double
name|getRangeLowerBound
parameter_list|()
block|{
return|return
name|rangeLowerBound
return|;
block|}
specifier|public
name|Double
name|getRangeUpperBound
parameter_list|()
block|{
return|return
name|rangeUpperBound
return|;
block|}
specifier|public
name|String
name|getCategoryItemLabelGeneratorClass
parameter_list|()
block|{
return|return
name|categoryItemLabelGeneratorClass
return|;
block|}
specifier|public
name|String
name|getCategoryItemLabelGeneratorParameter
parameter_list|()
block|{
return|return
name|categoryItemLabelGeneratorParameter
return|;
block|}
specifier|public
name|String
name|getCategoryItemLabelGeneratorNumberFormat
parameter_list|()
block|{
return|return
name|categoryItemLabelGeneratorNumberFormat
return|;
block|}
specifier|public
name|String
name|getSeriesColors
parameter_list|()
block|{
return|return
name|seriesColors
return|;
block|}
specifier|public
name|String
name|getSectionColors
parameter_list|()
block|{
return|return
name|sectionColors
return|;
block|}
specifier|public
name|String
name|getSectionColorsDelimiter
parameter_list|()
block|{
return|return
name|sectionColorsDelimiter
return|;
block|}
comment|/**      *  Read configuration from node and initialize configuration.      * @throws XPathException Thrown when an element cannot be read.      */
specifier|public
name|void
name|parse
parameter_list|(
name|Node
name|configuration
parameter_list|)
throws|throws
name|XPathException
block|{
if|if
condition|(
name|configuration
operator|.
name|getNodeType
argument_list|()
operator|==
name|Node
operator|.
name|ELEMENT_NODE
operator|&&
name|configuration
operator|.
name|getLocalName
argument_list|()
operator|.
name|equals
argument_list|(
literal|"configuration"
argument_list|)
condition|)
block|{
comment|//Get the First Child
name|Node
name|child
init|=
name|configuration
operator|.
name|getFirstChild
argument_list|()
decl_stmt|;
while|while
condition|(
name|child
operator|!=
literal|null
condition|)
block|{
comment|//Parse each of the child nodes
if|if
condition|(
name|child
operator|.
name|getNodeType
argument_list|()
operator|==
name|Node
operator|.
name|ELEMENT_NODE
operator|&&
name|child
operator|.
name|hasChildNodes
argument_list|()
condition|)
block|{
if|if
condition|(
name|child
operator|.
name|getLocalName
argument_list|()
operator|.
name|equals
argument_list|(
literal|"title"
argument_list|)
condition|)
block|{
name|String
name|value
init|=
name|getValue
argument_list|(
name|child
argument_list|)
decl_stmt|;
if|if
condition|(
name|value
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|XPathException
argument_list|(
literal|"Value for 'title' cannot be parsed"
argument_list|)
throw|;
block|}
else|else
block|{
name|title
operator|=
name|value
expr_stmt|;
block|}
block|}
if|else if
condition|(
name|child
operator|.
name|getLocalName
argument_list|()
operator|.
name|equals
argument_list|(
literal|"categoryAxisLabel"
argument_list|)
condition|)
block|{
name|String
name|value
init|=
name|getValue
argument_list|(
name|child
argument_list|)
decl_stmt|;
if|if
condition|(
name|value
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|XPathException
argument_list|(
literal|"Value for 'categoryAxisLabel' cannot be parsed"
argument_list|)
throw|;
block|}
else|else
block|{
name|categoryAxisLabel
operator|=
name|value
expr_stmt|;
block|}
block|}
if|else if
condition|(
name|child
operator|.
name|getLocalName
argument_list|()
operator|.
name|equals
argument_list|(
literal|"categoryAxisColor"
argument_list|)
condition|)
block|{
name|Color
name|value
init|=
name|Colour
operator|.
name|getColor
argument_list|(
name|getValue
argument_list|(
name|child
argument_list|)
argument_list|)
decl_stmt|;
if|if
condition|(
name|value
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|XPathException
argument_list|(
literal|"Value for 'categoryAxisColor' cannot be parsed"
argument_list|)
throw|;
block|}
else|else
block|{
name|categoryAxisColor
operator|=
name|value
expr_stmt|;
block|}
block|}
if|else if
condition|(
name|child
operator|.
name|getLocalName
argument_list|()
operator|.
name|equals
argument_list|(
literal|"valueAxisLabel"
argument_list|)
condition|)
block|{
name|String
name|value
init|=
name|getValue
argument_list|(
name|child
argument_list|)
decl_stmt|;
if|if
condition|(
name|value
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|XPathException
argument_list|(
literal|"Value for 'valueAxisLabel' cannot be parsed"
argument_list|)
throw|;
block|}
else|else
block|{
name|valueAxisLabel
operator|=
name|value
expr_stmt|;
block|}
block|}
if|else if
condition|(
name|child
operator|.
name|getLocalName
argument_list|()
operator|.
name|equals
argument_list|(
literal|"valueAxisColor"
argument_list|)
condition|)
block|{
name|Color
name|value
init|=
name|Colour
operator|.
name|getColor
argument_list|(
name|getValue
argument_list|(
name|child
argument_list|)
argument_list|)
decl_stmt|;
if|if
condition|(
name|value
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|XPathException
argument_list|(
literal|"Value for 'valueAxisColor' cannot be parsed"
argument_list|)
throw|;
block|}
else|else
block|{
name|valueAxisColor
operator|=
name|value
expr_stmt|;
block|}
block|}
if|else if
condition|(
name|child
operator|.
name|getLocalName
argument_list|()
operator|.
name|equals
argument_list|(
literal|"timeAxisLabel"
argument_list|)
condition|)
block|{
name|String
name|value
init|=
name|getValue
argument_list|(
name|child
argument_list|)
decl_stmt|;
if|if
condition|(
name|value
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|XPathException
argument_list|(
literal|"Value for 'timeAxisLabel' cannot be parsed"
argument_list|)
throw|;
block|}
else|else
block|{
name|timeAxisLabel
operator|=
name|value
expr_stmt|;
block|}
block|}
if|else if
condition|(
name|child
operator|.
name|getLocalName
argument_list|()
operator|.
name|equals
argument_list|(
literal|"timeAxisColor"
argument_list|)
condition|)
block|{
name|Color
name|value
init|=
name|Colour
operator|.
name|getColor
argument_list|(
name|getValue
argument_list|(
name|child
argument_list|)
argument_list|)
decl_stmt|;
if|if
condition|(
name|value
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|XPathException
argument_list|(
literal|"Value for 'timeAxisColor' cannot be parsed"
argument_list|)
throw|;
block|}
else|else
block|{
name|timeAxisColor
operator|=
name|value
expr_stmt|;
block|}
block|}
if|else if
condition|(
name|child
operator|.
name|getLocalName
argument_list|()
operator|.
name|equals
argument_list|(
literal|"domainAxisLabel"
argument_list|)
condition|)
block|{
name|String
name|value
init|=
name|getValue
argument_list|(
name|child
argument_list|)
decl_stmt|;
if|if
condition|(
name|value
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|XPathException
argument_list|(
literal|"Value for 'domainAxisLabel' cannot be parsed"
argument_list|)
throw|;
block|}
else|else
block|{
name|domainAxisLabel
operator|=
name|value
expr_stmt|;
block|}
block|}
if|else if
condition|(
name|child
operator|.
name|getLocalName
argument_list|()
operator|.
name|equals
argument_list|(
literal|"rangeAxisLabel"
argument_list|)
condition|)
block|{
name|String
name|value
init|=
name|getValue
argument_list|(
name|child
argument_list|)
decl_stmt|;
if|if
condition|(
name|value
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|XPathException
argument_list|(
literal|"Value for 'rangeAxisLabel' cannot be parsed"
argument_list|)
throw|;
block|}
else|else
block|{
name|rangeAxisLabel
operator|=
name|value
expr_stmt|;
block|}
block|}
if|else if
condition|(
name|child
operator|.
name|getLocalName
argument_list|()
operator|.
name|equals
argument_list|(
literal|"pieSectionLabel"
argument_list|)
condition|)
block|{
name|String
name|value
init|=
name|getValue
argument_list|(
name|child
argument_list|)
decl_stmt|;
if|if
condition|(
name|value
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|XPathException
argument_list|(
literal|"Value for 'pieSectionLabel' cannot be parsed"
argument_list|)
throw|;
block|}
else|else
block|{
name|pieSectionLabel
operator|=
name|value
expr_stmt|;
block|}
block|}
if|else if
condition|(
name|child
operator|.
name|getLocalName
argument_list|()
operator|.
name|equals
argument_list|(
literal|"pieSectionNumberFormat"
argument_list|)
condition|)
block|{
name|String
name|value
init|=
name|getValue
argument_list|(
name|child
argument_list|)
decl_stmt|;
if|if
condition|(
name|value
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|XPathException
argument_list|(
literal|"Value for 'pieSectionNumberFormat' cannot be parsed"
argument_list|)
throw|;
block|}
else|else
block|{
name|pieSectionNumberFormat
operator|=
name|value
expr_stmt|;
block|}
block|}
if|else if
condition|(
name|child
operator|.
name|getLocalName
argument_list|()
operator|.
name|equals
argument_list|(
literal|"pieSectionPercentFormat"
argument_list|)
condition|)
block|{
name|String
name|value
init|=
name|getValue
argument_list|(
name|child
argument_list|)
decl_stmt|;
if|if
condition|(
name|value
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|XPathException
argument_list|(
literal|"Value for 'pieSectionPercentFormat' cannot be parsed"
argument_list|)
throw|;
block|}
else|else
block|{
name|pieSectionPercentFormat
operator|=
name|value
expr_stmt|;
block|}
block|}
if|else if
condition|(
name|child
operator|.
name|getLocalName
argument_list|()
operator|.
name|equals
argument_list|(
literal|"orientation"
argument_list|)
condition|)
block|{
name|String
name|value
init|=
name|getValue
argument_list|(
name|child
argument_list|)
decl_stmt|;
if|if
condition|(
name|value
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|XPathException
argument_list|(
literal|"Value for 'orientation' cannot be parsed"
argument_list|)
throw|;
block|}
if|else if
condition|(
literal|"HORIZONTAL"
operator|.
name|equalsIgnoreCase
argument_list|(
name|value
argument_list|)
condition|)
block|{
name|orientation
operator|=
name|PlotOrientation
operator|.
name|HORIZONTAL
expr_stmt|;
block|}
if|else if
condition|(
literal|"VERTICAL"
operator|.
name|equalsIgnoreCase
argument_list|(
name|value
argument_list|)
condition|)
block|{
name|orientation
operator|=
name|PlotOrientation
operator|.
name|VERTICAL
expr_stmt|;
block|}
else|else
block|{
throw|throw
operator|new
name|XPathException
argument_list|(
literal|"Wrong value for 'orientation'"
argument_list|)
throw|;
block|}
block|}
if|else if
condition|(
name|child
operator|.
name|getLocalName
argument_list|()
operator|.
name|equals
argument_list|(
literal|"tableOrder"
argument_list|)
condition|)
block|{
name|String
name|value
init|=
name|getValue
argument_list|(
name|child
argument_list|)
decl_stmt|;
if|if
condition|(
name|value
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|XPathException
argument_list|(
literal|"Value for 'tableOrder' cannot be parsed"
argument_list|)
throw|;
block|}
if|else if
condition|(
literal|"COLUMN"
operator|.
name|equalsIgnoreCase
argument_list|(
name|value
argument_list|)
condition|)
block|{
name|order
operator|=
name|TableOrder
operator|.
name|BY_COLUMN
expr_stmt|;
block|}
if|else if
condition|(
literal|"ROW"
operator|.
name|equalsIgnoreCase
argument_list|(
name|value
argument_list|)
condition|)
block|{
name|order
operator|=
name|TableOrder
operator|.
name|BY_ROW
expr_stmt|;
block|}
else|else
block|{
throw|throw
operator|new
name|XPathException
argument_list|(
literal|"Wrong value for 'tableOrder'"
argument_list|)
throw|;
block|}
block|}
if|else if
condition|(
name|child
operator|.
name|getLocalName
argument_list|()
operator|.
name|equals
argument_list|(
literal|"legend"
argument_list|)
condition|)
block|{
name|Boolean
name|value
init|=
name|parseBoolean
argument_list|(
name|getValue
argument_list|(
name|child
argument_list|)
argument_list|)
decl_stmt|;
if|if
condition|(
name|value
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|XPathException
argument_list|(
literal|"Value for 'legend' cannot be parsed"
argument_list|)
throw|;
block|}
else|else
block|{
name|generateLegend
operator|=
name|value
expr_stmt|;
block|}
block|}
if|else if
condition|(
name|child
operator|.
name|getLocalName
argument_list|()
operator|.
name|equals
argument_list|(
literal|"tooltips"
argument_list|)
condition|)
block|{
name|Boolean
name|value
init|=
name|parseBoolean
argument_list|(
name|getValue
argument_list|(
name|child
argument_list|)
argument_list|)
decl_stmt|;
if|if
condition|(
name|value
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|XPathException
argument_list|(
literal|"Value for 'tooltips' cannot be parsed"
argument_list|)
throw|;
block|}
else|else
block|{
name|generateTooltips
operator|=
name|value
expr_stmt|;
block|}
block|}
if|else if
condition|(
name|child
operator|.
name|getLocalName
argument_list|()
operator|.
name|equals
argument_list|(
literal|"urls"
argument_list|)
condition|)
block|{
name|Boolean
name|value
init|=
name|parseBoolean
argument_list|(
name|getValue
argument_list|(
name|child
argument_list|)
argument_list|)
decl_stmt|;
if|if
condition|(
name|value
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|XPathException
argument_list|(
literal|"Value for 'urls' cannot be parsed"
argument_list|)
throw|;
block|}
else|else
block|{
name|generateUrls
operator|=
name|value
expr_stmt|;
block|}
block|}
if|else if
condition|(
name|child
operator|.
name|getLocalName
argument_list|()
operator|.
name|equals
argument_list|(
literal|"width"
argument_list|)
condition|)
block|{
name|Integer
name|value
init|=
name|parseInteger
argument_list|(
name|getValue
argument_list|(
name|child
argument_list|)
argument_list|)
decl_stmt|;
if|if
condition|(
name|value
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|XPathException
argument_list|(
literal|"Value for 'width' cannot be parsed"
argument_list|)
throw|;
block|}
else|else
block|{
name|imageWidth
operator|=
name|value
expr_stmt|;
block|}
block|}
if|else if
condition|(
name|child
operator|.
name|getLocalName
argument_list|()
operator|.
name|equals
argument_list|(
literal|"height"
argument_list|)
condition|)
block|{
name|Integer
name|value
init|=
name|parseInteger
argument_list|(
name|getValue
argument_list|(
name|child
argument_list|)
argument_list|)
decl_stmt|;
if|if
condition|(
name|value
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|XPathException
argument_list|(
literal|"Value for 'height' cannot be parsed"
argument_list|)
throw|;
block|}
else|else
block|{
name|imageHeight
operator|=
name|value
expr_stmt|;
block|}
block|}
if|else if
condition|(
name|child
operator|.
name|getLocalName
argument_list|()
operator|.
name|equals
argument_list|(
literal|"titleColor"
argument_list|)
condition|)
block|{
name|Color
name|value
init|=
name|Colour
operator|.
name|getColor
argument_list|(
name|getValue
argument_list|(
name|child
argument_list|)
argument_list|)
decl_stmt|;
if|if
condition|(
name|value
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|XPathException
argument_list|(
literal|"Value for 'titleColor' cannot be parsed"
argument_list|)
throw|;
block|}
else|else
block|{
name|titleColor
operator|=
name|value
expr_stmt|;
block|}
block|}
if|else if
condition|(
name|child
operator|.
name|getLocalName
argument_list|()
operator|.
name|equals
argument_list|(
literal|"chartBackgroundColor"
argument_list|)
condition|)
block|{
name|Color
name|value
init|=
name|Colour
operator|.
name|getColor
argument_list|(
name|getValue
argument_list|(
name|child
argument_list|)
argument_list|)
decl_stmt|;
if|if
condition|(
name|value
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|XPathException
argument_list|(
literal|"Value for 'chartBackgroundColor' cannot be parsed"
argument_list|)
throw|;
block|}
else|else
block|{
name|chartBackgroundColor
operator|=
name|value
expr_stmt|;
block|}
block|}
if|else if
condition|(
name|child
operator|.
name|getLocalName
argument_list|()
operator|.
name|equals
argument_list|(
literal|"plotBackgroundColor"
argument_list|)
condition|)
block|{
name|Color
name|value
init|=
name|Colour
operator|.
name|getColor
argument_list|(
name|getValue
argument_list|(
name|child
argument_list|)
argument_list|)
decl_stmt|;
if|if
condition|(
name|value
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|XPathException
argument_list|(
literal|"Value for 'plotBackgroundColor' cannot be parsed"
argument_list|)
throw|;
block|}
else|else
block|{
name|plotBackgroundColor
operator|=
name|value
expr_stmt|;
block|}
block|}
if|else if
condition|(
name|child
operator|.
name|getLocalName
argument_list|()
operator|.
name|equals
argument_list|(
literal|"seriesColors"
argument_list|)
condition|)
block|{
name|String
name|value
init|=
name|getValue
argument_list|(
name|child
argument_list|)
decl_stmt|;
if|if
condition|(
name|value
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|XPathException
argument_list|(
literal|"Value for 'seriesColors' cannot be parsed"
argument_list|)
throw|;
block|}
else|else
block|{
name|seriesColors
operator|=
name|value
expr_stmt|;
block|}
block|}
if|else if
condition|(
name|child
operator|.
name|getLocalName
argument_list|()
operator|.
name|equals
argument_list|(
literal|"sectionColors"
argument_list|)
condition|)
block|{
name|String
name|value
init|=
name|getValue
argument_list|(
name|child
argument_list|)
decl_stmt|;
if|if
condition|(
name|value
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|XPathException
argument_list|(
literal|"Value for 'sectionColors' cannot be parsed"
argument_list|)
throw|;
block|}
else|else
block|{
name|sectionColors
operator|=
name|value
expr_stmt|;
block|}
block|}
if|else if
condition|(
name|child
operator|.
name|getLocalName
argument_list|()
operator|.
name|equals
argument_list|(
literal|"sectionColorsDelimiter"
argument_list|)
condition|)
block|{
name|String
name|value
init|=
name|getValue
argument_list|(
name|child
argument_list|)
decl_stmt|;
if|if
condition|(
name|value
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|XPathException
argument_list|(
literal|"Value for 'sectionColorsDelimiter' cannot be parsed"
argument_list|)
throw|;
block|}
else|else
block|{
name|sectionColorsDelimiter
operator|=
name|value
expr_stmt|;
block|}
block|}
if|else if
condition|(
name|child
operator|.
name|getLocalName
argument_list|()
operator|.
name|equals
argument_list|(
literal|"rangeLowerBound"
argument_list|)
condition|)
block|{
name|Double
name|value
init|=
name|parseDouble
argument_list|(
name|getValue
argument_list|(
name|child
argument_list|)
argument_list|)
decl_stmt|;
if|if
condition|(
name|value
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|XPathException
argument_list|(
literal|"Value for 'rangeLowerBound' cannot be parsed"
argument_list|)
throw|;
block|}
else|else
block|{
name|rangeLowerBound
operator|=
name|value
expr_stmt|;
block|}
block|}
if|else if
condition|(
name|child
operator|.
name|getLocalName
argument_list|()
operator|.
name|equals
argument_list|(
literal|"rangeUpperBound"
argument_list|)
condition|)
block|{
name|Double
name|value
init|=
name|parseDouble
argument_list|(
name|getValue
argument_list|(
name|child
argument_list|)
argument_list|)
decl_stmt|;
if|if
condition|(
name|value
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|XPathException
argument_list|(
literal|"Value for 'rangeUpperBound' cannot be parsed"
argument_list|)
throw|;
block|}
else|else
block|{
name|rangeUpperBound
operator|=
name|value
expr_stmt|;
block|}
block|}
if|else if
condition|(
name|child
operator|.
name|getLocalName
argument_list|()
operator|.
name|equals
argument_list|(
literal|"categoryItemLabelGeneratorClass"
argument_list|)
condition|)
block|{
name|String
name|value
init|=
name|getValue
argument_list|(
name|child
argument_list|)
decl_stmt|;
if|if
condition|(
name|value
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|XPathException
argument_list|(
literal|"Value for 'categoryItemLabelGeneratorClass' cannot be parsed"
argument_list|)
throw|;
block|}
else|else
block|{
name|categoryItemLabelGeneratorClass
operator|=
name|value
expr_stmt|;
block|}
block|}
if|else if
condition|(
name|child
operator|.
name|getLocalName
argument_list|()
operator|.
name|equals
argument_list|(
literal|"categoryItemLabelGeneratorParameter"
argument_list|)
condition|)
block|{
name|String
name|value
init|=
name|getValue
argument_list|(
name|child
argument_list|)
decl_stmt|;
if|if
condition|(
name|value
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|XPathException
argument_list|(
literal|"Value for 'categoryItemLabelGeneratorParameter' cannot be parsed"
argument_list|)
throw|;
block|}
else|else
block|{
name|categoryItemLabelGeneratorParameter
operator|=
name|value
expr_stmt|;
block|}
block|}
if|else if
condition|(
name|child
operator|.
name|getLocalName
argument_list|()
operator|.
name|equals
argument_list|(
literal|"categoryItemLabelGeneratorNumberFormat"
argument_list|)
condition|)
block|{
name|String
name|value
init|=
name|getValue
argument_list|(
name|child
argument_list|)
decl_stmt|;
if|if
condition|(
name|value
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|XPathException
argument_list|(
literal|"Value for 'categoryItemLabelGeneratorNumberFormat' cannot be parsed"
argument_list|)
throw|;
block|}
else|else
block|{
name|categoryItemLabelGeneratorNumberFormat
operator|=
name|value
expr_stmt|;
block|}
block|}
if|else if
condition|(
name|child
operator|.
name|getLocalName
argument_list|()
operator|.
name|equals
argument_list|(
literal|"imageType"
argument_list|)
condition|)
block|{
name|String
name|value
init|=
name|getValue
argument_list|(
name|child
argument_list|)
decl_stmt|;
if|if
condition|(
name|value
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|XPathException
argument_list|(
literal|"Value for 'imageType' cannot be parsed"
argument_list|)
throw|;
block|}
else|else
block|{
name|imageType
operator|=
name|value
expr_stmt|;
block|}
block|}
block|}
comment|//next node
name|child
operator|=
name|child
operator|.
name|getNextSibling
argument_list|()
expr_stmt|;
block|}
block|}
block|}
comment|/**      * Parse text and return boolean. Accepted values Yes No True False,      * otherwise NULL is returned.      */
specifier|private
name|Boolean
name|parseBoolean
parameter_list|(
name|String
name|value
parameter_list|)
block|{
if|if
condition|(
name|value
operator|==
literal|null
condition|)
block|{
return|return
literal|null
return|;
block|}
if|else if
condition|(
name|value
operator|.
name|equalsIgnoreCase
argument_list|(
literal|"true"
argument_list|)
operator|||
name|value
operator|.
name|equalsIgnoreCase
argument_list|(
literal|"yes"
argument_list|)
condition|)
block|{
return|return
literal|true
return|;
block|}
if|else if
condition|(
name|value
operator|.
name|equalsIgnoreCase
argument_list|(
literal|"false"
argument_list|)
operator|||
name|value
operator|.
name|equalsIgnoreCase
argument_list|(
literal|"no"
argument_list|)
condition|)
block|{
return|return
literal|false
return|;
block|}
return|return
literal|null
return|;
block|}
comment|/**      *  Parse text and return Integer. NULL is returned when value      * cannot be converted.      */
specifier|private
name|Integer
name|parseInteger
parameter_list|(
name|String
name|value
parameter_list|)
block|{
try|try
block|{
return|return
name|Integer
operator|.
name|valueOf
argument_list|(
name|value
argument_list|)
return|;
block|}
catch|catch
parameter_list|(
name|NumberFormatException
name|ex
parameter_list|)
block|{
name|logger
operator|.
name|debug
argument_list|(
name|ex
operator|.
name|getMessage
argument_list|()
argument_list|)
expr_stmt|;
block|}
return|return
literal|null
return|;
block|}
comment|/**      *  Parse text and return Double. NULL is returned when value      * cannot be converted.      */
specifier|private
name|Double
name|parseDouble
parameter_list|(
name|String
name|value
parameter_list|)
block|{
try|try
block|{
return|return
name|Double
operator|.
name|valueOf
argument_list|(
name|value
argument_list|)
return|;
block|}
catch|catch
parameter_list|(
name|NumberFormatException
name|ex
parameter_list|)
block|{
name|logger
operator|.
name|debug
argument_list|(
name|ex
operator|.
name|getMessage
argument_list|()
argument_list|)
expr_stmt|;
block|}
return|return
literal|null
return|;
block|}
comment|/**      * Helper method for getting the value of the (first) node.      */
specifier|private
name|String
name|getValue
parameter_list|(
name|Node
name|child
parameter_list|)
block|{
return|return
name|child
operator|.
name|getFirstChild
argument_list|()
operator|.
name|getNodeValue
argument_list|()
return|;
block|}
block|}
end_class

end_unit

