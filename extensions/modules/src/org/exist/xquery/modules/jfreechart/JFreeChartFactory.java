begin_unit|revision:1.0.0;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  *  eXist Open Source Native XML Database  *  Copyright (C) 2001-09 The eXist Project  *  http://exist-db.org  *  *  This program is free software; you can redistribute it and/or  *  modify it under the terms of the GNU Lesser General Public License  *  as published by the Free Software Foundation; either version 2  *  of the License, or (at your option) any later version.  *  *  This program is distributed in the hope that it will be useful,  *  but WITHOUT ANY WARRANTY; without even the implied warranty of  *  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the  *  GNU Lesser General Public License for more details.  *  *  You should have received a copy of the GNU Lesser General Public  *  License along with this library; if not, write to the Free Software  *  Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA  02110-1301  USA  *  *  $Id$  */
end_comment

begin_package
package|package
name|org
operator|.
name|exist
operator|.
name|xquery
operator|.
name|modules
operator|.
name|jfreechart
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|InputStream
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|log4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|jfree
operator|.
name|chart
operator|.
name|ChartFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|jfree
operator|.
name|chart
operator|.
name|JFreeChart
import|;
end_import

begin_import
import|import
name|org
operator|.
name|jfree
operator|.
name|chart
operator|.
name|plot
operator|.
name|PlotOrientation
import|;
end_import

begin_import
import|import
name|org
operator|.
name|jfree
operator|.
name|data
operator|.
name|category
operator|.
name|CategoryDataset
import|;
end_import

begin_import
import|import
name|org
operator|.
name|jfree
operator|.
name|data
operator|.
name|general
operator|.
name|Dataset
import|;
end_import

begin_import
import|import
name|org
operator|.
name|jfree
operator|.
name|data
operator|.
name|general
operator|.
name|PieDataset
import|;
end_import

begin_import
import|import
name|org
operator|.
name|jfree
operator|.
name|data
operator|.
name|statistics
operator|.
name|BoxAndWhiskerCategoryDataset
import|;
end_import

begin_import
import|import
name|org
operator|.
name|jfree
operator|.
name|data
operator|.
name|xml
operator|.
name|DatasetReader
import|;
end_import

begin_comment
comment|/**  * Wrapper for JFreeChart's ChartFactory.  *  * @author Dannes Wessels (dizzzz@exist-db.org)  */
end_comment

begin_class
specifier|public
class|class
name|JFreeChartFactory
block|{
specifier|private
specifier|final
specifier|static
name|Logger
name|logger
init|=
name|Logger
operator|.
name|getLogger
argument_list|(
name|JFreeChartFactory
operator|.
name|class
argument_list|)
decl_stmt|;
comment|/**      *  Create JFreeChart graph using the supplied parameters.      *      * @param chartType One of the many chart types.      * @param conf      Chart configuration      * @param is        Inputstream containing chart data      * @return          Initialized chart or NULL in case of issues.      * @throws IOException Thrown when a problem is reported while parsing XML data.      */
specifier|public
specifier|static
name|JFreeChart
name|createJFreeChart
parameter_list|(
name|String
name|chartType
parameter_list|,
name|Configuration
name|conf
parameter_list|,
name|InputStream
name|is
parameter_list|)
throws|throws
name|IOException
block|{
name|logger
operator|.
name|debug
argument_list|(
literal|"Generating "
operator|+
name|chartType
argument_list|)
expr_stmt|;
comment|// Currently two dataset types supported
name|CategoryDataset
name|categoryDataset
init|=
literal|null
decl_stmt|;
name|PieDataset
name|pieDataset
init|=
literal|null
decl_stmt|;
if|if
condition|(
literal|"PieChart"
operator|.
name|equals
argument_list|(
name|chartType
argument_list|)
operator|||
literal|"PieChart3D"
operator|.
name|equals
argument_list|(
name|chartType
argument_list|)
operator|||
literal|"RingChart"
operator|.
name|equals
argument_list|(
name|chartType
argument_list|)
condition|)
block|{
name|logger
operator|.
name|debug
argument_list|(
literal|"Reading XML PieDataset"
argument_list|)
expr_stmt|;
name|pieDataset
operator|=
name|DatasetReader
operator|.
name|readPieDatasetFromXML
argument_list|(
name|is
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|logger
operator|.
name|debug
argument_list|(
literal|"Reading XML CategoryDataset"
argument_list|)
expr_stmt|;
name|categoryDataset
operator|=
name|DatasetReader
operator|.
name|readCategoryDatasetFromXML
argument_list|(
name|is
argument_list|)
expr_stmt|;
block|}
comment|// Return chart
name|JFreeChart
name|chart
init|=
literal|null
decl_stmt|;
comment|// Big chart type switch
if|if
condition|(
literal|"AreaChart"
operator|.
name|equalsIgnoreCase
argument_list|(
name|chartType
argument_list|)
condition|)
block|{
name|chart
operator|=
name|ChartFactory
operator|.
name|createAreaChart
argument_list|(
name|conf
operator|.
name|getTitle
argument_list|()
argument_list|,
name|conf
operator|.
name|getCategoryAxisLabel
argument_list|()
argument_list|,
name|conf
operator|.
name|getValueAxisLabel
argument_list|()
argument_list|,
name|categoryDataset
argument_list|,
name|conf
operator|.
name|getOrientation
argument_list|()
argument_list|,
name|conf
operator|.
name|isGenerateLegend
argument_list|()
argument_list|,
name|conf
operator|.
name|isGenerateTooltips
argument_list|()
argument_list|,
name|conf
operator|.
name|isGenerateUrls
argument_list|()
argument_list|)
expr_stmt|;
block|}
if|else if
condition|(
literal|"BarChart"
operator|.
name|equalsIgnoreCase
argument_list|(
name|chartType
argument_list|)
condition|)
block|{
name|chart
operator|=
name|ChartFactory
operator|.
name|createBarChart
argument_list|(
name|conf
operator|.
name|getTitle
argument_list|()
argument_list|,
name|conf
operator|.
name|getCategoryAxisLabel
argument_list|()
argument_list|,
name|conf
operator|.
name|getValueAxisLabel
argument_list|()
argument_list|,
name|categoryDataset
argument_list|,
name|conf
operator|.
name|getOrientation
argument_list|()
argument_list|,
name|conf
operator|.
name|isGenerateLegend
argument_list|()
argument_list|,
name|conf
operator|.
name|isGenerateTooltips
argument_list|()
argument_list|,
name|conf
operator|.
name|isGenerateUrls
argument_list|()
argument_list|)
expr_stmt|;
block|}
if|else if
condition|(
literal|"BarChart3D"
operator|.
name|equalsIgnoreCase
argument_list|(
name|chartType
argument_list|)
condition|)
block|{
name|chart
operator|=
name|ChartFactory
operator|.
name|createBarChart3D
argument_list|(
name|conf
operator|.
name|getTitle
argument_list|()
argument_list|,
name|conf
operator|.
name|getCategoryAxisLabel
argument_list|()
argument_list|,
name|conf
operator|.
name|getValueAxisLabel
argument_list|()
argument_list|,
name|categoryDataset
argument_list|,
name|conf
operator|.
name|getOrientation
argument_list|()
argument_list|,
name|conf
operator|.
name|isGenerateLegend
argument_list|()
argument_list|,
name|conf
operator|.
name|isGenerateTooltips
argument_list|()
argument_list|,
name|conf
operator|.
name|isGenerateUrls
argument_list|()
argument_list|)
expr_stmt|;
block|}
if|else if
condition|(
literal|"LineChart"
operator|.
name|equalsIgnoreCase
argument_list|(
name|chartType
argument_list|)
condition|)
block|{
name|chart
operator|=
name|ChartFactory
operator|.
name|createLineChart
argument_list|(
name|conf
operator|.
name|getTitle
argument_list|()
argument_list|,
name|conf
operator|.
name|getCategoryAxisLabel
argument_list|()
argument_list|,
name|conf
operator|.
name|getValueAxisLabel
argument_list|()
argument_list|,
name|categoryDataset
argument_list|,
name|conf
operator|.
name|getOrientation
argument_list|()
argument_list|,
name|conf
operator|.
name|isGenerateLegend
argument_list|()
argument_list|,
name|conf
operator|.
name|isGenerateTooltips
argument_list|()
argument_list|,
name|conf
operator|.
name|isGenerateUrls
argument_list|()
argument_list|)
expr_stmt|;
block|}
if|else if
condition|(
literal|"LineChart3D"
operator|.
name|equalsIgnoreCase
argument_list|(
name|chartType
argument_list|)
condition|)
block|{
name|chart
operator|=
name|ChartFactory
operator|.
name|createLineChart3D
argument_list|(
name|conf
operator|.
name|getTitle
argument_list|()
argument_list|,
name|conf
operator|.
name|getCategoryAxisLabel
argument_list|()
argument_list|,
name|conf
operator|.
name|getValueAxisLabel
argument_list|()
argument_list|,
name|categoryDataset
argument_list|,
name|conf
operator|.
name|getOrientation
argument_list|()
argument_list|,
name|conf
operator|.
name|isGenerateLegend
argument_list|()
argument_list|,
name|conf
operator|.
name|isGenerateTooltips
argument_list|()
argument_list|,
name|conf
operator|.
name|isGenerateUrls
argument_list|()
argument_list|)
expr_stmt|;
block|}
if|else if
condition|(
literal|"MultiplePieChart"
operator|.
name|equalsIgnoreCase
argument_list|(
name|chartType
argument_list|)
condition|)
block|{
name|chart
operator|=
name|ChartFactory
operator|.
name|createMultiplePieChart
argument_list|(
name|conf
operator|.
name|getTitle
argument_list|()
argument_list|,
name|categoryDataset
argument_list|,
name|conf
operator|.
name|getOrder
argument_list|()
argument_list|,
name|conf
operator|.
name|isGenerateLegend
argument_list|()
argument_list|,
name|conf
operator|.
name|isGenerateTooltips
argument_list|()
argument_list|,
name|conf
operator|.
name|isGenerateUrls
argument_list|()
argument_list|)
expr_stmt|;
block|}
if|else if
condition|(
literal|"MultiplePieChart3D"
operator|.
name|equalsIgnoreCase
argument_list|(
name|chartType
argument_list|)
condition|)
block|{
name|chart
operator|=
name|ChartFactory
operator|.
name|createMultiplePieChart3D
argument_list|(
name|conf
operator|.
name|getTitle
argument_list|()
argument_list|,
name|categoryDataset
argument_list|,
name|conf
operator|.
name|getOrder
argument_list|()
argument_list|,
name|conf
operator|.
name|isGenerateLegend
argument_list|()
argument_list|,
name|conf
operator|.
name|isGenerateTooltips
argument_list|()
argument_list|,
name|conf
operator|.
name|isGenerateUrls
argument_list|()
argument_list|)
expr_stmt|;
block|}
if|else if
condition|(
literal|"PieChart"
operator|.
name|equalsIgnoreCase
argument_list|(
name|chartType
argument_list|)
condition|)
block|{
name|chart
operator|=
name|ChartFactory
operator|.
name|createPieChart
argument_list|(
name|conf
operator|.
name|getTitle
argument_list|()
argument_list|,
name|pieDataset
argument_list|,
name|conf
operator|.
name|isGenerateLegend
argument_list|()
argument_list|,
name|conf
operator|.
name|isGenerateTooltips
argument_list|()
argument_list|,
name|conf
operator|.
name|isGenerateUrls
argument_list|()
argument_list|)
expr_stmt|;
block|}
if|else if
condition|(
literal|"PieChart3D"
operator|.
name|equalsIgnoreCase
argument_list|(
name|chartType
argument_list|)
condition|)
block|{
name|chart
operator|=
name|ChartFactory
operator|.
name|createPieChart3D
argument_list|(
name|conf
operator|.
name|getTitle
argument_list|()
argument_list|,
name|pieDataset
argument_list|,
name|conf
operator|.
name|isGenerateLegend
argument_list|()
argument_list|,
name|conf
operator|.
name|isGenerateTooltips
argument_list|()
argument_list|,
name|conf
operator|.
name|isGenerateUrls
argument_list|()
argument_list|)
expr_stmt|;
block|}
if|else if
condition|(
literal|"RingChart"
operator|.
name|equalsIgnoreCase
argument_list|(
name|chartType
argument_list|)
condition|)
block|{
name|chart
operator|=
name|ChartFactory
operator|.
name|createRingChart
argument_list|(
name|conf
operator|.
name|getTitle
argument_list|()
argument_list|,
name|pieDataset
argument_list|,
name|conf
operator|.
name|isGenerateLegend
argument_list|()
argument_list|,
name|conf
operator|.
name|isGenerateTooltips
argument_list|()
argument_list|,
name|conf
operator|.
name|isGenerateUrls
argument_list|()
argument_list|)
expr_stmt|;
block|}
if|else if
condition|(
literal|"StackedAreaChart"
operator|.
name|equalsIgnoreCase
argument_list|(
name|chartType
argument_list|)
condition|)
block|{
name|chart
operator|=
name|ChartFactory
operator|.
name|createStackedAreaChart
argument_list|(
name|conf
operator|.
name|getTitle
argument_list|()
argument_list|,
name|conf
operator|.
name|getCategoryAxisLabel
argument_list|()
argument_list|,
name|conf
operator|.
name|getValueAxisLabel
argument_list|()
argument_list|,
name|categoryDataset
argument_list|,
name|conf
operator|.
name|getOrientation
argument_list|()
argument_list|,
name|conf
operator|.
name|isGenerateLegend
argument_list|()
argument_list|,
name|conf
operator|.
name|isGenerateTooltips
argument_list|()
argument_list|,
name|conf
operator|.
name|isGenerateUrls
argument_list|()
argument_list|)
expr_stmt|;
block|}
if|else if
condition|(
literal|"StackedBarChart"
operator|.
name|equalsIgnoreCase
argument_list|(
name|chartType
argument_list|)
condition|)
block|{
name|chart
operator|=
name|ChartFactory
operator|.
name|createStackedBarChart
argument_list|(
name|conf
operator|.
name|getTitle
argument_list|()
argument_list|,
name|conf
operator|.
name|getDomainAxisLabel
argument_list|()
argument_list|,
name|conf
operator|.
name|getRangeAxisLabel
argument_list|()
argument_list|,
name|categoryDataset
argument_list|,
name|conf
operator|.
name|getOrientation
argument_list|()
argument_list|,
name|conf
operator|.
name|isGenerateLegend
argument_list|()
argument_list|,
name|conf
operator|.
name|isGenerateTooltips
argument_list|()
argument_list|,
name|conf
operator|.
name|isGenerateUrls
argument_list|()
argument_list|)
expr_stmt|;
block|}
if|else if
condition|(
literal|"StackedBarChart3D"
operator|.
name|equalsIgnoreCase
argument_list|(
name|chartType
argument_list|)
condition|)
block|{
name|chart
operator|=
name|ChartFactory
operator|.
name|createStackedBarChart3D
argument_list|(
name|conf
operator|.
name|getTitle
argument_list|()
argument_list|,
name|conf
operator|.
name|getCategoryAxisLabel
argument_list|()
argument_list|,
name|conf
operator|.
name|getValueAxisLabel
argument_list|()
argument_list|,
name|categoryDataset
argument_list|,
name|conf
operator|.
name|getOrientation
argument_list|()
argument_list|,
name|conf
operator|.
name|isGenerateLegend
argument_list|()
argument_list|,
name|conf
operator|.
name|isGenerateTooltips
argument_list|()
argument_list|,
name|conf
operator|.
name|isGenerateUrls
argument_list|()
argument_list|)
expr_stmt|;
block|}
if|else if
condition|(
literal|"WaterfallChart"
operator|.
name|equalsIgnoreCase
argument_list|(
name|chartType
argument_list|)
condition|)
block|{
name|chart
operator|=
name|ChartFactory
operator|.
name|createWaterfallChart
argument_list|(
name|conf
operator|.
name|getTitle
argument_list|()
argument_list|,
name|conf
operator|.
name|getCategoryAxisLabel
argument_list|()
argument_list|,
name|conf
operator|.
name|getValueAxisLabel
argument_list|()
argument_list|,
name|categoryDataset
argument_list|,
name|conf
operator|.
name|getOrientation
argument_list|()
argument_list|,
name|conf
operator|.
name|isGenerateLegend
argument_list|()
argument_list|,
name|conf
operator|.
name|isGenerateTooltips
argument_list|()
argument_list|,
name|conf
operator|.
name|isGenerateUrls
argument_list|()
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|logger
operator|.
name|error
argument_list|(
literal|"Illegal chartype"
argument_list|)
expr_stmt|;
block|}
return|return
name|chart
return|;
block|}
block|}
end_class

end_unit

