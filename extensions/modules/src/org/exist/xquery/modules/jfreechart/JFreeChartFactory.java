begin_unit|revision:1.0.0;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  *  eXist Open Source Native XML Database  *  Copyright (C) 2009-2013 The eXist-db Project  *  http://exist-db.org  *  *  This program is free software; you can redistribute it and/or  *  modify it under the terms of the GNU Lesser General Public License  *  as published by the Free Software Foundation; either version 2  *  of the License, or (at your option) any later version.  *  *  This program is distributed in the hope that it will be useful,  *  but WITHOUT ANY WARRANTY; without even the implied warranty of  *  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the  *  GNU Lesser General Public License for more details.  *  *  You should have received a copy of the GNU Lesser General Public  *  License along with this library; if not, write to the Free Software  *  Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA  02110-1301  USA  *  *  $Id$  */
end_comment

begin_package
package|package
name|org
operator|.
name|exist
operator|.
name|xquery
operator|.
name|modules
operator|.
name|jfreechart
package|;
end_package

begin_import
import|import
name|java
operator|.
name|awt
operator|.
name|Color
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|InputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|lang
operator|.
name|reflect
operator|.
name|Constructor
import|;
end_import

begin_import
import|import
name|java
operator|.
name|text
operator|.
name|DecimalFormat
import|;
end_import

begin_import
import|import
name|java
operator|.
name|text
operator|.
name|NumberFormat
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|StringTokenizer
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|log4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|xquery
operator|.
name|XPathException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|jfree
operator|.
name|chart
operator|.
name|ChartFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|jfree
operator|.
name|chart
operator|.
name|JFreeChart
import|;
end_import

begin_import
import|import
name|org
operator|.
name|jfree
operator|.
name|chart
operator|.
name|axis
operator|.
name|CategoryLabelPositions
import|;
end_import

begin_import
import|import
name|org
operator|.
name|jfree
operator|.
name|chart
operator|.
name|labels
operator|.
name|CategoryItemLabelGenerator
import|;
end_import

begin_import
import|import
name|org
operator|.
name|jfree
operator|.
name|chart
operator|.
name|labels
operator|.
name|StandardCategoryToolTipGenerator
import|;
end_import

begin_import
import|import
name|org
operator|.
name|jfree
operator|.
name|chart
operator|.
name|labels
operator|.
name|StandardPieSectionLabelGenerator
import|;
end_import

begin_import
import|import
name|org
operator|.
name|jfree
operator|.
name|chart
operator|.
name|plot
operator|.
name|CategoryPlot
import|;
end_import

begin_import
import|import
name|org
operator|.
name|jfree
operator|.
name|chart
operator|.
name|plot
operator|.
name|PiePlot
import|;
end_import

begin_import
import|import
name|org
operator|.
name|jfree
operator|.
name|chart
operator|.
name|plot
operator|.
name|MultiplePiePlot
import|;
end_import

begin_import
import|import
name|org
operator|.
name|jfree
operator|.
name|chart
operator|.
name|plot
operator|.
name|SpiderWebPlot
import|;
end_import

begin_import
import|import
name|org
operator|.
name|jfree
operator|.
name|chart
operator|.
name|renderer
operator|.
name|category
operator|.
name|CategoryItemRenderer
import|;
end_import

begin_import
import|import
name|org
operator|.
name|jfree
operator|.
name|chart
operator|.
name|title
operator|.
name|LegendTitle
import|;
end_import

begin_import
import|import
name|org
operator|.
name|jfree
operator|.
name|chart
operator|.
name|title
operator|.
name|TextTitle
import|;
end_import

begin_import
import|import
name|org
operator|.
name|jfree
operator|.
name|data
operator|.
name|category
operator|.
name|CategoryDataset
import|;
end_import

begin_import
import|import
name|org
operator|.
name|jfree
operator|.
name|data
operator|.
name|general
operator|.
name|PieDataset
import|;
end_import

begin_import
import|import
name|org
operator|.
name|jfree
operator|.
name|data
operator|.
name|xml
operator|.
name|DatasetReader
import|;
end_import

begin_import
import|import
name|org
operator|.
name|jfree
operator|.
name|ui
operator|.
name|RectangleEdge
import|;
end_import

begin_comment
comment|/**  * Wrapper for JFreeChart's ChartFactory.  *  * @author Dannes Wessels (dizzzz@exist-db.org)  * @author Andrzej Taramina (andrzej@chaeron.com)  * @author Leif-JÃ¶ran Olsson (ljo@exist-db.org)  */
end_comment

begin_class
specifier|public
class|class
name|JFreeChartFactory
block|{
specifier|private
specifier|final
specifier|static
name|Logger
name|logger
init|=
name|Logger
operator|.
name|getLogger
argument_list|(
name|JFreeChartFactory
operator|.
name|class
argument_list|)
decl_stmt|;
comment|/**      *  Create JFreeChart graph using the supplied parameters.      *      * @param chartType One of the many chart types.      * @param conf      Chart configuration      * @param is        Inputstream containing chart data      * @return          Initialized chart or NULL in case of issues.      * @throws IOException Thrown when a problem is reported while parsing XML data.      */
specifier|public
specifier|static
name|JFreeChart
name|createJFreeChart
parameter_list|(
name|String
name|chartType
parameter_list|,
name|Configuration
name|conf
parameter_list|,
name|InputStream
name|is
parameter_list|)
throws|throws
name|XPathException
block|{
name|logger
operator|.
name|debug
argument_list|(
literal|"Generating "
operator|+
name|chartType
argument_list|)
expr_stmt|;
comment|// Currently two dataset types supported
name|CategoryDataset
name|categoryDataset
init|=
literal|null
decl_stmt|;
name|PieDataset
name|pieDataset
init|=
literal|null
decl_stmt|;
try|try
block|{
if|if
condition|(
literal|"PieChart"
operator|.
name|equals
argument_list|(
name|chartType
argument_list|)
operator|||
literal|"PieChart3D"
operator|.
name|equals
argument_list|(
name|chartType
argument_list|)
operator|||
literal|"RingChart"
operator|.
name|equals
argument_list|(
name|chartType
argument_list|)
condition|)
block|{
name|logger
operator|.
name|debug
argument_list|(
literal|"Reading XML PieDataset"
argument_list|)
expr_stmt|;
name|pieDataset
operator|=
name|DatasetReader
operator|.
name|readPieDatasetFromXML
argument_list|(
name|is
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|logger
operator|.
name|debug
argument_list|(
literal|"Reading XML CategoryDataset"
argument_list|)
expr_stmt|;
name|categoryDataset
operator|=
name|DatasetReader
operator|.
name|readCategoryDatasetFromXML
argument_list|(
name|is
argument_list|)
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
name|IOException
name|ex
parameter_list|)
block|{
throw|throw
operator|new
name|XPathException
argument_list|(
name|ex
operator|.
name|getMessage
argument_list|()
argument_list|)
throw|;
block|}
finally|finally
block|{
try|try
block|{
name|is
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|ex
parameter_list|)
block|{
comment|//
block|}
block|}
comment|// Return chart
name|JFreeChart
name|chart
init|=
literal|null
decl_stmt|;
comment|// Big chart type switch
if|if
condition|(
literal|"AreaChart"
operator|.
name|equalsIgnoreCase
argument_list|(
name|chartType
argument_list|)
condition|)
block|{
name|chart
operator|=
name|ChartFactory
operator|.
name|createAreaChart
argument_list|(
name|conf
operator|.
name|getTitle
argument_list|()
argument_list|,
name|conf
operator|.
name|getCategoryAxisLabel
argument_list|()
argument_list|,
name|conf
operator|.
name|getValueAxisLabel
argument_list|()
argument_list|,
name|categoryDataset
argument_list|,
name|conf
operator|.
name|getOrientation
argument_list|()
argument_list|,
name|conf
operator|.
name|isGenerateLegend
argument_list|()
argument_list|,
name|conf
operator|.
name|isGenerateTooltips
argument_list|()
argument_list|,
name|conf
operator|.
name|isGenerateUrls
argument_list|()
argument_list|)
expr_stmt|;
name|setCategoryChartParameters
argument_list|(
name|chart
argument_list|,
name|conf
argument_list|)
expr_stmt|;
block|}
if|else if
condition|(
literal|"BarChart"
operator|.
name|equalsIgnoreCase
argument_list|(
name|chartType
argument_list|)
condition|)
block|{
name|chart
operator|=
name|ChartFactory
operator|.
name|createBarChart
argument_list|(
name|conf
operator|.
name|getTitle
argument_list|()
argument_list|,
name|conf
operator|.
name|getCategoryAxisLabel
argument_list|()
argument_list|,
name|conf
operator|.
name|getValueAxisLabel
argument_list|()
argument_list|,
name|categoryDataset
argument_list|,
name|conf
operator|.
name|getOrientation
argument_list|()
argument_list|,
name|conf
operator|.
name|isGenerateLegend
argument_list|()
argument_list|,
name|conf
operator|.
name|isGenerateTooltips
argument_list|()
argument_list|,
name|conf
operator|.
name|isGenerateUrls
argument_list|()
argument_list|)
expr_stmt|;
name|setCategoryChartParameters
argument_list|(
name|chart
argument_list|,
name|conf
argument_list|)
expr_stmt|;
block|}
if|else if
condition|(
literal|"BarChart3D"
operator|.
name|equalsIgnoreCase
argument_list|(
name|chartType
argument_list|)
condition|)
block|{
name|chart
operator|=
name|ChartFactory
operator|.
name|createBarChart3D
argument_list|(
name|conf
operator|.
name|getTitle
argument_list|()
argument_list|,
name|conf
operator|.
name|getCategoryAxisLabel
argument_list|()
argument_list|,
name|conf
operator|.
name|getValueAxisLabel
argument_list|()
argument_list|,
name|categoryDataset
argument_list|,
name|conf
operator|.
name|getOrientation
argument_list|()
argument_list|,
name|conf
operator|.
name|isGenerateLegend
argument_list|()
argument_list|,
name|conf
operator|.
name|isGenerateTooltips
argument_list|()
argument_list|,
name|conf
operator|.
name|isGenerateUrls
argument_list|()
argument_list|)
expr_stmt|;
name|setCategoryChartParameters
argument_list|(
name|chart
argument_list|,
name|conf
argument_list|)
expr_stmt|;
block|}
if|else if
condition|(
literal|"LineChart"
operator|.
name|equalsIgnoreCase
argument_list|(
name|chartType
argument_list|)
condition|)
block|{
name|chart
operator|=
name|ChartFactory
operator|.
name|createLineChart
argument_list|(
name|conf
operator|.
name|getTitle
argument_list|()
argument_list|,
name|conf
operator|.
name|getCategoryAxisLabel
argument_list|()
argument_list|,
name|conf
operator|.
name|getValueAxisLabel
argument_list|()
argument_list|,
name|categoryDataset
argument_list|,
name|conf
operator|.
name|getOrientation
argument_list|()
argument_list|,
name|conf
operator|.
name|isGenerateLegend
argument_list|()
argument_list|,
name|conf
operator|.
name|isGenerateTooltips
argument_list|()
argument_list|,
name|conf
operator|.
name|isGenerateUrls
argument_list|()
argument_list|)
expr_stmt|;
name|setCategoryChartParameters
argument_list|(
name|chart
argument_list|,
name|conf
argument_list|)
expr_stmt|;
block|}
if|else if
condition|(
literal|"LineChart3D"
operator|.
name|equalsIgnoreCase
argument_list|(
name|chartType
argument_list|)
condition|)
block|{
name|chart
operator|=
name|ChartFactory
operator|.
name|createLineChart3D
argument_list|(
name|conf
operator|.
name|getTitle
argument_list|()
argument_list|,
name|conf
operator|.
name|getCategoryAxisLabel
argument_list|()
argument_list|,
name|conf
operator|.
name|getValueAxisLabel
argument_list|()
argument_list|,
name|categoryDataset
argument_list|,
name|conf
operator|.
name|getOrientation
argument_list|()
argument_list|,
name|conf
operator|.
name|isGenerateLegend
argument_list|()
argument_list|,
name|conf
operator|.
name|isGenerateTooltips
argument_list|()
argument_list|,
name|conf
operator|.
name|isGenerateUrls
argument_list|()
argument_list|)
expr_stmt|;
name|setCategoryChartParameters
argument_list|(
name|chart
argument_list|,
name|conf
argument_list|)
expr_stmt|;
block|}
if|else if
condition|(
literal|"MultiplePieChart"
operator|.
name|equalsIgnoreCase
argument_list|(
name|chartType
argument_list|)
condition|)
block|{
name|chart
operator|=
name|ChartFactory
operator|.
name|createMultiplePieChart
argument_list|(
name|conf
operator|.
name|getTitle
argument_list|()
argument_list|,
name|categoryDataset
argument_list|,
name|conf
operator|.
name|getOrder
argument_list|()
argument_list|,
name|conf
operator|.
name|isGenerateLegend
argument_list|()
argument_list|,
name|conf
operator|.
name|isGenerateTooltips
argument_list|()
argument_list|,
name|conf
operator|.
name|isGenerateUrls
argument_list|()
argument_list|)
expr_stmt|;
name|setPieChartParameters
argument_list|(
name|chart
argument_list|,
name|conf
argument_list|)
expr_stmt|;
block|}
if|else if
condition|(
literal|"MultiplePieChart3D"
operator|.
name|equalsIgnoreCase
argument_list|(
name|chartType
argument_list|)
condition|)
block|{
name|chart
operator|=
name|ChartFactory
operator|.
name|createMultiplePieChart3D
argument_list|(
name|conf
operator|.
name|getTitle
argument_list|()
argument_list|,
name|categoryDataset
argument_list|,
name|conf
operator|.
name|getOrder
argument_list|()
argument_list|,
name|conf
operator|.
name|isGenerateLegend
argument_list|()
argument_list|,
name|conf
operator|.
name|isGenerateTooltips
argument_list|()
argument_list|,
name|conf
operator|.
name|isGenerateUrls
argument_list|()
argument_list|)
expr_stmt|;
name|setPieChartParameters
argument_list|(
name|chart
argument_list|,
name|conf
argument_list|)
expr_stmt|;
block|}
if|else if
condition|(
literal|"PieChart"
operator|.
name|equalsIgnoreCase
argument_list|(
name|chartType
argument_list|)
condition|)
block|{
name|chart
operator|=
name|ChartFactory
operator|.
name|createPieChart
argument_list|(
name|conf
operator|.
name|getTitle
argument_list|()
argument_list|,
name|pieDataset
argument_list|,
name|conf
operator|.
name|isGenerateLegend
argument_list|()
argument_list|,
name|conf
operator|.
name|isGenerateTooltips
argument_list|()
argument_list|,
name|conf
operator|.
name|isGenerateUrls
argument_list|()
argument_list|)
expr_stmt|;
name|setPieChartParameters
argument_list|(
name|chart
argument_list|,
name|conf
argument_list|)
expr_stmt|;
block|}
if|else if
condition|(
literal|"PieChart3D"
operator|.
name|equalsIgnoreCase
argument_list|(
name|chartType
argument_list|)
condition|)
block|{
name|chart
operator|=
name|ChartFactory
operator|.
name|createPieChart3D
argument_list|(
name|conf
operator|.
name|getTitle
argument_list|()
argument_list|,
name|pieDataset
argument_list|,
name|conf
operator|.
name|isGenerateLegend
argument_list|()
argument_list|,
name|conf
operator|.
name|isGenerateTooltips
argument_list|()
argument_list|,
name|conf
operator|.
name|isGenerateUrls
argument_list|()
argument_list|)
expr_stmt|;
name|setPieChartParameters
argument_list|(
name|chart
argument_list|,
name|conf
argument_list|)
expr_stmt|;
block|}
if|else if
condition|(
literal|"RingChart"
operator|.
name|equalsIgnoreCase
argument_list|(
name|chartType
argument_list|)
condition|)
block|{
name|chart
operator|=
name|ChartFactory
operator|.
name|createRingChart
argument_list|(
name|conf
operator|.
name|getTitle
argument_list|()
argument_list|,
name|pieDataset
argument_list|,
name|conf
operator|.
name|isGenerateLegend
argument_list|()
argument_list|,
name|conf
operator|.
name|isGenerateTooltips
argument_list|()
argument_list|,
name|conf
operator|.
name|isGenerateUrls
argument_list|()
argument_list|)
expr_stmt|;
name|setPieChartParameters
argument_list|(
name|chart
argument_list|,
name|conf
argument_list|)
expr_stmt|;
block|}
if|else if
condition|(
literal|"SpiderWebChart"
operator|.
name|equalsIgnoreCase
argument_list|(
name|chartType
argument_list|)
condition|)
block|{
name|SpiderWebPlot
name|plot
init|=
operator|new
name|SpiderWebPlot
argument_list|(
name|categoryDataset
argument_list|)
decl_stmt|;
if|if
condition|(
name|conf
operator|.
name|isGenerateTooltips
argument_list|()
condition|)
block|{
name|plot
operator|.
name|setToolTipGenerator
argument_list|(
operator|new
name|StandardCategoryToolTipGenerator
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|chart
operator|=
operator|new
name|JFreeChart
argument_list|(
name|conf
operator|.
name|getTitle
argument_list|()
argument_list|,
name|JFreeChart
operator|.
name|DEFAULT_TITLE_FONT
argument_list|,
name|plot
argument_list|,
literal|false
argument_list|)
expr_stmt|;
if|if
condition|(
name|conf
operator|.
name|isGenerateLegend
argument_list|()
condition|)
block|{
name|LegendTitle
name|legend
init|=
operator|new
name|LegendTitle
argument_list|(
name|plot
argument_list|)
decl_stmt|;
name|legend
operator|.
name|setPosition
argument_list|(
name|RectangleEdge
operator|.
name|BOTTOM
argument_list|)
expr_stmt|;
name|chart
operator|.
name|addSubtitle
argument_list|(
name|legend
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|TextTitle
name|subTitle
init|=
operator|new
name|TextTitle
argument_list|(
literal|" "
argument_list|)
decl_stmt|;
name|subTitle
operator|.
name|setPosition
argument_list|(
name|RectangleEdge
operator|.
name|BOTTOM
argument_list|)
expr_stmt|;
name|chart
operator|.
name|addSubtitle
argument_list|(
name|subTitle
argument_list|)
expr_stmt|;
block|}
name|setCategoryChartParameters
argument_list|(
name|chart
argument_list|,
name|conf
argument_list|)
expr_stmt|;
block|}
if|else if
condition|(
literal|"StackedAreaChart"
operator|.
name|equalsIgnoreCase
argument_list|(
name|chartType
argument_list|)
condition|)
block|{
name|chart
operator|=
name|ChartFactory
operator|.
name|createStackedAreaChart
argument_list|(
name|conf
operator|.
name|getTitle
argument_list|()
argument_list|,
name|conf
operator|.
name|getCategoryAxisLabel
argument_list|()
argument_list|,
name|conf
operator|.
name|getValueAxisLabel
argument_list|()
argument_list|,
name|categoryDataset
argument_list|,
name|conf
operator|.
name|getOrientation
argument_list|()
argument_list|,
name|conf
operator|.
name|isGenerateLegend
argument_list|()
argument_list|,
name|conf
operator|.
name|isGenerateTooltips
argument_list|()
argument_list|,
name|conf
operator|.
name|isGenerateUrls
argument_list|()
argument_list|)
expr_stmt|;
name|setCategoryChartParameters
argument_list|(
name|chart
argument_list|,
name|conf
argument_list|)
expr_stmt|;
block|}
if|else if
condition|(
literal|"StackedBarChart"
operator|.
name|equalsIgnoreCase
argument_list|(
name|chartType
argument_list|)
condition|)
block|{
name|chart
operator|=
name|ChartFactory
operator|.
name|createStackedBarChart
argument_list|(
name|conf
operator|.
name|getTitle
argument_list|()
argument_list|,
name|conf
operator|.
name|getDomainAxisLabel
argument_list|()
argument_list|,
name|conf
operator|.
name|getRangeAxisLabel
argument_list|()
argument_list|,
name|categoryDataset
argument_list|,
name|conf
operator|.
name|getOrientation
argument_list|()
argument_list|,
name|conf
operator|.
name|isGenerateLegend
argument_list|()
argument_list|,
name|conf
operator|.
name|isGenerateTooltips
argument_list|()
argument_list|,
name|conf
operator|.
name|isGenerateUrls
argument_list|()
argument_list|)
expr_stmt|;
name|setCategoryChartParameters
argument_list|(
name|chart
argument_list|,
name|conf
argument_list|)
expr_stmt|;
block|}
if|else if
condition|(
literal|"StackedBarChart3D"
operator|.
name|equalsIgnoreCase
argument_list|(
name|chartType
argument_list|)
condition|)
block|{
name|chart
operator|=
name|ChartFactory
operator|.
name|createStackedBarChart3D
argument_list|(
name|conf
operator|.
name|getTitle
argument_list|()
argument_list|,
name|conf
operator|.
name|getCategoryAxisLabel
argument_list|()
argument_list|,
name|conf
operator|.
name|getValueAxisLabel
argument_list|()
argument_list|,
name|categoryDataset
argument_list|,
name|conf
operator|.
name|getOrientation
argument_list|()
argument_list|,
name|conf
operator|.
name|isGenerateLegend
argument_list|()
argument_list|,
name|conf
operator|.
name|isGenerateTooltips
argument_list|()
argument_list|,
name|conf
operator|.
name|isGenerateUrls
argument_list|()
argument_list|)
expr_stmt|;
name|setCategoryChartParameters
argument_list|(
name|chart
argument_list|,
name|conf
argument_list|)
expr_stmt|;
block|}
if|else if
condition|(
literal|"WaterfallChart"
operator|.
name|equalsIgnoreCase
argument_list|(
name|chartType
argument_list|)
condition|)
block|{
name|chart
operator|=
name|ChartFactory
operator|.
name|createWaterfallChart
argument_list|(
name|conf
operator|.
name|getTitle
argument_list|()
argument_list|,
name|conf
operator|.
name|getCategoryAxisLabel
argument_list|()
argument_list|,
name|conf
operator|.
name|getValueAxisLabel
argument_list|()
argument_list|,
name|categoryDataset
argument_list|,
name|conf
operator|.
name|getOrientation
argument_list|()
argument_list|,
name|conf
operator|.
name|isGenerateLegend
argument_list|()
argument_list|,
name|conf
operator|.
name|isGenerateTooltips
argument_list|()
argument_list|,
name|conf
operator|.
name|isGenerateUrls
argument_list|()
argument_list|)
expr_stmt|;
name|setCategoryChartParameters
argument_list|(
name|chart
argument_list|,
name|conf
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|logger
operator|.
name|error
argument_list|(
literal|"Illegal chartype. Choose one of "
operator|+
literal|"AreaChart BarChart BarChart3D LineChart LineChart3D "
operator|+
literal|"MultiplePieChart MultiplePieChart3D PieChart PieChart3D "
operator|+
literal|"RingChart SpiderWebChart StackedAreaChart StackedBarChart "
operator|+
literal|"StackedBarChart3D WaterfallChart"
argument_list|)
expr_stmt|;
block|}
name|setCommonParameters
argument_list|(
name|chart
argument_list|,
name|conf
argument_list|)
expr_stmt|;
return|return
name|chart
return|;
block|}
specifier|private
specifier|static
name|void
name|setCategoryChartParameters
parameter_list|(
name|JFreeChart
name|chart
parameter_list|,
name|Configuration
name|config
parameter_list|)
throws|throws
name|XPathException
block|{
name|setCategoryRange
argument_list|(
name|chart
argument_list|,
name|config
argument_list|)
expr_stmt|;
name|setCategoryItemLabelGenerator
argument_list|(
name|chart
argument_list|,
name|config
argument_list|)
expr_stmt|;
name|setCategoryLabelPositions
argument_list|(
name|chart
argument_list|,
name|config
argument_list|)
expr_stmt|;
name|setSeriesColors
argument_list|(
name|chart
argument_list|,
name|config
argument_list|)
expr_stmt|;
name|setAxisColors
argument_list|(
name|chart
argument_list|,
name|config
argument_list|)
expr_stmt|;
block|}
specifier|private
specifier|static
name|void
name|setCategoryRange
parameter_list|(
name|JFreeChart
name|chart
parameter_list|,
name|Configuration
name|config
parameter_list|)
block|{
name|Double
name|rangeLowerBound
init|=
name|config
operator|.
name|getRangeLowerBound
argument_list|()
decl_stmt|;
name|Double
name|rangeUpperBound
init|=
name|config
operator|.
name|getRangeUpperBound
argument_list|()
decl_stmt|;
if|if
condition|(
name|rangeUpperBound
operator|!=
literal|null
condition|)
block|{
if|if
condition|(
name|chart
operator|.
name|getPlot
argument_list|()
operator|instanceof
name|SpiderWebPlot
condition|)
block|{
operator|(
operator|(
name|SpiderWebPlot
operator|)
name|chart
operator|.
name|getPlot
argument_list|()
operator|)
operator|.
name|setMaxValue
argument_list|(
name|rangeUpperBound
operator|.
name|doubleValue
argument_list|()
argument_list|)
expr_stmt|;
return|return;
block|}
else|else
block|{
operator|(
operator|(
name|CategoryPlot
operator|)
name|chart
operator|.
name|getPlot
argument_list|()
operator|)
operator|.
name|getRangeAxis
argument_list|()
operator|.
name|setUpperBound
argument_list|(
name|rangeUpperBound
operator|.
name|doubleValue
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
if|if
condition|(
name|rangeLowerBound
operator|!=
literal|null
condition|)
block|{
operator|(
operator|(
name|CategoryPlot
operator|)
name|chart
operator|.
name|getPlot
argument_list|()
operator|)
operator|.
name|getRangeAxis
argument_list|()
operator|.
name|setLowerBound
argument_list|(
name|rangeLowerBound
operator|.
name|doubleValue
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
specifier|private
specifier|static
name|void
name|setCategoryItemLabelGenerator
parameter_list|(
name|JFreeChart
name|chart
parameter_list|,
name|Configuration
name|config
parameter_list|)
throws|throws
name|XPathException
block|{
name|String
name|className
init|=
name|config
operator|.
name|getCategoryItemLabelGeneratorClass
argument_list|()
decl_stmt|;
name|CategoryItemLabelGenerator
name|generator
init|=
literal|null
decl_stmt|;
if|if
condition|(
name|className
operator|!=
literal|null
condition|)
block|{
try|try
block|{
name|Class
name|generatorClass
init|=
name|Class
operator|.
name|forName
argument_list|(
name|className
argument_list|)
decl_stmt|;
name|Class
index|[]
name|argsClass
init|=
operator|new
name|Class
index|[]
block|{
name|String
operator|.
name|class
block|,
name|NumberFormat
operator|.
name|class
block|}
decl_stmt|;
name|String
name|param
init|=
name|config
operator|.
name|getCategoryItemLabelGeneratorParameter
argument_list|()
decl_stmt|;
name|NumberFormat
name|fmt
init|=
operator|new
name|DecimalFormat
argument_list|(
name|config
operator|.
name|getCategoryItemLabelGeneratorNumberFormat
argument_list|()
argument_list|)
decl_stmt|;
name|Object
index|[]
name|args
init|=
operator|new
name|Object
index|[]
block|{
name|param
block|,
name|fmt
block|}
decl_stmt|;
name|Constructor
name|argsConstructor
init|=
name|generatorClass
operator|.
name|getConstructor
argument_list|(
name|argsClass
argument_list|)
decl_stmt|;
name|generator
operator|=
operator|(
name|CategoryItemLabelGenerator
operator|)
name|argsConstructor
operator|.
name|newInstance
argument_list|(
name|args
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
throw|throw
operator|(
operator|new
name|XPathException
argument_list|(
literal|"Cannot instantiate CategoryItemLabelGeneratorClass: "
operator|+
name|className
operator|+
literal|", exception: "
operator|+
name|e
argument_list|)
operator|)
throw|;
block|}
if|if
condition|(
name|chart
operator|.
name|getPlot
argument_list|()
operator|instanceof
name|SpiderWebPlot
condition|)
block|{
operator|(
operator|(
name|SpiderWebPlot
operator|)
name|chart
operator|.
name|getPlot
argument_list|()
operator|)
operator|.
name|setLabelGenerator
argument_list|(
name|generator
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|CategoryItemRenderer
name|renderer
init|=
operator|(
operator|(
name|CategoryPlot
operator|)
name|chart
operator|.
name|getPlot
argument_list|()
operator|)
operator|.
name|getRenderer
argument_list|()
decl_stmt|;
name|renderer
operator|.
name|setBaseItemLabelGenerator
argument_list|(
name|generator
argument_list|)
expr_stmt|;
name|renderer
operator|.
name|setItemLabelsVisible
argument_list|(
literal|true
argument_list|)
expr_stmt|;
block|}
block|}
block|}
specifier|private
specifier|static
name|void
name|setCategoryLabelPositions
parameter_list|(
name|JFreeChart
name|chart
parameter_list|,
name|Configuration
name|config
parameter_list|)
block|{
name|CategoryLabelPositions
name|positions
init|=
name|config
operator|.
name|getCategoryLabelPositions
argument_list|()
decl_stmt|;
if|if
condition|(
name|chart
operator|.
name|getPlot
argument_list|()
operator|instanceof
name|CategoryPlot
condition|)
block|{
operator|(
operator|(
name|CategoryPlot
operator|)
name|chart
operator|.
name|getPlot
argument_list|()
operator|)
operator|.
name|getDomainAxis
argument_list|()
operator|.
name|setCategoryLabelPositions
argument_list|(
name|positions
argument_list|)
expr_stmt|;
block|}
block|}
specifier|private
specifier|static
name|void
name|setSeriesColors
parameter_list|(
name|JFreeChart
name|chart
parameter_list|,
name|Configuration
name|config
parameter_list|)
block|{
name|String
name|seriesColors
init|=
name|config
operator|.
name|getSeriesColors
argument_list|()
decl_stmt|;
if|if
condition|(
name|chart
operator|.
name|getPlot
argument_list|()
operator|instanceof
name|SpiderWebPlot
condition|)
block|{
name|setSeriesColors
argument_list|(
operator|(
name|SpiderWebPlot
operator|)
name|chart
operator|.
name|getPlot
argument_list|()
argument_list|,
name|seriesColors
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|CategoryItemRenderer
name|renderer
init|=
operator|(
operator|(
name|CategoryPlot
operator|)
name|chart
operator|.
name|getPlot
argument_list|()
operator|)
operator|.
name|getRenderer
argument_list|()
decl_stmt|;
name|setSeriesColors
argument_list|(
name|renderer
argument_list|,
name|seriesColors
argument_list|)
expr_stmt|;
block|}
block|}
specifier|private
specifier|static
name|void
name|setSeriesColors
parameter_list|(
name|Object
name|renderer
parameter_list|,
specifier|final
name|String
name|seriesColors
parameter_list|)
block|{
if|if
condition|(
name|seriesColors
operator|!=
literal|null
condition|)
block|{
name|StringTokenizer
name|st
init|=
operator|new
name|StringTokenizer
argument_list|(
name|seriesColors
argument_list|,
literal|","
argument_list|)
decl_stmt|;
name|int
name|i
init|=
literal|0
decl_stmt|;
while|while
condition|(
name|st
operator|.
name|hasMoreTokens
argument_list|()
condition|)
block|{
name|String
name|colorName
init|=
name|st
operator|.
name|nextToken
argument_list|()
operator|.
name|trim
argument_list|()
decl_stmt|;
name|Color
name|color
init|=
literal|null
decl_stmt|;
try|try
block|{
name|color
operator|=
name|Colour
operator|.
name|getColor
argument_list|(
name|colorName
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|XPathException
name|e
parameter_list|)
block|{
block|}
if|if
condition|(
name|color
operator|!=
literal|null
condition|)
block|{
if|if
condition|(
name|renderer
operator|instanceof
name|SpiderWebPlot
condition|)
block|{
operator|(
operator|(
name|SpiderWebPlot
operator|)
name|renderer
operator|)
operator|.
name|setSeriesPaint
argument_list|(
name|i
argument_list|,
name|color
argument_list|)
expr_stmt|;
block|}
else|else
block|{
operator|(
operator|(
name|CategoryItemRenderer
operator|)
name|renderer
operator|)
operator|.
name|setSeriesPaint
argument_list|(
name|i
argument_list|,
name|color
argument_list|)
expr_stmt|;
block|}
block|}
else|else
block|{
name|logger
operator|.
name|warn
argument_list|(
literal|"Invalid colour name or hex value specified for SeriesColors: "
operator|+
name|colorName
operator|+
literal|", default colour will be used instead."
argument_list|)
expr_stmt|;
block|}
name|i
operator|++
expr_stmt|;
block|}
block|}
block|}
specifier|private
specifier|static
name|void
name|setAxisColors
parameter_list|(
name|JFreeChart
name|chart
parameter_list|,
name|Configuration
name|config
parameter_list|)
block|{
name|Color
name|categoryAxisColor
init|=
name|config
operator|.
name|getCategoryAxisColor
argument_list|()
decl_stmt|;
name|Color
name|valueAxisColor
init|=
name|config
operator|.
name|getValueAxisColor
argument_list|()
decl_stmt|;
if|if
condition|(
name|categoryAxisColor
operator|!=
literal|null
condition|)
block|{
if|if
condition|(
name|chart
operator|.
name|getPlot
argument_list|()
operator|instanceof
name|SpiderWebPlot
condition|)
block|{
operator|(
operator|(
name|SpiderWebPlot
operator|)
name|chart
operator|.
name|getPlot
argument_list|()
operator|)
operator|.
name|setAxisLinePaint
argument_list|(
name|categoryAxisColor
argument_list|)
expr_stmt|;
block|}
else|else
block|{
operator|(
operator|(
name|CategoryPlot
operator|)
name|chart
operator|.
name|getPlot
argument_list|()
operator|)
operator|.
name|getDomainAxis
argument_list|()
operator|.
name|setLabelPaint
argument_list|(
name|categoryAxisColor
argument_list|)
expr_stmt|;
block|}
block|}
if|if
condition|(
name|valueAxisColor
operator|!=
literal|null
condition|)
block|{
if|if
condition|(
name|chart
operator|.
name|getPlot
argument_list|()
operator|instanceof
name|SpiderWebPlot
condition|)
block|{
comment|//((SpiderWebPlot) chart.getPlot()).setAxisLinePaint(valueAxisColor);
block|}
else|else
block|{
operator|(
operator|(
name|CategoryPlot
operator|)
name|chart
operator|.
name|getPlot
argument_list|()
operator|)
operator|.
name|getRangeAxis
argument_list|()
operator|.
name|setLabelPaint
argument_list|(
name|valueAxisColor
argument_list|)
expr_stmt|;
block|}
block|}
block|}
specifier|private
specifier|static
name|void
name|setPieChartParameters
parameter_list|(
name|JFreeChart
name|chart
parameter_list|,
name|Configuration
name|config
parameter_list|)
block|{
name|setPieSectionLabel
argument_list|(
name|chart
argument_list|,
name|config
argument_list|)
expr_stmt|;
name|setSectionColors
argument_list|(
name|chart
argument_list|,
name|config
argument_list|)
expr_stmt|;
block|}
specifier|private
specifier|static
name|void
name|setPieSectionLabel
parameter_list|(
name|JFreeChart
name|chart
parameter_list|,
name|Configuration
name|config
parameter_list|)
block|{
name|String
name|pieSectionLabel
init|=
name|config
operator|.
name|getPieSectionLabel
argument_list|()
decl_stmt|;
name|String
name|pieSectionNumberFormat
init|=
name|config
operator|.
name|getPieSectionNumberFormat
argument_list|()
decl_stmt|;
name|String
name|pieSectionPercentFormat
init|=
name|config
operator|.
name|getPieSectionPercentFormat
argument_list|()
decl_stmt|;
if|if
condition|(
name|pieSectionLabel
operator|!=
literal|null
condition|)
block|{
if|if
condition|(
name|chart
operator|.
name|getPlot
argument_list|()
operator|instanceof
name|MultiplePiePlot
condition|)
block|{
operator|(
operator|(
name|PiePlot
operator|)
operator|(
operator|(
name|MultiplePiePlot
operator|)
name|chart
operator|.
name|getPlot
argument_list|()
operator|)
operator|.
name|getPieChart
argument_list|()
operator|.
name|getPlot
argument_list|()
operator|)
operator|.
name|setLabelGenerator
argument_list|(
operator|new
name|StandardPieSectionLabelGenerator
argument_list|(
name|pieSectionLabel
argument_list|,
operator|new
name|DecimalFormat
argument_list|(
name|pieSectionNumberFormat
argument_list|)
argument_list|,
operator|new
name|DecimalFormat
argument_list|(
name|pieSectionPercentFormat
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
else|else
block|{
operator|(
operator|(
name|PiePlot
operator|)
name|chart
operator|.
name|getPlot
argument_list|()
operator|)
operator|.
name|setLabelGenerator
argument_list|(
operator|new
name|StandardPieSectionLabelGenerator
argument_list|(
name|pieSectionLabel
argument_list|,
operator|new
name|DecimalFormat
argument_list|(
name|pieSectionNumberFormat
argument_list|)
argument_list|,
operator|new
name|DecimalFormat
argument_list|(
name|pieSectionPercentFormat
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
block|}
specifier|private
specifier|static
name|void
name|setSectionColors
parameter_list|(
name|JFreeChart
name|chart
parameter_list|,
name|Configuration
name|config
parameter_list|)
block|{
name|String
name|sectionColors
init|=
name|config
operator|.
name|getSectionColors
argument_list|()
decl_stmt|;
name|String
name|sectionColorsDelimiter
init|=
name|config
operator|.
name|getSectionColorsDelimiter
argument_list|()
decl_stmt|;
if|if
condition|(
name|sectionColors
operator|!=
literal|null
condition|)
block|{
name|PiePlot
name|plot
init|=
operator|(
operator|(
name|PiePlot
operator|)
name|chart
operator|.
name|getPlot
argument_list|()
operator|)
decl_stmt|;
name|StringTokenizer
name|st
init|=
operator|new
name|StringTokenizer
argument_list|(
name|sectionColors
argument_list|,
name|sectionColorsDelimiter
argument_list|)
decl_stmt|;
while|while
condition|(
name|st
operator|.
name|hasMoreTokens
argument_list|()
condition|)
block|{
name|String
name|sectionName
init|=
name|st
operator|.
name|nextToken
argument_list|()
operator|.
name|trim
argument_list|()
decl_stmt|;
name|String
name|colorName
init|=
literal|""
decl_stmt|;
if|if
condition|(
name|st
operator|.
name|hasMoreTokens
argument_list|()
condition|)
block|{
name|colorName
operator|=
name|st
operator|.
name|nextToken
argument_list|()
operator|.
name|trim
argument_list|()
expr_stmt|;
block|}
name|Color
name|color
init|=
literal|null
decl_stmt|;
try|try
block|{
name|color
operator|=
name|Colour
operator|.
name|getColor
argument_list|(
name|colorName
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|XPathException
name|e
parameter_list|)
block|{
block|}
if|if
condition|(
name|color
operator|!=
literal|null
condition|)
block|{
name|plot
operator|.
name|setSectionPaint
argument_list|(
name|sectionName
argument_list|,
name|color
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|logger
operator|.
name|warn
argument_list|(
literal|"Invalid colour name or hex value specified for SectionColors: "
operator|+
name|colorName
operator|+
literal|", default colour will be used instead. Section Name: "
operator|+
name|sectionName
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
specifier|private
specifier|static
name|void
name|setCommonParameters
parameter_list|(
name|JFreeChart
name|chart
parameter_list|,
name|Configuration
name|config
parameter_list|)
block|{
name|setColors
argument_list|(
name|chart
argument_list|,
name|config
argument_list|)
expr_stmt|;
block|}
specifier|private
specifier|static
name|void
name|setColors
parameter_list|(
name|JFreeChart
name|chart
parameter_list|,
name|Configuration
name|config
parameter_list|)
block|{
name|Color
name|titleColor
init|=
name|config
operator|.
name|getTitleColor
argument_list|()
decl_stmt|;
name|Color
name|chartBackgroundColor
init|=
name|config
operator|.
name|getChartBackgroundColor
argument_list|()
decl_stmt|;
name|Color
name|plotBackgroundColor
init|=
name|config
operator|.
name|getPlotBackgroundColor
argument_list|()
decl_stmt|;
if|if
condition|(
name|titleColor
operator|!=
literal|null
condition|)
block|{
name|chart
operator|.
name|getTitle
argument_list|()
operator|.
name|setPaint
argument_list|(
name|titleColor
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|chartBackgroundColor
operator|!=
literal|null
condition|)
block|{
name|chart
operator|.
name|setBackgroundPaint
argument_list|(
name|chartBackgroundColor
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|plotBackgroundColor
operator|!=
literal|null
condition|)
block|{
name|chart
operator|.
name|getPlot
argument_list|()
operator|.
name|setBackgroundPaint
argument_list|(
name|plotBackgroundColor
argument_list|)
expr_stmt|;
block|}
block|}
block|}
end_class

end_unit

