begin_unit|revision:1.0.0;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  *  eXist Scheduler Module Extension GetSheduledJobs  *  Copyright (C) 2006-09 Adam Retter<adam.retter@devon.gov.uk>  *  www.adamretter.co.uk  *    *  This program is free software; you can redistribute it and/or  *  modify it under the terms of the GNU Lesser General Public License  *  as published by the Free Software Foundation; either version 2  *  of the License, or (at your option) any later version.  *  *  This program is distributed in the hope that it will be useful,  *  but WITHOUT ANY WARRANTY; without even the implied warranty of  *  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the  *  GNU Lesser General Public License for more details.  *  *  You should have received a copy of the GNU Lesser General Public License  *  along with this program; if not, write to the Free Software Foundation  *  Inc., 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301, USA.  *    *  $Id$  */
end_comment

begin_package
package|package
name|org
operator|.
name|exist
operator|.
name|xquery
operator|.
name|modules
operator|.
name|scheduler
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Date
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|dom
operator|.
name|QName
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|scheduler
operator|.
name|ScheduledJobInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|scheduler
operator|.
name|Scheduler
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|scheduler
operator|.
name|UserJob
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|security
operator|.
name|User
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|xquery
operator|.
name|BasicFunction
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|xquery
operator|.
name|Cardinality
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|xquery
operator|.
name|FunctionSignature
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|xquery
operator|.
name|XPathException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|xquery
operator|.
name|XQueryContext
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|xquery
operator|.
name|modules
operator|.
name|ModuleUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|xquery
operator|.
name|value
operator|.
name|DateTimeValue
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|xquery
operator|.
name|value
operator|.
name|FunctionReturnSequenceType
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|xquery
operator|.
name|value
operator|.
name|Sequence
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|xquery
operator|.
name|value
operator|.
name|Type
import|;
end_import

begin_import
import|import
name|org
operator|.
name|xml
operator|.
name|sax
operator|.
name|SAXException
import|;
end_import

begin_comment
comment|/**  * eXist Scheduler Module Extension GetScheduledJobs  *   * Retrieves details of Jobs that have been Scheduled  *   * @author Adam Retter<adam.retter@devon.gov.uk>  * @author Loren Cahlander<loren@syntactica.com>  * @serial 2007-12-04  * @serial 2009-07-09  * @version 1.3  *  * @see org.exist.xquery.BasicFunction#BasicFunction(org.exist.xquery.XQueryContext, org.exist.xquery.FunctionSignature)  */
end_comment

begin_class
specifier|public
class|class
name|GetScheduledJobs
extends|extends
name|BasicFunction
block|{
specifier|private
name|Scheduler
name|scheduler
init|=
literal|null
decl_stmt|;
specifier|public
specifier|final
specifier|static
name|FunctionSignature
name|signature
init|=
operator|new
name|FunctionSignature
argument_list|(
operator|new
name|QName
argument_list|(
literal|"get-scheduled-jobs"
argument_list|,
name|SchedulerModule
operator|.
name|NAMESPACE_URI
argument_list|,
name|SchedulerModule
operator|.
name|PREFIX
argument_list|)
argument_list|,
literal|"Gets the details of all scheduled jobs in the form: "
operator|+
literal|"<scheduler:jobs xmlns:scheduler=\"http://exist-db.org/xquery/scheduler\" count=\"iJobs\">"
operator|+
literal|"<scheduler:group name=\"group\">"
operator|+
literal|"<scheduler:job name=\"\">"
operator|+
literal|"<scheduler:trigger name=\"\">"
operator|+
literal|"<expression></expression>"
operator|+
literal|"<state></state>"
operator|+
literal|"<start></start>"
operator|+
literal|"<end></end>"
operator|+
literal|"<previous></previous>"
operator|+
literal|"<next></next>"
operator|+
literal|"<final></final>"
operator|+
literal|"</scheduler:trigger>"
operator|+
literal|"</scheduler:job>"
operator|+
literal|"</scheduler:group>"
operator|+
literal|"</scheduler:jobs>"
argument_list|,
literal|null
argument_list|,
operator|new
name|FunctionReturnSequenceType
argument_list|(
name|Type
operator|.
name|NODE
argument_list|,
name|Cardinality
operator|.
name|EXACTLY_ONE
argument_list|,
literal|"the XML containing the list of jobs"
argument_list|)
argument_list|)
decl_stmt|;
comment|/** 	 * GetScheduledJobs Constructor 	 *  	 * @param context	The Context of the calling XQuery 	 */
specifier|public
name|GetScheduledJobs
parameter_list|(
name|XQueryContext
name|context
parameter_list|,
name|FunctionSignature
name|signature
parameter_list|)
block|{
name|super
argument_list|(
name|context
argument_list|,
name|signature
argument_list|)
expr_stmt|;
name|scheduler
operator|=
name|context
operator|.
name|getBroker
argument_list|()
operator|.
name|getBrokerPool
argument_list|()
operator|.
name|getScheduler
argument_list|()
expr_stmt|;
block|}
comment|/** 	 * evaluate the call to the xquery function, 	 * it is really the main entry point of this class 	 *  	 * @param args		arguments from the  function call 	 * @param contextSequence	the Context Sequence to operate on (not used here internally!) 	 * @return		A sequence representing the result of the function call 	 *  	 * @see org.exist.xquery.BasicFunction#eval(org.exist.xquery.value.Sequence[], org.exist.xquery.value.Sequence) 	 */
specifier|public
name|Sequence
name|eval
parameter_list|(
name|Sequence
index|[]
name|args
parameter_list|,
name|Sequence
name|contextSequence
parameter_list|)
throws|throws
name|XPathException
block|{
name|User
name|user
init|=
name|context
operator|.
name|getUser
argument_list|()
decl_stmt|;
name|boolean
name|userhasDBARole
init|=
name|user
operator|.
name|hasDbaRole
argument_list|()
decl_stmt|;
name|StringBuffer
name|xmlBuf
init|=
operator|new
name|StringBuffer
argument_list|()
decl_stmt|;
name|int
name|iJobs
init|=
literal|0
decl_stmt|;
name|String
index|[]
name|groups
init|=
name|scheduler
operator|.
name|getJobGroupNames
argument_list|()
decl_stmt|;
name|ScheduledJobInfo
index|[]
name|scheduledJobs
init|=
name|scheduler
operator|.
name|getScheduledJobs
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|g
init|=
literal|0
init|;
name|g
operator|<
name|groups
operator|.
name|length
condition|;
name|g
operator|++
control|)
block|{
if|if
condition|(
name|userhasDBARole
operator|||
name|groups
index|[
name|g
index|]
operator|.
name|equals
argument_list|(
name|UserJob
operator|.
name|JOB_GROUP
argument_list|)
condition|)
block|{
name|xmlBuf
operator|.
name|append
argument_list|(
literal|"<"
operator|+
name|SchedulerModule
operator|.
name|PREFIX
operator|+
literal|":group name=\""
operator|+
name|groups
index|[
name|g
index|]
operator|+
literal|"\">"
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|j
init|=
literal|0
init|;
name|j
operator|<
name|scheduledJobs
operator|.
name|length
condition|;
name|j
operator|++
control|)
block|{
if|if
condition|(
name|scheduledJobs
index|[
name|j
index|]
operator|.
name|getGroup
argument_list|()
operator|.
name|equals
argument_list|(
name|groups
index|[
name|g
index|]
argument_list|)
condition|)
block|{
name|xmlBuf
operator|.
name|append
argument_list|(
literal|"<"
operator|+
name|SchedulerModule
operator|.
name|PREFIX
operator|+
literal|":job name=\""
operator|+
name|scheduledJobs
index|[
name|j
index|]
operator|.
name|getName
argument_list|()
operator|+
literal|"\">"
argument_list|)
expr_stmt|;
name|xmlBuf
operator|.
name|append
argument_list|(
literal|"<"
operator|+
name|SchedulerModule
operator|.
name|PREFIX
operator|+
literal|":trigger name=\""
operator|+
name|scheduledJobs
index|[
name|j
index|]
operator|.
name|getTriggerName
argument_list|()
operator|+
literal|"\">"
argument_list|)
expr_stmt|;
name|xmlBuf
operator|.
name|append
argument_list|(
literal|"<expression>"
argument_list|)
expr_stmt|;
name|xmlBuf
operator|.
name|append
argument_list|(
name|scheduledJobs
index|[
name|j
index|]
operator|.
name|getTriggerExpression
argument_list|()
argument_list|)
expr_stmt|;
name|xmlBuf
operator|.
name|append
argument_list|(
literal|"</expression>"
argument_list|)
expr_stmt|;
name|xmlBuf
operator|.
name|append
argument_list|(
literal|"<state>"
argument_list|)
expr_stmt|;
name|xmlBuf
operator|.
name|append
argument_list|(
name|scheduledJobs
index|[
name|j
index|]
operator|.
name|getTriggerState
argument_list|()
argument_list|)
expr_stmt|;
name|xmlBuf
operator|.
name|append
argument_list|(
literal|"</state>"
argument_list|)
expr_stmt|;
name|xmlBuf
operator|.
name|append
argument_list|(
literal|"<start>"
argument_list|)
expr_stmt|;
name|xmlBuf
operator|.
name|append
argument_list|(
operator|new
name|DateTimeValue
argument_list|(
name|scheduledJobs
index|[
name|j
index|]
operator|.
name|getStartTime
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|xmlBuf
operator|.
name|append
argument_list|(
literal|"</start>"
argument_list|)
expr_stmt|;
name|xmlBuf
operator|.
name|append
argument_list|(
literal|"<end>"
argument_list|)
expr_stmt|;
name|Date
name|endTime
init|=
name|scheduledJobs
index|[
name|j
index|]
operator|.
name|getEndTime
argument_list|()
decl_stmt|;
if|if
condition|(
name|endTime
operator|!=
literal|null
condition|)
block|{
name|xmlBuf
operator|.
name|append
argument_list|(
operator|new
name|DateTimeValue
argument_list|(
name|endTime
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|xmlBuf
operator|.
name|append
argument_list|(
literal|"</end>"
argument_list|)
expr_stmt|;
name|xmlBuf
operator|.
name|append
argument_list|(
literal|"<previous>"
argument_list|)
expr_stmt|;
name|Date
name|previousTime
init|=
name|scheduledJobs
index|[
name|j
index|]
operator|.
name|getPreviousFireTime
argument_list|()
decl_stmt|;
if|if
condition|(
name|previousTime
operator|!=
literal|null
condition|)
block|{
name|xmlBuf
operator|.
name|append
argument_list|(
operator|new
name|DateTimeValue
argument_list|(
name|scheduledJobs
index|[
name|j
index|]
operator|.
name|getPreviousFireTime
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|xmlBuf
operator|.
name|append
argument_list|(
literal|"</previous>"
argument_list|)
expr_stmt|;
name|xmlBuf
operator|.
name|append
argument_list|(
literal|"<next>"
argument_list|)
expr_stmt|;
name|Date
name|nextTime
init|=
name|scheduledJobs
index|[
name|j
index|]
operator|.
name|getNextFireTime
argument_list|()
decl_stmt|;
if|if
condition|(
name|nextTime
operator|!=
literal|null
condition|)
block|{
name|xmlBuf
operator|.
name|append
argument_list|(
operator|new
name|DateTimeValue
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|xmlBuf
operator|.
name|append
argument_list|(
literal|"</next>"
argument_list|)
expr_stmt|;
name|xmlBuf
operator|.
name|append
argument_list|(
literal|"<final>"
argument_list|)
expr_stmt|;
name|Date
name|finalTime
init|=
name|scheduledJobs
index|[
name|j
index|]
operator|.
name|getFinalFireTime
argument_list|()
decl_stmt|;
if|if
condition|(
name|endTime
operator|!=
literal|null
operator|&&
name|finalTime
operator|!=
literal|null
condition|)
block|{
name|xmlBuf
operator|.
name|append
argument_list|(
operator|new
name|DateTimeValue
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|xmlBuf
operator|.
name|append
argument_list|(
literal|"</final>"
argument_list|)
expr_stmt|;
name|xmlBuf
operator|.
name|append
argument_list|(
literal|"</"
operator|+
name|SchedulerModule
operator|.
name|PREFIX
operator|+
literal|":trigger>"
argument_list|)
expr_stmt|;
name|xmlBuf
operator|.
name|append
argument_list|(
literal|"</"
operator|+
name|SchedulerModule
operator|.
name|PREFIX
operator|+
literal|":job>"
argument_list|)
expr_stmt|;
name|iJobs
operator|++
expr_stmt|;
block|}
block|}
name|xmlBuf
operator|.
name|append
argument_list|(
literal|"</"
operator|+
name|SchedulerModule
operator|.
name|PREFIX
operator|+
literal|":group>"
argument_list|)
expr_stmt|;
block|}
block|}
name|xmlBuf
operator|.
name|insert
argument_list|(
literal|0
argument_list|,
literal|"<"
operator|+
name|SchedulerModule
operator|.
name|PREFIX
operator|+
literal|":jobs xmlns:scheduler=\""
operator|+
name|SchedulerModule
operator|.
name|NAMESPACE_URI
operator|+
literal|"\" count=\""
operator|+
name|iJobs
operator|+
literal|"\">"
argument_list|)
expr_stmt|;
name|xmlBuf
operator|.
name|append
argument_list|(
literal|"</"
operator|+
name|SchedulerModule
operator|.
name|PREFIX
operator|+
literal|":jobs>"
argument_list|)
expr_stmt|;
try|try
block|{
return|return
operator|(
name|ModuleUtils
operator|.
name|stringToXML
argument_list|(
name|context
argument_list|,
name|xmlBuf
operator|.
name|toString
argument_list|()
argument_list|)
operator|)
return|;
block|}
catch|catch
parameter_list|(
name|SAXException
name|se
parameter_list|)
block|{
throw|throw
operator|(
operator|new
name|XPathException
argument_list|(
name|this
argument_list|,
name|se
operator|.
name|getMessage
argument_list|()
argument_list|,
name|se
argument_list|)
operator|)
throw|;
block|}
block|}
block|}
end_class

end_unit

