begin_unit|revision:1.0.0;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * eXist Open Source Native XML Database  * Copyright (C) 2008-09 The eXist Project  * http://exist-db.org  *  * This program is free software; you can redistribute it and/or  * modify it under the terms of the GNU Lesser General Public License  * as published by the Free Software Foundation; either version 2  * of the License, or (at your option) any later version.  *    * This program is distributed in the hope that it will be useful,  * but WITHOUT ANY WARRANTY; without even the implied warranty of  * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the  * GNU Lesser General Public License for more details.  *   * You should have received a copy of the GNU Lesser General Public License  * along with this program; if not, write to the Free Software Foundation  * Inc., 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301, USA.  *    *  $Id$  */
end_comment

begin_package
package|package
name|org
operator|.
name|exist
operator|.
name|xquery
operator|.
name|modules
operator|.
name|jndi
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Iterator
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Set
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|naming
operator|.
name|Context
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|naming
operator|.
name|NamingException
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|naming
operator|.
name|directory
operator|.
name|Attribute
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|naming
operator|.
name|directory
operator|.
name|BasicAttribute
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|naming
operator|.
name|directory
operator|.
name|BasicAttributes
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|logging
operator|.
name|log4j
operator|.
name|LogManager
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|logging
operator|.
name|log4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|xquery
operator|.
name|AbstractInternalModule
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|xquery
operator|.
name|FunctionDef
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|xquery
operator|.
name|XQueryContext
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|xquery
operator|.
name|value
operator|.
name|NodeValue
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|xquery
operator|.
name|value
operator|.
name|Sequence
import|;
end_import

begin_import
import|import
name|org
operator|.
name|w3c
operator|.
name|dom
operator|.
name|Element
import|;
end_import

begin_import
import|import
name|org
operator|.
name|w3c
operator|.
name|dom
operator|.
name|Node
import|;
end_import

begin_import
import|import
name|org
operator|.
name|w3c
operator|.
name|dom
operator|.
name|NodeList
import|;
end_import

begin_comment
comment|/**  * eXist JNDI Module Extension  *   * An extension module for the eXist Native XML Database that allows queries  * against JNDI sources, including LDAP, returning an XML representation of the results.  *   * @author Andrzej Taramina<andrzej@chaeron.com>  * @author ljo  * @serial 2008-12-02  * @version 1.0  *   * @see org.exist.xquery.AbstractInternalModule#AbstractInternalModule(org.exist.xquery.FunctionDef[], java.util.Map)   */
end_comment

begin_class
specifier|public
class|class
name|JNDIModule
extends|extends
name|AbstractInternalModule
block|{
specifier|protected
specifier|final
specifier|static
name|Logger
name|LOG
init|=
name|LogManager
operator|.
name|getLogger
argument_list|(
name|JNDIModule
operator|.
name|class
argument_list|)
decl_stmt|;
specifier|public
specifier|final
specifier|static
name|String
name|NAMESPACE_URI
init|=
literal|"http://exist-db.org/xquery/jndi"
decl_stmt|;
specifier|public
specifier|final
specifier|static
name|String
name|PREFIX
init|=
literal|"jndi"
decl_stmt|;
specifier|public
specifier|final
specifier|static
name|String
name|INCLUSION_DATE
init|=
literal|"2008-12-04"
decl_stmt|;
specifier|public
specifier|final
specifier|static
name|String
name|RELEASED_IN_VERSION
init|=
literal|"eXist-1.4"
decl_stmt|;
specifier|private
specifier|final
specifier|static
name|FunctionDef
index|[]
name|functions
init|=
block|{
operator|new
name|FunctionDef
argument_list|(
name|GetDirContextFunction
operator|.
name|signatures
index|[
literal|0
index|]
argument_list|,
name|GetDirContextFunction
operator|.
name|class
argument_list|)
block|,
operator|new
name|FunctionDef
argument_list|(
name|CloseContextFunction
operator|.
name|signatures
index|[
literal|0
index|]
argument_list|,
name|CloseContextFunction
operator|.
name|class
argument_list|)
block|,
operator|new
name|FunctionDef
argument_list|(
name|SearchFunction
operator|.
name|signatures
index|[
literal|0
index|]
argument_list|,
name|SearchFunction
operator|.
name|class
argument_list|)
block|,
operator|new
name|FunctionDef
argument_list|(
name|SearchFunction
operator|.
name|signatures
index|[
literal|1
index|]
argument_list|,
name|SearchFunction
operator|.
name|class
argument_list|)
block|,
operator|new
name|FunctionDef
argument_list|(
name|CreateFunction
operator|.
name|signatures
index|[
literal|0
index|]
argument_list|,
name|CreateFunction
operator|.
name|class
argument_list|)
block|,
operator|new
name|FunctionDef
argument_list|(
name|DeleteFunction
operator|.
name|signatures
index|[
literal|0
index|]
argument_list|,
name|DeleteFunction
operator|.
name|class
argument_list|)
block|,
operator|new
name|FunctionDef
argument_list|(
name|RenameFunction
operator|.
name|signatures
index|[
literal|0
index|]
argument_list|,
name|RenameFunction
operator|.
name|class
argument_list|)
block|,
operator|new
name|FunctionDef
argument_list|(
name|ModifyFunction
operator|.
name|signatures
index|[
literal|0
index|]
argument_list|,
name|ModifyFunction
operator|.
name|class
argument_list|)
block|}
decl_stmt|;
specifier|public
specifier|final
specifier|static
name|String
name|JNDICONTEXTS_VARIABLE
init|=
literal|"_eXist_jndi_contexts"
decl_stmt|;
specifier|private
specifier|static
name|long
name|currentContextID
init|=
name|System
operator|.
name|currentTimeMillis
argument_list|()
decl_stmt|;
specifier|public
name|JNDIModule
parameter_list|(
name|Map
argument_list|<
name|String
argument_list|,
name|List
argument_list|<
name|?
extends|extends
name|Object
argument_list|>
argument_list|>
name|parameters
parameter_list|)
block|{
name|super
argument_list|(
name|functions
argument_list|,
name|parameters
argument_list|)
expr_stmt|;
block|}
specifier|public
name|String
name|getNamespaceURI
parameter_list|()
block|{
return|return
operator|(
name|NAMESPACE_URI
operator|)
return|;
block|}
specifier|public
name|String
name|getDefaultPrefix
parameter_list|()
block|{
return|return
operator|(
name|PREFIX
operator|)
return|;
block|}
specifier|public
name|String
name|getDescription
parameter_list|()
block|{
return|return
operator|(
literal|"A module for performing JNDI queries against Directories, returning XML representations of the results."
operator|)
return|;
block|}
specifier|public
name|String
name|getReleaseVersion
parameter_list|()
block|{
return|return
name|RELEASED_IN_VERSION
return|;
block|}
comment|/** 	 * Retrieves a previously stored Connection from the Context of an XQuery 	 *  	 * @param context 		The Context of the XQuery containing the JNDI Context 	 * @param ctxID 		The ID of the JNDI Context to retrieve from the Context of the XQuery 	 */
specifier|public
specifier|final
specifier|static
name|Context
name|retrieveJNDIContext
parameter_list|(
name|XQueryContext
name|context
parameter_list|,
name|long
name|ctxID
parameter_list|)
block|{
name|Context
name|jndiContext
init|=
literal|null
decl_stmt|;
comment|// get the existing connections map from the context
name|HashMap
name|contexts
init|=
operator|(
name|HashMap
operator|)
name|context
operator|.
name|getXQueryContextVar
argument_list|(
name|JNDIModule
operator|.
name|JNDICONTEXTS_VARIABLE
argument_list|)
decl_stmt|;
if|if
condition|(
name|contexts
operator|!=
literal|null
condition|)
block|{
name|jndiContext
operator|=
operator|(
name|Context
operator|)
name|contexts
operator|.
name|get
argument_list|(
name|Long
operator|.
name|valueOf
argument_list|(
name|ctxID
argument_list|)
argument_list|)
expr_stmt|;
block|}
return|return
operator|(
name|jndiContext
operator|)
return|;
block|}
comment|/** 	 * Stores a Connection in the Context of an XQuery 	 *  	 * @param context 			The Context of the XQuery to store the Connection in 	 * @param jndiContext		The connection to store 	 *  	 * @return 			A unique ID representing the connection 	 */
specifier|public
specifier|final
specifier|static
specifier|synchronized
name|long
name|storeJNDIContext
parameter_list|(
name|XQueryContext
name|context
parameter_list|,
name|Context
name|jndiContext
parameter_list|)
block|{
comment|// get the existing connections map from the context
name|HashMap
name|contexts
init|=
operator|(
name|HashMap
operator|)
name|context
operator|.
name|getXQueryContextVar
argument_list|(
name|JNDIModule
operator|.
name|JNDICONTEXTS_VARIABLE
argument_list|)
decl_stmt|;
if|if
condition|(
name|contexts
operator|==
literal|null
condition|)
block|{
comment|// if there is no connections map, create a new one
name|contexts
operator|=
operator|new
name|HashMap
argument_list|()
expr_stmt|;
block|}
comment|// get an id for the jndiContext
name|long
name|ctxID
init|=
name|getID
argument_list|()
decl_stmt|;
comment|// place the connection in the connections map
name|contexts
operator|.
name|put
argument_list|(
name|Long
operator|.
name|valueOf
argument_list|(
name|ctxID
argument_list|)
argument_list|,
name|jndiContext
argument_list|)
expr_stmt|;
comment|// store the updated connections map back in the context
name|context
operator|.
name|setXQueryContextVar
argument_list|(
name|JNDIModule
operator|.
name|JNDICONTEXTS_VARIABLE
argument_list|,
name|contexts
argument_list|)
expr_stmt|;
return|return
operator|(
name|ctxID
operator|)
return|;
block|}
comment|/** 	 * Closes a specified JNDI Context for the specified XQueryContext 	 *  	 * @param context   	The context to close JNDI Contexts for 	 * @param ctxID 		The ID of the JNDI Context to retrieve from the Context of the XQuery 	 */
specifier|public
specifier|final
specifier|static
name|void
name|closeJNDIContext
parameter_list|(
name|XQueryContext
name|context
parameter_list|,
name|long
name|ctxID
parameter_list|)
block|{
comment|// get the existing connections map from the context
name|HashMap
name|contexts
init|=
operator|(
name|HashMap
operator|)
name|context
operator|.
name|getXQueryContextVar
argument_list|(
name|JNDIModule
operator|.
name|JNDICONTEXTS_VARIABLE
argument_list|)
decl_stmt|;
name|closeJNDIContext
argument_list|(
name|context
argument_list|,
name|ctxID
argument_list|,
name|contexts
argument_list|)
expr_stmt|;
comment|// update the context
name|context
operator|.
name|setXQueryContextVar
argument_list|(
name|JNDIModule
operator|.
name|JNDICONTEXTS_VARIABLE
argument_list|,
name|contexts
argument_list|)
expr_stmt|;
block|}
comment|/** 	 * Closes a specified JNDI Context for the specified XQueryContext 	 *  	 * @param context 	The context to close JNDI Contexts for 	 * @param ctxID 			The ID of the JNDI Context to retrieve from the Context of the XQuery 	 * @param contexts 			The contexts hashmap 	 */
specifier|private
specifier|final
specifier|static
name|void
name|closeJNDIContext
parameter_list|(
name|XQueryContext
name|context
parameter_list|,
name|long
name|ctxID
parameter_list|,
name|HashMap
name|contexts
parameter_list|)
block|{
name|Context
name|ctx
init|=
literal|null
decl_stmt|;
if|if
condition|(
name|contexts
operator|!=
literal|null
condition|)
block|{
name|ctx
operator|=
operator|(
name|Context
operator|)
name|contexts
operator|.
name|get
argument_list|(
name|Long
operator|.
name|valueOf
argument_list|(
name|ctxID
argument_list|)
argument_list|)
expr_stmt|;
if|if
condition|(
name|ctx
operator|!=
literal|null
condition|)
block|{
try|try
block|{
comment|// close the connection
name|ctx
operator|.
name|close
argument_list|()
expr_stmt|;
comment|// remove it from the connections map
name|contexts
operator|.
name|remove
argument_list|(
name|ctxID
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|NamingException
name|ne
parameter_list|)
block|{
name|LOG
operator|.
name|error
argument_list|(
literal|"Unable to close JNDI Context"
argument_list|,
name|ne
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
comment|/** 	 * Closes all the open JNDI Contexts for the specified XQueryContext 	 *  	 * @param xqueryContext 	The context to close JNDI Contexts for 	 */
specifier|private
specifier|final
specifier|static
name|void
name|closeAllJNDIContexts
parameter_list|(
name|XQueryContext
name|xqueryContext
parameter_list|)
block|{
comment|// get the existing connections map from the context
name|HashMap
name|contexts
init|=
operator|(
name|HashMap
operator|)
name|xqueryContext
operator|.
name|getXQueryContextVar
argument_list|(
name|JNDIModule
operator|.
name|JNDICONTEXTS_VARIABLE
argument_list|)
decl_stmt|;
if|if
condition|(
name|contexts
operator|!=
literal|null
condition|)
block|{
comment|// iterate over each connection
name|Set
name|keys
init|=
name|contexts
operator|.
name|keySet
argument_list|()
decl_stmt|;
for|for
control|(
name|Iterator
name|itKeys
init|=
name|keys
operator|.
name|iterator
argument_list|()
init|;
name|itKeys
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
comment|// get the connection
name|Long
name|ctxID
init|=
operator|(
name|Long
operator|)
name|itKeys
operator|.
name|next
argument_list|()
decl_stmt|;
name|closeJNDIContext
argument_list|(
name|xqueryContext
argument_list|,
name|ctxID
argument_list|,
name|contexts
argument_list|)
expr_stmt|;
block|}
comment|// update the context
name|xqueryContext
operator|.
name|setXQueryContextVar
argument_list|(
name|JNDIModule
operator|.
name|JNDICONTEXTS_VARIABLE
argument_list|,
name|contexts
argument_list|)
expr_stmt|;
block|}
block|}
comment|/** 	 * Returns a Unique ID based on the System Time 	 *  	 * @return The Unique ID 	 */
specifier|private
specifier|static
specifier|synchronized
name|long
name|getID
parameter_list|()
block|{
return|return
name|currentContextID
operator|++
return|;
block|}
comment|/** 	 * Resets the Module Context and closes any open JNDI Contexts for the 	 * XQueryContext 	 *  	 * @param xqueryContext		The XQueryContext 	 */
specifier|public
name|void
name|reset
parameter_list|(
name|XQueryContext
name|xqueryContext
parameter_list|)
block|{
comment|// reset the module context
name|super
operator|.
name|reset
argument_list|(
name|xqueryContext
argument_list|)
expr_stmt|;
comment|// close any open JNDI Contexts
name|closeAllJNDIContexts
argument_list|(
name|xqueryContext
argument_list|)
expr_stmt|;
block|}
comment|/** 	 * Parses attributes into a JNDI BasicAttributes object 	 *  	 * @param arg				The attributes as a sequence of nodes 	 * @return 					The BasicAttributes object 	 */
specifier|protected
specifier|static
name|BasicAttributes
name|parseAttributes
parameter_list|(
name|Sequence
name|arg
parameter_list|)
block|{
name|BasicAttributes
name|attributes
init|=
operator|new
name|BasicAttributes
argument_list|()
decl_stmt|;
if|if
condition|(
operator|!
operator|(
name|arg
operator|.
name|isEmpty
argument_list|()
operator|)
condition|)
block|{
name|Node
name|container
init|=
operator|(
operator|(
name|NodeValue
operator|)
name|arg
operator|.
name|itemAt
argument_list|(
literal|0
argument_list|)
operator|)
operator|.
name|getNode
argument_list|()
decl_stmt|;
if|if
condition|(
name|container
operator|!=
literal|null
operator|&&
name|container
operator|.
name|getNodeType
argument_list|()
operator|==
name|Node
operator|.
name|ELEMENT_NODE
condition|)
block|{
name|NodeList
name|attrs
init|=
operator|(
operator|(
name|Element
operator|)
name|container
operator|)
operator|.
name|getElementsByTagName
argument_list|(
literal|"attribute"
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|attrs
operator|.
name|getLength
argument_list|()
condition|;
name|i
operator|++
control|)
block|{
name|Element
name|attr
init|=
operator|(
operator|(
name|Element
operator|)
name|attrs
operator|.
name|item
argument_list|(
name|i
argument_list|)
operator|)
decl_stmt|;
name|String
name|name
init|=
name|attr
operator|.
name|getAttribute
argument_list|(
literal|"name"
argument_list|)
decl_stmt|;
name|String
name|value
init|=
name|attr
operator|.
name|getAttribute
argument_list|(
literal|"value"
argument_list|)
decl_stmt|;
name|String
name|ordered
init|=
name|attr
operator|.
name|getAttribute
argument_list|(
literal|"ordered"
argument_list|)
decl_stmt|;
if|if
condition|(
name|name
operator|!=
literal|null
operator|&&
name|value
operator|!=
literal|null
condition|)
block|{
name|Attribute
name|existingAttr
init|=
name|attributes
operator|.
name|get
argument_list|(
name|name
argument_list|)
decl_stmt|;
if|if
condition|(
name|existingAttr
operator|!=
literal|null
condition|)
block|{
name|existingAttr
operator|.
name|add
argument_list|(
name|value
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|attributes
operator|.
name|put
argument_list|(
operator|new
name|BasicAttribute
argument_list|(
name|name
argument_list|,
name|value
argument_list|,
name|ordered
operator|!=
literal|null
operator|&&
name|ordered
operator|.
name|equalsIgnoreCase
argument_list|(
literal|"true"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
else|else
block|{
name|LOG
operator|.
name|warn
argument_list|(
literal|"Name or value attribute missing for attribute"
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
return|return
operator|(
name|attributes
operator|)
return|;
block|}
block|}
end_class

end_unit

