begin_unit|revision:1.0.0;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  *  eXist Open Source Native XML Database  *  Copyright (C) 2001-03 Wolfgang M. Meier  *  wolfgang@exist-db.org  *  http://exist.sourceforge.net  *    *  This program is free software; you can redistribute it and/or  *  modify it under the terms of the GNU Lesser General Public License  *  as published by the Free Software Foundation; either version 2  *  of the License, or (at your option) any later version.  *    *  This program is distributed in the hope that it will be useful,  *  but WITHOUT ANY WARRANTY; without even the implied warranty of  *  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the  *  GNU Lesser General Public License for more details.  *    *  You should have received a copy of the GNU Lesser General Public License  *  along with this program; if not, write to the Free Software  *  Foundation, Inc., 675 Mass Ave, Cambridge, MA 02139, USA.  *    *  $Id: ExampleModule.java 1173 2005-04-20 11:15:18Z wolfgang_m $  */
end_comment

begin_package
package|package
name|org
operator|.
name|exist
operator|.
name|xquery
operator|.
name|modules
operator|.
name|http
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|httpclient
operator|.
name|Cookie
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|httpclient
operator|.
name|Header
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|httpclient
operator|.
name|HttpClient
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|httpclient
operator|.
name|HttpMethod
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|httpclient
operator|.
name|HttpState
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|httpclient
operator|.
name|URIException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|util
operator|.
name|MimeTable
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|util
operator|.
name|MimeType
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|xquery
operator|.
name|AbstractInternalModule
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|xquery
operator|.
name|FunctionDef
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|xquery
operator|.
name|XPathException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|xquery
operator|.
name|XQueryContext
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|xquery
operator|.
name|modules
operator|.
name|ModuleUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|xquery
operator|.
name|value
operator|.
name|Base64Binary
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|xquery
operator|.
name|value
operator|.
name|Sequence
import|;
end_import

begin_import
import|import
name|org
operator|.
name|xml
operator|.
name|sax
operator|.
name|InputSource
import|;
end_import

begin_import
import|import
name|org
operator|.
name|xml
operator|.
name|sax
operator|.
name|SAXException
import|;
end_import

begin_comment
comment|/**  * @author Adam Retter<adam.retter@devon.gov.uk  * @serial 20070428  * @version 1.0  */
end_comment

begin_class
specifier|public
class|class
name|HTTPModule
extends|extends
name|AbstractInternalModule
block|{
specifier|public
specifier|final
specifier|static
name|String
name|NAMESPACE_URI
init|=
literal|"http://exist-db.org/xquery/http"
decl_stmt|;
specifier|public
specifier|final
specifier|static
name|String
name|PREFIX
init|=
literal|"http"
decl_stmt|;
specifier|public
specifier|final
specifier|static
name|String
name|HTTP_MODULE_PERSISTENT_COOKIES
init|=
literal|"_eXist_http_module_cookies"
decl_stmt|;
specifier|private
specifier|final
specifier|static
name|FunctionDef
index|[]
name|functions
init|=
block|{
operator|new
name|FunctionDef
argument_list|(
name|GETFunction
operator|.
name|signature
argument_list|,
name|GETFunction
operator|.
name|class
argument_list|)
block|,
operator|new
name|FunctionDef
argument_list|(
name|POSTFunction
operator|.
name|signature
argument_list|,
name|POSTFunction
operator|.
name|class
argument_list|)
block|,
operator|new
name|FunctionDef
argument_list|(
name|ClearPersistentCookiesFunction
operator|.
name|signature
argument_list|,
name|ClearPersistentCookiesFunction
operator|.
name|class
argument_list|)
block|}
decl_stmt|;
specifier|public
name|HTTPModule
parameter_list|()
block|{
name|super
argument_list|(
name|functions
argument_list|)
expr_stmt|;
block|}
specifier|public
name|String
name|getNamespaceURI
parameter_list|()
block|{
return|return
name|NAMESPACE_URI
return|;
block|}
specifier|public
name|String
name|getDefaultPrefix
parameter_list|()
block|{
return|return
name|PREFIX
return|;
block|}
specifier|public
name|String
name|getDescription
parameter_list|()
block|{
return|return
literal|"A module for performing HTTP requests"
return|;
block|}
comment|/** 	 * Performs a HTTP Request 	 *  	 * @param context	The context of the calling XQuery 	 * @param method	The HTTP methor for the request 	 * @param persistCookies	If true existing cookies are re-used and any issued cookies are persisted for future HTTP Requests  	 */
specifier|protected
specifier|static
name|void
name|doRequest
parameter_list|(
name|XQueryContext
name|context
parameter_list|,
name|HttpMethod
name|method
parameter_list|,
name|boolean
name|persistCookies
parameter_list|)
throws|throws
name|IOException
block|{
comment|//use existing cookies?
if|if
condition|(
name|persistCookies
condition|)
block|{
comment|//set existing cookies
name|Cookie
index|[]
name|cookies
init|=
operator|(
name|Cookie
index|[]
operator|)
name|context
operator|.
name|getXQueryContextVar
argument_list|(
name|HTTPModule
operator|.
name|HTTP_MODULE_PERSISTENT_COOKIES
argument_list|)
decl_stmt|;
if|if
condition|(
name|cookies
operator|!=
literal|null
condition|)
block|{
for|for
control|(
name|int
name|c
init|=
literal|0
init|;
name|c
operator|<
name|cookies
operator|.
name|length
condition|;
name|c
operator|++
control|)
block|{
name|method
operator|.
name|setRequestHeader
argument_list|(
literal|"Cookie"
argument_list|,
name|cookies
index|[
name|c
index|]
operator|.
name|toExternalForm
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
block|}
comment|//execute the request
name|HttpClient
name|http
init|=
operator|new
name|HttpClient
argument_list|()
decl_stmt|;
name|int
name|result
init|=
name|http
operator|.
name|executeMethod
argument_list|(
name|method
argument_list|)
decl_stmt|;
comment|//persist cookies?
if|if
condition|(
name|persistCookies
condition|)
block|{
comment|//store/update cookies
name|HttpState
name|state
init|=
name|http
operator|.
name|getState
argument_list|()
decl_stmt|;
name|Cookie
index|[]
name|incomingCookies
init|=
name|state
operator|.
name|getCookies
argument_list|()
decl_stmt|;
name|Cookie
index|[]
name|currentCookies
init|=
operator|(
name|Cookie
index|[]
operator|)
name|context
operator|.
name|getXQueryContextVar
argument_list|(
name|HTTPModule
operator|.
name|HTTP_MODULE_PERSISTENT_COOKIES
argument_list|)
decl_stmt|;
name|context
operator|.
name|setXQueryContextVar
argument_list|(
name|HTTPModule
operator|.
name|HTTP_MODULE_PERSISTENT_COOKIES
argument_list|,
name|HTTPModule
operator|.
name|mergeCookies
argument_list|(
name|currentCookies
argument_list|,
name|incomingCookies
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
comment|/** 	 * Takes the HTTP Response Body from the HTTP Method and attempts to convert it to a 	 * suiatble datatype for XQuery. 	 *  	 * Conversion Preference - 	 * 1) Try and parse as XML, if successful returns a Node 	 * 2) Try and parse as HTML returning as XML compatible HTML, if successful returns a Node 	 * 3) Return as base64Binary encoded data 	 *  	 * @param context	The context of the calling XQuery 	 * @param method	The HTTP Request Method 	 *  	 * @return The data in an suitable XQuery datatype value 	 */
specifier|protected
specifier|static
name|Sequence
name|httpResponseDataToXQueryDataType
parameter_list|(
name|XQueryContext
name|context
parameter_list|,
name|HttpMethod
name|method
parameter_list|)
throws|throws
name|IOException
throws|,
name|XPathException
block|{
comment|//try and parse the response as XML
try|try
block|{
comment|//TODO: replace getResponseBodyAsString() with getResponseBodyAsStream()
return|return
name|ModuleUtils
operator|.
name|stringToXML
argument_list|(
name|context
argument_list|,
name|method
operator|.
name|getResponseBodyAsString
argument_list|()
argument_list|)
return|;
block|}
catch|catch
parameter_list|(
name|SAXException
name|se
parameter_list|)
block|{
comment|//could not parse to xml
block|}
comment|//response is NOT parseable as XML, determine the type of the response document
name|MimeType
name|responseMimeType
init|=
name|HTTPModule
operator|.
name|getResponseMimeType
argument_list|(
name|method
operator|.
name|getResponseHeader
argument_list|(
literal|"Content-Type"
argument_list|)
argument_list|)
decl_stmt|;
comment|//is it a html document?
if|if
condition|(
name|responseMimeType
operator|.
name|getName
argument_list|()
operator|.
name|equals
argument_list|(
name|MimeType
operator|.
name|HTML_TYPE
operator|.
name|getName
argument_list|()
argument_list|)
condition|)
block|{
comment|//html document
try|try
block|{
comment|//parse html to xml(html)
return|return
name|ModuleUtils
operator|.
name|htmlToXHtml
argument_list|(
name|context
argument_list|,
name|method
operator|.
name|getURI
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|,
operator|new
name|InputSource
argument_list|(
name|method
operator|.
name|getResponseBodyAsStream
argument_list|()
argument_list|)
argument_list|)
return|;
block|}
catch|catch
parameter_list|(
name|URIException
name|ue
parameter_list|)
block|{
throw|throw
operator|new
name|XPathException
argument_list|(
name|ue
argument_list|)
throw|;
block|}
catch|catch
parameter_list|(
name|SAXException
name|se
parameter_list|)
block|{
comment|//counld not parse to xml(html)
block|}
block|}
comment|//other document type, assume binary so base64 encode
return|return
operator|new
name|Base64Binary
argument_list|(
name|method
operator|.
name|getResponseBody
argument_list|()
argument_list|)
return|;
block|}
comment|/** 	 * Given the Response Header for Content-Type this function returns an appropriate eXist MimeType 	 *  	 * @param responseHeaderContentType	The HTTP Response Header containing the Content-Type of the Response. 	 * @return The corresponding eXist MimeType 	 */
specifier|protected
specifier|static
name|MimeType
name|getResponseMimeType
parameter_list|(
name|Header
name|responseHeaderContentType
parameter_list|)
block|{
if|if
condition|(
name|responseHeaderContentType
operator|!=
literal|null
condition|)
block|{
if|if
condition|(
name|responseHeaderContentType
operator|.
name|getName
argument_list|()
operator|.
name|equals
argument_list|(
literal|"Content-Type"
argument_list|)
condition|)
block|{
name|String
name|responseContentType
init|=
name|responseHeaderContentType
operator|.
name|getValue
argument_list|()
decl_stmt|;
name|int
name|contentTypeEnd
init|=
name|responseContentType
operator|.
name|indexOf
argument_list|(
literal|";"
argument_list|)
decl_stmt|;
if|if
condition|(
name|contentTypeEnd
operator|==
operator|-
literal|1
condition|)
block|{
name|contentTypeEnd
operator|=
name|responseContentType
operator|.
name|length
argument_list|()
expr_stmt|;
block|}
name|String
name|responseMimeType
init|=
name|responseContentType
operator|.
name|substring
argument_list|(
literal|0
argument_list|,
name|contentTypeEnd
argument_list|)
decl_stmt|;
name|MimeTable
name|mimeTable
init|=
name|MimeTable
operator|.
name|getInstance
argument_list|()
decl_stmt|;
name|MimeType
name|mimeType
init|=
name|mimeTable
operator|.
name|getContentType
argument_list|(
name|responseMimeType
argument_list|)
decl_stmt|;
if|if
condition|(
name|mimeType
operator|!=
literal|null
condition|)
block|{
return|return
name|mimeType
return|;
block|}
block|}
block|}
return|return
name|MimeType
operator|.
name|BINARY_TYPE
return|;
block|}
comment|/** 	 * Merges two cookie arrays together 	 *  	 * If cookies are equal (same name, path and comain) then the incoming cookie is favoured over the current cookie 	 *  	 * @param current	The cookies already known 	 * @param incoming	The new cookies 	 *  	 *  	 */
specifier|protected
specifier|static
name|Cookie
index|[]
name|mergeCookies
parameter_list|(
name|Cookie
index|[]
name|current
parameter_list|,
name|Cookie
index|[]
name|incoming
parameter_list|)
block|{
if|if
condition|(
name|current
operator|==
literal|null
condition|)
block|{
if|if
condition|(
name|incoming
operator|==
literal|null
condition|)
return|return
literal|null
return|;
if|else if
condition|(
name|incoming
operator|.
name|length
operator|==
literal|0
condition|)
return|return
literal|null
return|;
else|else
return|return
name|incoming
return|;
block|}
if|if
condition|(
name|incoming
operator|==
literal|null
condition|)
return|return
name|current
return|;
name|java
operator|.
name|util
operator|.
name|HashMap
name|replacements
init|=
operator|new
name|java
operator|.
name|util
operator|.
name|HashMap
argument_list|()
decl_stmt|;
name|java
operator|.
name|util
operator|.
name|Vector
name|additions
init|=
operator|new
name|java
operator|.
name|util
operator|.
name|Vector
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|incoming
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
name|boolean
name|cookieExists
init|=
literal|false
decl_stmt|;
for|for
control|(
name|int
name|c
init|=
literal|0
init|;
name|c
operator|<
name|current
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
if|if
condition|(
name|current
index|[
name|c
index|]
operator|.
name|equals
argument_list|(
name|incoming
index|[
name|i
index|]
argument_list|)
condition|)
block|{
comment|//replacement
name|replacements
operator|.
name|put
argument_list|(
operator|new
name|Integer
argument_list|(
name|c
argument_list|)
argument_list|,
name|incoming
index|[
name|i
index|]
argument_list|)
expr_stmt|;
name|cookieExists
operator|=
literal|true
expr_stmt|;
break|break;
block|}
block|}
if|if
condition|(
operator|!
name|cookieExists
condition|)
block|{
comment|//add
name|additions
operator|.
name|add
argument_list|(
name|incoming
index|[
name|i
index|]
argument_list|)
expr_stmt|;
block|}
block|}
name|Cookie
index|[]
name|merged
init|=
operator|new
name|Cookie
index|[
name|current
operator|.
name|length
operator|+
name|additions
operator|.
name|size
argument_list|()
index|]
decl_stmt|;
comment|//resolve replacements/copies
for|for
control|(
name|int
name|c
init|=
literal|0
init|;
name|c
operator|<
name|current
operator|.
name|length
condition|;
name|c
operator|++
control|)
block|{
if|if
condition|(
name|replacements
operator|.
name|containsKey
argument_list|(
operator|new
name|Integer
argument_list|(
name|c
argument_list|)
argument_list|)
condition|)
block|{
comment|//replace
name|merged
index|[
name|c
index|]
operator|=
operator|(
name|Cookie
operator|)
name|replacements
operator|.
name|get
argument_list|(
operator|new
name|Integer
argument_list|(
name|c
argument_list|)
argument_list|)
expr_stmt|;
block|}
else|else
block|{
comment|//copy
name|merged
index|[
name|c
index|]
operator|=
name|current
index|[
name|c
index|]
expr_stmt|;
block|}
block|}
comment|//resolve additions
for|for
control|(
name|int
name|a
init|=
literal|0
init|;
name|a
operator|<
name|additions
operator|.
name|size
argument_list|()
condition|;
name|a
operator|++
control|)
block|{
name|int
name|offset
init|=
name|current
operator|.
name|length
operator|+
name|a
decl_stmt|;
name|merged
index|[
name|offset
index|]
operator|=
operator|(
name|Cookie
operator|)
name|additions
operator|.
name|get
argument_list|(
name|a
argument_list|)
expr_stmt|;
block|}
return|return
name|merged
return|;
block|}
block|}
end_class

end_unit

