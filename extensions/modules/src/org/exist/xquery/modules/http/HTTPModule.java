begin_unit|revision:1.0.0;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  *  eXist Open Source Native XML Database  *  Copyright (C) 2001-03 Wolfgang M. Meier  *  wolfgang@exist-db.org  *  http://exist.sourceforge.net  *    *  This program is free software; you can redistribute it and/or  *  modify it under the terms of the GNU Lesser General Public License  *  as published by the Free Software Foundation; either version 2  *  of the License, or (at your option) any later version.  *    *  This program is distributed in the hope that it will be useful,  *  but WITHOUT ANY WARRANTY; without even the implied warranty of  *  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the  *  GNU Lesser General Public License for more details.  *    *  You should have received a copy of the GNU Lesser General Public License  *  along with this program; if not, write to the Free Software  *  Foundation, Inc., 675 Mass Ave, Cambridge, MA 02139, USA.  *    *  $Id: ExampleModule.java 1173 2005-04-20 11:15:18Z wolfgang_m $  */
end_comment

begin_package
package|package
name|org
operator|.
name|exist
operator|.
name|xquery
operator|.
name|modules
operator|.
name|http
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|httpclient
operator|.
name|Cookie
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|xquery
operator|.
name|AbstractInternalModule
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|xquery
operator|.
name|FunctionDef
import|;
end_import

begin_comment
comment|/**  * @author Adam Retter<adam.retter@devon.gov.uk  */
end_comment

begin_class
specifier|public
class|class
name|HTTPModule
extends|extends
name|AbstractInternalModule
block|{
specifier|public
specifier|final
specifier|static
name|String
name|NAMESPACE_URI
init|=
literal|"http://exist-db.org/xquery/http"
decl_stmt|;
specifier|public
specifier|final
specifier|static
name|String
name|PREFIX
init|=
literal|"http"
decl_stmt|;
specifier|public
specifier|final
specifier|static
name|String
name|HTTP_MODULE_PERSISTENT_COOKIES
init|=
literal|"_eXist_http_module_cookies"
decl_stmt|;
specifier|private
specifier|final
specifier|static
name|FunctionDef
index|[]
name|functions
init|=
block|{
operator|new
name|FunctionDef
argument_list|(
name|POSTFunction
operator|.
name|signature
argument_list|,
name|POSTFunction
operator|.
name|class
argument_list|)
block|,
operator|new
name|FunctionDef
argument_list|(
name|GETFunction
operator|.
name|signature
argument_list|,
name|GETFunction
operator|.
name|class
argument_list|)
block|}
decl_stmt|;
specifier|public
name|HTTPModule
parameter_list|()
block|{
name|super
argument_list|(
name|functions
argument_list|)
expr_stmt|;
block|}
specifier|public
name|String
name|getNamespaceURI
parameter_list|()
block|{
return|return
name|NAMESPACE_URI
return|;
block|}
specifier|public
name|String
name|getDefaultPrefix
parameter_list|()
block|{
return|return
name|PREFIX
return|;
block|}
specifier|public
name|String
name|getDescription
parameter_list|()
block|{
return|return
literal|"A module for performing HTTP requests"
return|;
block|}
comment|/** 	 * Merges two cookie arrays together 	 *  	 * If cookies are equal (same name, path and comain) then the incoming cookie is favoured over the current cookie 	 *  	 * @param current	The cookies already known 	 * @param incoming	The new cookies 	 *  	 *  	 */
specifier|protected
specifier|static
name|Cookie
index|[]
name|mergeCookies
parameter_list|(
name|Cookie
index|[]
name|current
parameter_list|,
name|Cookie
index|[]
name|incoming
parameter_list|)
block|{
if|if
condition|(
name|current
operator|==
literal|null
condition|)
block|{
if|if
condition|(
name|incoming
operator|==
literal|null
condition|)
return|return
literal|null
return|;
if|else if
condition|(
name|incoming
operator|.
name|length
operator|==
literal|0
condition|)
return|return
literal|null
return|;
else|else
return|return
name|incoming
return|;
block|}
if|if
condition|(
name|incoming
operator|==
literal|null
condition|)
return|return
name|current
return|;
name|java
operator|.
name|util
operator|.
name|HashMap
name|replacements
init|=
operator|new
name|java
operator|.
name|util
operator|.
name|HashMap
argument_list|()
decl_stmt|;
name|java
operator|.
name|util
operator|.
name|Vector
name|additions
init|=
operator|new
name|java
operator|.
name|util
operator|.
name|Vector
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|incoming
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
name|boolean
name|cookieExists
init|=
literal|false
decl_stmt|;
for|for
control|(
name|int
name|c
init|=
literal|0
init|;
name|c
operator|<
name|current
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
if|if
condition|(
name|current
index|[
name|c
index|]
operator|.
name|equals
argument_list|(
name|incoming
index|[
name|i
index|]
argument_list|)
condition|)
block|{
comment|//replacement
name|replacements
operator|.
name|put
argument_list|(
operator|new
name|Integer
argument_list|(
name|c
argument_list|)
argument_list|,
name|incoming
index|[
name|i
index|]
argument_list|)
expr_stmt|;
name|cookieExists
operator|=
literal|true
expr_stmt|;
break|break;
block|}
block|}
if|if
condition|(
operator|!
name|cookieExists
condition|)
block|{
comment|//add
name|additions
operator|.
name|add
argument_list|(
name|incoming
index|[
name|i
index|]
argument_list|)
expr_stmt|;
block|}
block|}
name|Cookie
index|[]
name|merged
init|=
operator|new
name|Cookie
index|[
name|current
operator|.
name|length
operator|+
name|additions
operator|.
name|size
argument_list|()
index|]
decl_stmt|;
comment|//resolve replacements/copies
for|for
control|(
name|int
name|c
init|=
literal|0
init|;
name|c
operator|<
name|current
operator|.
name|length
condition|;
name|c
operator|++
control|)
block|{
if|if
condition|(
name|replacements
operator|.
name|containsKey
argument_list|(
operator|new
name|Integer
argument_list|(
name|c
argument_list|)
argument_list|)
condition|)
block|{
comment|//replace
name|merged
index|[
name|c
index|]
operator|=
operator|(
name|Cookie
operator|)
name|replacements
operator|.
name|get
argument_list|(
operator|new
name|Integer
argument_list|(
name|c
argument_list|)
argument_list|)
expr_stmt|;
block|}
else|else
block|{
comment|//copy
name|merged
index|[
name|c
index|]
operator|=
name|current
index|[
name|c
index|]
expr_stmt|;
block|}
block|}
comment|//resolve additions
for|for
control|(
name|int
name|a
init|=
literal|0
init|;
name|a
operator|<
name|additions
operator|.
name|size
argument_list|()
condition|;
name|a
operator|++
control|)
block|{
name|int
name|offset
init|=
name|current
operator|.
name|length
operator|+
name|a
decl_stmt|;
name|merged
index|[
name|offset
index|]
operator|=
operator|(
name|Cookie
operator|)
name|additions
operator|.
name|get
argument_list|(
name|a
argument_list|)
expr_stmt|;
block|}
return|return
name|merged
return|;
block|}
block|}
end_class

end_unit

