begin_unit|revision:1.0.0;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  *  eXist Open Source Native XML Database  *  Copyright (C) 2001-03 Wolfgang M. Meier  *  wolfgang@exist-db.org  *  http://exist.sourceforge.net  *    *  This program is free software; you can redistribute it and/or  *  modify it under the terms of the GNU Lesser General Public License  *  as published by the Free Software Foundation; either version 2  *  of the License, or (at your option) any later version.  *    *  This program is distributed in the hope that it will be useful,  *  but WITHOUT ANY WARRANTY; without even the implied warranty of  *  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the  *  GNU Lesser General Public License for more details.  *    *  You should have received a copy of the GNU Lesser General Public License  *  along with this program; if not, write to the Free Software  *  Foundation, Inc., 675 Mass Ave, Cambridge, MA 02139, USA.  *    *  $Id$  */
end_comment

begin_package
package|package
name|org
operator|.
name|exist
operator|.
name|xquery
operator|.
name|modules
operator|.
name|mail
package|;
end_package

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|dom
operator|.
name|QName
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|xquery
operator|.
name|BasicFunction
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|xquery
operator|.
name|Cardinality
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|xquery
operator|.
name|FunctionSignature
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|xquery
operator|.
name|Variable
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|xquery
operator|.
name|XPathException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|xquery
operator|.
name|XQueryContext
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|xquery
operator|.
name|value
operator|.
name|NodeValue
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|xquery
operator|.
name|value
operator|.
name|Sequence
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|xquery
operator|.
name|value
operator|.
name|SequenceType
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|xquery
operator|.
name|value
operator|.
name|BooleanValue
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|xquery
operator|.
name|value
operator|.
name|Type
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|xquery
operator|.
name|functions
operator|.
name|util
operator|.
name|ExistVersion
import|;
end_import

begin_comment
comment|//send-email specific imports
end_comment

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|BufferedReader
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|InputStreamReader
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|OutputStreamWriter
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|PrintWriter
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|StringWriter
import|;
end_import

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|InetAddress
import|;
end_import

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|Socket
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collection
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Date
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Properties
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Vector
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|xml
operator|.
name|transform
operator|.
name|dom
operator|.
name|DOMSource
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|xml
operator|.
name|transform
operator|.
name|stream
operator|.
name|StreamResult
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|xml
operator|.
name|transform
operator|.
name|Transformer
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|xml
operator|.
name|transform
operator|.
name|TransformerException
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|xml
operator|.
name|transform
operator|.
name|TransformerFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|w3c
operator|.
name|dom
operator|.
name|Node
import|;
end_import

begin_comment
comment|/**  * @author Adam Retter (adam.retter@devon.gov.uk)  */
end_comment

begin_class
specifier|public
class|class
name|SendEmail
extends|extends
name|BasicFunction
block|{
specifier|public
specifier|final
specifier|static
name|FunctionSignature
name|signature
init|=
operator|new
name|FunctionSignature
argument_list|(
operator|new
name|QName
argument_list|(
literal|"send-email"
argument_list|,
name|MailModule
operator|.
name|NAMESPACE_URI
argument_list|,
name|MailModule
operator|.
name|PREFIX
argument_list|)
argument_list|,
literal|"Sends an email $a through the SMTP Server $b, or if $b is () tries to use the local sendmail program. $a is the email in the following format<mail><from/><to/><cc/><bcc/><subject/><message><text/><xhtml/></message></mail>."
argument_list|,
operator|new
name|SequenceType
index|[]
block|{
operator|new
name|SequenceType
argument_list|(
name|Type
operator|.
name|NODE
argument_list|,
name|Cardinality
operator|.
name|EXACTLY_ONE
argument_list|)
block|,
operator|new
name|SequenceType
argument_list|(
name|Type
operator|.
name|STRING
argument_list|,
name|Cardinality
operator|.
name|ZERO_OR_ONE
argument_list|)
block|}
argument_list|,
operator|new
name|SequenceType
argument_list|(
name|Type
operator|.
name|BOOLEAN
argument_list|,
name|Cardinality
operator|.
name|EXACTLY_ONE
argument_list|)
argument_list|)
decl_stmt|;
comment|/** 	 * @param context 	 * @param signature 	 */
specifier|public
name|SendEmail
parameter_list|(
name|XQueryContext
name|context
parameter_list|)
block|{
name|super
argument_list|(
name|context
argument_list|,
name|signature
argument_list|)
expr_stmt|;
block|}
comment|/* (non-Javadoc) 	 * @see org.exist.xquery.BasicFunction#eval(org.exist.xquery.value.Sequence[], org.exist.xquery.value.Sequence) 	 */
specifier|public
name|Sequence
name|eval
parameter_list|(
name|Sequence
index|[]
name|args
parameter_list|,
name|Sequence
name|contextSequence
parameter_list|)
throws|throws
name|XPathException
block|{
try|try
block|{
comment|//Parse the XML<mail> into a mail Object
name|mail
name|theMail
init|=
name|ParseMailXML
argument_list|(
operator|(
operator|(
name|NodeValue
operator|)
name|args
index|[
literal|0
index|]
operator|.
name|itemAt
argument_list|(
literal|0
argument_list|)
operator|)
operator|.
name|getNode
argument_list|()
argument_list|)
decl_stmt|;
comment|//Send email with Sendmail or SMTP?
if|if
condition|(
name|args
index|[
literal|1
index|]
operator|.
name|getLength
argument_list|()
operator|>
literal|0
condition|)
block|{
comment|//SMTP
if|if
condition|(
name|SendSMTP
argument_list|(
name|theMail
argument_list|,
name|args
index|[
literal|1
index|]
operator|.
name|getStringValue
argument_list|()
argument_list|)
condition|)
block|{
return|return
operator|(
name|BooleanValue
operator|.
name|TRUE
operator|)
return|;
block|}
block|}
else|else
block|{
comment|//Sendmail
if|if
condition|(
name|SendSendmail
argument_list|(
name|theMail
argument_list|)
condition|)
block|{
return|return
operator|(
name|BooleanValue
operator|.
name|TRUE
operator|)
return|;
block|}
block|}
comment|//Failed to send email
return|return
operator|(
name|BooleanValue
operator|.
name|FALSE
operator|)
return|;
block|}
catch|catch
parameter_list|(
name|TransformerException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|XPathException
argument_list|(
literal|"Could not Transform XHTML Message Body: "
operator|+
name|e
operator|.
name|getMessage
argument_list|()
argument_list|,
name|e
argument_list|)
throw|;
block|}
block|}
comment|//Sends an email using the system's sendmail binary
specifier|private
name|boolean
name|SendSendmail
parameter_list|(
name|mail
name|aMail
parameter_list|)
block|{
try|try
block|{
comment|//Create a vector of all Recipients, should include to, cc and bcc recipient
name|Vector
name|allrecipients
init|=
operator|new
name|Vector
argument_list|()
decl_stmt|;
name|allrecipients
operator|.
name|addAll
argument_list|(
name|aMail
operator|.
name|getTo
argument_list|()
argument_list|)
expr_stmt|;
name|allrecipients
operator|.
name|addAll
argument_list|(
name|aMail
operator|.
name|getCC
argument_list|()
argument_list|)
expr_stmt|;
name|allrecipients
operator|.
name|addAll
argument_list|(
name|aMail
operator|.
name|getBCC
argument_list|()
argument_list|)
expr_stmt|;
comment|//Get a string of all recipients email addresses
name|String
name|recipients
init|=
literal|""
decl_stmt|;
for|for
control|(
name|int
name|x
init|=
literal|0
init|;
name|x
operator|<
name|allrecipients
operator|.
name|size
argument_list|()
condition|;
name|x
operator|++
control|)
block|{
comment|//Check format of to address does it include a name as well as the email address?
if|if
condition|(
operator|(
operator|(
name|String
operator|)
name|allrecipients
operator|.
name|elementAt
argument_list|(
name|x
argument_list|)
operator|)
operator|.
name|indexOf
argument_list|(
literal|"<"
argument_list|)
operator|!=
operator|-
literal|1
condition|)
block|{
comment|//yes, just add the email address
name|recipients
operator|+=
literal|" "
operator|+
operator|(
operator|(
name|String
operator|)
name|allrecipients
operator|.
name|elementAt
argument_list|(
name|x
argument_list|)
operator|)
operator|.
name|substring
argument_list|(
operator|(
operator|(
name|String
operator|)
name|allrecipients
operator|.
name|elementAt
argument_list|(
name|x
argument_list|)
operator|)
operator|.
name|indexOf
argument_list|(
literal|"<"
argument_list|)
operator|+
literal|1
argument_list|,
operator|(
operator|(
name|String
operator|)
name|allrecipients
operator|.
name|elementAt
argument_list|(
name|x
argument_list|)
operator|)
operator|.
name|indexOf
argument_list|(
literal|">"
argument_list|)
argument_list|)
expr_stmt|;
block|}
else|else
block|{
comment|//add the email address
name|recipients
operator|+=
literal|" "
operator|+
operator|(
operator|(
name|String
operator|)
name|allrecipients
operator|.
name|elementAt
argument_list|(
name|x
argument_list|)
operator|)
expr_stmt|;
block|}
block|}
comment|//Create a sendmail Process
name|Process
name|p
init|=
name|Runtime
operator|.
name|getRuntime
argument_list|()
operator|.
name|exec
argument_list|(
literal|"/usr/sbin/sendmail"
operator|+
name|recipients
argument_list|)
decl_stmt|;
comment|//Get a Buffered Print Writer to the Processes stdOut
name|PrintWriter
name|out
init|=
operator|new
name|PrintWriter
argument_list|(
name|p
operator|.
name|getOutputStream
argument_list|()
argument_list|)
decl_stmt|;
comment|//Send the Message
name|WriteMessage
argument_list|(
name|out
argument_list|,
name|aMail
argument_list|)
expr_stmt|;
comment|//Close the stdOut
name|out
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
return|return
operator|(
literal|false
operator|)
return|;
block|}
comment|//Message Sent Succesfully
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"send-email() message sent using Sendmail "
operator|+
operator|new
name|Date
argument_list|()
argument_list|)
expr_stmt|;
return|return
operator|(
literal|true
operator|)
return|;
block|}
comment|//Sends an email using an SMTP Server
specifier|private
name|boolean
name|SendSMTP
parameter_list|(
name|mail
name|aMail
parameter_list|,
name|String
name|SMTPServer
parameter_list|)
block|{
specifier|final
name|int
name|TCP_PROTOCOL_SMTP
init|=
literal|25
decl_stmt|;
comment|//SMTP Protocol
name|String
name|SMTPResult
init|=
literal|""
decl_stmt|;
comment|//Holds the server Result code when an SMTP Command is executed
try|try
block|{
comment|//Create a Socket and connect to the SMTP Server
name|Socket
name|smtpSock
init|=
operator|new
name|Socket
argument_list|(
name|SMTPServer
argument_list|,
name|TCP_PROTOCOL_SMTP
argument_list|)
decl_stmt|;
comment|//Create a Buffered Reader for the Socket
name|BufferedReader
name|in
init|=
operator|new
name|BufferedReader
argument_list|(
operator|new
name|InputStreamReader
argument_list|(
name|smtpSock
operator|.
name|getInputStream
argument_list|()
argument_list|)
argument_list|)
decl_stmt|;
comment|//Create an Output Writer for the Socket
name|PrintWriter
name|out
init|=
operator|new
name|PrintWriter
argument_list|(
operator|new
name|OutputStreamWriter
argument_list|(
name|smtpSock
operator|.
name|getOutputStream
argument_list|()
argument_list|)
argument_list|)
decl_stmt|;
comment|//First line sent to us from the SMTP server should be "220 blah blah", 220 indicates okay
name|SMTPResult
operator|=
name|in
operator|.
name|readLine
argument_list|()
expr_stmt|;
if|if
condition|(
operator|!
name|SMTPResult
operator|.
name|substring
argument_list|(
literal|0
argument_list|,
literal|3
argument_list|)
operator|.
name|toString
argument_list|()
operator|.
name|equals
argument_list|(
literal|"220"
argument_list|)
condition|)
block|{
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"Error - SMTP Server not ready!"
argument_list|)
expr_stmt|;
return|return
operator|(
literal|false
operator|)
return|;
block|}
comment|//Say "HELO"
name|out
operator|.
name|println
argument_list|(
literal|"HELO "
operator|+
name|InetAddress
operator|.
name|getLocalHost
argument_list|()
operator|.
name|getHostName
argument_list|()
argument_list|)
expr_stmt|;
name|out
operator|.
name|flush
argument_list|()
expr_stmt|;
comment|//get "HELLO" response, should be "250 blah blah"
name|SMTPResult
operator|=
name|in
operator|.
name|readLine
argument_list|()
expr_stmt|;
if|if
condition|(
operator|!
name|SMTPResult
operator|.
name|substring
argument_list|(
literal|0
argument_list|,
literal|3
argument_list|)
operator|.
name|toString
argument_list|()
operator|.
name|equals
argument_list|(
literal|"250"
argument_list|)
condition|)
block|{
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"Error - SMTP HELO Failed: "
operator|+
name|SMTPResult
argument_list|)
expr_stmt|;
return|return
operator|(
literal|false
operator|)
return|;
block|}
comment|//Send "MAIL FROM:"
comment|//Check format of from address does it include a name as well as the email address?
if|if
condition|(
name|aMail
operator|.
name|getFrom
argument_list|()
operator|.
name|indexOf
argument_list|(
literal|"<"
argument_list|)
operator|!=
operator|-
literal|1
condition|)
block|{
comment|//yes, just send the email address
name|out
operator|.
name|println
argument_list|(
literal|"MAIL FROM: "
operator|+
name|aMail
operator|.
name|getFrom
argument_list|()
operator|.
name|substring
argument_list|(
name|aMail
operator|.
name|getFrom
argument_list|()
operator|.
name|indexOf
argument_list|(
literal|"<"
argument_list|)
operator|+
literal|1
argument_list|,
name|aMail
operator|.
name|getFrom
argument_list|()
operator|.
name|indexOf
argument_list|(
literal|">"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
else|else
block|{
comment|//no, doesnt include a name so send the email address
name|out
operator|.
name|println
argument_list|(
literal|"MAIL FROM: "
operator|+
name|aMail
operator|.
name|getFrom
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|out
operator|.
name|flush
argument_list|()
expr_stmt|;
comment|//Get "MAIL FROM:" response
name|SMTPResult
operator|=
name|in
operator|.
name|readLine
argument_list|()
expr_stmt|;
if|if
condition|(
operator|!
name|SMTPResult
operator|.
name|substring
argument_list|(
literal|0
argument_list|,
literal|3
argument_list|)
operator|.
name|toString
argument_list|()
operator|.
name|equals
argument_list|(
literal|"250"
argument_list|)
condition|)
block|{
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"Error - SMTP MAIL FROM failed: "
operator|+
name|SMTPResult
argument_list|)
expr_stmt|;
return|return
operator|(
literal|false
operator|)
return|;
block|}
comment|//RCPT TO should be issued for each to, cc and bcc recipient
name|Vector
name|allrecipients
init|=
operator|new
name|Vector
argument_list|()
decl_stmt|;
name|allrecipients
operator|.
name|addAll
argument_list|(
name|aMail
operator|.
name|getTo
argument_list|()
argument_list|)
expr_stmt|;
name|allrecipients
operator|.
name|addAll
argument_list|(
name|aMail
operator|.
name|getCC
argument_list|()
argument_list|)
expr_stmt|;
name|allrecipients
operator|.
name|addAll
argument_list|(
name|aMail
operator|.
name|getBCC
argument_list|()
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|x
init|=
literal|0
init|;
name|x
operator|<
name|allrecipients
operator|.
name|size
argument_list|()
condition|;
name|x
operator|++
control|)
block|{
comment|//Send "RCPT TO:"
comment|//Check format of to address does it include a name as well as the email address?
if|if
condition|(
operator|(
operator|(
name|String
operator|)
name|allrecipients
operator|.
name|elementAt
argument_list|(
name|x
argument_list|)
operator|)
operator|.
name|indexOf
argument_list|(
literal|"<"
argument_list|)
operator|!=
operator|-
literal|1
condition|)
block|{
comment|//yes, just send the email address
name|out
operator|.
name|println
argument_list|(
literal|"RCPT TO: "
operator|+
operator|(
operator|(
name|String
operator|)
name|allrecipients
operator|.
name|elementAt
argument_list|(
name|x
argument_list|)
operator|)
operator|.
name|substring
argument_list|(
operator|(
operator|(
name|String
operator|)
name|allrecipients
operator|.
name|elementAt
argument_list|(
name|x
argument_list|)
operator|)
operator|.
name|indexOf
argument_list|(
literal|"<"
argument_list|)
operator|+
literal|1
argument_list|,
operator|(
operator|(
name|String
operator|)
name|allrecipients
operator|.
name|elementAt
argument_list|(
name|x
argument_list|)
operator|)
operator|.
name|indexOf
argument_list|(
literal|">"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|out
operator|.
name|println
argument_list|(
literal|"RCPT TO: "
operator|+
operator|(
operator|(
name|String
operator|)
name|allrecipients
operator|.
name|elementAt
argument_list|(
name|x
argument_list|)
operator|)
argument_list|)
expr_stmt|;
block|}
name|out
operator|.
name|flush
argument_list|()
expr_stmt|;
comment|//Get "RCPT TO:" response
name|SMTPResult
operator|=
name|in
operator|.
name|readLine
argument_list|()
expr_stmt|;
if|if
condition|(
operator|!
name|SMTPResult
operator|.
name|substring
argument_list|(
literal|0
argument_list|,
literal|3
argument_list|)
operator|.
name|toString
argument_list|()
operator|.
name|equals
argument_list|(
literal|"250"
argument_list|)
condition|)
block|{
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"Error - SMTP RCPT TO failed: "
operator|+
name|SMTPResult
argument_list|)
expr_stmt|;
block|}
block|}
comment|//SEND "DATA"
name|out
operator|.
name|println
argument_list|(
literal|"DATA"
argument_list|)
expr_stmt|;
name|out
operator|.
name|flush
argument_list|()
expr_stmt|;
comment|//Get "DATA" response, should be "354 blah blah"
name|SMTPResult
operator|=
name|in
operator|.
name|readLine
argument_list|()
expr_stmt|;
if|if
condition|(
operator|!
name|SMTPResult
operator|.
name|substring
argument_list|(
literal|0
argument_list|,
literal|3
argument_list|)
operator|.
name|toString
argument_list|()
operator|.
name|equals
argument_list|(
literal|"354"
argument_list|)
condition|)
block|{
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"Error - SMTP DATA failed: "
operator|+
name|SMTPResult
argument_list|)
expr_stmt|;
return|return
operator|(
literal|false
operator|)
return|;
block|}
comment|//Send the Message
name|WriteMessage
argument_list|(
name|out
argument_list|,
name|aMail
argument_list|)
expr_stmt|;
comment|//Get end message response, should be "250 blah blah"
name|SMTPResult
operator|=
name|in
operator|.
name|readLine
argument_list|()
expr_stmt|;
if|if
condition|(
operator|!
name|SMTPResult
operator|.
name|substring
argument_list|(
literal|0
argument_list|,
literal|3
argument_list|)
operator|.
name|toString
argument_list|()
operator|.
name|equals
argument_list|(
literal|"250"
argument_list|)
condition|)
block|{
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"Error - Message not accepted: "
operator|+
name|SMTPResult
argument_list|)
expr_stmt|;
return|return
operator|(
literal|false
operator|)
return|;
block|}
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
return|return
operator|(
literal|false
operator|)
return|;
block|}
comment|//Message Sent Succesfully
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"send-email() message sent using SMTP "
operator|+
operator|new
name|Date
argument_list|()
argument_list|)
expr_stmt|;
return|return
operator|(
literal|true
operator|)
return|;
block|}
comment|//Writes an email payload (Headers + Body) from a mail object
specifier|private
name|void
name|WriteMessage
parameter_list|(
name|PrintWriter
name|out
parameter_list|,
name|mail
name|aMail
parameter_list|)
throws|throws
name|IOException
block|{
name|String
name|Version
init|=
name|eXistVersion
argument_list|()
decl_stmt|;
comment|//Version of eXist
name|String
name|MultipartBoundary
init|=
literal|"eXist.multipart."
operator|+
name|Version
decl_stmt|;
comment|//Multipart Boundary
comment|//write the message headers
name|out
operator|.
name|println
argument_list|(
literal|"From: "
operator|+
name|aMail
operator|.
name|getFrom
argument_list|()
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|x
init|=
literal|0
init|;
name|x
operator|<
name|aMail
operator|.
name|countTo
argument_list|()
condition|;
name|x
operator|++
control|)
block|{
name|out
operator|.
name|println
argument_list|(
literal|"To: "
operator|+
name|aMail
operator|.
name|getTo
argument_list|(
name|x
argument_list|)
argument_list|)
expr_stmt|;
block|}
for|for
control|(
name|int
name|x
init|=
literal|0
init|;
name|x
operator|<
name|aMail
operator|.
name|countCC
argument_list|()
condition|;
name|x
operator|++
control|)
block|{
name|out
operator|.
name|println
argument_list|(
literal|"CC: "
operator|+
name|aMail
operator|.
name|getCC
argument_list|(
name|x
argument_list|)
argument_list|)
expr_stmt|;
block|}
for|for
control|(
name|int
name|x
init|=
literal|0
init|;
name|x
operator|<
name|aMail
operator|.
name|countBCC
argument_list|()
condition|;
name|x
operator|++
control|)
block|{
name|out
operator|.
name|println
argument_list|(
literal|"BCC: "
operator|+
name|aMail
operator|.
name|getBCC
argument_list|(
name|x
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|out
operator|.
name|println
argument_list|(
literal|"Date: "
operator|+
operator|new
name|Date
argument_list|()
argument_list|)
expr_stmt|;
name|out
operator|.
name|println
argument_list|(
literal|"Subject: "
operator|+
name|aMail
operator|.
name|getSubject
argument_list|()
argument_list|)
expr_stmt|;
name|out
operator|.
name|println
argument_list|(
literal|"X-Mailer: eXist "
operator|+
name|Version
operator|+
literal|" util:send-email()"
argument_list|)
expr_stmt|;
name|out
operator|.
name|println
argument_list|(
literal|"MIME-Version: 1.0"
argument_list|)
expr_stmt|;
comment|//Is this a multipart message i.e. text and html?
if|if
condition|(
operator|(
operator|!
name|aMail
operator|.
name|getText
argument_list|()
operator|.
name|toString
argument_list|()
operator|.
name|equals
argument_list|(
literal|""
argument_list|)
operator|)
operator|&&
operator|(
operator|!
name|aMail
operator|.
name|getXHTML
argument_list|()
operator|.
name|toString
argument_list|()
operator|.
name|equals
argument_list|(
literal|""
argument_list|)
operator|)
condition|)
block|{
comment|//Yes, start multipart message
name|out
operator|.
name|println
argument_list|(
literal|"Content-Type: multipart/alternative; boundary=\""
operator|+
name|MultipartBoundary
operator|+
literal|"\";"
argument_list|)
expr_stmt|;
comment|//Mime warning
name|out
operator|.
name|println
argument_list|(
literal|"Error your mail client is not MIME Compatible"
argument_list|)
expr_stmt|;
comment|//send the text part first
name|out
operator|.
name|println
argument_list|(
literal|"--"
operator|+
name|MultipartBoundary
argument_list|)
expr_stmt|;
name|out
operator|.
name|println
argument_list|(
literal|"Content-Type: text/plain; charset=UTF-8"
argument_list|)
expr_stmt|;
name|out
operator|.
name|println
argument_list|(
literal|"Content-Transfer-Encoding: quoted-printable"
argument_list|)
expr_stmt|;
name|out
operator|.
name|println
argument_list|(
name|aMail
operator|.
name|getText
argument_list|()
argument_list|)
expr_stmt|;
comment|//send the html part next
name|out
operator|.
name|println
argument_list|(
literal|"--"
operator|+
name|MultipartBoundary
argument_list|)
expr_stmt|;
name|out
operator|.
name|println
argument_list|(
literal|"Content-Type: text/html; charset=UTF-8"
argument_list|)
expr_stmt|;
name|out
operator|.
name|println
argument_list|(
literal|"Content-Transfer-Encoding: quoted-printable"
argument_list|)
expr_stmt|;
name|out
operator|.
name|println
argument_list|(
name|aMail
operator|.
name|getXHTML
argument_list|()
argument_list|)
expr_stmt|;
comment|//Emd multipart message
name|out
operator|.
name|println
argument_list|(
literal|"--"
operator|+
name|MultipartBoundary
operator|+
literal|"--"
argument_list|)
expr_stmt|;
block|}
else|else
block|{
comment|//No, is it a text email
if|if
condition|(
operator|!
name|aMail
operator|.
name|getText
argument_list|()
operator|.
name|toString
argument_list|()
operator|.
name|equals
argument_list|(
literal|""
argument_list|)
condition|)
block|{
comment|//Yes, text email
name|out
operator|.
name|println
argument_list|(
literal|"Content-Type: text/plain; charset=\"UTF-8\""
argument_list|)
expr_stmt|;
name|out
operator|.
name|println
argument_list|(
literal|"Content-Transfer-Encoding: quoted-printable"
argument_list|)
expr_stmt|;
comment|//now send the trxt message
name|out
operator|.
name|println
argument_list|()
expr_stmt|;
name|out
operator|.
name|println
argument_list|(
name|aMail
operator|.
name|getText
argument_list|()
argument_list|)
expr_stmt|;
block|}
else|else
block|{
comment|//No, HTML email
name|out
operator|.
name|println
argument_list|(
literal|"Content-Type: text/html; charset=\"UTF-8\""
argument_list|)
expr_stmt|;
name|out
operator|.
name|println
argument_list|(
literal|"Content-Transfer-Encoding: quoted-printable"
argument_list|)
expr_stmt|;
comment|//now send the html message
name|out
operator|.
name|println
argument_list|()
expr_stmt|;
name|out
operator|.
name|println
argument_list|(
name|aMail
operator|.
name|getXHTML
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
comment|//end the message,<cr><lf>.<cr><lf>
name|out
operator|.
name|println
argument_list|()
expr_stmt|;
name|out
operator|.
name|println
argument_list|(
literal|"."
argument_list|)
expr_stmt|;
name|out
operator|.
name|println
argument_list|()
expr_stmt|;
name|out
operator|.
name|flush
argument_list|()
expr_stmt|;
block|}
comment|//Gets the eXist Version Number
specifier|private
name|String
name|eXistVersion
parameter_list|()
throws|throws
name|IOException
block|{
name|Properties
name|sysProperties
init|=
operator|new
name|Properties
argument_list|()
decl_stmt|;
name|sysProperties
operator|.
name|load
argument_list|(
name|ExistVersion
operator|.
name|class
operator|.
name|getClassLoader
argument_list|()
operator|.
name|getResourceAsStream
argument_list|(
literal|"org/exist/system.properties"
argument_list|)
argument_list|)
expr_stmt|;
return|return
operator|(
operator|(
name|String
operator|)
name|sysProperties
operator|.
name|getProperty
argument_list|(
literal|"product-version"
argument_list|,
literal|"unknown version"
argument_list|)
operator|)
return|;
block|}
comment|//Constructs a mail object from an XML representation
specifier|private
name|mail
name|ParseMailXML
parameter_list|(
name|Node
name|message
parameter_list|)
throws|throws
name|TransformerException
block|{
comment|//Expects message to be in the format -
comment|/* 		 *<mail> 		 *<from></from> 		 *<to></to> 		 *<cc></cc> 		 *<bcc></bcc> 		 *<subject></subject> 		 *<message> 		 *<text></text> 		 *<xhtml></xhtml> 		 *</message> 		 *</mail> 		 *  		 */
comment|//New mail Object
name|mail
name|theMail
init|=
operator|new
name|mail
argument_list|()
decl_stmt|;
comment|//Make sure that message has a Mail node
if|if
condition|(
name|message
operator|.
name|getNodeType
argument_list|()
operator|==
name|Node
operator|.
name|ELEMENT_NODE
operator|&&
name|message
operator|.
name|getLocalName
argument_list|()
operator|.
name|equals
argument_list|(
literal|"mail"
argument_list|)
condition|)
block|{
comment|//Get the First Child
name|Node
name|child
init|=
name|message
operator|.
name|getFirstChild
argument_list|()
decl_stmt|;
while|while
condition|(
name|child
operator|!=
literal|null
condition|)
block|{
comment|//Parse each of the child nodes
if|if
condition|(
name|child
operator|.
name|getNodeType
argument_list|()
operator|==
name|Node
operator|.
name|ELEMENT_NODE
operator|&&
name|child
operator|.
name|hasChildNodes
argument_list|()
condition|)
block|{
if|if
condition|(
name|child
operator|.
name|getLocalName
argument_list|()
operator|.
name|equals
argument_list|(
literal|"from"
argument_list|)
condition|)
block|{
name|theMail
operator|.
name|setFrom
argument_list|(
name|child
operator|.
name|getFirstChild
argument_list|()
operator|.
name|getNodeValue
argument_list|()
argument_list|)
expr_stmt|;
block|}
if|else if
condition|(
name|child
operator|.
name|getLocalName
argument_list|()
operator|.
name|equals
argument_list|(
literal|"to"
argument_list|)
condition|)
block|{
name|theMail
operator|.
name|addTo
argument_list|(
name|child
operator|.
name|getFirstChild
argument_list|()
operator|.
name|getNodeValue
argument_list|()
argument_list|)
expr_stmt|;
block|}
if|else if
condition|(
name|child
operator|.
name|getLocalName
argument_list|()
operator|.
name|equals
argument_list|(
literal|"cc"
argument_list|)
condition|)
block|{
name|theMail
operator|.
name|addCC
argument_list|(
name|child
operator|.
name|getFirstChild
argument_list|()
operator|.
name|getNodeValue
argument_list|()
argument_list|)
expr_stmt|;
block|}
if|else if
condition|(
name|child
operator|.
name|getLocalName
argument_list|()
operator|.
name|equals
argument_list|(
literal|"bcc"
argument_list|)
condition|)
block|{
name|theMail
operator|.
name|addBCC
argument_list|(
name|child
operator|.
name|getFirstChild
argument_list|()
operator|.
name|getNodeValue
argument_list|()
argument_list|)
expr_stmt|;
block|}
if|else if
condition|(
name|child
operator|.
name|getLocalName
argument_list|()
operator|.
name|equals
argument_list|(
literal|"subject"
argument_list|)
condition|)
block|{
name|theMail
operator|.
name|setSubject
argument_list|(
name|child
operator|.
name|getFirstChild
argument_list|()
operator|.
name|getNodeValue
argument_list|()
argument_list|)
expr_stmt|;
block|}
if|else if
condition|(
name|child
operator|.
name|getLocalName
argument_list|()
operator|.
name|equals
argument_list|(
literal|"message"
argument_list|)
condition|)
block|{
comment|//If the message node, then parse the child text and xhtml nodes
name|Node
name|bodyPart
init|=
name|child
operator|.
name|getFirstChild
argument_list|()
decl_stmt|;
while|while
condition|(
name|bodyPart
operator|!=
literal|null
condition|)
block|{
if|if
condition|(
name|bodyPart
operator|.
name|getLocalName
argument_list|()
operator|.
name|equals
argument_list|(
literal|"text"
argument_list|)
condition|)
block|{
name|theMail
operator|.
name|setText
argument_list|(
name|bodyPart
operator|.
name|getFirstChild
argument_list|()
operator|.
name|getNodeValue
argument_list|()
argument_list|)
expr_stmt|;
block|}
if|else if
condition|(
name|bodyPart
operator|.
name|getLocalName
argument_list|()
operator|.
name|equals
argument_list|(
literal|"xhtml"
argument_list|)
condition|)
block|{
comment|//Convert everything inside<xhtml></xhtml> to text
name|TransformerFactory
name|transFactory
init|=
name|TransformerFactory
operator|.
name|newInstance
argument_list|()
decl_stmt|;
name|Transformer
name|transformer
init|=
name|transFactory
operator|.
name|newTransformer
argument_list|()
decl_stmt|;
name|DOMSource
name|source
init|=
operator|new
name|DOMSource
argument_list|(
name|bodyPart
operator|.
name|getFirstChild
argument_list|()
argument_list|)
decl_stmt|;
name|StringWriter
name|strWriter
init|=
operator|new
name|StringWriter
argument_list|()
decl_stmt|;
name|StreamResult
name|result
init|=
operator|new
name|StreamResult
argument_list|(
name|strWriter
argument_list|)
decl_stmt|;
name|transformer
operator|.
name|transform
argument_list|(
name|source
argument_list|,
name|result
argument_list|)
expr_stmt|;
name|theMail
operator|.
name|setXHTML
argument_list|(
name|strWriter
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
block|}
comment|//next body part
name|bodyPart
operator|=
name|bodyPart
operator|.
name|getNextSibling
argument_list|()
expr_stmt|;
block|}
block|}
block|}
comment|//next node
name|child
operator|=
name|child
operator|.
name|getNextSibling
argument_list|()
expr_stmt|;
block|}
block|}
comment|//Return the mail object
return|return
operator|(
name|theMail
operator|)
return|;
block|}
comment|//Class that Represents an email
specifier|private
class|class
name|mail
block|{
specifier|private
name|String
name|from
init|=
literal|""
decl_stmt|;
comment|//Who is the mail from
specifier|private
name|Vector
name|to
init|=
operator|new
name|Vector
argument_list|()
decl_stmt|;
comment|//Who is the mail going to
specifier|private
name|Vector
name|cc
init|=
operator|new
name|Vector
argument_list|()
decl_stmt|;
comment|//Carbon Copy to
specifier|private
name|Vector
name|bcc
init|=
operator|new
name|Vector
argument_list|()
decl_stmt|;
comment|//Blind Carbon Copy to
specifier|private
name|String
name|subject
init|=
literal|""
decl_stmt|;
comment|//Subject of the mail
specifier|private
name|String
name|text
init|=
literal|""
decl_stmt|;
comment|//Body text of the mail
specifier|private
name|String
name|xhtml
init|=
literal|""
decl_stmt|;
comment|//Body XHTML of the mail
comment|//From
specifier|public
name|void
name|setFrom
parameter_list|(
name|String
name|from
parameter_list|)
block|{
name|this
operator|.
name|from
operator|=
name|from
expr_stmt|;
block|}
specifier|public
name|String
name|getFrom
parameter_list|()
block|{
return|return
operator|(
name|this
operator|.
name|from
operator|)
return|;
block|}
comment|//To
specifier|public
name|void
name|addTo
parameter_list|(
name|String
name|to
parameter_list|)
block|{
name|this
operator|.
name|to
operator|.
name|addElement
argument_list|(
name|to
argument_list|)
expr_stmt|;
block|}
specifier|public
name|int
name|countTo
parameter_list|()
block|{
return|return
operator|(
name|to
operator|.
name|size
argument_list|()
operator|)
return|;
block|}
specifier|public
name|String
name|getTo
parameter_list|(
name|int
name|index
parameter_list|)
block|{
return|return
operator|(
operator|(
name|String
operator|)
name|to
operator|.
name|elementAt
argument_list|(
name|index
argument_list|)
operator|)
return|;
block|}
specifier|public
name|Collection
name|getTo
parameter_list|()
block|{
return|return
operator|(
name|to
operator|)
return|;
block|}
comment|//CC
specifier|public
name|void
name|addCC
parameter_list|(
name|String
name|cc
parameter_list|)
block|{
name|this
operator|.
name|cc
operator|.
name|addElement
argument_list|(
name|cc
argument_list|)
expr_stmt|;
block|}
specifier|public
name|int
name|countCC
parameter_list|()
block|{
return|return
operator|(
name|cc
operator|.
name|size
argument_list|()
operator|)
return|;
block|}
specifier|public
name|String
name|getCC
parameter_list|(
name|int
name|index
parameter_list|)
block|{
return|return
operator|(
operator|(
name|String
operator|)
name|cc
operator|.
name|elementAt
argument_list|(
name|index
argument_list|)
operator|)
return|;
block|}
specifier|public
name|Collection
name|getCC
parameter_list|()
block|{
return|return
operator|(
name|cc
operator|)
return|;
block|}
comment|//BCC
specifier|public
name|void
name|addBCC
parameter_list|(
name|String
name|bcc
parameter_list|)
block|{
name|this
operator|.
name|bcc
operator|.
name|addElement
argument_list|(
name|bcc
argument_list|)
expr_stmt|;
block|}
specifier|public
name|int
name|countBCC
parameter_list|()
block|{
return|return
operator|(
name|bcc
operator|.
name|size
argument_list|()
operator|)
return|;
block|}
specifier|public
name|String
name|getBCC
parameter_list|(
name|int
name|index
parameter_list|)
block|{
return|return
operator|(
operator|(
name|String
operator|)
name|bcc
operator|.
name|elementAt
argument_list|(
name|index
argument_list|)
operator|)
return|;
block|}
specifier|public
name|Collection
name|getBCC
parameter_list|()
block|{
return|return
operator|(
name|bcc
operator|)
return|;
block|}
comment|//Subject
specifier|public
name|void
name|setSubject
parameter_list|(
name|String
name|subject
parameter_list|)
block|{
name|this
operator|.
name|subject
operator|=
name|subject
expr_stmt|;
block|}
specifier|public
name|String
name|getSubject
parameter_list|()
block|{
return|return
operator|(
name|subject
operator|)
return|;
block|}
comment|//text
specifier|public
name|void
name|setText
parameter_list|(
name|String
name|text
parameter_list|)
block|{
name|this
operator|.
name|text
operator|=
name|text
expr_stmt|;
block|}
specifier|public
name|String
name|getText
parameter_list|()
block|{
return|return
operator|(
name|text
operator|)
return|;
block|}
comment|//xhtml
specifier|public
name|void
name|setXHTML
parameter_list|(
name|String
name|xhtml
parameter_list|)
block|{
name|this
operator|.
name|xhtml
operator|=
name|xhtml
expr_stmt|;
block|}
specifier|public
name|String
name|getXHTML
parameter_list|()
block|{
return|return
operator|(
name|xhtml
operator|)
return|;
block|}
block|}
block|}
end_class

end_unit

