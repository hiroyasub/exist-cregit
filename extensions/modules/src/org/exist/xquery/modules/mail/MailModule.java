begin_unit|revision:1.0.0;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  *  eXist Mail Module Extension  *  Copyright (C) 2006-09 Adam Retter<adam.retter@devon.gov.uk>  *  www.adamretter.co.uk  *    *  This program is free software; you can redistribute it and/or  *  modify it under the terms of the GNU Lesser General Public License  *  as published by the Free Software Foundation; either version 2  *  of the License, or (at your option) any later version.  *  *  This program is distributed in the hope that it will be useful,  *  but WITHOUT ANY WARRANTY; without even the implied warranty of  *  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the  *  GNU Lesser General Public License for more details.  *  *  You should have received a copy of the GNU Lesser General Public License  *  along with this program; if not, write to the Free Software Foundation  *  Inc., 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301, USA.  *    *  $Id$  */
end_comment

begin_package
package|package
name|org
operator|.
name|exist
operator|.
name|xquery
operator|.
name|modules
operator|.
name|mail
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
operator|.
name|Entry
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|xquery
operator|.
name|AbstractInternalModule
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|xquery
operator|.
name|FunctionDef
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|xquery
operator|.
name|XQueryContext
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|log4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|mail
operator|.
name|Folder
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|mail
operator|.
name|Message
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|mail
operator|.
name|MessagingException
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|mail
operator|.
name|Session
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|mail
operator|.
name|Store
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|xquery
operator|.
name|modules
operator|.
name|ModuleUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|xquery
operator|.
name|modules
operator|.
name|ModuleUtils
operator|.
name|ContextMapEntryModifier
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|xquery
operator|.
name|modules
operator|.
name|ModuleUtils
operator|.
name|ContextMapModifier
import|;
end_import

begin_comment
comment|/**  * eXist Mail Module Extension  *   * An extension module for the eXist Native XML Database that allows email to  * be sent from XQuery using either SMTP or Sendmail.    *   * @author Adam Retter<adam@exist-db.org>  * @author Andrzej Taramina<andrzej@chaeron.com>  * @author ljo  * @author JosÃ© MarÃ­a FernÃ¡ndez<josemariafg@gmail.com>  * @serial 2011-09-06  * @version 1.4.1  *  * @see org.exist.xquery.AbstractInternalModule#AbstractInternalModule(org.exist.xquery.FunctionDef[], java.util.Map)   */
end_comment

begin_class
specifier|public
class|class
name|MailModule
extends|extends
name|AbstractInternalModule
block|{
specifier|private
specifier|final
specifier|static
name|Logger
name|LOG
init|=
name|Logger
operator|.
name|getLogger
argument_list|(
name|MailModule
operator|.
name|class
argument_list|)
decl_stmt|;
specifier|public
specifier|final
specifier|static
name|String
name|NAMESPACE_URI
init|=
literal|"http://exist-db.org/xquery/mail"
decl_stmt|;
specifier|public
specifier|final
specifier|static
name|String
name|PREFIX
init|=
literal|"mail"
decl_stmt|;
comment|// JavaMail-based from 2009-03-14
comment|// makes the need for versioning of the functions obvious too /ljo
specifier|public
specifier|final
specifier|static
name|String
name|INCLUSION_DATE
init|=
literal|"2005-05-12, 2009-03-14"
decl_stmt|;
specifier|public
specifier|final
specifier|static
name|String
name|RELEASED_IN_VERSION
init|=
literal|"eXist-1.2 (JavaMail-based in trunk)"
decl_stmt|;
specifier|private
specifier|final
specifier|static
name|FunctionDef
index|[]
name|functions
init|=
block|{
operator|new
name|FunctionDef
argument_list|(
name|MailSessionFunctions
operator|.
name|signatures
index|[
literal|0
index|]
argument_list|,
name|MailSessionFunctions
operator|.
name|class
argument_list|)
block|,
operator|new
name|FunctionDef
argument_list|(
name|MailStoreFunctions
operator|.
name|signatures
index|[
literal|0
index|]
argument_list|,
name|MailStoreFunctions
operator|.
name|class
argument_list|)
block|,
operator|new
name|FunctionDef
argument_list|(
name|MailStoreFunctions
operator|.
name|signatures
index|[
literal|1
index|]
argument_list|,
name|MailStoreFunctions
operator|.
name|class
argument_list|)
block|,
operator|new
name|FunctionDef
argument_list|(
name|MailFolderFunctions
operator|.
name|signatures
index|[
literal|0
index|]
argument_list|,
name|MailFolderFunctions
operator|.
name|class
argument_list|)
block|,
operator|new
name|FunctionDef
argument_list|(
name|MailFolderFunctions
operator|.
name|signatures
index|[
literal|1
index|]
argument_list|,
name|MailFolderFunctions
operator|.
name|class
argument_list|)
block|,
operator|new
name|FunctionDef
argument_list|(
name|MessageListFunctions
operator|.
name|signatures
index|[
literal|0
index|]
argument_list|,
name|MessageListFunctions
operator|.
name|class
argument_list|)
block|,
operator|new
name|FunctionDef
argument_list|(
name|MessageListFunctions
operator|.
name|signatures
index|[
literal|1
index|]
argument_list|,
name|MessageListFunctions
operator|.
name|class
argument_list|)
block|,
operator|new
name|FunctionDef
argument_list|(
name|MessageListFunctions
operator|.
name|signatures
index|[
literal|2
index|]
argument_list|,
name|MessageListFunctions
operator|.
name|class
argument_list|)
block|,
operator|new
name|FunctionDef
argument_list|(
name|MessageListFunctions
operator|.
name|signatures
index|[
literal|3
index|]
argument_list|,
name|MessageListFunctions
operator|.
name|class
argument_list|)
block|,
operator|new
name|FunctionDef
argument_list|(
name|MessageFunctions
operator|.
name|signatures
index|[
literal|0
index|]
argument_list|,
name|MessageFunctions
operator|.
name|class
argument_list|)
block|,
operator|new
name|FunctionDef
argument_list|(
name|SendEmailFunction
operator|.
name|signatures
index|[
literal|0
index|]
argument_list|,
name|SendEmailFunction
operator|.
name|class
argument_list|)
block|,
comment|// deprecated functions:
operator|new
name|FunctionDef
argument_list|(
name|SendEmailFunction
operator|.
name|deprecated
argument_list|,
name|SendEmailFunction
operator|.
name|class
argument_list|)
block|}
decl_stmt|;
specifier|public
specifier|final
specifier|static
name|String
name|SESSIONS_CONTEXTVAR
init|=
literal|"_eXist_mail_sessions"
decl_stmt|;
specifier|public
specifier|final
specifier|static
name|String
name|STORES_CONTEXTVAR
init|=
literal|"_eXist_mail_stores"
decl_stmt|;
specifier|public
specifier|final
specifier|static
name|String
name|FOLDERS_CONTEXTVAR
init|=
literal|"_eXist_mail_folders"
decl_stmt|;
specifier|public
specifier|final
specifier|static
name|String
name|FOLDERMSGLISTS_CONTEXTVAR
init|=
literal|"_eXist_folder_message_lists"
decl_stmt|;
specifier|public
specifier|final
specifier|static
name|String
name|MSGLISTS_CONTEXTVAR
init|=
literal|"_eXist_mail_message_lists"
decl_stmt|;
specifier|private
specifier|static
name|long
name|currentSessionHandle
init|=
name|System
operator|.
name|currentTimeMillis
argument_list|()
decl_stmt|;
specifier|public
name|MailModule
parameter_list|(
name|Map
argument_list|<
name|String
argument_list|,
name|List
argument_list|<
name|?
extends|extends
name|Object
argument_list|>
argument_list|>
name|parameters
parameter_list|)
block|{
name|super
argument_list|(
name|functions
argument_list|,
name|parameters
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|String
name|getNamespaceURI
parameter_list|()
block|{
return|return
name|NAMESPACE_URI
return|;
block|}
annotation|@
name|Override
specifier|public
name|String
name|getDefaultPrefix
parameter_list|()
block|{
return|return
name|PREFIX
return|;
block|}
annotation|@
name|Override
specifier|public
name|String
name|getDescription
parameter_list|()
block|{
return|return
literal|"A module for performing email related functions"
return|;
block|}
annotation|@
name|Override
specifier|public
name|String
name|getReleaseVersion
parameter_list|()
block|{
return|return
name|RELEASED_IN_VERSION
return|;
block|}
comment|//***************************************************************************
comment|//*
comment|//*    Session Methods
comment|//*
comment|//***************************************************************************/
comment|/**      * Retrieves a previously stored Session from the Context of an XQuery      *       * @param context 			The Context of the XQuery containing the Session      * @param sessionHandle	 	The handle of the Session to retrieve from the Context of the XQuery      */
specifier|static
name|Session
name|retrieveSession
parameter_list|(
name|XQueryContext
name|context
parameter_list|,
name|long
name|sessionHandle
parameter_list|)
block|{
return|return
name|ModuleUtils
operator|.
name|retrieveObjectFromContextMap
argument_list|(
name|context
argument_list|,
name|MailModule
operator|.
name|SESSIONS_CONTEXTVAR
argument_list|,
name|sessionHandle
argument_list|)
return|;
block|}
comment|/**      * Stores a Session in the Context of an XQuery      *       * @param context 	The Context of the XQuery to store the Session in      * @param session 	The Session to store      *       * @return A unique handle representing the Session      */
specifier|static
name|long
name|storeSession
parameter_list|(
name|XQueryContext
name|context
parameter_list|,
name|Session
name|session
parameter_list|)
block|{
return|return
name|ModuleUtils
operator|.
name|storeObjectInContextMap
argument_list|(
name|context
argument_list|,
name|MailModule
operator|.
name|SESSIONS_CONTEXTVAR
argument_list|,
name|session
argument_list|)
return|;
block|}
comment|//***************************************************************************
comment|//*
comment|//*    Store Methods
comment|//*
comment|//***************************************************************************/
comment|/**      * Retrieves a previously saved Store from the Context of an XQuery      *       * @param context 			The Context of the XQuery containing the Store      * @param storeHandle	 	The handle of the Store to retrieve from the Context of the XQuery      */
specifier|static
name|Store
name|retrieveStore
parameter_list|(
name|XQueryContext
name|context
parameter_list|,
name|long
name|storeHandle
parameter_list|)
block|{
return|return
name|ModuleUtils
operator|.
name|retrieveObjectFromContextMap
argument_list|(
name|context
argument_list|,
name|MailModule
operator|.
name|STORES_CONTEXTVAR
argument_list|,
name|storeHandle
argument_list|)
return|;
block|}
comment|/**      * Saves a Store in the Context of an XQuery      *       * @param context 	The Context of the XQuery to save the Store in      * @param store 	The Store to store      *       * @return A unique handle representing the Store      */
specifier|static
name|long
name|storeStore
parameter_list|(
name|XQueryContext
name|context
parameter_list|,
name|Store
name|store
parameter_list|)
block|{
return|return
name|ModuleUtils
operator|.
name|storeObjectInContextMap
argument_list|(
name|context
argument_list|,
name|MailModule
operator|.
name|STORES_CONTEXTVAR
argument_list|,
name|store
argument_list|)
return|;
block|}
comment|/**      * Remove the store from the specified XQueryContext      *       * @param context The context to remove the store for      */
specifier|static
name|void
name|removeStore
parameter_list|(
name|XQueryContext
name|context
parameter_list|,
specifier|final
name|long
name|storeHandle
parameter_list|)
block|{
name|ModuleUtils
operator|.
name|modifyContextMap
argument_list|(
name|context
argument_list|,
name|MailModule
operator|.
name|STORES_CONTEXTVAR
argument_list|,
operator|new
name|ContextMapModifier
argument_list|<
name|Store
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|modify
parameter_list|(
name|Map
argument_list|<
name|Long
argument_list|,
name|Store
argument_list|>
name|map
parameter_list|)
block|{
name|map
operator|.
name|remove
argument_list|(
name|storeHandle
argument_list|)
expr_stmt|;
block|}
block|}
argument_list|)
expr_stmt|;
comment|//update the context
comment|//context.setXQueryContextVar(MailModule.STORES_CONTEXTVAR, stores);
block|}
comment|/**      * Closes all the open stores for the specified XQueryContext      *       * @param context The context to close stores for      */
specifier|private
specifier|static
name|void
name|closeAllStores
parameter_list|(
name|XQueryContext
name|context
parameter_list|)
block|{
name|ModuleUtils
operator|.
name|modifyContextMap
argument_list|(
name|context
argument_list|,
name|MailModule
operator|.
name|STORES_CONTEXTVAR
argument_list|,
operator|new
name|ContextMapEntryModifier
argument_list|<
name|Store
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|modify
parameter_list|(
name|Map
argument_list|<
name|Long
argument_list|,
name|Store
argument_list|>
name|map
parameter_list|)
block|{
name|super
operator|.
name|modify
argument_list|(
name|map
argument_list|)
expr_stmt|;
comment|//remove all stores from map
name|map
operator|.
name|clear
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|modify
parameter_list|(
name|Entry
argument_list|<
name|Long
argument_list|,
name|Store
argument_list|>
name|entry
parameter_list|)
block|{
specifier|final
name|Store
name|store
init|=
name|entry
operator|.
name|getValue
argument_list|()
decl_stmt|;
try|try
block|{
comment|// close the store
name|store
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|MessagingException
name|me
parameter_list|)
block|{
name|LOG
operator|.
name|warn
argument_list|(
literal|"Unable to close Mail Store: "
operator|+
name|me
operator|.
name|getMessage
argument_list|()
argument_list|,
name|me
argument_list|)
expr_stmt|;
block|}
block|}
block|}
argument_list|)
expr_stmt|;
comment|// update the context
comment|//context.setXQueryContextVar(MailModule.STORES_CONTEXTVAR, stores);
block|}
comment|//***************************************************************************
comment|//*
comment|//*    Folder Methods
comment|//*
comment|//***************************************************************************/
comment|/**      * Retrieves a previously saved Folder from the Context of an XQuery      *       * @param context 			The Context of the XQuery containing the Folder      * @param folderHandle	 	The handle of the Folder to retrieve from the Context of the XQuery      */
specifier|static
name|Folder
name|retrieveFolder
parameter_list|(
name|XQueryContext
name|context
parameter_list|,
name|long
name|folderHandle
parameter_list|)
block|{
return|return
name|ModuleUtils
operator|.
name|retrieveObjectFromContextMap
argument_list|(
name|context
argument_list|,
name|MailModule
operator|.
name|FOLDERS_CONTEXTVAR
argument_list|,
name|folderHandle
argument_list|)
return|;
block|}
comment|/**      * Saves a Folder in the Context of an XQuery      *       * @param context 	The Context of the XQuery to save the Folder in      * @param folder 	The Folder to store      *       * @return A unique handle representing the Store      */
specifier|static
name|long
name|storeFolder
parameter_list|(
name|XQueryContext
name|context
parameter_list|,
name|Folder
name|folder
parameter_list|)
block|{
return|return
name|ModuleUtils
operator|.
name|storeObjectInContextMap
argument_list|(
name|context
argument_list|,
name|MailModule
operator|.
name|FOLDERS_CONTEXTVAR
argument_list|,
name|folder
argument_list|)
return|;
block|}
comment|/**      * Remove the folder from the specified XQueryContext      *       * @param context The context to remove the store for      */
specifier|static
name|void
name|removeFolder
parameter_list|(
specifier|final
name|XQueryContext
name|context
parameter_list|,
specifier|final
name|long
name|folderHandle
parameter_list|)
block|{
name|ModuleUtils
operator|.
name|modifyContextMap
argument_list|(
name|context
argument_list|,
name|MailModule
operator|.
name|FOLDERS_CONTEXTVAR
argument_list|,
operator|new
name|ContextMapModifier
argument_list|<
name|Folder
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|modify
parameter_list|(
name|Map
argument_list|<
name|Long
argument_list|,
name|Folder
argument_list|>
name|map
parameter_list|)
block|{
comment|//remove the message lists for the folder
name|ModuleUtils
operator|.
name|modifyContextMap
argument_list|(
name|context
argument_list|,
name|MailModule
operator|.
name|FOLDERMSGLISTS_CONTEXTVAR
argument_list|,
operator|new
name|ContextMapModifier
argument_list|<
name|Map
argument_list|<
name|Long
argument_list|,
name|Message
index|[]
argument_list|>
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|modify
parameter_list|(
name|Map
argument_list|<
name|Long
argument_list|,
name|Map
argument_list|<
name|Long
argument_list|,
name|Message
index|[]
argument_list|>
argument_list|>
name|map
parameter_list|)
block|{
specifier|final
name|Map
argument_list|<
name|Long
argument_list|,
name|Message
index|[]
argument_list|>
name|folderMsgList
init|=
name|map
operator|.
name|get
argument_list|(
name|folderHandle
argument_list|)
decl_stmt|;
name|ModuleUtils
operator|.
name|modifyContextMap
argument_list|(
name|context
argument_list|,
name|MailModule
operator|.
name|MSGLISTS_CONTEXTVAR
argument_list|,
operator|new
name|ContextMapModifier
argument_list|<
name|Message
index|[]
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|modify
parameter_list|(
name|Map
argument_list|<
name|Long
argument_list|,
name|Message
index|[]
argument_list|>
name|map
parameter_list|)
block|{
for|for
control|(
specifier|final
name|Long
name|msgListKey
range|:
name|folderMsgList
operator|.
name|keySet
argument_list|()
control|)
block|{
name|map
operator|.
name|remove
argument_list|(
name|msgListKey
argument_list|)
expr_stmt|;
block|}
block|}
block|}
argument_list|)
expr_stmt|;
comment|//remove the folder message kist
name|map
operator|.
name|remove
argument_list|(
name|folderHandle
argument_list|)
expr_stmt|;
block|}
block|}
argument_list|)
expr_stmt|;
comment|//remove the folder
name|map
operator|.
name|remove
argument_list|(
name|folderHandle
argument_list|)
expr_stmt|;
block|}
block|}
argument_list|)
expr_stmt|;
block|}
comment|/**      * Closes all the open folders for the specified XQueryContext      *       * @param context The context to close folders for      */
specifier|private
specifier|static
name|void
name|closeAllFolders
parameter_list|(
name|XQueryContext
name|context
parameter_list|)
block|{
name|ModuleUtils
operator|.
name|modifyContextMap
argument_list|(
name|context
argument_list|,
name|MailModule
operator|.
name|FOLDERS_CONTEXTVAR
argument_list|,
operator|new
name|ContextMapEntryModifier
argument_list|<
name|Folder
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|modify
parameter_list|(
name|Map
argument_list|<
name|Long
argument_list|,
name|Folder
argument_list|>
name|map
parameter_list|)
block|{
name|super
operator|.
name|modify
argument_list|(
name|map
argument_list|)
expr_stmt|;
comment|//remove all from the folders map
name|map
operator|.
name|clear
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|modify
parameter_list|(
name|Entry
argument_list|<
name|Long
argument_list|,
name|Folder
argument_list|>
name|entry
parameter_list|)
block|{
specifier|final
name|Folder
name|folder
init|=
name|entry
operator|.
name|getValue
argument_list|()
decl_stmt|;
comment|//close the folder
try|try
block|{
name|folder
operator|.
name|close
argument_list|(
literal|false
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|MessagingException
name|me
parameter_list|)
block|{
name|LOG
operator|.
name|warn
argument_list|(
literal|"Unable to close Mail Folder: "
operator|+
name|me
operator|.
name|getMessage
argument_list|()
argument_list|,
name|me
argument_list|)
expr_stmt|;
block|}
block|}
block|}
argument_list|)
expr_stmt|;
comment|// update the context
comment|// context.setXQueryContextVar( MailModule.FOLDERS_CONTEXTVAR, folders );
block|}
comment|//***************************************************************************
comment|//*
comment|//*    Message List Methods
comment|//*
comment|//***************************************************************************/
comment|/**      * Retrieves a previously saved MessageList from the Context of an XQuery      *       * @param context 			The Context of the XQuery containing the Message List      * @param msgListHandle	 	The handle of the Message List to retrieve from the Context of the XQuery      */
specifier|static
name|Message
index|[]
name|retrieveMessageList
parameter_list|(
name|XQueryContext
name|context
parameter_list|,
name|long
name|msgListHandle
parameter_list|)
block|{
return|return
name|ModuleUtils
operator|.
name|retrieveObjectFromContextMap
argument_list|(
name|context
argument_list|,
name|MailModule
operator|.
name|MSGLISTS_CONTEXTVAR
argument_list|,
name|msgListHandle
argument_list|)
return|;
block|}
comment|/**      * Saves a MessageList in the Context of an XQuery      *       * @param context 	The Context of the XQuery to save the MessageList in      * @param msgList 	The MessageList to store      *       * @return A unique handle representing the Store      */
specifier|static
name|long
name|storeMessageList
parameter_list|(
name|XQueryContext
name|context
parameter_list|,
specifier|final
name|Message
index|[]
name|msgList
parameter_list|,
specifier|final
name|long
name|folderHandle
parameter_list|)
block|{
specifier|final
name|long
name|msgListHandle
init|=
name|ModuleUtils
operator|.
name|storeObjectInContextMap
argument_list|(
name|context
argument_list|,
name|MailModule
operator|.
name|MSGLISTS_CONTEXTVAR
argument_list|,
name|msgList
argument_list|)
decl_stmt|;
name|ModuleUtils
operator|.
name|modifyContextMap
argument_list|(
name|context
argument_list|,
name|MailModule
operator|.
name|FOLDERMSGLISTS_CONTEXTVAR
argument_list|,
operator|new
name|ContextMapModifier
argument_list|<
name|Map
argument_list|<
name|Long
argument_list|,
name|Message
index|[]
argument_list|>
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|modify
parameter_list|(
name|Map
argument_list|<
name|Long
argument_list|,
name|Map
argument_list|<
name|Long
argument_list|,
name|Message
index|[]
argument_list|>
argument_list|>
name|map
parameter_list|)
block|{
name|Map
argument_list|<
name|Long
argument_list|,
name|Message
index|[]
argument_list|>
name|folderMsgList
init|=
name|map
operator|.
name|get
argument_list|(
name|folderHandle
argument_list|)
decl_stmt|;
if|if
condition|(
name|folderMsgList
operator|==
literal|null
condition|)
block|{
name|folderMsgList
operator|=
operator|new
name|HashMap
argument_list|<
name|Long
argument_list|,
name|Message
index|[]
argument_list|>
argument_list|()
expr_stmt|;
name|map
operator|.
name|put
argument_list|(
name|folderHandle
argument_list|,
name|folderMsgList
argument_list|)
expr_stmt|;
block|}
name|folderMsgList
operator|.
name|put
argument_list|(
name|msgListHandle
argument_list|,
name|msgList
argument_list|)
expr_stmt|;
block|}
block|}
argument_list|)
expr_stmt|;
return|return
name|msgListHandle
return|;
block|}
comment|/**      * Remove the MessageList from the specified XQueryContext      *       * @param context The context to remove the MessageList for      */
specifier|static
name|void
name|removeMessageList
parameter_list|(
name|XQueryContext
name|context
parameter_list|,
specifier|final
name|long
name|msgListHandle
parameter_list|)
block|{
name|ModuleUtils
operator|.
name|modifyContextMap
argument_list|(
name|context
argument_list|,
name|MailModule
operator|.
name|MSGLISTS_CONTEXTVAR
argument_list|,
operator|new
name|ContextMapModifier
argument_list|<
name|Message
index|[]
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|modify
parameter_list|(
name|Map
argument_list|<
name|Long
argument_list|,
name|Message
index|[]
argument_list|>
name|map
parameter_list|)
block|{
name|map
operator|.
name|remove
argument_list|(
name|msgListHandle
argument_list|)
expr_stmt|;
block|}
block|}
argument_list|)
expr_stmt|;
comment|// update the context
comment|//context.setXQueryContextVar( MailModule.MSGLISTS_CONTEXTVAR, msgLists );
block|}
comment|/**      * Closes all the open MessageLists for the specified XQueryContext      *       * @param context The context to close MessageLists for      */
specifier|private
specifier|static
name|void
name|closeAllMessageLists
parameter_list|(
name|XQueryContext
name|context
parameter_list|)
block|{
name|ModuleUtils
operator|.
name|modifyContextMap
argument_list|(
name|context
argument_list|,
name|MailModule
operator|.
name|MSGLISTS_CONTEXTVAR
argument_list|,
operator|new
name|ContextMapModifier
argument_list|<
name|Message
index|[]
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|modify
parameter_list|(
name|Map
argument_list|<
name|Long
argument_list|,
name|Message
index|[]
argument_list|>
name|map
parameter_list|)
block|{
name|map
operator|.
name|clear
argument_list|()
expr_stmt|;
block|}
block|}
argument_list|)
expr_stmt|;
comment|// update the context
comment|//context.setXQueryContextVar( MailModule.MSGLISTS_CONTEXTVAR, msgLists );
block|}
comment|/**      * Resets the Module Context and closes any open mail stores/folders/message lists for the XQueryContext      *       * @param context The XQueryContext      */
annotation|@
name|Override
specifier|public
name|void
name|reset
parameter_list|(
name|XQueryContext
name|context
parameter_list|)
block|{
comment|// reset the module context
name|super
operator|.
name|reset
argument_list|(
name|context
argument_list|)
expr_stmt|;
comment|// close any open MessageLists
name|closeAllMessageLists
argument_list|(
name|context
argument_list|)
expr_stmt|;
comment|// close any open folders
name|closeAllFolders
argument_list|(
name|context
argument_list|)
expr_stmt|;
comment|// close any open stores
name|closeAllStores
argument_list|(
name|context
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

