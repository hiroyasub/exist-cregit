begin_unit|revision:1.0.0;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  *  eXist Mail Module Extension MessageListFunctions  *  Copyright (C) 2006-09 Adam Retter<adam.retter@devon.gov.uk>  *  www.adamretter.co.uk  *    *  This program is free software; you can redistribute it and/or  *  modify it under the terms of the GNU Lesser General Public License  *  as published by the Free Software Foundation; either version 2  *  of the License, or (at your option) any later version.  *  *  This program is distributed in the hope that it will be useful,  *  but WITHOUT ANY WARRANTY; without even the implied warranty of  *  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the  *  GNU Lesser General Public License for more details.  *  *  You should have received a copy of the GNU Lesser General Public License  *  along with this program; if not, write to the Free Software Foundation  *  Inc., 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301, USA.  *    *  $Id$  */
end_comment

begin_package
package|package
name|org
operator|.
name|exist
operator|.
name|xquery
operator|.
name|modules
operator|.
name|mail
package|;
end_package

begin_import
import|import
name|java
operator|.
name|text
operator|.
name|ParseException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|text
operator|.
name|SimpleDateFormat
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Date
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Enumeration
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|mail
operator|.
name|Address
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|mail
operator|.
name|FetchProfile
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|mail
operator|.
name|Flags
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|mail
operator|.
name|Folder
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|mail
operator|.
name|Header
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|mail
operator|.
name|Message
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|mail
operator|.
name|MessagingException
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|mail
operator|.
name|search
operator|.
name|AndTerm
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|mail
operator|.
name|search
operator|.
name|BodyTerm
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|mail
operator|.
name|search
operator|.
name|ComparisonTerm
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|mail
operator|.
name|search
operator|.
name|FlagTerm
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|mail
operator|.
name|search
operator|.
name|FromStringTerm
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|mail
operator|.
name|search
operator|.
name|HeaderTerm
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|mail
operator|.
name|search
operator|.
name|NotTerm
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|mail
operator|.
name|search
operator|.
name|OrTerm
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|mail
operator|.
name|search
operator|.
name|ReceivedDateTerm
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|mail
operator|.
name|search
operator|.
name|RecipientStringTerm
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|mail
operator|.
name|search
operator|.
name|SearchTerm
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|mail
operator|.
name|search
operator|.
name|SentDateTerm
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|mail
operator|.
name|search
operator|.
name|SubjectTerm
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|log4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|dom
operator|.
name|QName
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|memtree
operator|.
name|MemTreeBuilder
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|xquery
operator|.
name|BasicFunction
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|xquery
operator|.
name|Cardinality
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|xquery
operator|.
name|FunctionSignature
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|xquery
operator|.
name|XPathException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|xquery
operator|.
name|XQueryContext
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|xquery
operator|.
name|value
operator|.
name|FunctionParameterSequenceType
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|xquery
operator|.
name|value
operator|.
name|FunctionReturnSequenceType
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|xquery
operator|.
name|value
operator|.
name|IntegerValue
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|xquery
operator|.
name|value
operator|.
name|NodeValue
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|xquery
operator|.
name|value
operator|.
name|Sequence
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|xquery
operator|.
name|value
operator|.
name|SequenceType
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|xquery
operator|.
name|value
operator|.
name|Type
import|;
end_import

begin_import
import|import
name|org
operator|.
name|w3c
operator|.
name|dom
operator|.
name|Element
import|;
end_import

begin_import
import|import
name|org
operator|.
name|w3c
operator|.
name|dom
operator|.
name|Node
import|;
end_import

begin_import
import|import
name|org
operator|.
name|w3c
operator|.
name|dom
operator|.
name|NodeList
import|;
end_import

begin_comment
comment|/**  * eXist Mail Module Extension GetMessageList  *   * Get a mail store  *   * @author Andrzej Taramina<andrzej@chaeron.com>  * @serial 2009-03-12  * @version 1.3  *  * @see org.exist.xquery.BasicFunction#BasicFunction(org.exist.xquery.XQueryContext, org.exist.xquery.FunctionSignature)  */
end_comment

begin_class
specifier|public
class|class
name|MessageListFunctions
extends|extends
name|BasicFunction
block|{
specifier|protected
specifier|static
specifier|final
name|Logger
name|logger
init|=
name|Logger
operator|.
name|getLogger
argument_list|(
name|MessageListFunctions
operator|.
name|class
argument_list|)
decl_stmt|;
specifier|public
specifier|final
specifier|static
name|FunctionSignature
name|signatures
index|[]
init|=
block|{
operator|new
name|FunctionSignature
argument_list|(
operator|new
name|QName
argument_list|(
literal|"get-message-list"
argument_list|,
name|MailModule
operator|.
name|NAMESPACE_URI
argument_list|,
name|MailModule
operator|.
name|PREFIX
argument_list|)
argument_list|,
literal|"Returns a message list of all messages in a folder."
argument_list|,
operator|new
name|SequenceType
index|[]
block|{
operator|new
name|FunctionParameterSequenceType
argument_list|(
literal|"mail-folder-handle"
argument_list|,
name|Type
operator|.
name|INTEGER
argument_list|,
name|Cardinality
operator|.
name|EXACTLY_ONE
argument_list|,
literal|"The mail folder handle retrieved from mail:get-mail-folder()"
argument_list|)
block|}
argument_list|,
operator|new
name|FunctionReturnSequenceType
argument_list|(
name|Type
operator|.
name|LONG
argument_list|,
name|Cardinality
operator|.
name|ZERO_OR_ONE
argument_list|,
literal|"an xs:long representing the message list handle."
argument_list|)
argument_list|)
block|,
operator|new
name|FunctionSignature
argument_list|(
operator|new
name|QName
argument_list|(
literal|"search-message-list"
argument_list|,
name|MailModule
operator|.
name|NAMESPACE_URI
argument_list|,
name|MailModule
operator|.
name|PREFIX
argument_list|)
argument_list|,
literal|"Searches messages in a folder. "
operator|+
literal|"Search terms are of the form<searchTerm type=\"xxx\">...</searchTerm>.  Valid types include: not, and, or, from, subject, body, recipient, header, flag, sent, received. "
operator|+
literal|"<searchTerm type=\"not\"> requires a single nested child search term.<searchTerm type=\"and\"> and<searchTerm type=\"or\"> must have one or more nested child search terms. "
operator|+
literal|"<searchTerm type=\"from\" pattern=\"pat\">,<searchTerm type=\"subject\" pattern=\"pat\"> and<searchTerm type=\"body\" pattern=\"pat\">  require a pattern attribute and will search for a substring that matches the pattern. "
operator|+
literal|"<searchTerm type=\"recipient\" pattern=\"pat\" recipientType=\"to|cc|bcc\"> requires pattern and recipientType attributes. "
operator|+
literal|"<searchTerm type=\"header\" pattern=\"pat\" name=\"Content-Type\"> requires pattern and name attributes. "
operator|+
literal|"<searchTerm type=\"flag\" flag=\"answered|deleted|draft|recent|seen\" value=\"true|false\"> requires flag and value attributes. "
operator|+
literal|"<searchTerm type=\"sent\" comparison=\"eq|gt|ge|lt|le|ne\" format=\"format\" date=\"date\"> and<searchTerm type=\"received\" comparison=\"eq|gt|ge|lt|le|ne\" format=\"format\" date=\"date\"> require comparison, format and date attributes. "
operator|+
literal|"The format string should conform to Java SimpleDateFormat specifications and the date string must conform to the specified format string."
argument_list|,
operator|new
name|SequenceType
index|[]
block|{
operator|new
name|FunctionParameterSequenceType
argument_list|(
literal|"mail-folder-handle"
argument_list|,
name|Type
operator|.
name|INTEGER
argument_list|,
name|Cardinality
operator|.
name|EXACTLY_ONE
argument_list|,
literal|"The mail folder handle retrieved from mail:get-mail-folder()"
argument_list|)
block|,
operator|new
name|FunctionParameterSequenceType
argument_list|(
literal|"search-parameters"
argument_list|,
name|Type
operator|.
name|ELEMENT
argument_list|,
name|Cardinality
operator|.
name|EXACTLY_ONE
argument_list|,
literal|"The xml fragment defining the search terms"
argument_list|)
block|}
argument_list|,
operator|new
name|FunctionReturnSequenceType
argument_list|(
name|Type
operator|.
name|LONG
argument_list|,
name|Cardinality
operator|.
name|ZERO_OR_ONE
argument_list|,
literal|"an xs:long representing the message list handle."
argument_list|)
argument_list|)
block|,
operator|new
name|FunctionSignature
argument_list|(
operator|new
name|QName
argument_list|(
literal|"get-message-list-as-xml"
argument_list|,
name|MailModule
operator|.
name|NAMESPACE_URI
argument_list|,
name|MailModule
operator|.
name|PREFIX
argument_list|)
argument_list|,
literal|"Returns a message list of all messages in a folder as XML.  If there are no messages in the list, an empty sequence will be returned"
argument_list|,
operator|new
name|SequenceType
index|[]
block|{
operator|new
name|FunctionParameterSequenceType
argument_list|(
literal|"message-list-handle"
argument_list|,
name|Type
operator|.
name|INTEGER
argument_list|,
name|Cardinality
operator|.
name|EXACTLY_ONE
argument_list|,
literal|"The message list handle retrieved from mail:get-message-list() or mail:search-message-list()"
argument_list|)
block|,
operator|new
name|FunctionParameterSequenceType
argument_list|(
literal|"include-headers"
argument_list|,
name|Type
operator|.
name|BOOLEAN
argument_list|,
name|Cardinality
operator|.
name|EXACTLY_ONE
argument_list|,
literal|"A boolean specifying whether to include message headers"
argument_list|)
block|}
argument_list|,
operator|new
name|FunctionReturnSequenceType
argument_list|(
name|Type
operator|.
name|ELEMENT
argument_list|,
name|Cardinality
operator|.
name|ZERO_OR_ONE
argument_list|,
literal|"the list of all messages in a folder as XML"
argument_list|)
argument_list|)
block|,
operator|new
name|FunctionSignature
argument_list|(
operator|new
name|QName
argument_list|(
literal|"close-message-list"
argument_list|,
name|MailModule
operator|.
name|NAMESPACE_URI
argument_list|,
name|MailModule
operator|.
name|PREFIX
argument_list|)
argument_list|,
literal|"Closes a message list."
argument_list|,
operator|new
name|SequenceType
index|[]
block|{
operator|new
name|FunctionParameterSequenceType
argument_list|(
literal|"message-list-handle"
argument_list|,
name|Type
operator|.
name|INTEGER
argument_list|,
name|Cardinality
operator|.
name|EXACTLY_ONE
argument_list|,
literal|"The message list handle retrieved from mail:get-message-list() or mail:search-message-list()"
argument_list|)
block|}
argument_list|,
operator|new
name|SequenceType
argument_list|(
name|Type
operator|.
name|ITEM
argument_list|,
name|Cardinality
operator|.
name|EMPTY
argument_list|)
argument_list|)
block|}
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|String
name|DATE_FORMAT
init|=
literal|"yyyy-MM-dd'T'HH:mm:ss.SSSZ"
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|String
name|PREFETCH_HEADERS
index|[]
init|=
block|{
literal|"Return-Path"
block|,
literal|"Delivered-To"
block|,
literal|"Received"
block|,
literal|"Date"
block|,
literal|"From"
block|,
literal|"To"
block|,
literal|"Message-ID"
block|,
literal|"Subject"
block|,
literal|"MIME-Version"
block|,
literal|"Content-Type"
block|,
literal|"Content-Transfer-Encoding"
block|,
literal|"X-Mailer"
block|,
literal|"X-Priority"
block|}
decl_stmt|;
comment|/** 	 * MessageListFunctions Constructor 	 *  	 * @param context	The Context of the calling XQuery 	 */
specifier|public
name|MessageListFunctions
parameter_list|(
name|XQueryContext
name|context
parameter_list|,
name|FunctionSignature
name|signature
parameter_list|)
block|{
name|super
argument_list|(
name|context
argument_list|,
name|signature
argument_list|)
expr_stmt|;
block|}
comment|/** 	 * evaluate the call to the xquery get-message-list function, 	 * it is really the main entry point of this class 	 *  	 * @param args		arguments from the get-message-list() function call 	 * @param contextSequence	the Context Sequence to operate on (not used here internally!) 	 * @return		A sequence representing the result of the get-message-list() function call 	 *  	 * @see org.exist.xquery.BasicFunction#eval(org.exist.xquery.value.Sequence[], org.exist.xquery.value.Sequence) 	 */
specifier|public
name|Sequence
name|eval
parameter_list|(
name|Sequence
index|[]
name|args
parameter_list|,
name|Sequence
name|contextSequence
parameter_list|)
throws|throws
name|XPathException
block|{
if|if
condition|(
name|isCalledAs
argument_list|(
literal|"get-message-list"
argument_list|)
condition|)
block|{
name|Sequence
name|messageList
init|=
name|getMessageList
argument_list|(
name|args
argument_list|,
name|contextSequence
argument_list|)
decl_stmt|;
return|return
name|messageList
return|;
block|}
if|else if
condition|(
name|isCalledAs
argument_list|(
literal|"search-message-list"
argument_list|)
condition|)
block|{
name|Sequence
name|searchMessageList
init|=
name|searchMessageList
argument_list|(
name|args
argument_list|,
name|contextSequence
argument_list|)
decl_stmt|;
return|return
name|searchMessageList
return|;
block|}
if|else if
condition|(
name|isCalledAs
argument_list|(
literal|"get-message-list-as-xml"
argument_list|)
condition|)
block|{
name|Sequence
name|messageListAsXML
init|=
name|getMessageListAsXML
argument_list|(
name|args
argument_list|,
name|contextSequence
argument_list|)
decl_stmt|;
return|return
name|messageListAsXML
return|;
block|}
if|else if
condition|(
name|isCalledAs
argument_list|(
literal|"close-message-list"
argument_list|)
condition|)
block|{
name|Sequence
name|closeMessageList
init|=
name|closeMessageList
argument_list|(
name|args
argument_list|,
name|contextSequence
argument_list|)
decl_stmt|;
return|return
name|closeMessageList
return|;
block|}
throw|throw
operator|(
operator|new
name|XPathException
argument_list|(
name|this
argument_list|,
literal|"Invalid function name"
argument_list|)
operator|)
throw|;
block|}
comment|//***************************************************************************
comment|//*
comment|//*    Function Implementation Methods
comment|//*
comment|//***************************************************************************/
specifier|private
name|Sequence
name|getMessageList
parameter_list|(
name|Sequence
index|[]
name|args
parameter_list|,
name|Sequence
name|contextSequence
parameter_list|)
throws|throws
name|XPathException
block|{
name|Message
index|[]
name|msgList
decl_stmt|;
comment|// was a folder handle specified?
if|if
condition|(
name|args
index|[
literal|0
index|]
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
throw|throw
operator|(
operator|new
name|XPathException
argument_list|(
name|this
argument_list|,
literal|"Folder handle not specified"
argument_list|)
operator|)
throw|;
block|}
comment|// get the Folder
name|long
name|folderHandle
init|=
operator|(
operator|(
name|IntegerValue
operator|)
name|args
index|[
literal|0
index|]
operator|.
name|itemAt
argument_list|(
literal|0
argument_list|)
operator|)
operator|.
name|getLong
argument_list|()
decl_stmt|;
name|Folder
name|folder
init|=
name|MailModule
operator|.
name|retrieveFolder
argument_list|(
name|context
argument_list|,
name|folderHandle
argument_list|)
decl_stmt|;
if|if
condition|(
name|folder
operator|==
literal|null
condition|)
block|{
throw|throw
operator|(
operator|new
name|XPathException
argument_list|(
name|this
argument_list|,
literal|"Invalid Folder handle specified"
argument_list|)
operator|)
throw|;
block|}
try|try
block|{
name|msgList
operator|=
name|folder
operator|.
name|getMessages
argument_list|()
expr_stmt|;
name|prefetchMessages
argument_list|(
name|folder
argument_list|,
name|msgList
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|MessagingException
name|me
parameter_list|)
block|{
throw|throw
operator|(
operator|new
name|XPathException
argument_list|(
name|this
argument_list|,
literal|"Failed to get mail list"
argument_list|,
name|me
argument_list|)
operator|)
throw|;
block|}
comment|// save the message list and return the handle of the message list
return|return
operator|(
operator|new
name|IntegerValue
argument_list|(
name|MailModule
operator|.
name|storeMessageList
argument_list|(
name|context
argument_list|,
name|msgList
argument_list|,
name|folderHandle
argument_list|)
argument_list|)
operator|)
return|;
block|}
specifier|private
name|Sequence
name|searchMessageList
parameter_list|(
name|Sequence
index|[]
name|args
parameter_list|,
name|Sequence
name|contextSequence
parameter_list|)
throws|throws
name|XPathException
block|{
name|Message
index|[]
name|msgList
decl_stmt|;
comment|// was a folder handle specified?
if|if
condition|(
name|args
index|[
literal|0
index|]
operator|.
name|isEmpty
argument_list|()
operator|||
name|args
index|[
literal|1
index|]
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
throw|throw
operator|(
operator|new
name|XPathException
argument_list|(
name|this
argument_list|,
literal|"Folder handle or Search Terms not specified"
argument_list|)
operator|)
throw|;
block|}
comment|// get the Folder
name|long
name|folderHandle
init|=
operator|(
operator|(
name|IntegerValue
operator|)
name|args
index|[
literal|0
index|]
operator|.
name|itemAt
argument_list|(
literal|0
argument_list|)
operator|)
operator|.
name|getLong
argument_list|()
decl_stmt|;
name|Folder
name|folder
init|=
name|MailModule
operator|.
name|retrieveFolder
argument_list|(
name|context
argument_list|,
name|folderHandle
argument_list|)
decl_stmt|;
if|if
condition|(
name|folder
operator|==
literal|null
condition|)
block|{
throw|throw
operator|(
operator|new
name|XPathException
argument_list|(
name|this
argument_list|,
literal|"Invalid Folder handle specified"
argument_list|)
operator|)
throw|;
block|}
name|Node
name|searchTermsXML
init|=
operator|(
operator|(
name|NodeValue
operator|)
name|args
index|[
literal|1
index|]
operator|.
name|itemAt
argument_list|(
literal|0
argument_list|)
operator|)
operator|.
name|getNode
argument_list|()
decl_stmt|;
try|try
block|{
name|msgList
operator|=
name|folder
operator|.
name|search
argument_list|(
name|parseSearchTerms
argument_list|(
name|searchTermsXML
argument_list|)
argument_list|)
expr_stmt|;
name|prefetchMessages
argument_list|(
name|folder
argument_list|,
name|msgList
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|MessagingException
name|me
parameter_list|)
block|{
throw|throw
operator|(
operator|new
name|XPathException
argument_list|(
name|this
argument_list|,
literal|"Failed to get mail list"
argument_list|,
name|me
argument_list|)
operator|)
throw|;
block|}
comment|// save the message list and return the handle of the message list
return|return
operator|(
operator|new
name|IntegerValue
argument_list|(
name|MailModule
operator|.
name|storeMessageList
argument_list|(
name|context
argument_list|,
name|msgList
argument_list|,
name|folderHandle
argument_list|)
argument_list|)
operator|)
return|;
block|}
specifier|private
name|void
name|prefetchMessages
parameter_list|(
name|Folder
name|folder
parameter_list|,
name|Message
index|[]
name|msgList
parameter_list|)
throws|throws
name|MessagingException
block|{
comment|// Prefetch all the key information and headers
name|FetchProfile
name|fp
init|=
operator|new
name|FetchProfile
argument_list|()
decl_stmt|;
name|fp
operator|.
name|add
argument_list|(
name|FetchProfile
operator|.
name|Item
operator|.
name|ENVELOPE
argument_list|)
expr_stmt|;
for|for
control|(
name|String
name|PREFETCH_HEADERS
range|:
name|PREFETCH_HEADERS
control|)
block|{
name|fp
operator|.
name|add
argument_list|(
name|PREFETCH_HEADERS
argument_list|)
expr_stmt|;
block|}
name|folder
operator|.
name|fetch
argument_list|(
name|msgList
argument_list|,
name|fp
argument_list|)
expr_stmt|;
block|}
specifier|private
name|Sequence
name|getMessageListAsXML
parameter_list|(
name|Sequence
index|[]
name|args
parameter_list|,
name|Sequence
name|contextSequence
parameter_list|)
throws|throws
name|XPathException
block|{
name|Message
index|[]
name|msgList
decl_stmt|;
name|Sequence
name|ret
init|=
name|Sequence
operator|.
name|EMPTY_SEQUENCE
decl_stmt|;
comment|// was a msgList handle specified?
if|if
condition|(
name|args
index|[
literal|0
index|]
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
throw|throw
operator|(
operator|new
name|XPathException
argument_list|(
name|this
argument_list|,
literal|"Message List handle not specified"
argument_list|)
operator|)
throw|;
block|}
comment|// get the MessageList
name|long
name|msgListHandle
init|=
operator|(
operator|(
name|IntegerValue
operator|)
name|args
index|[
literal|0
index|]
operator|.
name|itemAt
argument_list|(
literal|0
argument_list|)
operator|)
operator|.
name|getLong
argument_list|()
decl_stmt|;
name|msgList
operator|=
name|MailModule
operator|.
name|retrieveMessageList
argument_list|(
name|context
argument_list|,
name|msgListHandle
argument_list|)
expr_stmt|;
if|if
condition|(
name|msgList
operator|==
literal|null
condition|)
block|{
throw|throw
operator|(
operator|new
name|XPathException
argument_list|(
name|this
argument_list|,
literal|"Invalid Message List handle specified"
argument_list|)
operator|)
throw|;
block|}
if|if
condition|(
name|msgList
operator|.
name|length
operator|>
literal|0
condition|)
block|{
name|boolean
name|includeHeaders
init|=
name|args
index|[
literal|1
index|]
operator|.
name|effectiveBooleanValue
argument_list|()
decl_stmt|;
name|MemTreeBuilder
name|builder
init|=
name|context
operator|.
name|getDocumentBuilder
argument_list|()
decl_stmt|;
name|builder
operator|.
name|startDocument
argument_list|()
expr_stmt|;
name|builder
operator|.
name|startElement
argument_list|(
operator|new
name|QName
argument_list|(
literal|"messages"
argument_list|,
name|MailModule
operator|.
name|NAMESPACE_URI
argument_list|,
name|MailModule
operator|.
name|PREFIX
argument_list|)
argument_list|,
literal|null
argument_list|)
expr_stmt|;
name|builder
operator|.
name|addAttribute
argument_list|(
operator|new
name|QName
argument_list|(
literal|"count"
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|)
argument_list|,
name|String
operator|.
name|valueOf
argument_list|(
name|msgList
operator|.
name|length
argument_list|)
argument_list|)
expr_stmt|;
try|try
block|{
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|msgList
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
name|Message
name|message
init|=
name|msgList
index|[
name|i
index|]
decl_stmt|;
name|builder
operator|.
name|startElement
argument_list|(
operator|new
name|QName
argument_list|(
literal|"message"
argument_list|,
name|MailModule
operator|.
name|NAMESPACE_URI
argument_list|,
name|MailModule
operator|.
name|PREFIX
argument_list|)
argument_list|,
literal|null
argument_list|)
expr_stmt|;
name|builder
operator|.
name|addAttribute
argument_list|(
operator|new
name|QName
argument_list|(
literal|"number"
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|)
argument_list|,
name|String
operator|.
name|valueOf
argument_list|(
name|i
argument_list|)
argument_list|)
expr_stmt|;
comment|// Sent Date
if|if
condition|(
name|message
operator|.
name|getSentDate
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|builder
operator|.
name|startElement
argument_list|(
operator|new
name|QName
argument_list|(
literal|"sent"
argument_list|,
name|MailModule
operator|.
name|NAMESPACE_URI
argument_list|,
name|MailModule
operator|.
name|PREFIX
argument_list|)
argument_list|,
literal|null
argument_list|)
expr_stmt|;
name|builder
operator|.
name|characters
argument_list|(
name|formatDate
argument_list|(
name|message
operator|.
name|getSentDate
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|builder
operator|.
name|endElement
argument_list|()
expr_stmt|;
block|}
comment|// Received Date
if|if
condition|(
name|message
operator|.
name|getReceivedDate
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|builder
operator|.
name|startElement
argument_list|(
operator|new
name|QName
argument_list|(
literal|"received"
argument_list|,
name|MailModule
operator|.
name|NAMESPACE_URI
argument_list|,
name|MailModule
operator|.
name|PREFIX
argument_list|)
argument_list|,
literal|null
argument_list|)
expr_stmt|;
name|builder
operator|.
name|characters
argument_list|(
name|formatDate
argument_list|(
name|message
operator|.
name|getReceivedDate
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|builder
operator|.
name|endElement
argument_list|()
expr_stmt|;
block|}
comment|// From
if|if
condition|(
name|message
operator|.
name|getFrom
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|builder
operator|.
name|startElement
argument_list|(
operator|new
name|QName
argument_list|(
literal|"from"
argument_list|,
name|MailModule
operator|.
name|NAMESPACE_URI
argument_list|,
name|MailModule
operator|.
name|PREFIX
argument_list|)
argument_list|,
literal|null
argument_list|)
expr_stmt|;
name|builder
operator|.
name|characters
argument_list|(
name|message
operator|.
name|getFrom
argument_list|()
index|[
literal|0
index|]
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|builder
operator|.
name|endElement
argument_list|()
expr_stmt|;
block|}
comment|// Recipients
name|builder
operator|.
name|startElement
argument_list|(
operator|new
name|QName
argument_list|(
literal|"recipients"
argument_list|,
name|MailModule
operator|.
name|NAMESPACE_URI
argument_list|,
name|MailModule
operator|.
name|PREFIX
argument_list|)
argument_list|,
literal|null
argument_list|)
expr_stmt|;
comment|// To Recipients
name|Address
index|[]
name|toAddresses
init|=
name|message
operator|.
name|getRecipients
argument_list|(
name|Message
operator|.
name|RecipientType
operator|.
name|TO
argument_list|)
decl_stmt|;
if|if
condition|(
name|toAddresses
operator|!=
literal|null
condition|)
block|{
for|for
control|(
name|Address
name|to
range|:
name|toAddresses
control|)
block|{
name|builder
operator|.
name|startElement
argument_list|(
operator|new
name|QName
argument_list|(
literal|"recipient"
argument_list|,
name|MailModule
operator|.
name|NAMESPACE_URI
argument_list|,
name|MailModule
operator|.
name|PREFIX
argument_list|)
argument_list|,
literal|null
argument_list|)
expr_stmt|;
name|builder
operator|.
name|addAttribute
argument_list|(
operator|new
name|QName
argument_list|(
literal|"type"
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|)
argument_list|,
literal|"to"
argument_list|)
expr_stmt|;
name|builder
operator|.
name|characters
argument_list|(
name|to
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|builder
operator|.
name|endElement
argument_list|()
expr_stmt|;
block|}
block|}
comment|// cc Recipients
name|Address
index|[]
name|ccAddresses
init|=
name|message
operator|.
name|getRecipients
argument_list|(
name|Message
operator|.
name|RecipientType
operator|.
name|CC
argument_list|)
decl_stmt|;
if|if
condition|(
name|ccAddresses
operator|!=
literal|null
condition|)
block|{
for|for
control|(
name|Address
name|ccAddress
range|:
name|ccAddresses
control|)
block|{
name|builder
operator|.
name|startElement
argument_list|(
operator|new
name|QName
argument_list|(
literal|"recipient"
argument_list|,
name|MailModule
operator|.
name|NAMESPACE_URI
argument_list|,
name|MailModule
operator|.
name|PREFIX
argument_list|)
argument_list|,
literal|null
argument_list|)
expr_stmt|;
name|builder
operator|.
name|addAttribute
argument_list|(
operator|new
name|QName
argument_list|(
literal|"type"
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|)
argument_list|,
literal|"cc"
argument_list|)
expr_stmt|;
name|builder
operator|.
name|characters
argument_list|(
name|ccAddress
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|builder
operator|.
name|endElement
argument_list|()
expr_stmt|;
block|}
block|}
comment|// bcc Recipients
name|Address
index|[]
name|bccAddresses
init|=
name|message
operator|.
name|getRecipients
argument_list|(
name|Message
operator|.
name|RecipientType
operator|.
name|BCC
argument_list|)
decl_stmt|;
if|if
condition|(
name|bccAddresses
operator|!=
literal|null
condition|)
block|{
for|for
control|(
name|Address
name|bccAddress
range|:
name|bccAddresses
control|)
block|{
name|builder
operator|.
name|startElement
argument_list|(
operator|new
name|QName
argument_list|(
literal|"recipient"
argument_list|,
name|MailModule
operator|.
name|NAMESPACE_URI
argument_list|,
name|MailModule
operator|.
name|PREFIX
argument_list|)
argument_list|,
literal|null
argument_list|)
expr_stmt|;
name|builder
operator|.
name|addAttribute
argument_list|(
operator|new
name|QName
argument_list|(
literal|"type"
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|)
argument_list|,
literal|"bcc"
argument_list|)
expr_stmt|;
name|builder
operator|.
name|characters
argument_list|(
name|bccAddress
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|builder
operator|.
name|endElement
argument_list|()
expr_stmt|;
block|}
block|}
name|builder
operator|.
name|endElement
argument_list|()
expr_stmt|;
comment|// Flags
name|Flags
name|flags
init|=
name|message
operator|.
name|getFlags
argument_list|()
decl_stmt|;
name|Flags
operator|.
name|Flag
index|[]
name|systemFlags
init|=
name|flags
operator|.
name|getSystemFlags
argument_list|()
decl_stmt|;
name|String
index|[]
name|userFlags
init|=
name|flags
operator|.
name|getUserFlags
argument_list|()
decl_stmt|;
if|if
condition|(
name|systemFlags
operator|.
name|length
operator|>
literal|0
operator|||
name|userFlags
operator|.
name|length
operator|>
literal|0
condition|)
block|{
name|builder
operator|.
name|startElement
argument_list|(
operator|new
name|QName
argument_list|(
literal|"flags"
argument_list|,
name|MailModule
operator|.
name|NAMESPACE_URI
argument_list|,
name|MailModule
operator|.
name|PREFIX
argument_list|)
argument_list|,
literal|null
argument_list|)
expr_stmt|;
for|for
control|(
name|Flags
operator|.
name|Flag
name|systemFlag
range|:
name|systemFlags
control|)
block|{
if|if
condition|(
name|systemFlag
operator|==
name|Flags
operator|.
name|Flag
operator|.
name|ANSWERED
condition|)
block|{
name|builder
operator|.
name|startElement
argument_list|(
operator|new
name|QName
argument_list|(
literal|"flag"
argument_list|,
name|MailModule
operator|.
name|NAMESPACE_URI
argument_list|,
name|MailModule
operator|.
name|PREFIX
argument_list|)
argument_list|,
literal|null
argument_list|)
expr_stmt|;
name|builder
operator|.
name|addAttribute
argument_list|(
operator|new
name|QName
argument_list|(
literal|"type"
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|)
argument_list|,
literal|"answered"
argument_list|)
expr_stmt|;
name|builder
operator|.
name|endElement
argument_list|()
expr_stmt|;
block|}
if|else if
condition|(
name|systemFlag
operator|==
name|Flags
operator|.
name|Flag
operator|.
name|DELETED
condition|)
block|{
name|builder
operator|.
name|startElement
argument_list|(
operator|new
name|QName
argument_list|(
literal|"flag"
argument_list|,
name|MailModule
operator|.
name|NAMESPACE_URI
argument_list|,
name|MailModule
operator|.
name|PREFIX
argument_list|)
argument_list|,
literal|null
argument_list|)
expr_stmt|;
name|builder
operator|.
name|addAttribute
argument_list|(
operator|new
name|QName
argument_list|(
literal|"type"
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|)
argument_list|,
literal|"deleted"
argument_list|)
expr_stmt|;
name|builder
operator|.
name|endElement
argument_list|()
expr_stmt|;
block|}
if|else if
condition|(
name|systemFlag
operator|==
name|Flags
operator|.
name|Flag
operator|.
name|DRAFT
condition|)
block|{
name|builder
operator|.
name|startElement
argument_list|(
operator|new
name|QName
argument_list|(
literal|"flag"
argument_list|,
name|MailModule
operator|.
name|NAMESPACE_URI
argument_list|,
name|MailModule
operator|.
name|PREFIX
argument_list|)
argument_list|,
literal|null
argument_list|)
expr_stmt|;
name|builder
operator|.
name|addAttribute
argument_list|(
operator|new
name|QName
argument_list|(
literal|"type"
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|)
argument_list|,
literal|"draft"
argument_list|)
expr_stmt|;
name|builder
operator|.
name|endElement
argument_list|()
expr_stmt|;
block|}
if|else if
condition|(
name|systemFlag
operator|==
name|Flags
operator|.
name|Flag
operator|.
name|FLAGGED
condition|)
block|{
name|builder
operator|.
name|startElement
argument_list|(
operator|new
name|QName
argument_list|(
literal|"flag"
argument_list|,
name|MailModule
operator|.
name|NAMESPACE_URI
argument_list|,
name|MailModule
operator|.
name|PREFIX
argument_list|)
argument_list|,
literal|null
argument_list|)
expr_stmt|;
name|builder
operator|.
name|addAttribute
argument_list|(
operator|new
name|QName
argument_list|(
literal|"type"
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|)
argument_list|,
literal|"flagged"
argument_list|)
expr_stmt|;
name|builder
operator|.
name|endElement
argument_list|()
expr_stmt|;
block|}
if|else if
condition|(
name|systemFlag
operator|==
name|Flags
operator|.
name|Flag
operator|.
name|RECENT
condition|)
block|{
name|builder
operator|.
name|startElement
argument_list|(
operator|new
name|QName
argument_list|(
literal|"flag"
argument_list|,
name|MailModule
operator|.
name|NAMESPACE_URI
argument_list|,
name|MailModule
operator|.
name|PREFIX
argument_list|)
argument_list|,
literal|null
argument_list|)
expr_stmt|;
name|builder
operator|.
name|addAttribute
argument_list|(
operator|new
name|QName
argument_list|(
literal|"type"
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|)
argument_list|,
literal|"recent"
argument_list|)
expr_stmt|;
name|builder
operator|.
name|endElement
argument_list|()
expr_stmt|;
block|}
if|else if
condition|(
name|systemFlag
operator|==
name|Flags
operator|.
name|Flag
operator|.
name|SEEN
condition|)
block|{
name|builder
operator|.
name|startElement
argument_list|(
operator|new
name|QName
argument_list|(
literal|"flag"
argument_list|,
name|MailModule
operator|.
name|NAMESPACE_URI
argument_list|,
name|MailModule
operator|.
name|PREFIX
argument_list|)
argument_list|,
literal|null
argument_list|)
expr_stmt|;
name|builder
operator|.
name|addAttribute
argument_list|(
operator|new
name|QName
argument_list|(
literal|"type"
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|)
argument_list|,
literal|"seen"
argument_list|)
expr_stmt|;
name|builder
operator|.
name|endElement
argument_list|()
expr_stmt|;
block|}
block|}
for|for
control|(
name|String
name|userFlag
range|:
name|userFlags
control|)
block|{
name|builder
operator|.
name|startElement
argument_list|(
operator|new
name|QName
argument_list|(
literal|"flag"
argument_list|,
name|MailModule
operator|.
name|NAMESPACE_URI
argument_list|,
name|MailModule
operator|.
name|PREFIX
argument_list|)
argument_list|,
literal|null
argument_list|)
expr_stmt|;
name|builder
operator|.
name|addAttribute
argument_list|(
operator|new
name|QName
argument_list|(
literal|"type"
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|)
argument_list|,
literal|"user"
argument_list|)
expr_stmt|;
name|builder
operator|.
name|addAttribute
argument_list|(
operator|new
name|QName
argument_list|(
literal|"value"
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|)
argument_list|,
name|userFlag
argument_list|)
expr_stmt|;
name|builder
operator|.
name|endElement
argument_list|()
expr_stmt|;
block|}
name|builder
operator|.
name|endElement
argument_list|()
expr_stmt|;
block|}
comment|// Headers
if|if
condition|(
name|includeHeaders
condition|)
block|{
name|Enumeration
name|headers
init|=
name|message
operator|.
name|getAllHeaders
argument_list|()
decl_stmt|;
if|if
condition|(
name|headers
operator|.
name|hasMoreElements
argument_list|()
condition|)
block|{
name|builder
operator|.
name|startElement
argument_list|(
operator|new
name|QName
argument_list|(
literal|"headers"
argument_list|,
name|MailModule
operator|.
name|NAMESPACE_URI
argument_list|,
name|MailModule
operator|.
name|PREFIX
argument_list|)
argument_list|,
literal|null
argument_list|)
expr_stmt|;
while|while
condition|(
name|headers
operator|.
name|hasMoreElements
argument_list|()
condition|)
block|{
name|Header
name|header
init|=
operator|(
name|Header
operator|)
name|headers
operator|.
name|nextElement
argument_list|()
decl_stmt|;
name|builder
operator|.
name|startElement
argument_list|(
operator|new
name|QName
argument_list|(
literal|"header"
argument_list|,
name|MailModule
operator|.
name|NAMESPACE_URI
argument_list|,
name|MailModule
operator|.
name|PREFIX
argument_list|)
argument_list|,
literal|null
argument_list|)
expr_stmt|;
name|builder
operator|.
name|addAttribute
argument_list|(
operator|new
name|QName
argument_list|(
literal|"name"
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|)
argument_list|,
name|header
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
name|builder
operator|.
name|addAttribute
argument_list|(
operator|new
name|QName
argument_list|(
literal|"value"
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|)
argument_list|,
name|header
operator|.
name|getValue
argument_list|()
argument_list|)
expr_stmt|;
name|builder
operator|.
name|endElement
argument_list|()
expr_stmt|;
block|}
name|builder
operator|.
name|endElement
argument_list|()
expr_stmt|;
block|}
block|}
comment|// Subject
name|builder
operator|.
name|startElement
argument_list|(
operator|new
name|QName
argument_list|(
literal|"subject"
argument_list|,
name|MailModule
operator|.
name|NAMESPACE_URI
argument_list|,
name|MailModule
operator|.
name|PREFIX
argument_list|)
argument_list|,
literal|null
argument_list|)
expr_stmt|;
name|builder
operator|.
name|characters
argument_list|(
name|message
operator|.
name|getSubject
argument_list|()
argument_list|)
expr_stmt|;
name|builder
operator|.
name|endElement
argument_list|()
expr_stmt|;
name|builder
operator|.
name|endElement
argument_list|()
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
name|MessagingException
name|me
parameter_list|)
block|{
throw|throw
operator|(
operator|new
name|XPathException
argument_list|(
name|this
argument_list|,
literal|"Failed to retrieve messages from list"
argument_list|,
name|me
argument_list|)
operator|)
throw|;
block|}
name|builder
operator|.
name|endElement
argument_list|()
expr_stmt|;
name|ret
operator|=
operator|(
name|NodeValue
operator|)
name|builder
operator|.
name|getDocument
argument_list|()
operator|.
name|getDocumentElement
argument_list|()
expr_stmt|;
block|}
return|return
operator|(
name|ret
operator|)
return|;
block|}
specifier|private
name|String
name|formatDate
parameter_list|(
name|Date
name|date
parameter_list|)
block|{
name|String
name|formatted
init|=
literal|""
decl_stmt|;
name|SimpleDateFormat
name|sdf
init|=
operator|new
name|SimpleDateFormat
argument_list|(
name|DATE_FORMAT
argument_list|)
decl_stmt|;
name|String
name|temp
init|=
name|sdf
operator|.
name|format
argument_list|(
name|date
argument_list|)
decl_stmt|;
name|formatted
operator|=
name|temp
operator|.
name|substring
argument_list|(
literal|0
argument_list|,
name|temp
operator|.
name|length
argument_list|()
operator|-
literal|2
argument_list|)
operator|+
literal|":"
operator|+
name|temp
operator|.
name|substring
argument_list|(
name|temp
operator|.
name|length
argument_list|()
operator|-
literal|2
argument_list|)
expr_stmt|;
return|return
operator|(
name|formatted
operator|)
return|;
block|}
specifier|private
name|Sequence
name|closeMessageList
parameter_list|(
name|Sequence
index|[]
name|args
parameter_list|,
name|Sequence
name|contextSequence
parameter_list|)
throws|throws
name|XPathException
block|{
comment|// was a msgList handle specified?
if|if
condition|(
name|args
index|[
literal|0
index|]
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
throw|throw
operator|(
operator|new
name|XPathException
argument_list|(
name|this
argument_list|,
literal|"Message List handle not specified"
argument_list|)
operator|)
throw|;
block|}
comment|// get the msgList
name|long
name|msgListHandle
init|=
operator|(
operator|(
name|IntegerValue
operator|)
name|args
index|[
literal|0
index|]
operator|.
name|itemAt
argument_list|(
literal|0
argument_list|)
operator|)
operator|.
name|getLong
argument_list|()
decl_stmt|;
name|MailModule
operator|.
name|removeMessageList
argument_list|(
name|context
argument_list|,
name|msgListHandle
argument_list|)
expr_stmt|;
return|return
operator|(
name|Sequence
operator|.
name|EMPTY_SEQUENCE
operator|)
return|;
block|}
comment|//***************************************************************************
comment|//*
comment|//*    Search Term Methods
comment|//*
comment|//***************************************************************************/
specifier|private
name|SearchTerm
name|parseSearchTerms
parameter_list|(
name|Node
name|terms
parameter_list|)
throws|throws
name|XPathException
block|{
name|SearchTerm
name|st
init|=
literal|null
decl_stmt|;
if|if
condition|(
name|terms
operator|.
name|getNodeType
argument_list|()
operator|==
name|Node
operator|.
name|ELEMENT_NODE
operator|&&
name|terms
operator|.
name|getLocalName
argument_list|()
operator|.
name|equalsIgnoreCase
argument_list|(
literal|"searchTerm"
argument_list|)
condition|)
block|{
name|String
name|type
init|=
operator|(
operator|(
name|Element
operator|)
name|terms
operator|)
operator|.
name|getAttribute
argument_list|(
literal|"type"
argument_list|)
decl_stmt|;
if|if
condition|(
name|type
operator|!=
literal|null
condition|)
block|{
if|if
condition|(
name|type
operator|.
name|equalsIgnoreCase
argument_list|(
literal|"not"
argument_list|)
condition|)
block|{
name|st
operator|=
operator|new
name|NotTerm
argument_list|(
name|parseChildSearchTerm
argument_list|(
name|terms
argument_list|)
argument_list|)
expr_stmt|;
block|}
if|else if
condition|(
name|type
operator|.
name|equalsIgnoreCase
argument_list|(
literal|"and"
argument_list|)
condition|)
block|{
name|st
operator|=
operator|new
name|AndTerm
argument_list|(
name|parseChildSearchTerms
argument_list|(
name|terms
argument_list|)
argument_list|)
expr_stmt|;
block|}
if|else if
condition|(
name|type
operator|.
name|equalsIgnoreCase
argument_list|(
literal|"or"
argument_list|)
condition|)
block|{
name|st
operator|=
operator|new
name|OrTerm
argument_list|(
name|parseChildSearchTerms
argument_list|(
name|terms
argument_list|)
argument_list|)
expr_stmt|;
block|}
if|else if
condition|(
name|type
operator|.
name|equalsIgnoreCase
argument_list|(
literal|"from"
argument_list|)
condition|)
block|{
name|st
operator|=
name|parseFromTerm
argument_list|(
name|terms
argument_list|)
expr_stmt|;
block|}
if|else if
condition|(
name|type
operator|.
name|equalsIgnoreCase
argument_list|(
literal|"subject"
argument_list|)
condition|)
block|{
name|st
operator|=
name|parseSubjectTerm
argument_list|(
name|terms
argument_list|)
expr_stmt|;
block|}
if|else if
condition|(
name|type
operator|.
name|equalsIgnoreCase
argument_list|(
literal|"body"
argument_list|)
condition|)
block|{
name|st
operator|=
name|parseBodyTerm
argument_list|(
name|terms
argument_list|)
expr_stmt|;
block|}
if|else if
condition|(
name|type
operator|.
name|equalsIgnoreCase
argument_list|(
literal|"to"
argument_list|)
operator|||
name|type
operator|.
name|equalsIgnoreCase
argument_list|(
literal|"recipient"
argument_list|)
condition|)
block|{
name|st
operator|=
name|parseRecipientTerm
argument_list|(
name|terms
argument_list|)
expr_stmt|;
block|}
if|else if
condition|(
name|type
operator|.
name|equalsIgnoreCase
argument_list|(
literal|"header"
argument_list|)
condition|)
block|{
name|st
operator|=
name|parseHeaderTerm
argument_list|(
name|terms
argument_list|)
expr_stmt|;
block|}
if|else if
condition|(
name|type
operator|.
name|equalsIgnoreCase
argument_list|(
literal|"flag"
argument_list|)
condition|)
block|{
name|st
operator|=
name|parseFlagTerm
argument_list|(
name|terms
argument_list|)
expr_stmt|;
block|}
if|else if
condition|(
name|type
operator|.
name|equalsIgnoreCase
argument_list|(
literal|"sent"
argument_list|)
condition|)
block|{
name|st
operator|=
name|parseSentDateTerm
argument_list|(
name|terms
argument_list|)
expr_stmt|;
block|}
if|else if
condition|(
name|type
operator|.
name|equalsIgnoreCase
argument_list|(
literal|"received"
argument_list|)
condition|)
block|{
name|st
operator|=
name|parseReceivedDateTerm
argument_list|(
name|terms
argument_list|)
expr_stmt|;
block|}
else|else
block|{
throw|throw
operator|(
operator|new
name|XPathException
argument_list|(
name|this
argument_list|,
literal|"Invalid Search Term type specified: "
operator|+
name|type
argument_list|)
operator|)
throw|;
block|}
block|}
else|else
block|{
throw|throw
operator|(
operator|new
name|XPathException
argument_list|(
name|this
argument_list|,
literal|"Invalid Search Term type specified: null"
argument_list|)
operator|)
throw|;
block|}
block|}
if|if
condition|(
name|st
operator|==
literal|null
condition|)
block|{
throw|throw
operator|(
operator|new
name|XPathException
argument_list|(
name|this
argument_list|,
literal|"Invalid Search Terms specified"
argument_list|)
operator|)
throw|;
block|}
return|return
operator|(
name|st
operator|)
return|;
block|}
specifier|private
name|SearchTerm
name|parseChildSearchTerm
parameter_list|(
name|Node
name|terms
parameter_list|)
throws|throws
name|XPathException
block|{
comment|// Parent only allows a single child search term
name|SearchTerm
name|st
init|=
literal|null
decl_stmt|;
name|NodeList
name|children
init|=
name|terms
operator|.
name|getChildNodes
argument_list|()
decl_stmt|;
if|if
condition|(
name|children
operator|.
name|getLength
argument_list|()
operator|==
literal|1
condition|)
block|{
name|Node
name|child
init|=
name|children
operator|.
name|item
argument_list|(
literal|0
argument_list|)
decl_stmt|;
name|st
operator|=
name|parseSearchTerms
argument_list|(
name|child
argument_list|)
expr_stmt|;
block|}
else|else
block|{
throw|throw
operator|(
operator|new
name|XPathException
argument_list|(
name|this
argument_list|,
literal|"Only one child term is allowed for term with type: "
operator|+
operator|(
operator|(
name|Element
operator|)
name|terms
operator|)
operator|.
name|getAttribute
argument_list|(
literal|"type"
argument_list|)
argument_list|)
operator|)
throw|;
block|}
return|return
operator|(
name|st
operator|)
return|;
block|}
specifier|private
name|SearchTerm
index|[]
name|parseChildSearchTerms
parameter_list|(
name|Node
name|terms
parameter_list|)
throws|throws
name|XPathException
block|{
comment|// Parent allows multiple child search terms
name|ArrayList
argument_list|<
name|SearchTerm
argument_list|>
name|st
init|=
operator|new
name|ArrayList
argument_list|<
name|SearchTerm
argument_list|>
argument_list|()
decl_stmt|;
name|NodeList
name|children
init|=
name|terms
operator|.
name|getChildNodes
argument_list|()
decl_stmt|;
if|if
condition|(
name|children
operator|.
name|getLength
argument_list|()
operator|>
literal|0
condition|)
block|{
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|children
operator|.
name|getLength
argument_list|()
condition|;
name|i
operator|++
control|)
block|{
name|Node
name|child
init|=
name|children
operator|.
name|item
argument_list|(
name|i
argument_list|)
decl_stmt|;
name|st
operator|.
name|add
argument_list|(
name|parseSearchTerms
argument_list|(
name|child
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
else|else
block|{
throw|throw
operator|(
operator|new
name|XPathException
argument_list|(
name|this
argument_list|,
literal|"At least one child term is required for term with type: "
operator|+
operator|(
operator|(
name|Element
operator|)
name|terms
operator|)
operator|.
name|getAttribute
argument_list|(
literal|"type"
argument_list|)
argument_list|)
operator|)
throw|;
block|}
return|return
operator|(
operator|(
name|SearchTerm
index|[]
operator|)
name|st
operator|.
name|toArray
argument_list|(
operator|new
name|SearchTerm
index|[]
block|{}
argument_list|)
operator|)
return|;
block|}
specifier|private
name|SearchTerm
name|parseFromTerm
parameter_list|(
name|Node
name|terms
parameter_list|)
throws|throws
name|XPathException
block|{
name|SearchTerm
name|st
init|=
literal|null
decl_stmt|;
name|String
name|pattern
init|=
operator|(
operator|(
name|Element
operator|)
name|terms
operator|)
operator|.
name|getAttribute
argument_list|(
literal|"pattern"
argument_list|)
decl_stmt|;
if|if
condition|(
name|pattern
operator|!=
literal|null
operator|&&
name|pattern
operator|.
name|length
argument_list|()
operator|>
literal|0
condition|)
block|{
name|st
operator|=
operator|new
name|FromStringTerm
argument_list|(
name|pattern
argument_list|)
expr_stmt|;
block|}
else|else
block|{
throw|throw
operator|(
operator|new
name|XPathException
argument_list|(
name|this
argument_list|,
literal|"Pattern attribute must be specified for term with type: "
operator|+
operator|(
operator|(
name|Element
operator|)
name|terms
operator|)
operator|.
name|getAttribute
argument_list|(
literal|"type"
argument_list|)
argument_list|)
operator|)
throw|;
block|}
return|return
operator|(
name|st
operator|)
return|;
block|}
specifier|private
name|SearchTerm
name|parseSubjectTerm
parameter_list|(
name|Node
name|terms
parameter_list|)
throws|throws
name|XPathException
block|{
name|SearchTerm
name|st
init|=
literal|null
decl_stmt|;
name|String
name|pattern
init|=
operator|(
operator|(
name|Element
operator|)
name|terms
operator|)
operator|.
name|getAttribute
argument_list|(
literal|"pattern"
argument_list|)
decl_stmt|;
if|if
condition|(
name|pattern
operator|!=
literal|null
operator|&&
name|pattern
operator|.
name|length
argument_list|()
operator|>
literal|0
condition|)
block|{
name|st
operator|=
operator|new
name|SubjectTerm
argument_list|(
name|pattern
argument_list|)
expr_stmt|;
block|}
else|else
block|{
throw|throw
operator|(
operator|new
name|XPathException
argument_list|(
name|this
argument_list|,
literal|"Pattern attribute must be specified for term with type: "
operator|+
operator|(
operator|(
name|Element
operator|)
name|terms
operator|)
operator|.
name|getAttribute
argument_list|(
literal|"type"
argument_list|)
argument_list|)
operator|)
throw|;
block|}
return|return
operator|(
name|st
operator|)
return|;
block|}
specifier|private
name|SearchTerm
name|parseBodyTerm
parameter_list|(
name|Node
name|terms
parameter_list|)
throws|throws
name|XPathException
block|{
name|SearchTerm
name|st
init|=
literal|null
decl_stmt|;
name|String
name|pattern
init|=
operator|(
operator|(
name|Element
operator|)
name|terms
operator|)
operator|.
name|getAttribute
argument_list|(
literal|"pattern"
argument_list|)
decl_stmt|;
if|if
condition|(
name|pattern
operator|!=
literal|null
operator|&&
name|pattern
operator|.
name|length
argument_list|()
operator|>
literal|0
condition|)
block|{
name|st
operator|=
operator|new
name|BodyTerm
argument_list|(
name|pattern
argument_list|)
expr_stmt|;
block|}
else|else
block|{
throw|throw
operator|(
operator|new
name|XPathException
argument_list|(
name|this
argument_list|,
literal|"Pattern attribute must be specified for term with type: "
operator|+
operator|(
operator|(
name|Element
operator|)
name|terms
operator|)
operator|.
name|getAttribute
argument_list|(
literal|"type"
argument_list|)
argument_list|)
operator|)
throw|;
block|}
return|return
operator|(
name|st
operator|)
return|;
block|}
specifier|private
name|SearchTerm
name|parseRecipientTerm
parameter_list|(
name|Node
name|terms
parameter_list|)
throws|throws
name|XPathException
block|{
name|SearchTerm
name|st
init|=
literal|null
decl_stmt|;
name|String
name|pattern
init|=
operator|(
operator|(
name|Element
operator|)
name|terms
operator|)
operator|.
name|getAttribute
argument_list|(
literal|"pattern"
argument_list|)
decl_stmt|;
name|String
name|type
init|=
operator|(
operator|(
name|Element
operator|)
name|terms
operator|)
operator|.
name|getAttribute
argument_list|(
literal|"recipientType"
argument_list|)
decl_stmt|;
if|if
condition|(
name|type
operator|==
literal|null
operator|||
name|type
operator|.
name|length
argument_list|()
operator|==
literal|0
condition|)
block|{
throw|throw
operator|(
operator|new
name|XPathException
argument_list|(
name|this
argument_list|,
literal|"recipientType not specified for term with type: "
operator|+
operator|(
operator|(
name|Element
operator|)
name|terms
operator|)
operator|.
name|getAttribute
argument_list|(
literal|"type"
argument_list|)
argument_list|)
operator|)
throw|;
block|}
if|if
condition|(
name|pattern
operator|!=
literal|null
operator|&&
name|pattern
operator|.
name|length
argument_list|()
operator|>
literal|0
condition|)
block|{
name|Message
operator|.
name|RecipientType
name|rtype
init|=
literal|null
decl_stmt|;
if|if
condition|(
name|type
operator|.
name|equalsIgnoreCase
argument_list|(
literal|"to"
argument_list|)
condition|)
block|{
name|rtype
operator|=
name|Message
operator|.
name|RecipientType
operator|.
name|TO
expr_stmt|;
block|}
if|else if
condition|(
name|type
operator|.
name|equalsIgnoreCase
argument_list|(
literal|"cc"
argument_list|)
condition|)
block|{
name|rtype
operator|=
name|Message
operator|.
name|RecipientType
operator|.
name|CC
expr_stmt|;
block|}
if|else if
condition|(
name|type
operator|.
name|equalsIgnoreCase
argument_list|(
literal|"bcc"
argument_list|)
condition|)
block|{
name|rtype
operator|=
name|Message
operator|.
name|RecipientType
operator|.
name|BCC
expr_stmt|;
block|}
else|else
block|{
throw|throw
operator|(
operator|new
name|XPathException
argument_list|(
name|this
argument_list|,
literal|"Invalid recipientType: "
operator|+
name|type
operator|+
literal|", for term with type: "
operator|+
operator|(
operator|(
name|Element
operator|)
name|terms
operator|)
operator|.
name|getAttribute
argument_list|(
literal|"type"
argument_list|)
argument_list|)
operator|)
throw|;
block|}
name|st
operator|=
operator|new
name|RecipientStringTerm
argument_list|(
name|rtype
argument_list|,
name|pattern
argument_list|)
expr_stmt|;
block|}
else|else
block|{
throw|throw
operator|(
operator|new
name|XPathException
argument_list|(
name|this
argument_list|,
literal|"Pattern attribute must be specified for term with type: "
operator|+
operator|(
operator|(
name|Element
operator|)
name|terms
operator|)
operator|.
name|getAttribute
argument_list|(
literal|"type"
argument_list|)
argument_list|)
operator|)
throw|;
block|}
return|return
operator|(
name|st
operator|)
return|;
block|}
specifier|private
name|SearchTerm
name|parseHeaderTerm
parameter_list|(
name|Node
name|terms
parameter_list|)
throws|throws
name|XPathException
block|{
name|SearchTerm
name|st
init|=
literal|null
decl_stmt|;
name|String
name|pattern
init|=
operator|(
operator|(
name|Element
operator|)
name|terms
operator|)
operator|.
name|getAttribute
argument_list|(
literal|"pattern"
argument_list|)
decl_stmt|;
name|String
name|name
init|=
operator|(
operator|(
name|Element
operator|)
name|terms
operator|)
operator|.
name|getAttribute
argument_list|(
literal|"name"
argument_list|)
decl_stmt|;
if|if
condition|(
name|name
operator|==
literal|null
operator|||
name|name
operator|.
name|length
argument_list|()
operator|==
literal|0
condition|)
block|{
throw|throw
operator|(
operator|new
name|XPathException
argument_list|(
name|this
argument_list|,
literal|"name not specified for term with type: "
operator|+
operator|(
operator|(
name|Element
operator|)
name|terms
operator|)
operator|.
name|getAttribute
argument_list|(
literal|"type"
argument_list|)
argument_list|)
operator|)
throw|;
block|}
if|if
condition|(
name|pattern
operator|!=
literal|null
operator|&&
name|pattern
operator|.
name|length
argument_list|()
operator|>
literal|0
condition|)
block|{
name|st
operator|=
operator|new
name|HeaderTerm
argument_list|(
name|name
argument_list|,
name|pattern
argument_list|)
expr_stmt|;
block|}
else|else
block|{
throw|throw
operator|(
operator|new
name|XPathException
argument_list|(
name|this
argument_list|,
literal|"pattern attribute must be specified for term with type: "
operator|+
operator|(
operator|(
name|Element
operator|)
name|terms
operator|)
operator|.
name|getAttribute
argument_list|(
literal|"type"
argument_list|)
argument_list|)
operator|)
throw|;
block|}
return|return
operator|(
name|st
operator|)
return|;
block|}
specifier|private
name|SearchTerm
name|parseFlagTerm
parameter_list|(
name|Node
name|terms
parameter_list|)
throws|throws
name|XPathException
block|{
name|SearchTerm
name|st
init|=
literal|null
decl_stmt|;
name|String
name|flag
init|=
operator|(
operator|(
name|Element
operator|)
name|terms
operator|)
operator|.
name|getAttribute
argument_list|(
literal|"flag"
argument_list|)
decl_stmt|;
name|String
name|value
init|=
operator|(
operator|(
name|Element
operator|)
name|terms
operator|)
operator|.
name|getAttribute
argument_list|(
literal|"value"
argument_list|)
decl_stmt|;
if|if
condition|(
name|value
operator|==
literal|null
operator|||
name|value
operator|.
name|length
argument_list|()
operator|==
literal|0
condition|)
block|{
throw|throw
operator|(
operator|new
name|XPathException
argument_list|(
name|this
argument_list|,
literal|"value not specified for term with type: "
operator|+
operator|(
operator|(
name|Element
operator|)
name|terms
operator|)
operator|.
name|getAttribute
argument_list|(
literal|"type"
argument_list|)
argument_list|)
operator|)
throw|;
block|}
if|if
condition|(
name|flag
operator|!=
literal|null
operator|&&
name|flag
operator|.
name|length
argument_list|()
operator|>
literal|0
condition|)
block|{
name|Flags
name|flags
init|=
literal|null
decl_stmt|;
if|if
condition|(
name|flag
operator|.
name|equalsIgnoreCase
argument_list|(
literal|"answered"
argument_list|)
condition|)
block|{
name|flags
operator|=
operator|new
name|Flags
argument_list|(
name|Flags
operator|.
name|Flag
operator|.
name|ANSWERED
argument_list|)
expr_stmt|;
block|}
if|else if
condition|(
name|flag
operator|.
name|equalsIgnoreCase
argument_list|(
literal|"deleted"
argument_list|)
condition|)
block|{
name|flags
operator|=
operator|new
name|Flags
argument_list|(
name|Flags
operator|.
name|Flag
operator|.
name|DELETED
argument_list|)
expr_stmt|;
block|}
if|else if
condition|(
name|flag
operator|.
name|equalsIgnoreCase
argument_list|(
literal|"draft"
argument_list|)
condition|)
block|{
name|flags
operator|=
operator|new
name|Flags
argument_list|(
name|Flags
operator|.
name|Flag
operator|.
name|DRAFT
argument_list|)
expr_stmt|;
block|}
if|else if
condition|(
name|flag
operator|.
name|equalsIgnoreCase
argument_list|(
literal|"recent"
argument_list|)
condition|)
block|{
name|flags
operator|=
operator|new
name|Flags
argument_list|(
name|Flags
operator|.
name|Flag
operator|.
name|RECENT
argument_list|)
expr_stmt|;
block|}
if|else if
condition|(
name|flag
operator|.
name|equalsIgnoreCase
argument_list|(
literal|"seen"
argument_list|)
condition|)
block|{
name|flags
operator|=
operator|new
name|Flags
argument_list|(
name|Flags
operator|.
name|Flag
operator|.
name|SEEN
argument_list|)
expr_stmt|;
block|}
else|else
block|{
throw|throw
operator|(
operator|new
name|XPathException
argument_list|(
name|this
argument_list|,
literal|"Invalid flag: "
operator|+
name|flag
operator|+
literal|", for term with type: "
operator|+
operator|(
operator|(
name|Element
operator|)
name|terms
operator|)
operator|.
name|getAttribute
argument_list|(
literal|"type"
argument_list|)
argument_list|)
operator|)
throw|;
block|}
name|st
operator|=
operator|new
name|FlagTerm
argument_list|(
name|flags
argument_list|,
name|value
operator|.
name|equalsIgnoreCase
argument_list|(
literal|"true"
argument_list|)
argument_list|)
expr_stmt|;
block|}
else|else
block|{
throw|throw
operator|(
operator|new
name|XPathException
argument_list|(
name|this
argument_list|,
literal|"flag attribute must be specified for term with type: "
operator|+
operator|(
operator|(
name|Element
operator|)
name|terms
operator|)
operator|.
name|getAttribute
argument_list|(
literal|"type"
argument_list|)
argument_list|)
operator|)
throw|;
block|}
return|return
operator|(
name|st
operator|)
return|;
block|}
specifier|private
name|SearchTerm
name|parseSentDateTerm
parameter_list|(
name|Node
name|terms
parameter_list|)
throws|throws
name|XPathException
block|{
name|SearchTerm
name|st
init|=
literal|null
decl_stmt|;
name|String
name|value
init|=
operator|(
operator|(
name|Element
operator|)
name|terms
operator|)
operator|.
name|getAttribute
argument_list|(
literal|"date"
argument_list|)
decl_stmt|;
name|String
name|format
init|=
operator|(
operator|(
name|Element
operator|)
name|terms
operator|)
operator|.
name|getAttribute
argument_list|(
literal|"format"
argument_list|)
decl_stmt|;
if|if
condition|(
name|value
operator|==
literal|null
operator|||
name|value
operator|.
name|length
argument_list|()
operator|==
literal|0
condition|)
block|{
throw|throw
operator|(
operator|new
name|XPathException
argument_list|(
name|this
argument_list|,
literal|"value not specified for term with type: "
operator|+
operator|(
operator|(
name|Element
operator|)
name|terms
operator|)
operator|.
name|getAttribute
argument_list|(
literal|"type"
argument_list|)
argument_list|)
operator|)
throw|;
block|}
if|if
condition|(
name|format
operator|==
literal|null
operator|||
name|format
operator|.
name|length
argument_list|()
operator|==
literal|0
condition|)
block|{
throw|throw
operator|(
operator|new
name|XPathException
argument_list|(
name|this
argument_list|,
literal|"format not specified for term with type: "
operator|+
operator|(
operator|(
name|Element
operator|)
name|terms
operator|)
operator|.
name|getAttribute
argument_list|(
literal|"type"
argument_list|)
argument_list|)
operator|)
throw|;
block|}
name|int
name|cp
init|=
name|parseComparisonAttribute
argument_list|(
name|terms
argument_list|)
decl_stmt|;
try|try
block|{
name|SimpleDateFormat
name|sdf
init|=
operator|new
name|SimpleDateFormat
argument_list|(
name|format
argument_list|)
decl_stmt|;
name|Date
name|date
init|=
name|sdf
operator|.
name|parse
argument_list|(
name|value
argument_list|)
decl_stmt|;
name|st
operator|=
operator|new
name|SentDateTerm
argument_list|(
name|cp
argument_list|,
name|date
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|ParseException
name|pe
parameter_list|)
block|{
throw|throw
operator|(
operator|new
name|XPathException
argument_list|(
name|this
argument_list|,
literal|"Cannot parse date value: "
operator|+
name|value
operator|+
literal|", using format: "
operator|+
name|format
operator|+
literal|", for term with type: "
operator|+
operator|(
operator|(
name|Element
operator|)
name|terms
operator|)
operator|.
name|getAttribute
argument_list|(
literal|"type"
argument_list|)
argument_list|)
operator|)
throw|;
block|}
return|return
operator|(
name|st
operator|)
return|;
block|}
specifier|private
name|SearchTerm
name|parseReceivedDateTerm
parameter_list|(
name|Node
name|terms
parameter_list|)
throws|throws
name|XPathException
block|{
name|SearchTerm
name|st
init|=
literal|null
decl_stmt|;
name|String
name|value
init|=
operator|(
operator|(
name|Element
operator|)
name|terms
operator|)
operator|.
name|getAttribute
argument_list|(
literal|"date"
argument_list|)
decl_stmt|;
name|String
name|format
init|=
operator|(
operator|(
name|Element
operator|)
name|terms
operator|)
operator|.
name|getAttribute
argument_list|(
literal|"format"
argument_list|)
decl_stmt|;
if|if
condition|(
name|value
operator|==
literal|null
operator|||
name|value
operator|.
name|length
argument_list|()
operator|==
literal|0
condition|)
block|{
throw|throw
operator|(
operator|new
name|XPathException
argument_list|(
name|this
argument_list|,
literal|"value not specified for term with type: "
operator|+
operator|(
operator|(
name|Element
operator|)
name|terms
operator|)
operator|.
name|getAttribute
argument_list|(
literal|"type"
argument_list|)
argument_list|)
operator|)
throw|;
block|}
if|if
condition|(
name|format
operator|==
literal|null
operator|||
name|format
operator|.
name|length
argument_list|()
operator|==
literal|0
condition|)
block|{
throw|throw
operator|(
operator|new
name|XPathException
argument_list|(
name|this
argument_list|,
literal|"format not specified for term with type: "
operator|+
operator|(
operator|(
name|Element
operator|)
name|terms
operator|)
operator|.
name|getAttribute
argument_list|(
literal|"type"
argument_list|)
argument_list|)
operator|)
throw|;
block|}
name|int
name|cp
init|=
name|parseComparisonAttribute
argument_list|(
name|terms
argument_list|)
decl_stmt|;
try|try
block|{
name|SimpleDateFormat
name|sdf
init|=
operator|new
name|SimpleDateFormat
argument_list|(
name|format
argument_list|)
decl_stmt|;
name|Date
name|date
init|=
name|sdf
operator|.
name|parse
argument_list|(
name|value
argument_list|)
decl_stmt|;
name|st
operator|=
operator|new
name|ReceivedDateTerm
argument_list|(
name|cp
argument_list|,
name|date
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|ParseException
name|pe
parameter_list|)
block|{
throw|throw
operator|(
operator|new
name|XPathException
argument_list|(
name|this
argument_list|,
literal|"Cannot parse date value: "
operator|+
name|value
operator|+
literal|", using format: "
operator|+
name|format
operator|+
literal|", for term with type: "
operator|+
operator|(
operator|(
name|Element
operator|)
name|terms
operator|)
operator|.
name|getAttribute
argument_list|(
literal|"type"
argument_list|)
argument_list|)
operator|)
throw|;
block|}
return|return
operator|(
name|st
operator|)
return|;
block|}
specifier|private
name|int
name|parseComparisonAttribute
parameter_list|(
name|Node
name|terms
parameter_list|)
throws|throws
name|XPathException
block|{
name|int
name|cp
init|=
name|ComparisonTerm
operator|.
name|EQ
decl_stmt|;
name|String
name|comp
init|=
operator|(
operator|(
name|Element
operator|)
name|terms
operator|)
operator|.
name|getAttribute
argument_list|(
literal|"comparison"
argument_list|)
decl_stmt|;
if|if
condition|(
name|comp
operator|!=
literal|null
operator|&&
name|comp
operator|.
name|length
argument_list|()
operator|>
literal|0
condition|)
block|{
if|if
condition|(
name|comp
operator|.
name|equalsIgnoreCase
argument_list|(
literal|"eq"
argument_list|)
condition|)
block|{
name|cp
operator|=
name|ComparisonTerm
operator|.
name|EQ
expr_stmt|;
block|}
if|else if
condition|(
name|comp
operator|.
name|equalsIgnoreCase
argument_list|(
literal|"ge"
argument_list|)
condition|)
block|{
name|cp
operator|=
name|ComparisonTerm
operator|.
name|GE
expr_stmt|;
block|}
if|else if
condition|(
name|comp
operator|.
name|equalsIgnoreCase
argument_list|(
literal|"gt"
argument_list|)
condition|)
block|{
name|cp
operator|=
name|ComparisonTerm
operator|.
name|GT
expr_stmt|;
block|}
if|else if
condition|(
name|comp
operator|.
name|equalsIgnoreCase
argument_list|(
literal|"le"
argument_list|)
condition|)
block|{
name|cp
operator|=
name|ComparisonTerm
operator|.
name|LE
expr_stmt|;
block|}
if|else if
condition|(
name|comp
operator|.
name|equalsIgnoreCase
argument_list|(
literal|"lt"
argument_list|)
condition|)
block|{
name|cp
operator|=
name|ComparisonTerm
operator|.
name|LT
expr_stmt|;
block|}
if|else if
condition|(
name|comp
operator|.
name|equalsIgnoreCase
argument_list|(
literal|"ne"
argument_list|)
condition|)
block|{
name|cp
operator|=
name|ComparisonTerm
operator|.
name|NE
expr_stmt|;
block|}
else|else
block|{
throw|throw
operator|(
operator|new
name|XPathException
argument_list|(
name|this
argument_list|,
literal|"Invalid comparison: "
operator|+
name|comp
operator|+
literal|", for term with type: "
operator|+
operator|(
operator|(
name|Element
operator|)
name|terms
operator|)
operator|.
name|getAttribute
argument_list|(
literal|"type"
argument_list|)
argument_list|)
operator|)
throw|;
block|}
block|}
else|else
block|{
throw|throw
operator|(
operator|new
name|XPathException
argument_list|(
name|this
argument_list|,
literal|"comparison attribute must be specified for term with type: "
operator|+
operator|(
operator|(
name|Element
operator|)
name|terms
operator|)
operator|.
name|getAttribute
argument_list|(
literal|"type"
argument_list|)
argument_list|)
operator|)
throw|;
block|}
return|return
operator|(
name|cp
operator|)
return|;
block|}
block|}
end_class

end_unit

