begin_unit|revision:1.0.0;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  *  eXist Mail Module Extension SendEmailFunction  *  Copyright (C) 2006-09 Adam Retter<adam@exist-db.org>  *  www.exist-db.org  *    *  This program is free software; you can redistribute it and/or  *  modify it under the terms of the GNU Lesser General Public License  *  as published by the Free Software Foundation; either version 2  *  of the License, or (at your option) any later version.  *  *  This program is distributed in the hope that it will be useful,  *  but WITHOUT ANY WARRANTY; without even the implied warranty of  *  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the  *  GNU Lesser General Public License for more details.  *  *  You should have received a copy of the GNU Lesser General Public License  *  along with this program; if not, write to the Free Software Foundation  *  Inc., 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301, USA.  *    *  $Id$  */
end_comment

begin_package
package|package
name|org
operator|.
name|exist
operator|.
name|xquery
operator|.
name|modules
operator|.
name|mail
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|*
import|;
end_import

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|InetAddress
import|;
end_import

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|Socket
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|*
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|activation
operator|.
name|DataHandler
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|mail
operator|.
name|*
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|mail
operator|.
name|internet
operator|.
name|*
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|mail
operator|.
name|util
operator|.
name|ByteArrayDataSource
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|xml
operator|.
name|transform
operator|.
name|Transformer
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|xml
operator|.
name|transform
operator|.
name|TransformerException
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|xml
operator|.
name|transform
operator|.
name|TransformerFactory
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|xml
operator|.
name|transform
operator|.
name|dom
operator|.
name|DOMSource
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|xml
operator|.
name|transform
operator|.
name|stream
operator|.
name|StreamResult
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|lang3
operator|.
name|StringUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|logging
operator|.
name|log4j
operator|.
name|LogManager
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|logging
operator|.
name|log4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|dom
operator|.
name|QName
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|util
operator|.
name|Base64Encoder
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|util
operator|.
name|MimeTable
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|xquery
operator|.
name|*
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|xquery
operator|.
name|functions
operator|.
name|system
operator|.
name|GetVersion
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|xquery
operator|.
name|value
operator|.
name|*
import|;
end_import

begin_import
import|import
name|org
operator|.
name|w3c
operator|.
name|dom
operator|.
name|Element
import|;
end_import

begin_import
import|import
name|org
operator|.
name|w3c
operator|.
name|dom
operator|.
name|Node
import|;
end_import

begin_comment
comment|//send-email specific imports
end_comment

begin_comment
comment|/**  * eXist Mail Module Extension SendEmailFunction  *   * The email sending functionality of the eXist Mail Module Extension that  * allows email to be sent from XQuery using either SMTP or Sendmail.    *   * @author Adam Retter<adam@exist-db.org>  * @author Robert Walpole<robert.walpole@devon.gov.uk>  * @author Andrzej Taramina<andrzej@chaeron.com>  * @author JosÃ© MarÃ­a FernÃ¡ndez<josemariafg@gmail.com>  * @serial 2011-08-02  * @version 1.6  *  * @see org.exist.xquery.BasicFunction#BasicFunction(org.exist.xquery.XQueryContext, org.exist.xquery.FunctionSignature)  */
end_comment

begin_comment
comment|/* TODO according to RFC 821, SMTP commands must end with<CR><LF>, Java uses platform native end-of-line characters for .println(...) functions and so this function may have issues on non-Windows platforms */
end_comment

begin_class
specifier|public
class|class
name|SendEmailFunction
extends|extends
name|BasicFunction
block|{
specifier|protected
specifier|static
specifier|final
name|Logger
name|logger
init|=
name|LogManager
operator|.
name|getLogger
argument_list|(
name|SendEmailFunction
operator|.
name|class
argument_list|)
decl_stmt|;
specifier|private
specifier|final
name|int
name|MIME_BASE64_MAX_LINE_LENGTH
init|=
literal|76
decl_stmt|;
comment|//RFC 2045, page 24
specifier|private
name|String
name|charset
decl_stmt|;
specifier|public
specifier|final
specifier|static
name|FunctionSignature
name|deprecated
init|=
operator|new
name|FunctionSignature
argument_list|(
operator|new
name|QName
argument_list|(
literal|"send-email"
argument_list|,
name|MailModule
operator|.
name|NAMESPACE_URI
argument_list|,
name|MailModule
operator|.
name|PREFIX
argument_list|)
argument_list|,
literal|"Sends an email through the SMTP Server."
argument_list|,
operator|new
name|SequenceType
index|[]
block|{
operator|new
name|FunctionParameterSequenceType
argument_list|(
literal|"email"
argument_list|,
name|Type
operator|.
name|ELEMENT
argument_list|,
name|Cardinality
operator|.
name|ONE_OR_MORE
argument_list|,
literal|"The email message in the following format:<mail><from/><reply-to/><to/><cc/><bcc/><subject/><message><text/><xhtml/></message><attachment filename=\"\" mimetype=\"\">xs:base64Binary</attachment></mail>."
argument_list|)
block|,
operator|new
name|FunctionParameterSequenceType
argument_list|(
literal|"server"
argument_list|,
name|Type
operator|.
name|STRING
argument_list|,
name|Cardinality
operator|.
name|ZERO_OR_ONE
argument_list|,
literal|"The SMTP server.  If empty, then it tries to use the local sendmail program."
argument_list|)
block|,
operator|new
name|FunctionParameterSequenceType
argument_list|(
literal|"charset"
argument_list|,
name|Type
operator|.
name|STRING
argument_list|,
name|Cardinality
operator|.
name|ZERO_OR_ONE
argument_list|,
literal|"The charset value used in the \"Content-Type\" message header (Defaults to UTF-8)"
argument_list|)
block|}
argument_list|,
operator|new
name|FunctionReturnSequenceType
argument_list|(
name|Type
operator|.
name|BOOLEAN
argument_list|,
name|Cardinality
operator|.
name|ONE_OR_MORE
argument_list|,
literal|"true if the email message was successfully sent"
argument_list|)
argument_list|)
decl_stmt|;
specifier|public
specifier|final
specifier|static
name|FunctionSignature
name|signatures
index|[]
init|=
block|{
operator|new
name|FunctionSignature
argument_list|(
operator|new
name|QName
argument_list|(
literal|"send-email"
argument_list|,
name|MailModule
operator|.
name|NAMESPACE_URI
argument_list|,
name|MailModule
operator|.
name|PREFIX
argument_list|)
argument_list|,
literal|"Sends an email using javax.mail messaging libraries."
argument_list|,
operator|new
name|SequenceType
index|[]
block|{
operator|new
name|FunctionParameterSequenceType
argument_list|(
literal|"mail-handle"
argument_list|,
name|Type
operator|.
name|LONG
argument_list|,
name|Cardinality
operator|.
name|EXACTLY_ONE
argument_list|,
literal|"The JavaMail session handle retrieved from mail:get-mail-session()"
argument_list|)
block|,
operator|new
name|FunctionParameterSequenceType
argument_list|(
literal|"email"
argument_list|,
name|Type
operator|.
name|ELEMENT
argument_list|,
name|Cardinality
operator|.
name|ONE_OR_MORE
argument_list|,
literal|"The email message in the following format:<mail><from/><reply-to/><to/><cc/><bcc/><subject/><message><text/><xhtml/></message><attachment filename=\"\" mimetype=\"\">xs:base64Binary</attachment></mail>."
argument_list|)
block|}
argument_list|,
operator|new
name|SequenceType
argument_list|(
name|Type
operator|.
name|ITEM
argument_list|,
name|Cardinality
operator|.
name|EMPTY
argument_list|)
argument_list|)
block|}
decl_stmt|;
comment|/**      * SendEmail Constructor      *      * @param context	The Context of the calling XQuery      */
specifier|public
name|SendEmailFunction
parameter_list|(
name|XQueryContext
name|context
parameter_list|,
name|FunctionSignature
name|signature
parameter_list|)
block|{
name|super
argument_list|(
name|context
argument_list|,
name|signature
argument_list|)
expr_stmt|;
block|}
comment|/**      * evaluate the call to the xquery send-email function,      * it is really the main entry point of this class      *      * @param args		arguments from the send-email() function call      * @param contextSequence	the Context Sequence to operate on (not used here internally!)      * @return		A sequence representing the result of the send-email() function call      *      * @see org.exist.xquery.BasicFunction#eval(org.exist.xquery.value.Sequence[], org.exist.xquery.value.Sequence)      */
specifier|public
name|Sequence
name|eval
parameter_list|(
name|Sequence
index|[]
name|args
parameter_list|,
name|Sequence
name|contextSequence
parameter_list|)
throws|throws
name|XPathException
block|{
if|if
condition|(
name|args
operator|.
name|length
operator|==
literal|3
condition|)
block|{
return|return
name|deprecatedSendEmail
argument_list|(
name|args
argument_list|,
name|contextSequence
argument_list|)
return|;
block|}
else|else
block|{
return|return
name|sendEmail
argument_list|(
name|args
argument_list|,
name|contextSequence
argument_list|)
return|;
block|}
block|}
specifier|public
name|Sequence
name|sendEmail
parameter_list|(
name|Sequence
index|[]
name|args
parameter_list|,
name|Sequence
name|contextSequence
parameter_list|)
throws|throws
name|XPathException
block|{
comment|// was a session handle specified?
if|if
condition|(
name|args
index|[
literal|0
index|]
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
throw|throw
operator|(
operator|new
name|XPathException
argument_list|(
name|this
argument_list|,
literal|"Session handle not specified"
argument_list|)
operator|)
throw|;
block|}
comment|// get the Session
name|long
name|sessionHandle
init|=
operator|(
operator|(
name|IntegerValue
operator|)
name|args
index|[
literal|0
index|]
operator|.
name|itemAt
argument_list|(
literal|0
argument_list|)
operator|)
operator|.
name|getLong
argument_list|()
decl_stmt|;
name|Session
name|session
init|=
name|MailModule
operator|.
name|retrieveSession
argument_list|(
name|context
argument_list|,
name|sessionHandle
argument_list|)
decl_stmt|;
if|if
condition|(
name|session
operator|==
literal|null
condition|)
block|{
throw|throw
operator|(
operator|new
name|XPathException
argument_list|(
name|this
argument_list|,
literal|"Invalid Session handle specified"
argument_list|)
operator|)
throw|;
block|}
try|try
block|{
name|List
argument_list|<
name|Message
argument_list|>
name|messages
init|=
name|parseInputEmails
argument_list|(
name|session
argument_list|,
name|args
index|[
literal|1
index|]
argument_list|)
decl_stmt|;
name|String
name|proto
init|=
name|session
operator|.
name|getProperty
argument_list|(
literal|"mail.transport.protocol"
argument_list|)
decl_stmt|;
if|if
condition|(
name|proto
operator|==
literal|null
condition|)
name|proto
operator|=
literal|"smtp"
expr_stmt|;
name|Transport
name|t
init|=
name|session
operator|.
name|getTransport
argument_list|(
name|proto
argument_list|)
decl_stmt|;
try|try
block|{
if|if
condition|(
name|session
operator|.
name|getProperty
argument_list|(
literal|"mail."
operator|+
name|proto
operator|+
literal|".auth"
argument_list|)
operator|!=
literal|null
condition|)
name|t
operator|.
name|connect
argument_list|(
name|session
operator|.
name|getProperty
argument_list|(
literal|"mail."
operator|+
name|proto
operator|+
literal|".user"
argument_list|)
argument_list|,
name|session
operator|.
name|getProperty
argument_list|(
literal|"mail."
operator|+
name|proto
operator|+
literal|".password"
argument_list|)
argument_list|)
expr_stmt|;
for|for
control|(
name|Message
name|msg
range|:
name|messages
control|)
block|{
name|t
operator|.
name|sendMessage
argument_list|(
name|msg
argument_list|,
name|msg
operator|.
name|getAllRecipients
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
finally|finally
block|{
name|t
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
return|return
operator|(
name|Sequence
operator|.
name|EMPTY_SEQUENCE
operator|)
return|;
block|}
catch|catch
parameter_list|(
name|TransformerException
name|te
parameter_list|)
block|{
throw|throw
operator|new
name|XPathException
argument_list|(
name|this
argument_list|,
literal|"Could not Transform XHTML Message Body: "
operator|+
name|te
operator|.
name|getMessage
argument_list|()
argument_list|,
name|te
argument_list|)
throw|;
block|}
catch|catch
parameter_list|(
name|MessagingException
name|smtpe
parameter_list|)
block|{
throw|throw
operator|new
name|XPathException
argument_list|(
name|this
argument_list|,
literal|"Could not send message(s): "
operator|+
name|smtpe
operator|.
name|getMessage
argument_list|()
argument_list|,
name|smtpe
argument_list|)
throw|;
block|}
catch|catch
parameter_list|(
name|IOException
name|ioe
parameter_list|)
block|{
throw|throw
operator|new
name|XPathException
argument_list|(
name|this
argument_list|,
literal|"Attachment in some message could not be prepared: "
operator|+
name|ioe
operator|.
name|getMessage
argument_list|()
argument_list|,
name|ioe
argument_list|)
throw|;
block|}
catch|catch
parameter_list|(
name|Throwable
name|t
parameter_list|)
block|{
throw|throw
operator|new
name|XPathException
argument_list|(
name|this
argument_list|,
literal|"Unexpected error from JavaMail layer (Is your message well structured?): "
operator|+
name|t
operator|.
name|getMessage
argument_list|()
argument_list|,
name|t
argument_list|)
throw|;
block|}
block|}
specifier|public
name|Sequence
name|deprecatedSendEmail
parameter_list|(
name|Sequence
index|[]
name|args
parameter_list|,
name|Sequence
name|contextSequence
parameter_list|)
throws|throws
name|XPathException
block|{
try|try
block|{
comment|//get the charset parameter, default to UTF-8
if|if
condition|(
operator|!
name|args
index|[
literal|2
index|]
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|charset
operator|=
name|args
index|[
literal|2
index|]
operator|.
name|getStringValue
argument_list|()
expr_stmt|;
block|}
else|else
block|{
name|charset
operator|=
literal|"UTF-8"
expr_stmt|;
block|}
comment|//Parse the XML<mail> into a mail Object
name|List
argument_list|<
name|Element
argument_list|>
name|mailElements
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
if|if
condition|(
name|args
index|[
literal|0
index|]
operator|.
name|getItemCount
argument_list|()
operator|>
literal|1
operator|&&
name|args
index|[
literal|0
index|]
operator|instanceof
name|ValueSequence
condition|)
block|{
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|args
index|[
literal|0
index|]
operator|.
name|getItemCount
argument_list|()
condition|;
name|i
operator|++
control|)
block|{
name|mailElements
operator|.
name|add
argument_list|(
operator|(
name|Element
operator|)
name|args
index|[
literal|0
index|]
operator|.
name|itemAt
argument_list|(
name|i
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
else|else
block|{
name|mailElements
operator|.
name|add
argument_list|(
operator|(
name|Element
operator|)
name|args
index|[
literal|0
index|]
operator|.
name|itemAt
argument_list|(
literal|0
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|List
argument_list|<
name|Mail
argument_list|>
name|mails
init|=
name|parseMailElement
argument_list|(
name|mailElements
argument_list|)
decl_stmt|;
name|ValueSequence
name|results
init|=
operator|new
name|ValueSequence
argument_list|()
decl_stmt|;
comment|//Send email with Sendmail or SMTP?
if|if
condition|(
operator|!
name|args
index|[
literal|1
index|]
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
comment|//SMTP
name|List
argument_list|<
name|Boolean
argument_list|>
name|mailResults
init|=
name|sendBySMTP
argument_list|(
name|mails
argument_list|,
name|args
index|[
literal|1
index|]
operator|.
name|getStringValue
argument_list|()
argument_list|)
decl_stmt|;
for|for
control|(
name|Boolean
name|mailResult
range|:
name|mailResults
control|)
block|{
name|results
operator|.
name|add
argument_list|(
name|BooleanValue
operator|.
name|valueOf
argument_list|(
name|mailResult
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
else|else
block|{
for|for
control|(
name|Mail
name|mail
range|:
name|mails
control|)
block|{
name|boolean
name|result
init|=
name|sendBySendmail
argument_list|(
name|mail
argument_list|)
decl_stmt|;
name|results
operator|.
name|add
argument_list|(
name|BooleanValue
operator|.
name|valueOf
argument_list|(
name|result
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
return|return
name|results
return|;
block|}
catch|catch
parameter_list|(
name|TransformerException
name|te
parameter_list|)
block|{
throw|throw
operator|new
name|XPathException
argument_list|(
name|this
argument_list|,
literal|"Could not Transform XHTML Message Body: "
operator|+
name|te
operator|.
name|getMessage
argument_list|()
argument_list|,
name|te
argument_list|)
throw|;
block|}
catch|catch
parameter_list|(
name|SMTPException
name|smtpe
parameter_list|)
block|{
throw|throw
operator|new
name|XPathException
argument_list|(
name|this
argument_list|,
literal|"Could not send message(s)"
operator|+
name|smtpe
operator|.
name|getMessage
argument_list|()
argument_list|,
name|smtpe
argument_list|)
throw|;
block|}
block|}
specifier|private
name|List
argument_list|<
name|Message
argument_list|>
name|parseInputEmails
parameter_list|(
name|Session
name|session
parameter_list|,
name|Sequence
name|arg
parameter_list|)
throws|throws
name|IOException
throws|,
name|MessagingException
throws|,
name|TransformerException
block|{
comment|//Parse the XML<mail> into a mail Object
name|List
argument_list|<
name|Element
argument_list|>
name|mailElements
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
if|if
condition|(
name|arg
operator|.
name|getItemCount
argument_list|()
operator|>
literal|1
operator|&&
name|arg
operator|instanceof
name|ValueSequence
condition|)
block|{
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|arg
operator|.
name|getItemCount
argument_list|()
condition|;
name|i
operator|++
control|)
block|{
name|mailElements
operator|.
name|add
argument_list|(
operator|(
name|Element
operator|)
name|arg
operator|.
name|itemAt
argument_list|(
name|i
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
else|else
block|{
name|mailElements
operator|.
name|add
argument_list|(
operator|(
name|Element
operator|)
name|arg
operator|.
name|itemAt
argument_list|(
literal|0
argument_list|)
argument_list|)
expr_stmt|;
block|}
return|return
name|parseMessageElement
argument_list|(
name|session
argument_list|,
name|mailElements
argument_list|)
return|;
block|}
comment|/**      * Sends an email using the Operating Systems sendmail application      *      * @param mail representation of the email to send      * @return		boolean value of true of false indicating success or failure to send email      */
specifier|private
name|boolean
name|sendBySendmail
parameter_list|(
name|Mail
name|mail
parameter_list|)
block|{
name|PrintWriter
name|out
init|=
literal|null
decl_stmt|;
try|try
block|{
comment|//Create a list of all Recipients, should include to, cc and bcc recipient
name|List
argument_list|<
name|String
argument_list|>
name|allrecipients
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
name|allrecipients
operator|.
name|addAll
argument_list|(
name|mail
operator|.
name|getTo
argument_list|()
argument_list|)
expr_stmt|;
name|allrecipients
operator|.
name|addAll
argument_list|(
name|mail
operator|.
name|getCC
argument_list|()
argument_list|)
expr_stmt|;
name|allrecipients
operator|.
name|addAll
argument_list|(
name|mail
operator|.
name|getBCC
argument_list|()
argument_list|)
expr_stmt|;
comment|//Get a string of all recipients email addresses
specifier|final
name|StringBuilder
name|recipients
init|=
operator|new
name|StringBuilder
argument_list|()
decl_stmt|;
for|for
control|(
name|String
name|recipient
range|:
name|allrecipients
control|)
block|{
name|recipients
operator|.
name|append
argument_list|(
literal|" "
argument_list|)
expr_stmt|;
comment|//Check format of to address does it include a name as well as the email address?
if|if
condition|(
name|recipient
operator|.
name|contains
argument_list|(
literal|"<"
argument_list|)
condition|)
block|{
comment|//yes, just add the email address
name|recipients
operator|.
name|append
argument_list|(
name|recipient
operator|.
name|substring
argument_list|(
name|recipient
operator|.
name|indexOf
argument_list|(
literal|"<"
argument_list|)
operator|+
literal|1
argument_list|,
name|recipient
operator|.
name|indexOf
argument_list|(
literal|">"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
else|else
block|{
comment|//add the email address
name|recipients
operator|.
name|append
argument_list|(
name|recipient
argument_list|)
expr_stmt|;
block|}
block|}
comment|//Create a sendmail Process
name|Process
name|p
init|=
name|Runtime
operator|.
name|getRuntime
argument_list|()
operator|.
name|exec
argument_list|(
literal|"/usr/sbin/sendmail"
operator|+
name|recipients
operator|.
name|toString
argument_list|()
argument_list|)
decl_stmt|;
comment|//Get a Buffered Print Writer to the Processes stdOut
name|out
operator|=
operator|new
name|PrintWriter
argument_list|(
operator|new
name|OutputStreamWriter
argument_list|(
name|p
operator|.
name|getOutputStream
argument_list|()
argument_list|,
name|charset
argument_list|)
argument_list|)
expr_stmt|;
comment|//Send the Message
name|writeMessage
argument_list|(
name|out
argument_list|,
name|mail
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|error
argument_list|(
name|e
operator|.
name|getMessage
argument_list|()
argument_list|,
name|e
argument_list|)
expr_stmt|;
return|return
literal|false
return|;
block|}
finally|finally
block|{
comment|//Close the stdOut
if|if
condition|(
name|out
operator|!=
literal|null
condition|)
name|out
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
comment|//Message Sent Succesfully
name|LOG
operator|.
name|info
argument_list|(
literal|"send-email() message sent using Sendmail "
operator|+
operator|new
name|Date
argument_list|()
argument_list|)
expr_stmt|;
return|return
literal|true
return|;
block|}
specifier|private
specifier|static
class|class
name|SMTPException
extends|extends
name|Exception
block|{
specifier|private
specifier|static
specifier|final
name|long
name|serialVersionUID
init|=
literal|4859093648476395159L
decl_stmt|;
specifier|public
name|SMTPException
parameter_list|(
name|String
name|message
parameter_list|)
block|{
name|super
argument_list|(
name|message
argument_list|)
expr_stmt|;
block|}
specifier|public
name|SMTPException
parameter_list|(
name|Throwable
name|cause
parameter_list|)
block|{
name|super
argument_list|(
name|cause
argument_list|)
expr_stmt|;
block|}
block|}
comment|/**      * Sends an email using SMTP      *      * @param mails		A list of mail object representing the email to send      * @param SMTPServer	The SMTP Server to send the email through      * @return		boolean value of true of false indicating success or failure to send email      */
specifier|private
name|List
argument_list|<
name|Boolean
argument_list|>
name|sendBySMTP
parameter_list|(
name|List
argument_list|<
name|Mail
argument_list|>
name|mails
parameter_list|,
name|String
name|SMTPServer
parameter_list|)
throws|throws
name|SMTPException
block|{
specifier|final
name|int
name|TCP_PROTOCOL_SMTP
init|=
literal|25
decl_stmt|;
comment|//SMTP Protocol
name|String
name|smtpResult
init|=
literal|""
decl_stmt|;
comment|//Holds the server Result code when an SMTP Command is executed
name|Socket
name|smtpSock
init|=
literal|null
decl_stmt|;
name|BufferedReader
name|smtpIn
init|=
literal|null
decl_stmt|;
name|PrintWriter
name|smtpOut
init|=
literal|null
decl_stmt|;
name|List
argument_list|<
name|Boolean
argument_list|>
name|sendMailResults
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
try|try
block|{
comment|//Create a Socket and connect to the SMTP Server
name|smtpSock
operator|=
operator|new
name|Socket
argument_list|(
name|SMTPServer
argument_list|,
name|TCP_PROTOCOL_SMTP
argument_list|)
expr_stmt|;
comment|//Create a Buffered Reader for the Socket
name|smtpIn
operator|=
operator|new
name|BufferedReader
argument_list|(
operator|new
name|InputStreamReader
argument_list|(
name|smtpSock
operator|.
name|getInputStream
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
comment|//Create an Output Writer for the Socket
name|smtpOut
operator|=
operator|new
name|PrintWriter
argument_list|(
operator|new
name|OutputStreamWriter
argument_list|(
name|smtpSock
operator|.
name|getOutputStream
argument_list|()
argument_list|,
name|charset
argument_list|)
argument_list|)
expr_stmt|;
comment|//First line sent to us from the SMTP server should be "220 blah blah", 220 indicates okay
name|smtpResult
operator|=
name|smtpIn
operator|.
name|readLine
argument_list|()
expr_stmt|;
if|if
condition|(
operator|!
name|smtpResult
operator|.
name|substring
argument_list|(
literal|0
argument_list|,
literal|3
argument_list|)
operator|.
name|equals
argument_list|(
literal|"220"
argument_list|)
condition|)
block|{
name|String
name|errMsg
init|=
literal|"Error - SMTP Server not ready: '"
operator|+
name|smtpResult
operator|+
literal|"'"
decl_stmt|;
name|LOG
operator|.
name|error
argument_list|(
name|errMsg
argument_list|)
expr_stmt|;
throw|throw
operator|new
name|SMTPException
argument_list|(
name|errMsg
argument_list|)
throw|;
block|}
comment|//Say "HELO"
name|smtpOut
operator|.
name|println
argument_list|(
literal|"HELO "
operator|+
name|InetAddress
operator|.
name|getLocalHost
argument_list|()
operator|.
name|getHostName
argument_list|()
argument_list|)
expr_stmt|;
name|smtpOut
operator|.
name|flush
argument_list|()
expr_stmt|;
comment|//get "HELLO" response, should be "250 blah blah"
name|smtpResult
operator|=
name|smtpIn
operator|.
name|readLine
argument_list|()
expr_stmt|;
if|if
condition|(
name|smtpResult
operator|==
literal|null
condition|)
block|{
name|String
name|errMsg
init|=
literal|"Error - Unexpected null response to SMTP HELO"
decl_stmt|;
name|LOG
operator|.
name|error
argument_list|(
name|errMsg
argument_list|)
expr_stmt|;
throw|throw
operator|new
name|SMTPException
argument_list|(
name|errMsg
argument_list|)
throw|;
block|}
if|if
condition|(
operator|!
name|smtpResult
operator|.
name|substring
argument_list|(
literal|0
argument_list|,
literal|3
argument_list|)
operator|.
name|equals
argument_list|(
literal|"250"
argument_list|)
condition|)
block|{
name|String
name|errMsg
init|=
literal|"Error - SMTP HELO Failed: '"
operator|+
name|smtpResult
operator|+
literal|"'"
decl_stmt|;
name|LOG
operator|.
name|error
argument_list|(
name|errMsg
argument_list|)
expr_stmt|;
throw|throw
operator|new
name|SMTPException
argument_list|(
name|errMsg
argument_list|)
throw|;
block|}
comment|//write SMTP message(s)
for|for
control|(
name|Mail
name|mail
range|:
name|mails
control|)
block|{
name|boolean
name|mailResult
init|=
name|writeSMTPMessage
argument_list|(
name|mail
argument_list|,
name|smtpOut
argument_list|,
name|smtpIn
argument_list|)
decl_stmt|;
name|sendMailResults
operator|.
name|add
argument_list|(
name|mailResult
argument_list|)
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
name|IOException
name|ioe
parameter_list|)
block|{
name|LOG
operator|.
name|error
argument_list|(
name|ioe
operator|.
name|getMessage
argument_list|()
argument_list|,
name|ioe
argument_list|)
expr_stmt|;
throw|throw
operator|new
name|SMTPException
argument_list|(
name|ioe
argument_list|)
throw|;
block|}
finally|finally
block|{
try|try
block|{
if|if
condition|(
name|smtpOut
operator|!=
literal|null
condition|)
name|smtpOut
operator|.
name|close
argument_list|()
expr_stmt|;
if|if
condition|(
name|smtpIn
operator|!=
literal|null
condition|)
name|smtpIn
operator|.
name|close
argument_list|()
expr_stmt|;
if|if
condition|(
name|smtpSock
operator|!=
literal|null
condition|)
name|smtpSock
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|ioe
parameter_list|)
block|{
name|LOG
operator|.
name|warn
argument_list|(
name|ioe
operator|.
name|getMessage
argument_list|()
argument_list|,
name|ioe
argument_list|)
expr_stmt|;
block|}
block|}
comment|//Message(s) Sent Succesfully
name|LOG
operator|.
name|info
argument_list|(
literal|"send-email() message(s) sent using SMTP "
operator|+
operator|new
name|Date
argument_list|()
argument_list|)
expr_stmt|;
return|return
name|sendMailResults
return|;
block|}
specifier|private
name|boolean
name|writeSMTPMessage
parameter_list|(
name|Mail
name|mail
parameter_list|,
name|PrintWriter
name|smtpOut
parameter_list|,
name|BufferedReader
name|smtpIn
parameter_list|)
block|{
try|try
block|{
name|String
name|smtpResult
init|=
literal|""
decl_stmt|;
comment|//Send "MAIL FROM:"
comment|//Check format of from address does it include a name as well as the email address?
if|if
condition|(
name|mail
operator|.
name|getFrom
argument_list|()
operator|.
name|contains
argument_list|(
literal|"<"
argument_list|)
condition|)
block|{
comment|//yes, just send the email address
name|smtpOut
operator|.
name|println
argument_list|(
literal|"MAIL FROM:<"
operator|+
name|mail
operator|.
name|getFrom
argument_list|()
operator|.
name|substring
argument_list|(
name|mail
operator|.
name|getFrom
argument_list|()
operator|.
name|indexOf
argument_list|(
literal|"<"
argument_list|)
operator|+
literal|1
argument_list|,
name|mail
operator|.
name|getFrom
argument_list|()
operator|.
name|indexOf
argument_list|(
literal|">"
argument_list|)
argument_list|)
operator|+
literal|">"
argument_list|)
expr_stmt|;
block|}
else|else
block|{
comment|//no, doesnt include a name so send the email address
name|smtpOut
operator|.
name|println
argument_list|(
literal|"MAIL FROM:<"
operator|+
name|mail
operator|.
name|getFrom
argument_list|()
operator|+
literal|">"
argument_list|)
expr_stmt|;
block|}
name|smtpOut
operator|.
name|flush
argument_list|()
expr_stmt|;
comment|//Get "MAIL FROM:" response
name|smtpResult
operator|=
name|smtpIn
operator|.
name|readLine
argument_list|()
expr_stmt|;
if|if
condition|(
name|smtpResult
operator|==
literal|null
condition|)
block|{
name|LOG
operator|.
name|error
argument_list|(
literal|"Error - Unexpected null response to SMTP MAIL FROM"
argument_list|)
expr_stmt|;
return|return
literal|false
return|;
block|}
if|if
condition|(
operator|!
name|smtpResult
operator|.
name|substring
argument_list|(
literal|0
argument_list|,
literal|3
argument_list|)
operator|.
name|equals
argument_list|(
literal|"250"
argument_list|)
condition|)
block|{
name|LOG
operator|.
name|error
argument_list|(
literal|"Error - SMTP MAIL FROM failed: "
operator|+
name|smtpResult
argument_list|)
expr_stmt|;
return|return
literal|false
return|;
block|}
comment|//RCPT TO should be issued for each to, cc and bcc recipient
name|List
argument_list|<
name|String
argument_list|>
name|allrecipients
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
name|allrecipients
operator|.
name|addAll
argument_list|(
name|mail
operator|.
name|getTo
argument_list|()
argument_list|)
expr_stmt|;
name|allrecipients
operator|.
name|addAll
argument_list|(
name|mail
operator|.
name|getCC
argument_list|()
argument_list|)
expr_stmt|;
name|allrecipients
operator|.
name|addAll
argument_list|(
name|mail
operator|.
name|getBCC
argument_list|()
argument_list|)
expr_stmt|;
for|for
control|(
name|String
name|recipient
range|:
name|allrecipients
control|)
block|{
comment|//Send "RCPT TO:"
comment|//Check format of to address does it include a name as well as the email address?
if|if
condition|(
name|recipient
operator|.
name|contains
argument_list|(
literal|"<"
argument_list|)
condition|)
block|{
comment|//yes, just send the email address
name|smtpOut
operator|.
name|println
argument_list|(
literal|"RCPT TO:<"
operator|+
name|recipient
operator|.
name|substring
argument_list|(
name|recipient
operator|.
name|indexOf
argument_list|(
literal|"<"
argument_list|)
operator|+
literal|1
argument_list|,
name|recipient
operator|.
name|indexOf
argument_list|(
literal|">"
argument_list|)
argument_list|)
operator|+
literal|">"
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|smtpOut
operator|.
name|println
argument_list|(
literal|"RCPT TO:<"
operator|+
name|recipient
operator|+
literal|">"
argument_list|)
expr_stmt|;
block|}
name|smtpOut
operator|.
name|flush
argument_list|()
expr_stmt|;
comment|//Get "RCPT TO:" response
name|smtpResult
operator|=
name|smtpIn
operator|.
name|readLine
argument_list|()
expr_stmt|;
if|if
condition|(
operator|!
name|smtpResult
operator|.
name|substring
argument_list|(
literal|0
argument_list|,
literal|3
argument_list|)
operator|.
name|equals
argument_list|(
literal|"250"
argument_list|)
condition|)
block|{
name|LOG
operator|.
name|error
argument_list|(
literal|"Error - SMTP RCPT TO failed: "
operator|+
name|smtpResult
argument_list|)
expr_stmt|;
block|}
block|}
comment|//SEND "DATA"
name|smtpOut
operator|.
name|println
argument_list|(
literal|"DATA"
argument_list|)
expr_stmt|;
name|smtpOut
operator|.
name|flush
argument_list|()
expr_stmt|;
comment|//Get "DATA" response, should be "354 blah blah"
name|smtpResult
operator|=
name|smtpIn
operator|.
name|readLine
argument_list|()
expr_stmt|;
if|if
condition|(
operator|!
name|smtpResult
operator|.
name|substring
argument_list|(
literal|0
argument_list|,
literal|3
argument_list|)
operator|.
name|equals
argument_list|(
literal|"354"
argument_list|)
condition|)
block|{
name|LOG
operator|.
name|error
argument_list|(
literal|"Error - SMTP DATA failed: "
operator|+
name|smtpResult
argument_list|)
expr_stmt|;
return|return
literal|false
return|;
block|}
comment|//Send the Message
name|writeMessage
argument_list|(
name|smtpOut
argument_list|,
name|mail
argument_list|)
expr_stmt|;
comment|//Get end message response, should be "250 blah blah"
name|smtpResult
operator|=
name|smtpIn
operator|.
name|readLine
argument_list|()
expr_stmt|;
if|if
condition|(
operator|!
name|smtpResult
operator|.
name|substring
argument_list|(
literal|0
argument_list|,
literal|3
argument_list|)
operator|.
name|equals
argument_list|(
literal|"250"
argument_list|)
condition|)
block|{
name|LOG
operator|.
name|error
argument_list|(
literal|"Error - Message not accepted: "
operator|+
name|smtpResult
argument_list|)
expr_stmt|;
return|return
literal|false
return|;
block|}
block|}
catch|catch
parameter_list|(
name|IOException
name|ioe
parameter_list|)
block|{
name|LOG
operator|.
name|error
argument_list|(
name|ioe
operator|.
name|getMessage
argument_list|()
argument_list|,
name|ioe
argument_list|)
expr_stmt|;
return|return
literal|false
return|;
block|}
return|return
literal|true
return|;
block|}
comment|/**      * Writes an email payload (Headers + Body) from a mail object      *      * @param out		A PrintWriter to receive the email      * @param aMail		A mail object representing the email to write out      */
specifier|private
name|void
name|writeMessage
parameter_list|(
name|PrintWriter
name|out
parameter_list|,
name|Mail
name|aMail
parameter_list|)
throws|throws
name|IOException
block|{
name|String
name|Version
init|=
name|eXistVersion
argument_list|()
decl_stmt|;
comment|//Version of eXist
name|String
name|MultipartBoundary
init|=
literal|"eXist.multipart."
operator|+
name|Version
decl_stmt|;
comment|//Multipart Boundary
comment|//write the message headers
name|out
operator|.
name|println
argument_list|(
literal|"From: "
operator|+
name|encode64Address
argument_list|(
name|aMail
operator|.
name|getFrom
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
if|if
condition|(
name|aMail
operator|.
name|getReplyTo
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|out
operator|.
name|println
argument_list|(
literal|"Reply-To: "
operator|+
name|encode64Address
argument_list|(
name|aMail
operator|.
name|getReplyTo
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
for|for
control|(
name|int
name|x
init|=
literal|0
init|;
name|x
operator|<
name|aMail
operator|.
name|countTo
argument_list|()
condition|;
name|x
operator|++
control|)
block|{
name|out
operator|.
name|println
argument_list|(
literal|"To: "
operator|+
name|encode64Address
argument_list|(
name|aMail
operator|.
name|getTo
argument_list|(
name|x
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
for|for
control|(
name|int
name|x
init|=
literal|0
init|;
name|x
operator|<
name|aMail
operator|.
name|countCC
argument_list|()
condition|;
name|x
operator|++
control|)
block|{
name|out
operator|.
name|println
argument_list|(
literal|"CC: "
operator|+
name|encode64Address
argument_list|(
name|aMail
operator|.
name|getCC
argument_list|(
name|x
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
for|for
control|(
name|int
name|x
init|=
literal|0
init|;
name|x
operator|<
name|aMail
operator|.
name|countBCC
argument_list|()
condition|;
name|x
operator|++
control|)
block|{
name|out
operator|.
name|println
argument_list|(
literal|"BCC: "
operator|+
name|encode64Address
argument_list|(
name|aMail
operator|.
name|getBCC
argument_list|(
name|x
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|out
operator|.
name|println
argument_list|(
literal|"Date: "
operator|+
name|getDateRFC822
argument_list|()
argument_list|)
expr_stmt|;
name|out
operator|.
name|println
argument_list|(
literal|"Subject: "
operator|+
name|encode64
argument_list|(
name|aMail
operator|.
name|getSubject
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|out
operator|.
name|println
argument_list|(
literal|"X-Mailer: eXist "
operator|+
name|Version
operator|+
literal|" mail:send-email()"
argument_list|)
expr_stmt|;
name|out
operator|.
name|println
argument_list|(
literal|"MIME-Version: 1.0"
argument_list|)
expr_stmt|;
name|boolean
name|multipartAlternative
init|=
literal|false
decl_stmt|;
name|String
name|multipartBoundary
init|=
literal|null
decl_stmt|;
if|if
condition|(
name|aMail
operator|.
name|attachmentIterator
argument_list|()
operator|.
name|hasNext
argument_list|()
condition|)
block|{
comment|// we have an attachment as well as text and/or html so we need a multipart/mixed message
name|multipartBoundary
operator|=
name|MultipartBoundary
expr_stmt|;
block|}
if|else if
condition|(
operator|!
name|aMail
operator|.
name|getText
argument_list|()
operator|.
name|equals
argument_list|(
literal|""
argument_list|)
operator|&&
operator|!
name|aMail
operator|.
name|getXHTML
argument_list|()
operator|.
name|equals
argument_list|(
literal|""
argument_list|)
condition|)
block|{
comment|// we have text and html so we need a multipart/alternative message and no attachment
name|multipartAlternative
operator|=
literal|true
expr_stmt|;
name|multipartBoundary
operator|=
name|MultipartBoundary
operator|+
literal|"_alt"
expr_stmt|;
block|}
else|else
block|{
comment|// we have either text or html and no attachment this message is not multipart
block|}
comment|//content type
if|if
condition|(
name|multipartBoundary
operator|!=
literal|null
condition|)
block|{
comment|//multipart message
name|out
operator|.
name|println
argument_list|(
literal|"Content-Type: "
operator|+
operator|(
name|multipartAlternative
condition|?
literal|"multipart/alternative"
else|:
literal|"multipart/mixed"
operator|)
operator|+
literal|"; boundary=\""
operator|+
name|multipartBoundary
operator|+
literal|"\";"
argument_list|)
expr_stmt|;
comment|//Mime warning
name|out
operator|.
name|println
argument_list|()
expr_stmt|;
name|out
operator|.
name|println
argument_list|(
literal|"Error your mail client is not MIME Compatible"
argument_list|)
expr_stmt|;
name|out
operator|.
name|println
argument_list|(
literal|"--"
operator|+
name|multipartBoundary
argument_list|)
expr_stmt|;
block|}
comment|// TODO - need to put out a multipart/mixed boundary here when HTML, text and attachment present
if|if
condition|(
operator|!
name|aMail
operator|.
name|getText
argument_list|()
operator|.
name|equals
argument_list|(
literal|""
argument_list|)
operator|&&
operator|!
name|aMail
operator|.
name|getXHTML
argument_list|()
operator|.
name|equals
argument_list|(
literal|""
argument_list|)
operator|&&
name|aMail
operator|.
name|attachmentIterator
argument_list|()
operator|.
name|hasNext
argument_list|()
condition|)
block|{
name|out
operator|.
name|println
argument_list|(
literal|"Content-Type: multipart/alternative; boundary=\""
operator|+
name|MultipartBoundary
operator|+
literal|"_alt\";"
argument_list|)
expr_stmt|;
name|out
operator|.
name|println
argument_list|(
literal|"--"
operator|+
name|MultipartBoundary
operator|+
literal|"_alt"
argument_list|)
expr_stmt|;
block|}
comment|//text email
if|if
condition|(
operator|!
name|aMail
operator|.
name|getText
argument_list|()
operator|.
name|equals
argument_list|(
literal|""
argument_list|)
condition|)
block|{
name|out
operator|.
name|println
argument_list|(
literal|"Content-Type: text/plain; charset="
operator|+
name|charset
argument_list|)
expr_stmt|;
name|out
operator|.
name|println
argument_list|(
literal|"Content-Transfer-Encoding: 8bit"
argument_list|)
expr_stmt|;
comment|//now send the txt message
name|out
operator|.
name|println
argument_list|()
expr_stmt|;
name|out
operator|.
name|println
argument_list|(
name|aMail
operator|.
name|getText
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|multipartBoundary
operator|!=
literal|null
condition|)
block|{
if|if
condition|(
operator|!
name|aMail
operator|.
name|getXHTML
argument_list|()
operator|.
name|equals
argument_list|(
literal|""
argument_list|)
operator|||
name|aMail
operator|.
name|attachmentIterator
argument_list|()
operator|.
name|hasNext
argument_list|()
condition|)
block|{
if|if
condition|(
operator|!
name|aMail
operator|.
name|getText
argument_list|()
operator|.
name|equals
argument_list|(
literal|""
argument_list|)
operator|&&
operator|!
name|aMail
operator|.
name|getXHTML
argument_list|()
operator|.
name|equals
argument_list|(
literal|""
argument_list|)
operator|&&
name|aMail
operator|.
name|attachmentIterator
argument_list|()
operator|.
name|hasNext
argument_list|()
condition|)
block|{
name|out
operator|.
name|println
argument_list|(
literal|"--"
operator|+
name|MultipartBoundary
operator|+
literal|"_alt"
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|out
operator|.
name|println
argument_list|(
literal|"--"
operator|+
name|multipartBoundary
argument_list|)
expr_stmt|;
block|}
block|}
else|else
block|{
if|if
condition|(
operator|!
name|aMail
operator|.
name|getText
argument_list|()
operator|.
name|equals
argument_list|(
literal|""
argument_list|)
operator|&&
operator|!
name|aMail
operator|.
name|getXHTML
argument_list|()
operator|.
name|equals
argument_list|(
literal|""
argument_list|)
operator|&&
name|aMail
operator|.
name|attachmentIterator
argument_list|()
operator|.
name|hasNext
argument_list|()
condition|)
block|{
name|out
operator|.
name|println
argument_list|(
literal|"--"
operator|+
name|MultipartBoundary
operator|+
literal|"_alt--"
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|out
operator|.
name|println
argument_list|(
literal|"--"
operator|+
name|multipartBoundary
operator|+
literal|"--"
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
comment|//HTML email
if|if
condition|(
operator|!
name|aMail
operator|.
name|getXHTML
argument_list|()
operator|.
name|equals
argument_list|(
literal|""
argument_list|)
condition|)
block|{
name|out
operator|.
name|println
argument_list|(
literal|"Content-Type: text/html; charset="
operator|+
name|charset
argument_list|)
expr_stmt|;
name|out
operator|.
name|println
argument_list|(
literal|"Content-Transfer-Encoding: 8bit"
argument_list|)
expr_stmt|;
comment|//now send the html message
name|out
operator|.
name|println
argument_list|()
expr_stmt|;
name|out
operator|.
name|println
argument_list|(
literal|"<!DOCTYPE html PUBLIC \"-//W3C//DTD XHTML 1.1//EN\" \"http://www.w3.org/TR/xhtml11/DTD/xhtml11.dtd\">"
argument_list|)
expr_stmt|;
name|out
operator|.
name|println
argument_list|(
name|aMail
operator|.
name|getXHTML
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|multipartBoundary
operator|!=
literal|null
condition|)
block|{
if|if
condition|(
name|aMail
operator|.
name|attachmentIterator
argument_list|()
operator|.
name|hasNext
argument_list|()
condition|)
block|{
if|if
condition|(
operator|!
name|aMail
operator|.
name|getText
argument_list|()
operator|.
name|equals
argument_list|(
literal|""
argument_list|)
operator|&&
operator|!
name|aMail
operator|.
name|getXHTML
argument_list|()
operator|.
name|equals
argument_list|(
literal|""
argument_list|)
operator|&&
name|aMail
operator|.
name|attachmentIterator
argument_list|()
operator|.
name|hasNext
argument_list|()
condition|)
block|{
name|out
operator|.
name|println
argument_list|(
literal|"--"
operator|+
name|MultipartBoundary
operator|+
literal|"_alt--"
argument_list|)
expr_stmt|;
name|out
operator|.
name|println
argument_list|(
literal|"--"
operator|+
name|multipartBoundary
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|out
operator|.
name|println
argument_list|(
literal|"--"
operator|+
name|multipartBoundary
argument_list|)
expr_stmt|;
block|}
block|}
else|else
block|{
if|if
condition|(
operator|!
name|aMail
operator|.
name|getText
argument_list|()
operator|.
name|equals
argument_list|(
literal|""
argument_list|)
operator|&&
operator|!
name|aMail
operator|.
name|getXHTML
argument_list|()
operator|.
name|equals
argument_list|(
literal|""
argument_list|)
operator|&&
name|aMail
operator|.
name|attachmentIterator
argument_list|()
operator|.
name|hasNext
argument_list|()
condition|)
block|{
name|out
operator|.
name|println
argument_list|(
literal|"--"
operator|+
name|MultipartBoundary
operator|+
literal|"_alt--"
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|out
operator|.
name|println
argument_list|(
literal|"--"
operator|+
name|multipartBoundary
operator|+
literal|"--"
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
comment|//attachments
if|if
condition|(
name|aMail
operator|.
name|attachmentIterator
argument_list|()
operator|.
name|hasNext
argument_list|()
condition|)
block|{
for|for
control|(
name|Iterator
argument_list|<
name|MailAttachment
argument_list|>
name|itAttachment
init|=
name|aMail
operator|.
name|attachmentIterator
argument_list|()
init|;
name|itAttachment
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|MailAttachment
name|ma
init|=
name|itAttachment
operator|.
name|next
argument_list|()
decl_stmt|;
name|out
operator|.
name|println
argument_list|(
literal|"Content-Type: "
operator|+
name|ma
operator|.
name|getMimeType
argument_list|()
operator|+
literal|"; name=\""
operator|+
name|ma
operator|.
name|getFilename
argument_list|()
operator|+
literal|"\""
argument_list|)
expr_stmt|;
name|out
operator|.
name|println
argument_list|(
literal|"Content-Transfer-Encoding: base64"
argument_list|)
expr_stmt|;
name|out
operator|.
name|println
argument_list|(
literal|"Content-Description: "
operator|+
name|ma
operator|.
name|getFilename
argument_list|()
argument_list|)
expr_stmt|;
name|out
operator|.
name|println
argument_list|(
literal|"Content-Disposition: attachment; filename=\""
operator|+
name|ma
operator|.
name|getFilename
argument_list|()
operator|+
literal|"\""
argument_list|)
expr_stmt|;
name|out
operator|.
name|println
argument_list|()
expr_stmt|;
comment|//write out the attachment encoded data in fixed width lines
specifier|final
name|char
name|buf
index|[]
init|=
operator|new
name|char
index|[
name|MIME_BASE64_MAX_LINE_LENGTH
index|]
decl_stmt|;
name|int
name|read
init|=
operator|-
literal|1
decl_stmt|;
specifier|final
name|Reader
name|attachmentDataReader
init|=
operator|new
name|StringReader
argument_list|(
name|ma
operator|.
name|getData
argument_list|()
argument_list|)
decl_stmt|;
while|while
condition|(
operator|(
name|read
operator|=
name|attachmentDataReader
operator|.
name|read
argument_list|(
name|buf
argument_list|,
literal|0
argument_list|,
name|MIME_BASE64_MAX_LINE_LENGTH
argument_list|)
operator|)
operator|>
operator|-
literal|1
condition|)
block|{
name|out
operator|.
name|println
argument_list|(
name|String
operator|.
name|valueOf
argument_list|(
name|buf
argument_list|,
literal|0
argument_list|,
name|read
argument_list|)
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|itAttachment
operator|.
name|hasNext
argument_list|()
condition|)
block|{
name|out
operator|.
name|println
argument_list|(
literal|"--"
operator|+
name|multipartBoundary
argument_list|)
expr_stmt|;
block|}
block|}
comment|//Emd multipart message
name|out
operator|.
name|println
argument_list|(
literal|"--"
operator|+
name|multipartBoundary
operator|+
literal|"--"
argument_list|)
expr_stmt|;
block|}
comment|//end the message,<cr><lf>.<cr><lf>
name|out
operator|.
name|println
argument_list|()
expr_stmt|;
name|out
operator|.
name|println
argument_list|(
literal|"."
argument_list|)
expr_stmt|;
name|out
operator|.
name|flush
argument_list|()
expr_stmt|;
block|}
comment|/**      * Get's the version of eXist we are running      * The eXist version is used as part of the multipart separator      *      * @return		The eXist Version      */
specifier|private
name|String
name|eXistVersion
parameter_list|()
throws|throws
name|IOException
block|{
name|Properties
name|sysProperties
init|=
operator|new
name|Properties
argument_list|()
decl_stmt|;
name|sysProperties
operator|.
name|load
argument_list|(
name|GetVersion
operator|.
name|class
operator|.
name|getClassLoader
argument_list|()
operator|.
name|getResourceAsStream
argument_list|(
literal|"org/exist/system.properties"
argument_list|)
argument_list|)
expr_stmt|;
return|return
name|sysProperties
operator|.
name|getProperty
argument_list|(
literal|"product-version"
argument_list|,
literal|"unknown version"
argument_list|)
return|;
block|}
comment|/**      * Constructs a mail Object from an XML representation of an email      *      * The XML email Representation is expected to look something like this      *      *<mail>      *<from></from>      *<reply-to></reply-to>      *<to></to>      *<cc></cc>      *<bcc></bcc>      *<subject></subject>      *<message>      *<text></text>      *<xhtml></xhtml>      *</message>      *</mail>      *      * @param mailElements	The XML mail Node      * @return		A mail Object representing the XML mail Node      */
specifier|private
name|List
argument_list|<
name|Mail
argument_list|>
name|parseMailElement
parameter_list|(
name|List
argument_list|<
name|Element
argument_list|>
name|mailElements
parameter_list|)
throws|throws
name|TransformerException
block|{
name|List
argument_list|<
name|Mail
argument_list|>
name|mails
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
for|for
control|(
name|Element
name|mailElement
range|:
name|mailElements
control|)
block|{
comment|//Make sure that message has a Mail node
if|if
condition|(
name|mailElement
operator|.
name|getLocalName
argument_list|()
operator|.
name|equals
argument_list|(
literal|"mail"
argument_list|)
condition|)
block|{
comment|//New mail Object
name|Mail
name|mail
init|=
operator|new
name|Mail
argument_list|()
decl_stmt|;
comment|//Get the First Child
name|Node
name|child
init|=
name|mailElement
operator|.
name|getFirstChild
argument_list|()
decl_stmt|;
while|while
condition|(
name|child
operator|!=
literal|null
condition|)
block|{
comment|//Parse each of the child nodes
if|if
condition|(
name|child
operator|.
name|getNodeType
argument_list|()
operator|==
name|Node
operator|.
name|ELEMENT_NODE
operator|&&
name|child
operator|.
name|hasChildNodes
argument_list|()
condition|)
block|{
switch|switch
condition|(
name|child
operator|.
name|getLocalName
argument_list|()
condition|)
block|{
case|case
literal|"from"
case|:
name|mail
operator|.
name|setFrom
argument_list|(
name|child
operator|.
name|getFirstChild
argument_list|()
operator|.
name|getNodeValue
argument_list|()
argument_list|)
expr_stmt|;
break|break;
case|case
literal|"reply-to"
case|:
name|mail
operator|.
name|setReplyTo
argument_list|(
name|child
operator|.
name|getFirstChild
argument_list|()
operator|.
name|getNodeValue
argument_list|()
argument_list|)
expr_stmt|;
break|break;
case|case
literal|"to"
case|:
name|mail
operator|.
name|addTo
argument_list|(
name|child
operator|.
name|getFirstChild
argument_list|()
operator|.
name|getNodeValue
argument_list|()
argument_list|)
expr_stmt|;
break|break;
case|case
literal|"cc"
case|:
name|mail
operator|.
name|addCC
argument_list|(
name|child
operator|.
name|getFirstChild
argument_list|()
operator|.
name|getNodeValue
argument_list|()
argument_list|)
expr_stmt|;
break|break;
case|case
literal|"bcc"
case|:
name|mail
operator|.
name|addBCC
argument_list|(
name|child
operator|.
name|getFirstChild
argument_list|()
operator|.
name|getNodeValue
argument_list|()
argument_list|)
expr_stmt|;
break|break;
case|case
literal|"subject"
case|:
name|mail
operator|.
name|setSubject
argument_list|(
name|child
operator|.
name|getFirstChild
argument_list|()
operator|.
name|getNodeValue
argument_list|()
argument_list|)
expr_stmt|;
break|break;
case|case
literal|"message"
case|:
comment|//If the message node, then parse the child text and xhtml nodes
name|Node
name|bodyPart
init|=
name|child
operator|.
name|getFirstChild
argument_list|()
decl_stmt|;
while|while
condition|(
name|bodyPart
operator|!=
literal|null
condition|)
block|{
if|if
condition|(
name|bodyPart
operator|.
name|getLocalName
argument_list|()
operator|.
name|equals
argument_list|(
literal|"text"
argument_list|)
condition|)
block|{
name|mail
operator|.
name|setText
argument_list|(
name|bodyPart
operator|.
name|getFirstChild
argument_list|()
operator|.
name|getNodeValue
argument_list|()
argument_list|)
expr_stmt|;
block|}
if|else if
condition|(
name|bodyPart
operator|.
name|getLocalName
argument_list|()
operator|.
name|equals
argument_list|(
literal|"xhtml"
argument_list|)
condition|)
block|{
comment|//Convert everything inside<xhtml></xhtml> to text
name|TransformerFactory
name|transFactory
init|=
name|TransformerFactory
operator|.
name|newInstance
argument_list|()
decl_stmt|;
name|Transformer
name|transformer
init|=
name|transFactory
operator|.
name|newTransformer
argument_list|()
decl_stmt|;
name|DOMSource
name|source
init|=
operator|new
name|DOMSource
argument_list|(
name|bodyPart
operator|.
name|getFirstChild
argument_list|()
argument_list|)
decl_stmt|;
name|StringWriter
name|strWriter
init|=
operator|new
name|StringWriter
argument_list|()
decl_stmt|;
name|StreamResult
name|result
init|=
operator|new
name|StreamResult
argument_list|(
name|strWriter
argument_list|)
decl_stmt|;
name|transformer
operator|.
name|transform
argument_list|(
name|source
argument_list|,
name|result
argument_list|)
expr_stmt|;
name|mail
operator|.
name|setXHTML
argument_list|(
name|strWriter
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
block|}
comment|//next body part
name|bodyPart
operator|=
name|bodyPart
operator|.
name|getNextSibling
argument_list|()
expr_stmt|;
block|}
break|break;
case|case
literal|"attachment"
case|:
name|Element
name|attachment
init|=
operator|(
name|Element
operator|)
name|child
decl_stmt|;
name|MailAttachment
name|ma
init|=
operator|new
name|MailAttachment
argument_list|(
name|attachment
operator|.
name|getAttribute
argument_list|(
literal|"filename"
argument_list|)
argument_list|,
name|attachment
operator|.
name|getAttribute
argument_list|(
literal|"mimetype"
argument_list|)
argument_list|,
name|attachment
operator|.
name|getFirstChild
argument_list|()
operator|.
name|getNodeValue
argument_list|()
argument_list|)
decl_stmt|;
name|mail
operator|.
name|addAttachment
argument_list|(
name|ma
argument_list|)
expr_stmt|;
break|break;
block|}
block|}
comment|//next node
name|child
operator|=
name|child
operator|.
name|getNextSibling
argument_list|()
expr_stmt|;
block|}
name|mails
operator|.
name|add
argument_list|(
name|mail
argument_list|)
expr_stmt|;
block|}
block|}
return|return
name|mails
return|;
block|}
comment|/**      * Constructs a mail Object from an XML representation of an email      *      * The XML email Representation is expected to look something like this      *      *<mail>      *<from></from>      *<reply-to></reply-to>      *<to></to>      *<cc></cc>      *<bcc></bcc>      *<subject></subject>      *<message>      *<text charset="" encoding=""></text>      *<xhtml charset="" encoding=""></xhtml>      *<generic charset="" type="" encoding=""></generic>      *</message>      *<attachment mimetype="" filename=""></attachment>      *</mail>      *      * @param mailElements	The XML mail Node      * @return		A mail Object representing the XML mail Node      */
specifier|private
name|List
argument_list|<
name|Message
argument_list|>
name|parseMessageElement
parameter_list|(
name|Session
name|session
parameter_list|,
name|List
argument_list|<
name|Element
argument_list|>
name|mailElements
parameter_list|)
throws|throws
name|IOException
throws|,
name|MessagingException
throws|,
name|TransformerException
block|{
name|List
argument_list|<
name|Message
argument_list|>
name|mails
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
for|for
control|(
name|Element
name|mailElement
range|:
name|mailElements
control|)
block|{
comment|//Make sure that message has a Mail node
if|if
condition|(
name|mailElement
operator|.
name|getLocalName
argument_list|()
operator|.
name|equals
argument_list|(
literal|"mail"
argument_list|)
condition|)
block|{
comment|//New message Object
comment|// create a message
name|MimeMessage
name|msg
init|=
operator|new
name|MimeMessage
argument_list|(
name|session
argument_list|)
decl_stmt|;
name|ArrayList
argument_list|<
name|InternetAddress
argument_list|>
name|replyTo
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
name|boolean
name|fromWasSet
init|=
literal|false
decl_stmt|;
name|MimeBodyPart
name|body
init|=
literal|null
decl_stmt|;
name|Multipart
name|multibody
init|=
literal|null
decl_stmt|;
name|ArrayList
argument_list|<
name|MimeBodyPart
argument_list|>
name|attachments
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
name|String
name|firstContent
init|=
literal|null
decl_stmt|;
name|String
name|firstContentType
init|=
literal|null
decl_stmt|;
name|String
name|firstCharset
init|=
literal|null
decl_stmt|;
name|String
name|firstEncoding
init|=
literal|null
decl_stmt|;
comment|//Get the First Child
name|Node
name|child
init|=
name|mailElement
operator|.
name|getFirstChild
argument_list|()
decl_stmt|;
while|while
condition|(
name|child
operator|!=
literal|null
condition|)
block|{
comment|//Parse each of the child nodes
if|if
condition|(
name|child
operator|.
name|getNodeType
argument_list|()
operator|==
name|Node
operator|.
name|ELEMENT_NODE
operator|&&
name|child
operator|.
name|hasChildNodes
argument_list|()
condition|)
block|{
switch|switch
condition|(
name|child
operator|.
name|getLocalName
argument_list|()
condition|)
block|{
case|case
literal|"from"
case|:
comment|// set the from and to address
name|InternetAddress
index|[]
name|addressFrom
init|=
block|{
operator|new
name|InternetAddress
argument_list|(
name|child
operator|.
name|getFirstChild
argument_list|()
operator|.
name|getNodeValue
argument_list|()
argument_list|)
block|}
decl_stmt|;
name|msg
operator|.
name|addFrom
argument_list|(
name|addressFrom
argument_list|)
expr_stmt|;
name|fromWasSet
operator|=
literal|true
expr_stmt|;
break|break;
case|case
literal|"reply-to"
case|:
comment|// As we can only set the reply-to, not add them, let's keep
comment|// all of them in a list
name|replyTo
operator|.
name|add
argument_list|(
operator|new
name|InternetAddress
argument_list|(
name|child
operator|.
name|getFirstChild
argument_list|()
operator|.
name|getNodeValue
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|msg
operator|.
name|setReplyTo
argument_list|(
name|replyTo
operator|.
name|toArray
argument_list|(
operator|new
name|InternetAddress
index|[
literal|0
index|]
argument_list|)
argument_list|)
expr_stmt|;
break|break;
case|case
literal|"to"
case|:
name|msg
operator|.
name|addRecipient
argument_list|(
name|Message
operator|.
name|RecipientType
operator|.
name|TO
argument_list|,
operator|new
name|InternetAddress
argument_list|(
name|child
operator|.
name|getFirstChild
argument_list|()
operator|.
name|getNodeValue
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
break|break;
case|case
literal|"cc"
case|:
name|msg
operator|.
name|addRecipient
argument_list|(
name|Message
operator|.
name|RecipientType
operator|.
name|CC
argument_list|,
operator|new
name|InternetAddress
argument_list|(
name|child
operator|.
name|getFirstChild
argument_list|()
operator|.
name|getNodeValue
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
break|break;
case|case
literal|"bcc"
case|:
name|msg
operator|.
name|addRecipient
argument_list|(
name|Message
operator|.
name|RecipientType
operator|.
name|BCC
argument_list|,
operator|new
name|InternetAddress
argument_list|(
name|child
operator|.
name|getFirstChild
argument_list|()
operator|.
name|getNodeValue
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
break|break;
case|case
literal|"subject"
case|:
name|msg
operator|.
name|setSubject
argument_list|(
name|child
operator|.
name|getFirstChild
argument_list|()
operator|.
name|getNodeValue
argument_list|()
argument_list|)
expr_stmt|;
break|break;
case|case
literal|"header"
case|:
comment|// Optional : You can also set your custom headers in the Email if you Want
name|msg
operator|.
name|addHeader
argument_list|(
operator|(
operator|(
name|Element
operator|)
name|child
operator|)
operator|.
name|getAttribute
argument_list|(
literal|"name"
argument_list|)
argument_list|,
name|child
operator|.
name|getFirstChild
argument_list|()
operator|.
name|getNodeValue
argument_list|()
argument_list|)
expr_stmt|;
break|break;
case|case
literal|"message"
case|:
comment|//If the message node, then parse the child text and xhtml nodes
name|Node
name|bodyPart
init|=
name|child
operator|.
name|getFirstChild
argument_list|()
decl_stmt|;
while|while
condition|(
name|bodyPart
operator|!=
literal|null
condition|)
block|{
if|if
condition|(
name|bodyPart
operator|.
name|getNodeType
argument_list|()
operator|!=
name|Node
operator|.
name|ELEMENT_NODE
condition|)
continue|continue;
name|Element
name|elementBodyPart
init|=
operator|(
name|Element
operator|)
name|bodyPart
decl_stmt|;
name|String
name|content
init|=
literal|null
decl_stmt|;
name|String
name|contentType
init|=
literal|null
decl_stmt|;
if|if
condition|(
name|bodyPart
operator|.
name|getLocalName
argument_list|()
operator|.
name|equals
argument_list|(
literal|"text"
argument_list|)
condition|)
block|{
comment|// Setting the Subject and Content Type
name|content
operator|=
name|bodyPart
operator|.
name|getFirstChild
argument_list|()
operator|.
name|getNodeValue
argument_list|()
expr_stmt|;
name|contentType
operator|=
literal|"plain"
expr_stmt|;
block|}
if|else if
condition|(
name|bodyPart
operator|.
name|getLocalName
argument_list|()
operator|.
name|equals
argument_list|(
literal|"xhtml"
argument_list|)
condition|)
block|{
comment|//Convert everything inside<xhtml></xhtml> to text
name|TransformerFactory
name|transFactory
init|=
name|TransformerFactory
operator|.
name|newInstance
argument_list|()
decl_stmt|;
name|Transformer
name|transformer
init|=
name|transFactory
operator|.
name|newTransformer
argument_list|()
decl_stmt|;
name|DOMSource
name|source
init|=
operator|new
name|DOMSource
argument_list|(
name|bodyPart
operator|.
name|getFirstChild
argument_list|()
argument_list|)
decl_stmt|;
name|StringWriter
name|strWriter
init|=
operator|new
name|StringWriter
argument_list|()
decl_stmt|;
name|StreamResult
name|result
init|=
operator|new
name|StreamResult
argument_list|(
name|strWriter
argument_list|)
decl_stmt|;
name|transformer
operator|.
name|transform
argument_list|(
name|source
argument_list|,
name|result
argument_list|)
expr_stmt|;
name|content
operator|=
name|strWriter
operator|.
name|toString
argument_list|()
expr_stmt|;
name|contentType
operator|=
literal|"html"
expr_stmt|;
block|}
if|else if
condition|(
name|bodyPart
operator|.
name|getLocalName
argument_list|()
operator|.
name|equals
argument_list|(
literal|"generic"
argument_list|)
condition|)
block|{
comment|// Setting the Subject and Content Type
name|content
operator|=
name|elementBodyPart
operator|.
name|getFirstChild
argument_list|()
operator|.
name|getNodeValue
argument_list|()
expr_stmt|;
name|contentType
operator|=
name|elementBodyPart
operator|.
name|getAttribute
argument_list|(
literal|"type"
argument_list|)
expr_stmt|;
block|}
comment|// Now, time to store it
if|if
condition|(
name|content
operator|!=
literal|null
operator|&&
name|contentType
operator|!=
literal|null
operator|&&
name|contentType
operator|.
name|length
argument_list|()
operator|>
literal|0
condition|)
block|{
name|String
name|charset
init|=
name|elementBodyPart
operator|.
name|getAttribute
argument_list|(
literal|"charset"
argument_list|)
decl_stmt|;
name|String
name|encoding
init|=
name|elementBodyPart
operator|.
name|getAttribute
argument_list|(
literal|"encoding"
argument_list|)
decl_stmt|;
if|if
condition|(
name|body
operator|!=
literal|null
operator|&&
name|multibody
operator|==
literal|null
condition|)
block|{
name|multibody
operator|=
operator|new
name|MimeMultipart
argument_list|(
literal|"alternative"
argument_list|)
expr_stmt|;
name|multibody
operator|.
name|addBodyPart
argument_list|(
name|body
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|StringUtils
operator|.
name|isEmpty
argument_list|(
name|charset
argument_list|)
condition|)
block|{
name|charset
operator|=
literal|"UTF-8"
expr_stmt|;
block|}
if|if
condition|(
name|StringUtils
operator|.
name|isEmpty
argument_list|(
name|encoding
argument_list|)
condition|)
block|{
name|encoding
operator|=
literal|"quoted-printable"
expr_stmt|;
block|}
if|if
condition|(
name|body
operator|==
literal|null
condition|)
block|{
name|firstContent
operator|=
name|content
expr_stmt|;
name|firstCharset
operator|=
name|charset
expr_stmt|;
name|firstContentType
operator|=
name|contentType
expr_stmt|;
name|firstEncoding
operator|=
name|encoding
expr_stmt|;
block|}
name|body
operator|=
operator|new
name|MimeBodyPart
argument_list|()
expr_stmt|;
name|body
operator|.
name|setText
argument_list|(
name|content
argument_list|,
name|charset
argument_list|,
name|contentType
argument_list|)
expr_stmt|;
if|if
condition|(
name|encoding
operator|!=
literal|null
condition|)
block|{
name|body
operator|.
name|setHeader
argument_list|(
literal|"Content-Transfer-Encoding"
argument_list|,
name|encoding
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|multibody
operator|!=
literal|null
condition|)
name|multibody
operator|.
name|addBodyPart
argument_list|(
name|body
argument_list|)
expr_stmt|;
block|}
comment|//next body part
name|bodyPart
operator|=
name|bodyPart
operator|.
name|getNextSibling
argument_list|()
expr_stmt|;
block|}
break|break;
case|case
literal|"attachment"
case|:
name|Element
name|attachment
init|=
operator|(
name|Element
operator|)
name|child
decl_stmt|;
name|MimeBodyPart
name|part
decl_stmt|;
comment|// if mimetype indicates a binary resource, assume the content is base64 encoded
if|if
condition|(
name|MimeTable
operator|.
name|getInstance
argument_list|()
operator|.
name|isTextContent
argument_list|(
name|attachment
operator|.
name|getAttribute
argument_list|(
literal|"mimetype"
argument_list|)
argument_list|)
condition|)
block|{
name|part
operator|=
operator|new
name|MimeBodyPart
argument_list|()
expr_stmt|;
block|}
else|else
block|{
name|part
operator|=
operator|new
name|PreencodedMimeBodyPart
argument_list|(
literal|"base64"
argument_list|)
expr_stmt|;
block|}
name|StringBuilder
name|content
init|=
operator|new
name|StringBuilder
argument_list|()
decl_stmt|;
name|Node
name|attachChild
init|=
name|attachment
operator|.
name|getFirstChild
argument_list|()
decl_stmt|;
while|while
condition|(
name|attachChild
operator|!=
literal|null
condition|)
block|{
if|if
condition|(
name|attachChild
operator|.
name|getNodeType
argument_list|()
operator|==
name|Node
operator|.
name|ELEMENT_NODE
condition|)
block|{
name|TransformerFactory
name|transFactory
init|=
name|TransformerFactory
operator|.
name|newInstance
argument_list|()
decl_stmt|;
name|Transformer
name|transformer
init|=
name|transFactory
operator|.
name|newTransformer
argument_list|()
decl_stmt|;
name|DOMSource
name|source
init|=
operator|new
name|DOMSource
argument_list|(
name|attachChild
argument_list|)
decl_stmt|;
name|StringWriter
name|strWriter
init|=
operator|new
name|StringWriter
argument_list|()
decl_stmt|;
name|StreamResult
name|result
init|=
operator|new
name|StreamResult
argument_list|(
name|strWriter
argument_list|)
decl_stmt|;
name|transformer
operator|.
name|transform
argument_list|(
name|source
argument_list|,
name|result
argument_list|)
expr_stmt|;
name|content
operator|.
name|append
argument_list|(
name|strWriter
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|content
operator|.
name|append
argument_list|(
name|attachChild
operator|.
name|getNodeValue
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|attachChild
operator|=
name|attachChild
operator|.
name|getNextSibling
argument_list|()
expr_stmt|;
block|}
name|part
operator|.
name|setDataHandler
argument_list|(
operator|new
name|DataHandler
argument_list|(
operator|new
name|ByteArrayDataSource
argument_list|(
name|content
operator|.
name|toString
argument_list|()
argument_list|,
name|attachment
operator|.
name|getAttribute
argument_list|(
literal|"mimetype"
argument_list|)
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|part
operator|.
name|setFileName
argument_list|(
name|attachment
operator|.
name|getAttribute
argument_list|(
literal|"filename"
argument_list|)
argument_list|)
expr_stmt|;
comment|//                            part.setHeader("Content-Transfer-Encoding", "base64");
name|attachments
operator|.
name|add
argument_list|(
name|part
argument_list|)
expr_stmt|;
break|break;
block|}
block|}
comment|//next node
name|child
operator|=
name|child
operator|.
name|getNextSibling
argument_list|()
expr_stmt|;
block|}
comment|// Lost from
if|if
condition|(
operator|!
name|fromWasSet
condition|)
name|msg
operator|.
name|setFrom
argument_list|()
expr_stmt|;
comment|// Preparing content and attachments
if|if
condition|(
name|attachments
operator|.
name|size
argument_list|()
operator|>
literal|0
condition|)
block|{
if|if
condition|(
name|multibody
operator|==
literal|null
condition|)
block|{
name|multibody
operator|=
operator|new
name|MimeMultipart
argument_list|(
literal|"mixed"
argument_list|)
expr_stmt|;
if|if
condition|(
name|body
operator|!=
literal|null
condition|)
block|{
name|multibody
operator|.
name|addBodyPart
argument_list|(
name|body
argument_list|)
expr_stmt|;
block|}
block|}
else|else
block|{
name|MimeMultipart
name|container
init|=
operator|new
name|MimeMultipart
argument_list|(
literal|"mixed"
argument_list|)
decl_stmt|;
name|MimeBodyPart
name|containerBody
init|=
operator|new
name|MimeBodyPart
argument_list|()
decl_stmt|;
name|containerBody
operator|.
name|setContent
argument_list|(
name|multibody
argument_list|)
expr_stmt|;
name|container
operator|.
name|addBodyPart
argument_list|(
name|containerBody
argument_list|)
expr_stmt|;
name|multibody
operator|=
name|container
expr_stmt|;
block|}
for|for
control|(
name|MimeBodyPart
name|part
range|:
name|attachments
control|)
block|{
name|multibody
operator|.
name|addBodyPart
argument_list|(
name|part
argument_list|)
expr_stmt|;
block|}
block|}
comment|// And now setting-up content
if|if
condition|(
name|multibody
operator|!=
literal|null
condition|)
block|{
name|msg
operator|.
name|setContent
argument_list|(
name|multibody
argument_list|)
expr_stmt|;
block|}
if|else if
condition|(
name|body
operator|!=
literal|null
condition|)
block|{
name|msg
operator|.
name|setText
argument_list|(
name|firstContent
argument_list|,
name|firstCharset
argument_list|,
name|firstContentType
argument_list|)
expr_stmt|;
if|if
condition|(
name|firstEncoding
operator|!=
literal|null
condition|)
block|{
name|msg
operator|.
name|setHeader
argument_list|(
literal|"Content-Transfer-Encoding"
argument_list|,
name|firstEncoding
argument_list|)
expr_stmt|;
block|}
block|}
name|msg
operator|.
name|saveChanges
argument_list|()
expr_stmt|;
name|mails
operator|.
name|add
argument_list|(
name|msg
argument_list|)
expr_stmt|;
block|}
block|}
return|return
name|mails
return|;
block|}
comment|/**      * Returns the current date and time in an RFC822 format, suitable for an email Date Header      *      * @return		RFC822 formated date and time as a String      */
specifier|private
name|String
name|getDateRFC822
parameter_list|()
block|{
name|String
name|dateString
init|=
operator|new
name|String
argument_list|()
decl_stmt|;
specifier|final
name|Calendar
name|rightNow
init|=
name|Calendar
operator|.
name|getInstance
argument_list|()
decl_stmt|;
comment|//Day of the week
switch|switch
condition|(
name|rightNow
operator|.
name|get
argument_list|(
name|Calendar
operator|.
name|DAY_OF_WEEK
argument_list|)
condition|)
block|{
case|case
name|Calendar
operator|.
name|MONDAY
case|:
name|dateString
operator|=
literal|"Mon"
expr_stmt|;
break|break;
case|case
name|Calendar
operator|.
name|TUESDAY
case|:
name|dateString
operator|=
literal|"Tue"
expr_stmt|;
break|break;
case|case
name|Calendar
operator|.
name|WEDNESDAY
case|:
name|dateString
operator|=
literal|"Wed"
expr_stmt|;
break|break;
case|case
name|Calendar
operator|.
name|THURSDAY
case|:
name|dateString
operator|=
literal|"Thu"
expr_stmt|;
break|break;
case|case
name|Calendar
operator|.
name|FRIDAY
case|:
name|dateString
operator|=
literal|"Fri"
expr_stmt|;
break|break;
case|case
name|Calendar
operator|.
name|SATURDAY
case|:
name|dateString
operator|=
literal|"Sat"
expr_stmt|;
break|break;
case|case
name|Calendar
operator|.
name|SUNDAY
case|:
name|dateString
operator|=
literal|"Sun"
expr_stmt|;
break|break;
block|}
name|dateString
operator|+=
literal|", "
expr_stmt|;
comment|//Date
name|dateString
operator|+=
name|rightNow
operator|.
name|get
argument_list|(
name|Calendar
operator|.
name|DAY_OF_MONTH
argument_list|)
expr_stmt|;
name|dateString
operator|+=
literal|" "
expr_stmt|;
comment|//Month
switch|switch
condition|(
name|rightNow
operator|.
name|get
argument_list|(
name|Calendar
operator|.
name|MONTH
argument_list|)
condition|)
block|{
case|case
name|Calendar
operator|.
name|JANUARY
case|:
name|dateString
operator|+=
literal|"Jan"
expr_stmt|;
break|break;
case|case
name|Calendar
operator|.
name|FEBRUARY
case|:
name|dateString
operator|+=
literal|"Feb"
expr_stmt|;
break|break;
case|case
name|Calendar
operator|.
name|MARCH
case|:
name|dateString
operator|+=
literal|"Mar"
expr_stmt|;
break|break;
case|case
name|Calendar
operator|.
name|APRIL
case|:
name|dateString
operator|+=
literal|"Apr"
expr_stmt|;
break|break;
case|case
name|Calendar
operator|.
name|MAY
case|:
name|dateString
operator|+=
literal|"May"
expr_stmt|;
break|break;
case|case
name|Calendar
operator|.
name|JUNE
case|:
name|dateString
operator|+=
literal|"Jun"
expr_stmt|;
break|break;
case|case
name|Calendar
operator|.
name|JULY
case|:
name|dateString
operator|+=
literal|"Jul"
expr_stmt|;
break|break;
case|case
name|Calendar
operator|.
name|AUGUST
case|:
name|dateString
operator|+=
literal|"Aug"
expr_stmt|;
break|break;
case|case
name|Calendar
operator|.
name|SEPTEMBER
case|:
name|dateString
operator|+=
literal|"Sep"
expr_stmt|;
break|break;
case|case
name|Calendar
operator|.
name|OCTOBER
case|:
name|dateString
operator|+=
literal|"Oct"
expr_stmt|;
break|break;
case|case
name|Calendar
operator|.
name|NOVEMBER
case|:
name|dateString
operator|+=
literal|"Nov"
expr_stmt|;
break|break;
case|case
name|Calendar
operator|.
name|DECEMBER
case|:
name|dateString
operator|+=
literal|"Dec"
expr_stmt|;
break|break;
block|}
name|dateString
operator|+=
literal|" "
expr_stmt|;
comment|//Year
name|dateString
operator|+=
name|rightNow
operator|.
name|get
argument_list|(
name|Calendar
operator|.
name|YEAR
argument_list|)
expr_stmt|;
name|dateString
operator|+=
literal|" "
expr_stmt|;
comment|//Time
name|String
name|tHour
init|=
name|Integer
operator|.
name|toString
argument_list|(
name|rightNow
operator|.
name|get
argument_list|(
name|Calendar
operator|.
name|HOUR_OF_DAY
argument_list|)
argument_list|)
decl_stmt|;
if|if
condition|(
name|tHour
operator|.
name|length
argument_list|()
operator|==
literal|1
condition|)
block|{
name|tHour
operator|=
literal|"0"
operator|+
name|tHour
expr_stmt|;
block|}
name|String
name|tMinute
init|=
name|Integer
operator|.
name|toString
argument_list|(
name|rightNow
operator|.
name|get
argument_list|(
name|Calendar
operator|.
name|MINUTE
argument_list|)
argument_list|)
decl_stmt|;
if|if
condition|(
name|tMinute
operator|.
name|length
argument_list|()
operator|==
literal|1
condition|)
block|{
name|tMinute
operator|=
literal|"0"
operator|+
name|tMinute
expr_stmt|;
block|}
name|String
name|tSecond
init|=
name|Integer
operator|.
name|toString
argument_list|(
name|rightNow
operator|.
name|get
argument_list|(
name|Calendar
operator|.
name|SECOND
argument_list|)
argument_list|)
decl_stmt|;
if|if
condition|(
name|tSecond
operator|.
name|length
argument_list|()
operator|==
literal|1
condition|)
block|{
name|tSecond
operator|=
literal|"0"
operator|+
name|tSecond
expr_stmt|;
block|}
name|dateString
operator|+=
name|tHour
operator|+
literal|":"
operator|+
name|tMinute
operator|+
literal|":"
operator|+
name|tSecond
operator|+
literal|" "
expr_stmt|;
comment|//TimeZone Correction
specifier|final
name|String
name|tzSign
decl_stmt|;
name|String
name|tzHours
init|=
operator|new
name|String
argument_list|()
decl_stmt|;
name|String
name|tzMinutes
init|=
operator|new
name|String
argument_list|()
decl_stmt|;
specifier|final
name|TimeZone
name|thisTZ
init|=
name|rightNow
operator|.
name|getTimeZone
argument_list|()
decl_stmt|;
name|int
name|tzOffset
init|=
name|thisTZ
operator|.
name|getOffset
argument_list|(
name|rightNow
operator|.
name|getTime
argument_list|()
operator|.
name|getTime
argument_list|()
argument_list|)
decl_stmt|;
comment|//get timezone offset in milliseconds
name|tzOffset
operator|=
operator|(
name|tzOffset
operator|/
literal|1000
operator|)
expr_stmt|;
comment|//convert to seconds
name|tzOffset
operator|=
operator|(
name|tzOffset
operator|/
literal|60
operator|)
expr_stmt|;
comment|//convert to minutes
comment|//Sign
if|if
condition|(
name|tzOffset
operator|>
literal|1
condition|)
block|{
name|tzSign
operator|=
literal|"+"
expr_stmt|;
block|}
else|else
block|{
name|tzSign
operator|=
literal|"-"
expr_stmt|;
name|tzOffset
operator|*=
operator|-
literal|1
expr_stmt|;
block|}
comment|//Calc Hours and Minutes?
if|if
condition|(
name|tzOffset
operator|>=
literal|60
condition|)
block|{
comment|//Minutes and Hours
name|tzHours
operator|+=
operator|(
name|tzOffset
operator|/
literal|60
operator|)
expr_stmt|;
comment|//hours
comment|// do we need to prepend a 0
if|if
condition|(
name|tzHours
operator|.
name|length
argument_list|()
operator|==
literal|1
condition|)
block|{
name|tzHours
operator|=
literal|"0"
operator|+
name|tzHours
expr_stmt|;
block|}
name|tzMinutes
operator|+=
operator|(
name|tzOffset
operator|%
literal|60
operator|)
expr_stmt|;
comment|//minutes
comment|// do we need to prepend a 0
if|if
condition|(
name|tzMinutes
operator|.
name|length
argument_list|()
operator|==
literal|1
condition|)
block|{
name|tzMinutes
operator|=
literal|"0"
operator|+
name|tzMinutes
expr_stmt|;
block|}
block|}
else|else
block|{
comment|//Just Minutes
name|tzHours
operator|=
literal|"00"
expr_stmt|;
name|tzMinutes
operator|+=
name|tzOffset
expr_stmt|;
comment|// do we need to prepend a 0
if|if
condition|(
name|tzMinutes
operator|.
name|length
argument_list|()
operator|==
literal|1
condition|)
block|{
name|tzMinutes
operator|=
literal|"0"
operator|+
name|tzMinutes
expr_stmt|;
block|}
block|}
name|dateString
operator|+=
name|tzSign
operator|+
name|tzHours
operator|+
name|tzMinutes
expr_stmt|;
return|return
name|dateString
return|;
block|}
comment|/**      * Base64 Encodes a string (used for message subject)      *      * @param str	The String to encode      * @return		The encoded String      */
specifier|private
name|String
name|encode64
parameter_list|(
name|String
name|str
parameter_list|)
throws|throws
name|java
operator|.
name|io
operator|.
name|UnsupportedEncodingException
block|{
name|Base64Encoder
name|enc
init|=
operator|new
name|Base64Encoder
argument_list|()
decl_stmt|;
name|enc
operator|.
name|translate
argument_list|(
name|str
operator|.
name|getBytes
argument_list|(
name|charset
argument_list|)
argument_list|)
expr_stmt|;
name|String
name|result
init|=
operator|new
name|String
argument_list|(
name|enc
operator|.
name|getCharArray
argument_list|()
argument_list|)
decl_stmt|;
name|result
operator|=
name|result
operator|.
name|replaceAll
argument_list|(
literal|"\n"
argument_list|,
literal|"?=\n =?"
operator|+
name|charset
operator|+
literal|"?B?"
argument_list|)
expr_stmt|;
name|result
operator|=
literal|"=?"
operator|+
name|charset
operator|+
literal|"?B?"
operator|+
name|result
operator|+
literal|"?="
expr_stmt|;
return|return
operator|(
name|result
operator|)
return|;
block|}
comment|/**      * Base64 Encodes an email address      *      * @param str	The email address as a String to encode      * @return		The encoded email address String      */
specifier|private
name|String
name|encode64Address
parameter_list|(
name|String
name|str
parameter_list|)
throws|throws
name|java
operator|.
name|io
operator|.
name|UnsupportedEncodingException
block|{
name|String
name|result
decl_stmt|;
name|int
name|idx
init|=
name|str
operator|.
name|indexOf
argument_list|(
literal|"<"
argument_list|)
decl_stmt|;
if|if
condition|(
name|idx
operator|!=
operator|-
literal|1
condition|)
block|{
name|result
operator|=
name|encode64
argument_list|(
name|str
operator|.
name|substring
argument_list|(
literal|0
argument_list|,
name|idx
argument_list|)
argument_list|)
operator|+
literal|" "
operator|+
name|str
operator|.
name|substring
argument_list|(
name|idx
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|result
operator|=
name|str
expr_stmt|;
block|}
return|return
operator|(
name|result
operator|)
return|;
block|}
comment|/**      * A simple data class to represent an email      * attachment. Just has private      * members and some get methods.      *      * @version 1.2      */
specifier|private
specifier|static
class|class
name|MailAttachment
block|{
specifier|private
name|String
name|filename
decl_stmt|;
specifier|private
name|String
name|mimeType
decl_stmt|;
specifier|private
name|String
name|data
decl_stmt|;
specifier|public
name|MailAttachment
parameter_list|(
name|String
name|filename
parameter_list|,
name|String
name|mimeType
parameter_list|,
name|String
name|data
parameter_list|)
block|{
name|this
operator|.
name|filename
operator|=
name|filename
expr_stmt|;
name|this
operator|.
name|mimeType
operator|=
name|mimeType
expr_stmt|;
name|this
operator|.
name|data
operator|=
name|data
expr_stmt|;
block|}
specifier|public
name|String
name|getData
parameter_list|()
block|{
return|return
name|data
return|;
block|}
specifier|public
name|String
name|getFilename
parameter_list|()
block|{
return|return
name|filename
return|;
block|}
specifier|public
name|String
name|getMimeType
parameter_list|()
block|{
return|return
name|mimeType
return|;
block|}
block|}
comment|/**      * A simple data class to represent an email      * doesnt do anything fancy just has private      * members and get and set methods      *      * @version 1.2      */
specifier|private
specifier|static
class|class
name|Mail
block|{
specifier|private
name|String
name|from
init|=
literal|""
decl_stmt|;
comment|//Who is the mail from
specifier|private
name|String
name|replyTo
init|=
literal|null
decl_stmt|;
comment|//Who should you reply to
specifier|private
specifier|final
name|List
argument_list|<
name|String
argument_list|>
name|to
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
comment|//Who is the mail going to
specifier|private
specifier|final
name|List
argument_list|<
name|String
argument_list|>
name|cc
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
comment|//Carbon Copy to
specifier|private
specifier|final
name|List
argument_list|<
name|String
argument_list|>
name|bcc
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
comment|//Blind Carbon Copy to
specifier|private
name|String
name|subject
init|=
literal|""
decl_stmt|;
comment|//Subject of the mail
specifier|private
name|String
name|text
init|=
literal|""
decl_stmt|;
comment|//Body text of the mail
specifier|private
name|String
name|xhtml
init|=
literal|""
decl_stmt|;
comment|//Body XHTML of the mail
specifier|private
specifier|final
name|List
argument_list|<
name|MailAttachment
argument_list|>
name|attachment
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
comment|//Any attachments
comment|//From
specifier|public
name|void
name|setFrom
parameter_list|(
name|String
name|from
parameter_list|)
block|{
name|this
operator|.
name|from
operator|=
name|from
expr_stmt|;
block|}
specifier|public
name|String
name|getFrom
parameter_list|()
block|{
return|return
operator|(
name|this
operator|.
name|from
operator|)
return|;
block|}
comment|//reply-to
specifier|public
name|void
name|setReplyTo
parameter_list|(
name|String
name|replyTo
parameter_list|)
block|{
name|this
operator|.
name|replyTo
operator|=
name|replyTo
expr_stmt|;
block|}
specifier|public
name|String
name|getReplyTo
parameter_list|()
block|{
return|return
name|replyTo
return|;
block|}
comment|//To
specifier|public
name|void
name|addTo
parameter_list|(
name|String
name|to
parameter_list|)
block|{
name|this
operator|.
name|to
operator|.
name|add
argument_list|(
name|to
argument_list|)
expr_stmt|;
block|}
specifier|public
name|int
name|countTo
parameter_list|()
block|{
return|return
operator|(
name|to
operator|.
name|size
argument_list|()
operator|)
return|;
block|}
specifier|public
name|String
name|getTo
parameter_list|(
name|int
name|index
parameter_list|)
block|{
return|return
name|to
operator|.
name|get
argument_list|(
name|index
argument_list|)
return|;
block|}
specifier|public
name|List
argument_list|<
name|String
argument_list|>
name|getTo
parameter_list|()
block|{
return|return
operator|(
name|to
operator|)
return|;
block|}
comment|//CC
specifier|public
name|void
name|addCC
parameter_list|(
name|String
name|cc
parameter_list|)
block|{
name|this
operator|.
name|cc
operator|.
name|add
argument_list|(
name|cc
argument_list|)
expr_stmt|;
block|}
specifier|public
name|int
name|countCC
parameter_list|()
block|{
return|return
operator|(
name|cc
operator|.
name|size
argument_list|()
operator|)
return|;
block|}
specifier|public
name|String
name|getCC
parameter_list|(
name|int
name|index
parameter_list|)
block|{
return|return
name|cc
operator|.
name|get
argument_list|(
name|index
argument_list|)
return|;
block|}
specifier|public
name|List
argument_list|<
name|String
argument_list|>
name|getCC
parameter_list|()
block|{
return|return
operator|(
name|cc
operator|)
return|;
block|}
comment|//BCC
specifier|public
name|void
name|addBCC
parameter_list|(
name|String
name|bcc
parameter_list|)
block|{
name|this
operator|.
name|bcc
operator|.
name|add
argument_list|(
name|bcc
argument_list|)
expr_stmt|;
block|}
specifier|public
name|int
name|countBCC
parameter_list|()
block|{
return|return
name|bcc
operator|.
name|size
argument_list|()
return|;
block|}
specifier|public
name|String
name|getBCC
parameter_list|(
name|int
name|index
parameter_list|)
block|{
return|return
name|bcc
operator|.
name|get
argument_list|(
name|index
argument_list|)
return|;
block|}
specifier|public
name|List
argument_list|<
name|String
argument_list|>
name|getBCC
parameter_list|()
block|{
return|return
operator|(
name|bcc
operator|)
return|;
block|}
comment|//Subject
specifier|public
name|void
name|setSubject
parameter_list|(
name|String
name|subject
parameter_list|)
block|{
name|this
operator|.
name|subject
operator|=
name|subject
expr_stmt|;
block|}
specifier|public
name|String
name|getSubject
parameter_list|()
block|{
return|return
name|subject
return|;
block|}
comment|//text
specifier|public
name|void
name|setText
parameter_list|(
name|String
name|text
parameter_list|)
block|{
name|this
operator|.
name|text
operator|=
name|text
expr_stmt|;
block|}
specifier|public
name|String
name|getText
parameter_list|()
block|{
return|return
name|text
return|;
block|}
comment|//xhtml
specifier|public
name|void
name|setXHTML
parameter_list|(
name|String
name|xhtml
parameter_list|)
block|{
name|this
operator|.
name|xhtml
operator|=
name|xhtml
expr_stmt|;
block|}
specifier|public
name|String
name|getXHTML
parameter_list|()
block|{
return|return
name|xhtml
return|;
block|}
specifier|public
name|void
name|addAttachment
parameter_list|(
name|MailAttachment
name|ma
parameter_list|)
block|{
name|attachment
operator|.
name|add
argument_list|(
name|ma
argument_list|)
expr_stmt|;
block|}
specifier|public
name|Iterator
argument_list|<
name|MailAttachment
argument_list|>
name|attachmentIterator
parameter_list|()
block|{
return|return
name|attachment
operator|.
name|iterator
argument_list|()
return|;
block|}
block|}
block|}
end_class

end_unit

