begin_unit|revision:1.0.0;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  *  eXist Apache FOP Transformation Extension  *  Copyright (C) 2007 Craig Goodyer at the University of the West of England  *    *  This program is free software; you can redistribute it and/or  *  modify it under the terms of the GNU Lesser General Public License  *  as published by the Free Software Foundation; either version 2  *  of the License, or (at your option) any later version.  *    *  This program is distributed in the hope that it will be useful,  *  but WITHOUT ANY WARRANTY; without even the implied warranty of  *  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the  *  GNU Lesser General Public License for more details.  *    *  You should have received a copy of the GNU Lesser General Public License  *  along with this program; if not, write to the Free Software  *  Foundation, Inc., 675 Mass Ave, Cambridge, MA 02139, USA.  *    *  $Id$  */
end_comment

begin_package
package|package
name|org
operator|.
name|exist
operator|.
name|xquery
operator|.
name|modules
operator|.
name|xslfo
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|ByteArrayOutputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Enumeration
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Properties
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|xml
operator|.
name|transform
operator|.
name|Transformer
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|xml
operator|.
name|transform
operator|.
name|TransformerException
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|xml
operator|.
name|transform
operator|.
name|sax
operator|.
name|TransformerHandler
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|fop
operator|.
name|apps
operator|.
name|Fop
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|fop
operator|.
name|apps
operator|.
name|FOUserAgent
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|dom
operator|.
name|QName
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|xquery
operator|.
name|BasicFunction
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|xquery
operator|.
name|Cardinality
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|xquery
operator|.
name|FunctionSignature
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|xquery
operator|.
name|XPathException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|xquery
operator|.
name|XQueryContext
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|xquery
operator|.
name|value
operator|.
name|Base64Binary
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|xquery
operator|.
name|value
operator|.
name|Item
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|xquery
operator|.
name|value
operator|.
name|NodeValue
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|xquery
operator|.
name|value
operator|.
name|Sequence
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|xquery
operator|.
name|value
operator|.
name|SequenceType
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|xquery
operator|.
name|value
operator|.
name|Type
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|xslt
operator|.
name|TransformerFactoryAllocator
import|;
end_import

begin_import
import|import
name|org
operator|.
name|w3c
operator|.
name|dom
operator|.
name|Element
import|;
end_import

begin_import
import|import
name|org
operator|.
name|w3c
operator|.
name|dom
operator|.
name|Node
import|;
end_import

begin_import
import|import
name|org
operator|.
name|w3c
operator|.
name|dom
operator|.
name|NodeList
import|;
end_import

begin_import
import|import
name|org
operator|.
name|xml
operator|.
name|sax
operator|.
name|SAXException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|xml
operator|.
name|sax
operator|.
name|helpers
operator|.
name|DefaultHandler
import|;
end_import

begin_comment
comment|/**  * @author Craig Goodyer<craiggoodyer@gmail.com>  * @author Adam Retter<adam.retter@devon.gov.uk>  */
end_comment

begin_class
specifier|public
class|class
name|RenderFunction
extends|extends
name|BasicFunction
block|{
specifier|public
specifier|final
specifier|static
name|FunctionSignature
name|signature
init|=
operator|new
name|FunctionSignature
argument_list|(
operator|new
name|QName
argument_list|(
literal|"render"
argument_list|,
name|XSLFOModule
operator|.
name|NAMESPACE_URI
argument_list|,
name|XSLFOModule
operator|.
name|PREFIX
argument_list|)
argument_list|,
literal|"Renders a given XSL-FO document. $a is the XSL-FO node, $b is the required mime-type, $c is parameters to the transformation. "
operator|+
literal|"Returns an xs:base64binary of the result."
operator|+
literal|"Parameters are specified with the structure: "
operator|+
literal|"<parameters><param name=\"param-name1\" value=\"param-value1\"/>"
operator|+
literal|"</parameters>. "
operator|+
literal|"Recognised rendering parameters are: author, title."
argument_list|,
operator|new
name|SequenceType
index|[]
block|{
operator|new
name|SequenceType
argument_list|(
name|Type
operator|.
name|NODE
argument_list|,
name|Cardinality
operator|.
name|EXACTLY_ONE
argument_list|)
block|,
operator|new
name|SequenceType
argument_list|(
name|Type
operator|.
name|STRING
argument_list|,
name|Cardinality
operator|.
name|EXACTLY_ONE
argument_list|)
block|,
operator|new
name|SequenceType
argument_list|(
name|Type
operator|.
name|NODE
argument_list|,
name|Cardinality
operator|.
name|ZERO_OR_ONE
argument_list|)
block|}
argument_list|,
operator|new
name|SequenceType
argument_list|(
name|Type
operator|.
name|BASE64_BINARY
argument_list|,
name|Cardinality
operator|.
name|ZERO_OR_ONE
argument_list|)
argument_list|)
decl_stmt|;
comment|/** 	 * Constructor for RenderFunction, which returns a new instance of this class. 	 *  	 * @param context 	 * @param signature 	 */
specifier|public
name|RenderFunction
parameter_list|(
name|XQueryContext
name|context
parameter_list|,
name|FunctionSignature
name|signature
parameter_list|)
block|{
name|super
argument_list|(
name|context
argument_list|,
name|signature
argument_list|)
expr_stmt|;
block|}
comment|/* 	 * Actual implementation of the rendering process. When a 	 * function in this module is called, this method is executed with the given 	 * inputs. @param Sequence[] args (XSL-FO, mime-type, parameters) @param 	 * Sequence contextSequence (default sequence) 	 *  	 * @see org.exist.xquery.BasicFunction#eval(org.exist.xquery.value.Sequence[], org.exist.xquery.value.Sequence) 	 */
specifier|public
name|Sequence
name|eval
parameter_list|(
name|Sequence
index|[]
name|args
parameter_list|,
name|Sequence
name|contextSequence
parameter_list|)
throws|throws
name|XPathException
block|{
comment|// gather input XSL-FO document
comment|// if no input document (empty), return empty result as we need data to process
if|if
condition|(
name|args
index|[
literal|0
index|]
operator|.
name|isEmpty
argument_list|()
condition|)
return|return
name|Sequence
operator|.
name|EMPTY_SEQUENCE
return|;
name|Item
name|inputNode
init|=
name|args
index|[
literal|0
index|]
operator|.
name|itemAt
argument_list|(
literal|0
argument_list|)
decl_stmt|;
comment|//get mime-type
name|String
name|mimeType
init|=
name|args
index|[
literal|1
index|]
operator|.
name|getStringValue
argument_list|()
decl_stmt|;
comment|// get parameters
name|Properties
name|parameters
init|=
operator|new
name|Properties
argument_list|()
decl_stmt|;
if|if
condition|(
operator|!
name|args
index|[
literal|2
index|]
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|parameters
operator|=
name|parseParameters
argument_list|(
operator|(
operator|(
name|NodeValue
operator|)
name|args
index|[
literal|2
index|]
operator|.
name|itemAt
argument_list|(
literal|0
argument_list|)
operator|)
operator|.
name|getNode
argument_list|()
argument_list|)
expr_stmt|;
block|}
try|try
block|{
comment|// setup a transformer handler
name|TransformerHandler
name|handler
init|=
name|TransformerFactoryAllocator
operator|.
name|getTransformerFactory
argument_list|(
name|context
operator|.
name|getBroker
argument_list|()
argument_list|)
operator|.
name|newTransformerHandler
argument_list|()
decl_stmt|;
name|Transformer
name|transformer
init|=
name|handler
operator|.
name|getTransformer
argument_list|()
decl_stmt|;
comment|//set the parameters if any
if|if
condition|(
name|parameters
operator|.
name|size
argument_list|()
operator|>
literal|0
condition|)
block|{
name|Enumeration
name|keys
init|=
name|parameters
operator|.
name|keys
argument_list|()
decl_stmt|;
while|while
condition|(
name|keys
operator|.
name|hasMoreElements
argument_list|()
condition|)
block|{
name|String
name|name
init|=
operator|(
name|String
operator|)
name|keys
operator|.
name|nextElement
argument_list|()
decl_stmt|;
name|String
name|value
init|=
name|parameters
operator|.
name|getProperty
argument_list|(
name|name
argument_list|)
decl_stmt|;
name|transformer
operator|.
name|setParameter
argument_list|(
name|name
argument_list|,
name|value
argument_list|)
expr_stmt|;
block|}
block|}
comment|// setup the foUserAgent, using given parameters held in the transformer handler
name|FOUserAgent
name|foUserAgent
init|=
name|setupFOUserAgent
argument_list|(
name|parameters
argument_list|,
name|transformer
argument_list|)
decl_stmt|;
name|ByteArrayOutputStream
name|baos
init|=
operator|new
name|ByteArrayOutputStream
argument_list|()
decl_stmt|;
comment|// create new instance of FOP using the mimetype, the created user agent, and the output stream
name|Fop
name|fop
init|=
name|XSLFOModule
operator|.
name|getFopFactory
argument_list|()
operator|.
name|newFop
argument_list|(
name|mimeType
argument_list|,
name|foUserAgent
argument_list|,
name|baos
argument_list|)
decl_stmt|;
comment|// Obtain FOP's DefaultHandler
name|DefaultHandler
name|dh
init|=
name|fop
operator|.
name|getDefaultHandler
argument_list|()
decl_stmt|;
comment|//process the XSL-FO
name|dh
operator|.
name|startDocument
argument_list|()
expr_stmt|;
name|inputNode
operator|.
name|toSAX
argument_list|(
name|context
operator|.
name|getBroker
argument_list|()
argument_list|,
name|dh
argument_list|,
operator|new
name|Properties
argument_list|()
argument_list|)
expr_stmt|;
name|dh
operator|.
name|endDocument
argument_list|()
expr_stmt|;
comment|//return the result
return|return
operator|new
name|Base64Binary
argument_list|(
name|baos
operator|.
name|toByteArray
argument_list|()
argument_list|)
return|;
block|}
catch|catch
parameter_list|(
name|TransformerException
name|te
parameter_list|)
block|{
throw|throw
operator|new
name|XPathException
argument_list|(
name|te
argument_list|)
throw|;
block|}
catch|catch
parameter_list|(
name|SAXException
name|se
parameter_list|)
block|{
throw|throw
operator|new
name|XPathException
argument_list|(
name|se
argument_list|)
throw|;
block|}
block|}
comment|/** 	 * Parses a structiure like<parameters><param name="a" value="1"/><param name="b" value="2"/></parameters> 	 * into a set of Properties 	 *  	 * @param parameters The parameters Node 	 * @return a set of name value properties for representing the parameters 	 */
specifier|private
name|Properties
name|parseParameters
parameter_list|(
name|Node
name|parameters
parameter_list|)
throws|throws
name|XPathException
block|{
name|Properties
name|properties
init|=
operator|new
name|Properties
argument_list|()
decl_stmt|;
if|if
condition|(
name|parameters
operator|!=
literal|null
operator|&&
name|parameters
operator|.
name|getNodeType
argument_list|()
operator|==
name|Node
operator|.
name|ELEMENT_NODE
operator|&&
name|parameters
operator|.
name|getLocalName
argument_list|()
operator|.
name|equals
argument_list|(
literal|"parameters"
argument_list|)
condition|)
block|{
name|NodeList
name|params
init|=
operator|(
operator|(
name|Element
operator|)
name|parameters
operator|)
operator|.
name|getElementsByTagName
argument_list|(
literal|"param"
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|params
operator|.
name|getLength
argument_list|()
condition|;
name|i
operator|++
control|)
block|{
name|Element
name|param
init|=
operator|(
operator|(
name|Element
operator|)
name|params
operator|.
name|item
argument_list|(
name|i
argument_list|)
operator|)
decl_stmt|;
name|String
name|name
init|=
name|param
operator|.
name|getAttribute
argument_list|(
literal|"name"
argument_list|)
decl_stmt|;
name|String
name|value
init|=
name|param
operator|.
name|getAttribute
argument_list|(
literal|"value"
argument_list|)
decl_stmt|;
if|if
condition|(
name|name
operator|!=
literal|null
operator|&&
name|value
operator|!=
literal|null
condition|)
block|{
name|properties
operator|.
name|setProperty
argument_list|(
name|name
argument_list|,
name|value
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|LOG
operator|.
name|warn
argument_list|(
literal|"Name or value attribute missing for stylesheet parameter"
argument_list|)
expr_stmt|;
block|}
block|}
block|}
return|return
name|properties
return|;
block|}
comment|/** 	 * Setup the UserAgent for FOP, from given parameters * 	 *  	 * @param transformer Created based on the XSLT, so containing any parameters to the XSL-FO specified in the XQuery 	 * @param parameters any user defined parameters to the XSL-FO process 	 * @return FOUserAgent The generated FOUserAgent to include any parameters passed in 	 */
specifier|private
name|FOUserAgent
name|setupFOUserAgent
parameter_list|(
name|Properties
name|parameters
parameter_list|,
name|Transformer
name|transformer
parameter_list|)
throws|throws
name|TransformerException
block|{
comment|// create an FOUserAgent from Modules FopFactory
name|FOUserAgent
name|foUserAgent
init|=
name|XSLFOModule
operator|.
name|getFopFactory
argument_list|()
operator|.
name|newFOUserAgent
argument_list|()
decl_stmt|;
comment|// setup the foUserAgent as per the parameters given
name|foUserAgent
operator|.
name|setProducer
argument_list|(
literal|"eXist with Apache FOP"
argument_list|)
expr_stmt|;
if|if
condition|(
name|transformer
operator|.
name|getParameter
argument_list|(
literal|"FOPauthor"
argument_list|)
operator|!=
literal|null
condition|)
name|foUserAgent
operator|.
name|setAuthor
argument_list|(
name|parameters
operator|.
name|getProperty
argument_list|(
literal|"author"
argument_list|)
argument_list|)
expr_stmt|;
if|if
condition|(
name|transformer
operator|.
name|getParameter
argument_list|(
literal|"FOPtitle"
argument_list|)
operator|!=
literal|null
condition|)
name|foUserAgent
operator|.
name|setTitle
argument_list|(
name|parameters
operator|.
name|getProperty
argument_list|(
literal|"title"
argument_list|)
argument_list|)
expr_stmt|;
if|if
condition|(
name|transformer
operator|.
name|getParameter
argument_list|(
literal|"FOPdpi"
argument_list|)
operator|!=
literal|null
condition|)
block|{
name|String
name|dpiStr
init|=
operator|(
name|String
operator|)
name|transformer
operator|.
name|getParameter
argument_list|(
literal|"dpi"
argument_list|)
decl_stmt|;
try|try
block|{
name|foUserAgent
operator|.
name|setTargetResolution
argument_list|(
name|Integer
operator|.
name|parseInt
argument_list|(
name|dpiStr
argument_list|)
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|NumberFormatException
name|nfe
parameter_list|)
block|{
throw|throw
operator|new
name|TransformerException
argument_list|(
literal|"Cannot parse value of \"dpi\" - "
operator|+
name|dpiStr
operator|+
literal|" to configure FOUserAgent"
argument_list|)
throw|;
block|}
block|}
return|return
name|foUserAgent
return|;
block|}
block|}
end_class

end_unit

