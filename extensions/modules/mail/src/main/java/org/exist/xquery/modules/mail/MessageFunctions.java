begin_unit|revision:1.0.0;language:Java;cregit-version:0.0.1
begin_package
package|package
name|org
operator|.
name|exist
operator|.
name|xquery
operator|.
name|modules
operator|.
name|mail
package|;
end_package

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|dom
operator|.
name|memtree
operator|.
name|MemTreeBuilder
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|dom
operator|.
name|memtree
operator|.
name|ElementImpl
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|dom
operator|.
name|memtree
operator|.
name|DocumentBuilderReceiver
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|dom
operator|.
name|memtree
operator|.
name|DocumentImpl
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|*
import|;
end_import

begin_import
import|import
name|java
operator|.
name|text
operator|.
name|SimpleDateFormat
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Date
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Enumeration
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|regex
operator|.
name|Pattern
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|activation
operator|.
name|MimeType
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|activation
operator|.
name|MimeTypeParameterList
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|activation
operator|.
name|MimeTypeParseException
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|mail
operator|.
name|*
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|mail
operator|.
name|internet
operator|.
name|InternetAddress
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|mail
operator|.
name|internet
operator|.
name|MimeBodyPart
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|xml
operator|.
name|transform
operator|.
name|stream
operator|.
name|StreamSource
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|logging
operator|.
name|log4j
operator|.
name|LogManager
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|logging
operator|.
name|log4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|dom
operator|.
name|QName
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|xquery
operator|.
name|BasicFunction
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|xquery
operator|.
name|Cardinality
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|xquery
operator|.
name|FunctionSignature
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|xquery
operator|.
name|XPathException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|xquery
operator|.
name|XQueryContext
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|xquery
operator|.
name|modules
operator|.
name|ModuleUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|xquery
operator|.
name|value
operator|.
name|*
import|;
end_import

begin_import
import|import
name|org
operator|.
name|xml
operator|.
name|sax
operator|.
name|SAXException
import|;
end_import

begin_comment
comment|/**  * Modified by alisterpillow on 19/08/2014.  * Get a mail message  *  * @author Andrzej Taramina<andrzej@chaeron.com>  * @serial 2009-03-12  * @version 1.3  *  * @see org.exist.xquery.BasicFunction#BasicFunction(org.exist.xquery.XQueryContext, org.exist.xquery.FunctionSignature)  */
end_comment

begin_class
specifier|public
class|class
name|MessageFunctions
extends|extends
name|BasicFunction
block|{
specifier|protected
specifier|static
specifier|final
name|Logger
name|logger
init|=
name|LogManager
operator|.
name|getLogger
argument_list|(
name|MessageListFunctions
operator|.
name|class
argument_list|)
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|String
name|DATE_FORMAT
init|=
literal|"yyyy-MM-dd'T'HH:mm:ss.SSSZ"
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|Pattern
name|CONTENT_TYPE_RE
init|=
name|Pattern
operator|.
name|compile
argument_list|(
literal|";\\s*boundary(.*)$"
argument_list|)
decl_stmt|;
comment|// Remove unnecessary boundary= from content-type
specifier|public
specifier|final
specifier|static
name|FunctionSignature
name|signatures
index|[]
init|=
block|{
operator|new
name|FunctionSignature
argument_list|(
operator|new
name|QName
argument_list|(
literal|"get-messages"
argument_list|,
name|MailModule
operator|.
name|NAMESPACE_URI
argument_list|,
name|MailModule
operator|.
name|PREFIX
argument_list|)
argument_list|,
literal|"Returns a sequence of emails as XML.  If there are no messages-numbers in the list, an empty sequence will be returned. Please see get_messages_example.xql."
argument_list|,
operator|new
name|SequenceType
index|[]
block|{
operator|new
name|FunctionParameterSequenceType
argument_list|(
literal|"message-list-handle"
argument_list|,
name|Type
operator|.
name|INTEGER
argument_list|,
name|Cardinality
operator|.
name|EXACTLY_ONE
argument_list|,
literal|"The message list handle retrieved from mail:get-message-list() or mail:search-message-list()"
argument_list|)
block|,
operator|new
name|FunctionParameterSequenceType
argument_list|(
literal|"message-numbers"
argument_list|,
name|Type
operator|.
name|INTEGER
argument_list|,
name|Cardinality
operator|.
name|ZERO_OR_MORE
argument_list|,
literal|"The messages to retrieve using the numbers from the message-list '//mail:message/@number' "
argument_list|)
block|}
argument_list|,
operator|new
name|FunctionReturnSequenceType
argument_list|(
name|Type
operator|.
name|ELEMENT
argument_list|,
name|Cardinality
operator|.
name|ZERO_OR_ONE
argument_list|,
literal|"the chosen messages as XML mail:messages/mail:message"
argument_list|)
argument_list|)
block|}
decl_stmt|;
specifier|public
name|MessageFunctions
parameter_list|(
name|XQueryContext
name|context
parameter_list|,
name|FunctionSignature
name|signature
parameter_list|)
block|{
name|super
argument_list|(
name|context
argument_list|,
name|signature
argument_list|)
expr_stmt|;
block|}
comment|/**      * evaluate the call to the xquery get-message function,      * it is really the main entry point of this class      *      * @param args            arguments from the get-message-list() function call      * @param contextSequence the Context Sequence to operate on (not used here internally!)      * @return A sequence representing the result of the get-message-list() function call      * @see org.exist.xquery.BasicFunction#eval(org.exist.xquery.value.Sequence[], org.exist.xquery.value.Sequence)      */
specifier|public
name|Sequence
name|eval
parameter_list|(
name|Sequence
index|[]
name|args
parameter_list|,
name|Sequence
name|contextSequence
parameter_list|)
throws|throws
name|XPathException
block|{
if|if
condition|(
name|isCalledAs
argument_list|(
literal|"get-messages"
argument_list|)
condition|)
block|{
return|return
name|getMessages
argument_list|(
name|args
argument_list|,
name|contextSequence
argument_list|)
return|;
block|}
throw|throw
operator|(
operator|new
name|XPathException
argument_list|(
name|this
argument_list|,
literal|"Invalid function name"
argument_list|)
operator|)
throw|;
block|}
specifier|private
name|Sequence
name|getMessages
parameter_list|(
name|Sequence
index|[]
name|args
parameter_list|,
name|Sequence
name|contextSequence
parameter_list|)
throws|throws
name|XPathException
block|{
name|Sequence
name|ret
init|=
name|Sequence
operator|.
name|EMPTY_SEQUENCE
decl_stmt|;
comment|// was a folder handle specified?
if|if
condition|(
name|args
index|[
literal|0
index|]
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
throw|throw
operator|(
operator|new
name|XPathException
argument_list|(
name|this
argument_list|,
literal|"Mail folder handle not specified"
argument_list|)
operator|)
throw|;
block|}
comment|// get the Folder
name|long
name|folderHandle
init|=
operator|(
operator|(
name|IntegerValue
operator|)
name|args
index|[
literal|0
index|]
operator|.
name|itemAt
argument_list|(
literal|0
argument_list|)
operator|)
operator|.
name|getLong
argument_list|()
decl_stmt|;
name|Folder
name|folder
init|=
name|MailModule
operator|.
name|retrieveFolder
argument_list|(
name|context
argument_list|,
name|folderHandle
argument_list|)
decl_stmt|;
if|if
condition|(
name|folder
operator|==
literal|null
condition|)
block|{
throw|throw
operator|(
operator|new
name|XPathException
argument_list|(
name|this
argument_list|,
literal|"Invalid Folder handle specified"
argument_list|)
operator|)
throw|;
block|}
if|if
condition|(
name|args
index|[
literal|1
index|]
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
comment|// expecting a sequence of message numbers
return|return
name|ret
return|;
comment|// no messages requested
block|}
name|MemTreeBuilder
name|builder
init|=
name|context
operator|.
name|getDocumentBuilder
argument_list|()
decl_stmt|;
name|builder
operator|.
name|startDocument
argument_list|()
expr_stmt|;
name|builder
operator|.
name|startElement
argument_list|(
operator|new
name|QName
argument_list|(
literal|"messages"
argument_list|,
name|MailModule
operator|.
name|NAMESPACE_URI
argument_list|,
name|MailModule
operator|.
name|PREFIX
argument_list|)
argument_list|,
literal|null
argument_list|)
expr_stmt|;
try|try
block|{
name|int
name|counter
init|=
name|args
index|[
literal|1
index|]
operator|.
name|getItemCount
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|counter
condition|;
name|i
operator|++
control|)
block|{
name|Message
name|message
init|=
literal|null
decl_stmt|;
name|int
name|msgNum
init|=
operator|(
operator|(
name|IntegerValue
operator|)
name|args
index|[
literal|1
index|]
operator|.
name|itemAt
argument_list|(
name|i
argument_list|)
operator|)
operator|.
name|getInt
argument_list|()
decl_stmt|;
try|try
block|{
name|message
operator|=
name|folder
operator|.
name|getMessage
argument_list|(
name|msgNum
argument_list|)
expr_stmt|;
comment|// get the requested message number
block|}
catch|catch
parameter_list|(
name|IndexOutOfBoundsException
name|iex
parameter_list|)
block|{
name|logger
operator|.
name|info
argument_list|(
literal|"There is no message number "
operator|+
name|msgNum
argument_list|)
expr_stmt|;
continue|continue;
block|}
name|builder
operator|.
name|startElement
argument_list|(
operator|new
name|QName
argument_list|(
literal|"message"
argument_list|,
name|MailModule
operator|.
name|NAMESPACE_URI
argument_list|,
name|MailModule
operator|.
name|PREFIX
argument_list|)
argument_list|,
literal|null
argument_list|)
expr_stmt|;
name|builder
operator|.
name|addAttribute
argument_list|(
operator|new
name|QName
argument_list|(
literal|"number"
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|)
argument_list|,
name|String
operator|.
name|valueOf
argument_list|(
name|message
operator|.
name|getMessageNumber
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|String
name|contentType
init|=
name|message
operator|.
name|getContentType
argument_list|()
decl_stmt|;
name|mimeParamsToAttributes
argument_list|(
name|builder
argument_list|,
name|contentType
argument_list|)
expr_stmt|;
comment|// Subject
name|builder
operator|.
name|startElement
argument_list|(
operator|new
name|QName
argument_list|(
literal|"subject"
argument_list|,
name|MailModule
operator|.
name|NAMESPACE_URI
argument_list|,
name|MailModule
operator|.
name|PREFIX
argument_list|)
argument_list|,
literal|null
argument_list|)
expr_stmt|;
name|builder
operator|.
name|characters
argument_list|(
name|message
operator|.
name|getSubject
argument_list|()
argument_list|)
expr_stmt|;
name|builder
operator|.
name|endElement
argument_list|()
expr_stmt|;
comment|// Sent Date
if|if
condition|(
name|message
operator|.
name|getSentDate
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|builder
operator|.
name|startElement
argument_list|(
operator|new
name|QName
argument_list|(
literal|"sent"
argument_list|,
name|MailModule
operator|.
name|NAMESPACE_URI
argument_list|,
name|MailModule
operator|.
name|PREFIX
argument_list|)
argument_list|,
literal|null
argument_list|)
expr_stmt|;
name|builder
operator|.
name|characters
argument_list|(
name|formatDate
argument_list|(
name|message
operator|.
name|getSentDate
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|builder
operator|.
name|endElement
argument_list|()
expr_stmt|;
block|}
comment|// Received Date
if|if
condition|(
name|message
operator|.
name|getReceivedDate
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|builder
operator|.
name|startElement
argument_list|(
operator|new
name|QName
argument_list|(
literal|"received"
argument_list|,
name|MailModule
operator|.
name|NAMESPACE_URI
argument_list|,
name|MailModule
operator|.
name|PREFIX
argument_list|)
argument_list|,
literal|null
argument_list|)
expr_stmt|;
name|builder
operator|.
name|characters
argument_list|(
name|formatDate
argument_list|(
name|message
operator|.
name|getReceivedDate
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|builder
operator|.
name|endElement
argument_list|()
expr_stmt|;
block|}
comment|// From
if|if
condition|(
name|message
operator|.
name|getFrom
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|addAddress
argument_list|(
name|builder
argument_list|,
literal|"from"
argument_list|,
literal|null
argument_list|,
name|message
operator|.
name|getFrom
argument_list|()
index|[
literal|0
index|]
argument_list|)
expr_stmt|;
block|}
comment|// Recipients
name|builder
operator|.
name|startElement
argument_list|(
operator|new
name|QName
argument_list|(
literal|"recipients"
argument_list|,
name|MailModule
operator|.
name|NAMESPACE_URI
argument_list|,
name|MailModule
operator|.
name|PREFIX
argument_list|)
argument_list|,
literal|null
argument_list|)
expr_stmt|;
comment|// To Recipients
name|Address
index|[]
name|toAddresses
init|=
name|message
operator|.
name|getRecipients
argument_list|(
name|Message
operator|.
name|RecipientType
operator|.
name|TO
argument_list|)
decl_stmt|;
if|if
condition|(
name|toAddresses
operator|!=
literal|null
condition|)
block|{
for|for
control|(
name|Address
name|to
range|:
name|toAddresses
control|)
block|{
name|addAddress
argument_list|(
name|builder
argument_list|,
literal|"recipient"
argument_list|,
literal|"to"
argument_list|,
name|to
argument_list|)
expr_stmt|;
block|}
block|}
comment|// cc Recipients
name|Address
index|[]
name|ccAddresses
init|=
name|message
operator|.
name|getRecipients
argument_list|(
name|Message
operator|.
name|RecipientType
operator|.
name|CC
argument_list|)
decl_stmt|;
if|if
condition|(
name|ccAddresses
operator|!=
literal|null
condition|)
block|{
for|for
control|(
name|Address
name|ccAddress
range|:
name|ccAddresses
control|)
block|{
name|addAddress
argument_list|(
name|builder
argument_list|,
literal|"recipient"
argument_list|,
literal|"cc"
argument_list|,
name|ccAddress
argument_list|)
expr_stmt|;
block|}
block|}
comment|// bcc Recipients
name|Address
index|[]
name|bccAddresses
init|=
name|message
operator|.
name|getRecipients
argument_list|(
name|Message
operator|.
name|RecipientType
operator|.
name|BCC
argument_list|)
decl_stmt|;
if|if
condition|(
name|bccAddresses
operator|!=
literal|null
condition|)
block|{
for|for
control|(
name|Address
name|bccAddress
range|:
name|bccAddresses
control|)
block|{
name|addAddress
argument_list|(
name|builder
argument_list|,
literal|"recipient"
argument_list|,
literal|"bcc"
argument_list|,
name|bccAddress
argument_list|)
expr_stmt|;
block|}
block|}
name|builder
operator|.
name|endElement
argument_list|()
expr_stmt|;
comment|// recipients
comment|// Handle the content
name|Object
name|content
init|=
name|message
operator|.
name|getContent
argument_list|()
decl_stmt|;
if|if
condition|(
name|content
operator|instanceof
name|Multipart
condition|)
block|{
name|handleMultipart
argument_list|(
operator|(
name|Multipart
operator|)
name|content
argument_list|,
name|builder
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|handlePart
argument_list|(
name|message
argument_list|,
name|builder
argument_list|)
expr_stmt|;
block|}
comment|// Flags
name|Flags
name|flags
init|=
name|message
operator|.
name|getFlags
argument_list|()
decl_stmt|;
name|Flags
operator|.
name|Flag
index|[]
name|systemFlags
init|=
name|flags
operator|.
name|getSystemFlags
argument_list|()
decl_stmt|;
name|String
index|[]
name|userFlags
init|=
name|flags
operator|.
name|getUserFlags
argument_list|()
decl_stmt|;
if|if
condition|(
name|systemFlags
operator|.
name|length
operator|>
literal|0
operator|||
name|userFlags
operator|.
name|length
operator|>
literal|0
condition|)
block|{
name|builder
operator|.
name|startElement
argument_list|(
operator|new
name|QName
argument_list|(
literal|"flags"
argument_list|,
name|MailModule
operator|.
name|NAMESPACE_URI
argument_list|,
name|MailModule
operator|.
name|PREFIX
argument_list|)
argument_list|,
literal|null
argument_list|)
expr_stmt|;
for|for
control|(
name|Flags
operator|.
name|Flag
name|systemFlag
range|:
name|systemFlags
control|)
block|{
if|if
condition|(
name|systemFlag
operator|==
name|Flags
operator|.
name|Flag
operator|.
name|ANSWERED
condition|)
block|{
name|addFlag
argument_list|(
name|builder
argument_list|,
literal|"answered"
argument_list|)
expr_stmt|;
block|}
if|else if
condition|(
name|systemFlag
operator|==
name|Flags
operator|.
name|Flag
operator|.
name|DELETED
condition|)
block|{
name|addFlag
argument_list|(
name|builder
argument_list|,
literal|"deleted"
argument_list|)
expr_stmt|;
block|}
if|else if
condition|(
name|systemFlag
operator|==
name|Flags
operator|.
name|Flag
operator|.
name|DRAFT
condition|)
block|{
name|addFlag
argument_list|(
name|builder
argument_list|,
literal|"draft"
argument_list|)
expr_stmt|;
block|}
if|else if
condition|(
name|systemFlag
operator|==
name|Flags
operator|.
name|Flag
operator|.
name|FLAGGED
condition|)
block|{
name|addFlag
argument_list|(
name|builder
argument_list|,
literal|"flagged"
argument_list|)
expr_stmt|;
block|}
if|else if
condition|(
name|systemFlag
operator|==
name|Flags
operator|.
name|Flag
operator|.
name|RECENT
condition|)
block|{
name|addFlag
argument_list|(
name|builder
argument_list|,
literal|"recent"
argument_list|)
expr_stmt|;
block|}
if|else if
condition|(
name|systemFlag
operator|==
name|Flags
operator|.
name|Flag
operator|.
name|SEEN
condition|)
block|{
name|addFlag
argument_list|(
name|builder
argument_list|,
literal|"seen"
argument_list|)
expr_stmt|;
block|}
block|}
for|for
control|(
name|String
name|userFlag
range|:
name|userFlags
control|)
block|{
name|builder
operator|.
name|startElement
argument_list|(
operator|new
name|QName
argument_list|(
literal|"flag"
argument_list|,
name|MailModule
operator|.
name|NAMESPACE_URI
argument_list|,
name|MailModule
operator|.
name|PREFIX
argument_list|)
argument_list|,
literal|null
argument_list|)
expr_stmt|;
name|builder
operator|.
name|addAttribute
argument_list|(
operator|new
name|QName
argument_list|(
literal|"type"
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|)
argument_list|,
literal|"user"
argument_list|)
expr_stmt|;
name|builder
operator|.
name|addAttribute
argument_list|(
operator|new
name|QName
argument_list|(
literal|"value"
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|)
argument_list|,
name|userFlag
argument_list|)
expr_stmt|;
name|builder
operator|.
name|endElement
argument_list|()
expr_stmt|;
block|}
name|builder
operator|.
name|endElement
argument_list|()
expr_stmt|;
block|}
name|builder
operator|.
name|endElement
argument_list|()
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
name|MessagingException
name|me
parameter_list|)
block|{
throw|throw
operator|(
operator|new
name|XPathException
argument_list|(
name|this
argument_list|,
literal|"Failed to retrieve messages from list"
argument_list|,
name|me
argument_list|)
operator|)
throw|;
block|}
catch|catch
parameter_list|(
name|IOException
decl||
name|SAXException
name|e
parameter_list|)
block|{
name|e
operator|.
name|printStackTrace
argument_list|()
expr_stmt|;
block|}
name|builder
operator|.
name|endElement
argument_list|()
expr_stmt|;
name|builder
operator|.
name|endDocument
argument_list|()
expr_stmt|;
name|ret
operator|=
operator|(
name|NodeValue
operator|)
name|builder
operator|.
name|getDocument
argument_list|()
operator|.
name|getDocumentElement
argument_list|()
expr_stmt|;
return|return
operator|(
name|ret
operator|)
return|;
block|}
specifier|private
name|void
name|addFlag
parameter_list|(
name|MemTreeBuilder
name|builder
parameter_list|,
name|String
name|flag
parameter_list|)
block|{
name|builder
operator|.
name|startElement
argument_list|(
operator|new
name|QName
argument_list|(
literal|"flag"
argument_list|,
name|MailModule
operator|.
name|NAMESPACE_URI
argument_list|,
name|MailModule
operator|.
name|PREFIX
argument_list|)
argument_list|,
literal|null
argument_list|)
expr_stmt|;
name|builder
operator|.
name|addAttribute
argument_list|(
operator|new
name|QName
argument_list|(
literal|"type"
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|)
argument_list|,
name|flag
argument_list|)
expr_stmt|;
name|builder
operator|.
name|endElement
argument_list|()
expr_stmt|;
block|}
specifier|private
name|void
name|addAddress
parameter_list|(
name|MemTreeBuilder
name|builder
parameter_list|,
name|String
name|element
parameter_list|,
name|String
name|attrVal
parameter_list|,
name|Address
name|addr
parameter_list|)
block|{
name|builder
operator|.
name|startElement
argument_list|(
operator|new
name|QName
argument_list|(
name|element
argument_list|,
name|MailModule
operator|.
name|NAMESPACE_URI
argument_list|,
name|MailModule
operator|.
name|PREFIX
argument_list|)
argument_list|,
literal|null
argument_list|)
expr_stmt|;
if|if
condition|(
name|attrVal
operator|!=
literal|null
condition|)
name|builder
operator|.
name|addAttribute
argument_list|(
operator|new
name|QName
argument_list|(
literal|"type"
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|)
argument_list|,
name|attrVal
argument_list|)
expr_stmt|;
name|InternetAddress
name|ia
init|=
operator|(
name|InternetAddress
operator|)
name|addr
decl_stmt|;
if|if
condition|(
name|ia
operator|.
name|getPersonal
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|builder
operator|.
name|addAttribute
argument_list|(
operator|new
name|QName
argument_list|(
literal|"personal"
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|)
argument_list|,
name|ia
operator|.
name|getPersonal
argument_list|()
argument_list|)
expr_stmt|;
name|builder
operator|.
name|characters
argument_list|(
name|ia
operator|.
name|getAddress
argument_list|()
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|builder
operator|.
name|characters
argument_list|(
name|ia
operator|.
name|getAddress
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|builder
operator|.
name|endElement
argument_list|()
expr_stmt|;
block|}
specifier|private
name|String
name|formatDate
parameter_list|(
name|Date
name|date
parameter_list|)
block|{
name|String
name|formatted
init|=
literal|""
decl_stmt|;
name|SimpleDateFormat
name|sdf
init|=
operator|new
name|SimpleDateFormat
argument_list|(
name|DATE_FORMAT
argument_list|)
decl_stmt|;
name|String
name|temp
init|=
name|sdf
operator|.
name|format
argument_list|(
name|date
argument_list|)
decl_stmt|;
name|formatted
operator|=
name|temp
operator|.
name|substring
argument_list|(
literal|0
argument_list|,
name|temp
operator|.
name|length
argument_list|()
operator|-
literal|2
argument_list|)
operator|+
literal|":"
operator|+
name|temp
operator|.
name|substring
argument_list|(
name|temp
operator|.
name|length
argument_list|()
operator|-
literal|2
argument_list|)
expr_stmt|;
return|return
operator|(
name|formatted
operator|)
return|;
block|}
specifier|private
name|void
name|handleMultipart
parameter_list|(
name|Multipart
name|multipart
parameter_list|,
name|MemTreeBuilder
name|builder
parameter_list|)
throws|throws
name|MessagingException
throws|,
name|IOException
throws|,
name|XPathException
throws|,
name|SAXException
block|{
for|for
control|(
name|int
name|i
init|=
literal|0
init|,
name|n
init|=
name|multipart
operator|.
name|getCount
argument_list|()
init|;
name|i
operator|<
name|n
condition|;
name|i
operator|++
control|)
block|{
name|handlePart
argument_list|(
name|multipart
operator|.
name|getBodyPart
argument_list|(
name|i
argument_list|)
argument_list|,
name|builder
argument_list|)
expr_stmt|;
block|}
block|}
specifier|private
name|void
name|mimeParamsToAttributes
parameter_list|(
name|MemTreeBuilder
name|builder
parameter_list|,
name|String
name|contentType
parameter_list|)
block|{
try|try
block|{
name|MimeType
name|m
init|=
operator|new
name|MimeType
argument_list|(
name|contentType
argument_list|)
decl_stmt|;
name|builder
operator|.
name|addAttribute
argument_list|(
operator|new
name|QName
argument_list|(
literal|"mime-type"
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|)
argument_list|,
name|m
operator|.
name|getBaseType
argument_list|()
argument_list|)
expr_stmt|;
name|MimeTypeParameterList
name|mtpl
init|=
name|m
operator|.
name|getParameters
argument_list|()
decl_stmt|;
name|Enumeration
name|e
init|=
name|mtpl
operator|.
name|getNames
argument_list|()
decl_stmt|;
while|while
condition|(
name|e
operator|.
name|hasMoreElements
argument_list|()
condition|)
block|{
name|String
name|key
init|=
operator|(
name|String
operator|)
name|e
operator|.
name|nextElement
argument_list|()
decl_stmt|;
name|builder
operator|.
name|addAttribute
argument_list|(
operator|new
name|QName
argument_list|(
name|key
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|)
argument_list|,
name|mtpl
operator|.
name|get
argument_list|(
name|key
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
name|MimeTypeParseException
name|e
parameter_list|)
block|{
name|e
operator|.
name|printStackTrace
argument_list|()
expr_stmt|;
block|}
block|}
specifier|private
name|void
name|handlePart
parameter_list|(
name|Part
name|part
parameter_list|,
name|MemTreeBuilder
name|builder
parameter_list|)
throws|throws
name|MessagingException
throws|,
name|IOException
throws|,
name|XPathException
throws|,
name|SAXException
block|{
name|Object
name|content
init|=
name|part
operator|.
name|getContent
argument_list|()
decl_stmt|;
if|if
condition|(
name|content
operator|instanceof
name|Multipart
condition|)
block|{
name|handleMultipart
argument_list|(
operator|(
name|Multipart
operator|)
name|content
argument_list|,
name|builder
argument_list|)
expr_stmt|;
return|return;
block|}
name|String
name|disposition
init|=
name|part
operator|.
name|getDisposition
argument_list|()
decl_stmt|;
name|String
name|contentType
init|=
name|part
operator|.
name|getContentType
argument_list|()
decl_stmt|;
comment|// Check if plain
if|if
condition|(
name|contentType
operator|.
name|contains
argument_list|(
literal|"text/plain"
argument_list|)
condition|)
block|{
name|builder
operator|.
name|startElement
argument_list|(
operator|new
name|QName
argument_list|(
literal|"text"
argument_list|,
name|MailModule
operator|.
name|NAMESPACE_URI
argument_list|,
name|MailModule
operator|.
name|PREFIX
argument_list|)
argument_list|,
literal|null
argument_list|)
expr_stmt|;
name|mimeParamsToAttributes
argument_list|(
name|builder
argument_list|,
name|part
operator|.
name|getContentType
argument_list|()
argument_list|)
expr_stmt|;
name|builder
operator|.
name|characters
argument_list|(
name|part
operator|.
name|getContent
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|builder
operator|.
name|endElement
argument_list|()
expr_stmt|;
block|}
if|else if
condition|(
name|contentType
operator|.
name|contains
argument_list|(
literal|"text/html"
argument_list|)
condition|)
block|{
name|builder
operator|.
name|startElement
argument_list|(
operator|new
name|QName
argument_list|(
literal|"xhtml"
argument_list|,
name|MailModule
operator|.
name|NAMESPACE_URI
argument_list|,
name|MailModule
operator|.
name|PREFIX
argument_list|)
argument_list|,
literal|null
argument_list|)
expr_stmt|;
name|mimeParamsToAttributes
argument_list|(
name|builder
argument_list|,
name|part
operator|.
name|getContentType
argument_list|()
argument_list|)
expr_stmt|;
comment|// extract and clean up the html
name|DocumentBuilderReceiver
name|receiver
init|=
operator|new
name|DocumentBuilderReceiver
argument_list|(
name|builder
argument_list|)
decl_stmt|;
comment|/* There's a bug here caused (possibly) by Apple Mail forwarding Outlook Mail                In the hideous Outlook html, o:p tags are included as paragraph markers. They either contain nothing,                or else an NBSP entity. The namespace prefix is correctly declared.                Apple mail appears to strip or reduce these elements to<o:p/>                Additionally, the namespace binding is dropped - so this throws an error when the content is parsed.              */
try|try
init|(
name|InputStream
name|inputStream
init|=
name|part
operator|.
name|getInputStream
argument_list|()
init|)
block|{
name|DocumentImpl
name|html
init|=
name|ModuleUtils
operator|.
name|htmlToXHtml
argument_list|(
name|context
argument_list|,
operator|new
name|StreamSource
argument_list|(
name|inputStream
argument_list|)
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|)
decl_stmt|;
name|ElementImpl
name|rootElem
init|=
operator|(
name|ElementImpl
operator|)
name|html
operator|.
name|getDocumentElement
argument_list|()
decl_stmt|;
name|html
operator|.
name|copyTo
argument_list|(
name|rootElem
argument_list|,
name|receiver
argument_list|)
expr_stmt|;
name|builder
operator|.
name|endElement
argument_list|()
expr_stmt|;
block|}
block|}
if|else if
condition|(
name|disposition
operator|.
name|equalsIgnoreCase
argument_list|(
name|Part
operator|.
name|ATTACHMENT
argument_list|)
condition|)
block|{
name|builder
operator|.
name|startElement
argument_list|(
operator|new
name|QName
argument_list|(
literal|"attachment"
argument_list|,
name|MailModule
operator|.
name|NAMESPACE_URI
argument_list|,
name|MailModule
operator|.
name|PREFIX
argument_list|)
argument_list|,
literal|null
argument_list|)
expr_stmt|;
name|builder
operator|.
name|addAttribute
argument_list|(
operator|new
name|QName
argument_list|(
literal|"filename"
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|)
argument_list|,
name|part
operator|.
name|getFileName
argument_list|()
argument_list|)
expr_stmt|;
name|mimeParamsToAttributes
argument_list|(
name|builder
argument_list|,
name|part
operator|.
name|getContentType
argument_list|()
argument_list|)
expr_stmt|;
name|handleBinaryContent
argument_list|(
name|part
argument_list|,
name|builder
argument_list|)
expr_stmt|;
name|builder
operator|.
name|endElement
argument_list|()
expr_stmt|;
block|}
if|else if
condition|(
name|disposition
operator|.
name|equalsIgnoreCase
argument_list|(
name|Part
operator|.
name|INLINE
argument_list|)
condition|)
block|{
name|builder
operator|.
name|startElement
argument_list|(
operator|new
name|QName
argument_list|(
literal|"inline"
argument_list|,
name|MailModule
operator|.
name|NAMESPACE_URI
argument_list|,
name|MailModule
operator|.
name|PREFIX
argument_list|)
argument_list|,
literal|null
argument_list|)
expr_stmt|;
name|MimeBodyPart
name|mbp
init|=
operator|(
name|MimeBodyPart
operator|)
name|part
decl_stmt|;
name|builder
operator|.
name|addAttribute
argument_list|(
operator|new
name|QName
argument_list|(
literal|"filename"
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|)
argument_list|,
name|mbp
operator|.
name|getFileName
argument_list|()
argument_list|)
expr_stmt|;
comment|// fix content id so that it matches the cid: format within the html
if|if
condition|(
name|mbp
operator|.
name|getContentID
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|builder
operator|.
name|addAttribute
argument_list|(
operator|new
name|QName
argument_list|(
literal|"content-id"
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|)
argument_list|,
literal|"cid:"
operator|+
name|mbp
operator|.
name|getContentID
argument_list|()
operator|.
name|replaceAll
argument_list|(
literal|"^<|>$"
argument_list|,
literal|""
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|mimeParamsToAttributes
argument_list|(
name|builder
argument_list|,
name|part
operator|.
name|getContentType
argument_list|()
argument_list|)
expr_stmt|;
name|handleBinaryContent
argument_list|(
name|part
argument_list|,
name|builder
argument_list|)
expr_stmt|;
name|builder
operator|.
name|endElement
argument_list|()
expr_stmt|;
block|}
else|else
block|{
comment|// Should never happen
name|builder
operator|.
name|startElement
argument_list|(
operator|new
name|QName
argument_list|(
literal|"other"
argument_list|,
name|MailModule
operator|.
name|NAMESPACE_URI
argument_list|,
name|MailModule
operator|.
name|PREFIX
argument_list|)
argument_list|,
literal|null
argument_list|)
expr_stmt|;
name|mimeParamsToAttributes
argument_list|(
name|builder
argument_list|,
name|part
operator|.
name|getContentType
argument_list|()
argument_list|)
expr_stmt|;
name|builder
operator|.
name|addAttribute
argument_list|(
operator|new
name|QName
argument_list|(
literal|"disposition"
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|)
argument_list|,
name|part
operator|.
name|getDisposition
argument_list|()
argument_list|)
expr_stmt|;
name|builder
operator|.
name|characters
argument_list|(
name|part
operator|.
name|getContent
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|builder
operator|.
name|endElement
argument_list|()
expr_stmt|;
block|}
block|}
specifier|private
name|void
name|handleBinaryContent
parameter_list|(
name|Part
name|part
parameter_list|,
name|MemTreeBuilder
name|builder
parameter_list|)
throws|throws
name|IOException
throws|,
name|MessagingException
throws|,
name|XPathException
block|{
name|builder
operator|.
name|addAttribute
argument_list|(
operator|new
name|QName
argument_list|(
literal|"type"
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|)
argument_list|,
literal|"binary"
argument_list|)
expr_stmt|;
name|builder
operator|.
name|addAttribute
argument_list|(
operator|new
name|QName
argument_list|(
literal|"encoding"
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|)
argument_list|,
literal|"Base64Encoded"
argument_list|)
expr_stmt|;
name|BinaryValue
name|binary
init|=
literal|null
decl_stmt|;
try|try
block|{
name|binary
operator|=
name|BinaryValueFromInputStream
operator|.
name|getInstance
argument_list|(
name|context
argument_list|,
operator|new
name|Base64BinaryValueType
argument_list|()
argument_list|,
name|part
operator|.
name|getInputStream
argument_list|()
argument_list|)
expr_stmt|;
name|builder
operator|.
name|characters
argument_list|(
name|binary
operator|.
name|getStringValue
argument_list|()
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
comment|// free resources
if|if
condition|(
name|binary
operator|!=
literal|null
condition|)
block|{
name|binary
operator|.
name|destroy
argument_list|(
name|context
argument_list|,
literal|null
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
end_class

end_unit

