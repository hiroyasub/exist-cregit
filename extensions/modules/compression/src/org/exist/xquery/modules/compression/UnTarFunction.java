begin_unit|revision:1.0.0;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  *  eXist Open Source Native XML Database  *  Copyright (C) 2001-2018 The eXist Project  *  http://exist-db.org  *  *  This program is free software; you can redistribute it and/or  *  modify it under the terms of the GNU Lesser General Public License  *  as published by the Free Software Foundation; either version 2  *  of the License, or (at your option) any later version.  *  *  This program is distributed in the hope that it will be useful,  *  but WITHOUT ANY WARRANTY; without even the implied warranty of  *  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the  *  GNU Lesser General Public License for more details.  *  *  You should have received a copy of the GNU Lesser General Public  *  License along with this library; if not, write to the Free Software  *  Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA  02110-1301  USA  */
end_comment

begin_package
package|package
name|org
operator|.
name|exist
operator|.
name|xquery
operator|.
name|modules
operator|.
name|compression
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|nio
operator|.
name|charset
operator|.
name|Charset
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|compress
operator|.
name|archivers
operator|.
name|tar
operator|.
name|TarArchiveEntry
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|compress
operator|.
name|archivers
operator|.
name|tar
operator|.
name|TarArchiveInputStream
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|xquery
operator|.
name|FunctionSignature
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|xquery
operator|.
name|XPathException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|xquery
operator|.
name|XQueryContext
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|xquery
operator|.
name|value
operator|.
name|BinaryValue
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|xquery
operator|.
name|value
operator|.
name|FunctionParameterSequenceType
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|xquery
operator|.
name|value
operator|.
name|Sequence
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|xquery
operator|.
name|value
operator|.
name|Type
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|xquery
operator|.
name|value
operator|.
name|ValueSequence
import|;
end_import

begin_import
import|import
name|org
operator|.
name|xmldb
operator|.
name|api
operator|.
name|base
operator|.
name|XMLDBException
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|exist
operator|.
name|xquery
operator|.
name|FunctionDSL
operator|.
name|*
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|exist
operator|.
name|xquery
operator|.
name|modules
operator|.
name|compression
operator|.
name|CompressionModule
operator|.
name|functionSignatures
import|;
end_import

begin_comment
comment|/**  * Extracts files and folders from a Tar file  *   * @author Adam Retter<adam@exist-db.org>  * @version 1.0  */
end_comment

begin_class
specifier|public
class|class
name|UnTarFunction
extends|extends
name|AbstractExtractFunction
block|{
specifier|private
specifier|static
specifier|final
name|FunctionParameterSequenceType
name|FS_PARAM_TAR_DATA
init|=
name|param
argument_list|(
literal|"tar-data"
argument_list|,
name|Type
operator|.
name|BASE64_BINARY
argument_list|,
literal|"The tar file data"
argument_list|)
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|FunctionParameterSequenceType
name|FS_PARAM_ENTRY_FILTER
init|=
name|param
argument_list|(
literal|"entry-filter"
argument_list|,
name|Type
operator|.
name|FUNCTION_REFERENCE
argument_list|,
literal|"A user defined function for filtering resources from the tar file. The function takes 2 parameters e.g. "
operator|+
literal|"user:untar-entry-filter($path as xs:string, $data-type as xs:string) as xs:boolean. "
operator|+
literal|"$data-type may be 'resource' or 'folder'. If the return type is true() it indicates the entry "
operator|+
literal|"should be processed and passed to the entry-data function, else the resource is skipped. "
operator|+
literal|"If you wish to extract all resources you can use the provided compression:no-filter#2 function."
argument_list|)
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|FunctionParameterSequenceType
name|FS_PARAM_ENTRY_FILTER_WITH_PARAMS
init|=
name|param
argument_list|(
literal|"entry-filter"
argument_list|,
name|Type
operator|.
name|FUNCTION_REFERENCE
argument_list|,
literal|"A user defined function for filtering resources from the tar file. The function takes 3 parameters e.g. "
operator|+
literal|"user:untar-entry-filter($path as xs:string, $data-type as xs:string, $param as item()*) as xs:boolean. "
operator|+
literal|"$data-type may be 'resource' or 'folder'. $param is a sequence with any additional parameters, "
operator|+
literal|"for example a list of extracted files. If the return type is true() it indicates the entry "
operator|+
literal|"should be processed and passed to the entry-data function, else the resource is skipped. "
operator|+
literal|"If you wish to extract all resources you can use the provided compression:no-filter#3 function."
argument_list|)
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|FunctionParameterSequenceType
name|FS_PARAM_ENTRY_FILTER_PARAM
init|=
name|optManyParam
argument_list|(
literal|"entry-filter-param"
argument_list|,
name|Type
operator|.
name|ANY_TYPE
argument_list|,
literal|"A sequence with an additional parameters for filtering function."
argument_list|)
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|FunctionParameterSequenceType
name|FS_PARAM_ENTRY_DATA
init|=
name|param
argument_list|(
literal|"entry-data"
argument_list|,
name|Type
operator|.
name|FUNCTION_REFERENCE
argument_list|,
literal|"A user defined function for storing an extracted resource from the tar file. The function takes 3 parameters e.g. "
operator|+
literal|"user:untar-entry-data($path as xs:string, $data-type as xs:string, $data as item()?). "
operator|+
literal|"Or a user defined function which returns a db path for storing an extracted resource from the tar file. "
operator|+
literal|"The function takes 3 parameters e.g. user:entry-path($path as xs:string, $data-type as xs:string, "
operator|+
literal|"$param as item()*) as xs:anyURI. $data-type may be 'resource' or 'folder'. "
operator|+
literal|"Functions for storing the entries to a folder on the filesystem or a collection in the database "
operator|+
literal|"provided by compression:fs-store-entry3($dest) and compression:db-store-entry3($dest)."
argument_list|)
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|FunctionParameterSequenceType
name|FS_PARAM_ENTRY_DATA_WITH_PARAMS
init|=
name|param
argument_list|(
literal|"entry-data"
argument_list|,
name|Type
operator|.
name|FUNCTION_REFERENCE
argument_list|,
literal|"A user defined function for storing an extracted resource from the tar file. The function takes 4 parameters e.g. "
operator|+
literal|"user:untar-entry-data($path as xs:string, $data-type as xs:string, $data as item()?, $param as item()*). "
operator|+
literal|"Or a user defined function which returns a db path for storing an extracted resource from the tar file. The function takes 3 parameters e.g. "
operator|+
literal|"user:entry-path($path as xs:string, $data-type as xs:string, $param as item()*) as xs:anyURI. "
operator|+
literal|"$data-type may be 'resource' or 'folder'. $param is a sequence with any additional parameters"
operator|+
literal|"Functions for storing the entries to a folder on the filesystem or a collection in the database "
operator|+
literal|"provided by compression:fs-store-entry4($dest) and compression:db-store-entry4($dest)."
argument_list|)
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|FunctionParameterSequenceType
name|FS_PARAM_ENTRY_DATA_PARAM
init|=
name|optManyParam
argument_list|(
literal|"entry-data-param"
argument_list|,
name|Type
operator|.
name|ANY_TYPE
argument_list|,
literal|"A sequence with an additional parameters for storing function."
argument_list|)
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|String
name|FS_UNTAR_NAME
init|=
literal|"untar"
decl_stmt|;
specifier|static
specifier|final
name|FunctionSignature
index|[]
name|FS_UNTAR
init|=
name|functionSignatures
argument_list|(
name|FS_UNTAR_NAME
argument_list|,
literal|"UnTar all the resources/folders from the provided data by calling user defined functions to determine what and how to store the resources/folders"
argument_list|,
name|returnsOptMany
argument_list|(
name|Type
operator|.
name|ITEM
argument_list|)
argument_list|,
name|arities
argument_list|(
name|arity
argument_list|(
name|FS_PARAM_TAR_DATA
argument_list|,
name|FS_PARAM_ENTRY_FILTER
argument_list|,
name|FS_PARAM_ENTRY_DATA
argument_list|)
argument_list|,
name|arity
argument_list|(
name|FS_PARAM_TAR_DATA
argument_list|,
name|FS_PARAM_ENTRY_FILTER_WITH_PARAMS
argument_list|,
name|FS_PARAM_ENTRY_FILTER_PARAM
argument_list|,
name|FS_PARAM_ENTRY_DATA_WITH_PARAMS
argument_list|,
name|FS_PARAM_ENTRY_DATA_PARAM
argument_list|)
argument_list|,
name|arity
argument_list|(
name|FS_PARAM_TAR_DATA
argument_list|,
name|FS_PARAM_ENTRY_FILTER_WITH_PARAMS
argument_list|,
name|FS_PARAM_ENTRY_FILTER_PARAM
argument_list|,
name|FS_PARAM_ENTRY_DATA_WITH_PARAMS
argument_list|,
name|FS_PARAM_ENTRY_DATA_PARAM
argument_list|,
name|param
argument_list|(
literal|"encoding"
argument_list|,
name|Type
operator|.
name|STRING
argument_list|,
literal|"The encoding to be used during uncompressing eg: UTF8 or Cp437 from https://docs.oracle.com/javase/8/docs/technotes/guides/intl/encoding.doc.html"
argument_list|)
argument_list|)
argument_list|)
argument_list|)
decl_stmt|;
specifier|public
name|UnTarFunction
parameter_list|(
specifier|final
name|XQueryContext
name|context
parameter_list|,
specifier|final
name|FunctionSignature
name|signature
parameter_list|)
block|{
name|super
argument_list|(
name|context
argument_list|,
name|signature
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|protected
name|Sequence
name|processCompressedData
parameter_list|(
specifier|final
name|BinaryValue
name|compressedData
parameter_list|,
specifier|final
name|Charset
name|encoding
parameter_list|)
throws|throws
name|XPathException
throws|,
name|XMLDBException
block|{
try|try
init|(
specifier|final
name|TarArchiveInputStream
name|tis
init|=
operator|new
name|TarArchiveInputStream
argument_list|(
name|compressedData
operator|.
name|getInputStream
argument_list|()
argument_list|,
name|encoding
operator|.
name|name
argument_list|()
argument_list|)
init|)
block|{
name|TarArchiveEntry
name|entry
init|=
literal|null
decl_stmt|;
specifier|final
name|Sequence
name|results
init|=
operator|new
name|ValueSequence
argument_list|()
decl_stmt|;
while|while
condition|(
operator|(
name|entry
operator|=
name|tis
operator|.
name|getNextTarEntry
argument_list|()
operator|)
operator|!=
literal|null
condition|)
block|{
specifier|final
name|Sequence
name|processCompressedEntryResults
init|=
name|processCompressedEntry
argument_list|(
name|entry
operator|.
name|getName
argument_list|()
argument_list|,
name|entry
operator|.
name|isDirectory
argument_list|()
argument_list|,
name|tis
argument_list|,
name|filterParam
argument_list|,
name|storeParam
argument_list|)
decl_stmt|;
name|results
operator|.
name|addAll
argument_list|(
name|processCompressedEntryResults
argument_list|)
expr_stmt|;
block|}
return|return
name|results
return|;
block|}
catch|catch
parameter_list|(
specifier|final
name|IOException
name|ioe
parameter_list|)
block|{
name|LOG
operator|.
name|error
argument_list|(
name|ioe
operator|.
name|getMessage
argument_list|()
argument_list|,
name|ioe
argument_list|)
expr_stmt|;
throw|throw
operator|new
name|XPathException
argument_list|(
name|this
argument_list|,
name|ioe
operator|.
name|getMessage
argument_list|()
argument_list|,
name|ioe
argument_list|)
throw|;
block|}
block|}
block|}
end_class

end_unit

