begin_unit|revision:1.0.0;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * eXist Open Source Native XML Database  * Copyright (C) 2001-2017 The eXist Project  * http://exist-db.org  *  * This program is free software; you can redistribute it and/or  * modify it under the terms of the GNU Lesser General Public License  * as published by the Free Software Foundation; either version 2  * of the License, or (at your option) any later version.  *  * This program is distributed in the hope that it will be useful,  * but WITHOUT ANY WARRANTY; without even the implied warranty of  * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the  * GNU Lesser General Public License for more details.  *  * You should have received a copy of the GNU Lesser General Public  * License along with this library; if not, write to the Free Software  * Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA  02110-1301  USA  */
end_comment

begin_package
package|package
name|org
operator|.
name|exist
operator|.
name|xquery
operator|.
name|modules
operator|.
name|file
package|;
end_package

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|test
operator|.
name|ExistWebServer
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|xmldb
operator|.
name|XmldbURI
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|ClassRule
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|runner
operator|.
name|RunWith
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|runners
operator|.
name|Parameterized
import|;
end_import

begin_import
import|import
name|org
operator|.
name|xmldb
operator|.
name|api
operator|.
name|DatabaseManager
import|;
end_import

begin_import
import|import
name|org
operator|.
name|xmldb
operator|.
name|api
operator|.
name|base
operator|.
name|*
import|;
end_import

begin_import
import|import
name|org
operator|.
name|xmldb
operator|.
name|api
operator|.
name|modules
operator|.
name|BinaryResource
import|;
end_import

begin_import
import|import
name|org
operator|.
name|xmldb
operator|.
name|api
operator|.
name|modules
operator|.
name|CollectionManagementService
import|;
end_import

begin_import
import|import
name|org
operator|.
name|xmldb
operator|.
name|api
operator|.
name|modules
operator|.
name|XQueryService
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayDeque
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Arrays
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Deque
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|exist
operator|.
name|TestUtils
operator|.
name|ADMIN_DB_PWD
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|exist
operator|.
name|TestUtils
operator|.
name|ADMIN_DB_USER
import|;
end_import

begin_comment
comment|/**  * @author<a href="mailto:adam@evolvedbinary.com">Adam Retter</a>  */
end_comment

begin_class
annotation|@
name|RunWith
argument_list|(
name|Parameterized
operator|.
name|class
argument_list|)
specifier|public
class|class
name|XmldbBinariesTest
extends|extends
name|AbstractBinariesTest
argument_list|<
name|ResourceSet
argument_list|,
name|Resource
argument_list|,
name|XMLDBException
argument_list|>
block|{
annotation|@
name|ClassRule
specifier|public
specifier|static
specifier|final
name|ExistWebServer
name|existWebServer
init|=
operator|new
name|ExistWebServer
argument_list|(
literal|true
argument_list|,
literal|false
argument_list|,
literal|true
argument_list|)
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|String
name|PORT_PLACEHOLDER
init|=
literal|"${PORT}"
decl_stmt|;
annotation|@
name|Parameterized
operator|.
name|Parameters
argument_list|(
name|name
operator|=
literal|"{0}"
argument_list|)
specifier|public
specifier|static
name|java
operator|.
name|util
operator|.
name|Collection
argument_list|<
name|Object
index|[]
argument_list|>
name|data
parameter_list|()
block|{
return|return
name|Arrays
operator|.
name|asList
argument_list|(
operator|new
name|Object
index|[]
index|[]
block|{
block|{
literal|"local"
block|,
literal|"xmldb:exist://"
block|}
block|,
block|{
literal|"remote"
block|,
literal|"xmldb:exist://localhost:"
operator|+
name|PORT_PLACEHOLDER
operator|+
literal|"/xmlrpc"
block|}
block|}
argument_list|)
return|;
block|}
annotation|@
name|Parameterized
operator|.
name|Parameter
specifier|public
name|String
name|apiName
decl_stmt|;
annotation|@
name|Parameterized
operator|.
name|Parameter
argument_list|(
name|value
operator|=
literal|1
argument_list|)
specifier|public
name|String
name|baseUri
decl_stmt|;
specifier|private
specifier|final
name|String
name|getBaseUri
parameter_list|()
block|{
return|return
name|baseUri
operator|.
name|replace
argument_list|(
name|PORT_PLACEHOLDER
argument_list|,
name|Integer
operator|.
name|toString
argument_list|(
name|existWebServer
operator|.
name|getPort
argument_list|()
argument_list|)
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|protected
name|void
name|storeBinaryFile
parameter_list|(
specifier|final
name|XmldbURI
name|filePath
parameter_list|,
name|byte
index|[]
name|content
parameter_list|)
throws|throws
name|Exception
block|{
name|Collection
name|colRoot
init|=
literal|null
decl_stmt|;
try|try
block|{
name|colRoot
operator|=
name|DatabaseManager
operator|.
name|getCollection
argument_list|(
name|getBaseUri
argument_list|()
operator|+
literal|"/db"
argument_list|,
name|ADMIN_DB_USER
argument_list|,
name|ADMIN_DB_PWD
argument_list|)
expr_stmt|;
specifier|final
name|XmldbURI
name|collectionNames
index|[]
init|=
name|filePath
operator|.
name|removeLastSegment
argument_list|()
operator|.
name|getPathSegments
argument_list|()
decl_stmt|;
specifier|final
name|Deque
argument_list|<
name|Collection
argument_list|>
name|cols
init|=
operator|new
name|ArrayDeque
argument_list|<>
argument_list|()
decl_stmt|;
try|try
block|{
name|Collection
name|current
init|=
name|colRoot
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|1
init|;
name|i
operator|<
name|collectionNames
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
specifier|final
name|Collection
name|child
init|=
name|getOrCreateCollection
argument_list|(
name|current
argument_list|,
name|collectionNames
index|[
name|i
index|]
operator|.
name|toString
argument_list|()
argument_list|)
decl_stmt|;
name|cols
operator|.
name|push
argument_list|(
name|child
argument_list|)
expr_stmt|;
name|current
operator|=
name|child
expr_stmt|;
block|}
specifier|final
name|String
name|fileName
init|=
name|filePath
operator|.
name|lastSegment
argument_list|()
operator|.
name|toString
argument_list|()
decl_stmt|;
specifier|final
name|Resource
name|resource
init|=
name|current
operator|.
name|createResource
argument_list|(
name|fileName
argument_list|,
name|BinaryResource
operator|.
name|RESOURCE_TYPE
argument_list|)
decl_stmt|;
name|resource
operator|.
name|setContent
argument_list|(
name|content
argument_list|)
expr_stmt|;
name|current
operator|.
name|storeResource
argument_list|(
name|resource
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
while|while
condition|(
operator|!
name|cols
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
try|try
block|{
name|cols
operator|.
name|pop
argument_list|()
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|XMLDBException
name|e
parameter_list|)
block|{
block|}
block|}
block|}
block|}
finally|finally
block|{
if|if
condition|(
name|colRoot
operator|!=
literal|null
condition|)
block|{
name|colRoot
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
block|}
block|}
specifier|private
name|Collection
name|getOrCreateCollection
parameter_list|(
specifier|final
name|Collection
name|parent
parameter_list|,
specifier|final
name|String
name|childName
parameter_list|)
throws|throws
name|XMLDBException
block|{
name|Collection
name|child
init|=
name|parent
operator|.
name|getChildCollection
argument_list|(
name|childName
argument_list|)
decl_stmt|;
if|if
condition|(
name|child
operator|==
literal|null
condition|)
block|{
specifier|final
name|CollectionManagementService
name|cms
init|=
operator|(
name|CollectionManagementService
operator|)
name|parent
operator|.
name|getService
argument_list|(
literal|"CollectionManagementService"
argument_list|,
literal|"1.0"
argument_list|)
decl_stmt|;
name|child
operator|=
name|cms
operator|.
name|createCollection
argument_list|(
name|childName
argument_list|)
expr_stmt|;
block|}
return|return
name|child
return|;
block|}
annotation|@
name|Override
specifier|protected
name|void
name|removeCollection
parameter_list|(
specifier|final
name|XmldbURI
name|collectionUri
parameter_list|)
throws|throws
name|Exception
block|{
name|Collection
name|colRoot
init|=
literal|null
decl_stmt|;
try|try
block|{
name|colRoot
operator|=
name|DatabaseManager
operator|.
name|getCollection
argument_list|(
name|getBaseUri
argument_list|()
operator|+
literal|"/db"
argument_list|,
name|ADMIN_DB_USER
argument_list|,
name|ADMIN_DB_PWD
argument_list|)
expr_stmt|;
specifier|final
name|Collection
name|colTest
init|=
name|colRoot
operator|.
name|getChildCollection
argument_list|(
literal|"test"
argument_list|)
decl_stmt|;
try|try
block|{
specifier|final
name|CollectionManagementService
name|cms
init|=
operator|(
name|CollectionManagementService
operator|)
name|colTest
operator|.
name|getService
argument_list|(
literal|"CollectionManagementService"
argument_list|,
literal|"1.0"
argument_list|)
decl_stmt|;
specifier|final
name|String
name|testCollectionName
init|=
name|collectionUri
operator|.
name|lastSegment
argument_list|()
operator|.
name|toString
argument_list|()
decl_stmt|;
name|cms
operator|.
name|removeCollection
argument_list|(
name|testCollectionName
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
if|if
condition|(
name|colTest
operator|!=
literal|null
condition|)
block|{
name|colTest
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
block|}
block|}
finally|finally
block|{
if|if
condition|(
name|colRoot
operator|!=
literal|null
condition|)
block|{
name|colRoot
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
block|}
block|}
annotation|@
name|Override
specifier|protected
name|QueryResultAccessor
argument_list|<
name|ResourceSet
argument_list|,
name|XMLDBException
argument_list|>
name|executeXQuery
parameter_list|(
specifier|final
name|String
name|query
parameter_list|)
throws|throws
name|Exception
block|{
name|Collection
name|colRoot
init|=
literal|null
decl_stmt|;
try|try
block|{
name|colRoot
operator|=
name|DatabaseManager
operator|.
name|getCollection
argument_list|(
name|getBaseUri
argument_list|()
operator|+
literal|"/db"
argument_list|,
name|ADMIN_DB_USER
argument_list|,
name|ADMIN_DB_PWD
argument_list|)
expr_stmt|;
specifier|final
name|XQueryService
name|xqueryService
init|=
operator|(
name|XQueryService
operator|)
name|colRoot
operator|.
name|getService
argument_list|(
literal|"XQueryService"
argument_list|,
literal|"1.0"
argument_list|)
decl_stmt|;
specifier|final
name|CompiledExpression
name|compiledExpression
init|=
name|xqueryService
operator|.
name|compile
argument_list|(
name|query
argument_list|)
decl_stmt|;
specifier|final
name|ResourceSet
name|results
init|=
name|xqueryService
operator|.
name|execute
argument_list|(
name|compiledExpression
argument_list|)
decl_stmt|;
return|return
name|consumer
lambda|->
block|{
try|try
block|{
comment|//                    compiledExpression.reset();  // shows the ordering issue with binary values (see comment below)
name|consumer
operator|.
name|accept
argument_list|(
name|results
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
comment|//the following calls cause the streams of any binary result values to be closed, so if we did so before we are finished with the results, serialization would fail.
name|results
operator|.
name|clear
argument_list|()
expr_stmt|;
name|compiledExpression
operator|.
name|reset
argument_list|()
expr_stmt|;
block|}
block|}
return|;
block|}
finally|finally
block|{
name|colRoot
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
block|}
annotation|@
name|Override
specifier|protected
name|long
name|size
parameter_list|(
specifier|final
name|ResourceSet
name|results
parameter_list|)
throws|throws
name|XMLDBException
block|{
return|return
name|results
operator|.
name|getSize
argument_list|()
return|;
block|}
annotation|@
name|Override
specifier|protected
name|Resource
name|item
parameter_list|(
specifier|final
name|ResourceSet
name|results
parameter_list|,
specifier|final
name|int
name|index
parameter_list|)
throws|throws
name|XMLDBException
block|{
return|return
name|results
operator|.
name|getResource
argument_list|(
name|index
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|protected
name|boolean
name|isBinaryType
parameter_list|(
specifier|final
name|Resource
name|item
parameter_list|)
throws|throws
name|XMLDBException
block|{
return|return
name|BinaryResource
operator|.
name|RESOURCE_TYPE
operator|.
name|equals
argument_list|(
name|item
operator|.
name|getResourceType
argument_list|()
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|protected
name|boolean
name|isBooleanType
parameter_list|(
specifier|final
name|Resource
name|item
parameter_list|)
throws|throws
name|XMLDBException
block|{
specifier|final
name|String
name|value
init|=
name|item
operator|.
name|getContent
argument_list|()
operator|.
name|toString
argument_list|()
decl_stmt|;
return|return
literal|"true"
operator|.
name|equals
argument_list|(
name|value
argument_list|)
operator|||
literal|"false"
operator|.
name|equals
argument_list|(
name|value
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|protected
name|byte
index|[]
name|getBytes
parameter_list|(
specifier|final
name|Resource
name|item
parameter_list|)
throws|throws
name|XMLDBException
block|{
return|return
operator|(
name|byte
index|[]
operator|)
name|item
operator|.
name|getContent
argument_list|()
return|;
block|}
annotation|@
name|Override
specifier|protected
name|boolean
name|getBoolean
parameter_list|(
specifier|final
name|Resource
name|item
parameter_list|)
throws|throws
name|XMLDBException
block|{
return|return
name|Boolean
operator|.
name|parseBoolean
argument_list|(
name|item
operator|.
name|getContent
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|)
return|;
block|}
block|}
end_class

end_unit

