begin_unit|revision:1.0.0;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  *  eXist EXPath Zip Client Module zip file entry functions  *  Copyright (C) 2011 Adam Retter<adam@existsolutions.com>  *  www.existsolutions.com  *  *  This program is free software; you can redistribute it and/or  *  modify it under the terms of the GNU Lesser General Public License  *  as published by the Free Software Foundation; either version 2  *  of the License, or (at your option) any later version.  *  *  This program is distributed in the hope that it will be useful,  *  but WITHOUT ANY WARRANTY; without even the implied warranty of  *  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the  *  GNU Lesser General Public License for more details.  *  *  You should have received a copy of the GNU Lesser General Public License  *  along with this program; if not, write to the Free Software  *  Foundation, Inc., 675 Mass Ave, Cambridge, MA 02139, USA.  *  *  $Id$  */
end_comment

begin_package
package|package
name|org
operator|.
name|expath
operator|.
name|exist
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|InputStreamReader
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|Reader
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|zip
operator|.
name|ZipEntry
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|zip
operator|.
name|ZipInputStream
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|annotation
operator|.
name|Nullable
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|xml
operator|.
name|transform
operator|.
name|stream
operator|.
name|StreamSource
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|logging
operator|.
name|log4j
operator|.
name|LogManager
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|logging
operator|.
name|log4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|dom
operator|.
name|persistent
operator|.
name|BinaryDocument
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|dom
operator|.
name|QName
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|dom
operator|.
name|persistent
operator|.
name|DocumentImpl
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|dom
operator|.
name|persistent
operator|.
name|LockedDocument
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|security
operator|.
name|PermissionDeniedException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|storage
operator|.
name|DBBroker
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|storage
operator|.
name|lock
operator|.
name|Lock
operator|.
name|LockMode
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|xmldb
operator|.
name|XmldbURI
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|xquery
operator|.
name|BasicFunction
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|xquery
operator|.
name|Cardinality
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|xquery
operator|.
name|FunctionSignature
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|xquery
operator|.
name|XPathException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|xquery
operator|.
name|XQueryContext
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|xquery
operator|.
name|modules
operator|.
name|ModuleUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|xquery
operator|.
name|value
operator|.
name|AnyURIValue
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|xquery
operator|.
name|value
operator|.
name|Base64BinaryValueType
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|xquery
operator|.
name|value
operator|.
name|BinaryValue
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|xquery
operator|.
name|value
operator|.
name|BinaryValueFromInputStream
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|xquery
operator|.
name|value
operator|.
name|FunctionParameterSequenceType
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|xquery
operator|.
name|value
operator|.
name|FunctionReturnSequenceType
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|xquery
operator|.
name|value
operator|.
name|NodeValue
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|xquery
operator|.
name|value
operator|.
name|Sequence
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|xquery
operator|.
name|value
operator|.
name|SequenceType
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|xquery
operator|.
name|value
operator|.
name|Type
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|xquery
operator|.
name|value
operator|.
name|StringValue
import|;
end_import

begin_import
import|import
name|org
operator|.
name|xml
operator|.
name|sax
operator|.
name|SAXException
import|;
end_import

begin_import
import|import static
name|java
operator|.
name|nio
operator|.
name|charset
operator|.
name|StandardCharsets
operator|.
name|UTF_8
import|;
end_import

begin_comment
comment|/**  * @author<a href="mailto:adam@existsolutions.com">Adam Retter</a>  * @version EXPath Zip Client Module Candidate 12 October 2010 http://expath.org/spec/zip/20101012  */
end_comment

begin_class
specifier|public
class|class
name|ZipEntryFunctions
extends|extends
name|BasicFunction
block|{
specifier|protected
specifier|static
specifier|final
name|Logger
name|LOG
init|=
name|LogManager
operator|.
name|getLogger
argument_list|(
name|ZipEntryFunctions
operator|.
name|class
argument_list|)
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|FunctionParameterSequenceType
name|HREF_PARAM
init|=
operator|new
name|FunctionParameterSequenceType
argument_list|(
literal|"href"
argument_list|,
name|Type
operator|.
name|ANY_URI
argument_list|,
name|Cardinality
operator|.
name|EXACTLY_ONE
argument_list|,
literal|"The URI for locating the Zip file"
argument_list|)
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|FunctionParameterSequenceType
name|ENTRY_PARAM
init|=
operator|new
name|FunctionParameterSequenceType
argument_list|(
literal|"entry"
argument_list|,
name|Type
operator|.
name|STRING
argument_list|,
name|Cardinality
operator|.
name|EXACTLY_ONE
argument_list|,
literal|"The entry within the Zip file to address"
argument_list|)
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|String
name|BINARY_ENTRY_NAME
init|=
literal|"binary-entry"
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|String
name|HTML_ENTRY_NAME
init|=
literal|"html-entry"
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|String
name|TEXT_ENTRY_NAME
init|=
literal|"text-entry"
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|String
name|XML_ENTRY_NAME
init|=
literal|"xml-entry"
decl_stmt|;
specifier|public
specifier|static
specifier|final
name|FunctionSignature
name|signatures
index|[]
init|=
block|{
comment|//zip:binary-entry($href as xs:anyURI, $entry as xs:string) as xs:base64Binary
operator|new
name|FunctionSignature
argument_list|(
operator|new
name|QName
argument_list|(
name|BINARY_ENTRY_NAME
argument_list|,
name|ZipModule
operator|.
name|NAMESPACE_URI
argument_list|,
name|ZipModule
operator|.
name|PREFIX
argument_list|)
argument_list|,
literal|"Extracts the binary stream from the file positioned at $entry within the ZIP file identified by $href and returns it as a Base64 item."
argument_list|,
operator|new
name|SequenceType
index|[]
block|{
name|HREF_PARAM
block|,
name|ENTRY_PARAM
block|}
argument_list|,
operator|new
name|FunctionReturnSequenceType
argument_list|(
name|Type
operator|.
name|BASE64_BINARY
argument_list|,
name|Cardinality
operator|.
name|EXACTLY_ONE
argument_list|,
literal|"The binary representation of the entry from the Zip file."
argument_list|)
argument_list|)
block|,
comment|//zip:html-entry($href as xs:anyURI, $entry as xs:string) as document-node()
operator|new
name|FunctionSignature
argument_list|(
operator|new
name|QName
argument_list|(
name|HTML_ENTRY_NAME
argument_list|,
name|ZipModule
operator|.
name|NAMESPACE_URI
argument_list|,
name|ZipModule
operator|.
name|PREFIX
argument_list|)
argument_list|,
literal|"Extracts the html file positioned at $entry within the ZIP file identified by $href, and returns a document node. Because an HTML document is not necessarily a well-formed XML document, an implementation may use a specific parser in order to produce an XDM document node, like [TagSoup] or [HTML Tidy]; the details of this process are implementation-defined."
argument_list|,
operator|new
name|SequenceType
index|[]
block|{
name|HREF_PARAM
block|,
name|ENTRY_PARAM
block|}
argument_list|,
operator|new
name|FunctionReturnSequenceType
argument_list|(
name|Type
operator|.
name|DOCUMENT
argument_list|,
name|Cardinality
operator|.
name|EXACTLY_ONE
argument_list|,
literal|"The document-node of the entry from the Zip file."
argument_list|)
argument_list|)
block|,
comment|//zip:text-entry($href as xs:anyURI, $entry as xs:string) as xs:string
operator|new
name|FunctionSignature
argument_list|(
operator|new
name|QName
argument_list|(
name|TEXT_ENTRY_NAME
argument_list|,
name|ZipModule
operator|.
name|NAMESPACE_URI
argument_list|,
name|ZipModule
operator|.
name|PREFIX
argument_list|)
argument_list|,
literal|"Extracts the contents of the text file positioned at entry within the ZIP file identified by $href and returns it as a string."
argument_list|,
operator|new
name|SequenceType
index|[]
block|{
name|HREF_PARAM
block|,
name|ENTRY_PARAM
block|}
argument_list|,
operator|new
name|FunctionReturnSequenceType
argument_list|(
name|Type
operator|.
name|STRING
argument_list|,
name|Cardinality
operator|.
name|EXACTLY_ONE
argument_list|,
literal|"The string value of the entry from the Zip file."
argument_list|)
argument_list|)
block|,
comment|//zip:xml-entry($href as xs:anyURI, $entry as xs:string) as document-node()
operator|new
name|FunctionSignature
argument_list|(
operator|new
name|QName
argument_list|(
name|XML_ENTRY_NAME
argument_list|,
name|ZipModule
operator|.
name|NAMESPACE_URI
argument_list|,
name|ZipModule
operator|.
name|PREFIX
argument_list|)
argument_list|,
literal|"Extracts the content from the XML file positioned at $entry within the ZIP file identified by $href and returns it as a document-node."
argument_list|,
operator|new
name|SequenceType
index|[]
block|{
name|HREF_PARAM
block|,
name|ENTRY_PARAM
block|}
argument_list|,
operator|new
name|FunctionReturnSequenceType
argument_list|(
name|Type
operator|.
name|DOCUMENT
argument_list|,
name|Cardinality
operator|.
name|EXACTLY_ONE
argument_list|,
literal|"The document-node of the entry from the Zip file."
argument_list|)
argument_list|)
block|}
decl_stmt|;
comment|/**      * SendRequestFunction Constructor      *      * @param context   The Context of the calling XQuery      * @param signature The actual signature of the function      */
specifier|public
name|ZipEntryFunctions
parameter_list|(
specifier|final
name|XQueryContext
name|context
parameter_list|,
specifier|final
name|FunctionSignature
name|signature
parameter_list|)
block|{
name|super
argument_list|(
name|context
argument_list|,
name|signature
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|Sequence
name|eval
parameter_list|(
specifier|final
name|Sequence
index|[]
name|args
parameter_list|,
specifier|final
name|Sequence
name|contextSequence
parameter_list|)
throws|throws
name|XPathException
block|{
specifier|final
name|XmldbURI
name|uri
init|=
operator|(
operator|(
name|AnyURIValue
operator|)
name|args
index|[
literal|0
index|]
operator|.
name|itemAt
argument_list|(
literal|0
argument_list|)
operator|)
operator|.
name|toXmldbURI
argument_list|()
decl_stmt|;
specifier|final
name|String
name|entryName
init|=
name|args
index|[
literal|1
index|]
operator|.
name|itemAt
argument_list|(
literal|0
argument_list|)
operator|.
name|getStringValue
argument_list|()
decl_stmt|;
specifier|final
name|ZipFileSource
name|zipFileSource
init|=
operator|new
name|ZipFileFromDb
argument_list|(
name|uri
argument_list|)
decl_stmt|;
name|ZipInputStream
name|zis
init|=
literal|null
decl_stmt|;
name|boolean
name|mustClose
init|=
literal|true
decl_stmt|;
name|Sequence
name|result
init|=
name|Sequence
operator|.
name|EMPTY_SEQUENCE
decl_stmt|;
try|try
block|{
name|zis
operator|=
name|zipFileSource
operator|.
name|getStream
argument_list|(
name|context
operator|.
name|getBroker
argument_list|()
argument_list|)
expr_stmt|;
name|ZipEntry
name|zipEntry
decl_stmt|;
while|while
condition|(
operator|(
name|zipEntry
operator|=
name|zis
operator|.
name|getNextEntry
argument_list|()
operator|)
operator|!=
literal|null
condition|)
block|{
try|try
block|{
if|if
condition|(
name|zipEntry
operator|.
name|getName
argument_list|()
operator|.
name|equals
argument_list|(
name|entryName
argument_list|)
condition|)
block|{
comment|//process
if|if
condition|(
name|isCalledAs
argument_list|(
name|BINARY_ENTRY_NAME
argument_list|)
condition|)
block|{
name|result
operator|=
name|extractBinaryEntry
argument_list|(
name|zis
argument_list|)
expr_stmt|;
name|mustClose
operator|=
literal|false
expr_stmt|;
block|}
if|else if
condition|(
name|isCalledAs
argument_list|(
name|HTML_ENTRY_NAME
argument_list|)
condition|)
block|{
name|result
operator|=
name|extractHtmlEntry
argument_list|(
name|zis
argument_list|)
expr_stmt|;
block|}
if|else if
condition|(
name|isCalledAs
argument_list|(
name|TEXT_ENTRY_NAME
argument_list|)
condition|)
block|{
name|result
operator|=
name|extractStringEntry
argument_list|(
name|zis
argument_list|)
expr_stmt|;
block|}
if|else if
condition|(
name|isCalledAs
argument_list|(
name|XML_ENTRY_NAME
argument_list|)
condition|)
block|{
name|result
operator|=
name|extractXmlEntry
argument_list|(
name|zis
argument_list|)
expr_stmt|;
block|}
break|break;
block|}
block|}
finally|finally
block|{
comment|//DONT need to close as the extract functions
comment|//close the stream on the zip entry
comment|/*if(mustClose) {                         zis.closeEntry();                     }*/
block|}
block|}
block|}
catch|catch
parameter_list|(
specifier|final
name|IOException
decl||
name|PermissionDeniedException
name|ioe
parameter_list|)
block|{
name|LOG
operator|.
name|error
argument_list|(
name|ioe
operator|.
name|getMessage
argument_list|()
argument_list|,
name|ioe
argument_list|)
expr_stmt|;
throw|throw
operator|new
name|XPathException
argument_list|(
name|this
argument_list|,
name|ioe
operator|.
name|getMessage
argument_list|()
argument_list|,
name|ioe
argument_list|)
throw|;
block|}
finally|finally
block|{
if|if
condition|(
name|zis
operator|!=
literal|null
operator|&&
name|mustClose
condition|)
block|{
try|try
block|{
name|zis
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
specifier|final
name|IOException
name|ioe
parameter_list|)
block|{
name|LOG
operator|.
name|warn
argument_list|(
name|ioe
operator|.
name|getMessage
argument_list|()
argument_list|,
name|ioe
argument_list|)
expr_stmt|;
block|}
block|}
name|zipFileSource
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
return|return
name|result
return|;
block|}
specifier|private
name|BinaryValue
name|extractBinaryEntry
parameter_list|(
specifier|final
name|ZipInputStream
name|zis
parameter_list|)
throws|throws
name|XPathException
block|{
return|return
name|BinaryValueFromInputStream
operator|.
name|getInstance
argument_list|(
name|context
argument_list|,
operator|new
name|Base64BinaryValueType
argument_list|()
argument_list|,
name|zis
argument_list|)
return|;
block|}
specifier|private
name|StringValue
name|extractStringEntry
parameter_list|(
specifier|final
name|ZipInputStream
name|zis
parameter_list|)
throws|throws
name|XPathException
throws|,
name|IOException
block|{
specifier|final
name|char
name|buf
index|[]
init|=
operator|new
name|char
index|[
literal|4096
index|]
decl_stmt|;
specifier|final
name|StringBuilder
name|builder
init|=
operator|new
name|StringBuilder
argument_list|()
decl_stmt|;
name|int
name|read
init|=
operator|-
literal|1
decl_stmt|;
try|try
init|(
specifier|final
name|Reader
name|reader
init|=
operator|new
name|InputStreamReader
argument_list|(
name|zis
argument_list|,
name|UTF_8
argument_list|)
init|)
block|{
while|while
condition|(
operator|(
name|read
operator|=
name|reader
operator|.
name|read
argument_list|(
name|buf
argument_list|)
operator|)
operator|>
operator|-
literal|1
condition|)
block|{
name|builder
operator|.
name|append
argument_list|(
name|buf
argument_list|,
literal|0
argument_list|,
name|read
argument_list|)
expr_stmt|;
block|}
block|}
return|return
operator|new
name|StringValue
argument_list|(
name|builder
operator|.
name|toString
argument_list|()
argument_list|)
return|;
block|}
specifier|private
name|org
operator|.
name|exist
operator|.
name|dom
operator|.
name|memtree
operator|.
name|DocumentImpl
name|extractHtmlEntry
parameter_list|(
specifier|final
name|ZipInputStream
name|zis
parameter_list|)
throws|throws
name|XPathException
block|{
try|try
block|{
return|return
name|ModuleUtils
operator|.
name|htmlToXHtml
argument_list|(
name|context
argument_list|,
operator|new
name|StreamSource
argument_list|(
name|zis
argument_list|)
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|)
return|;
block|}
catch|catch
parameter_list|(
specifier|final
name|SAXException
decl||
name|IOException
name|saxe
parameter_list|)
block|{
throw|throw
operator|new
name|XPathException
argument_list|(
name|this
argument_list|,
name|saxe
operator|.
name|getMessage
argument_list|()
argument_list|,
name|saxe
argument_list|)
throw|;
block|}
block|}
specifier|private
name|NodeValue
name|extractXmlEntry
parameter_list|(
specifier|final
name|ZipInputStream
name|zis
parameter_list|)
throws|throws
name|XPathException
block|{
try|try
block|{
return|return
name|ModuleUtils
operator|.
name|streamToXML
argument_list|(
name|context
argument_list|,
name|zis
argument_list|)
return|;
block|}
catch|catch
parameter_list|(
specifier|final
name|SAXException
decl||
name|IOException
name|saxe
parameter_list|)
block|{
throw|throw
operator|new
name|XPathException
argument_list|(
name|this
argument_list|,
name|saxe
operator|.
name|getMessage
argument_list|()
argument_list|,
name|saxe
argument_list|)
throw|;
block|}
block|}
specifier|public
interface|interface
name|ZipFileSource
extends|extends
name|AutoCloseable
block|{
name|ZipInputStream
name|getStream
parameter_list|(
specifier|final
name|DBBroker
name|broker
parameter_list|)
throws|throws
name|IOException
throws|,
name|PermissionDeniedException
function_decl|;
annotation|@
name|Override
name|void
name|close
parameter_list|()
function_decl|;
block|}
specifier|protected
specifier|static
class|class
name|ZipFileFromDb
implements|implements
name|ZipFileSource
block|{
specifier|private
name|LockedDocument
name|binaryDoc
init|=
literal|null
decl_stmt|;
specifier|private
specifier|final
name|XmldbURI
name|uri
decl_stmt|;
specifier|public
name|ZipFileFromDb
parameter_list|(
specifier|final
name|XmldbURI
name|uri
parameter_list|)
block|{
name|this
operator|.
name|uri
operator|=
name|uri
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|ZipInputStream
name|getStream
parameter_list|(
specifier|final
name|DBBroker
name|broker
parameter_list|)
throws|throws
name|IOException
throws|,
name|PermissionDeniedException
block|{
if|if
condition|(
name|binaryDoc
operator|==
literal|null
condition|)
block|{
name|binaryDoc
operator|=
name|getDoc
argument_list|(
name|broker
argument_list|)
expr_stmt|;
block|}
return|return
operator|new
name|ZipInputStream
argument_list|(
name|broker
operator|.
name|getBinaryResource
argument_list|(
operator|(
name|BinaryDocument
operator|)
name|binaryDoc
operator|.
name|getDocument
argument_list|()
argument_list|)
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|close
parameter_list|()
block|{
if|if
condition|(
name|binaryDoc
operator|!=
literal|null
condition|)
block|{
name|binaryDoc
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
block|}
comment|/**          * @return only binary document otherwise null          */
annotation|@
name|Nullable
specifier|private
name|LockedDocument
name|getDoc
parameter_list|(
specifier|final
name|DBBroker
name|broker
parameter_list|)
throws|throws
name|PermissionDeniedException
block|{
specifier|final
name|LockedDocument
name|lockedDoc
init|=
name|broker
operator|.
name|getXMLResource
argument_list|(
name|uri
argument_list|,
name|LockMode
operator|.
name|READ_LOCK
argument_list|)
decl_stmt|;
if|if
condition|(
name|lockedDoc
operator|==
literal|null
condition|)
block|{
return|return
literal|null
return|;
block|}
if|else if
condition|(
name|lockedDoc
operator|.
name|getDocument
argument_list|()
operator|.
name|getResourceType
argument_list|()
operator|!=
name|DocumentImpl
operator|.
name|BINARY_FILE
condition|)
block|{
name|lockedDoc
operator|.
name|close
argument_list|()
expr_stmt|;
return|return
literal|null
return|;
block|}
return|return
name|lockedDoc
return|;
block|}
block|}
block|}
end_class

end_unit

