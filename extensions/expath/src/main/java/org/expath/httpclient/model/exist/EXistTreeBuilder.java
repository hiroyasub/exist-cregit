begin_unit|revision:1.0.0;language:Java;cregit-version:0.0.1
begin_package
package|package
name|org
operator|.
name|expath
operator|.
name|httpclient
operator|.
name|model
operator|.
name|exist
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|http
operator|.
name|Header
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|dom
operator|.
name|QName
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|dom
operator|.
name|memtree
operator|.
name|DocumentImpl
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|dom
operator|.
name|memtree
operator|.
name|MemTreeBuilder
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|xquery
operator|.
name|XQueryContext
import|;
end_import

begin_import
import|import
name|org
operator|.
name|expath
operator|.
name|httpclient
operator|.
name|HeaderSet
import|;
end_import

begin_import
import|import
name|org
operator|.
name|expath
operator|.
name|httpclient
operator|.
name|HttpClientException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|expath
operator|.
name|httpclient
operator|.
name|HttpConstants
import|;
end_import

begin_import
import|import
name|org
operator|.
name|expath
operator|.
name|httpclient
operator|.
name|model
operator|.
name|TreeBuilder
import|;
end_import

begin_import
import|import
name|org
operator|.
name|expath
operator|.
name|tools
operator|.
name|ToolsException
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|xml
operator|.
name|XMLConstants
import|;
end_import

begin_comment
comment|/**  * @author<a href="mailto:adam@existsolutions.com">Adam Retter</a>  */
end_comment

begin_class
specifier|public
class|class
name|EXistTreeBuilder
implements|implements
name|TreeBuilder
block|{
specifier|final
name|MemTreeBuilder
name|builder
decl_stmt|;
specifier|public
name|EXistTreeBuilder
parameter_list|(
specifier|final
name|XQueryContext
name|context
parameter_list|)
block|{
name|builder
operator|=
name|context
operator|.
name|getDocumentBuilder
argument_list|()
expr_stmt|;
name|builder
operator|.
name|startDocument
argument_list|()
expr_stmt|;
block|}
comment|//TODO EXPath Caller should send QName, otherwise we duplicate code and reduce reuse!
annotation|@
name|Override
specifier|public
name|void
name|startElem
parameter_list|(
specifier|final
name|String
name|localname
parameter_list|)
throws|throws
name|ToolsException
block|{
specifier|final
name|String
name|prefix
init|=
name|HttpConstants
operator|.
name|HTTP_CLIENT_NS_PREFIX
decl_stmt|;
specifier|final
name|String
name|uri
init|=
name|HttpConstants
operator|.
name|HTTP_CLIENT_NS_URI
decl_stmt|;
name|builder
operator|.
name|startElement
argument_list|(
operator|new
name|QName
argument_list|(
name|localname
argument_list|,
name|uri
argument_list|,
name|prefix
argument_list|)
argument_list|,
literal|null
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|attribute
parameter_list|(
specifier|final
name|String
name|localname
parameter_list|,
specifier|final
name|CharSequence
name|value
parameter_list|)
throws|throws
name|ToolsException
block|{
name|builder
operator|.
name|addAttribute
argument_list|(
operator|new
name|QName
argument_list|(
name|localname
argument_list|,
name|XMLConstants
operator|.
name|NULL_NS_URI
argument_list|)
argument_list|,
name|value
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|startContent
parameter_list|()
throws|throws
name|ToolsException
block|{
comment|//TODO this is not needed in eXist-db, it is very saxon specific
block|}
annotation|@
name|Override
specifier|public
name|void
name|endElem
parameter_list|()
throws|throws
name|ToolsException
block|{
name|builder
operator|.
name|endElement
argument_list|()
expr_stmt|;
block|}
specifier|public
name|DocumentImpl
name|close
parameter_list|()
block|{
name|builder
operator|.
name|endDocument
argument_list|()
expr_stmt|;
return|return
name|builder
operator|.
name|getDocument
argument_list|()
return|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|outputHeaders
parameter_list|(
name|HeaderSet
name|headers
parameter_list|)
throws|throws
name|HttpClientException
block|{
for|for
control|(
name|Header
name|h
range|:
name|headers
control|)
block|{
assert|assert
name|h
operator|.
name|getName
argument_list|()
operator|!=
literal|null
operator|:
literal|"Header name cannot be null"
assert|;
name|String
name|name
init|=
name|h
operator|.
name|getName
argument_list|()
operator|.
name|toLowerCase
argument_list|()
decl_stmt|;
try|try
block|{
name|startElem
argument_list|(
literal|"header"
argument_list|)
expr_stmt|;
name|attribute
argument_list|(
literal|"name"
argument_list|,
name|name
argument_list|)
expr_stmt|;
name|attribute
argument_list|(
literal|"value"
argument_list|,
name|h
operator|.
name|getValue
argument_list|()
argument_list|)
expr_stmt|;
comment|//startContent();
name|endElem
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|ToolsException
name|ex
parameter_list|)
block|{
throw|throw
operator|new
name|HttpClientException
argument_list|(
literal|"Error building the header "
operator|+
name|name
argument_list|,
name|ex
argument_list|)
throw|;
block|}
block|}
block|}
block|}
end_class

end_unit

