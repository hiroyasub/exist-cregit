begin_unit|revision:1.0.0;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  *  eXist EXPath  *  Copyright (C) 2011 Adam Retter<adam@existsolutions.com>  *  www.existsolutions.com  *    *  This program is free software; you can redistribute it and/or  *  modify it under the terms of the GNU Lesser General Public License  *  as published by the Free Software Foundation; either version 2  *  of the License, or (at your option) any later version.  *    *  This program is distributed in the hope that it will be useful,  *  but WITHOUT ANY WARRANTY; without even the implied warranty of  *  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the  *  GNU Lesser General Public License for more details.  *    *  You should have received a copy of the GNU Lesser General Public License  *  along with this program; if not, write to the Free Software  *  Foundation, Inc., 675 Mass Ave, Cambridge, MA 02139, USA.  *    *  $Id$  */
end_comment

begin_package
package|package
name|org
operator|.
name|expath
operator|.
name|tools
operator|.
name|model
operator|.
name|exist
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|OutputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|OutputStreamWriter
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|Writer
import|;
end_import

begin_import
import|import
name|java
operator|.
name|nio
operator|.
name|charset
operator|.
name|StandardCharsets
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Properties
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|xml
operator|.
name|XMLConstants
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|xml
operator|.
name|namespace
operator|.
name|QName
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|xml
operator|.
name|transform
operator|.
name|OutputKeys
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|io
operator|.
name|output
operator|.
name|CloseShieldOutputStream
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|storage
operator|.
name|serializers
operator|.
name|Serializer
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|util
operator|.
name|serializer
operator|.
name|XQuerySerializer
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|xquery
operator|.
name|XPathException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|xquery
operator|.
name|XQueryContext
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|xquery
operator|.
name|value
operator|.
name|Item
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|xquery
operator|.
name|value
operator|.
name|SequenceIterator
import|;
end_import

begin_import
import|import
name|org
operator|.
name|expath
operator|.
name|tools
operator|.
name|ToolsException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|expath
operator|.
name|tools
operator|.
name|model
operator|.
name|Sequence
import|;
end_import

begin_import
import|import
name|org
operator|.
name|expath
operator|.
name|tools
operator|.
name|serial
operator|.
name|SerialParameters
import|;
end_import

begin_import
import|import
name|org
operator|.
name|xml
operator|.
name|sax
operator|.
name|SAXException
import|;
end_import

begin_comment
comment|/**  * @author<a href="mailto:adam@existsolutions.com">Adam Retter</a>  */
end_comment

begin_class
specifier|public
class|class
name|EXistSequence
implements|implements
name|Sequence
block|{
specifier|private
specifier|final
name|org
operator|.
name|exist
operator|.
name|xquery
operator|.
name|value
operator|.
name|Sequence
name|sequence
decl_stmt|;
specifier|private
name|SequenceIterator
name|sequenceIterator
init|=
name|SequenceIterator
operator|.
name|EMPTY_ITERATOR
decl_stmt|;
specifier|private
specifier|final
name|XQueryContext
name|context
decl_stmt|;
specifier|public
name|EXistSequence
parameter_list|(
specifier|final
name|org
operator|.
name|exist
operator|.
name|xquery
operator|.
name|value
operator|.
name|Sequence
name|sequence
parameter_list|,
specifier|final
name|XQueryContext
name|context
parameter_list|)
throws|throws
name|XPathException
block|{
name|this
operator|.
name|sequence
operator|=
name|sequence
expr_stmt|;
if|if
condition|(
name|sequence
operator|!=
literal|null
condition|)
block|{
name|this
operator|.
name|sequenceIterator
operator|=
name|sequence
operator|.
name|iterate
argument_list|()
expr_stmt|;
block|}
name|this
operator|.
name|context
operator|=
name|context
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|isEmpty
parameter_list|()
throws|throws
name|ToolsException
block|{
return|return
name|sequence
operator|.
name|isEmpty
argument_list|()
return|;
block|}
annotation|@
name|Override
specifier|public
name|Sequence
name|next
parameter_list|()
throws|throws
name|ToolsException
block|{
try|try
block|{
specifier|final
name|Item
name|item
init|=
name|sequenceIterator
operator|.
name|nextItem
argument_list|()
decl_stmt|;
specifier|final
name|org
operator|.
name|exist
operator|.
name|xquery
operator|.
name|value
operator|.
name|Sequence
name|singleton
init|=
operator|(
name|org
operator|.
name|exist
operator|.
name|xquery
operator|.
name|value
operator|.
name|Sequence
operator|)
name|item
decl_stmt|;
return|return
operator|new
name|EXistSequence
argument_list|(
name|singleton
argument_list|,
name|context
argument_list|)
return|;
block|}
catch|catch
parameter_list|(
specifier|final
name|XPathException
name|xpe
parameter_list|)
block|{
throw|throw
operator|new
name|ToolsException
argument_list|(
name|xpe
operator|.
name|getMessage
argument_list|()
argument_list|,
name|xpe
argument_list|)
throw|;
block|}
block|}
annotation|@
name|Override
specifier|public
name|void
name|serialize
parameter_list|(
specifier|final
name|OutputStream
name|out
parameter_list|,
specifier|final
name|SerialParameters
name|params
parameter_list|)
throws|throws
name|ToolsException
block|{
specifier|final
name|Properties
name|props
init|=
name|params
operator|==
literal|null
condition|?
literal|null
else|:
name|makeOutputProperties
argument_list|(
name|params
argument_list|)
decl_stmt|;
name|props
operator|.
name|setProperty
argument_list|(
name|Serializer
operator|.
name|GENERATE_DOC_EVENTS
argument_list|,
literal|"false"
argument_list|)
expr_stmt|;
specifier|final
name|String
name|encoding
init|=
name|props
operator|.
name|getProperty
argument_list|(
name|OutputKeys
operator|.
name|ENCODING
argument_list|,
name|StandardCharsets
operator|.
name|UTF_8
operator|.
name|name
argument_list|()
argument_list|)
decl_stmt|;
try|try
init|(
specifier|final
name|Writer
name|writer
init|=
operator|new
name|OutputStreamWriter
argument_list|(
operator|new
name|CloseShieldOutputStream
argument_list|(
name|out
argument_list|)
argument_list|,
name|encoding
argument_list|)
init|)
block|{
specifier|final
name|XQuerySerializer
name|xqSerializer
init|=
operator|new
name|XQuerySerializer
argument_list|(
name|context
operator|.
name|getBroker
argument_list|()
argument_list|,
name|props
argument_list|,
name|writer
argument_list|)
decl_stmt|;
name|xqSerializer
operator|.
name|serialize
argument_list|(
name|sequence
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
specifier|final
name|SAXException
decl||
name|IOException
decl||
name|XPathException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|ToolsException
argument_list|(
literal|"A problem occurred while serializing the node set: "
operator|+
name|e
operator|.
name|getMessage
argument_list|()
argument_list|,
name|e
argument_list|)
throw|;
block|}
block|}
comment|/**      * Borrowed from {@link org.expath.tools.saxon.model.SaxonSequence}      */
specifier|private
name|Properties
name|makeOutputProperties
parameter_list|(
specifier|final
name|SerialParameters
name|params
parameter_list|)
throws|throws
name|ToolsException
block|{
specifier|final
name|Properties
name|props
init|=
operator|new
name|Properties
argument_list|()
decl_stmt|;
name|setOutputKey
argument_list|(
name|props
argument_list|,
name|OutputKeys
operator|.
name|METHOD
argument_list|,
name|params
operator|.
name|getMethod
argument_list|()
argument_list|)
expr_stmt|;
name|setOutputKey
argument_list|(
name|props
argument_list|,
name|OutputKeys
operator|.
name|MEDIA_TYPE
argument_list|,
name|params
operator|.
name|getMediaType
argument_list|()
argument_list|)
expr_stmt|;
name|setOutputKey
argument_list|(
name|props
argument_list|,
name|OutputKeys
operator|.
name|ENCODING
argument_list|,
name|params
operator|.
name|getEncoding
argument_list|()
argument_list|)
expr_stmt|;
name|setOutputKey
argument_list|(
name|props
argument_list|,
name|OutputKeys
operator|.
name|CDATA_SECTION_ELEMENTS
argument_list|,
name|params
operator|.
name|getCdataSectionElements
argument_list|()
argument_list|)
expr_stmt|;
name|setOutputKey
argument_list|(
name|props
argument_list|,
name|OutputKeys
operator|.
name|DOCTYPE_PUBLIC
argument_list|,
name|params
operator|.
name|getDoctypePublic
argument_list|()
argument_list|)
expr_stmt|;
name|setOutputKey
argument_list|(
name|props
argument_list|,
name|OutputKeys
operator|.
name|DOCTYPE_SYSTEM
argument_list|,
name|params
operator|.
name|getDoctypeSystem
argument_list|()
argument_list|)
expr_stmt|;
name|setOutputKey
argument_list|(
name|props
argument_list|,
name|OutputKeys
operator|.
name|INDENT
argument_list|,
name|params
operator|.
name|getIndent
argument_list|()
argument_list|)
expr_stmt|;
name|setOutputKey
argument_list|(
name|props
argument_list|,
name|OutputKeys
operator|.
name|OMIT_XML_DECLARATION
argument_list|,
name|params
operator|.
name|getOmitXmlDeclaration
argument_list|()
argument_list|)
expr_stmt|;
name|setOutputKey
argument_list|(
name|props
argument_list|,
name|OutputKeys
operator|.
name|STANDALONE
argument_list|,
name|params
operator|.
name|getStandalone
argument_list|()
argument_list|)
expr_stmt|;
name|setOutputKey
argument_list|(
name|props
argument_list|,
name|OutputKeys
operator|.
name|VERSION
argument_list|,
name|params
operator|.
name|getVersion
argument_list|()
argument_list|)
expr_stmt|;
return|return
name|props
return|;
block|}
specifier|private
name|void
name|setOutputKey
parameter_list|(
name|Properties
name|props
parameter_list|,
name|String
name|name
parameter_list|,
name|String
name|value
parameter_list|)
throws|throws
name|ToolsException
block|{
if|if
condition|(
name|value
operator|!=
literal|null
condition|)
block|{
name|props
operator|.
name|setProperty
argument_list|(
name|name
argument_list|,
name|value
argument_list|)
expr_stmt|;
block|}
block|}
specifier|private
name|void
name|setOutputKey
parameter_list|(
name|Properties
name|props
parameter_list|,
name|String
name|name
parameter_list|,
name|Boolean
name|value
parameter_list|)
throws|throws
name|ToolsException
block|{
if|if
condition|(
name|value
operator|!=
literal|null
condition|)
block|{
name|props
operator|.
name|setProperty
argument_list|(
name|name
argument_list|,
name|value
condition|?
literal|"yes"
else|:
literal|"no"
argument_list|)
expr_stmt|;
block|}
block|}
specifier|private
name|void
name|setOutputKey
parameter_list|(
name|Properties
name|props
parameter_list|,
name|String
name|name
parameter_list|,
name|SerialParameters
operator|.
name|Standalone
name|value
parameter_list|)
throws|throws
name|ToolsException
block|{
if|if
condition|(
name|value
operator|!=
literal|null
condition|)
block|{
switch|switch
condition|(
name|value
condition|)
block|{
case|case
name|YES
case|:
name|props
operator|.
name|setProperty
argument_list|(
name|name
argument_list|,
literal|"yes"
argument_list|)
expr_stmt|;
break|break;
case|case
name|NO
case|:
name|props
operator|.
name|setProperty
argument_list|(
name|name
argument_list|,
literal|"no"
argument_list|)
expr_stmt|;
break|break;
case|case
name|OMIT
case|:
name|props
operator|.
name|setProperty
argument_list|(
name|name
argument_list|,
literal|"omit"
argument_list|)
expr_stmt|;
break|break;
default|default:
throw|throw
operator|new
name|ToolsException
argument_list|(
literal|"Invalid Standalone value: "
operator|+
name|value
argument_list|)
throw|;
block|}
block|}
block|}
specifier|private
name|void
name|setOutputKey
parameter_list|(
name|Properties
name|props
parameter_list|,
name|String
name|name
parameter_list|,
name|QName
name|value
parameter_list|)
throws|throws
name|ToolsException
block|{
if|if
condition|(
name|value
operator|!=
literal|null
condition|)
block|{
if|if
condition|(
name|value
operator|.
name|getNamespaceURI
argument_list|()
operator|!=
literal|null
operator|&&
operator|!
name|value
operator|.
name|getNamespaceURI
argument_list|()
operator|.
name|equals
argument_list|(
name|XMLConstants
operator|.
name|NULL_NS_URI
argument_list|)
condition|)
block|{
throw|throw
operator|new
name|ToolsException
argument_list|(
literal|"A QName with a non-null namespace not supported as a serialization param: {"
operator|+
name|value
operator|.
name|getNamespaceURI
argument_list|()
operator|+
literal|"}"
operator|+
name|value
operator|.
name|getLocalPart
argument_list|()
argument_list|)
throw|;
block|}
name|props
operator|.
name|setProperty
argument_list|(
name|name
argument_list|,
name|value
operator|.
name|getLocalPart
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
specifier|private
name|void
name|setOutputKey
parameter_list|(
name|Properties
name|props
parameter_list|,
name|String
name|name
parameter_list|,
name|Iterable
argument_list|<
name|QName
argument_list|>
name|value
parameter_list|)
throws|throws
name|ToolsException
block|{
if|if
condition|(
name|value
operator|!=
literal|null
condition|)
block|{
name|StringBuilder
name|buf
init|=
operator|new
name|StringBuilder
argument_list|()
decl_stmt|;
for|for
control|(
name|QName
name|qname
range|:
name|value
control|)
block|{
if|if
condition|(
name|qname
operator|.
name|getNamespaceURI
argument_list|()
operator|!=
literal|null
condition|)
block|{
throw|throw
operator|new
name|ToolsException
argument_list|(
literal|"A QName with a non-null namespace not supported as a serialization param: {"
operator|+
name|qname
operator|.
name|getNamespaceURI
argument_list|()
operator|+
literal|"}"
operator|+
name|qname
operator|.
name|getLocalPart
argument_list|()
argument_list|)
throw|;
block|}
name|buf
operator|.
name|append
argument_list|(
name|qname
operator|.
name|getLocalPart
argument_list|()
argument_list|)
expr_stmt|;
name|buf
operator|.
name|append
argument_list|(
literal|" "
argument_list|)
expr_stmt|;
block|}
name|props
operator|.
name|setProperty
argument_list|(
name|name
argument_list|,
name|buf
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
block|}
end_class

end_unit

