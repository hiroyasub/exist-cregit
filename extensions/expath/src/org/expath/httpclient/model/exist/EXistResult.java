begin_unit|revision:1.0.0;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  *  eXist EXPath  *  Copyright (C) 2013 Adam Retter<adam@existsolutions.com>  *  www.existsolutions.com  *    *  This program is free software; you can redistribute it and/or  *  modify it under the terms of the GNU Lesser General Public License  *  as published by the Free Software Foundation; either version 2  *  of the License, or (at your option) any later version.  *    *  This program is distributed in the hope that it will be useful,  *  but WITHOUT ANY WARRANTY; without even the implied warranty of  *  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the  *  GNU Lesser General Public License for more details.  *    *  You should have received a copy of the GNU Lesser General Public License  *  along with this program; if not, write to the Free Software  *  Foundation, Inc., 675 Mass Ave, Cambridge, MA 02139, USA.  *    *  $Id$  */
end_comment

begin_package
package|package
name|org
operator|.
name|expath
operator|.
name|httpclient
operator|.
name|model
operator|.
name|exist
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|InputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|Reader
import|;
end_import

begin_import
import|import
name|java
operator|.
name|nio
operator|.
name|charset
operator|.
name|Charset
import|;
end_import

begin_import
import|import
name|java
operator|.
name|nio
operator|.
name|file
operator|.
name|Files
import|;
end_import

begin_import
import|import
name|java
operator|.
name|nio
operator|.
name|file
operator|.
name|Path
import|;
end_import

begin_import
import|import
name|java
operator|.
name|nio
operator|.
name|file
operator|.
name|StandardCopyOption
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|xml
operator|.
name|transform
operator|.
name|Source
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|logging
operator|.
name|log4j
operator|.
name|LogManager
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|logging
operator|.
name|log4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|dom
operator|.
name|memtree
operator|.
name|DocumentImpl
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|util
operator|.
name|io
operator|.
name|TemporaryFileManager
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|xquery
operator|.
name|NodeTest
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|xquery
operator|.
name|TypeTest
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|xquery
operator|.
name|XPathException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|xquery
operator|.
name|XQueryContext
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|xquery
operator|.
name|modules
operator|.
name|ModuleUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|xquery
operator|.
name|value
operator|.
name|*
import|;
end_import

begin_import
import|import
name|org
operator|.
name|expath
operator|.
name|httpclient
operator|.
name|HttpClientException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|expath
operator|.
name|httpclient
operator|.
name|HttpResponse
import|;
end_import

begin_import
import|import
name|org
operator|.
name|expath
operator|.
name|httpclient
operator|.
name|model
operator|.
name|Result
import|;
end_import

begin_import
import|import
name|org
operator|.
name|xml
operator|.
name|sax
operator|.
name|SAXException
import|;
end_import

begin_comment
comment|/**  * @author Adam Retter<adam@existsolutions.com>  */
end_comment

begin_class
specifier|public
class|class
name|EXistResult
implements|implements
name|Result
block|{
specifier|private
specifier|static
specifier|final
name|Logger
name|logger
init|=
name|LogManager
operator|.
name|getLogger
argument_list|(
name|EXistResult
operator|.
name|class
argument_list|)
decl_stmt|;
name|ValueSequence
name|result
init|=
operator|new
name|ValueSequence
argument_list|()
decl_stmt|;
specifier|private
specifier|final
name|XQueryContext
name|context
decl_stmt|;
specifier|public
name|EXistResult
parameter_list|(
specifier|final
name|XQueryContext
name|context
parameter_list|)
block|{
name|this
operator|.
name|context
operator|=
name|context
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|Result
name|makeNewResult
parameter_list|()
throws|throws
name|HttpClientException
block|{
return|return
operator|new
name|EXistResult
argument_list|(
name|context
operator|.
name|copyContext
argument_list|()
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|add
parameter_list|(
specifier|final
name|Reader
name|reader
parameter_list|,
specifier|final
name|Charset
name|charset
parameter_list|)
throws|throws
name|HttpClientException
block|{
comment|// START TEMP
comment|//TODO(AR) - replace with a deferred StringReader when eXist has this soon.
specifier|final
name|StringBuilder
name|builder
init|=
operator|new
name|StringBuilder
argument_list|()
decl_stmt|;
try|try
block|{
specifier|final
name|char
name|cbuf
index|[]
init|=
operator|new
name|char
index|[
literal|4096
index|]
decl_stmt|;
name|int
name|read
init|=
operator|-
literal|1
decl_stmt|;
while|while
condition|(
operator|(
name|read
operator|=
name|reader
operator|.
name|read
argument_list|(
name|cbuf
argument_list|)
operator|)
operator|>
operator|-
literal|1
condition|)
block|{
name|builder
operator|.
name|append
argument_list|(
name|cbuf
argument_list|,
literal|0
argument_list|,
name|read
argument_list|)
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
specifier|final
name|IOException
name|ioe
parameter_list|)
block|{
throw|throw
operator|new
name|HttpClientException
argument_list|(
literal|"Unable to add string value to result: "
operator|+
name|ioe
operator|.
name|getMessage
argument_list|()
argument_list|,
name|ioe
argument_list|)
throw|;
block|}
finally|finally
block|{
try|try
block|{
name|reader
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
specifier|final
name|IOException
name|ioe
parameter_list|)
block|{
name|logger
operator|.
name|warn
argument_list|(
name|ioe
operator|.
name|getMessage
argument_list|()
argument_list|,
name|ioe
argument_list|)
expr_stmt|;
block|}
block|}
comment|// END TEMP
name|result
operator|.
name|add
argument_list|(
operator|new
name|StringValue
argument_list|(
name|builder
operator|.
name|toString
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|add
parameter_list|(
specifier|final
name|InputStream
name|is
parameter_list|)
throws|throws
name|HttpClientException
block|{
try|try
block|{
comment|// we have to make a temporary copy of the data stream, as the socket will be closed shortly
specifier|final
name|TemporaryFileManager
name|temporaryFileManager
init|=
name|TemporaryFileManager
operator|.
name|getInstance
argument_list|()
decl_stmt|;
specifier|final
name|Path
name|tempFile
init|=
name|temporaryFileManager
operator|.
name|getTemporaryFile
argument_list|()
decl_stmt|;
name|Files
operator|.
name|copy
argument_list|(
name|is
argument_list|,
name|tempFile
argument_list|,
name|StandardCopyOption
operator|.
name|REPLACE_EXISTING
argument_list|)
expr_stmt|;
name|result
operator|.
name|add
argument_list|(
name|BinaryValueFromFile
operator|.
name|getInstance
argument_list|(
name|context
argument_list|,
operator|new
name|Base64BinaryValueType
argument_list|()
argument_list|,
name|tempFile
argument_list|,
parameter_list|(
name|isClosed
parameter_list|,
name|file
parameter_list|)
lambda|->
name|temporaryFileManager
operator|.
name|returnTemporaryFile
argument_list|(
name|file
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
specifier|final
name|XPathException
decl||
name|IOException
name|xpe
parameter_list|)
block|{
throw|throw
operator|new
name|HttpClientException
argument_list|(
literal|"Unable to add binary value to result:"
operator|+
name|xpe
operator|.
name|getMessage
argument_list|()
argument_list|,
name|xpe
argument_list|)
throw|;
block|}
finally|finally
block|{
try|try
block|{
name|is
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
specifier|final
name|IOException
name|ioe
parameter_list|)
block|{
name|logger
operator|.
name|warn
argument_list|(
name|ioe
operator|.
name|getMessage
argument_list|()
argument_list|,
name|ioe
argument_list|)
expr_stmt|;
block|}
block|}
block|}
annotation|@
name|Override
specifier|public
name|void
name|add
parameter_list|(
specifier|final
name|Source
name|src
parameter_list|)
throws|throws
name|HttpClientException
block|{
try|try
block|{
specifier|final
name|NodeValue
name|nodeValue
init|=
name|ModuleUtils
operator|.
name|sourceToXML
argument_list|(
name|context
argument_list|,
name|src
argument_list|)
decl_stmt|;
name|result
operator|.
name|add
argument_list|(
name|nodeValue
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
specifier|final
name|SAXException
name|saxe
parameter_list|)
block|{
throw|throw
operator|new
name|HttpClientException
argument_list|(
literal|"Unable to add Source to result:"
operator|+
name|saxe
operator|.
name|getMessage
argument_list|()
argument_list|,
name|saxe
argument_list|)
throw|;
block|}
catch|catch
parameter_list|(
specifier|final
name|IOException
name|ioe
parameter_list|)
block|{
throw|throw
operator|new
name|HttpClientException
argument_list|(
literal|"Unable to add Source to result:"
operator|+
name|ioe
operator|.
name|getMessage
argument_list|()
argument_list|,
name|ioe
argument_list|)
throw|;
block|}
block|}
annotation|@
name|Override
specifier|public
name|void
name|add
parameter_list|(
specifier|final
name|HttpResponse
name|response
parameter_list|)
throws|throws
name|HttpClientException
block|{
specifier|final
name|EXistTreeBuilder
name|builder
init|=
operator|new
name|EXistTreeBuilder
argument_list|(
name|context
argument_list|)
decl_stmt|;
name|response
operator|.
name|outputResponseElement
argument_list|(
name|builder
argument_list|)
expr_stmt|;
specifier|final
name|DocumentImpl
name|doc
init|=
name|builder
operator|.
name|close
argument_list|()
decl_stmt|;
try|try
block|{
comment|// we add the root *element* to the result sequence
specifier|final
name|NodeTest
name|kind
init|=
operator|new
name|TypeTest
argument_list|(
name|Type
operator|.
name|ELEMENT
argument_list|)
decl_stmt|;
comment|// the elem must always be added at the front, so if there are
comment|// already other items, we create a new one, add the elem, then
comment|// add the original items after
if|if
condition|(
name|result
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|doc
operator|.
name|selectChildren
argument_list|(
name|kind
argument_list|,
name|result
argument_list|)
expr_stmt|;
block|}
else|else
block|{
specifier|final
name|ValueSequence
name|newResult
init|=
operator|new
name|ValueSequence
argument_list|()
decl_stmt|;
name|doc
operator|.
name|selectChildren
argument_list|(
name|kind
argument_list|,
name|newResult
argument_list|)
expr_stmt|;
name|newResult
operator|.
name|addAll
argument_list|(
name|result
argument_list|)
expr_stmt|;
name|result
operator|=
name|newResult
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
specifier|final
name|XPathException
name|xpe
parameter_list|)
block|{
throw|throw
operator|new
name|HttpClientException
argument_list|(
literal|"Unable to add HttpResponse to result:"
operator|+
name|xpe
operator|.
name|getMessage
argument_list|()
argument_list|,
name|xpe
argument_list|)
throw|;
block|}
block|}
specifier|public
name|Sequence
name|getResult
parameter_list|()
block|{
return|return
name|result
return|;
block|}
block|}
end_class

end_unit

