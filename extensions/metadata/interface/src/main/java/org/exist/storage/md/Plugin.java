begin_unit|revision:1.0.0;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  *  eXist Open Source Native XML Database  *  Copyright (C) 2012 The eXist Project  *  http://exist-db.org  *  *  This program is free software; you can redistribute it and/or  *  modify it under the terms of the GNU Lesser General Public License  *  as published by the Free Software Foundation; either version 2  *  of the License, or (at your option) any later version.  *  *  This program is distributed in the hope that it will be useful,  *  but WITHOUT ANY WARRANTY; without even the implied warranty of  *  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the  *  GNU Lesser General Public License for more details.  *  *  You should have received a copy of the GNU Lesser General Public  *  License along with this library; if not, write to the Free Software  *  Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA  02110-1301  USA  *  *  $Id$  */
end_comment

begin_package
package|package
name|org
operator|.
name|exist
operator|.
name|storage
operator|.
name|md
package|;
end_package

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|backup
operator|.
name|BackupHandler
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|collections
operator|.
name|Collection
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|dom
operator|.
name|DocumentAtExist
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|plugin
operator|.
name|Jack
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|plugin
operator|.
name|PluginsManager
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|security
operator|.
name|PermissionDeniedException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|util
operator|.
name|serializer
operator|.
name|SAXSerializer
import|;
end_import

begin_import
import|import
name|org
operator|.
name|xml
operator|.
name|sax
operator|.
name|SAXException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|xml
operator|.
name|sax
operator|.
name|helpers
operator|.
name|AttributesImpl
import|;
end_import

begin_import
import|import
name|com
operator|.
name|sleepycat
operator|.
name|persist
operator|.
name|EntityCursor
import|;
end_import

begin_comment
comment|/**  * @author<a href="mailto:shabanovd@gmail.com">Dmitriy Shabanov</a>  *  */
end_comment

begin_class
specifier|public
class|class
name|Plugin
implements|implements
name|Jack
implements|,
name|BackupHandler
block|{
specifier|public
specifier|final
specifier|static
name|String
name|PREFIX
init|=
literal|"md"
decl_stmt|;
specifier|public
specifier|final
specifier|static
name|String
name|NAMESPACE_URI
init|=
literal|"http://exist-db.org/metadata"
decl_stmt|;
name|MetaDataImpl
name|md
decl_stmt|;
specifier|public
name|Plugin
parameter_list|(
name|PluginsManager
name|manager
parameter_list|)
throws|throws
name|PermissionDeniedException
block|{
name|md
operator|=
operator|new
name|MetaDataImpl
argument_list|(
name|manager
operator|.
name|getDatabase
argument_list|()
argument_list|)
expr_stmt|;
name|manager
operator|.
name|getDatabase
argument_list|()
operator|.
name|getDocumentTriggers
argument_list|()
operator|.
name|add
argument_list|(
operator|new
name|DocumentEvents
argument_list|()
argument_list|)
expr_stmt|;
name|manager
operator|.
name|getDatabase
argument_list|()
operator|.
name|getCollectionTriggers
argument_list|()
operator|.
name|add
argument_list|(
operator|new
name|CollectionEvents
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|sync
parameter_list|()
block|{
name|md
operator|.
name|sync
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|stop
parameter_list|()
block|{
name|md
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|backup
parameter_list|(
name|Collection
name|colection
parameter_list|,
name|AttributesImpl
name|attrs
parameter_list|)
block|{
block|}
annotation|@
name|Override
specifier|public
name|void
name|backup
parameter_list|(
name|Collection
name|colection
parameter_list|,
name|SAXSerializer
name|serializer
parameter_list|)
throws|throws
name|SAXException
block|{
block|}
annotation|@
name|Override
specifier|public
name|void
name|backup
parameter_list|(
name|DocumentAtExist
name|document
parameter_list|,
name|AttributesImpl
name|attrs
parameter_list|)
block|{
name|Metas
name|ms
init|=
name|md
operator|.
name|getMetas
argument_list|(
name|document
argument_list|)
decl_stmt|;
name|attrs
operator|.
name|addAttribute
argument_list|(
name|NAMESPACE_URI
argument_list|,
literal|"uuid"
argument_list|,
name|PREFIX
operator|+
literal|":uuid"
argument_list|,
literal|"CDATA"
argument_list|,
name|ms
operator|.
name|getUUID
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|backup
parameter_list|(
name|DocumentAtExist
name|document
parameter_list|,
name|SAXSerializer
name|serializer
parameter_list|)
throws|throws
name|SAXException
block|{
name|Metas
name|ms
init|=
name|md
operator|.
name|getMetas
argument_list|(
name|document
argument_list|)
decl_stmt|;
name|EntityCursor
argument_list|<
name|MetaImpl
argument_list|>
name|sub
init|=
name|ms
operator|.
name|keys
argument_list|()
decl_stmt|;
try|try
block|{
for|for
control|(
name|MetaImpl
name|m
range|:
name|sub
control|)
block|{
name|AttributesImpl
name|attr
init|=
operator|new
name|AttributesImpl
argument_list|()
decl_stmt|;
name|attr
operator|.
name|addAttribute
argument_list|(
name|NAMESPACE_URI
argument_list|,
literal|"key"
argument_list|,
name|PREFIX
operator|+
literal|":key"
argument_list|,
literal|"CDATA"
argument_list|,
name|m
operator|.
name|getKey
argument_list|()
argument_list|)
expr_stmt|;
name|attr
operator|.
name|addAttribute
argument_list|(
name|NAMESPACE_URI
argument_list|,
literal|"value"
argument_list|,
name|PREFIX
operator|+
literal|":value"
argument_list|,
literal|"CDATA"
argument_list|,
name|m
operator|.
name|getValue
argument_list|()
argument_list|)
expr_stmt|;
name|serializer
operator|.
name|startElement
argument_list|(
name|NAMESPACE_URI
argument_list|,
literal|"meta"
argument_list|,
name|PREFIX
operator|+
literal|":meta"
argument_list|,
name|attr
argument_list|)
expr_stmt|;
name|serializer
operator|.
name|endElement
argument_list|(
name|NAMESPACE_URI
argument_list|,
literal|"meta"
argument_list|,
name|PREFIX
operator|+
literal|":meta"
argument_list|)
expr_stmt|;
block|}
block|}
finally|finally
block|{
name|sub
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
block|}
block|}
end_class

end_unit

