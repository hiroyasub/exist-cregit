begin_unit|revision:1.0.0;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  *  eXist Open Source Native XML Database  *  Copyright (C) 2001-2015 The eXist Project  *  http://exist-db.org  *  *  This program is free software; you can redistribute it and/or  *  modify it under the terms of the GNU Lesser General Public License  *  as published by the Free Software Foundation; either version 2  *  of the License, or (at your option) any later version.  *  *  This program is distributed in the hope that it will be useful,  *  but WITHOUT ANY WARRANTY; without even the implied warranty of  *  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the  *  GNU Lesser General Public License for more details.  *  *  You should have received a copy of the GNU Lesser General Public  *  License along with this library; if not, write to the Free Software  *  Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA  02110-1301  USA  */
end_comment

begin_package
package|package
name|org
operator|.
name|exist
operator|.
name|storage
operator|.
name|md
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|File
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|Database
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|EXistException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|collections
operator|.
name|Collection
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|dom
operator|.
name|persistent
operator|.
name|DocumentImpl
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|dom
operator|.
name|QName
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|security
operator|.
name|PermissionDeniedException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|storage
operator|.
name|BrokerPool
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|storage
operator|.
name|DBBroker
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|storage
operator|.
name|MetaStreamListener
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|xmldb
operator|.
name|XmldbURI
import|;
end_import

begin_import
import|import
name|com
operator|.
name|sleepycat
operator|.
name|je
operator|.
name|Environment
import|;
end_import

begin_import
import|import
name|com
operator|.
name|sleepycat
operator|.
name|je
operator|.
name|EnvironmentConfig
import|;
end_import

begin_import
import|import
name|com
operator|.
name|sleepycat
operator|.
name|persist
operator|.
name|*
import|;
end_import

begin_import
import|import
name|org
operator|.
name|w3c
operator|.
name|dom
operator|.
name|Document
import|;
end_import

begin_comment
comment|/**  * @author<a href="mailto:shabanovd@gmail.com">Dmitriy Shabanov</a>  *  */
end_comment

begin_class
specifier|public
class|class
name|MetaDataImpl
extends|extends
name|MetaData
block|{
specifier|protected
specifier|static
name|MetaDataImpl
name|inst
init|=
literal|null
decl_stmt|;
specifier|private
name|Environment
name|env
decl_stmt|;
specifier|private
name|EntityStore
name|store
decl_stmt|;
specifier|private
name|PrimaryIndex
argument_list|<
name|String
argument_list|,
name|MetasImpl
argument_list|>
name|docByUUID
decl_stmt|;
specifier|private
name|SecondaryIndex
argument_list|<
name|String
argument_list|,
name|String
argument_list|,
name|MetasImpl
argument_list|>
name|uriToDoc
decl_stmt|;
specifier|private
name|PrimaryIndex
argument_list|<
name|String
argument_list|,
name|MetaImpl
argument_list|>
name|metadataByUUID
decl_stmt|;
specifier|private
name|SecondaryIndex
argument_list|<
name|String
argument_list|,
name|String
argument_list|,
name|MetaImpl
argument_list|>
name|metadata
decl_stmt|;
specifier|private
name|SecondaryIndex
argument_list|<
name|String
argument_list|,
name|String
argument_list|,
name|MetaImpl
argument_list|>
name|keyToMeta
decl_stmt|;
specifier|private
name|SecondaryIndex
argument_list|<
name|String
argument_list|,
name|String
argument_list|,
name|MetaImpl
argument_list|>
name|valueToMeta
decl_stmt|;
specifier|public
name|MetaDataImpl
parameter_list|(
name|Database
name|db
parameter_list|)
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"initializing metadata storage"
argument_list|)
expr_stmt|;
name|File
name|folder
init|=
name|db
operator|.
name|getStoragePlace
argument_list|()
decl_stmt|;
name|File
name|dataDirectory
init|=
operator|new
name|File
argument_list|(
name|folder
argument_list|,
literal|"metadata"
argument_list|)
decl_stmt|;
name|dataDirectory
operator|.
name|mkdirs
argument_list|()
expr_stmt|;
name|LOG
operator|.
name|debug
argument_list|(
literal|"folder created ... "
argument_list|)
expr_stmt|;
name|EnvironmentConfig
name|envConfig
init|=
operator|new
name|EnvironmentConfig
argument_list|()
decl_stmt|;
name|envConfig
operator|.
name|setAllowCreate
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|envConfig
operator|.
name|setTransactional
argument_list|(
literal|false
argument_list|)
expr_stmt|;
name|env
operator|=
operator|new
name|Environment
argument_list|(
name|dataDirectory
argument_list|,
name|envConfig
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|debug
argument_list|(
literal|"environment ... "
argument_list|)
expr_stmt|;
name|StoreConfig
name|storeConfig
init|=
operator|new
name|StoreConfig
argument_list|()
decl_stmt|;
name|storeConfig
operator|.
name|setAllowCreate
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|storeConfig
operator|.
name|setTransactional
argument_list|(
literal|false
argument_list|)
expr_stmt|;
name|store
operator|=
operator|new
name|EntityStore
argument_list|(
name|env
argument_list|,
literal|"md"
argument_list|,
name|storeConfig
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|debug
argument_list|(
literal|"entity store ... "
argument_list|)
expr_stmt|;
name|docByUUID
operator|=
name|store
operator|.
name|getPrimaryIndex
argument_list|(
name|String
operator|.
name|class
argument_list|,
name|MetasImpl
operator|.
name|class
argument_list|)
expr_stmt|;
name|uriToDoc
operator|=
name|store
operator|.
name|getSecondaryIndex
argument_list|(
name|docByUUID
argument_list|,
name|String
operator|.
name|class
argument_list|,
literal|"uri"
argument_list|)
expr_stmt|;
name|metadataByUUID
operator|=
name|store
operator|.
name|getPrimaryIndex
argument_list|(
name|String
operator|.
name|class
argument_list|,
name|MetaImpl
operator|.
name|class
argument_list|)
expr_stmt|;
name|metadata
operator|=
name|store
operator|.
name|getSecondaryIndex
argument_list|(
name|metadataByUUID
argument_list|,
name|String
operator|.
name|class
argument_list|,
literal|"object"
argument_list|)
expr_stmt|;
name|keyToMeta
operator|=
name|store
operator|.
name|getSecondaryIndex
argument_list|(
name|metadataByUUID
argument_list|,
name|String
operator|.
name|class
argument_list|,
literal|"key"
argument_list|)
expr_stmt|;
name|valueToMeta
operator|=
name|store
operator|.
name|getSecondaryIndex
argument_list|(
name|metadataByUUID
argument_list|,
name|String
operator|.
name|class
argument_list|,
literal|"value"
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|debug
argument_list|(
literal|"ready ... "
argument_list|)
expr_stmt|;
name|MetaDataImpl
operator|.
name|inst
operator|=
name|this
expr_stmt|;
name|MetaData
operator|.
name|inst
operator|=
name|this
expr_stmt|;
name|LOG
operator|.
name|debug
argument_list|(
literal|"done."
argument_list|)
expr_stmt|;
block|}
specifier|public
name|String
name|getId
parameter_list|()
block|{
return|return
name|MDStorageManager
operator|.
name|PREFIX
return|;
block|}
specifier|public
name|DocumentImpl
name|getDocument
parameter_list|(
name|String
name|uuid
parameter_list|)
throws|throws
name|EXistException
throws|,
name|PermissionDeniedException
block|{
name|MetasImpl
name|ms
init|=
name|docByUUID
operator|.
name|get
argument_list|(
name|uuid
argument_list|)
decl_stmt|;
if|if
condition|(
name|ms
operator|==
literal|null
condition|)
return|return
literal|null
return|;
name|BrokerPool
name|db
init|=
literal|null
decl_stmt|;
name|DBBroker
name|broker
init|=
literal|null
decl_stmt|;
try|try
block|{
name|db
operator|=
name|BrokerPool
operator|.
name|getInstance
argument_list|()
expr_stmt|;
name|broker
operator|=
name|db
operator|.
name|get
argument_list|(
literal|null
argument_list|)
expr_stmt|;
name|XmldbURI
name|uri
init|=
name|XmldbURI
operator|.
name|create
argument_list|(
name|ms
operator|.
name|uri
argument_list|)
decl_stmt|;
name|Collection
name|col
init|=
name|broker
operator|.
name|getCollection
argument_list|(
name|uri
operator|.
name|removeLastSegment
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|col
operator|!=
literal|null
condition|)
block|{
return|return
name|col
operator|.
name|getDocument
argument_list|(
name|broker
argument_list|,
name|uri
operator|.
name|lastSegment
argument_list|()
argument_list|)
return|;
block|}
return|return
literal|null
return|;
block|}
finally|finally
block|{
if|if
condition|(
name|db
operator|!=
literal|null
condition|)
name|db
operator|.
name|release
argument_list|(
name|broker
argument_list|)
expr_stmt|;
block|}
block|}
specifier|private
name|Metas
name|getMetas
parameter_list|(
name|String
name|uuid
parameter_list|)
block|{
return|return
name|docByUUID
operator|.
name|get
argument_list|(
name|uuid
argument_list|)
return|;
block|}
specifier|public
name|Collection
name|getCollection
parameter_list|(
name|String
name|uuid
parameter_list|)
throws|throws
name|EXistException
throws|,
name|PermissionDeniedException
block|{
name|MetasImpl
name|ms
init|=
name|docByUUID
operator|.
name|get
argument_list|(
name|uuid
argument_list|)
decl_stmt|;
if|if
condition|(
name|ms
operator|==
literal|null
condition|)
return|return
literal|null
return|;
name|BrokerPool
name|db
init|=
literal|null
decl_stmt|;
name|DBBroker
name|broker
init|=
literal|null
decl_stmt|;
try|try
block|{
name|db
operator|=
name|BrokerPool
operator|.
name|getInstance
argument_list|()
expr_stmt|;
name|broker
operator|=
name|db
operator|.
name|get
argument_list|(
literal|null
argument_list|)
expr_stmt|;
name|XmldbURI
name|uri
init|=
name|XmldbURI
operator|.
name|create
argument_list|(
name|ms
operator|.
name|uri
argument_list|)
decl_stmt|;
return|return
name|broker
operator|.
name|getCollection
argument_list|(
name|uri
argument_list|)
return|;
block|}
finally|finally
block|{
if|if
condition|(
name|db
operator|!=
literal|null
condition|)
name|db
operator|.
name|release
argument_list|(
name|broker
argument_list|)
expr_stmt|;
block|}
block|}
specifier|private
name|Metas
name|_addMetas
parameter_list|(
name|Document
name|doc
parameter_list|)
block|{
name|MetasImpl
name|d
init|=
operator|new
name|MetasImpl
argument_list|(
name|doc
argument_list|)
decl_stmt|;
name|docByUUID
operator|.
name|put
argument_list|(
name|d
argument_list|)
expr_stmt|;
if|if
condition|(
name|LOG
operator|.
name|isDebugEnabled
argument_list|()
condition|)
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"addMetas "
operator|+
name|d
operator|.
name|getUUID
argument_list|()
operator|+
literal|" "
operator|+
operator|(
name|doc
operator|instanceof
name|DocumentImpl
condition|?
operator|(
operator|(
name|DocumentImpl
operator|)
name|doc
operator|)
operator|.
name|getURI
argument_list|()
else|:
literal|""
operator|)
argument_list|)
expr_stmt|;
block|}
return|return
name|d
return|;
block|}
specifier|private
name|Metas
name|_addMetas
parameter_list|(
name|Collection
name|col
parameter_list|)
block|{
name|MetasImpl
name|d
init|=
operator|new
name|MetasImpl
argument_list|(
name|col
operator|.
name|getURI
argument_list|()
argument_list|)
decl_stmt|;
name|docByUUID
operator|.
name|put
argument_list|(
name|d
argument_list|)
expr_stmt|;
if|if
condition|(
name|LOG
operator|.
name|isDebugEnabled
argument_list|()
condition|)
name|LOG
operator|.
name|debug
argument_list|(
literal|"addMetas "
operator|+
name|d
operator|.
name|getUUID
argument_list|()
operator|+
literal|" "
operator|+
name|col
operator|.
name|getURI
argument_list|()
argument_list|)
expr_stmt|;
return|return
name|d
return|;
block|}
specifier|protected
name|Metas
name|_addMetas
parameter_list|(
name|String
name|uri
parameter_list|,
name|String
name|uuid
parameter_list|)
block|{
name|MetasImpl
name|d
init|=
operator|new
name|MetasImpl
argument_list|(
name|uri
argument_list|,
name|uuid
argument_list|)
decl_stmt|;
name|docByUUID
operator|.
name|put
argument_list|(
name|d
argument_list|)
expr_stmt|;
if|if
condition|(
name|LOG
operator|.
name|isDebugEnabled
argument_list|()
condition|)
name|LOG
operator|.
name|debug
argument_list|(
literal|"addMetas "
operator|+
name|uuid
operator|+
literal|" "
operator|+
name|uri
argument_list|)
expr_stmt|;
return|return
name|d
return|;
block|}
specifier|public
name|Metas
name|replaceMetas
parameter_list|(
name|XmldbURI
name|uri
parameter_list|,
name|String
name|uuid
parameter_list|)
block|{
name|Metas
name|metas
init|=
name|getMetas
argument_list|(
name|uri
argument_list|,
literal|false
argument_list|)
decl_stmt|;
if|if
condition|(
name|metas
operator|!=
literal|null
condition|)
name|delMetas
argument_list|(
name|metas
argument_list|)
expr_stmt|;
name|MetasImpl
name|d
init|=
operator|new
name|MetasImpl
argument_list|(
name|uri
operator|.
name|toString
argument_list|()
argument_list|,
name|uuid
argument_list|)
decl_stmt|;
name|docByUUID
operator|.
name|put
argument_list|(
name|d
argument_list|)
expr_stmt|;
if|if
condition|(
name|LOG
operator|.
name|isDebugEnabled
argument_list|()
condition|)
name|LOG
operator|.
name|debug
argument_list|(
literal|"addMetas "
operator|+
name|uuid
operator|+
literal|" "
operator|+
name|uri
argument_list|)
expr_stmt|;
return|return
name|d
return|;
block|}
specifier|public
name|Metas
name|addMetas
parameter_list|(
name|Document
name|doc
parameter_list|)
block|{
name|Metas
name|_d
init|=
name|getMetas
argument_list|(
name|doc
operator|instanceof
name|DocumentImpl
condition|?
operator|(
operator|(
name|DocumentImpl
operator|)
name|doc
operator|)
operator|.
name|getURI
argument_list|()
else|:
literal|null
argument_list|,
literal|false
argument_list|)
decl_stmt|;
if|if
condition|(
name|_d
operator|!=
literal|null
condition|)
return|return
name|_d
return|;
return|return
name|_addMetas
argument_list|(
name|doc
argument_list|)
return|;
block|}
specifier|public
name|Metas
name|addMetas
parameter_list|(
name|Collection
name|col
parameter_list|)
block|{
name|Metas
name|_c
init|=
name|getMetas
argument_list|(
name|col
operator|.
name|getURI
argument_list|()
argument_list|,
literal|false
argument_list|)
decl_stmt|;
if|if
condition|(
name|_c
operator|!=
literal|null
condition|)
return|return
name|_c
return|;
return|return
name|_addMetas
argument_list|(
name|col
argument_list|)
return|;
block|}
specifier|public
name|Metas
name|getMetas
parameter_list|(
name|Document
name|doc
parameter_list|)
block|{
return|return
name|getMetas
argument_list|(
name|doc
operator|instanceof
name|DocumentImpl
condition|?
operator|(
operator|(
name|DocumentImpl
operator|)
name|doc
operator|)
operator|.
name|getURI
argument_list|()
else|:
literal|null
argument_list|,
literal|true
argument_list|)
return|;
block|}
specifier|public
name|Metas
name|getMetas
parameter_list|(
name|XmldbURI
name|uri
parameter_list|)
block|{
return|return
name|getMetas
argument_list|(
name|uri
argument_list|,
literal|true
argument_list|)
return|;
block|}
specifier|public
name|Metas
name|getMetas
parameter_list|(
name|XmldbURI
name|uri
parameter_list|,
name|boolean
name|addIfmissing
parameter_list|)
block|{
if|if
condition|(
name|LOG
operator|.
name|isDebugEnabled
argument_list|()
condition|)
name|LOG
operator|.
name|debug
argument_list|(
literal|"getMetas "
operator|+
name|uri
operator|+
literal|" "
argument_list|)
expr_stmt|;
name|EntityJoin
argument_list|<
name|String
argument_list|,
name|MetasImpl
argument_list|>
name|join
init|=
operator|new
name|EntityJoin
argument_list|<
name|String
argument_list|,
name|MetasImpl
argument_list|>
argument_list|(
name|docByUUID
argument_list|)
decl_stmt|;
name|join
operator|.
name|addCondition
argument_list|(
name|uriToDoc
argument_list|,
name|uri
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|ForwardCursor
argument_list|<
name|MetasImpl
argument_list|>
name|entities
init|=
name|join
operator|.
name|entities
argument_list|()
decl_stmt|;
try|try
block|{
name|MetasImpl
name|v
init|=
name|entities
operator|.
name|next
argument_list|()
decl_stmt|;
if|if
condition|(
name|LOG
operator|.
name|isDebugEnabled
argument_list|()
condition|)
block|{
name|MetasImpl
name|n
decl_stmt|;
while|while
condition|(
operator|(
name|n
operator|=
name|entities
operator|.
name|next
argument_list|()
operator|)
operator|!=
literal|null
condition|)
block|{
name|LOG
operator|.
name|error
argument_list|(
literal|"ERROR "
operator|+
name|n
operator|.
name|getUUID
argument_list|()
operator|+
literal|" "
operator|+
name|uri
argument_list|)
expr_stmt|;
block|}
block|}
comment|//			System.out.println(v);
comment|//
comment|//
comment|//			//this possible a bug, but NPE should be avoided (TODO: write lock required)
comment|//			if (addIfmissing&& v == null) {
comment|//
comment|//				//check that document exist
comment|//				BrokerPool pool = null;
comment|//				DBBroker broker = null;
comment|//				try {
comment|//					pool = BrokerPool.getInstance();
comment|//					broker = pool.get(null);
comment|//
comment|//					Collection col = broker.getCollection(uri.removeLastSegment());
comment|//					if (col != null) {
comment|//						DocumentImpl _doc = col.getDocument(broker, uri.lastSegment());
comment|//
comment|//						if (_doc != null) {
comment|//							LOG.error("metas for document "+uri+" get lost!");
comment|//							return _addMetas(_doc);
comment|//						}
comment|//
comment|//					}
comment|//				} catch (Exception e) {
comment|//					LOG.error(e);
comment|//					return null;
comment|//
comment|//				} finally {
comment|//					if (pool != null)
comment|//						pool.release(broker);
comment|//				}
comment|//
comment|//				return null;
comment|//			}
return|return
name|v
return|;
block|}
finally|finally
block|{
name|entities
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
block|}
specifier|public
name|void
name|delMetas
parameter_list|(
name|XmldbURI
name|uri
parameter_list|)
block|{
name|Metas
name|d
init|=
name|getMetas
argument_list|(
name|uri
argument_list|,
literal|false
argument_list|)
decl_stmt|;
if|if
condition|(
name|d
operator|!=
literal|null
condition|)
block|{
if|if
condition|(
name|LOG
operator|.
name|isDebugEnabled
argument_list|()
condition|)
name|LOG
operator|.
name|debug
argument_list|(
literal|"delete metas "
operator|+
name|d
operator|.
name|getUUID
argument_list|()
operator|+
literal|" "
operator|+
name|uri
argument_list|)
expr_stmt|;
name|delMetas
argument_list|(
name|d
argument_list|)
expr_stmt|;
block|}
else|else
block|{
if|if
condition|(
name|LOG
operator|.
name|isDebugEnabled
argument_list|()
condition|)
name|LOG
operator|.
name|debug
argument_list|(
literal|"delete metas NULL "
operator|+
name|uri
argument_list|)
expr_stmt|;
block|}
block|}
specifier|protected
name|void
name|delMetas
parameter_list|(
name|Metas
name|d
parameter_list|)
block|{
name|EntityCursor
argument_list|<
name|MetaImpl
argument_list|>
name|sub
init|=
name|metadata
operator|.
name|subIndex
argument_list|(
name|d
operator|.
name|getUUID
argument_list|()
argument_list|)
operator|.
name|entities
argument_list|()
decl_stmt|;
try|try
block|{
for|for
control|(
name|MetaImpl
name|m
range|:
name|sub
control|)
name|metadataByUUID
operator|.
name|delete
argument_list|(
name|m
operator|.
name|getUUID
argument_list|()
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
name|sub
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
name|docByUUID
operator|.
name|delete
argument_list|(
name|d
operator|.
name|getUUID
argument_list|()
argument_list|)
expr_stmt|;
name|indexRemoveMetas
argument_list|(
name|d
argument_list|)
expr_stmt|;
block|}
specifier|protected
name|MetaImpl
name|addMeta
parameter_list|(
name|Metas
name|doc
parameter_list|,
name|String
name|key
parameter_list|,
name|Object
name|value
parameter_list|)
block|{
name|MetaImpl
name|m
init|=
operator|new
name|MetaImpl
argument_list|(
name|doc
operator|.
name|getUUID
argument_list|()
argument_list|,
name|key
argument_list|,
name|value
argument_list|)
decl_stmt|;
name|metadataByUUID
operator|.
name|put
argument_list|(
name|m
argument_list|)
expr_stmt|;
name|indexMetas
argument_list|(
name|doc
argument_list|)
expr_stmt|;
return|return
name|m
return|;
block|}
specifier|protected
name|Meta
name|_addMeta
parameter_list|(
name|Metas
name|doc
parameter_list|,
name|String
name|uuid
parameter_list|,
name|String
name|key
parameter_list|,
name|String
name|value
parameter_list|)
block|{
name|MetaImpl
name|m
init|=
operator|new
name|MetaImpl
argument_list|(
name|doc
operator|.
name|getUUID
argument_list|()
argument_list|,
name|uuid
argument_list|,
name|key
argument_list|,
name|value
argument_list|)
decl_stmt|;
name|metadataByUUID
operator|.
name|put
argument_list|(
name|m
argument_list|)
expr_stmt|;
name|indexMetas
argument_list|(
name|doc
argument_list|)
expr_stmt|;
return|return
name|m
return|;
block|}
specifier|protected
name|MetaImpl
name|setMeta
parameter_list|(
name|MetaImpl
name|meta
parameter_list|)
block|{
name|metadataByUUID
operator|.
name|put
argument_list|(
name|meta
argument_list|)
expr_stmt|;
return|return
name|meta
return|;
block|}
specifier|protected
name|Meta
name|addMeta
parameter_list|(
name|Meta
name|meta
parameter_list|)
block|{
if|if
condition|(
name|meta
operator|instanceof
name|MetaImpl
condition|)
block|{
return|return
name|setMeta
argument_list|(
operator|(
name|MetaImpl
operator|)
name|meta
argument_list|)
return|;
block|}
throw|throw
operator|new
name|RuntimeException
argument_list|(
literal|"unsupported operation ["
operator|+
name|meta
operator|+
literal|"]"
argument_list|)
throw|;
block|}
specifier|protected
name|Meta
name|getMeta
parameter_list|(
name|Metas
name|doc
parameter_list|,
name|String
name|key
parameter_list|)
block|{
comment|//System.out.println("key = "+key);
name|EntityCursor
argument_list|<
name|MetaImpl
argument_list|>
name|sub
init|=
name|metadata
operator|.
name|subIndex
argument_list|(
name|doc
operator|.
name|getUUID
argument_list|()
argument_list|)
operator|.
name|entities
argument_list|()
decl_stmt|;
try|try
block|{
for|for
control|(
name|MetaImpl
name|m
range|:
name|sub
control|)
if|if
condition|(
name|m
operator|.
name|getKey
argument_list|()
operator|.
name|equals
argument_list|(
name|key
argument_list|)
condition|)
return|return
name|m
return|;
block|}
finally|finally
block|{
name|sub
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
return|return
literal|null
return|;
block|}
specifier|public
name|void
name|streamMetas
parameter_list|(
name|DocumentImpl
name|doc
parameter_list|,
name|MetaStreamListener
name|listener
parameter_list|)
block|{
name|Metas
name|metas
init|=
name|getMetas
argument_list|(
name|doc
argument_list|)
decl_stmt|;
if|if
condition|(
name|metas
operator|==
literal|null
condition|)
return|return;
name|EntityCursor
argument_list|<
name|MetaImpl
argument_list|>
name|sub
init|=
name|metadata
operator|.
name|subIndex
argument_list|(
name|metas
operator|.
name|getUUID
argument_list|()
argument_list|)
operator|.
name|entities
argument_list|()
decl_stmt|;
try|try
block|{
for|for
control|(
name|MetaImpl
name|m
range|:
name|sub
control|)
name|listener
operator|.
name|metadata
argument_list|(
operator|new
name|QName
argument_list|(
name|m
operator|.
name|getKey
argument_list|()
argument_list|,
name|MDStorageManager
operator|.
name|NAMESPACE_URI
argument_list|,
name|MDStorageManager
operator|.
name|PREFIX
argument_list|)
argument_list|,
name|m
operator|.
name|getValue
argument_list|()
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
name|sub
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
block|}
specifier|public
name|Meta
name|getMeta
parameter_list|(
name|String
name|uuid
parameter_list|)
block|{
return|return
name|metadataByUUID
operator|.
name|get
argument_list|(
name|uuid
argument_list|)
return|;
block|}
specifier|protected
name|void
name|delMeta
parameter_list|(
name|String
name|docUUID
parameter_list|,
name|String
name|key
parameter_list|)
block|{
comment|//System.out.println("key = "+key);
name|EntityCursor
argument_list|<
name|MetaImpl
argument_list|>
name|sub
init|=
name|metadata
operator|.
name|subIndex
argument_list|(
name|docUUID
argument_list|)
operator|.
name|entities
argument_list|()
decl_stmt|;
try|try
block|{
for|for
control|(
name|MetaImpl
name|m
range|:
name|sub
control|)
if|if
condition|(
name|m
operator|.
name|getKey
argument_list|()
operator|.
name|equals
argument_list|(
name|key
argument_list|)
condition|)
block|{
name|sub
operator|.
name|delete
argument_list|()
expr_stmt|;
block|}
block|}
finally|finally
block|{
name|sub
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
name|indexMetas
argument_list|(
name|getMetas
argument_list|(
name|docUUID
argument_list|)
argument_list|)
expr_stmt|;
block|}
specifier|public
name|List
argument_list|<
name|DocumentImpl
argument_list|>
name|matchDocuments
parameter_list|(
name|String
name|key
parameter_list|,
name|String
name|value
parameter_list|)
throws|throws
name|EXistException
block|{
name|EntityJoin
argument_list|<
name|String
argument_list|,
name|MetaImpl
argument_list|>
name|join
init|=
operator|new
name|EntityJoin
argument_list|<
name|String
argument_list|,
name|MetaImpl
argument_list|>
argument_list|(
name|metadataByUUID
argument_list|)
decl_stmt|;
name|join
operator|.
name|addCondition
argument_list|(
name|keyToMeta
argument_list|,
name|key
argument_list|)
expr_stmt|;
name|join
operator|.
name|addCondition
argument_list|(
name|valueToMeta
argument_list|,
name|value
argument_list|)
expr_stmt|;
name|ForwardCursor
argument_list|<
name|MetaImpl
argument_list|>
name|entities
init|=
name|join
operator|.
name|entities
argument_list|()
decl_stmt|;
try|try
block|{
name|List
argument_list|<
name|DocumentImpl
argument_list|>
name|list
init|=
operator|new
name|ArrayList
argument_list|<
name|DocumentImpl
argument_list|>
argument_list|()
decl_stmt|;
for|for
control|(
name|MetaImpl
name|entity
range|:
name|entities
control|)
block|{
try|try
block|{
name|list
operator|.
name|add
argument_list|(
name|getDocument
argument_list|(
name|entity
operator|.
name|getObject
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|PermissionDeniedException
name|ex
parameter_list|)
block|{
comment|//ignore
block|}
block|}
return|return
name|list
return|;
block|}
finally|finally
block|{
name|entities
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
block|}
specifier|public
name|List
argument_list|<
name|DocumentImpl
argument_list|>
name|matchDocumentsByKey
parameter_list|(
name|String
name|key
parameter_list|)
throws|throws
name|EXistException
block|{
name|EntityJoin
argument_list|<
name|String
argument_list|,
name|MetaImpl
argument_list|>
name|join
init|=
operator|new
name|EntityJoin
argument_list|<
name|String
argument_list|,
name|MetaImpl
argument_list|>
argument_list|(
name|metadataByUUID
argument_list|)
decl_stmt|;
name|join
operator|.
name|addCondition
argument_list|(
name|keyToMeta
argument_list|,
name|key
argument_list|)
expr_stmt|;
name|ForwardCursor
argument_list|<
name|MetaImpl
argument_list|>
name|entities
init|=
name|join
operator|.
name|entities
argument_list|()
decl_stmt|;
try|try
block|{
name|List
argument_list|<
name|DocumentImpl
argument_list|>
name|list
init|=
operator|new
name|ArrayList
argument_list|<
name|DocumentImpl
argument_list|>
argument_list|()
decl_stmt|;
for|for
control|(
name|MetaImpl
name|entity
range|:
name|entities
control|)
block|{
try|try
block|{
name|list
operator|.
name|add
argument_list|(
name|getDocument
argument_list|(
name|entity
operator|.
name|getObject
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|PermissionDeniedException
name|ex
parameter_list|)
block|{
comment|//ignore
block|}
block|}
return|return
name|list
return|;
block|}
finally|finally
block|{
name|entities
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
block|}
specifier|public
name|List
argument_list|<
name|DocumentImpl
argument_list|>
name|matchDocumentsByValue
parameter_list|(
name|String
name|value
parameter_list|)
throws|throws
name|EXistException
block|{
name|EntityJoin
argument_list|<
name|String
argument_list|,
name|MetaImpl
argument_list|>
name|join
init|=
operator|new
name|EntityJoin
argument_list|<
name|String
argument_list|,
name|MetaImpl
argument_list|>
argument_list|(
name|metadataByUUID
argument_list|)
decl_stmt|;
name|join
operator|.
name|addCondition
argument_list|(
name|valueToMeta
argument_list|,
name|value
argument_list|)
expr_stmt|;
name|ForwardCursor
argument_list|<
name|MetaImpl
argument_list|>
name|entities
init|=
name|join
operator|.
name|entities
argument_list|()
decl_stmt|;
try|try
block|{
name|List
argument_list|<
name|DocumentImpl
argument_list|>
name|list
init|=
operator|new
name|ArrayList
argument_list|<
name|DocumentImpl
argument_list|>
argument_list|()
decl_stmt|;
for|for
control|(
name|MetaImpl
name|entity
range|:
name|entities
control|)
block|{
try|try
block|{
name|list
operator|.
name|add
argument_list|(
name|getDocument
argument_list|(
name|entity
operator|.
name|getObject
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|PermissionDeniedException
name|ex
parameter_list|)
block|{
comment|//ignore
block|}
block|}
return|return
name|list
return|;
block|}
finally|finally
block|{
name|entities
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
block|}
specifier|public
name|void
name|close
parameter_list|()
block|{
name|store
operator|.
name|close
argument_list|()
expr_stmt|;
name|env
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
specifier|public
name|void
name|sync
parameter_list|()
block|{
name|store
operator|.
name|sync
argument_list|()
expr_stmt|;
name|env
operator|.
name|sync
argument_list|()
expr_stmt|;
block|}
comment|//	public void moveMetas(Metas metas, DocumentImpl doc) {
comment|//		if (metas instanceof MetasImpl) {
comment|//			MetasImpl ms = (MetasImpl) metas;
comment|//			ms.update(doc);
comment|//
comment|//			//docByUUID.put(ms);
comment|//
comment|//			return;
comment|//		}
comment|//		throw new RuntimeException("unsupported operation ["+metas+"]");
comment|//	}
specifier|public
name|void
name|moveMetas
parameter_list|(
name|XmldbURI
name|oldUri
parameter_list|,
name|XmldbURI
name|newUri
parameter_list|)
block|{
name|MetasImpl
name|ms
init|=
operator|(
name|MetasImpl
operator|)
name|getMetas
argument_list|(
name|oldUri
argument_list|)
decl_stmt|;
if|if
condition|(
name|ms
operator|!=
literal|null
condition|)
block|{
name|ms
operator|.
name|uri
operator|=
name|newUri
operator|.
name|toString
argument_list|()
expr_stmt|;
name|docByUUID
operator|.
name|put
argument_list|(
name|ms
argument_list|)
expr_stmt|;
name|ms
operator|=
operator|(
name|MetasImpl
operator|)
name|getMetas
argument_list|(
name|oldUri
argument_list|)
expr_stmt|;
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
name|ms
argument_list|)
expr_stmt|;
block|}
else|else
block|{
throw|throw
operator|new
name|RuntimeException
argument_list|(
literal|"Metas NULL: "
operator|+
name|oldUri
operator|+
literal|" in moveMetas"
argument_list|)
throw|;
comment|//LOG.warn("Metas NULL for document: " + doc.getURI() + " in moveMetas");
block|}
comment|//		Map<String, String> map = new HashMap<String, String>();
comment|//
comment|//		if(ms != null)
comment|//		{
comment|//			EntityCursor<MetaImpl> sub = metadata.subIndex(ms.getUUID()).entities();
comment|//			try {
comment|//				for (MetaImpl m : sub)
comment|//					map.put(m.getKey(), m.getValue());
comment|//
comment|//			} finally {
comment|//				sub.close();
comment|//			}
comment|//		}
comment|//
comment|//		delMetas(ms);
comment|//
comment|//		MetasImpl newMs = new MetasImpl((MetasImpl)ms, uri);
return|return;
block|}
comment|//	public void updateMetas(XmldbURI oldD, DocumentImpl newD) {
comment|//		MetasImpl ms = (MetasImpl)getMetas(oldD);
comment|//		ms.update(newD);
comment|//	}
specifier|public
name|void
name|copyMetas
parameter_list|(
name|XmldbURI
name|oldDoc
parameter_list|,
name|DocumentImpl
name|newDoc
parameter_list|)
block|{
name|MetasImpl
name|ms
init|=
operator|(
name|MetasImpl
operator|)
name|getMetas
argument_list|(
name|oldDoc
argument_list|)
decl_stmt|;
name|MetasImpl
name|newMs
init|=
operator|(
name|MetasImpl
operator|)
name|addMetas
argument_list|(
name|newDoc
argument_list|)
decl_stmt|;
if|if
condition|(
name|ms
operator|!=
literal|null
condition|)
block|{
name|EntityCursor
argument_list|<
name|MetaImpl
argument_list|>
name|sub
init|=
name|metadata
operator|.
name|subIndex
argument_list|(
name|ms
operator|.
name|getUUID
argument_list|()
argument_list|)
operator|.
name|entities
argument_list|()
decl_stmt|;
try|try
block|{
for|for
control|(
name|MetaImpl
name|m
range|:
name|sub
control|)
name|newMs
operator|.
name|put
argument_list|(
name|m
operator|.
name|getKey
argument_list|()
argument_list|,
name|m
operator|.
name|getValue
argument_list|()
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
name|sub
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
block|}
block|}
specifier|public
name|void
name|copyMetas
parameter_list|(
name|XmldbURI
name|oldDoc
parameter_list|,
name|Collection
name|newCol
parameter_list|)
block|{
name|MetasImpl
name|ms
init|=
operator|(
name|MetasImpl
operator|)
name|getMetas
argument_list|(
name|oldDoc
argument_list|)
decl_stmt|;
name|MetasImpl
name|newMs
init|=
operator|(
name|MetasImpl
operator|)
name|addMetas
argument_list|(
name|newCol
argument_list|)
decl_stmt|;
if|if
condition|(
name|ms
operator|!=
literal|null
condition|)
block|{
name|EntityCursor
argument_list|<
name|MetaImpl
argument_list|>
name|sub
init|=
name|metadata
operator|.
name|subIndex
argument_list|(
name|ms
operator|.
name|getUUID
argument_list|()
argument_list|)
operator|.
name|entities
argument_list|()
decl_stmt|;
try|try
block|{
for|for
control|(
name|MetaImpl
name|m
range|:
name|sub
control|)
block|{
name|newMs
operator|.
name|put
argument_list|(
name|m
operator|.
name|getKey
argument_list|()
argument_list|,
name|m
operator|.
name|getValue
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
finally|finally
block|{
name|sub
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
block|}
block|}
specifier|public
name|EntityCursor
argument_list|<
name|MetaImpl
argument_list|>
name|getMetaKeys
parameter_list|(
name|Metas
name|doc
parameter_list|)
block|{
return|return
name|metadata
operator|.
name|subIndex
argument_list|(
name|doc
operator|.
name|getUUID
argument_list|()
argument_list|)
operator|.
name|entities
argument_list|()
return|;
block|}
annotation|@
name|Override
specifier|public
name|XmldbURI
name|UUIDtoURI
parameter_list|(
name|String
name|uuid
parameter_list|)
block|{
name|MetasImpl
name|ms
init|=
name|docByUUID
operator|.
name|get
argument_list|(
name|uuid
argument_list|)
decl_stmt|;
if|if
condition|(
name|ms
operator|==
literal|null
condition|)
return|return
literal|null
return|;
return|return
name|XmldbURI
operator|.
name|create
argument_list|(
name|ms
operator|.
name|uri
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|String
name|URItoUUID
parameter_list|(
name|XmldbURI
name|uri
parameter_list|)
block|{
name|Metas
name|d
init|=
name|getMetas
argument_list|(
name|uri
argument_list|,
literal|false
argument_list|)
decl_stmt|;
if|if
condition|(
name|d
operator|==
literal|null
condition|)
return|return
literal|null
return|;
return|return
name|d
operator|.
name|getUUID
argument_list|()
return|;
block|}
comment|//lucene index methods
specifier|public
name|void
name|indexMetas
parameter_list|(
name|Metas
name|metas
parameter_list|)
block|{
comment|//XXX: update lucene!!!
comment|//        PlugToLucene plug = new PlugToLucene(this);
comment|//        plug.addMetas(metas);
block|}
specifier|private
name|void
name|indexRemoveMetas
parameter_list|(
name|Metas
name|metas
parameter_list|)
block|{
comment|//XXX: update lucene!!!
comment|//        PlugToLucene plug = new PlugToLucene(this);
comment|//        plug.removeMetas(metas);
block|}
comment|//    public NodeImpl search(String queryText, List<String> toBeMatchedURIs) throws XPathException {
comment|//        return (new PlugToLucene(this)).search(queryText, toBeMatchedURIs);
comment|//    }
comment|//
comment|//    public List<String> searchDocuments(String queryText, List<String> toBeMatchedURIs) throws XPathException {
comment|//        return (new PlugToLucene(this)).searchDocuments(queryText, toBeMatchedURIs);
comment|//    }
block|}
end_class

end_unit

