begin_unit|revision:1.0.0;language:Java;cregit-version:0.0.1
begin_package
package|package
name|org
operator|.
name|exist
operator|.
name|fluent
package|;
end_package

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|*
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_class
specifier|public
class|class
name|NodeTest
extends|extends
name|DatabaseTestCase
block|{
annotation|@
name|Test
argument_list|(
name|expected
operator|=
name|UnsupportedOperationException
operator|.
name|class
argument_list|)
specifier|public
name|void
name|appendMemtree
parameter_list|()
block|{
name|db
operator|.
name|query
argument_list|()
operator|.
name|single
argument_list|(
literal|"<foo/>"
argument_list|)
operator|.
name|node
argument_list|()
operator|.
name|append
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Test
argument_list|(
name|expected
operator|=
name|UnsupportedOperationException
operator|.
name|class
argument_list|)
specifier|public
name|void
name|replaceMemtree
parameter_list|()
block|{
name|db
operator|.
name|query
argument_list|()
operator|.
name|single
argument_list|(
literal|"<foo/>"
argument_list|)
operator|.
name|node
argument_list|()
operator|.
name|replace
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Test
argument_list|(
name|expected
operator|=
name|UnsupportedOperationException
operator|.
name|class
argument_list|)
specifier|public
name|void
name|updateMemtree
parameter_list|()
block|{
name|db
operator|.
name|query
argument_list|()
operator|.
name|single
argument_list|(
literal|"<foo/>"
argument_list|)
operator|.
name|node
argument_list|()
operator|.
name|update
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|equals1
parameter_list|()
block|{
name|XMLDocument
name|doc
init|=
name|db
operator|.
name|createFolder
argument_list|(
literal|"/test"
argument_list|)
operator|.
name|documents
argument_list|()
operator|.
name|build
argument_list|(
name|Name
operator|.
name|create
argument_list|(
literal|"foo"
argument_list|)
argument_list|)
operator|.
name|elem
argument_list|(
literal|"top"
argument_list|)
operator|.
name|elem
argument_list|(
literal|"child"
argument_list|)
operator|.
name|end
argument_list|(
literal|"child"
argument_list|)
operator|.
name|end
argument_list|(
literal|"top"
argument_list|)
operator|.
name|commit
argument_list|()
decl_stmt|;
name|Object
name|o1
init|=
name|doc
operator|.
name|query
argument_list|()
operator|.
name|single
argument_list|(
literal|"//child"
argument_list|)
decl_stmt|,
name|o2
init|=
name|doc
operator|.
name|query
argument_list|()
operator|.
name|single
argument_list|(
literal|"//child"
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
name|o1
operator|.
name|equals
argument_list|(
name|o2
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|o1
operator|.
name|hashCode
argument_list|()
argument_list|,
name|o2
operator|.
name|hashCode
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|equals2
parameter_list|()
block|{
name|XMLDocument
name|doc
init|=
name|db
operator|.
name|createFolder
argument_list|(
literal|"/test"
argument_list|)
operator|.
name|documents
argument_list|()
operator|.
name|build
argument_list|(
name|Name
operator|.
name|create
argument_list|(
literal|"foo"
argument_list|)
argument_list|)
operator|.
name|elem
argument_list|(
literal|"top"
argument_list|)
operator|.
name|elem
argument_list|(
literal|"child"
argument_list|)
operator|.
name|end
argument_list|(
literal|"child"
argument_list|)
operator|.
name|end
argument_list|(
literal|"top"
argument_list|)
operator|.
name|commit
argument_list|()
decl_stmt|;
name|Object
name|o1
init|=
name|doc
operator|.
name|query
argument_list|()
operator|.
name|single
argument_list|(
literal|"//child"
argument_list|)
decl_stmt|,
name|o2
init|=
name|doc
operator|.
name|query
argument_list|()
operator|.
name|single
argument_list|(
literal|"//top"
argument_list|)
decl_stmt|;
name|assertFalse
argument_list|(
name|o1
operator|.
name|equals
argument_list|(
name|o2
argument_list|)
argument_list|)
expr_stmt|;
comment|// can't assert unequal hashCodes, they're allowed to be the same
block|}
annotation|@
name|Test
specifier|public
name|void
name|equals3
parameter_list|()
block|{
name|Folder
name|folder
init|=
name|db
operator|.
name|createFolder
argument_list|(
literal|"/test"
argument_list|)
decl_stmt|;
name|XMLDocument
name|doc1
init|=
name|folder
operator|.
name|documents
argument_list|()
operator|.
name|build
argument_list|(
name|Name
operator|.
name|create
argument_list|(
literal|"foo1"
argument_list|)
argument_list|)
operator|.
name|elem
argument_list|(
literal|"top"
argument_list|)
operator|.
name|elem
argument_list|(
literal|"child"
argument_list|)
operator|.
name|end
argument_list|(
literal|"child"
argument_list|)
operator|.
name|end
argument_list|(
literal|"top"
argument_list|)
operator|.
name|commit
argument_list|()
decl_stmt|;
name|XMLDocument
name|doc2
init|=
name|folder
operator|.
name|documents
argument_list|()
operator|.
name|build
argument_list|(
name|Name
operator|.
name|create
argument_list|(
literal|"foo2"
argument_list|)
argument_list|)
operator|.
name|elem
argument_list|(
literal|"top"
argument_list|)
operator|.
name|elem
argument_list|(
literal|"child"
argument_list|)
operator|.
name|end
argument_list|(
literal|"child"
argument_list|)
operator|.
name|end
argument_list|(
literal|"top"
argument_list|)
operator|.
name|commit
argument_list|()
decl_stmt|;
name|Object
name|o1
init|=
name|doc1
operator|.
name|query
argument_list|()
operator|.
name|single
argument_list|(
literal|"//top"
argument_list|)
decl_stmt|,
name|o2
init|=
name|doc2
operator|.
name|query
argument_list|()
operator|.
name|single
argument_list|(
literal|"//top"
argument_list|)
decl_stmt|;
name|assertFalse
argument_list|(
name|o1
operator|.
name|equals
argument_list|(
name|o2
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|append1
parameter_list|()
block|{
name|XMLDocument
name|doc
init|=
name|db
operator|.
name|createFolder
argument_list|(
literal|"/test"
argument_list|)
operator|.
name|documents
argument_list|()
operator|.
name|build
argument_list|(
name|Name
operator|.
name|create
argument_list|(
literal|"foo"
argument_list|)
argument_list|)
operator|.
name|elem
argument_list|(
literal|"top"
argument_list|)
operator|.
name|end
argument_list|(
literal|"top"
argument_list|)
operator|.
name|commit
argument_list|()
decl_stmt|;
name|Node
name|node
init|=
name|doc
operator|.
name|root
argument_list|()
operator|.
name|append
argument_list|()
operator|.
name|elem
argument_list|(
literal|"child"
argument_list|)
operator|.
name|end
argument_list|(
literal|"child"
argument_list|)
operator|.
name|commit
argument_list|()
decl_stmt|;
name|assertNotNull
argument_list|(
name|node
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"child"
argument_list|,
name|node
operator|.
name|name
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|doc
operator|.
name|root
argument_list|()
operator|.
name|query
argument_list|()
operator|.
name|single
argument_list|(
literal|"count(*)"
argument_list|)
operator|.
name|intValue
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|append2
parameter_list|()
block|{
name|XMLDocument
name|doc
init|=
name|db
operator|.
name|createFolder
argument_list|(
literal|"/test"
argument_list|)
operator|.
name|documents
argument_list|()
operator|.
name|build
argument_list|(
name|Name
operator|.
name|create
argument_list|(
literal|"foo"
argument_list|)
argument_list|)
operator|.
name|elem
argument_list|(
literal|"top"
argument_list|)
operator|.
name|end
argument_list|(
literal|"top"
argument_list|)
operator|.
name|commit
argument_list|()
decl_stmt|;
name|Node
name|node
init|=
name|doc
operator|.
name|root
argument_list|()
operator|.
name|append
argument_list|()
operator|.
name|elem
argument_list|(
literal|"child"
argument_list|)
operator|.
name|attr
argument_list|(
literal|"blah"
argument_list|,
literal|"ick"
argument_list|)
operator|.
name|elem
argument_list|(
literal|"subchild"
argument_list|)
operator|.
name|end
argument_list|(
literal|"subchild"
argument_list|)
operator|.
name|end
argument_list|(
literal|"child"
argument_list|)
operator|.
name|commit
argument_list|()
decl_stmt|;
name|assertNotNull
argument_list|(
name|node
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"child"
argument_list|,
name|node
operator|.
name|name
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|doc
operator|.
name|root
argument_list|()
operator|.
name|query
argument_list|()
operator|.
name|single
argument_list|(
literal|"count(*)"
argument_list|)
operator|.
name|intValue
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"ick"
argument_list|,
name|node
operator|.
name|query
argument_list|()
operator|.
name|single
argument_list|(
literal|"@blah"
argument_list|)
operator|.
name|value
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"subchild"
argument_list|,
name|node
operator|.
name|query
argument_list|()
operator|.
name|single
argument_list|(
literal|"*"
argument_list|)
operator|.
name|node
argument_list|()
operator|.
name|name
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
argument_list|(
name|expected
operator|=
name|DatabaseException
operator|.
name|class
argument_list|)
specifier|public
name|void
name|afterDelete1
parameter_list|()
block|{
name|XMLDocument
name|doc
init|=
name|db
operator|.
name|createFolder
argument_list|(
literal|"/test"
argument_list|)
operator|.
name|documents
argument_list|()
operator|.
name|build
argument_list|(
name|Name
operator|.
name|create
argument_list|(
literal|"foo"
argument_list|)
argument_list|)
operator|.
name|elem
argument_list|(
literal|"top"
argument_list|)
operator|.
name|end
argument_list|(
literal|"top"
argument_list|)
operator|.
name|commit
argument_list|()
decl_stmt|;
name|Node
name|node
init|=
name|doc
operator|.
name|root
argument_list|()
operator|.
name|append
argument_list|()
operator|.
name|elem
argument_list|(
literal|"child"
argument_list|)
operator|.
name|end
argument_list|(
literal|"child"
argument_list|)
operator|.
name|commit
argument_list|()
decl_stmt|;
name|node
operator|.
name|delete
argument_list|()
expr_stmt|;
name|doc
operator|.
name|root
argument_list|()
operator|.
name|append
argument_list|()
operator|.
name|elem
argument_list|(
literal|"newchild"
argument_list|)
operator|.
name|end
argument_list|(
literal|"newchild"
argument_list|)
operator|.
name|commit
argument_list|()
expr_stmt|;
name|node
operator|.
name|update
argument_list|()
operator|.
name|attr
argument_list|(
literal|"foo"
argument_list|,
literal|"bar"
argument_list|)
operator|.
name|commit
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Test
argument_list|(
name|expected
operator|=
name|DatabaseException
operator|.
name|class
argument_list|)
specifier|public
name|void
name|afterDelete2
parameter_list|()
block|{
name|XMLDocument
name|doc
init|=
name|db
operator|.
name|createFolder
argument_list|(
literal|"/test"
argument_list|)
operator|.
name|documents
argument_list|()
operator|.
name|build
argument_list|(
name|Name
operator|.
name|create
argument_list|(
literal|"foo"
argument_list|)
argument_list|)
operator|.
name|elem
argument_list|(
literal|"top"
argument_list|)
operator|.
name|end
argument_list|(
literal|"top"
argument_list|)
operator|.
name|commit
argument_list|()
decl_stmt|;
name|Node
name|node
init|=
name|doc
operator|.
name|root
argument_list|()
decl_stmt|;
name|doc
operator|.
name|delete
argument_list|()
expr_stmt|;
name|doc
operator|=
literal|null
expr_stmt|;
name|db
operator|.
name|createFolder
argument_list|(
literal|"/test"
argument_list|)
operator|.
name|documents
argument_list|()
operator|.
name|build
argument_list|(
name|Name
operator|.
name|create
argument_list|(
literal|"bar"
argument_list|)
argument_list|)
operator|.
name|elem
argument_list|(
literal|"ack"
argument_list|)
operator|.
name|end
argument_list|(
literal|"ack"
argument_list|)
operator|.
name|commit
argument_list|()
expr_stmt|;
name|node
operator|.
name|update
argument_list|()
operator|.
name|attr
argument_list|(
literal|"foo"
argument_list|,
literal|"bar"
argument_list|)
operator|.
name|commit
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Test
argument_list|(
name|expected
operator|=
name|DatabaseException
operator|.
name|class
argument_list|)
specifier|public
name|void
name|afterDelete3
parameter_list|()
block|{
name|Folder
name|folder
init|=
name|db
operator|.
name|createFolder
argument_list|(
literal|"/test"
argument_list|)
decl_stmt|;
name|XMLDocument
name|doc
init|=
name|folder
operator|.
name|documents
argument_list|()
operator|.
name|build
argument_list|(
name|Name
operator|.
name|create
argument_list|(
literal|"foo"
argument_list|)
argument_list|)
operator|.
name|elem
argument_list|(
literal|"top"
argument_list|)
operator|.
name|end
argument_list|(
literal|"top"
argument_list|)
operator|.
name|commit
argument_list|()
decl_stmt|;
name|Node
name|node
init|=
name|doc
operator|.
name|root
argument_list|()
decl_stmt|;
name|folder
operator|.
name|delete
argument_list|()
expr_stmt|;
name|db
operator|.
name|createFolder
argument_list|(
literal|"/test"
argument_list|)
operator|.
name|documents
argument_list|()
operator|.
name|build
argument_list|(
name|Name
operator|.
name|create
argument_list|(
literal|"bar"
argument_list|)
argument_list|)
operator|.
name|elem
argument_list|(
literal|"ack"
argument_list|)
operator|.
name|end
argument_list|(
literal|"ack"
argument_list|)
operator|.
name|commit
argument_list|()
expr_stmt|;
name|node
operator|.
name|update
argument_list|()
operator|.
name|attr
argument_list|(
literal|"foo"
argument_list|,
literal|"bar"
argument_list|)
operator|.
name|commit
argument_list|()
expr_stmt|;
block|}
block|}
end_class

end_unit

