begin_unit|revision:1.0.0;language:Java;cregit-version:0.0.1
begin_package
package|package
name|org
operator|.
name|exist
operator|.
name|fluent
package|;
end_package

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|*
import|;
end_import

begin_class
specifier|public
class|class
name|DatabaseMiscTest
extends|extends
name|DatabaseTestCase
block|{
annotation|@
name|Test
specifier|public
name|void
name|queryDocs1
parameter_list|()
block|{
name|Folder
name|c1
init|=
name|db
operator|.
name|createFolder
argument_list|(
literal|"/c1"
argument_list|)
decl_stmt|;
name|XMLDocument
name|d1
init|=
name|c1
operator|.
name|documents
argument_list|()
operator|.
name|build
argument_list|(
name|Name
operator|.
name|generate
argument_list|()
argument_list|)
operator|.
name|elem
argument_list|(
literal|"test1"
argument_list|)
operator|.
name|end
argument_list|(
literal|"test1"
argument_list|)
operator|.
name|commit
argument_list|()
decl_stmt|;
name|XMLDocument
name|d2
init|=
name|c1
operator|.
name|documents
argument_list|()
operator|.
name|build
argument_list|(
name|Name
operator|.
name|generate
argument_list|()
argument_list|)
operator|.
name|elem
argument_list|(
literal|"test2"
argument_list|)
operator|.
name|end
argument_list|(
literal|"test2"
argument_list|)
operator|.
name|commit
argument_list|()
decl_stmt|;
name|c1
operator|.
name|documents
argument_list|()
operator|.
name|build
argument_list|(
name|Name
operator|.
name|generate
argument_list|()
argument_list|)
operator|.
name|elem
argument_list|(
literal|"test3"
argument_list|)
operator|.
name|end
argument_list|(
literal|"test3"
argument_list|)
operator|.
name|commit
argument_list|()
expr_stmt|;
name|assertTrue
argument_list|(
name|db
operator|.
name|query
argument_list|(
name|d1
argument_list|,
name|d2
argument_list|)
operator|.
name|exists
argument_list|(
literal|"/test1"
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|db
operator|.
name|query
argument_list|(
name|d1
argument_list|,
name|d2
argument_list|)
operator|.
name|exists
argument_list|(
literal|"/test2"
argument_list|)
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|db
operator|.
name|query
argument_list|(
name|d1
argument_list|,
name|d2
argument_list|)
operator|.
name|exists
argument_list|(
literal|"/test3"
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|queryBaseUri
parameter_list|()
block|{
name|Folder
name|c1
init|=
name|db
operator|.
name|createFolder
argument_list|(
literal|"/c1"
argument_list|)
decl_stmt|;
name|c1
operator|.
name|documents
argument_list|()
operator|.
name|build
argument_list|(
name|Name
operator|.
name|create
argument_list|(
literal|"original"
argument_list|)
argument_list|)
operator|.
name|elem
argument_list|(
literal|"test"
argument_list|)
operator|.
name|end
argument_list|(
literal|"test"
argument_list|)
operator|.
name|commit
argument_list|()
expr_stmt|;
name|assertFalse
argument_list|(
name|db
operator|.
name|query
argument_list|()
operator|.
name|single
argument_list|(
literal|"doc-available('original')"
argument_list|)
operator|.
name|booleanValue
argument_list|()
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|db
operator|.
name|query
argument_list|()
operator|.
name|single
argument_list|(
literal|"doc-available('c1/original')"
argument_list|)
operator|.
name|booleanValue
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|getDocument1
parameter_list|()
block|{
name|Folder
name|c1
init|=
name|db
operator|.
name|createFolder
argument_list|(
literal|"/c1"
argument_list|)
decl_stmt|;
name|XMLDocument
name|d1
init|=
name|c1
operator|.
name|documents
argument_list|()
operator|.
name|build
argument_list|(
name|Name
operator|.
name|create
argument_list|(
literal|"doc"
argument_list|)
argument_list|)
operator|.
name|elem
argument_list|(
literal|"test1"
argument_list|)
operator|.
name|end
argument_list|(
literal|"test1"
argument_list|)
operator|.
name|commit
argument_list|()
decl_stmt|;
name|Document
name|d2
init|=
name|db
operator|.
name|getDocument
argument_list|(
literal|"/c1/doc"
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|d1
argument_list|,
name|d2
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|getDocument2
parameter_list|()
block|{
name|XMLDocument
name|d1
init|=
name|db
operator|.
name|getFolder
argument_list|(
literal|"/"
argument_list|)
operator|.
name|documents
argument_list|()
operator|.
name|build
argument_list|(
name|Name
operator|.
name|create
argument_list|(
literal|"doc"
argument_list|)
argument_list|)
operator|.
name|elem
argument_list|(
literal|"test1"
argument_list|)
operator|.
name|end
argument_list|(
literal|"test1"
argument_list|)
operator|.
name|commit
argument_list|()
decl_stmt|;
name|Document
name|d2
init|=
name|db
operator|.
name|getDocument
argument_list|(
literal|"/doc"
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|d1
argument_list|,
name|d2
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
argument_list|(
name|expected
operator|=
name|IllegalArgumentException
operator|.
name|class
argument_list|)
specifier|public
name|void
name|getDocumentBadPath1
parameter_list|()
block|{
name|db
operator|.
name|getDocument
argument_list|(
literal|""
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
argument_list|(
name|expected
operator|=
name|IllegalArgumentException
operator|.
name|class
argument_list|)
specifier|public
name|void
name|getDocumentBadPath2
parameter_list|()
block|{
name|db
operator|.
name|getDocument
argument_list|(
literal|"doc"
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
argument_list|(
name|expected
operator|=
name|IllegalArgumentException
operator|.
name|class
argument_list|)
specifier|public
name|void
name|getDocumentBadPath3
parameter_list|()
block|{
name|db
operator|.
name|getDocument
argument_list|(
literal|"/doc/"
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|containsDocument1
parameter_list|()
block|{
name|Folder
name|c1
init|=
name|db
operator|.
name|createFolder
argument_list|(
literal|"/c1"
argument_list|)
decl_stmt|;
name|c1
operator|.
name|documents
argument_list|()
operator|.
name|build
argument_list|(
name|Name
operator|.
name|create
argument_list|(
literal|"doc"
argument_list|)
argument_list|)
operator|.
name|elem
argument_list|(
literal|"test1"
argument_list|)
operator|.
name|end
argument_list|(
literal|"test1"
argument_list|)
operator|.
name|commit
argument_list|()
expr_stmt|;
name|assertTrue
argument_list|(
name|db
operator|.
name|contains
argument_list|(
literal|"/c1/doc"
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|containsDocument2
parameter_list|()
block|{
name|db
operator|.
name|getFolder
argument_list|(
literal|"/"
argument_list|)
operator|.
name|documents
argument_list|()
operator|.
name|build
argument_list|(
name|Name
operator|.
name|create
argument_list|(
literal|"doc"
argument_list|)
argument_list|)
operator|.
name|elem
argument_list|(
literal|"test1"
argument_list|)
operator|.
name|end
argument_list|(
literal|"test1"
argument_list|)
operator|.
name|commit
argument_list|()
expr_stmt|;
name|assertTrue
argument_list|(
name|db
operator|.
name|contains
argument_list|(
literal|"/doc"
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|containsFolder1
parameter_list|()
block|{
name|db
operator|.
name|createFolder
argument_list|(
literal|"/c1"
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|db
operator|.
name|contains
argument_list|(
literal|"/c1"
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|containsFolder2
parameter_list|()
block|{
name|db
operator|.
name|createFolder
argument_list|(
literal|"/c1/c2"
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|db
operator|.
name|contains
argument_list|(
literal|"/c1/c2"
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|containsFolder3
parameter_list|()
block|{
name|assertTrue
argument_list|(
name|db
operator|.
name|contains
argument_list|(
literal|"/"
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|containsMissing
parameter_list|()
block|{
name|assertFalse
argument_list|(
name|db
operator|.
name|contains
argument_list|(
literal|"/c1"
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
argument_list|(
name|expected
operator|=
name|IllegalArgumentException
operator|.
name|class
argument_list|)
specifier|public
name|void
name|containsBadPath1
parameter_list|()
block|{
name|db
operator|.
name|contains
argument_list|(
literal|""
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
argument_list|(
name|expected
operator|=
name|IllegalArgumentException
operator|.
name|class
argument_list|)
specifier|public
name|void
name|containsBadPath2
parameter_list|()
block|{
name|db
operator|.
name|contains
argument_list|(
literal|"doc"
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
argument_list|(
name|expected
operator|=
name|IllegalArgumentException
operator|.
name|class
argument_list|)
specifier|public
name|void
name|containsBadPath3
parameter_list|()
block|{
name|db
operator|.
name|contains
argument_list|(
literal|"/doc/"
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

