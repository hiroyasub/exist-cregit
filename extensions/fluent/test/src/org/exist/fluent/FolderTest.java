begin_unit|revision:1.0.0;language:Java;cregit-version:0.0.1
begin_package
package|package
name|org
operator|.
name|exist
operator|.
name|fluent
package|;
end_package

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|*
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_class
specifier|public
class|class
name|FolderTest
extends|extends
name|DatabaseTestCase
block|{
annotation|@
name|Test
specifier|public
name|void
name|createTop
parameter_list|()
block|{
name|Folder
name|f
init|=
name|db
operator|.
name|createFolder
argument_list|(
literal|"/top"
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|"top"
argument_list|,
name|f
operator|.
name|name
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"/top"
argument_list|,
name|f
operator|.
name|path
argument_list|()
argument_list|)
expr_stmt|;
name|db
operator|.
name|getFolder
argument_list|(
literal|"/top"
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|createNested
parameter_list|()
block|{
name|Folder
name|f
init|=
name|db
operator|.
name|createFolder
argument_list|(
literal|"/top/nested"
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|"nested"
argument_list|,
name|f
operator|.
name|name
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"/top/nested"
argument_list|,
name|f
operator|.
name|path
argument_list|()
argument_list|)
expr_stmt|;
name|db
operator|.
name|getFolder
argument_list|(
literal|"/top/nested"
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|getRoot
parameter_list|()
block|{
name|assertEquals
argument_list|(
literal|""
argument_list|,
name|db
operator|.
name|getFolder
argument_list|(
literal|"/"
argument_list|)
operator|.
name|name
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|createTopChild
parameter_list|()
block|{
name|Folder
name|f
init|=
name|db
operator|.
name|getFolder
argument_list|(
literal|"/"
argument_list|)
operator|.
name|children
argument_list|()
operator|.
name|create
argument_list|(
literal|"child"
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|"child"
argument_list|,
name|f
operator|.
name|name
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"/child"
argument_list|,
name|f
operator|.
name|path
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|createNestedChild
parameter_list|()
block|{
name|Folder
name|f
init|=
name|db
operator|.
name|createFolder
argument_list|(
literal|"/top"
argument_list|)
operator|.
name|children
argument_list|()
operator|.
name|create
argument_list|(
literal|"child"
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|"child"
argument_list|,
name|f
operator|.
name|name
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"/top/child"
argument_list|,
name|f
operator|.
name|path
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
argument_list|(
name|expected
operator|=
name|DatabaseException
operator|.
name|class
argument_list|)
specifier|public
name|void
name|getMissingTop1
parameter_list|()
block|{
name|db
operator|.
name|getFolder
argument_list|(
literal|"/top"
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
argument_list|(
name|expected
operator|=
name|DatabaseException
operator|.
name|class
argument_list|)
specifier|public
name|void
name|getMissingNested1
parameter_list|()
block|{
name|db
operator|.
name|getFolder
argument_list|(
literal|"/top/nested"
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|duplicate1
parameter_list|()
block|{
name|Folder
name|c1
init|=
name|db
operator|.
name|createFolder
argument_list|(
literal|"/top"
argument_list|)
decl_stmt|;
name|Folder
name|c2
init|=
name|c1
operator|.
name|clone
argument_list|()
decl_stmt|;
name|assertEquals
argument_list|(
name|c1
operator|.
name|path
argument_list|()
argument_list|,
name|c2
operator|.
name|path
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|duplicate2
parameter_list|()
block|{
name|Folder
name|c1
init|=
name|db
operator|.
name|createFolder
argument_list|(
literal|"/top"
argument_list|)
decl_stmt|;
name|c1
operator|.
name|namespaceBindings
argument_list|()
operator|.
name|put
argument_list|(
literal|"foo"
argument_list|,
literal|"http://www.ideanest.com/"
argument_list|)
expr_stmt|;
name|Folder
name|c2
init|=
name|c1
operator|.
name|clone
argument_list|()
decl_stmt|;
name|assertEquals
argument_list|(
literal|"http://www.ideanest.com/"
argument_list|,
name|c2
operator|.
name|namespaceBindings
argument_list|()
operator|.
name|get
argument_list|(
literal|"foo"
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|getName1
parameter_list|()
block|{
name|assertEquals
argument_list|(
literal|"top"
argument_list|,
name|db
operator|.
name|createFolder
argument_list|(
literal|"/top"
argument_list|)
operator|.
name|name
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|getName2
parameter_list|()
block|{
name|assertEquals
argument_list|(
literal|"nested"
argument_list|,
name|db
operator|.
name|createFolder
argument_list|(
literal|"/top/nested"
argument_list|)
operator|.
name|name
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|getPath1
parameter_list|()
block|{
name|assertEquals
argument_list|(
literal|"/top"
argument_list|,
name|db
operator|.
name|createFolder
argument_list|(
literal|"/top"
argument_list|)
operator|.
name|path
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|getPath2
parameter_list|()
block|{
name|assertEquals
argument_list|(
literal|"/top/nested"
argument_list|,
name|db
operator|.
name|createFolder
argument_list|(
literal|"/top/nested"
argument_list|)
operator|.
name|path
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|getPath3
parameter_list|()
block|{
name|assertEquals
argument_list|(
literal|"/"
argument_list|,
name|db
operator|.
name|createFolder
argument_list|(
literal|"/"
argument_list|)
operator|.
name|path
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|getParent1
parameter_list|()
block|{
name|assertEquals
argument_list|(
literal|"/top"
argument_list|,
name|db
operator|.
name|createFolder
argument_list|(
literal|"/top/nested"
argument_list|)
operator|.
name|parent
argument_list|()
operator|.
name|path
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
argument_list|(
name|expected
operator|=
name|DatabaseException
operator|.
name|class
argument_list|)
specifier|public
name|void
name|getParent2
parameter_list|()
block|{
name|db
operator|.
name|getFolder
argument_list|(
literal|"/"
argument_list|)
operator|.
name|parent
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|getChild1
parameter_list|()
block|{
name|db
operator|.
name|createFolder
argument_list|(
literal|"/top/nested"
argument_list|)
expr_stmt|;
name|db
operator|.
name|getFolder
argument_list|(
literal|"/top"
argument_list|)
operator|.
name|children
argument_list|()
operator|.
name|get
argument_list|(
literal|"nested"
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|getChild2
parameter_list|()
block|{
name|db
operator|.
name|createFolder
argument_list|(
literal|"/top/nested/more"
argument_list|)
expr_stmt|;
name|db
operator|.
name|getFolder
argument_list|(
literal|"/top"
argument_list|)
operator|.
name|children
argument_list|()
operator|.
name|get
argument_list|(
literal|"nested/more"
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
argument_list|(
name|expected
operator|=
name|IllegalArgumentException
operator|.
name|class
argument_list|)
specifier|public
name|void
name|getChild3
parameter_list|()
block|{
name|db
operator|.
name|createFolder
argument_list|(
literal|"/top/nested"
argument_list|)
expr_stmt|;
name|db
operator|.
name|getFolder
argument_list|(
literal|"/top"
argument_list|)
operator|.
name|children
argument_list|()
operator|.
name|get
argument_list|(
literal|"/nested"
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|getChild4
parameter_list|()
block|{
name|db
operator|.
name|createFolder
argument_list|(
literal|"/top/nested"
argument_list|)
expr_stmt|;
name|db
operator|.
name|getFolder
argument_list|(
literal|"/"
argument_list|)
operator|.
name|children
argument_list|()
operator|.
name|get
argument_list|(
literal|"top"
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|getChild5
parameter_list|()
block|{
name|db
operator|.
name|createFolder
argument_list|(
literal|"/top/nested"
argument_list|)
expr_stmt|;
name|Folder
name|c1
init|=
name|db
operator|.
name|getFolder
argument_list|(
literal|"/top"
argument_list|)
decl_stmt|;
name|c1
operator|.
name|namespaceBindings
argument_list|()
operator|.
name|put
argument_list|(
literal|"foo"
argument_list|,
literal|"http://www.ideanest.com/"
argument_list|)
expr_stmt|;
name|Folder
name|c2
init|=
name|c1
operator|.
name|children
argument_list|()
operator|.
name|get
argument_list|(
literal|"nested"
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|"http://www.ideanest.com/"
argument_list|,
name|c2
operator|.
name|namespaceBindings
argument_list|()
operator|.
name|get
argument_list|(
literal|"foo"
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|namespace1
parameter_list|()
block|{
name|Folder
name|c1
init|=
name|db
operator|.
name|getFolder
argument_list|(
literal|"/"
argument_list|)
decl_stmt|;
name|c1
operator|.
name|namespaceBindings
argument_list|()
operator|.
name|put
argument_list|(
literal|"foo"
argument_list|,
literal|"http://www.ideanest.com/"
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"http://www.ideanest.com/"
argument_list|,
name|c1
operator|.
name|namespaceBindings
argument_list|()
operator|.
name|get
argument_list|(
literal|"foo"
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|namespace2
parameter_list|()
block|{
name|Folder
name|c1
init|=
name|db
operator|.
name|getFolder
argument_list|(
literal|"/"
argument_list|)
decl_stmt|;
name|c1
operator|.
name|namespaceBindings
argument_list|()
operator|.
name|put
argument_list|(
literal|""
argument_list|,
literal|"http://www.ideanest.com/"
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"http://www.ideanest.com/"
argument_list|,
name|c1
operator|.
name|namespaceBindings
argument_list|()
operator|.
name|get
argument_list|(
literal|""
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|namespace3
parameter_list|()
block|{
name|Folder
name|c1
init|=
name|db
operator|.
name|getFolder
argument_list|(
literal|"/"
argument_list|)
decl_stmt|;
name|c1
operator|.
name|namespaceBindings
argument_list|()
operator|.
name|put
argument_list|(
literal|"foo"
argument_list|,
literal|"http://www.ideanest.com/"
argument_list|)
expr_stmt|;
name|c1
operator|.
name|namespaceBindings
argument_list|()
operator|.
name|remove
argument_list|(
literal|"foo"
argument_list|)
expr_stmt|;
name|assertNull
argument_list|(
name|c1
operator|.
name|namespaceBindings
argument_list|()
operator|.
name|get
argument_list|(
literal|"foo"
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|namespace4
parameter_list|()
block|{
name|Folder
name|c1
init|=
name|db
operator|.
name|getFolder
argument_list|(
literal|"/"
argument_list|)
decl_stmt|;
name|c1
operator|.
name|namespaceBindings
argument_list|()
operator|.
name|put
argument_list|(
literal|"foo"
argument_list|,
literal|"http://www.ideanest.com/"
argument_list|)
expr_stmt|;
name|c1
operator|.
name|namespaceBindings
argument_list|()
operator|.
name|put
argument_list|(
literal|"bar"
argument_list|,
literal|"urn:blah"
argument_list|)
expr_stmt|;
name|c1
operator|.
name|namespaceBindings
argument_list|()
operator|.
name|remove
argument_list|(
literal|"foo"
argument_list|)
expr_stmt|;
name|assertNull
argument_list|(
name|c1
operator|.
name|namespaceBindings
argument_list|()
operator|.
name|get
argument_list|(
literal|"foo"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"urn:blah"
argument_list|,
name|c1
operator|.
name|namespaceBindings
argument_list|()
operator|.
name|get
argument_list|(
literal|"bar"
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|namespace5
parameter_list|()
block|{
name|Folder
name|c1
init|=
name|db
operator|.
name|getFolder
argument_list|(
literal|"/"
argument_list|)
decl_stmt|;
name|c1
operator|.
name|namespaceBindings
argument_list|()
operator|.
name|put
argument_list|(
literal|"foo"
argument_list|,
literal|"http://www.ideanest.com/"
argument_list|)
expr_stmt|;
name|c1
operator|.
name|namespaceBindings
argument_list|()
operator|.
name|put
argument_list|(
literal|"bar"
argument_list|,
literal|"urn:blah"
argument_list|)
expr_stmt|;
name|c1
operator|.
name|namespaceBindings
argument_list|()
operator|.
name|clear
argument_list|()
expr_stmt|;
name|assertNull
argument_list|(
name|c1
operator|.
name|namespaceBindings
argument_list|()
operator|.
name|get
argument_list|(
literal|"foo"
argument_list|)
argument_list|)
expr_stmt|;
name|assertNull
argument_list|(
name|c1
operator|.
name|namespaceBindings
argument_list|()
operator|.
name|get
argument_list|(
literal|"bar"
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|buildDocument1
parameter_list|()
block|{
name|Folder
name|c1
init|=
name|db
operator|.
name|createFolder
argument_list|(
literal|"/top"
argument_list|)
decl_stmt|;
name|c1
operator|.
name|documents
argument_list|()
operator|.
name|build
argument_list|(
name|Name
operator|.
name|create
argument_list|(
literal|"doc1"
argument_list|)
argument_list|)
operator|.
name|elem
argument_list|(
literal|"test"
argument_list|)
operator|.
name|end
argument_list|(
literal|"test"
argument_list|)
operator|.
name|commit
argument_list|()
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|c1
operator|.
name|documents
argument_list|()
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|buildDocument2
parameter_list|()
block|{
name|Folder
name|c1
init|=
name|db
operator|.
name|createFolder
argument_list|(
literal|"/top"
argument_list|)
decl_stmt|;
name|c1
operator|.
name|documents
argument_list|()
operator|.
name|build
argument_list|(
name|Name
operator|.
name|create
argument_list|(
literal|"doc1"
argument_list|)
argument_list|)
operator|.
name|elem
argument_list|(
literal|"test1"
argument_list|)
operator|.
name|end
argument_list|(
literal|"test1"
argument_list|)
operator|.
name|commit
argument_list|()
expr_stmt|;
name|c1
operator|.
name|documents
argument_list|()
operator|.
name|build
argument_list|(
name|Name
operator|.
name|overwrite
argument_list|(
literal|"doc1"
argument_list|)
argument_list|)
operator|.
name|elem
argument_list|(
literal|"test2"
argument_list|)
operator|.
name|end
argument_list|(
literal|"test2"
argument_list|)
operator|.
name|commit
argument_list|()
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|c1
operator|.
name|documents
argument_list|()
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
argument_list|(
name|expected
operator|=
name|DatabaseException
operator|.
name|class
argument_list|)
specifier|public
name|void
name|buildDocument3
parameter_list|()
block|{
name|Folder
name|c1
init|=
name|db
operator|.
name|createFolder
argument_list|(
literal|"/top"
argument_list|)
decl_stmt|;
name|c1
operator|.
name|documents
argument_list|()
operator|.
name|build
argument_list|(
name|Name
operator|.
name|create
argument_list|(
literal|"doc1"
argument_list|)
argument_list|)
operator|.
name|elem
argument_list|(
literal|"test1"
argument_list|)
operator|.
name|end
argument_list|(
literal|"test1"
argument_list|)
operator|.
name|commit
argument_list|()
expr_stmt|;
name|c1
operator|.
name|documents
argument_list|()
operator|.
name|build
argument_list|(
name|Name
operator|.
name|create
argument_list|(
literal|"doc1"
argument_list|)
argument_list|)
operator|.
name|elem
argument_list|(
literal|"test2"
argument_list|)
operator|.
name|end
argument_list|(
literal|"test2"
argument_list|)
operator|.
name|commit
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|buildDocument4
parameter_list|()
block|{
name|Folder
name|c1
init|=
name|db
operator|.
name|createFolder
argument_list|(
literal|"/top"
argument_list|)
decl_stmt|;
name|c1
operator|.
name|documents
argument_list|()
operator|.
name|build
argument_list|(
name|Name
operator|.
name|generate
argument_list|()
argument_list|)
operator|.
name|elem
argument_list|(
literal|"test"
argument_list|)
operator|.
name|end
argument_list|(
literal|"test"
argument_list|)
operator|.
name|commit
argument_list|()
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|c1
operator|.
name|documents
argument_list|()
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|buildDocument5
parameter_list|()
block|{
name|Folder
name|c1
init|=
name|db
operator|.
name|createFolder
argument_list|(
literal|"/top"
argument_list|)
decl_stmt|;
name|c1
operator|.
name|documents
argument_list|()
operator|.
name|build
argument_list|(
name|Name
operator|.
name|generate
argument_list|()
argument_list|)
operator|.
name|elem
argument_list|(
literal|"test"
argument_list|)
operator|.
name|end
argument_list|(
literal|"test"
argument_list|)
operator|.
name|commit
argument_list|()
expr_stmt|;
name|c1
operator|.
name|documents
argument_list|()
operator|.
name|build
argument_list|(
name|Name
operator|.
name|generate
argument_list|()
argument_list|)
operator|.
name|elem
argument_list|(
literal|"test"
argument_list|)
operator|.
name|end
argument_list|(
literal|"test"
argument_list|)
operator|.
name|commit
argument_list|()
expr_stmt|;
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|c1
operator|.
name|documents
argument_list|()
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|size1
parameter_list|()
block|{
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|db
operator|.
name|getFolder
argument_list|(
literal|"/"
argument_list|)
operator|.
name|documents
argument_list|()
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|size2
parameter_list|()
block|{
name|Folder
name|c1
init|=
name|db
operator|.
name|createFolder
argument_list|(
literal|"/top/nested"
argument_list|)
decl_stmt|;
name|c1
operator|.
name|documents
argument_list|()
operator|.
name|build
argument_list|(
name|Name
operator|.
name|generate
argument_list|()
argument_list|)
operator|.
name|elem
argument_list|(
literal|"test"
argument_list|)
operator|.
name|end
argument_list|(
literal|"test"
argument_list|)
operator|.
name|commit
argument_list|()
expr_stmt|;
name|c1
operator|.
name|documents
argument_list|()
operator|.
name|build
argument_list|(
name|Name
operator|.
name|generate
argument_list|()
argument_list|)
operator|.
name|elem
argument_list|(
literal|"test"
argument_list|)
operator|.
name|end
argument_list|(
literal|"test"
argument_list|)
operator|.
name|commit
argument_list|()
expr_stmt|;
name|c1
operator|.
name|documents
argument_list|()
operator|.
name|build
argument_list|(
name|Name
operator|.
name|create
argument_list|(
literal|"doc1"
argument_list|)
argument_list|)
operator|.
name|elem
argument_list|(
literal|"test"
argument_list|)
operator|.
name|end
argument_list|(
literal|"test"
argument_list|)
operator|.
name|commit
argument_list|()
expr_stmt|;
name|assertEquals
argument_list|(
literal|3
argument_list|,
name|c1
operator|.
name|documents
argument_list|()
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|db
operator|.
name|getFolder
argument_list|(
literal|"/top"
argument_list|)
operator|.
name|documents
argument_list|()
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|childrenSize1
parameter_list|()
block|{
name|Folder
name|c1
init|=
name|db
operator|.
name|createFolder
argument_list|(
literal|"/top"
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|c1
operator|.
name|children
argument_list|()
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|childrenSize2
parameter_list|()
block|{
name|db
operator|.
name|createFolder
argument_list|(
literal|"/top/nested1"
argument_list|)
expr_stmt|;
name|db
operator|.
name|createFolder
argument_list|(
literal|"/top/nested2"
argument_list|)
expr_stmt|;
name|Folder
name|c1
init|=
name|db
operator|.
name|getFolder
argument_list|(
literal|"/top"
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|c1
operator|.
name|children
argument_list|()
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|childrenSize3
parameter_list|()
block|{
name|db
operator|.
name|createFolder
argument_list|(
literal|"/top/nested1"
argument_list|)
expr_stmt|;
name|db
operator|.
name|createFolder
argument_list|(
literal|"/top/nested2"
argument_list|)
operator|.
name|documents
argument_list|()
operator|.
name|build
argument_list|(
name|Name
operator|.
name|generate
argument_list|()
argument_list|)
operator|.
name|elem
argument_list|(
literal|"test"
argument_list|)
operator|.
name|end
argument_list|(
literal|"test"
argument_list|)
operator|.
name|commit
argument_list|()
expr_stmt|;
name|Folder
name|c1
init|=
name|db
operator|.
name|getFolder
argument_list|(
literal|"/top"
argument_list|)
decl_stmt|;
name|c1
operator|.
name|documents
argument_list|()
operator|.
name|build
argument_list|(
name|Name
operator|.
name|generate
argument_list|()
argument_list|)
operator|.
name|elem
argument_list|(
literal|"test"
argument_list|)
operator|.
name|end
argument_list|(
literal|"test"
argument_list|)
operator|.
name|commit
argument_list|()
expr_stmt|;
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|c1
operator|.
name|children
argument_list|()
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|clear1
parameter_list|()
block|{
name|Folder
name|c1
init|=
name|db
operator|.
name|createFolder
argument_list|(
literal|"/top"
argument_list|)
decl_stmt|;
name|c1
operator|.
name|clear
argument_list|()
expr_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|c1
operator|.
name|documents
argument_list|()
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|clear2
parameter_list|()
block|{
name|Folder
name|c1
init|=
name|db
operator|.
name|createFolder
argument_list|(
literal|"/top"
argument_list|)
decl_stmt|;
name|c1
operator|.
name|documents
argument_list|()
operator|.
name|build
argument_list|(
name|Name
operator|.
name|generate
argument_list|()
argument_list|)
operator|.
name|elem
argument_list|(
literal|"test"
argument_list|)
operator|.
name|end
argument_list|(
literal|"test"
argument_list|)
operator|.
name|commit
argument_list|()
expr_stmt|;
name|c1
operator|.
name|documents
argument_list|()
operator|.
name|build
argument_list|(
name|Name
operator|.
name|generate
argument_list|()
argument_list|)
operator|.
name|elem
argument_list|(
literal|"test"
argument_list|)
operator|.
name|end
argument_list|(
literal|"test"
argument_list|)
operator|.
name|commit
argument_list|()
expr_stmt|;
name|c1
operator|.
name|clear
argument_list|()
expr_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|c1
operator|.
name|documents
argument_list|()
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|clear3
parameter_list|()
block|{
name|db
operator|.
name|createFolder
argument_list|(
literal|"/top/nested1"
argument_list|)
expr_stmt|;
name|db
operator|.
name|createFolder
argument_list|(
literal|"/top/nested2"
argument_list|)
expr_stmt|;
name|Folder
name|c1
init|=
name|db
operator|.
name|getFolder
argument_list|(
literal|"/top"
argument_list|)
decl_stmt|;
name|c1
operator|.
name|clear
argument_list|()
expr_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|c1
operator|.
name|children
argument_list|()
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|clear4
parameter_list|()
block|{
name|db
operator|.
name|createFolder
argument_list|(
literal|"/top/nested1"
argument_list|)
expr_stmt|;
name|db
operator|.
name|createFolder
argument_list|(
literal|"/top/nested1/more"
argument_list|)
expr_stmt|;
name|db
operator|.
name|createFolder
argument_list|(
literal|"/top/nested2"
argument_list|)
expr_stmt|;
name|Folder
name|c1
init|=
name|db
operator|.
name|getFolder
argument_list|(
literal|"/top"
argument_list|)
decl_stmt|;
name|c1
operator|.
name|documents
argument_list|()
operator|.
name|build
argument_list|(
name|Name
operator|.
name|generate
argument_list|()
argument_list|)
operator|.
name|elem
argument_list|(
literal|"test"
argument_list|)
operator|.
name|end
argument_list|(
literal|"test"
argument_list|)
operator|.
name|commit
argument_list|()
expr_stmt|;
name|c1
operator|.
name|documents
argument_list|()
operator|.
name|build
argument_list|(
name|Name
operator|.
name|generate
argument_list|()
argument_list|)
operator|.
name|elem
argument_list|(
literal|"test"
argument_list|)
operator|.
name|end
argument_list|(
literal|"test"
argument_list|)
operator|.
name|commit
argument_list|()
expr_stmt|;
name|c1
operator|.
name|clear
argument_list|()
expr_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|c1
operator|.
name|documents
argument_list|()
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|c1
operator|.
name|children
argument_list|()
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|delete1
parameter_list|()
block|{
name|Folder
name|c1
init|=
name|db
operator|.
name|createFolder
argument_list|(
literal|"/top/nested"
argument_list|)
decl_stmt|;
name|db
operator|.
name|getFolder
argument_list|(
literal|"/top/nested"
argument_list|)
expr_stmt|;
name|c1
operator|.
name|delete
argument_list|()
expr_stmt|;
try|try
block|{
name|db
operator|.
name|getFolder
argument_list|(
literal|"/top/nested"
argument_list|)
expr_stmt|;
name|fail
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|DatabaseException
name|e
parameter_list|)
block|{
block|}
block|}
annotation|@
name|Test
argument_list|(
name|expected
operator|=
name|DatabaseException
operator|.
name|class
argument_list|)
specifier|public
name|void
name|delete2
parameter_list|()
block|{
name|db
operator|.
name|createFolder
argument_list|(
literal|"/top/nested/more"
argument_list|)
expr_stmt|;
name|Folder
name|c1
init|=
name|db
operator|.
name|getFolder
argument_list|(
literal|"/top/nested"
argument_list|)
decl_stmt|;
name|db
operator|.
name|getFolder
argument_list|(
literal|"/top/nested/more"
argument_list|)
expr_stmt|;
name|c1
operator|.
name|delete
argument_list|()
expr_stmt|;
name|db
operator|.
name|getFolder
argument_list|(
literal|"/top/nested/more"
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|getDocument
parameter_list|()
block|{
name|Folder
name|c1
init|=
name|db
operator|.
name|createFolder
argument_list|(
literal|"/c1"
argument_list|)
decl_stmt|;
name|c1
operator|.
name|documents
argument_list|()
operator|.
name|build
argument_list|(
name|Name
operator|.
name|create
argument_list|(
literal|"original"
argument_list|)
argument_list|)
operator|.
name|elem
argument_list|(
literal|"test"
argument_list|)
operator|.
name|end
argument_list|(
literal|"test"
argument_list|)
operator|.
name|commit
argument_list|()
expr_stmt|;
name|Document
name|d
init|=
name|c1
operator|.
name|documents
argument_list|()
operator|.
name|get
argument_list|(
literal|"original"
argument_list|)
decl_stmt|;
name|assertNotNull
argument_list|(
name|d
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|query1
parameter_list|()
block|{
name|Folder
name|c1
init|=
name|db
operator|.
name|createFolder
argument_list|(
literal|"/c1"
argument_list|)
decl_stmt|;
name|c1
operator|.
name|documents
argument_list|()
operator|.
name|build
argument_list|(
name|Name
operator|.
name|create
argument_list|(
literal|"original"
argument_list|)
argument_list|)
operator|.
name|elem
argument_list|(
literal|"test"
argument_list|)
operator|.
name|end
argument_list|(
literal|"test"
argument_list|)
operator|.
name|commit
argument_list|()
expr_stmt|;
name|c1
operator|.
name|query
argument_list|()
operator|.
name|single
argument_list|(
literal|"/test"
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|query2
parameter_list|()
block|{
name|Folder
name|c1
init|=
name|db
operator|.
name|createFolder
argument_list|(
literal|"/c1"
argument_list|)
decl_stmt|;
name|c1
operator|.
name|namespaceBindings
argument_list|()
operator|.
name|put
argument_list|(
literal|""
argument_list|,
literal|"http://example.com"
argument_list|)
expr_stmt|;
name|c1
operator|.
name|documents
argument_list|()
operator|.
name|build
argument_list|(
name|Name
operator|.
name|create
argument_list|(
literal|"original"
argument_list|)
argument_list|)
operator|.
name|elem
argument_list|(
literal|"test"
argument_list|)
operator|.
name|end
argument_list|(
literal|"test"
argument_list|)
operator|.
name|commit
argument_list|()
expr_stmt|;
name|c1
operator|.
name|query
argument_list|()
operator|.
name|single
argument_list|(
literal|"/test"
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|queryBaseUri
parameter_list|()
block|{
name|Folder
name|c1
init|=
name|db
operator|.
name|createFolder
argument_list|(
literal|"/c1"
argument_list|)
decl_stmt|;
name|c1
operator|.
name|documents
argument_list|()
operator|.
name|build
argument_list|(
name|Name
operator|.
name|create
argument_list|(
literal|"original"
argument_list|)
argument_list|)
operator|.
name|elem
argument_list|(
literal|"test"
argument_list|)
operator|.
name|end
argument_list|(
literal|"test"
argument_list|)
operator|.
name|commit
argument_list|()
expr_stmt|;
name|assertTrue
argument_list|(
name|c1
operator|.
name|query
argument_list|()
operator|.
name|single
argument_list|(
literal|"doc-available('original')"
argument_list|)
operator|.
name|booleanValue
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|convertToSequence
parameter_list|()
block|{
name|Folder
name|c1
init|=
name|db
operator|.
name|createFolder
argument_list|(
literal|"/c1"
argument_list|)
decl_stmt|,
name|c2
init|=
name|db
operator|.
name|createFolder
argument_list|(
literal|"/c2"
argument_list|)
decl_stmt|;
name|c1
operator|.
name|documents
argument_list|()
operator|.
name|build
argument_list|(
name|Name
operator|.
name|create
argument_list|(
literal|"one"
argument_list|)
argument_list|)
operator|.
name|elem
argument_list|(
literal|"test"
argument_list|)
operator|.
name|end
argument_list|(
literal|"test"
argument_list|)
operator|.
name|commit
argument_list|()
expr_stmt|;
name|c1
operator|.
name|children
argument_list|()
operator|.
name|create
argument_list|(
literal|"sub"
argument_list|)
operator|.
name|documents
argument_list|()
operator|.
name|build
argument_list|(
name|Name
operator|.
name|create
argument_list|(
literal|"another"
argument_list|)
argument_list|)
operator|.
name|elem
argument_list|(
literal|"test"
argument_list|)
operator|.
name|end
argument_list|(
literal|"test"
argument_list|)
operator|.
name|commit
argument_list|()
expr_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|c2
operator|.
name|query
argument_list|()
operator|.
name|all
argument_list|(
literal|"/test"
argument_list|)
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|c1
operator|.
name|query
argument_list|()
operator|.
name|all
argument_list|(
literal|"/test"
argument_list|)
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|c2
operator|.
name|query
argument_list|()
operator|.
name|all
argument_list|(
literal|"$_1/test"
argument_list|,
operator|new
name|Object
index|[]
block|{
name|c1
block|}
argument_list|)
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|convertDocumentsToSequence
parameter_list|()
block|{
name|Folder
name|c1
init|=
name|db
operator|.
name|createFolder
argument_list|(
literal|"/c1"
argument_list|)
decl_stmt|,
name|c2
init|=
name|db
operator|.
name|createFolder
argument_list|(
literal|"/c2"
argument_list|)
decl_stmt|;
name|c1
operator|.
name|documents
argument_list|()
operator|.
name|build
argument_list|(
name|Name
operator|.
name|create
argument_list|(
literal|"one"
argument_list|)
argument_list|)
operator|.
name|elem
argument_list|(
literal|"test"
argument_list|)
operator|.
name|end
argument_list|(
literal|"test"
argument_list|)
operator|.
name|commit
argument_list|()
expr_stmt|;
name|c1
operator|.
name|children
argument_list|()
operator|.
name|create
argument_list|(
literal|"sub"
argument_list|)
operator|.
name|documents
argument_list|()
operator|.
name|build
argument_list|(
name|Name
operator|.
name|create
argument_list|(
literal|"another"
argument_list|)
argument_list|)
operator|.
name|elem
argument_list|(
literal|"test"
argument_list|)
operator|.
name|end
argument_list|(
literal|"test"
argument_list|)
operator|.
name|commit
argument_list|()
expr_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|c2
operator|.
name|query
argument_list|()
operator|.
name|all
argument_list|(
literal|"/test"
argument_list|)
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|c2
operator|.
name|query
argument_list|()
operator|.
name|all
argument_list|(
literal|"$_1/test"
argument_list|,
operator|new
name|Object
index|[]
block|{
name|c1
operator|.
name|documents
argument_list|()
block|}
argument_list|)
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|move1
parameter_list|()
block|{
name|Folder
name|c1
init|=
name|db
operator|.
name|createFolder
argument_list|(
literal|"/c1"
argument_list|)
decl_stmt|,
name|c2
init|=
name|db
operator|.
name|createFolder
argument_list|(
literal|"/c2"
argument_list|)
decl_stmt|;
name|Folder
name|f
init|=
name|c1
operator|.
name|children
argument_list|()
operator|.
name|create
argument_list|(
literal|"f"
argument_list|)
decl_stmt|;
name|f
operator|.
name|move
argument_list|(
name|c2
argument_list|,
name|Name
operator|.
name|keepCreate
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"/c2/f"
argument_list|,
name|f
operator|.
name|path
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|c2
argument_list|,
name|f
operator|.
name|parent
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|move2
parameter_list|()
block|{
name|Folder
name|c1
init|=
name|db
operator|.
name|createFolder
argument_list|(
literal|"/c1"
argument_list|)
decl_stmt|,
name|c2
init|=
name|db
operator|.
name|createFolder
argument_list|(
literal|"/c2"
argument_list|)
decl_stmt|;
name|Folder
name|f
init|=
name|c1
operator|.
name|children
argument_list|()
operator|.
name|create
argument_list|(
literal|"f"
argument_list|)
decl_stmt|;
name|f
operator|.
name|move
argument_list|(
name|c2
argument_list|,
name|Name
operator|.
name|create
argument_list|(
literal|"g"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"/c2/g"
argument_list|,
name|f
operator|.
name|path
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|c2
argument_list|,
name|f
operator|.
name|parent
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|move3
parameter_list|()
block|{
name|Folder
name|c1
init|=
name|db
operator|.
name|createFolder
argument_list|(
literal|"/c1"
argument_list|)
decl_stmt|;
name|Folder
name|f
init|=
name|c1
operator|.
name|children
argument_list|()
operator|.
name|create
argument_list|(
literal|"f"
argument_list|)
decl_stmt|;
name|f
operator|.
name|move
argument_list|(
name|f
operator|.
name|parent
argument_list|()
argument_list|,
name|Name
operator|.
name|create
argument_list|(
literal|"g"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"/c1/g"
argument_list|,
name|f
operator|.
name|path
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|c1
argument_list|,
name|f
operator|.
name|parent
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|copy1
parameter_list|()
block|{
name|Folder
name|c1
init|=
name|db
operator|.
name|createFolder
argument_list|(
literal|"/c1"
argument_list|)
decl_stmt|,
name|c2
init|=
name|db
operator|.
name|createFolder
argument_list|(
literal|"/c2"
argument_list|)
decl_stmt|;
name|Folder
name|f1
init|=
name|c1
operator|.
name|children
argument_list|()
operator|.
name|create
argument_list|(
literal|"f"
argument_list|)
decl_stmt|;
name|Folder
name|f2
init|=
name|f1
operator|.
name|copy
argument_list|(
name|c2
argument_list|,
name|Name
operator|.
name|keepCreate
argument_list|()
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|"/c1/f"
argument_list|,
name|f1
operator|.
name|path
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|c1
argument_list|,
name|f1
operator|.
name|parent
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"/c2/f"
argument_list|,
name|f2
operator|.
name|path
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|c2
argument_list|,
name|f2
operator|.
name|parent
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|copy2
parameter_list|()
block|{
name|Folder
name|c1
init|=
name|db
operator|.
name|createFolder
argument_list|(
literal|"/c1"
argument_list|)
decl_stmt|;
name|Folder
name|f1
init|=
name|c1
operator|.
name|children
argument_list|()
operator|.
name|create
argument_list|(
literal|"f1"
argument_list|)
decl_stmt|;
name|Folder
name|f2
init|=
name|f1
operator|.
name|copy
argument_list|(
name|f1
operator|.
name|parent
argument_list|()
argument_list|,
name|Name
operator|.
name|create
argument_list|(
literal|"f2"
argument_list|)
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|"/c1/f1"
argument_list|,
name|f1
operator|.
name|path
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|c1
argument_list|,
name|f1
operator|.
name|parent
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"/c1/f2"
argument_list|,
name|f2
operator|.
name|path
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|c1
argument_list|,
name|f2
operator|.
name|parent
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

