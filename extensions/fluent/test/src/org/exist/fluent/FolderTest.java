begin_unit|revision:1.0.0;language:Java;cregit-version:0.0.1
begin_package
package|package
name|org
operator|.
name|exist
operator|.
name|fluent
package|;
end_package

begin_comment
comment|/**  * Created by IntelliJ IDEA.  * User: wessels  * Date: Oct 29, 2007  * Time: 8:49:39 PM  * To change this template use File | Settings | File Templates.  */
end_comment

begin_class
specifier|public
class|class
name|FolderTest
extends|extends
name|DatabaseHelper
block|{
specifier|public
name|void
name|testCreateTop
parameter_list|()
block|{
name|db
operator|.
name|createFolder
argument_list|(
literal|"/top"
argument_list|)
expr_stmt|;
try|try
block|{
name|db
operator|.
name|getFolder
argument_list|(
literal|"/top"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|DatabaseException
name|e
parameter_list|)
block|{
name|fail
argument_list|(
name|e
operator|.
name|getMessage
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
specifier|public
name|void
name|testCreateNested
parameter_list|()
block|{
name|db
operator|.
name|createFolder
argument_list|(
literal|"/top/nested"
argument_list|)
expr_stmt|;
try|try
block|{
name|db
operator|.
name|getFolder
argument_list|(
literal|"/top/nested"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|DatabaseException
name|e
parameter_list|)
block|{
name|fail
argument_list|(
name|e
operator|.
name|getMessage
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
specifier|public
name|void
name|testGetRoot
parameter_list|()
block|{
name|assertEquals
argument_list|(
literal|""
argument_list|,
name|db
operator|.
name|getFolder
argument_list|(
literal|"/"
argument_list|)
operator|.
name|name
argument_list|()
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|testGetMissingTop1
parameter_list|()
block|{
try|try
block|{
name|db
operator|.
name|getFolder
argument_list|(
literal|"/top"
argument_list|)
expr_stmt|;
name|fail
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|DatabaseException
name|e
parameter_list|)
block|{
block|}
block|}
specifier|public
name|void
name|testGetMissingNested1
parameter_list|()
block|{
try|try
block|{
name|db
operator|.
name|getFolder
argument_list|(
literal|"/top/nested"
argument_list|)
expr_stmt|;
name|fail
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|DatabaseException
name|e
parameter_list|)
block|{
block|}
block|}
specifier|public
name|void
name|testDuplicate1
parameter_list|()
block|{
name|Folder
name|c1
init|=
name|db
operator|.
name|createFolder
argument_list|(
literal|"/top"
argument_list|)
decl_stmt|;
name|Folder
name|c2
init|=
name|c1
operator|.
name|clone
argument_list|()
decl_stmt|;
name|assertEquals
argument_list|(
name|c1
operator|.
name|path
argument_list|()
argument_list|,
name|c2
operator|.
name|path
argument_list|()
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|testDuplicate2
parameter_list|()
block|{
name|Folder
name|c1
init|=
name|db
operator|.
name|createFolder
argument_list|(
literal|"/top"
argument_list|)
decl_stmt|;
name|c1
operator|.
name|namespaceBindings
argument_list|()
operator|.
name|put
argument_list|(
literal|"foo"
argument_list|,
literal|"http://www.ideanest.com/"
argument_list|)
expr_stmt|;
name|Folder
name|c2
init|=
name|c1
operator|.
name|clone
argument_list|()
decl_stmt|;
name|assertEquals
argument_list|(
literal|"http://www.ideanest.com/"
argument_list|,
name|c2
operator|.
name|namespaceBindings
argument_list|()
operator|.
name|get
argument_list|(
literal|"foo"
argument_list|)
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|testGetName1
parameter_list|()
block|{
name|assertEquals
argument_list|(
literal|"top"
argument_list|,
name|db
operator|.
name|createFolder
argument_list|(
literal|"/top"
argument_list|)
operator|.
name|name
argument_list|()
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|testGetName2
parameter_list|()
block|{
name|assertEquals
argument_list|(
literal|"nested"
argument_list|,
name|db
operator|.
name|createFolder
argument_list|(
literal|"/top/nested"
argument_list|)
operator|.
name|name
argument_list|()
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|testGetPath1
parameter_list|()
block|{
name|assertEquals
argument_list|(
literal|"/top"
argument_list|,
name|db
operator|.
name|createFolder
argument_list|(
literal|"/top"
argument_list|)
operator|.
name|path
argument_list|()
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|testGetPath2
parameter_list|()
block|{
name|assertEquals
argument_list|(
literal|"/top/nested"
argument_list|,
name|db
operator|.
name|createFolder
argument_list|(
literal|"/top/nested"
argument_list|)
operator|.
name|path
argument_list|()
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|testGetPath3
parameter_list|()
block|{
name|assertEquals
argument_list|(
literal|"/"
argument_list|,
name|db
operator|.
name|createFolder
argument_list|(
literal|"/"
argument_list|)
operator|.
name|path
argument_list|()
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|testGetParent1
parameter_list|()
block|{
name|assertEquals
argument_list|(
literal|"/top"
argument_list|,
name|db
operator|.
name|createFolder
argument_list|(
literal|"/top/nested"
argument_list|)
operator|.
name|parent
argument_list|()
operator|.
name|path
argument_list|()
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|testGetParent2
parameter_list|()
block|{
try|try
block|{
name|db
operator|.
name|getFolder
argument_list|(
literal|"/"
argument_list|)
operator|.
name|parent
argument_list|()
expr_stmt|;
name|fail
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|DatabaseException
name|e
parameter_list|)
block|{
block|}
block|}
specifier|public
name|void
name|testGetChild1
parameter_list|()
block|{
name|db
operator|.
name|createFolder
argument_list|(
literal|"/top/nested"
argument_list|)
expr_stmt|;
name|db
operator|.
name|getFolder
argument_list|(
literal|"/top"
argument_list|)
operator|.
name|children
argument_list|()
operator|.
name|get
argument_list|(
literal|"nested"
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|testGetChild2
parameter_list|()
block|{
name|db
operator|.
name|createFolder
argument_list|(
literal|"/top/nested/more"
argument_list|)
expr_stmt|;
name|db
operator|.
name|getFolder
argument_list|(
literal|"/top"
argument_list|)
operator|.
name|children
argument_list|()
operator|.
name|get
argument_list|(
literal|"nested/more"
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|testGetChild3
parameter_list|()
block|{
name|db
operator|.
name|createFolder
argument_list|(
literal|"/top/nested"
argument_list|)
expr_stmt|;
try|try
block|{
name|db
operator|.
name|getFolder
argument_list|(
literal|"/top"
argument_list|)
operator|.
name|children
argument_list|()
operator|.
name|get
argument_list|(
literal|"/nested"
argument_list|)
expr_stmt|;
name|fail
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IllegalArgumentException
name|e
parameter_list|)
block|{
block|}
block|}
specifier|public
name|void
name|testGetChild4
parameter_list|()
block|{
name|db
operator|.
name|createFolder
argument_list|(
literal|"/top/nested"
argument_list|)
expr_stmt|;
name|db
operator|.
name|getFolder
argument_list|(
literal|"/"
argument_list|)
operator|.
name|children
argument_list|()
operator|.
name|get
argument_list|(
literal|"top"
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|testGetChild5
parameter_list|()
block|{
name|db
operator|.
name|createFolder
argument_list|(
literal|"/top/nested"
argument_list|)
expr_stmt|;
name|Folder
name|c1
init|=
name|db
operator|.
name|getFolder
argument_list|(
literal|"/top"
argument_list|)
decl_stmt|;
name|c1
operator|.
name|namespaceBindings
argument_list|()
operator|.
name|put
argument_list|(
literal|"foo"
argument_list|,
literal|"http://www.ideanest.com/"
argument_list|)
expr_stmt|;
name|Folder
name|c2
init|=
name|c1
operator|.
name|children
argument_list|()
operator|.
name|get
argument_list|(
literal|"nested"
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|"http://www.ideanest.com/"
argument_list|,
name|c2
operator|.
name|namespaceBindings
argument_list|()
operator|.
name|get
argument_list|(
literal|"foo"
argument_list|)
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|testNamespace1
parameter_list|()
block|{
name|Folder
name|c1
init|=
name|db
operator|.
name|getFolder
argument_list|(
literal|"/"
argument_list|)
decl_stmt|;
name|c1
operator|.
name|namespaceBindings
argument_list|()
operator|.
name|put
argument_list|(
literal|"foo"
argument_list|,
literal|"http://www.ideanest.com/"
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"http://www.ideanest.com/"
argument_list|,
name|c1
operator|.
name|namespaceBindings
argument_list|()
operator|.
name|get
argument_list|(
literal|"foo"
argument_list|)
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|testNamespace2
parameter_list|()
block|{
name|Folder
name|c1
init|=
name|db
operator|.
name|getFolder
argument_list|(
literal|"/"
argument_list|)
decl_stmt|;
name|c1
operator|.
name|namespaceBindings
argument_list|()
operator|.
name|put
argument_list|(
literal|""
argument_list|,
literal|"http://www.ideanest.com/"
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"http://www.ideanest.com/"
argument_list|,
name|c1
operator|.
name|namespaceBindings
argument_list|()
operator|.
name|get
argument_list|(
literal|""
argument_list|)
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|testNamespace3
parameter_list|()
block|{
name|Folder
name|c1
init|=
name|db
operator|.
name|getFolder
argument_list|(
literal|"/"
argument_list|)
decl_stmt|;
name|c1
operator|.
name|namespaceBindings
argument_list|()
operator|.
name|put
argument_list|(
literal|"foo"
argument_list|,
literal|"http://www.ideanest.com/"
argument_list|)
expr_stmt|;
name|c1
operator|.
name|namespaceBindings
argument_list|()
operator|.
name|remove
argument_list|(
literal|"foo"
argument_list|)
expr_stmt|;
name|assertNull
argument_list|(
name|c1
operator|.
name|namespaceBindings
argument_list|()
operator|.
name|get
argument_list|(
literal|"foo"
argument_list|)
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|testNamespace4
parameter_list|()
block|{
name|Folder
name|c1
init|=
name|db
operator|.
name|getFolder
argument_list|(
literal|"/"
argument_list|)
decl_stmt|;
name|c1
operator|.
name|namespaceBindings
argument_list|()
operator|.
name|put
argument_list|(
literal|"foo"
argument_list|,
literal|"http://www.ideanest.com/"
argument_list|)
expr_stmt|;
name|c1
operator|.
name|namespaceBindings
argument_list|()
operator|.
name|put
argument_list|(
literal|"bar"
argument_list|,
literal|"urn:blah"
argument_list|)
expr_stmt|;
name|c1
operator|.
name|namespaceBindings
argument_list|()
operator|.
name|remove
argument_list|(
literal|"foo"
argument_list|)
expr_stmt|;
name|assertNull
argument_list|(
name|c1
operator|.
name|namespaceBindings
argument_list|()
operator|.
name|get
argument_list|(
literal|"foo"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"urn:blah"
argument_list|,
name|c1
operator|.
name|namespaceBindings
argument_list|()
operator|.
name|get
argument_list|(
literal|"bar"
argument_list|)
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|testNamespace5
parameter_list|()
block|{
name|Folder
name|c1
init|=
name|db
operator|.
name|getFolder
argument_list|(
literal|"/"
argument_list|)
decl_stmt|;
name|c1
operator|.
name|namespaceBindings
argument_list|()
operator|.
name|put
argument_list|(
literal|"foo"
argument_list|,
literal|"http://www.ideanest.com/"
argument_list|)
expr_stmt|;
name|c1
operator|.
name|namespaceBindings
argument_list|()
operator|.
name|put
argument_list|(
literal|"bar"
argument_list|,
literal|"urn:blah"
argument_list|)
expr_stmt|;
name|c1
operator|.
name|namespaceBindings
argument_list|()
operator|.
name|clear
argument_list|()
expr_stmt|;
name|assertNull
argument_list|(
name|c1
operator|.
name|namespaceBindings
argument_list|()
operator|.
name|get
argument_list|(
literal|"foo"
argument_list|)
argument_list|)
expr_stmt|;
name|assertNull
argument_list|(
name|c1
operator|.
name|namespaceBindings
argument_list|()
operator|.
name|get
argument_list|(
literal|"bar"
argument_list|)
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|testBuildDocument1
parameter_list|()
block|{
name|Folder
name|c1
init|=
name|db
operator|.
name|createFolder
argument_list|(
literal|"/top"
argument_list|)
decl_stmt|;
name|c1
operator|.
name|documents
argument_list|()
operator|.
name|build
argument_list|(
name|Name
operator|.
name|create
argument_list|(
literal|"doc1"
argument_list|)
argument_list|)
operator|.
name|elem
argument_list|(
literal|"test"
argument_list|)
operator|.
name|end
argument_list|(
literal|"test"
argument_list|)
operator|.
name|commit
argument_list|()
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|c1
operator|.
name|documents
argument_list|()
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|testBuildDocument2
parameter_list|()
block|{
name|Folder
name|c1
init|=
name|db
operator|.
name|createFolder
argument_list|(
literal|"/top"
argument_list|)
decl_stmt|;
name|c1
operator|.
name|documents
argument_list|()
operator|.
name|build
argument_list|(
name|Name
operator|.
name|create
argument_list|(
literal|"doc1"
argument_list|)
argument_list|)
operator|.
name|elem
argument_list|(
literal|"test1"
argument_list|)
operator|.
name|end
argument_list|(
literal|"test1"
argument_list|)
operator|.
name|commit
argument_list|()
expr_stmt|;
name|c1
operator|.
name|documents
argument_list|()
operator|.
name|build
argument_list|(
name|Name
operator|.
name|overwrite
argument_list|(
literal|"doc1"
argument_list|)
argument_list|)
operator|.
name|elem
argument_list|(
literal|"test2"
argument_list|)
operator|.
name|end
argument_list|(
literal|"test2"
argument_list|)
operator|.
name|commit
argument_list|()
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|c1
operator|.
name|documents
argument_list|()
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|testBuildDocument3
parameter_list|()
block|{
name|Folder
name|c1
init|=
name|db
operator|.
name|createFolder
argument_list|(
literal|"/top"
argument_list|)
decl_stmt|;
name|c1
operator|.
name|documents
argument_list|()
operator|.
name|build
argument_list|(
name|Name
operator|.
name|create
argument_list|(
literal|"doc1"
argument_list|)
argument_list|)
operator|.
name|elem
argument_list|(
literal|"test1"
argument_list|)
operator|.
name|end
argument_list|(
literal|"test1"
argument_list|)
operator|.
name|commit
argument_list|()
expr_stmt|;
try|try
block|{
name|c1
operator|.
name|documents
argument_list|()
operator|.
name|build
argument_list|(
name|Name
operator|.
name|create
argument_list|(
literal|"doc1"
argument_list|)
argument_list|)
operator|.
name|elem
argument_list|(
literal|"test2"
argument_list|)
operator|.
name|end
argument_list|(
literal|"test2"
argument_list|)
operator|.
name|commit
argument_list|()
expr_stmt|;
name|fail
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|DatabaseException
name|e
parameter_list|)
block|{
block|}
block|}
specifier|public
name|void
name|testBuildDocument4
parameter_list|()
block|{
name|Folder
name|c1
init|=
name|db
operator|.
name|createFolder
argument_list|(
literal|"/top"
argument_list|)
decl_stmt|;
name|c1
operator|.
name|documents
argument_list|()
operator|.
name|build
argument_list|(
name|Name
operator|.
name|generate
argument_list|()
argument_list|)
operator|.
name|elem
argument_list|(
literal|"test"
argument_list|)
operator|.
name|end
argument_list|(
literal|"test"
argument_list|)
operator|.
name|commit
argument_list|()
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|c1
operator|.
name|documents
argument_list|()
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|testBuildDocument5
parameter_list|()
block|{
name|Folder
name|c1
init|=
name|db
operator|.
name|createFolder
argument_list|(
literal|"/top"
argument_list|)
decl_stmt|;
name|c1
operator|.
name|documents
argument_list|()
operator|.
name|build
argument_list|(
name|Name
operator|.
name|generate
argument_list|()
argument_list|)
operator|.
name|elem
argument_list|(
literal|"test"
argument_list|)
operator|.
name|end
argument_list|(
literal|"test"
argument_list|)
operator|.
name|commit
argument_list|()
expr_stmt|;
name|c1
operator|.
name|documents
argument_list|()
operator|.
name|build
argument_list|(
name|Name
operator|.
name|generate
argument_list|()
argument_list|)
operator|.
name|elem
argument_list|(
literal|"test"
argument_list|)
operator|.
name|end
argument_list|(
literal|"test"
argument_list|)
operator|.
name|commit
argument_list|()
expr_stmt|;
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|c1
operator|.
name|documents
argument_list|()
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|testSize1
parameter_list|()
block|{
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|db
operator|.
name|getFolder
argument_list|(
literal|"/"
argument_list|)
operator|.
name|documents
argument_list|()
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|testSize2
parameter_list|()
block|{
name|Folder
name|c1
init|=
name|db
operator|.
name|createFolder
argument_list|(
literal|"/top/nested"
argument_list|)
decl_stmt|;
name|c1
operator|.
name|documents
argument_list|()
operator|.
name|build
argument_list|(
name|Name
operator|.
name|generate
argument_list|()
argument_list|)
operator|.
name|elem
argument_list|(
literal|"test"
argument_list|)
operator|.
name|end
argument_list|(
literal|"test"
argument_list|)
operator|.
name|commit
argument_list|()
expr_stmt|;
name|c1
operator|.
name|documents
argument_list|()
operator|.
name|build
argument_list|(
name|Name
operator|.
name|generate
argument_list|()
argument_list|)
operator|.
name|elem
argument_list|(
literal|"test"
argument_list|)
operator|.
name|end
argument_list|(
literal|"test"
argument_list|)
operator|.
name|commit
argument_list|()
expr_stmt|;
name|c1
operator|.
name|documents
argument_list|()
operator|.
name|build
argument_list|(
name|Name
operator|.
name|create
argument_list|(
literal|"doc1"
argument_list|)
argument_list|)
operator|.
name|elem
argument_list|(
literal|"test"
argument_list|)
operator|.
name|end
argument_list|(
literal|"test"
argument_list|)
operator|.
name|commit
argument_list|()
expr_stmt|;
name|assertEquals
argument_list|(
literal|3
argument_list|,
name|c1
operator|.
name|documents
argument_list|()
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|db
operator|.
name|getFolder
argument_list|(
literal|"/top"
argument_list|)
operator|.
name|documents
argument_list|()
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|testChildrenSize1
parameter_list|()
block|{
name|Folder
name|c1
init|=
name|db
operator|.
name|createFolder
argument_list|(
literal|"/top"
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|c1
operator|.
name|children
argument_list|()
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|testChildrenSize2
parameter_list|()
block|{
name|db
operator|.
name|createFolder
argument_list|(
literal|"/top/nested1"
argument_list|)
expr_stmt|;
name|db
operator|.
name|createFolder
argument_list|(
literal|"/top/nested2"
argument_list|)
expr_stmt|;
name|Folder
name|c1
init|=
name|db
operator|.
name|getFolder
argument_list|(
literal|"/top"
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|c1
operator|.
name|children
argument_list|()
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|testChildrenSize3
parameter_list|()
block|{
name|db
operator|.
name|createFolder
argument_list|(
literal|"/top/nested1"
argument_list|)
expr_stmt|;
name|db
operator|.
name|createFolder
argument_list|(
literal|"/top/nested2"
argument_list|)
operator|.
name|documents
argument_list|()
operator|.
name|build
argument_list|(
name|Name
operator|.
name|generate
argument_list|()
argument_list|)
operator|.
name|elem
argument_list|(
literal|"test"
argument_list|)
operator|.
name|end
argument_list|(
literal|"test"
argument_list|)
operator|.
name|commit
argument_list|()
expr_stmt|;
name|Folder
name|c1
init|=
name|db
operator|.
name|getFolder
argument_list|(
literal|"/top"
argument_list|)
decl_stmt|;
name|c1
operator|.
name|documents
argument_list|()
operator|.
name|build
argument_list|(
name|Name
operator|.
name|generate
argument_list|()
argument_list|)
operator|.
name|elem
argument_list|(
literal|"test"
argument_list|)
operator|.
name|end
argument_list|(
literal|"test"
argument_list|)
operator|.
name|commit
argument_list|()
expr_stmt|;
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|c1
operator|.
name|children
argument_list|()
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|testClear1
parameter_list|()
block|{
name|Folder
name|c1
init|=
name|db
operator|.
name|createFolder
argument_list|(
literal|"/top"
argument_list|)
decl_stmt|;
name|c1
operator|.
name|clear
argument_list|()
expr_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|c1
operator|.
name|documents
argument_list|()
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|testClear2
parameter_list|()
block|{
name|Folder
name|c1
init|=
name|db
operator|.
name|createFolder
argument_list|(
literal|"/top"
argument_list|)
decl_stmt|;
name|c1
operator|.
name|documents
argument_list|()
operator|.
name|build
argument_list|(
name|Name
operator|.
name|generate
argument_list|()
argument_list|)
operator|.
name|elem
argument_list|(
literal|"test"
argument_list|)
operator|.
name|end
argument_list|(
literal|"test"
argument_list|)
operator|.
name|commit
argument_list|()
expr_stmt|;
name|c1
operator|.
name|documents
argument_list|()
operator|.
name|build
argument_list|(
name|Name
operator|.
name|generate
argument_list|()
argument_list|)
operator|.
name|elem
argument_list|(
literal|"test"
argument_list|)
operator|.
name|end
argument_list|(
literal|"test"
argument_list|)
operator|.
name|commit
argument_list|()
expr_stmt|;
name|c1
operator|.
name|clear
argument_list|()
expr_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|c1
operator|.
name|documents
argument_list|()
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|testClear3
parameter_list|()
block|{
name|db
operator|.
name|createFolder
argument_list|(
literal|"/top/nested1"
argument_list|)
expr_stmt|;
name|db
operator|.
name|createFolder
argument_list|(
literal|"/top/nested2"
argument_list|)
expr_stmt|;
name|Folder
name|c1
init|=
name|db
operator|.
name|getFolder
argument_list|(
literal|"/top"
argument_list|)
decl_stmt|;
name|c1
operator|.
name|clear
argument_list|()
expr_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|c1
operator|.
name|children
argument_list|()
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|testClear4
parameter_list|()
block|{
name|db
operator|.
name|createFolder
argument_list|(
literal|"/top/nested1"
argument_list|)
expr_stmt|;
name|db
operator|.
name|createFolder
argument_list|(
literal|"/top/nested1/more"
argument_list|)
expr_stmt|;
name|db
operator|.
name|createFolder
argument_list|(
literal|"/top/nested2"
argument_list|)
expr_stmt|;
name|Folder
name|c1
init|=
name|db
operator|.
name|getFolder
argument_list|(
literal|"/top"
argument_list|)
decl_stmt|;
name|c1
operator|.
name|documents
argument_list|()
operator|.
name|build
argument_list|(
name|Name
operator|.
name|generate
argument_list|()
argument_list|)
operator|.
name|elem
argument_list|(
literal|"test"
argument_list|)
operator|.
name|end
argument_list|(
literal|"test"
argument_list|)
operator|.
name|commit
argument_list|()
expr_stmt|;
name|c1
operator|.
name|documents
argument_list|()
operator|.
name|build
argument_list|(
name|Name
operator|.
name|generate
argument_list|()
argument_list|)
operator|.
name|elem
argument_list|(
literal|"test"
argument_list|)
operator|.
name|end
argument_list|(
literal|"test"
argument_list|)
operator|.
name|commit
argument_list|()
expr_stmt|;
name|c1
operator|.
name|clear
argument_list|()
expr_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|c1
operator|.
name|documents
argument_list|()
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|c1
operator|.
name|children
argument_list|()
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|testDelete1
parameter_list|()
block|{
name|Folder
name|c1
init|=
name|db
operator|.
name|createFolder
argument_list|(
literal|"/top/nested"
argument_list|)
decl_stmt|;
name|db
operator|.
name|getFolder
argument_list|(
literal|"/top/nested"
argument_list|)
expr_stmt|;
name|c1
operator|.
name|delete
argument_list|()
expr_stmt|;
try|try
block|{
name|db
operator|.
name|getFolder
argument_list|(
literal|"/top/nested"
argument_list|)
expr_stmt|;
name|fail
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|DatabaseException
name|e
parameter_list|)
block|{
block|}
block|}
specifier|public
name|void
name|testDelete2
parameter_list|()
block|{
name|db
operator|.
name|createFolder
argument_list|(
literal|"/top/nested/more"
argument_list|)
expr_stmt|;
name|Folder
name|c1
init|=
name|db
operator|.
name|getFolder
argument_list|(
literal|"/top/nested"
argument_list|)
decl_stmt|;
name|db
operator|.
name|getFolder
argument_list|(
literal|"/top/nested/more"
argument_list|)
expr_stmt|;
name|c1
operator|.
name|delete
argument_list|()
expr_stmt|;
try|try
block|{
name|db
operator|.
name|getFolder
argument_list|(
literal|"/top/nested/more"
argument_list|)
expr_stmt|;
name|fail
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|DatabaseException
name|e
parameter_list|)
block|{
block|}
block|}
specifier|public
name|void
name|testGetDocument
parameter_list|()
block|{
name|Folder
name|c1
init|=
name|db
operator|.
name|createFolder
argument_list|(
literal|"/c1"
argument_list|)
decl_stmt|;
name|c1
operator|.
name|documents
argument_list|()
operator|.
name|build
argument_list|(
name|Name
operator|.
name|create
argument_list|(
literal|"original"
argument_list|)
argument_list|)
operator|.
name|elem
argument_list|(
literal|"test"
argument_list|)
operator|.
name|end
argument_list|(
literal|"test"
argument_list|)
operator|.
name|commit
argument_list|()
expr_stmt|;
name|Document
name|d
init|=
name|c1
operator|.
name|documents
argument_list|()
operator|.
name|get
argument_list|(
literal|"original"
argument_list|)
decl_stmt|;
name|assertNotNull
argument_list|(
name|d
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|testQuery1
parameter_list|()
block|{
name|Folder
name|c1
init|=
name|db
operator|.
name|createFolder
argument_list|(
literal|"/c1"
argument_list|)
decl_stmt|;
name|c1
operator|.
name|documents
argument_list|()
operator|.
name|build
argument_list|(
name|Name
operator|.
name|create
argument_list|(
literal|"original"
argument_list|)
argument_list|)
operator|.
name|elem
argument_list|(
literal|"test"
argument_list|)
operator|.
name|end
argument_list|(
literal|"test"
argument_list|)
operator|.
name|commit
argument_list|()
expr_stmt|;
name|c1
operator|.
name|query
argument_list|()
operator|.
name|single
argument_list|(
literal|"/test"
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|testQuery2
parameter_list|()
block|{
name|Folder
name|c1
init|=
name|db
operator|.
name|createFolder
argument_list|(
literal|"/c1"
argument_list|)
decl_stmt|;
name|c1
operator|.
name|namespaceBindings
argument_list|()
operator|.
name|put
argument_list|(
literal|""
argument_list|,
literal|"http://example.com"
argument_list|)
expr_stmt|;
name|c1
operator|.
name|documents
argument_list|()
operator|.
name|build
argument_list|(
name|Name
operator|.
name|create
argument_list|(
literal|"original"
argument_list|)
argument_list|)
operator|.
name|elem
argument_list|(
literal|"test"
argument_list|)
operator|.
name|end
argument_list|(
literal|"test"
argument_list|)
operator|.
name|commit
argument_list|()
expr_stmt|;
name|c1
operator|.
name|query
argument_list|()
operator|.
name|single
argument_list|(
literal|"/test"
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|testQueryBaseUri
parameter_list|()
block|{
name|Folder
name|c1
init|=
name|db
operator|.
name|createFolder
argument_list|(
literal|"/c1"
argument_list|)
decl_stmt|;
name|c1
operator|.
name|documents
argument_list|()
operator|.
name|build
argument_list|(
name|Name
operator|.
name|create
argument_list|(
literal|"original"
argument_list|)
argument_list|)
operator|.
name|elem
argument_list|(
literal|"test"
argument_list|)
operator|.
name|end
argument_list|(
literal|"test"
argument_list|)
operator|.
name|commit
argument_list|()
expr_stmt|;
name|assertTrue
argument_list|(
name|c1
operator|.
name|query
argument_list|()
operator|.
name|single
argument_list|(
literal|"doc-available('original')"
argument_list|)
operator|.
name|booleanValue
argument_list|()
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|testConvertToSequence
parameter_list|()
block|{
name|Folder
name|c1
init|=
name|db
operator|.
name|createFolder
argument_list|(
literal|"/c1"
argument_list|)
decl_stmt|,
name|c2
init|=
name|db
operator|.
name|createFolder
argument_list|(
literal|"/c2"
argument_list|)
decl_stmt|;
name|c1
operator|.
name|documents
argument_list|()
operator|.
name|build
argument_list|(
name|Name
operator|.
name|create
argument_list|(
literal|"one"
argument_list|)
argument_list|)
operator|.
name|elem
argument_list|(
literal|"test"
argument_list|)
operator|.
name|end
argument_list|(
literal|"test"
argument_list|)
operator|.
name|commit
argument_list|()
expr_stmt|;
name|c1
operator|.
name|children
argument_list|()
operator|.
name|create
argument_list|(
literal|"sub"
argument_list|)
operator|.
name|documents
argument_list|()
operator|.
name|build
argument_list|(
name|Name
operator|.
name|create
argument_list|(
literal|"another"
argument_list|)
argument_list|)
operator|.
name|elem
argument_list|(
literal|"test"
argument_list|)
operator|.
name|end
argument_list|(
literal|"test"
argument_list|)
operator|.
name|commit
argument_list|()
expr_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|c2
operator|.
name|query
argument_list|()
operator|.
name|all
argument_list|(
literal|"/test"
argument_list|)
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|c1
operator|.
name|query
argument_list|()
operator|.
name|all
argument_list|(
literal|"/test"
argument_list|)
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|c2
operator|.
name|query
argument_list|()
operator|.
name|all
argument_list|(
literal|"$_1/test"
argument_list|,
operator|new
name|Object
index|[]
block|{
name|c1
block|}
argument_list|)
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|testConvertDocumentsToSequence
parameter_list|()
block|{
name|Folder
name|c1
init|=
name|db
operator|.
name|createFolder
argument_list|(
literal|"/c1"
argument_list|)
decl_stmt|,
name|c2
init|=
name|db
operator|.
name|createFolder
argument_list|(
literal|"/c2"
argument_list|)
decl_stmt|;
name|c1
operator|.
name|documents
argument_list|()
operator|.
name|build
argument_list|(
name|Name
operator|.
name|create
argument_list|(
literal|"one"
argument_list|)
argument_list|)
operator|.
name|elem
argument_list|(
literal|"test"
argument_list|)
operator|.
name|end
argument_list|(
literal|"test"
argument_list|)
operator|.
name|commit
argument_list|()
expr_stmt|;
name|c1
operator|.
name|children
argument_list|()
operator|.
name|create
argument_list|(
literal|"sub"
argument_list|)
operator|.
name|documents
argument_list|()
operator|.
name|build
argument_list|(
name|Name
operator|.
name|create
argument_list|(
literal|"another"
argument_list|)
argument_list|)
operator|.
name|elem
argument_list|(
literal|"test"
argument_list|)
operator|.
name|end
argument_list|(
literal|"test"
argument_list|)
operator|.
name|commit
argument_list|()
expr_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|c2
operator|.
name|query
argument_list|()
operator|.
name|all
argument_list|(
literal|"/test"
argument_list|)
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|c2
operator|.
name|query
argument_list|()
operator|.
name|all
argument_list|(
literal|"$_1/test"
argument_list|,
operator|new
name|Object
index|[]
block|{
name|c1
operator|.
name|documents
argument_list|()
block|}
argument_list|)
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|testMove1
parameter_list|()
block|{
name|Folder
name|c1
init|=
name|db
operator|.
name|createFolder
argument_list|(
literal|"/c1"
argument_list|)
decl_stmt|,
name|c2
init|=
name|db
operator|.
name|createFolder
argument_list|(
literal|"/c2"
argument_list|)
decl_stmt|;
name|Folder
name|f
init|=
name|c1
operator|.
name|children
argument_list|()
operator|.
name|create
argument_list|(
literal|"f"
argument_list|)
decl_stmt|;
name|f
operator|.
name|move
argument_list|(
name|c2
argument_list|,
name|Name
operator|.
name|keepCreate
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"/c2/f"
argument_list|,
name|f
operator|.
name|path
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|c2
argument_list|,
name|f
operator|.
name|parent
argument_list|()
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|testMove2
parameter_list|()
block|{
name|Folder
name|c1
init|=
name|db
operator|.
name|createFolder
argument_list|(
literal|"/c1"
argument_list|)
decl_stmt|,
name|c2
init|=
name|db
operator|.
name|createFolder
argument_list|(
literal|"/c2"
argument_list|)
decl_stmt|;
name|Folder
name|f
init|=
name|c1
operator|.
name|children
argument_list|()
operator|.
name|create
argument_list|(
literal|"f"
argument_list|)
decl_stmt|;
name|f
operator|.
name|move
argument_list|(
name|c2
argument_list|,
name|Name
operator|.
name|create
argument_list|(
literal|"g"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"/c2/g"
argument_list|,
name|f
operator|.
name|path
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|c2
argument_list|,
name|f
operator|.
name|parent
argument_list|()
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|testMove3
parameter_list|()
block|{
name|Folder
name|c1
init|=
name|db
operator|.
name|createFolder
argument_list|(
literal|"/c1"
argument_list|)
decl_stmt|;
name|Folder
name|f
init|=
name|c1
operator|.
name|children
argument_list|()
operator|.
name|create
argument_list|(
literal|"f"
argument_list|)
decl_stmt|;
name|f
operator|.
name|move
argument_list|(
name|f
operator|.
name|parent
argument_list|()
argument_list|,
name|Name
operator|.
name|create
argument_list|(
literal|"g"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"/c1/g"
argument_list|,
name|f
operator|.
name|path
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|c1
argument_list|,
name|f
operator|.
name|parent
argument_list|()
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|testCopy1
parameter_list|()
block|{
name|Folder
name|c1
init|=
name|db
operator|.
name|createFolder
argument_list|(
literal|"/c1"
argument_list|)
decl_stmt|,
name|c2
init|=
name|db
operator|.
name|createFolder
argument_list|(
literal|"/c2"
argument_list|)
decl_stmt|;
name|Folder
name|f1
init|=
name|c1
operator|.
name|children
argument_list|()
operator|.
name|create
argument_list|(
literal|"f"
argument_list|)
decl_stmt|;
name|Folder
name|f2
init|=
name|f1
operator|.
name|copy
argument_list|(
name|c2
argument_list|,
name|Name
operator|.
name|keepCreate
argument_list|()
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|"/c1/f"
argument_list|,
name|f1
operator|.
name|path
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|c1
argument_list|,
name|f1
operator|.
name|parent
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"/c2/f"
argument_list|,
name|f2
operator|.
name|path
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|c2
argument_list|,
name|f2
operator|.
name|parent
argument_list|()
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|testCopy2
parameter_list|()
block|{
name|Folder
name|c1
init|=
name|db
operator|.
name|createFolder
argument_list|(
literal|"/c1"
argument_list|)
decl_stmt|;
name|Folder
name|f1
init|=
name|c1
operator|.
name|children
argument_list|()
operator|.
name|create
argument_list|(
literal|"f1"
argument_list|)
decl_stmt|;
name|Folder
name|f2
init|=
name|f1
operator|.
name|copy
argument_list|(
name|f1
operator|.
name|parent
argument_list|()
argument_list|,
name|Name
operator|.
name|create
argument_list|(
literal|"f2"
argument_list|)
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|"/c1/f1"
argument_list|,
name|f1
operator|.
name|path
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|c1
argument_list|,
name|f1
operator|.
name|parent
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"/c1/f2"
argument_list|,
name|f2
operator|.
name|path
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|c1
argument_list|,
name|f2
operator|.
name|parent
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

