begin_unit|revision:1.0.0;language:Java;cregit-version:0.0.1
begin_package
package|package
name|org
operator|.
name|exist
operator|.
name|fluent
package|;
end_package

begin_import
import|import
name|org
operator|.
name|w3c
operator|.
name|dom
operator|.
name|*
import|;
end_import

begin_import
import|import
name|org
operator|.
name|w3c
operator|.
name|dom
operator|.
name|Node
import|;
end_import

begin_comment
comment|/**  * Created by IntelliJ IDEA.  * User: wessels  * Date: Oct 29, 2007  * Time: 8:48:19 PM  * To change this template use File | Settings | File Templates.  */
end_comment

begin_class
specifier|public
class|class
name|ElementBuilderHelper
extends|extends
name|DatabaseHelper
block|{
specifier|public
name|void
name|testEmpty
parameter_list|()
block|{
name|ElementBuilder
argument_list|<
name|Object
argument_list|>
name|builder
init|=
operator|new
name|ElementBuilder
argument_list|<
name|Object
argument_list|>
argument_list|(
name|db
operator|.
name|namespaceBindings
argument_list|()
argument_list|,
literal|false
argument_list|,
operator|new
name|ElementBuilder
operator|.
name|CompletedCallback
argument_list|<
name|Object
argument_list|>
argument_list|()
block|{
specifier|public
name|Object
name|completed
parameter_list|(
name|org
operator|.
name|w3c
operator|.
name|dom
operator|.
name|Node
index|[]
name|node
parameter_list|)
block|{
name|fail
argument_list|(
literal|"completed called"
argument_list|)
expr_stmt|;
return|return
literal|null
return|;
block|}
block|}
argument_list|)
decl_stmt|;
name|builder
operator|.
name|commit
argument_list|()
expr_stmt|;
block|}
specifier|public
name|void
name|testElemOnStack
parameter_list|()
block|{
name|ElementBuilder
argument_list|<
name|Object
argument_list|>
name|builder
init|=
operator|new
name|ElementBuilder
argument_list|<
name|Object
argument_list|>
argument_list|(
name|db
operator|.
name|namespaceBindings
argument_list|()
argument_list|,
literal|false
argument_list|,
operator|new
name|ElementBuilder
operator|.
name|CompletedCallback
argument_list|<
name|Object
argument_list|>
argument_list|()
block|{
specifier|public
name|Object
name|completed
parameter_list|(
name|Node
index|[]
name|node
parameter_list|)
block|{
name|fail
argument_list|(
literal|"completed called"
argument_list|)
expr_stmt|;
return|return
literal|null
return|;
block|}
block|}
argument_list|)
decl_stmt|;
try|try
block|{
name|builder
operator|.
name|elem
argument_list|(
literal|"blah"
argument_list|)
operator|.
name|commit
argument_list|()
expr_stmt|;
name|fail
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IllegalStateException
name|e
parameter_list|)
block|{
block|}
block|}
specifier|public
name|void
name|testNoFragAllowed
parameter_list|()
block|{
name|ElementBuilder
argument_list|<
name|Object
argument_list|>
name|builder
init|=
operator|new
name|ElementBuilder
argument_list|<
name|Object
argument_list|>
argument_list|(
name|db
operator|.
name|namespaceBindings
argument_list|()
argument_list|,
literal|false
argument_list|,
operator|new
name|ElementBuilder
operator|.
name|CompletedCallback
argument_list|<
name|Object
argument_list|>
argument_list|()
block|{
specifier|public
name|Object
name|completed
parameter_list|(
name|Node
index|[]
name|node
parameter_list|)
block|{
name|fail
argument_list|(
literal|"completed called"
argument_list|)
expr_stmt|;
return|return
literal|null
return|;
block|}
block|}
argument_list|)
decl_stmt|;
try|try
block|{
name|builder
operator|.
name|elem
argument_list|(
literal|"test"
argument_list|)
operator|.
name|end
argument_list|(
literal|"test"
argument_list|)
operator|.
name|elem
argument_list|(
literal|"test2"
argument_list|)
expr_stmt|;
name|fail
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IllegalStateException
name|e
parameter_list|)
block|{
block|}
block|}
specifier|public
name|void
name|testMismatchedEndSingle
parameter_list|()
block|{
name|ElementBuilder
argument_list|<
name|Object
argument_list|>
name|builder
init|=
operator|new
name|ElementBuilder
argument_list|<
name|Object
argument_list|>
argument_list|(
name|db
operator|.
name|namespaceBindings
argument_list|()
argument_list|,
literal|false
argument_list|,
operator|new
name|ElementBuilder
operator|.
name|CompletedCallback
argument_list|<
name|Object
argument_list|>
argument_list|()
block|{
specifier|public
name|Object
name|completed
parameter_list|(
name|Node
index|[]
name|node
parameter_list|)
block|{
name|fail
argument_list|(
literal|"completed called"
argument_list|)
expr_stmt|;
return|return
literal|null
return|;
block|}
block|}
argument_list|)
decl_stmt|;
try|try
block|{
name|builder
operator|.
name|elem
argument_list|(
literal|"test"
argument_list|)
operator|.
name|end
argument_list|(
literal|"test2"
argument_list|)
expr_stmt|;
name|fail
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IllegalStateException
name|e
parameter_list|)
block|{
block|}
block|}
specifier|public
name|void
name|testMismatchedEndMultiple
parameter_list|()
block|{
name|ElementBuilder
argument_list|<
name|Object
argument_list|>
name|builder
init|=
operator|new
name|ElementBuilder
argument_list|<
name|Object
argument_list|>
argument_list|(
name|db
operator|.
name|namespaceBindings
argument_list|()
argument_list|,
literal|false
argument_list|,
operator|new
name|ElementBuilder
operator|.
name|CompletedCallback
argument_list|<
name|Object
argument_list|>
argument_list|()
block|{
specifier|public
name|Object
name|completed
parameter_list|(
name|Node
index|[]
name|node
parameter_list|)
block|{
name|fail
argument_list|(
literal|"completed called"
argument_list|)
expr_stmt|;
return|return
literal|null
return|;
block|}
block|}
argument_list|)
decl_stmt|;
try|try
block|{
name|builder
operator|.
name|elem
argument_list|(
literal|"test"
argument_list|)
operator|.
name|end
argument_list|(
literal|"test2"
argument_list|,
literal|"test3"
argument_list|,
literal|"blah"
argument_list|)
expr_stmt|;
name|fail
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IllegalStateException
name|e
parameter_list|)
block|{
block|}
block|}
specifier|public
name|void
name|testElemAfterCommit
parameter_list|()
block|{
name|ElementBuilder
argument_list|<
name|Object
argument_list|>
name|builder
init|=
operator|new
name|ElementBuilder
argument_list|<
name|Object
argument_list|>
argument_list|(
name|db
operator|.
name|namespaceBindings
argument_list|()
argument_list|,
literal|false
argument_list|,
operator|new
name|ElementBuilder
operator|.
name|CompletedCallback
argument_list|<
name|Object
argument_list|>
argument_list|()
block|{
specifier|public
name|Object
name|completed
parameter_list|(
name|Node
index|[]
name|node
parameter_list|)
block|{
return|return
literal|null
return|;
block|}
block|}
argument_list|)
decl_stmt|;
try|try
block|{
name|builder
operator|.
name|elem
argument_list|(
literal|"test"
argument_list|)
operator|.
name|end
argument_list|(
literal|"test"
argument_list|)
operator|.
name|commit
argument_list|()
expr_stmt|;
name|builder
operator|.
name|elem
argument_list|(
literal|"test2"
argument_list|)
expr_stmt|;
name|fail
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IllegalStateException
name|e
parameter_list|)
block|{
block|}
block|}
specifier|public
name|void
name|testAttrAfterCommit
parameter_list|()
block|{
name|ElementBuilder
argument_list|<
name|Object
argument_list|>
name|builder
init|=
operator|new
name|ElementBuilder
argument_list|<
name|Object
argument_list|>
argument_list|(
name|db
operator|.
name|namespaceBindings
argument_list|()
argument_list|,
literal|false
argument_list|,
operator|new
name|ElementBuilder
operator|.
name|CompletedCallback
argument_list|<
name|Object
argument_list|>
argument_list|()
block|{
specifier|public
name|Object
name|completed
parameter_list|(
name|Node
index|[]
name|node
parameter_list|)
block|{
return|return
literal|null
return|;
block|}
block|}
argument_list|)
decl_stmt|;
try|try
block|{
name|builder
operator|.
name|elem
argument_list|(
literal|"test"
argument_list|)
operator|.
name|end
argument_list|(
literal|"test"
argument_list|)
operator|.
name|commit
argument_list|()
expr_stmt|;
name|builder
operator|.
name|attr
argument_list|(
literal|"test2"
argument_list|,
literal|"blah"
argument_list|)
expr_stmt|;
name|fail
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IllegalStateException
name|e
parameter_list|)
block|{
block|}
block|}
specifier|public
name|void
name|testTextAfterCommit
parameter_list|()
block|{
name|ElementBuilder
argument_list|<
name|Object
argument_list|>
name|builder
init|=
operator|new
name|ElementBuilder
argument_list|<
name|Object
argument_list|>
argument_list|(
name|db
operator|.
name|namespaceBindings
argument_list|()
argument_list|,
literal|false
argument_list|,
operator|new
name|ElementBuilder
operator|.
name|CompletedCallback
argument_list|<
name|Object
argument_list|>
argument_list|()
block|{
specifier|public
name|Object
name|completed
parameter_list|(
name|Node
index|[]
name|node
parameter_list|)
block|{
return|return
literal|null
return|;
block|}
block|}
argument_list|)
decl_stmt|;
try|try
block|{
name|builder
operator|.
name|elem
argument_list|(
literal|"test"
argument_list|)
operator|.
name|end
argument_list|(
literal|"test"
argument_list|)
operator|.
name|commit
argument_list|()
expr_stmt|;
name|builder
operator|.
name|text
argument_list|(
literal|"test2"
argument_list|)
expr_stmt|;
name|fail
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IllegalStateException
name|e
parameter_list|)
block|{
block|}
block|}
specifier|public
name|void
name|testAttrWithoutElem1
parameter_list|()
block|{
name|ElementBuilder
argument_list|<
name|Object
argument_list|>
name|builder
init|=
operator|new
name|ElementBuilder
argument_list|<
name|Object
argument_list|>
argument_list|(
name|db
operator|.
name|namespaceBindings
argument_list|()
argument_list|,
literal|false
argument_list|,
operator|new
name|ElementBuilder
operator|.
name|CompletedCallback
argument_list|<
name|Object
argument_list|>
argument_list|()
block|{
specifier|public
name|Object
name|completed
parameter_list|(
name|Node
index|[]
name|node
parameter_list|)
block|{
name|fail
argument_list|(
literal|"completed called"
argument_list|)
expr_stmt|;
return|return
literal|null
return|;
block|}
block|}
argument_list|)
decl_stmt|;
try|try
block|{
name|builder
operator|.
name|attr
argument_list|(
literal|"blah"
argument_list|,
literal|"blah"
argument_list|)
expr_stmt|;
name|fail
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IllegalStateException
name|e
parameter_list|)
block|{
block|}
block|}
specifier|public
name|void
name|testAttrWithoutElem2
parameter_list|()
block|{
name|ElementBuilder
argument_list|<
name|Object
argument_list|>
name|builder
init|=
operator|new
name|ElementBuilder
argument_list|<
name|Object
argument_list|>
argument_list|(
name|db
operator|.
name|namespaceBindings
argument_list|()
argument_list|,
literal|false
argument_list|,
operator|new
name|ElementBuilder
operator|.
name|CompletedCallback
argument_list|<
name|Object
argument_list|>
argument_list|()
block|{
specifier|public
name|Object
name|completed
parameter_list|(
name|Node
index|[]
name|node
parameter_list|)
block|{
name|fail
argument_list|(
literal|"completed called"
argument_list|)
expr_stmt|;
return|return
literal|null
return|;
block|}
block|}
argument_list|)
decl_stmt|;
try|try
block|{
name|builder
operator|.
name|elem
argument_list|(
literal|"test"
argument_list|)
operator|.
name|end
argument_list|(
literal|"test"
argument_list|)
operator|.
name|attr
argument_list|(
literal|"blah"
argument_list|,
literal|"blah"
argument_list|)
expr_stmt|;
name|fail
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IllegalStateException
name|e
parameter_list|)
block|{
block|}
block|}
specifier|public
name|void
name|testTextWithoutElemNoFrag1
parameter_list|()
block|{
name|ElementBuilder
argument_list|<
name|Object
argument_list|>
name|builder
init|=
operator|new
name|ElementBuilder
argument_list|<
name|Object
argument_list|>
argument_list|(
name|db
operator|.
name|namespaceBindings
argument_list|()
argument_list|,
literal|false
argument_list|,
operator|new
name|ElementBuilder
operator|.
name|CompletedCallback
argument_list|<
name|Object
argument_list|>
argument_list|()
block|{
specifier|public
name|Object
name|completed
parameter_list|(
name|Node
index|[]
name|node
parameter_list|)
block|{
name|fail
argument_list|(
literal|"completed called"
argument_list|)
expr_stmt|;
return|return
literal|null
return|;
block|}
block|}
argument_list|)
decl_stmt|;
try|try
block|{
name|builder
operator|.
name|text
argument_list|(
literal|"blah"
argument_list|)
expr_stmt|;
name|fail
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IllegalStateException
name|e
parameter_list|)
block|{
block|}
block|}
specifier|public
name|void
name|testTextWithoutElemNoFrag2
parameter_list|()
block|{
name|ElementBuilder
argument_list|<
name|Object
argument_list|>
name|builder
init|=
operator|new
name|ElementBuilder
argument_list|<
name|Object
argument_list|>
argument_list|(
name|db
operator|.
name|namespaceBindings
argument_list|()
argument_list|,
literal|false
argument_list|,
operator|new
name|ElementBuilder
operator|.
name|CompletedCallback
argument_list|<
name|Object
argument_list|>
argument_list|()
block|{
specifier|public
name|Object
name|completed
parameter_list|(
name|Node
index|[]
name|node
parameter_list|)
block|{
name|fail
argument_list|(
literal|"completed called"
argument_list|)
expr_stmt|;
return|return
literal|null
return|;
block|}
block|}
argument_list|)
decl_stmt|;
try|try
block|{
name|builder
operator|.
name|elem
argument_list|(
literal|"test"
argument_list|)
operator|.
name|end
argument_list|(
literal|"test"
argument_list|)
operator|.
name|text
argument_list|(
literal|"blah"
argument_list|)
expr_stmt|;
name|fail
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IllegalStateException
name|e
parameter_list|)
block|{
block|}
block|}
specifier|public
name|void
name|testTextWithoutElemFrag1
parameter_list|()
block|{
name|ElementBuilder
argument_list|<
name|Object
argument_list|>
name|builder
init|=
operator|new
name|ElementBuilder
argument_list|<
name|Object
argument_list|>
argument_list|(
name|db
operator|.
name|namespaceBindings
argument_list|()
argument_list|,
literal|true
argument_list|,
operator|new
name|ElementBuilder
operator|.
name|CompletedCallback
argument_list|<
name|Object
argument_list|>
argument_list|()
block|{
specifier|public
name|Object
name|completed
parameter_list|(
name|Node
index|[]
name|node
parameter_list|)
block|{
return|return
literal|null
return|;
block|}
block|}
argument_list|)
decl_stmt|;
name|builder
operator|.
name|text
argument_list|(
literal|"blah"
argument_list|)
operator|.
name|commit
argument_list|()
expr_stmt|;
block|}
specifier|public
name|void
name|testTextWithoutElemFrag2
parameter_list|()
block|{
name|ElementBuilder
argument_list|<
name|Object
argument_list|>
name|builder
init|=
operator|new
name|ElementBuilder
argument_list|<
name|Object
argument_list|>
argument_list|(
name|db
operator|.
name|namespaceBindings
argument_list|()
argument_list|,
literal|true
argument_list|,
operator|new
name|ElementBuilder
operator|.
name|CompletedCallback
argument_list|<
name|Object
argument_list|>
argument_list|()
block|{
specifier|public
name|Object
name|completed
parameter_list|(
name|Node
index|[]
name|node
parameter_list|)
block|{
return|return
literal|null
return|;
block|}
block|}
argument_list|)
decl_stmt|;
name|builder
operator|.
name|elem
argument_list|(
literal|"test"
argument_list|)
operator|.
name|end
argument_list|(
literal|"test"
argument_list|)
operator|.
name|text
argument_list|(
literal|"blah"
argument_list|)
operator|.
name|commit
argument_list|()
expr_stmt|;
block|}
specifier|public
name|void
name|testCommitOne
parameter_list|()
block|{
name|ElementBuilder
argument_list|<
name|Object
argument_list|>
name|builder
init|=
operator|new
name|ElementBuilder
argument_list|<
name|Object
argument_list|>
argument_list|(
name|db
operator|.
name|namespaceBindings
argument_list|()
argument_list|,
literal|true
argument_list|,
operator|new
name|ElementBuilder
operator|.
name|CompletedCallback
argument_list|<
name|Object
argument_list|>
argument_list|()
block|{
specifier|public
name|Object
name|completed
parameter_list|(
name|Node
index|[]
name|nodes
parameter_list|)
block|{
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|nodes
operator|.
name|length
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|Node
operator|.
name|ELEMENT_NODE
argument_list|,
name|nodes
index|[
literal|0
index|]
operator|.
name|getNodeType
argument_list|()
argument_list|)
expr_stmt|;
return|return
literal|null
return|;
block|}
block|}
argument_list|)
decl_stmt|;
name|builder
operator|.
name|elem
argument_list|(
literal|"test"
argument_list|)
operator|.
name|end
argument_list|(
literal|"test"
argument_list|)
operator|.
name|commit
argument_list|()
expr_stmt|;
block|}
specifier|public
name|void
name|testCommitFrag
parameter_list|()
block|{
name|ElementBuilder
argument_list|<
name|Object
argument_list|>
name|builder
init|=
operator|new
name|ElementBuilder
argument_list|<
name|Object
argument_list|>
argument_list|(
name|db
operator|.
name|namespaceBindings
argument_list|()
argument_list|,
literal|true
argument_list|,
operator|new
name|ElementBuilder
operator|.
name|CompletedCallback
argument_list|<
name|Object
argument_list|>
argument_list|()
block|{
specifier|public
name|Object
name|completed
parameter_list|(
name|Node
index|[]
name|nodes
parameter_list|)
block|{
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|nodes
operator|.
name|length
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|Node
operator|.
name|ELEMENT_NODE
argument_list|,
name|nodes
index|[
literal|0
index|]
operator|.
name|getNodeType
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|Node
operator|.
name|ELEMENT_NODE
argument_list|,
name|nodes
index|[
literal|1
index|]
operator|.
name|getNodeType
argument_list|()
argument_list|)
expr_stmt|;
return|return
literal|null
return|;
block|}
block|}
argument_list|)
decl_stmt|;
name|builder
operator|.
name|elem
argument_list|(
literal|"test"
argument_list|)
operator|.
name|end
argument_list|(
literal|"test"
argument_list|)
operator|.
name|elem
argument_list|(
literal|"test2"
argument_list|)
operator|.
name|end
argument_list|(
literal|"test2"
argument_list|)
operator|.
name|commit
argument_list|()
expr_stmt|;
block|}
specifier|public
name|void
name|testStructure1
parameter_list|()
block|{
name|ElementBuilder
argument_list|<
name|Object
argument_list|>
name|builder
init|=
operator|new
name|ElementBuilder
argument_list|<
name|Object
argument_list|>
argument_list|(
name|db
operator|.
name|namespaceBindings
argument_list|()
argument_list|,
literal|false
argument_list|,
operator|new
name|ElementBuilder
operator|.
name|CompletedCallback
argument_list|<
name|Object
argument_list|>
argument_list|()
block|{
specifier|public
name|Object
name|completed
parameter_list|(
name|Node
index|[]
name|nodes
parameter_list|)
block|{
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|nodes
operator|.
name|length
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"<test/>"
argument_list|,
name|ElementBuilderHelper
operator|.
name|toString
argument_list|(
name|nodes
index|[
literal|0
index|]
argument_list|)
argument_list|)
expr_stmt|;
return|return
literal|null
return|;
block|}
block|}
argument_list|)
decl_stmt|;
name|builder
operator|.
name|elem
argument_list|(
literal|"test"
argument_list|)
operator|.
name|end
argument_list|(
literal|"test"
argument_list|)
operator|.
name|commit
argument_list|()
expr_stmt|;
block|}
specifier|public
name|void
name|testStructure2
parameter_list|()
block|{
name|ElementBuilder
argument_list|<
name|Object
argument_list|>
name|builder
init|=
operator|new
name|ElementBuilder
argument_list|<
name|Object
argument_list|>
argument_list|(
name|db
operator|.
name|namespaceBindings
argument_list|()
argument_list|,
literal|false
argument_list|,
operator|new
name|ElementBuilder
operator|.
name|CompletedCallback
argument_list|<
name|Object
argument_list|>
argument_list|()
block|{
specifier|public
name|Object
name|completed
parameter_list|(
name|Node
index|[]
name|nodes
parameter_list|)
block|{
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|nodes
operator|.
name|length
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"<test><test2/></test>"
argument_list|,
name|ElementBuilderHelper
operator|.
name|toString
argument_list|(
name|nodes
index|[
literal|0
index|]
argument_list|)
argument_list|)
expr_stmt|;
return|return
literal|null
return|;
block|}
block|}
argument_list|)
decl_stmt|;
name|builder
operator|.
name|elem
argument_list|(
literal|"test"
argument_list|)
operator|.
name|elem
argument_list|(
literal|"test2"
argument_list|)
operator|.
name|end
argument_list|(
literal|"test2"
argument_list|)
operator|.
name|end
argument_list|(
literal|"test"
argument_list|)
operator|.
name|commit
argument_list|()
expr_stmt|;
block|}
specifier|public
name|void
name|testStructure3
parameter_list|()
block|{
name|ElementBuilder
argument_list|<
name|Object
argument_list|>
name|builder
init|=
operator|new
name|ElementBuilder
argument_list|<
name|Object
argument_list|>
argument_list|(
name|db
operator|.
name|namespaceBindings
argument_list|()
argument_list|,
literal|false
argument_list|,
operator|new
name|ElementBuilder
operator|.
name|CompletedCallback
argument_list|<
name|Object
argument_list|>
argument_list|()
block|{
specifier|public
name|Object
name|completed
parameter_list|(
name|Node
index|[]
name|nodes
parameter_list|)
block|{
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|nodes
operator|.
name|length
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"<test foo='bar'/>"
argument_list|,
name|ElementBuilderHelper
operator|.
name|toString
argument_list|(
name|nodes
index|[
literal|0
index|]
argument_list|)
argument_list|)
expr_stmt|;
return|return
literal|null
return|;
block|}
block|}
argument_list|)
decl_stmt|;
name|builder
operator|.
name|elem
argument_list|(
literal|"test"
argument_list|)
operator|.
name|attr
argument_list|(
literal|"foo"
argument_list|,
literal|"bar"
argument_list|)
operator|.
name|end
argument_list|(
literal|"test"
argument_list|)
operator|.
name|commit
argument_list|()
expr_stmt|;
block|}
specifier|public
name|void
name|testStructure4
parameter_list|()
block|{
name|ElementBuilder
argument_list|<
name|Object
argument_list|>
name|builder
init|=
operator|new
name|ElementBuilder
argument_list|<
name|Object
argument_list|>
argument_list|(
name|db
operator|.
name|namespaceBindings
argument_list|()
argument_list|,
literal|false
argument_list|,
operator|new
name|ElementBuilder
operator|.
name|CompletedCallback
argument_list|<
name|Object
argument_list|>
argument_list|()
block|{
specifier|public
name|Object
name|completed
parameter_list|(
name|Node
index|[]
name|nodes
parameter_list|)
block|{
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|nodes
operator|.
name|length
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"<test>blah</test>"
argument_list|,
name|ElementBuilderHelper
operator|.
name|toString
argument_list|(
name|nodes
index|[
literal|0
index|]
argument_list|)
argument_list|)
expr_stmt|;
return|return
literal|null
return|;
block|}
block|}
argument_list|)
decl_stmt|;
name|builder
operator|.
name|elem
argument_list|(
literal|"test"
argument_list|)
operator|.
name|text
argument_list|(
literal|"blah"
argument_list|)
operator|.
name|end
argument_list|(
literal|"test"
argument_list|)
operator|.
name|commit
argument_list|()
expr_stmt|;
block|}
specifier|public
name|void
name|testStructure5
parameter_list|()
block|{
name|ElementBuilder
argument_list|<
name|Object
argument_list|>
name|builder
init|=
operator|new
name|ElementBuilder
argument_list|<
name|Object
argument_list|>
argument_list|(
name|db
operator|.
name|namespaceBindings
argument_list|()
argument_list|,
literal|false
argument_list|,
operator|new
name|ElementBuilder
operator|.
name|CompletedCallback
argument_list|<
name|Object
argument_list|>
argument_list|()
block|{
specifier|public
name|Object
name|completed
parameter_list|(
name|Node
index|[]
name|nodes
parameter_list|)
block|{
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|nodes
operator|.
name|length
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"<test foo='bar'/>"
argument_list|,
name|ElementBuilderHelper
operator|.
name|toString
argument_list|(
name|nodes
index|[
literal|0
index|]
argument_list|)
argument_list|)
expr_stmt|;
return|return
literal|null
return|;
block|}
block|}
argument_list|)
decl_stmt|;
name|builder
operator|.
name|elem
argument_list|(
literal|"test"
argument_list|)
operator|.
name|attrIf
argument_list|(
literal|true
argument_list|,
literal|"foo"
argument_list|,
literal|"bar"
argument_list|)
operator|.
name|end
argument_list|(
literal|"test"
argument_list|)
operator|.
name|commit
argument_list|()
expr_stmt|;
block|}
specifier|public
name|void
name|testStructure6
parameter_list|()
block|{
name|ElementBuilder
argument_list|<
name|Object
argument_list|>
name|builder
init|=
operator|new
name|ElementBuilder
argument_list|<
name|Object
argument_list|>
argument_list|(
name|db
operator|.
name|namespaceBindings
argument_list|()
argument_list|,
literal|false
argument_list|,
operator|new
name|ElementBuilder
operator|.
name|CompletedCallback
argument_list|<
name|Object
argument_list|>
argument_list|()
block|{
specifier|public
name|Object
name|completed
parameter_list|(
name|Node
index|[]
name|nodes
parameter_list|)
block|{
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|nodes
operator|.
name|length
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"<test/>"
argument_list|,
name|ElementBuilderHelper
operator|.
name|toString
argument_list|(
name|nodes
index|[
literal|0
index|]
argument_list|)
argument_list|)
expr_stmt|;
return|return
literal|null
return|;
block|}
block|}
argument_list|)
decl_stmt|;
name|builder
operator|.
name|elem
argument_list|(
literal|"test"
argument_list|)
operator|.
name|attrIf
argument_list|(
literal|false
argument_list|,
literal|"foo"
argument_list|,
literal|"bar"
argument_list|)
operator|.
name|end
argument_list|(
literal|"test"
argument_list|)
operator|.
name|commit
argument_list|()
expr_stmt|;
block|}
specifier|public
name|void
name|testFrag1
parameter_list|()
block|{
name|ElementBuilder
argument_list|<
name|Object
argument_list|>
name|builder
init|=
operator|new
name|ElementBuilder
argument_list|<
name|Object
argument_list|>
argument_list|(
name|db
operator|.
name|namespaceBindings
argument_list|()
argument_list|,
literal|true
argument_list|,
operator|new
name|ElementBuilder
operator|.
name|CompletedCallback
argument_list|<
name|Object
argument_list|>
argument_list|()
block|{
specifier|public
name|Object
name|completed
parameter_list|(
name|Node
index|[]
name|nodes
parameter_list|)
block|{
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|nodes
operator|.
name|length
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"<test1/><test2/>"
argument_list|,
name|ElementBuilderHelper
operator|.
name|toString
argument_list|(
name|nodes
index|[
literal|0
index|]
argument_list|)
operator|+
name|ElementBuilderHelper
operator|.
name|toString
argument_list|(
name|nodes
index|[
literal|1
index|]
argument_list|)
argument_list|)
expr_stmt|;
return|return
literal|null
return|;
block|}
block|}
argument_list|)
decl_stmt|;
name|builder
operator|.
name|elem
argument_list|(
literal|"test1"
argument_list|)
operator|.
name|end
argument_list|(
literal|"test1"
argument_list|)
operator|.
name|elem
argument_list|(
literal|"test2"
argument_list|)
operator|.
name|end
argument_list|(
literal|"test2"
argument_list|)
operator|.
name|commit
argument_list|()
expr_stmt|;
block|}
specifier|public
name|void
name|testFrag2
parameter_list|()
block|{
name|ElementBuilder
argument_list|<
name|Object
argument_list|>
name|builder
init|=
operator|new
name|ElementBuilder
argument_list|<
name|Object
argument_list|>
argument_list|(
name|db
operator|.
name|namespaceBindings
argument_list|()
argument_list|,
literal|true
argument_list|,
operator|new
name|ElementBuilder
operator|.
name|CompletedCallback
argument_list|<
name|Object
argument_list|>
argument_list|()
block|{
specifier|public
name|Object
name|completed
parameter_list|(
name|Node
index|[]
name|nodes
parameter_list|)
block|{
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|nodes
operator|.
name|length
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"blahfoo"
argument_list|,
name|ElementBuilderHelper
operator|.
name|toString
argument_list|(
name|nodes
index|[
literal|0
index|]
argument_list|)
operator|+
name|ElementBuilderHelper
operator|.
name|toString
argument_list|(
name|nodes
index|[
literal|1
index|]
argument_list|)
argument_list|)
expr_stmt|;
return|return
literal|null
return|;
block|}
block|}
argument_list|)
decl_stmt|;
name|builder
operator|.
name|text
argument_list|(
literal|"blah"
argument_list|)
operator|.
name|text
argument_list|(
literal|"foo"
argument_list|)
operator|.
name|commit
argument_list|()
expr_stmt|;
block|}
specifier|static
name|String
name|toString
parameter_list|(
name|Node
name|node
parameter_list|)
block|{
name|StringBuilder
name|buf
init|=
operator|new
name|StringBuilder
argument_list|()
decl_stmt|;
name|toBuf
argument_list|(
name|node
argument_list|,
name|buf
argument_list|)
expr_stmt|;
return|return
name|buf
operator|.
name|toString
argument_list|()
return|;
block|}
specifier|private
specifier|static
name|void
name|toBuf
parameter_list|(
name|Node
name|node
parameter_list|,
name|StringBuilder
name|buf
parameter_list|)
block|{
switch|switch
condition|(
name|node
operator|.
name|getNodeType
argument_list|()
condition|)
block|{
case|case
name|Node
operator|.
name|DOCUMENT_FRAGMENT_NODE
case|:
block|{
name|NodeList
name|children
init|=
name|node
operator|.
name|getChildNodes
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|children
operator|.
name|getLength
argument_list|()
condition|;
name|i
operator|++
control|)
name|toBuf
argument_list|(
name|children
operator|.
name|item
argument_list|(
name|i
argument_list|)
argument_list|,
name|buf
argument_list|)
expr_stmt|;
break|break;
block|}
case|case
name|Node
operator|.
name|DOCUMENT_NODE
case|:
name|buf
operator|.
name|append
argument_list|(
literal|"<?xml version=\"1.0\" ?>"
argument_list|)
expr_stmt|;
name|toBuf
argument_list|(
operator|(
operator|(
name|org
operator|.
name|w3c
operator|.
name|dom
operator|.
name|Document
operator|)
name|node
operator|)
operator|.
name|getDocumentElement
argument_list|()
argument_list|,
name|buf
argument_list|)
expr_stmt|;
break|break;
case|case
name|Node
operator|.
name|ELEMENT_NODE
case|:
block|{
name|buf
operator|.
name|append
argument_list|(
literal|"<"
argument_list|)
operator|.
name|append
argument_list|(
name|node
operator|.
name|getNodeName
argument_list|()
argument_list|)
expr_stmt|;
name|NamedNodeMap
name|attrs
init|=
name|node
operator|.
name|getAttributes
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|attrs
operator|.
name|getLength
argument_list|()
condition|;
name|i
operator|++
control|)
block|{
name|Node
name|attr
init|=
name|attrs
operator|.
name|item
argument_list|(
name|i
argument_list|)
decl_stmt|;
name|buf
operator|.
name|append
argument_list|(
literal|" "
argument_list|)
operator|.
name|append
argument_list|(
name|attr
operator|.
name|getNodeName
argument_list|()
argument_list|)
operator|.
name|append
argument_list|(
literal|"='"
argument_list|)
operator|.
name|append
argument_list|(
name|attr
operator|.
name|getNodeValue
argument_list|()
argument_list|)
operator|.
name|append
argument_list|(
literal|"'"
argument_list|)
expr_stmt|;
block|}
name|NodeList
name|children
init|=
name|node
operator|.
name|getChildNodes
argument_list|()
decl_stmt|;
if|if
condition|(
name|children
operator|.
name|getLength
argument_list|()
operator|==
literal|0
condition|)
block|{
name|buf
operator|.
name|append
argument_list|(
literal|"/>"
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|buf
operator|.
name|append
argument_list|(
literal|">"
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|children
operator|.
name|getLength
argument_list|()
condition|;
name|i
operator|++
control|)
name|toBuf
argument_list|(
name|children
operator|.
name|item
argument_list|(
name|i
argument_list|)
argument_list|,
name|buf
argument_list|)
expr_stmt|;
name|buf
operator|.
name|append
argument_list|(
literal|"</"
argument_list|)
operator|.
name|append
argument_list|(
name|node
operator|.
name|getNodeName
argument_list|()
argument_list|)
operator|.
name|append
argument_list|(
literal|">"
argument_list|)
expr_stmt|;
block|}
break|break;
block|}
case|case
name|Node
operator|.
name|ENTITY_REFERENCE_NODE
case|:
name|buf
operator|.
name|append
argument_list|(
literal|"&"
argument_list|)
operator|.
name|append
argument_list|(
name|node
operator|.
name|getNodeName
argument_list|()
argument_list|)
operator|.
name|append
argument_list|(
literal|";"
argument_list|)
expr_stmt|;
break|break;
case|case
name|Node
operator|.
name|TEXT_NODE
case|:
name|buf
operator|.
name|append
argument_list|(
name|node
operator|.
name|getNodeValue
argument_list|()
argument_list|)
expr_stmt|;
break|break;
default|default:
throw|throw
operator|new
name|RuntimeException
argument_list|(
literal|"can't deal with node type "
operator|+
name|node
operator|.
name|getNodeType
argument_list|()
argument_list|)
throw|;
block|}
block|}
block|}
end_class

end_unit

