begin_unit|revision:1.0.0;language:Java;cregit-version:0.0.1
begin_package
package|package
name|org
operator|.
name|exist
operator|.
name|fluent
package|;
end_package

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|*
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_class
specifier|public
class|class
name|ItemTest
extends|extends
name|DatabaseTestCase
block|{
annotation|@
name|Test
specifier|public
name|void
name|equals1
parameter_list|()
block|{
name|Item
name|item1
init|=
name|db
operator|.
name|query
argument_list|()
operator|.
name|single
argument_list|(
literal|"3"
argument_list|)
decl_stmt|,
name|item2
init|=
name|db
operator|.
name|query
argument_list|()
operator|.
name|single
argument_list|(
literal|"3"
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
name|item1
operator|.
name|equals
argument_list|(
name|item2
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|item1
operator|.
name|hashCode
argument_list|()
argument_list|,
name|item2
operator|.
name|hashCode
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|equals2
parameter_list|()
block|{
name|Item
name|item1
init|=
name|db
operator|.
name|query
argument_list|()
operator|.
name|single
argument_list|(
literal|"2"
argument_list|)
decl_stmt|,
name|item2
init|=
name|db
operator|.
name|query
argument_list|()
operator|.
name|single
argument_list|(
literal|"3"
argument_list|)
decl_stmt|;
name|assertFalse
argument_list|(
name|item1
operator|.
name|equals
argument_list|(
name|item2
argument_list|)
argument_list|)
expr_stmt|;
comment|// can't assert anything about their hashcodes
block|}
annotation|@
name|Test
specifier|public
name|void
name|equals3
parameter_list|()
block|{
name|Item
name|item1
init|=
name|db
operator|.
name|query
argument_list|()
operator|.
name|single
argument_list|(
literal|"2"
argument_list|)
decl_stmt|,
name|item2
init|=
name|db
operator|.
name|query
argument_list|()
operator|.
name|single
argument_list|(
literal|"'foo'"
argument_list|)
decl_stmt|;
name|assertFalse
argument_list|(
name|item1
operator|.
name|equals
argument_list|(
name|item2
argument_list|)
argument_list|)
expr_stmt|;
comment|// can't assert anything about their hashcodes
block|}
annotation|@
name|Test
specifier|public
name|void
name|equals4
parameter_list|()
block|{
name|XMLDocument
name|doc
init|=
name|db
operator|.
name|createFolder
argument_list|(
literal|"/top"
argument_list|)
operator|.
name|documents
argument_list|()
operator|.
name|build
argument_list|(
name|Name
operator|.
name|create
argument_list|(
literal|"test"
argument_list|)
argument_list|)
operator|.
name|elem
argument_list|(
literal|"root"
argument_list|)
operator|.
name|elem
argument_list|(
literal|"text1"
argument_list|)
operator|.
name|text
argument_list|(
literal|"foo"
argument_list|)
operator|.
name|end
argument_list|(
literal|"text1"
argument_list|)
operator|.
name|elem
argument_list|(
literal|"text2"
argument_list|)
operator|.
name|text
argument_list|(
literal|"foo"
argument_list|)
operator|.
name|end
argument_list|(
literal|"text2"
argument_list|)
operator|.
name|end
argument_list|(
literal|"root"
argument_list|)
operator|.
name|commit
argument_list|()
decl_stmt|;
name|Item
name|item1
init|=
name|doc
operator|.
name|query
argument_list|()
operator|.
name|single
argument_list|(
literal|"xs:string(//text1/text())"
argument_list|)
decl_stmt|;
name|Item
name|item2
init|=
name|doc
operator|.
name|query
argument_list|()
operator|.
name|single
argument_list|(
literal|"xs:string(//text2/text())"
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
name|item1
operator|.
name|equals
argument_list|(
name|item2
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|item1
operator|.
name|hashCode
argument_list|()
argument_list|,
name|item2
operator|.
name|hashCode
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|convertToSequence
parameter_list|()
block|{
name|XMLDocument
name|doc
init|=
name|db
operator|.
name|createFolder
argument_list|(
literal|"/top"
argument_list|)
operator|.
name|documents
argument_list|()
operator|.
name|build
argument_list|(
name|Name
operator|.
name|create
argument_list|(
literal|"test"
argument_list|)
argument_list|)
operator|.
name|elem
argument_list|(
literal|"a"
argument_list|)
operator|.
name|elem
argument_list|(
literal|"b"
argument_list|)
operator|.
name|elem
argument_list|(
literal|"c"
argument_list|)
operator|.
name|end
argument_list|(
literal|"c"
argument_list|)
operator|.
name|end
argument_list|(
literal|"b"
argument_list|)
operator|.
name|elem
argument_list|(
literal|"d"
argument_list|)
operator|.
name|elem
argument_list|(
literal|"c"
argument_list|)
operator|.
name|end
argument_list|(
literal|"c"
argument_list|)
operator|.
name|end
argument_list|(
literal|"d"
argument_list|)
operator|.
name|elem
argument_list|(
literal|"c"
argument_list|)
operator|.
name|end
argument_list|(
literal|"c"
argument_list|)
operator|.
name|end
argument_list|(
literal|"a"
argument_list|)
operator|.
name|commit
argument_list|()
decl_stmt|;
name|assertEquals
argument_list|(
literal|3
argument_list|,
name|doc
operator|.
name|query
argument_list|()
operator|.
name|all
argument_list|(
literal|"//c"
argument_list|)
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|Item
name|res
init|=
name|doc
operator|.
name|query
argument_list|()
operator|.
name|single
argument_list|(
literal|"//b"
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|doc
operator|.
name|query
argument_list|()
operator|.
name|all
argument_list|(
literal|"$_1//c"
argument_list|,
name|res
argument_list|)
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

