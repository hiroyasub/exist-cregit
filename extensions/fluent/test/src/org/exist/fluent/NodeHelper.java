begin_unit|revision:1.0.0;language:Java;cregit-version:0.0.1
begin_package
package|package
name|org
operator|.
name|exist
operator|.
name|fluent
package|;
end_package

begin_comment
comment|/**  * Created by IntelliJ IDEA.  * User: wessels  * Date: Oct 29, 2007  * Time: 8:55:21 PM  * To change this template use File | Settings | File Templates.  */
end_comment

begin_class
specifier|public
class|class
name|NodeHelper
extends|extends
name|DatabaseHelper
block|{
specifier|public
name|void
name|testAppend1
parameter_list|()
block|{
name|XMLDocument
name|doc
init|=
name|db
operator|.
name|createFolder
argument_list|(
literal|"/test"
argument_list|)
operator|.
name|documents
argument_list|()
operator|.
name|build
argument_list|(
name|Name
operator|.
name|create
argument_list|(
literal|"foo"
argument_list|)
argument_list|)
operator|.
name|elem
argument_list|(
literal|"top"
argument_list|)
operator|.
name|end
argument_list|(
literal|"top"
argument_list|)
operator|.
name|commit
argument_list|()
decl_stmt|;
name|Node
name|node
init|=
name|doc
operator|.
name|root
argument_list|()
operator|.
name|append
argument_list|()
operator|.
name|elem
argument_list|(
literal|"child"
argument_list|)
operator|.
name|end
argument_list|(
literal|"child"
argument_list|)
operator|.
name|commit
argument_list|()
decl_stmt|;
name|assertNotNull
argument_list|(
name|node
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"child"
argument_list|,
name|node
operator|.
name|name
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|doc
operator|.
name|root
argument_list|()
operator|.
name|query
argument_list|()
operator|.
name|single
argument_list|(
literal|"count(*)"
argument_list|)
operator|.
name|intValue
argument_list|()
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|testAppend2
parameter_list|()
block|{
name|XMLDocument
name|doc
init|=
name|db
operator|.
name|createFolder
argument_list|(
literal|"/test"
argument_list|)
operator|.
name|documents
argument_list|()
operator|.
name|build
argument_list|(
name|Name
operator|.
name|create
argument_list|(
literal|"foo"
argument_list|)
argument_list|)
operator|.
name|elem
argument_list|(
literal|"top"
argument_list|)
operator|.
name|end
argument_list|(
literal|"top"
argument_list|)
operator|.
name|commit
argument_list|()
decl_stmt|;
name|Node
name|node
init|=
name|doc
operator|.
name|root
argument_list|()
operator|.
name|append
argument_list|()
operator|.
name|elem
argument_list|(
literal|"child"
argument_list|)
operator|.
name|attr
argument_list|(
literal|"blah"
argument_list|,
literal|"ick"
argument_list|)
operator|.
name|elem
argument_list|(
literal|"subchild"
argument_list|)
operator|.
name|end
argument_list|(
literal|"subchild"
argument_list|)
operator|.
name|end
argument_list|(
literal|"child"
argument_list|)
operator|.
name|commit
argument_list|()
decl_stmt|;
name|assertNotNull
argument_list|(
name|node
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"child"
argument_list|,
name|node
operator|.
name|name
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|doc
operator|.
name|root
argument_list|()
operator|.
name|query
argument_list|()
operator|.
name|single
argument_list|(
literal|"count(*)"
argument_list|)
operator|.
name|intValue
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"ick"
argument_list|,
name|node
operator|.
name|query
argument_list|()
operator|.
name|single
argument_list|(
literal|"@blah"
argument_list|)
operator|.
name|value
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"subchild"
argument_list|,
name|node
operator|.
name|query
argument_list|()
operator|.
name|single
argument_list|(
literal|"*"
argument_list|)
operator|.
name|node
argument_list|()
operator|.
name|name
argument_list|()
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|testAfterDelete1
parameter_list|()
block|{
name|XMLDocument
name|doc
init|=
name|db
operator|.
name|createFolder
argument_list|(
literal|"/test"
argument_list|)
operator|.
name|documents
argument_list|()
operator|.
name|build
argument_list|(
name|Name
operator|.
name|create
argument_list|(
literal|"foo"
argument_list|)
argument_list|)
operator|.
name|elem
argument_list|(
literal|"top"
argument_list|)
operator|.
name|end
argument_list|(
literal|"top"
argument_list|)
operator|.
name|commit
argument_list|()
decl_stmt|;
name|Node
name|node
init|=
name|doc
operator|.
name|root
argument_list|()
operator|.
name|append
argument_list|()
operator|.
name|elem
argument_list|(
literal|"child"
argument_list|)
operator|.
name|end
argument_list|(
literal|"child"
argument_list|)
operator|.
name|commit
argument_list|()
decl_stmt|;
name|node
operator|.
name|delete
argument_list|()
expr_stmt|;
name|doc
operator|.
name|root
argument_list|()
operator|.
name|append
argument_list|()
operator|.
name|elem
argument_list|(
literal|"newchild"
argument_list|)
operator|.
name|end
argument_list|(
literal|"newchild"
argument_list|)
operator|.
name|commit
argument_list|()
expr_stmt|;
try|try
block|{
name|node
operator|.
name|update
argument_list|()
operator|.
name|attr
argument_list|(
literal|"foo"
argument_list|,
literal|"bar"
argument_list|)
operator|.
name|commit
argument_list|()
expr_stmt|;
name|fail
argument_list|(
literal|"update on deleted and re-created node succeeded"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|DatabaseException
name|e
parameter_list|)
block|{
block|}
block|}
specifier|public
name|void
name|testAfterDelete2
parameter_list|()
block|{
name|XMLDocument
name|doc
init|=
name|db
operator|.
name|createFolder
argument_list|(
literal|"/test"
argument_list|)
operator|.
name|documents
argument_list|()
operator|.
name|build
argument_list|(
name|Name
operator|.
name|create
argument_list|(
literal|"foo"
argument_list|)
argument_list|)
operator|.
name|elem
argument_list|(
literal|"top"
argument_list|)
operator|.
name|end
argument_list|(
literal|"top"
argument_list|)
operator|.
name|commit
argument_list|()
decl_stmt|;
name|Node
name|node
init|=
name|doc
operator|.
name|root
argument_list|()
decl_stmt|;
name|doc
operator|.
name|delete
argument_list|()
expr_stmt|;
name|doc
operator|=
literal|null
expr_stmt|;
name|db
operator|.
name|createFolder
argument_list|(
literal|"/test"
argument_list|)
operator|.
name|documents
argument_list|()
operator|.
name|build
argument_list|(
name|Name
operator|.
name|create
argument_list|(
literal|"bar"
argument_list|)
argument_list|)
operator|.
name|elem
argument_list|(
literal|"ack"
argument_list|)
operator|.
name|end
argument_list|(
literal|"ack"
argument_list|)
operator|.
name|commit
argument_list|()
expr_stmt|;
try|try
block|{
name|node
operator|.
name|update
argument_list|()
operator|.
name|attr
argument_list|(
literal|"foo"
argument_list|,
literal|"bar"
argument_list|)
operator|.
name|commit
argument_list|()
expr_stmt|;
name|fail
argument_list|(
literal|"update on node deleted with document succeeded"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|DatabaseException
name|e
parameter_list|)
block|{
block|}
block|}
specifier|public
name|void
name|testAfterDelete3
parameter_list|()
block|{
name|Folder
name|folder
init|=
name|db
operator|.
name|createFolder
argument_list|(
literal|"/test"
argument_list|)
decl_stmt|;
name|XMLDocument
name|doc
init|=
name|folder
operator|.
name|documents
argument_list|()
operator|.
name|build
argument_list|(
name|Name
operator|.
name|create
argument_list|(
literal|"foo"
argument_list|)
argument_list|)
operator|.
name|elem
argument_list|(
literal|"top"
argument_list|)
operator|.
name|end
argument_list|(
literal|"top"
argument_list|)
operator|.
name|commit
argument_list|()
decl_stmt|;
name|Node
name|node
init|=
name|doc
operator|.
name|root
argument_list|()
decl_stmt|;
name|folder
operator|.
name|delete
argument_list|()
expr_stmt|;
name|db
operator|.
name|createFolder
argument_list|(
literal|"/test"
argument_list|)
operator|.
name|documents
argument_list|()
operator|.
name|build
argument_list|(
name|Name
operator|.
name|create
argument_list|(
literal|"bar"
argument_list|)
argument_list|)
operator|.
name|elem
argument_list|(
literal|"ack"
argument_list|)
operator|.
name|end
argument_list|(
literal|"ack"
argument_list|)
operator|.
name|commit
argument_list|()
expr_stmt|;
try|try
block|{
name|node
operator|.
name|update
argument_list|()
operator|.
name|attr
argument_list|(
literal|"foo"
argument_list|,
literal|"bar"
argument_list|)
operator|.
name|commit
argument_list|()
expr_stmt|;
name|fail
argument_list|(
literal|"update on node deleted with folder succeeded"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|DatabaseException
name|e
parameter_list|)
block|{
block|}
block|}
block|}
end_class

end_unit

