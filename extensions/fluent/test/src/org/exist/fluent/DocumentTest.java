begin_unit|revision:1.0.0;language:Java;cregit-version:0.0.1
begin_package
package|package
name|org
operator|.
name|exist
operator|.
name|fluent
package|;
end_package

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertEquals
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_class
specifier|public
class|class
name|DocumentTest
extends|extends
name|DatabaseTestCase
block|{
annotation|@
name|Test
specifier|public
name|void
name|nameAndPathFromLoad
parameter_list|()
block|{
name|Document
name|doc
init|=
name|db
operator|.
name|createFolder
argument_list|(
literal|"/top"
argument_list|)
operator|.
name|documents
argument_list|()
operator|.
name|load
argument_list|(
name|Name
operator|.
name|create
argument_list|(
literal|"foo"
argument_list|)
argument_list|,
name|Source
operator|.
name|blob
argument_list|(
literal|"helloworld"
argument_list|)
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|"foo"
argument_list|,
name|doc
operator|.
name|name
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"/top/foo"
argument_list|,
name|doc
operator|.
name|path
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|contentsAsStringFromLoad
parameter_list|()
block|{
name|Document
name|doc
init|=
name|db
operator|.
name|createFolder
argument_list|(
literal|"/top"
argument_list|)
operator|.
name|documents
argument_list|()
operator|.
name|load
argument_list|(
name|Name
operator|.
name|create
argument_list|(
literal|"foo"
argument_list|)
argument_list|,
name|Source
operator|.
name|blob
argument_list|(
literal|"helloworld"
argument_list|)
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|"helloworld"
argument_list|,
name|doc
operator|.
name|contentsAsString
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|lengthFromLoad1
parameter_list|()
block|{
name|Document
name|doc
init|=
name|db
operator|.
name|createFolder
argument_list|(
literal|"/top"
argument_list|)
operator|.
name|documents
argument_list|()
operator|.
name|load
argument_list|(
name|Name
operator|.
name|create
argument_list|(
literal|"foo"
argument_list|)
argument_list|,
name|Source
operator|.
name|blob
argument_list|(
literal|"helloworld"
argument_list|)
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|10
argument_list|,
name|doc
operator|.
name|length
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|lengthFromLoad2
parameter_list|()
block|{
name|Document
name|doc
init|=
name|db
operator|.
name|createFolder
argument_list|(
literal|"/top"
argument_list|)
operator|.
name|documents
argument_list|()
operator|.
name|load
argument_list|(
name|Name
operator|.
name|create
argument_list|(
literal|"foo"
argument_list|)
argument_list|,
name|Source
operator|.
name|blob
argument_list|(
literal|""
argument_list|)
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|doc
operator|.
name|length
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|copy1
parameter_list|()
block|{
name|Folder
name|c1
init|=
name|db
operator|.
name|createFolder
argument_list|(
literal|"/c1"
argument_list|)
decl_stmt|,
name|c2
init|=
name|db
operator|.
name|createFolder
argument_list|(
literal|"/c2"
argument_list|)
decl_stmt|;
name|Document
name|original
init|=
name|c1
operator|.
name|documents
argument_list|()
operator|.
name|load
argument_list|(
name|Name
operator|.
name|create
argument_list|(
literal|"original"
argument_list|)
argument_list|,
name|Source
operator|.
name|blob
argument_list|(
literal|"helloworld"
argument_list|)
argument_list|)
decl_stmt|;
name|Document
name|copy
init|=
name|original
operator|.
name|copy
argument_list|(
name|c2
argument_list|,
name|Name
operator|.
name|keepCreate
argument_list|()
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|c1
operator|.
name|documents
argument_list|()
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|c2
operator|.
name|documents
argument_list|()
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"helloworld"
argument_list|,
name|original
operator|.
name|contentsAsString
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"helloworld"
argument_list|,
name|copy
operator|.
name|contentsAsString
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|move1
parameter_list|()
block|{
name|Folder
name|c1
init|=
name|db
operator|.
name|createFolder
argument_list|(
literal|"/c1"
argument_list|)
decl_stmt|,
name|c2
init|=
name|db
operator|.
name|createFolder
argument_list|(
literal|"/c2"
argument_list|)
decl_stmt|;
name|Document
name|doc
init|=
name|c1
operator|.
name|documents
argument_list|()
operator|.
name|load
argument_list|(
name|Name
operator|.
name|create
argument_list|(
literal|"original"
argument_list|)
argument_list|,
name|Source
operator|.
name|blob
argument_list|(
literal|"helloworld"
argument_list|)
argument_list|)
decl_stmt|;
name|doc
operator|.
name|move
argument_list|(
name|c2
argument_list|,
name|Name
operator|.
name|keepCreate
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|c1
operator|.
name|documents
argument_list|()
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|c2
operator|.
name|documents
argument_list|()
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"/c2/original"
argument_list|,
name|doc
operator|.
name|path
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"helloworld"
argument_list|,
name|doc
operator|.
name|contentsAsString
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

