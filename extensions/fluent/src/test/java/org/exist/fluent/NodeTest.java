begin_unit|revision:1.0.0;language:Java;cregit-version:0.0.1
begin_package
package|package
name|org
operator|.
name|exist
operator|.
name|fluent
package|;
end_package

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|*
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|hamcrest
operator|.
name|Matchers
operator|.
name|*
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|EnumSet
import|;
end_import

begin_import
import|import
name|org
operator|.
name|jmock
operator|.
name|*
import|;
end_import

begin_import
import|import
name|org
operator|.
name|jmock
operator|.
name|integration
operator|.
name|junit4
operator|.
name|*
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|runner
operator|.
name|RunWith
import|;
end_import

begin_class
annotation|@
name|RunWith
argument_list|(
name|JMock
operator|.
name|class
argument_list|)
specifier|public
class|class
name|NodeTest
extends|extends
name|DatabaseTestCase
block|{
specifier|private
name|Mockery
name|context
init|=
operator|new
name|JUnit4Mockery
argument_list|()
decl_stmt|;
annotation|@
name|Test
argument_list|(
name|expected
operator|=
name|UnsupportedOperationException
operator|.
name|class
argument_list|)
specifier|public
name|void
name|appendMemtree
parameter_list|()
block|{
name|db
operator|.
name|query
argument_list|()
operator|.
name|single
argument_list|(
literal|"<foo/>"
argument_list|)
operator|.
name|node
argument_list|()
operator|.
name|append
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Test
argument_list|(
name|expected
operator|=
name|UnsupportedOperationException
operator|.
name|class
argument_list|)
specifier|public
name|void
name|replaceMemtree
parameter_list|()
block|{
name|db
operator|.
name|query
argument_list|()
operator|.
name|single
argument_list|(
literal|"<foo/>"
argument_list|)
operator|.
name|node
argument_list|()
operator|.
name|replace
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Test
argument_list|(
name|expected
operator|=
name|UnsupportedOperationException
operator|.
name|class
argument_list|)
specifier|public
name|void
name|updateMemtree
parameter_list|()
block|{
name|db
operator|.
name|query
argument_list|()
operator|.
name|single
argument_list|(
literal|"<foo/>"
argument_list|)
operator|.
name|node
argument_list|()
operator|.
name|update
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Test
argument_list|(
name|expected
operator|=
name|DatabaseException
operator|.
name|class
argument_list|)
specifier|public
name|void
name|comparableValueMemtree
parameter_list|()
block|{
name|db
operator|.
name|query
argument_list|()
operator|.
name|single
argument_list|(
literal|"<foo/>"
argument_list|)
operator|.
name|comparableValue
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Test
argument_list|(
name|expected
operator|=
name|DatabaseException
operator|.
name|class
argument_list|)
specifier|public
name|void
name|comparableValue
parameter_list|()
block|{
name|db
operator|.
name|getFolder
argument_list|(
literal|"/"
argument_list|)
operator|.
name|documents
argument_list|()
operator|.
name|load
argument_list|(
name|Name
operator|.
name|generate
argument_list|(
name|db
argument_list|)
argument_list|,
name|Source
operator|.
name|xml
argument_list|(
literal|"<foo/>"
argument_list|)
argument_list|)
operator|.
name|root
argument_list|()
operator|.
name|comparableValue
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|equals1
parameter_list|()
block|{
name|XMLDocument
name|doc
init|=
name|db
operator|.
name|createFolder
argument_list|(
literal|"/test"
argument_list|)
operator|.
name|documents
argument_list|()
operator|.
name|build
argument_list|(
name|Name
operator|.
name|create
argument_list|(
name|db
argument_list|,
literal|"foo"
argument_list|)
argument_list|)
operator|.
name|elem
argument_list|(
literal|"top"
argument_list|)
operator|.
name|elem
argument_list|(
literal|"child"
argument_list|)
operator|.
name|end
argument_list|(
literal|"child"
argument_list|)
operator|.
name|end
argument_list|(
literal|"top"
argument_list|)
operator|.
name|commit
argument_list|()
decl_stmt|;
specifier|final
name|Object
name|o1
init|=
name|doc
operator|.
name|query
argument_list|()
operator|.
name|single
argument_list|(
literal|"//child"
argument_list|)
decl_stmt|;
specifier|final
name|Object
name|o2
init|=
name|doc
operator|.
name|query
argument_list|()
operator|.
name|single
argument_list|(
literal|"//child"
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
name|o1
operator|.
name|equals
argument_list|(
name|o2
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|o1
operator|.
name|hashCode
argument_list|()
argument_list|,
name|o2
operator|.
name|hashCode
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|equals2
parameter_list|()
block|{
name|XMLDocument
name|doc
init|=
name|db
operator|.
name|createFolder
argument_list|(
literal|"/test"
argument_list|)
operator|.
name|documents
argument_list|()
operator|.
name|build
argument_list|(
name|Name
operator|.
name|create
argument_list|(
name|db
argument_list|,
literal|"foo"
argument_list|)
argument_list|)
operator|.
name|elem
argument_list|(
literal|"top"
argument_list|)
operator|.
name|elem
argument_list|(
literal|"child"
argument_list|)
operator|.
name|end
argument_list|(
literal|"child"
argument_list|)
operator|.
name|end
argument_list|(
literal|"top"
argument_list|)
operator|.
name|commit
argument_list|()
decl_stmt|;
specifier|final
name|Object
name|o1
init|=
name|doc
operator|.
name|query
argument_list|()
operator|.
name|single
argument_list|(
literal|"//child"
argument_list|)
decl_stmt|;
specifier|final
name|Object
name|o2
init|=
name|doc
operator|.
name|query
argument_list|()
operator|.
name|single
argument_list|(
literal|"//top"
argument_list|)
decl_stmt|;
name|assertFalse
argument_list|(
name|o1
operator|.
name|equals
argument_list|(
name|o2
argument_list|)
argument_list|)
expr_stmt|;
comment|// can't assert unequal hashCodes, they're allowed to be the same
block|}
annotation|@
name|Test
specifier|public
name|void
name|equals3
parameter_list|()
block|{
name|Folder
name|folder
init|=
name|db
operator|.
name|createFolder
argument_list|(
literal|"/test"
argument_list|)
decl_stmt|;
name|XMLDocument
name|doc1
init|=
name|folder
operator|.
name|documents
argument_list|()
operator|.
name|build
argument_list|(
name|Name
operator|.
name|create
argument_list|(
name|db
argument_list|,
literal|"foo1"
argument_list|)
argument_list|)
operator|.
name|elem
argument_list|(
literal|"top"
argument_list|)
operator|.
name|elem
argument_list|(
literal|"child"
argument_list|)
operator|.
name|end
argument_list|(
literal|"child"
argument_list|)
operator|.
name|end
argument_list|(
literal|"top"
argument_list|)
operator|.
name|commit
argument_list|()
decl_stmt|;
name|XMLDocument
name|doc2
init|=
name|folder
operator|.
name|documents
argument_list|()
operator|.
name|build
argument_list|(
name|Name
operator|.
name|create
argument_list|(
name|db
argument_list|,
literal|"foo2"
argument_list|)
argument_list|)
operator|.
name|elem
argument_list|(
literal|"top"
argument_list|)
operator|.
name|elem
argument_list|(
literal|"child"
argument_list|)
operator|.
name|end
argument_list|(
literal|"child"
argument_list|)
operator|.
name|end
argument_list|(
literal|"top"
argument_list|)
operator|.
name|commit
argument_list|()
decl_stmt|;
specifier|final
name|Object
name|o1
init|=
name|doc1
operator|.
name|query
argument_list|()
operator|.
name|single
argument_list|(
literal|"//top"
argument_list|)
decl_stmt|;
specifier|final
name|Object
name|o2
init|=
name|doc2
operator|.
name|query
argument_list|()
operator|.
name|single
argument_list|(
literal|"//top"
argument_list|)
decl_stmt|;
name|assertFalse
argument_list|(
name|o1
operator|.
name|equals
argument_list|(
name|o2
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|compareDocumentOrderTo1
parameter_list|()
block|{
specifier|final
name|Node
name|root
init|=
name|db
operator|.
name|getFolder
argument_list|(
literal|"/"
argument_list|)
operator|.
name|documents
argument_list|()
operator|.
name|load
argument_list|(
name|Name
operator|.
name|generate
argument_list|(
name|db
argument_list|)
argument_list|,
name|Source
operator|.
name|xml
argument_list|(
literal|"<root><a><aa/></a><b><bb/></b><c><cc/></c></root>"
argument_list|)
argument_list|)
operator|.
name|root
argument_list|()
decl_stmt|;
specifier|final
name|Node
name|a
init|=
name|root
operator|.
name|query
argument_list|()
operator|.
name|single
argument_list|(
literal|"//a"
argument_list|)
operator|.
name|node
argument_list|()
decl_stmt|;
specifier|final
name|Node
name|aa
init|=
name|root
operator|.
name|query
argument_list|()
operator|.
name|single
argument_list|(
literal|"//aa"
argument_list|)
operator|.
name|node
argument_list|()
decl_stmt|;
specifier|final
name|Node
name|b
init|=
name|root
operator|.
name|query
argument_list|()
operator|.
name|single
argument_list|(
literal|"//b"
argument_list|)
operator|.
name|node
argument_list|()
decl_stmt|;
specifier|final
name|Node
name|bb
init|=
name|root
operator|.
name|query
argument_list|()
operator|.
name|single
argument_list|(
literal|"//bb"
argument_list|)
operator|.
name|node
argument_list|()
decl_stmt|;
specifier|final
name|Node
name|c
init|=
name|root
operator|.
name|query
argument_list|()
operator|.
name|single
argument_list|(
literal|"//c"
argument_list|)
operator|.
name|node
argument_list|()
decl_stmt|;
specifier|final
name|Node
name|cc
init|=
name|root
operator|.
name|query
argument_list|()
operator|.
name|single
argument_list|(
literal|"//cc"
argument_list|)
operator|.
name|node
argument_list|()
decl_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|a
operator|.
name|compareDocumentOrderTo
argument_list|(
name|a
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|a
operator|.
name|compareDocumentOrderTo
argument_list|(
name|root
operator|.
name|query
argument_list|()
operator|.
name|single
argument_list|(
literal|"//a"
argument_list|)
operator|.
name|node
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|a
operator|.
name|compareDocumentOrderTo
argument_list|(
name|b
argument_list|)
argument_list|,
name|lessThan
argument_list|(
literal|0
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|c
operator|.
name|compareDocumentOrderTo
argument_list|(
name|b
argument_list|)
argument_list|,
name|greaterThan
argument_list|(
literal|0
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|aa
operator|.
name|compareDocumentOrderTo
argument_list|(
name|a
argument_list|)
argument_list|,
name|greaterThan
argument_list|(
literal|0
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|bb
operator|.
name|compareDocumentOrderTo
argument_list|(
name|cc
argument_list|)
argument_list|,
name|lessThan
argument_list|(
literal|0
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|root
operator|.
name|compareDocumentOrderTo
argument_list|(
name|c
argument_list|)
argument_list|,
name|lessThan
argument_list|(
literal|0
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|compareDocumentOrderTo2
parameter_list|()
block|{
specifier|final
name|ItemList
name|nodes
init|=
name|db
operator|.
name|query
argument_list|()
operator|.
name|all
argument_list|(
literal|"let $x :=<root><a><aa/></a><b><bb/></b><c><cc/></c></root> return ($x//a, $x//aa, $x//b, $x//bb, $x//c, $x//cc, $x)"
argument_list|)
decl_stmt|;
specifier|final
name|Node
name|root
init|=
name|nodes
operator|.
name|get
argument_list|(
literal|6
argument_list|)
operator|.
name|node
argument_list|()
decl_stmt|;
specifier|final
name|Node
name|a
init|=
name|nodes
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|node
argument_list|()
decl_stmt|;
specifier|final
name|Node
name|aa
init|=
name|nodes
operator|.
name|get
argument_list|(
literal|1
argument_list|)
operator|.
name|node
argument_list|()
decl_stmt|;
specifier|final
name|Node
name|b
init|=
name|nodes
operator|.
name|get
argument_list|(
literal|2
argument_list|)
operator|.
name|node
argument_list|()
decl_stmt|;
specifier|final
name|Node
name|bb
init|=
name|nodes
operator|.
name|get
argument_list|(
literal|3
argument_list|)
operator|.
name|node
argument_list|()
decl_stmt|;
specifier|final
name|Node
name|c
init|=
name|nodes
operator|.
name|get
argument_list|(
literal|4
argument_list|)
operator|.
name|node
argument_list|()
decl_stmt|;
specifier|final
name|Node
name|cc
init|=
name|nodes
operator|.
name|get
argument_list|(
literal|5
argument_list|)
operator|.
name|node
argument_list|()
decl_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|a
operator|.
name|compareDocumentOrderTo
argument_list|(
name|a
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|a
operator|.
name|compareDocumentOrderTo
argument_list|(
name|b
argument_list|)
argument_list|,
name|lessThan
argument_list|(
literal|0
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|c
operator|.
name|compareDocumentOrderTo
argument_list|(
name|b
argument_list|)
argument_list|,
name|greaterThan
argument_list|(
literal|0
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|aa
operator|.
name|compareDocumentOrderTo
argument_list|(
name|a
argument_list|)
argument_list|,
name|greaterThan
argument_list|(
literal|0
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|bb
operator|.
name|compareDocumentOrderTo
argument_list|(
name|cc
argument_list|)
argument_list|,
name|lessThan
argument_list|(
literal|0
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|root
operator|.
name|compareDocumentOrderTo
argument_list|(
name|c
argument_list|)
argument_list|,
name|lessThan
argument_list|(
literal|0
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
argument_list|(
name|expected
operator|=
name|DatabaseException
operator|.
name|class
argument_list|)
specifier|public
name|void
name|compareDocumentOrderTo3
parameter_list|()
block|{
name|Node
name|root1
init|=
name|db
operator|.
name|getFolder
argument_list|(
literal|"/"
argument_list|)
operator|.
name|documents
argument_list|()
operator|.
name|load
argument_list|(
name|Name
operator|.
name|generate
argument_list|(
name|db
argument_list|)
argument_list|,
name|Source
operator|.
name|xml
argument_list|(
literal|"<root1/>"
argument_list|)
argument_list|)
operator|.
name|root
argument_list|()
decl_stmt|;
name|Node
name|root2
init|=
name|db
operator|.
name|getFolder
argument_list|(
literal|"/"
argument_list|)
operator|.
name|documents
argument_list|()
operator|.
name|load
argument_list|(
name|Name
operator|.
name|generate
argument_list|(
name|db
argument_list|)
argument_list|,
name|Source
operator|.
name|xml
argument_list|(
literal|"<root2/>"
argument_list|)
argument_list|)
operator|.
name|root
argument_list|()
decl_stmt|;
name|root1
operator|.
name|compareDocumentOrderTo
argument_list|(
name|root2
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
argument_list|(
name|expected
operator|=
name|DatabaseException
operator|.
name|class
argument_list|)
specifier|public
name|void
name|compareDocumentOrderTo4
parameter_list|()
block|{
name|Node
name|root1
init|=
name|db
operator|.
name|getFolder
argument_list|(
literal|"/"
argument_list|)
operator|.
name|documents
argument_list|()
operator|.
name|load
argument_list|(
name|Name
operator|.
name|generate
argument_list|(
name|db
argument_list|)
argument_list|,
name|Source
operator|.
name|xml
argument_list|(
literal|"<root1/>"
argument_list|)
argument_list|)
operator|.
name|root
argument_list|()
decl_stmt|;
name|Node
name|root2
init|=
name|db
operator|.
name|query
argument_list|()
operator|.
name|single
argument_list|(
literal|"<root2/>"
argument_list|)
operator|.
name|node
argument_list|()
decl_stmt|;
name|root1
operator|.
name|compareDocumentOrderTo
argument_list|(
name|root2
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
argument_list|(
name|expected
operator|=
name|DatabaseException
operator|.
name|class
argument_list|)
specifier|public
name|void
name|compareDocumentOrderTo5
parameter_list|()
block|{
name|Node
name|root1
init|=
name|db
operator|.
name|query
argument_list|()
operator|.
name|single
argument_list|(
literal|"<root1/>"
argument_list|)
operator|.
name|node
argument_list|()
decl_stmt|;
name|Node
name|root2
init|=
name|db
operator|.
name|query
argument_list|()
operator|.
name|single
argument_list|(
literal|"<root2/>"
argument_list|)
operator|.
name|node
argument_list|()
decl_stmt|;
name|root1
operator|.
name|compareDocumentOrderTo
argument_list|(
name|root2
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|append1
parameter_list|()
block|{
name|XMLDocument
name|doc
init|=
name|db
operator|.
name|createFolder
argument_list|(
literal|"/test"
argument_list|)
operator|.
name|documents
argument_list|()
operator|.
name|build
argument_list|(
name|Name
operator|.
name|create
argument_list|(
name|db
argument_list|,
literal|"foo"
argument_list|)
argument_list|)
operator|.
name|elem
argument_list|(
literal|"top"
argument_list|)
operator|.
name|end
argument_list|(
literal|"top"
argument_list|)
operator|.
name|commit
argument_list|()
decl_stmt|;
name|Node
name|node
init|=
name|doc
operator|.
name|root
argument_list|()
operator|.
name|append
argument_list|()
operator|.
name|elem
argument_list|(
literal|"child"
argument_list|)
operator|.
name|end
argument_list|(
literal|"child"
argument_list|)
operator|.
name|commit
argument_list|()
decl_stmt|;
name|assertNotNull
argument_list|(
name|node
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"child"
argument_list|,
name|node
operator|.
name|name
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|doc
operator|.
name|root
argument_list|()
operator|.
name|query
argument_list|()
operator|.
name|single
argument_list|(
literal|"count(*)"
argument_list|)
operator|.
name|intValue
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|append2
parameter_list|()
block|{
name|XMLDocument
name|doc
init|=
name|db
operator|.
name|createFolder
argument_list|(
literal|"/test"
argument_list|)
operator|.
name|documents
argument_list|()
operator|.
name|build
argument_list|(
name|Name
operator|.
name|create
argument_list|(
name|db
argument_list|,
literal|"foo"
argument_list|)
argument_list|)
operator|.
name|elem
argument_list|(
literal|"top"
argument_list|)
operator|.
name|end
argument_list|(
literal|"top"
argument_list|)
operator|.
name|commit
argument_list|()
decl_stmt|;
name|Node
name|node
init|=
name|doc
operator|.
name|root
argument_list|()
operator|.
name|append
argument_list|()
operator|.
name|elem
argument_list|(
literal|"child"
argument_list|)
operator|.
name|attr
argument_list|(
literal|"blah"
argument_list|,
literal|"ick"
argument_list|)
operator|.
name|elem
argument_list|(
literal|"subchild"
argument_list|)
operator|.
name|end
argument_list|(
literal|"subchild"
argument_list|)
operator|.
name|end
argument_list|(
literal|"child"
argument_list|)
operator|.
name|commit
argument_list|()
decl_stmt|;
name|assertNotNull
argument_list|(
name|node
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"child"
argument_list|,
name|node
operator|.
name|name
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|doc
operator|.
name|root
argument_list|()
operator|.
name|query
argument_list|()
operator|.
name|single
argument_list|(
literal|"count(*)"
argument_list|)
operator|.
name|intValue
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"ick"
argument_list|,
name|node
operator|.
name|query
argument_list|()
operator|.
name|single
argument_list|(
literal|"@blah"
argument_list|)
operator|.
name|value
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"subchild"
argument_list|,
name|node
operator|.
name|query
argument_list|()
operator|.
name|single
argument_list|(
literal|"*"
argument_list|)
operator|.
name|node
argument_list|()
operator|.
name|name
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
argument_list|(
name|expected
operator|=
name|DatabaseException
operator|.
name|class
argument_list|)
specifier|public
name|void
name|afterDelete1
parameter_list|()
block|{
name|XMLDocument
name|doc
init|=
name|db
operator|.
name|createFolder
argument_list|(
literal|"/test"
argument_list|)
operator|.
name|documents
argument_list|()
operator|.
name|build
argument_list|(
name|Name
operator|.
name|create
argument_list|(
name|db
argument_list|,
literal|"foo"
argument_list|)
argument_list|)
operator|.
name|elem
argument_list|(
literal|"top"
argument_list|)
operator|.
name|end
argument_list|(
literal|"top"
argument_list|)
operator|.
name|commit
argument_list|()
decl_stmt|;
name|Node
name|node
init|=
name|doc
operator|.
name|root
argument_list|()
operator|.
name|append
argument_list|()
operator|.
name|elem
argument_list|(
literal|"child"
argument_list|)
operator|.
name|end
argument_list|(
literal|"child"
argument_list|)
operator|.
name|commit
argument_list|()
decl_stmt|;
name|node
operator|.
name|delete
argument_list|()
expr_stmt|;
name|doc
operator|.
name|root
argument_list|()
operator|.
name|append
argument_list|()
operator|.
name|elem
argument_list|(
literal|"newchild"
argument_list|)
operator|.
name|end
argument_list|(
literal|"newchild"
argument_list|)
operator|.
name|commit
argument_list|()
expr_stmt|;
name|node
operator|.
name|update
argument_list|()
operator|.
name|attr
argument_list|(
literal|"foo"
argument_list|,
literal|"bar"
argument_list|)
operator|.
name|commit
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Test
argument_list|(
name|expected
operator|=
name|DatabaseException
operator|.
name|class
argument_list|)
specifier|public
name|void
name|afterDelete2
parameter_list|()
block|{
name|XMLDocument
name|doc
init|=
name|db
operator|.
name|createFolder
argument_list|(
literal|"/test"
argument_list|)
operator|.
name|documents
argument_list|()
operator|.
name|build
argument_list|(
name|Name
operator|.
name|create
argument_list|(
name|db
argument_list|,
literal|"foo"
argument_list|)
argument_list|)
operator|.
name|elem
argument_list|(
literal|"top"
argument_list|)
operator|.
name|end
argument_list|(
literal|"top"
argument_list|)
operator|.
name|commit
argument_list|()
decl_stmt|;
name|Node
name|node
init|=
name|doc
operator|.
name|root
argument_list|()
decl_stmt|;
name|doc
operator|.
name|delete
argument_list|()
expr_stmt|;
name|doc
operator|=
literal|null
expr_stmt|;
name|db
operator|.
name|createFolder
argument_list|(
literal|"/test"
argument_list|)
operator|.
name|documents
argument_list|()
operator|.
name|build
argument_list|(
name|Name
operator|.
name|create
argument_list|(
name|db
argument_list|,
literal|"bar"
argument_list|)
argument_list|)
operator|.
name|elem
argument_list|(
literal|"ack"
argument_list|)
operator|.
name|end
argument_list|(
literal|"ack"
argument_list|)
operator|.
name|commit
argument_list|()
expr_stmt|;
name|node
operator|.
name|update
argument_list|()
operator|.
name|attr
argument_list|(
literal|"foo"
argument_list|,
literal|"bar"
argument_list|)
operator|.
name|commit
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Test
argument_list|(
name|expected
operator|=
name|DatabaseException
operator|.
name|class
argument_list|)
specifier|public
name|void
name|afterDelete3
parameter_list|()
block|{
name|Folder
name|folder
init|=
name|db
operator|.
name|createFolder
argument_list|(
literal|"/test"
argument_list|)
decl_stmt|;
name|XMLDocument
name|doc
init|=
name|folder
operator|.
name|documents
argument_list|()
operator|.
name|build
argument_list|(
name|Name
operator|.
name|create
argument_list|(
name|db
argument_list|,
literal|"foo"
argument_list|)
argument_list|)
operator|.
name|elem
argument_list|(
literal|"top"
argument_list|)
operator|.
name|end
argument_list|(
literal|"top"
argument_list|)
operator|.
name|commit
argument_list|()
decl_stmt|;
name|Node
name|node
init|=
name|doc
operator|.
name|root
argument_list|()
decl_stmt|;
name|folder
operator|.
name|delete
argument_list|()
expr_stmt|;
name|db
operator|.
name|createFolder
argument_list|(
literal|"/test"
argument_list|)
operator|.
name|documents
argument_list|()
operator|.
name|build
argument_list|(
name|Name
operator|.
name|create
argument_list|(
name|db
argument_list|,
literal|"bar"
argument_list|)
argument_list|)
operator|.
name|elem
argument_list|(
literal|"ack"
argument_list|)
operator|.
name|end
argument_list|(
literal|"ack"
argument_list|)
operator|.
name|commit
argument_list|()
expr_stmt|;
name|node
operator|.
name|update
argument_list|()
operator|.
name|attr
argument_list|(
literal|"foo"
argument_list|,
literal|"bar"
argument_list|)
operator|.
name|commit
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|deleteRoot
parameter_list|()
block|{
name|Node
name|root
init|=
name|db
operator|.
name|createFolder
argument_list|(
literal|"/test"
argument_list|)
operator|.
name|documents
argument_list|()
operator|.
name|load
argument_list|(
name|Name
operator|.
name|create
argument_list|(
name|db
argument_list|,
literal|"test"
argument_list|)
argument_list|,
name|Source
operator|.
name|xml
argument_list|(
literal|"<foo/>"
argument_list|)
argument_list|)
operator|.
name|root
argument_list|()
decl_stmt|;
name|root
operator|.
name|delete
argument_list|()
expr_stmt|;
name|assertFalse
argument_list|(
name|db
operator|.
name|getFolder
argument_list|(
literal|"/test"
argument_list|)
operator|.
name|documents
argument_list|()
operator|.
name|contains
argument_list|(
literal|"test"
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|replaceRoot
parameter_list|()
block|{
name|Node
name|root
init|=
name|db
operator|.
name|createFolder
argument_list|(
literal|"/test"
argument_list|)
operator|.
name|documents
argument_list|()
operator|.
name|load
argument_list|(
name|Name
operator|.
name|create
argument_list|(
name|db
argument_list|,
literal|"test"
argument_list|)
argument_list|,
name|Source
operator|.
name|xml
argument_list|(
literal|"<foo/>"
argument_list|)
argument_list|)
operator|.
name|root
argument_list|()
decl_stmt|;
name|root
operator|.
name|replace
argument_list|()
operator|.
name|elem
argument_list|(
literal|"bar"
argument_list|)
operator|.
name|end
argument_list|(
literal|"bar"
argument_list|)
operator|.
name|commit
argument_list|()
expr_stmt|;
name|assertEquals
argument_list|(
literal|"bar"
argument_list|,
name|db
operator|.
name|getFolder
argument_list|(
literal|"/test"
argument_list|)
operator|.
name|documents
argument_list|()
operator|.
name|get
argument_list|(
literal|"test"
argument_list|)
operator|.
name|xml
argument_list|()
operator|.
name|root
argument_list|()
operator|.
name|name
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|appendTriggersListeners
parameter_list|()
block|{
specifier|final
name|XMLDocument
name|doc
init|=
name|db
operator|.
name|getFolder
argument_list|(
literal|"/"
argument_list|)
operator|.
name|documents
argument_list|()
operator|.
name|load
argument_list|(
name|Name
operator|.
name|create
argument_list|(
name|db
argument_list|,
literal|"foo"
argument_list|)
argument_list|,
name|Source
operator|.
name|xml
argument_list|(
literal|"<foo/>"
argument_list|)
argument_list|)
decl_stmt|;
specifier|final
name|Document
operator|.
name|Listener
name|listener
init|=
name|context
operator|.
name|mock
argument_list|(
name|Document
operator|.
name|Listener
operator|.
name|class
argument_list|)
decl_stmt|;
name|context
operator|.
name|checking
argument_list|(
operator|new
name|Expectations
argument_list|()
block|{
block|{
name|one
argument_list|(
name|listener
argument_list|)
operator|.
name|handle
argument_list|(
operator|new
name|Document
operator|.
name|Event
argument_list|(
name|Trigger
operator|.
name|BEFORE_UPDATE
argument_list|,
name|doc
operator|.
name|path
argument_list|()
argument_list|,
name|doc
argument_list|)
argument_list|)
expr_stmt|;
name|one
argument_list|(
name|listener
argument_list|)
operator|.
name|handle
argument_list|(
operator|new
name|Document
operator|.
name|Event
argument_list|(
name|Trigger
operator|.
name|AFTER_UPDATE
argument_list|,
name|doc
operator|.
name|path
argument_list|()
argument_list|,
name|doc
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
argument_list|)
expr_stmt|;
name|db
operator|.
name|getFolder
argument_list|(
literal|"/"
argument_list|)
operator|.
name|listeners
argument_list|()
operator|.
name|add
argument_list|(
name|EnumSet
operator|.
name|of
argument_list|(
name|Trigger
operator|.
name|BEFORE_UPDATE
argument_list|,
name|Trigger
operator|.
name|AFTER_UPDATE
argument_list|)
argument_list|,
name|listener
argument_list|)
expr_stmt|;
try|try
block|{
name|doc
operator|.
name|root
argument_list|()
operator|.
name|append
argument_list|()
operator|.
name|elem
argument_list|(
literal|"bar"
argument_list|)
operator|.
name|end
argument_list|(
literal|"bar"
argument_list|)
operator|.
name|commit
argument_list|()
expr_stmt|;
block|}
finally|finally
block|{
name|db
operator|.
name|getFolder
argument_list|(
literal|"/"
argument_list|)
operator|.
name|listeners
argument_list|()
operator|.
name|remove
argument_list|(
name|listener
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Test
specifier|public
name|void
name|deleteTriggersListeners
parameter_list|()
block|{
specifier|final
name|XMLDocument
name|doc
init|=
name|db
operator|.
name|getFolder
argument_list|(
literal|"/"
argument_list|)
operator|.
name|documents
argument_list|()
operator|.
name|load
argument_list|(
name|Name
operator|.
name|create
argument_list|(
name|db
argument_list|,
literal|"foo"
argument_list|)
argument_list|,
name|Source
operator|.
name|xml
argument_list|(
literal|"<foo><bar/></foo>"
argument_list|)
argument_list|)
decl_stmt|;
specifier|final
name|Document
operator|.
name|Listener
name|listener
init|=
name|context
operator|.
name|mock
argument_list|(
name|Document
operator|.
name|Listener
operator|.
name|class
argument_list|)
decl_stmt|;
name|context
operator|.
name|checking
argument_list|(
operator|new
name|Expectations
argument_list|()
block|{
block|{
name|one
argument_list|(
name|listener
argument_list|)
operator|.
name|handle
argument_list|(
operator|new
name|Document
operator|.
name|Event
argument_list|(
name|Trigger
operator|.
name|BEFORE_UPDATE
argument_list|,
name|doc
operator|.
name|path
argument_list|()
argument_list|,
name|doc
argument_list|)
argument_list|)
expr_stmt|;
name|one
argument_list|(
name|listener
argument_list|)
operator|.
name|handle
argument_list|(
operator|new
name|Document
operator|.
name|Event
argument_list|(
name|Trigger
operator|.
name|AFTER_UPDATE
argument_list|,
name|doc
operator|.
name|path
argument_list|()
argument_list|,
name|doc
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
argument_list|)
expr_stmt|;
name|db
operator|.
name|getFolder
argument_list|(
literal|"/"
argument_list|)
operator|.
name|listeners
argument_list|()
operator|.
name|add
argument_list|(
name|EnumSet
operator|.
name|of
argument_list|(
name|Trigger
operator|.
name|BEFORE_UPDATE
argument_list|,
name|Trigger
operator|.
name|AFTER_UPDATE
argument_list|)
argument_list|,
name|listener
argument_list|)
expr_stmt|;
try|try
block|{
name|doc
operator|.
name|root
argument_list|()
operator|.
name|query
argument_list|()
operator|.
name|single
argument_list|(
literal|"bar"
argument_list|)
operator|.
name|node
argument_list|()
operator|.
name|delete
argument_list|()
expr_stmt|;
block|}
finally|finally
block|{
name|db
operator|.
name|getFolder
argument_list|(
literal|"/"
argument_list|)
operator|.
name|listeners
argument_list|()
operator|.
name|remove
argument_list|(
name|listener
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Test
specifier|public
name|void
name|replaceTriggersListeners
parameter_list|()
block|{
specifier|final
name|XMLDocument
name|doc
init|=
name|db
operator|.
name|getFolder
argument_list|(
literal|"/"
argument_list|)
operator|.
name|documents
argument_list|()
operator|.
name|load
argument_list|(
name|Name
operator|.
name|create
argument_list|(
name|db
argument_list|,
literal|"foo"
argument_list|)
argument_list|,
name|Source
operator|.
name|xml
argument_list|(
literal|"<foo><bar/></foo>"
argument_list|)
argument_list|)
decl_stmt|;
specifier|final
name|Document
operator|.
name|Listener
name|listener
init|=
name|context
operator|.
name|mock
argument_list|(
name|Document
operator|.
name|Listener
operator|.
name|class
argument_list|)
decl_stmt|;
name|context
operator|.
name|checking
argument_list|(
operator|new
name|Expectations
argument_list|()
block|{
block|{
name|one
argument_list|(
name|listener
argument_list|)
operator|.
name|handle
argument_list|(
operator|new
name|Document
operator|.
name|Event
argument_list|(
name|Trigger
operator|.
name|BEFORE_UPDATE
argument_list|,
name|doc
operator|.
name|path
argument_list|()
argument_list|,
name|doc
argument_list|)
argument_list|)
expr_stmt|;
name|one
argument_list|(
name|listener
argument_list|)
operator|.
name|handle
argument_list|(
operator|new
name|Document
operator|.
name|Event
argument_list|(
name|Trigger
operator|.
name|AFTER_UPDATE
argument_list|,
name|doc
operator|.
name|path
argument_list|()
argument_list|,
name|doc
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
argument_list|)
expr_stmt|;
name|db
operator|.
name|getFolder
argument_list|(
literal|"/"
argument_list|)
operator|.
name|listeners
argument_list|()
operator|.
name|add
argument_list|(
name|EnumSet
operator|.
name|of
argument_list|(
name|Trigger
operator|.
name|BEFORE_UPDATE
argument_list|,
name|Trigger
operator|.
name|AFTER_UPDATE
argument_list|)
argument_list|,
name|listener
argument_list|)
expr_stmt|;
try|try
block|{
name|doc
operator|.
name|root
argument_list|()
operator|.
name|query
argument_list|()
operator|.
name|single
argument_list|(
literal|"bar"
argument_list|)
operator|.
name|node
argument_list|()
operator|.
name|replace
argument_list|()
operator|.
name|elem
argument_list|(
literal|"baz"
argument_list|)
operator|.
name|end
argument_list|(
literal|"baz"
argument_list|)
operator|.
name|commit
argument_list|()
expr_stmt|;
block|}
finally|finally
block|{
name|db
operator|.
name|getFolder
argument_list|(
literal|"/"
argument_list|)
operator|.
name|listeners
argument_list|()
operator|.
name|remove
argument_list|(
name|listener
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Test
specifier|public
name|void
name|updateTriggersListeners
parameter_list|()
block|{
specifier|final
name|XMLDocument
name|doc
init|=
name|db
operator|.
name|getFolder
argument_list|(
literal|"/"
argument_list|)
operator|.
name|documents
argument_list|()
operator|.
name|load
argument_list|(
name|Name
operator|.
name|create
argument_list|(
name|db
argument_list|,
literal|"foo"
argument_list|)
argument_list|,
name|Source
operator|.
name|xml
argument_list|(
literal|"<foo><bar/></foo>"
argument_list|)
argument_list|)
decl_stmt|;
specifier|final
name|Document
operator|.
name|Listener
name|listener
init|=
name|context
operator|.
name|mock
argument_list|(
name|Document
operator|.
name|Listener
operator|.
name|class
argument_list|)
decl_stmt|;
name|context
operator|.
name|checking
argument_list|(
operator|new
name|Expectations
argument_list|()
block|{
block|{
name|one
argument_list|(
name|listener
argument_list|)
operator|.
name|handle
argument_list|(
operator|new
name|Document
operator|.
name|Event
argument_list|(
name|Trigger
operator|.
name|BEFORE_UPDATE
argument_list|,
name|doc
operator|.
name|path
argument_list|()
argument_list|,
name|doc
argument_list|)
argument_list|)
expr_stmt|;
name|one
argument_list|(
name|listener
argument_list|)
operator|.
name|handle
argument_list|(
operator|new
name|Document
operator|.
name|Event
argument_list|(
name|Trigger
operator|.
name|AFTER_UPDATE
argument_list|,
name|doc
operator|.
name|path
argument_list|()
argument_list|,
name|doc
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
argument_list|)
expr_stmt|;
name|db
operator|.
name|getFolder
argument_list|(
literal|"/"
argument_list|)
operator|.
name|listeners
argument_list|()
operator|.
name|add
argument_list|(
name|EnumSet
operator|.
name|of
argument_list|(
name|Trigger
operator|.
name|BEFORE_UPDATE
argument_list|,
name|Trigger
operator|.
name|AFTER_UPDATE
argument_list|)
argument_list|,
name|listener
argument_list|)
expr_stmt|;
try|try
block|{
name|doc
operator|.
name|root
argument_list|()
operator|.
name|query
argument_list|()
operator|.
name|single
argument_list|(
literal|"bar"
argument_list|)
operator|.
name|node
argument_list|()
operator|.
name|update
argument_list|()
operator|.
name|attr
argument_list|(
literal|"x"
argument_list|,
literal|"y"
argument_list|)
operator|.
name|commit
argument_list|()
expr_stmt|;
block|}
finally|finally
block|{
name|db
operator|.
name|getFolder
argument_list|(
literal|"/"
argument_list|)
operator|.
name|listeners
argument_list|()
operator|.
name|remove
argument_list|(
name|listener
argument_list|)
expr_stmt|;
block|}
block|}
block|}
end_class

end_unit

