begin_unit|revision:1.0.0;language:Java;cregit-version:0.0.1
begin_package
package|package
name|org
operator|.
name|exist
operator|.
name|fluent
package|;
end_package

begin_import
import|import
name|java
operator|.
name|lang
operator|.
name|ref
operator|.
name|WeakReference
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|*
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|exist
operator|.
name|util
operator|.
name|ThreadUtils
operator|.
name|newGlobalThread
import|;
end_import

begin_class
class|class
name|WeakMultiValueHashMap
parameter_list|<
name|K
parameter_list|,
name|V
parameter_list|>
block|{
comment|/** 	 * Number of puts between dead reference sweep requests. 	 */
specifier|private
specifier|static
specifier|final
name|int
name|SWEEP_COUNT
init|=
literal|100
decl_stmt|;
specifier|private
specifier|final
name|Map
argument_list|<
name|K
argument_list|,
name|Collection
argument_list|<
name|WeakReference
argument_list|<
name|V
argument_list|>
argument_list|>
argument_list|>
name|map
init|=
operator|new
name|HashMap
argument_list|<>
argument_list|()
decl_stmt|;
specifier|private
name|int
name|putCounter
decl_stmt|;
specifier|public
specifier|synchronized
name|void
name|put
parameter_list|(
name|K
name|key
parameter_list|,
name|V
name|value
parameter_list|)
block|{
specifier|final
name|Collection
argument_list|<
name|WeakReference
argument_list|<
name|V
argument_list|>
argument_list|>
name|list
init|=
name|map
operator|.
name|computeIfAbsent
argument_list|(
name|key
argument_list|,
name|k
lambda|->
operator|new
name|LinkedList
argument_list|<>
argument_list|()
argument_list|)
decl_stmt|;
name|list
operator|.
name|add
argument_list|(
operator|new
name|WeakReference
argument_list|<
name|V
argument_list|>
argument_list|(
name|value
argument_list|)
argument_list|)
expr_stmt|;
name|putCounter
operator|=
operator|(
name|putCounter
operator|+
literal|1
operator|)
operator|%
name|SWEEP_COUNT
expr_stmt|;
if|if
condition|(
name|putCounter
operator|==
literal|0
condition|)
name|SWEEPER
operator|.
name|clean
argument_list|(
name|this
argument_list|)
expr_stmt|;
block|}
specifier|public
specifier|synchronized
name|void
name|remove
parameter_list|(
name|K
name|key
parameter_list|)
block|{
name|map
operator|.
name|remove
argument_list|(
name|key
argument_list|)
expr_stmt|;
block|}
specifier|public
specifier|synchronized
name|boolean
name|containsKey
parameter_list|(
name|K
name|key
parameter_list|)
block|{
specifier|final
name|Collection
argument_list|<
name|WeakReference
argument_list|<
name|V
argument_list|>
argument_list|>
name|list
init|=
name|map
operator|.
name|get
argument_list|(
name|key
argument_list|)
decl_stmt|;
if|if
condition|(
name|list
operator|==
literal|null
condition|)
return|return
literal|false
return|;
for|for
control|(
name|Iterator
argument_list|<
name|WeakReference
argument_list|<
name|V
argument_list|>
argument_list|>
name|it
init|=
name|list
operator|.
name|iterator
argument_list|()
init|;
name|it
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
if|if
condition|(
name|it
operator|.
name|next
argument_list|()
operator|.
name|get
argument_list|()
operator|!=
literal|null
condition|)
return|return
literal|true
return|;
name|it
operator|.
name|remove
argument_list|()
expr_stmt|;
block|}
name|map
operator|.
name|remove
argument_list|(
name|key
argument_list|)
expr_stmt|;
return|return
literal|false
return|;
block|}
annotation|@
name|SuppressWarnings
argument_list|(
literal|"unchecked"
argument_list|)
specifier|public
specifier|synchronized
name|Iterable
argument_list|<
name|V
argument_list|>
name|get
parameter_list|(
specifier|final
name|K
name|key
parameter_list|)
block|{
specifier|final
name|Collection
argument_list|<
name|WeakReference
argument_list|<
name|V
argument_list|>
argument_list|>
name|list
init|=
name|map
operator|.
name|get
argument_list|(
name|key
argument_list|)
decl_stmt|;
if|if
condition|(
name|list
operator|==
literal|null
condition|)
block|{
return|return
name|Database
operator|.
name|EMPTY_ITERABLE
return|;
block|}
return|return
parameter_list|()
lambda|->
operator|new
name|WeakMultiValueHashMapIterator
argument_list|(
name|key
argument_list|,
name|list
argument_list|)
return|;
block|}
specifier|private
class|class
name|WeakMultiValueHashMapIterator
implements|implements
name|Iterator
argument_list|<
name|V
argument_list|>
block|{
specifier|private
specifier|final
name|K
name|key
decl_stmt|;
specifier|private
specifier|final
name|Collection
argument_list|<
name|WeakReference
argument_list|<
name|V
argument_list|>
argument_list|>
name|list
decl_stmt|;
specifier|private
specifier|final
name|Iterator
argument_list|<
name|WeakReference
argument_list|<
name|V
argument_list|>
argument_list|>
name|it
decl_stmt|;
specifier|private
name|V
name|nextItem
decl_stmt|;
specifier|public
name|WeakMultiValueHashMapIterator
parameter_list|(
specifier|final
name|K
name|key
parameter_list|,
specifier|final
name|Collection
argument_list|<
name|WeakReference
argument_list|<
name|V
argument_list|>
argument_list|>
name|list
parameter_list|)
block|{
name|this
operator|.
name|key
operator|=
name|key
expr_stmt|;
name|this
operator|.
name|list
operator|=
name|list
expr_stmt|;
name|this
operator|.
name|it
operator|=
name|list
operator|.
name|iterator
argument_list|()
expr_stmt|;
name|advance
argument_list|()
expr_stmt|;
block|}
specifier|private
name|void
name|advance
parameter_list|()
block|{
synchronized|synchronized
init|(
name|WeakMultiValueHashMap
operator|.
name|this
init|)
block|{
while|while
condition|(
name|nextItem
operator|==
literal|null
operator|&&
name|it
operator|.
name|hasNext
argument_list|()
condition|)
block|{
name|nextItem
operator|=
name|it
operator|.
name|next
argument_list|()
operator|.
name|get
argument_list|()
expr_stmt|;
if|if
condition|(
name|nextItem
operator|==
literal|null
condition|)
name|it
operator|.
name|remove
argument_list|()
expr_stmt|;
block|}
if|if
condition|(
operator|!
name|it
operator|.
name|hasNext
argument_list|()
operator|&&
name|list
operator|.
name|isEmpty
argument_list|()
condition|)
name|map
operator|.
name|remove
argument_list|(
name|key
argument_list|)
expr_stmt|;
block|}
block|}
specifier|public
name|boolean
name|hasNext
parameter_list|()
block|{
name|advance
argument_list|()
expr_stmt|;
return|return
name|nextItem
operator|!=
literal|null
return|;
block|}
specifier|public
name|V
name|next
parameter_list|()
block|{
name|advance
argument_list|()
expr_stmt|;
if|if
condition|(
name|nextItem
operator|==
literal|null
condition|)
throw|throw
operator|new
name|NoSuchElementException
argument_list|()
throw|;
name|V
name|item
init|=
name|nextItem
decl_stmt|;
name|nextItem
operator|=
literal|null
expr_stmt|;
return|return
name|item
return|;
block|}
specifier|public
name|void
name|remove
parameter_list|()
block|{
throw|throw
operator|new
name|UnsupportedOperationException
argument_list|()
throw|;
block|}
block|}
specifier|private
specifier|static
specifier|final
name|Sweeper
name|SWEEPER
init|=
operator|new
name|Sweeper
argument_list|()
decl_stmt|;
static|static
block|{
name|Thread
name|thread
init|=
name|newGlobalThread
argument_list|(
literal|"fluent.weakMultiValueHashMap.sweeper"
argument_list|,
name|SWEEPER
argument_list|)
decl_stmt|;
name|thread
operator|.
name|setPriority
argument_list|(
name|Thread
operator|.
name|NORM_PRIORITY
operator|-
literal|3
argument_list|)
expr_stmt|;
name|thread
operator|.
name|setDaemon
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|thread
operator|.
name|start
argument_list|()
expr_stmt|;
block|}
specifier|private
specifier|static
class|class
name|Sweeper
implements|implements
name|Runnable
block|{
specifier|private
specifier|final
name|LinkedList
argument_list|<
name|WeakMultiValueHashMap
argument_list|<
name|?
argument_list|,
name|?
argument_list|>
argument_list|>
name|inbox
init|=
operator|new
name|LinkedList
argument_list|<
name|WeakMultiValueHashMap
argument_list|<
name|?
argument_list|,
name|?
argument_list|>
argument_list|>
argument_list|()
decl_stmt|;
specifier|public
specifier|synchronized
name|void
name|clean
parameter_list|(
name|WeakMultiValueHashMap
argument_list|<
name|?
argument_list|,
name|?
argument_list|>
name|map
parameter_list|)
block|{
name|inbox
operator|.
name|add
argument_list|(
name|map
argument_list|)
expr_stmt|;
name|notifyAll
argument_list|()
expr_stmt|;
block|}
specifier|public
name|void
name|run
parameter_list|()
block|{
try|try
block|{
while|while
condition|(
literal|true
condition|)
block|{
name|WeakMultiValueHashMap
argument_list|<
name|?
argument_list|,
name|?
argument_list|>
name|map
decl_stmt|;
synchronized|synchronized
init|(
name|this
init|)
block|{
while|while
condition|(
name|inbox
operator|.
name|isEmpty
argument_list|()
condition|)
name|wait
argument_list|()
expr_stmt|;
name|map
operator|=
name|inbox
operator|.
name|removeFirst
argument_list|()
expr_stmt|;
for|for
control|(
name|Iterator
argument_list|<
name|WeakMultiValueHashMap
argument_list|<
name|?
argument_list|,
name|?
argument_list|>
argument_list|>
name|it
init|=
name|inbox
operator|.
name|iterator
argument_list|()
init|;
name|it
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
if|if
condition|(
name|it
operator|.
name|next
argument_list|()
operator|==
name|map
condition|)
name|it
operator|.
name|remove
argument_list|()
expr_stmt|;
block|}
block|}
if|if
condition|(
name|map
operator|!=
literal|null
condition|)
block|{
synchronized|synchronized
init|(
name|map
init|)
block|{
for|for
control|(
name|Iterator
argument_list|<
name|?
extends|extends
name|Collection
argument_list|<
name|?
extends|extends
name|WeakReference
argument_list|<
name|?
argument_list|>
argument_list|>
argument_list|>
name|it
init|=
name|map
operator|.
name|map
operator|.
name|values
argument_list|()
operator|.
name|iterator
argument_list|()
init|;
name|it
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|Collection
argument_list|<
name|?
extends|extends
name|WeakReference
argument_list|<
name|?
argument_list|>
argument_list|>
name|list
init|=
name|it
operator|.
name|next
argument_list|()
decl_stmt|;
for|for
control|(
name|Iterator
argument_list|<
name|?
extends|extends
name|WeakReference
argument_list|<
name|?
argument_list|>
argument_list|>
name|it2
init|=
name|list
operator|.
name|iterator
argument_list|()
init|;
name|it2
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
if|if
condition|(
name|it2
operator|.
name|next
argument_list|()
operator|.
name|get
argument_list|()
operator|==
literal|null
condition|)
name|it2
operator|.
name|remove
argument_list|()
expr_stmt|;
block|}
if|if
condition|(
name|list
operator|.
name|isEmpty
argument_list|()
condition|)
name|it
operator|.
name|remove
argument_list|()
expr_stmt|;
block|}
block|}
block|}
block|}
block|}
catch|catch
parameter_list|(
name|InterruptedException
name|e
parameter_list|)
block|{
block|}
block|}
block|}
block|}
end_class

end_unit

