begin_unit|revision:1.0.0;language:Java;cregit-version:0.0.1
begin_package
package|package
name|org
operator|.
name|exist
operator|.
name|fluent
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|logging
operator|.
name|log4j
operator|.
name|LogManager
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|logging
operator|.
name|log4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|dom
operator|.
name|NodeListImpl
import|;
end_import

begin_import
import|import
name|org
operator|.
name|w3c
operator|.
name|dom
operator|.
name|*
import|;
end_import

begin_comment
comment|/**  * Allows attributes to be added to, replaced in and removed from an existing  * element in the database.  The updates are batched for efficiency; you must call  * {@link #commit()} to apply them to the database.  *  * @author<a href="mailto:piotr@ideanest.com">Piotr Kaminski</a>  */
end_comment

begin_class
specifier|public
class|class
name|AttributeBuilder
block|{
interface|interface
name|CompletedCallback
block|{
specifier|public
name|void
name|completed
parameter_list|(
name|NodeList
name|removeList
parameter_list|,
name|NodeList
name|addList
parameter_list|)
function_decl|;
block|}
specifier|private
specifier|static
specifier|final
name|Logger
name|LOG
init|=
name|LogManager
operator|.
name|getLogger
argument_list|(
name|AttributeBuilder
operator|.
name|class
argument_list|)
decl_stmt|;
specifier|private
specifier|final
name|CompletedCallback
name|callback
decl_stmt|;
specifier|private
specifier|final
name|NamespaceMap
name|namespaceBindings
decl_stmt|;
specifier|private
specifier|final
name|Element
name|element
decl_stmt|;
specifier|private
name|boolean
name|done
decl_stmt|;
specifier|private
specifier|final
name|org
operator|.
name|w3c
operator|.
name|dom
operator|.
name|Document
name|doc
decl_stmt|;
specifier|private
specifier|final
name|NodeListImpl
name|removedAttributes
init|=
operator|new
name|NodeListImpl
argument_list|()
decl_stmt|,
name|addedAttributes
init|=
operator|new
name|NodeListImpl
argument_list|()
decl_stmt|;
specifier|private
specifier|final
name|Map
argument_list|<
name|QName
argument_list|,
name|Attr
argument_list|>
name|removedMap
init|=
operator|new
name|HashMap
argument_list|<
name|QName
argument_list|,
name|Attr
argument_list|>
argument_list|()
decl_stmt|,
name|addedMap
init|=
operator|new
name|HashMap
argument_list|<
name|QName
argument_list|,
name|Attr
argument_list|>
argument_list|()
decl_stmt|;
name|AttributeBuilder
parameter_list|(
name|Element
name|element
parameter_list|,
name|NamespaceMap
name|namespaceBindings
parameter_list|,
name|CompletedCallback
name|callback
parameter_list|)
block|{
name|this
operator|.
name|element
operator|=
name|element
expr_stmt|;
name|this
operator|.
name|callback
operator|=
name|callback
expr_stmt|;
name|this
operator|.
name|namespaceBindings
operator|=
name|namespaceBindings
operator|.
name|extend
argument_list|()
expr_stmt|;
name|this
operator|.
name|doc
operator|=
name|ElementBuilder
operator|.
name|createDocumentNode
argument_list|()
expr_stmt|;
block|}
specifier|private
name|void
name|checkDone
parameter_list|()
block|{
if|if
condition|(
name|done
condition|)
throw|throw
operator|new
name|IllegalStateException
argument_list|(
literal|"builder already done"
argument_list|)
throw|;
block|}
comment|/** 	 * Add a namespace binding to this builder's namespaces map. 	 * 	 * @param key the prefix to bind 	 * @param uri the URI to bind it to 	 * @return this attribute builder, for chaining calls 	 */
specifier|public
name|AttributeBuilder
name|namespace
parameter_list|(
name|String
name|key
parameter_list|,
name|String
name|uri
parameter_list|)
block|{
name|namespaceBindings
operator|.
name|put
argument_list|(
name|key
argument_list|,
name|uri
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/** 	 * Create a new attribute or change the value of an existing one.  Later calls will overwrite 	 * the values set by earlier ones. 	 * 	 * @param name the name of the attribute 	 * @param value the value of the attribute, if not a<code>String</code> will be converted using {@link DataUtils#toXMLString(Object)} 	 * @return this attribute builder, for chaining calls 	 */
specifier|public
name|AttributeBuilder
name|attr
parameter_list|(
name|String
name|name
parameter_list|,
name|Object
name|value
parameter_list|)
block|{
name|checkDone
argument_list|()
expr_stmt|;
name|QName
name|qname
init|=
name|QName
operator|.
name|parse
argument_list|(
name|name
argument_list|,
name|namespaceBindings
argument_list|,
literal|null
argument_list|)
decl_stmt|;
comment|// if previously added, this value will overwrite so remove old attribute from list
name|Attr
name|attr
init|=
name|addedMap
operator|.
name|get
argument_list|(
name|qname
argument_list|)
decl_stmt|;
if|if
condition|(
name|attr
operator|!=
literal|null
condition|)
name|addedAttributes
operator|.
name|remove
argument_list|(
name|attr
argument_list|)
expr_stmt|;
comment|// should be removed iff it is currently set on the element
name|attr
operator|=
name|qname
operator|.
name|getAttributeNode
argument_list|(
name|element
argument_list|)
expr_stmt|;
if|if
condition|(
name|attr
operator|!=
literal|null
condition|)
block|{
if|if
condition|(
operator|!
name|removedMap
operator|.
name|containsKey
argument_list|(
name|qname
argument_list|)
condition|)
block|{
name|removedAttributes
operator|.
name|add
argument_list|(
name|attr
argument_list|)
expr_stmt|;
name|removedMap
operator|.
name|put
argument_list|(
name|qname
argument_list|,
name|attr
argument_list|)
expr_stmt|;
block|}
block|}
else|else
block|{
assert|assert
operator|!
name|removedMap
operator|.
name|containsKey
argument_list|(
name|qname
argument_list|)
assert|;
block|}
name|attr
operator|=
name|qname
operator|.
name|createAttribute
argument_list|(
name|doc
argument_list|)
expr_stmt|;
name|attr
operator|.
name|setValue
argument_list|(
name|DataUtils
operator|.
name|toXMLString
argument_list|(
name|value
argument_list|)
argument_list|)
expr_stmt|;
name|addedAttributes
operator|.
name|add
argument_list|(
name|attr
argument_list|)
expr_stmt|;
name|addedMap
operator|.
name|put
argument_list|(
name|qname
argument_list|,
name|attr
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/** 	 * Add an attribute or change an existing attribute's value only if the given condition holds. 	 * Behaves just like {@link #attr(String, Object)} if<code>condition</code> is true, does 	 * nothing otherwise. 	 * 	 * @param condition the condition that must be satisfied before the attribute's value is set 	 * @param name the name of the attribute 	 * @param value the value of the attribute 	 * @return this attribute builder, for chaining calls 	 */
specifier|public
name|AttributeBuilder
name|attrIf
parameter_list|(
name|boolean
name|condition
parameter_list|,
name|String
name|name
parameter_list|,
name|Object
name|value
parameter_list|)
block|{
name|checkDone
argument_list|()
expr_stmt|;
if|if
condition|(
name|condition
condition|)
name|attr
argument_list|(
name|name
argument_list|,
name|value
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/** 	 * Delete an attribute.  Does nothing if the attribute does not exist.  It's allowed (though probably 	 * pointless) to delete attributes that were created using {@link #attr(String, Object)}, even if not 	 * yet committed. 	 * 	 * @param name the name of the attribute to delete 	 * @return this attribute builder, for chaining 	 */
specifier|public
name|AttributeBuilder
name|delAttr
parameter_list|(
name|String
name|name
parameter_list|)
block|{
name|checkDone
argument_list|()
expr_stmt|;
name|QName
name|qname
init|=
name|QName
operator|.
name|parse
argument_list|(
name|name
argument_list|,
name|namespaceBindings
argument_list|,
literal|null
argument_list|)
decl_stmt|;
comment|// override any previous addition
name|Attr
name|attr
init|=
name|addedMap
operator|.
name|get
argument_list|(
name|qname
argument_list|)
decl_stmt|;
if|if
condition|(
name|attr
operator|!=
literal|null
condition|)
block|{
name|addedAttributes
operator|.
name|remove
argument_list|(
name|attr
argument_list|)
expr_stmt|;
name|addedMap
operator|.
name|remove
argument_list|(
name|qname
argument_list|)
expr_stmt|;
block|}
comment|// if currently set on the element, and not already listed for removal, remove it
name|attr
operator|=
name|qname
operator|.
name|getAttributeNode
argument_list|(
name|element
argument_list|)
expr_stmt|;
if|if
condition|(
name|attr
operator|!=
literal|null
operator|&&
operator|!
name|removedMap
operator|.
name|containsKey
argument_list|(
name|qname
argument_list|)
condition|)
block|{
name|removedAttributes
operator|.
name|add
argument_list|(
name|attr
argument_list|)
expr_stmt|;
name|removedMap
operator|.
name|put
argument_list|(
name|qname
argument_list|,
name|attr
argument_list|)
expr_stmt|;
block|}
return|return
name|this
return|;
block|}
comment|/** 	 * Commit the attribute changes recorded with the other methods to the database. 	 */
specifier|public
name|void
name|commit
parameter_list|()
block|{
name|checkDone
argument_list|()
expr_stmt|;
name|done
operator|=
literal|true
expr_stmt|;
if|if
condition|(
name|removedAttributes
operator|.
name|isEmpty
argument_list|()
operator|&&
name|addedAttributes
operator|.
name|isEmpty
argument_list|()
condition|)
return|return;
name|callback
operator|.
name|completed
argument_list|(
name|removedAttributes
argument_list|,
name|addedAttributes
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|protected
name|void
name|finalize
parameter_list|()
throws|throws
name|Throwable
block|{
try|try
block|{
if|if
condition|(
operator|!
name|done
condition|)
name|LOG
operator|.
name|warn
argument_list|(
literal|"disposed without commit"
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
name|super
operator|.
name|finalize
argument_list|()
expr_stmt|;
block|}
block|}
block|}
end_class

end_unit

