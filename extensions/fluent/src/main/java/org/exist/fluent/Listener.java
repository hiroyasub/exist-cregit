begin_unit|revision:1.0.0;language:Java;cregit-version:0.0.1
begin_package
package|package
name|org
operator|.
name|exist
operator|.
name|fluent
package|;
end_package

begin_comment
comment|/**  * The supertype for all listeners on database documents and folders.  *  * @author<a href="mailto:piotr@ideanest.com">Piotr Kaminski</a>  */
end_comment

begin_interface
specifier|public
interface|interface
name|Listener
block|{
comment|/** 	 * The superclass for all database events. 	 * 	 * @author<a href="mailto:piotr@ideanest.com">Piotr Kaminski</a> 	 */
specifier|public
specifier|abstract
class|class
name|Event
block|{
comment|/** 		 * The trigger that caused this event. 		 */
specifier|public
specifier|final
name|Trigger
name|trigger
decl_stmt|;
comment|/** 		 * The path of the event's subject, either a document or a folder. 		 */
specifier|public
specifier|final
name|String
name|path
decl_stmt|;
comment|/** 		 * Construct a new event for the given trigger and path.  		 * 		 * @param trigger the reason for the event 		 * @param path the path of the event's subject 		 */
name|Event
parameter_list|(
name|Trigger
name|trigger
parameter_list|,
name|String
name|path
parameter_list|)
block|{
name|this
operator|.
name|trigger
operator|=
name|trigger
expr_stmt|;
name|this
operator|.
name|path
operator|=
name|path
expr_stmt|;
block|}
comment|/** 		 * Construct a new event, taking the trigger and path from the given event key. 		 * 		 * @param key the key to copy data from 		 */
name|Event
parameter_list|(
name|ListenerManager
operator|.
name|EventKey
name|key
parameter_list|)
block|{
name|this
operator|.
name|trigger
operator|=
name|key
operator|.
name|trigger
expr_stmt|;
name|this
operator|.
name|path
operator|=
name|key
operator|.
name|path
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|equals
parameter_list|(
name|Object
name|o
parameter_list|)
block|{
if|if
condition|(
name|o
operator|==
literal|null
operator|||
name|this
operator|.
name|getClass
argument_list|()
operator|!=
name|o
operator|.
name|getClass
argument_list|()
condition|)
return|return
literal|false
return|;
name|Event
name|that
init|=
operator|(
name|Event
operator|)
name|o
decl_stmt|;
return|return
name|this
operator|.
name|trigger
operator|==
name|that
operator|.
name|trigger
operator|&&
name|this
operator|.
name|path
operator|.
name|equals
argument_list|(
name|that
operator|.
name|path
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|int
name|hashCode
parameter_list|()
block|{
return|return
name|path
operator|.
name|hashCode
argument_list|()
operator|*
literal|37
operator|+
name|trigger
operator|.
name|hashCode
argument_list|()
return|;
block|}
annotation|@
name|Override
specifier|public
name|String
name|toString
parameter_list|()
block|{
return|return
literal|"db.Event("
operator|+
name|trigger
operator|+
literal|", "
operator|+
name|path
operator|+
literal|")"
return|;
block|}
block|}
block|}
end_interface

end_unit

