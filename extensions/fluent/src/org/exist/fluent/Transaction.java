begin_unit|revision:1.0.0;language:Java;cregit-version:0.0.1
begin_package
package|package
name|org
operator|.
name|exist
operator|.
name|fluent
package|;
end_package

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|dom
operator|.
name|persistent
operator|.
name|DocumentImpl
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|storage
operator|.
name|DBBroker
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|storage
operator|.
name|lock
operator|.
name|Lock
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|storage
operator|.
name|lock
operator|.
name|Lock
operator|.
name|LockMode
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|storage
operator|.
name|txn
operator|.
name|*
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|util
operator|.
name|LockException
import|;
end_import

begin_comment
comment|/**  * A transaction on the database.  This can be either a top-level transaction, or a "nested"  * transaction.  Nested transactions do nothing on commit and abort.  All transactions will  * only execute a commit or abort once, all further invocations do nothing.  This makes it  * convenient to put abort in a finally clause -- it will only have an effect if no commit was  * reached beforehand.  *  * @author<a href="mailto:piotr@ideanest.com">Piotr Kaminski</a>  */
end_comment

begin_class
class|class
name|Transaction
block|{
specifier|private
specifier|final
name|TransactionManager
name|txManager
decl_stmt|;
specifier|final
name|Txn
name|tx
decl_stmt|;
specifier|final
name|DBBroker
name|broker
decl_stmt|;
specifier|private
specifier|final
name|Database
name|db
decl_stmt|;
specifier|private
name|boolean
name|complete
decl_stmt|;
comment|/** 	 * Begin a new transaction. 	 * 	 * @param txManager the manager to use 	 */
name|Transaction
parameter_list|(
name|TransactionManager
name|txManager
parameter_list|,
name|Database
name|db
parameter_list|)
block|{
name|this
operator|.
name|txManager
operator|=
name|txManager
expr_stmt|;
name|this
operator|.
name|tx
operator|=
name|txManager
operator|.
name|beginTransaction
argument_list|()
expr_stmt|;
name|this
operator|.
name|db
operator|=
name|db
expr_stmt|;
name|this
operator|.
name|broker
operator|=
name|db
operator|==
literal|null
condition|?
literal|null
else|:
name|db
operator|.
name|acquireBroker
argument_list|()
expr_stmt|;
name|complete
operator|=
literal|false
expr_stmt|;
block|}
comment|/** 	 * Join an existing transaction, do nothing on commit or abort. 	 * 	 * @param tx the transaction to join 	 */
name|Transaction
parameter_list|(
name|Transaction
name|tx
parameter_list|,
name|Database
name|db
parameter_list|)
block|{
name|this
operator|.
name|txManager
operator|=
literal|null
expr_stmt|;
name|this
operator|.
name|tx
operator|=
name|tx
operator|.
name|tx
expr_stmt|;
name|this
operator|.
name|db
operator|=
name|db
expr_stmt|;
name|this
operator|.
name|broker
operator|=
name|db
operator|==
literal|null
condition|?
literal|null
else|:
name|db
operator|.
name|acquireBroker
argument_list|()
expr_stmt|;
name|complete
operator|=
literal|true
expr_stmt|;
block|}
name|void
name|commit
parameter_list|()
block|{
if|if
condition|(
name|complete
condition|)
return|return;
try|try
block|{
if|if
condition|(
name|tx
operator|!=
literal|null
operator|&&
name|txManager
operator|!=
literal|null
condition|)
try|try
block|{
name|txManager
operator|.
name|commit
argument_list|(
name|tx
argument_list|)
expr_stmt|;
name|complete
operator|=
literal|true
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|TransactionException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|DatabaseException
argument_list|(
name|e
argument_list|)
throw|;
block|}
block|}
finally|finally
block|{
if|if
condition|(
name|broker
operator|!=
literal|null
condition|)
name|db
operator|.
name|releaseBroker
argument_list|(
name|broker
argument_list|)
expr_stmt|;
block|}
block|}
name|void
name|abortIfIncomplete
parameter_list|()
block|{
if|if
condition|(
name|complete
condition|)
return|return;
if|if
condition|(
name|tx
operator|!=
literal|null
operator|&&
name|txManager
operator|!=
literal|null
condition|)
name|txManager
operator|.
name|abort
argument_list|(
name|tx
argument_list|)
expr_stmt|;
if|if
condition|(
name|broker
operator|!=
literal|null
condition|)
name|db
operator|.
name|releaseBroker
argument_list|(
name|broker
argument_list|)
expr_stmt|;
name|complete
operator|=
literal|true
expr_stmt|;
block|}
name|void
name|lockWrite
parameter_list|(
name|DocumentImpl
name|doc
parameter_list|)
block|{
try|try
block|{
name|tx
operator|.
name|acquireLock
argument_list|(
name|doc
operator|.
name|getUpdateLock
argument_list|()
argument_list|,
name|LockMode
operator|.
name|WRITE_LOCK
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|LockException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|DatabaseException
argument_list|(
name|e
argument_list|)
throw|;
block|}
block|}
name|void
name|lockRead
parameter_list|(
name|DocumentImpl
name|doc
parameter_list|)
block|{
try|try
block|{
name|tx
operator|.
name|acquireLock
argument_list|(
name|doc
operator|.
name|getUpdateLock
argument_list|()
argument_list|,
name|LockMode
operator|.
name|READ_LOCK
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|LockException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|DatabaseException
argument_list|(
name|e
argument_list|)
throw|;
block|}
block|}
block|}
end_class

end_unit

