begin_unit|revision:1.0.0;language:Java;cregit-version:0.0.1
begin_package
package|package
name|org
operator|.
name|exist
operator|.
name|fluent
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Date
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|xml
operator|.
name|datatype
operator|.
name|Duration
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|xml
operator|.
name|datatype
operator|.
name|XMLGregorianCalendar
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|dom
operator|.
name|NodeProxy
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|storage
operator|.
name|DBBroker
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|storage
operator|.
name|serializers
operator|.
name|Serializer
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|xquery
operator|.
name|XPathException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|xquery
operator|.
name|value
operator|.
name|*
import|;
end_import

begin_import
import|import
name|org
operator|.
name|xml
operator|.
name|sax
operator|.
name|SAXException
import|;
end_import

begin_comment
comment|/**  * An XML item in the database.  While most often used to represent XML  * elements, it can also stand in for any DOM node or an atomic value.  However, it  * is not used to represent entire XML documents (see {@link org.exist.fluent.XMLDocument}).  * Not all operations are valid in all cases.  *   * @author<a href="mailto:piotr@ideanest.com">Piotr Kaminski</a>  * @version $Revision: 1.13 $ ($Date: 2006/04/14 04:12:04 $)  */
end_comment

begin_class
specifier|public
class|class
name|Item
extends|extends
name|Resource
block|{
specifier|protected
specifier|final
name|org
operator|.
name|exist
operator|.
name|xquery
operator|.
name|value
operator|.
name|Item
name|item
decl_stmt|;
name|Item
parameter_list|()
block|{
name|super
argument_list|(
literal|null
argument_list|,
literal|null
argument_list|)
expr_stmt|;
name|this
operator|.
name|item
operator|=
literal|null
expr_stmt|;
block|}
name|Item
parameter_list|(
name|org
operator|.
name|exist
operator|.
name|xquery
operator|.
name|value
operator|.
name|Item
name|item
parameter_list|,
name|NamespaceMap
name|namespaceBindings
parameter_list|,
name|Database
name|db
parameter_list|)
block|{
name|super
argument_list|(
name|namespaceBindings
argument_list|,
name|db
argument_list|)
expr_stmt|;
comment|// the item should've been tracked (Database.trackNode) before getting here!
name|this
operator|.
name|item
operator|=
name|item
expr_stmt|;
block|}
comment|/** 	 * Return this item cast as a node. 	 *  	 * @return this item cast as a node 	 * @throws DatabaseException if this item is not a node 	 */
specifier|public
name|Node
name|node
parameter_list|()
block|{
throw|throw
operator|new
name|DatabaseException
argument_list|(
literal|"this item is not a node: "
operator|+
name|this
argument_list|)
throw|;
block|}
comment|/** 	 * Return whether this item really exists, or if it's a virtual placeholder equivalent to a<code>null</code>. 	 *  	 * @return<code>true</code> if the item exists,<code>false</code> if it's a null placeholder returned as part of an optional query 	 */
specifier|public
name|boolean
name|extant
parameter_list|()
block|{
return|return
literal|true
return|;
block|}
annotation|@
name|Override
name|Sequence
name|convertToSequence
parameter_list|()
block|{
return|return
name|item
operator|.
name|toSequence
argument_list|()
return|;
block|}
comment|/** 	 * @return the string value of this item if atomic, or the concatenation of its text content if a node 	 */
specifier|public
name|String
name|value
parameter_list|()
block|{
try|try
block|{
return|return
name|item
operator|.
name|getStringValue
argument_list|()
return|;
block|}
catch|catch
parameter_list|(
name|XPathException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|DatabaseException
argument_list|(
name|e
argument_list|)
throw|;
block|}
block|}
comment|/** 	 * Return the converted boolean value following XQuery / XPath conversion rules. 	 * For numeric values, return false iff the value is 0.  For strings, return true if 	 * the value is 'true' or '1' and false if the value is 'false' or '0', fail otherwise.  For 	 * nodes, return the conversion of the effective string value. 	 * 	 * @return the boolean value of the item 	 * @throws DatabaseException if the conversion failed 	 */
specifier|public
name|boolean
name|booleanValue
parameter_list|()
block|{
try|try
block|{
return|return
operator|(
operator|(
name|Boolean
operator|)
name|item
operator|.
name|toJavaObject
argument_list|(
name|Boolean
operator|.
name|class
argument_list|)
operator|)
operator|.
name|booleanValue
argument_list|()
return|;
block|}
catch|catch
parameter_list|(
name|XPathException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|DatabaseException
argument_list|(
name|e
argument_list|)
throw|;
block|}
block|}
comment|/** 	 * Return the int value of this item.  For numeric atomic values, truncate to an int; 	 * for other values, request a conversion of the effective string value (which may fail). 	 * If the value is out of range for ints, return the smallest or largest int, as appropriate. 	 * If you think overflow may be a problem, check for these values. 	 * 	 * @return the int value of this item 	 * @throws DatabaseException if the conversion failed 	 */
specifier|public
name|int
name|intValue
parameter_list|()
block|{
try|try
block|{
return|return
operator|(
operator|(
name|Integer
operator|)
name|item
operator|.
name|toJavaObject
argument_list|(
name|Integer
operator|.
name|class
argument_list|)
operator|)
operator|.
name|intValue
argument_list|()
return|;
block|}
catch|catch
parameter_list|(
name|XPathException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|DatabaseException
argument_list|(
name|e
argument_list|)
throw|;
block|}
block|}
comment|/** 	 * Return the long value of this item.  For numeric atomic values, truncate to a long; 	 * for other values, request a conversion of the effective string value (which may fail). 	 * If the value is out of range for longs, return the smallest or largest long, as appropriate. 	 * If you think overflow may be a problem, check for these values. 	 * 	 * @return the long value of this item 	 * @throws DatabaseException if the conversion failed 	 */
specifier|public
name|long
name|longValue
parameter_list|()
block|{
try|try
block|{
return|return
operator|(
operator|(
name|Long
operator|)
name|item
operator|.
name|toJavaObject
argument_list|(
name|Long
operator|.
name|class
argument_list|)
operator|)
operator|.
name|longValue
argument_list|()
return|;
block|}
catch|catch
parameter_list|(
name|XPathException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|DatabaseException
argument_list|(
name|e
argument_list|)
throw|;
block|}
block|}
comment|/** 	 * Return the double value of this item.  For numeric atomic values, truncate to a double; 	 * for other values, request a conversion of the effective string value (which may fail). 	 * If the value is out of range for doubles, return positive or negative infinity, as appropriate. 	 * If you think overflow may be a problem, check for these values. 	 * 	 * @return the double value of this item 	 * @throws DatabaseException if the conversion failed 	 */
specifier|public
name|double
name|doubleValue
parameter_list|()
block|{
try|try
block|{
return|return
operator|(
operator|(
name|Double
operator|)
name|item
operator|.
name|toJavaObject
argument_list|(
name|Double
operator|.
name|class
argument_list|)
operator|)
operator|.
name|doubleValue
argument_list|()
return|;
block|}
catch|catch
parameter_list|(
name|XPathException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|DatabaseException
argument_list|(
name|e
argument_list|)
throw|;
block|}
block|}
comment|/** 	 * Return the duration value of this item by parsing its string representation as a duration. 	 * 	 * @return the duration value of this item 	 * @throws DatabaseException if the conversion failed 	 */
specifier|public
name|Duration
name|durationValue
parameter_list|()
block|{
try|try
block|{
return|return
name|DataUtils
operator|.
name|datatypeFactory
argument_list|()
operator|.
name|newDuration
argument_list|(
name|value
argument_list|()
argument_list|)
return|;
block|}
catch|catch
parameter_list|(
name|IllegalArgumentException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|DatabaseException
argument_list|(
name|e
argument_list|)
throw|;
block|}
block|}
comment|/** 	 * Return the XML date/time value of this item by parsing its string representation. 	 * 	 * @return the XML date/time value of this item 	 * @throws DatabaseException if the conversion failed 	 */
specifier|public
name|XMLGregorianCalendar
name|dateTimeValue
parameter_list|()
block|{
try|try
block|{
return|return
name|DataUtils
operator|.
name|datatypeFactory
argument_list|()
operator|.
name|newXMLGregorianCalendar
argument_list|(
name|value
argument_list|()
argument_list|)
return|;
block|}
catch|catch
parameter_list|(
name|IllegalArgumentException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|DatabaseException
argument_list|(
name|e
argument_list|)
throw|;
block|}
block|}
comment|/** 	 * Return the<code>java.util.Date</code> value of this item by parsing its string 	 * representation as an XML date/time value, then converting to a Java date. 	 * 	 * @return the Java time instant value of this item 	 * @throws DatabaseException if the conversion failed 	 */
specifier|public
name|Date
name|instantValue
parameter_list|()
block|{
return|return
name|DataUtils
operator|.
name|toDate
argument_list|(
name|dateTimeValue
argument_list|()
argument_list|)
return|;
block|}
comment|/** 	 * Return the string representation of this item.  If the item is atomic, return its string 	 * value.  If it is a node, serialize it to a string. 	 *  	 * @return the string representation of this item 	 */
annotation|@
name|Override
specifier|public
name|String
name|toString
parameter_list|()
block|{
if|if
condition|(
name|item
operator|instanceof
name|AtomicValue
condition|)
block|{
return|return
name|value
argument_list|()
return|;
block|}
assert|assert
name|item
operator|instanceof
name|NodeValue
assert|;
name|DBBroker
name|broker
init|=
literal|null
decl_stmt|;
try|try
block|{
name|broker
operator|=
name|db
operator|.
name|acquireBroker
argument_list|()
expr_stmt|;
name|Serializer
name|serializer
init|=
name|broker
operator|.
name|getSerializer
argument_list|()
decl_stmt|;
if|if
condition|(
name|item
operator|instanceof
name|NodeProxy
condition|)
block|{
name|NodeProxy
name|proxy
init|=
operator|(
name|NodeProxy
operator|)
name|item
decl_stmt|;
if|if
condition|(
name|proxy
operator|.
name|isDocument
argument_list|()
condition|)
block|{
return|return
name|serializer
operator|.
name|serialize
argument_list|(
name|proxy
operator|.
name|getDocument
argument_list|()
argument_list|)
return|;
block|}
block|}
return|return
name|serializer
operator|.
name|serialize
argument_list|(
operator|(
name|NodeValue
operator|)
name|item
argument_list|)
return|;
block|}
catch|catch
parameter_list|(
name|SAXException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|DatabaseException
argument_list|(
name|e
argument_list|)
throw|;
block|}
finally|finally
block|{
name|db
operator|.
name|releaseBroker
argument_list|(
name|broker
argument_list|)
expr_stmt|;
block|}
block|}
comment|/** 	 * A null item, used as a placeholder where an actual<code>null</code> would be inappropriate. 	 * REMEMBER to duplicate all these methods in Node.NULL as well! 	 */
specifier|static
specifier|final
name|Item
name|NULL
init|=
operator|new
name|Item
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|boolean
name|booleanValue
parameter_list|()
block|{
return|return
literal|false
return|;
block|}
annotation|@
name|Override
specifier|public
name|int
name|intValue
parameter_list|()
block|{
return|return
literal|0
return|;
block|}
annotation|@
name|Override
specifier|public
name|long
name|longValue
parameter_list|()
block|{
return|return
literal|0L
return|;
block|}
annotation|@
name|Override
specifier|public
name|double
name|doubleValue
parameter_list|()
block|{
return|return
literal|0.0
return|;
block|}
annotation|@
name|Override
specifier|public
name|Duration
name|durationValue
parameter_list|()
block|{
return|return
literal|null
return|;
block|}
annotation|@
name|Override
specifier|public
name|XMLGregorianCalendar
name|dateTimeValue
parameter_list|()
block|{
return|return
literal|null
return|;
block|}
annotation|@
name|Override
specifier|public
name|Date
name|instantValue
parameter_list|()
block|{
return|return
literal|null
return|;
block|}
annotation|@
name|Override
specifier|public
name|Node
name|node
parameter_list|()
block|{
return|return
name|Node
operator|.
name|NULL
return|;
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|extant
parameter_list|()
block|{
return|return
literal|false
return|;
block|}
annotation|@
name|Override
specifier|public
name|QueryService
name|query
parameter_list|()
block|{
return|return
name|QueryService
operator|.
name|NULL
return|;
block|}
annotation|@
name|Override
specifier|public
name|String
name|value
parameter_list|()
block|{
return|return
literal|null
return|;
block|}
annotation|@
name|Override
specifier|public
name|String
name|toString
parameter_list|()
block|{
return|return
literal|"NULL item"
return|;
block|}
annotation|@
name|Override
name|Sequence
name|convertToSequence
parameter_list|()
block|{
return|return
name|Sequence
operator|.
name|EMPTY_SEQUENCE
return|;
block|}
block|}
decl_stmt|;
block|}
end_class

begin_comment
comment|///////////////////////////////////////////////////
end_comment

begin_comment
comment|//            --X-X--
end_comment

begin_comment
comment|///////////////////////////////////////////////////
end_comment

end_unit

