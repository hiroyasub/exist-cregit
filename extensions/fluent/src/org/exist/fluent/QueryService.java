begin_unit|revision:1.0.0;language:Java;cregit-version:0.0.1
begin_package
package|package
name|org
operator|.
name|exist
operator|.
name|fluent
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|*
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|*
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|regex
operator|.
name|*
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|log4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|dom
operator|.
name|DocumentSet
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|security
operator|.
name|xacml
operator|.
name|AccessContext
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|source
operator|.
name|*
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|storage
operator|.
name|*
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|xquery
operator|.
name|*
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|xquery
operator|.
name|functions
operator|.
name|*
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|xquery
operator|.
name|value
operator|.
name|*
import|;
end_import

begin_comment
comment|/**  * Provides facilities for performing queries on a database.  It cannot  * be instantiated directly; you must obtain an instance from a resource or the database.  *   * @author<a href="mailto:piotr@ideanest.com">Piotr Kaminski</a>  */
end_comment

begin_class
specifier|public
class|class
name|QueryService
implements|implements
name|Cloneable
block|{
specifier|private
specifier|static
specifier|final
name|Pattern
name|PRE_SUB_PATTERN
init|=
name|Pattern
operator|.
name|compile
argument_list|(
literal|"\\$(\\d+)"
argument_list|)
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|Logger
name|LOG
init|=
name|Logger
operator|.
name|getLogger
argument_list|(
name|QueryService
operator|.
name|class
argument_list|)
decl_stmt|;
specifier|private
name|NamespaceMap
name|namespaceBindings
decl_stmt|;
specifier|private
specifier|final
name|Database
name|db
decl_stmt|;
specifier|protected
name|DocumentSet
name|docs
decl_stmt|;
specifier|protected
name|Sequence
name|base
decl_stmt|;
specifier|protected
name|AnyURIValue
name|baseUri
decl_stmt|;
specifier|private
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|bindings
init|=
operator|new
name|HashMap
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
argument_list|()
decl_stmt|;
specifier|private
name|boolean
name|presub
decl_stmt|;
comment|/** 	 * Use this constructor when the docs and base are not constant for the query 	 * service and need to be set just before the query.  You must also override 	 * the prepareContext method. 	 * 	 * @param origin 	 */
name|QueryService
parameter_list|(
name|Resource
name|origin
parameter_list|)
block|{
name|this
operator|.
name|namespaceBindings
operator|=
name|origin
operator|.
name|namespaceBindings
argument_list|()
operator|.
name|extend
argument_list|()
expr_stmt|;
name|this
operator|.
name|db
operator|=
name|origin
operator|.
name|database
argument_list|()
expr_stmt|;
block|}
name|QueryService
parameter_list|(
name|Resource
name|origin
parameter_list|,
name|DocumentSet
name|docs
parameter_list|,
name|Sequence
name|base
parameter_list|)
block|{
name|this
argument_list|(
name|origin
argument_list|)
expr_stmt|;
name|this
operator|.
name|docs
operator|=
name|docs
expr_stmt|;
name|this
operator|.
name|base
operator|=
name|base
expr_stmt|;
block|}
specifier|private
name|QueryService
parameter_list|()
block|{
name|this
operator|.
name|namespaceBindings
operator|=
literal|null
expr_stmt|;
name|this
operator|.
name|db
operator|=
literal|null
expr_stmt|;
block|}
name|boolean
name|isFreshFrom
parameter_list|(
name|Resource
name|origin
parameter_list|)
block|{
return|return
operator|!
name|presub
operator|&&
name|bindings
operator|.
name|isEmpty
argument_list|()
operator|&&
operator|(
name|namespaceBindings
operator|==
literal|null
operator|||
name|namespaceBindings
operator|.
name|isFreshFrom
argument_list|(
name|origin
operator|.
name|namespaceBindings
argument_list|()
argument_list|)
operator|)
return|;
block|}
specifier|static
specifier|final
name|QueryService
name|NULL
init|=
operator|new
name|QueryService
argument_list|()
block|{
annotation|@
name|Override
specifier|protected
name|ItemList
name|executeQuery
parameter_list|(
name|String
name|query
parameter_list|,
name|WrapperFactory
name|wrappeFactory
parameter_list|,
name|Object
index|[]
name|params
parameter_list|)
block|{
return|return
name|ItemList
operator|.
name|NULL
return|;
block|}
annotation|@
name|Override
specifier|public
name|QueryAnalysis
name|analyze
parameter_list|(
name|String
name|query
parameter_list|,
name|Object
modifier|...
name|params
parameter_list|)
block|{
throw|throw
operator|new
name|UnsupportedOperationException
argument_list|(
literal|"NULL query service"
argument_list|)
throw|;
block|}
annotation|@
name|Override
specifier|public
name|QueryService
name|let
parameter_list|(
name|String
name|var
parameter_list|,
name|Object
name|value
parameter_list|)
block|{
return|return
name|this
return|;
block|}
annotation|@
name|Override
specifier|public
name|QueryService
name|namespace
parameter_list|(
name|String
name|key
parameter_list|,
name|String
name|uri
parameter_list|)
block|{
return|return
name|this
return|;
block|}
annotation|@
name|Override
specifier|public
name|NamespaceMap
name|namespaceBindings
parameter_list|()
block|{
throw|throw
operator|new
name|UnsupportedOperationException
argument_list|(
literal|"NULL query service"
argument_list|)
throw|;
block|}
annotation|@
name|Override
specifier|public
name|Item
name|single
parameter_list|(
name|String
name|query
parameter_list|,
name|Object
modifier|...
name|params
parameter_list|)
block|{
throw|throw
operator|new
name|DatabaseException
argument_list|(
literal|"expected 1 result item, got 0 (NULL query)"
argument_list|)
throw|;
block|}
block|}
decl_stmt|;
name|void
name|prepareContext
parameter_list|(
name|DBBroker
name|broker
parameter_list|)
block|{
comment|// do nothing by default, override this if you need to set docs and base just before
comment|// a query is evaluated
block|}
comment|/** 	 * Return the database to which the resource that provides the context for 	 * this query service belongs. The returned database will inherit its 	 * namespace bindings from this query service. 	 *  	 * @return the database that contains this object 	 */
specifier|public
name|Database
name|database
parameter_list|()
block|{
return|return
operator|new
name|Database
argument_list|(
name|db
argument_list|,
name|namespaceBindings
argument_list|)
return|;
block|}
comment|/** 	 * Bind a variable to the given value within all query expression evaluated subsequently. 	 * 	 * @param variableName the qualified name of the variable to bind; 	 * 	prefixes are taken from the namespace mappings of the folder that provided this service; 	 * 	if the name starts with a<code>$</code>, it will be stripped automatically  	 * @param value the value the variable should take 	 * @return this service, to chain calls 	 */
specifier|public
name|QueryService
name|let
parameter_list|(
name|String
name|variableName
parameter_list|,
name|Object
name|value
parameter_list|)
block|{
if|if
condition|(
name|variableName
operator|==
literal|null
condition|)
throw|throw
operator|new
name|NullPointerException
argument_list|(
literal|"null variable name"
argument_list|)
throw|;
if|if
condition|(
name|variableName
operator|.
name|startsWith
argument_list|(
literal|"$"
argument_list|)
condition|)
name|variableName
operator|=
name|variableName
operator|.
name|substring
argument_list|(
literal|1
argument_list|)
expr_stmt|;
if|if
condition|(
name|variableName
operator|.
name|length
argument_list|()
operator|==
literal|0
condition|)
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"empty variable name"
argument_list|)
throw|;
name|bindings
operator|.
name|put
argument_list|(
name|variableName
argument_list|,
name|value
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/** 	 * Declare a namespace binding within the scope of this query. 	 * 	 * @param key the key to bind 	 * @param uri the namespace uri 	 * @return this service, to chain calls 	 */
specifier|public
name|QueryService
name|namespace
parameter_list|(
name|String
name|key
parameter_list|,
name|String
name|uri
parameter_list|)
block|{
name|namespaceBindings
operator|.
name|put
argument_list|(
name|key
argument_list|,
name|uri
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/** 	 * Return this query service's namespace bindings for inspection or modification. 	 * 	 * @return this query service's namespace bindings 	 */
specifier|public
name|NamespaceMap
name|namespaceBindings
parameter_list|()
block|{
return|return
name|namespaceBindings
return|;
block|}
comment|/** 	 * Pre-substitute variables of the form '$n' where n is an integer in all query expressions 	 * evaluated subsequently.  The values are taken from the usual postional parameter list. 	 * Parameters that are presubbed are also bound to the usual $_n variables and can be 	 * used normally as such.  Pre-subbing is useful for element and attribute names, where 	 * XQuery doesn't allow variables. 	 * 	 * @return this service, to chain calls 	 */
specifier|public
name|QueryService
name|presub
parameter_list|()
block|{
name|presub
operator|=
literal|true
expr_stmt|;
return|return
name|this
return|;
block|}
annotation|@
name|Override
specifier|public
name|QueryService
name|clone
parameter_list|()
block|{
return|return
name|clone
argument_list|(
literal|null
argument_list|,
literal|null
argument_list|)
return|;
block|}
comment|/** 	 * Clone this query service, optionally overriding the clone's namespace and variable bindings. 	 * If the namespace bindings override or variable bindings override is specified, then that object 	 * is cloned and used for its respective purpose.  If an override is not specified, the bindings 	 * are cloned from the original query service. 	 * 	 * @param nsBindingsOverride the namespace bindings to clone, or<code>null</code> to clone from the original 	 * @param varBindingsOverride the variable bindings to clone, or<code>null</code> to clone from the original 	 * @return a clone of this query service with bindings optionally overridden 	 */
specifier|public
name|QueryService
name|clone
parameter_list|(
name|NamespaceMap
name|nsBindingsOverride
parameter_list|,
name|Map
argument_list|<
name|String
argument_list|,
name|?
argument_list|>
name|varBindingsOverride
parameter_list|)
block|{
try|try
block|{
name|QueryService
name|that
init|=
operator|(
name|QueryService
operator|)
name|super
operator|.
name|clone
argument_list|()
decl_stmt|;
name|that
operator|.
name|namespaceBindings
operator|=
name|nsBindingsOverride
operator|!=
literal|null
condition|?
name|nsBindingsOverride
operator|.
name|clone
argument_list|()
else|:
name|that
operator|.
name|namespaceBindings
operator|.
name|clone
argument_list|()
expr_stmt|;
if|if
condition|(
name|varBindingsOverride
operator|==
literal|null
condition|)
block|{
name|that
operator|.
name|bindings
operator|=
operator|new
name|HashMap
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
argument_list|(
name|that
operator|.
name|bindings
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|that
operator|.
name|bindings
operator|=
operator|new
name|HashMap
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
argument_list|()
expr_stmt|;
for|for
control|(
name|Map
operator|.
name|Entry
argument_list|<
name|String
argument_list|,
name|?
argument_list|>
name|entry
range|:
name|varBindingsOverride
operator|.
name|entrySet
argument_list|()
control|)
block|{
name|that
operator|.
name|let
argument_list|(
name|entry
operator|.
name|getKey
argument_list|()
argument_list|,
name|entry
operator|.
name|getValue
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
return|return
name|that
return|;
block|}
catch|catch
parameter_list|(
name|CloneNotSupportedException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|RuntimeException
argument_list|(
literal|"unexpected exception"
argument_list|,
name|e
argument_list|)
throw|;
block|}
block|}
comment|/** 	 * Get all items that match the given query in the context of this object. 	 * @param query the query to match 	 * @param params parameters to the query, will be substituted for $_1, $_2, etc. 	 * @return a collection of all items that match the query 	 */
specifier|public
name|ItemList
name|all
parameter_list|(
name|String
name|query
parameter_list|,
name|Object
modifier|...
name|params
parameter_list|)
block|{
return|return
name|executeQuery
argument_list|(
name|query
argument_list|,
literal|null
argument_list|,
name|params
argument_list|)
return|;
block|}
comment|/** 	 * Run the given query, ignoring the results.  Useful for running update "queries" -- 	 * see eXist's<a href="http://exist-db.org/update_ext.html">XQuery Update Extensions</a>. 	 * @param query the query to run 	 * @param params parameters to the query, will be substituted for $_1, $_2, etc. 	 */
specifier|public
name|void
name|run
parameter_list|(
name|String
name|query
parameter_list|,
name|Object
modifier|...
name|params
parameter_list|)
block|{
name|executeQuery
argument_list|(
name|query
argument_list|,
literal|null
argument_list|,
name|params
argument_list|)
expr_stmt|;
block|}
specifier|private
interface|interface
name|WrapperFactory
block|{
name|Function
name|createWrapper
parameter_list|(
name|XQueryContext
name|context
parameter_list|)
function_decl|;
block|}
name|ItemList
name|executeQuery
parameter_list|(
name|String
name|query
parameter_list|,
name|WrapperFactory
name|wrapperFactory
parameter_list|,
name|Object
index|[]
name|params
parameter_list|)
block|{
if|if
condition|(
name|presub
condition|)
name|query
operator|=
name|presub
argument_list|(
name|query
argument_list|,
name|params
argument_list|)
expr_stmt|;
name|DBBroker
name|broker
init|=
literal|null
decl_stmt|;
try|try
block|{
name|broker
operator|=
name|db
operator|.
name|acquireBroker
argument_list|()
expr_stmt|;
name|prepareContext
argument_list|(
name|broker
argument_list|)
expr_stmt|;
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|combinedMap
init|=
name|namespaceBindings
operator|.
name|getCombinedMap
argument_list|()
decl_stmt|;
name|org
operator|.
name|exist
operator|.
name|source
operator|.
name|Source
name|source
init|=
operator|new
name|NamespacedStringSource
argument_list|(
name|query
argument_list|,
name|combinedMap
argument_list|)
decl_stmt|;
name|XQuery
name|xquery
init|=
name|broker
operator|.
name|getXQueryService
argument_list|()
decl_stmt|;
name|XQueryPool
name|pool
init|=
name|xquery
operator|.
name|getXQueryPool
argument_list|()
decl_stmt|;
name|CompiledXQuery
name|compiledQuery
init|=
name|pool
operator|.
name|borrowCompiledXQuery
argument_list|(
name|broker
argument_list|,
name|source
argument_list|)
decl_stmt|;
try|try
block|{
name|XQueryContext
name|context
init|=
name|compiledQuery
operator|==
literal|null
condition|?
name|xquery
operator|.
name|newContext
argument_list|(
name|AccessContext
operator|.
name|INTERNAL_PREFIX_LOOKUP
argument_list|)
else|:
name|compiledQuery
operator|.
name|getContext
argument_list|()
decl_stmt|;
name|buildXQueryContext
argument_list|(
name|context
argument_list|,
name|params
argument_list|,
name|combinedMap
argument_list|)
expr_stmt|;
if|if
condition|(
name|compiledQuery
operator|==
literal|null
condition|)
name|compiledQuery
operator|=
name|xquery
operator|.
name|compile
argument_list|(
name|context
argument_list|,
name|source
argument_list|)
expr_stmt|;
return|return
operator|new
name|ItemList
argument_list|(
name|xquery
operator|.
name|execute
argument_list|(
name|wrap
argument_list|(
name|compiledQuery
argument_list|,
name|wrapperFactory
argument_list|,
name|context
argument_list|)
argument_list|,
name|base
argument_list|)
argument_list|,
name|namespaceBindings
operator|.
name|extend
argument_list|()
argument_list|,
name|db
argument_list|)
return|;
block|}
finally|finally
block|{
if|if
condition|(
name|compiledQuery
operator|!=
literal|null
condition|)
name|pool
operator|.
name|returnCompiledXQuery
argument_list|(
name|source
argument_list|,
name|compiledQuery
argument_list|)
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
name|XPathException
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"query execution failed --  "
operator|+
name|query
operator|+
literal|"  -- "
operator|+
operator|(
name|params
operator|==
literal|null
condition|?
literal|""
else|:
literal|" with params "
operator|+
name|Arrays
operator|.
name|asList
argument_list|(
name|params
argument_list|)
operator|)
operator|+
operator|(
name|bindings
operator|.
name|isEmpty
argument_list|()
condition|?
literal|""
else|:
literal|" and bindings "
operator|+
name|bindings
operator|)
argument_list|)
expr_stmt|;
throw|throw
operator|new
name|DatabaseException
argument_list|(
literal|"failed to execute query"
argument_list|,
name|e
argument_list|)
throw|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|DatabaseException
argument_list|(
literal|"unexpected exception"
argument_list|,
name|e
argument_list|)
throw|;
block|}
finally|finally
block|{
name|db
operator|.
name|releaseBroker
argument_list|(
name|broker
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|SuppressWarnings
argument_list|(
literal|"unchecked"
argument_list|)
specifier|private
name|CompiledXQuery
name|wrap
parameter_list|(
name|CompiledXQuery
name|expr
parameter_list|,
name|WrapperFactory
name|wrapperFactory
parameter_list|,
name|XQueryContext
name|context
parameter_list|)
throws|throws
name|XPathException
block|{
if|if
condition|(
name|wrapperFactory
operator|==
literal|null
condition|)
return|return
name|expr
return|;
name|Function
name|wrapper
init|=
name|wrapperFactory
operator|.
name|createWrapper
argument_list|(
name|context
argument_list|)
decl_stmt|;
name|wrapper
operator|.
name|setArguments
argument_list|(
name|Collections
operator|.
name|singletonList
argument_list|(
name|expr
argument_list|)
argument_list|)
expr_stmt|;
name|wrapper
operator|.
name|setSource
argument_list|(
name|expr
operator|.
name|getSource
argument_list|()
argument_list|)
expr_stmt|;
return|return
name|wrapper
return|;
block|}
specifier|private
name|void
name|buildXQueryContext
parameter_list|(
name|XQueryContext
name|context
parameter_list|,
name|Object
index|[]
name|params
parameter_list|,
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|combinedNamespaceMap
parameter_list|)
throws|throws
name|XPathException
block|{
name|context
operator|.
name|declareNamespaces
argument_list|(
name|combinedNamespaceMap
argument_list|)
expr_stmt|;
name|context
operator|.
name|setBackwardsCompatibility
argument_list|(
literal|false
argument_list|)
expr_stmt|;
name|context
operator|.
name|setStaticallyKnownDocuments
argument_list|(
name|docs
argument_list|)
expr_stmt|;
name|context
operator|.
name|setBaseURI
argument_list|(
name|baseUri
operator|==
literal|null
condition|?
operator|new
name|AnyURIValue
argument_list|(
literal|"/db"
argument_list|)
else|:
name|baseUri
argument_list|)
expr_stmt|;
for|for
control|(
name|Map
operator|.
name|Entry
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|entry
range|:
name|bindings
operator|.
name|entrySet
argument_list|()
control|)
block|{
name|context
operator|.
name|declareVariable
argument_list|(
name|entry
operator|.
name|getKey
argument_list|()
argument_list|,
name|convertValue
argument_list|(
name|entry
operator|.
name|getValue
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|params
operator|!=
literal|null
condition|)
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|params
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
name|context
operator|.
name|declareVariable
argument_list|(
literal|"_"
operator|+
operator|(
name|i
operator|+
literal|1
operator|)
argument_list|,
name|convertValue
argument_list|(
name|params
index|[
name|i
index|]
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
comment|/** 	 * Convert the given object into a value appropriate for being defined as 	 * the value of a variable in an XQuery.  This will extract a sequence out 	 * of all database objects, convert collections and arrays into sequences 	 * recursively, convert<code>null</code> into an empty sequence, and 	 * pass other objects through untouched. 	 * Convertible objects that are defined in the JDK will be automatically 	 * converted by eXist. 	 * @see org.exist.xquery.XPathUtil#javaObjectToXPath(Object, XQueryContext, boolean) 	 * 	 * @param o the object to convert to a database value 	 * @return the converted value, ready for assignment to an XQuery variable 	 */
annotation|@
name|SuppressWarnings
argument_list|(
literal|"unchecked"
argument_list|)
specifier|private
name|Object
name|convertValue
parameter_list|(
name|Object
name|o
parameter_list|)
block|{
if|if
condition|(
name|o
operator|==
literal|null
condition|)
return|return
name|Collections
operator|.
name|emptyList
argument_list|()
return|;
if|if
condition|(
name|o
operator|instanceof
name|Resource
condition|)
block|{
try|try
block|{
return|return
operator|(
operator|(
name|Resource
operator|)
name|o
operator|)
operator|.
name|convertToSequence
argument_list|()
return|;
block|}
catch|catch
parameter_list|(
name|UnsupportedOperationException
name|e
parameter_list|)
block|{
return|return
name|o
return|;
block|}
block|}
name|List
argument_list|<
name|Object
argument_list|>
name|list
init|=
literal|null
decl_stmt|;
if|if
condition|(
name|o
operator|instanceof
name|Collection
condition|)
name|list
operator|=
operator|new
name|ArrayList
argument_list|<
name|Object
argument_list|>
argument_list|(
operator|(
name|Collection
operator|)
name|o
argument_list|)
expr_stmt|;
if|else if
condition|(
name|o
operator|instanceof
name|Object
index|[]
condition|)
name|list
operator|=
operator|new
name|ArrayList
argument_list|<
name|Object
argument_list|>
argument_list|(
name|Arrays
operator|.
name|asList
argument_list|(
operator|(
name|Object
index|[]
operator|)
name|o
argument_list|)
argument_list|)
expr_stmt|;
if|if
condition|(
name|list
operator|!=
literal|null
condition|)
block|{
for|for
control|(
name|ListIterator
argument_list|<
name|Object
argument_list|>
name|it
init|=
name|list
operator|.
name|listIterator
argument_list|()
init|;
name|it
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|it
operator|.
name|set
argument_list|(
name|convertValue
argument_list|(
name|it
operator|.
name|next
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
return|return
name|list
return|;
block|}
return|return
name|DataUtils
operator|.
name|toXMLObject
argument_list|(
name|o
argument_list|)
return|;
block|}
specifier|private
name|String
name|presub
parameter_list|(
name|String
name|query
parameter_list|,
name|Object
index|[]
name|params
parameter_list|)
block|{
if|if
condition|(
name|params
operator|==
literal|null
condition|)
return|return
name|query
return|;
name|StringBuffer
name|buf
init|=
operator|new
name|StringBuffer
argument_list|()
decl_stmt|;
name|Matcher
name|matcher
init|=
name|PRE_SUB_PATTERN
operator|.
name|matcher
argument_list|(
name|query
argument_list|)
decl_stmt|;
while|while
condition|(
name|matcher
operator|.
name|find
argument_list|()
condition|)
block|{
name|matcher
operator|.
name|appendReplacement
argument_list|(
name|buf
argument_list|,
operator|(
name|String
operator|)
name|params
index|[
name|Integer
operator|.
name|parseInt
argument_list|(
name|matcher
operator|.
name|group
argument_list|(
literal|1
argument_list|)
argument_list|)
operator|-
literal|1
index|]
argument_list|)
expr_stmt|;
block|}
name|matcher
operator|.
name|appendTail
argument_list|(
name|buf
argument_list|)
expr_stmt|;
return|return
name|buf
operator|.
name|toString
argument_list|()
return|;
block|}
comment|/** 	 * Get all items that match the given query in the context of this object, 	 * without regard for the order of the results.  This can sometimes make a query 	 * run faster. 	 * @param query the query to match 	 * @param params 	 * @return a collection of all items that match the query 	 */
specifier|public
name|ItemList
name|unordered
parameter_list|(
name|String
name|query
parameter_list|,
name|Object
modifier|...
name|params
parameter_list|)
block|{
comment|// TODO: put expression in unordered context once eXist supports it
comment|// TODO: verify that callers to 'all' could not use 'unordered'
comment|// return all("declare ordering unordered; " + query, params);
return|return
name|all
argument_list|(
name|query
argument_list|,
name|params
argument_list|)
return|;
block|}
specifier|private
specifier|static
specifier|final
name|WrapperFactory
name|EXACTLY_ONE
init|=
operator|new
name|WrapperFactory
argument_list|()
block|{
specifier|public
name|Function
name|createWrapper
parameter_list|(
name|XQueryContext
name|context
parameter_list|)
block|{
return|return
operator|new
name|FunExactlyOne
argument_list|(
name|context
argument_list|)
return|;
block|}
block|}
decl_stmt|;
comment|/** 	 * Get the one and only item that matches the given query in the context of 	 * this object. 	 * @param query the query to match 	 * @param params 	 * @return the unique item that matches the query 	 */
specifier|public
name|Item
name|single
parameter_list|(
name|String
name|query
parameter_list|,
name|Object
modifier|...
name|params
parameter_list|)
block|{
name|ItemList
name|result
init|=
name|executeQuery
argument_list|(
name|query
argument_list|,
name|EXACTLY_ONE
argument_list|,
name|params
argument_list|)
decl_stmt|;
assert|assert
name|result
operator|.
name|size
argument_list|()
operator|==
literal|1
operator|:
literal|"expected single result, got "
operator|+
name|result
operator|.
name|size
argument_list|()
assert|;
return|return
name|result
operator|.
name|get
argument_list|(
literal|0
argument_list|)
return|;
block|}
specifier|private
specifier|static
specifier|final
name|WrapperFactory
name|ZERO_OR_ONE
init|=
operator|new
name|WrapperFactory
argument_list|()
block|{
specifier|public
name|Function
name|createWrapper
parameter_list|(
name|XQueryContext
name|context
parameter_list|)
block|{
return|return
operator|new
name|FunZeroOrOne
argument_list|(
name|context
argument_list|)
return|;
block|}
block|}
decl_stmt|;
comment|/** 	 * Get no more than one item that matches the given query in the context 	 * of this object. 	 * @param query the query to match 	 * @param params 	 * @return the item that matches this query, or<code>Item.NULL</code> if none 	 */
specifier|public
name|Item
name|optional
parameter_list|(
name|String
name|query
parameter_list|,
name|Object
modifier|...
name|params
parameter_list|)
block|{
name|ItemList
name|result
init|=
name|executeQuery
argument_list|(
name|query
argument_list|,
name|ZERO_OR_ONE
argument_list|,
name|params
argument_list|)
decl_stmt|;
assert|assert
name|result
operator|.
name|size
argument_list|()
operator|<=
literal|1
operator|:
literal|"expected zero or one results, got "
operator|+
name|result
operator|.
name|size
argument_list|()
assert|;
return|return
name|result
operator|.
name|size
argument_list|()
operator|==
literal|0
condition|?
name|Item
operator|.
name|NULL
else|:
name|result
operator|.
name|get
argument_list|(
literal|0
argument_list|)
return|;
block|}
specifier|public
name|boolean
name|flag
parameter_list|(
name|String
name|query
parameter_list|,
name|boolean
name|defaultValue
parameter_list|)
block|{
name|Item
name|item
init|=
name|optional
argument_list|(
name|query
argument_list|)
decl_stmt|;
if|if
condition|(
name|item
operator|!=
name|Item
operator|.
name|NULL
condition|)
block|{
try|try
block|{
return|return
name|item
operator|.
name|booleanValue
argument_list|()
return|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|error
argument_list|(
literal|"illegal flag value '"
operator|+
name|item
operator|+
literal|"' found for query "
operator|+
name|query
operator|+
literal|"; using default '"
operator|+
name|defaultValue
operator|+
literal|"'"
argument_list|)
expr_stmt|;
block|}
block|}
return|return
name|defaultValue
return|;
block|}
specifier|private
specifier|static
specifier|final
name|WrapperFactory
name|EXISTS
init|=
operator|new
name|WrapperFactory
argument_list|()
block|{
specifier|public
name|Function
name|createWrapper
parameter_list|(
name|XQueryContext
name|context
parameter_list|)
block|{
return|return
operator|new
name|FunExists
argument_list|(
name|context
argument_list|)
return|;
block|}
block|}
decl_stmt|;
comment|/** 	 * Return whether at least one item matches the given query in the context 	 * of this object. 	 * @param query the query to match 	 * @param params 	 * @return<code>true</code> if at least one item matches,<code>false</code> otherwise 	 */
specifier|public
name|boolean
name|exists
parameter_list|(
name|String
name|query
parameter_list|,
name|Object
modifier|...
name|params
parameter_list|)
block|{
return|return
name|executeQuery
argument_list|(
name|query
argument_list|,
name|EXISTS
argument_list|,
name|params
argument_list|)
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|booleanValue
argument_list|()
return|;
block|}
specifier|private
specifier|static
specifier|final
name|Pattern
name|VAR_NOT_BOUND_PATTERN
init|=
name|Pattern
operator|.
name|compile
argument_list|(
literal|"^XPDY0002 : variable '*(\\$\\S+)' is not set\\..*"
argument_list|)
decl_stmt|;
comment|/** 	 * Statically analyze a query for various properties. 	 * 	 * @param query the query to analyze 	 * @param params parameters for the query; if necessary parameters are left out they will be listed as required variables in the analysis 	 * @return a query analysis facet 	 */
specifier|public
name|QueryAnalysis
name|analyze
parameter_list|(
name|String
name|query
parameter_list|,
name|Object
modifier|...
name|params
parameter_list|)
block|{
if|if
condition|(
name|presub
condition|)
name|query
operator|=
name|presub
argument_list|(
name|query
argument_list|,
name|params
argument_list|)
expr_stmt|;
name|Collection
argument_list|<
name|String
argument_list|>
name|requiredVariables
init|=
operator|new
name|ArrayList
argument_list|<
name|String
argument_list|>
argument_list|()
decl_stmt|;
name|DBBroker
name|broker
init|=
literal|null
decl_stmt|;
try|try
block|{
name|broker
operator|=
name|db
operator|.
name|acquireBroker
argument_list|()
expr_stmt|;
name|prepareContext
argument_list|(
name|broker
argument_list|)
expr_stmt|;
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|combinedMap
init|=
name|namespaceBindings
operator|.
name|getCombinedMap
argument_list|()
decl_stmt|;
name|org
operator|.
name|exist
operator|.
name|source
operator|.
name|Source
name|source
init|=
operator|new
name|NamespacedStringSource
argument_list|(
name|query
argument_list|,
name|combinedMap
argument_list|)
decl_stmt|;
name|XQuery
name|xquery
init|=
name|broker
operator|.
name|getXQueryService
argument_list|()
decl_stmt|;
name|XQueryContext
name|context
init|=
name|xquery
operator|.
name|newContext
argument_list|(
name|AccessContext
operator|.
name|INTERNAL_PREFIX_LOOKUP
argument_list|)
decl_stmt|;
name|buildXQueryContext
argument_list|(
name|context
argument_list|,
name|params
argument_list|,
name|combinedMap
argument_list|)
expr_stmt|;
while|while
condition|(
literal|true
condition|)
block|{
try|try
block|{
return|return
operator|new
name|QueryAnalysis
argument_list|(
name|xquery
operator|.
name|compile
argument_list|(
name|context
argument_list|,
name|source
argument_list|)
argument_list|,
name|Collections
operator|.
name|unmodifiableCollection
argument_list|(
name|requiredVariables
argument_list|)
argument_list|)
return|;
block|}
catch|catch
parameter_list|(
name|XPathException
name|e
parameter_list|)
block|{
name|Matcher
name|matcher
init|=
name|VAR_NOT_BOUND_PATTERN
operator|.
name|matcher
argument_list|(
name|e
operator|.
name|getMessage
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|matcher
operator|.
name|matches
argument_list|()
condition|)
throw|throw
name|e
throw|;
name|String
name|varName
init|=
name|matcher
operator|.
name|group
argument_list|(
literal|1
argument_list|)
decl_stmt|;
name|context
operator|.
name|declareVariable
argument_list|(
name|varName
operator|.
name|substring
argument_list|(
literal|1
argument_list|)
argument_list|,
literal|null
argument_list|)
expr_stmt|;
name|requiredVariables
operator|.
name|add
argument_list|(
name|varName
argument_list|)
expr_stmt|;
block|}
block|}
block|}
catch|catch
parameter_list|(
name|XPathException
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|warn
argument_list|(
literal|"query compilation failed --  "
operator|+
name|query
operator|+
literal|"  -- "
operator|+
operator|(
name|params
operator|==
literal|null
condition|?
literal|""
else|:
literal|" with params "
operator|+
name|Arrays
operator|.
name|asList
argument_list|(
name|params
argument_list|)
operator|)
operator|+
operator|(
name|bindings
operator|.
name|isEmpty
argument_list|()
condition|?
literal|""
else|:
literal|" and bindings "
operator|+
name|bindings
operator|)
argument_list|)
expr_stmt|;
throw|throw
operator|new
name|DatabaseException
argument_list|(
literal|"failed to compile query"
argument_list|,
name|e
argument_list|)
throw|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|DatabaseException
argument_list|(
literal|"unexpected exception"
argument_list|,
name|e
argument_list|)
throw|;
block|}
finally|finally
block|{
name|db
operator|.
name|releaseBroker
argument_list|(
name|broker
argument_list|)
expr_stmt|;
block|}
block|}
comment|/** 	 * An access point for running various analyses on a query. 	 */
specifier|public
specifier|static
class|class
name|QueryAnalysis
block|{
specifier|private
specifier|final
name|CompiledXQuery
name|query
decl_stmt|;
specifier|private
specifier|final
name|Collection
argument_list|<
name|String
argument_list|>
name|requiredVariables
decl_stmt|;
specifier|private
name|QueryAnalysis
parameter_list|(
name|CompiledXQuery
name|query
parameter_list|,
name|Collection
argument_list|<
name|String
argument_list|>
name|requiredVariables
parameter_list|)
block|{
name|this
operator|.
name|query
operator|=
name|query
expr_stmt|;
name|this
operator|.
name|requiredVariables
operator|=
name|requiredVariables
expr_stmt|;
block|}
comment|/** 		 * Return the name of the statically determined return type of the query expression. 		 * The name is in a standard form, see {@link org.exist.xquery.value.Type} for a list 		 * of possible values.  If the return type cannot be statically determined, it defaults to 		 *<code>Type.ITEM</code>, the universal supertype in XQuery. 		 * 		 * @return the name of the return type of the query being analyzed 		 */
specifier|public
name|String
name|returnTypeName
parameter_list|()
block|{
return|return
name|org
operator|.
name|exist
operator|.
name|xquery
operator|.
name|value
operator|.
name|Type
operator|.
name|getTypeName
argument_list|(
name|query
operator|instanceof
name|Expression
condition|?
operator|(
operator|(
name|PathExpr
operator|)
name|query
operator|)
operator|.
name|returnsType
argument_list|()
else|:
name|org
operator|.
name|exist
operator|.
name|xquery
operator|.
name|value
operator|.
name|Type
operator|.
name|ITEM
argument_list|)
return|;
block|}
comment|/** 		 * The enumeration of recognized cardinalities for parameter and return types. 		 */
specifier|public
specifier|static
enum|enum
name|Cardinality
block|{
name|ZERO
block|,
name|ZERO_OR_ONE
block|,
name|ONE
block|,
name|ZERO_OR_MORE
block|,
name|ONE_OR_MORE
block|}
comment|/** 		 * Return the statically determined cardinality of the return type of the query expression. 		 * If the cardinality cannot be statically determined, it defaults to<code>ZERO_OR_MORE</code>, 		 * the least restrictive cardinality. 		 * 		 * @return the cardinality of the return type of the query being analyzed 		 */
specifier|public
name|Cardinality
name|cardinality
parameter_list|()
block|{
if|if
condition|(
name|query
operator|instanceof
name|Expression
condition|)
block|{
name|int
name|cardinality
init|=
operator|(
operator|(
name|Expression
operator|)
name|query
operator|)
operator|.
name|getCardinality
argument_list|()
decl_stmt|;
switch|switch
condition|(
name|cardinality
condition|)
block|{
case|case
name|org
operator|.
name|exist
operator|.
name|xquery
operator|.
name|Cardinality
operator|.
name|EMPTY
case|:
return|return
name|Cardinality
operator|.
name|ZERO
return|;
case|case
name|org
operator|.
name|exist
operator|.
name|xquery
operator|.
name|Cardinality
operator|.
name|EXACTLY_ONE
case|:
return|return
name|Cardinality
operator|.
name|ONE
return|;
case|case
name|org
operator|.
name|exist
operator|.
name|xquery
operator|.
name|Cardinality
operator|.
name|ZERO_OR_ONE
case|:
return|return
name|Cardinality
operator|.
name|ZERO_OR_ONE
return|;
case|case
name|org
operator|.
name|exist
operator|.
name|xquery
operator|.
name|Cardinality
operator|.
name|ZERO_OR_MORE
case|:
return|return
name|Cardinality
operator|.
name|ZERO_OR_MORE
return|;
case|case
name|org
operator|.
name|exist
operator|.
name|xquery
operator|.
name|Cardinality
operator|.
name|ONE_OR_MORE
case|:
return|return
name|Cardinality
operator|.
name|ONE_OR_MORE
return|;
default|default:
name|LOG
operator|.
name|error
argument_list|(
literal|"unexpected eXist cardinality flag "
operator|+
name|cardinality
argument_list|)
expr_stmt|;
block|}
block|}
return|return
name|Cardinality
operator|.
name|ZERO_OR_MORE
return|;
block|}
comment|/** 		 * Return a list of variables that are required to be defined by this query, excluding any 		 * positional variables that were provided to the {@link QueryService#analyze(String, Object[]) analyze} 		 * method.  The variable names will include the leading '$'. 		 *  		 * @return a list of variables required by this query 		 */
specifier|public
name|Collection
argument_list|<
name|String
argument_list|>
name|requiredVariables
parameter_list|()
block|{
return|return
name|requiredVariables
return|;
block|}
block|}
block|}
end_class

end_unit

