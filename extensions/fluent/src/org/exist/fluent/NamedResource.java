begin_unit|revision:1.0.0;language:Java;cregit-version:0.0.1
begin_package
package|package
name|org
operator|.
name|exist
operator|.
name|fluent
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|*
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|regex
operator|.
name|*
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|security
operator|.
name|Permission
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|security
operator|.
name|PermissionDeniedException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|storage
operator|.
name|DBBroker
import|;
end_import

begin_comment
comment|/**  * A named resource in the contents tree of the database:  either a folder or a document.  *  * @author<a href="mailto:piotr@ideanest.com">Piotr Kaminski</a>  */
end_comment

begin_class
specifier|public
specifier|abstract
class|class
name|NamedResource
extends|extends
name|Resource
block|{
comment|/** 	 * The metadata facet of a named resource.  Allows access to and manipulation of various aspects 	 * of a resource's metadata, including its permissions and various timestamps. 	 * NOTE:  The permissions part of the interface is at a bare minimum right now, until I gather 	 * more use cases and flesh it out. 	 */
specifier|public
specifier|static
specifier|abstract
class|class
name|MetadataFacet
block|{
specifier|private
specifier|static
specifier|final
name|Pattern
name|INSTRUCTIONS_REGEX
init|=
name|Pattern
operator|.
name|compile
argument_list|(
literal|"(a|(u?g?o?){1,3})((=r?w?u?)|([-+](r?w?u?){1,3}))(,(a|(u?g?o?){1,3})((=r?w?u?)|([-+](r?w?u?){1,3})))*"
argument_list|)
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|Pattern
name|SEGMENT_REGEX
init|=
name|Pattern
operator|.
name|compile
argument_list|(
literal|"([augo]+)([-+=])([rwu]*)"
argument_list|)
decl_stmt|;
specifier|private
name|Permission
name|permissions
decl_stmt|;
specifier|private
specifier|final
name|Database
name|db
decl_stmt|;
specifier|protected
name|MetadataFacet
parameter_list|(
name|Permission
name|permissions
parameter_list|,
name|Database
name|db
parameter_list|)
block|{
name|this
operator|.
name|permissions
operator|=
name|permissions
expr_stmt|;
name|this
operator|.
name|db
operator|=
name|db
expr_stmt|;
block|}
comment|/** 		 * Return the time at which this resource was originally created. 		 * 		 * @return the creation date of this resource 		 */
specifier|public
specifier|abstract
name|Date
name|creationDate
parameter_list|()
function_decl|;
comment|/** 		 * Return the user who owns this resource for purposes of permission management. 		 *  		 * @return the owner of this resource 		 */
specifier|public
name|String
name|owner
parameter_list|()
block|{
return|return
name|permissions
operator|.
name|getOwner
argument_list|()
operator|.
name|getName
argument_list|()
return|;
block|}
comment|/** 		 * Set the owner of this resource for purposes of permission management. 		 * 		 * @param owner the new owner of this resource 		 */
specifier|public
name|void
name|owner
parameter_list|(
name|String
name|owner
parameter_list|)
block|{
name|DBBroker
name|broker
init|=
literal|null
decl_stmt|;
try|try
block|{
name|broker
operator|=
name|db
operator|.
name|acquireBroker
argument_list|()
expr_stmt|;
name|permissions
operator|.
name|setOwner
argument_list|(
name|owner
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|PermissionDeniedException
name|pde
parameter_list|)
block|{
throw|throw
operator|new
name|DatabaseException
argument_list|(
name|pde
operator|.
name|getMessage
argument_list|()
argument_list|,
name|pde
argument_list|)
throw|;
block|}
finally|finally
block|{
if|if
condition|(
name|broker
operator|!=
literal|null
condition|)
block|{
name|db
operator|.
name|releaseBroker
argument_list|(
name|broker
argument_list|)
expr_stmt|;
block|}
block|}
block|}
comment|/** 		 * Return the group who has privileged access to this resource for purposes of permission management. 		 *  		 * @return the owning group of this resource 		 */
specifier|public
name|String
name|group
parameter_list|()
block|{
return|return
name|permissions
operator|.
name|getGroup
argument_list|()
operator|.
name|getName
argument_list|()
return|;
block|}
comment|/** 		 * Set the group that will have privileged access to this resource for purposes of permission management. 		 * 		 * @param group the new owning group of this resource 		 */
specifier|public
name|void
name|group
parameter_list|(
name|String
name|group
parameter_list|)
block|{
name|DBBroker
name|broker
init|=
literal|null
decl_stmt|;
try|try
block|{
name|broker
operator|=
name|db
operator|.
name|acquireBroker
argument_list|()
expr_stmt|;
name|permissions
operator|.
name|setGroup
argument_list|(
name|group
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|PermissionDeniedException
name|pde
parameter_list|)
block|{
throw|throw
operator|new
name|DatabaseException
argument_list|(
name|pde
operator|.
name|getMessage
argument_list|()
argument_list|,
name|pde
argument_list|)
throw|;
block|}
finally|finally
block|{
if|if
condition|(
name|broker
operator|!=
literal|null
condition|)
block|{
name|db
operator|.
name|releaseBroker
argument_list|(
name|broker
argument_list|)
expr_stmt|;
block|}
block|}
block|}
comment|/** 		 * Return whether the given subject has the given permission.  The "who" character refers to 		 * subjects as follows:<ul> 		 *<li>'u' stands for "user", the owner of the resource</li> 		 *<li>'g' stands for "group", the owning group of the resource</li> 		 *<li>'o' stands for "other", all users</li> 		 *<li>'a' stands for "all", a shortcut that refers to all 3 subjects above simultaneously</li></ul> 		 * The "what" character refers to the permissions to check:<ul> 		 *<li>'r' stands for read access</li> 		 *<li>'w' stands for write access</li> 		 *<li>'u' stands for update rights</li></ul> 		 *  		 * @param who the subject to check for permission 		 * @param what the access right to check for 		 * @return<code>true</code> if the given subject has the given permission,<code>false</code> otherwise 		 */
specifier|public
name|boolean
name|hasPermission
parameter_list|(
name|char
name|who
parameter_list|,
name|char
name|what
parameter_list|)
block|{
name|int
name|mask
init|=
name|convertPermissionBit
argument_list|(
name|what
argument_list|)
decl_stmt|;
switch|switch
condition|(
name|who
condition|)
block|{
case|case
name|Permission
operator|.
name|ALL_CHAR
case|:
name|mask
operator|=
name|mask
operator||
operator|(
name|mask
operator|<<
literal|3
operator|)
operator||
operator|(
name|mask
operator|<<
literal|6
operator|)
expr_stmt|;
case|case
name|Permission
operator|.
name|USER_CHAR
case|:
name|mask
operator|<<=
literal|6
expr_stmt|;
break|break;
case|case
name|Permission
operator|.
name|GROUP_CHAR
case|:
name|mask
operator|<<=
literal|3
expr_stmt|;
break|break;
case|case
name|Permission
operator|.
name|OTHER_CHAR
case|:
break|break;
default|default:
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"illegal permission \"who\" code '"
operator|+
name|who
operator|+
literal|"'"
argument_list|)
throw|;
block|}
return|return
operator|(
name|permissions
operator|.
name|getMode
argument_list|()
operator|&
name|mask
operator|)
operator|==
name|mask
return|;
block|}
specifier|private
name|int
name|convertPermissionBit
parameter_list|(
name|char
name|what
parameter_list|)
block|{
switch|switch
condition|(
name|what
condition|)
block|{
case|case
name|Permission
operator|.
name|READ_CHAR
case|:
return|return
name|Permission
operator|.
name|READ
return|;
case|case
name|Permission
operator|.
name|WRITE_CHAR
case|:
return|return
name|Permission
operator|.
name|WRITE
return|;
case|case
name|Permission
operator|.
name|EXECUTE_CHAR
case|:
return|return
name|Permission
operator|.
name|EXECUTE
return|;
default|default:
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"illegal permission \"what\" code '"
operator|+
name|what
operator|+
literal|"'"
argument_list|)
throw|;
block|}
block|}
specifier|private
name|int
name|convertPermissionBits
parameter_list|(
name|String
name|what
parameter_list|)
block|{
name|int
name|perms
init|=
literal|0
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|what
operator|.
name|length
argument_list|()
condition|;
name|i
operator|++
control|)
name|perms
operator||=
name|convertPermissionBit
argument_list|(
name|what
operator|.
name|charAt
argument_list|(
name|i
argument_list|)
argument_list|)
expr_stmt|;
return|return
name|perms
return|;
block|}
comment|/** 		 * Change the permissions of the underlying resource.  The format of the instructions is based upon 		 * that of the Unix chmod command:  one or more letters representing the subject to modify, followed 		 * by an operation sign, followed by zero or more letters representing the permissions to modify.  The 		 * subject and permission letters are the ones listed for {@link #hasPermission(char, char)}, except that 		 * the 'a' subject cannot be mixed with any of the other ones.  If multiple subjects or permissions are 		 * listed, they must be listed in the canonical order shown.  The operation signs are:<ul> 		 *<li>= to overwrite the permissions for the given subjects; if no permission letters follow the equals 		 *   sign, rescind all permissions for the given subjects</li> 		 *<li>+ to grant additional permissions for the given subjects; at least one permission letter must be 		 *   specified, and the given permissions will be added to any the subjects already possess</li> 		 *<li>- to rescind permissions from the given subjects; at least one permission letter must be specified, 		 *   and the given permissions will be rescinded from the given subjects, without affecting any other 		 *   permissions previously granted</li></ul> 		 * You can combine multiple such subjects/operation/permissions segments by separating them with 		 * commas (no spaces); they will be processed in the given order, so late segments can override the 		 * effects of earlier ones.  Some examples:<ul> 		 *<li><tt>u-w</tt> rescinds the write permission from the owner, write-protecting the resource</li> 		 *<li><tt>ug+rw,o=</tt> grants read and write permissions to the owner and group, leaves the owner's 		 *   and group's update permission set to its previous value, and rescinds all permissions from everybody else</li> 		 *<li><tt>a=r,u+w</tt> sets everyone to have only read permission, then grants write permission to just the 		 *   owner</li></ul> 		 *  		 * @param instructions an instruction string encoding the desired changes to the permissions 		 */
specifier|public
name|void
name|changePermissions
parameter_list|(
name|String
name|instructions
parameter_list|)
block|{
if|if
condition|(
operator|!
name|INSTRUCTIONS_REGEX
operator|.
name|matcher
argument_list|(
name|instructions
argument_list|)
operator|.
name|matches
argument_list|()
condition|)
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"bad permissions instructions: "
operator|+
name|instructions
argument_list|)
throw|;
name|StringTokenizer
name|tokenizer
init|=
operator|new
name|StringTokenizer
argument_list|(
name|instructions
argument_list|,
literal|","
argument_list|)
decl_stmt|;
try|try
block|{
while|while
condition|(
name|tokenizer
operator|.
name|hasMoreTokens
argument_list|()
condition|)
block|{
name|Matcher
name|matcher
init|=
name|SEGMENT_REGEX
operator|.
name|matcher
argument_list|(
name|tokenizer
operator|.
name|nextToken
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|matcher
operator|.
name|matches
argument_list|()
condition|)
throw|throw
operator|new
name|RuntimeException
argument_list|(
literal|"internal error: illegal segment got through syntax regex, instruction string "
operator|+
name|instructions
argument_list|)
throw|;
name|int
name|perms
init|=
name|convertPermissionBits
argument_list|(
name|matcher
operator|.
name|group
argument_list|(
literal|3
argument_list|)
argument_list|)
decl_stmt|;
name|int
name|mask
init|=
literal|0
decl_stmt|;
name|boolean
name|all
init|=
name|matcher
operator|.
name|group
argument_list|(
literal|1
argument_list|)
operator|.
name|equals
argument_list|(
literal|"a"
argument_list|)
decl_stmt|;
if|if
condition|(
name|all
operator|||
name|matcher
operator|.
name|group
argument_list|(
literal|1
argument_list|)
operator|.
name|indexOf
argument_list|(
literal|'u'
argument_list|)
operator|!=
operator|-
literal|1
condition|)
name|mask
operator||=
name|perms
operator|<<
literal|6
expr_stmt|;
if|if
condition|(
name|all
operator|||
name|matcher
operator|.
name|group
argument_list|(
literal|1
argument_list|)
operator|.
name|indexOf
argument_list|(
literal|'g'
argument_list|)
operator|!=
operator|-
literal|1
condition|)
name|mask
operator||=
name|perms
operator|<<
literal|3
expr_stmt|;
if|if
condition|(
name|all
operator|||
name|matcher
operator|.
name|group
argument_list|(
literal|1
argument_list|)
operator|.
name|indexOf
argument_list|(
literal|'o'
argument_list|)
operator|!=
operator|-
literal|1
condition|)
name|mask
operator||=
name|perms
expr_stmt|;
name|int
name|newPerms
decl_stmt|;
switch|switch
condition|(
name|matcher
operator|.
name|group
argument_list|(
literal|2
argument_list|)
operator|.
name|charAt
argument_list|(
literal|0
argument_list|)
condition|)
block|{
case|case
literal|'='
case|:
name|newPerms
operator|=
name|mask
expr_stmt|;
break|break;
case|case
literal|'+'
case|:
name|newPerms
operator|=
name|permissions
operator|.
name|getMode
argument_list|()
operator||
name|mask
expr_stmt|;
case|case
literal|'-'
case|:
name|newPerms
operator|=
name|permissions
operator|.
name|getMode
argument_list|()
operator|&
operator|~
name|mask
expr_stmt|;
default|default:
throw|throw
operator|new
name|RuntimeException
argument_list|(
literal|"internal error: illegal segment operator got through syntax regex, instruction string "
operator|+
name|instructions
argument_list|)
throw|;
block|}
name|permissions
operator|.
name|setMode
argument_list|(
name|newPerms
argument_list|)
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
name|PermissionDeniedException
name|pde
parameter_list|)
block|{
throw|throw
operator|new
name|DatabaseException
argument_list|(
name|pde
operator|.
name|getMessage
argument_list|()
argument_list|,
name|pde
argument_list|)
throw|;
block|}
block|}
specifier|public
name|String
name|toString
parameter_list|()
block|{
name|StringBuilder
name|buf
init|=
operator|new
name|StringBuilder
argument_list|()
decl_stmt|;
if|if
condition|(
name|permissions
operator|.
name|getOwnerMode
argument_list|()
operator|==
name|permissions
operator|.
name|getGroupMode
argument_list|()
operator|&&
name|permissions
operator|.
name|getOwnerMode
argument_list|()
operator|==
name|permissions
operator|.
name|getOtherMode
argument_list|()
condition|)
block|{
name|appendPermissions
argument_list|(
literal|'a'
argument_list|,
literal|'u'
argument_list|,
name|buf
argument_list|)
expr_stmt|;
name|buf
operator|.
name|append
argument_list|(
literal|' '
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|appendPermissions
argument_list|(
literal|'u'
argument_list|,
literal|'u'
argument_list|,
name|buf
argument_list|)
expr_stmt|;
name|buf
operator|.
name|append
argument_list|(
literal|','
argument_list|)
expr_stmt|;
name|appendPermissions
argument_list|(
literal|'g'
argument_list|,
literal|'g'
argument_list|,
name|buf
argument_list|)
expr_stmt|;
name|buf
operator|.
name|append
argument_list|(
literal|','
argument_list|)
expr_stmt|;
name|appendPermissions
argument_list|(
literal|'o'
argument_list|,
literal|'o'
argument_list|,
name|buf
argument_list|)
expr_stmt|;
name|buf
operator|.
name|append
argument_list|(
literal|' '
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|owner
argument_list|()
operator|!=
literal|null
condition|)
name|buf
operator|.
name|append
argument_list|(
literal|"u:"
argument_list|)
operator|.
name|append
argument_list|(
name|owner
argument_list|()
argument_list|)
operator|.
name|append
argument_list|(
literal|' '
argument_list|)
expr_stmt|;
if|if
condition|(
name|group
argument_list|()
operator|!=
literal|null
condition|)
name|buf
operator|.
name|append
argument_list|(
literal|"g:"
argument_list|)
operator|.
name|append
argument_list|(
name|group
argument_list|()
argument_list|)
operator|.
name|append
argument_list|(
literal|' '
argument_list|)
expr_stmt|;
name|buf
operator|.
name|append
argument_list|(
name|creationDate
argument_list|()
argument_list|)
expr_stmt|;
return|return
name|buf
operator|.
name|toString
argument_list|()
return|;
block|}
specifier|private
name|void
name|appendPermissions
parameter_list|(
name|char
name|prefix
parameter_list|,
name|char
name|who
parameter_list|,
name|StringBuilder
name|buf
parameter_list|)
block|{
name|buf
operator|.
name|append
argument_list|(
name|prefix
argument_list|)
operator|.
name|append
argument_list|(
literal|'='
argument_list|)
expr_stmt|;
if|if
condition|(
name|hasPermission
argument_list|(
name|who
argument_list|,
literal|'r'
argument_list|)
condition|)
name|buf
operator|.
name|append
argument_list|(
literal|'r'
argument_list|)
expr_stmt|;
if|if
condition|(
name|hasPermission
argument_list|(
name|who
argument_list|,
literal|'w'
argument_list|)
condition|)
name|buf
operator|.
name|append
argument_list|(
literal|'w'
argument_list|)
expr_stmt|;
if|if
condition|(
name|hasPermission
argument_list|(
name|who
argument_list|,
literal|'u'
argument_list|)
condition|)
name|buf
operator|.
name|append
argument_list|(
literal|'u'
argument_list|)
expr_stmt|;
block|}
block|}
specifier|protected
name|NamedResource
parameter_list|(
name|NamespaceMap
name|namespaceBindings
parameter_list|,
name|Database
name|db
parameter_list|)
block|{
name|super
argument_list|(
name|namespaceBindings
argument_list|,
name|db
argument_list|)
expr_stmt|;
block|}
comment|/** 	 * Return the local name of this resource.  This name will never contain slashes. 	 * 	 * @return the local name of this resource 	 */
specifier|public
specifier|abstract
name|String
name|name
parameter_list|()
function_decl|;
comment|/** 	 * Return the absolute path of this resource.  This is the path of its parent folder 	 * plus its local name. 	 * 	 * @return the absolute path of this resource 	 */
specifier|public
specifier|abstract
name|String
name|path
parameter_list|()
function_decl|;
comment|/** 	 * Copy this resource to another location, potentially changing the copy's name in 	 * the process. 	 * 	 * @param destination the destination folder for the copy 	 * @param name the desired name for the copy 	 * @return the new copy of the resource 	 */
specifier|public
specifier|abstract
name|NamedResource
name|copy
parameter_list|(
name|Folder
name|destination
parameter_list|,
name|Name
name|name
parameter_list|)
function_decl|;
comment|/** 	 * Move this resource to another collection, potentially changing its name in the process. 	 * This object will refer to the resource in its new location after this method returns. 	 * 	 * @param destination the destination folder for the move 	 * @param name the desired name for the moved resource 	 */
specifier|public
specifier|abstract
name|void
name|move
parameter_list|(
name|Folder
name|destination
parameter_list|,
name|Name
name|name
parameter_list|)
function_decl|;
comment|/** 	 * Delete this resource from the database. 	 */
specifier|public
specifier|abstract
name|void
name|delete
parameter_list|()
function_decl|;
comment|/** 	 * Return the metadata facet for this resource, which lets you read and manipulate 	 * metadata such as ownership, access permissions, and creation/modification timestamps. 	 * 	 * @return the metadata facet for this resource 	 */
specifier|public
specifier|abstract
name|MetadataFacet
name|metadata
parameter_list|()
function_decl|;
block|}
end_class

end_unit

