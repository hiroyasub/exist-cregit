begin_unit|revision:1.0.0;language:Java;cregit-version:0.0.1
begin_package
package|package
name|org
operator|.
name|exist
operator|.
name|gate
operator|.
name|desktop
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|File
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_class
specifier|public
specifier|abstract
class|class
name|Desktop
block|{
name|Desktop
parameter_list|()
block|{
block|}
specifier|public
specifier|static
name|Desktop
name|getDesktop
parameter_list|()
block|{
name|String
name|os
init|=
name|System
operator|.
name|getProperty
argument_list|(
literal|"os.name"
argument_list|)
operator|.
name|toLowerCase
argument_list|()
decl_stmt|;
name|Desktop
name|desktop
decl_stmt|;
if|if
condition|(
name|os
operator|.
name|indexOf
argument_list|(
literal|"windows"
argument_list|)
operator|!=
operator|-
literal|1
operator|||
name|os
operator|.
name|indexOf
argument_list|(
literal|"nt"
argument_list|)
operator|!=
operator|-
literal|1
condition|)
block|{
name|desktop
operator|=
operator|new
name|WindowsDesktop
argument_list|()
expr_stmt|;
block|}
if|else if
condition|(
name|os
operator|.
name|indexOf
argument_list|(
literal|"mac"
argument_list|)
operator|!=
operator|-
literal|1
condition|)
block|{
name|desktop
operator|=
operator|new
name|OSXDesktop
argument_list|()
expr_stmt|;
block|}
else|else
name|desktop
operator|=
operator|new
name|XDesktop
argument_list|()
expr_stmt|;
return|return
name|desktop
return|;
block|}
specifier|protected
specifier|abstract
name|String
name|openFileCmd
parameter_list|()
function_decl|;
specifier|public
name|void
name|open
parameter_list|(
name|File
name|file
parameter_list|)
throws|throws
name|IOException
block|{
name|String
name|cmd
init|=
name|String
operator|.
name|format
argument_list|(
name|openFileCmd
argument_list|()
operator|+
literal|" %s"
argument_list|,
name|file
operator|.
name|getAbsolutePath
argument_list|()
argument_list|)
decl_stmt|;
name|Runtime
operator|.
name|getRuntime
argument_list|()
operator|.
name|exec
argument_list|(
name|cmd
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

