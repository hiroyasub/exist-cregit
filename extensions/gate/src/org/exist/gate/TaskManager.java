begin_unit|revision:1.0.0;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  *  eXist's  Gate extension - REST client for automate document management  *  form any browser in any desktop application on any client platform  *  Copyright (C) 2010,  Evgeny V. Gazdovsky (gazdovsky@gmail.com)  *  *  This library is free software; you can redistribute it and/or  *  modify it under the terms of the GNU Library General Public License  *  as published by the Free Software Foundation; either version 2  *  of the License, or (at your option) any later version.  *  *  This library is distributed in the hope that it will be useful,  *  but WITHOUT ANY WARRANTY; without even the implied warranty of  *  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the  *  GNU Library General Public License for more details.  *  *  You should have received a copy of the GNU Library General Public License  *  along with this program; if not, write to the Free Software  *  Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA  02111-1307, USA.  */
end_comment

begin_package
package|package
name|org
operator|.
name|exist
operator|.
name|gate
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|TimerTask
import|;
end_import

begin_class
specifier|public
class|class
name|TaskManager
extends|extends
name|TimerTask
block|{
name|List
argument_list|<
name|Task
argument_list|>
name|tasks
init|=
operator|new
name|ArrayList
argument_list|<
name|Task
argument_list|>
argument_list|()
decl_stmt|;
name|boolean
name|haveNewTask
init|=
literal|false
decl_stmt|;
specifier|public
name|void
name|addTask
parameter_list|(
name|Task
name|task
parameter_list|)
block|{
name|tasks
operator|.
name|add
argument_list|(
name|task
argument_list|)
expr_stmt|;
name|haveNewTask
operator|=
literal|true
expr_stmt|;
block|}
specifier|public
name|void
name|run
parameter_list|()
block|{
if|if
condition|(
name|haveNewTask
condition|)
block|{
name|haveNewTask
operator|=
literal|false
expr_stmt|;
name|tasks
operator|.
name|get
argument_list|(
name|tasks
operator|.
name|size
argument_list|()
operator|-
literal|1
argument_list|)
operator|.
name|execute
argument_list|()
expr_stmt|;
block|}
block|}
block|}
end_class

end_unit

