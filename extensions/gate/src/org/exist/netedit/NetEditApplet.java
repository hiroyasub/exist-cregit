begin_unit|revision:1.0.0;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  *  eXist Open Source Native XML Database  *  Copyright (C) 2010 The eXist Project  *  http://exist-db.org  *  *  This program is free software; you can redistribute it and/or  *  modify it under the terms of the GNU Lesser General Public License  *  as published by the Free Software Foundation; either version 2  *  of the License, or (at your option) any later version.  *  *  This program is distributed in the hope that it will be useful,  *  but WITHOUT ANY WARRANTY; without even the implied warranty of  *  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the  *  GNU Lesser General Public License for more details.  *  *  You should have received a copy of the GNU Lesser General Public  *  License along with this library; if not, write to the Free Software  *  Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA  02110-1301  USA  *  *  $Id$  */
end_comment

begin_package
package|package
name|org
operator|.
name|exist
operator|.
name|netedit
package|;
end_package

begin_import
import|import
name|java
operator|.
name|applet
operator|.
name|Applet
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|File
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|FileInputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|FileOutputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|InputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|OutputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Timer
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|httpclient
operator|.
name|HttpClient
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|httpclient
operator|.
name|HttpException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|httpclient
operator|.
name|HttpMethodBase
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|httpclient
operator|.
name|ProxyHost
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|httpclient
operator|.
name|methods
operator|.
name|GetMethod
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|httpclient
operator|.
name|methods
operator|.
name|InputStreamRequestEntity
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|httpclient
operator|.
name|methods
operator|.
name|PutMethod
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|httpclient
operator|.
name|methods
operator|.
name|RequestEntity
import|;
end_import

begin_comment
comment|/**  * Applet is make possible to edit documents,  * stored in the eXist directly in desktop applications   * via REST.  * @author Evgeny Gazdovsky (gazdovsky@gmail.com)  */
end_comment

begin_class
specifier|public
class|class
name|NetEditApplet
extends|extends
name|Applet
block|{
specifier|private
specifier|static
specifier|final
name|long
name|serialVersionUID
init|=
operator|-
literal|8952536002584984227L
decl_stmt|;
specifier|private
name|HttpClient
name|http
init|=
operator|new
name|HttpClient
argument_list|()
decl_stmt|;
comment|// Since we use applet's methods from unsigned javascript,
comment|// we must have a trusted thread for operations in local file system
specifier|private
name|TaskManager
name|manager
init|=
operator|new
name|TaskManager
argument_list|(
name|this
argument_list|)
decl_stmt|;
specifier|private
name|String
name|sessionid
decl_stmt|;
specifier|private
name|String
name|opencmd
decl_stmt|;
specifier|private
name|File
name|user
decl_stmt|;
comment|// user home folder
specifier|private
name|File
name|exist
decl_stmt|;
comment|// eXist's folder
specifier|private
name|File
name|etc
decl_stmt|;
comment|// Gate's folder
specifier|private
name|File
name|meta
decl_stmt|;
comment|// Task's meta storage folder
specifier|private
name|File
name|cache
decl_stmt|;
comment|// Cache folder
specifier|public
specifier|final
specifier|static
name|long
name|PERIOD
init|=
literal|1000
decl_stmt|;
comment|// Default period/delay for different operations
specifier|public
name|void
name|init
parameter_list|()
block|{
name|sessionid
operator|=
name|getParameter
argument_list|(
literal|"sessionid"
argument_list|)
expr_stmt|;
name|user
operator|=
operator|new
name|File
argument_list|(
name|System
operator|.
name|getProperty
argument_list|(
literal|"user.home"
argument_list|)
argument_list|)
expr_stmt|;
name|exist
operator|=
operator|new
name|File
argument_list|(
name|user
argument_list|,
literal|".eXist"
argument_list|)
expr_stmt|;
name|etc
operator|=
operator|new
name|File
argument_list|(
name|exist
argument_list|,
literal|"gate"
argument_list|)
expr_stmt|;
name|String
name|host
init|=
name|getParameter
argument_list|(
literal|"host"
argument_list|)
decl_stmt|;
if|if
condition|(
name|host
operator|!=
literal|null
condition|)
block|{
name|etc
operator|=
operator|new
name|File
argument_list|(
name|etc
argument_list|,
name|host
argument_list|)
expr_stmt|;
block|}
name|meta
operator|=
operator|new
name|File
argument_list|(
name|etc
argument_list|,
literal|"meta"
argument_list|)
expr_stmt|;
name|cache
operator|=
operator|new
name|File
argument_list|(
name|etc
argument_list|,
literal|"cache"
argument_list|)
expr_stmt|;
comment|// Setup HTTP proxy
name|String
name|proxyHost
init|=
name|System
operator|.
name|getProperty
argument_list|(
literal|"http.proxyHost"
argument_list|)
decl_stmt|;
if|if
condition|(
name|proxyHost
operator|!=
literal|null
operator|&&
operator|!
name|proxyHost
operator|.
name|equals
argument_list|(
literal|""
argument_list|)
condition|)
block|{
name|ProxyHost
name|proxy
init|=
operator|new
name|ProxyHost
argument_list|(
name|proxyHost
argument_list|,
name|Integer
operator|.
name|parseInt
argument_list|(
name|System
operator|.
name|getProperty
argument_list|(
literal|"http.proxyPort"
argument_list|)
argument_list|)
argument_list|)
decl_stmt|;
name|http
operator|.
name|getHostConfiguration
argument_list|()
operator|.
name|setProxyHost
argument_list|(
name|proxy
argument_list|)
expr_stmt|;
block|}
comment|// Detect OS open file command
name|String
name|os
init|=
name|System
operator|.
name|getProperty
argument_list|(
literal|"os.name"
argument_list|)
operator|.
name|toLowerCase
argument_list|()
decl_stmt|;
if|if
condition|(
name|os
operator|.
name|indexOf
argument_list|(
literal|"windows"
argument_list|)
operator|!=
operator|-
literal|1
operator|||
name|os
operator|.
name|indexOf
argument_list|(
literal|"nt"
argument_list|)
operator|!=
operator|-
literal|1
condition|)
block|{
name|opencmd
operator|=
literal|"cmd /c \"start %s\""
expr_stmt|;
block|}
if|else if
condition|(
name|os
operator|.
name|indexOf
argument_list|(
literal|"mac"
argument_list|)
operator|!=
operator|-
literal|1
condition|)
block|{
name|opencmd
operator|=
literal|"open %s"
expr_stmt|;
block|}
else|else
block|{
name|opencmd
operator|=
literal|"xdg-open %s"
expr_stmt|;
block|}
comment|// Load tasks of old applet's sessions
name|manager
operator|.
name|load
argument_list|()
expr_stmt|;
comment|// Start main trusted thread
name|Timer
name|timer
init|=
operator|new
name|Timer
argument_list|()
decl_stmt|;
name|timer
operator|.
name|schedule
argument_list|(
name|manager
argument_list|,
name|PERIOD
argument_list|,
name|PERIOD
argument_list|)
expr_stmt|;
block|}
specifier|public
name|HttpClient
name|getHttp
parameter_list|()
block|{
return|return
name|http
return|;
block|}
comment|/** 	 * Add task to manage the remote doc  	 * @param downloadFrom URL of remote doc for download 	 * @param uploadTo URL of remote doc for upload back after doc will be changing 	 */
specifier|public
name|void
name|manage
parameter_list|(
name|String
name|downloadFrom
parameter_list|,
name|String
name|uploadTo
parameter_list|)
block|{
name|manager
operator|.
name|addTask
argument_list|(
operator|new
name|Task
argument_list|(
name|downloadFrom
argument_list|,
name|uploadTo
argument_list|,
name|this
argument_list|)
argument_list|)
expr_stmt|;
block|}
specifier|private
name|void
name|useCurrentSession
parameter_list|(
name|HttpMethodBase
name|method
parameter_list|)
block|{
if|if
condition|(
name|sessionid
operator|!=
literal|null
condition|)
block|{
name|method
operator|.
name|setRequestHeader
argument_list|(
literal|"Cookie"
argument_list|,
literal|"JSESSIONID="
operator|+
name|sessionid
argument_list|)
expr_stmt|;
block|}
block|}
comment|/** 	 * Download remote doc 	 * @param downloadFrom URL of remote doc for download * @return downloaded file 	 * @throws IOException 	 */
specifier|public
name|File
name|download
parameter_list|(
name|String
name|downloadFrom
parameter_list|)
throws|throws
name|IOException
block|{
name|File
name|file
init|=
literal|null
decl_stmt|;
name|GetMethod
name|get
init|=
operator|new
name|GetMethod
argument_list|(
name|downloadFrom
argument_list|)
decl_stmt|;
name|useCurrentSession
argument_list|(
name|get
argument_list|)
expr_stmt|;
name|http
operator|.
name|executeMethod
argument_list|(
name|get
argument_list|)
expr_stmt|;
name|long
name|contentLength
init|=
name|get
operator|.
name|getResponseContentLength
argument_list|()
decl_stmt|;
if|if
condition|(
name|contentLength
operator|<
name|Integer
operator|.
name|MAX_VALUE
condition|)
block|{
name|InputStream
name|is
init|=
name|get
operator|.
name|getResponseBodyAsStream
argument_list|()
decl_stmt|;
name|file
operator|=
name|createFile
argument_list|(
name|getCodeBase
argument_list|()
operator|.
name|getAuthority
argument_list|()
argument_list|,
name|get
operator|.
name|getPath
argument_list|()
argument_list|)
expr_stmt|;
name|OutputStream
name|os
init|=
operator|new
name|FileOutputStream
argument_list|(
name|file
argument_list|)
decl_stmt|;
name|byte
index|[]
name|data
init|=
operator|new
name|byte
index|[
literal|1024
index|]
decl_stmt|;
name|int
name|read
init|=
literal|0
decl_stmt|;
while|while
condition|(
operator|(
name|read
operator|=
name|is
operator|.
name|read
argument_list|(
name|data
argument_list|)
operator|)
operator|>
operator|-
literal|1
condition|)
block|{
name|os
operator|.
name|write
argument_list|(
name|data
argument_list|,
literal|0
argument_list|,
name|read
argument_list|)
expr_stmt|;
block|}
name|os
operator|.
name|flush
argument_list|()
expr_stmt|;
name|is
operator|.
name|close
argument_list|()
expr_stmt|;
name|os
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
name|get
operator|.
name|releaseConnection
argument_list|()
expr_stmt|;
return|return
name|file
return|;
block|}
comment|/** 	 * Upload file to server  	 * @param file uploaded file 	 * @param uploadTo URL of remote doc to upload 	 * @throws HttpException 	 * @throws IOException 	 */
specifier|public
name|void
name|upload
parameter_list|(
name|File
name|file
parameter_list|,
name|String
name|uploadTo
parameter_list|)
throws|throws
name|HttpException
throws|,
name|IOException
block|{
name|PutMethod
name|put
init|=
operator|new
name|PutMethod
argument_list|(
name|uploadTo
argument_list|)
decl_stmt|;
name|useCurrentSession
argument_list|(
name|put
argument_list|)
expr_stmt|;
name|InputStream
name|is
init|=
operator|new
name|FileInputStream
argument_list|(
name|file
argument_list|)
decl_stmt|;
name|RequestEntity
name|entity
init|=
operator|new
name|InputStreamRequestEntity
argument_list|(
name|is
argument_list|)
decl_stmt|;
name|put
operator|.
name|setRequestEntity
argument_list|(
name|entity
argument_list|)
expr_stmt|;
name|http
operator|.
name|executeMethod
argument_list|(
name|put
argument_list|)
expr_stmt|;
name|is
operator|.
name|close
argument_list|()
expr_stmt|;
name|put
operator|.
name|releaseConnection
argument_list|()
expr_stmt|;
block|}
comment|/** 	 * Open file on application, registered for type of file in current Desktop  	 * @param file opened file 	 * @throws IOException 	 */
specifier|public
name|void
name|open
parameter_list|(
name|File
name|file
parameter_list|)
throws|throws
name|IOException
block|{
name|String
name|cmd
init|=
name|String
operator|.
name|format
argument_list|(
name|opencmd
argument_list|,
name|file
operator|.
name|toURI
argument_list|()
operator|.
name|toURL
argument_list|()
argument_list|)
decl_stmt|;
name|Runtime
operator|.
name|getRuntime
argument_list|()
operator|.
name|exec
argument_list|(
name|cmd
argument_list|)
expr_stmt|;
block|}
comment|/** 	 * Create file in local cache 	 * @param name name of file 	 * @return file in cache 	 * @throws IOException 	 */
specifier|public
name|File
name|createFile
parameter_list|(
name|String
name|host
parameter_list|,
name|String
name|path
parameter_list|)
throws|throws
name|IOException
block|{
name|File
name|tmp
init|=
operator|new
name|File
argument_list|(
name|cache
argument_list|,
name|path
argument_list|)
decl_stmt|;
name|File
name|fld
init|=
name|tmp
operator|.
name|getParentFile
argument_list|()
decl_stmt|;
if|if
condition|(
operator|!
name|fld
operator|.
name|isDirectory
argument_list|()
condition|)
block|{
name|fld
operator|.
name|mkdirs
argument_list|()
expr_stmt|;
block|}
name|tmp
operator|.
name|createNewFile
argument_list|()
expr_stmt|;
return|return
name|tmp
return|;
block|}
comment|/** 	 * @return task manager 	 */
specifier|public
name|TaskManager
name|getTaskManager
parameter_list|()
block|{
return|return
name|manager
return|;
block|}
comment|/** 	 * @return folder of GateApplet in local FS 	 */
specifier|public
name|File
name|getEtc
parameter_list|()
block|{
return|return
name|etc
return|;
block|}
comment|/** 	 * @return "meta" folder of in local FS 	 */
specifier|public
name|File
name|getMeta
parameter_list|()
block|{
return|return
name|meta
return|;
block|}
comment|/** 	 * @return "cache" folder in local FS 	 */
specifier|public
name|File
name|getCache
parameter_list|()
block|{
return|return
name|cache
return|;
block|}
block|}
end_class

end_unit

