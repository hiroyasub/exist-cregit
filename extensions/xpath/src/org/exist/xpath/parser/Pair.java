begin_unit|revision:1.0.0;language:Java;cregit-version:0.0.1
begin_comment
comment|/*=============================================================================      Copyright 2009 Nikolay Ognyanov      Licensed under the Apache License, Version 2.0 (the "License");     you may not use this file except in compliance with the License.     You may obtain a copy of the License at          http://www.apache.org/licenses/LICENSE-2.0      Unless required by applicable law or agreed to in writing, software     distributed under the License is distributed on an "AS IS" BASIS,     WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.     See the License for the specific language governing permissions and     limitations under the License.  =============================================================================*/
end_comment

begin_package
package|package
name|org
operator|.
name|exist
operator|.
name|xpath
operator|.
name|parser
package|;
end_package

begin_comment
comment|/**  * Utility container class for object pairs.  *  * @param<F> Type of the first element in the pair.  * @param<S> Type of the second element in the pair.  */
end_comment

begin_class
specifier|public
class|class
name|Pair
parameter_list|<
name|F
parameter_list|,
name|S
parameter_list|>
block|{
specifier|private
name|F
name|first
decl_stmt|;
specifier|private
name|S
name|second
decl_stmt|;
specifier|public
name|Pair
parameter_list|(
name|F
name|first
parameter_list|,
name|S
name|second
parameter_list|)
block|{
name|this
operator|.
name|first
operator|=
name|first
expr_stmt|;
name|this
operator|.
name|second
operator|=
name|second
expr_stmt|;
block|}
specifier|public
name|Pair
parameter_list|()
block|{
block|}
specifier|public
name|F
name|getFirst
parameter_list|()
block|{
return|return
name|first
return|;
block|}
specifier|public
name|void
name|setFirst
parameter_list|(
name|F
name|first
parameter_list|)
block|{
name|this
operator|.
name|first
operator|=
name|first
expr_stmt|;
block|}
specifier|public
name|S
name|getSecond
parameter_list|()
block|{
return|return
name|second
return|;
block|}
specifier|public
name|void
name|setSecond
parameter_list|(
name|S
name|second
parameter_list|)
block|{
name|this
operator|.
name|second
operator|=
name|second
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|int
name|hashCode
parameter_list|()
block|{
specifier|final
name|int
name|prime
init|=
literal|31
decl_stmt|;
name|int
name|result
init|=
literal|1
decl_stmt|;
name|result
operator|=
name|prime
operator|*
name|result
operator|+
operator|(
operator|(
name|first
operator|==
literal|null
operator|)
condition|?
literal|0
else|:
name|first
operator|.
name|hashCode
argument_list|()
operator|)
expr_stmt|;
name|result
operator|=
name|prime
operator|*
name|result
operator|+
operator|(
operator|(
name|second
operator|==
literal|null
operator|)
condition|?
literal|0
else|:
name|second
operator|.
name|hashCode
argument_list|()
operator|)
expr_stmt|;
return|return
name|result
return|;
block|}
annotation|@
name|SuppressWarnings
argument_list|(
literal|"all"
argument_list|)
annotation|@
name|Override
specifier|public
name|boolean
name|equals
parameter_list|(
name|Object
name|obj
parameter_list|)
block|{
if|if
condition|(
name|this
operator|==
name|obj
condition|)
return|return
literal|true
return|;
if|if
condition|(
name|obj
operator|==
literal|null
condition|)
return|return
literal|false
return|;
if|if
condition|(
name|getClass
argument_list|()
operator|!=
name|obj
operator|.
name|getClass
argument_list|()
condition|)
return|return
literal|false
return|;
name|Pair
name|other
init|=
operator|(
name|Pair
operator|)
name|obj
decl_stmt|;
if|if
condition|(
name|first
operator|==
literal|null
condition|)
block|{
if|if
condition|(
name|other
operator|.
name|first
operator|!=
literal|null
condition|)
return|return
literal|false
return|;
block|}
if|else if
condition|(
operator|!
name|first
operator|.
name|equals
argument_list|(
name|other
operator|.
name|first
argument_list|)
condition|)
return|return
literal|false
return|;
if|if
condition|(
name|second
operator|==
literal|null
condition|)
block|{
if|if
condition|(
name|other
operator|.
name|second
operator|!=
literal|null
condition|)
return|return
literal|false
return|;
block|}
if|else if
condition|(
operator|!
name|second
operator|.
name|equals
argument_list|(
name|other
operator|.
name|second
argument_list|)
condition|)
return|return
literal|false
return|;
return|return
literal|true
return|;
block|}
annotation|@
name|Override
specifier|public
name|String
name|toString
parameter_list|()
block|{
return|return
literal|"["
operator|+
operator|(
name|first
operator|!=
literal|null
condition|?
name|first
operator|.
name|toString
argument_list|()
else|:
literal|"null"
operator|)
operator|+
literal|", "
operator|+
operator|(
name|second
operator|!=
literal|null
condition|?
name|second
operator|.
name|toString
argument_list|()
else|:
literal|"null"
operator|)
operator|+
literal|"]"
return|;
block|}
block|}
end_class

end_unit

