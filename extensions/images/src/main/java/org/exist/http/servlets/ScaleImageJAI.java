begin_unit|revision:1.0.0;language:Java;cregit-version:0.0.1
begin_package
package|package
name|org
operator|.
name|exist
operator|.
name|http
operator|.
name|servlets
package|;
end_package

begin_import
import|import
name|java
operator|.
name|awt
operator|.
name|RenderingHints
import|;
end_import

begin_import
import|import
name|java
operator|.
name|awt
operator|.
name|image
operator|.
name|BufferedImage
import|;
end_import

begin_import
import|import
name|java
operator|.
name|awt
operator|.
name|image
operator|.
name|RenderedImage
import|;
end_import

begin_import
import|import
name|java
operator|.
name|awt
operator|.
name|image
operator|.
name|renderable
operator|.
name|ParameterBlock
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|BufferedOutputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|OutputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|nio
operator|.
name|file
operator|.
name|Files
import|;
end_import

begin_import
import|import
name|java
operator|.
name|nio
operator|.
name|file
operator|.
name|Path
import|;
end_import

begin_import
import|import
name|java
operator|.
name|nio
operator|.
name|file
operator|.
name|Paths
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Optional
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|function
operator|.
name|Predicate
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|regex
operator|.
name|Matcher
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|regex
operator|.
name|Pattern
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|media
operator|.
name|jai
operator|.
name|ImageLayout
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|media
operator|.
name|jai
operator|.
name|JAI
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|media
operator|.
name|jai
operator|.
name|ParameterBlockJAI
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|media
operator|.
name|jai
operator|.
name|PlanarImage
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|media
operator|.
name|jai
operator|.
name|RenderedOp
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|servlet
operator|.
name|ServletConfig
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|servlet
operator|.
name|ServletException
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|servlet
operator|.
name|http
operator|.
name|HttpServlet
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|servlet
operator|.
name|http
operator|.
name|HttpServletRequest
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|servlet
operator|.
name|http
operator|.
name|HttpServletResponse
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|storage
operator|.
name|BrokerPool
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|storage
operator|.
name|DBBroker
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|storage
operator|.
name|NativeBroker
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|util
operator|.
name|FileUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|util
operator|.
name|MimeTable
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|util
operator|.
name|MimeType
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|xmldb
operator|.
name|XmldbURI
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|xquery
operator|.
name|util
operator|.
name|URIUtils
import|;
end_import

begin_import
import|import
name|com
operator|.
name|sun
operator|.
name|media
operator|.
name|jai
operator|.
name|codec
operator|.
name|FileSeekableStream
import|;
end_import

begin_import
import|import
name|com
operator|.
name|sun
operator|.
name|media
operator|.
name|jai
operator|.
name|codec
operator|.
name|ImageCodec
import|;
end_import

begin_import
import|import
name|com
operator|.
name|sun
operator|.
name|media
operator|.
name|jai
operator|.
name|codec
operator|.
name|ImageEncoder
import|;
end_import

begin_import
import|import
name|com
operator|.
name|sun
operator|.
name|media
operator|.
name|jai
operator|.
name|codec
operator|.
name|JPEGEncodeParam
import|;
end_import

begin_comment
comment|/**  * General purpose image scaling and cropping servlet. The output image can be cached to  * the file system.  *   * Any URL handled by the servlet is parsed as follows:  *   * action/path/to/image?parameters  *   * "action" can be either "scale" or "crop".  *   * "path/to/image" is the relative path to the source image. The image name does not need to be  * complete. The servlet will search the directory for images<b>containing</b> the given string   * in their name.  *   *   * Configuration parameters in web.xml:  *   * base-dir: the base directory which will be searched for images. Image paths are resolved  * relative to this directory.  *   * output-dir: if caching is enabled, this is the directory for the cached images or tiles.  *   * mime-type: the mime-type to use for output. Either image/jpeg or image/png. Other formats are  * not supported.  *   * caching: yes or no. Should images/tiles be cached on the file system?  *   * @author wolf  *  */
end_comment

begin_class
specifier|public
class|class
name|ScaleImageJAI
extends|extends
name|HttpServlet
block|{
specifier|private
specifier|final
specifier|static
name|int
name|MEM_MAX
init|=
literal|8
operator|*
literal|1024
operator|*
literal|1024
decl_stmt|;
specifier|private
name|Pattern
name|URL_PATTERN
init|=
name|Pattern
operator|.
name|compile
argument_list|(
literal|"^/?([^/]+)/(.*)$"
argument_list|)
decl_stmt|;
specifier|private
name|Storage
name|store
decl_stmt|;
specifier|private
name|Path
name|outputDir
decl_stmt|;
specifier|private
name|String
name|defaultMimeType
decl_stmt|;
specifier|private
name|boolean
name|caching
init|=
literal|true
decl_stmt|;
annotation|@
name|Override
specifier|public
name|void
name|init
parameter_list|(
name|ServletConfig
name|config
parameter_list|)
throws|throws
name|ServletException
block|{
name|super
operator|.
name|init
argument_list|(
name|config
argument_list|)
expr_stmt|;
name|String
name|baseDirStr
init|=
name|config
operator|.
name|getInitParameter
argument_list|(
literal|"base"
argument_list|)
decl_stmt|;
if|if
condition|(
name|baseDirStr
operator|==
literal|null
condition|)
name|baseDirStr
operator|=
literal|"."
expr_stmt|;
if|if
condition|(
name|baseDirStr
operator|.
name|startsWith
argument_list|(
literal|"xmldb:"
argument_list|)
condition|)
block|{
name|store
operator|=
operator|new
name|DBStorage
argument_list|(
name|baseDirStr
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|Path
name|baseDir
init|=
name|getAbsolutePath
argument_list|(
name|baseDirStr
argument_list|)
decl_stmt|;
name|store
operator|=
operator|new
name|FileSystemStorage
argument_list|(
name|baseDir
argument_list|)
expr_stmt|;
block|}
name|String
name|outputDirStr
init|=
name|config
operator|.
name|getInitParameter
argument_list|(
literal|"output-dir"
argument_list|)
decl_stmt|;
if|if
condition|(
name|outputDirStr
operator|==
literal|null
condition|)
name|outputDirStr
operator|=
literal|"scaled"
expr_stmt|;
name|outputDir
operator|=
name|getAbsolutePath
argument_list|(
name|outputDirStr
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|Files
operator|.
name|exists
argument_list|(
name|outputDir
argument_list|)
condition|)
block|{
try|try
block|{
name|Files
operator|.
name|createDirectories
argument_list|(
name|outputDir
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
specifier|final
name|IOException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|ServletException
argument_list|(
name|e
argument_list|)
throw|;
block|}
block|}
name|log
argument_list|(
literal|"baseDir = "
operator|+
name|baseDirStr
argument_list|)
expr_stmt|;
name|log
argument_list|(
literal|"outputDir = "
operator|+
name|outputDir
argument_list|)
expr_stmt|;
name|defaultMimeType
operator|=
name|config
operator|.
name|getInitParameter
argument_list|(
literal|"mime-type"
argument_list|)
expr_stmt|;
if|if
condition|(
name|defaultMimeType
operator|==
literal|null
condition|)
name|defaultMimeType
operator|=
literal|"image/jpeg"
expr_stmt|;
name|String
name|cacheStr
init|=
name|config
operator|.
name|getInitParameter
argument_list|(
literal|"caching"
argument_list|)
decl_stmt|;
if|if
condition|(
name|cacheStr
operator|!=
literal|null
condition|)
name|caching
operator|=
name|cacheStr
operator|.
name|equalsIgnoreCase
argument_list|(
literal|"yes"
argument_list|)
operator|||
name|cacheStr
operator|.
name|equalsIgnoreCase
argument_list|(
literal|"true"
argument_list|)
expr_stmt|;
block|}
specifier|private
name|Path
name|getAbsolutePath
parameter_list|(
name|String
name|dirStr
parameter_list|)
block|{
name|Path
name|dir
init|=
name|Paths
operator|.
name|get
argument_list|(
name|dirStr
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|dir
operator|.
name|isAbsolute
argument_list|()
condition|)
block|{
name|String
name|path
init|=
name|getServletConfig
argument_list|()
operator|.
name|getServletContext
argument_list|()
operator|.
name|getRealPath
argument_list|(
literal|"."
argument_list|)
decl_stmt|;
return|return
name|Paths
operator|.
name|get
argument_list|(
name|path
argument_list|,
name|dirStr
argument_list|)
return|;
block|}
return|return
name|dir
return|;
block|}
annotation|@
name|Override
specifier|protected
name|void
name|doGet
parameter_list|(
specifier|final
name|HttpServletRequest
name|request
parameter_list|,
specifier|final
name|HttpServletResponse
name|response
parameter_list|)
throws|throws
name|ServletException
throws|,
name|IOException
block|{
name|String
name|filePath
init|=
name|request
operator|.
name|getPathInfo
argument_list|()
decl_stmt|;
if|if
condition|(
name|filePath
operator|.
name|startsWith
argument_list|(
literal|"/"
argument_list|)
condition|)
block|{
name|filePath
operator|=
name|filePath
operator|.
name|substring
argument_list|(
literal|1
argument_list|)
expr_stmt|;
block|}
name|filePath
operator|=
name|URIUtils
operator|.
name|urlDecodeUtf8
argument_list|(
name|filePath
argument_list|)
expr_stmt|;
name|String
name|action
init|=
literal|"scale"
decl_stmt|;
name|Matcher
name|matcher
init|=
name|URL_PATTERN
operator|.
name|matcher
argument_list|(
name|filePath
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|matcher
operator|.
name|matches
argument_list|()
condition|)
block|{
throw|throw
operator|new
name|ServletException
argument_list|(
literal|"Bad URL format: "
operator|+
name|filePath
argument_list|)
throw|;
block|}
name|action
operator|=
name|matcher
operator|.
name|group
argument_list|(
literal|1
argument_list|)
expr_stmt|;
name|filePath
operator|=
name|matcher
operator|.
name|group
argument_list|(
literal|2
argument_list|)
expr_stmt|;
name|Path
name|file
init|=
name|store
operator|.
name|getFile
argument_list|(
name|filePath
argument_list|)
decl_stmt|;
name|log
argument_list|(
literal|"action: "
operator|+
name|action
operator|+
literal|" path: "
operator|+
name|file
operator|.
name|toAbsolutePath
argument_list|()
argument_list|)
expr_stmt|;
name|String
name|name
init|=
name|FileUtils
operator|.
name|fileName
argument_list|(
name|file
argument_list|)
decl_stmt|;
name|Path
name|dir
init|=
name|file
operator|.
name|getParent
argument_list|()
decl_stmt|;
name|file
operator|=
name|findFile
argument_list|(
name|dir
argument_list|,
name|name
argument_list|)
expr_stmt|;
if|if
condition|(
name|file
operator|!=
literal|null
operator|&&
operator|!
operator|(
name|Files
operator|.
name|isReadable
argument_list|(
name|file
argument_list|)
operator|&&
name|Files
operator|.
name|isRegularFile
argument_list|(
name|file
argument_list|)
operator|)
condition|)
block|{
name|log
argument_list|(
literal|"Cannot read image file: "
operator|+
name|file
operator|.
name|toAbsolutePath
argument_list|()
argument_list|)
expr_stmt|;
name|response
operator|.
name|sendError
argument_list|(
name|HttpServletResponse
operator|.
name|SC_NOT_FOUND
argument_list|)
expr_stmt|;
return|return;
block|}
if|if
condition|(
name|file
operator|==
literal|null
operator|&&
literal|"crop"
operator|.
name|equals
argument_list|(
name|action
argument_list|)
condition|)
block|{
name|log
argument_list|(
literal|"Image file not found."
argument_list|)
expr_stmt|;
name|response
operator|.
name|sendError
argument_list|(
name|HttpServletResponse
operator|.
name|SC_NOT_FOUND
argument_list|)
expr_stmt|;
return|return;
block|}
comment|// determine mime type for generated image
name|String
name|mimeParam
init|=
name|request
operator|.
name|getParameter
argument_list|(
literal|"type"
argument_list|)
decl_stmt|;
if|if
condition|(
name|mimeParam
operator|==
literal|null
condition|)
name|mimeParam
operator|=
name|defaultMimeType
expr_stmt|;
name|boolean
name|doCache
init|=
name|caching
decl_stmt|;
name|String
name|cacheParam
init|=
name|request
operator|.
name|getParameter
argument_list|(
literal|"cache"
argument_list|)
decl_stmt|;
if|if
condition|(
name|cacheParam
operator|!=
literal|null
condition|)
name|doCache
operator|=
name|cacheParam
operator|.
name|equalsIgnoreCase
argument_list|(
literal|"yes"
argument_list|)
operator|||
name|cacheParam
operator|.
name|equalsIgnoreCase
argument_list|(
literal|"true"
argument_list|)
expr_stmt|;
name|MimeType
name|mime
decl_stmt|;
if|if
condition|(
name|file
operator|==
literal|null
condition|)
name|mime
operator|=
name|MimeTable
operator|.
name|getInstance
argument_list|()
operator|.
name|getContentType
argument_list|(
literal|"image/png"
argument_list|)
expr_stmt|;
else|else
name|mime
operator|=
name|MimeTable
operator|.
name|getInstance
argument_list|()
operator|.
name|getContentType
argument_list|(
name|mimeParam
argument_list|)
expr_stmt|;
name|response
operator|.
name|setContentType
argument_list|(
name|mime
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
literal|"scale"
operator|.
name|equals
argument_list|(
name|action
argument_list|)
condition|)
block|{
name|float
name|size
init|=
name|getParameter
argument_list|(
name|request
argument_list|,
literal|"s"
argument_list|)
decl_stmt|;
if|if
condition|(
name|file
operator|!=
literal|null
condition|)
block|{
name|Path
name|scaled
init|=
name|getFile
argument_list|(
name|dir
argument_list|,
name|file
argument_list|,
name|mime
argument_list|,
name|size
operator|<
literal|0
condition|?
literal|""
else|:
name|Integer
operator|.
name|toString
argument_list|(
operator|(
name|int
operator|)
name|size
argument_list|)
argument_list|)
decl_stmt|;
name|log
argument_list|(
literal|"thumb = "
operator|+
name|scaled
operator|.
name|toAbsolutePath
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|useScaled
argument_list|(
name|file
argument_list|,
name|scaled
argument_list|)
condition|)
block|{
name|streamScaled
argument_list|(
name|scaled
argument_list|,
name|response
operator|.
name|getOutputStream
argument_list|()
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|PlanarImage
name|image
init|=
name|loadImage
argument_list|(
name|file
argument_list|)
decl_stmt|;
name|image
operator|=
name|scale
argument_list|(
name|image
argument_list|,
name|size
argument_list|)
expr_stmt|;
name|writeToResponse
argument_list|(
name|response
argument_list|,
name|mime
argument_list|,
name|scaled
argument_list|,
name|image
argument_list|,
name|doCache
argument_list|)
expr_stmt|;
block|}
block|}
else|else
block|{
name|BufferedImage
name|image
init|=
operator|new
name|BufferedImage
argument_list|(
operator|(
name|int
operator|)
name|size
argument_list|,
operator|(
name|int
operator|)
name|size
argument_list|,
name|BufferedImage
operator|.
name|TYPE_INT_ARGB
argument_list|)
decl_stmt|;
comment|//				Graphics2D graphics = image.createGraphics();
comment|//				Color color = new Color(0x00FFFFFF, true);
comment|//				graphics.setColor(color);
comment|//				graphics.fillRect(0, 0, image.getWidth(), image.getHeight());
comment|//				graphics.dispose();
name|writeToResponse
argument_list|(
name|response
argument_list|,
name|mime
argument_list|,
literal|null
argument_list|,
name|image
argument_list|,
literal|false
argument_list|)
expr_stmt|;
block|}
block|}
if|else if
condition|(
literal|"crop"
operator|.
name|equals
argument_list|(
name|action
argument_list|)
condition|)
block|{
name|float
name|x
init|=
name|getParameter
argument_list|(
name|request
argument_list|,
literal|"x"
argument_list|)
decl_stmt|;
name|float
name|y
init|=
name|getParameter
argument_list|(
name|request
argument_list|,
literal|"y"
argument_list|)
decl_stmt|;
name|float
name|width
init|=
name|getParameter
argument_list|(
name|request
argument_list|,
literal|"w"
argument_list|)
decl_stmt|;
name|float
name|height
init|=
name|getParameter
argument_list|(
name|request
argument_list|,
literal|"h"
argument_list|)
decl_stmt|;
name|StringBuilder
name|suffix
init|=
operator|new
name|StringBuilder
argument_list|()
decl_stmt|;
name|suffix
operator|.
name|append
argument_list|(
literal|"x"
argument_list|)
operator|.
name|append
argument_list|(
operator|(
name|int
operator|)
name|x
argument_list|)
operator|.
name|append
argument_list|(
literal|"y"
argument_list|)
operator|.
name|append
argument_list|(
operator|(
name|int
operator|)
name|y
argument_list|)
operator|.
name|append
argument_list|(
literal|"+"
argument_list|)
operator|.
name|append
argument_list|(
operator|(
name|int
operator|)
name|width
argument_list|)
operator|.
name|append
argument_list|(
literal|"y"
argument_list|)
operator|.
name|append
argument_list|(
operator|(
name|int
operator|)
name|height
argument_list|)
expr_stmt|;
name|Path
name|scaled
init|=
name|getFile
argument_list|(
name|dir
argument_list|,
name|file
argument_list|,
name|mime
argument_list|,
name|suffix
operator|.
name|toString
argument_list|()
argument_list|)
decl_stmt|;
name|log
argument_list|(
literal|"thumb = "
operator|+
name|scaled
operator|.
name|toAbsolutePath
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|useScaled
argument_list|(
name|file
argument_list|,
name|scaled
argument_list|)
condition|)
block|{
name|streamScaled
argument_list|(
name|scaled
argument_list|,
name|response
operator|.
name|getOutputStream
argument_list|()
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|PlanarImage
name|image
init|=
name|loadImage
argument_list|(
name|file
argument_list|)
decl_stmt|;
name|image
operator|=
name|crop
argument_list|(
name|image
argument_list|,
name|x
argument_list|,
name|y
argument_list|,
name|width
argument_list|,
name|height
argument_list|)
expr_stmt|;
name|writeToResponse
argument_list|(
name|response
argument_list|,
name|mime
argument_list|,
name|scaled
argument_list|,
name|image
operator|.
name|getAsBufferedImage
argument_list|()
argument_list|,
name|doCache
argument_list|)
expr_stmt|;
block|}
block|}
name|response
operator|.
name|flushBuffer
argument_list|()
expr_stmt|;
block|}
specifier|private
name|void
name|writeToResponse
parameter_list|(
name|HttpServletResponse
name|response
parameter_list|,
name|MimeType
name|mime
parameter_list|,
name|Path
name|scaled
parameter_list|,
name|RenderedImage
name|bufferedImage
parameter_list|,
name|boolean
name|cache
parameter_list|)
throws|throws
name|IOException
block|{
name|boolean
name|writeOk
init|=
name|cache
condition|?
name|writeScaled
argument_list|(
name|bufferedImage
argument_list|,
name|scaled
argument_list|,
name|mime
argument_list|)
else|:
literal|false
decl_stmt|;
if|if
condition|(
name|writeOk
condition|)
block|{
name|streamScaled
argument_list|(
name|scaled
argument_list|,
name|response
operator|.
name|getOutputStream
argument_list|()
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|BufferedOutputStream
name|os
init|=
operator|new
name|BufferedOutputStream
argument_list|(
name|response
operator|.
name|getOutputStream
argument_list|()
argument_list|,
literal|512
argument_list|)
decl_stmt|;
name|writeImage
argument_list|(
name|bufferedImage
argument_list|,
name|os
argument_list|,
name|mime
argument_list|)
expr_stmt|;
name|os
operator|.
name|flush
argument_list|()
expr_stmt|;
block|}
block|}
specifier|private
name|float
name|getParameter
parameter_list|(
name|HttpServletRequest
name|request
parameter_list|,
name|String
name|name
parameter_list|)
throws|throws
name|ServletException
block|{
name|String
name|param
init|=
name|request
operator|.
name|getParameter
argument_list|(
name|name
argument_list|)
decl_stmt|;
if|if
condition|(
name|param
operator|!=
literal|null
condition|)
block|{
try|try
block|{
return|return
name|Float
operator|.
name|parseFloat
argument_list|(
name|param
argument_list|)
return|;
block|}
catch|catch
parameter_list|(
name|NumberFormatException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|ServletException
argument_list|(
literal|"Illegal value specified for width: "
operator|+
name|param
argument_list|)
throw|;
block|}
block|}
return|return
operator|-
literal|1
return|;
block|}
specifier|private
name|RenderedOp
name|loadImage
parameter_list|(
specifier|final
name|Path
name|file
parameter_list|)
throws|throws
name|IOException
block|{
if|if
condition|(
name|file
operator|==
literal|null
condition|)
block|{
return|return
literal|null
return|;
block|}
specifier|final
name|FileSeekableStream
name|fss
init|=
operator|new
name|FileSeekableStream
argument_list|(
name|file
operator|.
name|toFile
argument_list|()
argument_list|)
decl_stmt|;
return|return
name|JAI
operator|.
name|create
argument_list|(
literal|"stream"
argument_list|,
name|fss
argument_list|)
return|;
block|}
specifier|private
name|void
name|writeImage
parameter_list|(
name|RenderedImage
name|image
parameter_list|,
name|OutputStream
name|os
parameter_list|,
name|MimeType
name|mime
parameter_list|)
throws|throws
name|IOException
block|{
if|if
condition|(
literal|"image/png"
operator|.
name|equals
argument_list|(
name|mime
operator|.
name|getName
argument_list|()
argument_list|)
condition|)
block|{
name|JAI
operator|.
name|create
argument_list|(
literal|"encode"
argument_list|,
name|image
argument_list|,
name|os
argument_list|,
literal|"PNG"
argument_list|,
literal|null
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|JPEGEncodeParam
name|params
init|=
operator|new
name|JPEGEncodeParam
argument_list|()
decl_stmt|;
name|ImageEncoder
name|encoder
init|=
name|ImageCodec
operator|.
name|createImageEncoder
argument_list|(
literal|"JPEG"
argument_list|,
name|os
argument_list|,
name|params
argument_list|)
decl_stmt|;
name|encoder
operator|.
name|encode
argument_list|(
name|image
argument_list|)
expr_stmt|;
block|}
block|}
specifier|protected
name|PlanarImage
name|crop
parameter_list|(
name|PlanarImage
name|image
parameter_list|,
name|float
name|x
parameter_list|,
name|float
name|y
parameter_list|,
name|float
name|width
parameter_list|,
name|float
name|height
parameter_list|)
block|{
comment|// Create a ParameterBlock with information for the cropping.
name|ParameterBlockJAI
name|pb
init|=
operator|new
name|ParameterBlockJAI
argument_list|(
literal|"crop"
argument_list|)
decl_stmt|;
name|pb
operator|.
name|addSource
argument_list|(
name|image
argument_list|)
expr_stmt|;
name|pb
operator|.
name|setParameter
argument_list|(
literal|"x"
argument_list|,
name|x
argument_list|)
expr_stmt|;
name|pb
operator|.
name|setParameter
argument_list|(
literal|"y"
argument_list|,
name|y
argument_list|)
expr_stmt|;
name|pb
operator|.
name|setParameter
argument_list|(
literal|"width"
argument_list|,
name|width
argument_list|)
expr_stmt|;
name|pb
operator|.
name|setParameter
argument_list|(
literal|"height"
argument_list|,
name|height
argument_list|)
expr_stmt|;
comment|// Create the output image by cropping the input image.
return|return
name|JAI
operator|.
name|create
argument_list|(
literal|"crop"
argument_list|,
name|pb
argument_list|)
return|;
comment|// A cropped image will have its origin set to the (x,y) coordinates,
comment|// and with the display method we use it will cause bands on the top
comment|// and left borders. A simple way to solve this is to shift or
comment|// translate the image by (-x,-y) pixels.
comment|//    	pb = new ParameterBlock();
comment|//    	pb.addSource(output);
comment|//    	pb.add(-x);
comment|//    	pb.add(-y);
comment|// Create the output image by translating itself.
comment|//    	return JAI.create("translate",pb,null);
block|}
specifier|public
name|PlanarImage
name|scale
parameter_list|(
name|PlanarImage
name|image
parameter_list|,
name|double
name|edgeLength
parameter_list|)
block|{
if|if
condition|(
name|edgeLength
operator|<=
literal|0
condition|)
return|return
name|image
return|;
name|int
name|height
init|=
name|image
operator|.
name|getHeight
argument_list|()
decl_stmt|;
name|int
name|width
init|=
name|image
operator|.
name|getWidth
argument_list|()
decl_stmt|;
name|boolean
name|tall
init|=
operator|(
name|height
operator|>
name|width
operator|)
decl_stmt|;
name|double
name|modifier
init|=
name|edgeLength
operator|/
operator|(
name|double
operator|)
operator|(
name|tall
condition|?
name|height
else|:
name|width
operator|)
decl_stmt|;
name|log
argument_list|(
literal|"modifier = "
operator|+
name|modifier
operator|+
literal|"; edgeLength = "
operator|+
name|edgeLength
operator|+
literal|"; height = "
operator|+
name|height
argument_list|)
expr_stmt|;
if|if
condition|(
name|modifier
operator|>
literal|1.0
condition|)
return|return
name|image
return|;
name|ImageLayout
name|layout
init|=
operator|new
name|ImageLayout
argument_list|()
decl_stmt|;
name|layout
operator|.
name|setTileHeight
argument_list|(
name|MEM_MAX
argument_list|)
expr_stmt|;
name|layout
operator|.
name|setTileWidth
argument_list|(
name|MEM_MAX
argument_list|)
expr_stmt|;
name|RenderingHints
name|qualityHints
init|=
operator|new
name|RenderingHints
argument_list|(
name|RenderingHints
operator|.
name|KEY_RENDERING
argument_list|,
name|RenderingHints
operator|.
name|VALUE_RENDER_QUALITY
argument_list|)
decl_stmt|;
name|qualityHints
operator|.
name|put
argument_list|(
name|RenderingHints
operator|.
name|KEY_INTERPOLATION
argument_list|,
name|RenderingHints
operator|.
name|VALUE_INTERPOLATION_BILINEAR
argument_list|)
expr_stmt|;
name|qualityHints
operator|.
name|put
argument_list|(
name|JAI
operator|.
name|KEY_IMAGE_LAYOUT
argument_list|,
name|layout
argument_list|)
expr_stmt|;
name|ParameterBlock
name|params
init|=
operator|new
name|ParameterBlock
argument_list|()
decl_stmt|;
name|params
operator|.
name|addSource
argument_list|(
name|image
argument_list|)
expr_stmt|;
name|params
operator|.
name|add
argument_list|(
name|modifier
argument_list|)
expr_stmt|;
comment|//x scale factor
name|params
operator|.
name|add
argument_list|(
name|modifier
argument_list|)
expr_stmt|;
comment|//y scale factor
name|params
operator|.
name|add
argument_list|(
name|qualityHints
argument_list|)
expr_stmt|;
return|return
name|JAI
operator|.
name|create
argument_list|(
literal|"SubsampleAverage"
argument_list|,
name|params
argument_list|)
return|;
block|}
specifier|private
name|Path
name|getFile
parameter_list|(
specifier|final
name|Path
name|dir
parameter_list|,
specifier|final
name|Path
name|file
parameter_list|,
specifier|final
name|MimeType
name|mime
parameter_list|,
specifier|final
name|String
name|suffix
parameter_list|)
throws|throws
name|IOException
block|{
name|String
name|dirName
init|=
name|store
operator|.
name|getRelativePath
argument_list|(
name|dir
argument_list|)
decl_stmt|;
specifier|final
name|Path
name|scaledDir
init|=
name|outputDir
operator|.
name|resolve
argument_list|(
name|dirName
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|Files
operator|.
name|exists
argument_list|(
name|scaledDir
argument_list|)
condition|)
block|{
name|Files
operator|.
name|createDirectories
argument_list|(
name|scaledDir
argument_list|)
expr_stmt|;
block|}
name|String
name|name
init|=
name|FileUtils
operator|.
name|fileName
argument_list|(
name|file
argument_list|)
decl_stmt|;
name|int
name|p
init|=
name|name
operator|.
name|lastIndexOf
argument_list|(
literal|'.'
argument_list|)
decl_stmt|;
if|if
condition|(
name|p
operator|>
literal|0
condition|)
block|{
name|name
operator|=
name|name
operator|.
name|substring
argument_list|(
literal|0
argument_list|,
name|p
argument_list|)
expr_stmt|;
block|}
specifier|final
name|StringBuilder
name|nameBuilder
init|=
operator|new
name|StringBuilder
argument_list|()
decl_stmt|;
name|nameBuilder
operator|.
name|append
argument_list|(
name|name
argument_list|)
expr_stmt|;
if|if
condition|(
name|suffix
operator|!=
literal|null
condition|)
block|{
name|nameBuilder
operator|.
name|append
argument_list|(
literal|'-'
argument_list|)
operator|.
name|append
argument_list|(
name|suffix
argument_list|)
expr_stmt|;
block|}
name|nameBuilder
operator|.
name|append
argument_list|(
name|MimeTable
operator|.
name|getInstance
argument_list|()
operator|.
name|getPreferredExtension
argument_list|(
name|mime
argument_list|)
argument_list|)
expr_stmt|;
return|return
name|scaledDir
operator|.
name|resolve
argument_list|(
name|nameBuilder
operator|.
name|toString
argument_list|()
argument_list|)
return|;
block|}
specifier|private
name|boolean
name|useScaled
parameter_list|(
specifier|final
name|Path
name|image
parameter_list|,
specifier|final
name|Path
name|scaled
parameter_list|)
throws|throws
name|IOException
block|{
if|if
condition|(
operator|!
operator|(
name|Files
operator|.
name|exists
argument_list|(
name|scaled
argument_list|)
operator|&&
name|Files
operator|.
name|isReadable
argument_list|(
name|scaled
argument_list|)
operator|)
condition|)
block|{
return|return
literal|false
return|;
block|}
return|return
name|Files
operator|.
name|getLastModifiedTime
argument_list|(
name|scaled
argument_list|)
operator|.
name|compareTo
argument_list|(
name|Files
operator|.
name|getLastModifiedTime
argument_list|(
name|image
argument_list|)
argument_list|)
operator|>=
literal|0
return|;
block|}
specifier|private
name|boolean
name|writeScaled
parameter_list|(
specifier|final
name|RenderedImage
name|image
parameter_list|,
specifier|final
name|Path
name|scaled
parameter_list|,
specifier|final
name|MimeType
name|mime
parameter_list|)
block|{
try|try
init|(
specifier|final
name|OutputStream
name|os
init|=
name|Files
operator|.
name|newOutputStream
argument_list|(
name|scaled
argument_list|)
init|)
block|{
name|writeImage
argument_list|(
name|image
argument_list|,
name|os
argument_list|,
name|mime
argument_list|)
expr_stmt|;
return|return
literal|true
return|;
block|}
catch|catch
parameter_list|(
specifier|final
name|IOException
name|e
parameter_list|)
block|{
name|log
argument_list|(
name|e
operator|.
name|getMessage
argument_list|()
argument_list|,
name|e
argument_list|)
expr_stmt|;
return|return
literal|false
return|;
block|}
block|}
specifier|private
name|void
name|streamScaled
parameter_list|(
specifier|final
name|Path
name|thumb
parameter_list|,
specifier|final
name|OutputStream
name|os
parameter_list|)
throws|throws
name|IOException
block|{
name|Files
operator|.
name|copy
argument_list|(
name|thumb
argument_list|,
name|os
argument_list|)
expr_stmt|;
block|}
specifier|private
name|Path
name|findFile
parameter_list|(
specifier|final
name|Path
name|dir
parameter_list|,
specifier|final
name|String
name|name
parameter_list|)
throws|throws
name|IOException
block|{
specifier|final
name|List
argument_list|<
name|Path
argument_list|>
name|files
init|=
name|FileUtils
operator|.
name|list
argument_list|(
name|dir
argument_list|,
name|imageFilter
argument_list|(
name|name
argument_list|)
argument_list|)
decl_stmt|;
if|if
condition|(
name|files
operator|!=
literal|null
operator|&&
operator|!
name|files
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
return|return
name|files
operator|.
name|get
argument_list|(
literal|0
argument_list|)
return|;
block|}
return|return
literal|null
return|;
block|}
specifier|private
specifier|static
name|Predicate
argument_list|<
name|Path
argument_list|>
name|imageFilter
parameter_list|(
specifier|final
name|String
name|searchString
parameter_list|)
block|{
return|return
name|path
lambda|->
name|FileUtils
operator|.
name|fileName
argument_list|(
name|path
argument_list|)
operator|.
name|contains
argument_list|(
name|searchString
argument_list|)
return|;
block|}
specifier|private
interface|interface
name|Storage
block|{
name|Path
name|getFile
parameter_list|(
name|String
name|path
parameter_list|)
function_decl|;
name|String
name|getRelativePath
parameter_list|(
name|Path
name|dir
parameter_list|)
function_decl|;
block|}
specifier|private
specifier|static
class|class
name|FileSystemStorage
implements|implements
name|Storage
block|{
specifier|private
specifier|final
name|Path
name|baseDir
decl_stmt|;
specifier|public
name|FileSystemStorage
parameter_list|(
specifier|final
name|Path
name|baseDir
parameter_list|)
block|{
name|this
operator|.
name|baseDir
operator|=
name|baseDir
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|Path
name|getFile
parameter_list|(
specifier|final
name|String
name|path
parameter_list|)
block|{
return|return
name|baseDir
operator|.
name|resolve
argument_list|(
name|path
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|String
name|getRelativePath
parameter_list|(
name|Path
name|dir
parameter_list|)
block|{
return|return
name|dir
operator|.
name|toAbsolutePath
argument_list|()
operator|.
name|toString
argument_list|()
operator|.
name|substring
argument_list|(
name|baseDir
operator|.
name|toAbsolutePath
argument_list|()
operator|.
name|toString
argument_list|()
operator|.
name|length
argument_list|()
argument_list|)
return|;
block|}
block|}
specifier|private
class|class
name|DBStorage
implements|implements
name|Storage
block|{
specifier|private
name|Path
name|baseDir
decl_stmt|;
specifier|public
name|DBStorage
parameter_list|(
specifier|final
name|String
name|baseCollection
parameter_list|)
throws|throws
name|ServletException
block|{
try|try
block|{
specifier|final
name|BrokerPool
name|pool
init|=
name|BrokerPool
operator|.
name|getInstance
argument_list|()
decl_stmt|;
try|try
init|(
specifier|final
name|DBBroker
name|broker
init|=
name|pool
operator|.
name|get
argument_list|(
name|Optional
operator|.
name|of
argument_list|(
name|pool
operator|.
name|getSecurityManager
argument_list|()
operator|.
name|getGuestSubject
argument_list|()
argument_list|)
argument_list|)
init|)
block|{
name|XmldbURI
name|uri
init|=
name|XmldbURI
operator|.
name|xmldbUriFor
argument_list|(
name|baseCollection
argument_list|)
decl_stmt|;
name|this
operator|.
name|baseDir
operator|=
operator|(
operator|(
name|NativeBroker
operator|)
name|broker
operator|)
operator|.
name|getCollectionBinaryFileFsPath
argument_list|(
name|uri
operator|.
name|toCollectionPathURI
argument_list|()
argument_list|)
expr_stmt|;
name|log
argument_list|(
literal|"baseDir = "
operator|+
name|baseDir
operator|.
name|toAbsolutePath
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|ServletException
argument_list|(
literal|"Unable to access image collection: "
operator|+
name|baseCollection
argument_list|,
name|e
argument_list|)
throw|;
block|}
block|}
annotation|@
name|Override
specifier|public
name|String
name|getRelativePath
parameter_list|(
specifier|final
name|Path
name|dir
parameter_list|)
block|{
return|return
name|dir
operator|.
name|toAbsolutePath
argument_list|()
operator|.
name|toString
argument_list|()
operator|.
name|substring
argument_list|(
name|baseDir
operator|.
name|toAbsolutePath
argument_list|()
operator|.
name|toString
argument_list|()
operator|.
name|length
argument_list|()
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|Path
name|getFile
parameter_list|(
name|String
name|path
parameter_list|)
block|{
if|if
condition|(
operator|!
name|Files
operator|.
name|isReadable
argument_list|(
name|baseDir
argument_list|)
condition|)
block|{
return|return
literal|null
return|;
block|}
name|path
operator|=
name|URIUtils
operator|.
name|urlEncodePartsUtf8
argument_list|(
name|path
argument_list|)
expr_stmt|;
return|return
name|baseDir
operator|.
name|resolve
argument_list|(
name|path
argument_list|)
return|;
block|}
block|}
block|}
end_class

end_unit

