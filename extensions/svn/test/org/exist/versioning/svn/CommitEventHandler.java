begin_unit|revision:1.0.0;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * ====================================================================  * Copyright (c) 2004-2010 TMate Software Ltd.  All rights reserved.  *  * This software is licensed as described in the file COPYING, which  * you should have received as part of this distribution.  The terms  * are also available at http://svnkit.com/license.html  * If newer versions of this license are posted there, you may use a  * newer version instead, at your option.  * ====================================================================  */
end_comment

begin_package
package|package
name|org
operator|.
name|exist
operator|.
name|versioning
operator|.
name|svn
package|;
end_package

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|versioning
operator|.
name|svn
operator|.
name|wc
operator|.
name|ISVNEventHandler
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|versioning
operator|.
name|svn
operator|.
name|wc
operator|.
name|SVNEvent
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|versioning
operator|.
name|svn
operator|.
name|wc
operator|.
name|SVNEventAction
import|;
end_import

begin_import
import|import
name|org
operator|.
name|tmatesoft
operator|.
name|svn
operator|.
name|core
operator|.
name|SVNCancelException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|tmatesoft
operator|.
name|svn
operator|.
name|core
operator|.
name|SVNProperty
import|;
end_import

begin_comment
comment|/*  * This class is an implementation of ISVNEventHandler intended for  processing     * events generated by do*() methods of an SVNCommitClient object. An  instance    * of this handler will be provided to  an  SVNCommitClient. When calling,  for   * example,  SVNCommitClient.doCommit(..)  on  a  WC  path,  this  method  will   * generate an event for each 'adding'/'deleting'/'sending'/.. action  it  will   * perform upon every path being committed. And this event is passed to   *   * ISVNEventHandler.handleEvent(SVNEvent event,  double progress)   *   * to notify the handler.  The  event  contains detailed  information about the   * path, action performed upon the path and some other.   */
end_comment

begin_class
specifier|public
class|class
name|CommitEventHandler
implements|implements
name|ISVNEventHandler
block|{
comment|/*      * progress  is  currently  reserved  for future purposes and now is always      * ISVNEventHandler.UNKNOWN        */
specifier|public
name|void
name|handleEvent
parameter_list|(
name|SVNEvent
name|event
parameter_list|,
name|double
name|progress
parameter_list|)
block|{
comment|/*          * Gets the current action. An action is represented by SVNEventAction.          * In case of a commit  an  action  can  be  determined  via  comparing           * SVNEvent.getAction() with SVNEventAction.COMMIT_-like constants.           */
name|SVNEventAction
name|action
init|=
name|event
operator|.
name|getAction
argument_list|()
decl_stmt|;
if|if
condition|(
name|action
operator|==
name|SVNEventAction
operator|.
name|COMMIT_MODIFIED
condition|)
block|{
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"Sending   "
operator|+
name|event
operator|.
name|getFile
argument_list|()
argument_list|)
expr_stmt|;
block|}
if|else if
condition|(
name|action
operator|==
name|SVNEventAction
operator|.
name|COMMIT_DELETED
condition|)
block|{
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"Deleting   "
operator|+
name|event
operator|.
name|getFile
argument_list|()
argument_list|)
expr_stmt|;
block|}
if|else if
condition|(
name|action
operator|==
name|SVNEventAction
operator|.
name|COMMIT_REPLACED
condition|)
block|{
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"Replacing   "
operator|+
name|event
operator|.
name|getFile
argument_list|()
argument_list|)
expr_stmt|;
block|}
if|else if
condition|(
name|action
operator|==
name|SVNEventAction
operator|.
name|COMMIT_DELTA_SENT
condition|)
block|{
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"Transmitting file data...."
argument_list|)
expr_stmt|;
block|}
if|else if
condition|(
name|action
operator|==
name|SVNEventAction
operator|.
name|COMMIT_ADDED
condition|)
block|{
comment|/*              * Gets the MIME-type of the item.              */
name|String
name|mimeType
init|=
name|event
operator|.
name|getMimeType
argument_list|()
decl_stmt|;
if|if
condition|(
name|SVNProperty
operator|.
name|isBinaryMimeType
argument_list|(
name|mimeType
argument_list|)
condition|)
block|{
comment|/*                  * If the item is a binary file                  */
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"Adding  (bin)  "
operator|+
name|event
operator|.
name|getFile
argument_list|()
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"Adding         "
operator|+
name|event
operator|.
name|getFile
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
block|}
comment|/*      * Should be implemented to check if the current operation is cancelled. If       * it is, this method should throw an SVNCancelException.       */
specifier|public
name|void
name|checkCancelled
parameter_list|()
throws|throws
name|SVNCancelException
block|{
block|}
block|}
end_class

end_unit

