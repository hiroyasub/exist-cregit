begin_unit|revision:1.0.0;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * ====================================================================  * Copyright (c) 2004-2010 TMate Software Ltd.  All rights reserved.  *  * This software is licensed as described in the file COPYING, which  * you should have received as part of this distribution.  The terms  * are also available at http://svnkit.com/license.html  * If newer versions of this license are posted there, you may use a  * newer version instead, at your option.  * ====================================================================  */
end_comment

begin_package
package|package
name|org
operator|.
name|exist
operator|.
name|versioning
operator|.
name|svn
package|;
end_package

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|fail
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|FileNotFoundException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|OutputStream
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|httpclient
operator|.
name|HttpClient
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|httpclient
operator|.
name|HttpStatus
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|httpclient
operator|.
name|methods
operator|.
name|PostMethod
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|util
operator|.
name|io
operator|.
name|Resource
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|xmldb
operator|.
name|DatabaseInstanceManager
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|xmldb
operator|.
name|XmldbURI
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|AfterClass
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|BeforeClass
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_import
import|import
name|org
operator|.
name|tmatesoft
operator|.
name|svn
operator|.
name|core
operator|.
name|SVNException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|tmatesoft
operator|.
name|svn
operator|.
name|core
operator|.
name|SVNURL
import|;
end_import

begin_import
import|import
name|org
operator|.
name|tmatesoft
operator|.
name|svn
operator|.
name|core
operator|.
name|internal
operator|.
name|util
operator|.
name|SVNPathUtil
import|;
end_import

begin_import
import|import
name|org
operator|.
name|tmatesoft
operator|.
name|svn
operator|.
name|core
operator|.
name|wc
operator|.
name|SVNRevision
import|;
end_import

begin_import
import|import
name|org
operator|.
name|xmldb
operator|.
name|api
operator|.
name|DatabaseManager
import|;
end_import

begin_import
import|import
name|org
operator|.
name|xmldb
operator|.
name|api
operator|.
name|base
operator|.
name|Collection
import|;
end_import

begin_import
import|import
name|org
operator|.
name|xmldb
operator|.
name|api
operator|.
name|base
operator|.
name|Database
import|;
end_import

begin_import
import|import
name|org
operator|.
name|xmldb
operator|.
name|api
operator|.
name|base
operator|.
name|XMLDBException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|xmldb
operator|.
name|api
operator|.
name|modules
operator|.
name|CollectionManagementService
import|;
end_import

begin_comment
comment|/*  * This  is  a complex  example program that demonstrates how  you  can manage local  * working copies as well as  URLs  (that is, items located  in  the  repository) by   * means of the  API  provided in the org.tmatesoft.svn.core.wc package. The package   * itself represents  a  high-level  API  consisting of classes and interfaces which   * allow to perform operations compatible with ones of the native Subversion command  * line client.  These version control operations are logically grouped in a  set of   * classes which names meet  'SVN*Client'  pattern. For example, the package has the   * SVNUpdateClient class which is responsible for update-related operations (update,  * switch, check out). Most of the  methods of these 'client' classes are named like  * 'doSomething(..)' where 'Something' corresponds to the name of a version  control   * operation (usually similar to the name of the  corresponding  Subversion  command   * line client's command). So, for  users  familiar with the Subversion command line   * client it won't take much  effort and time  to  match a 'do*' method  against  an   * appropriate Subversion client's operation (or command, in other words).  *   * Surely, it  may  seem  not  quite handy to deal with a number of classes that all   * need to be instantiated, initialized, kept.. For example, if a developer is going   * to use all (or several) of the SVN*Client classes and most of them will access  a   * repository (in that way when authentication is demanded), it becomes tiresome  to   * provide authentication info to every one of them. So, for managing purposes  like   * the previous one the  package  has got the class  called  SVNClientManager  whose   * get*Client() methods provide all necessary SVN*Client objects to a caller.   *   * A  developer once creates an instance of  SVNClientManager  providing (if needed)   * his  authentication  info/options (options  are  similar  to  the   SVN  run-time   * configuration settings that can be found in the config file) into an  appropriate   * SVNClientManager.newInstance(..) method. Further all SVN*Client objects  provided   * by the instance of SVNClientManager will use these authentication info/options.     *    * The program illustrates a  number  of  main  operations  usually carried out upon   * working copies and URLs. Here's a brief description  of  what  the  program  does   * (main steps):  *   * 0)first of all initializes the  SVNKit  library  (it must be done prior to using   * the library);  *   * 1)if the program was run with some in parameters, it fetches them out of the args   * parameter; the program expects the following input parameters:   *   * repositoryURL wcRootPath name password   *   * 2)next instantiates an SVNClientManager providing default options and  auth  info   * to it -  these parameters will be used by  all  SVN*Client  objects that will  be  * created, kept and provided by the manager; default run-time options correspond to   * the client-side run-time settings found in the  'config'  file within the default   * SVN configuration area; also in this case the client manager will use the server-  * side run-time settings found in the 'servers' file within the same area;  *   * 3)the first operation  -  making an empty directory in a repository; that is like   * 'svn mkdir URL'  which  creates  a  new  directory  given  all  the  intermediate   * directories created); this operation is immediately committed to the repository;  *   * 4)the next operation  - creating a new local directory (importDir) and a new file   * (importFile) in it and then importing the directory into the repository;   *   * 5)the next operation - checking out the directory created in the previous step to   * a local directory defined by the myWorkingCopyPath parameter ;   *   * 6)the next operation  -  recursively getting and displaying info for each item at   * the working revision in the working copy that was  checked  out  in  the previous   * step;  *   * 7)the next operation - creating a new directory (newDir) with a file (newFile) in  * the working copy and then  recursively  scheduling (if any subdirictories existed   * they would be also added:)) the created directory for addition;  *   * 8)the next operation - recursively getting and displaying the working copy status  * not including unchanged (normal) paths; the result must include those paths which  * were scheduled for addition in the previous step;   *   * 9)the next operation  - recursively updating the working copy; if any local items  * are out of date they will be updated to the latest revision;  *   * 10)the next operation - committing local changes to the repository; this will add   * the directory with the file (that were  scheduled  for addition two steps before)   * to the repository;  *   * 11)the next operation  -  locking  the  file  committed in the previous step (for   * example, if you temporarily need to keep a file locked to prevent someone's  else   * modifications);  *   * 12)the next operation  -  showing status once again (here, to see that  the  file   * was locked);  *   * 13)the next operation  -  copying  with  history  one  URL (url)  to another  one   * (copyURL) within the same repository;  *   * 14)the next operation - switching the working copy to a different  URL  (copyURL)  * where url was copied to in the previous step;  *   * 15)the next operation  -  recursively  getting  and  displaying  info on the root   * directory of the working copy to demonstrate that the working copy is now  really  * switched against copyURL;  *   * 16)the next operation - scheduling the newDir directory for deletion;  *   * 17)the next operation  -  showing  status  once  again  (here, to  see  that  the   * directory with all its entries were scheduled for deletion);  *   * 18)the next operation - committing local changes to the repository; this operation  * will delete the directory (newDir) with the file (newFile) that were scheduled for  * deletion from the repository;  *   *                                    * * *  *                                      * This example can be  run  for a locally  installed  Subversion  repository via the   * svn:// protocol. This is how you can do it:  *   * 1)after you install the Subversion on your machine (SVN is available for  download   * at  http://subversion.tigris.org/),  you should  create  a  new  repository  in  a   * directory, like this (in a command line under a Windows OS):  *   *>svnadmin create X:\path\to\rep  *   * 2)after the repository is created you can add a new account: open X:\path\to\rep\,   * then move into \conf and open the file - 'passwd'.  In  the file  you'll  see  the   * section [users]. Uncomment it and add a new account below the section name, like:  *   * [users]   * userName = userPassword  *   * In the program you may further use this account as user's credentials.  *   * 3)the  next  step  is  to  launch  the  custom  Subversion  server (svnserve) in a   * background mode for the just created repository:  *   *>svnserve -d -r X:\path\to  *   * That's all. The repository is now available via  svn://localhost/rep.  *   *                                    * * *  *   * While  the  program  is  running, in your console  you'll see something like this:    	Making a new directory at 'svn://localhost/testRep/MyRepos'... 	Committed to revision 70 	 	Importing a new directory into 'svn://localhost/testRep/MyRepos/importDir'... 	Adding         importFile.txt 	Committed to revision 71 	 	Checking out a working copy from 'svn://localhost/testRep/MyRepos'... 	A         importDir 	A         importDir/importFile.txt 	At revision 71 	 	-----------------INFO----------------- 	Local Path: N:\MyWorkingCopy 	URL: svn://localhost/testRep/MyRepos 	Repository UUID: dbe83c44-f5aa-e043-94ec-ecdf6c56480f 	Revision: 71 	Node Kind: dir 	Schedule: normal 	Last Changed Author: userName 	Last Changed Revision: 71 	Last Changed Date: Thu Jul 21 23:43:15 NOVST 2005 	-----------------INFO----------------- 	Local Path: N:\MyWorkingCopy\importDir 	URL: svn://localhost/testRep/MyRepos/importDir 	Repository UUID: dbe83c44-f5aa-e043-94ec-ecdf6c56480f 	Revision: 71 	Node Kind: dir 	Schedule: normal 	Last Changed Author: userName 	Last Changed Revision: 71 	Last Changed Date: Thu Jul 21 23:43:15 NOVST 2005 	-----------------INFO----------------- 	Local Path: N:\MyWorkingCopy\importDir\importFile.txt 	URL: svn://localhost/testRep/MyRepos/importDir/importFile.txt 	Repository UUID: dbe83c44-f5aa-e043-94ec-ecdf6c56480f 	Revision: 71 	Node Kind: file 	Schedule: normal 	Last Changed Author: userName 	Last Changed Revision: 71 	Last Changed Date: Thu Jul 21 23:43:15 NOVST 2005 	Properties Last Updated: Thu Jul 21 23:43:16 NOVST 2005 	Text Last Updated: Thu Jul 21 23:43:16 NOVST 2005 	Checksum: 75e9e68e21ae4453f318424738aef57e 	 	Recursively scheduling a new directory 'N:\MyWorkingCopy\newDir' for addition... 	A     newDir 	A     newDir/newFile.txt 	 	Status for 'N:\MyWorkingCopy': 	A          0     ?    ?                 N:\MyWorkingCopy\newDir\newFile.txt 	A          0     ?    ?                 N:\MyWorkingCopy\newDir 	 	Updating 'N:\MyWorkingCopy'... 	At revision 71 	 	Committing changes for 'N:\MyWorkingCopy'... 	Adding         newDir 	Adding         newDir/newFile.txt 	Transmitting file data.... 	Committed to revision 72 	 	Locking (with stealing if the entry is already locked) 'N:\MyWorkingCopy\newDir\newFile.txt'. 	L     newFile.txt 	 	Status for 'N:\MyWorkingCopy': 	     K     72    72    userName         N:\MyWorkingCopy\newDir\newFile.txt 	 	Copying 'svn://localhost/testRep/MyRepos' to 'svn://localhost/testRep/MyReposCopy'... 	Committed to revision 73 	 	Switching 'N:\MyWorkingCopy' to 'svn://localhost/testRep/MyReposCopy'... 	  B       newDir/newFile.txt 	At revision 73 	 	-----------------INFO----------------- 	Local Path: N:\MyWorkingCopy 	URL: svn://localhost/testRep/MyReposCopy 	Repository UUID: dbe83c44-f5aa-e043-94ec-ecdf6c56480f 	Revision: 73 	Node Kind: dir 	Schedule: normal 	Last Changed Author: userName 	Last Changed Revision: 73 	Last Changed Date: Thu Jul 21 23:43:19 NOVST 2005 	-----------------INFO----------------- 	Local Path: N:\MyWorkingCopy\importDir 	URL: svn://localhost/testRep/MyReposCopy/importDir 	Repository UUID: dbe83c44-f5aa-e043-94ec-ecdf6c56480f 	Revision: 73 	Node Kind: dir 	Schedule: normal 	Last Changed Author: userName 	Last Changed Revision: 71 	Last Changed Date: Thu Jul 21 23:43:15 NOVST 2005 	-----------------INFO----------------- 	Local Path: N:\MyWorkingCopy\importDir\importFile.txt 	URL: svn://localhost/testRep/MyReposCopy/importDir/importFile.txt 	Repository UUID: dbe83c44-f5aa-e043-94ec-ecdf6c56480f 	Revision: 73 	Node Kind: file 	Schedule: normal 	Last Changed Author: userName 	Last Changed Revision: 71 	Last Changed Date: Thu Jul 21 23:43:15 NOVST 2005 	Properties Last Updated: Thu Jul 21 23:43:16 NOVST 2005 	Text Last Updated: Thu Jul 21 23:43:16 NOVST 2005 	Checksum: 75e9e68e21ae4453f318424738aef57e 	-----------------INFO----------------- 	Local Path: N:\MyWorkingCopy\newDir 	URL: svn://localhost/testRep/MyReposCopy/newDir 	Repository UUID: dbe83c44-f5aa-e043-94ec-ecdf6c56480f 	Revision: 73 	Node Kind: dir 	Schedule: normal 	Last Changed Author: userName 	Last Changed Revision: 72 	Last Changed Date: Thu Jul 21 23:43:18 NOVST 2005 	-----------------INFO----------------- 	Local Path: N:\MyWorkingCopy\newDir\newFile.txt 	URL: svn://localhost/testRep/MyReposCopy/newDir/newFile.txt 	Repository UUID: dbe83c44-f5aa-e043-94ec-ecdf6c56480f 	Revision: 73 	Node Kind: file 	Schedule: normal 	Last Changed Author: userName 	Last Changed Revision: 72 	Last Changed Date: Thu Jul 21 23:43:18 NOVST 2005 	Properties Last Updated: Thu Jul 21 23:43:20 NOVST 2005 	Text Last Updated: Thu Jul 21 23:43:18 NOVST 2005 	Checksum: 023b67e9660b2faabaf84b10ba32c6cf 	 	Scheduling 'N:\MyWorkingCopy\newDir' for deletion ... 	D     newDir/newFile.txt 	D     newDir 	 	Status for 'N:\MyWorkingCopy': 	D          73    72    userName         N:\MyWorkingCopy\newDir\newFile.txt 	D          73    72    userName         N:\MyWorkingCopy\newDir 	 	Committing changes for 'N:\MyWorkingCopy'... 	Deleting   newDir 	Committed to revision 74  *   */
end_comment

begin_class
specifier|public
class|class
name|WorkingCopyTesting
block|{
specifier|private
specifier|static
name|String
name|myHomePath
init|=
literal|"/db"
decl_stmt|;
specifier|private
specifier|static
name|String
name|myWorkingCopyName
init|=
literal|"svn-test"
decl_stmt|;
specifier|private
specifier|static
name|String
name|myWorkingCopyPath
init|=
literal|"/"
operator|+
name|myWorkingCopyName
decl_stmt|;
specifier|private
specifier|static
name|String
name|importDirName
init|=
literal|"importDir"
decl_stmt|;
specifier|private
specifier|static
name|String
name|importDir
init|=
literal|"/"
operator|+
name|importDirName
decl_stmt|;
specifier|private
specifier|static
name|String
name|repositoryID
init|=
literal|null
decl_stmt|;
specifier|private
name|String
name|URL
init|=
literal|"https://support.syntactica.com/exist_svn/"
decl_stmt|;
comment|//	private String URL = "svn://localhost/"; //change local = true if use local svn server
specifier|private
specifier|static
name|boolean
name|local
init|=
literal|false
decl_stmt|;
annotation|@
name|Test
specifier|public
name|void
name|test
parameter_list|()
throws|throws
name|SVNException
block|{
comment|/*          * Default values:          */
comment|/*          * Assuming that URL+repositoryID is an existing repository path.          * SVNURL is a wrapper for URL strings that refer to repository locations.          */
name|SVNURL
name|repositoryURL
init|=
literal|null
decl_stmt|;
try|try
block|{
name|repositoryURL
operator|=
name|SVNURL
operator|.
name|parseURIEncoded
argument_list|(
name|URL
operator|+
name|repositoryID
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|SVNException
name|e
parameter_list|)
block|{
comment|//
block|}
name|String
name|username
init|=
literal|"existtest"
decl_stmt|;
name|String
name|password
init|=
literal|"existtest"
decl_stmt|;
comment|//        String username = "harry";
comment|//        String password = "harryssecret";
name|String
name|importFile
init|=
name|importDir
operator|+
literal|"/importFile.txt"
decl_stmt|;
name|String
name|importFileText
init|=
literal|"This unversioned file is imported into a repository"
decl_stmt|;
name|String
name|newDir
init|=
literal|"/newDir"
decl_stmt|;
name|String
name|newFile
init|=
name|newDir
operator|+
literal|"/newFile.txt"
decl_stmt|;
name|String
name|fileText
init|=
literal|"This is a new file added to the working copy"
decl_stmt|;
name|String
name|newFileXml
init|=
name|newDir
operator|+
literal|"/newFile.xml"
decl_stmt|;
name|String
name|fileTextXml
init|=
literal|"<test/>"
decl_stmt|;
comment|/*          * That's where a new directory will be created          */
name|SVNURL
name|url
init|=
name|repositoryURL
operator|.
name|appendPath
argument_list|(
literal|"MyRepos"
argument_list|,
literal|false
argument_list|)
decl_stmt|;
comment|/*          * That's where '/MyRepos' will be copied to (branched)          */
name|SVNURL
name|copyURL
init|=
name|repositoryURL
operator|.
name|appendPath
argument_list|(
literal|"MyReposCopy"
argument_list|,
literal|false
argument_list|)
decl_stmt|;
comment|/*          * That's where a local directory will be imported into.          * Note that it's not necessary that the '/importDir' directory must already          * exist - the SVN repository server will take care of creating it.           */
name|SVNURL
name|importToURL
init|=
name|url
operator|.
name|appendPath
argument_list|(
name|importDir
argument_list|,
literal|false
argument_list|)
decl_stmt|;
name|WorkingCopy
name|wc
init|=
operator|new
name|WorkingCopy
argument_list|(
name|username
argument_list|,
name|password
argument_list|)
decl_stmt|;
name|long
name|committedRevision
init|=
operator|-
literal|1
decl_stmt|;
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"Making a new directory at '"
operator|+
name|url
operator|+
literal|"'..."
argument_list|)
expr_stmt|;
try|try
block|{
comment|/*              * creates a new version controlled directory in a repository and               * displays what revision the repository was committed to              */
name|committedRevision
operator|=
name|wc
operator|.
name|makeDirectory
argument_list|(
name|url
argument_list|,
literal|"making a new directory at '"
operator|+
name|url
operator|+
literal|"'"
argument_list|)
operator|.
name|getNewRevision
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|SVNException
name|svne
parameter_list|)
block|{
name|error
argument_list|(
literal|"error while making a new directory at '"
operator|+
name|url
operator|+
literal|"'"
argument_list|,
name|svne
argument_list|)
expr_stmt|;
block|}
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"Committed to revision "
operator|+
name|committedRevision
argument_list|)
expr_stmt|;
name|System
operator|.
name|out
operator|.
name|println
argument_list|()
expr_stmt|;
name|Resource
name|anImportDir
init|=
operator|new
name|Resource
argument_list|(
name|myHomePath
operator|+
name|importDir
argument_list|)
decl_stmt|;
name|Resource
name|anImportFile
init|=
operator|new
name|Resource
argument_list|(
name|anImportDir
argument_list|,
name|SVNPathUtil
operator|.
name|tail
argument_list|(
name|importFile
argument_list|)
argument_list|)
decl_stmt|;
comment|/*          * creates a new local directory - './importDir' and a new file -           * './importDir/importFile.txt' that will be imported into the repository          * into the '/MyRepos/importDir' directory           */
name|createLocalDir
argument_list|(
name|anImportDir
argument_list|,
operator|new
name|Resource
index|[]
block|{
name|anImportFile
block|}
argument_list|,
operator|new
name|String
index|[]
block|{
name|importFileText
block|}
argument_list|)
expr_stmt|;
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"Importing a new directory into '"
operator|+
name|importToURL
operator|+
literal|"'..."
argument_list|)
expr_stmt|;
try|try
block|{
comment|/*              * recursively imports an unversioned directory into a repository               * and displays what revision the repository was committed to              */
name|boolean
name|isRecursive
init|=
literal|true
decl_stmt|;
name|committedRevision
operator|=
name|wc
operator|.
name|importDirectory
argument_list|(
name|anImportDir
argument_list|,
name|importToURL
argument_list|,
literal|"importing a new directory '"
operator|+
name|anImportDir
operator|.
name|getAbsolutePath
argument_list|()
operator|+
literal|"'"
argument_list|,
name|isRecursive
argument_list|)
operator|.
name|getNewRevision
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|SVNException
name|svne
parameter_list|)
block|{
name|error
argument_list|(
literal|"error while importing a new directory '"
operator|+
name|anImportDir
operator|.
name|getAbsolutePath
argument_list|()
operator|+
literal|"' into '"
operator|+
name|importToURL
operator|+
literal|"'"
argument_list|,
name|svne
argument_list|)
expr_stmt|;
block|}
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"Committed to revision "
operator|+
name|committedRevision
argument_list|)
expr_stmt|;
name|System
operator|.
name|out
operator|.
name|println
argument_list|()
expr_stmt|;
comment|/*          * creates a local directory where the working copy will be checked out into          */
name|Resource
name|wcDir
init|=
operator|new
name|Resource
argument_list|(
name|myHomePath
operator|+
name|myWorkingCopyPath
argument_list|)
decl_stmt|;
if|if
condition|(
name|wcDir
operator|.
name|exists
argument_list|()
condition|)
block|{
name|error
argument_list|(
literal|"the destination directory '"
operator|+
name|wcDir
operator|.
name|getAbsolutePath
argument_list|()
operator|+
literal|"' already exists!"
argument_list|,
literal|null
argument_list|)
expr_stmt|;
block|}
name|wcDir
operator|.
name|mkdirs
argument_list|()
expr_stmt|;
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"Checking out a working copy from '"
operator|+
name|url
operator|+
literal|"'..."
argument_list|)
expr_stmt|;
try|try
block|{
comment|/*              * recursively checks out a working copy from url into wcDir.              * SVNRevision.HEAD means the latest revision to be checked out.               */
name|wc
operator|.
name|checkout
argument_list|(
name|url
argument_list|,
name|SVNRevision
operator|.
name|HEAD
argument_list|,
name|wcDir
argument_list|,
literal|true
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|SVNException
name|svne
parameter_list|)
block|{
name|error
argument_list|(
literal|"error while checking out a working copy for the location '"
operator|+
name|url
operator|+
literal|"'"
argument_list|,
name|svne
argument_list|)
expr_stmt|;
block|}
name|System
operator|.
name|out
operator|.
name|println
argument_list|()
expr_stmt|;
comment|/*          * recursively displays info for wcDir at the current working revision           * in the manner of 'svn info -R' command          */
try|try
block|{
name|wc
operator|.
name|showInfo
argument_list|(
name|wcDir
argument_list|,
name|SVNRevision
operator|.
name|WORKING
argument_list|,
literal|true
argument_list|,
operator|new
name|InfoHandler
argument_list|()
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|SVNException
name|svne
parameter_list|)
block|{
name|error
argument_list|(
literal|"error while recursively getting info for the working copy at'"
operator|+
name|wcDir
operator|.
name|getAbsolutePath
argument_list|()
operator|+
literal|"'"
argument_list|,
name|svne
argument_list|)
expr_stmt|;
block|}
name|System
operator|.
name|out
operator|.
name|println
argument_list|()
expr_stmt|;
name|Resource
name|aNewDir
init|=
operator|new
name|Resource
argument_list|(
name|wcDir
argument_list|,
name|newDir
argument_list|)
decl_stmt|;
name|Resource
name|aNewFile
init|=
operator|new
name|Resource
argument_list|(
name|aNewDir
argument_list|,
name|SVNPathUtil
operator|.
name|tail
argument_list|(
name|newFile
argument_list|)
argument_list|)
decl_stmt|;
name|Resource
name|aNewFileXml
init|=
operator|new
name|Resource
argument_list|(
name|aNewDir
argument_list|,
name|SVNPathUtil
operator|.
name|tail
argument_list|(
name|newFileXml
argument_list|)
argument_list|)
decl_stmt|;
comment|/*          * creates a new local directory - 'wcDir/newDir' and a new file -           * '/MyWorkspace/newDir/newFile.txt'           */
name|createLocalDir
argument_list|(
name|aNewDir
argument_list|,
operator|new
name|Resource
index|[]
block|{
name|aNewFile
block|,
name|aNewFileXml
block|}
argument_list|,
operator|new
name|String
index|[]
block|{
name|fileText
block|,
name|fileTextXml
block|}
argument_list|)
expr_stmt|;
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"Recursively scheduling a new directory '"
operator|+
name|aNewDir
operator|.
name|getAbsolutePath
argument_list|()
operator|+
literal|"' for addition..."
argument_list|)
expr_stmt|;
try|try
block|{
comment|/*              * recursively schedules aNewDir for addition              */
name|wc
operator|.
name|addEntry
argument_list|(
name|aNewDir
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|SVNException
name|svne
parameter_list|)
block|{
name|error
argument_list|(
literal|"error while recursively adding the directory '"
operator|+
name|aNewDir
operator|.
name|getAbsolutePath
argument_list|()
operator|+
literal|"'"
argument_list|,
name|svne
argument_list|)
expr_stmt|;
block|}
name|System
operator|.
name|out
operator|.
name|println
argument_list|()
expr_stmt|;
name|boolean
name|isRecursive
init|=
literal|true
decl_stmt|;
name|boolean
name|isRemote
init|=
literal|true
decl_stmt|;
name|boolean
name|isReportAll
init|=
literal|false
decl_stmt|;
name|boolean
name|isIncludeIgnored
init|=
literal|true
decl_stmt|;
name|boolean
name|isCollectParentExternals
init|=
literal|false
decl_stmt|;
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"Status for '"
operator|+
name|wcDir
operator|.
name|getAbsolutePath
argument_list|()
operator|+
literal|"':"
argument_list|)
expr_stmt|;
try|try
block|{
comment|/*              * gets and shows status information for the WC directory.              * status will be recursive on wcDir, will also cover the repository,               * won't cover unmodified entries, will disregard 'svn:ignore' property               * ignores (if any), will ignore externals definitions.              */
name|wc
operator|.
name|showStatus
argument_list|(
name|wcDir
argument_list|,
name|isRecursive
argument_list|,
name|isRemote
argument_list|,
name|isReportAll
argument_list|,
name|isIncludeIgnored
argument_list|,
name|isCollectParentExternals
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|SVNException
name|svne
parameter_list|)
block|{
name|error
argument_list|(
literal|"error while recursively performing status for '"
operator|+
name|wcDir
operator|.
name|getAbsolutePath
argument_list|()
operator|+
literal|"'"
argument_list|,
name|svne
argument_list|)
expr_stmt|;
block|}
name|System
operator|.
name|out
operator|.
name|println
argument_list|()
expr_stmt|;
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"Updating '"
operator|+
name|wcDir
operator|.
name|getAbsolutePath
argument_list|()
operator|+
literal|"'..."
argument_list|)
expr_stmt|;
try|try
block|{
comment|/*              * recursively updates wcDir to the latest revision (SVNRevision.HEAD)              */
name|wc
operator|.
name|update
argument_list|(
name|wcDir
argument_list|,
name|SVNRevision
operator|.
name|HEAD
argument_list|,
literal|true
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|SVNException
name|svne
parameter_list|)
block|{
name|error
argument_list|(
literal|"error while recursively updating the working copy at '"
operator|+
name|wcDir
operator|.
name|getAbsolutePath
argument_list|()
operator|+
literal|"'"
argument_list|,
name|svne
argument_list|)
expr_stmt|;
block|}
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|""
argument_list|)
expr_stmt|;
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"Committing changes for '"
operator|+
name|wcDir
operator|.
name|getAbsolutePath
argument_list|()
operator|+
literal|"'..."
argument_list|)
expr_stmt|;
try|try
block|{
comment|/*              * commits changes in wcDir to the repository with not leaving items               * locked (if any) after the commit succeeds; this will add aNewDir&               * aNewFile to the repository.               */
name|committedRevision
operator|=
name|wc
operator|.
name|commit
argument_list|(
name|wcDir
argument_list|,
literal|false
argument_list|,
literal|"'/newDir' with '/newDir/newFile.txt' were added"
argument_list|)
operator|.
name|getNewRevision
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|SVNException
name|svne
parameter_list|)
block|{
name|error
argument_list|(
literal|"error while committing changes to the working copy at '"
operator|+
name|wcDir
operator|.
name|getAbsolutePath
argument_list|()
operator|+
literal|"'"
argument_list|,
name|svne
argument_list|)
expr_stmt|;
block|}
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"Committed to revision "
operator|+
name|committedRevision
argument_list|)
expr_stmt|;
name|System
operator|.
name|out
operator|.
name|println
argument_list|()
expr_stmt|;
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"Locking (with stealing if the entry is already locked) '"
operator|+
name|aNewFile
operator|.
name|getAbsolutePath
argument_list|()
operator|+
literal|"'."
argument_list|)
expr_stmt|;
try|try
block|{
comment|/*              * locks aNewFile with stealing (if it has been already locked by someone              * else), providing a lock comment              */
name|wc
operator|.
name|lock
argument_list|(
name|aNewFile
argument_list|,
literal|true
argument_list|,
literal|"locking '/newDir/newFile.txt'"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|SVNException
name|svne
parameter_list|)
block|{
name|error
argument_list|(
literal|"error while locking the working copy file '"
operator|+
name|aNewFile
operator|.
name|getAbsolutePath
argument_list|()
operator|+
literal|"'"
argument_list|,
name|svne
argument_list|)
expr_stmt|;
block|}
name|System
operator|.
name|out
operator|.
name|println
argument_list|()
expr_stmt|;
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"Status for '"
operator|+
name|wcDir
operator|.
name|getAbsolutePath
argument_list|()
operator|+
literal|"':"
argument_list|)
expr_stmt|;
try|try
block|{
comment|/*              * displays status once again to see the file is really locked              */
name|wc
operator|.
name|showStatus
argument_list|(
name|wcDir
argument_list|,
name|isRecursive
argument_list|,
name|isRemote
argument_list|,
name|isReportAll
argument_list|,
name|isIncludeIgnored
argument_list|,
name|isCollectParentExternals
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|SVNException
name|svne
parameter_list|)
block|{
name|error
argument_list|(
literal|"error while recursively performing status for '"
operator|+
name|wcDir
operator|.
name|getAbsolutePath
argument_list|()
operator|+
literal|"'"
argument_list|,
name|svne
argument_list|)
expr_stmt|;
block|}
name|System
operator|.
name|out
operator|.
name|println
argument_list|()
expr_stmt|;
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"Copying '"
operator|+
name|url
operator|+
literal|"' to '"
operator|+
name|copyURL
operator|+
literal|"'..."
argument_list|)
expr_stmt|;
try|try
block|{
comment|/*              * makes a branch of url at copyURL - that is URL->URL copying              * with history              */
name|committedRevision
operator|=
name|wc
operator|.
name|copy
argument_list|(
name|url
argument_list|,
name|copyURL
argument_list|,
literal|false
argument_list|,
literal|"remotely copying '"
operator|+
name|url
operator|+
literal|"' to '"
operator|+
name|copyURL
operator|+
literal|"'"
argument_list|)
operator|.
name|getNewRevision
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|SVNException
name|svne
parameter_list|)
block|{
name|error
argument_list|(
literal|"error while copying '"
operator|+
name|url
operator|+
literal|"' to '"
operator|+
name|copyURL
operator|+
literal|"'"
argument_list|,
name|svne
argument_list|)
expr_stmt|;
block|}
comment|/*         * displays what revision the repository was committed to         */
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"Committed to revision "
operator|+
name|committedRevision
argument_list|)
expr_stmt|;
name|System
operator|.
name|out
operator|.
name|println
argument_list|()
expr_stmt|;
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"Switching '"
operator|+
name|wcDir
operator|.
name|getAbsolutePath
argument_list|()
operator|+
literal|"' to '"
operator|+
name|copyURL
operator|+
literal|"'..."
argument_list|)
expr_stmt|;
try|try
block|{
comment|/*              * recursively switches wcDir to copyURL in the latest revision               * (SVNRevision.HEAD)              */
name|wc
operator|.
name|switchToURL
argument_list|(
name|wcDir
argument_list|,
name|copyURL
argument_list|,
name|SVNRevision
operator|.
name|HEAD
argument_list|,
literal|true
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|SVNException
name|svne
parameter_list|)
block|{
name|error
argument_list|(
literal|"error while switching '"
operator|+
name|wcDir
operator|.
name|getAbsolutePath
argument_list|()
operator|+
literal|"' to '"
operator|+
name|copyURL
operator|+
literal|"'"
argument_list|,
name|svne
argument_list|)
expr_stmt|;
block|}
name|System
operator|.
name|out
operator|.
name|println
argument_list|()
expr_stmt|;
comment|/*          * recursively displays info for the working copy once again to see          * it was really switched to a new URL          */
try|try
block|{
name|wc
operator|.
name|showInfo
argument_list|(
name|wcDir
argument_list|,
name|SVNRevision
operator|.
name|WORKING
argument_list|,
literal|true
argument_list|,
operator|new
name|InfoHandler
argument_list|()
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|SVNException
name|svne
parameter_list|)
block|{
name|error
argument_list|(
literal|"error while recursively getting info for the working copy at'"
operator|+
name|wcDir
operator|.
name|getAbsolutePath
argument_list|()
operator|+
literal|"'"
argument_list|,
name|svne
argument_list|)
expr_stmt|;
block|}
name|System
operator|.
name|out
operator|.
name|println
argument_list|()
expr_stmt|;
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"Scheduling '"
operator|+
name|aNewDir
operator|.
name|getAbsolutePath
argument_list|()
operator|+
literal|"' for deletion ..."
argument_list|)
expr_stmt|;
try|try
block|{
comment|/*              * schedules aNewDir for deletion (with forcing)              */
name|wc
operator|.
name|delete
argument_list|(
name|aNewDir
argument_list|,
literal|true
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|SVNException
name|svne
parameter_list|)
block|{
name|error
argument_list|(
literal|"error while schediling '"
operator|+
name|wcDir
operator|.
name|getAbsolutePath
argument_list|()
operator|+
literal|"' for deletion"
argument_list|,
name|svne
argument_list|)
expr_stmt|;
block|}
name|System
operator|.
name|out
operator|.
name|println
argument_list|()
expr_stmt|;
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"Status for '"
operator|+
name|wcDir
operator|.
name|getAbsolutePath
argument_list|()
operator|+
literal|"':"
argument_list|)
expr_stmt|;
try|try
block|{
comment|/*              * recursively displays status once more to see whether aNewDir              * was really scheduled for deletion                */
name|wc
operator|.
name|showStatus
argument_list|(
name|wcDir
argument_list|,
name|isRecursive
argument_list|,
name|isRemote
argument_list|,
name|isReportAll
argument_list|,
name|isIncludeIgnored
argument_list|,
name|isCollectParentExternals
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|SVNException
name|svne
parameter_list|)
block|{
name|error
argument_list|(
literal|"error while recursively performing status for '"
operator|+
name|wcDir
operator|.
name|getAbsolutePath
argument_list|()
operator|+
literal|"'"
argument_list|,
name|svne
argument_list|)
expr_stmt|;
block|}
name|System
operator|.
name|out
operator|.
name|println
argument_list|()
expr_stmt|;
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"Committing changes for '"
operator|+
name|wcDir
operator|.
name|getAbsolutePath
argument_list|()
operator|+
literal|"'..."
argument_list|)
expr_stmt|;
try|try
block|{
comment|/*              * lastly commits changes in wcDir to the repository; all items that              * were locked by the user (if any) will be unlocked after the commit               * succeeds; this commit will remove aNewDir from the repository.               */
name|committedRevision
operator|=
name|wc
operator|.
name|commit
argument_list|(
name|wcDir
argument_list|,
literal|false
argument_list|,
literal|"deleting '"
operator|+
name|aNewDir
operator|.
name|getAbsolutePath
argument_list|()
operator|+
literal|"' from the filesystem as well as from the repository"
argument_list|)
operator|.
name|getNewRevision
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|SVNException
name|svne
parameter_list|)
block|{
name|error
argument_list|(
literal|"error while committing changes to the working copy '"
operator|+
name|wcDir
operator|.
name|getAbsolutePath
argument_list|()
operator|+
literal|"'"
argument_list|,
name|svne
argument_list|)
expr_stmt|;
block|}
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"Committed to revision "
operator|+
name|committedRevision
argument_list|)
expr_stmt|;
name|deleteRepository
argument_list|(
name|repositoryID
argument_list|)
expr_stmt|;
block|}
comment|/*      * Displays error information and exits.       */
specifier|private
specifier|static
name|void
name|error
parameter_list|(
name|String
name|message
parameter_list|,
name|Exception
name|e
parameter_list|)
block|{
comment|//    	e.printStackTrace();
throw|throw
operator|new
name|RuntimeException
argument_list|(
name|message
operator|+
operator|(
name|e
operator|!=
literal|null
condition|?
literal|": "
operator|+
name|e
operator|.
name|getMessage
argument_list|()
else|:
literal|""
operator|)
argument_list|)
throw|;
comment|//        Assert.assertTrue(message+(e!=null ? ": "+e.getMessage() : ""), false);
block|}
comment|/*      * This method does not relate to SVNKit API. Just a method which creates      * local directories and files :)      */
specifier|private
specifier|static
specifier|final
name|void
name|createLocalDir
parameter_list|(
name|Resource
name|aNewDir
parameter_list|,
name|Resource
index|[]
name|localFiles
parameter_list|,
name|String
index|[]
name|fileContents
parameter_list|)
block|{
if|if
condition|(
operator|!
name|aNewDir
operator|.
name|mkdirs
argument_list|()
condition|)
block|{
name|error
argument_list|(
literal|"failed to create a new directory '"
operator|+
name|aNewDir
operator|.
name|getAbsolutePath
argument_list|()
operator|+
literal|"'."
argument_list|,
literal|null
argument_list|)
expr_stmt|;
block|}
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|localFiles
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
name|Resource
name|aNewFile
init|=
name|localFiles
index|[
name|i
index|]
decl_stmt|;
try|try
block|{
if|if
condition|(
operator|!
name|aNewFile
operator|.
name|createNewFile
argument_list|()
condition|)
block|{
name|error
argument_list|(
literal|"failed to create a new file '"
operator|+
name|aNewFile
operator|.
name|getAbsolutePath
argument_list|()
operator|+
literal|"'."
argument_list|,
literal|null
argument_list|)
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
name|IOException
name|ioe
parameter_list|)
block|{
name|aNewFile
operator|.
name|delete
argument_list|()
expr_stmt|;
name|error
argument_list|(
literal|"error while creating a new file '"
operator|+
name|aNewFile
operator|.
name|getAbsolutePath
argument_list|()
operator|+
literal|"'"
argument_list|,
name|ioe
argument_list|)
expr_stmt|;
block|}
name|String
name|contents
init|=
literal|null
decl_stmt|;
if|if
condition|(
name|i
operator|>
name|fileContents
operator|.
name|length
operator|-
literal|1
condition|)
block|{
continue|continue;
block|}
name|contents
operator|=
name|fileContents
index|[
name|i
index|]
expr_stmt|;
comment|/* 	         * writing a text into the file 	         */
name|OutputStream
name|fos
init|=
literal|null
decl_stmt|;
try|try
block|{
name|fos
operator|=
name|aNewFile
operator|.
name|getOutputStream
argument_list|()
expr_stmt|;
name|fos
operator|.
name|write
argument_list|(
name|contents
operator|.
name|getBytes
argument_list|()
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|FileNotFoundException
name|fnfe
parameter_list|)
block|{
name|error
argument_list|(
literal|"the file '"
operator|+
name|aNewFile
operator|.
name|getAbsolutePath
argument_list|()
operator|+
literal|"' is not found"
argument_list|,
name|fnfe
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|ioe
parameter_list|)
block|{
name|error
argument_list|(
literal|"error while writing into the file '"
operator|+
name|aNewFile
operator|.
name|getAbsolutePath
argument_list|()
operator|+
literal|"'"
argument_list|,
name|ioe
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
if|if
condition|(
name|fos
operator|!=
literal|null
condition|)
block|{
try|try
block|{
name|fos
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|ioe
parameter_list|)
block|{
comment|//
block|}
block|}
block|}
block|}
block|}
annotation|@
name|BeforeClass
specifier|public
specifier|static
name|void
name|initDB
parameter_list|()
block|{
comment|// initialize XML:DB driver
try|try
block|{
name|Class
argument_list|<
name|?
argument_list|>
name|cl
init|=
name|Class
operator|.
name|forName
argument_list|(
literal|"org.exist.xmldb.DatabaseImpl"
argument_list|)
decl_stmt|;
name|Database
name|database
init|=
operator|(
name|Database
operator|)
name|cl
operator|.
name|newInstance
argument_list|()
decl_stmt|;
name|database
operator|.
name|setProperty
argument_list|(
literal|"create-database"
argument_list|,
literal|"true"
argument_list|)
expr_stmt|;
name|DatabaseManager
operator|.
name|registerDatabase
argument_list|(
name|database
argument_list|)
expr_stmt|;
name|repositoryID
operator|=
name|createRepository
argument_list|()
expr_stmt|;
comment|//		    myWorkingCopyName = repositoryID;
comment|//		    myWorkingCopyPath = "/"+myWorkingCopyName;
name|org
operator|.
name|xmldb
operator|.
name|api
operator|.
name|base
operator|.
name|Collection
name|root
init|=
name|DatabaseManager
operator|.
name|getCollection
argument_list|(
name|XmldbURI
operator|.
name|LOCAL_DB
argument_list|,
literal|"admin"
argument_list|,
literal|""
argument_list|)
decl_stmt|;
name|CollectionManagementService
name|mgmt
init|=
operator|(
name|CollectionManagementService
operator|)
name|root
operator|.
name|getService
argument_list|(
literal|"CollectionManagementService"
argument_list|,
literal|"1.0"
argument_list|)
decl_stmt|;
try|try
block|{
name|mgmt
operator|.
name|removeCollection
argument_list|(
name|myWorkingCopyName
argument_list|)
expr_stmt|;
name|mgmt
operator|.
name|removeCollection
argument_list|(
name|importDirName
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|XMLDBException
name|e
parameter_list|)
block|{
block|}
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|e
operator|.
name|printStackTrace
argument_list|()
expr_stmt|;
name|fail
argument_list|(
name|e
operator|.
name|getMessage
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|AfterClass
specifier|public
specifier|static
name|void
name|closeDB
parameter_list|()
block|{
try|try
block|{
if|if
condition|(
name|repositoryID
operator|!=
literal|null
condition|)
name|deleteRepository
argument_list|(
name|repositoryID
argument_list|)
expr_stmt|;
name|Collection
name|root
init|=
name|DatabaseManager
operator|.
name|getCollection
argument_list|(
name|XmldbURI
operator|.
name|LOCAL_DB
argument_list|,
literal|"admin"
argument_list|,
literal|""
argument_list|)
decl_stmt|;
comment|// CollectionManagementService cmgr = (CollectionManagementService)
comment|// root.getService("CollectionManagementService", "1.0");
comment|// cmgr.removeCollection("test");
name|DatabaseInstanceManager
name|mgr
init|=
operator|(
name|DatabaseInstanceManager
operator|)
name|root
operator|.
name|getService
argument_list|(
literal|"DatabaseInstanceManager"
argument_list|,
literal|"1.0"
argument_list|)
decl_stmt|;
name|mgr
operator|.
name|shutdown
argument_list|(
literal|2
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|XMLDBException
name|e
parameter_list|)
block|{
name|e
operator|.
name|printStackTrace
argument_list|()
expr_stmt|;
name|fail
argument_list|(
name|e
operator|.
name|getMessage
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
specifier|private
specifier|static
name|String
name|createRepository
parameter_list|()
block|{
if|if
condition|(
name|local
condition|)
return|return
literal|"svn"
return|;
name|HttpClient
name|client
init|=
operator|new
name|HttpClient
argument_list|()
decl_stmt|;
name|PostMethod
name|method
init|=
operator|new
name|PostMethod
argument_list|(
literal|"http://support.syntactica.com/cgi-bin/3A075407-AC4E-3308-9616FD4EB832EDBB.pl"
argument_list|)
decl_stmt|;
try|try
block|{
name|int
name|statusCode
init|=
name|client
operator|.
name|executeMethod
argument_list|(
name|method
argument_list|)
decl_stmt|;
if|if
condition|(
name|statusCode
operator|!=
name|HttpStatus
operator|.
name|SC_OK
condition|)
block|{
return|return
literal|null
return|;
block|}
return|return
name|method
operator|.
name|getResponseBodyAsString
argument_list|()
return|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
return|return
literal|null
return|;
block|}
block|}
specifier|private
specifier|static
name|void
name|deleteRepository
parameter_list|(
name|String
name|id
parameter_list|)
block|{
if|if
condition|(
name|local
condition|)
return|return;
name|HttpClient
name|client
init|=
operator|new
name|HttpClient
argument_list|()
decl_stmt|;
name|PostMethod
name|method
init|=
operator|new
name|PostMethod
argument_list|(
literal|"http://support.syntactica.com/cgi-bin/938A1512-5156-11DF-A4C4-D82A2BCCFF1C.pl?d="
operator|+
name|id
argument_list|)
decl_stmt|;
try|try
block|{
name|client
operator|.
name|executeMethod
argument_list|(
name|method
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
block|}
block|}
block|}
end_class

end_unit

