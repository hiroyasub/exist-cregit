begin_unit|revision:1.0.0;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * ====================================================================  * Copyright (c) 2004-2010 TMate Software Ltd.  All rights reserved.  *  * This software is licensed as described in the file COPYING, which  * you should have received as part of this distribution.  The terms  * are also available at http://svnkit.com/license.html  * If newer versions of this license are posted there, you may use a  * newer version instead, at your option.  * ====================================================================  */
end_comment

begin_package
package|package
name|org
operator|.
name|exist
operator|.
name|versioning
operator|.
name|svn
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|File
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|InputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|OutputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|RandomAccessFile
import|;
end_import

begin_import
import|import
name|java
operator|.
name|nio
operator|.
name|charset
operator|.
name|Charset
import|;
end_import

begin_import
import|import
name|java
operator|.
name|nio
operator|.
name|charset
operator|.
name|CharsetDecoder
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Date
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Iterator
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|util
operator|.
name|io
operator|.
name|Resource
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|versioning
operator|.
name|svn
operator|.
name|internal
operator|.
name|wc
operator|.
name|SVNErrorManager
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|versioning
operator|.
name|svn
operator|.
name|internal
operator|.
name|wc
operator|.
name|SVNEventFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|versioning
operator|.
name|svn
operator|.
name|internal
operator|.
name|wc
operator|.
name|SVNFileUtil
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|versioning
operator|.
name|svn
operator|.
name|internal
operator|.
name|wc
operator|.
name|admin
operator|.
name|SVNTranslatorInputStream
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|versioning
operator|.
name|svn
operator|.
name|wc
operator|.
name|ISVNEventHandler
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|versioning
operator|.
name|svn
operator|.
name|wc
operator|.
name|SVNEvent
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|versioning
operator|.
name|svn
operator|.
name|wc
operator|.
name|SVNEventAction
import|;
end_import

begin_import
import|import
name|org
operator|.
name|tmatesoft
operator|.
name|svn
operator|.
name|core
operator|.
name|SVNErrorCode
import|;
end_import

begin_import
import|import
name|org
operator|.
name|tmatesoft
operator|.
name|svn
operator|.
name|core
operator|.
name|SVNErrorMessage
import|;
end_import

begin_import
import|import
name|org
operator|.
name|tmatesoft
operator|.
name|svn
operator|.
name|core
operator|.
name|SVNException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|tmatesoft
operator|.
name|svn
operator|.
name|core
operator|.
name|SVNNodeKind
import|;
end_import

begin_import
import|import
name|org
operator|.
name|tmatesoft
operator|.
name|svn
operator|.
name|core
operator|.
name|SVNProperties
import|;
end_import

begin_import
import|import
name|org
operator|.
name|tmatesoft
operator|.
name|svn
operator|.
name|core
operator|.
name|SVNProperty
import|;
end_import

begin_import
import|import
name|org
operator|.
name|tmatesoft
operator|.
name|svn
operator|.
name|core
operator|.
name|SVNRevisionProperty
import|;
end_import

begin_import
import|import
name|org
operator|.
name|tmatesoft
operator|.
name|svn
operator|.
name|core
operator|.
name|SVNURL
import|;
end_import

begin_import
import|import
name|org
operator|.
name|tmatesoft
operator|.
name|svn
operator|.
name|core
operator|.
name|internal
operator|.
name|util
operator|.
name|SVNDate
import|;
end_import

begin_import
import|import
name|org
operator|.
name|tmatesoft
operator|.
name|svn
operator|.
name|core
operator|.
name|internal
operator|.
name|util
operator|.
name|SVNPathUtil
import|;
end_import

begin_import
import|import
name|org
operator|.
name|tmatesoft
operator|.
name|svn
operator|.
name|core
operator|.
name|io
operator|.
name|ISVNFileRevisionHandler
import|;
end_import

begin_import
import|import
name|org
operator|.
name|tmatesoft
operator|.
name|svn
operator|.
name|core
operator|.
name|io
operator|.
name|SVNFileRevision
import|;
end_import

begin_import
import|import
name|org
operator|.
name|tmatesoft
operator|.
name|svn
operator|.
name|core
operator|.
name|io
operator|.
name|SVNRepository
import|;
end_import

begin_import
import|import
name|org
operator|.
name|tmatesoft
operator|.
name|svn
operator|.
name|core
operator|.
name|io
operator|.
name|diff
operator|.
name|SVNDeltaProcessor
import|;
end_import

begin_import
import|import
name|org
operator|.
name|tmatesoft
operator|.
name|svn
operator|.
name|core
operator|.
name|io
operator|.
name|diff
operator|.
name|SVNDiffWindow
import|;
end_import

begin_import
import|import
name|org
operator|.
name|tmatesoft
operator|.
name|svn
operator|.
name|core
operator|.
name|wc
operator|.
name|ISVNAnnotateHandler
import|;
end_import

begin_import
import|import
name|org
operator|.
name|tmatesoft
operator|.
name|svn
operator|.
name|core
operator|.
name|wc
operator|.
name|SVNDiffOptions
import|;
end_import

begin_import
import|import
name|org
operator|.
name|tmatesoft
operator|.
name|svn
operator|.
name|util
operator|.
name|SVNLogType
import|;
end_import

begin_import
import|import
name|de
operator|.
name|regnis
operator|.
name|q
operator|.
name|sequence
operator|.
name|QSequenceDifferenceBlock
import|;
end_import

begin_import
import|import
name|de
operator|.
name|regnis
operator|.
name|q
operator|.
name|sequence
operator|.
name|line
operator|.
name|QSequenceLineMedia
import|;
end_import

begin_import
import|import
name|de
operator|.
name|regnis
operator|.
name|q
operator|.
name|sequence
operator|.
name|line
operator|.
name|QSequenceLineRAFileData
import|;
end_import

begin_import
import|import
name|de
operator|.
name|regnis
operator|.
name|q
operator|.
name|sequence
operator|.
name|line
operator|.
name|QSequenceLineResult
import|;
end_import

begin_import
import|import
name|de
operator|.
name|regnis
operator|.
name|q
operator|.
name|sequence
operator|.
name|line
operator|.
name|simplifier
operator|.
name|QSequenceLineDummySimplifier
import|;
end_import

begin_import
import|import
name|de
operator|.
name|regnis
operator|.
name|q
operator|.
name|sequence
operator|.
name|line
operator|.
name|simplifier
operator|.
name|QSequenceLineEOLUnifyingSimplifier
import|;
end_import

begin_import
import|import
name|de
operator|.
name|regnis
operator|.
name|q
operator|.
name|sequence
operator|.
name|line
operator|.
name|simplifier
operator|.
name|QSequenceLineSimplifier
import|;
end_import

begin_import
import|import
name|de
operator|.
name|regnis
operator|.
name|q
operator|.
name|sequence
operator|.
name|line
operator|.
name|simplifier
operator|.
name|QSequenceLineTeeSimplifier
import|;
end_import

begin_import
import|import
name|de
operator|.
name|regnis
operator|.
name|q
operator|.
name|sequence
operator|.
name|line
operator|.
name|simplifier
operator|.
name|QSequenceLineWhiteSpaceReducingSimplifier
import|;
end_import

begin_import
import|import
name|de
operator|.
name|regnis
operator|.
name|q
operator|.
name|sequence
operator|.
name|line
operator|.
name|simplifier
operator|.
name|QSequenceLineWhiteSpaceSkippingSimplifier
import|;
end_import

begin_comment
comment|/**  * The<b>SVNAnnotationGenerator</b> class is used to annotate files - that is  * to place author and revision information in-line for the specified  * file.  *   *<p>  * Since<b>SVNAnnotationGenerator</b> implements<b>ISVNFileRevisionHandler</b>,  * it is merely passed to a {@link org.tmatesoft.svn.core.io.SVNRepository#getFileRevisions(String, long, long, ISVNFileRevisionHandler) getFileRevisions()}   * method of<b>SVNRepository</b>. After that you handle the resultant annotated   * file line-by-line providing an<b>ISVNAnnotateHandler</b> implementation to the {@link #reportAnnotations(ISVNAnnotateHandler, String) reportAnnotations()}  * method:  *<pre class="javacode">  *<span class="javakeyword">import</span> org.tmatesoft.svn.core.SVNAnnotationGenerator;  *<span class="javakeyword">import</span> org.tmatesoft.svn.core.io.SVNRepositoryFactory;  *<span class="javakeyword">import</span> org.tmatesoft.svn.core.io.SVNRepository;  *<span class="javakeyword">import</span> org.tmatesoft.svn.core.wc.SVNAnnotateHandler;  * ...  *   *     File tmpFile;  *     SVNRepository repos;  *     ISVNAnnotateHandler annotateHandler;  *     ISVNEventHandler cancelHandler;  *<span class="javakeyword">long</span> startRev = 0;  *<span class="javakeyword">long</span> endRev = 150;  *     ...  *       *     SVNAnnotationGenerator generator =<span class="javakeyword">new</span> SVNAnnotationGenerator(path, tmpFile, cancelHandler);  *<span class="javakeyword">try</span> {  *         repos.getFileRevisions(<span class="javastring">""</span>, startRev, endRev, generator);  *         generator.reportAnnotations(annotateHandler,<span class="javakeyword">null</span>);  *     }<span class="javakeyword">finally</span> {  *         generator.dispose();  *     }  * ...</pre>  *     * @version 1.3  * @since   1.2  * @author  TMate Software Ltd.  */
end_comment

begin_class
specifier|public
class|class
name|SVNAnnotationGenerator
implements|implements
name|ISVNFileRevisionHandler
block|{
specifier|private
name|File
name|myTmpDirectory
decl_stmt|;
specifier|private
name|boolean
name|myIsTmpDirCreated
decl_stmt|;
specifier|private
name|String
name|myPath
decl_stmt|;
specifier|private
name|long
name|myCurrentRevision
decl_stmt|;
specifier|private
name|String
name|myCurrentAuthor
decl_stmt|;
specifier|private
name|Date
name|myCurrentDate
decl_stmt|;
specifier|private
name|boolean
name|myIsCurrentResultOfMerge
decl_stmt|;
specifier|private
name|String
name|myCurrentPath
decl_stmt|;
specifier|private
name|File
name|myPreviousFile
decl_stmt|;
specifier|private
name|File
name|myPreviousOriginalFile
decl_stmt|;
specifier|private
name|File
name|myCurrentFile
decl_stmt|;
specifier|private
name|List
name|myMergeBlameChunks
decl_stmt|;
specifier|private
name|List
name|myBlameChunks
decl_stmt|;
specifier|private
name|SVNDeltaProcessor
name|myDeltaProcessor
decl_stmt|;
specifier|private
name|ISVNEventHandler
name|myCancelBaton
decl_stmt|;
specifier|private
name|long
name|myStartRevision
decl_stmt|;
specifier|private
name|boolean
name|myIsForce
decl_stmt|;
specifier|private
name|boolean
name|myIncludeMergedRevisions
decl_stmt|;
specifier|private
name|SVNDiffOptions
name|myDiffOptions
decl_stmt|;
specifier|private
name|QSequenceLineSimplifier
name|mySimplifier
decl_stmt|;
specifier|private
name|ISVNAnnotateHandler
name|myFileHandler
decl_stmt|;
specifier|private
name|String
name|myEncoding
decl_stmt|;
specifier|private
name|boolean
name|myIsLastRevisionReported
decl_stmt|;
comment|/**      * Constructs an annotation generator object.       *       *<p>      * This constructor is equivalent to       *<code>SVNAnnotationGenerator(path, tmpDirectory, startRevision, false, cancelBaton)</code>.      *       * @param path           a file path (relative to a repository location)      * @param tmpDirectory   a revision to stop at      * @param startRevision  a start revision to begin annotation with      * @param cancelBaton    a baton which is used to check if an operation       *                       is cancelled      */
specifier|public
name|SVNAnnotationGenerator
parameter_list|(
name|String
name|path
parameter_list|,
name|File
name|tmpDirectory
parameter_list|,
name|long
name|startRevision
parameter_list|,
name|ISVNEventHandler
name|cancelBaton
parameter_list|)
block|{
name|this
argument_list|(
name|path
argument_list|,
name|tmpDirectory
argument_list|,
name|startRevision
argument_list|,
literal|false
argument_list|,
name|cancelBaton
argument_list|)
expr_stmt|;
block|}
comment|/**      * Constructs an annotation generator object.       *       *<p/>      * This constructor is identical to<code>SVNAnnotationGenerator(path, tmpDirectory, startRevision, force, new SVNDiffOptions(), cancelBaton)</code>.      *       * @param path           a file path (relative to a repository location)      * @param tmpDirectory   a revision to stop at      * @param startRevision  a start revision to begin annotation with      * @param force          forces binary files processing        * @param cancelBaton    a baton which is used to check if an operation       *                       is cancelled      */
specifier|public
name|SVNAnnotationGenerator
parameter_list|(
name|String
name|path
parameter_list|,
name|File
name|tmpDirectory
parameter_list|,
name|long
name|startRevision
parameter_list|,
name|boolean
name|force
parameter_list|,
name|ISVNEventHandler
name|cancelBaton
parameter_list|)
block|{
name|this
argument_list|(
name|path
argument_list|,
name|tmpDirectory
argument_list|,
name|startRevision
argument_list|,
name|force
argument_list|,
operator|new
name|SVNDiffOptions
argument_list|()
argument_list|,
name|cancelBaton
argument_list|)
expr_stmt|;
block|}
comment|/**      * Constructs an annotation generator object.      *       *<p/>      * This constructor is identical to<code>SVNAnnotationGenerator(path, tmpDirectory, startRevision, force, false, diffOptions, null, null, cancelBaton)</code>.      *       * @param path           a file path (relative to a repository location)      * @param tmpDirectory   a revision to stop at      * @param startRevision  a start revision to begin annotation with      * @param force          forces binary files processing        * @param diffOptions    diff options       * @param cancelBaton    a baton which is used to check if an operation       *                       is cancelled      */
specifier|public
name|SVNAnnotationGenerator
parameter_list|(
name|String
name|path
parameter_list|,
name|File
name|tmpDirectory
parameter_list|,
name|long
name|startRevision
parameter_list|,
name|boolean
name|force
parameter_list|,
name|SVNDiffOptions
name|diffOptions
parameter_list|,
name|ISVNEventHandler
name|cancelBaton
parameter_list|)
block|{
name|this
argument_list|(
name|path
argument_list|,
name|tmpDirectory
argument_list|,
name|startRevision
argument_list|,
name|force
argument_list|,
literal|false
argument_list|,
name|diffOptions
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|,
name|cancelBaton
argument_list|)
expr_stmt|;
block|}
comment|/**      * Constructs an annotation generator object.      *       * @param path                    a file path (relative to a repository location)      * @param tmpDirectory            a revision to stop at      * @param startRevision           a start revision to begin annotation with      * @param force                   forces binary files processing        * @param includeMergedRevisions  whether to include merged revisions or not      * @param diffOptions             diff options       * @param encoding                charset name to use to encode annotation result      * @param handler                 caller's annotation handler implementation       * @param cancelBaton             a baton which is used to check if an operation       *                                is cancelled      * @since                         1.2.0       */
specifier|public
name|SVNAnnotationGenerator
parameter_list|(
name|String
name|path
parameter_list|,
name|File
name|tmpDirectory
parameter_list|,
name|long
name|startRevision
parameter_list|,
name|boolean
name|force
parameter_list|,
name|boolean
name|includeMergedRevisions
parameter_list|,
name|SVNDiffOptions
name|diffOptions
parameter_list|,
name|String
name|encoding
parameter_list|,
name|ISVNAnnotateHandler
name|handler
parameter_list|,
name|ISVNEventHandler
name|cancelBaton
parameter_list|)
block|{
name|myTmpDirectory
operator|=
name|tmpDirectory
expr_stmt|;
name|myCancelBaton
operator|=
name|cancelBaton
expr_stmt|;
name|myPath
operator|=
name|path
expr_stmt|;
name|myIsForce
operator|=
name|force
expr_stmt|;
comment|// TODO fail if file has been specified.
if|if
condition|(
operator|!
name|myTmpDirectory
operator|.
name|isDirectory
argument_list|()
condition|)
block|{
name|myTmpDirectory
operator|.
name|mkdirs
argument_list|()
expr_stmt|;
name|myIsTmpDirCreated
operator|=
literal|true
expr_stmt|;
block|}
name|myMergeBlameChunks
operator|=
operator|new
name|ArrayList
argument_list|()
expr_stmt|;
name|myBlameChunks
operator|=
operator|new
name|ArrayList
argument_list|()
expr_stmt|;
name|myDeltaProcessor
operator|=
operator|new
name|SVNDeltaProcessor
argument_list|()
expr_stmt|;
name|myStartRevision
operator|=
name|startRevision
expr_stmt|;
name|myDiffOptions
operator|=
name|diffOptions
expr_stmt|;
name|myIncludeMergedRevisions
operator|=
name|includeMergedRevisions
expr_stmt|;
name|myFileHandler
operator|=
name|handler
expr_stmt|;
name|myEncoding
operator|=
name|encoding
expr_stmt|;
block|}
comment|/**      * Handles a next revision.      * @param fileRevision      * @throws SVNException if one of the following occurs:      *<ul>      *<li>exception with {@link SVNErrorCode#CLIENT_IS_BINARY_FILE} error code - if the file is binary and no       *                      forcing is specified       *<li>operation is cancelled      *</ul>      */
specifier|public
name|void
name|openRevision
parameter_list|(
name|SVNFileRevision
name|fileRevision
parameter_list|)
throws|throws
name|SVNException
block|{
name|SVNProperties
name|propDiff
init|=
name|fileRevision
operator|.
name|getPropertiesDelta
argument_list|()
decl_stmt|;
name|String
name|newMimeType
init|=
name|propDiff
operator|!=
literal|null
condition|?
name|propDiff
operator|.
name|getStringValue
argument_list|(
name|SVNProperty
operator|.
name|MIME_TYPE
argument_list|)
else|:
literal|null
decl_stmt|;
if|if
condition|(
operator|!
name|myIsForce
operator|&&
name|SVNProperty
operator|.
name|isBinaryMimeType
argument_list|(
name|newMimeType
argument_list|)
condition|)
block|{
name|SVNErrorMessage
name|err
init|=
name|SVNErrorMessage
operator|.
name|create
argument_list|(
name|SVNErrorCode
operator|.
name|CLIENT_IS_BINARY_FILE
argument_list|,
literal|"Cannot calculate blame information for binary file ''{0}''"
argument_list|,
name|myPath
argument_list|)
decl_stmt|;
name|SVNErrorManager
operator|.
name|error
argument_list|(
name|err
argument_list|,
name|SVNLogType
operator|.
name|DEFAULT
argument_list|)
expr_stmt|;
block|}
name|myCurrentRevision
operator|=
name|fileRevision
operator|.
name|getRevision
argument_list|()
expr_stmt|;
name|boolean
name|known
init|=
name|fileRevision
operator|.
name|getRevision
argument_list|()
operator|>=
name|myStartRevision
decl_stmt|;
if|if
condition|(
name|myCancelBaton
operator|!=
literal|null
condition|)
block|{
name|File
name|file
init|=
name|SVNPathUtil
operator|.
name|isURL
argument_list|(
name|myPath
argument_list|)
condition|?
literal|null
else|:
operator|new
name|Resource
argument_list|(
name|myPath
argument_list|)
decl_stmt|;
name|SVNEvent
name|event
init|=
name|SVNEventFactory
operator|.
name|createSVNEvent
argument_list|(
name|file
argument_list|,
name|SVNNodeKind
operator|.
name|NONE
argument_list|,
literal|null
argument_list|,
name|myCurrentRevision
argument_list|,
name|SVNEventAction
operator|.
name|ANNOTATE
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|)
decl_stmt|;
if|if
condition|(
name|file
operator|==
literal|null
condition|)
block|{
name|event
operator|.
name|setURL
argument_list|(
name|SVNURL
operator|.
name|parseURIDecoded
argument_list|(
name|myPath
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|myCancelBaton
operator|.
name|handleEvent
argument_list|(
name|event
argument_list|,
name|ISVNEventHandler
operator|.
name|UNKNOWN
argument_list|)
expr_stmt|;
name|myCancelBaton
operator|.
name|checkCancelled
argument_list|()
expr_stmt|;
block|}
name|SVNProperties
name|props
init|=
name|fileRevision
operator|.
name|getRevisionProperties
argument_list|()
decl_stmt|;
if|if
condition|(
name|known
operator|&&
name|props
operator|!=
literal|null
operator|&&
name|props
operator|.
name|getStringValue
argument_list|(
name|SVNRevisionProperty
operator|.
name|AUTHOR
argument_list|)
operator|!=
literal|null
condition|)
block|{
name|myCurrentAuthor
operator|=
name|props
operator|.
name|getStringValue
argument_list|(
name|SVNRevisionProperty
operator|.
name|AUTHOR
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|myCurrentAuthor
operator|=
literal|null
expr_stmt|;
block|}
if|if
condition|(
name|known
operator|&&
name|props
operator|!=
literal|null
operator|&&
name|props
operator|.
name|getStringValue
argument_list|(
name|SVNRevisionProperty
operator|.
name|DATE
argument_list|)
operator|!=
literal|null
condition|)
block|{
name|myCurrentDate
operator|=
name|SVNDate
operator|.
name|parseDate
argument_list|(
name|fileRevision
operator|.
name|getRevisionProperties
argument_list|()
operator|.
name|getStringValue
argument_list|(
name|SVNRevisionProperty
operator|.
name|DATE
argument_list|)
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|myCurrentDate
operator|=
literal|null
expr_stmt|;
block|}
name|myIsCurrentResultOfMerge
operator|=
name|fileRevision
operator|.
name|isResultOfMerge
argument_list|()
expr_stmt|;
if|if
condition|(
name|myIncludeMergedRevisions
condition|)
block|{
name|myCurrentPath
operator|=
name|fileRevision
operator|.
name|getPath
argument_list|()
expr_stmt|;
block|}
block|}
comment|/**      * Does nothing.      *       * @param token             * @throws SVNException      */
specifier|public
name|void
name|closeRevision
parameter_list|(
name|String
name|token
parameter_list|)
throws|throws
name|SVNException
block|{
block|}
comment|/**      * Creates a temporary file for delta application.      *       * @param  token             not used in this method       * @param  baseChecksum      not used in this method      * @throws SVNException       */
specifier|public
name|void
name|applyTextDelta
parameter_list|(
name|String
name|token
parameter_list|,
name|String
name|baseChecksum
parameter_list|)
throws|throws
name|SVNException
block|{
if|if
condition|(
name|myCurrentFile
operator|==
literal|null
condition|)
block|{
name|myCurrentFile
operator|=
name|SVNFileUtil
operator|.
name|createUniqueFile
argument_list|(
name|myTmpDirectory
argument_list|,
literal|"annotate"
argument_list|,
literal|".tmp"
argument_list|,
literal|false
argument_list|)
expr_stmt|;
block|}
name|myDeltaProcessor
operator|.
name|applyTextDelta
argument_list|(
name|myPreviousFile
argument_list|,
name|myCurrentFile
argument_list|,
literal|false
argument_list|)
expr_stmt|;
block|}
comment|/**      * Applies a next text delta chunk.      *        * @param  token          not used in this method       * @param  diffWindow     next diff window       * @return                dummy output stream      * @throws SVNException       */
specifier|public
name|OutputStream
name|textDeltaChunk
parameter_list|(
name|String
name|token
parameter_list|,
name|SVNDiffWindow
name|diffWindow
parameter_list|)
throws|throws
name|SVNException
block|{
return|return
name|myDeltaProcessor
operator|.
name|textDeltaChunk
argument_list|(
name|diffWindow
argument_list|)
return|;
block|}
comment|/**      * Marks the end of the text delta series.      * @param token          not used in this method      * @throws SVNException       */
specifier|public
name|void
name|textDeltaEnd
parameter_list|(
name|String
name|token
parameter_list|)
throws|throws
name|SVNException
block|{
name|myIsLastRevisionReported
operator|=
literal|false
expr_stmt|;
name|myDeltaProcessor
operator|.
name|textDeltaEnd
argument_list|()
expr_stmt|;
if|if
condition|(
name|myIncludeMergedRevisions
condition|)
block|{
name|myMergeBlameChunks
operator|=
name|addFileBlame
argument_list|(
name|myPreviousFile
argument_list|,
name|myCurrentFile
argument_list|,
name|myMergeBlameChunks
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|myIsCurrentResultOfMerge
condition|)
block|{
name|myBlameChunks
operator|=
name|addFileBlame
argument_list|(
name|myPreviousOriginalFile
argument_list|,
name|myCurrentFile
argument_list|,
name|myBlameChunks
argument_list|)
expr_stmt|;
if|if
condition|(
name|myPreviousOriginalFile
operator|==
literal|null
condition|)
block|{
name|myPreviousOriginalFile
operator|=
name|myCurrentFile
expr_stmt|;
name|myCurrentFile
operator|=
literal|null
expr_stmt|;
block|}
else|else
block|{
name|SVNFileUtil
operator|.
name|rename
argument_list|(
name|myCurrentFile
argument_list|,
name|myPreviousOriginalFile
argument_list|)
expr_stmt|;
block|}
name|myPreviousFile
operator|=
name|myPreviousOriginalFile
expr_stmt|;
block|}
else|else
block|{
if|if
condition|(
name|myPreviousFile
operator|!=
literal|null
operator|&&
name|myPreviousFile
operator|!=
name|myPreviousOriginalFile
condition|)
block|{
name|SVNFileUtil
operator|.
name|rename
argument_list|(
name|myCurrentFile
argument_list|,
name|myPreviousFile
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|myPreviousFile
operator|=
name|myCurrentFile
expr_stmt|;
name|myCurrentFile
operator|=
literal|null
expr_stmt|;
block|}
block|}
block|}
else|else
block|{
name|myBlameChunks
operator|=
name|addFileBlame
argument_list|(
name|myPreviousFile
argument_list|,
name|myCurrentFile
argument_list|,
name|myBlameChunks
argument_list|)
expr_stmt|;
if|if
condition|(
name|myPreviousFile
operator|==
literal|null
condition|)
block|{
name|myPreviousFile
operator|=
name|myCurrentFile
expr_stmt|;
name|myCurrentFile
operator|=
literal|null
expr_stmt|;
block|}
else|else
block|{
name|SVNFileUtil
operator|.
name|rename
argument_list|(
name|myCurrentFile
argument_list|,
name|myPreviousFile
argument_list|)
expr_stmt|;
block|}
block|}
if|if
condition|(
name|myFileHandler
operator|!=
literal|null
condition|)
block|{
name|boolean
name|generate
init|=
name|myFileHandler
operator|.
name|handleRevision
argument_list|(
name|myCurrentDate
argument_list|,
name|myCurrentDate
operator|!=
literal|null
condition|?
name|myCurrentRevision
else|:
operator|-
literal|1
argument_list|,
name|myCurrentAuthor
argument_list|,
name|myPreviousFile
argument_list|)
decl_stmt|;
if|if
condition|(
name|generate
condition|)
block|{
name|myIsLastRevisionReported
operator|=
literal|true
expr_stmt|;
name|reportAnnotations
argument_list|(
name|myFileHandler
argument_list|,
name|myEncoding
argument_list|)
expr_stmt|;
block|}
block|}
block|}
comment|/**      * This method is used by<code>SVNKit</code> internals and is not intended for API users.      * @return whether the last revision was reported or not yet      * @since  1.2.0      */
specifier|public
name|boolean
name|isLastRevisionReported
parameter_list|()
block|{
return|return
name|myIsLastRevisionReported
return|;
block|}
comment|/**      * Dispatches file lines along with author& revision info to the provided      * annotation handler.        *       *<p>      * If<code>inputEncoding</code> is<span class="javakeyword">null</span> then       *<span class="javastring">"file.encoding"</span> system property is used.       *       * @param  handler        an annotation handler that processes file lines with      *                        author& revision info      * @param  inputEncoding  a desired character set (encoding) of text lines      * @throws SVNException      */
specifier|public
name|void
name|reportAnnotations
parameter_list|(
name|ISVNAnnotateHandler
name|handler
parameter_list|,
name|String
name|inputEncoding
parameter_list|)
throws|throws
name|SVNException
block|{
if|if
condition|(
name|handler
operator|==
literal|null
condition|)
block|{
return|return;
block|}
if|if
condition|(
name|myPreviousFile
operator|==
literal|null
condition|)
block|{
name|SVNErrorMessage
name|err
init|=
name|SVNErrorMessage
operator|.
name|create
argument_list|(
name|SVNErrorCode
operator|.
name|UNKNOWN
argument_list|,
literal|"ASSERTION FAILURE in SVNAnnotationGenerator.reportAnnotations(): myPreviousFile is null, "
operator|+
literal|"generator has to have been called at least once"
argument_list|)
decl_stmt|;
name|SVNErrorManager
operator|.
name|error
argument_list|(
name|err
argument_list|,
name|SVNLogType
operator|.
name|DEFAULT
argument_list|)
expr_stmt|;
block|}
name|int
name|mergedCount
init|=
operator|-
literal|1
decl_stmt|;
if|if
condition|(
name|myIncludeMergedRevisions
condition|)
block|{
if|if
condition|(
name|myBlameChunks
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|BlameChunk
name|chunk
init|=
operator|new
name|BlameChunk
argument_list|()
decl_stmt|;
name|chunk
operator|.
name|blockStart
operator|=
literal|0
expr_stmt|;
name|chunk
operator|.
name|author
operator|=
name|myCurrentAuthor
expr_stmt|;
name|chunk
operator|.
name|date
operator|=
name|myCurrentDate
expr_stmt|;
name|chunk
operator|.
name|revision
operator|=
name|myCurrentRevision
expr_stmt|;
name|chunk
operator|.
name|path
operator|=
name|myCurrentPath
expr_stmt|;
name|myBlameChunks
operator|.
name|add
argument_list|(
name|chunk
argument_list|)
expr_stmt|;
block|}
name|normalizeBlames
argument_list|(
name|myBlameChunks
argument_list|,
name|myMergeBlameChunks
argument_list|)
expr_stmt|;
name|mergedCount
operator|=
literal|0
expr_stmt|;
block|}
name|inputEncoding
operator|=
name|inputEncoding
operator|==
literal|null
condition|?
name|System
operator|.
name|getProperty
argument_list|(
literal|"file.encoding"
argument_list|)
else|:
name|inputEncoding
expr_stmt|;
name|CharsetDecoder
name|decoder
init|=
name|Charset
operator|.
name|forName
argument_list|(
name|inputEncoding
argument_list|)
operator|.
name|newDecoder
argument_list|()
decl_stmt|;
name|InputStream
name|stream
init|=
literal|null
decl_stmt|;
try|try
block|{
name|stream
operator|=
operator|new
name|SVNTranslatorInputStream
argument_list|(
name|SVNFileUtil
operator|.
name|openFileForReading
argument_list|(
name|myPreviousFile
argument_list|)
argument_list|,
name|SVNProperty
operator|.
name|EOL_LF_BYTES
argument_list|,
literal|true
argument_list|,
literal|null
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|StringBuffer
name|buffer
init|=
operator|new
name|StringBuffer
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|myBlameChunks
operator|.
name|size
argument_list|()
condition|;
name|i
operator|++
control|)
block|{
name|BlameChunk
name|chunk
init|=
operator|(
name|BlameChunk
operator|)
name|myBlameChunks
operator|.
name|get
argument_list|(
name|i
argument_list|)
decl_stmt|;
name|String
name|mergedAuthor
init|=
literal|null
decl_stmt|;
name|long
name|mergedRevision
init|=
name|SVNRepository
operator|.
name|INVALID_REVISION
decl_stmt|;
name|Date
name|mergedDate
init|=
literal|null
decl_stmt|;
name|String
name|mergedPath
init|=
literal|null
decl_stmt|;
if|if
condition|(
name|mergedCount
operator|>=
literal|0
condition|)
block|{
name|BlameChunk
name|mergedChunk
init|=
operator|(
name|BlameChunk
operator|)
name|myMergeBlameChunks
operator|.
name|get
argument_list|(
name|mergedCount
operator|++
argument_list|)
decl_stmt|;
name|mergedAuthor
operator|=
name|mergedChunk
operator|.
name|author
expr_stmt|;
name|mergedRevision
operator|=
name|mergedChunk
operator|.
name|revision
expr_stmt|;
name|mergedDate
operator|=
name|mergedChunk
operator|.
name|date
expr_stmt|;
name|mergedPath
operator|=
name|mergedChunk
operator|.
name|path
expr_stmt|;
block|}
name|BlameChunk
name|nextChunk
init|=
literal|null
decl_stmt|;
if|if
condition|(
name|i
operator|<
name|myBlameChunks
operator|.
name|size
argument_list|()
operator|-
literal|1
condition|)
block|{
name|nextChunk
operator|=
operator|(
name|BlameChunk
operator|)
name|myBlameChunks
operator|.
name|get
argument_list|(
name|i
operator|+
literal|1
argument_list|)
expr_stmt|;
block|}
for|for
control|(
name|int
name|lineNo
init|=
name|chunk
operator|.
name|blockStart
init|;
name|nextChunk
operator|==
literal|null
operator|||
name|lineNo
operator|<
name|nextChunk
operator|.
name|blockStart
condition|;
name|lineNo
operator|++
control|)
block|{
name|myCancelBaton
operator|.
name|checkCancelled
argument_list|()
expr_stmt|;
name|buffer
operator|.
name|setLength
argument_list|(
literal|0
argument_list|)
expr_stmt|;
name|String
name|line
init|=
name|SVNFileUtil
operator|.
name|readLineFromStream
argument_list|(
name|stream
argument_list|,
name|buffer
argument_list|,
name|decoder
argument_list|)
decl_stmt|;
name|boolean
name|isEOF
init|=
literal|false
decl_stmt|;
if|if
condition|(
name|line
operator|==
literal|null
condition|)
block|{
name|isEOF
operator|=
literal|true
expr_stmt|;
if|if
condition|(
name|buffer
operator|.
name|length
argument_list|()
operator|>
literal|0
condition|)
block|{
name|line
operator|=
name|buffer
operator|.
name|toString
argument_list|()
expr_stmt|;
block|}
block|}
if|if
condition|(
operator|!
name|isEOF
operator|||
name|line
operator|!=
literal|null
condition|)
block|{
name|handler
operator|.
name|handleLine
argument_list|(
name|chunk
operator|.
name|date
argument_list|,
name|chunk
operator|.
name|revision
argument_list|,
name|chunk
operator|.
name|author
argument_list|,
name|line
argument_list|,
name|mergedDate
argument_list|,
name|mergedRevision
argument_list|,
name|mergedAuthor
argument_list|,
name|mergedPath
argument_list|,
name|lineNo
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|isEOF
condition|)
block|{
break|break;
block|}
block|}
block|}
name|handler
operator|.
name|handleEOF
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|ioe
parameter_list|)
block|{
name|SVNErrorMessage
name|err
init|=
name|SVNErrorMessage
operator|.
name|create
argument_list|(
name|SVNErrorCode
operator|.
name|IO_ERROR
argument_list|,
name|ioe
operator|.
name|getLocalizedMessage
argument_list|()
argument_list|)
decl_stmt|;
name|SVNErrorManager
operator|.
name|error
argument_list|(
name|err
argument_list|,
name|ioe
argument_list|,
name|SVNLogType
operator|.
name|DEFAULT
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
name|SVNFileUtil
operator|.
name|closeFile
argument_list|(
name|stream
argument_list|)
expr_stmt|;
block|}
block|}
comment|/**      * Finalizes an annotation operation releasing resources involved      * by this generator. Should be called after {@link #reportAnnotations(ISVNAnnotateHandler, String) reportAnnotations()}.       *      */
specifier|public
name|void
name|dispose
parameter_list|()
block|{
name|myIsCurrentResultOfMerge
operator|=
literal|false
expr_stmt|;
if|if
condition|(
name|myCurrentFile
operator|!=
literal|null
condition|)
block|{
name|SVNFileUtil
operator|.
name|deleteAll
argument_list|(
name|myCurrentFile
argument_list|,
literal|true
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|myPreviousFile
operator|!=
literal|null
condition|)
block|{
name|SVNFileUtil
operator|.
name|deleteAll
argument_list|(
name|myPreviousFile
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|myPreviousFile
operator|=
literal|null
expr_stmt|;
block|}
if|if
condition|(
name|myPreviousOriginalFile
operator|!=
literal|null
condition|)
block|{
name|SVNFileUtil
operator|.
name|deleteAll
argument_list|(
name|myPreviousOriginalFile
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|myPreviousOriginalFile
operator|=
literal|null
expr_stmt|;
block|}
if|if
condition|(
name|myIsTmpDirCreated
condition|)
block|{
name|SVNFileUtil
operator|.
name|deleteAll
argument_list|(
name|myTmpDirectory
argument_list|,
literal|true
argument_list|)
expr_stmt|;
block|}
name|myBlameChunks
operator|.
name|clear
argument_list|()
expr_stmt|;
name|myMergeBlameChunks
operator|.
name|clear
argument_list|()
expr_stmt|;
block|}
specifier|private
name|List
name|addFileBlame
parameter_list|(
name|File
name|previousFile
parameter_list|,
name|File
name|currentFile
parameter_list|,
name|List
name|chain
parameter_list|)
throws|throws
name|SVNException
block|{
if|if
condition|(
name|previousFile
operator|==
literal|null
condition|)
block|{
name|BlameChunk
name|chunk
init|=
operator|new
name|BlameChunk
argument_list|()
decl_stmt|;
name|chunk
operator|.
name|author
operator|=
name|myCurrentAuthor
expr_stmt|;
name|chunk
operator|.
name|revision
operator|=
name|myCurrentDate
operator|!=
literal|null
condition|?
name|myCurrentRevision
else|:
operator|-
literal|1
expr_stmt|;
name|chunk
operator|.
name|date
operator|=
name|myCurrentDate
expr_stmt|;
name|chunk
operator|.
name|blockStart
operator|=
literal|0
expr_stmt|;
name|chunk
operator|.
name|path
operator|=
name|myCurrentPath
expr_stmt|;
name|chain
operator|.
name|add
argument_list|(
name|chunk
argument_list|)
expr_stmt|;
return|return
name|chain
return|;
block|}
name|RandomAccessFile
name|left
init|=
literal|null
decl_stmt|;
name|RandomAccessFile
name|right
init|=
literal|null
decl_stmt|;
try|try
block|{
name|left
operator|=
operator|new
name|RandomAccessFile
argument_list|(
name|previousFile
argument_list|,
literal|"r"
argument_list|)
expr_stmt|;
name|right
operator|=
operator|new
name|RandomAccessFile
argument_list|(
name|currentFile
argument_list|,
literal|"r"
argument_list|)
expr_stmt|;
specifier|final
name|QSequenceLineResult
name|result
init|=
name|QSequenceLineMedia
operator|.
name|createBlocks
argument_list|(
operator|new
name|QSequenceLineRAFileData
argument_list|(
name|left
argument_list|)
argument_list|,
operator|new
name|QSequenceLineRAFileData
argument_list|(
name|right
argument_list|)
argument_list|,
name|createSimplifier
argument_list|()
argument_list|)
decl_stmt|;
try|try
block|{
name|List
name|blocksList
init|=
name|result
operator|.
name|getBlocks
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|blocksList
operator|.
name|size
argument_list|()
condition|;
name|i
operator|++
control|)
block|{
name|QSequenceDifferenceBlock
name|block
init|=
operator|(
name|QSequenceDifferenceBlock
operator|)
name|blocksList
operator|.
name|get
argument_list|(
name|i
argument_list|)
decl_stmt|;
if|if
condition|(
name|block
operator|.
name|getLeftSize
argument_list|()
operator|>
literal|0
condition|)
block|{
name|deleteBlameChunk
argument_list|(
name|block
operator|.
name|getRightFrom
argument_list|()
argument_list|,
name|block
operator|.
name|getLeftSize
argument_list|()
argument_list|,
name|chain
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|block
operator|.
name|getRightSize
argument_list|()
operator|>
literal|0
condition|)
block|{
name|insertBlameChunk
argument_list|(
name|myCurrentRevision
argument_list|,
name|myCurrentAuthor
argument_list|,
name|myCurrentDate
argument_list|,
name|myCurrentPath
argument_list|,
name|block
operator|.
name|getRightFrom
argument_list|()
argument_list|,
name|block
operator|.
name|getRightSize
argument_list|()
argument_list|,
name|chain
argument_list|)
expr_stmt|;
block|}
block|}
block|}
finally|finally
block|{
name|result
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
name|Throwable
name|e
parameter_list|)
block|{
name|SVNErrorMessage
name|err
init|=
name|SVNErrorMessage
operator|.
name|create
argument_list|(
name|SVNErrorCode
operator|.
name|UNKNOWN
argument_list|,
literal|"Exception while generating annotation: {0}"
argument_list|,
name|e
operator|.
name|getMessage
argument_list|()
argument_list|)
decl_stmt|;
name|SVNErrorManager
operator|.
name|error
argument_list|(
name|err
argument_list|,
name|e
argument_list|,
name|SVNLogType
operator|.
name|DEFAULT
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
if|if
condition|(
name|left
operator|!=
literal|null
condition|)
block|{
name|SVNFileUtil
operator|.
name|closeFile
argument_list|(
name|left
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|right
operator|!=
literal|null
condition|)
block|{
name|SVNFileUtil
operator|.
name|closeFile
argument_list|(
name|right
argument_list|)
expr_stmt|;
block|}
block|}
return|return
name|chain
return|;
block|}
specifier|private
name|void
name|insertBlameChunk
parameter_list|(
name|long
name|revision
parameter_list|,
name|String
name|author
parameter_list|,
name|Date
name|date
parameter_list|,
name|String
name|path
parameter_list|,
name|int
name|start
parameter_list|,
name|int
name|length
parameter_list|,
name|List
name|chain
parameter_list|)
block|{
name|int
index|[]
name|index
init|=
operator|new
name|int
index|[
literal|1
index|]
decl_stmt|;
name|BlameChunk
name|startPoint
init|=
name|findBlameChunk
argument_list|(
name|chain
argument_list|,
name|start
argument_list|,
name|index
argument_list|)
decl_stmt|;
name|int
name|adjustFromIndex
init|=
operator|-
literal|1
decl_stmt|;
if|if
condition|(
name|startPoint
operator|.
name|blockStart
operator|==
name|start
condition|)
block|{
name|BlameChunk
name|insert
init|=
operator|new
name|BlameChunk
argument_list|()
decl_stmt|;
name|insert
operator|.
name|copy
argument_list|(
name|startPoint
argument_list|)
expr_stmt|;
name|insert
operator|.
name|blockStart
operator|=
name|start
operator|+
name|length
expr_stmt|;
name|chain
operator|.
name|add
argument_list|(
name|index
index|[
literal|0
index|]
operator|+
literal|1
argument_list|,
name|insert
argument_list|)
expr_stmt|;
name|startPoint
operator|.
name|author
operator|=
name|author
expr_stmt|;
name|startPoint
operator|.
name|revision
operator|=
name|revision
expr_stmt|;
name|startPoint
operator|.
name|date
operator|=
name|date
expr_stmt|;
name|startPoint
operator|.
name|path
operator|=
name|path
expr_stmt|;
name|adjustFromIndex
operator|=
name|index
index|[
literal|0
index|]
operator|+
literal|2
expr_stmt|;
block|}
else|else
block|{
name|BlameChunk
name|middle
init|=
operator|new
name|BlameChunk
argument_list|()
decl_stmt|;
name|middle
operator|.
name|author
operator|=
name|author
expr_stmt|;
name|middle
operator|.
name|revision
operator|=
name|revision
expr_stmt|;
name|middle
operator|.
name|date
operator|=
name|date
expr_stmt|;
name|middle
operator|.
name|path
operator|=
name|path
expr_stmt|;
name|middle
operator|.
name|blockStart
operator|=
name|start
expr_stmt|;
name|BlameChunk
name|insert
init|=
operator|new
name|BlameChunk
argument_list|()
decl_stmt|;
name|insert
operator|.
name|copy
argument_list|(
name|startPoint
argument_list|)
expr_stmt|;
name|insert
operator|.
name|blockStart
operator|=
name|start
operator|+
name|length
expr_stmt|;
name|chain
operator|.
name|add
argument_list|(
name|index
index|[
literal|0
index|]
operator|+
literal|1
argument_list|,
name|middle
argument_list|)
expr_stmt|;
name|chain
operator|.
name|add
argument_list|(
name|index
index|[
literal|0
index|]
operator|+
literal|2
argument_list|,
name|insert
argument_list|)
expr_stmt|;
name|adjustFromIndex
operator|=
name|index
index|[
literal|0
index|]
operator|+
literal|3
expr_stmt|;
block|}
name|adjustBlameChunks
argument_list|(
name|chain
argument_list|,
name|adjustFromIndex
argument_list|,
name|length
argument_list|)
expr_stmt|;
block|}
specifier|private
name|void
name|deleteBlameChunk
parameter_list|(
name|int
name|start
parameter_list|,
name|int
name|length
parameter_list|,
name|List
name|chain
parameter_list|)
block|{
name|int
index|[]
name|ind
init|=
operator|new
name|int
index|[
literal|1
index|]
decl_stmt|;
name|BlameChunk
name|first
init|=
name|findBlameChunk
argument_list|(
name|chain
argument_list|,
name|start
argument_list|,
name|ind
argument_list|)
decl_stmt|;
name|int
name|firstInd
init|=
name|ind
index|[
literal|0
index|]
decl_stmt|;
name|BlameChunk
name|last
init|=
name|findBlameChunk
argument_list|(
name|chain
argument_list|,
name|start
operator|+
name|length
argument_list|,
name|ind
argument_list|)
decl_stmt|;
name|int
name|lastInd
init|=
name|ind
index|[
literal|0
index|]
decl_stmt|;
if|if
condition|(
name|first
operator|!=
name|last
condition|)
block|{
name|int
name|deleteCount
init|=
name|lastInd
operator|-
name|firstInd
operator|-
literal|1
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|deleteCount
condition|;
name|i
operator|++
control|)
block|{
name|chain
operator|.
name|remove
argument_list|(
name|firstInd
operator|+
literal|1
argument_list|)
expr_stmt|;
block|}
name|lastInd
operator|-=
name|deleteCount
expr_stmt|;
name|last
operator|.
name|blockStart
operator|=
name|start
expr_stmt|;
if|if
condition|(
name|first
operator|.
name|blockStart
operator|==
name|start
condition|)
block|{
name|first
operator|.
name|copy
argument_list|(
name|last
argument_list|)
expr_stmt|;
name|chain
operator|.
name|remove
argument_list|(
name|lastInd
argument_list|)
expr_stmt|;
name|lastInd
operator|--
expr_stmt|;
name|last
operator|=
name|first
expr_stmt|;
block|}
block|}
name|int
name|tailInd
init|=
name|lastInd
operator|<
name|chain
operator|.
name|size
argument_list|()
operator|-
literal|1
condition|?
name|lastInd
operator|+
literal|1
else|:
operator|-
literal|1
decl_stmt|;
name|BlameChunk
name|tail
init|=
name|tailInd
operator|>
literal|0
condition|?
operator|(
name|BlameChunk
operator|)
name|chain
operator|.
name|get
argument_list|(
name|tailInd
argument_list|)
else|:
literal|null
decl_stmt|;
if|if
condition|(
name|tail
operator|!=
literal|null
operator|&&
name|tail
operator|.
name|blockStart
operator|==
name|last
operator|.
name|blockStart
operator|+
name|length
condition|)
block|{
name|last
operator|.
name|copy
argument_list|(
name|tail
argument_list|)
expr_stmt|;
name|chain
operator|.
name|remove
argument_list|(
name|tail
argument_list|)
expr_stmt|;
name|tailInd
operator|--
expr_stmt|;
name|tail
operator|=
name|last
expr_stmt|;
block|}
if|if
condition|(
name|tail
operator|!=
literal|null
condition|)
block|{
name|adjustBlameChunks
argument_list|(
name|chain
argument_list|,
name|tailInd
argument_list|,
operator|-
name|length
argument_list|)
expr_stmt|;
block|}
block|}
specifier|private
name|void
name|adjustBlameChunks
parameter_list|(
name|List
name|chain
parameter_list|,
name|int
name|startIndex
parameter_list|,
name|int
name|adjust
parameter_list|)
block|{
for|for
control|(
name|int
name|i
init|=
name|startIndex
init|;
name|i
operator|<
name|chain
operator|.
name|size
argument_list|()
condition|;
name|i
operator|++
control|)
block|{
name|BlameChunk
name|curChunk
init|=
operator|(
name|BlameChunk
operator|)
name|chain
operator|.
name|get
argument_list|(
name|i
argument_list|)
decl_stmt|;
name|curChunk
operator|.
name|blockStart
operator|+=
name|adjust
expr_stmt|;
block|}
block|}
specifier|private
name|BlameChunk
name|findBlameChunk
parameter_list|(
name|List
name|chain
parameter_list|,
name|int
name|offset
parameter_list|,
name|int
index|[]
name|index
parameter_list|)
block|{
name|BlameChunk
name|prevChunk
init|=
literal|null
decl_stmt|;
name|index
index|[
literal|0
index|]
operator|=
operator|-
literal|1
expr_stmt|;
for|for
control|(
name|Iterator
name|chunks
init|=
name|chain
operator|.
name|iterator
argument_list|()
init|;
name|chunks
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|BlameChunk
name|chunk
init|=
operator|(
name|BlameChunk
operator|)
name|chunks
operator|.
name|next
argument_list|()
decl_stmt|;
if|if
condition|(
name|chunk
operator|.
name|blockStart
operator|>
name|offset
condition|)
block|{
break|break;
block|}
name|prevChunk
operator|=
name|chunk
expr_stmt|;
name|index
index|[
literal|0
index|]
operator|++
expr_stmt|;
block|}
return|return
name|prevChunk
return|;
block|}
specifier|private
name|void
name|normalizeBlames
parameter_list|(
name|List
name|chain
parameter_list|,
name|List
name|mergedChain
parameter_list|)
throws|throws
name|SVNException
block|{
name|int
name|i
init|=
literal|0
decl_stmt|,
name|k
init|=
literal|0
decl_stmt|;
for|for
control|(
init|;
name|i
operator|<
name|chain
operator|.
name|size
argument_list|()
operator|-
literal|1
operator|&&
name|k
operator|<
name|mergedChain
operator|.
name|size
argument_list|()
operator|-
literal|1
condition|;
name|i
operator|++
operator|,
name|k
operator|++
control|)
block|{
name|BlameChunk
name|chunk
init|=
operator|(
name|BlameChunk
operator|)
name|chain
operator|.
name|get
argument_list|(
name|i
argument_list|)
decl_stmt|;
name|BlameChunk
name|mergedChunk
init|=
operator|(
name|BlameChunk
operator|)
name|mergedChain
operator|.
name|get
argument_list|(
name|k
argument_list|)
decl_stmt|;
if|if
condition|(
name|chunk
operator|.
name|blockStart
operator|!=
name|mergedChunk
operator|.
name|blockStart
condition|)
block|{
name|SVNErrorMessage
name|err
init|=
name|SVNErrorMessage
operator|.
name|create
argument_list|(
name|SVNErrorCode
operator|.
name|UNKNOWN
argument_list|,
literal|"ASSERTION FAILURE in SVNAnnotationGenerator.normalizeBlames():"
operator|+
literal|"current chunks should always start at the same offset"
argument_list|)
decl_stmt|;
name|SVNErrorManager
operator|.
name|error
argument_list|(
name|err
argument_list|,
name|SVNLogType
operator|.
name|DEFAULT
argument_list|)
expr_stmt|;
block|}
name|BlameChunk
name|nextChunk
init|=
operator|(
name|BlameChunk
operator|)
name|chain
operator|.
name|get
argument_list|(
name|i
operator|+
literal|1
argument_list|)
decl_stmt|;
name|BlameChunk
name|nextMergedChunk
init|=
operator|(
name|BlameChunk
operator|)
name|mergedChain
operator|.
name|get
argument_list|(
name|k
operator|+
literal|1
argument_list|)
decl_stmt|;
if|if
condition|(
name|nextChunk
operator|.
name|blockStart
operator|<
name|nextMergedChunk
operator|.
name|blockStart
condition|)
block|{
name|BlameChunk
name|tmpChunk
init|=
operator|new
name|BlameChunk
argument_list|()
decl_stmt|;
name|tmpChunk
operator|.
name|copy
argument_list|(
name|mergedChunk
argument_list|)
expr_stmt|;
name|tmpChunk
operator|.
name|blockStart
operator|=
name|nextChunk
operator|.
name|blockStart
expr_stmt|;
name|mergedChain
operator|.
name|add
argument_list|(
name|k
operator|+
literal|1
argument_list|,
name|tmpChunk
argument_list|)
expr_stmt|;
name|nextMergedChunk
operator|=
name|tmpChunk
expr_stmt|;
block|}
if|if
condition|(
name|nextChunk
operator|.
name|blockStart
operator|>
name|nextMergedChunk
operator|.
name|blockStart
condition|)
block|{
name|BlameChunk
name|tmpChunk
init|=
operator|new
name|BlameChunk
argument_list|()
decl_stmt|;
name|tmpChunk
operator|.
name|copy
argument_list|(
name|chunk
argument_list|)
expr_stmt|;
name|tmpChunk
operator|.
name|blockStart
operator|=
name|nextMergedChunk
operator|.
name|blockStart
expr_stmt|;
name|chain
operator|.
name|add
argument_list|(
name|i
operator|+
literal|1
argument_list|,
name|tmpChunk
argument_list|)
expr_stmt|;
block|}
block|}
if|if
condition|(
operator|(
name|i
operator|==
name|chain
operator|.
name|size
argument_list|()
operator|-
literal|1
operator|)
operator|&&
operator|(
name|k
operator|==
name|mergedChain
operator|.
name|size
argument_list|()
operator|-
literal|1
operator|)
condition|)
block|{
return|return;
block|}
if|if
condition|(
name|k
operator|==
name|mergedChain
operator|.
name|size
argument_list|()
operator|-
literal|1
condition|)
block|{
for|for
control|(
name|i
operator|+=
literal|1
init|;
name|i
operator|<
name|chain
operator|.
name|size
argument_list|()
condition|;
name|i
operator|++
control|)
block|{
name|BlameChunk
name|chunk
init|=
operator|(
name|BlameChunk
operator|)
name|chain
operator|.
name|get
argument_list|(
name|i
argument_list|)
decl_stmt|;
name|BlameChunk
name|mergedChunk
init|=
operator|(
name|BlameChunk
operator|)
name|mergedChain
operator|.
name|get
argument_list|(
name|mergedChain
operator|.
name|size
argument_list|()
operator|-
literal|1
argument_list|)
decl_stmt|;
name|BlameChunk
name|insert
init|=
operator|new
name|BlameChunk
argument_list|()
decl_stmt|;
name|insert
operator|.
name|copy
argument_list|(
name|mergedChunk
argument_list|)
expr_stmt|;
name|insert
operator|.
name|blockStart
operator|=
name|chunk
operator|.
name|blockStart
expr_stmt|;
name|mergedChain
operator|.
name|add
argument_list|(
name|insert
argument_list|)
expr_stmt|;
name|k
operator|++
expr_stmt|;
block|}
block|}
if|if
condition|(
name|i
operator|==
name|chain
operator|.
name|size
argument_list|()
operator|-
literal|1
condition|)
block|{
for|for
control|(
name|k
operator|+=
literal|1
init|;
name|k
operator|<
name|mergedChain
operator|.
name|size
argument_list|()
condition|;
name|k
operator|++
control|)
block|{
name|BlameChunk
name|mergedChunk
init|=
operator|(
name|BlameChunk
operator|)
name|mergedChain
operator|.
name|get
argument_list|(
name|k
argument_list|)
decl_stmt|;
name|BlameChunk
name|chunk
init|=
operator|(
name|BlameChunk
operator|)
name|chain
operator|.
name|get
argument_list|(
name|chain
operator|.
name|size
argument_list|()
operator|-
literal|1
argument_list|)
decl_stmt|;
name|BlameChunk
name|insert
init|=
operator|new
name|BlameChunk
argument_list|()
decl_stmt|;
name|insert
operator|.
name|copy
argument_list|(
name|chunk
argument_list|)
expr_stmt|;
name|insert
operator|.
name|blockStart
operator|=
name|mergedChunk
operator|.
name|blockStart
expr_stmt|;
name|chain
operator|.
name|add
argument_list|(
name|insert
argument_list|)
expr_stmt|;
name|i
operator|++
expr_stmt|;
block|}
block|}
block|}
specifier|private
name|QSequenceLineSimplifier
name|createSimplifier
parameter_list|()
block|{
if|if
condition|(
name|mySimplifier
operator|==
literal|null
condition|)
block|{
name|QSequenceLineSimplifier
name|first
init|=
name|myDiffOptions
operator|.
name|isIgnoreEOLStyle
argument_list|()
condition|?
operator|(
name|QSequenceLineSimplifier
operator|)
operator|new
name|QSequenceLineEOLUnifyingSimplifier
argument_list|()
else|:
operator|(
name|QSequenceLineSimplifier
operator|)
operator|new
name|QSequenceLineDummySimplifier
argument_list|()
decl_stmt|;
name|QSequenceLineSimplifier
name|second
init|=
operator|new
name|QSequenceLineDummySimplifier
argument_list|()
decl_stmt|;
if|if
condition|(
name|myDiffOptions
operator|.
name|isIgnoreAllWhitespace
argument_list|()
condition|)
block|{
name|second
operator|=
operator|new
name|QSequenceLineWhiteSpaceSkippingSimplifier
argument_list|()
expr_stmt|;
block|}
if|else if
condition|(
name|myDiffOptions
operator|.
name|isIgnoreAmountOfWhitespace
argument_list|()
condition|)
block|{
name|second
operator|=
operator|new
name|QSequenceLineWhiteSpaceReducingSimplifier
argument_list|()
expr_stmt|;
block|}
name|mySimplifier
operator|=
operator|new
name|QSequenceLineTeeSimplifier
argument_list|(
name|first
argument_list|,
name|second
argument_list|)
expr_stmt|;
block|}
return|return
name|mySimplifier
return|;
block|}
specifier|private
specifier|static
class|class
name|BlameChunk
block|{
specifier|public
name|int
name|blockStart
decl_stmt|;
specifier|public
name|long
name|revision
decl_stmt|;
specifier|public
name|String
name|author
decl_stmt|;
specifier|public
name|Date
name|date
decl_stmt|;
specifier|public
name|String
name|path
decl_stmt|;
specifier|public
name|void
name|copy
parameter_list|(
name|BlameChunk
name|chunk
parameter_list|)
block|{
name|author
operator|=
name|chunk
operator|.
name|author
expr_stmt|;
name|date
operator|=
name|chunk
operator|.
name|date
expr_stmt|;
name|revision
operator|=
name|chunk
operator|.
name|revision
expr_stmt|;
name|path
operator|=
name|chunk
operator|.
name|path
expr_stmt|;
name|blockStart
operator|=
name|chunk
operator|.
name|blockStart
expr_stmt|;
block|}
specifier|public
name|String
name|toString
parameter_list|()
block|{
name|StringBuffer
name|buf
init|=
operator|new
name|StringBuffer
argument_list|()
decl_stmt|;
name|buf
operator|.
name|append
argument_list|(
literal|"\n----\nPath: "
operator|+
name|path
argument_list|)
expr_stmt|;
name|buf
operator|.
name|append
argument_list|(
literal|"\nRevision: "
operator|+
name|revision
argument_list|)
expr_stmt|;
name|buf
operator|.
name|append
argument_list|(
literal|"\nAuthor: "
operator|+
name|author
argument_list|)
expr_stmt|;
name|buf
operator|.
name|append
argument_list|(
literal|"\nDate: "
operator|+
name|SVNDate
operator|.
name|formatConsoleShortDate
argument_list|(
name|date
argument_list|)
argument_list|)
expr_stmt|;
name|buf
operator|.
name|append
argument_list|(
literal|"\nBlock start: "
operator|+
name|blockStart
argument_list|)
expr_stmt|;
name|buf
operator|.
name|append
argument_list|(
literal|"\n"
argument_list|)
expr_stmt|;
return|return
name|buf
operator|.
name|toString
argument_list|()
return|;
block|}
block|}
block|}
end_class

end_unit

