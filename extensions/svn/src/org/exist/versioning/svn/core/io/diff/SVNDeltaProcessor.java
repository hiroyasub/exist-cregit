begin_unit|revision:1.0.0;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * ====================================================================  * Copyright (c) 2004-2010 TMate Software Ltd.  All rights reserved.  *  * This software is licensed as described in the file COPYING, which  * you should have received as part of this distribution.  The terms  * are also available at http://svnkit.com/license.html  * If newer versions of this license are posted there, you may use a  * newer version instead, at your option.  * ====================================================================  */
end_comment

begin_package
package|package
name|org
operator|.
name|exist
operator|.
name|versioning
operator|.
name|svn
operator|.
name|core
operator|.
name|io
operator|.
name|diff
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|File
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|InputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|OutputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|security
operator|.
name|MessageDigest
import|;
end_import

begin_import
import|import
name|java
operator|.
name|security
operator|.
name|NoSuchAlgorithmException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|versioning
operator|.
name|svn
operator|.
name|internal
operator|.
name|wc
operator|.
name|SVNFileUtil
import|;
end_import

begin_import
import|import
name|org
operator|.
name|tmatesoft
operator|.
name|svn
operator|.
name|core
operator|.
name|SVNException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|tmatesoft
operator|.
name|svn
operator|.
name|core
operator|.
name|io
operator|.
name|diff
operator|.
name|SVNDiffWindow
import|;
end_import

begin_import
import|import
name|org
operator|.
name|tmatesoft
operator|.
name|svn
operator|.
name|core
operator|.
name|io
operator|.
name|diff
operator|.
name|SVNDiffWindowApplyBaton
import|;
end_import

begin_comment
comment|/**  * The<b>SVNDeltaProcessor</b> is used to get a full text of a file   * in series applying diff windows being passed to a processor.    *   * @version 1.3  * @author  TMate Software Ltd.  * @since   1.2  */
end_comment

begin_class
specifier|public
class|class
name|SVNDeltaProcessor
block|{
specifier|private
name|SVNDiffWindowApplyBaton
name|myApplyBaton
decl_stmt|;
comment|/**      * Creates a processor.       */
specifier|public
name|SVNDeltaProcessor
parameter_list|()
block|{
block|}
comment|/**      * Starts processing deltas given a base file stream and an output stream       * to write resultant target bytes to.      *       *<p>      * If a target full text is a newly added file (text deltas would be vs. empty),       * then source bytes are not needed and<code>base</code> may be passed as       *<span class="javakeyword">null</span>.      *       *<p>      * If<code>computeChecksum</code> is<span class="javakeyword">true</span>, then       * an MD5 checksum will be calculated for target bytes. The calculated checksum is       * returned by {@link #textDeltaEnd()}.      *       * @param base             an input stream to take base file contents       *                         from      * @param target           an output stream to write the resultant target       *                         contents to      * @param computeCheksum<span class="javakeyword">true</span> to calculate      *                         checksum      */
specifier|public
name|void
name|applyTextDelta
parameter_list|(
name|InputStream
name|base
parameter_list|,
name|OutputStream
name|target
parameter_list|,
name|boolean
name|computeCheksum
parameter_list|)
block|{
name|reset
argument_list|()
expr_stmt|;
name|MessageDigest
name|digest
init|=
literal|null
decl_stmt|;
try|try
block|{
name|digest
operator|=
name|computeCheksum
condition|?
name|MessageDigest
operator|.
name|getInstance
argument_list|(
literal|"MD5"
argument_list|)
else|:
literal|null
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|NoSuchAlgorithmException
name|e1
parameter_list|)
block|{
block|}
name|base
operator|=
name|base
operator|==
literal|null
condition|?
name|SVNFileUtil
operator|.
name|DUMMY_IN
else|:
name|base
expr_stmt|;
name|myApplyBaton
operator|=
name|FakeSVNDiffWindowApplyBaton
operator|.
name|create
argument_list|(
name|base
argument_list|,
name|target
argument_list|,
name|digest
argument_list|)
expr_stmt|;
block|}
comment|/**      * Starts processing deltas given a base file and a one       * to write resultant target bytes to.      *       *<p>      * If a target full text is a newly added file (text deltas would be vs. empty),       * then source bytes are not needed and<code>baseFile</code> may be passed as       *<span class="javakeyword">null</span>.      *       *<p>      * If a file represented by<code>targetFile</code> does not exist       * yet, first tries to create an empty file.      *       *<p>      * If<code>computeChecksum</code> is<span class="javakeyword">true</span>, then       * an MD5 checksum will be calculated for target bytes. The calculated checksum is       * returned by {@link #textDeltaEnd()}.       *       * @param  baseFile          a base file to read base file contents       *                           from      * @param  targetFile        a destination file where resultant       *                           target bytes will be written      * @param  computeCheksum<span class="javakeyword">true</span> to calculate      *                           checksum      * @throws SVNException      */
specifier|public
name|void
name|applyTextDelta
parameter_list|(
name|File
name|baseFile
parameter_list|,
name|File
name|targetFile
parameter_list|,
name|boolean
name|computeCheksum
parameter_list|)
throws|throws
name|SVNException
block|{
if|if
condition|(
operator|!
name|targetFile
operator|.
name|exists
argument_list|()
condition|)
block|{
name|SVNFileUtil
operator|.
name|createEmptyFile
argument_list|(
name|targetFile
argument_list|)
expr_stmt|;
block|}
name|InputStream
name|base
init|=
name|baseFile
operator|!=
literal|null
operator|&&
name|baseFile
operator|.
name|exists
argument_list|()
condition|?
name|SVNFileUtil
operator|.
name|openFileForReading
argument_list|(
name|baseFile
argument_list|)
else|:
name|SVNFileUtil
operator|.
name|DUMMY_IN
decl_stmt|;
name|applyTextDelta
argument_list|(
name|base
argument_list|,
name|SVNFileUtil
operator|.
name|openFileForWriting
argument_list|(
name|targetFile
argument_list|)
argument_list|,
name|computeCheksum
argument_list|)
expr_stmt|;
block|}
comment|/**      * Starts processing deltas given a base file and a one       * to write resultant target bytes to.      *       *<p>      * If a target full text is a newly added file (text deltas would be vs. empty),       * then source bytes are not needed and<code>baseIS</code> may be passed as       *<span class="javakeyword">null</span>.      *       *<p>      * If a file represented by<code>targetFile</code> does not exist       * yet, first tries to create an empty file.      *       *<p>      * If<code>computeTargetChecksum</code> is<span class="javakeyword">true</span>, then       * an MD5 checksum will be calculated for target bytes. The calculated checksum is       * returned by {@link #textDeltaEnd()}.       *       * @param  baseIS                an input stream to take base file contents       *                               from       * @param  targetFile            a destination file where resultant       *                               target bytes will be written      * @param  computeTargetCheksum<span class="javakeyword">true</span> to calculate      *                               checksum of the target text      * @throws SVNException      * @since  1.3      */
specifier|public
name|void
name|applyTextDelta
parameter_list|(
name|InputStream
name|baseIS
parameter_list|,
name|File
name|targetFile
parameter_list|,
name|boolean
name|computeTargetCheksum
parameter_list|)
throws|throws
name|SVNException
block|{
if|if
condition|(
operator|!
name|targetFile
operator|.
name|exists
argument_list|()
condition|)
block|{
name|SVNFileUtil
operator|.
name|createEmptyFile
argument_list|(
name|targetFile
argument_list|)
expr_stmt|;
block|}
name|applyTextDelta
argument_list|(
name|baseIS
argument_list|,
name|SVNFileUtil
operator|.
name|openFileForWriting
argument_list|(
name|targetFile
argument_list|)
argument_list|,
name|computeTargetCheksum
argument_list|)
expr_stmt|;
block|}
comment|/**      * Receives a next diff window to be applied. The return value is a       * dummy stream (left for backward compatibility) since new data should       * come within a diff window.      *       * @param   window           a diff window      * @return                   a dummy output stream      * @throws  SVNException      */
specifier|public
name|OutputStream
name|textDeltaChunk
parameter_list|(
name|SVNDiffWindow
name|window
parameter_list|)
throws|throws
name|SVNException
block|{
name|window
operator|.
name|apply
argument_list|(
name|myApplyBaton
argument_list|)
expr_stmt|;
return|return
name|SVNFileUtil
operator|.
name|DUMMY_OUT
return|;
block|}
specifier|private
name|void
name|reset
parameter_list|()
block|{
if|if
condition|(
name|myApplyBaton
operator|!=
literal|null
condition|)
block|{
name|myApplyBaton
operator|.
name|close
argument_list|()
expr_stmt|;
name|myApplyBaton
operator|=
literal|null
expr_stmt|;
block|}
block|}
comment|/**      * Performs delta processing finalizing steps. Applies the last       * window left (if any) and finalizes checksum calculation (if a       * checksum was required).        *        * @return  a string representing a hex form of the calculated      *          MD5 checksum or<span class="javakeyword">null</span>       *          if checksum calculation was not required       */
specifier|public
name|String
name|textDeltaEnd
parameter_list|()
block|{
try|try
block|{
return|return
name|myApplyBaton
operator|.
name|close
argument_list|()
return|;
block|}
finally|finally
block|{
name|reset
argument_list|()
expr_stmt|;
block|}
block|}
block|}
end_class

end_unit

