begin_unit|revision:1.0.0;language:Java;cregit-version:0.0.1
begin_package
package|package
name|org
operator|.
name|exist
operator|.
name|versioning
operator|.
name|svn
operator|.
name|core
operator|.
name|io
operator|.
name|diff
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|File
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|InputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|OutputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|lang
operator|.
name|reflect
operator|.
name|Field
import|;
end_import

begin_import
import|import
name|java
operator|.
name|security
operator|.
name|MessageDigest
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|versioning
operator|.
name|svn
operator|.
name|internal
operator|.
name|wc
operator|.
name|SVNFileUtil
import|;
end_import

begin_import
import|import
name|org
operator|.
name|tmatesoft
operator|.
name|svn
operator|.
name|core
operator|.
name|SVNException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|tmatesoft
operator|.
name|svn
operator|.
name|core
operator|.
name|io
operator|.
name|diff
operator|.
name|SVNDiffWindowApplyBaton
import|;
end_import

begin_class
specifier|public
class|class
name|FakeSVNDiffWindowApplyBaton
block|{
specifier|public
specifier|static
name|SVNDiffWindowApplyBaton
name|create
parameter_list|(
name|File
name|source
parameter_list|,
name|File
name|target
parameter_list|,
name|MessageDigest
name|digest
parameter_list|)
throws|throws
name|SVNException
block|{
name|SVNDiffWindowApplyBaton
name|baton
init|=
name|SVNDiffWindowApplyBaton
operator|.
name|create
argument_list|(
name|source
argument_list|,
name|target
argument_list|,
name|digest
argument_list|)
decl_stmt|;
name|Field
name|field
decl_stmt|;
try|try
block|{
name|field
operator|=
name|SVNDiffWindowApplyBaton
operator|.
name|class
operator|.
name|getDeclaredField
argument_list|(
literal|"mySourceStream"
argument_list|)
expr_stmt|;
name|field
operator|.
name|setAccessible
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|field
operator|.
name|set
argument_list|(
name|baton
argument_list|,
name|source
operator|.
name|exists
argument_list|()
condition|?
name|SVNFileUtil
operator|.
name|openFileForReading
argument_list|(
name|source
argument_list|)
else|:
name|SVNFileUtil
operator|.
name|DUMMY_IN
argument_list|)
expr_stmt|;
name|field
operator|=
name|SVNDiffWindowApplyBaton
operator|.
name|class
operator|.
name|getDeclaredField
argument_list|(
literal|"myTargetStream"
argument_list|)
expr_stmt|;
name|field
operator|.
name|setAccessible
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|field
operator|.
name|set
argument_list|(
name|baton
argument_list|,
name|SVNFileUtil
operator|.
name|openFileForWriting
argument_list|(
name|target
argument_list|,
literal|true
argument_list|)
argument_list|)
expr_stmt|;
return|return
name|baton
return|;
block|}
catch|catch
parameter_list|(
name|SecurityException
name|e
parameter_list|)
block|{
block|}
catch|catch
parameter_list|(
name|NoSuchFieldException
name|e
parameter_list|)
block|{
block|}
catch|catch
parameter_list|(
name|IllegalArgumentException
name|e
parameter_list|)
block|{
block|}
catch|catch
parameter_list|(
name|IllegalAccessException
name|e
parameter_list|)
block|{
block|}
return|return
literal|null
return|;
block|}
specifier|public
specifier|static
name|SVNDiffWindowApplyBaton
name|create
parameter_list|(
name|InputStream
name|source
parameter_list|,
name|OutputStream
name|target
parameter_list|,
name|MessageDigest
name|digest
parameter_list|)
block|{
return|return
name|SVNDiffWindowApplyBaton
operator|.
name|create
argument_list|(
name|source
argument_list|,
name|target
argument_list|,
name|digest
argument_list|)
return|;
block|}
block|}
end_class

end_unit

