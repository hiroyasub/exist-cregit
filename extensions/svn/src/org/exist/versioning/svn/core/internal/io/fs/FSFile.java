begin_unit|revision:1.0.0;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * ====================================================================  * Copyright (c) 2004-2010 TMate Software Ltd.  All rights reserved.  *  * This software is licensed as described in the file COPYING, which  * you should have received as part of this distribution.  The terms  * are also available at http://svnkit.com/license.html  * If newer versions of this license are posted there, you may use a  * newer version instead, at your option.  * ====================================================================  */
end_comment

begin_package
package|package
name|org
operator|.
name|exist
operator|.
name|versioning
operator|.
name|svn
operator|.
name|core
operator|.
name|internal
operator|.
name|io
operator|.
name|fs
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|ByteArrayOutputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|File
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|InputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|nio
operator|.
name|ByteBuffer
import|;
end_import

begin_import
import|import
name|java
operator|.
name|nio
operator|.
name|charset
operator|.
name|CharacterCodingException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|nio
operator|.
name|charset
operator|.
name|Charset
import|;
end_import

begin_import
import|import
name|java
operator|.
name|nio
operator|.
name|charset
operator|.
name|CharsetDecoder
import|;
end_import

begin_import
import|import
name|java
operator|.
name|nio
operator|.
name|charset
operator|.
name|CodingErrorAction
import|;
end_import

begin_import
import|import
name|java
operator|.
name|nio
operator|.
name|charset
operator|.
name|MalformedInputException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|security
operator|.
name|MessageDigest
import|;
end_import

begin_import
import|import
name|java
operator|.
name|security
operator|.
name|NoSuchAlgorithmException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|logging
operator|.
name|Level
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|versioning
operator|.
name|svn
operator|.
name|internal
operator|.
name|wc
operator|.
name|SVNFileUtil
import|;
end_import

begin_import
import|import
name|org
operator|.
name|tmatesoft
operator|.
name|svn
operator|.
name|core
operator|.
name|SVNDepth
import|;
end_import

begin_import
import|import
name|org
operator|.
name|tmatesoft
operator|.
name|svn
operator|.
name|core
operator|.
name|SVNErrorCode
import|;
end_import

begin_import
import|import
name|org
operator|.
name|tmatesoft
operator|.
name|svn
operator|.
name|core
operator|.
name|SVNErrorMessage
import|;
end_import

begin_import
import|import
name|org
operator|.
name|tmatesoft
operator|.
name|svn
operator|.
name|core
operator|.
name|SVNException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|tmatesoft
operator|.
name|svn
operator|.
name|core
operator|.
name|SVNProperties
import|;
end_import

begin_import
import|import
name|org
operator|.
name|tmatesoft
operator|.
name|svn
operator|.
name|core
operator|.
name|SVNPropertyValue
import|;
end_import

begin_import
import|import
name|org
operator|.
name|tmatesoft
operator|.
name|svn
operator|.
name|core
operator|.
name|internal
operator|.
name|io
operator|.
name|fs
operator|.
name|PathInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|tmatesoft
operator|.
name|svn
operator|.
name|core
operator|.
name|internal
operator|.
name|util
operator|.
name|SVNHashMap
import|;
end_import

begin_import
import|import
name|org
operator|.
name|tmatesoft
operator|.
name|svn
operator|.
name|core
operator|.
name|internal
operator|.
name|wc
operator|.
name|SVNErrorManager
import|;
end_import

begin_import
import|import
name|org
operator|.
name|tmatesoft
operator|.
name|svn
operator|.
name|core
operator|.
name|io
operator|.
name|SVNRepository
import|;
end_import

begin_import
import|import
name|org
operator|.
name|tmatesoft
operator|.
name|svn
operator|.
name|util
operator|.
name|SVNDebugLog
import|;
end_import

begin_import
import|import
name|org
operator|.
name|tmatesoft
operator|.
name|svn
operator|.
name|util
operator|.
name|SVNLogType
import|;
end_import

begin_comment
comment|/**  * @version 1.3  * @author  TMate Software Ltd.  */
end_comment

begin_class
specifier|public
class|class
name|FSFile
block|{
specifier|private
name|File
name|myFile
decl_stmt|;
comment|//    private FileChannel myChannel = null;
specifier|private
name|InputStream
name|myInputStream
decl_stmt|;
specifier|private
name|long
name|myPosition
decl_stmt|;
specifier|private
name|long
name|myBufferPosition
decl_stmt|;
specifier|private
name|ByteBuffer
name|myBuffer
decl_stmt|;
specifier|private
name|ByteBuffer
name|myReadLineBuffer
decl_stmt|;
specifier|private
name|CharsetDecoder
name|myDecoder
decl_stmt|;
specifier|private
name|MessageDigest
name|myDigest
decl_stmt|;
specifier|public
name|FSFile
parameter_list|(
name|File
name|file
parameter_list|)
block|{
name|myFile
operator|=
name|file
expr_stmt|;
name|myPosition
operator|=
literal|0
expr_stmt|;
name|myBufferPosition
operator|=
literal|0
expr_stmt|;
name|myBuffer
operator|=
name|ByteBuffer
operator|.
name|allocate
argument_list|(
literal|1024
argument_list|)
expr_stmt|;
name|myReadLineBuffer
operator|=
name|ByteBuffer
operator|.
name|allocate
argument_list|(
literal|1024
argument_list|)
expr_stmt|;
name|myDecoder
operator|=
name|Charset
operator|.
name|forName
argument_list|(
literal|"UTF-8"
argument_list|)
operator|.
name|newDecoder
argument_list|()
expr_stmt|;
name|myDecoder
operator|=
name|myDecoder
operator|.
name|onMalformedInput
argument_list|(
name|CodingErrorAction
operator|.
name|REPORT
argument_list|)
operator|.
name|onUnmappableCharacter
argument_list|(
name|CodingErrorAction
operator|.
name|REPORT
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|seek
parameter_list|(
name|long
name|position
parameter_list|)
block|{
name|myPosition
operator|=
name|position
expr_stmt|;
block|}
specifier|public
name|long
name|position
parameter_list|()
block|{
return|return
name|myPosition
return|;
block|}
specifier|public
name|long
name|size
parameter_list|()
block|{
return|return
name|myFile
operator|.
name|length
argument_list|()
return|;
block|}
specifier|public
name|void
name|resetDigest
parameter_list|()
block|{
if|if
condition|(
name|myDigest
operator|==
literal|null
condition|)
block|{
try|try
block|{
name|myDigest
operator|=
name|MessageDigest
operator|.
name|getInstance
argument_list|(
literal|"MD5"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|NoSuchAlgorithmException
name|e
parameter_list|)
block|{
block|}
block|}
name|myDigest
operator|.
name|reset
argument_list|()
expr_stmt|;
block|}
specifier|public
name|String
name|digest
parameter_list|()
block|{
name|String
name|digest
init|=
name|SVNFileUtil
operator|.
name|toHexDigest
argument_list|(
name|myDigest
argument_list|)
decl_stmt|;
name|myDigest
operator|=
literal|null
expr_stmt|;
return|return
name|digest
return|;
block|}
specifier|public
name|int
name|readInt
parameter_list|()
throws|throws
name|SVNException
throws|,
name|NumberFormatException
block|{
name|String
name|line
init|=
name|readLine
argument_list|(
literal|80
argument_list|)
decl_stmt|;
if|if
condition|(
name|line
operator|==
literal|null
condition|)
block|{
name|SVNErrorMessage
name|err
init|=
name|SVNErrorMessage
operator|.
name|create
argument_list|(
name|SVNErrorCode
operator|.
name|BAD_VERSION_FILE_FORMAT
argument_list|,
literal|"First line of ''{0}'' contains non-digit"
argument_list|,
name|myFile
argument_list|)
decl_stmt|;
name|SVNErrorManager
operator|.
name|error
argument_list|(
name|err
argument_list|,
name|SVNLogType
operator|.
name|DEFAULT
argument_list|)
expr_stmt|;
block|}
return|return
name|Integer
operator|.
name|parseInt
argument_list|(
name|line
argument_list|)
return|;
block|}
specifier|public
name|long
name|readLong
parameter_list|()
throws|throws
name|SVNException
throws|,
name|NumberFormatException
block|{
name|String
name|line
init|=
name|readLine
argument_list|(
literal|80
argument_list|)
decl_stmt|;
if|if
condition|(
name|line
operator|==
literal|null
condition|)
block|{
name|SVNErrorMessage
name|err
init|=
name|SVNErrorMessage
operator|.
name|create
argument_list|(
name|SVNErrorCode
operator|.
name|BAD_VERSION_FILE_FORMAT
argument_list|,
literal|"First line of ''{0}'' contains non-digit"
argument_list|,
name|myFile
argument_list|)
decl_stmt|;
name|SVNErrorManager
operator|.
name|error
argument_list|(
name|err
argument_list|,
name|SVNLogType
operator|.
name|DEFAULT
argument_list|)
expr_stmt|;
block|}
return|return
name|Long
operator|.
name|parseLong
argument_list|(
name|line
argument_list|)
return|;
block|}
specifier|public
name|String
name|readLine
parameter_list|(
name|int
name|limit
parameter_list|)
throws|throws
name|SVNException
block|{
name|allocateReadBuffer
argument_list|(
name|limit
argument_list|)
expr_stmt|;
try|try
block|{
while|while
condition|(
name|myReadLineBuffer
operator|.
name|hasRemaining
argument_list|()
condition|)
block|{
name|int
name|b
init|=
name|read
argument_list|()
decl_stmt|;
if|if
condition|(
name|b
operator|<
literal|0
condition|)
block|{
name|SVNErrorMessage
name|err
init|=
name|SVNErrorMessage
operator|.
name|create
argument_list|(
name|SVNErrorCode
operator|.
name|STREAM_UNEXPECTED_EOF
argument_list|,
literal|"Can''t read length line from file {0}"
argument_list|,
name|getFile
argument_list|()
argument_list|)
decl_stmt|;
name|SVNErrorManager
operator|.
name|error
argument_list|(
name|err
argument_list|,
name|SVNLogType
operator|.
name|DEFAULT
argument_list|)
expr_stmt|;
block|}
if|else if
condition|(
name|b
operator|==
literal|'\n'
condition|)
block|{
break|break;
block|}
name|myReadLineBuffer
operator|.
name|put
argument_list|(
operator|(
name|byte
operator|)
operator|(
name|b
operator|&
literal|0XFF
operator|)
argument_list|)
expr_stmt|;
block|}
name|myReadLineBuffer
operator|.
name|flip
argument_list|()
expr_stmt|;
return|return
name|myDecoder
operator|.
name|decode
argument_list|(
name|myReadLineBuffer
argument_list|)
operator|.
name|toString
argument_list|()
return|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
name|SVNErrorMessage
name|err
init|=
name|SVNErrorMessage
operator|.
name|create
argument_list|(
name|SVNErrorCode
operator|.
name|FS_CORRUPT
argument_list|,
literal|"Can''t read length line from file {0}: {1}"
argument_list|,
operator|new
name|Object
index|[]
block|{
name|getFile
argument_list|()
block|,
name|e
operator|.
name|getLocalizedMessage
argument_list|()
block|}
argument_list|)
decl_stmt|;
name|SVNErrorManager
operator|.
name|error
argument_list|(
name|err
argument_list|,
name|e
argument_list|,
name|SVNLogType
operator|.
name|DEFAULT
argument_list|)
expr_stmt|;
block|}
return|return
literal|null
return|;
block|}
specifier|public
name|String
name|readLine
parameter_list|(
name|StringBuffer
name|buffer
parameter_list|)
throws|throws
name|SVNException
block|{
if|if
condition|(
name|buffer
operator|==
literal|null
condition|)
block|{
name|buffer
operator|=
operator|new
name|StringBuffer
argument_list|()
expr_stmt|;
block|}
name|boolean
name|endOfLineMet
init|=
literal|false
decl_stmt|;
name|boolean
name|lineStart
init|=
literal|true
decl_stmt|;
try|try
block|{
while|while
condition|(
operator|!
name|endOfLineMet
condition|)
block|{
name|allocateReadBuffer
argument_list|(
literal|160
argument_list|)
expr_stmt|;
while|while
condition|(
name|myReadLineBuffer
operator|.
name|hasRemaining
argument_list|()
condition|)
block|{
name|int
name|b
init|=
name|read
argument_list|()
decl_stmt|;
if|if
condition|(
name|b
operator|<
literal|0
condition|)
block|{
name|SVNErrorMessage
name|err
init|=
name|SVNErrorMessage
operator|.
name|create
argument_list|(
name|SVNErrorCode
operator|.
name|STREAM_UNEXPECTED_EOF
argument_list|,
literal|"Can''t read length line from file {0}"
argument_list|,
name|getFile
argument_list|()
argument_list|)
decl_stmt|;
name|SVNErrorManager
operator|.
name|error
argument_list|(
name|err
argument_list|,
name|lineStart
condition|?
name|Level
operator|.
name|FINEST
else|:
name|Level
operator|.
name|FINE
argument_list|,
name|SVNLogType
operator|.
name|DEFAULT
argument_list|)
expr_stmt|;
block|}
if|else if
condition|(
name|b
operator|==
literal|'\n'
condition|)
block|{
name|endOfLineMet
operator|=
literal|true
expr_stmt|;
break|break;
block|}
name|myReadLineBuffer
operator|.
name|put
argument_list|(
operator|(
name|byte
operator|)
operator|(
name|b
operator|&
literal|0XFF
operator|)
argument_list|)
expr_stmt|;
name|lineStart
operator|=
literal|false
expr_stmt|;
block|}
name|myReadLineBuffer
operator|.
name|flip
argument_list|()
expr_stmt|;
name|buffer
operator|.
name|append
argument_list|(
name|myDecoder
operator|.
name|decode
argument_list|(
name|myReadLineBuffer
argument_list|)
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
name|SVNErrorMessage
name|err
init|=
name|SVNErrorMessage
operator|.
name|create
argument_list|(
name|SVNErrorCode
operator|.
name|FS_CORRUPT
argument_list|,
literal|"Can''t read length line from file {0}: {1}"
argument_list|,
operator|new
name|Object
index|[]
block|{
name|getFile
argument_list|()
block|,
name|e
operator|.
name|getLocalizedMessage
argument_list|()
block|}
argument_list|)
decl_stmt|;
name|SVNErrorManager
operator|.
name|error
argument_list|(
name|err
argument_list|,
name|e
argument_list|,
name|SVNLogType
operator|.
name|DEFAULT
argument_list|)
expr_stmt|;
block|}
return|return
name|buffer
operator|.
name|toString
argument_list|()
return|;
block|}
specifier|public
name|SVNProperties
name|readProperties
parameter_list|(
name|boolean
name|allowEOF
parameter_list|,
name|boolean
name|allowBinaryValues
parameter_list|)
throws|throws
name|SVNException
block|{
name|SVNProperties
name|properties
init|=
operator|new
name|SVNProperties
argument_list|()
decl_stmt|;
name|String
name|line
init|=
literal|null
decl_stmt|;
try|try
block|{
while|while
condition|(
literal|true
condition|)
block|{
try|try
block|{
name|line
operator|=
name|readLine
argument_list|(
literal|160
argument_list|)
expr_stmt|;
comment|// K length or END, there may be EOF.
block|}
catch|catch
parameter_list|(
name|SVNException
name|e
parameter_list|)
block|{
if|if
condition|(
name|allowEOF
operator|&&
name|e
operator|.
name|getErrorMessage
argument_list|()
operator|.
name|getErrorCode
argument_list|()
operator|==
name|SVNErrorCode
operator|.
name|STREAM_UNEXPECTED_EOF
condition|)
block|{
break|break;
block|}
name|SVNErrorMessage
name|err
init|=
name|SVNErrorMessage
operator|.
name|create
argument_list|(
name|SVNErrorCode
operator|.
name|MALFORMED_FILE
argument_list|)
decl_stmt|;
name|SVNErrorManager
operator|.
name|error
argument_list|(
name|err
argument_list|,
name|e
argument_list|,
name|SVNLogType
operator|.
name|DEFAULT
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|line
operator|==
literal|null
operator|||
literal|""
operator|.
name|equals
argument_list|(
name|line
argument_list|)
condition|)
block|{
break|break;
block|}
if|else if
condition|(
operator|!
name|allowEOF
operator|&&
literal|"END"
operator|.
name|equals
argument_list|(
name|line
argument_list|)
condition|)
block|{
break|break;
block|}
name|char
name|kind
init|=
name|line
operator|.
name|charAt
argument_list|(
literal|0
argument_list|)
decl_stmt|;
name|int
name|length
init|=
operator|-
literal|1
decl_stmt|;
if|if
condition|(
operator|(
name|kind
operator|!=
literal|'K'
operator|&&
name|kind
operator|!=
literal|'D'
operator|)
operator|||
name|line
operator|.
name|length
argument_list|()
operator|<
literal|3
operator|||
name|line
operator|.
name|charAt
argument_list|(
literal|1
argument_list|)
operator|!=
literal|' '
operator|||
name|line
operator|.
name|length
argument_list|()
operator|<
literal|3
condition|)
block|{
name|SVNErrorMessage
name|err
init|=
name|SVNErrorMessage
operator|.
name|create
argument_list|(
name|SVNErrorCode
operator|.
name|MALFORMED_FILE
argument_list|)
decl_stmt|;
name|SVNErrorManager
operator|.
name|error
argument_list|(
name|err
argument_list|,
name|SVNLogType
operator|.
name|DEFAULT
argument_list|)
expr_stmt|;
block|}
try|try
block|{
name|length
operator|=
name|Integer
operator|.
name|parseInt
argument_list|(
name|line
operator|.
name|substring
argument_list|(
literal|2
argument_list|)
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|NumberFormatException
name|nfe
parameter_list|)
block|{
name|SVNErrorMessage
name|err
init|=
name|SVNErrorMessage
operator|.
name|create
argument_list|(
name|SVNErrorCode
operator|.
name|MALFORMED_FILE
argument_list|)
decl_stmt|;
name|SVNErrorManager
operator|.
name|error
argument_list|(
name|err
argument_list|,
name|SVNLogType
operator|.
name|DEFAULT
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|length
operator|<
literal|0
condition|)
block|{
name|SVNErrorMessage
name|err
init|=
name|SVNErrorMessage
operator|.
name|create
argument_list|(
name|SVNErrorCode
operator|.
name|MALFORMED_FILE
argument_list|)
decl_stmt|;
name|SVNErrorManager
operator|.
name|error
argument_list|(
name|err
argument_list|,
name|SVNLogType
operator|.
name|DEFAULT
argument_list|)
expr_stmt|;
block|}
name|allocateReadBuffer
argument_list|(
name|length
operator|+
literal|1
argument_list|)
expr_stmt|;
name|read
argument_list|(
name|myReadLineBuffer
argument_list|)
expr_stmt|;
name|myReadLineBuffer
operator|.
name|flip
argument_list|()
expr_stmt|;
name|myReadLineBuffer
operator|.
name|limit
argument_list|(
name|myReadLineBuffer
operator|.
name|limit
argument_list|()
operator|-
literal|1
argument_list|)
expr_stmt|;
name|int
name|pos
init|=
name|myReadLineBuffer
operator|.
name|position
argument_list|()
decl_stmt|;
name|int
name|limit
init|=
name|myReadLineBuffer
operator|.
name|limit
argument_list|()
decl_stmt|;
name|String
name|key
init|=
literal|null
decl_stmt|;
try|try
block|{
name|key
operator|=
name|myDecoder
operator|.
name|decode
argument_list|(
name|myReadLineBuffer
argument_list|)
operator|.
name|toString
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|MalformedInputException
name|mfi
parameter_list|)
block|{
name|key
operator|=
operator|new
name|String
argument_list|(
name|myReadLineBuffer
operator|.
name|array
argument_list|()
argument_list|,
name|myReadLineBuffer
operator|.
name|arrayOffset
argument_list|()
operator|+
name|pos
argument_list|,
name|limit
operator|-
name|pos
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|kind
operator|==
literal|'D'
condition|)
block|{
name|properties
operator|.
name|put
argument_list|(
name|key
argument_list|,
operator|(
name|SVNPropertyValue
operator|)
literal|null
argument_list|)
expr_stmt|;
continue|continue;
block|}
name|line
operator|=
name|readLine
argument_list|(
literal|160
argument_list|)
expr_stmt|;
if|if
condition|(
name|line
operator|==
literal|null
operator|||
name|line
operator|.
name|length
argument_list|()
operator|<
literal|3
operator|||
name|line
operator|.
name|charAt
argument_list|(
literal|0
argument_list|)
operator|!=
literal|'V'
operator|||
name|line
operator|.
name|charAt
argument_list|(
literal|1
argument_list|)
operator|!=
literal|' '
condition|)
block|{
name|SVNErrorMessage
name|err
init|=
name|SVNErrorMessage
operator|.
name|create
argument_list|(
name|SVNErrorCode
operator|.
name|MALFORMED_FILE
argument_list|)
decl_stmt|;
name|SVNErrorManager
operator|.
name|error
argument_list|(
name|err
argument_list|,
name|SVNLogType
operator|.
name|DEFAULT
argument_list|)
expr_stmt|;
block|}
try|try
block|{
name|length
operator|=
name|Integer
operator|.
name|parseInt
argument_list|(
name|line
operator|.
name|substring
argument_list|(
literal|2
argument_list|)
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|NumberFormatException
name|nfe
parameter_list|)
block|{
name|SVNErrorMessage
name|err
init|=
name|SVNErrorMessage
operator|.
name|create
argument_list|(
name|SVNErrorCode
operator|.
name|MALFORMED_FILE
argument_list|)
decl_stmt|;
name|SVNErrorManager
operator|.
name|error
argument_list|(
name|err
argument_list|,
name|SVNLogType
operator|.
name|DEFAULT
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|length
operator|<
literal|0
condition|)
block|{
name|SVNErrorMessage
name|err
init|=
name|SVNErrorMessage
operator|.
name|create
argument_list|(
name|SVNErrorCode
operator|.
name|MALFORMED_FILE
argument_list|)
decl_stmt|;
name|SVNErrorManager
operator|.
name|error
argument_list|(
name|err
argument_list|,
name|SVNLogType
operator|.
name|DEFAULT
argument_list|)
expr_stmt|;
block|}
name|allocateReadBuffer
argument_list|(
name|length
operator|+
literal|1
argument_list|)
expr_stmt|;
name|read
argument_list|(
name|myReadLineBuffer
argument_list|)
expr_stmt|;
name|myReadLineBuffer
operator|.
name|flip
argument_list|()
expr_stmt|;
name|myReadLineBuffer
operator|.
name|limit
argument_list|(
name|myReadLineBuffer
operator|.
name|limit
argument_list|()
operator|-
literal|1
argument_list|)
expr_stmt|;
name|pos
operator|=
name|myReadLineBuffer
operator|.
name|position
argument_list|()
expr_stmt|;
name|limit
operator|=
name|myReadLineBuffer
operator|.
name|limit
argument_list|()
expr_stmt|;
try|try
block|{
name|properties
operator|.
name|put
argument_list|(
name|key
argument_list|,
name|myDecoder
operator|.
name|decode
argument_list|(
name|myReadLineBuffer
argument_list|)
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|CharacterCodingException
name|cce
parameter_list|)
block|{
if|if
condition|(
name|allowBinaryValues
condition|)
block|{
name|byte
index|[]
name|dst
init|=
operator|new
name|byte
index|[
name|limit
operator|-
name|pos
index|]
decl_stmt|;
name|myReadLineBuffer
operator|.
name|position
argument_list|(
name|pos
argument_list|)
expr_stmt|;
name|myReadLineBuffer
operator|.
name|get
argument_list|(
name|dst
argument_list|)
expr_stmt|;
name|properties
operator|.
name|put
argument_list|(
name|key
argument_list|,
name|dst
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|SVNErrorMessage
name|error
init|=
name|SVNErrorMessage
operator|.
name|create
argument_list|(
name|SVNErrorCode
operator|.
name|FS_CORRUPT
argument_list|,
literal|"File ''{0}'' contains unexpected binary property value"
argument_list|,
name|getFile
argument_list|()
argument_list|)
decl_stmt|;
name|SVNErrorManager
operator|.
name|error
argument_list|(
name|error
argument_list|,
name|cce
argument_list|,
name|SVNLogType
operator|.
name|DEFAULT
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
name|SVNErrorMessage
name|err
init|=
name|SVNErrorMessage
operator|.
name|create
argument_list|(
name|SVNErrorCode
operator|.
name|MALFORMED_FILE
argument_list|)
decl_stmt|;
name|SVNErrorManager
operator|.
name|error
argument_list|(
name|err
argument_list|,
name|e
argument_list|,
name|SVNLogType
operator|.
name|DEFAULT
argument_list|)
expr_stmt|;
block|}
return|return
name|properties
return|;
block|}
specifier|public
name|Map
name|readHeader
parameter_list|()
throws|throws
name|SVNException
block|{
name|Map
name|map
init|=
operator|new
name|SVNHashMap
argument_list|()
decl_stmt|;
name|String
name|line
decl_stmt|;
while|while
condition|(
literal|true
condition|)
block|{
name|line
operator|=
name|readLine
argument_list|(
literal|1024
argument_list|)
expr_stmt|;
if|if
condition|(
literal|""
operator|.
name|equals
argument_list|(
name|line
argument_list|)
condition|)
block|{
break|break;
block|}
name|int
name|colonIndex
init|=
name|line
operator|.
name|indexOf
argument_list|(
literal|':'
argument_list|)
decl_stmt|;
if|if
condition|(
name|colonIndex
operator|<=
literal|0
operator|||
name|line
operator|.
name|length
argument_list|()
operator|<=
name|colonIndex
operator|+
literal|2
condition|)
block|{
name|SVNDebugLog
operator|.
name|getDefaultLog
argument_list|()
operator|.
name|logFine
argument_list|(
name|SVNLogType
operator|.
name|DEFAULT
argument_list|,
name|line
argument_list|)
expr_stmt|;
name|SVNErrorMessage
name|err
init|=
name|SVNErrorMessage
operator|.
name|create
argument_list|(
name|SVNErrorCode
operator|.
name|FS_CORRUPT
argument_list|,
literal|"Found malformed header in revision file"
argument_list|)
decl_stmt|;
name|SVNErrorManager
operator|.
name|error
argument_list|(
name|err
argument_list|,
name|SVNLogType
operator|.
name|DEFAULT
argument_list|)
expr_stmt|;
block|}
if|else if
condition|(
name|line
operator|.
name|charAt
argument_list|(
name|colonIndex
operator|+
literal|1
argument_list|)
operator|!=
literal|' '
condition|)
block|{
name|SVNErrorMessage
name|err
init|=
name|SVNErrorMessage
operator|.
name|create
argument_list|(
name|SVNErrorCode
operator|.
name|FS_CORRUPT
argument_list|,
literal|"Found malformed header in revision file"
argument_list|)
decl_stmt|;
name|SVNErrorManager
operator|.
name|error
argument_list|(
name|err
argument_list|,
name|SVNLogType
operator|.
name|DEFAULT
argument_list|)
expr_stmt|;
block|}
name|String
name|key
init|=
name|line
operator|.
name|substring
argument_list|(
literal|0
argument_list|,
name|colonIndex
argument_list|)
decl_stmt|;
name|String
name|value
init|=
name|line
operator|.
name|substring
argument_list|(
name|colonIndex
operator|+
literal|2
argument_list|)
decl_stmt|;
name|map
operator|.
name|put
argument_list|(
name|key
argument_list|,
name|value
argument_list|)
expr_stmt|;
block|}
return|return
name|map
return|;
block|}
specifier|public
name|int
name|read
parameter_list|()
throws|throws
name|IOException
block|{
if|if
condition|(
name|myInputStream
operator|==
literal|null
operator|||
name|myPosition
operator|<
name|myBufferPosition
operator|||
name|myPosition
operator|>=
name|myBufferPosition
operator|+
name|myBuffer
operator|.
name|limit
argument_list|()
condition|)
block|{
if|if
condition|(
name|fill
argument_list|()
operator|<=
literal|0
condition|)
block|{
return|return
operator|-
literal|1
return|;
block|}
block|}
else|else
block|{
name|myBuffer
operator|.
name|position
argument_list|(
operator|(
name|int
operator|)
operator|(
name|myPosition
operator|-
name|myBufferPosition
operator|)
argument_list|)
expr_stmt|;
block|}
name|int
name|r
init|=
operator|(
name|myBuffer
operator|.
name|get
argument_list|()
operator|&
literal|0xFF
operator|)
decl_stmt|;
if|if
condition|(
name|myDigest
operator|!=
literal|null
condition|)
block|{
name|myDigest
operator|.
name|update
argument_list|(
operator|(
name|byte
operator|)
name|r
argument_list|)
expr_stmt|;
block|}
name|myPosition
operator|++
expr_stmt|;
return|return
name|r
return|;
block|}
specifier|public
name|int
name|read
parameter_list|(
name|ByteBuffer
name|target
parameter_list|)
throws|throws
name|IOException
block|{
name|int
name|read
init|=
literal|0
decl_stmt|;
while|while
condition|(
name|target
operator|.
name|hasRemaining
argument_list|()
condition|)
block|{
if|if
condition|(
name|fill
argument_list|()
operator|<
literal|0
condition|)
block|{
return|return
name|read
operator|>
literal|0
condition|?
name|read
else|:
operator|-
literal|1
return|;
block|}
name|myBuffer
operator|.
name|position
argument_list|(
operator|(
name|int
operator|)
operator|(
name|myPosition
operator|-
name|myBufferPosition
operator|)
argument_list|)
expr_stmt|;
name|int
name|couldRead
init|=
name|Math
operator|.
name|min
argument_list|(
name|myBuffer
operator|.
name|remaining
argument_list|()
argument_list|,
name|target
operator|.
name|remaining
argument_list|()
argument_list|)
decl_stmt|;
name|int
name|readFrom
init|=
name|myBuffer
operator|.
name|position
argument_list|()
operator|+
name|myBuffer
operator|.
name|arrayOffset
argument_list|()
decl_stmt|;
name|target
operator|.
name|put
argument_list|(
name|myBuffer
operator|.
name|array
argument_list|()
argument_list|,
name|readFrom
argument_list|,
name|couldRead
argument_list|)
expr_stmt|;
if|if
condition|(
name|myDigest
operator|!=
literal|null
condition|)
block|{
name|myDigest
operator|.
name|update
argument_list|(
name|myBuffer
operator|.
name|array
argument_list|()
argument_list|,
name|readFrom
argument_list|,
name|couldRead
argument_list|)
expr_stmt|;
block|}
name|myPosition
operator|+=
name|couldRead
expr_stmt|;
name|read
operator|+=
name|couldRead
expr_stmt|;
name|myBuffer
operator|.
name|position
argument_list|(
name|myBuffer
operator|.
name|position
argument_list|()
operator|+
name|couldRead
argument_list|)
expr_stmt|;
block|}
return|return
name|read
return|;
block|}
specifier|public
name|int
name|read
parameter_list|(
name|byte
index|[]
name|buffer
parameter_list|,
name|int
name|offset
parameter_list|,
name|int
name|length
parameter_list|)
throws|throws
name|IOException
block|{
name|int
name|read
init|=
literal|0
decl_stmt|;
name|int
name|toRead
init|=
name|length
decl_stmt|;
while|while
condition|(
name|toRead
operator|>
literal|0
condition|)
block|{
if|if
condition|(
name|fill
argument_list|()
operator|<
literal|0
condition|)
block|{
return|return
name|read
operator|>
literal|0
condition|?
name|read
else|:
operator|-
literal|1
return|;
block|}
name|myBuffer
operator|.
name|position
argument_list|(
operator|(
name|int
operator|)
operator|(
name|myPosition
operator|-
name|myBufferPosition
operator|)
argument_list|)
expr_stmt|;
name|int
name|couldRead
init|=
name|Math
operator|.
name|min
argument_list|(
name|myBuffer
operator|.
name|remaining
argument_list|()
argument_list|,
name|toRead
argument_list|)
decl_stmt|;
name|myBuffer
operator|.
name|get
argument_list|(
name|buffer
argument_list|,
name|offset
argument_list|,
name|couldRead
argument_list|)
expr_stmt|;
if|if
condition|(
name|myDigest
operator|!=
literal|null
condition|)
block|{
name|myDigest
operator|.
name|update
argument_list|(
name|buffer
argument_list|,
name|offset
argument_list|,
name|couldRead
argument_list|)
expr_stmt|;
block|}
name|toRead
operator|-=
name|couldRead
expr_stmt|;
name|offset
operator|+=
name|couldRead
expr_stmt|;
name|myPosition
operator|+=
name|couldRead
expr_stmt|;
name|read
operator|+=
name|couldRead
expr_stmt|;
block|}
return|return
name|read
return|;
block|}
specifier|public
name|File
name|getFile
parameter_list|()
block|{
return|return
name|myFile
return|;
block|}
specifier|public
name|void
name|close
parameter_list|()
block|{
comment|//        if (myChannel != null) {
comment|//            try {
comment|//                myChannel.close();
comment|//            } catch (IOException e) {}
comment|//            SVNFileUtil.closeFile(myInputStream);
comment|//            myChannel = null;
comment|//            myInputStream = null;
comment|//            myPosition = 0;
comment|//            myDigest = null;
comment|//        }
if|if
condition|(
name|myInputStream
operator|!=
literal|null
condition|)
block|{
name|SVNFileUtil
operator|.
name|closeFile
argument_list|(
name|myInputStream
argument_list|)
expr_stmt|;
name|myInputStream
operator|=
literal|null
expr_stmt|;
name|myPosition
operator|=
literal|0
expr_stmt|;
name|myDigest
operator|=
literal|null
expr_stmt|;
block|}
block|}
specifier|private
name|InputStream
name|resetInputStream
parameter_list|()
throws|throws
name|IOException
block|{
if|if
condition|(
name|myInputStream
operator|==
literal|null
condition|)
block|{
name|myInputStream
operator|=
name|SVNFileUtil
operator|.
name|createFileInputStream
argument_list|(
name|myFile
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|SVNFileUtil
operator|.
name|closeFile
argument_list|(
name|myInputStream
argument_list|)
expr_stmt|;
name|myInputStream
operator|=
name|SVNFileUtil
operator|.
name|createFileInputStream
argument_list|(
name|myFile
argument_list|)
expr_stmt|;
block|}
return|return
name|myInputStream
return|;
block|}
specifier|private
name|int
name|readFromInputStream
parameter_list|(
name|long
name|fromPos
parameter_list|,
name|ByteBuffer
name|buffer
parameter_list|)
throws|throws
name|IOException
block|{
name|resetInputStream
argument_list|()
operator|.
name|skip
argument_list|(
name|fromPos
argument_list|)
expr_stmt|;
comment|//BUG: buffer limit by int!
name|byte
index|[]
name|b
init|=
operator|new
name|byte
index|[
operator|(
name|int
operator|)
operator|(
name|myFile
operator|.
name|length
argument_list|()
operator|-
name|fromPos
operator|)
index|]
decl_stmt|;
name|myInputStream
operator|.
name|read
argument_list|(
name|b
argument_list|)
expr_stmt|;
name|buffer
operator|.
name|put
argument_list|(
name|b
argument_list|)
expr_stmt|;
return|return
name|b
operator|.
name|length
return|;
block|}
specifier|private
name|int
name|fill
parameter_list|()
throws|throws
name|IOException
block|{
if|if
condition|(
name|myInputStream
operator|==
literal|null
operator|||
name|myPosition
operator|<
name|myBufferPosition
operator|||
name|myPosition
operator|>=
name|myBufferPosition
operator|+
name|myBuffer
operator|.
name|limit
argument_list|()
condition|)
block|{
name|myBufferPosition
operator|=
name|myPosition
expr_stmt|;
comment|//            setPosition(myBufferPosition);
name|myBuffer
operator|.
name|clear
argument_list|()
expr_stmt|;
name|int
name|read
init|=
name|readFromInputStream
argument_list|(
name|myBufferPosition
argument_list|,
name|myBuffer
argument_list|)
decl_stmt|;
name|myBuffer
operator|.
name|position
argument_list|(
literal|0
argument_list|)
expr_stmt|;
name|myBuffer
operator|.
name|limit
argument_list|(
name|read
operator|>=
literal|0
condition|?
name|read
else|:
literal|0
argument_list|)
expr_stmt|;
return|return
name|read
return|;
block|}
return|return
literal|0
return|;
block|}
specifier|private
name|void
name|allocateReadBuffer
parameter_list|(
name|int
name|limit
parameter_list|)
block|{
if|if
condition|(
name|limit
operator|>
name|myReadLineBuffer
operator|.
name|capacity
argument_list|()
condition|)
block|{
name|myReadLineBuffer
operator|=
name|ByteBuffer
operator|.
name|allocate
argument_list|(
name|limit
operator|*
literal|3
operator|/
literal|2
argument_list|)
expr_stmt|;
block|}
name|myReadLineBuffer
operator|.
name|clear
argument_list|()
expr_stmt|;
name|myReadLineBuffer
operator|.
name|limit
argument_list|(
name|limit
argument_list|)
expr_stmt|;
block|}
comment|//    private FileChannel getChannel() throws IOException {
comment|//        if (myChannel == null) {
comment|//            myInputStream = SVNFileUtil.createFileInputStream(myFile);
comment|//            myChannel = myInputStream.getChannel();
comment|//        }
comment|//        return myChannel;
comment|//    }
specifier|public
name|PathInfo
name|readPathInfoFromReportFile
parameter_list|()
throws|throws
name|IOException
throws|,
name|SVNException
block|{
name|int
name|firstByte
init|=
name|read
argument_list|()
decl_stmt|;
if|if
condition|(
name|firstByte
operator|==
operator|-
literal|1
operator|||
name|firstByte
operator|==
literal|'-'
condition|)
block|{
return|return
literal|null
return|;
block|}
name|String
name|path
init|=
name|readStringFromReportFile
argument_list|()
decl_stmt|;
name|String
name|linkPath
init|=
name|read
argument_list|()
operator|==
literal|'+'
condition|?
name|readStringFromReportFile
argument_list|()
else|:
literal|null
decl_stmt|;
name|long
name|revision
init|=
name|readRevisionFromReportFile
argument_list|()
decl_stmt|;
name|SVNDepth
name|depth
init|=
name|SVNDepth
operator|.
name|INFINITY
decl_stmt|;
if|if
condition|(
name|read
argument_list|()
operator|==
literal|'+'
condition|)
block|{
name|int
name|id
init|=
name|read
argument_list|()
decl_stmt|;
switch|switch
condition|(
name|id
condition|)
block|{
case|case
literal|'X'
case|:
name|depth
operator|=
name|SVNDepth
operator|.
name|EXCLUDE
expr_stmt|;
break|break;
case|case
literal|'E'
case|:
name|depth
operator|=
name|SVNDepth
operator|.
name|EMPTY
expr_stmt|;
break|break;
case|case
literal|'F'
case|:
name|depth
operator|=
name|SVNDepth
operator|.
name|FILES
expr_stmt|;
break|break;
case|case
literal|'M'
case|:
name|depth
operator|=
name|SVNDepth
operator|.
name|IMMEDIATES
expr_stmt|;
break|break;
default|default:
block|{
name|SVNErrorMessage
name|err
init|=
name|SVNErrorMessage
operator|.
name|create
argument_list|(
name|SVNErrorCode
operator|.
name|REPOS_BAD_REVISION_REPORT
argument_list|,
literal|"Invalid depth ({0}) for path ''{1}''"
argument_list|,
operator|new
name|Object
index|[]
block|{
operator|new
name|Integer
argument_list|(
name|id
argument_list|)
block|,
name|path
block|}
argument_list|)
decl_stmt|;
name|SVNErrorManager
operator|.
name|error
argument_list|(
name|err
argument_list|,
name|SVNLogType
operator|.
name|WC
argument_list|)
expr_stmt|;
block|}
block|}
block|}
name|boolean
name|startEmpty
init|=
name|read
argument_list|()
operator|==
literal|'+'
decl_stmt|;
name|String
name|lockToken
init|=
name|read
argument_list|()
operator|==
literal|'+'
condition|?
name|readStringFromReportFile
argument_list|()
else|:
literal|null
decl_stmt|;
return|return
operator|new
name|PathInfo
argument_list|(
name|path
argument_list|,
name|linkPath
argument_list|,
name|lockToken
argument_list|,
name|revision
argument_list|,
name|depth
argument_list|,
name|startEmpty
argument_list|)
return|;
block|}
specifier|private
name|String
name|readStringFromReportFile
parameter_list|()
throws|throws
name|IOException
block|{
name|int
name|length
init|=
name|readNumberFromReportFile
argument_list|()
decl_stmt|;
if|if
condition|(
name|length
operator|==
literal|0
condition|)
block|{
return|return
literal|""
return|;
block|}
name|byte
index|[]
name|buffer
init|=
operator|new
name|byte
index|[
name|length
index|]
decl_stmt|;
name|read
argument_list|(
name|buffer
argument_list|,
literal|0
argument_list|,
name|length
argument_list|)
expr_stmt|;
return|return
operator|new
name|String
argument_list|(
name|buffer
argument_list|,
literal|"UTF-8"
argument_list|)
return|;
block|}
specifier|private
name|int
name|readNumberFromReportFile
parameter_list|()
throws|throws
name|IOException
block|{
name|int
name|b
decl_stmt|;
name|ByteArrayOutputStream
name|resultStream
init|=
operator|new
name|ByteArrayOutputStream
argument_list|()
decl_stmt|;
while|while
condition|(
operator|(
name|b
operator|=
name|read
argument_list|()
operator|)
operator|!=
literal|':'
condition|)
block|{
name|resultStream
operator|.
name|write
argument_list|(
name|b
argument_list|)
expr_stmt|;
block|}
return|return
name|Integer
operator|.
name|parseInt
argument_list|(
operator|new
name|String
argument_list|(
name|resultStream
operator|.
name|toByteArray
argument_list|()
argument_list|,
literal|"UTF-8"
argument_list|)
argument_list|,
literal|10
argument_list|)
return|;
block|}
specifier|private
name|long
name|readRevisionFromReportFile
parameter_list|()
throws|throws
name|IOException
block|{
if|if
condition|(
name|read
argument_list|()
operator|==
literal|'+'
condition|)
block|{
return|return
name|readNumberFromReportFile
argument_list|()
return|;
block|}
return|return
name|SVNRepository
operator|.
name|INVALID_REVISION
return|;
block|}
block|}
end_class

end_unit

