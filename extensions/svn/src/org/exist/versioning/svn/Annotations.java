begin_unit|revision:1.0.0;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * ====================================================================  * Copyright (c) 2004-2010 TMate Software Ltd.  All rights reserved.  *  * This software is licensed as described in the file COPYING, which  * you should have received as part of this distribution.  The terms  * are also available at http://svnkit.com/license.html.  * If newer versions of this license are posted there, you may use a  * newer version instead, at your option.  * ====================================================================  */
end_comment

begin_package
package|package
name|org
operator|.
name|exist
operator|.
name|versioning
operator|.
name|svn
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|File
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Date
import|;
end_import

begin_import
import|import
name|org
operator|.
name|tmatesoft
operator|.
name|svn
operator|.
name|core
operator|.
name|SVNException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|tmatesoft
operator|.
name|svn
operator|.
name|core
operator|.
name|SVNURL
import|;
end_import

begin_import
import|import
name|org
operator|.
name|tmatesoft
operator|.
name|svn
operator|.
name|core
operator|.
name|internal
operator|.
name|io
operator|.
name|dav
operator|.
name|DAVRepositoryFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|tmatesoft
operator|.
name|svn
operator|.
name|core
operator|.
name|internal
operator|.
name|util
operator|.
name|SVNDate
import|;
end_import

begin_import
import|import
name|org
operator|.
name|tmatesoft
operator|.
name|svn
operator|.
name|core
operator|.
name|internal
operator|.
name|util
operator|.
name|SVNFormatUtil
import|;
end_import

begin_import
import|import
name|org
operator|.
name|tmatesoft
operator|.
name|svn
operator|.
name|core
operator|.
name|wc
operator|.
name|ISVNAnnotateHandler
import|;
end_import

begin_import
import|import
name|org
operator|.
name|tmatesoft
operator|.
name|svn
operator|.
name|core
operator|.
name|wc
operator|.
name|ISVNOptions
import|;
end_import

begin_import
import|import
name|org
operator|.
name|tmatesoft
operator|.
name|svn
operator|.
name|core
operator|.
name|wc
operator|.
name|SVNClientManager
import|;
end_import

begin_import
import|import
name|org
operator|.
name|tmatesoft
operator|.
name|svn
operator|.
name|core
operator|.
name|wc
operator|.
name|SVNLogClient
import|;
end_import

begin_import
import|import
name|org
operator|.
name|tmatesoft
operator|.
name|svn
operator|.
name|core
operator|.
name|wc
operator|.
name|SVNRevision
import|;
end_import

begin_comment
comment|/**  * @version 1.3  * @author  TMate Software Ltd.  */
end_comment

begin_class
specifier|public
class|class
name|Annotations
block|{
specifier|public
specifier|static
name|void
name|main
parameter_list|(
name|String
index|[]
name|args
parameter_list|)
block|{
comment|//1. first initialize the DAV protocol
name|DAVRepositoryFactory
operator|.
name|setup
argument_list|()
expr_stmt|;
try|try
block|{
comment|//we will annotate a publicly available file
name|SVNURL
name|fileURL
init|=
name|SVNURL
operator|.
name|parseURIEncoded
argument_list|(
literal|"https://svn.svnkit.com/repos/svnkit/trunk/changelog.txt"
argument_list|)
decl_stmt|;
comment|//SVNLogClient is the class with which you can perform annotations
name|SVNLogClient
name|logClient
init|=
name|SVNClientManager
operator|.
name|newInstance
argument_list|()
operator|.
name|getLogClient
argument_list|()
decl_stmt|;
name|boolean
name|ignoreMimeType
init|=
literal|false
decl_stmt|;
name|boolean
name|includeMergedRevisions
init|=
literal|false
decl_stmt|;
name|logClient
operator|.
name|doAnnotate
argument_list|(
name|fileURL
argument_list|,
name|SVNRevision
operator|.
name|UNDEFINED
argument_list|,
name|SVNRevision
operator|.
name|create
argument_list|(
literal|1
argument_list|)
argument_list|,
name|SVNRevision
operator|.
name|HEAD
argument_list|,
name|ignoreMimeType
comment|/*not ignoring mime type*/
argument_list|,
name|includeMergedRevisions
comment|/*not including merged revisions */
argument_list|,
operator|new
name|AnnotationHandler
argument_list|(
name|includeMergedRevisions
argument_list|,
literal|false
comment|/*use a short form of inline information*/
argument_list|,
name|logClient
operator|.
name|getOptions
argument_list|()
argument_list|)
argument_list|,
literal|null
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|SVNException
name|svne
parameter_list|)
block|{
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
name|svne
operator|.
name|getMessage
argument_list|()
argument_list|)
expr_stmt|;
name|System
operator|.
name|exit
argument_list|(
literal|1
argument_list|)
expr_stmt|;
block|}
block|}
specifier|private
specifier|static
class|class
name|AnnotationHandler
implements|implements
name|ISVNAnnotateHandler
block|{
specifier|private
name|boolean
name|myIsUseMergeHistory
decl_stmt|;
specifier|private
name|boolean
name|myIsVerbose
decl_stmt|;
specifier|private
name|ISVNOptions
name|myOptions
decl_stmt|;
specifier|public
name|AnnotationHandler
parameter_list|(
name|boolean
name|useMergeHistory
parameter_list|,
name|boolean
name|verbose
parameter_list|,
name|ISVNOptions
name|options
parameter_list|)
block|{
name|myIsUseMergeHistory
operator|=
name|useMergeHistory
expr_stmt|;
name|myIsVerbose
operator|=
name|verbose
expr_stmt|;
name|myOptions
operator|=
name|options
expr_stmt|;
block|}
comment|/**          * Deprecated.          */
specifier|public
name|void
name|handleLine
parameter_list|(
name|Date
name|date
parameter_list|,
name|long
name|revision
parameter_list|,
name|String
name|author
parameter_list|,
name|String
name|line
parameter_list|)
throws|throws
name|SVNException
block|{
name|handleLine
argument_list|(
name|date
argument_list|,
name|revision
argument_list|,
name|author
argument_list|,
name|line
argument_list|,
literal|null
argument_list|,
operator|-
literal|1
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|,
literal|0
argument_list|)
expr_stmt|;
block|}
comment|/**          * Formats per line information and prints it out to the console.          */
specifier|public
name|void
name|handleLine
parameter_list|(
name|Date
name|date
parameter_list|,
name|long
name|revision
parameter_list|,
name|String
name|author
parameter_list|,
name|String
name|line
parameter_list|,
name|Date
name|mergedDate
parameter_list|,
name|long
name|mergedRevision
parameter_list|,
name|String
name|mergedAuthor
parameter_list|,
name|String
name|mergedPath
parameter_list|,
name|int
name|lineNumber
parameter_list|)
throws|throws
name|SVNException
block|{
name|String
name|mergedStr
init|=
literal|""
decl_stmt|;
if|if
condition|(
name|myIsUseMergeHistory
condition|)
block|{
if|if
condition|(
name|revision
operator|!=
name|mergedRevision
condition|)
block|{
name|mergedStr
operator|=
literal|"G "
expr_stmt|;
block|}
else|else
block|{
name|mergedStr
operator|=
literal|"  "
expr_stmt|;
block|}
name|date
operator|=
name|mergedDate
expr_stmt|;
name|revision
operator|=
name|mergedRevision
expr_stmt|;
name|author
operator|=
name|mergedAuthor
expr_stmt|;
block|}
name|String
name|revStr
init|=
name|revision
operator|>=
literal|0
condition|?
name|SVNFormatUtil
operator|.
name|formatString
argument_list|(
name|Long
operator|.
name|toString
argument_list|(
name|revision
argument_list|)
argument_list|,
literal|6
argument_list|,
literal|false
argument_list|)
else|:
literal|"     -"
decl_stmt|;
name|String
name|authorStr
init|=
name|author
operator|!=
literal|null
condition|?
name|SVNFormatUtil
operator|.
name|formatString
argument_list|(
name|author
argument_list|,
literal|10
argument_list|,
literal|false
argument_list|)
else|:
literal|"         -"
decl_stmt|;
if|if
condition|(
name|myIsVerbose
condition|)
block|{
name|String
name|dateStr
init|=
literal|"                                           -"
decl_stmt|;
if|if
condition|(
name|date
operator|!=
literal|null
condition|)
block|{
name|dateStr
operator|=
name|SVNDate
operator|.
name|formatHumanDate
argument_list|(
name|date
argument_list|,
name|myOptions
argument_list|)
expr_stmt|;
block|}
name|System
operator|.
name|out
operator|.
name|print
argument_list|(
name|mergedStr
operator|+
name|revStr
operator|+
literal|" "
operator|+
name|authorStr
operator|+
literal|" "
operator|+
name|dateStr
operator|+
literal|" "
argument_list|)
expr_stmt|;
if|if
condition|(
name|myIsUseMergeHistory
operator|&&
name|mergedPath
operator|!=
literal|null
condition|)
block|{
name|String
name|pathStr
init|=
name|SVNFormatUtil
operator|.
name|formatString
argument_list|(
name|mergedPath
argument_list|,
literal|14
argument_list|,
literal|true
argument_list|)
decl_stmt|;
name|System
operator|.
name|out
operator|.
name|print
argument_list|(
name|pathStr
operator|+
literal|" "
argument_list|)
expr_stmt|;
block|}
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
name|line
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
name|mergedStr
operator|+
name|revStr
operator|+
literal|" "
operator|+
name|authorStr
operator|+
literal|" "
operator|+
name|line
argument_list|)
expr_stmt|;
block|}
block|}
specifier|public
name|boolean
name|handleRevision
parameter_list|(
name|Date
name|date
parameter_list|,
name|long
name|revision
parameter_list|,
name|String
name|author
parameter_list|,
name|File
name|contents
parameter_list|)
throws|throws
name|SVNException
block|{
comment|/* We do not want our file to be annotated for each revision of the range, but only for the last               * revision of it, so we return false                */
return|return
literal|false
return|;
block|}
specifier|public
name|void
name|handleEOF
parameter_list|()
block|{
block|}
block|}
block|}
end_class

end_unit

