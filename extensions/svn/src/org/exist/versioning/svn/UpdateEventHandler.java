begin_unit|revision:1.0.0;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * ====================================================================  * Copyright (c) 2004-2010 TMate Software Ltd.  All rights reserved.  *  * This software is licensed as described in the file COPYING, which  * you should have received as part of this distribution.  The terms  * are also available at http://svnkit.com/license.html  * If newer versions of this license are posted there, you may use a  * newer version instead, at your option.  * ====================================================================  */
end_comment

begin_package
package|package
name|org
operator|.
name|exist
operator|.
name|versioning
operator|.
name|svn
package|;
end_package

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|versioning
operator|.
name|svn
operator|.
name|wc
operator|.
name|ISVNEventHandler
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|versioning
operator|.
name|svn
operator|.
name|wc
operator|.
name|SVNEvent
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|versioning
operator|.
name|svn
operator|.
name|wc
operator|.
name|SVNEventAction
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|versioning
operator|.
name|svn
operator|.
name|wc
operator|.
name|SVNStatusType
import|;
end_import

begin_import
import|import
name|org
operator|.
name|tmatesoft
operator|.
name|svn
operator|.
name|core
operator|.
name|SVNCancelException
import|;
end_import

begin_comment
comment|/*  * This class is an implementation of ISVNEventHandler intended for  processing     * events generated by do*() methods of an SVNUpdateClient object. An  instance    * of this handler will be provided to  an  SVNUpdateClient. When calling,  for   * example, SVNWCClient.doUpdate(..) on some path, that method will generate an   * event for each 'update'/'add'/'delete'/.. action it will perform upon  every   * path being updated. And this event is passed to   *   * ISVNEventHandler.handleEvent(SVNEvent event,  double progress)   *   * to notify the handler.  The  event  contains detailed  information about the   * path, action performed upon the path and some other.   */
end_comment

begin_class
specifier|public
class|class
name|UpdateEventHandler
implements|implements
name|ISVNEventHandler
block|{
comment|/*      * progress  is  currently  reserved  for future purposes and now is always      * ISVNEventHandler.UNKNOWN        */
specifier|public
name|void
name|handleEvent
parameter_list|(
name|SVNEvent
name|event
parameter_list|,
name|double
name|progress
parameter_list|)
block|{
comment|/*          * Gets the current action. An action is represented by SVNEventAction.          * In case of an update an  action  can  be  determined  via  comparing           * SVNEvent.getAction() and SVNEventAction.UPDATE_-like constants.           */
name|SVNEventAction
name|action
init|=
name|event
operator|.
name|getAction
argument_list|()
decl_stmt|;
name|String
name|pathChangeType
init|=
literal|" "
decl_stmt|;
if|if
condition|(
name|action
operator|==
name|SVNEventAction
operator|.
name|UPDATE_ADD
condition|)
block|{
comment|/*              * the item was added              */
name|pathChangeType
operator|=
literal|"A"
expr_stmt|;
block|}
if|else if
condition|(
name|action
operator|==
name|SVNEventAction
operator|.
name|UPDATE_DELETE
condition|)
block|{
comment|/*              * the item was deleted              */
name|pathChangeType
operator|=
literal|"D"
expr_stmt|;
block|}
if|else if
condition|(
name|action
operator|==
name|SVNEventAction
operator|.
name|UPDATE_UPDATE
condition|)
block|{
comment|/*              * Find out in details what  state the item is (after  having  been               * updated).              *               * Gets  the  status  of  file/directory  item   contents.  It   is               * SVNStatusType  who contains information on the state of an item.              */
name|SVNStatusType
name|contentsStatus
init|=
name|event
operator|.
name|getContentsStatus
argument_list|()
decl_stmt|;
if|if
condition|(
name|contentsStatus
operator|==
name|SVNStatusType
operator|.
name|CHANGED
condition|)
block|{
comment|/*                  * the  item  was  modified in the repository (got  the changes                   * from the repository                  */
name|pathChangeType
operator|=
literal|"U"
expr_stmt|;
block|}
if|else if
condition|(
name|contentsStatus
operator|==
name|SVNStatusType
operator|.
name|CONFLICTED
condition|)
block|{
comment|/*                  * The file item is in  a  state  of Conflict. That is, changes                  * received from the repository during an update, overlap  with                   * local changes the user has in his working copy.                  */
name|pathChangeType
operator|=
literal|"C"
expr_stmt|;
block|}
if|else if
condition|(
name|contentsStatus
operator|==
name|SVNStatusType
operator|.
name|MERGED
condition|)
block|{
comment|/*                  * The file item was merGed (those  changes that came from  the                   * repository  did  not  overlap local changes and were  merged                   * into the file).                  */
name|pathChangeType
operator|=
literal|"G"
expr_stmt|;
block|}
block|}
if|else if
condition|(
name|action
operator|==
name|SVNEventAction
operator|.
name|UPDATE_EXTERNAL
condition|)
block|{
comment|/*for externals definitions*/
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"Fetching external item into '"
operator|+
name|event
operator|.
name|getFile
argument_list|()
operator|.
name|getAbsolutePath
argument_list|()
operator|+
literal|"'"
argument_list|)
expr_stmt|;
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"External at revision "
operator|+
name|event
operator|.
name|getRevision
argument_list|()
argument_list|)
expr_stmt|;
return|return;
block|}
if|else if
condition|(
name|action
operator|==
name|SVNEventAction
operator|.
name|UPDATE_COMPLETED
condition|)
block|{
comment|/*              * Updating the working copy is completed. Prints out the revision.              */
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"At revision "
operator|+
name|event
operator|.
name|getRevision
argument_list|()
argument_list|)
expr_stmt|;
return|return;
block|}
if|else if
condition|(
name|action
operator|==
name|SVNEventAction
operator|.
name|ADD
condition|)
block|{
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"A     "
operator|+
name|event
operator|.
name|getFile
argument_list|()
argument_list|)
expr_stmt|;
return|return;
block|}
if|else if
condition|(
name|action
operator|==
name|SVNEventAction
operator|.
name|DELETE
condition|)
block|{
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"D     "
operator|+
name|event
operator|.
name|getFile
argument_list|()
argument_list|)
expr_stmt|;
return|return;
block|}
if|else if
condition|(
name|action
operator|==
name|SVNEventAction
operator|.
name|LOCKED
condition|)
block|{
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"L     "
operator|+
name|event
operator|.
name|getFile
argument_list|()
argument_list|)
expr_stmt|;
return|return;
block|}
if|else if
condition|(
name|action
operator|==
name|SVNEventAction
operator|.
name|LOCK_FAILED
condition|)
block|{
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"failed to lock    "
operator|+
name|event
operator|.
name|getFile
argument_list|()
argument_list|)
expr_stmt|;
return|return;
block|}
comment|/*          * Now getting the status of properties of an item. SVNStatusType  also          * contains information on the properties state.          */
name|SVNStatusType
name|propertiesStatus
init|=
name|event
operator|.
name|getPropertiesStatus
argument_list|()
decl_stmt|;
comment|/*          * At first consider properties are normal (unchanged).          */
name|String
name|propertiesChangeType
init|=
literal|" "
decl_stmt|;
if|if
condition|(
name|propertiesStatus
operator|==
name|SVNStatusType
operator|.
name|CHANGED
condition|)
block|{
comment|/*              * Properties were updated.              */
name|propertiesChangeType
operator|=
literal|"U"
expr_stmt|;
block|}
if|else if
condition|(
name|propertiesStatus
operator|==
name|SVNStatusType
operator|.
name|CONFLICTED
condition|)
block|{
comment|/*              * Properties are in conflict with the repository.              */
name|propertiesChangeType
operator|=
literal|"C"
expr_stmt|;
block|}
if|else if
condition|(
name|propertiesStatus
operator|==
name|SVNStatusType
operator|.
name|MERGED
condition|)
block|{
comment|/*              * Properties that came from the repository were  merged  with  the              * local ones.              */
name|propertiesChangeType
operator|=
literal|"G"
expr_stmt|;
block|}
comment|/*          * Gets the status of the lock.          */
name|String
name|lockLabel
init|=
literal|" "
decl_stmt|;
name|SVNStatusType
name|lockType
init|=
name|event
operator|.
name|getLockStatus
argument_list|()
decl_stmt|;
if|if
condition|(
name|lockType
operator|==
name|SVNStatusType
operator|.
name|LOCK_UNLOCKED
condition|)
block|{
comment|/*              * The lock is broken by someone.              */
name|lockLabel
operator|=
literal|"B"
expr_stmt|;
block|}
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
name|pathChangeType
operator|+
name|propertiesChangeType
operator|+
name|lockLabel
operator|+
literal|"       "
operator|+
name|event
operator|.
name|getFile
argument_list|()
argument_list|)
expr_stmt|;
block|}
comment|/*      * Should be implemented to check if the current operation is cancelled. If       * it is, this method should throw an SVNCancelException.       */
specifier|public
name|void
name|checkCancelled
parameter_list|()
throws|throws
name|SVNCancelException
block|{
block|}
block|}
end_class

end_unit

