begin_unit|revision:1.0.0;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  *  eXist Open Source Native XML Database  *  Copyright (C) 2010 The eXist Project  *  http://exist-db.org  *  *  This program is free software; you can redistribute it and/or  *  modify it under the terms of the GNU Lesser General Public License  *  as published by the Free Software Foundation; either version 2  *  of the License, or (at your option) any later version.  *  *  This program is distributed in the hope that it will be useful,  *  but WITHOUT ANY WARRANTY; without even the implied warranty of  *  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the  *  GNU Lesser General Public License for more details.  *  *  You should have received a copy of the GNU Lesser General Public  *  License along with this library; if not, write to the Free Software  *  Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA  02110-1301  USA  *  *  $Id$  */
end_comment

begin_package
package|package
name|org
operator|.
name|exist
operator|.
name|versioning
operator|.
name|svn
operator|.
name|xquery
package|;
end_package

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|dom
operator|.
name|QName
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|versioning
operator|.
name|svn
operator|.
name|Resource
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|versioning
operator|.
name|svn
operator|.
name|wc
operator|.
name|ISVNStatusHandler
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|versioning
operator|.
name|svn
operator|.
name|wc
operator|.
name|SVNClientManager
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|versioning
operator|.
name|svn
operator|.
name|wc
operator|.
name|SVNStatusClient
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|versioning
operator|.
name|svn
operator|.
name|wc
operator|.
name|SVNWCClient
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|versioning
operator|.
name|svn
operator|.
name|wc
operator|.
name|SVNWCUtil
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|xquery
operator|.
name|BasicFunction
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|xquery
operator|.
name|Cardinality
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|xquery
operator|.
name|FunctionSignature
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|xquery
operator|.
name|XPathException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|xquery
operator|.
name|XQueryContext
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|xquery
operator|.
name|value
operator|.
name|FunctionParameterSequenceType
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|xquery
operator|.
name|value
operator|.
name|FunctionReturnSequenceType
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|xquery
operator|.
name|value
operator|.
name|Sequence
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|xquery
operator|.
name|value
operator|.
name|SequenceType
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|xquery
operator|.
name|value
operator|.
name|Type
import|;
end_import

begin_import
import|import
name|org
operator|.
name|tmatesoft
operator|.
name|svn
operator|.
name|core
operator|.
name|SVNDepth
import|;
end_import

begin_import
import|import
name|org
operator|.
name|tmatesoft
operator|.
name|svn
operator|.
name|core
operator|.
name|SVNException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|tmatesoft
operator|.
name|svn
operator|.
name|core
operator|.
name|internal
operator|.
name|io
operator|.
name|svn
operator|.
name|SVNRepositoryFactoryImpl
import|;
end_import

begin_import
import|import
name|org
operator|.
name|tmatesoft
operator|.
name|svn
operator|.
name|core
operator|.
name|wc
operator|.
name|SVNRevision
import|;
end_import

begin_comment
comment|/**  * Status information on Working Copy items.  *  * @author<a href="mailto:amir.akhmedov@gmail.com">Amir Akhmedov</a>  * @author<a href="mailto:shabanovd@gmail.com">Dmitriy Shabanov</a>  *  */
end_comment

begin_class
specifier|public
class|class
name|SVNStatus
extends|extends
name|BasicFunction
block|{
specifier|public
specifier|final
specifier|static
name|FunctionSignature
name|signature
init|=
operator|new
name|FunctionSignature
argument_list|(
operator|new
name|QName
argument_list|(
literal|"status"
argument_list|,
name|SVNModule
operator|.
name|NAMESPACE_URI
argument_list|,
name|SVNModule
operator|.
name|PREFIX
argument_list|)
argument_list|,
literal|"Status information on Working Copy items."
argument_list|,
operator|new
name|SequenceType
index|[]
block|{
operator|new
name|FunctionParameterSequenceType
argument_list|(
literal|"path"
argument_list|,
name|Type
operator|.
name|ANY_URI
argument_list|,
name|Cardinality
operator|.
name|EXACTLY_ONE
argument_list|,
literal|"working copy path"
argument_list|)
block|}
argument_list|,
operator|new
name|FunctionReturnSequenceType
argument_list|(
name|Type
operator|.
name|EMPTY
argument_list|,
name|Cardinality
operator|.
name|ZERO
argument_list|,
literal|""
argument_list|)
argument_list|)
decl_stmt|;
specifier|public
name|SVNStatus
parameter_list|(
name|XQueryContext
name|context
parameter_list|)
block|{
name|super
argument_list|(
name|context
argument_list|,
name|signature
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|Sequence
name|eval
parameter_list|(
name|Sequence
index|[]
name|args
parameter_list|,
name|Sequence
name|contextSequence
parameter_list|)
throws|throws
name|XPathException
block|{
name|String
name|uri
init|=
name|args
index|[
literal|0
index|]
operator|.
name|getStringValue
argument_list|()
decl_stmt|;
name|SVNRepositoryFactoryImpl
operator|.
name|setup
argument_list|()
expr_stmt|;
name|SVNClientManager
name|manager
init|=
name|SVNClientManager
operator|.
name|newInstance
argument_list|(
name|SVNWCUtil
operator|.
name|createDefaultOptions
argument_list|(
literal|false
argument_list|)
argument_list|,
literal|""
argument_list|,
literal|""
argument_list|)
decl_stmt|;
name|SVNStatusClient
name|statusClient
init|=
name|manager
operator|.
name|getStatusClient
argument_list|()
decl_stmt|;
name|SVNWCClient
name|wcClient
init|=
name|manager
operator|.
name|getWCClient
argument_list|()
decl_stmt|;
try|try
block|{
name|statusClient
operator|.
name|doStatus
argument_list|(
operator|new
name|Resource
argument_list|(
name|uri
argument_list|)
argument_list|,
name|SVNRevision
operator|.
name|HEAD
argument_list|,
name|SVNDepth
operator|.
name|getInfinityOrFilesDepth
argument_list|(
literal|true
argument_list|)
argument_list|,
literal|true
argument_list|,
literal|true
argument_list|,
literal|false
argument_list|,
literal|false
argument_list|,
operator|new
name|AddStatusHandler
argument_list|(
name|wcClient
argument_list|,
name|statusClient
argument_list|)
argument_list|,
literal|null
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|SVNException
name|e1
parameter_list|)
block|{
name|e1
operator|.
name|printStackTrace
argument_list|()
expr_stmt|;
block|}
return|return
name|Sequence
operator|.
name|EMPTY_SEQUENCE
return|;
block|}
specifier|private
specifier|static
class|class
name|AddStatusHandler
implements|implements
name|ISVNStatusHandler
block|{
specifier|private
specifier|final
name|SVNWCClient
name|wcClient
decl_stmt|;
specifier|private
specifier|final
name|SVNStatusClient
name|statusClient
decl_stmt|;
specifier|public
name|AddStatusHandler
parameter_list|(
name|SVNWCClient
name|wcClient
parameter_list|,
name|SVNStatusClient
name|statusClient
parameter_list|)
block|{
name|this
operator|.
name|wcClient
operator|=
name|wcClient
expr_stmt|;
name|this
operator|.
name|statusClient
operator|=
name|statusClient
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|handleStatus
parameter_list|(
name|org
operator|.
name|exist
operator|.
name|versioning
operator|.
name|svn
operator|.
name|wc
operator|.
name|SVNStatus
name|status
parameter_list|)
throws|throws
name|SVNException
block|{
comment|//            if(!SVNStatusType.STATUS_MISSING.equals(status.getContentsStatus())) {
comment|//                if(status.getFile().isDirectory()) {
comment|//                	System.out.println("Directory -> "+status.getFile());
comment|//        			statusClient.doStatus(new Resource(status.getFile().toString()), SVNRevision.HEAD, SVNDepth.INFINITY, true, true, false, false,  new AddStatusHandler(wcClient, statusClient), null);
comment|//                } else {
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
name|status
operator|.
name|getFile
argument_list|()
operator|+
literal|" = "
operator|+
name|status
operator|.
name|getContentsStatus
argument_list|()
operator|+
literal|" / "
operator|+
name|status
operator|.
name|getRemoteContentsStatus
argument_list|()
argument_list|)
expr_stmt|;
comment|//                }
comment|//			wcClient.doAdd(status.getFile(), true, false, false, SVNDepth.INFINITY, false, false);
comment|//                else
comment|//                	wcClient.doAdd(status.getFile(), true, false, false, SVNDepth.EMPTY, false, true);
comment|//            }
block|}
block|}
block|}
end_class

end_unit

