begin_unit|revision:1.0.0;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  *  eXist Open Source Native XML Database  *  Copyright (C) 2010 The eXist Project  *  http://exist-db.org  *  *  This program is free software; you can redistribute it and/or  *  modify it under the terms of the GNU Lesser General Public License  *  as published by the Free Software Foundation; either version 2  *  of the License, or (at your option) any later version.  *  *  This program is distributed in the hope that it will be useful,  *  but WITHOUT ANY WARRANTY; without even the implied warranty of  *  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the  *  GNU Lesser General Public License for more details.  *  *  You should have received a copy of the GNU Lesser General Public  *  License along with this library; if not, write to the Free Software  *  Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA  02110-1301  USA  *  *  $Id$  */
end_comment

begin_package
package|package
name|org
operator|.
name|exist
operator|.
name|versioning
operator|.
name|svn
operator|.
name|xquery
package|;
end_package

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|dom
operator|.
name|QName
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|memtree
operator|.
name|MemTreeBuilder
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|util
operator|.
name|io
operator|.
name|Resource
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|versioning
operator|.
name|svn
operator|.
name|wc
operator|.
name|ISVNStatusHandler
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|versioning
operator|.
name|svn
operator|.
name|wc
operator|.
name|SVNClientManager
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|versioning
operator|.
name|svn
operator|.
name|wc
operator|.
name|SVNStatusClient
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|versioning
operator|.
name|svn
operator|.
name|wc
operator|.
name|SVNStatusType
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|versioning
operator|.
name|svn
operator|.
name|wc
operator|.
name|SVNWCClient
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|versioning
operator|.
name|svn
operator|.
name|wc
operator|.
name|SVNWCUtil
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|xquery
operator|.
name|Cardinality
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|xquery
operator|.
name|FunctionSignature
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|xquery
operator|.
name|XPathException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|xquery
operator|.
name|XQueryContext
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|xquery
operator|.
name|value
operator|.
name|FunctionReturnSequenceType
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|xquery
operator|.
name|value
operator|.
name|NodeValue
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|xquery
operator|.
name|value
operator|.
name|Sequence
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|xquery
operator|.
name|value
operator|.
name|SequenceType
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|xquery
operator|.
name|value
operator|.
name|Type
import|;
end_import

begin_import
import|import
name|org
operator|.
name|tmatesoft
operator|.
name|svn
operator|.
name|core
operator|.
name|SVNDepth
import|;
end_import

begin_import
import|import
name|org
operator|.
name|tmatesoft
operator|.
name|svn
operator|.
name|core
operator|.
name|SVNException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|tmatesoft
operator|.
name|svn
operator|.
name|core
operator|.
name|SVNLock
import|;
end_import

begin_import
import|import
name|org
operator|.
name|tmatesoft
operator|.
name|svn
operator|.
name|core
operator|.
name|internal
operator|.
name|io
operator|.
name|svn
operator|.
name|SVNRepositoryFactoryImpl
import|;
end_import

begin_import
import|import
name|org
operator|.
name|tmatesoft
operator|.
name|svn
operator|.
name|core
operator|.
name|wc
operator|.
name|SVNRevision
import|;
end_import

begin_comment
comment|/**  * Status information on Working Copy items.  *  * @author<a href="mailto:amir.akhmedov@gmail.com">Amir Akhmedov</a>  * @author<a href="mailto:shabanovd@gmail.com">Dmitriy Shabanov</a>  *  */
end_comment

begin_class
specifier|public
class|class
name|SVNStatus
extends|extends
name|AbstractSVNFunction
block|{
specifier|public
specifier|final
specifier|static
name|FunctionSignature
name|signature
init|=
operator|new
name|FunctionSignature
argument_list|(
operator|new
name|QName
argument_list|(
literal|"status"
argument_list|,
name|SVNModule
operator|.
name|NAMESPACE_URI
argument_list|,
name|SVNModule
operator|.
name|PREFIX
argument_list|)
argument_list|,
literal|"Status information on Working Copy items."
argument_list|,
operator|new
name|SequenceType
index|[]
block|{
name|DB_PATH
block|}
argument_list|,
operator|new
name|FunctionReturnSequenceType
argument_list|(
name|Type
operator|.
name|ELEMENT
argument_list|,
name|Cardinality
operator|.
name|EXACTLY_ONE
argument_list|,
literal|""
argument_list|)
argument_list|)
decl_stmt|;
specifier|public
name|SVNStatus
parameter_list|(
name|XQueryContext
name|context
parameter_list|)
block|{
name|super
argument_list|(
name|context
argument_list|,
name|signature
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|Sequence
name|eval
parameter_list|(
name|Sequence
index|[]
name|args
parameter_list|,
name|Sequence
name|contextSequence
parameter_list|)
throws|throws
name|XPathException
block|{
name|String
name|uri
init|=
name|args
index|[
literal|0
index|]
operator|.
name|getStringValue
argument_list|()
decl_stmt|;
name|SVNRepositoryFactoryImpl
operator|.
name|setup
argument_list|()
expr_stmt|;
name|SVNClientManager
name|manager
init|=
name|SVNClientManager
operator|.
name|newInstance
argument_list|(
name|SVNWCUtil
operator|.
name|createDefaultOptions
argument_list|(
literal|false
argument_list|)
argument_list|,
literal|""
argument_list|,
literal|""
argument_list|)
decl_stmt|;
name|SVNStatusClient
name|statusClient
init|=
name|manager
operator|.
name|getStatusClient
argument_list|()
decl_stmt|;
name|SVNWCClient
name|wcClient
init|=
name|manager
operator|.
name|getWCClient
argument_list|()
decl_stmt|;
name|MemTreeBuilder
name|builder
init|=
name|context
operator|.
name|getDocumentBuilder
argument_list|()
decl_stmt|;
name|builder
operator|.
name|startDocument
argument_list|()
expr_stmt|;
name|builder
operator|.
name|startElement
argument_list|(
operator|new
name|QName
argument_list|(
literal|"status"
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|)
argument_list|,
literal|null
argument_list|)
expr_stmt|;
try|try
block|{
name|statusClient
operator|.
name|doStatus
argument_list|(
operator|new
name|Resource
argument_list|(
name|uri
argument_list|)
argument_list|,
name|SVNRevision
operator|.
name|HEAD
argument_list|,
name|SVNDepth
operator|.
name|getInfinityOrFilesDepth
argument_list|(
literal|true
argument_list|)
argument_list|,
literal|true
argument_list|,
literal|true
argument_list|,
literal|false
argument_list|,
literal|false
argument_list|,
operator|new
name|AddStatusHandler
argument_list|(
literal|false
argument_list|,
name|builder
argument_list|)
argument_list|,
literal|null
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|SVNException
name|e1
parameter_list|)
block|{
name|builder
operator|.
name|startElement
argument_list|(
operator|new
name|QName
argument_list|(
literal|"error"
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|)
argument_list|,
literal|null
argument_list|)
expr_stmt|;
name|builder
operator|.
name|characters
argument_list|(
name|e1
operator|.
name|getMessage
argument_list|()
argument_list|)
expr_stmt|;
name|builder
operator|.
name|endElement
argument_list|()
expr_stmt|;
block|}
name|builder
operator|.
name|endElement
argument_list|()
expr_stmt|;
name|builder
operator|.
name|endDocument
argument_list|()
expr_stmt|;
return|return
operator|(
name|NodeValue
operator|)
name|builder
operator|.
name|getDocument
argument_list|()
operator|.
name|getDocumentElement
argument_list|()
return|;
block|}
specifier|private
specifier|static
class|class
name|AddStatusHandler
implements|implements
name|ISVNStatusHandler
block|{
specifier|private
name|boolean
name|isRemote
decl_stmt|;
specifier|private
specifier|final
name|MemTreeBuilder
name|builder
decl_stmt|;
specifier|public
name|AddStatusHandler
parameter_list|(
name|boolean
name|isRemote
parameter_list|,
name|MemTreeBuilder
name|builder
parameter_list|)
block|{
name|this
operator|.
name|isRemote
operator|=
name|isRemote
expr_stmt|;
name|this
operator|.
name|builder
operator|=
name|builder
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|handleStatus
parameter_list|(
name|org
operator|.
name|exist
operator|.
name|versioning
operator|.
name|svn
operator|.
name|wc
operator|.
name|SVNStatus
name|status
parameter_list|)
throws|throws
name|SVNException
block|{
name|boolean
name|isAddedWithHistory
init|=
name|status
operator|.
name|isCopied
argument_list|()
decl_stmt|;
comment|/* 	         * If SVNStatusClient.doStatus(..) was invoked with  remote = true  the  	         * following code finds out whether the current item had  been  changed  	         * in the repository    	         */
name|String
name|remoteChangeType
init|=
literal|" "
decl_stmt|;
if|if
condition|(
name|status
operator|.
name|getRemotePropertiesStatus
argument_list|()
operator|!=
name|SVNStatusType
operator|.
name|STATUS_NONE
operator|||
name|status
operator|.
name|getRemoteContentsStatus
argument_list|()
operator|!=
name|SVNStatusType
operator|.
name|STATUS_NONE
condition|)
block|{
comment|/* 	             * the local item is out of date 	             */
name|remoteChangeType
operator|=
literal|"*"
expr_stmt|;
block|}
comment|/* 	         * Now getting the status of properties of an item. SVNStatusType  also  	         * contains information on the properties state. 	         */
name|SVNStatusType
name|propertiesStatus
init|=
name|status
operator|.
name|getPropertiesStatus
argument_list|()
decl_stmt|;
comment|/* 	         * Default - properties are normal (unmodified). 	         */
name|String
name|propertiesChangeType
init|=
literal|" "
decl_stmt|;
if|if
condition|(
name|propertiesStatus
operator|==
name|SVNStatusType
operator|.
name|STATUS_MODIFIED
condition|)
block|{
comment|/* 	             * Properties were modified. 	             */
name|propertiesChangeType
operator|=
literal|"M"
expr_stmt|;
block|}
if|else if
condition|(
name|propertiesStatus
operator|==
name|SVNStatusType
operator|.
name|STATUS_CONFLICTED
condition|)
block|{
comment|/* 	             * Properties are in conflict with the repository. 	             */
name|propertiesChangeType
operator|=
literal|"C"
expr_stmt|;
block|}
comment|/* 	         * Whether the item is switched to a different URL (branch). 	         */
name|boolean
name|isSwitched
init|=
name|status
operator|.
name|isSwitched
argument_list|()
decl_stmt|;
comment|/* 	         * If the item is a file it may be locked. 	         */
name|SVNLock
name|localLock
init|=
name|status
operator|.
name|getLocalLock
argument_list|()
decl_stmt|;
comment|/* 	         * If  doStatus()  was  run  with  remote=true  and the item is a file,  	         * checks whether a remote lock presents. 	         */
name|SVNLock
name|remoteLock
init|=
name|status
operator|.
name|getRemoteLock
argument_list|()
decl_stmt|;
name|String
name|lockLabel
init|=
literal|" "
decl_stmt|;
if|if
condition|(
name|localLock
operator|!=
literal|null
condition|)
block|{
comment|/* 	             * at first suppose the file is locKed 	             */
name|lockLabel
operator|=
literal|"K"
expr_stmt|;
if|if
condition|(
name|remoteLock
operator|!=
literal|null
condition|)
block|{
comment|/* 	                 * if the lock-token of the local lock differs from  the  lock- 	                 * token of the remote lock - the lock was sTolen! 	                 */
if|if
condition|(
operator|!
name|remoteLock
operator|.
name|getID
argument_list|()
operator|.
name|equals
argument_list|(
name|localLock
operator|.
name|getID
argument_list|()
argument_list|)
condition|)
block|{
name|lockLabel
operator|=
literal|"T"
expr_stmt|;
block|}
block|}
else|else
block|{
if|if
condition|(
name|isRemote
condition|)
block|{
comment|/* 		                 * the  local  lock presents but there's  no  lock  in  the 		                 * repository - the lock was Broken. This  is  true only if  	                     * doStatus() was invoked with remote=true. 		                 */
name|lockLabel
operator|=
literal|"B"
expr_stmt|;
block|}
block|}
block|}
if|else if
condition|(
name|remoteLock
operator|!=
literal|null
condition|)
block|{
comment|/* 	             * the file is not locally locked but locked  in  the  repository - 	             * the lock token is in some Other working copy. 	             */
name|lockLabel
operator|=
literal|"O"
expr_stmt|;
block|}
comment|/* 	         * Obtains the number of the revision when the item was last changed.  	         */
name|long
name|lastChangedRevision
init|=
name|status
operator|.
name|getCommittedRevision
argument_list|()
operator|.
name|getNumber
argument_list|()
decl_stmt|;
comment|/* 	         * status is shown in the manner of the native Subversion command  line 	         * client's command "svn status" 	         */
comment|//    		propertiesChangeType
comment|//            + (isAddedWithHistory ? "+" : " ")
comment|//            + (isSwitched ? "S" : " ")
comment|//            + lockLabel
comment|//            + remoteChangeType
name|builder
operator|.
name|startElement
argument_list|(
name|ENTRY_ELEMENT
argument_list|,
literal|null
argument_list|)
expr_stmt|;
name|builder
operator|.
name|addAttribute
argument_list|(
name|STATUS_ATTRIBUTE
argument_list|,
name|status
operator|.
name|getContentsStatus
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|builder
operator|.
name|addAttribute
argument_list|(
name|LOCKED_ATTRIBUTE
argument_list|,
name|status
operator|.
name|isLocked
argument_list|()
condition|?
literal|"true"
else|:
literal|"false"
argument_list|)
expr_stmt|;
name|builder
operator|.
name|addAttribute
argument_list|(
name|WORKING_REVISION_ATTRIBUTE
argument_list|,
name|String
operator|.
name|valueOf
argument_list|(
name|status
operator|.
name|getRevision
argument_list|()
operator|.
name|getNumber
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|builder
operator|.
name|addAttribute
argument_list|(
name|LAST_CHANGED_REVISION_ATTRIBUTE
argument_list|,
name|lastChangedRevision
operator|>=
literal|0
condition|?
name|String
operator|.
name|valueOf
argument_list|(
name|lastChangedRevision
argument_list|)
else|:
literal|"?"
argument_list|)
expr_stmt|;
name|builder
operator|.
name|addAttribute
argument_list|(
name|AUTHOR_ATTRIBUTE
argument_list|,
name|status
operator|.
name|getAuthor
argument_list|()
operator|!=
literal|null
condition|?
name|status
operator|.
name|getAuthor
argument_list|()
else|:
literal|"?"
argument_list|)
expr_stmt|;
name|builder
operator|.
name|addAttribute
argument_list|(
name|PATH_ATTRIBUTE
argument_list|,
name|status
operator|.
name|getFile
argument_list|()
operator|.
name|getPath
argument_list|()
argument_list|)
expr_stmt|;
name|builder
operator|.
name|endElement
argument_list|()
expr_stmt|;
block|}
block|}
specifier|private
specifier|final
specifier|static
name|QName
name|ENTRY_ELEMENT
init|=
operator|new
name|QName
argument_list|(
literal|"entry"
argument_list|,
literal|""
argument_list|,
literal|""
argument_list|)
decl_stmt|;
specifier|private
specifier|final
specifier|static
name|QName
name|STATUS_ATTRIBUTE
init|=
operator|new
name|QName
argument_list|(
literal|"status"
argument_list|,
literal|""
argument_list|,
literal|""
argument_list|)
decl_stmt|;
specifier|private
specifier|final
specifier|static
name|QName
name|LOCKED_ATTRIBUTE
init|=
operator|new
name|QName
argument_list|(
literal|"locked"
argument_list|,
literal|""
argument_list|,
literal|""
argument_list|)
decl_stmt|;
specifier|private
specifier|final
specifier|static
name|QName
name|WORKING_REVISION_ATTRIBUTE
init|=
operator|new
name|QName
argument_list|(
literal|"working-revision"
argument_list|,
literal|""
argument_list|,
literal|""
argument_list|)
decl_stmt|;
specifier|private
specifier|final
specifier|static
name|QName
name|LAST_CHANGED_REVISION_ATTRIBUTE
init|=
operator|new
name|QName
argument_list|(
literal|"last-changed-revision"
argument_list|,
literal|""
argument_list|,
literal|""
argument_list|)
decl_stmt|;
specifier|private
specifier|final
specifier|static
name|QName
name|AUTHOR_ATTRIBUTE
init|=
operator|new
name|QName
argument_list|(
literal|"author"
argument_list|,
literal|""
argument_list|,
literal|""
argument_list|)
decl_stmt|;
specifier|private
specifier|final
specifier|static
name|QName
name|PATH_ATTRIBUTE
init|=
operator|new
name|QName
argument_list|(
literal|"path"
argument_list|,
literal|""
argument_list|,
literal|""
argument_list|)
decl_stmt|;
block|}
end_class

end_unit

