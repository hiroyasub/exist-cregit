begin_unit|revision:1.0.0;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * ====================================================================  * Copyright (c) 2004-2010 TMate Software Ltd.  All rights reserved.  *  * This software is licensed as described in the file COPYING, which  * you should have received as part of this distribution.  The terms  * are also available at http://svnkit.com/license.html  * If newer versions of this license are posted there, you may use a  * newer version instead, at your option.  * ====================================================================  */
end_comment

begin_package
package|package
name|org
operator|.
name|exist
operator|.
name|versioning
operator|.
name|svn
package|;
end_package

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|versioning
operator|.
name|svn
operator|.
name|wc
operator|.
name|ISVNEventHandler
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|versioning
operator|.
name|svn
operator|.
name|wc
operator|.
name|ISVNStatusHandler
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|versioning
operator|.
name|svn
operator|.
name|wc
operator|.
name|SVNEvent
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|versioning
operator|.
name|svn
operator|.
name|wc
operator|.
name|SVNEventAction
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|versioning
operator|.
name|svn
operator|.
name|wc
operator|.
name|SVNStatus
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|versioning
operator|.
name|svn
operator|.
name|wc
operator|.
name|SVNStatusType
import|;
end_import

begin_import
import|import
name|org
operator|.
name|tmatesoft
operator|.
name|svn
operator|.
name|core
operator|.
name|SVNCancelException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|tmatesoft
operator|.
name|svn
operator|.
name|core
operator|.
name|SVNLock
import|;
end_import

begin_comment
comment|/*  * This is  an implementation of ISVNStatusHandler& ISVNEventHandler  that  is   * used in WorkingCopy.java to display status information. This  implementation    * is passed to   *   * SVNStatusClient.doStatus(File path, boolean recursive, boolean remote,   * boolean reportAll, boolean includeIgnored, boolean collectParentExternals,   * ISVNStatusHandler handler)  *   * For each item to be processed doStatus(..) collects status  information  and   * creates an SVNStatus object which holds that information. Then  doStatus(..)   * calls an implementor's handler.handleStatus(SVNStatus) passing it the status   * info collected.  *   * StatusHandler  will  be  also  provided  to  an  SVNStatusClient object as a   * handler of events generated by a doStatus(..) method. For  example,  if  the   * status is invoked with the flag remote=true (like 'svn status -u'  command),   * so then the status operation will be finished with dispatching  an  SVNEvent   * to ISVNEventHandler that will 'say' that the status is performed against the  * youngest revision (the event holds that revision number).   */
end_comment

begin_class
specifier|public
class|class
name|StatusHandler
implements|implements
name|ISVNStatusHandler
implements|,
name|ISVNEventHandler
block|{
specifier|private
name|boolean
name|myIsRemote
decl_stmt|;
specifier|public
name|StatusHandler
parameter_list|(
name|boolean
name|isRemote
parameter_list|)
block|{
name|myIsRemote
operator|=
name|isRemote
expr_stmt|;
block|}
comment|/*      * This is  an  implementation  of ISVNStatusHandler.handleStatus(SVNStatus       * status)      */
specifier|public
name|void
name|handleStatus
parameter_list|(
name|SVNStatus
name|status
parameter_list|)
block|{
comment|/*          * Gets  the  status  of  file/directory/symbolic link  text  contents.           * It is  SVNStatusType  who  contains  information on the state of  an           * item.           */
name|SVNStatusType
name|contentsStatus
init|=
name|status
operator|.
name|getContentsStatus
argument_list|()
decl_stmt|;
name|String
name|pathChangeType
init|=
literal|" "
decl_stmt|;
name|boolean
name|isAddedWithHistory
init|=
name|status
operator|.
name|isCopied
argument_list|()
decl_stmt|;
if|if
condition|(
name|contentsStatus
operator|==
name|SVNStatusType
operator|.
name|STATUS_MODIFIED
condition|)
block|{
comment|/*              * The contents of the file have been Modified.              */
name|pathChangeType
operator|=
literal|"M"
expr_stmt|;
block|}
if|else if
condition|(
name|contentsStatus
operator|==
name|SVNStatusType
operator|.
name|STATUS_CONFLICTED
condition|)
block|{
comment|/*              * The  file  item  is  in a state of  Conflict. That  is,  changes               * received from the server during an  update  overlap  with  local               * changes the user has in his working copy.               */
name|pathChangeType
operator|=
literal|"C"
expr_stmt|;
block|}
if|else if
condition|(
name|contentsStatus
operator|==
name|SVNStatusType
operator|.
name|STATUS_DELETED
condition|)
block|{
comment|/*              * The file, directory or symbolic link item has been scheduled for               * Deletion from the repository.              */
name|pathChangeType
operator|=
literal|"D"
expr_stmt|;
block|}
if|else if
condition|(
name|contentsStatus
operator|==
name|SVNStatusType
operator|.
name|STATUS_ADDED
condition|)
block|{
comment|/*              * The file, directory or symbolic link item has been scheduled for               * Addition to the repository.              */
name|pathChangeType
operator|=
literal|"A"
expr_stmt|;
block|}
if|else if
condition|(
name|contentsStatus
operator|==
name|SVNStatusType
operator|.
name|STATUS_UNVERSIONED
condition|)
block|{
comment|/*              * The file, directory or symbolic link item is not  under  version               * control.              */
name|pathChangeType
operator|=
literal|"?"
expr_stmt|;
block|}
if|else if
condition|(
name|contentsStatus
operator|==
name|SVNStatusType
operator|.
name|STATUS_EXTERNAL
condition|)
block|{
comment|/*              * The item is unversioned, but is used by an eXternals definition.              */
name|pathChangeType
operator|=
literal|"X"
expr_stmt|;
block|}
if|else if
condition|(
name|contentsStatus
operator|==
name|SVNStatusType
operator|.
name|STATUS_IGNORED
condition|)
block|{
comment|/*              * The file, directory or symbolic link item is not  under  version               * control, and is configured to be Ignored during 'add',  'import'               * and 'status' operations.               */
name|pathChangeType
operator|=
literal|"I"
expr_stmt|;
block|}
if|else if
condition|(
name|contentsStatus
operator|==
name|SVNStatusType
operator|.
name|STATUS_MISSING
operator|||
name|contentsStatus
operator|==
name|SVNStatusType
operator|.
name|STATUS_INCOMPLETE
condition|)
block|{
comment|/*              * The file, directory or  symbolic  link  item  is  under  version               * control but is missing or somehow incomplete. The  item  can  be               * missing if it is removed using a command incompatible  with  the               * native Subversion command line client (for example, just removed               * from the filesystem). In the case the item is  a  directory,  it               * can  be  incomplete if the user happened to interrupt a checkout               * or update.              */
name|pathChangeType
operator|=
literal|"!"
expr_stmt|;
block|}
if|else if
condition|(
name|contentsStatus
operator|==
name|SVNStatusType
operator|.
name|STATUS_OBSTRUCTED
condition|)
block|{
comment|/*              * The file, directory or symbolic link item is in  the  repository               * as one kind of object, but what's actually in the user's working               * copy is some other kind. For example, Subversion  might  have  a               * file in the repository,  but  the  user  removed  the  file  and               * created a directory in its place, without using the 'svn delete'               * or 'svn add' command (or SVNKit analogues for them).              */
name|pathChangeType
operator|=
literal|"~"
expr_stmt|;
block|}
if|else if
condition|(
name|contentsStatus
operator|==
name|SVNStatusType
operator|.
name|STATUS_REPLACED
condition|)
block|{
comment|/*              * The file, directory or symbolic link item was  Replaced  in  the               * user's working copy; that is, the item was deleted,  and  a  new               * item with the same name was added (within  a  single  revision).               * While they may have the same name, the repository considers them               * to be distinct objects with distinct histories.              */
name|pathChangeType
operator|=
literal|"R"
expr_stmt|;
block|}
if|else if
condition|(
name|contentsStatus
operator|==
name|SVNStatusType
operator|.
name|STATUS_NONE
operator|||
name|contentsStatus
operator|==
name|SVNStatusType
operator|.
name|STATUS_NORMAL
condition|)
block|{
comment|/*              * The item was not modified (normal).              */
name|pathChangeType
operator|=
literal|" "
expr_stmt|;
block|}
comment|/*          * If SVNStatusClient.doStatus(..) was invoked with  remote = true  the           * following code finds out whether the current item had  been  changed           * in the repository             */
name|String
name|remoteChangeType
init|=
literal|" "
decl_stmt|;
if|if
condition|(
name|status
operator|.
name|getRemotePropertiesStatus
argument_list|()
operator|!=
name|SVNStatusType
operator|.
name|STATUS_NONE
operator|||
name|status
operator|.
name|getRemoteContentsStatus
argument_list|()
operator|!=
name|SVNStatusType
operator|.
name|STATUS_NONE
condition|)
block|{
comment|/*              * the local item is out of date              */
name|remoteChangeType
operator|=
literal|"*"
expr_stmt|;
block|}
comment|/*          * Now getting the status of properties of an item. SVNStatusType  also           * contains information on the properties state.          */
name|SVNStatusType
name|propertiesStatus
init|=
name|status
operator|.
name|getPropertiesStatus
argument_list|()
decl_stmt|;
comment|/*          * Default - properties are normal (unmodified).          */
name|String
name|propertiesChangeType
init|=
literal|" "
decl_stmt|;
if|if
condition|(
name|propertiesStatus
operator|==
name|SVNStatusType
operator|.
name|STATUS_MODIFIED
condition|)
block|{
comment|/*              * Properties were modified.              */
name|propertiesChangeType
operator|=
literal|"M"
expr_stmt|;
block|}
if|else if
condition|(
name|propertiesStatus
operator|==
name|SVNStatusType
operator|.
name|STATUS_CONFLICTED
condition|)
block|{
comment|/*              * Properties are in conflict with the repository.              */
name|propertiesChangeType
operator|=
literal|"C"
expr_stmt|;
block|}
comment|/*          * Whether the item was locked in the .svn working area  (for  example,           * during a commit or maybe the previous operation was interrupted, in           * this case the lock needs to be cleaned up).           */
name|boolean
name|isLocked
init|=
name|status
operator|.
name|isLocked
argument_list|()
decl_stmt|;
comment|/*          * Whether the item is switched to a different URL (branch).          */
name|boolean
name|isSwitched
init|=
name|status
operator|.
name|isSwitched
argument_list|()
decl_stmt|;
comment|/*          * If the item is a file it may be locked.          */
name|SVNLock
name|localLock
init|=
name|status
operator|.
name|getLocalLock
argument_list|()
decl_stmt|;
comment|/*          * If  doStatus()  was  run  with  remote=true  and the item is a file,           * checks whether a remote lock presents.          */
name|SVNLock
name|remoteLock
init|=
name|status
operator|.
name|getRemoteLock
argument_list|()
decl_stmt|;
name|String
name|lockLabel
init|=
literal|" "
decl_stmt|;
if|if
condition|(
name|localLock
operator|!=
literal|null
condition|)
block|{
comment|/*              * at first suppose the file is locKed              */
name|lockLabel
operator|=
literal|"K"
expr_stmt|;
if|if
condition|(
name|remoteLock
operator|!=
literal|null
condition|)
block|{
comment|/*                  * if the lock-token of the local lock differs from  the  lock-                  * token of the remote lock - the lock was sTolen!                  */
if|if
condition|(
operator|!
name|remoteLock
operator|.
name|getID
argument_list|()
operator|.
name|equals
argument_list|(
name|localLock
operator|.
name|getID
argument_list|()
argument_list|)
condition|)
block|{
name|lockLabel
operator|=
literal|"T"
expr_stmt|;
block|}
block|}
else|else
block|{
if|if
condition|(
name|myIsRemote
condition|)
block|{
comment|/* 	                 * the  local  lock presents but there's  no  lock  in  the 	                 * repository - the lock was Broken. This  is  true only if                       * doStatus() was invoked with remote=true. 	                 */
name|lockLabel
operator|=
literal|"B"
expr_stmt|;
block|}
block|}
block|}
if|else if
condition|(
name|remoteLock
operator|!=
literal|null
condition|)
block|{
comment|/*              * the file is not locally locked but locked  in  the  repository -              * the lock token is in some Other working copy.              */
name|lockLabel
operator|=
literal|"O"
expr_stmt|;
block|}
comment|/*          * Obtains the working revision number of the item.          */
name|long
name|workingRevision
init|=
name|status
operator|.
name|getRevision
argument_list|()
operator|.
name|getNumber
argument_list|()
decl_stmt|;
comment|/*          * Obtains the number of the revision when the item was last changed.           */
name|long
name|lastChangedRevision
init|=
name|status
operator|.
name|getCommittedRevision
argument_list|()
operator|.
name|getNumber
argument_list|()
decl_stmt|;
name|String
name|offset
init|=
literal|"                                "
decl_stmt|;
name|String
index|[]
name|offsets
init|=
operator|new
name|String
index|[
literal|3
index|]
decl_stmt|;
name|offsets
index|[
literal|0
index|]
operator|=
name|offset
operator|.
name|substring
argument_list|(
literal|0
argument_list|,
literal|6
operator|-
name|String
operator|.
name|valueOf
argument_list|(
name|workingRevision
argument_list|)
operator|.
name|length
argument_list|()
argument_list|)
expr_stmt|;
name|offsets
index|[
literal|1
index|]
operator|=
name|offset
operator|.
name|substring
argument_list|(
literal|0
argument_list|,
literal|6
operator|-
name|String
operator|.
name|valueOf
argument_list|(
name|lastChangedRevision
argument_list|)
operator|.
name|length
argument_list|()
argument_list|)
expr_stmt|;
comment|//status
name|offsets
index|[
literal|2
index|]
operator|=
name|offset
operator|.
name|substring
argument_list|(
literal|0
argument_list|,
name|offset
operator|.
name|length
argument_list|()
operator|-
operator|(
name|status
operator|.
name|getAuthor
argument_list|()
operator|!=
literal|null
condition|?
name|status
operator|.
name|getAuthor
argument_list|()
operator|.
name|length
argument_list|()
else|:
literal|1
operator|)
argument_list|)
expr_stmt|;
comment|/*          * status is shown in the manner of the native Subversion command  line          * client's command "svn status"          */
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
name|pathChangeType
operator|+
name|propertiesChangeType
operator|+
operator|(
name|isLocked
condition|?
literal|"L"
else|:
literal|" "
operator|)
operator|+
operator|(
name|isAddedWithHistory
condition|?
literal|"+"
else|:
literal|" "
operator|)
operator|+
operator|(
name|isSwitched
condition|?
literal|"S"
else|:
literal|" "
operator|)
operator|+
name|lockLabel
operator|+
literal|"  "
operator|+
name|remoteChangeType
operator|+
literal|"  "
operator|+
name|workingRevision
operator|+
name|offsets
index|[
literal|0
index|]
operator|+
operator|(
name|lastChangedRevision
operator|>=
literal|0
condition|?
name|String
operator|.
name|valueOf
argument_list|(
name|lastChangedRevision
argument_list|)
else|:
literal|"?"
operator|)
operator|+
name|offsets
index|[
literal|1
index|]
operator|+
operator|(
name|status
operator|.
name|getAuthor
argument_list|()
operator|!=
literal|null
condition|?
name|status
operator|.
name|getAuthor
argument_list|()
else|:
literal|"?"
operator|)
operator|+
name|offsets
index|[
literal|2
index|]
operator|+
name|status
operator|.
name|getFile
argument_list|()
operator|.
name|getPath
argument_list|()
argument_list|)
expr_stmt|;
block|}
comment|/*      * This is an implementation for       * ISVNEventHandler.handleEvent(SVNEvent event, double progress)      */
specifier|public
name|void
name|handleEvent
parameter_list|(
name|SVNEvent
name|event
parameter_list|,
name|double
name|progress
parameter_list|)
block|{
comment|/*          * Gets the current action. An action is represented by SVNEventAction.          * In case of a status operation a current action can be determined via           * SVNEvent.getAction() and SVNEventAction.STATUS_-like constants.           */
name|SVNEventAction
name|action
init|=
name|event
operator|.
name|getAction
argument_list|()
decl_stmt|;
comment|/*          * Print out the revision against which the status was performed.  This           * event is dispatched when the SVNStatusClient.doStatus() was  invoked           * with the flag remote set to true - that is for  a  local  status  it           * won't be dispatched.          */
if|if
condition|(
name|action
operator|==
name|SVNEventAction
operator|.
name|STATUS_COMPLETED
condition|)
block|{
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"Status against revision:  "
operator|+
name|event
operator|.
name|getRevision
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
comment|/*      * Should be implemented to check if the current operation is cancelled. If       * it is, this method should throw an SVNCancelException.       */
specifier|public
name|void
name|checkCancelled
parameter_list|()
throws|throws
name|SVNCancelException
block|{
block|}
block|}
end_class

end_unit

