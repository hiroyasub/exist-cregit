begin_unit|revision:1.0.0;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * ====================================================================  * Copyright (c) 2004-2010 TMate Software Ltd.  All rights reserved.  *  * This software is licensed as described in the file COPYING, which  * you should have received as part of this distribution.  The terms  * are also available at http://svnkit.com/license.html  * If newer versions of this license are posted there, you may use a  * newer version instead, at your option.  * ====================================================================  */
end_comment

begin_package
package|package
name|org
operator|.
name|exist
operator|.
name|versioning
operator|.
name|svn
package|;
end_package

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|versioning
operator|.
name|svn
operator|.
name|wc
operator|.
name|ISVNEventHandler
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|versioning
operator|.
name|svn
operator|.
name|wc
operator|.
name|SVNEvent
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|versioning
operator|.
name|svn
operator|.
name|wc
operator|.
name|SVNEventAction
import|;
end_import

begin_import
import|import
name|org
operator|.
name|tmatesoft
operator|.
name|svn
operator|.
name|core
operator|.
name|SVNCancelException
import|;
end_import

begin_comment
comment|/*  * This class is an implementation of ISVNEventHandler intended for  processing     * events generated by do*() methods of an SVNWCClient object. An  instance  of   * this handler will be provided to an SVNWCClient. When  calling, for example,   * SVNWCClient.doDelete(..) on some path, that method will  generate  an  event   * for each 'delete' action it will perform upon every path being deleted.  And  * this event is passed to   *   * ISVNEventHandler.handleEvent(SVNEvent event,  double progress)   *   * to notify the handler.  The  event  contains detailed  information about the   * path, action performed upon the path and some other.   */
end_comment

begin_class
specifier|public
class|class
name|WCEventHandler
implements|implements
name|ISVNEventHandler
block|{
comment|/*      * progress  is  currently  reserved  for future purposes and now is always      * ISVNEventHandler.UNKNOWN        */
specifier|public
name|void
name|handleEvent
parameter_list|(
name|SVNEvent
name|event
parameter_list|,
name|double
name|progress
parameter_list|)
block|{
comment|/*          * Gets the current action. An action is represented by SVNEventAction.          */
name|SVNEventAction
name|action
init|=
name|event
operator|.
name|getAction
argument_list|()
decl_stmt|;
if|if
condition|(
name|action
operator|==
name|SVNEventAction
operator|.
name|ADD
condition|)
block|{
comment|/*              * The item is scheduled for addition.              */
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"A     "
operator|+
name|event
operator|.
name|getFile
argument_list|()
argument_list|)
expr_stmt|;
return|return;
block|}
if|else if
condition|(
name|action
operator|==
name|SVNEventAction
operator|.
name|COPY
condition|)
block|{
comment|/*              * The  item  is  scheduled for addition  with history (copied,  in               * other words).              */
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"A  +  "
operator|+
name|event
operator|.
name|getFile
argument_list|()
argument_list|)
expr_stmt|;
return|return;
block|}
if|else if
condition|(
name|action
operator|==
name|SVNEventAction
operator|.
name|DELETE
condition|)
block|{
comment|/*              * The item is scheduled for deletion.               */
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"D     "
operator|+
name|event
operator|.
name|getFile
argument_list|()
argument_list|)
expr_stmt|;
return|return;
block|}
if|else if
condition|(
name|action
operator|==
name|SVNEventAction
operator|.
name|LOCKED
condition|)
block|{
comment|/*              * The item is locked.              */
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"L     "
operator|+
name|event
operator|.
name|getFile
argument_list|()
argument_list|)
expr_stmt|;
return|return;
block|}
if|else if
condition|(
name|action
operator|==
name|SVNEventAction
operator|.
name|LOCK_FAILED
condition|)
block|{
comment|/*              * Locking operation failed.              */
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"failed to lock    "
operator|+
name|event
operator|.
name|getFile
argument_list|()
argument_list|)
expr_stmt|;
return|return;
block|}
block|}
comment|/*      * Should be implemented to check if the current operation is cancelled. If       * it is, this method should throw an SVNCancelException.       */
specifier|public
name|void
name|checkCancelled
parameter_list|()
throws|throws
name|SVNCancelException
block|{
block|}
block|}
end_class

end_unit

