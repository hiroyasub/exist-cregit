begin_unit|revision:1.0.0;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * ====================================================================  * Copyright (c) 2004-2010 TMate Software Ltd.  All rights reserved.  *  * This software is licensed as described in the file COPYING, which  * you should have received as part of this distribution.  The terms  * are also available at http://svnkit.com/license.html.  * If newer versions of this license are posted there, you may use a  * newer version instead, at your option.  * ====================================================================  */
end_comment

begin_package
package|package
name|org
operator|.
name|exist
operator|.
name|versioning
operator|.
name|svn
operator|.
name|wc
operator|.
name|admin
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Iterator
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|versioning
operator|.
name|svn
operator|.
name|internal
operator|.
name|wc
operator|.
name|SVNAdminHelper
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|versioning
operator|.
name|svn
operator|.
name|internal
operator|.
name|wc
operator|.
name|SVNCancellableEditor
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|versioning
operator|.
name|svn
operator|.
name|internal
operator|.
name|wc
operator|.
name|SVNErrorManager
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|versioning
operator|.
name|svn
operator|.
name|internal
operator|.
name|wc
operator|.
name|SVNSynchronizeEditor
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|versioning
operator|.
name|svn
operator|.
name|wc
operator|.
name|ISVNEventHandler
import|;
end_import

begin_import
import|import
name|org
operator|.
name|tmatesoft
operator|.
name|svn
operator|.
name|core
operator|.
name|ISVNLogEntryHandler
import|;
end_import

begin_import
import|import
name|org
operator|.
name|tmatesoft
operator|.
name|svn
operator|.
name|core
operator|.
name|SVNErrorCode
import|;
end_import

begin_import
import|import
name|org
operator|.
name|tmatesoft
operator|.
name|svn
operator|.
name|core
operator|.
name|SVNErrorMessage
import|;
end_import

begin_import
import|import
name|org
operator|.
name|tmatesoft
operator|.
name|svn
operator|.
name|core
operator|.
name|SVNException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|tmatesoft
operator|.
name|svn
operator|.
name|core
operator|.
name|SVNProperties
import|;
end_import

begin_import
import|import
name|org
operator|.
name|tmatesoft
operator|.
name|svn
operator|.
name|core
operator|.
name|SVNProperty
import|;
end_import

begin_import
import|import
name|org
operator|.
name|tmatesoft
operator|.
name|svn
operator|.
name|core
operator|.
name|SVNPropertyValue
import|;
end_import

begin_import
import|import
name|org
operator|.
name|tmatesoft
operator|.
name|svn
operator|.
name|core
operator|.
name|SVNRevisionProperty
import|;
end_import

begin_import
import|import
name|org
operator|.
name|tmatesoft
operator|.
name|svn
operator|.
name|core
operator|.
name|io
operator|.
name|ISVNEditor
import|;
end_import

begin_import
import|import
name|org
operator|.
name|tmatesoft
operator|.
name|svn
operator|.
name|core
operator|.
name|io
operator|.
name|ISVNReplayHandler
import|;
end_import

begin_import
import|import
name|org
operator|.
name|tmatesoft
operator|.
name|svn
operator|.
name|core
operator|.
name|io
operator|.
name|SVNRepository
import|;
end_import

begin_import
import|import
name|org
operator|.
name|tmatesoft
operator|.
name|svn
operator|.
name|util
operator|.
name|ISVNDebugLog
import|;
end_import

begin_import
import|import
name|org
operator|.
name|tmatesoft
operator|.
name|svn
operator|.
name|util
operator|.
name|SVNLogType
import|;
end_import

begin_comment
comment|/**  *<code>SVNReplayHandler</code> is an implementation of {@link ISVNReplayHandler} that is used in   * {@link SVNAdminClient#doSynchronize(org.tmatesoft.svn.core.SVNURL)}.   *   * @version 1.3  * @author  TMate Software Ltd.  * @since   1.2  */
end_comment

begin_class
specifier|public
class|class
name|SVNReplayHandler
implements|implements
name|ISVNReplayHandler
block|{
specifier|private
name|SVNRepository
name|myTargetRepository
decl_stmt|;
specifier|private
name|boolean
name|myHasCommitRevPropsCapability
decl_stmt|;
specifier|private
name|ISVNLogEntryHandler
name|myLogEntryHandler
decl_stmt|;
specifier|private
name|ISVNDebugLog
name|myDebugLog
decl_stmt|;
specifier|private
name|ISVNEventHandler
name|myCanceller
decl_stmt|;
specifier|private
name|SVNSynchronizeEditor
name|mySyncEditor
decl_stmt|;
specifier|private
name|SVNAdminClient
name|myAdminClient
decl_stmt|;
specifier|private
name|int
name|myNormalizedRevPropsCount
decl_stmt|;
comment|/**      * Creates a new replay handler.      *       * @param targetRepository       * @param hasCommitRevPropsCapability       * @param logEntryHandler       * @param debugLog       * @param canceller       * @param adminClient       */
specifier|public
name|SVNReplayHandler
parameter_list|(
name|SVNRepository
name|targetRepository
parameter_list|,
name|boolean
name|hasCommitRevPropsCapability
parameter_list|,
name|ISVNLogEntryHandler
name|logEntryHandler
parameter_list|,
name|ISVNDebugLog
name|debugLog
parameter_list|,
name|ISVNEventHandler
name|canceller
parameter_list|,
name|SVNAdminClient
name|adminClient
parameter_list|)
block|{
name|myTargetRepository
operator|=
name|targetRepository
expr_stmt|;
name|myHasCommitRevPropsCapability
operator|=
name|hasCommitRevPropsCapability
expr_stmt|;
name|myLogEntryHandler
operator|=
name|logEntryHandler
expr_stmt|;
name|myDebugLog
operator|=
name|debugLog
expr_stmt|;
name|myCanceller
operator|=
name|canceller
expr_stmt|;
name|myAdminClient
operator|=
name|adminClient
expr_stmt|;
name|myNormalizedRevPropsCount
operator|=
literal|0
expr_stmt|;
block|}
comment|/**      * @param  revision       * @param  revisionProperties       * @return editor to replicate the revision       * @throws SVNException       */
specifier|public
name|ISVNEditor
name|handleStartRevision
parameter_list|(
name|long
name|revision
parameter_list|,
name|SVNProperties
name|revisionProperties
parameter_list|)
throws|throws
name|SVNException
block|{
name|myTargetRepository
operator|.
name|setRevisionPropertyValue
argument_list|(
literal|0
argument_list|,
name|SVNRevisionProperty
operator|.
name|CURRENTLY_COPYING
argument_list|,
name|SVNPropertyValue
operator|.
name|create
argument_list|(
name|SVNProperty
operator|.
name|toString
argument_list|(
name|revision
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|SVNProperties
name|filtered
init|=
operator|new
name|SVNProperties
argument_list|()
decl_stmt|;
name|filterProperties
argument_list|(
name|revisionProperties
argument_list|,
name|filtered
argument_list|,
literal|true
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|filtered
operator|.
name|containsName
argument_list|(
name|SVNRevisionProperty
operator|.
name|LOG
argument_list|)
condition|)
block|{
name|filtered
operator|.
name|put
argument_list|(
name|SVNRevisionProperty
operator|.
name|LOG
argument_list|,
literal|""
argument_list|)
expr_stmt|;
block|}
name|SVNProperties
name|normalizedProps
init|=
name|SVNAdminClient
operator|.
name|normalizeRevisionProperties
argument_list|(
name|filtered
argument_list|)
decl_stmt|;
name|myNormalizedRevPropsCount
operator|+=
name|normalizedProps
operator|.
name|size
argument_list|()
expr_stmt|;
if|if
condition|(
name|mySyncEditor
operator|==
literal|null
condition|)
block|{
name|mySyncEditor
operator|=
operator|new
name|SVNSynchronizeEditor
argument_list|(
name|myTargetRepository
argument_list|,
name|myLogEntryHandler
argument_list|,
name|revision
operator|-
literal|1
argument_list|,
name|filtered
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|mySyncEditor
operator|.
name|reset
argument_list|(
name|revision
operator|-
literal|1
argument_list|,
name|filtered
argument_list|)
expr_stmt|;
block|}
name|ISVNEditor
name|cancellableEditor
init|=
name|SVNCancellableEditor
operator|.
name|newInstance
argument_list|(
name|mySyncEditor
argument_list|,
name|myCanceller
argument_list|,
name|myDebugLog
argument_list|)
decl_stmt|;
return|return
name|cancellableEditor
return|;
block|}
comment|/**      * @param revision       * @param revisionProperties       * @param editor       * @throws SVNException       */
specifier|public
name|void
name|handleEndRevision
parameter_list|(
name|long
name|revision
parameter_list|,
name|SVNProperties
name|revisionProperties
parameter_list|,
name|ISVNEditor
name|editor
parameter_list|)
throws|throws
name|SVNException
block|{
name|editor
operator|.
name|closeEdit
argument_list|()
expr_stmt|;
if|if
condition|(
name|mySyncEditor
operator|.
name|getCommitInfo
argument_list|()
operator|.
name|getNewRevision
argument_list|()
operator|!=
name|revision
condition|)
block|{
name|SVNErrorMessage
name|err
init|=
name|SVNErrorMessage
operator|.
name|create
argument_list|(
name|SVNErrorCode
operator|.
name|IO_ERROR
argument_list|,
literal|"Commit created rev {0} but should have created {1}"
argument_list|,
operator|new
name|Object
index|[]
block|{
name|String
operator|.
name|valueOf
argument_list|(
name|mySyncEditor
operator|.
name|getCommitInfo
argument_list|()
operator|.
name|getNewRevision
argument_list|()
argument_list|)
block|,
name|String
operator|.
name|valueOf
argument_list|(
name|revision
argument_list|)
block|}
argument_list|)
decl_stmt|;
name|SVNErrorManager
operator|.
name|error
argument_list|(
name|err
argument_list|,
name|SVNLogType
operator|.
name|FSFS
argument_list|)
expr_stmt|;
block|}
name|SVNProperties
name|existingProperties
init|=
name|myTargetRepository
operator|.
name|getRevisionProperties
argument_list|(
name|revision
argument_list|,
literal|null
argument_list|)
decl_stmt|;
name|SVNProperties
name|filtered
init|=
operator|new
name|SVNProperties
argument_list|()
decl_stmt|;
name|filterProperties
argument_list|(
name|revisionProperties
argument_list|,
name|filtered
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|SVNProperties
name|normalizedProps
init|=
name|SVNAdminClient
operator|.
name|normalizeRevisionProperties
argument_list|(
name|filtered
argument_list|)
decl_stmt|;
name|myNormalizedRevPropsCount
operator|+=
name|normalizedProps
operator|.
name|size
argument_list|()
expr_stmt|;
name|int
name|filteredCount
init|=
name|SVNAdminHelper
operator|.
name|writeRevisionProperties
argument_list|(
name|myTargetRepository
argument_list|,
name|revision
argument_list|,
name|filtered
argument_list|)
decl_stmt|;
name|SVNAdminHelper
operator|.
name|removePropertiesNotInSource
argument_list|(
name|myTargetRepository
argument_list|,
name|revision
argument_list|,
name|revisionProperties
argument_list|,
name|existingProperties
argument_list|)
expr_stmt|;
name|myTargetRepository
operator|.
name|setRevisionPropertyValue
argument_list|(
literal|0
argument_list|,
name|SVNRevisionProperty
operator|.
name|LAST_MERGED_REVISION
argument_list|,
name|SVNPropertyValue
operator|.
name|create
argument_list|(
name|SVNProperty
operator|.
name|toString
argument_list|(
name|revision
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|myTargetRepository
operator|.
name|setRevisionPropertyValue
argument_list|(
literal|0
argument_list|,
name|SVNRevisionProperty
operator|.
name|CURRENTLY_COPYING
argument_list|,
literal|null
argument_list|)
expr_stmt|;
name|myAdminClient
operator|.
name|handlePropertesCopied
argument_list|(
name|filteredCount
operator|>
literal|0
argument_list|,
name|revision
argument_list|)
expr_stmt|;
block|}
specifier|public
name|int
name|getNormalizedRevPropsCount
parameter_list|()
block|{
return|return
name|myNormalizedRevPropsCount
return|;
block|}
specifier|public
name|int
name|getNormalizedNodePropsCount
parameter_list|()
block|{
return|return
name|mySyncEditor
operator|==
literal|null
condition|?
literal|0
else|:
name|mySyncEditor
operator|.
name|getNormalizedNodePropsCounter
argument_list|()
return|;
block|}
specifier|private
name|int
name|filterProperties
parameter_list|(
name|SVNProperties
name|revProps
parameter_list|,
name|SVNProperties
name|filteredProps
parameter_list|,
name|boolean
name|isStart
parameter_list|)
block|{
name|int
name|filteredCount
init|=
literal|0
decl_stmt|;
for|for
control|(
name|Iterator
name|propNamesIter
init|=
name|revProps
operator|.
name|nameSet
argument_list|()
operator|.
name|iterator
argument_list|()
init|;
name|propNamesIter
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|String
name|propName
init|=
operator|(
name|String
operator|)
name|propNamesIter
operator|.
name|next
argument_list|()
decl_stmt|;
name|SVNPropertyValue
name|propValue
init|=
name|revProps
operator|.
name|getSVNPropertyValue
argument_list|(
name|propName
argument_list|)
decl_stmt|;
name|boolean
name|filter
init|=
literal|false
decl_stmt|;
if|if
condition|(
name|isStart
condition|)
block|{
if|if
condition|(
name|myHasCommitRevPropsCapability
condition|)
block|{
name|filter
operator|=
name|filterExcludeDateAuthorSync
argument_list|(
name|propName
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|filter
operator|=
name|filterIncludeLog
argument_list|(
name|propName
argument_list|)
expr_stmt|;
block|}
block|}
else|else
block|{
if|if
condition|(
name|myHasCommitRevPropsCapability
condition|)
block|{
name|filter
operator|=
name|filterIncludeDateAuthorSync
argument_list|(
name|propName
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|filter
operator|=
name|filterExcludeLog
argument_list|(
name|propName
argument_list|)
expr_stmt|;
block|}
block|}
if|if
condition|(
operator|!
name|filter
condition|)
block|{
name|filteredProps
operator|.
name|put
argument_list|(
name|propName
argument_list|,
name|propValue
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|filteredCount
operator|+=
literal|1
expr_stmt|;
block|}
block|}
return|return
name|filteredCount
return|;
block|}
specifier|private
name|boolean
name|filterIncludeDateAuthorSync
parameter_list|(
name|String
name|propName
parameter_list|)
block|{
return|return
operator|!
name|filterExcludeDateAuthorSync
argument_list|(
name|propName
argument_list|)
return|;
block|}
specifier|private
name|boolean
name|filterExcludeDateAuthorSync
parameter_list|(
name|String
name|propName
parameter_list|)
block|{
return|return
name|SVNRevisionProperty
operator|.
name|AUTHOR
operator|.
name|equals
argument_list|(
name|propName
argument_list|)
operator|||
name|SVNRevisionProperty
operator|.
name|DATE
operator|.
name|equals
argument_list|(
name|propName
argument_list|)
operator|||
name|propName
operator|.
name|startsWith
argument_list|(
name|SVNProperty
operator|.
name|SVN_SYNC_PREFIX
argument_list|)
return|;
block|}
specifier|private
name|boolean
name|filterIncludeLog
parameter_list|(
name|String
name|propName
parameter_list|)
block|{
return|return
operator|!
name|filterExcludeLog
argument_list|(
name|propName
argument_list|)
return|;
block|}
specifier|private
name|boolean
name|filterExcludeLog
parameter_list|(
name|String
name|propName
parameter_list|)
block|{
return|return
name|SVNRevisionProperty
operator|.
name|LOG
operator|.
name|equals
argument_list|(
name|propName
argument_list|)
return|;
block|}
block|}
end_class

end_unit

