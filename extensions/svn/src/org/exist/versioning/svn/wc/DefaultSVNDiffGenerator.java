begin_unit|revision:1.0.0;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * ====================================================================  * Copyright (c) 2004-2010 TMate Software Ltd.  All rights reserved.  *  * This software is licensed as described in the file COPYING, which  * you should have received as part of this distribution.  The terms  * are also available at http://svnkit.com/license.html  * If newer versions of this license are posted there, you may use a  * newer version instead, at your option.  * ====================================================================  */
end_comment

begin_package
package|package
name|org
operator|.
name|exist
operator|.
name|versioning
operator|.
name|svn
operator|.
name|wc
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|ByteArrayOutputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|File
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|InputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|OutputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|OutputStreamWriter
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|RandomAccessFile
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|UnsupportedEncodingException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|Writer
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collection
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Iterator
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|LinkedList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|TreeMap
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|versioning
operator|.
name|svn
operator|.
name|Resource
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|versioning
operator|.
name|svn
operator|.
name|internal
operator|.
name|wc
operator|.
name|DefaultSVNOptions
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|versioning
operator|.
name|svn
operator|.
name|internal
operator|.
name|wc
operator|.
name|SVNErrorManager
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|versioning
operator|.
name|svn
operator|.
name|internal
operator|.
name|wc
operator|.
name|SVNFileUtil
import|;
end_import

begin_import
import|import
name|org
operator|.
name|tmatesoft
operator|.
name|svn
operator|.
name|core
operator|.
name|SVNErrorCode
import|;
end_import

begin_import
import|import
name|org
operator|.
name|tmatesoft
operator|.
name|svn
operator|.
name|core
operator|.
name|SVNErrorMessage
import|;
end_import

begin_import
import|import
name|org
operator|.
name|tmatesoft
operator|.
name|svn
operator|.
name|core
operator|.
name|SVNException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|tmatesoft
operator|.
name|svn
operator|.
name|core
operator|.
name|SVNMergeRangeList
import|;
end_import

begin_import
import|import
name|org
operator|.
name|tmatesoft
operator|.
name|svn
operator|.
name|core
operator|.
name|SVNProperties
import|;
end_import

begin_import
import|import
name|org
operator|.
name|tmatesoft
operator|.
name|svn
operator|.
name|core
operator|.
name|SVNProperty
import|;
end_import

begin_import
import|import
name|org
operator|.
name|tmatesoft
operator|.
name|svn
operator|.
name|core
operator|.
name|SVNPropertyValue
import|;
end_import

begin_import
import|import
name|org
operator|.
name|tmatesoft
operator|.
name|svn
operator|.
name|core
operator|.
name|internal
operator|.
name|util
operator|.
name|SVNHashMap
import|;
end_import

begin_import
import|import
name|org
operator|.
name|tmatesoft
operator|.
name|svn
operator|.
name|core
operator|.
name|internal
operator|.
name|util
operator|.
name|SVNMergeInfoUtil
import|;
end_import

begin_import
import|import
name|org
operator|.
name|tmatesoft
operator|.
name|svn
operator|.
name|core
operator|.
name|internal
operator|.
name|util
operator|.
name|SVNPathUtil
import|;
end_import

begin_import
import|import
name|org
operator|.
name|tmatesoft
operator|.
name|svn
operator|.
name|core
operator|.
name|internal
operator|.
name|wc
operator|.
name|ISVNReturnValueCallback
import|;
end_import

begin_import
import|import
name|org
operator|.
name|tmatesoft
operator|.
name|svn
operator|.
name|core
operator|.
name|wc
operator|.
name|ISVNDiffGenerator
import|;
end_import

begin_import
import|import
name|org
operator|.
name|tmatesoft
operator|.
name|svn
operator|.
name|core
operator|.
name|wc
operator|.
name|SVNDiffOptions
import|;
end_import

begin_import
import|import
name|org
operator|.
name|tmatesoft
operator|.
name|svn
operator|.
name|util
operator|.
name|SVNLogType
import|;
end_import

begin_import
import|import
name|de
operator|.
name|regnis
operator|.
name|q
operator|.
name|sequence
operator|.
name|line
operator|.
name|diff
operator|.
name|QDiffGenerator
import|;
end_import

begin_import
import|import
name|de
operator|.
name|regnis
operator|.
name|q
operator|.
name|sequence
operator|.
name|line
operator|.
name|diff
operator|.
name|QDiffGeneratorFactory
import|;
end_import

begin_import
import|import
name|de
operator|.
name|regnis
operator|.
name|q
operator|.
name|sequence
operator|.
name|line
operator|.
name|diff
operator|.
name|QDiffManager
import|;
end_import

begin_import
import|import
name|de
operator|.
name|regnis
operator|.
name|q
operator|.
name|sequence
operator|.
name|line
operator|.
name|diff
operator|.
name|QDiffUniGenerator
import|;
end_import

begin_comment
comment|/**  *<b>DefaultSVNDiffGenerator</b> is a default implementation of   *<b>ISVNDiffGenerator</b>.  *<p>  * By default, if there's no any specified implementation of the diff generator's  * interface, SVNKit uses this default implementation. To set a custom  * diff driver use {@link SVNDiffClient#setDiffGenerator(ISVNDiffGenerator) setDiffGenerator()}.  *   * @version 1.3  * @since   1.2  * @author  TMate Software Ltd.  */
end_comment

begin_class
specifier|public
class|class
name|DefaultSVNDiffGenerator
implements|implements
name|ISVNDiffGenerator
block|{
specifier|protected
specifier|static
specifier|final
name|byte
index|[]
name|PROPERTIES_SEPARATOR
init|=
literal|"___________________________________________________________________"
operator|.
name|getBytes
argument_list|()
decl_stmt|;
specifier|protected
specifier|static
specifier|final
name|byte
index|[]
name|HEADER_SEPARATOR
init|=
literal|"==================================================================="
operator|.
name|getBytes
argument_list|()
decl_stmt|;
specifier|protected
specifier|static
specifier|final
name|String
name|WC_REVISION_LABEL
init|=
literal|"(working copy)"
decl_stmt|;
specifier|protected
specifier|static
specifier|final
name|InputStream
name|EMPTY_FILE_IS
init|=
name|SVNFileUtil
operator|.
name|DUMMY_IN
decl_stmt|;
specifier|private
name|boolean
name|myIsForcedBinaryDiff
decl_stmt|;
specifier|private
name|String
name|myAnchorPath1
decl_stmt|;
specifier|private
name|String
name|myAnchorPath2
decl_stmt|;
specifier|private
name|ISVNOptions
name|myOptions
decl_stmt|;
specifier|private
name|String
name|myEncoding
decl_stmt|;
specifier|private
name|byte
index|[]
name|myEOL
decl_stmt|;
specifier|private
name|boolean
name|myIsDiffDeleted
decl_stmt|;
specifier|private
name|boolean
name|myIsDiffAdded
decl_stmt|;
specifier|private
name|boolean
name|myIsDiffCopied
decl_stmt|;
specifier|private
name|File
name|myBasePath
decl_stmt|;
specifier|private
name|boolean
name|myIsDiffUnversioned
decl_stmt|;
specifier|private
name|SVNDiffOptions
name|myDiffOptions
decl_stmt|;
specifier|private
name|Collection
name|myRawDiffOptions
decl_stmt|;
specifier|private
name|String
name|myDiffCommand
decl_stmt|;
specifier|private
name|boolean
name|myIsUseAbsolutePaths
decl_stmt|;
comment|/**      * Constructs a<b>DefaultSVNDiffGenerator</b>.      *      */
specifier|public
name|DefaultSVNDiffGenerator
parameter_list|()
block|{
name|myIsDiffDeleted
operator|=
literal|true
expr_stmt|;
name|myAnchorPath1
operator|=
literal|""
expr_stmt|;
name|myAnchorPath2
operator|=
literal|""
expr_stmt|;
block|}
comment|/**      * Initializes this generator with old and new diff anchor paths.       *       * @param anchorPath1  an old path/URL      * @param anchorPath2  a new path/URL      */
specifier|public
name|void
name|init
parameter_list|(
name|String
name|anchorPath1
parameter_list|,
name|String
name|anchorPath2
parameter_list|)
block|{
name|myAnchorPath1
operator|=
name|anchorPath1
operator|.
name|replace
argument_list|(
name|File
operator|.
name|separatorChar
argument_list|,
literal|'/'
argument_list|)
expr_stmt|;
name|myAnchorPath2
operator|=
name|anchorPath2
operator|.
name|replace
argument_list|(
name|File
operator|.
name|separatorChar
argument_list|,
literal|'/'
argument_list|)
expr_stmt|;
block|}
comment|/**      * Sets diff options containing diff rules.      *       * @param options diff options      */
specifier|public
name|void
name|setDiffOptions
parameter_list|(
name|SVNDiffOptions
name|options
parameter_list|)
block|{
name|myDiffOptions
operator|=
name|options
expr_stmt|;
block|}
comment|/**      * Sets a collection of raw (<code>String</code>) diff options.        *       * @param options raw options       */
specifier|public
name|void
name|setRawDiffOptions
parameter_list|(
name|Collection
name|options
parameter_list|)
block|{
name|myRawDiffOptions
operator|=
name|options
expr_stmt|;
block|}
comment|/**      * Sets global run-time options.       *       * @param options options implementation       */
specifier|public
name|void
name|setOptions
parameter_list|(
name|ISVNOptions
name|options
parameter_list|)
block|{
name|myOptions
operator|=
name|options
expr_stmt|;
block|}
comment|/**      * Sets an external diff program for producing the difference between files.      *       * @param command external diff program       */
specifier|public
name|void
name|setExternalDiffCommand
parameter_list|(
name|String
name|command
parameter_list|)
block|{
name|myDiffCommand
operator|=
name|command
expr_stmt|;
block|}
comment|/**      * Sets the base path that must be stripped from the front of the paths of compared files.      * If<code>basePath</code> is not<span class="javakeyword">null</span> but is not a parent path of       * the target, this will lead to an error during diff.       *       *<p/>      * Note:<code>basePath</code> doesn't affect the path index generated by external diff programs.      *       * @param basePath common parent path to strip off the displayed paths       */
specifier|public
name|void
name|setBasePath
parameter_list|(
name|File
name|basePath
parameter_list|)
block|{
name|myBasePath
operator|=
name|basePath
expr_stmt|;
block|}
comment|/**      * Controls whether error is reported on failure to compute relative display path,       * or absolute path is used instead.      *       * @param fallback true to make generator use absolute path when relative path could not      *                 be computed.      */
specifier|public
name|void
name|setFallbackToAbsolutePath
parameter_list|(
name|boolean
name|fallback
parameter_list|)
block|{
name|myIsUseAbsolutePaths
operator|=
name|fallback
expr_stmt|;
block|}
comment|/**      * Enables or disables diffing deleted files.      *       * @param isDiffDeleted      */
specifier|public
name|void
name|setDiffDeleted
parameter_list|(
name|boolean
name|isDiffDeleted
parameter_list|)
block|{
name|myIsDiffDeleted
operator|=
name|isDiffDeleted
expr_stmt|;
block|}
comment|/**      * Tells whether deleted files must be diffed also.      *       * @return<span class="javakeyword">true</span> if deleted files must be diffed also        */
specifier|public
name|boolean
name|isDiffDeleted
parameter_list|()
block|{
return|return
name|myIsDiffDeleted
return|;
block|}
comment|/**      * Enables or disables diffing added files.      *       * @param isDiffAdded      */
specifier|public
name|void
name|setDiffAdded
parameter_list|(
name|boolean
name|isDiffAdded
parameter_list|)
block|{
name|myIsDiffAdded
operator|=
name|isDiffAdded
expr_stmt|;
block|}
comment|/**      * Tells whether added files must be diffed also.      *       * @return<span class="javakeyword">true</span> if added files must be diffed also        */
specifier|public
name|boolean
name|isDiffAdded
parameter_list|()
block|{
return|return
name|myIsDiffAdded
return|;
block|}
comment|/**      * Enables or disables copied files diffing.      *       * @param isDiffCopied       */
specifier|public
name|void
name|setDiffCopied
parameter_list|(
name|boolean
name|isDiffCopied
parameter_list|)
block|{
name|myIsDiffCopied
operator|=
name|isDiffCopied
expr_stmt|;
block|}
comment|/**      * Tells whether deleted files must be diffed also.      *       * @return<span class="javakeyword">true</span> if copied files must be diffed also        */
specifier|public
name|boolean
name|isDiffCopied
parameter_list|()
block|{
return|return
name|myIsDiffCopied
return|;
block|}
comment|/**      * Gets the diff options that are used by this generator.       * Creates a new one if none was used before.      *       * @return diff options      */
specifier|public
name|SVNDiffOptions
name|getDiffOptions
parameter_list|()
block|{
if|if
condition|(
name|myDiffOptions
operator|==
literal|null
condition|)
block|{
name|myDiffOptions
operator|=
operator|new
name|SVNDiffOptions
argument_list|()
expr_stmt|;
block|}
return|return
name|myDiffOptions
return|;
block|}
specifier|protected
name|String
name|getDisplayPath
parameter_list|(
name|String
name|path
parameter_list|)
throws|throws
name|SVNException
block|{
if|if
condition|(
name|myBasePath
operator|==
literal|null
condition|)
block|{
return|return
name|path
return|;
block|}
if|if
condition|(
name|path
operator|==
literal|null
condition|)
block|{
name|path
operator|=
literal|""
expr_stmt|;
block|}
if|if
condition|(
name|SVNPathUtil
operator|.
name|isURL
argument_list|(
name|path
argument_list|)
condition|)
block|{
return|return
name|path
return|;
block|}
comment|// treat as file path.
name|String
name|basePath
init|=
name|myBasePath
operator|.
name|getAbsolutePath
argument_list|()
operator|.
name|replace
argument_list|(
name|File
operator|.
name|separatorChar
argument_list|,
literal|'/'
argument_list|)
decl_stmt|;
name|path
operator|=
operator|new
name|Resource
argument_list|(
name|path
argument_list|)
operator|.
name|getAbsolutePath
argument_list|()
operator|.
name|replace
argument_list|(
name|File
operator|.
name|separatorChar
argument_list|,
literal|'/'
argument_list|)
expr_stmt|;
if|if
condition|(
name|path
operator|.
name|equals
argument_list|(
name|basePath
argument_list|)
condition|)
block|{
return|return
literal|"."
return|;
block|}
name|String
name|relativePath
init|=
name|SVNPathUtil
operator|.
name|getPathAsChild
argument_list|(
name|basePath
argument_list|,
name|path
argument_list|)
decl_stmt|;
if|if
condition|(
name|relativePath
operator|==
literal|null
condition|)
block|{
if|if
condition|(
name|myIsUseAbsolutePaths
condition|)
block|{
return|return
name|path
return|;
block|}
name|createBadRelativePathError
argument_list|(
name|path
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|relativePath
operator|.
name|startsWith
argument_list|(
literal|"./"
argument_list|)
condition|)
block|{
name|relativePath
operator|=
name|relativePath
operator|.
name|substring
argument_list|(
literal|"./"
operator|.
name|length
argument_list|()
argument_list|)
expr_stmt|;
block|}
return|return
name|relativePath
return|;
block|}
comment|/**      * Sets whether binary files diff must be forced or not.      *       * @param forced whether to force binary diff or not       */
specifier|public
name|void
name|setForcedBinaryDiff
parameter_list|(
name|boolean
name|forced
parameter_list|)
block|{
name|myIsForcedBinaryDiff
operator|=
name|forced
expr_stmt|;
block|}
comment|/**      * Tells if this generator forced binary files diff.      *       * @return<span class="javakeyword">true</span> if forces; otherwise<span class="javakeyword">false</span>       */
specifier|public
name|boolean
name|isForcedBinaryDiff
parameter_list|()
block|{
return|return
name|myIsForcedBinaryDiff
return|;
block|}
comment|/**      * Produces properties difference and writes it to<code>result</code>.      *       * @param  path       * @param  baseProps       * @param  diff       * @param  result       * @throws SVNException  in the following cases:      *<ul>      *<li/>exception with {@link SVNErrorCode#IO_ERROR} error code - if an I\O error occurred      *</ul>       */
specifier|public
name|void
name|displayPropDiff
parameter_list|(
name|String
name|path
parameter_list|,
name|SVNProperties
name|baseProps
parameter_list|,
name|SVNProperties
name|diff
parameter_list|,
name|OutputStream
name|result
parameter_list|)
throws|throws
name|SVNException
block|{
name|baseProps
operator|=
name|baseProps
operator|!=
literal|null
condition|?
name|baseProps
else|:
operator|new
name|SVNProperties
argument_list|()
expr_stmt|;
name|diff
operator|=
name|diff
operator|!=
literal|null
condition|?
name|diff
else|:
operator|new
name|SVNProperties
argument_list|()
expr_stmt|;
for|for
control|(
name|Iterator
name|changedPropNames
init|=
name|diff
operator|.
name|nameSet
argument_list|()
operator|.
name|iterator
argument_list|()
init|;
name|changedPropNames
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|String
name|name
init|=
operator|(
name|String
operator|)
name|changedPropNames
operator|.
name|next
argument_list|()
decl_stmt|;
name|SVNPropertyValue
name|originalValue
init|=
name|baseProps
operator|.
name|getSVNPropertyValue
argument_list|(
name|name
argument_list|)
decl_stmt|;
name|SVNPropertyValue
name|newValue
init|=
name|diff
operator|.
name|getSVNPropertyValue
argument_list|(
name|name
argument_list|)
decl_stmt|;
if|if
condition|(
operator|(
name|originalValue
operator|!=
literal|null
operator|&&
name|originalValue
operator|.
name|equals
argument_list|(
name|newValue
argument_list|)
operator|)
operator|||
operator|(
name|originalValue
operator|==
literal|null
operator|&&
name|newValue
operator|==
literal|null
operator|)
condition|)
block|{
name|changedPropNames
operator|.
name|remove
argument_list|()
expr_stmt|;
block|}
block|}
if|if
condition|(
name|diff
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
return|return;
block|}
name|path
operator|=
name|getDisplayPath
argument_list|(
name|path
argument_list|)
expr_stmt|;
name|ByteArrayOutputStream
name|bos
init|=
operator|new
name|ByteArrayOutputStream
argument_list|()
decl_stmt|;
name|diff
operator|=
operator|new
name|SVNProperties
argument_list|(
name|diff
argument_list|)
expr_stmt|;
try|try
block|{
name|bos
operator|.
name|write
argument_list|(
name|getEOL
argument_list|()
argument_list|)
expr_stmt|;
name|bos
operator|.
name|write
argument_list|(
operator|(
literal|"Property changes on: "
operator|+
operator|(
name|useLocalFileSeparatorChar
argument_list|()
condition|?
name|path
operator|.
name|replace
argument_list|(
literal|'/'
argument_list|,
name|File
operator|.
name|separatorChar
argument_list|)
else|:
name|path
operator|)
operator|)
operator|.
name|getBytes
argument_list|(
name|getEncoding
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|bos
operator|.
name|write
argument_list|(
name|getEOL
argument_list|()
argument_list|)
expr_stmt|;
name|bos
operator|.
name|write
argument_list|(
name|PROPERTIES_SEPARATOR
argument_list|)
expr_stmt|;
name|bos
operator|.
name|write
argument_list|(
name|getEOL
argument_list|()
argument_list|)
expr_stmt|;
for|for
control|(
name|Iterator
name|changedPropNames
init|=
name|diff
operator|.
name|nameSet
argument_list|()
operator|.
name|iterator
argument_list|()
init|;
name|changedPropNames
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|String
name|name
init|=
operator|(
name|String
operator|)
name|changedPropNames
operator|.
name|next
argument_list|()
decl_stmt|;
name|SVNPropertyValue
name|originalValue
init|=
name|baseProps
operator|!=
literal|null
condition|?
name|baseProps
operator|.
name|getSVNPropertyValue
argument_list|(
name|name
argument_list|)
else|:
literal|null
decl_stmt|;
name|SVNPropertyValue
name|newValue
init|=
name|diff
operator|.
name|getSVNPropertyValue
argument_list|(
name|name
argument_list|)
decl_stmt|;
name|String
name|headerFormat
init|=
literal|null
decl_stmt|;
if|if
condition|(
name|originalValue
operator|==
literal|null
condition|)
block|{
name|headerFormat
operator|=
literal|"Added: "
expr_stmt|;
block|}
if|else if
condition|(
name|newValue
operator|==
literal|null
condition|)
block|{
name|headerFormat
operator|=
literal|"Deleted: "
expr_stmt|;
block|}
else|else
block|{
name|headerFormat
operator|=
literal|"Modified: "
expr_stmt|;
block|}
name|bos
operator|.
name|write
argument_list|(
operator|(
name|headerFormat
operator|+
name|name
operator|)
operator|.
name|getBytes
argument_list|(
name|getEncoding
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|bos
operator|.
name|write
argument_list|(
name|getEOL
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|SVNProperty
operator|.
name|MERGE_INFO
operator|.
name|equals
argument_list|(
name|name
argument_list|)
condition|)
block|{
name|displayMergeInfoDiff
argument_list|(
name|bos
argument_list|,
name|originalValue
operator|==
literal|null
condition|?
literal|null
else|:
name|originalValue
operator|.
name|getString
argument_list|()
argument_list|,
name|newValue
operator|==
literal|null
condition|?
literal|null
else|:
name|newValue
operator|.
name|getString
argument_list|()
argument_list|)
expr_stmt|;
continue|continue;
block|}
if|if
condition|(
name|originalValue
operator|!=
literal|null
condition|)
block|{
name|bos
operator|.
name|write
argument_list|(
literal|"   - "
operator|.
name|getBytes
argument_list|(
name|getEncoding
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|bos
operator|.
name|write
argument_list|(
name|getPropertyAsBytes
argument_list|(
name|originalValue
argument_list|,
name|getEncoding
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|bos
operator|.
name|write
argument_list|(
name|getEOL
argument_list|()
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|newValue
operator|!=
literal|null
condition|)
block|{
name|bos
operator|.
name|write
argument_list|(
literal|"   + "
operator|.
name|getBytes
argument_list|(
name|getEncoding
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|bos
operator|.
name|write
argument_list|(
name|getPropertyAsBytes
argument_list|(
name|newValue
argument_list|,
name|getEncoding
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|bos
operator|.
name|write
argument_list|(
name|getEOL
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
name|bos
operator|.
name|write
argument_list|(
name|getEOL
argument_list|()
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
name|SVNErrorMessage
name|err
init|=
name|SVNErrorMessage
operator|.
name|create
argument_list|(
name|SVNErrorCode
operator|.
name|IO_ERROR
argument_list|,
name|e
operator|.
name|getLocalizedMessage
argument_list|()
argument_list|)
decl_stmt|;
name|SVNErrorManager
operator|.
name|error
argument_list|(
name|err
argument_list|,
name|e
argument_list|,
name|SVNLogType
operator|.
name|DEFAULT
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
try|try
block|{
name|bos
operator|.
name|close
argument_list|()
expr_stmt|;
name|bos
operator|.
name|writeTo
argument_list|(
name|result
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
block|}
block|}
block|}
specifier|private
name|byte
index|[]
name|getPropertyAsBytes
parameter_list|(
name|SVNPropertyValue
name|value
parameter_list|,
name|String
name|encoding
parameter_list|)
block|{
if|if
condition|(
name|value
operator|==
literal|null
condition|)
block|{
return|return
literal|null
return|;
block|}
if|if
condition|(
name|value
operator|.
name|isString
argument_list|()
condition|)
block|{
try|try
block|{
return|return
name|value
operator|.
name|getString
argument_list|()
operator|.
name|getBytes
argument_list|(
name|encoding
argument_list|)
return|;
block|}
catch|catch
parameter_list|(
name|UnsupportedEncodingException
name|e
parameter_list|)
block|{
return|return
name|value
operator|.
name|getString
argument_list|()
operator|.
name|getBytes
argument_list|()
return|;
block|}
block|}
return|return
name|value
operator|.
name|getBytes
argument_list|()
return|;
block|}
specifier|protected
name|File
name|getBasePath
parameter_list|()
block|{
return|return
name|myBasePath
return|;
block|}
comment|/**      * Writes the difference between<code>file1</code> and<code>file2</code> as they are seen in       *<code>rev1</code> and<code>rev2</code> to<code>result</code>.      *       * @param  path       * @param  file1       * @param  file2       * @param  rev1       * @param  rev2       * @param  mimeType1       * @param  mimeType2       * @param  result       * @throws SVNException  in the following cases:      *<ul>      *<li/>exception with {@link SVNErrorCode#EXTERNAL_PROGRAM} error code - if an external diff program       *                       exited with an error code value different from<code>0</code> and<code>1</code>      *<li/>exception with {@link SVNErrorCode#IO_ERROR} error code - if an I\O error occurred      *</ul>       */
specifier|public
name|void
name|displayFileDiff
parameter_list|(
name|String
name|path
parameter_list|,
name|File
name|file1
parameter_list|,
name|File
name|file2
parameter_list|,
name|String
name|rev1
parameter_list|,
name|String
name|rev2
parameter_list|,
name|String
name|mimeType1
parameter_list|,
name|String
name|mimeType2
parameter_list|,
name|OutputStream
name|result
parameter_list|)
throws|throws
name|SVNException
block|{
name|path
operator|=
name|getDisplayPath
argument_list|(
name|path
argument_list|)
expr_stmt|;
comment|// if anchor1 is the same as anchor2 just use path.
comment|// if anchor1 differs from anchor2 =>
comment|// condence anchors (get common root and remainings).
name|int
name|i
init|=
literal|0
decl_stmt|;
for|for
control|(
init|;
name|i
operator|<
name|myAnchorPath1
operator|.
name|length
argument_list|()
operator|&&
name|i
operator|<
name|myAnchorPath2
operator|.
name|length
argument_list|()
operator|&&
name|myAnchorPath1
operator|.
name|charAt
argument_list|(
name|i
argument_list|)
operator|==
name|myAnchorPath2
operator|.
name|charAt
argument_list|(
name|i
argument_list|)
condition|;
name|i
operator|++
control|)
block|{
block|}
if|if
condition|(
name|i
operator|<
name|myAnchorPath1
operator|.
name|length
argument_list|()
operator|||
name|i
operator|<
name|myAnchorPath2
operator|.
name|length
argument_list|()
condition|)
block|{
if|if
condition|(
name|i
operator|==
name|myAnchorPath1
operator|.
name|length
argument_list|()
condition|)
block|{
name|i
operator|=
name|myAnchorPath1
operator|.
name|length
argument_list|()
operator|-
literal|1
expr_stmt|;
block|}
for|for
control|(
init|;
name|i
operator|>
literal|0
operator|&&
name|myAnchorPath1
operator|.
name|charAt
argument_list|(
name|i
argument_list|)
operator|!=
literal|'/'
condition|;
name|i
operator|--
control|)
block|{
block|}
block|}
name|String
name|p1
init|=
name|myAnchorPath1
operator|.
name|substring
argument_list|(
name|i
argument_list|)
decl_stmt|;
name|String
name|p2
init|=
name|myAnchorPath2
operator|.
name|substring
argument_list|(
name|i
argument_list|)
decl_stmt|;
if|if
condition|(
name|p1
operator|.
name|length
argument_list|()
operator|==
literal|0
condition|)
block|{
name|p1
operator|=
name|path
expr_stmt|;
block|}
if|else if
condition|(
name|p1
operator|.
name|charAt
argument_list|(
literal|0
argument_list|)
operator|==
literal|'/'
condition|)
block|{
name|p1
operator|=
name|path
operator|+
literal|"\t(..."
operator|+
name|p1
operator|+
literal|")"
expr_stmt|;
block|}
else|else
block|{
name|p1
operator|=
name|path
operator|+
literal|"\t(.../"
operator|+
name|p1
operator|+
literal|")"
expr_stmt|;
block|}
if|if
condition|(
name|p2
operator|.
name|length
argument_list|()
operator|==
literal|0
condition|)
block|{
name|p2
operator|=
name|path
expr_stmt|;
block|}
if|else if
condition|(
name|p2
operator|.
name|charAt
argument_list|(
literal|0
argument_list|)
operator|==
literal|'/'
condition|)
block|{
name|p2
operator|=
name|path
operator|+
literal|"\t(..."
operator|+
name|p2
operator|+
literal|")"
expr_stmt|;
block|}
else|else
block|{
name|p2
operator|=
name|path
operator|+
literal|"\t(.../"
operator|+
name|p2
operator|+
literal|")"
expr_stmt|;
block|}
name|String
name|label1
init|=
name|getLabel
argument_list|(
name|p1
argument_list|,
name|rev1
argument_list|)
decl_stmt|;
name|String
name|label2
init|=
name|getLabel
argument_list|(
name|p2
argument_list|,
name|rev2
argument_list|)
decl_stmt|;
name|ByteArrayOutputStream
name|bos
init|=
operator|new
name|ByteArrayOutputStream
argument_list|()
decl_stmt|;
try|try
block|{
if|if
condition|(
name|displayHeader
argument_list|(
name|bos
argument_list|,
name|path
argument_list|,
name|file2
operator|==
literal|null
argument_list|)
condition|)
block|{
name|bos
operator|.
name|close
argument_list|()
expr_stmt|;
name|bos
operator|.
name|writeTo
argument_list|(
name|result
argument_list|)
expr_stmt|;
return|return;
block|}
if|if
condition|(
name|isHeaderForced
argument_list|(
name|file1
argument_list|,
name|file2
argument_list|)
condition|)
block|{
name|bos
operator|.
name|writeTo
argument_list|(
name|result
argument_list|)
expr_stmt|;
name|bos
operator|.
name|reset
argument_list|()
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
try|try
block|{
name|bos
operator|.
name|close
argument_list|()
expr_stmt|;
name|bos
operator|.
name|writeTo
argument_list|(
name|result
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|inner
parameter_list|)
block|{
block|}
name|SVNErrorMessage
name|err
init|=
name|SVNErrorMessage
operator|.
name|create
argument_list|(
name|SVNErrorCode
operator|.
name|IO_ERROR
argument_list|,
name|e
operator|.
name|getLocalizedMessage
argument_list|()
argument_list|)
decl_stmt|;
name|SVNErrorManager
operator|.
name|error
argument_list|(
name|err
argument_list|,
name|e
argument_list|,
name|SVNLogType
operator|.
name|DEFAULT
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
operator|!
name|isForcedBinaryDiff
argument_list|()
operator|&&
operator|(
name|SVNProperty
operator|.
name|isBinaryMimeType
argument_list|(
name|mimeType1
argument_list|)
operator|||
name|SVNProperty
operator|.
name|isBinaryMimeType
argument_list|(
name|mimeType2
argument_list|)
operator|)
condition|)
block|{
try|try
block|{
name|displayBinary
argument_list|(
name|bos
argument_list|,
name|mimeType1
argument_list|,
name|mimeType2
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
name|SVNErrorMessage
name|err
init|=
name|SVNErrorMessage
operator|.
name|create
argument_list|(
name|SVNErrorCode
operator|.
name|IO_ERROR
argument_list|,
name|e
operator|.
name|getLocalizedMessage
argument_list|()
argument_list|)
decl_stmt|;
name|SVNErrorManager
operator|.
name|error
argument_list|(
name|err
argument_list|,
name|e
argument_list|,
name|SVNLogType
operator|.
name|DEFAULT
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
try|try
block|{
name|bos
operator|.
name|close
argument_list|()
expr_stmt|;
name|bos
operator|.
name|writeTo
argument_list|(
name|result
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
block|}
block|}
return|return;
block|}
if|if
condition|(
name|file1
operator|==
name|file2
operator|&&
name|file1
operator|==
literal|null
condition|)
block|{
try|try
block|{
name|bos
operator|.
name|close
argument_list|()
expr_stmt|;
name|bos
operator|.
name|writeTo
argument_list|(
name|result
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
block|}
return|return;
block|}
specifier|final
name|String
name|diffCommand
init|=
name|getExternalDiffCommand
argument_list|()
decl_stmt|;
if|if
condition|(
name|diffCommand
operator|!=
literal|null
condition|)
block|{
try|try
block|{
name|bos
operator|.
name|close
argument_list|()
expr_stmt|;
name|bos
operator|.
name|writeTo
argument_list|(
name|result
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
block|}
name|Collection
name|args
init|=
operator|new
name|LinkedList
argument_list|()
decl_stmt|;
name|File
name|diffCommandFile
init|=
operator|new
name|Resource
argument_list|(
name|diffCommand
argument_list|)
decl_stmt|;
name|args
operator|.
name|add
argument_list|(
name|diffCommandFile
operator|.
name|getAbsolutePath
argument_list|()
operator|.
name|replace
argument_list|(
name|File
operator|.
name|separatorChar
argument_list|,
literal|'/'
argument_list|)
argument_list|)
expr_stmt|;
if|if
condition|(
name|myRawDiffOptions
operator|!=
literal|null
condition|)
block|{
name|args
operator|.
name|addAll
argument_list|(
name|myRawDiffOptions
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|Collection
name|diffOptions
init|=
name|getDiffOptions
argument_list|()
operator|.
name|toOptionsCollection
argument_list|()
decl_stmt|;
name|args
operator|.
name|addAll
argument_list|(
name|diffOptions
argument_list|)
expr_stmt|;
name|args
operator|.
name|add
argument_list|(
literal|"-u"
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|label1
operator|!=
literal|null
condition|)
block|{
name|args
operator|.
name|add
argument_list|(
literal|"-L"
argument_list|)
expr_stmt|;
name|args
operator|.
name|add
argument_list|(
name|label1
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|label2
operator|!=
literal|null
condition|)
block|{
name|args
operator|.
name|add
argument_list|(
literal|"-L"
argument_list|)
expr_stmt|;
name|args
operator|.
name|add
argument_list|(
name|label2
argument_list|)
expr_stmt|;
block|}
name|boolean
name|tmpFile1
init|=
literal|false
decl_stmt|;
name|boolean
name|tmpFile2
init|=
literal|false
decl_stmt|;
if|if
condition|(
name|file1
operator|==
literal|null
condition|)
block|{
name|file1
operator|=
name|SVNFileUtil
operator|.
name|createTempFile
argument_list|(
literal|"svn."
argument_list|,
literal|".tmp"
argument_list|)
expr_stmt|;
name|tmpFile1
operator|=
literal|true
expr_stmt|;
block|}
if|if
condition|(
name|file2
operator|==
literal|null
condition|)
block|{
name|file2
operator|=
name|SVNFileUtil
operator|.
name|createTempFile
argument_list|(
literal|"svn."
argument_list|,
literal|".tmp"
argument_list|)
expr_stmt|;
name|tmpFile2
operator|=
literal|true
expr_stmt|;
block|}
name|String
name|currentDir
init|=
operator|new
name|File
argument_list|(
literal|""
argument_list|)
operator|.
name|getAbsolutePath
argument_list|()
operator|.
name|replace
argument_list|(
name|File
operator|.
name|separatorChar
argument_list|,
literal|'/'
argument_list|)
decl_stmt|;
name|String
name|file1Path
init|=
name|file1
operator|.
name|getAbsolutePath
argument_list|()
operator|.
name|replace
argument_list|(
name|File
operator|.
name|separatorChar
argument_list|,
literal|'/'
argument_list|)
decl_stmt|;
name|String
name|file2Path
init|=
name|file2
operator|.
name|getAbsolutePath
argument_list|()
operator|.
name|replace
argument_list|(
name|File
operator|.
name|separatorChar
argument_list|,
literal|'/'
argument_list|)
decl_stmt|;
if|if
condition|(
name|file1Path
operator|.
name|startsWith
argument_list|(
name|currentDir
argument_list|)
condition|)
block|{
name|file1Path
operator|=
name|file1Path
operator|.
name|substring
argument_list|(
name|currentDir
operator|.
name|length
argument_list|()
argument_list|)
expr_stmt|;
name|file1Path
operator|=
name|file1Path
operator|.
name|startsWith
argument_list|(
literal|"/"
argument_list|)
condition|?
name|file1Path
operator|.
name|substring
argument_list|(
literal|1
argument_list|)
else|:
name|file1Path
expr_stmt|;
block|}
if|if
condition|(
name|file2Path
operator|.
name|startsWith
argument_list|(
name|currentDir
argument_list|)
condition|)
block|{
name|file2Path
operator|=
name|file2Path
operator|.
name|substring
argument_list|(
name|currentDir
operator|.
name|length
argument_list|()
argument_list|)
expr_stmt|;
name|file2Path
operator|=
name|file2Path
operator|.
name|startsWith
argument_list|(
literal|"/"
argument_list|)
condition|?
name|file2Path
operator|.
name|substring
argument_list|(
literal|1
argument_list|)
else|:
name|file2Path
expr_stmt|;
block|}
name|args
operator|.
name|add
argument_list|(
name|file1Path
argument_list|)
expr_stmt|;
name|args
operator|.
name|add
argument_list|(
name|file2Path
argument_list|)
expr_stmt|;
try|try
block|{
specifier|final
name|Writer
name|writer
init|=
operator|new
name|OutputStreamWriter
argument_list|(
name|result
argument_list|,
name|getEncoding
argument_list|()
argument_list|)
decl_stmt|;
name|SVNFileUtil
operator|.
name|execCommand
argument_list|(
operator|(
name|String
index|[]
operator|)
name|args
operator|.
name|toArray
argument_list|(
operator|new
name|String
index|[
name|args
operator|.
name|size
argument_list|()
index|]
argument_list|)
argument_list|,
literal|true
argument_list|,
operator|new
name|ISVNReturnValueCallback
argument_list|()
block|{
specifier|public
name|void
name|handleReturnValue
parameter_list|(
name|int
name|returnValue
parameter_list|)
throws|throws
name|SVNException
block|{
if|if
condition|(
name|returnValue
operator|!=
literal|0
operator|&&
name|returnValue
operator|!=
literal|1
condition|)
block|{
name|SVNErrorMessage
name|err
init|=
name|SVNErrorMessage
operator|.
name|create
argument_list|(
name|SVNErrorCode
operator|.
name|EXTERNAL_PROGRAM
argument_list|,
literal|"''{0}'' returned {1}"
argument_list|,
operator|new
name|Object
index|[]
block|{
name|diffCommand
block|,
name|String
operator|.
name|valueOf
argument_list|(
name|returnValue
argument_list|)
block|}
argument_list|)
decl_stmt|;
name|SVNErrorManager
operator|.
name|error
argument_list|(
name|err
argument_list|,
name|SVNLogType
operator|.
name|DEFAULT
argument_list|)
expr_stmt|;
block|}
block|}
specifier|public
name|void
name|handleChar
parameter_list|(
name|char
name|ch
parameter_list|)
throws|throws
name|SVNException
block|{
try|try
block|{
name|writer
operator|.
name|write
argument_list|(
name|ch
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|ioe
parameter_list|)
block|{
name|SVNErrorMessage
name|err
init|=
name|SVNErrorMessage
operator|.
name|create
argument_list|(
name|SVNErrorCode
operator|.
name|IO_ERROR
argument_list|,
name|ioe
operator|.
name|getMessage
argument_list|()
argument_list|)
decl_stmt|;
name|SVNErrorManager
operator|.
name|error
argument_list|(
name|err
argument_list|,
name|ioe
argument_list|,
name|SVNLogType
operator|.
name|DEFAULT
argument_list|)
expr_stmt|;
block|}
block|}
specifier|public
name|boolean
name|isHandleProgramOutput
parameter_list|()
block|{
return|return
literal|true
return|;
block|}
block|}
argument_list|)
expr_stmt|;
name|writer
operator|.
name|flush
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|ioe
parameter_list|)
block|{
name|SVNErrorMessage
name|err
init|=
name|SVNErrorMessage
operator|.
name|create
argument_list|(
name|SVNErrorCode
operator|.
name|IO_ERROR
argument_list|,
name|ioe
operator|.
name|getMessage
argument_list|()
argument_list|)
decl_stmt|;
name|SVNErrorManager
operator|.
name|error
argument_list|(
name|err
argument_list|,
name|ioe
argument_list|,
name|SVNLogType
operator|.
name|DEFAULT
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
try|try
block|{
if|if
condition|(
name|tmpFile1
condition|)
block|{
name|SVNFileUtil
operator|.
name|deleteFile
argument_list|(
name|file1
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|tmpFile2
condition|)
block|{
name|SVNFileUtil
operator|.
name|deleteFile
argument_list|(
name|file2
argument_list|)
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
name|SVNException
name|e
parameter_list|)
block|{
comment|// skip
block|}
block|}
return|return;
block|}
comment|// put header fields.
try|try
block|{
name|displayHeaderFields
argument_list|(
name|bos
argument_list|,
name|label1
argument_list|,
name|label2
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
try|try
block|{
name|bos
operator|.
name|close
argument_list|()
expr_stmt|;
name|bos
operator|.
name|writeTo
argument_list|(
name|result
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|inner
parameter_list|)
block|{
block|}
name|SVNErrorMessage
name|err
init|=
name|SVNErrorMessage
operator|.
name|create
argument_list|(
name|SVNErrorCode
operator|.
name|IO_ERROR
argument_list|,
name|e
operator|.
name|getLocalizedMessage
argument_list|()
argument_list|)
decl_stmt|;
name|SVNErrorManager
operator|.
name|error
argument_list|(
name|err
argument_list|,
name|e
argument_list|,
name|SVNLogType
operator|.
name|DEFAULT
argument_list|)
expr_stmt|;
block|}
name|String
name|header
decl_stmt|;
try|try
block|{
name|bos
operator|.
name|close
argument_list|()
expr_stmt|;
name|header
operator|=
name|bos
operator|.
name|toString
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|inner
parameter_list|)
block|{
name|header
operator|=
literal|""
expr_stmt|;
block|}
name|RandomAccessFile
name|is1
init|=
literal|null
decl_stmt|;
name|RandomAccessFile
name|is2
init|=
literal|null
decl_stmt|;
try|try
block|{
name|is1
operator|=
name|file1
operator|==
literal|null
condition|?
literal|null
else|:
name|SVNFileUtil
operator|.
name|openRAFileForReading
argument_list|(
name|file1
argument_list|)
expr_stmt|;
name|is2
operator|=
name|file2
operator|==
literal|null
condition|?
literal|null
else|:
name|SVNFileUtil
operator|.
name|openRAFileForReading
argument_list|(
name|file2
argument_list|)
expr_stmt|;
name|QDiffUniGenerator
operator|.
name|setup
argument_list|()
expr_stmt|;
name|Map
name|properties
init|=
operator|new
name|SVNHashMap
argument_list|()
decl_stmt|;
name|properties
operator|.
name|put
argument_list|(
name|QDiffGeneratorFactory
operator|.
name|IGNORE_EOL_PROPERTY
argument_list|,
name|Boolean
operator|.
name|valueOf
argument_list|(
name|getDiffOptions
argument_list|()
operator|.
name|isIgnoreEOLStyle
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
if|if
condition|(
name|getDiffOptions
argument_list|()
operator|.
name|isIgnoreAllWhitespace
argument_list|()
condition|)
block|{
name|properties
operator|.
name|put
argument_list|(
name|QDiffGeneratorFactory
operator|.
name|IGNORE_SPACE_PROPERTY
argument_list|,
name|QDiffGeneratorFactory
operator|.
name|IGNORE_ALL_SPACE
argument_list|)
expr_stmt|;
block|}
if|else if
condition|(
name|getDiffOptions
argument_list|()
operator|.
name|isIgnoreAmountOfWhitespace
argument_list|()
condition|)
block|{
name|properties
operator|.
name|put
argument_list|(
name|QDiffGeneratorFactory
operator|.
name|IGNORE_SPACE_PROPERTY
argument_list|,
name|QDiffGeneratorFactory
operator|.
name|IGNORE_SPACE_CHANGE
argument_list|)
expr_stmt|;
block|}
name|QDiffGenerator
name|generator
init|=
operator|new
name|QDiffUniGenerator
argument_list|(
name|properties
argument_list|,
name|header
argument_list|)
decl_stmt|;
name|Writer
name|writer
init|=
operator|new
name|OutputStreamWriter
argument_list|(
name|result
argument_list|,
name|getEncoding
argument_list|()
argument_list|)
decl_stmt|;
name|QDiffManager
operator|.
name|generateTextDiff
argument_list|(
name|is1
argument_list|,
name|is2
argument_list|,
name|getEncoding
argument_list|()
argument_list|,
name|writer
argument_list|,
name|generator
argument_list|)
expr_stmt|;
name|writer
operator|.
name|flush
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
name|SVNErrorMessage
name|err
init|=
name|SVNErrorMessage
operator|.
name|create
argument_list|(
name|SVNErrorCode
operator|.
name|IO_ERROR
argument_list|,
name|e
operator|.
name|getMessage
argument_list|()
argument_list|)
decl_stmt|;
name|SVNErrorManager
operator|.
name|error
argument_list|(
name|err
argument_list|,
name|e
argument_list|,
name|SVNLogType
operator|.
name|DEFAULT
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
name|SVNFileUtil
operator|.
name|closeFile
argument_list|(
name|is1
argument_list|)
expr_stmt|;
name|SVNFileUtil
operator|.
name|closeFile
argument_list|(
name|is2
argument_list|)
expr_stmt|;
block|}
block|}
comment|/**      * Sets the encoding to use for diff output.      * @param encoding  charset name       */
specifier|public
name|void
name|setEncoding
parameter_list|(
name|String
name|encoding
parameter_list|)
block|{
name|myEncoding
operator|=
name|encoding
expr_stmt|;
block|}
comment|/**      * Returns the encoding used for diff output.      *       * @return charset name       */
specifier|public
name|String
name|getEncoding
parameter_list|()
block|{
if|if
condition|(
name|hasEncoding
argument_list|()
condition|)
block|{
return|return
name|myEncoding
return|;
block|}
return|return
name|getOptions
argument_list|()
operator|.
name|getNativeCharset
argument_list|()
return|;
block|}
comment|/**      * Says whether this generator is using any special (non-native)       * charset for outputting diffs.      *       * @return<span class="javakeyword">true</span> if yes;      *         otherwise<span class="javakeyword">false</span>       */
specifier|public
name|boolean
name|hasEncoding
parameter_list|()
block|{
return|return
name|myEncoding
operator|!=
literal|null
return|;
block|}
comment|/**      * Sets the EOL bytes to use in diff output.      *       * @param eol EOL bytes       */
specifier|public
name|void
name|setEOL
parameter_list|(
name|byte
index|[]
name|eol
parameter_list|)
block|{
name|myEOL
operator|=
name|eol
expr_stmt|;
block|}
comment|/**      * Returns the EOL marker bytes being in use.      * If no EOL bytes were provided, uses {@link ISVNOptions#getNativeEOL() native EOL} fetched from       * the options.      *       * @return EOL bytes       */
specifier|public
name|byte
index|[]
name|getEOL
parameter_list|()
block|{
if|if
condition|(
name|myEOL
operator|==
literal|null
condition|)
block|{
name|myEOL
operator|=
name|getOptions
argument_list|()
operator|.
name|getNativeEOL
argument_list|()
expr_stmt|;
block|}
return|return
name|myEOL
return|;
block|}
comment|/**      * Creates a temporary directory for diff files.      *       * @return                returns the temp directory       * @throws SVNException       */
specifier|public
name|File
name|createTempDirectory
parameter_list|()
throws|throws
name|SVNException
block|{
return|return
name|SVNFileUtil
operator|.
name|createTempDirectory
argument_list|(
literal|"diff"
argument_list|)
return|;
block|}
comment|/**      * Says if unversioned files are also diffed or ignored.      *       *<p>      * By default unversioned files are ignored.       *       * @return<span class="javakeyword">true</span> if diffed,       *<span class="javakeyword">false</span> if ignored        * @see    #setDiffUnversioned(boolean)      *       */
specifier|public
name|boolean
name|isDiffUnversioned
parameter_list|()
block|{
return|return
name|myIsDiffUnversioned
return|;
block|}
comment|/**      * Includes or not unversioned files into diff processing.       *       *<p>      * If a diff operation is invoked on  a versioned directory and       *<code>diffUnversioned</code> is<span class="javakeyword">true</span>       * then all unversioned files that may be met in the directory will       * be processed as added. Otherwise if<code>diffUnversioned</code>       * is<span class="javakeyword">false</span> such files are ignored.       *       *<p>      * By default unversioned files are ignored.      *       * @param diffUnversioned controls whether to diff unversioned files       *                        or not       * @see                   #isDiffUnversioned()      */
specifier|public
name|void
name|setDiffUnversioned
parameter_list|(
name|boolean
name|diffUnversioned
parameter_list|)
block|{
name|myIsDiffUnversioned
operator|=
name|diffUnversioned
expr_stmt|;
block|}
comment|/**      * Does nothing.      *       * @param  path           a directory path      * @param  rev1           the first diff revision      * @param  rev2           the second diff revision      * @throws SVNException         */
specifier|public
name|void
name|displayDeletedDirectory
parameter_list|(
name|String
name|path
parameter_list|,
name|String
name|rev1
parameter_list|,
name|String
name|rev2
parameter_list|)
throws|throws
name|SVNException
block|{
comment|// not implemented.
block|}
comment|/**      * Does nothing.      *       * @param  path           a directory path      * @param  rev1           the first diff revision      * @param  rev2           the second diff revision      * @throws SVNException      */
specifier|public
name|void
name|displayAddedDirectory
parameter_list|(
name|String
name|path
parameter_list|,
name|String
name|rev1
parameter_list|,
name|String
name|rev2
parameter_list|)
throws|throws
name|SVNException
block|{
comment|// not implemented.
block|}
specifier|protected
name|String
name|getExternalDiffCommand
parameter_list|()
block|{
if|if
condition|(
name|myDiffCommand
operator|!=
literal|null
condition|)
block|{
return|return
name|myDiffCommand
return|;
block|}
if|if
condition|(
name|myOptions
operator|instanceof
name|DefaultSVNOptions
condition|)
block|{
return|return
operator|(
operator|(
name|DefaultSVNOptions
operator|)
name|myOptions
operator|)
operator|.
name|getDiffCommand
argument_list|()
return|;
block|}
return|return
literal|null
return|;
block|}
specifier|protected
name|ISVNOptions
name|getOptions
parameter_list|()
block|{
if|if
condition|(
name|myOptions
operator|==
literal|null
condition|)
block|{
name|myOptions
operator|=
operator|new
name|DefaultSVNOptions
argument_list|()
expr_stmt|;
block|}
return|return
name|myOptions
return|;
block|}
specifier|protected
name|void
name|displayBinary
parameter_list|(
name|OutputStream
name|os
parameter_list|,
name|String
name|mimeType1
parameter_list|,
name|String
name|mimeType2
parameter_list|)
throws|throws
name|IOException
block|{
name|os
operator|.
name|write
argument_list|(
literal|"Cannot display: file marked as a binary type."
operator|.
name|getBytes
argument_list|(
name|getEncoding
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|os
operator|.
name|write
argument_list|(
name|getEOL
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|SVNProperty
operator|.
name|isBinaryMimeType
argument_list|(
name|mimeType1
argument_list|)
operator|&&
operator|!
name|SVNProperty
operator|.
name|isBinaryMimeType
argument_list|(
name|mimeType2
argument_list|)
condition|)
block|{
name|os
operator|.
name|write
argument_list|(
literal|"svn:mime-type = "
operator|.
name|getBytes
argument_list|(
name|getEncoding
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|os
operator|.
name|write
argument_list|(
name|mimeType1
operator|.
name|getBytes
argument_list|(
name|getEncoding
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|os
operator|.
name|write
argument_list|(
name|getEOL
argument_list|()
argument_list|)
expr_stmt|;
block|}
if|else if
condition|(
operator|!
name|SVNProperty
operator|.
name|isBinaryMimeType
argument_list|(
name|mimeType1
argument_list|)
operator|&&
name|SVNProperty
operator|.
name|isBinaryMimeType
argument_list|(
name|mimeType2
argument_list|)
condition|)
block|{
name|os
operator|.
name|write
argument_list|(
literal|"svn:mime-type = "
operator|.
name|getBytes
argument_list|(
name|getEncoding
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|os
operator|.
name|write
argument_list|(
name|mimeType2
operator|.
name|getBytes
argument_list|(
name|getEncoding
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|os
operator|.
name|write
argument_list|(
name|getEOL
argument_list|()
argument_list|)
expr_stmt|;
block|}
if|else if
condition|(
name|SVNProperty
operator|.
name|isBinaryMimeType
argument_list|(
name|mimeType1
argument_list|)
operator|&&
name|SVNProperty
operator|.
name|isBinaryMimeType
argument_list|(
name|mimeType2
argument_list|)
condition|)
block|{
if|if
condition|(
name|mimeType1
operator|.
name|equals
argument_list|(
name|mimeType2
argument_list|)
condition|)
block|{
name|os
operator|.
name|write
argument_list|(
literal|"svn:mime-type = "
operator|.
name|getBytes
argument_list|(
name|getEncoding
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|os
operator|.
name|write
argument_list|(
name|mimeType2
operator|.
name|getBytes
argument_list|(
name|getEncoding
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|os
operator|.
name|write
argument_list|(
name|getEOL
argument_list|()
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|os
operator|.
name|write
argument_list|(
literal|"svn:mime-type = ("
operator|.
name|getBytes
argument_list|(
name|getEncoding
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|os
operator|.
name|write
argument_list|(
name|mimeType1
operator|.
name|getBytes
argument_list|(
name|getEncoding
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|os
operator|.
name|write
argument_list|(
literal|", "
operator|.
name|getBytes
argument_list|(
name|getEncoding
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|os
operator|.
name|write
argument_list|(
name|mimeType2
operator|.
name|getBytes
argument_list|(
name|getEncoding
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|os
operator|.
name|write
argument_list|(
literal|")"
operator|.
name|getBytes
argument_list|(
name|getEncoding
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|os
operator|.
name|write
argument_list|(
name|getEOL
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
block|}
specifier|protected
name|boolean
name|displayHeader
parameter_list|(
name|OutputStream
name|os
parameter_list|,
name|String
name|path
parameter_list|,
name|boolean
name|deleted
parameter_list|)
throws|throws
name|IOException
block|{
if|if
condition|(
name|deleted
operator|&&
operator|!
name|isDiffDeleted
argument_list|()
condition|)
block|{
name|os
operator|.
name|write
argument_list|(
literal|"Index: "
operator|.
name|getBytes
argument_list|(
name|getEncoding
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|os
operator|.
name|write
argument_list|(
name|path
operator|.
name|getBytes
argument_list|(
name|getEncoding
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|os
operator|.
name|write
argument_list|(
literal|" (deleted)"
operator|.
name|getBytes
argument_list|(
name|getEncoding
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|os
operator|.
name|write
argument_list|(
name|getEOL
argument_list|()
argument_list|)
expr_stmt|;
name|os
operator|.
name|write
argument_list|(
name|HEADER_SEPARATOR
argument_list|)
expr_stmt|;
name|os
operator|.
name|write
argument_list|(
name|getEOL
argument_list|()
argument_list|)
expr_stmt|;
return|return
literal|true
return|;
block|}
name|os
operator|.
name|write
argument_list|(
literal|"Index: "
operator|.
name|getBytes
argument_list|(
name|getEncoding
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|os
operator|.
name|write
argument_list|(
name|path
operator|.
name|getBytes
argument_list|(
name|getEncoding
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|os
operator|.
name|write
argument_list|(
name|getEOL
argument_list|()
argument_list|)
expr_stmt|;
name|os
operator|.
name|write
argument_list|(
name|HEADER_SEPARATOR
argument_list|)
expr_stmt|;
name|os
operator|.
name|write
argument_list|(
name|getEOL
argument_list|()
argument_list|)
expr_stmt|;
return|return
literal|false
return|;
block|}
specifier|protected
name|void
name|displayHeaderFields
parameter_list|(
name|OutputStream
name|os
parameter_list|,
name|String
name|label1
parameter_list|,
name|String
name|label2
parameter_list|)
throws|throws
name|IOException
block|{
name|os
operator|.
name|write
argument_list|(
literal|"--- "
operator|.
name|getBytes
argument_list|(
name|getEncoding
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|os
operator|.
name|write
argument_list|(
name|label1
operator|.
name|getBytes
argument_list|(
name|getEncoding
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|os
operator|.
name|write
argument_list|(
name|getEOL
argument_list|()
argument_list|)
expr_stmt|;
name|os
operator|.
name|write
argument_list|(
literal|"+++ "
operator|.
name|getBytes
argument_list|(
name|getEncoding
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|os
operator|.
name|write
argument_list|(
name|label2
operator|.
name|getBytes
argument_list|(
name|getEncoding
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|os
operator|.
name|write
argument_list|(
name|getEOL
argument_list|()
argument_list|)
expr_stmt|;
block|}
specifier|protected
name|boolean
name|isHeaderForced
parameter_list|(
name|File
name|file1
parameter_list|,
name|File
name|file2
parameter_list|)
block|{
return|return
operator|(
name|file1
operator|==
literal|null
operator|&&
name|file2
operator|!=
literal|null
operator|)
return|;
block|}
specifier|protected
name|boolean
name|useLocalFileSeparatorChar
parameter_list|()
block|{
return|return
literal|true
return|;
block|}
specifier|protected
name|String
name|getLabel
parameter_list|(
name|String
name|path
parameter_list|,
name|String
name|revToken
parameter_list|)
block|{
name|revToken
operator|=
name|revToken
operator|==
literal|null
condition|?
name|WC_REVISION_LABEL
else|:
name|revToken
expr_stmt|;
return|return
name|path
operator|+
literal|"\t"
operator|+
name|revToken
return|;
block|}
specifier|private
name|void
name|displayMergeInfoDiff
parameter_list|(
name|ByteArrayOutputStream
name|baos
parameter_list|,
name|String
name|oldValue
parameter_list|,
name|String
name|newValue
parameter_list|)
throws|throws
name|SVNException
throws|,
name|IOException
block|{
name|Map
name|oldMergeInfo
init|=
literal|null
decl_stmt|;
name|Map
name|newMergeInfo
init|=
literal|null
decl_stmt|;
if|if
condition|(
name|oldValue
operator|!=
literal|null
condition|)
block|{
name|oldMergeInfo
operator|=
name|SVNMergeInfoUtil
operator|.
name|parseMergeInfo
argument_list|(
operator|new
name|StringBuffer
argument_list|(
name|oldValue
argument_list|)
argument_list|,
literal|null
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|newValue
operator|!=
literal|null
condition|)
block|{
name|newMergeInfo
operator|=
name|SVNMergeInfoUtil
operator|.
name|parseMergeInfo
argument_list|(
operator|new
name|StringBuffer
argument_list|(
name|newValue
argument_list|)
argument_list|,
literal|null
argument_list|)
expr_stmt|;
block|}
name|Map
name|deleted
init|=
operator|new
name|TreeMap
argument_list|()
decl_stmt|;
name|Map
name|added
init|=
operator|new
name|TreeMap
argument_list|()
decl_stmt|;
name|SVNMergeInfoUtil
operator|.
name|diffMergeInfo
argument_list|(
name|deleted
argument_list|,
name|added
argument_list|,
name|oldMergeInfo
argument_list|,
name|newMergeInfo
argument_list|,
literal|true
argument_list|)
expr_stmt|;
for|for
control|(
name|Iterator
name|paths
init|=
name|deleted
operator|.
name|keySet
argument_list|()
operator|.
name|iterator
argument_list|()
init|;
name|paths
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|String
name|path
init|=
operator|(
name|String
operator|)
name|paths
operator|.
name|next
argument_list|()
decl_stmt|;
name|SVNMergeRangeList
name|rangeList
init|=
operator|(
name|SVNMergeRangeList
operator|)
name|deleted
operator|.
name|get
argument_list|(
name|path
argument_list|)
decl_stmt|;
name|baos
operator|.
name|write
argument_list|(
operator|(
literal|"   Reverse-merged "
operator|+
name|path
operator|+
literal|":r"
operator|)
operator|.
name|getBytes
argument_list|(
name|getEncoding
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|baos
operator|.
name|write
argument_list|(
name|rangeList
operator|.
name|toString
argument_list|()
operator|.
name|getBytes
argument_list|(
name|getEncoding
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|baos
operator|.
name|write
argument_list|(
name|getEOL
argument_list|()
argument_list|)
expr_stmt|;
block|}
for|for
control|(
name|Iterator
name|paths
init|=
name|added
operator|.
name|keySet
argument_list|()
operator|.
name|iterator
argument_list|()
init|;
name|paths
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|String
name|path
init|=
operator|(
name|String
operator|)
name|paths
operator|.
name|next
argument_list|()
decl_stmt|;
name|SVNMergeRangeList
name|rangeList
init|=
operator|(
name|SVNMergeRangeList
operator|)
name|added
operator|.
name|get
argument_list|(
name|path
argument_list|)
decl_stmt|;
name|baos
operator|.
name|write
argument_list|(
operator|(
literal|"   Merged "
operator|+
name|path
operator|+
literal|":r"
operator|)
operator|.
name|getBytes
argument_list|(
name|getEncoding
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|baos
operator|.
name|write
argument_list|(
name|rangeList
operator|.
name|toString
argument_list|()
operator|.
name|getBytes
argument_list|(
name|getEncoding
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|baos
operator|.
name|write
argument_list|(
name|getEOL
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
specifier|private
name|void
name|createBadRelativePathError
parameter_list|(
name|String
name|path
parameter_list|)
throws|throws
name|SVNException
block|{
name|SVNErrorMessage
name|err
init|=
name|SVNErrorMessage
operator|.
name|create
argument_list|(
name|SVNErrorCode
operator|.
name|BAD_RELATIVE_PATH
argument_list|,
literal|"Path ''{0}'' must be an immediate child of the directory ''{1}''"
argument_list|,
operator|new
name|Object
index|[]
block|{
name|path
block|,
name|myBasePath
block|}
argument_list|)
decl_stmt|;
name|SVNErrorManager
operator|.
name|error
argument_list|(
name|err
argument_list|,
name|SVNLogType
operator|.
name|DEFAULT
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

