begin_unit|revision:1.0.0;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * ====================================================================  * Copyright (c) 2004-2010 TMate Software Ltd.  All rights reserved.  *  * This software is licensed as described in the file COPYING, which  * you should have received as part of this distribution.  The terms  * are also available at http://svnkit.com/license.html.  * If newer versions of this license are posted there, you may use a  * newer version instead, at your option.  * ====================================================================  */
end_comment

begin_package
package|package
name|org
operator|.
name|exist
operator|.
name|versioning
operator|.
name|svn
operator|.
name|wc
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|File
import|;
end_import

begin_import
import|import
name|org
operator|.
name|tmatesoft
operator|.
name|svn
operator|.
name|core
operator|.
name|SVNNodeKind
import|;
end_import

begin_comment
comment|/**  * The<b>SVNConflictDescription</b> represents an object that describes a conflict that has occurred in the  * working copy. It's passed to {@link ISVNConflictHandler#handleConflict(SVNConflictDescription)}.  *   * @version 1.3  * @author  TMate Software Ltd.  * @since   1.2  */
end_comment

begin_class
specifier|public
specifier|abstract
class|class
name|SVNConflictDescription
block|{
specifier|private
name|SVNMergeFileSet
name|myMergeFiles
decl_stmt|;
specifier|private
name|SVNNodeKind
name|myNodeKind
decl_stmt|;
specifier|private
name|SVNConflictAction
name|myConflictAction
decl_stmt|;
specifier|private
name|SVNConflictReason
name|myConflictReason
decl_stmt|;
comment|/**      * Creates a new<code>SVNConflictDescription</code> object.      *       *<p/>      *<code>propertyName</code> is relevant only for property conflicts (i.e. in case       *<code>isPropertyConflict</code> is<span class="javakeyword">true</span>).      *       * @param mergeFiles            files involved in the merge       * @param nodeKind              node kind of the item which the conflict occurred on                 *                              conflict; otherwise<span class="javakeyword">false</span>       * @param conflictAction        action which lead to the conflict      * @param conflictReason        why the conflict ever occurred      */
specifier|public
name|SVNConflictDescription
parameter_list|(
name|SVNMergeFileSet
name|mergeFiles
parameter_list|,
name|SVNNodeKind
name|nodeKind
parameter_list|,
name|SVNConflictAction
name|conflictAction
parameter_list|,
name|SVNConflictReason
name|conflictReason
parameter_list|)
block|{
name|myMergeFiles
operator|=
name|mergeFiles
expr_stmt|;
name|myNodeKind
operator|=
name|nodeKind
expr_stmt|;
name|myConflictAction
operator|=
name|conflictAction
expr_stmt|;
name|myConflictReason
operator|=
name|conflictReason
expr_stmt|;
block|}
comment|/**      * Says whether this object represents a text conflict.      *       * @return<span class="javakeyword">true</span> if it's a text conflict;      *         otherwise<span class="javakeyword">false</span>      * @since  1.3      */
specifier|public
specifier|abstract
name|boolean
name|isTextConflict
parameter_list|()
function_decl|;
comment|/**      * Tells whether it's a property merge conflict or not.      *       * @return<span class="javakeyword">true</span> if the conflict occurred while modifying a property;      *         otherwise<span class="javakeyword">false</span>      * @since  1.3       */
specifier|public
specifier|abstract
name|boolean
name|isPropertyConflict
parameter_list|()
function_decl|;
comment|/**      * Says whether this object represents a tree conflict.      *       * @return<span class="javakeyword">true</span> if it's a tree conflict;      *         otherwise<span class="javakeyword">false</span>      * @since  1.3      */
specifier|public
specifier|abstract
name|boolean
name|isTreeConflict
parameter_list|()
function_decl|;
comment|/**      * Returns the working copy path which resulted in a conflict.      *       * @return   working copy path      * @since    1.3      */
specifier|public
name|File
name|getPath
parameter_list|()
block|{
return|return
name|getMergeFiles
argument_list|()
operator|.
name|getWCFile
argument_list|()
return|;
block|}
comment|/**      * Returns information about files involved in the merge.      * @return merge file set       */
specifier|public
name|SVNMergeFileSet
name|getMergeFiles
parameter_list|()
block|{
return|return
name|myMergeFiles
return|;
block|}
comment|/**      * Returns the action which attempted on an object and which lead to the conflict.      * @return  conflicted action        */
specifier|public
name|SVNConflictAction
name|getConflictAction
parameter_list|()
block|{
return|return
name|myConflictAction
return|;
block|}
comment|/**      * Returns the reason why the conflict occurred.      * @return reason of the conflict       */
specifier|public
name|SVNConflictReason
name|getConflictReason
parameter_list|()
block|{
return|return
name|myConflictReason
return|;
block|}
comment|/**      * Returns the node kind of the item which the conflict occurred on.      * @return node kind       */
specifier|public
name|SVNNodeKind
name|getNodeKind
parameter_list|()
block|{
return|return
name|myNodeKind
return|;
block|}
comment|/**      * Returns the name of the property on which the conflict occurred.      *       *<p/>      * Note: relevant only in case of a {@link #isPropertyConflict() property conflict}.        *       * @return conflicted property name       */
specifier|public
specifier|abstract
name|String
name|getPropertyName
parameter_list|()
function_decl|;
specifier|public
name|String
name|toString
parameter_list|()
block|{
specifier|final
name|StringBuffer
name|buffer
init|=
operator|new
name|StringBuffer
argument_list|()
decl_stmt|;
name|buffer
operator|.
name|append
argument_list|(
literal|"[Conflict descriptor: merge files = "
argument_list|)
expr_stmt|;
name|buffer
operator|.
name|append
argument_list|(
name|getMergeFiles
argument_list|()
argument_list|)
expr_stmt|;
name|buffer
operator|.
name|append
argument_list|(
literal|"; kind = "
argument_list|)
expr_stmt|;
name|buffer
operator|.
name|append
argument_list|(
name|getNodeKind
argument_list|()
argument_list|)
expr_stmt|;
name|buffer
operator|.
name|append
argument_list|(
literal|"; reason = "
argument_list|)
expr_stmt|;
name|buffer
operator|.
name|append
argument_list|(
name|getConflictReason
argument_list|()
argument_list|)
expr_stmt|;
name|buffer
operator|.
name|append
argument_list|(
literal|"; action = "
argument_list|)
expr_stmt|;
name|buffer
operator|.
name|append
argument_list|(
name|getConflictAction
argument_list|()
argument_list|)
expr_stmt|;
name|buffer
operator|.
name|append
argument_list|(
literal|"; property conflicts = "
argument_list|)
expr_stmt|;
name|buffer
operator|.
name|append
argument_list|(
name|isPropertyConflict
argument_list|()
argument_list|)
expr_stmt|;
name|buffer
operator|.
name|append
argument_list|(
literal|"; property name = "
argument_list|)
expr_stmt|;
name|buffer
operator|.
name|append
argument_list|(
name|getPropertyName
argument_list|()
argument_list|)
expr_stmt|;
name|buffer
operator|.
name|append
argument_list|(
literal|"]"
argument_list|)
expr_stmt|;
return|return
name|buffer
operator|.
name|toString
argument_list|()
return|;
block|}
block|}
end_class

end_unit

