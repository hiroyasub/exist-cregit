begin_unit|revision:1.0.0;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * ====================================================================  * Copyright (c) 2004-2010 TMate Software Ltd.  All rights reserved.  *  * This software is licensed as described in the file COPYING, which  * you should have received as part of this distribution.  The terms  * are also available at http://svnkit.com/license.html  * If newer versions of this license are posted there, you may use a  * newer version instead, at your option.  * ====================================================================  */
end_comment

begin_package
package|package
name|org
operator|.
name|exist
operator|.
name|versioning
operator|.
name|svn
operator|.
name|wc
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|File
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|InputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collection
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collections
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Iterator
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|LinkedList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|TreeMap
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|versioning
operator|.
name|svn
operator|.
name|internal
operator|.
name|wc
operator|.
name|SVNCommitMediator
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|versioning
operator|.
name|svn
operator|.
name|internal
operator|.
name|wc
operator|.
name|SVNCommitUtil
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|versioning
operator|.
name|svn
operator|.
name|internal
operator|.
name|wc
operator|.
name|SVNCommitter
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|versioning
operator|.
name|svn
operator|.
name|internal
operator|.
name|wc
operator|.
name|SVNErrorManager
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|versioning
operator|.
name|svn
operator|.
name|internal
operator|.
name|wc
operator|.
name|SVNEventFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|versioning
operator|.
name|svn
operator|.
name|internal
operator|.
name|wc
operator|.
name|SVNFileListUtil
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|versioning
operator|.
name|svn
operator|.
name|internal
operator|.
name|wc
operator|.
name|SVNFileType
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|versioning
operator|.
name|svn
operator|.
name|internal
operator|.
name|wc
operator|.
name|SVNFileUtil
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|versioning
operator|.
name|svn
operator|.
name|internal
operator|.
name|wc
operator|.
name|SVNImportMediator
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|versioning
operator|.
name|svn
operator|.
name|internal
operator|.
name|wc
operator|.
name|SVNPropertiesManager
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|versioning
operator|.
name|svn
operator|.
name|internal
operator|.
name|wc
operator|.
name|SVNStatusEditor
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|versioning
operator|.
name|svn
operator|.
name|internal
operator|.
name|wc
operator|.
name|admin
operator|.
name|SVNAdminArea
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|versioning
operator|.
name|svn
operator|.
name|internal
operator|.
name|wc
operator|.
name|admin
operator|.
name|SVNEntry
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|versioning
operator|.
name|svn
operator|.
name|internal
operator|.
name|wc
operator|.
name|admin
operator|.
name|SVNTranslator
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|versioning
operator|.
name|svn
operator|.
name|internal
operator|.
name|wc
operator|.
name|admin
operator|.
name|SVNWCAccess
import|;
end_import

begin_import
import|import
name|org
operator|.
name|tmatesoft
operator|.
name|svn
operator|.
name|core
operator|.
name|SVNCancelException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|tmatesoft
operator|.
name|svn
operator|.
name|core
operator|.
name|SVNCommitInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|tmatesoft
operator|.
name|svn
operator|.
name|core
operator|.
name|SVNDepth
import|;
end_import

begin_import
import|import
name|org
operator|.
name|tmatesoft
operator|.
name|svn
operator|.
name|core
operator|.
name|SVNErrorCode
import|;
end_import

begin_import
import|import
name|org
operator|.
name|tmatesoft
operator|.
name|svn
operator|.
name|core
operator|.
name|SVNErrorMessage
import|;
end_import

begin_import
import|import
name|org
operator|.
name|tmatesoft
operator|.
name|svn
operator|.
name|core
operator|.
name|SVNException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|tmatesoft
operator|.
name|svn
operator|.
name|core
operator|.
name|SVNNodeKind
import|;
end_import

begin_import
import|import
name|org
operator|.
name|tmatesoft
operator|.
name|svn
operator|.
name|core
operator|.
name|SVNProperties
import|;
end_import

begin_import
import|import
name|org
operator|.
name|tmatesoft
operator|.
name|svn
operator|.
name|core
operator|.
name|SVNProperty
import|;
end_import

begin_import
import|import
name|org
operator|.
name|tmatesoft
operator|.
name|svn
operator|.
name|core
operator|.
name|SVNPropertyValue
import|;
end_import

begin_import
import|import
name|org
operator|.
name|tmatesoft
operator|.
name|svn
operator|.
name|core
operator|.
name|SVNURL
import|;
end_import

begin_import
import|import
name|org
operator|.
name|tmatesoft
operator|.
name|svn
operator|.
name|core
operator|.
name|auth
operator|.
name|ISVNAuthenticationManager
import|;
end_import

begin_import
import|import
name|org
operator|.
name|tmatesoft
operator|.
name|svn
operator|.
name|core
operator|.
name|internal
operator|.
name|util
operator|.
name|SVNEncodingUtil
import|;
end_import

begin_import
import|import
name|org
operator|.
name|tmatesoft
operator|.
name|svn
operator|.
name|core
operator|.
name|internal
operator|.
name|util
operator|.
name|SVNHashMap
import|;
end_import

begin_import
import|import
name|org
operator|.
name|tmatesoft
operator|.
name|svn
operator|.
name|core
operator|.
name|internal
operator|.
name|util
operator|.
name|SVNHashSet
import|;
end_import

begin_import
import|import
name|org
operator|.
name|tmatesoft
operator|.
name|svn
operator|.
name|core
operator|.
name|internal
operator|.
name|util
operator|.
name|SVNPathUtil
import|;
end_import

begin_import
import|import
name|org
operator|.
name|tmatesoft
operator|.
name|svn
operator|.
name|core
operator|.
name|internal
operator|.
name|util
operator|.
name|SVNURLUtil
import|;
end_import

begin_import
import|import
name|org
operator|.
name|tmatesoft
operator|.
name|svn
operator|.
name|core
operator|.
name|internal
operator|.
name|wc
operator|.
name|ISVNCommitPathHandler
import|;
end_import

begin_import
import|import
name|org
operator|.
name|tmatesoft
operator|.
name|svn
operator|.
name|core
operator|.
name|io
operator|.
name|ISVNEditor
import|;
end_import

begin_import
import|import
name|org
operator|.
name|tmatesoft
operator|.
name|svn
operator|.
name|core
operator|.
name|io
operator|.
name|SVNRepository
import|;
end_import

begin_import
import|import
name|org
operator|.
name|tmatesoft
operator|.
name|svn
operator|.
name|core
operator|.
name|io
operator|.
name|diff
operator|.
name|SVNDeltaGenerator
import|;
end_import

begin_import
import|import
name|org
operator|.
name|tmatesoft
operator|.
name|svn
operator|.
name|core
operator|.
name|wc
operator|.
name|ISVNCommitParameters
import|;
end_import

begin_import
import|import
name|org
operator|.
name|tmatesoft
operator|.
name|svn
operator|.
name|core
operator|.
name|wc
operator|.
name|ISVNFileFilter
import|;
end_import

begin_import
import|import
name|org
operator|.
name|tmatesoft
operator|.
name|svn
operator|.
name|core
operator|.
name|wc
operator|.
name|ISVNRepositoryPool
import|;
end_import

begin_import
import|import
name|org
operator|.
name|tmatesoft
operator|.
name|svn
operator|.
name|core
operator|.
name|wc
operator|.
name|SVNRevision
import|;
end_import

begin_import
import|import
name|org
operator|.
name|tmatesoft
operator|.
name|svn
operator|.
name|util
operator|.
name|SVNLogType
import|;
end_import

begin_comment
comment|/**  * The<b>SVNCommitClient</b> class provides methods to perform operations that relate to   * committing changes to an SVN repository. These operations are similar to   * respective commands of the native SVN command line client   * and include ones which operate on working copy items as well as ones  * that operate only on a repository.  *   *<p>  * Here's a list of the<b>SVNCommitClient</b>'s commit-related methods   * matched against corresponing commands of the SVN command line   * client:  *   *<table cellpadding="3" cellspacing="1" border="0" width="40%" bgcolor="#999933">  *<tr bgcolor="#ADB8D9" align="left">  *<td><b>SVNKit</b></td>  *<td><b>Subversion</b></td>  *</tr>     *<tr bgcolor="#EAEAEA" align="left">  *<td>doCommit()</td><td>'svn commit'</td>  *</tr>  *<tr bgcolor="#EAEAEA" align="left">  *<td>doImport()</td><td>'svn import'</td>  *</tr>  *<tr bgcolor="#EAEAEA" align="left">  *<td>doDelete()</td><td>'svn delete URL'</td>  *</tr>  *<tr bgcolor="#EAEAEA" align="left">  *<td>doMkDir()</td><td>'svn mkdir URL'</td>  *</tr>  *</table>  *     * @version 1.3  * @author  TMate Software Ltd.  * @since   1.2  * @see<a target="_top" href="http://svnkit.com/kb/examples/">Examples</a>  */
end_comment

begin_class
specifier|public
class|class
name|SVNCommitClient
extends|extends
name|SVNBasicClient
block|{
specifier|private
name|ISVNCommitHandler
name|myCommitHandler
decl_stmt|;
specifier|private
name|ISVNCommitParameters
name|myCommitParameters
decl_stmt|;
comment|/**      * Constructs and initializes an<b>SVNCommitClient</b> object      * with the specified run-time configuration and authentication       * drivers.      *       *<p>      * If<code>options</code> is<span class="javakeyword">null</span>,      * then this<b>SVNCommitClient</b> will be using a default run-time      * configuration driver  which takes client-side settings from the       * default SVN's run-time configuration area but is not able to      * change those settings (read more on {@link ISVNOptions} and {@link SVNWCUtil}).        *       *<p>      * If<code>authManager</code> is<span class="javakeyword">null</span>,      * then this<b>SVNCommitClient</b> will be using a default authentication      * and network layers driver (see {@link SVNWCUtil#createDefaultAuthenticationManager()})      * which uses server-side settings and auth storage from the       * default SVN's run-time configuration area (or system properties      * if that area is not found).      *       * @param authManager an authentication and network layers driver      * @param options     a run-time configuration options driver           */
specifier|public
name|SVNCommitClient
parameter_list|(
name|ISVNAuthenticationManager
name|authManager
parameter_list|,
name|ISVNOptions
name|options
parameter_list|)
block|{
name|super
argument_list|(
name|authManager
argument_list|,
name|options
argument_list|)
expr_stmt|;
block|}
comment|/**      * Constructs and initializes an<b>SVNCommitClient</b> object      * with the specified run-time configuration and repository pool object.      *       *<p/>      * If<code>options</code> is<span class="javakeyword">null</span>,      * then this<b>SVNCommitClient</b> will be using a default run-time      * configuration driver  which takes client-side settings from the      * default SVN's run-time configuration area but is not able to      * change those settings (read more on {@link ISVNOptions} and {@link SVNWCUtil}).      *       *<p/>      * If<code>repositoryPool</code> is<span class="javakeyword">null</span>,      * then {@link org.tmatesoft.svn.core.io.SVNRepositoryFactory} will be used to create {@link SVNRepository repository access objects}.      *      * @param repositoryPool   a repository pool object      * @param options          a run-time configuration options driver      */
specifier|public
name|SVNCommitClient
parameter_list|(
name|ISVNRepositoryPool
name|repositoryPool
parameter_list|,
name|ISVNOptions
name|options
parameter_list|)
block|{
name|super
argument_list|(
name|repositoryPool
argument_list|,
name|options
argument_list|)
expr_stmt|;
block|}
comment|/**      * @param handler      * @deprecated use {@link #setCommitHandler(ISVNCommitHandler)} instead      */
specifier|public
name|void
name|setCommitHander
parameter_list|(
name|ISVNCommitHandler
name|handler
parameter_list|)
block|{
name|myCommitHandler
operator|=
name|handler
expr_stmt|;
block|}
comment|/**      * Sets an implementation of<b>ISVNCommitHandler</b> to       * the commit handler that will be used during commit operations to handle       * commit log messages. The handler will receive a clien's log message and items       * (represented as<b>SVNCommitItem</b> objects) that will be       * committed. Depending on implementor's aims the initial log message can      * be modified (or something else) and returned back.       *       *<p>      * If using<b>SVNCommitClient</b> without specifying any      * commit handler then a default one will be used - {@link DefaultSVNCommitHandler}.      *       * @param handler				an implementor's handler that will be used to handle       * 								commit log messages      * @see	  #getCommitHandler()      * @see	  ISVNCommitHandler      */
specifier|public
name|void
name|setCommitHandler
parameter_list|(
name|ISVNCommitHandler
name|handler
parameter_list|)
block|{
name|myCommitHandler
operator|=
name|handler
expr_stmt|;
block|}
comment|/**      * Returns the specified commit handler (if set) being in use or a default one       * (<b>DefaultSVNCommitHandler</b>) if no special       * implementations of<b>ISVNCommitHandler</b> were       * previously provided.      *         * @return	the commit handler being in use or a default one      * @see	    #setCommitHander(ISVNCommitHandler)      * @see		ISVNCommitHandler      * @see		DefaultSVNCommitHandler       */
specifier|public
name|ISVNCommitHandler
name|getCommitHandler
parameter_list|()
block|{
if|if
condition|(
name|myCommitHandler
operator|==
literal|null
condition|)
block|{
name|myCommitHandler
operator|=
operator|new
name|DefaultSVNCommitHandler
argument_list|()
expr_stmt|;
block|}
return|return
name|myCommitHandler
return|;
block|}
comment|/**      * Sets commit parameters to use.      *       *<p>      * When no parameters are set {@link DefaultSVNCommitParameters default}       * ones are used.       *       * @param parameters commit parameters      * @see              #getCommitParameters()      */
specifier|public
name|void
name|setCommitParameters
parameter_list|(
name|ISVNCommitParameters
name|parameters
parameter_list|)
block|{
name|myCommitParameters
operator|=
name|parameters
expr_stmt|;
block|}
comment|/**      * Returns commit parameters.       *       *<p>      * If no user parameters were previously specified, once creates and       * returns {@link DefaultSVNCommitParameters default} ones.       *       * @return commit parameters      * @see    #setCommitParameters(ISVNCommitParameters)      */
specifier|public
name|ISVNCommitParameters
name|getCommitParameters
parameter_list|()
block|{
if|if
condition|(
name|myCommitParameters
operator|==
literal|null
condition|)
block|{
name|myCommitParameters
operator|=
operator|new
name|DefaultSVNCommitParameters
argument_list|()
expr_stmt|;
block|}
return|return
name|myCommitParameters
return|;
block|}
comment|/**      * Committs removing specified URL-paths from the repository.      * This call is equivalent to<code>doDelete(urls, commitMessage, null)</code>.       *         * @param  urls				an array containing URL-strings that represent      * 							repository locations to be removed      * @param  commitMessage	a string to be a commit log message      * @return					information on a new revision as the result      * 							of the commit      * @throws SVNException     if one of the following is true:      *<ul>      *<li>a URL does not exist      *<li>probably some of URLs refer to different      *                          repositories      *</ul>      * @see                     #doDelete(SVNURL[], String, SVNProperties)      */
specifier|public
name|SVNCommitInfo
name|doDelete
parameter_list|(
name|SVNURL
index|[]
name|urls
parameter_list|,
name|String
name|commitMessage
parameter_list|)
throws|throws
name|SVNException
block|{
return|return
name|doDelete
argument_list|(
name|urls
argument_list|,
name|commitMessage
argument_list|,
literal|null
argument_list|)
return|;
block|}
comment|/**       * Deletes items from a repository.      *       *<p/>      * If non-<span class="javakeyword">null</span>,<code>revisionProperties</code> holds additional, custom       * revision properties (<code>String</code> names mapped to {@link SVNPropertyValue} values) to be set on       * the new revision. This table cannot contain any standard Subversion properties.      *      *<p/>      * {@link #getCommitHandler() Commit handler} will be asked for a commit log message.      *      *<p/>      * If the caller's {@link ISVNEventHandler event handler} is not<span class="javakeyword">null</span> and       * if the commit succeeds, the handler will be called with {@link SVNEventAction#COMMIT_COMPLETED} event       * action.      *       * @param  urls                  repository urls to delete       * @param  commitMessage         commit log message      * @param  revisionProperties    custom revision properties       * @return                       information about the new committed revision          * @throws SVNException          in the following cases:      *<ul>      *<li/>exception with {@link SVNErrorCode#RA_ILLEGAL_URL} error code - if       *                               cannot compute common root url for<code>urls</code>      *<li/>exception with {@link SVNErrorCode#FS_NOT_FOUND} error code - if       *                               some of<code>urls</code> does not exist      *</ul>      * @since                        1.2.0, SVN 1.5.0      */
specifier|public
name|SVNCommitInfo
name|doDelete
parameter_list|(
name|SVNURL
index|[]
name|urls
parameter_list|,
name|String
name|commitMessage
parameter_list|,
name|SVNProperties
name|revisionProperties
parameter_list|)
throws|throws
name|SVNException
block|{
if|if
condition|(
name|urls
operator|==
literal|null
operator|||
name|urls
operator|.
name|length
operator|==
literal|0
condition|)
block|{
return|return
name|SVNCommitInfo
operator|.
name|NULL
return|;
block|}
name|List
name|paths
init|=
operator|new
name|ArrayList
argument_list|()
decl_stmt|;
name|SVNURL
name|rootURL
init|=
name|SVNURLUtil
operator|.
name|condenceURLs
argument_list|(
name|urls
argument_list|,
name|paths
argument_list|,
literal|true
argument_list|)
decl_stmt|;
if|if
condition|(
name|rootURL
operator|==
literal|null
condition|)
block|{
name|SVNErrorMessage
name|err
init|=
name|SVNErrorMessage
operator|.
name|create
argument_list|(
name|SVNErrorCode
operator|.
name|RA_ILLEGAL_URL
argument_list|,
literal|"Can not compute common root URL for specified URLs"
argument_list|)
decl_stmt|;
name|SVNErrorManager
operator|.
name|error
argument_list|(
name|err
argument_list|,
name|SVNLogType
operator|.
name|DEFAULT
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|paths
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
comment|// there is just root.
name|paths
operator|.
name|add
argument_list|(
name|SVNPathUtil
operator|.
name|tail
argument_list|(
name|rootURL
operator|.
name|getURIEncodedPath
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|rootURL
operator|=
name|rootURL
operator|.
name|removePathTail
argument_list|()
expr_stmt|;
block|}
name|SVNCommitItem
index|[]
name|commitItems
init|=
operator|new
name|SVNCommitItem
index|[
name|paths
operator|.
name|size
argument_list|()
index|]
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|commitItems
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
name|String
name|path
init|=
operator|(
name|String
operator|)
name|paths
operator|.
name|get
argument_list|(
name|i
argument_list|)
decl_stmt|;
name|commitItems
index|[
name|i
index|]
operator|=
operator|new
name|SVNCommitItem
argument_list|(
literal|null
argument_list|,
name|rootURL
operator|.
name|appendPath
argument_list|(
name|path
argument_list|,
literal|true
argument_list|)
argument_list|,
literal|null
argument_list|,
name|SVNNodeKind
operator|.
name|NONE
argument_list|,
name|SVNRevision
operator|.
name|UNDEFINED
argument_list|,
name|SVNRevision
operator|.
name|UNDEFINED
argument_list|,
literal|false
argument_list|,
literal|true
argument_list|,
literal|false
argument_list|,
literal|false
argument_list|,
literal|false
argument_list|,
literal|false
argument_list|)
expr_stmt|;
block|}
name|commitMessage
operator|=
name|getCommitHandler
argument_list|()
operator|.
name|getCommitMessage
argument_list|(
name|commitMessage
argument_list|,
name|commitItems
argument_list|)
expr_stmt|;
if|if
condition|(
name|commitMessage
operator|==
literal|null
condition|)
block|{
return|return
name|SVNCommitInfo
operator|.
name|NULL
return|;
block|}
name|List
name|decodedPaths
init|=
operator|new
name|ArrayList
argument_list|()
decl_stmt|;
for|for
control|(
name|Iterator
name|commitPaths
init|=
name|paths
operator|.
name|iterator
argument_list|()
init|;
name|commitPaths
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|String
name|path
init|=
operator|(
name|String
operator|)
name|commitPaths
operator|.
name|next
argument_list|()
decl_stmt|;
name|decodedPaths
operator|.
name|add
argument_list|(
name|SVNEncodingUtil
operator|.
name|uriDecode
argument_list|(
name|path
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|paths
operator|=
name|decodedPaths
expr_stmt|;
name|SVNRepository
name|repos
init|=
name|createRepository
argument_list|(
name|rootURL
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|,
literal|true
argument_list|)
decl_stmt|;
for|for
control|(
name|Iterator
name|commitPath
init|=
name|paths
operator|.
name|iterator
argument_list|()
init|;
name|commitPath
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|String
name|path
init|=
operator|(
name|String
operator|)
name|commitPath
operator|.
name|next
argument_list|()
decl_stmt|;
name|SVNNodeKind
name|kind
init|=
name|repos
operator|.
name|checkPath
argument_list|(
name|path
argument_list|,
operator|-
literal|1
argument_list|)
decl_stmt|;
if|if
condition|(
name|kind
operator|==
name|SVNNodeKind
operator|.
name|NONE
condition|)
block|{
name|SVNURL
name|url
init|=
name|rootURL
operator|.
name|appendPath
argument_list|(
name|path
argument_list|,
literal|false
argument_list|)
decl_stmt|;
name|SVNErrorMessage
name|err
init|=
name|SVNErrorMessage
operator|.
name|create
argument_list|(
name|SVNErrorCode
operator|.
name|FS_NOT_FOUND
argument_list|,
literal|"URL ''{0}'' does not exist"
argument_list|,
name|url
argument_list|)
decl_stmt|;
name|SVNErrorManager
operator|.
name|error
argument_list|(
name|err
argument_list|,
name|SVNLogType
operator|.
name|DEFAULT
argument_list|)
expr_stmt|;
block|}
block|}
name|commitMessage
operator|=
name|SVNCommitUtil
operator|.
name|validateCommitMessage
argument_list|(
name|commitMessage
argument_list|)
expr_stmt|;
name|SVNPropertiesManager
operator|.
name|validateRevisionProperties
argument_list|(
name|revisionProperties
argument_list|)
expr_stmt|;
name|ISVNEditor
name|commitEditor
init|=
name|repos
operator|.
name|getCommitEditor
argument_list|(
name|commitMessage
argument_list|,
literal|null
argument_list|,
literal|false
argument_list|,
name|revisionProperties
argument_list|,
literal|null
argument_list|)
decl_stmt|;
name|ISVNCommitPathHandler
name|deleter
init|=
operator|new
name|ISVNCommitPathHandler
argument_list|()
block|{
specifier|public
name|boolean
name|handleCommitPath
parameter_list|(
name|String
name|commitPath
parameter_list|,
name|ISVNEditor
name|commitEditor
parameter_list|)
throws|throws
name|SVNException
block|{
name|commitEditor
operator|.
name|deleteEntry
argument_list|(
name|commitPath
argument_list|,
operator|-
literal|1
argument_list|)
expr_stmt|;
return|return
literal|false
return|;
block|}
block|}
decl_stmt|;
name|SVNCommitInfo
name|info
decl_stmt|;
try|try
block|{
name|SVNCommitUtil
operator|.
name|driveCommitEditor
argument_list|(
name|deleter
argument_list|,
name|paths
argument_list|,
name|commitEditor
argument_list|,
operator|-
literal|1
argument_list|)
expr_stmt|;
name|info
operator|=
name|commitEditor
operator|.
name|closeEdit
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|SVNException
name|e
parameter_list|)
block|{
try|try
block|{
name|commitEditor
operator|.
name|abortEdit
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|SVNException
name|inner
parameter_list|)
block|{
comment|//
block|}
throw|throw
name|e
throw|;
block|}
if|if
condition|(
name|info
operator|!=
literal|null
operator|&&
name|info
operator|.
name|getNewRevision
argument_list|()
operator|>=
literal|0
condition|)
block|{
name|dispatchEvent
argument_list|(
name|SVNEventFactory
operator|.
name|createSVNEvent
argument_list|(
literal|null
argument_list|,
name|SVNNodeKind
operator|.
name|NONE
argument_list|,
literal|null
argument_list|,
name|info
operator|.
name|getNewRevision
argument_list|()
argument_list|,
name|SVNEventAction
operator|.
name|COMMIT_COMPLETED
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|)
argument_list|,
name|ISVNEventHandler
operator|.
name|UNKNOWN
argument_list|)
expr_stmt|;
block|}
return|return
name|info
operator|!=
literal|null
condition|?
name|info
else|:
name|SVNCommitInfo
operator|.
name|NULL
return|;
block|}
comment|/**      * Committs a creation of a new directory/directories in the repository.      *       * @param  urls				an array containing URL-strings that represent      * 							new repository locations to be created      * @param  commitMessage	a string to be a commit log message      * @return					information on a new revision as the result      * 							of the commit      * @throws SVNException     if some of URLs refer to different      *                          repositories      */
specifier|public
name|SVNCommitInfo
name|doMkDir
parameter_list|(
name|SVNURL
index|[]
name|urls
parameter_list|,
name|String
name|commitMessage
parameter_list|)
throws|throws
name|SVNException
block|{
return|return
name|doMkDir
argument_list|(
name|urls
argument_list|,
name|commitMessage
argument_list|,
literal|null
argument_list|,
literal|false
argument_list|)
return|;
block|}
comment|/**       * Creates directory(ies) in a repository.      *       *<p/>      * If<code>makeParents</code> is<span class="javakeyword">true</span>, creates any non-existent parent       * directories also.      *       *<p/>      * If non-<span class="javakeyword">null</span>,<code>revisionProperties</code> holds additional,      * custom revision properties (<code>String</code> names mapped to {@link SVNPropertyValue} values) to be       * set on the new revision. This table cannot contain any standard Subversion properties.      *      *<p/>      * {@link #getCommitHandler() Commit handler} will be asked for a commit log message.      *      *<p/>      * If the caller's {@link ISVNEventHandler event handler} is not<span class="javakeyword">null</span> and       * if the commit succeeds, the handler will be called with {@link SVNEventAction#COMMIT_COMPLETED} event       * action.      *       * @param  urls                  repository locations to create       * @param  commitMessage         commit log message      * @param  revisionProperties    custom revision properties      * @param  makeParents           if<span class="javakeyword">true</span>, creates all non-existent       *                               parent directories      * @return                       information about the new committed revision      * @throws SVNException          in the following cases:      *<ul>      *<li/>exception with {@link SVNErrorCode#RA_ILLEGAL_URL} error code - if       *                               cannot compute common root url for<code>urls</code>      *<li/>exception with {@link SVNErrorCode#FS_NOT_FOUND} error code - if       *                               some of<code>urls</code> does not exist      *</ul>      * @since                        1.2.0, SVN 1.5.0      */
specifier|public
name|SVNCommitInfo
name|doMkDir
parameter_list|(
name|SVNURL
index|[]
name|urls
parameter_list|,
name|String
name|commitMessage
parameter_list|,
name|SVNProperties
name|revisionProperties
parameter_list|,
name|boolean
name|makeParents
parameter_list|)
throws|throws
name|SVNException
block|{
if|if
condition|(
name|makeParents
condition|)
block|{
name|List
name|allURLs
init|=
operator|new
name|LinkedList
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|urls
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
name|SVNURL
name|url
init|=
name|urls
index|[
name|i
index|]
decl_stmt|;
name|addURLParents
argument_list|(
name|allURLs
argument_list|,
name|url
argument_list|)
expr_stmt|;
block|}
name|urls
operator|=
operator|(
name|SVNURL
index|[]
operator|)
name|allURLs
operator|.
name|toArray
argument_list|(
operator|new
name|SVNURL
index|[
name|allURLs
operator|.
name|size
argument_list|()
index|]
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|urls
operator|==
literal|null
operator|||
name|urls
operator|.
name|length
operator|==
literal|0
condition|)
block|{
return|return
name|SVNCommitInfo
operator|.
name|NULL
return|;
block|}
name|Collection
name|paths
init|=
operator|new
name|SVNHashSet
argument_list|()
decl_stmt|;
name|SVNURL
name|rootURL
init|=
name|SVNURLUtil
operator|.
name|condenceURLs
argument_list|(
name|urls
argument_list|,
name|paths
argument_list|,
literal|false
argument_list|)
decl_stmt|;
if|if
condition|(
name|rootURL
operator|==
literal|null
condition|)
block|{
name|SVNErrorMessage
name|err
init|=
name|SVNErrorMessage
operator|.
name|create
argument_list|(
name|SVNErrorCode
operator|.
name|RA_ILLEGAL_URL
argument_list|,
literal|"Can not compute common root URL for specified URLs"
argument_list|)
decl_stmt|;
name|SVNErrorManager
operator|.
name|error
argument_list|(
name|err
argument_list|,
name|SVNLogType
operator|.
name|DEFAULT
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|paths
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|paths
operator|.
name|add
argument_list|(
name|SVNPathUtil
operator|.
name|tail
argument_list|(
name|rootURL
operator|.
name|getURIEncodedPath
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|rootURL
operator|=
name|rootURL
operator|.
name|removePathTail
argument_list|()
expr_stmt|;
block|}
if|if
condition|(
name|paths
operator|.
name|contains
argument_list|(
literal|""
argument_list|)
condition|)
block|{
name|List
name|convertedPaths
init|=
operator|new
name|ArrayList
argument_list|()
decl_stmt|;
name|String
name|tail
init|=
name|SVNPathUtil
operator|.
name|tail
argument_list|(
name|rootURL
operator|.
name|getURIEncodedPath
argument_list|()
argument_list|)
decl_stmt|;
name|rootURL
operator|=
name|rootURL
operator|.
name|removePathTail
argument_list|()
expr_stmt|;
for|for
control|(
name|Iterator
name|commitPaths
init|=
name|paths
operator|.
name|iterator
argument_list|()
init|;
name|commitPaths
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|String
name|path
init|=
operator|(
name|String
operator|)
name|commitPaths
operator|.
name|next
argument_list|()
decl_stmt|;
if|if
condition|(
literal|""
operator|.
name|equals
argument_list|(
name|path
argument_list|)
condition|)
block|{
name|convertedPaths
operator|.
name|add
argument_list|(
name|tail
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|convertedPaths
operator|.
name|add
argument_list|(
name|SVNPathUtil
operator|.
name|append
argument_list|(
name|tail
argument_list|,
name|path
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
name|paths
operator|=
name|convertedPaths
expr_stmt|;
block|}
name|List
name|sortedPaths
init|=
operator|new
name|ArrayList
argument_list|(
name|paths
argument_list|)
decl_stmt|;
name|Collections
operator|.
name|sort
argument_list|(
name|sortedPaths
argument_list|,
name|SVNPathUtil
operator|.
name|PATH_COMPARATOR
argument_list|)
expr_stmt|;
name|SVNCommitItem
index|[]
name|commitItems
init|=
operator|new
name|SVNCommitItem
index|[
name|sortedPaths
operator|.
name|size
argument_list|()
index|]
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|commitItems
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
name|String
name|path
init|=
operator|(
name|String
operator|)
name|sortedPaths
operator|.
name|get
argument_list|(
name|i
argument_list|)
decl_stmt|;
name|commitItems
index|[
name|i
index|]
operator|=
operator|new
name|SVNCommitItem
argument_list|(
literal|null
argument_list|,
name|rootURL
operator|.
name|appendPath
argument_list|(
name|path
argument_list|,
literal|true
argument_list|)
argument_list|,
literal|null
argument_list|,
name|SVNNodeKind
operator|.
name|DIR
argument_list|,
name|SVNRevision
operator|.
name|UNDEFINED
argument_list|,
name|SVNRevision
operator|.
name|UNDEFINED
argument_list|,
literal|true
argument_list|,
literal|false
argument_list|,
literal|false
argument_list|,
literal|false
argument_list|,
literal|false
argument_list|,
literal|false
argument_list|)
expr_stmt|;
block|}
name|commitMessage
operator|=
name|getCommitHandler
argument_list|()
operator|.
name|getCommitMessage
argument_list|(
name|commitMessage
argument_list|,
name|commitItems
argument_list|)
expr_stmt|;
if|if
condition|(
name|commitMessage
operator|==
literal|null
condition|)
block|{
return|return
name|SVNCommitInfo
operator|.
name|NULL
return|;
block|}
name|List
name|decodedPaths
init|=
operator|new
name|ArrayList
argument_list|()
decl_stmt|;
for|for
control|(
name|Iterator
name|commitPaths
init|=
name|sortedPaths
operator|.
name|iterator
argument_list|()
init|;
name|commitPaths
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|String
name|path
init|=
operator|(
name|String
operator|)
name|commitPaths
operator|.
name|next
argument_list|()
decl_stmt|;
name|decodedPaths
operator|.
name|add
argument_list|(
name|SVNEncodingUtil
operator|.
name|uriDecode
argument_list|(
name|path
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|paths
operator|=
name|decodedPaths
expr_stmt|;
name|SVNRepository
name|repos
init|=
name|createRepository
argument_list|(
name|rootURL
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|,
literal|true
argument_list|)
decl_stmt|;
name|commitMessage
operator|=
name|SVNCommitUtil
operator|.
name|validateCommitMessage
argument_list|(
name|commitMessage
argument_list|)
expr_stmt|;
name|SVNPropertiesManager
operator|.
name|validateRevisionProperties
argument_list|(
name|revisionProperties
argument_list|)
expr_stmt|;
name|ISVNEditor
name|commitEditor
init|=
name|repos
operator|.
name|getCommitEditor
argument_list|(
name|commitMessage
argument_list|,
literal|null
argument_list|,
literal|false
argument_list|,
name|revisionProperties
argument_list|,
literal|null
argument_list|)
decl_stmt|;
name|ISVNCommitPathHandler
name|creater
init|=
operator|new
name|ISVNCommitPathHandler
argument_list|()
block|{
specifier|public
name|boolean
name|handleCommitPath
parameter_list|(
name|String
name|commitPath
parameter_list|,
name|ISVNEditor
name|commitEditor
parameter_list|)
throws|throws
name|SVNException
block|{
name|SVNPathUtil
operator|.
name|checkPathIsValid
argument_list|(
name|commitPath
argument_list|)
expr_stmt|;
name|commitEditor
operator|.
name|addDir
argument_list|(
name|commitPath
argument_list|,
literal|null
argument_list|,
operator|-
literal|1
argument_list|)
expr_stmt|;
return|return
literal|true
return|;
block|}
block|}
decl_stmt|;
name|SVNCommitInfo
name|info
decl_stmt|;
try|try
block|{
name|SVNCommitUtil
operator|.
name|driveCommitEditor
argument_list|(
name|creater
argument_list|,
name|paths
argument_list|,
name|commitEditor
argument_list|,
operator|-
literal|1
argument_list|)
expr_stmt|;
name|info
operator|=
name|commitEditor
operator|.
name|closeEdit
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|SVNException
name|e
parameter_list|)
block|{
try|try
block|{
name|commitEditor
operator|.
name|abortEdit
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|SVNException
name|inner
parameter_list|)
block|{
comment|//
block|}
throw|throw
name|e
throw|;
block|}
if|if
condition|(
name|info
operator|!=
literal|null
operator|&&
name|info
operator|.
name|getNewRevision
argument_list|()
operator|>=
literal|0
condition|)
block|{
name|dispatchEvent
argument_list|(
name|SVNEventFactory
operator|.
name|createSVNEvent
argument_list|(
literal|null
argument_list|,
name|SVNNodeKind
operator|.
name|NONE
argument_list|,
literal|null
argument_list|,
name|info
operator|.
name|getNewRevision
argument_list|()
argument_list|,
name|SVNEventAction
operator|.
name|COMMIT_COMPLETED
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|)
argument_list|,
name|ISVNEventHandler
operator|.
name|UNKNOWN
argument_list|)
expr_stmt|;
block|}
return|return
name|info
operator|!=
literal|null
condition|?
name|info
else|:
name|SVNCommitInfo
operator|.
name|NULL
return|;
block|}
comment|/**      * Committs an addition of a local unversioned file or directory into       * the repository.       *       *<p/>      * This method is identical to<code>doImport(path, dstURL, commitMessage, null, true, false, SVNDepth.fromRecurse(recursive))</code>.       *       * @param  path				a local unversioned file or directory to be imported      * 							into the repository      * @param  dstURL			a URL-string that represents a repository location      * 							where the<code>path</code> will be imported 			      * @param  commitMessage	a string to be a commit log message      * @param  recursive		this flag is relevant only when the<code>path</code> is       * 							a directory: if<span class="javakeyword">true</span> then the entire directory      * 							tree will be imported including all child directories, otherwise       * 							only items located in the directory itself      * @return					information on a new revision as the result      * 							of the commit      * @throws SVNException     if one of the following is true:      *<ul>      *<li><code>dstURL</code> is invalid      *<li>the path denoted by<code>dstURL</code> already      *                          exists      *<li><code>path</code> contains a reserved name -<i>'.svn'</i>      *</ul>      * @deprecated              use {@link #doImport(File, SVNURL, String, SVNProperties, boolean, boolean, SVNDepth)}      *                          instead                                */
specifier|public
name|SVNCommitInfo
name|doImport
parameter_list|(
name|File
name|path
parameter_list|,
name|SVNURL
name|dstURL
parameter_list|,
name|String
name|commitMessage
parameter_list|,
name|boolean
name|recursive
parameter_list|)
throws|throws
name|SVNException
block|{
return|return
name|doImport
argument_list|(
name|path
argument_list|,
name|dstURL
argument_list|,
name|commitMessage
argument_list|,
literal|null
argument_list|,
literal|true
argument_list|,
literal|false
argument_list|,
name|SVNDepth
operator|.
name|fromRecurse
argument_list|(
name|recursive
argument_list|)
argument_list|)
return|;
block|}
comment|/**      * Committs an addition of a local unversioned file or directory into       * the repository.       *       *<p/>      * This method is identical to<code>doImport(path, dstURL, commitMessage, null, useGlobalIgnores, false, SVNDepth.fromRecurse(recursive))</code>.      *       * @param  path             a local unversioned file or directory to be imported      *                          into the repository      * @param  dstURL           a URL-string that represents a repository location      *                          where the<code>path</code> will be imported                  * @param  commitMessage    a string to be a commit log message      * @param  useGlobalIgnores if<span class="javakeyword">true</span>       *                          then those paths that match global ignore patterns controlled       *                          by a config options driver (see {@link org.tmatesoft.svn.core.wc.ISVNOptions#getIgnorePatterns()})       *                          will not be imported, otherwise global ignore patterns are not        *                          used      * @param  recursive        this flag is relevant only when the<code>path</code> is       *                          a directory: if<span class="javakeyword">true</span> then the entire directory      *                          tree will be imported including all child directories, otherwise       *                          only items located in the directory itself      * @return                  information on a new revision as the result      *                          of the commit      * @throws SVNException     if one of the following is true:      *<ul>      *<li><code>dstURL</code> is invalid      *<li>the path denoted by<code>dstURL</code> already      *                          exists      *<li><code>path</code> contains a reserved name -<i>'.svn'</i>      *</ul>      * @deprecated              use {@link #doImport(File, SVNURL, String, SVNProperties, boolean, boolean, SVNDepth)}      *                          instead                                */
specifier|public
name|SVNCommitInfo
name|doImport
parameter_list|(
name|File
name|path
parameter_list|,
name|SVNURL
name|dstURL
parameter_list|,
name|String
name|commitMessage
parameter_list|,
name|boolean
name|useGlobalIgnores
parameter_list|,
name|boolean
name|recursive
parameter_list|)
throws|throws
name|SVNException
block|{
return|return
name|doImport
argument_list|(
name|path
argument_list|,
name|dstURL
argument_list|,
name|commitMessage
argument_list|,
literal|null
argument_list|,
name|useGlobalIgnores
argument_list|,
literal|false
argument_list|,
name|SVNDepth
operator|.
name|fromRecurse
argument_list|(
name|recursive
argument_list|)
argument_list|)
return|;
block|}
comment|/**       * Imports file or directory<code>path</code> into repository directory<code>dstURL</code> at      * HEAD revision. If some components of<code>dstURL</code> do not exist, then creates parent directories       * as necessary.      *       *<p/>      * If<code>path</code> is a directory, the contents of that directory are imported directly into the       * directory identified by<code>dstURL</code>. Note that the directory<code>path</code> itself is not       * imported -- that is, the base name of<code>path<code> is not part of the import.      *      *<p/>      * If<code>path</code> is a file, then the parent of<code>dstURL</code> is the directory      * receiving the import. The base name of<code>dstURL</code> is the filename in the repository.       * In this case if<code>dstURL</code> already exists, throws {@link SVNException}.      *      *<p/>      * If the caller's {@link ISVNEventHandler event handler} is not<span class="javakeyword">null</span> it       * will be called as the import progresses with {@link SVNEventAction#COMMIT_ADDED} action. If the commit       * succeeds, the handler will be called with {@link SVNEventAction#COMMIT_COMPLETED} event       * action.      *       *<p/>      * If non-<span class="javakeyword">null</span>,<code>revisionProperties</code> holds additional, custom       * revision properties (<code>String</code> names mapped to {@link SVNPropertyValue} values) to be set on the new revision.      * This table cannot contain any standard Subversion properties.      *      *<p/>      * {@link #getCommitHandler() Commit handler} will be asked for a commit log message.      *       *<p/>      * If<code>depth</code> is {@link SVNDepth#EMPTY}, imports just<code>path</code> and nothing below it. If       * {@link SVNDepth#FILES}, imports<code>path</code> and any file children of<code>path</code>. If       * {@link SVNDepth#IMMEDIATES}, imports<code>path</code>, any file children, and any immediate       * subdirectories (but nothing underneath those subdirectories). If {@link SVNDepth#INFINITY}, imports      *<code>path</code> and everything under it fully recursively.      *       *<p/>      * If<code>useGlobalIgnores</code> is<span class="javakeyword">false</span>, doesn't add files or       * directories that match ignore patterns.      *       *<p/>      * If<code>ignoreUnknownNodeTypes</code> is<span class="javakeyword">false</span>, ignores files of which       * the node type is unknown, such as device files and pipes.      *       * @param  path                     path to import      * @param  dstURL                   import destination url       * @param  commitMessage            commit log message      * @param  revisionProperties       custom revision properties      * @param  useGlobalIgnores         whether matching against global ignore patterns should take place      * @param  ignoreUnknownNodeTypes   whether to ignore files of unknown node types or not       * @param  depth                    tree depth to process      * @return                          information about the new committed revision      * @throws SVNException             in the following cases:      *<ul>      *<li/>exception with {@link SVNErrorCode#ENTRY_NOT_FOUND} error code -       *                                  if<code>path</code> does not exist      *<li/>exception with {@link SVNErrorCode#ENTRY_EXISTS} error code -      *                                  if<code>dstURL</code> already exists and<code>path</code> is a file      *<li/>exception with {@link SVNErrorCode#CL_ADM_DIR_RESERVED} error code -      *                                  if trying to import an item with a reserved SVN name (like       *<code>'.svn'</code> or<code>'_svn'</code>)       *</ul>       * @since                           1.2.0, New in SVN 1.5.0      */
specifier|public
name|SVNCommitInfo
name|doImport
parameter_list|(
name|File
name|path
parameter_list|,
name|SVNURL
name|dstURL
parameter_list|,
name|String
name|commitMessage
parameter_list|,
name|SVNProperties
name|revisionProperties
parameter_list|,
name|boolean
name|useGlobalIgnores
parameter_list|,
name|boolean
name|ignoreUnknownNodeTypes
parameter_list|,
name|SVNDepth
name|depth
parameter_list|)
throws|throws
name|SVNException
block|{
comment|// first find dstURL root.
name|SVNRepository
name|repos
init|=
literal|null
decl_stmt|;
name|SVNFileType
name|srcKind
init|=
name|SVNFileType
operator|.
name|getType
argument_list|(
name|path
argument_list|)
decl_stmt|;
if|if
condition|(
name|srcKind
operator|==
name|SVNFileType
operator|.
name|NONE
condition|)
block|{
name|SVNErrorMessage
name|err
init|=
name|SVNErrorMessage
operator|.
name|create
argument_list|(
name|SVNErrorCode
operator|.
name|ENTRY_NOT_FOUND
argument_list|,
literal|"Path ''{0}'' does not exist"
argument_list|,
name|path
argument_list|)
decl_stmt|;
name|SVNErrorManager
operator|.
name|error
argument_list|(
name|err
argument_list|,
name|SVNLogType
operator|.
name|WC
argument_list|)
expr_stmt|;
block|}
name|List
name|newPaths
init|=
operator|new
name|ArrayList
argument_list|()
decl_stmt|;
name|SVNURL
name|rootURL
init|=
name|dstURL
decl_stmt|;
name|repos
operator|=
name|createRepository
argument_list|(
name|rootURL
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|SVNURL
name|reposRoot
init|=
name|repos
operator|.
name|getRepositoryRoot
argument_list|(
literal|true
argument_list|)
decl_stmt|;
while|while
condition|(
operator|!
name|reposRoot
operator|.
name|equals
argument_list|(
name|rootURL
argument_list|)
condition|)
block|{
if|if
condition|(
name|repos
operator|.
name|checkPath
argument_list|(
literal|""
argument_list|,
operator|-
literal|1
argument_list|)
operator|==
name|SVNNodeKind
operator|.
name|NONE
condition|)
block|{
name|newPaths
operator|.
name|add
argument_list|(
name|SVNPathUtil
operator|.
name|tail
argument_list|(
name|rootURL
operator|.
name|getPath
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|rootURL
operator|=
name|rootURL
operator|.
name|removePathTail
argument_list|()
expr_stmt|;
name|repos
operator|=
name|createRepository
argument_list|(
name|rootURL
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|,
literal|true
argument_list|)
expr_stmt|;
block|}
else|else
block|{
break|break;
block|}
block|}
if|if
condition|(
name|newPaths
operator|.
name|isEmpty
argument_list|()
operator|&&
operator|(
name|srcKind
operator|==
name|SVNFileType
operator|.
name|FILE
operator|||
name|srcKind
operator|==
name|SVNFileType
operator|.
name|SYMLINK
operator|)
condition|)
block|{
name|SVNErrorMessage
name|err
init|=
name|SVNErrorMessage
operator|.
name|create
argument_list|(
name|SVNErrorCode
operator|.
name|ENTRY_EXISTS
argument_list|,
literal|"Path ''{0}'' already exists"
argument_list|,
name|dstURL
argument_list|)
decl_stmt|;
name|SVNErrorManager
operator|.
name|error
argument_list|(
name|err
argument_list|,
name|SVNLogType
operator|.
name|WC
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|newPaths
operator|.
name|contains
argument_list|(
name|SVNFileUtil
operator|.
name|getAdminDirectoryName
argument_list|()
argument_list|)
condition|)
block|{
name|SVNErrorMessage
name|err
init|=
name|SVNErrorMessage
operator|.
name|create
argument_list|(
name|SVNErrorCode
operator|.
name|CL_ADM_DIR_RESERVED
argument_list|,
literal|"''{0}'' is a reserved name and cannot be imported"
argument_list|,
name|SVNFileUtil
operator|.
name|getAdminDirectoryName
argument_list|()
argument_list|)
decl_stmt|;
name|SVNErrorManager
operator|.
name|error
argument_list|(
name|err
argument_list|,
name|SVNLogType
operator|.
name|WC
argument_list|)
expr_stmt|;
block|}
name|SVNCommitItem
index|[]
name|items
init|=
operator|new
name|SVNCommitItem
index|[
literal|1
index|]
decl_stmt|;
name|items
index|[
literal|0
index|]
operator|=
operator|new
name|SVNCommitItem
argument_list|(
name|path
argument_list|,
name|dstURL
argument_list|,
literal|null
argument_list|,
name|srcKind
operator|==
name|SVNFileType
operator|.
name|DIRECTORY
condition|?
name|SVNNodeKind
operator|.
name|DIR
else|:
name|SVNNodeKind
operator|.
name|FILE
argument_list|,
name|SVNRevision
operator|.
name|UNDEFINED
argument_list|,
name|SVNRevision
operator|.
name|UNDEFINED
argument_list|,
literal|true
argument_list|,
literal|false
argument_list|,
literal|false
argument_list|,
literal|false
argument_list|,
literal|false
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|items
index|[
literal|0
index|]
operator|.
name|setPath
argument_list|(
name|path
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
name|commitMessage
operator|=
name|getCommitHandler
argument_list|()
operator|.
name|getCommitMessage
argument_list|(
name|commitMessage
argument_list|,
name|items
argument_list|)
expr_stmt|;
if|if
condition|(
name|commitMessage
operator|==
literal|null
condition|)
block|{
return|return
name|SVNCommitInfo
operator|.
name|NULL
return|;
block|}
name|commitMessage
operator|=
name|SVNCommitUtil
operator|.
name|validateCommitMessage
argument_list|(
name|commitMessage
argument_list|)
expr_stmt|;
name|SVNPropertiesManager
operator|.
name|validateRevisionProperties
argument_list|(
name|revisionProperties
argument_list|)
expr_stmt|;
name|ISVNEditor
name|commitEditor
init|=
name|repos
operator|.
name|getCommitEditor
argument_list|(
name|commitMessage
argument_list|,
literal|null
argument_list|,
literal|false
argument_list|,
name|revisionProperties
argument_list|,
operator|new
name|SVNImportMediator
argument_list|()
argument_list|)
decl_stmt|;
name|String
name|filePath
init|=
literal|""
decl_stmt|;
if|if
condition|(
name|srcKind
operator|!=
name|SVNFileType
operator|.
name|DIRECTORY
condition|)
block|{
name|filePath
operator|=
operator|(
name|String
operator|)
name|newPaths
operator|.
name|remove
argument_list|(
literal|0
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|newPaths
operator|.
name|size
argument_list|()
condition|;
name|i
operator|++
control|)
block|{
name|String
name|newDir
init|=
operator|(
name|String
operator|)
name|newPaths
operator|.
name|get
argument_list|(
name|i
argument_list|)
decl_stmt|;
name|filePath
operator|=
name|newDir
operator|+
literal|"/"
operator|+
name|filePath
expr_stmt|;
block|}
block|}
name|Collection
name|ignores
init|=
name|useGlobalIgnores
condition|?
name|SVNStatusEditor
operator|.
name|getGlobalIgnores
argument_list|(
name|getOptions
argument_list|()
argument_list|)
else|:
literal|null
decl_stmt|;
name|checkCancelled
argument_list|()
expr_stmt|;
name|boolean
name|changed
init|=
literal|false
decl_stmt|;
name|SVNCommitInfo
name|info
init|=
literal|null
decl_stmt|;
try|try
block|{
name|commitEditor
operator|.
name|openRoot
argument_list|(
operator|-
literal|1
argument_list|)
expr_stmt|;
name|String
name|newDirPath
init|=
literal|null
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
name|newPaths
operator|.
name|size
argument_list|()
operator|-
literal|1
init|;
name|i
operator|>=
literal|0
condition|;
name|i
operator|--
control|)
block|{
name|newDirPath
operator|=
name|newDirPath
operator|==
literal|null
condition|?
operator|(
name|String
operator|)
name|newPaths
operator|.
name|get
argument_list|(
name|i
argument_list|)
else|:
name|SVNPathUtil
operator|.
name|append
argument_list|(
name|newDirPath
argument_list|,
operator|(
name|String
operator|)
name|newPaths
operator|.
name|get
argument_list|(
name|i
argument_list|)
argument_list|)
expr_stmt|;
name|commitEditor
operator|.
name|addDir
argument_list|(
name|newDirPath
argument_list|,
literal|null
argument_list|,
operator|-
literal|1
argument_list|)
expr_stmt|;
block|}
name|changed
operator|=
name|newPaths
operator|.
name|size
argument_list|()
operator|>
literal|0
expr_stmt|;
name|SVNDeltaGenerator
name|deltaGenerator
init|=
operator|new
name|SVNDeltaGenerator
argument_list|()
decl_stmt|;
if|if
condition|(
name|srcKind
operator|==
name|SVNFileType
operator|.
name|DIRECTORY
condition|)
block|{
name|changed
operator||=
name|importDir
argument_list|(
name|deltaGenerator
argument_list|,
name|path
argument_list|,
name|newDirPath
argument_list|,
name|useGlobalIgnores
argument_list|,
name|ignoreUnknownNodeTypes
argument_list|,
name|depth
argument_list|,
name|commitEditor
argument_list|)
expr_stmt|;
block|}
if|else if
condition|(
name|srcKind
operator|==
name|SVNFileType
operator|.
name|FILE
operator|||
name|srcKind
operator|==
name|SVNFileType
operator|.
name|SYMLINK
condition|)
block|{
if|if
condition|(
operator|!
name|useGlobalIgnores
operator|||
operator|!
name|SVNStatusEditor
operator|.
name|isIgnored
argument_list|(
name|ignores
argument_list|,
name|path
argument_list|,
literal|"/"
operator|+
name|path
operator|.
name|getName
argument_list|()
argument_list|)
condition|)
block|{
name|changed
operator||=
name|importFile
argument_list|(
name|deltaGenerator
argument_list|,
name|path
argument_list|,
name|srcKind
argument_list|,
name|filePath
argument_list|,
name|commitEditor
argument_list|)
expr_stmt|;
block|}
block|}
if|else if
condition|(
name|srcKind
operator|==
name|SVNFileType
operator|.
name|NONE
operator|||
name|srcKind
operator|==
name|SVNFileType
operator|.
name|UNKNOWN
condition|)
block|{
name|SVNErrorMessage
name|err
init|=
name|SVNErrorMessage
operator|.
name|create
argument_list|(
name|SVNErrorCode
operator|.
name|NODE_UNKNOWN_KIND
argument_list|,
literal|"''{0}'' does not exist"
argument_list|,
name|path
argument_list|)
decl_stmt|;
name|SVNErrorManager
operator|.
name|error
argument_list|(
name|err
argument_list|,
name|SVNLogType
operator|.
name|WC
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
operator|!
name|changed
condition|)
block|{
try|try
block|{
name|commitEditor
operator|.
name|abortEdit
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|SVNException
name|e
parameter_list|)
block|{
block|}
return|return
name|SVNCommitInfo
operator|.
name|NULL
return|;
block|}
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|newPaths
operator|.
name|size
argument_list|()
condition|;
name|i
operator|++
control|)
block|{
name|commitEditor
operator|.
name|closeDir
argument_list|()
expr_stmt|;
block|}
name|info
operator|=
name|commitEditor
operator|.
name|closeEdit
argument_list|()
expr_stmt|;
block|}
finally|finally
block|{
if|if
condition|(
operator|!
name|changed
operator|||
name|info
operator|==
literal|null
condition|)
block|{
try|try
block|{
name|commitEditor
operator|.
name|abortEdit
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|SVNException
name|e
parameter_list|)
block|{
comment|//
block|}
block|}
block|}
if|if
condition|(
name|info
operator|!=
literal|null
operator|&&
name|info
operator|.
name|getNewRevision
argument_list|()
operator|>=
literal|0
condition|)
block|{
name|dispatchEvent
argument_list|(
name|SVNEventFactory
operator|.
name|createSVNEvent
argument_list|(
literal|null
argument_list|,
name|SVNNodeKind
operator|.
name|NONE
argument_list|,
literal|null
argument_list|,
name|info
operator|.
name|getNewRevision
argument_list|()
argument_list|,
name|SVNEventAction
operator|.
name|COMMIT_COMPLETED
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|)
argument_list|,
name|ISVNEventHandler
operator|.
name|UNKNOWN
argument_list|)
expr_stmt|;
block|}
return|return
name|info
operator|!=
literal|null
condition|?
name|info
else|:
name|SVNCommitInfo
operator|.
name|NULL
return|;
block|}
comment|/**      * Committs local changes to the repository.       *       *<p/>      * This method is identical to<code>doCommit(paths, keepLocks, commitMessage, null, null, false, force, SVNDepth.fromRecurse(recursive))</code>.      *       * @param  paths			an array of local items which should be traversed      * 							to commit changes they have to the repository        * @param  keepLocks		if<span class="javakeyword">true</span> and there are local items that       * 							were locked then the commit will left them locked,      * 							otherwise the items will be unlocked after the commit      * 							succeeds        * @param  commitMessage	a string to be a commit log message      * @param  force<span class="javakeyword">true</span> to force a non-recursive commit; if      *<code>recursive</code> is set to<span class="javakeyword">true</span> the<code>force</code>      * 							flag is ignored      * @param  recursive		relevant only for directory items: if<span class="javakeyword">true</span> then       * 							the entire directory tree will be committed including all child directories,       * 							otherwise only items located in the directory itself      * @return					information on a new revision as the result      * 							of the commit      * @throws SVNException      * @deprecated              use {@link #doCommit(File[], boolean, String, SVNProperties, String[], boolean, boolean, SVNDepth)}       *                          instead      */
specifier|public
name|SVNCommitInfo
name|doCommit
parameter_list|(
name|File
index|[]
name|paths
parameter_list|,
name|boolean
name|keepLocks
parameter_list|,
name|String
name|commitMessage
parameter_list|,
name|boolean
name|force
parameter_list|,
name|boolean
name|recursive
parameter_list|)
throws|throws
name|SVNException
block|{
return|return
name|doCommit
argument_list|(
name|paths
argument_list|,
name|keepLocks
argument_list|,
name|commitMessage
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|,
literal|false
argument_list|,
name|force
argument_list|,
name|SVNDepth
operator|.
name|getInfinityOrEmptyDepth
argument_list|(
name|recursive
argument_list|)
argument_list|)
return|;
block|}
comment|/**      * Commits files or directories into repository.      *       *<p/>      *<code>paths</code> need not be canonicalized nor condensed; this method will take care of      * that. If<code>targets has zero elements, then do nothing and return      * immediately without error.      *       *<p/>      * If non-<span class="javakeyword">null</span>,<code>revisionProperties</code> holds additional,      * custom revision properties (<code>String</code> names mapped to {@link SVNPropertyValue} values) to be       * set on the new revision. This table cannot contain any standard Subversion properties.      *      *<p/>      * If the caller's {@link ISVNEventHandler event handler} is not<span class="javakeyword">null</span> it       * will be called as the commit progresses with any of the following actions:       * {@link SVNEventAction#COMMIT_MODIFIED}, {@link SVNEventAction#COMMIT_ADDED},       * {@link SVNEventAction#COMMIT_DELETED}, {@link SVNEventAction#COMMIT_REPLACED}. If the commit       * succeeds, the handler will be called with {@link SVNEventAction#COMMIT_COMPLETED} event       * action.      *       *<p/>      * If<code>depth</code> is {@link SVNDepth#INFINITY}, commits all changes to and below named targets. If       *<code>depth</code> is {@link SVNDepth#EMPTY}, commits only named targets (that is, only property changes       * on named directory targets, and property and content changes for named file targets). If<code>depth</code>       * is {@link SVNDepth#FILES}, behaves as above for named file targets, and for named directory targets,       * commits property changes on a named directory and all changes to files directly inside that directory.       * If {@link SVNDepth#IMMEDIATES}, behaves as for {@link SVNDepth#FILES}, and for subdirectories of any       * named directory target commits as though for {@link SVNDepth#EMPTY}.      *       *<p/>      * Unlocks paths in the repository, unless<code>keepLocks</code> is<span class="javakeyword">true</span>.      *      *<p/>      *<code>changelists</code> is an array of<code>String</code> changelist names, used as a restrictive       * filter on items that are committed; that is, doesn't commit anything unless it's a member of one of those      * changelists. After the commit completes successfully, removes changelist associations from the targets,       * unless<code>keepChangelist</code> is set. If<code>changelists</code> is empty (or altogether       *<span class="javakeyword">null</span>), no changelist filtering occurs.      *       *<p/>      * If no exception is thrown and {@link SVNCommitInfo#getNewRevision()} is invalid (<code>&lt;0</code>),       * then the commit was a no-op; nothing needed to be committed.      *       * @param  paths                paths to commit       * @param  keepLocks            whether to unlock or not files in the repository      * @param  commitMessage        commit log message      * @param  revisionProperties   custom revision properties      * @param  changelists          changelist names array       * @param  keepChangelist       whether to remove<code>changelists</code> or not      * @param  force<span class="javakeyword">true</span> to force a non-recursive commit; if      *<code>depth</code> is {@link SVNDepth#INFINITY} the<code>force</code>      *                              flag is ignored      * @param  depth                tree depth to process      * @return                      information about the new committed revision      * @throws SVNException       * @since                       1.2.0, New in Subversion 1.5.0      */
specifier|public
name|SVNCommitInfo
name|doCommit
parameter_list|(
name|File
index|[]
name|paths
parameter_list|,
name|boolean
name|keepLocks
parameter_list|,
name|String
name|commitMessage
parameter_list|,
name|SVNProperties
name|revisionProperties
parameter_list|,
name|String
index|[]
name|changelists
parameter_list|,
name|boolean
name|keepChangelist
parameter_list|,
name|boolean
name|force
parameter_list|,
name|SVNDepth
name|depth
parameter_list|)
throws|throws
name|SVNException
block|{
name|SVNCommitPacket
name|packet
init|=
name|doCollectCommitItems
argument_list|(
name|paths
argument_list|,
name|keepLocks
argument_list|,
name|force
argument_list|,
name|depth
argument_list|,
name|changelists
argument_list|)
decl_stmt|;
try|try
block|{
name|packet
operator|=
name|packet
operator|.
name|removeSkippedItems
argument_list|()
expr_stmt|;
return|return
name|doCommit
argument_list|(
name|packet
argument_list|,
name|keepLocks
argument_list|,
name|keepChangelist
argument_list|,
name|commitMessage
argument_list|,
name|revisionProperties
argument_list|)
return|;
block|}
finally|finally
block|{
if|if
condition|(
name|packet
operator|!=
literal|null
condition|)
block|{
name|packet
operator|.
name|dispose
argument_list|()
expr_stmt|;
block|}
block|}
block|}
comment|/**      * Committs local changes made to the Working Copy items to the repository.       *       *<p>      * This method is identical to<code>doCommit(commitPacket, keepLocks, false, commitMessage, null)</code>.      *       *<p>      *<code>commitPacket</code> contains commit items ({@link SVNCommitItem})       * which represent local Working Copy items that were changed and are to be committed.       * Commit items are gathered into a single {@link SVNCommitPacket}      * by invoking {@link #doCollectCommitItems(File[], boolean, boolean, boolean) doCollectCommitItems()}.       *       * @param  commitPacket		a single object that contains items to be committed      * @param  keepLocks		if<span class="javakeyword">true</span> and there are local items that       * 							were locked then the commit will left them locked,      * 							otherwise the items will be unlocked after the commit      * 							succeeds      * @param  commitMessage	a string to be a commit log message      * @return					information on a new revision as the result      * 							of the commit      * @throws SVNException           * @see	   SVNCommitItem      */
specifier|public
name|SVNCommitInfo
name|doCommit
parameter_list|(
name|SVNCommitPacket
name|commitPacket
parameter_list|,
name|boolean
name|keepLocks
parameter_list|,
name|String
name|commitMessage
parameter_list|)
throws|throws
name|SVNException
block|{
return|return
name|doCommit
argument_list|(
name|commitPacket
argument_list|,
name|keepLocks
argument_list|,
literal|false
argument_list|,
name|commitMessage
argument_list|,
literal|null
argument_list|)
return|;
block|}
comment|/**      * Commits files or directories into repository.      *       *<p/>      * This method is identical to {@link #doCommit(File[], boolean, String, SVNProperties, String[], boolean, boolean, SVNDepth)}      * except for it receives a commit packet instead of paths array. The aforementioned method collects commit       * items into a commit packet given working copy paths. This one accepts already collected commit items       * provided in<code>commitPacket</code>.        *       *<p/>      *<code>commitPacket</code> contains commit items ({@link SVNCommitItem})       * which represent local Working Copy items that are to be committed.       * Commit items are gathered in a single {@link SVNCommitPacket} by invoking       * either {@link #doCollectCommitItems(File[], boolean, boolean, SVNDepth, String[])} or       * {@link #doCollectCommitItems(File[], boolean, boolean, SVNDepth, boolean, String[])}.       *       *<p/>      * For more details on parameters, please, refer to {@link #doCommit(File[], boolean, String, SVNProperties, String[], boolean, boolean, SVNDepth)}.      *       * @param  commitPacket        a single object that contains items to be committed      * @param  keepLocks           if<span class="javakeyword">true</span> and there are local items that       *                             were locked then the commit will left them locked,      *                             otherwise the items will be unlocked after the commit      *                             succeeds      * @param  keepChangelist      whether to remove changelists or not      * @param  commitMessage       commit log message      * @param  revisionProperties  custom revision properties      * @return                     information about the new committed revision      * @throws SVNException       * @since                      1.2.0, SVN 1.5.0      */
specifier|public
name|SVNCommitInfo
name|doCommit
parameter_list|(
name|SVNCommitPacket
name|commitPacket
parameter_list|,
name|boolean
name|keepLocks
parameter_list|,
name|boolean
name|keepChangelist
parameter_list|,
name|String
name|commitMessage
parameter_list|,
name|SVNProperties
name|revisionProperties
parameter_list|)
throws|throws
name|SVNException
block|{
name|SVNCommitInfo
index|[]
name|info
init|=
name|doCommit
argument_list|(
operator|new
name|SVNCommitPacket
index|[]
block|{
name|commitPacket
block|}
argument_list|,
name|keepLocks
argument_list|,
name|keepChangelist
argument_list|,
name|commitMessage
argument_list|,
name|revisionProperties
argument_list|)
decl_stmt|;
if|if
condition|(
name|info
operator|!=
literal|null
operator|&&
name|info
operator|.
name|length
operator|>
literal|0
condition|)
block|{
if|if
condition|(
name|info
index|[
literal|0
index|]
operator|.
name|getErrorMessage
argument_list|()
operator|!=
literal|null
operator|&&
name|info
index|[
literal|0
index|]
operator|.
name|getErrorMessage
argument_list|()
operator|.
name|getErrorCode
argument_list|()
operator|!=
name|SVNErrorCode
operator|.
name|REPOS_POST_COMMIT_HOOK_FAILED
condition|)
block|{
name|SVNErrorManager
operator|.
name|error
argument_list|(
name|info
index|[
literal|0
index|]
operator|.
name|getErrorMessage
argument_list|()
argument_list|,
name|SVNLogType
operator|.
name|DEFAULT
argument_list|)
expr_stmt|;
block|}
return|return
name|info
index|[
literal|0
index|]
return|;
block|}
return|return
name|SVNCommitInfo
operator|.
name|NULL
return|;
block|}
comment|/**      * Committs local changes, made to the Working Copy items, to the repository.       *       *<p>      *<code>commitPackets</code> is an array of packets that contain commit items (<b>SVNCommitItem</b>)       * which represent local Working Copy items that were changed and are to be committed.       * Commit items are gathered in a single<b>SVNCommitPacket</b>      * by invoking {@link #doCollectCommitItems(File[], boolean, boolean, boolean) doCollectCommitItems()}.       *       *<p>      * This allows to commit separate trees of Working Copies "belonging" to different      * repositories. One packet per one repository. If repositories are different (it means more than      * one commit will be done),<code>commitMessage</code> may be replaced by a commit handler      * to be a specific one for each commit.      *       *<p>      * This method is identical to<code>doCommit(commitPackets, keepLocks, false, commitMessage, null)</code>.      *       * @param  commitPackets    logically grouped items to be committed      * @param  keepLocks        if<span class="javakeyword">true</span> and there are local items that       *                          were locked then the commit will left them locked,      *                          otherwise the items will be unlocked after the commit      *                          succeeds      * @param  commitMessage    a string to be a commit log message      * @return                  committed information      * @throws SVNException      */
specifier|public
name|SVNCommitInfo
index|[]
name|doCommit
parameter_list|(
name|SVNCommitPacket
index|[]
name|commitPackets
parameter_list|,
name|boolean
name|keepLocks
parameter_list|,
name|String
name|commitMessage
parameter_list|)
throws|throws
name|SVNException
block|{
return|return
name|doCommit
argument_list|(
name|commitPackets
argument_list|,
name|keepLocks
argument_list|,
literal|false
argument_list|,
name|commitMessage
argument_list|,
literal|null
argument_list|)
return|;
block|}
comment|/**      * Commits files or directories into repository.      *       *<p>      *<code>commitPackets</code> is an array of packets that contain commit items ({@link SVNCommitItem})       * which represent local Working Copy items that were changed and are to be committed.       * Commit items are gathered in a single {@link SVNCommitPacket}      * by invoking {@link #doCollectCommitItems(File[], boolean, boolean, SVNDepth, String[])} or       * {@link #doCollectCommitItems(File[], boolean, boolean, SVNDepth, boolean, String[])}.       *       *<p>      * This allows to commit items from separate Working Copies checked out from the same or different       * repositories. For each commit packet {@link #getCommitHandler() commit handler} is invoked to       * produce a commit message given the one<code>commitMessage</code> passed to this method.      * Each commit packet is committed in a separate transaction.      *       *<p/>      * For more details on parameters, please, refer to {@link #doCommit(File[], boolean, String, SVNProperties, String[], boolean, boolean, SVNDepth)}.      *       * @param  commitPackets       commit packets containing commit commit items per one commit      * @param  keepLocks           if<span class="javakeyword">true</span> and there are local items that       *                             were locked then the commit will left them locked, otherwise the items will       *                             be unlocked by the commit      * @param  keepChangelist      whether to remove changelists or not      * @param  commitMessage       a string to be a commit log message      * @param  revisionProperties  custom revision properties      * @return                     information about the new committed revisions       * @throws SVNException       * @since                      1.2.0, SVN 1.5.0      */
specifier|public
name|SVNCommitInfo
index|[]
name|doCommit
parameter_list|(
name|SVNCommitPacket
index|[]
name|commitPackets
parameter_list|,
name|boolean
name|keepLocks
parameter_list|,
name|boolean
name|keepChangelist
parameter_list|,
name|String
name|commitMessage
parameter_list|,
name|SVNProperties
name|revisionProperties
parameter_list|)
throws|throws
name|SVNException
block|{
if|if
condition|(
name|commitPackets
operator|==
literal|null
operator|||
name|commitPackets
operator|.
name|length
operator|==
literal|0
condition|)
block|{
return|return
operator|new
name|SVNCommitInfo
index|[
literal|0
index|]
return|;
block|}
name|Collection
name|tmpFiles
init|=
literal|null
decl_stmt|;
name|SVNCommitInfo
name|info
init|=
literal|null
decl_stmt|;
name|ISVNEditor
name|commitEditor
init|=
literal|null
decl_stmt|;
name|Collection
name|infos
init|=
operator|new
name|ArrayList
argument_list|()
decl_stmt|;
name|boolean
name|needsSleepForTimeStamp
init|=
literal|false
decl_stmt|;
for|for
control|(
name|int
name|p
init|=
literal|0
init|;
name|p
operator|<
name|commitPackets
operator|.
name|length
condition|;
name|p
operator|++
control|)
block|{
name|SVNCommitPacket
name|commitPacket
init|=
name|commitPackets
index|[
name|p
index|]
operator|.
name|removeSkippedItems
argument_list|()
decl_stmt|;
if|if
condition|(
name|commitPacket
operator|.
name|getCommitItems
argument_list|()
operator|.
name|length
operator|==
literal|0
condition|)
block|{
continue|continue;
block|}
try|try
block|{
name|commitMessage
operator|=
name|getCommitHandler
argument_list|()
operator|.
name|getCommitMessage
argument_list|(
name|commitMessage
argument_list|,
name|commitPacket
operator|.
name|getCommitItems
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|commitMessage
operator|==
literal|null
condition|)
block|{
name|infos
operator|.
name|add
argument_list|(
name|SVNCommitInfo
operator|.
name|NULL
argument_list|)
expr_stmt|;
continue|continue;
block|}
name|commitMessage
operator|=
name|SVNCommitUtil
operator|.
name|validateCommitMessage
argument_list|(
name|commitMessage
argument_list|)
expr_stmt|;
name|Map
name|commitables
init|=
operator|new
name|TreeMap
argument_list|()
decl_stmt|;
name|SVNURL
name|baseURL
init|=
name|SVNCommitUtil
operator|.
name|translateCommitables
argument_list|(
name|commitPacket
operator|.
name|getCommitItems
argument_list|()
argument_list|,
name|commitables
argument_list|)
decl_stmt|;
name|Map
name|lockTokens
init|=
name|SVNCommitUtil
operator|.
name|translateLockTokens
argument_list|(
name|commitPacket
operator|.
name|getLockTokens
argument_list|()
argument_list|,
name|baseURL
operator|.
name|toString
argument_list|()
argument_list|)
decl_stmt|;
comment|//TODO: we should pass wcAccess and path to check uuids
name|SVNCommitItem
name|firstItem
init|=
name|commitPacket
operator|.
name|getCommitItems
argument_list|()
index|[
literal|0
index|]
decl_stmt|;
name|SVNRepository
name|repository
init|=
name|createRepository
argument_list|(
name|baseURL
argument_list|,
name|firstItem
operator|.
name|getFile
argument_list|()
argument_list|,
name|firstItem
operator|.
name|getWCAccess
argument_list|()
argument_list|,
literal|true
argument_list|)
decl_stmt|;
name|SVNCommitMediator
name|mediator
init|=
operator|new
name|SVNCommitMediator
argument_list|(
name|commitables
argument_list|)
decl_stmt|;
name|tmpFiles
operator|=
name|mediator
operator|.
name|getTmpFiles
argument_list|()
expr_stmt|;
name|String
name|repositoryRoot
init|=
name|repository
operator|.
name|getRepositoryRoot
argument_list|(
literal|true
argument_list|)
operator|.
name|getPath
argument_list|()
decl_stmt|;
name|SVNPropertiesManager
operator|.
name|validateRevisionProperties
argument_list|(
name|revisionProperties
argument_list|)
expr_stmt|;
name|commitEditor
operator|=
name|repository
operator|.
name|getCommitEditor
argument_list|(
name|commitMessage
argument_list|,
name|lockTokens
argument_list|,
name|keepLocks
argument_list|,
name|revisionProperties
argument_list|,
name|mediator
argument_list|)
expr_stmt|;
comment|// commit.
comment|// set event handler for each wc access.
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|commitPacket
operator|.
name|getCommitItems
argument_list|()
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
name|commitPacket
operator|.
name|getCommitItems
argument_list|()
index|[
name|i
index|]
operator|.
name|getWCAccess
argument_list|()
operator|.
name|setEventHandler
argument_list|(
name|getEventDispatcher
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|info
operator|=
name|SVNCommitter
operator|.
name|commit
argument_list|(
name|mediator
operator|.
name|getTmpFiles
argument_list|()
argument_list|,
name|commitables
argument_list|,
name|repositoryRoot
argument_list|,
name|commitEditor
argument_list|)
expr_stmt|;
comment|// update wc.
name|Collection
name|processedItems
init|=
operator|new
name|SVNHashSet
argument_list|()
decl_stmt|;
name|Collection
name|explicitCommitPaths
init|=
operator|new
name|SVNHashSet
argument_list|()
decl_stmt|;
for|for
control|(
name|Iterator
name|urls
init|=
name|commitables
operator|.
name|keySet
argument_list|()
operator|.
name|iterator
argument_list|()
init|;
name|urls
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|String
name|url
init|=
operator|(
name|String
operator|)
name|urls
operator|.
name|next
argument_list|()
decl_stmt|;
name|SVNCommitItem
name|item
init|=
operator|(
name|SVNCommitItem
operator|)
name|commitables
operator|.
name|get
argument_list|(
name|url
argument_list|)
decl_stmt|;
name|explicitCommitPaths
operator|.
name|add
argument_list|(
name|item
operator|.
name|getPath
argument_list|()
argument_list|)
expr_stmt|;
block|}
for|for
control|(
name|Iterator
name|urls
init|=
name|commitables
operator|.
name|keySet
argument_list|()
operator|.
name|iterator
argument_list|()
init|;
name|urls
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|String
name|url
init|=
operator|(
name|String
operator|)
name|urls
operator|.
name|next
argument_list|()
decl_stmt|;
name|SVNCommitItem
name|item
init|=
operator|(
name|SVNCommitItem
operator|)
name|commitables
operator|.
name|get
argument_list|(
name|url
argument_list|)
decl_stmt|;
name|SVNWCAccess
name|wcAccess
init|=
name|item
operator|.
name|getWCAccess
argument_list|()
decl_stmt|;
name|String
name|path
init|=
name|item
operator|.
name|getPath
argument_list|()
decl_stmt|;
name|SVNAdminArea
name|dir
init|=
literal|null
decl_stmt|;
name|String
name|target
init|=
literal|null
decl_stmt|;
try|try
block|{
if|if
condition|(
name|item
operator|.
name|getKind
argument_list|()
operator|==
name|SVNNodeKind
operator|.
name|DIR
condition|)
block|{
name|target
operator|=
literal|""
expr_stmt|;
name|dir
operator|=
name|wcAccess
operator|.
name|retrieve
argument_list|(
name|item
operator|.
name|getFile
argument_list|()
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|target
operator|=
name|SVNPathUtil
operator|.
name|tail
argument_list|(
name|path
argument_list|)
expr_stmt|;
name|dir
operator|=
name|wcAccess
operator|.
name|retrieve
argument_list|(
name|item
operator|.
name|getFile
argument_list|()
operator|.
name|getParentFile
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
name|SVNException
name|e
parameter_list|)
block|{
if|if
condition|(
name|e
operator|.
name|getErrorMessage
argument_list|()
operator|.
name|getErrorCode
argument_list|()
operator|==
name|SVNErrorCode
operator|.
name|WC_NOT_LOCKED
condition|)
block|{
name|dir
operator|=
literal|null
expr_stmt|;
block|}
block|}
if|if
condition|(
name|dir
operator|==
literal|null
condition|)
block|{
if|if
condition|(
name|hasProcessedParents
argument_list|(
name|processedItems
argument_list|,
name|path
argument_list|)
condition|)
block|{
name|processedItems
operator|.
name|add
argument_list|(
name|path
argument_list|)
expr_stmt|;
continue|continue;
block|}
if|if
condition|(
name|item
operator|.
name|isDeleted
argument_list|()
operator|&&
name|item
operator|.
name|getKind
argument_list|()
operator|==
name|SVNNodeKind
operator|.
name|DIR
condition|)
block|{
name|File
name|parentPath
init|=
literal|""
operator|.
name|equals
argument_list|(
name|path
argument_list|)
condition|?
literal|null
else|:
name|item
operator|.
name|getFile
argument_list|()
operator|.
name|getParentFile
argument_list|()
decl_stmt|;
name|String
name|nameInParent
init|=
literal|""
operator|.
name|equals
argument_list|(
name|path
argument_list|)
condition|?
literal|null
else|:
name|SVNPathUtil
operator|.
name|tail
argument_list|(
name|path
argument_list|)
decl_stmt|;
if|if
condition|(
name|parentPath
operator|!=
literal|null
condition|)
block|{
name|SVNAdminArea
name|parentDir
init|=
name|wcAccess
operator|.
name|retrieve
argument_list|(
name|parentPath
argument_list|)
decl_stmt|;
if|if
condition|(
name|parentDir
operator|!=
literal|null
condition|)
block|{
name|SVNEntry
name|entryInParent
init|=
name|parentDir
operator|.
name|getEntry
argument_list|(
name|nameInParent
argument_list|,
literal|true
argument_list|)
decl_stmt|;
if|if
condition|(
name|entryInParent
operator|!=
literal|null
condition|)
block|{
name|Map
name|attributes
init|=
operator|new
name|SVNHashMap
argument_list|()
decl_stmt|;
name|attributes
operator|.
name|put
argument_list|(
name|SVNProperty
operator|.
name|SCHEDULE
argument_list|,
literal|null
argument_list|)
expr_stmt|;
name|attributes
operator|.
name|put
argument_list|(
name|SVNProperty
operator|.
name|DELETED
argument_list|,
name|Boolean
operator|.
name|TRUE
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|parentDir
operator|.
name|modifyEntry
argument_list|(
name|nameInParent
argument_list|,
name|attributes
argument_list|,
literal|true
argument_list|,
literal|true
argument_list|)
expr_stmt|;
block|}
block|}
block|}
name|processedItems
operator|.
name|add
argument_list|(
name|path
argument_list|)
expr_stmt|;
continue|continue;
block|}
block|}
name|SVNEntry
name|entry
init|=
name|dir
operator|.
name|getEntry
argument_list|(
name|target
argument_list|,
literal|true
argument_list|)
decl_stmt|;
if|if
condition|(
name|entry
operator|==
literal|null
operator|&&
name|hasProcessedParents
argument_list|(
name|processedItems
argument_list|,
name|path
argument_list|)
condition|)
block|{
name|processedItems
operator|.
name|add
argument_list|(
name|path
argument_list|)
expr_stmt|;
continue|continue;
block|}
name|boolean
name|recurse
init|=
literal|false
decl_stmt|;
if|if
condition|(
name|item
operator|.
name|isAdded
argument_list|()
operator|&&
name|item
operator|.
name|getCopyFromURL
argument_list|()
operator|!=
literal|null
operator|&&
name|item
operator|.
name|getKind
argument_list|()
operator|==
name|SVNNodeKind
operator|.
name|DIR
condition|)
block|{
name|recurse
operator|=
literal|true
expr_stmt|;
block|}
name|boolean
name|removeLock
init|=
operator|!
name|keepLocks
operator|&&
name|item
operator|.
name|isLocked
argument_list|()
decl_stmt|;
comment|// update entry in dir.
name|SVNProperties
name|wcPropChanges
init|=
name|mediator
operator|.
name|getWCProperties
argument_list|(
name|item
argument_list|)
decl_stmt|;
name|dir
operator|.
name|commit
argument_list|(
name|target
argument_list|,
name|info
argument_list|,
name|wcPropChanges
argument_list|,
name|removeLock
argument_list|,
name|recurse
argument_list|,
operator|!
name|keepChangelist
argument_list|,
name|explicitCommitPaths
argument_list|,
name|getCommitParameters
argument_list|()
argument_list|)
expr_stmt|;
name|processedItems
operator|.
name|add
argument_list|(
name|path
argument_list|)
expr_stmt|;
block|}
name|needsSleepForTimeStamp
operator|=
literal|true
expr_stmt|;
comment|// commit completed, include revision number.
name|dispatchEvent
argument_list|(
name|SVNEventFactory
operator|.
name|createSVNEvent
argument_list|(
literal|null
argument_list|,
name|SVNNodeKind
operator|.
name|NONE
argument_list|,
literal|null
argument_list|,
name|info
operator|.
name|getNewRevision
argument_list|()
argument_list|,
name|SVNEventAction
operator|.
name|COMMIT_COMPLETED
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|)
argument_list|,
name|ISVNEventHandler
operator|.
name|UNKNOWN
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|SVNException
name|e
parameter_list|)
block|{
if|if
condition|(
name|e
operator|instanceof
name|SVNCancelException
condition|)
block|{
throw|throw
name|e
throw|;
block|}
name|SVNErrorMessage
name|err
init|=
name|e
operator|.
name|getErrorMessage
argument_list|()
operator|.
name|wrap
argument_list|(
literal|"Commit failed (details follow):"
argument_list|)
decl_stmt|;
name|infos
operator|.
name|add
argument_list|(
operator|new
name|SVNCommitInfo
argument_list|(
operator|-
literal|1
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|,
name|err
argument_list|)
argument_list|)
expr_stmt|;
name|dispatchEvent
argument_list|(
name|SVNEventFactory
operator|.
name|createErrorEvent
argument_list|(
name|err
argument_list|,
name|SVNEventAction
operator|.
name|COMMIT_COMPLETED
argument_list|)
argument_list|,
name|ISVNEventHandler
operator|.
name|UNKNOWN
argument_list|)
expr_stmt|;
continue|continue;
block|}
finally|finally
block|{
if|if
condition|(
name|info
operator|==
literal|null
operator|&&
name|commitEditor
operator|!=
literal|null
condition|)
block|{
try|try
block|{
name|commitEditor
operator|.
name|abortEdit
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|SVNException
name|e
parameter_list|)
block|{
comment|//
block|}
block|}
if|if
condition|(
name|tmpFiles
operator|!=
literal|null
condition|)
block|{
for|for
control|(
name|Iterator
name|files
init|=
name|tmpFiles
operator|.
name|iterator
argument_list|()
init|;
name|files
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|File
name|file
init|=
operator|(
name|File
operator|)
name|files
operator|.
name|next
argument_list|()
decl_stmt|;
name|file
operator|.
name|delete
argument_list|()
expr_stmt|;
block|}
block|}
if|if
condition|(
name|commitPacket
operator|!=
literal|null
condition|)
block|{
name|commitPacket
operator|.
name|dispose
argument_list|()
expr_stmt|;
block|}
block|}
name|infos
operator|.
name|add
argument_list|(
name|info
operator|!=
literal|null
condition|?
name|info
else|:
name|SVNCommitInfo
operator|.
name|NULL
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|needsSleepForTimeStamp
condition|)
block|{
name|sleepForTimeStamp
argument_list|()
expr_stmt|;
block|}
return|return
operator|(
name|SVNCommitInfo
index|[]
operator|)
name|infos
operator|.
name|toArray
argument_list|(
operator|new
name|SVNCommitInfo
index|[
name|infos
operator|.
name|size
argument_list|()
index|]
argument_list|)
return|;
block|}
comment|/**      * Collects commit items (containing detailed information on each Working Copy item      * that was changed and need to be committed to the repository) into a single       * {@link SVNCommitPacket}.       *       *<p/>      * This method is equivalent to<code>doCollectCommitItems(paths, keepLocks, force, SVNDepth.fromRecurse(recursive), null)</code>.      *       * @param  paths			an array of local items which should be traversed      * 							to collect information on every changed item (one       *<b>SVNCommitItem</b> per each      * 							modified local item)      * @param  keepLocks		if<span class="javakeyword">true</span> and there are local items that       * 							were locked then these items will be left locked after      * 							traversing all of them, otherwise the items will be unlocked      * @param  force			forces collecting commit items for a non-recursive commit        * @param  recursive		relevant only for directory items: if<span class="javakeyword">true</span> then       * 							the entire directory tree will be traversed including all child       * 							directories, otherwise only items located in the directory itself      * 							will be processed      * @return					an<b>SVNCommitPacket</b> containing      * 							all Working Copy items having local modifications and represented as       *<b>SVNCommitItem</b> objects; if no modified      * 							items were found then       * 							{@link SVNCommitPacket#EMPTY} is returned      * @throws SVNException      * @deprecated              use {@link #doCollectCommitItems(File[], boolean, boolean, SVNDepth, String[])}      *                          instead      */
specifier|public
name|SVNCommitPacket
name|doCollectCommitItems
parameter_list|(
name|File
index|[]
name|paths
parameter_list|,
name|boolean
name|keepLocks
parameter_list|,
name|boolean
name|force
parameter_list|,
name|boolean
name|recursive
parameter_list|)
throws|throws
name|SVNException
block|{
name|SVNDepth
name|depth
init|=
name|recursive
condition|?
name|SVNDepth
operator|.
name|INFINITY
else|:
name|SVNDepth
operator|.
name|EMPTY
decl_stmt|;
return|return
name|doCollectCommitItems
argument_list|(
name|paths
argument_list|,
name|keepLocks
argument_list|,
name|force
argument_list|,
name|depth
argument_list|,
literal|null
argument_list|)
return|;
block|}
comment|/**      * Collects commit items (containing detailed information on each Working Copy item      * that contains changes and need to be committed to the repository) into a single       * {@link SVNCommitPacket}. Further this commit packet can be passed to      * {@link #doCommit(SVNCommitPacket, boolean, boolean, String, SVNProperties)}.      *       *<p/>      * For more details on parameters, please, refer to {@link #doCommit(File[], boolean, String, SVNProperties, String[], boolean, boolean, SVNDepth)}.       *       * @param  paths            an array of local items which should be traversed      *                          to collect information on every changed item (one       *<b>SVNCommitItem</b> per each      *                          modified local item)      * @param  keepLocks        if<span class="javakeyword">true</span> and there are local items that       *                          were locked then these items will be left locked after      *                          traversing all of them, otherwise the items will be unlocked      * @param  force            forces collecting commit items for a non-recursive commit        * @param  depth            tree depth to process      * @param  changelists      changelist names array       * @return                  commit packet containing commit items                       * @throws SVNException       * @since                   1.2.0      */
specifier|public
name|SVNCommitPacket
name|doCollectCommitItems
parameter_list|(
name|File
index|[]
name|paths
parameter_list|,
name|boolean
name|keepLocks
parameter_list|,
name|boolean
name|force
parameter_list|,
name|SVNDepth
name|depth
parameter_list|,
name|String
index|[]
name|changelists
parameter_list|)
throws|throws
name|SVNException
block|{
name|depth
operator|=
name|depth
operator|==
literal|null
condition|?
name|SVNDepth
operator|.
name|UNKNOWN
else|:
name|depth
expr_stmt|;
if|if
condition|(
name|depth
operator|==
name|SVNDepth
operator|.
name|UNKNOWN
condition|)
block|{
name|depth
operator|=
name|SVNDepth
operator|.
name|INFINITY
expr_stmt|;
block|}
if|if
condition|(
name|paths
operator|==
literal|null
operator|||
name|paths
operator|.
name|length
operator|==
literal|0
condition|)
block|{
return|return
name|SVNCommitPacket
operator|.
name|EMPTY
return|;
block|}
name|Collection
name|targets
init|=
operator|new
name|ArrayList
argument_list|()
decl_stmt|;
name|SVNStatusClient
name|statusClient
init|=
operator|new
name|SVNStatusClient
argument_list|(
name|getRepositoryPool
argument_list|()
argument_list|,
name|getOptions
argument_list|()
argument_list|)
decl_stmt|;
name|statusClient
operator|.
name|setEventHandler
argument_list|(
operator|new
name|ISVNEventHandler
argument_list|()
block|{
specifier|public
name|void
name|handleEvent
parameter_list|(
name|SVNEvent
name|event
parameter_list|,
name|double
name|progress
parameter_list|)
throws|throws
name|SVNException
block|{
block|}
specifier|public
name|void
name|checkCancelled
parameter_list|()
throws|throws
name|SVNCancelException
block|{
name|SVNCommitClient
operator|.
name|this
operator|.
name|checkCancelled
argument_list|()
expr_stmt|;
block|}
block|}
argument_list|)
expr_stmt|;
name|SVNWCAccess
name|wcAccess
init|=
name|SVNCommitUtil
operator|.
name|createCommitWCAccess
argument_list|(
name|paths
argument_list|,
name|depth
argument_list|,
name|force
argument_list|,
name|targets
argument_list|,
name|statusClient
argument_list|)
decl_stmt|;
name|SVNAdminArea
index|[]
name|areas
init|=
name|wcAccess
operator|.
name|getAdminAreas
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|areas
operator|!=
literal|null
operator|&&
name|i
operator|<
name|areas
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
if|if
condition|(
name|areas
index|[
name|i
index|]
operator|!=
literal|null
condition|)
block|{
name|areas
index|[
name|i
index|]
operator|.
name|setCommitParameters
argument_list|(
name|getCommitParameters
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
try|try
block|{
name|Map
name|lockTokens
init|=
operator|new
name|SVNHashMap
argument_list|()
decl_stmt|;
name|checkCancelled
argument_list|()
expr_stmt|;
name|Collection
name|changelistsSet
init|=
name|changelists
operator|!=
literal|null
condition|?
operator|new
name|SVNHashSet
argument_list|()
else|:
literal|null
decl_stmt|;
if|if
condition|(
name|changelists
operator|!=
literal|null
condition|)
block|{
for|for
control|(
name|int
name|j
init|=
literal|0
init|;
name|j
operator|<
name|changelists
operator|.
name|length
condition|;
name|j
operator|++
control|)
block|{
name|changelistsSet
operator|.
name|add
argument_list|(
name|changelists
index|[
name|j
index|]
argument_list|)
expr_stmt|;
block|}
block|}
name|SVNCommitItem
index|[]
name|commitItems
init|=
name|SVNCommitUtil
operator|.
name|harvestCommitables
argument_list|(
name|wcAccess
argument_list|,
name|targets
argument_list|,
name|lockTokens
argument_list|,
operator|!
name|keepLocks
argument_list|,
name|depth
argument_list|,
name|force
argument_list|,
name|changelistsSet
argument_list|,
name|getCommitParameters
argument_list|()
argument_list|)
decl_stmt|;
name|boolean
name|hasModifications
init|=
literal|false
decl_stmt|;
name|checkCancelled
argument_list|()
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|commitItems
operator|!=
literal|null
operator|&&
name|i
operator|<
name|commitItems
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
name|SVNCommitItem
name|commitItem
init|=
name|commitItems
index|[
name|i
index|]
decl_stmt|;
if|if
condition|(
name|commitItem
operator|.
name|isAdded
argument_list|()
operator|||
name|commitItem
operator|.
name|isDeleted
argument_list|()
operator|||
name|commitItem
operator|.
name|isContentsModified
argument_list|()
operator|||
name|commitItem
operator|.
name|isPropertiesModified
argument_list|()
operator|||
name|commitItem
operator|.
name|isCopied
argument_list|()
condition|)
block|{
name|hasModifications
operator|=
literal|true
expr_stmt|;
break|break;
block|}
block|}
if|if
condition|(
operator|!
name|hasModifications
condition|)
block|{
name|wcAccess
operator|.
name|close
argument_list|()
expr_stmt|;
return|return
name|SVNCommitPacket
operator|.
name|EMPTY
return|;
block|}
return|return
operator|new
name|SVNCommitPacket
argument_list|(
name|wcAccess
argument_list|,
name|commitItems
argument_list|,
name|lockTokens
argument_list|)
return|;
block|}
catch|catch
parameter_list|(
name|SVNException
name|e
parameter_list|)
block|{
name|wcAccess
operator|.
name|close
argument_list|()
expr_stmt|;
if|if
condition|(
name|e
operator|instanceof
name|SVNCancelException
condition|)
block|{
throw|throw
name|e
throw|;
block|}
name|SVNErrorMessage
name|nestedErr
init|=
name|e
operator|.
name|getErrorMessage
argument_list|()
decl_stmt|;
name|SVNErrorMessage
name|err
init|=
name|SVNErrorMessage
operator|.
name|create
argument_list|(
name|nestedErr
operator|.
name|getErrorCode
argument_list|()
argument_list|,
literal|"Commit failed (details follow):"
argument_list|)
decl_stmt|;
name|SVNErrorManager
operator|.
name|error
argument_list|(
name|err
argument_list|,
name|e
argument_list|,
name|SVNLogType
operator|.
name|DEFAULT
argument_list|)
expr_stmt|;
return|return
literal|null
return|;
block|}
block|}
comment|/**      * Collects commit items (containing detailed information on each Working Copy item      * that was changed and need to be committed to the repository) into different       *<b>SVNCommitPacket</b>s.       *       *<p/>      * This method is identical to<code>doCollectCommitItems(paths, keepLocks, force, SVNDepth.fromRecurse(recursive), combinePackets, null)</code>.      *       * @param  paths            an array of local items which should be traversed      *                          to collect information on every changed item (one       *<b>SVNCommitItem</b> per each      *                          modified local item)      * @param  keepLocks        if<span class="javakeyword">true</span> and there are local items that       *                          were locked then these items will be left locked after      *                          traversing all of them, otherwise the items will be unlocked      * @param  force            forces collecting commit items for a non-recursive commit        * @param  recursive        relevant only for directory items: if<span class="javakeyword">true</span> then       *                          the entire directory tree will be traversed including all child       *                          directories, otherwise only items located in the directory itself      *                          will be processed      * @param combinePackets    if<span class="javakeyword">true</span> then collected commit      *                          packets will be joined into a single one, so that to be committed      *                          in a single transaction      * @return                  an array of commit packets      * @throws SVNException      * @deprecated              use {@link #doCollectCommitItems(File[], boolean, boolean, SVNDepth, boolean, String[])}      *                          instead       */
specifier|public
name|SVNCommitPacket
index|[]
name|doCollectCommitItems
parameter_list|(
name|File
index|[]
name|paths
parameter_list|,
name|boolean
name|keepLocks
parameter_list|,
name|boolean
name|force
parameter_list|,
name|boolean
name|recursive
parameter_list|,
name|boolean
name|combinePackets
parameter_list|)
throws|throws
name|SVNException
block|{
name|SVNDepth
name|depth
init|=
name|recursive
condition|?
name|SVNDepth
operator|.
name|INFINITY
else|:
name|SVNDepth
operator|.
name|EMPTY
decl_stmt|;
return|return
name|doCollectCommitItems
argument_list|(
name|paths
argument_list|,
name|keepLocks
argument_list|,
name|force
argument_list|,
name|depth
argument_list|,
name|combinePackets
argument_list|,
literal|null
argument_list|)
return|;
block|}
comment|/**      * Collects commit items (containing detailed information on each Working Copy item that was changed and       * need to be committed to the repository) into different       *<code>SVNCommitPacket</code>s. This method may be considered as an advanced version of the       * {@link #doCollectCommitItems(File[], boolean, boolean, SVNDepth, String[])} method. Its main difference       * from the aforementioned method is that it provides an ability to collect commit items from different       * working copies checked out from the same repository and combine them into a single commit packet.       * This is attained via setting<code>combinePackets</code> into<span class="javakeyword">true</span>.       * However even if<code>combinePackets</code> is set, combining may only occur if (besides that the paths      * must be from the same repository) URLs of<code>paths</code> are formed of identical components, that is       * protocol name, host name, port number (if any) must match for all paths. Otherwise combining will not       * occur.         *       *<p/>      * Combined items will be committed in a single transaction.      *       *<p/>      * For details on other parameters, please, refer to       * {@link #doCommit(File[], boolean, String, SVNProperties, String[], boolean, boolean, SVNDepth)}.      *       * @param  paths            an array of local items which should be traversed      *                          to collect information on every changed item (one       *<b>SVNCommitItem</b> per each      *                          modified local item)      * @param  keepLocks        if<span class="javakeyword">true</span> and there are local items that       *                          were locked then these items will be left locked after      *                          traversing all of them, otherwise the items will be unlocked      * @param  force            forces collecting commit items for a non-recursive commit        * @param  depth            tree depth to process      * @param  combinePackets   whether combining commit packets into a single commit packet is allowed or not         * @param  changelists      changelist names array      * @return                  array of commit packets      * @throws SVNException     in the following cases:      *<ul>      *<li/>exception with {@link SVNErrorCode#ENTRY_MISSING_URL} error code - if       *                          working copy root of either path has no url      *</ul>           * @since                   1.2.0       */
specifier|public
name|SVNCommitPacket
index|[]
name|doCollectCommitItems
parameter_list|(
name|File
index|[]
name|paths
parameter_list|,
name|boolean
name|keepLocks
parameter_list|,
name|boolean
name|force
parameter_list|,
name|SVNDepth
name|depth
parameter_list|,
name|boolean
name|combinePackets
parameter_list|,
name|String
index|[]
name|changelists
parameter_list|)
throws|throws
name|SVNException
block|{
name|depth
operator|=
name|depth
operator|==
literal|null
condition|?
name|SVNDepth
operator|.
name|UNKNOWN
else|:
name|depth
expr_stmt|;
if|if
condition|(
name|depth
operator|==
name|SVNDepth
operator|.
name|UNKNOWN
condition|)
block|{
name|depth
operator|=
name|SVNDepth
operator|.
name|INFINITY
expr_stmt|;
block|}
if|if
condition|(
name|paths
operator|==
literal|null
operator|||
name|paths
operator|.
name|length
operator|==
literal|0
condition|)
block|{
return|return
operator|new
name|SVNCommitPacket
index|[
literal|0
index|]
return|;
block|}
name|Collection
name|packets
init|=
operator|new
name|ArrayList
argument_list|()
decl_stmt|;
name|Map
name|targets
init|=
operator|new
name|SVNHashMap
argument_list|()
decl_stmt|;
name|SVNStatusClient
name|statusClient
init|=
operator|new
name|SVNStatusClient
argument_list|(
name|getRepositoryPool
argument_list|()
argument_list|,
name|getOptions
argument_list|()
argument_list|)
decl_stmt|;
name|statusClient
operator|.
name|setEventHandler
argument_list|(
operator|new
name|ISVNEventHandler
argument_list|()
block|{
specifier|public
name|void
name|handleEvent
parameter_list|(
name|SVNEvent
name|event
parameter_list|,
name|double
name|progress
parameter_list|)
throws|throws
name|SVNException
block|{
block|}
specifier|public
name|void
name|checkCancelled
parameter_list|()
throws|throws
name|SVNCancelException
block|{
name|SVNCommitClient
operator|.
name|this
operator|.
name|checkCancelled
argument_list|()
expr_stmt|;
block|}
block|}
argument_list|)
expr_stmt|;
name|SVNWCAccess
index|[]
name|wcAccesses
init|=
name|SVNCommitUtil
operator|.
name|createCommitWCAccess2
argument_list|(
name|paths
argument_list|,
name|depth
argument_list|,
name|force
argument_list|,
name|targets
argument_list|,
name|statusClient
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|wcAccesses
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
name|SVNWCAccess
name|wcAccess
init|=
name|wcAccesses
index|[
name|i
index|]
decl_stmt|;
name|SVNAdminArea
index|[]
name|areas
init|=
name|wcAccess
operator|.
name|getAdminAreas
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|j
init|=
literal|0
init|;
name|areas
operator|!=
literal|null
operator|&&
name|j
operator|<
name|areas
operator|.
name|length
condition|;
name|j
operator|++
control|)
block|{
if|if
condition|(
name|areas
index|[
name|j
index|]
operator|!=
literal|null
condition|)
block|{
name|areas
index|[
name|j
index|]
operator|.
name|setCommitParameters
argument_list|(
name|getCommitParameters
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
name|Collection
name|targetPaths
init|=
operator|(
name|Collection
operator|)
name|targets
operator|.
name|get
argument_list|(
name|wcAccess
argument_list|)
decl_stmt|;
try|try
block|{
name|checkCancelled
argument_list|()
expr_stmt|;
name|Map
name|lockTokens
init|=
operator|new
name|SVNHashMap
argument_list|()
decl_stmt|;
name|Collection
name|changelistsSet
init|=
name|changelists
operator|!=
literal|null
condition|?
operator|new
name|SVNHashSet
argument_list|()
else|:
literal|null
decl_stmt|;
if|if
condition|(
name|changelists
operator|!=
literal|null
condition|)
block|{
for|for
control|(
name|int
name|j
init|=
literal|0
init|;
name|j
operator|<
name|changelists
operator|.
name|length
condition|;
name|j
operator|++
control|)
block|{
name|changelistsSet
operator|.
name|add
argument_list|(
name|changelists
index|[
name|j
index|]
argument_list|)
expr_stmt|;
block|}
block|}
name|SVNCommitItem
index|[]
name|commitItems
init|=
name|SVNCommitUtil
operator|.
name|harvestCommitables
argument_list|(
name|wcAccess
argument_list|,
name|targetPaths
argument_list|,
name|lockTokens
argument_list|,
operator|!
name|keepLocks
argument_list|,
name|depth
argument_list|,
name|force
argument_list|,
name|changelistsSet
argument_list|,
name|getCommitParameters
argument_list|()
argument_list|)
decl_stmt|;
name|checkCancelled
argument_list|()
expr_stmt|;
name|boolean
name|hasModifications
init|=
literal|false
decl_stmt|;
for|for
control|(
name|int
name|j
init|=
literal|0
init|;
name|commitItems
operator|!=
literal|null
operator|&&
name|j
operator|<
name|commitItems
operator|.
name|length
condition|;
name|j
operator|++
control|)
block|{
name|SVNCommitItem
name|commitItem
init|=
name|commitItems
index|[
name|j
index|]
decl_stmt|;
if|if
condition|(
name|commitItem
operator|.
name|isAdded
argument_list|()
operator|||
name|commitItem
operator|.
name|isDeleted
argument_list|()
operator|||
name|commitItem
operator|.
name|isContentsModified
argument_list|()
operator|||
name|commitItem
operator|.
name|isPropertiesModified
argument_list|()
operator|||
name|commitItem
operator|.
name|isCopied
argument_list|()
condition|)
block|{
name|hasModifications
operator|=
literal|true
expr_stmt|;
break|break;
block|}
block|}
if|if
condition|(
operator|!
name|hasModifications
condition|)
block|{
name|wcAccess
operator|.
name|close
argument_list|()
expr_stmt|;
continue|continue;
block|}
name|packets
operator|.
name|add
argument_list|(
operator|new
name|SVNCommitPacket
argument_list|(
name|wcAccess
argument_list|,
name|commitItems
argument_list|,
name|lockTokens
argument_list|)
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|SVNException
name|e
parameter_list|)
block|{
for|for
control|(
name|int
name|j
init|=
literal|0
init|;
name|j
operator|<
name|wcAccesses
operator|.
name|length
condition|;
name|j
operator|++
control|)
block|{
name|wcAccesses
index|[
name|j
index|]
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
if|if
condition|(
name|e
operator|instanceof
name|SVNCancelException
condition|)
block|{
throw|throw
name|e
throw|;
block|}
name|SVNErrorMessage
name|nestedErr
init|=
name|e
operator|.
name|getErrorMessage
argument_list|()
decl_stmt|;
name|SVNErrorMessage
name|err
init|=
name|SVNErrorMessage
operator|.
name|create
argument_list|(
name|nestedErr
operator|.
name|getErrorCode
argument_list|()
argument_list|,
literal|"Commit failed (details follow):"
argument_list|)
decl_stmt|;
name|SVNErrorManager
operator|.
name|error
argument_list|(
name|err
argument_list|,
name|e
argument_list|,
name|SVNLogType
operator|.
name|DEFAULT
argument_list|)
expr_stmt|;
block|}
block|}
name|SVNCommitPacket
index|[]
name|packetsArray
init|=
operator|(
name|SVNCommitPacket
index|[]
operator|)
name|packets
operator|.
name|toArray
argument_list|(
operator|new
name|SVNCommitPacket
index|[
name|packets
operator|.
name|size
argument_list|()
index|]
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|combinePackets
condition|)
block|{
return|return
name|packetsArray
return|;
block|}
name|Map
name|repoUUIDs
init|=
operator|new
name|SVNHashMap
argument_list|()
decl_stmt|;
name|Map
name|locktokensMap
init|=
operator|new
name|SVNHashMap
argument_list|()
decl_stmt|;
try|try
block|{
comment|// get wc root for each packet and uuid for each root.
comment|// group items by uuid.
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|packetsArray
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
name|checkCancelled
argument_list|()
expr_stmt|;
name|SVNCommitPacket
name|packet
init|=
name|packetsArray
index|[
name|i
index|]
decl_stmt|;
name|File
name|wcRoot
init|=
name|SVNWCUtil
operator|.
name|getWorkingCopyRoot
argument_list|(
name|packet
operator|.
name|getCommitItems
argument_list|()
index|[
literal|0
index|]
operator|.
name|getWCAccess
argument_list|()
operator|.
name|getAnchor
argument_list|()
argument_list|,
literal|true
argument_list|)
decl_stmt|;
name|SVNWCAccess
name|rootWCAccess
init|=
name|createWCAccess
argument_list|()
decl_stmt|;
name|String
name|uuid
init|=
literal|null
decl_stmt|;
name|SVNURL
name|url
init|=
literal|null
decl_stmt|;
try|try
block|{
name|SVNAdminArea
name|rootDir
init|=
name|rootWCAccess
operator|.
name|open
argument_list|(
name|wcRoot
argument_list|,
literal|false
argument_list|,
literal|0
argument_list|)
decl_stmt|;
name|uuid
operator|=
name|rootDir
operator|.
name|getEntry
argument_list|(
name|rootDir
operator|.
name|getThisDirName
argument_list|()
argument_list|,
literal|false
argument_list|)
operator|.
name|getUUID
argument_list|()
expr_stmt|;
name|url
operator|=
name|rootDir
operator|.
name|getEntry
argument_list|(
name|rootDir
operator|.
name|getThisDirName
argument_list|()
argument_list|,
literal|false
argument_list|)
operator|.
name|getSVNURL
argument_list|()
expr_stmt|;
block|}
finally|finally
block|{
name|rootWCAccess
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
name|checkCancelled
argument_list|()
expr_stmt|;
if|if
condition|(
name|uuid
operator|==
literal|null
condition|)
block|{
if|if
condition|(
name|url
operator|!=
literal|null
condition|)
block|{
name|SVNRepository
name|repos
init|=
name|createRepository
argument_list|(
name|url
argument_list|,
name|wcRoot
argument_list|,
name|rootWCAccess
argument_list|,
literal|true
argument_list|)
decl_stmt|;
name|uuid
operator|=
name|repos
operator|.
name|getRepositoryUUID
argument_list|(
literal|true
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|SVNErrorMessage
name|err
init|=
name|SVNErrorMessage
operator|.
name|create
argument_list|(
name|SVNErrorCode
operator|.
name|ENTRY_MISSING_URL
argument_list|,
literal|"''{0}'' has no URL"
argument_list|,
name|wcRoot
argument_list|)
decl_stmt|;
name|SVNErrorManager
operator|.
name|error
argument_list|(
name|err
argument_list|,
name|SVNLogType
operator|.
name|WC
argument_list|)
expr_stmt|;
block|}
block|}
comment|// also use protocol, host and port as a key, not only uuid.
name|uuid
operator|+=
name|url
operator|.
name|getProtocol
argument_list|()
operator|+
literal|":"
operator|+
name|url
operator|.
name|getHost
argument_list|()
operator|+
literal|":"
operator|+
name|url
operator|.
name|getPort
argument_list|()
operator|+
literal|":"
operator|+
name|url
operator|.
name|getUserInfo
argument_list|()
expr_stmt|;
if|if
condition|(
operator|!
name|repoUUIDs
operator|.
name|containsKey
argument_list|(
name|uuid
argument_list|)
condition|)
block|{
name|repoUUIDs
operator|.
name|put
argument_list|(
name|uuid
argument_list|,
operator|new
name|ArrayList
argument_list|()
argument_list|)
expr_stmt|;
name|locktokensMap
operator|.
name|put
argument_list|(
name|uuid
argument_list|,
operator|new
name|SVNHashMap
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|Collection
name|items
init|=
operator|(
name|Collection
operator|)
name|repoUUIDs
operator|.
name|get
argument_list|(
name|uuid
argument_list|)
decl_stmt|;
name|Map
name|lockTokens
init|=
operator|(
name|Map
operator|)
name|locktokensMap
operator|.
name|get
argument_list|(
name|uuid
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|j
init|=
literal|0
init|;
name|j
operator|<
name|packet
operator|.
name|getCommitItems
argument_list|()
operator|.
name|length
condition|;
name|j
operator|++
control|)
block|{
name|items
operator|.
name|add
argument_list|(
name|packet
operator|.
name|getCommitItems
argument_list|()
index|[
name|j
index|]
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|packet
operator|.
name|getLockTokens
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|lockTokens
operator|.
name|putAll
argument_list|(
name|packet
operator|.
name|getLockTokens
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|checkCancelled
argument_list|()
expr_stmt|;
block|}
name|packetsArray
operator|=
operator|new
name|SVNCommitPacket
index|[
name|repoUUIDs
operator|.
name|size
argument_list|()
index|]
expr_stmt|;
name|int
name|index
init|=
literal|0
decl_stmt|;
for|for
control|(
name|Iterator
name|roots
init|=
name|repoUUIDs
operator|.
name|keySet
argument_list|()
operator|.
name|iterator
argument_list|()
init|;
name|roots
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|checkCancelled
argument_list|()
expr_stmt|;
name|String
name|uuid
init|=
operator|(
name|String
operator|)
name|roots
operator|.
name|next
argument_list|()
decl_stmt|;
name|Collection
name|items
init|=
operator|(
name|Collection
operator|)
name|repoUUIDs
operator|.
name|get
argument_list|(
name|uuid
argument_list|)
decl_stmt|;
name|Map
name|lockTokens
init|=
operator|(
name|Map
operator|)
name|locktokensMap
operator|.
name|get
argument_list|(
name|uuid
argument_list|)
decl_stmt|;
name|SVNCommitItem
index|[]
name|itemsArray
init|=
operator|(
name|SVNCommitItem
index|[]
operator|)
name|items
operator|.
name|toArray
argument_list|(
operator|new
name|SVNCommitItem
index|[
name|items
operator|.
name|size
argument_list|()
index|]
argument_list|)
decl_stmt|;
name|packetsArray
index|[
name|index
operator|++
index|]
operator|=
operator|new
name|SVNCommitPacket
argument_list|(
literal|null
argument_list|,
name|itemsArray
argument_list|,
name|lockTokens
argument_list|)
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
name|SVNException
name|e
parameter_list|)
block|{
for|for
control|(
name|int
name|j
init|=
literal|0
init|;
name|j
operator|<
name|wcAccesses
operator|.
name|length
condition|;
name|j
operator|++
control|)
block|{
name|wcAccesses
index|[
name|j
index|]
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
if|if
condition|(
name|e
operator|instanceof
name|SVNCancelException
condition|)
block|{
throw|throw
name|e
throw|;
block|}
name|SVNErrorMessage
name|nestedErr
init|=
name|e
operator|.
name|getErrorMessage
argument_list|()
decl_stmt|;
name|SVNErrorMessage
name|err
init|=
name|SVNErrorMessage
operator|.
name|create
argument_list|(
name|nestedErr
operator|.
name|getErrorCode
argument_list|()
argument_list|,
literal|"Commit failed (details follow):"
argument_list|)
decl_stmt|;
name|SVNErrorManager
operator|.
name|error
argument_list|(
name|err
argument_list|,
name|e
argument_list|,
name|SVNLogType
operator|.
name|DEFAULT
argument_list|)
expr_stmt|;
block|}
return|return
name|packetsArray
return|;
block|}
specifier|private
name|void
name|addURLParents
parameter_list|(
name|List
name|targets
parameter_list|,
name|SVNURL
name|url
parameter_list|)
throws|throws
name|SVNException
block|{
name|SVNURL
name|parentURL
init|=
name|url
operator|.
name|removePathTail
argument_list|()
decl_stmt|;
name|SVNRepository
name|repos
init|=
name|createRepository
argument_list|(
name|parentURL
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|,
literal|true
argument_list|)
decl_stmt|;
name|SVNNodeKind
name|kind
init|=
name|repos
operator|.
name|checkPath
argument_list|(
literal|""
argument_list|,
name|SVNRepository
operator|.
name|INVALID_REVISION
argument_list|)
decl_stmt|;
if|if
condition|(
name|kind
operator|==
name|SVNNodeKind
operator|.
name|NONE
condition|)
block|{
name|addURLParents
argument_list|(
name|targets
argument_list|,
name|parentURL
argument_list|)
expr_stmt|;
block|}
name|targets
operator|.
name|add
argument_list|(
name|url
argument_list|)
expr_stmt|;
block|}
specifier|private
name|boolean
name|importDir
parameter_list|(
name|SVNDeltaGenerator
name|deltaGenerator
parameter_list|,
name|File
name|dir
parameter_list|,
name|String
name|importPath
parameter_list|,
name|boolean
name|useGlobalIgnores
parameter_list|,
name|boolean
name|ignoreUnknownNodeTypes
parameter_list|,
name|SVNDepth
name|depth
parameter_list|,
name|ISVNEditor
name|editor
parameter_list|)
throws|throws
name|SVNException
block|{
name|checkCancelled
argument_list|()
expr_stmt|;
name|File
index|[]
name|children
init|=
name|SVNFileListUtil
operator|.
name|listFiles
argument_list|(
name|dir
argument_list|)
decl_stmt|;
name|boolean
name|changed
init|=
literal|false
decl_stmt|;
name|ISVNFileFilter
name|filter
init|=
name|getCommitHandler
argument_list|()
operator|instanceof
name|ISVNFileFilter
condition|?
operator|(
name|ISVNFileFilter
operator|)
name|getCommitHandler
argument_list|()
else|:
literal|null
decl_stmt|;
name|Collection
name|ignores
init|=
name|useGlobalIgnores
condition|?
name|SVNStatusEditor
operator|.
name|getGlobalIgnores
argument_list|(
name|getOptions
argument_list|()
argument_list|)
else|:
literal|null
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|children
operator|!=
literal|null
operator|&&
name|i
operator|<
name|children
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
name|File
name|file
init|=
name|children
index|[
name|i
index|]
decl_stmt|;
if|if
condition|(
name|SVNFileUtil
operator|.
name|getAdminDirectoryName
argument_list|()
operator|.
name|equals
argument_list|(
name|file
operator|.
name|getName
argument_list|()
argument_list|)
condition|)
block|{
name|SVNEvent
name|skippedEvent
init|=
name|SVNEventFactory
operator|.
name|createSVNEvent
argument_list|(
name|file
argument_list|,
name|SVNNodeKind
operator|.
name|NONE
argument_list|,
literal|null
argument_list|,
name|SVNRepository
operator|.
name|INVALID_REVISION
argument_list|,
name|SVNEventAction
operator|.
name|SKIP
argument_list|,
name|SVNEventAction
operator|.
name|COMMIT_ADDED
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|)
decl_stmt|;
name|handleEvent
argument_list|(
name|skippedEvent
argument_list|,
name|ISVNEventHandler
operator|.
name|UNKNOWN
argument_list|)
expr_stmt|;
continue|continue;
block|}
if|if
condition|(
name|filter
operator|!=
literal|null
operator|&&
operator|!
name|filter
operator|.
name|accept
argument_list|(
name|file
argument_list|)
condition|)
block|{
continue|continue;
block|}
name|String
name|path
init|=
name|importPath
operator|==
literal|null
condition|?
name|file
operator|.
name|getName
argument_list|()
else|:
name|SVNPathUtil
operator|.
name|append
argument_list|(
name|importPath
argument_list|,
name|file
operator|.
name|getName
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|useGlobalIgnores
operator|&&
name|SVNStatusEditor
operator|.
name|isIgnored
argument_list|(
name|ignores
argument_list|,
name|file
argument_list|,
literal|"/"
operator|+
name|path
argument_list|)
condition|)
block|{
continue|continue;
block|}
name|SVNFileType
name|fileType
init|=
name|SVNFileType
operator|.
name|getType
argument_list|(
name|file
argument_list|)
decl_stmt|;
if|if
condition|(
name|fileType
operator|==
name|SVNFileType
operator|.
name|DIRECTORY
operator|&&
name|depth
operator|.
name|compareTo
argument_list|(
name|SVNDepth
operator|.
name|IMMEDIATES
argument_list|)
operator|>=
literal|0
condition|)
block|{
name|editor
operator|.
name|addDir
argument_list|(
name|path
argument_list|,
literal|null
argument_list|,
operator|-
literal|1
argument_list|)
expr_stmt|;
name|changed
operator||=
literal|true
expr_stmt|;
name|SVNEvent
name|event
init|=
name|SVNEventFactory
operator|.
name|createSVNEvent
argument_list|(
name|file
argument_list|,
name|SVNNodeKind
operator|.
name|DIR
argument_list|,
literal|null
argument_list|,
name|SVNRepository
operator|.
name|INVALID_REVISION
argument_list|,
name|SVNEventAction
operator|.
name|COMMIT_ADDED
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|)
decl_stmt|;
name|handleEvent
argument_list|(
name|event
argument_list|,
name|ISVNEventHandler
operator|.
name|UNKNOWN
argument_list|)
expr_stmt|;
name|SVNDepth
name|depthBelowHere
init|=
name|depth
decl_stmt|;
if|if
condition|(
name|depth
operator|==
name|SVNDepth
operator|.
name|IMMEDIATES
condition|)
block|{
name|depthBelowHere
operator|=
name|SVNDepth
operator|.
name|EMPTY
expr_stmt|;
block|}
name|importDir
argument_list|(
name|deltaGenerator
argument_list|,
name|file
argument_list|,
name|path
argument_list|,
name|useGlobalIgnores
argument_list|,
name|ignoreUnknownNodeTypes
argument_list|,
name|depthBelowHere
argument_list|,
name|editor
argument_list|)
expr_stmt|;
name|editor
operator|.
name|closeDir
argument_list|()
expr_stmt|;
block|}
if|else if
condition|(
operator|(
name|fileType
operator|==
name|SVNFileType
operator|.
name|FILE
operator|||
name|fileType
operator|==
name|SVNFileType
operator|.
name|SYMLINK
operator|)
operator|&&
name|depth
operator|.
name|compareTo
argument_list|(
name|SVNDepth
operator|.
name|FILES
argument_list|)
operator|>=
literal|0
condition|)
block|{
name|changed
operator||=
name|importFile
argument_list|(
name|deltaGenerator
argument_list|,
name|file
argument_list|,
name|fileType
argument_list|,
name|path
argument_list|,
name|editor
argument_list|)
expr_stmt|;
block|}
if|else if
condition|(
name|fileType
operator|!=
name|SVNFileType
operator|.
name|DIRECTORY
operator|&&
name|fileType
operator|!=
name|SVNFileType
operator|.
name|FILE
condition|)
block|{
if|if
condition|(
name|ignoreUnknownNodeTypes
condition|)
block|{
name|SVNEvent
name|skippedEvent
init|=
name|SVNEventFactory
operator|.
name|createSVNEvent
argument_list|(
name|file
argument_list|,
name|SVNNodeKind
operator|.
name|NONE
argument_list|,
literal|null
argument_list|,
name|SVNRepository
operator|.
name|INVALID_REVISION
argument_list|,
name|SVNEventAction
operator|.
name|SKIP
argument_list|,
name|SVNEventAction
operator|.
name|COMMIT_ADDED
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|)
decl_stmt|;
name|handleEvent
argument_list|(
name|skippedEvent
argument_list|,
name|ISVNEventHandler
operator|.
name|UNKNOWN
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|SVNErrorMessage
name|err
init|=
name|SVNErrorMessage
operator|.
name|create
argument_list|(
name|SVNErrorCode
operator|.
name|NODE_UNKNOWN_KIND
argument_list|,
literal|"Unknown or unversionable type for ''{0}''"
argument_list|,
name|file
argument_list|)
decl_stmt|;
name|SVNErrorManager
operator|.
name|error
argument_list|(
name|err
argument_list|,
name|SVNLogType
operator|.
name|WC
argument_list|)
expr_stmt|;
block|}
block|}
block|}
return|return
name|changed
return|;
block|}
specifier|private
name|boolean
name|importFile
parameter_list|(
name|SVNDeltaGenerator
name|deltaGenerator
parameter_list|,
name|File
name|file
parameter_list|,
name|SVNFileType
name|fileType
parameter_list|,
name|String
name|filePath
parameter_list|,
name|ISVNEditor
name|editor
parameter_list|)
throws|throws
name|SVNException
block|{
if|if
condition|(
name|fileType
operator|==
literal|null
operator|||
name|fileType
operator|==
name|SVNFileType
operator|.
name|UNKNOWN
condition|)
block|{
name|SVNErrorMessage
name|err
init|=
name|SVNErrorMessage
operator|.
name|create
argument_list|(
name|SVNErrorCode
operator|.
name|NODE_UNKNOWN_KIND
argument_list|,
literal|"unknown or unversionable type for ''{0}''"
argument_list|,
name|file
argument_list|)
decl_stmt|;
name|SVNErrorManager
operator|.
name|error
argument_list|(
name|err
argument_list|,
name|SVNLogType
operator|.
name|WC
argument_list|)
expr_stmt|;
block|}
name|editor
operator|.
name|addFile
argument_list|(
name|filePath
argument_list|,
literal|null
argument_list|,
operator|-
literal|1
argument_list|)
expr_stmt|;
name|String
name|mimeType
init|=
literal|null
decl_stmt|;
name|Map
name|autoProperties
init|=
operator|new
name|SVNHashMap
argument_list|()
decl_stmt|;
if|if
condition|(
name|fileType
operator|!=
name|SVNFileType
operator|.
name|SYMLINK
condition|)
block|{
name|autoProperties
operator|=
name|SVNPropertiesManager
operator|.
name|computeAutoProperties
argument_list|(
name|getOptions
argument_list|()
argument_list|,
name|file
argument_list|,
name|autoProperties
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|autoProperties
operator|.
name|put
argument_list|(
name|SVNProperty
operator|.
name|SPECIAL
argument_list|,
literal|"*"
argument_list|)
expr_stmt|;
block|}
for|for
control|(
name|Iterator
name|names
init|=
name|autoProperties
operator|.
name|keySet
argument_list|()
operator|.
name|iterator
argument_list|()
init|;
name|names
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|String
name|name
init|=
operator|(
name|String
operator|)
name|names
operator|.
name|next
argument_list|()
decl_stmt|;
name|String
name|value
init|=
operator|(
name|String
operator|)
name|autoProperties
operator|.
name|get
argument_list|(
name|name
argument_list|)
decl_stmt|;
if|if
condition|(
name|SVNProperty
operator|.
name|EOL_STYLE
operator|.
name|equals
argument_list|(
name|name
argument_list|)
operator|&&
name|value
operator|!=
literal|null
condition|)
block|{
if|if
condition|(
name|SVNProperty
operator|.
name|isBinaryMimeType
argument_list|(
operator|(
name|String
operator|)
name|autoProperties
operator|.
name|get
argument_list|(
name|SVNProperty
operator|.
name|MIME_TYPE
argument_list|)
argument_list|)
condition|)
block|{
continue|continue;
block|}
if|else if
condition|(
operator|!
name|SVNTranslator
operator|.
name|checkNewLines
argument_list|(
name|file
argument_list|)
condition|)
block|{
continue|continue;
block|}
block|}
if|if
condition|(
name|SVNProperty
operator|.
name|CHARSET
operator|.
name|equals
argument_list|(
name|name
argument_list|)
operator|&&
name|value
operator|!=
literal|null
condition|)
block|{
if|if
condition|(
name|SVNProperty
operator|.
name|isBinaryMimeType
argument_list|(
operator|(
name|String
operator|)
name|autoProperties
operator|.
name|get
argument_list|(
name|SVNProperty
operator|.
name|MIME_TYPE
argument_list|)
argument_list|)
condition|)
block|{
continue|continue;
block|}
try|try
block|{
name|SVNTranslator
operator|.
name|getCharset
argument_list|(
name|value
argument_list|,
name|filePath
argument_list|,
name|getOptions
argument_list|()
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|SVNException
name|e
parameter_list|)
block|{
continue|continue;
block|}
block|}
name|editor
operator|.
name|changeFileProperty
argument_list|(
name|filePath
argument_list|,
name|name
argument_list|,
name|SVNPropertyValue
operator|.
name|create
argument_list|(
name|value
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|// send "adding"
name|SVNEvent
name|addedEvent
init|=
name|SVNEventFactory
operator|.
name|createSVNEvent
argument_list|(
name|file
argument_list|,
name|SVNNodeKind
operator|.
name|FILE
argument_list|,
name|mimeType
argument_list|,
name|SVNRepository
operator|.
name|INVALID_REVISION
argument_list|,
name|SVNEventAction
operator|.
name|COMMIT_ADDED
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|)
decl_stmt|;
name|handleEvent
argument_list|(
name|addedEvent
argument_list|,
name|ISVNEventHandler
operator|.
name|UNKNOWN
argument_list|)
expr_stmt|;
comment|// translate and send file.
name|String
name|charset
init|=
name|SVNTranslator
operator|.
name|getCharset
argument_list|(
operator|(
name|String
operator|)
name|autoProperties
operator|.
name|get
argument_list|(
name|SVNProperty
operator|.
name|CHARSET
argument_list|)
argument_list|,
name|file
operator|.
name|getPath
argument_list|()
argument_list|,
name|getOptions
argument_list|()
argument_list|)
decl_stmt|;
name|String
name|eolStyle
init|=
operator|(
name|String
operator|)
name|autoProperties
operator|.
name|get
argument_list|(
name|SVNProperty
operator|.
name|EOL_STYLE
argument_list|)
decl_stmt|;
name|String
name|keywords
init|=
operator|(
name|String
operator|)
name|autoProperties
operator|.
name|get
argument_list|(
name|SVNProperty
operator|.
name|KEYWORDS
argument_list|)
decl_stmt|;
name|boolean
name|special
init|=
name|autoProperties
operator|.
name|get
argument_list|(
name|SVNProperty
operator|.
name|SPECIAL
argument_list|)
operator|!=
literal|null
decl_stmt|;
name|File
name|tmpFile
init|=
literal|null
decl_stmt|;
if|if
condition|(
name|charset
operator|!=
literal|null
operator|||
name|eolStyle
operator|!=
literal|null
operator|||
name|keywords
operator|!=
literal|null
operator|||
name|special
condition|)
block|{
name|byte
index|[]
name|eolBytes
init|=
name|SVNTranslator
operator|.
name|getBaseEOL
argument_list|(
name|eolStyle
argument_list|)
decl_stmt|;
name|Map
name|keywordsMap
init|=
name|keywords
operator|!=
literal|null
condition|?
name|SVNTranslator
operator|.
name|computeKeywords
argument_list|(
name|keywords
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|,
name|getOptions
argument_list|()
argument_list|)
else|:
literal|null
decl_stmt|;
name|tmpFile
operator|=
name|SVNFileUtil
operator|.
name|createTempFile
argument_list|(
literal|"import"
argument_list|,
literal|".tmp"
argument_list|)
expr_stmt|;
name|SVNTranslator
operator|.
name|translate
argument_list|(
name|file
argument_list|,
name|tmpFile
argument_list|,
name|charset
argument_list|,
name|eolBytes
argument_list|,
name|keywordsMap
argument_list|,
name|special
argument_list|,
literal|false
argument_list|)
expr_stmt|;
block|}
name|File
name|importedFile
init|=
name|tmpFile
operator|!=
literal|null
condition|?
name|tmpFile
else|:
name|file
decl_stmt|;
name|InputStream
name|is
init|=
literal|null
decl_stmt|;
name|String
name|checksum
init|=
literal|null
decl_stmt|;
try|try
block|{
name|is
operator|=
name|SVNFileUtil
operator|.
name|openFileForReading
argument_list|(
name|importedFile
argument_list|,
name|SVNLogType
operator|.
name|WC
argument_list|)
expr_stmt|;
name|editor
operator|.
name|applyTextDelta
argument_list|(
name|filePath
argument_list|,
literal|null
argument_list|)
expr_stmt|;
name|checksum
operator|=
name|deltaGenerator
operator|.
name|sendDelta
argument_list|(
name|filePath
argument_list|,
name|is
argument_list|,
name|editor
argument_list|,
literal|true
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
name|SVNFileUtil
operator|.
name|closeFile
argument_list|(
name|is
argument_list|)
expr_stmt|;
name|SVNFileUtil
operator|.
name|deleteFile
argument_list|(
name|tmpFile
argument_list|)
expr_stmt|;
block|}
name|editor
operator|.
name|closeFile
argument_list|(
name|filePath
argument_list|,
name|checksum
argument_list|)
expr_stmt|;
return|return
literal|true
return|;
block|}
specifier|private
specifier|static
name|boolean
name|hasProcessedParents
parameter_list|(
name|Collection
name|paths
parameter_list|,
name|String
name|path
parameter_list|)
throws|throws
name|SVNException
block|{
name|path
operator|=
name|SVNPathUtil
operator|.
name|removeTail
argument_list|(
name|path
argument_list|)
expr_stmt|;
if|if
condition|(
name|paths
operator|.
name|contains
argument_list|(
name|path
argument_list|)
condition|)
block|{
return|return
literal|true
return|;
block|}
if|if
condition|(
literal|""
operator|.
name|equals
argument_list|(
name|path
argument_list|)
condition|)
block|{
return|return
literal|false
return|;
block|}
return|return
name|hasProcessedParents
argument_list|(
name|paths
argument_list|,
name|path
argument_list|)
return|;
block|}
specifier|static
name|String
name|validateCommitMessage
parameter_list|(
name|String
name|message
parameter_list|)
block|{
if|if
condition|(
name|message
operator|==
literal|null
condition|)
block|{
return|return
name|message
return|;
block|}
name|message
operator|=
name|message
operator|.
name|replaceAll
argument_list|(
literal|"\r\n"
argument_list|,
literal|"\n"
argument_list|)
expr_stmt|;
name|message
operator|=
name|message
operator|.
name|replace
argument_list|(
literal|'\r'
argument_list|,
literal|'\n'
argument_list|)
expr_stmt|;
return|return
name|message
return|;
block|}
block|}
end_class

end_unit

