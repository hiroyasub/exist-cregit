begin_unit|revision:1.0.0;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * ====================================================================  * Copyright (c) 2004-2010 TMate Software Ltd.  All rights reserved.  *  * This software is licensed as described in the file COPYING, which  * you should have received as part of this distribution.  The terms  * are also available at http://svnkit.com/license.html  * If newer versions of this license are posted there, you may use a  * newer version instead, at your option.  * ====================================================================  */
end_comment

begin_package
package|package
name|org
operator|.
name|exist
operator|.
name|versioning
operator|.
name|svn
operator|.
name|wc
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|File
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collection
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Iterator
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|versioning
operator|.
name|svn
operator|.
name|internal
operator|.
name|wc
operator|.
name|SVNCancellableEditor
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|versioning
operator|.
name|svn
operator|.
name|internal
operator|.
name|wc
operator|.
name|SVNErrorManager
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|versioning
operator|.
name|svn
operator|.
name|internal
operator|.
name|wc
operator|.
name|SVNEventFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|versioning
operator|.
name|svn
operator|.
name|internal
operator|.
name|wc
operator|.
name|SVNExternal
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|versioning
operator|.
name|svn
operator|.
name|internal
operator|.
name|wc
operator|.
name|SVNFileType
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|versioning
operator|.
name|svn
operator|.
name|internal
operator|.
name|wc
operator|.
name|SVNRemoteStatusEditor
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|versioning
operator|.
name|svn
operator|.
name|internal
operator|.
name|wc
operator|.
name|SVNStatusEditor
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|versioning
operator|.
name|svn
operator|.
name|internal
operator|.
name|wc
operator|.
name|SVNStatusReporter
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|versioning
operator|.
name|svn
operator|.
name|internal
operator|.
name|wc
operator|.
name|admin
operator|.
name|SVNAdminArea
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|versioning
operator|.
name|svn
operator|.
name|internal
operator|.
name|wc
operator|.
name|admin
operator|.
name|SVNAdminAreaFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|versioning
operator|.
name|svn
operator|.
name|internal
operator|.
name|wc
operator|.
name|admin
operator|.
name|SVNAdminAreaInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|versioning
operator|.
name|svn
operator|.
name|internal
operator|.
name|wc
operator|.
name|admin
operator|.
name|SVNEntry
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|versioning
operator|.
name|svn
operator|.
name|internal
operator|.
name|wc
operator|.
name|admin
operator|.
name|SVNReporter
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|versioning
operator|.
name|svn
operator|.
name|internal
operator|.
name|wc
operator|.
name|admin
operator|.
name|SVNWCAccess
import|;
end_import

begin_import
import|import
name|org
operator|.
name|tmatesoft
operator|.
name|svn
operator|.
name|core
operator|.
name|SVNCancelException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|tmatesoft
operator|.
name|svn
operator|.
name|core
operator|.
name|SVNDepth
import|;
end_import

begin_import
import|import
name|org
operator|.
name|tmatesoft
operator|.
name|svn
operator|.
name|core
operator|.
name|SVNErrorCode
import|;
end_import

begin_import
import|import
name|org
operator|.
name|tmatesoft
operator|.
name|svn
operator|.
name|core
operator|.
name|SVNErrorMessage
import|;
end_import

begin_import
import|import
name|org
operator|.
name|tmatesoft
operator|.
name|svn
operator|.
name|core
operator|.
name|SVNException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|tmatesoft
operator|.
name|svn
operator|.
name|core
operator|.
name|SVNNodeKind
import|;
end_import

begin_import
import|import
name|org
operator|.
name|tmatesoft
operator|.
name|svn
operator|.
name|core
operator|.
name|SVNURL
import|;
end_import

begin_import
import|import
name|org
operator|.
name|tmatesoft
operator|.
name|svn
operator|.
name|core
operator|.
name|auth
operator|.
name|ISVNAuthenticationManager
import|;
end_import

begin_import
import|import
name|org
operator|.
name|tmatesoft
operator|.
name|svn
operator|.
name|core
operator|.
name|internal
operator|.
name|util
operator|.
name|SVNPathUtil
import|;
end_import

begin_import
import|import
name|org
operator|.
name|tmatesoft
operator|.
name|svn
operator|.
name|core
operator|.
name|io
operator|.
name|ISVNEditor
import|;
end_import

begin_import
import|import
name|org
operator|.
name|tmatesoft
operator|.
name|svn
operator|.
name|core
operator|.
name|io
operator|.
name|SVNCapability
import|;
end_import

begin_import
import|import
name|org
operator|.
name|tmatesoft
operator|.
name|svn
operator|.
name|core
operator|.
name|io
operator|.
name|SVNRepository
import|;
end_import

begin_import
import|import
name|org
operator|.
name|tmatesoft
operator|.
name|svn
operator|.
name|core
operator|.
name|wc
operator|.
name|ISVNRepositoryPool
import|;
end_import

begin_import
import|import
name|org
operator|.
name|tmatesoft
operator|.
name|svn
operator|.
name|core
operator|.
name|wc
operator|.
name|ISVNStatusFileProvider
import|;
end_import

begin_import
import|import
name|org
operator|.
name|tmatesoft
operator|.
name|svn
operator|.
name|core
operator|.
name|wc
operator|.
name|SVNRevision
import|;
end_import

begin_import
import|import
name|org
operator|.
name|tmatesoft
operator|.
name|svn
operator|.
name|util
operator|.
name|SVNLogType
import|;
end_import

begin_comment
comment|/**  * The<b>SVNStatusClient</b> class provides methods for obtaining information on the   * status of Working Copy items.  * The functionality of<b>SVNStatusClient</b> corresponds to the<code>'svn status'</code> command   * of the native SVN command line client.   *   *<p>  * One of the main advantages of<b>SVNStatusClient</b> lies in that fact  * that for each processed item the status information is collected and put into  * an<b>SVNStatus</b> object. Further there are two ways how this object  * can be passed to a developer (depending on the version of the<b>doStatus()</b>  * method that was invoked):  *<ol>  *<li>the<b>SVNStatus</b> can be passed to a   * developer's status handler (that should implement<b>ISVNStatusHandler</b>)  * in which the developer retrieves status information and decides how to interprete that  * info;    *<li> another way is that an appropriate<b>doStatus()</b> method  * just returns that<b>SVNStatus</b> object.  *</ol>  * Those methods that match the first variant can be called recursively - obtaining   * status information for all child entries, the second variant just the reverse  -   * methods are called non-recursively and allow to get status info on a single   * item.   *   * @version 1.3  * @author  TMate Software Ltd.  * @since   1.2  * @see		ISVNStatusHandler  * @see		SVNStatus  * @see<a target="_top" href="http://svnkit.com/kb/examples/">Examples</a>  */
end_comment

begin_class
specifier|public
class|class
name|SVNStatusClient
extends|extends
name|SVNBasicClient
block|{
specifier|private
name|ISVNStatusFileProvider
name|myFilesProvider
decl_stmt|;
comment|/**      * Constructs and initializes an<b>SVNStatusClient</b> object      * with the specified run-time configuration and authentication       * drivers.      *       *<p>      * If<code>options</code> is<span class="javakeyword">null</span>,      * then this<b>SVNStatusClient</b> will be using a default run-time      * configuration driver  which takes client-side settings from the       * default SVN's run-time configuration area but is not able to      * change those settings (read more on {@link ISVNOptions} and {@link SVNWCUtil}).        *       *<p>      * If<code>authManager</code> is<span class="javakeyword">null</span>,      * then this<b>SVNStatusClient</b> will be using a default authentication      * and network layers driver (see {@link SVNWCUtil#createDefaultAuthenticationManager()})      * which uses server-side settings and auth storage from the       * default SVN's run-time configuration area (or system properties      * if that area is not found).      *       * @param authManager an authentication and network layers driver      * @param options     a run-time configuration options driver           */
specifier|public
name|SVNStatusClient
parameter_list|(
name|ISVNAuthenticationManager
name|authManager
parameter_list|,
name|ISVNOptions
name|options
parameter_list|)
block|{
name|super
argument_list|(
name|authManager
argument_list|,
name|options
argument_list|)
expr_stmt|;
block|}
comment|/**      * Constructs and initializes an<b>SVNStatusClient</b> object      * with the specified run-time configuration and repository pool object.      *       *<p/>      * If<code>options</code> is<span class="javakeyword">null</span>,      * then this<b>SVNStatusClient</b> will be using a default run-time      * configuration driver  which takes client-side settings from the      * default SVN's run-time configuration area but is not able to      * change those settings (read more on {@link ISVNOptions} and {@link SVNWCUtil}).      *       *<p/>      * If<code>repositoryPool</code> is<span class="javakeyword">null</span>,      * then {@link org.tmatesoft.svn.core.io.SVNRepositoryFactory} will be used to create {@link SVNRepository repository access objects}.      *      * @param repositoryPool   a repository pool object      * @param options          a run-time configuration options driver      */
specifier|public
name|SVNStatusClient
parameter_list|(
name|ISVNRepositoryPool
name|repositoryPool
parameter_list|,
name|ISVNOptions
name|options
parameter_list|)
block|{
name|super
argument_list|(
name|repositoryPool
argument_list|,
name|options
argument_list|)
expr_stmt|;
block|}
comment|/**      * Collects status information on Working Copy items and passes      * it to a<code>handler</code>.       *       * @param  path				local item's path      * @param  recursive		relevant only if<code>path</code> denotes a directory:      *<span class="javakeyword">true</span> to obtain status info recursively for all      * 							child entries,<span class="javakeyword">false</span> only for items located immediately      * 							in the directory itself        * @param  remote<span class="javakeyword">true</span> to check up the status of the item in the repository,      * 							that will tell if the local item is out-of-date (like<i>'-u'</i> option in the      * 							SVN client's<code>'svn status'</code> command), otherwise       *<span class="javakeyword">false</span>      * @param  reportAll<span class="javakeyword">true</span> to collect status information on those items that are in a       *<i>'normal'</i> state (unchanged), otherwise<span class="javakeyword">false</span>      * @param  includeIgnored<span class="javakeyword">true</span> to force the operation to collect information      * 							on items that were set to be ignored (like<i>'--no-ignore'</i> option in the SVN       * 							client's<i>'svn status'</i> command to disregard default and<i>'svn:ignore'</i> property      * 							ignores), otherwise<span class="javakeyword">false</span>        * @param  handler			a caller's status handler that will be involved      * 							in processing status information      * @return                  the revision number the status information was collected      *                          against      * @throws SVNException      * @see	                    ISVNStatusHandler      * @deprecated              use {@link #doStatus(File, SVNRevision, SVNDepth, boolean, boolean, boolean, boolean, ISVNStatusHandler, Collection)}      *                          instead      */
specifier|public
name|long
name|doStatus
parameter_list|(
name|File
name|path
parameter_list|,
name|boolean
name|recursive
parameter_list|,
name|boolean
name|remote
parameter_list|,
name|boolean
name|reportAll
parameter_list|,
name|boolean
name|includeIgnored
parameter_list|,
name|ISVNStatusHandler
name|handler
parameter_list|)
throws|throws
name|SVNException
block|{
return|return
name|doStatus
argument_list|(
name|path
argument_list|,
name|SVNRevision
operator|.
name|HEAD
argument_list|,
name|SVNDepth
operator|.
name|fromRecurse
argument_list|(
name|recursive
argument_list|)
argument_list|,
name|remote
argument_list|,
name|reportAll
argument_list|,
name|includeIgnored
argument_list|,
literal|false
argument_list|,
name|handler
argument_list|,
literal|null
argument_list|)
return|;
block|}
comment|/**      * Collects status information on Working Copy items and passes      * it to a<code>handler</code>.       *      *<p>      * Calling this method is equivalent to       *<code>doStatus(path, SVNRevision.HEAD, recursive, remote, reportAll, includeIgnored, collectParentExternals, handler)</code>.      *        * @param  path							local item's path      * @param  recursive					relevant only if<code>path</code> denotes a directory:      *<span class="javakeyword">true</span> to obtain status info recursively for all      * 										child entries,<span class="javakeyword">false</span> only for items located       * 										immediately in the directory itself      * @param  remote<span class="javakeyword">true</span> to check up the status of the item in the repository,      * 										that will tell if the local item is out-of-date (like<i>'-u'</i> option in the      * 										SVN client's<code>'svn status'</code> command),       * 										otherwise<span class="javakeyword">false</span>      * @param  reportAll<span class="javakeyword">true</span> to collect status information on all items including those ones that are in a       *<i>'normal'</i> state (unchanged), otherwise<span class="javakeyword">false</span>      * @param  includeIgnored<span class="javakeyword">true</span> to force the operation to collect information      * 										on items that were set to be ignored (like<i>'--no-ignore'</i> option in the SVN       * 										client's<code>'svn status'</code> command to disregard default and<i>'svn:ignore'</i> property      * 										ignores), otherwise<span class="javakeyword">false</span>      * @param  collectParentExternals<span class="javakeyword">false</span> to make the operation ignore information      * 										on externals definitions (like<i>'--ignore-externals'</i> option in the SVN      * 										client's<code>'svn status'</code> command), otherwise<span class="javakeyword">true</span>      * @param  handler						a caller's status handler that will be involved      * 										in processing status information      * @return								the revision number the status information was collected      * 										against      * @throws SVNException      * @deprecated                          use {@link #doStatus(File, SVNRevision, SVNDepth, boolean, boolean, boolean, boolean, ISVNStatusHandler, Collection)}      *                                      instead      */
specifier|public
name|long
name|doStatus
parameter_list|(
name|File
name|path
parameter_list|,
name|boolean
name|recursive
parameter_list|,
name|boolean
name|remote
parameter_list|,
name|boolean
name|reportAll
parameter_list|,
name|boolean
name|includeIgnored
parameter_list|,
name|boolean
name|collectParentExternals
parameter_list|,
specifier|final
name|ISVNStatusHandler
name|handler
parameter_list|)
throws|throws
name|SVNException
block|{
return|return
name|doStatus
argument_list|(
name|path
argument_list|,
name|SVNRevision
operator|.
name|HEAD
argument_list|,
name|SVNDepth
operator|.
name|fromRecurse
argument_list|(
name|recursive
argument_list|)
argument_list|,
name|remote
argument_list|,
name|reportAll
argument_list|,
name|includeIgnored
argument_list|,
name|collectParentExternals
argument_list|,
name|handler
argument_list|,
literal|null
argument_list|)
return|;
block|}
comment|/**      * Collects status information on Working Copy items and passes      * it to a<code>handler</code>.       *       * @param  path                         local item's path      * @param  revision                     if<code>remote</code> is<span class="javakeyword">true</span>      *                                      this revision is used to calculate status against      * @param  recursive                    relevant only if<code>path</code> denotes a directory:      *<span class="javakeyword">true</span> to obtain status info recursively for all      *                                      child entries,<span class="javakeyword">false</span> only for items located       *                                      immediately in the directory itself      * @param  remote<span class="javakeyword">true</span> to check up the status of the item in the repository,      *                                      that will tell if the local item is out-of-date (like<i>'-u'</i> option in the      *                                      SVN client's<code>'svn status'</code> command),       *                                      otherwise<span class="javakeyword">false</span>      * @param  reportAll<span class="javakeyword">true</span> to collect status information on all items including those ones that are in a       *<i>'normal'</i> state (unchanged), otherwise<span class="javakeyword">false</span>      * @param  includeIgnored<span class="javakeyword">true</span> to force the operation to collect information      *                                      on items that were set to be ignored (like<i>'--no-ignore'</i> option in the SVN       *                                      client's<code>'svn status'</code> command to disregard default and<i>'svn:ignore'</i> property      *                                      ignores), otherwise<span class="javakeyword">false</span>      * @param  collectParentExternals<span class="javakeyword">false</span> to make the operation ignore information      *                                      on externals definitions (like<i>'--ignore-externals'</i> option in the SVN      *                                      client's<code>'svn status'</code> command), otherwise<span class="javakeyword">true</span>      * @param  handler                      a caller's status handler that will be involved      *                                      in processing status information      * @return                              the revision number the status information was collected      *                                      against      * @throws SVNException      * @deprecated                          use {@link #doStatus(File, SVNRevision, SVNDepth, boolean, boolean, boolean, boolean, ISVNStatusHandler, Collection)}      *                                      instead      */
specifier|public
name|long
name|doStatus
parameter_list|(
name|File
name|path
parameter_list|,
name|SVNRevision
name|revision
parameter_list|,
name|boolean
name|recursive
parameter_list|,
name|boolean
name|remote
parameter_list|,
name|boolean
name|reportAll
parameter_list|,
name|boolean
name|includeIgnored
parameter_list|,
name|boolean
name|collectParentExternals
parameter_list|,
specifier|final
name|ISVNStatusHandler
name|handler
parameter_list|)
throws|throws
name|SVNException
block|{
return|return
name|doStatus
argument_list|(
name|path
argument_list|,
name|revision
argument_list|,
name|SVNDepth
operator|.
name|fromRecurse
argument_list|(
name|recursive
argument_list|)
argument_list|,
name|remote
argument_list|,
name|reportAll
argument_list|,
name|includeIgnored
argument_list|,
name|collectParentExternals
argument_list|,
name|handler
argument_list|,
literal|null
argument_list|)
return|;
block|}
comment|/**      * Given a<code>path</code> to a working copy directory (or single file), calls<code>handler</code>       * with a set of {@link SVNStatus} objects which describe the status of the<code>path</code>, and its       * children (recursing according to<code>depth</code>).      *       *<p/>      * If<code>reportAll</code> is set, retrieves all entries; otherwise, retrieves only "interesting" entries       * (local modifications and/or out of date).      *      *<p/>      * If<code>remote</code> is set, contacts the repository and augments the status objects with information       * about out-of-dateness (with respect to<code>revision</code>).       *             *<p/>      * If {@link #isIgnoreExternals()} returns<span class="javakeyword">false</span>, then recurses into       * externals definitions (if any exist and<code>depth</code> is either {@link SVNDepth#INFINITY} or       * {@link SVNDepth#UNKNOWN}) after handling the main target. This calls the client notification       * handler ({@link ISVNEventHandler}) with the {@link SVNEventAction#STATUS_EXTERNAL} action before       * handling each externals definition, and with {@link SVNEventAction#STATUS_COMPLETED} after each.      *      *<p/>      *<code>changeLists</code> is a collection of<code>String</code> changelist names, used as a restrictive       * filter on items whose statuses are reported; that is, doesn't report status about any item unless      * it's a member of one of those changelists. If<code>changeLists</code> is empty (or       *<span class="javakeyword">null</span>), no changelist filtering occurs.      *      * @param  path                    working copy path       * @param  revision                if<code>remote</code> is<span class="javakeyword">true</span>,      *                                 status is calculated against this revision      * @param  depth                   tree depth to process      * @param  remote<span class="javakeyword">true</span> to check up the status of the item       *                                 in the repository, that will tell if the local item is out-of-date (like       *<i>'-u'</i> option in the SVN client's<code>'svn status'</code> command),       *                                 otherwise<span class="javakeyword">false</span>      * @param  reportAll<span class="javakeyword">true</span> to collect status information on all items including those ones that are in a       *<i>'normal'</i> state (unchanged), otherwise<span class="javakeyword">false</span>      * @param  includeIgnored<span class="javakeyword">true</span> to force the operation to collect information      *                                 on items that were set to be ignored (like<i>'--no-ignore'</i> option in the SVN       *                                 client's<code>'svn status'</code> command to disregard default and<i>'svn:ignore'</i> property      *                                 ignores), otherwise<span class="javakeyword">false</span>      * @param  collectParentExternals  obsolete (not used)      * @param  handler                 a caller's status handler that will be involved      *                                 in processing status information      * @param  changeLists             collection with changelist names      * @return                         returns the actual revision against which the working copy was compared;      *                                 the return value is not meaningful (-1) unless<code>remote</code> is set       * @throws SVNException       * @since                          1.2, SVN 1.5      */
specifier|public
name|long
name|doStatus
parameter_list|(
name|File
name|path
parameter_list|,
name|SVNRevision
name|revision
parameter_list|,
name|SVNDepth
name|depth
parameter_list|,
name|boolean
name|remote
parameter_list|,
name|boolean
name|reportAll
parameter_list|,
name|boolean
name|includeIgnored
parameter_list|,
name|boolean
name|collectParentExternals
parameter_list|,
specifier|final
name|ISVNStatusHandler
name|handler
parameter_list|,
specifier|final
name|Collection
name|changeLists
parameter_list|)
throws|throws
name|SVNException
block|{
if|if
condition|(
name|handler
operator|==
literal|null
condition|)
block|{
return|return
operator|-
literal|1
return|;
block|}
name|depth
operator|=
name|depth
operator|==
literal|null
condition|?
name|SVNDepth
operator|.
name|UNKNOWN
else|:
name|depth
expr_stmt|;
name|SVNWCAccess
name|wcAccess
init|=
name|createWCAccess
argument_list|()
decl_stmt|;
name|SVNStatusEditor
name|editor
init|=
literal|null
decl_stmt|;
specifier|final
name|boolean
index|[]
name|deletedInRepository
init|=
operator|new
name|boolean
index|[]
block|{
literal|false
block|}
decl_stmt|;
name|ISVNStatusHandler
name|realHandler
init|=
operator|new
name|ISVNStatusHandler
argument_list|()
block|{
specifier|public
name|void
name|handleStatus
parameter_list|(
name|SVNStatus
name|status
parameter_list|)
throws|throws
name|SVNException
block|{
if|if
condition|(
name|deletedInRepository
index|[
literal|0
index|]
operator|&&
name|status
operator|.
name|getEntry
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|status
operator|.
name|setRemoteStatus
argument_list|(
name|SVNStatusType
operator|.
name|STATUS_DELETED
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
operator|!
name|SVNWCAccess
operator|.
name|matchesChangeList
argument_list|(
name|changeLists
argument_list|,
name|status
operator|.
name|getEntry
argument_list|()
argument_list|)
condition|)
block|{
return|return;
block|}
name|handler
operator|.
name|handleStatus
argument_list|(
name|status
argument_list|)
expr_stmt|;
block|}
block|}
decl_stmt|;
try|try
block|{
name|SVNAdminAreaInfo
name|info
init|=
literal|null
decl_stmt|;
try|try
block|{
name|SVNAdminArea
name|anchor
init|=
name|wcAccess
operator|.
name|open
argument_list|(
name|path
argument_list|,
literal|false
argument_list|,
name|SVNDepth
operator|.
name|recurseFromDepth
argument_list|(
name|depth
argument_list|)
condition|?
operator|-
literal|1
else|:
literal|1
argument_list|)
decl_stmt|;
name|info
operator|=
operator|new
name|SVNAdminAreaInfo
argument_list|(
name|wcAccess
argument_list|,
name|anchor
argument_list|,
name|anchor
argument_list|,
literal|""
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|SVNException
name|svne
parameter_list|)
block|{
if|if
condition|(
name|svne
operator|.
name|getErrorMessage
argument_list|()
operator|.
name|getErrorCode
argument_list|()
operator|==
name|SVNErrorCode
operator|.
name|WC_NOT_DIRECTORY
condition|)
block|{
name|info
operator|=
name|wcAccess
operator|.
name|openAnchor
argument_list|(
name|path
argument_list|,
literal|false
argument_list|,
name|SVNDepth
operator|.
name|recurseFromDepth
argument_list|(
name|depth
argument_list|)
condition|?
operator|-
literal|1
else|:
literal|1
argument_list|)
expr_stmt|;
if|if
condition|(
name|depth
operator|==
name|SVNDepth
operator|.
name|EMPTY
condition|)
block|{
name|depth
operator|=
name|SVNDepth
operator|.
name|IMMEDIATES
expr_stmt|;
block|}
block|}
else|else
block|{
throw|throw
name|svne
throw|;
block|}
block|}
name|SVNEntry
name|entry
init|=
literal|null
decl_stmt|;
if|if
condition|(
name|remote
condition|)
block|{
name|SVNAdminArea
name|anchor
init|=
name|info
operator|.
name|getAnchor
argument_list|()
decl_stmt|;
name|entry
operator|=
name|wcAccess
operator|.
name|getVersionedEntry
argument_list|(
name|anchor
operator|.
name|getRoot
argument_list|()
argument_list|,
literal|false
argument_list|)
expr_stmt|;
if|if
condition|(
name|entry
operator|.
name|getURL
argument_list|()
operator|==
literal|null
condition|)
block|{
name|SVNErrorMessage
name|error
init|=
name|SVNErrorMessage
operator|.
name|create
argument_list|(
name|SVNErrorCode
operator|.
name|ENTRY_MISSING_URL
argument_list|,
literal|"Entry ''{0}'' has no URL"
argument_list|,
name|info
operator|.
name|getAnchor
argument_list|()
operator|.
name|getRoot
argument_list|()
argument_list|)
decl_stmt|;
name|SVNErrorManager
operator|.
name|error
argument_list|(
name|error
argument_list|,
name|SVNLogType
operator|.
name|WC
argument_list|)
expr_stmt|;
block|}
name|SVNURL
name|url
init|=
name|entry
operator|.
name|getSVNURL
argument_list|()
decl_stmt|;
name|SVNRepository
name|repository
init|=
name|createRepository
argument_list|(
name|url
argument_list|,
name|anchor
operator|.
name|getRoot
argument_list|()
argument_list|,
name|wcAccess
argument_list|,
literal|true
argument_list|)
decl_stmt|;
name|long
name|rev
decl_stmt|;
if|if
condition|(
name|revision
operator|==
name|SVNRevision
operator|.
name|HEAD
condition|)
block|{
name|rev
operator|=
operator|-
literal|1
expr_stmt|;
block|}
else|else
block|{
name|rev
operator|=
name|getRevisionNumber
argument_list|(
name|revision
argument_list|,
name|repository
argument_list|,
name|path
argument_list|)
expr_stmt|;
block|}
name|SVNNodeKind
name|kind
init|=
name|repository
operator|.
name|checkPath
argument_list|(
literal|""
argument_list|,
name|rev
argument_list|)
decl_stmt|;
name|checkCancelled
argument_list|()
expr_stmt|;
name|SVNReporter
name|reporter
init|=
literal|null
decl_stmt|;
if|if
condition|(
name|kind
operator|==
name|SVNNodeKind
operator|.
name|NONE
condition|)
block|{
if|if
condition|(
operator|!
name|entry
operator|.
name|isScheduledForAddition
argument_list|()
condition|)
block|{
name|deletedInRepository
index|[
literal|0
index|]
operator|=
literal|true
expr_stmt|;
block|}
name|editor
operator|=
operator|new
name|SVNStatusEditor
argument_list|(
name|getOptions
argument_list|()
argument_list|,
name|wcAccess
argument_list|,
name|info
argument_list|,
name|includeIgnored
argument_list|,
name|reportAll
argument_list|,
name|depth
argument_list|,
name|realHandler
argument_list|)
expr_stmt|;
name|checkCancelled
argument_list|()
expr_stmt|;
name|editor
operator|.
name|closeEdit
argument_list|()
expr_stmt|;
block|}
else|else
block|{
name|editor
operator|=
operator|new
name|SVNRemoteStatusEditor
argument_list|(
name|getOptions
argument_list|()
argument_list|,
name|wcAccess
argument_list|,
name|info
argument_list|,
name|includeIgnored
argument_list|,
name|reportAll
argument_list|,
name|depth
argument_list|,
name|realHandler
argument_list|)
expr_stmt|;
comment|// session is closed in SVNStatusReporter.
name|SVNRepository
name|locksRepos
init|=
name|createRepository
argument_list|(
name|url
argument_list|,
name|anchor
operator|.
name|getRoot
argument_list|()
argument_list|,
name|wcAccess
argument_list|,
literal|false
argument_list|)
decl_stmt|;
name|checkCancelled
argument_list|()
expr_stmt|;
name|boolean
name|serverSupportsDepth
init|=
name|repository
operator|.
name|hasCapability
argument_list|(
name|SVNCapability
operator|.
name|DEPTH
argument_list|)
decl_stmt|;
name|reporter
operator|=
operator|new
name|SVNReporter
argument_list|(
name|info
argument_list|,
name|path
argument_list|,
literal|false
argument_list|,
operator|!
name|serverSupportsDepth
argument_list|,
name|depth
argument_list|,
literal|false
argument_list|,
literal|true
argument_list|,
literal|true
argument_list|,
name|getDebugLog
argument_list|()
argument_list|)
expr_stmt|;
name|SVNStatusReporter
name|statusReporter
init|=
operator|new
name|SVNStatusReporter
argument_list|(
name|locksRepos
argument_list|,
name|reporter
argument_list|,
name|editor
argument_list|)
decl_stmt|;
name|String
name|target
init|=
literal|""
operator|.
name|equals
argument_list|(
name|info
operator|.
name|getTargetName
argument_list|()
argument_list|)
condition|?
literal|null
else|:
name|info
operator|.
name|getTargetName
argument_list|()
decl_stmt|;
name|repository
operator|.
name|status
argument_list|(
name|rev
argument_list|,
name|target
argument_list|,
name|depth
argument_list|,
name|statusReporter
argument_list|,
name|SVNCancellableEditor
operator|.
name|newInstance
argument_list|(
operator|(
name|ISVNEditor
operator|)
name|editor
argument_list|,
name|getEventDispatcher
argument_list|()
argument_list|,
name|getDebugLog
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|getEventDispatcher
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|long
name|reportedFiles
init|=
name|reporter
operator|!=
literal|null
condition|?
name|reporter
operator|.
name|getReportedFilesCount
argument_list|()
else|:
literal|0
decl_stmt|;
name|long
name|totalFiles
init|=
name|reporter
operator|!=
literal|null
condition|?
name|reporter
operator|.
name|getTotalFilesCount
argument_list|()
else|:
literal|0
decl_stmt|;
name|SVNEvent
name|event
init|=
name|SVNEventFactory
operator|.
name|createSVNEvent
argument_list|(
name|info
operator|.
name|getAnchor
argument_list|()
operator|.
name|getFile
argument_list|(
name|info
operator|.
name|getTargetName
argument_list|()
argument_list|)
argument_list|,
name|SVNNodeKind
operator|.
name|NONE
argument_list|,
literal|null
argument_list|,
name|editor
operator|.
name|getTargetRevision
argument_list|()
argument_list|,
name|SVNEventAction
operator|.
name|STATUS_COMPLETED
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|,
name|reportedFiles
argument_list|,
name|totalFiles
argument_list|)
decl_stmt|;
name|getEventDispatcher
argument_list|()
operator|.
name|handleEvent
argument_list|(
name|event
argument_list|,
name|ISVNEventHandler
operator|.
name|UNKNOWN
argument_list|)
expr_stmt|;
block|}
block|}
else|else
block|{
name|editor
operator|=
operator|new
name|SVNStatusEditor
argument_list|(
name|getOptions
argument_list|()
argument_list|,
name|wcAccess
argument_list|,
name|info
argument_list|,
name|includeIgnored
argument_list|,
name|reportAll
argument_list|,
name|depth
argument_list|,
name|handler
argument_list|)
expr_stmt|;
if|if
condition|(
name|myFilesProvider
operator|!=
literal|null
condition|)
block|{
name|editor
operator|.
name|setFileProvider
argument_list|(
name|myFilesProvider
argument_list|)
expr_stmt|;
block|}
name|editor
operator|.
name|closeEdit
argument_list|()
expr_stmt|;
block|}
if|if
condition|(
operator|!
name|isIgnoreExternals
argument_list|()
operator|&&
operator|(
name|depth
operator|==
name|SVNDepth
operator|.
name|INFINITY
operator|||
name|depth
operator|==
name|SVNDepth
operator|.
name|UNKNOWN
operator|)
condition|)
block|{
comment|// iterate over externals that were collected in SVNAdminAreaInfo.
name|Map
name|externalsMap
init|=
name|info
operator|.
name|getNewExternals
argument_list|()
decl_stmt|;
for|for
control|(
name|Iterator
name|paths
init|=
name|externalsMap
operator|.
name|keySet
argument_list|()
operator|.
name|iterator
argument_list|()
init|;
name|paths
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|String
name|ownerPath
init|=
operator|(
name|String
operator|)
name|paths
operator|.
name|next
argument_list|()
decl_stmt|;
name|String
name|externalValue
init|=
operator|(
name|String
operator|)
name|externalsMap
operator|.
name|get
argument_list|(
name|ownerPath
argument_list|)
decl_stmt|;
name|SVNExternal
index|[]
name|externals
init|=
name|SVNExternal
operator|.
name|parseExternals
argument_list|(
name|ownerPath
argument_list|,
name|externalValue
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|externals
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
name|SVNExternal
name|external
init|=
name|externals
index|[
name|i
index|]
decl_stmt|;
name|String
name|externalPath
init|=
name|SVNPathUtil
operator|.
name|append
argument_list|(
name|ownerPath
argument_list|,
name|external
operator|.
name|getPath
argument_list|()
argument_list|)
decl_stmt|;
name|File
name|externalFile
init|=
name|info
operator|.
name|getAnchor
argument_list|()
operator|.
name|getFile
argument_list|(
name|externalPath
argument_list|)
decl_stmt|;
if|if
condition|(
name|SVNFileType
operator|.
name|getType
argument_list|(
name|externalFile
argument_list|)
operator|!=
name|SVNFileType
operator|.
name|DIRECTORY
condition|)
block|{
continue|continue;
block|}
try|try
block|{
name|int
name|format
init|=
name|SVNAdminAreaFactory
operator|.
name|checkWC
argument_list|(
name|externalFile
argument_list|,
literal|true
argument_list|)
decl_stmt|;
if|if
condition|(
name|format
operator|==
literal|0
condition|)
block|{
comment|// something unversioned instead of external.
continue|continue;
block|}
block|}
catch|catch
parameter_list|(
name|SVNException
name|e
parameter_list|)
block|{
continue|continue;
block|}
name|handleEvent
argument_list|(
name|SVNEventFactory
operator|.
name|createSVNEvent
argument_list|(
name|externalFile
argument_list|,
name|SVNNodeKind
operator|.
name|DIR
argument_list|,
literal|null
argument_list|,
name|SVNRepository
operator|.
name|INVALID_REVISION
argument_list|,
name|SVNEventAction
operator|.
name|STATUS_EXTERNAL
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|)
argument_list|,
name|ISVNEventHandler
operator|.
name|UNKNOWN
argument_list|)
expr_stmt|;
name|setEventPathPrefix
argument_list|(
name|externalPath
argument_list|)
expr_stmt|;
try|try
block|{
name|doStatus
argument_list|(
name|externalFile
argument_list|,
name|SVNRevision
operator|.
name|HEAD
argument_list|,
name|depth
argument_list|,
name|remote
argument_list|,
name|reportAll
argument_list|,
name|includeIgnored
argument_list|,
literal|false
argument_list|,
name|handler
argument_list|,
literal|null
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|SVNException
name|e
parameter_list|)
block|{
if|if
condition|(
name|e
operator|instanceof
name|SVNCancelException
condition|)
block|{
throw|throw
name|e
throw|;
block|}
block|}
finally|finally
block|{
name|setEventPathPrefix
argument_list|(
literal|null
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
block|}
finally|finally
block|{
name|wcAccess
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
return|return
name|editor
operator|.
name|getTargetRevision
argument_list|()
return|;
block|}
comment|/**      * Collects status information on a single Working Copy item.       *       * @param  path				local item's path      * @param  remote<span class="javakeyword">true</span> to check up the status of the item in the repository,      * 							that will tell if the local item is out-of-date (like<i>'-u'</i> option in the      * 							SVN client's<code>'svn status'</code> command),       * 							otherwise<span class="javakeyword">false</span>      * @return					an<b>SVNStatus</b> object representing status information       * 							for the item      * @throws SVNException      */
specifier|public
name|SVNStatus
name|doStatus
parameter_list|(
specifier|final
name|File
name|path
parameter_list|,
name|boolean
name|remote
parameter_list|)
throws|throws
name|SVNException
block|{
return|return
name|doStatus
argument_list|(
name|path
argument_list|,
name|remote
argument_list|,
literal|false
argument_list|)
return|;
block|}
comment|/**      * Collects status information on a single Working Copy item.       *        * @param  path						local item's path      * @param  remote<span class="javakeyword">true</span> to check up the status of the item in the repository,      * 									that will tell if the local item is out-of-date (like<i>'-u'</i> option in the      * 									SVN client's<code>'svn status'</code> command),       * 									otherwise<span class="javakeyword">false</span>      * @param  collectParentExternals<span class="javakeyword">false</span> to make the operation ignore information      * 									on externals definitions (like<i>'--ignore-externals'</i> option in the SVN      * 									client's<code>'svn status'</code> command), otherwise<span class="javakeyword">false</span>      * @return							an<b>SVNStatus</b> object representing status information       * 									for the item      * @throws SVNException      */
specifier|public
name|SVNStatus
name|doStatus
parameter_list|(
name|File
name|path
parameter_list|,
name|boolean
name|remote
parameter_list|,
name|boolean
name|collectParentExternals
parameter_list|)
throws|throws
name|SVNException
block|{
specifier|final
name|SVNStatus
index|[]
name|result
init|=
operator|new
name|SVNStatus
index|[]
block|{
literal|null
block|}
decl_stmt|;
specifier|final
name|File
name|absPath
init|=
name|path
operator|.
name|getAbsoluteFile
argument_list|()
decl_stmt|;
name|ISVNStatusHandler
name|handler
init|=
operator|new
name|ISVNStatusHandler
argument_list|()
block|{
specifier|public
name|void
name|handleStatus
parameter_list|(
name|SVNStatus
name|status
parameter_list|)
block|{
if|if
condition|(
name|absPath
operator|.
name|equals
argument_list|(
name|status
operator|.
name|getFile
argument_list|()
argument_list|)
condition|)
block|{
if|if
condition|(
name|result
index|[
literal|0
index|]
operator|!=
literal|null
operator|&&
name|result
index|[
literal|0
index|]
operator|.
name|getContentsStatus
argument_list|()
operator|==
name|SVNStatusType
operator|.
name|STATUS_EXTERNAL
operator|&&
name|absPath
operator|.
name|isDirectory
argument_list|()
condition|)
block|{
name|result
index|[
literal|0
index|]
operator|=
name|status
expr_stmt|;
name|result
index|[
literal|0
index|]
operator|.
name|markExternal
argument_list|()
expr_stmt|;
block|}
if|else if
condition|(
name|result
index|[
literal|0
index|]
operator|==
literal|null
condition|)
block|{
name|result
index|[
literal|0
index|]
operator|=
name|status
expr_stmt|;
block|}
block|}
block|}
block|}
decl_stmt|;
name|doStatus
argument_list|(
name|absPath
argument_list|,
name|SVNRevision
operator|.
name|HEAD
argument_list|,
name|SVNDepth
operator|.
name|EMPTY
argument_list|,
name|remote
argument_list|,
literal|true
argument_list|,
literal|true
argument_list|,
name|collectParentExternals
argument_list|,
name|handler
argument_list|,
literal|null
argument_list|)
expr_stmt|;
return|return
name|result
index|[
literal|0
index|]
return|;
block|}
specifier|public
name|void
name|setFilesProvider
parameter_list|(
name|ISVNStatusFileProvider
name|filesProvider
parameter_list|)
block|{
name|myFilesProvider
operator|=
name|filesProvider
expr_stmt|;
block|}
block|}
end_class

end_unit

