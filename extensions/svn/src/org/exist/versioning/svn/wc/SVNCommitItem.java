begin_unit|revision:1.0.0;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * ====================================================================  * Copyright (c) 2004-2010 TMate Software Ltd.  All rights reserved.  *  * This software is licensed as described in the file COPYING, which  * you should have received as part of this distribution.  The terms  * are also available at http://svnkit.com/license.html  * If newer versions of this license are posted there, you may use a  * newer version instead, at your option.  * ====================================================================  */
end_comment

begin_package
package|package
name|org
operator|.
name|exist
operator|.
name|versioning
operator|.
name|svn
operator|.
name|wc
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|File
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|versioning
operator|.
name|svn
operator|.
name|internal
operator|.
name|wc
operator|.
name|admin
operator|.
name|SVNWCAccess
import|;
end_import

begin_import
import|import
name|org
operator|.
name|tmatesoft
operator|.
name|svn
operator|.
name|core
operator|.
name|SVNNodeKind
import|;
end_import

begin_import
import|import
name|org
operator|.
name|tmatesoft
operator|.
name|svn
operator|.
name|core
operator|.
name|SVNPropertyValue
import|;
end_import

begin_import
import|import
name|org
operator|.
name|tmatesoft
operator|.
name|svn
operator|.
name|core
operator|.
name|SVNURL
import|;
end_import

begin_import
import|import
name|org
operator|.
name|tmatesoft
operator|.
name|svn
operator|.
name|core
operator|.
name|internal
operator|.
name|util
operator|.
name|SVNHashMap
import|;
end_import

begin_import
import|import
name|org
operator|.
name|tmatesoft
operator|.
name|svn
operator|.
name|core
operator|.
name|wc
operator|.
name|SVNRevision
import|;
end_import

begin_comment
comment|/**  * The<b>SVNCommitItem</b> represents a versioned item that is    * to be committed to a repository.   *   *<p>  * Used to wrap information about a versioned item into a single   * object. A commit item can represent either a Working Copy item   * (speaking of committing local changes in WC files and directories)   * or one that is located in a repository (for example, when deleting   * a file/directory right from a repository).   *   *<p>  * When you call<b>SVNCommitClient</b>'s {@link SVNCommitClient#doCollectCommitItems(File[], boolean, boolean, org.tmatesoft.svn.core.SVNDepth, boolean, String[]) doCollectCommitItems()}  * this methods processes the specified paths and collects information  * on items to be committed in<b>SVNCommitItem</b> objects which are  * packed into a single<b>SVNCommitPacket</b> object. This object is   * returned by the method to the caller.  *   * @version 1.3  * @author  TMate Software Ltd.  * @since   1.2  * @see     SVNCommitPacket  */
end_comment

begin_class
specifier|public
class|class
name|SVNCommitItem
block|{
specifier|private
name|SVNRevision
name|myRevision
decl_stmt|;
specifier|private
name|File
name|myFile
decl_stmt|;
specifier|private
name|SVNURL
name|myURL
decl_stmt|;
specifier|private
name|SVNURL
name|myCopyFromURL
decl_stmt|;
specifier|private
name|SVNNodeKind
name|myKind
decl_stmt|;
specifier|private
name|boolean
name|myIsAdded
decl_stmt|;
specifier|private
name|boolean
name|myIsDeleted
decl_stmt|;
specifier|private
name|boolean
name|myIsPropertiesModified
decl_stmt|;
specifier|private
name|boolean
name|myIsContentsModified
decl_stmt|;
specifier|private
name|boolean
name|myIsCopied
decl_stmt|;
specifier|private
name|boolean
name|myIsLocked
decl_stmt|;
specifier|private
name|String
name|myPath
decl_stmt|;
specifier|private
name|SVNWCAccess
name|myWCAccess
decl_stmt|;
specifier|private
name|SVNRevision
name|myCopyFromRevision
decl_stmt|;
specifier|private
name|Map
name|myOutgoingProperties
decl_stmt|;
comment|/**      * Constructs and initializes an<b>SVNCommitItem</b> object.      *       * @param file                  a WC item's location      * @param URL                   the item's repository location      * @param copyFromURL           the repository location of the item's ancestor      *                              (if the item was or to be copied)      * @param kind                  the item's node kind      * @param revision              the item's revision      * @param copyFromRevision      the revision of the item's ancestor       *                              it's copied from      * @param isAdded<span class="javakeyword">true</span> if the       *                              item is to be added to version control, otherwise      *<span class="javakeyword">false</span>      * @param isDeleted<span class="javakeyword">true</span> if the       *                              item is to be deleted from version control, otherwise      *<span class="javakeyword">false</span>       * @param isPropertiesModified<span class="javakeyword">true</span> if the       *                              item's properties have local changes, otherwise      *<span class="javakeyword">false</span>      * @param isContentsModified<span class="javakeyword">true</span> if the       *                              item's contents (file contents or directory entries)       *                              have local changes, otherwise       *<span class="javakeyword">false</span>      * @param isCopied<span class="javakeyword">true</span> if the       *                              item is to be added to version control with history,       *                              otherwise<span class="javakeyword">false</span>      * @param locked<span class="javakeyword">true</span> if the       *                              item is to be locked, otherwise      *<span class="javakeyword">false</span>      */
specifier|public
name|SVNCommitItem
parameter_list|(
name|File
name|file
parameter_list|,
name|SVNURL
name|URL
parameter_list|,
name|SVNURL
name|copyFromURL
parameter_list|,
name|SVNNodeKind
name|kind
parameter_list|,
name|SVNRevision
name|revision
parameter_list|,
name|SVNRevision
name|copyFromRevision
parameter_list|,
name|boolean
name|isAdded
parameter_list|,
name|boolean
name|isDeleted
parameter_list|,
name|boolean
name|isPropertiesModified
parameter_list|,
name|boolean
name|isContentsModified
parameter_list|,
name|boolean
name|isCopied
parameter_list|,
name|boolean
name|locked
parameter_list|)
block|{
name|myRevision
operator|=
name|revision
operator|==
literal|null
condition|?
name|SVNRevision
operator|.
name|UNDEFINED
else|:
name|revision
expr_stmt|;
name|myCopyFromRevision
operator|=
name|copyFromRevision
operator|==
literal|null
condition|?
name|SVNRevision
operator|.
name|UNDEFINED
else|:
name|copyFromRevision
expr_stmt|;
name|myFile
operator|=
name|file
expr_stmt|;
name|myURL
operator|=
name|URL
expr_stmt|;
name|myCopyFromURL
operator|=
name|copyFromURL
expr_stmt|;
name|myKind
operator|=
name|kind
expr_stmt|;
name|myIsAdded
operator|=
name|isAdded
expr_stmt|;
name|myIsDeleted
operator|=
name|isDeleted
expr_stmt|;
name|myIsPropertiesModified
operator|=
name|isPropertiesModified
expr_stmt|;
name|myIsContentsModified
operator|=
name|isContentsModified
expr_stmt|;
name|myIsCopied
operator|=
name|isCopied
expr_stmt|;
name|myIsLocked
operator|=
name|locked
expr_stmt|;
block|}
comment|/**      * Gets the revision of the versioned item . For a WC item it is       * the current working revision.       *       * @return the revision of the item to be committed      */
specifier|public
name|SVNRevision
name|getRevision
parameter_list|()
block|{
return|return
name|myRevision
return|;
block|}
comment|/**      * Gets the revision of the versioned item's ancestor      * from which the item was copied.       *       * @return the revision the item was copied from      */
specifier|public
name|SVNRevision
name|getCopyFromRevision
parameter_list|()
block|{
return|return
name|myCopyFromRevision
return|;
block|}
comment|/**      * Gets the location of the Working Copy item.       *       * @return the item's local path      */
specifier|public
name|File
name|getFile
parameter_list|()
block|{
return|return
name|myFile
return|;
block|}
comment|/**      * Gets the versioned item's repository location.      *       * @return the item's URL pointing to its repository location      */
specifier|public
name|SVNURL
name|getURL
parameter_list|()
block|{
return|return
name|myURL
return|;
block|}
comment|/**      * Gets the repository location of the versioned item's ancestor      * from which the item was copied.       *        * @return the URL of the copy source in an {@link org.tmatesoft.svn.core.SVNURL}      *         representation      */
specifier|public
name|SVNURL
name|getCopyFromURL
parameter_list|()
block|{
return|return
name|myCopyFromURL
return|;
block|}
comment|/**      * Gets the node kind of the versioned item.      *       * @return the item's node kind      */
specifier|public
name|SVNNodeKind
name|getKind
parameter_list|()
block|{
return|return
name|myKind
return|;
block|}
comment|/**      * Determines if the item is to be added to version control.      *        * @return<span class="javakeyword">true</span> if added,       *         otherwise<span class="javakeyword">false</span>      */
specifier|public
name|boolean
name|isAdded
parameter_list|()
block|{
return|return
name|myIsAdded
return|;
block|}
comment|/**      * Determines if the item is to be deleted from version control.      *       * @return<span class="javakeyword">true</span> if deleted,       *         otherwise<span class="javakeyword">false</span>      */
specifier|public
name|boolean
name|isDeleted
parameter_list|()
block|{
return|return
name|myIsDeleted
return|;
block|}
comment|/**      * Determines if the Working Copy item has local edits      * to properties.      *       * @return<span class="javakeyword">true</span> if the properties       *         have local changes, otherwise<span class="javakeyword">false</span>      */
specifier|public
name|boolean
name|isPropertiesModified
parameter_list|()
block|{
return|return
name|myIsPropertiesModified
return|;
block|}
comment|/**      * Determines if the Working Copy item has local edits      * to its contents. If the item is a file - that is the file contents,      * a directory - the directory contents (meaning entries).       *       * @return<span class="javakeyword">true</span> if the contents       *         have local changes, otherwise<span class="javakeyword">false</span>      */
specifier|public
name|boolean
name|isContentsModified
parameter_list|()
block|{
return|return
name|myIsContentsModified
return|;
block|}
comment|/**      * Determines if the item is to be added to version control with       * history.      *       * @return<span class="javakeyword">true</span> if added with      *         history (copied in other words), otherwise       *<span class="javakeyword">false</span>      */
specifier|public
name|boolean
name|isCopied
parameter_list|()
block|{
return|return
name|myIsCopied
return|;
block|}
comment|/**      * Determines whether the item needs to be locked.      *       * @return<span class="javakeyword">true</span> if locked,       *         otherwise<span class="javakeyword">false</span>      */
specifier|public
name|boolean
name|isLocked
parameter_list|()
block|{
return|return
name|myIsLocked
return|;
block|}
comment|/**      * Gets the item's relevant path. The path is relevant to      * the Working Copy root.      *       * @return the item's relevant path      */
comment|// TODO get rid of this. always use getURL or getFile instead.
specifier|public
name|String
name|getPath
parameter_list|()
block|{
return|return
name|myPath
return|;
block|}
comment|/**      * Sets the item's relevant path.      *       * @param path the item's path relevant to the Working Copy root      */
specifier|public
name|void
name|setPath
parameter_list|(
name|String
name|path
parameter_list|)
block|{
name|myPath
operator|=
name|path
expr_stmt|;
block|}
comment|/**      * This method is not intended for users (from an API point of view).      * @return wc access object       */
specifier|public
name|SVNWCAccess
name|getWCAccess
parameter_list|()
block|{
return|return
name|myWCAccess
return|;
block|}
comment|/**      * Returns properties to commit.      * @return properties to commit       */
specifier|public
name|Map
name|getOutgoingProperties
parameter_list|()
block|{
return|return
name|myOutgoingProperties
return|;
block|}
name|void
name|setWCAccess
parameter_list|(
name|SVNWCAccess
name|wcAccess
parameter_list|)
block|{
name|myWCAccess
operator|=
name|wcAccess
expr_stmt|;
block|}
name|void
name|setProperty
parameter_list|(
name|String
name|propertyName
parameter_list|,
name|SVNPropertyValue
name|propertyValue
parameter_list|)
block|{
name|myIsPropertiesModified
operator|=
literal|true
expr_stmt|;
name|Map
name|props
init|=
name|getProperties
argument_list|()
decl_stmt|;
name|props
operator|.
name|put
argument_list|(
name|propertyName
argument_list|,
name|propertyValue
argument_list|)
expr_stmt|;
block|}
specifier|private
name|Map
name|getProperties
parameter_list|()
block|{
if|if
condition|(
name|myOutgoingProperties
operator|==
literal|null
condition|)
block|{
name|myOutgoingProperties
operator|=
operator|new
name|SVNHashMap
argument_list|()
expr_stmt|;
block|}
return|return
name|myOutgoingProperties
return|;
block|}
name|void
name|setContentsModified
parameter_list|(
name|boolean
name|modified
parameter_list|)
block|{
name|myIsContentsModified
operator|=
name|modified
expr_stmt|;
block|}
name|void
name|setPropertiesModified
parameter_list|(
name|boolean
name|modified
parameter_list|)
block|{
name|myIsPropertiesModified
operator|=
name|modified
expr_stmt|;
block|}
block|}
end_class

end_unit

