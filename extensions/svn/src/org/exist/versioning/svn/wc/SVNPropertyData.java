begin_unit|revision:1.0.0;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * ====================================================================  * Copyright (c) 2004-2010 TMate Software Ltd.  All rights reserved.  *  * This software is licensed as described in the file COPYING, which  * you should have received as part of this distribution.  The terms  * are also available at http://svnkit.com/license.html  * If newer versions of this license are posted there, you may use a  * newer version instead, at your option.  * ====================================================================  */
end_comment

begin_package
package|package
name|org
operator|.
name|exist
operator|.
name|versioning
operator|.
name|svn
operator|.
name|wc
package|;
end_package

begin_import
import|import
name|org
operator|.
name|tmatesoft
operator|.
name|svn
operator|.
name|core
operator|.
name|SVNProperty
import|;
end_import

begin_import
import|import
name|org
operator|.
name|tmatesoft
operator|.
name|svn
operator|.
name|core
operator|.
name|SVNPropertyValue
import|;
end_import

begin_comment
comment|/**  *<b>SVNPropertyData</b> is a wrapper for both versioned and unversioned  * properties. This class represents the pair: property name - property value.  * Property managing methods of the<b>SVNWCClient</b> class use   *<b>SVNPropertyData</b> to wrap properties and dispatch them to   *<b>handleProperty()</b> methods of<b>ISVNPropertyHandler</b> for processing  * or simply return that 'properties object' as a target.  *   * @version 1.3  * @author  TMate Software Ltd.  * @since   1.2  * @see     ISVNPropertyHandler  * @see     SVNWCClient  */
end_comment

begin_class
specifier|public
class|class
name|SVNPropertyData
block|{
specifier|private
name|SVNPropertyValue
name|myValue
decl_stmt|;
specifier|private
name|String
name|myName
decl_stmt|;
comment|/**      * Constructs an<b>SVNPropertyData</b> given a property name and its      * value.       *       *<p>      * if<code>data</code> is not<span class="javakeyword">null</span>, is a       * {@link SVNPropertyValue#isString() string} property and<code>name</code> is an       * {@link SVNProperty#isSVNProperty(String) svn-namespace} property name, then<code>options</code>,       * if not<span class="javakeyword">null</span>, is used to translate the property value replacing       * all LF end of line markers in the property value with ones returned by {@link ISVNOptions#getNativeEOL()}.      * Otherwise, if<code>options</code> is<span class="javakeyword">null</span>,       * the<span class="javastring">"line.separator"</span> system property is used to retrieve a new EOL marker.      *        * @param name    a property name      * @param data    a property value      * @param options provides EOL style information      */
specifier|public
name|SVNPropertyData
parameter_list|(
name|String
name|name
parameter_list|,
name|SVNPropertyValue
name|data
parameter_list|,
name|ISVNOptions
name|options
parameter_list|)
block|{
name|myName
operator|=
name|name
expr_stmt|;
name|myValue
operator|=
name|data
expr_stmt|;
if|if
condition|(
name|myValue
operator|!=
literal|null
operator|&&
name|SVNProperty
operator|.
name|isSVNProperty
argument_list|(
name|myName
argument_list|)
operator|&&
name|myValue
operator|.
name|isString
argument_list|()
condition|)
block|{
name|String
name|nativeEOL
init|=
name|options
operator|==
literal|null
condition|?
name|System
operator|.
name|getProperty
argument_list|(
literal|"line.separator"
argument_list|)
else|:
operator|new
name|String
argument_list|(
name|options
operator|.
name|getNativeEOL
argument_list|()
argument_list|)
decl_stmt|;
name|myValue
operator|=
name|SVNPropertyValue
operator|.
name|create
argument_list|(
name|myValue
operator|.
name|getString
argument_list|()
operator|.
name|replaceAll
argument_list|(
literal|"\n"
argument_list|,
name|nativeEOL
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
comment|/**      * Gets the name of the property represented by this       *<b>SVNPropertyData</b> object.       *       * @return  a property name      */
specifier|public
name|String
name|getName
parameter_list|()
block|{
return|return
name|myName
return|;
block|}
comment|/**      * Gets the value of the property represented by this       *<b>SVNPropertyData</b> object.      *        * @return  a property value      */
specifier|public
name|SVNPropertyValue
name|getValue
parameter_list|()
block|{
return|return
name|myValue
return|;
block|}
specifier|public
name|int
name|hashCode
parameter_list|()
block|{
name|int
name|result
init|=
literal|17
operator|+
operator|(
operator|(
name|myName
operator|==
literal|null
operator|)
condition|?
literal|0
else|:
name|myName
operator|.
name|hashCode
argument_list|()
operator|)
decl_stmt|;
return|return
literal|31
operator|*
name|result
operator|+
operator|(
operator|(
name|myValue
operator|==
literal|null
operator|)
condition|?
literal|0
else|:
name|myValue
operator|.
name|hashCode
argument_list|()
operator|)
return|;
block|}
specifier|public
name|boolean
name|equals
parameter_list|(
name|Object
name|obj
parameter_list|)
block|{
if|if
condition|(
name|this
operator|==
name|obj
condition|)
block|{
return|return
literal|true
return|;
block|}
if|if
condition|(
name|obj
operator|==
literal|null
condition|)
block|{
return|return
literal|false
return|;
block|}
if|if
condition|(
name|getClass
argument_list|()
operator|!=
name|obj
operator|.
name|getClass
argument_list|()
condition|)
block|{
return|return
literal|false
return|;
block|}
name|SVNPropertyData
name|other
init|=
operator|(
name|SVNPropertyData
operator|)
name|obj
decl_stmt|;
if|if
condition|(
name|myName
operator|==
literal|null
condition|)
block|{
if|if
condition|(
name|other
operator|.
name|myName
operator|!=
literal|null
condition|)
block|{
return|return
literal|false
return|;
block|}
block|}
if|else if
condition|(
operator|!
name|myName
operator|.
name|equals
argument_list|(
name|other
operator|.
name|myName
argument_list|)
condition|)
block|{
return|return
literal|false
return|;
block|}
if|if
condition|(
name|myValue
operator|==
literal|null
condition|)
block|{
if|if
condition|(
name|other
operator|.
name|myValue
operator|!=
literal|null
condition|)
block|{
return|return
literal|false
return|;
block|}
block|}
if|else if
condition|(
operator|!
name|myValue
operator|.
name|equals
argument_list|(
name|other
operator|.
name|myValue
argument_list|)
condition|)
block|{
return|return
literal|false
return|;
block|}
return|return
literal|true
return|;
block|}
block|}
end_class

end_unit

