begin_unit|revision:1.0.0;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * ====================================================================  * Copyright (c) 2004-2010 TMate Software Ltd.  All rights reserved.  *  * This software is licensed as described in the file COPYING, which  * you should have received as part of this distribution.  The terms  * are also available at http://svnkit.com/license.html  * If newer versions of this license are posted there, you may use a  * newer version instead, at your option.  * ====================================================================  */
end_comment

begin_package
package|package
name|org
operator|.
name|exist
operator|.
name|versioning
operator|.
name|svn
operator|.
name|wc
operator|.
name|admin
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|ByteArrayOutputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|File
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|InputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|OutputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|UnsupportedEncodingException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|InetAddress
import|;
end_import

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|UnknownHostException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|nio
operator|.
name|charset
operator|.
name|Charset
import|;
end_import

begin_import
import|import
name|java
operator|.
name|nio
operator|.
name|charset
operator|.
name|CharsetDecoder
import|;
end_import

begin_import
import|import
name|java
operator|.
name|text
operator|.
name|MessageFormat
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Arrays
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collection
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Iterator
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|versioning
operator|.
name|svn
operator|.
name|internal
operator|.
name|wc
operator|.
name|DefaultDumpFilterHandler
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|versioning
operator|.
name|svn
operator|.
name|internal
operator|.
name|wc
operator|.
name|DefaultLoadHandler
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|versioning
operator|.
name|svn
operator|.
name|internal
operator|.
name|wc
operator|.
name|SVNAdminDeltifier
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|versioning
operator|.
name|svn
operator|.
name|internal
operator|.
name|wc
operator|.
name|SVNAdminHelper
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|versioning
operator|.
name|svn
operator|.
name|internal
operator|.
name|wc
operator|.
name|SVNCancellableEditor
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|versioning
operator|.
name|svn
operator|.
name|internal
operator|.
name|wc
operator|.
name|SVNDumpEditor
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|versioning
operator|.
name|svn
operator|.
name|internal
operator|.
name|wc
operator|.
name|SVNDumpStreamParser
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|versioning
operator|.
name|svn
operator|.
name|internal
operator|.
name|wc
operator|.
name|SVNErrorManager
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|versioning
operator|.
name|svn
operator|.
name|internal
operator|.
name|wc
operator|.
name|SVNFileUtil
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|versioning
operator|.
name|svn
operator|.
name|internal
operator|.
name|wc
operator|.
name|SVNPropertiesManager
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|versioning
operator|.
name|svn
operator|.
name|internal
operator|.
name|wc
operator|.
name|admin
operator|.
name|SVNTranslator
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|versioning
operator|.
name|svn
operator|.
name|wc
operator|.
name|ISVNEventHandler
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|versioning
operator|.
name|svn
operator|.
name|wc
operator|.
name|ISVNOptions
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|versioning
operator|.
name|svn
operator|.
name|wc
operator|.
name|SVNBasicClient
import|;
end_import

begin_import
import|import
name|org
operator|.
name|tmatesoft
operator|.
name|svn
operator|.
name|core
operator|.
name|ISVNLogEntryHandler
import|;
end_import

begin_import
import|import
name|org
operator|.
name|tmatesoft
operator|.
name|svn
operator|.
name|core
operator|.
name|SVNDepth
import|;
end_import

begin_import
import|import
name|org
operator|.
name|tmatesoft
operator|.
name|svn
operator|.
name|core
operator|.
name|SVNErrorCode
import|;
end_import

begin_import
import|import
name|org
operator|.
name|tmatesoft
operator|.
name|svn
operator|.
name|core
operator|.
name|SVNErrorMessage
import|;
end_import

begin_import
import|import
name|org
operator|.
name|tmatesoft
operator|.
name|svn
operator|.
name|core
operator|.
name|SVNException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|tmatesoft
operator|.
name|svn
operator|.
name|core
operator|.
name|SVNLock
import|;
end_import

begin_import
import|import
name|org
operator|.
name|tmatesoft
operator|.
name|svn
operator|.
name|core
operator|.
name|SVNProperty
import|;
end_import

begin_import
import|import
name|org
operator|.
name|tmatesoft
operator|.
name|svn
operator|.
name|core
operator|.
name|SVNRevisionProperty
import|;
end_import

begin_import
import|import
name|org
operator|.
name|tmatesoft
operator|.
name|svn
operator|.
name|core
operator|.
name|SVNURL
import|;
end_import

begin_import
import|import
name|org
operator|.
name|tmatesoft
operator|.
name|svn
operator|.
name|core
operator|.
name|SVNProperties
import|;
end_import

begin_import
import|import
name|org
operator|.
name|tmatesoft
operator|.
name|svn
operator|.
name|core
operator|.
name|SVNPropertyValue
import|;
end_import

begin_import
import|import
name|org
operator|.
name|tmatesoft
operator|.
name|svn
operator|.
name|core
operator|.
name|auth
operator|.
name|ISVNAuthenticationManager
import|;
end_import

begin_import
import|import
name|org
operator|.
name|tmatesoft
operator|.
name|svn
operator|.
name|core
operator|.
name|internal
operator|.
name|io
operator|.
name|fs
operator|.
name|FSFS
import|;
end_import

begin_import
import|import
name|org
operator|.
name|tmatesoft
operator|.
name|svn
operator|.
name|core
operator|.
name|internal
operator|.
name|io
operator|.
name|fs
operator|.
name|FSHotCopier
import|;
end_import

begin_import
import|import
name|org
operator|.
name|tmatesoft
operator|.
name|svn
operator|.
name|core
operator|.
name|internal
operator|.
name|io
operator|.
name|fs
operator|.
name|FSPacker
import|;
end_import

begin_import
import|import
name|org
operator|.
name|tmatesoft
operator|.
name|svn
operator|.
name|core
operator|.
name|internal
operator|.
name|io
operator|.
name|fs
operator|.
name|FSRecoverer
import|;
end_import

begin_import
import|import
name|org
operator|.
name|tmatesoft
operator|.
name|svn
operator|.
name|core
operator|.
name|internal
operator|.
name|io
operator|.
name|fs
operator|.
name|FSRepositoryUtil
import|;
end_import

begin_import
import|import
name|org
operator|.
name|tmatesoft
operator|.
name|svn
operator|.
name|core
operator|.
name|internal
operator|.
name|io
operator|.
name|fs
operator|.
name|FSRevisionRoot
import|;
end_import

begin_import
import|import
name|org
operator|.
name|tmatesoft
operator|.
name|svn
operator|.
name|core
operator|.
name|internal
operator|.
name|io
operator|.
name|fs
operator|.
name|FSRoot
import|;
end_import

begin_import
import|import
name|org
operator|.
name|tmatesoft
operator|.
name|svn
operator|.
name|core
operator|.
name|internal
operator|.
name|util
operator|.
name|SVNDate
import|;
end_import

begin_import
import|import
name|org
operator|.
name|tmatesoft
operator|.
name|svn
operator|.
name|core
operator|.
name|internal
operator|.
name|util
operator|.
name|SVNPathUtil
import|;
end_import

begin_import
import|import
name|org
operator|.
name|tmatesoft
operator|.
name|svn
operator|.
name|core
operator|.
name|internal
operator|.
name|util
operator|.
name|SVNUUIDGenerator
import|;
end_import

begin_import
import|import
name|org
operator|.
name|tmatesoft
operator|.
name|svn
operator|.
name|core
operator|.
name|internal
operator|.
name|wc
operator|.
name|ISVNLoadHandler
import|;
end_import

begin_import
import|import
name|org
operator|.
name|tmatesoft
operator|.
name|svn
operator|.
name|core
operator|.
name|io
operator|.
name|ISVNEditor
import|;
end_import

begin_import
import|import
name|org
operator|.
name|tmatesoft
operator|.
name|svn
operator|.
name|core
operator|.
name|io
operator|.
name|ISVNLockHandler
import|;
end_import

begin_import
import|import
name|org
operator|.
name|tmatesoft
operator|.
name|svn
operator|.
name|core
operator|.
name|io
operator|.
name|SVNCapability
import|;
end_import

begin_import
import|import
name|org
operator|.
name|tmatesoft
operator|.
name|svn
operator|.
name|core
operator|.
name|io
operator|.
name|SVNRepository
import|;
end_import

begin_import
import|import
name|org
operator|.
name|tmatesoft
operator|.
name|svn
operator|.
name|core
operator|.
name|io
operator|.
name|SVNRepositoryFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|tmatesoft
operator|.
name|svn
operator|.
name|core
operator|.
name|replicator
operator|.
name|SVNRepositoryReplicator
import|;
end_import

begin_import
import|import
name|org
operator|.
name|tmatesoft
operator|.
name|svn
operator|.
name|core
operator|.
name|wc
operator|.
name|ISVNRepositoryPool
import|;
end_import

begin_import
import|import
name|org
operator|.
name|tmatesoft
operator|.
name|svn
operator|.
name|core
operator|.
name|wc
operator|.
name|SVNRevision
import|;
end_import

begin_import
import|import
name|org
operator|.
name|tmatesoft
operator|.
name|svn
operator|.
name|core
operator|.
name|wc
operator|.
name|admin
operator|.
name|ISVNAdminEventHandler
import|;
end_import

begin_import
import|import
name|org
operator|.
name|tmatesoft
operator|.
name|svn
operator|.
name|core
operator|.
name|wc
operator|.
name|admin
operator|.
name|SVNAdminEvent
import|;
end_import

begin_import
import|import
name|org
operator|.
name|tmatesoft
operator|.
name|svn
operator|.
name|core
operator|.
name|wc
operator|.
name|admin
operator|.
name|SVNAdminEventAction
import|;
end_import

begin_import
import|import
name|org
operator|.
name|tmatesoft
operator|.
name|svn
operator|.
name|core
operator|.
name|wc
operator|.
name|admin
operator|.
name|SVNUUIDAction
import|;
end_import

begin_import
import|import
name|org
operator|.
name|tmatesoft
operator|.
name|svn
operator|.
name|util
operator|.
name|SVNDebugLog
import|;
end_import

begin_import
import|import
name|org
operator|.
name|tmatesoft
operator|.
name|svn
operator|.
name|util
operator|.
name|SVNLogType
import|;
end_import

begin_comment
comment|/**  * The<b>SVNAdminClient</b> class provides methods that brings repository-side functionality  * and repository synchronizing features.  *   *<p>  * Repository administrative methods are analogues of the corresponding commands of the native   * Subversion 'svnadmin' utility, while repository synchronizing methods are the ones for the  * 'svnsync' utility.   *   *<p>  * Here's a list of the<b>SVNAdminClient</b>'s methods   * matched against corresponing commands of the Subversion svnsync and svnadmin command-line utilities:  *   *<table cellpadding="3" cellspacing="1" border="0" width="40%" bgcolor="#999933">  *<tr bgcolor="#ADB8D9" align="left">  *<td><b>SVNKit</b></td>  *<td><b>Subversion</b></td>  *</tr>     *<tr bgcolor="#EAEAEA" align="left">  *<td>doInitialize()</td><td>'svnsync initialize'</td>  *</tr>  *<tr bgcolor="#EAEAEA" align="left">  *<td>doSynchronize()</td><td>'svnsync synchronize'</td>  *</tr>  *<tr bgcolor="#EAEAEA" align="left">  *<td>doInfo()</td><td>'svnsync info'</td>  *</tr>  *<tr bgcolor="#EAEAEA" align="left">  *<td>doCopyRevisionProperties()</td><td>'svnsync copy-revprops'</td>  *</tr>  *<tr bgcolor="#EAEAEA" align="left">  *<td>doDump()</td><td>'svnadmin dump'</td>  *</tr>  *<tr bgcolor="#EAEAEA" align="left">  *<td>doListTransactions()</td><td>'svnadmin lstxns'</td>  *</tr>  *<tr bgcolor="#EAEAEA" align="left">  *<td>doLoad()</td><td>'svnadmin load'</td>  *</tr>  *<tr bgcolor="#EAEAEA" align="left">  *<td>doRemoveTransactions()</td><td>'svnadmin rmtxns'</td>  *</tr>  *<tr bgcolor="#EAEAEA" align="left">  *<td>doVerify()</td><td>'svnadmin verify'</td>  *</tr>  *<tr bgcolor="#EAEAEA" align="left">  *<td>doPack()</td><td>'svnadmin pack'</td>  *</tr>  *</table>  *   * @version 1.3  * @author  TMate Software Ltd.  * @since   1.2  */
end_comment

begin_class
specifier|public
class|class
name|SVNAdminClient
extends|extends
name|SVNBasicClient
block|{
specifier|private
name|ISVNLogEntryHandler
name|mySyncHandler
decl_stmt|;
specifier|private
name|DefaultDumpFilterHandler
name|myDumpFilterHandler
decl_stmt|;
specifier|private
name|ISVNAdminEventHandler
name|myEventHandler
decl_stmt|;
specifier|private
name|FSHotCopier
name|myHotCopier
decl_stmt|;
specifier|private
name|SVNDumpStreamParser
name|myDumpStreamParser
decl_stmt|;
specifier|private
name|SVNDumpEditor
name|myDumpEditor
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|int
name|LOCK_RETRY_COUNT
init|=
literal|10
decl_stmt|;
comment|/**      * Creates a new admin client.      *       * @param authManager   an auth manager      * @param options       an options driver      */
specifier|public
name|SVNAdminClient
parameter_list|(
name|ISVNAuthenticationManager
name|authManager
parameter_list|,
name|ISVNOptions
name|options
parameter_list|)
block|{
name|super
argument_list|(
name|authManager
argument_list|,
name|options
argument_list|)
expr_stmt|;
block|}
comment|/**      * Creates a new admin client.      *       * @param repositoryPool a repository pool       * @param options        an options driver      */
specifier|public
name|SVNAdminClient
parameter_list|(
name|ISVNRepositoryPool
name|repositoryPool
parameter_list|,
name|ISVNOptions
name|options
parameter_list|)
block|{
name|super
argument_list|(
name|repositoryPool
argument_list|,
name|options
argument_list|)
expr_stmt|;
block|}
comment|/**      * Sets a replication handler that will receive a log entry object       * per each replayed revision.      *       *<p>      * Log entries dispatched to the handler may not contain changed paths and       * committed log message until this features are implemented in future releases.       *       * @param handler a replay handler      */
specifier|public
name|void
name|setReplayHandler
parameter_list|(
name|ISVNLogEntryHandler
name|handler
parameter_list|)
block|{
name|mySyncHandler
operator|=
name|handler
expr_stmt|;
block|}
comment|/**      * Sets an event handler for this object.       * {@link ISVNAdminEventHandler} should be provided to<b>SVNAdminClent</b>      * via this method also. But it does not mean that you can have two handler set, only       * one handler can be used at a time.      *       * @param handler an event handler      */
specifier|public
name|void
name|setEventHandler
parameter_list|(
name|ISVNEventHandler
name|handler
parameter_list|)
block|{
name|super
operator|.
name|setEventHandler
argument_list|(
name|handler
argument_list|)
expr_stmt|;
if|if
condition|(
name|handler
operator|instanceof
name|ISVNAdminEventHandler
condition|)
block|{
name|myEventHandler
operator|=
operator|(
name|ISVNAdminEventHandler
operator|)
name|handler
expr_stmt|;
block|}
block|}
comment|/**      * Creates an FSFS-type repository.      *       * This implementation uses {@link org.tmatesoft.svn.core.io.SVNRepositoryFactory#createLocalRepository(File, String, boolean, boolean)}}.      *<p>      * If<code>uuid</code> is<span class="javakeyword">null</span> a new uuid will be generated, otherwise       * the specified will be used.      *       *<p>      * If<code>enableRevisionProperties</code> is<span class="javakeyword">true</span>, an empty       * pre-revprop-change hook will be placed into the repository /hooks subdir. This enables changes to       * revision properties of the newly created repository.       *       *<p>      * If<code>force</code> is<span class="javakeyword">true</span> and<code>path</code> already       * exists, deletes that path and creates a repository in its place.      *       * @param  path                        a repository root dir path      * @param  uuid                        a repository uuid      * @param  enableRevisionProperties    enables/disables changes to revision properties      * @param  force                       forces operation to run      * @return                             a local URL (file:///) of a newly created repository      * @throws SVNException      * @see                                #doCreateRepository(File, String, boolean, boolean, boolean)      * @since                              1.1.0       */
specifier|public
name|SVNURL
name|doCreateRepository
parameter_list|(
name|File
name|path
parameter_list|,
name|String
name|uuid
parameter_list|,
name|boolean
name|enableRevisionProperties
parameter_list|,
name|boolean
name|force
parameter_list|)
throws|throws
name|SVNException
block|{
return|return
name|SVNRepositoryFactory
operator|.
name|createLocalRepository
argument_list|(
name|path
argument_list|,
name|uuid
argument_list|,
name|enableRevisionProperties
argument_list|,
name|force
argument_list|)
return|;
block|}
comment|/**      * Creates an FSFS-type repository.      *       * This implementation uses {@link org.tmatesoft.svn.core.io.SVNRepositoryFactory#createLocalRepository(File, String, boolean, boolean)}}.      *<p>      * If<code>uuid</code> is<span class="javakeyword">null</span> a new uuid will be generated, otherwise       * the specified will be used.      *       *<p>      * If<code>enableRevisionProperties</code> is<span class="javakeyword">true</span>, an empty       * pre-revprop-change hook will be placed into the repository /hooks subdir. This enables changes to       * revision properties of the newly created repository.       *       *<p>      * If<code>force</code> is<span class="javakeyword">true</span> and<code>path</code> already       * exists, deletes that path and creates a repository in its place.      *       *<p>      * Set<code>pre14Compatible</code> to<span class="javakeyword">true</span> if you want a new repository       * to be compatible with pre-1.4 servers.      *       * @param  path                        a repository root dir path      * @param  uuid                        a repository uuid      * @param  enableRevisionProperties    enables/disables changes to revision properties      * @param  force                       forces operation to run      * @param  pre14Compatible<span class="javakeyword">true</span> to       *                                     create a repository with pre-1.4 format      * @return                             a local URL (file:///) of a newly created repository      * @throws SVNException      * @since                              1.1.1       */
specifier|public
name|SVNURL
name|doCreateRepository
parameter_list|(
name|File
name|path
parameter_list|,
name|String
name|uuid
parameter_list|,
name|boolean
name|enableRevisionProperties
parameter_list|,
name|boolean
name|force
parameter_list|,
name|boolean
name|pre14Compatible
parameter_list|)
throws|throws
name|SVNException
block|{
return|return
name|doCreateRepository
argument_list|(
name|path
argument_list|,
name|uuid
argument_list|,
name|enableRevisionProperties
argument_list|,
name|force
argument_list|,
name|pre14Compatible
argument_list|,
literal|false
argument_list|)
return|;
block|}
comment|/**      * Creates an FSFS-type repository.      *       * This implementation uses {@link org.tmatesoft.svn.core.io.SVNRepositoryFactory#createLocalRepository(File, String, boolean, boolean)}}.      *<p>      * If<code>uuid</code> is<span class="javakeyword">null</span> a new uuid will be generated, otherwise       * the specified will be used.      *       *<p>      * If<code>enableRevisionProperties</code> is<span class="javakeyword">true</span>, an empty       * pre-revprop-change hook will be placed into the repository /hooks subdir. This enables changes to       * revision properties of the newly created repository.       *       *<p>      * If<code>force</code> is<span class="javakeyword">true</span> and<code>path</code> already       * exists, deletes that path and creates a repository in its place.      *       *<p>      * Set<code>pre14Compatible</code> to<span class="javakeyword">true</span> if you want a new repository       * to be compatible with pre-1.4 servers,<code>pre15Compatible</code> - with pre-1.5 servers and       *<code>pre16Compatible</code> - with pre-1.6 servers.       *       *<p>      * There must be only one option (either<code>pre14Compatible</code> or<code>pre15Compatible</code> or<code>pre16Compatible</code>)       * set to<span class="javakeyword">true</span> at a time.      *       * @param  path                        a repository root dir path      * @param  uuid                        a repository uuid      * @param  enableRevisionProperties    enables/disables changes to revision properties      * @param  force                       forces operation to run      * @param  pre14Compatible<span class="javakeyword">true</span> to       *                                     create a repository with pre-1.4 format      * @param  pre15Compatible<span class="javakeyword">true</span> to      *                                     create a repository with pre-1.5 format      * @param  pre16Compatible<span class="javakeyword">true</span> to      *                                     create a repository with pre-1.6 format      * @return                             a local URL (file:///) of a newly created repository      * @throws SVNException      * @since                              1.3, SVN 1.5.0       */
specifier|public
name|SVNURL
name|doCreateRepository
parameter_list|(
name|File
name|path
parameter_list|,
name|String
name|uuid
parameter_list|,
name|boolean
name|enableRevisionProperties
parameter_list|,
name|boolean
name|force
parameter_list|,
name|boolean
name|pre14Compatible
parameter_list|,
name|boolean
name|pre15Compatible
parameter_list|,
name|boolean
name|pre16Compatible
parameter_list|)
throws|throws
name|SVNException
block|{
return|return
name|SVNRepositoryFactory
operator|.
name|createLocalRepository
argument_list|(
name|path
argument_list|,
name|uuid
argument_list|,
name|enableRevisionProperties
argument_list|,
name|force
argument_list|,
name|pre14Compatible
argument_list|,
name|pre15Compatible
argument_list|,
name|pre16Compatible
argument_list|)
return|;
block|}
comment|/**      * Creates an FSFS-type repository.      *       * This implementation uses {@link org.tmatesoft.svn.core.io.SVNRepositoryFactory#createLocalRepository(File, String, boolean, boolean)}}.      *<p>      * If<code>uuid</code> is<span class="javakeyword">null</span> a new uuid will be generated, otherwise       * the specified will be used.      *       *<p>      * If<code>enableRevisionProperties</code> is<span class="javakeyword">true</span>, an empty       * pre-revprop-change hook will be placed into the repository /hooks subdir. This enables changes to       * revision properties of the newly created repository.       *       *<p>      * If<code>force</code> is<span class="javakeyword">true</span> and<code>path</code> already       * exists, deletes that path and creates a repository in its place.      *       *<p>      * Set<code>pre14Compatible</code> to<span class="javakeyword">true</span> if you want a new repository       * to be compatible with pre-1.4 servers,<code>pre15Compatible</code> - with pre-1.5 servers.      *       *<p>      * There must be only one option (either<code>pre14Compatible</code> or<code>pre15Compatible</code>)       * set to<span class="javakeyword">true</span> at a time.      *       * @param  path                        a repository root dir path      * @param  uuid                        a repository uuid      * @param  enableRevisionProperties    enables/disables changes to revision properties      * @param  force                       forces operation to run      * @param  pre14Compatible<span class="javakeyword">true</span> to       *                                     create a repository with pre-1.4 format      * @param  pre15Compatible<span class="javakeyword">true</span> to      *                                     create a repository with pre-1.5 format      * @return                             a local URL (file:///) of a newly created repository      * @throws SVNException      * @since                              1.2, SVN 1.5.0       */
specifier|public
name|SVNURL
name|doCreateRepository
parameter_list|(
name|File
name|path
parameter_list|,
name|String
name|uuid
parameter_list|,
name|boolean
name|enableRevisionProperties
parameter_list|,
name|boolean
name|force
parameter_list|,
name|boolean
name|pre14Compatible
parameter_list|,
name|boolean
name|pre15Compatible
parameter_list|)
throws|throws
name|SVNException
block|{
return|return
name|doCreateRepository
argument_list|(
name|path
argument_list|,
name|uuid
argument_list|,
name|enableRevisionProperties
argument_list|,
name|force
argument_list|,
name|pre14Compatible
argument_list|,
name|pre15Compatible
argument_list|,
literal|false
argument_list|)
return|;
block|}
comment|/**      * Copies revision properties from the source repository starting at<code>startRevision</code> and up to       *<code>endRevision</code> to corresponding revisions of the destination repository represented by       *<code>toURL</code>.      *       *<p>      * This method is equivalent to the command 'copy-revprops' of the native Subversion<i>svnsync</i> utility.       * Note that the destination repository given as<code>toURL</code> must be synchronized with a source       * repository. Please, see {@link #doInitialize(SVNURL, SVNURL)}} how to initialize such a synchronization.        *       *<p/>      * If the caller has {@link #setEventHandler(ISVNEventHandler) provided} an event handler, the handler will       * receive an {@link SVNAdminEvent} with the {@link SVNAdminEventAction#REVISION_PROPERTIES_COPIED} action       * when the properties get copied.      *       * @param  toURL          a url to the destination repository which must be synchronized      *                        with another repository       * @param  startRevision  start revision      * @param  endRevision    end revision      * @throws SVNException   in the following cases:      *<ul>      *<li/>exception with {@link SVNErrorCode#IO_ERROR} error code - if any of revisions      *                        between<code>startRevision</code> and<code>endRevision</code> inclusively was not       *                        synchronized yet      *</ul>      * @since                 1.2.0, new in Subversion 1.5.0      */
specifier|public
name|void
name|doCopyRevisionProperties
parameter_list|(
name|SVNURL
name|toURL
parameter_list|,
name|long
name|startRevision
parameter_list|,
name|long
name|endRevision
parameter_list|)
throws|throws
name|SVNException
block|{
name|SVNRepository
name|toRepos
init|=
literal|null
decl_stmt|;
name|SessionInfo
name|info
init|=
literal|null
decl_stmt|;
name|SVNException
name|error
init|=
literal|null
decl_stmt|;
name|SVNException
name|error2
init|=
literal|null
decl_stmt|;
try|try
block|{
name|toRepos
operator|=
name|createRepository
argument_list|(
name|toURL
argument_list|,
literal|null
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|checkIfRepositoryIsAtRoot
argument_list|(
name|toRepos
argument_list|,
name|toURL
argument_list|)
expr_stmt|;
name|lock
argument_list|(
name|toRepos
argument_list|)
expr_stmt|;
name|info
operator|=
name|openSourceRepository
argument_list|(
name|toRepos
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|SVNRevision
operator|.
name|isValidRevisionNumber
argument_list|(
name|startRevision
argument_list|)
condition|)
block|{
name|startRevision
operator|=
name|info
operator|.
name|myLastMergedRevision
expr_stmt|;
block|}
if|if
condition|(
operator|!
name|SVNRevision
operator|.
name|isValidRevisionNumber
argument_list|(
name|endRevision
argument_list|)
condition|)
block|{
name|endRevision
operator|=
name|info
operator|.
name|myLastMergedRevision
expr_stmt|;
block|}
if|if
condition|(
name|startRevision
operator|>
name|info
operator|.
name|myLastMergedRevision
condition|)
block|{
name|SVNErrorMessage
name|err
init|=
name|SVNErrorMessage
operator|.
name|create
argument_list|(
name|SVNErrorCode
operator|.
name|IO_ERROR
argument_list|,
literal|"Cannot copy revprops for a revision ({0}) that has not been synchronized yet"
argument_list|,
name|String
operator|.
name|valueOf
argument_list|(
name|startRevision
argument_list|)
argument_list|)
decl_stmt|;
name|SVNErrorManager
operator|.
name|error
argument_list|(
name|err
argument_list|,
name|SVNLogType
operator|.
name|FSFS
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|endRevision
operator|>
name|info
operator|.
name|myLastMergedRevision
condition|)
block|{
name|SVNErrorMessage
name|err
init|=
name|SVNErrorMessage
operator|.
name|create
argument_list|(
name|SVNErrorCode
operator|.
name|IO_ERROR
argument_list|,
literal|"Cannot copy revprops for a revision ({0}) that has not been synchronized yet"
argument_list|,
name|String
operator|.
name|valueOf
argument_list|(
name|endRevision
argument_list|)
argument_list|)
decl_stmt|;
name|SVNErrorManager
operator|.
name|error
argument_list|(
name|err
argument_list|,
name|SVNLogType
operator|.
name|FSFS
argument_list|)
expr_stmt|;
block|}
name|int
name|normalizedRevPropsCount
init|=
literal|0
decl_stmt|;
name|long
name|step
init|=
name|startRevision
operator|>
name|endRevision
condition|?
operator|-
literal|1
else|:
literal|1
decl_stmt|;
for|for
control|(
name|long
name|i
init|=
name|startRevision
init|;
name|i
operator|!=
name|endRevision
operator|+
name|step
condition|;
name|i
operator|+=
name|step
control|)
block|{
name|checkCancelled
argument_list|()
expr_stmt|;
name|SVNProperties
name|normalizedProps
init|=
name|copyRevisionProperties
argument_list|(
name|info
operator|.
name|myRepository
argument_list|,
name|toRepos
argument_list|,
name|i
argument_list|,
literal|false
argument_list|)
decl_stmt|;
name|normalizedRevPropsCount
operator|+=
name|normalizedProps
operator|.
name|size
argument_list|()
expr_stmt|;
block|}
name|handleNormalizedProperties
argument_list|(
name|normalizedRevPropsCount
argument_list|,
literal|0
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|SVNException
name|svne
parameter_list|)
block|{
name|error
operator|=
name|svne
expr_stmt|;
block|}
finally|finally
block|{
try|try
block|{
name|unlock
argument_list|(
name|toRepos
argument_list|)
expr_stmt|;
if|if
condition|(
name|toRepos
operator|!=
literal|null
condition|)
block|{
name|toRepos
operator|.
name|closeSession
argument_list|()
expr_stmt|;
block|}
if|if
condition|(
name|info
operator|!=
literal|null
operator|&&
name|info
operator|.
name|myRepository
operator|!=
literal|null
condition|)
block|{
name|info
operator|.
name|myRepository
operator|.
name|closeSession
argument_list|()
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
name|SVNException
name|svne
parameter_list|)
block|{
name|error2
operator|=
name|svne
expr_stmt|;
block|}
block|}
if|if
condition|(
name|error
operator|!=
literal|null
condition|)
block|{
throw|throw
name|error
throw|;
block|}
if|else if
condition|(
name|error2
operator|!=
literal|null
condition|)
block|{
throw|throw
name|error2
throw|;
block|}
block|}
comment|/**      * Initializes synchronization between source and target repositories.      *       *<p>      * This method is equivalent to the command 'initialize' ('init') of the native Subversion<i>svnsync</i>       * utility. Initialization places information of a source repository to a destination one (setting special       * revision properties in revision 0) as well as copies all revision props from revision 0 of the source       * repository to revision 0 of the destination one.         *       * @param  fromURL         a source repository url      * @param  toURL           a destination repository url      * @throws SVNException    in the following cases:      *<ul>      *<li/>exception with {@link SVNErrorCode#IO_ERROR} error code - if       *                         either the target repository's last revision is different from<code>0</code>, or      *                         no {@link SVNRevisionProperty#FROM_URL} property value found in the target       *                         repository      *<li/>exception with {@link SVNErrorCode#RA_PARTIAL_REPLAY_NOT_SUPPORTED} error       *                         code - if the source repository does not support partial replay      *</ul>      * @since                  1.1, new in Subversion 1.4      */
specifier|public
name|void
name|doInitialize
parameter_list|(
name|SVNURL
name|fromURL
parameter_list|,
name|SVNURL
name|toURL
parameter_list|)
throws|throws
name|SVNException
block|{
name|SVNRepository
name|toRepos
init|=
literal|null
decl_stmt|;
name|SVNRepository
name|fromRepos
init|=
literal|null
decl_stmt|;
name|SVNException
name|error
init|=
literal|null
decl_stmt|;
name|SVNException
name|error2
init|=
literal|null
decl_stmt|;
try|try
block|{
name|toRepos
operator|=
name|createRepository
argument_list|(
name|toURL
argument_list|,
literal|null
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|checkIfRepositoryIsAtRoot
argument_list|(
name|toRepos
argument_list|,
name|toURL
argument_list|)
expr_stmt|;
name|lock
argument_list|(
name|toRepos
argument_list|)
expr_stmt|;
name|long
name|latestRevision
init|=
name|toRepos
operator|.
name|getLatestRevision
argument_list|()
decl_stmt|;
if|if
condition|(
name|latestRevision
operator|!=
literal|0
condition|)
block|{
name|SVNErrorMessage
name|err
init|=
name|SVNErrorMessage
operator|.
name|create
argument_list|(
name|SVNErrorCode
operator|.
name|IO_ERROR
argument_list|,
literal|"Cannot initialize a repository with content in it"
argument_list|)
decl_stmt|;
name|SVNErrorManager
operator|.
name|error
argument_list|(
name|err
argument_list|,
name|SVNLogType
operator|.
name|FSFS
argument_list|)
expr_stmt|;
block|}
name|SVNPropertyValue
name|fromURLProp
init|=
name|toRepos
operator|.
name|getRevisionPropertyValue
argument_list|(
literal|0
argument_list|,
name|SVNRevisionProperty
operator|.
name|FROM_URL
argument_list|)
decl_stmt|;
if|if
condition|(
name|fromURLProp
operator|!=
literal|null
condition|)
block|{
name|SVNErrorMessage
name|err
init|=
name|SVNErrorMessage
operator|.
name|create
argument_list|(
name|SVNErrorCode
operator|.
name|IO_ERROR
argument_list|,
literal|"Destination repository is already synchronizing from ''{0}''"
argument_list|,
name|fromURLProp
argument_list|)
decl_stmt|;
name|SVNErrorManager
operator|.
name|error
argument_list|(
name|err
argument_list|,
name|SVNLogType
operator|.
name|FSFS
argument_list|)
expr_stmt|;
block|}
name|fromRepos
operator|=
name|createRepository
argument_list|(
name|fromURL
argument_list|,
literal|null
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|SVNURL
name|rootURL
init|=
name|fromRepos
operator|.
name|getRepositoryRoot
argument_list|(
literal|true
argument_list|)
decl_stmt|;
if|if
condition|(
name|SVNPathUtil
operator|.
name|getPathAsChild
argument_list|(
name|rootURL
operator|.
name|toString
argument_list|()
argument_list|,
name|fromURL
operator|.
name|toString
argument_list|()
argument_list|)
operator|!=
literal|null
condition|)
block|{
name|boolean
name|supportsPartialReplay
init|=
literal|false
decl_stmt|;
try|try
block|{
name|supportsPartialReplay
operator|=
name|fromRepos
operator|.
name|hasCapability
argument_list|(
name|SVNCapability
operator|.
name|PARTIAL_REPLAY
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|SVNException
name|svne
parameter_list|)
block|{
if|if
condition|(
name|svne
operator|.
name|getErrorMessage
argument_list|()
operator|.
name|getErrorCode
argument_list|()
operator|!=
name|SVNErrorCode
operator|.
name|UNSUPPORTED_FEATURE
condition|)
block|{
throw|throw
name|svne
throw|;
block|}
block|}
if|if
condition|(
operator|!
name|supportsPartialReplay
condition|)
block|{
name|SVNErrorMessage
name|err
init|=
name|SVNErrorMessage
operator|.
name|create
argument_list|(
name|SVNErrorCode
operator|.
name|RA_PARTIAL_REPLAY_NOT_SUPPORTED
argument_list|)
decl_stmt|;
name|SVNErrorManager
operator|.
name|error
argument_list|(
name|err
argument_list|,
name|SVNLogType
operator|.
name|FSFS
argument_list|)
expr_stmt|;
block|}
block|}
name|toRepos
operator|.
name|setRevisionPropertyValue
argument_list|(
literal|0
argument_list|,
name|SVNRevisionProperty
operator|.
name|FROM_URL
argument_list|,
name|SVNPropertyValue
operator|.
name|create
argument_list|(
name|fromURL
operator|.
name|toDecodedString
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|String
name|uuid
init|=
name|fromRepos
operator|.
name|getRepositoryUUID
argument_list|(
literal|true
argument_list|)
decl_stmt|;
name|toRepos
operator|.
name|setRevisionPropertyValue
argument_list|(
literal|0
argument_list|,
name|SVNRevisionProperty
operator|.
name|FROM_UUID
argument_list|,
name|SVNPropertyValue
operator|.
name|create
argument_list|(
name|uuid
argument_list|)
argument_list|)
expr_stmt|;
name|toRepos
operator|.
name|setRevisionPropertyValue
argument_list|(
literal|0
argument_list|,
name|SVNRevisionProperty
operator|.
name|LAST_MERGED_REVISION
argument_list|,
name|SVNPropertyValue
operator|.
name|create
argument_list|(
literal|"0"
argument_list|)
argument_list|)
expr_stmt|;
name|SVNProperties
name|normalizedProps
init|=
name|copyRevisionProperties
argument_list|(
name|fromRepos
argument_list|,
name|toRepos
argument_list|,
literal|0
argument_list|,
literal|false
argument_list|)
decl_stmt|;
name|handleNormalizedProperties
argument_list|(
name|normalizedProps
operator|.
name|size
argument_list|()
argument_list|,
literal|0
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|SVNException
name|svne
parameter_list|)
block|{
name|error
operator|=
name|svne
expr_stmt|;
block|}
finally|finally
block|{
try|try
block|{
name|unlock
argument_list|(
name|toRepos
argument_list|)
expr_stmt|;
if|if
condition|(
name|toRepos
operator|!=
literal|null
condition|)
block|{
name|toRepos
operator|.
name|closeSession
argument_list|()
expr_stmt|;
block|}
if|if
condition|(
name|fromRepos
operator|!=
literal|null
condition|)
block|{
name|fromRepos
operator|.
name|closeSession
argument_list|()
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
name|SVNException
name|svne
parameter_list|)
block|{
name|error2
operator|=
name|svne
expr_stmt|;
block|}
block|}
if|if
condition|(
name|error
operator|!=
literal|null
condition|)
block|{
throw|throw
name|error
throw|;
block|}
if|else if
condition|(
name|error2
operator|!=
literal|null
condition|)
block|{
throw|throw
name|error2
throw|;
block|}
block|}
comment|/**      * Returns information about the synchronization repository located at<code>toURL</code>.      *       * @param  toURL          destination repository url      * @return                synchronization information      * @throws SVNException      * @since  1.3, SVN 1.6      */
specifier|public
name|SVNSyncInfo
name|doInfo
parameter_list|(
name|SVNURL
name|toURL
parameter_list|)
throws|throws
name|SVNException
block|{
name|SVNRepository
name|toRepos
init|=
literal|null
decl_stmt|;
try|try
block|{
name|toRepos
operator|=
name|createRepository
argument_list|(
name|toURL
argument_list|,
literal|null
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|checkIfRepositoryIsAtRoot
argument_list|(
name|toRepos
argument_list|,
name|toURL
argument_list|)
expr_stmt|;
name|SVNPropertyValue
name|fromURL
init|=
name|toRepos
operator|.
name|getRevisionPropertyValue
argument_list|(
literal|0
argument_list|,
name|SVNRevisionProperty
operator|.
name|FROM_URL
argument_list|)
decl_stmt|;
if|if
condition|(
name|fromURL
operator|==
literal|null
condition|)
block|{
name|SVNErrorMessage
name|err
init|=
name|SVNErrorMessage
operator|.
name|create
argument_list|(
name|SVNErrorCode
operator|.
name|BAD_URL
argument_list|,
literal|"Repository ''{0}'' is not initialized for synchronization"
argument_list|,
name|toURL
argument_list|)
decl_stmt|;
name|SVNErrorManager
operator|.
name|error
argument_list|(
name|err
argument_list|,
name|SVNLogType
operator|.
name|FSFS
argument_list|)
expr_stmt|;
block|}
name|SVNPropertyValue
name|fromUUID
init|=
name|toRepos
operator|.
name|getRevisionPropertyValue
argument_list|(
literal|0
argument_list|,
name|SVNRevisionProperty
operator|.
name|FROM_UUID
argument_list|)
decl_stmt|;
name|SVNPropertyValue
name|lastMergedRevProp
init|=
name|toRepos
operator|.
name|getRevisionPropertyValue
argument_list|(
literal|0
argument_list|,
name|SVNRevisionProperty
operator|.
name|LAST_MERGED_REVISION
argument_list|)
decl_stmt|;
name|long
name|lastMergedRev
init|=
name|lastMergedRevProp
operator|!=
literal|null
condition|?
name|Long
operator|.
name|parseLong
argument_list|(
name|lastMergedRevProp
operator|.
name|getString
argument_list|()
argument_list|)
else|:
name|SVNRepository
operator|.
name|INVALID_REVISION
decl_stmt|;
return|return
operator|new
name|SVNSyncInfo
argument_list|(
name|fromURL
operator|.
name|getString
argument_list|()
argument_list|,
name|fromUUID
operator|!=
literal|null
condition|?
name|fromUUID
operator|.
name|getString
argument_list|()
else|:
literal|null
argument_list|,
name|lastMergedRev
argument_list|)
return|;
block|}
finally|finally
block|{
if|if
condition|(
name|toRepos
operator|!=
literal|null
condition|)
block|{
name|toRepos
operator|.
name|closeSession
argument_list|()
expr_stmt|;
block|}
block|}
block|}
comment|/**      * Compacts a repository into a more efficient storage model.        *       *<p/>      * Compacting does not occur if there are no full shards. Also compacting does not work       * on pre-1.6 repositories.      *       * @param  repositoryRoot  root of the repository to pack      * @throws SVNException      * @since  1.3, SVN 1.6      */
specifier|public
name|void
name|doPack
parameter_list|(
name|File
name|repositoryRoot
parameter_list|)
throws|throws
name|SVNException
block|{
name|FSFS
name|fsfs
init|=
name|SVNAdminHelper
operator|.
name|openRepository
argument_list|(
name|repositoryRoot
argument_list|,
literal|true
argument_list|)
decl_stmt|;
try|try
block|{
name|FSPacker
name|packer
init|=
operator|new
name|FSPacker
argument_list|(
name|myEventHandler
argument_list|)
decl_stmt|;
name|packer
operator|.
name|pack
argument_list|(
name|fsfs
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
name|SVNAdminHelper
operator|.
name|closeRepository
argument_list|(
name|fsfs
argument_list|)
expr_stmt|;
block|}
block|}
comment|/**      * Completely synchronizes two repositories.      *       *<p>      * This method initializes the destination repository and then copies all revision      * changes (including revision properties)       * from the given source repository to the destination one. First it       * tries to use synchronization features similar to the native Subversion       * 'svnsync' capabilities. But if a server does not support       *<code>replay</code> functionality, SVNKit uses its own repository       * replication feature (see {@link org.tmatesoft.svn.core.replicator.SVNRepositoryReplicator}})      *       * @param  fromURL        a url of a repository to copy from           * @param  toURL          a destination repository url      * @throws SVNException      * @since                 1.1      */
specifier|public
name|void
name|doCompleteSynchronize
parameter_list|(
name|SVNURL
name|fromURL
parameter_list|,
name|SVNURL
name|toURL
parameter_list|)
throws|throws
name|SVNException
block|{
try|try
block|{
name|doInitialize
argument_list|(
name|fromURL
argument_list|,
name|toURL
argument_list|)
expr_stmt|;
name|doSynchronize
argument_list|(
name|toURL
argument_list|)
expr_stmt|;
return|return;
block|}
catch|catch
parameter_list|(
name|SVNException
name|svne
parameter_list|)
block|{
if|if
condition|(
name|svne
operator|.
name|getErrorMessage
argument_list|()
operator|.
name|getErrorCode
argument_list|()
operator|!=
name|SVNErrorCode
operator|.
name|RA_NOT_IMPLEMENTED
condition|)
block|{
throw|throw
name|svne
throw|;
block|}
block|}
name|SVNRepositoryReplicator
name|replicator
init|=
name|SVNRepositoryReplicator
operator|.
name|newInstance
argument_list|()
decl_stmt|;
name|SVNRepository
name|fromRepos
init|=
literal|null
decl_stmt|;
name|SVNRepository
name|toRepos
init|=
literal|null
decl_stmt|;
try|try
block|{
name|fromRepos
operator|=
name|createRepository
argument_list|(
name|fromURL
argument_list|,
literal|null
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|toRepos
operator|=
name|createRepository
argument_list|(
name|toURL
argument_list|,
literal|null
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|replicator
operator|.
name|replicateRepository
argument_list|(
name|fromRepos
argument_list|,
name|toRepos
argument_list|,
literal|1
argument_list|,
operator|-
literal|1
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
if|if
condition|(
name|fromRepos
operator|!=
literal|null
condition|)
block|{
name|fromRepos
operator|.
name|closeSession
argument_list|()
expr_stmt|;
block|}
if|if
condition|(
name|toRepos
operator|!=
literal|null
condition|)
block|{
name|toRepos
operator|.
name|closeSession
argument_list|()
expr_stmt|;
block|}
block|}
block|}
comment|/**      * Synchronizes the repository at the given url.      *       *<p>      * Synchronization means copying revision changes and revision properties from the source       * repository (that the destination one is synchronized with) to the destination one starting at       * the last merged revision. This method is equivalent to the command 'synchronize' ('sync') of       * the native Subversion<i>svnsync</i> utility.       *       * @param  toURL          a destination repository url      * @throws SVNException      * @since                 1.1, new in Subversion 1.4      */
specifier|public
name|void
name|doSynchronize
parameter_list|(
name|SVNURL
name|toURL
parameter_list|)
throws|throws
name|SVNException
block|{
name|SVNRepository
name|toRepos
init|=
literal|null
decl_stmt|;
name|SVNRepository
name|fromRepos
init|=
literal|null
decl_stmt|;
name|SVNException
name|error
init|=
literal|null
decl_stmt|;
name|SVNException
name|error2
init|=
literal|null
decl_stmt|;
try|try
block|{
name|toRepos
operator|=
name|createRepository
argument_list|(
name|toURL
argument_list|,
literal|null
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|checkIfRepositoryIsAtRoot
argument_list|(
name|toRepos
argument_list|,
name|toURL
argument_list|)
expr_stmt|;
name|lock
argument_list|(
name|toRepos
argument_list|)
expr_stmt|;
name|SessionInfo
name|info
init|=
name|openSourceRepository
argument_list|(
name|toRepos
argument_list|)
decl_stmt|;
name|fromRepos
operator|=
name|info
operator|.
name|myRepository
expr_stmt|;
name|long
name|lastMergedRevision
init|=
name|info
operator|.
name|myLastMergedRevision
decl_stmt|;
name|SVNPropertyValue
name|currentlyCopying
init|=
name|toRepos
operator|.
name|getRevisionPropertyValue
argument_list|(
literal|0
argument_list|,
name|SVNRevisionProperty
operator|.
name|CURRENTLY_COPYING
argument_list|)
decl_stmt|;
name|long
name|toLatestRevision
init|=
name|toRepos
operator|.
name|getLatestRevision
argument_list|()
decl_stmt|;
name|int
name|normalizedRevPropsCount
init|=
literal|0
decl_stmt|;
if|if
condition|(
name|currentlyCopying
operator|!=
literal|null
condition|)
block|{
name|long
name|copyingRev
init|=
operator|-
literal|1
decl_stmt|;
try|try
block|{
name|copyingRev
operator|=
name|Long
operator|.
name|parseLong
argument_list|(
name|currentlyCopying
operator|.
name|getString
argument_list|()
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|NumberFormatException
name|nfe
parameter_list|)
block|{
name|SVNErrorManager
operator|.
name|error
argument_list|(
name|SVNErrorMessage
operator|.
name|create
argument_list|(
name|SVNErrorCode
operator|.
name|IO_ERROR
argument_list|,
name|nfe
argument_list|)
argument_list|,
name|SVNLogType
operator|.
name|WC
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|copyingRev
argument_list|<
name|lastMergedRevision
operator|||
name|copyingRev
argument_list|>
name|lastMergedRevision
operator|+
literal|1
operator|||
operator|(
name|toLatestRevision
operator|!=
name|lastMergedRevision
operator|&&
name|toLatestRevision
operator|!=
name|copyingRev
operator|)
condition|)
block|{
name|SVNErrorMessage
name|err
init|=
name|SVNErrorMessage
operator|.
name|create
argument_list|(
name|SVNErrorCode
operator|.
name|IO_ERROR
argument_list|,
literal|"Revision being currently copied ({0}), last merged revision ({1}), and destination HEAD ({2}) are inconsistent; have you committed to the destination without using svnsync?"
argument_list|,
operator|new
name|Object
index|[]
block|{
name|String
operator|.
name|valueOf
argument_list|(
name|copyingRev
argument_list|)
block|,
name|String
operator|.
name|valueOf
argument_list|(
name|lastMergedRevision
argument_list|)
block|,
name|String
operator|.
name|valueOf
argument_list|(
name|toLatestRevision
argument_list|)
block|}
argument_list|)
decl_stmt|;
name|SVNErrorManager
operator|.
name|error
argument_list|(
name|err
argument_list|,
name|SVNLogType
operator|.
name|FSFS
argument_list|)
expr_stmt|;
block|}
if|else if
condition|(
name|copyingRev
operator|==
name|toLatestRevision
condition|)
block|{
if|if
condition|(
name|copyingRev
operator|>
name|lastMergedRevision
condition|)
block|{
name|SVNProperties
name|normalizedProps
init|=
name|copyRevisionProperties
argument_list|(
name|fromRepos
argument_list|,
name|toRepos
argument_list|,
name|toLatestRevision
argument_list|,
literal|true
argument_list|)
decl_stmt|;
name|normalizedRevPropsCount
operator|+=
name|normalizedProps
operator|.
name|size
argument_list|()
expr_stmt|;
name|lastMergedRevision
operator|=
name|copyingRev
expr_stmt|;
block|}
name|toRepos
operator|.
name|setRevisionPropertyValue
argument_list|(
literal|0
argument_list|,
name|SVNRevisionProperty
operator|.
name|LAST_MERGED_REVISION
argument_list|,
name|SVNPropertyValue
operator|.
name|create
argument_list|(
name|SVNProperty
operator|.
name|toString
argument_list|(
name|lastMergedRevision
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|toRepos
operator|.
name|setRevisionPropertyValue
argument_list|(
literal|0
argument_list|,
name|SVNRevisionProperty
operator|.
name|CURRENTLY_COPYING
argument_list|,
literal|null
argument_list|)
expr_stmt|;
block|}
block|}
else|else
block|{
if|if
condition|(
name|toLatestRevision
operator|!=
name|lastMergedRevision
condition|)
block|{
name|SVNErrorMessage
name|err
init|=
name|SVNErrorMessage
operator|.
name|create
argument_list|(
name|SVNErrorCode
operator|.
name|IO_ERROR
argument_list|,
literal|"Destination HEAD ({0}) is not the last merged revision ({1}); have you committed to the destination without using svnsync?"
argument_list|,
operator|new
name|Object
index|[]
block|{
name|String
operator|.
name|valueOf
argument_list|(
name|toLatestRevision
argument_list|)
block|,
name|String
operator|.
name|valueOf
argument_list|(
name|lastMergedRevision
argument_list|)
block|}
argument_list|)
decl_stmt|;
name|SVNErrorManager
operator|.
name|error
argument_list|(
name|err
argument_list|,
name|SVNLogType
operator|.
name|FSFS
argument_list|)
expr_stmt|;
block|}
block|}
name|long
name|fromLatestRevision
init|=
name|fromRepos
operator|.
name|getLatestRevision
argument_list|()
decl_stmt|;
if|if
condition|(
name|fromLatestRevision
operator|<
name|lastMergedRevision
condition|)
block|{
return|return;
block|}
name|boolean
name|hasCommitRevPropCapability
init|=
name|toRepos
operator|.
name|hasCapability
argument_list|(
name|SVNCapability
operator|.
name|COMMIT_REVPROPS
argument_list|)
decl_stmt|;
name|checkCancelled
argument_list|()
expr_stmt|;
name|long
name|startRevision
init|=
name|lastMergedRevision
operator|+
literal|1
decl_stmt|;
name|long
name|endRevision
init|=
name|fromLatestRevision
decl_stmt|;
name|SVNReplayHandler
name|replayHandler
init|=
operator|new
name|SVNReplayHandler
argument_list|(
name|toRepos
argument_list|,
name|hasCommitRevPropCapability
argument_list|,
name|mySyncHandler
argument_list|,
name|getDebugLog
argument_list|()
argument_list|,
name|this
argument_list|,
name|this
argument_list|)
decl_stmt|;
name|fromRepos
operator|.
name|replayRange
argument_list|(
name|startRevision
argument_list|,
name|endRevision
argument_list|,
literal|0
argument_list|,
literal|true
argument_list|,
name|replayHandler
argument_list|)
expr_stmt|;
name|handleNormalizedProperties
argument_list|(
name|normalizedRevPropsCount
operator|+
name|replayHandler
operator|.
name|getNormalizedRevPropsCount
argument_list|()
argument_list|,
name|replayHandler
operator|.
name|getNormalizedNodePropsCount
argument_list|()
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|SVNException
name|svne
parameter_list|)
block|{
name|error
operator|=
name|svne
expr_stmt|;
block|}
finally|finally
block|{
try|try
block|{
name|unlock
argument_list|(
name|toRepos
argument_list|)
expr_stmt|;
if|if
condition|(
name|toRepos
operator|!=
literal|null
condition|)
block|{
name|toRepos
operator|.
name|closeSession
argument_list|()
expr_stmt|;
block|}
if|if
condition|(
name|fromRepos
operator|!=
literal|null
condition|)
block|{
name|fromRepos
operator|.
name|closeSession
argument_list|()
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
name|SVNException
name|svne
parameter_list|)
block|{
name|error2
operator|=
name|svne
expr_stmt|;
block|}
block|}
if|if
condition|(
name|error
operator|!=
literal|null
condition|)
block|{
throw|throw
name|error
throw|;
block|}
if|else if
condition|(
name|error2
operator|!=
literal|null
condition|)
block|{
throw|throw
name|error2
throw|;
block|}
block|}
comment|/**      * Walks through the repository tree found under<code>repositoryRoot</code> and reports all found locks       * via calls to the caller's {@link ISVNAdminEventHandler} handler implementation.      *       *<p/>      * On each locked path found this method dispatches an {@link SVNAdminEventAction#LOCK_LISTED}       * {@link SVNAdminEvent event} to the caller's handler providing the       * {@link SVNAdminEvent#getLock() lock information}.       *       * @param  repositoryRoot   repository root location      * @throws SVNException      * @since                   1.2.0, SVN 1.5.0        */
specifier|public
name|void
name|doListLocks
parameter_list|(
name|File
name|repositoryRoot
parameter_list|)
throws|throws
name|SVNException
block|{
name|FSFS
name|fsfs
init|=
name|SVNAdminHelper
operator|.
name|openRepository
argument_list|(
name|repositoryRoot
argument_list|,
literal|true
argument_list|)
decl_stmt|;
try|try
block|{
name|File
name|digestFile
init|=
name|fsfs
operator|.
name|getDigestFileFromRepositoryPath
argument_list|(
literal|"/"
argument_list|)
decl_stmt|;
name|ISVNLockHandler
name|handler
init|=
operator|new
name|ISVNLockHandler
argument_list|()
block|{
specifier|public
name|void
name|handleLock
parameter_list|(
name|String
name|path
parameter_list|,
name|SVNLock
name|lock
parameter_list|,
name|SVNErrorMessage
name|error
parameter_list|)
throws|throws
name|SVNException
block|{
name|checkCancelled
argument_list|()
expr_stmt|;
if|if
condition|(
name|myEventHandler
operator|!=
literal|null
condition|)
block|{
name|SVNAdminEvent
name|event
init|=
operator|new
name|SVNAdminEvent
argument_list|(
name|SVNAdminEventAction
operator|.
name|LOCK_LISTED
argument_list|,
name|lock
argument_list|,
name|error
argument_list|,
literal|null
argument_list|)
decl_stmt|;
name|myEventHandler
operator|.
name|handleAdminEvent
argument_list|(
name|event
argument_list|,
name|ISVNEventHandler
operator|.
name|UNKNOWN
argument_list|)
expr_stmt|;
block|}
block|}
specifier|public
name|void
name|handleUnlock
parameter_list|(
name|String
name|path
parameter_list|,
name|SVNLock
name|lock
parameter_list|,
name|SVNErrorMessage
name|error
parameter_list|)
throws|throws
name|SVNException
block|{
block|}
block|}
decl_stmt|;
name|fsfs
operator|.
name|walkDigestFiles
argument_list|(
name|digestFile
argument_list|,
name|handler
argument_list|,
literal|false
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
name|SVNAdminHelper
operator|.
name|closeRepository
argument_list|(
name|fsfs
argument_list|)
expr_stmt|;
block|}
block|}
comment|/**      * Removes locks from the specified<code>paths</code> in the repository found under       *<code>repositoryRoot</code>.      *       *<p/>      * If any path of the<code>paths</code> is not locked, then an {@link SVNAdminEvent event} with the       * {@link SVNAdminEventAction#NOT_LOCKED} action is dispatched to the caller's {@link ISVNAdminEventHandler}       * handler.      *       *<p/>      * If, on the contrary, a path is locked, it is unlocked and an event with the       * {@link SVNAdminEventAction#UNLOCKED} action is dispatched to the caller's handler providing the       * {@link SVNAdminEvent#getLock() lock information}.      *       *<p/>      * If some error occurs while unlocking, an event with the {@link SVNAdminEventAction#UNLOCK_FAILED} action       * is dispatched to the caller's handler providing the {@link SVNAdminEvent#getError() error description}.      *       * @param  repositoryRoot       repository root location       * @param  paths                paths to unlock      * @throws SVNException       * @since                       1.2.0, SVN 1.5.0        */
specifier|public
name|void
name|doRemoveLocks
parameter_list|(
name|File
name|repositoryRoot
parameter_list|,
name|String
index|[]
name|paths
parameter_list|)
throws|throws
name|SVNException
block|{
if|if
condition|(
name|paths
operator|==
literal|null
condition|)
block|{
return|return;
block|}
name|FSFS
name|fsfs
init|=
name|SVNAdminHelper
operator|.
name|openRepository
argument_list|(
name|repositoryRoot
argument_list|,
literal|true
argument_list|)
decl_stmt|;
try|try
block|{
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|paths
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
name|String
name|path
init|=
name|paths
index|[
name|i
index|]
decl_stmt|;
if|if
condition|(
name|path
operator|==
literal|null
condition|)
block|{
continue|continue;
block|}
name|checkCancelled
argument_list|()
expr_stmt|;
name|SVNLock
name|lock
init|=
literal|null
decl_stmt|;
try|try
block|{
name|lock
operator|=
name|fsfs
operator|.
name|getLockHelper
argument_list|(
name|path
argument_list|,
literal|false
argument_list|)
expr_stmt|;
if|if
condition|(
name|lock
operator|==
literal|null
condition|)
block|{
if|if
condition|(
name|myEventHandler
operator|!=
literal|null
condition|)
block|{
name|SVNAdminEvent
name|event
init|=
operator|new
name|SVNAdminEvent
argument_list|(
name|SVNAdminEventAction
operator|.
name|NOT_LOCKED
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|,
literal|"Path '"
operator|+
name|path
operator|+
literal|"' isn't locked."
argument_list|)
decl_stmt|;
name|myEventHandler
operator|.
name|handleAdminEvent
argument_list|(
name|event
argument_list|,
name|ISVNEventHandler
operator|.
name|UNKNOWN
argument_list|)
expr_stmt|;
block|}
continue|continue;
block|}
name|fsfs
operator|.
name|unlockPath
argument_list|(
name|path
argument_list|,
name|lock
operator|.
name|getID
argument_list|()
argument_list|,
literal|null
argument_list|,
literal|true
argument_list|,
literal|false
argument_list|)
expr_stmt|;
if|if
condition|(
name|myEventHandler
operator|!=
literal|null
condition|)
block|{
name|SVNAdminEvent
name|event
init|=
operator|new
name|SVNAdminEvent
argument_list|(
name|SVNAdminEventAction
operator|.
name|UNLOCKED
argument_list|,
name|lock
argument_list|,
literal|null
argument_list|,
literal|"Removed lock on '"
operator|+
name|path
operator|+
literal|"'."
argument_list|)
decl_stmt|;
name|myEventHandler
operator|.
name|handleAdminEvent
argument_list|(
name|event
argument_list|,
name|ISVNEventHandler
operator|.
name|UNKNOWN
argument_list|)
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
name|SVNException
name|svne
parameter_list|)
block|{
if|if
condition|(
name|myEventHandler
operator|!=
literal|null
condition|)
block|{
name|SVNAdminEvent
name|event
init|=
operator|new
name|SVNAdminEvent
argument_list|(
name|SVNAdminEventAction
operator|.
name|UNLOCK_FAILED
argument_list|,
name|lock
argument_list|,
name|svne
operator|.
name|getErrorMessage
argument_list|()
argument_list|,
literal|"svnadmin: "
operator|+
name|svne
operator|.
name|getErrorMessage
argument_list|()
operator|.
name|getFullMessage
argument_list|()
argument_list|)
decl_stmt|;
name|myEventHandler
operator|.
name|handleAdminEvent
argument_list|(
name|event
argument_list|,
name|ISVNEventHandler
operator|.
name|UNKNOWN
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
finally|finally
block|{
name|SVNAdminHelper
operator|.
name|closeRepository
argument_list|(
name|fsfs
argument_list|)
expr_stmt|;
block|}
block|}
comment|/**      * Lists all uncommitted transactions.      * On each uncommetted transaction found this method fires an {@link SVNAdminEvent}       * with action set to {@link SVNAdminEventAction#TRANSACTION_LISTED} to the registered       * {@link ISVNAdminEventHandler} (if any). To register your<b>ISVNAdminEventHandler</b>       * pass it to {@link #setEventHandler(ISVNEventHandler)}. For this operation the following       * information can be retrieved out of {@link SVNAdminEvent}:      *<ul>      *<li>transaction name - use {@link SVNAdminEvent#getTxnName() SVNAdminEvent.getTxnName()} to get it</li>      *<li>transaction directory - use {@link SVNAdminEvent#getTxnDir() SVNAdminEvent.getTxnDir()} to get it</li>      *</ul>      *       * @param  repositoryRoot   a repository root directory path      * @throws SVNException      * @since                   1.1.1      */
specifier|public
name|void
name|doListTransactions
parameter_list|(
name|File
name|repositoryRoot
parameter_list|)
throws|throws
name|SVNException
block|{
name|FSFS
name|fsfs
init|=
name|SVNAdminHelper
operator|.
name|openRepository
argument_list|(
name|repositoryRoot
argument_list|,
literal|true
argument_list|)
decl_stmt|;
try|try
block|{
name|Map
name|txns
init|=
name|fsfs
operator|.
name|listTransactions
argument_list|()
decl_stmt|;
for|for
control|(
name|Iterator
name|names
init|=
name|txns
operator|.
name|keySet
argument_list|()
operator|.
name|iterator
argument_list|()
init|;
name|names
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|String
name|txnName
init|=
operator|(
name|String
operator|)
name|names
operator|.
name|next
argument_list|()
decl_stmt|;
name|File
name|txnDir
init|=
operator|(
name|File
operator|)
name|txns
operator|.
name|get
argument_list|(
name|txnName
argument_list|)
decl_stmt|;
if|if
condition|(
name|myEventHandler
operator|!=
literal|null
condition|)
block|{
name|SVNAdminEvent
name|event
init|=
operator|new
name|SVNAdminEvent
argument_list|(
name|txnName
argument_list|,
name|txnDir
argument_list|,
name|SVNAdminEventAction
operator|.
name|TRANSACTION_LISTED
argument_list|)
decl_stmt|;
name|myEventHandler
operator|.
name|handleAdminEvent
argument_list|(
name|event
argument_list|,
name|ISVNEventHandler
operator|.
name|UNKNOWN
argument_list|)
expr_stmt|;
block|}
block|}
block|}
finally|finally
block|{
name|SVNAdminHelper
operator|.
name|closeRepository
argument_list|(
name|fsfs
argument_list|)
expr_stmt|;
block|}
block|}
comment|/**      * Removes the specified outstanding transactions from a repository.      * On each transaction removed this method fires an {@link SVNAdminEvent}       * with action set to {@link SVNAdminEventAction#TRANSACTION_REMOVED} to the registered       * {@link ISVNAdminEventHandler} (if any). To register your<b>ISVNAdminEventHandler</b>       * pass it to {@link #setEventHandler(ISVNEventHandler)}. For this operation the following       * information can be retrieved out of {@link SVNAdminEvent}:      *<ul>      *<li>transaction name - use {@link SVNAdminEvent#getTxnName() SVNAdminEvent.getTxnName()} to get it</li>      *<li>transaction directory - use {@link SVNAdminEvent#getTxnDir() SVNAdminEvent.getTxnDir()} to get it</li>      *</ul>      *       * @param  repositoryRoot   a repository root directory path      * @param  transactions     an array with transaction names      * @throws SVNException      * @since                   1.1.1      */
specifier|public
name|void
name|doRemoveTransactions
parameter_list|(
name|File
name|repositoryRoot
parameter_list|,
name|String
index|[]
name|transactions
parameter_list|)
throws|throws
name|SVNException
block|{
if|if
condition|(
name|transactions
operator|==
literal|null
condition|)
block|{
return|return;
block|}
name|FSFS
name|fsfs
init|=
name|SVNAdminHelper
operator|.
name|openRepository
argument_list|(
name|repositoryRoot
argument_list|,
literal|true
argument_list|)
decl_stmt|;
try|try
block|{
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|transactions
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
name|String
name|txnName
init|=
name|transactions
index|[
name|i
index|]
decl_stmt|;
name|fsfs
operator|.
name|openTxn
argument_list|(
name|txnName
argument_list|)
expr_stmt|;
name|fsfs
operator|.
name|purgeTxn
argument_list|(
name|txnName
argument_list|)
expr_stmt|;
name|SVNDebugLog
operator|.
name|getDefaultLog
argument_list|()
operator|.
name|logFine
argument_list|(
name|SVNLogType
operator|.
name|FSFS
argument_list|,
literal|"Transaction '"
operator|+
name|txnName
operator|+
literal|"' removed.\n"
argument_list|)
expr_stmt|;
if|if
condition|(
name|myEventHandler
operator|!=
literal|null
condition|)
block|{
name|SVNAdminEvent
name|event
init|=
operator|new
name|SVNAdminEvent
argument_list|(
name|txnName
argument_list|,
name|fsfs
operator|.
name|getTransactionDir
argument_list|(
name|txnName
argument_list|)
argument_list|,
name|SVNAdminEventAction
operator|.
name|TRANSACTION_REMOVED
argument_list|)
decl_stmt|;
name|myEventHandler
operator|.
name|handleAdminEvent
argument_list|(
name|event
argument_list|,
name|ISVNEventHandler
operator|.
name|UNKNOWN
argument_list|)
expr_stmt|;
block|}
block|}
block|}
finally|finally
block|{
name|SVNAdminHelper
operator|.
name|closeRepository
argument_list|(
name|fsfs
argument_list|)
expr_stmt|;
block|}
block|}
comment|/**      * Verifies the data stored in the repository. This method uses the dump implementation       * (non incremental, beginning with revision 0, ending at the latest one)       * passing a dummy output stream to it. This allows to check the integrity of the       * repository data.       *       *<p/>      * This is identical to<code>doVerify(repositoryRoot, SVNRevision.create(0), SVNRevision.HEAD)</code>.      *       * @param  repositoryRoot   a repository root directory path      * @throws SVNException     verification failed - a repository may be corrupted      * @since                   1.1.1      */
specifier|public
name|void
name|doVerify
parameter_list|(
name|File
name|repositoryRoot
parameter_list|)
throws|throws
name|SVNException
block|{
name|doVerify
argument_list|(
name|repositoryRoot
argument_list|,
name|SVNRevision
operator|.
name|create
argument_list|(
literal|0
argument_list|)
argument_list|,
name|SVNRevision
operator|.
name|HEAD
argument_list|)
expr_stmt|;
block|}
comment|/**      * Verifies repository contents found under<code>repositoryRoot</code> starting at<code>startRevision</code>      * and up to<code>endRevision</code>. This method uses the dump implementation       * (non incremental) passing a dummy output stream to it. This allows to check the integrity of the       * repository data.       *       *<p/>       * If<code>startRevision</code> is {@link SVNRevision#isValid() invalid}, it defaults to<code>0</code>.      * If<code>endRevision</code> is {@link SVNRevision#isValid() invalid}, it defaults to the HEAD revision.      *       * @param  repositoryRoot   a repository root directory path      * @param  startRevision    revision to start verification at      * @param  endRevision      revision to stop verification at      * @throws SVNException     verification failed - a repository may be corrupted      * @since                   1.2.0, SVN 1.5.0      */
specifier|public
name|void
name|doVerify
parameter_list|(
name|File
name|repositoryRoot
parameter_list|,
name|SVNRevision
name|startRevision
parameter_list|,
name|SVNRevision
name|endRevision
parameter_list|)
throws|throws
name|SVNException
block|{
name|FSFS
name|fsfs
init|=
name|SVNAdminHelper
operator|.
name|openRepository
argument_list|(
name|repositoryRoot
argument_list|,
literal|true
argument_list|)
decl_stmt|;
try|try
block|{
name|long
name|youngestRevision
init|=
name|fsfs
operator|.
name|getYoungestRevision
argument_list|()
decl_stmt|;
name|long
name|lowerRev
init|=
name|SVNAdminHelper
operator|.
name|getRevisionNumber
argument_list|(
name|startRevision
argument_list|,
name|youngestRevision
argument_list|,
name|fsfs
argument_list|)
decl_stmt|;
name|long
name|upperRev
init|=
name|SVNAdminHelper
operator|.
name|getRevisionNumber
argument_list|(
name|endRevision
argument_list|,
name|youngestRevision
argument_list|,
name|fsfs
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|SVNRevision
operator|.
name|isValidRevisionNumber
argument_list|(
name|upperRev
argument_list|)
condition|)
block|{
name|upperRev
operator|=
name|lowerRev
expr_stmt|;
block|}
name|verify
argument_list|(
name|fsfs
argument_list|,
name|lowerRev
argument_list|,
name|upperRev
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
name|SVNAdminHelper
operator|.
name|closeRepository
argument_list|(
name|fsfs
argument_list|)
expr_stmt|;
block|}
block|}
comment|/**      * Dumps contents of the repository to the provided output stream in a       * 'dumpfile' portable format.      *       *<p>      * On each revision dumped this method fires an {@link SVNAdminEvent}       * with action set to {@link SVNAdminEventAction#REVISION_DUMPED} to the registered       * {@link ISVNAdminEventHandler} (if any). To register your<b>ISVNAdminEventHandler</b>       * pass it to {@link #setEventHandler(ISVNEventHandler)}. For this operation the following       * information can be retrieved out of {@link SVNAdminEvent}:      *<ul>      *<li>dumped revision - use {@link SVNAdminEvent#getRevision() SVNAdminEvent.getRevision()} to get it</li>      *</ul>      *       * @param  repositoryRoot   a repository root directory path      * @param  dumpStream       an output stream to write dumped contents to      * @param  startRevision    the first revision to start dumping from      * @param  endRevision      the last revision to end dumping at      * @param  isIncremental    if<span class="javakeyword">true</span>       *                          then the first revision dumped will be a       *                          diff against the previous revision; otherwise       *                          the first revision is a fulltext.       * @param  useDeltas        if<span class="javakeyword">true</span>       *                          deltas will be written instead of fulltexts      * @throws SVNException      * @since                   1.1.1      */
specifier|public
name|void
name|doDump
parameter_list|(
name|File
name|repositoryRoot
parameter_list|,
name|OutputStream
name|dumpStream
parameter_list|,
name|SVNRevision
name|startRevision
parameter_list|,
name|SVNRevision
name|endRevision
parameter_list|,
name|boolean
name|isIncremental
parameter_list|,
name|boolean
name|useDeltas
parameter_list|)
throws|throws
name|SVNException
block|{
name|FSFS
name|fsfs
init|=
name|SVNAdminHelper
operator|.
name|openRepository
argument_list|(
name|repositoryRoot
argument_list|,
literal|true
argument_list|)
decl_stmt|;
try|try
block|{
name|long
name|youngestRevision
init|=
name|fsfs
operator|.
name|getYoungestRevision
argument_list|()
decl_stmt|;
name|long
name|lowerR
init|=
name|SVNAdminHelper
operator|.
name|getRevisionNumber
argument_list|(
name|startRevision
argument_list|,
name|youngestRevision
argument_list|,
name|fsfs
argument_list|)
decl_stmt|;
name|long
name|upperR
init|=
name|SVNAdminHelper
operator|.
name|getRevisionNumber
argument_list|(
name|endRevision
argument_list|,
name|youngestRevision
argument_list|,
name|fsfs
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|SVNRevision
operator|.
name|isValidRevisionNumber
argument_list|(
name|lowerR
argument_list|)
condition|)
block|{
name|lowerR
operator|=
literal|0
expr_stmt|;
name|upperR
operator|=
name|youngestRevision
expr_stmt|;
block|}
if|else if
condition|(
operator|!
name|SVNRevision
operator|.
name|isValidRevisionNumber
argument_list|(
name|upperR
argument_list|)
condition|)
block|{
name|upperR
operator|=
name|lowerR
expr_stmt|;
block|}
if|if
condition|(
name|lowerR
operator|>
name|upperR
condition|)
block|{
name|SVNErrorMessage
name|err
init|=
name|SVNErrorMessage
operator|.
name|create
argument_list|(
name|SVNErrorCode
operator|.
name|CL_ARG_PARSING_ERROR
argument_list|,
literal|"First revision cannot be higher than second"
argument_list|)
decl_stmt|;
name|SVNErrorManager
operator|.
name|error
argument_list|(
name|err
argument_list|,
name|SVNLogType
operator|.
name|FSFS
argument_list|)
expr_stmt|;
block|}
name|dump
argument_list|(
name|fsfs
argument_list|,
name|dumpStream
argument_list|,
name|lowerR
argument_list|,
name|upperR
argument_list|,
name|isIncremental
argument_list|,
name|useDeltas
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
name|SVNAdminHelper
operator|.
name|closeRepository
argument_list|(
name|fsfs
argument_list|)
expr_stmt|;
block|}
block|}
comment|/**      * Reads the provided dump stream committing new revisions to a repository.      *       *<p>      * On each revision loaded this method fires an {@link SVNAdminEvent}       * with action set to {@link SVNAdminEventAction#REVISION_LOADED} to the registered       * {@link ISVNAdminEventHandler} (if any). To register your<b>ISVNAdminEventHandler</b>       * pass it to {@link #setEventHandler(ISVNEventHandler)}. For this operation the following       * information can be retrieved out of {@link SVNAdminEvent}:      *<ul>      *<li>original revision - use {@link SVNAdminEvent#getOriginalRevision() SVNAdminEvent.getOriginalRevision()} to get it</li>      *<li>new committed revision - use {@link SVNAdminEvent#getRevision() SVNAdminEvent.getRevision()} to get it</li>      *</ul>      *       *<p>      * A call to this method is equivalent to       *<code>doLoad(repositoryRoot, dumpStream, false, false, SVNUUIDAction.DEFAULT, null)</code>.      *       * @param  repositoryRoot   the root directory path of the repository where       *                          new revisions will be committed      * @param  dumpStream       stream with dumped contents of a repository      * @throws SVNException      * @see                     #doLoad(File, InputStream, boolean, boolean, SVNUUIDAction, String)                           * @since                   1.1.1      */
specifier|public
name|void
name|doLoad
parameter_list|(
name|File
name|repositoryRoot
parameter_list|,
name|InputStream
name|dumpStream
parameter_list|)
throws|throws
name|SVNException
block|{
name|doLoad
argument_list|(
name|repositoryRoot
argument_list|,
name|dumpStream
argument_list|,
literal|false
argument_list|,
literal|false
argument_list|,
name|SVNUUIDAction
operator|.
name|DEFAULT
argument_list|,
literal|null
argument_list|)
expr_stmt|;
block|}
comment|/**      * Reads the provided dump stream committing new revisions to a repository.      *       *<p>      * On each revision loaded this method fires an {@link SVNAdminEvent}       * with action set to {@link SVNAdminEventAction#REVISION_LOADED} to the registered       * {@link ISVNAdminEventHandler} (if any). To register your<b>ISVNAdminEventHandler</b>       * pass it to {@link #setEventHandler(ISVNEventHandler)}. For this operation the following       * information can be retrieved out of {@link SVNAdminEvent}:      *<ul>      *<li>original revision - use {@link SVNAdminEvent#getOriginalRevision() SVNAdminEvent.getOriginalRevision()} to get it</li>      *<li>new committed revision - use {@link SVNAdminEvent#getRevision() SVNAdminEvent.getRevision()} to get it</li>      *</ul>      *       * @param  repositoryRoot    the root directory path of the repository where       *                           new revisions will be committed      * @param  dumpStream        stream with dumped contents of a repository      * @param  usePreCommitHook  if<span class="javakeyword">true</span>       *                           then calls a pre-commit hook before committing       * @param  usePostCommitHook if<span class="javakeyword">true</span>       *                           then calls a post-commit hook after committing      * @param  uuidAction        one of the three possible ways to treat uuids       * @param  parentDir         if not<span class="javakeyword">null</span>       *                           then loads at this directory in the repository      * @throws SVNException      * @since                       1.1.1      */
specifier|public
name|void
name|doLoad
parameter_list|(
name|File
name|repositoryRoot
parameter_list|,
name|InputStream
name|dumpStream
parameter_list|,
name|boolean
name|usePreCommitHook
parameter_list|,
name|boolean
name|usePostCommitHook
parameter_list|,
name|SVNUUIDAction
name|uuidAction
parameter_list|,
name|String
name|parentDir
parameter_list|)
throws|throws
name|SVNException
block|{
name|CharsetDecoder
name|decoder
init|=
name|Charset
operator|.
name|forName
argument_list|(
literal|"UTF-8"
argument_list|)
operator|.
name|newDecoder
argument_list|()
decl_stmt|;
name|FSFS
name|fsfs
init|=
literal|null
decl_stmt|;
try|try
block|{
name|fsfs
operator|=
name|SVNAdminHelper
operator|.
name|openRepository
argument_list|(
name|repositoryRoot
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|ISVNLoadHandler
name|handler
init|=
name|createLoadHandler
argument_list|(
name|fsfs
argument_list|,
name|usePreCommitHook
argument_list|,
name|usePostCommitHook
argument_list|,
name|uuidAction
argument_list|,
name|parentDir
argument_list|)
decl_stmt|;
name|SVNDumpStreamParser
name|parser
init|=
name|getDumpStreamParser
argument_list|()
decl_stmt|;
name|parser
operator|.
name|parseDumpStream
argument_list|(
name|dumpStream
argument_list|,
name|handler
argument_list|,
name|decoder
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
name|SVNAdminHelper
operator|.
name|closeRepository
argument_list|(
name|fsfs
argument_list|)
expr_stmt|;
block|}
block|}
comment|/**      * Recovers the repository found under<code>repositoryRoot</code>.      * This method can recover only FSFS type repositories and is identical to the<code>'svnadmin recover'</code>      * command.      *       *<p/>      * If the caller has {@link #setEventHandler(ISVNEventHandler) provided} an event handler, the handler will       * receive an {@link SVNAdminEvent} with the {@link SVNAdminEventAction#RECOVERY_STARTED} action before       * the recovery starts.      *       * @param  repositoryRoot    repository root location       * @throws SVNException       * @since                    1.2.0, SVN 1.5.0      */
specifier|public
name|void
name|doRecover
parameter_list|(
name|File
name|repositoryRoot
parameter_list|)
throws|throws
name|SVNException
block|{
name|FSFS
name|fsfs
init|=
literal|null
decl_stmt|;
try|try
block|{
name|fsfs
operator|=
name|SVNAdminHelper
operator|.
name|openRepositoryForRecovery
argument_list|(
name|repositoryRoot
argument_list|)
expr_stmt|;
if|if
condition|(
name|myEventHandler
operator|!=
literal|null
condition|)
block|{
name|SVNAdminEvent
name|event
init|=
operator|new
name|SVNAdminEvent
argument_list|(
name|SVNAdminEventAction
operator|.
name|RECOVERY_STARTED
argument_list|)
decl_stmt|;
name|myEventHandler
operator|.
name|handleAdminEvent
argument_list|(
name|event
argument_list|,
name|ISVNEventHandler
operator|.
name|UNKNOWN
argument_list|)
expr_stmt|;
block|}
name|FSRecoverer
name|recoverer
init|=
operator|new
name|FSRecoverer
argument_list|(
name|fsfs
argument_list|,
name|this
argument_list|)
decl_stmt|;
name|recoverer
operator|.
name|runRecovery
argument_list|()
expr_stmt|;
block|}
finally|finally
block|{
if|if
condition|(
name|fsfs
operator|!=
literal|null
condition|)
block|{
name|fsfs
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
block|}
block|}
comment|/**      * Upgrades the repository located at<code>repositoryRoot</code> to the latest supported      * schema version. This method is identical to the<code>'svnadmin upgrade'</code> command.      *       *<p/>      * This functionality is provided as a convenience for repository administrators who wish to make use of       * new Subversion functionality without having to undertake a potentially costly full repository dump       * and load operation. As such, the upgrade performs only the minimum amount of work needed to accomplish       * this while still maintaining the integrity of the repository. It does not guarantee the most optimized       * repository state as a dump and subsequent load would.      *      *<p/>      * If the caller has {@link #setEventHandler(ISVNEventHandler) provided} an event handler, the handler will       * receive an {@link SVNAdminEvent} with the {@link SVNAdminEventAction#UPGRADE} action before       * the upgrade starts.      *       * @param  repositoryRoot   repository root location      * @throws SVNException       * @since                   1.2.0, SVN 1.5.0      */
specifier|public
name|void
name|doUpgrade
parameter_list|(
name|File
name|repositoryRoot
parameter_list|)
throws|throws
name|SVNException
block|{
name|FSFS
name|fsfs
init|=
name|SVNAdminHelper
operator|.
name|openRepository
argument_list|(
name|repositoryRoot
argument_list|,
literal|true
argument_list|)
decl_stmt|;
try|try
block|{
if|if
condition|(
name|myEventHandler
operator|!=
literal|null
condition|)
block|{
name|SVNAdminEvent
name|event
init|=
operator|new
name|SVNAdminEvent
argument_list|(
name|SVNAdminEventAction
operator|.
name|UPGRADE
argument_list|)
decl_stmt|;
name|myEventHandler
operator|.
name|handleAdminEvent
argument_list|(
name|event
argument_list|,
name|ISVNEventHandler
operator|.
name|UNKNOWN
argument_list|)
expr_stmt|;
block|}
name|File
name|reposFormatFile
init|=
name|fsfs
operator|.
name|getRepositoryFormatFile
argument_list|()
decl_stmt|;
name|int
name|format
init|=
name|fsfs
operator|.
name|getReposFormat
argument_list|()
decl_stmt|;
name|SVNFileUtil
operator|.
name|writeVersionFile
argument_list|(
name|reposFormatFile
argument_list|,
name|format
argument_list|)
expr_stmt|;
name|fsfs
operator|.
name|upgrade
argument_list|()
expr_stmt|;
name|SVNFileUtil
operator|.
name|writeVersionFile
argument_list|(
name|reposFormatFile
argument_list|,
name|FSFS
operator|.
name|REPOSITORY_FORMAT
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
name|SVNAdminHelper
operator|.
name|closeRepository
argument_list|(
name|fsfs
argument_list|)
expr_stmt|;
block|}
block|}
comment|/**      * Resets the repository UUID with the provided<code>uuid</code> for the repository located at       *<code>repositoryRoot</code>. This method is identical to the<code>'svnadmin setuuid'</code> command.      *       *<p/>      * If no<code>uuid</code> is specified, then<code>SVNKit</code> will generate a new one and will use it to       * reset the original UUID.      *       * @param  repositoryRoot   repository root location      * @param  uuid             new UUID to set      * @throws SVNException     exception with {@link SVNErrorCode#BAD_UUID} error code - if the<code>uuid</code>      *                          is malformed       * @since                   1.2.0, SVN 1.5.0      */
specifier|public
name|void
name|doSetUUID
parameter_list|(
name|File
name|repositoryRoot
parameter_list|,
name|String
name|uuid
parameter_list|)
throws|throws
name|SVNException
block|{
name|FSFS
name|fsfs
init|=
name|SVNAdminHelper
operator|.
name|openRepository
argument_list|(
name|repositoryRoot
argument_list|,
literal|true
argument_list|)
decl_stmt|;
try|try
block|{
if|if
condition|(
name|uuid
operator|==
literal|null
condition|)
block|{
name|uuid
operator|=
name|SVNUUIDGenerator
operator|.
name|generateUUIDString
argument_list|()
expr_stmt|;
block|}
else|else
block|{
name|String
index|[]
name|components
init|=
name|uuid
operator|.
name|split
argument_list|(
literal|"-"
argument_list|)
decl_stmt|;
if|if
condition|(
name|components
operator|.
name|length
operator|!=
literal|5
condition|)
block|{
name|SVNErrorMessage
name|err
init|=
name|SVNErrorMessage
operator|.
name|create
argument_list|(
name|SVNErrorCode
operator|.
name|BAD_UUID
argument_list|,
literal|"Malformed UUID ''{0}''"
argument_list|,
name|uuid
argument_list|)
decl_stmt|;
name|SVNErrorManager
operator|.
name|error
argument_list|(
name|err
argument_list|,
name|SVNLogType
operator|.
name|FSFS
argument_list|)
expr_stmt|;
block|}
block|}
name|fsfs
operator|.
name|setUUID
argument_list|(
name|uuid
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
name|SVNAdminHelper
operator|.
name|closeRepository
argument_list|(
name|fsfs
argument_list|)
expr_stmt|;
block|}
block|}
comment|/**      * Makes a hot copy of a repository located at<code>srcRepositoryRoot</code> to one located at       *<code>newRepositoryRoot</code>. This method is identical to the<code>'svnadmin hotcopy'</code> command.      *       * @param  srcRepositoryRoot   repository to copy data from       * @param  newRepositoryRoot   repository to copy data to      * @throws SVNException       * @since                       1.2.0, SVN 1.5.0      */
specifier|public
name|void
name|doHotCopy
parameter_list|(
name|File
name|srcRepositoryRoot
parameter_list|,
name|File
name|newRepositoryRoot
parameter_list|)
throws|throws
name|SVNException
block|{
name|FSFS
name|fsfs
init|=
name|SVNAdminHelper
operator|.
name|openRepository
argument_list|(
name|srcRepositoryRoot
argument_list|,
literal|false
argument_list|)
decl_stmt|;
try|try
block|{
name|FSHotCopier
name|copier
init|=
name|getHotCopier
argument_list|()
decl_stmt|;
name|copier
operator|.
name|runHotCopy
argument_list|(
name|fsfs
argument_list|,
name|newRepositoryRoot
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
name|SVNAdminHelper
operator|.
name|closeRepository
argument_list|(
name|fsfs
argument_list|)
expr_stmt|;
block|}
block|}
comment|/**      * Returns the HEAD revision of the repository located at<code>repositoryRoot</code>.      *       *<p/>      * Identical to the<code>'svnlook youngest'</code> svn command.      *       * @param  repositoryRoot  repository root location      * @return                 the last revision      * @throws SVNException       * @since                  1.2.0      */
specifier|public
name|long
name|getYoungestRevision
parameter_list|(
name|File
name|repositoryRoot
parameter_list|)
throws|throws
name|SVNException
block|{
name|FSFS
name|fsfs
init|=
name|SVNAdminHelper
operator|.
name|openRepository
argument_list|(
name|repositoryRoot
argument_list|,
literal|true
argument_list|)
decl_stmt|;
try|try
block|{
return|return
name|fsfs
operator|.
name|getYoungestRevision
argument_list|()
return|;
block|}
finally|finally
block|{
name|SVNAdminHelper
operator|.
name|closeRepository
argument_list|(
name|fsfs
argument_list|)
expr_stmt|;
block|}
block|}
comment|/**      * Filters out nodes with or without the given<code>prefixes</code> from<code>dumpStream</code>       * to<code>resultDumpStream</code>. This method is similar to the functionality provided by the       *<code>'svndumpfilter'</code> utility.      *       *<p/>      * If<code>exclude</code> is<span class="javakeyword">true</span> then filters out nodes with       *<code>prefixes</code>, otherwise nodes without<code>prefixes</code>.      *       *<p/>      * If the caller has {@link #setEventHandler(ISVNEventHandler) provided} an event handler, the handler will       * be called with different actions:      *<ul>      *<li/>{@link SVNAdminEventAction#DUMP_FILTER_TOTAL_REVISIONS_DROPPED} - use {@link SVNAdminEvent#getDroppedRevisionsCount()}       * to retrieve the total number of dropped revisions.      *<li/>{@link SVNAdminEventAction#DUMP_FILTER_DROPPED_RENUMBERED_REVISION} - is sent only when       *<code>renumberRevisions</code> is<span class="javakeyword">true</span> and informs that an original       * revision (which is provided as {@link SVNAdminEvent#getRevision()}) was dropped.      *<li/>{@link SVNAdminEventAction#DUMP_FILTER_RENUMBERED_REVISION} - is sent only when       *<code>renumberRevisions</code> is<span class="javakeyword">true</span> and informs that the original       * revision (provided as {@link SVNAdminEvent#getOriginalRevision()}) was renumbered to {@link SVNAdminEvent#getRevision()}.        *<li/>{@link SVNAdminEventAction#DUMP_FILTER_DROPPED_NODE} - says that {@link SVNAdminEvent#getPath()} was       * dropped.      *<li/>{@link SVNAdminEventAction#DUMP_FILTER_TOTAL_NODES_DROPPED} - use {@link SVNAdminEvent#getDroppedNodesCount()}       * to retrieve the total number of dropped nodes.      *<li/>{@link SVNAdminEventAction#DUMP_FILTER_REVISION_COMMITTED} - is sent to inform that the original       * revision {@link SVNAdminEvent#getOriginalRevision()} resulted in {@link SVNAdminEvent#getRevision()}       * in the output.      *<li/>{@link SVNAdminEventAction#DUMP_FILTER_REVISION_SKIPPED} - is sent to inform that the original       * revision {@link SVNAdminEvent#getRevision()} is dropped (skipped).      *</ul>      *       * @param  dumpStream                   the input repository dump stream      * @param  resultDumpStream             the resultant (filtered) dump stream      * @param  exclude                      whether to exclude or include paths with the specified       *<code>prefixes</code>       * @param  renumberRevisions            if<span class="javakeyword">true</span>, renumbers revisions left      *                                      after filtering      * @param  dropEmptyRevisions           if<span class="javakeyword">true</span>, then removes revisions      *                                      emptied by filtering        * @param  preserveRevisionProperties   if<span class="javakeyword">true</span>, then does not filter      *                                      revision properties      * @param  prefixes                     prefixes of the path to filter       * @param  skipMissingMergeSources      if<span class="javakeyword">true</span>, then skips missig merge       *                                      sources      * @throws SVNException       * @since                               1.2.0, SVN 1.5.0      */
specifier|public
name|void
name|doFilter
parameter_list|(
name|InputStream
name|dumpStream
parameter_list|,
name|OutputStream
name|resultDumpStream
parameter_list|,
name|boolean
name|exclude
parameter_list|,
name|boolean
name|renumberRevisions
parameter_list|,
name|boolean
name|dropEmptyRevisions
parameter_list|,
name|boolean
name|preserveRevisionProperties
parameter_list|,
name|Collection
name|prefixes
parameter_list|,
name|boolean
name|skipMissingMergeSources
parameter_list|)
throws|throws
name|SVNException
block|{
name|CharsetDecoder
name|decoder
init|=
name|Charset
operator|.
name|forName
argument_list|(
literal|"UTF-8"
argument_list|)
operator|.
name|newDecoder
argument_list|()
decl_stmt|;
name|writeDumpData
argument_list|(
name|resultDumpStream
argument_list|,
name|SVNAdminHelper
operator|.
name|DUMPFILE_MAGIC_HEADER
operator|+
literal|": 2\n\n"
argument_list|)
expr_stmt|;
name|DefaultDumpFilterHandler
name|handler
init|=
name|getDumpFilterHandler
argument_list|(
name|resultDumpStream
argument_list|,
name|exclude
argument_list|,
name|renumberRevisions
argument_list|,
name|dropEmptyRevisions
argument_list|,
name|preserveRevisionProperties
argument_list|,
name|prefixes
argument_list|,
name|skipMissingMergeSources
argument_list|)
decl_stmt|;
name|SVNDumpStreamParser
name|parser
init|=
name|getDumpStreamParser
argument_list|()
decl_stmt|;
name|parser
operator|.
name|parseDumpStream
argument_list|(
name|dumpStream
argument_list|,
name|handler
argument_list|,
name|decoder
argument_list|)
expr_stmt|;
if|if
condition|(
name|myEventHandler
operator|!=
literal|null
condition|)
block|{
if|if
condition|(
name|handler
operator|.
name|getDroppedRevisionsCount
argument_list|()
operator|>
literal|0
condition|)
block|{
name|String
name|message
init|=
name|MessageFormat
operator|.
name|format
argument_list|(
literal|"Dropped {0} revision(s)."
argument_list|,
operator|new
name|Object
index|[]
block|{
name|String
operator|.
name|valueOf
argument_list|(
name|handler
operator|.
name|getDroppedRevisionsCount
argument_list|()
argument_list|)
block|}
argument_list|)
decl_stmt|;
name|SVNAdminEvent
name|event
init|=
operator|new
name|SVNAdminEvent
argument_list|(
name|SVNAdminEventAction
operator|.
name|DUMP_FILTER_TOTAL_REVISIONS_DROPPED
argument_list|,
name|message
argument_list|)
decl_stmt|;
name|event
operator|.
name|setDroppedRevisionsCount
argument_list|(
name|handler
operator|.
name|getDroppedRevisionsCount
argument_list|()
argument_list|)
expr_stmt|;
name|myEventHandler
operator|.
name|handleAdminEvent
argument_list|(
name|event
argument_list|,
name|ISVNEventHandler
operator|.
name|UNKNOWN
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|renumberRevisions
condition|)
block|{
name|Map
name|renumberHistory
init|=
name|handler
operator|.
name|getRenumberHistory
argument_list|()
decl_stmt|;
name|Long
index|[]
name|reNumberedRevisions
init|=
operator|(
name|Long
index|[]
operator|)
name|renumberHistory
operator|.
name|keySet
argument_list|()
operator|.
name|toArray
argument_list|(
operator|new
name|Long
index|[
name|renumberHistory
operator|.
name|size
argument_list|()
index|]
argument_list|)
decl_stmt|;
name|Arrays
operator|.
name|sort
argument_list|(
name|reNumberedRevisions
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
name|reNumberedRevisions
operator|.
name|length
init|;
name|i
operator|>
literal|0
condition|;
name|i
operator|--
control|)
block|{
name|Long
name|revision
init|=
name|reNumberedRevisions
index|[
name|i
operator|-
literal|1
index|]
decl_stmt|;
name|DefaultDumpFilterHandler
operator|.
name|RevisionItem
name|revItem
init|=
operator|(
name|DefaultDumpFilterHandler
operator|.
name|RevisionItem
operator|)
name|renumberHistory
operator|.
name|get
argument_list|(
name|revision
argument_list|)
decl_stmt|;
if|if
condition|(
name|revItem
operator|.
name|wasDropped
argument_list|()
condition|)
block|{
name|String
name|message
init|=
name|MessageFormat
operator|.
name|format
argument_list|(
literal|"{0} => (dropped)"
argument_list|,
operator|new
name|Object
index|[]
block|{
name|revision
operator|.
name|toString
argument_list|()
block|}
argument_list|)
decl_stmt|;
name|SVNAdminEvent
name|event
init|=
operator|new
name|SVNAdminEvent
argument_list|(
name|revision
operator|.
name|longValue
argument_list|()
argument_list|,
name|SVNAdminEventAction
operator|.
name|DUMP_FILTER_DROPPED_RENUMBERED_REVISION
argument_list|,
name|message
argument_list|)
decl_stmt|;
name|myEventHandler
operator|.
name|handleAdminEvent
argument_list|(
name|event
argument_list|,
name|ISVNEventHandler
operator|.
name|UNKNOWN
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|String
name|message
init|=
name|MessageFormat
operator|.
name|format
argument_list|(
literal|"{0} => {1}"
argument_list|,
operator|new
name|Object
index|[]
block|{
name|revision
operator|.
name|toString
argument_list|()
block|,
name|String
operator|.
name|valueOf
argument_list|(
name|revItem
operator|.
name|getRevision
argument_list|()
argument_list|)
block|}
argument_list|)
decl_stmt|;
name|SVNAdminEvent
name|event
init|=
operator|new
name|SVNAdminEvent
argument_list|(
name|revItem
operator|.
name|getRevision
argument_list|()
argument_list|,
name|revision
operator|.
name|longValue
argument_list|()
argument_list|,
name|SVNAdminEventAction
operator|.
name|DUMP_FILTER_RENUMBERED_REVISION
argument_list|,
name|message
argument_list|)
decl_stmt|;
name|myEventHandler
operator|.
name|handleAdminEvent
argument_list|(
name|event
argument_list|,
name|ISVNEventHandler
operator|.
name|UNKNOWN
argument_list|)
expr_stmt|;
block|}
block|}
block|}
name|Map
name|droppedNodes
init|=
name|handler
operator|.
name|getDroppedNodes
argument_list|()
decl_stmt|;
if|if
condition|(
operator|!
name|droppedNodes
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|String
name|message
init|=
name|MessageFormat
operator|.
name|format
argument_list|(
literal|"Dropped {0} node(s)"
argument_list|,
operator|new
name|Object
index|[]
block|{
name|String
operator|.
name|valueOf
argument_list|(
name|droppedNodes
operator|.
name|size
argument_list|()
argument_list|)
block|}
argument_list|)
decl_stmt|;
name|SVNAdminEvent
name|event
init|=
operator|new
name|SVNAdminEvent
argument_list|(
name|SVNAdminEventAction
operator|.
name|DUMP_FILTER_TOTAL_NODES_DROPPED
argument_list|,
name|message
argument_list|)
decl_stmt|;
name|event
operator|.
name|setDroppedNodesCount
argument_list|(
name|droppedNodes
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|myEventHandler
operator|.
name|handleAdminEvent
argument_list|(
name|event
argument_list|,
name|ISVNEventHandler
operator|.
name|UNKNOWN
argument_list|)
expr_stmt|;
name|String
index|[]
name|paths
init|=
operator|(
name|String
index|[]
operator|)
name|droppedNodes
operator|.
name|keySet
argument_list|()
operator|.
name|toArray
argument_list|(
operator|new
name|String
index|[
name|droppedNodes
operator|.
name|size
argument_list|()
index|]
argument_list|)
decl_stmt|;
name|Arrays
operator|.
name|sort
argument_list|(
name|paths
argument_list|,
name|SVNPathUtil
operator|.
name|PATH_COMPARATOR
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|paths
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
name|String
name|path
init|=
name|paths
index|[
name|i
index|]
decl_stmt|;
name|message
operator|=
literal|"'"
operator|+
name|path
operator|+
literal|"'"
expr_stmt|;
name|event
operator|=
operator|new
name|SVNAdminEvent
argument_list|(
name|SVNAdminEventAction
operator|.
name|DUMP_FILTER_DROPPED_NODE
argument_list|,
name|path
argument_list|,
name|message
argument_list|)
expr_stmt|;
name|myEventHandler
operator|.
name|handleAdminEvent
argument_list|(
name|event
argument_list|,
name|ISVNEventHandler
operator|.
name|UNKNOWN
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
specifier|protected
name|void
name|handlePropertesCopied
parameter_list|(
name|boolean
name|foundSyncProps
parameter_list|,
name|long
name|revision
parameter_list|)
throws|throws
name|SVNException
block|{
if|if
condition|(
name|myEventHandler
operator|!=
literal|null
condition|)
block|{
name|String
name|message
init|=
literal|null
decl_stmt|;
if|if
condition|(
name|foundSyncProps
condition|)
block|{
name|message
operator|=
name|MessageFormat
operator|.
name|format
argument_list|(
literal|"Copied properties for revision {0} ({1}* properties skipped)."
argument_list|,
operator|new
name|Object
index|[]
block|{
name|String
operator|.
name|valueOf
argument_list|(
name|revision
argument_list|)
block|,
name|SVNProperty
operator|.
name|SVN_SYNC_PREFIX
block|}
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|message
operator|=
name|MessageFormat
operator|.
name|format
argument_list|(
literal|"Copied properties for revision {0}."
argument_list|,
operator|new
name|Object
index|[]
block|{
name|String
operator|.
name|valueOf
argument_list|(
name|revision
argument_list|)
block|}
argument_list|)
expr_stmt|;
block|}
name|SVNAdminEvent
name|event
init|=
operator|new
name|SVNAdminEvent
argument_list|(
name|revision
argument_list|,
name|SVNAdminEventAction
operator|.
name|REVISION_PROPERTIES_COPIED
argument_list|,
name|message
argument_list|)
decl_stmt|;
name|myEventHandler
operator|.
name|handleAdminEvent
argument_list|(
name|event
argument_list|,
name|ISVNEventHandler
operator|.
name|UNKNOWN
argument_list|)
expr_stmt|;
block|}
block|}
specifier|protected
name|void
name|handleNormalizedProperties
parameter_list|(
name|int
name|normalizedRevPropsCount
parameter_list|,
name|int
name|normalizedNodePropsCount
parameter_list|)
throws|throws
name|SVNException
block|{
if|if
condition|(
name|myEventHandler
operator|!=
literal|null
operator|&&
operator|(
name|normalizedRevPropsCount
operator|>
literal|0
operator|||
name|normalizedNodePropsCount
operator|>
literal|0
operator|)
condition|)
block|{
name|String
name|message
init|=
name|MessageFormat
operator|.
name|format
argument_list|(
literal|"NOTE: Normalized {0}* properties to LF line endings ({1} rev-props, {2} node-props)."
argument_list|,
operator|new
name|Object
index|[]
block|{
name|SVNProperty
operator|.
name|SVN_PREFIX
block|,
name|String
operator|.
name|valueOf
argument_list|(
name|normalizedRevPropsCount
argument_list|)
block|,
name|String
operator|.
name|valueOf
argument_list|(
name|normalizedNodePropsCount
argument_list|)
block|}
argument_list|)
decl_stmt|;
name|SVNAdminEvent
name|event
init|=
operator|new
name|SVNAdminEvent
argument_list|(
name|SVNAdminEventAction
operator|.
name|NORMALIZED_PROPERTIES
argument_list|,
name|message
argument_list|)
decl_stmt|;
name|myEventHandler
operator|.
name|handleAdminEvent
argument_list|(
name|event
argument_list|,
name|ISVNEventHandler
operator|.
name|UNKNOWN
argument_list|)
expr_stmt|;
block|}
block|}
specifier|private
name|FSHotCopier
name|getHotCopier
parameter_list|()
block|{
if|if
condition|(
name|myHotCopier
operator|==
literal|null
condition|)
block|{
name|myHotCopier
operator|=
operator|new
name|FSHotCopier
argument_list|()
expr_stmt|;
block|}
return|return
name|myHotCopier
return|;
block|}
specifier|private
name|void
name|verify
parameter_list|(
name|FSFS
name|fsfs
parameter_list|,
name|long
name|startRev
parameter_list|,
name|long
name|endRev
parameter_list|)
throws|throws
name|SVNException
block|{
name|long
name|youngestRev
init|=
name|fsfs
operator|.
name|getYoungestRevision
argument_list|()
decl_stmt|;
if|if
condition|(
operator|!
name|SVNRevision
operator|.
name|isValidRevisionNumber
argument_list|(
name|startRev
argument_list|)
condition|)
block|{
name|startRev
operator|=
literal|0
expr_stmt|;
block|}
if|if
condition|(
operator|!
name|SVNRevision
operator|.
name|isValidRevisionNumber
argument_list|(
name|endRev
argument_list|)
condition|)
block|{
name|endRev
operator|=
name|youngestRev
expr_stmt|;
block|}
if|if
condition|(
name|startRev
operator|>
name|endRev
condition|)
block|{
name|SVNErrorMessage
name|err
init|=
name|SVNErrorMessage
operator|.
name|create
argument_list|(
name|SVNErrorCode
operator|.
name|REPOS_BAD_ARGS
argument_list|,
literal|"Start revision {0} is greater than end revision {1}"
argument_list|,
operator|new
name|Object
index|[]
block|{
name|String
operator|.
name|valueOf
argument_list|(
name|startRev
argument_list|)
block|,
name|String
operator|.
name|valueOf
argument_list|(
name|endRev
argument_list|)
block|}
argument_list|)
decl_stmt|;
name|SVNErrorManager
operator|.
name|error
argument_list|(
name|err
argument_list|,
name|SVNLogType
operator|.
name|FSFS
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|endRev
operator|>
name|youngestRev
condition|)
block|{
name|SVNErrorMessage
name|err
init|=
name|SVNErrorMessage
operator|.
name|create
argument_list|(
name|SVNErrorCode
operator|.
name|REPOS_BAD_ARGS
argument_list|,
literal|"End revision {0} is invalid (youngest revision is {1})"
argument_list|,
operator|new
name|Object
index|[]
block|{
name|String
operator|.
name|valueOf
argument_list|(
name|endRev
argument_list|)
block|,
name|String
operator|.
name|valueOf
argument_list|(
name|youngestRev
argument_list|)
block|}
argument_list|)
decl_stmt|;
name|SVNErrorManager
operator|.
name|error
argument_list|(
name|err
argument_list|,
name|SVNLogType
operator|.
name|FSFS
argument_list|)
expr_stmt|;
block|}
for|for
control|(
name|long
name|rev
init|=
name|startRev
init|;
name|rev
operator|<=
name|endRev
condition|;
name|rev
operator|++
control|)
block|{
name|FSRevisionRoot
name|toRoot
init|=
name|fsfs
operator|.
name|createRevisionRoot
argument_list|(
name|rev
argument_list|)
decl_stmt|;
name|ISVNEditor
name|editor
init|=
name|getDumpEditor
argument_list|(
name|fsfs
argument_list|,
name|toRoot
argument_list|,
name|rev
argument_list|,
name|startRev
argument_list|,
literal|"/"
argument_list|,
name|SVNFileUtil
operator|.
name|DUMMY_OUT
argument_list|,
literal|false
argument_list|,
literal|true
argument_list|)
decl_stmt|;
name|editor
operator|=
name|SVNCancellableEditor
operator|.
name|newInstance
argument_list|(
name|editor
argument_list|,
name|getEventDispatcher
argument_list|()
argument_list|,
name|getDebugLog
argument_list|()
argument_list|)
expr_stmt|;
name|FSRepositoryUtil
operator|.
name|replay
argument_list|(
name|fsfs
argument_list|,
name|toRoot
argument_list|,
literal|""
argument_list|,
name|SVNRepository
operator|.
name|INVALID_REVISION
argument_list|,
literal|false
argument_list|,
name|editor
argument_list|)
expr_stmt|;
name|fsfs
operator|.
name|getRevisionProperties
argument_list|(
name|rev
argument_list|)
expr_stmt|;
name|String
name|message
init|=
literal|"* Verified revision "
operator|+
name|rev
operator|+
literal|"."
decl_stmt|;
if|if
condition|(
name|myEventHandler
operator|!=
literal|null
condition|)
block|{
name|SVNAdminEvent
name|event
init|=
operator|new
name|SVNAdminEvent
argument_list|(
name|rev
argument_list|,
name|SVNAdminEventAction
operator|.
name|REVISION_DUMPED
argument_list|,
name|message
argument_list|)
decl_stmt|;
name|myEventHandler
operator|.
name|handleAdminEvent
argument_list|(
name|event
argument_list|,
name|ISVNEventHandler
operator|.
name|UNKNOWN
argument_list|)
expr_stmt|;
block|}
block|}
block|}
specifier|private
name|void
name|dump
parameter_list|(
name|FSFS
name|fsfs
parameter_list|,
name|OutputStream
name|dumpStream
parameter_list|,
name|long
name|start
parameter_list|,
name|long
name|end
parameter_list|,
name|boolean
name|isIncremental
parameter_list|,
name|boolean
name|useDeltas
parameter_list|)
throws|throws
name|SVNException
block|{
name|boolean
name|isDumping
init|=
name|dumpStream
operator|!=
literal|null
operator|&&
name|dumpStream
operator|!=
name|SVNFileUtil
operator|.
name|DUMMY_OUT
decl_stmt|;
name|long
name|youngestRevision
init|=
name|fsfs
operator|.
name|getYoungestRevision
argument_list|()
decl_stmt|;
name|SVNAdminDeltifier
name|deltifier
init|=
operator|new
name|SVNAdminDeltifier
argument_list|(
name|fsfs
argument_list|,
name|SVNDepth
operator|.
name|INFINITY
argument_list|,
literal|false
argument_list|,
literal|false
argument_list|,
literal|false
argument_list|,
literal|null
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|SVNRevision
operator|.
name|isValidRevisionNumber
argument_list|(
name|start
argument_list|)
condition|)
block|{
name|start
operator|=
literal|0
expr_stmt|;
block|}
if|if
condition|(
operator|!
name|SVNRevision
operator|.
name|isValidRevisionNumber
argument_list|(
name|end
argument_list|)
condition|)
block|{
name|end
operator|=
name|youngestRevision
expr_stmt|;
block|}
if|if
condition|(
name|dumpStream
operator|==
literal|null
condition|)
block|{
name|dumpStream
operator|=
name|SVNFileUtil
operator|.
name|DUMMY_OUT
expr_stmt|;
block|}
if|if
condition|(
name|start
operator|>
name|end
condition|)
block|{
name|SVNErrorMessage
name|err
init|=
name|SVNErrorMessage
operator|.
name|create
argument_list|(
name|SVNErrorCode
operator|.
name|REPOS_BAD_ARGS
argument_list|,
literal|"Start revision {0} is greater than end revision {1}"
argument_list|,
operator|new
name|Object
index|[]
block|{
name|String
operator|.
name|valueOf
argument_list|(
name|start
argument_list|)
block|,
name|String
operator|.
name|valueOf
argument_list|(
name|end
argument_list|)
block|}
argument_list|)
decl_stmt|;
name|SVNErrorManager
operator|.
name|error
argument_list|(
name|err
argument_list|,
name|SVNLogType
operator|.
name|FSFS
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|end
operator|>
name|youngestRevision
condition|)
block|{
name|SVNErrorMessage
name|err
init|=
name|SVNErrorMessage
operator|.
name|create
argument_list|(
name|SVNErrorCode
operator|.
name|REPOS_BAD_ARGS
argument_list|,
literal|"End revision {0} is invalid (youngest revision is {1})"
argument_list|,
operator|new
name|Object
index|[]
block|{
name|String
operator|.
name|valueOf
argument_list|(
name|end
argument_list|)
block|,
name|String
operator|.
name|valueOf
argument_list|(
name|youngestRevision
argument_list|)
block|}
argument_list|)
decl_stmt|;
name|SVNErrorManager
operator|.
name|error
argument_list|(
name|err
argument_list|,
name|SVNLogType
operator|.
name|FSFS
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|start
operator|==
literal|0
operator|&&
name|isIncremental
condition|)
block|{
name|isIncremental
operator|=
literal|false
expr_stmt|;
block|}
name|String
name|uuid
init|=
name|fsfs
operator|.
name|getUUID
argument_list|()
decl_stmt|;
name|int
name|version
init|=
name|SVNAdminHelper
operator|.
name|DUMPFILE_FORMAT_VERSION
decl_stmt|;
if|if
condition|(
operator|!
name|useDeltas
condition|)
block|{
comment|//for compatibility with SVN 1.0.x
name|version
operator|--
expr_stmt|;
block|}
name|writeDumpData
argument_list|(
name|dumpStream
argument_list|,
name|SVNAdminHelper
operator|.
name|DUMPFILE_MAGIC_HEADER
operator|+
literal|": "
operator|+
name|version
operator|+
literal|"\n\n"
argument_list|)
expr_stmt|;
name|writeDumpData
argument_list|(
name|dumpStream
argument_list|,
name|SVNAdminHelper
operator|.
name|DUMPFILE_UUID
operator|+
literal|": "
operator|+
name|uuid
operator|+
literal|"\n\n"
argument_list|)
expr_stmt|;
for|for
control|(
name|long
name|i
init|=
name|start
init|;
name|i
operator|<=
name|end
condition|;
name|i
operator|++
control|)
block|{
name|long
name|fromRev
decl_stmt|,
name|toRev
decl_stmt|;
name|checkCancelled
argument_list|()
expr_stmt|;
if|if
condition|(
name|i
operator|==
name|start
operator|&&
operator|!
name|isIncremental
condition|)
block|{
if|if
condition|(
name|i
operator|==
literal|0
condition|)
block|{
name|writeRevisionRecord
argument_list|(
name|dumpStream
argument_list|,
name|fsfs
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|toRev
operator|=
literal|0
expr_stmt|;
name|String
name|message
init|=
operator|(
name|isDumping
condition|?
literal|"* Dumped"
else|:
literal|"* Verified"
operator|)
operator|+
literal|" revision "
operator|+
name|toRev
operator|+
literal|"."
decl_stmt|;
if|if
condition|(
name|myEventHandler
operator|!=
literal|null
condition|)
block|{
name|SVNAdminEvent
name|event
init|=
operator|new
name|SVNAdminEvent
argument_list|(
name|toRev
argument_list|,
name|SVNAdminEventAction
operator|.
name|REVISION_DUMPED
argument_list|,
name|message
argument_list|)
decl_stmt|;
name|myEventHandler
operator|.
name|handleAdminEvent
argument_list|(
name|event
argument_list|,
name|ISVNEventHandler
operator|.
name|UNKNOWN
argument_list|)
expr_stmt|;
block|}
continue|continue;
block|}
name|fromRev
operator|=
literal|0
expr_stmt|;
name|toRev
operator|=
name|i
expr_stmt|;
block|}
else|else
block|{
name|fromRev
operator|=
name|i
operator|-
literal|1
expr_stmt|;
name|toRev
operator|=
name|i
expr_stmt|;
block|}
name|writeRevisionRecord
argument_list|(
name|dumpStream
argument_list|,
name|fsfs
argument_list|,
name|toRev
argument_list|)
expr_stmt|;
name|boolean
name|useDeltasForRevision
init|=
name|useDeltas
operator|&&
operator|(
name|isIncremental
operator|||
name|i
operator|!=
name|start
operator|)
decl_stmt|;
name|FSRevisionRoot
name|toRoot
init|=
name|fsfs
operator|.
name|createRevisionRoot
argument_list|(
name|toRev
argument_list|)
decl_stmt|;
name|ISVNEditor
name|dumpEditor
init|=
name|getDumpEditor
argument_list|(
name|fsfs
argument_list|,
name|toRoot
argument_list|,
name|toRev
argument_list|,
name|start
argument_list|,
literal|"/"
argument_list|,
name|dumpStream
argument_list|,
name|useDeltasForRevision
argument_list|,
literal|false
argument_list|)
decl_stmt|;
if|if
condition|(
name|i
operator|==
name|start
operator|&&
operator|!
name|isIncremental
condition|)
block|{
name|FSRevisionRoot
name|fromRoot
init|=
name|fsfs
operator|.
name|createRevisionRoot
argument_list|(
name|fromRev
argument_list|)
decl_stmt|;
name|deltifier
operator|.
name|setEditor
argument_list|(
name|dumpEditor
argument_list|)
expr_stmt|;
name|deltifier
operator|.
name|deltifyDir
argument_list|(
name|fromRoot
argument_list|,
literal|"/"
argument_list|,
literal|""
argument_list|,
name|toRoot
argument_list|,
literal|"/"
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|FSRepositoryUtil
operator|.
name|replay
argument_list|(
name|fsfs
argument_list|,
name|toRoot
argument_list|,
literal|""
argument_list|,
operator|-
literal|1
argument_list|,
literal|false
argument_list|,
name|dumpEditor
argument_list|)
expr_stmt|;
block|}
name|String
name|message
init|=
operator|(
name|isDumping
condition|?
literal|"* Dumped"
else|:
literal|"* Verified"
operator|)
operator|+
literal|" revision "
operator|+
name|toRev
operator|+
literal|"."
decl_stmt|;
if|if
condition|(
name|myEventHandler
operator|!=
literal|null
condition|)
block|{
name|SVNAdminEvent
name|event
init|=
operator|new
name|SVNAdminEvent
argument_list|(
name|toRev
argument_list|,
name|SVNAdminEventAction
operator|.
name|REVISION_DUMPED
argument_list|,
name|message
argument_list|)
decl_stmt|;
name|myEventHandler
operator|.
name|handleAdminEvent
argument_list|(
name|event
argument_list|,
name|ISVNEventHandler
operator|.
name|UNKNOWN
argument_list|)
expr_stmt|;
block|}
block|}
block|}
specifier|private
name|void
name|writeRevisionRecord
parameter_list|(
name|OutputStream
name|dumpStream
parameter_list|,
name|FSFS
name|fsfs
parameter_list|,
name|long
name|revision
parameter_list|)
throws|throws
name|SVNException
block|{
name|SVNProperties
name|revProps
init|=
name|fsfs
operator|.
name|getRevisionProperties
argument_list|(
name|revision
argument_list|)
decl_stmt|;
name|String
name|revisionDate
init|=
name|revProps
operator|.
name|getStringValue
argument_list|(
name|SVNRevisionProperty
operator|.
name|DATE
argument_list|)
decl_stmt|;
if|if
condition|(
name|revisionDate
operator|!=
literal|null
condition|)
block|{
name|SVNDate
name|date
init|=
name|SVNDate
operator|.
name|parseDate
argument_list|(
name|revisionDate
argument_list|)
decl_stmt|;
name|revProps
operator|.
name|put
argument_list|(
name|SVNRevisionProperty
operator|.
name|DATE
argument_list|,
name|date
operator|.
name|format
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|ByteArrayOutputStream
name|encodedProps
init|=
operator|new
name|ByteArrayOutputStream
argument_list|()
decl_stmt|;
name|SVNAdminHelper
operator|.
name|writeProperties
argument_list|(
name|revProps
argument_list|,
literal|null
argument_list|,
name|encodedProps
argument_list|)
expr_stmt|;
name|writeDumpData
argument_list|(
name|dumpStream
argument_list|,
name|SVNAdminHelper
operator|.
name|DUMPFILE_REVISION_NUMBER
operator|+
literal|": "
operator|+
name|revision
operator|+
literal|"\n"
argument_list|)
expr_stmt|;
name|String
name|propContents
init|=
literal|null
decl_stmt|;
try|try
block|{
name|propContents
operator|=
operator|new
name|String
argument_list|(
name|encodedProps
operator|.
name|toByteArray
argument_list|()
argument_list|,
literal|"UTF-8"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|UnsupportedEncodingException
name|uee
parameter_list|)
block|{
name|SVNErrorMessage
name|err
init|=
name|SVNErrorMessage
operator|.
name|create
argument_list|(
name|SVNErrorCode
operator|.
name|IO_ERROR
argument_list|,
name|uee
operator|.
name|getLocalizedMessage
argument_list|()
argument_list|)
decl_stmt|;
name|SVNErrorManager
operator|.
name|error
argument_list|(
name|err
argument_list|,
name|uee
argument_list|,
name|SVNLogType
operator|.
name|FSFS
argument_list|)
expr_stmt|;
block|}
name|writeDumpData
argument_list|(
name|dumpStream
argument_list|,
name|SVNAdminHelper
operator|.
name|DUMPFILE_PROP_CONTENT_LENGTH
operator|+
literal|": "
operator|+
name|propContents
operator|.
name|length
argument_list|()
operator|+
literal|"\n"
argument_list|)
expr_stmt|;
name|writeDumpData
argument_list|(
name|dumpStream
argument_list|,
name|SVNAdminHelper
operator|.
name|DUMPFILE_CONTENT_LENGTH
operator|+
literal|": "
operator|+
name|propContents
operator|.
name|length
argument_list|()
operator|+
literal|"\n\n"
argument_list|)
expr_stmt|;
name|writeDumpData
argument_list|(
name|dumpStream
argument_list|,
name|propContents
argument_list|)
expr_stmt|;
name|writeDumpData
argument_list|(
name|dumpStream
argument_list|,
literal|"\n"
argument_list|)
expr_stmt|;
block|}
specifier|private
name|void
name|writeDumpData
parameter_list|(
name|OutputStream
name|out
parameter_list|,
name|String
name|data
parameter_list|)
throws|throws
name|SVNException
block|{
try|try
block|{
name|out
operator|.
name|write
argument_list|(
name|data
operator|.
name|getBytes
argument_list|(
literal|"UTF-8"
argument_list|)
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|ioe
parameter_list|)
block|{
name|SVNErrorMessage
name|err
init|=
name|SVNErrorMessage
operator|.
name|create
argument_list|(
name|SVNErrorCode
operator|.
name|IO_ERROR
argument_list|,
name|ioe
operator|.
name|getLocalizedMessage
argument_list|()
argument_list|)
decl_stmt|;
name|SVNErrorManager
operator|.
name|error
argument_list|(
name|err
argument_list|,
name|ioe
argument_list|,
name|SVNLogType
operator|.
name|FSFS
argument_list|)
expr_stmt|;
block|}
block|}
specifier|private
name|DefaultLoadHandler
name|createLoadHandler
parameter_list|(
name|FSFS
name|fsfs
parameter_list|,
name|boolean
name|usePreCommitHook
parameter_list|,
name|boolean
name|usePostCommitHook
parameter_list|,
name|SVNUUIDAction
name|uuidAction
parameter_list|,
name|String
name|parentDir
parameter_list|)
block|{
name|DefaultLoadHandler
name|handler
init|=
operator|new
name|DefaultLoadHandler
argument_list|(
name|usePreCommitHook
argument_list|,
name|usePostCommitHook
argument_list|,
name|uuidAction
argument_list|,
name|parentDir
argument_list|,
name|myEventHandler
argument_list|)
decl_stmt|;
name|handler
operator|.
name|setFSFS
argument_list|(
name|fsfs
argument_list|)
expr_stmt|;
name|handler
operator|.
name|setUsePreCommitHook
argument_list|(
name|usePreCommitHook
argument_list|)
expr_stmt|;
name|handler
operator|.
name|setUsePostCommitHook
argument_list|(
name|usePostCommitHook
argument_list|)
expr_stmt|;
name|handler
operator|.
name|setUUIDAction
argument_list|(
name|uuidAction
argument_list|)
expr_stmt|;
name|handler
operator|.
name|setParentDir
argument_list|(
name|parentDir
argument_list|)
expr_stmt|;
return|return
name|handler
return|;
block|}
specifier|private
name|DefaultDumpFilterHandler
name|getDumpFilterHandler
parameter_list|(
name|OutputStream
name|os
parameter_list|,
name|boolean
name|exclude
parameter_list|,
name|boolean
name|renumberRevisions
parameter_list|,
name|boolean
name|dropEmptyRevisions
parameter_list|,
name|boolean
name|preserveRevisionProperties
parameter_list|,
name|Collection
name|prefixes
parameter_list|,
name|boolean
name|skipMissingMergeSources
parameter_list|)
block|{
if|if
condition|(
name|myDumpFilterHandler
operator|==
literal|null
condition|)
block|{
name|myDumpFilterHandler
operator|=
operator|new
name|DefaultDumpFilterHandler
argument_list|(
name|os
argument_list|,
name|myEventHandler
argument_list|,
name|exclude
argument_list|,
name|renumberRevisions
argument_list|,
name|dropEmptyRevisions
argument_list|,
name|preserveRevisionProperties
argument_list|,
name|prefixes
argument_list|,
name|skipMissingMergeSources
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|myDumpFilterHandler
operator|.
name|reset
argument_list|(
name|os
argument_list|,
name|myEventHandler
argument_list|,
name|exclude
argument_list|,
name|renumberRevisions
argument_list|,
name|dropEmptyRevisions
argument_list|,
name|preserveRevisionProperties
argument_list|,
name|prefixes
argument_list|,
name|skipMissingMergeSources
argument_list|)
expr_stmt|;
block|}
return|return
name|myDumpFilterHandler
return|;
block|}
specifier|private
name|SVNDumpStreamParser
name|getDumpStreamParser
parameter_list|()
block|{
if|if
condition|(
name|myDumpStreamParser
operator|==
literal|null
condition|)
block|{
name|myDumpStreamParser
operator|=
operator|new
name|SVNDumpStreamParser
argument_list|(
name|this
argument_list|)
expr_stmt|;
block|}
return|return
name|myDumpStreamParser
return|;
block|}
specifier|private
name|SVNDumpEditor
name|getDumpEditor
parameter_list|(
name|FSFS
name|fsfs
parameter_list|,
name|FSRoot
name|root
parameter_list|,
name|long
name|toRevision
parameter_list|,
name|long
name|oldestDumpedRevision
parameter_list|,
name|String
name|rootPath
parameter_list|,
name|OutputStream
name|dumpStream
parameter_list|,
name|boolean
name|useDeltas
parameter_list|,
name|boolean
name|isVerify
parameter_list|)
block|{
if|if
condition|(
name|myDumpEditor
operator|==
literal|null
condition|)
block|{
name|myDumpEditor
operator|=
operator|new
name|SVNDumpEditor
argument_list|(
name|fsfs
argument_list|,
name|root
argument_list|,
name|toRevision
argument_list|,
name|oldestDumpedRevision
argument_list|,
name|rootPath
argument_list|,
name|dumpStream
argument_list|,
name|useDeltas
argument_list|,
name|isVerify
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|myDumpEditor
operator|.
name|reset
argument_list|(
name|fsfs
argument_list|,
name|root
argument_list|,
name|toRevision
argument_list|,
name|oldestDumpedRevision
argument_list|,
name|rootPath
argument_list|,
name|dumpStream
argument_list|,
name|useDeltas
argument_list|,
name|isVerify
argument_list|)
expr_stmt|;
block|}
return|return
name|myDumpEditor
return|;
block|}
specifier|private
name|SVNProperties
name|copyRevisionProperties
parameter_list|(
name|SVNRepository
name|fromRepository
parameter_list|,
name|SVNRepository
name|toRepository
parameter_list|,
name|long
name|revision
parameter_list|,
name|boolean
name|sync
parameter_list|)
throws|throws
name|SVNException
block|{
name|int
name|filteredCount
init|=
literal|0
decl_stmt|;
name|SVNProperties
name|existingRevProps
init|=
literal|null
decl_stmt|;
if|if
condition|(
name|sync
condition|)
block|{
name|existingRevProps
operator|=
name|toRepository
operator|.
name|getRevisionProperties
argument_list|(
name|revision
argument_list|,
literal|null
argument_list|)
expr_stmt|;
block|}
name|SVNProperties
name|revProps
init|=
name|fromRepository
operator|.
name|getRevisionProperties
argument_list|(
name|revision
argument_list|,
literal|null
argument_list|)
decl_stmt|;
name|SVNProperties
name|normalizedProps
init|=
name|normalizeRevisionProperties
argument_list|(
name|revProps
argument_list|)
decl_stmt|;
name|filteredCount
operator|+=
name|SVNAdminHelper
operator|.
name|writeRevisionProperties
argument_list|(
name|toRepository
argument_list|,
name|revision
argument_list|,
name|revProps
argument_list|)
expr_stmt|;
if|if
condition|(
name|sync
condition|)
block|{
name|SVNAdminHelper
operator|.
name|removePropertiesNotInSource
argument_list|(
name|toRepository
argument_list|,
name|revision
argument_list|,
name|revProps
argument_list|,
name|existingRevProps
argument_list|)
expr_stmt|;
block|}
name|handlePropertesCopied
argument_list|(
name|filteredCount
operator|>
literal|0
argument_list|,
name|revision
argument_list|)
expr_stmt|;
return|return
name|normalizedProps
return|;
block|}
specifier|private
name|SessionInfo
name|openSourceRepository
parameter_list|(
name|SVNRepository
name|targetRepos
parameter_list|)
throws|throws
name|SVNException
block|{
name|SVNPropertyValue
name|fromURL
init|=
name|targetRepos
operator|.
name|getRevisionPropertyValue
argument_list|(
literal|0
argument_list|,
name|SVNRevisionProperty
operator|.
name|FROM_URL
argument_list|)
decl_stmt|;
name|SVNPropertyValue
name|fromUUID
init|=
name|targetRepos
operator|.
name|getRevisionPropertyValue
argument_list|(
literal|0
argument_list|,
name|SVNRevisionProperty
operator|.
name|FROM_UUID
argument_list|)
decl_stmt|;
name|SVNPropertyValue
name|lastMergedRev
init|=
name|targetRepos
operator|.
name|getRevisionPropertyValue
argument_list|(
literal|0
argument_list|,
name|SVNRevisionProperty
operator|.
name|LAST_MERGED_REVISION
argument_list|)
decl_stmt|;
if|if
condition|(
name|fromURL
operator|==
literal|null
operator|||
name|fromUUID
operator|==
literal|null
operator|||
name|lastMergedRev
operator|==
literal|null
condition|)
block|{
name|SVNErrorMessage
name|err
init|=
name|SVNErrorMessage
operator|.
name|create
argument_list|(
name|SVNErrorCode
operator|.
name|IO_ERROR
argument_list|,
literal|"Destination repository has not been initialized"
argument_list|)
decl_stmt|;
name|SVNErrorManager
operator|.
name|error
argument_list|(
name|err
argument_list|,
name|SVNLogType
operator|.
name|FSFS
argument_list|)
expr_stmt|;
block|}
name|SVNURL
name|srcURL
init|=
name|SVNURL
operator|.
name|parseURIDecoded
argument_list|(
name|fromURL
operator|.
name|getString
argument_list|()
argument_list|)
decl_stmt|;
name|SVNRepository
name|srcRepos
init|=
name|createRepository
argument_list|(
name|srcURL
argument_list|,
name|fromUUID
operator|.
name|getString
argument_list|()
argument_list|,
literal|false
argument_list|)
decl_stmt|;
try|try
block|{
return|return
operator|new
name|SessionInfo
argument_list|(
name|srcRepos
argument_list|,
name|Long
operator|.
name|parseLong
argument_list|(
name|lastMergedRev
operator|.
name|getString
argument_list|()
argument_list|)
argument_list|)
return|;
block|}
catch|catch
parameter_list|(
name|NumberFormatException
name|nfe
parameter_list|)
block|{
name|SVNErrorManager
operator|.
name|error
argument_list|(
name|SVNErrorMessage
operator|.
name|create
argument_list|(
name|SVNErrorCode
operator|.
name|IO_ERROR
argument_list|,
name|nfe
argument_list|)
argument_list|,
name|SVNLogType
operator|.
name|FSFS
argument_list|)
expr_stmt|;
block|}
return|return
literal|null
return|;
block|}
specifier|private
name|void
name|checkIfRepositoryIsAtRoot
parameter_list|(
name|SVNRepository
name|repos
parameter_list|,
name|SVNURL
name|url
parameter_list|)
throws|throws
name|SVNException
block|{
name|SVNURL
name|reposRoot
init|=
name|repos
operator|.
name|getRepositoryRoot
argument_list|(
literal|true
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|reposRoot
operator|.
name|equals
argument_list|(
name|url
argument_list|)
condition|)
block|{
name|SVNErrorMessage
name|err
init|=
name|SVNErrorMessage
operator|.
name|create
argument_list|(
name|SVNErrorCode
operator|.
name|IO_ERROR
argument_list|,
literal|"Session is rooted at ''{0}'' but the repos root is ''{1}''"
argument_list|,
operator|new
name|SVNURL
index|[]
block|{
name|url
block|,
name|reposRoot
block|}
argument_list|)
decl_stmt|;
name|SVNErrorManager
operator|.
name|error
argument_list|(
name|err
argument_list|,
name|SVNLogType
operator|.
name|FSFS
argument_list|)
expr_stmt|;
block|}
block|}
specifier|private
name|void
name|lock
parameter_list|(
name|SVNRepository
name|repos
parameter_list|)
throws|throws
name|SVNException
block|{
name|String
name|hostName
init|=
literal|null
decl_stmt|;
try|try
block|{
name|hostName
operator|=
name|InetAddress
operator|.
name|getLocalHost
argument_list|()
operator|.
name|getHostName
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|UnknownHostException
name|e
parameter_list|)
block|{
name|SVNErrorMessage
name|err
init|=
name|SVNErrorMessage
operator|.
name|create
argument_list|(
name|SVNErrorCode
operator|.
name|IO_ERROR
argument_list|,
literal|"Can't get local hostname"
argument_list|)
decl_stmt|;
name|SVNErrorManager
operator|.
name|error
argument_list|(
name|err
argument_list|,
name|e
argument_list|,
name|SVNLogType
operator|.
name|FSFS
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|hostName
operator|.
name|length
argument_list|()
operator|>
literal|256
condition|)
block|{
name|hostName
operator|=
name|hostName
operator|.
name|substring
argument_list|(
literal|0
argument_list|,
literal|256
argument_list|)
expr_stmt|;
block|}
name|String
name|lockToken
init|=
name|hostName
operator|+
literal|":"
operator|+
name|SVNUUIDGenerator
operator|.
name|formatUUID
argument_list|(
name|SVNUUIDGenerator
operator|.
name|generateUUID
argument_list|()
argument_list|)
decl_stmt|;
name|int
name|i
init|=
literal|0
decl_stmt|;
name|SVNErrorMessage
name|childError
init|=
literal|null
decl_stmt|;
for|for
control|(
name|i
operator|=
literal|0
init|;
name|i
operator|<
name|LOCK_RETRY_COUNT
condition|;
name|i
operator|++
control|)
block|{
name|checkCancelled
argument_list|()
expr_stmt|;
name|SVNPropertyValue
name|reposLockToken
init|=
name|repos
operator|.
name|getRevisionPropertyValue
argument_list|(
literal|0
argument_list|,
name|SVNRevisionProperty
operator|.
name|LOCK
argument_list|)
decl_stmt|;
if|if
condition|(
name|reposLockToken
operator|!=
literal|null
condition|)
block|{
if|if
condition|(
name|lockToken
operator|.
name|equals
argument_list|(
name|reposLockToken
operator|.
name|getString
argument_list|()
argument_list|)
condition|)
block|{
return|return;
block|}
name|childError
operator|=
name|SVNErrorMessage
operator|.
name|create
argument_list|(
name|SVNErrorCode
operator|.
name|IO_ERROR
argument_list|,
literal|"Failed to get lock on destination repos, currently held by ''{0}''"
argument_list|,
name|reposLockToken
operator|.
name|getString
argument_list|()
argument_list|)
expr_stmt|;
try|try
block|{
name|Thread
operator|.
name|sleep
argument_list|(
literal|1000
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|InterruptedException
name|e
parameter_list|)
block|{
comment|//
block|}
block|}
if|else if
condition|(
name|i
operator|<
name|LOCK_RETRY_COUNT
operator|-
literal|1
condition|)
block|{
name|repos
operator|.
name|setRevisionPropertyValue
argument_list|(
literal|0
argument_list|,
name|SVNRevisionProperty
operator|.
name|LOCK
argument_list|,
name|SVNPropertyValue
operator|.
name|create
argument_list|(
name|lockToken
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
name|SVNErrorMessage
name|err
init|=
name|SVNErrorMessage
operator|.
name|create
argument_list|(
name|SVNErrorCode
operator|.
name|IO_ERROR
argument_list|,
literal|"Couldn''t get lock on destination repos after {0} attempts"
argument_list|,
name|String
operator|.
name|valueOf
argument_list|(
name|i
argument_list|)
argument_list|)
decl_stmt|;
if|if
condition|(
name|childError
operator|!=
literal|null
condition|)
block|{
name|err
operator|.
name|setChildErrorMessage
argument_list|(
name|childError
argument_list|)
expr_stmt|;
block|}
name|SVNErrorManager
operator|.
name|error
argument_list|(
name|err
argument_list|,
name|SVNLogType
operator|.
name|FSFS
argument_list|)
expr_stmt|;
block|}
specifier|private
name|void
name|unlock
parameter_list|(
name|SVNRepository
name|repos
parameter_list|)
throws|throws
name|SVNException
block|{
name|repos
operator|.
name|setRevisionPropertyValue
argument_list|(
literal|0
argument_list|,
name|SVNRevisionProperty
operator|.
name|LOCK
argument_list|,
literal|null
argument_list|)
expr_stmt|;
block|}
specifier|private
class|class
name|SessionInfo
block|{
name|SVNRepository
name|myRepository
decl_stmt|;
name|long
name|myLastMergedRevision
decl_stmt|;
specifier|public
name|SessionInfo
parameter_list|(
name|SVNRepository
name|repos
parameter_list|,
name|long
name|lastMergedRev
parameter_list|)
block|{
name|myRepository
operator|=
name|repos
expr_stmt|;
name|myLastMergedRevision
operator|=
name|lastMergedRev
expr_stmt|;
block|}
block|}
specifier|public
specifier|static
name|SVNProperties
name|normalizeRevisionProperties
parameter_list|(
name|SVNProperties
name|revProps
parameter_list|)
throws|throws
name|SVNException
block|{
name|SVNProperties
name|normalizedProps
init|=
operator|new
name|SVNProperties
argument_list|()
decl_stmt|;
for|for
control|(
name|Iterator
name|propNamesIter
init|=
name|revProps
operator|.
name|nameSet
argument_list|()
operator|.
name|iterator
argument_list|()
init|;
name|propNamesIter
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|String
name|propName
init|=
operator|(
name|String
operator|)
name|propNamesIter
operator|.
name|next
argument_list|()
decl_stmt|;
if|if
condition|(
name|SVNPropertiesManager
operator|.
name|propNeedsTranslation
argument_list|(
name|propName
argument_list|)
condition|)
block|{
name|SVNPropertyValue
name|value
init|=
name|revProps
operator|.
name|getSVNPropertyValue
argument_list|(
name|propName
argument_list|)
decl_stmt|;
name|String
name|normalizedValue
init|=
name|normalizeString
argument_list|(
name|SVNPropertyValue
operator|.
name|getPropertyAsString
argument_list|(
name|value
argument_list|)
argument_list|)
decl_stmt|;
if|if
condition|(
name|normalizedValue
operator|!=
literal|null
condition|)
block|{
name|normalizedProps
operator|.
name|put
argument_list|(
name|propName
argument_list|,
name|SVNPropertyValue
operator|.
name|create
argument_list|(
name|normalizedValue
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
block|}
name|revProps
operator|.
name|putAll
argument_list|(
name|normalizedProps
argument_list|)
expr_stmt|;
return|return
name|normalizedProps
return|;
block|}
specifier|public
specifier|static
name|String
name|normalizeString
parameter_list|(
name|String
name|string
parameter_list|)
throws|throws
name|SVNException
block|{
if|if
condition|(
name|string
operator|!=
literal|null
operator|&&
name|string
operator|.
name|indexOf
argument_list|(
name|SVNProperty
operator|.
name|EOL_CR_BYTES
index|[
literal|0
index|]
argument_list|)
operator|!=
operator|-
literal|1
condition|)
block|{
return|return
name|SVNTranslator
operator|.
name|transalteString
argument_list|(
name|string
argument_list|,
name|SVNProperty
operator|.
name|EOL_LF_BYTES
argument_list|,
literal|null
argument_list|,
literal|true
argument_list|,
literal|false
argument_list|)
return|;
block|}
return|return
literal|null
return|;
block|}
block|}
end_class

end_unit

