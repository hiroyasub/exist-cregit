begin_unit|revision:1.0.0;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * ====================================================================  * Copyright (c) 2004-2010 TMate Software Ltd.  All rights reserved.  *  * This software is licensed as described in the file COPYING, which  * you should have received as part of this distribution.  The terms  * are also available at http://svnkit.com/license.html  * If newer versions of this license are posted there, you may use a  * newer version instead, at your option.  * ====================================================================  */
end_comment

begin_package
package|package
name|org
operator|.
name|exist
operator|.
name|versioning
operator|.
name|svn
operator|.
name|wc
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|File
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collections
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|util
operator|.
name|io
operator|.
name|Resource
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|versioning
operator|.
name|svn
operator|.
name|internal
operator|.
name|util
operator|.
name|SVNMergeInfoUtil
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|versioning
operator|.
name|svn
operator|.
name|internal
operator|.
name|wc
operator|.
name|SVNErrorManager
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|versioning
operator|.
name|svn
operator|.
name|internal
operator|.
name|wc
operator|.
name|SVNFileUtil
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|versioning
operator|.
name|svn
operator|.
name|internal
operator|.
name|wc
operator|.
name|SVNPropertiesManager
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|versioning
operator|.
name|svn
operator|.
name|internal
operator|.
name|wc
operator|.
name|SVNWCManager
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|versioning
operator|.
name|svn
operator|.
name|internal
operator|.
name|wc
operator|.
name|admin
operator|.
name|SVNAdminArea
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|versioning
operator|.
name|svn
operator|.
name|internal
operator|.
name|wc
operator|.
name|admin
operator|.
name|SVNEntry
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|versioning
operator|.
name|svn
operator|.
name|internal
operator|.
name|wc
operator|.
name|admin
operator|.
name|SVNWCAccess
import|;
end_import

begin_import
import|import
name|org
operator|.
name|tmatesoft
operator|.
name|svn
operator|.
name|core
operator|.
name|internal
operator|.
name|util
operator|.
name|SVNHashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Iterator
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|LinkedList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|org
operator|.
name|tmatesoft
operator|.
name|svn
operator|.
name|core
operator|.
name|ISVNLogEntryHandler
import|;
end_import

begin_import
import|import
name|org
operator|.
name|tmatesoft
operator|.
name|svn
operator|.
name|core
operator|.
name|SVNCancelException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|tmatesoft
operator|.
name|svn
operator|.
name|core
operator|.
name|SVNDepth
import|;
end_import

begin_import
import|import
name|org
operator|.
name|tmatesoft
operator|.
name|svn
operator|.
name|core
operator|.
name|SVNErrorCode
import|;
end_import

begin_import
import|import
name|org
operator|.
name|tmatesoft
operator|.
name|svn
operator|.
name|core
operator|.
name|SVNErrorMessage
import|;
end_import

begin_import
import|import
name|org
operator|.
name|tmatesoft
operator|.
name|svn
operator|.
name|core
operator|.
name|SVNException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|tmatesoft
operator|.
name|svn
operator|.
name|core
operator|.
name|SVNLogEntry
import|;
end_import

begin_import
import|import
name|org
operator|.
name|tmatesoft
operator|.
name|svn
operator|.
name|core
operator|.
name|SVNLogEntryPath
import|;
end_import

begin_import
import|import
name|org
operator|.
name|tmatesoft
operator|.
name|svn
operator|.
name|core
operator|.
name|SVNMergeInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|tmatesoft
operator|.
name|svn
operator|.
name|core
operator|.
name|SVNMergeInfoInheritance
import|;
end_import

begin_import
import|import
name|org
operator|.
name|tmatesoft
operator|.
name|svn
operator|.
name|core
operator|.
name|SVNNodeKind
import|;
end_import

begin_import
import|import
name|org
operator|.
name|tmatesoft
operator|.
name|svn
operator|.
name|core
operator|.
name|SVNProperty
import|;
end_import

begin_import
import|import
name|org
operator|.
name|tmatesoft
operator|.
name|svn
operator|.
name|core
operator|.
name|SVNPropertyValue
import|;
end_import

begin_import
import|import
name|org
operator|.
name|tmatesoft
operator|.
name|svn
operator|.
name|core
operator|.
name|SVNURL
import|;
end_import

begin_import
import|import
name|org
operator|.
name|tmatesoft
operator|.
name|svn
operator|.
name|core
operator|.
name|auth
operator|.
name|ISVNAuthenticationManager
import|;
end_import

begin_import
import|import
name|org
operator|.
name|tmatesoft
operator|.
name|svn
operator|.
name|core
operator|.
name|internal
operator|.
name|util
operator|.
name|SVNEncodingUtil
import|;
end_import

begin_import
import|import
name|org
operator|.
name|tmatesoft
operator|.
name|svn
operator|.
name|core
operator|.
name|internal
operator|.
name|util
operator|.
name|SVNPathUtil
import|;
end_import

begin_import
import|import
name|org
operator|.
name|tmatesoft
operator|.
name|svn
operator|.
name|core
operator|.
name|io
operator|.
name|SVNLocationEntry
import|;
end_import

begin_import
import|import
name|org
operator|.
name|tmatesoft
operator|.
name|svn
operator|.
name|core
operator|.
name|io
operator|.
name|SVNRepository
import|;
end_import

begin_import
import|import
name|org
operator|.
name|tmatesoft
operator|.
name|svn
operator|.
name|core
operator|.
name|io
operator|.
name|SVNRepositoryFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|tmatesoft
operator|.
name|svn
operator|.
name|core
operator|.
name|wc
operator|.
name|ISVNPathListHandler
import|;
end_import

begin_import
import|import
name|org
operator|.
name|tmatesoft
operator|.
name|svn
operator|.
name|core
operator|.
name|wc
operator|.
name|ISVNRepositoryPool
import|;
end_import

begin_import
import|import
name|org
operator|.
name|tmatesoft
operator|.
name|svn
operator|.
name|core
operator|.
name|wc
operator|.
name|SVNRevision
import|;
end_import

begin_import
import|import
name|org
operator|.
name|tmatesoft
operator|.
name|svn
operator|.
name|util
operator|.
name|ISVNDebugLog
import|;
end_import

begin_import
import|import
name|org
operator|.
name|tmatesoft
operator|.
name|svn
operator|.
name|util
operator|.
name|SVNDebugLog
import|;
end_import

begin_import
import|import
name|org
operator|.
name|tmatesoft
operator|.
name|svn
operator|.
name|util
operator|.
name|SVNLogType
import|;
end_import

begin_comment
comment|/**  * The<b>SVNBasicClient</b> is the base class of all   *<b>SVN</b>*<b>Client</b> classes that provides a common interface  * and realization.  *   *<p>  * All of<b>SVN</b>*<b>Client</b> classes use inherited methods of  *<b>SVNBasicClient</b> to access Working Copies metadata, to create   * a driver object to access a repository if it's necessary, etc. In addition  *<b>SVNBasicClient</b> provides some interface methods  - such as those  * that allow you to set your {@link ISVNEventHandler event handler},   * obtain run-time configuration options, and others.   *   * @version 1.3  * @author  TMate Software Ltd.  * @since   1.2  */
end_comment

begin_class
specifier|public
class|class
name|SVNBasicClient
implements|implements
name|ISVNEventHandler
block|{
specifier|private
name|ISVNRepositoryPool
name|myRepositoryPool
decl_stmt|;
specifier|private
name|ISVNOptions
name|myOptions
decl_stmt|;
specifier|private
name|ISVNEventHandler
name|myEventDispatcher
decl_stmt|;
specifier|private
name|List
name|myPathPrefixesStack
decl_stmt|;
specifier|private
name|boolean
name|myIsIgnoreExternals
decl_stmt|;
specifier|private
name|boolean
name|myIsLeaveConflictsUnresolved
decl_stmt|;
specifier|private
name|ISVNDebugLog
name|myDebugLog
decl_stmt|;
specifier|private
name|ISVNPathListHandler
name|myPathListHandler
decl_stmt|;
specifier|protected
name|SVNBasicClient
parameter_list|(
specifier|final
name|ISVNAuthenticationManager
name|authManager
parameter_list|,
name|ISVNOptions
name|options
parameter_list|)
block|{
name|this
argument_list|(
operator|new
name|DefaultSVNRepositoryPool
argument_list|(
name|authManager
operator|==
literal|null
condition|?
name|SVNWCUtil
operator|.
name|createDefaultAuthenticationManager
argument_list|()
else|:
name|authManager
argument_list|,
name|options
argument_list|,
literal|0
argument_list|,
literal|false
argument_list|)
argument_list|,
name|options
argument_list|)
expr_stmt|;
block|}
specifier|protected
name|SVNBasicClient
parameter_list|(
name|ISVNRepositoryPool
name|repositoryPool
parameter_list|,
name|ISVNOptions
name|options
parameter_list|)
block|{
name|myRepositoryPool
operator|=
name|repositoryPool
expr_stmt|;
name|setOptions
argument_list|(
name|options
argument_list|)
expr_stmt|;
name|myPathPrefixesStack
operator|=
operator|new
name|LinkedList
argument_list|()
expr_stmt|;
block|}
comment|/**      * Gets run-time configuration options used by this object.      *       * @return the run-time options being in use      */
specifier|public
name|ISVNOptions
name|getOptions
parameter_list|()
block|{
return|return
name|myOptions
return|;
block|}
comment|/**      * Sets run-time global configuration options to this object.      *       * @param options  the run-time configuration options       */
specifier|public
name|void
name|setOptions
parameter_list|(
name|ISVNOptions
name|options
parameter_list|)
block|{
name|myOptions
operator|=
name|options
expr_stmt|;
if|if
condition|(
name|myOptions
operator|==
literal|null
condition|)
block|{
name|myOptions
operator|=
name|SVNWCUtil
operator|.
name|createDefaultOptions
argument_list|(
literal|true
argument_list|)
expr_stmt|;
block|}
block|}
comment|/**      * Sets externals definitions to be ignored or not during      * operations.      *       *<p>      * For example, if external definitions are set to be ignored      * then a checkout operation won't fetch them into a Working Copy.      *       * @param ignore<span class="javakeyword">true</span> to ignore      *                externals definitions,<span class="javakeyword">false</span> -       *                not to      * @see           #isIgnoreExternals()      */
specifier|public
name|void
name|setIgnoreExternals
parameter_list|(
name|boolean
name|ignore
parameter_list|)
block|{
name|myIsIgnoreExternals
operator|=
name|ignore
expr_stmt|;
block|}
comment|/**      * Determines if externals definitions are ignored.      *       * @return<span class="javakeyword">true</span> if ignored,      *         otherwise<span class="javakeyword">false</span>      * @see    #setIgnoreExternals(boolean)      */
specifier|public
name|boolean
name|isIgnoreExternals
parameter_list|()
block|{
return|return
name|myIsIgnoreExternals
return|;
block|}
comment|/**      * Sets (or unsets) all conflicted working files to be untouched      * by update and merge operations.      *       *<p>      * By default when a file receives changes from the repository       * that are in conflict with local edits, an update operation places      * two sections for each conflicting snatch into the working file       * one of which is a user's local edit and the second is the one just       * received from the repository. Like this:      *<pre class="javacode">      *<<<<<<< .mine      * user's text      * =======      * received text      *>>>>>>> .r2</pre><br />       * Also the operation creates three temporary files that appear in the       * same directory as the working file. Now if you call this method with       *<code>leave</code> set to<span class="javakeyword">true</span>,      * an update will still create temporary files but won't place those two      * sections into your working file. And this behaviour also concerns      * merge operations: any merging to a conflicted file will be prevented.       * In addition if there is any registered event      * handler for an<b>SVNDiffClient</b> or<b>SVNUpdateClient</b>       * instance then the handler will be dispatched an event with       * the status type set to {@link SVNStatusType#CONFLICTED_UNRESOLVED}.       *       *<p>      * The default value is<span class="javakeyword">false</span> until      * a caller explicitly changes it calling this method.       *       * @param leave<span class="javakeyword">true</span> to prevent       *               conflicted files from merging (all merging operations       *               will be skipped), otherwise<span class="javakeyword">false</span>      * @see          #isLeaveConflictsUnresolved()                    * @see          SVNUpdateClient      * @see          SVNDiffClient      * @see          ISVNEventHandler      * @deprecated   this method should not be used anymore      */
specifier|public
name|void
name|setLeaveConflictsUnresolved
parameter_list|(
name|boolean
name|leave
parameter_list|)
block|{
name|myIsLeaveConflictsUnresolved
operator|=
name|leave
expr_stmt|;
block|}
comment|/**      * Determines if conflicted files should be left unresolved      * preventing from merging their contents during update and merge       * operations.      *        * @return<span class="javakeyword">true</span> if conflicted files      *             are set to be prevented from merging,<span class="javakeyword">false</span>      *             if there's no such restriction      * @see        #setLeaveConflictsUnresolved(boolean)      * @deprecated this method should not be used anymore      */
specifier|public
name|boolean
name|isLeaveConflictsUnresolved
parameter_list|()
block|{
return|return
name|myIsLeaveConflictsUnresolved
return|;
block|}
comment|/**      * Sets an event handler for this object. This event handler      * will be dispatched {@link SVNEvent} objects to provide       * detailed information about actions and progress state       * of version control operations performed by<b>do</b>*<b>()</b>      * methods of<b>SVN</b>*<b>Client</b> classes.      *       * @param dispatcher an event handler      */
specifier|public
name|void
name|setEventHandler
parameter_list|(
name|ISVNEventHandler
name|dispatcher
parameter_list|)
block|{
name|myEventDispatcher
operator|=
name|dispatcher
expr_stmt|;
block|}
comment|/**      * Sets a path list handler implementation to this object.      * @param handler  handler implementation      * @since          1.2.0      */
specifier|public
name|void
name|setPathListHandler
parameter_list|(
name|ISVNPathListHandler
name|handler
parameter_list|)
block|{
name|myPathListHandler
operator|=
name|handler
expr_stmt|;
block|}
comment|/**      * Sets a logger to write debug log information to.      *       * @param log a debug logger      */
specifier|public
name|void
name|setDebugLog
parameter_list|(
name|ISVNDebugLog
name|log
parameter_list|)
block|{
name|myDebugLog
operator|=
name|log
expr_stmt|;
block|}
comment|/**      * Returns the debug logger currently in use.        *       *<p>      * If no debug logger has been specified by the time this call occurs,       * a default one (returned by<code>org.tmatesoft.svn.util.SVNDebugLog.getDefaultLog()</code>)       * will be created and used.      *       * @return a debug logger      */
specifier|public
name|ISVNDebugLog
name|getDebugLog
parameter_list|()
block|{
if|if
condition|(
name|myDebugLog
operator|==
literal|null
condition|)
block|{
return|return
name|SVNDebugLog
operator|.
name|getDefaultLog
argument_list|()
return|;
block|}
return|return
name|myDebugLog
return|;
block|}
comment|/**      * Returns the root of the repository.       *       *<p/>      * If<code>path</code> is not<span class="javakeyword">null</span> and<code>pegRevision</code> is       * either {@link SVNRevision#WORKING} or {@link SVNRevision#BASE}, then attempts to fetch the repository       * root from the working copy represented by<code>path</code>. If these conditions are not met or if the       * repository root is not recorded in the working copy, then a repository connection is established       * and the repository root is fetched from the session.       *       *<p/>      * When fetching the repository root from the working copy and if<code>access</code> is       *<span class="javakeyword">null</span>, a new working copy access will be created and the working copy       * will be opened non-recursively for reading only.       *       *<p/>      * All necessary cleanup (session or|and working copy close) will be performed automatically as the routine       * finishes.       *       * @param  path           working copy path      * @param  url            repository url      * @param  pegRevision    revision in which the target is valid      * @param  adminArea      working copy administrative area object      * @param  access         working copy access object      * @return                repository root url      * @throws SVNException       * @since                 1.2.0               */
specifier|public
name|SVNURL
name|getReposRoot
parameter_list|(
name|File
name|path
parameter_list|,
name|SVNURL
name|url
parameter_list|,
name|SVNRevision
name|pegRevision
parameter_list|,
name|SVNAdminArea
name|adminArea
parameter_list|,
name|SVNWCAccess
name|access
parameter_list|)
throws|throws
name|SVNException
block|{
name|SVNURL
name|reposRoot
init|=
literal|null
decl_stmt|;
if|if
condition|(
name|path
operator|!=
literal|null
operator|&&
operator|(
name|pegRevision
operator|==
name|SVNRevision
operator|.
name|WORKING
operator|||
name|pegRevision
operator|==
name|SVNRevision
operator|.
name|BASE
operator|)
condition|)
block|{
if|if
condition|(
name|access
operator|==
literal|null
condition|)
block|{
name|access
operator|=
name|createWCAccess
argument_list|()
expr_stmt|;
block|}
name|boolean
name|needCleanUp
init|=
literal|false
decl_stmt|;
try|try
block|{
if|if
condition|(
name|adminArea
operator|==
literal|null
condition|)
block|{
name|adminArea
operator|=
name|access
operator|.
name|probeOpen
argument_list|(
name|path
argument_list|,
literal|false
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|needCleanUp
operator|=
literal|true
expr_stmt|;
block|}
name|SVNEntry
name|entry
init|=
name|access
operator|.
name|getVersionedEntry
argument_list|(
name|path
argument_list|,
literal|false
argument_list|)
decl_stmt|;
name|url
operator|=
name|getEntryLocation
argument_list|(
name|path
argument_list|,
name|entry
argument_list|,
literal|null
argument_list|,
name|SVNRevision
operator|.
name|UNDEFINED
argument_list|)
expr_stmt|;
name|reposRoot
operator|=
name|entry
operator|.
name|getRepositoryRootURL
argument_list|()
expr_stmt|;
block|}
finally|finally
block|{
if|if
condition|(
name|needCleanUp
condition|)
block|{
name|access
operator|.
name|closeAdminArea
argument_list|(
name|path
argument_list|)
expr_stmt|;
block|}
block|}
block|}
if|if
condition|(
name|reposRoot
operator|==
literal|null
condition|)
block|{
name|SVNRepository
name|repos
init|=
literal|null
decl_stmt|;
try|try
block|{
name|repos
operator|=
name|createRepository
argument_list|(
name|url
argument_list|,
name|path
argument_list|,
literal|null
argument_list|,
name|pegRevision
argument_list|,
name|pegRevision
argument_list|,
literal|null
argument_list|)
expr_stmt|;
name|reposRoot
operator|=
name|repos
operator|.
name|getRepositoryRoot
argument_list|(
literal|true
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
if|if
condition|(
name|repos
operator|!=
literal|null
condition|)
block|{
name|repos
operator|.
name|closeSession
argument_list|()
expr_stmt|;
block|}
block|}
block|}
return|return
name|reposRoot
return|;
block|}
specifier|protected
name|void
name|sleepForTimeStamp
parameter_list|()
block|{
if|if
condition|(
name|myPathPrefixesStack
operator|==
literal|null
operator|||
name|myPathPrefixesStack
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|SVNFileUtil
operator|.
name|sleepForTimestamp
argument_list|()
expr_stmt|;
block|}
block|}
specifier|protected
name|SVNRepository
name|createRepository
parameter_list|(
name|SVNURL
name|url
parameter_list|,
name|File
name|path
parameter_list|,
name|SVNWCAccess
name|access
parameter_list|,
name|boolean
name|mayReuse
parameter_list|)
throws|throws
name|SVNException
block|{
name|String
name|uuid
init|=
literal|null
decl_stmt|;
if|if
condition|(
name|access
operator|!=
literal|null
condition|)
block|{
name|SVNEntry
name|entry
init|=
name|access
operator|.
name|getEntry
argument_list|(
name|path
argument_list|,
literal|false
argument_list|)
decl_stmt|;
if|if
condition|(
name|entry
operator|!=
literal|null
condition|)
block|{
name|uuid
operator|=
name|entry
operator|.
name|getUUID
argument_list|()
expr_stmt|;
block|}
block|}
return|return
name|createRepository
argument_list|(
name|url
argument_list|,
name|uuid
argument_list|,
name|mayReuse
argument_list|)
return|;
block|}
specifier|protected
name|SVNRepository
name|createRepository
parameter_list|(
name|SVNURL
name|url
parameter_list|,
name|String
name|uuid
parameter_list|,
name|boolean
name|mayReuse
parameter_list|)
throws|throws
name|SVNException
block|{
name|SVNRepository
name|repository
init|=
literal|null
decl_stmt|;
if|if
condition|(
name|myRepositoryPool
operator|==
literal|null
condition|)
block|{
name|repository
operator|=
name|SVNRepositoryFactory
operator|.
name|create
argument_list|(
name|url
argument_list|,
literal|null
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|repository
operator|=
name|myRepositoryPool
operator|.
name|createRepository
argument_list|(
name|url
argument_list|,
name|mayReuse
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|uuid
operator|!=
literal|null
condition|)
block|{
name|String
name|reposUUID
init|=
name|repository
operator|.
name|getRepositoryUUID
argument_list|(
literal|true
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|uuid
operator|.
name|equals
argument_list|(
name|reposUUID
argument_list|)
condition|)
block|{
name|SVNErrorMessage
name|err
init|=
name|SVNErrorMessage
operator|.
name|create
argument_list|(
name|SVNErrorCode
operator|.
name|RA_UUID_MISMATCH
argument_list|,
literal|"Repository UUID ''{0}'' doesn''t match expected UUID ''{1}''"
argument_list|,
operator|new
name|Object
index|[]
block|{
name|reposUUID
block|,
name|uuid
block|}
argument_list|)
decl_stmt|;
name|SVNErrorManager
operator|.
name|error
argument_list|(
name|err
argument_list|,
name|SVNLogType
operator|.
name|WC
argument_list|)
expr_stmt|;
block|}
block|}
name|repository
operator|.
name|setDebugLog
argument_list|(
name|getDebugLog
argument_list|()
argument_list|)
expr_stmt|;
name|repository
operator|.
name|setCanceller
argument_list|(
name|getEventDispatcher
argument_list|()
argument_list|)
expr_stmt|;
return|return
name|repository
return|;
block|}
specifier|protected
name|ISVNRepositoryPool
name|getRepositoryPool
parameter_list|()
block|{
return|return
name|myRepositoryPool
return|;
block|}
specifier|protected
name|void
name|dispatchEvent
parameter_list|(
name|SVNEvent
name|event
parameter_list|)
throws|throws
name|SVNException
block|{
name|dispatchEvent
argument_list|(
name|event
argument_list|,
name|ISVNEventHandler
operator|.
name|UNKNOWN
argument_list|)
expr_stmt|;
block|}
specifier|protected
name|void
name|dispatchEvent
parameter_list|(
name|SVNEvent
name|event
parameter_list|,
name|double
name|progress
parameter_list|)
throws|throws
name|SVNException
block|{
if|if
condition|(
name|myEventDispatcher
operator|!=
literal|null
condition|)
block|{
try|try
block|{
name|myEventDispatcher
operator|.
name|handleEvent
argument_list|(
name|event
argument_list|,
name|progress
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|SVNException
name|e
parameter_list|)
block|{
throw|throw
name|e
throw|;
block|}
catch|catch
parameter_list|(
name|Throwable
name|th
parameter_list|)
block|{
name|SVNDebugLog
operator|.
name|getDefaultLog
argument_list|()
operator|.
name|logSevere
argument_list|(
name|SVNLogType
operator|.
name|WC
argument_list|,
name|th
argument_list|)
expr_stmt|;
name|SVNErrorMessage
name|err
init|=
name|SVNErrorMessage
operator|.
name|create
argument_list|(
name|SVNErrorCode
operator|.
name|UNKNOWN
argument_list|,
literal|"Error while dispatching event: {0}"
argument_list|,
operator|new
name|Object
index|[]
block|{
name|th
operator|.
name|getMessage
argument_list|()
block|}
argument_list|,
name|SVNErrorMessage
operator|.
name|TYPE_ERROR
argument_list|,
name|th
argument_list|)
decl_stmt|;
name|SVNErrorManager
operator|.
name|error
argument_list|(
name|err
argument_list|,
name|th
argument_list|,
name|SVNLogType
operator|.
name|DEFAULT
argument_list|)
expr_stmt|;
block|}
block|}
block|}
comment|/**      * Removes or adds a path prefix. This method is not intended for       * users (from an API point of view).       *       * @param prefix a path prefix      */
specifier|public
name|void
name|setEventPathPrefix
parameter_list|(
name|String
name|prefix
parameter_list|)
block|{
if|if
condition|(
name|prefix
operator|==
literal|null
operator|&&
operator|!
name|myPathPrefixesStack
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|myPathPrefixesStack
operator|.
name|remove
argument_list|(
name|myPathPrefixesStack
operator|.
name|size
argument_list|()
operator|-
literal|1
argument_list|)
expr_stmt|;
block|}
if|else if
condition|(
name|prefix
operator|!=
literal|null
condition|)
block|{
name|myPathPrefixesStack
operator|.
name|add
argument_list|(
name|prefix
argument_list|)
expr_stmt|;
block|}
block|}
specifier|protected
name|ISVNEventHandler
name|getEventDispatcher
parameter_list|()
block|{
return|return
name|myEventDispatcher
return|;
block|}
specifier|protected
name|SVNWCAccess
name|createWCAccess
parameter_list|()
block|{
return|return
name|createWCAccess
argument_list|(
literal|null
argument_list|)
return|;
block|}
specifier|protected
name|SVNWCAccess
name|createWCAccess
parameter_list|(
specifier|final
name|String
name|pathPrefix
parameter_list|)
block|{
name|ISVNEventHandler
name|eventHandler
init|=
literal|null
decl_stmt|;
if|if
condition|(
name|pathPrefix
operator|!=
literal|null
condition|)
block|{
name|eventHandler
operator|=
operator|new
name|ISVNEventHandler
argument_list|()
block|{
specifier|public
name|void
name|handleEvent
parameter_list|(
name|SVNEvent
name|event
parameter_list|,
name|double
name|progress
parameter_list|)
throws|throws
name|SVNException
block|{
name|dispatchEvent
argument_list|(
name|event
argument_list|,
name|progress
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|checkCancelled
parameter_list|()
throws|throws
name|SVNCancelException
block|{
name|SVNBasicClient
operator|.
name|this
operator|.
name|checkCancelled
argument_list|()
expr_stmt|;
block|}
block|}
expr_stmt|;
block|}
else|else
block|{
name|eventHandler
operator|=
name|this
expr_stmt|;
block|}
name|SVNWCAccess
name|access
init|=
name|SVNWCAccess
operator|.
name|newInstance
argument_list|(
name|eventHandler
argument_list|)
decl_stmt|;
name|access
operator|.
name|setOptions
argument_list|(
name|myOptions
argument_list|)
expr_stmt|;
return|return
name|access
return|;
block|}
comment|/**      * Dispatches events to the registered event handler (if any).       *       * @param event       the current event      * @param progress    progress state (from 0 to 1)      * @throws SVNException      */
specifier|public
name|void
name|handleEvent
parameter_list|(
name|SVNEvent
name|event
parameter_list|,
name|double
name|progress
parameter_list|)
throws|throws
name|SVNException
block|{
name|dispatchEvent
argument_list|(
name|event
argument_list|,
name|progress
argument_list|)
expr_stmt|;
block|}
comment|/**      * Handles a next working copy path with the {@link ISVNPathListHandler path list handler}       * if any was provided to this object through {@link #setPathListHandler(ISVNPathListHandler)}.      *       *<p/>      * Note: used by<code>SVNKit</code> internals.      *       * @param  path            working copy path       * @throws SVNException       * @since                  1.2.0      */
specifier|public
name|void
name|handlePathListItem
parameter_list|(
name|File
name|path
parameter_list|)
throws|throws
name|SVNException
block|{
if|if
condition|(
name|myPathListHandler
operator|!=
literal|null
operator|&&
name|path
operator|!=
literal|null
condition|)
block|{
name|myPathListHandler
operator|.
name|handlePathListItem
argument_list|(
name|path
argument_list|)
expr_stmt|;
block|}
block|}
comment|/**      * Redirects this call to the registered event handler (if any).      *       * @throws SVNCancelException  if the current operation      *                             was cancelled      */
specifier|public
name|void
name|checkCancelled
parameter_list|()
throws|throws
name|SVNCancelException
block|{
if|if
condition|(
name|myEventDispatcher
operator|!=
literal|null
condition|)
block|{
name|myEventDispatcher
operator|.
name|checkCancelled
argument_list|()
expr_stmt|;
block|}
block|}
specifier|protected
name|long
name|getRevisionNumber
parameter_list|(
name|SVNRevision
name|revision
parameter_list|,
name|SVNRepository
name|repository
parameter_list|,
name|File
name|path
parameter_list|)
throws|throws
name|SVNException
block|{
return|return
name|getRevisionNumber
argument_list|(
name|revision
argument_list|,
literal|null
argument_list|,
name|repository
argument_list|,
name|path
argument_list|)
return|;
block|}
specifier|protected
name|long
name|getRevisionNumber
parameter_list|(
name|SVNRevision
name|revision
parameter_list|,
name|long
index|[]
name|latestRevisionNumber
parameter_list|,
name|SVNRepository
name|repository
parameter_list|,
name|File
name|path
parameter_list|)
throws|throws
name|SVNException
block|{
if|if
condition|(
name|repository
operator|==
literal|null
operator|&&
operator|(
name|revision
operator|==
name|SVNRevision
operator|.
name|HEAD
operator|||
name|revision
operator|.
name|getDate
argument_list|()
operator|!=
literal|null
operator|)
condition|)
block|{
name|SVNErrorMessage
name|err
init|=
name|SVNErrorMessage
operator|.
name|create
argument_list|(
name|SVNErrorCode
operator|.
name|CLIENT_RA_ACCESS_REQUIRED
argument_list|)
decl_stmt|;
name|SVNErrorManager
operator|.
name|error
argument_list|(
name|err
argument_list|,
name|SVNLogType
operator|.
name|WC
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|revision
operator|.
name|getNumber
argument_list|()
operator|>=
literal|0
condition|)
block|{
return|return
name|revision
operator|.
name|getNumber
argument_list|()
return|;
block|}
if|else if
condition|(
name|revision
operator|.
name|getDate
argument_list|()
operator|!=
literal|null
condition|)
block|{
return|return
name|repository
operator|.
name|getDatedRevision
argument_list|(
name|revision
operator|.
name|getDate
argument_list|()
argument_list|)
return|;
block|}
if|else if
condition|(
name|revision
operator|==
name|SVNRevision
operator|.
name|HEAD
condition|)
block|{
if|if
condition|(
name|latestRevisionNumber
operator|!=
literal|null
operator|&&
name|latestRevisionNumber
operator|.
name|length
operator|>
literal|0
operator|&&
name|SVNRevision
operator|.
name|isValidRevisionNumber
argument_list|(
name|latestRevisionNumber
index|[
literal|0
index|]
argument_list|)
condition|)
block|{
return|return
name|latestRevisionNumber
index|[
literal|0
index|]
return|;
block|}
name|long
name|latestRevision
init|=
name|repository
operator|.
name|getLatestRevision
argument_list|()
decl_stmt|;
if|if
condition|(
name|latestRevisionNumber
operator|!=
literal|null
operator|&&
name|latestRevisionNumber
operator|.
name|length
operator|>
literal|0
condition|)
block|{
name|latestRevisionNumber
index|[
literal|0
index|]
operator|=
name|latestRevision
expr_stmt|;
block|}
return|return
name|latestRevision
return|;
block|}
if|else if
condition|(
operator|!
name|revision
operator|.
name|isValid
argument_list|()
condition|)
block|{
return|return
operator|-
literal|1
return|;
block|}
if|else if
condition|(
name|revision
operator|==
name|SVNRevision
operator|.
name|COMMITTED
operator|||
name|revision
operator|==
name|SVNRevision
operator|.
name|WORKING
operator|||
name|revision
operator|==
name|SVNRevision
operator|.
name|BASE
operator|||
name|revision
operator|==
name|SVNRevision
operator|.
name|PREVIOUS
condition|)
block|{
if|if
condition|(
name|path
operator|==
literal|null
condition|)
block|{
name|SVNErrorMessage
name|err
init|=
name|SVNErrorMessage
operator|.
name|create
argument_list|(
name|SVNErrorCode
operator|.
name|CLIENT_VERSIONED_PATH_REQUIRED
argument_list|)
decl_stmt|;
name|SVNErrorManager
operator|.
name|error
argument_list|(
name|err
argument_list|,
name|SVNLogType
operator|.
name|WC
argument_list|)
expr_stmt|;
block|}
name|SVNWCAccess
name|wcAccess
init|=
name|createWCAccess
argument_list|()
decl_stmt|;
name|wcAccess
operator|.
name|probeOpen
argument_list|(
name|path
argument_list|,
literal|false
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|SVNEntry
name|entry
init|=
literal|null
decl_stmt|;
try|try
block|{
name|entry
operator|=
name|wcAccess
operator|.
name|getVersionedEntry
argument_list|(
name|path
argument_list|,
literal|false
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
name|wcAccess
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
if|if
condition|(
name|revision
operator|==
name|SVNRevision
operator|.
name|WORKING
operator|||
name|revision
operator|==
name|SVNRevision
operator|.
name|BASE
condition|)
block|{
return|return
name|entry
operator|.
name|getRevision
argument_list|()
return|;
block|}
if|if
condition|(
name|entry
operator|.
name|getCommittedRevision
argument_list|()
operator|<
literal|0
condition|)
block|{
name|SVNErrorMessage
name|err
init|=
name|SVNErrorMessage
operator|.
name|create
argument_list|(
name|SVNErrorCode
operator|.
name|CLIENT_BAD_REVISION
argument_list|,
literal|"Path ''{0}'' has no committed revision"
argument_list|,
name|path
argument_list|)
decl_stmt|;
name|SVNErrorManager
operator|.
name|error
argument_list|(
name|err
argument_list|,
name|SVNLogType
operator|.
name|WC
argument_list|)
expr_stmt|;
block|}
return|return
name|revision
operator|==
name|SVNRevision
operator|.
name|PREVIOUS
condition|?
name|entry
operator|.
name|getCommittedRevision
argument_list|()
operator|-
literal|1
else|:
name|entry
operator|.
name|getCommittedRevision
argument_list|()
return|;
block|}
else|else
block|{
name|SVNErrorMessage
name|err
init|=
name|SVNErrorMessage
operator|.
name|create
argument_list|(
name|SVNErrorCode
operator|.
name|CLIENT_BAD_REVISION
argument_list|,
literal|"Unrecognized revision type requested for ''{0}''"
argument_list|,
name|path
operator|!=
literal|null
condition|?
name|path
else|:
operator|(
name|Object
operator|)
name|repository
operator|.
name|getLocation
argument_list|()
argument_list|)
decl_stmt|;
name|SVNErrorManager
operator|.
name|error
argument_list|(
name|err
argument_list|,
name|SVNLogType
operator|.
name|WC
argument_list|)
expr_stmt|;
block|}
return|return
operator|-
literal|1
return|;
block|}
specifier|protected
name|SVNRepository
name|createRepository
parameter_list|(
name|SVNURL
name|url
parameter_list|,
name|File
name|path
parameter_list|,
name|SVNAdminArea
name|area
parameter_list|,
name|SVNRevision
name|pegRevision
parameter_list|,
name|SVNRevision
name|revision
parameter_list|,
name|long
index|[]
name|pegRev
parameter_list|)
throws|throws
name|SVNException
block|{
if|if
condition|(
name|url
operator|==
literal|null
condition|)
block|{
name|SVNURL
name|pathURL
init|=
name|getURL
argument_list|(
name|path
argument_list|)
decl_stmt|;
if|if
condition|(
name|pathURL
operator|==
literal|null
condition|)
block|{
name|SVNErrorMessage
name|err
init|=
name|SVNErrorMessage
operator|.
name|create
argument_list|(
name|SVNErrorCode
operator|.
name|ENTRY_MISSING_URL
argument_list|,
literal|"''{0}'' has no URL"
argument_list|,
name|path
argument_list|)
decl_stmt|;
name|SVNErrorManager
operator|.
name|error
argument_list|(
name|err
argument_list|,
name|SVNLogType
operator|.
name|WC
argument_list|)
expr_stmt|;
block|}
block|}
name|SVNRevision
name|startRevision
init|=
name|revision
decl_stmt|;
name|SVNRevision
index|[]
name|resolvedRevisions
init|=
name|resolveRevisions
argument_list|(
name|pegRevision
argument_list|,
name|startRevision
argument_list|,
name|url
operator|!=
literal|null
argument_list|,
literal|true
argument_list|)
decl_stmt|;
name|pegRevision
operator|=
name|resolvedRevisions
index|[
literal|0
index|]
expr_stmt|;
name|startRevision
operator|=
name|resolvedRevisions
index|[
literal|1
index|]
expr_stmt|;
name|SVNRepositoryLocation
index|[]
name|locations
init|=
name|getLocations
argument_list|(
name|url
argument_list|,
name|path
argument_list|,
literal|null
argument_list|,
name|pegRevision
argument_list|,
name|startRevision
argument_list|,
name|SVNRevision
operator|.
name|UNDEFINED
argument_list|)
decl_stmt|;
name|url
operator|=
name|locations
index|[
literal|0
index|]
operator|.
name|getURL
argument_list|()
expr_stmt|;
name|long
name|actualRevision
init|=
name|locations
index|[
literal|0
index|]
operator|.
name|getRevisionNumber
argument_list|()
decl_stmt|;
name|SVNRepository
name|repository
init|=
name|createRepository
argument_list|(
name|url
argument_list|,
name|area
operator|!=
literal|null
condition|?
name|area
operator|.
name|getRoot
argument_list|()
else|:
literal|null
argument_list|,
name|area
operator|!=
literal|null
condition|?
name|area
operator|.
name|getWCAccess
argument_list|()
else|:
literal|null
argument_list|,
literal|true
argument_list|)
decl_stmt|;
name|actualRevision
operator|=
name|getRevisionNumber
argument_list|(
name|SVNRevision
operator|.
name|create
argument_list|(
name|actualRevision
argument_list|)
argument_list|,
name|repository
argument_list|,
name|path
argument_list|)
expr_stmt|;
if|if
condition|(
name|actualRevision
operator|<
literal|0
condition|)
block|{
name|actualRevision
operator|=
name|repository
operator|.
name|getLatestRevision
argument_list|()
expr_stmt|;
block|}
if|if
condition|(
name|pegRev
operator|!=
literal|null
operator|&&
name|pegRev
operator|.
name|length
operator|>
literal|0
condition|)
block|{
name|pegRev
index|[
literal|0
index|]
operator|=
name|actualRevision
expr_stmt|;
block|}
return|return
name|repository
return|;
block|}
specifier|protected
name|SVNRevision
index|[]
name|resolveRevisions
parameter_list|(
name|SVNRevision
name|pegRevision
parameter_list|,
name|SVNRevision
name|revision
parameter_list|,
name|boolean
name|isURL
parameter_list|,
name|boolean
name|noticeLocalModifications
parameter_list|)
block|{
if|if
condition|(
operator|!
name|pegRevision
operator|.
name|isValid
argument_list|()
condition|)
block|{
if|if
condition|(
name|isURL
condition|)
block|{
name|pegRevision
operator|=
name|SVNRevision
operator|.
name|HEAD
expr_stmt|;
block|}
else|else
block|{
if|if
condition|(
name|noticeLocalModifications
condition|)
block|{
name|pegRevision
operator|=
name|SVNRevision
operator|.
name|WORKING
expr_stmt|;
block|}
else|else
block|{
name|pegRevision
operator|=
name|SVNRevision
operator|.
name|BASE
expr_stmt|;
block|}
block|}
block|}
if|if
condition|(
operator|!
name|revision
operator|.
name|isValid
argument_list|()
condition|)
block|{
name|revision
operator|=
name|pegRevision
expr_stmt|;
block|}
return|return
operator|new
name|SVNRevision
index|[]
block|{
name|pegRevision
block|,
name|revision
block|}
return|;
block|}
specifier|protected
name|void
name|elideMergeInfo
parameter_list|(
name|SVNWCAccess
name|access
parameter_list|,
name|File
name|path
parameter_list|,
name|SVNEntry
name|entry
parameter_list|,
name|File
name|wcElisionLimitPath
parameter_list|)
throws|throws
name|SVNException
block|{
if|if
condition|(
name|wcElisionLimitPath
operator|==
literal|null
operator|||
operator|!
name|wcElisionLimitPath
operator|.
name|equals
argument_list|(
name|path
argument_list|)
condition|)
block|{
name|Map
name|mergeInfo
init|=
literal|null
decl_stmt|;
name|Map
name|targetMergeInfo
init|=
literal|null
decl_stmt|;
name|boolean
index|[]
name|inherited
init|=
operator|new
name|boolean
index|[
literal|1
index|]
decl_stmt|;
name|targetMergeInfo
operator|=
name|getWCMergeInfo
argument_list|(
name|path
argument_list|,
name|entry
argument_list|,
name|wcElisionLimitPath
argument_list|,
name|SVNMergeInfoInheritance
operator|.
name|INHERITED
argument_list|,
literal|false
argument_list|,
name|inherited
argument_list|)
expr_stmt|;
if|if
condition|(
name|inherited
index|[
literal|0
index|]
operator|||
name|targetMergeInfo
operator|==
literal|null
condition|)
block|{
return|return;
block|}
name|mergeInfo
operator|=
name|getWCMergeInfo
argument_list|(
name|path
argument_list|,
name|entry
argument_list|,
name|wcElisionLimitPath
argument_list|,
name|SVNMergeInfoInheritance
operator|.
name|NEAREST_ANCESTOR
argument_list|,
literal|false
argument_list|,
name|inherited
argument_list|)
expr_stmt|;
if|if
condition|(
name|mergeInfo
operator|==
literal|null
operator|&&
name|wcElisionLimitPath
operator|==
literal|null
condition|)
block|{
name|mergeInfo
operator|=
name|getWCOrRepositoryMergeInfo
argument_list|(
name|path
argument_list|,
name|entry
argument_list|,
name|SVNMergeInfoInheritance
operator|.
name|NEAREST_ANCESTOR
argument_list|,
name|inherited
argument_list|,
literal|true
argument_list|,
literal|null
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|mergeInfo
operator|==
literal|null
operator|&&
name|wcElisionLimitPath
operator|!=
literal|null
condition|)
block|{
return|return;
block|}
name|SVNMergeInfoUtil
operator|.
name|elideMergeInfo
argument_list|(
name|mergeInfo
argument_list|,
name|targetMergeInfo
argument_list|,
name|path
argument_list|,
literal|null
argument_list|,
name|access
argument_list|)
expr_stmt|;
block|}
block|}
comment|/**      * @param path path relative to the repository location.      */
specifier|protected
name|Map
name|getReposMergeInfo
parameter_list|(
name|SVNRepository
name|repository
parameter_list|,
name|String
name|path
parameter_list|,
name|long
name|revision
parameter_list|,
name|SVNMergeInfoInheritance
name|inheritance
parameter_list|,
name|boolean
name|squelchIncapable
parameter_list|)
throws|throws
name|SVNException
block|{
name|Map
name|reposMergeInfo
init|=
literal|null
decl_stmt|;
try|try
block|{
name|reposMergeInfo
operator|=
name|repository
operator|.
name|getMergeInfo
argument_list|(
operator|new
name|String
index|[]
block|{
name|path
block|}
argument_list|,
name|revision
argument_list|,
name|inheritance
argument_list|,
literal|false
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|SVNException
name|svne
parameter_list|)
block|{
if|if
condition|(
operator|!
name|squelchIncapable
operator|||
name|svne
operator|.
name|getErrorMessage
argument_list|()
operator|.
name|getErrorCode
argument_list|()
operator|!=
name|SVNErrorCode
operator|.
name|UNSUPPORTED_FEATURE
condition|)
block|{
throw|throw
name|svne
throw|;
block|}
block|}
name|String
name|rootRelativePath
init|=
name|getPathRelativeToRoot
argument_list|(
literal|null
argument_list|,
name|repository
operator|.
name|getLocation
argument_list|()
argument_list|,
name|repository
operator|.
name|getRepositoryRoot
argument_list|(
literal|false
argument_list|)
argument_list|,
literal|null
argument_list|,
name|repository
argument_list|)
decl_stmt|;
name|Map
name|targetMergeInfo
init|=
literal|null
decl_stmt|;
if|if
condition|(
name|reposMergeInfo
operator|!=
literal|null
condition|)
block|{
name|SVNMergeInfo
name|mergeInfo
init|=
operator|(
name|SVNMergeInfo
operator|)
name|reposMergeInfo
operator|.
name|get
argument_list|(
name|rootRelativePath
argument_list|)
decl_stmt|;
if|if
condition|(
name|mergeInfo
operator|!=
literal|null
condition|)
block|{
name|targetMergeInfo
operator|=
name|mergeInfo
operator|.
name|getMergeSourcesToMergeLists
argument_list|()
expr_stmt|;
block|}
block|}
return|return
name|targetMergeInfo
return|;
block|}
specifier|protected
name|Map
name|getWCOrRepositoryMergeInfo
parameter_list|(
name|File
name|path
parameter_list|,
name|SVNEntry
name|entry
parameter_list|,
name|SVNMergeInfoInheritance
name|inherit
parameter_list|,
name|boolean
index|[]
name|indirect
parameter_list|,
name|boolean
name|reposOnly
parameter_list|,
name|SVNRepository
name|repository
parameter_list|)
throws|throws
name|SVNException
block|{
name|Map
name|mergeInfo
init|=
literal|null
decl_stmt|;
name|long
name|targetRev
index|[]
init|=
block|{
operator|-
literal|1
block|}
decl_stmt|;
name|SVNURL
name|url
init|=
name|getEntryLocation
argument_list|(
name|path
argument_list|,
name|entry
argument_list|,
name|targetRev
argument_list|,
name|SVNRevision
operator|.
name|WORKING
argument_list|)
decl_stmt|;
name|long
name|revision
init|=
name|targetRev
index|[
literal|0
index|]
decl_stmt|;
if|if
condition|(
operator|!
name|reposOnly
condition|)
block|{
name|mergeInfo
operator|=
name|getWCMergeInfo
argument_list|(
name|path
argument_list|,
name|entry
argument_list|,
literal|null
argument_list|,
name|inherit
argument_list|,
literal|false
argument_list|,
name|indirect
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|mergeInfo
operator|==
literal|null
condition|)
block|{
if|if
condition|(
operator|!
name|entry
operator|.
name|isScheduledForAddition
argument_list|()
condition|)
block|{
name|Map
name|fileToProp
init|=
name|SVNPropertiesManager
operator|.
name|getWorkingCopyPropertyValues
argument_list|(
name|path
argument_list|,
name|entry
argument_list|,
name|SVNProperty
operator|.
name|MERGE_INFO
argument_list|,
name|SVNDepth
operator|.
name|EMPTY
argument_list|,
literal|true
argument_list|)
decl_stmt|;
name|SVNPropertyValue
name|mergeInfoProp
init|=
operator|(
name|SVNPropertyValue
operator|)
name|fileToProp
operator|.
name|get
argument_list|(
name|path
argument_list|)
decl_stmt|;
if|if
condition|(
name|mergeInfoProp
operator|==
literal|null
condition|)
block|{
name|SVNURL
name|oldLocation
init|=
literal|null
decl_stmt|;
name|boolean
name|closeRepository
init|=
literal|false
decl_stmt|;
name|Map
name|reposMergeInfo
init|=
literal|null
decl_stmt|;
name|String
name|repositoryPath
init|=
literal|null
decl_stmt|;
try|try
block|{
if|if
condition|(
name|repository
operator|==
literal|null
condition|)
block|{
name|repository
operator|=
name|createRepository
argument_list|(
name|url
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|closeRepository
operator|=
literal|true
expr_stmt|;
block|}
name|repositoryPath
operator|=
name|getPathRelativeToSession
argument_list|(
name|url
argument_list|,
literal|null
argument_list|,
name|repository
argument_list|)
expr_stmt|;
name|oldLocation
operator|=
name|repository
operator|.
name|getLocation
argument_list|()
expr_stmt|;
if|if
condition|(
name|repositoryPath
operator|==
literal|null
condition|)
block|{
name|repositoryPath
operator|=
literal|""
expr_stmt|;
name|repository
operator|.
name|setLocation
argument_list|(
name|url
argument_list|,
literal|false
argument_list|)
expr_stmt|;
block|}
name|reposMergeInfo
operator|=
name|getReposMergeInfo
argument_list|(
name|repository
argument_list|,
name|repositoryPath
argument_list|,
name|revision
argument_list|,
name|inherit
argument_list|,
literal|true
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
if|if
condition|(
name|closeRepository
condition|)
block|{
name|repository
operator|.
name|closeSession
argument_list|()
expr_stmt|;
block|}
if|else if
condition|(
name|oldLocation
operator|!=
literal|null
condition|)
block|{
name|repository
operator|.
name|setLocation
argument_list|(
name|oldLocation
argument_list|,
literal|false
argument_list|)
expr_stmt|;
block|}
block|}
if|if
condition|(
name|reposMergeInfo
operator|!=
literal|null
condition|)
block|{
name|indirect
index|[
literal|0
index|]
operator|=
literal|true
expr_stmt|;
name|mergeInfo
operator|=
name|reposMergeInfo
expr_stmt|;
block|}
block|}
block|}
block|}
return|return
name|mergeInfo
return|;
block|}
comment|/**      * mergeInfo must not be null!      */
specifier|protected
name|Map
name|getWCMergeInfo
parameter_list|(
name|File
name|path
parameter_list|,
name|SVNEntry
name|entry
parameter_list|,
name|File
name|limitPath
parameter_list|,
name|SVNMergeInfoInheritance
name|inherit
parameter_list|,
name|boolean
name|base
parameter_list|,
name|boolean
index|[]
name|inherited
parameter_list|)
throws|throws
name|SVNException
block|{
name|String
name|walkPath
init|=
literal|""
decl_stmt|;
name|Map
name|wcMergeInfo
init|=
literal|null
decl_stmt|;
name|SVNWCAccess
name|wcAccess
init|=
name|createWCAccess
argument_list|()
decl_stmt|;
name|Map
name|mergeInfo
init|=
literal|null
decl_stmt|;
if|if
condition|(
name|limitPath
operator|!=
literal|null
condition|)
block|{
name|limitPath
operator|=
operator|new
name|Resource
argument_list|(
name|SVNPathUtil
operator|.
name|validateFilePath
argument_list|(
name|limitPath
operator|.
name|getAbsolutePath
argument_list|()
argument_list|)
argument_list|)
operator|.
name|getAbsoluteFile
argument_list|()
expr_stmt|;
block|}
try|try
block|{
while|while
condition|(
literal|true
condition|)
block|{
if|if
condition|(
name|inherit
operator|==
name|SVNMergeInfoInheritance
operator|.
name|NEAREST_ANCESTOR
condition|)
block|{
name|wcMergeInfo
operator|=
literal|null
expr_stmt|;
name|inherit
operator|=
name|SVNMergeInfoInheritance
operator|.
name|INHERITED
expr_stmt|;
block|}
else|else
block|{
name|wcMergeInfo
operator|=
name|SVNPropertiesManager
operator|.
name|parseMergeInfo
argument_list|(
name|path
argument_list|,
name|entry
argument_list|,
name|base
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|SVNWCManager
operator|.
name|isEntrySwitched
argument_list|(
name|path
argument_list|,
name|entry
argument_list|)
condition|)
block|{
break|break;
block|}
name|path
operator|=
operator|new
name|Resource
argument_list|(
name|SVNPathUtil
operator|.
name|validateFilePath
argument_list|(
name|path
operator|.
name|getAbsolutePath
argument_list|()
argument_list|)
argument_list|)
operator|.
name|getAbsoluteFile
argument_list|()
expr_stmt|;
if|if
condition|(
name|wcMergeInfo
operator|==
literal|null
operator|&&
name|inherit
operator|!=
name|SVNMergeInfoInheritance
operator|.
name|EXPLICIT
operator|&&
name|path
operator|.
name|getParentFile
argument_list|()
operator|!=
literal|null
condition|)
block|{
if|if
condition|(
name|limitPath
operator|!=
literal|null
operator|&&
name|limitPath
operator|.
name|equals
argument_list|(
name|path
argument_list|)
condition|)
block|{
break|break;
block|}
name|walkPath
operator|=
name|SVNPathUtil
operator|.
name|append
argument_list|(
name|path
operator|.
name|getName
argument_list|()
argument_list|,
name|walkPath
argument_list|)
expr_stmt|;
name|path
operator|=
name|path
operator|.
name|getParentFile
argument_list|()
expr_stmt|;
try|try
block|{
name|wcAccess
operator|.
name|open
argument_list|(
name|path
argument_list|,
literal|false
argument_list|,
literal|0
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|SVNException
name|svne
parameter_list|)
block|{
if|if
condition|(
name|svne
operator|.
name|getErrorMessage
argument_list|()
operator|.
name|getErrorCode
argument_list|()
operator|==
name|SVNErrorCode
operator|.
name|WC_NOT_DIRECTORY
condition|)
block|{
name|mergeInfo
operator|=
name|wcMergeInfo
expr_stmt|;
name|inherited
index|[
literal|0
index|]
operator|=
literal|false
expr_stmt|;
return|return
name|mergeInfo
return|;
block|}
throw|throw
name|svne
throw|;
block|}
name|entry
operator|=
name|wcAccess
operator|.
name|getEntry
argument_list|(
name|path
argument_list|,
literal|false
argument_list|)
expr_stmt|;
if|if
condition|(
name|entry
operator|!=
literal|null
condition|)
block|{
continue|continue;
block|}
block|}
break|break;
block|}
block|}
finally|finally
block|{
name|wcAccess
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
name|inherited
index|[
literal|0
index|]
operator|=
literal|false
expr_stmt|;
if|if
condition|(
name|walkPath
operator|.
name|length
argument_list|()
operator|==
literal|0
condition|)
block|{
name|mergeInfo
operator|=
name|wcMergeInfo
expr_stmt|;
block|}
else|else
block|{
if|if
condition|(
name|wcMergeInfo
operator|!=
literal|null
condition|)
block|{
name|mergeInfo
operator|=
name|SVNMergeInfoUtil
operator|.
name|adjustMergeInfoSourcePaths
argument_list|(
literal|null
argument_list|,
name|walkPath
argument_list|,
name|wcMergeInfo
argument_list|)
expr_stmt|;
name|inherited
index|[
literal|0
index|]
operator|=
literal|true
expr_stmt|;
block|}
else|else
block|{
name|mergeInfo
operator|=
literal|null
expr_stmt|;
block|}
block|}
if|if
condition|(
name|inherited
index|[
literal|0
index|]
condition|)
block|{
name|mergeInfo
operator|=
name|SVNMergeInfoUtil
operator|.
name|getInheritableMergeInfo
argument_list|(
name|mergeInfo
argument_list|,
literal|null
argument_list|,
name|SVNRepository
operator|.
name|INVALID_REVISION
argument_list|,
name|SVNRepository
operator|.
name|INVALID_REVISION
argument_list|)
expr_stmt|;
name|SVNMergeInfoUtil
operator|.
name|removeEmptyRangeLists
argument_list|(
name|mergeInfo
argument_list|)
expr_stmt|;
block|}
return|return
name|mergeInfo
return|;
block|}
specifier|protected
name|long
name|getPathLastChangeRevision
parameter_list|(
name|String
name|relPath
parameter_list|,
name|long
name|revision
parameter_list|,
name|SVNRepository
name|repository
parameter_list|)
throws|throws
name|SVNException
block|{
specifier|final
name|long
index|[]
name|rev
init|=
operator|new
name|long
index|[
literal|1
index|]
decl_stmt|;
name|rev
index|[
literal|0
index|]
operator|=
name|SVNRepository
operator|.
name|INVALID_REVISION
expr_stmt|;
name|repository
operator|.
name|log
argument_list|(
operator|new
name|String
index|[]
block|{
name|relPath
block|}
argument_list|,
literal|1
argument_list|,
name|revision
argument_list|,
literal|false
argument_list|,
literal|true
argument_list|,
literal|1
argument_list|,
literal|false
argument_list|,
literal|null
argument_list|,
operator|new
name|ISVNLogEntryHandler
argument_list|()
block|{
specifier|public
name|void
name|handleLogEntry
parameter_list|(
name|SVNLogEntry
name|logEntry
parameter_list|)
throws|throws
name|SVNException
block|{
name|rev
index|[
literal|0
index|]
operator|=
name|logEntry
operator|.
name|getRevision
argument_list|()
expr_stmt|;
block|}
block|}
argument_list|)
expr_stmt|;
return|return
name|rev
index|[
literal|0
index|]
return|;
block|}
specifier|protected
name|String
name|getPathRelativeToRoot
parameter_list|(
name|File
name|path
parameter_list|,
name|SVNURL
name|url
parameter_list|,
name|SVNURL
name|reposRootURL
parameter_list|,
name|SVNWCAccess
name|wcAccess
parameter_list|,
name|SVNRepository
name|repos
parameter_list|)
throws|throws
name|SVNException
block|{
if|if
condition|(
name|path
operator|!=
literal|null
condition|)
block|{
name|boolean
name|cleanUp
init|=
literal|false
decl_stmt|;
try|try
block|{
if|if
condition|(
name|wcAccess
operator|==
literal|null
condition|)
block|{
name|wcAccess
operator|=
name|createWCAccess
argument_list|()
expr_stmt|;
name|wcAccess
operator|.
name|probeOpen
argument_list|(
name|path
argument_list|,
literal|false
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|cleanUp
operator|=
literal|true
expr_stmt|;
block|}
name|SVNEntry
name|entry
init|=
name|wcAccess
operator|.
name|getVersionedEntry
argument_list|(
name|path
argument_list|,
literal|false
argument_list|)
decl_stmt|;
name|url
operator|=
name|getEntryLocation
argument_list|(
name|path
argument_list|,
name|entry
argument_list|,
literal|null
argument_list|,
name|SVNRevision
operator|.
name|UNDEFINED
argument_list|)
expr_stmt|;
if|if
condition|(
name|reposRootURL
operator|==
literal|null
condition|)
block|{
name|reposRootURL
operator|=
name|entry
operator|.
name|getRepositoryRootURL
argument_list|()
expr_stmt|;
block|}
block|}
finally|finally
block|{
if|if
condition|(
name|cleanUp
condition|)
block|{
name|wcAccess
operator|.
name|closeAdminArea
argument_list|(
name|path
argument_list|)
expr_stmt|;
block|}
block|}
block|}
if|if
condition|(
name|reposRootURL
operator|==
literal|null
condition|)
block|{
name|reposRootURL
operator|=
name|repos
operator|.
name|getRepositoryRoot
argument_list|(
literal|true
argument_list|)
expr_stmt|;
block|}
name|String
name|reposRootPath
init|=
name|reposRootURL
operator|.
name|getPath
argument_list|()
decl_stmt|;
name|String
name|absPath
init|=
name|url
operator|.
name|getPath
argument_list|()
decl_stmt|;
if|if
condition|(
operator|!
name|absPath
operator|.
name|startsWith
argument_list|(
name|reposRootPath
argument_list|)
condition|)
block|{
name|SVNErrorMessage
name|err
init|=
name|SVNErrorMessage
operator|.
name|create
argument_list|(
name|SVNErrorCode
operator|.
name|CLIENT_UNRELATED_RESOURCES
argument_list|,
literal|"URL ''{0}'' is not a child of repository root URL ''{1}''"
argument_list|,
operator|new
name|Object
index|[]
block|{
name|url
block|,
name|reposRootURL
block|}
argument_list|)
decl_stmt|;
name|SVNErrorManager
operator|.
name|error
argument_list|(
name|err
argument_list|,
name|SVNLogType
operator|.
name|WC
argument_list|)
expr_stmt|;
block|}
name|absPath
operator|=
name|absPath
operator|.
name|substring
argument_list|(
name|reposRootPath
operator|.
name|length
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|absPath
operator|.
name|startsWith
argument_list|(
literal|"/"
argument_list|)
condition|)
block|{
name|absPath
operator|=
literal|"/"
operator|+
name|absPath
expr_stmt|;
block|}
return|return
name|absPath
return|;
block|}
specifier|protected
name|String
name|getPathRelativeToSession
parameter_list|(
name|SVNURL
name|url
parameter_list|,
name|SVNURL
name|sessionURL
parameter_list|,
name|SVNRepository
name|repos
parameter_list|)
throws|throws
name|SVNException
block|{
if|if
condition|(
name|sessionURL
operator|==
literal|null
condition|)
block|{
name|sessionURL
operator|=
name|repos
operator|.
name|getLocation
argument_list|()
expr_stmt|;
block|}
name|String
name|reposPath
init|=
name|sessionURL
operator|.
name|getPath
argument_list|()
decl_stmt|;
name|String
name|absPath
init|=
name|url
operator|.
name|getPath
argument_list|()
decl_stmt|;
if|if
condition|(
operator|!
name|absPath
operator|.
name|startsWith
argument_list|(
name|reposPath
operator|+
literal|"/"
argument_list|)
operator|&&
operator|!
name|absPath
operator|.
name|equals
argument_list|(
name|reposPath
argument_list|)
condition|)
block|{
return|return
literal|null
return|;
block|}
name|absPath
operator|=
name|absPath
operator|.
name|substring
argument_list|(
name|reposPath
operator|.
name|length
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|absPath
operator|.
name|startsWith
argument_list|(
literal|"/"
argument_list|)
condition|)
block|{
name|absPath
operator|=
name|absPath
operator|.
name|substring
argument_list|(
literal|1
argument_list|)
expr_stmt|;
block|}
return|return
name|absPath
return|;
block|}
specifier|protected
name|SVNRepositoryLocation
index|[]
name|getLocations
parameter_list|(
name|SVNURL
name|url
parameter_list|,
name|File
name|path
parameter_list|,
name|SVNRepository
name|repository
parameter_list|,
name|SVNRevision
name|revision
parameter_list|,
name|SVNRevision
name|start
parameter_list|,
name|SVNRevision
name|end
parameter_list|)
throws|throws
name|SVNException
block|{
if|if
condition|(
operator|!
name|revision
operator|.
name|isValid
argument_list|()
operator|||
operator|!
name|start
operator|.
name|isValid
argument_list|()
condition|)
block|{
name|SVNErrorManager
operator|.
name|error
argument_list|(
name|SVNErrorMessage
operator|.
name|create
argument_list|(
name|SVNErrorCode
operator|.
name|CLIENT_BAD_REVISION
argument_list|)
argument_list|,
name|SVNLogType
operator|.
name|DEFAULT
argument_list|)
expr_stmt|;
block|}
name|long
name|pegRevisionNumber
init|=
operator|-
literal|1
decl_stmt|;
name|long
name|startRevisionNumber
decl_stmt|;
name|long
name|endRevisionNumber
decl_stmt|;
name|long
name|youngestRevNumber
index|[]
init|=
block|{
name|SVNRepository
operator|.
name|INVALID_REVISION
block|}
decl_stmt|;
if|if
condition|(
name|path
operator|!=
literal|null
condition|)
block|{
name|SVNWCAccess
name|wcAccess
init|=
name|SVNWCAccess
operator|.
name|newInstance
argument_list|(
literal|null
argument_list|)
decl_stmt|;
try|try
block|{
name|wcAccess
operator|.
name|openAnchor
argument_list|(
name|path
argument_list|,
literal|false
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|SVNEntry
name|entry
init|=
name|wcAccess
operator|.
name|getVersionedEntry
argument_list|(
name|path
argument_list|,
literal|false
argument_list|)
decl_stmt|;
if|if
condition|(
name|entry
operator|.
name|getCopyFromURL
argument_list|()
operator|!=
literal|null
operator|&&
name|revision
operator|==
name|SVNRevision
operator|.
name|WORKING
condition|)
block|{
name|url
operator|=
name|entry
operator|.
name|getCopyFromSVNURL
argument_list|()
expr_stmt|;
name|pegRevisionNumber
operator|=
name|entry
operator|.
name|getCopyFromRevision
argument_list|()
expr_stmt|;
if|if
condition|(
name|entry
operator|.
name|getURL
argument_list|()
operator|==
literal|null
operator|||
operator|!
name|entry
operator|.
name|getURL
argument_list|()
operator|.
name|equals
argument_list|(
name|entry
operator|.
name|getCopyFromURL
argument_list|()
argument_list|)
condition|)
block|{
name|repository
operator|=
literal|null
expr_stmt|;
block|}
block|}
if|else if
condition|(
name|entry
operator|.
name|getURL
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|url
operator|=
name|entry
operator|.
name|getSVNURL
argument_list|()
expr_stmt|;
block|}
else|else
block|{
name|SVNErrorMessage
name|err
init|=
name|SVNErrorMessage
operator|.
name|create
argument_list|(
name|SVNErrorCode
operator|.
name|ENTRY_MISSING_URL
argument_list|,
literal|"''{0}'' has no URL"
argument_list|,
name|path
argument_list|)
decl_stmt|;
name|SVNErrorManager
operator|.
name|error
argument_list|(
name|err
argument_list|,
name|SVNLogType
operator|.
name|WC
argument_list|)
expr_stmt|;
block|}
block|}
finally|finally
block|{
name|wcAccess
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
block|}
name|String
name|repoPath
init|=
literal|""
decl_stmt|;
name|Map
name|locations
init|=
literal|null
decl_stmt|;
name|SVNURL
name|rootURL
init|=
literal|null
decl_stmt|;
if|if
condition|(
name|repository
operator|==
literal|null
condition|)
block|{
name|repository
operator|=
name|createRepository
argument_list|(
name|url
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|,
literal|true
argument_list|)
expr_stmt|;
block|}
else|else
block|{
comment|// path relative to repository location.
name|repoPath
operator|=
name|SVNPathUtil
operator|.
name|getPathAsChild
argument_list|(
name|repository
operator|.
name|getLocation
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|,
name|url
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|repoPath
operator|==
literal|null
condition|)
block|{
name|repoPath
operator|=
literal|""
expr_stmt|;
block|}
block|}
if|if
condition|(
name|pegRevisionNumber
operator|<
literal|0
condition|)
block|{
name|pegRevisionNumber
operator|=
name|getRevisionNumber
argument_list|(
name|revision
argument_list|,
name|youngestRevNumber
argument_list|,
name|repository
argument_list|,
name|path
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|revision
operator|==
name|start
operator|&&
name|revision
operator|==
name|SVNRevision
operator|.
name|HEAD
condition|)
block|{
name|startRevisionNumber
operator|=
name|pegRevisionNumber
expr_stmt|;
block|}
else|else
block|{
name|startRevisionNumber
operator|=
name|getRevisionNumber
argument_list|(
name|start
argument_list|,
name|youngestRevNumber
argument_list|,
name|repository
argument_list|,
name|path
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
operator|!
name|end
operator|.
name|isValid
argument_list|()
condition|)
block|{
name|endRevisionNumber
operator|=
name|startRevisionNumber
expr_stmt|;
block|}
else|else
block|{
name|endRevisionNumber
operator|=
name|getRevisionNumber
argument_list|(
name|end
argument_list|,
name|youngestRevNumber
argument_list|,
name|repository
argument_list|,
name|path
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|endRevisionNumber
operator|==
name|pegRevisionNumber
operator|&&
name|startRevisionNumber
operator|==
name|pegRevisionNumber
condition|)
block|{
name|SVNRepositoryLocation
index|[]
name|result
init|=
operator|new
name|SVNRepositoryLocation
index|[
literal|2
index|]
decl_stmt|;
name|result
index|[
literal|0
index|]
operator|=
operator|new
name|SVNRepositoryLocation
argument_list|(
name|url
argument_list|,
name|startRevisionNumber
argument_list|)
expr_stmt|;
name|result
index|[
literal|1
index|]
operator|=
operator|new
name|SVNRepositoryLocation
argument_list|(
name|url
argument_list|,
name|endRevisionNumber
argument_list|)
expr_stmt|;
return|return
name|result
return|;
block|}
name|rootURL
operator|=
name|repository
operator|.
name|getRepositoryRoot
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|long
index|[]
name|revisionsRange
init|=
name|startRevisionNumber
operator|==
name|endRevisionNumber
condition|?
operator|new
name|long
index|[]
block|{
name|startRevisionNumber
block|}
else|:
operator|new
name|long
index|[]
block|{
name|startRevisionNumber
block|,
name|endRevisionNumber
block|}
decl_stmt|;
try|try
block|{
name|locations
operator|=
name|repository
operator|.
name|getLocations
argument_list|(
name|repoPath
argument_list|,
operator|(
name|Map
operator|)
literal|null
argument_list|,
name|pegRevisionNumber
argument_list|,
name|revisionsRange
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|SVNException
name|e
parameter_list|)
block|{
if|if
condition|(
name|e
operator|.
name|getErrorMessage
argument_list|()
operator|!=
literal|null
operator|&&
name|e
operator|.
name|getErrorMessage
argument_list|()
operator|.
name|getErrorCode
argument_list|()
operator|==
name|SVNErrorCode
operator|.
name|RA_NOT_IMPLEMENTED
condition|)
block|{
name|locations
operator|=
name|getLocations10
argument_list|(
name|repository
argument_list|,
name|pegRevisionNumber
argument_list|,
name|startRevisionNumber
argument_list|,
name|endRevisionNumber
argument_list|)
expr_stmt|;
block|}
else|else
block|{
throw|throw
name|e
throw|;
block|}
block|}
comment|// try to get locations with 'log' method.
name|SVNLocationEntry
name|startPath
init|=
operator|(
name|SVNLocationEntry
operator|)
name|locations
operator|.
name|get
argument_list|(
operator|new
name|Long
argument_list|(
name|startRevisionNumber
argument_list|)
argument_list|)
decl_stmt|;
name|SVNLocationEntry
name|endPath
init|=
operator|(
name|SVNLocationEntry
operator|)
name|locations
operator|.
name|get
argument_list|(
operator|new
name|Long
argument_list|(
name|endRevisionNumber
argument_list|)
argument_list|)
decl_stmt|;
if|if
condition|(
name|startPath
operator|==
literal|null
condition|)
block|{
name|Object
name|source
init|=
name|path
operator|!=
literal|null
condition|?
operator|(
name|Object
operator|)
name|path
else|:
operator|(
name|Object
operator|)
name|url
decl_stmt|;
name|SVNErrorMessage
name|err
init|=
name|SVNErrorMessage
operator|.
name|create
argument_list|(
name|SVNErrorCode
operator|.
name|CLIENT_UNRELATED_RESOURCES
argument_list|,
literal|"Unable to find repository location for ''{0}'' in revision ''{1}''"
argument_list|,
operator|new
name|Object
index|[]
block|{
name|source
block|,
operator|new
name|Long
argument_list|(
name|startRevisionNumber
argument_list|)
block|}
argument_list|)
decl_stmt|;
name|SVNErrorManager
operator|.
name|error
argument_list|(
name|err
argument_list|,
name|SVNLogType
operator|.
name|WC
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|endPath
operator|==
literal|null
condition|)
block|{
name|Object
name|source
init|=
name|path
operator|!=
literal|null
condition|?
operator|(
name|Object
operator|)
name|path
else|:
operator|(
name|Object
operator|)
name|url
decl_stmt|;
name|SVNErrorMessage
name|err
init|=
name|SVNErrorMessage
operator|.
name|create
argument_list|(
name|SVNErrorCode
operator|.
name|CLIENT_UNRELATED_RESOURCES
argument_list|,
literal|"The location for ''{0}'' for revision {1} does not exist in the "
operator|+
literal|"repository or refers to an unrelated object"
argument_list|,
operator|new
name|Object
index|[]
block|{
name|source
block|,
operator|new
name|Long
argument_list|(
name|endRevisionNumber
argument_list|)
block|}
argument_list|)
decl_stmt|;
name|SVNErrorManager
operator|.
name|error
argument_list|(
name|err
argument_list|,
name|SVNLogType
operator|.
name|WC
argument_list|)
expr_stmt|;
block|}
name|SVNRepositoryLocation
index|[]
name|result
init|=
operator|new
name|SVNRepositoryLocation
index|[
literal|2
index|]
decl_stmt|;
name|SVNURL
name|startURL
init|=
name|SVNURL
operator|.
name|parseURIEncoded
argument_list|(
name|SVNPathUtil
operator|.
name|append
argument_list|(
name|rootURL
operator|.
name|toString
argument_list|()
argument_list|,
name|SVNEncodingUtil
operator|.
name|uriEncode
argument_list|(
name|startPath
operator|.
name|getPath
argument_list|()
argument_list|)
argument_list|)
argument_list|)
decl_stmt|;
name|result
index|[
literal|0
index|]
operator|=
operator|new
name|SVNRepositoryLocation
argument_list|(
name|startURL
argument_list|,
name|startRevisionNumber
argument_list|)
expr_stmt|;
if|if
condition|(
name|end
operator|.
name|isValid
argument_list|()
condition|)
block|{
name|SVNURL
name|endURL
init|=
name|SVNURL
operator|.
name|parseURIEncoded
argument_list|(
name|SVNPathUtil
operator|.
name|append
argument_list|(
name|rootURL
operator|.
name|toString
argument_list|()
argument_list|,
name|SVNEncodingUtil
operator|.
name|uriEncode
argument_list|(
name|endPath
operator|.
name|getPath
argument_list|()
argument_list|)
argument_list|)
argument_list|)
decl_stmt|;
name|result
index|[
literal|1
index|]
operator|=
operator|new
name|SVNRepositoryLocation
argument_list|(
name|endURL
argument_list|,
name|endRevisionNumber
argument_list|)
expr_stmt|;
block|}
return|return
name|result
return|;
block|}
specifier|private
name|Map
name|getLocations10
parameter_list|(
name|SVNRepository
name|repos
parameter_list|,
specifier|final
name|long
name|pegRevision
parameter_list|,
specifier|final
name|long
name|startRevision
parameter_list|,
specifier|final
name|long
name|endRevision
parameter_list|)
throws|throws
name|SVNException
block|{
specifier|final
name|String
name|path
init|=
name|repos
operator|.
name|getRepositoryPath
argument_list|(
literal|""
argument_list|)
decl_stmt|;
specifier|final
name|SVNNodeKind
name|kind
init|=
name|repos
operator|.
name|checkPath
argument_list|(
literal|""
argument_list|,
name|pegRevision
argument_list|)
decl_stmt|;
if|if
condition|(
name|kind
operator|==
name|SVNNodeKind
operator|.
name|NONE
condition|)
block|{
name|SVNErrorMessage
name|err
init|=
name|SVNErrorMessage
operator|.
name|create
argument_list|(
name|SVNErrorCode
operator|.
name|FS_NOT_FOUND
argument_list|,
literal|"path ''{0}'' doesn't exist at revision {1}"
argument_list|,
operator|new
name|Object
index|[]
block|{
name|path
block|,
operator|new
name|Long
argument_list|(
name|pegRevision
argument_list|)
block|}
argument_list|)
decl_stmt|;
name|SVNErrorManager
operator|.
name|error
argument_list|(
name|err
argument_list|,
name|SVNLogType
operator|.
name|WC
argument_list|)
expr_stmt|;
block|}
name|long
name|logStart
init|=
name|pegRevision
decl_stmt|;
name|logStart
operator|=
name|Math
operator|.
name|max
argument_list|(
name|startRevision
argument_list|,
name|logStart
argument_list|)
expr_stmt|;
name|logStart
operator|=
name|Math
operator|.
name|max
argument_list|(
name|endRevision
argument_list|,
name|logStart
argument_list|)
expr_stmt|;
name|long
name|logEnd
init|=
name|pegRevision
decl_stmt|;
name|logStart
operator|=
name|Math
operator|.
name|min
argument_list|(
name|startRevision
argument_list|,
name|logStart
argument_list|)
expr_stmt|;
name|logStart
operator|=
name|Math
operator|.
name|min
argument_list|(
name|endRevision
argument_list|,
name|logStart
argument_list|)
expr_stmt|;
name|LocationsLogEntryHandler
name|handler
init|=
operator|new
name|LocationsLogEntryHandler
argument_list|(
name|path
argument_list|,
name|startRevision
argument_list|,
name|endRevision
argument_list|,
name|pegRevision
argument_list|,
name|kind
argument_list|,
name|getEventDispatcher
argument_list|()
argument_list|)
decl_stmt|;
name|repos
operator|.
name|log
argument_list|(
operator|new
name|String
index|[]
block|{
literal|""
block|}
argument_list|,
name|logStart
argument_list|,
name|logEnd
argument_list|,
literal|true
argument_list|,
literal|false
argument_list|,
name|handler
argument_list|)
expr_stmt|;
name|String
name|pegPath
init|=
name|handler
operator|.
name|myPegPath
operator|==
literal|null
condition|?
name|handler
operator|.
name|myCurrentPath
else|:
name|handler
operator|.
name|myPegPath
decl_stmt|;
name|String
name|startPath
init|=
name|handler
operator|.
name|myStartPath
operator|==
literal|null
condition|?
name|handler
operator|.
name|myCurrentPath
else|:
name|handler
operator|.
name|myStartPath
decl_stmt|;
name|String
name|endPath
init|=
name|handler
operator|.
name|myEndPath
operator|==
literal|null
condition|?
name|handler
operator|.
name|myCurrentPath
else|:
name|handler
operator|.
name|myEndPath
decl_stmt|;
if|if
condition|(
name|pegPath
operator|==
literal|null
condition|)
block|{
name|SVNErrorMessage
name|err
init|=
name|SVNErrorMessage
operator|.
name|create
argument_list|(
name|SVNErrorCode
operator|.
name|FS_NOT_FOUND
argument_list|,
literal|"path ''{0}'' in revision {1} is an unrelated object"
argument_list|,
operator|new
name|Object
index|[]
block|{
name|path
block|,
operator|new
name|Long
argument_list|(
name|logStart
argument_list|)
block|}
argument_list|)
decl_stmt|;
name|SVNErrorManager
operator|.
name|error
argument_list|(
name|err
argument_list|,
name|SVNLogType
operator|.
name|WC
argument_list|)
expr_stmt|;
block|}
name|Map
name|result
init|=
operator|new
name|SVNHashMap
argument_list|()
decl_stmt|;
name|result
operator|.
name|put
argument_list|(
operator|new
name|Long
argument_list|(
name|startRevision
argument_list|)
argument_list|,
operator|new
name|SVNLocationEntry
argument_list|(
operator|-
literal|1
argument_list|,
name|startPath
argument_list|)
argument_list|)
expr_stmt|;
name|result
operator|.
name|put
argument_list|(
operator|new
name|Long
argument_list|(
name|endRevision
argument_list|)
argument_list|,
operator|new
name|SVNLocationEntry
argument_list|(
operator|-
literal|1
argument_list|,
name|endPath
argument_list|)
argument_list|)
expr_stmt|;
return|return
name|result
return|;
block|}
specifier|private
specifier|static
name|String
name|getPreviousLogPath
parameter_list|(
name|String
name|path
parameter_list|,
name|SVNLogEntry
name|logEntry
parameter_list|,
name|SVNNodeKind
name|kind
parameter_list|)
throws|throws
name|SVNException
block|{
name|String
name|prevPath
init|=
literal|null
decl_stmt|;
name|SVNLogEntryPath
name|logPath
init|=
operator|(
name|SVNLogEntryPath
operator|)
name|logEntry
operator|.
name|getChangedPaths
argument_list|()
operator|.
name|get
argument_list|(
name|path
argument_list|)
decl_stmt|;
if|if
condition|(
name|logPath
operator|!=
literal|null
condition|)
block|{
if|if
condition|(
name|logPath
operator|.
name|getType
argument_list|()
operator|!=
name|SVNLogEntryPath
operator|.
name|TYPE_ADDED
operator|&&
name|logPath
operator|.
name|getType
argument_list|()
operator|!=
name|SVNLogEntryPath
operator|.
name|TYPE_REPLACED
condition|)
block|{
return|return
name|logPath
operator|.
name|getPath
argument_list|()
return|;
block|}
if|if
condition|(
name|logPath
operator|.
name|getCopyPath
argument_list|()
operator|!=
literal|null
condition|)
block|{
return|return
name|logPath
operator|.
name|getCopyPath
argument_list|()
return|;
block|}
return|return
literal|null
return|;
block|}
if|else if
condition|(
operator|!
name|logEntry
operator|.
name|getChangedPaths
argument_list|()
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|Map
name|sortedMap
init|=
operator|new
name|SVNHashMap
argument_list|()
decl_stmt|;
name|sortedMap
operator|.
name|putAll
argument_list|(
name|logEntry
operator|.
name|getChangedPaths
argument_list|()
argument_list|)
expr_stmt|;
name|List
name|pathsList
init|=
operator|new
name|ArrayList
argument_list|(
name|sortedMap
operator|.
name|keySet
argument_list|()
argument_list|)
decl_stmt|;
name|Collections
operator|.
name|sort
argument_list|(
name|pathsList
argument_list|,
name|SVNPathUtil
operator|.
name|PATH_COMPARATOR
argument_list|)
expr_stmt|;
name|Collections
operator|.
name|reverse
argument_list|(
name|pathsList
argument_list|)
expr_stmt|;
for|for
control|(
name|Iterator
name|paths
init|=
name|pathsList
operator|.
name|iterator
argument_list|()
init|;
name|paths
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|String
name|p
init|=
operator|(
name|String
operator|)
name|paths
operator|.
name|next
argument_list|()
decl_stmt|;
if|if
condition|(
name|path
operator|.
name|startsWith
argument_list|(
name|p
operator|+
literal|"/"
argument_list|)
condition|)
block|{
name|SVNLogEntryPath
name|lPath
init|=
operator|(
name|SVNLogEntryPath
operator|)
name|sortedMap
operator|.
name|get
argument_list|(
name|p
argument_list|)
decl_stmt|;
if|if
condition|(
name|lPath
operator|.
name|getCopyPath
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|prevPath
operator|=
name|SVNPathUtil
operator|.
name|append
argument_list|(
name|lPath
operator|.
name|getCopyPath
argument_list|()
argument_list|,
name|path
operator|.
name|substring
argument_list|(
name|p
operator|.
name|length
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
break|break;
block|}
block|}
block|}
block|}
if|if
condition|(
name|prevPath
operator|==
literal|null
condition|)
block|{
if|if
condition|(
name|kind
operator|==
name|SVNNodeKind
operator|.
name|DIR
condition|)
block|{
name|prevPath
operator|=
name|path
expr_stmt|;
block|}
else|else
block|{
name|SVNErrorMessage
name|err
init|=
name|SVNErrorMessage
operator|.
name|create
argument_list|(
name|SVNErrorCode
operator|.
name|CLIENT_UNRELATED_RESOURCES
argument_list|,
literal|"Missing changed-path information for ''{0}'' in revision {1}"
argument_list|,
operator|new
name|Object
index|[]
block|{
name|path
block|,
operator|new
name|Long
argument_list|(
name|logEntry
operator|.
name|getRevision
argument_list|()
argument_list|)
block|}
argument_list|)
decl_stmt|;
name|SVNErrorManager
operator|.
name|error
argument_list|(
name|err
argument_list|,
name|SVNLogType
operator|.
name|WC
argument_list|)
expr_stmt|;
block|}
block|}
return|return
name|prevPath
return|;
block|}
specifier|protected
name|SVNURL
name|getURL
parameter_list|(
name|File
name|path
parameter_list|)
throws|throws
name|SVNException
block|{
return|return
name|deriveLocation
argument_list|(
name|path
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|,
name|SVNRevision
operator|.
name|UNDEFINED
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|)
return|;
block|}
specifier|protected
name|SVNURL
name|deriveLocation
parameter_list|(
name|File
name|path
parameter_list|,
name|SVNURL
name|url
parameter_list|,
name|long
index|[]
name|pegRevisionNumber
parameter_list|,
name|SVNRevision
name|pegRevision
parameter_list|,
name|SVNRepository
name|repos
parameter_list|,
name|SVNWCAccess
name|access
parameter_list|)
throws|throws
name|SVNException
block|{
if|if
condition|(
name|path
operator|!=
literal|null
condition|)
block|{
name|SVNEntry
name|entry
init|=
literal|null
decl_stmt|;
if|if
condition|(
name|access
operator|!=
literal|null
condition|)
block|{
name|entry
operator|=
name|access
operator|.
name|getVersionedEntry
argument_list|(
name|path
argument_list|,
literal|false
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|SVNWCAccess
name|wcAccess
init|=
name|createWCAccess
argument_list|()
decl_stmt|;
try|try
block|{
name|wcAccess
operator|.
name|probeOpen
argument_list|(
name|path
argument_list|,
literal|false
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|entry
operator|=
name|wcAccess
operator|.
name|getVersionedEntry
argument_list|(
name|path
argument_list|,
literal|false
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
name|wcAccess
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
block|}
name|url
operator|=
name|getEntryLocation
argument_list|(
name|path
argument_list|,
name|entry
argument_list|,
name|pegRevisionNumber
argument_list|,
name|pegRevision
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|pegRevisionNumber
operator|!=
literal|null
operator|&&
name|pegRevisionNumber
operator|.
name|length
operator|>
literal|0
operator|&&
operator|!
name|SVNRevision
operator|.
name|isValidRevisionNumber
argument_list|(
name|pegRevisionNumber
index|[
literal|0
index|]
argument_list|)
condition|)
block|{
name|boolean
name|closeRepository
init|=
literal|false
decl_stmt|;
try|try
block|{
if|if
condition|(
name|repos
operator|==
literal|null
condition|)
block|{
name|repos
operator|=
name|createRepository
argument_list|(
name|url
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|closeRepository
operator|=
literal|true
expr_stmt|;
block|}
name|pegRevisionNumber
index|[
literal|0
index|]
operator|=
name|getRevisionNumber
argument_list|(
name|pegRevision
argument_list|,
literal|null
argument_list|,
name|repos
argument_list|,
name|path
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
if|if
condition|(
name|closeRepository
condition|)
block|{
name|repos
operator|.
name|closeSession
argument_list|()
expr_stmt|;
block|}
block|}
block|}
return|return
name|url
return|;
block|}
specifier|protected
name|SVNURL
name|getEntryLocation
parameter_list|(
name|File
name|path
parameter_list|,
name|SVNEntry
name|entry
parameter_list|,
name|long
index|[]
name|revNum
parameter_list|,
name|SVNRevision
name|pegRevision
parameter_list|)
throws|throws
name|SVNException
block|{
name|SVNURL
name|url
init|=
literal|null
decl_stmt|;
if|if
condition|(
name|entry
operator|.
name|getCopyFromURL
argument_list|()
operator|!=
literal|null
operator|&&
name|pegRevision
operator|==
name|SVNRevision
operator|.
name|WORKING
condition|)
block|{
name|url
operator|=
name|entry
operator|.
name|getCopyFromSVNURL
argument_list|()
expr_stmt|;
if|if
condition|(
name|revNum
operator|!=
literal|null
operator|&&
name|revNum
operator|.
name|length
operator|>
literal|0
condition|)
block|{
name|revNum
index|[
literal|0
index|]
operator|=
name|entry
operator|.
name|getCopyFromRevision
argument_list|()
expr_stmt|;
block|}
block|}
if|else if
condition|(
name|entry
operator|.
name|getURL
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|url
operator|=
name|entry
operator|.
name|getSVNURL
argument_list|()
expr_stmt|;
if|if
condition|(
name|revNum
operator|!=
literal|null
operator|&&
name|revNum
operator|.
name|length
operator|>
literal|0
condition|)
block|{
name|revNum
index|[
literal|0
index|]
operator|=
name|entry
operator|.
name|getRevision
argument_list|()
expr_stmt|;
block|}
block|}
else|else
block|{
name|SVNErrorMessage
name|err
init|=
name|SVNErrorMessage
operator|.
name|create
argument_list|(
name|SVNErrorCode
operator|.
name|ENTRY_MISSING_URL
argument_list|,
literal|"Entry for ''{0}'' has no URL"
argument_list|,
name|path
argument_list|)
decl_stmt|;
name|SVNErrorManager
operator|.
name|error
argument_list|(
name|err
argument_list|,
name|SVNLogType
operator|.
name|WC
argument_list|)
expr_stmt|;
block|}
return|return
name|url
return|;
block|}
specifier|protected
name|SVNURL
name|ensureSessionURL
parameter_list|(
name|SVNRepository
name|repository
parameter_list|,
name|SVNURL
name|url
parameter_list|)
throws|throws
name|SVNException
block|{
name|SVNURL
name|oldURL
init|=
name|repository
operator|.
name|getLocation
argument_list|()
decl_stmt|;
if|if
condition|(
name|url
operator|==
literal|null
condition|)
block|{
name|url
operator|=
name|repository
operator|.
name|getRepositoryRoot
argument_list|(
literal|true
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
operator|!
name|url
operator|.
name|equals
argument_list|(
name|oldURL
argument_list|)
condition|)
block|{
name|repository
operator|.
name|setLocation
argument_list|(
name|url
argument_list|,
literal|false
argument_list|)
expr_stmt|;
return|return
name|oldURL
return|;
block|}
return|return
literal|null
return|;
block|}
specifier|protected
name|int
name|getLevelsToLockFromDepth
parameter_list|(
name|SVNDepth
name|depth
parameter_list|)
block|{
return|return
name|depth
operator|==
name|SVNDepth
operator|.
name|EMPTY
operator|||
name|depth
operator|==
name|SVNDepth
operator|.
name|FILES
condition|?
literal|0
else|:
operator|(
name|depth
operator|==
name|SVNDepth
operator|.
name|IMMEDIATES
condition|?
literal|1
else|:
name|SVNWCAccess
operator|.
name|INFINITE_DEPTH
operator|)
return|;
block|}
specifier|protected
name|void
name|setCommitItemAccess
parameter_list|(
name|SVNCommitItem
name|item
parameter_list|,
name|SVNWCAccess
name|access
parameter_list|)
block|{
name|item
operator|.
name|setWCAccess
argument_list|(
name|access
argument_list|)
expr_stmt|;
block|}
specifier|protected
name|void
name|setCommitItemProperty
parameter_list|(
name|SVNCommitItem
name|item
parameter_list|,
name|String
name|name
parameter_list|,
name|SVNPropertyValue
name|value
parameter_list|)
block|{
name|item
operator|.
name|setProperty
argument_list|(
name|name
argument_list|,
name|value
argument_list|)
expr_stmt|;
block|}
specifier|protected
name|void
name|setCommitItemFlags
parameter_list|(
name|SVNCommitItem
name|item
parameter_list|,
name|boolean
name|contentModified
parameter_list|,
name|boolean
name|propertiesModified
parameter_list|)
block|{
name|item
operator|.
name|setContentsModified
argument_list|(
name|contentModified
argument_list|)
expr_stmt|;
name|item
operator|.
name|setPropertiesModified
argument_list|(
name|propertiesModified
argument_list|)
expr_stmt|;
block|}
specifier|private
specifier|static
specifier|final
class|class
name|LocationsLogEntryHandler
implements|implements
name|ISVNLogEntryHandler
block|{
specifier|private
name|String
name|myCurrentPath
init|=
literal|null
decl_stmt|;
specifier|private
name|String
name|myStartPath
init|=
literal|null
decl_stmt|;
specifier|private
name|String
name|myEndPath
init|=
literal|null
decl_stmt|;
specifier|private
name|String
name|myPegPath
init|=
literal|null
decl_stmt|;
specifier|private
name|long
name|myStartRevision
decl_stmt|;
specifier|private
name|long
name|myEndRevision
decl_stmt|;
specifier|private
name|long
name|myPegRevision
decl_stmt|;
specifier|private
name|SVNNodeKind
name|myKind
decl_stmt|;
specifier|private
name|ISVNEventHandler
name|myEventHandler
decl_stmt|;
specifier|private
name|LocationsLogEntryHandler
parameter_list|(
name|String
name|path
parameter_list|,
name|long
name|startRevision
parameter_list|,
name|long
name|endRevision
parameter_list|,
name|long
name|pegRevision
parameter_list|,
name|SVNNodeKind
name|kind
parameter_list|,
name|ISVNEventHandler
name|eventHandler
parameter_list|)
block|{
name|myCurrentPath
operator|=
name|path
expr_stmt|;
name|myStartRevision
operator|=
name|startRevision
expr_stmt|;
name|myEndRevision
operator|=
name|endRevision
expr_stmt|;
name|myPegRevision
operator|=
name|pegRevision
expr_stmt|;
name|myEventHandler
operator|=
name|eventHandler
expr_stmt|;
name|myKind
operator|=
name|kind
expr_stmt|;
block|}
specifier|public
name|void
name|handleLogEntry
parameter_list|(
name|SVNLogEntry
name|logEntry
parameter_list|)
throws|throws
name|SVNException
block|{
if|if
condition|(
name|myEventHandler
operator|!=
literal|null
condition|)
block|{
name|myEventHandler
operator|.
name|checkCancelled
argument_list|()
expr_stmt|;
block|}
if|if
condition|(
name|logEntry
operator|.
name|getChangedPaths
argument_list|()
operator|==
literal|null
condition|)
block|{
return|return;
block|}
if|if
condition|(
name|myCurrentPath
operator|==
literal|null
condition|)
block|{
return|return;
block|}
if|if
condition|(
name|myStartPath
operator|==
literal|null
operator|&&
name|logEntry
operator|.
name|getRevision
argument_list|()
operator|<=
name|myStartRevision
condition|)
block|{
name|myStartPath
operator|=
name|myCurrentPath
expr_stmt|;
block|}
if|if
condition|(
name|myEndPath
operator|==
literal|null
operator|&&
name|logEntry
operator|.
name|getRevision
argument_list|()
operator|<=
name|myEndRevision
condition|)
block|{
name|myEndPath
operator|=
name|myCurrentPath
expr_stmt|;
block|}
if|if
condition|(
name|myPegPath
operator|==
literal|null
operator|&&
name|logEntry
operator|.
name|getRevision
argument_list|()
operator|<=
name|myPegRevision
condition|)
block|{
name|myPegPath
operator|=
name|myCurrentPath
expr_stmt|;
block|}
name|myCurrentPath
operator|=
name|getPreviousLogPath
argument_list|(
name|myCurrentPath
argument_list|,
name|logEntry
argument_list|,
name|myKind
argument_list|)
expr_stmt|;
block|}
block|}
specifier|protected
specifier|static
class|class
name|RepositoryReference
block|{
specifier|public
name|RepositoryReference
parameter_list|(
name|String
name|url
parameter_list|,
name|long
name|rev
parameter_list|)
block|{
name|URL
operator|=
name|url
expr_stmt|;
name|Revision
operator|=
name|rev
expr_stmt|;
block|}
specifier|public
name|String
name|URL
decl_stmt|;
specifier|public
name|long
name|Revision
decl_stmt|;
block|}
specifier|protected
specifier|static
class|class
name|SVNRepositoryLocation
block|{
specifier|private
name|SVNURL
name|myURL
decl_stmt|;
specifier|private
name|long
name|myRevision
decl_stmt|;
specifier|public
name|SVNRepositoryLocation
parameter_list|(
name|SVNURL
name|url
parameter_list|,
name|long
name|rev
parameter_list|)
block|{
name|myURL
operator|=
name|url
expr_stmt|;
name|myRevision
operator|=
name|rev
expr_stmt|;
block|}
specifier|public
name|long
name|getRevisionNumber
parameter_list|()
block|{
return|return
name|myRevision
return|;
block|}
specifier|public
name|SVNURL
name|getURL
parameter_list|()
block|{
return|return
name|myURL
return|;
block|}
block|}
block|}
end_class

end_unit

