begin_unit|revision:1.0.0;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * ====================================================================  * Copyright (c) 2004-2010 TMate Software Ltd.  All rights reserved.  *  * This software is licensed as described in the file COPYING, which  * you should have received as part of this distribution.  The terms  * are also available at http://svnkit.com/license.html  * If newer versions of this license are posted there, you may use a  * newer version instead, at your option.  * ====================================================================  */
end_comment

begin_package
package|package
name|org
operator|.
name|exist
operator|.
name|versioning
operator|.
name|svn
operator|.
name|wc
package|;
end_package

begin_comment
comment|/**  * The<b>SVNEventAction</b> class is used to describe an action   * which generated an<b>SVNEvent</b> object.   *<p>  * Each operation invoked by   * a do*() method of an<b>SVN</b>*<b>Client</b> class consists of   * several actions that can be considered as operation steps. For example,        * an update operation receives changes for files, adds new ones, deletes  * another ones and so on. And for every such action (for every file  * updated, deleted, added, etc.) the   * {@link SVNUpdateClient#doUpdate(java.io.File, SVNRevision, org.tmatesoft.svn.core.SVNDepth, boolean, boolean) doUpdate()}  * method generates an<b>SVNEvent</b> objects which contains information  * on the type of this action that can be retrieved simply calling  * the<b>SVNEvent</b>'s {@link SVNEvent#getAction() getAction()} method:  *<pre class="javacode">  *<span class="javakeyword">import</span> org.tmatesoft.svn.core.wc.SVNEvent;  *<span class="javakeyword">import</span> org.tmatesoft.svn.core.wc.SVNEventAction;  * ...  *     *   SVNEventAction action = event.getAction();  *<span class="javacomment">//parse the action according to the type of</span>   *<span class="javacomment">//operation and your needs</span>  *<span class="javakeyword">if</span> (action == SVNEventAction.UPDATE_UPDATE){  *       ...  *   }  *   ...</pre>  *<p>  *<b>SVNEventAction</b> is just a set of predefined constant fields of  * the same type. Each constant is applicable only to a certain type  * of operation - for example those constants that names start with the   *<i>UPDATE_</i> prefix are relevant only for update related operations  * (update, checkout, switch, etc.).   *    * @version 1.3  * @author  TMate Software Ltd.  * @since   1.2  * @see     SVNEvent  * @see     ISVNEventHandler  * @see<a target="_top" href="http://svnkit.com/kb/examples/">Examples</a>  */
end_comment

begin_class
specifier|public
class|class
name|SVNEventAction
block|{
specifier|private
name|int
name|myID
decl_stmt|;
specifier|private
name|String
name|myName
decl_stmt|;
specifier|private
name|SVNEventAction
parameter_list|(
name|int
name|id
parameter_list|,
name|String
name|name
parameter_list|)
block|{
name|myID
operator|=
name|id
expr_stmt|;
name|myName
operator|=
name|name
expr_stmt|;
block|}
comment|/**      * Returns this object's identifier.      * Each constant field of the<b>SVNEventAction</b> class is also an       *<b>SVNEventAction</b> object with its own id.       *       * @return id of this object       */
specifier|public
name|int
name|getID
parameter_list|()
block|{
return|return
name|myID
return|;
block|}
comment|/**      * Returns a string representation of this object.       * As a matter of fact this is a string representation of this       * object's id.      *       * @return a string representing this object      */
specifier|public
name|String
name|toString
parameter_list|()
block|{
return|return
name|myName
operator|==
literal|null
condition|?
name|Integer
operator|.
name|toString
argument_list|(
name|myID
argument_list|)
else|:
name|myName
return|;
block|}
comment|/**      * Reserved for future purposes.      */
specifier|public
specifier|static
specifier|final
name|SVNEventAction
name|PROGRESS
init|=
operator|new
name|SVNEventAction
argument_list|(
operator|-
literal|1
argument_list|,
literal|"progress"
argument_list|)
decl_stmt|;
comment|/**      * Denotes that a new item is scheduled for addition. Generated      * by the {@link SVNWCClient#doAdd(java.io.File, boolean, boolean, boolean, org.tmatesoft.svn.core.SVNDepth, boolean, boolean) doAdd()}       * method.       */
specifier|public
specifier|static
specifier|final
name|SVNEventAction
name|ADD
init|=
operator|new
name|SVNEventAction
argument_list|(
literal|0
argument_list|,
literal|"add"
argument_list|)
decl_stmt|;
comment|/**      * Denotes that the item is copied with history.       *       * @see SVNCopyClient      */
specifier|public
specifier|static
specifier|final
name|SVNEventAction
name|COPY
init|=
operator|new
name|SVNEventAction
argument_list|(
literal|1
argument_list|,
literal|"copy"
argument_list|)
decl_stmt|;
comment|/**      * Denotes that the item is scheduled for deletion. Generated      * by the {@link SVNWCClient#doDelete(java.io.File, boolean, boolean) doDelete()}       * method.       */
specifier|public
specifier|static
specifier|final
name|SVNEventAction
name|DELETE
init|=
operator|new
name|SVNEventAction
argument_list|(
literal|2
argument_list|,
literal|"delete"
argument_list|)
decl_stmt|;
comment|/**      * Denotes that the deleted item is restored (prior to be updated).      */
specifier|public
specifier|static
specifier|final
name|SVNEventAction
name|RESTORE
init|=
operator|new
name|SVNEventAction
argument_list|(
literal|3
argument_list|,
literal|"restore"
argument_list|)
decl_stmt|;
comment|/**      * Denotes that all local changes to the item were reverted. Generated by       * the {@link SVNWCClient#doRevert(java.io.File[], org.tmatesoft.svn.core.SVNDepth, java.util.Collection) doRevert()}       * method.      */
specifier|public
specifier|static
specifier|final
name|SVNEventAction
name|REVERT
init|=
operator|new
name|SVNEventAction
argument_list|(
literal|4
argument_list|,
literal|"revert"
argument_list|)
decl_stmt|;
comment|/**      * Denotes that a revert operation failed. Generated by the      * {@link SVNWCClient#doRevert(java.io.File[], org.tmatesoft.svn.core.SVNDepth, java.util.Collection) doRevert()} method.      */
specifier|public
specifier|static
specifier|final
name|SVNEventAction
name|FAILED_REVERT
init|=
operator|new
name|SVNEventAction
argument_list|(
literal|5
argument_list|,
literal|"failed_revert"
argument_list|)
decl_stmt|;
comment|/**      * Denotes that the conflict on the item is resolved (the item is      * marked resolved). Such an event is generated by the      * {@link SVNWCClient#doResolve(java.io.File, org.tmatesoft.svn.core.SVNDepth, SVNConflictChoice) doResolve()} method.      */
specifier|public
specifier|static
specifier|final
name|SVNEventAction
name|RESOLVED
init|=
operator|new
name|SVNEventAction
argument_list|(
literal|6
argument_list|,
literal|"resolved"
argument_list|)
decl_stmt|;
comment|/**      * Denotes that the operation is skipped due to errors (inability to       * be performed, etc.).      */
specifier|public
specifier|static
specifier|final
name|SVNEventAction
name|SKIP
init|=
operator|new
name|SVNEventAction
argument_list|(
literal|7
argument_list|,
literal|"skip"
argument_list|)
decl_stmt|;
comment|/**      * In an update operation denotes that the item is deleted from      * the Working Copy (as it was deleted in the repository).      */
specifier|public
specifier|static
specifier|final
name|SVNEventAction
name|UPDATE_DELETE
init|=
operator|new
name|SVNEventAction
argument_list|(
literal|8
argument_list|,
literal|"update_delete"
argument_list|)
decl_stmt|;
comment|/**      * In an update operation denotes that the item is added to      * the Working Copy (as it was added in the repository).      */
specifier|public
specifier|static
specifier|final
name|SVNEventAction
name|UPDATE_ADD
init|=
operator|new
name|SVNEventAction
argument_list|(
literal|9
argument_list|,
literal|"update_add"
argument_list|)
decl_stmt|;
comment|/**      * In an update operation denotes that the item is modified (there       * are changes received from the repository).      *       */
specifier|public
specifier|static
specifier|final
name|SVNEventAction
name|UPDATE_UPDATE
init|=
operator|new
name|SVNEventAction
argument_list|(
literal|10
argument_list|,
literal|"update_update"
argument_list|)
decl_stmt|;
comment|/**      * In an update operation denotes that the item is not modified, but its children are.      *       */
specifier|public
specifier|static
specifier|final
name|SVNEventAction
name|UPDATE_NONE
init|=
operator|new
name|SVNEventAction
argument_list|(
literal|10
argument_list|,
literal|"update_none"
argument_list|)
decl_stmt|;
comment|/**      * In an update operation denotes that the operation itself is completed      * (for instance, in a console client can be used to print out the      * revision updated to).      */
specifier|public
specifier|static
specifier|final
name|SVNEventAction
name|UPDATE_COMPLETED
init|=
operator|new
name|SVNEventAction
argument_list|(
literal|11
argument_list|,
literal|"update_completed"
argument_list|)
decl_stmt|;
comment|/**      * In an update operation denotes that the item being updated is       * external.      */
specifier|public
specifier|static
specifier|final
name|SVNEventAction
name|UPDATE_EXTERNAL
init|=
operator|new
name|SVNEventAction
argument_list|(
literal|12
argument_list|,
literal|"update_external"
argument_list|)
decl_stmt|;
comment|/**      * In a remote status operation denotes that the operation itself is completed -       * used to get the latest repository revision against which the status was      * invoked.        */
specifier|public
specifier|static
specifier|final
name|SVNEventAction
name|STATUS_COMPLETED
init|=
operator|new
name|SVNEventAction
argument_list|(
literal|13
argument_list|,
literal|"status_completed"
argument_list|)
decl_stmt|;
comment|/**      * In a status operation denotes that the status is performed on an       * external item. To find out the item's current status use       * {@link SVNEvent#getContentsStatus() getContentsStatus()},       * {@link SVNEvent#getPropertiesStatus() getPropertiesStatus()}.      * The {@link SVNStatusType#STATUS_EXTERNAL} constant says only that the       * item belongs to externals definitions.       *       */
specifier|public
specifier|static
specifier|final
name|SVNEventAction
name|STATUS_EXTERNAL
init|=
operator|new
name|SVNEventAction
argument_list|(
literal|14
argument_list|,
literal|"status_external"
argument_list|)
decl_stmt|;
comment|/**      * In a commit operation denotes sending the item's modifications to the      * repository.      */
specifier|public
specifier|static
specifier|final
name|SVNEventAction
name|COMMIT_MODIFIED
init|=
operator|new
name|SVNEventAction
argument_list|(
literal|15
argument_list|,
literal|"commit_modified"
argument_list|)
decl_stmt|;
comment|/**      * In a commit operation denotes adding a new item to the repository.      */
specifier|public
specifier|static
specifier|final
name|SVNEventAction
name|COMMIT_ADDED
init|=
operator|new
name|SVNEventAction
argument_list|(
literal|16
argument_list|,
literal|"commit_added"
argument_list|)
decl_stmt|;
comment|/**      * In a commit operation denotes deleting the item from the      * repository.      */
specifier|public
specifier|static
specifier|final
name|SVNEventAction
name|COMMIT_DELETED
init|=
operator|new
name|SVNEventAction
argument_list|(
literal|17
argument_list|,
literal|"commit_deleted"
argument_list|)
decl_stmt|;
comment|/**      * In a commit operation denotes replacing (one item was deleted while       * another one with the same name was added) the item in the repository.       */
specifier|public
specifier|static
specifier|final
name|SVNEventAction
name|COMMIT_REPLACED
init|=
operator|new
name|SVNEventAction
argument_list|(
literal|18
argument_list|,
literal|"commit_replaced"
argument_list|)
decl_stmt|;
comment|/**      * In a commit operation denotes the final stage of the operation -       * sending all file data and finalizing the commit.      */
specifier|public
specifier|static
specifier|final
name|SVNEventAction
name|COMMIT_DELTA_SENT
init|=
operator|new
name|SVNEventAction
argument_list|(
literal|19
argument_list|,
literal|"commit_delta_sent"
argument_list|)
decl_stmt|;
comment|/**      * In a commit operation denotes that the operation itself is completed      * (for instance, in a console client can be used to print out the      * commited revsion).      */
specifier|public
specifier|static
specifier|final
name|SVNEventAction
name|COMMIT_COMPLETED
init|=
operator|new
name|SVNEventAction
argument_list|(
literal|32
argument_list|,
literal|"commit_completed"
argument_list|)
decl_stmt|;
comment|/**      * Denotes that file blaming is started.      */
specifier|public
specifier|static
specifier|final
name|SVNEventAction
name|ANNOTATE
init|=
operator|new
name|SVNEventAction
argument_list|(
literal|20
argument_list|,
literal|"annotate"
argument_list|)
decl_stmt|;
comment|/**      * Denotes that the file item is locked as a result of a locking       * operation. Generated by a<b>doLock()</b> method of {@link SVNWCClient}.      */
specifier|public
specifier|static
specifier|final
name|SVNEventAction
name|LOCKED
init|=
operator|new
name|SVNEventAction
argument_list|(
literal|21
argument_list|,
literal|"locked"
argument_list|)
decl_stmt|;
comment|/**      * Denotes that the file item is unlocked as a result of an unlocking       * operation. Generated by a<b>doUnlock()</b> method of {@link SVNWCClient}.      */
specifier|public
specifier|static
specifier|final
name|SVNEventAction
name|UNLOCKED
init|=
operator|new
name|SVNEventAction
argument_list|(
literal|22
argument_list|,
literal|"unlocked"
argument_list|)
decl_stmt|;
comment|/**      * Denotes that locking a file item failed. Generated by a<b>doLock()</b>       * method of {@link SVNWCClient}.      */
specifier|public
specifier|static
specifier|final
name|SVNEventAction
name|LOCK_FAILED
init|=
operator|new
name|SVNEventAction
argument_list|(
literal|23
argument_list|,
literal|"lock_failed"
argument_list|)
decl_stmt|;
comment|/**      * Denotes that unlocking a file item failed. Generated by a<b>doUnlock()</b>       * method of {@link SVNWCClient}.      */
specifier|public
specifier|static
specifier|final
name|SVNEventAction
name|UNLOCK_FAILED
init|=
operator|new
name|SVNEventAction
argument_list|(
literal|24
argument_list|,
literal|"unlock_failed"
argument_list|)
decl_stmt|;
comment|/**      * Denotes that the current format of the working copy administrative       * area is upgraded to a newer one.       */
specifier|public
specifier|static
specifier|final
name|SVNEventAction
name|UPGRADE
init|=
operator|new
name|SVNEventAction
argument_list|(
operator|-
literal|2
argument_list|,
literal|"wc_upgrade"
argument_list|)
decl_stmt|;
comment|/**      * Denotes that tried adding a path that already exists.      * @since 1.2.0, SVN 1.5.0      */
specifier|public
specifier|static
specifier|final
name|SVNEventAction
name|UPDATE_EXISTS
init|=
operator|new
name|SVNEventAction
argument_list|(
literal|25
argument_list|,
literal|"update_exists"
argument_list|)
decl_stmt|;
comment|/**      * Denotes that changelist name is set.      * @since 1.2.0, SVN 1.5.0      */
specifier|public
specifier|static
specifier|final
name|SVNEventAction
name|CHANGELIST_SET
init|=
operator|new
name|SVNEventAction
argument_list|(
literal|26
argument_list|,
literal|"changelist_set"
argument_list|)
decl_stmt|;
comment|/**      * Denotes that changelist name is cleared.      * @since 1.2.0, SVN 1.5.0      */
specifier|public
specifier|static
specifier|final
name|SVNEventAction
name|CHANGELIST_CLEAR
init|=
operator|new
name|SVNEventAction
argument_list|(
literal|27
argument_list|,
literal|"changelist_clear"
argument_list|)
decl_stmt|;
comment|/**      * Denotes that a path has moved from one changelist to another.      * @since 1.2.0, SVN 1.5.0      */
specifier|public
specifier|static
specifier|final
name|SVNEventAction
name|CHANGELIST_MOVED
init|=
operator|new
name|SVNEventAction
argument_list|(
literal|31
argument_list|,
literal|"changelist_moved"
argument_list|)
decl_stmt|;
comment|/**      * Denotes that a merge operation (to path) has begun. See {@link SVNEvent#getMergeRange()}.      * @since 1.2.0, SVN 1.5.0      */
specifier|public
specifier|static
specifier|final
name|SVNEventAction
name|MERGE_BEGIN
init|=
operator|new
name|SVNEventAction
argument_list|(
literal|28
argument_list|,
literal|"merge_begin"
argument_list|)
decl_stmt|;
comment|/**      * Denotes that a merge operation (to path) from a foreign repository has begun.      * See {@link SVNEvent#getMergeRange()}.      * @since 1.2.0, SVN 1.5.0      */
specifier|public
specifier|static
specifier|final
name|SVNEventAction
name|FOREIGN_MERGE_BEGIN
init|=
operator|new
name|SVNEventAction
argument_list|(
literal|29
argument_list|,
literal|"foreign_merge_begin"
argument_list|)
decl_stmt|;
comment|/**      * Denotes a replace notification.      * @since 1.2.0, SVN 1.5.0      */
specifier|public
specifier|static
specifier|final
name|SVNEventAction
name|UPDATE_REPLACE
init|=
operator|new
name|SVNEventAction
argument_list|(
literal|30
argument_list|,
literal|"update_replace"
argument_list|)
decl_stmt|;
comment|/**      * @since 1.3, SVN 1.6      */
specifier|public
specifier|static
specifier|final
name|SVNEventAction
name|PROPERTY_ADD
init|=
operator|new
name|SVNEventAction
argument_list|(
literal|31
argument_list|,
literal|"property_added"
argument_list|)
decl_stmt|;
comment|/**      * @since 1.3, SVN 1.6      */
specifier|public
specifier|static
specifier|final
name|SVNEventAction
name|PROPERTY_MODIFY
init|=
operator|new
name|SVNEventAction
argument_list|(
literal|32
argument_list|,
literal|"property_modified"
argument_list|)
decl_stmt|;
comment|/**      * @since 1.3, SVN 1.6      */
specifier|public
specifier|static
specifier|final
name|SVNEventAction
name|PROPERTY_DELETE
init|=
operator|new
name|SVNEventAction
argument_list|(
literal|33
argument_list|,
literal|"property_deleted"
argument_list|)
decl_stmt|;
comment|/**      * @since 1.3, SVN 1.6      */
specifier|public
specifier|static
specifier|final
name|SVNEventAction
name|PROPERTY_DELETE_NONEXISTENT
init|=
operator|new
name|SVNEventAction
argument_list|(
literal|34
argument_list|,
literal|"property_deleted_nonexistent"
argument_list|)
decl_stmt|;
comment|/**      * @since 1.3, SVN 1.6      */
specifier|public
specifier|static
specifier|final
name|SVNEventAction
name|REVPROPER_SET
init|=
operator|new
name|SVNEventAction
argument_list|(
literal|35
argument_list|,
literal|"revprop_set"
argument_list|)
decl_stmt|;
comment|/**      * @since 1.3, SVN 1.6      */
specifier|public
specifier|static
specifier|final
name|SVNEventAction
name|REVPROP_DELETE
init|=
operator|new
name|SVNEventAction
argument_list|(
literal|36
argument_list|,
literal|"revprop_deleted"
argument_list|)
decl_stmt|;
comment|/**      * @since 1.3, SVN 1.6      */
specifier|public
specifier|static
specifier|final
name|SVNEventAction
name|MERGE_COMPLETE
init|=
operator|new
name|SVNEventAction
argument_list|(
literal|37
argument_list|,
literal|"merge_completed"
argument_list|)
decl_stmt|;
comment|/**      * @since 1.3, SVN 1.6      */
specifier|public
specifier|static
specifier|final
name|SVNEventAction
name|TREE_CONFLICT
init|=
operator|new
name|SVNEventAction
argument_list|(
literal|38
argument_list|,
literal|"tree_conflict"
argument_list|)
decl_stmt|;
comment|/**      * @since 1.3, SVN 1.6      */
specifier|public
specifier|static
specifier|final
name|SVNEventAction
name|FAILED_EXTERNAL
init|=
operator|new
name|SVNEventAction
argument_list|(
literal|39
argument_list|,
literal|"failed_external"
argument_list|)
decl_stmt|;
block|}
end_class

end_unit

