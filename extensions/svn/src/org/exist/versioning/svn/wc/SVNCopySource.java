begin_unit|revision:1.0.0;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * ====================================================================  * Copyright (c) 2004-2010 TMate Software Ltd.  All rights reserved.  *  * This software is licensed as described in the file COPYING, which  * you should have received as part of this distribution.  The terms  * are also available at http://svnkit.com/license.html.  * If newer versions of this license are posted there, you may use a  * newer version instead, at your option.  * ====================================================================  */
end_comment

begin_package
package|package
name|org
operator|.
name|exist
operator|.
name|versioning
operator|.
name|svn
operator|.
name|wc
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|File
import|;
end_import

begin_import
import|import
name|org
operator|.
name|tmatesoft
operator|.
name|svn
operator|.
name|core
operator|.
name|SVNURL
import|;
end_import

begin_import
import|import
name|org
operator|.
name|tmatesoft
operator|.
name|svn
operator|.
name|core
operator|.
name|internal
operator|.
name|util
operator|.
name|SVNPathUtil
import|;
end_import

begin_import
import|import
name|org
operator|.
name|tmatesoft
operator|.
name|svn
operator|.
name|core
operator|.
name|wc
operator|.
name|SVNRevision
import|;
end_import

begin_comment
comment|/**  * The<b>SVNCopySource</b> class is used to provide copy source information in copy operations.  *   * @version 1.3  * @author  TMate Software Ltd.  * @since   1.2  */
end_comment

begin_class
specifier|public
class|class
name|SVNCopySource
block|{
specifier|private
name|SVNRevision
name|myPegRevision
decl_stmt|;
specifier|private
name|SVNRevision
name|myRevision
decl_stmt|;
specifier|private
name|SVNURL
name|myURL
decl_stmt|;
specifier|private
name|File
name|myPath
decl_stmt|;
specifier|private
name|boolean
name|myIsCopyContents
decl_stmt|;
comment|/**      * Creates a new<code>SVNCopySource</code> object.       *       * @param pegRevision peg revision where<code>path</code> is valid       * @param revision    revision of<code>path</code>      * @param path        working copy path      */
specifier|public
name|SVNCopySource
parameter_list|(
name|SVNRevision
name|pegRevision
parameter_list|,
name|SVNRevision
name|revision
parameter_list|,
name|File
name|path
parameter_list|)
block|{
name|myPegRevision
operator|=
name|pegRevision
expr_stmt|;
name|myRevision
operator|=
name|revision
expr_stmt|;
name|myPath
operator|=
name|path
operator|.
name|getAbsoluteFile
argument_list|()
expr_stmt|;
block|}
comment|/**      * Creates a new<code>SVNCopySource</code> object.      *       * @param pegRevision peg revision where<code>url</code> is valid       * @param revision    revision of<code>url</code>      * @param url         repository url      */
specifier|public
name|SVNCopySource
parameter_list|(
name|SVNRevision
name|pegRevision
parameter_list|,
name|SVNRevision
name|revision
parameter_list|,
name|SVNURL
name|url
parameter_list|)
block|{
name|myPegRevision
operator|=
name|pegRevision
expr_stmt|;
name|myRevision
operator|=
name|revision
expr_stmt|;
name|myURL
operator|=
name|url
expr_stmt|;
block|}
comment|/**      * Returns the working copy path.      * @return working copy path;<span class="javakeyword">null</span> if it's a url source.      */
specifier|public
name|File
name|getFile
parameter_list|()
block|{
return|return
name|myPath
return|;
block|}
comment|/**      * Returns the peg revision of the source.      * @return peg revision      */
specifier|public
name|SVNRevision
name|getPegRevision
parameter_list|()
block|{
return|return
name|myPegRevision
return|;
block|}
comment|/**      * Returns the revision of the source.       * @return  source revision      */
specifier|public
name|SVNRevision
name|getRevision
parameter_list|()
block|{
return|return
name|myRevision
return|;
block|}
comment|/**      * Returns the repository url of the source.      *       * @return repository url;<span class="javakeyword">null</span> if it's a local source.        */
specifier|public
name|SVNURL
name|getURL
parameter_list|()
block|{
return|return
name|myURL
return|;
block|}
comment|/**      * Tells if this copy source is url.      *       * @return<span class="javakeyword">true</span> if {@link #getURL()} returns non-<span class="javakeyword">null</span>;      *         otherwise<span class="javakeyword">false</span> ({@link #getFile() returns non-<span class="javakeyword">null</span>})        */
specifier|public
name|boolean
name|isURL
parameter_list|()
block|{
return|return
name|myURL
operator|!=
literal|null
return|;
block|}
comment|/**      * Returns the name of this copy source.      * @return copy source name      */
specifier|public
name|String
name|getName
parameter_list|()
block|{
if|if
condition|(
name|isURL
argument_list|()
condition|)
block|{
return|return
name|SVNPathUtil
operator|.
name|tail
argument_list|(
name|myURL
operator|.
name|getPath
argument_list|()
argument_list|)
return|;
block|}
return|return
name|myPath
operator|.
name|getName
argument_list|()
return|;
block|}
comment|/**      * Sets whether to expand this copy source to its contents or not.       *       * @param copyContents<span class="javakeyword">true</span> to expand; otherwise       *<span class="javakeyword">false</span>        * @see                  #isCopyContents()      */
specifier|public
name|void
name|setCopyContents
parameter_list|(
name|boolean
name|copyContents
parameter_list|)
block|{
name|myIsCopyContents
operator|=
name|copyContents
expr_stmt|;
block|}
comment|/**      * Tells whether the contents of this copy source should be copied rather than the copy source itself.      * This is relevant only for directory copy sources. If a user {@link #setCopyContents(boolean) specifies}       * to copy contents of a file he will get an {@link org.tmatesoft.svn.core.SVNException}. So, if this copy source represents a       * directory and if this method returns<span class="javakeyword">true</span>, children of this copy source       * directory will be copied to the target instead of the copy source.          *       * @return<span class="javakeyword">true</span> to expand copy source to children      */
specifier|public
name|boolean
name|isCopyContents
parameter_list|()
block|{
return|return
name|myIsCopyContents
return|;
block|}
block|}
end_class

end_unit

