begin_unit|revision:1.0.0;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * ====================================================================  * Copyright (c) 2004-2010 TMate Software Ltd.  All rights reserved.  *  * This software is licensed as described in the file COPYING, which  * you should have received as part of this distribution.  The terms  * are also available at http://svnkit.com/license.html  * If newer versions of this license are posted there, you may use a  * newer version instead, at your option.  * ====================================================================  */
end_comment

begin_package
package|package
name|org
operator|.
name|exist
operator|.
name|versioning
operator|.
name|svn
operator|.
name|wc
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|File
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|OutputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collection
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collections
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Iterator
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|LinkedHashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|LinkedList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Set
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|StringTokenizer
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|versioning
operator|.
name|svn
operator|.
name|internal
operator|.
name|wc
operator|.
name|SVNAmbientDepthFilterEditor
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|versioning
operator|.
name|svn
operator|.
name|internal
operator|.
name|wc
operator|.
name|SVNCancellableEditor
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|versioning
operator|.
name|svn
operator|.
name|internal
operator|.
name|wc
operator|.
name|SVNCancellableOutputStream
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|versioning
operator|.
name|svn
operator|.
name|internal
operator|.
name|wc
operator|.
name|SVNErrorManager
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|versioning
operator|.
name|svn
operator|.
name|internal
operator|.
name|wc
operator|.
name|SVNEventFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|versioning
operator|.
name|svn
operator|.
name|internal
operator|.
name|wc
operator|.
name|SVNExportEditor
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|versioning
operator|.
name|svn
operator|.
name|internal
operator|.
name|wc
operator|.
name|SVNExternal
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|versioning
operator|.
name|svn
operator|.
name|internal
operator|.
name|wc
operator|.
name|SVNFileType
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|versioning
operator|.
name|svn
operator|.
name|internal
operator|.
name|wc
operator|.
name|SVNFileUtil
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|versioning
operator|.
name|svn
operator|.
name|internal
operator|.
name|wc
operator|.
name|SVNPropertiesManager
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|versioning
operator|.
name|svn
operator|.
name|internal
operator|.
name|wc
operator|.
name|SVNWCManager
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|versioning
operator|.
name|svn
operator|.
name|internal
operator|.
name|wc
operator|.
name|admin
operator|.
name|SVNAdminArea
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|versioning
operator|.
name|svn
operator|.
name|internal
operator|.
name|wc
operator|.
name|admin
operator|.
name|SVNAdminArea16
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|versioning
operator|.
name|svn
operator|.
name|internal
operator|.
name|wc
operator|.
name|admin
operator|.
name|SVNAdminAreaFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|versioning
operator|.
name|svn
operator|.
name|internal
operator|.
name|wc
operator|.
name|admin
operator|.
name|SVNAdminAreaInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|versioning
operator|.
name|svn
operator|.
name|internal
operator|.
name|wc
operator|.
name|admin
operator|.
name|SVNEntry
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|versioning
operator|.
name|svn
operator|.
name|internal
operator|.
name|wc
operator|.
name|admin
operator|.
name|SVNReporter
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|versioning
operator|.
name|svn
operator|.
name|internal
operator|.
name|wc
operator|.
name|admin
operator|.
name|SVNTranslator
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|versioning
operator|.
name|svn
operator|.
name|internal
operator|.
name|wc
operator|.
name|admin
operator|.
name|SVNVersionedProperties
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|versioning
operator|.
name|svn
operator|.
name|internal
operator|.
name|wc
operator|.
name|admin
operator|.
name|SVNWCAccess
import|;
end_import

begin_import
import|import
name|org
operator|.
name|tmatesoft
operator|.
name|svn
operator|.
name|core
operator|.
name|SVNCancelException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|tmatesoft
operator|.
name|svn
operator|.
name|core
operator|.
name|SVNDepth
import|;
end_import

begin_import
import|import
name|org
operator|.
name|tmatesoft
operator|.
name|svn
operator|.
name|core
operator|.
name|SVNErrorCode
import|;
end_import

begin_import
import|import
name|org
operator|.
name|tmatesoft
operator|.
name|svn
operator|.
name|core
operator|.
name|SVNErrorMessage
import|;
end_import

begin_import
import|import
name|org
operator|.
name|tmatesoft
operator|.
name|svn
operator|.
name|core
operator|.
name|SVNException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|tmatesoft
operator|.
name|svn
operator|.
name|core
operator|.
name|SVNNodeKind
import|;
end_import

begin_import
import|import
name|org
operator|.
name|tmatesoft
operator|.
name|svn
operator|.
name|core
operator|.
name|SVNProperties
import|;
end_import

begin_import
import|import
name|org
operator|.
name|tmatesoft
operator|.
name|svn
operator|.
name|core
operator|.
name|SVNProperty
import|;
end_import

begin_import
import|import
name|org
operator|.
name|tmatesoft
operator|.
name|svn
operator|.
name|core
operator|.
name|SVNPropertyValue
import|;
end_import

begin_import
import|import
name|org
operator|.
name|tmatesoft
operator|.
name|svn
operator|.
name|core
operator|.
name|SVNURL
import|;
end_import

begin_import
import|import
name|org
operator|.
name|tmatesoft
operator|.
name|svn
operator|.
name|core
operator|.
name|auth
operator|.
name|ISVNAuthenticationManager
import|;
end_import

begin_import
import|import
name|org
operator|.
name|tmatesoft
operator|.
name|svn
operator|.
name|core
operator|.
name|internal
operator|.
name|util
operator|.
name|SVNDate
import|;
end_import

begin_import
import|import
name|org
operator|.
name|tmatesoft
operator|.
name|svn
operator|.
name|core
operator|.
name|internal
operator|.
name|util
operator|.
name|SVNEncodingUtil
import|;
end_import

begin_import
import|import
name|org
operator|.
name|tmatesoft
operator|.
name|svn
operator|.
name|core
operator|.
name|internal
operator|.
name|util
operator|.
name|SVNHashMap
import|;
end_import

begin_import
import|import
name|org
operator|.
name|tmatesoft
operator|.
name|svn
operator|.
name|core
operator|.
name|internal
operator|.
name|util
operator|.
name|SVNHashSet
import|;
end_import

begin_import
import|import
name|org
operator|.
name|tmatesoft
operator|.
name|svn
operator|.
name|core
operator|.
name|internal
operator|.
name|util
operator|.
name|SVNPathUtil
import|;
end_import

begin_import
import|import
name|org
operator|.
name|tmatesoft
operator|.
name|svn
operator|.
name|core
operator|.
name|internal
operator|.
name|wc
operator|.
name|ISVNFileFetcher
import|;
end_import

begin_import
import|import
name|org
operator|.
name|tmatesoft
operator|.
name|svn
operator|.
name|core
operator|.
name|internal
operator|.
name|wc
operator|.
name|ISVNUpdateEditor
import|;
end_import

begin_import
import|import
name|org
operator|.
name|tmatesoft
operator|.
name|svn
operator|.
name|core
operator|.
name|io
operator|.
name|ISVNEditor
import|;
end_import

begin_import
import|import
name|org
operator|.
name|tmatesoft
operator|.
name|svn
operator|.
name|core
operator|.
name|io
operator|.
name|ISVNReporter
import|;
end_import

begin_import
import|import
name|org
operator|.
name|tmatesoft
operator|.
name|svn
operator|.
name|core
operator|.
name|io
operator|.
name|ISVNReporterBaton
import|;
end_import

begin_import
import|import
name|org
operator|.
name|tmatesoft
operator|.
name|svn
operator|.
name|core
operator|.
name|io
operator|.
name|SVNCapability
import|;
end_import

begin_import
import|import
name|org
operator|.
name|tmatesoft
operator|.
name|svn
operator|.
name|core
operator|.
name|io
operator|.
name|SVNRepository
import|;
end_import

begin_import
import|import
name|org
operator|.
name|tmatesoft
operator|.
name|svn
operator|.
name|core
operator|.
name|wc
operator|.
name|ISVNExternalsHandler
import|;
end_import

begin_import
import|import
name|org
operator|.
name|tmatesoft
operator|.
name|svn
operator|.
name|core
operator|.
name|wc
operator|.
name|ISVNRepositoryPool
import|;
end_import

begin_import
import|import
name|org
operator|.
name|tmatesoft
operator|.
name|svn
operator|.
name|core
operator|.
name|wc
operator|.
name|SVNRevision
import|;
end_import

begin_import
import|import
name|org
operator|.
name|tmatesoft
operator|.
name|svn
operator|.
name|util
operator|.
name|SVNDebugLog
import|;
end_import

begin_import
import|import
name|org
operator|.
name|tmatesoft
operator|.
name|svn
operator|.
name|util
operator|.
name|SVNLogType
import|;
end_import

begin_comment
comment|/**  * This class provides methods which allow to check out, update, switch and relocate a  * Working Copy as well as export an unversioned directory or file from a repository.  *   *<p>  * Here's a list of the<b>SVNUpdateClient</b>'s methods   * matched against corresponing commands of the SVN command line   * client:  *   *<table cellpadding="3" cellspacing="1" border="0" width="40%" bgcolor="#999933">  *<tr bgcolor="#ADB8D9" align="left">  *<td><b>SVNKit</b></td>  *<td><b>Subversion</b></td>  *</tr>     *<tr bgcolor="#EAEAEA" align="left">  *<td>doCheckout()</td><td>'svn checkout'</td>  *</tr>  *<tr bgcolor="#EAEAEA" align="left">  *<td>doUpdate()</td><td>'svn update'</td>  *</tr>  *<tr bgcolor="#EAEAEA" align="left">  *<td>doSwitch()</td><td>'svn switch'</td>  *</tr>  *<tr bgcolor="#EAEAEA" align="left">  *<td>doRelocate()</td><td>'svn switch --relocate oldURL newURL'</td>  *</tr>  *<tr bgcolor="#EAEAEA" align="left">  *<td>doExport()</td><td>'svn export'</td>  *</tr>  *</table>  *   * @version 1.3  * @author  TMate Software Ltd.  * @since   1.2  * @see<a target="_top" href="http://svnkit.com/kb/examples/">Examples</a>  */
end_comment

begin_class
specifier|public
class|class
name|SVNUpdateClient
extends|extends
name|SVNBasicClient
block|{
specifier|private
name|ISVNExternalsHandler
name|myExternalsHandler
decl_stmt|;
specifier|private
name|boolean
name|myIsUpdateLocksOnDemand
decl_stmt|;
specifier|private
name|boolean
name|myIsExportExpandsKeywords
decl_stmt|;
comment|/**      * Constructs and initializes an<b>SVNUpdateClient</b> object      * with the specified run-time configuration and authentication       * drivers.      *       *<p>      * If<code>options</code> is<span class="javakeyword">null</span>,      * then this<b>SVNUpdateClient</b> will be using a default run-time      * configuration driver  which takes client-side settings from the       * default SVN's run-time configuration area but is not able to      * change those settings (read more on {@link ISVNOptions} and {@link SVNWCUtil}).        *       *<p>      * If<code>authManager</code> is<span class="javakeyword">null</span>,      * then this<b>SVNUpdateClient</b> will be using a default authentication      * and network layers driver (see {@link SVNWCUtil#createDefaultAuthenticationManager()})      * which uses server-side settings and auth storage from the       * default SVN's run-time configuration area (or system properties      * if that area is not found).      *       * @param authManager an authentication and network layers driver      * @param options     a run-time configuration options driver           */
specifier|public
name|SVNUpdateClient
parameter_list|(
name|ISVNAuthenticationManager
name|authManager
parameter_list|,
name|ISVNOptions
name|options
parameter_list|)
block|{
name|super
argument_list|(
name|authManager
argument_list|,
name|options
argument_list|)
expr_stmt|;
name|myIsExportExpandsKeywords
operator|=
literal|true
expr_stmt|;
block|}
comment|/**      * Constructs and initializes an<b>SVNUpdateClient</b> object      * with the specified run-time configuration and authentication       * drivers.      *       *<p/>      * If<code>options</code> is<span class="javakeyword">null</span>,      * then this<b>SVNUpdateClient</b> will be using a default run-time      * configuration driver  which takes client-side settings from the       * default SVN's run-time configuration area but is not able to      * change those settings (read more on {@link ISVNOptions} and {@link SVNWCUtil}).        *       *<p/>       * If<code>repositoryPool</code> is<span class="javakeyword">null</span>,      * then {@link org.tmatesoft.svn.core.io.SVNRepositoryFactory} will be used to create {@link SVNRepository repository access objects}.      *       * @param repositoryPool   a repository pool object      * @param options          a run-time configuration options driver           */
specifier|public
name|SVNUpdateClient
parameter_list|(
name|ISVNRepositoryPool
name|repositoryPool
parameter_list|,
name|ISVNOptions
name|options
parameter_list|)
block|{
name|super
argument_list|(
name|repositoryPool
argument_list|,
name|options
argument_list|)
expr_stmt|;
name|myIsExportExpandsKeywords
operator|=
literal|true
expr_stmt|;
block|}
comment|/**      * Sets an externals handler to be used by this client object.      *       * @param externalsHandler user's implementation of {@link ISVNExternalsHandler}      * @see   #getExternalsHandler()      * @since 1.2      */
specifier|public
name|void
name|setExternalsHandler
parameter_list|(
name|ISVNExternalsHandler
name|externalsHandler
parameter_list|)
block|{
name|myExternalsHandler
operator|=
name|externalsHandler
expr_stmt|;
block|}
comment|/**      * Returns an externals handler used by this update client.      *       *<p/>      * If no user's handler is provided then {@link ISVNExternalsHandler#DEFAULT} is returned and       * used by this client object by default.      *       *<p/>      * For more information what externals handlers are for, please, refer to {@link ISVNExternalsHandler}.       *       * @return externals handler being in use      * @see #setExternalsHandler(ISVNExternalsHandler)      * @since 1.2       */
specifier|public
name|ISVNExternalsHandler
name|getExternalsHandler
parameter_list|()
block|{
if|if
condition|(
name|myExternalsHandler
operator|==
literal|null
condition|)
block|{
name|myExternalsHandler
operator|=
name|ISVNExternalsHandler
operator|.
name|DEFAULT
expr_stmt|;
block|}
return|return
name|myExternalsHandler
return|;
block|}
comment|/**      * Brings the Working Copy item up-to-date with repository changes at the specified      * revision.      *       *<p>      * As a revision<b>SVNRevision</b>'s pre-defined constant fields can be used. For example,      * to update the Working Copy to the latest revision of the repository use       * {@link SVNRevision#HEAD HEAD}.      *       * @param  file			the Working copy item to be updated      * @param  revision		the desired revision against which the item will be updated       * @param  recursive	if<span class="javakeyword">true</span> and<code>file</code> is      * 						a directory then the entire tree will be updated, otherwise if       *<span class="javakeyword">false</span> - only items located immediately      * 						in the directory itself      * @return				the revision number to which<code>file</code> was updated to      * @throws SVNException      * @deprecated use {@link #doUpdate(File, SVNRevision, SVNDepth, boolean, boolean)} instead       */
specifier|public
name|long
name|doUpdate
parameter_list|(
name|File
name|file
parameter_list|,
name|SVNRevision
name|revision
parameter_list|,
name|boolean
name|recursive
parameter_list|)
throws|throws
name|SVNException
block|{
return|return
name|doUpdate
argument_list|(
name|file
argument_list|,
name|revision
argument_list|,
name|SVNDepth
operator|.
name|fromRecurse
argument_list|(
name|recursive
argument_list|)
argument_list|,
literal|false
argument_list|,
literal|false
argument_list|)
return|;
block|}
comment|/**      * @param file       * @param revision       * @param recursive       * @param force       * @return               actual revision number        * @throws SVNException       * @deprecated use {@link #doUpdate(File, SVNRevision, SVNDepth, boolean, boolean)} instead      */
specifier|public
name|long
name|doUpdate
parameter_list|(
name|File
name|file
parameter_list|,
name|SVNRevision
name|revision
parameter_list|,
name|boolean
name|recursive
parameter_list|,
name|boolean
name|force
parameter_list|)
throws|throws
name|SVNException
block|{
return|return
name|doUpdate
argument_list|(
name|file
argument_list|,
name|revision
argument_list|,
name|SVNDepth
operator|.
name|fromRecurse
argument_list|(
name|recursive
argument_list|)
argument_list|,
name|force
argument_list|,
literal|false
argument_list|)
return|;
block|}
comment|/**      * Updates working trees<code>paths</code> to<code>revision</code>.       * Unversioned paths that are direct children of a versioned path will cause an update that       * attempts to add that path, other unversioned paths are skipped.      *       *<p/>      *<code>revision</code> must represent a valid revision number ({@link SVNRevision#getNumber()}>= 0),      * or date ({@link SVNRevision#getDate()} !=<span class="javakeyword">true</span>), or be equal to       * {@link SVNRevision#HEAD}. If<code>revision</code> does not meet these requirements, an exception with       * the error code {@link SVNErrorCode#CLIENT_BAD_REVISION} is thrown.      *       *<p/>      * The paths in<code>paths</code> can be from multiple working copies from multiple      * repositories, but even if they all come from the same repository there      * is no guarantee that revision represented by {@link SVNRevision#HEAD}      * will remain the same as each path is updated.      *       *<p/>      * If externals are {@link #isIgnoreExternals() ignored}, doesn't process externals definitions      * as part of this operation.      *       *<p/>      * If<code>depth</code> is {@link SVNDepth#INFINITY}, updates fully recursively.      * Else if it is {@link SVNDepth#IMMEDIATES} or {@link SVNDepth#FILES}, updates      * each target and its file entries, but not its subdirectories. Else if {@link SVNDepth#EMPTY},       * updates exactly each target, nonrecursively (essentially, updates the target's properties).      *      *<p/>      * If<code>depth</code> is {@link SVNDepth#UNKNOWN}, takes the working depth from      *<code>paths</code> and then behaves as described above.      *       *<p/>      * If<code>depthIsSticky</code> is set and<code>depth</code> is not {@link SVNDepth#UNKNOWN},       * then in addition to updating<code>paths</code>, also sets      * their sticky ambient depth value to<code>depth</codes>.      *       *<p/>      * If<code>allowUnversionedObstructions</code> is<span class="javakeyword">true</span> then the update       * tolerates existing unversioned items that obstruct added paths. Only obstructions of the same type       * (file or dir) as the added item are tolerated. The text of obstructing files is left as-is, effectively      * treating it as a user modification after the update. Working properties of obstructing items are set       * equal to the base properties. If<code>allowUnversionedObstructions</code> is       *<span class="javakeyword">false</span> then the update will abort if there are any unversioned       * obstructing items.      *      *<p/>      * If the caller's {@link ISVNEventHandler} is non-<span class="javakeyword">null</span>, it is invoked for       * each item handled by the update, and also for files restored from text-base. Also       * {@link ISVNEventHandler#checkCancelled()} will be used at various places during the update to check       * whether the caller wants to stop the update.      *       *<p/>      * Before updating a next path from<code>paths</code> this method calls {@link #handlePathListItem(File)}       * passing the path to it.      *       *<p/>      * This operation requires repository access (in case the repository is not on the same machine, network      * connection is established).      *       * @param  paths                           working copy paths      * @param  revision                        revision to update to      * @param  depth                           tree depth to update      * @param  allowUnversionedObstructions    flag that allows tollerating unversioned items       *                                         during update      * @param  depthIsSticky                   flag that controls whether the requested depth       *                                         should be written to the working copy      * @return                                 an array of<code>long</code> revisions with each       *                                         element set to the revision to which<code>revision</code> was resolved      * @throws SVNException       * @since 1.2, SVN 1.5      */
specifier|public
name|long
index|[]
name|doUpdate
parameter_list|(
name|File
index|[]
name|paths
parameter_list|,
name|SVNRevision
name|revision
parameter_list|,
name|SVNDepth
name|depth
parameter_list|,
name|boolean
name|allowUnversionedObstructions
parameter_list|,
name|boolean
name|depthIsSticky
parameter_list|)
throws|throws
name|SVNException
block|{
if|if
condition|(
name|paths
operator|==
literal|null
condition|)
block|{
return|return
operator|new
name|long
index|[
literal|0
index|]
return|;
block|}
name|Collection
name|revisions
init|=
operator|new
name|LinkedList
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|paths
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
name|checkCancelled
argument_list|()
expr_stmt|;
name|File
name|path
init|=
name|paths
index|[
name|i
index|]
decl_stmt|;
try|try
block|{
name|setEventPathPrefix
argument_list|(
literal|""
argument_list|)
expr_stmt|;
name|handlePathListItem
argument_list|(
name|path
argument_list|)
expr_stmt|;
name|long
name|rev
init|=
name|doUpdate
argument_list|(
name|path
argument_list|,
name|revision
argument_list|,
name|depth
argument_list|,
name|allowUnversionedObstructions
argument_list|,
name|depthIsSticky
argument_list|)
decl_stmt|;
name|revisions
operator|.
name|add
argument_list|(
operator|new
name|Long
argument_list|(
name|rev
argument_list|)
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|SVNException
name|svne
parameter_list|)
block|{
if|if
condition|(
name|svne
operator|.
name|getErrorMessage
argument_list|()
operator|.
name|getErrorCode
argument_list|()
operator|==
name|SVNErrorCode
operator|.
name|WC_NOT_DIRECTORY
condition|)
block|{
name|SVNEvent
name|skipEvent
init|=
name|SVNEventFactory
operator|.
name|createSVNEvent
argument_list|(
name|path
argument_list|,
name|SVNNodeKind
operator|.
name|UNKNOWN
argument_list|,
literal|null
argument_list|,
name|SVNRepository
operator|.
name|INVALID_REVISION
argument_list|,
name|SVNEventAction
operator|.
name|SKIP
argument_list|,
name|SVNEventAction
operator|.
name|UPDATE_COMPLETED
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|)
decl_stmt|;
name|dispatchEvent
argument_list|(
name|skipEvent
argument_list|)
expr_stmt|;
name|revisions
operator|.
name|add
argument_list|(
operator|new
name|Long
argument_list|(
operator|-
literal|1
argument_list|)
argument_list|)
expr_stmt|;
continue|continue;
block|}
throw|throw
name|svne
throw|;
block|}
finally|finally
block|{
name|setEventPathPrefix
argument_list|(
literal|null
argument_list|)
expr_stmt|;
block|}
block|}
name|sleepForTimeStamp
argument_list|()
expr_stmt|;
name|long
index|[]
name|result
init|=
operator|new
name|long
index|[
name|revisions
operator|.
name|size
argument_list|()
index|]
decl_stmt|;
name|int
name|i
init|=
literal|0
decl_stmt|;
for|for
control|(
name|Iterator
name|revs
init|=
name|revisions
operator|.
name|iterator
argument_list|()
init|;
name|revs
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|Long
name|value
init|=
operator|(
name|Long
operator|)
name|revs
operator|.
name|next
argument_list|()
decl_stmt|;
name|result
index|[
name|i
operator|++
index|]
operator|=
name|value
operator|.
name|longValue
argument_list|()
expr_stmt|;
block|}
return|return
name|result
return|;
block|}
comment|/**      * Updates working copy<code></code> to<code>revision</code>.       * Unversioned paths that are direct children of a versioned path will cause an update that       * attempts to add that path, other unversioned paths are skipped.      *       *<p/>      *<code>revision</code> must represent a valid revision number ({@link SVNRevision#getNumber()}>= 0),      * or date ({@link SVNRevision#getDate()} !=<span class="javakeyword">true</span>), or be equal to       * {@link SVNRevision#HEAD}. If<code>revision</code> does not meet these requirements, an exception with       * the error code {@link SVNErrorCode#CLIENT_BAD_REVISION} is thrown.      *       *<p/>      * If externals are {@link #isIgnoreExternals() ignored}, doesn't process externals definitions      * as part of this operation.      *       *<p/>      * If<code>depth</code> is {@link SVNDepth#INFINITY}, updates fully recursively.      * Else if it is {@link SVNDepth#IMMEDIATES} or {@link SVNDepth#FILES}, updates      *<code>path</code> and its file entries, but not its subdirectories. Else if {@link SVNDepth#EMPTY},       * updates exactly<code>path</code>, nonrecursively (essentially, updates the target's properties).      *      *<p/>      * If<code>depth</code> is {@link SVNDepth#UNKNOWN}, takes the working depth from      *<code>path</code> and then behaves as described above.      *       *<p/>      * If<code>depthIsSticky</code> is set and<code>depth</code> is not {@link SVNDepth#UNKNOWN},       * then in addition to updating<code>path</code>, also sets its sticky ambient depth value to       *<code>depth</codes>.      *       *<p/>      * If<code>allowUnversionedObstructions</code> is<span class="javakeyword">true</span> then the update       * tolerates existing unversioned items that obstruct added paths. Only obstructions of the same type       * (file or dir) as the added item are tolerated. The text of obstructing files is left as-is, effectively      * treating it as a user modification after the update. Working properties of obstructing items are set       * equal to the base properties. If<code>allowUnversionedObstructions</code> is       *<span class="javakeyword">false</span> then the update will abort if there are any unversioned       * obstructing items.      *      *<p/>      * If the caller's {@link ISVNEventHandler} is non-<span class="javakeyword">null</span>, it is invoked for       * each item handled by the update, and also for files restored from text-base. Also       * {@link ISVNEventHandler#checkCancelled()} will be used at various places during the update to check       * whether the caller wants to stop the update.      *       *<p/>      * This operation requires repository access (in case the repository is not on the same machine, network      * connection is established).      *       * @param  path                           working copy path      * @param  revision                       revision to update to      * @param  depth                          tree depth to update      * @param  allowUnversionedObstructions   flag that allows tollerating unversioned items       *                                        during update      * @param  depthIsSticky                  flag that controls whether the requested depth       *                                        should be written to the working copy      * @return                                revision to which<code>revision</code> was resolved      * @throws SVNException       * @since 1.2, SVN 1.5      */
specifier|public
name|long
name|doUpdate
parameter_list|(
name|File
name|path
parameter_list|,
name|SVNRevision
name|revision
parameter_list|,
name|SVNDepth
name|depth
parameter_list|,
name|boolean
name|allowUnversionedObstructions
parameter_list|,
name|boolean
name|depthIsSticky
parameter_list|)
throws|throws
name|SVNException
block|{
return|return
name|update
argument_list|(
name|path
argument_list|,
name|revision
argument_list|,
name|depth
argument_list|,
name|allowUnversionedObstructions
argument_list|,
name|depthIsSticky
argument_list|,
literal|true
argument_list|)
return|;
block|}
specifier|private
name|long
name|doSwitchImpl
parameter_list|(
name|SVNWCAccess
name|wcAccess
parameter_list|,
name|File
name|path
parameter_list|,
name|SVNURL
name|url
parameter_list|,
name|SVNRevision
name|pegRevision
parameter_list|,
name|SVNRevision
name|revision
parameter_list|,
name|SVNDepth
name|depth
parameter_list|,
name|boolean
name|allowUnversionedObstructions
parameter_list|,
name|boolean
name|depthIsSticky
parameter_list|)
throws|throws
name|SVNException
block|{
if|if
condition|(
name|depth
operator|==
name|SVNDepth
operator|.
name|UNKNOWN
condition|)
block|{
name|depthIsSticky
operator|=
literal|false
expr_stmt|;
block|}
if|if
condition|(
name|depthIsSticky
operator|&&
name|depth
operator|==
name|SVNDepth
operator|.
name|EXCLUDE
condition|)
block|{
name|SVNErrorMessage
name|err
init|=
name|SVNErrorMessage
operator|.
name|create
argument_list|(
name|SVNErrorCode
operator|.
name|UNSUPPORTED_FEATURE
argument_list|,
literal|"Cannot both exclude and switch a path"
argument_list|)
decl_stmt|;
name|SVNErrorManager
operator|.
name|error
argument_list|(
name|err
argument_list|,
name|SVNLogType
operator|.
name|WC
argument_list|)
expr_stmt|;
block|}
name|boolean
name|closeAccess
init|=
name|wcAccess
operator|==
literal|null
decl_stmt|;
try|try
block|{
name|SVNAdminAreaInfo
name|info
init|=
literal|null
decl_stmt|;
if|if
condition|(
name|wcAccess
operator|!=
literal|null
condition|)
block|{
name|SVNWCAccess
name|tmpAccess
init|=
literal|null
decl_stmt|;
try|try
block|{
name|tmpAccess
operator|=
name|createWCAccess
argument_list|()
expr_stmt|;
name|info
operator|=
name|tmpAccess
operator|.
name|openAnchor
argument_list|(
name|path
argument_list|,
literal|false
argument_list|,
name|SVNWCAccess
operator|.
name|INFINITE_DEPTH
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
name|tmpAccess
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
name|SVNAdminArea
name|anchor
init|=
name|info
operator|.
name|getAnchor
argument_list|()
decl_stmt|;
name|SVNAdminArea
name|target
init|=
name|info
operator|.
name|getTarget
argument_list|()
decl_stmt|;
name|anchor
operator|=
name|wcAccess
operator|.
name|retrieve
argument_list|(
name|anchor
operator|.
name|getRoot
argument_list|()
argument_list|)
expr_stmt|;
name|target
operator|=
name|wcAccess
operator|.
name|retrieve
argument_list|(
name|target
operator|.
name|getRoot
argument_list|()
argument_list|)
expr_stmt|;
name|info
operator|.
name|setAnchor
argument_list|(
name|anchor
argument_list|)
expr_stmt|;
name|info
operator|.
name|setTarget
argument_list|(
name|target
argument_list|)
expr_stmt|;
name|info
operator|.
name|setWCAccess
argument_list|(
name|wcAccess
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|wcAccess
operator|=
name|createWCAccess
argument_list|()
expr_stmt|;
name|info
operator|=
name|wcAccess
operator|.
name|openAnchor
argument_list|(
name|path
argument_list|,
literal|true
argument_list|,
name|SVNWCAccess
operator|.
name|INFINITE_DEPTH
argument_list|)
expr_stmt|;
block|}
specifier|final
name|SVNReporter
name|reporter
init|=
operator|new
name|SVNReporter
argument_list|(
name|info
argument_list|,
name|path
argument_list|,
literal|true
argument_list|,
literal|false
argument_list|,
name|depth
argument_list|,
literal|false
argument_list|,
literal|false
argument_list|,
operator|!
name|depthIsSticky
argument_list|,
name|getDebugLog
argument_list|()
argument_list|)
decl_stmt|;
name|SVNAdminArea
name|anchorArea
init|=
name|info
operator|.
name|getAnchor
argument_list|()
decl_stmt|;
name|SVNEntry
name|entry
init|=
name|anchorArea
operator|.
name|getVersionedEntry
argument_list|(
name|anchorArea
operator|.
name|getThisDirName
argument_list|()
argument_list|,
literal|false
argument_list|)
decl_stmt|;
name|SVNURL
name|sourceURL
init|=
name|entry
operator|.
name|getSVNURL
argument_list|()
decl_stmt|;
if|if
condition|(
name|sourceURL
operator|==
literal|null
condition|)
block|{
name|SVNErrorMessage
name|err
init|=
name|SVNErrorMessage
operator|.
name|create
argument_list|(
name|SVNErrorCode
operator|.
name|ENTRY_MISSING_URL
argument_list|,
literal|"Directory ''{0}'' has no URL"
argument_list|,
name|anchorArea
operator|.
name|getRoot
argument_list|()
argument_list|)
decl_stmt|;
name|SVNErrorManager
operator|.
name|error
argument_list|(
name|err
argument_list|,
name|SVNLogType
operator|.
name|WC
argument_list|)
expr_stmt|;
block|}
name|long
index|[]
name|revs
init|=
operator|new
name|long
index|[
literal|1
index|]
decl_stmt|;
comment|// should fail on missing repository.
name|SVNRepository
name|repository
init|=
name|createRepository
argument_list|(
name|url
argument_list|,
literal|null
argument_list|,
name|anchorArea
argument_list|,
name|pegRevision
argument_list|,
name|revision
argument_list|,
name|revs
argument_list|)
decl_stmt|;
name|long
name|revNumber
init|=
name|revs
index|[
literal|0
index|]
decl_stmt|;
name|url
operator|=
name|repository
operator|.
name|getLocation
argument_list|()
expr_stmt|;
comment|// root of the switched repos.
name|SVNURL
name|sourceRoot
init|=
name|repository
operator|.
name|getRepositoryRoot
argument_list|(
literal|true
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|SVNPathUtil
operator|.
name|isAncestor
argument_list|(
name|sourceRoot
operator|.
name|toString
argument_list|()
argument_list|,
name|sourceURL
operator|.
name|toString
argument_list|()
argument_list|)
condition|)
block|{
name|SVNErrorMessage
name|err
init|=
name|SVNErrorMessage
operator|.
name|create
argument_list|(
name|SVNErrorCode
operator|.
name|WC_INVALID_SWITCH
argument_list|,
literal|"''{0}''\nis not the same repository as\n''{1}''"
argument_list|,
operator|new
name|Object
index|[]
block|{
name|url
operator|.
name|toString
argument_list|()
block|,
name|sourceRoot
operator|.
name|toString
argument_list|()
block|}
argument_list|)
decl_stmt|;
name|SVNErrorManager
operator|.
name|error
argument_list|(
name|err
argument_list|,
name|SVNLogType
operator|.
name|WC
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|depthIsSticky
operator|&&
name|depth
operator|.
name|compareTo
argument_list|(
name|SVNDepth
operator|.
name|INFINITY
argument_list|)
operator|<
literal|0
condition|)
block|{
name|SVNEntry
name|targetEntry
init|=
name|anchorArea
operator|.
name|getEntry
argument_list|(
name|info
operator|.
name|getTargetName
argument_list|()
argument_list|,
literal|true
argument_list|)
decl_stmt|;
if|if
condition|(
name|targetEntry
operator|!=
literal|null
operator|&&
name|targetEntry
operator|.
name|isDirectory
argument_list|()
condition|)
block|{
name|SVNWCManager
operator|.
name|crop
argument_list|(
name|info
argument_list|,
name|depth
argument_list|)
expr_stmt|;
block|}
block|}
comment|// reparent to the sourceURL
name|repository
operator|.
name|setLocation
argument_list|(
name|sourceURL
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|String
index|[]
name|preservedExts
init|=
name|getOptions
argument_list|()
operator|.
name|getPreservedConflictFileExtensions
argument_list|()
decl_stmt|;
name|ISVNUpdateEditor
name|editor
init|=
name|wcAccess
operator|.
name|createUpdateEditor
argument_list|(
name|info
argument_list|,
name|url
operator|.
name|toString
argument_list|()
argument_list|,
name|allowUnversionedObstructions
argument_list|,
name|depthIsSticky
argument_list|,
name|depth
argument_list|,
name|preservedExts
argument_list|,
literal|null
argument_list|,
literal|false
argument_list|)
decl_stmt|;
name|ISVNEditor
name|filterEditor
init|=
name|SVNAmbientDepthFilterEditor
operator|.
name|wrap
argument_list|(
name|editor
argument_list|,
name|info
argument_list|,
name|depthIsSticky
argument_list|)
decl_stmt|;
name|String
name|target
init|=
literal|""
operator|.
name|equals
argument_list|(
name|info
operator|.
name|getTargetName
argument_list|()
argument_list|)
condition|?
literal|null
else|:
name|info
operator|.
name|getTargetName
argument_list|()
decl_stmt|;
name|repository
operator|.
name|update
argument_list|(
name|url
argument_list|,
name|revNumber
argument_list|,
name|target
argument_list|,
name|depth
argument_list|,
name|reporter
argument_list|,
name|SVNCancellableEditor
operator|.
name|newInstance
argument_list|(
name|filterEditor
argument_list|,
name|this
argument_list|,
name|getDebugLog
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|long
name|targetRevision
init|=
name|editor
operator|.
name|getTargetRevision
argument_list|()
decl_stmt|;
if|if
condition|(
name|targetRevision
operator|>=
literal|0
operator|&&
operator|!
name|isIgnoreExternals
argument_list|()
operator|&&
name|depth
operator|.
name|isRecursive
argument_list|()
condition|)
block|{
name|url
operator|=
name|target
operator|==
literal|null
condition|?
name|url
else|:
name|url
operator|.
name|removePathTail
argument_list|()
expr_stmt|;
name|handleExternals
argument_list|(
name|wcAccess
argument_list|,
name|info
operator|.
name|getAnchor
argument_list|()
operator|.
name|getRoot
argument_list|()
argument_list|,
name|info
operator|.
name|getOldExternals
argument_list|()
argument_list|,
name|info
operator|.
name|getNewExternals
argument_list|()
argument_list|,
name|info
operator|.
name|getDepths
argument_list|()
argument_list|,
name|url
argument_list|,
name|sourceRoot
argument_list|,
name|depth
argument_list|,
literal|false
argument_list|,
literal|true
argument_list|)
expr_stmt|;
block|}
name|dispatchEvent
argument_list|(
name|SVNEventFactory
operator|.
name|createSVNEvent
argument_list|(
name|info
operator|.
name|getTarget
argument_list|()
operator|.
name|getRoot
argument_list|()
argument_list|,
name|SVNNodeKind
operator|.
name|NONE
argument_list|,
literal|null
argument_list|,
name|targetRevision
argument_list|,
name|SVNEventAction
operator|.
name|UPDATE_COMPLETED
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|,
name|reporter
operator|.
name|getReportedFilesCount
argument_list|()
argument_list|,
name|reporter
operator|.
name|getTotalFilesCount
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
return|return
name|targetRevision
return|;
block|}
finally|finally
block|{
if|if
condition|(
name|closeAccess
condition|)
block|{
name|wcAccess
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
name|sleepForTimeStamp
argument_list|()
expr_stmt|;
block|}
block|}
specifier|private
name|long
name|update
parameter_list|(
name|File
name|path
parameter_list|,
name|SVNRevision
name|revision
parameter_list|,
name|SVNDepth
name|depth
parameter_list|,
name|boolean
name|allowUnversionedObstructions
parameter_list|,
name|boolean
name|depthIsSticky
parameter_list|,
name|boolean
name|sendCopyFrom
parameter_list|)
throws|throws
name|SVNException
block|{
name|depth
operator|=
name|depth
operator|==
literal|null
condition|?
name|SVNDepth
operator|.
name|UNKNOWN
else|:
name|depth
expr_stmt|;
if|if
condition|(
name|depth
operator|==
name|SVNDepth
operator|.
name|UNKNOWN
condition|)
block|{
name|depthIsSticky
operator|=
literal|false
expr_stmt|;
block|}
name|path
operator|=
name|path
operator|.
name|getAbsoluteFile
argument_list|()
expr_stmt|;
name|SVNWCAccess
name|wcAccess
init|=
name|createWCAccess
argument_list|()
decl_stmt|;
name|SVNAdminAreaInfo
name|adminInfo
init|=
literal|null
decl_stmt|;
name|int
name|admOpenDepth
init|=
name|depthIsSticky
condition|?
operator|-
literal|1
else|:
name|getLevelsToLockFromDepth
argument_list|(
name|depth
argument_list|)
decl_stmt|;
try|try
block|{
if|if
condition|(
name|isUpdateLocksOnDemand
argument_list|()
condition|)
block|{
name|wcAccess
operator|.
name|openAnchor
argument_list|(
name|path
argument_list|,
literal|true
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|wcAccess
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
name|adminInfo
operator|=
name|wcAccess
operator|.
name|openAnchor
argument_list|(
name|path
argument_list|,
operator|!
name|isUpdateLocksOnDemand
argument_list|()
argument_list|,
name|admOpenDepth
argument_list|)
expr_stmt|;
name|SVNAdminArea
name|anchorArea
init|=
name|adminInfo
operator|.
name|getAnchor
argument_list|()
decl_stmt|;
name|SVNEntry
name|entry
init|=
name|anchorArea
operator|.
name|getEntry
argument_list|(
name|anchorArea
operator|.
name|getThisDirName
argument_list|()
argument_list|,
literal|false
argument_list|)
decl_stmt|;
name|SVNURL
name|url
init|=
name|entry
operator|.
name|getSVNURL
argument_list|()
decl_stmt|;
if|if
condition|(
name|url
operator|==
literal|null
condition|)
block|{
name|SVNErrorMessage
name|err
init|=
name|SVNErrorMessage
operator|.
name|create
argument_list|(
name|SVNErrorCode
operator|.
name|ENTRY_MISSING_URL
argument_list|,
literal|"Entry ''{0}'' has no URL"
argument_list|,
name|anchorArea
operator|.
name|getRoot
argument_list|()
argument_list|)
decl_stmt|;
name|SVNErrorManager
operator|.
name|error
argument_list|(
name|err
argument_list|,
name|SVNLogType
operator|.
name|WC
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|depthIsSticky
operator|&&
name|depth
operator|.
name|compareTo
argument_list|(
name|SVNDepth
operator|.
name|INFINITY
argument_list|)
operator|<
literal|0
condition|)
block|{
name|SVNEntry
name|targetEntry
init|=
name|anchorArea
operator|.
name|getEntry
argument_list|(
name|adminInfo
operator|.
name|getTargetName
argument_list|()
argument_list|,
literal|true
argument_list|)
decl_stmt|;
if|if
condition|(
name|targetEntry
operator|!=
literal|null
operator|&&
name|targetEntry
operator|.
name|isDirectory
argument_list|()
condition|)
block|{
name|SVNWCManager
operator|.
name|crop
argument_list|(
name|adminInfo
argument_list|,
name|depth
argument_list|)
expr_stmt|;
if|if
condition|(
name|depth
operator|==
name|SVNDepth
operator|.
name|EXCLUDE
condition|)
block|{
return|return
operator|-
literal|1
return|;
block|}
block|}
block|}
name|String
index|[]
name|preservedExts
init|=
name|getOptions
argument_list|()
operator|.
name|getPreservedConflictFileExtensions
argument_list|()
decl_stmt|;
name|SVNRepository
name|repos
init|=
name|createRepository
argument_list|(
name|url
argument_list|,
name|anchorArea
operator|.
name|getRoot
argument_list|()
argument_list|,
name|wcAccess
argument_list|,
literal|true
argument_list|)
decl_stmt|;
name|boolean
name|serverSupportsDepth
init|=
name|repos
operator|.
name|hasCapability
argument_list|(
name|SVNCapability
operator|.
name|DEPTH
argument_list|)
decl_stmt|;
specifier|final
name|SVNReporter
name|reporter
init|=
operator|new
name|SVNReporter
argument_list|(
name|adminInfo
argument_list|,
name|path
argument_list|,
literal|true
argument_list|,
operator|!
name|serverSupportsDepth
argument_list|,
name|depth
argument_list|,
name|isUpdateLocksOnDemand
argument_list|()
argument_list|,
literal|false
argument_list|,
operator|!
name|depthIsSticky
argument_list|,
name|getDebugLog
argument_list|()
argument_list|)
decl_stmt|;
name|String
name|target
init|=
literal|""
operator|.
name|equals
argument_list|(
name|adminInfo
operator|.
name|getTargetName
argument_list|()
argument_list|)
condition|?
literal|null
else|:
name|adminInfo
operator|.
name|getTargetName
argument_list|()
decl_stmt|;
name|long
name|revNumber
init|=
name|getRevisionNumber
argument_list|(
name|revision
argument_list|,
name|repos
argument_list|,
name|path
argument_list|)
decl_stmt|;
specifier|final
name|SVNURL
name|reposRoot
init|=
name|repos
operator|.
name|getRepositoryRoot
argument_list|(
literal|true
argument_list|)
decl_stmt|;
name|wcAccess
operator|.
name|setRepositoryRoot
argument_list|(
name|path
argument_list|,
name|reposRoot
argument_list|)
expr_stmt|;
specifier|final
name|SVNRepository
index|[]
name|repos2
init|=
operator|new
name|SVNRepository
index|[
literal|1
index|]
decl_stmt|;
name|ISVNFileFetcher
name|fileFetcher
init|=
operator|new
name|ISVNFileFetcher
argument_list|()
block|{
specifier|public
name|long
name|fetchFile
parameter_list|(
name|String
name|path
parameter_list|,
name|long
name|revision
parameter_list|,
name|OutputStream
name|os
parameter_list|,
name|SVNProperties
name|properties
parameter_list|)
throws|throws
name|SVNException
block|{
name|SVNURL
name|url
init|=
name|reposRoot
operator|.
name|appendPath
argument_list|(
name|SVNPathUtil
operator|.
name|removeTail
argument_list|(
name|path
argument_list|)
argument_list|,
literal|false
argument_list|)
decl_stmt|;
if|if
condition|(
name|repos2
index|[
literal|0
index|]
operator|==
literal|null
condition|)
block|{
name|repos2
index|[
literal|0
index|]
operator|=
name|createRepository
argument_list|(
name|url
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|,
literal|false
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|repos2
index|[
literal|0
index|]
operator|.
name|setLocation
argument_list|(
name|url
argument_list|,
literal|false
argument_list|)
expr_stmt|;
block|}
return|return
name|repos2
index|[
literal|0
index|]
operator|.
name|getFile
argument_list|(
name|SVNPathUtil
operator|.
name|tail
argument_list|(
name|path
argument_list|)
argument_list|,
name|revision
argument_list|,
name|properties
argument_list|,
name|os
argument_list|)
return|;
block|}
block|}
decl_stmt|;
name|ISVNUpdateEditor
name|editor
init|=
name|wcAccess
operator|.
name|createUpdateEditor
argument_list|(
name|adminInfo
argument_list|,
literal|null
argument_list|,
name|allowUnversionedObstructions
argument_list|,
name|depthIsSticky
argument_list|,
name|depth
argument_list|,
name|preservedExts
argument_list|,
name|fileFetcher
argument_list|,
name|isUpdateLocksOnDemand
argument_list|()
argument_list|)
decl_stmt|;
name|ISVNEditor
name|filterEditor
init|=
name|SVNAmbientDepthFilterEditor
operator|.
name|wrap
argument_list|(
name|editor
argument_list|,
name|adminInfo
argument_list|,
name|depthIsSticky
argument_list|)
decl_stmt|;
try|try
block|{
name|repos
operator|.
name|update
argument_list|(
name|revNumber
argument_list|,
name|target
argument_list|,
name|depth
argument_list|,
name|sendCopyFrom
argument_list|,
name|reporter
argument_list|,
name|SVNCancellableEditor
operator|.
name|newInstance
argument_list|(
name|filterEditor
argument_list|,
name|this
argument_list|,
name|getDebugLog
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
if|if
condition|(
name|repos2
index|[
literal|0
index|]
operator|!=
literal|null
condition|)
block|{
name|repos2
index|[
literal|0
index|]
operator|.
name|closeSession
argument_list|()
expr_stmt|;
block|}
block|}
name|long
name|targetRevision
init|=
name|editor
operator|.
name|getTargetRevision
argument_list|()
decl_stmt|;
if|if
condition|(
name|targetRevision
operator|>=
literal|0
condition|)
block|{
if|if
condition|(
operator|(
name|depth
operator|==
name|SVNDepth
operator|.
name|INFINITY
operator|||
name|depth
operator|==
name|SVNDepth
operator|.
name|UNKNOWN
operator|)
operator|&&
operator|!
name|isIgnoreExternals
argument_list|()
condition|)
block|{
name|handleExternals
argument_list|(
name|wcAccess
argument_list|,
name|adminInfo
operator|.
name|getAnchor
argument_list|()
operator|.
name|getRoot
argument_list|()
argument_list|,
name|adminInfo
operator|.
name|getOldExternals
argument_list|()
argument_list|,
name|adminInfo
operator|.
name|getNewExternals
argument_list|()
argument_list|,
name|adminInfo
operator|.
name|getDepths
argument_list|()
argument_list|,
name|url
argument_list|,
name|reposRoot
argument_list|,
name|depth
argument_list|,
literal|false
argument_list|,
literal|true
argument_list|)
expr_stmt|;
block|}
name|dispatchEvent
argument_list|(
name|SVNEventFactory
operator|.
name|createSVNEvent
argument_list|(
name|adminInfo
operator|.
name|getTarget
argument_list|()
operator|.
name|getRoot
argument_list|()
argument_list|,
name|SVNNodeKind
operator|.
name|NONE
argument_list|,
literal|null
argument_list|,
name|targetRevision
argument_list|,
name|SVNEventAction
operator|.
name|UPDATE_COMPLETED
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|,
name|reporter
operator|.
name|getReportedFilesCount
argument_list|()
argument_list|,
name|reporter
operator|.
name|getTotalFilesCount
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
return|return
name|targetRevision
return|;
block|}
finally|finally
block|{
name|wcAccess
operator|.
name|close
argument_list|()
expr_stmt|;
name|sleepForTimeStamp
argument_list|()
expr_stmt|;
block|}
block|}
comment|/**      * Sets whether working copies should be locked on demand or not during an update process.      *       *<p>      * For additional description, please, refer to {@link #isUpdateLocksOnDemand()}.      *       * @param locksOnDemand<span class="javakeyword">true</span> to make update lock a working copy tree on       *                      demand only (for those subdirectories only which will be changed by update)      */
specifier|public
name|void
name|setUpdateLocksOnDemand
parameter_list|(
name|boolean
name|locksOnDemand
parameter_list|)
block|{
name|myIsUpdateLocksOnDemand
operator|=
name|locksOnDemand
expr_stmt|;
block|}
comment|/**      * Says whether the entire working copy should be locked while updating or not.      *       *<p/>      * If this method returns<span class="javakeyword">false</span>, then the working copy will be       * closed for all paths involved in the update. Otherwise only those working copy subdirectories       * will be locked, which will be either changed by the update or which contain deleted files      * that should be restored during the update; all other versioned subdirectories than won't be       * touched by the update will remain opened for read only access without locking.       *       *<p/>      * Locking working copies on demand is intended to improve update performance for large working       * copies because even a no-op update on a huge working copy always locks the entire tree by default.      * And locking a working copy tree means opening special lock files for privileged access for all       * subdirectories involved. This makes an update process work slower. Locking wc on demand       * feature suggests such a workaround to enhance update performance.      *       * @return<span class="javakeyword">true</span> when locking wc on demand      */
specifier|public
name|boolean
name|isUpdateLocksOnDemand
parameter_list|()
block|{
return|return
name|myIsUpdateLocksOnDemand
return|;
block|}
comment|/**      * Updates the Working Copy item to mirror a new URL.       *       *<p>      * As a revision<b>SVNRevision</b>'s pre-defined constant fields can be used. For example,      * to update the Working Copy to the latest revision of the repository use       * {@link SVNRevision#HEAD HEAD}.      *       *<p>      * Calling this method is equivalent to       *<code>doSwitch(file, url, SVNRevision.UNDEFINED, revision, recursive)</code>.      *       * @param  file			the Working copy item to be switched      * @param  url			the repository location as a target against which the item will       * 						be switched      * @param  revision		the desired revision of the repository target         * @param  recursive	if<span class="javakeyword">true</span> and<code>file</code> is      * 						a directory then the entire tree will be updated, otherwise if       *<span class="javakeyword">false</span> - only items located immediately      * 						in the directory itself      * @return				the revision number to which<code>file</code> was updated to      * @throws SVNException      * @deprecated use {@link #doSwitch(File, SVNURL, SVNRevision, SVNRevision, SVNDepth, boolean, boolean)} instead      */
specifier|public
name|long
name|doSwitch
parameter_list|(
name|File
name|file
parameter_list|,
name|SVNURL
name|url
parameter_list|,
name|SVNRevision
name|revision
parameter_list|,
name|boolean
name|recursive
parameter_list|)
throws|throws
name|SVNException
block|{
return|return
name|doSwitch
argument_list|(
name|file
argument_list|,
name|url
argument_list|,
name|SVNRevision
operator|.
name|UNDEFINED
argument_list|,
name|revision
argument_list|,
name|SVNDepth
operator|.
name|getInfinityOrFilesDepth
argument_list|(
name|recursive
argument_list|)
argument_list|,
literal|false
argument_list|,
literal|false
argument_list|)
return|;
block|}
comment|/**      * Updates the Working Copy item to mirror a new URL.       *       *<p>      * As a revision<b>SVNRevision</b>'s pre-defined constant fields can be used. For example,      * to update the Working Copy to the latest revision of the repository use       * {@link SVNRevision#HEAD HEAD}.      *       * @param  file         the Working copy item to be switched      * @param  url          the repository location as a target against which the item will       *                      be switched      * @param  pegRevision  a revision in which<code>file</code> is first looked up      *                      in the repository      * @param  revision     the desired revision of the repository target         * @param  recursive    if<span class="javakeyword">true</span> and<code>file</code> is      *                      a directory then the entire tree will be updated, otherwise if       *<span class="javakeyword">false</span> - only items located immediately      *                      in the directory itself      * @return              the revision number to which<code>file</code> was updated to      * @throws SVNException      * @deprecated use {@link #doSwitch(File, SVNURL, SVNRevision, SVNRevision, SVNDepth, boolean, boolean)} instead      */
specifier|public
name|long
name|doSwitch
parameter_list|(
name|File
name|file
parameter_list|,
name|SVNURL
name|url
parameter_list|,
name|SVNRevision
name|pegRevision
parameter_list|,
name|SVNRevision
name|revision
parameter_list|,
name|boolean
name|recursive
parameter_list|)
throws|throws
name|SVNException
block|{
return|return
name|doSwitch
argument_list|(
name|file
argument_list|,
name|url
argument_list|,
name|pegRevision
argument_list|,
name|revision
argument_list|,
name|SVNDepth
operator|.
name|getInfinityOrFilesDepth
argument_list|(
name|recursive
argument_list|)
argument_list|,
literal|false
argument_list|,
literal|false
argument_list|)
return|;
block|}
comment|/**      * @param file       * @param url       * @param pegRevision       * @param revision       * @param recursive       * @param force       * @return               actual revision number      * @throws SVNException       * @deprecated use {@link #doSwitch(File, SVNURL, SVNRevision, SVNRevision, SVNDepth, boolean, boolean)} instead       */
specifier|public
name|long
name|doSwitch
parameter_list|(
name|File
name|file
parameter_list|,
name|SVNURL
name|url
parameter_list|,
name|SVNRevision
name|pegRevision
parameter_list|,
name|SVNRevision
name|revision
parameter_list|,
name|boolean
name|recursive
parameter_list|,
name|boolean
name|force
parameter_list|)
throws|throws
name|SVNException
block|{
return|return
name|doSwitch
argument_list|(
name|file
argument_list|,
name|url
argument_list|,
name|pegRevision
argument_list|,
name|revision
argument_list|,
name|SVNDepth
operator|.
name|getInfinityOrFilesDepth
argument_list|(
name|recursive
argument_list|)
argument_list|,
name|force
argument_list|,
literal|false
argument_list|)
return|;
block|}
comment|/**      * Switches working tree<code>path</code> to<code>url</code>\<code>pegRevision</code> at       *<code>revision</code>.       *       *<p/>      * Summary of purpose: this is normally used to switch a working      * directory over to another line of development, such as a branch or      * a tag.  Switching an existing working directory is more efficient      * than checking out<code>url</code> from scratch.      *      *<p/>      *<code>revision</code> must represent a valid revision number ({@link SVNRevision#getNumber()}>= 0),      * or date ({@link SVNRevision#getDate()} !=<span class="javakeyword">true</span>), or be equal to       * {@link SVNRevision#HEAD}. If<code>revision</code> does not meet these requirements, an exception with       * the error code {@link SVNErrorCode#CLIENT_BAD_REVISION} is thrown.      *       *<p/>      * If<code>depth</code> is {@link SVNDepth#INFINITY}, switches fully recursively.      * Else if it is {@link SVNDepth#IMMEDIATES}, switches<code>path</code> and its file      * children (if any), and switches subdirectories but does not update      * them.  Else if {@link SVNDepth#FILES}, switches just file children,      * ignoring subdirectories completely. Else if {@link SVNDepth#EMPTY},      * switches just<code>path</code> and touches nothing underneath it.      *      *<p/>      * If<code>depthIsSticky</code> is set and<code>depth</code> is not       * {@link SVNDepth#UNKNOWN}, then in addition to switching<code>path</code>, also sets      * its sticky ambient depth value to<code>depth</code>.      *       *<p/>      * If externals are {@link #isIgnoreExternals() ignored}, doesn't process externals definitions      * as part of this operation.      *      *<p/>      * If<code>allowUnversionedObstructions</code> is<span class="javakeyword">true</span> then the switch       * tolerates existing unversioned items that obstruct added paths. Only      * obstructions of the same type (file or dir) as the added item are      * tolerated. The text of obstructing files is left as-is, effectively      * treating it as a user modification after the switch. Working      * properties of obstructing items are set equal to the base properties.      * If<code>allowUnversionedObstructions</code> is<span class="javakeyword">false</span> then the switch       * will abort if there are any unversioned obstructing items.      *       *<p/>      * If the caller's {@link ISVNEventHandler} is non-<span class="javakeyword">null</span>, it is invoked for       * paths affected by the switch, and also for files restored from text-base. Also       * {@link ISVNEventHandler#checkCancelled()} will be used at various places during the switch to check       * whether the caller wants to stop the switch.      *       *<p/>      * This operation requires repository access (in case the repository is not on the same machine, network      * connection is established).      *       * @param  path                           the Working copy item to be switched      * @param  url                            the repository location as a target against which the item will       *                                        be switched      * @param  pegRevision                    a revision in which<code>path</code> is first looked up      *                                        in the repository      * @param  revision                       the desired revision of the repository target         * @param  depth                          tree depth to update      * @param  allowUnversionedObstructions   flag that allows tollerating unversioned items       *                                        during update      * @param  depthIsSticky                  flag that controls whether the requested depth       *                                        should be written into the working copy      * @return                                value of the revision to which the working copy was actually switched      * @throws SVNException       * @since  1.2, SVN 1.5      */
specifier|public
name|long
name|doSwitch
parameter_list|(
name|File
name|path
parameter_list|,
name|SVNURL
name|url
parameter_list|,
name|SVNRevision
name|pegRevision
parameter_list|,
name|SVNRevision
name|revision
parameter_list|,
name|SVNDepth
name|depth
parameter_list|,
name|boolean
name|allowUnversionedObstructions
parameter_list|,
name|boolean
name|depthIsSticky
parameter_list|)
throws|throws
name|SVNException
block|{
return|return
name|doSwitchImpl
argument_list|(
literal|null
argument_list|,
name|path
argument_list|,
name|url
argument_list|,
name|pegRevision
argument_list|,
name|revision
argument_list|,
name|depth
argument_list|,
name|allowUnversionedObstructions
argument_list|,
name|depthIsSticky
argument_list|)
return|;
block|}
comment|/**      * Checks out a Working Copy from a repository.      *       *<p>      * If the destination path (<code>dstPath</code>) is<span class="javakeyword">null</span>      * then the last component of<code>url</code> is used for the local directory name.      *       *<p>      * As a revision<b>SVNRevision</b>'s pre-defined constant fields can be used. For example,      * to check out a Working Copy at the latest revision of the repository use       * {@link SVNRevision#HEAD HEAD}.      *       * @param  url			a repository location from where a Working Copy will be checked out		      * @param  dstPath		the local path where the Working Copy will be placed      * @param  pegRevision	the revision at which<code>url</code> will be firstly seen      * 						in the repository to make sure it's the one that is needed      * @param  revision		the desired revision of the Working Copy to be checked out      * @param  recursive	if<span class="javakeyword">true</span> and<code>url</code> is      * 						a directory then the entire tree will be checked out, otherwise if       *<span class="javakeyword">false</span> - only items located immediately      * 						in the directory itself      * @return				the revision number of the Working Copy      * @throws SVNException<code>url</code> refers to a file, not a directory;<code>dstPath</code>      * 						already exists but it is a file, not a directory;<code>dstPath</code> already      * 						exists and is a versioned directory but has a different URL (repository location      * 						against which the directory is controlled)      * @deprecated use {@link #doCheckout(SVNURL, File, SVNRevision, SVNRevision, SVNDepth, boolean)} instead        */
specifier|public
name|long
name|doCheckout
parameter_list|(
name|SVNURL
name|url
parameter_list|,
name|File
name|dstPath
parameter_list|,
name|SVNRevision
name|pegRevision
parameter_list|,
name|SVNRevision
name|revision
parameter_list|,
name|boolean
name|recursive
parameter_list|)
throws|throws
name|SVNException
block|{
return|return
name|doCheckout
argument_list|(
name|url
argument_list|,
name|dstPath
argument_list|,
name|pegRevision
argument_list|,
name|revision
argument_list|,
name|SVNDepth
operator|.
name|fromRecurse
argument_list|(
name|recursive
argument_list|)
argument_list|,
literal|false
argument_list|)
return|;
block|}
comment|/**      * @param url       * @param dstPath       * @param pegRevision       * @param revision       * @param recursive       * @param force       * @return               actual revision number       * @throws SVNException       * @deprecated use {@link #doCheckout(SVNURL, File, SVNRevision, SVNRevision, SVNDepth, boolean)} instead      */
specifier|public
name|long
name|doCheckout
parameter_list|(
name|SVNURL
name|url
parameter_list|,
name|File
name|dstPath
parameter_list|,
name|SVNRevision
name|pegRevision
parameter_list|,
name|SVNRevision
name|revision
parameter_list|,
name|boolean
name|recursive
parameter_list|,
name|boolean
name|force
parameter_list|)
throws|throws
name|SVNException
block|{
return|return
name|doCheckout
argument_list|(
name|url
argument_list|,
name|dstPath
argument_list|,
name|pegRevision
argument_list|,
name|revision
argument_list|,
name|SVNDepth
operator|.
name|fromRecurse
argument_list|(
name|recursive
argument_list|)
argument_list|,
name|force
argument_list|)
return|;
block|}
comment|/**      * Checks out a working copy of<code>url</code> at<code>revision</code>, looked up at       *<code>pegRevision</code>, using<code>dstPath</code> as the root directory of the newly      * checked out working copy.       *       *<p/>      * If<code>pegRevision</code> is {@link SVNRevision#UNDEFINED}, then it      * defaults to {@link SVNRevision#HEAD}.      *       *<p/>      *<code>revision</code> must represent a valid revision number ({@link SVNRevision#getNumber()}>= 0),      * or date ({@link SVNRevision#getDate()} !=<span class="javakeyword">true</span>), or be equal to       * {@link SVNRevision#HEAD}. If<code>revision</code> does not meet these requirements, an exception with       * the error code {@link SVNErrorCode#CLIENT_BAD_REVISION} is thrown.      *       *<p/>      * If<code>depth</code> is {@link SVNDepth#INFINITY}, checks out fully recursively.      * Else if it is {@link SVNDepth#IMMEDIATES}, checks out<code>url</code> and its      * immediate entries (subdirectories will be present, but will be at      * depth {@link SVNDepth#EMPTY} themselves); else {@link SVNDepth#FILES},      * checks out<code>url</code> and its file entries, but no subdirectories; else      * if {@link SVNDepth#EMPTY}, checks out<code>url</code> as an empty directory at      * that depth, with no entries present.      *       *<p/>      * If<code>depth</code> is {@link SVNDepth#UNKNOWN}, then behave as if for      * {@link SVNDepth#INFINITY}, except in the case of resuming a previous      * checkout of<code>dstPath</code> (i.e., updating), in which case uses the depth      * of the existing working copy.      *      *<p/>      * If externals are {@link #isIgnoreExternals() ignored}, doesn't process externals definitions      * as part of this operation.      *      *<p/>      * If<code>allowUnversionedObstructions</code> is<span class="javakeyword">true</span> then the checkout       * tolerates existing unversioned items that obstruct added paths from<code>url</code>. Only      * obstructions of the same type (file or dir) as the added item are tolerated.  The text of obstructing       * files is left as-is, effectively treating it as a user modification after the checkout. Working      * properties of obstructing items are set equal to the base properties. If       *<code>allowUnversionedObstructions</code> is<span class="javakeyword">false</span> then the checkout       * will abort if there are any unversioned obstructing items.      *       *<p/>      * If the caller's {@link ISVNEventHandler} is non-<span class="javakeyword">null</span>, it is invoked       * as the checkout processes. Also {@link ISVNEventHandler#checkCancelled()} will be used at various places       * during the checkout to check whether the caller wants to stop the checkout.      *       *<p/>      * This operation requires repository access (in case the repository is not on the same machine, network      * connection is established).      *      * @param url                           a repository location from where a Working Copy will be checked out           * @param dstPath                       the local path where the Working Copy will be placed      * @param pegRevision                   the revision at which<code>url</code> will be firstly seen      *                                      in the repository to make sure it's the one that is needed      * @param revision                      the desired revision of the Working Copy to be checked out      * @param depth                         tree depth      * @param allowUnversionedObstructions  flag that allows tollerating unversioned items       *                                      during       * @return                              value of the revision actually checked out from the repository      * @throws SVNException<ul>      *<li/>{@link SVNErrorCode#UNSUPPORTED_FEATURE} - if<code>url</code> refers to a       *                                      file rather than a directory      *<li/>{@link SVNErrorCode#RA_ILLEGAL_URL} - if<code>url</code> does not exist        *</ul>          * @since 1.2, SVN 1.5      */
specifier|public
name|long
name|doCheckout
parameter_list|(
name|SVNURL
name|url
parameter_list|,
name|File
name|dstPath
parameter_list|,
name|SVNRevision
name|pegRevision
parameter_list|,
name|SVNRevision
name|revision
parameter_list|,
name|SVNDepth
name|depth
parameter_list|,
name|boolean
name|allowUnversionedObstructions
parameter_list|)
throws|throws
name|SVNException
block|{
if|if
condition|(
name|dstPath
operator|==
literal|null
condition|)
block|{
name|SVNErrorMessage
name|err
init|=
name|SVNErrorMessage
operator|.
name|create
argument_list|(
name|SVNErrorCode
operator|.
name|BAD_FILENAME
argument_list|,
literal|"Checkout destination path can not be NULL"
argument_list|)
decl_stmt|;
name|SVNErrorManager
operator|.
name|error
argument_list|(
name|err
argument_list|,
name|SVNLogType
operator|.
name|WC
argument_list|)
expr_stmt|;
block|}
name|pegRevision
operator|=
name|pegRevision
operator|==
literal|null
condition|?
name|SVNRevision
operator|.
name|UNDEFINED
else|:
name|pegRevision
expr_stmt|;
if|if
condition|(
operator|!
name|revision
operator|.
name|isValid
argument_list|()
operator|&&
name|pegRevision
operator|.
name|isValid
argument_list|()
condition|)
block|{
name|revision
operator|=
name|pegRevision
expr_stmt|;
block|}
if|if
condition|(
operator|!
name|revision
operator|.
name|isValid
argument_list|()
condition|)
block|{
name|revision
operator|=
name|SVNRevision
operator|.
name|HEAD
expr_stmt|;
block|}
name|SVNRepository
name|repos
init|=
name|createRepository
argument_list|(
name|url
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|,
name|pegRevision
argument_list|,
name|revision
argument_list|,
literal|null
argument_list|)
decl_stmt|;
name|url
operator|=
name|repos
operator|.
name|getLocation
argument_list|()
expr_stmt|;
name|long
name|revNumber
init|=
name|getRevisionNumber
argument_list|(
name|revision
argument_list|,
name|repos
argument_list|,
literal|null
argument_list|)
decl_stmt|;
name|SVNNodeKind
name|targetNodeKind
init|=
name|repos
operator|.
name|checkPath
argument_list|(
literal|""
argument_list|,
name|revNumber
argument_list|)
decl_stmt|;
if|if
condition|(
name|targetNodeKind
operator|==
name|SVNNodeKind
operator|.
name|FILE
condition|)
block|{
name|SVNErrorMessage
name|err
init|=
name|SVNErrorMessage
operator|.
name|create
argument_list|(
name|SVNErrorCode
operator|.
name|UNSUPPORTED_FEATURE
argument_list|,
literal|"URL ''{0}'' refers to a file, not a directory"
argument_list|,
name|url
argument_list|)
decl_stmt|;
name|SVNErrorManager
operator|.
name|error
argument_list|(
name|err
argument_list|,
name|SVNLogType
operator|.
name|WC
argument_list|)
expr_stmt|;
block|}
if|else if
condition|(
name|targetNodeKind
operator|==
name|SVNNodeKind
operator|.
name|NONE
condition|)
block|{
name|SVNErrorMessage
name|err
init|=
name|SVNErrorMessage
operator|.
name|create
argument_list|(
name|SVNErrorCode
operator|.
name|RA_ILLEGAL_URL
argument_list|,
literal|"URL ''{0}'' doesn''t exist"
argument_list|,
name|url
argument_list|)
decl_stmt|;
name|SVNErrorManager
operator|.
name|error
argument_list|(
name|err
argument_list|,
name|SVNLogType
operator|.
name|WC
argument_list|)
expr_stmt|;
block|}
name|String
name|uuid
init|=
name|repos
operator|.
name|getRepositoryUUID
argument_list|(
literal|true
argument_list|)
decl_stmt|;
name|SVNURL
name|repositoryRoot
init|=
name|repos
operator|.
name|getRepositoryRoot
argument_list|(
literal|true
argument_list|)
decl_stmt|;
name|long
name|result
init|=
operator|-
literal|1
decl_stmt|;
name|depth
operator|=
name|depth
operator|==
literal|null
condition|?
name|SVNDepth
operator|.
name|UNKNOWN
else|:
name|depth
expr_stmt|;
name|SVNWCAccess
name|wcAccess
init|=
name|createWCAccess
argument_list|()
decl_stmt|;
name|SVNFileType
name|kind
init|=
name|SVNFileType
operator|.
name|getType
argument_list|(
name|dstPath
argument_list|)
decl_stmt|;
if|if
condition|(
name|kind
operator|==
name|SVNFileType
operator|.
name|NONE
condition|)
block|{
name|depth
operator|=
name|depth
operator|==
name|SVNDepth
operator|.
name|UNKNOWN
condition|?
name|SVNDepth
operator|.
name|INFINITY
else|:
name|depth
expr_stmt|;
name|SVNAdminAreaFactory
operator|.
name|createVersionedDirectory
argument_list|(
name|dstPath
argument_list|,
name|url
argument_list|,
name|repositoryRoot
argument_list|,
name|uuid
argument_list|,
name|revNumber
argument_list|,
name|depth
argument_list|)
expr_stmt|;
name|result
operator|=
name|update
argument_list|(
name|dstPath
argument_list|,
name|revision
argument_list|,
name|depth
argument_list|,
name|allowUnversionedObstructions
argument_list|,
literal|true
argument_list|,
literal|false
argument_list|)
expr_stmt|;
block|}
if|else if
condition|(
name|kind
operator|==
name|SVNFileType
operator|.
name|DIRECTORY
condition|)
block|{
name|int
name|formatVersion
init|=
name|SVNAdminAreaFactory
operator|.
name|checkWC
argument_list|(
name|dstPath
argument_list|,
literal|true
argument_list|)
decl_stmt|;
if|if
condition|(
name|formatVersion
operator|!=
literal|0
condition|)
block|{
name|SVNAdminArea
name|adminArea
init|=
name|wcAccess
operator|.
name|open
argument_list|(
name|dstPath
argument_list|,
literal|false
argument_list|,
literal|0
argument_list|)
decl_stmt|;
name|SVNEntry
name|rootEntry
init|=
name|adminArea
operator|.
name|getEntry
argument_list|(
name|adminArea
operator|.
name|getThisDirName
argument_list|()
argument_list|,
literal|false
argument_list|)
decl_stmt|;
name|wcAccess
operator|.
name|closeAdminArea
argument_list|(
name|dstPath
argument_list|)
expr_stmt|;
if|if
condition|(
name|rootEntry
operator|.
name|getSVNURL
argument_list|()
operator|!=
literal|null
operator|&&
name|url
operator|.
name|equals
argument_list|(
name|rootEntry
operator|.
name|getSVNURL
argument_list|()
argument_list|)
condition|)
block|{
name|result
operator|=
name|update
argument_list|(
name|dstPath
argument_list|,
name|revision
argument_list|,
name|depth
argument_list|,
name|allowUnversionedObstructions
argument_list|,
literal|true
argument_list|,
literal|false
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|String
name|message
init|=
literal|"''{0}'' is already a working copy for a different URL"
decl_stmt|;
if|if
condition|(
name|rootEntry
operator|.
name|isIncomplete
argument_list|()
condition|)
block|{
name|message
operator|+=
literal|"; perform update to complete it"
expr_stmt|;
block|}
name|SVNErrorMessage
name|err
init|=
name|SVNErrorMessage
operator|.
name|create
argument_list|(
name|SVNErrorCode
operator|.
name|WC_OBSTRUCTED_UPDATE
argument_list|,
name|message
argument_list|,
name|dstPath
argument_list|)
decl_stmt|;
name|SVNErrorManager
operator|.
name|error
argument_list|(
name|err
argument_list|,
name|SVNLogType
operator|.
name|WC
argument_list|)
expr_stmt|;
block|}
block|}
else|else
block|{
name|depth
operator|=
name|depth
operator|==
name|SVNDepth
operator|.
name|UNKNOWN
condition|?
name|SVNDepth
operator|.
name|INFINITY
else|:
name|depth
expr_stmt|;
name|SVNAdminAreaFactory
operator|.
name|createVersionedDirectory
argument_list|(
name|dstPath
argument_list|,
name|url
argument_list|,
name|repositoryRoot
argument_list|,
name|uuid
argument_list|,
name|revNumber
argument_list|,
name|depth
argument_list|)
expr_stmt|;
name|result
operator|=
name|update
argument_list|(
name|dstPath
argument_list|,
name|revision
argument_list|,
name|depth
argument_list|,
name|allowUnversionedObstructions
argument_list|,
literal|true
argument_list|,
literal|false
argument_list|)
expr_stmt|;
block|}
block|}
else|else
block|{
name|SVNErrorMessage
name|err
init|=
name|SVNErrorMessage
operator|.
name|create
argument_list|(
name|SVNErrorCode
operator|.
name|WC_NODE_KIND_CHANGE
argument_list|,
literal|"''{0}'' already exists and is not a directory"
argument_list|,
name|dstPath
argument_list|)
decl_stmt|;
name|SVNErrorManager
operator|.
name|error
argument_list|(
name|err
argument_list|,
name|SVNLogType
operator|.
name|WC
argument_list|)
expr_stmt|;
block|}
return|return
name|result
return|;
block|}
comment|/**      * Exports a clean directory or single file from a repository.      *       *<p>      * If<code>eolStyle</code> is not<span class="javakeyword">null</span> then it should denote      * a specific End-Of-Line marker for the files to be exported. Significant values for       *<code>eolStyle</code> are:      *<ul>      *<li>"CRLF" (Carriage Return Line Feed) - this causes files to contain '\r\n' line ending sequences       * for EOL markers, regardless of the operating system in use (for instance, this EOL marker is used by       * software on the Windows platform).      *<li>"LF" (Line Feed) - this causes files to contain '\n' line ending sequences       * for EOL markers, regardless of the operating system in use (for instance, this EOL marker is used by       * software on the Unix platform).       *<li>"CR" (Carriage Return) - this causes files to contain '\r' line ending sequences       * for EOL markers, regardless of the operating system in use (for instance, this EOL marker was used by       * software on older Macintosh platforms).      *<li>"native" - this causes files to contain the EOL markers that are native to the operating system       * on which SVNKit is run.      *</ul>      *       * @param  url				a repository location from where the unversioned directory/file  will      * 							be exported      * @param  dstPath			the local path where the repository items will be exported to 			      * @param  pegRevision		the revision at which<code>url</code> will be firstly seen      * 							in the repository to make sure it's the one that is needed      * @param  revision			the desired revision of the directory/file to be exported      * @param  eolStyle			a string that denotes a specific End-Of-Line charecter;        * @param  force<span class="javakeyword">true</span> to fore the operation even      * 							if there are local files with the same names as those in the repository      * 							(local ones will be replaced)       * @param  recursive		if<span class="javakeyword">true</span> and<code>url</code> is      * 							a directory then the entire tree will be exported, otherwise if       *<span class="javakeyword">false</span> - only items located immediately      * 							in the directory itself      * @return					the revision number of the exported directory/file       * @throws SVNException      * @deprecated use {@link #doExport(SVNURL, File, SVNRevision, SVNRevision, String, boolean, SVNDepth)}      */
specifier|public
name|long
name|doExport
parameter_list|(
name|SVNURL
name|url
parameter_list|,
name|File
name|dstPath
parameter_list|,
name|SVNRevision
name|pegRevision
parameter_list|,
name|SVNRevision
name|revision
parameter_list|,
name|String
name|eolStyle
parameter_list|,
name|boolean
name|force
parameter_list|,
name|boolean
name|recursive
parameter_list|)
throws|throws
name|SVNException
block|{
return|return
name|doExport
argument_list|(
name|url
argument_list|,
name|dstPath
argument_list|,
name|pegRevision
argument_list|,
name|revision
argument_list|,
name|eolStyle
argument_list|,
name|force
argument_list|,
name|SVNDepth
operator|.
name|fromRecurse
argument_list|(
name|recursive
argument_list|)
argument_list|)
return|;
block|}
comment|/**      * Exports the contents of a subversion repository into a 'clean' directory (meaning a      * directory with no administrative directories).       *       *<p/>      *<code>pegRevision</code> is the revision where the path is first looked up.       * If<code>pegRevision</code> is {@link SVNRevision#UNDEFINED},       * then it defaults to {@link SVNRevision#HEAD}.      *       *<p/>      * If externals are {@link #isIgnoreExternals() ignored}, doesn't process externals definitions      * as part of this operation.      *       *<p/>      *<code>eolStyle</code> allows you to override the standard eol marker on the platform      * you are running on. Can be either "LF", "CR" or "CRLF" or<span class="javakeyword">null</span>.        * If<span class="javakeyword">null</span> will use the standard eol marker. Any other value will cause       * an exception with the error code {@link SVNErrorCode#IO_UNKNOWN_EOL} error to be returned.      *       *<p>      * If<code>depth</code> is {@link SVNDepth#INFINITY}, exports fully recursively.      * Else if it is {@link SVNDepth#IMMEDIATES}, exports<code>url</code> and its immediate      * children (if any), but with subdirectories empty and at      * {@link SVNDepth#EMPTY}. Else if {@link SVNDepth#FILES}, exports<code>url</code> and      * its immediate file children (if any) only.  If<code>depth</code> is {@link SVNDepth#EMPTY},       * then exports exactly<code>url</code> and none of its children.      *       * @param url             repository url to export from      * @param dstPath         path to export to      * @param pegRevision     the revision at which<code>url</code> will be firstly seen      *                        in the repository to make sure it's the one that is needed      * @param revision        the desired revision of the directory/file to be exported      * @param eolStyle        a string that denotes a specific End-Of-Line charecter        * @param overwrite       if<span class="javakeyword">true</span>, will cause the export to overwrite       *                        files or directories      * @param depth           tree depth      * @return                value of the revision actually exported      * @throws SVNException      * @since  1.2, SVN 1.5      */
specifier|public
name|long
name|doExport
parameter_list|(
name|SVNURL
name|url
parameter_list|,
name|File
name|dstPath
parameter_list|,
name|SVNRevision
name|pegRevision
parameter_list|,
name|SVNRevision
name|revision
parameter_list|,
name|String
name|eolStyle
parameter_list|,
name|boolean
name|overwrite
parameter_list|,
name|SVNDepth
name|depth
parameter_list|)
throws|throws
name|SVNException
block|{
name|long
index|[]
name|revNum
init|=
block|{
name|SVNRepository
operator|.
name|INVALID_REVISION
block|}
decl_stmt|;
name|SVNRepository
name|repository
init|=
name|createRepository
argument_list|(
name|url
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|,
name|pegRevision
argument_list|,
name|revision
argument_list|,
name|revNum
argument_list|)
decl_stmt|;
name|long
name|exportedRevision
init|=
name|doRemoteExport
argument_list|(
name|repository
argument_list|,
name|revNum
index|[
literal|0
index|]
argument_list|,
name|dstPath
argument_list|,
name|eolStyle
argument_list|,
name|overwrite
argument_list|,
name|depth
argument_list|)
decl_stmt|;
name|dispatchEvent
argument_list|(
name|SVNEventFactory
operator|.
name|createSVNEvent
argument_list|(
literal|null
argument_list|,
name|SVNNodeKind
operator|.
name|NONE
argument_list|,
literal|null
argument_list|,
name|exportedRevision
argument_list|,
name|SVNEventAction
operator|.
name|UPDATE_COMPLETED
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|)
argument_list|)
expr_stmt|;
return|return
name|exportedRevision
return|;
block|}
comment|/**      * Exports a clean directory or single file from eihter a source Working Copy or      * a repository.      *       *<p>      * How this method works:      *<ul>      *<li> If<code>revision</code> is different from {@link SVNRevision#BASE BASE},       * {@link SVNRevision#WORKING WORKING}, {@link SVNRevision#COMMITTED COMMITTED},       * {@link SVNRevision#UNDEFINED UNDEFINED} - then the repository origin of<code>srcPath</code>      * will be exported (what is done by "remote" {@link #doExport(SVNURL, File, SVNRevision, SVNRevision, String, boolean, boolean)      * doExport()}).      *<li> In other cases a clean unversioned copy of<code>srcPath</code> - either a directory or a single file -      * is exported to<code>dstPath</code>.       *</ul>      *       *<p>      * If<code>eolStyle</code> is not<span class="javakeyword">null</span> then it should denote      * a specific End-Of-Line marker for the files to be exported. Significant values for       *<code>eolStyle</code> are:      *<ul>      *<li>"CRLF" (Carriage Return Line Feed) - this causes files to contain '\r\n' line ending sequences       * for EOL markers, regardless of the operating system in use (for instance, this EOL marker is used by       * software on the Windows platform).      *<li>"LF" (Line Feed) - this causes files to contain '\n' line ending sequences       * for EOL markers, regardless of the operating system in use (for instance, this EOL marker is used by       * software on the Unix platform).       *<li>"CR" (Carriage Return) - this causes files to contain '\r' line ending sequences       * for EOL markers, regardless of the operating system in use (for instance, this EOL marker was used by       * software on older Macintosh platforms).      *<li>"native" - this causes files to contain the EOL markers that are native to the operating system       * on which SVNKit is run.      *</ul>      *       * @param  srcPath			a repository location from where the unversioned directory/file  will      * 							be exported      * @param  dstPath			the local path where the repository items will be exported to 			      * @param  pegRevision		the revision at which<code>url</code> will be firstly seen      * 							in the repository to make sure it's the one that is needed      * @param  revision			the desired revision of the directory/file to be exported      * @param  eolStyle			a string that denotes a specific End-Of-Line charecter;        * @param  force<span class="javakeyword">true</span> to fore the operation even      * 							if there are local files with the same names as those in the repository      * 							(local ones will be replaced)       * @param  recursive		if<span class="javakeyword">true</span> and<code>url</code> is      * 							a directory then the entire tree will be exported, otherwise if       *<span class="javakeyword">false</span> - only items located immediately      * 							in the directory itself      * @return					the revision number of the exported directory/file       * @throws SVNException      * @deprecated use {@link #doExport(File, File, SVNRevision, SVNRevision, String, boolean, SVNDepth)}      */
specifier|public
name|long
name|doExport
parameter_list|(
name|File
name|srcPath
parameter_list|,
specifier|final
name|File
name|dstPath
parameter_list|,
name|SVNRevision
name|pegRevision
parameter_list|,
name|SVNRevision
name|revision
parameter_list|,
name|String
name|eolStyle
parameter_list|,
specifier|final
name|boolean
name|force
parameter_list|,
name|boolean
name|recursive
parameter_list|)
throws|throws
name|SVNException
block|{
return|return
name|doExport
argument_list|(
name|srcPath
argument_list|,
name|dstPath
argument_list|,
name|pegRevision
argument_list|,
name|revision
argument_list|,
name|eolStyle
argument_list|,
name|force
argument_list|,
name|SVNDepth
operator|.
name|fromRecurse
argument_list|(
name|recursive
argument_list|)
argument_list|)
return|;
block|}
comment|/**      * Exports the contents of either a subversion repository or a      * subversion working copy into a 'clean' directory (meaning a       * directory with no administrative directories).      *       *<p/>      *<code>pegRevision</code> is the revision where the path is first looked up      * when exporting from a repository. If<code>pegRevision</code> is {@link SVNRevision#UNDEFINED},       * then it defaults to {@link SVNRevision#WORKING}.      *       *<p/>      * If<code>revision</code> is one of:      *<ul>      *<li/>{@link SVNRevision#BASE}      *<li/>{@link SVNRevision#WORKING}      *<li/>{@link SVNRevision#COMMITTED}      *<li/>{@link SVNRevision#UNDEFINED}      *</ul>       * then local export is performed. Otherwise exporting from the repository.      *       *<p/>      * If externals are {@link #isIgnoreExternals() ignored}, doesn't process externals definitions      * as part of this operation.      *       *<p/>      *<code>eolStyle</code> allows you to override the standard eol marker on the platform      * you are running on. Can be either "LF", "CR" or "CRLF" or<span class="javakeyword">null</span>.        * If<span class="javakeyword">null</span> will use the standard eol marker. Any other value will cause       * an exception with the error code {@link SVNErrorCode#IO_UNKNOWN_EOL} error to be returned.      *       *<p>      * If<code>depth</code> is {@link SVNDepth#INFINITY}, exports fully recursively.      * Else if it is {@link SVNDepth#IMMEDIATES}, exports<code>srcPath</code> and its immediate      * children (if any), but with subdirectories empty and at      * {@link SVNDepth#EMPTY}. Else if {@link SVNDepth#FILES}, exports<code>srcPath</code> and      * its immediate file children (if any) only.  If<code>depth</code> is {@link SVNDepth#EMPTY},       * then exports exactly<code>srcPath</code> and none of its children.      *       * @param srcPath         working copy path      * @param dstPath         path to export to      * @param pegRevision     the revision at which<code>url</code> will be firstly seen      *                        in the repository to make sure it's the one that is needed      * @param revision        the desired revision of the directory/file to be exported; used only      *                        when exporting from a repository      * @param eolStyle        a string that denotes a specific End-Of-Line charecter        * @param overwrite       if<span class="javakeyword">true</span>, will cause the export to overwrite       *                        files or directories      * @param depth           tree depth      * @return                value of the revision actually exported      * @throws SVNException      * @since  1.2, SVN 1.5      */
specifier|public
name|long
name|doExport
parameter_list|(
name|File
name|srcPath
parameter_list|,
specifier|final
name|File
name|dstPath
parameter_list|,
name|SVNRevision
name|pegRevision
parameter_list|,
name|SVNRevision
name|revision
parameter_list|,
name|String
name|eolStyle
parameter_list|,
specifier|final
name|boolean
name|overwrite
parameter_list|,
name|SVNDepth
name|depth
parameter_list|)
throws|throws
name|SVNException
block|{
name|long
name|exportedRevision
init|=
operator|-
literal|1
decl_stmt|;
if|if
condition|(
name|revision
operator|!=
name|SVNRevision
operator|.
name|BASE
operator|&&
name|revision
operator|!=
name|SVNRevision
operator|.
name|WORKING
operator|&&
name|revision
operator|!=
name|SVNRevision
operator|.
name|COMMITTED
operator|&&
name|revision
operator|!=
name|SVNRevision
operator|.
name|UNDEFINED
condition|)
block|{
name|SVNRepository
name|repository
init|=
name|createRepository
argument_list|(
literal|null
argument_list|,
name|srcPath
argument_list|,
literal|null
argument_list|,
name|pegRevision
argument_list|,
name|revision
argument_list|,
literal|null
argument_list|)
decl_stmt|;
name|long
name|revisionNumber
init|=
name|getRevisionNumber
argument_list|(
name|revision
argument_list|,
name|repository
argument_list|,
name|srcPath
argument_list|)
decl_stmt|;
name|exportedRevision
operator|=
name|doRemoteExport
argument_list|(
name|repository
argument_list|,
name|revisionNumber
argument_list|,
name|dstPath
argument_list|,
name|eolStyle
argument_list|,
name|overwrite
argument_list|,
name|depth
argument_list|)
expr_stmt|;
block|}
else|else
block|{
if|if
condition|(
name|revision
operator|==
name|SVNRevision
operator|.
name|UNDEFINED
condition|)
block|{
name|revision
operator|=
name|SVNRevision
operator|.
name|WORKING
expr_stmt|;
block|}
name|copyVersionedDir
argument_list|(
name|srcPath
argument_list|,
name|dstPath
argument_list|,
name|revision
argument_list|,
name|eolStyle
argument_list|,
name|overwrite
argument_list|,
name|depth
argument_list|)
expr_stmt|;
block|}
name|dispatchEvent
argument_list|(
name|SVNEventFactory
operator|.
name|createSVNEvent
argument_list|(
literal|null
argument_list|,
name|SVNNodeKind
operator|.
name|NONE
argument_list|,
literal|null
argument_list|,
name|exportedRevision
argument_list|,
name|SVNEventAction
operator|.
name|UPDATE_COMPLETED
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|)
argument_list|)
expr_stmt|;
return|return
name|exportedRevision
return|;
block|}
comment|/**      * Substitutes the beginning part of a Working Copy's URL with a new one.      *       *<p>       * When a repository root location or a URL schema is changed the old URL of the       * Working Copy which starts with<code>oldURL</code> should be substituted for a      * new URL beginning -<code>newURL</code>.      *       * @param  dst				a Working Copy item's path       * @param  oldURL			the old beginning part of the repository's URL that should      * 							be overwritten        * @param  newURL			a new beginning part for the repository location that      * 							will overwrite<code>oldURL</code>       * @param  recursive		if<span class="javakeyword">true</span> and<code>dst</code> is      * 							a directory then the entire tree will be relocated, otherwise if       *<span class="javakeyword">false</span> - only<code>dst</code> itself      * @throws SVNException      */
specifier|public
name|void
name|doRelocate
parameter_list|(
name|File
name|dst
parameter_list|,
name|SVNURL
name|oldURL
parameter_list|,
name|SVNURL
name|newURL
parameter_list|,
name|boolean
name|recursive
parameter_list|)
throws|throws
name|SVNException
block|{
name|SVNWCAccess
name|wcAccess
init|=
name|createWCAccess
argument_list|()
decl_stmt|;
try|try
block|{
name|SVNAdminArea
name|adminArea
init|=
name|wcAccess
operator|.
name|probeOpen
argument_list|(
name|dst
argument_list|,
literal|true
argument_list|,
name|recursive
condition|?
name|SVNWCAccess
operator|.
name|INFINITE_DEPTH
else|:
literal|0
argument_list|)
decl_stmt|;
name|String
name|name
init|=
name|dst
operator|.
name|equals
argument_list|(
name|adminArea
operator|.
name|getRoot
argument_list|()
argument_list|)
condition|?
name|adminArea
operator|.
name|getThisDirName
argument_list|()
else|:
name|dst
operator|.
name|getName
argument_list|()
decl_stmt|;
name|String
name|from
init|=
name|oldURL
operator|.
name|toString
argument_list|()
decl_stmt|;
name|String
name|to
init|=
name|newURL
operator|.
name|toString
argument_list|()
decl_stmt|;
if|if
condition|(
name|from
operator|.
name|endsWith
argument_list|(
literal|"/"
argument_list|)
condition|)
block|{
name|from
operator|=
name|from
operator|.
name|substring
argument_list|(
literal|0
argument_list|,
name|from
operator|.
name|length
argument_list|()
operator|-
literal|1
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|to
operator|.
name|endsWith
argument_list|(
literal|"/"
argument_list|)
condition|)
block|{
name|to
operator|=
name|to
operator|.
name|substring
argument_list|(
literal|0
argument_list|,
name|to
operator|.
name|length
argument_list|()
operator|-
literal|1
argument_list|)
expr_stmt|;
block|}
name|doRelocate
argument_list|(
name|adminArea
argument_list|,
name|name
argument_list|,
name|from
argument_list|,
name|to
argument_list|,
name|recursive
argument_list|,
operator|new
name|SVNHashMap
argument_list|()
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
name|wcAccess
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
block|}
comment|/**      * Canonicalizes all urls in the specified Working Copy.      *       * @param dst               a WC path           * @param omitDefaultPort   if<span class="javakeyword">true</span> then removes all      *                          port numbers from urls which equal to default ones, otherwise      *                          does not      * @param recursive         recurses an operation      * @throws SVNException      */
specifier|public
name|void
name|doCanonicalizeURLs
parameter_list|(
name|File
name|dst
parameter_list|,
name|boolean
name|omitDefaultPort
parameter_list|,
name|boolean
name|recursive
parameter_list|)
throws|throws
name|SVNException
block|{
name|SVNWCAccess
name|wcAccess
init|=
name|createWCAccess
argument_list|()
decl_stmt|;
try|try
block|{
name|SVNAdminAreaInfo
name|adminAreaInfo
init|=
name|wcAccess
operator|.
name|openAnchor
argument_list|(
name|dst
argument_list|,
literal|true
argument_list|,
name|recursive
condition|?
name|SVNWCAccess
operator|.
name|INFINITE_DEPTH
else|:
literal|0
argument_list|)
decl_stmt|;
name|SVNAdminArea
name|target
init|=
name|adminAreaInfo
operator|.
name|getTarget
argument_list|()
decl_stmt|;
name|SVNEntry
name|entry
init|=
name|wcAccess
operator|.
name|getEntry
argument_list|(
name|dst
argument_list|,
literal|false
argument_list|)
decl_stmt|;
name|String
name|name
init|=
name|target
operator|.
name|getThisDirName
argument_list|()
decl_stmt|;
if|if
condition|(
name|entry
operator|!=
literal|null
operator|&&
name|entry
operator|.
name|isFile
argument_list|()
condition|)
block|{
name|name
operator|=
name|entry
operator|.
name|getName
argument_list|()
expr_stmt|;
block|}
name|doCanonicalizeURLs
argument_list|(
name|adminAreaInfo
argument_list|,
name|target
argument_list|,
name|name
argument_list|,
name|omitDefaultPort
argument_list|,
name|recursive
argument_list|)
expr_stmt|;
if|if
condition|(
name|recursive
operator|&&
operator|!
name|isIgnoreExternals
argument_list|()
condition|)
block|{
for|for
control|(
name|Iterator
name|externals
init|=
name|adminAreaInfo
operator|.
name|getNewExternals
argument_list|()
operator|.
name|keySet
argument_list|()
operator|.
name|iterator
argument_list|()
init|;
name|externals
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|String
name|path
init|=
operator|(
name|String
operator|)
name|externals
operator|.
name|next
argument_list|()
decl_stmt|;
name|String
name|external
init|=
operator|(
name|String
operator|)
name|adminAreaInfo
operator|.
name|getNewExternals
argument_list|()
operator|.
name|get
argument_list|(
name|path
argument_list|)
decl_stmt|;
name|SVNExternal
index|[]
name|exts
init|=
name|SVNExternal
operator|.
name|parseExternals
argument_list|(
name|path
argument_list|,
name|external
argument_list|)
decl_stmt|;
name|File
name|owner
init|=
operator|new
name|File
argument_list|(
name|adminAreaInfo
operator|.
name|getAnchor
argument_list|()
operator|.
name|getRoot
argument_list|()
argument_list|,
name|path
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|exts
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
name|File
name|externalFile
init|=
operator|new
name|File
argument_list|(
name|owner
argument_list|,
name|exts
index|[
name|i
index|]
operator|.
name|getPath
argument_list|()
argument_list|)
decl_stmt|;
try|try
block|{
name|doCanonicalizeURLs
argument_list|(
name|externalFile
argument_list|,
name|omitDefaultPort
argument_list|,
literal|true
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|SVNCancelException
name|e
parameter_list|)
block|{
throw|throw
name|e
throw|;
block|}
catch|catch
parameter_list|(
name|SVNException
name|e
parameter_list|)
block|{
name|getDebugLog
argument_list|()
operator|.
name|logFine
argument_list|(
name|SVNLogType
operator|.
name|WC
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
block|}
finally|finally
block|{
name|wcAccess
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
block|}
comment|/**      * Sets whether keywords must be expanded during an export operation.      *       * @param expand<span class="javakeyword">true</span> to expand;      *               otherwise<span class="javakeyword">false</span>      * @since 1.3      */
specifier|public
name|void
name|setExportExpandsKeywords
parameter_list|(
name|boolean
name|expand
parameter_list|)
block|{
name|myIsExportExpandsKeywords
operator|=
name|expand
expr_stmt|;
block|}
comment|/**      * Says whether keywords expansion during export operations is turned on or not.      * @return<span class="javakeyword">true</span> if expanding keywords;      *<span class="javakeyword">false</span> otherwise      * @since  1.3      */
specifier|public
name|boolean
name|isExportExpandsKeywords
parameter_list|()
block|{
return|return
name|myIsExportExpandsKeywords
return|;
block|}
specifier|private
name|void
name|copyVersionedDir
parameter_list|(
name|File
name|from
parameter_list|,
name|File
name|to
parameter_list|,
name|SVNRevision
name|revision
parameter_list|,
name|String
name|eolStyle
parameter_list|,
name|boolean
name|force
parameter_list|,
name|SVNDepth
name|depth
parameter_list|)
throws|throws
name|SVNException
block|{
name|SVNWCAccess
name|wcAccess
init|=
name|createWCAccess
argument_list|()
decl_stmt|;
name|SVNAdminArea
name|adminArea
init|=
name|wcAccess
operator|.
name|probeOpen
argument_list|(
name|from
argument_list|,
literal|false
argument_list|,
literal|0
argument_list|)
decl_stmt|;
name|SVNEntry
name|entry
init|=
literal|null
decl_stmt|;
try|try
block|{
name|entry
operator|=
name|wcAccess
operator|.
name|getVersionedEntry
argument_list|(
name|from
argument_list|,
literal|false
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|SVNException
name|svne
parameter_list|)
block|{
name|wcAccess
operator|.
name|close
argument_list|()
expr_stmt|;
throw|throw
name|svne
throw|;
block|}
if|if
condition|(
name|revision
operator|==
name|SVNRevision
operator|.
name|WORKING
operator|&&
name|entry
operator|.
name|isScheduledForDeletion
argument_list|()
condition|)
block|{
return|return;
block|}
if|if
condition|(
name|revision
operator|!=
name|SVNRevision
operator|.
name|WORKING
operator|&&
name|entry
operator|.
name|isScheduledForAddition
argument_list|()
condition|)
block|{
return|return;
block|}
if|if
condition|(
name|entry
operator|.
name|isDirectory
argument_list|()
condition|)
block|{
comment|// create dir
name|boolean
name|dirCreated
init|=
name|to
operator|.
name|mkdirs
argument_list|()
decl_stmt|;
if|if
condition|(
operator|!
name|to
operator|.
name|exists
argument_list|()
operator|||
name|to
operator|.
name|isFile
argument_list|()
condition|)
block|{
name|SVNErrorMessage
name|err
init|=
name|SVNErrorMessage
operator|.
name|create
argument_list|(
name|SVNErrorCode
operator|.
name|IO_ERROR
argument_list|,
literal|"Cannot create directory ''{0}''"
argument_list|,
name|to
argument_list|)
decl_stmt|;
name|SVNErrorManager
operator|.
name|error
argument_list|(
name|err
argument_list|,
name|SVNLogType
operator|.
name|WC
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
operator|!
name|dirCreated
operator|&&
name|to
operator|.
name|isDirectory
argument_list|()
operator|&&
operator|!
name|force
condition|)
block|{
name|SVNErrorMessage
name|err
init|=
name|SVNErrorMessage
operator|.
name|create
argument_list|(
name|SVNErrorCode
operator|.
name|WC_OBSTRUCTED_UPDATE
argument_list|,
literal|"''{0}'' already exists and will not be owerwritten unless forced"
argument_list|,
name|to
argument_list|)
decl_stmt|;
name|SVNErrorManager
operator|.
name|error
argument_list|(
name|err
argument_list|,
name|SVNLogType
operator|.
name|WC
argument_list|)
expr_stmt|;
block|}
comment|// read entries
for|for
control|(
name|Iterator
name|ents
init|=
name|adminArea
operator|.
name|entries
argument_list|(
literal|false
argument_list|)
init|;
name|ents
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|SVNEntry
name|childEntry
init|=
operator|(
name|SVNEntry
operator|)
name|ents
operator|.
name|next
argument_list|()
decl_stmt|;
if|if
condition|(
name|childEntry
operator|.
name|isDirectory
argument_list|()
condition|)
block|{
if|if
condition|(
name|adminArea
operator|.
name|getThisDirName
argument_list|()
operator|.
name|equals
argument_list|(
name|childEntry
operator|.
name|getName
argument_list|()
argument_list|)
condition|)
block|{
continue|continue;
block|}
if|else if
condition|(
name|depth
operator|==
name|SVNDepth
operator|.
name|INFINITY
condition|)
block|{
name|File
name|childTo
init|=
operator|new
name|File
argument_list|(
name|to
argument_list|,
name|childEntry
operator|.
name|getName
argument_list|()
argument_list|)
decl_stmt|;
name|File
name|childFrom
init|=
operator|new
name|File
argument_list|(
name|from
argument_list|,
name|childEntry
operator|.
name|getName
argument_list|()
argument_list|)
decl_stmt|;
name|copyVersionedDir
argument_list|(
name|childFrom
argument_list|,
name|childTo
argument_list|,
name|revision
argument_list|,
name|eolStyle
argument_list|,
name|force
argument_list|,
name|depth
argument_list|)
expr_stmt|;
block|}
block|}
if|else if
condition|(
name|childEntry
operator|.
name|isFile
argument_list|()
condition|)
block|{
name|File
name|childTo
init|=
operator|new
name|File
argument_list|(
name|to
argument_list|,
name|childEntry
operator|.
name|getName
argument_list|()
argument_list|)
decl_stmt|;
name|copyVersionedFile
argument_list|(
name|childTo
argument_list|,
name|adminArea
argument_list|,
name|childEntry
operator|.
name|getName
argument_list|()
argument_list|,
name|revision
argument_list|,
name|eolStyle
argument_list|)
expr_stmt|;
block|}
block|}
if|if
condition|(
operator|!
name|isIgnoreExternals
argument_list|()
operator|&&
name|depth
operator|==
name|SVNDepth
operator|.
name|INFINITY
operator|&&
name|entry
operator|.
name|getDepth
argument_list|()
operator|==
name|SVNDepth
operator|.
name|INFINITY
condition|)
block|{
name|SVNVersionedProperties
name|properties
init|=
name|adminArea
operator|.
name|getProperties
argument_list|(
name|adminArea
operator|.
name|getThisDirName
argument_list|()
argument_list|)
decl_stmt|;
name|String
name|externalsValue
init|=
name|properties
operator|.
name|getStringPropertyValue
argument_list|(
name|SVNProperty
operator|.
name|EXTERNALS
argument_list|)
decl_stmt|;
if|if
condition|(
name|externalsValue
operator|!=
literal|null
condition|)
block|{
name|SVNExternal
index|[]
name|externals
init|=
name|SVNExternal
operator|.
name|parseExternals
argument_list|(
name|adminArea
operator|.
name|getRoot
argument_list|()
operator|.
name|getAbsolutePath
argument_list|()
argument_list|,
name|externalsValue
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|externals
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
name|SVNExternal
name|info
init|=
name|externals
index|[
name|i
index|]
decl_stmt|;
name|File
name|srcPath
init|=
operator|new
name|File
argument_list|(
name|adminArea
operator|.
name|getRoot
argument_list|()
argument_list|,
name|info
operator|.
name|getPath
argument_list|()
argument_list|)
decl_stmt|;
name|File
name|dstPath
init|=
operator|new
name|File
argument_list|(
name|to
argument_list|,
name|info
operator|.
name|getPath
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|SVNPathUtil
operator|.
name|getSegmentsCount
argument_list|(
name|info
operator|.
name|getPath
argument_list|()
argument_list|)
operator|>
literal|1
condition|)
block|{
if|if
condition|(
operator|!
name|dstPath
operator|.
name|getParentFile
argument_list|()
operator|.
name|exists
argument_list|()
operator|&&
operator|!
name|dstPath
operator|.
name|getParentFile
argument_list|()
operator|.
name|mkdirs
argument_list|()
condition|)
block|{
name|SVNErrorManager
operator|.
name|error
argument_list|(
name|SVNErrorMessage
operator|.
name|create
argument_list|(
name|SVNErrorCode
operator|.
name|CLIENT_IS_DIRECTORY
argument_list|,
literal|"Could not create directory ''{0}''"
argument_list|,
name|dstPath
operator|.
name|getParentFile
argument_list|()
argument_list|)
argument_list|,
name|SVNLogType
operator|.
name|WC
argument_list|)
expr_stmt|;
block|}
block|}
name|copyVersionedDir
argument_list|(
name|srcPath
argument_list|,
name|dstPath
argument_list|,
name|revision
argument_list|,
name|eolStyle
argument_list|,
name|force
argument_list|,
name|SVNDepth
operator|.
name|INFINITY
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
if|else if
condition|(
name|entry
operator|.
name|isFile
argument_list|()
condition|)
block|{
name|copyVersionedFile
argument_list|(
name|to
argument_list|,
name|adminArea
argument_list|,
name|entry
operator|.
name|getName
argument_list|()
argument_list|,
name|revision
argument_list|,
name|eolStyle
argument_list|)
expr_stmt|;
block|}
name|wcAccess
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
specifier|private
name|void
name|copyVersionedFile
parameter_list|(
name|File
name|dstPath
parameter_list|,
name|SVNAdminArea
name|adminArea
parameter_list|,
name|String
name|fileName
parameter_list|,
name|SVNRevision
name|revision
parameter_list|,
name|String
name|eol
parameter_list|)
throws|throws
name|SVNException
block|{
name|SVNEntry
name|entry
init|=
name|adminArea
operator|.
name|getEntry
argument_list|(
name|fileName
argument_list|,
literal|false
argument_list|)
decl_stmt|;
if|if
condition|(
name|revision
operator|==
name|SVNRevision
operator|.
name|WORKING
operator|&&
name|entry
operator|.
name|isScheduledForDeletion
argument_list|()
condition|)
block|{
return|return;
block|}
if|if
condition|(
name|revision
operator|!=
name|SVNRevision
operator|.
name|WORKING
operator|&&
name|entry
operator|.
name|isScheduledForAddition
argument_list|()
condition|)
block|{
return|return;
block|}
name|boolean
name|modified
init|=
literal|false
decl_stmt|;
name|SVNVersionedProperties
name|props
init|=
literal|null
decl_stmt|;
name|long
name|timestamp
decl_stmt|;
if|if
condition|(
name|revision
operator|!=
name|SVNRevision
operator|.
name|WORKING
condition|)
block|{
name|props
operator|=
name|adminArea
operator|.
name|getBaseProperties
argument_list|(
name|fileName
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|props
operator|=
name|adminArea
operator|.
name|getProperties
argument_list|(
name|fileName
argument_list|)
expr_stmt|;
name|modified
operator|=
name|adminArea
operator|.
name|hasTextModifications
argument_list|(
name|fileName
argument_list|,
literal|false
argument_list|)
expr_stmt|;
block|}
name|boolean
name|special
init|=
name|props
operator|.
name|getPropertyValue
argument_list|(
name|SVNProperty
operator|.
name|SPECIAL
argument_list|)
operator|!=
literal|null
decl_stmt|;
name|boolean
name|executable
init|=
name|props
operator|.
name|getPropertyValue
argument_list|(
name|SVNProperty
operator|.
name|EXECUTABLE
argument_list|)
operator|!=
literal|null
decl_stmt|;
name|String
name|keywords
init|=
name|props
operator|.
name|getStringPropertyValue
argument_list|(
name|SVNProperty
operator|.
name|KEYWORDS
argument_list|)
decl_stmt|;
name|String
name|charsetProp
init|=
name|props
operator|.
name|getStringPropertyValue
argument_list|(
name|SVNProperty
operator|.
name|CHARSET
argument_list|)
decl_stmt|;
name|String
name|charset
init|=
name|SVNTranslator
operator|.
name|getCharset
argument_list|(
name|charsetProp
argument_list|,
name|adminArea
operator|.
name|getFile
argument_list|(
name|fileName
argument_list|)
operator|.
name|getPath
argument_list|()
argument_list|,
name|getOptions
argument_list|()
argument_list|)
decl_stmt|;
name|byte
index|[]
name|eols
init|=
name|eol
operator|!=
literal|null
condition|?
name|SVNTranslator
operator|.
name|getEOL
argument_list|(
name|eol
argument_list|,
name|getOptions
argument_list|()
argument_list|)
else|:
literal|null
decl_stmt|;
if|if
condition|(
name|eols
operator|==
literal|null
condition|)
block|{
name|eol
operator|=
name|props
operator|.
name|getStringPropertyValue
argument_list|(
name|SVNProperty
operator|.
name|EOL_STYLE
argument_list|)
expr_stmt|;
name|eols
operator|=
name|SVNTranslator
operator|.
name|getEOL
argument_list|(
name|eol
argument_list|,
name|getOptions
argument_list|()
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|modified
operator|&&
operator|!
name|special
condition|)
block|{
name|timestamp
operator|=
name|adminArea
operator|.
name|getFile
argument_list|(
name|fileName
argument_list|)
operator|.
name|lastModified
argument_list|()
expr_stmt|;
block|}
else|else
block|{
name|timestamp
operator|=
name|SVNDate
operator|.
name|parseDateAsMilliseconds
argument_list|(
name|entry
operator|.
name|getCommittedDate
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|Map
name|keywordsMap
init|=
literal|null
decl_stmt|;
if|if
condition|(
name|keywords
operator|!=
literal|null
condition|)
block|{
name|String
name|rev
init|=
name|Long
operator|.
name|toString
argument_list|(
name|entry
operator|.
name|getCommittedRevision
argument_list|()
argument_list|)
decl_stmt|;
name|String
name|author
decl_stmt|;
if|if
condition|(
name|modified
condition|)
block|{
name|author
operator|=
literal|"(local)"
expr_stmt|;
name|rev
operator|+=
literal|"M"
expr_stmt|;
block|}
else|else
block|{
name|author
operator|=
name|entry
operator|.
name|getAuthor
argument_list|()
expr_stmt|;
block|}
name|keywordsMap
operator|=
name|SVNTranslator
operator|.
name|computeKeywords
argument_list|(
name|keywords
argument_list|,
name|entry
operator|.
name|getURL
argument_list|()
argument_list|,
name|author
argument_list|,
name|entry
operator|.
name|getCommittedDate
argument_list|()
argument_list|,
name|rev
argument_list|,
name|getOptions
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|File
name|srcFile
init|=
name|revision
operator|==
name|SVNRevision
operator|.
name|WORKING
condition|?
name|adminArea
operator|.
name|getFile
argument_list|(
name|fileName
argument_list|)
else|:
name|adminArea
operator|.
name|getBaseFile
argument_list|(
name|fileName
argument_list|,
literal|false
argument_list|)
decl_stmt|;
name|SVNFileType
name|fileType
init|=
name|SVNFileType
operator|.
name|getType
argument_list|(
name|srcFile
argument_list|)
decl_stmt|;
if|if
condition|(
name|fileType
operator|==
name|SVNFileType
operator|.
name|SYMLINK
operator|&&
name|revision
operator|==
name|SVNRevision
operator|.
name|WORKING
condition|)
block|{
comment|// base will be translated OK, but working not.
name|File
name|tmpBaseFile
init|=
name|adminArea
operator|.
name|getBaseFile
argument_list|(
name|fileName
argument_list|,
literal|true
argument_list|)
decl_stmt|;
try|try
block|{
name|SVNTranslator
operator|.
name|translate
argument_list|(
name|srcFile
argument_list|,
name|tmpBaseFile
argument_list|,
name|charset
argument_list|,
name|eols
argument_list|,
name|keywordsMap
argument_list|,
name|special
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|SVNTranslator
operator|.
name|translate
argument_list|(
name|tmpBaseFile
argument_list|,
name|dstPath
argument_list|,
name|charset
argument_list|,
name|eols
argument_list|,
name|keywordsMap
argument_list|,
name|special
argument_list|,
literal|true
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
name|tmpBaseFile
operator|.
name|delete
argument_list|()
expr_stmt|;
block|}
block|}
else|else
block|{
name|SVNTranslator
operator|.
name|translate
argument_list|(
name|srcFile
argument_list|,
name|dstPath
argument_list|,
name|charset
argument_list|,
name|eols
argument_list|,
name|keywordsMap
argument_list|,
name|special
argument_list|,
literal|true
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|executable
condition|)
block|{
name|SVNFileUtil
operator|.
name|setExecutable
argument_list|(
name|dstPath
argument_list|,
literal|true
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
operator|!
name|special
operator|&&
name|timestamp
operator|>
literal|0
condition|)
block|{
name|dstPath
operator|.
name|setLastModified
argument_list|(
name|timestamp
argument_list|)
expr_stmt|;
block|}
block|}
specifier|private
name|long
name|doRemoteExport
parameter_list|(
name|SVNRepository
name|repository
parameter_list|,
specifier|final
name|long
name|revNumber
parameter_list|,
name|File
name|dstPath
parameter_list|,
name|String
name|eolStyle
parameter_list|,
name|boolean
name|force
parameter_list|,
name|SVNDepth
name|depth
parameter_list|)
throws|throws
name|SVNException
block|{
name|SVNNodeKind
name|dstKind
init|=
name|repository
operator|.
name|checkPath
argument_list|(
literal|""
argument_list|,
name|revNumber
argument_list|)
decl_stmt|;
if|if
condition|(
name|dstKind
operator|==
name|SVNNodeKind
operator|.
name|DIR
condition|)
block|{
name|SVNExportEditor
name|editor
init|=
operator|new
name|SVNExportEditor
argument_list|(
name|this
argument_list|,
name|repository
operator|.
name|getLocation
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|,
name|dstPath
argument_list|,
name|force
argument_list|,
name|eolStyle
argument_list|,
name|isExportExpandsKeywords
argument_list|()
argument_list|,
name|getOptions
argument_list|()
argument_list|)
decl_stmt|;
name|repository
operator|.
name|update
argument_list|(
name|revNumber
argument_list|,
literal|null
argument_list|,
name|depth
argument_list|,
literal|false
argument_list|,
operator|new
name|ISVNReporterBaton
argument_list|()
block|{
specifier|public
name|void
name|report
parameter_list|(
name|ISVNReporter
name|reporter
parameter_list|)
throws|throws
name|SVNException
block|{
name|reporter
operator|.
name|setPath
argument_list|(
literal|""
argument_list|,
literal|null
argument_list|,
name|revNumber
argument_list|,
name|SVNDepth
operator|.
name|INFINITY
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|reporter
operator|.
name|finishReport
argument_list|()
expr_stmt|;
block|}
block|}
argument_list|,
name|SVNCancellableEditor
operator|.
name|newInstance
argument_list|(
name|editor
argument_list|,
name|this
argument_list|,
name|getDebugLog
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
comment|// nothing may be created.
name|SVNFileType
name|fileType
init|=
name|SVNFileType
operator|.
name|getType
argument_list|(
name|dstPath
argument_list|)
decl_stmt|;
if|if
condition|(
name|fileType
operator|==
name|SVNFileType
operator|.
name|NONE
condition|)
block|{
name|editor
operator|.
name|openRoot
argument_list|(
name|revNumber
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
operator|!
name|isIgnoreExternals
argument_list|()
operator|&&
name|depth
operator|==
name|SVNDepth
operator|.
name|INFINITY
condition|)
block|{
name|Map
name|externals
init|=
name|editor
operator|.
name|getCollectedExternals
argument_list|()
decl_stmt|;
name|handleExternals
argument_list|(
literal|null
argument_list|,
name|dstPath
argument_list|,
name|Collections
operator|.
name|EMPTY_MAP
argument_list|,
name|externals
argument_list|,
name|Collections
operator|.
name|EMPTY_MAP
argument_list|,
name|repository
operator|.
name|getLocation
argument_list|()
argument_list|,
name|repository
operator|.
name|getRepositoryRoot
argument_list|(
literal|true
argument_list|)
argument_list|,
name|depth
argument_list|,
literal|true
argument_list|,
literal|true
argument_list|)
expr_stmt|;
block|}
block|}
if|else if
condition|(
name|dstKind
operator|==
name|SVNNodeKind
operator|.
name|FILE
condition|)
block|{
name|String
name|url
init|=
name|repository
operator|.
name|getLocation
argument_list|()
operator|.
name|toString
argument_list|()
decl_stmt|;
if|if
condition|(
name|dstPath
operator|.
name|isDirectory
argument_list|()
condition|)
block|{
name|dstPath
operator|=
operator|new
name|File
argument_list|(
name|dstPath
argument_list|,
name|SVNEncodingUtil
operator|.
name|uriDecode
argument_list|(
name|SVNPathUtil
operator|.
name|tail
argument_list|(
name|url
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|dstPath
operator|.
name|exists
argument_list|()
condition|)
block|{
if|if
condition|(
operator|!
name|force
condition|)
block|{
name|SVNErrorMessage
name|err
init|=
name|SVNErrorMessage
operator|.
name|create
argument_list|(
name|SVNErrorCode
operator|.
name|WC_OBSTRUCTED_UPDATE
argument_list|,
literal|"Path ''{0}'' already exists"
argument_list|,
name|dstPath
argument_list|)
decl_stmt|;
name|SVNErrorManager
operator|.
name|error
argument_list|(
name|err
argument_list|,
name|SVNLogType
operator|.
name|WC
argument_list|)
expr_stmt|;
block|}
block|}
else|else
block|{
name|dstPath
operator|.
name|getParentFile
argument_list|()
operator|.
name|mkdirs
argument_list|()
expr_stmt|;
block|}
name|SVNProperties
name|properties
init|=
operator|new
name|SVNProperties
argument_list|()
decl_stmt|;
name|OutputStream
name|os
init|=
literal|null
decl_stmt|;
name|File
name|tmpFile
init|=
name|SVNFileUtil
operator|.
name|createUniqueFile
argument_list|(
name|dstPath
operator|.
name|getParentFile
argument_list|()
argument_list|,
literal|".export"
argument_list|,
literal|".tmp"
argument_list|,
literal|false
argument_list|)
decl_stmt|;
try|try
block|{
name|os
operator|=
name|SVNFileUtil
operator|.
name|openFileForWriting
argument_list|(
name|tmpFile
argument_list|)
expr_stmt|;
try|try
block|{
name|repository
operator|.
name|getFile
argument_list|(
literal|""
argument_list|,
name|revNumber
argument_list|,
name|properties
argument_list|,
operator|new
name|SVNCancellableOutputStream
argument_list|(
name|os
argument_list|,
name|this
argument_list|)
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
name|SVNFileUtil
operator|.
name|closeFile
argument_list|(
name|os
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|force
operator|&&
name|dstPath
operator|.
name|exists
argument_list|()
condition|)
block|{
name|SVNFileUtil
operator|.
name|deleteAll
argument_list|(
name|dstPath
argument_list|,
name|this
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
operator|!
name|isExportExpandsKeywords
argument_list|()
condition|)
block|{
name|properties
operator|.
name|put
argument_list|(
name|SVNProperty
operator|.
name|MIME_TYPE
argument_list|,
literal|"application/octet-stream"
argument_list|)
expr_stmt|;
block|}
name|boolean
name|binary
init|=
name|SVNProperty
operator|.
name|isBinaryMimeType
argument_list|(
name|properties
operator|.
name|getStringValue
argument_list|(
name|SVNProperty
operator|.
name|MIME_TYPE
argument_list|)
argument_list|)
decl_stmt|;
name|String
name|charset
init|=
name|SVNTranslator
operator|.
name|getCharset
argument_list|(
name|properties
operator|.
name|getStringValue
argument_list|(
name|SVNProperty
operator|.
name|CHARSET
argument_list|)
argument_list|,
name|url
argument_list|,
name|getOptions
argument_list|()
argument_list|)
decl_stmt|;
name|Map
name|keywords
init|=
name|SVNTranslator
operator|.
name|computeKeywords
argument_list|(
name|properties
operator|.
name|getStringValue
argument_list|(
name|SVNProperty
operator|.
name|KEYWORDS
argument_list|)
argument_list|,
name|url
argument_list|,
name|properties
operator|.
name|getStringValue
argument_list|(
name|SVNProperty
operator|.
name|LAST_AUTHOR
argument_list|)
argument_list|,
name|properties
operator|.
name|getStringValue
argument_list|(
name|SVNProperty
operator|.
name|COMMITTED_DATE
argument_list|)
argument_list|,
name|properties
operator|.
name|getStringValue
argument_list|(
name|SVNProperty
operator|.
name|COMMITTED_REVISION
argument_list|)
argument_list|,
name|getOptions
argument_list|()
argument_list|)
decl_stmt|;
name|byte
index|[]
name|eols
init|=
literal|null
decl_stmt|;
if|if
condition|(
name|SVNProperty
operator|.
name|EOL_STYLE_NATIVE
operator|.
name|equals
argument_list|(
name|properties
operator|.
name|getStringValue
argument_list|(
name|SVNProperty
operator|.
name|EOL_STYLE
argument_list|)
argument_list|)
condition|)
block|{
name|eols
operator|=
name|SVNTranslator
operator|.
name|getEOL
argument_list|(
name|eolStyle
operator|!=
literal|null
condition|?
name|eolStyle
else|:
name|properties
operator|.
name|getStringValue
argument_list|(
name|SVNProperty
operator|.
name|EOL_STYLE
argument_list|)
argument_list|,
name|getOptions
argument_list|()
argument_list|)
expr_stmt|;
block|}
if|else if
condition|(
name|properties
operator|.
name|containsName
argument_list|(
name|SVNProperty
operator|.
name|EOL_STYLE
argument_list|)
condition|)
block|{
name|eols
operator|=
name|SVNTranslator
operator|.
name|getEOL
argument_list|(
name|properties
operator|.
name|getStringValue
argument_list|(
name|SVNProperty
operator|.
name|EOL_STYLE
argument_list|)
argument_list|,
name|getOptions
argument_list|()
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|binary
condition|)
block|{
name|charset
operator|=
literal|null
expr_stmt|;
name|eols
operator|=
literal|null
expr_stmt|;
name|keywords
operator|=
literal|null
expr_stmt|;
block|}
name|SVNTranslator
operator|.
name|translate
argument_list|(
name|tmpFile
argument_list|,
name|dstPath
argument_list|,
name|charset
argument_list|,
name|eols
argument_list|,
name|keywords
argument_list|,
name|properties
operator|.
name|getStringValue
argument_list|(
name|SVNProperty
operator|.
name|SPECIAL
argument_list|)
operator|!=
literal|null
argument_list|,
literal|true
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
name|SVNFileUtil
operator|.
name|deleteFile
argument_list|(
name|tmpFile
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|properties
operator|.
name|getStringValue
argument_list|(
name|SVNProperty
operator|.
name|EXECUTABLE
argument_list|)
operator|!=
literal|null
condition|)
block|{
name|SVNFileUtil
operator|.
name|setExecutable
argument_list|(
name|dstPath
argument_list|,
literal|true
argument_list|)
expr_stmt|;
block|}
name|dispatchEvent
argument_list|(
name|SVNEventFactory
operator|.
name|createSVNEvent
argument_list|(
name|dstPath
argument_list|,
name|SVNNodeKind
operator|.
name|FILE
argument_list|,
literal|null
argument_list|,
name|SVNRepository
operator|.
name|INVALID_REVISION
argument_list|,
name|SVNEventAction
operator|.
name|UPDATE_ADD
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|)
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|SVNErrorMessage
name|err
init|=
name|SVNErrorMessage
operator|.
name|create
argument_list|(
name|SVNErrorCode
operator|.
name|RA_ILLEGAL_URL
argument_list|,
literal|"URL ''{0}'' doesn't exist"
argument_list|,
name|repository
operator|.
name|getLocation
argument_list|()
argument_list|)
decl_stmt|;
name|SVNErrorManager
operator|.
name|error
argument_list|(
name|err
argument_list|,
name|SVNLogType
operator|.
name|WC
argument_list|)
expr_stmt|;
block|}
return|return
name|revNumber
return|;
block|}
specifier|private
name|void
name|doCanonicalizeURLs
parameter_list|(
name|SVNAdminAreaInfo
name|adminAreaInfo
parameter_list|,
name|SVNAdminArea
name|adminArea
parameter_list|,
name|String
name|name
parameter_list|,
name|boolean
name|omitDefaultPort
parameter_list|,
name|boolean
name|recursive
parameter_list|)
throws|throws
name|SVNException
block|{
name|boolean
name|save
init|=
literal|false
decl_stmt|;
name|checkCancelled
argument_list|()
expr_stmt|;
if|if
condition|(
operator|!
name|adminArea
operator|.
name|getThisDirName
argument_list|()
operator|.
name|equals
argument_list|(
name|name
argument_list|)
condition|)
block|{
name|SVNEntry
name|entry
init|=
name|adminArea
operator|.
name|getEntry
argument_list|(
name|name
argument_list|,
literal|true
argument_list|)
decl_stmt|;
name|save
operator|=
name|canonicalizeEntry
argument_list|(
name|entry
argument_list|,
name|omitDefaultPort
argument_list|)
expr_stmt|;
name|adminArea
operator|.
name|getWCProperties
argument_list|(
name|name
argument_list|)
operator|.
name|setPropertyValue
argument_list|(
name|SVNProperty
operator|.
name|WC_URL
argument_list|,
literal|null
argument_list|)
expr_stmt|;
if|if
condition|(
name|save
condition|)
block|{
name|adminArea
operator|.
name|saveEntries
argument_list|(
literal|false
argument_list|)
expr_stmt|;
block|}
return|return;
block|}
if|if
condition|(
operator|!
name|isIgnoreExternals
argument_list|()
condition|)
block|{
name|SVNPropertyValue
name|externalsValue
init|=
name|adminArea
operator|.
name|getProperties
argument_list|(
name|adminArea
operator|.
name|getThisDirName
argument_list|()
argument_list|)
operator|.
name|getPropertyValue
argument_list|(
name|SVNProperty
operator|.
name|EXTERNALS
argument_list|)
decl_stmt|;
if|if
condition|(
name|externalsValue
operator|!=
literal|null
condition|)
block|{
name|String
name|ownerPath
init|=
name|adminArea
operator|.
name|getRelativePath
argument_list|(
name|adminAreaInfo
operator|.
name|getAnchor
argument_list|()
argument_list|)
decl_stmt|;
name|String
name|externals
init|=
name|externalsValue
operator|==
literal|null
condition|?
literal|null
else|:
name|externalsValue
operator|.
name|getString
argument_list|()
decl_stmt|;
name|adminAreaInfo
operator|.
name|addExternal
argument_list|(
name|ownerPath
argument_list|,
name|externals
argument_list|,
name|externals
argument_list|)
expr_stmt|;
if|if
condition|(
name|externalsValue
operator|!=
literal|null
condition|)
block|{
name|externalsValue
operator|=
name|SVNPropertyValue
operator|.
name|create
argument_list|(
name|canonicalizeExtenrals
argument_list|(
name|externals
argument_list|,
name|omitDefaultPort
argument_list|)
argument_list|)
expr_stmt|;
name|adminArea
operator|.
name|getProperties
argument_list|(
name|adminArea
operator|.
name|getThisDirName
argument_list|()
argument_list|)
operator|.
name|setPropertyValue
argument_list|(
name|SVNProperty
operator|.
name|EXTERNALS
argument_list|,
name|externalsValue
argument_list|)
expr_stmt|;
block|}
block|}
block|}
name|SVNEntry
name|rootEntry
init|=
name|adminArea
operator|.
name|getEntry
argument_list|(
name|adminArea
operator|.
name|getThisDirName
argument_list|()
argument_list|,
literal|true
argument_list|)
decl_stmt|;
name|save
operator|=
name|canonicalizeEntry
argument_list|(
name|rootEntry
argument_list|,
name|omitDefaultPort
argument_list|)
expr_stmt|;
name|adminArea
operator|.
name|getWCProperties
argument_list|(
name|adminArea
operator|.
name|getThisDirName
argument_list|()
argument_list|)
operator|.
name|setPropertyValue
argument_list|(
name|SVNProperty
operator|.
name|WC_URL
argument_list|,
literal|null
argument_list|)
expr_stmt|;
comment|// now all child entries that doesn't has repos/url has new values.
for|for
control|(
name|Iterator
name|ents
init|=
name|adminArea
operator|.
name|entries
argument_list|(
literal|true
argument_list|)
init|;
name|ents
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|SVNEntry
name|entry
init|=
operator|(
name|SVNEntry
operator|)
name|ents
operator|.
name|next
argument_list|()
decl_stmt|;
if|if
condition|(
name|adminArea
operator|.
name|getThisDirName
argument_list|()
operator|.
name|equals
argument_list|(
name|entry
operator|.
name|getName
argument_list|()
argument_list|)
condition|)
block|{
continue|continue;
block|}
name|checkCancelled
argument_list|()
expr_stmt|;
if|if
condition|(
name|recursive
operator|&&
name|entry
operator|.
name|isDirectory
argument_list|()
operator|&&
operator|(
name|entry
operator|.
name|isScheduledForAddition
argument_list|()
operator|||
operator|!
name|entry
operator|.
name|isDeleted
argument_list|()
operator|)
operator|&&
operator|!
name|entry
operator|.
name|isAbsent
argument_list|()
condition|)
block|{
name|SVNAdminArea
name|childArea
init|=
name|adminArea
operator|.
name|getWCAccess
argument_list|()
operator|.
name|retrieve
argument_list|(
name|adminArea
operator|.
name|getFile
argument_list|(
name|entry
operator|.
name|getName
argument_list|()
argument_list|)
argument_list|)
decl_stmt|;
if|if
condition|(
name|childArea
operator|!=
literal|null
condition|)
block|{
name|doCanonicalizeURLs
argument_list|(
name|adminAreaInfo
argument_list|,
name|childArea
argument_list|,
literal|""
argument_list|,
name|omitDefaultPort
argument_list|,
name|recursive
argument_list|)
expr_stmt|;
block|}
block|}
name|save
operator||=
name|canonicalizeEntry
argument_list|(
name|entry
argument_list|,
name|omitDefaultPort
argument_list|)
expr_stmt|;
name|SVNVersionedProperties
name|properties
init|=
name|adminArea
operator|.
name|getWCProperties
argument_list|(
name|entry
operator|.
name|getName
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|properties
operator|!=
literal|null
condition|)
block|{
name|properties
operator|.
name|setPropertyValue
argument_list|(
name|SVNProperty
operator|.
name|WC_URL
argument_list|,
literal|null
argument_list|)
expr_stmt|;
block|}
block|}
if|if
condition|(
name|save
condition|)
block|{
name|adminArea
operator|.
name|saveEntries
argument_list|(
literal|true
argument_list|)
expr_stmt|;
block|}
block|}
specifier|private
specifier|static
name|String
name|canonicalizeExtenrals
parameter_list|(
name|String
name|externals
parameter_list|,
name|boolean
name|omitDefaultPort
parameter_list|)
throws|throws
name|SVNException
block|{
if|if
condition|(
name|externals
operator|==
literal|null
condition|)
block|{
return|return
literal|null
return|;
block|}
name|StringBuffer
name|canonicalized
init|=
operator|new
name|StringBuffer
argument_list|()
decl_stmt|;
for|for
control|(
name|StringTokenizer
name|lines
init|=
operator|new
name|StringTokenizer
argument_list|(
name|externals
argument_list|,
literal|"\r\n"
argument_list|,
literal|true
argument_list|)
init|;
name|lines
operator|.
name|hasMoreTokens
argument_list|()
condition|;
control|)
block|{
name|String
name|line
init|=
name|lines
operator|.
name|nextToken
argument_list|()
decl_stmt|;
if|if
condition|(
name|line
operator|.
name|trim
argument_list|()
operator|.
name|length
argument_list|()
operator|==
literal|0
operator|||
name|line
operator|.
name|trim
argument_list|()
operator|.
name|startsWith
argument_list|(
literal|"#"
argument_list|)
operator|||
name|line
operator|.
name|indexOf
argument_list|(
literal|'\r'
argument_list|)
operator|>=
literal|0
operator|||
name|line
operator|.
name|indexOf
argument_list|(
literal|'\n'
argument_list|)
operator|>=
literal|0
condition|)
block|{
name|canonicalized
operator|.
name|append
argument_list|(
name|line
argument_list|)
expr_stmt|;
continue|continue;
block|}
name|String
index|[]
name|tokens
init|=
name|line
operator|.
name|split
argument_list|(
literal|"[ \t]"
argument_list|)
decl_stmt|;
name|int
name|index
init|=
name|tokens
operator|.
name|length
operator|-
literal|1
decl_stmt|;
name|SVNURL
name|url
init|=
literal|null
decl_stmt|;
if|if
condition|(
name|index
operator|>=
literal|1
condition|)
block|{
try|try
block|{
name|url
operator|=
name|SVNURL
operator|.
name|parseURIEncoded
argument_list|(
name|tokens
index|[
name|index
index|]
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|SVNException
name|e
parameter_list|)
block|{
name|url
operator|=
literal|null
expr_stmt|;
block|}
block|}
name|SVNURL
name|canonicalURL
init|=
name|canonicalizeURL
argument_list|(
name|url
argument_list|,
name|omitDefaultPort
argument_list|)
decl_stmt|;
if|if
condition|(
name|canonicalURL
operator|==
literal|null
condition|)
block|{
name|canonicalized
operator|.
name|append
argument_list|(
name|line
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|canonicalized
operator|.
name|append
argument_list|(
name|tokens
index|[
literal|0
index|]
argument_list|)
expr_stmt|;
name|canonicalized
operator|.
name|append
argument_list|(
literal|' '
argument_list|)
expr_stmt|;
if|if
condition|(
name|index
operator|==
literal|2
condition|)
block|{
name|canonicalized
operator|.
name|append
argument_list|(
name|tokens
index|[
literal|1
index|]
argument_list|)
expr_stmt|;
name|canonicalized
operator|.
name|append
argument_list|(
literal|' '
argument_list|)
expr_stmt|;
block|}
name|canonicalized
operator|.
name|append
argument_list|(
name|canonicalURL
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
return|return
name|canonicalized
operator|.
name|toString
argument_list|()
return|;
block|}
specifier|private
specifier|static
name|boolean
name|canonicalizeEntry
parameter_list|(
name|SVNEntry
name|entry
parameter_list|,
name|boolean
name|omitDefaultPort
parameter_list|)
throws|throws
name|SVNException
block|{
name|boolean
name|updated
init|=
literal|false
decl_stmt|;
name|SVNURL
name|root
init|=
name|canonicalizeURL
argument_list|(
name|entry
operator|.
name|getRepositoryRootURL
argument_list|()
argument_list|,
name|omitDefaultPort
argument_list|)
decl_stmt|;
if|if
condition|(
name|root
operator|!=
literal|null
condition|)
block|{
name|updated
operator||=
name|entry
operator|.
name|setRepositoryRootURL
argument_list|(
name|root
argument_list|)
expr_stmt|;
block|}
name|SVNURL
name|url
init|=
name|canonicalizeURL
argument_list|(
name|entry
operator|.
name|getSVNURL
argument_list|()
argument_list|,
name|omitDefaultPort
argument_list|)
decl_stmt|;
if|if
condition|(
name|url
operator|!=
literal|null
condition|)
block|{
name|updated
operator||=
name|entry
operator|.
name|setURL
argument_list|(
name|url
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|SVNURL
name|copyFrom
init|=
name|canonicalizeURL
argument_list|(
name|entry
operator|.
name|getCopyFromSVNURL
argument_list|()
argument_list|,
name|omitDefaultPort
argument_list|)
decl_stmt|;
if|if
condition|(
name|copyFrom
operator|!=
literal|null
condition|)
block|{
name|updated
operator||=
name|entry
operator|.
name|setCopyFromURL
argument_list|(
name|copyFrom
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
block|}
return|return
name|updated
return|;
block|}
specifier|private
specifier|static
name|SVNURL
name|canonicalizeURL
parameter_list|(
name|SVNURL
name|url
parameter_list|,
name|boolean
name|omitDefaultPort
parameter_list|)
throws|throws
name|SVNException
block|{
if|if
condition|(
name|url
operator|==
literal|null
operator|||
name|url
operator|.
name|getPort
argument_list|()
operator|<=
literal|0
condition|)
block|{
comment|// no url or file url.
return|return
literal|null
return|;
block|}
name|int
name|defaultPort
init|=
name|SVNURL
operator|.
name|getDefaultPortNumber
argument_list|(
name|url
operator|.
name|getProtocol
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|defaultPort
operator|<=
literal|0
condition|)
block|{
comment|// file or svn+ext URL.
return|return
literal|null
return|;
block|}
if|if
condition|(
name|omitDefaultPort
condition|)
block|{
comment|// remove port if it is same as default.
if|if
condition|(
name|url
operator|.
name|hasPort
argument_list|()
operator|&&
name|url
operator|.
name|getPort
argument_list|()
operator|==
name|defaultPort
condition|)
block|{
return|return
name|SVNURL
operator|.
name|create
argument_list|(
name|url
operator|.
name|getProtocol
argument_list|()
argument_list|,
name|url
operator|.
name|getUserInfo
argument_list|()
argument_list|,
name|url
operator|.
name|getHost
argument_list|()
argument_list|,
operator|-
literal|1
argument_list|,
name|url
operator|.
name|getPath
argument_list|()
argument_list|,
literal|false
argument_list|)
return|;
block|}
block|}
if|else if
condition|(
operator|!
name|url
operator|.
name|hasPort
argument_list|()
condition|)
block|{
comment|// set port if there is no port set.
return|return
name|SVNURL
operator|.
name|create
argument_list|(
name|url
operator|.
name|getProtocol
argument_list|()
argument_list|,
name|url
operator|.
name|getUserInfo
argument_list|()
argument_list|,
name|url
operator|.
name|getHost
argument_list|()
argument_list|,
name|url
operator|.
name|getPort
argument_list|()
argument_list|,
name|url
operator|.
name|getPath
argument_list|()
argument_list|,
literal|false
argument_list|)
return|;
block|}
return|return
literal|null
return|;
block|}
specifier|private
name|void
name|handleExternals
parameter_list|(
name|SVNWCAccess
name|wcAccess
parameter_list|,
name|File
name|root
parameter_list|,
name|Map
name|oldExternals
parameter_list|,
name|Map
name|newExternals
parameter_list|,
name|Map
name|depths
parameter_list|,
name|SVNURL
name|fromURL
parameter_list|,
name|SVNURL
name|rootURL
parameter_list|,
name|SVNDepth
name|requestedDepth
parameter_list|,
name|boolean
name|isExport
parameter_list|,
name|boolean
name|updateUnchanged
parameter_list|)
throws|throws
name|SVNException
block|{
name|Set
name|diff
init|=
operator|new
name|SVNHashSet
argument_list|()
decl_stmt|;
if|if
condition|(
name|oldExternals
operator|!=
literal|null
condition|)
block|{
name|diff
operator|.
name|addAll
argument_list|(
name|oldExternals
operator|.
name|keySet
argument_list|()
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|newExternals
operator|!=
literal|null
condition|)
block|{
name|diff
operator|.
name|addAll
argument_list|(
name|newExternals
operator|.
name|keySet
argument_list|()
argument_list|)
expr_stmt|;
block|}
comment|// now we have diff.
for|for
control|(
name|Iterator
name|diffPaths
init|=
name|diff
operator|.
name|iterator
argument_list|()
init|;
name|diffPaths
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|String
name|diffPath
init|=
operator|(
name|String
operator|)
name|diffPaths
operator|.
name|next
argument_list|()
decl_stmt|;
name|SVNDepth
name|ambientDepth
init|=
name|depths
operator|==
name|Collections
operator|.
name|EMPTY_MAP
condition|?
name|SVNDepth
operator|.
name|INFINITY
else|:
operator|(
name|SVNDepth
operator|)
name|depths
operator|.
name|get
argument_list|(
name|diffPath
argument_list|)
decl_stmt|;
if|if
condition|(
name|ambientDepth
operator|==
literal|null
condition|)
block|{
comment|// TODO convert diffpath to full path.
name|SVNErrorMessage
name|err
init|=
name|SVNErrorMessage
operator|.
name|create
argument_list|(
name|SVNErrorCode
operator|.
name|WC_CORRUPT
argument_list|,
literal|"Traversal of ''{0}'' found no ambient depth"
argument_list|,
name|diffPath
argument_list|)
decl_stmt|;
name|SVNErrorManager
operator|.
name|error
argument_list|(
name|err
argument_list|,
name|SVNLogType
operator|.
name|WC
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
operator|!
name|ambientDepth
operator|.
name|isRecursive
argument_list|()
operator|||
operator|!
name|requestedDepth
operator|.
name|isRecursive
argument_list|()
condition|)
block|{
comment|// skip externals - either folder depth is not recursive,
comment|// or requested depth is not recursive.
continue|continue;
block|}
name|String
name|oldValue
init|=
operator|(
name|String
operator|)
name|oldExternals
operator|.
name|get
argument_list|(
name|diffPath
argument_list|)
decl_stmt|;
name|String
name|newValue
init|=
operator|(
name|String
operator|)
name|newExternals
operator|.
name|get
argument_list|(
name|diffPath
argument_list|)
decl_stmt|;
comment|// TODO convert diffpath to full path.
name|SVNExternal
index|[]
name|previous
init|=
name|oldValue
operator|!=
literal|null
condition|?
name|SVNExternal
operator|.
name|parseExternals
argument_list|(
name|diffPath
argument_list|,
name|oldValue
argument_list|)
else|:
literal|null
decl_stmt|;
name|SVNExternal
index|[]
name|current
init|=
name|newValue
operator|!=
literal|null
condition|?
name|SVNExternal
operator|.
name|parseExternals
argument_list|(
name|diffPath
argument_list|,
name|newValue
argument_list|)
else|:
literal|null
decl_stmt|;
name|Map
name|oldParsedExternals
init|=
operator|new
name|LinkedHashMap
argument_list|()
decl_stmt|;
name|Map
name|newParsedExternals
init|=
operator|new
name|LinkedHashMap
argument_list|()
decl_stmt|;
comment|// put to another hashes.
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|current
operator|!=
literal|null
operator|&&
name|i
operator|<
name|current
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
name|newParsedExternals
operator|.
name|put
argument_list|(
name|current
index|[
name|i
index|]
operator|.
name|getPath
argument_list|()
argument_list|,
name|current
index|[
name|i
index|]
argument_list|)
expr_stmt|;
block|}
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|previous
operator|!=
literal|null
operator|&&
name|i
operator|<
name|previous
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
name|oldParsedExternals
operator|.
name|put
argument_list|(
name|previous
index|[
name|i
index|]
operator|.
name|getPath
argument_list|()
argument_list|,
name|previous
index|[
name|i
index|]
argument_list|)
expr_stmt|;
block|}
comment|// finally handle changes.
name|ExternalDiff
name|externalDiff
init|=
operator|new
name|ExternalDiff
argument_list|()
decl_stmt|;
name|externalDiff
operator|.
name|isExport
operator|=
name|isExport
expr_stmt|;
name|externalDiff
operator|.
name|isUpdateUnchanged
operator|=
name|updateUnchanged
expr_stmt|;
name|externalDiff
operator|.
name|rootURL
operator|=
name|rootURL
expr_stmt|;
for|for
control|(
name|Iterator
name|paths
init|=
name|oldParsedExternals
operator|.
name|keySet
argument_list|()
operator|.
name|iterator
argument_list|()
init|;
name|paths
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|String
name|path
init|=
operator|(
name|String
operator|)
name|paths
operator|.
name|next
argument_list|()
decl_stmt|;
name|externalDiff
operator|.
name|oldExternal
operator|=
operator|(
name|SVNExternal
operator|)
name|oldParsedExternals
operator|.
name|get
argument_list|(
name|path
argument_list|)
expr_stmt|;
name|externalDiff
operator|.
name|newExternal
operator|=
operator|(
name|SVNExternal
operator|)
name|newParsedExternals
operator|.
name|get
argument_list|(
name|path
argument_list|)
expr_stmt|;
name|externalDiff
operator|.
name|owner
operator|=
operator|new
name|File
argument_list|(
name|root
argument_list|,
name|diffPath
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|isExport
condition|)
block|{
name|externalDiff
operator|.
name|ownerURL
operator|=
name|getOwnerURL
argument_list|(
name|externalDiff
operator|.
name|owner
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|externalDiff
operator|.
name|ownerURL
operator|==
literal|null
condition|)
block|{
name|externalDiff
operator|.
name|ownerURL
operator|=
name|fromURL
operator|.
name|appendPath
argument_list|(
name|diffPath
argument_list|,
literal|false
argument_list|)
expr_stmt|;
block|}
name|handleExternalItemChange
argument_list|(
name|wcAccess
argument_list|,
name|externalDiff
operator|.
name|oldExternal
operator|.
name|getPath
argument_list|()
argument_list|,
name|externalDiff
argument_list|)
expr_stmt|;
block|}
for|for
control|(
name|Iterator
name|paths
init|=
name|newParsedExternals
operator|.
name|keySet
argument_list|()
operator|.
name|iterator
argument_list|()
init|;
name|paths
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|String
name|path
init|=
operator|(
name|String
operator|)
name|paths
operator|.
name|next
argument_list|()
decl_stmt|;
if|if
condition|(
operator|!
name|oldParsedExternals
operator|.
name|containsKey
argument_list|(
name|path
argument_list|)
condition|)
block|{
name|externalDiff
operator|.
name|oldExternal
operator|=
literal|null
expr_stmt|;
name|externalDiff
operator|.
name|newExternal
operator|=
operator|(
name|SVNExternal
operator|)
name|newParsedExternals
operator|.
name|get
argument_list|(
name|path
argument_list|)
expr_stmt|;
name|externalDiff
operator|.
name|owner
operator|=
operator|new
name|File
argument_list|(
name|root
argument_list|,
name|diffPath
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|isExport
condition|)
block|{
name|externalDiff
operator|.
name|ownerURL
operator|=
name|getOwnerURL
argument_list|(
name|externalDiff
operator|.
name|owner
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|externalDiff
operator|.
name|ownerURL
operator|==
literal|null
condition|)
block|{
name|externalDiff
operator|.
name|ownerURL
operator|=
name|fromURL
operator|.
name|appendPath
argument_list|(
name|diffPath
argument_list|,
literal|false
argument_list|)
expr_stmt|;
block|}
name|handleExternalItemChange
argument_list|(
name|wcAccess
argument_list|,
name|externalDiff
operator|.
name|newExternal
operator|.
name|getPath
argument_list|()
argument_list|,
name|externalDiff
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
specifier|private
name|SVNURL
name|getOwnerURL
parameter_list|(
name|File
name|root
parameter_list|)
block|{
if|if
condition|(
name|root
operator|!=
literal|null
operator|&&
name|SVNFileType
operator|.
name|getType
argument_list|(
name|root
argument_list|)
operator|==
name|SVNFileType
operator|.
name|DIRECTORY
condition|)
block|{
name|SVNWCAccess
name|access
init|=
name|createWCAccess
argument_list|()
decl_stmt|;
try|try
block|{
name|access
operator|.
name|open
argument_list|(
name|root
argument_list|,
literal|false
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|SVNEntry
name|entry
init|=
name|access
operator|.
name|getVersionedEntry
argument_list|(
name|root
argument_list|,
literal|false
argument_list|)
decl_stmt|;
if|if
condition|(
name|entry
operator|!=
literal|null
condition|)
block|{
return|return
name|entry
operator|.
name|getSVNURL
argument_list|()
return|;
block|}
block|}
catch|catch
parameter_list|(
name|SVNException
name|e
parameter_list|)
block|{
name|e
operator|.
name|printStackTrace
argument_list|()
expr_stmt|;
block|}
finally|finally
block|{
if|if
condition|(
name|access
operator|!=
literal|null
condition|)
block|{
try|try
block|{
name|access
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|SVNException
name|e
parameter_list|)
block|{
block|}
block|}
block|}
block|}
return|return
literal|null
return|;
block|}
specifier|private
name|void
name|handleExternalItemChange
parameter_list|(
name|SVNWCAccess
name|access
parameter_list|,
name|String
name|targetDir
parameter_list|,
name|ExternalDiff
name|externalDiff
parameter_list|)
throws|throws
name|SVNException
block|{
try|try
block|{
name|handleExternalChange
argument_list|(
name|access
argument_list|,
name|targetDir
argument_list|,
name|externalDiff
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|SVNException
name|svne
parameter_list|)
block|{
name|File
name|target
init|=
operator|new
name|File
argument_list|(
name|externalDiff
operator|.
name|owner
argument_list|,
name|targetDir
argument_list|)
decl_stmt|;
name|SVNEvent
name|event
init|=
name|SVNEventFactory
operator|.
name|createSVNEvent
argument_list|(
name|target
argument_list|,
name|SVNNodeKind
operator|.
name|UNKNOWN
argument_list|,
literal|null
argument_list|,
name|SVNRepository
operator|.
name|INVALID_REVISION
argument_list|,
name|SVNEventAction
operator|.
name|FAILED_EXTERNAL
argument_list|,
name|SVNEventAction
operator|.
name|UPDATE_EXTERNAL
argument_list|,
name|svne
operator|.
name|getErrorMessage
argument_list|()
argument_list|,
literal|null
argument_list|)
decl_stmt|;
name|dispatchEvent
argument_list|(
name|event
argument_list|)
expr_stmt|;
block|}
block|}
comment|/**      * oldURL is null when externals is added:       * jsvn ps svn:externals "path URL" .      * jsvn up .      *       *       * newURL is null when external is deleted:      * jsvn pd svn:externals .      * jsvn up .      *       * Also newURL or oldURL could be null, when external property is added or       * removed by update itself (someone else has changed it). For instance,       * oldURL is always null during checkout or export operation.      */
specifier|private
name|void
name|handleExternalChange
parameter_list|(
name|SVNWCAccess
name|access
parameter_list|,
name|String
name|targetDir
parameter_list|,
name|ExternalDiff
name|externalDiff
parameter_list|)
throws|throws
name|SVNException
block|{
name|File
name|target
init|=
operator|new
name|File
argument_list|(
name|externalDiff
operator|.
name|owner
argument_list|,
name|targetDir
argument_list|)
decl_stmt|;
name|SVNURL
name|oldURL
init|=
literal|null
decl_stmt|;
name|SVNURL
name|newURL
init|=
literal|null
decl_stmt|;
name|String
name|externalDefinition
init|=
literal|null
decl_stmt|;
if|if
condition|(
name|externalDiff
operator|.
name|oldExternal
operator|!=
literal|null
operator|&&
operator|!
name|externalDiff
operator|.
name|isExport
condition|)
block|{
name|oldURL
operator|=
name|externalDiff
operator|.
name|oldExternal
operator|.
name|resolveURL
argument_list|(
name|externalDiff
operator|.
name|rootURL
argument_list|,
name|externalDiff
operator|.
name|ownerURL
argument_list|)
expr_stmt|;
name|externalDefinition
operator|=
name|externalDiff
operator|.
name|oldExternal
operator|.
name|getRawValue
argument_list|()
expr_stmt|;
block|}
name|SVNRevision
name|externalRevision
init|=
name|SVNRevision
operator|.
name|UNDEFINED
decl_stmt|;
name|SVNRevision
name|externalPegRevision
init|=
name|SVNRevision
operator|.
name|UNDEFINED
decl_stmt|;
if|if
condition|(
name|externalDiff
operator|.
name|newExternal
operator|!=
literal|null
condition|)
block|{
name|newURL
operator|=
name|externalDiff
operator|.
name|newExternal
operator|.
name|resolveURL
argument_list|(
name|externalDiff
operator|.
name|rootURL
argument_list|,
name|externalDiff
operator|.
name|ownerURL
argument_list|)
expr_stmt|;
name|externalRevision
operator|=
name|externalDiff
operator|.
name|newExternal
operator|.
name|getRevision
argument_list|()
expr_stmt|;
name|externalPegRevision
operator|=
name|externalDiff
operator|.
name|newExternal
operator|.
name|getPegRevision
argument_list|()
expr_stmt|;
name|externalDefinition
operator|=
name|externalDiff
operator|.
name|newExternal
operator|.
name|getRawValue
argument_list|()
expr_stmt|;
block|}
if|if
condition|(
name|oldURL
operator|==
literal|null
operator|&&
name|newURL
operator|==
literal|null
condition|)
block|{
return|return;
block|}
name|SVNRevision
index|[]
name|revs
init|=
name|getExternalsHandler
argument_list|()
operator|.
name|handleExternal
argument_list|(
name|target
argument_list|,
name|newURL
argument_list|,
name|externalRevision
argument_list|,
name|externalPegRevision
argument_list|,
name|externalDefinition
argument_list|,
name|SVNRevision
operator|.
name|UNDEFINED
argument_list|)
decl_stmt|;
if|if
condition|(
name|revs
operator|==
literal|null
condition|)
block|{
name|SVNEvent
name|event
init|=
name|SVNEventFactory
operator|.
name|createSVNEvent
argument_list|(
name|target
argument_list|,
name|SVNNodeKind
operator|.
name|DIR
argument_list|,
literal|null
argument_list|,
name|SVNRepository
operator|.
name|INVALID_REVISION
argument_list|,
name|SVNEventAction
operator|.
name|SKIP
argument_list|,
name|SVNEventAction
operator|.
name|UPDATE_EXTERNAL
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|)
decl_stmt|;
name|dispatchEvent
argument_list|(
name|event
argument_list|)
expr_stmt|;
return|return;
block|}
name|externalRevision
operator|=
name|revs
operator|.
name|length
operator|>
literal|0
operator|&&
name|revs
index|[
literal|0
index|]
operator|!=
literal|null
condition|?
name|revs
index|[
literal|0
index|]
else|:
name|externalRevision
expr_stmt|;
name|externalPegRevision
operator|=
name|revs
operator|.
name|length
operator|>
literal|1
operator|&&
name|revs
index|[
literal|1
index|]
operator|!=
literal|null
condition|?
name|revs
index|[
literal|1
index|]
else|:
name|externalPegRevision
expr_stmt|;
name|SVNRepository
name|repository
init|=
literal|null
decl_stmt|;
name|SVNNodeKind
name|kind
init|=
literal|null
decl_stmt|;
name|SVNURL
name|reposRootURL
init|=
literal|null
decl_stmt|;
if|if
condition|(
name|newURL
operator|!=
literal|null
condition|)
block|{
name|long
index|[]
name|rev
init|=
block|{
name|SVNRepository
operator|.
name|INVALID_REVISION
block|}
decl_stmt|;
name|repository
operator|=
name|createRepository
argument_list|(
name|newURL
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|,
name|externalPegRevision
argument_list|,
name|externalRevision
argument_list|,
name|rev
argument_list|)
expr_stmt|;
name|reposRootURL
operator|=
name|repository
operator|.
name|getRepositoryRoot
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|kind
operator|=
name|repository
operator|.
name|checkPath
argument_list|(
literal|""
argument_list|,
name|rev
index|[
literal|0
index|]
argument_list|)
expr_stmt|;
if|if
condition|(
name|kind
operator|==
name|SVNNodeKind
operator|.
name|NONE
condition|)
block|{
name|SVNErrorMessage
name|err
init|=
name|SVNErrorMessage
operator|.
name|create
argument_list|(
name|SVNErrorCode
operator|.
name|RA_ILLEGAL_URL
argument_list|,
literal|"URL ''{0}'' at revision {1} doesn''t exist"
argument_list|,
operator|new
name|Object
index|[]
block|{
name|repository
operator|.
name|getLocation
argument_list|()
block|,
name|String
operator|.
name|valueOf
argument_list|(
name|rev
index|[
literal|0
index|]
argument_list|)
block|}
argument_list|)
decl_stmt|;
name|SVNErrorManager
operator|.
name|error
argument_list|(
name|err
argument_list|,
name|SVNLogType
operator|.
name|WC
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|kind
operator|!=
name|SVNNodeKind
operator|.
name|DIR
operator|&&
name|kind
operator|!=
name|SVNNodeKind
operator|.
name|FILE
condition|)
block|{
name|SVNErrorMessage
name|err
init|=
name|SVNErrorMessage
operator|.
name|create
argument_list|(
name|SVNErrorCode
operator|.
name|RA_ILLEGAL_URL
argument_list|,
literal|"URL ''{0}'' at revision {1} is not a file or a directory"
argument_list|,
operator|new
name|Object
index|[]
block|{
name|repository
operator|.
name|getLocation
argument_list|()
block|,
name|String
operator|.
name|valueOf
argument_list|(
name|rev
index|[
literal|0
index|]
argument_list|)
block|}
argument_list|)
decl_stmt|;
name|SVNErrorManager
operator|.
name|error
argument_list|(
name|err
argument_list|,
name|SVNLogType
operator|.
name|WC
argument_list|)
expr_stmt|;
block|}
block|}
try|try
block|{
name|setEventPathPrefix
argument_list|(
literal|"path"
argument_list|)
expr_stmt|;
if|if
condition|(
name|oldURL
operator|==
literal|null
condition|)
block|{
if|if
condition|(
name|kind
operator|==
name|SVNNodeKind
operator|.
name|DIR
condition|)
block|{
name|target
operator|.
name|mkdirs
argument_list|()
expr_stmt|;
name|dispatchEvent
argument_list|(
name|SVNEventFactory
operator|.
name|createSVNEvent
argument_list|(
name|target
argument_list|,
name|SVNNodeKind
operator|.
name|DIR
argument_list|,
literal|null
argument_list|,
name|SVNRepository
operator|.
name|INVALID_REVISION
argument_list|,
name|SVNEventAction
operator|.
name|UPDATE_EXTERNAL
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|)
argument_list|)
expr_stmt|;
if|if
condition|(
name|externalDiff
operator|.
name|isExport
condition|)
block|{
name|doExport
argument_list|(
name|newURL
argument_list|,
name|target
argument_list|,
name|externalPegRevision
argument_list|,
name|externalRevision
argument_list|,
literal|null
argument_list|,
literal|true
argument_list|,
name|SVNDepth
operator|.
name|INFINITY
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|doCheckout
argument_list|(
name|newURL
argument_list|,
name|target
argument_list|,
name|externalPegRevision
argument_list|,
name|externalRevision
argument_list|,
name|SVNDepth
operator|.
name|INFINITY
argument_list|,
literal|false
argument_list|)
expr_stmt|;
block|}
block|}
if|else if
condition|(
name|kind
operator|==
name|SVNNodeKind
operator|.
name|FILE
condition|)
block|{
name|dispatchEvent
argument_list|(
name|SVNEventFactory
operator|.
name|createSVNEvent
argument_list|(
name|target
argument_list|,
name|SVNNodeKind
operator|.
name|FILE
argument_list|,
literal|null
argument_list|,
name|SVNRepository
operator|.
name|INVALID_REVISION
argument_list|,
name|SVNEventAction
operator|.
name|UPDATE_EXTERNAL
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|)
argument_list|)
expr_stmt|;
if|if
condition|(
name|externalDiff
operator|.
name|isExport
condition|)
block|{
name|boolean
name|ignoreExternals
init|=
name|isIgnoreExternals
argument_list|()
decl_stmt|;
name|setIgnoreExternals
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|doExport
argument_list|(
name|newURL
argument_list|,
name|target
argument_list|,
name|externalPegRevision
argument_list|,
name|externalRevision
argument_list|,
literal|null
argument_list|,
literal|false
argument_list|,
name|SVNDepth
operator|.
name|INFINITY
argument_list|)
expr_stmt|;
name|setIgnoreExternals
argument_list|(
name|ignoreExternals
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|switchFileExternal
argument_list|(
name|access
argument_list|,
name|target
argument_list|,
name|newURL
argument_list|,
name|externalPegRevision
argument_list|,
name|externalRevision
argument_list|,
name|reposRootURL
argument_list|)
expr_stmt|;
block|}
block|}
block|}
if|else if
condition|(
name|newURL
operator|==
literal|null
condition|)
block|{
name|SVNWCAccess
name|wcAccess
init|=
name|createWCAccess
argument_list|()
decl_stmt|;
name|SVNAdminArea
name|area
init|=
name|wcAccess
operator|.
name|open
argument_list|(
name|target
argument_list|,
literal|true
argument_list|,
name|SVNWCAccess
operator|.
name|INFINITE_DEPTH
argument_list|)
decl_stmt|;
name|SVNException
name|error
init|=
literal|null
decl_stmt|;
try|try
block|{
name|area
operator|.
name|removeFromRevisionControl
argument_list|(
name|area
operator|.
name|getThisDirName
argument_list|()
argument_list|,
literal|true
argument_list|,
literal|false
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|SVNException
name|svne
parameter_list|)
block|{
name|error
operator|=
name|svne
expr_stmt|;
block|}
if|if
condition|(
name|error
operator|==
literal|null
operator|||
name|error
operator|.
name|getErrorMessage
argument_list|()
operator|.
name|getErrorCode
argument_list|()
operator|==
name|SVNErrorCode
operator|.
name|WC_LEFT_LOCAL_MOD
condition|)
block|{
try|try
block|{
name|wcAccess
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|SVNException
name|svne
parameter_list|)
block|{
name|error
operator|=
name|error
operator|==
literal|null
condition|?
name|svne
else|:
name|error
expr_stmt|;
block|}
block|}
if|if
condition|(
name|error
operator|!=
literal|null
operator|&&
name|error
operator|.
name|getErrorMessage
argument_list|()
operator|.
name|getErrorCode
argument_list|()
operator|!=
name|SVNErrorCode
operator|.
name|WC_LEFT_LOCAL_MOD
condition|)
block|{
throw|throw
name|error
throw|;
block|}
block|}
if|else if
condition|(
name|externalDiff
operator|.
name|isUpdateUnchanged
operator|||
operator|!
name|externalDiff
operator|.
name|compareExternals
argument_list|(
name|oldURL
argument_list|,
name|newURL
argument_list|)
condition|)
block|{
if|if
condition|(
name|kind
operator|==
name|SVNNodeKind
operator|.
name|DIR
condition|)
block|{
name|SVNFileType
name|fileType
init|=
name|SVNFileType
operator|.
name|getType
argument_list|(
name|target
argument_list|)
decl_stmt|;
name|boolean
name|empty
init|=
literal|false
decl_stmt|;
if|if
condition|(
name|fileType
operator|==
name|SVNFileType
operator|.
name|DIRECTORY
condition|)
block|{
name|File
index|[]
name|children
init|=
name|target
operator|.
name|listFiles
argument_list|()
decl_stmt|;
if|if
condition|(
name|children
operator|!=
literal|null
operator|&&
name|children
operator|.
name|length
operator|==
literal|0
condition|)
block|{
name|empty
operator|=
literal|true
expr_stmt|;
block|}
block|}
if|if
condition|(
name|fileType
operator|==
name|SVNFileType
operator|.
name|DIRECTORY
operator|&&
operator|!
name|empty
condition|)
block|{
name|dispatchEvent
argument_list|(
name|SVNEventFactory
operator|.
name|createSVNEvent
argument_list|(
name|target
argument_list|,
name|SVNNodeKind
operator|.
name|DIR
argument_list|,
literal|null
argument_list|,
name|SVNRepository
operator|.
name|INVALID_REVISION
argument_list|,
name|SVNEventAction
operator|.
name|UPDATE_EXTERNAL
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|)
argument_list|)
expr_stmt|;
name|SVNWCAccess
name|wcAccess
init|=
name|createWCAccess
argument_list|()
decl_stmt|;
name|SVNAdminArea
name|area
init|=
name|wcAccess
operator|.
name|open
argument_list|(
name|target
argument_list|,
literal|true
argument_list|,
literal|0
argument_list|)
decl_stmt|;
name|SVNEntry
name|entry
init|=
name|area
operator|.
name|getEntry
argument_list|(
name|area
operator|.
name|getThisDirName
argument_list|()
argument_list|,
literal|false
argument_list|)
decl_stmt|;
name|wcAccess
operator|.
name|close
argument_list|()
expr_stmt|;
name|String
name|url
init|=
name|entry
operator|.
name|getURL
argument_list|()
decl_stmt|;
if|if
condition|(
name|entry
operator|!=
literal|null
operator|&&
name|entry
operator|.
name|getURL
argument_list|()
operator|!=
literal|null
condition|)
block|{
if|if
condition|(
name|newURL
operator|.
name|toString
argument_list|()
operator|.
name|equals
argument_list|(
name|url
argument_list|)
condition|)
block|{
name|doUpdate
argument_list|(
name|target
argument_list|,
name|externalRevision
argument_list|,
name|SVNDepth
operator|.
name|UNKNOWN
argument_list|,
literal|true
argument_list|,
literal|false
argument_list|)
expr_stmt|;
return|return;
block|}
if|else if
condition|(
name|entry
operator|.
name|getRepositoryRoot
argument_list|()
operator|!=
literal|null
condition|)
block|{
if|if
condition|(
operator|!
name|SVNPathUtil
operator|.
name|isAncestor
argument_list|(
name|entry
operator|.
name|getRepositoryRoot
argument_list|()
argument_list|,
name|newURL
operator|.
name|toString
argument_list|()
argument_list|)
condition|)
block|{
name|SVNRepository
name|repos
init|=
name|createRepository
argument_list|(
name|newURL
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|,
literal|true
argument_list|)
decl_stmt|;
name|SVNURL
name|reposRoot
init|=
name|repos
operator|.
name|getRepositoryRoot
argument_list|(
literal|true
argument_list|)
decl_stmt|;
try|try
block|{
name|doRelocate
argument_list|(
name|target
argument_list|,
name|entry
operator|.
name|getSVNURL
argument_list|()
argument_list|,
name|reposRoot
argument_list|,
literal|true
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|SVNException
name|svne
parameter_list|)
block|{
if|if
condition|(
name|svne
operator|.
name|getErrorMessage
argument_list|()
operator|.
name|getErrorCode
argument_list|()
operator|==
name|SVNErrorCode
operator|.
name|WC_INVALID_RELOCATION
operator|||
name|svne
operator|.
name|getErrorMessage
argument_list|()
operator|.
name|getErrorCode
argument_list|()
operator|==
name|SVNErrorCode
operator|.
name|CLIENT_INVALID_RELOCATION
condition|)
block|{
name|deleteExternal
argument_list|(
name|target
argument_list|)
expr_stmt|;
name|target
operator|.
name|mkdirs
argument_list|()
expr_stmt|;
name|doCheckout
argument_list|(
name|newURL
argument_list|,
name|target
argument_list|,
name|externalPegRevision
argument_list|,
name|externalRevision
argument_list|,
name|SVNDepth
operator|.
name|INFINITY
argument_list|,
literal|false
argument_list|)
expr_stmt|;
return|return;
block|}
throw|throw
name|svne
throw|;
block|}
block|}
name|doSwitch
argument_list|(
name|target
argument_list|,
name|newURL
argument_list|,
name|externalPegRevision
argument_list|,
name|externalRevision
argument_list|,
name|SVNDepth
operator|.
name|INFINITY
argument_list|,
literal|false
argument_list|,
literal|true
argument_list|)
expr_stmt|;
return|return;
block|}
block|}
name|deleteExternal
argument_list|(
name|target
argument_list|)
expr_stmt|;
name|target
operator|.
name|mkdirs
argument_list|()
expr_stmt|;
name|dispatchEvent
argument_list|(
name|SVNEventFactory
operator|.
name|createSVNEvent
argument_list|(
name|target
argument_list|,
name|SVNNodeKind
operator|.
name|DIR
argument_list|,
literal|null
argument_list|,
name|SVNRepository
operator|.
name|INVALID_REVISION
argument_list|,
name|SVNEventAction
operator|.
name|UPDATE_EXTERNAL
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|)
argument_list|)
expr_stmt|;
name|doCheckout
argument_list|(
name|newURL
argument_list|,
name|target
argument_list|,
name|externalPegRevision
argument_list|,
name|externalRevision
argument_list|,
name|SVNDepth
operator|.
name|INFINITY
argument_list|,
literal|false
argument_list|)
expr_stmt|;
return|return;
block|}
if|if
condition|(
name|fileType
operator|!=
name|SVNFileType
operator|.
name|DIRECTORY
condition|)
block|{
name|target
operator|.
name|mkdirs
argument_list|()
expr_stmt|;
block|}
name|dispatchEvent
argument_list|(
name|SVNEventFactory
operator|.
name|createSVNEvent
argument_list|(
name|target
argument_list|,
name|SVNNodeKind
operator|.
name|DIR
argument_list|,
literal|null
argument_list|,
name|SVNRepository
operator|.
name|INVALID_REVISION
argument_list|,
name|SVNEventAction
operator|.
name|UPDATE_EXTERNAL
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|)
argument_list|)
expr_stmt|;
name|doCheckout
argument_list|(
name|newURL
argument_list|,
name|target
argument_list|,
name|externalPegRevision
argument_list|,
name|externalRevision
argument_list|,
name|SVNDepth
operator|.
name|INFINITY
argument_list|,
literal|true
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|dispatchEvent
argument_list|(
name|SVNEventFactory
operator|.
name|createSVNEvent
argument_list|(
name|target
argument_list|,
name|SVNNodeKind
operator|.
name|FILE
argument_list|,
literal|null
argument_list|,
name|SVNRepository
operator|.
name|INVALID_REVISION
argument_list|,
name|SVNEventAction
operator|.
name|UPDATE_EXTERNAL
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|)
argument_list|)
expr_stmt|;
name|switchFileExternal
argument_list|(
name|access
argument_list|,
name|target
argument_list|,
name|newURL
argument_list|,
name|externalPegRevision
argument_list|,
name|externalRevision
argument_list|,
name|reposRootURL
argument_list|)
expr_stmt|;
block|}
block|}
block|}
catch|catch
parameter_list|(
name|SVNCancelException
name|cancel
parameter_list|)
block|{
throw|throw
name|cancel
throw|;
block|}
catch|catch
parameter_list|(
name|SVNException
name|e
parameter_list|)
block|{
name|SVNDebugLog
operator|.
name|getDefaultLog
argument_list|()
operator|.
name|logFine
argument_list|(
name|SVNLogType
operator|.
name|WC
argument_list|,
name|e
argument_list|)
expr_stmt|;
name|SVNEvent
name|event
init|=
name|SVNEventFactory
operator|.
name|createSVNEvent
argument_list|(
name|target
argument_list|,
name|SVNNodeKind
operator|.
name|DIR
argument_list|,
literal|null
argument_list|,
name|SVNRepository
operator|.
name|INVALID_REVISION
argument_list|,
name|SVNEventAction
operator|.
name|SKIP
argument_list|,
name|SVNEventAction
operator|.
name|UPDATE_EXTERNAL
argument_list|,
name|e
operator|.
name|getErrorMessage
argument_list|()
argument_list|,
literal|null
argument_list|)
decl_stmt|;
name|dispatchEvent
argument_list|(
name|event
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
name|setEventPathPrefix
argument_list|(
literal|null
argument_list|)
expr_stmt|;
block|}
block|}
specifier|private
name|void
name|switchFileExternal
parameter_list|(
name|SVNWCAccess
name|wcAccess
parameter_list|,
name|File
name|path
parameter_list|,
name|SVNURL
name|url
parameter_list|,
name|SVNRevision
name|pegRevision
parameter_list|,
name|SVNRevision
name|revision
parameter_list|,
name|SVNURL
name|reposRootURL
parameter_list|)
throws|throws
name|SVNException
block|{
name|String
name|target
init|=
name|SVNWCManager
operator|.
name|getActualTarget
argument_list|(
name|path
argument_list|)
decl_stmt|;
name|File
name|anchor
init|=
literal|""
operator|.
name|equals
argument_list|(
name|target
argument_list|)
condition|?
name|path
else|:
name|path
operator|.
name|getParentFile
argument_list|()
decl_stmt|;
name|boolean
name|closeTarget
init|=
literal|false
decl_stmt|;
name|boolean
name|revertFile
init|=
literal|false
decl_stmt|;
name|boolean
name|removeFromRevisionControl
init|=
literal|false
decl_stmt|;
name|boolean
name|unlinkFile
init|=
literal|false
decl_stmt|;
name|boolean
name|cleanUp
init|=
literal|false
decl_stmt|;
name|boolean
name|ignoreExternals
init|=
name|isIgnoreExternals
argument_list|()
decl_stmt|;
name|SVNAdminArea
name|targetArea
init|=
literal|null
decl_stmt|;
try|try
block|{
try|try
block|{
name|targetArea
operator|=
name|wcAccess
operator|.
name|retrieve
argument_list|(
name|anchor
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|SVNException
name|svne
parameter_list|)
block|{
name|SVNErrorMessage
name|err
init|=
name|svne
operator|.
name|getErrorMessage
argument_list|()
decl_stmt|;
if|if
condition|(
name|err
operator|.
name|getErrorCode
argument_list|()
operator|==
name|SVNErrorCode
operator|.
name|WC_NOT_LOCKED
condition|)
block|{
name|SVNWCAccess
name|targetAccess
init|=
name|SVNWCAccess
operator|.
name|newInstance
argument_list|(
literal|null
argument_list|)
decl_stmt|;
name|targetArea
operator|=
name|targetAccess
operator|.
name|open
argument_list|(
name|anchor
argument_list|,
literal|true
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|closeTarget
operator|=
literal|true
expr_stmt|;
name|SVNURL
name|dstWCReposRootURL
init|=
name|getReposRoot
argument_list|(
name|anchor
argument_list|,
literal|null
argument_list|,
name|SVNRevision
operator|.
name|BASE
argument_list|,
name|targetArea
argument_list|,
name|targetAccess
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|reposRootURL
operator|.
name|equals
argument_list|(
name|dstWCReposRootURL
argument_list|)
condition|)
block|{
name|SVNErrorMessage
name|err1
init|=
name|SVNErrorMessage
operator|.
name|create
argument_list|(
name|SVNErrorCode
operator|.
name|RA_REPOS_ROOT_URL_MISMATCH
argument_list|,
literal|"Cannot insert a file external from ''{0}'' into a working copy from a different repository rooted at ''{1}''"
argument_list|,
operator|new
name|Object
index|[]
block|{
name|url
block|,
name|dstWCReposRootURL
block|}
argument_list|)
decl_stmt|;
name|SVNErrorManager
operator|.
name|error
argument_list|(
name|err1
argument_list|,
name|SVNLogType
operator|.
name|WC
argument_list|)
expr_stmt|;
block|}
block|}
else|else
block|{
throw|throw
name|svne
throw|;
block|}
block|}
if|if
condition|(
name|targetArea
operator|.
name|getFormatVersion
argument_list|()
operator|<
name|SVNAdminArea16
operator|.
name|WC_FORMAT
condition|)
block|{
name|dispatchEvent
argument_list|(
name|SVNEventFactory
operator|.
name|createSVNEvent
argument_list|(
name|path
argument_list|,
name|SVNNodeKind
operator|.
name|FILE
argument_list|,
literal|null
argument_list|,
name|SVNRepository
operator|.
name|INVALID_REVISION
argument_list|,
name|SVNEventAction
operator|.
name|SKIP
argument_list|,
name|SVNEventAction
operator|.
name|UPDATE_EXTERNAL
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|)
argument_list|)
expr_stmt|;
return|return;
block|}
name|SVNEntry
name|entry
init|=
name|targetArea
operator|.
name|getEntry
argument_list|(
name|target
argument_list|,
literal|false
argument_list|)
decl_stmt|;
if|if
condition|(
name|entry
operator|!=
literal|null
condition|)
block|{
if|if
condition|(
name|entry
operator|.
name|getExternalFilePath
argument_list|()
operator|==
literal|null
condition|)
block|{
name|SVNErrorMessage
name|err
init|=
name|SVNErrorMessage
operator|.
name|create
argument_list|(
name|SVNErrorCode
operator|.
name|CLIENT_FILE_EXTERNAL_OVERWRITE_VERSIONED
argument_list|,
literal|"The file external from ''{0}'' cannot overwrite the existing versioned item at ''{1}''"
argument_list|,
operator|new
name|Object
index|[]
block|{
name|url
block|,
name|path
block|}
argument_list|)
decl_stmt|;
name|SVNErrorManager
operator|.
name|error
argument_list|(
name|err
argument_list|,
name|SVNLogType
operator|.
name|WC
argument_list|)
expr_stmt|;
block|}
block|}
else|else
block|{
name|targetArea
operator|.
name|getVersionedEntry
argument_list|(
name|targetArea
operator|.
name|getThisDirName
argument_list|()
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|boolean
name|hasPropConflicts
init|=
name|targetArea
operator|.
name|hasPropConflict
argument_list|(
name|targetArea
operator|.
name|getThisDirName
argument_list|()
argument_list|)
decl_stmt|;
name|boolean
name|hasTreeConflicts
init|=
name|targetArea
operator|.
name|hasTreeConflict
argument_list|(
name|targetArea
operator|.
name|getThisDirName
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|hasPropConflicts
operator|||
name|hasTreeConflicts
condition|)
block|{
name|SVNErrorMessage
name|err
init|=
name|SVNErrorMessage
operator|.
name|create
argument_list|(
name|SVNErrorCode
operator|.
name|WC_FOUND_CONFLICT
argument_list|,
literal|"The file external from ''{0}'' cannot be written to ''{1}'' while ''{2}'' remains in conflict"
argument_list|,
operator|new
name|Object
index|[]
block|{
name|url
block|,
name|path
block|,
name|anchor
block|}
argument_list|)
decl_stmt|;
name|SVNErrorManager
operator|.
name|error
argument_list|(
name|err
argument_list|,
name|SVNLogType
operator|.
name|WC
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
operator|!
name|path
operator|.
name|exists
argument_list|()
condition|)
block|{
name|SVNFileUtil
operator|.
name|createEmptyFile
argument_list|(
name|path
argument_list|)
expr_stmt|;
name|unlinkFile
operator|=
literal|true
expr_stmt|;
block|}
name|ISVNEventHandler
name|eventHandler
init|=
name|targetArea
operator|.
name|getWCAccess
argument_list|()
operator|.
name|getEventHandler
argument_list|()
decl_stmt|;
try|try
block|{
name|targetArea
operator|.
name|getWCAccess
argument_list|()
operator|.
name|setEventHandler
argument_list|(
literal|null
argument_list|)
expr_stmt|;
name|SVNWCManager
operator|.
name|add
argument_list|(
name|path
argument_list|,
name|targetArea
argument_list|,
literal|null
argument_list|,
name|SVNRepository
operator|.
name|INVALID_REVISION
argument_list|,
name|SVNDepth
operator|.
name|INFINITY
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|SVNException
name|svne
parameter_list|)
block|{
name|cleanUp
operator|=
literal|true
expr_stmt|;
throw|throw
name|svne
throw|;
block|}
finally|finally
block|{
if|if
condition|(
name|eventHandler
operator|!=
literal|null
condition|)
block|{
name|targetArea
operator|.
name|getWCAccess
argument_list|()
operator|.
name|setEventHandler
argument_list|(
name|eventHandler
argument_list|)
expr_stmt|;
block|}
block|}
name|revertFile
operator|=
literal|true
expr_stmt|;
try|try
block|{
name|targetArea
operator|.
name|setFileExternalLocation
argument_list|(
name|target
argument_list|,
name|url
argument_list|,
name|pegRevision
argument_list|,
name|revision
argument_list|,
name|reposRootURL
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|SVNException
name|svne
parameter_list|)
block|{
name|cleanUp
operator|=
literal|true
expr_stmt|;
throw|throw
name|svne
throw|;
block|}
block|}
name|setIgnoreExternals
argument_list|(
literal|true
argument_list|)
expr_stmt|;
try|try
block|{
name|doSwitchImpl
argument_list|(
name|targetArea
operator|.
name|getWCAccess
argument_list|()
argument_list|,
name|path
argument_list|,
name|url
argument_list|,
name|pegRevision
argument_list|,
name|revision
argument_list|,
name|SVNDepth
operator|.
name|EMPTY
argument_list|,
literal|false
argument_list|,
literal|false
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|SVNException
name|svne
parameter_list|)
block|{
name|cleanUp
operator|=
literal|true
expr_stmt|;
throw|throw
name|svne
throw|;
block|}
if|if
condition|(
name|unlinkFile
condition|)
block|{
name|revertFile
operator|=
literal|false
expr_stmt|;
name|removeFromRevisionControl
operator|=
literal|true
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
name|SVNException
name|svne
parameter_list|)
block|{
if|if
condition|(
name|cleanUp
condition|)
block|{
if|if
condition|(
name|revertFile
condition|)
block|{
name|SVNWCClient
name|wcClient
init|=
operator|new
name|SVNWCClient
argument_list|(
name|getRepositoryPool
argument_list|()
argument_list|,
name|getOptions
argument_list|()
argument_list|)
decl_stmt|;
try|try
block|{
name|wcClient
operator|.
name|doRevert
argument_list|(
operator|new
name|File
index|[]
block|{
name|path
block|}
argument_list|,
name|SVNDepth
operator|.
name|EMPTY
argument_list|,
literal|null
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|SVNException
name|svne2
parameter_list|)
block|{
comment|//ignore
block|}
block|}
if|if
condition|(
name|removeFromRevisionControl
condition|)
block|{
try|try
block|{
name|targetArea
operator|.
name|removeFromRevisionControl
argument_list|(
name|target
argument_list|,
literal|true
argument_list|,
literal|false
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|SVNException
name|svne2
parameter_list|)
block|{
comment|//ignore
block|}
block|}
if|if
condition|(
name|unlinkFile
condition|)
block|{
try|try
block|{
name|SVNFileUtil
operator|.
name|deleteFile
argument_list|(
name|path
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|SVNException
name|svne2
parameter_list|)
block|{
comment|//ignore
block|}
block|}
block|}
throw|throw
name|svne
throw|;
block|}
finally|finally
block|{
name|setIgnoreExternals
argument_list|(
name|ignoreExternals
argument_list|)
expr_stmt|;
if|if
condition|(
name|closeTarget
condition|)
block|{
name|targetArea
operator|.
name|getWCAccess
argument_list|()
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
block|}
block|}
specifier|private
name|void
name|deleteExternal
parameter_list|(
name|File
name|external
parameter_list|)
throws|throws
name|SVNException
block|{
name|SVNWCAccess
name|wcAccess
init|=
name|createWCAccess
argument_list|()
decl_stmt|;
name|SVNAdminArea
name|adminArea
init|=
name|wcAccess
operator|.
name|open
argument_list|(
name|external
argument_list|,
literal|true
argument_list|,
name|SVNWCAccess
operator|.
name|INFINITE_DEPTH
argument_list|)
decl_stmt|;
name|SVNException
name|error
init|=
literal|null
decl_stmt|;
try|try
block|{
name|adminArea
operator|.
name|removeFromRevisionControl
argument_list|(
name|adminArea
operator|.
name|getThisDirName
argument_list|()
argument_list|,
literal|true
argument_list|,
literal|false
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|SVNException
name|svne
parameter_list|)
block|{
name|getDebugLog
argument_list|()
operator|.
name|logFine
argument_list|(
name|SVNLogType
operator|.
name|WC
argument_list|,
name|svne
argument_list|)
expr_stmt|;
name|error
operator|=
name|svne
expr_stmt|;
block|}
if|if
condition|(
name|error
operator|==
literal|null
operator|||
name|error
operator|.
name|getErrorMessage
argument_list|()
operator|.
name|getErrorCode
argument_list|()
operator|==
name|SVNErrorCode
operator|.
name|WC_LEFT_LOCAL_MOD
condition|)
block|{
name|wcAccess
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
if|if
condition|(
name|error
operator|!=
literal|null
operator|&&
name|error
operator|.
name|getErrorMessage
argument_list|()
operator|.
name|getErrorCode
argument_list|()
operator|==
name|SVNErrorCode
operator|.
name|WC_LEFT_LOCAL_MOD
condition|)
block|{
name|external
operator|.
name|getParentFile
argument_list|()
operator|.
name|mkdirs
argument_list|()
expr_stmt|;
name|File
name|newLocation
init|=
name|SVNFileUtil
operator|.
name|createUniqueFile
argument_list|(
name|external
operator|.
name|getParentFile
argument_list|()
argument_list|,
name|external
operator|.
name|getName
argument_list|()
argument_list|,
literal|".OLD"
argument_list|,
literal|false
argument_list|)
decl_stmt|;
name|SVNFileUtil
operator|.
name|rename
argument_list|(
name|external
argument_list|,
name|newLocation
argument_list|)
expr_stmt|;
block|}
if|else if
condition|(
name|error
operator|!=
literal|null
condition|)
block|{
throw|throw
name|error
throw|;
block|}
block|}
specifier|private
name|Map
name|validateRelocateTargetURL
parameter_list|(
name|SVNURL
name|targetURL
parameter_list|,
name|String
name|expectedUUID
parameter_list|,
name|Map
name|validatedURLs
parameter_list|,
name|boolean
name|isRoot
parameter_list|)
throws|throws
name|SVNException
block|{
if|if
condition|(
name|validatedURLs
operator|==
literal|null
condition|)
block|{
return|return
literal|null
return|;
block|}
for|for
control|(
name|Iterator
name|targetURLs
init|=
name|validatedURLs
operator|.
name|keySet
argument_list|()
operator|.
name|iterator
argument_list|()
init|;
name|targetURLs
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|SVNURL
name|validatedURL
init|=
operator|(
name|SVNURL
operator|)
name|targetURLs
operator|.
name|next
argument_list|()
decl_stmt|;
if|if
condition|(
name|targetURL
operator|.
name|toString
argument_list|()
operator|.
name|startsWith
argument_list|(
name|validatedURL
operator|.
name|toString
argument_list|()
argument_list|)
condition|)
block|{
if|if
condition|(
name|isRoot
operator|&&
operator|!
name|targetURL
operator|.
name|equals
argument_list|(
name|validatedURL
argument_list|)
condition|)
block|{
name|SVNErrorMessage
name|err
init|=
name|SVNErrorMessage
operator|.
name|create
argument_list|(
name|SVNErrorCode
operator|.
name|CLIENT_INVALID_RELOCATION
argument_list|,
literal|"''{0}'' is not the root of the repository"
argument_list|,
name|targetURL
argument_list|)
decl_stmt|;
name|SVNErrorManager
operator|.
name|error
argument_list|(
name|err
argument_list|,
name|SVNLogType
operator|.
name|WC
argument_list|)
expr_stmt|;
block|}
name|String
name|validatedUUID
init|=
operator|(
name|String
operator|)
name|validatedURLs
operator|.
name|get
argument_list|(
name|validatedURL
argument_list|)
decl_stmt|;
if|if
condition|(
name|expectedUUID
operator|!=
literal|null
operator|&&
operator|!
name|expectedUUID
operator|.
name|equals
argument_list|(
name|validatedUUID
argument_list|)
condition|)
block|{
name|SVNErrorMessage
name|err
init|=
name|SVNErrorMessage
operator|.
name|create
argument_list|(
name|SVNErrorCode
operator|.
name|CLIENT_INVALID_RELOCATION
argument_list|,
literal|"The repository at ''{0}'' has uuid ''{1}'', but the WC has ''{2}''"
argument_list|,
operator|new
name|Object
index|[]
block|{
name|validatedURL
block|,
name|validatedUUID
block|,
name|expectedUUID
block|}
argument_list|)
decl_stmt|;
name|SVNErrorManager
operator|.
name|error
argument_list|(
name|err
argument_list|,
name|SVNLogType
operator|.
name|WC
argument_list|)
expr_stmt|;
block|}
return|return
name|validatedURLs
return|;
block|}
block|}
name|SVNRepository
name|repos
init|=
name|createRepository
argument_list|(
name|targetURL
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|,
literal|false
argument_list|)
decl_stmt|;
try|try
block|{
name|SVNURL
name|actualRoot
init|=
name|repos
operator|.
name|getRepositoryRoot
argument_list|(
literal|true
argument_list|)
decl_stmt|;
if|if
condition|(
name|isRoot
operator|&&
operator|!
name|targetURL
operator|.
name|equals
argument_list|(
name|actualRoot
argument_list|)
condition|)
block|{
name|SVNErrorMessage
name|err
init|=
name|SVNErrorMessage
operator|.
name|create
argument_list|(
name|SVNErrorCode
operator|.
name|CLIENT_INVALID_RELOCATION
argument_list|,
literal|"''{0}'' is not the root of the repository"
argument_list|,
name|targetURL
argument_list|)
decl_stmt|;
name|SVNErrorManager
operator|.
name|error
argument_list|(
name|err
argument_list|,
name|SVNLogType
operator|.
name|WC
argument_list|)
expr_stmt|;
block|}
name|String
name|actualUUID
init|=
name|repos
operator|.
name|getRepositoryUUID
argument_list|(
literal|true
argument_list|)
decl_stmt|;
if|if
condition|(
name|expectedUUID
operator|!=
literal|null
operator|&&
operator|!
name|expectedUUID
operator|.
name|equals
argument_list|(
name|actualUUID
argument_list|)
condition|)
block|{
name|SVNErrorMessage
name|err
init|=
name|SVNErrorMessage
operator|.
name|create
argument_list|(
name|SVNErrorCode
operator|.
name|CLIENT_INVALID_RELOCATION
argument_list|,
literal|"The repository at ''{0}'' has uuid ''{1}'', but the WC has ''{2}''"
argument_list|,
operator|new
name|Object
index|[]
block|{
name|targetURL
block|,
name|actualUUID
block|,
name|expectedUUID
block|}
argument_list|)
decl_stmt|;
name|SVNErrorManager
operator|.
name|error
argument_list|(
name|err
argument_list|,
name|SVNLogType
operator|.
name|WC
argument_list|)
expr_stmt|;
block|}
name|validatedURLs
operator|.
name|put
argument_list|(
name|targetURL
argument_list|,
name|actualUUID
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
name|repos
operator|.
name|closeSession
argument_list|()
expr_stmt|;
block|}
return|return
name|validatedURLs
return|;
block|}
specifier|private
name|Map
name|relocateEntry
parameter_list|(
name|SVNEntry
name|entry
parameter_list|,
name|String
name|from
parameter_list|,
name|String
name|to
parameter_list|,
name|Map
name|validatedURLs
parameter_list|)
throws|throws
name|SVNException
block|{
if|if
condition|(
name|entry
operator|.
name|getRepositoryRoot
argument_list|()
operator|!=
literal|null
condition|)
block|{
comment|// that is what i do not understand :)
name|String
name|repos
init|=
name|entry
operator|.
name|getRepositoryRoot
argument_list|()
decl_stmt|;
if|if
condition|(
name|from
operator|.
name|length
argument_list|()
operator|>
name|repos
operator|.
name|length
argument_list|()
condition|)
block|{
name|String
name|fromPath
init|=
name|from
operator|.
name|substring
argument_list|(
name|repos
operator|.
name|length
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|to
operator|.
name|endsWith
argument_list|(
name|fromPath
argument_list|)
condition|)
block|{
name|SVNErrorMessage
name|err
init|=
name|SVNErrorMessage
operator|.
name|create
argument_list|(
name|SVNErrorCode
operator|.
name|WC_INVALID_RELOCATION
argument_list|,
literal|"Relocate can only change the repository part of an URL"
argument_list|)
decl_stmt|;
name|SVNErrorManager
operator|.
name|error
argument_list|(
name|err
argument_list|,
name|SVNLogType
operator|.
name|WC
argument_list|)
expr_stmt|;
block|}
name|from
operator|=
name|repos
expr_stmt|;
name|to
operator|=
name|to
operator|.
name|substring
argument_list|(
literal|0
argument_list|,
name|to
operator|.
name|length
argument_list|()
operator|-
name|fromPath
operator|.
name|length
argument_list|()
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|repos
operator|.
name|startsWith
argument_list|(
name|from
argument_list|)
condition|)
block|{
name|entry
operator|.
name|setRepositoryRoot
argument_list|(
name|to
operator|+
name|repos
operator|.
name|substring
argument_list|(
name|from
operator|.
name|length
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|validatedURLs
operator|=
name|validateRelocateTargetURL
argument_list|(
name|entry
operator|.
name|getRepositoryRootURL
argument_list|()
argument_list|,
name|entry
operator|.
name|getUUID
argument_list|()
argument_list|,
name|validatedURLs
argument_list|,
literal|true
argument_list|)
expr_stmt|;
block|}
block|}
if|if
condition|(
name|entry
operator|.
name|getURL
argument_list|()
operator|!=
literal|null
operator|&&
name|entry
operator|.
name|getURL
argument_list|()
operator|.
name|startsWith
argument_list|(
name|from
argument_list|)
condition|)
block|{
name|entry
operator|.
name|setURL
argument_list|(
name|to
operator|+
name|entry
operator|.
name|getURL
argument_list|()
operator|.
name|substring
argument_list|(
name|from
operator|.
name|length
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
if|if
condition|(
name|entry
operator|.
name|getUUID
argument_list|()
operator|!=
literal|null
operator|&&
name|validatedURLs
operator|!=
literal|null
condition|)
block|{
name|validatedURLs
operator|=
name|validateRelocateTargetURL
argument_list|(
name|entry
operator|.
name|getSVNURL
argument_list|()
argument_list|,
name|entry
operator|.
name|getUUID
argument_list|()
argument_list|,
name|validatedURLs
argument_list|,
literal|false
argument_list|)
expr_stmt|;
block|}
block|}
if|if
condition|(
name|entry
operator|.
name|getCopyFromURL
argument_list|()
operator|!=
literal|null
operator|&&
name|entry
operator|.
name|getCopyFromURL
argument_list|()
operator|.
name|startsWith
argument_list|(
name|from
argument_list|)
condition|)
block|{
name|entry
operator|.
name|setCopyFromURL
argument_list|(
name|to
operator|+
name|entry
operator|.
name|getCopyFromURL
argument_list|()
operator|.
name|substring
argument_list|(
name|from
operator|.
name|length
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
if|if
condition|(
name|entry
operator|.
name|getUUID
argument_list|()
operator|!=
literal|null
operator|&&
name|validatedURLs
operator|!=
literal|null
condition|)
block|{
name|validatedURLs
operator|=
name|validateRelocateTargetURL
argument_list|(
name|entry
operator|.
name|getCopyFromSVNURL
argument_list|()
argument_list|,
name|entry
operator|.
name|getUUID
argument_list|()
argument_list|,
name|validatedURLs
argument_list|,
literal|false
argument_list|)
expr_stmt|;
block|}
block|}
return|return
name|validatedURLs
return|;
block|}
specifier|private
name|Map
name|doRelocate
parameter_list|(
name|SVNAdminArea
name|adminArea
parameter_list|,
name|String
name|name
parameter_list|,
name|String
name|from
parameter_list|,
name|String
name|to
parameter_list|,
name|boolean
name|recursive
parameter_list|,
name|Map
name|validatedURLs
parameter_list|)
throws|throws
name|SVNException
block|{
name|SVNEntry
name|entry
init|=
name|adminArea
operator|.
name|getEntry
argument_list|(
name|name
argument_list|,
literal|true
argument_list|)
decl_stmt|;
if|if
condition|(
name|entry
operator|==
literal|null
condition|)
block|{
name|SVNErrorMessage
name|err
init|=
name|SVNErrorMessage
operator|.
name|create
argument_list|(
name|SVNErrorCode
operator|.
name|ENTRY_NOT_FOUND
argument_list|)
decl_stmt|;
name|SVNErrorManager
operator|.
name|error
argument_list|(
name|err
argument_list|,
name|SVNLogType
operator|.
name|WC
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|entry
operator|.
name|isFile
argument_list|()
condition|)
block|{
name|relocateEntry
argument_list|(
name|entry
argument_list|,
name|from
argument_list|,
name|to
argument_list|,
name|validatedURLs
argument_list|)
expr_stmt|;
name|SVNPropertiesManager
operator|.
name|deleteWCProperties
argument_list|(
name|adminArea
argument_list|,
name|name
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|adminArea
operator|.
name|saveEntries
argument_list|(
literal|false
argument_list|)
expr_stmt|;
return|return
name|validatedURLs
return|;
block|}
name|validatedURLs
operator|=
name|relocateEntry
argument_list|(
name|entry
argument_list|,
name|from
argument_list|,
name|to
argument_list|,
name|validatedURLs
argument_list|)
expr_stmt|;
name|SVNWCAccess
name|wcAccess
init|=
name|adminArea
operator|.
name|getWCAccess
argument_list|()
decl_stmt|;
for|for
control|(
name|Iterator
name|entries
init|=
name|adminArea
operator|.
name|entries
argument_list|(
literal|true
argument_list|)
init|;
name|entries
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|SVNEntry
name|childEntry
init|=
operator|(
name|SVNEntry
operator|)
name|entries
operator|.
name|next
argument_list|()
decl_stmt|;
if|if
condition|(
name|adminArea
operator|.
name|getThisDirName
argument_list|()
operator|.
name|equals
argument_list|(
name|childEntry
operator|.
name|getName
argument_list|()
argument_list|)
condition|)
block|{
continue|continue;
block|}
if|if
condition|(
name|recursive
operator|&&
name|childEntry
operator|.
name|isDirectory
argument_list|()
operator|&&
operator|(
name|childEntry
operator|.
name|isScheduledForAddition
argument_list|()
operator|||
operator|!
name|childEntry
operator|.
name|isDeleted
argument_list|()
operator|)
operator|&&
operator|!
name|childEntry
operator|.
name|isAbsent
argument_list|()
operator|&&
name|childEntry
operator|.
name|getDepth
argument_list|()
operator|!=
name|SVNDepth
operator|.
name|EXCLUDE
condition|)
block|{
name|File
name|childDir
init|=
name|adminArea
operator|.
name|getFile
argument_list|(
name|childEntry
operator|.
name|getName
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|wcAccess
operator|.
name|isMissing
argument_list|(
name|childDir
argument_list|)
condition|)
block|{
continue|continue;
block|}
name|SVNAdminArea
name|childArea
init|=
name|wcAccess
operator|.
name|retrieve
argument_list|(
name|childDir
argument_list|)
decl_stmt|;
name|validatedURLs
operator|=
name|doRelocate
argument_list|(
name|childArea
argument_list|,
name|childArea
operator|.
name|getThisDirName
argument_list|()
argument_list|,
name|from
argument_list|,
name|to
argument_list|,
name|recursive
argument_list|,
name|validatedURLs
argument_list|)
expr_stmt|;
block|}
name|validatedURLs
operator|=
name|relocateEntry
argument_list|(
name|childEntry
argument_list|,
name|from
argument_list|,
name|to
argument_list|,
name|validatedURLs
argument_list|)
expr_stmt|;
name|SVNPropertiesManager
operator|.
name|deleteWCProperties
argument_list|(
name|adminArea
argument_list|,
name|childEntry
operator|.
name|getName
argument_list|()
argument_list|,
literal|false
argument_list|)
expr_stmt|;
block|}
name|SVNPropertiesManager
operator|.
name|deleteWCProperties
argument_list|(
name|adminArea
argument_list|,
literal|""
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|adminArea
operator|.
name|saveEntries
argument_list|(
literal|false
argument_list|)
expr_stmt|;
return|return
name|validatedURLs
return|;
block|}
specifier|private
specifier|static
class|class
name|ExternalDiff
block|{
specifier|public
name|SVNExternal
name|oldExternal
decl_stmt|;
specifier|public
name|SVNExternal
name|newExternal
decl_stmt|;
specifier|public
name|File
name|owner
decl_stmt|;
specifier|public
name|SVNURL
name|ownerURL
decl_stmt|;
specifier|public
name|SVNURL
name|rootURL
decl_stmt|;
specifier|public
name|boolean
name|isExport
decl_stmt|;
specifier|public
name|boolean
name|isUpdateUnchanged
decl_stmt|;
specifier|public
name|boolean
name|compareExternals
parameter_list|(
name|SVNURL
name|oldURL
parameter_list|,
name|SVNURL
name|newURL
parameter_list|)
block|{
return|return
name|oldURL
operator|.
name|equals
argument_list|(
name|newURL
argument_list|)
operator|&&
name|oldExternal
operator|.
name|getRevision
argument_list|()
operator|.
name|equals
argument_list|(
name|newExternal
operator|.
name|getRevision
argument_list|()
argument_list|)
operator|&&
name|oldExternal
operator|.
name|getPegRevision
argument_list|()
operator|.
name|equals
argument_list|(
name|newExternal
operator|.
name|getPegRevision
argument_list|()
argument_list|)
return|;
block|}
block|}
block|}
end_class

end_unit

