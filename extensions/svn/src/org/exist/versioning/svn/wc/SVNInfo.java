begin_unit|revision:1.0.0;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * ====================================================================  * Copyright (c) 2004-2010 TMate Software Ltd.  All rights reserved.  *  * This software is licensed as described in the file COPYING, which  * you should have received as part of this distribution.  The terms  * are also available at http://svnkit.com/license.html  * If newer versions of this license are posted there, you may use a  * newer version instead, at your option.  * ====================================================================  */
end_comment

begin_package
package|package
name|org
operator|.
name|exist
operator|.
name|versioning
operator|.
name|svn
operator|.
name|wc
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|File
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Date
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|versioning
operator|.
name|svn
operator|.
name|internal
operator|.
name|wc
operator|.
name|admin
operator|.
name|SVNEntry
import|;
end_import

begin_import
import|import
name|org
operator|.
name|tmatesoft
operator|.
name|svn
operator|.
name|core
operator|.
name|SVNDepth
import|;
end_import

begin_import
import|import
name|org
operator|.
name|tmatesoft
operator|.
name|svn
operator|.
name|core
operator|.
name|SVNDirEntry
import|;
end_import

begin_import
import|import
name|org
operator|.
name|tmatesoft
operator|.
name|svn
operator|.
name|core
operator|.
name|SVNException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|tmatesoft
operator|.
name|svn
operator|.
name|core
operator|.
name|SVNLock
import|;
end_import

begin_import
import|import
name|org
operator|.
name|tmatesoft
operator|.
name|svn
operator|.
name|core
operator|.
name|SVNNodeKind
import|;
end_import

begin_import
import|import
name|org
operator|.
name|tmatesoft
operator|.
name|svn
operator|.
name|core
operator|.
name|SVNURL
import|;
end_import

begin_import
import|import
name|org
operator|.
name|tmatesoft
operator|.
name|svn
operator|.
name|core
operator|.
name|internal
operator|.
name|util
operator|.
name|SVNDate
import|;
end_import

begin_import
import|import
name|org
operator|.
name|tmatesoft
operator|.
name|svn
operator|.
name|core
operator|.
name|wc
operator|.
name|SVNRevision
import|;
end_import

begin_comment
comment|/**  * The<b>SVNInfo</b> class is a wrapper for versioned item's (located either  * in a Working Copy or a repository) information details. When running an   * info operation invoking a doInfo() method of the<b>SVNWCClient</b> class  * all collected item information data is packed inside an<b>SVNInfo</b> object  * and depending on the exact doInfo() method being in use is either dispatched to  * an implementation of<b>ISVNInfoHandler</b> or just returned by the method (per  * single item info operation).  *   *<p>  * There are two approaches how to process<b>SVNInfo</b> objects:<br />  * 1. Implementing an<b>ISVNInfoHandler</b>:  *<pre class="javacode">  *<span class="javakeyword">import</span> org.tmatesoft.svn.core.wc.ISVNInfoHandler;  *<span class="javakeyword">import</span> org.tmatesoft.svn.core.wc.SVNInfo;  * ...  *   *<span class="javakeyword">public class</span> MyCustomInfoHandler<span class="javakeyword">implements</span> ISVNInfoHandler {  *<span class="javakeyword">public void</span> handleInfo(SVNInfo info) {  *<span class="javacomment">//parsing info here</span>   *         ...  *     }  * }</pre><br />  * ...and providing an info handler implementation to an<b>SVNWCClient</b>'s   * doInfo() method:  *<pre class="javacode">  * ...  *<span class="javakeyword">import</span> org.tmatesoft.svn.core.wc.SVNWCClient;  * ...  *   * SVNWCClient wcClient;  * ...  *   * wcClient.doInfo(....,<span class="javakeyword">new</span> MyCustomInfoHandler());  * ...</pre><br />  * 2. Or process an<b>SVNInfo</b> like this:  *<pre class="javacode">  * ...  * SVNInfo info = wcClient.doInfo(<span class="javakeyword">new</span> File(myPath), SVNRevision.WORKING);  *<span class="javacomment">//parsing info here</span>  * ...</pre>  *</p>   *   * @version 1.3  * @author  TMate Software Ltd.  * @since   1.2  * @see     ISVNInfoHandler  * @see     SVNWCClient  * @see<a target="_top" href="http://svnkit.com/kb/examples/">Examples</a>  */
end_comment

begin_class
specifier|public
class|class
name|SVNInfo
block|{
specifier|private
name|File
name|myFile
decl_stmt|;
specifier|private
name|String
name|myPath
decl_stmt|;
specifier|private
name|SVNURL
name|myURL
decl_stmt|;
specifier|private
name|SVNRevision
name|myRevision
decl_stmt|;
specifier|private
name|SVNNodeKind
name|myKind
decl_stmt|;
specifier|private
name|SVNURL
name|myRepositoryRootURL
decl_stmt|;
specifier|private
name|String
name|myRepositoryUUID
decl_stmt|;
specifier|private
name|SVNRevision
name|myCommittedRevision
decl_stmt|;
specifier|private
name|Date
name|myCommittedDate
decl_stmt|;
specifier|private
name|String
name|myAuthor
decl_stmt|;
specifier|private
name|SVNLock
name|myLock
decl_stmt|;
specifier|private
name|boolean
name|myIsRemote
decl_stmt|;
specifier|private
name|String
name|mySchedule
decl_stmt|;
specifier|private
name|SVNURL
name|myCopyFromURL
decl_stmt|;
specifier|private
name|SVNRevision
name|myCopyFromRevision
decl_stmt|;
specifier|private
name|Date
name|myTextTime
decl_stmt|;
specifier|private
name|Date
name|myPropTime
decl_stmt|;
specifier|private
name|String
name|myChecksum
decl_stmt|;
specifier|private
name|File
name|myConflictOldFile
decl_stmt|;
specifier|private
name|File
name|myConflictNewFile
decl_stmt|;
specifier|private
name|File
name|myConflictWrkFile
decl_stmt|;
specifier|private
name|File
name|myPropConflictFile
decl_stmt|;
specifier|private
name|SVNDepth
name|myDepth
decl_stmt|;
specifier|private
name|String
name|myChangelistName
decl_stmt|;
specifier|private
name|long
name|myWorkingSize
decl_stmt|;
specifier|private
name|long
name|myRepositorySize
decl_stmt|;
specifier|private
name|SVNTreeConflictDescription
name|myTreeConflict
decl_stmt|;
specifier|static
name|SVNInfo
name|createInfo
parameter_list|(
name|File
name|file
parameter_list|,
name|SVNEntry
name|entry
parameter_list|)
throws|throws
name|SVNException
block|{
if|if
condition|(
name|entry
operator|==
literal|null
condition|)
block|{
return|return
literal|null
return|;
block|}
name|SVNLock
name|lock
init|=
literal|null
decl_stmt|;
if|if
condition|(
name|entry
operator|.
name|getLockToken
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|lock
operator|=
operator|new
name|SVNLock
argument_list|(
literal|null
argument_list|,
name|entry
operator|.
name|getLockToken
argument_list|()
argument_list|,
name|entry
operator|.
name|getLockOwner
argument_list|()
argument_list|,
name|entry
operator|.
name|getLockComment
argument_list|()
argument_list|,
name|SVNDate
operator|.
name|parseDate
argument_list|(
name|entry
operator|.
name|getLockCreationDate
argument_list|()
argument_list|)
argument_list|,
literal|null
argument_list|)
expr_stmt|;
block|}
name|SVNTreeConflictDescription
name|tc
init|=
literal|null
decl_stmt|;
if|if
condition|(
name|entry
operator|.
name|getAdminArea
argument_list|()
operator|!=
literal|null
operator|&&
name|entry
operator|.
name|getAdminArea
argument_list|()
operator|.
name|getWCAccess
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|tc
operator|=
name|entry
operator|.
name|getAdminArea
argument_list|()
operator|.
name|getWCAccess
argument_list|()
operator|.
name|getTreeConflict
argument_list|(
name|file
argument_list|)
expr_stmt|;
block|}
return|return
operator|new
name|SVNInfo
argument_list|(
name|file
argument_list|,
name|entry
operator|.
name|getSVNURL
argument_list|()
argument_list|,
name|entry
operator|.
name|getRepositoryRootURL
argument_list|()
argument_list|,
name|entry
operator|.
name|getRevision
argument_list|()
argument_list|,
name|entry
operator|.
name|getKind
argument_list|()
argument_list|,
name|entry
operator|.
name|getUUID
argument_list|()
argument_list|,
name|entry
operator|.
name|getCommittedRevision
argument_list|()
argument_list|,
name|entry
operator|.
name|getCommittedDate
argument_list|()
argument_list|,
name|entry
operator|.
name|getAuthor
argument_list|()
argument_list|,
name|entry
operator|.
name|getSchedule
argument_list|()
argument_list|,
name|entry
operator|.
name|getCopyFromSVNURL
argument_list|()
argument_list|,
name|entry
operator|.
name|getCopyFromRevision
argument_list|()
argument_list|,
name|entry
operator|.
name|getTextTime
argument_list|()
argument_list|,
name|entry
operator|.
name|getPropTime
argument_list|()
argument_list|,
name|entry
operator|.
name|getChecksum
argument_list|()
argument_list|,
name|entry
operator|.
name|getConflictOld
argument_list|()
argument_list|,
name|entry
operator|.
name|getConflictNew
argument_list|()
argument_list|,
name|entry
operator|.
name|getConflictWorking
argument_list|()
argument_list|,
name|entry
operator|.
name|getPropRejectFile
argument_list|()
argument_list|,
name|lock
argument_list|,
name|entry
operator|.
name|getDepth
argument_list|()
argument_list|,
name|entry
operator|.
name|getChangelistName
argument_list|()
argument_list|,
name|entry
operator|.
name|getWorkingSize
argument_list|()
argument_list|,
name|tc
argument_list|)
return|;
block|}
specifier|static
name|SVNInfo
name|createInfo
parameter_list|(
name|File
name|file
parameter_list|,
name|SVNTreeConflictDescription
name|tc
parameter_list|)
block|{
return|return
operator|new
name|SVNInfo
argument_list|(
name|file
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|,
operator|-
literal|1
argument_list|,
name|SVNNodeKind
operator|.
name|NONE
argument_list|,
literal|null
argument_list|,
operator|-
literal|1
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|,
operator|-
literal|1
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|,
name|SVNDepth
operator|.
name|UNKNOWN
argument_list|,
literal|null
argument_list|,
operator|-
literal|1
argument_list|,
name|tc
argument_list|)
return|;
block|}
specifier|static
name|SVNInfo
name|createInfo
parameter_list|(
name|String
name|path
parameter_list|,
name|SVNURL
name|reposRootURL
parameter_list|,
name|String
name|uuid
parameter_list|,
name|SVNURL
name|url
parameter_list|,
name|SVNRevision
name|revision
parameter_list|,
name|SVNDirEntry
name|dirEntry
parameter_list|,
name|SVNLock
name|lock
parameter_list|)
block|{
if|if
condition|(
name|dirEntry
operator|==
literal|null
condition|)
block|{
return|return
literal|null
return|;
block|}
return|return
operator|new
name|SVNInfo
argument_list|(
name|path
argument_list|,
name|url
argument_list|,
name|revision
argument_list|,
name|dirEntry
operator|.
name|getKind
argument_list|()
argument_list|,
name|uuid
argument_list|,
name|reposRootURL
argument_list|,
name|dirEntry
operator|.
name|getRevision
argument_list|()
argument_list|,
name|dirEntry
operator|.
name|getDate
argument_list|()
argument_list|,
name|dirEntry
operator|.
name|getAuthor
argument_list|()
argument_list|,
name|lock
argument_list|,
name|SVNDepth
operator|.
name|UNKNOWN
argument_list|,
name|dirEntry
operator|.
name|getSize
argument_list|()
argument_list|)
return|;
block|}
specifier|protected
name|SVNInfo
parameter_list|(
name|File
name|file
parameter_list|,
name|SVNURL
name|url
parameter_list|,
name|SVNURL
name|rootURL
parameter_list|,
name|long
name|revision
parameter_list|,
name|SVNNodeKind
name|kind
parameter_list|,
name|String
name|uuid
parameter_list|,
name|long
name|committedRevision
parameter_list|,
name|String
name|committedDate
parameter_list|,
name|String
name|author
parameter_list|,
name|String
name|schedule
parameter_list|,
name|SVNURL
name|copyFromURL
parameter_list|,
name|long
name|copyFromRevision
parameter_list|,
name|String
name|textTime
parameter_list|,
name|String
name|propTime
parameter_list|,
name|String
name|checksum
parameter_list|,
name|String
name|conflictOld
parameter_list|,
name|String
name|conflictNew
parameter_list|,
name|String
name|conflictWorking
parameter_list|,
name|String
name|propRejectFile
parameter_list|,
name|SVNLock
name|lock
parameter_list|,
name|SVNDepth
name|depth
parameter_list|,
name|String
name|changelistName
parameter_list|,
name|long
name|wcSize
parameter_list|,
name|SVNTreeConflictDescription
name|treeConflict
parameter_list|)
block|{
name|myFile
operator|=
name|file
expr_stmt|;
name|myURL
operator|=
name|url
expr_stmt|;
name|myRevision
operator|=
name|SVNRevision
operator|.
name|create
argument_list|(
name|revision
argument_list|)
expr_stmt|;
name|myKind
operator|=
name|kind
expr_stmt|;
name|myRepositoryUUID
operator|=
name|uuid
expr_stmt|;
name|myRepositoryRootURL
operator|=
name|rootURL
expr_stmt|;
name|myCommittedRevision
operator|=
name|SVNRevision
operator|.
name|create
argument_list|(
name|committedRevision
argument_list|)
expr_stmt|;
name|myCommittedDate
operator|=
name|committedDate
operator|!=
literal|null
condition|?
name|SVNDate
operator|.
name|parseDate
argument_list|(
name|committedDate
argument_list|)
else|:
literal|null
expr_stmt|;
name|myAuthor
operator|=
name|author
expr_stmt|;
name|mySchedule
operator|=
name|schedule
expr_stmt|;
name|myChecksum
operator|=
name|checksum
expr_stmt|;
name|myTextTime
operator|=
name|textTime
operator|!=
literal|null
condition|?
name|SVNDate
operator|.
name|parseDate
argument_list|(
name|textTime
argument_list|)
else|:
literal|null
expr_stmt|;
name|myPropTime
operator|=
name|propTime
operator|!=
literal|null
condition|?
name|SVNDate
operator|.
name|parseDate
argument_list|(
name|propTime
argument_list|)
else|:
literal|null
expr_stmt|;
name|myCopyFromURL
operator|=
name|copyFromURL
expr_stmt|;
name|myCopyFromRevision
operator|=
name|SVNRevision
operator|.
name|create
argument_list|(
name|copyFromRevision
argument_list|)
expr_stmt|;
name|myLock
operator|=
name|lock
expr_stmt|;
name|myChangelistName
operator|=
name|changelistName
expr_stmt|;
name|myTreeConflict
operator|=
name|treeConflict
expr_stmt|;
if|if
condition|(
name|file
operator|!=
literal|null
condition|)
block|{
if|if
condition|(
name|conflictOld
operator|!=
literal|null
condition|)
block|{
name|myConflictOldFile
operator|=
operator|new
name|File
argument_list|(
name|file
operator|.
name|getParentFile
argument_list|()
argument_list|,
name|conflictOld
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|conflictNew
operator|!=
literal|null
condition|)
block|{
name|myConflictNewFile
operator|=
operator|new
name|File
argument_list|(
name|file
operator|.
name|getParentFile
argument_list|()
argument_list|,
name|conflictNew
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|conflictWorking
operator|!=
literal|null
condition|)
block|{
name|myConflictWrkFile
operator|=
operator|new
name|File
argument_list|(
name|file
operator|.
name|getParentFile
argument_list|()
argument_list|,
name|conflictWorking
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|propRejectFile
operator|!=
literal|null
condition|)
block|{
name|myPropConflictFile
operator|=
operator|new
name|File
argument_list|(
name|file
operator|.
name|getParentFile
argument_list|()
argument_list|,
name|propRejectFile
argument_list|)
expr_stmt|;
block|}
block|}
name|myIsRemote
operator|=
literal|false
expr_stmt|;
name|myDepth
operator|=
name|depth
expr_stmt|;
name|myWorkingSize
operator|=
name|wcSize
expr_stmt|;
name|myRepositorySize
operator|=
operator|-
literal|1
expr_stmt|;
block|}
specifier|protected
name|SVNInfo
parameter_list|(
name|String
name|path
parameter_list|,
name|SVNURL
name|url
parameter_list|,
name|SVNRevision
name|revision
parameter_list|,
name|SVNNodeKind
name|kind
parameter_list|,
name|String
name|uuid
parameter_list|,
name|SVNURL
name|reposRootURL
parameter_list|,
name|long
name|comittedRevision
parameter_list|,
name|Date
name|date
parameter_list|,
name|String
name|author
parameter_list|,
name|SVNLock
name|lock
parameter_list|,
name|SVNDepth
name|depth
parameter_list|,
name|long
name|size
parameter_list|)
block|{
name|myIsRemote
operator|=
literal|true
expr_stmt|;
name|myURL
operator|=
name|url
expr_stmt|;
name|myRevision
operator|=
name|revision
expr_stmt|;
name|myKind
operator|=
name|kind
expr_stmt|;
name|myRepositoryRootURL
operator|=
name|reposRootURL
expr_stmt|;
name|myRepositoryUUID
operator|=
name|uuid
expr_stmt|;
name|myCommittedDate
operator|=
name|date
expr_stmt|;
name|myCommittedRevision
operator|=
name|SVNRevision
operator|.
name|create
argument_list|(
name|comittedRevision
argument_list|)
expr_stmt|;
name|myAuthor
operator|=
name|author
expr_stmt|;
name|myLock
operator|=
name|lock
expr_stmt|;
name|myPath
operator|=
name|path
expr_stmt|;
name|myDepth
operator|=
name|depth
expr_stmt|;
name|myRepositorySize
operator|=
name|size
expr_stmt|;
name|myWorkingSize
operator|=
operator|-
literal|1
expr_stmt|;
block|}
comment|/**      * Gets the item's last commit author. This is the value of the item's       * {@link org.tmatesoft.svn.core.SVNProperty#LAST_AUTHOR} property.      *       * @return the author who last changed (committed) the item       */
specifier|public
name|String
name|getAuthor
parameter_list|()
block|{
return|return
name|myAuthor
return|;
block|}
comment|/**      * Gets the file item's checksum. This is the value of the file item's      * {@link org.tmatesoft.svn.core.SVNProperty#CHECKSUM} property.       *       * @return the file item's checksum      */
specifier|public
name|String
name|getChecksum
parameter_list|()
block|{
return|return
name|myChecksum
return|;
block|}
comment|/**      * Gets the item's last commit date. This is the value of the item's      * {@link org.tmatesoft.svn.core.SVNProperty#COMMITTED_DATE}      * property.       *       * @return the item's last commit date      */
specifier|public
name|Date
name|getCommittedDate
parameter_list|()
block|{
return|return
name|myCommittedDate
return|;
block|}
comment|/**      * Gets the item's last committed revision. This is the value of the item's      * {@link org.tmatesoft.svn.core.SVNProperty#COMMITTED_REVISION} property.       *       * @return the item's last committed revision.      */
specifier|public
name|SVNRevision
name|getCommittedRevision
parameter_list|()
block|{
return|return
name|myCommittedRevision
return|;
block|}
comment|/**      * Gets the temporary file that contains all latest changes from the       * repository which led to a conflict with local changes. This file is      * at the HEAD revision.      *       *<p>      * Taken from the item's {@link org.tmatesoft.svn.core.SVNProperty#CONFLICT_NEW}      * property.      *       * @return  an autogenerated temporary file just as it is in the latest       *          revision in the repository       */
specifier|public
name|File
name|getConflictNewFile
parameter_list|()
block|{
return|return
name|myConflictNewFile
return|;
block|}
comment|/**      * Gets the temporary BASE revision file of that working file that is      * currently in conflict with changes received from the repository. This      * file does not contain the latest user's modifications, only 'pristine'      * contents.        *       *<p>      * Taken from the item's {@link org.tmatesoft.svn.core.SVNProperty#CONFLICT_OLD}      * property.      *       * @return an autogenerated temporary file just as the conflicting file was      *         before any modifications to it      */
specifier|public
name|File
name|getConflictOldFile
parameter_list|()
block|{
return|return
name|myConflictOldFile
return|;
block|}
comment|/**      * Gets the temporary<i>'.mine'</i> file with all current local changes to the       * original file. That is if the file item is in conflict with changes that       * came during an update this temporary file is created to get the snapshot      * of the user's file with only the user's local modifications and nothing       * more.        *       *<p>      * Taken from the item's {@link org.tmatesoft.svn.core.SVNProperty#CONFLICT_WRK}      * property.      *       * @return an autogenerated temporary file with only the user's modifications       */
specifier|public
name|File
name|getConflictWrkFile
parameter_list|()
block|{
return|return
name|myConflictWrkFile
return|;
block|}
comment|/**      * Returns a tree conflict description on the item represented by       * this object.      *       * @return a tree conflict description object or<code>null</code>      *         if no tree conflict exists on this item      * @since  1.3      */
specifier|public
name|SVNTreeConflictDescription
name|getTreeConflict
parameter_list|()
block|{
return|return
name|myTreeConflict
return|;
block|}
comment|/**      * Gets the revision of the item's ancestor from which the item was       * copied.      *       * @return the ancestor's revision (taken from the       *         {@link org.tmatesoft.svn.core.SVNProperty#COPYFROM_REVISION} property)      */
specifier|public
name|SVNRevision
name|getCopyFromRevision
parameter_list|()
block|{
return|return
name|myCopyFromRevision
return|;
block|}
comment|/**      * Gets the URL (repository location) of the ancestor from which the      * item was copied.      *       * @return the item ancestor's URL (taken from the       *         {@link org.tmatesoft.svn.core.SVNProperty#COPYFROM_URL} property)      */
specifier|public
name|SVNURL
name|getCopyFromURL
parameter_list|()
block|{
return|return
name|myCopyFromURL
return|;
block|}
comment|/**      * Gets the item's local path. Applicable for local info operation       * invocations, however if an info operation is invoked for remote       * items, use {@link #getPath()} instead.       *       * @return  the item's local path      */
specifier|public
name|File
name|getFile
parameter_list|()
block|{
return|return
name|myFile
return|;
block|}
comment|/**      * Finds out whether the item for which this<b>SVNInfo</b> is generated      * is local (located in a user's Working Copy) or remote (located in a       * repository). It depends on the type of an info operation to perform -       * that is on an {@link SVNWCClient}'s doInfo() method to use. Also      * applicability of some methods of the<b>SVNInfo</b> class depends      * on the item's location that can be determined calling this method.         *        * @return<span class="javakeyword">true</span> if the item is located      *         in a repository, otherwise<span class="javakeyword">false</span>      *         and the item is in a Working Copy      */
specifier|public
name|boolean
name|isRemote
parameter_list|()
block|{
return|return
name|myIsRemote
return|;
block|}
comment|/**      * Gets the item's node kind. Used to find out whether the item is      * a file, directory, etc.       *       * @return  the item's node kind      */
specifier|public
name|SVNNodeKind
name|getKind
parameter_list|()
block|{
return|return
name|myKind
return|;
block|}
comment|/**      * Gets the file item's lock. Used to get lock information - lock       * token, comment, etc.       *       * @return the file item's lock.      */
specifier|public
name|SVNLock
name|getLock
parameter_list|()
block|{
return|return
name|myLock
return|;
block|}
comment|/**      * Gets the item's path (relative to the repository root). Applicable for       * remote info operation invocations, however if an info operation is       * invoked for Working Copy items, use {@link #getFile()} instead.       *       * @return  the item's path in the repository      */
specifier|public
name|String
name|getPath
parameter_list|()
block|{
return|return
name|myPath
return|;
block|}
comment|/**      * Gets the<i>'.prej'</i> file containing details on properties conflicts.      * If the item's properties are in conflict with those that came      * during an update this file will contain a conflict description.       * This is the value of the item's {@link org.tmatesoft.svn.core.SVNProperty#PROP_REJECT_FILE}      * property.      *       * @return  the properties conflicts file      */
specifier|public
name|File
name|getPropConflictFile
parameter_list|()
block|{
return|return
name|myPropConflictFile
return|;
block|}
comment|/**      * Gets the value of the item's      * {@link org.tmatesoft.svn.core.SVNProperty#PROP_TIME} property.      * It corresponds to the last time when properties were committed.      *       * @return the value of the item's prop-time property        */
specifier|public
name|Date
name|getPropTime
parameter_list|()
block|{
return|return
name|myPropTime
return|;
block|}
comment|/**      * Gets the repository root url (where the repository itself      * is installed). Applicable only for remote info operation invocations       * (for items in a repository).      *       * @return the repository's root URL      */
specifier|public
name|SVNURL
name|getRepositoryRootURL
parameter_list|()
block|{
return|return
name|myRepositoryRootURL
return|;
block|}
comment|/**      * Gets the repository Universal Unique IDentifier (UUID). This is the      * value of the {@link org.tmatesoft.svn.core.SVNProperty#UUID}       * property.      *       * @return the repository UUID      */
specifier|public
name|String
name|getRepositoryUUID
parameter_list|()
block|{
return|return
name|myRepositoryUUID
return|;
block|}
comment|/**      * Gets the item's revision.      *       * @return the item's revision      */
specifier|public
name|SVNRevision
name|getRevision
parameter_list|()
block|{
return|return
name|myRevision
return|;
block|}
comment|/**      * Gets the item's schedule status. Schedule status is inapplicable      * when running a remote info operation (for items in a repository).      * If it's a local info operation and the return value is       *<span class="javakeyword">null</span> then it corresponds to the      * SVN's<i>'normal'</i> schedule status.       *       * @return the item's schedule status      */
specifier|public
name|String
name|getSchedule
parameter_list|()
block|{
return|return
name|mySchedule
return|;
block|}
comment|/**      * Gets the value of the item's {@link org.tmatesoft.svn.core.SVNProperty#TEXT_TIME}      * property. It corresponds to the last commit time.       *       * @return the value of the item's text-time property      */
specifier|public
name|Date
name|getTextTime
parameter_list|()
block|{
return|return
name|myTextTime
return|;
block|}
comment|/**      * Gets the item's URL - its repository location.      *       * @return the item's URL      */
specifier|public
name|SVNURL
name|getURL
parameter_list|()
block|{
return|return
name|myURL
return|;
block|}
comment|/**      * Gets the item's depth.       *       * @return  depth value        * @since   1.2.0, SVN 1.5.0      */
specifier|public
name|SVNDepth
name|getDepth
parameter_list|()
block|{
return|return
name|myDepth
return|;
block|}
comment|/**      * Gets the name of the changelist the item belongs to.      *       * @return  changelist name       * @since   1.2.0, SVN 1.5.0      */
specifier|public
name|String
name|getChangelistName
parameter_list|()
block|{
return|return
name|myChangelistName
return|;
block|}
comment|/**      * Returns the size of the working copy file.      * Relevant for file items only.      *       * @return  working file size in bytes      * @since   1.2.0, SVN 1.5.0      */
specifier|public
name|long
name|getWorkingSize
parameter_list|()
block|{
return|return
name|myWorkingSize
return|;
block|}
comment|/**      * Returns the size of the file in the repository.      * Relevant for file items only and in case of a remote operation (i.e. info fetched just from       * the working copy will always return -1 in this method).      *       * @return  repository file size in bytes      * @since   1.2.0, SVN 1.5.0      */
specifier|public
name|long
name|getRepositorySize
parameter_list|()
block|{
return|return
name|myRepositorySize
return|;
block|}
block|}
end_class

end_unit

