begin_unit|revision:1.0.0;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * ====================================================================  * Copyright (c) 2004-2010 TMate Software Ltd.  All rights reserved.  *  * This software is licensed as described in the file COPYING, which  * you should have received as part of this distribution.  The terms  * are also available at http://svnkit.com/license.html  * If newer versions of this license are posted there, you may use a  * newer version instead, at your option.  * ====================================================================  */
end_comment

begin_package
package|package
name|org
operator|.
name|exist
operator|.
name|versioning
operator|.
name|svn
operator|.
name|wc
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|File
import|;
end_import

begin_import
import|import
name|org
operator|.
name|tmatesoft
operator|.
name|svn
operator|.
name|core
operator|.
name|SVNErrorMessage
import|;
end_import

begin_import
import|import
name|org
operator|.
name|tmatesoft
operator|.
name|svn
operator|.
name|core
operator|.
name|SVNLock
import|;
end_import

begin_import
import|import
name|org
operator|.
name|tmatesoft
operator|.
name|svn
operator|.
name|core
operator|.
name|SVNMergeRange
import|;
end_import

begin_import
import|import
name|org
operator|.
name|tmatesoft
operator|.
name|svn
operator|.
name|core
operator|.
name|SVNNodeKind
import|;
end_import

begin_import
import|import
name|org
operator|.
name|tmatesoft
operator|.
name|svn
operator|.
name|core
operator|.
name|SVNURL
import|;
end_import

begin_comment
comment|/**  * The<b>SVNEvent</b> class is used to provide detailed information on   * an operation progress to the<b>ISVNEventHandler</b> (if any) registered   * for an<b>SVN</b>*<b>Client</b> object. Such events are generated by  * an operation invoked by do*() method of an<b>SVN</b>*<b>Client</b> object  * and passed to a developer's event handler for notification. Retrieving   * information out of an<b>SVNEvent</b> the developer can decide how it   * should be interpreted.  *   *<p>  * This is an example:<br />  * implementing<b>ISVNEventHandler</b>  *<pre class="javacode">  *<span class="javakeyword">import</span> org.tmatesoft.svn.core.wc.ISVNEventHandler;  *<span class="javakeyword">import</span> org.tmatesoft.svn.core.SVNCancelException;  *<span class="javakeyword">import</span> org.tmatesoft.svn.core.wc.SVNEvent;  *<span class="javakeyword">import</span> org.tmatesoft.svn.core.wc.SVNEventAction;  *<span class="javakeyword">import</span> org.tmatesoft.svn.core.wc.SVNStatusType;  *<span class="javakeyword">import</span> org.tmatesoft.svn.core.SVNNodeKind;  *<span class="javakeyword">import</span> java.io.File;  * ...  *   *<span class="javakeyword">public class</span> MyCustomUpdateEventHandler<span class="javakeyword">implements</span> ISVNEventHandler {  *<span class="javakeyword">public void</span> handleEvent(SVNEvent event,<span class="javakeyword">double</span> progress) {  *<span class="javacomment">//get the action type</span>  *<span class="javakeyword">if</span>(event.getAction() == SVNEventAction.UPDATE_UPDATE){  *<span class="javacomment">//get the item's node kind</span>  *             SVNNodeKind kind = even.getNodeKind();  *<span class="javacomment">//get the item's contents status</span>  *<span class="javakeyword">if</span>(event.getContentsStatus() == SVNStatusType.CHANGED&&  *                kind == SVNNodeKind.FILE){  *                 ...  *             }  *             ...  *<span class="javacomment">//get the item's properties status</span>  *<span class="javakeyword">if</span>(event.getPropertiesStatus() == SVNStatusType.MERGED){  *                 ...  *             }  *<span class="javacomment">//get the item's lock status</span>  *<span class="javakeyword">if</span>(event.getLockStatus() == SVNStatusType.LOCK_UNLOCKED){  *                 ...  *             }  *<span class="javacomment">//get the item's relative path</span>  *             String path = event.getPath();  *<span class="javacomment">//or in a java.io.File representation</span>  *             File fsEntry = event.getFile();   *               *<span class="javacomment">//get update revision</span>  *             long revision = event.getRevision();   *             ...  *         }  *         ...  *     }  *       *<span class="javakeyword">public void</span> checkCancelled()<span class="javakeyword">throws</span> SVNCancelException{  *<span class="javakeyword">throw new</span> SVNCancelException(<span class="javastring">"cancelled!"</span>);  *     }  * }</pre><br />  * then registering a handler:  *<pre class="javacode">  *<span class="javakeyword">import</span> org.tmatesoft.svn.core.wc.SVNUpdateClient;  * ...  *   * SVNUpdateClient updateClient;  * ...  * updateClient.setEventHandler(<span class="javakeyword">new</span> MyCustomUpdateEventHandler());  * ...</pre><br />  * now when invoking an update operation:  *<pre class="javacode">  * updateClient.doUpdate(...);</pre><br />  * the registered instance of the<b>ISVNEventHandler</b> implementation  * will be dispatched progress events.   *</p>  *   * @version 1.3  * @author  TMate Software Ltd.  * @since   1.2  * @see     ISVNEventHandler  * @see     SVNStatusType  * @see     SVNEventAction  * @see<a target="_top" href="http://svnkit.com/kb/examples/">Examples</a>  */
end_comment

begin_class
specifier|public
class|class
name|SVNEvent
block|{
specifier|private
name|File
name|myFile
decl_stmt|;
specifier|private
name|SVNNodeKind
name|myNodeKind
decl_stmt|;
specifier|private
name|String
name|myMimeType
decl_stmt|;
specifier|private
name|long
name|myRevision
decl_stmt|;
specifier|private
name|long
name|myPreviousRevision
decl_stmt|;
specifier|private
name|SVNURL
name|myURL
decl_stmt|;
specifier|private
name|SVNURL
name|myPreviousURL
decl_stmt|;
specifier|private
name|SVNStatusType
name|myContentsStatus
decl_stmt|;
specifier|private
name|SVNStatusType
name|myPropertiesStatus
decl_stmt|;
specifier|private
name|SVNStatusType
name|myLockStatus
decl_stmt|;
specifier|private
name|SVNLock
name|myLock
decl_stmt|;
specifier|private
name|SVNErrorMessage
name|myErrorMessage
decl_stmt|;
specifier|private
name|SVNEventAction
name|myAction
decl_stmt|;
specifier|private
name|SVNEventAction
name|myExpectedAction
decl_stmt|;
specifier|private
name|String
name|myChangelistName
decl_stmt|;
specifier|private
name|SVNMergeRange
name|myRange
decl_stmt|;
comment|/**      * Constructs an<b>SVNEvent</b> object given      * an error message for a filed operation.       *<p>      * Used by SVNKit internals to construct and initialize an       *<b>SVNEvent</b> object. It's not intended for users (from an API point of view).      *       * @param errorMessage the message describing the operation fault      */
specifier|public
name|SVNEvent
parameter_list|(
name|SVNErrorMessage
name|errorMessage
parameter_list|,
name|SVNEventAction
name|expected
parameter_list|)
block|{
name|myErrorMessage
operator|=
name|errorMessage
expr_stmt|;
name|myAction
operator|=
name|SVNEventAction
operator|.
name|SKIP
expr_stmt|;
name|myExpectedAction
operator|=
name|expected
expr_stmt|;
block|}
comment|/**      * Constructs an<b>SVNEvent</b> object.      *<p>      * Used by SVNKit internals to construct and initialize an       *<b>SVNEvent</b> object. It's not intended for users (from an API point of view).      *       * @param file           local path      * @param action         the type of action the item is exposed to      * @param kind           the item's node kind      * @param revision       a revision number      * @param mimetype       the item's MIME type      * @param cstatus        the item's contents status      * @param pstatus        the item's properties status      * @param lstatus        the item's lock status      * @param lock           the item's lock      * @param expected       the action type that was expected       * @param error          an error message      * @param range          merge range      * @param changelistName change list name      */
specifier|public
name|SVNEvent
parameter_list|(
name|File
name|file
parameter_list|,
name|SVNNodeKind
name|kind
parameter_list|,
name|String
name|mimetype
parameter_list|,
name|long
name|revision
parameter_list|,
name|SVNStatusType
name|cstatus
parameter_list|,
name|SVNStatusType
name|pstatus
parameter_list|,
name|SVNStatusType
name|lstatus
parameter_list|,
name|SVNLock
name|lock
parameter_list|,
name|SVNEventAction
name|action
parameter_list|,
name|SVNEventAction
name|expected
parameter_list|,
name|SVNErrorMessage
name|error
parameter_list|,
name|SVNMergeRange
name|range
parameter_list|,
name|String
name|changelistName
parameter_list|)
block|{
name|myFile
operator|=
name|file
operator|!=
literal|null
condition|?
name|file
operator|.
name|getAbsoluteFile
argument_list|()
else|:
literal|null
expr_stmt|;
name|myNodeKind
operator|=
name|kind
operator|==
literal|null
condition|?
name|SVNNodeKind
operator|.
name|UNKNOWN
else|:
name|kind
expr_stmt|;
name|myMimeType
operator|=
name|mimetype
expr_stmt|;
name|myRevision
operator|=
name|revision
expr_stmt|;
name|myContentsStatus
operator|=
name|cstatus
operator|==
literal|null
condition|?
name|SVNStatusType
operator|.
name|INAPPLICABLE
else|:
name|cstatus
expr_stmt|;
name|myPropertiesStatus
operator|=
name|pstatus
operator|==
literal|null
condition|?
name|SVNStatusType
operator|.
name|INAPPLICABLE
else|:
name|pstatus
expr_stmt|;
name|myLockStatus
operator|=
name|lstatus
operator|==
literal|null
condition|?
name|SVNStatusType
operator|.
name|INAPPLICABLE
else|:
name|lstatus
expr_stmt|;
name|myLock
operator|=
name|lock
expr_stmt|;
name|myAction
operator|=
name|action
expr_stmt|;
name|myExpectedAction
operator|=
name|expected
operator|==
literal|null
condition|?
name|action
else|:
name|expected
expr_stmt|;
name|myErrorMessage
operator|=
name|error
expr_stmt|;
name|myRange
operator|=
name|range
expr_stmt|;
name|myChangelistName
operator|=
name|changelistName
expr_stmt|;
name|myPreviousRevision
operator|=
operator|-
literal|1
expr_stmt|;
block|}
comment|/**      * Returns local path the event is fired for.      *       * @return local path       */
specifier|public
name|File
name|getFile
parameter_list|()
block|{
return|return
name|myFile
return|;
block|}
comment|/**      * Gets the type of an action performed upon the item. An action is       * one of predefined<b>SVNEventAction</b> constants that are specific for      * each kind of operation, such as update actions, commit actions, etc.       *       * @return the current action       */
specifier|public
name|SVNEventAction
name|getAction
parameter_list|()
block|{
return|return
name|myAction
return|;
block|}
comment|/**      * Returns the expected action. It is always the same as      * the action returned by {@link #getAction()} except those cases       * when {@link #getAction()} returns {@link SVNEventAction#SKIP} (i.e.       * when the expected operation is skipped).      *        * @return the expected action      */
specifier|public
name|SVNEventAction
name|getExpectedAction
parameter_list|()
block|{
return|return
name|myExpectedAction
return|;
block|}
comment|/**      * Gets the status type of either file or directory contents.      * Use predefined<b>SVNStatusType</b> constants to examine the      * item's status. For a directory contents are its entries.      *       * @return the item's status type      */
specifier|public
name|SVNStatusType
name|getContentsStatus
parameter_list|()
block|{
return|return
name|myContentsStatus
return|;
block|}
comment|/**      * Gets the error message that (if it's an error situation and       * therefore the string is not<span class="javakeyword">null</span>)       * points to some fault.        *       * @return  an error message (in case of an error occured) or       *<span class="javakeyword">null</span> if everything      *          is OK      */
specifier|public
name|SVNErrorMessage
name|getErrorMessage
parameter_list|()
block|{
return|return
name|myErrorMessage
return|;
block|}
comment|/**      * Gets the file item's lock information (if any) represented by an       *<b>SVNLock</b> object.      *       * @return the file item's lock info if the file is locked; otherwise       *<span class="javakeyword">null</span>       */
specifier|public
name|SVNLock
name|getLock
parameter_list|()
block|{
return|return
name|myLock
return|;
block|}
comment|/**      * Gets the file item's lock status. The value of       *<b>SVNStatusType.<i>LOCK_INAPPLICABLE</i></b> means      * the lock status is irrelevant during the current event action.      *        * @return the lock status of the file item      */
specifier|public
name|SVNStatusType
name|getLockStatus
parameter_list|()
block|{
return|return
name|myLockStatus
return|;
block|}
comment|/**      * Gets the MIME type of the item relying upon the special       * SVN's<i>'svn:mime-type'</i> property.      *       *<p>      * You can use {@link org.tmatesoft.svn.core.SVNProperty}'s metods to       * find out whether it's a text MIME type or a binary:      *<pre class="javacode">      *<span class="javakeyword">import</span> org.tmatesoft.svn.core.SVNProperty;      * ...      *       * String mimeType = event.getMimeType();      *<span class="javakeyword">if</span>(SVNProperty.isBinaryMimeType(mimeType)){      *<span class="javacomment">//your processing</span>      * }</pre>      *       * @return the item's MIME type as a string or       *<span class="javakeyword">null</span> if the item has no      *<i>'svn:mime-type'</i> property set      */
specifier|public
name|String
name|getMimeType
parameter_list|()
block|{
return|return
name|myMimeType
return|;
block|}
comment|/**      * Gets the node kind of the item characterizing it as an entry -       * whether it's a directory, file, etc. The value of       *<b>SVNNodeKind.<i>NONE</i></b> may mean the node kind is       * inapplicable diring the current event action. The value of       *<b>SVNNodeKind.<i>UNKNOWN</i></b> may mean deleted entries.      *        * @return the item's node kind      */
specifier|public
name|SVNNodeKind
name|getNodeKind
parameter_list|()
block|{
return|return
name|myNodeKind
return|;
block|}
comment|/**      * Gets the status type of the item's properties.      * The value of<b>SVNStatusType.<i>INAPPLICABLE</i></b> may mean      * the item has no versioned properties or that properties status is      * irrelevant during the current event action.      *       * @return the status type of the item's properties      */
specifier|public
name|SVNStatusType
name|getPropertiesStatus
parameter_list|()
block|{
return|return
name|myPropertiesStatus
return|;
block|}
comment|/**      * Gets the revision number specific for the action context.      * It may be whether an update revision or a committed one or      * an inapplicable value when a revision number is irrelevant during      * the event action.      *        * @return a revision number      */
specifier|public
name|long
name|getRevision
parameter_list|()
block|{
return|return
name|myRevision
return|;
block|}
comment|/**      * Returns the local revision before it will be changed by an update.      * @return       revision prior to modification      * @since        1.2.0, SVN 1.5.0      */
specifier|public
name|long
name|getPreviousRevision
parameter_list|()
block|{
return|return
name|myPreviousRevision
return|;
block|}
comment|/**      * Returns the repository URL that this event is fired for.      * @return repository url       */
specifier|public
name|SVNURL
name|getURL
parameter_list|()
block|{
return|return
name|myURL
return|;
block|}
comment|/**      * Returns the item's repository url before it will be changed by an update.      * @return       repository url prior to modification      * @since        1.2.0, SVN 1.5.0      */
specifier|public
name|SVNURL
name|getPreviousURL
parameter_list|()
block|{
return|return
name|myPreviousURL
return|;
block|}
comment|/**      * Returns a changelist name. Relevant for changelist operations provided by       * {@link SVNChangelistClient}. 	 *  	 * @return  changelist name      * @since   1.2.0, SVN 1.5.0       *       */
specifier|public
name|String
name|getChangelistName
parameter_list|()
block|{
return|return
name|myChangelistName
return|;
block|}
comment|/**       * Returns the merge range.       *       *<p/>      * When {@link #getAction() action} is {@link SVNEventAction#MERGE_BEGIN}, and both the left and right sides       * of the merge are not from the same URL, the return value is<span class="javakeyword">null</span>.        *       * @return  merge range       * @since   1.2.0, New in SVN 1.5.0       */
specifier|public
name|SVNMergeRange
name|getMergeRange
parameter_list|()
block|{
return|return
name|myRange
return|;
block|}
comment|/**      * Sets the item revision which will be changed by the operation after this event is handled.      *       *<p/>      * Note: this method is not intended for API users.      *       * @param previousRevision previous revision      * @since                  1.2.0, SVN 1.5.0      */
specifier|public
name|void
name|setPreviousRevision
parameter_list|(
name|long
name|previousRevision
parameter_list|)
block|{
name|myPreviousRevision
operator|=
name|previousRevision
expr_stmt|;
block|}
comment|/**      * Sets the repository url.      *       *<p/>      * Note: this method is not intended for API users.      *       * @param url repository url       */
specifier|public
name|void
name|setURL
parameter_list|(
name|SVNURL
name|url
parameter_list|)
block|{
name|myURL
operator|=
name|url
expr_stmt|;
block|}
comment|/**      * Sets the item url which will be changed by the operation after this event is handled.      *       *<p/>      * Note: this method is not intended for API users.      *       * @param url previous url      * @since     1.2.0, SVN 1.5.0      */
specifier|public
name|void
name|setPreviousURL
parameter_list|(
name|SVNURL
name|url
parameter_list|)
block|{
name|myPreviousURL
operator|=
name|url
expr_stmt|;
block|}
specifier|public
name|String
name|toString
parameter_list|()
block|{
name|StringBuffer
name|sb
init|=
operator|new
name|StringBuffer
argument_list|()
decl_stmt|;
if|if
condition|(
name|getAction
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|sb
operator|.
name|append
argument_list|(
name|getAction
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|getFile
argument_list|()
operator|!=
literal|null
condition|)
block|{
if|if
condition|(
name|sb
operator|.
name|length
argument_list|()
operator|>
literal|0
condition|)
block|{
name|sb
operator|.
name|append
argument_list|(
literal|" "
argument_list|)
expr_stmt|;
block|}
name|sb
operator|.
name|append
argument_list|(
name|getFile
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|getURL
argument_list|()
operator|!=
literal|null
condition|)
block|{
if|if
condition|(
name|sb
operator|.
name|length
argument_list|()
operator|>
literal|0
condition|)
block|{
name|sb
operator|.
name|append
argument_list|(
literal|" "
argument_list|)
expr_stmt|;
block|}
name|sb
operator|.
name|append
argument_list|(
name|getURL
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
block|}
return|return
name|sb
operator|.
name|toString
argument_list|()
return|;
block|}
block|}
end_class

end_unit

