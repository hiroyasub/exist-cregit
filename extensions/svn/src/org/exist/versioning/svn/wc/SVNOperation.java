begin_unit|revision:1.0.0;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * ====================================================================  * Copyright (c) 2004-2010 TMate Software Ltd.  All rights reserved.  *  * This software is licensed as described in the file COPYING, which  * you should have received as part of this distribution.  The terms  * are also available at http://svnkit.com/license.html  * If newer versions of this license are posted there, you may use a  * newer version instead, at your option.  * ====================================================================  */
end_comment

begin_package
package|package
name|org
operator|.
name|exist
operator|.
name|versioning
operator|.
name|svn
operator|.
name|wc
package|;
end_package

begin_comment
comment|/**  *<b>SVNOperation</b> represents the user operation that exposed a conflict.  *   * @version 1.3  * @author  TMate Software Ltd.  * @since   1.3  */
end_comment

begin_class
specifier|public
class|class
name|SVNOperation
block|{
comment|/**      * Update operation.      * @since 1.3      */
specifier|public
specifier|static
specifier|final
name|SVNOperation
name|UPDATE
init|=
operator|new
name|SVNOperation
argument_list|(
literal|"update"
argument_list|)
decl_stmt|;
comment|/**      * Switch operation.      * @since 1.3      */
specifier|public
specifier|static
specifier|final
name|SVNOperation
name|SWITCH
init|=
operator|new
name|SVNOperation
argument_list|(
literal|"switch"
argument_list|)
decl_stmt|;
comment|/**      * Merge operation.      * @since 1.3      */
specifier|public
specifier|static
specifier|final
name|SVNOperation
name|MERGE
init|=
operator|new
name|SVNOperation
argument_list|(
literal|"merge"
argument_list|)
decl_stmt|;
comment|/**      * None.      * @since 1.3      */
specifier|public
specifier|static
specifier|final
name|SVNOperation
name|NONE
init|=
operator|new
name|SVNOperation
argument_list|(
literal|"none"
argument_list|)
decl_stmt|;
comment|/**      * Converts a string operation name to an<code>SVNOperation</code> object.      *        * @param operation      * @return<code>SVNOperation</code> constant or<code>null</code>, if no      *<code>SVNOperation</code> constant matches the given name        * @since   1.3      */
specifier|public
specifier|static
name|SVNOperation
name|fromString
parameter_list|(
name|String
name|operation
parameter_list|)
block|{
if|if
condition|(
name|UPDATE
operator|.
name|getName
argument_list|()
operator|.
name|equals
argument_list|(
name|operation
argument_list|)
condition|)
block|{
return|return
name|UPDATE
return|;
block|}
if|if
condition|(
name|SWITCH
operator|.
name|getName
argument_list|()
operator|.
name|equals
argument_list|(
name|operation
argument_list|)
condition|)
block|{
return|return
name|SWITCH
return|;
block|}
if|if
condition|(
name|MERGE
operator|.
name|getName
argument_list|()
operator|.
name|equals
argument_list|(
name|operation
argument_list|)
condition|)
block|{
return|return
name|MERGE
return|;
block|}
if|if
condition|(
name|NONE
operator|.
name|getName
argument_list|()
operator|.
name|equals
argument_list|(
name|operation
argument_list|)
condition|)
block|{
return|return
name|NONE
return|;
block|}
return|return
literal|null
return|;
block|}
specifier|private
specifier|final
name|String
name|myName
decl_stmt|;
specifier|private
name|SVNOperation
parameter_list|(
name|String
name|name
parameter_list|)
block|{
name|myName
operator|=
name|name
expr_stmt|;
block|}
comment|/**      * Returns the string representation of this object.      * @return string representation      * @since  1.3      */
specifier|public
name|String
name|getName
parameter_list|()
block|{
return|return
name|myName
return|;
block|}
comment|/**      * Returns the string representation of this object.      * @return string representation      * @since  1.3      */
specifier|public
name|String
name|toString
parameter_list|()
block|{
return|return
name|getName
argument_list|()
return|;
block|}
block|}
end_class

end_unit

