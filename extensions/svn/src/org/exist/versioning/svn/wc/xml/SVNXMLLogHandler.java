begin_unit|revision:1.0.0;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * ====================================================================  * Copyright (c) 2004-2010 TMate Software Ltd.  All rights reserved.  *  * This software is licensed as described in the file COPYING, which  * you should have received as part of this distribution.  The terms  * are also available at http://svnkit.com/license.html  * If newer versions of this license are posted there, you may use a  * newer version instead, at your option.  * ====================================================================  */
end_comment

begin_package
package|package
name|org
operator|.
name|exist
operator|.
name|versioning
operator|.
name|svn
operator|.
name|wc
operator|.
name|xml
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Iterator
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|LinkedList
import|;
end_import

begin_import
import|import
name|org
operator|.
name|tmatesoft
operator|.
name|svn
operator|.
name|core
operator|.
name|ISVNLogEntryHandler
import|;
end_import

begin_import
import|import
name|org
operator|.
name|tmatesoft
operator|.
name|svn
operator|.
name|core
operator|.
name|SVNErrorCode
import|;
end_import

begin_import
import|import
name|org
operator|.
name|tmatesoft
operator|.
name|svn
operator|.
name|core
operator|.
name|SVNErrorMessage
import|;
end_import

begin_import
import|import
name|org
operator|.
name|tmatesoft
operator|.
name|svn
operator|.
name|core
operator|.
name|SVNException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|tmatesoft
operator|.
name|svn
operator|.
name|core
operator|.
name|SVNLogEntry
import|;
end_import

begin_import
import|import
name|org
operator|.
name|tmatesoft
operator|.
name|svn
operator|.
name|core
operator|.
name|SVNLogEntryPath
import|;
end_import

begin_import
import|import
name|org
operator|.
name|tmatesoft
operator|.
name|svn
operator|.
name|core
operator|.
name|internal
operator|.
name|util
operator|.
name|SVNDate
import|;
end_import

begin_import
import|import
name|org
operator|.
name|tmatesoft
operator|.
name|svn
operator|.
name|core
operator|.
name|internal
operator|.
name|wc
operator|.
name|SVNErrorManager
import|;
end_import

begin_import
import|import
name|org
operator|.
name|tmatesoft
operator|.
name|svn
operator|.
name|util
operator|.
name|ISVNDebugLog
import|;
end_import

begin_import
import|import
name|org
operator|.
name|tmatesoft
operator|.
name|svn
operator|.
name|util
operator|.
name|SVNLogType
import|;
end_import

begin_import
import|import
name|org
operator|.
name|xml
operator|.
name|sax
operator|.
name|ContentHandler
import|;
end_import

begin_import
import|import
name|org
operator|.
name|xml
operator|.
name|sax
operator|.
name|SAXException
import|;
end_import

begin_comment
comment|/**  * This log handler implementation writes xml formatted information   * about the log entries it's passed to a specified<b>ContentHandler</b>.   *   * @version 1.3  * @author  TMate Software Ltd.  * @since   1.2  */
end_comment

begin_class
specifier|public
class|class
name|SVNXMLLogHandler
extends|extends
name|AbstractXMLHandler
implements|implements
name|ISVNLogEntryHandler
block|{
comment|/**      *<code>'copyfrom-rev'</code> attribute.      */
specifier|public
specifier|static
specifier|final
name|String
name|COPYFROM_REV_ATTR
init|=
literal|"copyfrom-rev"
decl_stmt|;
comment|/**      *<code>'copyfrom-path'</code> attribute.      */
specifier|public
specifier|static
specifier|final
name|String
name|COPYFROM_PATH_ATTR
init|=
literal|"copyfrom-path"
decl_stmt|;
comment|/**      *<code>'action'</code> attribute.      */
specifier|public
specifier|static
specifier|final
name|String
name|ACTION_ATTR
init|=
literal|"action"
decl_stmt|;
comment|/**      *<code>'revision'</code> attribute.      */
specifier|public
specifier|static
specifier|final
name|String
name|REVISION_ATTR
init|=
literal|"revision"
decl_stmt|;
comment|/**      *<code>'msg'</code> tag.      */
specifier|public
specifier|static
specifier|final
name|String
name|MSG_TAG
init|=
literal|"msg"
decl_stmt|;
comment|/**      *<code>'path'</code> tag.      */
specifier|public
specifier|static
specifier|final
name|String
name|PATH_TAG
init|=
literal|"path"
decl_stmt|;
comment|/**      *<code>'paths'</code> tag.      */
specifier|public
specifier|static
specifier|final
name|String
name|PATHS_TAG
init|=
literal|"paths"
decl_stmt|;
comment|/**      *<code>'date'</code> tag.      */
specifier|public
specifier|static
specifier|final
name|String
name|DATE_TAG
init|=
literal|"date"
decl_stmt|;
comment|/**      *<code>'author'</code> tag.      */
specifier|public
specifier|static
specifier|final
name|String
name|AUTHOR_TAG
init|=
literal|"author"
decl_stmt|;
comment|/**      *<code>'logentry'</code> tag.      */
specifier|public
specifier|static
specifier|final
name|String
name|LOGENTRY_TAG
init|=
literal|"logentry"
decl_stmt|;
comment|/**      *<code>'log'</code> tag.      */
specifier|public
specifier|static
specifier|final
name|String
name|LOG_TAG
init|=
literal|"log"
decl_stmt|;
specifier|private
name|boolean
name|myIsOmitLogMessage
decl_stmt|;
specifier|private
name|LinkedList
name|myMergeStack
decl_stmt|;
comment|/**      * Creates a new log handler.      *       * @param contentHandler a<b>ContentHandler</b> to form       *                       an XML tree      */
specifier|public
name|SVNXMLLogHandler
parameter_list|(
name|ContentHandler
name|contentHandler
parameter_list|)
block|{
name|this
argument_list|(
name|contentHandler
argument_list|,
literal|null
argument_list|)
expr_stmt|;
block|}
comment|/**      * Creates a new log handler.      *       * @param contentHandler a<b>ContentHandler</b> to form       *                       an XML tree      * @param log            a debug logger      */
specifier|public
name|SVNXMLLogHandler
parameter_list|(
name|ContentHandler
name|contentHandler
parameter_list|,
name|ISVNDebugLog
name|log
parameter_list|)
block|{
name|super
argument_list|(
name|contentHandler
argument_list|,
name|log
argument_list|)
expr_stmt|;
block|}
comment|/**      * Returns the header name specific for a log handler.      *       * @return {@link #LOG_TAG} string      */
specifier|public
name|String
name|getHeaderName
parameter_list|()
block|{
return|return
name|LOG_TAG
return|;
block|}
comment|/**      * Handles a next log entry producing corresponding xml.      *       * @param  logEntry       log entry       * @throws SVNException       */
specifier|public
name|void
name|handleLogEntry
parameter_list|(
name|SVNLogEntry
name|logEntry
parameter_list|)
throws|throws
name|SVNException
block|{
try|try
block|{
name|sendToHandler
argument_list|(
name|logEntry
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|SAXException
name|e
parameter_list|)
block|{
name|SVNErrorMessage
name|err
init|=
name|SVNErrorMessage
operator|.
name|create
argument_list|(
name|SVNErrorCode
operator|.
name|XML_MALFORMED
argument_list|,
name|e
operator|.
name|getLocalizedMessage
argument_list|()
argument_list|)
decl_stmt|;
name|SVNErrorManager
operator|.
name|error
argument_list|(
name|err
argument_list|,
name|e
argument_list|,
name|SVNLogType
operator|.
name|DEFAULT
argument_list|)
expr_stmt|;
block|}
block|}
comment|/**      * Sets whether log messages must be omitted or not.      *       * @param omitLogMessage<span class="javakeyword">true</span> to omit;       *                        otherwise<span class="javakeyword">false</span>       */
specifier|public
name|void
name|setOmitLogMessage
parameter_list|(
name|boolean
name|omitLogMessage
parameter_list|)
block|{
name|myIsOmitLogMessage
operator|=
name|omitLogMessage
expr_stmt|;
block|}
specifier|private
name|void
name|sendToHandler
parameter_list|(
name|SVNLogEntry
name|logEntry
parameter_list|)
throws|throws
name|SAXException
block|{
if|if
condition|(
name|logEntry
operator|.
name|getRevision
argument_list|()
operator|==
literal|0
operator|&&
name|logEntry
operator|.
name|getMessage
argument_list|()
operator|==
literal|null
condition|)
block|{
return|return;
block|}
name|addAttribute
argument_list|(
name|REVISION_ATTR
argument_list|,
name|logEntry
operator|.
name|getRevision
argument_list|()
operator|+
literal|""
argument_list|)
expr_stmt|;
name|openTag
argument_list|(
name|LOGENTRY_TAG
argument_list|)
expr_stmt|;
if|if
condition|(
name|logEntry
operator|.
name|getAuthor
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|addTag
argument_list|(
name|AUTHOR_TAG
argument_list|,
name|logEntry
operator|.
name|getAuthor
argument_list|()
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|logEntry
operator|.
name|getDate
argument_list|()
operator|!=
literal|null
operator|&&
name|logEntry
operator|.
name|getDate
argument_list|()
operator|.
name|getTime
argument_list|()
operator|!=
literal|0
condition|)
block|{
name|addTag
argument_list|(
name|DATE_TAG
argument_list|,
name|SVNDate
operator|.
name|formatDate
argument_list|(
name|logEntry
operator|.
name|getDate
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|logEntry
operator|.
name|getChangedPaths
argument_list|()
operator|!=
literal|null
operator|&&
operator|!
name|logEntry
operator|.
name|getChangedPaths
argument_list|()
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|openTag
argument_list|(
name|PATHS_TAG
argument_list|)
expr_stmt|;
for|for
control|(
name|Iterator
name|paths
init|=
name|logEntry
operator|.
name|getChangedPaths
argument_list|()
operator|.
name|keySet
argument_list|()
operator|.
name|iterator
argument_list|()
init|;
name|paths
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|String
name|key
init|=
operator|(
name|String
operator|)
name|paths
operator|.
name|next
argument_list|()
decl_stmt|;
name|SVNLogEntryPath
name|path
init|=
operator|(
name|SVNLogEntryPath
operator|)
name|logEntry
operator|.
name|getChangedPaths
argument_list|()
operator|.
name|get
argument_list|(
name|key
argument_list|)
decl_stmt|;
name|addAttribute
argument_list|(
name|ACTION_ATTR
argument_list|,
name|path
operator|.
name|getType
argument_list|()
operator|+
literal|""
argument_list|)
expr_stmt|;
if|if
condition|(
name|path
operator|.
name|getCopyPath
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|addAttribute
argument_list|(
name|COPYFROM_PATH_ATTR
argument_list|,
name|path
operator|.
name|getCopyPath
argument_list|()
argument_list|)
expr_stmt|;
name|addAttribute
argument_list|(
name|COPYFROM_REV_ATTR
argument_list|,
name|path
operator|.
name|getCopyRevision
argument_list|()
operator|+
literal|""
argument_list|)
expr_stmt|;
block|}
name|addTag
argument_list|(
name|PATH_TAG
argument_list|,
name|path
operator|.
name|getPath
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|closeTag
argument_list|(
name|PATHS_TAG
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
operator|!
name|myIsOmitLogMessage
condition|)
block|{
name|String
name|message
init|=
name|logEntry
operator|.
name|getMessage
argument_list|()
decl_stmt|;
name|message
operator|=
name|message
operator|==
literal|null
condition|?
literal|""
else|:
name|message
expr_stmt|;
name|addTag
argument_list|(
name|MSG_TAG
argument_list|,
name|message
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|myMergeStack
operator|!=
literal|null
operator|&&
operator|!
name|myMergeStack
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|MergeFrame
name|frame
init|=
operator|(
name|MergeFrame
operator|)
name|myMergeStack
operator|.
name|getLast
argument_list|()
decl_stmt|;
name|frame
operator|.
name|myNumberOfChildrenRemaining
operator|--
expr_stmt|;
block|}
comment|//TODO: FIXME
if|if
condition|(
name|logEntry
operator|.
name|hasChildren
argument_list|()
condition|)
block|{
name|MergeFrame
name|frame
init|=
operator|new
name|MergeFrame
argument_list|()
decl_stmt|;
comment|//frame.myNumberOfChildrenRemaining = logEntry.getNumberOfChildren();
if|if
condition|(
name|myMergeStack
operator|==
literal|null
condition|)
block|{
name|myMergeStack
operator|=
operator|new
name|LinkedList
argument_list|()
expr_stmt|;
block|}
name|myMergeStack
operator|.
name|addLast
argument_list|(
name|frame
argument_list|)
expr_stmt|;
block|}
else|else
block|{
while|while
condition|(
name|myMergeStack
operator|!=
literal|null
operator|&&
operator|!
name|myMergeStack
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|MergeFrame
name|frame
init|=
operator|(
name|MergeFrame
operator|)
name|myMergeStack
operator|.
name|getLast
argument_list|()
decl_stmt|;
if|if
condition|(
name|frame
operator|.
name|myNumberOfChildrenRemaining
operator|==
literal|0
condition|)
block|{
name|closeTag
argument_list|(
name|LOGENTRY_TAG
argument_list|)
expr_stmt|;
name|myMergeStack
operator|.
name|removeLast
argument_list|()
expr_stmt|;
block|}
else|else
block|{
break|break;
block|}
block|}
name|closeTag
argument_list|(
name|LOGENTRY_TAG
argument_list|)
expr_stmt|;
block|}
block|}
specifier|private
class|class
name|MergeFrame
block|{
specifier|private
name|long
name|myNumberOfChildrenRemaining
decl_stmt|;
block|}
block|}
end_class

end_unit

