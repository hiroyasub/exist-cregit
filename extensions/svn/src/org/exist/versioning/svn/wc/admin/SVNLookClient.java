begin_unit|revision:1.0.0;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * ====================================================================  * Copyright (c) 2004-2010 TMate Software Ltd.  All rights reserved.  *  * This software is licensed as described in the file COPYING, which  * you should have received as part of this distribution.  The terms  * are also available at http://svnkit.com/license.html.  * If newer versions of this license are posted there, you may use a  * newer version instead, at your option.  * ====================================================================  */
end_comment

begin_package
package|package
name|org
operator|.
name|exist
operator|.
name|versioning
operator|.
name|svn
operator|.
name|wc
operator|.
name|admin
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|File
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|InputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|OutputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Date
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Iterator
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|versioning
operator|.
name|svn
operator|.
name|internal
operator|.
name|wc
operator|.
name|DefaultSVNGNUDiffGenerator
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|versioning
operator|.
name|svn
operator|.
name|internal
operator|.
name|wc
operator|.
name|SVNAdminHelper
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|versioning
operator|.
name|svn
operator|.
name|internal
operator|.
name|wc
operator|.
name|SVNErrorManager
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|versioning
operator|.
name|svn
operator|.
name|internal
operator|.
name|wc
operator|.
name|SVNFileUtil
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|versioning
operator|.
name|svn
operator|.
name|internal
operator|.
name|wc
operator|.
name|SVNNodeEditor
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|versioning
operator|.
name|svn
operator|.
name|wc
operator|.
name|ISVNOptions
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|versioning
operator|.
name|svn
operator|.
name|wc
operator|.
name|SVNBasicClient
import|;
end_import

begin_import
import|import
name|org
operator|.
name|tmatesoft
operator|.
name|svn
operator|.
name|core
operator|.
name|SVNErrorCode
import|;
end_import

begin_import
import|import
name|org
operator|.
name|tmatesoft
operator|.
name|svn
operator|.
name|core
operator|.
name|SVNErrorMessage
import|;
end_import

begin_import
import|import
name|org
operator|.
name|tmatesoft
operator|.
name|svn
operator|.
name|core
operator|.
name|SVNException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|tmatesoft
operator|.
name|svn
operator|.
name|core
operator|.
name|SVNLock
import|;
end_import

begin_import
import|import
name|org
operator|.
name|tmatesoft
operator|.
name|svn
operator|.
name|core
operator|.
name|SVNLogEntry
import|;
end_import

begin_import
import|import
name|org
operator|.
name|tmatesoft
operator|.
name|svn
operator|.
name|core
operator|.
name|SVNNodeKind
import|;
end_import

begin_import
import|import
name|org
operator|.
name|tmatesoft
operator|.
name|svn
operator|.
name|core
operator|.
name|SVNProperties
import|;
end_import

begin_import
import|import
name|org
operator|.
name|tmatesoft
operator|.
name|svn
operator|.
name|core
operator|.
name|SVNPropertyValue
import|;
end_import

begin_import
import|import
name|org
operator|.
name|tmatesoft
operator|.
name|svn
operator|.
name|core
operator|.
name|SVNRevisionProperty
import|;
end_import

begin_import
import|import
name|org
operator|.
name|tmatesoft
operator|.
name|svn
operator|.
name|core
operator|.
name|auth
operator|.
name|ISVNAuthenticationManager
import|;
end_import

begin_import
import|import
name|org
operator|.
name|tmatesoft
operator|.
name|svn
operator|.
name|core
operator|.
name|internal
operator|.
name|delta
operator|.
name|SVNDeltaCombiner
import|;
end_import

begin_import
import|import
name|org
operator|.
name|tmatesoft
operator|.
name|svn
operator|.
name|core
operator|.
name|internal
operator|.
name|io
operator|.
name|fs
operator|.
name|FSEntry
import|;
end_import

begin_import
import|import
name|org
operator|.
name|tmatesoft
operator|.
name|svn
operator|.
name|core
operator|.
name|internal
operator|.
name|io
operator|.
name|fs
operator|.
name|FSFS
import|;
end_import

begin_import
import|import
name|org
operator|.
name|tmatesoft
operator|.
name|svn
operator|.
name|core
operator|.
name|internal
operator|.
name|io
operator|.
name|fs
operator|.
name|FSID
import|;
end_import

begin_import
import|import
name|org
operator|.
name|tmatesoft
operator|.
name|svn
operator|.
name|core
operator|.
name|internal
operator|.
name|io
operator|.
name|fs
operator|.
name|FSNodeHistory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|tmatesoft
operator|.
name|svn
operator|.
name|core
operator|.
name|internal
operator|.
name|io
operator|.
name|fs
operator|.
name|FSRepositoryUtil
import|;
end_import

begin_import
import|import
name|org
operator|.
name|tmatesoft
operator|.
name|svn
operator|.
name|core
operator|.
name|internal
operator|.
name|io
operator|.
name|fs
operator|.
name|FSRevisionNode
import|;
end_import

begin_import
import|import
name|org
operator|.
name|tmatesoft
operator|.
name|svn
operator|.
name|core
operator|.
name|internal
operator|.
name|io
operator|.
name|fs
operator|.
name|FSRevisionRoot
import|;
end_import

begin_import
import|import
name|org
operator|.
name|tmatesoft
operator|.
name|svn
operator|.
name|core
operator|.
name|internal
operator|.
name|io
operator|.
name|fs
operator|.
name|FSRoot
import|;
end_import

begin_import
import|import
name|org
operator|.
name|tmatesoft
operator|.
name|svn
operator|.
name|core
operator|.
name|internal
operator|.
name|io
operator|.
name|fs
operator|.
name|FSTransactionInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|tmatesoft
operator|.
name|svn
operator|.
name|core
operator|.
name|internal
operator|.
name|util
operator|.
name|SVNDate
import|;
end_import

begin_import
import|import
name|org
operator|.
name|tmatesoft
operator|.
name|svn
operator|.
name|core
operator|.
name|internal
operator|.
name|util
operator|.
name|SVNPathUtil
import|;
end_import

begin_import
import|import
name|org
operator|.
name|tmatesoft
operator|.
name|svn
operator|.
name|core
operator|.
name|wc
operator|.
name|ISVNRepositoryPool
import|;
end_import

begin_import
import|import
name|org
operator|.
name|tmatesoft
operator|.
name|svn
operator|.
name|core
operator|.
name|wc
operator|.
name|SVNRevision
import|;
end_import

begin_import
import|import
name|org
operator|.
name|tmatesoft
operator|.
name|svn
operator|.
name|core
operator|.
name|wc
operator|.
name|admin
operator|.
name|ISVNChangeEntryHandler
import|;
end_import

begin_import
import|import
name|org
operator|.
name|tmatesoft
operator|.
name|svn
operator|.
name|core
operator|.
name|wc
operator|.
name|admin
operator|.
name|ISVNChangedDirectoriesHandler
import|;
end_import

begin_import
import|import
name|org
operator|.
name|tmatesoft
operator|.
name|svn
operator|.
name|core
operator|.
name|wc
operator|.
name|admin
operator|.
name|ISVNGNUDiffGenerator
import|;
end_import

begin_import
import|import
name|org
operator|.
name|tmatesoft
operator|.
name|svn
operator|.
name|core
operator|.
name|wc
operator|.
name|admin
operator|.
name|ISVNHistoryHandler
import|;
end_import

begin_import
import|import
name|org
operator|.
name|tmatesoft
operator|.
name|svn
operator|.
name|core
operator|.
name|wc
operator|.
name|admin
operator|.
name|ISVNTreeHandler
import|;
end_import

begin_import
import|import
name|org
operator|.
name|tmatesoft
operator|.
name|svn
operator|.
name|core
operator|.
name|wc
operator|.
name|admin
operator|.
name|SVNAdminPath
import|;
end_import

begin_import
import|import
name|org
operator|.
name|tmatesoft
operator|.
name|svn
operator|.
name|util
operator|.
name|SVNLogType
import|;
end_import

begin_comment
comment|/**  * The<b>SVNLookClient</b> class provides API for examining   * different aspects of a Subversion repository. Its functionality   * is similar to the one of the Subversion command-line utility   * called<i>svnlook</i>. The following table matches methods of   *<b>SVNLookClient</b> to the corresponding commands of the   *<i>svnlook</i> utility (to make sense what its different methods  * are for):  *   *<table cellpadding="3" cellspacing="1" border="0" width="50%" bgcolor="#999933">  *<tr bgcolor="#ADB8D9" align="left">  *<td><b>SVNLookClient</b></td>  *<td><b>Subversion</b></td>  *</tr>     *<tr bgcolor="#EAEAEA" align="left">  *<td>doCat()</td><td>'svnlook cat'</td>  *</tr>  *<tr bgcolor="#EAEAEA" align="left">  *<td>doGetAuthor()</td><td>'svnlook author'</td>  *</tr>  *<tr bgcolor="#EAEAEA" align="left">  *<td>doGetChanged()</td><td>'svnlook changed'</td>  *</tr>  *<tr bgcolor="#EAEAEA" align="left">  *<td>doGetChangedDirectories()</td><td>'svnlook dirs-changed'</td>  *</tr>  *<tr bgcolor="#EAEAEA" align="left">  *<td>doGetDate()</td><td>'svnlook date'</td>  *</tr>  *<tr bgcolor="#EAEAEA" align="left">  *<td>doGetDiff()</td><td>'svnlook diff'</td>  *</tr>  *<tr bgcolor="#EAEAEA" align="left">  *<td>doGetHistory()</td><td>'svnlook history'</td>  *</tr>  *<tr bgcolor="#EAEAEA" align="left">  *<td>doGetInfo()</td><td>'svnlook info'</td>  *</tr>  *<tr bgcolor="#EAEAEA" align="left">  *<td>doGetLock()</td><td>'svnlook lock'</td>  *</tr>  *<tr bgcolor="#EAEAEA" align="left">  *<td>doGetLog()</td><td>'svnlook log'</td>  *</tr>  *<tr bgcolor="#EAEAEA" align="left">  *<td>doGetProperties()</td><td>'svnlook proplist'</td>  *</tr>  *<tr bgcolor="#EAEAEA" align="left">  *<td>doGetProperty()</td><td>'svnlook propget'</td>  *</tr>  *<tr bgcolor="#EAEAEA" align="left">  *<td>doGetRevisionProperties()</td><td>'svnlook proplist --revprop'</td>  *</tr>  *<tr bgcolor="#EAEAEA" align="left">  *<td>doGetRevisionProperty()</td><td>'svnlook propget --revprop'</td>  *</tr>  *<tr bgcolor="#EAEAEA" align="left">  *<td>doGetTree()</td><td>'svnlook tree'</td>  *</tr>  *<tr bgcolor="#EAEAEA" align="left">  *<td>doGetUUID()</td><td>'svnlook uuid'</td>  *</tr>  *<tr bgcolor="#EAEAEA" align="left">  *<td>doGetYoungestRevision()</td><td>'svnlook youngest'</td>  *</tr>  *</table>  *   * @version 1.3  * @author  TMate Software Ltd.  * @since   1.2  */
end_comment

begin_class
specifier|public
class|class
name|SVNLookClient
extends|extends
name|SVNBasicClient
block|{
specifier|private
name|ISVNGNUDiffGenerator
name|myDiffGenerator
decl_stmt|;
comment|/**      * Creates a new instance of<b>SVNLookClient</b>      * given an authentication manager and global       * options keeper.      *       * @param authManager  a manager which provides authentication      *                     credentials      * @param options      a global config options provider      */
specifier|public
name|SVNLookClient
parameter_list|(
name|ISVNAuthenticationManager
name|authManager
parameter_list|,
name|ISVNOptions
name|options
parameter_list|)
block|{
name|super
argument_list|(
name|authManager
argument_list|,
name|options
argument_list|)
expr_stmt|;
block|}
comment|/**      * Creates a new instance of<b>SVNLookClient</b>      * given an {@link org.tmatesoft.svn.core.io.SVNRepository}}       * drivers provider and global options keeper.      *       * @param repositoryPool a repository connectors keeper       * @param options        a global config options provider      */
specifier|public
name|SVNLookClient
parameter_list|(
name|ISVNRepositoryPool
name|repositoryPool
parameter_list|,
name|ISVNOptions
name|options
parameter_list|)
block|{
name|super
argument_list|(
name|repositoryPool
argument_list|,
name|options
argument_list|)
expr_stmt|;
block|}
comment|/**      * Retrieves author, timestamp and log message information from       * the repository for the given revision. This information is       * provided in a single {@link org.tmatesoft.svn.core.SVNLogEntry}       * object, that is only the following methods of<b>SVNLogEntry</b>       * return valid information:      *       *<ul>      *<li>      * {@link org.tmatesoft.svn.core.SVNLogEntry#getAuthor() getAuthor()}      *</li>      *<li>      * {@link org.tmatesoft.svn.core.SVNLogEntry#getDate() getDate()}      *</li>      *<li>      * {@link org.tmatesoft.svn.core.SVNLogEntry#getMessage() getMessage()}      *</li>      *<li>      * {@link org.tmatesoft.svn.core.SVNLogEntry#getRevision() getRevision()}      *</li>      *</ul>        *       * @param   repositoryRoot  a repository root directory path      * @param   revision        a revision number      * @return                  revision info      * @throws  SVNException    no repository is found at       *<code>repositoryRoot</code>       */
specifier|public
name|SVNLogEntry
name|doGetInfo
parameter_list|(
name|File
name|repositoryRoot
parameter_list|,
name|SVNRevision
name|revision
parameter_list|)
throws|throws
name|SVNException
block|{
name|FSFS
name|fsfs
init|=
name|open
argument_list|(
name|repositoryRoot
argument_list|,
name|revision
argument_list|)
decl_stmt|;
try|try
block|{
name|long
name|revNum
init|=
name|SVNAdminHelper
operator|.
name|getRevisionNumber
argument_list|(
name|revision
argument_list|,
name|fsfs
operator|.
name|getYoungestRevision
argument_list|()
argument_list|,
name|fsfs
argument_list|)
decl_stmt|;
name|SVNProperties
name|revProps
init|=
name|fsfs
operator|.
name|getRevisionProperties
argument_list|(
name|revNum
argument_list|)
decl_stmt|;
name|String
name|date
init|=
name|revProps
operator|.
name|getStringValue
argument_list|(
name|SVNRevisionProperty
operator|.
name|DATE
argument_list|)
decl_stmt|;
name|String
name|author
init|=
name|revProps
operator|.
name|getStringValue
argument_list|(
name|SVNRevisionProperty
operator|.
name|AUTHOR
argument_list|)
decl_stmt|;
name|String
name|logMessage
init|=
name|revProps
operator|.
name|getStringValue
argument_list|(
name|SVNRevisionProperty
operator|.
name|LOG
argument_list|)
decl_stmt|;
return|return
operator|new
name|SVNLogEntry
argument_list|(
literal|null
argument_list|,
name|revNum
argument_list|,
name|author
argument_list|,
name|SVNDate
operator|.
name|parseDateString
argument_list|(
name|date
argument_list|)
argument_list|,
name|logMessage
argument_list|)
return|;
block|}
finally|finally
block|{
name|SVNAdminHelper
operator|.
name|closeRepository
argument_list|(
name|fsfs
argument_list|)
expr_stmt|;
block|}
block|}
comment|/**      * Retrieves author, timestamp and log message information from       * the repository for the given transaction name. This information is       * provided in a single {@link org.tmatesoft.svn.core.SVNLogEntry}       * object, that is only the following methods of<b>SVNLogEntry</b>       * return valid information:      *<ul>      *<li>      * {@link org.tmatesoft.svn.core.SVNLogEntry#getAuthor() getAuthor()}      *</li>      *<li>      * {@link org.tmatesoft.svn.core.SVNLogEntry#getDate() getDate()}      *</li>      *<li>      * {@link org.tmatesoft.svn.core.SVNLogEntry#getMessage() getMessage()}      *</li>      *</ul>        *       * @param   repositoryRoot   a repository root directory path      * @param   transactionName  a transaction name      * @return                   transaction info      * @throws SVNException<ul>      *<li>no repository is found at       *<code>repositoryRoot</code></li>      *<li>if the specified transaction is not found</li>      *</ul>      */
specifier|public
name|SVNLogEntry
name|doGetInfo
parameter_list|(
name|File
name|repositoryRoot
parameter_list|,
name|String
name|transactionName
parameter_list|)
throws|throws
name|SVNException
block|{
name|FSFS
name|fsfs
init|=
name|open
argument_list|(
name|repositoryRoot
argument_list|,
name|transactionName
argument_list|)
decl_stmt|;
try|try
block|{
name|FSTransactionInfo
name|txn
init|=
name|fsfs
operator|.
name|openTxn
argument_list|(
name|transactionName
argument_list|)
decl_stmt|;
name|SVNProperties
name|txnProps
init|=
name|fsfs
operator|.
name|getTransactionProperties
argument_list|(
name|txn
operator|.
name|getTxnId
argument_list|()
argument_list|)
decl_stmt|;
name|String
name|date
init|=
name|txnProps
operator|.
name|getStringValue
argument_list|(
name|SVNRevisionProperty
operator|.
name|DATE
argument_list|)
decl_stmt|;
name|String
name|author
init|=
name|txnProps
operator|.
name|getStringValue
argument_list|(
name|SVNRevisionProperty
operator|.
name|AUTHOR
argument_list|)
decl_stmt|;
name|String
name|logMessage
init|=
name|txnProps
operator|.
name|getStringValue
argument_list|(
name|SVNRevisionProperty
operator|.
name|LOG
argument_list|)
decl_stmt|;
return|return
operator|new
name|SVNLogEntry
argument_list|(
literal|null
argument_list|,
operator|-
literal|1
argument_list|,
name|author
argument_list|,
name|SVNDate
operator|.
name|parseDateString
argument_list|(
name|date
argument_list|)
argument_list|,
name|logMessage
argument_list|)
return|;
block|}
finally|finally
block|{
name|SVNAdminHelper
operator|.
name|closeRepository
argument_list|(
name|fsfs
argument_list|)
expr_stmt|;
block|}
block|}
comment|/**      * Returns the latest revision of the repository.      *       * @param  repositoryRoot   a repository root directory path      * @return                  a revision number      * @throws SVNException     no repository is found at       *<code>repositoryRoot</code>      */
specifier|public
name|long
name|doGetYoungestRevision
parameter_list|(
name|File
name|repositoryRoot
parameter_list|)
throws|throws
name|SVNException
block|{
name|FSFS
name|fsfs
init|=
literal|null
decl_stmt|;
try|try
block|{
name|fsfs
operator|=
name|SVNAdminHelper
operator|.
name|openRepository
argument_list|(
name|repositoryRoot
argument_list|,
literal|true
argument_list|)
expr_stmt|;
return|return
name|fsfs
operator|.
name|getYoungestRevision
argument_list|()
return|;
block|}
finally|finally
block|{
name|SVNAdminHelper
operator|.
name|closeRepository
argument_list|(
name|fsfs
argument_list|)
expr_stmt|;
block|}
block|}
comment|/**      * Returns the uuid of the repository.      *       * @param  repositoryRoot  a repository root directory path      * @return                 an uuid      * @throws SVNException    no repository is found at       *<code>repositoryRoot</code>      */
specifier|public
name|String
name|doGetUUID
parameter_list|(
name|File
name|repositoryRoot
parameter_list|)
throws|throws
name|SVNException
block|{
name|FSFS
name|fsfs
init|=
literal|null
decl_stmt|;
try|try
block|{
name|fsfs
operator|=
name|SVNAdminHelper
operator|.
name|openRepository
argument_list|(
name|repositoryRoot
argument_list|,
literal|true
argument_list|)
expr_stmt|;
return|return
name|fsfs
operator|.
name|getUUID
argument_list|()
return|;
block|}
finally|finally
block|{
name|SVNAdminHelper
operator|.
name|closeRepository
argument_list|(
name|fsfs
argument_list|)
expr_stmt|;
block|}
block|}
comment|/**      * Returns author information for the given revision.       *       * @param  repositoryRoot a repository root directory path      * @param  revision       a revision number      * @return                a revision author       * @throws SVNException   no repository is found at       *<code>repositoryRoot</code>      */
specifier|public
name|String
name|doGetAuthor
parameter_list|(
name|File
name|repositoryRoot
parameter_list|,
name|SVNRevision
name|revision
parameter_list|)
throws|throws
name|SVNException
block|{
name|FSFS
name|fsfs
init|=
name|open
argument_list|(
name|repositoryRoot
argument_list|,
name|revision
argument_list|)
decl_stmt|;
try|try
block|{
name|long
name|revNum
init|=
name|SVNAdminHelper
operator|.
name|getRevisionNumber
argument_list|(
name|revision
argument_list|,
name|fsfs
operator|.
name|getYoungestRevision
argument_list|()
argument_list|,
name|fsfs
argument_list|)
decl_stmt|;
name|SVNProperties
name|revProps
init|=
name|fsfs
operator|.
name|getRevisionProperties
argument_list|(
name|revNum
argument_list|)
decl_stmt|;
return|return
name|revProps
operator|.
name|getStringValue
argument_list|(
name|SVNRevisionProperty
operator|.
name|AUTHOR
argument_list|)
return|;
block|}
finally|finally
block|{
name|SVNAdminHelper
operator|.
name|closeRepository
argument_list|(
name|fsfs
argument_list|)
expr_stmt|;
block|}
block|}
comment|/**      * Returns author information for the given transaction.       *       * @param  repositoryRoot   a repository root directory path      * @param  transactionName  a transaction name      * @return                  a transaction owner      * @throws SVNException<ul>      *<li>no repository is found at       *<code>repositoryRoot</code></li>      *<li>if the specified transaction is not found</li>      *</ul>       */
specifier|public
name|String
name|doGetAuthor
parameter_list|(
name|File
name|repositoryRoot
parameter_list|,
name|String
name|transactionName
parameter_list|)
throws|throws
name|SVNException
block|{
name|FSFS
name|fsfs
init|=
name|open
argument_list|(
name|repositoryRoot
argument_list|,
name|transactionName
argument_list|)
decl_stmt|;
try|try
block|{
name|FSTransactionInfo
name|txn
init|=
name|fsfs
operator|.
name|openTxn
argument_list|(
name|transactionName
argument_list|)
decl_stmt|;
name|SVNProperties
name|txnProps
init|=
name|fsfs
operator|.
name|getTransactionProperties
argument_list|(
name|txn
operator|.
name|getTxnId
argument_list|()
argument_list|)
decl_stmt|;
return|return
name|txnProps
operator|.
name|getStringValue
argument_list|(
name|SVNRevisionProperty
operator|.
name|AUTHOR
argument_list|)
return|;
block|}
finally|finally
block|{
name|SVNAdminHelper
operator|.
name|closeRepository
argument_list|(
name|fsfs
argument_list|)
expr_stmt|;
block|}
block|}
comment|/**      * Fetches file contents for the specified revision and path.       *<code>path</code> must be absolute, that is it must       * start with<code>'/'</code>. The provided output stream is      * not closed within this method.      *       * @param  repositoryRoot  a repository root directory path      * @param  path            an absolute file path      * @param  revision        a revision number      * @param  out             an output stream to write contents to      * @throws SVNException<ul>      *<li>no repository is found at       *<code>repositoryRoot</code>      *</li>      *<li>if<code>path</code> is not found or      *                         is not a file      *</li>      *</ul>      */
specifier|public
name|void
name|doCat
parameter_list|(
name|File
name|repositoryRoot
parameter_list|,
name|String
name|path
parameter_list|,
name|SVNRevision
name|revision
parameter_list|,
name|OutputStream
name|out
parameter_list|)
throws|throws
name|SVNException
block|{
if|if
condition|(
name|path
operator|==
literal|null
condition|)
block|{
name|SVNErrorMessage
name|err
init|=
name|SVNErrorMessage
operator|.
name|create
argument_list|(
name|SVNErrorCode
operator|.
name|CL_INSUFFICIENT_ARGS
argument_list|,
literal|"Missing repository path argument"
argument_list|)
decl_stmt|;
name|SVNErrorManager
operator|.
name|error
argument_list|(
name|err
argument_list|,
name|SVNLogType
operator|.
name|FSFS
argument_list|)
expr_stmt|;
block|}
name|FSFS
name|fsfs
init|=
name|open
argument_list|(
name|repositoryRoot
argument_list|,
name|revision
argument_list|)
decl_stmt|;
try|try
block|{
name|long
name|revNum
init|=
name|SVNAdminHelper
operator|.
name|getRevisionNumber
argument_list|(
name|revision
argument_list|,
name|fsfs
operator|.
name|getYoungestRevision
argument_list|()
argument_list|,
name|fsfs
argument_list|)
decl_stmt|;
name|FSRoot
name|root
init|=
name|fsfs
operator|.
name|createRevisionRoot
argument_list|(
name|revNum
argument_list|)
decl_stmt|;
name|catFile
argument_list|(
name|root
argument_list|,
name|path
argument_list|,
name|out
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
name|SVNAdminHelper
operator|.
name|closeRepository
argument_list|(
name|fsfs
argument_list|)
expr_stmt|;
block|}
block|}
comment|/**      * Fetches file contents for the specified path in the given       * transaction.<code>path</code> must be absolute, that is it       * must start with<code>'/'</code>. The provided output stream       * is not closed within this method.      *       * @param  repositoryRoot   a repository root directory path      * @param  path             an absolute file path      * @param  transactionName  a transaction name      * @param  out              an output stream to write contents to      * @throws SVNException<ul>      *<li>no repository is found at       *<code>repositoryRoot</code>      *</li>      *<li>if<code>path</code> is not found or      *                          is not a file      *</li>      *<li>if the specified transaction is not found      *</li>      *</ul>      */
specifier|public
name|void
name|doCat
parameter_list|(
name|File
name|repositoryRoot
parameter_list|,
name|String
name|path
parameter_list|,
name|String
name|transactionName
parameter_list|,
name|OutputStream
name|out
parameter_list|)
throws|throws
name|SVNException
block|{
if|if
condition|(
name|path
operator|==
literal|null
condition|)
block|{
name|SVNErrorMessage
name|err
init|=
name|SVNErrorMessage
operator|.
name|create
argument_list|(
name|SVNErrorCode
operator|.
name|CL_INSUFFICIENT_ARGS
argument_list|,
literal|"Missing repository path argument"
argument_list|)
decl_stmt|;
name|SVNErrorManager
operator|.
name|error
argument_list|(
name|err
argument_list|,
name|SVNLogType
operator|.
name|FSFS
argument_list|)
expr_stmt|;
block|}
name|FSFS
name|fsfs
init|=
name|open
argument_list|(
name|repositoryRoot
argument_list|,
name|transactionName
argument_list|)
decl_stmt|;
try|try
block|{
name|FSTransactionInfo
name|txn
init|=
name|fsfs
operator|.
name|openTxn
argument_list|(
name|transactionName
argument_list|)
decl_stmt|;
name|FSRoot
name|root
init|=
name|fsfs
operator|.
name|createTransactionRoot
argument_list|(
name|txn
argument_list|)
decl_stmt|;
name|catFile
argument_list|(
name|root
argument_list|,
name|path
argument_list|,
name|out
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
name|SVNAdminHelper
operator|.
name|closeRepository
argument_list|(
name|fsfs
argument_list|)
expr_stmt|;
block|}
block|}
comment|/**      * Returns datestamp information for the given revision.       *       * @param  repositoryRoot   a repository root directory path      * @param  revision         a revision number      * @return                  a datestamp      * @throws SVNException     no repository is found at       *<code>repositoryRoot</code>      */
specifier|public
name|Date
name|doGetDate
parameter_list|(
name|File
name|repositoryRoot
parameter_list|,
name|SVNRevision
name|revision
parameter_list|)
throws|throws
name|SVNException
block|{
name|FSFS
name|fsfs
init|=
name|open
argument_list|(
name|repositoryRoot
argument_list|,
name|revision
argument_list|)
decl_stmt|;
try|try
block|{
name|long
name|revNum
init|=
name|SVNAdminHelper
operator|.
name|getRevisionNumber
argument_list|(
name|revision
argument_list|,
name|fsfs
operator|.
name|getYoungestRevision
argument_list|()
argument_list|,
name|fsfs
argument_list|)
decl_stmt|;
name|SVNProperties
name|revProps
init|=
name|fsfs
operator|.
name|getRevisionProperties
argument_list|(
name|revNum
argument_list|)
decl_stmt|;
name|String
name|date
init|=
name|revProps
operator|.
name|getStringValue
argument_list|(
name|SVNRevisionProperty
operator|.
name|DATE
argument_list|)
decl_stmt|;
if|if
condition|(
name|date
operator|!=
literal|null
condition|)
block|{
return|return
name|SVNDate
operator|.
name|parseDate
argument_list|(
name|date
argument_list|)
return|;
block|}
return|return
literal|null
return|;
block|}
finally|finally
block|{
name|SVNAdminHelper
operator|.
name|closeRepository
argument_list|(
name|fsfs
argument_list|)
expr_stmt|;
block|}
block|}
comment|/**      * Returns datestamp information for the given transaction.       *       * @param  repositoryRoot   a repository root directory path      * @param  transactionName  a transaction name      * @return                  a datestamp      * @throws SVNException<ul>      *<li>no repository is found at       *<code>repositoryRoot</code>      *</li>      *<li>if the specified transaction is not found      *</li>      *</ul>      */
specifier|public
name|Date
name|doGetDate
parameter_list|(
name|File
name|repositoryRoot
parameter_list|,
name|String
name|transactionName
parameter_list|)
throws|throws
name|SVNException
block|{
name|FSFS
name|fsfs
init|=
name|open
argument_list|(
name|repositoryRoot
argument_list|,
name|transactionName
argument_list|)
decl_stmt|;
try|try
block|{
name|FSTransactionInfo
name|txn
init|=
name|fsfs
operator|.
name|openTxn
argument_list|(
name|transactionName
argument_list|)
decl_stmt|;
name|SVNProperties
name|txnProps
init|=
name|fsfs
operator|.
name|getTransactionProperties
argument_list|(
name|txn
operator|.
name|getTxnId
argument_list|()
argument_list|)
decl_stmt|;
name|String
name|date
init|=
name|txnProps
operator|.
name|getStringValue
argument_list|(
name|SVNRevisionProperty
operator|.
name|DATE
argument_list|)
decl_stmt|;
if|if
condition|(
name|date
operator|!=
literal|null
condition|)
block|{
return|return
name|SVNDate
operator|.
name|parseDate
argument_list|(
name|date
argument_list|)
return|;
block|}
return|return
literal|null
return|;
block|}
finally|finally
block|{
name|SVNAdminHelper
operator|.
name|closeRepository
argument_list|(
name|fsfs
argument_list|)
expr_stmt|;
block|}
block|}
comment|/**      * Returns log information for the given revision.       *       * @param  repositoryRoot   a repository root directory path      * @param  revision         a revision number      * @return                  a log message      * @throws SVNException     no repository is found at       *<code>repositoryRoot</code>      */
specifier|public
name|String
name|doGetLog
parameter_list|(
name|File
name|repositoryRoot
parameter_list|,
name|SVNRevision
name|revision
parameter_list|)
throws|throws
name|SVNException
block|{
name|FSFS
name|fsfs
init|=
name|open
argument_list|(
name|repositoryRoot
argument_list|,
name|revision
argument_list|)
decl_stmt|;
try|try
block|{
name|long
name|revNum
init|=
name|SVNAdminHelper
operator|.
name|getRevisionNumber
argument_list|(
name|revision
argument_list|,
name|fsfs
operator|.
name|getYoungestRevision
argument_list|()
argument_list|,
name|fsfs
argument_list|)
decl_stmt|;
name|SVNProperties
name|revProps
init|=
name|fsfs
operator|.
name|getRevisionProperties
argument_list|(
name|revNum
argument_list|)
decl_stmt|;
return|return
name|revProps
operator|.
name|getStringValue
argument_list|(
name|SVNRevisionProperty
operator|.
name|LOG
argument_list|)
return|;
block|}
finally|finally
block|{
name|SVNAdminHelper
operator|.
name|closeRepository
argument_list|(
name|fsfs
argument_list|)
expr_stmt|;
block|}
block|}
comment|/**      * Returns log information for the given transaction.       *       * @param  repositoryRoot   a repository root directory path      * @param  transactionName  a transaction name      * @return                  a log message      * @throws SVNException<ul>      *<li>no repository is found at       *<code>repositoryRoot</code>      *</li>      *<li>if the specified transaction is not found      *</li>      *</ul>      */
specifier|public
name|String
name|doGetLog
parameter_list|(
name|File
name|repositoryRoot
parameter_list|,
name|String
name|transactionName
parameter_list|)
throws|throws
name|SVNException
block|{
name|FSFS
name|fsfs
init|=
name|open
argument_list|(
name|repositoryRoot
argument_list|,
name|transactionName
argument_list|)
decl_stmt|;
try|try
block|{
name|FSTransactionInfo
name|txn
init|=
name|fsfs
operator|.
name|openTxn
argument_list|(
name|transactionName
argument_list|)
decl_stmt|;
name|SVNProperties
name|txnProps
init|=
name|fsfs
operator|.
name|getTransactionProperties
argument_list|(
name|txn
operator|.
name|getTxnId
argument_list|()
argument_list|)
decl_stmt|;
return|return
name|txnProps
operator|.
name|getStringValue
argument_list|(
name|SVNRevisionProperty
operator|.
name|LOG
argument_list|)
return|;
block|}
finally|finally
block|{
name|SVNAdminHelper
operator|.
name|closeRepository
argument_list|(
name|fsfs
argument_list|)
expr_stmt|;
block|}
block|}
comment|/**      * Traverses changed paths for the given revision invoking       * the passed handler on each changed path.       *       * @param  repositoryRoot   a repository root directory path      * @param  revision         a revision number      * @param  handler          a changed path handler      * @param  includeCopyInfo  if<span class="javakeyword">true</span> copy-from       *                          information is also provided for copied paths      * @throws SVNException     no repository is found at       *<code>repositoryRoot</code>      */
specifier|public
name|void
name|doGetChanged
parameter_list|(
name|File
name|repositoryRoot
parameter_list|,
name|SVNRevision
name|revision
parameter_list|,
name|ISVNChangeEntryHandler
name|handler
parameter_list|,
name|boolean
name|includeCopyInfo
parameter_list|)
throws|throws
name|SVNException
block|{
name|FSFS
name|fsfs
init|=
name|open
argument_list|(
name|repositoryRoot
argument_list|,
name|revision
argument_list|)
decl_stmt|;
try|try
block|{
name|long
name|revNum
init|=
name|SVNAdminHelper
operator|.
name|getRevisionNumber
argument_list|(
name|revision
argument_list|,
name|fsfs
operator|.
name|getYoungestRevision
argument_list|()
argument_list|,
name|fsfs
argument_list|)
decl_stmt|;
name|FSRoot
name|root
init|=
name|fsfs
operator|.
name|createRevisionRoot
argument_list|(
name|revNum
argument_list|)
decl_stmt|;
name|long
name|baseRevision
init|=
name|revNum
operator|-
literal|1
decl_stmt|;
name|SVNNodeEditor
name|editor
init|=
name|generateDeltaTree
argument_list|(
name|fsfs
argument_list|,
name|root
argument_list|,
name|baseRevision
argument_list|)
decl_stmt|;
name|editor
operator|.
name|traverseTree
argument_list|(
name|includeCopyInfo
argument_list|,
name|handler
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
name|SVNAdminHelper
operator|.
name|closeRepository
argument_list|(
name|fsfs
argument_list|)
expr_stmt|;
block|}
block|}
comment|/**      * Traverses changed paths for the given transaction invoking       * the passed handler on each changed path.       *       * @param  repositoryRoot   a repository root directory path      * @param  transactionName  a transaction name      * @param  handler          a changed path handler      * @param  includeCopyInfo  if<span class="javakeyword">true</span> copy-from       *                          information is also provided for copied paths      * @throws SVNException<ul>      *<li>no repository is found at       *<code>repositoryRoot</code>      *</li>      *<li>if the specified transaction is not found      *</li>      *</ul>      */
specifier|public
name|void
name|doGetChanged
parameter_list|(
name|File
name|repositoryRoot
parameter_list|,
name|String
name|transactionName
parameter_list|,
name|ISVNChangeEntryHandler
name|handler
parameter_list|,
name|boolean
name|includeCopyInfo
parameter_list|)
throws|throws
name|SVNException
block|{
name|FSFS
name|fsfs
init|=
name|open
argument_list|(
name|repositoryRoot
argument_list|,
name|transactionName
argument_list|)
decl_stmt|;
try|try
block|{
name|FSTransactionInfo
name|txn
init|=
name|fsfs
operator|.
name|openTxn
argument_list|(
name|transactionName
argument_list|)
decl_stmt|;
name|FSRoot
name|root
init|=
name|fsfs
operator|.
name|createTransactionRoot
argument_list|(
name|txn
argument_list|)
decl_stmt|;
name|long
name|baseRevision
init|=
name|txn
operator|.
name|getBaseRevision
argument_list|()
decl_stmt|;
if|if
condition|(
operator|!
name|SVNRevision
operator|.
name|isValidRevisionNumber
argument_list|(
name|baseRevision
argument_list|)
condition|)
block|{
name|SVNErrorMessage
name|err
init|=
name|SVNErrorMessage
operator|.
name|create
argument_list|(
name|SVNErrorCode
operator|.
name|FS_NO_SUCH_REVISION
argument_list|,
literal|"Transaction ''{0}'' is not based on a revision; how odd"
argument_list|,
name|transactionName
argument_list|)
decl_stmt|;
name|SVNErrorManager
operator|.
name|error
argument_list|(
name|err
argument_list|,
name|SVNLogType
operator|.
name|FSFS
argument_list|)
expr_stmt|;
block|}
name|SVNNodeEditor
name|editor
init|=
name|generateDeltaTree
argument_list|(
name|fsfs
argument_list|,
name|root
argument_list|,
name|baseRevision
argument_list|)
decl_stmt|;
name|editor
operator|.
name|traverseTree
argument_list|(
name|includeCopyInfo
argument_list|,
name|handler
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
name|SVNAdminHelper
operator|.
name|closeRepository
argument_list|(
name|fsfs
argument_list|)
expr_stmt|;
block|}
block|}
comment|/**      * Passes paths of directories changed in the given revision to the provided handler.       * Paths are absolute (start with<code>'/'</code>).      *       * @param  repositoryRoot   a repository root directory path      * @param  revision         a revision number      * @param  handler          a path handler      * @throws SVNException     no repository is found at       *<code>repositoryRoot</code>      */
specifier|public
name|void
name|doGetChangedDirectories
parameter_list|(
name|File
name|repositoryRoot
parameter_list|,
name|SVNRevision
name|revision
parameter_list|,
name|ISVNChangedDirectoriesHandler
name|handler
parameter_list|)
throws|throws
name|SVNException
block|{
name|FSFS
name|fsfs
init|=
name|open
argument_list|(
name|repositoryRoot
argument_list|,
name|revision
argument_list|)
decl_stmt|;
try|try
block|{
name|long
name|revNum
init|=
name|SVNAdminHelper
operator|.
name|getRevisionNumber
argument_list|(
name|revision
argument_list|,
name|fsfs
operator|.
name|getYoungestRevision
argument_list|()
argument_list|,
name|fsfs
argument_list|)
decl_stmt|;
name|FSRoot
name|root
init|=
name|fsfs
operator|.
name|createRevisionRoot
argument_list|(
name|revNum
argument_list|)
decl_stmt|;
name|long
name|baseRevision
init|=
name|revNum
operator|-
literal|1
decl_stmt|;
name|SVNNodeEditor
name|editor
init|=
name|generateDeltaTree
argument_list|(
name|fsfs
argument_list|,
name|root
argument_list|,
name|baseRevision
argument_list|)
decl_stmt|;
name|editor
operator|.
name|traverseChangedDirs
argument_list|(
name|handler
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
name|SVNAdminHelper
operator|.
name|closeRepository
argument_list|(
name|fsfs
argument_list|)
expr_stmt|;
block|}
block|}
comment|/**      * Passes paths of directories changed in the given transaction to the provided handler.       * Paths are absolute (start with<code>'/'</code>).      *       * @param  repositoryRoot   a repository root directory path      * @param  transactionName  a transaction name      * @param  handler          a path handler      * @throws SVNException<ul>      *<li>no repository is found at       *<code>repositoryRoot</code>      *</li>      *<li>if the specified transaction is not found      *</li>      *</ul>      */
specifier|public
name|void
name|doGetChangedDirectories
parameter_list|(
name|File
name|repositoryRoot
parameter_list|,
name|String
name|transactionName
parameter_list|,
name|ISVNChangedDirectoriesHandler
name|handler
parameter_list|)
throws|throws
name|SVNException
block|{
name|FSFS
name|fsfs
init|=
name|open
argument_list|(
name|repositoryRoot
argument_list|,
name|transactionName
argument_list|)
decl_stmt|;
try|try
block|{
name|FSTransactionInfo
name|txn
init|=
name|fsfs
operator|.
name|openTxn
argument_list|(
name|transactionName
argument_list|)
decl_stmt|;
name|FSRoot
name|root
init|=
name|fsfs
operator|.
name|createTransactionRoot
argument_list|(
name|txn
argument_list|)
decl_stmt|;
name|long
name|baseRevision
init|=
name|txn
operator|.
name|getBaseRevision
argument_list|()
decl_stmt|;
if|if
condition|(
operator|!
name|SVNRevision
operator|.
name|isValidRevisionNumber
argument_list|(
name|baseRevision
argument_list|)
condition|)
block|{
name|SVNErrorMessage
name|err
init|=
name|SVNErrorMessage
operator|.
name|create
argument_list|(
name|SVNErrorCode
operator|.
name|FS_NO_SUCH_REVISION
argument_list|,
literal|"Transaction ''{0}'' is not based on a revision; how odd"
argument_list|,
name|transactionName
argument_list|)
decl_stmt|;
name|SVNErrorManager
operator|.
name|error
argument_list|(
name|err
argument_list|,
name|SVNLogType
operator|.
name|FSFS
argument_list|)
expr_stmt|;
block|}
name|SVNNodeEditor
name|editor
init|=
name|generateDeltaTree
argument_list|(
name|fsfs
argument_list|,
name|root
argument_list|,
name|baseRevision
argument_list|)
decl_stmt|;
name|editor
operator|.
name|traverseChangedDirs
argument_list|(
name|handler
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
name|SVNAdminHelper
operator|.
name|closeRepository
argument_list|(
name|fsfs
argument_list|)
expr_stmt|;
block|}
block|}
comment|/**      * Passes history information for the specified path and revision to the provided handler.      * This information is provided as {@link SVNAdminPath} objects and include the following       * pieces:       *<ul>      *<li>path (use {@link SVNAdminPath#getPath()} to retrieve it)</li>      *<li>revision (use {@link SVNAdminPath#getRevision()} to retrieve it)</li>      *<li>node id (optional, use {@link SVNAdminPath#getNodeID()} to retrieve it)</li>      *</ul>      * For history retrieval only these listed<code>get</code> methods of<b>SVNAdminPath</b> are       * relevant.       *       *<p>      *<code>path</code> must be absolute, that is it must start with<code>'/'</code>.           * If<code>path</code> is<span class="javakeyword">null</span> it defaults to       *<code>"/"</code>.      *       * @param  repositoryRoot   a repository root directory path      * @param  path             an absolute path      * @param  revision         a revision number      * @param  includeIDs       if<span class="javakeyword">true</span> a node       *                          revision id is also included for each path       * @param  limit            maximum number of history entries; if<code>&lt;=0</code>, then no limitation       *                          is applied and all history entries are reported         * @param  handler          a history handler      * @throws SVNException<ul>      *<li>no repository is found at       *<code>repositoryRoot</code>      *</li>      *<li>if<code>path</code> is not found       *</li>      *</ul>      */
specifier|public
name|void
name|doGetHistory
parameter_list|(
name|File
name|repositoryRoot
parameter_list|,
name|String
name|path
parameter_list|,
name|SVNRevision
name|revision
parameter_list|,
name|boolean
name|includeIDs
parameter_list|,
name|long
name|limit
parameter_list|,
name|ISVNHistoryHandler
name|handler
parameter_list|)
throws|throws
name|SVNException
block|{
name|FSFS
name|fsfs
init|=
name|open
argument_list|(
name|repositoryRoot
argument_list|,
name|revision
argument_list|)
decl_stmt|;
try|try
block|{
name|long
name|revNum
init|=
name|SVNAdminHelper
operator|.
name|getRevisionNumber
argument_list|(
name|revision
argument_list|,
name|fsfs
operator|.
name|getYoungestRevision
argument_list|()
argument_list|,
name|fsfs
argument_list|)
decl_stmt|;
name|path
operator|=
name|path
operator|==
literal|null
condition|?
literal|"/"
else|:
name|path
expr_stmt|;
name|getHistory
argument_list|(
name|fsfs
argument_list|,
name|path
argument_list|,
literal|0
argument_list|,
name|revNum
argument_list|,
name|limit
argument_list|,
literal|true
argument_list|,
name|includeIDs
argument_list|,
name|handler
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
name|SVNAdminHelper
operator|.
name|closeRepository
argument_list|(
name|fsfs
argument_list|)
expr_stmt|;
block|}
block|}
comment|/**      * Retrieves lock information for the specified path.      *<code>path</code> must be absolute, that is it must start with<code>'/'</code>.      *       * @param  repositoryRoot   a repository root directory path      * @param  path             an absolute path                  * @return                  an object containing details of a lock or       *<span class="javakeyword">null</span> if the       *                          path is not locked      * @throws SVNException<ul>      *<li>no repository is found at       *<code>repositoryRoot</code>      *</li>      *<li>if<code>path</code> is not found       *</li>      *</ul>      */
specifier|public
name|SVNLock
name|doGetLock
parameter_list|(
name|File
name|repositoryRoot
parameter_list|,
name|String
name|path
parameter_list|)
throws|throws
name|SVNException
block|{
if|if
condition|(
name|path
operator|==
literal|null
condition|)
block|{
name|SVNErrorMessage
name|err
init|=
name|SVNErrorMessage
operator|.
name|create
argument_list|(
name|SVNErrorCode
operator|.
name|CL_INSUFFICIENT_ARGS
argument_list|,
literal|"Missing path argument"
argument_list|)
decl_stmt|;
name|SVNErrorManager
operator|.
name|error
argument_list|(
name|err
argument_list|,
name|SVNLogType
operator|.
name|FSFS
argument_list|)
expr_stmt|;
block|}
name|FSFS
name|fsfs
init|=
name|open
argument_list|(
name|repositoryRoot
argument_list|,
name|SVNRevision
operator|.
name|HEAD
argument_list|)
decl_stmt|;
try|try
block|{
return|return
name|fsfs
operator|.
name|getLockHelper
argument_list|(
name|path
argument_list|,
literal|false
argument_list|)
return|;
block|}
finally|finally
block|{
name|SVNAdminHelper
operator|.
name|closeRepository
argument_list|(
name|fsfs
argument_list|)
expr_stmt|;
block|}
block|}
comment|/**      * Traverses repository tree starting at the specified path in the       * given revision and invoking the provided handler on each path.      * Path information is provided as {@link SVNAdminPath} objects and       * include the following pieces:       *<ul>      *<li>path (use {@link SVNAdminPath#getPath()} to retrieve it)</li>      *<li>tree depth starting from<code>0</code> at<code>path</code>       * (use {@link SVNAdminPath#getTreeDepth()} to retrieve it)</li>      *<li>node id (optional, use {@link SVNAdminPath#getNodeID()} to retrieve it)</li>      *<li>file/dir information (use {@link SVNAdminPath#isDir()} to retrieve it)</li>      *</ul>      *       * For tree retrieval only these listed<code>get</code> methods of<b>SVNAdminPath</b> are       * relevant.       *       *<p>      *<code>path</code> must be absolute, that is it must start with<code>'/'</code>.           * If<code>path</code> is<span class="javakeyword">null</span> it defaults to       *<code>"/"</code>.      *       * @param  repositoryRoot   a repository root directory path      * @param  path             an absolute path                  * @param  revision         a revision number      * @param  includeIDs       if<span class="javakeyword">true</span> a node       *                          revision id is also included for each path      * @param  recursive        whether to descend recursively or operate on a single directory only      * @param  handler          a tree handler      * @throws SVNException<ul>      *<li>no repository is found at       *<code>repositoryRoot</code>      *</li>      *<li>if<code>path</code> is not found       *</li>      *</ul>      */
specifier|public
name|void
name|doGetTree
parameter_list|(
name|File
name|repositoryRoot
parameter_list|,
name|String
name|path
parameter_list|,
name|SVNRevision
name|revision
parameter_list|,
name|boolean
name|includeIDs
parameter_list|,
name|boolean
name|recursive
parameter_list|,
name|ISVNTreeHandler
name|handler
parameter_list|)
throws|throws
name|SVNException
block|{
name|FSFS
name|fsfs
init|=
name|open
argument_list|(
name|repositoryRoot
argument_list|,
name|revision
argument_list|)
decl_stmt|;
try|try
block|{
name|long
name|revNum
init|=
name|SVNAdminHelper
operator|.
name|getRevisionNumber
argument_list|(
name|revision
argument_list|,
name|fsfs
operator|.
name|getYoungestRevision
argument_list|()
argument_list|,
name|fsfs
argument_list|)
decl_stmt|;
name|FSRoot
name|root
init|=
name|fsfs
operator|.
name|createRevisionRoot
argument_list|(
name|revNum
argument_list|)
decl_stmt|;
name|path
operator|=
name|path
operator|==
literal|null
condition|?
literal|"/"
else|:
name|path
expr_stmt|;
name|FSRevisionNode
name|node
init|=
name|root
operator|.
name|getRevisionNode
argument_list|(
name|path
argument_list|)
decl_stmt|;
name|FSID
name|id
init|=
name|includeIDs
condition|?
name|node
operator|.
name|getId
argument_list|()
else|:
literal|null
decl_stmt|;
name|SVNNodeKind
name|kind
init|=
name|root
operator|.
name|checkNodeKind
argument_list|(
name|path
argument_list|)
decl_stmt|;
name|getTree
argument_list|(
name|fsfs
argument_list|,
name|root
argument_list|,
name|path
argument_list|,
name|kind
argument_list|,
name|id
argument_list|,
name|includeIDs
argument_list|,
literal|0
argument_list|,
name|recursive
argument_list|,
name|handler
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
name|SVNAdminHelper
operator|.
name|closeRepository
argument_list|(
name|fsfs
argument_list|)
expr_stmt|;
block|}
block|}
comment|/**      * Traverses repository tree starting at the specified path in the       * given transaction and invoking the provided handler on each path.      * Path information is provided as {@link SVNAdminPath} objects and       * include the following pieces:       *<ul>      *<li>path (use {@link SVNAdminPath#getPath()} to retrieve it)</li>      *<li>tree depth starting from<code>0</code> at<code>path</code>       * (use {@link SVNAdminPath#getTreeDepth()} to retrieve it)</li>      *<li>node id (optional, use {@link SVNAdminPath#getNodeID()} to retrieve it)</li>      *<li>file/dir information (use {@link SVNAdminPath#isDir()} to retrieve it)</li>      *</ul>      *       * For tree retrieval only these listed<code>get</code> methods of<b>SVNAdminPath</b> are       * relevant.       *       *<p>      *<code>path</code> must be absolute, that is it must start with<code>'/'</code>.           * If<code>path</code> is<span class="javakeyword">null</span> it defaults to       *<code>"/"</code>.      *       * @param  repositoryRoot   a repository root directory path      * @param  path             an absolute path                  * @param  transactionName  a transaction name      * @param  includeIDs       if<span class="javakeyword">true</span> a node       *                          revision id is also included for each path      * @param  recursive        whether to descend recursively or operate on a single directory only      * @param  handler          a tree handler      * @throws SVNException<ul>      *<li>no repository is found at       *<code>repositoryRoot</code>      *</li>      *<li>if<code>path</code> is not found       *</li>      *<li>if the specified transaction is not found      *</li>      *</ul>      */
specifier|public
name|void
name|doGetTree
parameter_list|(
name|File
name|repositoryRoot
parameter_list|,
name|String
name|path
parameter_list|,
name|String
name|transactionName
parameter_list|,
name|boolean
name|includeIDs
parameter_list|,
name|boolean
name|recursive
parameter_list|,
name|ISVNTreeHandler
name|handler
parameter_list|)
throws|throws
name|SVNException
block|{
name|FSFS
name|fsfs
init|=
name|open
argument_list|(
name|repositoryRoot
argument_list|,
name|transactionName
argument_list|)
decl_stmt|;
try|try
block|{
name|FSTransactionInfo
name|txn
init|=
name|fsfs
operator|.
name|openTxn
argument_list|(
name|transactionName
argument_list|)
decl_stmt|;
name|FSRoot
name|root
init|=
name|fsfs
operator|.
name|createTransactionRoot
argument_list|(
name|txn
argument_list|)
decl_stmt|;
name|path
operator|=
name|path
operator|==
literal|null
condition|?
literal|"/"
else|:
name|path
expr_stmt|;
name|FSRevisionNode
name|node
init|=
name|root
operator|.
name|getRevisionNode
argument_list|(
name|path
argument_list|)
decl_stmt|;
name|FSID
name|id
init|=
name|includeIDs
condition|?
name|node
operator|.
name|getId
argument_list|()
else|:
literal|null
decl_stmt|;
name|SVNNodeKind
name|kind
init|=
name|root
operator|.
name|checkNodeKind
argument_list|(
name|path
argument_list|)
decl_stmt|;
name|getTree
argument_list|(
name|fsfs
argument_list|,
name|root
argument_list|,
name|path
argument_list|,
name|kind
argument_list|,
name|id
argument_list|,
name|includeIDs
argument_list|,
literal|0
argument_list|,
name|recursive
argument_list|,
name|handler
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
name|SVNAdminHelper
operator|.
name|closeRepository
argument_list|(
name|fsfs
argument_list|)
expr_stmt|;
block|}
block|}
comment|/**      * Writes differences of changed files and properties for the       * given revision to the provided output stream. If no special diff generator       * {@link #setDiffGenerator(ISVNGNUDiffGenerator) was provided} to       * this client a default GNU-style diff generator is used (which       * writes differences just like the<code>'svnlook diff'</code> command).       *       *<p>      * The provided output stream is not closed within this method.      *            * @param  repositoryRoot   a repository root directory path      * @param  revision         a revision number      * @param  diffDeleted      if<span class="javakeyword">true</span>       *                          differences for deleted files are included,       *                          otherwise not      * @param  diffAdded        if<span class="javakeyword">true</span>       *                          differences for added files are included,       *                          otherwise not      * @param  diffCopyFrom     if<span class="javakeyword">true</span>       *                          writes differences against the copy source       *                          (if any), otherwise not           * @param  os               an output stream to write differences to      * @throws SVNException     no repository is found at       *<code>repositoryRoot</code>      */
specifier|public
name|void
name|doGetDiff
parameter_list|(
name|File
name|repositoryRoot
parameter_list|,
name|SVNRevision
name|revision
parameter_list|,
name|boolean
name|diffDeleted
parameter_list|,
name|boolean
name|diffAdded
parameter_list|,
name|boolean
name|diffCopyFrom
parameter_list|,
name|OutputStream
name|os
parameter_list|)
throws|throws
name|SVNException
block|{
name|FSFS
name|fsfs
init|=
name|open
argument_list|(
name|repositoryRoot
argument_list|,
name|revision
argument_list|)
decl_stmt|;
try|try
block|{
name|long
name|revNum
init|=
name|SVNAdminHelper
operator|.
name|getRevisionNumber
argument_list|(
name|revision
argument_list|,
name|fsfs
operator|.
name|getYoungestRevision
argument_list|()
argument_list|,
name|fsfs
argument_list|)
decl_stmt|;
name|FSRoot
name|root
init|=
name|fsfs
operator|.
name|createRevisionRoot
argument_list|(
name|revNum
argument_list|)
decl_stmt|;
name|long
name|baseRevision
init|=
name|revNum
operator|-
literal|1
decl_stmt|;
if|if
condition|(
operator|!
name|SVNRevision
operator|.
name|isValidRevisionNumber
argument_list|(
name|baseRevision
argument_list|)
condition|)
block|{
name|SVNErrorMessage
name|err
init|=
name|SVNErrorMessage
operator|.
name|create
argument_list|(
name|SVNErrorCode
operator|.
name|FS_NO_SUCH_REVISION
argument_list|,
literal|"Invalid base revision {0}"
argument_list|,
operator|new
name|Long
argument_list|(
name|baseRevision
argument_list|)
argument_list|)
decl_stmt|;
name|SVNErrorManager
operator|.
name|error
argument_list|(
name|err
argument_list|,
name|SVNLogType
operator|.
name|FSFS
argument_list|)
expr_stmt|;
block|}
name|SVNNodeEditor
name|editor
init|=
name|generateDeltaTree
argument_list|(
name|fsfs
argument_list|,
name|root
argument_list|,
name|baseRevision
argument_list|)
decl_stmt|;
name|ISVNGNUDiffGenerator
name|generator
init|=
name|getDiffGenerator
argument_list|()
decl_stmt|;
name|generator
operator|.
name|setDiffAdded
argument_list|(
name|diffAdded
argument_list|)
expr_stmt|;
name|generator
operator|.
name|setDiffCopied
argument_list|(
name|diffCopyFrom
argument_list|)
expr_stmt|;
name|generator
operator|.
name|setDiffDeleted
argument_list|(
name|diffDeleted
argument_list|)
expr_stmt|;
name|editor
operator|.
name|diff
argument_list|(
name|root
argument_list|,
name|baseRevision
argument_list|,
name|generator
argument_list|,
name|os
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
name|SVNAdminHelper
operator|.
name|closeRepository
argument_list|(
name|fsfs
argument_list|)
expr_stmt|;
block|}
block|}
comment|/**      * Writes differences of changed files and properties for the       * given transaction to the provided output stream. If no special diff generator       * {@link #setDiffGenerator(ISVNGNUDiffGenerator) was provided} to       * this client a default GNU-style diff generator is used (which       * writes differences just like the<code>'svnlook diff'</code> command).       *       * @param  repositoryRoot   a repository root directory path      * @param  transactionName  a transaction name      * @param  diffDeleted      if<span class="javakeyword">true</span>       *                          differences for deleted files are included,       *                          otherwise not      * @param  diffAdded        if<span class="javakeyword">true</span>       *                          differences for added files are included,       *                          otherwise not      * @param  diffCopyFrom     if<span class="javakeyword">true</span>       *                          writes differences against the copy source       *                          (if any), otherwise not           * @param  os               an output stream to write differences to      * @throws SVNException<ul>      *<li>no repository is found at       *<code>repositoryRoot</code>      *</li>      *<li>if the specified transaction is not found      *</li>      *</ul>      */
specifier|public
name|void
name|doGetDiff
parameter_list|(
name|File
name|repositoryRoot
parameter_list|,
name|String
name|transactionName
parameter_list|,
name|boolean
name|diffDeleted
parameter_list|,
name|boolean
name|diffAdded
parameter_list|,
name|boolean
name|diffCopyFrom
parameter_list|,
name|OutputStream
name|os
parameter_list|)
throws|throws
name|SVNException
block|{
name|FSFS
name|fsfs
init|=
name|open
argument_list|(
name|repositoryRoot
argument_list|,
name|transactionName
argument_list|)
decl_stmt|;
try|try
block|{
name|FSTransactionInfo
name|txn
init|=
name|fsfs
operator|.
name|openTxn
argument_list|(
name|transactionName
argument_list|)
decl_stmt|;
name|FSRoot
name|root
init|=
name|fsfs
operator|.
name|createTransactionRoot
argument_list|(
name|txn
argument_list|)
decl_stmt|;
name|long
name|baseRevision
init|=
name|txn
operator|.
name|getBaseRevision
argument_list|()
decl_stmt|;
if|if
condition|(
operator|!
name|SVNRevision
operator|.
name|isValidRevisionNumber
argument_list|(
name|baseRevision
argument_list|)
condition|)
block|{
name|SVNErrorMessage
name|err
init|=
name|SVNErrorMessage
operator|.
name|create
argument_list|(
name|SVNErrorCode
operator|.
name|FS_NO_SUCH_REVISION
argument_list|,
literal|"Transaction ''{0}'' is not based on a revision; how odd"
argument_list|,
name|transactionName
argument_list|)
decl_stmt|;
name|SVNErrorManager
operator|.
name|error
argument_list|(
name|err
argument_list|,
name|SVNLogType
operator|.
name|FSFS
argument_list|)
expr_stmt|;
block|}
name|SVNNodeEditor
name|editor
init|=
name|generateDeltaTree
argument_list|(
name|fsfs
argument_list|,
name|root
argument_list|,
name|baseRevision
argument_list|)
decl_stmt|;
name|ISVNGNUDiffGenerator
name|generator
init|=
name|getDiffGenerator
argument_list|()
decl_stmt|;
name|generator
operator|.
name|setDiffAdded
argument_list|(
name|diffAdded
argument_list|)
expr_stmt|;
name|generator
operator|.
name|setDiffCopied
argument_list|(
name|diffCopyFrom
argument_list|)
expr_stmt|;
name|generator
operator|.
name|setDiffDeleted
argument_list|(
name|diffDeleted
argument_list|)
expr_stmt|;
name|editor
operator|.
name|diff
argument_list|(
name|root
argument_list|,
name|baseRevision
argument_list|,
name|generator
argument_list|,
name|os
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
name|SVNAdminHelper
operator|.
name|closeRepository
argument_list|(
name|fsfs
argument_list|)
expr_stmt|;
block|}
block|}
comment|/**      * Returns the value of a versioned property for the specified path in the       * given revision.       *       *<p>      *<code>path</code> must be absolute, that is it must start with<code>'/'</code>.           *       * @param  repositoryRoot   a repository root directory path      * @param  propName         a property name      * @param  path             an absolute path                * @param  revision         a revision number      * @return                  the value of a property      * @throws SVNException<ul>      *<li>no repository is found at       *<code>repositoryRoot</code>      *</li>      *<li>if<code>path</code> is not found       *</li>      *</ul>      */
specifier|public
name|SVNPropertyValue
name|doGetProperty
parameter_list|(
name|File
name|repositoryRoot
parameter_list|,
name|String
name|propName
parameter_list|,
name|String
name|path
parameter_list|,
name|SVNRevision
name|revision
parameter_list|)
throws|throws
name|SVNException
block|{
name|SVNProperties
name|props
init|=
name|getProperties
argument_list|(
name|repositoryRoot
argument_list|,
name|propName
argument_list|,
name|path
argument_list|,
name|revision
argument_list|,
literal|null
argument_list|,
literal|true
argument_list|,
literal|false
argument_list|)
decl_stmt|;
return|return
name|props
operator|.
name|getSVNPropertyValue
argument_list|(
name|propName
argument_list|)
return|;
block|}
comment|/**      * Returns versioned properties for the specified path in the       * given revision.       *       *<p>      *<code>path</code> must be absolute, that is it must start with<code>'/'</code>.           *       * @param  repositoryRoot   a repository root directory path      * @param  path             an absolute path                * @param  revision         a revision number      * @return                  name (String) to value (String) mappings       * @throws SVNException<ul>      *<li>no repository is found at       *<code>repositoryRoot</code>      *</li>      *<li>if<code>path</code> is not found       *</li>      *</ul>      */
specifier|public
name|SVNProperties
name|doGetProperties
parameter_list|(
name|File
name|repositoryRoot
parameter_list|,
name|String
name|path
parameter_list|,
name|SVNRevision
name|revision
parameter_list|)
throws|throws
name|SVNException
block|{
return|return
name|getProperties
argument_list|(
name|repositoryRoot
argument_list|,
literal|null
argument_list|,
name|path
argument_list|,
name|revision
argument_list|,
literal|null
argument_list|,
literal|false
argument_list|,
literal|false
argument_list|)
return|;
block|}
comment|/**      * Returns the value of a versioned property for the specified path in the       * given transaction.       *       *<p>      *<code>path</code> must be absolute, that is it must start with<code>'/'</code>.           *       * @param  repositoryRoot   a repository root directory path      * @param  propName         a property name      * @param  path             an absolute path                * @param  transactionName  a transaction name      * @return                  the value of a property      * @throws SVNException<ul>      *<li>no repository is found at       *<code>repositoryRoot</code>      *</li>      *<li>if<code>path</code> is not found       *</li>      *<li>if the specified transaction is not found      *</li>      *</ul>      */
specifier|public
name|SVNPropertyValue
name|doGetProperty
parameter_list|(
name|File
name|repositoryRoot
parameter_list|,
name|String
name|propName
parameter_list|,
name|String
name|path
parameter_list|,
name|String
name|transactionName
parameter_list|)
throws|throws
name|SVNException
block|{
name|SVNProperties
name|props
init|=
name|getProperties
argument_list|(
name|repositoryRoot
argument_list|,
name|propName
argument_list|,
name|path
argument_list|,
literal|null
argument_list|,
name|transactionName
argument_list|,
literal|true
argument_list|,
literal|false
argument_list|)
decl_stmt|;
return|return
name|props
operator|.
name|getSVNPropertyValue
argument_list|(
name|propName
argument_list|)
return|;
block|}
comment|/**      * Returns versioned properties for the specified path in the       * given transaction.       *       *<p>      *<code>path</code> must be absolute, that is it must start with<code>'/'</code>.           *       * @param  repositoryRoot   a repository root directory path      * @param  path             an absolute path                * @param  transactionName  a transaction name      * @return                  name (String) to value (String) mappings       * @throws SVNException<ul>      *<li>no repository is found at       *<code>repositoryRoot</code>      *</li>      *<li>if<code>path</code> is not found       *</li>      *<li>if the specified transaction is not found      *</li>      *</ul>      */
specifier|public
name|SVNProperties
name|doGetProperties
parameter_list|(
name|File
name|repositoryRoot
parameter_list|,
name|String
name|path
parameter_list|,
name|String
name|transactionName
parameter_list|)
throws|throws
name|SVNException
block|{
return|return
name|getProperties
argument_list|(
name|repositoryRoot
argument_list|,
literal|null
argument_list|,
name|path
argument_list|,
literal|null
argument_list|,
name|transactionName
argument_list|,
literal|false
argument_list|,
literal|false
argument_list|)
return|;
block|}
comment|/**      * Returns the value of a revision property in the given revision.       *       * @param  repositoryRoot   a repository root directory path      * @param  propName         a property name      * @param  revision         a revision number      * @return                  the value of a revision property      * @throws SVNException     no repository is found at       *<code>repositoryRoot</code>      */
specifier|public
name|SVNPropertyValue
name|doGetRevisionProperty
parameter_list|(
name|File
name|repositoryRoot
parameter_list|,
name|String
name|propName
parameter_list|,
name|SVNRevision
name|revision
parameter_list|)
throws|throws
name|SVNException
block|{
name|SVNProperties
name|revProps
init|=
name|getProperties
argument_list|(
name|repositoryRoot
argument_list|,
name|propName
argument_list|,
literal|null
argument_list|,
name|revision
argument_list|,
literal|null
argument_list|,
literal|true
argument_list|,
literal|true
argument_list|)
decl_stmt|;
return|return
name|revProps
operator|.
name|getSVNPropertyValue
argument_list|(
name|propName
argument_list|)
return|;
block|}
comment|/**      * Returns revision properties in the given revision.       *       * @param  repositoryRoot   a repository root directory path      * @param  revision         a revision number      * @return                  name (String) to value (String) mappings       * @throws SVNException     no repository is found at       *<code>repositoryRoot</code>      */
specifier|public
name|SVNProperties
name|doGetRevisionProperties
parameter_list|(
name|File
name|repositoryRoot
parameter_list|,
name|SVNRevision
name|revision
parameter_list|)
throws|throws
name|SVNException
block|{
return|return
name|getProperties
argument_list|(
name|repositoryRoot
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|,
name|revision
argument_list|,
literal|null
argument_list|,
literal|false
argument_list|,
literal|true
argument_list|)
return|;
block|}
comment|/**      * Returns the value of a revision property for the given transaction.       *       * @param  repositoryRoot   a repository root directory path      * @param  propName         a property name      * @param  transactionName  a transaction name      * @return                  the value of a revision property      * @throws SVNException<ul>      *<li>no repository is found at       *<code>repositoryRoot</code>      *</li>      *<li>if the specified transaction is not found      *</li>      *</ul>      */
specifier|public
name|SVNPropertyValue
name|doGetRevisionProperty
parameter_list|(
name|File
name|repositoryRoot
parameter_list|,
name|String
name|propName
parameter_list|,
name|String
name|transactionName
parameter_list|)
throws|throws
name|SVNException
block|{
name|SVNProperties
name|revProps
init|=
name|getProperties
argument_list|(
name|repositoryRoot
argument_list|,
name|propName
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|,
name|transactionName
argument_list|,
literal|true
argument_list|,
literal|true
argument_list|)
decl_stmt|;
return|return
name|revProps
operator|.
name|getSVNPropertyValue
argument_list|(
name|propName
argument_list|)
return|;
block|}
comment|/**      * Returns revision properties for the given transaction.       *       * @param  repositoryRoot   a repository root directory path      * @param  transactionName  a transaction name      * @return                  name (String) to value (String) mappings       * @throws SVNException<ul>      *<li>no repository is found at       *<code>repositoryRoot</code>      *</li>      *<li>if the specified transaction is not found      *</li>      *</ul>      */
specifier|public
name|SVNProperties
name|doGetRevisionProperties
parameter_list|(
name|File
name|repositoryRoot
parameter_list|,
name|String
name|transactionName
parameter_list|)
throws|throws
name|SVNException
block|{
return|return
name|getProperties
argument_list|(
name|repositoryRoot
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|,
name|transactionName
argument_list|,
literal|false
argument_list|,
literal|true
argument_list|)
return|;
block|}
comment|/**      * Sets a diff generator to be used in<code>doGetDiff()</code> methods of this class.      *       * @param diffGenerator      * @see   #getDiffGenerator()      */
specifier|public
name|void
name|setDiffGenerator
parameter_list|(
name|ISVNGNUDiffGenerator
name|diffGenerator
parameter_list|)
block|{
name|myDiffGenerator
operator|=
name|diffGenerator
expr_stmt|;
block|}
comment|/**      * Returns a diff generator to be used in<code>doGetDiff()</code> methods of this class.       * If no generator was provided by a caller,<b>SVNLookClient</b> uses a default one       * that prints differences in a GNU-style.      *       * @return  a diff generator      * @see     #setDiffGenerator(ISVNGNUDiffGenerator)      */
specifier|public
name|ISVNGNUDiffGenerator
name|getDiffGenerator
parameter_list|()
block|{
if|if
condition|(
name|myDiffGenerator
operator|==
literal|null
condition|)
block|{
name|DefaultSVNGNUDiffGenerator
name|defaultDiffGenerator
init|=
operator|new
name|DefaultSVNGNUDiffGenerator
argument_list|()
decl_stmt|;
name|defaultDiffGenerator
operator|.
name|setOptions
argument_list|(
name|getOptions
argument_list|()
argument_list|)
expr_stmt|;
name|myDiffGenerator
operator|=
name|defaultDiffGenerator
expr_stmt|;
block|}
return|return
name|myDiffGenerator
return|;
block|}
specifier|private
name|void
name|getTree
parameter_list|(
name|FSFS
name|fsfs
parameter_list|,
name|FSRoot
name|root
parameter_list|,
name|String
name|path
parameter_list|,
name|SVNNodeKind
name|kind
parameter_list|,
name|FSID
name|id
parameter_list|,
name|boolean
name|includeIDs
parameter_list|,
name|int
name|depth
parameter_list|,
name|boolean
name|recursive
parameter_list|,
name|ISVNTreeHandler
name|handler
parameter_list|)
throws|throws
name|SVNException
block|{
name|checkCancelled
argument_list|()
expr_stmt|;
if|if
condition|(
name|handler
operator|!=
literal|null
condition|)
block|{
name|handler
operator|.
name|handlePath
argument_list|(
operator|new
name|SVNAdminPath
argument_list|(
name|path
argument_list|,
name|includeIDs
condition|?
name|id
operator|.
name|toString
argument_list|()
else|:
literal|null
argument_list|,
name|depth
argument_list|,
name|kind
operator|==
name|SVNNodeKind
operator|.
name|DIR
argument_list|)
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|kind
operator|!=
name|SVNNodeKind
operator|.
name|DIR
condition|)
block|{
return|return;
block|}
if|if
condition|(
name|recursive
operator|||
name|depth
operator|==
literal|0
condition|)
block|{
name|FSRevisionNode
name|node
init|=
name|root
operator|.
name|getRevisionNode
argument_list|(
name|path
argument_list|)
decl_stmt|;
name|Map
name|entries
init|=
name|node
operator|.
name|getDirEntries
argument_list|(
name|fsfs
argument_list|)
decl_stmt|;
for|for
control|(
name|Iterator
name|names
init|=
name|entries
operator|.
name|keySet
argument_list|()
operator|.
name|iterator
argument_list|()
init|;
name|names
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|String
name|name
init|=
operator|(
name|String
operator|)
name|names
operator|.
name|next
argument_list|()
decl_stmt|;
name|FSEntry
name|entry
init|=
operator|(
name|FSEntry
operator|)
name|entries
operator|.
name|get
argument_list|(
name|name
argument_list|)
decl_stmt|;
name|getTree
argument_list|(
name|fsfs
argument_list|,
name|root
argument_list|,
name|SVNPathUtil
operator|.
name|getAbsolutePath
argument_list|(
name|SVNPathUtil
operator|.
name|append
argument_list|(
name|path
argument_list|,
name|entry
operator|.
name|getName
argument_list|()
argument_list|)
argument_list|)
argument_list|,
name|entry
operator|.
name|getType
argument_list|()
argument_list|,
name|includeIDs
condition|?
name|entry
operator|.
name|getId
argument_list|()
else|:
literal|null
argument_list|,
name|includeIDs
argument_list|,
name|depth
operator|+
literal|1
argument_list|,
name|recursive
argument_list|,
name|handler
argument_list|)
expr_stmt|;
block|}
block|}
block|}
specifier|private
name|SVNProperties
name|getProperties
parameter_list|(
name|File
name|repositoryRoot
parameter_list|,
name|String
name|propName
parameter_list|,
name|String
name|path
parameter_list|,
name|SVNRevision
name|revision
parameter_list|,
name|String
name|txnName
parameter_list|,
name|boolean
name|singleProp
parameter_list|,
name|boolean
name|revProps
parameter_list|)
throws|throws
name|SVNException
block|{
if|if
condition|(
name|propName
operator|==
literal|null
operator|&&
name|singleProp
condition|)
block|{
name|SVNErrorMessage
name|err
init|=
name|SVNErrorMessage
operator|.
name|create
argument_list|(
name|SVNErrorCode
operator|.
name|CL_INSUFFICIENT_ARGS
argument_list|,
literal|"Missing propname argument"
argument_list|)
decl_stmt|;
name|SVNErrorManager
operator|.
name|error
argument_list|(
name|err
argument_list|,
name|SVNLogType
operator|.
name|FSFS
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|path
operator|==
literal|null
operator|&&
operator|!
name|revProps
condition|)
block|{
name|SVNErrorMessage
name|err
init|=
name|SVNErrorMessage
operator|.
name|create
argument_list|(
name|SVNErrorCode
operator|.
name|CL_INSUFFICIENT_ARGS
argument_list|,
literal|"Missing repository path argument"
argument_list|)
decl_stmt|;
name|SVNErrorManager
operator|.
name|error
argument_list|(
name|err
argument_list|,
name|SVNLogType
operator|.
name|FSFS
argument_list|)
expr_stmt|;
block|}
name|FSFS
name|fsfs
init|=
name|txnName
operator|==
literal|null
condition|?
name|open
argument_list|(
name|repositoryRoot
argument_list|,
name|revision
argument_list|)
else|:
name|open
argument_list|(
name|repositoryRoot
argument_list|,
name|txnName
argument_list|)
decl_stmt|;
try|try
block|{
name|FSRoot
name|root
init|=
literal|null
decl_stmt|;
if|if
condition|(
name|txnName
operator|==
literal|null
condition|)
block|{
name|long
name|revNum
init|=
name|SVNAdminHelper
operator|.
name|getRevisionNumber
argument_list|(
name|revision
argument_list|,
name|fsfs
operator|.
name|getYoungestRevision
argument_list|()
argument_list|,
name|fsfs
argument_list|)
decl_stmt|;
if|if
condition|(
name|revProps
condition|)
block|{
return|return
name|fsfs
operator|.
name|getRevisionProperties
argument_list|(
name|revNum
argument_list|)
return|;
block|}
name|root
operator|=
name|fsfs
operator|.
name|createRevisionRoot
argument_list|(
name|revNum
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|FSTransactionInfo
name|txn
init|=
name|fsfs
operator|.
name|openTxn
argument_list|(
name|txnName
argument_list|)
decl_stmt|;
if|if
condition|(
name|revProps
condition|)
block|{
return|return
name|fsfs
operator|.
name|getTransactionProperties
argument_list|(
name|txn
operator|.
name|getTxnId
argument_list|()
argument_list|)
return|;
block|}
name|root
operator|=
name|fsfs
operator|.
name|createTransactionRoot
argument_list|(
name|txn
argument_list|)
expr_stmt|;
block|}
name|verifyPath
argument_list|(
name|root
argument_list|,
name|path
argument_list|)
expr_stmt|;
name|FSRevisionNode
name|node
init|=
name|root
operator|.
name|getRevisionNode
argument_list|(
name|path
argument_list|)
decl_stmt|;
return|return
name|node
operator|.
name|getProperties
argument_list|(
name|fsfs
argument_list|)
return|;
block|}
finally|finally
block|{
name|SVNAdminHelper
operator|.
name|closeRepository
argument_list|(
name|fsfs
argument_list|)
expr_stmt|;
block|}
block|}
specifier|private
name|void
name|getHistory
parameter_list|(
name|FSFS
name|fsfs
parameter_list|,
name|String
name|path
parameter_list|,
name|long
name|start
parameter_list|,
name|long
name|end
parameter_list|,
name|long
name|limit
parameter_list|,
name|boolean
name|crossCopies
parameter_list|,
name|boolean
name|includeIDs
parameter_list|,
name|ISVNHistoryHandler
name|handler
parameter_list|)
throws|throws
name|SVNException
block|{
if|if
condition|(
operator|!
name|SVNRevision
operator|.
name|isValidRevisionNumber
argument_list|(
name|start
argument_list|)
condition|)
block|{
name|SVNErrorMessage
name|err
init|=
name|SVNErrorMessage
operator|.
name|create
argument_list|(
name|SVNErrorCode
operator|.
name|FS_NO_SUCH_REVISION
argument_list|,
literal|"Invalid start revision {0}"
argument_list|,
name|String
operator|.
name|valueOf
argument_list|(
name|start
argument_list|)
argument_list|)
decl_stmt|;
name|SVNErrorManager
operator|.
name|error
argument_list|(
name|err
argument_list|,
name|SVNLogType
operator|.
name|FSFS
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
operator|!
name|SVNRevision
operator|.
name|isValidRevisionNumber
argument_list|(
name|end
argument_list|)
condition|)
block|{
name|SVNErrorMessage
name|err
init|=
name|SVNErrorMessage
operator|.
name|create
argument_list|(
name|SVNErrorCode
operator|.
name|FS_NO_SUCH_REVISION
argument_list|,
literal|"Invalid end revision {0}"
argument_list|,
name|String
operator|.
name|valueOf
argument_list|(
name|end
argument_list|)
argument_list|)
decl_stmt|;
name|SVNErrorManager
operator|.
name|error
argument_list|(
name|err
argument_list|,
name|SVNLogType
operator|.
name|FSFS
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|start
operator|>
name|end
condition|)
block|{
name|long
name|tmpRev
init|=
name|start
decl_stmt|;
name|start
operator|=
name|end
expr_stmt|;
name|end
operator|=
name|tmpRev
expr_stmt|;
block|}
name|FSRevisionRoot
name|root
init|=
name|fsfs
operator|.
name|createRevisionRoot
argument_list|(
name|end
argument_list|)
decl_stmt|;
name|FSNodeHistory
name|history
init|=
name|root
operator|.
name|getNodeHistory
argument_list|(
name|path
argument_list|)
decl_stmt|;
name|long
name|count
init|=
literal|0
decl_stmt|;
do|do
block|{
name|history
operator|=
name|history
operator|.
name|getPreviousHistory
argument_list|(
name|crossCopies
argument_list|)
expr_stmt|;
if|if
condition|(
name|history
operator|==
literal|null
condition|)
block|{
break|break;
block|}
name|long
name|revision
init|=
name|history
operator|.
name|getHistoryEntry
argument_list|()
operator|.
name|getRevision
argument_list|()
decl_stmt|;
if|if
condition|(
name|revision
operator|<
name|start
condition|)
block|{
break|break;
block|}
name|String
name|id
init|=
literal|null
decl_stmt|;
if|if
condition|(
name|includeIDs
condition|)
block|{
name|FSRevisionRoot
name|revRoot
init|=
name|fsfs
operator|.
name|createRevisionRoot
argument_list|(
name|revision
argument_list|)
decl_stmt|;
name|FSRevisionNode
name|node
init|=
name|revRoot
operator|.
name|getRevisionNode
argument_list|(
name|history
operator|.
name|getHistoryEntry
argument_list|()
operator|.
name|getPath
argument_list|()
argument_list|)
decl_stmt|;
name|id
operator|=
name|node
operator|.
name|getId
argument_list|()
operator|.
name|toString
argument_list|()
expr_stmt|;
block|}
if|if
condition|(
name|handler
operator|!=
literal|null
condition|)
block|{
try|try
block|{
name|handler
operator|.
name|handlePath
argument_list|(
operator|new
name|SVNAdminPath
argument_list|(
name|history
operator|.
name|getHistoryEntry
argument_list|()
operator|.
name|getPath
argument_list|()
argument_list|,
name|id
argument_list|,
name|revision
argument_list|)
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|SVNException
name|svne
parameter_list|)
block|{
if|if
condition|(
name|svne
operator|.
name|getErrorMessage
argument_list|()
operator|.
name|getErrorCode
argument_list|()
operator|==
name|SVNErrorCode
operator|.
name|CEASE_INVOCATION
condition|)
block|{
break|break;
block|}
throw|throw
name|svne
throw|;
block|}
block|}
if|if
condition|(
name|limit
operator|>
literal|0
condition|)
block|{
name|count
operator|++
expr_stmt|;
if|if
condition|(
name|count
operator|>=
name|limit
condition|)
block|{
break|break;
block|}
block|}
block|}
do|while
condition|(
name|history
operator|!=
literal|null
condition|)
do|;
block|}
specifier|private
name|SVNNodeEditor
name|generateDeltaTree
parameter_list|(
name|FSFS
name|fsfs
parameter_list|,
name|FSRoot
name|root
parameter_list|,
name|long
name|baseRevision
parameter_list|)
throws|throws
name|SVNException
block|{
name|FSRevisionRoot
name|baseRoot
init|=
name|fsfs
operator|.
name|createRevisionRoot
argument_list|(
name|baseRevision
argument_list|)
decl_stmt|;
name|SVNNodeEditor
name|editor
init|=
operator|new
name|SVNNodeEditor
argument_list|(
name|fsfs
argument_list|,
name|baseRoot
argument_list|,
name|this
argument_list|)
decl_stmt|;
name|FSRepositoryUtil
operator|.
name|replay
argument_list|(
name|fsfs
argument_list|,
name|root
argument_list|,
literal|""
argument_list|,
operator|-
literal|1
argument_list|,
literal|false
argument_list|,
name|editor
argument_list|)
expr_stmt|;
return|return
name|editor
return|;
block|}
specifier|private
name|void
name|catFile
parameter_list|(
name|FSRoot
name|root
parameter_list|,
name|String
name|path
parameter_list|,
name|OutputStream
name|out
parameter_list|)
throws|throws
name|SVNException
block|{
name|SVNNodeKind
name|kind
init|=
name|verifyPath
argument_list|(
name|root
argument_list|,
name|path
argument_list|)
decl_stmt|;
if|if
condition|(
name|kind
operator|!=
name|SVNNodeKind
operator|.
name|FILE
condition|)
block|{
name|SVNErrorMessage
name|err
init|=
name|SVNErrorMessage
operator|.
name|create
argument_list|(
name|SVNErrorCode
operator|.
name|FS_NOT_FILE
argument_list|,
literal|"Path ''{0}'' is not a file"
argument_list|,
name|path
argument_list|)
decl_stmt|;
name|SVNErrorManager
operator|.
name|error
argument_list|(
name|err
argument_list|,
name|SVNLogType
operator|.
name|FSFS
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|out
operator|!=
literal|null
condition|)
block|{
name|InputStream
name|contents
init|=
literal|null
decl_stmt|;
try|try
block|{
name|contents
operator|=
name|root
operator|.
name|getFileStreamForPath
argument_list|(
operator|new
name|SVNDeltaCombiner
argument_list|()
argument_list|,
name|path
argument_list|)
expr_stmt|;
name|byte
index|[]
name|buffer
init|=
operator|new
name|byte
index|[
name|SVNFileUtil
operator|.
name|STREAM_CHUNK_SIZE
index|]
decl_stmt|;
name|int
name|len
init|=
literal|0
decl_stmt|;
do|do
block|{
name|checkCancelled
argument_list|()
expr_stmt|;
name|len
operator|=
name|SVNFileUtil
operator|.
name|readIntoBuffer
argument_list|(
name|contents
argument_list|,
name|buffer
argument_list|,
literal|0
argument_list|,
name|buffer
operator|.
name|length
argument_list|)
expr_stmt|;
if|if
condition|(
name|len
operator|>
literal|0
condition|)
block|{
name|out
operator|.
name|write
argument_list|(
name|buffer
argument_list|,
literal|0
argument_list|,
name|len
argument_list|)
expr_stmt|;
block|}
block|}
do|while
condition|(
name|len
operator|==
name|SVNFileUtil
operator|.
name|STREAM_CHUNK_SIZE
condition|)
do|;
block|}
catch|catch
parameter_list|(
name|IOException
name|ioe
parameter_list|)
block|{
name|SVNErrorMessage
name|err
init|=
name|SVNErrorMessage
operator|.
name|create
argument_list|(
name|SVNErrorCode
operator|.
name|IO_ERROR
argument_list|,
name|ioe
operator|.
name|getLocalizedMessage
argument_list|()
argument_list|)
decl_stmt|;
name|SVNErrorManager
operator|.
name|error
argument_list|(
name|err
argument_list|,
name|ioe
argument_list|,
name|SVNLogType
operator|.
name|FSFS
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
name|SVNFileUtil
operator|.
name|closeFile
argument_list|(
name|contents
argument_list|)
expr_stmt|;
block|}
block|}
block|}
specifier|private
name|SVNNodeKind
name|verifyPath
parameter_list|(
name|FSRoot
name|root
parameter_list|,
name|String
name|path
parameter_list|)
throws|throws
name|SVNException
block|{
name|SVNNodeKind
name|kind
init|=
name|root
operator|.
name|checkNodeKind
argument_list|(
name|path
argument_list|)
decl_stmt|;
if|if
condition|(
name|kind
operator|==
name|SVNNodeKind
operator|.
name|NONE
condition|)
block|{
if|if
condition|(
name|SVNPathUtil
operator|.
name|isURL
argument_list|(
name|path
argument_list|)
condition|)
block|{
name|SVNErrorMessage
name|err
init|=
name|SVNErrorMessage
operator|.
name|create
argument_list|(
name|SVNErrorCode
operator|.
name|FS_NOT_FOUND
argument_list|,
literal|"''{0}'' is a URL, probably should be a path"
argument_list|,
name|path
argument_list|)
decl_stmt|;
name|SVNErrorManager
operator|.
name|error
argument_list|(
name|err
argument_list|,
name|SVNLogType
operator|.
name|FSFS
argument_list|)
expr_stmt|;
block|}
name|SVNErrorMessage
name|err
init|=
name|SVNErrorMessage
operator|.
name|create
argument_list|(
name|SVNErrorCode
operator|.
name|FS_NOT_FOUND
argument_list|,
literal|"Path ''{0}'' does not exist"
argument_list|,
name|path
argument_list|)
decl_stmt|;
name|SVNErrorManager
operator|.
name|error
argument_list|(
name|err
argument_list|,
name|SVNLogType
operator|.
name|FSFS
argument_list|)
expr_stmt|;
block|}
return|return
name|kind
return|;
block|}
specifier|private
name|FSFS
name|open
parameter_list|(
name|File
name|repositoryRoot
parameter_list|,
name|SVNRevision
name|revision
parameter_list|)
throws|throws
name|SVNException
block|{
if|if
condition|(
name|revision
operator|==
literal|null
operator|||
operator|!
name|revision
operator|.
name|isValid
argument_list|()
condition|)
block|{
name|SVNErrorMessage
name|err
init|=
name|SVNErrorMessage
operator|.
name|create
argument_list|(
name|SVNErrorCode
operator|.
name|CL_ARG_PARSING_ERROR
argument_list|,
literal|"Invalid revision number supplied"
argument_list|)
decl_stmt|;
name|SVNErrorManager
operator|.
name|error
argument_list|(
name|err
argument_list|,
name|SVNLogType
operator|.
name|FSFS
argument_list|)
expr_stmt|;
block|}
return|return
name|SVNAdminHelper
operator|.
name|openRepository
argument_list|(
name|repositoryRoot
argument_list|,
literal|true
argument_list|)
return|;
block|}
specifier|private
name|FSFS
name|open
parameter_list|(
name|File
name|repositoryRoot
parameter_list|,
name|String
name|transactionName
parameter_list|)
throws|throws
name|SVNException
block|{
if|if
condition|(
name|transactionName
operator|==
literal|null
condition|)
block|{
name|SVNErrorMessage
name|err
init|=
name|SVNErrorMessage
operator|.
name|create
argument_list|(
name|SVNErrorCode
operator|.
name|CL_INSUFFICIENT_ARGS
argument_list|,
literal|"Missing transaction name"
argument_list|)
decl_stmt|;
name|SVNErrorManager
operator|.
name|error
argument_list|(
name|err
argument_list|,
name|SVNLogType
operator|.
name|FSFS
argument_list|)
expr_stmt|;
block|}
return|return
name|SVNAdminHelper
operator|.
name|openRepository
argument_list|(
name|repositoryRoot
argument_list|,
literal|true
argument_list|)
return|;
block|}
block|}
end_class

end_unit

