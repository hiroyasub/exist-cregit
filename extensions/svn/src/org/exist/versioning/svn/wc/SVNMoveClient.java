begin_unit|revision:1.0.0;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * ====================================================================  * Copyright (c) 2004-2010 TMate Software Ltd.  All rights reserved.  *  * This software is licensed as described in the file COPYING, which  * you should have received as part of this distribution.  The terms  * are also available at http://svnkit.com/license.html  * If newer versions of this license are posted there, you may use a  * newer version instead, at your option.  * ====================================================================  */
end_comment

begin_package
package|package
name|org
operator|.
name|exist
operator|.
name|versioning
operator|.
name|svn
operator|.
name|wc
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|File
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Iterator
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|versioning
operator|.
name|svn
operator|.
name|internal
operator|.
name|wc
operator|.
name|SVNCopyDriver
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|versioning
operator|.
name|svn
operator|.
name|internal
operator|.
name|wc
operator|.
name|SVNErrorManager
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|versioning
operator|.
name|svn
operator|.
name|internal
operator|.
name|wc
operator|.
name|SVNEventFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|versioning
operator|.
name|svn
operator|.
name|internal
operator|.
name|wc
operator|.
name|SVNFileType
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|versioning
operator|.
name|svn
operator|.
name|internal
operator|.
name|wc
operator|.
name|SVNFileUtil
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|versioning
operator|.
name|svn
operator|.
name|internal
operator|.
name|wc
operator|.
name|admin
operator|.
name|SVNAdminArea
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|versioning
operator|.
name|svn
operator|.
name|internal
operator|.
name|wc
operator|.
name|admin
operator|.
name|SVNEntry
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|versioning
operator|.
name|svn
operator|.
name|internal
operator|.
name|wc
operator|.
name|admin
operator|.
name|SVNLog
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|versioning
operator|.
name|svn
operator|.
name|internal
operator|.
name|wc
operator|.
name|admin
operator|.
name|SVNVersionedProperties
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|versioning
operator|.
name|svn
operator|.
name|internal
operator|.
name|wc
operator|.
name|admin
operator|.
name|SVNWCAccess
import|;
end_import

begin_import
import|import
name|org
operator|.
name|tmatesoft
operator|.
name|svn
operator|.
name|core
operator|.
name|SVNDepth
import|;
end_import

begin_import
import|import
name|org
operator|.
name|tmatesoft
operator|.
name|svn
operator|.
name|core
operator|.
name|SVNErrorCode
import|;
end_import

begin_import
import|import
name|org
operator|.
name|tmatesoft
operator|.
name|svn
operator|.
name|core
operator|.
name|SVNErrorMessage
import|;
end_import

begin_import
import|import
name|org
operator|.
name|tmatesoft
operator|.
name|svn
operator|.
name|core
operator|.
name|SVNException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|tmatesoft
operator|.
name|svn
operator|.
name|core
operator|.
name|SVNNodeKind
import|;
end_import

begin_import
import|import
name|org
operator|.
name|tmatesoft
operator|.
name|svn
operator|.
name|core
operator|.
name|SVNURL
import|;
end_import

begin_import
import|import
name|org
operator|.
name|tmatesoft
operator|.
name|svn
operator|.
name|core
operator|.
name|auth
operator|.
name|ISVNAuthenticationManager
import|;
end_import

begin_import
import|import
name|org
operator|.
name|tmatesoft
operator|.
name|svn
operator|.
name|core
operator|.
name|internal
operator|.
name|util
operator|.
name|SVNEncodingUtil
import|;
end_import

begin_import
import|import
name|org
operator|.
name|tmatesoft
operator|.
name|svn
operator|.
name|core
operator|.
name|internal
operator|.
name|util
operator|.
name|SVNPathUtil
import|;
end_import

begin_import
import|import
name|org
operator|.
name|tmatesoft
operator|.
name|svn
operator|.
name|core
operator|.
name|io
operator|.
name|SVNRepository
import|;
end_import

begin_import
import|import
name|org
operator|.
name|tmatesoft
operator|.
name|svn
operator|.
name|core
operator|.
name|wc
operator|.
name|ISVNRepositoryPool
import|;
end_import

begin_import
import|import
name|org
operator|.
name|tmatesoft
operator|.
name|svn
operator|.
name|core
operator|.
name|wc
operator|.
name|SVNRevision
import|;
end_import

begin_import
import|import
name|org
operator|.
name|tmatesoft
operator|.
name|svn
operator|.
name|util
operator|.
name|ISVNDebugLog
import|;
end_import

begin_import
import|import
name|org
operator|.
name|tmatesoft
operator|.
name|svn
operator|.
name|util
operator|.
name|SVNLogType
import|;
end_import

begin_comment
comment|/**  * The<b>SVNMoveClient</b> provides an extra client-side functionality over  * standard (i.e. compatible with the SVN command line client) move   * operations. This class helps to overcome the SVN limitations regarding  * move operations. Using<b>SVNMoveClient</b> you can easily:  *<ul>  *<li>move versioned items to other versioned ones    * within the same Working Copy, what even allows to replace items   * scheduled for deletion, or those that are missing but are still under  * version control and have a node kind different from the node kind of the   * source (!);    *<li>move versioned items belonging to one Working Copy to versioned items  * that belong to absolutely different Working Copy;   *<li>move versioned items to unversioned ones;  *<li>move unversioned items to versioned ones;  *<li>move unversioned items to unversioned ones;  *<li>revert any of the kinds of moving listed above;  *<li>complete a copy/move operation for a file, that is if you have  * manually copied/moved a versioned file to an unversioned file in a Working  * copy, you can run a 'virtual' copy/move on these files to copy/move  * all the necessary administrative version control information.  *</ul>  *   * @version 1.3  * @author  TMate Software Ltd.  * @since   1.2  */
end_comment

begin_class
specifier|public
class|class
name|SVNMoveClient
extends|extends
name|SVNCopyDriver
block|{
specifier|private
name|SVNWCClient
name|myWCClient
decl_stmt|;
specifier|private
name|SVNCopyClient
name|myCopyClient
decl_stmt|;
comment|/**      * Constructs and initializes an<b>SVNMoveClient</b> object      * with the specified run-time configuration and authentication       * drivers.      *       *<p>      * If<code>options</code> is<span class="javakeyword">null</span>,      * then this<b>SVNMoveClient</b> will be using a default run-time      * configuration driver  which takes client-side settings from the       * default SVN's run-time configuration area but is not able to      * change those settings (read more on {@link ISVNOptions} and {@link SVNWCUtil}).        *       *<p>      * If<code>authManager</code> is<span class="javakeyword">null</span>,      * then this<b>SVNMoveClient</b> will be using a default authentication      * and network layers driver (see {@link SVNWCUtil#createDefaultAuthenticationManager()})      * which uses server-side settings and auth storage from the       * default SVN's run-time configuration area (or system properties      * if that area is not found).      *       * @param authManager an authentication and network layers driver      * @param options     a run-time configuration options driver           */
specifier|public
name|SVNMoveClient
parameter_list|(
name|ISVNAuthenticationManager
name|authManager
parameter_list|,
name|ISVNOptions
name|options
parameter_list|)
block|{
name|super
argument_list|(
name|authManager
argument_list|,
name|options
argument_list|)
expr_stmt|;
name|myWCClient
operator|=
operator|new
name|SVNWCClient
argument_list|(
name|authManager
argument_list|,
name|options
argument_list|)
expr_stmt|;
name|myCopyClient
operator|=
operator|new
name|SVNCopyClient
argument_list|(
name|authManager
argument_list|,
name|options
argument_list|)
expr_stmt|;
block|}
comment|/**      * Constructs and initializes an<b>SVNMoveClient</b> object      * with the specified run-time configuration and repository pool object.      *       *<p/>      * If<code>options</code> is<span class="javakeyword">null</span>,      * then this<b>SVNMoveClient</b> will be using a default run-time      * configuration driver  which takes client-side settings from the      * default SVN's run-time configuration area but is not able to      * change those settings (read more on {@link ISVNOptions} and {@link SVNWCUtil}).      *       *<p/>      * If<code>repositoryPool</code> is<span class="javakeyword">null</span>,      * then {@link org.tmatesoft.svn.core.io.SVNRepositoryFactory} will be used to create {@link SVNRepository repository access objects}.      *      * @param repositoryPool   a repository pool object      * @param options          a run-time configuration options driver      */
specifier|public
name|SVNMoveClient
parameter_list|(
name|ISVNRepositoryPool
name|repositoryPool
parameter_list|,
name|ISVNOptions
name|options
parameter_list|)
block|{
name|super
argument_list|(
name|repositoryPool
argument_list|,
name|options
argument_list|)
expr_stmt|;
name|myWCClient
operator|=
operator|new
name|SVNWCClient
argument_list|(
name|repositoryPool
argument_list|,
name|options
argument_list|)
expr_stmt|;
name|myCopyClient
operator|=
operator|new
name|SVNCopyClient
argument_list|(
name|repositoryPool
argument_list|,
name|options
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|setEventHandler
parameter_list|(
name|ISVNEventHandler
name|dispatcher
parameter_list|)
block|{
name|super
operator|.
name|setEventHandler
argument_list|(
name|dispatcher
argument_list|)
expr_stmt|;
name|myWCClient
operator|.
name|setEventHandler
argument_list|(
name|dispatcher
argument_list|)
expr_stmt|;
name|myCopyClient
operator|.
name|setEventHandler
argument_list|(
name|dispatcher
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|setDebugLog
parameter_list|(
name|ISVNDebugLog
name|log
parameter_list|)
block|{
name|super
operator|.
name|setDebugLog
argument_list|(
name|log
argument_list|)
expr_stmt|;
name|myWCClient
operator|.
name|setDebugLog
argument_list|(
name|log
argument_list|)
expr_stmt|;
name|myCopyClient
operator|.
name|setDebugLog
argument_list|(
name|log
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|setOptions
parameter_list|(
name|ISVNOptions
name|options
parameter_list|)
block|{
name|super
operator|.
name|setOptions
argument_list|(
name|options
argument_list|)
expr_stmt|;
if|if
condition|(
name|myWCClient
operator|!=
literal|null
condition|)
block|{
name|myWCClient
operator|.
name|setOptions
argument_list|(
name|options
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|myCopyClient
operator|!=
literal|null
condition|)
block|{
name|myCopyClient
operator|.
name|setOptions
argument_list|(
name|options
argument_list|)
expr_stmt|;
block|}
block|}
comment|/**      * Moves a source item to a destination one.       *       *<p>      *<code>dst</code> should not exist. Furher it's considered to be versioned if      * its parent directory is under version control, otherwise<code>dst</code>      * is considered to be unversioned.      *       *<p>      * If both<code>src</code> and<code>dst</code> are unversioned, then simply       * moves<code>src</code> to<code>dst</code> in the filesystem.      *      *<p>      * If<code>src</code> is versioned but<code>dst</code> is not, then       * exports<code>src</code> to<code>dst</code> in the filesystem and      * removes<code>src</code> from version control.      *       *<p>      * If<code>dst</code> is versioned but<code>src</code> is not, then       * moves<code>src</code> to<code>dst</code> (even if<code>dst</code>      * is scheduled for deletion).      *       *<p>      * If both<code>src</code> and<code>dst</code> are versioned and located      * within the same Working Copy, then moves<code>src</code> to       *<code>dst</code> (even if<code>dst</code> is scheduled for deletion),      * or tries to replace<code>dst</code> with<code>src</code> if the former      * is missing and has a node kind different from the node kind of the source.      * If<code>src</code> is scheduled for addition with history,       *<code>dst</code> will be set the same ancestor URL and revision from which      * the source was copied. If<code>src</code> and<code>dst</code> are located in       * different Working Copies, then this method copies<code>src</code> to       *<code>dst</code>, tries to put the latter under version control and       * finally removes<code>src</code>.      *        * @param  src            a source path      * @param  dst            a destination path      * @throws SVNException   if one of the following is true:      *<ul>      *<li><code>dst</code> already exists      *<li><code>src</code> does not exist      *</ul>      */
specifier|public
name|void
name|doMove
parameter_list|(
name|File
name|src
parameter_list|,
name|File
name|dst
parameter_list|)
throws|throws
name|SVNException
block|{
if|if
condition|(
name|dst
operator|.
name|exists
argument_list|()
condition|)
block|{
name|SVNErrorMessage
name|err
init|=
name|SVNErrorMessage
operator|.
name|create
argument_list|(
name|SVNErrorCode
operator|.
name|ENTRY_EXISTS
argument_list|,
literal|"File ''{0}'' already exists"
argument_list|,
name|dst
argument_list|)
decl_stmt|;
name|SVNErrorManager
operator|.
name|error
argument_list|(
name|err
argument_list|,
name|SVNLogType
operator|.
name|WC
argument_list|)
expr_stmt|;
block|}
if|else if
condition|(
operator|!
name|src
operator|.
name|exists
argument_list|()
condition|)
block|{
name|SVNErrorMessage
name|err
init|=
name|SVNErrorMessage
operator|.
name|create
argument_list|(
name|SVNErrorCode
operator|.
name|NODE_UNKNOWN_KIND
argument_list|,
literal|"Path ''{0}'' does not exist"
argument_list|,
name|src
argument_list|)
decl_stmt|;
name|SVNErrorManager
operator|.
name|error
argument_list|(
name|err
argument_list|,
name|SVNLogType
operator|.
name|WC
argument_list|)
expr_stmt|;
block|}
comment|// src considered as unversioned when it is not versioned
name|boolean
name|srcIsVersioned
init|=
name|isVersionedFile
argument_list|(
name|src
argument_list|)
decl_stmt|;
comment|// dst is considered as unversioned when its parent is not versioned.
name|boolean
name|dstParentIsVersioned
init|=
name|isVersionedFile
argument_list|(
name|dst
operator|.
name|getParentFile
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|srcIsVersioned
operator|&&
operator|!
name|dstParentIsVersioned
condition|)
block|{
comment|// world:world
name|SVNFileUtil
operator|.
name|rename
argument_list|(
name|src
argument_list|,
name|dst
argument_list|)
expr_stmt|;
block|}
if|else if
condition|(
operator|!
name|dstParentIsVersioned
condition|)
block|{
comment|// wc:world
comment|// 1. export to world
name|SVNFileUtil
operator|.
name|copy
argument_list|(
name|src
argument_list|,
name|dst
argument_list|,
literal|false
argument_list|,
literal|false
argument_list|)
expr_stmt|;
comment|// 2. delete in wc.
name|myWCClient
operator|.
name|doDelete
argument_list|(
name|src
argument_list|,
literal|true
argument_list|,
literal|false
argument_list|)
expr_stmt|;
block|}
if|else if
condition|(
operator|!
name|srcIsVersioned
condition|)
block|{
comment|// world:wc (add, if dst is 'deleted' it will be replaced)
name|SVNFileUtil
operator|.
name|rename
argument_list|(
name|src
argument_list|,
name|dst
argument_list|)
expr_stmt|;
comment|// do we have to add it if it was unversioned?
comment|//myWCClient.doAdd(dst, false, false, false, true, false);
block|}
else|else
block|{
comment|// wc:wc.
name|SVNWCAccess
name|wcAccess
init|=
name|createWCAccess
argument_list|()
decl_stmt|;
name|File
name|srcParent
init|=
name|src
operator|.
name|getParentFile
argument_list|()
decl_stmt|;
name|File
name|dstParent
init|=
name|dst
operator|.
name|getParentFile
argument_list|()
decl_stmt|;
name|SVNAdminArea
name|srcParentArea
init|=
literal|null
decl_stmt|;
name|SVNAdminArea
name|dstParentArea
init|=
literal|null
decl_stmt|;
try|try
block|{
if|if
condition|(
name|srcParent
operator|.
name|equals
argument_list|(
name|dstParent
argument_list|)
condition|)
block|{
name|wcAccess
operator|.
name|closeAdminArea
argument_list|(
name|srcParent
argument_list|)
expr_stmt|;
name|srcParentArea
operator|=
name|dstParentArea
operator|=
name|wcAccess
operator|.
name|open
argument_list|(
name|srcParent
argument_list|,
literal|true
argument_list|,
literal|0
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|srcParentArea
operator|=
name|wcAccess
operator|.
name|open
argument_list|(
name|srcParent
argument_list|,
literal|false
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|dstParentArea
operator|=
name|wcAccess
operator|.
name|open
argument_list|(
name|dstParent
argument_list|,
literal|true
argument_list|,
literal|0
argument_list|)
expr_stmt|;
block|}
name|SVNEntry
name|srcEntry
init|=
name|srcParentArea
operator|.
name|getVersionedEntry
argument_list|(
name|src
operator|.
name|getName
argument_list|()
argument_list|,
literal|false
argument_list|)
decl_stmt|;
name|SVNEntry
name|dstEntry
init|=
name|dstParentArea
operator|.
name|getEntry
argument_list|(
name|dst
operator|.
name|getName
argument_list|()
argument_list|,
literal|false
argument_list|)
decl_stmt|;
name|File
name|srcWCRoot
init|=
name|SVNWCUtil
operator|.
name|getWorkingCopyRoot
argument_list|(
name|src
argument_list|,
literal|true
argument_list|)
decl_stmt|;
name|File
name|dstWCRoot
init|=
name|SVNWCUtil
operator|.
name|getWorkingCopyRoot
argument_list|(
name|dst
argument_list|,
literal|true
argument_list|)
decl_stmt|;
name|boolean
name|sameWC
init|=
name|srcWCRoot
operator|!=
literal|null
operator|&&
name|srcWCRoot
operator|.
name|equals
argument_list|(
name|dstWCRoot
argument_list|)
decl_stmt|;
if|if
condition|(
name|sameWC
operator|&&
name|dstEntry
operator|!=
literal|null
operator|&&
operator|(
name|dstEntry
operator|.
name|isScheduledForDeletion
argument_list|()
operator|||
name|dstEntry
operator|.
name|getKind
argument_list|()
operator|!=
name|srcEntry
operator|.
name|getKind
argument_list|()
operator|)
condition|)
block|{
name|wcAccess
operator|.
name|close
argument_list|()
expr_stmt|;
if|if
condition|(
name|srcEntry
operator|.
name|getKind
argument_list|()
operator|==
name|dstEntry
operator|.
name|getKind
argument_list|()
operator|&&
name|srcEntry
operator|.
name|getSchedule
argument_list|()
operator|==
literal|null
operator|&&
name|srcEntry
operator|.
name|isFile
argument_list|()
condition|)
block|{
comment|// make normal move to keep history (R+).
name|SVNCopySource
name|source
init|=
operator|new
name|SVNCopySource
argument_list|(
name|SVNRevision
operator|.
name|UNDEFINED
argument_list|,
name|SVNRevision
operator|.
name|WORKING
argument_list|,
name|src
argument_list|)
decl_stmt|;
name|myCopyClient
operator|.
name|doCopy
argument_list|(
operator|new
name|SVNCopySource
index|[]
block|{
name|source
block|}
argument_list|,
name|dst
argument_list|,
literal|true
argument_list|,
literal|false
argument_list|,
literal|true
argument_list|)
expr_stmt|;
return|return;
block|}
comment|// attempt replace.
name|SVNFileUtil
operator|.
name|copy
argument_list|(
name|src
argument_list|,
name|dst
argument_list|,
literal|false
argument_list|,
literal|false
argument_list|)
expr_stmt|;
try|try
block|{
name|myWCClient
operator|.
name|doAdd
argument_list|(
name|dst
argument_list|,
literal|false
argument_list|,
literal|false
argument_list|,
literal|false
argument_list|,
name|SVNDepth
operator|.
name|INFINITY
argument_list|,
literal|false
argument_list|,
literal|false
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|SVNException
name|e
parameter_list|)
block|{
comment|// will be thrown on obstruction.
block|}
name|myWCClient
operator|.
name|doDelete
argument_list|(
name|src
argument_list|,
literal|true
argument_list|,
literal|false
argument_list|)
expr_stmt|;
return|return;
block|}
if|else if
condition|(
operator|!
name|sameWC
condition|)
block|{
name|SVNEntry
name|dstTmpEntry
init|=
name|dstEntry
operator|!=
literal|null
condition|?
name|dstEntry
else|:
name|dstParentArea
operator|.
name|getVersionedEntry
argument_list|(
name|dstParentArea
operator|.
name|getThisDirName
argument_list|()
argument_list|,
literal|false
argument_list|)
decl_stmt|;
if|if
condition|(
name|srcEntry
operator|.
name|getRepositoryRoot
argument_list|()
operator|!=
literal|null
operator|&&
name|dstTmpEntry
operator|.
name|getRepositoryRoot
argument_list|()
operator|!=
literal|null
operator|&&
name|srcEntry
operator|.
name|getRepositoryRoot
argument_list|()
operator|.
name|equals
argument_list|(
name|dstTmpEntry
operator|.
name|getRepositoryRoot
argument_list|()
argument_list|)
condition|)
block|{
comment|//this is the case when different WCs occur to be from the same repository,
comment|//use SVNCopyClient to move between them
name|wcAccess
operator|.
name|close
argument_list|()
expr_stmt|;
name|SVNCopySource
name|source
init|=
operator|new
name|SVNCopySource
argument_list|(
name|SVNRevision
operator|.
name|UNDEFINED
argument_list|,
name|SVNRevision
operator|.
name|WORKING
argument_list|,
name|src
argument_list|)
decl_stmt|;
name|myCopyClient
operator|.
name|doCopy
argument_list|(
operator|new
name|SVNCopySource
index|[]
block|{
name|source
block|}
argument_list|,
name|dst
argument_list|,
literal|true
argument_list|,
literal|false
argument_list|,
literal|true
argument_list|)
expr_stmt|;
return|return;
block|}
block|}
if|if
condition|(
name|dstEntry
operator|!=
literal|null
condition|)
block|{
name|SVNErrorMessage
name|err
init|=
name|SVNErrorMessage
operator|.
name|create
argument_list|(
name|SVNErrorCode
operator|.
name|ENTRY_EXISTS
argument_list|,
literal|"There is already a versioned item ''{0}''"
argument_list|,
name|dst
argument_list|)
decl_stmt|;
name|SVNErrorManager
operator|.
name|error
argument_list|(
name|err
argument_list|,
name|SVNLogType
operator|.
name|WC
argument_list|)
expr_stmt|;
block|}
comment|// 2. do manual copy of the file or directory
name|SVNFileUtil
operator|.
name|copy
argument_list|(
name|src
argument_list|,
name|dst
argument_list|,
literal|false
argument_list|,
name|sameWC
argument_list|)
expr_stmt|;
comment|// 3. update dst dir and dst entry in parent.
if|if
condition|(
operator|!
name|sameWC
condition|)
block|{
comment|// just add dst (at least try to add, files already there).
name|wcAccess
operator|.
name|close
argument_list|()
expr_stmt|;
try|try
block|{
name|myWCClient
operator|.
name|doAdd
argument_list|(
name|dst
argument_list|,
literal|false
argument_list|,
literal|false
argument_list|,
literal|false
argument_list|,
name|SVNDepth
operator|.
name|INFINITY
argument_list|,
literal|false
argument_list|,
literal|false
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|SVNException
name|e
parameter_list|)
block|{
comment|// obstruction
block|}
block|}
if|else if
condition|(
name|srcEntry
operator|.
name|isFile
argument_list|()
condition|)
block|{
if|if
condition|(
name|dstEntry
operator|==
literal|null
condition|)
block|{
name|dstEntry
operator|=
name|dstParentArea
operator|.
name|addEntry
argument_list|(
name|dst
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|String
name|srcURL
init|=
name|srcEntry
operator|.
name|getURL
argument_list|()
decl_stmt|;
name|String
name|srcCFURL
init|=
name|srcEntry
operator|.
name|getCopyFromURL
argument_list|()
decl_stmt|;
name|long
name|srcRevision
init|=
name|srcEntry
operator|.
name|getRevision
argument_list|()
decl_stmt|;
name|long
name|srcCFRevision
init|=
name|srcEntry
operator|.
name|getCopyFromRevision
argument_list|()
decl_stmt|;
comment|// copy props!
name|SVNVersionedProperties
name|srcProps
init|=
name|srcParentArea
operator|.
name|getProperties
argument_list|(
name|src
operator|.
name|getName
argument_list|()
argument_list|)
decl_stmt|;
name|SVNVersionedProperties
name|dstProps
init|=
name|dstParentArea
operator|.
name|getProperties
argument_list|(
name|dst
operator|.
name|getName
argument_list|()
argument_list|)
decl_stmt|;
name|srcProps
operator|.
name|copyTo
argument_list|(
name|dstProps
argument_list|)
expr_stmt|;
name|File
name|srcBaseFile
init|=
name|srcParentArea
operator|.
name|getBaseFile
argument_list|(
name|src
operator|.
name|getName
argument_list|()
argument_list|,
literal|false
argument_list|)
decl_stmt|;
name|File
name|dstBaseFile
init|=
name|dstParentArea
operator|.
name|getBaseFile
argument_list|(
name|dst
operator|.
name|getName
argument_list|()
argument_list|,
literal|false
argument_list|)
decl_stmt|;
if|if
condition|(
name|srcBaseFile
operator|.
name|isFile
argument_list|()
condition|)
block|{
name|SVNFileUtil
operator|.
name|copy
argument_list|(
name|srcBaseFile
argument_list|,
name|dstBaseFile
argument_list|,
literal|false
argument_list|,
literal|false
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|srcEntry
operator|.
name|isScheduledForAddition
argument_list|()
operator|&&
name|srcEntry
operator|.
name|isCopied
argument_list|()
condition|)
block|{
name|dstEntry
operator|.
name|scheduleForAddition
argument_list|()
expr_stmt|;
name|dstEntry
operator|.
name|setCopyFromRevision
argument_list|(
name|srcCFRevision
argument_list|)
expr_stmt|;
name|dstEntry
operator|.
name|setCopyFromURL
argument_list|(
name|srcCFURL
argument_list|)
expr_stmt|;
name|dstEntry
operator|.
name|setKind
argument_list|(
name|SVNNodeKind
operator|.
name|FILE
argument_list|)
expr_stmt|;
name|dstEntry
operator|.
name|setRevision
argument_list|(
name|srcRevision
argument_list|)
expr_stmt|;
name|dstEntry
operator|.
name|setCopied
argument_list|(
literal|true
argument_list|)
expr_stmt|;
block|}
if|else if
condition|(
operator|!
name|srcEntry
operator|.
name|isCopied
argument_list|()
operator|&&
operator|!
name|srcEntry
operator|.
name|isScheduledForAddition
argument_list|()
condition|)
block|{
name|dstEntry
operator|.
name|setCopied
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|dstEntry
operator|.
name|scheduleForAddition
argument_list|()
expr_stmt|;
name|dstEntry
operator|.
name|setKind
argument_list|(
name|SVNNodeKind
operator|.
name|FILE
argument_list|)
expr_stmt|;
name|dstEntry
operator|.
name|setCopyFromRevision
argument_list|(
name|srcRevision
argument_list|)
expr_stmt|;
name|dstEntry
operator|.
name|setCopyFromURL
argument_list|(
name|srcURL
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|dstEntry
operator|.
name|scheduleForAddition
argument_list|()
expr_stmt|;
name|dstEntry
operator|.
name|setKind
argument_list|(
name|SVNNodeKind
operator|.
name|FILE
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|dstEntry
operator|.
name|isScheduledForReplacement
argument_list|()
condition|)
block|{
name|dstEntry
operator|.
name|setRevision
argument_list|(
literal|0
argument_list|)
expr_stmt|;
block|}
block|}
name|SVNLog
name|log
init|=
name|dstParentArea
operator|.
name|getLog
argument_list|()
decl_stmt|;
name|dstParentArea
operator|.
name|saveEntries
argument_list|(
literal|false
argument_list|)
expr_stmt|;
name|dstParentArea
operator|.
name|saveVersionedProperties
argument_list|(
name|log
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|log
operator|.
name|save
argument_list|()
expr_stmt|;
name|dstParentArea
operator|.
name|runLogs
argument_list|()
expr_stmt|;
block|}
if|else if
condition|(
name|srcEntry
operator|.
name|isDirectory
argument_list|()
condition|)
block|{
name|SVNAdminArea
name|srcArea
init|=
name|wcAccess
operator|.
name|open
argument_list|(
name|src
argument_list|,
literal|false
argument_list|,
literal|0
argument_list|)
decl_stmt|;
name|srcEntry
operator|=
name|srcArea
operator|.
name|getEntry
argument_list|(
name|srcArea
operator|.
name|getThisDirName
argument_list|()
argument_list|,
literal|false
argument_list|)
expr_stmt|;
if|if
condition|(
name|dstEntry
operator|==
literal|null
condition|)
block|{
name|dstEntry
operator|=
name|dstParentArea
operator|.
name|addEntry
argument_list|(
name|dst
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|SVNAdminArea
name|dstArea
init|=
name|wcAccess
operator|.
name|open
argument_list|(
name|dst
argument_list|,
literal|true
argument_list|,
name|SVNWCAccess
operator|.
name|INFINITE_DEPTH
argument_list|)
decl_stmt|;
name|SVNVersionedProperties
name|srcProps
init|=
name|srcArea
operator|.
name|getProperties
argument_list|(
name|srcArea
operator|.
name|getThisDirName
argument_list|()
argument_list|)
decl_stmt|;
name|SVNVersionedProperties
name|dstProps
init|=
name|dstArea
operator|.
name|getProperties
argument_list|(
name|dstArea
operator|.
name|getThisDirName
argument_list|()
argument_list|)
decl_stmt|;
name|SVNEntry
name|dstParentEntry
init|=
name|dstParentArea
operator|.
name|getEntry
argument_list|(
name|dstParentArea
operator|.
name|getThisDirName
argument_list|()
argument_list|,
literal|false
argument_list|)
decl_stmt|;
name|String
name|srcURL
init|=
name|srcEntry
operator|.
name|getURL
argument_list|()
decl_stmt|;
name|String
name|srcCFURL
init|=
name|srcEntry
operator|.
name|getCopyFromURL
argument_list|()
decl_stmt|;
name|String
name|dstURL
init|=
name|dstParentEntry
operator|.
name|getURL
argument_list|()
decl_stmt|;
name|String
name|repositoryRootURL
init|=
name|dstParentEntry
operator|.
name|getRepositoryRoot
argument_list|()
decl_stmt|;
name|long
name|srcRevision
init|=
name|srcEntry
operator|.
name|getRevision
argument_list|()
decl_stmt|;
name|long
name|srcCFRevision
init|=
name|srcEntry
operator|.
name|getCopyFromRevision
argument_list|()
decl_stmt|;
name|dstURL
operator|=
name|SVNPathUtil
operator|.
name|append
argument_list|(
name|dstURL
argument_list|,
name|SVNEncodingUtil
operator|.
name|uriEncode
argument_list|(
name|dst
operator|.
name|getName
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
if|if
condition|(
name|srcEntry
operator|.
name|isScheduledForAddition
argument_list|()
operator|&&
name|srcEntry
operator|.
name|isCopied
argument_list|()
condition|)
block|{
name|srcProps
operator|.
name|copyTo
argument_list|(
name|dstProps
argument_list|)
expr_stmt|;
name|dstEntry
operator|.
name|scheduleForAddition
argument_list|()
expr_stmt|;
name|dstEntry
operator|.
name|setKind
argument_list|(
name|SVNNodeKind
operator|.
name|DIR
argument_list|)
expr_stmt|;
name|dstEntry
operator|.
name|setCopied
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|dstEntry
operator|.
name|setCopyFromRevision
argument_list|(
name|srcCFRevision
argument_list|)
expr_stmt|;
name|dstEntry
operator|.
name|setCopyFromURL
argument_list|(
name|srcCFURL
argument_list|)
expr_stmt|;
name|SVNEntry
name|dstThisEntry
init|=
name|dstArea
operator|.
name|getEntry
argument_list|(
name|dstArea
operator|.
name|getThisDirName
argument_list|()
argument_list|,
literal|false
argument_list|)
decl_stmt|;
name|dstThisEntry
operator|.
name|scheduleForAddition
argument_list|()
expr_stmt|;
name|dstThisEntry
operator|.
name|setKind
argument_list|(
name|SVNNodeKind
operator|.
name|DIR
argument_list|)
expr_stmt|;
name|dstThisEntry
operator|.
name|setCopyFromRevision
argument_list|(
name|srcCFRevision
argument_list|)
expr_stmt|;
name|dstThisEntry
operator|.
name|setCopyFromURL
argument_list|(
name|srcCFURL
argument_list|)
expr_stmt|;
name|dstThisEntry
operator|.
name|setRevision
argument_list|(
name|srcRevision
argument_list|)
expr_stmt|;
name|dstThisEntry
operator|.
name|setCopied
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|SVNLog
name|log
init|=
name|dstArea
operator|.
name|getLog
argument_list|()
decl_stmt|;
name|dstArea
operator|.
name|saveVersionedProperties
argument_list|(
name|log
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|dstParentArea
operator|.
name|saveEntries
argument_list|(
literal|false
argument_list|)
expr_stmt|;
name|log
operator|.
name|save
argument_list|()
expr_stmt|;
name|dstArea
operator|.
name|runLogs
argument_list|()
expr_stmt|;
comment|// update URL in children.
name|dstArea
operator|.
name|updateURL
argument_list|(
name|dstURL
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|dstParentArea
operator|.
name|saveEntries
argument_list|(
literal|true
argument_list|)
expr_stmt|;
block|}
if|else if
condition|(
operator|!
name|srcEntry
operator|.
name|isCopied
argument_list|()
operator|&&
operator|!
name|srcEntry
operator|.
name|isScheduledForAddition
argument_list|()
condition|)
block|{
comment|// versioned (deleted, replaced, or normal).
name|srcProps
operator|.
name|copyTo
argument_list|(
name|dstProps
argument_list|)
expr_stmt|;
name|dstEntry
operator|.
name|scheduleForAddition
argument_list|()
expr_stmt|;
name|dstEntry
operator|.
name|setKind
argument_list|(
name|SVNNodeKind
operator|.
name|DIR
argument_list|)
expr_stmt|;
name|dstEntry
operator|.
name|setCopied
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|dstEntry
operator|.
name|setCopyFromRevision
argument_list|(
name|srcRevision
argument_list|)
expr_stmt|;
name|dstEntry
operator|.
name|setCopyFromURL
argument_list|(
name|srcURL
argument_list|)
expr_stmt|;
comment|// update URL, CF-URL and CF-REV in children.
name|SVNEntry
name|dstThisEntry
init|=
name|dstArea
operator|.
name|getEntry
argument_list|(
name|dstArea
operator|.
name|getThisDirName
argument_list|()
argument_list|,
literal|false
argument_list|)
decl_stmt|;
name|dstThisEntry
operator|.
name|scheduleForAddition
argument_list|()
expr_stmt|;
name|dstThisEntry
operator|.
name|setKind
argument_list|(
name|SVNNodeKind
operator|.
name|DIR
argument_list|)
expr_stmt|;
name|dstThisEntry
operator|.
name|setCopied
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|dstThisEntry
operator|.
name|scheduleForAddition
argument_list|()
expr_stmt|;
name|dstThisEntry
operator|.
name|setKind
argument_list|(
name|SVNNodeKind
operator|.
name|DIR
argument_list|)
expr_stmt|;
name|dstThisEntry
operator|.
name|setCopyFromRevision
argument_list|(
name|srcRevision
argument_list|)
expr_stmt|;
name|dstThisEntry
operator|.
name|setCopyFromURL
argument_list|(
name|srcURL
argument_list|)
expr_stmt|;
name|dstThisEntry
operator|.
name|setURL
argument_list|(
name|dstURL
argument_list|)
expr_stmt|;
name|dstThisEntry
operator|.
name|setRepositoryRoot
argument_list|(
name|repositoryRootURL
argument_list|)
expr_stmt|;
name|SVNLog
name|log
init|=
name|dstArea
operator|.
name|getLog
argument_list|()
decl_stmt|;
name|dstArea
operator|.
name|saveVersionedProperties
argument_list|(
name|log
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|dstArea
operator|.
name|saveEntries
argument_list|(
literal|false
argument_list|)
expr_stmt|;
name|log
operator|.
name|save
argument_list|()
expr_stmt|;
name|dstArea
operator|.
name|runLogs
argument_list|()
expr_stmt|;
name|updateCopiedDirectory
argument_list|(
name|dstArea
argument_list|,
name|dstArea
operator|.
name|getThisDirName
argument_list|()
argument_list|,
name|dstURL
argument_list|,
name|repositoryRootURL
argument_list|,
literal|null
argument_list|,
operator|-
literal|1
argument_list|)
expr_stmt|;
name|dstArea
operator|.
name|saveEntries
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|dstParentArea
operator|.
name|saveEntries
argument_list|(
literal|true
argument_list|)
expr_stmt|;
block|}
else|else
block|{
comment|// unversioned entry (copied or added)
name|dstParentArea
operator|.
name|deleteEntry
argument_list|(
name|dst
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
name|dstParentArea
operator|.
name|saveEntries
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|SVNFileUtil
operator|.
name|deleteAll
argument_list|(
name|dst
argument_list|,
name|this
argument_list|)
expr_stmt|;
name|SVNFileUtil
operator|.
name|copy
argument_list|(
name|src
argument_list|,
name|dst
argument_list|,
literal|false
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|wcAccess
operator|.
name|close
argument_list|()
expr_stmt|;
name|myWCClient
operator|.
name|doAdd
argument_list|(
name|dst
argument_list|,
literal|false
argument_list|,
literal|false
argument_list|,
literal|false
argument_list|,
name|SVNDepth
operator|.
name|INFINITY
argument_list|,
literal|false
argument_list|,
literal|false
argument_list|)
expr_stmt|;
block|}
block|}
comment|// now delete src (if it is not the same as dst :))
try|try
block|{
name|wcAccess
operator|.
name|close
argument_list|()
expr_stmt|;
name|myWCClient
operator|.
name|doDelete
argument_list|(
name|src
argument_list|,
literal|true
argument_list|,
literal|false
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|SVNException
name|e
parameter_list|)
block|{
comment|//
block|}
block|}
finally|finally
block|{
name|wcAccess
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
block|}
block|}
comment|/**      * Reverts a previous move operation back. Provided in pair with {@link #doMove(File, File) doMove()}       * and used to roll back move operations. In this case<code>src</code> is      * considered to be the target of the previsous move operation, and<code>dst</code>      * is regarded to be the source of that same operation which have been moved      * to<code>src</code> and now is to be restored.       *       *<p>      *<code>dst</code> could exist in that case if it has been a WC directory      * that was scheduled for deletion during the previous move operation. Furher       *<code>dst</code> is considered to be versioned if its parent directory is       * under version control, otherwise<code>dst</code> is considered to be unversioned.      *       *<p>      * If both<code>src</code> and<code>dst</code> are unversioned, then simply       * moves<code>src</code> back to<code>dst</code> in the filesystem.      *      *<p>      * If<code>src</code> is versioned but<code>dst</code> is not, then       * unmoves<code>src</code> to<code>dst</code> in the filesystem and      * removes<code>src</code> from version control.      *       *<p>      * If<code>dst</code> is versioned but<code>src</code> is not, then       * first tries to make a revert on<code>dst</code> - if it has not been committed      * yet, it will be simply reverted. However in the case<code>dst</code> has been already removed       * from the repository,<code>src</code> will be copied back to<code>dst</code>      * and scheduled for addition. Then<code>src</code> is removed from the filesystem.      *       *<p>      * If both<code>src</code> and<code>dst</code> are versioned then the       * following situations are possible:      *<ul>      *<li>If<code>dst</code> is still scheduled for deletion, then it is      * reverted back and<code>src</code> is scheduled for deletion.      *<li>in the case if<code>dst</code> exists but is not scheduled for       * deletion,<code>src</code> is cleanly exported to<code>dst</code> and      * removed from version control.      *<li>if<code>dst</code> and<code>src</code> are from different repositories      * (appear to be in different Working Copies), then<code>src</code> is copied      * to<code>dst</code> (with scheduling<code>dst</code> for addition, but not      * with history since copying is made in the filesystem only) and removed from      * version control.      *<li>if both<code>dst</code> and<code>src</code> are in the same       * repository (appear to be located in the same Working Copy) and:       *<ul style="list-style-type: lower-alpha">      *<li>if<code>src</code> is scheduled for addition with history, then      *    copies<code>src</code> to<code>dst</code> specifying the source      *    ancestor's URL and revision (i.e. the ancestor of the source is the      *    ancestor of the destination);      *<li>if<code>src</code> is already under version control, then      *    copies<code>src</code> to<code>dst</code> specifying the source      *    URL and revision as the ancestor (i.e.<code>src</code> itself is the      *    ancestor of<code>dst</code>);      *<li>if<code>src</code> is just scheduled for addition (without history),      *    then simply copies<code>src</code> to<code>dst</code> (only in the filesystem,      *    without history) and schedules<code>dst</code> for addition;        *</ul>      * then<code>src</code> is removed from version control.      *</ul>      *       * @param  src            a source path      * @param  dst            a destination path      * @throws SVNException   if<code>src</code> does not exist      *       */
comment|// move that considered as move undo.
specifier|public
name|void
name|undoMove
parameter_list|(
name|File
name|src
parameter_list|,
name|File
name|dst
parameter_list|)
throws|throws
name|SVNException
block|{
comment|// dst could exists, if it is deleted directory.
if|if
condition|(
operator|!
name|src
operator|.
name|exists
argument_list|()
condition|)
block|{
name|SVNErrorMessage
name|err
init|=
name|SVNErrorMessage
operator|.
name|create
argument_list|(
name|SVNErrorCode
operator|.
name|NODE_UNKNOWN_KIND
argument_list|,
literal|"Path ''{0}'' does not exist"
argument_list|,
name|src
argument_list|)
decl_stmt|;
name|SVNErrorManager
operator|.
name|error
argument_list|(
name|err
argument_list|,
name|SVNLogType
operator|.
name|WC
argument_list|)
expr_stmt|;
block|}
comment|// src considered as unversioned when it is not versioned
name|boolean
name|srcIsVersioned
init|=
name|isVersionedFile
argument_list|(
name|src
argument_list|)
decl_stmt|;
comment|// dst is considered as unversioned when its parent is not versioned.
name|boolean
name|dstParentIsVersioned
init|=
name|isVersionedFile
argument_list|(
name|dst
operator|.
name|getParentFile
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|srcIsVersioned
operator|&&
operator|!
name|dstParentIsVersioned
condition|)
block|{
comment|// world:world
name|SVNFileUtil
operator|.
name|rename
argument_list|(
name|src
argument_list|,
name|dst
argument_list|)
expr_stmt|;
block|}
if|else if
condition|(
operator|!
name|dstParentIsVersioned
condition|)
block|{
comment|// wc:world
comment|// 1. export to world
name|SVNFileUtil
operator|.
name|copy
argument_list|(
name|src
argument_list|,
name|dst
argument_list|,
literal|false
argument_list|,
literal|false
argument_list|)
expr_stmt|;
comment|// 2. delete in wc.
name|myWCClient
operator|.
name|doDelete
argument_list|(
name|src
argument_list|,
literal|true
argument_list|,
literal|false
argument_list|)
expr_stmt|;
block|}
if|else if
condition|(
operator|!
name|srcIsVersioned
condition|)
block|{
comment|// world:wc (add, if dst is 'deleted' it will be replaced)
name|SVNFileUtil
operator|.
name|rename
argument_list|(
name|src
argument_list|,
name|dst
argument_list|)
expr_stmt|;
comment|// dst should probably be deleted, in this case - revert it
name|SVNWCAccess
name|dstAccess
init|=
name|createWCAccess
argument_list|()
decl_stmt|;
name|boolean
name|revert
init|=
literal|false
decl_stmt|;
try|try
block|{
name|dstAccess
operator|.
name|probeOpen
argument_list|(
name|dst
argument_list|,
literal|false
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|SVNEntry
name|dstEntry
init|=
name|dstAccess
operator|.
name|getEntry
argument_list|(
name|dst
argument_list|,
literal|false
argument_list|)
decl_stmt|;
name|revert
operator|=
name|dstEntry
operator|!=
literal|null
operator|&&
name|dstEntry
operator|.
name|isScheduledForDeletion
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|SVNException
name|e
parameter_list|)
block|{
block|}
finally|finally
block|{
name|dstAccess
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
if|if
condition|(
name|revert
condition|)
block|{
name|myWCClient
operator|.
name|doRevert
argument_list|(
operator|new
name|File
index|[]
block|{
name|dst
block|}
argument_list|,
name|SVNDepth
operator|.
name|INFINITY
argument_list|,
literal|null
argument_list|)
expr_stmt|;
block|}
else|else
block|{
comment|// should we do this? there is no old source, may be rename is enough.
comment|//                myWCClient.doAdd(dst, false, false, false, true, false);
block|}
block|}
else|else
block|{
comment|// wc:wc.
name|SVNWCAccess
name|wcAccess
init|=
name|createWCAccess
argument_list|()
decl_stmt|;
name|File
name|srcParent
init|=
name|src
operator|.
name|getParentFile
argument_list|()
decl_stmt|;
name|File
name|dstParent
init|=
name|dst
operator|.
name|getParentFile
argument_list|()
decl_stmt|;
name|SVNAdminArea
name|srcParentArea
init|=
literal|null
decl_stmt|;
name|SVNAdminArea
name|dstParentArea
init|=
literal|null
decl_stmt|;
try|try
block|{
if|if
condition|(
name|srcParent
operator|.
name|equals
argument_list|(
name|dstParent
argument_list|)
condition|)
block|{
name|wcAccess
operator|.
name|closeAdminArea
argument_list|(
name|srcParent
argument_list|)
expr_stmt|;
name|srcParentArea
operator|=
name|dstParentArea
operator|=
name|wcAccess
operator|.
name|open
argument_list|(
name|srcParent
argument_list|,
literal|true
argument_list|,
literal|0
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|srcParentArea
operator|=
name|wcAccess
operator|.
name|open
argument_list|(
name|srcParent
argument_list|,
literal|false
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|dstParentArea
operator|=
name|wcAccess
operator|.
name|open
argument_list|(
name|dstParent
argument_list|,
literal|true
argument_list|,
literal|0
argument_list|)
expr_stmt|;
block|}
name|SVNEntry
name|srcEntry
init|=
name|srcParentArea
operator|.
name|getEntry
argument_list|(
name|src
operator|.
name|getName
argument_list|()
argument_list|,
literal|true
argument_list|)
decl_stmt|;
name|SVNEntry
name|dstEntry
init|=
name|dstParentArea
operator|.
name|getEntry
argument_list|(
name|dst
operator|.
name|getName
argument_list|()
argument_list|,
literal|true
argument_list|)
decl_stmt|;
if|if
condition|(
name|dstEntry
operator|!=
literal|null
operator|&&
name|dstEntry
operator|.
name|isScheduledForDeletion
argument_list|()
condition|)
block|{
name|wcAccess
operator|.
name|close
argument_list|()
expr_stmt|;
comment|// clear undo.
name|myWCClient
operator|.
name|doRevert
argument_list|(
operator|new
name|File
index|[]
block|{
name|dst
block|}
argument_list|,
name|SVNDepth
operator|.
name|INFINITY
argument_list|,
literal|null
argument_list|)
expr_stmt|;
name|myWCClient
operator|.
name|doDelete
argument_list|(
name|src
argument_list|,
literal|true
argument_list|,
literal|false
argument_list|)
expr_stmt|;
return|return;
block|}
name|SVNEntry
name|dstParentEntry
init|=
name|wcAccess
operator|.
name|getEntry
argument_list|(
name|dstParent
argument_list|,
literal|false
argument_list|)
decl_stmt|;
name|File
name|srcWCRoot
init|=
name|SVNWCUtil
operator|.
name|getWorkingCopyRoot
argument_list|(
name|src
argument_list|,
literal|true
argument_list|)
decl_stmt|;
name|File
name|dstWCRoot
init|=
name|SVNWCUtil
operator|.
name|getWorkingCopyRoot
argument_list|(
name|dst
argument_list|,
literal|true
argument_list|)
decl_stmt|;
name|boolean
name|sameWC
init|=
name|srcWCRoot
operator|!=
literal|null
operator|&&
name|srcWCRoot
operator|.
name|equals
argument_list|(
name|dstWCRoot
argument_list|)
decl_stmt|;
name|SVNFileUtil
operator|.
name|copy
argument_list|(
name|src
argument_list|,
name|dst
argument_list|,
literal|false
argument_list|,
name|sameWC
argument_list|)
expr_stmt|;
comment|// obstruction assertion.
if|if
condition|(
name|dstEntry
operator|!=
literal|null
operator|&&
name|dstEntry
operator|.
name|getKind
argument_list|()
operator|!=
name|srcEntry
operator|.
name|getKind
argument_list|()
condition|)
block|{
comment|// ops have no sence->target is obstructed, just export src to
comment|// dst and delete src.
name|wcAccess
operator|.
name|close
argument_list|()
expr_stmt|;
name|myWCClient
operator|.
name|doDelete
argument_list|(
name|src
argument_list|,
literal|true
argument_list|,
literal|false
argument_list|)
expr_stmt|;
return|return;
block|}
if|if
condition|(
operator|!
name|sameWC
condition|)
block|{
comment|// just add dst (at least try to add, files already there).
name|wcAccess
operator|.
name|close
argument_list|()
expr_stmt|;
try|try
block|{
name|myWCClient
operator|.
name|doAdd
argument_list|(
name|dst
argument_list|,
literal|false
argument_list|,
literal|false
argument_list|,
literal|false
argument_list|,
name|SVNDepth
operator|.
name|INFINITY
argument_list|,
literal|false
argument_list|,
literal|false
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|SVNException
name|e
parameter_list|)
block|{
comment|// obstruction
block|}
block|}
if|else if
condition|(
name|srcEntry
operator|.
name|isFile
argument_list|()
condition|)
block|{
if|if
condition|(
name|dstEntry
operator|==
literal|null
condition|)
block|{
name|dstEntry
operator|=
name|dstParentArea
operator|.
name|addEntry
argument_list|(
name|dst
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|String
name|srcURL
init|=
name|srcEntry
operator|.
name|getURL
argument_list|()
decl_stmt|;
name|String
name|srcCFURL
init|=
name|srcEntry
operator|.
name|getCopyFromURL
argument_list|()
decl_stmt|;
name|long
name|srcRevision
init|=
name|srcEntry
operator|.
name|getRevision
argument_list|()
decl_stmt|;
name|long
name|srcCFRevision
init|=
name|srcEntry
operator|.
name|getCopyFromRevision
argument_list|()
decl_stmt|;
if|if
condition|(
name|srcEntry
operator|.
name|isScheduledForAddition
argument_list|()
operator|&&
name|srcEntry
operator|.
name|isCopied
argument_list|()
condition|)
block|{
name|dstEntry
operator|.
name|scheduleForAddition
argument_list|()
expr_stmt|;
name|dstEntry
operator|.
name|setCopyFromRevision
argument_list|(
name|srcCFRevision
argument_list|)
expr_stmt|;
name|dstEntry
operator|.
name|setCopyFromURL
argument_list|(
name|srcCFURL
argument_list|)
expr_stmt|;
name|dstEntry
operator|.
name|setKind
argument_list|(
name|SVNNodeKind
operator|.
name|FILE
argument_list|)
expr_stmt|;
name|dstEntry
operator|.
name|setRevision
argument_list|(
name|srcRevision
argument_list|)
expr_stmt|;
name|dstEntry
operator|.
name|setCopied
argument_list|(
literal|true
argument_list|)
expr_stmt|;
block|}
if|else if
condition|(
operator|!
name|srcEntry
operator|.
name|isCopied
argument_list|()
operator|&&
operator|!
name|srcEntry
operator|.
name|isScheduledForAddition
argument_list|()
condition|)
block|{
name|dstEntry
operator|.
name|setCopied
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|dstEntry
operator|.
name|scheduleForAddition
argument_list|()
expr_stmt|;
name|dstEntry
operator|.
name|setKind
argument_list|(
name|SVNNodeKind
operator|.
name|FILE
argument_list|)
expr_stmt|;
name|dstEntry
operator|.
name|setCopyFromRevision
argument_list|(
name|srcRevision
argument_list|)
expr_stmt|;
name|dstEntry
operator|.
name|setCopyFromURL
argument_list|(
name|srcURL
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|dstEntry
operator|.
name|scheduleForAddition
argument_list|()
expr_stmt|;
name|dstEntry
operator|.
name|setKind
argument_list|(
name|SVNNodeKind
operator|.
name|FILE
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|dstEntry
operator|.
name|isScheduledForReplacement
argument_list|()
condition|)
block|{
name|dstEntry
operator|.
name|setRevision
argument_list|(
literal|0
argument_list|)
expr_stmt|;
block|}
block|}
name|dstParentArea
operator|.
name|saveEntries
argument_list|(
literal|false
argument_list|)
expr_stmt|;
block|}
if|else if
condition|(
name|srcEntry
operator|.
name|isDirectory
argument_list|()
condition|)
block|{
name|SVNAdminArea
name|srcArea
init|=
name|wcAccess
operator|.
name|open
argument_list|(
name|src
argument_list|,
literal|false
argument_list|,
literal|0
argument_list|)
decl_stmt|;
name|srcEntry
operator|=
name|srcArea
operator|.
name|getEntry
argument_list|(
name|srcArea
operator|.
name|getThisDirName
argument_list|()
argument_list|,
literal|false
argument_list|)
expr_stmt|;
if|if
condition|(
name|dstEntry
operator|==
literal|null
condition|)
block|{
name|dstEntry
operator|=
name|dstParentArea
operator|.
name|addEntry
argument_list|(
name|dst
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|String
name|srcURL
init|=
name|srcEntry
operator|.
name|getURL
argument_list|()
decl_stmt|;
name|String
name|dstURL
init|=
name|dstParentEntry
operator|.
name|getURL
argument_list|()
decl_stmt|;
name|long
name|srcRevision
init|=
name|srcEntry
operator|.
name|getRevision
argument_list|()
decl_stmt|;
name|String
name|repositoryRootURL
init|=
name|srcEntry
operator|.
name|getRepositoryRoot
argument_list|()
decl_stmt|;
name|dstURL
operator|=
name|SVNPathUtil
operator|.
name|append
argument_list|(
name|dstURL
argument_list|,
name|SVNEncodingUtil
operator|.
name|uriEncode
argument_list|(
name|dst
operator|.
name|getName
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|SVNAdminArea
name|dstArea
init|=
name|wcAccess
operator|.
name|open
argument_list|(
name|dst
argument_list|,
literal|true
argument_list|,
name|SVNWCAccess
operator|.
name|INFINITE_DEPTH
argument_list|)
decl_stmt|;
if|if
condition|(
name|srcEntry
operator|.
name|isScheduledForAddition
argument_list|()
operator|&&
name|srcEntry
operator|.
name|isCopied
argument_list|()
condition|)
block|{
name|dstEntry
operator|.
name|scheduleForAddition
argument_list|()
expr_stmt|;
name|dstEntry
operator|.
name|setKind
argument_list|(
name|SVNNodeKind
operator|.
name|DIR
argument_list|)
expr_stmt|;
name|dstParentArea
operator|.
name|saveEntries
argument_list|(
literal|true
argument_list|)
expr_stmt|;
comment|// update URL in children.
name|dstArea
operator|.
name|updateURL
argument_list|(
name|dstURL
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|dstArea
operator|.
name|saveEntries
argument_list|(
literal|true
argument_list|)
expr_stmt|;
block|}
if|else if
condition|(
operator|!
name|srcEntry
operator|.
name|isCopied
argument_list|()
operator|&&
operator|!
name|srcEntry
operator|.
name|isScheduledForAddition
argument_list|()
condition|)
block|{
name|dstEntry
operator|.
name|setCopied
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|dstEntry
operator|.
name|scheduleForAddition
argument_list|()
expr_stmt|;
name|dstEntry
operator|.
name|setKind
argument_list|(
name|SVNNodeKind
operator|.
name|DIR
argument_list|)
expr_stmt|;
name|dstEntry
operator|.
name|setCopyFromRevision
argument_list|(
name|srcRevision
argument_list|)
expr_stmt|;
name|dstEntry
operator|.
name|setCopyFromURL
argument_list|(
name|srcURL
argument_list|)
expr_stmt|;
name|dstParentArea
operator|.
name|saveEntries
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|SVNEntry
name|dstThisEntry
init|=
name|dstArea
operator|.
name|getEntry
argument_list|(
name|dstArea
operator|.
name|getThisDirName
argument_list|()
argument_list|,
literal|false
argument_list|)
decl_stmt|;
name|dstThisEntry
operator|.
name|setCopied
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|dstThisEntry
operator|.
name|scheduleForAddition
argument_list|()
expr_stmt|;
name|dstThisEntry
operator|.
name|setKind
argument_list|(
name|SVNNodeKind
operator|.
name|DIR
argument_list|)
expr_stmt|;
name|dstThisEntry
operator|.
name|setCopyFromRevision
argument_list|(
name|srcRevision
argument_list|)
expr_stmt|;
name|dstThisEntry
operator|.
name|setURL
argument_list|(
name|dstURL
argument_list|)
expr_stmt|;
name|dstThisEntry
operator|.
name|setCopyFromURL
argument_list|(
name|srcURL
argument_list|)
expr_stmt|;
name|dstThisEntry
operator|.
name|setRepositoryRoot
argument_list|(
name|repositoryRootURL
argument_list|)
expr_stmt|;
name|updateCopiedDirectory
argument_list|(
name|dstArea
argument_list|,
name|dstArea
operator|.
name|getThisDirName
argument_list|()
argument_list|,
name|dstURL
argument_list|,
name|repositoryRootURL
argument_list|,
literal|null
argument_list|,
operator|-
literal|1
argument_list|)
expr_stmt|;
name|dstArea
operator|.
name|saveEntries
argument_list|(
literal|true
argument_list|)
expr_stmt|;
block|}
else|else
block|{
comment|// replay
name|dstParentArea
operator|.
name|deleteEntry
argument_list|(
name|dst
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
name|dstParentArea
operator|.
name|saveEntries
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|wcAccess
operator|.
name|close
argument_list|()
expr_stmt|;
name|SVNFileUtil
operator|.
name|deleteAll
argument_list|(
name|dst
argument_list|,
name|this
argument_list|)
expr_stmt|;
name|SVNFileUtil
operator|.
name|copy
argument_list|(
name|src
argument_list|,
name|dst
argument_list|,
literal|false
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|myWCClient
operator|.
name|doAdd
argument_list|(
name|dst
argument_list|,
literal|false
argument_list|,
literal|false
argument_list|,
literal|false
argument_list|,
name|SVNDepth
operator|.
name|INFINITY
argument_list|,
literal|false
argument_list|,
literal|false
argument_list|)
expr_stmt|;
block|}
block|}
comment|// now delete src.
try|try
block|{
name|wcAccess
operator|.
name|close
argument_list|()
expr_stmt|;
name|myWCClient
operator|.
name|doDelete
argument_list|(
name|src
argument_list|,
literal|true
argument_list|,
literal|false
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|SVNException
name|e
parameter_list|)
block|{
comment|//
block|}
block|}
finally|finally
block|{
name|wcAccess
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
block|}
block|}
comment|/**      * Copies/moves administrative version control information of a source file       * to administrative information of a destination file.      * For example, if you have manually copied/moved a source file to a target one       * (manually means just in the filesystem, not using version control operations) and then      * would like to turn this copying/moving into a complete version control copy      * or move operation, use this method that will finish all the work for you - it      * will copy/move all the necessary administrative information (kept in the source      *<i>.svn</i> directory) to the target<i>.svn</i> directory.       *       *<p>      * In that case when you have your files copied/moved in the filesystem, you      * can not perform standard (version control) copying/moving - since the target already exists and      * the source may be already deleted. Use this method to overcome that restriction.        *       * @param  src           a source file path (was copied/moved to<code>dst</code>)      * @param  dst           a destination file path      * @param  move          if<span class="javakeyword">true</span> then      *                       completes moving<code>src</code> to<code>dst</code>,      *                       otherwise completes copying<code>src</code> to<code>dst</code>      * @throws SVNException  if one of the following is true:      *<ul>      *<li><code>move =</code><span class="javakeyword">true</span> and<code>src</code>      *                       still exists      *<li><code>dst</code> does not exist      *<li><code>dst</code> is a directory       *<li><code>src</code> is a directory      *<li><code>src</code> is not under version control      *<li><code>dst</code> is already under version control      *<li>if<code>src</code> is copied but not scheduled for      *                       addition, and SVNKit is not able to locate the copied      *                       directory root for<code>src</code>      *</ul>      */
specifier|public
name|void
name|doVirtualCopy
parameter_list|(
name|File
name|src
parameter_list|,
name|File
name|dst
parameter_list|,
name|boolean
name|move
parameter_list|)
throws|throws
name|SVNException
block|{
name|SVNFileType
name|srcType
init|=
name|SVNFileType
operator|.
name|getType
argument_list|(
name|src
argument_list|)
decl_stmt|;
name|SVNFileType
name|dstType
init|=
name|SVNFileType
operator|.
name|getType
argument_list|(
name|dst
argument_list|)
decl_stmt|;
name|String
name|opName
init|=
name|move
condition|?
literal|"move"
else|:
literal|"copy"
decl_stmt|;
if|if
condition|(
name|move
operator|&&
name|srcType
operator|!=
name|SVNFileType
operator|.
name|NONE
condition|)
block|{
name|SVNErrorMessage
name|err
init|=
name|SVNErrorMessage
operator|.
name|create
argument_list|(
name|SVNErrorCode
operator|.
name|ENTRY_EXISTS
argument_list|,
literal|"Cannot perform 'virtual' {0}: ''{1}'' still exists"
argument_list|,
operator|new
name|Object
index|[]
block|{
name|opName
block|,
name|src
block|}
argument_list|)
decl_stmt|;
name|SVNErrorManager
operator|.
name|error
argument_list|(
name|err
argument_list|,
name|SVNLogType
operator|.
name|WC
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|dstType
operator|==
name|SVNFileType
operator|.
name|NONE
condition|)
block|{
name|SVNErrorMessage
name|err
init|=
name|SVNErrorMessage
operator|.
name|create
argument_list|(
name|SVNErrorCode
operator|.
name|ENTRY_NOT_FOUND
argument_list|,
literal|"Cannot perform 'virtual' {0}: ''{1}'' does not exist"
argument_list|,
operator|new
name|Object
index|[]
block|{
name|opName
block|,
name|dst
block|}
argument_list|)
decl_stmt|;
name|SVNErrorManager
operator|.
name|error
argument_list|(
name|err
argument_list|,
name|SVNLogType
operator|.
name|WC
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|dstType
operator|==
name|SVNFileType
operator|.
name|DIRECTORY
condition|)
block|{
name|SVNErrorMessage
name|err
init|=
name|SVNErrorMessage
operator|.
name|create
argument_list|(
name|SVNErrorCode
operator|.
name|ILLEGAL_TARGET
argument_list|,
literal|"Cannot perform 'virtual' {0}: ''{1}'' is a directory"
argument_list|,
operator|new
name|Object
index|[]
block|{
name|opName
block|,
name|dst
block|}
argument_list|)
decl_stmt|;
name|SVNErrorManager
operator|.
name|error
argument_list|(
name|err
argument_list|,
name|SVNLogType
operator|.
name|WC
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
operator|!
name|move
operator|&&
name|srcType
operator|==
name|SVNFileType
operator|.
name|DIRECTORY
condition|)
block|{
name|SVNErrorMessage
name|err
init|=
name|SVNErrorMessage
operator|.
name|create
argument_list|(
name|SVNErrorCode
operator|.
name|ILLEGAL_TARGET
argument_list|,
literal|"Cannot perform 'virtual' {0}: ''{1}'' is a directory"
argument_list|,
operator|new
name|Object
index|[]
block|{
name|opName
block|,
name|src
block|}
argument_list|)
decl_stmt|;
name|SVNErrorManager
operator|.
name|error
argument_list|(
name|err
argument_list|,
name|SVNLogType
operator|.
name|WC
argument_list|)
expr_stmt|;
block|}
name|SVNURL
name|srcRepoRoot
init|=
literal|null
decl_stmt|;
name|SVNURL
name|dstRepoRoot
init|=
literal|null
decl_stmt|;
name|boolean
name|versionedDst
init|=
literal|false
decl_stmt|;
name|SVNWCAccess
name|dstAccess
init|=
name|createWCAccess
argument_list|()
decl_stmt|;
try|try
block|{
name|dstAccess
operator|.
name|probeOpen
argument_list|(
name|dst
argument_list|,
literal|false
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|SVNEntry
name|dstEntry
init|=
name|dstAccess
operator|.
name|getEntry
argument_list|(
name|dst
argument_list|,
literal|false
argument_list|)
decl_stmt|;
if|if
condition|(
name|dstEntry
operator|!=
literal|null
condition|)
block|{
if|if
condition|(
operator|!
name|dstEntry
operator|.
name|isScheduledForAddition
argument_list|()
operator|&&
operator|!
name|dstEntry
operator|.
name|isScheduledForReplacement
argument_list|()
condition|)
block|{
name|SVNErrorMessage
name|err
init|=
name|SVNErrorMessage
operator|.
name|create
argument_list|(
name|SVNErrorCode
operator|.
name|ENTRY_ATTRIBUTE_INVALID
argument_list|,
literal|"Cannot perform 'virtual' {0}: ''{1}'' is scheduled neither for addition nor for replacement"
argument_list|,
operator|new
name|Object
index|[]
block|{
name|opName
block|,
name|dst
block|}
argument_list|)
decl_stmt|;
name|SVNErrorManager
operator|.
name|error
argument_list|(
name|err
argument_list|,
name|SVNLogType
operator|.
name|WC
argument_list|)
expr_stmt|;
block|}
name|versionedDst
operator|=
literal|true
expr_stmt|;
name|dstRepoRoot
operator|=
name|dstEntry
operator|.
name|getRepositoryRootURL
argument_list|()
expr_stmt|;
block|}
block|}
finally|finally
block|{
name|dstAccess
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
name|SVNWCAccess
name|srcAccess
init|=
name|createWCAccess
argument_list|()
decl_stmt|;
name|String
name|cfURL
init|=
literal|null
decl_stmt|;
name|boolean
name|added
init|=
literal|false
decl_stmt|;
name|long
name|cfRevision
init|=
operator|-
literal|1
decl_stmt|;
try|try
block|{
name|srcAccess
operator|.
name|probeOpen
argument_list|(
name|src
argument_list|,
literal|false
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|SVNEntry
name|srcEntry
init|=
name|srcAccess
operator|.
name|getEntry
argument_list|(
name|src
argument_list|,
literal|false
argument_list|)
decl_stmt|;
if|if
condition|(
name|srcEntry
operator|==
literal|null
condition|)
block|{
name|SVNErrorMessage
name|err
init|=
name|SVNErrorMessage
operator|.
name|create
argument_list|(
name|SVNErrorCode
operator|.
name|ENTRY_NOT_FOUND
argument_list|,
literal|"''{0}'' is not under version control"
argument_list|,
name|src
argument_list|)
decl_stmt|;
name|SVNErrorManager
operator|.
name|error
argument_list|(
name|err
argument_list|,
name|SVNLogType
operator|.
name|WC
argument_list|)
expr_stmt|;
block|}
name|srcRepoRoot
operator|=
name|srcEntry
operator|.
name|getRepositoryRootURL
argument_list|()
expr_stmt|;
if|if
condition|(
name|srcEntry
operator|.
name|isCopied
argument_list|()
operator|&&
operator|!
name|srcEntry
operator|.
name|isScheduledForAddition
argument_list|()
condition|)
block|{
name|cfURL
operator|=
name|getCopyFromURL
argument_list|(
name|src
operator|.
name|getParentFile
argument_list|()
argument_list|,
name|SVNEncodingUtil
operator|.
name|uriEncode
argument_list|(
name|src
operator|.
name|getName
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|cfRevision
operator|=
name|getCopyFromRevision
argument_list|(
name|src
operator|.
name|getParentFile
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|cfURL
operator|==
literal|null
operator|||
name|cfRevision
operator|<
literal|0
condition|)
block|{
name|SVNErrorMessage
name|err
init|=
name|SVNErrorMessage
operator|.
name|create
argument_list|(
name|SVNErrorCode
operator|.
name|ENTRY_NOT_FOUND
argument_list|,
literal|"Cannot locate copied directory root for ''{0}''"
argument_list|,
name|src
argument_list|)
decl_stmt|;
name|SVNErrorManager
operator|.
name|error
argument_list|(
name|err
argument_list|,
name|SVNLogType
operator|.
name|WC
argument_list|)
expr_stmt|;
block|}
name|added
operator|=
literal|false
expr_stmt|;
block|}
else|else
block|{
name|cfURL
operator|=
name|srcEntry
operator|.
name|isCopied
argument_list|()
condition|?
name|srcEntry
operator|.
name|getCopyFromURL
argument_list|()
else|:
name|srcEntry
operator|.
name|getURL
argument_list|()
expr_stmt|;
name|cfRevision
operator|=
name|srcEntry
operator|.
name|isCopied
argument_list|()
condition|?
name|srcEntry
operator|.
name|getCopyFromRevision
argument_list|()
else|:
name|srcEntry
operator|.
name|getRevision
argument_list|()
expr_stmt|;
name|added
operator|=
name|srcEntry
operator|.
name|isScheduledForAddition
argument_list|()
operator|&&
operator|!
name|srcEntry
operator|.
name|isCopied
argument_list|()
expr_stmt|;
block|}
block|}
finally|finally
block|{
name|srcAccess
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
if|if
condition|(
name|added
operator|&&
operator|!
name|versionedDst
condition|)
block|{
if|if
condition|(
name|move
condition|)
block|{
name|myWCClient
operator|.
name|doDelete
argument_list|(
name|src
argument_list|,
literal|true
argument_list|,
literal|false
argument_list|)
expr_stmt|;
block|}
name|myWCClient
operator|.
name|doAdd
argument_list|(
name|dst
argument_list|,
literal|true
argument_list|,
literal|false
argument_list|,
literal|false
argument_list|,
name|SVNDepth
operator|.
name|EMPTY
argument_list|,
literal|false
argument_list|,
literal|false
argument_list|)
expr_stmt|;
return|return;
block|}
name|dstAccess
operator|=
name|createWCAccess
argument_list|()
expr_stmt|;
name|srcAccess
operator|=
name|createWCAccess
argument_list|()
expr_stmt|;
try|try
block|{
name|SVNAdminArea
name|dstArea
init|=
name|dstAccess
operator|.
name|probeOpen
argument_list|(
name|dst
argument_list|,
literal|true
argument_list|,
literal|0
argument_list|)
decl_stmt|;
name|SVNEntry
name|dstEntry
init|=
name|dstAccess
operator|.
name|getEntry
argument_list|(
name|dst
argument_list|,
literal|false
argument_list|)
decl_stmt|;
if|if
condition|(
name|dstEntry
operator|!=
literal|null
operator|&&
operator|!
name|dstEntry
operator|.
name|isScheduledForAddition
argument_list|()
operator|&&
operator|!
name|dstEntry
operator|.
name|isScheduledForReplacement
argument_list|()
condition|)
block|{
name|SVNErrorMessage
name|err
init|=
name|SVNErrorMessage
operator|.
name|create
argument_list|(
name|SVNErrorCode
operator|.
name|ENTRY_ATTRIBUTE_INVALID
argument_list|,
literal|"Cannot perform 'virtual' {0}: ''{1}'' is scheduled neither for addition nor for replacement"
argument_list|,
operator|new
name|Object
index|[]
block|{
name|opName
block|,
name|dst
block|}
argument_list|)
decl_stmt|;
name|SVNErrorManager
operator|.
name|error
argument_list|(
name|err
argument_list|,
name|SVNLogType
operator|.
name|WC
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|srcRepoRoot
operator|!=
literal|null
operator|&&
name|dstRepoRoot
operator|!=
literal|null
operator|&&
operator|!
name|dstRepoRoot
operator|.
name|equals
argument_list|(
name|srcRepoRoot
argument_list|)
condition|)
block|{
name|SVNErrorMessage
name|err
init|=
name|SVNErrorMessage
operator|.
name|create
argument_list|(
name|SVNErrorCode
operator|.
name|ENTRY_ATTRIBUTE_INVALID
argument_list|,
literal|"Cannot perform 'virtual' {0}: paths belong to different repositories"
argument_list|,
name|opName
argument_list|)
decl_stmt|;
name|SVNErrorManager
operator|.
name|error
argument_list|(
name|err
argument_list|,
name|SVNLogType
operator|.
name|WC
argument_list|)
expr_stmt|;
block|}
name|SVNAdminArea
name|srcArea
init|=
name|srcAccess
operator|.
name|probeOpen
argument_list|(
name|src
argument_list|,
literal|false
argument_list|,
literal|0
argument_list|)
decl_stmt|;
name|SVNVersionedProperties
name|srcProps
init|=
name|srcArea
operator|.
name|getProperties
argument_list|(
name|src
operator|.
name|getName
argument_list|()
argument_list|)
decl_stmt|;
name|SVNVersionedProperties
name|srcBaseProps
init|=
name|srcArea
operator|.
name|getBaseProperties
argument_list|(
name|src
operator|.
name|getName
argument_list|()
argument_list|)
decl_stmt|;
name|SVNVersionedProperties
name|dstProps
init|=
name|dstArea
operator|.
name|getProperties
argument_list|(
name|dst
operator|.
name|getName
argument_list|()
argument_list|)
decl_stmt|;
name|SVNVersionedProperties
name|dstBaseProps
init|=
name|dstArea
operator|.
name|getBaseProperties
argument_list|(
name|dst
operator|.
name|getName
argument_list|()
argument_list|)
decl_stmt|;
name|dstProps
operator|.
name|removeAll
argument_list|()
expr_stmt|;
name|dstBaseProps
operator|.
name|removeAll
argument_list|()
expr_stmt|;
name|srcProps
operator|.
name|copyTo
argument_list|(
name|dstProps
argument_list|)
expr_stmt|;
name|srcBaseProps
operator|.
name|copyTo
argument_list|(
name|dstBaseProps
argument_list|)
expr_stmt|;
name|dstEntry
operator|=
name|dstArea
operator|.
name|addEntry
argument_list|(
name|dst
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
name|dstEntry
operator|.
name|setCopyFromURL
argument_list|(
name|cfURL
argument_list|)
expr_stmt|;
name|dstEntry
operator|.
name|setCopyFromRevision
argument_list|(
name|cfRevision
argument_list|)
expr_stmt|;
name|dstEntry
operator|.
name|setCopied
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|dstEntry
operator|.
name|setKind
argument_list|(
name|SVNNodeKind
operator|.
name|FILE
argument_list|)
expr_stmt|;
name|File
name|baseSrc
init|=
name|srcArea
operator|.
name|getBaseFile
argument_list|(
name|src
operator|.
name|getName
argument_list|()
argument_list|,
literal|false
argument_list|)
decl_stmt|;
name|File
name|baseDst
init|=
name|dstArea
operator|.
name|getBaseFile
argument_list|(
name|dst
operator|.
name|getName
argument_list|()
argument_list|,
literal|false
argument_list|)
decl_stmt|;
name|SVNFileUtil
operator|.
name|copyFile
argument_list|(
name|baseSrc
argument_list|,
name|baseDst
argument_list|,
literal|false
argument_list|)
expr_stmt|;
if|if
condition|(
name|dstEntry
operator|.
name|isScheduledForDeletion
argument_list|()
condition|)
block|{
name|dstEntry
operator|.
name|unschedule
argument_list|()
expr_stmt|;
name|dstEntry
operator|.
name|scheduleForReplacement
argument_list|()
expr_stmt|;
block|}
if|else if
condition|(
operator|!
name|dstEntry
operator|.
name|isScheduledForReplacement
argument_list|()
condition|)
block|{
name|dstEntry
operator|.
name|unschedule
argument_list|()
expr_stmt|;
name|dstEntry
operator|.
name|scheduleForAddition
argument_list|()
expr_stmt|;
block|}
name|dstArea
operator|.
name|saveEntries
argument_list|(
literal|false
argument_list|)
expr_stmt|;
name|SVNLog
name|log
init|=
name|dstArea
operator|.
name|getLog
argument_list|()
decl_stmt|;
name|dstArea
operator|.
name|saveVersionedProperties
argument_list|(
name|log
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|log
operator|.
name|save
argument_list|()
expr_stmt|;
name|dstArea
operator|.
name|runLogs
argument_list|()
expr_stmt|;
name|SVNEvent
name|event
init|=
name|SVNEventFactory
operator|.
name|createSVNEvent
argument_list|(
name|dst
argument_list|,
name|SVNNodeKind
operator|.
name|FILE
argument_list|,
literal|null
argument_list|,
name|SVNRepository
operator|.
name|INVALID_REVISION
argument_list|,
name|SVNEventAction
operator|.
name|ADD
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|)
decl_stmt|;
name|dispatchEvent
argument_list|(
name|event
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
name|srcAccess
operator|.
name|close
argument_list|()
expr_stmt|;
name|dstAccess
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
if|if
condition|(
name|move
condition|)
block|{
name|myWCClient
operator|.
name|doDelete
argument_list|(
name|src
argument_list|,
literal|true
argument_list|,
literal|false
argument_list|)
expr_stmt|;
block|}
block|}
specifier|private
name|void
name|updateCopiedDirectory
parameter_list|(
name|SVNAdminArea
name|dir
parameter_list|,
name|String
name|name
parameter_list|,
name|String
name|newURL
parameter_list|,
name|String
name|reposRootURL
parameter_list|,
name|String
name|copyFromURL
parameter_list|,
name|long
name|copyFromRevision
parameter_list|)
throws|throws
name|SVNException
block|{
name|SVNWCAccess
name|wcAccess
init|=
name|dir
operator|.
name|getWCAccess
argument_list|()
decl_stmt|;
name|SVNEntry
name|entry
init|=
name|dir
operator|.
name|getEntry
argument_list|(
name|name
argument_list|,
literal|true
argument_list|)
decl_stmt|;
if|if
condition|(
name|entry
operator|!=
literal|null
condition|)
block|{
name|entry
operator|.
name|setCopied
argument_list|(
literal|true
argument_list|)
expr_stmt|;
if|if
condition|(
name|newURL
operator|!=
literal|null
condition|)
block|{
name|entry
operator|.
name|setURL
argument_list|(
name|newURL
argument_list|)
expr_stmt|;
block|}
name|entry
operator|.
name|setRepositoryRoot
argument_list|(
name|reposRootURL
argument_list|)
expr_stmt|;
if|if
condition|(
name|entry
operator|.
name|isFile
argument_list|()
condition|)
block|{
if|if
condition|(
name|dir
operator|.
name|getWCProperties
argument_list|(
name|name
argument_list|)
operator|!=
literal|null
condition|)
block|{
name|dir
operator|.
name|getWCProperties
argument_list|(
name|name
argument_list|)
operator|.
name|removeAll
argument_list|()
expr_stmt|;
name|dir
operator|.
name|saveWCProperties
argument_list|(
literal|false
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|copyFromURL
operator|!=
literal|null
condition|)
block|{
name|entry
operator|.
name|setCopyFromURL
argument_list|(
name|copyFromURL
argument_list|)
expr_stmt|;
name|entry
operator|.
name|setCopyFromRevision
argument_list|(
name|copyFromRevision
argument_list|)
expr_stmt|;
block|}
block|}
name|boolean
name|deleted
init|=
literal|false
decl_stmt|;
if|if
condition|(
name|entry
operator|.
name|isDeleted
argument_list|()
operator|&&
name|newURL
operator|!=
literal|null
condition|)
block|{
comment|// convert to scheduled for deletion.
name|deleted
operator|=
literal|true
expr_stmt|;
name|entry
operator|.
name|setDeleted
argument_list|(
literal|false
argument_list|)
expr_stmt|;
name|entry
operator|.
name|scheduleForDeletion
argument_list|()
expr_stmt|;
if|if
condition|(
name|entry
operator|.
name|isDirectory
argument_list|()
condition|)
block|{
name|entry
operator|.
name|setKind
argument_list|(
name|SVNNodeKind
operator|.
name|FILE
argument_list|)
expr_stmt|;
block|}
block|}
if|if
condition|(
name|entry
operator|.
name|getLockToken
argument_list|()
operator|!=
literal|null
operator|&&
name|newURL
operator|!=
literal|null
condition|)
block|{
name|entry
operator|.
name|setLockToken
argument_list|(
literal|null
argument_list|)
expr_stmt|;
name|entry
operator|.
name|setLockOwner
argument_list|(
literal|null
argument_list|)
expr_stmt|;
name|entry
operator|.
name|setLockComment
argument_list|(
literal|null
argument_list|)
expr_stmt|;
name|entry
operator|.
name|setLockCreationDate
argument_list|(
literal|null
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
operator|!
name|dir
operator|.
name|getThisDirName
argument_list|()
operator|.
name|equals
argument_list|(
name|name
argument_list|)
operator|&&
name|entry
operator|.
name|isDirectory
argument_list|()
operator|&&
operator|!
name|deleted
condition|)
block|{
name|SVNAdminArea
name|childDir
init|=
name|wcAccess
operator|.
name|retrieve
argument_list|(
name|dir
operator|.
name|getFile
argument_list|(
name|name
argument_list|)
argument_list|)
decl_stmt|;
if|if
condition|(
name|childDir
operator|!=
literal|null
condition|)
block|{
name|String
name|childCopyFromURL
init|=
name|copyFromURL
operator|==
literal|null
condition|?
literal|null
else|:
name|SVNPathUtil
operator|.
name|append
argument_list|(
name|copyFromURL
argument_list|,
name|SVNEncodingUtil
operator|.
name|uriEncode
argument_list|(
name|entry
operator|.
name|getName
argument_list|()
argument_list|)
argument_list|)
decl_stmt|;
name|updateCopiedDirectory
argument_list|(
name|childDir
argument_list|,
name|childDir
operator|.
name|getThisDirName
argument_list|()
argument_list|,
name|newURL
argument_list|,
name|reposRootURL
argument_list|,
name|childCopyFromURL
argument_list|,
name|copyFromRevision
argument_list|)
expr_stmt|;
block|}
block|}
if|else if
condition|(
name|dir
operator|.
name|getThisDirName
argument_list|()
operator|.
name|equals
argument_list|(
name|name
argument_list|)
condition|)
block|{
name|dir
operator|.
name|getWCProperties
argument_list|(
name|dir
operator|.
name|getThisDirName
argument_list|()
argument_list|)
operator|.
name|removeAll
argument_list|()
expr_stmt|;
name|dir
operator|.
name|saveWCProperties
argument_list|(
literal|false
argument_list|)
expr_stmt|;
if|if
condition|(
name|copyFromURL
operator|!=
literal|null
condition|)
block|{
name|entry
operator|.
name|setCopyFromURL
argument_list|(
name|copyFromURL
argument_list|)
expr_stmt|;
name|entry
operator|.
name|setCopyFromRevision
argument_list|(
name|copyFromRevision
argument_list|)
expr_stmt|;
block|}
for|for
control|(
name|Iterator
name|ents
init|=
name|dir
operator|.
name|entries
argument_list|(
literal|true
argument_list|)
init|;
name|ents
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|SVNEntry
name|childEntry
init|=
operator|(
name|SVNEntry
operator|)
name|ents
operator|.
name|next
argument_list|()
decl_stmt|;
if|if
condition|(
name|dir
operator|.
name|getThisDirName
argument_list|()
operator|.
name|equals
argument_list|(
name|childEntry
operator|.
name|getName
argument_list|()
argument_list|)
condition|)
block|{
continue|continue;
block|}
name|String
name|childCopyFromURL
init|=
name|copyFromURL
operator|==
literal|null
condition|?
literal|null
else|:
name|SVNPathUtil
operator|.
name|append
argument_list|(
name|copyFromURL
argument_list|,
name|SVNEncodingUtil
operator|.
name|uriEncode
argument_list|(
name|childEntry
operator|.
name|getName
argument_list|()
argument_list|)
argument_list|)
decl_stmt|;
name|String
name|newChildURL
init|=
name|newURL
operator|==
literal|null
condition|?
literal|null
else|:
name|SVNPathUtil
operator|.
name|append
argument_list|(
name|newURL
argument_list|,
name|SVNEncodingUtil
operator|.
name|uriEncode
argument_list|(
name|childEntry
operator|.
name|getName
argument_list|()
argument_list|)
argument_list|)
decl_stmt|;
name|updateCopiedDirectory
argument_list|(
name|dir
argument_list|,
name|childEntry
operator|.
name|getName
argument_list|()
argument_list|,
name|newChildURL
argument_list|,
name|reposRootURL
argument_list|,
name|childCopyFromURL
argument_list|,
name|copyFromRevision
argument_list|)
expr_stmt|;
block|}
name|dir
operator|.
name|saveEntries
argument_list|(
literal|false
argument_list|)
expr_stmt|;
block|}
block|}
block|}
specifier|private
name|String
name|getCopyFromURL
parameter_list|(
name|File
name|path
parameter_list|,
name|String
name|urlTail
parameter_list|)
throws|throws
name|SVNException
block|{
if|if
condition|(
name|path
operator|==
literal|null
condition|)
block|{
return|return
literal|null
return|;
block|}
name|SVNWCAccess
name|wcAccess
init|=
name|createWCAccess
argument_list|()
decl_stmt|;
try|try
block|{
name|wcAccess
operator|.
name|probeOpen
argument_list|(
name|path
argument_list|,
literal|false
argument_list|,
literal|0
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|SVNException
name|e
parameter_list|)
block|{
name|wcAccess
operator|.
name|close
argument_list|()
expr_stmt|;
return|return
literal|null
return|;
block|}
comment|// urlTail is either name of an entry
try|try
block|{
name|SVNEntry
name|entry
init|=
name|wcAccess
operator|.
name|getEntry
argument_list|(
name|path
argument_list|,
literal|false
argument_list|)
decl_stmt|;
if|if
condition|(
name|entry
operator|==
literal|null
condition|)
block|{
return|return
literal|null
return|;
block|}
name|String
name|cfURL
init|=
name|entry
operator|.
name|getCopyFromURL
argument_list|()
decl_stmt|;
if|if
condition|(
name|cfURL
operator|!=
literal|null
condition|)
block|{
return|return
name|SVNPathUtil
operator|.
name|append
argument_list|(
name|cfURL
argument_list|,
name|urlTail
argument_list|)
return|;
block|}
name|urlTail
operator|=
name|SVNPathUtil
operator|.
name|append
argument_list|(
name|SVNEncodingUtil
operator|.
name|uriEncode
argument_list|(
name|path
operator|.
name|getName
argument_list|()
argument_list|)
argument_list|,
name|urlTail
argument_list|)
expr_stmt|;
name|path
operator|=
name|path
operator|.
name|getParentFile
argument_list|()
expr_stmt|;
return|return
name|getCopyFromURL
argument_list|(
name|path
argument_list|,
name|urlTail
argument_list|)
return|;
block|}
finally|finally
block|{
name|wcAccess
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
block|}
specifier|private
name|long
name|getCopyFromRevision
parameter_list|(
name|File
name|path
parameter_list|)
throws|throws
name|SVNException
block|{
if|if
condition|(
name|path
operator|==
literal|null
condition|)
block|{
return|return
operator|-
literal|1
return|;
block|}
name|SVNWCAccess
name|wcAccess
init|=
name|createWCAccess
argument_list|()
decl_stmt|;
try|try
block|{
name|wcAccess
operator|.
name|probeOpen
argument_list|(
name|path
argument_list|,
literal|false
argument_list|,
literal|0
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|SVNException
name|e
parameter_list|)
block|{
name|wcAccess
operator|.
name|close
argument_list|()
expr_stmt|;
return|return
operator|-
literal|1
return|;
block|}
try|try
block|{
name|SVNEntry
name|entry
init|=
name|wcAccess
operator|.
name|getEntry
argument_list|(
name|path
argument_list|,
literal|false
argument_list|)
decl_stmt|;
if|if
condition|(
name|entry
operator|==
literal|null
condition|)
block|{
return|return
operator|-
literal|1
return|;
block|}
name|long
name|rev
init|=
name|entry
operator|.
name|getCopyFromRevision
argument_list|()
decl_stmt|;
if|if
condition|(
name|rev
operator|>=
literal|0
condition|)
block|{
return|return
name|rev
return|;
block|}
name|path
operator|=
name|path
operator|.
name|getParentFile
argument_list|()
expr_stmt|;
return|return
name|getCopyFromRevision
argument_list|(
name|path
argument_list|)
return|;
block|}
finally|finally
block|{
name|wcAccess
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
block|}
specifier|private
specifier|static
name|boolean
name|isVersionedFile
parameter_list|(
name|File
name|file
parameter_list|)
block|{
name|SVNWCAccess
name|wcAccess
init|=
name|SVNWCAccess
operator|.
name|newInstance
argument_list|(
literal|null
argument_list|)
decl_stmt|;
try|try
block|{
name|SVNAdminArea
name|area
init|=
name|wcAccess
operator|.
name|probeOpen
argument_list|(
name|file
argument_list|,
literal|false
argument_list|,
literal|0
argument_list|)
decl_stmt|;
if|if
condition|(
name|area
operator|.
name|getEntry
argument_list|(
name|area
operator|.
name|getThisDirName
argument_list|()
argument_list|,
literal|false
argument_list|)
operator|==
literal|null
condition|)
block|{
return|return
literal|false
return|;
block|}
name|SVNFileType
name|type
init|=
name|SVNFileType
operator|.
name|getType
argument_list|(
name|file
argument_list|)
decl_stmt|;
if|if
condition|(
name|type
operator|.
name|isFile
argument_list|()
operator|||
name|type
operator|==
name|SVNFileType
operator|.
name|NONE
condition|)
block|{
comment|// file or missing file
return|return
name|area
operator|.
name|getEntry
argument_list|(
name|file
operator|.
name|getName
argument_list|()
argument_list|,
literal|false
argument_list|)
operator|!=
literal|null
return|;
block|}
if|else if
condition|(
name|type
operator|!=
name|SVNFileType
operator|.
name|NONE
operator|&&
operator|!
name|area
operator|.
name|getRoot
argument_list|()
operator|.
name|equals
argument_list|(
name|file
argument_list|)
condition|)
block|{
comment|// directory, but not anchor. always considered unversioned.
return|return
literal|false
return|;
block|}
return|return
literal|true
return|;
block|}
catch|catch
parameter_list|(
name|SVNException
name|e
parameter_list|)
block|{
return|return
literal|false
return|;
block|}
finally|finally
block|{
try|try
block|{
name|wcAccess
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|SVNException
name|svne
parameter_list|)
block|{
comment|//
block|}
block|}
block|}
block|}
end_class

end_unit

