begin_unit|revision:1.0.0;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * ====================================================================  * Copyright (c) 2004-2010 TMate Software Ltd.  All rights reserved.  *  * This software is licensed as described in the file COPYING, which  * you should have received as part of this distribution.  The terms  * are also available at http://svnkit.com/license.html  * If newer versions of this license are posted there, you may use a  * newer version instead, at your option.  * ====================================================================  */
end_comment

begin_package
package|package
name|org
operator|.
name|exist
operator|.
name|versioning
operator|.
name|svn
operator|.
name|wc
operator|.
name|xml
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|File
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|versioning
operator|.
name|svn
operator|.
name|Resource
import|;
end_import

begin_import
import|import
name|org
operator|.
name|tmatesoft
operator|.
name|svn
operator|.
name|core
operator|.
name|SVNErrorCode
import|;
end_import

begin_import
import|import
name|org
operator|.
name|tmatesoft
operator|.
name|svn
operator|.
name|core
operator|.
name|SVNErrorMessage
import|;
end_import

begin_import
import|import
name|org
operator|.
name|tmatesoft
operator|.
name|svn
operator|.
name|core
operator|.
name|SVNException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|tmatesoft
operator|.
name|svn
operator|.
name|core
operator|.
name|SVNLock
import|;
end_import

begin_import
import|import
name|org
operator|.
name|tmatesoft
operator|.
name|svn
operator|.
name|core
operator|.
name|SVNURL
import|;
end_import

begin_import
import|import
name|org
operator|.
name|tmatesoft
operator|.
name|svn
operator|.
name|core
operator|.
name|internal
operator|.
name|util
operator|.
name|SVNDate
import|;
end_import

begin_import
import|import
name|org
operator|.
name|tmatesoft
operator|.
name|svn
operator|.
name|core
operator|.
name|internal
operator|.
name|wc
operator|.
name|SVNErrorManager
import|;
end_import

begin_import
import|import
name|org
operator|.
name|tmatesoft
operator|.
name|svn
operator|.
name|core
operator|.
name|wc
operator|.
name|ISVNInfoHandler
import|;
end_import

begin_import
import|import
name|org
operator|.
name|tmatesoft
operator|.
name|svn
operator|.
name|core
operator|.
name|wc
operator|.
name|SVNInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|tmatesoft
operator|.
name|svn
operator|.
name|util
operator|.
name|ISVNDebugLog
import|;
end_import

begin_import
import|import
name|org
operator|.
name|tmatesoft
operator|.
name|svn
operator|.
name|util
operator|.
name|SVNLogType
import|;
end_import

begin_import
import|import
name|org
operator|.
name|xml
operator|.
name|sax
operator|.
name|ContentHandler
import|;
end_import

begin_import
import|import
name|org
operator|.
name|xml
operator|.
name|sax
operator|.
name|SAXException
import|;
end_import

begin_comment
comment|/**  * @version 1.3  * @author  TMate Software Ltd.  * @since   1.2  */
end_comment

begin_class
specifier|public
class|class
name|SVNXMLInfoHandler
extends|extends
name|AbstractXMLHandler
implements|implements
name|ISVNInfoHandler
block|{
specifier|private
specifier|static
specifier|final
name|String
name|INFO_TAG
init|=
literal|"info"
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|String
name|ENTRY_TAG
init|=
literal|"entry"
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|String
name|REVISION_ATTR
init|=
literal|"revision"
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|String
name|PATH_ATTR
init|=
literal|"path"
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|String
name|KIND_ATTR
init|=
literal|"kind"
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|String
name|URL_TAG
init|=
literal|"url"
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|String
name|REPOSITORY_TAG
init|=
literal|"repository"
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|String
name|UUID_TAG
init|=
literal|"uuid"
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|String
name|ROOT_TAG
init|=
literal|"root"
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|String
name|WC_INFO_TAG
init|=
literal|"wc-info"
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|String
name|SCHEDULE_TAG
init|=
literal|"schedule"
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|String
name|COPY_FROM_URL_TAG
init|=
literal|"copy-from-url"
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|String
name|COPY_FROM_REVISION_TAG
init|=
literal|"copy-from-rev"
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|String
name|CHECKSUM_TAG
init|=
literal|"checksum"
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|String
name|TEXT_TIME_TAG
init|=
literal|"text-update"
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|String
name|PROP_TIME_TAG
init|=
literal|"prop-updated"
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|String
name|COMMIT_TAG
init|=
literal|"commit"
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|String
name|AUTHOR_TAG
init|=
literal|"author"
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|String
name|DATE_TAG
init|=
literal|"date"
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|String
name|CONFLICT_TAG
init|=
literal|"conflict"
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|String
name|OLD_CONFLICT_TAG
init|=
literal|"prev-base-file"
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|String
name|WRK_CONFLICT_TAG
init|=
literal|"prev-wc-file"
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|String
name|NEW_CONFLICT_TAG
init|=
literal|"cur-base-file"
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|String
name|PROP_CONFLICT_TAG
init|=
literal|"prop-file"
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|String
name|TOKEN_TAG
init|=
literal|"token"
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|String
name|OWNER_TAG
init|=
literal|"owner"
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|String
name|COMMENT_TAG
init|=
literal|"comment"
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|String
name|CREATED_TAG
init|=
literal|"created"
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|String
name|EXPIRES_TAG
init|=
literal|"expires"
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|String
name|LOCK_TAG
init|=
literal|"lock"
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|String
name|DEPTH_TAG
init|=
literal|"depth"
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|String
name|CHANGELIST_TAG
init|=
literal|"changelist"
decl_stmt|;
specifier|private
name|File
name|myTargetPath
decl_stmt|;
comment|/**      * Creates a new info handler.      *       * @param contentHandler a<b>ContentHandler</b> to form       *                       an XML tree      */
specifier|public
name|SVNXMLInfoHandler
parameter_list|(
name|ContentHandler
name|contentHandler
parameter_list|)
block|{
name|this
argument_list|(
name|contentHandler
argument_list|,
literal|null
argument_list|)
expr_stmt|;
block|}
comment|/**      * Creates a new info handler.      *       * @param contentHandler a<b>ContentHandler</b> to form       *                       an XML tree      * @param log            a debug logger      */
specifier|public
name|SVNXMLInfoHandler
parameter_list|(
name|ContentHandler
name|contentHandler
parameter_list|,
name|ISVNDebugLog
name|log
parameter_list|)
block|{
name|super
argument_list|(
name|contentHandler
argument_list|,
name|log
argument_list|)
expr_stmt|;
block|}
comment|/**      * Sets the target path what makes all paths be relative to this one.       *       * @param path target path      */
specifier|public
name|void
name|setTargetPath
parameter_list|(
name|File
name|path
parameter_list|)
block|{
name|myTargetPath
operator|=
name|path
expr_stmt|;
block|}
specifier|protected
name|String
name|getHeaderName
parameter_list|()
block|{
return|return
name|INFO_TAG
return|;
block|}
comment|/**      * Handles info producing corresponding xml.      *       * @param  info            info        * @throws SVNException       */
specifier|public
name|void
name|handleInfo
parameter_list|(
name|SVNInfo
name|info
parameter_list|)
throws|throws
name|SVNException
block|{
try|try
block|{
name|sendToHandler
argument_list|(
name|info
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|SAXException
name|e
parameter_list|)
block|{
name|getDebugLog
argument_list|()
operator|.
name|logSevere
argument_list|(
name|SVNLogType
operator|.
name|DEFAULT
argument_list|,
name|e
argument_list|)
expr_stmt|;
name|SVNErrorMessage
name|err
init|=
name|SVNErrorMessage
operator|.
name|create
argument_list|(
name|SVNErrorCode
operator|.
name|XML_MALFORMED
argument_list|,
name|e
operator|.
name|getMessage
argument_list|()
argument_list|)
decl_stmt|;
name|SVNErrorManager
operator|.
name|error
argument_list|(
name|err
argument_list|,
name|e
argument_list|,
name|SVNLogType
operator|.
name|DEFAULT
argument_list|)
expr_stmt|;
block|}
block|}
specifier|private
name|void
name|sendToHandler
parameter_list|(
name|SVNInfo
name|info
parameter_list|)
throws|throws
name|SAXException
block|{
name|addAttribute
argument_list|(
name|KIND_ATTR
argument_list|,
name|info
operator|.
name|getKind
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|info
operator|.
name|getFile
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|addAttribute
argument_list|(
name|PATH_ATTR
argument_list|,
name|getRelativePath
argument_list|(
name|info
operator|.
name|getFile
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
if|else if
condition|(
name|info
operator|.
name|getPath
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|addAttribute
argument_list|(
name|PATH_ATTR
argument_list|,
name|info
operator|.
name|getPath
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|addAttribute
argument_list|(
name|REVISION_ATTR
argument_list|,
name|info
operator|.
name|getRevision
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|openTag
argument_list|(
name|ENTRY_TAG
argument_list|)
expr_stmt|;
if|if
condition|(
name|info
operator|.
name|getURL
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|addTag
argument_list|(
name|URL_TAG
argument_list|,
name|info
operator|.
name|getURL
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|SVNURL
name|rootURL
init|=
name|info
operator|.
name|getRepositoryRootURL
argument_list|()
decl_stmt|;
name|String
name|uuid
init|=
name|info
operator|.
name|getRepositoryUUID
argument_list|()
decl_stmt|;
if|if
condition|(
name|rootURL
operator|!=
literal|null
operator|||
name|uuid
operator|!=
literal|null
condition|)
block|{
name|openTag
argument_list|(
name|REPOSITORY_TAG
argument_list|)
expr_stmt|;
if|if
condition|(
name|rootURL
operator|!=
literal|null
condition|)
block|{
name|addTag
argument_list|(
name|ROOT_TAG
argument_list|,
name|rootURL
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|uuid
operator|!=
literal|null
condition|)
block|{
name|addTag
argument_list|(
name|UUID_TAG
argument_list|,
name|uuid
argument_list|)
expr_stmt|;
block|}
name|closeTag
argument_list|(
name|REPOSITORY_TAG
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|info
operator|.
name|getFile
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|openTag
argument_list|(
name|WC_INFO_TAG
argument_list|)
expr_stmt|;
name|String
name|schedule
init|=
name|info
operator|.
name|getSchedule
argument_list|()
decl_stmt|;
if|if
condition|(
name|schedule
operator|==
literal|null
operator|||
literal|""
operator|.
name|equals
argument_list|(
name|schedule
argument_list|)
condition|)
block|{
name|schedule
operator|=
literal|"normal"
expr_stmt|;
block|}
name|addTag
argument_list|(
name|SCHEDULE_TAG
argument_list|,
name|schedule
argument_list|)
expr_stmt|;
if|if
condition|(
name|info
operator|.
name|getDepth
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|addTag
argument_list|(
name|DEPTH_TAG
argument_list|,
name|info
operator|.
name|getDepth
argument_list|()
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|info
operator|.
name|getCopyFromURL
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|addTag
argument_list|(
name|COPY_FROM_URL_TAG
argument_list|,
name|info
operator|.
name|getCopyFromURL
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|info
operator|.
name|getCopyFromRevision
argument_list|()
operator|!=
literal|null
operator|&&
name|info
operator|.
name|getCopyFromRevision
argument_list|()
operator|.
name|isValid
argument_list|()
condition|)
block|{
name|addTag
argument_list|(
name|COPY_FROM_REVISION_TAG
argument_list|,
name|info
operator|.
name|getCopyFromRevision
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|info
operator|.
name|getTextTime
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|addTag
argument_list|(
name|TEXT_TIME_TAG
argument_list|,
name|SVNDate
operator|.
name|formatDate
argument_list|(
name|info
operator|.
name|getTextTime
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|info
operator|.
name|getPropTime
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|addTag
argument_list|(
name|PROP_TIME_TAG
argument_list|,
name|SVNDate
operator|.
name|formatDate
argument_list|(
name|info
operator|.
name|getPropTime
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|info
operator|.
name|getChecksum
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|addTag
argument_list|(
name|CHECKSUM_TAG
argument_list|,
name|info
operator|.
name|getChecksum
argument_list|()
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|info
operator|.
name|getChangelistName
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|addTag
argument_list|(
name|CHANGELIST_TAG
argument_list|,
name|info
operator|.
name|getChangelistName
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|closeTag
argument_list|(
name|WC_INFO_TAG
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|info
operator|.
name|getAuthor
argument_list|()
operator|!=
literal|null
operator|||
name|info
operator|.
name|getCommittedRevision
argument_list|()
operator|.
name|isValid
argument_list|()
operator|||
name|info
operator|.
name|getCommittedDate
argument_list|()
operator|!=
literal|null
condition|)
block|{
if|if
condition|(
name|info
operator|.
name|getCommittedRevision
argument_list|()
operator|.
name|isValid
argument_list|()
condition|)
block|{
name|addAttribute
argument_list|(
name|REVISION_ATTR
argument_list|,
name|info
operator|.
name|getCommittedRevision
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|openTag
argument_list|(
name|COMMIT_TAG
argument_list|)
expr_stmt|;
name|addTag
argument_list|(
name|AUTHOR_TAG
argument_list|,
name|info
operator|.
name|getAuthor
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|info
operator|.
name|getCommittedDate
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|addTag
argument_list|(
name|DATE_TAG
argument_list|,
name|SVNDate
operator|.
name|formatDate
argument_list|(
name|info
operator|.
name|getCommittedDate
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|closeTag
argument_list|(
name|COMMIT_TAG
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|info
operator|.
name|getConflictNewFile
argument_list|()
operator|!=
literal|null
operator|||
name|info
operator|.
name|getConflictOldFile
argument_list|()
operator|!=
literal|null
operator|||
name|info
operator|.
name|getConflictWrkFile
argument_list|()
operator|!=
literal|null
operator|||
name|info
operator|.
name|getPropConflictFile
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|openTag
argument_list|(
name|CONFLICT_TAG
argument_list|)
expr_stmt|;
if|if
condition|(
name|info
operator|.
name|getConflictOldFile
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|addTag
argument_list|(
name|OLD_CONFLICT_TAG
argument_list|,
name|info
operator|.
name|getConflictOldFile
argument_list|()
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|info
operator|.
name|getConflictWrkFile
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|addTag
argument_list|(
name|WRK_CONFLICT_TAG
argument_list|,
name|info
operator|.
name|getConflictWrkFile
argument_list|()
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|info
operator|.
name|getConflictNewFile
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|addTag
argument_list|(
name|NEW_CONFLICT_TAG
argument_list|,
name|info
operator|.
name|getConflictNewFile
argument_list|()
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|info
operator|.
name|getPropConflictFile
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|addTag
argument_list|(
name|PROP_CONFLICT_TAG
argument_list|,
name|info
operator|.
name|getPropConflictFile
argument_list|()
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|closeTag
argument_list|(
name|CONFLICT_TAG
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|info
operator|.
name|getLock
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|SVNLock
name|lock
init|=
name|info
operator|.
name|getLock
argument_list|()
decl_stmt|;
name|openTag
argument_list|(
name|LOCK_TAG
argument_list|)
expr_stmt|;
if|if
condition|(
name|lock
operator|.
name|getID
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|addTag
argument_list|(
name|TOKEN_TAG
argument_list|,
name|lock
operator|.
name|getID
argument_list|()
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|lock
operator|.
name|getOwner
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|addTag
argument_list|(
name|OWNER_TAG
argument_list|,
name|lock
operator|.
name|getOwner
argument_list|()
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|lock
operator|.
name|getComment
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|addTag
argument_list|(
name|COMMENT_TAG
argument_list|,
name|lock
operator|.
name|getComment
argument_list|()
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|lock
operator|.
name|getCreationDate
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|addTag
argument_list|(
name|CREATED_TAG
argument_list|,
name|SVNDate
operator|.
name|formatDate
argument_list|(
name|lock
operator|.
name|getCreationDate
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|lock
operator|.
name|getExpirationDate
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|addTag
argument_list|(
name|EXPIRES_TAG
argument_list|,
name|SVNDate
operator|.
name|formatDate
argument_list|(
name|lock
operator|.
name|getExpirationDate
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|closeTag
argument_list|(
name|LOCK_TAG
argument_list|)
expr_stmt|;
block|}
name|closeTag
argument_list|(
name|ENTRY_TAG
argument_list|)
expr_stmt|;
block|}
specifier|protected
name|String
name|getRelativePath
parameter_list|(
name|File
name|path
parameter_list|)
block|{
name|String
name|fullPath
init|=
name|path
operator|.
name|getAbsoluteFile
argument_list|()
operator|.
name|getAbsolutePath
argument_list|()
decl_stmt|;
if|if
condition|(
name|myTargetPath
operator|==
literal|null
condition|)
block|{
return|return
name|fullPath
return|;
block|}
name|StringBuffer
name|relativePath
init|=
operator|new
name|StringBuffer
argument_list|()
decl_stmt|;
comment|// collect path till target is met, then prepend target.
name|char
name|pathSeparator
init|=
name|Resource
operator|.
name|separatorChar
decl_stmt|;
name|boolean
name|targetMeet
init|=
literal|false
decl_stmt|;
if|if
condition|(
operator|!
name|path
operator|.
name|getAbsoluteFile
argument_list|()
operator|.
name|equals
argument_list|(
name|myTargetPath
operator|.
name|getAbsoluteFile
argument_list|()
argument_list|)
condition|)
block|{
do|do
block|{
if|if
condition|(
name|relativePath
operator|.
name|length
argument_list|()
operator|>
literal|0
condition|)
block|{
name|relativePath
operator|.
name|insert
argument_list|(
literal|0
argument_list|,
name|pathSeparator
argument_list|)
expr_stmt|;
block|}
name|relativePath
operator|=
name|relativePath
operator|.
name|insert
argument_list|(
literal|0
argument_list|,
name|path
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
name|path
operator|=
name|path
operator|.
name|getParentFile
argument_list|()
expr_stmt|;
if|if
condition|(
name|path
operator|!=
literal|null
condition|)
block|{
name|targetMeet
operator|=
name|path
operator|.
name|getAbsoluteFile
argument_list|()
operator|.
name|equals
argument_list|(
name|myTargetPath
operator|.
name|getAbsoluteFile
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
do|while
condition|(
name|path
operator|!=
literal|null
operator|&&
operator|!
name|targetMeet
condition|)
do|;
block|}
else|else
block|{
return|return
name|myTargetPath
operator|.
name|getPath
argument_list|()
return|;
block|}
if|if
condition|(
name|path
operator|!=
literal|null
condition|)
block|{
if|if
condition|(
name|relativePath
operator|.
name|length
argument_list|()
operator|>
literal|0
condition|)
block|{
name|relativePath
operator|.
name|insert
argument_list|(
literal|0
argument_list|,
name|pathSeparator
argument_list|)
expr_stmt|;
block|}
name|relativePath
operator|=
name|relativePath
operator|.
name|insert
argument_list|(
literal|0
argument_list|,
name|myTargetPath
operator|.
name|getPath
argument_list|()
argument_list|)
expr_stmt|;
block|}
else|else
block|{
return|return
name|fullPath
return|;
block|}
return|return
name|relativePath
operator|.
name|toString
argument_list|()
return|;
block|}
specifier|protected
name|String
name|getTargetPath
parameter_list|()
block|{
return|return
name|getRelativePath
argument_list|(
name|myTargetPath
argument_list|)
return|;
block|}
block|}
end_class

end_unit

