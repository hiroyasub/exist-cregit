begin_unit|revision:1.0.0;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * ====================================================================  * Copyright (c) 2004-2010 TMate Software Ltd.  All rights reserved.  *  * This software is licensed as described in the file COPYING, which  * you should have received as part of this distribution.  The terms  * are also available at http://svnkit.com/license.html  * If newer versions of this license are posted there, you may use a  * newer version instead, at your option.  * ====================================================================  */
end_comment

begin_package
package|package
name|org
operator|.
name|exist
operator|.
name|versioning
operator|.
name|svn
operator|.
name|wc
package|;
end_package

begin_comment
comment|/**  *<b>SVNStatusType</b> provides information about versioned items'   * status type. This class contains a set of predefined constants each of that   * should be compared with a refrence to an<b>SVNStatusType</b> to find   * out the item's status type. That is done either in event handlers  * (implementing<b>ISVNEventHandler</b>) registered for<b>SVN</b>*<b>Client</b>  * objects like this:  *<pre class="javacode">  *<span class="javakeyword">import</span> org.tmatesoft.svn.core.wc.ISVNEventHandler;  *<span class="javakeyword">import</span> org.tmatesoft.svn.core.wc.SVNStatusType;  *<span class="javakeyword">import</span> org.tmatesoft.svn.core.wc.SVNEventAction;  * ...  *   *<span class="javakeyword">public class</span> MyCustomEventHandler<span class="javakeyword">implements</span> ISVNEventHandler {  *<span class="javakeyword">public void</span> handleEvent(SVNEvent event,<span class="javakeyword">double</span> progress){      *         ...  *           *<span class="javakeyword">if</span>(event.getAction() == SVNEventAction.UPDATE_UPDATE){  *<span class="javacomment">//get contents status type</span>  *            SVNStatusType contentsStatus = event.getContentsStatus();  *<span class="javacomment">//parse it</span>  *<span class="javakeyword">if</span>(contentsStatus != SVNStatusType.INAPPLICABLE){  *<span class="javakeyword">if</span>(contentsStatus == SVNStatusType.CONFLICTED){  *                    ...  *                }  *            }        *           *<span class="javacomment">//get properties status type</span>  *            SVNStatusType propertiesStatus = event.getPropertiesStatus();  *<span class="javacomment">//parse it</span>  *<span class="javakeyword">if</span>(propertiesStatus != SVNStatusType.INAPPLICABLE){  *<span class="javakeyword">if</span>(contentsStatus == SVNStatusType.CONFLICTED){  *                    ...  *                }  *            }  *         }  *         ...  *     }  *     ...  * }</pre>  *<br>  * or in a status handler (implementing<b>ISVNStatusHandler</b>) registered   * for an<b>SVNStatusClient</b> like this:  *<pre class="javacode">  *<span class="javakeyword">import</span> org.tmatesoft.svn.core.wc.ISVNStatusHandler;  *<span class="javakeyword">import</span> org.tmatesoft.svn.core.wc.SVNStatus;  *<span class="javakeyword">import</span> org.tmatesoft.svn.core.wc.SVNStatusType;  * ...  *   *<span class="javakeyword">public class</span> MyCustomStatusHandler<span class="javakeyword">implements</span> ISVNStatusHandler {  *<span class="javakeyword">public void</span> handleStatus(SVNStatus status){      *         ...  *           *<span class="javacomment">//get contents status type</span>  *         SVNStatusType contentsStatus = status.getContentsStatus();  *<span class="javacomment">//parse it</span>  *<span class="javakeyword">if</span>(contentsStatus == SVNStatusType.STATUS_MODIFIED){  *             ...  *         }<span class="javakeyword">else if</span>(contentsStatus == SVNStatusType.STATUS_CONFLICTED){  *             ...  *         }        *         ...  *<span class="javacomment">//get properties status type</span>  *         SVNStatusType propertiesStatus = status.getPropertiesStatus();  *<span class="javacomment">//parse it</span>  *<span class="javakeyword">if</span>(contentsStatus == SVNStatusType.STATUS_MODIFIED){  *             ...  *         }<span class="javakeyword">else if</span>(contentsStatus == SVNStatusType.STATUS_CONFLICTED){  *             ...  *         }  *         ...  *     }  *     ...  * }</pre>  *   * @version 1.3  * @author  TMate Software Ltd.  * @since   1.2  * @see     SVNEvent  * @see     SVNStatus  */
end_comment

begin_class
specifier|public
class|class
name|SVNStatusType
block|{
specifier|private
name|int
name|myID
decl_stmt|;
specifier|private
name|String
name|myName
decl_stmt|;
specifier|private
name|char
name|myCode
decl_stmt|;
specifier|private
name|SVNStatusType
parameter_list|(
name|int
name|id
parameter_list|,
name|String
name|name
parameter_list|)
block|{
name|this
argument_list|(
name|id
argument_list|,
name|name
argument_list|,
literal|' '
argument_list|)
expr_stmt|;
block|}
specifier|private
name|SVNStatusType
parameter_list|(
name|int
name|id
parameter_list|,
name|String
name|name
parameter_list|,
name|char
name|code
parameter_list|)
block|{
name|myID
operator|=
name|id
expr_stmt|;
name|myName
operator|=
name|name
expr_stmt|;
name|myCode
operator|=
name|code
expr_stmt|;
block|}
comment|/**      * Returns this object's identifier as an integer nbumber.      * Each constant field of the<b>SVNStatusType</b> class is also an       *<b>SVNStatusType</b> object with its own id.       *       * @return id of this object       */
specifier|public
name|int
name|getID
parameter_list|()
block|{
return|return
name|myID
return|;
block|}
comment|/**      * Returns id of this object.       *       * @return id code      */
specifier|public
name|char
name|getCode
parameter_list|()
block|{
return|return
name|myCode
return|;
block|}
comment|/**      * Returns a string representation of this object. As a matter of fact      * this is a string representation of this object's id.      *       * @return a string representing this object      */
specifier|public
name|String
name|toString
parameter_list|()
block|{
return|return
name|myName
operator|==
literal|null
condition|?
name|Integer
operator|.
name|toString
argument_list|(
name|myID
argument_list|)
else|:
name|myName
return|;
block|}
comment|/**      * During some operations denotes that status info of item contents or      * properties is inapplicable. For example, this takes place during a       * commit operation - if there is any {@link ISVNEventHandler} registered      * for an {@link SVNCommitClient} then events that are dispatched to that event       * handler will have contents and properties status types set to<i>INAPPLICABLE</i>:      *<pre class="javacode">      *<span class="javakeyword">public class</span> MyCommitEventHandler<span class="javakeyword">implements</span> ISVNEventHandler{      * ...          *           *<span class="javakeyword">public void</span> handleEvent(SVNEvent event,<span class="javakeyword">double</span> progress){      *<span class="javacomment">//both are SVNStatusType.INAPPLICABLE</span>      *         SVNStatusType contentsStatus = event.getContentsStatus();      *         SVNStatusType propsStatus = event.getPropertiesStatus();      *     }      * ...      * }</pre>       *        */
specifier|public
specifier|static
specifier|final
name|SVNStatusType
name|INAPPLICABLE
init|=
operator|new
name|SVNStatusType
argument_list|(
literal|0
argument_list|,
literal|"inapplicable"
argument_list|)
decl_stmt|;
comment|/**      * Denotes that the resultant status of the operation is for some      * reason unknown.      */
specifier|public
specifier|static
specifier|final
name|SVNStatusType
name|UNKNOWN
init|=
operator|new
name|SVNStatusType
argument_list|(
literal|1
argument_list|,
literal|"unknown"
argument_list|)
decl_stmt|;
comment|/**      * During an operation denotes that file item contents or file/directory      * item properties are not changed.  For example, in a Working Copy-to-URL copying.      */
specifier|public
specifier|static
specifier|final
name|SVNStatusType
name|UNCHANGED
init|=
operator|new
name|SVNStatusType
argument_list|(
literal|2
argument_list|,
literal|"unchanged"
argument_list|)
decl_stmt|;
comment|/**      * Denotes that the item is versioned but missing (deleted from the       * fylesystem).      */
specifier|public
specifier|static
specifier|final
name|SVNStatusType
name|MISSING
init|=
operator|new
name|SVNStatusType
argument_list|(
literal|3
argument_list|,
literal|"missing"
argument_list|)
decl_stmt|;
comment|/**      * Denotes that the item has an unexpected kind or somehow damaged or      * can not be managed by an operation.      */
specifier|public
specifier|static
specifier|final
name|SVNStatusType
name|OBSTRUCTED
init|=
operator|new
name|SVNStatusType
argument_list|(
literal|4
argument_list|,
literal|"obstructed"
argument_list|)
decl_stmt|;
comment|/**      * During an operation (like an update) denotes that the item contents      * or item properties were changed.      */
specifier|public
specifier|static
specifier|final
name|SVNStatusType
name|CHANGED
init|=
operator|new
name|SVNStatusType
argument_list|(
literal|5
argument_list|,
literal|"changed"
argument_list|)
decl_stmt|;
comment|/**      * During an operation (like an update or merge) denotes that the file       * item contents or file/directory item properties were merged       * with changes that came from the repository, so that local modifications       * and arrived ones do not overlap.       */
specifier|public
specifier|static
specifier|final
name|SVNStatusType
name|MERGED
init|=
operator|new
name|SVNStatusType
argument_list|(
literal|6
argument_list|,
literal|"merged"
argument_list|)
decl_stmt|;
comment|/**      * During an operation (like an update) denotes that the file item contents       * or file/directory item properties are in conflict with those changes that      * came from the repository.       */
specifier|public
specifier|static
specifier|final
name|SVNStatusType
name|CONFLICTED
init|=
operator|new
name|SVNStatusType
argument_list|(
literal|7
argument_list|,
literal|"conflicted"
argument_list|)
decl_stmt|;
comment|/**      * Denotes that the conflict state on the item is still unresolved.      * For example, it can be set when trying to merge into a file that is      * in conflict with the repository.        */
specifier|public
specifier|static
specifier|final
name|SVNStatusType
name|CONFLICTED_UNRESOLVED
init|=
operator|new
name|SVNStatusType
argument_list|(
literal|8
argument_list|,
literal|"conflicted_unresolved"
argument_list|)
decl_stmt|;
comment|/**      * During some operations denotes that lock status is inapplicable.       * For example, this takes place during a commit operation - if there       * is any {@link ISVNEventHandler} registered for {@link SVNCommitClient}       * then events that are dispatched to that event handler will have the       * lock status type set to<i>LOCK_INAPPLICABLE</i>:      *<pre class="javacode">      *<span class="javakeyword">public class</span> MyCommitEventHandler<span class="javakeyword">implements</span> ISVNEventHandler{      * ...          *           *<span class="javakeyword">public void</span> handleEvent(SVNEvent event,<span class="javakeyword">double</span> progress){      *<span class="javacomment">//is SVNStatusType.LOCK_INAPPLICABLE</span>      *         SVNStatusType lockStatus = event.getLockStatus();      *     }      * ...      * }</pre>       */
specifier|public
specifier|static
specifier|final
name|SVNStatusType
name|LOCK_INAPPLICABLE
init|=
operator|new
name|SVNStatusType
argument_list|(
literal|0
argument_list|,
literal|"lock_inapplicable"
argument_list|)
decl_stmt|;
comment|/**      * No lock information is known.      */
specifier|public
specifier|static
specifier|final
name|SVNStatusType
name|LOCK_UNKNOWN
init|=
operator|new
name|SVNStatusType
argument_list|(
literal|1
argument_list|,
literal|"lock_unknown"
argument_list|)
decl_stmt|;
comment|/**      * During an operation denotes that the lock status wasn't changed. For example, in a       * Working Copy-to-URL copying.      */
specifier|public
specifier|static
specifier|final
name|SVNStatusType
name|LOCK_UNCHANGED
init|=
operator|new
name|SVNStatusType
argument_list|(
literal|2
argument_list|,
literal|"lock_unchanged"
argument_list|)
decl_stmt|;
comment|/**      * During an operation denotes that the file item's locked.       */
specifier|public
specifier|static
specifier|final
name|SVNStatusType
name|LOCK_LOCKED
init|=
operator|new
name|SVNStatusType
argument_list|(
literal|3
argument_list|,
literal|"lock_locked"
argument_list|)
decl_stmt|;
comment|/**      * During an operation (like an update) denotes that the file item's lock       * was broken in the repositry by some other user.      */
specifier|public
specifier|static
specifier|final
name|SVNStatusType
name|LOCK_UNLOCKED
init|=
operator|new
name|SVNStatusType
argument_list|(
literal|4
argument_list|,
literal|"lock_unlocked"
argument_list|)
decl_stmt|;
comment|/**      * In a status operation denotes that no status type information is       * available.       */
specifier|public
specifier|static
specifier|final
name|SVNStatusType
name|STATUS_NONE
init|=
operator|new
name|SVNStatusType
argument_list|(
literal|0
argument_list|,
literal|"none"
argument_list|)
decl_stmt|;
comment|/**      * In a status operation (if it's being running with an option to report      * of all items set to<span class="javakeyword">true</span>) denotes that the       * item in the Working Copy being currently processed has no local changes       * (in a normal state).        */
specifier|public
specifier|static
specifier|final
name|SVNStatusType
name|STATUS_NORMAL
init|=
operator|new
name|SVNStatusType
argument_list|(
literal|1
argument_list|,
literal|"normal"
argument_list|,
literal|' '
argument_list|)
decl_stmt|;
comment|/**      * In a status operation denotes that the item in the Working Copy being       * currently processed has local modifications.      */
specifier|public
specifier|static
specifier|final
name|SVNStatusType
name|STATUS_MODIFIED
init|=
operator|new
name|SVNStatusType
argument_list|(
literal|2
argument_list|,
literal|"modified"
argument_list|,
literal|'M'
argument_list|)
decl_stmt|;
comment|/**      * In a status operation denotes that the item in the Working Copy being       * currently processed is scheduled for addition to the repository.      */
specifier|public
specifier|static
specifier|final
name|SVNStatusType
name|STATUS_ADDED
init|=
operator|new
name|SVNStatusType
argument_list|(
literal|3
argument_list|,
literal|"added"
argument_list|,
literal|'A'
argument_list|)
decl_stmt|;
comment|/**      * In a status operation denotes that the item in the Working Copy being       * currently processed is scheduled for deletion from the repository.      */
specifier|public
specifier|static
specifier|final
name|SVNStatusType
name|STATUS_DELETED
init|=
operator|new
name|SVNStatusType
argument_list|(
literal|4
argument_list|,
literal|"deleted"
argument_list|,
literal|'D'
argument_list|)
decl_stmt|;
comment|/**      * In a status operation denotes that the item in the Working Copy being       * currently processed is not under version control.      */
specifier|public
specifier|static
specifier|final
name|SVNStatusType
name|STATUS_UNVERSIONED
init|=
operator|new
name|SVNStatusType
argument_list|(
literal|5
argument_list|,
literal|"unversioned"
argument_list|,
literal|'?'
argument_list|)
decl_stmt|;
comment|/**      * In a status operation denotes that the item in the Working Copy being       * currently processed is under version control but is missing  - for example,       * removed from the filesystem with a non-SVN, non-SVNKit or       * any other SVN non-compatible delete command).      */
specifier|public
specifier|static
specifier|final
name|SVNStatusType
name|STATUS_MISSING
init|=
operator|new
name|SVNStatusType
argument_list|(
literal|6
argument_list|,
literal|"missing"
argument_list|,
literal|'!'
argument_list|)
decl_stmt|;
comment|/**      * In a status operation denotes that the item in the Working Copy being       * currently processed was replaced by another item with the same name (within      * a single revision the item was scheduled for deletion and then a new one with      * the same name was scheduled for addition). Though they may have the same name      * the items have their own distinct histories.       */
specifier|public
specifier|static
specifier|final
name|SVNStatusType
name|STATUS_REPLACED
init|=
operator|new
name|SVNStatusType
argument_list|(
literal|7
argument_list|,
literal|"replaced"
argument_list|,
literal|'R'
argument_list|)
decl_stmt|;
comment|/**      * In a status operation denotes that the item in the Working Copy being       * currently processed is in a conflict state (local changes overlap those       * that came from the repository). The conflicting overlaps need to be manually      * resolved.      */
specifier|public
specifier|static
specifier|final
name|SVNStatusType
name|STATUS_CONFLICTED
init|=
operator|new
name|SVNStatusType
argument_list|(
literal|9
argument_list|,
literal|"conflicted"
argument_list|,
literal|'C'
argument_list|)
decl_stmt|;
comment|/**      * In a status operation denotes that the item in the Working Copy being       * currently processed has a non-expected kind. For example, a file is       * considered to be obstructed if it was deleted (with an SVN client non-compatible       * delete operation) and a directory with the same name as the file had had was added       * (but again with an SVN client non-compatible operation).      */
specifier|public
specifier|static
specifier|final
name|SVNStatusType
name|STATUS_OBSTRUCTED
init|=
operator|new
name|SVNStatusType
argument_list|(
literal|10
argument_list|,
literal|"obstructed"
argument_list|,
literal|'~'
argument_list|)
decl_stmt|;
comment|/**      * In a status operation denotes that the file item in the Working Copy being       * currently processed was set to be ignored (was added to svn:ignore property).      */
specifier|public
specifier|static
specifier|final
name|SVNStatusType
name|STATUS_IGNORED
init|=
operator|new
name|SVNStatusType
argument_list|(
literal|11
argument_list|,
literal|"ignored"
argument_list|,
literal|'I'
argument_list|)
decl_stmt|;
comment|/**      * In a status operation denotes that the item in the Working Copy being       * currently processed is under version control but is somehow incomplete -       * for example, it may happen when the previous update was interrupted.       */
specifier|public
specifier|static
specifier|final
name|SVNStatusType
name|STATUS_INCOMPLETE
init|=
operator|new
name|SVNStatusType
argument_list|(
literal|12
argument_list|,
literal|"incomplete"
argument_list|,
literal|'!'
argument_list|)
decl_stmt|;
comment|/**      * In a status operation denotes that the item in the Working Copy being       * currently processed is not under version control but is related to       * externals definitions.       */
specifier|public
specifier|static
specifier|final
name|SVNStatusType
name|STATUS_EXTERNAL
init|=
operator|new
name|SVNStatusType
argument_list|(
literal|13
argument_list|,
literal|"external"
argument_list|,
literal|'X'
argument_list|)
decl_stmt|;
comment|/**      * In a status operation denotes that the item in the Working Copy being       * currently processed was merged - that is it was applied the differences      * (delta) between two sources in a merge operation.      *       * @deprecated this status is never reported by 'status' operation       * in this version, 'update' and 'merge' uses {@link SVNStatusType#MERGED} instead.       *        */
specifier|public
specifier|static
specifier|final
name|SVNStatusType
name|STATUS_MERGED
init|=
operator|new
name|SVNStatusType
argument_list|(
literal|8
argument_list|,
literal|"merged"
argument_list|,
literal|'G'
argument_list|)
decl_stmt|;
block|}
end_class

end_unit

