begin_unit|revision:1.0.0;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * ====================================================================  * Copyright (c) 2004-2010 TMate Software Ltd.  All rights reserved.  *  * This software is licensed as described in the file COPYING, which  * you should have received as part of this distribution.  The terms  * are also available at http://svnkit.com/license.html  * If newer versions of this license are posted there, you may use a  * newer version instead, at your option.  * ====================================================================  */
end_comment

begin_package
package|package
name|org
operator|.
name|exist
operator|.
name|versioning
operator|.
name|svn
operator|.
name|wc
package|;
end_package

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|security
operator|.
name|SecurityManager
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|storage
operator|.
name|BrokerPool
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|storage
operator|.
name|DBBroker
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|versioning
operator|.
name|svn
operator|.
name|internal
operator|.
name|wc
operator|.
name|DefaultSVNOptions
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|versioning
operator|.
name|svn
operator|.
name|wc
operator|.
name|admin
operator|.
name|SVNAdminClient
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|versioning
operator|.
name|svn
operator|.
name|wc
operator|.
name|admin
operator|.
name|SVNLookClient
import|;
end_import

begin_import
import|import
name|org
operator|.
name|tmatesoft
operator|.
name|svn
operator|.
name|core
operator|.
name|ISVNCanceller
import|;
end_import

begin_import
import|import
name|org
operator|.
name|tmatesoft
operator|.
name|svn
operator|.
name|core
operator|.
name|SVNException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|tmatesoft
operator|.
name|svn
operator|.
name|core
operator|.
name|SVNURL
import|;
end_import

begin_import
import|import
name|org
operator|.
name|tmatesoft
operator|.
name|svn
operator|.
name|core
operator|.
name|auth
operator|.
name|ISVNAuthenticationManager
import|;
end_import

begin_import
import|import
name|org
operator|.
name|tmatesoft
operator|.
name|svn
operator|.
name|core
operator|.
name|io
operator|.
name|SVNRepository
import|;
end_import

begin_import
import|import
name|org
operator|.
name|tmatesoft
operator|.
name|svn
operator|.
name|core
operator|.
name|io
operator|.
name|SVNRepositoryFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|tmatesoft
operator|.
name|svn
operator|.
name|core
operator|.
name|wc
operator|.
name|ISVNRepositoryPool
import|;
end_import

begin_import
import|import
name|org
operator|.
name|tmatesoft
operator|.
name|svn
operator|.
name|util
operator|.
name|ISVNDebugLog
import|;
end_import

begin_import
import|import
name|org
operator|.
name|tmatesoft
operator|.
name|svn
operator|.
name|util
operator|.
name|SVNDebugLog
import|;
end_import

begin_comment
comment|/**  * The<b>SVNClientManager</b> class is used to manage<b>SVN</b>*<b>Client</b>   * objects as well as for providing them to a user what makes the user's work  * easier and his code - pretty clear and flexible.  *   *<p>   * When you don't have special needs to create, keep and manage   * separate<b>SVN</b>*<b>Client</b> objects by yourself, you should  * use<b>SVNClientManager</b> that takes care of all that work for you.  * These are some of advantages of using<b>SVNClientManager</b>:  *<ol>  *<li>If you instantiate an<b>SVN</b>*<b>Client</b> object by yourself   * you need to provide a run-time configuration driver - {@link ISVNOptions} -   * as well as an authentication and network layers driver -   * {@link org.tmatesoft.svn.core.auth.ISVNAuthenticationManager}. When  * using an<b>SVNClientManager</b> you have multiple choices to provide  * and use those drivers:  *<pre class="javacode">  *<span class="javacomment">//1.default options and authentication drivers to use</span>  *     SVNClientManager clientManager = SVNClientManager.newInstance();  *       *     ...  *       *<span class="javacomment">//2.provided options and default authentication drivers to use</span>  *     ISVNOptions myOptions;  *     ...  *     SVNClientManager clientManager = SVNClientManager.newInstance(myOptions);  *       *     ...  *       *<span class="javacomment">//3.provided options and authentication drivers to use</span>  *     ISVNOptions myOptions;  *     ISVNAuthenticationManager myAuthManager;  *     ...  *     SVNClientManager clientManager = SVNClientManager.newInstance(myOptions, myAuthManager);  *       *     ...  *       *<span class="javacomment">//4.provided options driver and user's credentials to make</span>   *<span class="javacomment">//a default authentication driver use them</span>   *     ISVNOptions myOptions;  *     ...  *     SVNClientManager   *         clientManager = SVNClientManager.newInstance(myOptions,<span class="javastring">"name"</span>,<span class="javastring">"passw"</span>);  *</pre><br />  * Having instantiated an<b>SVNClientManager</b> in one of these ways, all   * the<b>SVN</b>*<b>Client</b> objects it will provide you will share those  * drivers, so you don't need to code much to provide the same drivers to each  *<b>SVN</b>*<b>Client</b> instance by yourself.  *<li>With<b>SVNClientManager</b> you don't need to create and keep your  *<b>SVN</b>*<b>Client</b> objects by youself -<b>SVNClientManager</b> will  * do all the work for you, so this will certainly bring down your efforts  * on coding and your code will be clearer and more flexible. All you need is  * to create an<b>SVNClientManager</b> instance.  *<li>Actually every<b>SVN</b>*<b>Client</b> object is instantiated only at  * the moment of the first call to an appropriate<b>SVNClientManager</b>'s   *<code>get</code> method:  *<pre class="javacode">  *     SVNClientManager clientManager;  *     ...  *<span class="javacomment">//an update client will be created only at that moment when you</span>   *<span class="javacomment">//first call this method for getting your update client, but if you</span>  *<span class="javacomment">//have already called it once before, then the method will return</span>  *<span class="javacomment">//that update client object instantiated in previous... so, it's</span>  *<span class="javacomment">//quite cheap, you see..</span>   *     SVNUpdateClient updateClient = clientManager.getUpdateClient();</pre><br />  *<li>You can provide a single event handler that will be used by all   *<b>SVN</b>*<b>Client</b> objects provided by<b>SVNClientManager</b>:  *<pre class="javacode">  *<span class="javakeyword">import</span> org.tmatesoft.svn.core.wc.ISVNEventHandler;  *       *     ...  *       *     ISVNEventHandler commonEventHandler;  *     SVNClientManager clientManager = SVNClientManager.newInstance();  *     ...  *<span class="javacomment">//will be used by all SVN*Client objects</span>  *<span class="javacomment">//obtained from your client manager</span>  *     clientManager.setEventHandler(commonEventHandler);  *</pre>  *<li>  *</ol>  *   * @version 1.3  * @author  TMate Software Ltd.  * @since   1.2  * @see     ISVNEventHandler  * @see<a target="_top" href="http://svnkit.com/kb/examples/">Examples</a>  */
end_comment

begin_class
specifier|public
class|class
name|SVNClientManager
implements|implements
name|ISVNRepositoryPool
block|{
specifier|private
name|ISVNOptions
name|myOptions
decl_stmt|;
specifier|private
name|SVNCommitClient
name|myCommitClient
decl_stmt|;
specifier|private
name|SVNCopyClient
name|myCopyClient
decl_stmt|;
specifier|private
name|SVNDiffClient
name|myDiffClient
decl_stmt|;
specifier|private
name|SVNLogClient
name|myLogClient
decl_stmt|;
specifier|private
name|SVNMoveClient
name|myMoveClient
decl_stmt|;
specifier|private
name|SVNStatusClient
name|myStatusClient
decl_stmt|;
specifier|private
name|SVNUpdateClient
name|myUpdateClient
decl_stmt|;
specifier|private
name|SVNWCClient
name|myWCClient
decl_stmt|;
specifier|private
name|SVNChangelistClient
name|myChangelistClient
decl_stmt|;
specifier|private
name|SVNAdminClient
name|myAdminClient
decl_stmt|;
specifier|private
name|SVNLookClient
name|myLookClient
decl_stmt|;
specifier|private
name|ISVNEventHandler
name|myEventHandler
decl_stmt|;
specifier|private
name|ISVNRepositoryPool
name|myRepositoryPool
decl_stmt|;
specifier|private
name|ISVNDebugLog
name|myDebugLog
decl_stmt|;
specifier|private
name|boolean
name|myIsIgnoreExternals
decl_stmt|;
specifier|private
name|SVNClientManager
parameter_list|(
name|ISVNOptions
name|options
parameter_list|,
name|ISVNRepositoryPool
name|repositoryPool
parameter_list|)
block|{
name|myOptions
operator|=
name|options
expr_stmt|;
if|if
condition|(
name|myOptions
operator|==
literal|null
condition|)
block|{
name|myOptions
operator|=
name|SVNWCUtil
operator|.
name|createDefaultOptions
argument_list|(
literal|true
argument_list|)
expr_stmt|;
block|}
name|myRepositoryPool
operator|=
name|repositoryPool
expr_stmt|;
block|}
specifier|private
name|SVNClientManager
parameter_list|(
name|ISVNOptions
name|options
parameter_list|,
specifier|final
name|ISVNAuthenticationManager
name|authManager
parameter_list|)
block|{
name|this
argument_list|(
name|options
argument_list|,
operator|new
name|DefaultSVNRepositoryPool
argument_list|(
name|authManager
operator|==
literal|null
condition|?
name|SVNWCUtil
operator|.
name|createDefaultAuthenticationManager
argument_list|()
else|:
name|authManager
argument_list|,
name|options
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|/**      * Creates a new instance of this class using default {@link ISVNOptions}      * and {@link org.tmatesoft.svn.core.auth.ISVNAuthenticationManager} drivers.       * That means this<b>SVNClientManager</b> will use the SVN's default run-time       * configuration area. Default options are obtained via a call to       * {@link SVNWCUtil#createDefaultOptions(boolean)}.          *       * @return a new<b>SVNClientManager</b> instance      */
specifier|public
specifier|static
name|SVNClientManager
name|newInstance
parameter_list|()
block|{
return|return
operator|new
name|SVNClientManager
argument_list|(
literal|null
argument_list|,
operator|(
name|ISVNAuthenticationManager
operator|)
literal|null
argument_list|)
return|;
block|}
comment|/**      * Creates a new instance of this class using the provided {@link ISVNOptions}      * and default {@link org.tmatesoft.svn.core.auth.ISVNAuthenticationManager} drivers.       * That means this<b>SVNClientManager</b> will use the caller's configuration options      * (which correspond to options found in the default SVN's<i>config</i>      * file) and the default SVN's<i>servers</i> configuration and auth storage.        *       *<p/>      * If<code>options</code> is<span class="javakeyword">null</span>, default options are       * used which are obtained via a call to {@link SVNWCUtil#createDefaultOptions(boolean)}.        *       * @param  options  a config driver      * @return          a new<b>SVNClientManager</b> instance      */
specifier|public
specifier|static
name|SVNClientManager
name|newInstance
parameter_list|(
name|ISVNOptions
name|options
parameter_list|)
block|{
return|return
operator|new
name|SVNClientManager
argument_list|(
name|options
argument_list|,
operator|(
name|ISVNAuthenticationManager
operator|)
literal|null
argument_list|)
return|;
block|}
comment|/**      * Creates a new instance of this class using the provided {@link ISVNOptions}      * and {@link org.tmatesoft.svn.core.auth.ISVNAuthenticationManager} drivers.       * That means this<b>SVNClientManager</b> will use the caller's configuration options      * (which correspond to options found in the default SVN's<i>config</i>      * file) as well as authentication credentials and servers options (similar to      * options found in the default SVN's<i>servers</i>).         *      * @param  options     a config driver      * @param  authManager an authentication driver      * @return             a new<b>SVNClientManager</b> instance      */
specifier|public
specifier|static
name|SVNClientManager
name|newInstance
parameter_list|(
name|ISVNOptions
name|options
parameter_list|,
name|ISVNAuthenticationManager
name|authManager
parameter_list|)
block|{
return|return
operator|new
name|SVNClientManager
argument_list|(
name|options
argument_list|,
name|authManager
argument_list|)
return|;
block|}
comment|/**      * Creates a new instance of this class using the provided      * config driver and creator of of<b>SVNRepository</b> objects.       *       * @param  options         a config driver      * @param  repositoryPool  a creator of<b>SVNRepository</b> objects      * @return                 a new<b>SVNClientManager</b> instance      */
specifier|public
specifier|static
name|SVNClientManager
name|newInstance
parameter_list|(
name|ISVNOptions
name|options
parameter_list|,
name|ISVNRepositoryPool
name|repositoryPool
parameter_list|)
block|{
return|return
operator|new
name|SVNClientManager
argument_list|(
name|options
argument_list|,
name|repositoryPool
argument_list|)
return|;
block|}
comment|/**      * Creates a new instance of this class using the provided {@link ISVNOptions}      * driver and user's credentials to make a default implementation of      * {@link org.tmatesoft.svn.core.auth.ISVNAuthenticationManager} use them.       * That means this<b>SVNClientManager</b> will use the caller's configuration options      * (which correspond to options found in the default SVN's<i>config</i>      * file), the default SVN's<i>servers</i> configuration and the caller's      * credentials.      *       * @param  options     a config driver      * @param  userName    a user account name      * @param  password    a user password       * @return             a new<b>SVNClientManager</b> instance      */
specifier|public
specifier|static
name|SVNClientManager
name|newInstance
parameter_list|(
name|DefaultSVNOptions
name|options
parameter_list|,
name|String
name|userName
parameter_list|,
name|String
name|password
parameter_list|)
block|{
comment|//    	BrokerPool db = null;
comment|//    	DBBroker broker = null;
comment|//    	try {
comment|//    		db = BrokerPool.getInstance();
comment|//    		broker = db.get(SecurityManager.SYSTEM_USER);
comment|//
name|boolean
name|storeAuth
init|=
name|options
operator|==
literal|null
condition|?
literal|true
else|:
name|options
operator|.
name|isAuthStorageEnabled
argument_list|()
decl_stmt|;
name|ISVNAuthenticationManager
name|authManager
init|=
name|SVNWCUtil
operator|.
name|createDefaultAuthenticationManager
argument_list|(
literal|null
argument_list|,
name|userName
argument_list|,
name|password
argument_list|,
name|storeAuth
argument_list|)
decl_stmt|;
return|return
operator|new
name|SVNClientManager
argument_list|(
name|options
argument_list|,
name|authManager
argument_list|)
return|;
comment|//		} catch (Exception e) {
comment|//			if (db != null) db.release(broker);
comment|//			return null;
comment|//		}
block|}
comment|/**      * Creates a low-level SVN protocol driver to directly work with      * a repository.       *       *<p>      * The driver created will be set a default {@link org.tmatesoft.svn.core.auth.ISVNAuthenticationManager}       * manager.      *       *<p>      * Used by<b>SVN</b>*<b>Client</b> objects (managed by this       *<b>SVNClientManager</b>) to access a repository when needed.      *       * @param  url           a repository location to establish a       *                       connection with (will be the root directory      *                       for the working session)      * @param  mayReuse      if<span class="javakeyword">true</span> then tries      *                       first tries to find a reusable driver or creates a new       *                       reusable one      * @return               a low-level API driver for direct interacting      *                       with a repository      * @throws SVNException      */
specifier|public
name|SVNRepository
name|createRepository
parameter_list|(
name|SVNURL
name|url
parameter_list|,
name|boolean
name|mayReuse
parameter_list|)
throws|throws
name|SVNException
block|{
if|if
condition|(
name|myRepositoryPool
operator|!=
literal|null
condition|)
block|{
return|return
name|myRepositoryPool
operator|.
name|createRepository
argument_list|(
name|url
argument_list|,
name|mayReuse
argument_list|)
return|;
block|}
name|SVNRepository
name|repository
init|=
name|SVNRepositoryFactory
operator|.
name|create
argument_list|(
name|url
argument_list|)
decl_stmt|;
name|repository
operator|.
name|setAuthenticationManager
argument_list|(
name|SVNWCUtil
operator|.
name|createDefaultAuthenticationManager
argument_list|()
argument_list|)
expr_stmt|;
name|repository
operator|.
name|setDebugLog
argument_list|(
name|getDebugLog
argument_list|()
argument_list|)
expr_stmt|;
return|return
name|repository
return|;
block|}
comment|/**      * @param shutdownAll       * @deprecated          use {@link #dispose()} instead      */
specifier|public
name|void
name|shutdownConnections
parameter_list|(
name|boolean
name|shutdownAll
parameter_list|)
block|{
if|if
condition|(
name|myRepositoryPool
operator|!=
literal|null
condition|)
block|{
name|myRepositoryPool
operator|.
name|dispose
argument_list|()
expr_stmt|;
block|}
block|}
comment|/**      * Disposes this client object.      * Call this method when you've finished working with this object. This will close       * any open network sessions.       */
specifier|public
name|void
name|dispose
parameter_list|()
block|{
if|if
condition|(
name|myRepositoryPool
operator|!=
literal|null
condition|)
block|{
name|myRepositoryPool
operator|.
name|dispose
argument_list|()
expr_stmt|;
block|}
block|}
comment|/**      * Returns the run-time configuration options driver      * which kept by this object.      *       * @return  a run-time options driver      */
specifier|public
name|ISVNOptions
name|getOptions
parameter_list|()
block|{
return|return
name|myOptions
return|;
block|}
comment|/**      * Sets an event handler to all<b>SVN</b>*<b>Client</b> objects       * created and kept by this<b>SVNClientManager</b>.      *         *<p>      * The provided event handler will be set only to only those objects      * that have been already created (<b>SVN</b>*<b>Client</b> objects are      * instantiated by an<b>SVNClientManager</b> at the moment of the       * first call to a<code>get*Client()</code> method). So, the handler      * won't be set for those ones that have never been requested. However      * as they are first requested (and thus created) the handler will be       * set to them, too, since<b>SVNClientManager</b> is still keeping the handler.      *       * @param handler an event handler      */
specifier|public
name|void
name|setEventHandler
parameter_list|(
name|ISVNEventHandler
name|handler
parameter_list|)
block|{
name|myEventHandler
operator|=
name|handler
expr_stmt|;
name|setCanceller
argument_list|(
name|handler
argument_list|)
expr_stmt|;
if|if
condition|(
name|myCommitClient
operator|!=
literal|null
condition|)
block|{
name|myCommitClient
operator|.
name|setEventHandler
argument_list|(
name|handler
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|myCopyClient
operator|!=
literal|null
condition|)
block|{
name|myCopyClient
operator|.
name|setEventHandler
argument_list|(
name|handler
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|myDiffClient
operator|!=
literal|null
condition|)
block|{
name|myDiffClient
operator|.
name|setEventHandler
argument_list|(
name|handler
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|myLogClient
operator|!=
literal|null
condition|)
block|{
name|myLogClient
operator|.
name|setEventHandler
argument_list|(
name|handler
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|myMoveClient
operator|!=
literal|null
condition|)
block|{
name|myMoveClient
operator|.
name|setEventHandler
argument_list|(
name|handler
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|myStatusClient
operator|!=
literal|null
condition|)
block|{
name|myStatusClient
operator|.
name|setEventHandler
argument_list|(
name|handler
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|myUpdateClient
operator|!=
literal|null
condition|)
block|{
name|myUpdateClient
operator|.
name|setEventHandler
argument_list|(
name|handler
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|myWCClient
operator|!=
literal|null
condition|)
block|{
name|myWCClient
operator|.
name|setEventHandler
argument_list|(
name|handler
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|myChangelistClient
operator|!=
literal|null
condition|)
block|{
name|myChangelistClient
operator|.
name|setEventHandler
argument_list|(
name|handler
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|myAdminClient
operator|!=
literal|null
condition|)
block|{
name|myAdminClient
operator|.
name|setEventHandler
argument_list|(
name|handler
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|myLookClient
operator|!=
literal|null
condition|)
block|{
name|myLookClient
operator|.
name|setEventHandler
argument_list|(
name|handler
argument_list|)
expr_stmt|;
block|}
block|}
comment|/**      * Sets whether externals should be ignored or not by all of the<b>SVN*Clinet</b> objects which this client      * manager will provide.      *       * @param isIgnoreExternals   whether externals should be ignored or not      * @since                     1.2.0       */
specifier|public
name|void
name|setIgnoreExternals
parameter_list|(
name|boolean
name|isIgnoreExternals
parameter_list|)
block|{
name|myIsIgnoreExternals
operator|=
name|isIgnoreExternals
expr_stmt|;
if|if
condition|(
name|myCommitClient
operator|!=
literal|null
condition|)
block|{
name|myCommitClient
operator|.
name|setIgnoreExternals
argument_list|(
name|myIsIgnoreExternals
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|myCopyClient
operator|!=
literal|null
condition|)
block|{
name|myCopyClient
operator|.
name|setIgnoreExternals
argument_list|(
name|myIsIgnoreExternals
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|myDiffClient
operator|!=
literal|null
condition|)
block|{
name|myDiffClient
operator|.
name|setIgnoreExternals
argument_list|(
name|myIsIgnoreExternals
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|myLogClient
operator|!=
literal|null
condition|)
block|{
name|myLogClient
operator|.
name|setIgnoreExternals
argument_list|(
name|myIsIgnoreExternals
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|myMoveClient
operator|!=
literal|null
condition|)
block|{
name|myMoveClient
operator|.
name|setIgnoreExternals
argument_list|(
name|myIsIgnoreExternals
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|myStatusClient
operator|!=
literal|null
condition|)
block|{
name|myStatusClient
operator|.
name|setIgnoreExternals
argument_list|(
name|myIsIgnoreExternals
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|myUpdateClient
operator|!=
literal|null
condition|)
block|{
name|myUpdateClient
operator|.
name|setIgnoreExternals
argument_list|(
name|myIsIgnoreExternals
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|myWCClient
operator|!=
literal|null
condition|)
block|{
name|myWCClient
operator|.
name|setIgnoreExternals
argument_list|(
name|myIsIgnoreExternals
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|myChangelistClient
operator|!=
literal|null
condition|)
block|{
name|myChangelistClient
operator|.
name|setIgnoreExternals
argument_list|(
name|myIsIgnoreExternals
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|myAdminClient
operator|!=
literal|null
condition|)
block|{
name|myAdminClient
operator|.
name|setIgnoreExternals
argument_list|(
name|myIsIgnoreExternals
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|myLookClient
operator|!=
literal|null
condition|)
block|{
name|myLookClient
operator|.
name|setIgnoreExternals
argument_list|(
name|myIsIgnoreExternals
argument_list|)
expr_stmt|;
block|}
block|}
comment|/**      * Tells wheter externals are ignored or not.      * @return<span class="javakeyword">true</span> if externals are ignored; otherwise       *<span class="javakeyword">false</span>      * @since   1.2.0        */
specifier|public
name|boolean
name|isIgnoreExternals
parameter_list|()
block|{
return|return
name|myIsIgnoreExternals
return|;
block|}
comment|/**      * Sets global run-time configuration options to all of the<b>SVN*Client</b> objects provided by this       * client manager.      *       * @param options  run-time configuration options       */
specifier|public
name|void
name|setOptions
parameter_list|(
name|ISVNOptions
name|options
parameter_list|)
block|{
name|myOptions
operator|=
name|options
expr_stmt|;
if|if
condition|(
name|myCommitClient
operator|!=
literal|null
condition|)
block|{
name|myCommitClient
operator|.
name|setOptions
argument_list|(
name|options
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|myCopyClient
operator|!=
literal|null
condition|)
block|{
name|myCopyClient
operator|.
name|setOptions
argument_list|(
name|options
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|myDiffClient
operator|!=
literal|null
condition|)
block|{
name|myDiffClient
operator|.
name|setOptions
argument_list|(
name|options
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|myLogClient
operator|!=
literal|null
condition|)
block|{
name|myLogClient
operator|.
name|setOptions
argument_list|(
name|options
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|myMoveClient
operator|!=
literal|null
condition|)
block|{
name|myMoveClient
operator|.
name|setOptions
argument_list|(
name|options
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|myStatusClient
operator|!=
literal|null
condition|)
block|{
name|myStatusClient
operator|.
name|setOptions
argument_list|(
name|options
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|myUpdateClient
operator|!=
literal|null
condition|)
block|{
name|myUpdateClient
operator|.
name|setOptions
argument_list|(
name|options
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|myWCClient
operator|!=
literal|null
condition|)
block|{
name|myWCClient
operator|.
name|setOptions
argument_list|(
name|options
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|myAdminClient
operator|!=
literal|null
condition|)
block|{
name|myAdminClient
operator|.
name|setOptions
argument_list|(
name|options
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|myLookClient
operator|!=
literal|null
condition|)
block|{
name|myLookClient
operator|.
name|setOptions
argument_list|(
name|options
argument_list|)
expr_stmt|;
block|}
block|}
comment|/**      * Returns an instance of the {@link SVNCommitClient} class.       *       *<p>      * If it's the first time this method is being called the object is      * created, initialized and then returned. Further calls to this      * method will get the same object instantiated at that moment of       * the first call.<b>SVNClientManager</b> does not reinstantiate      * its<b>SVN</b>*<b>Client</b> objects.       *       * @return an<b>SVNCommitClient</b> instance      */
specifier|public
name|SVNCommitClient
name|getCommitClient
parameter_list|()
block|{
if|if
condition|(
name|myCommitClient
operator|==
literal|null
condition|)
block|{
name|myCommitClient
operator|=
operator|new
name|SVNCommitClient
argument_list|(
name|this
argument_list|,
name|myOptions
argument_list|)
expr_stmt|;
name|myCommitClient
operator|.
name|setEventHandler
argument_list|(
name|myEventHandler
argument_list|)
expr_stmt|;
name|myCommitClient
operator|.
name|setDebugLog
argument_list|(
name|getDebugLog
argument_list|()
argument_list|)
expr_stmt|;
name|myCommitClient
operator|.
name|setIgnoreExternals
argument_list|(
name|myIsIgnoreExternals
argument_list|)
expr_stmt|;
block|}
return|return
name|myCommitClient
return|;
block|}
comment|/**      * Returns an instance of the {@link org.tmatesoft.svn.core.wc.admin.SVNAdminClient} class.       *       *<p>      * If it's the first time this method is being called the object is      * created, initialized and then returned. Further calls to this      * method will get the same object instantiated at that moment of       * the first call.<b>SVNClientManager</b> does not reinstantiate      * its<b>SVN</b>*<b>Client</b> objects.       *       * @return an<b>SVNAdminClient</b> instance      */
specifier|public
name|SVNAdminClient
name|getAdminClient
parameter_list|()
block|{
if|if
condition|(
name|myAdminClient
operator|==
literal|null
condition|)
block|{
name|myAdminClient
operator|=
operator|new
name|SVNAdminClient
argument_list|(
name|this
argument_list|,
name|myOptions
argument_list|)
expr_stmt|;
name|myAdminClient
operator|.
name|setEventHandler
argument_list|(
name|myEventHandler
argument_list|)
expr_stmt|;
name|myAdminClient
operator|.
name|setDebugLog
argument_list|(
name|getDebugLog
argument_list|()
argument_list|)
expr_stmt|;
name|myAdminClient
operator|.
name|setIgnoreExternals
argument_list|(
name|myIsIgnoreExternals
argument_list|)
expr_stmt|;
block|}
return|return
name|myAdminClient
return|;
block|}
comment|/**      * Returns an instance of the {@link org.tmatesoft.svn.core.wc.admin.SVNLookClient} class.       *       *<p>      * If it's the first time this method is being called the object is      * created, initialized and then returned. Further calls to this      * method will get the same object instantiated at that moment of       * the first call.<b>SVNClientManager</b> does not reinstantiate      * its<b>SVN</b>*<b>Client</b> objects.       *       * @return an<b>SVNLookClient</b> instance      */
specifier|public
name|SVNLookClient
name|getLookClient
parameter_list|()
block|{
if|if
condition|(
name|myLookClient
operator|==
literal|null
condition|)
block|{
name|myLookClient
operator|=
operator|new
name|SVNLookClient
argument_list|(
name|this
argument_list|,
name|myOptions
argument_list|)
expr_stmt|;
name|myLookClient
operator|.
name|setEventHandler
argument_list|(
name|myEventHandler
argument_list|)
expr_stmt|;
name|myLookClient
operator|.
name|setDebugLog
argument_list|(
name|getDebugLog
argument_list|()
argument_list|)
expr_stmt|;
name|myLookClient
operator|.
name|setIgnoreExternals
argument_list|(
name|myIsIgnoreExternals
argument_list|)
expr_stmt|;
block|}
return|return
name|myLookClient
return|;
block|}
comment|/**      * Returns an instance of the {@link SVNCopyClient} class.       *       *<p>      * If it's the first time this method is being called the object is      * created, initialized and then returned. Further calls to this      * method will get the same object instantiated at that moment of       * the first call.<b>SVNClientManager</b> does not reinstantiate      * its<b>SVN</b>*<b>Client</b> objects.       *       * @return an<b>SVNCopyClient</b> instance      */
specifier|public
name|SVNCopyClient
name|getCopyClient
parameter_list|()
block|{
if|if
condition|(
name|myCopyClient
operator|==
literal|null
condition|)
block|{
name|myCopyClient
operator|=
operator|new
name|SVNCopyClient
argument_list|(
name|this
argument_list|,
name|myOptions
argument_list|)
expr_stmt|;
name|myCopyClient
operator|.
name|setEventHandler
argument_list|(
name|myEventHandler
argument_list|)
expr_stmt|;
name|myCopyClient
operator|.
name|setDebugLog
argument_list|(
name|getDebugLog
argument_list|()
argument_list|)
expr_stmt|;
name|myCopyClient
operator|.
name|setIgnoreExternals
argument_list|(
name|myIsIgnoreExternals
argument_list|)
expr_stmt|;
block|}
return|return
name|myCopyClient
return|;
block|}
comment|/**      * Returns an instance of the {@link SVNDiffClient} class.       *       *<p>      * If it's the first time this method is being called the object is      * created, initialized and then returned. Further calls to this      * method will get the same object instantiated at that moment of       * the first call.<b>SVNClientManager</b> does not reinstantiate      * its<b>SVN</b>*<b>Client</b> objects.       *       * @return an<b>SVNDiffClient</b> instance      */
specifier|public
name|SVNDiffClient
name|getDiffClient
parameter_list|()
block|{
if|if
condition|(
name|myDiffClient
operator|==
literal|null
condition|)
block|{
name|myDiffClient
operator|=
operator|new
name|SVNDiffClient
argument_list|(
name|this
argument_list|,
name|myOptions
argument_list|)
expr_stmt|;
name|myDiffClient
operator|.
name|setEventHandler
argument_list|(
name|myEventHandler
argument_list|)
expr_stmt|;
name|myDiffClient
operator|.
name|setDebugLog
argument_list|(
name|getDebugLog
argument_list|()
argument_list|)
expr_stmt|;
name|myDiffClient
operator|.
name|setIgnoreExternals
argument_list|(
name|myIsIgnoreExternals
argument_list|)
expr_stmt|;
block|}
return|return
name|myDiffClient
return|;
block|}
comment|/**      * Returns an instance of the {@link SVNLogClient} class.       *       *<p>      * If it's the first time this method is being called the object is      * created, initialized and then returned. Further calls to this      * method will get the same object instantiated at that moment of       * the first call.<b>SVNClientManager</b> does not reinstantiate      * its<b>SVN</b>*<b>Client</b> objects.       *       * @return an<b>SVNLogClient</b> instance      */
specifier|public
name|SVNLogClient
name|getLogClient
parameter_list|()
block|{
if|if
condition|(
name|myLogClient
operator|==
literal|null
condition|)
block|{
name|myLogClient
operator|=
operator|new
name|SVNLogClient
argument_list|(
name|this
argument_list|,
name|myOptions
argument_list|)
expr_stmt|;
name|myLogClient
operator|.
name|setEventHandler
argument_list|(
name|myEventHandler
argument_list|)
expr_stmt|;
name|myLogClient
operator|.
name|setDebugLog
argument_list|(
name|getDebugLog
argument_list|()
argument_list|)
expr_stmt|;
name|myLogClient
operator|.
name|setIgnoreExternals
argument_list|(
name|myIsIgnoreExternals
argument_list|)
expr_stmt|;
block|}
return|return
name|myLogClient
return|;
block|}
comment|/**      * Returns an instance of the {@link SVNMoveClient} class.       *       *<p>      * If it's the first time this method is being called the object is      * created, initialized and then returned. Further calls to this      * method will get the same object instantiated at that moment of       * the first call.<b>SVNClientManager</b> does not reinstantiate      * its<b>SVN</b>*<b>Client</b> objects.       *       * @return an<b>SVNMoveClient</b> instance      */
specifier|public
name|SVNMoveClient
name|getMoveClient
parameter_list|()
block|{
if|if
condition|(
name|myMoveClient
operator|==
literal|null
condition|)
block|{
name|myMoveClient
operator|=
operator|new
name|SVNMoveClient
argument_list|(
name|this
argument_list|,
name|myOptions
argument_list|)
expr_stmt|;
name|myMoveClient
operator|.
name|setEventHandler
argument_list|(
name|myEventHandler
argument_list|)
expr_stmt|;
name|myMoveClient
operator|.
name|setDebugLog
argument_list|(
name|getDebugLog
argument_list|()
argument_list|)
expr_stmt|;
name|myMoveClient
operator|.
name|setIgnoreExternals
argument_list|(
name|myIsIgnoreExternals
argument_list|)
expr_stmt|;
block|}
return|return
name|myMoveClient
return|;
block|}
comment|/**      * Returns an instance of the {@link SVNStatusClient} class.       *       *<p>      * If it's the first time this method is being called the object is      * created, initialized and then returned. Further calls to this      * method will get the same object instantiated at that moment of       * the first call.<b>SVNClientManager</b> does not reinstantiate      * its<b>SVN</b>*<b>Client</b> objects.       *       * @return an<b>SVNStatusClient</b> instance      */
specifier|public
name|SVNStatusClient
name|getStatusClient
parameter_list|()
block|{
if|if
condition|(
name|myStatusClient
operator|==
literal|null
condition|)
block|{
name|myStatusClient
operator|=
operator|new
name|SVNStatusClient
argument_list|(
name|this
argument_list|,
name|myOptions
argument_list|)
expr_stmt|;
name|myStatusClient
operator|.
name|setEventHandler
argument_list|(
name|myEventHandler
argument_list|)
expr_stmt|;
name|myStatusClient
operator|.
name|setDebugLog
argument_list|(
name|getDebugLog
argument_list|()
argument_list|)
expr_stmt|;
name|myStatusClient
operator|.
name|setIgnoreExternals
argument_list|(
name|myIsIgnoreExternals
argument_list|)
expr_stmt|;
block|}
return|return
name|myStatusClient
return|;
block|}
comment|/**      * Returns an instance of the {@link SVNUpdateClient} class.       *       *<p>      * If it's the first time this method is being called the object is      * created, initialized and then returned. Further calls to this      * method will get the same object instantiated at that moment of       * the first call.<b>SVNClientManager</b> does not reinstantiate      * its<b>SVN</b>*<b>Client</b> objects.       *       * @return an<b>SVNUpdateClient</b> instance      */
specifier|public
name|SVNUpdateClient
name|getUpdateClient
parameter_list|()
block|{
if|if
condition|(
name|myUpdateClient
operator|==
literal|null
condition|)
block|{
name|myUpdateClient
operator|=
operator|new
name|SVNUpdateClient
argument_list|(
name|this
argument_list|,
name|myOptions
argument_list|)
expr_stmt|;
name|myUpdateClient
operator|.
name|setEventHandler
argument_list|(
name|myEventHandler
argument_list|)
expr_stmt|;
name|myUpdateClient
operator|.
name|setDebugLog
argument_list|(
name|getDebugLog
argument_list|()
argument_list|)
expr_stmt|;
name|myUpdateClient
operator|.
name|setIgnoreExternals
argument_list|(
name|myIsIgnoreExternals
argument_list|)
expr_stmt|;
block|}
return|return
name|myUpdateClient
return|;
block|}
comment|/**      * Returns an instance of the {@link SVNWCClient} class.       *       *<p>      * If it's the first time this method is being called the object is      * created, initialized and then returned. Further calls to this      * method will get the same object instantiated at that moment of       * the first call.<b>SVNClientManager</b> does not reinstantiate      * its<b>SVN</b>*<b>Client</b> objects.       *       * @return an<b>SVNWCClient</b> instance      */
specifier|public
name|SVNWCClient
name|getWCClient
parameter_list|()
block|{
if|if
condition|(
name|myWCClient
operator|==
literal|null
condition|)
block|{
name|myWCClient
operator|=
operator|new
name|SVNWCClient
argument_list|(
name|this
argument_list|,
name|myOptions
argument_list|)
expr_stmt|;
name|myWCClient
operator|.
name|setEventHandler
argument_list|(
name|myEventHandler
argument_list|)
expr_stmt|;
name|myWCClient
operator|.
name|setDebugLog
argument_list|(
name|getDebugLog
argument_list|()
argument_list|)
expr_stmt|;
name|myWCClient
operator|.
name|setIgnoreExternals
argument_list|(
name|myIsIgnoreExternals
argument_list|)
expr_stmt|;
block|}
return|return
name|myWCClient
return|;
block|}
comment|/**      * Returns an instance of the {@link SVNChangelistClient} class.       *       *<p>      * If it's the first time this method is being called the object is      * created, initialized and then returned. Further calls to this      * method will get the same object instantiated at that moment of       * the first call.<b>SVNClientManager</b> does not reinstantiate      * its<b>SVN</b>*<b>Client</b> objects.       *       * @return an<b>SVNChangelistClient</b> instance      * @since  1.2.0      */
specifier|public
name|SVNChangelistClient
name|getChangelistClient
parameter_list|()
block|{
if|if
condition|(
name|myChangelistClient
operator|==
literal|null
condition|)
block|{
name|myChangelistClient
operator|=
operator|new
name|SVNChangelistClient
argument_list|(
name|this
argument_list|,
name|myOptions
argument_list|)
expr_stmt|;
name|myChangelistClient
operator|.
name|setEventHandler
argument_list|(
name|myEventHandler
argument_list|)
expr_stmt|;
name|myChangelistClient
operator|.
name|setDebugLog
argument_list|(
name|getDebugLog
argument_list|()
argument_list|)
expr_stmt|;
name|myChangelistClient
operator|.
name|setIgnoreExternals
argument_list|(
name|myIsIgnoreExternals
argument_list|)
expr_stmt|;
block|}
return|return
name|myChangelistClient
return|;
block|}
comment|/**      * Returns the debug logger currently in use.        *       *<p>      * If no debug logger has been specified by the time this call occurs,       * a default one (returned by<code>org.tmatesoft.svn.util.SVNDebugLog.getDefaultLog()</code>)       * will be created and used.      *       * @return a debug logger      */
specifier|public
name|ISVNDebugLog
name|getDebugLog
parameter_list|()
block|{
if|if
condition|(
name|myDebugLog
operator|==
literal|null
condition|)
block|{
return|return
name|SVNDebugLog
operator|.
name|getDefaultLog
argument_list|()
return|;
block|}
return|return
name|myDebugLog
return|;
block|}
comment|/**      * Sets a logger to write debug log information to. Sets this same logger      * object to all<b>SVN</b>*<b>Client</b> objects instantiated by this       * moment.       *       * @param log a debug logger      */
specifier|public
name|void
name|setDebugLog
parameter_list|(
name|ISVNDebugLog
name|log
parameter_list|)
block|{
name|myDebugLog
operator|=
name|log
expr_stmt|;
if|if
condition|(
name|myCommitClient
operator|!=
literal|null
condition|)
block|{
name|myCommitClient
operator|.
name|setDebugLog
argument_list|(
name|log
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|myCopyClient
operator|!=
literal|null
condition|)
block|{
name|myCopyClient
operator|.
name|setDebugLog
argument_list|(
name|log
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|myDiffClient
operator|!=
literal|null
condition|)
block|{
name|myDiffClient
operator|.
name|setDebugLog
argument_list|(
name|log
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|myLogClient
operator|!=
literal|null
condition|)
block|{
name|myLogClient
operator|.
name|setDebugLog
argument_list|(
name|log
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|myMoveClient
operator|!=
literal|null
condition|)
block|{
name|myMoveClient
operator|.
name|setDebugLog
argument_list|(
name|log
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|myStatusClient
operator|!=
literal|null
condition|)
block|{
name|myStatusClient
operator|.
name|setDebugLog
argument_list|(
name|log
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|myUpdateClient
operator|!=
literal|null
condition|)
block|{
name|myUpdateClient
operator|.
name|setDebugLog
argument_list|(
name|log
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|myWCClient
operator|!=
literal|null
condition|)
block|{
name|myWCClient
operator|.
name|setDebugLog
argument_list|(
name|log
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|myChangelistClient
operator|!=
literal|null
condition|)
block|{
name|myChangelistClient
operator|.
name|setDebugLog
argument_list|(
name|log
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|myAdminClient
operator|!=
literal|null
condition|)
block|{
name|myAdminClient
operator|.
name|setDebugLog
argument_list|(
name|log
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|myLookClient
operator|!=
literal|null
condition|)
block|{
name|myLookClient
operator|.
name|setDebugLog
argument_list|(
name|log
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|myRepositoryPool
operator|!=
literal|null
condition|)
block|{
name|myRepositoryPool
operator|.
name|setDebugLog
argument_list|(
name|log
argument_list|)
expr_stmt|;
block|}
block|}
comment|/**      * Sets an authentication manager to this client manager.      * This authentication manager will be used by all the<b>SVN*Client</b> objects provided by       * this client manager for authenticating the client side against the server side when needed (on demand)      * or preliminarily (if specified).      *       * @param authManager   user's implementation of the authentication manager interface       */
specifier|public
name|void
name|setAuthenticationManager
parameter_list|(
name|ISVNAuthenticationManager
name|authManager
parameter_list|)
block|{
if|if
condition|(
name|myRepositoryPool
operator|!=
literal|null
condition|)
block|{
name|myRepositoryPool
operator|.
name|setAuthenticationManager
argument_list|(
name|authManager
argument_list|)
expr_stmt|;
block|}
block|}
comment|/**      * Sets a canceller to this client manager.      * This canceller will be used by all the<b>SVN*Client</b> objects provided by this client manager.      *       * @param canceller     user's implementation of the canceller interface      * @since               1.2.0      */
specifier|public
name|void
name|setCanceller
parameter_list|(
name|ISVNCanceller
name|canceller
parameter_list|)
block|{
if|if
condition|(
name|myRepositoryPool
operator|!=
literal|null
condition|)
block|{
name|myRepositoryPool
operator|.
name|setCanceller
argument_list|(
name|canceller
argument_list|)
expr_stmt|;
block|}
block|}
comment|/**      * Returns the repository pool used by this client manager.      * This pool is used to create and manage {@link SVNRepository} objects by all the<b>SVN*Client</b>      * objects provided by this client manager.      *       * @return        repository pool object      * @since         1.2.0      */
specifier|public
name|ISVNRepositoryPool
name|getRepositoryPool
parameter_list|()
block|{
return|return
name|myRepositoryPool
return|;
block|}
block|}
end_class

end_unit

