begin_unit|revision:1.0.0;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * ====================================================================  * Copyright (c) 2004-2010 TMate Software Ltd.  All rights reserved.  *  * This software is licensed as described in the file COPYING, which  * you should have received as part of this distribution.  The terms  * are also available at http://svnkit.com/license.html.  * If newer versions of this license are posted there, you may use a  * newer version instead, at your option.  * ====================================================================  */
end_comment

begin_package
package|package
name|org
operator|.
name|exist
operator|.
name|versioning
operator|.
name|svn
operator|.
name|wc
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|File
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collection
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collections
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Iterator
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|versioning
operator|.
name|svn
operator|.
name|internal
operator|.
name|wc
operator|.
name|SVNErrorManager
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|versioning
operator|.
name|svn
operator|.
name|internal
operator|.
name|wc
operator|.
name|SVNEventFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|versioning
operator|.
name|svn
operator|.
name|internal
operator|.
name|wc
operator|.
name|admin
operator|.
name|ISVNEntryHandler
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|versioning
operator|.
name|svn
operator|.
name|internal
operator|.
name|wc
operator|.
name|admin
operator|.
name|SVNAdminArea
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|versioning
operator|.
name|svn
operator|.
name|internal
operator|.
name|wc
operator|.
name|admin
operator|.
name|SVNEntry
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|versioning
operator|.
name|svn
operator|.
name|internal
operator|.
name|wc
operator|.
name|admin
operator|.
name|SVNWCAccess
import|;
end_import

begin_import
import|import
name|org
operator|.
name|tmatesoft
operator|.
name|svn
operator|.
name|core
operator|.
name|SVNDepth
import|;
end_import

begin_import
import|import
name|org
operator|.
name|tmatesoft
operator|.
name|svn
operator|.
name|core
operator|.
name|SVNErrorCode
import|;
end_import

begin_import
import|import
name|org
operator|.
name|tmatesoft
operator|.
name|svn
operator|.
name|core
operator|.
name|SVNErrorMessage
import|;
end_import

begin_import
import|import
name|org
operator|.
name|tmatesoft
operator|.
name|svn
operator|.
name|core
operator|.
name|SVNException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|tmatesoft
operator|.
name|svn
operator|.
name|core
operator|.
name|SVNNodeKind
import|;
end_import

begin_import
import|import
name|org
operator|.
name|tmatesoft
operator|.
name|svn
operator|.
name|core
operator|.
name|SVNProperty
import|;
end_import

begin_import
import|import
name|org
operator|.
name|tmatesoft
operator|.
name|svn
operator|.
name|core
operator|.
name|auth
operator|.
name|ISVNAuthenticationManager
import|;
end_import

begin_import
import|import
name|org
operator|.
name|tmatesoft
operator|.
name|svn
operator|.
name|core
operator|.
name|internal
operator|.
name|util
operator|.
name|SVNHashMap
import|;
end_import

begin_import
import|import
name|org
operator|.
name|tmatesoft
operator|.
name|svn
operator|.
name|core
operator|.
name|internal
operator|.
name|util
operator|.
name|SVNHashSet
import|;
end_import

begin_import
import|import
name|org
operator|.
name|tmatesoft
operator|.
name|svn
operator|.
name|core
operator|.
name|io
operator|.
name|SVNRepository
import|;
end_import

begin_import
import|import
name|org
operator|.
name|tmatesoft
operator|.
name|svn
operator|.
name|core
operator|.
name|wc
operator|.
name|ISVNChangelistHandler
import|;
end_import

begin_import
import|import
name|org
operator|.
name|tmatesoft
operator|.
name|svn
operator|.
name|core
operator|.
name|wc
operator|.
name|ISVNRepositoryPool
import|;
end_import

begin_import
import|import
name|org
operator|.
name|tmatesoft
operator|.
name|svn
operator|.
name|util
operator|.
name|SVNLogType
import|;
end_import

begin_comment
comment|/**  * The<b>SVNChangelistClient</b> provides API for managing changelists.  *   *<p>  * Here's a list of the<b>SVNChangelistClient</b>'s methods   * matched against corresponing commands of the SVN command line   * client:  *   *<table cellpadding="3" cellspacing="1" border="0" width="40%" bgcolor="#999933">  *<tr bgcolor="#ADB8D9" align="left">  *<td><b>SVNKit</b></td>  *<td><b>Subversion</b></td>  *</tr>     *<tr bgcolor="#EAEAEA" align="left">  *<td>doAddToChangelist()</td><td>'svn changelist CLNAME TARGET'</td>  *</tr>  *<tr bgcolor="#EAEAEA" align="left">  *<td>doRemoveFromChangelist()</td><td>'svn changelist --remove TARGET'</td>  *</tr>  *</table>  *   * @version 1.3  * @author  TMate Software Ltd.  * @since   1.2  */
end_comment

begin_class
specifier|public
class|class
name|SVNChangelistClient
extends|extends
name|SVNBasicClient
block|{
comment|/**      * Constructs and initializes an<b>SVNChangelistClient</b> object      * with the specified run-time configuration and authentication      * drivers.      *       *<p/>      * If<code>options</code> is<span class="javakeyword">null</span>,      * then this<b>SVNChangelistClient</b> will be using a default run-time      * configuration driver  which takes client-side settings from the      * default SVN's run-time configuration area but is not able to      * change those settings (read more on {@link ISVNOptions} and {@link SVNWCUtil}).      *       *<p/>      * If<code>authManager</code> is<span class="javakeyword">null</span>,      * then this<b>SVNChangelistClient</b> will be using a default authentication      * and network layers driver (see {@link SVNWCUtil#createDefaultAuthenticationManager()})      * which uses server-side settings and auth storage from the      * default SVN's run-time configuration area (or system properties      * if that area is not found).      *      * @param authManager an authentication and network layers driver      * @param options     a run-time configuration options driver      */
specifier|public
name|SVNChangelistClient
parameter_list|(
name|ISVNAuthenticationManager
name|authManager
parameter_list|,
name|ISVNOptions
name|options
parameter_list|)
block|{
name|super
argument_list|(
name|authManager
argument_list|,
name|options
argument_list|)
expr_stmt|;
block|}
comment|/**      * Constructs and initializes an<b>SVNChangelistClient</b> object      * with the specified run-time configuration and repository pool object.      *       *<p/>      * If<code>options</code> is<span class="javakeyword">null</span>,      * then this<b>SVNChangelistClient</b> will be using a default run-time      * configuration driver  which takes client-side settings from the      * default SVN's run-time configuration area but is not able to      * change those settings (read more on {@link ISVNOptions} and {@link SVNWCUtil}).      *       *<p/>      * If<code>repositoryPool</code> is<span class="javakeyword">null</span>,      * then {@link org.tmatesoft.svn.core.io.SVNRepositoryFactory} will be used to create {@link SVNRepository repository access objects}.      *      * @param repositoryPool   a repository pool object      * @param options          a run-time configuration options driver      */
specifier|public
name|SVNChangelistClient
parameter_list|(
name|ISVNRepositoryPool
name|repositoryPool
parameter_list|,
name|ISVNOptions
name|options
parameter_list|)
block|{
name|super
argument_list|(
name|repositoryPool
argument_list|,
name|options
argument_list|)
expr_stmt|;
block|}
comment|/**      * @param path       * @param changeLists       * @param depth       * @param handler       * @throws SVNException       * @deprecated            use {@link #doGetChangeLists(File, Collection, SVNDepth, ISVNChangelistHandler)}       *                        instead      */
specifier|public
name|void
name|getChangeLists
parameter_list|(
name|File
name|path
parameter_list|,
specifier|final
name|Collection
name|changeLists
parameter_list|,
name|SVNDepth
name|depth
parameter_list|,
specifier|final
name|ISVNChangelistHandler
name|handler
parameter_list|)
throws|throws
name|SVNException
block|{
name|doGetChangeLists
argument_list|(
name|path
argument_list|,
name|changeLists
argument_list|,
name|depth
argument_list|,
name|handler
argument_list|)
expr_stmt|;
block|}
comment|/**      * @param changeLists       * @param targets       * @param depth       * @param handler       * @throws SVNException      * @deprecated           use {@link #doGetChangeListPaths(Collection, Collection, SVNDepth, ISVNChangelistHandler)}      *                       instead       */
specifier|public
name|void
name|getChangeListPaths
parameter_list|(
name|Collection
name|changeLists
parameter_list|,
name|Collection
name|targets
parameter_list|,
name|SVNDepth
name|depth
parameter_list|,
name|ISVNChangelistHandler
name|handler
parameter_list|)
throws|throws
name|SVNException
block|{
name|doGetChangeListPaths
argument_list|(
name|changeLists
argument_list|,
name|targets
argument_list|,
name|depth
argument_list|,
name|handler
argument_list|)
expr_stmt|;
block|}
comment|/**      * @param paths       * @param depth       * @param changelist       * @param changelists       * @throws SVNException       * @deprecated           use {@link #doAddToChangelist(File[], SVNDepth, String, String[])} instead      */
specifier|public
name|void
name|addToChangelist
parameter_list|(
name|File
index|[]
name|paths
parameter_list|,
name|SVNDepth
name|depth
parameter_list|,
name|String
name|changelist
parameter_list|,
name|String
index|[]
name|changelists
parameter_list|)
throws|throws
name|SVNException
block|{
name|doAddToChangelist
argument_list|(
name|paths
argument_list|,
name|depth
argument_list|,
name|changelist
argument_list|,
name|changelists
argument_list|)
expr_stmt|;
block|}
comment|/**      * @param paths       * @param depth       * @param changelists       * @throws SVNException       * @deprecated           use {@link #doRemoveFromChangelist(File[], SVNDepth, String[])} instead      */
specifier|public
name|void
name|removeFromChangelist
parameter_list|(
name|File
index|[]
name|paths
parameter_list|,
name|SVNDepth
name|depth
parameter_list|,
name|String
index|[]
name|changelists
parameter_list|)
throws|throws
name|SVNException
block|{
name|doRemoveFromChangelist
argument_list|(
name|paths
argument_list|,
name|depth
argument_list|,
name|changelists
argument_list|)
expr_stmt|;
block|}
comment|/**      * Adds each path in<code>paths</code> (recursing to<code>depth</code> as necessary) to      *<code>changelist</code>. If a path is already a member of another changelist, then removes it from the       * other changelist and adds it to<code>changelist</code>. (For now, a path cannot belong to two       * changelists at once.)      *       *<p/>      *<code>changelists</code> is an array of<code>String</code> changelist names, used as a restrictive       * filter on items whose changelist assignments are adjusted; that is, doesn't tweak the changeset of any      * item unless it's currently a member of one of those changelists. If<code>changelists</code> is empty       * (or<span class="javakeyword">null</span>), no changelist filtering occurs.      *      *<p/>      * Note: this metadata is purely a client-side "bookkeeping" convenience, and is entirely managed by the       * working copy.      *       *<p/>      * Note: this method does not require repository access.      *       * @param  paths          working copy paths to add to<code>changelist</code>      * @param  depth          tree depth to process      * @param  changelist     name of the changelist to add new paths to       * @param  changelists    collection of changelist names as a filter      * @throws SVNException       * @since                  1.2.0, New in SVN 1.5.0      */
specifier|public
name|void
name|doAddToChangelist
parameter_list|(
name|File
index|[]
name|paths
parameter_list|,
name|SVNDepth
name|depth
parameter_list|,
name|String
name|changelist
parameter_list|,
name|String
index|[]
name|changelists
parameter_list|)
throws|throws
name|SVNException
block|{
name|setChangelist
argument_list|(
name|paths
argument_list|,
name|changelist
argument_list|,
name|changelists
argument_list|,
name|depth
argument_list|)
expr_stmt|;
block|}
comment|/**      * Removes each path in<code>paths</code> (recursing to<code>depth</code> as necessary) from changelists       * to which they are currently assigned.      *       *<p/>      *<code>changelists</code> is an array of<code>String</code> changelist names, used as a restrictive       * filter on items whose changelist assignments are removed; that is, doesn't remove from a changeset any      * item unless it's currently a member of one of those changelists. If<code>changelists</code> is empty       * (or<span class="javakeyword">null</span>), all changelist assignments in and under each path in       *<code>paths</code> (to<code>depth</code>) will be removed.      *       *<p/>      * Note: this metadata is purely a client-side "bookkeeping" convenience, and is entirely managed by the       * working copy.      *      *<p/>      * Note: this method does not require repository access.      *       * @param paths            paths to remove from any changelists        * @param depth            tree depth to process      * @param changelists      collection of changelist names as a filter      * @throws SVNException       * @since                  1.2.0, New in SVN 1.5.0      */
specifier|public
name|void
name|doRemoveFromChangelist
parameter_list|(
name|File
index|[]
name|paths
parameter_list|,
name|SVNDepth
name|depth
parameter_list|,
name|String
index|[]
name|changelists
parameter_list|)
throws|throws
name|SVNException
block|{
name|setChangelist
argument_list|(
name|paths
argument_list|,
literal|null
argument_list|,
name|changelists
argument_list|,
name|depth
argument_list|)
expr_stmt|;
block|}
comment|/**      * Gets paths belonging to the specified changelists discovered under the specified targets.      *       *<p/>      * This method is just like {@link #doGetChangeLists(File, Collection, SVNDepth, ISVNChangelistHandler)}       * except for it operates on multiple targets instead of a single one.       *      *<p/>      * Note: this method does not require repository access.      *       * @param  changeLists   collection of changelist names       * @param  targets       working copy paths to operate on       * @param  depth         tree depth to process      * @param  handler       caller's handler to receive path-to-changelist information      * @throws SVNException       */
specifier|public
name|void
name|doGetChangeListPaths
parameter_list|(
name|Collection
name|changeLists
parameter_list|,
name|Collection
name|targets
parameter_list|,
name|SVNDepth
name|depth
parameter_list|,
name|ISVNChangelistHandler
name|handler
parameter_list|)
throws|throws
name|SVNException
block|{
if|if
condition|(
name|changeLists
operator|==
literal|null
operator|||
name|changeLists
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
return|return;
block|}
name|targets
operator|=
name|targets
operator|==
literal|null
condition|?
name|Collections
operator|.
name|EMPTY_LIST
else|:
name|targets
expr_stmt|;
for|for
control|(
name|Iterator
name|targetsIter
init|=
name|targets
operator|.
name|iterator
argument_list|()
init|;
name|targetsIter
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|File
name|target
init|=
operator|(
name|File
operator|)
name|targetsIter
operator|.
name|next
argument_list|()
decl_stmt|;
name|doGetChangeLists
argument_list|(
name|target
argument_list|,
name|changeLists
argument_list|,
name|depth
argument_list|,
name|handler
argument_list|)
expr_stmt|;
block|}
block|}
comment|/**      * Gets paths belonging to the specified changelists discovered under the specified path.      *       *<p/>      * Beginning at<code>path</code>, crawls to<code>depth</code> to discover every path in or under       *<code>path<code> which belongs to one of the changelists in<code>changeLists</code> (a collection of       *<code>String</code> changelist names).      * If<code>changeLists</code> is null, discovers paths with any changelist.      * Calls<code>handler</code> each time a changelist-having path is discovered.      *      *<p/>       * If there was an event handler provided via {@link #setEventHandler(ISVNEventHandler)}, then its       * {@link ISVNEventHandler#checkCancelled()} will be invoked during the recursive walk.      *      *<p/>      * Note: this method does not require repository access.      *       * @param  path            target working copy path                  * @param  changeLists     collection of changelist names      * @param  depth           tree depth to process      * @param  handler         caller's handler to receive path-to-changelist information        * @throws SVNException       * @since                  1.2.0, New in SVN 1.5.0      */
specifier|public
name|void
name|doGetChangeLists
parameter_list|(
name|File
name|path
parameter_list|,
specifier|final
name|Collection
name|changeLists
parameter_list|,
name|SVNDepth
name|depth
parameter_list|,
specifier|final
name|ISVNChangelistHandler
name|handler
parameter_list|)
throws|throws
name|SVNException
block|{
name|path
operator|=
name|path
operator|.
name|getAbsoluteFile
argument_list|()
expr_stmt|;
name|SVNWCAccess
name|wcAccess
init|=
name|createWCAccess
argument_list|()
decl_stmt|;
try|try
block|{
name|wcAccess
operator|.
name|probeOpen
argument_list|(
name|path
argument_list|,
literal|false
argument_list|,
name|SVNWCAccess
operator|.
name|INFINITE_DEPTH
argument_list|)
expr_stmt|;
name|ISVNEntryHandler
name|entryHandler
init|=
operator|new
name|ISVNEntryHandler
argument_list|()
block|{
specifier|public
name|void
name|handleEntry
parameter_list|(
name|File
name|path
parameter_list|,
name|SVNEntry
name|entry
parameter_list|)
throws|throws
name|SVNException
block|{
if|if
condition|(
name|SVNWCAccess
operator|.
name|matchesChangeList
argument_list|(
name|changeLists
argument_list|,
name|entry
argument_list|)
operator|&&
operator|(
name|entry
operator|.
name|isFile
argument_list|()
operator|||
operator|(
name|entry
operator|.
name|isDirectory
argument_list|()
operator|&&
name|entry
operator|.
name|getName
argument_list|()
operator|.
name|equals
argument_list|(
name|entry
operator|.
name|getAdminArea
argument_list|()
operator|.
name|getThisDirName
argument_list|()
argument_list|)
operator|)
operator|)
condition|)
block|{
if|if
condition|(
name|handler
operator|!=
literal|null
condition|)
block|{
name|handler
operator|.
name|handle
argument_list|(
name|path
argument_list|,
name|entry
operator|.
name|getChangelistName
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
block|}
specifier|public
name|void
name|handleError
parameter_list|(
name|File
name|path
parameter_list|,
name|SVNErrorMessage
name|error
parameter_list|)
throws|throws
name|SVNException
block|{
name|SVNErrorManager
operator|.
name|error
argument_list|(
name|error
argument_list|,
name|SVNLogType
operator|.
name|WC
argument_list|)
expr_stmt|;
block|}
block|}
decl_stmt|;
name|wcAccess
operator|.
name|walkEntries
argument_list|(
name|path
argument_list|,
name|entryHandler
argument_list|,
literal|false
argument_list|,
name|depth
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
name|wcAccess
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
block|}
specifier|private
name|void
name|setChangelist
parameter_list|(
name|File
index|[]
name|paths
parameter_list|,
name|String
name|changelistName
parameter_list|,
name|String
index|[]
name|changelists
parameter_list|,
name|SVNDepth
name|depth
parameter_list|)
throws|throws
name|SVNException
block|{
if|if
condition|(
literal|""
operator|.
name|equals
argument_list|(
name|changelistName
argument_list|)
condition|)
block|{
name|SVNErrorMessage
name|err
init|=
name|SVNErrorMessage
operator|.
name|create
argument_list|(
name|SVNErrorCode
operator|.
name|INCORRECT_PARAMS
argument_list|,
literal|"Changelist names must not be empty"
argument_list|)
decl_stmt|;
name|SVNErrorManager
operator|.
name|error
argument_list|(
name|err
argument_list|,
name|SVNLogType
operator|.
name|WC
argument_list|)
expr_stmt|;
block|}
name|SVNWCAccess
name|wcAccess
init|=
name|createWCAccess
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|paths
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
name|checkCancelled
argument_list|()
expr_stmt|;
name|File
name|path
init|=
name|paths
index|[
name|i
index|]
operator|.
name|getAbsoluteFile
argument_list|()
decl_stmt|;
name|Collection
name|changelistsSet
init|=
literal|null
decl_stmt|;
if|if
condition|(
name|changelists
operator|!=
literal|null
operator|&&
name|changelists
operator|.
name|length
operator|>
literal|0
condition|)
block|{
name|changelistsSet
operator|=
operator|new
name|SVNHashSet
argument_list|()
expr_stmt|;
for|for
control|(
name|int
name|j
init|=
literal|0
init|;
name|j
operator|<
name|changelists
operator|.
name|length
condition|;
name|j
operator|++
control|)
block|{
name|changelistsSet
operator|.
name|add
argument_list|(
name|changelists
index|[
name|j
index|]
argument_list|)
expr_stmt|;
block|}
block|}
try|try
block|{
name|wcAccess
operator|.
name|probeOpen
argument_list|(
name|path
argument_list|,
literal|true
argument_list|,
operator|-
literal|1
argument_list|)
expr_stmt|;
name|wcAccess
operator|.
name|walkEntries
argument_list|(
name|path
argument_list|,
operator|new
name|SVNChangeListWalker
argument_list|(
name|wcAccess
argument_list|,
name|changelistName
argument_list|,
name|changelistsSet
argument_list|)
argument_list|,
literal|false
argument_list|,
name|depth
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
name|wcAccess
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
block|}
block|}
specifier|private
class|class
name|SVNChangeListWalker
implements|implements
name|ISVNEntryHandler
block|{
specifier|private
name|String
name|myChangelist
decl_stmt|;
specifier|private
name|Collection
name|myChangelists
decl_stmt|;
specifier|private
name|SVNWCAccess
name|myWCAccess
decl_stmt|;
specifier|public
name|SVNChangeListWalker
parameter_list|(
name|SVNWCAccess
name|wcAccess
parameter_list|,
name|String
name|changelistName
parameter_list|,
name|Collection
name|changelists
parameter_list|)
block|{
name|myChangelist
operator|=
name|changelistName
expr_stmt|;
name|myChangelists
operator|=
name|changelists
expr_stmt|;
name|myWCAccess
operator|=
name|wcAccess
expr_stmt|;
block|}
specifier|public
name|void
name|handleEntry
parameter_list|(
name|File
name|path
parameter_list|,
name|SVNEntry
name|entry
parameter_list|)
throws|throws
name|SVNException
block|{
if|if
condition|(
operator|!
name|SVNWCAccess
operator|.
name|matchesChangeList
argument_list|(
name|myChangelists
argument_list|,
name|entry
argument_list|)
condition|)
block|{
return|return;
block|}
if|if
condition|(
operator|!
name|entry
operator|.
name|isFile
argument_list|()
condition|)
block|{
if|if
condition|(
name|entry
operator|.
name|isThisDir
argument_list|()
condition|)
block|{
name|SVNEventAction
name|action
init|=
name|myChangelist
operator|!=
literal|null
condition|?
name|SVNEventAction
operator|.
name|CHANGELIST_SET
else|:
name|SVNEventAction
operator|.
name|CHANGELIST_CLEAR
decl_stmt|;
name|SVNEvent
name|event
init|=
name|SVNEventFactory
operator|.
name|createSVNEvent
argument_list|(
name|path
argument_list|,
name|SVNNodeKind
operator|.
name|DIR
argument_list|,
literal|null
argument_list|,
name|SVNRepository
operator|.
name|INVALID_REVISION
argument_list|,
name|SVNEventAction
operator|.
name|SKIP
argument_list|,
name|action
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|)
decl_stmt|;
name|SVNChangelistClient
operator|.
name|this
operator|.
name|dispatchEvent
argument_list|(
name|event
argument_list|)
expr_stmt|;
block|}
return|return;
block|}
if|if
condition|(
name|entry
operator|.
name|getChangelistName
argument_list|()
operator|==
literal|null
operator|&&
name|myChangelist
operator|==
literal|null
condition|)
block|{
return|return;
block|}
if|if
condition|(
name|entry
operator|.
name|getChangelistName
argument_list|()
operator|!=
literal|null
operator|&&
name|entry
operator|.
name|getChangelistName
argument_list|()
operator|.
name|equals
argument_list|(
name|myChangelist
argument_list|)
condition|)
block|{
return|return;
block|}
if|if
condition|(
name|myChangelist
operator|!=
literal|null
operator|&&
name|entry
operator|.
name|getChangelistName
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|SVNErrorMessage
name|err
init|=
name|SVNErrorMessage
operator|.
name|create
argument_list|(
name|SVNErrorCode
operator|.
name|WC_CHANGELIST_MOVE
argument_list|,
literal|"Removing ''{0}'' from changelist ''{1}''."
argument_list|,
operator|new
name|Object
index|[]
block|{
name|path
block|,
name|entry
operator|.
name|getChangelistName
argument_list|()
block|}
argument_list|)
decl_stmt|;
name|SVNEvent
name|event
init|=
name|SVNEventFactory
operator|.
name|createSVNEvent
argument_list|(
name|path
argument_list|,
name|SVNNodeKind
operator|.
name|FILE
argument_list|,
literal|null
argument_list|,
name|SVNRepository
operator|.
name|INVALID_REVISION
argument_list|,
name|SVNEventAction
operator|.
name|CHANGELIST_MOVED
argument_list|,
name|SVNEventAction
operator|.
name|CHANGELIST_MOVED
argument_list|,
name|err
argument_list|,
literal|null
argument_list|)
decl_stmt|;
name|SVNChangelistClient
operator|.
name|this
operator|.
name|dispatchEvent
argument_list|(
name|event
argument_list|)
expr_stmt|;
block|}
name|Map
name|attributes
init|=
operator|new
name|SVNHashMap
argument_list|()
decl_stmt|;
name|attributes
operator|.
name|put
argument_list|(
name|SVNProperty
operator|.
name|CHANGELIST
argument_list|,
name|myChangelist
argument_list|)
expr_stmt|;
name|SVNAdminArea
name|area
init|=
name|myWCAccess
operator|.
name|retrieve
argument_list|(
name|path
operator|.
name|getParentFile
argument_list|()
argument_list|)
decl_stmt|;
name|entry
operator|=
name|area
operator|.
name|modifyEntry
argument_list|(
name|entry
operator|.
name|getName
argument_list|()
argument_list|,
name|attributes
argument_list|,
literal|true
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|SVNEvent
name|event
init|=
name|SVNEventFactory
operator|.
name|createSVNEvent
argument_list|(
name|path
argument_list|,
name|SVNNodeKind
operator|.
name|UNKNOWN
argument_list|,
literal|null
argument_list|,
name|SVNRepository
operator|.
name|INVALID_REVISION
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|,
name|myChangelist
operator|!=
literal|null
condition|?
name|SVNEventAction
operator|.
name|CHANGELIST_SET
else|:
name|SVNEventAction
operator|.
name|CHANGELIST_CLEAR
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|,
name|myChangelist
argument_list|)
decl_stmt|;
name|SVNChangelistClient
operator|.
name|this
operator|.
name|dispatchEvent
argument_list|(
name|event
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|handleError
parameter_list|(
name|File
name|path
parameter_list|,
name|SVNErrorMessage
name|error
parameter_list|)
throws|throws
name|SVNException
block|{
name|SVNErrorManager
operator|.
name|error
argument_list|(
name|error
argument_list|,
name|SVNLogType
operator|.
name|WC
argument_list|)
expr_stmt|;
block|}
block|}
block|}
end_class

end_unit

