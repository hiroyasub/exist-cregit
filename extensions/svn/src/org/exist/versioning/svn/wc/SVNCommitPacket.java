begin_unit|revision:1.0.0;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * ====================================================================  * Copyright (c) 2004-2010 TMate Software Ltd.  All rights reserved.  *  * This software is licensed as described in the file COPYING, which  * you should have received as part of this distribution.  The terms  * are also available at http://svnkit.com/license.html  * If newer versions of this license are posted there, you may use a  * newer version instead, at your option.  * ====================================================================  */
end_comment

begin_package
package|package
name|org
operator|.
name|exist
operator|.
name|versioning
operator|.
name|svn
operator|.
name|wc
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collection
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|versioning
operator|.
name|svn
operator|.
name|internal
operator|.
name|wc
operator|.
name|admin
operator|.
name|SVNWCAccess
import|;
end_import

begin_import
import|import
name|org
operator|.
name|tmatesoft
operator|.
name|svn
operator|.
name|core
operator|.
name|SVNException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|tmatesoft
operator|.
name|svn
operator|.
name|core
operator|.
name|internal
operator|.
name|util
operator|.
name|SVNHashMap
import|;
end_import

begin_comment
comment|/**  * The<b>SVNCommitPacket</b> is a storage for<b>SVNCommitItem</b>  * objects which represent information on versioned items intended  * for being committed to a repository.  *   *<p>  * Used by {@link SVNCommitClient} to collect and hold information on paths that are to be committed.  * Each<code>SVNCommitPacket</code> is committed in a single transaction.  *   * @version 1.3  * @author  TMate Software Ltd.  * @since   1.2  * @see     SVNCommitItem  */
end_comment

begin_class
specifier|public
class|class
name|SVNCommitPacket
block|{
comment|/**      * This constant denotes an empty commit items storage (contains no      * {@link SVNCommitItem} objects).      */
specifier|public
specifier|static
specifier|final
name|SVNCommitPacket
name|EMPTY
init|=
operator|new
name|SVNCommitPacket
argument_list|(
literal|null
argument_list|,
operator|new
name|SVNCommitItem
index|[
literal|0
index|]
argument_list|,
literal|null
argument_list|)
decl_stmt|;
specifier|private
name|SVNCommitItem
index|[]
name|myCommitItems
decl_stmt|;
specifier|private
name|Map
name|myLockTokens
decl_stmt|;
specifier|private
name|boolean
index|[]
name|myIsSkipped
decl_stmt|;
specifier|private
name|boolean
name|myIsDisposed
decl_stmt|;
name|SVNCommitPacket
parameter_list|(
name|SVNWCAccess
name|wcAccess
parameter_list|,
name|SVNCommitItem
index|[]
name|items
parameter_list|,
name|Map
name|lockTokens
parameter_list|)
block|{
name|myCommitItems
operator|=
name|items
expr_stmt|;
name|myLockTokens
operator|=
name|lockTokens
expr_stmt|;
name|myIsSkipped
operator|=
operator|new
name|boolean
index|[
name|items
operator|==
literal|null
condition|?
literal|0
else|:
name|items
operator|.
name|length
index|]
expr_stmt|;
name|myIsDisposed
operator|=
literal|false
expr_stmt|;
if|if
condition|(
name|wcAccess
operator|!=
literal|null
condition|)
block|{
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|items
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
if|if
condition|(
name|items
index|[
name|i
index|]
operator|.
name|getWCAccess
argument_list|()
operator|==
literal|null
condition|)
block|{
name|items
index|[
name|i
index|]
operator|.
name|setWCAccess
argument_list|(
name|wcAccess
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
comment|/**      * Gets an array of<b>SVNCommitItem</b> objects stored in this      * object.      *       * @return an array of<b>SVNCommitItem</b> objects containing      *         info of versioned items to be committed      */
specifier|public
name|SVNCommitItem
index|[]
name|getCommitItems
parameter_list|()
block|{
return|return
name|myCommitItems
return|;
block|}
comment|/**      * Sets or unsets a versioned item to be skipped -       * whether or not it should be committed.       *       *       * @param item      an item that should be marked skipped      * @param skipped   if<span class="javakeyword">true</span> the item is      *                  set to be skipped (a commit operation should skip       *                  the item), otherwise - unskipped if it was      *                  previously marked skipped      * @see             #isCommitItemSkipped(SVNCommitItem)      *                        */
specifier|public
name|void
name|setCommitItemSkipped
parameter_list|(
name|SVNCommitItem
name|item
parameter_list|,
name|boolean
name|skipped
parameter_list|)
block|{
name|int
name|index
init|=
name|getItemIndex
argument_list|(
name|item
argument_list|)
decl_stmt|;
if|if
condition|(
name|index
operator|>=
literal|0
operator|&&
name|index
operator|<
name|myIsSkipped
operator|.
name|length
condition|)
block|{
name|myIsSkipped
index|[
name|index
index|]
operator|=
name|skipped
expr_stmt|;
block|}
block|}
comment|/**      * Determines if an item intended for a commit is set to       * be skipped - that is not to be committed.      *       * @param  item  an item to check      * @return<span class="javakeyword">true</span> if the item      *               is set to be skipped, otherwise<span class="javakeyword">false</span>      * @see          #setCommitItemSkipped(SVNCommitItem, boolean)         */
specifier|public
name|boolean
name|isCommitItemSkipped
parameter_list|(
name|SVNCommitItem
name|item
parameter_list|)
block|{
name|int
name|index
init|=
name|getItemIndex
argument_list|(
name|item
argument_list|)
decl_stmt|;
if|if
condition|(
name|index
operator|>=
literal|0
operator|&&
name|index
operator|<
name|myIsSkipped
operator|.
name|length
condition|)
block|{
return|return
name|myIsSkipped
index|[
name|index
index|]
return|;
block|}
return|return
literal|true
return|;
block|}
comment|/**      * Determines if this object is disposed.      *       * @return<span class="javakeyword">true</span> if disposed      *         otherwise<span class="javakeyword">false</span>      */
specifier|public
name|boolean
name|isDisposed
parameter_list|()
block|{
return|return
name|myIsDisposed
return|;
block|}
comment|/**      * Disposes the current object.      *       * @throws SVNException      */
specifier|public
name|void
name|dispose
parameter_list|()
throws|throws
name|SVNException
block|{
try|try
block|{
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|myCommitItems
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
if|if
condition|(
name|myCommitItems
index|[
name|i
index|]
operator|!=
literal|null
operator|&&
name|myCommitItems
index|[
name|i
index|]
operator|.
name|getWCAccess
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|myCommitItems
index|[
name|i
index|]
operator|.
name|getWCAccess
argument_list|()
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
block|}
block|}
finally|finally
block|{
name|myIsDisposed
operator|=
literal|true
expr_stmt|;
block|}
block|}
specifier|private
name|int
name|getItemIndex
parameter_list|(
name|SVNCommitItem
name|item
parameter_list|)
block|{
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|myCommitItems
operator|!=
literal|null
operator|&&
name|i
operator|<
name|myCommitItems
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
name|SVNCommitItem
name|commitItem
init|=
name|myCommitItems
index|[
name|i
index|]
decl_stmt|;
if|if
condition|(
name|commitItem
operator|==
name|item
condition|)
block|{
return|return
name|i
return|;
block|}
block|}
return|return
operator|-
literal|1
return|;
block|}
name|Map
name|getLockTokens
parameter_list|()
block|{
return|return
name|myLockTokens
return|;
block|}
name|SVNCommitPacket
name|removeSkippedItems
parameter_list|()
block|{
if|if
condition|(
name|this
operator|==
name|EMPTY
condition|)
block|{
return|return
name|EMPTY
return|;
block|}
name|Collection
name|items
init|=
operator|new
name|ArrayList
argument_list|()
decl_stmt|;
name|Map
name|lockTokens
init|=
name|myLockTokens
operator|==
literal|null
condition|?
literal|null
else|:
operator|new
name|SVNHashMap
argument_list|(
name|myLockTokens
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|myCommitItems
operator|!=
literal|null
operator|&&
name|i
operator|<
name|myCommitItems
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
name|SVNCommitItem
name|commitItem
init|=
name|myCommitItems
index|[
name|i
index|]
decl_stmt|;
if|if
condition|(
operator|!
name|myIsSkipped
index|[
name|i
index|]
condition|)
block|{
name|items
operator|.
name|add
argument_list|(
name|commitItem
argument_list|)
expr_stmt|;
block|}
if|else if
condition|(
name|lockTokens
operator|!=
literal|null
condition|)
block|{
name|lockTokens
operator|.
name|remove
argument_list|(
name|commitItem
operator|.
name|getURL
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
name|SVNCommitItem
index|[]
name|filteredItems
init|=
operator|(
name|SVNCommitItem
index|[]
operator|)
name|items
operator|.
name|toArray
argument_list|(
operator|new
name|SVNCommitItem
index|[
name|items
operator|.
name|size
argument_list|()
index|]
argument_list|)
decl_stmt|;
return|return
operator|new
name|SVNCommitPacket
argument_list|(
literal|null
argument_list|,
name|filteredItems
argument_list|,
name|lockTokens
argument_list|)
return|;
block|}
comment|/**      * Gives a string representation of this object.      *       * @return a string representing this object.      */
specifier|public
name|String
name|toString
parameter_list|()
block|{
if|if
condition|(
name|EMPTY
operator|==
name|this
condition|)
block|{
return|return
literal|"[EMPTY]"
return|;
block|}
name|StringBuffer
name|result
init|=
operator|new
name|StringBuffer
argument_list|()
decl_stmt|;
name|result
operator|.
name|append
argument_list|(
literal|"SVNCommitPacket: "
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|myCommitItems
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
name|SVNCommitItem
name|commitItem
init|=
name|myCommitItems
index|[
name|i
index|]
decl_stmt|;
name|result
operator|.
name|append
argument_list|(
literal|"\n"
argument_list|)
expr_stmt|;
if|if
condition|(
name|commitItem
operator|.
name|isAdded
argument_list|()
condition|)
block|{
name|result
operator|.
name|append
argument_list|(
literal|"A"
argument_list|)
expr_stmt|;
block|}
if|else if
condition|(
name|commitItem
operator|.
name|isDeleted
argument_list|()
condition|)
block|{
name|result
operator|.
name|append
argument_list|(
literal|"D"
argument_list|)
expr_stmt|;
block|}
if|else if
condition|(
name|commitItem
operator|.
name|isContentsModified
argument_list|()
condition|)
block|{
name|result
operator|.
name|append
argument_list|(
literal|"M"
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|result
operator|.
name|append
argument_list|(
literal|"_"
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|commitItem
operator|.
name|isPropertiesModified
argument_list|()
condition|)
block|{
name|result
operator|.
name|append
argument_list|(
literal|"M"
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|result
operator|.
name|append
argument_list|(
literal|" "
argument_list|)
expr_stmt|;
block|}
name|result
operator|.
name|append
argument_list|(
literal|" "
argument_list|)
expr_stmt|;
if|if
condition|(
name|commitItem
operator|.
name|getPath
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|result
operator|.
name|append
argument_list|(
name|commitItem
operator|.
name|getPath
argument_list|()
argument_list|)
expr_stmt|;
name|result
operator|.
name|append
argument_list|(
literal|" "
argument_list|)
expr_stmt|;
block|}
name|result
operator|.
name|append
argument_list|(
name|commitItem
operator|.
name|getFile
argument_list|()
operator|.
name|getAbsolutePath
argument_list|()
argument_list|)
expr_stmt|;
name|result
operator|.
name|append
argument_list|(
literal|"\n"
argument_list|)
expr_stmt|;
name|result
operator|.
name|append
argument_list|(
name|commitItem
operator|.
name|getRevision
argument_list|()
argument_list|)
expr_stmt|;
name|result
operator|.
name|append
argument_list|(
literal|" "
argument_list|)
expr_stmt|;
name|result
operator|.
name|append
argument_list|(
name|commitItem
operator|.
name|getURL
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|commitItem
operator|.
name|isCopied
argument_list|()
condition|)
block|{
name|result
operator|.
name|append
argument_list|(
literal|"\n"
argument_list|)
expr_stmt|;
name|result
operator|.
name|append
argument_list|(
literal|"+"
argument_list|)
expr_stmt|;
name|result
operator|.
name|append
argument_list|(
name|commitItem
operator|.
name|getCopyFromURL
argument_list|()
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|commitItem
operator|.
name|isLocked
argument_list|()
condition|)
block|{
name|result
operator|.
name|append
argument_list|(
literal|"\n"
argument_list|)
expr_stmt|;
name|result
operator|.
name|append
argument_list|(
literal|"LOCKED"
argument_list|)
expr_stmt|;
block|}
block|}
return|return
name|result
operator|.
name|toString
argument_list|()
return|;
block|}
block|}
end_class

end_unit

