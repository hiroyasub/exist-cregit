begin_unit|revision:1.0.0;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * ====================================================================  * Copyright (c) 2004-2010 TMate Software Ltd.  All rights reserved.  *  * This software is licensed as described in the file COPYING, which  * you should have received as part of this distribution.  The terms  * are also available at http://svnkit.com/license.html  * If newer versions of this license are posted there, you may use a  * newer version instead, at your option.  * ====================================================================  */
end_comment

begin_package
package|package
name|org
operator|.
name|exist
operator|.
name|versioning
operator|.
name|svn
operator|.
name|wc
operator|.
name|xml
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|OutputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|OutputStreamWriter
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|UnsupportedEncodingException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|Writer
import|;
end_import

begin_import
import|import
name|org
operator|.
name|tmatesoft
operator|.
name|svn
operator|.
name|core
operator|.
name|internal
operator|.
name|util
operator|.
name|SVNEncodingUtil
import|;
end_import

begin_import
import|import
name|org
operator|.
name|xml
operator|.
name|sax
operator|.
name|Attributes
import|;
end_import

begin_import
import|import
name|org
operator|.
name|xml
operator|.
name|sax
operator|.
name|ContentHandler
import|;
end_import

begin_import
import|import
name|org
operator|.
name|xml
operator|.
name|sax
operator|.
name|Locator
import|;
end_import

begin_import
import|import
name|org
operator|.
name|xml
operator|.
name|sax
operator|.
name|SAXException
import|;
end_import

begin_comment
comment|/**  * This implementation of<b>ContentHandler</b> can write XML contents to   * a specified output stream or writer.    *   * @version 1.3  * @author  TMate Software Ltd.  * @since   1.2  */
end_comment

begin_class
specifier|public
class|class
name|SVNXMLSerializer
implements|implements
name|ContentHandler
block|{
specifier|private
name|Writer
name|myWriter
decl_stmt|;
specifier|private
name|String
name|myEol
init|=
name|System
operator|.
name|getProperty
argument_list|(
literal|"line.separator"
argument_list|)
decl_stmt|;
specifier|private
name|boolean
name|myCharacters
init|=
literal|false
decl_stmt|;
comment|/**      * Creates a serializer to write XML contents to the specified       * output stream.      *       * @param os an output stream to write contents to      */
specifier|public
name|SVNXMLSerializer
parameter_list|(
specifier|final
name|OutputStream
name|os
parameter_list|)
block|{
try|try
block|{
name|myWriter
operator|=
operator|new
name|OutputStreamWriter
argument_list|(
name|os
argument_list|,
literal|"UTF-8"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|UnsupportedEncodingException
name|e
parameter_list|)
block|{
name|myWriter
operator|=
operator|new
name|OutputStreamWriter
argument_list|(
name|os
argument_list|)
expr_stmt|;
block|}
block|}
comment|/**      * Creates a serializer to write XML contents to the specified       * writer.      *       * @param writer a writer to write contents to      */
specifier|public
name|SVNXMLSerializer
parameter_list|(
name|Writer
name|writer
parameter_list|)
block|{
name|myWriter
operator|=
name|writer
expr_stmt|;
block|}
comment|/**      * Flushes written bytes.        *       * @throws IOException      */
specifier|public
name|void
name|flush
parameter_list|()
throws|throws
name|IOException
block|{
name|myWriter
operator|.
name|flush
argument_list|()
expr_stmt|;
block|}
comment|/**      * Starts xml document.      *       * @throws SAXException       */
specifier|public
name|void
name|startDocument
parameter_list|()
throws|throws
name|SAXException
block|{
try|try
block|{
name|myWriter
operator|.
name|write
argument_list|(
literal|"<?xml version=\"1.0\"?>"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|SAXException
argument_list|(
name|e
argument_list|)
throw|;
block|}
block|}
comment|/**      * Starts an xml element.      *       * @param namespaceURI       * @param localName       * @param qName       * @param atts       * @throws SAXException       */
specifier|public
name|void
name|startElement
parameter_list|(
name|String
name|namespaceURI
parameter_list|,
name|String
name|localName
parameter_list|,
name|String
name|qName
parameter_list|,
name|Attributes
name|atts
parameter_list|)
throws|throws
name|SAXException
block|{
try|try
block|{
name|myWriter
operator|.
name|write
argument_list|(
name|myEol
argument_list|)
expr_stmt|;
name|myWriter
operator|.
name|write
argument_list|(
literal|"<"
argument_list|)
expr_stmt|;
name|myWriter
operator|.
name|write
argument_list|(
name|qName
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|atts
operator|.
name|getLength
argument_list|()
condition|;
name|i
operator|++
control|)
block|{
name|myWriter
operator|.
name|write
argument_list|(
name|myEol
argument_list|)
expr_stmt|;
name|myWriter
operator|.
name|write
argument_list|(
literal|"   "
argument_list|)
expr_stmt|;
name|myWriter
operator|.
name|write
argument_list|(
name|atts
operator|.
name|getQName
argument_list|(
name|i
argument_list|)
argument_list|)
expr_stmt|;
name|myWriter
operator|.
name|write
argument_list|(
literal|"=\""
argument_list|)
expr_stmt|;
name|myWriter
operator|.
name|write
argument_list|(
name|SVNEncodingUtil
operator|.
name|xmlEncodeAttr
argument_list|(
name|atts
operator|.
name|getValue
argument_list|(
name|i
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|myWriter
operator|.
name|write
argument_list|(
literal|"\""
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
literal|"against"
operator|.
name|equals
argument_list|(
name|qName
argument_list|)
condition|)
block|{
name|myWriter
operator|.
name|write
argument_list|(
literal|"/>"
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|myWriter
operator|.
name|write
argument_list|(
literal|">"
argument_list|)
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|SAXException
argument_list|(
name|e
argument_list|)
throw|;
block|}
block|}
comment|/**      * Handles CData characters.      *       * @param ch       * @param start       * @param length       * @throws SAXException       */
specifier|public
name|void
name|characters
parameter_list|(
name|char
index|[]
name|ch
parameter_list|,
name|int
name|start
parameter_list|,
name|int
name|length
parameter_list|)
throws|throws
name|SAXException
block|{
name|myCharacters
operator|=
literal|true
expr_stmt|;
try|try
block|{
name|String
name|cdata
init|=
name|SVNEncodingUtil
operator|.
name|xmlEncodeCDATA
argument_list|(
operator|new
name|String
argument_list|(
name|ch
argument_list|,
name|start
argument_list|,
name|length
argument_list|)
argument_list|)
decl_stmt|;
name|myWriter
operator|.
name|write
argument_list|(
name|cdata
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|SAXException
argument_list|(
name|e
argument_list|)
throw|;
block|}
block|}
comment|/**      * Closes the xml element.       *       * @param namespaceURI       * @param localName       * @param qName       * @throws SAXException       */
specifier|public
name|void
name|endElement
parameter_list|(
name|String
name|namespaceURI
parameter_list|,
name|String
name|localName
parameter_list|,
name|String
name|qName
parameter_list|)
throws|throws
name|SAXException
block|{
if|if
condition|(
literal|"against"
operator|.
name|equals
argument_list|(
name|qName
argument_list|)
condition|)
block|{
return|return;
block|}
try|try
block|{
if|if
condition|(
operator|!
name|myCharacters
condition|)
block|{
name|myWriter
operator|.
name|write
argument_list|(
name|myEol
argument_list|)
expr_stmt|;
block|}
name|myWriter
operator|.
name|write
argument_list|(
literal|"</"
argument_list|)
expr_stmt|;
name|myWriter
operator|.
name|write
argument_list|(
name|qName
argument_list|)
expr_stmt|;
name|myWriter
operator|.
name|write
argument_list|(
literal|">"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|SAXException
argument_list|(
name|e
argument_list|)
throw|;
block|}
finally|finally
block|{
name|myCharacters
operator|=
literal|false
expr_stmt|;
block|}
block|}
comment|/**      * Writes a End Of Line marker to the output.      *       * @throws SAXException      */
specifier|public
name|void
name|endDocument
parameter_list|()
throws|throws
name|SAXException
block|{
try|try
block|{
name|myWriter
operator|.
name|write
argument_list|(
name|myEol
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|SAXException
argument_list|(
name|e
argument_list|)
throw|;
block|}
block|}
comment|/**      * Does nothing.      *       * @param ch      * @param start      * @param length      * @throws SAXException      */
specifier|public
name|void
name|ignorableWhitespace
parameter_list|(
name|char
index|[]
name|ch
parameter_list|,
name|int
name|start
parameter_list|,
name|int
name|length
parameter_list|)
throws|throws
name|SAXException
block|{
block|}
comment|/**      * Does nothing.      *       * @param prefix      * @throws SAXException      */
specifier|public
name|void
name|endPrefixMapping
parameter_list|(
name|String
name|prefix
parameter_list|)
throws|throws
name|SAXException
block|{
block|}
comment|/**      * Does nothing.      *       * @param name      * @throws SAXException      */
specifier|public
name|void
name|skippedEntity
parameter_list|(
name|String
name|name
parameter_list|)
throws|throws
name|SAXException
block|{
block|}
comment|/**      * Does nothing.      *       * @param locator      */
specifier|public
name|void
name|setDocumentLocator
parameter_list|(
name|Locator
name|locator
parameter_list|)
block|{
block|}
comment|/**      * Does nothing.      *       * @param target      * @param data      * @throws SAXException      */
specifier|public
name|void
name|processingInstruction
parameter_list|(
name|String
name|target
parameter_list|,
name|String
name|data
parameter_list|)
throws|throws
name|SAXException
block|{
block|}
comment|/**      * Does nothing.      *       * @param prefix      * @param uri      * @throws SAXException      */
specifier|public
name|void
name|startPrefixMapping
parameter_list|(
name|String
name|prefix
parameter_list|,
name|String
name|uri
parameter_list|)
throws|throws
name|SAXException
block|{
block|}
block|}
end_class

end_unit

