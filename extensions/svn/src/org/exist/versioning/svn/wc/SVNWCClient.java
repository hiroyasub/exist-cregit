begin_unit|revision:1.0.0;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * ====================================================================  * Copyright (c) 2004-2010 TMate Software Ltd.  All rights reserved.  *  * This software is licensed as described in the file COPYING, which  * you should have received as part of this distribution.  The terms  * are also available at http://svnkit.com/license.html  * If newer versions of this license are posted there, you may use a  * newer version instead, at your option.  * ====================================================================  */
end_comment

begin_package
package|package
name|org
operator|.
name|exist
operator|.
name|versioning
operator|.
name|svn
operator|.
name|wc
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|File
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|InputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|OutputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collection
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collections
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Date
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Iterator
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|logging
operator|.
name|Level
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|versioning
operator|.
name|svn
operator|.
name|Resource
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|versioning
operator|.
name|svn
operator|.
name|internal
operator|.
name|wc
operator|.
name|SVNAdminUtil
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|versioning
operator|.
name|svn
operator|.
name|internal
operator|.
name|wc
operator|.
name|SVNCancellableOutputStream
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|versioning
operator|.
name|svn
operator|.
name|internal
operator|.
name|wc
operator|.
name|SVNCommitUtil
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|versioning
operator|.
name|svn
operator|.
name|internal
operator|.
name|wc
operator|.
name|SVNErrorManager
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|versioning
operator|.
name|svn
operator|.
name|internal
operator|.
name|wc
operator|.
name|SVNEventFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|versioning
operator|.
name|svn
operator|.
name|internal
operator|.
name|wc
operator|.
name|SVNExternal
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|versioning
operator|.
name|svn
operator|.
name|internal
operator|.
name|wc
operator|.
name|SVNFileListUtil
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|versioning
operator|.
name|svn
operator|.
name|internal
operator|.
name|wc
operator|.
name|SVNFileType
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|versioning
operator|.
name|svn
operator|.
name|internal
operator|.
name|wc
operator|.
name|SVNFileUtil
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|versioning
operator|.
name|svn
operator|.
name|internal
operator|.
name|wc
operator|.
name|SVNPropertiesManager
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|versioning
operator|.
name|svn
operator|.
name|internal
operator|.
name|wc
operator|.
name|SVNStatusEditor
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|versioning
operator|.
name|svn
operator|.
name|internal
operator|.
name|wc
operator|.
name|SVNTreeConflictUtil
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|versioning
operator|.
name|svn
operator|.
name|internal
operator|.
name|wc
operator|.
name|SVNWCManager
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|versioning
operator|.
name|svn
operator|.
name|internal
operator|.
name|wc
operator|.
name|admin
operator|.
name|ISVNEntryHandler
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|versioning
operator|.
name|svn
operator|.
name|internal
operator|.
name|wc
operator|.
name|admin
operator|.
name|SVNAdminArea
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|versioning
operator|.
name|svn
operator|.
name|internal
operator|.
name|wc
operator|.
name|admin
operator|.
name|SVNAdminAreaFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|versioning
operator|.
name|svn
operator|.
name|internal
operator|.
name|wc
operator|.
name|admin
operator|.
name|SVNAdminAreaInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|versioning
operator|.
name|svn
operator|.
name|internal
operator|.
name|wc
operator|.
name|admin
operator|.
name|SVNEntry
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|versioning
operator|.
name|svn
operator|.
name|internal
operator|.
name|wc
operator|.
name|admin
operator|.
name|SVNLog
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|versioning
operator|.
name|svn
operator|.
name|internal
operator|.
name|wc
operator|.
name|admin
operator|.
name|SVNTranslator
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|versioning
operator|.
name|svn
operator|.
name|internal
operator|.
name|wc
operator|.
name|admin
operator|.
name|SVNVersionedProperties
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|versioning
operator|.
name|svn
operator|.
name|internal
operator|.
name|wc
operator|.
name|admin
operator|.
name|SVNWCAccess
import|;
end_import

begin_import
import|import
name|org
operator|.
name|tmatesoft
operator|.
name|svn
operator|.
name|core
operator|.
name|SVNCancelException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|tmatesoft
operator|.
name|svn
operator|.
name|core
operator|.
name|SVNCommitInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|tmatesoft
operator|.
name|svn
operator|.
name|core
operator|.
name|SVNDepth
import|;
end_import

begin_import
import|import
name|org
operator|.
name|tmatesoft
operator|.
name|svn
operator|.
name|core
operator|.
name|SVNDirEntry
import|;
end_import

begin_import
import|import
name|org
operator|.
name|tmatesoft
operator|.
name|svn
operator|.
name|core
operator|.
name|SVNErrorCode
import|;
end_import

begin_import
import|import
name|org
operator|.
name|tmatesoft
operator|.
name|svn
operator|.
name|core
operator|.
name|SVNErrorMessage
import|;
end_import

begin_import
import|import
name|org
operator|.
name|tmatesoft
operator|.
name|svn
operator|.
name|core
operator|.
name|SVNException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|tmatesoft
operator|.
name|svn
operator|.
name|core
operator|.
name|SVNLock
import|;
end_import

begin_import
import|import
name|org
operator|.
name|tmatesoft
operator|.
name|svn
operator|.
name|core
operator|.
name|SVNNodeKind
import|;
end_import

begin_import
import|import
name|org
operator|.
name|tmatesoft
operator|.
name|svn
operator|.
name|core
operator|.
name|SVNProperties
import|;
end_import

begin_import
import|import
name|org
operator|.
name|tmatesoft
operator|.
name|svn
operator|.
name|core
operator|.
name|SVNProperty
import|;
end_import

begin_import
import|import
name|org
operator|.
name|tmatesoft
operator|.
name|svn
operator|.
name|core
operator|.
name|SVNPropertyValue
import|;
end_import

begin_import
import|import
name|org
operator|.
name|tmatesoft
operator|.
name|svn
operator|.
name|core
operator|.
name|SVNRevisionProperty
import|;
end_import

begin_import
import|import
name|org
operator|.
name|tmatesoft
operator|.
name|svn
operator|.
name|core
operator|.
name|SVNURL
import|;
end_import

begin_import
import|import
name|org
operator|.
name|tmatesoft
operator|.
name|svn
operator|.
name|core
operator|.
name|auth
operator|.
name|ISVNAuthenticationManager
import|;
end_import

begin_import
import|import
name|org
operator|.
name|tmatesoft
operator|.
name|svn
operator|.
name|core
operator|.
name|internal
operator|.
name|util
operator|.
name|SVNDate
import|;
end_import

begin_import
import|import
name|org
operator|.
name|tmatesoft
operator|.
name|svn
operator|.
name|core
operator|.
name|internal
operator|.
name|util
operator|.
name|SVNEncodingUtil
import|;
end_import

begin_import
import|import
name|org
operator|.
name|tmatesoft
operator|.
name|svn
operator|.
name|core
operator|.
name|internal
operator|.
name|util
operator|.
name|SVNHashMap
import|;
end_import

begin_import
import|import
name|org
operator|.
name|tmatesoft
operator|.
name|svn
operator|.
name|core
operator|.
name|internal
operator|.
name|util
operator|.
name|SVNHashSet
import|;
end_import

begin_import
import|import
name|org
operator|.
name|tmatesoft
operator|.
name|svn
operator|.
name|core
operator|.
name|internal
operator|.
name|util
operator|.
name|SVNPathUtil
import|;
end_import

begin_import
import|import
name|org
operator|.
name|tmatesoft
operator|.
name|svn
operator|.
name|core
operator|.
name|internal
operator|.
name|util
operator|.
name|SVNURLUtil
import|;
end_import

begin_import
import|import
name|org
operator|.
name|tmatesoft
operator|.
name|svn
operator|.
name|core
operator|.
name|internal
operator|.
name|wc
operator|.
name|IOExceptionWrapper
import|;
end_import

begin_import
import|import
name|org
operator|.
name|tmatesoft
operator|.
name|svn
operator|.
name|core
operator|.
name|internal
operator|.
name|wc
operator|.
name|ISVNFileContentFetcher
import|;
end_import

begin_import
import|import
name|org
operator|.
name|tmatesoft
operator|.
name|svn
operator|.
name|core
operator|.
name|io
operator|.
name|ISVNEditor
import|;
end_import

begin_import
import|import
name|org
operator|.
name|tmatesoft
operator|.
name|svn
operator|.
name|core
operator|.
name|io
operator|.
name|ISVNLockHandler
import|;
end_import

begin_import
import|import
name|org
operator|.
name|tmatesoft
operator|.
name|svn
operator|.
name|core
operator|.
name|io
operator|.
name|SVNRepository
import|;
end_import

begin_import
import|import
name|org
operator|.
name|tmatesoft
operator|.
name|svn
operator|.
name|core
operator|.
name|wc
operator|.
name|ISVNAddParameters
import|;
end_import

begin_import
import|import
name|org
operator|.
name|tmatesoft
operator|.
name|svn
operator|.
name|core
operator|.
name|wc
operator|.
name|ISVNRepositoryPool
import|;
end_import

begin_import
import|import
name|org
operator|.
name|tmatesoft
operator|.
name|svn
operator|.
name|core
operator|.
name|wc
operator|.
name|SVNRevision
import|;
end_import

begin_import
import|import
name|org
operator|.
name|tmatesoft
operator|.
name|svn
operator|.
name|util
operator|.
name|SVNDebugLog
import|;
end_import

begin_import
import|import
name|org
operator|.
name|tmatesoft
operator|.
name|svn
operator|.
name|util
operator|.
name|SVNLogType
import|;
end_import

begin_comment
comment|/**  * The<b>SVNWCClient</b> class combines a number of version control  * operations mainly intended for local work with Working Copy items. This class  * includes those operations that are destined only for local work on a  * Working Copy as well as those that are moreover able to access  a repository.  *<p/>  *<p/>  * Here's a list of the<b>SVNWCClient</b>'s methods  * matched against corresponing commands of the SVN command line  * client:  *<p/>  *<table cellpadding="3" cellspacing="1" border="0" width="70%" bgcolor="#999933">  *<tr bgcolor="#ADB8D9" align="left">  *<td><b>SVNKit</b></td>  *<td><b>Subversion</b></td>  *</tr>  *<tr bgcolor="#EAEAEA" align="left">  *<td>doAdd()</td><td>'svn add'</td>  *</tr>  *<tr bgcolor="#EAEAEA" align="left">  *<td>doGetFileContents()</td><td>'svn cat'</td>  *</tr>  *<tr bgcolor="#EAEAEA" align="left">  *<td>doDelete()</td><td>'svn delete'</td>  *</tr>  *<tr bgcolor="#EAEAEA" align="left">  *<td>doCleanup()</td><td>'svn cleanup'</td>  *</tr>  *<tr bgcolor="#EAEAEA" align="left">  *<td>doInfo()</td><td>'svn info'</td>  *</tr>  *<tr bgcolor="#EAEAEA" align="left">  *<td>doLock()</td><td>'svn lock'</td>  *</tr>  *<tr bgcolor="#EAEAEA" align="left">  *<td>doUnlock()</td><td>'svn unlock'</td>  *</tr>  *<tr bgcolor="#EAEAEA" align="left">  *<td>  * doSetProperty()  *</td>  *<td>  * 'svn propset PROPNAME PROPVAL PATH'<br />  * 'svn propdel PROPNAME PATH'<br />  * 'svn propedit PROPNAME PATH'  *</td>  *</tr>  *<tr bgcolor="#EAEAEA" align="left">  *<td>doSetRevisionProperty()</td>  *<td>  * 'svn propset PROPNAME --revprop -r REV PROPVAL [URL]'<br />  * 'svn propdel PROPNAME --revprop -r REV [URL]'<br />  * 'svn propedit PROPNAME --revprop -r REV [URL]'  *</td>  *</tr>  *<tr bgcolor="#EAEAEA" align="left">  *<td>  * doGetProperty()  *</td>  *<td>  * 'svn propget PROPNAME PATH'<br />  * 'svn proplist PATH'  *</td>  *<tr bgcolor="#EAEAEA" align="left">  *<td>doGetRevisionProperty()</td>  *<td>  * 'svn propget PROPNAME --revprop -r REV [URL]'<br />  * 'svn proplist --revprop -r REV [URL]'  *</td>  *</tr>  *</tr>  *<tr bgcolor="#EAEAEA" align="left">  *<td>doResolve()</td><td>'svn resolved'</td>  *</tr>  *<tr bgcolor="#EAEAEA" align="left">  *<td>doRevert()</td><td>'svn revert'</td>  *</tr>  *</table>  *  * @version 1.3  * @author  TMate Software Ltd.  * @since   1.2  * @see<a target="_top" href="http://svnkit.com/kb/examples/">Examples</a>  */
end_comment

begin_class
specifier|public
class|class
name|SVNWCClient
extends|extends
name|SVNBasicClient
block|{
comment|/**      * Default implementation of {@link ISVNAddParameters} which      *<code>onInconsistentEOLs(File file)</code> always returns the       * {@link ISVNAddParameters#REPORT_ERROR} action.      *       * @since 1.2      */
specifier|public
specifier|static
name|ISVNAddParameters
name|DEFAULT_ADD_PARAMETERS
init|=
operator|new
name|ISVNAddParameters
argument_list|()
block|{
specifier|public
name|Action
name|onInconsistentEOLs
parameter_list|(
name|File
name|file
parameter_list|)
block|{
return|return
name|ISVNAddParameters
operator|.
name|REPORT_ERROR
return|;
block|}
block|}
decl_stmt|;
specifier|private
name|ISVNAddParameters
name|myAddParameters
decl_stmt|;
specifier|private
name|ISVNCommitHandler
name|myCommitHandler
decl_stmt|;
specifier|private
name|boolean
name|myIsRevertMissingDirectories
decl_stmt|;
comment|/**      * Constructs and initializes an<b>SVNWCClient</b> object      * with the specified run-time configuration and authentication      * drivers.      *<p/>      *<p/>      * If<code>options</code> is<span class="javakeyword">null</span>,      * then this<b>SVNWCClient</b> will be using a default run-time      * configuration driver  which takes client-side settings from the      * default SVN's run-time configuration area but is not able to      * change those settings (read more on {@link ISVNOptions} and {@link SVNWCUtil}).      *<p/>      *<p/>      * If<code>authManager</code> is<span class="javakeyword">null</span>,      * then this<b>SVNWCClient</b> will be using a default authentication      * and network layers driver (see {@link SVNWCUtil#createDefaultAuthenticationManager()})      * which uses server-side settings and auth storage from the      * default SVN's run-time configuration area (or system properties      * if that area is not found).      *      * @param authManager an authentication and network layers driver      * @param options     a run-time configuration options driver      */
specifier|public
name|SVNWCClient
parameter_list|(
name|ISVNAuthenticationManager
name|authManager
parameter_list|,
name|ISVNOptions
name|options
parameter_list|)
block|{
name|super
argument_list|(
name|authManager
argument_list|,
name|options
argument_list|)
expr_stmt|;
block|}
comment|/**      * Constructs and initializes an<b>SVNWCClient</b> object      * with the specified run-time configuration and repository pool object.      *<p/>      *<p/>      * If<code>options</code> is<span class="javakeyword">null</span>,      * then this<b>SVNWCClient</b> will be using a default run-time      * configuration driver  which takes client-side settings from the      * default SVN's run-time configuration area but is not able to      * change those settings (read more on {@link ISVNOptions} and {@link SVNWCUtil}).      *<p/>      *<p/>      * If<code>repositoryPool</code> is<span class="javakeyword">null</span>,      * then {@link org.tmatesoft.svn.core.io.SVNRepositoryFactory} will be used to create {@link SVNRepository repository access objects}.      *      * @param repositoryPool   a repository pool object      * @param options          a run-time configuration options driver      */
specifier|public
name|SVNWCClient
parameter_list|(
name|ISVNRepositoryPool
name|repositoryPool
parameter_list|,
name|ISVNOptions
name|options
parameter_list|)
block|{
name|super
argument_list|(
name|repositoryPool
argument_list|,
name|options
argument_list|)
expr_stmt|;
block|}
comment|/**      * Sets custom add parameters to this client object.      *       * @param addParameters extra parameters for add operations      * @since 1.2      */
specifier|public
name|void
name|setAddParameters
parameter_list|(
name|ISVNAddParameters
name|addParameters
parameter_list|)
block|{
name|myAddParameters
operator|=
name|addParameters
expr_stmt|;
block|}
comment|/**      * Returns the specified commit handler (if set) being in use or a default one      * (<b>DefaultSVNCommitHandler</b>) if no special      * implementations of<b>ISVNCommitHandler</b> were      * previousely provided.      *      * @return the commit handler being in use or a default one      * @see #setCommitHandler(ISVNCommitHandler)      * @see DefaultSVNCommitHandler      */
specifier|public
name|ISVNCommitHandler
name|getCommitHandler
parameter_list|()
block|{
if|if
condition|(
name|myCommitHandler
operator|==
literal|null
condition|)
block|{
name|myCommitHandler
operator|=
operator|new
name|DefaultSVNCommitHandler
argument_list|()
expr_stmt|;
block|}
return|return
name|myCommitHandler
return|;
block|}
comment|/**      * Sets an implementation of<b>ISVNCommitHandler</b> to      * the commit handler that will be used during commit operations to handle      * commit log messages. The handler will receive a clien's log message and items      * (represented as<b>SVNCommitItem</b> objects) that will be      * committed. Depending on implementor's aims the initial log message can      * be modified (or something else) and returned back.      *<p/>      *<p/>      * If using<b>SVNWCClient</b> without specifying any      * commit handler then a default one will be used - {@link DefaultSVNCommitHandler}.      *      * @param handler an implementor's handler that will be used to handle      *                commit log messages      * @see #getCommitHandler()      * @see ISVNCommitHandler      */
specifier|public
name|void
name|setCommitHandler
parameter_list|(
name|ISVNCommitHandler
name|handler
parameter_list|)
block|{
name|myCommitHandler
operator|=
name|handler
expr_stmt|;
block|}
comment|/**      * Returns the add parameters object used by this object.      * If no custom object was specified through a call to {@link #setAddParameters(ISVNAddParameters)}       * then {@link #DEFAULT_ADD_PARAMETERS} is returned.      *       * @return add parameters object      * @since 1.2      */
specifier|protected
name|ISVNAddParameters
name|getAddParameters
parameter_list|()
block|{
if|if
condition|(
name|myAddParameters
operator|==
literal|null
condition|)
block|{
return|return
name|DEFAULT_ADD_PARAMETERS
return|;
block|}
return|return
name|myAddParameters
return|;
block|}
specifier|public
name|void
name|setRevertMissingDirectories
parameter_list|(
name|boolean
name|revertMissing
parameter_list|)
block|{
name|myIsRevertMissingDirectories
operator|=
name|revertMissing
expr_stmt|;
block|}
specifier|public
name|boolean
name|isRevertMissingDirectories
parameter_list|()
block|{
return|return
name|myIsRevertMissingDirectories
return|;
block|}
comment|/**      * Outputs the content of file identified by<code>path</code> and<code>revision</code>       * to the stream<code>dst</code>. The actual node revision selected      * is determined by the path as it exists in<code>pegRevision</code>. If<code>pegRevision</code>      * is {@link SVNRevision#UNDEFINED}, then it defaults to {@link SVNRevision#WORKING}.      *       *<p/>       * If<vode>revision</code> is one of:      *<ul>      *<li>{@link SVNRevision#BASE}      *<li>{@link SVNRevision#WORKING}      *<li>{@link SVNRevision#COMMITTED}      *</ul>      * then the file contents are taken from the working copy file item (no network connection is needed).      * Otherwise the file item's contents are taken from the repository at a particular revision.      *      * @param path           working copy path      * @param pegRevision    revision in which the file item is first looked up      * @param revision       target revision      * @param expandKeywords if<span class="javakeyword">true</span> then      *                       all keywords presenting in the file and listed in      *                       the file's {@link org.tmatesoft.svn.core.SVNProperty#KEYWORDS}      *                       property (if set) will be substituted, otherwise not      * @param dst            the destination where the file contents will be written to      * @throws SVNException  if one of the following is true:      *<ul>      *<li><code>path</code> refers to a directory      *<li><code>path</code> does not exist      *<li><code>path</code> is not under version control      *</ul>      * @see #doGetFileContents(SVNURL,SVNRevision,SVNRevision,boolean,OutputStream)      */
specifier|public
name|void
name|doGetFileContents
parameter_list|(
name|File
name|path
parameter_list|,
name|SVNRevision
name|pegRevision
parameter_list|,
name|SVNRevision
name|revision
parameter_list|,
name|boolean
name|expandKeywords
parameter_list|,
name|OutputStream
name|dst
parameter_list|)
throws|throws
name|SVNException
block|{
if|if
condition|(
name|dst
operator|==
literal|null
condition|)
block|{
return|return;
block|}
if|if
condition|(
name|revision
operator|==
literal|null
operator|||
operator|!
name|revision
operator|.
name|isValid
argument_list|()
condition|)
block|{
name|revision
operator|=
name|SVNRevision
operator|.
name|BASE
expr_stmt|;
block|}
if|else if
condition|(
name|revision
operator|==
name|SVNRevision
operator|.
name|COMMITTED
condition|)
block|{
name|revision
operator|=
name|SVNRevision
operator|.
name|BASE
expr_stmt|;
block|}
if|if
condition|(
operator|(
operator|!
name|pegRevision
operator|.
name|isValid
argument_list|()
operator|||
name|pegRevision
operator|==
name|SVNRevision
operator|.
name|BASE
operator|||
name|pegRevision
operator|==
name|SVNRevision
operator|.
name|WORKING
operator|)
operator|&&
operator|(
operator|!
name|revision
operator|.
name|isValid
argument_list|()
operator|||
name|revision
operator|==
name|SVNRevision
operator|.
name|BASE
operator|||
name|revision
operator|==
name|SVNRevision
operator|.
name|WORKING
operator|)
condition|)
block|{
name|doGetLocalFileContents
argument_list|(
name|path
argument_list|,
name|dst
argument_list|,
name|revision
argument_list|,
name|expandKeywords
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|SVNRepository
name|repos
init|=
name|createRepository
argument_list|(
literal|null
argument_list|,
name|path
argument_list|,
literal|null
argument_list|,
name|pegRevision
argument_list|,
name|revision
argument_list|,
literal|null
argument_list|)
decl_stmt|;
name|checkCancelled
argument_list|()
expr_stmt|;
name|long
name|revNumber
init|=
name|getRevisionNumber
argument_list|(
name|revision
argument_list|,
name|repos
argument_list|,
name|path
argument_list|)
decl_stmt|;
name|SVNNodeKind
name|kind
init|=
name|repos
operator|.
name|checkPath
argument_list|(
literal|""
argument_list|,
name|revNumber
argument_list|)
decl_stmt|;
if|if
condition|(
name|kind
operator|==
name|SVNNodeKind
operator|.
name|DIR
condition|)
block|{
name|SVNErrorMessage
name|err
init|=
name|SVNErrorMessage
operator|.
name|create
argument_list|(
name|SVNErrorCode
operator|.
name|CLIENT_IS_DIRECTORY
argument_list|,
literal|"URL ''{0}'' refers to a directory"
argument_list|,
name|repos
operator|.
name|getLocation
argument_list|()
argument_list|)
decl_stmt|;
name|SVNErrorManager
operator|.
name|error
argument_list|(
name|err
argument_list|,
name|SVNLogType
operator|.
name|WC
argument_list|)
expr_stmt|;
block|}
name|checkCancelled
argument_list|()
expr_stmt|;
if|if
condition|(
operator|!
name|expandKeywords
condition|)
block|{
name|repos
operator|.
name|getFile
argument_list|(
literal|""
argument_list|,
name|revNumber
argument_list|,
literal|null
argument_list|,
operator|new
name|SVNCancellableOutputStream
argument_list|(
name|dst
argument_list|,
name|this
argument_list|)
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|SVNProperties
name|properties
init|=
operator|new
name|SVNProperties
argument_list|()
decl_stmt|;
name|repos
operator|.
name|getFile
argument_list|(
literal|""
argument_list|,
name|revNumber
argument_list|,
name|properties
argument_list|,
literal|null
argument_list|)
expr_stmt|;
name|checkCancelled
argument_list|()
expr_stmt|;
name|String
name|keywords
init|=
name|properties
operator|.
name|getStringValue
argument_list|(
name|SVNProperty
operator|.
name|KEYWORDS
argument_list|)
decl_stmt|;
name|String
name|eol
init|=
name|properties
operator|.
name|getStringValue
argument_list|(
name|SVNProperty
operator|.
name|EOL_STYLE
argument_list|)
decl_stmt|;
name|String
name|charset
init|=
name|SVNTranslator
operator|.
name|getCharset
argument_list|(
name|properties
operator|.
name|getStringValue
argument_list|(
name|SVNProperty
operator|.
name|CHARSET
argument_list|)
argument_list|,
name|path
operator|.
name|getPath
argument_list|()
argument_list|,
name|getOptions
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|keywords
operator|!=
literal|null
operator|||
name|eol
operator|!=
literal|null
operator|||
name|charset
operator|!=
literal|null
condition|)
block|{
name|String
name|cmtRev
init|=
name|properties
operator|.
name|getStringValue
argument_list|(
name|SVNProperty
operator|.
name|COMMITTED_REVISION
argument_list|)
decl_stmt|;
name|String
name|cmtDate
init|=
name|properties
operator|.
name|getStringValue
argument_list|(
name|SVNProperty
operator|.
name|COMMITTED_DATE
argument_list|)
decl_stmt|;
name|String
name|author
init|=
name|properties
operator|.
name|getStringValue
argument_list|(
name|SVNProperty
operator|.
name|LAST_AUTHOR
argument_list|)
decl_stmt|;
name|Map
name|keywordsMap
init|=
name|SVNTranslator
operator|.
name|computeKeywords
argument_list|(
name|keywords
argument_list|,
name|expandKeywords
condition|?
name|repos
operator|.
name|getLocation
argument_list|()
operator|.
name|toString
argument_list|()
else|:
literal|null
argument_list|,
name|author
argument_list|,
name|cmtDate
argument_list|,
name|cmtRev
argument_list|,
name|getOptions
argument_list|()
argument_list|)
decl_stmt|;
name|OutputStream
name|translatingStream
init|=
name|SVNTranslator
operator|.
name|getTranslatingOutputStream
argument_list|(
name|dst
argument_list|,
name|charset
argument_list|,
name|SVNTranslator
operator|.
name|getEOL
argument_list|(
name|eol
argument_list|,
name|getOptions
argument_list|()
argument_list|)
argument_list|,
literal|false
argument_list|,
name|keywordsMap
argument_list|,
name|expandKeywords
argument_list|)
decl_stmt|;
name|repos
operator|.
name|getFile
argument_list|(
literal|""
argument_list|,
name|revNumber
argument_list|,
literal|null
argument_list|,
operator|new
name|SVNCancellableOutputStream
argument_list|(
name|translatingStream
argument_list|,
name|getEventDispatcher
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
try|try
block|{
name|translatingStream
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOExceptionWrapper
name|ioew
parameter_list|)
block|{
throw|throw
name|ioew
operator|.
name|getOriginalException
argument_list|()
throw|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
name|SVNErrorManager
operator|.
name|error
argument_list|(
name|SVNErrorMessage
operator|.
name|create
argument_list|(
name|SVNErrorCode
operator|.
name|IO_ERROR
argument_list|,
name|e
operator|.
name|getMessage
argument_list|()
argument_list|)
argument_list|,
name|SVNLogType
operator|.
name|WC
argument_list|)
expr_stmt|;
block|}
block|}
else|else
block|{
name|repos
operator|.
name|getFile
argument_list|(
literal|""
argument_list|,
name|revNumber
argument_list|,
literal|null
argument_list|,
operator|new
name|SVNCancellableOutputStream
argument_list|(
name|dst
argument_list|,
name|getEventDispatcher
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
try|try
block|{
name|dst
operator|.
name|flush
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
name|SVNErrorManager
operator|.
name|error
argument_list|(
name|SVNErrorMessage
operator|.
name|create
argument_list|(
name|SVNErrorCode
operator|.
name|IO_ERROR
argument_list|,
name|e
operator|.
name|getMessage
argument_list|()
argument_list|)
argument_list|,
name|SVNLogType
operator|.
name|WC
argument_list|)
expr_stmt|;
block|}
block|}
block|}
comment|/**      * Outputs the content of file identified by<code>url</code> and<code>revision</code>       * to the stream<code>dst</code>. The actual node revision selected      * is determined by the path as it exists in<code>pegRevision</code>. If<code>pegRevision</code>      * is {@link SVNRevision#UNDEFINED}, then it defaults to {@link SVNRevision#HEAD}.      *       * @param url            a file item's repository location      * @param pegRevision    a revision in which the file item is first looked up      * @param revision       a target revision      * @param expandKeywords if<span class="javakeyword">true</span> then      *                       all keywords presenting in the file and listed in      *                       the file's {@link org.tmatesoft.svn.core.SVNProperty#KEYWORDS}      *                       property (if set) will be substituted, otherwise not      * @param dst            the destination where the file contents will be written to      * @throws SVNException if one of the following is true:      *<ul>      *<li><code>url</code> refers to a directory      *<li>it's impossible to create temporary files      *                      ({@link java.io.File#createTempFile(java.lang.String,java.lang.String) createTempFile()}      *                      fails) necessary for file translating      *</ul>      * @see #doGetFileContents(File,SVNRevision,SVNRevision,boolean,OutputStream)      */
specifier|public
name|void
name|doGetFileContents
parameter_list|(
name|SVNURL
name|url
parameter_list|,
name|SVNRevision
name|pegRevision
parameter_list|,
name|SVNRevision
name|revision
parameter_list|,
name|boolean
name|expandKeywords
parameter_list|,
name|OutputStream
name|dst
parameter_list|)
throws|throws
name|SVNException
block|{
name|revision
operator|=
name|revision
operator|==
literal|null
operator|||
operator|!
name|revision
operator|.
name|isValid
argument_list|()
condition|?
name|SVNRevision
operator|.
name|HEAD
else|:
name|revision
expr_stmt|;
comment|// now get contents from URL.
name|SVNRepository
name|repos
init|=
name|createRepository
argument_list|(
name|url
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|,
name|pegRevision
argument_list|,
name|revision
argument_list|,
literal|null
argument_list|)
decl_stmt|;
name|checkCancelled
argument_list|()
expr_stmt|;
name|long
name|revNumber
init|=
name|getRevisionNumber
argument_list|(
name|revision
argument_list|,
name|repos
argument_list|,
literal|null
argument_list|)
decl_stmt|;
name|checkCancelled
argument_list|()
expr_stmt|;
name|SVNNodeKind
name|nodeKind
init|=
name|repos
operator|.
name|checkPath
argument_list|(
literal|""
argument_list|,
name|revNumber
argument_list|)
decl_stmt|;
name|checkCancelled
argument_list|()
expr_stmt|;
if|if
condition|(
name|nodeKind
operator|==
name|SVNNodeKind
operator|.
name|DIR
condition|)
block|{
name|SVNErrorMessage
name|err
init|=
name|SVNErrorMessage
operator|.
name|create
argument_list|(
name|SVNErrorCode
operator|.
name|CLIENT_IS_DIRECTORY
argument_list|,
literal|"URL ''{0}'' refers to a directory"
argument_list|,
name|url
argument_list|)
decl_stmt|;
name|SVNErrorManager
operator|.
name|error
argument_list|(
name|err
argument_list|,
name|SVNLogType
operator|.
name|WC
argument_list|)
expr_stmt|;
block|}
name|checkCancelled
argument_list|()
expr_stmt|;
if|if
condition|(
operator|!
name|expandKeywords
condition|)
block|{
name|repos
operator|.
name|getFile
argument_list|(
literal|""
argument_list|,
name|revNumber
argument_list|,
literal|null
argument_list|,
operator|new
name|SVNCancellableOutputStream
argument_list|(
name|dst
argument_list|,
name|this
argument_list|)
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|SVNProperties
name|properties
init|=
operator|new
name|SVNProperties
argument_list|()
decl_stmt|;
name|repos
operator|.
name|getFile
argument_list|(
literal|""
argument_list|,
name|revNumber
argument_list|,
name|properties
argument_list|,
literal|null
argument_list|)
expr_stmt|;
name|checkCancelled
argument_list|()
expr_stmt|;
name|String
name|charset
init|=
name|SVNTranslator
operator|.
name|getCharset
argument_list|(
name|properties
operator|.
name|getStringValue
argument_list|(
name|SVNProperty
operator|.
name|CHARSET
argument_list|)
argument_list|,
name|repos
operator|.
name|getLocation
argument_list|()
operator|.
name|toDecodedString
argument_list|()
argument_list|,
name|getOptions
argument_list|()
argument_list|)
decl_stmt|;
name|String
name|keywords
init|=
name|properties
operator|.
name|getStringValue
argument_list|(
name|SVNProperty
operator|.
name|KEYWORDS
argument_list|)
decl_stmt|;
name|String
name|eol
init|=
name|properties
operator|.
name|getStringValue
argument_list|(
name|SVNProperty
operator|.
name|EOL_STYLE
argument_list|)
decl_stmt|;
if|if
condition|(
name|charset
operator|!=
literal|null
operator|||
name|keywords
operator|!=
literal|null
operator|||
name|eol
operator|!=
literal|null
condition|)
block|{
name|String
name|cmtRev
init|=
name|properties
operator|.
name|getStringValue
argument_list|(
name|SVNProperty
operator|.
name|COMMITTED_REVISION
argument_list|)
decl_stmt|;
name|String
name|cmtDate
init|=
name|properties
operator|.
name|getStringValue
argument_list|(
name|SVNProperty
operator|.
name|COMMITTED_DATE
argument_list|)
decl_stmt|;
name|String
name|author
init|=
name|properties
operator|.
name|getStringValue
argument_list|(
name|SVNProperty
operator|.
name|LAST_AUTHOR
argument_list|)
decl_stmt|;
name|Map
name|keywordsMap
init|=
name|SVNTranslator
operator|.
name|computeKeywords
argument_list|(
name|keywords
argument_list|,
name|expandKeywords
condition|?
name|repos
operator|.
name|getLocation
argument_list|()
operator|.
name|toString
argument_list|()
else|:
literal|null
argument_list|,
name|author
argument_list|,
name|cmtDate
argument_list|,
name|cmtRev
argument_list|,
name|getOptions
argument_list|()
argument_list|)
decl_stmt|;
name|OutputStream
name|translatingStream
init|=
name|SVNTranslator
operator|.
name|getTranslatingOutputStream
argument_list|(
name|dst
argument_list|,
name|charset
argument_list|,
name|SVNTranslator
operator|.
name|getEOL
argument_list|(
name|eol
argument_list|,
name|getOptions
argument_list|()
argument_list|)
argument_list|,
literal|false
argument_list|,
name|keywordsMap
argument_list|,
name|expandKeywords
argument_list|)
decl_stmt|;
name|repos
operator|.
name|getFile
argument_list|(
literal|""
argument_list|,
name|revNumber
argument_list|,
literal|null
argument_list|,
operator|new
name|SVNCancellableOutputStream
argument_list|(
name|translatingStream
argument_list|,
name|getEventDispatcher
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
try|try
block|{
name|translatingStream
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOExceptionWrapper
name|ioew
parameter_list|)
block|{
throw|throw
name|ioew
operator|.
name|getOriginalException
argument_list|()
throw|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
name|SVNErrorManager
operator|.
name|error
argument_list|(
name|SVNErrorMessage
operator|.
name|create
argument_list|(
name|SVNErrorCode
operator|.
name|IO_ERROR
argument_list|,
name|e
operator|.
name|getMessage
argument_list|()
argument_list|)
argument_list|,
name|SVNLogType
operator|.
name|WC
argument_list|)
expr_stmt|;
block|}
block|}
else|else
block|{
name|repos
operator|.
name|getFile
argument_list|(
literal|""
argument_list|,
name|revNumber
argument_list|,
literal|null
argument_list|,
operator|new
name|SVNCancellableOutputStream
argument_list|(
name|dst
argument_list|,
name|getEventDispatcher
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
try|try
block|{
name|dst
operator|.
name|flush
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
name|SVNErrorManager
operator|.
name|error
argument_list|(
name|SVNErrorMessage
operator|.
name|create
argument_list|(
name|SVNErrorCode
operator|.
name|IO_ERROR
argument_list|,
name|e
operator|.
name|getMessage
argument_list|()
argument_list|)
argument_list|,
name|SVNLogType
operator|.
name|WC
argument_list|)
expr_stmt|;
block|}
block|}
comment|/**      * Cleans up a working copy.      * This method is equivalent to a call to<code>doCleanup(path, false)</code>.      *        * @param  path         a WC path to start a cleanup from      * @throws SVNException if one of the following is true:      *<ul>      *<li><code>path</code> does not exist      *<li><code>path</code>'s parent directory      *                      is not under version control      *</ul>      * @see                 #doCleanup(File, boolean)      */
specifier|public
name|void
name|doCleanup
parameter_list|(
name|File
name|path
parameter_list|)
throws|throws
name|SVNException
block|{
name|doCleanup
argument_list|(
name|path
argument_list|,
literal|false
argument_list|)
expr_stmt|;
block|}
comment|/**      * Recursively cleans up the working copy, removing locks and resuming      * unfinished operations.      *       *<p/>      * If you ever get a "working copy locked" error, use this method      * to remove stale locks and get your working copy into a usable      * state again.      *       *<p>      * This method operates only on working copies and does not open any network connection.      *       * @param  path                 a WC path to start a cleanup from      * @param  deleteWCProperties   if<span class="javakeyword">true</span>, removes DAV specific       *<span class="javastring">"svn:wc:"</span> properties from the working copy       * @throws SVNException         if one of the following is true:      *<ul>      *<li><code>path</code> does not exist      *<li><code>path</code>'s parent directory      *                              is not under version control      *</ul>      */
specifier|public
name|void
name|doCleanup
parameter_list|(
name|File
name|path
parameter_list|,
name|boolean
name|deleteWCProperties
parameter_list|)
throws|throws
name|SVNException
block|{
name|SVNFileType
name|fType
init|=
name|SVNFileType
operator|.
name|getType
argument_list|(
name|path
argument_list|)
decl_stmt|;
if|if
condition|(
name|fType
operator|==
name|SVNFileType
operator|.
name|NONE
condition|)
block|{
name|SVNErrorMessage
name|err
init|=
name|SVNErrorMessage
operator|.
name|create
argument_list|(
name|SVNErrorCode
operator|.
name|WC_PATH_NOT_FOUND
argument_list|,
literal|"''{0}'' does not exist"
argument_list|,
name|path
argument_list|)
decl_stmt|;
name|SVNErrorManager
operator|.
name|error
argument_list|(
name|err
argument_list|,
name|SVNLogType
operator|.
name|WC
argument_list|)
expr_stmt|;
block|}
if|else if
condition|(
name|fType
operator|==
name|SVNFileType
operator|.
name|FILE
condition|)
block|{
name|path
operator|=
name|path
operator|.
name|getParentFile
argument_list|()
expr_stmt|;
block|}
if|else if
condition|(
name|fType
operator|==
name|SVNFileType
operator|.
name|SYMLINK
condition|)
block|{
name|path
operator|=
name|SVNFileUtil
operator|.
name|resolveSymlink
argument_list|(
name|path
argument_list|)
expr_stmt|;
if|if
condition|(
name|SVNFileType
operator|.
name|getType
argument_list|(
name|path
argument_list|)
operator|==
name|SVNFileType
operator|.
name|FILE
condition|)
block|{
name|path
operator|=
name|path
operator|.
name|getParentFile
argument_list|()
expr_stmt|;
block|}
block|}
name|SVNWCAccess
name|wcAccess
init|=
name|createWCAccess
argument_list|()
decl_stmt|;
try|try
block|{
name|SVNAdminArea
name|adminArea
init|=
name|wcAccess
operator|.
name|open
argument_list|(
name|path
argument_list|,
literal|true
argument_list|,
literal|true
argument_list|,
literal|0
argument_list|)
decl_stmt|;
name|adminArea
operator|.
name|cleanup
argument_list|()
expr_stmt|;
if|if
condition|(
name|deleteWCProperties
condition|)
block|{
name|SVNPropertiesManager
operator|.
name|deleteWCProperties
argument_list|(
name|adminArea
argument_list|,
literal|null
argument_list|,
literal|true
argument_list|)
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
name|SVNException
name|e
parameter_list|)
block|{
if|if
condition|(
name|e
operator|instanceof
name|SVNCancelException
condition|)
block|{
throw|throw
name|e
throw|;
block|}
if|else if
condition|(
operator|!
name|SVNAdminArea
operator|.
name|isSafeCleanup
argument_list|()
condition|)
block|{
throw|throw
name|e
throw|;
block|}
name|SVNDebugLog
operator|.
name|getDefaultLog
argument_list|()
operator|.
name|logFine
argument_list|(
name|SVNLogType
operator|.
name|WC
argument_list|,
literal|"CLEANUP FAILED for "
operator|+
name|path
argument_list|)
expr_stmt|;
name|SVNDebugLog
operator|.
name|getDefaultLog
argument_list|()
operator|.
name|logFine
argument_list|(
name|SVNLogType
operator|.
name|WC
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
name|wcAccess
operator|.
name|close
argument_list|()
expr_stmt|;
name|sleepForTimeStamp
argument_list|()
expr_stmt|;
block|}
block|}
comment|/**      * Sets<code>propName</code> to<code>propValue</code> on<code>path</code>.      * A<code>propValue</code> of<span class="javakeyword">null</span> will delete       * the property.      *       *<p/>      * If<code>depth</code> is {@link org.tmatesoft.svn.core.SVNDepth#EMPTY}, set the property on<code>path</code>      * only; if {@link SVNDepth#FILES}, set it on<code>path</code> and its file      * children (if any); if {@link SVNDepth#IMMEDIATES}, on<code>path</code> and all      * of its immediate children (both files and directories); if      * {@link SVNDepth#INFINITY}, on<code>path</code> and everything beneath it.      *       *<p/>      * If<code>propName</code> is an svn-controlled property (i.e. prefixed with      *<span class="javastring">"svn:"</span>), then the caller is responsible for ensuring that      * the value uses LF line-endings.      *       *<p/>      * If<code>skipChecks</code> is<span class="javakeyword">true</span>, this method does no validity       * checking.  But if<code>skipChecks</code> is<span class="javakeyword">false</span>,       * and<code>propName</code> is not a valid property for<code>path</code>, it throws an exception,       * either with an error code {@link org.tmatesoft.svn.core.SVNErrorCode#ILLEGAL_TARGET}       * (if the property is not appropriate for<code>path</code>), or with       * {@link org.tmatesoft.svn.core.SVNErrorCode#BAD_MIME_TYPE} (if<code>propName</code> is       *<span class="javastring">"svn:mime-type"</span>, but<code>propVal</code> is not a valid mime-type).      *       *<p/>      *<code>changeLists</code> is a collection of<code>String</code> changelist      * names, used as a restrictive filter on items whose properties are      * set; that is, don't set properties on any item unless it's a member      * of one of those changelists.  If<code>changelists</code> is empty (or      *<span class="javakeyword">null</span>), no changelist filtering occurs.      *       *<p>      * This method operates only on working copies and does not open any network connection.      *       * @param path          working copy path      * @param propName      property name      * @param propValue     property value      * @param skipChecks<span class="javakeyword">true</span> to      *                      force the operation to run without validity checking       * @param depth         working copy tree depth to process         * @param handler       a caller's property handler      * @param changeLists   changelist names      * @throws SVNException<ul>      *<li><code>path</code> does not exist      *<li>exception with {@link SVNErrorCode#CLIENT_PROPERTY_NAME} error code -       *                      if<code>propName</code> is a revision property name or not a valid property name or       *                      not a regular property name (one starting with       *                      a<span class="javastring">"svn:entry"</span> or       *<span class="javastring">"svn:wc"</span> prefix)      *</ul>      * @see   #doSetProperty(SVNURL, String, SVNPropertyValue, SVNRevision, String, SVNProperties, boolean, ISVNPropertyHandler)      * @since 1.2, SVN 1.5      */
specifier|public
name|void
name|doSetProperty
parameter_list|(
name|File
name|path
parameter_list|,
name|String
name|propName
parameter_list|,
name|SVNPropertyValue
name|propValue
parameter_list|,
name|boolean
name|skipChecks
parameter_list|,
name|SVNDepth
name|depth
parameter_list|,
name|ISVNPropertyHandler
name|handler
parameter_list|,
name|Collection
name|changeLists
parameter_list|)
throws|throws
name|SVNException
block|{
name|depth
operator|=
name|depth
operator|==
literal|null
condition|?
name|SVNDepth
operator|.
name|UNKNOWN
else|:
name|depth
expr_stmt|;
name|int
name|admLockLevel
init|=
name|SVNWCAccess
operator|.
name|INFINITE_DEPTH
decl_stmt|;
if|if
condition|(
name|depth
operator|==
name|SVNDepth
operator|.
name|EMPTY
operator|||
name|depth
operator|==
name|SVNDepth
operator|.
name|FILES
condition|)
block|{
name|admLockLevel
operator|=
literal|0
expr_stmt|;
block|}
if|if
condition|(
name|propValue
operator|!=
literal|null
operator|&&
operator|!
name|SVNPropertiesManager
operator|.
name|isValidPropertyName
argument_list|(
name|propName
argument_list|)
condition|)
block|{
name|SVNErrorMessage
name|err
init|=
name|SVNErrorMessage
operator|.
name|create
argument_list|(
name|SVNErrorCode
operator|.
name|CLIENT_PROPERTY_NAME
argument_list|,
literal|"Bad property name ''{0}''"
argument_list|,
name|propName
argument_list|)
decl_stmt|;
name|SVNErrorManager
operator|.
name|error
argument_list|(
name|err
argument_list|,
name|SVNLogType
operator|.
name|WC
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|SVNRevisionProperty
operator|.
name|isRevisionProperty
argument_list|(
name|propName
argument_list|)
condition|)
block|{
name|SVNErrorMessage
name|err
init|=
name|SVNErrorMessage
operator|.
name|create
argument_list|(
name|SVNErrorCode
operator|.
name|CLIENT_PROPERTY_NAME
argument_list|,
literal|"Revision property ''{0}'' not allowed in this context"
argument_list|,
name|propName
argument_list|)
decl_stmt|;
name|SVNErrorManager
operator|.
name|error
argument_list|(
name|err
argument_list|,
name|SVNLogType
operator|.
name|WC
argument_list|)
expr_stmt|;
block|}
if|else if
condition|(
name|SVNProperty
operator|.
name|isWorkingCopyProperty
argument_list|(
name|propName
argument_list|)
condition|)
block|{
name|SVNErrorMessage
name|err
init|=
name|SVNErrorMessage
operator|.
name|create
argument_list|(
name|SVNErrorCode
operator|.
name|CLIENT_PROPERTY_NAME
argument_list|,
literal|"''{0}'' is a wcprop, thus not accessible to clients"
argument_list|,
name|propName
argument_list|)
decl_stmt|;
name|SVNErrorManager
operator|.
name|error
argument_list|(
name|err
argument_list|,
name|SVNLogType
operator|.
name|WC
argument_list|)
expr_stmt|;
block|}
if|else if
condition|(
name|SVNProperty
operator|.
name|isEntryProperty
argument_list|(
name|propName
argument_list|)
condition|)
block|{
name|SVNErrorMessage
name|err
init|=
name|SVNErrorMessage
operator|.
name|create
argument_list|(
name|SVNErrorCode
operator|.
name|CLIENT_PROPERTY_NAME
argument_list|,
literal|"Property ''{0}'' is an entry property"
argument_list|,
name|propName
argument_list|)
decl_stmt|;
name|SVNErrorManager
operator|.
name|error
argument_list|(
name|err
argument_list|,
name|SVNLogType
operator|.
name|WC
argument_list|)
expr_stmt|;
block|}
name|SVNWCAccess
name|wcAccess
init|=
name|createWCAccess
argument_list|()
decl_stmt|;
try|try
block|{
name|wcAccess
operator|.
name|probeOpen
argument_list|(
name|path
argument_list|,
literal|true
argument_list|,
name|admLockLevel
argument_list|)
expr_stmt|;
name|SVNEntry
name|entry
init|=
name|wcAccess
operator|.
name|getVersionedEntry
argument_list|(
name|path
argument_list|,
literal|false
argument_list|)
decl_stmt|;
if|if
condition|(
name|SVNDepth
operator|.
name|FILES
operator|.
name|compareTo
argument_list|(
name|depth
argument_list|)
operator|<=
literal|0
operator|&&
name|entry
operator|.
name|isDirectory
argument_list|()
condition|)
block|{
name|PropSetHandler
name|entryHandler
init|=
operator|new
name|PropSetHandler
argument_list|(
name|skipChecks
argument_list|,
name|propName
argument_list|,
name|propValue
argument_list|,
name|handler
argument_list|,
name|changeLists
argument_list|)
decl_stmt|;
name|wcAccess
operator|.
name|walkEntries
argument_list|(
name|path
argument_list|,
name|entryHandler
argument_list|,
literal|false
argument_list|,
name|depth
argument_list|)
expr_stmt|;
block|}
if|else if
condition|(
name|SVNWCAccess
operator|.
name|matchesChangeList
argument_list|(
name|changeLists
argument_list|,
name|entry
argument_list|)
condition|)
block|{
name|boolean
name|modified
init|=
name|SVNPropertiesManager
operator|.
name|setProperty
argument_list|(
name|wcAccess
argument_list|,
name|path
argument_list|,
name|propName
argument_list|,
name|propValue
argument_list|,
name|skipChecks
argument_list|)
decl_stmt|;
if|if
condition|(
name|modified
operator|&&
name|handler
operator|!=
literal|null
condition|)
block|{
name|handler
operator|.
name|handleProperty
argument_list|(
name|path
argument_list|,
operator|new
name|SVNPropertyData
argument_list|(
name|propName
argument_list|,
name|propValue
argument_list|,
name|getOptions
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
block|}
finally|finally
block|{
name|wcAccess
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
block|}
comment|/**      * Crawls the working copy at<code>path</code> and calls {@link ISVNPropertyValueProvider#providePropertyValues(java.io.File, org.tmatesoft.svn.core.SVNProperties)}      * to get properties to be change on each path being traversed      *      *<p/>      * If<code>depth</code> is {@link org.tmatesoft.svn.core.SVNDepth#EMPTY}, change the properties on<code>path</code>      * only; if {@link SVNDepth#FILES}, change the properties on<code>path</code> and its file      * children (if any); if {@link SVNDepth#IMMEDIATES}, on<code>path</code> and all      * of its immediate children (both files and directories); if      * {@link SVNDepth#INFINITY}, on<code>path</code> and everything beneath it.      *      *<p/>      * If<code>skipChecks</code> is<span class="javakeyword">true</span>, this method does no validity      * checking of changed properties.  But if<code>skipChecks</code> is<span class="javakeyword">false</span>,      * and changed property name is not a valid property for<code>path</code>, it throws an exception,      * either with an error code {@link org.tmatesoft.svn.core.SVNErrorCode#ILLEGAL_TARGET}      * (if the property is not appropriate for<code>path</code>), or with      * {@link org.tmatesoft.svn.core.SVNErrorCode#BAD_MIME_TYPE} (if changed propery name is      *<span class="javastring">"svn:mime-type"</span>, but changed property value is not a valid mime-type).      *      *<p/>      *<code>changeLists</code> is a collection of<code>String</code> changelist      * names, used as a restrictive filter on items whose properties are      * set; that is, don't set properties on any item unless it's a member      * of one of those changelists.  If<code>changelists</code> is empty (or      *<span class="javakeyword">null</span>), no changelist filtering occurs.      *      *<p>      * This method operates only on working copies and does not open any network connection.      *      * @param path                         working copy path      * @param propertyValueProvider        changed properties provider      * @param skipChecks<span class="javakeyword">true</span> to      *                                     force the operation to run without validity checking      * @param depth                        working copy tree depth to process      * @param handler                      a caller's property handler      * @param changeLists                  changelist names      * @throws SVNException<ul>      *<li><code>path</code> does not exist      *<li>exception with {@link SVNErrorCode#CLIENT_PROPERTY_NAME} error code -      *                                     if changed property name is a revision property name or not a valid property name or      *                                     not a regular property name (one starting with      *                                     a<span class="javastring">"svn:entry"</span> or      *<span class="javastring">"svn:wc"</span> prefix)      *</ul>      * @see   #doSetProperty(java.io.File, String, org.tmatesoft.svn.core.SVNPropertyValue, boolean, org.tmatesoft.svn.core.SVNDepth, ISVNPropertyHandler, java.util.Collection)       * @since 1.2, SVN 1.5      */
specifier|public
name|void
name|doSetProperty
parameter_list|(
name|File
name|path
parameter_list|,
name|ISVNPropertyValueProvider
name|propertyValueProvider
parameter_list|,
name|boolean
name|skipChecks
parameter_list|,
name|SVNDepth
name|depth
parameter_list|,
name|ISVNPropertyHandler
name|handler
parameter_list|,
name|Collection
name|changeLists
parameter_list|)
throws|throws
name|SVNException
block|{
name|depth
operator|=
name|depth
operator|==
literal|null
condition|?
name|SVNDepth
operator|.
name|UNKNOWN
else|:
name|depth
expr_stmt|;
name|int
name|admLockLevel
init|=
name|SVNWCAccess
operator|.
name|INFINITE_DEPTH
decl_stmt|;
if|if
condition|(
name|depth
operator|==
name|SVNDepth
operator|.
name|EMPTY
operator|||
name|depth
operator|==
name|SVNDepth
operator|.
name|FILES
condition|)
block|{
name|admLockLevel
operator|=
literal|0
expr_stmt|;
block|}
name|SVNWCAccess
name|wcAccess
init|=
name|createWCAccess
argument_list|()
decl_stmt|;
try|try
block|{
name|wcAccess
operator|.
name|probeOpen
argument_list|(
name|path
argument_list|,
literal|true
argument_list|,
name|admLockLevel
argument_list|)
expr_stmt|;
name|SVNEntry
name|entry
init|=
name|wcAccess
operator|.
name|getVersionedEntry
argument_list|(
name|path
argument_list|,
literal|false
argument_list|)
decl_stmt|;
if|if
condition|(
name|SVNDepth
operator|.
name|FILES
operator|.
name|compareTo
argument_list|(
name|depth
argument_list|)
operator|<=
literal|0
operator|&&
name|entry
operator|.
name|isDirectory
argument_list|()
condition|)
block|{
name|PropSetHandlerExt
name|entryHandler
init|=
operator|new
name|PropSetHandlerExt
argument_list|(
name|skipChecks
argument_list|,
name|propertyValueProvider
argument_list|,
name|handler
argument_list|,
name|changeLists
argument_list|)
decl_stmt|;
name|wcAccess
operator|.
name|walkEntries
argument_list|(
name|path
argument_list|,
name|entryHandler
argument_list|,
literal|false
argument_list|,
name|depth
argument_list|)
expr_stmt|;
block|}
if|else if
condition|(
name|SVNWCAccess
operator|.
name|matchesChangeList
argument_list|(
name|changeLists
argument_list|,
name|entry
argument_list|)
condition|)
block|{
name|SVNAdminArea
name|adminArea
init|=
name|entry
operator|.
name|getAdminArea
argument_list|()
decl_stmt|;
name|setLocalProperties
argument_list|(
name|path
argument_list|,
name|entry
argument_list|,
name|adminArea
argument_list|,
name|skipChecks
argument_list|,
name|propertyValueProvider
argument_list|,
name|handler
argument_list|)
expr_stmt|;
block|}
block|}
finally|finally
block|{
name|wcAccess
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
block|}
comment|/**      * Sets<code>propName</code> to<code>propValue</code> on<code>path</code>.      * A<code>propValue</code> of<span class="javakeyword">null</span> will delete       * the property.      *       *<p/>      *<code>baseRevision</code> must not be null; in this case, the property will only be set      * if it has not changed since<code>baseRevision</code>.      *       *<p/>      * The {@link ISVNAuthenticationManager authentication manager} and       * {@link ISVNCommitHandler commit handler}, either provided by a caller or default ones,      * will be used to immediately attempt to commit the property change in the      * repository.      *       *<p/>      * If<code>propName</code> is an svn-controlled property (i.e. prefixed with      *<span class="javastring">"svn:"</span>), then the caller is responsible for ensuring that      * the value uses LF line-endings.      *       *<p/>      * If<code>skipChecks</code> is<span class="javakeyword">true</span>, this method does no validity       * checking.  But if<code>skipChecks</code> is<span class="javakeyword">false</span>,       * and<code>propName</code> is not a valid property for<code>path</code>, it throws an exception,       * either with an error code {@link org.tmatesoft.svn.core.SVNErrorCode#ILLEGAL_TARGET}       * (if the property is not appropriate for<code>path</code>), or with       * {@link org.tmatesoft.svn.core.SVNErrorCode#BAD_MIME_TYPE} (if<code>propName</code> is       *<span class="javastring">"svn:mime-type"</span>, but<code>propVal</code> is not a valid mime-type).      *       *<p/>      * If non-<span class="javakeyword">null</span>,<code>revisionProperties</code> is an       * {@link SVNProperties} object holding additional, custom revision properties       * (<code>String</code> names mapped to<code>String</code> values) to be set on the new revision in      * the event that this is a committing operation. This table cannot contain any standard Subversion       * properties.      *       * @param url                  versioned item url      * @param propName             property name      * @param propValue            property value      * @param baseRevision         revision to change properties against                * @param commitMessage        commit log message      * @param revisionProperties   custom revision properties to set      * @param skipChecks<span class="javakeyword">true</span> to      *                             force the operation to run without validity checking       * @param handler              a caller's property handler      * @return                     commit information if the commit succeeds      * @throws SVNException<ul>      *<li><code>url</code> does not exist in<code>baseRevision</code>      *<li>exception with {@link SVNErrorCode#CLIENT_PROPERTY_NAME} error code -       *                             if<code>propName</code> is a revision property name or not a valid property name or       *                             not a regular property name (one starting with       *                             an<span class="javastring">"svn:entry"</span> or       *<span class="javastring">"svn:wc"</span> prefix)      *<li>exception with {@link SVNErrorCode#UNSUPPORTED_FEATURE} error code -       *                             if<code>propName</code> is either equal to {@link SVNProperty#EOL_STYLE} or       *                             {@link SVNProperty#KEYWORDS} or {@link SVNProperty#CHARSET}      *</ul>      * @see                        #doSetProperty(File, String, SVNPropertyValue, boolean, SVNDepth, ISVNPropertyHandler, Collection)      * @since                      1.2, SVN 1.5      */
specifier|public
name|SVNCommitInfo
name|doSetProperty
parameter_list|(
name|SVNURL
name|url
parameter_list|,
name|String
name|propName
parameter_list|,
name|SVNPropertyValue
name|propValue
parameter_list|,
name|SVNRevision
name|baseRevision
parameter_list|,
name|String
name|commitMessage
parameter_list|,
name|SVNProperties
name|revisionProperties
parameter_list|,
name|boolean
name|skipChecks
parameter_list|,
name|ISVNPropertyHandler
name|handler
parameter_list|)
throws|throws
name|SVNException
block|{
if|if
condition|(
name|propValue
operator|!=
literal|null
operator|&&
operator|!
name|SVNPropertiesManager
operator|.
name|isValidPropertyName
argument_list|(
name|propName
argument_list|)
condition|)
block|{
name|SVNErrorMessage
name|err
init|=
name|SVNErrorMessage
operator|.
name|create
argument_list|(
name|SVNErrorCode
operator|.
name|CLIENT_PROPERTY_NAME
argument_list|,
literal|"Bad property name ''{0}''"
argument_list|,
name|propName
argument_list|)
decl_stmt|;
name|SVNErrorManager
operator|.
name|error
argument_list|(
name|err
argument_list|,
name|SVNLogType
operator|.
name|WC
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|SVNRevisionProperty
operator|.
name|isRevisionProperty
argument_list|(
name|propName
argument_list|)
condition|)
block|{
name|SVNErrorMessage
name|err
init|=
name|SVNErrorMessage
operator|.
name|create
argument_list|(
name|SVNErrorCode
operator|.
name|CLIENT_PROPERTY_NAME
argument_list|,
literal|"Revision property ''{0}'' not allowed in this context"
argument_list|,
name|propName
argument_list|)
decl_stmt|;
name|SVNErrorManager
operator|.
name|error
argument_list|(
name|err
argument_list|,
name|SVNLogType
operator|.
name|WC
argument_list|)
expr_stmt|;
block|}
if|else if
condition|(
name|SVNProperty
operator|.
name|isWorkingCopyProperty
argument_list|(
name|propName
argument_list|)
condition|)
block|{
name|SVNErrorMessage
name|err
init|=
name|SVNErrorMessage
operator|.
name|create
argument_list|(
name|SVNErrorCode
operator|.
name|CLIENT_PROPERTY_NAME
argument_list|,
literal|"''{0}'' is a wcprop, thus not accessible to clients"
argument_list|,
name|propName
argument_list|)
decl_stmt|;
name|SVNErrorManager
operator|.
name|error
argument_list|(
name|err
argument_list|,
name|SVNLogType
operator|.
name|WC
argument_list|)
expr_stmt|;
block|}
if|else if
condition|(
name|SVNProperty
operator|.
name|isEntryProperty
argument_list|(
name|propName
argument_list|)
condition|)
block|{
name|SVNErrorMessage
name|err
init|=
name|SVNErrorMessage
operator|.
name|create
argument_list|(
name|SVNErrorCode
operator|.
name|CLIENT_PROPERTY_NAME
argument_list|,
literal|"Property ''{0}'' is an entry property"
argument_list|,
name|propName
argument_list|)
decl_stmt|;
name|SVNErrorManager
operator|.
name|error
argument_list|(
name|err
argument_list|,
name|SVNLogType
operator|.
name|WC
argument_list|)
expr_stmt|;
block|}
specifier|final
name|SVNRepository
name|repos
init|=
name|createRepository
argument_list|(
name|url
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|,
literal|true
argument_list|)
decl_stmt|;
name|long
name|revNumber
init|=
name|SVNRepository
operator|.
name|INVALID_REVISION
decl_stmt|;
try|try
block|{
name|revNumber
operator|=
name|getRevisionNumber
argument_list|(
name|baseRevision
argument_list|,
name|repos
argument_list|,
literal|null
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|SVNException
name|svne
parameter_list|)
block|{
name|SVNErrorMessage
name|err
init|=
name|SVNErrorMessage
operator|.
name|create
argument_list|(
name|SVNErrorCode
operator|.
name|CLIENT_BAD_REVISION
argument_list|,
literal|"Setting property on non-local target ''{0}'' needs a base revision"
argument_list|,
name|url
argument_list|)
decl_stmt|;
name|SVNErrorManager
operator|.
name|error
argument_list|(
name|err
argument_list|,
name|SVNLogType
operator|.
name|WC
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|SVNProperty
operator|.
name|EOL_STYLE
operator|.
name|equals
argument_list|(
name|propName
argument_list|)
operator|||
name|SVNProperty
operator|.
name|KEYWORDS
operator|.
name|equals
argument_list|(
name|propName
argument_list|)
operator|||
name|SVNProperty
operator|.
name|CHARSET
operator|.
name|equals
argument_list|(
name|propName
argument_list|)
condition|)
block|{
name|SVNErrorMessage
name|err
init|=
name|SVNErrorMessage
operator|.
name|create
argument_list|(
name|SVNErrorCode
operator|.
name|UNSUPPORTED_FEATURE
argument_list|,
literal|"Setting property ''{0}'' on non-local target ''{1}'' is not supported"
argument_list|,
operator|new
name|Object
index|[]
block|{
name|propName
block|,
name|url
block|}
argument_list|)
decl_stmt|;
name|SVNErrorManager
operator|.
name|error
argument_list|(
name|err
argument_list|,
name|SVNLogType
operator|.
name|WC
argument_list|)
expr_stmt|;
block|}
name|SVNNodeKind
name|kind
init|=
name|repos
operator|.
name|checkPath
argument_list|(
literal|""
argument_list|,
name|revNumber
argument_list|)
decl_stmt|;
if|if
condition|(
name|kind
operator|==
name|SVNNodeKind
operator|.
name|NONE
condition|)
block|{
name|SVNErrorMessage
name|err
init|=
name|SVNErrorMessage
operator|.
name|create
argument_list|(
name|SVNErrorCode
operator|.
name|FS_NOT_FOUND
argument_list|,
literal|"Path ''{0}'' does not exist in revision {1}"
argument_list|,
operator|new
name|Object
index|[]
block|{
name|url
operator|.
name|getPath
argument_list|()
block|,
operator|new
name|Long
argument_list|(
name|revNumber
argument_list|)
block|}
argument_list|)
decl_stmt|;
name|SVNErrorManager
operator|.
name|error
argument_list|(
name|err
argument_list|,
name|SVNLogType
operator|.
name|WC
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|propValue
operator|!=
literal|null
operator|&&
name|SVNProperty
operator|.
name|isSVNProperty
argument_list|(
name|propName
argument_list|)
condition|)
block|{
specifier|final
name|long
name|baseRev
init|=
name|revNumber
decl_stmt|;
name|propValue
operator|=
name|SVNPropertiesManager
operator|.
name|validatePropertyValue
argument_list|(
name|url
operator|.
name|toString
argument_list|()
argument_list|,
name|kind
argument_list|,
name|propName
argument_list|,
name|propValue
argument_list|,
name|skipChecks
argument_list|,
name|getOptions
argument_list|()
argument_list|,
operator|new
name|ISVNFileContentFetcher
argument_list|()
block|{
name|Boolean
name|isBinary
init|=
literal|null
decl_stmt|;
specifier|public
name|void
name|fetchFileContent
parameter_list|(
name|OutputStream
name|os
parameter_list|)
throws|throws
name|SVNException
block|{
name|SVNProperties
name|props
init|=
operator|new
name|SVNProperties
argument_list|()
decl_stmt|;
name|repos
operator|.
name|getFile
argument_list|(
literal|""
argument_list|,
name|baseRev
argument_list|,
name|props
argument_list|,
name|os
argument_list|)
expr_stmt|;
name|setBinary
argument_list|(
name|props
argument_list|)
expr_stmt|;
block|}
specifier|public
name|boolean
name|fileIsBinary
parameter_list|()
throws|throws
name|SVNException
block|{
if|if
condition|(
name|isBinary
operator|==
literal|null
condition|)
block|{
name|SVNProperties
name|props
init|=
operator|new
name|SVNProperties
argument_list|()
decl_stmt|;
name|repos
operator|.
name|getFile
argument_list|(
literal|""
argument_list|,
name|baseRev
argument_list|,
name|props
argument_list|,
literal|null
argument_list|)
expr_stmt|;
name|setBinary
argument_list|(
name|props
argument_list|)
expr_stmt|;
block|}
return|return
name|isBinary
operator|.
name|booleanValue
argument_list|()
return|;
block|}
specifier|private
name|void
name|setBinary
parameter_list|(
name|SVNProperties
name|props
parameter_list|)
block|{
name|String
name|mimeType
init|=
name|props
operator|.
name|getStringValue
argument_list|(
name|SVNProperty
operator|.
name|MIME_TYPE
argument_list|)
decl_stmt|;
name|isBinary
operator|=
name|Boolean
operator|.
name|valueOf
argument_list|(
name|SVNProperty
operator|.
name|isBinaryMimeType
argument_list|(
name|mimeType
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
argument_list|)
expr_stmt|;
block|}
name|Collection
name|commitItems
init|=
operator|new
name|ArrayList
argument_list|(
literal|2
argument_list|)
decl_stmt|;
name|SVNCommitItem
name|commitItem
init|=
operator|new
name|SVNCommitItem
argument_list|(
literal|null
argument_list|,
name|url
argument_list|,
literal|null
argument_list|,
name|kind
argument_list|,
name|SVNRevision
operator|.
name|create
argument_list|(
name|revNumber
argument_list|)
argument_list|,
name|SVNRevision
operator|.
name|UNDEFINED
argument_list|,
literal|false
argument_list|,
literal|false
argument_list|,
literal|true
argument_list|,
literal|false
argument_list|,
literal|false
argument_list|,
literal|false
argument_list|)
decl_stmt|;
name|commitItems
operator|.
name|add
argument_list|(
name|commitItem
argument_list|)
expr_stmt|;
name|commitMessage
operator|=
name|getCommitHandler
argument_list|()
operator|.
name|getCommitMessage
argument_list|(
name|commitMessage
argument_list|,
operator|(
name|SVNCommitItem
index|[]
operator|)
name|commitItems
operator|.
name|toArray
argument_list|(
operator|new
name|SVNCommitItem
index|[
name|commitItems
operator|.
name|size
argument_list|()
index|]
argument_list|)
argument_list|)
expr_stmt|;
if|if
condition|(
name|commitMessage
operator|==
literal|null
condition|)
block|{
return|return
name|SVNCommitInfo
operator|.
name|NULL
return|;
block|}
name|commitMessage
operator|=
name|SVNCommitUtil
operator|.
name|validateCommitMessage
argument_list|(
name|commitMessage
argument_list|)
expr_stmt|;
name|SVNPropertiesManager
operator|.
name|validateRevisionProperties
argument_list|(
name|revisionProperties
argument_list|)
expr_stmt|;
name|SVNCommitInfo
name|commitInfo
init|=
literal|null
decl_stmt|;
name|ISVNEditor
name|commitEditor
init|=
name|repos
operator|.
name|getCommitEditor
argument_list|(
name|commitMessage
argument_list|,
literal|null
argument_list|,
literal|true
argument_list|,
name|revisionProperties
argument_list|,
literal|null
argument_list|)
decl_stmt|;
try|try
block|{
name|commitEditor
operator|.
name|openRoot
argument_list|(
name|revNumber
argument_list|)
expr_stmt|;
if|if
condition|(
name|kind
operator|==
name|SVNNodeKind
operator|.
name|FILE
condition|)
block|{
name|commitEditor
operator|.
name|openFile
argument_list|(
literal|""
argument_list|,
name|revNumber
argument_list|)
expr_stmt|;
name|commitEditor
operator|.
name|changeFileProperty
argument_list|(
literal|""
argument_list|,
name|propName
argument_list|,
name|propValue
argument_list|)
expr_stmt|;
name|commitEditor
operator|.
name|closeFile
argument_list|(
literal|""
argument_list|,
literal|null
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|commitEditor
operator|.
name|changeDirProperty
argument_list|(
name|propName
argument_list|,
name|propValue
argument_list|)
expr_stmt|;
block|}
name|commitEditor
operator|.
name|closeDir
argument_list|()
expr_stmt|;
name|commitInfo
operator|=
name|commitEditor
operator|.
name|closeEdit
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|SVNException
name|svne
parameter_list|)
block|{
name|commitEditor
operator|.
name|abortEdit
argument_list|()
expr_stmt|;
throw|throw
name|svne
throw|;
block|}
if|if
condition|(
name|handler
operator|!=
literal|null
condition|)
block|{
name|handler
operator|.
name|handleProperty
argument_list|(
name|url
argument_list|,
operator|new
name|SVNPropertyData
argument_list|(
name|propName
argument_list|,
name|propValue
argument_list|,
name|getOptions
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
return|return
name|commitInfo
return|;
block|}
comment|/**      * Set<code>propName</code> to<code>propValue</code> on revision       *<code>revision</code> in the repository represented by<code>path</code>.      *       *<p/>      * This method simply obtains a url given a working path and calls       * {@link #doSetRevisionProperty(SVNURL, SVNRevision, String, SVNPropertyValue, boolean, ISVNPropertyHandler)}      * passing this url and the rest parameters.      *       * @param path            working copy path      * @param revision        revision which properties are to be modified      * @param propName        property name      * @param propValue       property value      * @param force           if<span class="javakeyword">true</span> allows newlines in the author property      * @param handler         caller's property handler      * @throws SVNException   if one of the following is true:      *<ul>      *<li>exception with {@link SVNErrorCode#CLIENT_PROPERTY_NAME} error code - if       *<code>propName</code> is invalid      *<li>exceptions thrown by {@link #doSetRevisionProperty(SVNURL, SVNRevision, String, SVNPropertyValue, boolean, ISVNPropertyHandler)}      *</ul>      */
specifier|public
name|void
name|doSetRevisionProperty
parameter_list|(
name|File
name|path
parameter_list|,
name|SVNRevision
name|revision
parameter_list|,
name|String
name|propName
parameter_list|,
name|SVNPropertyValue
name|propValue
parameter_list|,
name|boolean
name|force
parameter_list|,
name|ISVNPropertyHandler
name|handler
parameter_list|)
throws|throws
name|SVNException
block|{
if|if
condition|(
name|propValue
operator|!=
literal|null
operator|&&
operator|!
name|SVNPropertiesManager
operator|.
name|isValidPropertyName
argument_list|(
name|propName
argument_list|)
condition|)
block|{
name|SVNErrorMessage
name|err
init|=
name|SVNErrorMessage
operator|.
name|create
argument_list|(
name|SVNErrorCode
operator|.
name|CLIENT_PROPERTY_NAME
argument_list|,
literal|"Bad property name ''{0}''"
argument_list|,
name|propName
argument_list|)
decl_stmt|;
name|SVNErrorManager
operator|.
name|error
argument_list|(
name|err
argument_list|,
name|SVNLogType
operator|.
name|WC
argument_list|)
expr_stmt|;
block|}
name|SVNURL
name|url
init|=
name|getURL
argument_list|(
name|path
argument_list|)
decl_stmt|;
name|doSetRevisionProperty
argument_list|(
name|url
argument_list|,
name|revision
argument_list|,
name|propName
argument_list|,
name|propValue
argument_list|,
name|force
argument_list|,
name|handler
argument_list|)
expr_stmt|;
block|}
comment|/**      * Set<code>propName</code> to<code>propValue</code> on revision       *<code>revision</code> in the repository represented by<code>path</code>.      *       * A<code>propValue</code> of<span class="javakeyword">null</span> will delete the      * property. The {@link ISVNAuthenticationManager authentication manager}, either provided by a caller       * or a default one, will be used for authentication.      *       *<p/>      * If<code>propName</code> is an svn-controlled property (i.e. prefixed with      *<span class="javastring">"svn:"</span>), then the caller is responsible for ensuring that      * the value is UTF8-encoded and uses LF line-endings.      *       *<p/>      * Although this routine accepts a working copy path it doesn't affect the working copy at all;        * it's a pure network operation that changes an *unversioned* property attached to a      * revision. This can be used to tweak log messages, dates, authors, and the like.       * Be careful: it's a lossy operation.      *       *<p>      * Also note that unless the administrator creates a pre-revprop-change hook in the repository,       * this feature will fail.      *      * @param url             repository URL      * @param revision        revision which properties are to be modified      * @param propName        property name      * @param propValue       property value      * @param force           if<span class="javakeyword">true</span> allows newlines in the author property      * @param handler         caller's property handler      * @throws SVNException   if one of the following is true:      *<ul>      *<li>the operation can not be performed without forcing      *<li><code>propName</code> is either invalid or not a regular property name       *                        (one starting with an<span class="javastring">"svn:entry"</span> or       *<span class="javastring">"svn:wc"</span> prefix)      *</ul>      * @see #doSetRevisionProperty(File, SVNRevision, String, SVNPropertyValue, boolean, ISVNPropertyHandler)      */
specifier|public
name|void
name|doSetRevisionProperty
parameter_list|(
name|SVNURL
name|url
parameter_list|,
name|SVNRevision
name|revision
parameter_list|,
name|String
name|propName
parameter_list|,
name|SVNPropertyValue
name|propValue
parameter_list|,
name|boolean
name|force
parameter_list|,
name|ISVNPropertyHandler
name|handler
parameter_list|)
throws|throws
name|SVNException
block|{
if|if
condition|(
name|propValue
operator|!=
literal|null
operator|&&
operator|!
name|SVNPropertiesManager
operator|.
name|isValidPropertyName
argument_list|(
name|propName
argument_list|)
condition|)
block|{
name|SVNErrorMessage
name|err
init|=
name|SVNErrorMessage
operator|.
name|create
argument_list|(
name|SVNErrorCode
operator|.
name|CLIENT_PROPERTY_NAME
argument_list|,
literal|"Bad property name ''{0}''"
argument_list|,
name|propName
argument_list|)
decl_stmt|;
name|SVNErrorManager
operator|.
name|error
argument_list|(
name|err
argument_list|,
name|SVNLogType
operator|.
name|WC
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
operator|!
name|force
operator|&&
name|SVNRevisionProperty
operator|.
name|AUTHOR
operator|.
name|equals
argument_list|(
name|propName
argument_list|)
operator|&&
name|propValue
operator|!=
literal|null
operator|&&
name|propValue
operator|.
name|isString
argument_list|()
operator|&&
name|propValue
operator|.
name|getString
argument_list|()
operator|.
name|indexOf
argument_list|(
literal|'\n'
argument_list|)
operator|>=
literal|0
condition|)
block|{
name|SVNErrorMessage
name|err
init|=
name|SVNErrorMessage
operator|.
name|create
argument_list|(
name|SVNErrorCode
operator|.
name|CLIENT_REVISION_AUTHOR_CONTAINS_NEWLINE
argument_list|,
literal|"Value will not be set unless forced"
argument_list|)
decl_stmt|;
name|SVNErrorManager
operator|.
name|error
argument_list|(
name|err
argument_list|,
name|SVNLogType
operator|.
name|WC
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|SVNProperty
operator|.
name|isWorkingCopyProperty
argument_list|(
name|propName
argument_list|)
condition|)
block|{
name|SVNErrorMessage
name|err
init|=
name|SVNErrorMessage
operator|.
name|create
argument_list|(
name|SVNErrorCode
operator|.
name|CLIENT_PROPERTY_NAME
argument_list|,
literal|"''{0}'' is a wcprop, thus not accessible to clients"
argument_list|,
name|propName
argument_list|)
decl_stmt|;
name|SVNErrorManager
operator|.
name|error
argument_list|(
name|err
argument_list|,
name|SVNLogType
operator|.
name|WC
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|SVNProperty
operator|.
name|isEntryProperty
argument_list|(
name|propName
argument_list|)
condition|)
block|{
name|SVNErrorMessage
name|err
init|=
name|SVNErrorMessage
operator|.
name|create
argument_list|(
name|SVNErrorCode
operator|.
name|CLIENT_PROPERTY_NAME
argument_list|,
literal|"Property ''{0}'' is an entry property"
argument_list|,
name|propName
argument_list|)
decl_stmt|;
name|SVNErrorManager
operator|.
name|error
argument_list|(
name|err
argument_list|,
name|SVNLogType
operator|.
name|WC
argument_list|)
expr_stmt|;
block|}
name|SVNRepository
name|repos
init|=
name|createRepository
argument_list|(
name|url
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|,
name|SVNRevision
operator|.
name|UNDEFINED
argument_list|,
name|revision
argument_list|,
literal|null
argument_list|)
decl_stmt|;
name|long
name|revNumber
init|=
name|getRevisionNumber
argument_list|(
name|revision
argument_list|,
name|repos
argument_list|,
literal|null
argument_list|)
decl_stmt|;
name|repos
operator|.
name|setRevisionPropertyValue
argument_list|(
name|revNumber
argument_list|,
name|propName
argument_list|,
name|propValue
argument_list|)
expr_stmt|;
if|if
condition|(
name|handler
operator|!=
literal|null
condition|)
block|{
name|handler
operator|.
name|handleProperty
argument_list|(
name|revNumber
argument_list|,
operator|new
name|SVNPropertyData
argument_list|(
name|propName
argument_list|,
name|propValue
argument_list|,
name|getOptions
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
comment|/**      * Gets the value of the property<code>propName</code> for<code>path</code>.       * This method simply creates an implementation of {@link ISVNPropertyHandler} which stores      * the value only for<code>path</code> which is then used in the following call to       *<code>doGetProperty(path, propName, pegRevision, revision, SVNDepth.EMPTY, handler, null)</code>.      *      * @param path          a WC item's path      * @param propName      an item's property name; if it's      *<span class="javakeyword">null</span> then      *                      all the item's properties will be retrieved      *                      but only the first of them returned      * @param pegRevision   a revision in which the item is first looked up      * @param revision      a target revision;      * @return              the item's property      * @throws SVNException if one of the following is true:      *<ul>      *<li><code>propName</code> starts      *                      with the {@link org.tmatesoft.svn.core.SVNProperty#SVN_WC_PREFIX      *                      svn:wc:} prefix      *<li><code>path</code> is not under version control      *</ul>      * @see #doGetProperty(File, String, SVNRevision, SVNRevision, SVNDepth, ISVNPropertyHandler, Collection)      */
specifier|public
name|SVNPropertyData
name|doGetProperty
parameter_list|(
specifier|final
name|File
name|path
parameter_list|,
name|String
name|propName
parameter_list|,
name|SVNRevision
name|pegRevision
parameter_list|,
name|SVNRevision
name|revision
parameter_list|)
throws|throws
name|SVNException
block|{
specifier|final
name|SVNPropertyData
index|[]
name|data
init|=
operator|new
name|SVNPropertyData
index|[
literal|1
index|]
decl_stmt|;
name|doGetProperty
argument_list|(
name|path
argument_list|,
name|propName
argument_list|,
name|pegRevision
argument_list|,
name|revision
argument_list|,
name|SVNDepth
operator|.
name|EMPTY
argument_list|,
operator|new
name|ISVNPropertyHandler
argument_list|()
block|{
specifier|public
name|void
name|handleProperty
parameter_list|(
name|File
name|file
parameter_list|,
name|SVNPropertyData
name|property
parameter_list|)
block|{
if|if
condition|(
name|data
index|[
literal|0
index|]
operator|==
literal|null
operator|&&
name|path
operator|.
name|equals
argument_list|(
name|file
argument_list|)
condition|)
block|{
name|data
index|[
literal|0
index|]
operator|=
name|property
expr_stmt|;
block|}
block|}
specifier|public
name|void
name|handleProperty
parameter_list|(
name|SVNURL
name|url
parameter_list|,
name|SVNPropertyData
name|property
parameter_list|)
block|{
block|}
specifier|public
name|void
name|handleProperty
parameter_list|(
name|long
name|revision
parameter_list|,
name|SVNPropertyData
name|property
parameter_list|)
block|{
block|}
block|}
argument_list|,
literal|null
argument_list|)
expr_stmt|;
return|return
name|data
index|[
literal|0
index|]
return|;
block|}
comment|/**      * Gets the value of the property<code>propName</code> for<code>url</code>.       * This method simply creates an implementation of {@link ISVNPropertyHandler} which stores      * the value only for<code>path</code> which is then used in the following call to       *<code>doGetProperty(url, propName, pegRevision, revision, SVNDepth.EMPTY, handler)</code>.      *      * @param url           an item's repository location      * @param propName      an item's property name; if it's      *<span class="javakeyword">null</span> then      *                      all the item's properties will be retrieved      *                      but only the first of them returned      * @param pegRevision   a revision in which the item is first looked up      * @param revision      a target revision;      * @return              the item's property      * @throws SVNException if one of the following is true:      *<ul>      *<li><code>propName</code> starts      *                      with the {@link org.tmatesoft.svn.core.SVNProperty#SVN_WC_PREFIX      *                      svn:wc:} prefix      *<li><code>path</code> is not under version control      *</ul>      * @see #doGetProperty(SVNURL, String, SVNRevision, SVNRevision, SVNDepth, ISVNPropertyHandler)      */
specifier|public
name|SVNPropertyData
name|doGetProperty
parameter_list|(
specifier|final
name|SVNURL
name|url
parameter_list|,
name|String
name|propName
parameter_list|,
name|SVNRevision
name|pegRevision
parameter_list|,
name|SVNRevision
name|revision
parameter_list|)
throws|throws
name|SVNException
block|{
specifier|final
name|SVNPropertyData
index|[]
name|data
init|=
operator|new
name|SVNPropertyData
index|[
literal|1
index|]
decl_stmt|;
name|doGetProperty
argument_list|(
name|url
argument_list|,
name|propName
argument_list|,
name|pegRevision
argument_list|,
name|revision
argument_list|,
name|SVNDepth
operator|.
name|EMPTY
argument_list|,
operator|new
name|ISVNPropertyHandler
argument_list|()
block|{
specifier|public
name|void
name|handleProperty
parameter_list|(
name|File
name|file
parameter_list|,
name|SVNPropertyData
name|property
parameter_list|)
block|{
block|}
specifier|public
name|void
name|handleProperty
parameter_list|(
name|long
name|revision
parameter_list|,
name|SVNPropertyData
name|property
parameter_list|)
block|{
block|}
specifier|public
name|void
name|handleProperty
parameter_list|(
name|SVNURL
name|location
parameter_list|,
name|SVNPropertyData
name|property
parameter_list|)
throws|throws
name|SVNException
block|{
if|if
condition|(
name|data
index|[
literal|0
index|]
operator|==
literal|null
operator|&&
name|url
operator|.
name|toString
argument_list|()
operator|.
name|equals
argument_list|(
name|location
operator|.
name|toString
argument_list|()
argument_list|)
condition|)
block|{
name|data
index|[
literal|0
index|]
operator|=
name|property
expr_stmt|;
block|}
block|}
block|}
argument_list|)
expr_stmt|;
return|return
name|data
index|[
literal|0
index|]
return|;
block|}
comment|/**      * Gets an item's versioned property and passes it to a provided property      * handler. It's possible to get either a local property (from a Working      * Copy) or a remote one (located in a repository).      * If<vode>revision</code> is one of:      *<ul>      *<li>{@link SVNRevision#BASE BASE}      *<li>{@link SVNRevision#WORKING WORKING}      *<li>{@link SVNRevision#COMMITTED COMMITTED}      *</ul>      * then the result is a WC item's property. Otherwise the      * property is taken from a repository (using the item's URL).      *      * @param path          a WC item's path      * @param propName      an item's property name; if it's      *<span class="javakeyword">null</span> then      *                      all the item's properties will be retrieved      *                      and passed to<code>handler</code> for      *                      processing      * @param pegRevision   a revision in which the item is first looked up      * @param revision      a target revision;      * @param recursive<span class="javakeyword">true</span> to      *                      descend recursively      * @param handler       a caller's property handler      * @throws SVNException if one of the following is true:      *<ul>      *<li><code>propName</code> starts      *                      with the {@link org.tmatesoft.svn.core.SVNProperty#SVN_WC_PREFIX      *                      svn:wc:} prefix      *<li><code>path</code> is not under version control      *</ul>      * @deprecated use      {@link #doGetProperty(File, String, SVNRevision, SVNRevision, SVNDepth, ISVNPropertyHandler, Collection)} instead      */
specifier|public
name|void
name|doGetProperty
parameter_list|(
name|File
name|path
parameter_list|,
name|String
name|propName
parameter_list|,
name|SVNRevision
name|pegRevision
parameter_list|,
name|SVNRevision
name|revision
parameter_list|,
name|boolean
name|recursive
parameter_list|,
name|ISVNPropertyHandler
name|handler
parameter_list|)
throws|throws
name|SVNException
block|{
name|doGetProperty
argument_list|(
name|path
argument_list|,
name|propName
argument_list|,
name|pegRevision
argument_list|,
name|revision
argument_list|,
name|SVNDepth
operator|.
name|getInfinityOrEmptyDepth
argument_list|(
name|recursive
argument_list|)
argument_list|,
name|handler
argument_list|,
literal|null
argument_list|)
expr_stmt|;
block|}
comment|/**      * Invokes<code>handler</code> on paths covered by<code>depth</code> starting with       * the specified<code>path</code>.      *       *<p/>      * If both<vode>revision</code> and<code>pegRevision</code> are ones of:      *<ul>      *<li>{@link SVNRevision#BASE BASE}      *<li>{@link SVNRevision#WORKING WORKING}      *<li>{@link SVNRevision#COMMITTED COMMITTED}      *<li>{@link SVNRevision#UNDEFINED}      *</ul>      * then this method gets properties from the working copy without connecting to the repository.       * Otherwise properties are taken from the repository (using the item's URL).      *      *<p/>      * The actual node revision selected is determined by the path as it exists in<code>pegRevision</code>.      * If<code>pegRevision</code> is {@link SVNRevision#UNDEFINED}, then it defaults to       * {@link SVNRevision#WORKING}.      *       *<p/>      * If<code>depth</code> is {@link SVNDepth#EMPTY}, fetch the property from<code>path</code> only;       * if {@link SVNDepth#FILES}, fetch from<code>path</code> and its file children (if any);       * if {@link SVNDepth#IMMEDIATES}, from<code>path</code> and all of its immediate children (both files and       * directories); if {@link SVNDepth#INFINITY}, from<code>path</code> and everything beneath it.      *       *<p/>      *<code>changeLists</code> is a collection of<code>String</tt> changelist      * names, used as a restrictive filter on items whose properties are      * set; that is, don't set properties on any item unless it's a member      * of one of those changelists.  If<code>changeLists</code> is empty (or      *<span class="javakeyword">null</span>), no changelist filtering occurs.      *      * @param path          a WC item's path      * @param propName      an item's property name; if it's      *<span class="javakeyword">null</span> then      *                      all the item's properties will be retrieved      *                      and passed to<code>handler</code> for      *                      processing      * @param pegRevision   a revision in which the item is first looked up      * @param revision      a target revision      * @param depth         tree depth       * @param handler       a caller's property handler      * @param changeLists   collection of changelist names      * @throws SVNException if one of the following is true:      *<ul>      *<li><code>propName</code> starts      *                      with the {@link org.tmatesoft.svn.core.SVNProperty#SVN_WC_PREFIX} prefix      *<li><code>path</code> is not under version control      *</ul>      * @since               1.2, SVN 1.5      */
specifier|public
name|void
name|doGetProperty
parameter_list|(
name|File
name|path
parameter_list|,
name|String
name|propName
parameter_list|,
name|SVNRevision
name|pegRevision
parameter_list|,
name|SVNRevision
name|revision
parameter_list|,
name|SVNDepth
name|depth
parameter_list|,
name|ISVNPropertyHandler
name|handler
parameter_list|,
name|Collection
name|changeLists
parameter_list|)
throws|throws
name|SVNException
block|{
if|if
condition|(
name|SVNProperty
operator|.
name|isWorkingCopyProperty
argument_list|(
name|propName
argument_list|)
condition|)
block|{
name|SVNErrorMessage
name|err
init|=
name|SVNErrorMessage
operator|.
name|create
argument_list|(
name|SVNErrorCode
operator|.
name|CLIENT_PROPERTY_NAME
argument_list|,
literal|"''{0}'' is a wcprop, thus not accessible to clients"
argument_list|,
name|propName
argument_list|)
decl_stmt|;
name|SVNErrorManager
operator|.
name|error
argument_list|(
name|err
argument_list|,
name|SVNLogType
operator|.
name|WC
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|SVNProperty
operator|.
name|isEntryProperty
argument_list|(
name|propName
argument_list|)
condition|)
block|{
name|SVNErrorMessage
name|err
init|=
name|SVNErrorMessage
operator|.
name|create
argument_list|(
name|SVNErrorCode
operator|.
name|CLIENT_PROPERTY_NAME
argument_list|,
literal|"Property ''{0}'' is an entry property"
argument_list|,
name|propName
argument_list|)
decl_stmt|;
name|SVNErrorManager
operator|.
name|error
argument_list|(
name|err
argument_list|,
name|SVNLogType
operator|.
name|WC
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|depth
operator|==
literal|null
operator|||
name|depth
operator|==
name|SVNDepth
operator|.
name|UNKNOWN
condition|)
block|{
name|depth
operator|=
name|SVNDepth
operator|.
name|EMPTY
expr_stmt|;
block|}
if|if
condition|(
operator|(
name|revision
operator|!=
name|SVNRevision
operator|.
name|WORKING
operator|&&
name|revision
operator|!=
name|SVNRevision
operator|.
name|BASE
operator|&&
name|revision
operator|!=
name|SVNRevision
operator|.
name|COMMITTED
operator|&&
name|revision
operator|!=
name|SVNRevision
operator|.
name|UNDEFINED
operator|)
operator|||
operator|(
name|pegRevision
operator|!=
name|SVNRevision
operator|.
name|WORKING
operator|&&
name|pegRevision
operator|!=
name|SVNRevision
operator|.
name|BASE
operator|&&
name|pegRevision
operator|!=
name|SVNRevision
operator|.
name|COMMITTED
operator|&&
name|pegRevision
operator|!=
name|SVNRevision
operator|.
name|UNDEFINED
operator|)
condition|)
block|{
name|long
index|[]
name|revNum
init|=
block|{
name|SVNRepository
operator|.
name|INVALID_REVISION
block|}
decl_stmt|;
name|SVNRepository
name|repository
init|=
name|createRepository
argument_list|(
literal|null
argument_list|,
name|path
argument_list|,
literal|null
argument_list|,
name|pegRevision
argument_list|,
name|revision
argument_list|,
name|revNum
argument_list|)
decl_stmt|;
name|revision
operator|=
name|SVNRevision
operator|.
name|create
argument_list|(
name|revNum
index|[
literal|0
index|]
argument_list|)
expr_stmt|;
name|doGetRemoteProperty
argument_list|(
name|repository
operator|.
name|getLocation
argument_list|()
argument_list|,
literal|""
argument_list|,
name|repository
argument_list|,
name|propName
argument_list|,
name|revision
argument_list|,
name|depth
argument_list|,
name|handler
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|SVNWCAccess
name|wcAccess
init|=
name|createWCAccess
argument_list|()
decl_stmt|;
try|try
block|{
name|int
name|admDepth
init|=
name|getLevelsToLockFromDepth
argument_list|(
name|depth
argument_list|)
decl_stmt|;
name|SVNAdminArea
name|area
init|=
name|wcAccess
operator|.
name|probeOpen
argument_list|(
name|path
argument_list|,
literal|false
argument_list|,
name|admDepth
argument_list|)
decl_stmt|;
name|SVNEntry
name|entry
init|=
name|wcAccess
operator|.
name|getVersionedEntry
argument_list|(
name|path
argument_list|,
literal|false
argument_list|)
decl_stmt|;
name|boolean
name|base
init|=
name|revision
operator|==
name|SVNRevision
operator|.
name|BASE
operator|||
name|revision
operator|==
name|SVNRevision
operator|.
name|COMMITTED
decl_stmt|;
name|doGetLocalProperty
argument_list|(
name|entry
argument_list|,
name|area
argument_list|,
name|propName
argument_list|,
name|base
argument_list|,
name|handler
argument_list|,
name|depth
argument_list|,
name|changeLists
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
name|wcAccess
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
block|}
block|}
comment|/**      * Gets an item's versioned property from a repository and passes it to      * a provided property handler. This method is useful when having no      * Working Copy at all.      *      * @param url         an item's repository location      * @param propName    an item's property name; if it's      *<span class="javakeyword">null</span> then      *                    all the item's properties will be retrieved      *                    and passed to<code>handler</code> for      *                    processing      * @param pegRevision a revision in which the item is first looked up      * @param revision    a target revision      * @param recursive<span class="javakeyword">true</span> to      *                    descend recursively      * @param handler     a caller's property handler      * @throws SVNException if<code>propName</code> starts      *                      with the {@link org.tmatesoft.svn.core.SVNProperty#SVN_WC_PREFIX      *                      svn:wc:} prefix      * @deprecated use {@link #doGetProperty(SVNURL, String, SVNRevision, SVNRevision, SVNDepth, ISVNPropertyHandler)} instead      */
specifier|public
name|void
name|doGetProperty
parameter_list|(
name|SVNURL
name|url
parameter_list|,
name|String
name|propName
parameter_list|,
name|SVNRevision
name|pegRevision
parameter_list|,
name|SVNRevision
name|revision
parameter_list|,
name|boolean
name|recursive
parameter_list|,
name|ISVNPropertyHandler
name|handler
parameter_list|)
throws|throws
name|SVNException
block|{
name|doGetProperty
argument_list|(
name|url
argument_list|,
name|propName
argument_list|,
name|pegRevision
argument_list|,
name|revision
argument_list|,
name|SVNDepth
operator|.
name|getInfinityOrEmptyDepth
argument_list|(
name|recursive
argument_list|)
argument_list|,
name|handler
argument_list|)
expr_stmt|;
block|}
comment|/**      * Invokes<code>handler</code> on paths covered by<code>depth</code> starting with       * the specified<code>path</code>.      *       *<p/>      * If<code></code> is {@link SVNRevision#UNDEFINED} then get      * properties from the repository head. Else get the properties as of<code>revision</code>.       * The actual node revision selected is determined by the path as it exists in<code>pegRevision</code>.      * If<code>pegRevision</code> is {@link SVNRevision#UNDEFINED}, then      * it defaults to {@link SVNRevision#HEAD}.      *       *<p/>      * If<code>depth</code> is {@link SVNDepth#EMPTY}, fetch the property from<code>path</code> only;       * if {@link SVNDepth#FILES}, fetch from<code>path</code> and its file children (if any);       * if {@link SVNDepth#IMMEDIATES}, from<code>path</code> and all of its immediate children (both files and       * directories); if {@link SVNDepth#INFINITY}, from<code>path</code> and everything beneath it.      *       * @param url           versioned item url      * @param propName      an item's property name; if it's      *<span class="javakeyword">null</span> then      *                      all the item's properties will be retrieved      *                      and passed to<code>handler</code> for      *                      processing      * @param pegRevision   a revision in which the item is first looked up      * @param revision      a target revision      * @param depth         tree depth       * @param handler       a caller's property handler      * @throws SVNException if one of the following is true:      *<ul>      *<li><code>propName</code> starts      *                      with the {@link org.tmatesoft.svn.core.SVNProperty#SVN_WC_PREFIX} prefix      *<li><code>path</code> is not under version control      *</ul>      * @since               1.2, SVN 1.5      */
specifier|public
name|void
name|doGetProperty
parameter_list|(
name|SVNURL
name|url
parameter_list|,
name|String
name|propName
parameter_list|,
name|SVNRevision
name|pegRevision
parameter_list|,
name|SVNRevision
name|revision
parameter_list|,
name|SVNDepth
name|depth
parameter_list|,
name|ISVNPropertyHandler
name|handler
parameter_list|)
throws|throws
name|SVNException
block|{
if|if
condition|(
name|SVNProperty
operator|.
name|isWorkingCopyProperty
argument_list|(
name|propName
argument_list|)
condition|)
block|{
name|SVNErrorMessage
name|err
init|=
name|SVNErrorMessage
operator|.
name|create
argument_list|(
name|SVNErrorCode
operator|.
name|CLIENT_PROPERTY_NAME
argument_list|,
literal|"''{0}'' is a wcprop, thus not accessible to clients"
argument_list|,
name|propName
argument_list|)
decl_stmt|;
name|SVNErrorManager
operator|.
name|error
argument_list|(
name|err
argument_list|,
name|SVNLogType
operator|.
name|WC
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|SVNProperty
operator|.
name|isEntryProperty
argument_list|(
name|propName
argument_list|)
condition|)
block|{
name|SVNErrorMessage
name|err
init|=
name|SVNErrorMessage
operator|.
name|create
argument_list|(
name|SVNErrorCode
operator|.
name|CLIENT_PROPERTY_NAME
argument_list|,
literal|"Property ''{0}'' is an entry property"
argument_list|,
name|propName
argument_list|)
decl_stmt|;
name|SVNErrorManager
operator|.
name|error
argument_list|(
name|err
argument_list|,
name|SVNLogType
operator|.
name|WC
argument_list|)
expr_stmt|;
block|}
name|long
index|[]
name|pegRev
init|=
operator|new
name|long
index|[]
block|{
operator|-
literal|1
block|}
decl_stmt|;
name|SVNRepository
name|repos
init|=
name|createRepository
argument_list|(
name|url
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|,
name|pegRevision
argument_list|,
name|revision
argument_list|,
name|pegRev
argument_list|)
decl_stmt|;
name|revision
operator|=
name|pegRev
index|[
literal|0
index|]
operator|<
literal|0
condition|?
name|revision
else|:
name|SVNRevision
operator|.
name|create
argument_list|(
name|pegRev
index|[
literal|0
index|]
argument_list|)
expr_stmt|;
name|doGetRemoteProperty
argument_list|(
name|url
argument_list|,
literal|""
argument_list|,
name|repos
argument_list|,
name|propName
argument_list|,
name|revision
argument_list|,
name|depth
argument_list|,
name|handler
argument_list|)
expr_stmt|;
block|}
comment|/**      * Gets an unversioned revision property from a repository (getting      * a repository URL from a Working Copy) and passes it to a provided      * property handler.      *      * @param path     a local Working Copy item which repository      *                 location is used to connect to a repository      * @param propName a revision property name; if this parameter      *                 is<span class="javakeyword">null</span> then      *                 all the revision properties will be retrieved      *                 and passed to<code>handler</code> for      *                 processing      * @param revision a revision which property is to be retrieved      * @param handler  a caller's property handler      * @throws SVNException if one of the following is true:      *<ul>      *<li><code>revision</code> is invalid      *<li><code>propName</code> starts with the      *                      {@link org.tmatesoft.svn.core.SVNProperty#SVN_WC_PREFIX      *                      svn:wc:} prefix      *</ul>      * @see #doGetRevisionProperty(SVNURL,String,SVNRevision,ISVNPropertyHandler)      */
specifier|public
name|void
name|doGetRevisionProperty
parameter_list|(
name|File
name|path
parameter_list|,
name|String
name|propName
parameter_list|,
name|SVNRevision
name|revision
parameter_list|,
name|ISVNPropertyHandler
name|handler
parameter_list|)
throws|throws
name|SVNException
block|{
if|if
condition|(
name|SVNProperty
operator|.
name|isWorkingCopyProperty
argument_list|(
name|propName
argument_list|)
condition|)
block|{
name|SVNErrorMessage
name|err
init|=
name|SVNErrorMessage
operator|.
name|create
argument_list|(
name|SVNErrorCode
operator|.
name|CLIENT_PROPERTY_NAME
argument_list|,
literal|"''{0}'' is a wcprop, thus not accessible to clients"
argument_list|,
name|propName
argument_list|)
decl_stmt|;
name|SVNErrorManager
operator|.
name|error
argument_list|(
name|err
argument_list|,
name|SVNLogType
operator|.
name|WC
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|SVNProperty
operator|.
name|isEntryProperty
argument_list|(
name|propName
argument_list|)
condition|)
block|{
name|SVNErrorMessage
name|err
init|=
name|SVNErrorMessage
operator|.
name|create
argument_list|(
name|SVNErrorCode
operator|.
name|CLIENT_PROPERTY_NAME
argument_list|,
literal|"Property ''{0}'' is an entry property"
argument_list|,
name|propName
argument_list|)
decl_stmt|;
name|SVNErrorManager
operator|.
name|error
argument_list|(
name|err
argument_list|,
name|SVNLogType
operator|.
name|WC
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
operator|!
name|revision
operator|.
name|isValid
argument_list|()
condition|)
block|{
name|SVNErrorMessage
name|err
init|=
name|SVNErrorMessage
operator|.
name|create
argument_list|(
name|SVNErrorCode
operator|.
name|CLIENT_BAD_REVISION
argument_list|,
literal|"Valid revision have to be specified to fetch revision property"
argument_list|)
decl_stmt|;
name|SVNErrorManager
operator|.
name|error
argument_list|(
name|err
argument_list|,
name|SVNLogType
operator|.
name|DEFAULT
argument_list|)
expr_stmt|;
block|}
name|SVNRepository
name|repository
init|=
name|createRepository
argument_list|(
literal|null
argument_list|,
name|path
argument_list|,
literal|null
argument_list|,
name|SVNRevision
operator|.
name|UNDEFINED
argument_list|,
name|revision
argument_list|,
literal|null
argument_list|)
decl_stmt|;
name|long
name|revisionNumber
init|=
name|getRevisionNumber
argument_list|(
name|revision
argument_list|,
name|repository
argument_list|,
name|path
argument_list|)
decl_stmt|;
name|doGetRevisionProperty
argument_list|(
name|repository
argument_list|,
name|propName
argument_list|,
name|revisionNumber
argument_list|,
name|handler
argument_list|)
expr_stmt|;
block|}
comment|/**      * Gets an unversioned revision property from a repository and passes      * it to a provided property handler.      *      * @param url           a URL pointing to a repository location      *                      which revision property is to be got      * @param propName      a revision property name; if this parameter      *                      is<span class="javakeyword">null</span> then      *                      all the revision properties will be retrieved      *                      and passed to<code>handler</code> for      *                      processing      * @param revision      a revision which property is to be retrieved      * @param handler       a caller's property handler      * @return              actual revision number to which<code>revision</code> is resolved      * @throws SVNException if one of the following is true:      *<ul>      *<li><code>revision</code> is invalid      *<li><code>propName</code> starts with the      *                      {@link org.tmatesoft.svn.core.SVNProperty#SVN_WC_PREFIX      *                      svn:wc:} prefix      *</ul>      * @see #doGetRevisionProperty(File,String,SVNRevision,ISVNPropertyHandler)      */
specifier|public
name|long
name|doGetRevisionProperty
parameter_list|(
name|SVNURL
name|url
parameter_list|,
name|String
name|propName
parameter_list|,
name|SVNRevision
name|revision
parameter_list|,
name|ISVNPropertyHandler
name|handler
parameter_list|)
throws|throws
name|SVNException
block|{
if|if
condition|(
name|SVNProperty
operator|.
name|isWorkingCopyProperty
argument_list|(
name|propName
argument_list|)
condition|)
block|{
name|SVNErrorMessage
name|err
init|=
name|SVNErrorMessage
operator|.
name|create
argument_list|(
name|SVNErrorCode
operator|.
name|CLIENT_PROPERTY_NAME
argument_list|,
literal|"''{0}'' is a wcprop, thus not accessible to clients"
argument_list|,
name|propName
argument_list|)
decl_stmt|;
name|SVNErrorManager
operator|.
name|error
argument_list|(
name|err
argument_list|,
name|SVNLogType
operator|.
name|WC
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|SVNProperty
operator|.
name|isEntryProperty
argument_list|(
name|propName
argument_list|)
condition|)
block|{
name|SVNErrorMessage
name|err
init|=
name|SVNErrorMessage
operator|.
name|create
argument_list|(
name|SVNErrorCode
operator|.
name|CLIENT_PROPERTY_NAME
argument_list|,
literal|"Property ''{0}'' is an entry property"
argument_list|,
name|propName
argument_list|)
decl_stmt|;
name|SVNErrorManager
operator|.
name|error
argument_list|(
name|err
argument_list|,
name|SVNLogType
operator|.
name|WC
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
operator|!
name|revision
operator|.
name|isValid
argument_list|()
condition|)
block|{
name|SVNErrorMessage
name|err
init|=
name|SVNErrorMessage
operator|.
name|create
argument_list|(
name|SVNErrorCode
operator|.
name|CLIENT_BAD_REVISION
argument_list|,
literal|"Valid revision have to be specified to fetch revision property"
argument_list|)
decl_stmt|;
name|SVNErrorManager
operator|.
name|error
argument_list|(
name|err
argument_list|,
name|SVNLogType
operator|.
name|DEFAULT
argument_list|)
expr_stmt|;
block|}
name|SVNRepository
name|repos
init|=
name|createRepository
argument_list|(
name|url
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|,
literal|true
argument_list|)
decl_stmt|;
name|long
name|revNumber
init|=
name|getRevisionNumber
argument_list|(
name|revision
argument_list|,
name|repos
argument_list|,
literal|null
argument_list|)
decl_stmt|;
name|doGetRevisionProperty
argument_list|(
name|repos
argument_list|,
name|propName
argument_list|,
name|revNumber
argument_list|,
name|handler
argument_list|)
expr_stmt|;
return|return
name|revNumber
return|;
block|}
comment|/**      * Schedules a Working Copy item for deletion.      * This method is equivalent to<code>doDelete(path, force, true, dryRun)</code>.      *       * @param path          a WC item to be deleted      * @param force<span class="javakeyword">true</span> to      *                      force the operation to run      * @param dryRun<span class="javakeyword">true</span> only to      *                      try the delete operation without actual deleting      * @throws SVNException if one of the following is true:      *<ul>      *<li><code>path</code> is not under version control      *<li>can not delete<code>path</code> without forcing      *</ul>      * @see #doDelete(File,boolean,boolean,boolean)      */
specifier|public
name|void
name|doDelete
parameter_list|(
name|File
name|path
parameter_list|,
name|boolean
name|force
parameter_list|,
name|boolean
name|dryRun
parameter_list|)
throws|throws
name|SVNException
block|{
name|doDelete
argument_list|(
name|path
argument_list|,
name|force
argument_list|,
literal|true
argument_list|,
name|dryRun
argument_list|)
expr_stmt|;
block|}
comment|/**      * Schedules a Working Copy item for deletion. This method allows to      * choose - whether file item(s) are to be deleted from the filesystem or      * not. Another version of the {@link #doDelete(File,boolean,boolean) doDelete()}      * method is similar to the corresponding SVN client's command -<code>'svn delete'</code>      * as it always deletes files from the filesystem.      *       *<p/>      * This method deletes only local working copy paths without connecting to the repository.      *      * @param path        a WC item to be deleted      * @param force<span class="javakeyword">true</span> to      *                    force the operation to run      * @param deleteFiles if<span class="javakeyword">true</span> then      *                    files will be scheduled for deletion as well as      *                    deleted from the filesystem, otherwise files will      *                    be only scheduled for addition and still be present      *                    in the filesystem      * @param dryRun<span class="javakeyword">true</span> only to      *                    try the delete operation without actual deleting      * @throws SVNException if one of the following is true:      *<ul>      *<li><code>path</code> is not under version control      *<li>can not delete<code>path</code> without forcing      *</ul>      */
specifier|public
name|void
name|doDelete
parameter_list|(
name|File
name|path
parameter_list|,
name|boolean
name|force
parameter_list|,
name|boolean
name|deleteFiles
parameter_list|,
name|boolean
name|dryRun
parameter_list|)
throws|throws
name|SVNException
block|{
name|SVNWCAccess
name|wcAccess
init|=
name|createWCAccess
argument_list|()
decl_stmt|;
name|path
operator|=
name|path
operator|.
name|getAbsoluteFile
argument_list|()
expr_stmt|;
try|try
block|{
if|if
condition|(
operator|!
name|force
operator|&&
name|deleteFiles
condition|)
block|{
name|SVNWCManager
operator|.
name|canDelete
argument_list|(
name|path
argument_list|,
name|getOptions
argument_list|()
argument_list|,
name|this
argument_list|)
expr_stmt|;
block|}
name|SVNAdminArea
name|root
init|=
name|wcAccess
operator|.
name|open
argument_list|(
name|path
operator|.
name|getParentFile
argument_list|()
argument_list|,
literal|true
argument_list|,
literal|0
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|dryRun
condition|)
block|{
name|SVNWCManager
operator|.
name|delete
argument_list|(
name|wcAccess
argument_list|,
name|root
argument_list|,
name|path
argument_list|,
name|deleteFiles
argument_list|,
literal|true
argument_list|)
expr_stmt|;
block|}
block|}
finally|finally
block|{
name|wcAccess
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
block|}
comment|/**      * Schedules an unversioned item for addition to a repository thus      * putting it under version control.      *<p/>      *<p/>      * To create and add to version control a new directory, set<code>mkdir</code>      * to<span class="javakeyword">true</span>.      *<p/>      *<p/>      * Calling this method is equivalent to      *<code>doAdd(path, force, mkdir, climbUnversionedParents, recursive, false)</code>.      *      * @param path                    a path to be put under version      *                                control (will be added to a repository      *                                in next commit)      * @param force                   when<span class="javakeyword">true</span> forces the operation      *                                to run on already versioned files or directories without reporting      *                                error. When ran recursively, all unversioned files and directories      *                                in a tree will be scheduled for addition.      * @param mkdir                   if<span class="javakeyword">true</span> -      *                                creates a new directory and schedules it for      *                                addition      * @param climbUnversionedParents if<span class="javakeyword">true</span> and      *<code>path</code> is located in an unversioned      *                                parent directory then the parent will be automatically      *                                scheduled for addition, too      * @param recursive<span class="javakeyword">true</span> to      *                                descend recursively (relevant for directories)      * @throws SVNException if one of the following is true:      *<ul>      *<li><code>path</code> doesn't belong      *                      to a Working Copy      *<li><code>path</code> doesn't exist and      *<code>mkdir</code> is<span class="javakeyword">false</span>      *<li><code>path</code> is the root directory of the Working Copy      * @deprecated use {@link #doAdd(File, boolean, boolean, boolean, SVNDepth, boolean, boolean)} instead      */
specifier|public
name|void
name|doAdd
parameter_list|(
name|File
name|path
parameter_list|,
name|boolean
name|force
parameter_list|,
name|boolean
name|mkdir
parameter_list|,
name|boolean
name|climbUnversionedParents
parameter_list|,
name|boolean
name|recursive
parameter_list|)
throws|throws
name|SVNException
block|{
name|SVNDepth
name|depth
init|=
name|SVNDepth
operator|.
name|getInfinityOrEmptyDepth
argument_list|(
name|recursive
argument_list|)
decl_stmt|;
name|doAdd
argument_list|(
name|path
argument_list|,
name|force
argument_list|,
name|mkdir
argument_list|,
name|climbUnversionedParents
argument_list|,
name|depth
argument_list|,
literal|false
argument_list|,
literal|false
argument_list|,
name|climbUnversionedParents
argument_list|)
expr_stmt|;
block|}
comment|/**      * Schedules an unversioned item for addition to a repository thus      * putting it under version control.      *<p/>      *<p/>      * To create and add to version control a new directory, set<code>mkdir</code>      * to<span class="javakeyword">true</span>.      *      * @param path                    a path to be put under version      *                                control (will be added to a repository      *                                in next commit)      * @param force                   when<span class="javakeyword">true</span> forces the operation      *                                to run on already versioned files or directories without reporting      *                                error. When ran recursively, all unversioned files and directories      *                                in a tree will be scheduled for addition.      * @param mkdir                   if<span class="javakeyword">true</span> -      *                                creates a new directory and schedules it for      *                                addition      * @param climbUnversionedParents if<span class="javakeyword">true</span> and      *<code>path</code> is located in an unversioned      *                                parent directory then the parent will be automatically      *                                scheduled for addition, too      * @param recursive<span class="javakeyword">true</span> to      *                                descend recursively (relevant for directories)      * @param includeIgnored          controls whether ignored items must be also added      * @throws SVNException if one of the following is true:      *<ul>      *<li><code>path</code> doesn't belong      *                      to a Working Copy      *<li><code>path</code> doesn't exist and      *<code>mkdir</code> is<span class="javakeyword">false</span>      *<li><code>path</code> is the root directory of the Working Copy      *</ul>      * @since 1.1      * @deprecated use {@link #doAdd(File, boolean, boolean, boolean, SVNDepth, boolean, boolean)} instead      */
specifier|public
name|void
name|doAdd
parameter_list|(
name|File
name|path
parameter_list|,
name|boolean
name|force
parameter_list|,
name|boolean
name|mkdir
parameter_list|,
name|boolean
name|climbUnversionedParents
parameter_list|,
name|boolean
name|recursive
parameter_list|,
name|boolean
name|includeIgnored
parameter_list|)
throws|throws
name|SVNException
block|{
name|SVNDepth
name|depth
init|=
name|SVNDepth
operator|.
name|getInfinityOrEmptyDepth
argument_list|(
name|recursive
argument_list|)
decl_stmt|;
name|doAdd
argument_list|(
name|path
argument_list|,
name|force
argument_list|,
name|mkdir
argument_list|,
name|climbUnversionedParents
argument_list|,
name|depth
argument_list|,
literal|false
argument_list|,
name|includeIgnored
argument_list|,
name|climbUnversionedParents
argument_list|)
expr_stmt|;
block|}
comment|/**      * Schedules a working copy<code>path</code> for addition to the repository.      *      *<p/>      * If<code>depth</code> is {@link SVNDepth#EMPTY}, adds just<code>path</code> and nothing      * below it. If {@link SVNDepth#FILES}, adds<code>path</code> and any file      * children of<code>path</code>. If {@link SVNDepth#IMMEDIATES}, adds<code>path</code>, any      * file children, and any immediate subdirectories (but nothing      * underneath those subdirectories). If {@link SVNDepth#INFINITY}, adds      *<code>path</code> and everything under it fully recursively.      *      *<p/>      *<code>path</code>'s parent must be under revision control already (unless      *<code>makeParents</code> is<span class="javakeyword">true</span>), but<code>path</code> is not.        *       *<p/>      * If<code>force</code> is set,<code>path</code> is a directory,<code>depth</code> is       * {@link SVNDepth#INFINITY}, then schedules for addition unversioned files and directories      * scattered deep within a versioned tree.      *      *<p/>      * If<code>includeIgnored</code> is<span class="javakeyword">false</span>, doesn't add files or       * directories that match ignore patterns.      *      *<p/>      * If<code>makeParents</code> is<span class="javakeyword">true</span>, recurse up<code>path</code>'s       * directory and look for a versioned directory. If found, add all intermediate paths between it      * and<code>path</code>.       *      *<p/>      * Important: this is a *scheduling* operation.  No changes will happen to the repository until a commit       * occurs. This scheduling can be removed with a call to {@link #doRevert(File[], SVNDepth, Collection)}.      *       * @param path                      working copy path      * @param force                     if<span class="javakeyword">true</span>, this method does not throw exceptions       *                                  on already-versioned items       * @param mkdir                     if<span class="javakeyword">true</span>, create a directory also at<code>path</code>      * @param climbUnversionedParents   not used; make use of<code>makeParents</code> instead      * @param depth                     tree depth      * @param includeIgnored            if<span class="javakeyword">true</span>, does not apply ignore patterns       *                                  to paths being added      * @param makeParents               if<span class="javakeyword">true</span>, climb upper and schedule also      *                                  all unversioned paths in the way      * @throws SVNException<ul>      *<li/>exception with {@link SVNErrorCode#ENTRY_EXISTS} error code -        *                                  if<code>force</code> is not set and<code>path</code> is already       *                                  under version      *<li/>exception with {@link SVNErrorCode#CLIENT_NO_VERSIONED_PARENT}       *                                  error code - if<code>makeParents</code> is       *<span class="javakeyword">true</span> but no unversioned paths stepping       *                                  upper from<code>path</code> are found       * @since 1.2, SVN 1.5      */
specifier|public
name|void
name|doAdd
parameter_list|(
name|File
name|path
parameter_list|,
name|boolean
name|force
parameter_list|,
name|boolean
name|mkdir
parameter_list|,
name|boolean
name|climbUnversionedParents
parameter_list|,
name|SVNDepth
name|depth
parameter_list|,
name|boolean
name|includeIgnored
parameter_list|,
name|boolean
name|makeParents
parameter_list|)
throws|throws
name|SVNException
block|{
name|doAdd
argument_list|(
name|path
argument_list|,
name|force
argument_list|,
name|mkdir
argument_list|,
name|climbUnversionedParents
argument_list|,
name|depth
argument_list|,
literal|false
argument_list|,
name|includeIgnored
argument_list|,
name|makeParents
argument_list|)
expr_stmt|;
block|}
comment|/**      * Schedules working copy<code>paths</code> for addition to the repository.      *      *<p/>      * If<code>depth</code> is {@link SVNDepth#EMPTY}, adds just<code>paths</code> and nothing      * below it. If {@link SVNDepth#FILES}, adds<code>paths</code> and any file      * children of<code>paths</code>. If {@link SVNDepth#IMMEDIATES}, adds<code>paths</code>, any      * file children, and any immediate subdirectories (but nothing      * underneath those subdirectories). If {@link SVNDepth#INFINITY}, adds      *<code>paths</code> and everything under it fully recursively.      *      *<p/>      *<code>paths</code>' parent must be under revision control already (unless      *<code>makeParents</code> is<span class="javakeyword">true</span>), but<code>paths</code> are not.        *       *<p/>      * If<code>force</code> is set, path is a directory,<code>depth</code> is       * {@link SVNDepth#INFINITY}, then schedules for addition unversioned files and directories      * scattered deep within a versioned tree.      *      *<p/>      * If<code>includeIgnored</code> is<span class="javakeyword">false</span>, doesn't add files or       * directories that match ignore patterns.      *      *<p/>      * If<code>makeParents</code> is<span class="javakeyword">true</span>, recurse up path's       * directory and look for a versioned directory. If found, add all intermediate paths between it      * and the path.       *      *<p/>      * Important: this is a *scheduling* operation. No changes will happen to the repository until a commit       * occurs. This scheduling can be removed with a call to {@link #doRevert(File[], SVNDepth, Collection)}.      *       * @param paths                     working copy paths to add        * @param force                     if<span class="javakeyword">true</span>, this method does not throw exceptions       *                                  on already-versioned items       * @param mkdir                     if<span class="javakeyword">true</span>, create a directory also at<code>path</code>      * @param climbUnversionedParents   not used; make use of<code>makeParents</code> instead      * @param depth                     tree depth      * @param depthIsSticky             if depth should be recorded to the working copy      * @param includeIgnored            if<span class="javakeyword">true</span>, does not apply ignore patterns       *                                  to paths being added      * @param makeParents               if<span class="javakeyword">true</span>, climb upper and schedule also      *                                  all unversioned paths in the way      * @throws SVNException<ul>      *<li/>exception with {@link SVNErrorCode#ENTRY_EXISTS} error code -        *                                  if<code>force</code> is not set and a path is already       *                                  under version      *<li/>exception with {@link SVNErrorCode#CLIENT_NO_VERSIONED_PARENT}       *                                  error code - if<code>makeParents</code> is       *<span class="javakeyword">true</span> but no unversioned paths stepping       *                                  upper from a path are found       * @since 1.3      */
specifier|public
name|void
name|doAdd
parameter_list|(
name|File
index|[]
name|paths
parameter_list|,
name|boolean
name|force
parameter_list|,
name|boolean
name|mkdir
parameter_list|,
name|boolean
name|climbUnversionedParents
parameter_list|,
name|SVNDepth
name|depth
parameter_list|,
name|boolean
name|depthIsSticky
parameter_list|,
name|boolean
name|includeIgnored
parameter_list|,
name|boolean
name|makeParents
parameter_list|)
throws|throws
name|SVNException
block|{
name|setEventPathPrefix
argument_list|(
literal|""
argument_list|)
expr_stmt|;
try|try
block|{
if|if
condition|(
name|paths
operator|!=
literal|null
condition|)
block|{
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|paths
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
name|doAdd
argument_list|(
name|paths
index|[
name|i
index|]
argument_list|,
name|force
argument_list|,
name|mkdir
argument_list|,
name|climbUnversionedParents
argument_list|,
name|depth
argument_list|,
name|depthIsSticky
argument_list|,
name|includeIgnored
argument_list|,
name|makeParents
argument_list|)
expr_stmt|;
block|}
block|}
block|}
finally|finally
block|{
name|setEventPathPrefix
argument_list|(
literal|null
argument_list|)
expr_stmt|;
block|}
block|}
comment|/**      * Schedules a working copy<code>path</code> for addition to the repository.      *      *<p/>      * If<code>depth</code> is {@link SVNDepth#EMPTY}, adds just<code>path</code> and nothing      * below it. If {@link SVNDepth#FILES}, adds<code>path</code> and any file      * children of<code>path</code>. If {@link SVNDepth#IMMEDIATES}, adds<code>path</code>, any      * file children, and any immediate subdirectories (but nothing      * underneath those subdirectories). If {@link SVNDepth#INFINITY}, adds      *<code>path</code> and everything under it fully recursively.      *      *<p/>      *<code>path</code>'s parent must be under revision control already (unless      *<code>makeParents</code> is<span class="javakeyword">true</span>), but<code>path</code> is not.        *       *<p/>      * If<code>force</code> is set,<code>path</code> is a directory,<code>depth</code> is       * {@link SVNDepth#INFINITY}, then schedules for addition unversioned files and directories      * scattered deep within a versioned tree.      *      *<p/>      * If<code>includeIgnored</code> is<span class="javakeyword">false</span>, doesn't add files or       * directories that match ignore patterns.      *      *<p/>      * If<code>makeParents</code> is<span class="javakeyword">true</span>, recurse up<code>path</code>'s       * directory and look for a versioned directory. If found, add all intermediate paths between it      * and<code>path</code>.       *      *<p/>      * Important: this is a *scheduling* operation.  No changes will happen to the repository until a commit       * occurs. This scheduling can be removed with a call to {@link #doRevert(File[], SVNDepth, Collection)}.      *       * @param path                      working copy path      * @param force                     if<span class="javakeyword">true</span>, this method does not throw exceptions on already-versioned items       * @param mkdir                     if<span class="javakeyword">true</span>, create a directory also at<code>path</code>      * @param climbUnversionedParents   not used; make use of<code>makeParents</code> instead      * @param depth                     tree depth      * @param depthIsSticky             if depth should be recorded to the working copy      * @param includeIgnored            if<span class="javakeyword">true</span>, does not apply ignore patterns       *                                  to paths being added      * @param makeParents               if<span class="javakeyword">true</span>, climb upper and schedule also      *                                  all unversioned paths in the way      * @throws SVNException<ul>      *<li/>exception with {@link SVNErrorCode#ENTRY_EXISTS} error code -        *                                  if<code>force</code> is not set and<code>path</code> is already       *                                  under version      *<li/>exception with {@link SVNErrorCode#CLIENT_NO_VERSIONED_PARENT}       *                                  error code - if<code>makeParents</code> is       *<span class="javakeyword">true</span> but no unversioned paths stepping       *                                  upper from<code>path</code> are found       * @since 1.3      */
specifier|public
name|void
name|doAdd
parameter_list|(
name|File
name|path
parameter_list|,
name|boolean
name|force
parameter_list|,
name|boolean
name|mkdir
parameter_list|,
name|boolean
name|climbUnversionedParents
parameter_list|,
name|SVNDepth
name|depth
parameter_list|,
name|boolean
name|depthIsSticky
parameter_list|,
name|boolean
name|includeIgnored
parameter_list|,
name|boolean
name|makeParents
parameter_list|)
throws|throws
name|SVNException
block|{
name|depth
operator|=
name|depth
operator|==
literal|null
condition|?
name|SVNDepth
operator|.
name|UNKNOWN
else|:
name|depth
expr_stmt|;
name|path
operator|=
name|path
operator|.
name|getAbsoluteFile
argument_list|()
expr_stmt|;
if|if
condition|(
operator|!
name|mkdir
operator|&&
name|makeParents
operator|&&
name|path
operator|.
name|getParentFile
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|SVNWCAccess
name|wcAccess
init|=
name|createWCAccess
argument_list|()
decl_stmt|;
try|try
block|{
name|addParentDirectories
argument_list|(
name|wcAccess
argument_list|,
name|path
operator|.
name|getParentFile
argument_list|()
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
name|wcAccess
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
block|}
name|SVNFileType
name|kind
init|=
name|SVNFileType
operator|.
name|getType
argument_list|(
name|path
argument_list|)
decl_stmt|;
if|if
condition|(
name|force
operator|&&
name|mkdir
operator|&&
name|kind
operator|==
name|SVNFileType
operator|.
name|DIRECTORY
condition|)
block|{
comment|// directory is already there.
name|doAdd
argument_list|(
name|path
argument_list|,
name|force
argument_list|,
literal|false
argument_list|,
literal|true
argument_list|,
name|SVNDepth
operator|.
name|EMPTY
argument_list|,
name|depthIsSticky
argument_list|,
literal|true
argument_list|,
name|makeParents
argument_list|)
expr_stmt|;
return|return;
block|}
if|else if
condition|(
name|mkdir
condition|)
block|{
comment|// attempt to create dir
name|File
name|parent
init|=
name|path
decl_stmt|;
name|File
name|firstCreated
init|=
name|path
decl_stmt|;
while|while
condition|(
name|parent
operator|!=
literal|null
operator|&&
name|SVNFileType
operator|.
name|getType
argument_list|(
name|parent
argument_list|)
operator|==
name|SVNFileType
operator|.
name|NONE
condition|)
block|{
if|if
condition|(
operator|!
name|parent
operator|.
name|equals
argument_list|(
name|path
argument_list|)
operator|&&
operator|!
name|makeParents
condition|)
block|{
name|SVNErrorMessage
name|err
init|=
name|SVNErrorMessage
operator|.
name|create
argument_list|(
name|SVNErrorCode
operator|.
name|IO_ERROR
argument_list|,
literal|"Cannot create directoy ''{0}'' with non-existent parents"
argument_list|,
name|path
argument_list|)
decl_stmt|;
name|SVNErrorManager
operator|.
name|error
argument_list|(
name|err
argument_list|,
name|SVNLogType
operator|.
name|WC
argument_list|)
expr_stmt|;
block|}
name|firstCreated
operator|=
name|parent
expr_stmt|;
name|parent
operator|=
name|parent
operator|.
name|getParentFile
argument_list|()
expr_stmt|;
block|}
name|boolean
name|created
init|=
name|path
operator|.
name|mkdirs
argument_list|()
decl_stmt|;
if|if
condition|(
operator|!
name|created
condition|)
block|{
comment|// delete created dirs.
name|SVNErrorMessage
name|err
init|=
name|SVNErrorMessage
operator|.
name|create
argument_list|(
name|SVNErrorCode
operator|.
name|IO_ERROR
argument_list|,
literal|"Cannot create new directory ''{0}''"
argument_list|,
name|path
argument_list|)
decl_stmt|;
while|while
condition|(
name|parent
operator|==
literal|null
condition|?
name|path
operator|!=
literal|null
else|:
operator|!
name|path
operator|.
name|equals
argument_list|(
name|parent
argument_list|)
condition|)
block|{
name|SVNFileUtil
operator|.
name|deleteAll
argument_list|(
name|path
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|path
operator|=
name|path
operator|.
name|getParentFile
argument_list|()
expr_stmt|;
block|}
name|SVNErrorManager
operator|.
name|error
argument_list|(
name|err
argument_list|,
name|SVNLogType
operator|.
name|WC
argument_list|)
expr_stmt|;
block|}
try|try
block|{
name|doAdd
argument_list|(
name|firstCreated
argument_list|,
literal|false
argument_list|,
literal|false
argument_list|,
name|climbUnversionedParents
argument_list|,
name|depth
argument_list|,
name|depthIsSticky
argument_list|,
literal|true
argument_list|,
name|makeParents
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|SVNException
name|e
parameter_list|)
block|{
name|SVNFileUtil
operator|.
name|deleteAll
argument_list|(
name|firstCreated
argument_list|,
literal|true
argument_list|)
expr_stmt|;
throw|throw
name|e
throw|;
block|}
return|return;
block|}
name|SVNWCAccess
name|wcAccess
init|=
name|createWCAccess
argument_list|()
decl_stmt|;
try|try
block|{
name|SVNAdminArea
name|dir
init|=
literal|null
decl_stmt|;
name|SVNFileType
name|fileType
init|=
name|SVNFileType
operator|.
name|getType
argument_list|(
name|path
argument_list|)
decl_stmt|;
if|if
condition|(
name|fileType
operator|==
name|SVNFileType
operator|.
name|DIRECTORY
condition|)
block|{
name|dir
operator|=
name|wcAccess
operator|.
name|open
argument_list|(
name|SVNWCUtil
operator|.
name|isVersionedDirectory
argument_list|(
name|path
operator|.
name|getParentFile
argument_list|()
argument_list|)
condition|?
name|path
operator|.
name|getParentFile
argument_list|()
else|:
name|path
argument_list|,
literal|true
argument_list|,
literal|0
argument_list|)
expr_stmt|;
block|}
else|else
block|{
comment|// files and symlink goes here.
name|dir
operator|=
name|wcAccess
operator|.
name|open
argument_list|(
name|path
operator|.
name|getParentFile
argument_list|()
argument_list|,
literal|true
argument_list|,
literal|0
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|fileType
operator|==
name|SVNFileType
operator|.
name|DIRECTORY
operator|&&
name|depth
operator|.
name|compareTo
argument_list|(
name|SVNDepth
operator|.
name|FILES
argument_list|)
operator|>=
literal|0
condition|)
block|{
name|File
name|wcRoot
init|=
name|SVNWCUtil
operator|.
name|getWorkingCopyRoot
argument_list|(
name|dir
operator|.
name|getRoot
argument_list|()
argument_list|,
literal|true
argument_list|)
decl_stmt|;
name|addDirectory
argument_list|(
name|wcRoot
argument_list|,
name|path
argument_list|,
name|dir
argument_list|,
name|force
argument_list|,
name|includeIgnored
argument_list|,
name|depth
argument_list|,
name|depthIsSticky
argument_list|)
expr_stmt|;
block|}
if|else if
condition|(
name|fileType
operator|==
name|SVNFileType
operator|.
name|FILE
operator|||
name|fileType
operator|==
name|SVNFileType
operator|.
name|SYMLINK
condition|)
block|{
name|addFile
argument_list|(
name|path
argument_list|,
name|fileType
argument_list|,
name|dir
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|SVNWCManager
operator|.
name|add
argument_list|(
name|path
argument_list|,
name|dir
argument_list|,
literal|null
argument_list|,
name|SVNRevision
operator|.
name|UNDEFINED
argument_list|,
name|depthIsSticky
condition|?
name|depth
else|:
literal|null
argument_list|)
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
name|SVNException
name|e
parameter_list|)
block|{
if|if
condition|(
operator|!
operator|(
name|force
operator|&&
name|e
operator|.
name|getErrorMessage
argument_list|()
operator|.
name|getErrorCode
argument_list|()
operator|==
name|SVNErrorCode
operator|.
name|ENTRY_EXISTS
operator|)
condition|)
block|{
throw|throw
name|e
throw|;
block|}
block|}
finally|finally
block|{
name|wcAccess
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
block|}
comment|/**      * Schedules<code>path</code> as being replaced.      * This method does not perform any deletion\addition in the filesysem nor does it require a connection to       * the repository. It just marks the current<code>path</code> item as being replaced.        *       * @param  path working copy path to mark as      * @throws SVNException      * @since 1.2       */
specifier|public
name|void
name|doMarkReplaced
parameter_list|(
name|File
name|path
parameter_list|)
throws|throws
name|SVNException
block|{
name|SVNWCAccess
name|wcAccess
init|=
name|createWCAccess
argument_list|()
decl_stmt|;
name|path
operator|=
name|path
operator|.
name|getAbsoluteFile
argument_list|()
expr_stmt|;
try|try
block|{
name|SVNAdminAreaInfo
name|areaInfo
init|=
name|wcAccess
operator|.
name|openAnchor
argument_list|(
name|path
argument_list|,
literal|true
argument_list|,
name|SVNWCAccess
operator|.
name|INFINITE_DEPTH
argument_list|)
decl_stmt|;
name|SVNAdminArea
name|anchor
init|=
name|areaInfo
operator|.
name|getAnchor
argument_list|()
decl_stmt|;
if|if
condition|(
name|path
operator|.
name|equals
argument_list|(
name|anchor
operator|.
name|getRoot
argument_list|()
operator|.
name|getAbsoluteFile
argument_list|()
argument_list|)
condition|)
block|{
name|SVNWCManager
operator|.
name|markTree
argument_list|(
name|anchor
argument_list|,
name|SVNProperty
operator|.
name|SCHEDULE_REPLACE
argument_list|,
literal|false
argument_list|,
literal|false
argument_list|,
name|SVNWCManager
operator|.
name|SCHEDULE
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|SVNEntry
name|entry
init|=
name|anchor
operator|.
name|getEntry
argument_list|(
name|path
operator|.
name|getName
argument_list|()
argument_list|,
literal|false
argument_list|)
decl_stmt|;
name|SVNWCManager
operator|.
name|markEntry
argument_list|(
name|anchor
argument_list|,
name|entry
argument_list|,
name|SVNProperty
operator|.
name|SCHEDULE_REPLACE
argument_list|,
literal|false
argument_list|,
literal|false
argument_list|,
name|SVNWCManager
operator|.
name|SCHEDULE
argument_list|)
expr_stmt|;
block|}
name|anchor
operator|.
name|saveEntries
argument_list|(
literal|false
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
name|wcAccess
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
block|}
comment|/**      * Reverts all local changes made to a Working Copy item(s) thus      * bringing it to a 'pristine' state.      *      * @param path      a WC path to perform a revert on      * @param recursive<span class="javakeyword">true</span> to      *                  descend recursively (relevant for directories)      * @throws SVNException if one of the following is true:      *<ul>      *<li><code>path</code> is not under version control      *<li>when trying to revert an addition of a directory      *                      from within the directory itself      *</ul>      * @see #doRevert(File[],boolean)      * @deprecated use {@link #doRevert(File[], SVNDepth, Collection)}      */
specifier|public
name|void
name|doRevert
parameter_list|(
name|File
name|path
parameter_list|,
name|boolean
name|recursive
parameter_list|)
throws|throws
name|SVNException
block|{
name|doRevert
argument_list|(
operator|new
name|File
index|[]
block|{
name|path
block|}
argument_list|,
name|SVNDepth
operator|.
name|getInfinityOrEmptyDepth
argument_list|(
name|recursive
argument_list|)
argument_list|,
literal|null
argument_list|)
expr_stmt|;
block|}
comment|/**      * Reverts all local changes made to a Working Copy item(s) thus      * bringing it to a 'pristine' state.      *      * @param paths     a WC paths to perform a revert on      * @param recursive<span class="javakeyword">true</span> to      *                  descend recursively (relevant for directories)      * @throws SVNException if one of the following is true:      *<ul>      *<li><code>path</code> is not under version control      *<li>when trying to revert an addition of a directory      *                      from within the directory itself      *</ul>      *<p/>      *                      Exception will not be thrown if there are multiple paths passed.      *                      Instead caller should process events received by<code>ISVNEventHandler</code>      *                      instance to get information on whether certain path was reverted or not.      * @deprecated use {@link #doRevert(File[], SVNDepth, Collection)} instead      */
specifier|public
name|void
name|doRevert
parameter_list|(
name|File
index|[]
name|paths
parameter_list|,
name|boolean
name|recursive
parameter_list|)
throws|throws
name|SVNException
block|{
name|doRevert
argument_list|(
name|paths
argument_list|,
name|recursive
condition|?
name|SVNDepth
operator|.
name|INFINITY
else|:
name|SVNDepth
operator|.
name|EMPTY
argument_list|,
literal|null
argument_list|)
expr_stmt|;
block|}
comment|/**      * Restores the pristine version of working copy<code>paths</code>,      * effectively undoing any local mods. For each path in<code>paths</code>,      * reverts it if it is a file. Else if it is a directory, reverts      * according to<code>depth</code>:      *       *<p/>      * If</code>depth</code> is {@link SVNDepth#EMPTY}, reverts just the properties on      * the directory; else if {@link SVNDepth#FILES}, reverts the properties      * and any files immediately under the directory; else if      * {@link SVNDepth#IMMEDIATES}, reverts all of the preceding plus      * properties on immediate subdirectories; else if {@link SVNDepth#INFINITY},      * reverts path and everything under it fully recursively.      *      *<p/>      *<code>changeLists</code> is a collection of<code>String</code> changelist      * names, used as a restrictive filter on items reverted; that is,      * doesn't revert any item unless it's a member of one of those      * changelists.  If<code>changeLists</code> is empty (or<span class="javakeyword">null</span>),      * no changelist filtering occurs.      *       *<p/>      * If an item specified for reversion is not under version control,      * then does not fail with an exception, just invokes {@link ISVNEventHandler}       * using notification code {@link SVNEventAction#SKIP}.      *       * @param paths           working copy paths to revert      * @param depth           tree depth      * @param changeLists     collection with changelist names      * @throws SVNException       * @since 1.2, SVN 1.5      */
specifier|public
name|void
name|doRevert
parameter_list|(
name|File
index|[]
name|paths
parameter_list|,
name|SVNDepth
name|depth
parameter_list|,
name|Collection
name|changeLists
parameter_list|)
throws|throws
name|SVNException
block|{
name|boolean
name|reverted
init|=
literal|false
decl_stmt|;
try|try
block|{
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|paths
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
name|File
name|path
init|=
name|paths
index|[
name|i
index|]
decl_stmt|;
name|path
operator|=
name|path
operator|.
name|getAbsoluteFile
argument_list|()
expr_stmt|;
name|SVNWCAccess
name|wcAccess
init|=
name|createWCAccess
argument_list|()
decl_stmt|;
try|try
block|{
name|int
name|admLockLevel
init|=
name|getLevelsToLockFromDepth
argument_list|(
name|depth
argument_list|)
decl_stmt|;
name|SVNAdminAreaInfo
name|info
init|=
name|wcAccess
operator|.
name|openAnchor
argument_list|(
name|path
argument_list|,
literal|true
argument_list|,
name|admLockLevel
argument_list|)
decl_stmt|;
name|SVNEntry
name|entry
init|=
name|wcAccess
operator|.
name|getEntry
argument_list|(
name|path
argument_list|,
literal|false
argument_list|)
decl_stmt|;
if|if
condition|(
name|entry
operator|!=
literal|null
operator|&&
name|entry
operator|.
name|isDirectory
argument_list|()
operator|&&
name|entry
operator|.
name|isScheduledForAddition
argument_list|()
condition|)
block|{
if|if
condition|(
name|depth
operator|!=
name|SVNDepth
operator|.
name|INFINITY
condition|)
block|{
name|getDebugLog
argument_list|()
operator|.
name|logFine
argument_list|(
name|SVNLogType
operator|.
name|WC
argument_list|,
literal|"Forcing revert on path '"
operator|+
name|path
operator|+
literal|"' to recurse"
argument_list|)
expr_stmt|;
name|depth
operator|=
name|SVNDepth
operator|.
name|INFINITY
expr_stmt|;
name|wcAccess
operator|.
name|close
argument_list|()
expr_stmt|;
name|info
operator|=
name|wcAccess
operator|.
name|openAnchor
argument_list|(
name|path
argument_list|,
literal|true
argument_list|,
name|SVNWCAccess
operator|.
name|INFINITE_DEPTH
argument_list|)
expr_stmt|;
block|}
block|}
name|boolean
name|useCommitTimes
init|=
name|getOptions
argument_list|()
operator|.
name|isUseCommitTimes
argument_list|()
decl_stmt|;
name|reverted
operator||=
name|doRevert
argument_list|(
name|path
argument_list|,
name|info
operator|.
name|getAnchor
argument_list|()
argument_list|,
name|depth
argument_list|,
name|useCommitTimes
argument_list|,
name|changeLists
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|SVNException
name|e
parameter_list|)
block|{
name|reverted
operator||=
literal|true
expr_stmt|;
name|SVNErrorCode
name|code
init|=
name|e
operator|.
name|getErrorMessage
argument_list|()
operator|.
name|getErrorCode
argument_list|()
decl_stmt|;
if|if
condition|(
name|code
operator|==
name|SVNErrorCode
operator|.
name|ENTRY_NOT_FOUND
operator|||
name|code
operator|==
name|SVNErrorCode
operator|.
name|UNVERSIONED_RESOURCE
condition|)
block|{
name|SVNEvent
name|event
init|=
name|SVNEventFactory
operator|.
name|createSVNEvent
argument_list|(
name|path
argument_list|,
name|SVNNodeKind
operator|.
name|UNKNOWN
argument_list|,
literal|null
argument_list|,
name|SVNRepository
operator|.
name|INVALID_REVISION
argument_list|,
name|SVNEventAction
operator|.
name|SKIP
argument_list|,
name|SVNEventAction
operator|.
name|REVERT
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|)
decl_stmt|;
name|dispatchEvent
argument_list|(
name|event
argument_list|)
expr_stmt|;
continue|continue;
block|}
throw|throw
name|e
throw|;
block|}
finally|finally
block|{
name|wcAccess
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
block|}
block|}
finally|finally
block|{
if|if
condition|(
name|reverted
condition|)
block|{
name|sleepForTimeStamp
argument_list|()
expr_stmt|;
block|}
block|}
block|}
comment|/**      * Resolves a 'conflicted' state on a Working Copy item.      *      * @param path      a WC item to be resolved      * @param recursive<span class="javakeyword">true</span> to      *                  descend recursively (relevant for directories) - this      *                  will resolve the entire tree      * @throws SVNException if<code>path</code> is not under version control      * @deprecated use {@link #doResolve(File, SVNDepth, SVNConflictChoice)} instead      */
specifier|public
name|void
name|doResolve
parameter_list|(
name|File
name|path
parameter_list|,
name|boolean
name|recursive
parameter_list|)
throws|throws
name|SVNException
block|{
name|doResolve
argument_list|(
name|path
argument_list|,
name|SVNDepth
operator|.
name|fromRecurse
argument_list|(
name|recursive
argument_list|)
argument_list|,
name|SVNConflictChoice
operator|.
name|MERGED
argument_list|)
expr_stmt|;
block|}
comment|/**      * Performs automatic conflict resolution on a working copy<code>path</code>.      *       *<p/>       * If<code>depth</code> is {@link SVNDepth#EMPTY}, acts only on<code>path</code>; if      * {@link SVNDepth#FILES}, resolves<code>path</code> and its conflicted file      * children (if any); if {@link SVNDepth#IMMEDIATES}, resolves<code>path</code> and      * all its immediate conflicted children (both files and directories,      * if any); if {@link SVNDepth#INFINITY}, resolves<code>path</code> and every      * conflicted file or directory anywhere beneath it.      *       *<p/>      * If<code>conflictChoice</code> is {@link SVNConflictChoice#BASE}, resolves the      * conflict with the old file contents; if {@link SVNConflictChoice#MINE_FULL}, uses the original       * working contents; if {@link SVNConflictChoice#THEIRS_FULL}, the new contents; and if      * {@link SVNConflictChoice#MERGED}, doesn't change the contents at all, just removes the conflict status,       * which is the pre-1.2 (pre-SVN 1.5) behavior.      *      *<p/>      * {@link SVNConflictChoice#THEIRS_CONFLICT} and {@link SVNConflictChoice#MINE_CONFLICT} are not legal for       * binary files or properties.      *      *<p/>      * If<code>path</code> is not in a state of conflict to begin with, does nothing. If       *<code>path</code>'s conflict state is removed and caller's {@link ISVNEntryHandler} is not       *<span class="javakeyword">null</span>, then an {@link SVNEventAction#RESOLVED} event is       * dispatched to the handler.      *       *<p/>      * This is equivalent to calling<code>doResolve(path, depth, true, true, conflictChoice)</code>.      * @param path               working copy path      * @param depth              tree depth      * @param conflictChoice     choice object for making decision while resolving      * @throws SVNException        * @since 1.2, SVN 1.5      */
specifier|public
name|void
name|doResolve
parameter_list|(
name|File
name|path
parameter_list|,
name|SVNDepth
name|depth
parameter_list|,
name|SVNConflictChoice
name|conflictChoice
parameter_list|)
throws|throws
name|SVNException
block|{
name|doResolve
argument_list|(
name|path
argument_list|,
name|depth
argument_list|,
literal|true
argument_list|,
literal|true
argument_list|,
name|conflictChoice
argument_list|)
expr_stmt|;
block|}
comment|/**      * Performs automatic conflict resolution on a working copy<code>path</code>.      *       *<p/>       * If<code>depth</code> is {@link SVNDepth#EMPTY}, acts only on<code>path</code>; if      * {@link SVNDepth#FILES}, resolves<code>path</code> and its conflicted file      * children (if any); if {@link SVNDepth#IMMEDIATES}, resolves<code>path</code> and      * all its immediate conflicted children (both files and directories,      * if any); if {@link SVNDepth#INFINITY}, resolves<code>path</code> and every      * conflicted file or directory anywhere beneath it.      *       *<p/>      * If<code>conflictChoice</code> is {@link SVNConflictChoice#BASE}, resolves the      * conflict with the old file contents; if {@link SVNConflictChoice#MINE_FULL}, uses the original       * working contents; if {@link SVNConflictChoice#THEIRS_FULL}, the new contents; and if      * {@link SVNConflictChoice#MERGED}, doesn't change the contents at all, just removes the conflict status,       * which is the pre-1.2 (pre-SVN 1.5) behavior.      *      *<p/>      * {@link SVNConflictChoice#THEIRS_CONFLICT} and {@link SVNConflictChoice#MINE_CONFLICT} are not legal for       * binary files or properties.      *      *<p/>      * If<code>path</code> is not in a state of conflict to begin with, does nothing. If       *<code>path</code>'s conflict state is removed and caller's {@link ISVNEntryHandler} is not       *<span class="javakeyword">null</span>, then an {@link SVNEventAction#RESOLVED} event is       * dispatched to the handler.      *       * @param path               working copy path      * @param depth              tree depth      * @param resolveContents    resolve content conflict      * @param resolveProperties  resolve property conflict      * @param conflictChoice     choice object for making decision while resolving      * @throws SVNException        * @since 1.2, SVN 1.5      */
specifier|public
name|void
name|doResolve
parameter_list|(
name|File
name|path
parameter_list|,
name|SVNDepth
name|depth
parameter_list|,
specifier|final
name|boolean
name|resolveContents
parameter_list|,
specifier|final
name|boolean
name|resolveProperties
parameter_list|,
name|SVNConflictChoice
name|conflictChoice
parameter_list|)
throws|throws
name|SVNException
block|{
name|doResolve
argument_list|(
name|path
argument_list|,
name|depth
argument_list|,
name|resolveContents
argument_list|,
name|resolveProperties
argument_list|,
literal|true
argument_list|,
name|conflictChoice
argument_list|)
expr_stmt|;
block|}
comment|/**      * Performs automatic conflict resolution on a working copy<code>path</code>.      *       *<p/>       * If<code>depth</code> is {@link SVNDepth#EMPTY}, acts only on<code>path</code>; if      * {@link SVNDepth#FILES}, resolves<code>path</code> and its conflicted file      * children (if any); if {@link SVNDepth#IMMEDIATES}, resolves<code>path</code> and      * all its immediate conflicted children (both files and directories,      * if any); if {@link SVNDepth#INFINITY}, resolves<code>path</code> and every      * conflicted file or directory anywhere beneath it.      *       *<p/>      * If<code>conflictChoice</code> is {@link SVNConflictChoice#BASE}, resolves the      * conflict with the old file contents; if {@link SVNConflictChoice#MINE_FULL}, uses the original       * working contents; if {@link SVNConflictChoice#THEIRS_FULL}, the new contents; and if      * {@link SVNConflictChoice#MERGED}, doesn't change the contents at all, just removes the conflict status,       * which is the pre-1.2 (pre-SVN 1.5) behavior.      *      *<p/>      * {@link SVNConflictChoice#THEIRS_CONFLICT} and {@link SVNConflictChoice#MINE_CONFLICT} are not legal for       * binary files or properties.      *      *<p/>      * If<code>path</code> is not in a state of conflict to begin with, does nothing. If       *<code>path</code>'s conflict state is removed and caller's {@link ISVNEntryHandler} is not       *<span class="javakeyword">null</span>, then an {@link SVNEventAction#RESOLVED} event is       * dispatched to the handler.      *       * @param path               working copy path      * @param depth              tree depth      * @param resolveContents    resolve content conflict      * @param resolveProperties  resolve property conflict      * @param resolveTree n      resolve any tree conlicts      * @param conflictChoice     choice object for making decision while resolving      * @throws SVNException        * @since 1.3, SVN 1.6      */
specifier|public
name|void
name|doResolve
parameter_list|(
name|File
name|path
parameter_list|,
name|SVNDepth
name|depth
parameter_list|,
specifier|final
name|boolean
name|resolveContents
parameter_list|,
specifier|final
name|boolean
name|resolveProperties
parameter_list|,
specifier|final
name|boolean
name|resolveTree
parameter_list|,
name|SVNConflictChoice
name|conflictChoice
parameter_list|)
throws|throws
name|SVNException
block|{
specifier|final
name|SVNConflictChoice
name|choice
init|=
name|conflictChoice
operator|==
literal|null
condition|?
name|SVNConflictChoice
operator|.
name|MERGED
else|:
name|conflictChoice
decl_stmt|;
name|path
operator|=
name|path
operator|.
name|getAbsoluteFile
argument_list|()
expr_stmt|;
specifier|final
name|SVNWCAccess
name|wcAccess
init|=
name|createWCAccess
argument_list|()
decl_stmt|;
name|int
name|admLockLevel
init|=
name|SVNWCAccess
operator|.
name|INFINITE_DEPTH
decl_stmt|;
if|if
condition|(
name|depth
operator|==
name|SVNDepth
operator|.
name|EMPTY
operator|||
name|depth
operator|==
name|SVNDepth
operator|.
name|FILES
condition|)
block|{
name|admLockLevel
operator|=
literal|0
expr_stmt|;
block|}
try|try
block|{
name|wcAccess
operator|.
name|probeOpen
argument_list|(
name|path
argument_list|,
literal|true
argument_list|,
name|admLockLevel
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|wcAccess
operator|.
name|isWCRoot
argument_list|(
name|path
argument_list|)
condition|)
block|{
comment|// not a wc root, open from parent
name|wcAccess
operator|.
name|close
argument_list|()
expr_stmt|;
if|if
condition|(
name|admLockLevel
operator|>=
literal|0
condition|)
block|{
name|admLockLevel
operator|++
expr_stmt|;
block|}
name|wcAccess
operator|.
name|probeOpen
argument_list|(
name|path
operator|.
name|getParentFile
argument_list|()
argument_list|,
literal|true
argument_list|,
name|admLockLevel
argument_list|)
expr_stmt|;
block|}
name|ISVNEntryHandler
name|resolveEntryHandler
init|=
operator|new
name|ISVNEntryHandler
argument_list|()
block|{
specifier|public
name|void
name|handleEntry
parameter_list|(
name|File
name|path
parameter_list|,
name|SVNEntry
name|entry
parameter_list|)
throws|throws
name|SVNException
block|{
if|if
condition|(
name|entry
operator|!=
literal|null
operator|&&
name|entry
operator|.
name|isDirectory
argument_list|()
operator|&&
operator|!
literal|""
operator|.
name|equals
argument_list|(
name|entry
operator|.
name|getName
argument_list|()
argument_list|)
condition|)
block|{
return|return;
block|}
name|SVNNodeKind
name|kind
init|=
name|SVNNodeKind
operator|.
name|UNKNOWN
decl_stmt|;
name|long
name|revision
init|=
operator|-
literal|1
decl_stmt|;
name|boolean
name|wcRoot
init|=
literal|false
decl_stmt|;
name|boolean
name|resolved
init|=
literal|false
decl_stmt|;
if|if
condition|(
name|entry
operator|!=
literal|null
operator|&&
name|entry
operator|.
name|isDirectory
argument_list|()
condition|)
block|{
name|wcRoot
operator|=
name|wcAccess
operator|.
name|isWCRoot
argument_list|(
name|path
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|resolveTree
operator|&&
operator|!
name|wcRoot
condition|)
block|{
name|File
name|parentDir
init|=
name|path
operator|.
name|getParentFile
argument_list|()
decl_stmt|;
name|SVNAdminArea
name|parentArea
init|=
name|wcAccess
operator|.
name|probeRetrieve
argument_list|(
name|parentDir
argument_list|)
decl_stmt|;
name|SVNTreeConflictDescription
name|tc
init|=
name|parentArea
operator|.
name|getTreeConflict
argument_list|(
name|path
operator|.
name|getName
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|tc
operator|!=
literal|null
condition|)
block|{
if|if
condition|(
name|choice
operator|!=
name|SVNConflictChoice
operator|.
name|MERGED
condition|)
block|{
name|SVNErrorMessage
name|err
init|=
name|SVNErrorMessage
operator|.
name|create
argument_list|(
name|SVNErrorCode
operator|.
name|WC_CONFLICT_RESOLVER_FAILURE
argument_list|,
literal|"Tree conflicts can only be resolved to ''working'' state; ''{0}'' not resolved"
argument_list|,
name|path
argument_list|)
decl_stmt|;
name|SVNErrorManager
operator|.
name|error
argument_list|(
name|err
argument_list|,
name|SVNLogType
operator|.
name|WC
argument_list|)
expr_stmt|;
block|}
name|parentArea
operator|.
name|deleteTreeConflict
argument_list|(
name|path
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
name|kind
operator|=
name|tc
operator|.
name|getNodeKind
argument_list|()
expr_stmt|;
name|resolved
operator|=
literal|true
expr_stmt|;
block|}
block|}
if|if
condition|(
name|entry
operator|!=
literal|null
operator|&&
operator|(
name|resolveContents
operator|||
name|resolveProperties
operator|)
condition|)
block|{
name|kind
operator|=
name|entry
operator|.
name|getKind
argument_list|()
expr_stmt|;
name|revision
operator|=
name|entry
operator|.
name|getRevision
argument_list|()
expr_stmt|;
name|File
name|conflictDir
init|=
name|entry
operator|.
name|isDirectory
argument_list|()
condition|?
name|path
else|:
name|path
operator|.
name|getParentFile
argument_list|()
decl_stmt|;
name|SVNAdminArea
name|conflictArea
init|=
name|wcAccess
operator|.
name|retrieve
argument_list|(
name|conflictDir
argument_list|)
decl_stmt|;
name|resolved
operator||=
name|conflictArea
operator|.
name|markResolved
argument_list|(
name|entry
operator|.
name|getName
argument_list|()
argument_list|,
name|resolveContents
argument_list|,
name|resolveProperties
argument_list|,
name|choice
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|resolved
condition|)
block|{
name|SVNEvent
name|event
init|=
name|SVNEventFactory
operator|.
name|createSVNEvent
argument_list|(
name|path
argument_list|,
name|kind
argument_list|,
literal|null
argument_list|,
name|revision
argument_list|,
name|SVNEventAction
operator|.
name|RESOLVED
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|)
decl_stmt|;
name|dispatchEvent
argument_list|(
name|event
argument_list|)
expr_stmt|;
block|}
block|}
specifier|public
name|void
name|handleError
parameter_list|(
name|File
name|path
parameter_list|,
name|SVNErrorMessage
name|error
parameter_list|)
throws|throws
name|SVNException
block|{
name|SVNErrorManager
operator|.
name|error
argument_list|(
name|error
argument_list|,
name|SVNLogType
operator|.
name|WC
argument_list|)
expr_stmt|;
block|}
block|}
decl_stmt|;
if|if
condition|(
name|depth
operator|==
name|SVNDepth
operator|.
name|EMPTY
condition|)
block|{
name|SVNEntry
name|entry
init|=
name|wcAccess
operator|.
name|getEntry
argument_list|(
name|path
argument_list|,
literal|false
argument_list|)
decl_stmt|;
if|if
condition|(
name|entry
operator|!=
literal|null
condition|)
block|{
name|resolveEntryHandler
operator|.
name|handleEntry
argument_list|(
name|path
argument_list|,
name|entry
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|SVNTreeConflictDescription
name|tc
init|=
name|wcAccess
operator|.
name|getTreeConflict
argument_list|(
name|path
argument_list|)
decl_stmt|;
if|if
condition|(
name|tc
operator|!=
literal|null
condition|)
block|{
name|resolveEntryHandler
operator|.
name|handleEntry
argument_list|(
name|path
argument_list|,
literal|null
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|SVNErrorMessage
name|err
init|=
name|SVNErrorMessage
operator|.
name|create
argument_list|(
name|SVNErrorCode
operator|.
name|ENTRY_NOT_FOUND
argument_list|,
literal|"''{0}'' is not under version control"
argument_list|,
name|path
argument_list|)
decl_stmt|;
name|SVNErrorManager
operator|.
name|error
argument_list|(
name|err
argument_list|,
name|SVNLogType
operator|.
name|WC
argument_list|)
expr_stmt|;
block|}
block|}
block|}
else|else
block|{
name|wcAccess
operator|.
name|walkEntries
argument_list|(
name|path
argument_list|,
name|resolveEntryHandler
argument_list|,
literal|false
argument_list|,
literal|true
argument_list|,
name|depth
argument_list|)
expr_stmt|;
block|}
block|}
finally|finally
block|{
name|wcAccess
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
block|}
comment|/**      * Locks file items in a Working Copy as well as in a repository so that      * no other user can commit changes to them.      *      * @param paths       an array of local WC file paths that should be locked      * @param stealLock   if<span class="javakeyword">true</span> then all existing      *                    locks on the specified<code>paths</code> will be "stolen"      * @param lockMessage an optional lock comment      * @throws SVNException if one of the following is true:      *<ul>      *<li>a path to be locked is not under version control      *<li>can not obtain a URL of a local path to lock it in      *                      the repository - there's no such entry      *<li><code>paths</code> to be locked belong to different repositories      *</ul>      * @see #doLock(SVNURL[],boolean,String)      */
specifier|public
name|void
name|doLock
parameter_list|(
name|File
index|[]
name|paths
parameter_list|,
name|boolean
name|stealLock
parameter_list|,
name|String
name|lockMessage
parameter_list|)
throws|throws
name|SVNException
block|{
if|if
condition|(
name|paths
operator|==
literal|null
operator|||
name|paths
operator|.
name|length
operator|==
literal|0
condition|)
block|{
return|return;
block|}
specifier|final
name|Map
name|entriesMap
init|=
operator|new
name|SVNHashMap
argument_list|()
decl_stmt|;
name|Map
name|pathsRevisionsMap
init|=
operator|new
name|SVNHashMap
argument_list|()
decl_stmt|;
specifier|final
name|SVNWCAccess
name|wcAccess
init|=
name|createWCAccess
argument_list|()
decl_stmt|;
try|try
block|{
specifier|final
name|SVNURL
name|topURL
init|=
name|collectLockInfo
argument_list|(
name|wcAccess
argument_list|,
name|paths
argument_list|,
name|entriesMap
argument_list|,
name|pathsRevisionsMap
argument_list|,
literal|true
argument_list|,
name|stealLock
argument_list|)
decl_stmt|;
name|SVNRepository
name|repository
init|=
name|createRepository
argument_list|(
name|topURL
argument_list|,
name|paths
index|[
literal|0
index|]
argument_list|,
name|wcAccess
argument_list|,
literal|true
argument_list|)
decl_stmt|;
specifier|final
name|SVNURL
name|rootURL
init|=
name|repository
operator|.
name|getRepositoryRoot
argument_list|(
literal|true
argument_list|)
decl_stmt|;
name|repository
operator|.
name|lock
argument_list|(
name|pathsRevisionsMap
argument_list|,
name|lockMessage
argument_list|,
name|stealLock
argument_list|,
operator|new
name|ISVNLockHandler
argument_list|()
block|{
specifier|public
name|void
name|handleLock
parameter_list|(
name|String
name|path
parameter_list|,
name|SVNLock
name|lock
parameter_list|,
name|SVNErrorMessage
name|error
parameter_list|)
throws|throws
name|SVNException
block|{
name|SVNURL
name|fullURL
init|=
name|rootURL
operator|.
name|appendPath
argument_list|(
name|path
argument_list|,
literal|false
argument_list|)
decl_stmt|;
name|LockInfo
name|lockInfo
init|=
operator|(
name|LockInfo
operator|)
name|entriesMap
operator|.
name|get
argument_list|(
name|fullURL
argument_list|)
decl_stmt|;
name|SVNAdminArea
name|dir
init|=
name|wcAccess
operator|.
name|probeRetrieve
argument_list|(
name|lockInfo
operator|.
name|myFile
argument_list|)
decl_stmt|;
if|if
condition|(
name|error
operator|==
literal|null
condition|)
block|{
name|SVNEntry
name|entry
init|=
name|wcAccess
operator|.
name|getVersionedEntry
argument_list|(
name|lockInfo
operator|.
name|myFile
argument_list|,
literal|false
argument_list|)
decl_stmt|;
name|entry
operator|.
name|setLockToken
argument_list|(
name|lock
operator|.
name|getID
argument_list|()
argument_list|)
expr_stmt|;
name|entry
operator|.
name|setLockComment
argument_list|(
name|lock
operator|.
name|getComment
argument_list|()
argument_list|)
expr_stmt|;
name|entry
operator|.
name|setLockOwner
argument_list|(
name|lock
operator|.
name|getOwner
argument_list|()
argument_list|)
expr_stmt|;
name|entry
operator|.
name|setLockCreationDate
argument_list|(
name|SVNDate
operator|.
name|formatDate
argument_list|(
name|lock
operator|.
name|getCreationDate
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
comment|// get properties and values.
name|SVNVersionedProperties
name|props
init|=
name|dir
operator|.
name|getProperties
argument_list|(
name|entry
operator|.
name|getName
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|props
operator|.
name|getPropertyValue
argument_list|(
name|SVNProperty
operator|.
name|NEEDS_LOCK
argument_list|)
operator|!=
literal|null
condition|)
block|{
name|SVNFileUtil
operator|.
name|setReadonly
argument_list|(
name|dir
operator|.
name|getFile
argument_list|(
name|entry
operator|.
name|getName
argument_list|()
argument_list|)
argument_list|,
literal|false
argument_list|)
expr_stmt|;
block|}
name|SVNFileUtil
operator|.
name|setExecutable
argument_list|(
name|dir
operator|.
name|getFile
argument_list|(
name|entry
operator|.
name|getName
argument_list|()
argument_list|)
argument_list|,
name|props
operator|.
name|getPropertyValue
argument_list|(
name|SVNProperty
operator|.
name|EXECUTABLE
argument_list|)
operator|!=
literal|null
argument_list|)
expr_stmt|;
name|dir
operator|.
name|saveEntries
argument_list|(
literal|false
argument_list|)
expr_stmt|;
name|handleEvent
argument_list|(
name|SVNEventFactory
operator|.
name|createLockEvent
argument_list|(
name|dir
operator|.
name|getFile
argument_list|(
name|entry
operator|.
name|getName
argument_list|()
argument_list|)
argument_list|,
name|SVNEventAction
operator|.
name|LOCKED
argument_list|,
name|lock
argument_list|,
literal|null
argument_list|)
argument_list|,
name|ISVNEventHandler
operator|.
name|UNKNOWN
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|handleEvent
argument_list|(
name|SVNEventFactory
operator|.
name|createLockEvent
argument_list|(
name|dir
operator|.
name|getFile
argument_list|(
name|lockInfo
operator|.
name|myFile
operator|.
name|getName
argument_list|()
argument_list|)
argument_list|,
name|SVNEventAction
operator|.
name|LOCK_FAILED
argument_list|,
name|lock
argument_list|,
name|error
argument_list|)
argument_list|,
name|ISVNEventHandler
operator|.
name|UNKNOWN
argument_list|)
expr_stmt|;
block|}
block|}
specifier|public
name|void
name|handleUnlock
parameter_list|(
name|String
name|path
parameter_list|,
name|SVNLock
name|lock
parameter_list|,
name|SVNErrorMessage
name|error
parameter_list|)
block|{
block|}
block|}
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
name|wcAccess
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
block|}
comment|/**      * Locks file items in a repository so that no other user can commit      * changes to them.      *      * @param urls        an array of URLs to be locked      * @param stealLock   if<span class="javakeyword">true</span> then all existing      *                    locks on the specified<code>urls</code> will be "stolen"      * @param lockMessage an optional lock comment      * @throws SVNException      * @see #doLock(File[],boolean,String)      */
specifier|public
name|void
name|doLock
parameter_list|(
name|SVNURL
index|[]
name|urls
parameter_list|,
name|boolean
name|stealLock
parameter_list|,
name|String
name|lockMessage
parameter_list|)
throws|throws
name|SVNException
block|{
name|Collection
name|paths
init|=
operator|new
name|SVNHashSet
argument_list|()
decl_stmt|;
name|SVNURL
name|topURL
init|=
name|SVNURLUtil
operator|.
name|condenceURLs
argument_list|(
name|urls
argument_list|,
name|paths
argument_list|,
literal|false
argument_list|)
decl_stmt|;
if|if
condition|(
name|paths
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|paths
operator|.
name|add
argument_list|(
literal|""
argument_list|)
expr_stmt|;
block|}
name|Map
name|pathsToRevisions
init|=
operator|new
name|SVNHashMap
argument_list|()
decl_stmt|;
for|for
control|(
name|Iterator
name|p
init|=
name|paths
operator|.
name|iterator
argument_list|()
init|;
name|p
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|String
name|path
init|=
operator|(
name|String
operator|)
name|p
operator|.
name|next
argument_list|()
decl_stmt|;
name|path
operator|=
name|SVNEncodingUtil
operator|.
name|uriDecode
argument_list|(
name|path
argument_list|)
expr_stmt|;
name|pathsToRevisions
operator|.
name|put
argument_list|(
name|path
argument_list|,
literal|null
argument_list|)
expr_stmt|;
block|}
name|checkCancelled
argument_list|()
expr_stmt|;
name|SVNRepository
name|repository
init|=
name|createRepository
argument_list|(
name|topURL
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|,
literal|true
argument_list|)
decl_stmt|;
name|repository
operator|.
name|lock
argument_list|(
name|pathsToRevisions
argument_list|,
name|lockMessage
argument_list|,
name|stealLock
argument_list|,
operator|new
name|ISVNLockHandler
argument_list|()
block|{
specifier|public
name|void
name|handleLock
parameter_list|(
name|String
name|path
parameter_list|,
name|SVNLock
name|lock
parameter_list|,
name|SVNErrorMessage
name|error
parameter_list|)
throws|throws
name|SVNException
block|{
if|if
condition|(
name|error
operator|!=
literal|null
condition|)
block|{
name|handleEvent
argument_list|(
name|SVNEventFactory
operator|.
name|createLockEvent
argument_list|(
operator|new
name|Resource
argument_list|(
name|path
argument_list|)
argument_list|,
name|SVNEventAction
operator|.
name|LOCK_FAILED
argument_list|,
name|lock
argument_list|,
name|error
argument_list|)
argument_list|,
name|ISVNEventHandler
operator|.
name|UNKNOWN
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|handleEvent
argument_list|(
name|SVNEventFactory
operator|.
name|createLockEvent
argument_list|(
operator|new
name|Resource
argument_list|(
name|path
argument_list|)
argument_list|,
name|SVNEventAction
operator|.
name|LOCKED
argument_list|,
name|lock
argument_list|,
literal|null
argument_list|)
argument_list|,
name|ISVNEventHandler
operator|.
name|UNKNOWN
argument_list|)
expr_stmt|;
block|}
block|}
specifier|public
name|void
name|handleUnlock
parameter_list|(
name|String
name|path
parameter_list|,
name|SVNLock
name|lock
parameter_list|,
name|SVNErrorMessage
name|error
parameter_list|)
throws|throws
name|SVNException
block|{
block|}
block|}
argument_list|)
expr_stmt|;
block|}
comment|/**      * Unlocks file items in a Working Copy as well as in a repository.      *      * @param paths     an array of local WC file paths that should be unlocked      * @param breakLock if<span class="javakeyword">true</span> and there are locks      *                  that belong to different users then those locks will be also      *                  unlocked - that is "broken"      * @throws SVNException if one of the following is true:      *<ul>      *<li>a path is not under version control      *<li>can not obtain a URL of a local path to unlock it in      *                      the repository - there's no such entry      *<li>if a path is not locked in the Working Copy      *                      and<code>breakLock</code> is<span class="javakeyword">false</span>      *<li><code>paths</code> to be unlocked belong to different repositories      *</ul>      * @see #doUnlock(SVNURL[],boolean)      */
specifier|public
name|void
name|doUnlock
parameter_list|(
name|File
index|[]
name|paths
parameter_list|,
name|boolean
name|breakLock
parameter_list|)
throws|throws
name|SVNException
block|{
if|if
condition|(
name|paths
operator|==
literal|null
operator|||
name|paths
operator|.
name|length
operator|==
literal|0
condition|)
block|{
return|return;
block|}
specifier|final
name|Map
name|entriesMap
init|=
operator|new
name|SVNHashMap
argument_list|()
decl_stmt|;
name|Map
name|pathsTokensMap
init|=
operator|new
name|SVNHashMap
argument_list|()
decl_stmt|;
specifier|final
name|SVNWCAccess
name|wcAccess
init|=
name|createWCAccess
argument_list|()
decl_stmt|;
try|try
block|{
specifier|final
name|SVNURL
name|topURL
init|=
name|collectLockInfo
argument_list|(
name|wcAccess
argument_list|,
name|paths
argument_list|,
name|entriesMap
argument_list|,
name|pathsTokensMap
argument_list|,
literal|false
argument_list|,
name|breakLock
argument_list|)
decl_stmt|;
name|checkCancelled
argument_list|()
expr_stmt|;
name|SVNRepository
name|repository
init|=
name|createRepository
argument_list|(
name|topURL
argument_list|,
name|paths
index|[
literal|0
index|]
argument_list|,
name|wcAccess
argument_list|,
literal|true
argument_list|)
decl_stmt|;
specifier|final
name|SVNURL
name|rootURL
init|=
name|repository
operator|.
name|getRepositoryRoot
argument_list|(
literal|true
argument_list|)
decl_stmt|;
name|repository
operator|.
name|unlock
argument_list|(
name|pathsTokensMap
argument_list|,
name|breakLock
argument_list|,
operator|new
name|ISVNLockHandler
argument_list|()
block|{
specifier|public
name|void
name|handleLock
parameter_list|(
name|String
name|path
parameter_list|,
name|SVNLock
name|lock
parameter_list|,
name|SVNErrorMessage
name|error
parameter_list|)
throws|throws
name|SVNException
block|{
block|}
specifier|public
name|void
name|handleUnlock
parameter_list|(
name|String
name|path
parameter_list|,
name|SVNLock
name|lock
parameter_list|,
name|SVNErrorMessage
name|error
parameter_list|)
throws|throws
name|SVNException
block|{
name|SVNURL
name|fullURL
init|=
name|rootURL
operator|.
name|appendPath
argument_list|(
name|path
argument_list|,
literal|false
argument_list|)
decl_stmt|;
name|LockInfo
name|lockInfo
init|=
operator|(
name|LockInfo
operator|)
name|entriesMap
operator|.
name|get
argument_list|(
name|fullURL
argument_list|)
decl_stmt|;
name|SVNEventAction
name|action
init|=
literal|null
decl_stmt|;
name|SVNAdminArea
name|dir
init|=
name|wcAccess
operator|.
name|probeRetrieve
argument_list|(
name|lockInfo
operator|.
name|myFile
argument_list|)
decl_stmt|;
if|if
condition|(
name|error
operator|==
literal|null
operator|||
operator|(
name|error
operator|!=
literal|null
operator|&&
name|error
operator|.
name|getErrorCode
argument_list|()
operator|!=
name|SVNErrorCode
operator|.
name|FS_LOCK_OWNER_MISMATCH
operator|)
condition|)
block|{
name|SVNEntry
name|entry
init|=
name|wcAccess
operator|.
name|getVersionedEntry
argument_list|(
name|lockInfo
operator|.
name|myFile
argument_list|,
literal|false
argument_list|)
decl_stmt|;
name|entry
operator|.
name|setLockToken
argument_list|(
literal|null
argument_list|)
expr_stmt|;
name|entry
operator|.
name|setLockComment
argument_list|(
literal|null
argument_list|)
expr_stmt|;
name|entry
operator|.
name|setLockOwner
argument_list|(
literal|null
argument_list|)
expr_stmt|;
name|entry
operator|.
name|setLockCreationDate
argument_list|(
literal|null
argument_list|)
expr_stmt|;
name|SVNVersionedProperties
name|props
init|=
name|dir
operator|.
name|getProperties
argument_list|(
name|entry
operator|.
name|getName
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|props
operator|.
name|getPropertyValue
argument_list|(
name|SVNProperty
operator|.
name|NEEDS_LOCK
argument_list|)
operator|!=
literal|null
condition|)
block|{
name|SVNFileUtil
operator|.
name|setReadonly
argument_list|(
name|dir
operator|.
name|getFile
argument_list|(
name|entry
operator|.
name|getName
argument_list|()
argument_list|)
argument_list|,
literal|true
argument_list|)
expr_stmt|;
block|}
name|dir
operator|.
name|saveEntries
argument_list|(
literal|false
argument_list|)
expr_stmt|;
name|action
operator|=
name|SVNEventAction
operator|.
name|UNLOCKED
expr_stmt|;
block|}
if|if
condition|(
name|error
operator|!=
literal|null
condition|)
block|{
name|action
operator|=
name|SVNEventAction
operator|.
name|UNLOCK_FAILED
expr_stmt|;
block|}
if|if
condition|(
name|action
operator|!=
literal|null
condition|)
block|{
name|handleEvent
argument_list|(
name|SVNEventFactory
operator|.
name|createLockEvent
argument_list|(
name|dir
operator|.
name|getFile
argument_list|(
name|lockInfo
operator|.
name|myFile
operator|.
name|getName
argument_list|()
argument_list|)
argument_list|,
name|action
argument_list|,
name|lock
argument_list|,
name|error
argument_list|)
argument_list|,
name|ISVNEventHandler
operator|.
name|UNKNOWN
argument_list|)
expr_stmt|;
block|}
block|}
block|}
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
name|wcAccess
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
block|}
comment|/**      * Unlocks file items in a repository.      *      * @param urls      an array of URLs that should be unlocked      * @param breakLock if<span class="javakeyword">true</span> and there are locks      *                  that belong to different users then those locks will be also      *                  unlocked - that is "broken"      * @throws SVNException      * @see #doUnlock(File[],boolean)      */
specifier|public
name|void
name|doUnlock
parameter_list|(
name|SVNURL
index|[]
name|urls
parameter_list|,
name|boolean
name|breakLock
parameter_list|)
throws|throws
name|SVNException
block|{
name|Collection
name|paths
init|=
operator|new
name|SVNHashSet
argument_list|()
decl_stmt|;
name|SVNURL
name|topURL
init|=
name|SVNURLUtil
operator|.
name|condenceURLs
argument_list|(
name|urls
argument_list|,
name|paths
argument_list|,
literal|false
argument_list|)
decl_stmt|;
if|if
condition|(
name|paths
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|paths
operator|.
name|add
argument_list|(
literal|""
argument_list|)
expr_stmt|;
block|}
name|Map
name|pathsToTokens
init|=
operator|new
name|SVNHashMap
argument_list|()
decl_stmt|;
for|for
control|(
name|Iterator
name|p
init|=
name|paths
operator|.
name|iterator
argument_list|()
init|;
name|p
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|String
name|path
init|=
operator|(
name|String
operator|)
name|p
operator|.
name|next
argument_list|()
decl_stmt|;
name|path
operator|=
name|SVNEncodingUtil
operator|.
name|uriDecode
argument_list|(
name|path
argument_list|)
expr_stmt|;
name|pathsToTokens
operator|.
name|put
argument_list|(
name|path
argument_list|,
literal|null
argument_list|)
expr_stmt|;
block|}
name|checkCancelled
argument_list|()
expr_stmt|;
name|SVNRepository
name|repository
init|=
name|createRepository
argument_list|(
name|topURL
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|,
literal|true
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|breakLock
condition|)
block|{
name|pathsToTokens
operator|=
name|fetchLockTokens
argument_list|(
name|repository
argument_list|,
name|pathsToTokens
argument_list|)
expr_stmt|;
block|}
name|repository
operator|.
name|unlock
argument_list|(
name|pathsToTokens
argument_list|,
name|breakLock
argument_list|,
operator|new
name|ISVNLockHandler
argument_list|()
block|{
specifier|public
name|void
name|handleLock
parameter_list|(
name|String
name|path
parameter_list|,
name|SVNLock
name|lock
parameter_list|,
name|SVNErrorMessage
name|error
parameter_list|)
throws|throws
name|SVNException
block|{
block|}
specifier|public
name|void
name|handleUnlock
parameter_list|(
name|String
name|path
parameter_list|,
name|SVNLock
name|lock
parameter_list|,
name|SVNErrorMessage
name|error
parameter_list|)
throws|throws
name|SVNException
block|{
if|if
condition|(
name|error
operator|!=
literal|null
condition|)
block|{
name|handleEvent
argument_list|(
name|SVNEventFactory
operator|.
name|createLockEvent
argument_list|(
operator|new
name|Resource
argument_list|(
name|path
argument_list|)
argument_list|,
name|SVNEventAction
operator|.
name|UNLOCK_FAILED
argument_list|,
literal|null
argument_list|,
name|error
argument_list|)
argument_list|,
name|ISVNEventHandler
operator|.
name|UNKNOWN
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|handleEvent
argument_list|(
name|SVNEventFactory
operator|.
name|createLockEvent
argument_list|(
operator|new
name|Resource
argument_list|(
name|path
argument_list|)
argument_list|,
name|SVNEventAction
operator|.
name|UNLOCKED
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|)
argument_list|,
name|ISVNEventHandler
operator|.
name|UNKNOWN
argument_list|)
expr_stmt|;
block|}
block|}
block|}
argument_list|)
expr_stmt|;
block|}
comment|/**      * Collects information about Working Copy item(s) and passes it to an      * info handler.      *<p/>      *<p/>      * If<code>revision</code> is valid and not local,      * then information will be collected on remote items (that is taken from      * a repository). Otherwise information is gathered on local items not      * accessing a repository.      *      * @param path      a WC item on which info should be obtained      * @param revision  a target revision      * @param recursive<span class="javakeyword">true</span> to      *                  descend recursively (relevant for directories)      * @param handler   a caller's info handler      * @throws SVNException if one of the following is true:      *<ul>      *<li><code>path</code> is not under version control      *<li>can not obtain a URL corresponding to<code>path</code> to      *                      get its information from the repository - there's no such entry      *<li>if a remote info:<code>path</code> is an item that does not exist in      *                      the specified<code>revision</code>      *</ul>      * @deprecated use {@link #doInfo(File, SVNRevision, SVNRevision, SVNDepth, Collection, ISVNInfoHandler)} instead      */
specifier|public
name|void
name|doInfo
parameter_list|(
name|File
name|path
parameter_list|,
name|SVNRevision
name|revision
parameter_list|,
name|boolean
name|recursive
parameter_list|,
name|ISVNInfoHandler
name|handler
parameter_list|)
throws|throws
name|SVNException
block|{
name|doInfo
argument_list|(
name|path
argument_list|,
name|SVNRevision
operator|.
name|UNDEFINED
argument_list|,
name|revision
argument_list|,
name|SVNDepth
operator|.
name|getInfinityOrEmptyDepth
argument_list|(
name|recursive
argument_list|)
argument_list|,
literal|null
argument_list|,
name|handler
argument_list|)
expr_stmt|;
block|}
comment|/**      * Collects information about Working Copy item(s) and passes it to an      * info handler.      *<p/>      *<p/>      * If<code>revision</code>&<code>pegRevision</code> are valid and not      * local, then information will be collected      * on remote items (that is taken from a repository). Otherwise information      * is gathered on local items not accessing a repository.      *      * @param path        a WC item on which info should be obtained      * @param pegRevision a revision in which<code>path</code> is first      *                    looked up      * @param revision    a target revision      * @param recursive<span class="javakeyword">true</span> to      *                    descend recursively (relevant for directories)      * @param handler     a caller's info handler      * @throws SVNException if one of the following is true:      *<ul>      *<li><code>path</code> is not under version control      *<li>can not obtain a URL corresponding to<code>path</code> to      *                      get its information from the repository - there's no such entry      *<li>if a remote info:<code>path</code> is an item that does not exist in      *                      the specified<code>revision</code>      *</ul>      * @deprecated use {@link #doInfo(File, SVNRevision, SVNRevision, SVNDepth, Collection, ISVNInfoHandler)} instead      */
specifier|public
name|void
name|doInfo
parameter_list|(
name|File
name|path
parameter_list|,
name|SVNRevision
name|pegRevision
parameter_list|,
name|SVNRevision
name|revision
parameter_list|,
name|boolean
name|recursive
parameter_list|,
name|ISVNInfoHandler
name|handler
parameter_list|)
throws|throws
name|SVNException
block|{
name|doInfo
argument_list|(
name|path
argument_list|,
name|pegRevision
argument_list|,
name|revision
argument_list|,
name|SVNDepth
operator|.
name|getInfinityOrEmptyDepth
argument_list|(
name|recursive
argument_list|)
argument_list|,
literal|null
argument_list|,
name|handler
argument_list|)
expr_stmt|;
block|}
comment|/**      * Invokes<code>handler</code> to return information      * about<code>path</code> in<code>revision</code>. The information returned is      * system-generated metadata, not the sort of "property" metadata      * created by users. See {@link SVNInfo}.      *       *<p/>      * If both revision arguments are either<span class="javakeyword">null</span> or       * {@link SVNRevision#isLocal() local}, or {@link SVNRevision#isValid() invalid}, then information       * will be pulled solely from the working copy; no network connections will be      * made.      *       *<p/>      * Otherwise, information will be pulled from a repository. The      * actual node revision selected is determined by the<code>path</code>      * as it exists in<code>pegRevision</code>. If<code>pegRevision</code> is       * {@link SVNRevision#UNDEFINED}, then it defaults to {@link SVNRevision#WORKING}.      *      *<p/>      * If<code>path</code> is a file, just invokes<code>handler</code> on it. If it      * is a directory, then descends according to<code>depth</code>.  If<code>depth</code> is      * {@link SVNDepth#EMPTY}, invokes<code>handler</code> on<code>path</code> and      * nothing else; if {@link SVNDepth#FILES}, on<code>path</code> and its      * immediate file children; if {@link SVNDepth#IMMEDIATES}, the preceding      * plus on each immediate subdirectory; if {@link SVNDepth#INFINITY}, then      * recurses fully, invoking<code>handler</code> on<code>path</code> and      * everything beneath it.      *       *<p/>      *<code>changeLists</code> is a collection of<code>String</code> changelist      * names, used as a restrictive filter on items whose info is      * reported; that is, doesn't report info about any item unless      * it's a member of one of those changelists.  If<code>changeLists</code> is      * empty (or<span class="javakeyword">null</span>), no changelist filtering occurs.      *       * @param path           a WC item on which info should be obtained      * @param pegRevision    a revision in which<code>path</code> is first      *                       looked up      * @param revision       a target revision      * @param depth          tree depth      * @param changeLists    collection changelist names      * @param handler        caller's info handler      * @throws SVNException       * @since 1.2, SVN 1.5      */
specifier|public
name|void
name|doInfo
parameter_list|(
name|File
name|path
parameter_list|,
name|SVNRevision
name|pegRevision
parameter_list|,
name|SVNRevision
name|revision
parameter_list|,
name|SVNDepth
name|depth
parameter_list|,
name|Collection
name|changeLists
parameter_list|,
name|ISVNInfoHandler
name|handler
parameter_list|)
throws|throws
name|SVNException
block|{
if|if
condition|(
name|handler
operator|==
literal|null
condition|)
block|{
return|return;
block|}
name|boolean
name|local
init|=
operator|(
name|revision
operator|==
literal|null
operator|||
operator|!
name|revision
operator|.
name|isValid
argument_list|()
operator|||
name|revision
operator|.
name|isLocal
argument_list|()
operator|)
operator|&&
operator|(
name|pegRevision
operator|==
literal|null
operator|||
operator|!
name|pegRevision
operator|.
name|isValid
argument_list|()
operator|||
name|pegRevision
operator|.
name|isLocal
argument_list|()
operator|)
decl_stmt|;
if|if
condition|(
operator|!
name|local
condition|)
block|{
name|SVNWCAccess
name|wcAccess
init|=
name|createWCAccess
argument_list|()
decl_stmt|;
name|SVNRevision
name|wcRevision
init|=
literal|null
decl_stmt|;
name|SVNURL
name|url
init|=
literal|null
decl_stmt|;
try|try
block|{
name|wcAccess
operator|.
name|probeOpen
argument_list|(
name|path
argument_list|,
literal|false
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|SVNEntry
name|entry
init|=
name|wcAccess
operator|.
name|getVersionedEntry
argument_list|(
name|path
argument_list|,
literal|false
argument_list|)
decl_stmt|;
name|url
operator|=
name|entry
operator|.
name|getSVNURL
argument_list|()
expr_stmt|;
if|if
condition|(
name|url
operator|==
literal|null
condition|)
block|{
name|SVNErrorMessage
name|err
init|=
name|SVNErrorMessage
operator|.
name|create
argument_list|(
name|SVNErrorCode
operator|.
name|ENTRY_MISSING_URL
argument_list|,
literal|"''{0}'' has no URL"
argument_list|,
name|path
argument_list|)
decl_stmt|;
name|SVNErrorManager
operator|.
name|error
argument_list|(
name|err
argument_list|,
name|SVNLogType
operator|.
name|WC
argument_list|)
expr_stmt|;
block|}
name|wcRevision
operator|=
name|SVNRevision
operator|.
name|create
argument_list|(
name|entry
operator|.
name|getRevision
argument_list|()
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
name|wcAccess
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
name|doInfo
argument_list|(
name|url
argument_list|,
name|pegRevision
operator|==
literal|null
operator|||
operator|!
name|pegRevision
operator|.
name|isValid
argument_list|()
operator|||
name|pegRevision
operator|.
name|isLocal
argument_list|()
condition|?
name|wcRevision
else|:
name|pegRevision
argument_list|,
name|revision
argument_list|,
name|depth
argument_list|,
name|handler
argument_list|)
expr_stmt|;
return|return;
block|}
name|Collection
name|changelistsSet
init|=
literal|null
decl_stmt|;
if|if
condition|(
name|changeLists
operator|!=
literal|null
condition|)
block|{
name|changelistsSet
operator|=
operator|new
name|SVNHashSet
argument_list|()
expr_stmt|;
for|for
control|(
name|Iterator
name|changeListsIter
init|=
name|changeLists
operator|.
name|iterator
argument_list|()
init|;
name|changeListsIter
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|String
name|changeList
init|=
operator|(
name|String
operator|)
name|changeListsIter
operator|.
name|next
argument_list|()
decl_stmt|;
name|changelistsSet
operator|.
name|add
argument_list|(
name|changeList
argument_list|)
expr_stmt|;
block|}
block|}
name|crawlEntries
argument_list|(
name|path
argument_list|,
name|depth
argument_list|,
name|changelistsSet
argument_list|,
name|handler
argument_list|)
expr_stmt|;
block|}
comment|/**      * Collects information about item(s) in a repository and passes it to      * an info handler.      *      * @param url         a URL of an item which information is to be      *                    obtained and processed      * @param pegRevision a revision in which the item is first looked up      * @param revision    a target revision      * @param recursive<span class="javakeyword">true</span> to      *                    descend recursively (relevant for directories)      * @param handler     a caller's info handler      * @throws SVNException if<code>url</code> is an item that does not exist in      *                      the specified<code>revision</code>      * @deprecated use {@link #doInfo(SVNURL, SVNRevision, SVNRevision, SVNDepth, ISVNInfoHandler)} instead       */
specifier|public
name|void
name|doInfo
parameter_list|(
name|SVNURL
name|url
parameter_list|,
name|SVNRevision
name|pegRevision
parameter_list|,
name|SVNRevision
name|revision
parameter_list|,
name|boolean
name|recursive
parameter_list|,
name|ISVNInfoHandler
name|handler
parameter_list|)
throws|throws
name|SVNException
block|{
name|doInfo
argument_list|(
name|url
argument_list|,
name|pegRevision
argument_list|,
name|revision
argument_list|,
name|SVNDepth
operator|.
name|getInfinityOrEmptyDepth
argument_list|(
name|recursive
argument_list|)
argument_list|,
name|handler
argument_list|)
expr_stmt|;
block|}
comment|/**      * Invokes<code>handler</code> to return information      * about<code>url</code> in<code>revision</code>. The information returned is      * system-generated metadata, not the sort of "property" metadata      * created by users. See {@link SVNInfo}.      *       *<p/>      * If<code>revision</code> argument is either<span class="javakeyword">null</span> or       * {@link SVNRevision#isValid() invalid}, it defaults to {@link SVNRevision#HEAD}.      * If<code>revision</code> is {@link SVNRevision#PREVIOUS} (or some other kind that requires      * a local path), an error will be returned, because the desired      * revision cannot be determined.      * If<code>pegRevision</code> argument is either<span class="javakeyword">null</span> or       * {@link SVNRevision#isValid() invalid}, it defaults to<code>revision</code>.      *       *<p/>      * Information will be pulled from the repository. The actual node revision selected is determined by       * the<code>url</code> as it exists in<code>pegRevision</code>. If<code>pegRevision</code> is       * {@link SVNRevision#UNDEFINED}, then it defaults to {@link SVNRevision#WORKING}.      *      *<p/>      * If<code>url</code> is a file, just invokes<code>handler</code> on it. If it      * is a directory, then descends according to<code>depth</code>. If<code>depth</code> is      * {@link SVNDepth#EMPTY}, invokes<code>handler</code> on<code>url</code> and      * nothing else; if {@link SVNDepth#FILES}, on<code>url</code> and its      * immediate file children; if {@link SVNDepth#IMMEDIATES}, the preceding      * plus on each immediate subdirectory; if {@link SVNDepth#INFINITY}, then      * recurses fully, invoking<code>handler</code> on<code>url</code> and      * everything beneath it.      *       * @param url            versioned item url      * @param pegRevision    revision in which<code>path</code> is first      *                       looked up      * @param revision       target revision      * @param depth          tree depth      * @param handler        caller's info handler      * @throws SVNException       * @since 1.2, SVN 1.5      */
specifier|public
name|void
name|doInfo
parameter_list|(
name|SVNURL
name|url
parameter_list|,
name|SVNRevision
name|pegRevision
parameter_list|,
name|SVNRevision
name|revision
parameter_list|,
name|SVNDepth
name|depth
parameter_list|,
name|ISVNInfoHandler
name|handler
parameter_list|)
throws|throws
name|SVNException
block|{
name|depth
operator|=
name|depth
operator|==
literal|null
condition|?
name|SVNDepth
operator|.
name|UNKNOWN
else|:
name|depth
expr_stmt|;
name|long
index|[]
name|revNum
init|=
block|{
name|SVNRepository
operator|.
name|INVALID_REVISION
block|}
decl_stmt|;
name|SVNRepository
name|repos
init|=
name|createRepository
argument_list|(
name|url
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|,
name|pegRevision
argument_list|,
name|revision
argument_list|,
name|revNum
argument_list|)
decl_stmt|;
name|url
operator|=
name|repos
operator|.
name|getLocation
argument_list|()
expr_stmt|;
name|SVNDirEntry
name|rootEntry
init|=
literal|null
decl_stmt|;
name|SVNURL
name|reposRoot
init|=
name|repos
operator|.
name|getRepositoryRoot
argument_list|(
literal|true
argument_list|)
decl_stmt|;
name|String
name|reposUUID
init|=
name|repos
operator|.
name|getRepositoryUUID
argument_list|(
literal|true
argument_list|)
decl_stmt|;
name|String
name|baseName
init|=
name|SVNPathUtil
operator|.
name|tail
argument_list|(
name|url
operator|.
name|getPath
argument_list|()
argument_list|)
decl_stmt|;
try|try
block|{
name|rootEntry
operator|=
name|repos
operator|.
name|info
argument_list|(
literal|""
argument_list|,
name|revNum
index|[
literal|0
index|]
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|SVNException
name|e
parameter_list|)
block|{
if|if
condition|(
name|e
operator|.
name|getErrorMessage
argument_list|()
operator|!=
literal|null
operator|&&
name|e
operator|.
name|getErrorMessage
argument_list|()
operator|.
name|getErrorCode
argument_list|()
operator|==
name|SVNErrorCode
operator|.
name|RA_NOT_IMPLEMENTED
condition|)
block|{
comment|// for svnserve older then 1.2.0
if|if
condition|(
name|url
operator|.
name|equals
argument_list|(
name|reposRoot
argument_list|)
condition|)
block|{
if|if
condition|(
name|depth
operator|.
name|compareTo
argument_list|(
name|SVNDepth
operator|.
name|EMPTY
argument_list|)
operator|>
literal|0
condition|)
block|{
name|SVNLock
index|[]
name|locks
init|=
literal|null
decl_stmt|;
if|if
condition|(
name|pegRevision
operator|==
name|SVNRevision
operator|.
name|HEAD
condition|)
block|{
try|try
block|{
name|locks
operator|=
name|repos
operator|.
name|getLocks
argument_list|(
literal|""
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|SVNException
name|svne
parameter_list|)
block|{
name|SVNErrorCode
name|code
init|=
name|svne
operator|.
name|getErrorMessage
argument_list|()
operator|.
name|getErrorCode
argument_list|()
decl_stmt|;
if|if
condition|(
name|code
operator|==
name|SVNErrorCode
operator|.
name|RA_NOT_IMPLEMENTED
operator|||
name|code
operator|==
name|SVNErrorCode
operator|.
name|UNSUPPORTED_FEATURE
condition|)
block|{
name|locks
operator|=
operator|new
name|SVNLock
index|[
literal|0
index|]
expr_stmt|;
block|}
else|else
block|{
throw|throw
name|svne
throw|;
block|}
block|}
block|}
else|else
block|{
name|locks
operator|=
operator|new
name|SVNLock
index|[
literal|0
index|]
expr_stmt|;
block|}
name|locks
operator|=
name|locks
operator|==
literal|null
condition|?
operator|new
name|SVNLock
index|[
literal|0
index|]
else|:
name|locks
expr_stmt|;
name|Map
name|locksMap
init|=
operator|new
name|SVNHashMap
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|locks
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
name|SVNLock
name|lock
init|=
name|locks
index|[
name|i
index|]
decl_stmt|;
name|locksMap
operator|.
name|put
argument_list|(
name|lock
operator|.
name|getPath
argument_list|()
argument_list|,
name|lock
argument_list|)
expr_stmt|;
block|}
name|pushDirInfo
argument_list|(
name|repos
argument_list|,
name|SVNRevision
operator|.
name|create
argument_list|(
name|revNum
index|[
literal|0
index|]
argument_list|)
argument_list|,
literal|""
argument_list|,
name|repos
operator|.
name|getRepositoryRoot
argument_list|(
literal|true
argument_list|)
argument_list|,
name|reposUUID
argument_list|,
name|url
argument_list|,
name|locksMap
argument_list|,
name|depth
argument_list|,
name|handler
argument_list|)
expr_stmt|;
return|return;
block|}
name|SVNErrorMessage
name|err
init|=
name|SVNErrorMessage
operator|.
name|create
argument_list|(
name|SVNErrorCode
operator|.
name|UNSUPPORTED_FEATURE
argument_list|,
literal|"Server does not support retrieving information about the repository root"
argument_list|)
decl_stmt|;
name|SVNErrorManager
operator|.
name|error
argument_list|(
name|err
argument_list|,
name|SVNLogType
operator|.
name|WC
argument_list|)
expr_stmt|;
block|}
name|SVNNodeKind
name|urlKind
init|=
name|repos
operator|.
name|checkPath
argument_list|(
literal|""
argument_list|,
name|revNum
index|[
literal|0
index|]
argument_list|)
decl_stmt|;
if|if
condition|(
name|urlKind
operator|==
name|SVNNodeKind
operator|.
name|NONE
condition|)
block|{
name|SVNErrorMessage
name|err
init|=
name|SVNErrorMessage
operator|.
name|create
argument_list|(
name|SVNErrorCode
operator|.
name|RA_ILLEGAL_URL
argument_list|,
literal|"URL ''{0}'' non-existent in revision {1}"
argument_list|,
operator|new
name|Object
index|[]
block|{
name|url
block|,
operator|new
name|Long
argument_list|(
name|revNum
index|[
literal|0
index|]
argument_list|)
block|}
argument_list|)
decl_stmt|;
name|SVNErrorManager
operator|.
name|error
argument_list|(
name|err
argument_list|,
name|SVNLogType
operator|.
name|WC
argument_list|)
expr_stmt|;
block|}
name|SVNRepository
name|parentRepos
init|=
name|createRepository
argument_list|(
name|url
operator|.
name|removePathTail
argument_list|()
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|,
literal|false
argument_list|)
decl_stmt|;
name|Collection
name|dirEntries
init|=
name|parentRepos
operator|.
name|getDir
argument_list|(
literal|""
argument_list|,
name|revNum
index|[
literal|0
index|]
argument_list|,
literal|null
argument_list|,
name|SVNDirEntry
operator|.
name|DIRENT_KIND
operator||
name|SVNDirEntry
operator|.
name|DIRENT_CREATED_REVISION
operator||
name|SVNDirEntry
operator|.
name|DIRENT_TIME
operator||
name|SVNDirEntry
operator|.
name|DIRENT_LAST_AUTHOR
argument_list|,
operator|(
name|Collection
operator|)
literal|null
argument_list|)
decl_stmt|;
for|for
control|(
name|Iterator
name|ents
init|=
name|dirEntries
operator|.
name|iterator
argument_list|()
init|;
name|ents
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|SVNDirEntry
name|dirEntry
init|=
operator|(
name|SVNDirEntry
operator|)
name|ents
operator|.
name|next
argument_list|()
decl_stmt|;
comment|// dir entry name may differ from 'name', due to renames...
if|if
condition|(
name|baseName
operator|.
name|equals
argument_list|(
name|dirEntry
operator|.
name|getName
argument_list|()
argument_list|)
condition|)
block|{
name|rootEntry
operator|=
name|dirEntry
expr_stmt|;
break|break;
block|}
block|}
if|if
condition|(
name|rootEntry
operator|==
literal|null
condition|)
block|{
name|SVNErrorMessage
name|err
init|=
name|SVNErrorMessage
operator|.
name|create
argument_list|(
name|SVNErrorCode
operator|.
name|RA_ILLEGAL_URL
argument_list|,
literal|"URL ''{0}'' non-existent in revision {1}"
argument_list|,
operator|new
name|Object
index|[]
block|{
name|url
block|,
operator|new
name|Long
argument_list|(
name|revNum
index|[
literal|0
index|]
argument_list|)
block|}
argument_list|)
decl_stmt|;
name|SVNErrorManager
operator|.
name|error
argument_list|(
name|err
argument_list|,
name|SVNLogType
operator|.
name|WC
argument_list|)
expr_stmt|;
block|}
block|}
else|else
block|{
throw|throw
name|e
throw|;
block|}
block|}
if|if
condition|(
name|rootEntry
operator|==
literal|null
operator|||
name|rootEntry
operator|.
name|getKind
argument_list|()
operator|==
name|SVNNodeKind
operator|.
name|NONE
condition|)
block|{
name|SVNErrorMessage
name|err
init|=
name|SVNErrorMessage
operator|.
name|create
argument_list|(
name|SVNErrorCode
operator|.
name|RA_ILLEGAL_URL
argument_list|,
literal|"URL ''{0}'' non-existent in revision ''{1}''"
argument_list|,
operator|new
name|Object
index|[]
block|{
name|url
block|,
operator|new
name|Long
argument_list|(
name|revNum
index|[
literal|0
index|]
argument_list|)
block|}
argument_list|)
decl_stmt|;
name|SVNErrorManager
operator|.
name|error
argument_list|(
name|err
argument_list|,
name|SVNLogType
operator|.
name|WC
argument_list|)
expr_stmt|;
block|}
name|SVNLock
name|lock
init|=
literal|null
decl_stmt|;
if|if
condition|(
name|rootEntry
operator|.
name|getKind
argument_list|()
operator|==
name|SVNNodeKind
operator|.
name|FILE
condition|)
block|{
try|try
block|{
name|SVNRepositoryLocation
index|[]
name|locations
init|=
name|getLocations
argument_list|(
name|url
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|,
name|SVNRevision
operator|.
name|create
argument_list|(
name|revNum
index|[
literal|0
index|]
argument_list|)
argument_list|,
name|SVNRevision
operator|.
name|HEAD
argument_list|,
name|SVNRevision
operator|.
name|UNDEFINED
argument_list|)
decl_stmt|;
if|if
condition|(
name|locations
operator|!=
literal|null
operator|&&
name|locations
operator|.
name|length
operator|>
literal|0
condition|)
block|{
name|SVNURL
name|headURL
init|=
name|locations
index|[
literal|0
index|]
operator|.
name|getURL
argument_list|()
decl_stmt|;
if|if
condition|(
name|headURL
operator|.
name|equals
argument_list|(
name|url
argument_list|)
condition|)
block|{
comment|// get lock for this item (@headURL).
try|try
block|{
name|lock
operator|=
name|repos
operator|.
name|getLock
argument_list|(
literal|""
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|SVNException
name|e
parameter_list|)
block|{
if|if
condition|(
operator|!
operator|(
name|e
operator|.
name|getErrorMessage
argument_list|()
operator|!=
literal|null
operator|&&
name|e
operator|.
name|getErrorMessage
argument_list|()
operator|.
name|getErrorCode
argument_list|()
operator|==
name|SVNErrorCode
operator|.
name|RA_NOT_IMPLEMENTED
operator|)
condition|)
block|{
throw|throw
name|e
throw|;
block|}
block|}
block|}
block|}
block|}
catch|catch
parameter_list|(
name|SVNException
name|e
parameter_list|)
block|{
name|SVNErrorCode
name|code
init|=
name|e
operator|.
name|getErrorMessage
argument_list|()
operator|.
name|getErrorCode
argument_list|()
decl_stmt|;
if|if
condition|(
name|code
operator|!=
name|SVNErrorCode
operator|.
name|FS_NOT_FOUND
operator|&&
name|code
operator|!=
name|SVNErrorCode
operator|.
name|CLIENT_UNRELATED_RESOURCES
condition|)
block|{
throw|throw
name|e
throw|;
block|}
block|}
block|}
name|SVNInfo
name|info
init|=
name|SVNInfo
operator|.
name|createInfo
argument_list|(
name|baseName
argument_list|,
name|reposRoot
argument_list|,
name|reposUUID
argument_list|,
name|url
argument_list|,
name|SVNRevision
operator|.
name|create
argument_list|(
name|revNum
index|[
literal|0
index|]
argument_list|)
argument_list|,
name|rootEntry
argument_list|,
name|lock
argument_list|)
decl_stmt|;
name|handler
operator|.
name|handleInfo
argument_list|(
name|info
argument_list|)
expr_stmt|;
if|if
condition|(
name|depth
operator|.
name|compareTo
argument_list|(
name|SVNDepth
operator|.
name|EMPTY
argument_list|)
operator|>
literal|0
operator|&&
name|rootEntry
operator|.
name|getKind
argument_list|()
operator|==
name|SVNNodeKind
operator|.
name|DIR
condition|)
block|{
name|SVNLock
index|[]
name|locks
init|=
literal|null
decl_stmt|;
if|if
condition|(
name|pegRevision
operator|==
name|SVNRevision
operator|.
name|HEAD
condition|)
block|{
try|try
block|{
name|locks
operator|=
name|repos
operator|.
name|getLocks
argument_list|(
literal|""
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|SVNException
name|svne
parameter_list|)
block|{
name|SVNErrorCode
name|code
init|=
name|svne
operator|.
name|getErrorMessage
argument_list|()
operator|.
name|getErrorCode
argument_list|()
decl_stmt|;
if|if
condition|(
name|code
operator|==
name|SVNErrorCode
operator|.
name|RA_NOT_IMPLEMENTED
operator|||
name|code
operator|==
name|SVNErrorCode
operator|.
name|UNSUPPORTED_FEATURE
condition|)
block|{
name|locks
operator|=
operator|new
name|SVNLock
index|[
literal|0
index|]
expr_stmt|;
block|}
else|else
block|{
throw|throw
name|svne
throw|;
block|}
block|}
block|}
else|else
block|{
name|locks
operator|=
operator|new
name|SVNLock
index|[
literal|0
index|]
expr_stmt|;
block|}
name|locks
operator|=
name|locks
operator|==
literal|null
condition|?
operator|new
name|SVNLock
index|[
literal|0
index|]
else|:
name|locks
expr_stmt|;
name|Map
name|locksMap
init|=
operator|new
name|SVNHashMap
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|locks
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
name|lock
operator|=
name|locks
index|[
name|i
index|]
expr_stmt|;
name|locksMap
operator|.
name|put
argument_list|(
name|lock
operator|.
name|getPath
argument_list|()
argument_list|,
name|lock
argument_list|)
expr_stmt|;
block|}
name|pushDirInfo
argument_list|(
name|repos
argument_list|,
name|SVNRevision
operator|.
name|create
argument_list|(
name|revNum
index|[
literal|0
index|]
argument_list|)
argument_list|,
literal|""
argument_list|,
name|repos
operator|.
name|getRepositoryRoot
argument_list|(
literal|true
argument_list|)
argument_list|,
name|reposUUID
argument_list|,
name|url
argument_list|,
name|locksMap
argument_list|,
name|depth
argument_list|,
name|handler
argument_list|)
expr_stmt|;
block|}
block|}
comment|/**      * Returns the current Working Copy min- and max- revisions as well as      * changes and switch status within a single string.      *       *<p/>      * This method is the same as<code>doGetWorkingCopyID(path, trailURL, false)</code>.      *      * @param path     a local path      * @param trailURL optional: if not<span class="javakeyword">null</span>      *                 specifies the name of the item that should be met      *                 in the URL corresponding to the repository location      *                 of the<code>path</code>; if that URL ends with something      *                 different than this optional parameter - the Working      *                 Copy will be considered "switched"      * @return         brief info on the Working Copy or the string      *                 "exported" if<code>path</code> is a clean directory      * @throws SVNException if<code>path</code> is neither versioned nor      *                      even exported      * @see #doGetWorkingCopyID(File, String, boolean)      */
specifier|public
name|String
name|doGetWorkingCopyID
parameter_list|(
specifier|final
name|File
name|path
parameter_list|,
name|String
name|trailURL
parameter_list|)
throws|throws
name|SVNException
block|{
return|return
name|doGetWorkingCopyID
argument_list|(
name|path
argument_list|,
name|trailURL
argument_list|,
literal|false
argument_list|)
return|;
block|}
comment|/**      * Returns the current Working Copy min- and max- revisions as well as      * changes and switch status within a single string.      *<p/>      *<p/>      * A return string has a form of<code>"minR[:maxR][M][S]"</code> where:      *<ul>      *<li><code>minR</code> - is the smallest revision number met in the      * Working Copy      *<li><code>maxR</code> - is the biggest revision number met in the      * Working Copy; appears only if there are different revision in the      * Working Copy      *<li><code>M</code> - appears only if there're local edits to the      * Working Copy - that means 'Modified'      *<li><code>S</code> - appears only if the Working Copy is switched      * against a different URL      *</ul>      * If<code>path</code> is a directory - this method recursively descends      * into the Working Copy, collects and processes local information.      *       *<p/>      * This method operates on local working copies only without accessing a repository.      *       * @param path          a local path      * @param trailURL      optional: if not<span class="javakeyword">null</span>      *                      specifies the name of the item that should be met      *                      in the URL corresponding to the repository location      *                      of the<code>path</code>; if that URL ends with something      *                      different than this optional parameter - the Working      *                      Copy will be considered "switched"      * @param committed     if<span class="javakeyword">true</span> committed (last chaned)       *                      revisions instead of working copy ones are reported      * @return              brief info on the Working Copy or the string      *                      "exported" if<code>path</code> is a clean directory      * @throws SVNException if<code>path</code> is neither versioned nor      *                      even exported      * @since  1.2      */
specifier|public
name|String
name|doGetWorkingCopyID
parameter_list|(
specifier|final
name|File
name|path
parameter_list|,
name|String
name|trailURL
parameter_list|,
specifier|final
name|boolean
name|committed
parameter_list|)
throws|throws
name|SVNException
block|{
name|SVNWCAccess
name|wcAccess
init|=
name|createWCAccess
argument_list|()
decl_stmt|;
try|try
block|{
name|wcAccess
operator|.
name|open
argument_list|(
name|path
argument_list|,
literal|false
argument_list|,
literal|0
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|SVNException
name|e
parameter_list|)
block|{
name|SVNFileType
name|pathType
init|=
name|SVNFileType
operator|.
name|getType
argument_list|(
name|path
argument_list|)
decl_stmt|;
if|if
condition|(
name|pathType
operator|==
name|SVNFileType
operator|.
name|DIRECTORY
condition|)
block|{
return|return
literal|"exported"
return|;
block|}
if|else if
condition|(
name|pathType
operator|==
name|SVNFileType
operator|.
name|NONE
condition|)
block|{
throw|throw
name|e
throw|;
block|}
return|return
literal|"'"
operator|+
name|path
operator|+
literal|"' is not versioned and not exported"
return|;
block|}
finally|finally
block|{
name|wcAccess
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
name|SVNStatusClient
name|statusClient
init|=
operator|new
name|SVNStatusClient
argument_list|(
operator|(
name|ISVNAuthenticationManager
operator|)
literal|null
argument_list|,
name|getOptions
argument_list|()
argument_list|)
decl_stmt|;
name|statusClient
operator|.
name|setIgnoreExternals
argument_list|(
literal|true
argument_list|)
expr_stmt|;
specifier|final
name|long
index|[]
name|maxRevision
init|=
operator|new
name|long
index|[
literal|1
index|]
decl_stmt|;
specifier|final
name|long
index|[]
name|minRevision
init|=
operator|new
name|long
index|[]
block|{
operator|-
literal|1
block|}
decl_stmt|;
specifier|final
name|boolean
index|[]
name|switched
init|=
operator|new
name|boolean
index|[
literal|3
index|]
decl_stmt|;
specifier|final
name|String
index|[]
name|wcURL
init|=
operator|new
name|String
index|[
literal|1
index|]
decl_stmt|;
name|statusClient
operator|.
name|doStatus
argument_list|(
name|path
argument_list|,
name|SVNRevision
operator|.
name|WORKING
argument_list|,
name|SVNDepth
operator|.
name|INFINITY
argument_list|,
literal|false
argument_list|,
literal|true
argument_list|,
literal|false
argument_list|,
literal|false
argument_list|,
operator|new
name|ISVNStatusHandler
argument_list|()
block|{
specifier|public
name|void
name|handleStatus
parameter_list|(
name|SVNStatus
name|status
parameter_list|)
block|{
if|if
condition|(
name|status
operator|.
name|getEntryProperties
argument_list|()
operator|==
literal|null
operator|||
name|status
operator|.
name|getEntryProperties
argument_list|()
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
return|return;
block|}
if|if
condition|(
name|status
operator|.
name|getContentsStatus
argument_list|()
operator|!=
name|SVNStatusType
operator|.
name|STATUS_ADDED
condition|)
block|{
name|SVNRevision
name|revision
init|=
name|committed
condition|?
name|status
operator|.
name|getCommittedRevision
argument_list|()
else|:
name|status
operator|.
name|getRevision
argument_list|()
decl_stmt|;
if|if
condition|(
name|revision
operator|!=
literal|null
condition|)
block|{
if|if
condition|(
name|minRevision
index|[
literal|0
index|]
operator|<
literal|0
operator|||
name|minRevision
index|[
literal|0
index|]
operator|>
name|revision
operator|.
name|getNumber
argument_list|()
condition|)
block|{
name|minRevision
index|[
literal|0
index|]
operator|=
name|revision
operator|.
name|getNumber
argument_list|()
expr_stmt|;
block|}
name|maxRevision
index|[
literal|0
index|]
operator|=
name|Math
operator|.
name|max
argument_list|(
name|maxRevision
index|[
literal|0
index|]
argument_list|,
name|revision
operator|.
name|getNumber
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
name|switched
index|[
literal|0
index|]
operator||=
name|status
operator|.
name|isSwitched
argument_list|()
expr_stmt|;
name|switched
index|[
literal|1
index|]
operator||=
name|status
operator|.
name|getContentsStatus
argument_list|()
operator|!=
name|SVNStatusType
operator|.
name|STATUS_NORMAL
expr_stmt|;
name|switched
index|[
literal|1
index|]
operator||=
name|status
operator|.
name|getPropertiesStatus
argument_list|()
operator|!=
name|SVNStatusType
operator|.
name|STATUS_NORMAL
operator|&&
name|status
operator|.
name|getPropertiesStatus
argument_list|()
operator|!=
name|SVNStatusType
operator|.
name|STATUS_NONE
expr_stmt|;
name|switched
index|[
literal|2
index|]
operator||=
name|status
operator|.
name|getEntry
argument_list|()
operator|!=
literal|null
operator|&&
name|status
operator|.
name|getEntry
argument_list|()
operator|.
name|getDepth
argument_list|()
operator|!=
name|SVNDepth
operator|.
name|INFINITY
expr_stmt|;
if|if
condition|(
name|wcURL
index|[
literal|0
index|]
operator|==
literal|null
operator|&&
name|status
operator|.
name|getFile
argument_list|()
operator|!=
literal|null
operator|&&
name|status
operator|.
name|getFile
argument_list|()
operator|.
name|equals
argument_list|(
name|path
argument_list|)
operator|&&
name|status
operator|.
name|getURL
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|wcURL
index|[
literal|0
index|]
operator|=
name|status
operator|.
name|getURL
argument_list|()
operator|.
name|toString
argument_list|()
expr_stmt|;
block|}
block|}
block|}
argument_list|,
literal|null
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|switched
index|[
literal|0
index|]
operator|&&
name|trailURL
operator|!=
literal|null
condition|)
block|{
if|if
condition|(
name|wcURL
index|[
literal|0
index|]
operator|==
literal|null
condition|)
block|{
name|switched
index|[
literal|0
index|]
operator|=
literal|true
expr_stmt|;
block|}
else|else
block|{
name|switched
index|[
literal|0
index|]
operator|=
operator|!
name|wcURL
index|[
literal|0
index|]
operator|.
name|endsWith
argument_list|(
name|trailURL
argument_list|)
expr_stmt|;
block|}
block|}
name|StringBuffer
name|id
init|=
operator|new
name|StringBuffer
argument_list|()
decl_stmt|;
name|id
operator|.
name|append
argument_list|(
name|minRevision
index|[
literal|0
index|]
argument_list|)
expr_stmt|;
if|if
condition|(
name|minRevision
index|[
literal|0
index|]
operator|!=
name|maxRevision
index|[
literal|0
index|]
condition|)
block|{
name|id
operator|.
name|append
argument_list|(
literal|":"
argument_list|)
operator|.
name|append
argument_list|(
name|maxRevision
index|[
literal|0
index|]
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|switched
index|[
literal|1
index|]
condition|)
block|{
name|id
operator|.
name|append
argument_list|(
literal|"M"
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|switched
index|[
literal|0
index|]
condition|)
block|{
name|id
operator|.
name|append
argument_list|(
literal|"S"
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|switched
index|[
literal|2
index|]
condition|)
block|{
name|id
operator|.
name|append
argument_list|(
literal|"P"
argument_list|)
expr_stmt|;
block|}
return|return
name|id
operator|.
name|toString
argument_list|()
return|;
block|}
comment|/**      * Collects and returns information on a single Working Copy item.      *       *<p/>      * This method is the same as       *<code>doInfo(path, SVNRevision.UNDEFINED, revision, SVNDepth.EMPTY, null, handler)</code> where      *<code>handler</code> just stores {@link SVNInfo} for the<code>path</code> and then returns it to      * the caller.      *      * @param  path          a WC item on which info should be obtained      * @param  revision      a target revision      * @return               collected info      * @throws SVNException  if one of the following is true:      *<ul>      *<li><code>path</code> is not under version control      *<li>can not obtain a URL corresponding to<code>path</code> to      *                       get its information from the repository - there's no such entry      *<li>if a remote info:<code>path</code> is an item that does not exist in      *                       the specified<code>revision</code>      *</ul>      * @see    #doInfo(File, SVNRevision, SVNRevision, SVNDepth, Collection, ISVNInfoHandler)                             */
specifier|public
name|SVNInfo
name|doInfo
parameter_list|(
name|File
name|path
parameter_list|,
name|SVNRevision
name|revision
parameter_list|)
throws|throws
name|SVNException
block|{
specifier|final
name|SVNInfo
index|[]
name|result
init|=
operator|new
name|SVNInfo
index|[
literal|1
index|]
decl_stmt|;
name|doInfo
argument_list|(
name|path
argument_list|,
name|SVNRevision
operator|.
name|UNDEFINED
argument_list|,
name|revision
argument_list|,
name|SVNDepth
operator|.
name|EMPTY
argument_list|,
literal|null
argument_list|,
operator|new
name|ISVNInfoHandler
argument_list|()
block|{
specifier|public
name|void
name|handleInfo
parameter_list|(
name|SVNInfo
name|info
parameter_list|)
block|{
if|if
condition|(
name|result
index|[
literal|0
index|]
operator|==
literal|null
condition|)
block|{
name|result
index|[
literal|0
index|]
operator|=
name|info
expr_stmt|;
block|}
block|}
block|}
argument_list|)
expr_stmt|;
return|return
name|result
index|[
literal|0
index|]
return|;
block|}
comment|/**      * Collects and returns information on a single item in a repository.      *       *<p/>      * This method is the same as<code>doInfo(url, pegRevision, revision, SVNDepth.EMPTY, handler)</code>       * where<code>handler</code> just stores {@link SVNInfo} for the<code>url</code>.      *       * @param  url            a URL of an item which information is to be      *                        obtained      * @param  pegRevision    a revision in which the item is first looked up      * @param  revision       a target revision      * @return                collected info      * @throws SVNException   if<code>url</code> is an item that does not exist in      *                        the specified<code>revision</code>      * @see    #doInfo(SVNURL, SVNRevision, SVNRevision, SVNDepth, ISVNInfoHandler)      */
specifier|public
name|SVNInfo
name|doInfo
parameter_list|(
name|SVNURL
name|url
parameter_list|,
name|SVNRevision
name|pegRevision
parameter_list|,
name|SVNRevision
name|revision
parameter_list|)
throws|throws
name|SVNException
block|{
specifier|final
name|SVNInfo
index|[]
name|result
init|=
operator|new
name|SVNInfo
index|[
literal|1
index|]
decl_stmt|;
name|doInfo
argument_list|(
name|url
argument_list|,
name|pegRevision
argument_list|,
name|revision
argument_list|,
name|SVNDepth
operator|.
name|EMPTY
argument_list|,
operator|new
name|ISVNInfoHandler
argument_list|()
block|{
specifier|public
name|void
name|handleInfo
parameter_list|(
name|SVNInfo
name|info
parameter_list|)
block|{
if|if
condition|(
name|result
index|[
literal|0
index|]
operator|==
literal|null
condition|)
block|{
name|result
index|[
literal|0
index|]
operator|=
name|info
expr_stmt|;
block|}
block|}
block|}
argument_list|)
expr_stmt|;
return|return
name|result
index|[
literal|0
index|]
return|;
block|}
comment|/**      * Recursively removes all DAV-specific<span class="javakeyword">"svn:wc:"</span> properties      * from the<code>directory</code> and beneath.       *       *<p>      * This method does not connect to a repository, it's a local operation only. Nor does it change any user's       * versioned data. Changes are made only in administrative version control files.      *        * @param  directory     working copy path      * @throws SVNException      * @since  1.2      */
specifier|public
name|void
name|doCleanupWCProperties
parameter_list|(
name|File
name|directory
parameter_list|)
throws|throws
name|SVNException
block|{
name|SVNWCAccess
name|wcAccess
init|=
name|SVNWCAccess
operator|.
name|newInstance
argument_list|(
name|this
argument_list|)
decl_stmt|;
try|try
block|{
name|SVNAdminArea
name|dir
init|=
name|wcAccess
operator|.
name|open
argument_list|(
name|directory
argument_list|,
literal|true
argument_list|,
literal|true
argument_list|,
operator|-
literal|1
argument_list|)
decl_stmt|;
if|if
condition|(
name|dir
operator|!=
literal|null
condition|)
block|{
name|SVNPropertiesManager
operator|.
name|deleteWCProperties
argument_list|(
name|dir
argument_list|,
literal|null
argument_list|,
literal|true
argument_list|)
expr_stmt|;
block|}
block|}
finally|finally
block|{
name|wcAccess
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
block|}
comment|/**      * Changes working copy format. This method may be used to upgrade\downgrade working copy formats.      *       *<p>      * If externals are not {@link SVNBasicClient#isIgnoreExternals() ignored} then external working copies       * are also converted to the new working copy<code>format</code>.      *       *<p>      * This method does not connect to a repository, it's a local operation only. Nor does it change any user's       * versioned data. Changes are made only in administrative version control files.      *       * @param  directory    working copy directory      * @param  format       format to set, supported formats are: 9 (SVN 1.5), 8 (SVN 1.4) and 4 (SVN 1.2)      * @throws SVNException       * @since  1.2      */
specifier|public
name|void
name|doSetWCFormat
parameter_list|(
name|File
name|directory
parameter_list|,
name|int
name|format
parameter_list|)
throws|throws
name|SVNException
block|{
name|SVNAdminAreaInfo
name|info
init|=
literal|null
decl_stmt|;
name|SVNWCAccess
name|wcAccess
init|=
name|SVNWCAccess
operator|.
name|newInstance
argument_list|(
name|this
argument_list|)
decl_stmt|;
try|try
block|{
name|info
operator|=
name|wcAccess
operator|.
name|openAnchor
argument_list|(
name|directory
argument_list|,
literal|false
argument_list|,
operator|-
literal|1
argument_list|)
expr_stmt|;
name|setWCFormat
argument_list|(
name|info
argument_list|,
name|info
operator|.
name|getTarget
argument_list|()
argument_list|,
name|format
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
name|wcAccess
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
if|if
condition|(
operator|!
name|isIgnoreExternals
argument_list|()
operator|&&
name|info
operator|!=
literal|null
condition|)
block|{
name|Collection
name|processedDirs
init|=
operator|new
name|SVNHashSet
argument_list|()
decl_stmt|;
name|Map
name|externals
init|=
name|info
operator|.
name|getOldExternals
argument_list|()
decl_stmt|;
comment|// update both old and new externals.
for|for
control|(
name|Iterator
name|paths
init|=
name|externals
operator|.
name|keySet
argument_list|()
operator|.
name|iterator
argument_list|()
init|;
name|paths
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|String
name|path
init|=
operator|(
name|String
operator|)
name|paths
operator|.
name|next
argument_list|()
decl_stmt|;
name|String
name|value
init|=
operator|(
name|String
operator|)
name|externals
operator|.
name|get
argument_list|(
name|path
argument_list|)
decl_stmt|;
if|if
condition|(
name|value
operator|==
literal|null
condition|)
block|{
continue|continue;
block|}
name|SVNExternal
index|[]
name|externalDefs
init|=
name|SVNExternal
operator|.
name|parseExternals
argument_list|(
literal|""
argument_list|,
name|value
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|externalDefs
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
name|String
name|externalPath
init|=
name|externalDefs
index|[
name|i
index|]
operator|.
name|getPath
argument_list|()
decl_stmt|;
name|File
name|externalDir
init|=
operator|new
name|Resource
argument_list|(
name|info
operator|.
name|getAnchor
argument_list|()
operator|.
name|getRoot
argument_list|()
argument_list|,
name|SVNPathUtil
operator|.
name|append
argument_list|(
name|path
argument_list|,
name|externalPath
argument_list|)
argument_list|)
decl_stmt|;
if|if
condition|(
name|processedDirs
operator|.
name|add
argument_list|(
name|externalDir
argument_list|)
condition|)
block|{
comment|//if externalDir is an empty unversioned dir SVNFileType won't help us to avoid
comment|//getting in an infinite loop
try|try
block|{
name|wcAccess
operator|.
name|open
argument_list|(
name|externalDir
argument_list|,
literal|false
argument_list|,
literal|0
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|SVNException
name|svne
parameter_list|)
block|{
if|if
condition|(
name|svne
operator|.
name|getErrorMessage
argument_list|()
operator|.
name|getErrorCode
argument_list|()
operator|==
name|SVNErrorCode
operator|.
name|WC_NOT_DIRECTORY
condition|)
block|{
continue|continue;
block|}
throw|throw
name|svne
throw|;
block|}
finally|finally
block|{
name|wcAccess
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
try|try
block|{
name|doSetWCFormat
argument_list|(
name|externalDir
argument_list|,
name|format
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|SVNException
name|e
parameter_list|)
block|{
if|if
condition|(
name|e
operator|.
name|getErrorMessage
argument_list|()
operator|.
name|getErrorCode
argument_list|()
operator|==
name|SVNErrorCode
operator|.
name|WC_NOT_DIRECTORY
condition|)
block|{
continue|continue;
block|}
throw|throw
name|e
throw|;
block|}
block|}
block|}
block|}
name|externals
operator|=
name|info
operator|.
name|getNewExternals
argument_list|()
expr_stmt|;
for|for
control|(
name|Iterator
name|paths
init|=
name|externals
operator|.
name|keySet
argument_list|()
operator|.
name|iterator
argument_list|()
init|;
name|paths
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|String
name|path
init|=
operator|(
name|String
operator|)
name|paths
operator|.
name|next
argument_list|()
decl_stmt|;
name|String
name|value
init|=
operator|(
name|String
operator|)
name|externals
operator|.
name|get
argument_list|(
name|path
argument_list|)
decl_stmt|;
name|SVNExternal
index|[]
name|externalDefs
init|=
name|SVNExternal
operator|.
name|parseExternals
argument_list|(
literal|""
argument_list|,
name|value
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|externalDefs
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
name|String
name|externalPath
init|=
name|externalDefs
index|[
name|i
index|]
operator|.
name|getPath
argument_list|()
decl_stmt|;
name|File
name|externalDir
init|=
operator|new
name|Resource
argument_list|(
name|info
operator|.
name|getAnchor
argument_list|()
operator|.
name|getRoot
argument_list|()
argument_list|,
name|SVNPathUtil
operator|.
name|append
argument_list|(
name|path
argument_list|,
name|externalPath
argument_list|)
argument_list|)
decl_stmt|;
if|if
condition|(
name|processedDirs
operator|.
name|add
argument_list|(
name|externalDir
argument_list|)
condition|)
block|{
comment|//if externalDir is an empty unversioned dir SVNFileType won't help us to avoid
comment|//getting in an infinite loop
try|try
block|{
name|wcAccess
operator|.
name|open
argument_list|(
name|externalDir
argument_list|,
literal|false
argument_list|,
literal|0
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|SVNException
name|svne
parameter_list|)
block|{
if|if
condition|(
name|svne
operator|.
name|getErrorMessage
argument_list|()
operator|.
name|getErrorCode
argument_list|()
operator|==
name|SVNErrorCode
operator|.
name|WC_NOT_DIRECTORY
condition|)
block|{
continue|continue;
block|}
throw|throw
name|svne
throw|;
block|}
finally|finally
block|{
name|wcAccess
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
try|try
block|{
name|doSetWCFormat
argument_list|(
name|externalDir
argument_list|,
name|format
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|SVNException
name|e
parameter_list|)
block|{
if|if
condition|(
name|e
operator|.
name|getErrorMessage
argument_list|()
operator|.
name|getErrorCode
argument_list|()
operator|==
name|SVNErrorCode
operator|.
name|WC_NOT_DIRECTORY
condition|)
block|{
continue|continue;
block|}
throw|throw
name|e
throw|;
block|}
block|}
block|}
block|}
block|}
block|}
comment|/**      * This method is deprecated.       *       * @param path           a WC item which properties are to be      *                       modified      * @param propName       a property name      * @param propValue      a property value      * @param force<span class="javakeyword">true</span> to      *                       force the operation to run      * @param recursive<span class="javakeyword">true</span> to      *                       descend recursively      * @param handler        a caller's property handler      * @throws SVNException  if one of the following is true:      *<ul>      *<li><code>propName</code> is a revision      *                       property      *<li><code>propName</code> starts      *                       with the {@link org.tmatesoft.svn.core.SVNProperty#SVN_WC_PREFIX      *                       svn:wc:} prefix      *</ul>      * @deprecated use {@link #doSetProperty(File, String, SVNPropertyValue, boolean, SVNDepth, ISVNPropertyHandler, Collection)}       *             instead      */
specifier|public
name|void
name|doSetProperty
parameter_list|(
name|File
name|path
parameter_list|,
name|String
name|propName
parameter_list|,
name|SVNPropertyValue
name|propValue
parameter_list|,
name|boolean
name|force
parameter_list|,
name|boolean
name|recursive
parameter_list|,
name|ISVNPropertyHandler
name|handler
parameter_list|)
throws|throws
name|SVNException
block|{
name|doSetProperty
argument_list|(
name|path
argument_list|,
name|propName
argument_list|,
name|propValue
argument_list|,
name|force
argument_list|,
name|SVNDepth
operator|.
name|getInfinityOrEmptyDepth
argument_list|(
name|recursive
argument_list|)
argument_list|,
name|handler
argument_list|,
literal|null
argument_list|)
expr_stmt|;
block|}
specifier|private
name|SVNAdminArea
name|addParentDirectories
parameter_list|(
name|SVNWCAccess
name|wcAccess
parameter_list|,
name|File
name|path
parameter_list|)
throws|throws
name|SVNException
block|{
try|try
block|{
return|return
name|wcAccess
operator|.
name|open
argument_list|(
name|path
argument_list|,
literal|true
argument_list|,
literal|0
argument_list|)
return|;
block|}
catch|catch
parameter_list|(
name|SVNException
name|e
parameter_list|)
block|{
if|if
condition|(
name|e
operator|.
name|getErrorMessage
argument_list|()
operator|.
name|getErrorCode
argument_list|()
operator|==
name|SVNErrorCode
operator|.
name|WC_NOT_DIRECTORY
condition|)
block|{
if|if
condition|(
name|path
operator|.
name|getParentFile
argument_list|()
operator|==
literal|null
condition|)
block|{
name|SVNErrorMessage
name|err
init|=
name|SVNErrorMessage
operator|.
name|create
argument_list|(
name|SVNErrorCode
operator|.
name|CLIENT_NO_VERSIONED_PARENT
argument_list|)
decl_stmt|;
name|SVNErrorManager
operator|.
name|error
argument_list|(
name|err
argument_list|,
name|SVNLogType
operator|.
name|WC
argument_list|)
expr_stmt|;
block|}
if|else if
condition|(
name|SVNFileUtil
operator|.
name|getAdminDirectoryName
argument_list|()
operator|.
name|equals
argument_list|(
name|path
operator|.
name|getName
argument_list|()
argument_list|)
condition|)
block|{
name|SVNErrorMessage
name|err
init|=
name|SVNErrorMessage
operator|.
name|create
argument_list|(
name|SVNErrorCode
operator|.
name|RESERVED_FILENAME_SPECIFIED
argument_list|,
literal|"''{0}'' ends in a reserved name"
argument_list|,
name|path
argument_list|)
decl_stmt|;
name|SVNErrorManager
operator|.
name|error
argument_list|(
name|err
argument_list|,
name|SVNLogType
operator|.
name|WC
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|File
name|parentPath
init|=
name|path
operator|.
name|getParentFile
argument_list|()
decl_stmt|;
name|SVNAdminArea
name|parentDir
init|=
name|addParentDirectories
argument_list|(
name|wcAccess
argument_list|,
name|parentPath
argument_list|)
decl_stmt|;
name|SVNWCManager
operator|.
name|add
argument_list|(
name|path
argument_list|,
name|parentDir
argument_list|,
literal|null
argument_list|,
name|SVNRevision
operator|.
name|UNDEFINED
argument_list|,
name|SVNDepth
operator|.
name|INFINITY
argument_list|)
expr_stmt|;
return|return
name|wcAccess
operator|.
name|getAdminArea
argument_list|(
name|path
argument_list|)
return|;
block|}
block|}
throw|throw
name|e
throw|;
block|}
block|}
specifier|private
name|void
name|doGetRevisionProperty
parameter_list|(
name|SVNRepository
name|repos
parameter_list|,
name|String
name|propName
parameter_list|,
name|long
name|revNumber
parameter_list|,
name|ISVNPropertyHandler
name|handler
parameter_list|)
throws|throws
name|SVNException
block|{
if|if
condition|(
name|propName
operator|!=
literal|null
condition|)
block|{
name|SVNPropertyValue
name|value
init|=
name|repos
operator|.
name|getRevisionPropertyValue
argument_list|(
name|revNumber
argument_list|,
name|propName
argument_list|)
decl_stmt|;
if|if
condition|(
name|value
operator|!=
literal|null
condition|)
block|{
name|handler
operator|.
name|handleProperty
argument_list|(
name|revNumber
argument_list|,
operator|new
name|SVNPropertyData
argument_list|(
name|propName
argument_list|,
name|value
argument_list|,
name|getOptions
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
else|else
block|{
name|SVNProperties
name|props
init|=
operator|new
name|SVNProperties
argument_list|()
decl_stmt|;
name|repos
operator|.
name|getRevisionProperties
argument_list|(
name|revNumber
argument_list|,
name|props
argument_list|)
expr_stmt|;
for|for
control|(
name|Iterator
name|names
init|=
name|props
operator|.
name|nameSet
argument_list|()
operator|.
name|iterator
argument_list|()
init|;
name|names
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|String
name|name
init|=
operator|(
name|String
operator|)
name|names
operator|.
name|next
argument_list|()
decl_stmt|;
name|SVNPropertyValue
name|value
init|=
name|props
operator|.
name|getSVNPropertyValue
argument_list|(
name|name
argument_list|)
decl_stmt|;
name|handler
operator|.
name|handleProperty
argument_list|(
name|revNumber
argument_list|,
operator|new
name|SVNPropertyData
argument_list|(
name|name
argument_list|,
name|value
argument_list|,
name|getOptions
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
block|}
specifier|private
name|void
name|addDirectory
parameter_list|(
name|File
name|wcRoot
parameter_list|,
name|File
name|path
parameter_list|,
name|SVNAdminArea
name|parentDir
parameter_list|,
name|boolean
name|force
parameter_list|,
name|boolean
name|noIgnore
parameter_list|,
name|SVNDepth
name|depth
parameter_list|,
name|boolean
name|setDepth
parameter_list|)
throws|throws
name|SVNException
block|{
name|checkCancelled
argument_list|()
expr_stmt|;
try|try
block|{
name|SVNWCManager
operator|.
name|add
argument_list|(
name|path
argument_list|,
name|parentDir
argument_list|,
literal|null
argument_list|,
name|SVNRevision
operator|.
name|UNDEFINED
argument_list|,
name|setDepth
condition|?
name|SVNDepth
operator|.
name|INFINITY
else|:
literal|null
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|SVNException
name|e
parameter_list|)
block|{
if|if
condition|(
operator|!
operator|(
name|force
operator|&&
name|e
operator|.
name|getErrorMessage
argument_list|()
operator|.
name|getErrorCode
argument_list|()
operator|==
name|SVNErrorCode
operator|.
name|ENTRY_EXISTS
operator|)
condition|)
block|{
throw|throw
name|e
throw|;
block|}
block|}
name|SVNWCAccess
name|access
init|=
name|parentDir
operator|.
name|getWCAccess
argument_list|()
decl_stmt|;
name|SVNAdminArea
name|dir
init|=
name|access
operator|.
name|retrieve
argument_list|(
name|path
argument_list|)
decl_stmt|;
name|Collection
name|ignores
init|=
name|Collections
operator|.
name|EMPTY_SET
decl_stmt|;
if|if
condition|(
operator|!
name|noIgnore
condition|)
block|{
name|ignores
operator|=
name|SVNStatusEditor
operator|.
name|getIgnorePatterns
argument_list|(
name|dir
argument_list|,
name|SVNStatusEditor
operator|.
name|getGlobalIgnores
argument_list|(
name|getOptions
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|String
name|relativePath
init|=
name|SVNPathUtil
operator|.
name|getRelativePath
argument_list|(
name|wcRoot
operator|.
name|getAbsolutePath
argument_list|()
operator|.
name|replace
argument_list|(
name|File
operator|.
name|separatorChar
argument_list|,
literal|'/'
argument_list|)
argument_list|,
name|dir
operator|.
name|getRoot
argument_list|()
operator|.
name|getAbsolutePath
argument_list|()
operator|.
name|replace
argument_list|(
name|File
operator|.
name|separatorChar
argument_list|,
literal|'/'
argument_list|)
argument_list|)
decl_stmt|;
name|relativePath
operator|=
name|relativePath
operator|!=
literal|null
condition|?
literal|"/"
operator|+
name|relativePath
else|:
literal|null
expr_stmt|;
name|File
index|[]
name|children
init|=
name|SVNFileListUtil
operator|.
name|listFiles
argument_list|(
name|dir
operator|.
name|getRoot
argument_list|()
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|children
operator|!=
literal|null
operator|&&
name|i
operator|<
name|children
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
name|checkCancelled
argument_list|()
expr_stmt|;
if|if
condition|(
name|SVNFileUtil
operator|.
name|getAdminDirectoryName
argument_list|()
operator|.
name|equals
argument_list|(
name|children
index|[
name|i
index|]
operator|.
name|getName
argument_list|()
argument_list|)
condition|)
block|{
continue|continue;
block|}
if|if
condition|(
operator|!
name|noIgnore
condition|)
block|{
name|String
name|rootRelativePath
init|=
name|relativePath
operator|!=
literal|null
condition|?
name|SVNPathUtil
operator|.
name|append
argument_list|(
name|relativePath
argument_list|,
name|children
index|[
name|i
index|]
operator|.
name|getName
argument_list|()
argument_list|)
else|:
literal|null
decl_stmt|;
if|if
condition|(
name|SVNStatusEditor
operator|.
name|isIgnored
argument_list|(
name|ignores
argument_list|,
name|children
index|[
name|i
index|]
argument_list|,
name|rootRelativePath
argument_list|)
condition|)
block|{
continue|continue;
block|}
block|}
name|SVNFileType
name|childType
init|=
name|SVNFileType
operator|.
name|getType
argument_list|(
name|children
index|[
name|i
index|]
argument_list|)
decl_stmt|;
if|if
condition|(
name|childType
operator|==
name|SVNFileType
operator|.
name|DIRECTORY
operator|&&
name|depth
operator|.
name|compareTo
argument_list|(
name|SVNDepth
operator|.
name|IMMEDIATES
argument_list|)
operator|>=
literal|0
condition|)
block|{
name|SVNDepth
name|depthBelowHere
init|=
name|depth
decl_stmt|;
if|if
condition|(
name|depth
operator|==
name|SVNDepth
operator|.
name|IMMEDIATES
condition|)
block|{
name|depthBelowHere
operator|=
name|SVNDepth
operator|.
name|EMPTY
expr_stmt|;
block|}
name|addDirectory
argument_list|(
name|wcRoot
argument_list|,
name|children
index|[
name|i
index|]
argument_list|,
name|dir
argument_list|,
name|force
argument_list|,
name|noIgnore
argument_list|,
name|depthBelowHere
argument_list|,
name|setDepth
argument_list|)
expr_stmt|;
block|}
if|else if
condition|(
name|childType
operator|!=
name|SVNFileType
operator|.
name|UNKNOWN
operator|&&
name|childType
operator|!=
name|SVNFileType
operator|.
name|DIRECTORY
operator|&&
name|depth
operator|.
name|compareTo
argument_list|(
name|SVNDepth
operator|.
name|FILES
argument_list|)
operator|>=
literal|0
condition|)
block|{
try|try
block|{
name|addFile
argument_list|(
name|children
index|[
name|i
index|]
argument_list|,
name|childType
argument_list|,
name|dir
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|SVNException
name|e
parameter_list|)
block|{
if|if
condition|(
name|force
operator|&&
name|e
operator|.
name|getErrorMessage
argument_list|()
operator|.
name|getErrorCode
argument_list|()
operator|==
name|SVNErrorCode
operator|.
name|ENTRY_EXISTS
condition|)
block|{
continue|continue;
block|}
throw|throw
name|e
throw|;
block|}
block|}
block|}
block|}
specifier|private
name|void
name|addFile
parameter_list|(
name|File
name|path
parameter_list|,
name|SVNFileType
name|type
parameter_list|,
name|SVNAdminArea
name|dir
parameter_list|)
throws|throws
name|SVNException
block|{
name|ISVNEventHandler
name|handler
init|=
name|dir
operator|.
name|getWCAccess
argument_list|()
operator|.
name|getEventHandler
argument_list|()
decl_stmt|;
name|dir
operator|.
name|getWCAccess
argument_list|()
operator|.
name|setEventHandler
argument_list|(
literal|null
argument_list|)
expr_stmt|;
name|SVNWCManager
operator|.
name|add
argument_list|(
name|path
argument_list|,
name|dir
argument_list|,
literal|null
argument_list|,
name|SVNRevision
operator|.
name|UNDEFINED
argument_list|,
literal|null
argument_list|)
expr_stmt|;
name|dir
operator|.
name|getWCAccess
argument_list|()
operator|.
name|setEventHandler
argument_list|(
name|handler
argument_list|)
expr_stmt|;
name|String
name|mimeType
init|=
literal|null
decl_stmt|;
if|if
condition|(
name|type
operator|==
name|SVNFileType
operator|.
name|SYMLINK
condition|)
block|{
name|SVNPropertiesManager
operator|.
name|setProperty
argument_list|(
name|dir
operator|.
name|getWCAccess
argument_list|()
argument_list|,
name|path
argument_list|,
name|SVNProperty
operator|.
name|SPECIAL
argument_list|,
name|SVNProperty
operator|.
name|getValueOfBooleanProperty
argument_list|(
name|SVNProperty
operator|.
name|SPECIAL
argument_list|)
argument_list|,
literal|false
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|Map
name|props
init|=
name|SVNPropertiesManager
operator|.
name|computeAutoProperties
argument_list|(
name|getOptions
argument_list|()
argument_list|,
name|path
argument_list|,
literal|null
argument_list|)
decl_stmt|;
for|for
control|(
name|Iterator
name|names
init|=
name|props
operator|.
name|keySet
argument_list|()
operator|.
name|iterator
argument_list|()
init|;
name|names
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|String
name|propName
init|=
operator|(
name|String
operator|)
name|names
operator|.
name|next
argument_list|()
decl_stmt|;
name|String
name|propValue
init|=
operator|(
name|String
operator|)
name|props
operator|.
name|get
argument_list|(
name|propName
argument_list|)
decl_stmt|;
try|try
block|{
name|SVNPropertiesManager
operator|.
name|setProperty
argument_list|(
name|dir
operator|.
name|getWCAccess
argument_list|()
argument_list|,
name|path
argument_list|,
name|propName
argument_list|,
name|SVNPropertyValue
operator|.
name|create
argument_list|(
name|propValue
argument_list|)
argument_list|,
literal|false
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|SVNException
name|e
parameter_list|)
block|{
if|if
condition|(
name|SVNProperty
operator|.
name|EOL_STYLE
operator|.
name|equals
argument_list|(
name|propName
argument_list|)
operator|&&
name|e
operator|.
name|getErrorMessage
argument_list|()
operator|.
name|getErrorCode
argument_list|()
operator|==
name|SVNErrorCode
operator|.
name|ILLEGAL_TARGET
operator|&&
name|e
operator|.
name|getErrorMessage
argument_list|()
operator|.
name|getMessage
argument_list|()
operator|.
name|indexOf
argument_list|(
literal|"newlines"
argument_list|)
operator|>=
literal|0
condition|)
block|{
name|ISVNAddParameters
operator|.
name|Action
name|action
init|=
name|getAddParameters
argument_list|()
operator|.
name|onInconsistentEOLs
argument_list|(
name|path
argument_list|)
decl_stmt|;
if|if
condition|(
name|action
operator|==
name|ISVNAddParameters
operator|.
name|REPORT_ERROR
condition|)
block|{
name|ISVNEventHandler
name|eventHandler
init|=
name|getEventDispatcher
argument_list|()
decl_stmt|;
try|try
block|{
name|setEventHandler
argument_list|(
literal|null
argument_list|)
expr_stmt|;
name|doRevert
argument_list|(
name|path
argument_list|,
name|dir
argument_list|,
name|SVNDepth
operator|.
name|EMPTY
argument_list|,
literal|false
argument_list|,
literal|null
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|SVNException
name|svne
parameter_list|)
block|{
block|}
finally|finally
block|{
name|setEventHandler
argument_list|(
name|eventHandler
argument_list|)
expr_stmt|;
block|}
throw|throw
name|e
throw|;
block|}
if|else if
condition|(
name|action
operator|==
name|ISVNAddParameters
operator|.
name|ADD_AS_IS
condition|)
block|{
name|SVNPropertiesManager
operator|.
name|setProperty
argument_list|(
name|dir
operator|.
name|getWCAccess
argument_list|()
argument_list|,
name|path
argument_list|,
name|propName
argument_list|,
literal|null
argument_list|,
literal|false
argument_list|)
expr_stmt|;
block|}
if|else if
condition|(
name|action
operator|==
name|ISVNAddParameters
operator|.
name|ADD_AS_BINARY
condition|)
block|{
name|SVNPropertiesManager
operator|.
name|setProperty
argument_list|(
name|dir
operator|.
name|getWCAccess
argument_list|()
argument_list|,
name|path
argument_list|,
name|propName
argument_list|,
literal|null
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|mimeType
operator|=
name|SVNFileUtil
operator|.
name|BINARY_MIME_TYPE
expr_stmt|;
block|}
block|}
else|else
block|{
name|ISVNEventHandler
name|eventHandler
init|=
name|getEventDispatcher
argument_list|()
decl_stmt|;
try|try
block|{
name|setEventHandler
argument_list|(
literal|null
argument_list|)
expr_stmt|;
name|doRevert
argument_list|(
name|path
argument_list|,
name|dir
argument_list|,
name|SVNDepth
operator|.
name|EMPTY
argument_list|,
literal|false
argument_list|,
literal|null
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|SVNException
name|svne
parameter_list|)
block|{
block|}
finally|finally
block|{
name|setEventHandler
argument_list|(
name|eventHandler
argument_list|)
expr_stmt|;
block|}
throw|throw
name|e
throw|;
block|}
block|}
block|}
if|if
condition|(
name|mimeType
operator|!=
literal|null
condition|)
block|{
name|SVNPropertiesManager
operator|.
name|setProperty
argument_list|(
name|dir
operator|.
name|getWCAccess
argument_list|()
argument_list|,
name|path
argument_list|,
name|SVNProperty
operator|.
name|MIME_TYPE
argument_list|,
name|SVNPropertyValue
operator|.
name|create
argument_list|(
name|mimeType
argument_list|)
argument_list|,
literal|false
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|mimeType
operator|=
operator|(
name|String
operator|)
name|props
operator|.
name|get
argument_list|(
name|SVNProperty
operator|.
name|MIME_TYPE
argument_list|)
expr_stmt|;
block|}
block|}
name|SVNEvent
name|event
init|=
name|SVNEventFactory
operator|.
name|createSVNEvent
argument_list|(
name|dir
operator|.
name|getFile
argument_list|(
name|path
operator|.
name|getName
argument_list|()
argument_list|)
argument_list|,
name|SVNNodeKind
operator|.
name|FILE
argument_list|,
name|mimeType
argument_list|,
name|SVNRepository
operator|.
name|INVALID_REVISION
argument_list|,
name|SVNEventAction
operator|.
name|ADD
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|)
decl_stmt|;
name|dispatchEvent
argument_list|(
name|event
argument_list|)
expr_stmt|;
block|}
specifier|private
name|SVNURL
name|collectLockInfo
parameter_list|(
name|SVNWCAccess
name|wcAccess
parameter_list|,
name|File
index|[]
name|files
parameter_list|,
name|Map
name|lockInfo
parameter_list|,
name|Map
name|lockPaths
parameter_list|,
name|boolean
name|lock
parameter_list|,
name|boolean
name|stealLock
parameter_list|)
throws|throws
name|SVNException
block|{
name|String
index|[]
name|paths
init|=
operator|new
name|String
index|[
name|files
operator|.
name|length
index|]
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|files
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
name|paths
index|[
name|i
index|]
operator|=
name|files
index|[
name|i
index|]
operator|.
name|getAbsolutePath
argument_list|()
expr_stmt|;
name|paths
index|[
name|i
index|]
operator|=
name|paths
index|[
name|i
index|]
operator|.
name|replace
argument_list|(
name|File
operator|.
name|separatorChar
argument_list|,
literal|'/'
argument_list|)
expr_stmt|;
block|}
name|Collection
name|condencedPaths
init|=
operator|new
name|ArrayList
argument_list|()
decl_stmt|;
name|String
name|commonParentPath
init|=
name|SVNPathUtil
operator|.
name|condencePaths
argument_list|(
name|paths
argument_list|,
name|condencedPaths
argument_list|,
literal|false
argument_list|)
decl_stmt|;
if|if
condition|(
name|condencedPaths
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|condencedPaths
operator|.
name|add
argument_list|(
name|SVNPathUtil
operator|.
name|tail
argument_list|(
name|commonParentPath
argument_list|)
argument_list|)
expr_stmt|;
name|commonParentPath
operator|=
name|SVNPathUtil
operator|.
name|removeTail
argument_list|(
name|commonParentPath
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|commonParentPath
operator|==
literal|null
operator|||
literal|""
operator|.
name|equals
argument_list|(
name|commonParentPath
argument_list|)
condition|)
block|{
name|SVNErrorMessage
name|err
init|=
name|SVNErrorMessage
operator|.
name|create
argument_list|(
name|SVNErrorCode
operator|.
name|UNSUPPORTED_FEATURE
argument_list|,
literal|"No common parent found, unable to operate on dijoint arguments"
argument_list|)
decl_stmt|;
name|SVNErrorManager
operator|.
name|error
argument_list|(
name|err
argument_list|,
name|SVNLogType
operator|.
name|WC
argument_list|)
expr_stmt|;
block|}
name|paths
operator|=
operator|(
name|String
index|[]
operator|)
name|condencedPaths
operator|.
name|toArray
argument_list|(
operator|new
name|String
index|[
name|condencedPaths
operator|.
name|size
argument_list|()
index|]
argument_list|)
expr_stmt|;
name|int
name|depth
init|=
literal|0
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|paths
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
name|int
name|segments
init|=
name|SVNPathUtil
operator|.
name|getSegmentsCount
argument_list|(
name|paths
index|[
name|i
index|]
argument_list|)
decl_stmt|;
if|if
condition|(
name|depth
operator|<
name|segments
condition|)
block|{
name|depth
operator|=
name|segments
expr_stmt|;
block|}
block|}
name|wcAccess
operator|.
name|probeOpen
argument_list|(
operator|new
name|Resource
argument_list|(
name|commonParentPath
argument_list|)
operator|.
name|getAbsoluteFile
argument_list|()
argument_list|,
literal|true
argument_list|,
name|depth
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|paths
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
name|File
name|file
init|=
operator|new
name|Resource
argument_list|(
name|commonParentPath
argument_list|,
name|paths
index|[
name|i
index|]
argument_list|)
decl_stmt|;
name|SVNEntry
name|entry
init|=
name|wcAccess
operator|.
name|getVersionedEntry
argument_list|(
name|file
argument_list|,
literal|false
argument_list|)
decl_stmt|;
if|if
condition|(
name|entry
operator|.
name|getURL
argument_list|()
operator|==
literal|null
condition|)
block|{
name|SVNErrorMessage
name|err
init|=
name|SVNErrorMessage
operator|.
name|create
argument_list|(
name|SVNErrorCode
operator|.
name|ENTRY_MISSING_URL
argument_list|,
literal|"''{0}'' has no URL"
argument_list|,
name|file
argument_list|)
decl_stmt|;
name|SVNErrorManager
operator|.
name|error
argument_list|(
name|err
argument_list|,
name|SVNLogType
operator|.
name|WC
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|lock
condition|)
block|{
name|SVNRevision
name|revision
init|=
name|stealLock
condition|?
name|SVNRevision
operator|.
name|UNDEFINED
else|:
name|SVNRevision
operator|.
name|create
argument_list|(
name|entry
operator|.
name|getRevision
argument_list|()
argument_list|)
decl_stmt|;
name|lockInfo
operator|.
name|put
argument_list|(
name|entry
operator|.
name|getSVNURL
argument_list|()
argument_list|,
operator|new
name|LockInfo
argument_list|(
name|file
argument_list|,
name|revision
argument_list|)
argument_list|)
expr_stmt|;
block|}
else|else
block|{
if|if
condition|(
operator|!
name|stealLock
operator|&&
name|entry
operator|.
name|getLockToken
argument_list|()
operator|==
literal|null
condition|)
block|{
name|SVNErrorMessage
name|err
init|=
name|SVNErrorMessage
operator|.
name|create
argument_list|(
name|SVNErrorCode
operator|.
name|CLIENT_MISSING_LOCK_TOKEN
argument_list|,
literal|"''{0}'' is not locked in this working copy"
argument_list|,
name|file
argument_list|)
decl_stmt|;
name|SVNErrorManager
operator|.
name|error
argument_list|(
name|err
argument_list|,
name|SVNLogType
operator|.
name|WC
argument_list|)
expr_stmt|;
block|}
name|lockInfo
operator|.
name|put
argument_list|(
name|entry
operator|.
name|getSVNURL
argument_list|()
argument_list|,
operator|new
name|LockInfo
argument_list|(
name|file
argument_list|,
name|stealLock
condition|?
literal|null
else|:
name|entry
operator|.
name|getLockToken
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
name|checkCancelled
argument_list|()
expr_stmt|;
name|SVNURL
index|[]
name|urls
init|=
operator|(
name|SVNURL
index|[]
operator|)
name|lockInfo
operator|.
name|keySet
argument_list|()
operator|.
name|toArray
argument_list|(
operator|new
name|SVNURL
index|[
name|lockInfo
operator|.
name|size
argument_list|()
index|]
argument_list|)
decl_stmt|;
name|Collection
name|urlPaths
init|=
operator|new
name|SVNHashSet
argument_list|()
decl_stmt|;
specifier|final
name|SVNURL
name|topURL
init|=
name|SVNURLUtil
operator|.
name|condenceURLs
argument_list|(
name|urls
argument_list|,
name|urlPaths
argument_list|,
literal|false
argument_list|)
decl_stmt|;
if|if
condition|(
name|urlPaths
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|urlPaths
operator|.
name|add
argument_list|(
literal|""
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|topURL
operator|==
literal|null
condition|)
block|{
name|SVNErrorMessage
name|err
init|=
name|SVNErrorMessage
operator|.
name|create
argument_list|(
name|SVNErrorCode
operator|.
name|UNSUPPORTED_FEATURE
argument_list|,
literal|"Unable to lock/unlock across multiple repositories"
argument_list|)
decl_stmt|;
name|SVNErrorManager
operator|.
name|error
argument_list|(
name|err
argument_list|,
name|SVNLogType
operator|.
name|WC
argument_list|)
expr_stmt|;
block|}
comment|// prepare Map for SVNRepository (decoded path : revision/lock token).
for|for
control|(
name|Iterator
name|encodedPaths
init|=
name|urlPaths
operator|.
name|iterator
argument_list|()
init|;
name|encodedPaths
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|String
name|encodedPath
init|=
operator|(
name|String
operator|)
name|encodedPaths
operator|.
name|next
argument_list|()
decl_stmt|;
comment|// get LockInfo for it.
name|SVNURL
name|fullURL
init|=
name|topURL
operator|.
name|appendPath
argument_list|(
name|encodedPath
argument_list|,
literal|true
argument_list|)
decl_stmt|;
name|LockInfo
name|info
init|=
operator|(
name|LockInfo
operator|)
name|lockInfo
operator|.
name|get
argument_list|(
name|fullURL
argument_list|)
decl_stmt|;
name|encodedPath
operator|=
name|SVNEncodingUtil
operator|.
name|uriDecode
argument_list|(
name|encodedPath
argument_list|)
expr_stmt|;
if|if
condition|(
name|lock
condition|)
block|{
if|if
condition|(
name|info
operator|.
name|myRevision
operator|==
name|SVNRevision
operator|.
name|UNDEFINED
condition|)
block|{
name|lockPaths
operator|.
name|put
argument_list|(
name|encodedPath
argument_list|,
literal|null
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|lockPaths
operator|.
name|put
argument_list|(
name|encodedPath
argument_list|,
operator|new
name|Long
argument_list|(
name|info
operator|.
name|myRevision
operator|.
name|getNumber
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
else|else
block|{
name|lockPaths
operator|.
name|put
argument_list|(
name|encodedPath
argument_list|,
name|info
operator|.
name|myToken
argument_list|)
expr_stmt|;
block|}
block|}
return|return
name|topURL
return|;
block|}
specifier|private
name|void
name|crawlEntries
parameter_list|(
name|File
name|path
parameter_list|,
name|SVNDepth
name|depth
parameter_list|,
specifier|final
name|Collection
name|changeLists
parameter_list|,
specifier|final
name|ISVNInfoHandler
name|handler
parameter_list|)
throws|throws
name|SVNException
block|{
specifier|final
name|SVNWCAccess
name|wcAccess
init|=
name|createWCAccess
argument_list|()
decl_stmt|;
name|int
name|admLockLevel
init|=
name|getLevelsToLockFromDepth
argument_list|(
name|depth
argument_list|)
decl_stmt|;
try|try
block|{
name|wcAccess
operator|.
name|probeOpen
argument_list|(
name|path
argument_list|,
literal|false
argument_list|,
name|admLockLevel
argument_list|)
expr_stmt|;
name|wcAccess
operator|.
name|walkEntries
argument_list|(
name|path
argument_list|,
operator|new
name|ISVNEntryHandler
argument_list|()
block|{
specifier|public
name|void
name|handleEntry
parameter_list|(
name|File
name|path
parameter_list|,
name|SVNEntry
name|entry
parameter_list|)
throws|throws
name|SVNException
block|{
if|if
condition|(
name|entry
operator|.
name|isDirectory
argument_list|()
operator|&&
operator|!
name|entry
operator|.
name|isThisDir
argument_list|()
condition|)
block|{
return|return;
block|}
if|if
condition|(
name|SVNWCAccess
operator|.
name|matchesChangeList
argument_list|(
name|changeLists
argument_list|,
name|entry
argument_list|)
condition|)
block|{
name|reportEntry
argument_list|(
name|path
argument_list|,
name|entry
argument_list|,
name|handler
argument_list|)
expr_stmt|;
block|}
block|}
specifier|public
name|void
name|handleError
parameter_list|(
name|File
name|path
parameter_list|,
name|SVNErrorMessage
name|error
parameter_list|)
throws|throws
name|SVNException
block|{
if|if
condition|(
name|error
operator|!=
literal|null
operator|&&
name|error
operator|.
name|getErrorCode
argument_list|()
operator|==
name|SVNErrorCode
operator|.
name|UNVERSIONED_RESOURCE
condition|)
block|{
name|SVNAdminArea
name|dir
init|=
name|wcAccess
operator|.
name|probeTry
argument_list|(
name|path
operator|.
name|getParentFile
argument_list|()
argument_list|,
literal|false
argument_list|,
literal|0
argument_list|)
decl_stmt|;
name|SVNTreeConflictDescription
name|tc
init|=
name|dir
operator|.
name|getTreeConflict
argument_list|(
name|path
operator|.
name|getName
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|tc
operator|!=
literal|null
condition|)
block|{
name|SVNInfo
name|info
init|=
name|SVNInfo
operator|.
name|createInfo
argument_list|(
name|path
argument_list|,
name|tc
argument_list|)
decl_stmt|;
name|handler
operator|.
name|handleInfo
argument_list|(
name|info
argument_list|)
expr_stmt|;
return|return;
block|}
block|}
name|SVNErrorManager
operator|.
name|error
argument_list|(
name|error
argument_list|,
name|SVNLogType
operator|.
name|WC
argument_list|)
expr_stmt|;
block|}
block|}
argument_list|,
literal|false
argument_list|,
name|depth
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
name|wcAccess
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
block|}
specifier|private
name|void
name|reportEntry
parameter_list|(
name|File
name|path
parameter_list|,
name|SVNEntry
name|entry
parameter_list|,
name|ISVNInfoHandler
name|handler
parameter_list|)
throws|throws
name|SVNException
block|{
if|if
condition|(
name|entry
operator|.
name|isDirectory
argument_list|()
operator|&&
operator|!
literal|""
operator|.
name|equals
argument_list|(
name|entry
operator|.
name|getName
argument_list|()
argument_list|)
condition|)
block|{
return|return;
block|}
name|handler
operator|.
name|handleInfo
argument_list|(
name|SVNInfo
operator|.
name|createInfo
argument_list|(
name|path
argument_list|,
name|entry
argument_list|)
argument_list|)
expr_stmt|;
block|}
specifier|private
name|boolean
name|doRevert
parameter_list|(
name|File
name|path
parameter_list|,
name|SVNAdminArea
name|parent
parameter_list|,
name|SVNDepth
name|depth
parameter_list|,
name|boolean
name|useCommitTimes
parameter_list|,
name|Collection
name|changeLists
parameter_list|)
throws|throws
name|SVNException
block|{
name|checkCancelled
argument_list|()
expr_stmt|;
name|SVNWCAccess
name|wcAccess
init|=
name|parent
operator|.
name|getWCAccess
argument_list|()
decl_stmt|;
name|SVNAdminArea
name|dir
init|=
name|wcAccess
operator|.
name|probeRetrieve
argument_list|(
name|path
argument_list|)
decl_stmt|;
name|SVNEntry
name|entry
init|=
name|wcAccess
operator|.
name|getEntry
argument_list|(
name|path
argument_list|,
literal|false
argument_list|)
decl_stmt|;
name|SVNTreeConflictDescription
name|treeConflict
init|=
name|wcAccess
operator|.
name|getTreeConflict
argument_list|(
name|path
argument_list|)
decl_stmt|;
if|if
condition|(
name|entry
operator|==
literal|null
operator|&&
name|treeConflict
operator|==
literal|null
condition|)
block|{
name|SVNErrorMessage
name|err
init|=
name|SVNErrorMessage
operator|.
name|create
argument_list|(
name|SVNErrorCode
operator|.
name|UNVERSIONED_RESOURCE
argument_list|,
literal|"Cannot revert unversioned item ''{0}''"
argument_list|,
name|path
argument_list|)
decl_stmt|;
name|SVNErrorManager
operator|.
name|error
argument_list|(
name|err
argument_list|,
name|SVNLogType
operator|.
name|WC
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|entry
operator|!=
literal|null
operator|&&
name|entry
operator|.
name|getKind
argument_list|()
operator|==
name|SVNNodeKind
operator|.
name|DIR
condition|)
block|{
name|SVNFileType
name|fileType
init|=
name|SVNFileType
operator|.
name|getType
argument_list|(
name|path
argument_list|)
decl_stmt|;
if|if
condition|(
name|fileType
operator|!=
name|SVNFileType
operator|.
name|DIRECTORY
operator|&&
operator|!
name|entry
operator|.
name|isScheduledForAddition
argument_list|()
condition|)
block|{
if|if
condition|(
name|isRevertMissingDirectories
argument_list|()
operator|&&
name|entry
operator|.
name|getSchedule
argument_list|()
operator|!=
literal|null
operator|&&
operator|!
name|entry
operator|.
name|isThisDir
argument_list|()
condition|)
block|{
comment|// missing directory scheduled for deletion in parent.
name|boolean
name|reverted
init|=
name|revert
argument_list|(
name|parent
argument_list|,
name|entry
operator|.
name|getName
argument_list|()
argument_list|,
name|entry
argument_list|,
name|useCommitTimes
argument_list|)
decl_stmt|;
if|if
condition|(
name|reverted
condition|)
block|{
name|SVNEvent
name|event
init|=
name|SVNEventFactory
operator|.
name|createSVNEvent
argument_list|(
name|dir
operator|.
name|getFile
argument_list|(
name|entry
operator|.
name|getName
argument_list|()
argument_list|)
argument_list|,
name|entry
operator|.
name|getKind
argument_list|()
argument_list|,
literal|null
argument_list|,
name|entry
operator|.
name|getRevision
argument_list|()
argument_list|,
name|SVNEventAction
operator|.
name|REVERT
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|)
decl_stmt|;
name|dispatchEvent
argument_list|(
name|event
argument_list|)
expr_stmt|;
block|}
return|return
name|reverted
return|;
block|}
name|SVNEvent
name|event
init|=
name|SVNEventFactory
operator|.
name|createSVNEvent
argument_list|(
name|dir
operator|.
name|getFile
argument_list|(
name|entry
operator|.
name|getName
argument_list|()
argument_list|)
argument_list|,
name|entry
operator|.
name|getKind
argument_list|()
argument_list|,
literal|null
argument_list|,
name|entry
operator|.
name|getRevision
argument_list|()
argument_list|,
name|SVNEventAction
operator|.
name|FAILED_REVERT
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|)
decl_stmt|;
name|dispatchEvent
argument_list|(
name|event
argument_list|)
expr_stmt|;
return|return
literal|false
return|;
block|}
block|}
if|if
condition|(
name|entry
operator|!=
literal|null
operator|&&
name|entry
operator|.
name|getKind
argument_list|()
operator|!=
name|SVNNodeKind
operator|.
name|DIR
operator|&&
name|entry
operator|.
name|getKind
argument_list|()
operator|!=
name|SVNNodeKind
operator|.
name|FILE
condition|)
block|{
name|SVNErrorMessage
name|err
init|=
name|SVNErrorMessage
operator|.
name|create
argument_list|(
name|SVNErrorCode
operator|.
name|UNSUPPORTED_FEATURE
argument_list|,
literal|"Cannot revert ''{0}'': unsupported entry node kind"
argument_list|,
name|path
argument_list|)
decl_stmt|;
name|SVNErrorManager
operator|.
name|error
argument_list|(
name|err
argument_list|,
name|SVNLogType
operator|.
name|WC
argument_list|)
expr_stmt|;
block|}
name|SVNFileType
name|fileType
init|=
name|SVNFileType
operator|.
name|getType
argument_list|(
name|path
argument_list|)
decl_stmt|;
if|if
condition|(
name|fileType
operator|==
name|SVNFileType
operator|.
name|UNKNOWN
condition|)
block|{
name|SVNErrorMessage
name|err
init|=
name|SVNErrorMessage
operator|.
name|create
argument_list|(
name|SVNErrorCode
operator|.
name|UNSUPPORTED_FEATURE
argument_list|,
literal|"Cannot revert ''{0}'': unsupported node kind in working copy"
argument_list|,
name|path
argument_list|)
decl_stmt|;
name|SVNErrorManager
operator|.
name|error
argument_list|(
name|err
argument_list|,
name|SVNLogType
operator|.
name|WC
argument_list|)
expr_stmt|;
block|}
name|boolean
name|reverted
init|=
literal|false
decl_stmt|;
if|if
condition|(
name|SVNWCAccess
operator|.
name|matchesChangeList
argument_list|(
name|changeLists
argument_list|,
name|entry
argument_list|)
condition|)
block|{
if|if
condition|(
name|treeConflict
operator|!=
literal|null
condition|)
block|{
name|parent
operator|.
name|deleteTreeConflict
argument_list|(
name|path
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
name|reverted
operator|=
literal|true
expr_stmt|;
block|}
if|if
condition|(
name|entry
operator|!=
literal|null
condition|)
block|{
if|if
condition|(
name|entry
operator|.
name|isScheduledForAddition
argument_list|()
condition|)
block|{
name|boolean
name|wasDeleted
init|=
literal|false
decl_stmt|;
if|if
condition|(
name|entry
operator|.
name|getKind
argument_list|()
operator|==
name|SVNNodeKind
operator|.
name|FILE
condition|)
block|{
name|wasDeleted
operator|=
name|entry
operator|.
name|isDeleted
argument_list|()
expr_stmt|;
name|parent
operator|.
name|removeFromRevisionControl
argument_list|(
name|path
operator|.
name|getName
argument_list|()
argument_list|,
literal|false
argument_list|,
literal|false
argument_list|)
expr_stmt|;
block|}
if|else if
condition|(
name|entry
operator|.
name|getKind
argument_list|()
operator|==
name|SVNNodeKind
operator|.
name|DIR
condition|)
block|{
name|SVNEntry
name|entryInParent
init|=
name|parent
operator|.
name|getEntry
argument_list|(
name|path
operator|.
name|getName
argument_list|()
argument_list|,
literal|true
argument_list|)
decl_stmt|;
if|if
condition|(
name|entryInParent
operator|!=
literal|null
condition|)
block|{
name|wasDeleted
operator|=
name|entryInParent
operator|.
name|isDeleted
argument_list|()
expr_stmt|;
block|}
if|if
condition|(
name|fileType
operator|==
name|SVNFileType
operator|.
name|NONE
operator|||
name|wcAccess
operator|.
name|isMissing
argument_list|(
name|path
argument_list|)
condition|)
block|{
name|parent
operator|.
name|deleteEntry
argument_list|(
name|path
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
name|parent
operator|.
name|saveEntries
argument_list|(
literal|false
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|dir
operator|.
name|removeFromRevisionControl
argument_list|(
literal|""
argument_list|,
literal|false
argument_list|,
literal|false
argument_list|)
expr_stmt|;
block|}
block|}
name|reverted
operator|=
literal|true
expr_stmt|;
name|depth
operator|=
name|SVNDepth
operator|.
name|EMPTY
expr_stmt|;
if|if
condition|(
name|wasDeleted
condition|)
block|{
name|Map
name|attributes
init|=
operator|new
name|SVNHashMap
argument_list|()
decl_stmt|;
name|attributes
operator|.
name|put
argument_list|(
name|SVNProperty
operator|.
name|KIND
argument_list|,
name|entry
operator|.
name|getKind
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|attributes
operator|.
name|put
argument_list|(
name|SVNProperty
operator|.
name|DELETED
argument_list|,
name|Boolean
operator|.
name|TRUE
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|parent
operator|.
name|modifyEntry
argument_list|(
name|path
operator|.
name|getName
argument_list|()
argument_list|,
name|attributes
argument_list|,
literal|true
argument_list|,
literal|false
argument_list|)
expr_stmt|;
block|}
block|}
if|else if
condition|(
name|entry
operator|.
name|getSchedule
argument_list|()
operator|==
literal|null
operator|||
name|entry
operator|.
name|isScheduledForDeletion
argument_list|()
operator|||
name|entry
operator|.
name|isScheduledForReplacement
argument_list|()
condition|)
block|{
if|if
condition|(
name|entry
operator|.
name|getKind
argument_list|()
operator|==
name|SVNNodeKind
operator|.
name|FILE
condition|)
block|{
name|reverted
operator|=
name|revert
argument_list|(
name|parent
argument_list|,
name|entry
operator|.
name|getName
argument_list|()
argument_list|,
name|entry
argument_list|,
name|useCommitTimes
argument_list|)
expr_stmt|;
block|}
if|else if
condition|(
name|entry
operator|.
name|getKind
argument_list|()
operator|==
name|SVNNodeKind
operator|.
name|DIR
condition|)
block|{
name|reverted
operator|=
name|revert
argument_list|(
name|dir
argument_list|,
name|dir
operator|.
name|getThisDirName
argument_list|()
argument_list|,
name|entry
argument_list|,
name|useCommitTimes
argument_list|)
expr_stmt|;
if|if
condition|(
name|reverted
operator|&&
name|parent
operator|!=
name|dir
condition|)
block|{
name|SVNEntry
name|entryInParent
init|=
name|parent
operator|.
name|getEntry
argument_list|(
name|path
operator|.
name|getName
argument_list|()
argument_list|,
literal|false
argument_list|)
decl_stmt|;
name|revert
argument_list|(
name|parent
argument_list|,
name|path
operator|.
name|getName
argument_list|()
argument_list|,
name|entryInParent
argument_list|,
name|useCommitTimes
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|entry
operator|.
name|isScheduledForReplacement
argument_list|()
condition|)
block|{
name|depth
operator|=
name|SVNDepth
operator|.
name|INFINITY
expr_stmt|;
block|}
block|}
block|}
block|}
if|if
condition|(
name|reverted
condition|)
block|{
name|SVNEvent
name|event
init|=
literal|null
decl_stmt|;
if|if
condition|(
name|entry
operator|!=
literal|null
condition|)
block|{
name|event
operator|=
name|SVNEventFactory
operator|.
name|createSVNEvent
argument_list|(
name|dir
operator|.
name|getFile
argument_list|(
name|entry
operator|.
name|getName
argument_list|()
argument_list|)
argument_list|,
name|entry
operator|.
name|getKind
argument_list|()
argument_list|,
literal|null
argument_list|,
name|entry
operator|.
name|getRevision
argument_list|()
argument_list|,
name|SVNEventAction
operator|.
name|REVERT
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|event
operator|=
name|SVNEventFactory
operator|.
name|createSVNEvent
argument_list|(
name|path
argument_list|,
name|SVNNodeKind
operator|.
name|UNKNOWN
argument_list|,
literal|null
argument_list|,
name|SVNRepository
operator|.
name|INVALID_REVISION
argument_list|,
name|SVNEventAction
operator|.
name|REVERT
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|)
expr_stmt|;
block|}
name|dispatchEvent
argument_list|(
name|event
argument_list|)
expr_stmt|;
block|}
block|}
if|if
condition|(
name|entry
operator|!=
literal|null
operator|&&
name|entry
operator|.
name|getKind
argument_list|()
operator|==
name|SVNNodeKind
operator|.
name|DIR
operator|&&
name|depth
operator|.
name|compareTo
argument_list|(
name|SVNDepth
operator|.
name|EMPTY
argument_list|)
operator|>
literal|0
condition|)
block|{
name|SVNDepth
name|depthBelowHere
init|=
name|depth
decl_stmt|;
if|if
condition|(
name|depth
operator|==
name|SVNDepth
operator|.
name|FILES
operator|||
name|depth
operator|==
name|SVNDepth
operator|.
name|IMMEDIATES
condition|)
block|{
name|depthBelowHere
operator|=
name|SVNDepth
operator|.
name|EMPTY
expr_stmt|;
block|}
for|for
control|(
name|Iterator
name|entries
init|=
name|dir
operator|.
name|entries
argument_list|(
literal|false
argument_list|)
init|;
name|entries
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|SVNEntry
name|childEntry
init|=
operator|(
name|SVNEntry
operator|)
name|entries
operator|.
name|next
argument_list|()
decl_stmt|;
if|if
condition|(
name|dir
operator|.
name|getThisDirName
argument_list|()
operator|.
name|equals
argument_list|(
name|childEntry
operator|.
name|getName
argument_list|()
argument_list|)
condition|)
block|{
continue|continue;
block|}
if|if
condition|(
name|depth
operator|==
name|SVNDepth
operator|.
name|FILES
operator|&&
operator|!
name|childEntry
operator|.
name|isFile
argument_list|()
condition|)
block|{
continue|continue;
block|}
name|File
name|childPath
init|=
operator|new
name|Resource
argument_list|(
name|path
argument_list|,
name|childEntry
operator|.
name|getName
argument_list|()
argument_list|)
decl_stmt|;
name|reverted
operator||=
name|doRevert
argument_list|(
name|childPath
argument_list|,
name|dir
argument_list|,
name|depthBelowHere
argument_list|,
name|useCommitTimes
argument_list|,
name|changeLists
argument_list|)
expr_stmt|;
block|}
name|Map
name|conflicts
init|=
name|SVNTreeConflictUtil
operator|.
name|readTreeConflicts
argument_list|(
name|path
argument_list|,
name|entry
operator|.
name|getTreeConflictData
argument_list|()
argument_list|)
decl_stmt|;
for|for
control|(
name|Iterator
name|conflictsIter
init|=
name|conflicts
operator|.
name|keySet
argument_list|()
operator|.
name|iterator
argument_list|()
init|;
name|conflictsIter
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|File
name|conflictedPath
init|=
operator|(
name|File
operator|)
name|conflictsIter
operator|.
name|next
argument_list|()
decl_stmt|;
if|if
condition|(
name|dir
operator|.
name|getEntry
argument_list|(
name|conflictedPath
operator|.
name|getName
argument_list|()
argument_list|,
literal|false
argument_list|)
operator|==
literal|null
condition|)
block|{
name|reverted
operator||=
name|doRevert
argument_list|(
name|conflictedPath
argument_list|,
name|dir
argument_list|,
name|SVNDepth
operator|.
name|EMPTY
argument_list|,
name|useCommitTimes
argument_list|,
name|changeLists
argument_list|)
expr_stmt|;
block|}
block|}
block|}
return|return
name|reverted
return|;
block|}
specifier|private
name|boolean
name|revert
parameter_list|(
name|SVNAdminArea
name|dir
parameter_list|,
name|String
name|name
parameter_list|,
name|SVNEntry
name|entry
parameter_list|,
name|boolean
name|useCommitTime
parameter_list|)
throws|throws
name|SVNException
block|{
name|SVNLog
name|log
init|=
name|dir
operator|.
name|getLog
argument_list|()
decl_stmt|;
name|boolean
name|reverted
init|=
literal|false
decl_stmt|;
name|SVNVersionedProperties
name|baseProperties
init|=
literal|null
decl_stmt|;
name|SVNProperties
name|command
init|=
operator|new
name|SVNProperties
argument_list|()
decl_stmt|;
name|boolean
name|revertBase
init|=
literal|false
decl_stmt|;
if|if
condition|(
name|entry
operator|.
name|isScheduledForReplacement
argument_list|()
condition|)
block|{
name|revertBase
operator|=
literal|true
expr_stmt|;
name|baseProperties
operator|=
name|dir
operator|.
name|getRevertProperties
argument_list|(
name|name
argument_list|)
expr_stmt|;
name|String
name|propRevertPath
init|=
name|SVNAdminUtil
operator|.
name|getPropRevertPath
argument_list|(
name|name
argument_list|,
name|entry
operator|.
name|getKind
argument_list|()
argument_list|,
literal|false
argument_list|)
decl_stmt|;
name|command
operator|.
name|put
argument_list|(
name|SVNLog
operator|.
name|NAME_ATTR
argument_list|,
name|propRevertPath
argument_list|)
expr_stmt|;
name|log
operator|.
name|addCommand
argument_list|(
name|SVNLog
operator|.
name|DELETE
argument_list|,
name|command
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|command
operator|.
name|clear
argument_list|()
expr_stmt|;
name|reverted
operator|=
literal|true
expr_stmt|;
block|}
name|boolean
name|reinstallWorkingFile
init|=
literal|false
decl_stmt|;
if|if
condition|(
name|baseProperties
operator|==
literal|null
condition|)
block|{
if|if
condition|(
name|dir
operator|.
name|hasPropModifications
argument_list|(
name|name
argument_list|)
condition|)
block|{
name|baseProperties
operator|=
name|dir
operator|.
name|getBaseProperties
argument_list|(
name|name
argument_list|)
expr_stmt|;
name|SVNVersionedProperties
name|propDiff
init|=
name|dir
operator|.
name|getProperties
argument_list|(
name|name
argument_list|)
operator|.
name|compareTo
argument_list|(
name|baseProperties
argument_list|)
decl_stmt|;
name|Collection
name|propNames
init|=
name|propDiff
operator|.
name|getPropertyNames
argument_list|(
literal|null
argument_list|)
decl_stmt|;
name|reinstallWorkingFile
operator|=
name|propNames
operator|.
name|contains
argument_list|(
name|SVNProperty
operator|.
name|EXECUTABLE
argument_list|)
operator|||
name|propNames
operator|.
name|contains
argument_list|(
name|SVNProperty
operator|.
name|KEYWORDS
argument_list|)
operator|||
name|propNames
operator|.
name|contains
argument_list|(
name|SVNProperty
operator|.
name|EOL_STYLE
argument_list|)
operator|||
name|propNames
operator|.
name|contains
argument_list|(
name|SVNProperty
operator|.
name|CHARSET
argument_list|)
operator|||
name|propNames
operator|.
name|contains
argument_list|(
name|SVNProperty
operator|.
name|SPECIAL
argument_list|)
operator|||
name|propNames
operator|.
name|contains
argument_list|(
name|SVNProperty
operator|.
name|NEEDS_LOCK
argument_list|)
expr_stmt|;
block|}
block|}
if|if
condition|(
name|baseProperties
operator|!=
literal|null
condition|)
block|{
comment|// save base props both to base and working.
name|SVNProperties
name|newProperties
init|=
name|baseProperties
operator|.
name|asMap
argument_list|()
decl_stmt|;
name|SVNVersionedProperties
name|originalBaseProperties
init|=
name|dir
operator|.
name|getBaseProperties
argument_list|(
name|name
argument_list|)
decl_stmt|;
name|SVNVersionedProperties
name|workProperties
init|=
name|dir
operator|.
name|getProperties
argument_list|(
name|name
argument_list|)
decl_stmt|;
if|if
condition|(
name|revertBase
condition|)
block|{
name|originalBaseProperties
operator|.
name|removeAll
argument_list|()
expr_stmt|;
block|}
name|workProperties
operator|.
name|removeAll
argument_list|()
expr_stmt|;
for|for
control|(
name|Iterator
name|names
init|=
name|newProperties
operator|.
name|nameSet
argument_list|()
operator|.
name|iterator
argument_list|()
init|;
name|names
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|String
name|propName
init|=
operator|(
name|String
operator|)
name|names
operator|.
name|next
argument_list|()
decl_stmt|;
if|if
condition|(
name|revertBase
condition|)
block|{
name|originalBaseProperties
operator|.
name|setPropertyValue
argument_list|(
name|propName
argument_list|,
name|newProperties
operator|.
name|getSVNPropertyValue
argument_list|(
name|propName
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|workProperties
operator|.
name|setPropertyValue
argument_list|(
name|propName
argument_list|,
name|newProperties
operator|.
name|getSVNPropertyValue
argument_list|(
name|propName
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|dir
operator|.
name|saveVersionedProperties
argument_list|(
name|log
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|reverted
operator|=
literal|true
expr_stmt|;
block|}
name|SVNProperties
name|newEntryProperties
init|=
operator|new
name|SVNProperties
argument_list|()
decl_stmt|;
if|if
condition|(
name|entry
operator|.
name|getKind
argument_list|()
operator|==
name|SVNNodeKind
operator|.
name|FILE
condition|)
block|{
name|String
name|basePath
init|=
name|SVNAdminUtil
operator|.
name|getTextBasePath
argument_list|(
name|name
argument_list|,
literal|false
argument_list|)
decl_stmt|;
name|String
name|revertBasePath
init|=
name|SVNAdminUtil
operator|.
name|getTextRevertPath
argument_list|(
name|name
argument_list|,
literal|false
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|reinstallWorkingFile
condition|)
block|{
name|SVNFileType
name|fileType
init|=
name|SVNFileType
operator|.
name|getType
argument_list|(
name|dir
operator|.
name|getFile
argument_list|(
name|name
argument_list|)
argument_list|)
decl_stmt|;
if|if
condition|(
name|fileType
operator|==
name|SVNFileType
operator|.
name|NONE
condition|)
block|{
name|reinstallWorkingFile
operator|=
literal|true
expr_stmt|;
block|}
block|}
if|if
condition|(
name|dir
operator|.
name|getFile
argument_list|(
name|revertBasePath
argument_list|)
operator|.
name|isFile
argument_list|()
condition|)
block|{
name|reinstallWorkingFile
operator|=
literal|true
expr_stmt|;
block|}
else|else
block|{
if|if
condition|(
operator|!
name|dir
operator|.
name|getFile
argument_list|(
name|basePath
argument_list|)
operator|.
name|isFile
argument_list|()
condition|)
block|{
name|SVNErrorMessage
name|err
init|=
name|SVNErrorMessage
operator|.
name|create
argument_list|(
name|SVNErrorCode
operator|.
name|IO_ERROR
argument_list|,
literal|"Error restoring text for ''{0}''"
argument_list|,
name|dir
operator|.
name|getFile
argument_list|(
name|name
argument_list|)
argument_list|)
decl_stmt|;
name|SVNErrorManager
operator|.
name|error
argument_list|(
name|err
argument_list|,
name|SVNLogType
operator|.
name|WC
argument_list|)
expr_stmt|;
block|}
name|revertBasePath
operator|=
literal|null
expr_stmt|;
block|}
if|if
condition|(
name|revertBasePath
operator|!=
literal|null
condition|)
block|{
name|command
operator|.
name|put
argument_list|(
name|SVNLog
operator|.
name|NAME_ATTR
argument_list|,
name|revertBasePath
argument_list|)
expr_stmt|;
name|command
operator|.
name|put
argument_list|(
name|SVNLog
operator|.
name|DEST_ATTR
argument_list|,
name|name
argument_list|)
expr_stmt|;
name|log
operator|.
name|addCommand
argument_list|(
name|SVNLog
operator|.
name|COPY_AND_TRANSLATE
argument_list|,
name|command
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|command
operator|.
name|clear
argument_list|()
expr_stmt|;
name|command
operator|.
name|put
argument_list|(
name|SVNLog
operator|.
name|NAME_ATTR
argument_list|,
name|revertBasePath
argument_list|)
expr_stmt|;
name|command
operator|.
name|put
argument_list|(
name|SVNLog
operator|.
name|DEST_ATTR
argument_list|,
name|basePath
argument_list|)
expr_stmt|;
name|log
operator|.
name|addCommand
argument_list|(
name|SVNLog
operator|.
name|MOVE
argument_list|,
name|command
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|reverted
operator|=
literal|true
expr_stmt|;
block|}
else|else
block|{
if|if
condition|(
operator|!
name|reinstallWorkingFile
condition|)
block|{
name|reinstallWorkingFile
operator|=
name|dir
operator|.
name|hasTextModifications
argument_list|(
name|name
argument_list|,
literal|false
argument_list|,
literal|false
argument_list|,
literal|false
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|reinstallWorkingFile
condition|)
block|{
name|command
operator|.
name|put
argument_list|(
name|SVNLog
operator|.
name|NAME_ATTR
argument_list|,
name|SVNAdminUtil
operator|.
name|getTextBasePath
argument_list|(
name|name
argument_list|,
literal|false
argument_list|)
argument_list|)
expr_stmt|;
name|command
operator|.
name|put
argument_list|(
name|SVNLog
operator|.
name|DEST_ATTR
argument_list|,
name|name
argument_list|)
expr_stmt|;
name|log
operator|.
name|addCommand
argument_list|(
name|SVNLog
operator|.
name|COPY_AND_TRANSLATE
argument_list|,
name|command
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|command
operator|.
name|clear
argument_list|()
expr_stmt|;
if|if
condition|(
name|useCommitTime
operator|&&
name|entry
operator|.
name|getCommittedDate
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|command
operator|.
name|put
argument_list|(
name|SVNLog
operator|.
name|NAME_ATTR
argument_list|,
name|name
argument_list|)
expr_stmt|;
name|command
operator|.
name|put
argument_list|(
name|SVNLog
operator|.
name|TIMESTAMP_ATTR
argument_list|,
name|entry
operator|.
name|getCommittedDate
argument_list|()
argument_list|)
expr_stmt|;
name|log
operator|.
name|addCommand
argument_list|(
name|SVNLog
operator|.
name|SET_TIMESTAMP
argument_list|,
name|command
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|command
operator|.
name|clear
argument_list|()
expr_stmt|;
block|}
else|else
block|{
name|command
operator|.
name|put
argument_list|(
name|SVNLog
operator|.
name|NAME_ATTR
argument_list|,
name|name
argument_list|)
expr_stmt|;
name|command
operator|.
name|put
argument_list|(
name|SVNLog
operator|.
name|TIMESTAMP_ATTR
argument_list|,
name|SVNDate
operator|.
name|formatDate
argument_list|(
operator|new
name|Date
argument_list|(
name|System
operator|.
name|currentTimeMillis
argument_list|()
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|log
operator|.
name|addCommand
argument_list|(
name|SVNLog
operator|.
name|SET_TIMESTAMP
argument_list|,
name|command
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|command
operator|.
name|clear
argument_list|()
expr_stmt|;
block|}
name|command
operator|.
name|put
argument_list|(
name|SVNLog
operator|.
name|NAME_ATTR
argument_list|,
name|name
argument_list|)
expr_stmt|;
name|command
operator|.
name|put
argument_list|(
name|SVNProperty
operator|.
name|shortPropertyName
argument_list|(
name|SVNProperty
operator|.
name|TEXT_TIME
argument_list|)
argument_list|,
name|SVNLog
operator|.
name|WC_TIMESTAMP
argument_list|)
expr_stmt|;
name|log
operator|.
name|addCommand
argument_list|(
name|SVNLog
operator|.
name|MODIFY_ENTRY
argument_list|,
name|command
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|command
operator|.
name|clear
argument_list|()
expr_stmt|;
name|command
operator|.
name|put
argument_list|(
name|SVNLog
operator|.
name|NAME_ATTR
argument_list|,
name|name
argument_list|)
expr_stmt|;
name|command
operator|.
name|put
argument_list|(
name|SVNProperty
operator|.
name|shortPropertyName
argument_list|(
name|SVNProperty
operator|.
name|WORKING_SIZE
argument_list|)
argument_list|,
name|SVNLog
operator|.
name|WC_WORKING_SIZE
argument_list|)
expr_stmt|;
name|log
operator|.
name|addCommand
argument_list|(
name|SVNLog
operator|.
name|MODIFY_ENTRY
argument_list|,
name|command
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|command
operator|.
name|clear
argument_list|()
expr_stmt|;
block|}
name|reverted
operator||=
name|reinstallWorkingFile
expr_stmt|;
block|}
block|}
if|if
condition|(
name|entry
operator|.
name|getConflictNew
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|command
operator|.
name|put
argument_list|(
name|SVNLog
operator|.
name|NAME_ATTR
argument_list|,
name|entry
operator|.
name|getConflictNew
argument_list|()
argument_list|)
expr_stmt|;
name|log
operator|.
name|addCommand
argument_list|(
name|SVNLog
operator|.
name|DELETE
argument_list|,
name|command
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|command
operator|.
name|clear
argument_list|()
expr_stmt|;
name|newEntryProperties
operator|.
name|put
argument_list|(
name|SVNProperty
operator|.
name|shortPropertyName
argument_list|(
name|SVNProperty
operator|.
name|CONFLICT_NEW
argument_list|)
argument_list|,
operator|(
name|String
operator|)
literal|null
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|reverted
condition|)
block|{
name|reverted
operator||=
name|dir
operator|.
name|getFile
argument_list|(
name|entry
operator|.
name|getConflictNew
argument_list|()
argument_list|)
operator|.
name|exists
argument_list|()
expr_stmt|;
block|}
block|}
if|if
condition|(
name|entry
operator|.
name|getConflictOld
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|command
operator|.
name|put
argument_list|(
name|SVNLog
operator|.
name|NAME_ATTR
argument_list|,
name|entry
operator|.
name|getConflictOld
argument_list|()
argument_list|)
expr_stmt|;
name|log
operator|.
name|addCommand
argument_list|(
name|SVNLog
operator|.
name|DELETE
argument_list|,
name|command
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|command
operator|.
name|clear
argument_list|()
expr_stmt|;
name|newEntryProperties
operator|.
name|put
argument_list|(
name|SVNProperty
operator|.
name|shortPropertyName
argument_list|(
name|SVNProperty
operator|.
name|CONFLICT_OLD
argument_list|)
argument_list|,
operator|(
name|String
operator|)
literal|null
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|reverted
condition|)
block|{
name|reverted
operator||=
name|dir
operator|.
name|getFile
argument_list|(
name|entry
operator|.
name|getConflictOld
argument_list|()
argument_list|)
operator|.
name|exists
argument_list|()
expr_stmt|;
block|}
block|}
if|if
condition|(
name|entry
operator|.
name|getConflictWorking
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|command
operator|.
name|put
argument_list|(
name|SVNLog
operator|.
name|NAME_ATTR
argument_list|,
name|entry
operator|.
name|getConflictWorking
argument_list|()
argument_list|)
expr_stmt|;
name|log
operator|.
name|addCommand
argument_list|(
name|SVNLog
operator|.
name|DELETE
argument_list|,
name|command
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|command
operator|.
name|clear
argument_list|()
expr_stmt|;
name|newEntryProperties
operator|.
name|put
argument_list|(
name|SVNProperty
operator|.
name|shortPropertyName
argument_list|(
name|SVNProperty
operator|.
name|CONFLICT_WRK
argument_list|)
argument_list|,
operator|(
name|String
operator|)
literal|null
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|reverted
condition|)
block|{
name|reverted
operator||=
name|dir
operator|.
name|getFile
argument_list|(
name|entry
operator|.
name|getConflictWorking
argument_list|()
argument_list|)
operator|.
name|exists
argument_list|()
expr_stmt|;
block|}
block|}
if|if
condition|(
name|entry
operator|.
name|getPropRejectFile
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|command
operator|.
name|put
argument_list|(
name|SVNLog
operator|.
name|NAME_ATTR
argument_list|,
name|entry
operator|.
name|getPropRejectFile
argument_list|()
argument_list|)
expr_stmt|;
name|log
operator|.
name|addCommand
argument_list|(
name|SVNLog
operator|.
name|DELETE
argument_list|,
name|command
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|command
operator|.
name|clear
argument_list|()
expr_stmt|;
name|newEntryProperties
operator|.
name|put
argument_list|(
name|SVNProperty
operator|.
name|shortPropertyName
argument_list|(
name|SVNProperty
operator|.
name|PROP_REJECT_FILE
argument_list|)
argument_list|,
operator|(
name|String
operator|)
literal|null
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|reverted
condition|)
block|{
name|reverted
operator||=
name|dir
operator|.
name|getFile
argument_list|(
name|entry
operator|.
name|getPropRejectFile
argument_list|()
argument_list|)
operator|.
name|exists
argument_list|()
expr_stmt|;
block|}
block|}
if|if
condition|(
name|entry
operator|.
name|isScheduledForReplacement
argument_list|()
condition|)
block|{
name|newEntryProperties
operator|.
name|put
argument_list|(
name|SVNProperty
operator|.
name|shortPropertyName
argument_list|(
name|SVNProperty
operator|.
name|COPIED
argument_list|)
argument_list|,
name|SVNProperty
operator|.
name|toString
argument_list|(
literal|false
argument_list|)
argument_list|)
expr_stmt|;
name|newEntryProperties
operator|.
name|put
argument_list|(
name|SVNProperty
operator|.
name|shortPropertyName
argument_list|(
name|SVNProperty
operator|.
name|COPYFROM_URL
argument_list|)
argument_list|,
operator|(
name|String
operator|)
literal|null
argument_list|)
expr_stmt|;
name|newEntryProperties
operator|.
name|put
argument_list|(
name|SVNProperty
operator|.
name|shortPropertyName
argument_list|(
name|SVNProperty
operator|.
name|COPYFROM_REVISION
argument_list|)
argument_list|,
name|SVNProperty
operator|.
name|toString
argument_list|(
name|SVNRepository
operator|.
name|INVALID_REVISION
argument_list|)
argument_list|)
expr_stmt|;
if|if
condition|(
name|entry
operator|.
name|isFile
argument_list|()
operator|&&
name|entry
operator|.
name|getCopyFromURL
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|String
name|basePath
init|=
name|SVNAdminUtil
operator|.
name|getTextRevertPath
argument_list|(
name|name
argument_list|,
literal|false
argument_list|)
decl_stmt|;
name|File
name|baseFile
init|=
name|dir
operator|.
name|getFile
argument_list|(
name|basePath
argument_list|)
decl_stmt|;
name|String
name|digest
init|=
name|SVNFileUtil
operator|.
name|computeChecksum
argument_list|(
name|baseFile
argument_list|)
decl_stmt|;
name|newEntryProperties
operator|.
name|put
argument_list|(
name|SVNProperty
operator|.
name|shortPropertyName
argument_list|(
name|SVNProperty
operator|.
name|CHECKSUM
argument_list|)
argument_list|,
name|digest
argument_list|)
expr_stmt|;
block|}
block|}
if|if
condition|(
name|entry
operator|.
name|getSchedule
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|newEntryProperties
operator|.
name|put
argument_list|(
name|SVNProperty
operator|.
name|shortPropertyName
argument_list|(
name|SVNProperty
operator|.
name|SCHEDULE
argument_list|)
argument_list|,
operator|(
name|String
operator|)
literal|null
argument_list|)
expr_stmt|;
name|reverted
operator|=
literal|true
expr_stmt|;
block|}
if|if
condition|(
operator|!
name|newEntryProperties
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|newEntryProperties
operator|.
name|put
argument_list|(
name|SVNLog
operator|.
name|NAME_ATTR
argument_list|,
name|name
argument_list|)
expr_stmt|;
name|log
operator|.
name|addCommand
argument_list|(
name|SVNLog
operator|.
name|MODIFY_ENTRY
argument_list|,
name|newEntryProperties
argument_list|,
literal|false
argument_list|)
expr_stmt|;
block|}
name|log
operator|.
name|save
argument_list|()
expr_stmt|;
name|dir
operator|.
name|runLogs
argument_list|()
expr_stmt|;
return|return
name|reverted
return|;
block|}
specifier|private
name|void
name|setWCFormat
parameter_list|(
name|SVNAdminAreaInfo
name|info
parameter_list|,
name|SVNAdminArea
name|area
parameter_list|,
name|int
name|format
parameter_list|)
throws|throws
name|SVNException
block|{
if|if
condition|(
operator|!
name|isIgnoreExternals
argument_list|()
condition|)
block|{
name|SVNVersionedProperties
name|props
init|=
name|area
operator|.
name|getProperties
argument_list|(
name|area
operator|.
name|getThisDirName
argument_list|()
argument_list|)
decl_stmt|;
name|SVNVersionedProperties
name|baseProps
init|=
name|area
operator|.
name|getBaseProperties
argument_list|(
name|area
operator|.
name|getThisDirName
argument_list|()
argument_list|)
decl_stmt|;
name|SVNPropertyValue
name|property
init|=
name|props
operator|.
name|getPropertyValue
argument_list|(
name|SVNProperty
operator|.
name|EXTERNALS
argument_list|)
decl_stmt|;
name|SVNPropertyValue
name|baseProperty
init|=
name|baseProps
operator|.
name|getPropertyValue
argument_list|(
name|SVNProperty
operator|.
name|EXTERNALS
argument_list|)
decl_stmt|;
if|if
condition|(
name|property
operator|!=
literal|null
operator|||
name|baseProperty
operator|!=
literal|null
condition|)
block|{
name|String
name|areaPath
init|=
name|area
operator|.
name|getRelativePath
argument_list|(
name|info
operator|.
name|getAnchor
argument_list|()
argument_list|)
decl_stmt|;
name|info
operator|.
name|addExternal
argument_list|(
name|areaPath
argument_list|,
name|property
operator|!=
literal|null
condition|?
name|property
operator|.
name|getString
argument_list|()
else|:
literal|null
argument_list|,
name|baseProperty
operator|!=
literal|null
condition|?
name|baseProperty
operator|.
name|getString
argument_list|()
else|:
literal|null
argument_list|)
expr_stmt|;
block|}
block|}
comment|// re-open this area for writing now!
name|area
operator|.
name|getWCAccess
argument_list|()
operator|.
name|closeAdminArea
argument_list|(
name|area
operator|.
name|getRoot
argument_list|()
argument_list|)
expr_stmt|;
name|area
operator|=
name|area
operator|.
name|getWCAccess
argument_list|()
operator|.
name|open
argument_list|(
name|area
operator|.
name|getRoot
argument_list|()
argument_list|,
literal|true
argument_list|,
literal|false
argument_list|,
literal|false
argument_list|,
literal|0
argument_list|,
name|Level
operator|.
name|FINE
argument_list|)
expr_stmt|;
name|SVNAdminArea
name|newArea
init|=
name|SVNAdminAreaFactory
operator|.
name|changeWCFormat
argument_list|(
name|area
argument_list|,
name|format
argument_list|)
decl_stmt|;
for|for
control|(
name|Iterator
name|entries
init|=
name|newArea
operator|.
name|entries
argument_list|(
literal|false
argument_list|)
init|;
name|entries
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|SVNEntry
name|entry
init|=
operator|(
name|SVNEntry
operator|)
name|entries
operator|.
name|next
argument_list|()
decl_stmt|;
if|if
condition|(
name|entry
operator|.
name|isThisDir
argument_list|()
operator|||
name|entry
operator|.
name|isFile
argument_list|()
condition|)
block|{
continue|continue;
block|}
name|File
name|childDir
init|=
operator|new
name|Resource
argument_list|(
name|newArea
operator|.
name|getRoot
argument_list|()
argument_list|,
name|entry
operator|.
name|getName
argument_list|()
argument_list|)
decl_stmt|;
name|SVNAdminArea
name|childArea
init|=
name|newArea
operator|.
name|getWCAccess
argument_list|()
operator|.
name|getAdminArea
argument_list|(
name|childDir
argument_list|)
decl_stmt|;
if|if
condition|(
name|childArea
operator|!=
literal|null
condition|)
block|{
name|setWCFormat
argument_list|(
name|info
argument_list|,
name|childArea
argument_list|,
name|format
argument_list|)
expr_stmt|;
block|}
block|}
block|}
specifier|private
name|void
name|pushDirInfo
parameter_list|(
name|SVNRepository
name|repos
parameter_list|,
name|SVNRevision
name|rev
parameter_list|,
name|String
name|path
parameter_list|,
name|SVNURL
name|root
parameter_list|,
name|String
name|uuid
parameter_list|,
name|SVNURL
name|url
parameter_list|,
name|Map
name|locks
parameter_list|,
name|SVNDepth
name|depth
parameter_list|,
name|ISVNInfoHandler
name|handler
parameter_list|)
throws|throws
name|SVNException
block|{
name|Collection
name|children
init|=
name|repos
operator|.
name|getDir
argument_list|(
name|path
argument_list|,
name|rev
operator|.
name|getNumber
argument_list|()
argument_list|,
literal|null
argument_list|,
name|SVNDirEntry
operator|.
name|DIRENT_KIND
operator||
name|SVNDirEntry
operator|.
name|DIRENT_CREATED_REVISION
operator||
name|SVNDirEntry
operator|.
name|DIRENT_TIME
operator||
name|SVNDirEntry
operator|.
name|DIRENT_LAST_AUTHOR
argument_list|,
operator|new
name|ArrayList
argument_list|()
argument_list|)
decl_stmt|;
for|for
control|(
name|Iterator
name|ents
init|=
name|children
operator|.
name|iterator
argument_list|()
init|;
name|ents
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|checkCancelled
argument_list|()
expr_stmt|;
name|SVNDirEntry
name|child
init|=
operator|(
name|SVNDirEntry
operator|)
name|ents
operator|.
name|next
argument_list|()
decl_stmt|;
name|SVNURL
name|childURL
init|=
name|url
operator|.
name|appendPath
argument_list|(
name|child
operator|.
name|getName
argument_list|()
argument_list|,
literal|false
argument_list|)
decl_stmt|;
name|String
name|childPath
init|=
name|SVNPathUtil
operator|.
name|append
argument_list|(
name|path
argument_list|,
name|child
operator|.
name|getName
argument_list|()
argument_list|)
decl_stmt|;
name|String
name|displayPath
init|=
name|repos
operator|.
name|getFullPath
argument_list|(
name|childPath
argument_list|)
decl_stmt|;
name|displayPath
operator|=
name|displayPath
operator|.
name|substring
argument_list|(
name|repos
operator|.
name|getLocation
argument_list|()
operator|.
name|getPath
argument_list|()
operator|.
name|length
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|displayPath
operator|.
name|startsWith
argument_list|(
literal|"/"
argument_list|)
condition|)
block|{
name|displayPath
operator|=
name|displayPath
operator|.
name|substring
argument_list|(
literal|1
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
literal|""
operator|.
name|equals
argument_list|(
name|displayPath
argument_list|)
condition|)
block|{
name|displayPath
operator|=
name|path
expr_stmt|;
block|}
name|SVNLock
name|lock
init|=
operator|(
name|SVNLock
operator|)
name|locks
operator|.
name|get
argument_list|(
name|path
argument_list|)
decl_stmt|;
name|SVNInfo
name|info
init|=
name|SVNInfo
operator|.
name|createInfo
argument_list|(
name|displayPath
argument_list|,
name|root
argument_list|,
name|uuid
argument_list|,
name|url
argument_list|,
name|rev
argument_list|,
name|child
argument_list|,
name|lock
argument_list|)
decl_stmt|;
if|if
condition|(
name|depth
operator|.
name|compareTo
argument_list|(
name|SVNDepth
operator|.
name|IMMEDIATES
argument_list|)
operator|>=
literal|0
operator|||
operator|(
name|depth
operator|==
name|SVNDepth
operator|.
name|FILES
operator|&&
name|child
operator|.
name|getKind
argument_list|()
operator|==
name|SVNNodeKind
operator|.
name|FILE
operator|)
condition|)
block|{
name|handler
operator|.
name|handleInfo
argument_list|(
name|info
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|depth
operator|==
name|SVNDepth
operator|.
name|INFINITY
operator|&&
name|child
operator|.
name|getKind
argument_list|()
operator|==
name|SVNNodeKind
operator|.
name|DIR
condition|)
block|{
name|pushDirInfo
argument_list|(
name|repos
argument_list|,
name|rev
argument_list|,
name|SVNPathUtil
operator|.
name|append
argument_list|(
name|path
argument_list|,
name|child
operator|.
name|getName
argument_list|()
argument_list|)
argument_list|,
name|root
argument_list|,
name|uuid
argument_list|,
name|childURL
argument_list|,
name|locks
argument_list|,
name|depth
argument_list|,
name|handler
argument_list|)
expr_stmt|;
block|}
block|}
block|}
specifier|private
name|void
name|doGetRemoteProperty
parameter_list|(
name|SVNURL
name|url
parameter_list|,
name|String
name|path
parameter_list|,
name|SVNRepository
name|repos
parameter_list|,
name|String
name|propName
parameter_list|,
name|SVNRevision
name|rev
parameter_list|,
name|SVNDepth
name|depth
parameter_list|,
name|ISVNPropertyHandler
name|handler
parameter_list|)
throws|throws
name|SVNException
block|{
name|checkCancelled
argument_list|()
expr_stmt|;
name|long
name|revNumber
init|=
name|getRevisionNumber
argument_list|(
name|rev
argument_list|,
name|repos
argument_list|,
literal|null
argument_list|)
decl_stmt|;
name|SVNNodeKind
name|kind
init|=
name|repos
operator|.
name|checkPath
argument_list|(
name|path
argument_list|,
name|revNumber
argument_list|)
decl_stmt|;
name|SVNProperties
name|props
init|=
operator|new
name|SVNProperties
argument_list|()
decl_stmt|;
if|if
condition|(
name|kind
operator|==
name|SVNNodeKind
operator|.
name|DIR
condition|)
block|{
name|Collection
name|children
init|=
name|repos
operator|.
name|getDir
argument_list|(
name|path
argument_list|,
name|revNumber
argument_list|,
name|props
argument_list|,
name|SVNDirEntry
operator|.
name|DIRENT_KIND
argument_list|,
name|SVNDepth
operator|.
name|FILES
operator|.
name|compareTo
argument_list|(
name|depth
argument_list|)
operator|<=
literal|0
condition|?
operator|new
name|ArrayList
argument_list|()
else|:
literal|null
argument_list|)
decl_stmt|;
if|if
condition|(
name|propName
operator|!=
literal|null
condition|)
block|{
name|SVNPropertyValue
name|value
init|=
name|props
operator|.
name|getSVNPropertyValue
argument_list|(
name|propName
argument_list|)
decl_stmt|;
if|if
condition|(
name|value
operator|!=
literal|null
condition|)
block|{
name|handler
operator|.
name|handleProperty
argument_list|(
name|url
argument_list|,
operator|new
name|SVNPropertyData
argument_list|(
name|propName
argument_list|,
name|value
argument_list|,
name|getOptions
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
else|else
block|{
for|for
control|(
name|Iterator
name|names
init|=
name|props
operator|.
name|nameSet
argument_list|()
operator|.
name|iterator
argument_list|()
init|;
name|names
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|String
name|name
init|=
operator|(
name|String
operator|)
name|names
operator|.
name|next
argument_list|()
decl_stmt|;
if|if
condition|(
name|name
operator|.
name|startsWith
argument_list|(
name|SVNProperty
operator|.
name|SVN_ENTRY_PREFIX
argument_list|)
operator|||
name|name
operator|.
name|startsWith
argument_list|(
name|SVNProperty
operator|.
name|SVN_WC_PREFIX
argument_list|)
condition|)
block|{
continue|continue;
block|}
name|SVNPropertyValue
name|value
init|=
name|props
operator|.
name|getSVNPropertyValue
argument_list|(
name|name
argument_list|)
decl_stmt|;
name|handler
operator|.
name|handleProperty
argument_list|(
name|url
argument_list|,
operator|new
name|SVNPropertyData
argument_list|(
name|name
argument_list|,
name|value
argument_list|,
name|getOptions
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
if|if
condition|(
name|SVNDepth
operator|.
name|FILES
operator|.
name|compareTo
argument_list|(
name|depth
argument_list|)
operator|<=
literal|0
condition|)
block|{
name|checkCancelled
argument_list|()
expr_stmt|;
for|for
control|(
name|Iterator
name|entries
init|=
name|children
operator|.
name|iterator
argument_list|()
init|;
name|entries
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|SVNDirEntry
name|child
init|=
operator|(
name|SVNDirEntry
operator|)
name|entries
operator|.
name|next
argument_list|()
decl_stmt|;
name|SVNURL
name|childURL
init|=
name|url
operator|.
name|appendPath
argument_list|(
name|child
operator|.
name|getName
argument_list|()
argument_list|,
literal|false
argument_list|)
decl_stmt|;
name|String
name|childPath
init|=
literal|""
operator|.
name|equals
argument_list|(
name|path
argument_list|)
condition|?
name|child
operator|.
name|getName
argument_list|()
else|:
name|SVNPathUtil
operator|.
name|append
argument_list|(
name|path
argument_list|,
name|child
operator|.
name|getName
argument_list|()
argument_list|)
decl_stmt|;
name|SVNDepth
name|depthBelowHere
init|=
name|depth
decl_stmt|;
if|if
condition|(
name|child
operator|.
name|getKind
argument_list|()
operator|==
name|SVNNodeKind
operator|.
name|DIR
operator|&&
name|depth
operator|==
name|SVNDepth
operator|.
name|FILES
condition|)
block|{
continue|continue;
block|}
if|if
condition|(
name|depth
operator|==
name|SVNDepth
operator|.
name|FILES
operator|||
name|depth
operator|==
name|SVNDepth
operator|.
name|IMMEDIATES
condition|)
block|{
name|depthBelowHere
operator|=
name|SVNDepth
operator|.
name|EMPTY
expr_stmt|;
block|}
name|doGetRemoteProperty
argument_list|(
name|childURL
argument_list|,
name|childPath
argument_list|,
name|repos
argument_list|,
name|propName
argument_list|,
name|rev
argument_list|,
name|depthBelowHere
argument_list|,
name|handler
argument_list|)
expr_stmt|;
block|}
block|}
block|}
if|else if
condition|(
name|kind
operator|==
name|SVNNodeKind
operator|.
name|FILE
condition|)
block|{
name|repos
operator|.
name|getFile
argument_list|(
name|path
argument_list|,
name|revNumber
argument_list|,
name|props
argument_list|,
literal|null
argument_list|)
expr_stmt|;
if|if
condition|(
name|propName
operator|!=
literal|null
condition|)
block|{
name|SVNPropertyValue
name|value
init|=
name|props
operator|.
name|getSVNPropertyValue
argument_list|(
name|propName
argument_list|)
decl_stmt|;
if|if
condition|(
name|value
operator|!=
literal|null
condition|)
block|{
name|handler
operator|.
name|handleProperty
argument_list|(
name|url
argument_list|,
operator|new
name|SVNPropertyData
argument_list|(
name|propName
argument_list|,
name|value
argument_list|,
name|getOptions
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
else|else
block|{
for|for
control|(
name|Iterator
name|names
init|=
name|props
operator|.
name|nameSet
argument_list|()
operator|.
name|iterator
argument_list|()
init|;
name|names
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|String
name|name
init|=
operator|(
name|String
operator|)
name|names
operator|.
name|next
argument_list|()
decl_stmt|;
if|if
condition|(
name|name
operator|.
name|startsWith
argument_list|(
name|SVNProperty
operator|.
name|SVN_ENTRY_PREFIX
argument_list|)
operator|||
name|name
operator|.
name|startsWith
argument_list|(
name|SVNProperty
operator|.
name|SVN_WC_PREFIX
argument_list|)
condition|)
block|{
continue|continue;
block|}
name|SVNPropertyValue
name|value
init|=
name|props
operator|.
name|getSVNPropertyValue
argument_list|(
name|name
argument_list|)
decl_stmt|;
name|handler
operator|.
name|handleProperty
argument_list|(
name|url
argument_list|,
operator|new
name|SVNPropertyData
argument_list|(
name|name
argument_list|,
name|value
argument_list|,
name|getOptions
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
block|}
if|else if
condition|(
name|kind
operator|==
name|SVNNodeKind
operator|.
name|NONE
condition|)
block|{
name|SVNErrorMessage
name|err
init|=
name|SVNErrorMessage
operator|.
name|create
argument_list|(
name|SVNErrorCode
operator|.
name|ENTRY_NOT_FOUND
argument_list|,
literal|"''{0}'' does not exist in revision {1}"
argument_list|,
operator|new
name|Object
index|[]
block|{
name|path
block|,
name|String
operator|.
name|valueOf
argument_list|(
name|revNumber
argument_list|)
block|}
argument_list|)
decl_stmt|;
name|SVNErrorManager
operator|.
name|error
argument_list|(
name|err
argument_list|,
name|SVNLogType
operator|.
name|WC
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|SVNErrorMessage
name|err
init|=
name|SVNErrorMessage
operator|.
name|create
argument_list|(
name|SVNErrorCode
operator|.
name|NODE_UNKNOWN_KIND
argument_list|,
literal|"Unknown node kind for ''{0}''"
argument_list|,
name|path
argument_list|)
decl_stmt|;
name|SVNErrorManager
operator|.
name|error
argument_list|(
name|err
argument_list|,
name|SVNLogType
operator|.
name|WC
argument_list|)
expr_stmt|;
block|}
block|}
specifier|private
name|void
name|doGetLocalProperty
parameter_list|(
name|SVNEntry
name|entry
parameter_list|,
name|SVNAdminArea
name|area
parameter_list|,
name|String
name|propName
parameter_list|,
name|boolean
name|base
parameter_list|,
name|ISVNPropertyHandler
name|handler
parameter_list|,
name|SVNDepth
name|depth
parameter_list|,
name|Collection
name|changeLists
parameter_list|)
throws|throws
name|SVNException
block|{
if|if
condition|(
name|depth
operator|==
literal|null
operator|||
name|depth
operator|==
name|SVNDepth
operator|.
name|UNKNOWN
condition|)
block|{
name|depth
operator|=
name|SVNDepth
operator|.
name|EMPTY
expr_stmt|;
block|}
name|File
name|target
init|=
name|area
operator|.
name|getFile
argument_list|(
name|entry
operator|.
name|getName
argument_list|()
argument_list|)
decl_stmt|;
name|SVNWCAccess
name|wcAccess
init|=
name|area
operator|.
name|getWCAccess
argument_list|()
decl_stmt|;
name|ISVNEntryHandler
name|propGetHandler
init|=
operator|new
name|PropFetchHandler
argument_list|(
name|changeLists
argument_list|,
name|propName
argument_list|,
name|handler
argument_list|,
name|base
argument_list|)
decl_stmt|;
if|if
condition|(
name|SVNDepth
operator|.
name|FILES
operator|.
name|compareTo
argument_list|(
name|depth
argument_list|)
operator|<=
literal|0
operator|&&
name|entry
operator|.
name|isDirectory
argument_list|()
condition|)
block|{
name|wcAccess
operator|.
name|walkEntries
argument_list|(
name|target
argument_list|,
name|propGetHandler
argument_list|,
literal|false
argument_list|,
name|depth
argument_list|)
expr_stmt|;
block|}
if|else if
condition|(
name|SVNWCAccess
operator|.
name|matchesChangeList
argument_list|(
name|changeLists
argument_list|,
name|entry
argument_list|)
condition|)
block|{
if|if
condition|(
name|propName
operator|==
literal|null
condition|)
block|{
comment|//proplist hack for compatibility with subvsersion
name|SVNVersionedProperties
name|properties
init|=
name|base
condition|?
name|area
operator|.
name|getBaseProperties
argument_list|(
name|entry
operator|.
name|getName
argument_list|()
argument_list|)
else|:
name|area
operator|.
name|getProperties
argument_list|(
name|entry
operator|.
name|getName
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|propName
operator|!=
literal|null
condition|)
block|{
name|SVNPropertyValue
name|propValue
init|=
name|properties
operator|.
name|getPropertyValue
argument_list|(
name|propName
argument_list|)
decl_stmt|;
if|if
condition|(
name|propValue
operator|!=
literal|null
condition|)
block|{
name|handler
operator|.
name|handleProperty
argument_list|(
name|target
argument_list|,
operator|new
name|SVNPropertyData
argument_list|(
name|propName
argument_list|,
name|propValue
argument_list|,
name|getOptions
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
else|else
block|{
name|SVNProperties
name|allProps
init|=
name|properties
operator|.
name|asMap
argument_list|()
decl_stmt|;
for|for
control|(
name|Iterator
name|names
init|=
name|allProps
operator|.
name|nameSet
argument_list|()
operator|.
name|iterator
argument_list|()
init|;
name|names
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|String
name|name
init|=
operator|(
name|String
operator|)
name|names
operator|.
name|next
argument_list|()
decl_stmt|;
name|SVNPropertyValue
name|val
init|=
name|allProps
operator|.
name|getSVNPropertyValue
argument_list|(
name|name
argument_list|)
decl_stmt|;
name|handler
operator|.
name|handleProperty
argument_list|(
name|area
operator|.
name|getFile
argument_list|(
name|entry
operator|.
name|getName
argument_list|()
argument_list|)
argument_list|,
operator|new
name|SVNPropertyData
argument_list|(
name|name
argument_list|,
name|val
argument_list|,
name|getOptions
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
block|}
else|else
block|{
name|propGetHandler
operator|.
name|handleEntry
argument_list|(
name|target
argument_list|,
name|entry
argument_list|)
expr_stmt|;
block|}
block|}
block|}
specifier|private
name|void
name|setLocalProperties
parameter_list|(
name|File
name|path
parameter_list|,
name|SVNEntry
name|entry
parameter_list|,
name|SVNAdminArea
name|adminArea
parameter_list|,
name|boolean
name|force
parameter_list|,
name|ISVNPropertyValueProvider
name|propertyValueProvider
parameter_list|,
name|ISVNPropertyHandler
name|handler
parameter_list|)
throws|throws
name|SVNException
block|{
name|SVNVersionedProperties
name|entryProperties
init|=
name|adminArea
operator|.
name|getProperties
argument_list|(
name|entry
operator|.
name|getName
argument_list|()
argument_list|)
decl_stmt|;
name|SVNProperties
name|properties
init|=
name|entryProperties
operator|.
name|asMap
argument_list|()
decl_stmt|;
name|SVNProperties
name|unmodifiableProperties
init|=
name|SVNProperties
operator|.
name|unmodifiableProperties
argument_list|(
name|properties
argument_list|)
decl_stmt|;
name|SVNProperties
name|changedProperties
init|=
name|propertyValueProvider
operator|.
name|providePropertyValues
argument_list|(
name|path
argument_list|,
name|unmodifiableProperties
argument_list|)
decl_stmt|;
name|SVNProperties
name|propDiff
init|=
name|properties
operator|.
name|compareTo
argument_list|(
name|changedProperties
argument_list|)
decl_stmt|;
for|for
control|(
name|Iterator
name|iterator
init|=
name|propDiff
operator|.
name|nameSet
argument_list|()
operator|.
name|iterator
argument_list|()
init|;
name|iterator
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|String
name|propName
init|=
operator|(
name|String
operator|)
name|iterator
operator|.
name|next
argument_list|()
decl_stmt|;
name|SVNPropertyValue
name|propValue
init|=
name|propDiff
operator|.
name|getSVNPropertyValue
argument_list|(
name|propName
argument_list|)
decl_stmt|;
if|if
condition|(
name|propValue
operator|!=
literal|null
operator|&&
operator|!
name|SVNPropertiesManager
operator|.
name|isValidPropertyName
argument_list|(
name|propName
argument_list|)
condition|)
block|{
name|SVNErrorMessage
name|err
init|=
name|SVNErrorMessage
operator|.
name|create
argument_list|(
name|SVNErrorCode
operator|.
name|CLIENT_PROPERTY_NAME
argument_list|,
literal|"Bad property name ''{0}''"
argument_list|,
name|propName
argument_list|)
decl_stmt|;
name|SVNErrorManager
operator|.
name|error
argument_list|(
name|err
argument_list|,
name|SVNLogType
operator|.
name|WC
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|SVNRevisionProperty
operator|.
name|isRevisionProperty
argument_list|(
name|propName
argument_list|)
condition|)
block|{
name|SVNErrorMessage
name|err
init|=
name|SVNErrorMessage
operator|.
name|create
argument_list|(
name|SVNErrorCode
operator|.
name|CLIENT_PROPERTY_NAME
argument_list|,
literal|"Revision property ''{0}'' not allowed in this context"
argument_list|,
name|propName
argument_list|)
decl_stmt|;
name|SVNErrorManager
operator|.
name|error
argument_list|(
name|err
argument_list|,
name|SVNLogType
operator|.
name|WC
argument_list|)
expr_stmt|;
block|}
if|else if
condition|(
name|SVNProperty
operator|.
name|isWorkingCopyProperty
argument_list|(
name|propName
argument_list|)
condition|)
block|{
name|SVNErrorMessage
name|err
init|=
name|SVNErrorMessage
operator|.
name|create
argument_list|(
name|SVNErrorCode
operator|.
name|CLIENT_PROPERTY_NAME
argument_list|,
literal|"''{0}'' is a wcprop, thus not accessible to clients"
argument_list|,
name|propName
argument_list|)
decl_stmt|;
name|SVNErrorManager
operator|.
name|error
argument_list|(
name|err
argument_list|,
name|SVNLogType
operator|.
name|WC
argument_list|)
expr_stmt|;
block|}
if|else if
condition|(
name|SVNProperty
operator|.
name|isEntryProperty
argument_list|(
name|propName
argument_list|)
condition|)
block|{
name|SVNErrorMessage
name|err
init|=
name|SVNErrorMessage
operator|.
name|create
argument_list|(
name|SVNErrorCode
operator|.
name|CLIENT_PROPERTY_NAME
argument_list|,
literal|"Property ''{0}'' is an entry property"
argument_list|,
name|propName
argument_list|)
decl_stmt|;
name|SVNErrorManager
operator|.
name|error
argument_list|(
name|err
argument_list|,
name|SVNLogType
operator|.
name|WC
argument_list|)
expr_stmt|;
block|}
try|try
block|{
name|boolean
name|modified
init|=
name|SVNPropertiesManager
operator|.
name|setProperty
argument_list|(
name|adminArea
operator|.
name|getWCAccess
argument_list|()
argument_list|,
name|path
argument_list|,
name|propName
argument_list|,
name|propValue
argument_list|,
name|force
argument_list|)
decl_stmt|;
if|if
condition|(
name|modified
operator|&&
name|handler
operator|!=
literal|null
condition|)
block|{
name|handler
operator|.
name|handleProperty
argument_list|(
name|path
argument_list|,
operator|new
name|SVNPropertyData
argument_list|(
name|propName
argument_list|,
name|propValue
argument_list|,
name|getOptions
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
name|SVNException
name|svne
parameter_list|)
block|{
if|if
condition|(
name|svne
operator|.
name|getErrorMessage
argument_list|()
operator|.
name|getErrorCode
argument_list|()
operator|!=
name|SVNErrorCode
operator|.
name|ILLEGAL_TARGET
condition|)
block|{
throw|throw
name|svne
throw|;
block|}
block|}
block|}
block|}
specifier|private
name|Map
name|fetchLockTokens
parameter_list|(
name|SVNRepository
name|repository
parameter_list|,
name|Map
name|pathsTokensMap
parameter_list|)
throws|throws
name|SVNException
block|{
name|Map
name|tokens
init|=
operator|new
name|SVNHashMap
argument_list|()
decl_stmt|;
for|for
control|(
name|Iterator
name|paths
init|=
name|pathsTokensMap
operator|.
name|keySet
argument_list|()
operator|.
name|iterator
argument_list|()
init|;
name|paths
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|String
name|path
init|=
operator|(
name|String
operator|)
name|paths
operator|.
name|next
argument_list|()
decl_stmt|;
name|SVNLock
name|lock
init|=
name|repository
operator|.
name|getLock
argument_list|(
name|path
argument_list|)
decl_stmt|;
if|if
condition|(
name|lock
operator|==
literal|null
operator|||
name|lock
operator|.
name|getID
argument_list|()
operator|==
literal|null
condition|)
block|{
name|SVNErrorMessage
name|err
init|=
name|SVNErrorMessage
operator|.
name|create
argument_list|(
name|SVNErrorCode
operator|.
name|CLIENT_MISSING_LOCK_TOKEN
argument_list|,
literal|"''{0}'' is not locked"
argument_list|,
name|path
argument_list|)
decl_stmt|;
name|SVNErrorManager
operator|.
name|error
argument_list|(
name|err
argument_list|,
name|SVNLogType
operator|.
name|WC
argument_list|)
expr_stmt|;
continue|continue;
block|}
name|tokens
operator|.
name|put
argument_list|(
name|path
argument_list|,
name|lock
operator|.
name|getID
argument_list|()
argument_list|)
expr_stmt|;
block|}
return|return
name|tokens
return|;
block|}
specifier|private
name|void
name|doGetLocalFileContents
parameter_list|(
name|File
name|path
parameter_list|,
name|OutputStream
name|dst
parameter_list|,
name|SVNRevision
name|revision
parameter_list|,
name|boolean
name|expandKeywords
parameter_list|)
throws|throws
name|SVNException
block|{
name|SVNWCAccess
name|wcAccess
init|=
name|createWCAccess
argument_list|()
decl_stmt|;
name|InputStream
name|input
init|=
literal|null
decl_stmt|;
name|boolean
name|hasMods
init|=
literal|false
decl_stmt|;
name|SVNVersionedProperties
name|properties
init|=
literal|null
decl_stmt|;
try|try
block|{
name|SVNAdminArea
name|area
init|=
name|wcAccess
operator|.
name|open
argument_list|(
name|path
operator|.
name|getParentFile
argument_list|()
argument_list|,
literal|false
argument_list|,
literal|0
argument_list|)
decl_stmt|;
name|SVNEntry
name|entry
init|=
name|wcAccess
operator|.
name|getVersionedEntry
argument_list|(
name|path
argument_list|,
literal|false
argument_list|)
decl_stmt|;
if|if
condition|(
name|entry
operator|.
name|getKind
argument_list|()
operator|!=
name|SVNNodeKind
operator|.
name|FILE
condition|)
block|{
name|SVNErrorMessage
name|err
init|=
name|SVNErrorMessage
operator|.
name|create
argument_list|(
name|SVNErrorCode
operator|.
name|UNVERSIONED_RESOURCE
argument_list|,
literal|"''{0}'' refers to a directory"
argument_list|,
name|path
argument_list|)
decl_stmt|;
name|SVNErrorManager
operator|.
name|error
argument_list|(
name|err
argument_list|,
name|SVNLogType
operator|.
name|WC
argument_list|)
expr_stmt|;
block|}
name|String
name|name
init|=
name|path
operator|.
name|getName
argument_list|()
decl_stmt|;
if|if
condition|(
name|revision
operator|!=
name|SVNRevision
operator|.
name|WORKING
condition|)
block|{
comment|// get base version and base props.
name|input
operator|=
name|area
operator|.
name|getBaseFileForReading
argument_list|(
name|name
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|properties
operator|=
name|area
operator|.
name|getBaseProperties
argument_list|(
name|name
argument_list|)
expr_stmt|;
block|}
else|else
block|{
comment|// get working version and working props.
name|input
operator|=
name|SVNFileUtil
operator|.
name|openFileForReading
argument_list|(
name|area
operator|.
name|getFile
argument_list|(
name|path
operator|.
name|getName
argument_list|()
argument_list|)
argument_list|,
name|SVNLogType
operator|.
name|WC
argument_list|)
expr_stmt|;
name|hasMods
operator|=
name|area
operator|.
name|hasPropModifications
argument_list|(
name|name
argument_list|)
operator|||
name|area
operator|.
name|hasTextModifications
argument_list|(
name|name
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|properties
operator|=
name|area
operator|.
name|getProperties
argument_list|(
name|name
argument_list|)
expr_stmt|;
block|}
name|String
name|charsetProp
init|=
name|properties
operator|.
name|getStringPropertyValue
argument_list|(
name|SVNProperty
operator|.
name|CHARSET
argument_list|)
decl_stmt|;
name|String
name|eolStyle
init|=
name|properties
operator|.
name|getStringPropertyValue
argument_list|(
name|SVNProperty
operator|.
name|EOL_STYLE
argument_list|)
decl_stmt|;
name|String
name|keywords
init|=
name|properties
operator|.
name|getStringPropertyValue
argument_list|(
name|SVNProperty
operator|.
name|KEYWORDS
argument_list|)
decl_stmt|;
name|boolean
name|special
init|=
name|properties
operator|.
name|getPropertyValue
argument_list|(
name|SVNProperty
operator|.
name|SPECIAL
argument_list|)
operator|!=
literal|null
decl_stmt|;
name|byte
index|[]
name|eols
init|=
literal|null
decl_stmt|;
name|Map
name|keywordsMap
init|=
literal|null
decl_stmt|;
name|String
name|time
init|=
literal|null
decl_stmt|;
name|String
name|charset
init|=
name|SVNTranslator
operator|.
name|getCharset
argument_list|(
name|charsetProp
argument_list|,
name|path
operator|.
name|getPath
argument_list|()
argument_list|,
name|getOptions
argument_list|()
argument_list|)
decl_stmt|;
name|eols
operator|=
name|SVNTranslator
operator|.
name|getEOL
argument_list|(
name|eolStyle
argument_list|,
name|getOptions
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|hasMods
operator|&&
operator|!
name|special
condition|)
block|{
name|time
operator|=
name|SVNDate
operator|.
name|formatDate
argument_list|(
operator|new
name|Date
argument_list|(
name|path
operator|.
name|lastModified
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|time
operator|=
name|entry
operator|.
name|getCommittedDate
argument_list|()
expr_stmt|;
block|}
if|if
condition|(
name|keywords
operator|!=
literal|null
condition|)
block|{
name|String
name|url
init|=
name|entry
operator|.
name|getURL
argument_list|()
decl_stmt|;
name|String
name|author
init|=
name|hasMods
condition|?
literal|"(local)"
else|:
name|entry
operator|.
name|getAuthor
argument_list|()
decl_stmt|;
name|String
name|rev
init|=
name|hasMods
condition|?
name|entry
operator|.
name|getCommittedRevision
argument_list|()
operator|+
literal|"M"
else|:
name|entry
operator|.
name|getCommittedRevision
argument_list|()
operator|+
literal|""
decl_stmt|;
name|keywordsMap
operator|=
name|SVNTranslator
operator|.
name|computeKeywords
argument_list|(
name|keywords
argument_list|,
name|expandKeywords
condition|?
name|url
else|:
literal|null
argument_list|,
name|author
argument_list|,
name|time
argument_list|,
name|rev
argument_list|,
name|getOptions
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|OutputStream
name|translatingStream
init|=
name|charset
operator|!=
literal|null
operator|||
name|eols
operator|!=
literal|null
operator|||
name|keywordsMap
operator|!=
literal|null
condition|?
name|SVNTranslator
operator|.
name|getTranslatingOutputStream
argument_list|(
name|dst
argument_list|,
name|charset
argument_list|,
name|eols
argument_list|,
literal|false
argument_list|,
name|keywordsMap
argument_list|,
name|expandKeywords
argument_list|)
else|:
name|dst
decl_stmt|;
try|try
block|{
name|SVNTranslator
operator|.
name|copy
argument_list|(
name|input
argument_list|,
operator|new
name|SVNCancellableOutputStream
argument_list|(
name|translatingStream
argument_list|,
name|getEventDispatcher
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
if|if
condition|(
name|translatingStream
operator|!=
name|dst
condition|)
block|{
name|SVNFileUtil
operator|.
name|closeFile
argument_list|(
name|translatingStream
argument_list|)
expr_stmt|;
block|}
name|dst
operator|.
name|flush
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOExceptionWrapper
name|ioew
parameter_list|)
block|{
throw|throw
name|ioew
operator|.
name|getOriginalException
argument_list|()
throw|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
if|if
condition|(
name|e
operator|instanceof
name|SVNCancellableOutputStream
operator|.
name|IOCancelException
condition|)
block|{
name|SVNErrorManager
operator|.
name|cancel
argument_list|(
name|e
operator|.
name|getMessage
argument_list|()
argument_list|,
name|SVNLogType
operator|.
name|NETWORK
argument_list|)
expr_stmt|;
block|}
name|SVNErrorManager
operator|.
name|error
argument_list|(
name|SVNErrorMessage
operator|.
name|create
argument_list|(
name|SVNErrorCode
operator|.
name|IO_ERROR
argument_list|,
name|e
operator|.
name|getMessage
argument_list|()
argument_list|)
argument_list|,
name|SVNLogType
operator|.
name|WC
argument_list|)
expr_stmt|;
block|}
block|}
finally|finally
block|{
name|SVNFileUtil
operator|.
name|closeFile
argument_list|(
name|input
argument_list|)
expr_stmt|;
name|wcAccess
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
block|}
specifier|private
specifier|static
class|class
name|LockInfo
block|{
specifier|public
name|LockInfo
parameter_list|(
name|File
name|file
parameter_list|,
name|SVNRevision
name|rev
parameter_list|)
block|{
name|myFile
operator|=
name|file
expr_stmt|;
name|myRevision
operator|=
name|rev
expr_stmt|;
block|}
specifier|public
name|LockInfo
parameter_list|(
name|File
name|file
parameter_list|,
name|String
name|token
parameter_list|)
block|{
name|myFile
operator|=
name|file
expr_stmt|;
name|myToken
operator|=
name|token
expr_stmt|;
block|}
specifier|private
name|File
name|myFile
decl_stmt|;
specifier|private
name|SVNRevision
name|myRevision
decl_stmt|;
specifier|private
name|String
name|myToken
decl_stmt|;
block|}
specifier|private
class|class
name|PropSetHandler
implements|implements
name|ISVNEntryHandler
block|{
specifier|private
name|boolean
name|myIsForce
decl_stmt|;
specifier|private
name|String
name|myPropName
decl_stmt|;
specifier|private
name|SVNPropertyValue
name|myPropValue
decl_stmt|;
specifier|private
name|ISVNPropertyHandler
name|myPropHandler
decl_stmt|;
specifier|private
name|Collection
name|myChangeLists
decl_stmt|;
specifier|public
name|PropSetHandler
parameter_list|(
name|boolean
name|isForce
parameter_list|,
name|String
name|propName
parameter_list|,
name|SVNPropertyValue
name|propValue
parameter_list|,
name|ISVNPropertyHandler
name|handler
parameter_list|,
name|Collection
name|changeLists
parameter_list|)
block|{
name|myIsForce
operator|=
name|isForce
expr_stmt|;
name|myPropName
operator|=
name|propName
expr_stmt|;
name|myPropValue
operator|=
name|propValue
expr_stmt|;
name|myPropHandler
operator|=
name|handler
expr_stmt|;
name|myChangeLists
operator|=
name|changeLists
expr_stmt|;
block|}
specifier|public
name|void
name|handleEntry
parameter_list|(
name|File
name|path
parameter_list|,
name|SVNEntry
name|entry
parameter_list|)
throws|throws
name|SVNException
block|{
name|SVNAdminArea
name|adminArea
init|=
name|entry
operator|.
name|getAdminArea
argument_list|()
decl_stmt|;
if|if
condition|(
name|entry
operator|.
name|isDirectory
argument_list|()
operator|&&
operator|!
name|adminArea
operator|.
name|getThisDirName
argument_list|()
operator|.
name|equals
argument_list|(
name|entry
operator|.
name|getName
argument_list|()
argument_list|)
condition|)
block|{
return|return;
block|}
if|if
condition|(
name|entry
operator|.
name|isScheduledForDeletion
argument_list|()
condition|)
block|{
return|return;
block|}
if|if
condition|(
operator|!
name|SVNWCAccess
operator|.
name|matchesChangeList
argument_list|(
name|myChangeLists
argument_list|,
name|entry
argument_list|)
condition|)
block|{
return|return;
block|}
try|try
block|{
name|boolean
name|modified
init|=
name|SVNPropertiesManager
operator|.
name|setProperty
argument_list|(
name|adminArea
operator|.
name|getWCAccess
argument_list|()
argument_list|,
name|path
argument_list|,
name|myPropName
argument_list|,
name|myPropValue
argument_list|,
name|myIsForce
argument_list|)
decl_stmt|;
if|if
condition|(
name|modified
operator|&&
name|myPropHandler
operator|!=
literal|null
condition|)
block|{
name|myPropHandler
operator|.
name|handleProperty
argument_list|(
name|path
argument_list|,
operator|new
name|SVNPropertyData
argument_list|(
name|myPropName
argument_list|,
name|myPropValue
argument_list|,
name|getOptions
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
name|SVNException
name|svne
parameter_list|)
block|{
if|if
condition|(
name|svne
operator|.
name|getErrorMessage
argument_list|()
operator|.
name|getErrorCode
argument_list|()
operator|!=
name|SVNErrorCode
operator|.
name|ILLEGAL_TARGET
condition|)
block|{
throw|throw
name|svne
throw|;
block|}
block|}
block|}
specifier|public
name|void
name|handleError
parameter_list|(
name|File
name|path
parameter_list|,
name|SVNErrorMessage
name|error
parameter_list|)
throws|throws
name|SVNException
block|{
name|SVNErrorManager
operator|.
name|error
argument_list|(
name|error
argument_list|,
name|SVNLogType
operator|.
name|WC
argument_list|)
expr_stmt|;
block|}
block|}
specifier|private
class|class
name|PropSetHandlerExt
implements|implements
name|ISVNEntryHandler
block|{
specifier|private
name|boolean
name|myIsForce
decl_stmt|;
specifier|private
name|ISVNPropertyValueProvider
name|myPropValueProvider
decl_stmt|;
specifier|private
name|ISVNPropertyHandler
name|myPropHandler
decl_stmt|;
specifier|private
name|Collection
name|myChangeLists
decl_stmt|;
specifier|public
name|PropSetHandlerExt
parameter_list|(
name|boolean
name|isForce
parameter_list|,
name|ISVNPropertyValueProvider
name|propertyValueProvider
parameter_list|,
name|ISVNPropertyHandler
name|handler
parameter_list|,
name|Collection
name|changeLists
parameter_list|)
block|{
name|myIsForce
operator|=
name|isForce
expr_stmt|;
name|myPropValueProvider
operator|=
name|propertyValueProvider
expr_stmt|;
name|myPropHandler
operator|=
name|handler
expr_stmt|;
name|myChangeLists
operator|=
name|changeLists
expr_stmt|;
block|}
specifier|public
name|void
name|handleEntry
parameter_list|(
name|File
name|path
parameter_list|,
name|SVNEntry
name|entry
parameter_list|)
throws|throws
name|SVNException
block|{
name|SVNAdminArea
name|adminArea
init|=
name|entry
operator|.
name|getAdminArea
argument_list|()
decl_stmt|;
if|if
condition|(
name|entry
operator|.
name|isDirectory
argument_list|()
operator|&&
operator|!
name|adminArea
operator|.
name|getThisDirName
argument_list|()
operator|.
name|equals
argument_list|(
name|entry
operator|.
name|getName
argument_list|()
argument_list|)
condition|)
block|{
return|return;
block|}
if|if
condition|(
name|entry
operator|.
name|isScheduledForDeletion
argument_list|()
condition|)
block|{
return|return;
block|}
if|if
condition|(
operator|!
name|SVNWCAccess
operator|.
name|matchesChangeList
argument_list|(
name|myChangeLists
argument_list|,
name|entry
argument_list|)
condition|)
block|{
return|return;
block|}
name|setLocalProperties
argument_list|(
name|path
argument_list|,
name|entry
argument_list|,
name|adminArea
argument_list|,
name|myIsForce
argument_list|,
name|myPropValueProvider
argument_list|,
name|myPropHandler
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|handleError
parameter_list|(
name|File
name|path
parameter_list|,
name|SVNErrorMessage
name|error
parameter_list|)
throws|throws
name|SVNException
block|{
name|SVNErrorManager
operator|.
name|error
argument_list|(
name|error
argument_list|,
name|SVNLogType
operator|.
name|WC
argument_list|)
expr_stmt|;
block|}
block|}
specifier|private
class|class
name|PropFetchHandler
implements|implements
name|ISVNEntryHandler
block|{
specifier|private
name|Collection
name|myChangeLists
decl_stmt|;
specifier|private
name|boolean
name|myIsPristine
decl_stmt|;
specifier|private
name|String
name|myPropName
decl_stmt|;
specifier|private
name|ISVNPropertyHandler
name|myPropHandler
decl_stmt|;
specifier|public
name|PropFetchHandler
parameter_list|(
name|Collection
name|changeLists
parameter_list|,
name|String
name|propName
parameter_list|,
name|ISVNPropertyHandler
name|handler
parameter_list|,
name|boolean
name|pristine
parameter_list|)
block|{
name|myChangeLists
operator|=
name|changeLists
expr_stmt|;
name|myIsPristine
operator|=
name|pristine
expr_stmt|;
name|myPropName
operator|=
name|propName
expr_stmt|;
name|myPropHandler
operator|=
name|handler
expr_stmt|;
block|}
specifier|public
name|void
name|handleEntry
parameter_list|(
name|File
name|path
parameter_list|,
name|SVNEntry
name|entry
parameter_list|)
throws|throws
name|SVNException
block|{
name|SVNAdminArea
name|adminArea
init|=
name|entry
operator|.
name|getAdminArea
argument_list|()
decl_stmt|;
if|if
condition|(
name|entry
operator|.
name|isDirectory
argument_list|()
operator|&&
operator|!
name|entry
operator|.
name|isThisDir
argument_list|()
condition|)
block|{
return|return;
block|}
if|if
condition|(
operator|(
name|myIsPristine
operator|&&
name|entry
operator|.
name|isScheduledForAddition
argument_list|()
operator|)
operator|||
operator|(
operator|!
name|myIsPristine
operator|&&
name|entry
operator|.
name|isScheduledForDeletion
argument_list|()
operator|)
condition|)
block|{
return|return;
block|}
if|if
condition|(
operator|!
name|SVNWCAccess
operator|.
name|matchesChangeList
argument_list|(
name|myChangeLists
argument_list|,
name|entry
argument_list|)
condition|)
block|{
return|return;
block|}
name|SVNVersionedProperties
name|properties
init|=
name|myIsPristine
condition|?
name|adminArea
operator|.
name|getBaseProperties
argument_list|(
name|entry
operator|.
name|getName
argument_list|()
argument_list|)
else|:
name|adminArea
operator|.
name|getProperties
argument_list|(
name|entry
operator|.
name|getName
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|myPropName
operator|!=
literal|null
condition|)
block|{
name|SVNPropertyValue
name|propValue
init|=
name|properties
operator|.
name|getPropertyValue
argument_list|(
name|myPropName
argument_list|)
decl_stmt|;
if|if
condition|(
name|propValue
operator|!=
literal|null
condition|)
block|{
name|myPropHandler
operator|.
name|handleProperty
argument_list|(
name|path
argument_list|,
operator|new
name|SVNPropertyData
argument_list|(
name|myPropName
argument_list|,
name|propValue
argument_list|,
name|getOptions
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
else|else
block|{
name|SVNProperties
name|allProps
init|=
name|properties
operator|.
name|asMap
argument_list|()
decl_stmt|;
for|for
control|(
name|Iterator
name|names
init|=
name|allProps
operator|.
name|nameSet
argument_list|()
operator|.
name|iterator
argument_list|()
init|;
name|names
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|String
name|name
init|=
operator|(
name|String
operator|)
name|names
operator|.
name|next
argument_list|()
decl_stmt|;
name|SVNPropertyValue
name|val
init|=
name|allProps
operator|.
name|getSVNPropertyValue
argument_list|(
name|name
argument_list|)
decl_stmt|;
name|myPropHandler
operator|.
name|handleProperty
argument_list|(
name|path
argument_list|,
operator|new
name|SVNPropertyData
argument_list|(
name|name
argument_list|,
name|val
argument_list|,
name|getOptions
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
block|}
specifier|public
name|void
name|handleError
parameter_list|(
name|File
name|path
parameter_list|,
name|SVNErrorMessage
name|error
parameter_list|)
throws|throws
name|SVNException
block|{
name|SVNErrorManager
operator|.
name|error
argument_list|(
name|error
argument_list|,
name|SVNLogType
operator|.
name|WC
argument_list|)
expr_stmt|;
block|}
block|}
block|}
end_class

end_unit

