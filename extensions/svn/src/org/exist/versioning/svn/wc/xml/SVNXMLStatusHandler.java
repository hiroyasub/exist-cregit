begin_unit|revision:1.0.0;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * ====================================================================  * Copyright (c) 2004-2010 TMate Software Ltd.  All rights reserved.  *  * This software is licensed as described in the file COPYING, which  * you should have received as part of this distribution.  The terms  * are also available at http://svnkit.com/license.html  * If newer versions of this license are posted there, you may use a  * newer version instead, at your option.  * ====================================================================  */
end_comment

begin_package
package|package
name|org
operator|.
name|exist
operator|.
name|versioning
operator|.
name|svn
operator|.
name|wc
operator|.
name|xml
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|File
import|;
end_import

begin_import
import|import
name|org
operator|.
name|tmatesoft
operator|.
name|svn
operator|.
name|core
operator|.
name|SVNErrorCode
import|;
end_import

begin_import
import|import
name|org
operator|.
name|tmatesoft
operator|.
name|svn
operator|.
name|core
operator|.
name|SVNErrorMessage
import|;
end_import

begin_import
import|import
name|org
operator|.
name|tmatesoft
operator|.
name|svn
operator|.
name|core
operator|.
name|SVNException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|tmatesoft
operator|.
name|svn
operator|.
name|core
operator|.
name|internal
operator|.
name|util
operator|.
name|SVNDate
import|;
end_import

begin_import
import|import
name|org
operator|.
name|tmatesoft
operator|.
name|svn
operator|.
name|core
operator|.
name|internal
operator|.
name|wc
operator|.
name|SVNErrorManager
import|;
end_import

begin_import
import|import
name|org
operator|.
name|tmatesoft
operator|.
name|svn
operator|.
name|core
operator|.
name|wc
operator|.
name|ISVNStatusHandler
import|;
end_import

begin_import
import|import
name|org
operator|.
name|tmatesoft
operator|.
name|svn
operator|.
name|core
operator|.
name|wc
operator|.
name|SVNStatus
import|;
end_import

begin_import
import|import
name|org
operator|.
name|tmatesoft
operator|.
name|svn
operator|.
name|core
operator|.
name|wc
operator|.
name|SVNStatusType
import|;
end_import

begin_import
import|import
name|org
operator|.
name|tmatesoft
operator|.
name|svn
operator|.
name|util
operator|.
name|ISVNDebugLog
import|;
end_import

begin_import
import|import
name|org
operator|.
name|tmatesoft
operator|.
name|svn
operator|.
name|util
operator|.
name|SVNLogType
import|;
end_import

begin_import
import|import
name|org
operator|.
name|xml
operator|.
name|sax
operator|.
name|ContentHandler
import|;
end_import

begin_import
import|import
name|org
operator|.
name|xml
operator|.
name|sax
operator|.
name|SAXException
import|;
end_import

begin_comment
comment|/**  * This is an implementation of the<b>ISVNStatusHandler</b> interface   * that writes XML formatted status information to a specified   *<b>ContentHandler</b>.   *    * @version 1.3  * @author  TMate Software Ltd.  * @since   1.2  */
end_comment

begin_class
specifier|public
class|class
name|SVNXMLStatusHandler
extends|extends
name|AbstractXMLHandler
implements|implements
name|ISVNStatusHandler
block|{
specifier|private
specifier|static
specifier|final
name|String
name|AGAINST_TAG
init|=
literal|"against"
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|String
name|TARGET_TAG
init|=
literal|"target"
decl_stmt|;
comment|/**      *<code>'expires'</code> tag.      */
specifier|public
specifier|static
specifier|final
name|String
name|EXPIRES_TAG
init|=
literal|"expires"
decl_stmt|;
comment|/**      *<code>'created'</code> tag.      */
specifier|public
specifier|static
specifier|final
name|String
name|CREATED_TAG
init|=
literal|"created"
decl_stmt|;
comment|/**      *<code>'comment'</code> tag.      */
specifier|public
specifier|static
specifier|final
name|String
name|COMMENT_TAG
init|=
literal|"comment"
decl_stmt|;
comment|/**      *<code>'owner'</code> tag.      */
specifier|public
specifier|static
specifier|final
name|String
name|OWNER_TAG
init|=
literal|"owner"
decl_stmt|;
comment|/**      *<code>'token'</code> tag.      */
specifier|public
specifier|static
specifier|final
name|String
name|TOKEN_TAG
init|=
literal|"token"
decl_stmt|;
comment|/**      *<code>'date'</code> tag.      */
specifier|public
specifier|static
specifier|final
name|String
name|DATE_TAG
init|=
literal|"date"
decl_stmt|;
comment|/**      *<code>'author'</code> tag.      */
specifier|public
specifier|static
specifier|final
name|String
name|AUTHOR_TAG
init|=
literal|"author"
decl_stmt|;
comment|/**      *<code>'repos-status'</code> tag.      */
specifier|public
specifier|static
specifier|final
name|String
name|REMOTE_STATUS_TAG
init|=
literal|"repos-status"
decl_stmt|;
comment|/**      *<code>'lock'</code> tag.      */
specifier|public
specifier|static
specifier|final
name|String
name|LOCK_TAG
init|=
literal|"lock"
decl_stmt|;
comment|/**      *<code>'commit'</code> tag.      */
specifier|public
specifier|static
specifier|final
name|String
name|COMMIT_TAG
init|=
literal|"commit"
decl_stmt|;
comment|/**      *<code>'wc-status'</code> tag.      */
specifier|public
specifier|static
specifier|final
name|String
name|WC_STATUS_TAG
init|=
literal|"wc-status"
decl_stmt|;
comment|/**      *<code>'entry'</code> tag.      */
specifier|public
specifier|static
specifier|final
name|String
name|ENTRY_TAG
init|=
literal|"entry"
decl_stmt|;
comment|/**      *<code>'status'</code> tag.      */
specifier|public
specifier|static
specifier|final
name|String
name|STATUS_TAG
init|=
literal|"status"
decl_stmt|;
comment|/**      *<code>'revision'</code> attribute.      */
specifier|public
specifier|static
specifier|final
name|String
name|REVISION_ATTR
init|=
literal|"revision"
decl_stmt|;
comment|/**      *<code>'switched'</code> attribute.      */
specifier|public
specifier|static
specifier|final
name|String
name|SWITCHED_ATTR
init|=
literal|"switched"
decl_stmt|;
comment|/**      *<code>'copied'</code> attribute.      */
specifier|public
specifier|static
specifier|final
name|String
name|COPIED_ATTR
init|=
literal|"copied"
decl_stmt|;
comment|/**      *<code>'wc-locked'</code> attribute.      */
specifier|public
specifier|static
specifier|final
name|String
name|WC_LOCKED_ATTR
init|=
literal|"wc-locked"
decl_stmt|;
comment|/**      *<code>'props'</code> attribute.      */
specifier|public
specifier|static
specifier|final
name|String
name|PROPS_ATTR
init|=
literal|"props"
decl_stmt|;
comment|/**      *<code>'item'</code> attribute.      */
specifier|public
specifier|static
specifier|final
name|String
name|ITEM_ATTR
init|=
literal|"item"
decl_stmt|;
comment|/**      *<code>'path'</code> attribute.      */
specifier|public
specifier|static
specifier|final
name|String
name|PATH_ATTR
init|=
literal|"path"
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|String
name|TRUE
init|=
literal|"true"
decl_stmt|;
specifier|private
name|File
name|myTargetPath
decl_stmt|;
comment|/**      * Creates a new status handler.      *       * @param saxHandler a<b>ContentHandler</b> to form       *                   an XML tree      */
specifier|public
name|SVNXMLStatusHandler
parameter_list|(
name|ContentHandler
name|saxHandler
parameter_list|)
block|{
name|this
argument_list|(
name|saxHandler
argument_list|,
literal|null
argument_list|)
expr_stmt|;
block|}
comment|/**      * Creates a new status handler.      *       * @param saxHandler a<b>ContentHandler</b> to form       *                   an XML tree      * @param log        a debug logger      */
specifier|public
name|SVNXMLStatusHandler
parameter_list|(
name|ContentHandler
name|saxHandler
parameter_list|,
name|ISVNDebugLog
name|log
parameter_list|)
block|{
name|super
argument_list|(
name|saxHandler
argument_list|,
name|log
argument_list|)
expr_stmt|;
block|}
comment|/**      * Begins an XML tree with the target path for which the       * status is run.       *       * @param path a WC target path      */
specifier|public
name|void
name|startTarget
parameter_list|(
name|File
name|path
parameter_list|)
block|{
try|try
block|{
name|myTargetPath
operator|=
name|path
expr_stmt|;
name|addAttribute
argument_list|(
name|PATH_ATTR
argument_list|,
name|path
operator|.
name|getPath
argument_list|()
argument_list|)
expr_stmt|;
name|openTag
argument_list|(
name|TARGET_TAG
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|SAXException
name|e
parameter_list|)
block|{
name|getDebugLog
argument_list|()
operator|.
name|logSevere
argument_list|(
name|SVNLogType
operator|.
name|DEFAULT
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
block|}
comment|/**      * Handles a next<code>status</code> object producing corresponding xml.      *       * @param  status       * @throws SVNException       */
specifier|public
name|void
name|handleStatus
parameter_list|(
name|SVNStatus
name|status
parameter_list|)
throws|throws
name|SVNException
block|{
try|try
block|{
name|sendToHandler
argument_list|(
name|status
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|SAXException
name|th
parameter_list|)
block|{
name|getDebugLog
argument_list|()
operator|.
name|logSevere
argument_list|(
name|SVNLogType
operator|.
name|DEFAULT
argument_list|,
name|th
argument_list|)
expr_stmt|;
name|SVNErrorMessage
name|err
init|=
name|SVNErrorMessage
operator|.
name|create
argument_list|(
name|SVNErrorCode
operator|.
name|XML_MALFORMED
argument_list|,
name|th
operator|.
name|getLocalizedMessage
argument_list|()
argument_list|)
decl_stmt|;
name|SVNErrorManager
operator|.
name|error
argument_list|(
name|err
argument_list|,
name|th
argument_list|,
name|SVNLogType
operator|.
name|DEFAULT
argument_list|)
expr_stmt|;
block|}
block|}
comment|/**      * Closes the formatted XML with the revision against which       * the status is run.       *       * @param revision a revision against which the status is run      */
specifier|public
name|void
name|endTarget
parameter_list|(
name|long
name|revision
parameter_list|)
block|{
try|try
block|{
name|myTargetPath
operator|=
literal|null
expr_stmt|;
if|if
condition|(
name|revision
operator|>=
literal|0
condition|)
block|{
name|addAttribute
argument_list|(
name|REVISION_ATTR
argument_list|,
name|revision
operator|+
literal|""
argument_list|)
expr_stmt|;
name|openTag
argument_list|(
name|AGAINST_TAG
argument_list|)
expr_stmt|;
name|closeTag
argument_list|(
name|AGAINST_TAG
argument_list|)
expr_stmt|;
block|}
name|closeTag
argument_list|(
name|TARGET_TAG
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|SAXException
name|e
parameter_list|)
block|{
name|getDebugLog
argument_list|()
operator|.
name|logSevere
argument_list|(
name|SVNLogType
operator|.
name|DEFAULT
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
block|}
specifier|private
name|void
name|sendToHandler
parameter_list|(
name|SVNStatus
name|status
parameter_list|)
throws|throws
name|SAXException
block|{
name|addAttribute
argument_list|(
name|PATH_ATTR
argument_list|,
name|getRelativePath
argument_list|(
name|status
operator|.
name|getFile
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|openTag
argument_list|(
name|ENTRY_TAG
argument_list|)
expr_stmt|;
name|addAttribute
argument_list|(
name|PROPS_ATTR
argument_list|,
name|status
operator|.
name|getPropertiesStatus
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|addAttribute
argument_list|(
name|ITEM_ATTR
argument_list|,
name|status
operator|.
name|getContentsStatus
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|status
operator|.
name|isLocked
argument_list|()
condition|)
block|{
name|addAttribute
argument_list|(
name|WC_LOCKED_ATTR
argument_list|,
name|TRUE
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|status
operator|.
name|isCopied
argument_list|()
condition|)
block|{
name|addAttribute
argument_list|(
name|COPIED_ATTR
argument_list|,
name|TRUE
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|status
operator|.
name|isSwitched
argument_list|()
condition|)
block|{
name|addAttribute
argument_list|(
name|SWITCHED_ATTR
argument_list|,
name|TRUE
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
operator|!
name|status
operator|.
name|isCopied
argument_list|()
operator|&&
name|status
operator|.
name|getRevision
argument_list|()
operator|!=
literal|null
operator|&&
name|status
operator|.
name|getRevision
argument_list|()
operator|.
name|getNumber
argument_list|()
operator|>=
literal|0
condition|)
block|{
name|addAttribute
argument_list|(
name|REVISION_ATTR
argument_list|,
name|status
operator|.
name|getRevision
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|openTag
argument_list|(
name|WC_STATUS_TAG
argument_list|)
expr_stmt|;
if|if
condition|(
name|status
operator|.
name|getCommittedRevision
argument_list|()
operator|!=
literal|null
operator|&&
name|status
operator|.
name|getCommittedRevision
argument_list|()
operator|.
name|getNumber
argument_list|()
operator|>=
literal|0
condition|)
block|{
name|addAttribute
argument_list|(
name|REVISION_ATTR
argument_list|,
name|status
operator|.
name|getCommittedRevision
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|openTag
argument_list|(
name|COMMIT_TAG
argument_list|)
expr_stmt|;
name|addTag
argument_list|(
name|AUTHOR_TAG
argument_list|,
name|status
operator|.
name|getAuthor
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|status
operator|.
name|getCommittedDate
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|addTag
argument_list|(
name|DATE_TAG
argument_list|,
name|SVNDate
operator|.
name|formatDate
argument_list|(
name|status
operator|.
name|getCommittedDate
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|closeTag
argument_list|(
name|COMMIT_TAG
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|status
operator|.
name|getLocalLock
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|openTag
argument_list|(
name|LOCK_TAG
argument_list|)
expr_stmt|;
name|addTag
argument_list|(
name|TOKEN_TAG
argument_list|,
name|status
operator|.
name|getLocalLock
argument_list|()
operator|.
name|getID
argument_list|()
argument_list|)
expr_stmt|;
name|addTag
argument_list|(
name|OWNER_TAG
argument_list|,
name|status
operator|.
name|getLocalLock
argument_list|()
operator|.
name|getOwner
argument_list|()
argument_list|)
expr_stmt|;
name|addTag
argument_list|(
name|COMMENT_TAG
argument_list|,
name|status
operator|.
name|getLocalLock
argument_list|()
operator|.
name|getComment
argument_list|()
argument_list|)
expr_stmt|;
name|addTag
argument_list|(
name|CREATED_TAG
argument_list|,
name|SVNDate
operator|.
name|formatDate
argument_list|(
name|status
operator|.
name|getLocalLock
argument_list|()
operator|.
name|getCreationDate
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|closeTag
argument_list|(
name|LOCK_TAG
argument_list|)
expr_stmt|;
block|}
name|closeTag
argument_list|(
name|WC_STATUS_TAG
argument_list|)
expr_stmt|;
if|if
condition|(
name|status
operator|.
name|getRemoteContentsStatus
argument_list|()
operator|!=
name|SVNStatusType
operator|.
name|STATUS_NONE
operator|||
name|status
operator|.
name|getRemotePropertiesStatus
argument_list|()
operator|!=
name|SVNStatusType
operator|.
name|STATUS_NONE
operator|||
name|status
operator|.
name|getRemoteLock
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|addAttribute
argument_list|(
name|PROPS_ATTR
argument_list|,
name|status
operator|.
name|getRemotePropertiesStatus
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|addAttribute
argument_list|(
name|ITEM_ATTR
argument_list|,
name|status
operator|.
name|getRemoteContentsStatus
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|openTag
argument_list|(
name|REMOTE_STATUS_TAG
argument_list|)
expr_stmt|;
if|if
condition|(
name|status
operator|.
name|getRemoteLock
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|openTag
argument_list|(
name|LOCK_TAG
argument_list|)
expr_stmt|;
name|addTag
argument_list|(
name|TOKEN_TAG
argument_list|,
name|status
operator|.
name|getRemoteLock
argument_list|()
operator|.
name|getID
argument_list|()
argument_list|)
expr_stmt|;
name|addTag
argument_list|(
name|OWNER_TAG
argument_list|,
name|status
operator|.
name|getRemoteLock
argument_list|()
operator|.
name|getOwner
argument_list|()
argument_list|)
expr_stmt|;
name|addTag
argument_list|(
name|COMMENT_TAG
argument_list|,
name|status
operator|.
name|getRemoteLock
argument_list|()
operator|.
name|getComment
argument_list|()
argument_list|)
expr_stmt|;
name|addTag
argument_list|(
name|CREATED_TAG
argument_list|,
name|SVNDate
operator|.
name|formatDate
argument_list|(
name|status
operator|.
name|getRemoteLock
argument_list|()
operator|.
name|getCreationDate
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
if|if
condition|(
name|status
operator|.
name|getRemoteLock
argument_list|()
operator|.
name|getExpirationDate
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|addTag
argument_list|(
name|EXPIRES_TAG
argument_list|,
name|SVNDate
operator|.
name|formatDate
argument_list|(
name|status
operator|.
name|getRemoteLock
argument_list|()
operator|.
name|getExpirationDate
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|closeTag
argument_list|(
name|LOCK_TAG
argument_list|)
expr_stmt|;
block|}
name|closeTag
argument_list|(
name|REMOTE_STATUS_TAG
argument_list|)
expr_stmt|;
block|}
name|closeTag
argument_list|(
name|ENTRY_TAG
argument_list|)
expr_stmt|;
block|}
specifier|protected
name|String
name|getRelativePath
parameter_list|(
name|File
name|path
parameter_list|)
block|{
name|String
name|fullPath
init|=
name|path
operator|.
name|getAbsoluteFile
argument_list|()
operator|.
name|getAbsolutePath
argument_list|()
decl_stmt|;
if|if
condition|(
name|myTargetPath
operator|==
literal|null
condition|)
block|{
return|return
name|fullPath
return|;
block|}
name|StringBuffer
name|relativePath
init|=
operator|new
name|StringBuffer
argument_list|()
decl_stmt|;
comment|// collect path till target is met, then prepend target.
name|char
name|pathSeparator
init|=
name|File
operator|.
name|separatorChar
decl_stmt|;
name|boolean
name|targetMeet
init|=
literal|false
decl_stmt|;
if|if
condition|(
operator|!
name|path
operator|.
name|getAbsoluteFile
argument_list|()
operator|.
name|equals
argument_list|(
name|myTargetPath
operator|.
name|getAbsoluteFile
argument_list|()
argument_list|)
condition|)
block|{
do|do
block|{
if|if
condition|(
name|relativePath
operator|.
name|length
argument_list|()
operator|>
literal|0
condition|)
block|{
name|relativePath
operator|.
name|insert
argument_list|(
literal|0
argument_list|,
name|pathSeparator
argument_list|)
expr_stmt|;
block|}
name|relativePath
operator|=
name|relativePath
operator|.
name|insert
argument_list|(
literal|0
argument_list|,
name|path
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
name|path
operator|=
name|path
operator|.
name|getParentFile
argument_list|()
expr_stmt|;
if|if
condition|(
name|path
operator|!=
literal|null
condition|)
block|{
name|targetMeet
operator|=
name|path
operator|.
name|getAbsoluteFile
argument_list|()
operator|.
name|equals
argument_list|(
name|myTargetPath
operator|.
name|getAbsoluteFile
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
do|while
condition|(
name|path
operator|!=
literal|null
operator|&&
operator|!
name|targetMeet
condition|)
do|;
block|}
else|else
block|{
return|return
name|myTargetPath
operator|.
name|getPath
argument_list|()
return|;
block|}
if|if
condition|(
name|path
operator|!=
literal|null
condition|)
block|{
if|if
condition|(
name|relativePath
operator|.
name|length
argument_list|()
operator|>
literal|0
condition|)
block|{
name|relativePath
operator|.
name|insert
argument_list|(
literal|0
argument_list|,
name|pathSeparator
argument_list|)
expr_stmt|;
block|}
name|relativePath
operator|=
name|relativePath
operator|.
name|insert
argument_list|(
literal|0
argument_list|,
name|myTargetPath
operator|.
name|getPath
argument_list|()
argument_list|)
expr_stmt|;
block|}
else|else
block|{
return|return
name|fullPath
return|;
block|}
return|return
name|relativePath
operator|.
name|toString
argument_list|()
return|;
block|}
specifier|protected
name|String
name|getTargetPath
parameter_list|()
block|{
return|return
name|getRelativePath
argument_list|(
name|myTargetPath
argument_list|)
return|;
block|}
specifier|protected
name|String
name|getHeaderName
parameter_list|()
block|{
return|return
name|STATUS_TAG
return|;
block|}
block|}
end_class

end_unit

