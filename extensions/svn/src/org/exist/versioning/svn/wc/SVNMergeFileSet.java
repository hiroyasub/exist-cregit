begin_unit|revision:1.0.0;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * ====================================================================  * Copyright (c) 2004-2010 TMate Software Ltd.  All rights reserved.  *  * This software is licensed as described in the file COPYING, which  * you should have received as part of this distribution.  The terms  * are also available at http://svnkit.com/license.html.  * If newer versions of this license are posted there, you may use a  * newer version instead, at your option.  * ====================================================================  */
end_comment

begin_package
package|package
name|org
operator|.
name|exist
operator|.
name|versioning
operator|.
name|svn
operator|.
name|wc
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|File
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collection
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Iterator
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|versioning
operator|.
name|svn
operator|.
name|internal
operator|.
name|wc
operator|.
name|SVNAdminUtil
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|versioning
operator|.
name|svn
operator|.
name|internal
operator|.
name|wc
operator|.
name|SVNFileUtil
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|versioning
operator|.
name|svn
operator|.
name|internal
operator|.
name|wc
operator|.
name|admin
operator|.
name|SVNAdminArea
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|versioning
operator|.
name|svn
operator|.
name|internal
operator|.
name|wc
operator|.
name|admin
operator|.
name|SVNLog
import|;
end_import

begin_import
import|import
name|org
operator|.
name|tmatesoft
operator|.
name|svn
operator|.
name|core
operator|.
name|SVNException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|tmatesoft
operator|.
name|svn
operator|.
name|core
operator|.
name|SVNProperties
import|;
end_import

begin_import
import|import
name|org
operator|.
name|tmatesoft
operator|.
name|svn
operator|.
name|core
operator|.
name|SVNProperty
import|;
end_import

begin_import
import|import
name|org
operator|.
name|tmatesoft
operator|.
name|svn
operator|.
name|core
operator|.
name|internal
operator|.
name|util
operator|.
name|SVNPathUtil
import|;
end_import

begin_comment
comment|/**  * The<b>SVNMergeFileSet</b> class holds information about the file that is to be merged.  * This information includes references to<code>File</code> objects with working, base, repository contents;   * file mimeType; labels to append to the file name to produce conflict files in case a merge fails with a   * conflict, and so on.  *   * @version 1.3  * @author  TMate Software Ltd.  * @since   1.2  */
end_comment

begin_class
specifier|public
class|class
name|SVNMergeFileSet
block|{
specifier|private
name|String
name|myLocalFilePath
decl_stmt|;
specifier|private
name|String
name|myBaseFilePath
decl_stmt|;
specifier|private
name|String
name|myRepositoryFilePath
decl_stmt|;
specifier|private
name|String
name|myWCFilePath
decl_stmt|;
specifier|private
name|String
name|myMergeResultFilePath
decl_stmt|;
specifier|private
name|String
name|myMimeType
decl_stmt|;
specifier|private
name|SVNAdminArea
name|myAdminArea
decl_stmt|;
specifier|private
name|SVNLog
name|myLog
decl_stmt|;
specifier|private
name|String
name|myLocalLabel
decl_stmt|;
specifier|private
name|String
name|myBaseLabel
decl_stmt|;
specifier|private
name|String
name|myRepositoryLabel
decl_stmt|;
specifier|private
name|File
name|myLocalFile
decl_stmt|;
specifier|private
name|File
name|myBaseFile
decl_stmt|;
specifier|private
name|File
name|myRepositoryFile
decl_stmt|;
specifier|private
name|File
name|myMergeResultFile
decl_stmt|;
specifier|private
name|File
name|myCopyFromFile
decl_stmt|;
specifier|private
name|Collection
name|myTmpPaths
init|=
operator|new
name|ArrayList
argument_list|()
decl_stmt|;
comment|/**      * Creates a new<code>SVNMergeFileSet</code> object given the data prepared for       * merging a file.      *       *<p/>      * Note: This is intended for internal use only, not for API users.      *       * @param adminArea     admin area the file is controlled under       * @param log           log object      * @param baseFile      file with pristine contents      * @param localFile     file with translated working contents      * @param wcPath        working copy path relative to the location of<code>adminArea</code>      * @param reposFile     file contents from the repository      * @param resultFile    file where the resultant merged contents will be written to        * @param copyFromFile  contents of the copy source file (if any)        * @param mimeType      file mime type             */
specifier|public
name|SVNMergeFileSet
parameter_list|(
name|SVNAdminArea
name|adminArea
parameter_list|,
name|SVNLog
name|log
parameter_list|,
name|File
name|baseFile
parameter_list|,
name|File
name|localFile
parameter_list|,
name|String
name|wcPath
parameter_list|,
name|File
name|reposFile
parameter_list|,
name|File
name|resultFile
parameter_list|,
name|File
name|copyFromFile
parameter_list|,
name|String
name|mimeType
parameter_list|)
block|{
name|myAdminArea
operator|=
name|adminArea
expr_stmt|;
name|myLog
operator|=
name|log
expr_stmt|;
name|myLocalFile
operator|=
name|localFile
expr_stmt|;
name|myBaseFile
operator|=
name|baseFile
expr_stmt|;
name|myRepositoryFile
operator|=
name|reposFile
expr_stmt|;
name|myWCFilePath
operator|=
name|wcPath
expr_stmt|;
name|myMergeResultFile
operator|=
name|resultFile
expr_stmt|;
name|myCopyFromFile
operator|=
name|copyFromFile
expr_stmt|;
name|myMimeType
operator|=
name|mimeType
expr_stmt|;
if|if
condition|(
name|myBaseFile
operator|!=
literal|null
condition|)
block|{
name|myBaseFilePath
operator|=
name|SVNPathUtil
operator|.
name|isAncestor
argument_list|(
name|myAdminArea
operator|.
name|getAdminDirectory
argument_list|()
operator|.
name|getAbsolutePath
argument_list|()
argument_list|,
name|myBaseFile
operator|.
name|getAbsolutePath
argument_list|()
argument_list|)
condition|?
name|SVNFileUtil
operator|.
name|getBasePath
argument_list|(
name|myBaseFile
argument_list|)
else|:
literal|null
expr_stmt|;
block|}
if|if
condition|(
name|myLocalFile
operator|!=
literal|null
condition|)
block|{
name|myLocalFilePath
operator|=
name|SVNFileUtil
operator|.
name|getBasePath
argument_list|(
name|myLocalFile
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|myRepositoryFile
operator|!=
literal|null
condition|)
block|{
name|myRepositoryFilePath
operator|=
name|SVNPathUtil
operator|.
name|isAncestor
argument_list|(
name|myAdminArea
operator|.
name|getAdminDirectory
argument_list|()
operator|.
name|getAbsolutePath
argument_list|()
argument_list|,
name|myRepositoryFile
operator|.
name|getAbsolutePath
argument_list|()
argument_list|)
condition|?
name|SVNFileUtil
operator|.
name|getBasePath
argument_list|(
name|myRepositoryFile
argument_list|)
else|:
literal|null
expr_stmt|;
block|}
if|if
condition|(
name|myMergeResultFile
operator|!=
literal|null
condition|)
block|{
name|myMergeResultFilePath
operator|=
name|SVNFileUtil
operator|.
name|getBasePath
argument_list|(
name|myMergeResultFile
argument_list|)
expr_stmt|;
block|}
block|}
comment|/**      * Sets the labels for conflict files.      *       *<p/>      * If<code>baseLabel</code> is<span class="javakeyword">null</span>,       *<span class="javastring">".old"</span> will be set by default.       * If<code>localLabel</code> is<span class="javakeyword">null</span>,       *<span class="javastring">".working"</span> will be set by default.       * If<code>repositoryLabel</code> is<span class="javakeyword">null</span>,       *<span class="javastring">".new"</span> will be set by default.       *       * @param baseLabel          base file label       * @param localLabel         working file label      * @param repositoryLabel    repository file label      */
specifier|public
name|void
name|setMergeLabels
parameter_list|(
name|String
name|baseLabel
parameter_list|,
name|String
name|localLabel
parameter_list|,
name|String
name|repositoryLabel
parameter_list|)
block|{
name|myLocalLabel
operator|=
name|localLabel
operator|==
literal|null
condition|?
literal|".working"
else|:
name|localLabel
expr_stmt|;
name|myBaseLabel
operator|=
name|baseLabel
operator|==
literal|null
condition|?
literal|".old"
else|:
name|baseLabel
expr_stmt|;
name|myRepositoryLabel
operator|=
name|repositoryLabel
operator|==
literal|null
condition|?
literal|".new"
else|:
name|repositoryLabel
expr_stmt|;
block|}
comment|/**      * Returns the log object.      *       *<p/>      * Note: This is intended for internal use only, not for API users.      *       * @return wc modification commands logger       */
specifier|public
name|SVNLog
name|getLog
parameter_list|()
block|{
return|return
name|myLog
return|;
block|}
comment|/**      * Returns the base file label.      *       * @return base label string       */
specifier|public
name|String
name|getBaseLabel
parameter_list|()
block|{
return|return
name|myBaseLabel
return|;
block|}
comment|/**      * Returns the local file label.      *       * @return working file label       */
specifier|public
name|String
name|getLocalLabel
parameter_list|()
block|{
return|return
name|myLocalLabel
return|;
block|}
comment|/**      * Returns the repository file label.      *       * @return label of the repository file version       */
specifier|public
name|String
name|getRepositoryLabel
parameter_list|()
block|{
return|return
name|myRepositoryLabel
return|;
block|}
comment|/**      * Returns the base file path.      *       *<p/>      * If the {@link #getBaseFile() base file} is located under the       * {@link #getAdminArea() admin area}, then the return path will be just a relevant to the admin area path       * of the base file. Otherwise (in case the repository file is located not under the admin area) this       * method will create a temporary file in the<code>.svn/tmp</code> area of the admin area and copy the       * contents of the base file into it; the return path will be again relative to the location of       * the admin area.        *       * @return               path of the file with pristine contents      * @throws SVNException       */
specifier|public
name|String
name|getBasePath
parameter_list|()
throws|throws
name|SVNException
block|{
if|if
condition|(
name|myBaseFilePath
operator|==
literal|null
operator|&&
name|myBaseFile
operator|!=
literal|null
condition|)
block|{
name|File
name|tmp
init|=
name|SVNAdminUtil
operator|.
name|createTmpFile
argument_list|(
name|myAdminArea
argument_list|)
decl_stmt|;
name|SVNFileUtil
operator|.
name|copyFile
argument_list|(
name|myBaseFile
argument_list|,
name|tmp
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|myBaseFilePath
operator|=
name|SVNFileUtil
operator|.
name|getBasePath
argument_list|(
name|tmp
argument_list|)
expr_stmt|;
name|myTmpPaths
operator|.
name|add
argument_list|(
name|myBaseFilePath
argument_list|)
expr_stmt|;
block|}
return|return
name|myBaseFilePath
return|;
block|}
comment|/**      * Returns the path of the detranslated version of the working copy file.      * Detranslating of a working copy file takes place in case it's a symlink, or it has keywords or       * eol-style properties set on it.      *       * @return path to the file with detranslated working contents; it's relevant to the       *         {@link #getAdminArea() admin area} location      */
specifier|public
name|String
name|getLocalPath
parameter_list|()
block|{
return|return
name|myLocalFilePath
return|;
block|}
comment|/**      * Returns the path of the working copy file.      *       * @return path of the working copy file; it's relevant to the {@link #getAdminArea() admin area} location      */
specifier|public
name|String
name|getWCPath
parameter_list|()
block|{
return|return
name|myWCFilePath
return|;
block|}
comment|/**      * Returns the path to the file containing the contents of the repository version of the file.      *      *<p/>      * If the {@link #getRepositoryFile() repository file} is located under the       * {@link #getAdminArea() admin area}, then the return path will be just a relevant to the admin area path       * of the repository file. Otherwise (in case the repository file is located not under the admin area) this       * method will create a temporary file in the<code>.svn/tmp</code> area of the admin area and copy the       * contents of the repository file into it; the return path will be again relative to the location of       * the admin area.        *       * @return                path of the file containing file contents that come from the repository        * @throws SVNException       */
specifier|public
name|String
name|getRepositoryPath
parameter_list|()
throws|throws
name|SVNException
block|{
if|if
condition|(
name|myRepositoryFilePath
operator|==
literal|null
operator|&&
name|myRepositoryFile
operator|!=
literal|null
condition|)
block|{
name|File
name|tmp
init|=
name|SVNAdminUtil
operator|.
name|createTmpFile
argument_list|(
name|myAdminArea
argument_list|)
decl_stmt|;
name|SVNFileUtil
operator|.
name|copyFile
argument_list|(
name|myRepositoryFile
argument_list|,
name|tmp
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|myRepositoryFilePath
operator|=
name|SVNFileUtil
operator|.
name|getBasePath
argument_list|(
name|tmp
argument_list|)
expr_stmt|;
name|myTmpPaths
operator|.
name|add
argument_list|(
name|myRepositoryFilePath
argument_list|)
expr_stmt|;
block|}
return|return
name|myRepositoryFilePath
return|;
block|}
comment|/**      * Returns the path of the file where the merged resultant text is written to.      *       * @return path of the result file; it's relevant to the {@link #getAdminArea() admin area} location      */
specifier|public
name|String
name|getResultPath
parameter_list|()
block|{
return|return
name|myMergeResultFilePath
return|;
block|}
comment|/**      * Returns the file containing the pristine file contents.      * @return base file       */
specifier|public
name|File
name|getBaseFile
parameter_list|()
block|{
return|return
name|myBaseFile
return|;
block|}
comment|/**      * Returns the working copy file as it presents in the working copy.      * @return working copy file       */
specifier|public
name|File
name|getWCFile
parameter_list|()
block|{
return|return
name|myAdminArea
operator|.
name|getFile
argument_list|(
name|myWCFilePath
argument_list|)
return|;
block|}
comment|/**      * Returns the detranslated working copy file.      * Detranslating of a working copy file takes place in case it's a symlink, or it has keywords or       * eol-style properties set on it.      *       * @return detranslated working copy file       */
specifier|public
name|File
name|getLocalFile
parameter_list|()
block|{
return|return
name|myLocalFile
return|;
block|}
comment|/**      * Returns the repository version of the file.       * @return repository file       */
specifier|public
name|File
name|getRepositoryFile
parameter_list|()
block|{
return|return
name|myRepositoryFile
return|;
block|}
comment|/**      * Returns the file where the merged resultant text is written to.      * @return merge result file      */
specifier|public
name|File
name|getResultFile
parameter_list|()
block|{
return|return
name|myMergeResultFile
return|;
block|}
comment|/**      * Tells whether this file is binary or textual.      * The result will depend on the value of the file {@link #getMimeType() mime type}.      *       * @return<span class="javakeyword">true</span> if binary       */
specifier|public
name|boolean
name|isBinary
parameter_list|()
block|{
return|return
name|SVNProperty
operator|.
name|isBinaryMimeType
argument_list|(
name|myMimeType
argument_list|)
return|;
block|}
comment|/**      * Returns the mime type of the file.      * @return file mime type       */
specifier|public
name|String
name|getMimeType
parameter_list|()
block|{
return|return
name|myMimeType
return|;
block|}
comment|/**      * Returns the admin area which controls the file.      *       *<p/>      * Note: this method is not intended for API users.      * @return admin area      */
specifier|public
name|SVNAdminArea
name|getAdminArea
parameter_list|()
block|{
return|return
name|myAdminArea
return|;
block|}
comment|/**      * Disposes this object.      *       *<p/>      * Note: this method is not intended for API users.      * @throws SVNException       */
specifier|public
name|void
name|dispose
parameter_list|()
throws|throws
name|SVNException
block|{
comment|// add deletion commands to the log file.
name|SVNProperties
name|command
init|=
operator|new
name|SVNProperties
argument_list|()
decl_stmt|;
for|for
control|(
name|Iterator
name|paths
init|=
name|myTmpPaths
operator|.
name|iterator
argument_list|()
init|;
name|paths
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|String
name|path
init|=
operator|(
name|String
operator|)
name|paths
operator|.
name|next
argument_list|()
decl_stmt|;
name|command
operator|.
name|put
argument_list|(
name|SVNLog
operator|.
name|NAME_ATTR
argument_list|,
name|path
argument_list|)
expr_stmt|;
name|myLog
operator|.
name|addCommand
argument_list|(
name|SVNLog
operator|.
name|DELETE
argument_list|,
name|command
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|command
operator|.
name|clear
argument_list|()
expr_stmt|;
block|}
block|}
comment|/**      * Returns the file which is the copy source for the file being merged.      * @return copy source file       */
specifier|public
name|File
name|getCopyFromFile
parameter_list|()
block|{
return|return
name|myCopyFromFile
return|;
block|}
comment|/**      * Returns the copy source path.      *       * @return   path of the copy source file;       *           it's relevant to the {@link #getAdminArea() admin area} location      * @since    1.3      */
specifier|public
name|String
name|getCopyFromPath
parameter_list|()
block|{
name|String
name|root
init|=
name|myAdminArea
operator|.
name|getRoot
argument_list|()
operator|.
name|getAbsolutePath
argument_list|()
operator|.
name|replace
argument_list|(
name|File
operator|.
name|separatorChar
argument_list|,
literal|'/'
argument_list|)
decl_stmt|;
name|String
name|copyFrom
init|=
name|getCopyFromFile
argument_list|()
operator|.
name|getAbsolutePath
argument_list|()
operator|.
name|replace
argument_list|(
name|File
operator|.
name|separatorChar
argument_list|,
literal|'/'
argument_list|)
decl_stmt|;
name|String
name|copyFromPath
init|=
name|copyFrom
operator|.
name|substring
argument_list|(
name|root
operator|.
name|length
argument_list|()
argument_list|)
decl_stmt|;
name|copyFromPath
operator|=
name|copyFromPath
operator|.
name|startsWith
argument_list|(
literal|"/"
argument_list|)
condition|?
name|copyFromPath
operator|.
name|substring
argument_list|(
literal|"/"
operator|.
name|length
argument_list|()
argument_list|)
else|:
name|copyFromPath
expr_stmt|;
return|return
name|copyFromPath
return|;
block|}
specifier|public
name|String
name|toString
parameter_list|()
block|{
specifier|final
name|StringBuffer
name|buffer
init|=
operator|new
name|StringBuffer
argument_list|()
decl_stmt|;
name|buffer
operator|.
name|append
argument_list|(
literal|"{Merge File Set: "
argument_list|)
expr_stmt|;
name|buffer
operator|.
name|append
argument_list|(
literal|"admin area = "
argument_list|)
expr_stmt|;
name|buffer
operator|.
name|append
argument_list|(
name|myAdminArea
argument_list|)
expr_stmt|;
name|buffer
operator|.
name|append
argument_list|(
literal|"; local file path = "
argument_list|)
expr_stmt|;
name|buffer
operator|.
name|append
argument_list|(
name|myLocalFilePath
argument_list|)
expr_stmt|;
name|buffer
operator|.
name|append
argument_list|(
literal|"; base file path ="
argument_list|)
expr_stmt|;
name|buffer
operator|.
name|append
argument_list|(
name|myBaseFilePath
argument_list|)
expr_stmt|;
name|buffer
operator|.
name|append
argument_list|(
literal|"; repository file path = "
argument_list|)
expr_stmt|;
name|buffer
operator|.
name|append
argument_list|(
name|myRepositoryFilePath
argument_list|)
expr_stmt|;
name|buffer
operator|.
name|append
argument_list|(
literal|"; WC file path = "
argument_list|)
expr_stmt|;
name|buffer
operator|.
name|append
argument_list|(
name|myWCFilePath
argument_list|)
expr_stmt|;
name|buffer
operator|.
name|append
argument_list|(
literal|"; merge result path = "
argument_list|)
expr_stmt|;
name|buffer
operator|.
name|append
argument_list|(
name|myMergeResultFilePath
argument_list|)
expr_stmt|;
name|buffer
operator|.
name|append
argument_list|(
literal|"; local file = "
argument_list|)
expr_stmt|;
name|buffer
operator|.
name|append
argument_list|(
name|myLocalFile
argument_list|)
expr_stmt|;
name|buffer
operator|.
name|append
argument_list|(
literal|"; base file = "
argument_list|)
expr_stmt|;
name|buffer
operator|.
name|append
argument_list|(
name|myBaseFile
argument_list|)
expr_stmt|;
name|buffer
operator|.
name|append
argument_list|(
literal|"; repository file = "
argument_list|)
expr_stmt|;
name|buffer
operator|.
name|append
argument_list|(
name|myRepositoryFile
argument_list|)
expr_stmt|;
name|buffer
operator|.
name|append
argument_list|(
literal|"; merge result file = "
argument_list|)
expr_stmt|;
name|buffer
operator|.
name|append
argument_list|(
name|myMergeResultFile
argument_list|)
expr_stmt|;
name|buffer
operator|.
name|append
argument_list|(
literal|'}'
argument_list|)
expr_stmt|;
return|return
name|buffer
operator|.
name|toString
argument_list|()
return|;
block|}
block|}
end_class

end_unit

