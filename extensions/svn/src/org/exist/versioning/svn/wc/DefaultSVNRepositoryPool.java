begin_unit|revision:1.0.0;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * ====================================================================  * Copyright (c) 2004-2010 TMate Software Ltd.  All rights reserved.  *  * This software is licensed as described in the file COPYING, which  * you should have received as part of this distribution.  The terms  * are also available at http://svnkit.com/license.html  * If newer versions of this license are posted there, you may use a  * newer version instead, at your option.  * ====================================================================  */
end_comment

begin_package
package|package
name|org
operator|.
name|exist
operator|.
name|versioning
operator|.
name|svn
operator|.
name|wc
package|;
end_package

begin_import
import|import
name|org
operator|.
name|tmatesoft
operator|.
name|svn
operator|.
name|core
operator|.
name|internal
operator|.
name|util
operator|.
name|SVNHashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Iterator
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Timer
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|TimerTask
import|;
end_import

begin_import
import|import
name|org
operator|.
name|tmatesoft
operator|.
name|svn
operator|.
name|core
operator|.
name|ISVNCanceller
import|;
end_import

begin_import
import|import
name|org
operator|.
name|tmatesoft
operator|.
name|svn
operator|.
name|core
operator|.
name|SVNException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|tmatesoft
operator|.
name|svn
operator|.
name|core
operator|.
name|SVNURL
import|;
end_import

begin_import
import|import
name|org
operator|.
name|tmatesoft
operator|.
name|svn
operator|.
name|core
operator|.
name|auth
operator|.
name|ISVNAuthenticationManager
import|;
end_import

begin_import
import|import
name|org
operator|.
name|tmatesoft
operator|.
name|svn
operator|.
name|core
operator|.
name|io
operator|.
name|ISVNConnectionListener
import|;
end_import

begin_import
import|import
name|org
operator|.
name|tmatesoft
operator|.
name|svn
operator|.
name|core
operator|.
name|io
operator|.
name|ISVNSession
import|;
end_import

begin_import
import|import
name|org
operator|.
name|tmatesoft
operator|.
name|svn
operator|.
name|core
operator|.
name|io
operator|.
name|ISVNTunnelProvider
import|;
end_import

begin_import
import|import
name|org
operator|.
name|tmatesoft
operator|.
name|svn
operator|.
name|core
operator|.
name|io
operator|.
name|SVNRepository
import|;
end_import

begin_import
import|import
name|org
operator|.
name|tmatesoft
operator|.
name|svn
operator|.
name|core
operator|.
name|io
operator|.
name|SVNRepositoryFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|tmatesoft
operator|.
name|svn
operator|.
name|core
operator|.
name|wc
operator|.
name|ISVNRepositoryPool
import|;
end_import

begin_import
import|import
name|org
operator|.
name|tmatesoft
operator|.
name|svn
operator|.
name|util
operator|.
name|ISVNDebugLog
import|;
end_import

begin_import
import|import
name|org
operator|.
name|tmatesoft
operator|.
name|svn
operator|.
name|util
operator|.
name|SVNDebugLog
import|;
end_import

begin_import
import|import
name|org
operator|.
name|tmatesoft
operator|.
name|svn
operator|.
name|util
operator|.
name|SVNLogType
import|;
end_import

begin_comment
comment|/**  * The<b>DefaultSVNRepositoryPool</b> class is a default implementation of   * the<b>ISVNRepositoryPool</b> interface.   *   *<p>  * It creates<b>SVNRepository</b> objects that may be stored in a common  * pool and reused later. The objects common pool may be shared by different  * threads, but each thread can retrieve only those objects, that have been  * created within that thread. So,<b>DefaultSVNRepositoryPool</b> is thread-safe.  * An objects pool may be global during runtime, or it may be private - one separate   * pool per one<b>DefaultSVNRepositoryPool</b> object. Also there's a possibility to  * have a<b>DefaultSVNRepositoryPool</b> object with the pool feature  * disabled (<b>SVNRepository</b> objects instantiated by such a creator are never  * cached).   *   *<p>  *<b>DefaultSVNRepositoryPool</b> caches one<b>SVNRepository</b> object per one url   * protocol (per one thread), that is the number of protocols used equals to  * the number of objects cached per one thread (if all objects are created as reusable).  *   *<p>  * Also<b>DefaultSVNRepositoryPool</b> is able to create<b>SVNRepository</b> objects  * that use a single socket connection (i.e. don't close a connection after every repository  * access operation but reuse a single one).   *   * @version 1.3  * @author  TMate Software Ltd.  * @since   1.2  */
end_comment

begin_class
specifier|public
class|class
name|DefaultSVNRepositoryPool
implements|implements
name|ISVNRepositoryPool
implements|,
name|ISVNSession
implements|,
name|ISVNConnectionListener
block|{
comment|/**      * Defines a common shared objects pool. All objects that will be       * created by different threads will be stored in this common pool.      *       * @deprecated        */
specifier|public
specifier|static
specifier|final
name|int
name|RUNTIME_POOL
init|=
literal|1
decl_stmt|;
comment|/**      * Defines a private pool. All objects that will be created by       * different threads will be stored only within this pool object.      * This allows to have more than one separate pools.      *        * @deprecated        */
specifier|public
specifier|static
specifier|final
name|int
name|INSTANCE_POOL
init|=
literal|2
decl_stmt|;
comment|/**      * Defines a without-pool configuration. Objects that are created      * by this<b>DefaultSVNRepositoryPool</b> object are not cached,      * the pool feature is disabled.      *       * @deprecated      */
specifier|public
specifier|static
specifier|final
name|int
name|NO_POOL
init|=
literal|4
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|long
name|DEFAULT_IDLE_TIMEOUT
init|=
literal|60
operator|*
literal|1000
decl_stmt|;
specifier|private
specifier|static
specifier|volatile
name|Timer
name|ourTimer
decl_stmt|;
specifier|private
specifier|static
specifier|volatile
name|int
name|ourInstanceCount
decl_stmt|;
specifier|private
name|ISVNAuthenticationManager
name|myAuthManager
decl_stmt|;
specifier|private
name|ISVNTunnelProvider
name|myTunnelProvider
decl_stmt|;
specifier|private
name|ISVNDebugLog
name|myDebugLog
decl_stmt|;
specifier|private
name|ISVNCanceller
name|myCanceller
decl_stmt|;
specifier|private
name|Map
name|myPool
decl_stmt|;
specifier|private
name|long
name|myTimeout
decl_stmt|;
specifier|private
name|Map
name|myInactiveRepositories
init|=
operator|new
name|SVNHashMap
argument_list|()
decl_stmt|;
specifier|private
name|Timer
name|myTimer
decl_stmt|;
specifier|private
name|boolean
name|myIsKeepConnection
decl_stmt|;
comment|/**      * Constructs a<b>DefaultSVNRepositoryPool</b> instance      * that represents {@link #RUNTIME_POOL} objects pool.       *<b>SVNRepository</b> objects created by this instance will      * use a single socket connection.      *       *<p/>      * This constructor is identical to       *<code>DefaultSVNRepositoryPool(authManager, tunnelProvider, DEFAULT_IDLE_TIMEOUT, true)</code>.      *       * @param authManager      an authentication driver      * @param tunnelProvider   a tunnel provider      */
specifier|public
name|DefaultSVNRepositoryPool
parameter_list|(
name|ISVNAuthenticationManager
name|authManager
parameter_list|,
name|ISVNTunnelProvider
name|tunnelProvider
parameter_list|)
block|{
name|this
argument_list|(
name|authManager
argument_list|,
name|tunnelProvider
argument_list|,
name|DEFAULT_IDLE_TIMEOUT
argument_list|,
literal|true
argument_list|)
expr_stmt|;
block|}
comment|/**      * Constructs a<b>DefaultSVNRepositoryPool</b> instance      * that represents {@link #RUNTIME_POOL} objects pool.       *<b>SVNRepository</b> objects created by this instance will      * use a single socket connection.      *       * @param authManager      an authentication driver      * @param tunnelProvider   a tunnel provider      * @param timeout          inactivity timeout after which open connections should be closed       * @param keepConnection   whether to keep connection open       */
specifier|public
name|DefaultSVNRepositoryPool
parameter_list|(
name|ISVNAuthenticationManager
name|authManager
parameter_list|,
name|ISVNTunnelProvider
name|tunnelProvider
parameter_list|,
name|long
name|timeout
parameter_list|,
name|boolean
name|keepConnection
parameter_list|)
block|{
name|myAuthManager
operator|=
name|authManager
expr_stmt|;
name|myTunnelProvider
operator|=
name|tunnelProvider
expr_stmt|;
name|myDebugLog
operator|=
name|SVNDebugLog
operator|.
name|getDefaultLog
argument_list|()
expr_stmt|;
name|myTimeout
operator|=
name|timeout
operator|>
literal|0
condition|?
name|timeout
else|:
name|DEFAULT_IDLE_TIMEOUT
expr_stmt|;
name|myIsKeepConnection
operator|=
name|keepConnection
expr_stmt|;
name|myTimeout
operator|=
name|timeout
expr_stmt|;
synchronized|synchronized
init|(
name|DefaultSVNRepositoryPool
operator|.
name|class
init|)
block|{
if|if
condition|(
name|ourTimer
operator|==
literal|null
condition|)
block|{
name|ourTimer
operator|=
operator|new
name|Timer
argument_list|(
literal|true
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|myIsKeepConnection
condition|)
block|{
name|myTimer
operator|=
name|ourTimer
expr_stmt|;
try|try
block|{
name|myTimer
operator|.
name|schedule
argument_list|(
operator|new
name|TimeoutTask
argument_list|()
argument_list|,
literal|10000
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IllegalStateException
name|e
parameter_list|)
block|{
comment|// Timer already cancelled error.
name|SVNDebugLog
operator|.
name|getDefaultLog
argument_list|()
operator|.
name|logError
argument_list|(
name|SVNLogType
operator|.
name|DEFAULT
argument_list|,
name|e
argument_list|)
expr_stmt|;
name|ourTimer
operator|=
operator|new
name|Timer
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|myTimer
operator|=
name|ourTimer
expr_stmt|;
name|myTimer
operator|.
name|schedule
argument_list|(
operator|new
name|TimeoutTask
argument_list|()
argument_list|,
literal|10000
argument_list|)
expr_stmt|;
block|}
block|}
name|ourInstanceCount
operator|++
expr_stmt|;
block|}
block|}
comment|/**      * Constructs a<b>DefaultSVNRepositoryPool</b> instance.      *       * @param authManager         an authentication driver      * @param tunnelProvider      a tunnel provider        * @param keepConnections     if<span class="javakeyword">true</span>      *                            then<b>SVNRepository</b> objects will keep       *                            a single connection for accessing a repository,      *                            if<span class="javakeyword">false</span> - open       *                            a new connection per each repository access operation      * @param poolMode            a mode of this object represented by      *                            one of the constant fields of<b>DefaultSVNRepositoryPool</b>      * @deprecated      */
specifier|public
name|DefaultSVNRepositoryPool
parameter_list|(
name|ISVNAuthenticationManager
name|authManager
parameter_list|,
name|ISVNTunnelProvider
name|tunnelProvider
parameter_list|,
name|boolean
name|keepConnections
parameter_list|,
name|int
name|poolMode
parameter_list|)
block|{
name|this
argument_list|(
name|authManager
argument_list|,
name|tunnelProvider
argument_list|)
expr_stmt|;
block|}
comment|/**      * Creates a new<b>SVNRepository</b> driver object.      * if<code>mayReuse</code> is<span class="javakeyword">true</span>       * and the mode of this<b>DefaultSVNRepositoryPool</b> object is not       * {@link #NO_POOL} then first tries to find the<b>SVNRepository</b>      * object in the pool for the given protocol. If the object is not found,      * creates a new one for that protocol, caches it in the pool and returns      * back.       *       *<p>      *<b>NOTE:</b> be careful when simultaneously using several<b>SVNRepository</b>      * drivers for the same protocol - since there can be only one driver object in      * the pool per a protocol, creating two objects for the same protocol      * with<code>mayReuse</code> set to<span class="javakeyword">true</span>,       * actually returns the same single object stored in the thread pool.       *       * @param url             a repository location for which a driver      *                        is to be created      * @param mayReuse        if<span class="javakeyword">true</span> then      *<b>SVNRepository</b> object is reusable       * @return                a new<b>SVNRepository</b> driver object      * @throws SVNException         * @see                   org.tmatesoft.svn.core.io.SVNRepository                                          *       */
specifier|public
specifier|synchronized
name|SVNRepository
name|createRepository
parameter_list|(
name|SVNURL
name|url
parameter_list|,
name|boolean
name|mayReuse
parameter_list|)
throws|throws
name|SVNException
block|{
synchronized|synchronized
init|(
name|DefaultSVNRepositoryPool
operator|.
name|class
init|)
block|{
if|if
condition|(
name|myIsKeepConnection
operator|&&
name|myTimer
operator|==
literal|null
operator|&&
name|ourTimer
operator|!=
literal|null
condition|)
block|{
name|myTimer
operator|=
name|ourTimer
expr_stmt|;
name|myTimer
operator|.
name|schedule
argument_list|(
operator|new
name|TimeoutTask
argument_list|()
argument_list|,
literal|10000
argument_list|)
expr_stmt|;
block|}
block|}
name|SVNRepository
name|repos
init|=
literal|null
decl_stmt|;
name|Map
name|pool
init|=
name|getPool
argument_list|()
decl_stmt|;
if|if
condition|(
operator|!
name|mayReuse
operator|||
name|pool
operator|==
literal|null
condition|)
block|{
name|repos
operator|=
name|SVNRepositoryFactory
operator|.
name|create
argument_list|(
name|url
argument_list|,
name|this
argument_list|)
expr_stmt|;
name|repos
operator|.
name|setAuthenticationManager
argument_list|(
name|myAuthManager
argument_list|)
expr_stmt|;
name|repos
operator|.
name|setTunnelProvider
argument_list|(
name|myTunnelProvider
argument_list|)
expr_stmt|;
name|repos
operator|.
name|setDebugLog
argument_list|(
name|myDebugLog
argument_list|)
expr_stmt|;
name|repos
operator|.
name|setCanceller
argument_list|(
name|myCanceller
argument_list|)
expr_stmt|;
return|return
name|repos
return|;
block|}
name|repos
operator|=
operator|(
name|SVNRepository
operator|)
name|pool
operator|.
name|get
argument_list|(
name|url
operator|.
name|getProtocol
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|repos
operator|!=
literal|null
condition|)
block|{
name|repos
operator|.
name|setLocation
argument_list|(
name|url
argument_list|,
literal|false
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|repos
operator|=
name|SVNRepositoryFactory
operator|.
name|create
argument_list|(
name|url
argument_list|,
name|this
argument_list|)
expr_stmt|;
comment|// add listener.
if|if
condition|(
name|myIsKeepConnection
condition|)
block|{
name|repos
operator|.
name|addConnectionListener
argument_list|(
name|this
argument_list|)
expr_stmt|;
block|}
name|pool
operator|.
name|put
argument_list|(
name|url
operator|.
name|getProtocol
argument_list|()
argument_list|,
name|repos
argument_list|)
expr_stmt|;
block|}
name|repos
operator|.
name|setAuthenticationManager
argument_list|(
name|myAuthManager
argument_list|)
expr_stmt|;
name|repos
operator|.
name|setTunnelProvider
argument_list|(
name|myTunnelProvider
argument_list|)
expr_stmt|;
name|repos
operator|.
name|setDebugLog
argument_list|(
name|myDebugLog
argument_list|)
expr_stmt|;
name|repos
operator|.
name|setCanceller
argument_list|(
name|myCanceller
argument_list|)
expr_stmt|;
return|return
name|repos
return|;
block|}
comment|/**      * Sets the given authentication instance to this pool and to all {@link SVNRepository} objects       * stored in this pool.       *       * @param authManager    authentication manager instance       */
specifier|public
name|void
name|setAuthenticationManager
parameter_list|(
name|ISVNAuthenticationManager
name|authManager
parameter_list|)
block|{
name|myAuthManager
operator|=
name|authManager
expr_stmt|;
name|Map
name|pool
init|=
name|getPool
argument_list|()
decl_stmt|;
for|for
control|(
name|Iterator
name|protocols
init|=
name|pool
operator|.
name|keySet
argument_list|()
operator|.
name|iterator
argument_list|()
init|;
name|protocols
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|String
name|key
init|=
operator|(
name|String
operator|)
name|protocols
operator|.
name|next
argument_list|()
decl_stmt|;
name|SVNRepository
name|repository
init|=
operator|(
name|SVNRepository
operator|)
name|pool
operator|.
name|get
argument_list|(
name|key
argument_list|)
decl_stmt|;
name|repository
operator|.
name|setAuthenticationManager
argument_list|(
name|myAuthManager
argument_list|)
expr_stmt|;
block|}
block|}
comment|/**      * Says if the given<b>SVNRepository</b> driver object should      * keep a connection opened. If this object was created with      *<code>keepConnections</code> set to<span class="javakeyword">true</span>      * and if<code>repository</code> is not created for the       *<span class="javastring">"svn+ssh"</span> protocol (since for this protocol there's      * no extra need to keep a connection opened - it remains opened), this      * method returns<span class="javakeyword">true</span>.      *        * @param  repository  an<b>SVNRepository</b> driver       * @return<span class="javakeyword">true</span> if       *                     the driver should keep a connection      */
specifier|public
name|boolean
name|keepConnection
parameter_list|(
name|SVNRepository
name|repository
parameter_list|)
block|{
return|return
name|myIsKeepConnection
return|;
block|}
comment|/**      * Closes connections of cached<b>SVNRepository</b> objects.       *       *<p>      * Actually, calls the {@link #dispose()} routine.      *        * @param shutdownAll if<span class="javakeyword">true</span> - closes      *                    connections of all the cached objects, otherwise only      *                    connections of those cached objects which owner threads      *                    have already disposed      * @see               SVNRepository                                          */
specifier|public
specifier|synchronized
name|void
name|shutdownConnections
parameter_list|(
name|boolean
name|shutdownAll
parameter_list|)
block|{
name|dispose
argument_list|()
expr_stmt|;
block|}
comment|/**      * Disposes this pool. Clears all inactive {@link SVNRepository} objects from this pool.      *       * @since 1.2.0       */
specifier|public
name|void
name|dispose
parameter_list|()
block|{
synchronized|synchronized
init|(
name|myInactiveRepositories
init|)
block|{
name|myInactiveRepositories
operator|.
name|clear
argument_list|()
expr_stmt|;
name|myTimer
operator|=
literal|null
expr_stmt|;
block|}
name|Map
name|pool
init|=
name|getPool
argument_list|()
decl_stmt|;
for|for
control|(
name|Iterator
name|protocols
init|=
name|pool
operator|.
name|keySet
argument_list|()
operator|.
name|iterator
argument_list|()
init|;
name|protocols
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|String
name|key
init|=
operator|(
name|String
operator|)
name|protocols
operator|.
name|next
argument_list|()
decl_stmt|;
name|SVNRepository
name|repository
init|=
operator|(
name|SVNRepository
operator|)
name|pool
operator|.
name|get
argument_list|(
name|key
argument_list|)
decl_stmt|;
name|repository
operator|.
name|closeSession
argument_list|()
expr_stmt|;
block|}
name|myPool
operator|=
literal|null
expr_stmt|;
synchronized|synchronized
init|(
name|DefaultSVNRepositoryPool
operator|.
name|class
init|)
block|{
name|ourInstanceCount
operator|--
expr_stmt|;
if|if
condition|(
name|ourInstanceCount
operator|<=
literal|0
condition|)
block|{
name|ourInstanceCount
operator|=
literal|0
expr_stmt|;
name|shutdownTimer
argument_list|()
expr_stmt|;
block|}
block|}
block|}
comment|/**      * Stops the daemon thread that checks whether there are any<code>SVNRepository</code> objects       * expired.      *       * @see   #connectionClosed(SVNRepository)      * @since 1.1.5      */
specifier|public
specifier|static
name|void
name|shutdownTimer
parameter_list|()
block|{
synchronized|synchronized
init|(
name|DefaultSVNRepositoryPool
operator|.
name|class
init|)
block|{
if|if
condition|(
name|ourTimer
operator|!=
literal|null
condition|)
block|{
name|ourTimer
operator|.
name|cancel
argument_list|()
expr_stmt|;
name|ourTimer
operator|=
literal|null
expr_stmt|;
block|}
block|}
block|}
comment|// no caching in this class
comment|/**      * Does nothing.      *       * @param repository  an<b>SVNRepository</b> driver (to distinguish      *                    that repository for which this message is actual)      * @param revision    a revision number      * @param message     the commit message for<code>revision</code>      */
specifier|public
name|void
name|saveCommitMessage
parameter_list|(
name|SVNRepository
name|repository
parameter_list|,
name|long
name|revision
parameter_list|,
name|String
name|message
parameter_list|)
block|{
block|}
comment|/**      * Returns<span class="javakeyword">null</span>.      *       * @param repository  an<b>SVNRepository</b> driver (to distinguish      *                    that repository for which a commit message is requested)      * @param revision    a revision number      * @return            the commit message for<code>revision</code>      */
specifier|public
name|String
name|getCommitMessage
parameter_list|(
name|SVNRepository
name|repository
parameter_list|,
name|long
name|revision
parameter_list|)
block|{
return|return
literal|null
return|;
block|}
comment|/**      * Returns<span class="javakeyword">false</span>.      *       * @param repository  an<b>SVNRepository</b> driver (to distinguish      *                    that repository for which a commit message is requested)      * @param revision    a revision number      * @return<span class="javakeyword">true</span> if the cache      *                    has got a message for the given repository and revision,      *<span class="javakeyword">false</span> otherwise       */
specifier|public
name|boolean
name|hasCommitMessage
parameter_list|(
name|SVNRepository
name|repository
parameter_list|,
name|long
name|revision
parameter_list|)
block|{
return|return
literal|false
return|;
block|}
comment|/**      * Places the specified<code>repository</code> into the pool of inactive<code>SVNRepository</code>       * objects.       *       *<p/>      * If this pool keeps connections open (refer to the<code>keepConnection</code> parameter of the       * {@link #DefaultSVNRepositoryPool(ISVNAuthenticationManager, ISVNTunnelProvider, long, boolean) constructor}),       * then each<code>SVNRepository</code> object which is passed to this method (what means it finished       * the operation), must be reused in a period of time not greater than the timeout value. The timeout value       * is either equal to the value passed to the {@link #DefaultSVNRepositoryPool(ISVNAuthenticationManager, ISVNTunnelProvider, long, boolean) constructor},       * or it defaults to 60 seconds if no valid timeout value was provided. Otherwise the repository object will       * be {@link SVNRepository#closeSession() closed}. Timeout checking occurs one time in 10 seconds. This       * behavior - closing repository objects after timeout - can be changed by switching off the timer thread       * via {@link #shutdownTimer()}.         *       * @param repository repository access object      * @since 1.1.4      */
specifier|public
name|void
name|connectionClosed
parameter_list|(
specifier|final
name|SVNRepository
name|repository
parameter_list|)
block|{
comment|// start inactivity timer.
synchronized|synchronized
init|(
name|myInactiveRepositories
init|)
block|{
name|myInactiveRepositories
operator|.
name|put
argument_list|(
name|repository
argument_list|,
operator|new
name|Long
argument_list|(
name|System
operator|.
name|currentTimeMillis
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
comment|// schedule timeout cleanup.
block|}
block|}
comment|/**      * Removes the specified<code>repository</code> object from the pool of inactive<code>SVNRepository</code>      * objects held by this object. This method is synchronized.      *       * @param repository repository access object to remove from the pool      * @since 1.1.4      */
specifier|public
name|void
name|connectionOpened
parameter_list|(
name|SVNRepository
name|repository
parameter_list|)
block|{
synchronized|synchronized
init|(
name|myInactiveRepositories
init|)
block|{
name|myInactiveRepositories
operator|.
name|remove
argument_list|(
name|repository
argument_list|)
expr_stmt|;
block|}
block|}
comment|/**      * Sets a canceller to be used in all {@link SVNRepository} objects produced by this      * pool.      *       * @param canceller caller's canceller      * @since 1.1.4      */
specifier|public
name|void
name|setCanceller
parameter_list|(
name|ISVNCanceller
name|canceller
parameter_list|)
block|{
name|myCanceller
operator|=
name|canceller
expr_stmt|;
name|Map
name|pool
init|=
name|getPool
argument_list|()
decl_stmt|;
for|for
control|(
name|Iterator
name|protocols
init|=
name|pool
operator|.
name|keySet
argument_list|()
operator|.
name|iterator
argument_list|()
init|;
name|protocols
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|String
name|key
init|=
operator|(
name|String
operator|)
name|protocols
operator|.
name|next
argument_list|()
decl_stmt|;
name|SVNRepository
name|repository
init|=
operator|(
name|SVNRepository
operator|)
name|pool
operator|.
name|get
argument_list|(
name|key
argument_list|)
decl_stmt|;
name|repository
operator|.
name|setCanceller
argument_list|(
name|canceller
argument_list|)
expr_stmt|;
block|}
block|}
comment|/**      * Sets a debug logger to be used in all {@link SVNRepository} objects produced by this      * pool.      *       * @param log debug logger      * @since 1.1.4       */
specifier|public
name|void
name|setDebugLog
parameter_list|(
name|ISVNDebugLog
name|log
parameter_list|)
block|{
name|myDebugLog
operator|=
name|log
operator|==
literal|null
condition|?
name|SVNDebugLog
operator|.
name|getDefaultLog
argument_list|()
else|:
name|log
expr_stmt|;
name|Map
name|pool
init|=
name|getPool
argument_list|()
decl_stmt|;
for|for
control|(
name|Iterator
name|protocols
init|=
name|pool
operator|.
name|keySet
argument_list|()
operator|.
name|iterator
argument_list|()
init|;
name|protocols
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|String
name|key
init|=
operator|(
name|String
operator|)
name|protocols
operator|.
name|next
argument_list|()
decl_stmt|;
name|SVNRepository
name|repository
init|=
operator|(
name|SVNRepository
operator|)
name|pool
operator|.
name|get
argument_list|(
name|key
argument_list|)
decl_stmt|;
name|repository
operator|.
name|setDebugLog
argument_list|(
name|myDebugLog
argument_list|)
expr_stmt|;
block|}
block|}
specifier|private
name|long
name|getTimeout
parameter_list|()
block|{
return|return
name|myTimeout
return|;
block|}
specifier|private
name|Map
name|getPool
parameter_list|()
block|{
if|if
condition|(
name|myPool
operator|==
literal|null
condition|)
block|{
name|myPool
operator|=
operator|new
name|SVNHashMap
argument_list|()
expr_stmt|;
block|}
return|return
name|myPool
return|;
block|}
specifier|private
class|class
name|TimeoutTask
extends|extends
name|TimerTask
block|{
specifier|public
name|void
name|run
parameter_list|()
block|{
name|boolean
name|scheduled
init|=
literal|false
decl_stmt|;
try|try
block|{
name|long
name|currentTime
init|=
name|System
operator|.
name|currentTimeMillis
argument_list|()
decl_stmt|;
synchronized|synchronized
init|(
name|myInactiveRepositories
init|)
block|{
for|for
control|(
name|Iterator
name|repositories
init|=
name|myInactiveRepositories
operator|.
name|keySet
argument_list|()
operator|.
name|iterator
argument_list|()
init|;
name|repositories
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|SVNRepository
name|repos
init|=
operator|(
name|SVNRepository
operator|)
name|repositories
operator|.
name|next
argument_list|()
decl_stmt|;
name|long
name|time
init|=
operator|(
operator|(
name|Long
operator|)
name|myInactiveRepositories
operator|.
name|get
argument_list|(
name|repos
argument_list|)
operator|)
operator|.
name|longValue
argument_list|()
decl_stmt|;
if|if
condition|(
name|currentTime
operator|-
name|time
operator|>=
name|getTimeout
argument_list|()
condition|)
block|{
name|repositories
operator|.
name|remove
argument_list|()
expr_stmt|;
name|repos
operator|.
name|closeSession
argument_list|()
expr_stmt|;
block|}
block|}
if|if
condition|(
name|myTimer
operator|!=
literal|null
condition|)
block|{
name|myTimer
operator|.
name|schedule
argument_list|(
operator|new
name|TimeoutTask
argument_list|()
argument_list|,
literal|10000
argument_list|)
expr_stmt|;
name|scheduled
operator|=
literal|true
expr_stmt|;
block|}
block|}
block|}
catch|catch
parameter_list|(
name|Throwable
name|th
parameter_list|)
block|{
name|SVNDebugLog
operator|.
name|getDefaultLog
argument_list|()
operator|.
name|logSevere
argument_list|(
name|SVNLogType
operator|.
name|WC
argument_list|,
name|th
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|scheduled
operator|&&
name|myTimer
operator|!=
literal|null
condition|)
block|{
name|myTimer
operator|.
name|schedule
argument_list|(
operator|new
name|TimeoutTask
argument_list|()
argument_list|,
literal|10000
argument_list|)
expr_stmt|;
name|scheduled
operator|=
literal|true
expr_stmt|;
block|}
block|}
block|}
block|}
block|}
end_class

end_unit

