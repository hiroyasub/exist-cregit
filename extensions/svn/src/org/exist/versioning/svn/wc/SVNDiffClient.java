begin_unit|revision:1.0.0;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * ====================================================================  * Copyright (c) 2004-2010 TMate Software Ltd.  All rights reserved.  *  * This software is licensed as described in the file COPYING, which  * you should have received as part of this distribution.  The terms  * are also available at http://svnkit.com/license.html  * If newer versions of this license are posted there, you may use a  * newer version instead, at your option.  * ====================================================================  */
end_comment

begin_package
package|package
name|org
operator|.
name|exist
operator|.
name|versioning
operator|.
name|svn
operator|.
name|wc
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|File
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|OutputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collection
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Iterator
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|LinkedList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|versioning
operator|.
name|svn
operator|.
name|internal
operator|.
name|wc
operator|.
name|AbstractDiffCallback
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|versioning
operator|.
name|svn
operator|.
name|internal
operator|.
name|wc
operator|.
name|SVNAmbientDepthFilterEditor
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|versioning
operator|.
name|svn
operator|.
name|internal
operator|.
name|wc
operator|.
name|SVNCancellableEditor
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|versioning
operator|.
name|svn
operator|.
name|internal
operator|.
name|wc
operator|.
name|SVNDiffCallback
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|versioning
operator|.
name|svn
operator|.
name|internal
operator|.
name|wc
operator|.
name|SVNDiffEditor
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|versioning
operator|.
name|svn
operator|.
name|internal
operator|.
name|wc
operator|.
name|SVNDiffStatusEditor
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|versioning
operator|.
name|svn
operator|.
name|internal
operator|.
name|wc
operator|.
name|SVNErrorManager
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|versioning
operator|.
name|svn
operator|.
name|internal
operator|.
name|wc
operator|.
name|SVNEventFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|versioning
operator|.
name|svn
operator|.
name|internal
operator|.
name|wc
operator|.
name|SVNFileUtil
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|versioning
operator|.
name|svn
operator|.
name|internal
operator|.
name|wc
operator|.
name|SVNMergeDriver
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|versioning
operator|.
name|svn
operator|.
name|internal
operator|.
name|wc
operator|.
name|SVNRemoteDiffEditor
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|versioning
operator|.
name|svn
operator|.
name|internal
operator|.
name|wc
operator|.
name|admin
operator|.
name|SVNAdminArea
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|versioning
operator|.
name|svn
operator|.
name|internal
operator|.
name|wc
operator|.
name|admin
operator|.
name|SVNAdminAreaInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|versioning
operator|.
name|svn
operator|.
name|internal
operator|.
name|wc
operator|.
name|admin
operator|.
name|SVNEntry
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|versioning
operator|.
name|svn
operator|.
name|internal
operator|.
name|wc
operator|.
name|admin
operator|.
name|SVNReporter
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|versioning
operator|.
name|svn
operator|.
name|internal
operator|.
name|wc
operator|.
name|admin
operator|.
name|SVNWCAccess
import|;
end_import

begin_import
import|import
name|org
operator|.
name|tmatesoft
operator|.
name|svn
operator|.
name|core
operator|.
name|ISVNLogEntryHandler
import|;
end_import

begin_import
import|import
name|org
operator|.
name|tmatesoft
operator|.
name|svn
operator|.
name|core
operator|.
name|SVNDepth
import|;
end_import

begin_import
import|import
name|org
operator|.
name|tmatesoft
operator|.
name|svn
operator|.
name|core
operator|.
name|SVNErrorCode
import|;
end_import

begin_import
import|import
name|org
operator|.
name|tmatesoft
operator|.
name|svn
operator|.
name|core
operator|.
name|SVNErrorMessage
import|;
end_import

begin_import
import|import
name|org
operator|.
name|tmatesoft
operator|.
name|svn
operator|.
name|core
operator|.
name|SVNException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|tmatesoft
operator|.
name|svn
operator|.
name|core
operator|.
name|SVNMergeRange
import|;
end_import

begin_import
import|import
name|org
operator|.
name|tmatesoft
operator|.
name|svn
operator|.
name|core
operator|.
name|SVNMergeRangeList
import|;
end_import

begin_import
import|import
name|org
operator|.
name|tmatesoft
operator|.
name|svn
operator|.
name|core
operator|.
name|SVNNodeKind
import|;
end_import

begin_import
import|import
name|org
operator|.
name|tmatesoft
operator|.
name|svn
operator|.
name|core
operator|.
name|SVNURL
import|;
end_import

begin_import
import|import
name|org
operator|.
name|tmatesoft
operator|.
name|svn
operator|.
name|core
operator|.
name|auth
operator|.
name|ISVNAuthenticationManager
import|;
end_import

begin_import
import|import
name|org
operator|.
name|tmatesoft
operator|.
name|svn
operator|.
name|core
operator|.
name|internal
operator|.
name|util
operator|.
name|SVNHashMap
import|;
end_import

begin_import
import|import
name|org
operator|.
name|tmatesoft
operator|.
name|svn
operator|.
name|core
operator|.
name|internal
operator|.
name|util
operator|.
name|SVNMergeInfoUtil
import|;
end_import

begin_import
import|import
name|org
operator|.
name|tmatesoft
operator|.
name|svn
operator|.
name|core
operator|.
name|internal
operator|.
name|util
operator|.
name|SVNPathUtil
import|;
end_import

begin_import
import|import
name|org
operator|.
name|tmatesoft
operator|.
name|svn
operator|.
name|core
operator|.
name|io
operator|.
name|ISVNReporter
import|;
end_import

begin_import
import|import
name|org
operator|.
name|tmatesoft
operator|.
name|svn
operator|.
name|core
operator|.
name|io
operator|.
name|ISVNReporterBaton
import|;
end_import

begin_import
import|import
name|org
operator|.
name|tmatesoft
operator|.
name|svn
operator|.
name|core
operator|.
name|io
operator|.
name|SVNCapability
import|;
end_import

begin_import
import|import
name|org
operator|.
name|tmatesoft
operator|.
name|svn
operator|.
name|core
operator|.
name|io
operator|.
name|SVNLocationEntry
import|;
end_import

begin_import
import|import
name|org
operator|.
name|tmatesoft
operator|.
name|svn
operator|.
name|core
operator|.
name|io
operator|.
name|SVNRepository
import|;
end_import

begin_import
import|import
name|org
operator|.
name|tmatesoft
operator|.
name|svn
operator|.
name|core
operator|.
name|io
operator|.
name|ISVNEditor
import|;
end_import

begin_import
import|import
name|org
operator|.
name|tmatesoft
operator|.
name|svn
operator|.
name|core
operator|.
name|wc
operator|.
name|ISVNDiffGenerator
import|;
end_import

begin_import
import|import
name|org
operator|.
name|tmatesoft
operator|.
name|svn
operator|.
name|core
operator|.
name|wc
operator|.
name|ISVNDiffStatusHandler
import|;
end_import

begin_import
import|import
name|org
operator|.
name|tmatesoft
operator|.
name|svn
operator|.
name|core
operator|.
name|wc
operator|.
name|ISVNRepositoryPool
import|;
end_import

begin_import
import|import
name|org
operator|.
name|tmatesoft
operator|.
name|svn
operator|.
name|core
operator|.
name|wc
operator|.
name|SVNDiffOptions
import|;
end_import

begin_import
import|import
name|org
operator|.
name|tmatesoft
operator|.
name|svn
operator|.
name|core
operator|.
name|wc
operator|.
name|SVNRevision
import|;
end_import

begin_import
import|import
name|org
operator|.
name|tmatesoft
operator|.
name|svn
operator|.
name|core
operator|.
name|wc
operator|.
name|SVNRevisionRange
import|;
end_import

begin_import
import|import
name|org
operator|.
name|tmatesoft
operator|.
name|svn
operator|.
name|util
operator|.
name|SVNLogType
import|;
end_import

begin_comment
comment|/**  * The<b>SVNDiffClient</b> class provides methods allowing to get differences  * between versioned items ('diff' operation) as well as ones intended for   * merging file contents.  *   *<p>  * Here's a list of the<b>SVNDiffClient</b>'s methods   * matched against corresponing commands of the SVN command line   * client:  *   *<table cellpadding="3" cellspacing="1" border="0" width="40%" bgcolor="#999933">  *<tr bgcolor="#ADB8D9" align="left">  *<td><b>SVNKit</b></td>  *<td><b>Subversion</b></td>  *</tr>     *<tr bgcolor="#EAEAEA" align="left">  *<td>doDiff()</td><td>'svn diff'</td>  *</tr>  *<tr bgcolor="#EAEAEA" align="left">  *<td>doDiffStatus()</td><td>'svn diff --summarize'</td>  *</tr>  *<tr bgcolor="#EAEAEA" align="left">  *<td>doMerge()</td><td>'svn merge'</td>  *</tr>  *<tr bgcolor="#EAEAEA" align="left">  *<td>doGetLogXXXMergeInfo()</td><td>'svn mergeinfo'</td>  *</tr>  *</table>  *   * @version 1.3  * @since   1.2  * @author  TMate Software Ltd.  */
end_comment

begin_class
specifier|public
class|class
name|SVNDiffClient
extends|extends
name|SVNMergeDriver
block|{
specifier|private
name|ISVNDiffGenerator
name|myDiffGenerator
decl_stmt|;
specifier|private
name|SVNDiffOptions
name|myDiffOptions
decl_stmt|;
comment|/**      * Constructs and initializes an<b>SVNDiffClient</b> object      * with the specified run-time configuration and authentication       * drivers.      *       *<p/>      * If<code>options</code> is<span class="javakeyword">null</span>,      * then this<b>SVNDiffClient</b> will be using a default run-time      * configuration driver  which takes client-side settings from the       * default SVN's run-time configuration area but is not able to      * change those settings (read more on {@link ISVNOptions} and {@link SVNWCUtil}).        *       *<p/>      * If<code>authManager</code> is<span class="javakeyword">null</span>,      * then this<b>SVNDiffClient</b> will be using a default authentication      * and network layers driver (see {@link SVNWCUtil#createDefaultAuthenticationManager()})      * which uses server-side settings and auth storage from the       * default SVN's run-time configuration area (or system properties      * if that area is not found).      *       * @param authManager an authentication and network layers driver      * @param options     a run-time configuration options driver           */
specifier|public
name|SVNDiffClient
parameter_list|(
name|ISVNAuthenticationManager
name|authManager
parameter_list|,
name|ISVNOptions
name|options
parameter_list|)
block|{
name|super
argument_list|(
name|authManager
argument_list|,
name|options
argument_list|)
expr_stmt|;
block|}
comment|/**      * Constructs and initializes an<b>SVNDiffClient</b> object      * with the specified run-time configuration and repository pool object.      *       *<p/>      * If<code>options</code> is<span class="javakeyword">null</span>,      * then this<b>SVNDiffClient</b> will be using a default run-time      * configuration driver  which takes client-side settings from the      * default SVN's run-time configuration area but is not able to      * change those settings (read more on {@link ISVNOptions} and {@link SVNWCUtil}).      *       *<p/>      * If<code>repositoryPool</code> is<span class="javakeyword">null</span>,      * then {@link org.tmatesoft.svn.core.io.SVNRepositoryFactory} will be used to create       * {@link SVNRepository repository access objects}.      *      * @param repositoryPool   a repository pool object      * @param options          a run-time configuration options driver      */
specifier|public
name|SVNDiffClient
parameter_list|(
name|ISVNRepositoryPool
name|repositoryPool
parameter_list|,
name|ISVNOptions
name|options
parameter_list|)
block|{
name|super
argument_list|(
name|repositoryPool
argument_list|,
name|options
argument_list|)
expr_stmt|;
block|}
comment|/**      * Sets the specified diff driver for this object to use for      * generating and writing file differences to an otput stream.      *       *<p>      * If no specific diff driver was set in this way, a default one      * will be used (see {@link DefaultSVNDiffGenerator}).       *       * @param diffGenerator a diff driver      * @see   #getDiffGenerator()      */
specifier|public
name|void
name|setDiffGenerator
parameter_list|(
name|ISVNDiffGenerator
name|diffGenerator
parameter_list|)
block|{
name|myDiffGenerator
operator|=
name|diffGenerator
expr_stmt|;
block|}
comment|/**      * Returns the diff driver being in use.      *        *<p>      * If no specific diff driver was previously provided, a default one      * will be returned (see {@link DefaultSVNDiffGenerator}).       *       * @return the diff driver being in use      * @see    #setDiffGenerator(ISVNDiffGenerator)      */
specifier|public
name|ISVNDiffGenerator
name|getDiffGenerator
parameter_list|()
block|{
if|if
condition|(
name|myDiffGenerator
operator|==
literal|null
condition|)
block|{
name|DefaultSVNDiffGenerator
name|defaultDiffGenerator
init|=
operator|new
name|DefaultSVNDiffGenerator
argument_list|()
decl_stmt|;
name|defaultDiffGenerator
operator|.
name|setOptions
argument_list|(
name|getOptions
argument_list|()
argument_list|)
expr_stmt|;
name|myDiffGenerator
operator|=
name|defaultDiffGenerator
expr_stmt|;
block|}
return|return
name|myDiffGenerator
return|;
block|}
comment|/**      * Sets diff options for this client to use in merge operations.      *       * @param diffOptions diff options object      */
specifier|public
name|void
name|setMergeOptions
parameter_list|(
name|SVNDiffOptions
name|diffOptions
parameter_list|)
block|{
name|myDiffOptions
operator|=
name|diffOptions
expr_stmt|;
block|}
comment|/**      * Gets the diff options that are used in merge operations by this client.       * If none was provided by the user, one created as<code>new SVNDiffOptions()</code> will be returned      * and used further.      *       * @return diff options      */
specifier|public
name|SVNDiffOptions
name|getMergeOptions
parameter_list|()
block|{
if|if
condition|(
name|myDiffOptions
operator|==
literal|null
condition|)
block|{
name|myDiffOptions
operator|=
operator|new
name|SVNDiffOptions
argument_list|()
expr_stmt|;
block|}
return|return
name|myDiffOptions
return|;
block|}
comment|/**      * Generates the differences for the specified URL taken from the two       * specified revisions and writes the result to the provided output      * stream.      *       *<p>      * Corresponds to the SVN command line client's       *<code>'svn diff -r N:M URL'</code> command.      *       * @param  url            a repository location      * @param  pegRevision    a revision in which<code>url</code> is first looked up      * @param  rN             an old revision                                * @param  rM             a new revision      * @param  recursive<span class="javakeyword">true</span> to descend       *                        recursively      * @param  useAncestry    if<span class="javakeyword">true</span> then      *                        the paths ancestry will be noticed while calculating differences,      *                        otherwise not      * @param  result         the target {@link java.io.OutputStream} where      *                        the differences will be written to      * @throws SVNException   if one of the following is true:      *<ul>      *<li>at least one of<code>rN</code>,<code>rM</code> and      *<code>pegRevision</code> is invalid      *<li>at least one of<code>rN</code> and<code>rM</code> is      *                        a local revision (see {@link SVNRevision#isLocal()})      *<li><code>url</code> was not found in<code>rN</code>      *<li><code>url</code> was not found in<code>rM</code>      *</ul>      * @deprecated use {@link #doDiff(SVNURL, SVNRevision, SVNRevision, SVNRevision, SVNDepth, boolean, OutputStream)}       *             instead      */
specifier|public
name|void
name|doDiff
parameter_list|(
name|SVNURL
name|url
parameter_list|,
name|SVNRevision
name|pegRevision
parameter_list|,
name|SVNRevision
name|rN
parameter_list|,
name|SVNRevision
name|rM
parameter_list|,
name|boolean
name|recursive
parameter_list|,
name|boolean
name|useAncestry
parameter_list|,
name|OutputStream
name|result
parameter_list|)
throws|throws
name|SVNException
block|{
name|doDiff
argument_list|(
name|url
argument_list|,
name|pegRevision
argument_list|,
name|rN
argument_list|,
name|rM
argument_list|,
name|SVNDepth
operator|.
name|getInfinityOrFilesDepth
argument_list|(
name|recursive
argument_list|)
argument_list|,
name|useAncestry
argument_list|,
name|result
argument_list|)
expr_stmt|;
block|}
comment|/**      * Produces diff output which describes the delta between<code>url</code> in peg revision       *<code>pegRevision</code>, as it changed between<code>rN</code> and<code>rM</code>.       *       *<p/>      * If<code>pegRevision is {@link SVNRevision#isValid() invalid}, behaves identically to       * {@link #doDiff(SVNURL, SVNRevision, SVNURL, SVNRevision, SVNDepth, boolean, OutputStream)},       * using<code>url</code> for both of that function's<code>url1</code> and<code>url2</code> arguments.      *       *<p/>      * All other options are handled identically to       * {@link #doDiff(SVNURL, SVNRevision, SVNURL, SVNRevision, SVNDepth, boolean, OutputStream)}.      *      * @param  url            a repository location      * @param  pegRevision    a revision in which<code>url</code> is first looked up      * @param  rN             an old revision                                * @param  rM             a new revision      * @param  depth          tree depth to process      * @param  useAncestry    if<span class="javakeyword">true</span> then      *                        the paths ancestry will be noticed while calculating differences,      *                        otherwise not      * @param  result         the target {@link java.io.OutputStream} where      *                        the differences will be written to      * @throws SVNException   if one of the following is true:      *<ul>      *<li>exception with {@link SVNErrorCode#CLIENT_BAD_REVISION} error code -      *                        if either of<code>rN</code> and<code>rM</code> is either       *                        {@link SVNRevision#isValid() invalid} or {@link SVNRevision#isLocal() local}       *<li>exception with {@link SVNErrorCode#FS_NOT_FOUND} error code -       *<code>url</code> can not be found in either<code>rN</code> or<code>rM</code>      *</ul>      * @since                 1.2, SVN 1.5      */
specifier|public
name|void
name|doDiff
parameter_list|(
name|SVNURL
name|url
parameter_list|,
name|SVNRevision
name|pegRevision
parameter_list|,
name|SVNRevision
name|rN
parameter_list|,
name|SVNRevision
name|rM
parameter_list|,
name|SVNDepth
name|depth
parameter_list|,
name|boolean
name|useAncestry
parameter_list|,
name|OutputStream
name|result
parameter_list|)
throws|throws
name|SVNException
block|{
if|if
condition|(
operator|!
name|rN
operator|.
name|isValid
argument_list|()
operator|||
operator|!
name|rM
operator|.
name|isValid
argument_list|()
condition|)
block|{
name|SVNErrorMessage
name|err
init|=
name|SVNErrorMessage
operator|.
name|create
argument_list|(
name|SVNErrorCode
operator|.
name|CLIENT_BAD_REVISION
argument_list|,
literal|"Both rN and rM revisions should be specified"
argument_list|)
decl_stmt|;
name|SVNErrorManager
operator|.
name|error
argument_list|(
name|err
argument_list|,
name|SVNLogType
operator|.
name|DEFAULT
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|rN
operator|.
name|isLocal
argument_list|()
operator|||
name|rM
operator|.
name|isLocal
argument_list|()
condition|)
block|{
name|SVNErrorMessage
name|err
init|=
name|SVNErrorMessage
operator|.
name|create
argument_list|(
name|SVNErrorCode
operator|.
name|CLIENT_BAD_REVISION
argument_list|,
literal|"Both rN and rM revisions must be non-local for a pegged diff of an URL"
argument_list|)
decl_stmt|;
name|SVNErrorManager
operator|.
name|error
argument_list|(
name|err
argument_list|,
name|SVNLogType
operator|.
name|DEFAULT
argument_list|)
expr_stmt|;
block|}
name|getDiffGenerator
argument_list|()
operator|.
name|init
argument_list|(
name|url
operator|.
name|toString
argument_list|()
argument_list|,
name|url
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|doDiffURLURL
argument_list|(
name|url
argument_list|,
literal|null
argument_list|,
name|rN
argument_list|,
name|url
argument_list|,
literal|null
argument_list|,
name|rM
argument_list|,
name|pegRevision
argument_list|,
name|depth
argument_list|,
name|useAncestry
argument_list|,
name|result
argument_list|)
expr_stmt|;
block|}
comment|/**      * Generates the differences for the specified path taken from the two       * specified revisions and writes the result to the provided output      * stream.      *       *<p>      * If<code>rM</code> is a local revision (see {@link SVNRevision#isLocal()}),      * then the Working Copy<code>path</code> is compared with the corresponding       * repository file at revision<code>rN</code> (that is similar to the SVN command       * line client's<code>'svn diff -r N path'</code> command).       *       *<p>      * Otherwise if both<code>rN</code> and<code>rM</code> are non-local, then       * the repository location of<code>path</code> is compared for these       * revisions (<code>'svn diff -r N:M URL'</code>).      *       * @param  path           a Working Copy path      * @param  pegRevision    a revision in which the repository location of<code>path</code>       *                        is first looked up      * @param  rN             an old revision                                * @param  rM             a new revision (or a local one)      * @param  recursive<span class="javakeyword">true</span> to descend       *                        recursively      * @param  useAncestry    if<span class="javakeyword">true</span> then      *                        the paths ancestry will be noticed while calculating differences,      *                        otherwise not      * @param  result         the target {@link java.io.OutputStream} where      *                        the differences will be written to      * @throws SVNException   if one of the following is true:      *<ul>      *<li>at least one of<code>rN</code>,<code>rM</code> and      *<code>pegRevision</code> is invalid      *<li>both<code>rN</code> and<code>rM</code> are       *                        local revisions      *<li><code>path</code> was not found in<code>rN</code>      *<li><code>path</code> was not found in<code>rM</code>      *</ul>      * @deprecated            use {@link #doDiff(File, SVNRevision, SVNRevision, SVNRevision, SVNDepth, boolean, OutputStream, Collection)}      *                        instead       */
specifier|public
name|void
name|doDiff
parameter_list|(
name|File
name|path
parameter_list|,
name|SVNRevision
name|pegRevision
parameter_list|,
name|SVNRevision
name|rN
parameter_list|,
name|SVNRevision
name|rM
parameter_list|,
name|boolean
name|recursive
parameter_list|,
name|boolean
name|useAncestry
parameter_list|,
name|OutputStream
name|result
parameter_list|)
throws|throws
name|SVNException
block|{
name|doDiff
argument_list|(
name|path
argument_list|,
name|pegRevision
argument_list|,
name|rN
argument_list|,
name|rM
argument_list|,
name|SVNDepth
operator|.
name|getInfinityOrFilesDepth
argument_list|(
name|recursive
argument_list|)
argument_list|,
name|useAncestry
argument_list|,
name|result
argument_list|,
literal|null
argument_list|)
expr_stmt|;
block|}
comment|/**      * Iterates over the passed in<code>paths</code> calling       * {@link #doDiff(File, SVNRevision, SVNRevision, SVNRevision, SVNDepth, boolean, OutputStream, Collection)}       * for each one in the array.      *       * @param  paths         array of working copy paths       * @param  rN            an old revision                                * @param  rM            a new revision      * @param  pegRevision   a revision in which the repository location of<code>paths</code>       *                       is first looked up      * @param  depth         tree depth to process      * @param  useAncestry   if<span class="javakeyword">true</span> then      *                       the paths ancestry will be noticed while calculating differences,      *                       otherwise not      * @param  result        the target {@link java.io.OutputStream} where      *                       the differences will be written to      * @param  changeLists   collection with changelist names      * @throws SVNException      * @since                1.2, SVN 1.5      */
specifier|public
name|void
name|doDiff
parameter_list|(
name|File
index|[]
name|paths
parameter_list|,
name|SVNRevision
name|rN
parameter_list|,
name|SVNRevision
name|rM
parameter_list|,
name|SVNRevision
name|pegRevision
parameter_list|,
name|SVNDepth
name|depth
parameter_list|,
name|boolean
name|useAncestry
parameter_list|,
name|OutputStream
name|result
parameter_list|,
name|Collection
name|changeLists
parameter_list|)
throws|throws
name|SVNException
block|{
if|if
condition|(
name|paths
operator|==
literal|null
condition|)
block|{
return|return;
block|}
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|paths
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
name|File
name|path
init|=
name|paths
index|[
name|i
index|]
decl_stmt|;
try|try
block|{
name|doDiff
argument_list|(
name|path
argument_list|,
name|pegRevision
argument_list|,
name|rN
argument_list|,
name|rM
argument_list|,
name|depth
argument_list|,
name|useAncestry
argument_list|,
name|result
argument_list|,
name|changeLists
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|SVNException
name|svne
parameter_list|)
block|{
name|dispatchEvent
argument_list|(
name|SVNEventFactory
operator|.
name|createErrorEvent
argument_list|(
name|svne
operator|.
name|getErrorMessage
argument_list|()
argument_list|,
literal|null
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
block|}
comment|/**      * Produces diff output which describes the delta between<code>path</code> in peg revision       *<code>pegRevision</code>, as it changed between<code>rN</code> and<code>rM</code>.       *       *<p/>      * If<code>rM</code> is neither {@link SVNRevision#BASE}, nor {@link SVNRevision#WORKING}, nor       * {@link SVNRevision#COMMITTED}, and if, on the contrary,<code>rN</code> is one of the aforementioned       * revisions, then a wc-against-url diff is performed; if<code>rN</code> also is not one of those       * revision constants, then a url-against-url diff is performed. Otherwise it's a url-against-wc diff.       *       *<p/>      * If<code>pegRevision is {@link SVNRevision#isValid() invalid}, behaves identically to       * {@link #doDiff(File, SVNRevision, File, SVNRevision, SVNDepth, boolean, OutputStream, Collection)},       * using<code>path</code> for both of that function's<code>path1</code> and<code>path2</code> arguments.      *       *<p/>      * All other options are handled identically to       * {@link #doDiff(File, SVNRevision, File, SVNRevision, SVNDepth, boolean, OutputStream, Collection)}.      *      * @param  path           a Working Copy path      * @param  pegRevision    a revision in which the repository location of<code>path</code>       *                        is first looked up      * @param  rN             an old revision                                * @param  rM             a new revision      * @param  depth          tree depth to process      * @param  useAncestry    if<span class="javakeyword">true</span> then      *                        the paths ancestry will be noticed while calculating differences,      *                        otherwise not      * @param  result         the target {@link java.io.OutputStream} where      *                        the differences will be written to      * @param  changeLists    collection with changelist names      * @throws SVNException   if one of the following is true:      *<ul>      *<li>exception with {@link SVNErrorCode#CLIENT_BAD_REVISION} error code -      *                        if either of<code>rN</code> and<code>rM</code> is       *                        {@link SVNRevision#isValid() invalid}; if both<code>rN</code> and       *<code>rM</code> are either {@link SVNRevision#WORKING} or {@link SVNRevision#BASE}      *<li>exception with {@link SVNErrorCode#FS_NOT_FOUND} error code -       *<code>path</code> can not be found in either<code>rN</code> or<code>rM</code>      *</ul>      * @since                 1.2, SVN 1.5      */
specifier|public
name|void
name|doDiff
parameter_list|(
name|File
name|path
parameter_list|,
name|SVNRevision
name|pegRevision
parameter_list|,
name|SVNRevision
name|rN
parameter_list|,
name|SVNRevision
name|rM
parameter_list|,
name|SVNDepth
name|depth
parameter_list|,
name|boolean
name|useAncestry
parameter_list|,
name|OutputStream
name|result
parameter_list|,
name|Collection
name|changeLists
parameter_list|)
throws|throws
name|SVNException
block|{
if|if
condition|(
operator|!
name|rN
operator|.
name|isValid
argument_list|()
operator|||
operator|!
name|rM
operator|.
name|isValid
argument_list|()
condition|)
block|{
name|SVNErrorMessage
name|err
init|=
name|SVNErrorMessage
operator|.
name|create
argument_list|(
name|SVNErrorCode
operator|.
name|CLIENT_BAD_REVISION
argument_list|,
literal|"Both rN and rM revisions should be specified"
argument_list|)
decl_stmt|;
name|SVNErrorManager
operator|.
name|error
argument_list|(
name|err
argument_list|,
name|SVNLogType
operator|.
name|DEFAULT
argument_list|)
expr_stmt|;
block|}
name|boolean
name|rNisLocal
init|=
name|rN
operator|==
name|SVNRevision
operator|.
name|BASE
operator|||
name|rN
operator|==
name|SVNRevision
operator|.
name|WORKING
decl_stmt|;
name|boolean
name|rMisLocal
init|=
name|rM
operator|==
name|SVNRevision
operator|.
name|BASE
operator|||
name|rM
operator|==
name|SVNRevision
operator|.
name|WORKING
decl_stmt|;
if|if
condition|(
name|rNisLocal
operator|&&
name|rMisLocal
condition|)
block|{
name|SVNErrorMessage
name|err
init|=
name|SVNErrorMessage
operator|.
name|create
argument_list|(
name|SVNErrorCode
operator|.
name|CLIENT_BAD_REVISION
argument_list|,
literal|"At least one revision must be non-local for a pegged diff"
argument_list|)
decl_stmt|;
name|SVNErrorManager
operator|.
name|error
argument_list|(
name|err
argument_list|,
name|SVNLogType
operator|.
name|DEFAULT
argument_list|)
expr_stmt|;
block|}
name|path
operator|=
name|path
operator|.
name|getAbsoluteFile
argument_list|()
expr_stmt|;
name|getDiffGenerator
argument_list|()
operator|.
name|init
argument_list|(
name|path
operator|.
name|getAbsolutePath
argument_list|()
argument_list|,
name|path
operator|.
name|getAbsolutePath
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
operator|(
name|rM
operator|==
name|SVNRevision
operator|.
name|BASE
operator|||
name|rM
operator|==
name|SVNRevision
operator|.
name|WORKING
operator|||
name|rM
operator|==
name|SVNRevision
operator|.
name|COMMITTED
operator|)
condition|)
block|{
if|if
condition|(
operator|(
name|rN
operator|==
name|SVNRevision
operator|.
name|BASE
operator|||
name|rN
operator|==
name|SVNRevision
operator|.
name|WORKING
operator|||
name|rN
operator|==
name|SVNRevision
operator|.
name|COMMITTED
operator|)
condition|)
block|{
name|doDiffURLWC
argument_list|(
name|path
argument_list|,
name|rM
argument_list|,
name|pegRevision
argument_list|,
name|path
argument_list|,
name|rN
argument_list|,
literal|true
argument_list|,
name|depth
argument_list|,
name|useAncestry
argument_list|,
name|result
argument_list|,
name|changeLists
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|doDiffURLURL
argument_list|(
literal|null
argument_list|,
name|path
argument_list|,
name|rN
argument_list|,
literal|null
argument_list|,
name|path
argument_list|,
name|rM
argument_list|,
name|pegRevision
argument_list|,
name|depth
argument_list|,
name|useAncestry
argument_list|,
name|result
argument_list|)
expr_stmt|;
block|}
block|}
else|else
block|{
comment|// head, prev,date,number will go here.
name|doDiffURLWC
argument_list|(
name|path
argument_list|,
name|rN
argument_list|,
name|pegRevision
argument_list|,
name|path
argument_list|,
name|rM
argument_list|,
literal|false
argument_list|,
name|depth
argument_list|,
name|useAncestry
argument_list|,
name|result
argument_list|,
name|changeLists
argument_list|)
expr_stmt|;
block|}
block|}
comment|/**      * Generates the differences for the specified URLs taken from the two       * specified revisions and writes the result to the provided output      * stream.      *       *<p>      * Corresponds to the SVN command line client's       *<code>'svn diff -r N:M URL1 URL2'</code> command.      *       * @param  url1           the first URL to be compared      * @param  rN             a revision of<code>url1</code>      * @param  url2           the second URL to be compared      * @param  rM             a revision of<code>url2</code>      * @param  recursive<span class="javakeyword">true</span> to descend       *                        recursively      * @param  useAncestry    if<span class="javakeyword">true</span> then      *                        the paths ancestry will be noticed while calculating differences,      *                        otherwise not      * @param  result         the target {@link java.io.OutputStream} where      *                        the differences will be written to      * @throws SVNException   if one of the following is true:      *<ul>      *<li>at least one of<code>rN</code> and<code>rM</code> is      *                        invalid      *<li><code>url1</code> was not found in<code>rN</code>      *<li><code>url2</code> was not found in<code>rM</code>      *</ul>      * @deprecated use {@link #doDiff(SVNURL, SVNRevision, SVNURL, SVNRevision, SVNDepth, boolean, OutputStream)}      *             instead      */
specifier|public
name|void
name|doDiff
parameter_list|(
name|SVNURL
name|url1
parameter_list|,
name|SVNRevision
name|rN
parameter_list|,
name|SVNURL
name|url2
parameter_list|,
name|SVNRevision
name|rM
parameter_list|,
name|boolean
name|recursive
parameter_list|,
name|boolean
name|useAncestry
parameter_list|,
name|OutputStream
name|result
parameter_list|)
throws|throws
name|SVNException
block|{
name|doDiff
argument_list|(
name|url1
argument_list|,
name|rN
argument_list|,
name|url2
argument_list|,
name|rM
argument_list|,
name|SVNDepth
operator|.
name|getInfinityOrFilesDepth
argument_list|(
name|recursive
argument_list|)
argument_list|,
name|useAncestry
argument_list|,
name|result
argument_list|)
expr_stmt|;
block|}
comment|/**      * Produces diff output which describes the delta between<code>url1</code>/<code>rN</code> and       *<code>url2</code>/<code>rM</code>. Writes the output of the diff to<code>result</code>.      *       *<p/>      * If this client object uses {@link DefaultSVNDiffGenerator} and there was a       * non-<span class="javakeyword">null</span> {@link DefaultSVNDiffGenerator#setBasePath(File) base path}       * provided to it, the original path and modified path will have this base path stripped from the front       * of the respective paths. If the base path is not<span class="javakeyword">null</span> but       * is not a parent path of the target, an exception with the {@link SVNErrorCode#BAD_RELATIVE_PATH} error       * code is thrown.       *       *<p/>      *<code>url1</code> and<code>url2</code> must both represent the same node kind -- that      * is, if<code>url1</code> is a directory,<code>url2</code> must also be, and if<code>url1</code>      * is a file,<code>url2</code> must also be.      *      *<p/>      * If<code>depth</code> is {@link SVNDepth#INFINITY}, diffs fully recursively. Else if it is       * {@link SVNDepth#IMMEDIATES}, diffs the named paths and their file children (if any), and diffs       * properties of subdirectories, but does not descend further into the subdirectories. Else if       * {@link SVNDepth#FILES}, behaves as if for {@link SVNDepth#IMMEDIATES} except doesn't diff properties       * of subdirectories. If {@link SVNDepth#EMPTY}, diffs exactly the named paths but nothing underneath them.      *       *<p/>      *<code>useAncestry</code> controls whether or not items being diffed will be checked for relatedness       * first. Unrelated items are typically transmitted to the editor as a deletion of one thing      * and the addition of another, but if this flag is<span class="javakeyword">true</span>, unrelated      * items will be diffed as if they were related.      *       *<p/>      * If {@link ISVNDiffGenerator#isDiffDeleted()} returns<span class="javakeyword">true</span>, then no diff       * output will be generated on deleted files.      *       *<p/>      * Generated headers are encoded using {@link ISVNDiffGenerator#getEncoding()}.      *      *<p/>      * Diffs output will not be generated for binary files, unless       * {@link ISVNDiffGenerator#isForcedBinaryDiff()} is<span class="javakeyword">true</span>, in which case       * diffs will be shown regardless of the content types.      *      *<p/>      * If this client object uses {@link DefaultSVNDiffGenerator} then a caller can set       * {@link SVNDiffOptions} to it which will be used to pass additional options to the diff processes       * invoked to compare files.      *       * @param  url1           the first URL to be compared      * @param  rN             a revision of<code>url1</code>      * @param  url2           the second URL to be compared      *                        against<code>path1</code>      * @param  rM             a revision of<code>url2</code>      * @param  depth          tree depth to process      * @param  useAncestry    if<span class="javakeyword">true</span> then      *                        the paths ancestry will be noticed while calculating differences,      *                        otherwise not      * @param  result         the target {@link java.io.OutputStream} where      *                        the differences will be written to      * @throws SVNException   in the following cases:      *<ul>      *<li/>exception with {@link SVNErrorCode#CLIENT_BAD_REVISION} error code - if       *                        either<code>rN</code> or<code>rM</code> is {@link SVNRevision#isValid() invalid}      *</ul>       * @since  1.2, SVN 1.5      */
specifier|public
name|void
name|doDiff
parameter_list|(
name|SVNURL
name|url1
parameter_list|,
name|SVNRevision
name|rN
parameter_list|,
name|SVNURL
name|url2
parameter_list|,
name|SVNRevision
name|rM
parameter_list|,
name|SVNDepth
name|depth
parameter_list|,
name|boolean
name|useAncestry
parameter_list|,
name|OutputStream
name|result
parameter_list|)
throws|throws
name|SVNException
block|{
if|if
condition|(
operator|!
name|rN
operator|.
name|isValid
argument_list|()
operator|||
operator|!
name|rM
operator|.
name|isValid
argument_list|()
condition|)
block|{
name|SVNErrorMessage
name|err
init|=
name|SVNErrorMessage
operator|.
name|create
argument_list|(
name|SVNErrorCode
operator|.
name|CLIENT_BAD_REVISION
argument_list|,
literal|"Both rN and rM revisions should be specified"
argument_list|)
decl_stmt|;
name|SVNErrorManager
operator|.
name|error
argument_list|(
name|err
argument_list|,
name|SVNLogType
operator|.
name|DEFAULT
argument_list|)
expr_stmt|;
block|}
name|getDiffGenerator
argument_list|()
operator|.
name|init
argument_list|(
name|url1
operator|.
name|toString
argument_list|()
argument_list|,
name|url2
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|doDiffURLURL
argument_list|(
name|url1
argument_list|,
literal|null
argument_list|,
name|rN
argument_list|,
name|url2
argument_list|,
literal|null
argument_list|,
name|rM
argument_list|,
name|SVNRevision
operator|.
name|UNDEFINED
argument_list|,
name|depth
argument_list|,
name|useAncestry
argument_list|,
name|result
argument_list|)
expr_stmt|;
block|}
comment|/**      * Generates the differences comparing the specified URL in a certain       * revision against either the specified Working Copy path or its repository       * location URL in the specified revision, and writes the result to the provided output      * stream.      *       *<p>      * If<code>rN</code> is not a local revision (see {@link SVNRevision#isLocal()}),      * then its repository location URL as it is in the revision represented by       *<code>rN</code> is taken for comparison with<code>url2</code>.      *       *<p>      * Corresponds to the SVN command line client's       *<code>'svn diff -r N:M PATH URL'</code> command.      *       * @param  path1          a WC path        * @param  rN             a revision of<code>path1</code>      * @param  url2           a repository location URL that is to be compared       *                        against<code>path1</code> (or its repository location)      * @param  rM             a revision of<code>url2</code>       * @param  recursive<span class="javakeyword">true</span> to descend       *                        recursively      * @param  useAncestry    if<span class="javakeyword">true</span> then      *                        the paths ancestry will be noticed while calculating differences,      *                        otherwise not      * @param  result         the target {@link java.io.OutputStream} where      *                        the differences will be written to      * @throws SVNException   if one of the following is true:      *<ul>      *<li>at least one of<code>rN</code> and<code>rM</code> is      *                        invalid      *<li><code>path1</code> is not under version control      *<li><code>path1</code> has no URL      *<li><code>url2</code> was not found in<code>rM</code>      *<li>the repository location of<code>path1</code> was       *                        not found in<code>rN</code>      *</ul>      * @deprecated            use {@link #doDiff(File, SVNRevision, SVNURL, SVNRevision, SVNDepth, boolean, OutputStream, Collection)}      *                        instead      */
specifier|public
name|void
name|doDiff
parameter_list|(
name|File
name|path1
parameter_list|,
name|SVNRevision
name|rN
parameter_list|,
name|SVNURL
name|url2
parameter_list|,
name|SVNRevision
name|rM
parameter_list|,
name|boolean
name|recursive
parameter_list|,
name|boolean
name|useAncestry
parameter_list|,
name|OutputStream
name|result
parameter_list|)
throws|throws
name|SVNException
block|{
name|doDiff
argument_list|(
name|path1
argument_list|,
name|rN
argument_list|,
name|url2
argument_list|,
name|rM
argument_list|,
name|SVNDepth
operator|.
name|getInfinityOrFilesDepth
argument_list|(
name|recursive
argument_list|)
argument_list|,
name|useAncestry
argument_list|,
name|result
argument_list|,
literal|null
argument_list|)
expr_stmt|;
block|}
comment|/**      * Produces diff output which describes the delta between<code>path1</code>/<code>rN</code> and       *<code>url2</code>/<code>rM</code>. Writes the output of the diff to<code>result</code>.      *       *<p/>      * If this client object uses {@link DefaultSVNDiffGenerator} and there was a       * non-<span class="javakeyword">null</span> {@link DefaultSVNDiffGenerator#setBasePath(File) base path}       * provided to it, the original path and modified path will have this base path stripped from the front       * of the respective paths. If the base path is not<span class="javakeyword">null</span> but       * is not a parent path of the target, an exception with the {@link SVNErrorCode#BAD_RELATIVE_PATH} error       * code is thrown.       *       *<p/>      *<code>path1</code> and<code>url2</code> must both represent the same node kind -- that      * is, if<code>path1</code> is a directory,<code>url2</code> must also be, and if<code>path1</code>      * is a file,<code>url2</code> must also be.      *      *<p/>      * If<code>depth</code> is {@link SVNDepth#INFINITY}, diffs fully recursively. Else if it is       * {@link SVNDepth#IMMEDIATES}, diffs the named paths and their file children (if any), and diffs       * properties of subdirectories, but does not descend further into the subdirectories. Else if       * {@link SVNDepth#FILES}, behaves as if for {@link SVNDepth#IMMEDIATES} except doesn't diff properties       * of subdirectories. If {@link SVNDepth#EMPTY}, diffs exactly the named paths but nothing underneath them.      *       *<p/>      *<code>useAncestry</code> controls whether or not items being diffed will be checked for relatedness       * first. Unrelated items are typically transmitted to the editor as a deletion of one thing      * and the addition of another, but if this flag is<span class="javakeyword">true</span>, unrelated      * items will be diffed as if they were related.      *       *<p/>      * If {@link ISVNDiffGenerator#isDiffDeleted()} returns<span class="javakeyword">true</span>, then no diff       * output will be generated on deleted files.      *       *<p/>      * Generated headers are encoded using {@link ISVNDiffGenerator#getEncoding()}.      *      *<p/>      * Diffs output will not be generated for binary files, unless       * {@link ISVNDiffGenerator#isForcedBinaryDiff()} is<span class="javakeyword">true</span>, in which case       * diffs will be shown regardless of the content types.      *      *<p/>      * If this client object uses {@link DefaultSVNDiffGenerator} then a caller can set       * {@link SVNDiffOptions} to it which will be used to pass additional options to the diff processes       * invoked to compare files.      *       *<p/>      *<code>changeLists</code> is a collection of<code>String</code> changelist names, used as a restrictive       * filter on items whose differences are reported; that is, doesn't generate diffs about any item unless      * it's a member of one of those changelists. If<code>changeLists</code> is empty (or       *<span class="javakeyword">null</span>), no changelist filtering occurs.      *      *<p/>      * Note: changelist filtering only applies to diffs in which at least one side of the diff represents       * working copy data.      *       *<p/>      * If both<code>rN</code> is either {@link SVNRevision#WORKING} or {@link SVNRevision#BASE}, then it will       * be a wc-against-url; otherwise, a url-against-url diff.       *       * @param  path1          a WC path      * @param  rN             a revision of<code>path1</code>      * @param  url2           a repository location URL that is to be compared       *                        against<code>path1</code> (or its repository location)      * @param  rM             a revision of<code>url2</code>      * @param  depth          tree depth to process      * @param  useAncestry    if<span class="javakeyword">true</span> then      *                        the paths ancestry will be noticed while calculating differences,      *                        otherwise not      * @param  result         the target {@link java.io.OutputStream} where      *                        the differences will be written to      * @param  changeLists    collection with changelist names          * @throws SVNException   in the following cases:      *<ul>      *<li/>exception with {@link SVNErrorCode#CLIENT_BAD_REVISION} error code - if       *                        either<code>rN</code> or<code>rM</code> is {@link SVNRevision#isValid() invalid}      *</ul>       * @since  1.2, SVN 1.5      */
specifier|public
name|void
name|doDiff
parameter_list|(
name|File
name|path1
parameter_list|,
name|SVNRevision
name|rN
parameter_list|,
name|SVNURL
name|url2
parameter_list|,
name|SVNRevision
name|rM
parameter_list|,
name|SVNDepth
name|depth
parameter_list|,
name|boolean
name|useAncestry
parameter_list|,
name|OutputStream
name|result
parameter_list|,
name|Collection
name|changeLists
parameter_list|)
throws|throws
name|SVNException
block|{
if|if
condition|(
operator|!
name|rN
operator|.
name|isValid
argument_list|()
operator|||
operator|!
name|rM
operator|.
name|isValid
argument_list|()
condition|)
block|{
name|SVNErrorMessage
name|err
init|=
name|SVNErrorMessage
operator|.
name|create
argument_list|(
name|SVNErrorCode
operator|.
name|CLIENT_BAD_REVISION
argument_list|,
literal|"Both rN and rM revisions should be specified"
argument_list|)
decl_stmt|;
name|SVNErrorManager
operator|.
name|error
argument_list|(
name|err
argument_list|,
name|SVNLogType
operator|.
name|DEFAULT
argument_list|)
expr_stmt|;
block|}
name|getDiffGenerator
argument_list|()
operator|.
name|init
argument_list|(
name|path1
operator|.
name|getAbsolutePath
argument_list|()
argument_list|,
name|url2
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|rN
operator|==
name|SVNRevision
operator|.
name|BASE
operator|||
name|rN
operator|==
name|SVNRevision
operator|.
name|WORKING
condition|)
block|{
name|doDiffURLWC
argument_list|(
name|url2
argument_list|,
name|rM
argument_list|,
name|SVNRevision
operator|.
name|UNDEFINED
argument_list|,
name|path1
argument_list|,
name|rN
argument_list|,
literal|true
argument_list|,
name|depth
argument_list|,
name|useAncestry
argument_list|,
name|result
argument_list|,
name|changeLists
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|doDiffURLURL
argument_list|(
literal|null
argument_list|,
name|path1
argument_list|,
name|rN
argument_list|,
name|url2
argument_list|,
literal|null
argument_list|,
name|rM
argument_list|,
name|SVNRevision
operator|.
name|UNDEFINED
argument_list|,
name|depth
argument_list|,
name|useAncestry
argument_list|,
name|result
argument_list|)
expr_stmt|;
block|}
block|}
comment|/**      * Generates the differences comparing either the specified Working Copy path or       * its repository location URL in the specified revision against the specified URL       * in a certain revision, and writes the result to the provided output stream.      *       *<p>      * If<code>rM</code> is not a local revision (see {@link SVNRevision#isLocal()}),      * then its repository location URL as it is in the revision represented by       *<code>rM</code> is taken for comparison with<code>url1</code>.      *       *<p>      * Corresponds to the SVN command line client's       *<code>'svn diff -r N:M URL PATH'</code> command.      *       * @param  url1           a repository location URL       * @param  rN             a revision of<code>url1</code>      * @param  path2          a WC path that is to be compared       *                        against<code>url1</code>      * @param  rM             a revision of<code>path2</code>      * @param  recursive<span class="javakeyword">true</span> to descend       *                        recursively      * @param  useAncestry    if<span class="javakeyword">true</span> then      *                        the paths ancestry will be noticed while calculating differences,      *                        otherwise not      * @param  result         the target {@link java.io.OutputStream} where      *                        the differences will be written to      * @throws SVNException   if one of the following is true:      *<ul>      *<li>at least one of<code>rN</code> and<code>rM</code> is      *                        invalid      *<li><code>path2</code> is not under version control      *<li><code>path2</code> has no URL      *<li><code>url1</code> was not found in<code>rN</code>      *<li>the repository location of<code>path2</code> was       *                        not found in<code>rM</code>      *</ul>      * @deprecated            use {@link #doDiff(SVNURL, SVNRevision, File, SVNRevision, SVNDepth, boolean, OutputStream, Collection)}      *                        instead       *                             */
specifier|public
name|void
name|doDiff
parameter_list|(
name|SVNURL
name|url1
parameter_list|,
name|SVNRevision
name|rN
parameter_list|,
name|File
name|path2
parameter_list|,
name|SVNRevision
name|rM
parameter_list|,
name|boolean
name|recursive
parameter_list|,
name|boolean
name|useAncestry
parameter_list|,
name|OutputStream
name|result
parameter_list|)
throws|throws
name|SVNException
block|{
name|doDiff
argument_list|(
name|url1
argument_list|,
name|rN
argument_list|,
name|path2
argument_list|,
name|rM
argument_list|,
name|SVNDepth
operator|.
name|getInfinityOrFilesDepth
argument_list|(
name|recursive
argument_list|)
argument_list|,
name|useAncestry
argument_list|,
name|result
argument_list|,
literal|null
argument_list|)
expr_stmt|;
block|}
comment|/**      * Produces diff output which describes the delta between<code>url1</code>/<code>rN</code> and       *<code>path2</code>/<code>rM</code>. Writes the output of the diff to<code>result</code>.      *       *<p/>      * If this client object uses {@link DefaultSVNDiffGenerator} and there was a       * non-<span class="javakeyword">null</span> {@link DefaultSVNDiffGenerator#setBasePath(File) base path}       * provided to it, the original path and modified path will have this base path stripped from the front       * of the respective paths. If the base path is not<span class="javakeyword">null</span> but       * is not a parent path of the target, an exception with the {@link SVNErrorCode#BAD_RELATIVE_PATH} error       * code is thrown.       *       *<p/>      *<code>url1</code> and<code>path2</code> must both represent the same node kind -- that      * is, if<code>url1</code> is a directory,<code>path2</code> must also be, and if<code>url1</code>      * is a file,<code>path2</code> must also be.      *      *<p/>      * If<code>depth</code> is {@link SVNDepth#INFINITY}, diffs fully recursively. Else if it is       * {@link SVNDepth#IMMEDIATES}, diffs the named paths and their file children (if any), and diffs       * properties of subdirectories, but does not descend further into the subdirectories. Else if       * {@link SVNDepth#FILES}, behaves as if for {@link SVNDepth#IMMEDIATES} except doesn't diff properties       * of subdirectories. If {@link SVNDepth#EMPTY}, diffs exactly the named paths but nothing underneath them.      *       *<p/>      *<code>useAncestry</code> controls whether or not items being diffed will be checked for relatedness       * first. Unrelated items are typically transmitted to the editor as a deletion of one thing      * and the addition of another, but if this flag is<span class="javakeyword">true</span>, unrelated      * items will be diffed as if they were related.      *       *<p/>      * If {@link ISVNDiffGenerator#isDiffDeleted()} returns<span class="javakeyword">true</span>, then no diff       * output will be generated on deleted files.      *       *<p/>      * Generated headers are encoded using {@link ISVNDiffGenerator#getEncoding()}.      *      *<p/>      * Diffs output will not be generated for binary files, unless       * {@link ISVNDiffGenerator#isForcedBinaryDiff()} is<span class="javakeyword">true</span>, in which case       * diffs will be shown regardless of the content types.      *      *<p/>      * If this client object uses {@link DefaultSVNDiffGenerator} then a caller can set       * {@link SVNDiffOptions} to it which will be used to pass additional options to the diff processes       * invoked to compare files.      *       *<p/>      *<code>changeLists</code> is a collection of<code>String</code> changelist names, used as a restrictive       * filter on items whose differences are reported; that is, doesn't generate diffs about any item unless      * it's a member of one of those changelists. If<code>changeLists</code> is empty (or       *<span class="javakeyword">null</span>), no changelist filtering occurs.      *      *<p/>      * Note: changelist filtering only applies to diffs in which at least one side of the diff represents       * working copy data.      *       *<p/>      * If both<code>rM</code> is either {@link SVNRevision#WORKING} or {@link SVNRevision#BASE}, then it will       * be a url-against-wc; otherwise, a url-against-url diff.       *       * @param  url1           a repository location URL       * @param  rN             a revision of<code>url1</code>      * @param  path2          a WC path that is to be compared       *                        against<code>url1</code>      * @param  rM             a revision of<code>path2</code>      * @param  depth          tree depth to process      * @param  useAncestry    if<span class="javakeyword">true</span> then      *                        the paths ancestry will be noticed while calculating differences,      *                        otherwise not      * @param  result         the target {@link java.io.OutputStream} where      *                        the differences will be written to      * @param  changeLists    collection with changelist names          * @throws SVNException   in the following cases:      *<ul>      *<li/>exception with {@link SVNErrorCode#CLIENT_BAD_REVISION} error code - if       *                        either<code>rN</code> or<code>rM</code> is {@link SVNRevision#isValid() invalid}      *</ul>       * @since  1.2, SVN 1.5      */
specifier|public
name|void
name|doDiff
parameter_list|(
name|SVNURL
name|url1
parameter_list|,
name|SVNRevision
name|rN
parameter_list|,
name|File
name|path2
parameter_list|,
name|SVNRevision
name|rM
parameter_list|,
name|SVNDepth
name|depth
parameter_list|,
name|boolean
name|useAncestry
parameter_list|,
name|OutputStream
name|result
parameter_list|,
name|Collection
name|changeLists
parameter_list|)
throws|throws
name|SVNException
block|{
if|if
condition|(
operator|!
name|rN
operator|.
name|isValid
argument_list|()
operator|||
operator|!
name|rM
operator|.
name|isValid
argument_list|()
condition|)
block|{
name|SVNErrorMessage
name|err
init|=
name|SVNErrorMessage
operator|.
name|create
argument_list|(
name|SVNErrorCode
operator|.
name|CLIENT_BAD_REVISION
argument_list|,
literal|"Both rN and rM revisions should be specified"
argument_list|)
decl_stmt|;
name|SVNErrorManager
operator|.
name|error
argument_list|(
name|err
argument_list|,
name|SVNLogType
operator|.
name|DEFAULT
argument_list|)
expr_stmt|;
block|}
name|getDiffGenerator
argument_list|()
operator|.
name|init
argument_list|(
name|url1
operator|.
name|toString
argument_list|()
argument_list|,
name|path2
operator|.
name|getAbsolutePath
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|rM
operator|==
name|SVNRevision
operator|.
name|BASE
operator|||
name|rM
operator|==
name|SVNRevision
operator|.
name|WORKING
condition|)
block|{
name|doDiffURLWC
argument_list|(
name|url1
argument_list|,
name|rN
argument_list|,
name|SVNRevision
operator|.
name|UNDEFINED
argument_list|,
name|path2
argument_list|,
name|rM
argument_list|,
literal|false
argument_list|,
name|depth
argument_list|,
name|useAncestry
argument_list|,
name|result
argument_list|,
name|changeLists
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|doDiffURLURL
argument_list|(
name|url1
argument_list|,
literal|null
argument_list|,
name|rN
argument_list|,
literal|null
argument_list|,
name|path2
argument_list|,
name|rM
argument_list|,
name|SVNRevision
operator|.
name|UNDEFINED
argument_list|,
name|depth
argument_list|,
name|useAncestry
argument_list|,
name|result
argument_list|)
expr_stmt|;
block|}
block|}
comment|/**      * Generates the differences comparing either the specified Working Copy paths or       * their repository location URLs (any combinations are possible) in the specified       * revisions and writes the result to the provided output stream.      *       *<p>      * If both<code>rN</code> and<code>rM</code> are local revisions (see {@link SVNRevision#isLocal()}),      * then a Working Copy<code>path2</code> is compared against a Working Copy<code>path1</code>.      *       *<p>      * If<code>rN</code> is a local revision but<code>rM</code> is not, then      * the repository location URL of<code>path2</code> as it is in the revision       * represented by<code>rM</code> is compared against the Working Copy<code>path1</code>.      *      *<p>      * If<code>rM</code> is a local revision but<code>rN</code> is not, then      * the Working Copy<code>path2</code> is compared against the repository location       * URL of<code>path1</code> as it is in the revision represented by<code>rN</code>.      *       *<p>      * If both<code>rN</code> and<code>rM</code> are non-local revisions, then the      * repository location URL of<code>path2</code> in revision<code>rM</code> is       * compared against the repository location URL of<code>path1</code> in revision       *<code>rN</code>.      *       * @param  path1          a WC path      * @param  rN             a revision of<code>path1</code>      * @param  path2          a WC path that is to be compared       *                        against<code>path1</code>      * @param  rM             a revision of<code>path2</code>      * @param  recursive<span class="javakeyword">true</span> to descend       *                        recursively      * @param  useAncestry    if<span class="javakeyword">true</span> then      *                        the paths ancestry will be noticed while calculating differences,      *                        otherwise not      * @param  result         the target {@link java.io.OutputStream} where      *                        the differences will be written to      * @throws SVNException   if one of the following is true:      *<ul>      *<li>at least one of<code>rN</code> and<code>rM</code> is      *                        invalid      *<li><code>path1</code> is not under version control      *<li><code>path1</code> has no URL      *<li><code>path2</code> is not under version control      *<li><code>path2</code> has no URL      *<li>the repository location of<code>path1</code> was       *                        not found in<code>rN</code>      *<li>the repository location of<code>path2</code> was       *                        not found in<code>rM</code>      *<li>both<code>rN</code> and<code>rM</code> are local,      *                        but either<code>path1</code> does not equal<code>path2</code>,      *                        or<code>rN</code> is not {@link SVNRevision#BASE}, or      *<code>rM</code> is not {@link SVNRevision#WORKING}       *</ul>      * @deprecated            use {@link #doDiff(File, SVNRevision, File, SVNRevision, SVNDepth, boolean, OutputStream, Collection)}       *                        instead      */
specifier|public
name|void
name|doDiff
parameter_list|(
name|File
name|path1
parameter_list|,
name|SVNRevision
name|rN
parameter_list|,
name|File
name|path2
parameter_list|,
name|SVNRevision
name|rM
parameter_list|,
name|boolean
name|recursive
parameter_list|,
name|boolean
name|useAncestry
parameter_list|,
name|OutputStream
name|result
parameter_list|)
throws|throws
name|SVNException
block|{
name|doDiff
argument_list|(
name|path1
argument_list|,
name|rN
argument_list|,
name|path2
argument_list|,
name|rM
argument_list|,
name|SVNDepth
operator|.
name|getInfinityOrFilesDepth
argument_list|(
name|recursive
argument_list|)
argument_list|,
name|useAncestry
argument_list|,
name|result
argument_list|,
literal|null
argument_list|)
expr_stmt|;
block|}
comment|/**      * Produces diff output which describes the delta between<code>path1</code>/<code>rN</code> and       *<code>path2</code>/<code>rM</code>. Writes the output of the diff to<code>result</code>.      *       *<p/>      * If this client object uses {@link DefaultSVNDiffGenerator} and there was a       * non-<span class="javakeyword">null</span> {@link DefaultSVNDiffGenerator#setBasePath(File) base path}       * provided to it, the original path and modified path will have this base path stripped from the front       * of the respective paths. If the base path is not<span class="javakeyword">null</span> but       * is not a parent path of the target, an exception with the {@link SVNErrorCode#BAD_RELATIVE_PATH} error       * code is thrown.       *       *<p/>      *<code>path1</code> and<code>path2</code> must both represent the same node kind -- that      * is, if<code>path1</code> is a directory,<code>path2</code> must also be, and if<code>path1</code>      * is a file,<code>path2</code> must also be.      *      *<p/>      * If<code>depth</code> is {@link SVNDepth#INFINITY}, diffs fully recursively. Else if it is       * {@link SVNDepth#IMMEDIATES}, diffs the named paths and their file children (if any), and diffs       * properties of subdirectories, but does not descend further into the subdirectories. Else if       * {@link SVNDepth#FILES}, behaves as if for {@link SVNDepth#IMMEDIATES} except doesn't diff properties       * of subdirectories. If {@link SVNDepth#EMPTY}, diffs exactly the named paths but nothing underneath them.      *       *<p/>      *<code>useAncestry</code> controls whether or not items being diffed will be checked for relatedness       * first. Unrelated items are typically transmitted to the editor as a deletion of one thing      * and the addition of another, but if this flag is<span class="javakeyword">true</span>, unrelated      * items will be diffed as if they were related.      *       *<p/>      * If {@link ISVNDiffGenerator#isDiffDeleted()} returns<span class="javakeyword">true</span>, then no diff       * output will be generated on deleted files.      *       *<p/>      * Generated headers are encoded using {@link ISVNDiffGenerator#getEncoding()}.      *      *<p/>      * Diffs output will not be generated for binary files, unless       * {@link ISVNDiffGenerator#isForcedBinaryDiff()} is<span class="javakeyword">true</span>, in which case       * diffs will be shown regardless of the content types.      *      *<p/>      * If this client object uses {@link DefaultSVNDiffGenerator} then a caller can set       * {@link SVNDiffOptions} to it which will be used to pass additional options to the diff processes       * invoked to compare files.      *       *<p/>      *<code>changeLists</code> is a collection of<code>String</code> changelist names, used as a restrictive       * filter on items whose differences are reported; that is, doesn't generate diffs about any item unless      * it's a member of one of those changelists. If<code>changeLists</code> is empty (or       *<span class="javakeyword">null</span>), no changelist filtering occurs.      *      *<p/>      * Note: changelist filtering only applies to diffs in which at least one side of the diff represents       * working copy data.      *       *<p/>      * If both<code>rN</code> and<code>rM</code> are either {@link SVNRevision#WORKING} or       * {@link SVNRevision#BASE}, then it will be a wc-against-wc diff operation, in which case no repository       * access is needed. If only<code>rN</code> or<code>rM</code> is, then it will be a wc-against-url or       * url-against-wc diff correspondingly; if neither - a url-against-url diff.       *       * @param  path1          a WC path      * @param  rN             a revision of<code>path1</code>      * @param  path2          a WC path that is to be compared       *                        against<code>path1</code>      * @param  rM             a revision of<code>path2</code>      * @param  depth          tree depth to process      * @param  useAncestry    if<span class="javakeyword">true</span> then      *                        the paths ancestry will be noticed while calculating differences,      *                        otherwise not      * @param  result         the target {@link java.io.OutputStream} where      *                        the differences will be written to      * @param  changeLists    collection with changelist names          * @throws SVNException   in the following cases:      *<ul>      *<li/>exception with {@link SVNErrorCode#CLIENT_BAD_REVISION} error code - if       *                        either<code>rN</code> or<code>rM</code> is {@link SVNRevision#isValid() invalid}      *</ul>       * @since  1.2, SVN 1.5      */
specifier|public
name|void
name|doDiff
parameter_list|(
name|File
name|path1
parameter_list|,
name|SVNRevision
name|rN
parameter_list|,
name|File
name|path2
parameter_list|,
name|SVNRevision
name|rM
parameter_list|,
name|SVNDepth
name|depth
parameter_list|,
name|boolean
name|useAncestry
parameter_list|,
name|OutputStream
name|result
parameter_list|,
name|Collection
name|changeLists
parameter_list|)
throws|throws
name|SVNException
block|{
if|if
condition|(
operator|!
name|rN
operator|.
name|isValid
argument_list|()
operator|||
operator|!
name|rM
operator|.
name|isValid
argument_list|()
condition|)
block|{
name|SVNErrorMessage
name|err
init|=
name|SVNErrorMessage
operator|.
name|create
argument_list|(
name|SVNErrorCode
operator|.
name|CLIENT_BAD_REVISION
argument_list|,
literal|"Both rN and rM revisions should be specified"
argument_list|)
decl_stmt|;
name|SVNErrorManager
operator|.
name|error
argument_list|(
name|err
argument_list|,
name|SVNLogType
operator|.
name|DEFAULT
argument_list|)
expr_stmt|;
block|}
name|boolean
name|isPath1Local
init|=
name|rN
operator|==
name|SVNRevision
operator|.
name|WORKING
operator|||
name|rN
operator|==
name|SVNRevision
operator|.
name|BASE
decl_stmt|;
name|boolean
name|isPath2Local
init|=
name|rM
operator|==
name|SVNRevision
operator|.
name|WORKING
operator|||
name|rM
operator|==
name|SVNRevision
operator|.
name|BASE
decl_stmt|;
name|getDiffGenerator
argument_list|()
operator|.
name|init
argument_list|(
name|path1
operator|.
name|getAbsolutePath
argument_list|()
argument_list|,
name|path2
operator|.
name|getAbsolutePath
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|isPath1Local
operator|&&
name|isPath2Local
condition|)
block|{
name|doDiffWCWC
argument_list|(
name|path1
argument_list|,
name|rN
argument_list|,
name|path2
argument_list|,
name|rM
argument_list|,
name|depth
argument_list|,
name|useAncestry
argument_list|,
name|result
argument_list|,
name|changeLists
argument_list|)
expr_stmt|;
block|}
if|else if
condition|(
name|isPath1Local
condition|)
block|{
name|doDiffURLWC
argument_list|(
name|path2
argument_list|,
name|rM
argument_list|,
name|SVNRevision
operator|.
name|UNDEFINED
argument_list|,
name|path1
argument_list|,
name|rN
argument_list|,
literal|true
argument_list|,
name|depth
argument_list|,
name|useAncestry
argument_list|,
name|result
argument_list|,
name|changeLists
argument_list|)
expr_stmt|;
block|}
if|else if
condition|(
name|isPath2Local
condition|)
block|{
name|doDiffURLWC
argument_list|(
name|path1
argument_list|,
name|rN
argument_list|,
name|SVNRevision
operator|.
name|UNDEFINED
argument_list|,
name|path2
argument_list|,
name|rM
argument_list|,
literal|false
argument_list|,
name|depth
argument_list|,
name|useAncestry
argument_list|,
name|result
argument_list|,
name|changeLists
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|doDiffURLURL
argument_list|(
literal|null
argument_list|,
name|path1
argument_list|,
name|rN
argument_list|,
literal|null
argument_list|,
name|path2
argument_list|,
name|rM
argument_list|,
name|SVNRevision
operator|.
name|UNDEFINED
argument_list|,
name|depth
argument_list|,
name|useAncestry
argument_list|,
name|result
argument_list|)
expr_stmt|;
block|}
block|}
comment|/**      * Diffs one path against another one providing short status-like change information to the provided      * handler. This method functionality is equivalent to the 'svn diff --summarize' command.      *       * @param  path1             the path of a left-hand item to diff      * @param  rN                a revision of<code>path1</code>      * @param  path2             the path of a right-hand item to diff      * @param  rM                a revision of<code>path2</code>      * @param  recursive         controls whether operation must recurse or not       * @param  useAncestry       if<span class="javakeyword">true</span> then      *                           the paths ancestry will be noticed while calculating differences,      *                           otherwise not      * @param  handler           a diff status handler      * @throws SVNException      * @since                    1.1, new in Subversion 1.4      * @deprecated               use {@link #doDiffStatus(File, SVNRevision, File, SVNRevision, SVNDepth, boolean, ISVNDiffStatusHandler)}       *                           instead      */
specifier|public
name|void
name|doDiffStatus
parameter_list|(
name|File
name|path1
parameter_list|,
name|SVNRevision
name|rN
parameter_list|,
name|File
name|path2
parameter_list|,
name|SVNRevision
name|rM
parameter_list|,
name|boolean
name|recursive
parameter_list|,
name|boolean
name|useAncestry
parameter_list|,
name|ISVNDiffStatusHandler
name|handler
parameter_list|)
throws|throws
name|SVNException
block|{
name|doDiffStatus
argument_list|(
name|path1
argument_list|,
name|rN
argument_list|,
name|path2
argument_list|,
name|rM
argument_list|,
name|SVNDepth
operator|.
name|getInfinityOrFilesDepth
argument_list|(
name|recursive
argument_list|)
argument_list|,
name|useAncestry
argument_list|,
name|handler
argument_list|)
expr_stmt|;
block|}
comment|/**      * Produces a diff summary which lists the changed items between<code>path</code> in peg revision       *<code>pegRevision</code>, as it changed between<code>rN</code> and<code>rM</code>.       *      *<p/>      * If<code>pegRevision</code> is {@link SVNRevision#isValid() invalid}, behaves identically to       * {@link #doDiffStatus(File, SVNRevision, File, SVNRevision, SVNDepth, boolean, ISVNDiffStatusHandler)},       * using<code>path</code> for both of that method's<code>path1</code> and<code>path2</code> argments.      *       *<p/>      * The method may report false positives if<code>useAncestry</code> is       *<span class="javakeyword">false</span>, as described in the documentation for       * {@link #doDiffStatus(File, SVNRevision, File, SVNRevision, SVNDepth, boolean, ISVNDiffStatusHandler)}.      *       *<p/>      * Calls<code>handler</code> for each difference with an {@link SVNDiffStatus} object describing the       * difference.      *       *<p/>      * See {@link #doDiff(File, SVNRevision, SVNRevision, SVNRevision, SVNDepth, boolean, OutputStream, Collection)}       * for a description of the other parameters.      *      * @param  path            working copy path      * @param  rN              left-hand revision      * @param  rM              right-hand revision      * @param  pegRevision     a revision in which the repository location of<code>path</code>       *                         is first looked up      * @param  depth           tree depth to process      * @param  useAncestry     if<span class="javakeyword">true</span> then      *                         the paths ancestry will be noticed while calculating differences,      *                         otherwise not      * @param  handler         a diff status handler      * @throws SVNException         * @since                  1.2, SVN 1.5      */
specifier|public
name|void
name|doDiffStatus
parameter_list|(
name|File
name|path
parameter_list|,
name|SVNRevision
name|rN
parameter_list|,
name|SVNRevision
name|rM
parameter_list|,
name|SVNRevision
name|pegRevision
parameter_list|,
name|SVNDepth
name|depth
parameter_list|,
name|boolean
name|useAncestry
parameter_list|,
name|ISVNDiffStatusHandler
name|handler
parameter_list|)
throws|throws
name|SVNException
block|{
if|if
condition|(
name|handler
operator|==
literal|null
condition|)
block|{
return|return;
block|}
if|if
condition|(
name|pegRevision
operator|==
literal|null
condition|)
block|{
name|pegRevision
operator|=
name|SVNRevision
operator|.
name|UNDEFINED
expr_stmt|;
block|}
if|if
condition|(
operator|!
name|rN
operator|.
name|isValid
argument_list|()
operator|||
operator|!
name|rM
operator|.
name|isValid
argument_list|()
condition|)
block|{
name|SVNErrorMessage
name|err
init|=
name|SVNErrorMessage
operator|.
name|create
argument_list|(
name|SVNErrorCode
operator|.
name|CLIENT_BAD_REVISION
argument_list|,
literal|"Not all required revisions are specified"
argument_list|)
decl_stmt|;
name|SVNErrorManager
operator|.
name|error
argument_list|(
name|err
argument_list|,
name|SVNLogType
operator|.
name|DEFAULT
argument_list|)
expr_stmt|;
block|}
name|boolean
name|isPath1Local
init|=
name|rN
operator|==
name|SVNRevision
operator|.
name|WORKING
operator|||
name|rN
operator|==
name|SVNRevision
operator|.
name|BASE
decl_stmt|;
name|boolean
name|isPath2Local
init|=
name|rM
operator|==
name|SVNRevision
operator|.
name|WORKING
operator|||
name|rM
operator|==
name|SVNRevision
operator|.
name|BASE
decl_stmt|;
if|if
condition|(
name|isPath1Local
operator|||
name|isPath2Local
condition|)
block|{
name|SVNErrorMessage
name|err
init|=
name|SVNErrorMessage
operator|.
name|create
argument_list|(
name|SVNErrorCode
operator|.
name|UNSUPPORTED_FEATURE
argument_list|,
literal|"Summarizing diff can only compare repository to repository"
argument_list|)
decl_stmt|;
name|SVNErrorManager
operator|.
name|error
argument_list|(
name|err
argument_list|,
name|SVNLogType
operator|.
name|DEFAULT
argument_list|)
expr_stmt|;
block|}
name|doDiffURLURL
argument_list|(
literal|null
argument_list|,
name|path
argument_list|,
name|rN
argument_list|,
literal|null
argument_list|,
name|path
argument_list|,
name|rM
argument_list|,
name|pegRevision
argument_list|,
name|depth
argument_list|,
name|useAncestry
argument_list|,
name|handler
argument_list|)
expr_stmt|;
block|}
comment|/**      * Produces a diff summary which lists the changed items between      *<code>path1</code>/<code>rN</code> and<code>path2</code>/<code>rM</code> without creating text      * deltas.       *       *<p/>      * The function may report false positives if<code>ignoreAncestry</code> is       *<span class="javakeyword">false</span>, since a file might have been modified between two revisions,       * but still have the same contents.      *       *<p/>      * Calls<code>handler</code> for each difference with an {@link SVNDiffStatus} object describing the       * difference.      *       *<p/>      * See {@link #doDiff(File, SVNRevision, File, SVNRevision, SVNDepth, boolean, OutputStream, Collection)}       * for a description of the other parameters.      *      * @param  path1             the path of a left-hand item to diff      * @param  rN                a revision of<code>path1</code>      * @param  path2             the path of a right-hand item to diff      * @param  rM                a revision of<code>path2</code>      * @param  depth             tree depth to process       * @param  useAncestry       if<span class="javakeyword">true</span> then      *                           the paths ancestry will be noticed while calculating differences,      *                           otherwise not      * @param  handler           a diff status handler      * @throws SVNException      in the following cases:      *<ul>      *<li/>exception with {@link SVNErrorCode#CLIENT_BAD_REVISION} error code - if       *                           either<code>rN</code> or<code>rM</code> is {@link SVNRevision#isValid() invalid}      *<li/>exception with {@link SVNErrorCode#UNSUPPORTED_FEATURE} error code - if       *                           either of<code>rM</code> or</code>rN</code> is either {@link SVNRevision#WORKING}      *                           or {@link SVNRevision#BASE}       *</ul>       * @since                    1.2, SVN 1.5      */
specifier|public
name|void
name|doDiffStatus
parameter_list|(
name|File
name|path1
parameter_list|,
name|SVNRevision
name|rN
parameter_list|,
name|File
name|path2
parameter_list|,
name|SVNRevision
name|rM
parameter_list|,
name|SVNDepth
name|depth
parameter_list|,
name|boolean
name|useAncestry
parameter_list|,
name|ISVNDiffStatusHandler
name|handler
parameter_list|)
throws|throws
name|SVNException
block|{
if|if
condition|(
name|handler
operator|==
literal|null
condition|)
block|{
return|return;
block|}
if|if
condition|(
operator|!
name|rN
operator|.
name|isValid
argument_list|()
operator|||
operator|!
name|rM
operator|.
name|isValid
argument_list|()
condition|)
block|{
name|SVNErrorMessage
name|err
init|=
name|SVNErrorMessage
operator|.
name|create
argument_list|(
name|SVNErrorCode
operator|.
name|CLIENT_BAD_REVISION
argument_list|,
literal|"Not all required revisions are specified"
argument_list|)
decl_stmt|;
name|SVNErrorManager
operator|.
name|error
argument_list|(
name|err
argument_list|,
name|SVNLogType
operator|.
name|DEFAULT
argument_list|)
expr_stmt|;
block|}
name|boolean
name|isPath1Local
init|=
name|rN
operator|==
name|SVNRevision
operator|.
name|WORKING
operator|||
name|rN
operator|==
name|SVNRevision
operator|.
name|BASE
decl_stmt|;
name|boolean
name|isPath2Local
init|=
name|rM
operator|==
name|SVNRevision
operator|.
name|WORKING
operator|||
name|rM
operator|==
name|SVNRevision
operator|.
name|BASE
decl_stmt|;
if|if
condition|(
name|isPath1Local
operator|||
name|isPath2Local
condition|)
block|{
name|SVNErrorMessage
name|err
init|=
name|SVNErrorMessage
operator|.
name|create
argument_list|(
name|SVNErrorCode
operator|.
name|UNSUPPORTED_FEATURE
argument_list|,
literal|"Summarizing diff can only compare repository to repository"
argument_list|)
decl_stmt|;
name|SVNErrorManager
operator|.
name|error
argument_list|(
name|err
argument_list|,
name|SVNLogType
operator|.
name|DEFAULT
argument_list|)
expr_stmt|;
block|}
name|doDiffURLURL
argument_list|(
literal|null
argument_list|,
name|path1
argument_list|,
name|rN
argument_list|,
literal|null
argument_list|,
name|path2
argument_list|,
name|rM
argument_list|,
name|SVNRevision
operator|.
name|UNDEFINED
argument_list|,
name|depth
argument_list|,
name|useAncestry
argument_list|,
name|handler
argument_list|)
expr_stmt|;
block|}
comment|/**      * Diffs a path against a url providing short status-like change information to the provided      * handler. This method functionality is equivalent to the 'svn diff --summarize' command.      *       * @param  path1             the path of a left-hand item to diff      * @param  rN                a revision of<code>path1</code>      * @param  url2              the url of a right-hand item to diff      * @param  rM                a revision of<code>url2</code>      * @param  recursive         controls whether operation must recurse or not       * @param  useAncestry       if<span class="javakeyword">true</span> then      *                           the paths ancestry will be noticed while calculating differences,      *                           otherwise not      * @param  handler           a diff status handler      * @throws SVNException      * @since                    1.1, new in Subversion 1.4      * @deprecated               use {@link #doDiffStatus(File, SVNRevision, SVNURL, SVNRevision, SVNDepth, boolean, ISVNDiffStatusHandler)}      *                           instead      */
specifier|public
name|void
name|doDiffStatus
parameter_list|(
name|File
name|path1
parameter_list|,
name|SVNRevision
name|rN
parameter_list|,
name|SVNURL
name|url2
parameter_list|,
name|SVNRevision
name|rM
parameter_list|,
name|boolean
name|recursive
parameter_list|,
name|boolean
name|useAncestry
parameter_list|,
name|ISVNDiffStatusHandler
name|handler
parameter_list|)
throws|throws
name|SVNException
block|{
name|doDiffStatus
argument_list|(
name|path1
argument_list|,
name|rN
argument_list|,
name|url2
argument_list|,
name|rM
argument_list|,
name|SVNDepth
operator|.
name|getInfinityOrFilesDepth
argument_list|(
name|recursive
argument_list|)
argument_list|,
name|useAncestry
argument_list|,
name|handler
argument_list|)
expr_stmt|;
block|}
comment|/**      * Produces a diff summary which lists the changed items between      *<code>path1</code>/<code>rN</code> and<code>url2</code>/<code>rM</code> without creating text      * deltas.       *       *<p/>      * The function may report false positives if<code>ignoreAncestry</code> is       *<span class="javakeyword">false</span>, since a file might have been modified between two revisions,       * but still have the same contents.      *       *<p/>      * Calls<code>handler</code> for each difference with an {@link SVNDiffStatus} object describing the       * difference.      *       *<p/>      * See {@link #doDiff(File, SVNRevision, SVNURL, SVNRevision, SVNDepth, boolean, OutputStream, Collection)}       * for a description of the other parameters.      *      * @param  path1             the path of a left-hand item to diff      * @param  rN                a revision of<code>path1</code>      * @param  url2              repository url as a right-hand item      * @param  rM                a revision of<code>url2</code>      * @param  depth             tree depth to process       * @param  useAncestry       if<span class="javakeyword">true</span> then      *                           the paths ancestry will be noticed while calculating differences,      *                           otherwise not      * @param  handler           a diff status handler      * @throws SVNException      in the following cases:      *<ul>      *<li/>exception with {@link SVNErrorCode#CLIENT_BAD_REVISION} error code - if       *                           either<code>rN</code> or<code>rM</code> is {@link SVNRevision#isValid() invalid}      *<li/>exception with {@link SVNErrorCode#UNSUPPORTED_FEATURE} error code - if       *                           either of<code>rM</code> or</code>rN</code> is either {@link SVNRevision#WORKING}      *                           or {@link SVNRevision#BASE}       *</ul>       * @since                    1.2, SVN 1.5      */
specifier|public
name|void
name|doDiffStatus
parameter_list|(
name|File
name|path1
parameter_list|,
name|SVNRevision
name|rN
parameter_list|,
name|SVNURL
name|url2
parameter_list|,
name|SVNRevision
name|rM
parameter_list|,
name|SVNDepth
name|depth
parameter_list|,
name|boolean
name|useAncestry
parameter_list|,
name|ISVNDiffStatusHandler
name|handler
parameter_list|)
throws|throws
name|SVNException
block|{
if|if
condition|(
name|handler
operator|==
literal|null
condition|)
block|{
return|return;
block|}
if|if
condition|(
operator|!
name|rN
operator|.
name|isValid
argument_list|()
operator|||
operator|!
name|rM
operator|.
name|isValid
argument_list|()
condition|)
block|{
name|SVNErrorMessage
name|err
init|=
name|SVNErrorMessage
operator|.
name|create
argument_list|(
name|SVNErrorCode
operator|.
name|CLIENT_BAD_REVISION
argument_list|,
literal|"Not all required revisions are specified"
argument_list|)
decl_stmt|;
name|SVNErrorManager
operator|.
name|error
argument_list|(
name|err
argument_list|,
name|SVNLogType
operator|.
name|DEFAULT
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|rN
operator|==
name|SVNRevision
operator|.
name|BASE
operator|||
name|rN
operator|==
name|SVNRevision
operator|.
name|WORKING
condition|)
block|{
name|SVNErrorMessage
name|err
init|=
name|SVNErrorMessage
operator|.
name|create
argument_list|(
name|SVNErrorCode
operator|.
name|UNSUPPORTED_FEATURE
argument_list|,
literal|"Summarizing diff can only compare repository to repository"
argument_list|)
decl_stmt|;
name|SVNErrorManager
operator|.
name|error
argument_list|(
name|err
argument_list|,
name|SVNLogType
operator|.
name|DEFAULT
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|doDiffURLURL
argument_list|(
literal|null
argument_list|,
name|path1
argument_list|,
name|rN
argument_list|,
name|url2
argument_list|,
literal|null
argument_list|,
name|rM
argument_list|,
name|SVNRevision
operator|.
name|UNDEFINED
argument_list|,
name|depth
argument_list|,
name|useAncestry
argument_list|,
name|handler
argument_list|)
expr_stmt|;
block|}
block|}
comment|/**      * Diffs a url against a path providing short status-like change information to the provided      * handler. This method functionality is equivalent to the 'svn diff --summarize' command.      *       * @param  url1              the url of a left-hand item to diff      * @param  rN                a revision of<code>url1</code>      * @param  path2             the path of a right-hand item to diff      * @param  rM                a revision of<code>path2</code>      * @param  recursive         controls whether operation must recurse or not       * @param  useAncestry       if<span class="javakeyword">true</span> then      *                           the paths ancestry will be noticed while calculating differences,      *                           otherwise not      * @param  handler           a diff status handler      * @throws SVNException      * @since                    1.1, new in Subversion 1.4      * @deprecated               use {@link #doDiffStatus(SVNURL, SVNRevision, File, SVNRevision, SVNDepth, boolean, ISVNDiffStatusHandler)}      *                           instead      */
specifier|public
name|void
name|doDiffStatus
parameter_list|(
name|SVNURL
name|url1
parameter_list|,
name|SVNRevision
name|rN
parameter_list|,
name|File
name|path2
parameter_list|,
name|SVNRevision
name|rM
parameter_list|,
name|boolean
name|recursive
parameter_list|,
name|boolean
name|useAncestry
parameter_list|,
name|ISVNDiffStatusHandler
name|handler
parameter_list|)
throws|throws
name|SVNException
block|{
name|doDiffStatus
argument_list|(
name|url1
argument_list|,
name|rN
argument_list|,
name|path2
argument_list|,
name|rM
argument_list|,
name|SVNDepth
operator|.
name|getInfinityOrFilesDepth
argument_list|(
name|recursive
argument_list|)
argument_list|,
name|useAncestry
argument_list|,
name|handler
argument_list|)
expr_stmt|;
block|}
comment|/**      * Produces a diff summary which lists the changed items between      *<code>url1</code>/<code>rN</code> and<code>path2</code>/<code>rM</code> without creating text      * deltas.       *       *<p/>      * The function may report false positives if<code>ignoreAncestry</code> is       *<span class="javakeyword">false</span>, since a file might have been modified between two revisions,       * but still have the same contents.      *       *<p/>      * Calls<code>handler</code> for each difference with an {@link SVNDiffStatus} object describing the       * difference.      *       *<p/>      * See {@link #doDiff(SVNURL, SVNRevision, File, SVNRevision, SVNDepth, boolean, OutputStream, Collection)}       * for a description of the other parameters.      *      * @param  url1              repository url as a left-hand item      * @param  rN                a revision of<code>url1</code>      * @param  path2             the path of a right-hand item to diff      * @param  rM                a revision of<code>path2</code>      * @param  depth             tree depth to process       * @param  useAncestry       if<span class="javakeyword">true</span> then      *                           the paths ancestry will be noticed while calculating differences,      *                           otherwise not      * @param  handler           a diff status handler      * @throws SVNException      in the following cases:      *<ul>      *<li/>exception with {@link SVNErrorCode#CLIENT_BAD_REVISION} error code - if       *                           either<code>rN</code> or<code>rM</code> is {@link SVNRevision#isValid() invalid}      *<li/>exception with {@link SVNErrorCode#UNSUPPORTED_FEATURE} error code - if       *                           either of<code>rM</code> or</code>rN</code> is either {@link SVNRevision#WORKING}      *                           or {@link SVNRevision#BASE}       *</ul>       * @since                    1.2, SVN 1.5      */
specifier|public
name|void
name|doDiffStatus
parameter_list|(
name|SVNURL
name|url1
parameter_list|,
name|SVNRevision
name|rN
parameter_list|,
name|File
name|path2
parameter_list|,
name|SVNRevision
name|rM
parameter_list|,
name|SVNDepth
name|depth
parameter_list|,
name|boolean
name|useAncestry
parameter_list|,
name|ISVNDiffStatusHandler
name|handler
parameter_list|)
throws|throws
name|SVNException
block|{
if|if
condition|(
name|handler
operator|==
literal|null
condition|)
block|{
return|return;
block|}
if|if
condition|(
operator|!
name|rN
operator|.
name|isValid
argument_list|()
operator|||
operator|!
name|rM
operator|.
name|isValid
argument_list|()
condition|)
block|{
name|SVNErrorMessage
name|err
init|=
name|SVNErrorMessage
operator|.
name|create
argument_list|(
name|SVNErrorCode
operator|.
name|CLIENT_BAD_REVISION
argument_list|,
literal|"Both rN and rM revisions should be specified"
argument_list|)
decl_stmt|;
name|SVNErrorManager
operator|.
name|error
argument_list|(
name|err
argument_list|,
name|SVNLogType
operator|.
name|DEFAULT
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|rM
operator|==
name|SVNRevision
operator|.
name|BASE
operator|||
name|rM
operator|==
name|SVNRevision
operator|.
name|WORKING
condition|)
block|{
name|SVNErrorMessage
name|err
init|=
name|SVNErrorMessage
operator|.
name|create
argument_list|(
name|SVNErrorCode
operator|.
name|UNSUPPORTED_FEATURE
argument_list|,
literal|"Summarizing diff can only compare repository to repository"
argument_list|)
decl_stmt|;
name|SVNErrorManager
operator|.
name|error
argument_list|(
name|err
argument_list|,
name|SVNLogType
operator|.
name|DEFAULT
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|doDiffURLURL
argument_list|(
name|url1
argument_list|,
literal|null
argument_list|,
name|rN
argument_list|,
literal|null
argument_list|,
name|path2
argument_list|,
name|rM
argument_list|,
name|SVNRevision
operator|.
name|UNDEFINED
argument_list|,
name|depth
argument_list|,
name|useAncestry
argument_list|,
name|handler
argument_list|)
expr_stmt|;
block|}
block|}
comment|/**      * Diffs one url against another one providing short status-like change information to the provided      * handler. This method functionality is equivalent to the 'svn diff --summarize' command.      *       * @param  url1              the url of a left-hand item to diff      * @param  rN                a revision of<code>url1</code>      * @param  url2              the url of a right-hand item to diff      * @param  rM                a revision of<code>url2</code>      * @param  recursive         controls whether operation must recurse or not       * @param  useAncestry       if<span class="javakeyword">true</span> then      *                           the paths ancestry will be noticed while calculating differences,      *                           otherwise not      * @param  handler           a diff status handler      * @throws SVNException      * @since                    1.1, new in Subversion 1.4      * @deprecated               use {@link #doDiffStatus(SVNURL, SVNRevision, SVNURL, SVNRevision, SVNDepth, boolean, ISVNDiffStatusHandler)}       *                           instead      */
specifier|public
name|void
name|doDiffStatus
parameter_list|(
name|SVNURL
name|url1
parameter_list|,
name|SVNRevision
name|rN
parameter_list|,
name|SVNURL
name|url2
parameter_list|,
name|SVNRevision
name|rM
parameter_list|,
name|boolean
name|recursive
parameter_list|,
name|boolean
name|useAncestry
parameter_list|,
name|ISVNDiffStatusHandler
name|handler
parameter_list|)
throws|throws
name|SVNException
block|{
name|doDiffStatus
argument_list|(
name|url1
argument_list|,
name|rN
argument_list|,
name|url2
argument_list|,
name|rM
argument_list|,
name|SVNDepth
operator|.
name|getInfinityOrFilesDepth
argument_list|(
name|recursive
argument_list|)
argument_list|,
name|useAncestry
argument_list|,
name|handler
argument_list|)
expr_stmt|;
block|}
comment|/**      * Produces a diff summary which lists the changed items between<code>url</code> in peg revision       *<code>pegRevision</code>, as it changed between<code>rN</code> and<code>rM</code>.       *      *<p/>      * If<code>pegRevision</code> is {@link SVNRevision#isValid() invalid}, behaves identically to       * {@link #doDiffStatus(SVNURL, SVNRevision, SVNURL, SVNRevision, SVNDepth, boolean, ISVNDiffStatusHandler)},       * using<code>url</code> for both of that method's<code>url1</code> and<code>url2</code> argments.      *       *<p/>      * The method may report false positives if<code>useAncestry</code> is       *<span class="javakeyword">false</span>, as described in the documentation for       * {@link #doDiffStatus(SVNURL, SVNRevision, SVNURL, SVNRevision, SVNDepth, boolean, ISVNDiffStatusHandler)}.      *       *<p/>       * Calls<code>handler</code> for each difference with an {@link SVNDiffStatus} object describing the       * difference.      *       *<p/>      * See {@link #doDiff(SVNURL, SVNRevision, SVNRevision, SVNRevision, SVNDepth, boolean, OutputStream)}       * for a description of the other parameters.      *      * @param  url             repository url      * @param  rN              left-hand revision      * @param  rM              right-hand revision      * @param  pegRevision     a revision in which the repository location of<code>path</code>       *                         is first looked up      * @param  depth           tree depth to process      * @param  useAncestry     if<span class="javakeyword">true</span> then      *                         the paths ancestry will be noticed while calculating differences,      *                         otherwise not      * @param  handler         a diff status handler      * @throws SVNException         * @since                  1.2, SVN 1.5      */
specifier|public
name|void
name|doDiffStatus
parameter_list|(
name|SVNURL
name|url
parameter_list|,
name|SVNRevision
name|rN
parameter_list|,
name|SVNRevision
name|rM
parameter_list|,
name|SVNRevision
name|pegRevision
parameter_list|,
name|SVNDepth
name|depth
parameter_list|,
name|boolean
name|useAncestry
parameter_list|,
name|ISVNDiffStatusHandler
name|handler
parameter_list|)
throws|throws
name|SVNException
block|{
if|if
condition|(
name|handler
operator|==
literal|null
condition|)
block|{
return|return;
block|}
if|if
condition|(
name|pegRevision
operator|==
literal|null
condition|)
block|{
name|pegRevision
operator|=
name|SVNRevision
operator|.
name|UNDEFINED
expr_stmt|;
block|}
if|if
condition|(
operator|!
name|rN
operator|.
name|isValid
argument_list|()
operator|||
operator|!
name|rM
operator|.
name|isValid
argument_list|()
condition|)
block|{
name|SVNErrorMessage
name|err
init|=
name|SVNErrorMessage
operator|.
name|create
argument_list|(
name|SVNErrorCode
operator|.
name|CLIENT_BAD_REVISION
argument_list|,
literal|"Both rN and rM revisions should be specified"
argument_list|)
decl_stmt|;
name|SVNErrorManager
operator|.
name|error
argument_list|(
name|err
argument_list|,
name|SVNLogType
operator|.
name|DEFAULT
argument_list|)
expr_stmt|;
block|}
name|doDiffURLURL
argument_list|(
name|url
argument_list|,
literal|null
argument_list|,
name|rN
argument_list|,
name|url
argument_list|,
literal|null
argument_list|,
name|rM
argument_list|,
name|pegRevision
argument_list|,
name|depth
argument_list|,
name|useAncestry
argument_list|,
name|handler
argument_list|)
expr_stmt|;
block|}
comment|/**      * Produces a diff summary which lists the changed items between      *<code>url1</code>/<code>rN</code> and<code>url2</code>/<code>rM</code> without creating text      * deltas.       *       *<p/>      * The function may report false positives if<code>ignoreAncestry</code> is       *<span class="javakeyword">false</span>, since a file might have been modified between two revisions,       * but still have the same contents.      *       *<p/>      * Calls<code>handler</code> for each difference with an {@link SVNDiffStatus} object describing the       * difference.      *       *<p/>      * See {@link #doDiff(SVNURL, SVNRevision, SVNURL, SVNRevision, SVNDepth, boolean, OutputStream)}       * for a description of the other parameters.      *       * @param  url1              the url of a left-hand item to diff      * @param  rN                a revision of<code>url1</code>      * @param  url2              the url of a right-hand item to diff      * @param  rM                a revision of<code>url2</code>      * @param  depth             tree depth to process      * @param  useAncestry       if<span class="javakeyword">true</span> then      *                           the paths ancestry will be noticed while calculating differences,      *                           otherwise not      * @param  handler           a diff status handler      * @throws SVNException      * @since                    1.2, SVN 1.5      */
specifier|public
name|void
name|doDiffStatus
parameter_list|(
name|SVNURL
name|url1
parameter_list|,
name|SVNRevision
name|rN
parameter_list|,
name|SVNURL
name|url2
parameter_list|,
name|SVNRevision
name|rM
parameter_list|,
name|SVNDepth
name|depth
parameter_list|,
name|boolean
name|useAncestry
parameter_list|,
name|ISVNDiffStatusHandler
name|handler
parameter_list|)
throws|throws
name|SVNException
block|{
if|if
condition|(
name|handler
operator|==
literal|null
condition|)
block|{
return|return;
block|}
if|if
condition|(
operator|!
name|rN
operator|.
name|isValid
argument_list|()
operator|||
operator|!
name|rM
operator|.
name|isValid
argument_list|()
condition|)
block|{
name|SVNErrorMessage
name|err
init|=
name|SVNErrorMessage
operator|.
name|create
argument_list|(
name|SVNErrorCode
operator|.
name|CLIENT_BAD_REVISION
argument_list|,
literal|"Both rN and rM revisions should be specified"
argument_list|)
decl_stmt|;
name|SVNErrorManager
operator|.
name|error
argument_list|(
name|err
argument_list|,
name|SVNLogType
operator|.
name|DEFAULT
argument_list|)
expr_stmt|;
block|}
name|doDiffURLURL
argument_list|(
name|url1
argument_list|,
literal|null
argument_list|,
name|rN
argument_list|,
name|url2
argument_list|,
literal|null
argument_list|,
name|rM
argument_list|,
name|SVNRevision
operator|.
name|UNDEFINED
argument_list|,
name|depth
argument_list|,
name|useAncestry
argument_list|,
name|handler
argument_list|)
expr_stmt|;
block|}
comment|/**      * Applies the differences between two sources (using Working Copy paths to       * get corresponding URLs of the sources) to a Working Copy path.      *      *<p>      * Corresponds to the SVN command line client's       *<code>'svn merge sourceWCPATH1@rev1 sourceWCPATH2@rev2 WCPATH'</code> command.      *       *<p>      * If you need only to try merging your file(s) without actual merging, you      * should set<code>dryRun</code> to<span class="javakeyword">true</span>.      * Your event handler will be dispatched status type information on the target       * path(s). If a path can be successfully merged, the status type will be      * {@link SVNStatusType#MERGED} for that path.        *       * @param  path1          the first source path      * @param  revision1      a revision of<code>path1</code>      * @param  path2          the second source path which URL is to be compared      *                        against the URL of<code>path1</code>      * @param  revision2      a revision of<code>path2</code>      * @param  dstPath        the target path to which the result should      *                        be applied       * @param  recursive<span class="javakeyword">true</span> to descend       *                        recursively      * @param  useAncestry    if<span class="javakeyword">true</span> then      *                        the paths ancestry will be noticed while calculating differences,      *                        otherwise not      * @param  force<span class="javakeyword">true</span> to      *                        force the operation to run      * @param  dryRun         if<span class="javakeyword">true</span> then      *                        only tries the operation to run (to find out      *                        if a file can be merged successfully)      * @throws SVNException   if one of the following is true:      *<ul>      *<li>at least one of<code>revision1</code> and<code>revision2</code> is      *                        invalid      *<li><code>path1</code> has no URL      *<li><code>path2</code> has no URL      *<li>the repository location of<code>path1</code> was       *                        not found in<code>revision1</code>      *<li>the repository location of<code>path2</code> was       *                        not found in<code>revision2</code>      *<li><code>dstPath</code> is not under version control      *</ul>      * @deprecated            use {@link #doMerge(File, SVNRevision, File, SVNRevision, File, SVNDepth, boolean, boolean, boolean, boolean)}      *                        instead      */
specifier|public
name|void
name|doMerge
parameter_list|(
name|File
name|path1
parameter_list|,
name|SVNRevision
name|revision1
parameter_list|,
name|File
name|path2
parameter_list|,
name|SVNRevision
name|revision2
parameter_list|,
name|File
name|dstPath
parameter_list|,
name|boolean
name|recursive
parameter_list|,
name|boolean
name|useAncestry
parameter_list|,
name|boolean
name|force
parameter_list|,
name|boolean
name|dryRun
parameter_list|)
throws|throws
name|SVNException
block|{
name|doMerge
argument_list|(
name|path1
argument_list|,
name|revision1
argument_list|,
name|path2
argument_list|,
name|revision2
argument_list|,
name|dstPath
argument_list|,
name|SVNDepth
operator|.
name|getInfinityOrFilesDepth
argument_list|(
name|recursive
argument_list|)
argument_list|,
name|useAncestry
argument_list|,
name|force
argument_list|,
name|dryRun
argument_list|,
literal|false
argument_list|)
expr_stmt|;
block|}
comment|/**       * Merges changes from<code>path1</code>/<code>revision1</code> to<code>path2</code>/<code>revision2</code>       * into the working-copy path<code>dstPath</code>.      *       *<p/>      *<code>path1</code> and<code>path2</code> must both represent the same node kind - that      * is, if<code>path1</code> is a directory,<code>path2</code> must also be, and if<code>path1</code>      * is a file,<code>path2</code> must also be.      *       *<p/>      * If<code>depth</code> is {@link SVNDepth#INFINITY}, merges fully recursively. Else if       * {@link SVNDepth#IMMEDIATES}, merges changes at most to files that are immediate children of       *<code>dstPath</code> and to directory properties of<code>dstPath</code> and its immediate subdirectory       * children. Else if {@link SVNDepth#FILES}, merges at most to immediate file children of       *<code>dstPath</code> and to<code>dstPath</code> itself. Else if {@link SVNDepth#EMPTY}, applies changes       * only to<code>dstPath</code> (i.e., directory property changes only).      *      *<p/>      * If<code>depth</code> is {@link SVNDepth#UNKNOWN}, uses the depth of<code>dstPath</code>.      *      *<p/>      * Uses<code>useAncestry</code> to control whether or not items being diffed will be checked for       * relatedness first. Unrelated items are typically transmitted to the editor as a deletion of one thing      * and the addition of another, but if this flag is<span class="javakeyword">true</span>, unrelated      * items will be diffed as if they were related.      *      *<p/>      * If<code>force</code> is not set and the merge involves deleting locally modified or unversioned items       * the operation will fail. If<code>force</code> is set such items will be deleted.      *       *<p/>      * {@link #getMergeOptions() merge options} is used to pass arguments to the merge processes (internal or       * external).       *       *<p/>      * If the caller's {@link ISVNEventHandler} is not<span class="javakeyword">null</span>, then it will be       * called once for each merged target.      *       *<p>      * If<code>recordOnly</code> is<span class="javakeyword">true</span>, the merge isn't actually performed,       * but the mergeinfo for the revisions which would've been merged is recorded in the working copy (and must       * be subsequently committed back to the repository).      *       *<p/>      * If<code>dryRun</code> is<span class="javakeyword">true</span>, the merge is carried out, and full       * notification feedback is provided, but the working copy is not modified.      *      *<p/>      * Note: this method requires repository access.       *       * @param  path1             left-hand working copy path      * @param  revision1         revision of<code>path1</code>      * @param  path2             right-hand working copy path      * @param  revision2         revision of<code>path2</code>      * @param  dstPath           target working copy path      * @param  depth             tree depth to process      * @param  useAncestry       if<span class="javakeyword">true</span> then      *                           the paths ancestry will be noticed while calculating differences,      *                           otherwise not      * @param  force<span class="javakeyword">true</span> to      *                           force the operation to run      * @param  dryRun            if<span class="javakeyword">true</span> then runs merge without any file       *                           changes       * @param  recordOnly        if<span class="javakeyword">true</span>, records only the rusult of merge -       *                           mergeinfo data      * @throws SVNException      in the following cases:      *<ul>      *<li/>exception with {@link SVNErrorCode#CLIENT_BAD_REVISION} error code -       *                           if either<code>revision1</code> or<code>revision2</code> is       *                           {@link SVNRevision#isValid() invalid}      *<li/>exception with {@link SVNErrorCode#ENTRY_MISSING_URL} error code -       *                           if failed to retrieve url of either<code>path1</code> or<code>path2</code>      *</ul>      * @since                    1.2, SVN 1.5      */
specifier|public
name|void
name|doMerge
parameter_list|(
name|File
name|path1
parameter_list|,
name|SVNRevision
name|revision1
parameter_list|,
name|File
name|path2
parameter_list|,
name|SVNRevision
name|revision2
parameter_list|,
name|File
name|dstPath
parameter_list|,
name|SVNDepth
name|depth
parameter_list|,
name|boolean
name|useAncestry
parameter_list|,
name|boolean
name|force
parameter_list|,
name|boolean
name|dryRun
parameter_list|,
name|boolean
name|recordOnly
parameter_list|)
throws|throws
name|SVNException
block|{
name|path1
operator|=
name|path1
operator|.
name|getAbsoluteFile
argument_list|()
expr_stmt|;
name|path2
operator|=
name|path2
operator|.
name|getAbsoluteFile
argument_list|()
expr_stmt|;
name|dstPath
operator|=
name|dstPath
operator|.
name|getAbsoluteFile
argument_list|()
expr_stmt|;
comment|/*          * Same as 2. merge sourceWCPATH1@N sourceWCPATH2@M [WCPATH]          * or      3. merge -r N:M SOURCE[@REV] [WCPATH]          * where SOURCE is a path and path1 and path2 are the same.          */
name|SVNURL
name|url1
init|=
name|getURL
argument_list|(
name|path1
argument_list|)
decl_stmt|;
if|if
condition|(
name|url1
operator|==
literal|null
condition|)
block|{
name|SVNErrorMessage
name|err
init|=
name|SVNErrorMessage
operator|.
name|create
argument_list|(
name|SVNErrorCode
operator|.
name|ENTRY_MISSING_URL
argument_list|,
literal|"''{0}'' has no URL"
argument_list|,
name|path1
argument_list|)
decl_stmt|;
name|SVNErrorManager
operator|.
name|error
argument_list|(
name|err
argument_list|,
name|SVNLogType
operator|.
name|WC
argument_list|)
expr_stmt|;
block|}
name|SVNURL
name|url2
init|=
name|getURL
argument_list|(
name|path2
argument_list|)
decl_stmt|;
if|if
condition|(
name|url2
operator|==
literal|null
condition|)
block|{
name|SVNErrorMessage
name|err
init|=
name|SVNErrorMessage
operator|.
name|create
argument_list|(
name|SVNErrorCode
operator|.
name|ENTRY_MISSING_URL
argument_list|,
literal|"''{0}'' has no URL"
argument_list|,
name|path2
argument_list|)
decl_stmt|;
name|SVNErrorManager
operator|.
name|error
argument_list|(
name|err
argument_list|,
name|SVNLogType
operator|.
name|WC
argument_list|)
expr_stmt|;
block|}
name|runMerge
argument_list|(
name|url1
argument_list|,
name|revision1
argument_list|,
name|url2
argument_list|,
name|revision2
argument_list|,
name|dstPath
argument_list|,
name|depth
argument_list|,
name|dryRun
argument_list|,
name|force
argument_list|,
operator|!
name|useAncestry
argument_list|,
name|recordOnly
argument_list|)
expr_stmt|;
block|}
comment|/**      * Applies the differences between two sources (a source URL against the       * repository location URL of a source Working Copy path) to a Working Copy       * path.      *       *<p>      * If you need only to try merging your file(s) without actual merging, you      * should set<code>dryRun</code> to<span class="javakeyword">true</span>.      * Your event handler will be dispatched status type information on the target       * path(s). If a path can be successfully merged, the status type will be      * {@link SVNStatusType#MERGED} for that path.        *       * @param  path1          the first source - a WC path       * @param  revision1      a revision of<code>path1</code>      * @param  url2           the second source - a URL that is to be compared       *                        against the URL of<code>path1</code>      * @param  revision2      a revision of<code>url2</code>      * @param  dstPath        the target path to which the result should      *                        be applied      * @param  recursive<span class="javakeyword">true</span> to descend       *                        recursively      * @param  useAncestry    if<span class="javakeyword">true</span> then      *                        the paths ancestry will be noticed while calculating differences,      *                        otherwise not      * @param  force<span class="javakeyword">true</span> to      *                        force the operation to run      * @param  dryRun         if<span class="javakeyword">true</span> then      *                        only tries the operation to run (to find out      *                        if a file can be merged successfully)      * @throws SVNException   if one of the following is true:      *<ul>      *<li>at least one of<code>revision1</code> and<code>revision2</code> is      *                        invalid      *<li><code>path1</code> has no URL      *<li>the repository location of<code>path1</code> was       *                        not found in<code>revision1</code>      *<li><code>url2</code> was not found in       *<code>revision2</code>      *<li><code>dstPath</code> is not under version control      *</ul>      * @deprecated            use {@link #doMerge(File, SVNRevision, SVNURL, SVNRevision, File, SVNDepth, boolean, boolean, boolean, boolean)}      *                        instead      */
specifier|public
name|void
name|doMerge
parameter_list|(
name|File
name|path1
parameter_list|,
name|SVNRevision
name|revision1
parameter_list|,
name|SVNURL
name|url2
parameter_list|,
name|SVNRevision
name|revision2
parameter_list|,
name|File
name|dstPath
parameter_list|,
name|boolean
name|recursive
parameter_list|,
name|boolean
name|useAncestry
parameter_list|,
name|boolean
name|force
parameter_list|,
name|boolean
name|dryRun
parameter_list|)
throws|throws
name|SVNException
block|{
name|doMerge
argument_list|(
name|path1
argument_list|,
name|revision1
argument_list|,
name|url2
argument_list|,
name|revision2
argument_list|,
name|dstPath
argument_list|,
name|SVNDepth
operator|.
name|getInfinityOrFilesDepth
argument_list|(
name|recursive
argument_list|)
argument_list|,
name|useAncestry
argument_list|,
name|force
argument_list|,
name|dryRun
argument_list|,
literal|false
argument_list|)
expr_stmt|;
block|}
comment|/**       * Merges changes from<code>path1</code>/<code>revision1</code> to<code>url2</code>/<code>revision2</code>       * into the working-copy path<code>dstPath</code>.      *       *<p/>      *<code>path1</code> and<code>url2</code> must both represent the same node kind - that      * is, if<code>path1</code> is a directory,<code>url2</code> must also be, and if<code>path1</code>      * is a file,<code>url2</code> must also be.      *       *<p/>      * If<code>depth</code> is {@link SVNDepth#INFINITY}, merges fully recursively. Else if       * {@link SVNDepth#IMMEDIATES}, merges changes at most to files that are immediate children of       *<code>dstPath</code> and to directory properties of<code>dstPath</code> and its immediate subdirectory       * children. Else if {@link SVNDepth#FILES}, merges at most to immediate file children of       *<code>dstPath</code> and to<code>dstPath</code> itself. Else if {@link SVNDepth#EMPTY}, applies changes       * only to<code>dstPath</code> (i.e., directory property changes only).      *      *<p/>      * If<code>depth</code> is {@link SVNDepth#UNKNOWN}, uses the depth of<code>dstPath</code>.      *      *<p/>      * Uses<code>useAncestry</code> to control whether or not items being diffed will be checked for       * relatedness first. Unrelated items are typically transmitted to the editor as a deletion of one thing      * and the addition of another, but if this flag is<span class="javakeyword">true</span>, unrelated      * items will be diffed as if they were related.      *      *<p/>      * If<code>force</code> is not set and the merge involves deleting locally modified or unversioned items       * the operation will fail. If<code>force</code> is set such items will be deleted.      *       *<p/>      * {@link #getMergeOptions() merge options} is used to pass arguments to the merge processes (internal or       * external).       *       *<p/>      * If the caller's {@link ISVNEventHandler} is not<span class="javakeyword">null</span>, then it will be       * called once for each merged target.      *       *<p>      * If<code>recordOnly</code> is<span class="javakeyword">true</span>, the merge isn't actually performed,       * but the mergeinfo for the revisions which would've been merged is recorded in the working copy (and must       * be subsequently committed back to the repository).      *       *<p/>      * If<code>dryRun</code> is<span class="javakeyword">true</span>, the merge is carried out, and full       * notification feedback is provided, but the working copy is not modified.      *      *<p/>      * Note: this method requires repository access.       *       * @param  path1             left-hand item - working copy path      * @param  revision1         revision of<code>path1</code>      * @param  url2              right-hand item - repository url      * @param  revision2         revision of<code>url2</code>      * @param  dstPath           target working copy path      * @param  depth             tree depth to process      * @param  useAncestry       if<span class="javakeyword">true</span> then      *                           the paths ancestry will be noticed while calculating differences,      *                           otherwise not      * @param  force<span class="javakeyword">true</span> to      *                           force the operation to run      * @param  dryRun            if<span class="javakeyword">true</span> then runs merge without any file       *                           changes       * @param  recordOnly        if<span class="javakeyword">true</span>, records only the rusult of merge -       *                           mergeinfo data      * @throws SVNException      in the following cases:      *<ul>      *<li/>exception with {@link SVNErrorCode#CLIENT_BAD_REVISION} error code -       *                           if either<code>revision1</code> or<code>revision2</code> is       *                           {@link SVNRevision#isValid() invalid}      *<li/>exception with {@link SVNErrorCode#ENTRY_MISSING_URL} error code -       *                           if failed to retrieve the repository url of<code>path1</code>      *</ul>      * @since                    1.2, SVN 1.5      */
specifier|public
name|void
name|doMerge
parameter_list|(
name|File
name|path1
parameter_list|,
name|SVNRevision
name|revision1
parameter_list|,
name|SVNURL
name|url2
parameter_list|,
name|SVNRevision
name|revision2
parameter_list|,
name|File
name|dstPath
parameter_list|,
name|SVNDepth
name|depth
parameter_list|,
name|boolean
name|useAncestry
parameter_list|,
name|boolean
name|force
parameter_list|,
name|boolean
name|dryRun
parameter_list|,
name|boolean
name|recordOnly
parameter_list|)
throws|throws
name|SVNException
block|{
name|path1
operator|=
name|path1
operator|.
name|getAbsoluteFile
argument_list|()
expr_stmt|;
name|dstPath
operator|=
name|dstPath
operator|.
name|getAbsoluteFile
argument_list|()
expr_stmt|;
name|SVNURL
name|url1
init|=
name|getURL
argument_list|(
name|path1
argument_list|)
decl_stmt|;
if|if
condition|(
name|url1
operator|==
literal|null
condition|)
block|{
name|SVNErrorMessage
name|err
init|=
name|SVNErrorMessage
operator|.
name|create
argument_list|(
name|SVNErrorCode
operator|.
name|ENTRY_MISSING_URL
argument_list|,
literal|"''{0}'' has no URL"
argument_list|,
name|path1
argument_list|)
decl_stmt|;
name|SVNErrorManager
operator|.
name|error
argument_list|(
name|err
argument_list|,
name|SVNLogType
operator|.
name|WC
argument_list|)
expr_stmt|;
block|}
name|runMerge
argument_list|(
name|url1
argument_list|,
name|revision1
argument_list|,
name|url2
argument_list|,
name|revision2
argument_list|,
name|dstPath
argument_list|,
name|depth
argument_list|,
name|dryRun
argument_list|,
name|force
argument_list|,
operator|!
name|useAncestry
argument_list|,
name|recordOnly
argument_list|)
expr_stmt|;
block|}
comment|/**      * Applies the differences between two sources (the repository location URL of       * a source Working Copy against a source URL) to a Working Copy path.      *       *<p>      * If you need only to try merging your file(s) without actual merging, you      * should set<code>dryRun</code> to<span class="javakeyword">true</span>.      * Your event handler will be dispatched status type information on the target       * path(s). If a path can be successfully merged, the status type will be      * {@link SVNStatusType#MERGED} for that path.        *       * @param  url1           the first source - a URL      * @param  revision1      a revision of<code>url1</code>      * @param  path2          the second source - a WC path that is to be compared       *                        against<code>url1</code>      * @param  revision2      a revision of<code>path2</code>      * @param  dstPath        the target path to which the result should      *                        be applied      * @param  recursive<span class="javakeyword">true</span> to descend       *                        recursively      * @param  useAncestry    if<span class="javakeyword">true</span> then      *                        the paths ancestry will be noticed while calculating differences,      *                        otherwise not      * @param  force<span class="javakeyword">true</span> to      *                        force the operation to run      * @param  dryRun         if<span class="javakeyword">true</span> then      *                        only tries the operation to run (to find out      *                        if a file can be merged successfully)      * @throws SVNException   if one of the following is true:      *<ul>      *<li>at least one of<code>revision1</code> and<code>revision2</code> is      *                        invalid      *<li><code>path2</code> has no URL      *<li><code>url1</code> was not found in       *<code>revision1</code>      *<li>the repository location of<code>path2</code> was       *                        not found in<code>revision2</code>      *<li><code>dstPath</code> is not under version control      *</ul>      * @deprecated            use {@link #doMerge(SVNURL, SVNRevision, File, SVNRevision, File, SVNDepth, boolean, boolean, boolean, boolean)}      *                        instead      */
specifier|public
name|void
name|doMerge
parameter_list|(
name|SVNURL
name|url1
parameter_list|,
name|SVNRevision
name|revision1
parameter_list|,
name|File
name|path2
parameter_list|,
name|SVNRevision
name|revision2
parameter_list|,
name|File
name|dstPath
parameter_list|,
name|boolean
name|recursive
parameter_list|,
name|boolean
name|useAncestry
parameter_list|,
name|boolean
name|force
parameter_list|,
name|boolean
name|dryRun
parameter_list|)
throws|throws
name|SVNException
block|{
name|doMerge
argument_list|(
name|url1
argument_list|,
name|revision1
argument_list|,
name|path2
argument_list|,
name|revision2
argument_list|,
name|dstPath
argument_list|,
name|SVNDepth
operator|.
name|getInfinityOrFilesDepth
argument_list|(
name|recursive
argument_list|)
argument_list|,
name|useAncestry
argument_list|,
name|force
argument_list|,
name|dryRun
argument_list|,
literal|false
argument_list|)
expr_stmt|;
block|}
comment|/**       * Merges changes from<code>url1</code>/<code>revision1</code> to<code>path2</code>/<code>revision2</code>       * into the working-copy path<code>dstPath</code>.      *       *<p/>      *<code>url1</code> and<code>path2</code> must both represent the same node kind - that      * is, if<code>url1</code> is a directory,<code>path2</code> must also be, and if<code>url1</code>      * is a file,<code>path2</code> must also be.      *       *<p/>      * If<code>depth</code> is {@link SVNDepth#INFINITY}, merges fully recursively. Else if       * {@link SVNDepth#IMMEDIATES}, merges changes at most to files that are immediate children of       *<code>dstPath</code> and to directory properties of<code>dstPath</code> and its immediate subdirectory       * children. Else if {@link SVNDepth#FILES}, merges at most to immediate file children of       *<code>dstPath</code> and to<code>dstPath</code> itself. Else if {@link SVNDepth#EMPTY}, applies changes       * only to<code>dstPath</code> (i.e., directory property changes only).      *      *<p/>      * If<code>depth</code> is {@link SVNDepth#UNKNOWN}, uses the depth of<code>dstPath</code>.      *      *<p/>      * Uses<code>useAncestry</code> to control whether or not items being diffed will be checked for       * relatedness first. Unrelated items are typically transmitted to the editor as a deletion of one thing      * and the addition of another, but if this flag is<span class="javakeyword">true</span>, unrelated      * items will be diffed as if they were related.      *      *<p/>      * If<code>force</code> is not set and the merge involves deleting locally modified or unversioned items       * the operation will fail. If<code>force</code> is set such items will be deleted.      *       *<p/>      * {@link #getMergeOptions() merge options} is used to pass arguments to the merge processes (internal or       * external).       *       *<p/>      * If the caller's {@link ISVNEventHandler} is not<span class="javakeyword">null</span>, then it will be       * called once for each merged target.      *       *<p>      * If<code>recordOnly</code> is<span class="javakeyword">true</span>, the merge isn't actually performed,       * but the mergeinfo for the revisions which would've been merged is recorded in the working copy (and must       * be subsequently committed back to the repository).      *       *<p/>      * If<code>dryRun</code> is<span class="javakeyword">true</span>, the merge is carried out, and full       * notification feedback is provided, but the working copy is not modified.      *      *<p/>      * Note: this method requires repository access.       *       * @param  url1              left-hand item - repository url      * @param  revision1         revision of<code>url1</code>      * @param  path2             right-hand item - working copy path      * @param  revision2         revision of<code>path2</code>      * @param  dstPath           target working copy path      * @param  depth             tree depth to process      * @param  useAncestry       if<span class="javakeyword">true</span> then      *                           the paths ancestry will be noticed while calculating differences,      *                           otherwise not      * @param  force<span class="javakeyword">true</span> to      *                           force the operation to run      * @param  dryRun            if<span class="javakeyword">true</span> then runs merge without any file       *                           changes       * @param  recordOnly        if<span class="javakeyword">true</span>, records only the rusult of merge -       *                           mergeinfo data      * @throws SVNException      in the following cases:      *<ul>      *<li/>exception with {@link SVNErrorCode#CLIENT_BAD_REVISION} error code -       *                           if either<code>revision1</code> or<code>revision2</code> is       *                           {@link SVNRevision#isValid() invalid}      *<li/>exception with {@link SVNErrorCode#ENTRY_MISSING_URL} error code -       *                           if failed to retrieve the repository url of<code>path2</code>      *</ul>      * @since                    1.2, SVN 1.5      */
specifier|public
name|void
name|doMerge
parameter_list|(
name|SVNURL
name|url1
parameter_list|,
name|SVNRevision
name|revision1
parameter_list|,
name|File
name|path2
parameter_list|,
name|SVNRevision
name|revision2
parameter_list|,
name|File
name|dstPath
parameter_list|,
name|SVNDepth
name|depth
parameter_list|,
name|boolean
name|useAncestry
parameter_list|,
name|boolean
name|force
parameter_list|,
name|boolean
name|dryRun
parameter_list|,
name|boolean
name|recordOnly
parameter_list|)
throws|throws
name|SVNException
block|{
name|path2
operator|=
name|path2
operator|.
name|getAbsoluteFile
argument_list|()
expr_stmt|;
name|dstPath
operator|=
name|dstPath
operator|.
name|getAbsoluteFile
argument_list|()
expr_stmt|;
name|SVNURL
name|url2
init|=
name|getURL
argument_list|(
name|path2
argument_list|)
decl_stmt|;
if|if
condition|(
name|url2
operator|==
literal|null
condition|)
block|{
name|SVNErrorMessage
name|err
init|=
name|SVNErrorMessage
operator|.
name|create
argument_list|(
name|SVNErrorCode
operator|.
name|ENTRY_MISSING_URL
argument_list|,
literal|"''{0}'' has no URL"
argument_list|,
name|path2
argument_list|)
decl_stmt|;
name|SVNErrorManager
operator|.
name|error
argument_list|(
name|err
argument_list|,
name|SVNLogType
operator|.
name|WC
argument_list|)
expr_stmt|;
block|}
name|runMerge
argument_list|(
name|url1
argument_list|,
name|revision1
argument_list|,
name|url2
argument_list|,
name|revision2
argument_list|,
name|dstPath
argument_list|,
name|depth
argument_list|,
name|dryRun
argument_list|,
name|force
argument_list|,
operator|!
name|useAncestry
argument_list|,
name|recordOnly
argument_list|)
expr_stmt|;
block|}
comment|/**      * Applies the differences between two sources (one source URL against another       * source URL) to a Working Copy path.      *      *<p>      * Corresponds to the SVN command line client's       *<code>'svn merge sourceURL1@rev1 sourceURL2@rev2 WCPATH'</code> command.      *       *<p>      * If you need only to try merging your file(s) without actual merging, you      * should set<code>dryRun</code> to<span class="javakeyword">true</span>.      * Your event handler will be dispatched status type information on the target       * path(s). If a path can be successfully merged, the status type will be      * {@link SVNStatusType#MERGED} for that path.        *       * @param  url1           the first source URL      * @param  revision1      a revision of<code>url1</code>      * @param  url2           the second source URL that is to be compared against       *<code>url1</code>      * @param  revision2      a revision of<code>url2</code>      * @param  dstPath        the target path to which the result should      *                        be applied      * @param  recursive<span class="javakeyword">true</span> to descend       *                        recursively      * @param  useAncestry    if<span class="javakeyword">true</span> then      *                        the paths ancestry will be noticed while calculating differences,      *                        otherwise not      * @param  force<span class="javakeyword">true</span> to      *                        force the operation to run      * @param  dryRun         if<span class="javakeyword">true</span> then      *                        only tries the operation to run (to find out      *                        if a file can be merged successfully)      * @throws SVNException   if one of the following is true:      *<ul>      *<li>at least one of<code>revision1</code> and<code>revision2</code> is      *                        invalid      *<li><code>url1</code> was not found in       *<code>revision1</code>      *<li><code>url2</code> was not found in       *<code>revision2</code>      *<li><code>dstPath</code> is not under version control      *</ul>      * @deprecated            use {@link #doMerge(SVNURL, SVNRevision, SVNURL, SVNRevision, File, SVNDepth, boolean, boolean, boolean, boolean)}      *                        instead                              */
specifier|public
name|void
name|doMerge
parameter_list|(
name|SVNURL
name|url1
parameter_list|,
name|SVNRevision
name|revision1
parameter_list|,
name|SVNURL
name|url2
parameter_list|,
name|SVNRevision
name|revision2
parameter_list|,
name|File
name|dstPath
parameter_list|,
name|boolean
name|recursive
parameter_list|,
name|boolean
name|useAncestry
parameter_list|,
name|boolean
name|force
parameter_list|,
name|boolean
name|dryRun
parameter_list|)
throws|throws
name|SVNException
block|{
name|doMerge
argument_list|(
name|url1
argument_list|,
name|revision1
argument_list|,
name|url2
argument_list|,
name|revision2
argument_list|,
name|dstPath
argument_list|,
name|SVNDepth
operator|.
name|getInfinityOrFilesDepth
argument_list|(
name|recursive
argument_list|)
argument_list|,
name|useAncestry
argument_list|,
name|force
argument_list|,
name|dryRun
argument_list|,
literal|false
argument_list|)
expr_stmt|;
block|}
comment|/**       * Merges changes from<code>url1</code>/<code>revision1</code> to<code>url2</code>/<code>revision2</code>       * into the working-copy path<code>dstPath</code>.      *       *<p/>      *<code>url1</code> and<code>url2</code> must both represent the same node kind - that      * is, if<code>url1</code> is a directory,<code>url2</code> must also be, and if<code>url1</code>      * is a file,<code>url2</code> must also be.      *       *<p/>      * If<code>depth</code> is {@link SVNDepth#INFINITY}, merges fully recursively. Else if       * {@link SVNDepth#IMMEDIATES}, merges changes at most to files that are immediate children of       *<code>dstPath</code> and to directory properties of<code>dstPath</code> and its immediate subdirectory       * children. Else if {@link SVNDepth#FILES}, merges at most to immediate file children of       *<code>dstPath</code> and to<code>dstPath</code> itself. Else if {@link SVNDepth#EMPTY}, applies changes       * only to<code>dstPath</code> (i.e., directory property changes only).      *      *<p/>      * If<code>depth</code> is {@link SVNDepth#UNKNOWN}, uses the depth of<code>dstPath</code>.      *      *<p/>      * Uses<code>useAncestry</code> to control whether or not items being diffed will be checked for       * relatedness first. Unrelated items are typically transmitted to the editor as a deletion of one thing      * and the addition of another, but if this flag is<span class="javakeyword">true</span>, unrelated      * items will be diffed as if they were related.      *      *<p/>      * If<code>force</code> is not set and the merge involves deleting locally modified or unversioned items       * the operation will fail. If<code>force</code> is set such items will be deleted.      *       *<p/>      * {@link #getMergeOptions() merge options} is used to pass arguments to the merge processes (internal or       * external).       *       *<p/>      * If the caller's {@link ISVNEventHandler} is not<span class="javakeyword">null</span>, then it will be       * called once for each merged target.      *       *<p/>      * If<code>recordOnly</code> is<span class="javakeyword">true</span>, the merge isn't actually performed,       * but the mergeinfo for the revisions which would've been merged is recorded in the working copy (and must       * be subsequently committed back to the repository).      *       *<p/>      * If<code>dryRun</code> is<span class="javakeyword">true</span>, the merge is carried out, and full       * notification feedback is provided, but the working copy is not modified.      *      *<p/>      * Note: this method requires repository access.       *       * @param  url1              left-hand repository url      * @param  revision1         revision of<code>url1</code>      * @param  url2              right-hand repository url      * @param  revision2         revision of<code>url2</code>      * @param  dstPath           target working copy path      * @param  depth             tree depth to process      * @param  useAncestry       if<span class="javakeyword">true</span> then      *                           the paths ancestry will be noticed while calculating differences,      *                           otherwise not      * @param  force<span class="javakeyword">true</span> to      *                           force the operation to run      * @param  dryRun            if<span class="javakeyword">true</span> then runs merge without any file       *                           changes       * @param  recordOnly        if<span class="javakeyword">true</span>, records only the rusult of merge -       *                           mergeinfo data      * @throws SVNException      in the following cases:      *<ul>      *<li/>exception with {@link SVNErrorCode#CLIENT_BAD_REVISION} error code -       *                           if either<code>revision1</code> or<code>revision2</code> is       *                           {@link SVNRevision#isValid() invalid}      *</ul>      * @since                    1.2, SVN 1.5      */
specifier|public
name|void
name|doMerge
parameter_list|(
name|SVNURL
name|url1
parameter_list|,
name|SVNRevision
name|revision1
parameter_list|,
name|SVNURL
name|url2
parameter_list|,
name|SVNRevision
name|revision2
parameter_list|,
name|File
name|dstPath
parameter_list|,
name|SVNDepth
name|depth
parameter_list|,
name|boolean
name|useAncestry
parameter_list|,
name|boolean
name|force
parameter_list|,
name|boolean
name|dryRun
parameter_list|,
name|boolean
name|recordOnly
parameter_list|)
throws|throws
name|SVNException
block|{
name|runMerge
argument_list|(
name|url1
argument_list|,
name|revision1
argument_list|,
name|url2
argument_list|,
name|revision2
argument_list|,
name|dstPath
argument_list|,
name|depth
argument_list|,
name|dryRun
argument_list|,
name|force
argument_list|,
operator|!
name|useAncestry
argument_list|,
name|recordOnly
argument_list|)
expr_stmt|;
block|}
comment|/**      * Applies the differences between two sources (a source URL in a particular      * revision against the same source URL in another particular revision) to a       * Working Copy path.      *       *<p>      * Corresponds to the SVN command line client's       *<code>'svn merge -r rev1:rev2 URL@pegRev WCPATH'</code> command.      *       *<p>      * If you need only to try merging your file(s) without actual merging, you      * should set<code>dryRun</code> to<span class="javakeyword">true</span>.      * Your event handler will be dispatched status type information on the target       * path(s). If a path can be successfully merged, the status type will be      * {@link SVNStatusType#MERGED} for that path.        *       * @param  url1           a source URL      * @param  pegRevision    a revision in which code>url1</code>       *                        is first looked up      * @param  revision1      a left-hand revision of<code>url1</code>       * @param  revision2      a right-hand revision of<code>url1</code>      * @param  dstPath        the target path to which the result should      *                        be applied      * @param  recursive<span class="javakeyword">true</span> to descend       *                        recursively      * @param  useAncestry    if<span class="javakeyword">true</span> then      *                        the paths ancestry will be noticed while calculating differences,      *                        otherwise not      * @param  force<span class="javakeyword">true</span> to      *                        force the operation to run      * @param  dryRun         if<span class="javakeyword">true</span> then      *                        only tries the operation to run (to find out      *                        if a file can be merged successfully)      * @throws SVNException   if one of the following is true:      *<ul>      *<li>at least one of<code>revision1</code>,<code>revision2</code> and      *<code>pegRevision</code> is invalid      *<li><code>url1</code> was not found in       *<code>revision1</code>      *<li><code>url1</code> was not found in       *<code>revision2</code>      *<li><code>dstPath</code> is not under version control      *</ul>      * @deprecated            use {@link #doMerge(SVNURL, SVNRevision, Collection, File, SVNDepth, boolean, boolean, boolean, boolean)}      *                        instead      */
specifier|public
name|void
name|doMerge
parameter_list|(
name|SVNURL
name|url1
parameter_list|,
name|SVNRevision
name|pegRevision
parameter_list|,
name|SVNRevision
name|revision1
parameter_list|,
name|SVNRevision
name|revision2
parameter_list|,
name|File
name|dstPath
parameter_list|,
name|boolean
name|recursive
parameter_list|,
name|boolean
name|useAncestry
parameter_list|,
name|boolean
name|force
parameter_list|,
name|boolean
name|dryRun
parameter_list|)
throws|throws
name|SVNException
block|{
name|SVNRevisionRange
name|range
init|=
operator|new
name|SVNRevisionRange
argument_list|(
name|revision1
argument_list|,
name|revision2
argument_list|)
decl_stmt|;
name|List
name|rangesToMerge
init|=
operator|new
name|LinkedList
argument_list|()
decl_stmt|;
name|rangesToMerge
operator|.
name|add
argument_list|(
name|range
argument_list|)
expr_stmt|;
name|doMerge
argument_list|(
name|url1
argument_list|,
name|pegRevision
argument_list|,
name|rangesToMerge
argument_list|,
name|dstPath
argument_list|,
name|SVNDepth
operator|.
name|getInfinityOrFilesDepth
argument_list|(
name|recursive
argument_list|)
argument_list|,
name|useAncestry
argument_list|,
name|force
argument_list|,
name|dryRun
argument_list|,
literal|false
argument_list|)
expr_stmt|;
block|}
comment|/**      * Merges the changes between<code>url1</code> in peg revision<code>pegRevision</code>, as it changed       * between the ranges described in<code>rangesToMerge</code>.      *       *<p/>      *<code>rangesToMerge</code> is a collection of {@link SVNRevisionRange} ranges. These ranges may       * describe additive and/or subtractive merge ranges, they may overlap fully or partially, and/or they may       * partially or fully negate each other. This rangelist is not required to be sorted.        *       *<p/>      * All other options are handled identically to       * {@link #doMerge(SVNURL, SVNRevision, SVNURL, SVNRevision, File, SVNDepth, boolean, boolean, boolean, boolean)}.      *      *<p/>      * Note: this method requires repository access.      *       * @param  url1           a source URL      * @param  pegRevision    a revision in which<code>url1</code>       *                        is first looked up      * @param  rangesToMerge  collection of revision ranges to merge      * @param  dstPath        target working copy path      * @param  depth          tree depth to process      * @param  useAncestry    if<span class="javakeyword">true</span> then      *                        the paths ancestry will be noticed while calculating differences,      *                        otherwise not      * @param  force<span class="javakeyword">true</span> to      *                        force the operation to run      * @param  dryRun         if<span class="javakeyword">true</span> then      *                        only tries the operation to run (to find out      *                        if a file can be merged successfully)      * @param  recordOnly      * @throws SVNException   in the following cases:      *<ul>      *<li/>exception with {@link SVNErrorCode#CLIENT_BAD_REVISION} - If any revision in       *                        the list of provided ranges is {@link SVNRevision#isValid() invalid}      *</ul>      * @since                 1.2, SVN 1.5      */
specifier|public
name|void
name|doMerge
parameter_list|(
name|SVNURL
name|url1
parameter_list|,
name|SVNRevision
name|pegRevision
parameter_list|,
name|Collection
name|rangesToMerge
parameter_list|,
name|File
name|dstPath
parameter_list|,
name|SVNDepth
name|depth
parameter_list|,
name|boolean
name|useAncestry
parameter_list|,
name|boolean
name|force
parameter_list|,
name|boolean
name|dryRun
parameter_list|,
name|boolean
name|recordOnly
parameter_list|)
throws|throws
name|SVNException
block|{
if|if
condition|(
name|pegRevision
operator|==
literal|null
operator|||
operator|!
name|pegRevision
operator|.
name|isValid
argument_list|()
condition|)
block|{
name|pegRevision
operator|=
name|SVNRevision
operator|.
name|HEAD
expr_stmt|;
block|}
name|runPeggedMerge
argument_list|(
name|url1
argument_list|,
literal|null
argument_list|,
name|rangesToMerge
argument_list|,
name|pegRevision
argument_list|,
name|dstPath
argument_list|,
name|depth
argument_list|,
name|dryRun
argument_list|,
name|force
argument_list|,
operator|!
name|useAncestry
argument_list|,
name|recordOnly
argument_list|)
expr_stmt|;
block|}
comment|/**      * Applies the differences between two sources (the repository location of      * a source Working Copy path in a particular revision against the repository      * location of the same path in another particular revision) to a       * Working Copy path.      *       *<p>      * Corresponds to the SVN command line client's       *<code>'svn merge -r rev1:rev2 sourceWCPATH@pegRev WCPATH'</code> command.      *       *<p>      * If you need only to try merging your file(s) without actual merging, you      * should set<code>dryRun</code> to<span class="javakeyword">true</span>.      * Your event handler will be dispatched status type information on the target       * path(s). If a path can be successfully merged, the status type will be      * {@link SVNStatusType#MERGED} for that path.        *       * @param  path1          a source WC path      * @param  pegRevision    a revision in which the repository location of       *<code>path1</code> is first looked up      * @param  revision1      a left-hand revision of<code>path1</code>       * @param  revision2      a right-hand revision of<code>path1</code>      * @param  dstPath        the target path to which the result should      *                        be applied      * @param  recursive<span class="javakeyword">true</span> to descend       *                        recursively      * @param  useAncestry    if<span class="javakeyword">true</span> then      *                        the paths ancestry will be noticed while calculating differences,      *                        otherwise not      * @param  force<span class="javakeyword">true</span> to      *                        force the operation to run      * @param  dryRun         if<span class="javakeyword">true</span> then      *                        only tries the operation to run (to find out      *                        if a file can be merged successfully)      * @throws SVNException   if one of the following is true:      *<ul>      *<li>at least one of<code>revision1</code>,<code>revision2</code> and      *<code>pegRevision</code> is invalid      *<li><code>path1</code> has no URL      *<li>the repository location of<code>path1</code> was not found in       *<code>revision1</code>      *<li>the repository location of<code>path1</code> was not found in       *<code>revision2</code>      *<li><code>dstPath</code> is not under version control      *</ul>      * @deprecated            use {@link #doMerge(File, SVNRevision, Collection, File, SVNDepth, boolean, boolean, boolean, boolean)}      *                        instead      */
specifier|public
name|void
name|doMerge
parameter_list|(
name|File
name|path1
parameter_list|,
name|SVNRevision
name|pegRevision
parameter_list|,
name|SVNRevision
name|revision1
parameter_list|,
name|SVNRevision
name|revision2
parameter_list|,
name|File
name|dstPath
parameter_list|,
name|boolean
name|recursive
parameter_list|,
name|boolean
name|useAncestry
parameter_list|,
name|boolean
name|force
parameter_list|,
name|boolean
name|dryRun
parameter_list|)
throws|throws
name|SVNException
block|{
name|SVNRevisionRange
name|range
init|=
operator|new
name|SVNRevisionRange
argument_list|(
name|revision1
argument_list|,
name|revision2
argument_list|)
decl_stmt|;
name|List
name|rangesToMerge
init|=
operator|new
name|LinkedList
argument_list|()
decl_stmt|;
name|rangesToMerge
operator|.
name|add
argument_list|(
name|range
argument_list|)
expr_stmt|;
name|doMerge
argument_list|(
name|path1
argument_list|,
name|pegRevision
argument_list|,
name|rangesToMerge
argument_list|,
name|dstPath
argument_list|,
name|SVNDepth
operator|.
name|getInfinityOrFilesDepth
argument_list|(
name|recursive
argument_list|)
argument_list|,
name|useAncestry
argument_list|,
name|force
argument_list|,
name|dryRun
argument_list|,
literal|false
argument_list|)
expr_stmt|;
block|}
comment|/**      * Merges the changes between<code>path1</code> in peg revision<code>pegRevision</code>, as it changed       * between the ranges described in<code>rangesToMerge</code>.      *       *<p/>      *<code>rangesToMerge</code> is a collection of {@link SVNRevisionRange} ranges. These ranges may       * describe additive and/or subtractive merge ranges, they may overlap fully or partially, and/or they may       * partially or fully negate each other. This rangelist is not required to be sorted.        *       *<p/>      * All other options are handled identically to       * {@link #doMerge(File, SVNRevision, File, SVNRevision, File, SVNDepth, boolean, boolean, boolean, boolean)}.      *      *<p/>      * Note: this method requires repository access.      *       * @param  path1          working copy path      * @param  pegRevision    a revision in which<code>path1</code>       *                        is first looked up      * @param  rangesToMerge  collection of revision ranges to merge      * @param  dstPath        target working copy path      * @param  depth          tree depth to process      * @param  useAncestry    if<span class="javakeyword">true</span> then      *                        the paths ancestry will be noticed while calculating differences,      *                        otherwise not      * @param  force<span class="javakeyword">true</span> to      *                        force the operation to run      * @param  dryRun         if<span class="javakeyword">true</span> then      *                        only tries the operation to run (to find out      *                        if a file can be merged successfully)      * @param  recordOnly      * @throws SVNException   in the following cases:      *<ul>      *<li/>exception with {@link SVNErrorCode#CLIENT_BAD_REVISION} - If any revision in       *                        the list of provided ranges is {@link SVNRevision#isValid() invalid}      *</ul>      * @since                 1.2, SVN 1.5      */
specifier|public
name|void
name|doMerge
parameter_list|(
name|File
name|path1
parameter_list|,
name|SVNRevision
name|pegRevision
parameter_list|,
name|Collection
name|rangesToMerge
parameter_list|,
name|File
name|dstPath
parameter_list|,
name|SVNDepth
name|depth
parameter_list|,
name|boolean
name|useAncestry
parameter_list|,
name|boolean
name|force
parameter_list|,
name|boolean
name|dryRun
parameter_list|,
name|boolean
name|recordOnly
parameter_list|)
throws|throws
name|SVNException
block|{
comment|/*          * Equivalent of 3. merge -r N:M SOURCE[@REV] [WCPATH]          * where SOURCE is a wc path.          */
if|if
condition|(
name|pegRevision
operator|==
literal|null
operator|||
operator|!
name|pegRevision
operator|.
name|isValid
argument_list|()
condition|)
block|{
name|pegRevision
operator|=
name|SVNRevision
operator|.
name|WORKING
expr_stmt|;
block|}
name|runPeggedMerge
argument_list|(
literal|null
argument_list|,
name|path1
argument_list|,
name|rangesToMerge
argument_list|,
name|pegRevision
argument_list|,
name|dstPath
argument_list|,
name|depth
argument_list|,
name|dryRun
argument_list|,
name|force
argument_list|,
operator|!
name|useAncestry
argument_list|,
name|recordOnly
argument_list|)
expr_stmt|;
block|}
comment|/**      * Performs a reintegration merge of<code>srcPath</code> at<code>pegRevision</code> into       *<code>dstPath</code>.      *       *<p/>      *<code>dstPath</code> must be a single-revision, {@link SVNDepth#INFINITY}, pristine, unswitched working       * copy -- in other words, it must reflect a single revision tree, the "target". The mergeinfo on       *<code>srcPath</code> must reflect that all of the target has been merged into it.       *       *<p/>      * This kind of merge should be used for back merging (for example, merging branches back to trunk,       * in which case merge is carried out by comparing the latest trunk tree with the latest branch tree; i.e.       * the resulting difference is excatly the branch changes which will go back to trunk).      *       *<p/>      * All other options are handled identically to {@link #doMerge(File, SVNRevision, File, SVNRevision, File, SVNDepth, boolean, boolean, boolean, boolean)}.      * The depth of the merge is always {@link SVNDepth#INFINITY}.      *       *<p/>      * If<code>pegRevision</code> is<span class="javakeyword">null</span> or {@link SVNRevision#isValid() invalid},       * then it defaults to {@link SVNRevision#WORKING}.       *       *<p/>      * Note: this method requires repository access.      *       * @param  srcPath        working copy path       * @param  pegRevision    a revision in which<code>srcPath</code>       *                        is first looked up      * @param  dstPath        target working copy path      * @param  dryRun         if<span class="javakeyword">true</span> then      *                        only tries the operation to run (to find out      *                        if a file can be merged successfully)      * @throws SVNException       * @since                 1.2, SVN 1.5      */
specifier|public
name|void
name|doMergeReIntegrate
parameter_list|(
name|File
name|srcPath
parameter_list|,
name|SVNRevision
name|pegRevision
parameter_list|,
name|File
name|dstPath
parameter_list|,
name|boolean
name|dryRun
parameter_list|)
throws|throws
name|SVNException
block|{
if|if
condition|(
name|pegRevision
operator|==
literal|null
operator|||
operator|!
name|pegRevision
operator|.
name|isValid
argument_list|()
condition|)
block|{
name|pegRevision
operator|=
name|SVNRevision
operator|.
name|WORKING
expr_stmt|;
block|}
name|runMergeReintegrate
argument_list|(
literal|null
argument_list|,
name|srcPath
argument_list|,
name|pegRevision
argument_list|,
name|dstPath
argument_list|,
name|dryRun
argument_list|)
expr_stmt|;
block|}
comment|/**      * Performs a reintegration merge of<code>srcURL</code> at<code>pegRevision</code> into       *<code>dstPath</code>.      *       *<p/>      *<code>dstPath</code> must be a single-revision, {@link SVNDepth#INFINITY}, pristine, unswitched working       * copy -- in other words, it must reflect a single revision tree, the "target". The mergeinfo on       *<code>srcPath</code> must reflect that all of the target has been merged into it.       *       *<p/>      * This kind of merge should be used for back merging (for example, merging branches back to trunk,       * in which case merge is carried out by comparing the latest trunk tree with the latest branch tree; i.e.       * the resulting difference is excatly the branch changes which will go back to trunk).      *       *<p/>      * All other options are handled identically to {@link #doMerge(SVNURL, SVNRevision, SVNURL, SVNRevision, File, SVNDepth, boolean, boolean, boolean, boolean)}.      * The depth of the merge is always {@link SVNDepth#INFINITY}.      *       *<p/>      * If<code>pegRevision</code> is<span class="javakeyword">null</span> or {@link SVNRevision#isValid() invalid},       * then it defaults to {@link SVNRevision#HEAD}.       *       *<p/>      * Note: this method requires repository access.      *       * @param  srcURL         repository url       * @param  pegRevision    a revision in which<code>srcURL</code>       *                        is first looked up      * @param  dstPath        target working copy path      * @param  dryRun         if<span class="javakeyword">true</span> then      *                        only tries the operation to run (to find out      *                        if a file can be merged successfully)      * @throws SVNException       * @since                 1.2, SVN 1.5      */
specifier|public
name|void
name|doMergeReIntegrate
parameter_list|(
name|SVNURL
name|srcURL
parameter_list|,
name|SVNRevision
name|pegRevision
parameter_list|,
name|File
name|dstPath
parameter_list|,
name|boolean
name|dryRun
parameter_list|)
throws|throws
name|SVNException
block|{
if|if
condition|(
name|pegRevision
operator|==
literal|null
operator|||
operator|!
name|pegRevision
operator|.
name|isValid
argument_list|()
condition|)
block|{
name|pegRevision
operator|=
name|SVNRevision
operator|.
name|HEAD
expr_stmt|;
block|}
name|runMergeReintegrate
argument_list|(
name|srcURL
argument_list|,
literal|null
argument_list|,
name|pegRevision
argument_list|,
name|dstPath
argument_list|,
name|dryRun
argument_list|)
expr_stmt|;
block|}
comment|/**      * Drives a log entry<code>handler</code> with the revisions merged from<code>mergeSrcURL</code> (as of       *<code>srcPegRevision</code>) into<code>path</code> (as of<code>pegRevision</code>).      *       *<p/>      *<code>discoverChangedPaths</code> and<code>revisionProperties</code> are the same as for       * {@link SVNLogClient#doLog(File[], SVNRevision, SVNRevision, SVNRevision, boolean, boolean, boolean, long, String[], ISVNLogEntryHandler)}.       *       *<p/>      * Note: this routine requires repository access.      *       * @param  path                     working copy path (merge target)                          * @param  pegRevision              a revision in which<code>path</code> is first looked up      * @param  mergeSrcURL              merge source repository url      * @param  srcPegRevision           a revision in which<code>mergeSrcURL</code> is first looked up      * @param  discoverChangedPaths<span class="javakeyword">true</span> to report of all changed paths for       *                                  every revision being processed (those paths will be available by calling       *                                  {@link org.tmatesoft.svn.core.SVNLogEntry#getChangedPaths()})      * @param  revisionProperties       names of revision properties to retrieve           * @param  handler                  the caller's log entry handler      * @throws SVNException             in the following cases:       *<ul>      *<li/>exception with {@link SVNErrorCode#UNSUPPORTED_FEATURE} error code -       *                                  if the server doesn't support retrieval of mergeinfo      *</ul>       * @since                           1.2, SVN 1.5      */
specifier|public
name|void
name|doGetLogMergedMergeInfo
parameter_list|(
name|File
name|path
parameter_list|,
name|SVNRevision
name|pegRevision
parameter_list|,
name|SVNURL
name|mergeSrcURL
parameter_list|,
name|SVNRevision
name|srcPegRevision
parameter_list|,
name|boolean
name|discoverChangedPaths
parameter_list|,
name|String
index|[]
name|revisionProperties
parameter_list|,
name|ISVNLogEntryHandler
name|handler
parameter_list|)
throws|throws
name|SVNException
block|{
name|getLogMergedMergeInfoImpl
argument_list|(
name|path
argument_list|,
literal|null
argument_list|,
name|pegRevision
argument_list|,
name|mergeSrcURL
argument_list|,
literal|null
argument_list|,
name|srcPegRevision
argument_list|,
name|discoverChangedPaths
argument_list|,
name|revisionProperties
argument_list|,
name|handler
argument_list|)
expr_stmt|;
block|}
comment|/**      * Drives a log entry<code>handler</code> with the revisions merged from<code>mergeSrcURL</code> (as of       *<code>srcPegRevision</code>) into<code>url</code> (as of<code>pegRevision</code>).      *       *<p/>      *<code>discoverChangedPaths</code> and<code>revisionProperties</code> are the same as for       * {@link SVNLogClient#doLog(File[], SVNRevision, SVNRevision, SVNRevision, boolean, boolean, boolean, long, String[], ISVNLogEntryHandler)}.       *       *<p/>      * Note: this routine requires repository access.      *       * @param  url                      repository url (merge target)                          * @param  pegRevision              a revision in which<code>url</code> is first looked up      * @param  mergeSrcURL              merge source repository url      * @param  srcPegRevision           a revision in which<code>mergeSrcURL</code> is first looked up      * @param  discoverChangedPaths<span class="javakeyword">true</span> to report of all changed paths for       *                                  every revision being processed (those paths will be available by calling       *                                  {@link org.tmatesoft.svn.core.SVNLogEntry#getChangedPaths()})      * @param  revisionProperties       names of revision properties to retrieve           * @param  handler                  the caller's log entry handler      * @throws SVNException             in the following cases:       *<ul>      *<li/>exception with {@link SVNErrorCode#UNSUPPORTED_FEATURE} error code -       *                                  if the server doesn't support retrieval of mergeinfo      *</ul>       * @since                           1.2, SVN 1.5      */
specifier|public
name|void
name|doGetLogMergedMergeInfo
parameter_list|(
name|SVNURL
name|url
parameter_list|,
name|SVNRevision
name|pegRevision
parameter_list|,
name|SVNURL
name|mergeSrcURL
parameter_list|,
name|SVNRevision
name|srcPegRevision
parameter_list|,
name|boolean
name|discoverChangedPaths
parameter_list|,
name|String
index|[]
name|revisionProperties
parameter_list|,
name|ISVNLogEntryHandler
name|handler
parameter_list|)
throws|throws
name|SVNException
block|{
name|getLogMergedMergeInfoImpl
argument_list|(
literal|null
argument_list|,
name|url
argument_list|,
name|pegRevision
argument_list|,
name|mergeSrcURL
argument_list|,
literal|null
argument_list|,
name|srcPegRevision
argument_list|,
name|discoverChangedPaths
argument_list|,
name|revisionProperties
argument_list|,
name|handler
argument_list|)
expr_stmt|;
block|}
comment|/**      * Drives a log entry<code>handler</code> with the revisions merged from<code>mergeSrcPath</code> (as of       *<code>srcPegRevision</code>) into<code>path</code> (as of<code>pegRevision</code>).      *       *<p/>      *<code>discoverChangedPaths</code> and<code>revisionProperties</code> are the same as for       * {@link SVNLogClient#doLog(File[], SVNRevision, SVNRevision, SVNRevision, boolean, boolean, boolean, long, String[], ISVNLogEntryHandler)}.       *       *<p/>      * Note: this routine requires repository access.      *       * @param  path                     working copy path (merge target)                          * @param  pegRevision              a revision in which<code>path</code> is first looked up      * @param  mergeSrcPath             merge source working copy path      * @param  srcPegRevision           a revision in which<code>mergeSrcPath</code> is first looked up      * @param  discoverChangedPaths<span class="javakeyword">true</span> to report of all changed paths for       *                                  every revision being processed (those paths will be available by calling       *                                  {@link org.tmatesoft.svn.core.SVNLogEntry#getChangedPaths()})      * @param  revisionProperties       names of revision properties to retrieve           * @param  handler                  the caller's log entry handler      * @throws SVNException             in the following cases:       *<ul>      *<li/>exception with {@link SVNErrorCode#UNSUPPORTED_FEATURE} error code -       *                                  if the server doesn't support retrieval of mergeinfo      *</ul>       * @since                           1.2, SVN 1.5      */
specifier|public
name|void
name|doGetLogMergedMergeInfo
parameter_list|(
name|File
name|path
parameter_list|,
name|SVNRevision
name|pegRevision
parameter_list|,
name|File
name|mergeSrcPath
parameter_list|,
name|SVNRevision
name|srcPegRevision
parameter_list|,
name|boolean
name|discoverChangedPaths
parameter_list|,
name|String
index|[]
name|revisionProperties
parameter_list|,
name|ISVNLogEntryHandler
name|handler
parameter_list|)
throws|throws
name|SVNException
block|{
name|getLogMergedMergeInfoImpl
argument_list|(
name|path
argument_list|,
literal|null
argument_list|,
name|pegRevision
argument_list|,
literal|null
argument_list|,
name|mergeSrcPath
argument_list|,
name|srcPegRevision
argument_list|,
name|discoverChangedPaths
argument_list|,
name|revisionProperties
argument_list|,
name|handler
argument_list|)
expr_stmt|;
block|}
comment|/**      * Drives a log entry<code>handler</code> with the revisions merged from<code>mergeSrcPath</code> (as of       *<code>srcPegRevision</code>) into<code>url</code> (as of<code>pegRevision</code>).      *       *<p/>      *<code>discoverChangedPaths</code> and<code>revisionProperties</code> are the same as for       * {@link SVNLogClient#doLog(File[], SVNRevision, SVNRevision, SVNRevision, boolean, boolean, boolean, long, String[], ISVNLogEntryHandler)}.       *       *<p/>      * Note: this routine requires repository access.      *       * @param  url                      repository url (merge target)                          * @param  pegRevision              a revision in which<code>url</code> is first looked up      * @param  mergeSrcPath             merge source working copy path      * @param  srcPegRevision           a revision in which<code>mergeSrcPath</code> is first looked up      * @param  discoverChangedPaths<span class="javakeyword">true</span> to report of all changed paths for       *                                  every revision being processed (those paths will be available by calling       *                                  {@link org.tmatesoft.svn.core.SVNLogEntry#getChangedPaths()})      * @param  revisionProperties       names of revision properties to retrieve           * @param  handler                  the caller's log entry handler      * @throws SVNException             in the following cases:       *<ul>      *<li/>exception with {@link SVNErrorCode#UNSUPPORTED_FEATURE} error code -       *                                  if the server doesn't support retrieval of mergeinfo      *</ul>       * @since                           1.2, SVN 1.5      */
specifier|public
name|void
name|doGetLogMergedMergeInfo
parameter_list|(
name|SVNURL
name|url
parameter_list|,
name|SVNRevision
name|pegRevision
parameter_list|,
name|File
name|mergeSrcPath
parameter_list|,
name|SVNRevision
name|srcPegRevision
parameter_list|,
name|boolean
name|discoverChangedPaths
parameter_list|,
name|String
index|[]
name|revisionProperties
parameter_list|,
name|ISVNLogEntryHandler
name|handler
parameter_list|)
throws|throws
name|SVNException
block|{
name|getLogMergedMergeInfoImpl
argument_list|(
literal|null
argument_list|,
name|url
argument_list|,
name|pegRevision
argument_list|,
literal|null
argument_list|,
name|mergeSrcPath
argument_list|,
name|srcPegRevision
argument_list|,
name|discoverChangedPaths
argument_list|,
name|revisionProperties
argument_list|,
name|handler
argument_list|)
expr_stmt|;
block|}
comment|/**      * Drives a log entry<code>handler</code> with the revisions eligible for merge from       *<code>mergeSrcURL</code> (as of<code>srcPegRevision</code>) into<code>path</code> (as of       *<code>pegRevision</code>).      *       *<p/>      *<code>discoverChangedPaths</code> and<code>revisionProperties</code> are the same as for       * {@link SVNLogClient#doLog(File[], SVNRevision, SVNRevision, SVNRevision, boolean, boolean, boolean, long, String[], ISVNLogEntryHandler)}.       *      *<p/>      * Note: this routine requires repository access.      *       * @param  path                     working copy path (merge target)                          * @param  pegRevision              a revision in which<code>path</code> is first looked up      * @param  mergeSrcURL              merge source repository url      * @param  srcPegRevision           a revision in which<code>mergeSrcURL</code> is first looked up      * @param  discoverChangedPaths<span class="javakeyword">true</span> to report of all changed paths for       *                                  every revision being processed (those paths will be available by calling       *                                  {@link org.tmatesoft.svn.core.SVNLogEntry#getChangedPaths()})      * @param  revisionProperties       names of revision properties to retrieve           * @param  handler                  the caller's log entry handler      * @throws SVNException             in the following cases:       *<ul>      *<li/>exception with {@link SVNErrorCode#UNSUPPORTED_FEATURE} error code -       *                                  if the server doesn't support retrieval of mergeinfo      *</ul>       * @since                           1.2, SVN 1.5      */
specifier|public
name|void
name|doGetLogEligibleMergeInfo
parameter_list|(
name|File
name|path
parameter_list|,
name|SVNRevision
name|pegRevision
parameter_list|,
name|SVNURL
name|mergeSrcURL
parameter_list|,
name|SVNRevision
name|srcPegRevision
parameter_list|,
name|boolean
name|discoverChangedPaths
parameter_list|,
name|String
index|[]
name|revisionProperties
parameter_list|,
name|ISVNLogEntryHandler
name|handler
parameter_list|)
throws|throws
name|SVNException
block|{
name|getLogEligibleMergeInfoImpl
argument_list|(
name|path
argument_list|,
literal|null
argument_list|,
name|pegRevision
argument_list|,
name|mergeSrcURL
argument_list|,
literal|null
argument_list|,
name|srcPegRevision
argument_list|,
name|discoverChangedPaths
argument_list|,
name|revisionProperties
argument_list|,
name|handler
argument_list|)
expr_stmt|;
block|}
comment|/**      * Drives a log entry<code>handler</code> with the revisions eligible for merge from       *<code>mergeSrcURL</code> (as of<code>srcPegRevision</code>) into<code>url</code> (as of       *<code>pegRevision</code>).      *       *<p/>      *<code>discoverChangedPaths</code> and<code>revisionProperties</code> are the same as for       * {@link SVNLogClient#doLog(File[], SVNRevision, SVNRevision, SVNRevision, boolean, boolean, boolean, long, String[], ISVNLogEntryHandler)}.       *      *<p/>      * Note: this routine requires repository access.      *       * @param  url                      repository url (merge target)                          * @param  pegRevision              a revision in which<code>url</code> is first looked up      * @param  mergeSrcURL              merge source repository url      * @param  srcPegRevision           a revision in which<code>mergeSrcURL</code> is first looked up      * @param  discoverChangedPaths<span class="javakeyword">true</span> to report of all changed paths for       *                                  every revision being processed (those paths will be available by calling       *                                  {@link org.tmatesoft.svn.core.SVNLogEntry#getChangedPaths()})      * @param  revisionProperties       names of revision properties to retrieve           * @param  handler                  the caller's log entry handler      * @throws SVNException             in the following cases:       *<ul>      *<li/>exception with {@link SVNErrorCode#UNSUPPORTED_FEATURE} error code -       *                                  if the server doesn't support retrieval of mergeinfo      *</ul>       * @since                           1.2, SVN 1.5      */
specifier|public
name|void
name|doGetLogEligibleMergeInfo
parameter_list|(
name|SVNURL
name|url
parameter_list|,
name|SVNRevision
name|pegRevision
parameter_list|,
name|SVNURL
name|mergeSrcURL
parameter_list|,
name|SVNRevision
name|srcPegRevision
parameter_list|,
name|boolean
name|discoverChangedPaths
parameter_list|,
name|String
index|[]
name|revisionProperties
parameter_list|,
name|ISVNLogEntryHandler
name|handler
parameter_list|)
throws|throws
name|SVNException
block|{
name|getLogEligibleMergeInfoImpl
argument_list|(
literal|null
argument_list|,
name|url
argument_list|,
name|pegRevision
argument_list|,
name|mergeSrcURL
argument_list|,
literal|null
argument_list|,
name|srcPegRevision
argument_list|,
name|discoverChangedPaths
argument_list|,
name|revisionProperties
argument_list|,
name|handler
argument_list|)
expr_stmt|;
block|}
comment|/**      * Drives a log entry<code>handler</code> with the revisions eligible for merge from       *<code>mergeSrcPath</code> (as of<code>srcPegRevision</code>) into<code>path</code> (as of       *<code>pegRevision</code>).      *       *<p/>      *<code>discoverChangedPaths</code> and<code>revisionProperties</code> are the same as for       * {@link SVNLogClient#doLog(File[], SVNRevision, SVNRevision, SVNRevision, boolean, boolean, boolean, long, String[], ISVNLogEntryHandler)}.       *      *<p/>      * Note: this routine requires repository access.      *       * @param  path                     working copy path (merge target)                          * @param  pegRevision              a revision in which<code>path</code> is first looked up      * @param  mergeSrcPath             merge source working copy path      * @param  srcPegRevision           a revision in which<code>mergeSrcPath</code> is first looked up      * @param  discoverChangedPaths<span class="javakeyword">true</span> to report of all changed paths for       *                                  every revision being processed (those paths will be available by calling       *                                  {@link org.tmatesoft.svn.core.SVNLogEntry#getChangedPaths()})      * @param  revisionProperties       names of revision properties to retrieve           * @param  handler                  the caller's log entry handler      * @throws SVNException             in the following cases:       *<ul>      *<li/>exception with {@link SVNErrorCode#UNSUPPORTED_FEATURE} error code -       *                                  if the server doesn't support retrieval of mergeinfo      *</ul>       * @since                           1.2, SVN 1.5      */
specifier|public
name|void
name|doGetLogEligibleMergeInfo
parameter_list|(
name|File
name|path
parameter_list|,
name|SVNRevision
name|pegRevision
parameter_list|,
name|File
name|mergeSrcPath
parameter_list|,
name|SVNRevision
name|srcPegRevision
parameter_list|,
name|boolean
name|discoverChangedPaths
parameter_list|,
name|String
index|[]
name|revisionProperties
parameter_list|,
name|ISVNLogEntryHandler
name|handler
parameter_list|)
throws|throws
name|SVNException
block|{
name|getLogEligibleMergeInfoImpl
argument_list|(
name|path
argument_list|,
literal|null
argument_list|,
name|pegRevision
argument_list|,
literal|null
argument_list|,
name|mergeSrcPath
argument_list|,
name|srcPegRevision
argument_list|,
name|discoverChangedPaths
argument_list|,
name|revisionProperties
argument_list|,
name|handler
argument_list|)
expr_stmt|;
block|}
comment|/**      * Drives a log entry<code>handler</code> with the revisions eligible for merge from       *<code>mergeSrcPath</code> (as of<code>srcPegRevision</code>) into<code>url</code> (as of       *<code>pegRevision</code>).      *       *<p/>      *<code>discoverChangedPaths</code> and<code>revisionProperties</code> are the same as for       * {@link SVNLogClient#doLog(File[], SVNRevision, SVNRevision, SVNRevision, boolean, boolean, boolean, long, String[], ISVNLogEntryHandler)}.       *      *<p/>      * Note: this routine requires repository access.      *       * @param  url                      repository url (merge target)                          * @param  pegRevision              a revision in which<code>url</code> is first looked up      * @param  mergeSrcPath             merge source working copy path      * @param  srcPegRevision           a revision in which<code>mergeSrcPath</code> is first looked up      * @param  discoverChangedPaths<span class="javakeyword">true</span> to report of all changed paths for       *                                  every revision being processed (those paths will be available by calling       *                                  {@link org.tmatesoft.svn.core.SVNLogEntry#getChangedPaths()})      * @param  revisionProperties       names of revision properties to retrieve           * @param  handler                  the caller's log entry handler      * @throws SVNException             in the following cases:       *<ul>      *<li/>exception with {@link SVNErrorCode#UNSUPPORTED_FEATURE} error code -       *                                  if the server doesn't support retrieval of mergeinfo      *</ul>       * @since                           1.2, SVN 1.5      */
specifier|public
name|void
name|doGetLogEligibleMergeInfo
parameter_list|(
name|SVNURL
name|url
parameter_list|,
name|SVNRevision
name|pegRevision
parameter_list|,
name|File
name|mergeSrcPath
parameter_list|,
name|SVNRevision
name|srcPegRevision
parameter_list|,
name|boolean
name|discoverChangedPaths
parameter_list|,
name|String
index|[]
name|revisionProperties
parameter_list|,
name|ISVNLogEntryHandler
name|handler
parameter_list|)
throws|throws
name|SVNException
block|{
name|getLogEligibleMergeInfoImpl
argument_list|(
literal|null
argument_list|,
name|url
argument_list|,
name|pegRevision
argument_list|,
literal|null
argument_list|,
name|mergeSrcPath
argument_list|,
name|srcPegRevision
argument_list|,
name|discoverChangedPaths
argument_list|,
name|revisionProperties
argument_list|,
name|handler
argument_list|)
expr_stmt|;
block|}
comment|/**      * Returns mergeinfo as a<code>Map</code> with merge source URLs (as {@link SVNURL}) mapped to       * range lists ({@link SVNMergeRangeList}). Range lists are objects containing arrays of       * {@link SVNMergeRange ranges} describing the ranges which have been merged into<code>path</code> as       * of<code>pegRevision</code>. If there is no mergeinfo, returns<span class="javakeyword">null</span>.       *       *<p/>      * Note: unlike most APIs which deal with mergeinfo, this one returns data where the keys of the map are       * absolute repository URLs rather than repository filesystem paths.      *      *<p/>      * Note: this routine requires repository access.      *       * @param  path           working copy path       * @param  pegRevision    a revision in which<code>path</code> is first looked up      * @return                mergeinfo for<code>path</code>      * @throws SVNException   in the following cases:      *<ul>      *<li/>exception with {@link SVNErrorCode#UNSUPPORTED_FEATURE} error code -       *                        if the server doesn't support retrieval of mergeinfo (which will never happen       *                        for file:// URLs)                              *</ul>                  * @since                 1.2, SVN 1.5      */
specifier|public
name|Map
name|doGetMergedMergeInfo
parameter_list|(
name|File
name|path
parameter_list|,
name|SVNRevision
name|pegRevision
parameter_list|)
throws|throws
name|SVNException
block|{
name|SVNURL
name|reposRoot
index|[]
init|=
operator|new
name|SVNURL
index|[
literal|1
index|]
decl_stmt|;
name|Map
name|mergeInfo
init|=
name|getMergeInfo
argument_list|(
name|path
argument_list|,
name|pegRevision
argument_list|,
name|reposRoot
argument_list|)
decl_stmt|;
name|SVNURL
name|repositoryRoot
init|=
name|reposRoot
index|[
literal|0
index|]
decl_stmt|;
if|if
condition|(
name|mergeInfo
operator|!=
literal|null
condition|)
block|{
name|Map
name|fullPathMergeInfo
init|=
operator|new
name|SVNHashMap
argument_list|()
decl_stmt|;
for|for
control|(
name|Iterator
name|paths
init|=
name|mergeInfo
operator|.
name|keySet
argument_list|()
operator|.
name|iterator
argument_list|()
init|;
name|paths
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|String
name|mergeSrcPath
init|=
operator|(
name|String
operator|)
name|paths
operator|.
name|next
argument_list|()
decl_stmt|;
name|SVNMergeRangeList
name|rangeList
init|=
operator|(
name|SVNMergeRangeList
operator|)
name|mergeInfo
operator|.
name|get
argument_list|(
name|mergeSrcPath
argument_list|)
decl_stmt|;
if|if
condition|(
name|mergeSrcPath
operator|.
name|startsWith
argument_list|(
literal|"/"
argument_list|)
condition|)
block|{
name|mergeSrcPath
operator|=
name|mergeSrcPath
operator|.
name|substring
argument_list|(
literal|1
argument_list|)
expr_stmt|;
block|}
name|SVNURL
name|url
init|=
name|repositoryRoot
operator|.
name|appendPath
argument_list|(
name|mergeSrcPath
argument_list|,
literal|false
argument_list|)
decl_stmt|;
name|fullPathMergeInfo
operator|.
name|put
argument_list|(
name|url
argument_list|,
name|rangeList
argument_list|)
expr_stmt|;
block|}
name|mergeInfo
operator|=
name|fullPathMergeInfo
expr_stmt|;
block|}
return|return
name|mergeInfo
return|;
block|}
comment|/**      * Returns mergeinfo as a<code>Map</code> with merge source URLs (as {@link SVNURL}) mapped to       * range lists ({@link SVNMergeRangeList}). Range lists are objects containing arrays of       * {@link SVNMergeRange ranges} describing the ranges which have been merged into<code>url</code> as       * of<code>pegRevision</code>. If there is no mergeinfo, returns<span class="javakeyword">null</span>.       *       *<p/>      * Note: unlike most APIs which deal with mergeinfo, this one returns data where the keys of the map are       * absolute repository URLs rather than repository filesystem paths.      *      *<p/>      * Note: this routine requires repository access.      *       * @param  url            repository url       * @param  pegRevision    a revision in which<code>url</code> is first looked up      * @return                mergeinfo for<code>url</code>      * @throws SVNException   in the following cases:      *<ul>      *<li/>exception with {@link SVNErrorCode#UNSUPPORTED_FEATURE} error code -       *                        if the server doesn't support retrieval of mergeinfo (which will never happen       *                        for file:// URLs)                              *</ul>                  * @since                 1.2, SVN 1.5      */
specifier|public
name|Map
name|doGetMergedMergeInfo
parameter_list|(
name|SVNURL
name|url
parameter_list|,
name|SVNRevision
name|pegRevision
parameter_list|)
throws|throws
name|SVNException
block|{
name|SVNURL
name|reposRoot
index|[]
init|=
operator|new
name|SVNURL
index|[
literal|1
index|]
decl_stmt|;
name|Map
name|mergeInfo
init|=
name|getMergeInfo
argument_list|(
name|url
argument_list|,
name|pegRevision
argument_list|,
name|reposRoot
argument_list|)
decl_stmt|;
name|SVNURL
name|repositoryRoot
init|=
name|reposRoot
index|[
literal|0
index|]
decl_stmt|;
if|if
condition|(
name|mergeInfo
operator|!=
literal|null
condition|)
block|{
name|Map
name|fullPathMergeInfo
init|=
operator|new
name|SVNHashMap
argument_list|()
decl_stmt|;
for|for
control|(
name|Iterator
name|paths
init|=
name|mergeInfo
operator|.
name|keySet
argument_list|()
operator|.
name|iterator
argument_list|()
init|;
name|paths
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|String
name|mergeSrcPath
init|=
operator|(
name|String
operator|)
name|paths
operator|.
name|next
argument_list|()
decl_stmt|;
name|SVNMergeRangeList
name|rangeList
init|=
operator|(
name|SVNMergeRangeList
operator|)
name|mergeInfo
operator|.
name|get
argument_list|(
name|mergeSrcPath
argument_list|)
decl_stmt|;
if|if
condition|(
name|mergeSrcPath
operator|.
name|startsWith
argument_list|(
literal|"/"
argument_list|)
condition|)
block|{
name|mergeSrcPath
operator|=
name|mergeSrcPath
operator|.
name|substring
argument_list|(
literal|1
argument_list|)
expr_stmt|;
block|}
name|SVNURL
name|nextURL
init|=
name|repositoryRoot
operator|.
name|appendPath
argument_list|(
name|mergeSrcPath
argument_list|,
literal|false
argument_list|)
decl_stmt|;
name|fullPathMergeInfo
operator|.
name|put
argument_list|(
name|nextURL
argument_list|,
name|rangeList
argument_list|)
expr_stmt|;
block|}
name|mergeInfo
operator|=
name|fullPathMergeInfo
expr_stmt|;
block|}
return|return
name|mergeInfo
return|;
block|}
comment|/**       * Returns a collection of potential merge sources (expressed as full repository {@link SVNURL URLs}) for       *<code>path</code> at<code>pegRevision</code>.       *      * @param  path          working copy path       * @param  pegRevision   a revision in which<code>path</code> is first looked up      * @throws SVNException       * @return               potential merge sources for<code>path</code>       * @since                1.2, SVN 1.5      */
specifier|public
name|Collection
name|doSuggestMergeSources
parameter_list|(
name|File
name|path
parameter_list|,
name|SVNRevision
name|pegRevision
parameter_list|)
throws|throws
name|SVNException
block|{
name|LinkedList
name|suggestions
init|=
operator|new
name|LinkedList
argument_list|()
decl_stmt|;
name|SVNURL
name|reposRoot
init|=
name|getReposRoot
argument_list|(
name|path
argument_list|,
literal|null
argument_list|,
name|pegRevision
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|)
decl_stmt|;
name|SVNLocationEntry
name|copyFromInfo
init|=
name|getCopySource
argument_list|(
name|path
argument_list|,
literal|null
argument_list|,
name|pegRevision
argument_list|)
decl_stmt|;
name|String
name|copyFromPath
init|=
name|copyFromInfo
operator|.
name|getPath
argument_list|()
decl_stmt|;
name|SVNURL
name|copyFromURL
init|=
literal|null
decl_stmt|;
if|if
condition|(
name|copyFromPath
operator|!=
literal|null
condition|)
block|{
name|String
name|relCopyFromPath
init|=
name|copyFromPath
operator|.
name|startsWith
argument_list|(
literal|"/"
argument_list|)
condition|?
name|copyFromPath
operator|.
name|substring
argument_list|(
literal|1
argument_list|)
else|:
name|copyFromPath
decl_stmt|;
name|copyFromURL
operator|=
name|reposRoot
operator|.
name|appendPath
argument_list|(
name|relCopyFromPath
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|suggestions
operator|.
name|add
argument_list|(
name|copyFromURL
argument_list|)
expr_stmt|;
block|}
name|Map
name|mergeInfo
init|=
name|doGetMergedMergeInfo
argument_list|(
name|path
argument_list|,
name|pegRevision
argument_list|)
decl_stmt|;
if|if
condition|(
name|mergeInfo
operator|!=
literal|null
condition|)
block|{
for|for
control|(
name|Iterator
name|mergeSrcURLs
init|=
name|mergeInfo
operator|.
name|keySet
argument_list|()
operator|.
name|iterator
argument_list|()
init|;
name|mergeSrcURLs
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|SVNURL
name|mergeSrcURL
init|=
operator|(
name|SVNURL
operator|)
name|mergeSrcURLs
operator|.
name|next
argument_list|()
decl_stmt|;
if|if
condition|(
name|copyFromURL
operator|==
literal|null
operator|||
operator|!
name|copyFromURL
operator|.
name|equals
argument_list|(
name|mergeSrcURL
argument_list|)
condition|)
block|{
name|suggestions
operator|.
name|add
argument_list|(
name|mergeSrcURL
argument_list|)
expr_stmt|;
block|}
block|}
block|}
return|return
name|suggestions
return|;
block|}
comment|/**       * Returns a collection of potential merge sources (expressed as full repository {@link SVNURL URLs}) for       *<code>url</code> at<code>pegRevision</code>.       *      * @param  url           repository url       * @param  pegRevision   a revision in which<code>url</code> is first looked up      * @throws SVNException       * @return               potential merge sources for<code>url</code>       * @since                1.2, SVN 1.5      */
specifier|public
name|Collection
name|doSuggestMergeSources
parameter_list|(
name|SVNURL
name|url
parameter_list|,
name|SVNRevision
name|pegRevision
parameter_list|)
throws|throws
name|SVNException
block|{
name|LinkedList
name|suggestions
init|=
operator|new
name|LinkedList
argument_list|()
decl_stmt|;
name|SVNURL
name|reposRoot
init|=
name|getReposRoot
argument_list|(
literal|null
argument_list|,
name|url
argument_list|,
name|pegRevision
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|)
decl_stmt|;
name|SVNLocationEntry
name|copyFromInfo
init|=
name|getCopySource
argument_list|(
literal|null
argument_list|,
name|url
argument_list|,
name|pegRevision
argument_list|)
decl_stmt|;
name|String
name|copyFromPath
init|=
name|copyFromInfo
operator|.
name|getPath
argument_list|()
decl_stmt|;
name|SVNURL
name|copyFromURL
init|=
literal|null
decl_stmt|;
if|if
condition|(
name|copyFromPath
operator|!=
literal|null
condition|)
block|{
name|String
name|relCopyFromPath
init|=
name|copyFromPath
operator|.
name|startsWith
argument_list|(
literal|"/"
argument_list|)
condition|?
name|copyFromPath
operator|.
name|substring
argument_list|(
literal|1
argument_list|)
else|:
name|copyFromPath
decl_stmt|;
name|copyFromURL
operator|=
name|reposRoot
operator|.
name|appendPath
argument_list|(
name|relCopyFromPath
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|suggestions
operator|.
name|add
argument_list|(
name|copyFromURL
argument_list|)
expr_stmt|;
block|}
name|Map
name|mergeInfo
init|=
name|doGetMergedMergeInfo
argument_list|(
name|url
argument_list|,
name|pegRevision
argument_list|)
decl_stmt|;
if|if
condition|(
name|mergeInfo
operator|!=
literal|null
condition|)
block|{
for|for
control|(
name|Iterator
name|mergeSrcURLs
init|=
name|mergeInfo
operator|.
name|keySet
argument_list|()
operator|.
name|iterator
argument_list|()
init|;
name|mergeSrcURLs
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|SVNURL
name|mergeSrcURL
init|=
operator|(
name|SVNURL
operator|)
name|mergeSrcURLs
operator|.
name|next
argument_list|()
decl_stmt|;
if|if
condition|(
name|copyFromURL
operator|==
literal|null
operator|||
operator|!
name|copyFromURL
operator|.
name|equals
argument_list|(
name|mergeSrcURL
argument_list|)
condition|)
block|{
name|suggestions
operator|.
name|add
argument_list|(
name|mergeSrcURL
argument_list|)
expr_stmt|;
block|}
block|}
block|}
return|return
name|suggestions
return|;
block|}
specifier|private
name|void
name|doDiffURLWC
parameter_list|(
name|SVNURL
name|url1
parameter_list|,
name|SVNRevision
name|revision1
parameter_list|,
name|SVNRevision
name|pegRevision
parameter_list|,
name|File
name|path2
parameter_list|,
name|SVNRevision
name|revision2
parameter_list|,
name|boolean
name|reverse
parameter_list|,
name|SVNDepth
name|depth
parameter_list|,
name|boolean
name|useAncestry
parameter_list|,
name|OutputStream
name|result
parameter_list|,
name|Collection
name|changeLists
parameter_list|)
throws|throws
name|SVNException
block|{
name|SVNWCAccess
name|wcAccess
init|=
name|createWCAccess
argument_list|()
decl_stmt|;
try|try
block|{
name|SVNAdminAreaInfo
name|info
init|=
name|wcAccess
operator|.
name|openAnchor
argument_list|(
name|path2
argument_list|,
literal|false
argument_list|,
name|SVNDepth
operator|.
name|recurseFromDepth
argument_list|(
name|depth
argument_list|)
condition|?
name|SVNWCAccess
operator|.
name|INFINITE_DEPTH
else|:
literal|0
argument_list|)
decl_stmt|;
name|File
name|anchorPath
init|=
name|info
operator|.
name|getAnchor
argument_list|()
operator|.
name|getRoot
argument_list|()
decl_stmt|;
name|String
name|target
init|=
literal|""
operator|.
name|equals
argument_list|(
name|info
operator|.
name|getTargetName
argument_list|()
argument_list|)
condition|?
literal|null
else|:
name|info
operator|.
name|getTargetName
argument_list|()
decl_stmt|;
name|SVNEntry
name|anchorEntry
init|=
name|info
operator|.
name|getAnchor
argument_list|()
operator|.
name|getVersionedEntry
argument_list|(
literal|""
argument_list|,
literal|false
argument_list|)
decl_stmt|;
if|if
condition|(
name|anchorEntry
operator|.
name|getURL
argument_list|()
operator|==
literal|null
condition|)
block|{
name|SVNErrorMessage
name|err
init|=
name|SVNErrorMessage
operator|.
name|create
argument_list|(
name|SVNErrorCode
operator|.
name|ENTRY_MISSING_URL
argument_list|,
literal|"''{0}'' has no URL"
argument_list|,
name|anchorPath
argument_list|)
decl_stmt|;
name|SVNErrorManager
operator|.
name|error
argument_list|(
name|err
argument_list|,
name|SVNLogType
operator|.
name|WC
argument_list|)
expr_stmt|;
block|}
name|SVNURL
name|anchorURL
init|=
name|anchorEntry
operator|.
name|getSVNURL
argument_list|()
decl_stmt|;
if|if
condition|(
name|pegRevision
operator|.
name|isValid
argument_list|()
condition|)
block|{
name|SVNRepositoryLocation
index|[]
name|locations
init|=
name|getLocations
argument_list|(
name|url1
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|,
name|pegRevision
argument_list|,
name|revision1
argument_list|,
name|SVNRevision
operator|.
name|UNDEFINED
argument_list|)
decl_stmt|;
name|url1
operator|=
name|locations
index|[
literal|0
index|]
operator|.
name|getURL
argument_list|()
expr_stmt|;
name|String
name|anchorPath2
init|=
name|SVNPathUtil
operator|.
name|append
argument_list|(
name|anchorURL
operator|.
name|toString
argument_list|()
argument_list|,
name|target
operator|==
literal|null
condition|?
literal|""
else|:
name|target
argument_list|)
decl_stmt|;
name|getDiffGenerator
argument_list|()
operator|.
name|init
argument_list|(
name|url1
operator|.
name|toString
argument_list|()
argument_list|,
name|anchorPath2
argument_list|)
expr_stmt|;
block|}
name|SVNRepository
name|repository
init|=
name|createRepository
argument_list|(
name|anchorURL
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|,
literal|true
argument_list|)
decl_stmt|;
name|long
name|revNumber
init|=
name|getRevisionNumber
argument_list|(
name|revision1
argument_list|,
name|repository
argument_list|,
literal|null
argument_list|)
decl_stmt|;
name|AbstractDiffCallback
name|callback
init|=
operator|new
name|SVNDiffCallback
argument_list|(
name|info
operator|.
name|getAnchor
argument_list|()
argument_list|,
name|getDiffGenerator
argument_list|()
argument_list|,
name|reverse
condition|?
operator|-
literal|1
else|:
name|revNumber
argument_list|,
name|reverse
condition|?
name|revNumber
else|:
operator|-
literal|1
argument_list|,
name|result
argument_list|)
decl_stmt|;
name|SVNDiffEditor
name|editor
init|=
operator|new
name|SVNDiffEditor
argument_list|(
name|wcAccess
argument_list|,
name|info
argument_list|,
name|callback
argument_list|,
name|useAncestry
argument_list|,
name|reverse
comment|/* reverse */
argument_list|,
name|revision2
operator|==
name|SVNRevision
operator|.
name|BASE
operator|||
name|revision2
operator|==
name|SVNRevision
operator|.
name|COMMITTED
comment|/* compare to base */
argument_list|,
name|depth
argument_list|,
name|changeLists
argument_list|)
decl_stmt|;
name|boolean
name|serverSupportsDepth
init|=
name|repository
operator|.
name|hasCapability
argument_list|(
name|SVNCapability
operator|.
name|DEPTH
argument_list|)
decl_stmt|;
name|SVNReporter
name|reporter
init|=
operator|new
name|SVNReporter
argument_list|(
name|info
argument_list|,
name|info
operator|.
name|getAnchor
argument_list|()
operator|.
name|getFile
argument_list|(
name|info
operator|.
name|getTargetName
argument_list|()
argument_list|)
argument_list|,
literal|false
argument_list|,
operator|!
name|serverSupportsDepth
argument_list|,
name|depth
argument_list|,
literal|false
argument_list|,
literal|false
argument_list|,
literal|true
argument_list|,
name|getDebugLog
argument_list|()
argument_list|)
decl_stmt|;
name|long
name|pegRevisionNumber
init|=
name|getRevisionNumber
argument_list|(
name|revision2
argument_list|,
name|repository
argument_list|,
name|path2
argument_list|)
decl_stmt|;
try|try
block|{
name|repository
operator|.
name|diff
argument_list|(
name|url1
argument_list|,
name|revNumber
argument_list|,
name|pegRevisionNumber
argument_list|,
name|target
argument_list|,
operator|!
name|useAncestry
argument_list|,
name|depth
argument_list|,
literal|true
argument_list|,
name|reporter
argument_list|,
name|SVNCancellableEditor
operator|.
name|newInstance
argument_list|(
name|editor
argument_list|,
name|this
argument_list|,
name|getDebugLog
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
name|editor
operator|.
name|cleanup
argument_list|()
expr_stmt|;
block|}
block|}
finally|finally
block|{
name|wcAccess
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
block|}
specifier|private
name|void
name|doDiffURLWC
parameter_list|(
name|File
name|path1
parameter_list|,
name|SVNRevision
name|revision1
parameter_list|,
name|SVNRevision
name|pegRevision
parameter_list|,
name|File
name|path2
parameter_list|,
name|SVNRevision
name|revision2
parameter_list|,
name|boolean
name|reverse
parameter_list|,
name|SVNDepth
name|depth
parameter_list|,
name|boolean
name|useAncestry
parameter_list|,
name|OutputStream
name|result
parameter_list|,
name|Collection
name|changeLists
parameter_list|)
throws|throws
name|SVNException
block|{
name|SVNWCAccess
name|wcAccess
init|=
name|createWCAccess
argument_list|()
decl_stmt|;
try|try
block|{
name|int
name|admDepth
init|=
name|getAdminDepth
argument_list|(
name|depth
argument_list|)
decl_stmt|;
name|SVNAdminAreaInfo
name|info
init|=
name|wcAccess
operator|.
name|openAnchor
argument_list|(
name|path2
argument_list|,
literal|false
argument_list|,
name|admDepth
argument_list|)
decl_stmt|;
name|File
name|anchorPath
init|=
name|info
operator|.
name|getAnchor
argument_list|()
operator|.
name|getRoot
argument_list|()
decl_stmt|;
name|String
name|target
init|=
literal|""
operator|.
name|equals
argument_list|(
name|info
operator|.
name|getTargetName
argument_list|()
argument_list|)
condition|?
literal|null
else|:
name|info
operator|.
name|getTargetName
argument_list|()
decl_stmt|;
name|SVNEntry
name|anchorEntry
init|=
name|info
operator|.
name|getAnchor
argument_list|()
operator|.
name|getVersionedEntry
argument_list|(
literal|""
argument_list|,
literal|false
argument_list|)
decl_stmt|;
if|if
condition|(
name|anchorEntry
operator|.
name|getURL
argument_list|()
operator|==
literal|null
condition|)
block|{
name|SVNErrorMessage
name|err
init|=
name|SVNErrorMessage
operator|.
name|create
argument_list|(
name|SVNErrorCode
operator|.
name|ENTRY_MISSING_URL
argument_list|,
literal|"''{0}'' has no URL"
argument_list|,
name|anchorPath
argument_list|)
decl_stmt|;
name|SVNErrorManager
operator|.
name|error
argument_list|(
name|err
argument_list|,
name|SVNLogType
operator|.
name|WC
argument_list|)
expr_stmt|;
block|}
name|SVNURL
name|url1
decl_stmt|;
name|SVNURL
name|anchorURL
init|=
name|anchorEntry
operator|.
name|getSVNURL
argument_list|()
decl_stmt|;
if|if
condition|(
name|pegRevision
operator|.
name|isValid
argument_list|()
condition|)
block|{
name|SVNRepositoryLocation
index|[]
name|locations
init|=
name|getLocations
argument_list|(
literal|null
argument_list|,
name|path1
argument_list|,
literal|null
argument_list|,
name|pegRevision
argument_list|,
name|revision1
argument_list|,
name|SVNRevision
operator|.
name|UNDEFINED
argument_list|)
decl_stmt|;
name|url1
operator|=
name|locations
index|[
literal|0
index|]
operator|.
name|getURL
argument_list|()
expr_stmt|;
name|String
name|anchorPath2
init|=
name|SVNPathUtil
operator|.
name|append
argument_list|(
name|anchorURL
operator|.
name|toString
argument_list|()
argument_list|,
name|target
operator|==
literal|null
condition|?
literal|""
else|:
name|target
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|reverse
condition|)
block|{
name|getDiffGenerator
argument_list|()
operator|.
name|init
argument_list|(
name|url1
operator|.
name|toString
argument_list|()
argument_list|,
name|anchorPath2
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|getDiffGenerator
argument_list|()
operator|.
name|init
argument_list|(
name|anchorPath2
argument_list|,
name|url1
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
else|else
block|{
name|url1
operator|=
name|getURL
argument_list|(
name|path1
argument_list|)
expr_stmt|;
block|}
name|SVNRepository
name|repository
init|=
name|createRepository
argument_list|(
name|anchorURL
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|,
literal|true
argument_list|)
decl_stmt|;
name|long
name|revNumber
init|=
name|getRevisionNumber
argument_list|(
name|revision1
argument_list|,
name|repository
argument_list|,
name|path1
argument_list|)
decl_stmt|;
name|AbstractDiffCallback
name|callback
init|=
operator|new
name|SVNDiffCallback
argument_list|(
name|info
operator|.
name|getAnchor
argument_list|()
argument_list|,
name|getDiffGenerator
argument_list|()
argument_list|,
name|reverse
condition|?
operator|-
literal|1
else|:
name|revNumber
argument_list|,
name|reverse
condition|?
name|revNumber
else|:
operator|-
literal|1
argument_list|,
name|result
argument_list|)
decl_stmt|;
name|SVNDiffEditor
name|editor
init|=
operator|new
name|SVNDiffEditor
argument_list|(
name|wcAccess
argument_list|,
name|info
argument_list|,
name|callback
argument_list|,
name|useAncestry
argument_list|,
name|reverse
comment|/* reverse */
argument_list|,
name|revision2
operator|==
name|SVNRevision
operator|.
name|BASE
operator|||
name|revision2
operator|==
name|SVNRevision
operator|.
name|COMMITTED
comment|/* compare to base */
argument_list|,
name|depth
argument_list|,
name|changeLists
argument_list|)
decl_stmt|;
name|ISVNEditor
name|filterEditor
init|=
name|SVNAmbientDepthFilterEditor
operator|.
name|wrap
argument_list|(
name|editor
argument_list|,
name|info
argument_list|,
literal|false
argument_list|)
decl_stmt|;
name|boolean
name|serverSupportsDepth
init|=
name|repository
operator|.
name|hasCapability
argument_list|(
name|SVNCapability
operator|.
name|DEPTH
argument_list|)
decl_stmt|;
name|SVNReporter
name|reporter
init|=
operator|new
name|SVNReporter
argument_list|(
name|info
argument_list|,
name|info
operator|.
name|getAnchor
argument_list|()
operator|.
name|getFile
argument_list|(
name|info
operator|.
name|getTargetName
argument_list|()
argument_list|)
argument_list|,
literal|false
argument_list|,
operator|!
name|serverSupportsDepth
argument_list|,
name|depth
argument_list|,
literal|false
argument_list|,
literal|false
argument_list|,
literal|true
argument_list|,
name|getDebugLog
argument_list|()
argument_list|)
decl_stmt|;
comment|// this should be rev2.
name|long
name|pegRevisionNumber
init|=
name|getRevisionNumber
argument_list|(
name|revision2
argument_list|,
name|repository
argument_list|,
name|path2
argument_list|)
decl_stmt|;
try|try
block|{
name|repository
operator|.
name|diff
argument_list|(
name|url1
argument_list|,
name|revNumber
argument_list|,
name|pegRevisionNumber
argument_list|,
name|target
argument_list|,
operator|!
name|useAncestry
argument_list|,
name|depth
argument_list|,
literal|true
argument_list|,
name|reporter
argument_list|,
name|SVNCancellableEditor
operator|.
name|newInstance
argument_list|(
name|filterEditor
argument_list|,
name|this
argument_list|,
name|getDebugLog
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
name|editor
operator|.
name|cleanup
argument_list|()
expr_stmt|;
block|}
block|}
finally|finally
block|{
name|wcAccess
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
block|}
specifier|private
name|void
name|doDiffWCWC
parameter_list|(
name|File
name|path1
parameter_list|,
name|SVNRevision
name|revision1
parameter_list|,
name|File
name|path2
parameter_list|,
name|SVNRevision
name|revision2
parameter_list|,
name|SVNDepth
name|depth
parameter_list|,
name|boolean
name|useAncestry
parameter_list|,
name|OutputStream
name|result
parameter_list|,
name|Collection
name|changeLists
parameter_list|)
throws|throws
name|SVNException
block|{
if|if
condition|(
operator|!
name|path1
operator|.
name|equals
argument_list|(
name|path2
argument_list|)
operator|||
operator|!
operator|(
name|revision1
operator|==
name|SVNRevision
operator|.
name|BASE
operator|&&
name|revision2
operator|==
name|SVNRevision
operator|.
name|WORKING
operator|)
condition|)
block|{
name|SVNErrorMessage
name|err
init|=
name|SVNErrorMessage
operator|.
name|create
argument_list|(
name|SVNErrorCode
operator|.
name|UNSUPPORTED_FEATURE
argument_list|,
literal|"Only diffs between a path's text-base and its working files are supported at this time (-rBASE:WORKING)"
argument_list|)
decl_stmt|;
name|SVNErrorManager
operator|.
name|error
argument_list|(
name|err
argument_list|,
name|SVNLogType
operator|.
name|WC
argument_list|)
expr_stmt|;
block|}
name|SVNWCAccess
name|wcAccess
init|=
name|createWCAccess
argument_list|()
decl_stmt|;
try|try
block|{
name|int
name|admDepth
init|=
name|getAdminDepth
argument_list|(
name|depth
argument_list|)
decl_stmt|;
name|SVNAdminAreaInfo
name|info
init|=
name|wcAccess
operator|.
name|openAnchor
argument_list|(
name|path1
argument_list|,
literal|false
argument_list|,
name|admDepth
argument_list|)
decl_stmt|;
name|wcAccess
operator|.
name|getVersionedEntry
argument_list|(
name|path1
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|long
name|rev
init|=
name|getRevisionNumber
argument_list|(
name|revision1
argument_list|,
literal|null
argument_list|,
name|path1
argument_list|)
decl_stmt|;
name|AbstractDiffCallback
name|callback
init|=
operator|new
name|SVNDiffCallback
argument_list|(
name|info
operator|.
name|getAnchor
argument_list|()
argument_list|,
name|getDiffGenerator
argument_list|()
argument_list|,
name|rev
argument_list|,
operator|-
literal|1
argument_list|,
name|result
argument_list|)
decl_stmt|;
name|SVNDiffEditor
name|editor
init|=
operator|new
name|SVNDiffEditor
argument_list|(
name|wcAccess
argument_list|,
name|info
argument_list|,
name|callback
argument_list|,
name|useAncestry
argument_list|,
literal|false
argument_list|,
literal|false
argument_list|,
name|depth
argument_list|,
name|changeLists
argument_list|)
decl_stmt|;
try|try
block|{
name|editor
operator|.
name|closeEdit
argument_list|()
expr_stmt|;
block|}
finally|finally
block|{
name|editor
operator|.
name|cleanup
argument_list|()
expr_stmt|;
block|}
block|}
finally|finally
block|{
name|wcAccess
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
block|}
specifier|private
name|void
name|doDiffURLURL
parameter_list|(
name|SVNURL
name|url1
parameter_list|,
name|File
name|path1
parameter_list|,
name|SVNRevision
name|revision1
parameter_list|,
name|SVNURL
name|url2
parameter_list|,
name|File
name|path2
parameter_list|,
name|SVNRevision
name|revision2
parameter_list|,
name|SVNRevision
name|pegRevision
parameter_list|,
name|SVNDepth
name|depth
parameter_list|,
name|boolean
name|useAncestry
parameter_list|,
name|OutputStream
name|result
parameter_list|)
throws|throws
name|SVNException
block|{
name|File
name|basePath
init|=
literal|null
decl_stmt|;
if|if
condition|(
name|path1
operator|!=
literal|null
condition|)
block|{
name|basePath
operator|=
name|path1
expr_stmt|;
block|}
if|if
condition|(
name|path2
operator|!=
literal|null
condition|)
block|{
name|basePath
operator|=
name|path2
expr_stmt|;
block|}
if|if
condition|(
name|pegRevision
operator|.
name|isValid
argument_list|()
condition|)
block|{
name|SVNRepositoryLocation
index|[]
name|locations
init|=
name|getLocations
argument_list|(
name|url2
argument_list|,
name|path2
argument_list|,
literal|null
argument_list|,
name|pegRevision
argument_list|,
name|revision1
argument_list|,
name|revision2
argument_list|)
decl_stmt|;
name|url1
operator|=
name|locations
index|[
literal|0
index|]
operator|.
name|getURL
argument_list|()
expr_stmt|;
name|url2
operator|=
name|locations
index|[
literal|1
index|]
operator|.
name|getURL
argument_list|()
expr_stmt|;
name|getDiffGenerator
argument_list|()
operator|.
name|init
argument_list|(
name|url1
operator|.
name|toString
argument_list|()
argument_list|,
name|url2
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|url1
operator|=
name|url1
operator|==
literal|null
condition|?
name|getURL
argument_list|(
name|path1
argument_list|)
else|:
name|url1
expr_stmt|;
name|url2
operator|=
name|url2
operator|==
literal|null
condition|?
name|getURL
argument_list|(
name|path2
argument_list|)
else|:
name|url2
expr_stmt|;
block|}
name|SVNRepository
name|repository1
init|=
name|createRepository
argument_list|(
name|url1
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|,
literal|true
argument_list|)
decl_stmt|;
name|SVNRepository
name|repository2
init|=
name|createRepository
argument_list|(
name|url2
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|,
literal|false
argument_list|)
decl_stmt|;
specifier|final
name|long
name|rev1
init|=
name|getRevisionNumber
argument_list|(
name|revision1
argument_list|,
name|repository1
argument_list|,
name|path1
argument_list|)
decl_stmt|;
name|long
name|rev2
init|=
operator|-
literal|1
decl_stmt|;
name|String
name|target1
init|=
literal|null
decl_stmt|;
name|SVNNodeKind
name|kind1
init|=
literal|null
decl_stmt|;
name|SVNNodeKind
name|kind2
init|=
literal|null
decl_stmt|;
try|try
block|{
name|rev2
operator|=
name|getRevisionNumber
argument_list|(
name|revision2
argument_list|,
name|repository2
argument_list|,
name|path2
argument_list|)
expr_stmt|;
name|kind1
operator|=
name|repository1
operator|.
name|checkPath
argument_list|(
literal|""
argument_list|,
name|rev1
argument_list|)
expr_stmt|;
name|kind2
operator|=
name|repository2
operator|.
name|checkPath
argument_list|(
literal|""
argument_list|,
name|rev2
argument_list|)
expr_stmt|;
if|if
condition|(
name|kind1
operator|==
name|SVNNodeKind
operator|.
name|NONE
condition|)
block|{
name|SVNErrorMessage
name|err
init|=
name|SVNErrorMessage
operator|.
name|create
argument_list|(
name|SVNErrorCode
operator|.
name|FS_NOT_FOUND
argument_list|,
literal|"''{0}'' was not found in the repository at revision {1}"
argument_list|,
operator|new
name|Object
index|[]
block|{
name|url1
block|,
operator|new
name|Long
argument_list|(
name|rev1
argument_list|)
block|}
argument_list|)
decl_stmt|;
name|SVNErrorManager
operator|.
name|error
argument_list|(
name|err
argument_list|,
name|SVNLogType
operator|.
name|WC
argument_list|)
expr_stmt|;
block|}
if|else if
condition|(
name|kind2
operator|==
name|SVNNodeKind
operator|.
name|NONE
condition|)
block|{
name|SVNErrorMessage
name|err
init|=
name|SVNErrorMessage
operator|.
name|create
argument_list|(
name|SVNErrorCode
operator|.
name|FS_NOT_FOUND
argument_list|,
literal|"''{0}'' was not found in the repository at revision {1}"
argument_list|,
operator|new
name|Object
index|[]
block|{
name|url2
block|,
operator|new
name|Long
argument_list|(
name|rev2
argument_list|)
block|}
argument_list|)
decl_stmt|;
name|SVNErrorManager
operator|.
name|error
argument_list|(
name|err
argument_list|,
name|SVNLogType
operator|.
name|WC
argument_list|)
expr_stmt|;
block|}
block|}
finally|finally
block|{
name|repository2
operator|.
name|closeSession
argument_list|()
expr_stmt|;
block|}
if|if
condition|(
name|kind1
operator|==
name|SVNNodeKind
operator|.
name|FILE
operator|||
name|kind2
operator|==
name|SVNNodeKind
operator|.
name|FILE
condition|)
block|{
name|target1
operator|=
name|SVNPathUtil
operator|.
name|tail
argument_list|(
name|url1
operator|.
name|getPath
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|basePath
operator|!=
literal|null
condition|)
block|{
name|basePath
operator|=
name|basePath
operator|.
name|getParentFile
argument_list|()
expr_stmt|;
block|}
name|url1
operator|=
name|SVNURL
operator|.
name|parseURIEncoded
argument_list|(
name|SVNPathUtil
operator|.
name|removeTail
argument_list|(
name|url1
operator|.
name|toString
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|repository1
operator|=
name|createRepository
argument_list|(
name|url1
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|,
literal|true
argument_list|)
expr_stmt|;
block|}
name|repository2
operator|=
name|createRepository
argument_list|(
name|url1
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|SVNRemoteDiffEditor
name|editor
init|=
literal|null
decl_stmt|;
try|try
block|{
name|SVNDiffCallback
name|callback
init|=
operator|new
name|SVNDiffCallback
argument_list|(
literal|null
argument_list|,
name|getDiffGenerator
argument_list|()
argument_list|,
name|rev1
argument_list|,
name|rev2
argument_list|,
name|result
argument_list|)
decl_stmt|;
name|callback
operator|.
name|setBasePath
argument_list|(
name|basePath
argument_list|)
expr_stmt|;
name|editor
operator|=
operator|new
name|SVNRemoteDiffEditor
argument_list|(
literal|null
argument_list|,
literal|null
argument_list|,
name|callback
argument_list|,
name|repository2
argument_list|,
name|rev1
argument_list|,
name|rev2
argument_list|,
literal|false
argument_list|,
literal|null
argument_list|,
name|this
argument_list|)
expr_stmt|;
name|editor
operator|.
name|setUseGlobalTmp
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|ISVNReporterBaton
name|reporter
init|=
operator|new
name|ISVNReporterBaton
argument_list|()
block|{
specifier|public
name|void
name|report
parameter_list|(
name|ISVNReporter
name|reporter
parameter_list|)
throws|throws
name|SVNException
block|{
comment|//TODO(sd): dynamic depth here
name|reporter
operator|.
name|setPath
argument_list|(
literal|""
argument_list|,
literal|null
argument_list|,
name|rev1
argument_list|,
name|SVNDepth
operator|.
name|INFINITY
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|reporter
operator|.
name|finishReport
argument_list|()
expr_stmt|;
block|}
block|}
decl_stmt|;
name|repository1
operator|.
name|diff
argument_list|(
name|url2
argument_list|,
name|rev2
argument_list|,
name|rev1
argument_list|,
name|target1
argument_list|,
operator|!
name|useAncestry
argument_list|,
name|depth
argument_list|,
literal|true
argument_list|,
name|reporter
argument_list|,
name|SVNCancellableEditor
operator|.
name|newInstance
argument_list|(
name|editor
argument_list|,
name|this
argument_list|,
name|getDebugLog
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
if|if
condition|(
name|editor
operator|!=
literal|null
condition|)
block|{
name|editor
operator|.
name|cleanup
argument_list|()
expr_stmt|;
block|}
name|repository2
operator|.
name|closeSession
argument_list|()
expr_stmt|;
block|}
block|}
specifier|private
name|void
name|doDiffURLURL
parameter_list|(
name|SVNURL
name|url1
parameter_list|,
name|File
name|path1
parameter_list|,
name|SVNRevision
name|revision1
parameter_list|,
name|SVNURL
name|url2
parameter_list|,
name|File
name|path2
parameter_list|,
name|SVNRevision
name|revision2
parameter_list|,
name|SVNRevision
name|pegRevision
parameter_list|,
name|SVNDepth
name|depth
parameter_list|,
name|boolean
name|useAncestry
parameter_list|,
name|ISVNDiffStatusHandler
name|handler
parameter_list|)
throws|throws
name|SVNException
block|{
name|File
name|basePath
init|=
literal|null
decl_stmt|;
if|if
condition|(
name|path1
operator|!=
literal|null
condition|)
block|{
name|basePath
operator|=
name|path1
expr_stmt|;
block|}
if|if
condition|(
name|path2
operator|!=
literal|null
condition|)
block|{
name|basePath
operator|=
name|path2
expr_stmt|;
block|}
if|if
condition|(
name|pegRevision
operator|.
name|isValid
argument_list|()
condition|)
block|{
name|SVNRepositoryLocation
index|[]
name|locations
init|=
name|getLocations
argument_list|(
name|url2
argument_list|,
name|path2
argument_list|,
literal|null
argument_list|,
name|pegRevision
argument_list|,
name|revision1
argument_list|,
name|revision2
argument_list|)
decl_stmt|;
name|url1
operator|=
name|locations
index|[
literal|0
index|]
operator|.
name|getURL
argument_list|()
expr_stmt|;
name|url2
operator|=
name|locations
index|[
literal|1
index|]
operator|.
name|getURL
argument_list|()
expr_stmt|;
name|getDiffGenerator
argument_list|()
operator|.
name|init
argument_list|(
name|url1
operator|.
name|toString
argument_list|()
argument_list|,
name|url2
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|url1
operator|=
name|url1
operator|==
literal|null
condition|?
name|getURL
argument_list|(
name|path1
argument_list|)
else|:
name|url1
expr_stmt|;
name|url2
operator|=
name|url2
operator|==
literal|null
condition|?
name|getURL
argument_list|(
name|path2
argument_list|)
else|:
name|url2
expr_stmt|;
block|}
name|SVNRepository
name|repository1
init|=
name|createRepository
argument_list|(
name|url1
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|,
literal|true
argument_list|)
decl_stmt|;
name|SVNRepository
name|repository2
init|=
name|createRepository
argument_list|(
name|url2
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|,
literal|false
argument_list|)
decl_stmt|;
specifier|final
name|long
name|rev1
init|=
name|getRevisionNumber
argument_list|(
name|revision1
argument_list|,
name|repository1
argument_list|,
name|path1
argument_list|)
decl_stmt|;
name|long
name|rev2
init|=
operator|-
literal|1
decl_stmt|;
name|SVNNodeKind
name|kind1
init|=
literal|null
decl_stmt|;
name|SVNNodeKind
name|kind2
init|=
literal|null
decl_stmt|;
name|String
name|target1
init|=
literal|null
decl_stmt|;
try|try
block|{
name|rev2
operator|=
name|getRevisionNumber
argument_list|(
name|revision2
argument_list|,
name|repository2
argument_list|,
name|path2
argument_list|)
expr_stmt|;
name|kind1
operator|=
name|repository1
operator|.
name|checkPath
argument_list|(
literal|""
argument_list|,
name|rev1
argument_list|)
expr_stmt|;
name|kind2
operator|=
name|repository2
operator|.
name|checkPath
argument_list|(
literal|""
argument_list|,
name|rev2
argument_list|)
expr_stmt|;
if|if
condition|(
name|kind1
operator|==
name|SVNNodeKind
operator|.
name|NONE
condition|)
block|{
name|SVNErrorMessage
name|err
init|=
name|SVNErrorMessage
operator|.
name|create
argument_list|(
name|SVNErrorCode
operator|.
name|FS_NOT_FOUND
argument_list|,
literal|"''{0}'' was not found in the repository at revision {1}"
argument_list|,
operator|new
name|Object
index|[]
block|{
name|url1
block|,
operator|new
name|Long
argument_list|(
name|rev1
argument_list|)
block|}
argument_list|)
decl_stmt|;
name|SVNErrorManager
operator|.
name|error
argument_list|(
name|err
argument_list|,
name|SVNLogType
operator|.
name|WC
argument_list|)
expr_stmt|;
block|}
if|else if
condition|(
name|kind2
operator|==
name|SVNNodeKind
operator|.
name|NONE
condition|)
block|{
name|SVNErrorMessage
name|err
init|=
name|SVNErrorMessage
operator|.
name|create
argument_list|(
name|SVNErrorCode
operator|.
name|FS_NOT_FOUND
argument_list|,
literal|"''{0}'' was not found in the repository at revision {1}"
argument_list|,
operator|new
name|Object
index|[]
block|{
name|url2
block|,
operator|new
name|Long
argument_list|(
name|rev2
argument_list|)
block|}
argument_list|)
decl_stmt|;
name|SVNErrorManager
operator|.
name|error
argument_list|(
name|err
argument_list|,
name|SVNLogType
operator|.
name|WC
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|kind1
operator|==
name|SVNNodeKind
operator|.
name|FILE
operator|||
name|kind2
operator|==
name|SVNNodeKind
operator|.
name|FILE
condition|)
block|{
name|target1
operator|=
name|SVNPathUtil
operator|.
name|tail
argument_list|(
name|url1
operator|.
name|getPath
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|basePath
operator|!=
literal|null
condition|)
block|{
name|basePath
operator|=
name|basePath
operator|.
name|getParentFile
argument_list|()
expr_stmt|;
block|}
name|url1
operator|=
name|SVNURL
operator|.
name|parseURIEncoded
argument_list|(
name|SVNPathUtil
operator|.
name|removeTail
argument_list|(
name|url1
operator|.
name|toString
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|repository1
operator|=
name|createRepository
argument_list|(
name|url1
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|,
literal|true
argument_list|)
expr_stmt|;
block|}
block|}
finally|finally
block|{
name|repository2
operator|.
name|closeSession
argument_list|()
expr_stmt|;
block|}
name|repository2
operator|=
name|createRepository
argument_list|(
name|url1
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|File
name|tmpFile
init|=
name|getDiffGenerator
argument_list|()
operator|.
name|createTempDirectory
argument_list|()
decl_stmt|;
try|try
block|{
name|SVNDiffStatusEditor
name|editor
init|=
operator|new
name|SVNDiffStatusEditor
argument_list|(
name|basePath
argument_list|,
name|target1
argument_list|,
name|repository2
argument_list|,
name|rev1
argument_list|,
name|handler
argument_list|)
decl_stmt|;
name|ISVNReporterBaton
name|reporter
init|=
operator|new
name|ISVNReporterBaton
argument_list|()
block|{
specifier|public
name|void
name|report
parameter_list|(
name|ISVNReporter
name|reporter
parameter_list|)
throws|throws
name|SVNException
block|{
comment|//TODO(sd): dynamic depth here
name|reporter
operator|.
name|setPath
argument_list|(
literal|""
argument_list|,
literal|null
argument_list|,
name|rev1
argument_list|,
name|SVNDepth
operator|.
name|INFINITY
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|reporter
operator|.
name|finishReport
argument_list|()
expr_stmt|;
block|}
block|}
decl_stmt|;
name|repository1
operator|.
name|diff
argument_list|(
name|url2
argument_list|,
name|rev2
argument_list|,
name|rev1
argument_list|,
name|target1
argument_list|,
operator|!
name|useAncestry
argument_list|,
name|depth
argument_list|,
literal|false
argument_list|,
name|reporter
argument_list|,
name|SVNCancellableEditor
operator|.
name|newInstance
argument_list|(
name|editor
argument_list|,
name|this
argument_list|,
name|getDebugLog
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
if|if
condition|(
name|tmpFile
operator|!=
literal|null
condition|)
block|{
name|SVNFileUtil
operator|.
name|deleteAll
argument_list|(
name|tmpFile
argument_list|,
literal|true
argument_list|,
literal|null
argument_list|)
expr_stmt|;
block|}
name|repository2
operator|.
name|closeSession
argument_list|()
expr_stmt|;
block|}
block|}
specifier|private
name|int
name|getAdminDepth
parameter_list|(
name|SVNDepth
name|depth
parameter_list|)
block|{
name|int
name|admDepth
init|=
name|SVNWCAccess
operator|.
name|INFINITE_DEPTH
decl_stmt|;
if|if
condition|(
name|depth
operator|==
name|SVNDepth
operator|.
name|IMMEDIATES
condition|)
block|{
name|admDepth
operator|=
literal|1
expr_stmt|;
block|}
if|else if
condition|(
name|depth
operator|==
name|SVNDepth
operator|.
name|EMPTY
operator|||
name|depth
operator|==
name|SVNDepth
operator|.
name|FILES
condition|)
block|{
name|admDepth
operator|=
literal|0
expr_stmt|;
block|}
return|return
name|admDepth
return|;
block|}
specifier|private
name|Object
index|[]
name|getLocationFromPathAndRevision
parameter_list|(
name|File
name|path
parameter_list|,
name|SVNURL
name|url
parameter_list|,
name|SVNRevision
name|pegRevision
parameter_list|)
throws|throws
name|SVNException
block|{
name|SVNWCAccess
name|wcAccess
init|=
literal|null
decl_stmt|;
name|SVNRepository
name|repos
init|=
literal|null
decl_stmt|;
name|SVNAdminArea
name|adminArea
init|=
literal|null
decl_stmt|;
try|try
block|{
if|if
condition|(
name|path
operator|!=
literal|null
operator|&&
operator|(
name|pegRevision
operator|==
name|SVNRevision
operator|.
name|BASE
operator|||
name|pegRevision
operator|==
name|SVNRevision
operator|.
name|WORKING
operator|||
name|pegRevision
operator|==
name|SVNRevision
operator|.
name|COMMITTED
operator|||
name|pegRevision
operator|==
name|SVNRevision
operator|.
name|UNDEFINED
operator|)
condition|)
block|{
name|int
name|admLockLevel
init|=
name|getLevelsToLockFromDepth
argument_list|(
name|SVNDepth
operator|.
name|EMPTY
argument_list|)
decl_stmt|;
name|wcAccess
operator|=
name|createWCAccess
argument_list|()
expr_stmt|;
name|wcAccess
operator|.
name|probeOpen
argument_list|(
name|path
argument_list|,
literal|false
argument_list|,
name|admLockLevel
argument_list|)
expr_stmt|;
block|}
name|long
index|[]
name|rev
init|=
block|{
name|SVNRepository
operator|.
name|INVALID_REVISION
block|}
decl_stmt|;
name|repos
operator|=
name|createRepository
argument_list|(
name|url
argument_list|,
name|path
argument_list|,
name|adminArea
argument_list|,
name|pegRevision
argument_list|,
name|pegRevision
argument_list|,
name|rev
argument_list|)
expr_stmt|;
return|return
operator|new
name|Object
index|[]
block|{
name|repos
operator|.
name|getLocation
argument_list|()
block|,
name|SVNRevision
operator|.
name|create
argument_list|(
name|rev
index|[
literal|0
index|]
argument_list|)
block|}
return|;
block|}
finally|finally
block|{
if|if
condition|(
name|wcAccess
operator|!=
literal|null
condition|)
block|{
name|wcAccess
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
if|if
condition|(
name|repos
operator|!=
literal|null
condition|)
block|{
name|repos
operator|.
name|closeSession
argument_list|()
expr_stmt|;
block|}
block|}
block|}
specifier|private
name|void
name|getLogMergedMergeInfoImpl
parameter_list|(
name|File
name|path
parameter_list|,
name|SVNURL
name|url
parameter_list|,
name|SVNRevision
name|pegRevision
parameter_list|,
name|SVNURL
name|mergeSrcURL
parameter_list|,
name|File
name|mergeSrcPath
parameter_list|,
name|SVNRevision
name|srcPegRevision
parameter_list|,
name|boolean
name|discoverChangedPaths
parameter_list|,
name|String
index|[]
name|revisionProperties
parameter_list|,
name|ISVNLogEntryHandler
name|handler
parameter_list|)
throws|throws
name|SVNException
block|{
name|SVNURL
name|reposRoot
index|[]
init|=
operator|new
name|SVNURL
index|[
literal|1
index|]
decl_stmt|;
name|Object
index|[]
name|location
init|=
name|getLocationFromPathAndRevision
argument_list|(
name|mergeSrcPath
argument_list|,
name|mergeSrcURL
argument_list|,
name|srcPegRevision
argument_list|)
decl_stmt|;
name|SVNURL
name|realMergeSrcURL
init|=
operator|(
name|SVNURL
operator|)
name|location
index|[
literal|0
index|]
decl_stmt|;
name|SVNRevision
name|realSrcPegRevision
init|=
operator|(
name|SVNRevision
operator|)
name|location
index|[
literal|1
index|]
decl_stmt|;
name|Map
name|targetMergeInfo
init|=
name|path
operator|!=
literal|null
condition|?
name|getMergeInfo
argument_list|(
name|path
argument_list|,
name|pegRevision
argument_list|,
name|reposRoot
argument_list|)
else|:
name|getMergeInfo
argument_list|(
name|url
argument_list|,
name|pegRevision
argument_list|,
name|reposRoot
argument_list|)
decl_stmt|;
if|if
condition|(
name|targetMergeInfo
operator|==
literal|null
condition|)
block|{
return|return;
block|}
name|Map
name|srcHistory
init|=
name|getHistoryAsMergeInfo
argument_list|(
name|realMergeSrcURL
argument_list|,
literal|null
argument_list|,
name|realSrcPegRevision
argument_list|,
name|SVNRepository
operator|.
name|INVALID_REVISION
argument_list|,
name|SVNRepository
operator|.
name|INVALID_REVISION
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|)
decl_stmt|;
name|Map
name|mergeInfo
init|=
name|SVNMergeInfoUtil
operator|.
name|intersectMergeInfo
argument_list|(
name|targetMergeInfo
argument_list|,
name|srcHistory
argument_list|,
literal|false
argument_list|)
decl_stmt|;
name|SVNMergeRangeList
name|rangeList
init|=
operator|new
name|SVNMergeRangeList
argument_list|(
operator|new
name|SVNMergeRange
index|[
literal|0
index|]
argument_list|)
decl_stmt|;
name|long
name|youngestRev
init|=
name|SVNRepository
operator|.
name|INVALID_REVISION
decl_stmt|;
name|String
name|logTarget
init|=
literal|null
decl_stmt|;
for|for
control|(
name|Iterator
name|mergeInfoIter
init|=
name|mergeInfo
operator|.
name|keySet
argument_list|()
operator|.
name|iterator
argument_list|()
init|;
name|mergeInfoIter
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|String
name|mergeSrc
init|=
operator|(
name|String
operator|)
name|mergeInfoIter
operator|.
name|next
argument_list|()
decl_stmt|;
name|SVNMergeRangeList
name|list
init|=
operator|(
name|SVNMergeRangeList
operator|)
name|mergeInfo
operator|.
name|get
argument_list|(
name|mergeSrc
argument_list|)
decl_stmt|;
name|SVNMergeRange
index|[]
name|listRanges
init|=
name|list
operator|.
name|getRanges
argument_list|()
decl_stmt|;
name|SVNMergeRange
name|range
init|=
name|listRanges
index|[
name|listRanges
operator|.
name|length
operator|-
literal|1
index|]
decl_stmt|;
if|if
condition|(
operator|!
name|SVNRevision
operator|.
name|isValidRevisionNumber
argument_list|(
name|youngestRev
argument_list|)
operator|||
name|range
operator|.
name|getEndRevision
argument_list|()
operator|>
name|youngestRev
condition|)
block|{
name|youngestRev
operator|=
name|range
operator|.
name|getEndRevision
argument_list|()
expr_stmt|;
name|logTarget
operator|=
name|mergeSrc
expr_stmt|;
block|}
name|rangeList
operator|=
name|rangeList
operator|.
name|merge
argument_list|(
name|list
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|rangeList
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
return|return;
block|}
name|getLogsForMergeInfoRangeList
argument_list|(
name|reposRoot
index|[
literal|0
index|]
argument_list|,
operator|new
name|String
index|[]
block|{
name|logTarget
block|}
argument_list|,
name|rangeList
argument_list|,
name|discoverChangedPaths
argument_list|,
name|revisionProperties
argument_list|,
name|handler
argument_list|)
expr_stmt|;
block|}
specifier|private
name|void
name|getLogEligibleMergeInfoImpl
parameter_list|(
name|File
name|path
parameter_list|,
name|SVNURL
name|url
parameter_list|,
name|SVNRevision
name|pegRevision
parameter_list|,
name|SVNURL
name|mergeSrcURL
parameter_list|,
name|File
name|mergeSrcPath
parameter_list|,
name|SVNRevision
name|srcPegRevision
parameter_list|,
name|boolean
name|discoverChangedPaths
parameter_list|,
name|String
index|[]
name|revisionProperties
parameter_list|,
name|ISVNLogEntryHandler
name|handler
parameter_list|)
throws|throws
name|SVNException
block|{
name|SVNURL
name|reposRoot
index|[]
init|=
operator|new
name|SVNURL
index|[
literal|1
index|]
decl_stmt|;
name|Object
index|[]
name|location
init|=
name|getLocationFromPathAndRevision
argument_list|(
name|mergeSrcPath
argument_list|,
name|mergeSrcURL
argument_list|,
name|srcPegRevision
argument_list|)
decl_stmt|;
name|SVNURL
name|realMergeSrcURL
init|=
operator|(
name|SVNURL
operator|)
name|location
index|[
literal|0
index|]
decl_stmt|;
name|SVNRevision
name|realSrcPegRevision
init|=
operator|(
name|SVNRevision
operator|)
name|location
index|[
literal|1
index|]
decl_stmt|;
name|Map
name|mergeInfo
init|=
name|path
operator|!=
literal|null
condition|?
name|getMergeInfo
argument_list|(
name|path
argument_list|,
name|pegRevision
argument_list|,
name|reposRoot
argument_list|)
else|:
name|getMergeInfo
argument_list|(
name|url
argument_list|,
name|pegRevision
argument_list|,
name|reposRoot
argument_list|)
decl_stmt|;
name|Map
name|history
init|=
name|getHistoryAsMergeInfo
argument_list|(
name|url
argument_list|,
name|path
argument_list|,
name|pegRevision
argument_list|,
name|SVNRepository
operator|.
name|INVALID_REVISION
argument_list|,
name|SVNRepository
operator|.
name|INVALID_REVISION
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|)
decl_stmt|;
if|if
condition|(
name|mergeInfo
operator|==
literal|null
condition|)
block|{
name|mergeInfo
operator|=
name|history
expr_stmt|;
block|}
else|else
block|{
name|mergeInfo
operator|=
name|SVNMergeInfoUtil
operator|.
name|mergeMergeInfos
argument_list|(
name|mergeInfo
argument_list|,
name|history
argument_list|)
expr_stmt|;
block|}
name|SVNRepository
name|repos
init|=
literal|null
decl_stmt|;
name|Map
name|sourceHistory
init|=
literal|null
decl_stmt|;
try|try
block|{
name|repos
operator|=
name|createRepository
argument_list|(
name|realMergeSrcURL
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|sourceHistory
operator|=
name|getHistoryAsMergeInfo
argument_list|(
name|realMergeSrcURL
argument_list|,
literal|null
argument_list|,
name|realSrcPegRevision
argument_list|,
name|SVNRepository
operator|.
name|INVALID_REVISION
argument_list|,
name|SVNRepository
operator|.
name|INVALID_REVISION
argument_list|,
name|repos
argument_list|,
literal|null
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
name|repos
operator|.
name|closeSession
argument_list|()
expr_stmt|;
block|}
name|Map
name|availableMergeInfo
init|=
name|SVNMergeInfoUtil
operator|.
name|removeMergeInfo
argument_list|(
name|mergeInfo
argument_list|,
name|sourceHistory
argument_list|,
literal|false
argument_list|)
decl_stmt|;
name|SVNMergeRangeList
name|rangeList
init|=
operator|new
name|SVNMergeRangeList
argument_list|(
operator|new
name|SVNMergeRange
index|[
literal|0
index|]
argument_list|)
decl_stmt|;
name|long
name|youngestRev
init|=
name|SVNRepository
operator|.
name|INVALID_REVISION
decl_stmt|;
name|String
name|logTarget
init|=
literal|null
decl_stmt|;
for|for
control|(
name|Iterator
name|availableIter
init|=
name|availableMergeInfo
operator|.
name|keySet
argument_list|()
operator|.
name|iterator
argument_list|()
init|;
name|availableIter
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|String
name|mergeSrc
init|=
operator|(
name|String
operator|)
name|availableIter
operator|.
name|next
argument_list|()
decl_stmt|;
name|SVNMergeRangeList
name|availableRangeList
init|=
operator|(
name|SVNMergeRangeList
operator|)
name|availableMergeInfo
operator|.
name|get
argument_list|(
name|mergeSrc
argument_list|)
decl_stmt|;
name|SVNMergeRange
index|[]
name|ranges
init|=
name|availableRangeList
operator|.
name|getRanges
argument_list|()
decl_stmt|;
name|SVNMergeRange
name|range
init|=
name|ranges
index|[
name|ranges
operator|.
name|length
operator|-
literal|1
index|]
decl_stmt|;
if|if
condition|(
operator|!
name|SVNRevision
operator|.
name|isValidRevisionNumber
argument_list|(
name|youngestRev
argument_list|)
operator|||
name|range
operator|.
name|getEndRevision
argument_list|()
operator|>
name|youngestRev
condition|)
block|{
name|youngestRev
operator|=
name|range
operator|.
name|getEndRevision
argument_list|()
expr_stmt|;
name|logTarget
operator|=
name|mergeSrc
expr_stmt|;
block|}
name|rangeList
operator|=
name|rangeList
operator|.
name|merge
argument_list|(
name|availableRangeList
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|rangeList
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
return|return;
block|}
name|getLogsForMergeInfoRangeList
argument_list|(
name|reposRoot
index|[
literal|0
index|]
argument_list|,
operator|new
name|String
index|[]
block|{
name|logTarget
block|}
argument_list|,
name|rangeList
argument_list|,
name|discoverChangedPaths
argument_list|,
name|revisionProperties
argument_list|,
name|handler
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

