begin_unit|revision:1.0.0;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * ====================================================================  * Copyright (c) 2004-2010 TMate Software Ltd.  All rights reserved.  *  * This software is licensed as described in the file COPYING, which  * you should have received as part of this distribution.  The terms  * are also available at http://svnkit.com/license.html  * If newer versions of this license are posted there, you may use a  * newer version instead, at your option.  * ====================================================================  */
end_comment

begin_package
package|package
name|org
operator|.
name|exist
operator|.
name|versioning
operator|.
name|svn
operator|.
name|wc
operator|.
name|xml
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collection
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Comparator
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Iterator
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|TreeSet
import|;
end_import

begin_import
import|import
name|org
operator|.
name|tmatesoft
operator|.
name|svn
operator|.
name|core
operator|.
name|ISVNDirEntryHandler
import|;
end_import

begin_import
import|import
name|org
operator|.
name|tmatesoft
operator|.
name|svn
operator|.
name|core
operator|.
name|SVNDirEntry
import|;
end_import

begin_import
import|import
name|org
operator|.
name|tmatesoft
operator|.
name|svn
operator|.
name|core
operator|.
name|SVNException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|tmatesoft
operator|.
name|svn
operator|.
name|core
operator|.
name|SVNLock
import|;
end_import

begin_import
import|import
name|org
operator|.
name|tmatesoft
operator|.
name|svn
operator|.
name|core
operator|.
name|SVNNodeKind
import|;
end_import

begin_import
import|import
name|org
operator|.
name|tmatesoft
operator|.
name|svn
operator|.
name|core
operator|.
name|internal
operator|.
name|util
operator|.
name|SVNPathUtil
import|;
end_import

begin_import
import|import
name|org
operator|.
name|tmatesoft
operator|.
name|svn
operator|.
name|core
operator|.
name|internal
operator|.
name|util
operator|.
name|SVNDate
import|;
end_import

begin_import
import|import
name|org
operator|.
name|tmatesoft
operator|.
name|svn
operator|.
name|util
operator|.
name|ISVNDebugLog
import|;
end_import

begin_import
import|import
name|org
operator|.
name|tmatesoft
operator|.
name|svn
operator|.
name|util
operator|.
name|SVNLogType
import|;
end_import

begin_import
import|import
name|org
operator|.
name|xml
operator|.
name|sax
operator|.
name|ContentHandler
import|;
end_import

begin_import
import|import
name|org
operator|.
name|xml
operator|.
name|sax
operator|.
name|SAXException
import|;
end_import

begin_comment
comment|/**  * This is an implementation of the<b>ISVNStatusHandler</b> interface   * that writes XML formatted status information to a specified   *<b>ContentHandler</b>.   *    * @version 1.3  * @author  TMate Software Ltd.  * @since   1.2  */
end_comment

begin_class
specifier|public
class|class
name|SVNXMLDirEntryHandler
extends|extends
name|AbstractXMLHandler
implements|implements
name|ISVNDirEntryHandler
implements|,
name|Comparator
block|{
comment|/**      *<code>'expires'</code> tag.      */
specifier|public
specifier|static
specifier|final
name|String
name|EXPIRES_TAG
init|=
literal|"expires"
decl_stmt|;
comment|/**      *<code>'created'</code> tag.      */
specifier|public
specifier|static
specifier|final
name|String
name|CREATED_TAG
init|=
literal|"created"
decl_stmt|;
comment|/**      *<code>'comment'</code> tag.      */
specifier|public
specifier|static
specifier|final
name|String
name|COMMENT_TAG
init|=
literal|"comment"
decl_stmt|;
comment|/**      *<code>'owner'</code> tag.      */
specifier|public
specifier|static
specifier|final
name|String
name|OWNER_TAG
init|=
literal|"owner"
decl_stmt|;
comment|/**      *<code>'tag'</code> tag.      */
specifier|public
specifier|static
specifier|final
name|String
name|TOKEN_TAG
init|=
literal|"token"
decl_stmt|;
comment|/**      *<code>'lock'</code> tag.      */
specifier|public
specifier|static
specifier|final
name|String
name|LOCK_TAG
init|=
literal|"lock"
decl_stmt|;
comment|/**      *<code>'path'</code> attribute.      */
specifier|public
specifier|static
specifier|final
name|String
name|PATH_ATTR
init|=
literal|"path"
decl_stmt|;
comment|/**      *<code>'revision'</code> attribute.      */
specifier|public
specifier|static
specifier|final
name|String
name|REVISION_ATTR
init|=
literal|"revision"
decl_stmt|;
comment|/**      *<code>'lists'</code> tag.      */
specifier|public
specifier|static
specifier|final
name|String
name|LISTS_TAG
init|=
literal|"lists"
decl_stmt|;
comment|/**      *<code>'list'</code> tag.      */
specifier|public
specifier|static
specifier|final
name|String
name|LIST_TAG
init|=
literal|"list"
decl_stmt|;
comment|/**      *<code>'entry'</code> tag.      */
specifier|public
specifier|static
specifier|final
name|String
name|ENTRY_TAG
init|=
literal|"entry"
decl_stmt|;
comment|/**      *<code>'name'</code> tag.      */
specifier|public
specifier|static
specifier|final
name|String
name|NAME_TAG
init|=
literal|"name"
decl_stmt|;
comment|/**      *<code>'size'</code> tag.      */
specifier|public
specifier|static
specifier|final
name|String
name|SIZE_TAG
init|=
literal|"size"
decl_stmt|;
comment|/**      *<code>'commit'</code> tag.      */
specifier|public
specifier|static
specifier|final
name|String
name|COMMIT_TAG
init|=
literal|"commit"
decl_stmt|;
comment|/**      *<code>'date'</code> tag.      */
specifier|public
specifier|static
specifier|final
name|String
name|DATE_TAG
init|=
literal|"date"
decl_stmt|;
comment|/**      *<code>'author'</code> tag.      */
specifier|public
specifier|static
specifier|final
name|String
name|AUTHOR_TAG
init|=
literal|"author"
decl_stmt|;
specifier|private
name|Collection
name|myDirEntries
decl_stmt|;
comment|/**      * Creates a new handler.      *       * @param saxHandler a<b>ContentHandler</b> to form       *                   an XML tree      */
specifier|public
name|SVNXMLDirEntryHandler
parameter_list|(
name|ContentHandler
name|saxHandler
parameter_list|)
block|{
name|this
argument_list|(
name|saxHandler
argument_list|,
literal|null
argument_list|)
expr_stmt|;
block|}
comment|/**      * Creates a new handler.      *       * @param saxHandler a<b>ContentHandler</b> to form       *                   an XML tree      * @param log        a debug logger      */
specifier|public
name|SVNXMLDirEntryHandler
parameter_list|(
name|ContentHandler
name|saxHandler
parameter_list|,
name|ISVNDebugLog
name|log
parameter_list|)
block|{
name|super
argument_list|(
name|saxHandler
argument_list|,
name|log
argument_list|)
expr_stmt|;
block|}
comment|/**      * Begins an XML tree with the target path for which the       * status is run.       *       * @param path a WC target path or URL      */
specifier|public
name|void
name|startTarget
parameter_list|(
name|String
name|path
parameter_list|)
block|{
name|myDirEntries
operator|=
operator|new
name|TreeSet
argument_list|(
name|this
argument_list|)
expr_stmt|;
try|try
block|{
name|addAttribute
argument_list|(
name|PATH_ATTR
argument_list|,
name|path
operator|==
literal|null
operator|||
name|path
operator|.
name|length
argument_list|()
operator|==
literal|9
condition|?
literal|"."
else|:
name|path
argument_list|)
expr_stmt|;
name|openTag
argument_list|(
name|LIST_TAG
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|SAXException
name|e
parameter_list|)
block|{
name|getDebugLog
argument_list|()
operator|.
name|logSevere
argument_list|(
name|SVNLogType
operator|.
name|DEFAULT
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
block|}
comment|/**      * Handles a next dir<code>entry</code>.      *       * @param  entry        dir entry       * @throws SVNException       */
specifier|public
name|void
name|handleDirEntry
parameter_list|(
name|SVNDirEntry
name|entry
parameter_list|)
throws|throws
name|SVNException
block|{
name|myDirEntries
operator|.
name|add
argument_list|(
name|entry
argument_list|)
expr_stmt|;
block|}
comment|/**      * Closes the formatted XML output.       *      */
specifier|public
name|void
name|endTarget
parameter_list|()
block|{
try|try
block|{
for|for
control|(
name|Iterator
name|ents
init|=
name|myDirEntries
operator|.
name|iterator
argument_list|()
init|;
name|ents
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|SVNDirEntry
name|entry
init|=
operator|(
name|SVNDirEntry
operator|)
name|ents
operator|.
name|next
argument_list|()
decl_stmt|;
name|sendToHandler
argument_list|(
name|entry
argument_list|)
expr_stmt|;
block|}
name|myDirEntries
operator|=
literal|null
expr_stmt|;
name|closeTag
argument_list|(
name|LIST_TAG
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|SAXException
name|e
parameter_list|)
block|{
name|getDebugLog
argument_list|()
operator|.
name|logSevere
argument_list|(
name|SVNLogType
operator|.
name|DEFAULT
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
block|}
specifier|private
name|void
name|sendToHandler
parameter_list|(
name|SVNDirEntry
name|entry
parameter_list|)
throws|throws
name|SAXException
block|{
if|if
condition|(
literal|""
operator|.
name|equals
argument_list|(
name|entry
operator|.
name|getRelativePath
argument_list|()
argument_list|)
condition|)
block|{
if|if
condition|(
name|entry
operator|.
name|getKind
argument_list|()
operator|==
name|SVNNodeKind
operator|.
name|DIR
condition|)
block|{
return|return;
block|}
block|}
name|openTag
argument_list|(
name|ENTRY_TAG
argument_list|)
expr_stmt|;
name|addTag
argument_list|(
name|NAME_TAG
argument_list|,
name|entry
operator|.
name|getRelativePath
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|entry
operator|.
name|getKind
argument_list|()
operator|==
name|SVNNodeKind
operator|.
name|FILE
condition|)
block|{
name|addTag
argument_list|(
name|SIZE_TAG
argument_list|,
name|entry
operator|.
name|getSize
argument_list|()
operator|+
literal|""
argument_list|)
expr_stmt|;
block|}
name|addAttribute
argument_list|(
name|REVISION_ATTR
argument_list|,
name|entry
operator|.
name|getRevision
argument_list|()
operator|+
literal|""
argument_list|)
expr_stmt|;
name|openTag
argument_list|(
name|COMMIT_TAG
argument_list|)
expr_stmt|;
name|addTag
argument_list|(
name|AUTHOR_TAG
argument_list|,
name|entry
operator|.
name|getAuthor
argument_list|()
argument_list|)
expr_stmt|;
name|addTag
argument_list|(
name|DATE_TAG
argument_list|,
name|SVNDate
operator|.
name|formatDate
argument_list|(
name|entry
operator|.
name|getDate
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|closeTag
argument_list|(
name|COMMIT_TAG
argument_list|)
expr_stmt|;
name|SVNLock
name|lock
init|=
name|entry
operator|.
name|getLock
argument_list|()
decl_stmt|;
if|if
condition|(
name|lock
operator|!=
literal|null
condition|)
block|{
name|openTag
argument_list|(
name|LOCK_TAG
argument_list|)
expr_stmt|;
name|addTag
argument_list|(
name|TOKEN_TAG
argument_list|,
name|lock
operator|.
name|getID
argument_list|()
argument_list|)
expr_stmt|;
name|addTag
argument_list|(
name|OWNER_TAG
argument_list|,
name|lock
operator|.
name|getOwner
argument_list|()
argument_list|)
expr_stmt|;
name|addTag
argument_list|(
name|COMMENT_TAG
argument_list|,
name|lock
operator|.
name|getComment
argument_list|()
argument_list|)
expr_stmt|;
name|addTag
argument_list|(
name|CREATED_TAG
argument_list|,
name|SVNDate
operator|.
name|formatDate
argument_list|(
name|lock
operator|.
name|getCreationDate
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
if|if
condition|(
name|lock
operator|.
name|getExpirationDate
argument_list|()
operator|!=
literal|null
operator|&&
name|lock
operator|.
name|getExpirationDate
argument_list|()
operator|.
name|getTime
argument_list|()
operator|>
literal|0
condition|)
block|{
name|addTag
argument_list|(
name|EXPIRES_TAG
argument_list|,
name|SVNDate
operator|.
name|formatDate
argument_list|(
name|lock
operator|.
name|getExpirationDate
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|closeTag
argument_list|(
name|LOCK_TAG
argument_list|)
expr_stmt|;
block|}
name|closeTag
argument_list|(
name|ENTRY_TAG
argument_list|)
expr_stmt|;
block|}
specifier|protected
name|String
name|getHeaderName
parameter_list|()
block|{
return|return
name|LISTS_TAG
return|;
block|}
comment|/**      * Compares two objects.      *       * @param  o1 the first object to compare      * @param  o2 the second object to compare      * @return    0 if objects are equal; -1 if<code>o1</code> is       *<span class="javakeyword">null</span> or if both       *<code>o1</code> and<code>o2</code> are<b>SVNDirEntry</b>       *            objects and the relative path of the first object is       *            lexicographically less than that of the second one; 1 otherwise       */
specifier|public
name|int
name|compare
parameter_list|(
name|Object
name|o1
parameter_list|,
name|Object
name|o2
parameter_list|)
block|{
if|if
condition|(
name|o1
operator|==
name|o2
condition|)
block|{
return|return
literal|0
return|;
block|}
name|SVNDirEntry
name|e1
init|=
operator|(
name|SVNDirEntry
operator|)
name|o1
decl_stmt|;
name|SVNDirEntry
name|e2
init|=
operator|(
name|SVNDirEntry
operator|)
name|o2
decl_stmt|;
if|if
condition|(
name|e1
operator|==
literal|null
condition|)
block|{
return|return
operator|-
literal|1
return|;
block|}
if|else if
condition|(
name|e2
operator|==
literal|null
condition|)
block|{
return|return
literal|1
return|;
block|}
return|return
name|SVNPathUtil
operator|.
name|PATH_COMPARATOR
operator|.
name|compare
argument_list|(
name|e1
operator|.
name|getRelativePath
argument_list|()
argument_list|,
name|e2
operator|.
name|getRelativePath
argument_list|()
argument_list|)
return|;
block|}
block|}
end_class

end_unit

