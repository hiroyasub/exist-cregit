begin_unit|revision:1.0.0;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * ====================================================================  * Copyright (c) 2004-2010 TMate Software Ltd.  All rights reserved.  *  * This software is licensed as described in the file COPYING, which  * you should have received as part of this distribution.  The terms  * are also available at http://svnkit.com/license.html  * If newer versions of this license are posted there, you may use a  * newer version instead, at your option.  * ====================================================================  */
end_comment

begin_package
package|package
name|org
operator|.
name|exist
operator|.
name|versioning
operator|.
name|svn
operator|.
name|internal
operator|.
name|wc
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|File
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Arrays
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collection
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collections
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Comparator
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Iterator
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|StringTokenizer
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|TreeMap
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|versioning
operator|.
name|svn
operator|.
name|internal
operator|.
name|wc
operator|.
name|admin
operator|.
name|SVNAdminArea
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|versioning
operator|.
name|svn
operator|.
name|internal
operator|.
name|wc
operator|.
name|admin
operator|.
name|SVNEntry
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|versioning
operator|.
name|svn
operator|.
name|internal
operator|.
name|wc
operator|.
name|admin
operator|.
name|SVNVersionedProperties
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|versioning
operator|.
name|svn
operator|.
name|internal
operator|.
name|wc
operator|.
name|admin
operator|.
name|SVNWCAccess
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|versioning
operator|.
name|svn
operator|.
name|wc
operator|.
name|ISVNEventHandler
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|versioning
operator|.
name|svn
operator|.
name|wc
operator|.
name|SVNCommitItem
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|versioning
operator|.
name|svn
operator|.
name|wc
operator|.
name|SVNEvent
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|versioning
operator|.
name|svn
operator|.
name|wc
operator|.
name|SVNStatus
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|versioning
operator|.
name|svn
operator|.
name|wc
operator|.
name|SVNStatusClient
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|versioning
operator|.
name|svn
operator|.
name|wc
operator|.
name|SVNStatusType
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|versioning
operator|.
name|svn
operator|.
name|wc
operator|.
name|SVNTreeConflictDescription
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|versioning
operator|.
name|svn
operator|.
name|wc
operator|.
name|SVNWCUtil
import|;
end_import

begin_import
import|import
name|org
operator|.
name|tmatesoft
operator|.
name|svn
operator|.
name|core
operator|.
name|SVNCancelException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|tmatesoft
operator|.
name|svn
operator|.
name|core
operator|.
name|SVNDepth
import|;
end_import

begin_import
import|import
name|org
operator|.
name|tmatesoft
operator|.
name|svn
operator|.
name|core
operator|.
name|SVNErrorCode
import|;
end_import

begin_import
import|import
name|org
operator|.
name|tmatesoft
operator|.
name|svn
operator|.
name|core
operator|.
name|SVNErrorMessage
import|;
end_import

begin_import
import|import
name|org
operator|.
name|tmatesoft
operator|.
name|svn
operator|.
name|core
operator|.
name|SVNException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|tmatesoft
operator|.
name|svn
operator|.
name|core
operator|.
name|SVNNodeKind
import|;
end_import

begin_import
import|import
name|org
operator|.
name|tmatesoft
operator|.
name|svn
operator|.
name|core
operator|.
name|SVNProperties
import|;
end_import

begin_import
import|import
name|org
operator|.
name|tmatesoft
operator|.
name|svn
operator|.
name|core
operator|.
name|SVNProperty
import|;
end_import

begin_import
import|import
name|org
operator|.
name|tmatesoft
operator|.
name|svn
operator|.
name|core
operator|.
name|SVNURL
import|;
end_import

begin_import
import|import
name|org
operator|.
name|tmatesoft
operator|.
name|svn
operator|.
name|core
operator|.
name|internal
operator|.
name|util
operator|.
name|SVNEncodingUtil
import|;
end_import

begin_import
import|import
name|org
operator|.
name|tmatesoft
operator|.
name|svn
operator|.
name|core
operator|.
name|internal
operator|.
name|util
operator|.
name|SVNHashMap
import|;
end_import

begin_import
import|import
name|org
operator|.
name|tmatesoft
operator|.
name|svn
operator|.
name|core
operator|.
name|internal
operator|.
name|util
operator|.
name|SVNHashSet
import|;
end_import

begin_import
import|import
name|org
operator|.
name|tmatesoft
operator|.
name|svn
operator|.
name|core
operator|.
name|internal
operator|.
name|util
operator|.
name|SVNPathUtil
import|;
end_import

begin_import
import|import
name|org
operator|.
name|tmatesoft
operator|.
name|svn
operator|.
name|core
operator|.
name|internal
operator|.
name|util
operator|.
name|SVNURLUtil
import|;
end_import

begin_import
import|import
name|org
operator|.
name|tmatesoft
operator|.
name|svn
operator|.
name|core
operator|.
name|internal
operator|.
name|wc
operator|.
name|ISVNCommitPathHandler
import|;
end_import

begin_import
import|import
name|org
operator|.
name|tmatesoft
operator|.
name|svn
operator|.
name|core
operator|.
name|io
operator|.
name|ISVNEditor
import|;
end_import

begin_import
import|import
name|org
operator|.
name|tmatesoft
operator|.
name|svn
operator|.
name|core
operator|.
name|wc
operator|.
name|ISVNCommitParameters
import|;
end_import

begin_import
import|import
name|org
operator|.
name|tmatesoft
operator|.
name|svn
operator|.
name|core
operator|.
name|wc
operator|.
name|SVNRevision
import|;
end_import

begin_import
import|import
name|org
operator|.
name|tmatesoft
operator|.
name|svn
operator|.
name|util
operator|.
name|SVNLogType
import|;
end_import

begin_comment
comment|/**  * @version 1.3  * @author  TMate Software Ltd.  */
end_comment

begin_class
specifier|public
class|class
name|SVNCommitUtil
block|{
specifier|public
specifier|static
specifier|final
name|Comparator
name|FILE_COMPARATOR
init|=
operator|new
name|Comparator
argument_list|()
block|{
specifier|public
name|int
name|compare
parameter_list|(
name|Object
name|o1
parameter_list|,
name|Object
name|o2
parameter_list|)
block|{
if|if
condition|(
name|o1
operator|==
literal|null
condition|)
block|{
return|return
operator|-
literal|1
return|;
block|}
if|else if
condition|(
name|o2
operator|==
literal|null
condition|)
block|{
return|return
literal|1
return|;
block|}
if|else if
condition|(
name|o1
operator|==
name|o2
condition|)
block|{
return|return
literal|0
return|;
block|}
name|File
name|f1
init|=
operator|(
name|File
operator|)
name|o1
decl_stmt|;
name|File
name|f2
init|=
operator|(
name|File
operator|)
name|o2
decl_stmt|;
return|return
name|f1
operator|.
name|getPath
argument_list|()
operator|.
name|compareTo
argument_list|(
name|f2
operator|.
name|getPath
argument_list|()
argument_list|)
return|;
block|}
block|}
decl_stmt|;
specifier|public
specifier|static
name|void
name|driveCommitEditor
parameter_list|(
name|ISVNCommitPathHandler
name|handler
parameter_list|,
name|Collection
name|paths
parameter_list|,
name|ISVNEditor
name|editor
parameter_list|,
name|long
name|revision
parameter_list|)
throws|throws
name|SVNException
block|{
if|if
condition|(
name|paths
operator|==
literal|null
operator|||
name|paths
operator|.
name|isEmpty
argument_list|()
operator|||
name|handler
operator|==
literal|null
operator|||
name|editor
operator|==
literal|null
condition|)
block|{
return|return;
block|}
name|String
index|[]
name|pathsArray
init|=
operator|(
name|String
index|[]
operator|)
name|paths
operator|.
name|toArray
argument_list|(
operator|new
name|String
index|[
name|paths
operator|.
name|size
argument_list|()
index|]
argument_list|)
decl_stmt|;
name|Arrays
operator|.
name|sort
argument_list|(
name|pathsArray
argument_list|,
name|SVNPathUtil
operator|.
name|PATH_COMPARATOR
argument_list|)
expr_stmt|;
name|int
name|index
init|=
literal|0
decl_stmt|;
name|int
name|depth
init|=
literal|0
decl_stmt|;
name|String
name|lastPath
init|=
literal|null
decl_stmt|;
if|if
condition|(
literal|""
operator|.
name|equals
argument_list|(
name|pathsArray
index|[
name|index
index|]
argument_list|)
condition|)
block|{
name|handler
operator|.
name|handleCommitPath
argument_list|(
literal|""
argument_list|,
name|editor
argument_list|)
expr_stmt|;
name|lastPath
operator|=
name|pathsArray
index|[
name|index
index|]
expr_stmt|;
name|index
operator|++
expr_stmt|;
block|}
else|else
block|{
name|editor
operator|.
name|openRoot
argument_list|(
name|revision
argument_list|)
expr_stmt|;
block|}
name|depth
operator|++
expr_stmt|;
for|for
control|(
init|;
name|index
operator|<
name|pathsArray
operator|.
name|length
condition|;
name|index
operator|++
control|)
block|{
name|String
name|commitPath
init|=
name|pathsArray
index|[
name|index
index|]
decl_stmt|;
comment|//            if (!SVNPathUtil.isCanonical(commitPath)) {
comment|//                SVNErrorMessage err = SVNErrorMessage.create(SVNErrorCode.UNKNOWN,
comment|//                        "Assertion failed in  SVNCommitUtil.driveCommitEditor(): path ''{0}'' is not canonical",
comment|//                        commitPath);
comment|//                SVNErrorManager.error(err, SVNLogType.DEFAULT);
comment|//            }
name|String
name|commonAncestor
init|=
name|lastPath
operator|==
literal|null
operator|||
literal|""
operator|.
name|equals
argument_list|(
name|lastPath
argument_list|)
condition|?
literal|""
else|:
name|SVNPathUtil
operator|.
name|getCommonPathAncestor
argument_list|(
name|commitPath
argument_list|,
name|lastPath
argument_list|)
decl_stmt|;
if|if
condition|(
name|lastPath
operator|!=
literal|null
condition|)
block|{
while|while
condition|(
operator|!
name|lastPath
operator|.
name|equals
argument_list|(
name|commonAncestor
argument_list|)
condition|)
block|{
name|editor
operator|.
name|closeDir
argument_list|()
expr_stmt|;
name|depth
operator|--
expr_stmt|;
if|if
condition|(
name|lastPath
operator|.
name|lastIndexOf
argument_list|(
literal|'/'
argument_list|)
operator|>=
literal|0
condition|)
block|{
name|lastPath
operator|=
name|lastPath
operator|.
name|substring
argument_list|(
literal|0
argument_list|,
name|lastPath
operator|.
name|lastIndexOf
argument_list|(
literal|'/'
argument_list|)
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|lastPath
operator|=
literal|""
expr_stmt|;
block|}
block|}
block|}
name|String
name|relativeCommitPath
init|=
name|commitPath
operator|.
name|substring
argument_list|(
name|commonAncestor
operator|.
name|length
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|relativeCommitPath
operator|.
name|startsWith
argument_list|(
literal|"/"
argument_list|)
condition|)
block|{
name|relativeCommitPath
operator|=
name|relativeCommitPath
operator|.
name|substring
argument_list|(
literal|1
argument_list|)
expr_stmt|;
block|}
for|for
control|(
name|StringTokenizer
name|tokens
init|=
operator|new
name|StringTokenizer
argument_list|(
name|relativeCommitPath
argument_list|,
literal|"/"
argument_list|)
init|;
name|tokens
operator|.
name|hasMoreTokens
argument_list|()
condition|;
control|)
block|{
name|String
name|token
init|=
name|tokens
operator|.
name|nextToken
argument_list|()
decl_stmt|;
name|commonAncestor
operator|=
literal|""
operator|.
name|equals
argument_list|(
name|commonAncestor
argument_list|)
condition|?
name|token
else|:
name|commonAncestor
operator|+
literal|"/"
operator|+
name|token
expr_stmt|;
if|if
condition|(
operator|!
name|commonAncestor
operator|.
name|equals
argument_list|(
name|commitPath
argument_list|)
condition|)
block|{
name|editor
operator|.
name|openDir
argument_list|(
name|commonAncestor
argument_list|,
name|revision
argument_list|)
expr_stmt|;
name|depth
operator|++
expr_stmt|;
block|}
else|else
block|{
break|break;
block|}
block|}
name|boolean
name|closeDir
init|=
name|handler
operator|.
name|handleCommitPath
argument_list|(
name|commitPath
argument_list|,
name|editor
argument_list|)
decl_stmt|;
if|if
condition|(
name|closeDir
condition|)
block|{
name|lastPath
operator|=
name|commitPath
expr_stmt|;
name|depth
operator|++
expr_stmt|;
block|}
else|else
block|{
if|if
condition|(
name|index
operator|+
literal|1
operator|<
name|pathsArray
operator|.
name|length
condition|)
block|{
name|lastPath
operator|=
name|SVNPathUtil
operator|.
name|removeTail
argument_list|(
name|commitPath
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|lastPath
operator|=
name|commitPath
expr_stmt|;
block|}
block|}
block|}
while|while
condition|(
name|depth
operator|>
literal|0
condition|)
block|{
name|editor
operator|.
name|closeDir
argument_list|()
expr_stmt|;
name|depth
operator|--
expr_stmt|;
block|}
block|}
specifier|public
specifier|static
name|SVNWCAccess
name|createCommitWCAccess
parameter_list|(
name|File
index|[]
name|paths
parameter_list|,
name|SVNDepth
name|depth
parameter_list|,
name|boolean
name|force
parameter_list|,
name|Collection
name|relativePaths
parameter_list|,
specifier|final
name|SVNStatusClient
name|statusClient
parameter_list|)
throws|throws
name|SVNException
block|{
name|String
index|[]
name|validatedPaths
init|=
operator|new
name|String
index|[
name|paths
operator|.
name|length
index|]
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|paths
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
name|statusClient
operator|.
name|checkCancelled
argument_list|()
expr_stmt|;
name|File
name|file
init|=
name|paths
index|[
name|i
index|]
decl_stmt|;
name|validatedPaths
index|[
name|i
index|]
operator|=
name|file
operator|.
name|getAbsolutePath
argument_list|()
operator|.
name|replace
argument_list|(
name|File
operator|.
name|separatorChar
argument_list|,
literal|'/'
argument_list|)
expr_stmt|;
block|}
name|String
name|rootPath
init|=
name|SVNPathUtil
operator|.
name|condencePaths
argument_list|(
name|validatedPaths
argument_list|,
name|relativePaths
argument_list|,
name|depth
operator|==
name|SVNDepth
operator|.
name|INFINITY
argument_list|)
decl_stmt|;
if|if
condition|(
name|rootPath
operator|==
literal|null
condition|)
block|{
return|return
literal|null
return|;
block|}
name|boolean
name|lockAll
init|=
literal|false
decl_stmt|;
if|if
condition|(
name|depth
operator|==
name|SVNDepth
operator|.
name|FILES
operator|||
name|depth
operator|==
name|SVNDepth
operator|.
name|IMMEDIATES
condition|)
block|{
for|for
control|(
name|Iterator
name|relPathsIter
init|=
name|relativePaths
operator|.
name|iterator
argument_list|()
init|;
name|relPathsIter
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|String
name|relPath
init|=
operator|(
name|String
operator|)
name|relPathsIter
operator|.
name|next
argument_list|()
decl_stmt|;
if|if
condition|(
literal|""
operator|.
name|equals
argument_list|(
name|relPath
argument_list|)
condition|)
block|{
name|lockAll
operator|=
literal|true
expr_stmt|;
break|break;
block|}
block|}
block|}
name|File
name|baseDir
init|=
operator|new
name|File
argument_list|(
name|rootPath
argument_list|)
operator|.
name|getAbsoluteFile
argument_list|()
decl_stmt|;
name|rootPath
operator|=
name|baseDir
operator|.
name|getAbsolutePath
argument_list|()
operator|.
name|replace
argument_list|(
name|File
operator|.
name|separatorChar
argument_list|,
literal|'/'
argument_list|)
expr_stmt|;
name|Collection
name|dirsToLock
init|=
operator|new
name|SVNHashSet
argument_list|()
decl_stmt|;
comment|// relative paths to lock.
name|Collection
name|dirsToLockRecursively
init|=
operator|new
name|SVNHashSet
argument_list|()
decl_stmt|;
if|if
condition|(
name|relativePaths
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|statusClient
operator|.
name|checkCancelled
argument_list|()
expr_stmt|;
name|String
name|target
init|=
name|SVNWCManager
operator|.
name|getActualTarget
argument_list|(
name|baseDir
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
literal|""
operator|.
name|equals
argument_list|(
name|target
argument_list|)
condition|)
block|{
comment|// we will have to lock target as well, not only base dir.
name|SVNFileType
name|targetType
init|=
name|SVNFileType
operator|.
name|getType
argument_list|(
operator|new
name|File
argument_list|(
name|rootPath
argument_list|)
argument_list|)
decl_stmt|;
name|relativePaths
operator|.
name|add
argument_list|(
name|target
argument_list|)
expr_stmt|;
if|if
condition|(
name|targetType
operator|==
name|SVNFileType
operator|.
name|DIRECTORY
condition|)
block|{
comment|// lock recursively if forced and copied...
if|if
condition|(
name|depth
operator|==
name|SVNDepth
operator|.
name|INFINITY
operator|||
name|depth
operator|==
name|SVNDepth
operator|.
name|IMMEDIATES
operator|||
operator|(
name|force
operator|&&
name|isRecursiveCommitForced
argument_list|(
name|baseDir
argument_list|)
operator|)
condition|)
block|{
comment|// dir is copied, include children
name|dirsToLockRecursively
operator|.
name|add
argument_list|(
name|target
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|dirsToLock
operator|.
name|add
argument_list|(
name|target
argument_list|)
expr_stmt|;
block|}
block|}
name|baseDir
operator|=
name|baseDir
operator|.
name|getParentFile
argument_list|()
expr_stmt|;
block|}
else|else
block|{
name|lockAll
operator|=
literal|true
expr_stmt|;
block|}
block|}
if|else if
condition|(
operator|!
name|lockAll
condition|)
block|{
name|baseDir
operator|=
name|adjustRelativePaths
argument_list|(
name|baseDir
argument_list|,
name|relativePaths
argument_list|)
expr_stmt|;
comment|// there are multiple paths.
for|for
control|(
name|Iterator
name|targets
init|=
name|relativePaths
operator|.
name|iterator
argument_list|()
init|;
name|targets
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|statusClient
operator|.
name|checkCancelled
argument_list|()
expr_stmt|;
name|String
name|targetPath
init|=
operator|(
name|String
operator|)
name|targets
operator|.
name|next
argument_list|()
decl_stmt|;
name|File
name|targetFile
init|=
operator|new
name|File
argument_list|(
name|baseDir
argument_list|,
name|targetPath
argument_list|)
decl_stmt|;
name|SVNFileType
name|targetKind
init|=
name|SVNFileType
operator|.
name|getType
argument_list|(
name|targetFile
argument_list|)
decl_stmt|;
if|if
condition|(
name|targetKind
operator|==
name|SVNFileType
operator|.
name|DIRECTORY
condition|)
block|{
if|if
condition|(
name|depth
operator|==
name|SVNDepth
operator|.
name|INFINITY
operator|||
name|depth
operator|==
name|SVNDepth
operator|.
name|IMMEDIATES
operator|||
operator|(
name|force
operator|&&
name|isRecursiveCommitForced
argument_list|(
name|targetFile
argument_list|)
operator|)
condition|)
block|{
name|dirsToLockRecursively
operator|.
name|add
argument_list|(
name|targetPath
argument_list|)
expr_stmt|;
block|}
if|else if
condition|(
operator|!
name|targetFile
operator|.
name|equals
argument_list|(
name|baseDir
argument_list|)
condition|)
block|{
name|dirsToLock
operator|.
name|add
argument_list|(
name|targetPath
argument_list|)
expr_stmt|;
block|}
block|}
if|if
condition|(
operator|!
name|targetFile
operator|.
name|equals
argument_list|(
name|baseDir
argument_list|)
condition|)
block|{
name|targetFile
operator|=
name|targetFile
operator|.
name|getParentFile
argument_list|()
expr_stmt|;
name|targetPath
operator|=
name|SVNPathUtil
operator|.
name|removeTail
argument_list|(
name|targetPath
argument_list|)
expr_stmt|;
while|while
condition|(
name|targetFile
operator|!=
literal|null
operator|&&
operator|!
name|targetFile
operator|.
name|equals
argument_list|(
name|baseDir
argument_list|)
operator|&&
operator|!
name|dirsToLock
operator|.
name|contains
argument_list|(
name|targetPath
argument_list|)
condition|)
block|{
name|dirsToLock
operator|.
name|add
argument_list|(
name|targetPath
argument_list|)
expr_stmt|;
name|targetPath
operator|=
name|SVNPathUtil
operator|.
name|removeTail
argument_list|(
name|targetPath
argument_list|)
expr_stmt|;
name|targetFile
operator|=
name|targetFile
operator|.
name|getParentFile
argument_list|()
expr_stmt|;
block|}
block|}
block|}
block|}
name|SVNWCAccess
name|baseAccess
init|=
name|SVNWCAccess
operator|.
name|newInstance
argument_list|(
operator|new
name|ISVNEventHandler
argument_list|()
block|{
specifier|public
name|void
name|handleEvent
parameter_list|(
name|SVNEvent
name|event
parameter_list|,
name|double
name|progress
parameter_list|)
throws|throws
name|SVNException
block|{
block|}
specifier|public
name|void
name|checkCancelled
parameter_list|()
throws|throws
name|SVNCancelException
block|{
name|statusClient
operator|.
name|checkCancelled
argument_list|()
expr_stmt|;
block|}
block|}
argument_list|)
decl_stmt|;
name|baseAccess
operator|.
name|setOptions
argument_list|(
name|statusClient
operator|.
name|getOptions
argument_list|()
argument_list|)
expr_stmt|;
try|try
block|{
name|baseAccess
operator|.
name|open
argument_list|(
name|baseDir
argument_list|,
literal|true
argument_list|,
name|lockAll
condition|?
name|SVNWCAccess
operator|.
name|INFINITE_DEPTH
else|:
literal|0
argument_list|)
expr_stmt|;
name|statusClient
operator|.
name|checkCancelled
argument_list|()
expr_stmt|;
name|dirsToLock
operator|=
operator|new
name|ArrayList
argument_list|(
name|dirsToLock
argument_list|)
expr_stmt|;
name|dirsToLockRecursively
operator|=
operator|new
name|ArrayList
argument_list|(
name|dirsToLockRecursively
argument_list|)
expr_stmt|;
name|Collections
operator|.
name|sort
argument_list|(
operator|(
name|List
operator|)
name|dirsToLock
argument_list|,
name|SVNPathUtil
operator|.
name|PATH_COMPARATOR
argument_list|)
expr_stmt|;
name|Collections
operator|.
name|sort
argument_list|(
operator|(
name|List
operator|)
name|dirsToLockRecursively
argument_list|,
name|SVNPathUtil
operator|.
name|PATH_COMPARATOR
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|lockAll
condition|)
block|{
name|List
name|uniqueDirsToLockRecursively
init|=
operator|new
name|ArrayList
argument_list|()
decl_stmt|;
name|uniqueDirsToLockRecursively
operator|.
name|addAll
argument_list|(
name|dirsToLockRecursively
argument_list|)
expr_stmt|;
name|Map
name|processedPaths
init|=
operator|new
name|SVNHashMap
argument_list|()
decl_stmt|;
for|for
control|(
name|Iterator
name|ps
init|=
name|uniqueDirsToLockRecursively
operator|.
name|iterator
argument_list|()
init|;
name|ps
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|String
name|pathToLock
init|=
operator|(
name|String
operator|)
name|ps
operator|.
name|next
argument_list|()
decl_stmt|;
if|if
condition|(
name|processedPaths
operator|.
name|containsKey
argument_list|(
name|pathToLock
argument_list|)
condition|)
block|{
comment|//remove any duplicates
name|ps
operator|.
name|remove
argument_list|()
expr_stmt|;
continue|continue;
block|}
name|processedPaths
operator|.
name|put
argument_list|(
name|pathToLock
argument_list|,
name|pathToLock
argument_list|)
expr_stmt|;
for|for
control|(
name|Iterator
name|existing
init|=
name|dirsToLockRecursively
operator|.
name|iterator
argument_list|()
init|;
name|existing
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|String
name|existingPath
init|=
operator|(
name|String
operator|)
name|existing
operator|.
name|next
argument_list|()
decl_stmt|;
if|if
condition|(
name|pathToLock
operator|.
name|startsWith
argument_list|(
name|existingPath
operator|+
literal|"/"
argument_list|)
condition|)
block|{
comment|// child of other path
name|ps
operator|.
name|remove
argument_list|()
expr_stmt|;
break|break;
block|}
block|}
block|}
name|Collections
operator|.
name|sort
argument_list|(
name|uniqueDirsToLockRecursively
argument_list|,
name|SVNPathUtil
operator|.
name|PATH_COMPARATOR
argument_list|)
expr_stmt|;
name|dirsToLockRecursively
operator|=
name|uniqueDirsToLockRecursively
expr_stmt|;
name|removeRedundantPaths
argument_list|(
name|dirsToLockRecursively
argument_list|,
name|dirsToLock
argument_list|)
expr_stmt|;
for|for
control|(
name|Iterator
name|nonRecusivePaths
init|=
name|dirsToLock
operator|.
name|iterator
argument_list|()
init|;
name|nonRecusivePaths
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|statusClient
operator|.
name|checkCancelled
argument_list|()
expr_stmt|;
name|String
name|path
init|=
operator|(
name|String
operator|)
name|nonRecusivePaths
operator|.
name|next
argument_list|()
decl_stmt|;
name|File
name|pathFile
init|=
operator|new
name|File
argument_list|(
name|baseDir
argument_list|,
name|path
argument_list|)
decl_stmt|;
name|baseAccess
operator|.
name|open
argument_list|(
name|pathFile
argument_list|,
literal|true
argument_list|,
literal|0
argument_list|)
expr_stmt|;
block|}
for|for
control|(
name|Iterator
name|recusivePaths
init|=
name|dirsToLockRecursively
operator|.
name|iterator
argument_list|()
init|;
name|recusivePaths
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|statusClient
operator|.
name|checkCancelled
argument_list|()
expr_stmt|;
name|String
name|path
init|=
operator|(
name|String
operator|)
name|recusivePaths
operator|.
name|next
argument_list|()
decl_stmt|;
name|File
name|pathFile
init|=
operator|new
name|File
argument_list|(
name|baseDir
argument_list|,
name|path
argument_list|)
decl_stmt|;
name|baseAccess
operator|.
name|open
argument_list|(
name|pathFile
argument_list|,
literal|true
argument_list|,
name|SVNWCAccess
operator|.
name|INFINITE_DEPTH
argument_list|)
expr_stmt|;
block|}
block|}
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|paths
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
name|statusClient
operator|.
name|checkCancelled
argument_list|()
expr_stmt|;
name|File
name|path
init|=
name|paths
index|[
name|i
index|]
operator|.
name|getAbsoluteFile
argument_list|()
decl_stmt|;
name|path
operator|=
name|path
operator|.
name|getAbsoluteFile
argument_list|()
expr_stmt|;
try|try
block|{
name|baseAccess
operator|.
name|probeRetrieve
argument_list|(
name|path
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|SVNException
name|e
parameter_list|)
block|{
name|SVNErrorMessage
name|err
init|=
name|e
operator|.
name|getErrorMessage
argument_list|()
operator|.
name|wrap
argument_list|(
literal|"Are all the targets part of the same working copy?"
argument_list|)
decl_stmt|;
name|SVNErrorManager
operator|.
name|error
argument_list|(
name|err
argument_list|,
name|SVNLogType
operator|.
name|WC
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|depth
operator|!=
name|SVNDepth
operator|.
name|INFINITY
operator|&&
operator|!
name|force
condition|)
block|{
if|if
condition|(
name|SVNFileType
operator|.
name|getType
argument_list|(
name|path
argument_list|)
operator|==
name|SVNFileType
operator|.
name|DIRECTORY
condition|)
block|{
comment|// TODO replace with direct SVNStatusEditor call.
name|SVNStatus
name|status
init|=
name|statusClient
operator|.
name|doStatus
argument_list|(
name|path
argument_list|,
literal|false
argument_list|)
decl_stmt|;
if|if
condition|(
name|status
operator|!=
literal|null
operator|&&
operator|(
name|status
operator|.
name|getContentsStatus
argument_list|()
operator|==
name|SVNStatusType
operator|.
name|STATUS_DELETED
operator|||
name|status
operator|.
name|getContentsStatus
argument_list|()
operator|==
name|SVNStatusType
operator|.
name|STATUS_REPLACED
operator|)
condition|)
block|{
name|SVNErrorMessage
name|err
init|=
name|SVNErrorMessage
operator|.
name|create
argument_list|(
name|SVNErrorCode
operator|.
name|UNSUPPORTED_FEATURE
argument_list|,
literal|"Cannot non-recursively commit a directory deletion"
argument_list|)
decl_stmt|;
name|SVNErrorManager
operator|.
name|error
argument_list|(
name|err
argument_list|,
name|SVNLogType
operator|.
name|WC
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
comment|// if commit is non-recursive and forced, remove those child dirs
comment|// that were not explicitly added but are explicitly copied. ufff.
if|if
condition|(
name|depth
operator|!=
name|SVNDepth
operator|.
name|INFINITY
operator|&&
name|force
condition|)
block|{
name|SVNAdminArea
index|[]
name|lockedDirs
init|=
name|baseAccess
operator|.
name|getAdminAreas
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|lockedDirs
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
name|statusClient
operator|.
name|checkCancelled
argument_list|()
expr_stmt|;
name|SVNAdminArea
name|dir
init|=
name|lockedDirs
index|[
name|i
index|]
decl_stmt|;
if|if
condition|(
name|dir
operator|==
literal|null
condition|)
block|{
comment|// could be null for missing, but known dir.
continue|continue;
block|}
name|SVNEntry
name|rootEntry
init|=
name|baseAccess
operator|.
name|getEntry
argument_list|(
name|dir
operator|.
name|getRoot
argument_list|()
argument_list|,
literal|true
argument_list|)
decl_stmt|;
if|if
condition|(
name|rootEntry
operator|.
name|getCopyFromURL
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|File
name|dirRoot
init|=
name|dir
operator|.
name|getRoot
argument_list|()
decl_stmt|;
name|boolean
name|keep
init|=
literal|false
decl_stmt|;
for|for
control|(
name|int
name|j
init|=
literal|0
init|;
name|j
operator|<
name|paths
operator|.
name|length
condition|;
name|j
operator|++
control|)
block|{
if|if
condition|(
name|dirRoot
operator|.
name|equals
argument_list|(
name|paths
index|[
name|j
index|]
argument_list|)
condition|)
block|{
name|keep
operator|=
literal|true
expr_stmt|;
break|break;
block|}
block|}
if|if
condition|(
operator|!
name|keep
condition|)
block|{
name|baseAccess
operator|.
name|closeAdminArea
argument_list|(
name|dir
operator|.
name|getRoot
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
block|}
catch|catch
parameter_list|(
name|SVNException
name|e
parameter_list|)
block|{
name|baseAccess
operator|.
name|close
argument_list|()
expr_stmt|;
throw|throw
name|e
throw|;
block|}
name|baseAccess
operator|.
name|setAnchor
argument_list|(
name|baseDir
argument_list|)
expr_stmt|;
return|return
name|baseAccess
return|;
block|}
specifier|public
specifier|static
name|SVNWCAccess
index|[]
name|createCommitWCAccess2
parameter_list|(
name|File
index|[]
name|paths
parameter_list|,
name|SVNDepth
name|depth
parameter_list|,
name|boolean
name|force
parameter_list|,
name|Map
name|relativePathsMap
parameter_list|,
name|SVNStatusClient
name|statusClient
parameter_list|)
throws|throws
name|SVNException
block|{
name|Map
name|rootsMap
init|=
operator|new
name|SVNHashMap
argument_list|()
decl_stmt|;
comment|// wc root file -> paths to be committed (paths).
name|Map
name|localRootsCache
init|=
operator|new
name|SVNHashMap
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|paths
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
name|statusClient
operator|.
name|checkCancelled
argument_list|()
expr_stmt|;
name|File
name|path
init|=
name|paths
index|[
name|i
index|]
decl_stmt|;
name|File
name|rootPath
init|=
name|path
decl_stmt|;
if|if
condition|(
name|rootPath
operator|.
name|isFile
argument_list|()
condition|)
block|{
name|rootPath
operator|=
name|rootPath
operator|.
name|getParentFile
argument_list|()
expr_stmt|;
block|}
name|File
name|wcRoot
init|=
name|localRootsCache
operator|.
name|containsKey
argument_list|(
name|rootPath
argument_list|)
condition|?
operator|(
name|File
operator|)
name|localRootsCache
operator|.
name|get
argument_list|(
name|rootPath
argument_list|)
else|:
name|SVNWCUtil
operator|.
name|getWorkingCopyRoot
argument_list|(
name|rootPath
argument_list|,
literal|true
argument_list|)
decl_stmt|;
name|localRootsCache
operator|.
name|put
argument_list|(
name|path
argument_list|,
name|wcRoot
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|rootsMap
operator|.
name|containsKey
argument_list|(
name|wcRoot
argument_list|)
condition|)
block|{
name|rootsMap
operator|.
name|put
argument_list|(
name|wcRoot
argument_list|,
operator|new
name|ArrayList
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|Collection
name|wcPaths
init|=
operator|(
name|Collection
operator|)
name|rootsMap
operator|.
name|get
argument_list|(
name|wcRoot
argument_list|)
decl_stmt|;
name|wcPaths
operator|.
name|add
argument_list|(
name|path
argument_list|)
expr_stmt|;
block|}
name|Collection
name|result
init|=
operator|new
name|ArrayList
argument_list|()
decl_stmt|;
try|try
block|{
for|for
control|(
name|Iterator
name|roots
init|=
name|rootsMap
operator|.
name|keySet
argument_list|()
operator|.
name|iterator
argument_list|()
init|;
name|roots
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|statusClient
operator|.
name|checkCancelled
argument_list|()
expr_stmt|;
name|File
name|root
init|=
operator|(
name|File
operator|)
name|roots
operator|.
name|next
argument_list|()
decl_stmt|;
name|Collection
name|filesList
init|=
operator|(
name|Collection
operator|)
name|rootsMap
operator|.
name|get
argument_list|(
name|root
argument_list|)
decl_stmt|;
name|File
index|[]
name|filesArray
init|=
operator|(
name|File
index|[]
operator|)
name|filesList
operator|.
name|toArray
argument_list|(
operator|new
name|File
index|[
name|filesList
operator|.
name|size
argument_list|()
index|]
argument_list|)
decl_stmt|;
name|Collection
name|relativePaths
init|=
operator|new
name|ArrayList
argument_list|()
decl_stmt|;
name|SVNWCAccess
name|wcAccess
init|=
name|createCommitWCAccess
argument_list|(
name|filesArray
argument_list|,
name|depth
argument_list|,
name|force
argument_list|,
name|relativePaths
argument_list|,
name|statusClient
argument_list|)
decl_stmt|;
name|relativePathsMap
operator|.
name|put
argument_list|(
name|wcAccess
argument_list|,
name|relativePaths
argument_list|)
expr_stmt|;
name|result
operator|.
name|add
argument_list|(
name|wcAccess
argument_list|)
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
name|SVNException
name|e
parameter_list|)
block|{
for|for
control|(
name|Iterator
name|wcAccesses
init|=
name|result
operator|.
name|iterator
argument_list|()
init|;
name|wcAccesses
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|SVNWCAccess
name|wcAccess
init|=
operator|(
name|SVNWCAccess
operator|)
name|wcAccesses
operator|.
name|next
argument_list|()
decl_stmt|;
name|wcAccess
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
throw|throw
name|e
throw|;
block|}
return|return
operator|(
name|SVNWCAccess
index|[]
operator|)
name|result
operator|.
name|toArray
argument_list|(
operator|new
name|SVNWCAccess
index|[
name|result
operator|.
name|size
argument_list|()
index|]
argument_list|)
return|;
block|}
specifier|public
specifier|static
name|SVNCommitItem
index|[]
name|harvestCommitables
parameter_list|(
name|SVNWCAccess
name|baseAccess
parameter_list|,
name|Collection
name|paths
parameter_list|,
name|Map
name|lockTokens
parameter_list|,
name|boolean
name|justLocked
parameter_list|,
name|SVNDepth
name|depth
parameter_list|,
name|boolean
name|force
parameter_list|,
name|Collection
name|changelists
parameter_list|,
name|ISVNCommitParameters
name|params
parameter_list|)
throws|throws
name|SVNException
block|{
name|Map
name|commitables
init|=
operator|new
name|TreeMap
argument_list|(
name|FILE_COMPARATOR
argument_list|)
decl_stmt|;
name|Collection
name|danglers
init|=
operator|new
name|SVNHashSet
argument_list|()
decl_stmt|;
name|Iterator
name|targets
init|=
name|paths
operator|.
name|iterator
argument_list|()
decl_stmt|;
name|boolean
name|isRecursionForced
init|=
literal|false
decl_stmt|;
do|do
block|{
name|String
name|target
init|=
name|targets
operator|.
name|hasNext
argument_list|()
condition|?
operator|(
name|String
operator|)
name|targets
operator|.
name|next
argument_list|()
else|:
literal|""
decl_stmt|;
name|baseAccess
operator|.
name|checkCancelled
argument_list|()
expr_stmt|;
comment|// get entry for target
name|File
name|targetFile
init|=
operator|new
name|File
argument_list|(
name|baseAccess
operator|.
name|getAnchor
argument_list|()
argument_list|,
name|target
argument_list|)
decl_stmt|;
name|String
name|parentPath
init|=
name|SVNPathUtil
operator|.
name|removeTail
argument_list|(
name|target
argument_list|)
decl_stmt|;
name|SVNAdminArea
name|dir
init|=
name|baseAccess
operator|.
name|probeRetrieve
argument_list|(
name|targetFile
argument_list|)
decl_stmt|;
name|SVNEntry
name|entry
init|=
literal|null
decl_stmt|;
try|try
block|{
name|entry
operator|=
name|baseAccess
operator|.
name|getVersionedEntry
argument_list|(
name|targetFile
argument_list|,
literal|false
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|SVNException
name|e
parameter_list|)
block|{
if|if
condition|(
name|e
operator|.
name|getErrorMessage
argument_list|()
operator|!=
literal|null
operator|&&
name|e
operator|.
name|getErrorMessage
argument_list|()
operator|.
name|getErrorCode
argument_list|()
operator|==
name|SVNErrorCode
operator|.
name|ENTRY_NOT_FOUND
condition|)
block|{
name|SVNTreeConflictDescription
name|tc
init|=
name|baseAccess
operator|.
name|getTreeConflict
argument_list|(
name|targetFile
argument_list|)
decl_stmt|;
if|if
condition|(
name|tc
operator|!=
literal|null
condition|)
block|{
name|SVNErrorMessage
name|err
init|=
name|SVNErrorMessage
operator|.
name|create
argument_list|(
name|SVNErrorCode
operator|.
name|WC_FOUND_CONFLICT
argument_list|,
literal|"Aborting commit: ''{0}'' remains in conflict"
argument_list|,
name|targetFile
argument_list|)
decl_stmt|;
name|SVNErrorManager
operator|.
name|error
argument_list|(
name|err
argument_list|,
name|SVNLogType
operator|.
name|WC
argument_list|)
expr_stmt|;
block|}
block|}
throw|throw
name|e
throw|;
block|}
name|String
name|url
init|=
literal|null
decl_stmt|;
if|if
condition|(
name|entry
operator|.
name|getURL
argument_list|()
operator|==
literal|null
condition|)
block|{
comment|// it could be missing directory.
if|if
condition|(
operator|!
name|entry
operator|.
name|isThisDir
argument_list|()
operator|&&
name|entry
operator|.
name|getName
argument_list|()
operator|!=
literal|null
operator|&&
name|entry
operator|.
name|isDirectory
argument_list|()
operator|&&
operator|!
operator|(
name|entry
operator|.
name|isScheduledForAddition
argument_list|()
operator|||
name|entry
operator|.
name|isScheduledForReplacement
argument_list|()
operator|)
operator|&&
name|SVNFileType
operator|.
name|getType
argument_list|(
name|targetFile
argument_list|)
operator|==
name|SVNFileType
operator|.
name|NONE
condition|)
block|{
name|File
name|parentDir
init|=
name|targetFile
operator|.
name|getParentFile
argument_list|()
decl_stmt|;
if|if
condition|(
name|parentDir
operator|!=
literal|null
condition|)
block|{
name|SVNEntry
name|parentEntry
init|=
name|baseAccess
operator|.
name|getEntry
argument_list|(
name|parentDir
argument_list|,
literal|false
argument_list|)
decl_stmt|;
if|if
condition|(
name|parentEntry
operator|!=
literal|null
condition|)
block|{
name|url
operator|=
name|SVNPathUtil
operator|.
name|append
argument_list|(
name|parentEntry
operator|.
name|getURL
argument_list|()
argument_list|,
name|SVNEncodingUtil
operator|.
name|uriEncode
argument_list|(
name|entry
operator|.
name|getName
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
block|}
if|if
condition|(
name|url
operator|==
literal|null
condition|)
block|{
name|SVNErrorMessage
name|err
init|=
name|SVNErrorMessage
operator|.
name|create
argument_list|(
name|SVNErrorCode
operator|.
name|WC_CORRUPT
argument_list|,
literal|"Entry for ''{0}'' has no URL"
argument_list|,
name|targetFile
argument_list|)
decl_stmt|;
name|SVNErrorManager
operator|.
name|error
argument_list|(
name|err
argument_list|,
name|SVNLogType
operator|.
name|WC
argument_list|)
expr_stmt|;
block|}
block|}
else|else
block|{
name|url
operator|=
name|entry
operator|.
name|getURL
argument_list|()
expr_stmt|;
block|}
name|SVNEntry
name|parentEntry
init|=
literal|null
decl_stmt|;
if|if
condition|(
name|entry
operator|.
name|isScheduledForAddition
argument_list|()
operator|||
name|entry
operator|.
name|isScheduledForReplacement
argument_list|()
condition|)
block|{
comment|// get parent (for file or dir-> get ""), otherwise open parent
comment|// dir and get "".
try|try
block|{
name|baseAccess
operator|.
name|retrieve
argument_list|(
name|targetFile
operator|.
name|getParentFile
argument_list|()
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|SVNException
name|e
parameter_list|)
block|{
if|if
condition|(
name|e
operator|.
name|getErrorMessage
argument_list|()
operator|.
name|getErrorCode
argument_list|()
operator|==
name|SVNErrorCode
operator|.
name|WC_NOT_LOCKED
condition|)
block|{
name|baseAccess
operator|.
name|open
argument_list|(
name|targetFile
operator|.
name|getParentFile
argument_list|()
argument_list|,
literal|true
argument_list|,
literal|0
argument_list|)
expr_stmt|;
block|}
else|else
block|{
throw|throw
name|e
throw|;
block|}
block|}
name|parentEntry
operator|=
name|baseAccess
operator|.
name|getEntry
argument_list|(
name|targetFile
operator|.
name|getParentFile
argument_list|()
argument_list|,
literal|false
argument_list|)
expr_stmt|;
if|if
condition|(
name|parentEntry
operator|==
literal|null
condition|)
block|{
name|SVNErrorMessage
name|err
init|=
name|SVNErrorMessage
operator|.
name|create
argument_list|(
name|SVNErrorCode
operator|.
name|WC_CORRUPT
argument_list|,
literal|"''{0}'' is scheduled for addition within unversioned parent"
argument_list|,
name|targetFile
argument_list|)
decl_stmt|;
name|SVNErrorManager
operator|.
name|error
argument_list|(
name|err
argument_list|,
name|SVNLogType
operator|.
name|WC
argument_list|)
expr_stmt|;
block|}
if|else if
condition|(
name|parentEntry
operator|.
name|isScheduledForAddition
argument_list|()
operator|||
name|parentEntry
operator|.
name|isScheduledForReplacement
argument_list|()
condition|)
block|{
name|danglers
operator|.
name|add
argument_list|(
name|targetFile
operator|.
name|getParentFile
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
name|SVNDepth
name|forcedDepth
init|=
name|depth
decl_stmt|;
if|if
condition|(
name|entry
operator|.
name|isCopied
argument_list|()
operator|&&
name|entry
operator|.
name|getSchedule
argument_list|()
operator|==
literal|null
condition|)
block|{
comment|// if commit is forced => we could collect this entry, assuming
comment|// that its parent is already included into commit
comment|// it will be later removed from commit anyway.
if|if
condition|(
operator|!
name|force
condition|)
block|{
name|SVNErrorMessage
name|err
init|=
name|SVNErrorMessage
operator|.
name|create
argument_list|(
name|SVNErrorCode
operator|.
name|ILLEGAL_TARGET
argument_list|,
literal|"Entry for ''{0}''"
operator|+
literal|" is marked as 'copied' but is not itself scheduled\n"
operator|+
literal|"for addition.  Perhaps you're committing a target that is\n"
operator|+
literal|"inside an unversioned (or not-yet-versioned) directory?"
argument_list|,
name|targetFile
argument_list|)
decl_stmt|;
name|SVNErrorManager
operator|.
name|error
argument_list|(
name|err
argument_list|,
name|SVNLogType
operator|.
name|WC
argument_list|)
expr_stmt|;
block|}
else|else
block|{
comment|// just do not process this item as in case of recursive
comment|// commit.
continue|continue;
block|}
block|}
if|else if
condition|(
name|entry
operator|.
name|isCopied
argument_list|()
operator|&&
name|entry
operator|.
name|isScheduledForAddition
argument_list|()
condition|)
block|{
if|if
condition|(
name|force
condition|)
block|{
name|isRecursionForced
operator|=
name|depth
operator|!=
name|SVNDepth
operator|.
name|INFINITY
expr_stmt|;
name|forcedDepth
operator|=
name|SVNDepth
operator|.
name|INFINITY
expr_stmt|;
block|}
block|}
if|else if
condition|(
name|entry
operator|.
name|isScheduledForDeletion
argument_list|()
operator|&&
name|force
operator|&&
name|depth
operator|!=
name|SVNDepth
operator|.
name|INFINITY
condition|)
block|{
comment|// if parent is also deleted -> skip this entry
name|File
name|parentFile
init|=
name|targetFile
operator|.
name|getParentFile
argument_list|()
decl_stmt|;
name|parentEntry
operator|=
name|baseAccess
operator|.
name|getEntry
argument_list|(
name|parentFile
argument_list|,
literal|false
argument_list|)
expr_stmt|;
if|if
condition|(
name|parentEntry
operator|==
literal|null
condition|)
block|{
try|try
block|{
name|baseAccess
operator|.
name|retrieve
argument_list|(
name|parentFile
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|SVNException
name|e
parameter_list|)
block|{
if|if
condition|(
name|e
operator|.
name|getErrorMessage
argument_list|()
operator|.
name|getErrorCode
argument_list|()
operator|==
name|SVNErrorCode
operator|.
name|WC_NOT_LOCKED
condition|)
block|{
name|baseAccess
operator|.
name|open
argument_list|(
name|parentFile
argument_list|,
literal|true
argument_list|,
literal|0
argument_list|)
expr_stmt|;
block|}
else|else
block|{
throw|throw
name|e
throw|;
block|}
block|}
name|parentEntry
operator|=
name|baseAccess
operator|.
name|getEntry
argument_list|(
name|parentFile
argument_list|,
literal|false
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|parentEntry
operator|!=
literal|null
operator|&&
name|parentEntry
operator|.
name|isScheduledForDeletion
argument_list|()
operator|&&
name|paths
operator|.
name|contains
argument_list|(
name|parentPath
argument_list|)
condition|)
block|{
continue|continue;
block|}
comment|// this recursion is not considered as "forced", all children should be
comment|// deleted anyway.
name|forcedDepth
operator|=
name|SVNDepth
operator|.
name|INFINITY
expr_stmt|;
block|}
comment|// check ancestors for tc.
name|File
name|ancestorPath
init|=
name|dir
operator|.
name|getRoot
argument_list|()
decl_stmt|;
name|SVNWCAccess
name|localAccess
init|=
name|SVNWCAccess
operator|.
name|newInstance
argument_list|(
literal|null
argument_list|)
decl_stmt|;
name|localAccess
operator|.
name|open
argument_list|(
name|ancestorPath
argument_list|,
literal|false
argument_list|,
literal|0
argument_list|)
expr_stmt|;
try|try
block|{
while|while
condition|(
literal|true
condition|)
block|{
name|boolean
name|isRoot
init|=
name|localAccess
operator|.
name|isWCRoot
argument_list|(
name|ancestorPath
argument_list|)
decl_stmt|;
if|if
condition|(
name|isRoot
condition|)
block|{
break|break;
block|}
name|File
name|pPath
init|=
name|ancestorPath
operator|.
name|getParentFile
argument_list|()
decl_stmt|;
name|localAccess
operator|.
name|open
argument_list|(
name|pPath
argument_list|,
literal|false
argument_list|,
literal|0
argument_list|)
expr_stmt|;
if|if
condition|(
name|localAccess
operator|.
name|hasTreeConflict
argument_list|(
name|ancestorPath
argument_list|)
condition|)
block|{
name|SVNErrorMessage
name|err
init|=
name|SVNErrorMessage
operator|.
name|create
argument_list|(
name|SVNErrorCode
operator|.
name|WC_FOUND_CONFLICT
argument_list|,
literal|"Aborting commit: ''{0}'' remains in tree-conflict"
argument_list|,
name|ancestorPath
argument_list|)
decl_stmt|;
name|SVNErrorManager
operator|.
name|error
argument_list|(
name|err
argument_list|,
name|SVNLogType
operator|.
name|WC
argument_list|)
expr_stmt|;
block|}
name|ancestorPath
operator|=
name|pPath
expr_stmt|;
block|}
block|}
finally|finally
block|{
name|localAccess
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
comment|//            String relativePath = entry.getKind() == SVNNodeKind.DIR ? target : SVNPathUtil.removeTail(target);
name|harvestCommitables
argument_list|(
name|commitables
argument_list|,
name|dir
argument_list|,
name|targetFile
argument_list|,
name|parentEntry
argument_list|,
name|entry
argument_list|,
name|url
argument_list|,
literal|null
argument_list|,
literal|false
argument_list|,
literal|false
argument_list|,
name|justLocked
argument_list|,
name|lockTokens
argument_list|,
name|forcedDepth
argument_list|,
name|isRecursionForced
argument_list|,
name|changelists
argument_list|,
name|params
argument_list|,
literal|null
argument_list|)
expr_stmt|;
block|}
do|while
condition|(
name|targets
operator|.
name|hasNext
argument_list|()
condition|)
do|;
for|for
control|(
name|Iterator
name|ds
init|=
name|danglers
operator|.
name|iterator
argument_list|()
init|;
name|ds
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|baseAccess
operator|.
name|checkCancelled
argument_list|()
expr_stmt|;
name|File
name|file
init|=
operator|(
name|File
operator|)
name|ds
operator|.
name|next
argument_list|()
decl_stmt|;
if|if
condition|(
operator|!
name|commitables
operator|.
name|containsKey
argument_list|(
name|file
argument_list|)
condition|)
block|{
name|SVNErrorMessage
name|err
init|=
name|SVNErrorMessage
operator|.
name|create
argument_list|(
name|SVNErrorCode
operator|.
name|ILLEGAL_TARGET
argument_list|,
literal|"''{0}'' is not under version control\n"
operator|+
literal|"and is not part of the commit, \n"
operator|+
literal|"yet its child is part of the commit"
argument_list|,
name|file
argument_list|)
decl_stmt|;
name|SVNErrorManager
operator|.
name|error
argument_list|(
name|err
argument_list|,
name|SVNLogType
operator|.
name|WC
argument_list|)
expr_stmt|;
block|}
block|}
comment|// filter out file externals that were not explicitly specified.
name|filterOutFileExternals
argument_list|(
name|paths
argument_list|,
name|commitables
argument_list|,
name|baseAccess
argument_list|)
expr_stmt|;
if|if
condition|(
name|isRecursionForced
condition|)
block|{
comment|// if commit is non-recursive and forced and there are elements included into commit
comment|// that not only 'copied' but also has local mods (modified or deleted), remove those items?
comment|// or not?
for|for
control|(
name|Iterator
name|items
init|=
name|commitables
operator|.
name|values
argument_list|()
operator|.
name|iterator
argument_list|()
init|;
name|items
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|baseAccess
operator|.
name|checkCancelled
argument_list|()
expr_stmt|;
name|SVNCommitItem
name|item
init|=
operator|(
name|SVNCommitItem
operator|)
name|items
operator|.
name|next
argument_list|()
decl_stmt|;
if|if
condition|(
name|item
operator|.
name|isDeleted
argument_list|()
condition|)
block|{
comment|// to detect deleted copied items.
name|File
name|file
init|=
name|item
operator|.
name|getFile
argument_list|()
decl_stmt|;
if|if
condition|(
name|item
operator|.
name|getKind
argument_list|()
operator|==
name|SVNNodeKind
operator|.
name|DIR
condition|)
block|{
if|if
condition|(
operator|!
name|file
operator|.
name|exists
argument_list|()
condition|)
block|{
continue|continue;
block|}
block|}
else|else
block|{
name|String
name|name
init|=
name|SVNPathUtil
operator|.
name|tail
argument_list|(
name|item
operator|.
name|getPath
argument_list|()
argument_list|)
decl_stmt|;
name|SVNAdminArea
name|dir
init|=
name|baseAccess
operator|.
name|retrieve
argument_list|(
name|item
operator|.
name|getFile
argument_list|()
operator|.
name|getParentFile
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|dir
operator|.
name|getBaseFile
argument_list|(
name|name
argument_list|,
literal|false
argument_list|)
operator|.
name|exists
argument_list|()
condition|)
block|{
continue|continue;
block|}
block|}
block|}
if|if
condition|(
name|item
operator|.
name|isContentsModified
argument_list|()
operator|||
name|item
operator|.
name|isDeleted
argument_list|()
operator|||
name|item
operator|.
name|isPropertiesModified
argument_list|()
condition|)
block|{
comment|// if item was not explicitly included into commit, then just make it 'added'
comment|// but do not remove that are marked as 'deleted'
name|String
name|itemPath
init|=
name|item
operator|.
name|getPath
argument_list|()
decl_stmt|;
if|if
condition|(
operator|!
name|paths
operator|.
name|contains
argument_list|(
name|itemPath
argument_list|)
condition|)
block|{
name|items
operator|.
name|remove
argument_list|()
expr_stmt|;
block|}
block|}
block|}
block|}
return|return
operator|(
name|SVNCommitItem
index|[]
operator|)
name|commitables
operator|.
name|values
argument_list|()
operator|.
name|toArray
argument_list|(
operator|new
name|SVNCommitItem
index|[
name|commitables
operator|.
name|values
argument_list|()
operator|.
name|size
argument_list|()
index|]
argument_list|)
return|;
block|}
specifier|public
specifier|static
name|void
name|filterOutFileExternals
parameter_list|(
name|Collection
name|explicitPaths
parameter_list|,
name|Map
name|commitables
parameter_list|,
name|SVNWCAccess
name|baseAccess
parameter_list|)
throws|throws
name|SVNException
block|{
for|for
control|(
name|Iterator
name|items
init|=
name|commitables
operator|.
name|values
argument_list|()
operator|.
name|iterator
argument_list|()
init|;
name|items
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|baseAccess
operator|.
name|checkCancelled
argument_list|()
expr_stmt|;
name|SVNCommitItem
name|item
init|=
operator|(
name|SVNCommitItem
operator|)
name|items
operator|.
name|next
argument_list|()
decl_stmt|;
name|SVNEntry
name|entry
init|=
name|baseAccess
operator|.
name|getEntry
argument_list|(
name|item
operator|.
name|getFile
argument_list|()
argument_list|,
literal|false
argument_list|)
decl_stmt|;
if|if
condition|(
name|entry
operator|!=
literal|null
operator|&&
name|entry
operator|.
name|isFile
argument_list|()
operator|&&
name|entry
operator|.
name|getExternalFilePath
argument_list|()
operator|!=
literal|null
condition|)
block|{
if|if
condition|(
operator|!
name|explicitPaths
operator|.
name|contains
argument_list|(
name|item
operator|.
name|getPath
argument_list|()
argument_list|)
condition|)
block|{
name|items
operator|.
name|remove
argument_list|()
expr_stmt|;
block|}
block|}
block|}
block|}
specifier|public
specifier|static
name|SVNURL
name|translateCommitables
parameter_list|(
name|SVNCommitItem
index|[]
name|items
parameter_list|,
name|Map
name|decodedPaths
parameter_list|)
throws|throws
name|SVNException
block|{
name|Map
name|itemsMap
init|=
operator|new
name|SVNHashMap
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|items
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
name|SVNCommitItem
name|item
init|=
name|items
index|[
name|i
index|]
decl_stmt|;
if|if
condition|(
name|itemsMap
operator|.
name|containsKey
argument_list|(
name|item
operator|.
name|getURL
argument_list|()
argument_list|)
condition|)
block|{
name|SVNCommitItem
name|oldItem
init|=
operator|(
name|SVNCommitItem
operator|)
name|itemsMap
operator|.
name|get
argument_list|(
name|item
operator|.
name|getURL
argument_list|()
argument_list|)
decl_stmt|;
name|SVNErrorMessage
name|err
init|=
name|SVNErrorMessage
operator|.
name|create
argument_list|(
name|SVNErrorCode
operator|.
name|CLIENT_DUPLICATE_COMMIT_URL
argument_list|,
literal|"Cannot commit both ''{0}'' and ''{1}'' as they refer to the same URL"
argument_list|,
operator|new
name|Object
index|[]
block|{
name|item
operator|.
name|getFile
argument_list|()
block|,
name|oldItem
operator|.
name|getFile
argument_list|()
block|}
argument_list|)
decl_stmt|;
name|SVNErrorManager
operator|.
name|error
argument_list|(
name|err
argument_list|,
name|SVNLogType
operator|.
name|WC
argument_list|)
expr_stmt|;
block|}
name|itemsMap
operator|.
name|put
argument_list|(
name|item
operator|.
name|getURL
argument_list|()
argument_list|,
name|item
argument_list|)
expr_stmt|;
block|}
name|Iterator
name|urls
init|=
name|itemsMap
operator|.
name|keySet
argument_list|()
operator|.
name|iterator
argument_list|()
decl_stmt|;
name|SVNURL
name|baseURL
init|=
operator|(
name|SVNURL
operator|)
name|urls
operator|.
name|next
argument_list|()
decl_stmt|;
while|while
condition|(
name|urls
operator|.
name|hasNext
argument_list|()
condition|)
block|{
name|SVNURL
name|url
init|=
operator|(
name|SVNURL
operator|)
name|urls
operator|.
name|next
argument_list|()
decl_stmt|;
name|baseURL
operator|=
name|SVNURLUtil
operator|.
name|getCommonURLAncestor
argument_list|(
name|baseURL
argument_list|,
name|url
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|itemsMap
operator|.
name|containsKey
argument_list|(
name|baseURL
argument_list|)
condition|)
block|{
name|SVNCommitItem
name|root
init|=
operator|(
name|SVNCommitItem
operator|)
name|itemsMap
operator|.
name|get
argument_list|(
name|baseURL
argument_list|)
decl_stmt|;
if|if
condition|(
name|root
operator|.
name|getKind
argument_list|()
operator|!=
name|SVNNodeKind
operator|.
name|DIR
condition|)
block|{
name|baseURL
operator|=
name|baseURL
operator|.
name|removePathTail
argument_list|()
expr_stmt|;
block|}
if|else if
condition|(
name|root
operator|.
name|getKind
argument_list|()
operator|==
name|SVNNodeKind
operator|.
name|DIR
operator|&&
operator|(
name|root
operator|.
name|isAdded
argument_list|()
operator|||
name|root
operator|.
name|isDeleted
argument_list|()
operator|||
name|root
operator|.
name|isCopied
argument_list|()
operator|||
name|root
operator|.
name|isLocked
argument_list|()
operator|)
condition|)
block|{
name|baseURL
operator|=
name|baseURL
operator|.
name|removePathTail
argument_list|()
expr_stmt|;
block|}
block|}
if|if
condition|(
name|baseURL
operator|==
literal|null
condition|)
block|{
name|SVNErrorMessage
name|err
init|=
name|SVNErrorMessage
operator|.
name|create
argument_list|(
name|SVNErrorCode
operator|.
name|BAD_URL
argument_list|,
literal|"Cannot compute base URL for commit operation"
argument_list|)
decl_stmt|;
name|SVNErrorManager
operator|.
name|error
argument_list|(
name|err
argument_list|,
name|SVNLogType
operator|.
name|WC
argument_list|)
expr_stmt|;
block|}
for|for
control|(
name|Iterator
name|iterator
init|=
name|itemsMap
operator|.
name|keySet
argument_list|()
operator|.
name|iterator
argument_list|()
init|;
name|iterator
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|SVNURL
name|url
init|=
operator|(
name|SVNURL
operator|)
name|iterator
operator|.
name|next
argument_list|()
decl_stmt|;
name|SVNCommitItem
name|item
init|=
operator|(
name|SVNCommitItem
operator|)
name|itemsMap
operator|.
name|get
argument_list|(
name|url
argument_list|)
decl_stmt|;
name|String
name|realPath
init|=
name|url
operator|.
name|equals
argument_list|(
name|baseURL
argument_list|)
condition|?
literal|""
else|:
name|SVNPathUtil
operator|.
name|getRelativePath
argument_list|(
name|baseURL
operator|.
name|getPath
argument_list|()
argument_list|,
name|url
operator|.
name|getPath
argument_list|()
argument_list|)
decl_stmt|;
name|decodedPaths
operator|.
name|put
argument_list|(
name|realPath
argument_list|,
name|item
argument_list|)
expr_stmt|;
block|}
return|return
name|baseURL
return|;
block|}
specifier|public
specifier|static
name|Map
name|translateLockTokens
parameter_list|(
name|Map
name|lockTokens
parameter_list|,
name|String
name|baseURL
parameter_list|)
block|{
name|Map
name|translatedLocks
init|=
operator|new
name|TreeMap
argument_list|()
decl_stmt|;
for|for
control|(
name|Iterator
name|urls
init|=
name|lockTokens
operator|.
name|keySet
argument_list|()
operator|.
name|iterator
argument_list|()
init|;
name|urls
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|String
name|url
init|=
operator|(
name|String
operator|)
name|urls
operator|.
name|next
argument_list|()
decl_stmt|;
name|String
name|token
init|=
operator|(
name|String
operator|)
name|lockTokens
operator|.
name|get
argument_list|(
name|url
argument_list|)
decl_stmt|;
name|url
operator|=
name|url
operator|.
name|equals
argument_list|(
name|baseURL
argument_list|)
condition|?
literal|""
else|:
name|url
operator|.
name|substring
argument_list|(
name|baseURL
operator|.
name|length
argument_list|()
operator|+
literal|1
argument_list|)
expr_stmt|;
name|translatedLocks
operator|.
name|put
argument_list|(
name|SVNEncodingUtil
operator|.
name|uriDecode
argument_list|(
name|url
argument_list|)
argument_list|,
name|token
argument_list|)
expr_stmt|;
block|}
name|lockTokens
operator|.
name|clear
argument_list|()
expr_stmt|;
name|lockTokens
operator|.
name|putAll
argument_list|(
name|translatedLocks
argument_list|)
expr_stmt|;
return|return
name|lockTokens
return|;
block|}
specifier|public
specifier|static
name|void
name|harvestCommitables
parameter_list|(
name|Map
name|commitables
parameter_list|,
name|SVNAdminArea
name|dir
parameter_list|,
name|File
name|path
parameter_list|,
name|SVNEntry
name|parentEntry
parameter_list|,
name|SVNEntry
name|entry
parameter_list|,
name|String
name|url
parameter_list|,
name|String
name|copyFromURL
parameter_list|,
name|boolean
name|copyMode
parameter_list|,
name|boolean
name|addsOnly
parameter_list|,
name|boolean
name|justLocked
parameter_list|,
name|Map
name|lockTokens
parameter_list|,
name|SVNDepth
name|depth
parameter_list|,
name|boolean
name|forcedRecursion
parameter_list|,
name|Collection
name|changelists
parameter_list|,
name|ISVNCommitParameters
name|params
parameter_list|,
name|Map
name|pathsToExternalsProperties
parameter_list|)
throws|throws
name|SVNException
block|{
if|if
condition|(
name|commitables
operator|.
name|containsKey
argument_list|(
name|path
argument_list|)
condition|)
block|{
return|return;
block|}
if|if
condition|(
name|dir
operator|!=
literal|null
operator|&&
name|dir
operator|.
name|getWCAccess
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|dir
operator|.
name|getWCAccess
argument_list|()
operator|.
name|checkCancelled
argument_list|()
expr_stmt|;
block|}
name|long
name|cfRevision
init|=
name|entry
operator|.
name|getCopyFromRevision
argument_list|()
decl_stmt|;
name|String
name|cfURL
init|=
literal|null
decl_stmt|;
if|if
condition|(
name|entry
operator|.
name|getKind
argument_list|()
operator|!=
name|SVNNodeKind
operator|.
name|DIR
operator|&&
name|entry
operator|.
name|getKind
argument_list|()
operator|!=
name|SVNNodeKind
operator|.
name|FILE
condition|)
block|{
name|SVNErrorMessage
name|err
init|=
name|SVNErrorMessage
operator|.
name|create
argument_list|(
name|SVNErrorCode
operator|.
name|NODE_UNKNOWN_KIND
argument_list|,
literal|"Unknown entry kind for ''{0}''"
argument_list|,
name|path
argument_list|)
decl_stmt|;
name|SVNErrorManager
operator|.
name|error
argument_list|(
name|err
argument_list|,
name|SVNLogType
operator|.
name|WC
argument_list|)
expr_stmt|;
block|}
name|SVNFileType
name|fileType
init|=
name|SVNFileType
operator|.
name|getType
argument_list|(
name|path
argument_list|)
decl_stmt|;
if|if
condition|(
name|fileType
operator|==
name|SVNFileType
operator|.
name|UNKNOWN
condition|)
block|{
name|SVNErrorMessage
name|err
init|=
name|SVNErrorMessage
operator|.
name|create
argument_list|(
name|SVNErrorCode
operator|.
name|NODE_UNKNOWN_KIND
argument_list|,
literal|"Unknown entry kind for ''{0}''"
argument_list|,
name|path
argument_list|)
decl_stmt|;
name|SVNErrorManager
operator|.
name|error
argument_list|(
name|err
argument_list|,
name|SVNLogType
operator|.
name|WC
argument_list|)
expr_stmt|;
block|}
name|String
name|specialPropertyValue
init|=
name|dir
operator|.
name|getProperties
argument_list|(
name|entry
operator|.
name|getName
argument_list|()
argument_list|)
operator|.
name|getStringPropertyValue
argument_list|(
name|SVNProperty
operator|.
name|SPECIAL
argument_list|)
decl_stmt|;
name|boolean
name|specialFile
init|=
name|fileType
operator|==
name|SVNFileType
operator|.
name|SYMLINK
decl_stmt|;
if|if
condition|(
name|SVNFileType
operator|.
name|isSymlinkSupportEnabled
argument_list|()
condition|)
block|{
if|if
condition|(
operator|(
operator|(
name|specialPropertyValue
operator|==
literal|null
operator|&&
name|specialFile
operator|)
operator|||
operator|(
name|SVNFileUtil
operator|.
name|symlinksSupported
argument_list|()
operator|&&
name|specialPropertyValue
operator|!=
literal|null
operator|&&
operator|!
name|specialFile
operator|)
operator|)
operator|&&
name|fileType
operator|!=
name|SVNFileType
operator|.
name|NONE
condition|)
block|{
name|SVNErrorMessage
name|err
init|=
name|SVNErrorMessage
operator|.
name|create
argument_list|(
name|SVNErrorCode
operator|.
name|NODE_UNEXPECTED_KIND
argument_list|,
literal|"Entry ''{0}'' has unexpectedly changed special status"
argument_list|,
name|path
argument_list|)
decl_stmt|;
name|SVNErrorManager
operator|.
name|error
argument_list|(
name|err
argument_list|,
name|SVNLogType
operator|.
name|WC
argument_list|)
expr_stmt|;
block|}
block|}
name|boolean
name|propConflicts
decl_stmt|;
name|boolean
name|textConflicts
init|=
literal|false
decl_stmt|;
name|boolean
name|treeConflicts
init|=
name|dir
operator|.
name|hasTreeConflict
argument_list|(
name|entry
operator|.
name|getName
argument_list|()
argument_list|)
decl_stmt|;
name|SVNAdminArea
name|entries
init|=
literal|null
decl_stmt|;
if|if
condition|(
name|entry
operator|.
name|getKind
argument_list|()
operator|==
name|SVNNodeKind
operator|.
name|DIR
condition|)
block|{
name|SVNAdminArea
name|childDir
init|=
literal|null
decl_stmt|;
try|try
block|{
name|childDir
operator|=
name|dir
operator|.
name|getWCAccess
argument_list|()
operator|.
name|retrieve
argument_list|(
name|dir
operator|.
name|getFile
argument_list|(
name|entry
operator|.
name|getName
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|SVNException
name|e
parameter_list|)
block|{
if|if
condition|(
name|e
operator|.
name|getErrorMessage
argument_list|()
operator|.
name|getErrorCode
argument_list|()
operator|==
name|SVNErrorCode
operator|.
name|WC_NOT_LOCKED
condition|)
block|{
name|childDir
operator|=
literal|null
expr_stmt|;
block|}
else|else
block|{
throw|throw
name|e
throw|;
block|}
block|}
if|if
condition|(
name|childDir
operator|!=
literal|null
operator|&&
name|childDir
operator|.
name|entries
argument_list|(
literal|true
argument_list|)
operator|!=
literal|null
condition|)
block|{
name|entries
operator|=
name|childDir
expr_stmt|;
if|if
condition|(
name|entries
operator|.
name|getEntry
argument_list|(
literal|""
argument_list|,
literal|false
argument_list|)
operator|!=
literal|null
condition|)
block|{
name|entry
operator|=
name|entries
operator|.
name|getEntry
argument_list|(
literal|""
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|dir
operator|=
name|childDir
expr_stmt|;
block|}
block|}
name|propConflicts
operator|=
name|dir
operator|.
name|hasPropConflict
argument_list|(
name|entry
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
name|Map
name|tcs
init|=
name|entry
operator|.
name|getTreeConflicts
argument_list|()
decl_stmt|;
for|for
control|(
name|Iterator
name|keys
init|=
name|tcs
operator|.
name|keySet
argument_list|()
operator|.
name|iterator
argument_list|()
init|;
name|keys
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|File
name|entryPath
init|=
operator|(
name|File
operator|)
name|keys
operator|.
name|next
argument_list|()
decl_stmt|;
name|SVNTreeConflictDescription
name|tc
init|=
operator|(
name|SVNTreeConflictDescription
operator|)
name|tcs
operator|.
name|get
argument_list|(
name|entryPath
argument_list|)
decl_stmt|;
if|if
condition|(
name|tc
operator|.
name|getNodeKind
argument_list|()
operator|==
name|SVNNodeKind
operator|.
name|DIR
operator|&&
name|depth
operator|==
name|SVNDepth
operator|.
name|FILES
condition|)
block|{
continue|continue;
block|}
name|SVNEntry
name|conflictingEntry
init|=
literal|null
decl_stmt|;
if|if
condition|(
name|tc
operator|.
name|getNodeKind
argument_list|()
operator|==
name|SVNNodeKind
operator|.
name|DIR
condition|)
block|{
comment|// get dir admin area and root entry
name|SVNAdminArea
name|childConflictingDir
init|=
name|dir
operator|.
name|getWCAccess
argument_list|()
operator|.
name|getAdminArea
argument_list|(
name|entryPath
argument_list|)
decl_stmt|;
if|if
condition|(
name|childConflictingDir
operator|!=
literal|null
condition|)
block|{
name|conflictingEntry
operator|=
name|childConflictingDir
operator|.
name|getEntry
argument_list|(
literal|""
argument_list|,
literal|true
argument_list|)
expr_stmt|;
block|}
name|conflictingEntry
operator|=
name|childDir
operator|.
name|getEntry
argument_list|(
name|entryPath
operator|.
name|getName
argument_list|()
argument_list|,
literal|true
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|conflictingEntry
operator|=
name|dir
operator|.
name|getEntry
argument_list|(
name|entryPath
operator|.
name|getName
argument_list|()
argument_list|,
literal|true
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|changelists
operator|==
literal|null
operator|||
name|changelists
operator|.
name|isEmpty
argument_list|()
operator|||
operator|(
name|conflictingEntry
operator|!=
literal|null
operator|&&
name|SVNWCAccess
operator|.
name|matchesChangeList
argument_list|(
name|changelists
argument_list|,
name|conflictingEntry
argument_list|)
operator|)
condition|)
block|{
name|SVNErrorMessage
name|err
init|=
name|SVNErrorMessage
operator|.
name|create
argument_list|(
name|SVNErrorCode
operator|.
name|WC_FOUND_CONFLICT
argument_list|,
literal|"Aborting commit: ''{0}'' remains in conflict"
argument_list|,
name|path
argument_list|)
decl_stmt|;
name|SVNErrorManager
operator|.
name|error
argument_list|(
name|err
argument_list|,
name|SVNLogType
operator|.
name|WC
argument_list|)
expr_stmt|;
block|}
block|}
block|}
else|else
block|{
name|propConflicts
operator|=
name|dir
operator|.
name|hasPropConflict
argument_list|(
name|entry
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
name|textConflicts
operator|=
name|dir
operator|.
name|hasTextConflict
argument_list|(
name|entry
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|propConflicts
operator|||
name|textConflicts
operator|||
name|treeConflicts
condition|)
block|{
if|if
condition|(
name|SVNWCAccess
operator|.
name|matchesChangeList
argument_list|(
name|changelists
argument_list|,
name|entry
argument_list|)
condition|)
block|{
name|SVNErrorMessage
name|err
init|=
name|SVNErrorMessage
operator|.
name|create
argument_list|(
name|SVNErrorCode
operator|.
name|WC_FOUND_CONFLICT
argument_list|,
literal|"Aborting commit: ''{0}'' remains in conflict"
argument_list|,
name|path
argument_list|)
decl_stmt|;
name|SVNErrorManager
operator|.
name|error
argument_list|(
name|err
argument_list|,
name|SVNLogType
operator|.
name|WC
argument_list|)
expr_stmt|;
block|}
block|}
if|if
condition|(
name|entry
operator|.
name|getURL
argument_list|()
operator|!=
literal|null
operator|&&
operator|!
name|copyMode
condition|)
block|{
name|url
operator|=
name|entry
operator|.
name|getURL
argument_list|()
expr_stmt|;
block|}
name|boolean
name|commitDeletion
init|=
operator|!
name|addsOnly
operator|&&
operator|(
operator|(
name|entry
operator|.
name|isDeleted
argument_list|()
operator|&&
name|entry
operator|.
name|getSchedule
argument_list|()
operator|==
literal|null
operator|)
operator|||
name|entry
operator|.
name|isScheduledForDeletion
argument_list|()
operator|||
name|entry
operator|.
name|isScheduledForReplacement
argument_list|()
operator|)
decl_stmt|;
if|if
condition|(
operator|!
name|addsOnly
operator|&&
operator|!
name|commitDeletion
operator|&&
name|fileType
operator|==
name|SVNFileType
operator|.
name|NONE
operator|&&
name|params
operator|!=
literal|null
condition|)
block|{
name|ISVNCommitParameters
operator|.
name|Action
name|action
init|=
name|entry
operator|.
name|getKind
argument_list|()
operator|==
name|SVNNodeKind
operator|.
name|DIR
condition|?
name|params
operator|.
name|onMissingDirectory
argument_list|(
name|path
argument_list|)
else|:
name|params
operator|.
name|onMissingFile
argument_list|(
name|path
argument_list|)
decl_stmt|;
if|if
condition|(
name|action
operator|==
name|ISVNCommitParameters
operator|.
name|ERROR
condition|)
block|{
name|SVNErrorMessage
name|err
init|=
name|SVNErrorMessage
operator|.
name|create
argument_list|(
name|SVNErrorCode
operator|.
name|WC_NOT_LOCKED
argument_list|,
literal|"Working copy file ''{0}'' is missing"
argument_list|,
name|path
argument_list|)
decl_stmt|;
name|SVNErrorManager
operator|.
name|error
argument_list|(
name|err
argument_list|,
name|SVNLogType
operator|.
name|WC
argument_list|)
expr_stmt|;
block|}
if|else if
condition|(
name|action
operator|==
name|ISVNCommitParameters
operator|.
name|DELETE
condition|)
block|{
name|commitDeletion
operator|=
literal|true
expr_stmt|;
name|entry
operator|.
name|scheduleForDeletion
argument_list|()
expr_stmt|;
name|dir
operator|.
name|saveEntries
argument_list|(
literal|false
argument_list|)
expr_stmt|;
block|}
block|}
name|boolean
name|commitAddition
init|=
literal|false
decl_stmt|;
name|boolean
name|commitCopy
init|=
literal|false
decl_stmt|;
if|if
condition|(
name|entry
operator|.
name|isScheduledForAddition
argument_list|()
operator|||
name|entry
operator|.
name|isScheduledForReplacement
argument_list|()
condition|)
block|{
name|commitAddition
operator|=
literal|true
expr_stmt|;
if|if
condition|(
name|entry
operator|.
name|getCopyFromURL
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|cfURL
operator|=
name|entry
operator|.
name|getCopyFromURL
argument_list|()
expr_stmt|;
name|addsOnly
operator|=
literal|false
expr_stmt|;
name|commitCopy
operator|=
literal|true
expr_stmt|;
block|}
else|else
block|{
name|addsOnly
operator|=
literal|true
expr_stmt|;
block|}
block|}
if|if
condition|(
operator|(
name|entry
operator|.
name|isCopied
argument_list|()
operator|||
name|copyMode
operator|)
operator|&&
operator|!
name|entry
operator|.
name|isDeleted
argument_list|()
operator|&&
name|entry
operator|.
name|getSchedule
argument_list|()
operator|==
literal|null
condition|)
block|{
name|long
name|parentRevision
init|=
name|entry
operator|.
name|getRevision
argument_list|()
operator|-
literal|1
decl_stmt|;
name|boolean
name|switched
init|=
literal|false
decl_stmt|;
if|if
condition|(
name|entry
operator|!=
literal|null
operator|&&
name|parentEntry
operator|!=
literal|null
condition|)
block|{
name|switched
operator|=
operator|!
name|entry
operator|.
name|getURL
argument_list|()
operator|.
name|equals
argument_list|(
name|SVNPathUtil
operator|.
name|append
argument_list|(
name|parentEntry
operator|.
name|getURL
argument_list|()
argument_list|,
name|SVNEncodingUtil
operator|.
name|uriEncode
argument_list|(
name|path
operator|.
name|getName
argument_list|()
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
operator|!
name|switched
operator|&&
operator|!
name|dir
operator|.
name|getWCAccess
argument_list|()
operator|.
name|isWCRoot
argument_list|(
name|path
argument_list|)
condition|)
block|{
if|if
condition|(
name|parentEntry
operator|!=
literal|null
condition|)
block|{
name|parentRevision
operator|=
name|parentEntry
operator|.
name|getRevision
argument_list|()
expr_stmt|;
block|}
block|}
if|else if
condition|(
operator|!
name|copyMode
condition|)
block|{
name|SVNErrorMessage
name|err
init|=
name|SVNErrorMessage
operator|.
name|create
argument_list|(
name|SVNErrorCode
operator|.
name|WC_CORRUPT
argument_list|,
literal|"Did not expect ''{0}'' to be a working copy root"
argument_list|,
name|path
argument_list|)
decl_stmt|;
name|SVNErrorManager
operator|.
name|error
argument_list|(
name|err
argument_list|,
name|SVNLogType
operator|.
name|WC
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|parentRevision
operator|!=
name|entry
operator|.
name|getRevision
argument_list|()
condition|)
block|{
name|commitAddition
operator|=
literal|true
expr_stmt|;
name|commitCopy
operator|=
literal|true
expr_stmt|;
name|addsOnly
operator|=
literal|false
expr_stmt|;
name|cfRevision
operator|=
name|entry
operator|.
name|getRevision
argument_list|()
expr_stmt|;
if|if
condition|(
name|copyMode
condition|)
block|{
name|cfURL
operator|=
name|entry
operator|.
name|getURL
argument_list|()
expr_stmt|;
block|}
if|else if
condition|(
name|copyFromURL
operator|!=
literal|null
condition|)
block|{
name|cfURL
operator|=
name|copyFromURL
expr_stmt|;
block|}
else|else
block|{
name|SVNErrorMessage
name|err
init|=
name|SVNErrorMessage
operator|.
name|create
argument_list|(
name|SVNErrorCode
operator|.
name|BAD_URL
argument_list|,
literal|"Commit item ''{0}'' has copy flag but no copyfrom URL"
argument_list|,
name|path
argument_list|)
decl_stmt|;
name|SVNErrorManager
operator|.
name|error
argument_list|(
name|err
argument_list|,
name|SVNLogType
operator|.
name|WC
argument_list|)
expr_stmt|;
block|}
block|}
block|}
name|boolean
name|textModified
init|=
literal|false
decl_stmt|;
name|boolean
name|propsModified
init|=
literal|false
decl_stmt|;
name|boolean
name|commitLock
decl_stmt|;
if|if
condition|(
name|commitAddition
condition|)
block|{
name|SVNFileType
name|addedFileType
init|=
name|SVNFileType
operator|.
name|getType
argument_list|(
name|path
argument_list|)
decl_stmt|;
if|if
condition|(
name|addedFileType
operator|==
name|SVNFileType
operator|.
name|NONE
condition|)
block|{
name|SVNErrorMessage
name|err
init|=
name|SVNErrorMessage
operator|.
name|create
argument_list|(
name|SVNErrorCode
operator|.
name|WC_PATH_NOT_FOUND
argument_list|,
literal|"''{0}'' is scheduled for addition, but is missing"
argument_list|,
name|path
argument_list|)
decl_stmt|;
name|SVNErrorManager
operator|.
name|error
argument_list|(
name|err
argument_list|,
name|SVNLogType
operator|.
name|WC
argument_list|)
expr_stmt|;
block|}
name|SVNVersionedProperties
name|props
init|=
name|dir
operator|.
name|getProperties
argument_list|(
name|entry
operator|.
name|getName
argument_list|()
argument_list|)
decl_stmt|;
name|SVNVersionedProperties
name|baseProps
init|=
name|dir
operator|.
name|getBaseProperties
argument_list|(
name|entry
operator|.
name|getName
argument_list|()
argument_list|)
decl_stmt|;
name|SVNProperties
name|propDiff
init|=
literal|null
decl_stmt|;
if|if
condition|(
name|entry
operator|.
name|isScheduledForReplacement
argument_list|()
condition|)
block|{
name|propDiff
operator|=
name|props
operator|.
name|asMap
argument_list|()
expr_stmt|;
block|}
else|else
block|{
name|propDiff
operator|=
name|baseProps
operator|.
name|compareTo
argument_list|(
name|props
argument_list|)
operator|.
name|asMap
argument_list|()
expr_stmt|;
block|}
name|boolean
name|eolChanged
init|=
name|textModified
operator|=
name|propDiff
operator|!=
literal|null
operator|&&
name|propDiff
operator|.
name|containsName
argument_list|(
name|SVNProperty
operator|.
name|EOL_STYLE
argument_list|)
decl_stmt|;
name|boolean
name|charsetChanged
init|=
name|propDiff
operator|!=
literal|null
operator|&&
name|propDiff
operator|.
name|containsName
argument_list|(
name|SVNProperty
operator|.
name|CHARSET
argument_list|)
decl_stmt|;
name|textModified
operator|=
name|eolChanged
operator|||
name|charsetChanged
expr_stmt|;
if|if
condition|(
name|entry
operator|.
name|getKind
argument_list|()
operator|==
name|SVNNodeKind
operator|.
name|FILE
condition|)
block|{
if|if
condition|(
name|commitCopy
condition|)
block|{
name|textModified
operator|=
name|propDiff
operator|!=
literal|null
operator|&&
operator|(
name|propDiff
operator|.
name|containsName
argument_list|(
name|SVNProperty
operator|.
name|EOL_STYLE
argument_list|)
operator|||
name|propDiff
operator|.
name|containsName
argument_list|(
name|SVNProperty
operator|.
name|CHARSET
argument_list|)
operator|)
expr_stmt|;
if|if
condition|(
operator|!
name|textModified
condition|)
block|{
name|textModified
operator|=
name|dir
operator|.
name|hasTextModifications
argument_list|(
name|entry
operator|.
name|getName
argument_list|()
argument_list|,
name|eolChanged
argument_list|)
expr_stmt|;
block|}
block|}
else|else
block|{
name|textModified
operator|=
literal|true
expr_stmt|;
block|}
block|}
name|propsModified
operator|=
name|propDiff
operator|!=
literal|null
operator|&&
operator|!
name|propDiff
operator|.
name|isEmpty
argument_list|()
expr_stmt|;
block|}
if|else if
condition|(
operator|!
name|commitDeletion
condition|)
block|{
name|SVNVersionedProperties
name|props
init|=
name|dir
operator|.
name|getProperties
argument_list|(
name|entry
operator|.
name|getName
argument_list|()
argument_list|)
decl_stmt|;
name|SVNVersionedProperties
name|baseProps
init|=
name|dir
operator|.
name|getBaseProperties
argument_list|(
name|entry
operator|.
name|getName
argument_list|()
argument_list|)
decl_stmt|;
name|SVNProperties
name|propDiff
init|=
name|baseProps
operator|.
name|compareTo
argument_list|(
name|props
argument_list|)
operator|.
name|asMap
argument_list|()
decl_stmt|;
name|boolean
name|forceComparison
init|=
name|textModified
operator|=
name|propDiff
operator|!=
literal|null
operator|&&
operator|(
name|propDiff
operator|.
name|containsName
argument_list|(
name|SVNProperty
operator|.
name|EOL_STYLE
argument_list|)
operator|||
name|propDiff
operator|.
name|containsName
argument_list|(
name|SVNProperty
operator|.
name|CHARSET
argument_list|)
operator|)
decl_stmt|;
name|propsModified
operator|=
name|propDiff
operator|!=
literal|null
operator|&&
operator|!
name|propDiff
operator|.
name|isEmpty
argument_list|()
expr_stmt|;
if|if
condition|(
name|entry
operator|.
name|getKind
argument_list|()
operator|==
name|SVNNodeKind
operator|.
name|FILE
condition|)
block|{
name|textModified
operator|=
name|dir
operator|.
name|hasTextModifications
argument_list|(
name|entry
operator|.
name|getName
argument_list|()
argument_list|,
name|forceComparison
argument_list|)
expr_stmt|;
block|}
block|}
name|commitLock
operator|=
name|entry
operator|.
name|getLockToken
argument_list|()
operator|!=
literal|null
operator|&&
operator|(
name|justLocked
operator|||
name|textModified
operator|||
name|propsModified
operator|||
name|commitDeletion
operator|||
name|commitAddition
operator|||
name|commitCopy
operator|)
expr_stmt|;
if|if
condition|(
name|commitAddition
operator|||
name|commitDeletion
operator|||
name|textModified
operator|||
name|propsModified
operator|||
name|commitCopy
operator|||
name|commitLock
condition|)
block|{
if|if
condition|(
name|SVNWCAccess
operator|.
name|matchesChangeList
argument_list|(
name|changelists
argument_list|,
name|entry
argument_list|)
condition|)
block|{
name|SVNCommitItem
name|item
init|=
operator|new
name|SVNCommitItem
argument_list|(
name|path
argument_list|,
name|SVNURL
operator|.
name|parseURIEncoded
argument_list|(
name|url
argument_list|)
argument_list|,
name|cfURL
operator|!=
literal|null
condition|?
name|SVNURL
operator|.
name|parseURIEncoded
argument_list|(
name|cfURL
argument_list|)
else|:
literal|null
argument_list|,
name|entry
operator|.
name|getKind
argument_list|()
argument_list|,
name|SVNRevision
operator|.
name|create
argument_list|(
name|entry
operator|.
name|getRevision
argument_list|()
argument_list|)
argument_list|,
name|SVNRevision
operator|.
name|create
argument_list|(
name|cfRevision
argument_list|)
argument_list|,
name|commitAddition
argument_list|,
name|commitDeletion
argument_list|,
name|propsModified
argument_list|,
name|textModified
argument_list|,
name|commitCopy
argument_list|,
name|commitLock
argument_list|)
decl_stmt|;
name|String
name|itemPath
init|=
name|dir
operator|.
name|getRelativePath
argument_list|(
name|dir
operator|.
name|getWCAccess
argument_list|()
operator|.
name|retrieve
argument_list|(
name|dir
operator|.
name|getWCAccess
argument_list|()
operator|.
name|getAnchor
argument_list|()
argument_list|)
argument_list|)
decl_stmt|;
if|if
condition|(
literal|""
operator|.
name|equals
argument_list|(
name|itemPath
argument_list|)
condition|)
block|{
name|itemPath
operator|+=
name|entry
operator|.
name|getName
argument_list|()
expr_stmt|;
block|}
if|else if
condition|(
operator|!
literal|""
operator|.
name|equals
argument_list|(
name|entry
operator|.
name|getName
argument_list|()
argument_list|)
condition|)
block|{
name|itemPath
operator|+=
literal|"/"
operator|+
name|entry
operator|.
name|getName
argument_list|()
expr_stmt|;
block|}
name|item
operator|.
name|setPath
argument_list|(
name|itemPath
argument_list|)
expr_stmt|;
name|commitables
operator|.
name|put
argument_list|(
name|path
argument_list|,
name|item
argument_list|)
expr_stmt|;
if|if
condition|(
name|lockTokens
operator|!=
literal|null
operator|&&
name|entry
operator|.
name|getLockToken
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|lockTokens
operator|.
name|put
argument_list|(
name|url
argument_list|,
name|entry
operator|.
name|getLockToken
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
block|}
comment|//collect externals properties
if|if
condition|(
name|pathsToExternalsProperties
operator|!=
literal|null
operator|&&
name|SVNWCAccess
operator|.
name|matchesChangeList
argument_list|(
name|changelists
argument_list|,
name|entry
argument_list|)
condition|)
block|{
name|SVNVersionedProperties
name|props
init|=
name|dir
operator|.
name|getProperties
argument_list|(
name|entry
operator|.
name|getName
argument_list|()
argument_list|)
decl_stmt|;
name|String
name|externalsProperty
init|=
name|props
operator|.
name|getStringPropertyValue
argument_list|(
name|SVNProperty
operator|.
name|EXTERNALS
argument_list|)
decl_stmt|;
if|if
condition|(
name|externalsProperty
operator|!=
literal|null
condition|)
block|{
name|pathsToExternalsProperties
operator|.
name|put
argument_list|(
name|dir
operator|.
name|getFile
argument_list|(
name|entry
operator|.
name|getName
argument_list|()
argument_list|)
argument_list|,
name|externalsProperty
argument_list|)
expr_stmt|;
block|}
block|}
if|if
condition|(
name|entries
operator|!=
literal|null
operator|&&
name|SVNDepth
operator|.
name|EMPTY
operator|.
name|compareTo
argument_list|(
name|depth
argument_list|)
operator|<
literal|0
operator|&&
operator|(
name|commitAddition
operator|||
operator|!
name|commitDeletion
operator|)
condition|)
block|{
comment|// recurse.
for|for
control|(
name|Iterator
name|ents
init|=
name|entries
operator|.
name|entries
argument_list|(
name|copyMode
argument_list|)
init|;
name|ents
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
if|if
condition|(
name|dir
operator|!=
literal|null
operator|&&
name|dir
operator|.
name|getWCAccess
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|dir
operator|.
name|getWCAccess
argument_list|()
operator|.
name|checkCancelled
argument_list|()
expr_stmt|;
block|}
name|SVNEntry
name|currentEntry
init|=
operator|(
name|SVNEntry
operator|)
name|ents
operator|.
name|next
argument_list|()
decl_stmt|;
if|if
condition|(
name|currentEntry
operator|.
name|isThisDir
argument_list|()
condition|)
block|{
continue|continue;
block|}
comment|// if recursion is forced and entry is explicitly copied, skip it.
if|if
condition|(
name|forcedRecursion
operator|&&
name|currentEntry
operator|.
name|isCopied
argument_list|()
operator|&&
name|currentEntry
operator|.
name|getCopyFromURL
argument_list|()
operator|!=
literal|null
condition|)
block|{
continue|continue;
block|}
if|if
condition|(
name|currentEntry
operator|.
name|getDepth
argument_list|()
operator|==
name|SVNDepth
operator|.
name|EXCLUDE
condition|)
block|{
continue|continue;
block|}
if|if
condition|(
name|entry
operator|.
name|isScheduledForReplacement
argument_list|()
operator|&&
name|currentEntry
operator|.
name|isScheduledForDeletion
argument_list|()
condition|)
block|{
continue|continue;
block|}
name|String
name|currentCFURL
init|=
name|cfURL
operator|!=
literal|null
condition|?
name|cfURL
else|:
name|copyFromURL
decl_stmt|;
if|if
condition|(
name|currentCFURL
operator|!=
literal|null
condition|)
block|{
name|currentCFURL
operator|=
name|SVNPathUtil
operator|.
name|append
argument_list|(
name|currentCFURL
argument_list|,
name|SVNEncodingUtil
operator|.
name|uriEncode
argument_list|(
name|currentEntry
operator|.
name|getName
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|String
name|currentURL
init|=
name|currentEntry
operator|.
name|getURL
argument_list|()
decl_stmt|;
if|if
condition|(
name|copyMode
operator|||
name|currentEntry
operator|.
name|getURL
argument_list|()
operator|==
literal|null
condition|)
block|{
name|currentURL
operator|=
name|SVNPathUtil
operator|.
name|append
argument_list|(
name|url
argument_list|,
name|SVNEncodingUtil
operator|.
name|uriEncode
argument_list|(
name|currentEntry
operator|.
name|getName
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|File
name|currentFile
init|=
name|dir
operator|.
name|getFile
argument_list|(
name|currentEntry
operator|.
name|getName
argument_list|()
argument_list|)
decl_stmt|;
name|SVNAdminArea
name|childDir
decl_stmt|;
if|if
condition|(
name|currentEntry
operator|.
name|getKind
argument_list|()
operator|==
name|SVNNodeKind
operator|.
name|DIR
condition|)
block|{
if|if
condition|(
name|SVNDepth
operator|.
name|FILES
operator|.
name|compareTo
argument_list|(
name|depth
argument_list|)
operator|>=
literal|0
condition|)
block|{
continue|continue;
block|}
try|try
block|{
name|childDir
operator|=
name|dir
operator|.
name|getWCAccess
argument_list|()
operator|.
name|retrieve
argument_list|(
name|dir
operator|.
name|getFile
argument_list|(
name|currentEntry
operator|.
name|getName
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|SVNException
name|e
parameter_list|)
block|{
if|if
condition|(
name|e
operator|.
name|getErrorMessage
argument_list|()
operator|.
name|getErrorCode
argument_list|()
operator|==
name|SVNErrorCode
operator|.
name|WC_NOT_LOCKED
condition|)
block|{
name|childDir
operator|=
literal|null
expr_stmt|;
block|}
else|else
block|{
throw|throw
name|e
throw|;
block|}
block|}
if|if
condition|(
name|childDir
operator|==
literal|null
condition|)
block|{
name|SVNFileType
name|currentType
init|=
name|SVNFileType
operator|.
name|getType
argument_list|(
name|currentFile
argument_list|)
decl_stmt|;
if|if
condition|(
name|currentType
operator|==
name|SVNFileType
operator|.
name|NONE
operator|&&
name|currentEntry
operator|.
name|isScheduledForDeletion
argument_list|()
condition|)
block|{
if|if
condition|(
name|SVNWCAccess
operator|.
name|matchesChangeList
argument_list|(
name|changelists
argument_list|,
name|entry
argument_list|)
condition|)
block|{
name|SVNCommitItem
name|item
init|=
operator|new
name|SVNCommitItem
argument_list|(
name|currentFile
argument_list|,
name|SVNURL
operator|.
name|parseURIEncoded
argument_list|(
name|currentURL
argument_list|)
argument_list|,
literal|null
argument_list|,
name|currentEntry
operator|.
name|getKind
argument_list|()
argument_list|,
name|SVNRevision
operator|.
name|UNDEFINED
argument_list|,
name|SVNRevision
operator|.
name|UNDEFINED
argument_list|,
literal|false
argument_list|,
literal|true
argument_list|,
literal|false
argument_list|,
literal|false
argument_list|,
literal|false
argument_list|,
literal|false
argument_list|)
decl_stmt|;
name|String
name|dirPath
init|=
name|dir
operator|.
name|getRelativePath
argument_list|(
name|dir
operator|.
name|getWCAccess
argument_list|()
operator|.
name|retrieve
argument_list|(
name|dir
operator|.
name|getWCAccess
argument_list|()
operator|.
name|getAnchor
argument_list|()
argument_list|)
argument_list|)
decl_stmt|;
name|item
operator|.
name|setPath
argument_list|(
name|SVNPathUtil
operator|.
name|append
argument_list|(
name|dirPath
argument_list|,
name|currentEntry
operator|.
name|getName
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|commitables
operator|.
name|put
argument_list|(
name|currentFile
argument_list|,
name|item
argument_list|)
expr_stmt|;
continue|continue;
block|}
block|}
if|else if
condition|(
name|currentType
operator|!=
name|SVNFileType
operator|.
name|NONE
condition|)
block|{
comment|// directory is not missing, but obstructed,
comment|// or no special params are specified.
name|SVNErrorMessage
name|err
init|=
name|SVNErrorMessage
operator|.
name|create
argument_list|(
name|SVNErrorCode
operator|.
name|WC_NOT_LOCKED
argument_list|,
literal|"Working copy ''{0}'' is missing or not locked"
argument_list|,
name|currentFile
argument_list|)
decl_stmt|;
name|SVNErrorManager
operator|.
name|error
argument_list|(
name|err
argument_list|,
name|SVNLogType
operator|.
name|WC
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|ISVNCommitParameters
operator|.
name|Action
name|action
init|=
name|params
operator|!=
literal|null
condition|?
name|params
operator|.
name|onMissingDirectory
argument_list|(
name|dir
operator|.
name|getFile
argument_list|(
name|currentEntry
operator|.
name|getName
argument_list|()
argument_list|)
argument_list|)
else|:
name|ISVNCommitParameters
operator|.
name|ERROR
decl_stmt|;
if|if
condition|(
name|action
operator|==
name|ISVNCommitParameters
operator|.
name|DELETE
condition|)
block|{
name|SVNCommitItem
name|item
init|=
operator|new
name|SVNCommitItem
argument_list|(
name|currentFile
argument_list|,
name|SVNURL
operator|.
name|parseURIEncoded
argument_list|(
name|currentURL
argument_list|)
argument_list|,
literal|null
argument_list|,
name|currentEntry
operator|.
name|getKind
argument_list|()
argument_list|,
name|SVNRevision
operator|.
name|UNDEFINED
argument_list|,
name|SVNRevision
operator|.
name|UNDEFINED
argument_list|,
literal|false
argument_list|,
literal|true
argument_list|,
literal|false
argument_list|,
literal|false
argument_list|,
literal|false
argument_list|,
literal|false
argument_list|)
decl_stmt|;
name|String
name|dirPath
init|=
name|dir
operator|.
name|getRelativePath
argument_list|(
name|dir
operator|.
name|getWCAccess
argument_list|()
operator|.
name|retrieve
argument_list|(
name|dir
operator|.
name|getWCAccess
argument_list|()
operator|.
name|getAnchor
argument_list|()
argument_list|)
argument_list|)
decl_stmt|;
name|item
operator|.
name|setPath
argument_list|(
name|SVNPathUtil
operator|.
name|append
argument_list|(
name|dirPath
argument_list|,
name|currentEntry
operator|.
name|getName
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|commitables
operator|.
name|put
argument_list|(
name|currentFile
argument_list|,
name|item
argument_list|)
expr_stmt|;
name|currentEntry
operator|.
name|scheduleForDeletion
argument_list|()
expr_stmt|;
name|entries
operator|.
name|saveEntries
argument_list|(
literal|false
argument_list|)
expr_stmt|;
continue|continue;
block|}
if|else if
condition|(
name|action
operator|==
name|ISVNCommitParameters
operator|.
name|ERROR
condition|)
block|{
name|SVNErrorMessage
name|err
init|=
name|SVNErrorMessage
operator|.
name|create
argument_list|(
name|SVNErrorCode
operator|.
name|WC_NOT_LOCKED
argument_list|,
literal|"Working copy ''{0}'' is missing or not locked"
argument_list|,
name|currentFile
argument_list|)
decl_stmt|;
name|SVNErrorManager
operator|.
name|error
argument_list|(
name|err
argument_list|,
name|SVNLogType
operator|.
name|WC
argument_list|)
expr_stmt|;
block|}
else|else
block|{
continue|continue;
block|}
block|}
block|}
block|}
name|SVNDepth
name|depthBelowHere
init|=
name|depth
decl_stmt|;
if|if
condition|(
name|depth
operator|==
name|SVNDepth
operator|.
name|FILES
operator|||
name|depth
operator|==
name|SVNDepth
operator|.
name|IMMEDIATES
condition|)
block|{
name|depthBelowHere
operator|=
name|SVNDepth
operator|.
name|EMPTY
expr_stmt|;
block|}
name|harvestCommitables
argument_list|(
name|commitables
argument_list|,
name|dir
argument_list|,
name|currentFile
argument_list|,
name|entry
argument_list|,
name|currentEntry
argument_list|,
name|currentURL
argument_list|,
name|currentCFURL
argument_list|,
name|copyMode
argument_list|,
name|addsOnly
argument_list|,
name|justLocked
argument_list|,
name|lockTokens
argument_list|,
name|depthBelowHere
argument_list|,
name|forcedRecursion
argument_list|,
name|changelists
argument_list|,
name|params
argument_list|,
name|pathsToExternalsProperties
argument_list|)
expr_stmt|;
block|}
block|}
if|if
condition|(
name|lockTokens
operator|!=
literal|null
operator|&&
name|entry
operator|.
name|getKind
argument_list|()
operator|==
name|SVNNodeKind
operator|.
name|DIR
operator|&&
name|commitDeletion
condition|)
block|{
comment|// harvest lock tokens for deleted items.
name|collectLocks
argument_list|(
name|dir
argument_list|,
name|lockTokens
argument_list|)
expr_stmt|;
block|}
block|}
specifier|private
specifier|static
name|void
name|collectLocks
parameter_list|(
name|SVNAdminArea
name|adminArea
parameter_list|,
name|Map
name|lockTokens
parameter_list|)
throws|throws
name|SVNException
block|{
for|for
control|(
name|Iterator
name|ents
init|=
name|adminArea
operator|.
name|entries
argument_list|(
literal|false
argument_list|)
init|;
name|ents
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|SVNEntry
name|entry
init|=
operator|(
name|SVNEntry
operator|)
name|ents
operator|.
name|next
argument_list|()
decl_stmt|;
if|if
condition|(
name|entry
operator|.
name|getURL
argument_list|()
operator|!=
literal|null
operator|&&
name|entry
operator|.
name|getLockToken
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|lockTokens
operator|.
name|put
argument_list|(
name|entry
operator|.
name|getURL
argument_list|()
argument_list|,
name|entry
operator|.
name|getLockToken
argument_list|()
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
operator|!
name|adminArea
operator|.
name|getThisDirName
argument_list|()
operator|.
name|equals
argument_list|(
name|entry
operator|.
name|getName
argument_list|()
argument_list|)
operator|&&
name|entry
operator|.
name|isDirectory
argument_list|()
condition|)
block|{
name|SVNAdminArea
name|child
decl_stmt|;
try|try
block|{
name|child
operator|=
name|adminArea
operator|.
name|getWCAccess
argument_list|()
operator|.
name|retrieve
argument_list|(
name|adminArea
operator|.
name|getFile
argument_list|(
name|entry
operator|.
name|getName
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|SVNException
name|e
parameter_list|)
block|{
if|if
condition|(
name|e
operator|.
name|getErrorMessage
argument_list|()
operator|.
name|getErrorCode
argument_list|()
operator|==
name|SVNErrorCode
operator|.
name|WC_NOT_LOCKED
condition|)
block|{
name|child
operator|=
literal|null
expr_stmt|;
block|}
else|else
block|{
throw|throw
name|e
throw|;
block|}
block|}
if|if
condition|(
name|child
operator|!=
literal|null
condition|)
block|{
name|collectLocks
argument_list|(
name|child
argument_list|,
name|lockTokens
argument_list|)
expr_stmt|;
block|}
block|}
block|}
name|adminArea
operator|.
name|closeEntries
argument_list|()
expr_stmt|;
block|}
specifier|private
specifier|static
name|void
name|removeRedundantPaths
parameter_list|(
name|Collection
name|dirsToLockRecursively
parameter_list|,
name|Collection
name|dirsToLock
parameter_list|)
block|{
name|Map
name|processedDirs
init|=
operator|new
name|SVNHashMap
argument_list|()
decl_stmt|;
for|for
control|(
name|Iterator
name|paths
init|=
name|dirsToLock
operator|.
name|iterator
argument_list|()
init|;
name|paths
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|String
name|path
init|=
operator|(
name|String
operator|)
name|paths
operator|.
name|next
argument_list|()
decl_stmt|;
comment|//check for path dublicates and remove them if any
if|if
condition|(
name|processedDirs
operator|.
name|containsKey
argument_list|(
name|path
argument_list|)
condition|)
block|{
name|paths
operator|.
name|remove
argument_list|()
expr_stmt|;
continue|continue;
block|}
name|processedDirs
operator|.
name|put
argument_list|(
name|path
argument_list|,
name|path
argument_list|)
expr_stmt|;
if|if
condition|(
name|dirsToLockRecursively
operator|.
name|contains
argument_list|(
name|path
argument_list|)
condition|)
block|{
name|paths
operator|.
name|remove
argument_list|()
expr_stmt|;
block|}
else|else
block|{
for|for
control|(
name|Iterator
name|recPaths
init|=
name|dirsToLockRecursively
operator|.
name|iterator
argument_list|()
init|;
name|recPaths
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|String
name|existingPath
init|=
operator|(
name|String
operator|)
name|recPaths
operator|.
name|next
argument_list|()
decl_stmt|;
if|if
condition|(
name|path
operator|.
name|startsWith
argument_list|(
name|existingPath
operator|+
literal|"/"
argument_list|)
condition|)
block|{
name|paths
operator|.
name|remove
argument_list|()
expr_stmt|;
break|break;
block|}
block|}
block|}
block|}
block|}
specifier|private
specifier|static
name|File
name|adjustRelativePaths
parameter_list|(
name|File
name|rootFile
parameter_list|,
name|Collection
name|relativePaths
parameter_list|)
throws|throws
name|SVNException
block|{
if|if
condition|(
name|relativePaths
operator|.
name|contains
argument_list|(
literal|""
argument_list|)
condition|)
block|{
name|String
name|targetName
init|=
name|SVNWCManager
operator|.
name|getActualTarget
argument_list|(
name|rootFile
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
literal|""
operator|.
name|equals
argument_list|(
name|targetName
argument_list|)
operator|&&
name|rootFile
operator|.
name|getParentFile
argument_list|()
operator|!=
literal|null
condition|)
block|{
comment|// there is a versioned parent.
name|rootFile
operator|=
name|rootFile
operator|.
name|getParentFile
argument_list|()
expr_stmt|;
name|List
name|result
init|=
operator|new
name|ArrayList
argument_list|()
decl_stmt|;
for|for
control|(
name|Iterator
name|paths
init|=
name|relativePaths
operator|.
name|iterator
argument_list|()
init|;
name|paths
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|String
name|path
init|=
operator|(
name|String
operator|)
name|paths
operator|.
name|next
argument_list|()
decl_stmt|;
name|path
operator|=
literal|""
operator|.
name|equals
argument_list|(
name|path
argument_list|)
condition|?
name|targetName
else|:
name|SVNPathUtil
operator|.
name|append
argument_list|(
name|targetName
argument_list|,
name|path
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|result
operator|.
name|contains
argument_list|(
name|path
argument_list|)
condition|)
block|{
name|result
operator|.
name|add
argument_list|(
name|path
argument_list|)
expr_stmt|;
block|}
block|}
name|relativePaths
operator|.
name|clear
argument_list|()
expr_stmt|;
name|Collections
operator|.
name|sort
argument_list|(
name|result
argument_list|)
expr_stmt|;
name|relativePaths
operator|.
name|addAll
argument_list|(
name|result
argument_list|)
expr_stmt|;
block|}
block|}
return|return
name|rootFile
return|;
block|}
specifier|private
specifier|static
name|boolean
name|isRecursiveCommitForced
parameter_list|(
name|File
name|directory
parameter_list|)
throws|throws
name|SVNException
block|{
name|SVNWCAccess
name|wcAccess
init|=
name|SVNWCAccess
operator|.
name|newInstance
argument_list|(
literal|null
argument_list|)
decl_stmt|;
try|try
block|{
name|wcAccess
operator|.
name|open
argument_list|(
name|directory
argument_list|,
literal|false
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|SVNEntry
name|targetEntry
init|=
name|wcAccess
operator|.
name|getEntry
argument_list|(
name|directory
argument_list|,
literal|false
argument_list|)
decl_stmt|;
if|if
condition|(
name|targetEntry
operator|!=
literal|null
condition|)
block|{
return|return
name|targetEntry
operator|.
name|isCopied
argument_list|()
operator|||
name|targetEntry
operator|.
name|isScheduledForDeletion
argument_list|()
operator|||
name|targetEntry
operator|.
name|isScheduledForReplacement
argument_list|()
return|;
block|}
block|}
finally|finally
block|{
name|wcAccess
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
return|return
literal|false
return|;
block|}
specifier|public
specifier|static
name|String
name|validateCommitMessage
parameter_list|(
name|String
name|message
parameter_list|)
block|{
if|if
condition|(
name|message
operator|==
literal|null
condition|)
block|{
return|return
name|message
return|;
block|}
name|message
operator|=
name|message
operator|.
name|replaceAll
argument_list|(
literal|"\r\n"
argument_list|,
literal|"\n"
argument_list|)
expr_stmt|;
name|message
operator|=
name|message
operator|.
name|replace
argument_list|(
literal|'\r'
argument_list|,
literal|'\n'
argument_list|)
expr_stmt|;
return|return
name|message
return|;
block|}
block|}
end_class

end_unit

