begin_unit|revision:1.0.0;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * ====================================================================  * Copyright (c) 2004-2010 TMate Software Ltd.  All rights reserved.  *  * This software is licensed as described in the file COPYING, which  * you should have received as part of this distribution.  The terms  * are also available at http://svnkit.com/license.html.  * If newer versions of this license are posted there, you may use a  * newer version instead, at your option.  * ====================================================================  */
end_comment

begin_package
package|package
name|org
operator|.
name|exist
operator|.
name|versioning
operator|.
name|svn
operator|.
name|internal
operator|.
name|wc
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|File
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|versioning
operator|.
name|svn
operator|.
name|internal
operator|.
name|wc
operator|.
name|admin
operator|.
name|SVNAdminArea
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|versioning
operator|.
name|svn
operator|.
name|internal
operator|.
name|wc
operator|.
name|admin
operator|.
name|SVNVersionedProperties
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|versioning
operator|.
name|svn
operator|.
name|wc
operator|.
name|ISVNMerger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|versioning
operator|.
name|svn
operator|.
name|wc
operator|.
name|SVNMergeFileSet
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|versioning
operator|.
name|svn
operator|.
name|wc
operator|.
name|SVNMergeResult
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|versioning
operator|.
name|svn
operator|.
name|wc
operator|.
name|SVNStatusType
import|;
end_import

begin_import
import|import
name|org
operator|.
name|tmatesoft
operator|.
name|svn
operator|.
name|core
operator|.
name|SVNException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|tmatesoft
operator|.
name|svn
operator|.
name|core
operator|.
name|SVNProperty
import|;
end_import

begin_import
import|import
name|org
operator|.
name|tmatesoft
operator|.
name|svn
operator|.
name|core
operator|.
name|wc
operator|.
name|SVNDiffOptions
import|;
end_import

begin_comment
comment|/**  * @version 1.3  * @author  TMate Software Ltd.  */
end_comment

begin_class
specifier|public
specifier|abstract
class|class
name|AbstractSVNMerger
implements|implements
name|ISVNMerger
block|{
specifier|private
name|byte
index|[]
name|myStart
decl_stmt|;
specifier|private
name|byte
index|[]
name|mySeparator
decl_stmt|;
specifier|private
name|byte
index|[]
name|myEnd
decl_stmt|;
specifier|protected
name|AbstractSVNMerger
parameter_list|(
name|byte
index|[]
name|start
parameter_list|,
name|byte
index|[]
name|sep
parameter_list|,
name|byte
index|[]
name|end
parameter_list|)
block|{
name|myStart
operator|=
name|start
expr_stmt|;
name|mySeparator
operator|=
name|sep
expr_stmt|;
name|myEnd
operator|=
name|end
expr_stmt|;
block|}
specifier|protected
name|byte
index|[]
name|getConflictSeparatorMarker
parameter_list|()
block|{
return|return
name|mySeparator
return|;
block|}
specifier|protected
name|byte
index|[]
name|getConflictStartMarker
parameter_list|()
block|{
return|return
name|myStart
return|;
block|}
specifier|protected
name|byte
index|[]
name|getConflictEndMarker
parameter_list|()
block|{
return|return
name|myEnd
return|;
block|}
specifier|public
name|SVNMergeResult
name|mergeText
parameter_list|(
name|SVNMergeFileSet
name|files
parameter_list|,
name|boolean
name|dryRun
parameter_list|,
name|SVNDiffOptions
name|options
parameter_list|)
throws|throws
name|SVNException
block|{
name|SVNStatusType
name|status
decl_stmt|;
if|if
condition|(
name|files
operator|.
name|isBinary
argument_list|()
condition|)
block|{
name|status
operator|=
name|mergeBinary
argument_list|(
name|files
operator|.
name|getBaseFile
argument_list|()
argument_list|,
name|files
operator|.
name|getLocalFile
argument_list|()
argument_list|,
name|files
operator|.
name|getRepositoryFile
argument_list|()
argument_list|,
name|options
argument_list|,
name|files
operator|.
name|getResultFile
argument_list|()
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|status
operator|=
name|mergeText
argument_list|(
name|files
operator|.
name|getBaseFile
argument_list|()
argument_list|,
name|files
operator|.
name|getLocalFile
argument_list|()
argument_list|,
name|files
operator|.
name|getRepositoryFile
argument_list|()
argument_list|,
name|options
argument_list|,
name|files
operator|.
name|getResultFile
argument_list|()
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
operator|!
name|files
operator|.
name|isBinary
argument_list|()
operator|&&
name|status
operator|!=
name|SVNStatusType
operator|.
name|CONFLICTED
condition|)
block|{
if|if
condition|(
name|files
operator|.
name|getCopyFromFile
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|status
operator|=
name|SVNStatusType
operator|.
name|MERGED
expr_stmt|;
block|}
else|else
block|{
name|SVNAdminArea
name|adminArea
init|=
name|files
operator|.
name|getAdminArea
argument_list|()
decl_stmt|;
name|SVNVersionedProperties
name|props
init|=
name|adminArea
operator|.
name|getProperties
argument_list|(
name|files
operator|.
name|getWCPath
argument_list|()
argument_list|)
decl_stmt|;
name|boolean
name|isSpecial
init|=
name|props
operator|.
name|getPropertyValue
argument_list|(
name|SVNProperty
operator|.
name|SPECIAL
argument_list|)
operator|!=
literal|null
decl_stmt|;
comment|// compare merge result with 'wcFile' (in case of text and no conflict).
name|boolean
name|isSameContents
init|=
name|SVNFileUtil
operator|.
name|compareFiles
argument_list|(
name|isSpecial
condition|?
name|files
operator|.
name|getLocalFile
argument_list|()
else|:
name|files
operator|.
name|getWCFile
argument_list|()
argument_list|,
name|files
operator|.
name|getResultFile
argument_list|()
argument_list|,
literal|null
argument_list|)
decl_stmt|;
name|status
operator|=
name|isSameContents
condition|?
name|SVNStatusType
operator|.
name|UNCHANGED
else|:
name|status
expr_stmt|;
block|}
block|}
specifier|final
name|SVNMergeResult
name|result
init|=
name|SVNMergeResult
operator|.
name|createMergeResult
argument_list|(
name|status
argument_list|,
literal|null
argument_list|)
decl_stmt|;
if|if
condition|(
name|dryRun
condition|)
block|{
return|return
name|result
return|;
block|}
return|return
name|processMergedFiles
argument_list|(
name|files
argument_list|,
name|result
argument_list|)
return|;
block|}
specifier|protected
specifier|abstract
name|SVNMergeResult
name|processMergedFiles
parameter_list|(
name|SVNMergeFileSet
name|files
parameter_list|,
name|SVNMergeResult
name|mergeResult
parameter_list|)
throws|throws
name|SVNException
function_decl|;
specifier|protected
specifier|abstract
name|SVNStatusType
name|mergeText
parameter_list|(
name|File
name|baseFile
parameter_list|,
name|File
name|localFile
parameter_list|,
name|File
name|repositoryFile
parameter_list|,
name|SVNDiffOptions
name|options
parameter_list|,
name|File
name|resultFile
parameter_list|)
throws|throws
name|SVNException
function_decl|;
specifier|protected
specifier|abstract
name|SVNStatusType
name|mergeBinary
parameter_list|(
name|File
name|baseFile
parameter_list|,
name|File
name|localFile
parameter_list|,
name|File
name|repositoryFile
parameter_list|,
name|SVNDiffOptions
name|options
parameter_list|,
name|File
name|resultFile
parameter_list|)
throws|throws
name|SVNException
function_decl|;
block|}
end_class

end_unit

