begin_unit|revision:1.0.0;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * ====================================================================  * Copyright (c) 2004-2010 TMate Software Ltd.  All rights reserved.  *  * This software is licensed as described in the file COPYING, which  * you should have received as part of this distribution.  The terms  * are also available at http://svnkit.com/license.html  * If newer versions of this license are posted there, you may use a  * newer version instead, at your option.  * ====================================================================  */
end_comment

begin_package
package|package
name|org
operator|.
name|exist
operator|.
name|versioning
operator|.
name|svn
operator|.
name|internal
operator|.
name|wc
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|File
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collection
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Iterator
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|StringTokenizer
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|net
operator|.
name|ssl
operator|.
name|TrustManager
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|versioning
operator|.
name|svn
operator|.
name|Resource
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|versioning
operator|.
name|svn
operator|.
name|wc
operator|.
name|SVNWCUtil
import|;
end_import

begin_import
import|import
name|org
operator|.
name|tmatesoft
operator|.
name|svn
operator|.
name|core
operator|.
name|SVNErrorCode
import|;
end_import

begin_import
import|import
name|org
operator|.
name|tmatesoft
operator|.
name|svn
operator|.
name|core
operator|.
name|SVNErrorMessage
import|;
end_import

begin_import
import|import
name|org
operator|.
name|tmatesoft
operator|.
name|svn
operator|.
name|core
operator|.
name|SVNException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|tmatesoft
operator|.
name|svn
operator|.
name|core
operator|.
name|SVNProperties
import|;
end_import

begin_import
import|import
name|org
operator|.
name|tmatesoft
operator|.
name|svn
operator|.
name|core
operator|.
name|SVNPropertyValue
import|;
end_import

begin_import
import|import
name|org
operator|.
name|tmatesoft
operator|.
name|svn
operator|.
name|core
operator|.
name|SVNURL
import|;
end_import

begin_import
import|import
name|org
operator|.
name|tmatesoft
operator|.
name|svn
operator|.
name|core
operator|.
name|auth
operator|.
name|ISVNAuthenticationManager
import|;
end_import

begin_import
import|import
name|org
operator|.
name|tmatesoft
operator|.
name|svn
operator|.
name|core
operator|.
name|auth
operator|.
name|ISVNAuthenticationProvider
import|;
end_import

begin_import
import|import
name|org
operator|.
name|tmatesoft
operator|.
name|svn
operator|.
name|core
operator|.
name|auth
operator|.
name|ISVNProxyManager
import|;
end_import

begin_import
import|import
name|org
operator|.
name|tmatesoft
operator|.
name|svn
operator|.
name|core
operator|.
name|auth
operator|.
name|SVNAuthentication
import|;
end_import

begin_import
import|import
name|org
operator|.
name|tmatesoft
operator|.
name|svn
operator|.
name|core
operator|.
name|auth
operator|.
name|SVNPasswordAuthentication
import|;
end_import

begin_import
import|import
name|org
operator|.
name|tmatesoft
operator|.
name|svn
operator|.
name|core
operator|.
name|auth
operator|.
name|SVNSSHAuthentication
import|;
end_import

begin_import
import|import
name|org
operator|.
name|tmatesoft
operator|.
name|svn
operator|.
name|core
operator|.
name|auth
operator|.
name|SVNSSLAuthentication
import|;
end_import

begin_import
import|import
name|org
operator|.
name|tmatesoft
operator|.
name|svn
operator|.
name|core
operator|.
name|auth
operator|.
name|SVNUserNameAuthentication
import|;
end_import

begin_import
import|import
name|org
operator|.
name|tmatesoft
operator|.
name|svn
operator|.
name|core
operator|.
name|internal
operator|.
name|util
operator|.
name|SVNHashMap
import|;
end_import

begin_import
import|import
name|org
operator|.
name|tmatesoft
operator|.
name|svn
operator|.
name|core
operator|.
name|internal
operator|.
name|wc
operator|.
name|ISVNAuthStoreHandler
import|;
end_import

begin_import
import|import
name|org
operator|.
name|tmatesoft
operator|.
name|svn
operator|.
name|core
operator|.
name|internal
operator|.
name|wc
operator|.
name|ISVNAuthenticationStorage
import|;
end_import

begin_import
import|import
name|org
operator|.
name|tmatesoft
operator|.
name|svn
operator|.
name|core
operator|.
name|io
operator|.
name|SVNRepository
import|;
end_import

begin_import
import|import
name|org
operator|.
name|tmatesoft
operator|.
name|svn
operator|.
name|util
operator|.
name|SVNLogType
import|;
end_import

begin_comment
comment|/**  * @version 1.3  * @author  TMate Software Ltd.  */
end_comment

begin_class
specifier|public
class|class
name|DefaultSVNAuthenticationManager
implements|implements
name|ISVNAuthenticationManager
block|{
specifier|private
name|boolean
name|myIsStoreAuth
decl_stmt|;
specifier|private
name|ISVNAuthenticationProvider
index|[]
name|myProviders
decl_stmt|;
specifier|private
name|File
name|myConfigDirectory
decl_stmt|;
specifier|private
name|SVNAuthentication
name|myPreviousAuthentication
decl_stmt|;
specifier|private
name|SVNErrorMessage
name|myPreviousErrorMessage
decl_stmt|;
specifier|private
name|SVNCompositeConfigFile
name|myServersFile
decl_stmt|;
specifier|private
name|ISVNAuthenticationStorage
name|myRuntimeAuthStorage
decl_stmt|;
specifier|private
name|int
name|myLastProviderIndex
decl_stmt|;
specifier|private
name|SVNCompositeConfigFile
name|myConfigFile
decl_stmt|;
specifier|private
name|boolean
name|myIsAuthenticationForced
decl_stmt|;
specifier|private
name|SVNAuthentication
name|myLastLoadedAuth
decl_stmt|;
specifier|private
name|ISVNAuthStoreHandler
name|myAuthStoreHandler
decl_stmt|;
specifier|private
name|Map
name|myServersOptions
decl_stmt|;
specifier|private
name|Map
name|myConfigOptions
decl_stmt|;
specifier|public
name|DefaultSVNAuthenticationManager
parameter_list|(
name|File
name|configDirectory
parameter_list|,
name|boolean
name|storeAuth
parameter_list|,
name|String
name|userName
parameter_list|,
name|String
name|password
parameter_list|)
block|{
name|this
argument_list|(
name|configDirectory
argument_list|,
name|storeAuth
argument_list|,
name|userName
argument_list|,
name|password
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|)
expr_stmt|;
block|}
specifier|public
name|DefaultSVNAuthenticationManager
parameter_list|(
name|File
name|configDirectory
parameter_list|,
name|boolean
name|storeAuth
parameter_list|,
name|String
name|userName
parameter_list|,
name|String
name|password
parameter_list|,
name|File
name|privateKey
parameter_list|,
name|String
name|passphrase
parameter_list|)
block|{
comment|//password = password == null ? "" : password;
name|myIsStoreAuth
operator|=
name|storeAuth
expr_stmt|;
name|myConfigDirectory
operator|=
name|configDirectory
expr_stmt|;
if|if
condition|(
name|myConfigDirectory
operator|==
literal|null
condition|)
block|{
name|myConfigDirectory
operator|=
name|SVNWCUtil
operator|.
name|getDefaultConfigurationDirectory
argument_list|()
expr_stmt|;
block|}
name|myProviders
operator|=
operator|new
name|ISVNAuthenticationProvider
index|[
literal|4
index|]
expr_stmt|;
name|myProviders
index|[
literal|0
index|]
operator|=
name|createDefaultAuthenticationProvider
argument_list|(
name|userName
argument_list|,
name|password
argument_list|,
name|privateKey
argument_list|,
name|passphrase
argument_list|,
name|myIsStoreAuth
argument_list|)
expr_stmt|;
name|myProviders
index|[
literal|1
index|]
operator|=
name|createRuntimeAuthenticationProvider
argument_list|()
expr_stmt|;
name|myProviders
index|[
literal|2
index|]
operator|=
name|createCacheAuthenticationProvider
argument_list|(
operator|new
name|Resource
argument_list|(
name|myConfigDirectory
argument_list|,
literal|"auth"
argument_list|)
argument_list|,
name|userName
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|setAuthStoreHandler
parameter_list|(
name|ISVNAuthStoreHandler
name|authStoreHandler
parameter_list|)
block|{
name|myAuthStoreHandler
operator|=
name|authStoreHandler
expr_stmt|;
block|}
specifier|public
name|void
name|setInMemoryServersOptions
parameter_list|(
name|Map
name|serversOptions
parameter_list|)
block|{
name|myServersOptions
operator|=
name|serversOptions
expr_stmt|;
block|}
specifier|public
name|void
name|setInMemoryConfigOptions
parameter_list|(
name|Map
name|configOptions
parameter_list|)
block|{
name|myConfigOptions
operator|=
name|configOptions
expr_stmt|;
block|}
specifier|public
name|void
name|setAuthenticationProvider
parameter_list|(
name|ISVNAuthenticationProvider
name|provider
parameter_list|)
block|{
comment|// add provider to list
name|myProviders
index|[
literal|3
index|]
operator|=
name|provider
expr_stmt|;
block|}
specifier|public
name|Collection
name|getAuthTypes
parameter_list|(
name|SVNURL
name|url
parameter_list|)
block|{
name|List
name|schemes
init|=
operator|new
name|ArrayList
argument_list|()
decl_stmt|;
name|String
name|host
init|=
name|url
operator|.
name|getHost
argument_list|()
decl_stmt|;
name|Map
name|hostProperties
init|=
name|getHostProperties
argument_list|(
name|host
argument_list|)
decl_stmt|;
name|String
name|authTypes
init|=
operator|(
name|String
operator|)
name|hostProperties
operator|.
name|get
argument_list|(
literal|"http-auth-types"
argument_list|)
decl_stmt|;
if|if
condition|(
name|authTypes
operator|==
literal|null
operator|||
literal|""
operator|.
name|equals
argument_list|(
name|authTypes
operator|.
name|trim
argument_list|()
argument_list|)
condition|)
block|{
return|return
name|schemes
return|;
block|}
for|for
control|(
name|StringTokenizer
name|tokens
init|=
operator|new
name|StringTokenizer
argument_list|(
name|authTypes
argument_list|,
literal|";"
argument_list|)
init|;
name|tokens
operator|.
name|hasMoreTokens
argument_list|()
condition|;
control|)
block|{
name|String
name|scheme
init|=
name|tokens
operator|.
name|nextToken
argument_list|()
decl_stmt|;
if|if
condition|(
operator|!
name|schemes
operator|.
name|contains
argument_list|(
name|scheme
argument_list|)
condition|)
block|{
name|schemes
operator|.
name|add
argument_list|(
name|scheme
argument_list|)
expr_stmt|;
block|}
block|}
return|return
name|schemes
return|;
block|}
specifier|public
name|ISVNProxyManager
name|getProxyManager
parameter_list|(
name|SVNURL
name|url
parameter_list|)
throws|throws
name|SVNException
block|{
name|String
name|host
init|=
name|url
operator|.
name|getHost
argument_list|()
decl_stmt|;
name|Map
name|properties
init|=
name|getHostProperties
argument_list|(
name|host
argument_list|)
decl_stmt|;
name|String
name|proxyHost
init|=
operator|(
name|String
operator|)
name|properties
operator|.
name|get
argument_list|(
literal|"http-proxy-host"
argument_list|)
decl_stmt|;
if|if
condition|(
name|proxyHost
operator|==
literal|null
operator|||
literal|""
operator|.
name|equals
argument_list|(
name|proxyHost
operator|.
name|trim
argument_list|()
argument_list|)
condition|)
block|{
name|proxyHost
operator|=
name|System
operator|.
name|getProperty
argument_list|(
literal|"http.proxyHost"
argument_list|)
expr_stmt|;
name|properties
operator|.
name|put
argument_list|(
literal|"http-proxy-port"
argument_list|,
name|System
operator|.
name|getProperty
argument_list|(
literal|"http.proxyPort"
argument_list|)
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|proxyHost
operator|==
literal|null
operator|||
literal|""
operator|.
name|equals
argument_list|(
name|proxyHost
operator|.
name|trim
argument_list|()
argument_list|)
condition|)
block|{
return|return
literal|null
return|;
block|}
name|String
name|proxyExceptions
init|=
operator|(
name|String
operator|)
name|properties
operator|.
name|get
argument_list|(
literal|"http-proxy-exceptions"
argument_list|)
decl_stmt|;
name|String
name|proxyExceptionsSeparator
init|=
literal|","
decl_stmt|;
if|if
condition|(
name|proxyExceptions
operator|==
literal|null
condition|)
block|{
name|proxyExceptions
operator|=
name|System
operator|.
name|getProperty
argument_list|(
literal|"http.nonProxyHosts"
argument_list|)
expr_stmt|;
name|proxyExceptionsSeparator
operator|=
literal|"|"
expr_stmt|;
block|}
if|if
condition|(
name|proxyExceptions
operator|!=
literal|null
condition|)
block|{
for|for
control|(
name|StringTokenizer
name|exceptions
init|=
operator|new
name|StringTokenizer
argument_list|(
name|proxyExceptions
argument_list|,
name|proxyExceptionsSeparator
argument_list|)
init|;
name|exceptions
operator|.
name|hasMoreTokens
argument_list|()
condition|;
control|)
block|{
name|String
name|exception
init|=
name|exceptions
operator|.
name|nextToken
argument_list|()
operator|.
name|trim
argument_list|()
decl_stmt|;
if|if
condition|(
name|DefaultSVNOptions
operator|.
name|matches
argument_list|(
name|exception
argument_list|,
name|host
argument_list|)
condition|)
block|{
return|return
literal|null
return|;
block|}
block|}
block|}
name|String
name|proxyPort
init|=
operator|(
name|String
operator|)
name|properties
operator|.
name|get
argument_list|(
literal|"http-proxy-port"
argument_list|)
decl_stmt|;
name|String
name|proxyUser
init|=
operator|(
name|String
operator|)
name|properties
operator|.
name|get
argument_list|(
literal|"http-proxy-username"
argument_list|)
decl_stmt|;
name|String
name|proxyPassword
init|=
operator|(
name|String
operator|)
name|properties
operator|.
name|get
argument_list|(
literal|"http-proxy-password"
argument_list|)
decl_stmt|;
return|return
operator|new
name|SimpleProxyManager
argument_list|(
name|proxyHost
argument_list|,
name|proxyPort
argument_list|,
name|proxyUser
argument_list|,
name|proxyPassword
argument_list|)
return|;
block|}
specifier|public
name|TrustManager
name|getTrustManager
parameter_list|(
name|SVNURL
name|url
parameter_list|)
throws|throws
name|SVNException
block|{
name|String
name|host
init|=
name|url
operator|.
name|getHost
argument_list|()
decl_stmt|;
name|Map
name|properties
init|=
name|getHostProperties
argument_list|(
name|host
argument_list|)
decl_stmt|;
name|boolean
name|trustAll
init|=
operator|!
literal|"no"
operator|.
name|equalsIgnoreCase
argument_list|(
operator|(
name|String
operator|)
name|properties
operator|.
name|get
argument_list|(
literal|"ssl-trust-default-ca"
argument_list|)
argument_list|)
decl_stmt|;
comment|// jdk keystore
name|String
name|sslAuthorityFiles
init|=
operator|(
name|String
operator|)
name|properties
operator|.
name|get
argument_list|(
literal|"ssl-authority-files"
argument_list|)
decl_stmt|;
comment|// "pem" files
name|Collection
name|trustStorages
init|=
operator|new
name|ArrayList
argument_list|()
decl_stmt|;
if|if
condition|(
name|sslAuthorityFiles
operator|!=
literal|null
condition|)
block|{
for|for
control|(
name|StringTokenizer
name|files
init|=
operator|new
name|StringTokenizer
argument_list|(
name|sslAuthorityFiles
argument_list|,
literal|";"
argument_list|)
init|;
name|files
operator|.
name|hasMoreTokens
argument_list|()
condition|;
control|)
block|{
name|String
name|fileName
init|=
name|files
operator|.
name|nextToken
argument_list|()
decl_stmt|;
name|fileName
operator|=
name|fileName
operator|==
literal|null
condition|?
literal|null
else|:
name|fileName
operator|.
name|trim
argument_list|()
expr_stmt|;
if|if
condition|(
name|fileName
operator|!=
literal|null
operator|&&
operator|!
literal|""
operator|.
name|equals
argument_list|(
name|fileName
argument_list|)
condition|)
block|{
name|trustStorages
operator|.
name|add
argument_list|(
operator|new
name|Resource
argument_list|(
name|fileName
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
block|}
name|File
index|[]
name|serverCertFiles
init|=
operator|(
name|File
index|[]
operator|)
name|trustStorages
operator|.
name|toArray
argument_list|(
operator|new
name|Resource
index|[
name|trustStorages
operator|.
name|size
argument_list|()
index|]
argument_list|)
decl_stmt|;
name|File
name|authDir
init|=
operator|new
name|Resource
argument_list|(
name|myConfigDirectory
argument_list|,
literal|"auth/svn.ssl.server"
argument_list|)
decl_stmt|;
return|return
operator|new
name|DefaultSVNSSLTrustManager
argument_list|(
name|authDir
argument_list|,
name|url
argument_list|,
name|serverCertFiles
argument_list|,
name|trustAll
argument_list|,
name|this
argument_list|)
return|;
block|}
specifier|private
name|Map
name|getHostProperties
parameter_list|(
name|String
name|host
parameter_list|)
block|{
name|Map
name|globalProps
init|=
name|getServersFile
argument_list|()
operator|.
name|getProperties
argument_list|(
literal|"global"
argument_list|)
decl_stmt|;
name|String
name|groupName
init|=
name|getGroupName
argument_list|(
name|getServersFile
argument_list|()
operator|.
name|getProperties
argument_list|(
literal|"groups"
argument_list|)
argument_list|,
name|host
argument_list|)
decl_stmt|;
if|if
condition|(
name|groupName
operator|!=
literal|null
condition|)
block|{
name|Map
name|hostProps
init|=
name|getServersFile
argument_list|()
operator|.
name|getProperties
argument_list|(
name|groupName
argument_list|)
decl_stmt|;
name|globalProps
operator|.
name|putAll
argument_list|(
name|hostProps
argument_list|)
expr_stmt|;
block|}
return|return
name|globalProps
return|;
block|}
specifier|public
name|SVNAuthentication
name|getFirstAuthentication
parameter_list|(
name|String
name|kind
parameter_list|,
name|String
name|realm
parameter_list|,
name|SVNURL
name|url
parameter_list|)
throws|throws
name|SVNException
block|{
name|myPreviousAuthentication
operator|=
literal|null
expr_stmt|;
name|myPreviousErrorMessage
operator|=
literal|null
expr_stmt|;
name|myLastProviderIndex
operator|=
literal|0
expr_stmt|;
name|myLastLoadedAuth
operator|=
literal|null
expr_stmt|;
comment|// iterate over providers and ask for auth till it is found.
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|myProviders
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
if|if
condition|(
name|myProviders
index|[
name|i
index|]
operator|==
literal|null
condition|)
block|{
continue|continue;
block|}
name|SVNAuthentication
name|auth
init|=
name|myProviders
index|[
name|i
index|]
operator|.
name|requestClientAuthentication
argument_list|(
name|kind
argument_list|,
name|url
argument_list|,
name|realm
argument_list|,
literal|null
argument_list|,
name|myPreviousAuthentication
argument_list|,
name|myIsStoreAuth
argument_list|)
decl_stmt|;
if|if
condition|(
name|auth
operator|!=
literal|null
condition|)
block|{
if|if
condition|(
name|i
operator|==
literal|2
condition|)
block|{
name|myLastLoadedAuth
operator|=
name|auth
expr_stmt|;
block|}
name|myPreviousAuthentication
operator|=
name|auth
expr_stmt|;
name|myLastProviderIndex
operator|=
name|i
expr_stmt|;
if|if
condition|(
name|auth
operator|.
name|isPartial
argument_list|()
condition|)
block|{
continue|continue;
block|}
return|return
name|auth
return|;
block|}
if|if
condition|(
name|i
operator|==
literal|3
condition|)
block|{
name|SVNErrorManager
operator|.
name|cancel
argument_list|(
literal|"authentication cancelled"
argument_list|,
name|SVNLogType
operator|.
name|WC
argument_list|)
expr_stmt|;
block|}
block|}
comment|// end of probe. if we were asked for username for ssh and didn't find anything
comment|// report something default.
if|if
condition|(
name|ISVNAuthenticationManager
operator|.
name|USERNAME
operator|.
name|equals
argument_list|(
name|kind
argument_list|)
condition|)
block|{
comment|// user auth shouldn't be null.
return|return
operator|new
name|SVNUserNameAuthentication
argument_list|(
literal|""
argument_list|,
name|isAuthStorageEnabled
argument_list|(
name|url
argument_list|)
argument_list|,
name|url
argument_list|,
literal|false
argument_list|)
return|;
block|}
name|SVNErrorManager
operator|.
name|authenticationFailed
argument_list|(
literal|"Authentication required for ''{0}''"
argument_list|,
name|realm
argument_list|)
expr_stmt|;
return|return
literal|null
return|;
block|}
specifier|public
name|SVNAuthentication
name|getNextAuthentication
parameter_list|(
name|String
name|kind
parameter_list|,
name|String
name|realm
parameter_list|,
name|SVNURL
name|url
parameter_list|)
throws|throws
name|SVNException
block|{
name|int
name|index
init|=
name|Math
operator|.
name|min
argument_list|(
name|myLastProviderIndex
operator|+
literal|1
argument_list|,
literal|3
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
name|index
init|;
name|i
operator|<
name|myProviders
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
if|if
condition|(
name|myProviders
index|[
name|i
index|]
operator|==
literal|null
condition|)
block|{
continue|continue;
block|}
if|if
condition|(
operator|(
name|i
operator|==
literal|1
operator|||
name|i
operator|==
literal|2
operator|)
operator|&&
name|hasExplicitCredentials
argument_list|(
name|kind
argument_list|)
condition|)
block|{
continue|continue;
block|}
name|SVNAuthentication
name|auth
init|=
name|myProviders
index|[
name|i
index|]
operator|.
name|requestClientAuthentication
argument_list|(
name|kind
argument_list|,
name|url
argument_list|,
name|realm
argument_list|,
name|myPreviousErrorMessage
argument_list|,
name|myPreviousAuthentication
argument_list|,
name|myIsStoreAuth
argument_list|)
decl_stmt|;
if|if
condition|(
name|auth
operator|!=
literal|null
condition|)
block|{
if|if
condition|(
name|i
operator|==
literal|2
condition|)
block|{
name|myLastLoadedAuth
operator|=
name|auth
expr_stmt|;
block|}
name|myPreviousAuthentication
operator|=
name|auth
expr_stmt|;
name|myLastProviderIndex
operator|=
name|i
expr_stmt|;
if|if
condition|(
name|auth
operator|.
name|isPartial
argument_list|()
condition|)
block|{
continue|continue;
block|}
return|return
name|auth
return|;
block|}
if|if
condition|(
name|i
operator|==
literal|3
condition|)
block|{
name|SVNErrorManager
operator|.
name|cancel
argument_list|(
literal|"authentication cancelled"
argument_list|,
name|SVNLogType
operator|.
name|WC
argument_list|)
expr_stmt|;
block|}
block|}
name|SVNErrorManager
operator|.
name|authenticationFailed
argument_list|(
literal|"Authentication required for ''{0}''"
argument_list|,
name|realm
argument_list|)
expr_stmt|;
return|return
literal|null
return|;
block|}
specifier|public
name|void
name|acknowledgeAuthentication
parameter_list|(
name|boolean
name|accepted
parameter_list|,
name|String
name|kind
parameter_list|,
name|String
name|realm
parameter_list|,
name|SVNErrorMessage
name|errorMessage
parameter_list|,
name|SVNAuthentication
name|authentication
parameter_list|)
throws|throws
name|SVNException
block|{
if|if
condition|(
operator|!
name|accepted
condition|)
block|{
name|myPreviousErrorMessage
operator|=
name|errorMessage
expr_stmt|;
name|myPreviousAuthentication
operator|=
name|authentication
expr_stmt|;
name|myLastLoadedAuth
operator|=
literal|null
expr_stmt|;
return|return;
block|}
if|if
condition|(
name|myIsStoreAuth
operator|&&
name|authentication
operator|.
name|isStorageAllowed
argument_list|()
operator|&&
name|myProviders
index|[
literal|2
index|]
operator|instanceof
name|IPersistentAuthenticationProvider
condition|)
block|{
comment|// compare this authentication with last loaded from provider[2].
if|if
condition|(
name|myLastLoadedAuth
operator|==
literal|null
operator|||
name|myLastLoadedAuth
operator|!=
name|authentication
condition|)
block|{
operator|(
operator|(
name|IPersistentAuthenticationProvider
operator|)
name|myProviders
index|[
literal|2
index|]
operator|)
operator|.
name|saveAuthentication
argument_list|(
name|authentication
argument_list|,
name|kind
argument_list|,
name|realm
argument_list|)
expr_stmt|;
block|}
block|}
name|myLastLoadedAuth
operator|=
literal|null
expr_stmt|;
if|if
condition|(
operator|!
name|hasExplicitCredentials
argument_list|(
name|kind
argument_list|)
condition|)
block|{
comment|// do not cache explicit credentials in runtime cache?
operator|(
operator|(
name|CacheAuthenticationProvider
operator|)
name|myProviders
index|[
literal|1
index|]
operator|)
operator|.
name|saveAuthentication
argument_list|(
name|authentication
argument_list|,
name|realm
argument_list|)
expr_stmt|;
block|}
block|}
specifier|public
name|void
name|acknowledgeTrustManager
parameter_list|(
name|TrustManager
name|manager
parameter_list|)
block|{
block|}
specifier|private
name|boolean
name|hasExplicitCredentials
parameter_list|(
name|String
name|kind
parameter_list|)
block|{
if|if
condition|(
name|ISVNAuthenticationManager
operator|.
name|PASSWORD
operator|.
name|equals
argument_list|(
name|kind
argument_list|)
operator|||
name|ISVNAuthenticationManager
operator|.
name|USERNAME
operator|.
name|equals
argument_list|(
name|kind
argument_list|)
operator|||
name|ISVNAuthenticationManager
operator|.
name|SSH
operator|.
name|equals
argument_list|(
name|kind
argument_list|)
condition|)
block|{
if|if
condition|(
name|myProviders
index|[
literal|0
index|]
operator|instanceof
name|DumbAuthenticationProvider
condition|)
block|{
name|DumbAuthenticationProvider
name|authProvider
init|=
operator|(
name|DumbAuthenticationProvider
operator|)
name|myProviders
index|[
literal|0
index|]
decl_stmt|;
comment|// for user name has to be user
name|String
name|userName
init|=
name|authProvider
operator|.
name|myUserName
decl_stmt|;
name|String
name|password
init|=
name|authProvider
operator|.
name|myPassword
decl_stmt|;
if|if
condition|(
name|ISVNAuthenticationManager
operator|.
name|USERNAME
operator|.
name|equals
argument_list|(
name|kind
argument_list|)
condition|)
block|{
return|return
name|userName
operator|!=
literal|null
operator|&&
operator|!
literal|""
operator|.
name|equals
argument_list|(
name|userName
argument_list|)
return|;
block|}
comment|// do not look into cache when both password and user name specified
comment|// if only username is specified, then do look, but only for that username
return|return
name|password
operator|!=
literal|null
operator|&&
operator|!
literal|""
operator|.
name|equals
argument_list|(
name|password
argument_list|)
operator|&&
name|userName
operator|!=
literal|null
operator|&&
operator|!
literal|""
operator|.
name|equals
argument_list|(
name|userName
argument_list|)
return|;
block|}
block|}
return|return
literal|false
return|;
block|}
specifier|protected
name|SVNCompositeConfigFile
name|getServersFile
parameter_list|()
block|{
if|if
condition|(
name|myServersFile
operator|==
literal|null
condition|)
block|{
name|SVNConfigFile
operator|.
name|createDefaultConfiguration
argument_list|(
name|myConfigDirectory
argument_list|)
expr_stmt|;
name|SVNConfigFile
name|userConfig
init|=
operator|new
name|SVNConfigFile
argument_list|(
operator|new
name|Resource
argument_list|(
name|myConfigDirectory
argument_list|,
literal|"servers"
argument_list|)
argument_list|)
decl_stmt|;
name|SVNConfigFile
name|systemConfig
init|=
operator|new
name|SVNConfigFile
argument_list|(
operator|new
name|Resource
argument_list|(
name|SVNFileUtil
operator|.
name|getSystemConfigurationDirectory
argument_list|()
argument_list|,
literal|"servers"
argument_list|)
argument_list|)
decl_stmt|;
name|myServersFile
operator|=
operator|new
name|SVNCompositeConfigFile
argument_list|(
name|systemConfig
argument_list|,
name|userConfig
argument_list|)
expr_stmt|;
name|myServersFile
operator|.
name|setGroupsToOptions
argument_list|(
name|myServersOptions
argument_list|)
expr_stmt|;
block|}
return|return
name|myServersFile
return|;
block|}
specifier|protected
name|SVNCompositeConfigFile
name|getConfigFile
parameter_list|()
block|{
if|if
condition|(
name|myConfigFile
operator|==
literal|null
condition|)
block|{
name|SVNConfigFile
operator|.
name|createDefaultConfiguration
argument_list|(
name|myConfigDirectory
argument_list|)
expr_stmt|;
name|SVNConfigFile
name|userConfig
init|=
operator|new
name|SVNConfigFile
argument_list|(
operator|new
name|Resource
argument_list|(
name|myConfigDirectory
argument_list|,
literal|"config"
argument_list|)
argument_list|)
decl_stmt|;
name|SVNConfigFile
name|systemConfig
init|=
operator|new
name|SVNConfigFile
argument_list|(
operator|new
name|Resource
argument_list|(
name|SVNFileUtil
operator|.
name|getSystemConfigurationDirectory
argument_list|()
argument_list|,
literal|"config"
argument_list|)
argument_list|)
decl_stmt|;
name|myConfigFile
operator|=
operator|new
name|SVNCompositeConfigFile
argument_list|(
name|systemConfig
argument_list|,
name|userConfig
argument_list|)
expr_stmt|;
name|myConfigFile
operator|.
name|setGroupsToOptions
argument_list|(
name|myConfigOptions
argument_list|)
expr_stmt|;
block|}
return|return
name|myConfigFile
return|;
block|}
comment|/**      * Sets a specific runtime authentication storage manager. This storage      * manager will be asked by this auth manager for cached credentials as      * well as used to cache new ones accepted recently.      *      * @param storage a custom auth storage manager      */
specifier|public
name|void
name|setRuntimeStorage
parameter_list|(
name|ISVNAuthenticationStorage
name|storage
parameter_list|)
block|{
name|myRuntimeAuthStorage
operator|=
name|storage
expr_stmt|;
block|}
specifier|protected
name|ISVNAuthenticationStorage
name|getRuntimeAuthStorage
parameter_list|()
block|{
if|if
condition|(
name|myRuntimeAuthStorage
operator|==
literal|null
condition|)
block|{
name|myRuntimeAuthStorage
operator|=
operator|new
name|ISVNAuthenticationStorage
argument_list|()
block|{
specifier|private
name|Map
name|myData
init|=
operator|new
name|SVNHashMap
argument_list|()
decl_stmt|;
specifier|public
name|void
name|putData
parameter_list|(
name|String
name|kind
parameter_list|,
name|String
name|realm
parameter_list|,
name|Object
name|data
parameter_list|)
block|{
name|myData
operator|.
name|put
argument_list|(
name|kind
operator|+
literal|"$"
operator|+
name|realm
argument_list|,
name|data
argument_list|)
expr_stmt|;
block|}
specifier|public
name|Object
name|getData
parameter_list|(
name|String
name|kind
parameter_list|,
name|String
name|realm
parameter_list|)
block|{
return|return
name|myData
operator|.
name|get
argument_list|(
name|kind
operator|+
literal|"$"
operator|+
name|realm
argument_list|)
return|;
block|}
block|}
expr_stmt|;
block|}
return|return
name|myRuntimeAuthStorage
return|;
block|}
specifier|protected
name|boolean
name|isAuthStorageEnabled
parameter_list|(
name|SVNURL
name|url
parameter_list|)
block|{
name|String
name|host
init|=
name|url
operator|!=
literal|null
condition|?
name|url
operator|.
name|getHost
argument_list|()
else|:
literal|null
decl_stmt|;
name|Map
name|properties
init|=
name|getHostProperties
argument_list|(
name|host
argument_list|)
decl_stmt|;
name|String
name|storeAuthCreds
init|=
operator|(
name|String
operator|)
name|properties
operator|.
name|get
argument_list|(
literal|"store-auth-creds"
argument_list|)
decl_stmt|;
if|if
condition|(
name|storeAuthCreds
operator|==
literal|null
condition|)
block|{
return|return
name|myIsStoreAuth
return|;
block|}
return|return
literal|"yes"
operator|.
name|equalsIgnoreCase
argument_list|(
name|storeAuthCreds
argument_list|)
operator|||
literal|"on"
operator|.
name|equalsIgnoreCase
argument_list|(
name|storeAuthCreds
argument_list|)
operator|||
literal|"true"
operator|.
name|equalsIgnoreCase
argument_list|(
name|storeAuthCreds
argument_list|)
return|;
block|}
specifier|protected
name|boolean
name|isStorePasswords
parameter_list|(
name|SVNURL
name|url
parameter_list|)
block|{
name|boolean
name|store
init|=
literal|true
decl_stmt|;
name|String
name|value
init|=
name|getConfigFile
argument_list|()
operator|.
name|getPropertyValue
argument_list|(
literal|"auth"
argument_list|,
literal|"store-passwords"
argument_list|)
decl_stmt|;
if|if
condition|(
name|value
operator|!=
literal|null
condition|)
block|{
name|store
operator|=
literal|"yes"
operator|.
name|equalsIgnoreCase
argument_list|(
name|value
argument_list|)
operator|||
literal|"on"
operator|.
name|equalsIgnoreCase
argument_list|(
name|value
argument_list|)
operator|||
literal|"true"
operator|.
name|equalsIgnoreCase
argument_list|(
name|value
argument_list|)
expr_stmt|;
block|}
name|String
name|host
init|=
name|url
operator|!=
literal|null
condition|?
name|url
operator|.
name|getHost
argument_list|()
else|:
literal|null
decl_stmt|;
name|Map
name|properties
init|=
name|getHostProperties
argument_list|(
name|host
argument_list|)
decl_stmt|;
name|String
name|storePasswords
init|=
operator|(
name|String
operator|)
name|properties
operator|.
name|get
argument_list|(
literal|"store-passwords"
argument_list|)
decl_stmt|;
if|if
condition|(
name|storePasswords
operator|==
literal|null
condition|)
block|{
return|return
name|store
return|;
block|}
return|return
literal|"yes"
operator|.
name|equalsIgnoreCase
argument_list|(
name|storePasswords
argument_list|)
operator|||
literal|"on"
operator|.
name|equalsIgnoreCase
argument_list|(
name|storePasswords
argument_list|)
operator|||
literal|"true"
operator|.
name|equalsIgnoreCase
argument_list|(
name|storePasswords
argument_list|)
return|;
block|}
specifier|protected
name|boolean
name|isStorePlainTextPasswords
parameter_list|(
name|String
name|realm
parameter_list|,
name|SVNAuthentication
name|auth
parameter_list|)
throws|throws
name|SVNException
block|{
name|SVNURL
name|url
init|=
name|auth
operator|.
name|getURL
argument_list|()
decl_stmt|;
name|String
name|host
init|=
name|url
operator|!=
literal|null
condition|?
name|url
operator|.
name|getHost
argument_list|()
else|:
literal|null
decl_stmt|;
name|Map
name|properties
init|=
name|getHostProperties
argument_list|(
name|host
argument_list|)
decl_stmt|;
name|String
name|storePlainTextPasswords
init|=
operator|(
name|String
operator|)
name|properties
operator|.
name|get
argument_list|(
literal|"store-plaintext-passwords"
argument_list|)
decl_stmt|;
if|if
condition|(
name|storePlainTextPasswords
operator|==
literal|null
condition|)
block|{
if|if
condition|(
name|myAuthStoreHandler
operator|!=
literal|null
condition|)
block|{
return|return
name|myAuthStoreHandler
operator|.
name|canStorePlainTextPasswords
argument_list|(
name|realm
argument_list|,
name|auth
argument_list|)
return|;
block|}
return|return
literal|false
return|;
block|}
return|return
literal|"yes"
operator|.
name|equalsIgnoreCase
argument_list|(
name|storePlainTextPasswords
argument_list|)
operator|||
literal|"on"
operator|.
name|equalsIgnoreCase
argument_list|(
name|storePlainTextPasswords
argument_list|)
operator|||
literal|"true"
operator|.
name|equalsIgnoreCase
argument_list|(
name|storePlainTextPasswords
argument_list|)
return|;
block|}
specifier|protected
name|boolean
name|isStoreSSLClientCertificatePassphrases
parameter_list|(
name|SVNURL
name|url
parameter_list|)
block|{
name|String
name|host
init|=
name|url
operator|!=
literal|null
condition|?
name|url
operator|.
name|getHost
argument_list|()
else|:
literal|null
decl_stmt|;
name|Map
name|properties
init|=
name|getHostProperties
argument_list|(
name|host
argument_list|)
decl_stmt|;
name|String
name|storeCertPassphrases
init|=
operator|(
name|String
operator|)
name|properties
operator|.
name|get
argument_list|(
literal|"store-ssl-client-cert-pp"
argument_list|)
decl_stmt|;
if|if
condition|(
name|storeCertPassphrases
operator|==
literal|null
condition|)
block|{
return|return
literal|true
return|;
block|}
return|return
literal|"yes"
operator|.
name|equalsIgnoreCase
argument_list|(
name|storeCertPassphrases
argument_list|)
operator|||
literal|"on"
operator|.
name|equalsIgnoreCase
argument_list|(
name|storeCertPassphrases
argument_list|)
operator|||
literal|"true"
operator|.
name|equalsIgnoreCase
argument_list|(
name|storeCertPassphrases
argument_list|)
return|;
block|}
specifier|protected
name|boolean
name|isStorePlainTextPassphrases
parameter_list|(
name|String
name|realm
parameter_list|,
name|SVNAuthentication
name|auth
parameter_list|)
throws|throws
name|SVNException
block|{
name|SVNURL
name|url
init|=
name|auth
operator|.
name|getURL
argument_list|()
decl_stmt|;
name|String
name|host
init|=
name|url
operator|!=
literal|null
condition|?
name|url
operator|.
name|getHost
argument_list|()
else|:
literal|null
decl_stmt|;
name|Map
name|properties
init|=
name|getHostProperties
argument_list|(
name|host
argument_list|)
decl_stmt|;
name|String
name|storePlainTextPassphrases
init|=
operator|(
name|String
operator|)
name|properties
operator|.
name|get
argument_list|(
literal|"store-ssl-client-cert-pp-plaintext"
argument_list|)
decl_stmt|;
if|if
condition|(
name|storePlainTextPassphrases
operator|==
literal|null
condition|)
block|{
if|if
condition|(
name|myAuthStoreHandler
operator|!=
literal|null
condition|)
block|{
return|return
name|myAuthStoreHandler
operator|.
name|canStorePlainTextPassphrases
argument_list|(
name|realm
argument_list|,
name|auth
argument_list|)
return|;
block|}
return|return
literal|false
return|;
block|}
return|return
literal|"yes"
operator|.
name|equalsIgnoreCase
argument_list|(
name|storePlainTextPassphrases
argument_list|)
operator|||
literal|"on"
operator|.
name|equalsIgnoreCase
argument_list|(
name|storePlainTextPassphrases
argument_list|)
operator|||
literal|"true"
operator|.
name|equalsIgnoreCase
argument_list|(
name|storePlainTextPassphrases
argument_list|)
return|;
block|}
specifier|protected
name|String
name|getUserName
parameter_list|(
name|SVNURL
name|url
parameter_list|)
block|{
name|String
name|host
init|=
name|url
operator|!=
literal|null
condition|?
name|url
operator|.
name|getHost
argument_list|()
else|:
literal|null
decl_stmt|;
comment|//        if (url != null&& url.getUserInfo() != null) {
comment|//            return url.getUserInfo();
comment|//        }
name|Map
name|properties
init|=
name|getHostProperties
argument_list|(
name|host
argument_list|)
decl_stmt|;
name|String
name|userName
init|=
operator|(
name|String
operator|)
name|properties
operator|.
name|get
argument_list|(
literal|"username"
argument_list|)
decl_stmt|;
return|return
name|userName
return|;
block|}
specifier|protected
name|ISVNAuthenticationProvider
name|getAuthenticationProvider
parameter_list|()
block|{
return|return
name|myProviders
index|[
literal|3
index|]
return|;
block|}
specifier|protected
name|int
name|getDefaultSSHPortNumber
parameter_list|()
block|{
name|Map
name|tunnels
init|=
name|getConfigFile
argument_list|()
operator|.
name|getProperties
argument_list|(
literal|"tunnels"
argument_list|)
decl_stmt|;
if|if
condition|(
name|tunnels
operator|==
literal|null
operator|||
operator|!
name|tunnels
operator|.
name|containsKey
argument_list|(
literal|"ssh"
argument_list|)
condition|)
block|{
return|return
operator|-
literal|1
return|;
block|}
name|String
name|sshProgram
init|=
operator|(
name|String
operator|)
name|tunnels
operator|.
name|get
argument_list|(
literal|"ssh"
argument_list|)
decl_stmt|;
if|if
condition|(
name|sshProgram
operator|==
literal|null
condition|)
block|{
return|return
operator|-
literal|1
return|;
block|}
name|String
name|port
init|=
name|getOptionValue
argument_list|(
name|sshProgram
argument_list|,
name|sshProgram
operator|.
name|toLowerCase
argument_list|()
operator|.
name|trim
argument_list|()
operator|.
name|startsWith
argument_list|(
literal|"plink"
argument_list|)
condition|?
literal|"-p"
else|:
literal|"-P"
argument_list|)
decl_stmt|;
name|port
operator|=
name|port
operator|==
literal|null
condition|?
name|System
operator|.
name|getProperty
argument_list|(
literal|"svnkit.ssh2.port"
argument_list|,
name|System
operator|.
name|getProperty
argument_list|(
literal|"javasvn.ssh2.port"
argument_list|)
argument_list|)
else|:
name|port
expr_stmt|;
if|if
condition|(
name|port
operator|!=
literal|null
condition|)
block|{
try|try
block|{
return|return
name|Integer
operator|.
name|parseInt
argument_list|(
name|port
argument_list|)
return|;
block|}
catch|catch
parameter_list|(
name|NumberFormatException
name|e
parameter_list|)
block|{
comment|//
block|}
block|}
return|return
operator|-
literal|1
return|;
block|}
specifier|protected
name|SVNSSHAuthentication
name|getDefaultSSHAuthentication
parameter_list|()
block|{
name|Map
name|tunnels
init|=
name|getConfigFile
argument_list|()
operator|.
name|getProperties
argument_list|(
literal|"tunnels"
argument_list|)
decl_stmt|;
if|if
condition|(
name|tunnels
operator|==
literal|null
operator|||
operator|!
name|tunnels
operator|.
name|containsKey
argument_list|(
literal|"ssh"
argument_list|)
condition|)
block|{
name|tunnels
operator|=
operator|new
name|SVNHashMap
argument_list|()
expr_stmt|;
block|}
name|String
name|sshProgram
init|=
operator|(
name|String
operator|)
name|tunnels
operator|.
name|get
argument_list|(
literal|"ssh"
argument_list|)
decl_stmt|;
name|String
name|userName
init|=
name|getOptionValue
argument_list|(
name|sshProgram
argument_list|,
literal|"-l"
argument_list|)
decl_stmt|;
name|String
name|password
init|=
name|getOptionValue
argument_list|(
name|sshProgram
argument_list|,
literal|"-pw"
argument_list|)
decl_stmt|;
name|String
name|keyFile
init|=
name|getOptionValue
argument_list|(
name|sshProgram
argument_list|,
literal|"-i"
argument_list|)
decl_stmt|;
name|String
name|port
init|=
name|getOptionValue
argument_list|(
name|sshProgram
argument_list|,
name|sshProgram
operator|!=
literal|null
operator|&&
name|sshProgram
operator|.
name|toLowerCase
argument_list|()
operator|.
name|trim
argument_list|()
operator|.
name|startsWith
argument_list|(
literal|"plink"
argument_list|)
condition|?
literal|"-P"
else|:
literal|"-p"
argument_list|)
decl_stmt|;
name|String
name|passphrase
init|=
literal|null
decl_stmt|;
comment|// fallback to system properties.
name|userName
operator|=
name|userName
operator|==
literal|null
condition|?
name|System
operator|.
name|getProperty
argument_list|(
literal|"svnkit.ssh2.username"
argument_list|,
name|System
operator|.
name|getProperty
argument_list|(
literal|"javasvn.ssh2.username"
argument_list|)
argument_list|)
else|:
name|userName
expr_stmt|;
name|keyFile
operator|=
name|keyFile
operator|==
literal|null
condition|?
name|System
operator|.
name|getProperty
argument_list|(
literal|"svnkit.ssh2.key"
argument_list|,
name|System
operator|.
name|getProperty
argument_list|(
literal|"javasvn.ssh2.key"
argument_list|)
argument_list|)
else|:
name|keyFile
expr_stmt|;
name|passphrase
operator|=
name|passphrase
operator|==
literal|null
condition|?
name|System
operator|.
name|getProperty
argument_list|(
literal|"svnkit.ssh2.passphrase"
argument_list|,
name|System
operator|.
name|getProperty
argument_list|(
literal|"javasvn.ssh2.passphrase"
argument_list|)
argument_list|)
else|:
name|passphrase
expr_stmt|;
name|password
operator|=
name|password
operator|==
literal|null
condition|?
name|System
operator|.
name|getProperty
argument_list|(
literal|"svnkit.ssh2.password"
argument_list|,
name|System
operator|.
name|getProperty
argument_list|(
literal|"javasvn.ssh2.password"
argument_list|)
argument_list|)
else|:
name|password
expr_stmt|;
name|port
operator|=
name|port
operator|==
literal|null
condition|?
name|System
operator|.
name|getProperty
argument_list|(
literal|"svnkit.ssh2.port"
argument_list|,
name|System
operator|.
name|getProperty
argument_list|(
literal|"javasvn.ssh2.port"
argument_list|)
argument_list|)
else|:
name|port
expr_stmt|;
if|if
condition|(
name|userName
operator|==
literal|null
condition|)
block|{
name|userName
operator|=
name|System
operator|.
name|getProperty
argument_list|(
literal|"user.name"
argument_list|)
expr_stmt|;
block|}
name|int
name|portNumber
init|=
operator|-
literal|1
decl_stmt|;
if|if
condition|(
name|port
operator|!=
literal|null
condition|)
block|{
try|try
block|{
name|portNumber
operator|=
name|Integer
operator|.
name|parseInt
argument_list|(
name|port
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|NumberFormatException
name|e
parameter_list|)
block|{
block|}
block|}
if|if
condition|(
name|userName
operator|!=
literal|null
operator|&&
name|password
operator|!=
literal|null
condition|)
block|{
return|return
operator|new
name|SVNSSHAuthentication
argument_list|(
name|userName
argument_list|,
name|password
argument_list|,
name|portNumber
argument_list|,
name|isAuthStorageEnabled
argument_list|(
literal|null
argument_list|)
argument_list|,
literal|null
argument_list|,
literal|false
argument_list|)
return|;
block|}
if|else if
condition|(
name|userName
operator|!=
literal|null
operator|&&
name|keyFile
operator|!=
literal|null
condition|)
block|{
return|return
operator|new
name|SVNSSHAuthentication
argument_list|(
name|userName
argument_list|,
operator|new
name|Resource
argument_list|(
name|keyFile
argument_list|)
argument_list|,
name|passphrase
argument_list|,
name|portNumber
argument_list|,
name|isAuthStorageEnabled
argument_list|(
literal|null
argument_list|)
argument_list|,
literal|null
argument_list|,
literal|false
argument_list|)
return|;
block|}
return|return
literal|null
return|;
block|}
specifier|protected
name|ISVNAuthenticationProvider
name|createDefaultAuthenticationProvider
parameter_list|(
name|String
name|userName
parameter_list|,
name|String
name|password
parameter_list|,
name|File
name|privateKey
parameter_list|,
name|String
name|passphrase
parameter_list|,
name|boolean
name|allowSave
parameter_list|)
block|{
return|return
operator|new
name|DumbAuthenticationProvider
argument_list|(
name|userName
argument_list|,
name|password
argument_list|,
name|privateKey
argument_list|,
name|passphrase
argument_list|,
name|allowSave
argument_list|)
return|;
block|}
specifier|protected
name|ISVNAuthenticationProvider
name|createRuntimeAuthenticationProvider
parameter_list|()
block|{
return|return
operator|new
name|CacheAuthenticationProvider
argument_list|()
return|;
block|}
specifier|protected
name|ISVNAuthenticationProvider
name|createCacheAuthenticationProvider
parameter_list|(
name|File
name|authDir
parameter_list|,
name|String
name|userName
parameter_list|)
block|{
return|return
operator|new
name|PersistentAuthenticationProvider
argument_list|(
name|authDir
argument_list|,
name|userName
argument_list|)
return|;
block|}
specifier|private
specifier|static
name|String
name|getOptionValue
parameter_list|(
name|String
name|commandLine
parameter_list|,
name|String
name|optionName
parameter_list|)
block|{
if|if
condition|(
name|commandLine
operator|==
literal|null
operator|||
name|optionName
operator|==
literal|null
condition|)
block|{
return|return
literal|null
return|;
block|}
for|for
control|(
name|StringTokenizer
name|options
init|=
operator|new
name|StringTokenizer
argument_list|(
name|commandLine
argument_list|,
literal|" \r\n\t"
argument_list|)
init|;
name|options
operator|.
name|hasMoreTokens
argument_list|()
condition|;
control|)
block|{
name|String
name|option
init|=
name|options
operator|.
name|nextToken
argument_list|()
operator|.
name|trim
argument_list|()
decl_stmt|;
if|if
condition|(
name|optionName
operator|.
name|equals
argument_list|(
name|option
argument_list|)
operator|&&
name|options
operator|.
name|hasMoreTokens
argument_list|()
condition|)
block|{
return|return
name|options
operator|.
name|nextToken
argument_list|()
return|;
block|}
if|else if
condition|(
name|option
operator|.
name|startsWith
argument_list|(
name|optionName
argument_list|)
condition|)
block|{
return|return
name|option
operator|.
name|substring
argument_list|(
name|optionName
operator|.
name|length
argument_list|()
argument_list|)
return|;
block|}
block|}
return|return
literal|null
return|;
block|}
specifier|protected
class|class
name|DumbAuthenticationProvider
implements|implements
name|ISVNAuthenticationProvider
block|{
specifier|private
name|String
name|myUserName
decl_stmt|;
specifier|private
name|String
name|myPassword
decl_stmt|;
specifier|private
name|boolean
name|myIsStore
decl_stmt|;
specifier|private
name|String
name|myPassphrase
decl_stmt|;
specifier|private
name|File
name|myPrivateKey
decl_stmt|;
specifier|public
name|DumbAuthenticationProvider
parameter_list|(
name|String
name|userName
parameter_list|,
name|String
name|password
parameter_list|,
name|File
name|privateKey
parameter_list|,
name|String
name|passphrase
parameter_list|,
name|boolean
name|store
parameter_list|)
block|{
name|myUserName
operator|=
name|userName
expr_stmt|;
name|myPassword
operator|=
name|password
expr_stmt|;
name|myPrivateKey
operator|=
name|privateKey
expr_stmt|;
name|myPassphrase
operator|=
name|passphrase
expr_stmt|;
name|myIsStore
operator|=
name|store
expr_stmt|;
block|}
specifier|public
name|SVNAuthentication
name|requestClientAuthentication
parameter_list|(
name|String
name|kind
parameter_list|,
name|SVNURL
name|url
parameter_list|,
name|String
name|realm
parameter_list|,
name|SVNErrorMessage
name|errorMessage
parameter_list|,
name|SVNAuthentication
name|previousAuth
parameter_list|,
name|boolean
name|authMayBeStored
parameter_list|)
block|{
if|if
condition|(
name|previousAuth
operator|==
literal|null
condition|)
block|{
if|if
condition|(
name|ISVNAuthenticationManager
operator|.
name|SSH
operator|.
name|equals
argument_list|(
name|kind
argument_list|)
condition|)
block|{
name|SVNSSHAuthentication
name|sshAuth
init|=
name|getDefaultSSHAuthentication
argument_list|()
decl_stmt|;
if|if
condition|(
name|myUserName
operator|==
literal|null
operator|||
literal|""
operator|.
name|equals
argument_list|(
name|myUserName
operator|.
name|trim
argument_list|()
argument_list|)
condition|)
block|{
return|return
name|sshAuth
return|;
block|}
if|if
condition|(
name|myPrivateKey
operator|!=
literal|null
condition|)
block|{
return|return
operator|new
name|SVNSSHAuthentication
argument_list|(
name|myUserName
argument_list|,
name|myPrivateKey
argument_list|,
name|myPassphrase
argument_list|,
name|sshAuth
operator|!=
literal|null
condition|?
name|sshAuth
operator|.
name|getPortNumber
argument_list|()
else|:
operator|-
literal|1
argument_list|,
name|myIsStore
argument_list|,
name|url
argument_list|,
literal|false
argument_list|)
return|;
block|}
return|return
operator|new
name|SVNSSHAuthentication
argument_list|(
name|myUserName
argument_list|,
name|myPassword
argument_list|,
name|sshAuth
operator|!=
literal|null
condition|?
name|sshAuth
operator|.
name|getPortNumber
argument_list|()
else|:
operator|-
literal|1
argument_list|,
name|myIsStore
argument_list|,
name|url
argument_list|,
literal|false
argument_list|)
return|;
block|}
if|else if
condition|(
name|ISVNAuthenticationManager
operator|.
name|PASSWORD
operator|.
name|equals
argument_list|(
name|kind
argument_list|)
condition|)
block|{
if|if
condition|(
name|myUserName
operator|==
literal|null
operator|||
literal|""
operator|.
name|equals
argument_list|(
name|myUserName
operator|.
name|trim
argument_list|()
argument_list|)
condition|)
block|{
name|String
name|defaultUserName
init|=
name|getUserName
argument_list|(
name|url
argument_list|)
decl_stmt|;
name|defaultUserName
operator|=
name|defaultUserName
operator|==
literal|null
condition|?
name|System
operator|.
name|getProperty
argument_list|(
literal|"user.name"
argument_list|)
else|:
name|defaultUserName
expr_stmt|;
if|if
condition|(
name|defaultUserName
operator|!=
literal|null
condition|)
block|{
comment|//return new SVNUserNameAuthentication(defaultUserName, false);
name|SVNPasswordAuthentication
name|partialAuth
init|=
operator|new
name|SVNPasswordAuthentication
argument_list|(
name|defaultUserName
argument_list|,
literal|null
argument_list|,
literal|false
argument_list|,
literal|null
argument_list|,
literal|true
argument_list|)
decl_stmt|;
return|return
name|partialAuth
return|;
block|}
return|return
literal|null
return|;
block|}
if|if
condition|(
name|myPassword
operator|==
literal|null
condition|)
block|{
return|return
operator|new
name|SVNPasswordAuthentication
argument_list|(
name|myUserName
argument_list|,
literal|null
argument_list|,
literal|false
argument_list|,
literal|null
argument_list|,
literal|true
argument_list|)
return|;
block|}
return|return
operator|new
name|SVNPasswordAuthentication
argument_list|(
name|myUserName
argument_list|,
name|myPassword
argument_list|,
name|myIsStore
argument_list|,
name|url
argument_list|,
literal|false
argument_list|)
return|;
block|}
if|else if
condition|(
name|ISVNAuthenticationManager
operator|.
name|USERNAME
operator|.
name|equals
argument_list|(
name|kind
argument_list|)
condition|)
block|{
if|if
condition|(
name|myUserName
operator|==
literal|null
operator|||
literal|""
operator|.
name|equals
argument_list|(
name|myUserName
argument_list|)
condition|)
block|{
name|String
name|userName
init|=
name|System
operator|.
name|getProperty
argument_list|(
literal|"svnkit.ssh2.author"
argument_list|,
name|System
operator|.
name|getProperty
argument_list|(
literal|"javasvn.ssh2.author"
argument_list|)
argument_list|)
decl_stmt|;
if|if
condition|(
name|userName
operator|!=
literal|null
condition|)
block|{
return|return
operator|new
name|SVNUserNameAuthentication
argument_list|(
name|userName
argument_list|,
name|myIsStore
argument_list|,
name|url
argument_list|,
literal|false
argument_list|)
return|;
block|}
return|return
literal|null
return|;
block|}
return|return
operator|new
name|SVNUserNameAuthentication
argument_list|(
name|myUserName
argument_list|,
name|myIsStore
argument_list|,
name|url
argument_list|,
literal|false
argument_list|)
return|;
block|}
block|}
return|return
literal|null
return|;
block|}
specifier|public
name|int
name|acceptServerAuthentication
parameter_list|(
name|SVNURL
name|url
parameter_list|,
name|String
name|r
parameter_list|,
name|Object
name|serverAuth
parameter_list|,
name|boolean
name|resultMayBeStored
parameter_list|)
block|{
return|return
name|ACCEPTED
return|;
block|}
block|}
specifier|private
specifier|static
name|String
name|getGroupName
parameter_list|(
name|Map
name|groups
parameter_list|,
name|String
name|host
parameter_list|)
block|{
for|for
control|(
name|Iterator
name|names
init|=
name|groups
operator|.
name|keySet
argument_list|()
operator|.
name|iterator
argument_list|()
init|;
name|names
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|String
name|name
init|=
operator|(
name|String
operator|)
name|names
operator|.
name|next
argument_list|()
decl_stmt|;
name|String
name|pattern
init|=
operator|(
name|String
operator|)
name|groups
operator|.
name|get
argument_list|(
name|name
argument_list|)
decl_stmt|;
for|for
control|(
name|StringTokenizer
name|tokens
init|=
operator|new
name|StringTokenizer
argument_list|(
name|pattern
argument_list|,
literal|","
argument_list|)
init|;
name|tokens
operator|.
name|hasMoreTokens
argument_list|()
condition|;
control|)
block|{
name|String
name|token
init|=
name|tokens
operator|.
name|nextToken
argument_list|()
decl_stmt|;
if|if
condition|(
name|DefaultSVNOptions
operator|.
name|matches
argument_list|(
name|token
argument_list|,
name|host
argument_list|)
condition|)
block|{
return|return
name|name
return|;
block|}
block|}
block|}
return|return
literal|null
return|;
block|}
specifier|private
class|class
name|CacheAuthenticationProvider
implements|implements
name|ISVNAuthenticationProvider
block|{
specifier|public
name|SVNAuthentication
name|requestClientAuthentication
parameter_list|(
name|String
name|kind
parameter_list|,
name|SVNURL
name|url
parameter_list|,
name|String
name|realm
parameter_list|,
name|SVNErrorMessage
name|errorMessage
parameter_list|,
name|SVNAuthentication
name|previousAuth
parameter_list|,
name|boolean
name|authMayBeStored
parameter_list|)
block|{
return|return
operator|(
name|SVNAuthentication
operator|)
name|getRuntimeAuthStorage
argument_list|()
operator|.
name|getData
argument_list|(
name|kind
argument_list|,
name|realm
argument_list|)
return|;
block|}
specifier|public
name|void
name|saveAuthentication
parameter_list|(
name|SVNAuthentication
name|auth
parameter_list|,
name|String
name|realm
parameter_list|)
block|{
if|if
condition|(
name|auth
operator|==
literal|null
operator|||
name|realm
operator|==
literal|null
condition|)
block|{
return|return;
block|}
name|String
name|kind
init|=
name|auth
operator|.
name|getKind
argument_list|()
decl_stmt|;
name|getRuntimeAuthStorage
argument_list|()
operator|.
name|putData
argument_list|(
name|kind
argument_list|,
name|realm
argument_list|,
name|auth
argument_list|)
expr_stmt|;
block|}
specifier|public
name|int
name|acceptServerAuthentication
parameter_list|(
name|SVNURL
name|url
parameter_list|,
name|String
name|r
parameter_list|,
name|Object
name|serverAuth
parameter_list|,
name|boolean
name|resultMayBeStored
parameter_list|)
block|{
return|return
name|ACCEPTED
return|;
block|}
block|}
comment|/**      * @version 1.3      * @author  TMate Software Ltd.      */
specifier|public
interface|interface
name|IPersistentAuthenticationProvider
block|{
specifier|public
name|void
name|saveAuthentication
parameter_list|(
name|SVNAuthentication
name|auth
parameter_list|,
name|String
name|kind
parameter_list|,
name|String
name|realm
parameter_list|)
throws|throws
name|SVNException
function_decl|;
block|}
specifier|private
class|class
name|PersistentAuthenticationProvider
implements|implements
name|ISVNAuthenticationProvider
implements|,
name|IPersistentAuthenticationProvider
block|{
specifier|private
name|File
name|myDirectory
decl_stmt|;
specifier|private
name|String
name|myUserName
decl_stmt|;
specifier|public
name|PersistentAuthenticationProvider
parameter_list|(
name|File
name|directory
parameter_list|,
name|String
name|userName
parameter_list|)
block|{
name|myDirectory
operator|=
name|directory
expr_stmt|;
name|myUserName
operator|=
name|userName
expr_stmt|;
block|}
specifier|public
name|SVNAuthentication
name|requestClientAuthentication
parameter_list|(
name|String
name|kind
parameter_list|,
name|SVNURL
name|url
parameter_list|,
name|String
name|realm
parameter_list|,
name|SVNErrorMessage
name|errorMessage
parameter_list|,
name|SVNAuthentication
name|previousAuth
parameter_list|,
name|boolean
name|authMayBeStored
parameter_list|)
block|{
if|if
condition|(
name|ISVNAuthenticationManager
operator|.
name|SSL
operator|.
name|equals
argument_list|(
name|kind
argument_list|)
condition|)
block|{
name|String
name|host
init|=
name|url
operator|.
name|getHost
argument_list|()
decl_stmt|;
name|Map
name|properties
init|=
name|getHostProperties
argument_list|(
name|host
argument_list|)
decl_stmt|;
name|String
name|sslClientCert
init|=
operator|(
name|String
operator|)
name|properties
operator|.
name|get
argument_list|(
literal|"ssl-client-cert-file"
argument_list|)
decl_stmt|;
comment|// PKCS#12
if|if
condition|(
name|sslClientCert
operator|!=
literal|null
operator|&&
operator|!
literal|""
operator|.
name|equals
argument_list|(
name|sslClientCert
argument_list|)
condition|)
block|{
if|if
condition|(
name|isMSCapi
argument_list|(
name|sslClientCert
argument_list|)
condition|)
block|{
name|String
name|alias
init|=
literal|null
decl_stmt|;
if|if
condition|(
name|sslClientCert
operator|.
name|lastIndexOf
argument_list|(
literal|';'
argument_list|)
operator|>
literal|0
condition|)
block|{
name|alias
operator|=
name|sslClientCert
operator|.
name|substring
argument_list|(
name|sslClientCert
operator|.
name|lastIndexOf
argument_list|(
literal|';'
argument_list|)
operator|+
literal|1
argument_list|)
expr_stmt|;
block|}
return|return
operator|new
name|SVNSSLAuthentication
argument_list|(
name|SVNSSLAuthentication
operator|.
name|MSCAPI
argument_list|,
name|alias
argument_list|,
name|authMayBeStored
argument_list|,
name|url
argument_list|,
literal|false
argument_list|)
return|;
block|}
name|String
name|sslClientCertPassword
init|=
operator|(
name|String
operator|)
name|properties
operator|.
name|get
argument_list|(
literal|"ssl-client-cert-password"
argument_list|)
decl_stmt|;
name|File
name|clientCertFile
init|=
name|sslClientCert
operator|!=
literal|null
condition|?
operator|new
name|Resource
argument_list|(
name|sslClientCert
argument_list|)
else|:
literal|null
decl_stmt|;
return|return
operator|new
name|SVNSSLAuthentication
argument_list|(
name|clientCertFile
argument_list|,
name|sslClientCertPassword
argument_list|,
name|authMayBeStored
argument_list|,
name|url
argument_list|,
literal|false
argument_list|)
return|;
block|}
comment|//try looking in svn.ssl.client-passphrase directory cache
block|}
name|File
name|dir
init|=
operator|new
name|Resource
argument_list|(
name|myDirectory
argument_list|,
name|kind
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|dir
operator|.
name|isDirectory
argument_list|()
condition|)
block|{
return|return
literal|null
return|;
block|}
name|String
name|fileName
init|=
name|SVNFileUtil
operator|.
name|computeChecksum
argument_list|(
name|realm
argument_list|)
decl_stmt|;
name|File
name|authFile
init|=
operator|new
name|Resource
argument_list|(
name|dir
argument_list|,
name|fileName
argument_list|)
decl_stmt|;
if|if
condition|(
name|authFile
operator|.
name|exists
argument_list|()
condition|)
block|{
name|SVNWCProperties
name|props
init|=
operator|new
name|SVNWCProperties
argument_list|(
name|authFile
argument_list|,
literal|""
argument_list|)
decl_stmt|;
try|try
block|{
name|SVNProperties
name|values
init|=
name|props
operator|.
name|asMap
argument_list|()
decl_stmt|;
name|String
name|storedRealm
init|=
name|values
operator|.
name|getStringValue
argument_list|(
literal|"svn:realmstring"
argument_list|)
decl_stmt|;
name|String
name|cipherType
init|=
name|SVNPropertyValue
operator|.
name|getPropertyAsString
argument_list|(
name|values
operator|.
name|getSVNPropertyValue
argument_list|(
literal|"passtype"
argument_list|)
argument_list|)
decl_stmt|;
if|if
condition|(
name|cipherType
operator|!=
literal|null
operator|&&
operator|!
name|SVNPasswordCipher
operator|.
name|hasCipher
argument_list|(
name|cipherType
argument_list|)
condition|)
block|{
return|return
literal|null
return|;
block|}
name|SVNPasswordCipher
name|cipher
init|=
name|SVNPasswordCipher
operator|.
name|getInstance
argument_list|(
name|cipherType
argument_list|)
decl_stmt|;
if|if
condition|(
name|storedRealm
operator|==
literal|null
operator|||
operator|!
name|storedRealm
operator|.
name|equals
argument_list|(
name|realm
argument_list|)
condition|)
block|{
return|return
literal|null
return|;
block|}
name|String
name|userName
init|=
name|SVNPropertyValue
operator|.
name|getPropertyAsString
argument_list|(
name|values
operator|.
name|getSVNPropertyValue
argument_list|(
literal|"username"
argument_list|)
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|ISVNAuthenticationManager
operator|.
name|SSL
operator|.
name|equals
argument_list|(
name|kind
argument_list|)
condition|)
block|{
if|if
condition|(
name|userName
operator|==
literal|null
operator|||
literal|""
operator|.
name|equals
argument_list|(
name|userName
operator|.
name|trim
argument_list|()
argument_list|)
condition|)
block|{
return|return
literal|null
return|;
block|}
if|if
condition|(
name|myUserName
operator|!=
literal|null
operator|&&
operator|!
name|myUserName
operator|.
name|equals
argument_list|(
name|userName
argument_list|)
condition|)
block|{
return|return
literal|null
return|;
block|}
block|}
name|String
name|password
init|=
name|SVNPropertyValue
operator|.
name|getPropertyAsString
argument_list|(
name|values
operator|.
name|getSVNPropertyValue
argument_list|(
literal|"password"
argument_list|)
argument_list|)
decl_stmt|;
name|password
operator|=
name|cipher
operator|.
name|decrypt
argument_list|(
name|password
argument_list|)
expr_stmt|;
name|String
name|path
init|=
name|SVNPropertyValue
operator|.
name|getPropertyAsString
argument_list|(
name|values
operator|.
name|getSVNPropertyValue
argument_list|(
literal|"key"
argument_list|)
argument_list|)
decl_stmt|;
name|String
name|passphrase
init|=
name|SVNPropertyValue
operator|.
name|getPropertyAsString
argument_list|(
name|values
operator|.
name|getSVNPropertyValue
argument_list|(
literal|"passphrase"
argument_list|)
argument_list|)
decl_stmt|;
name|passphrase
operator|=
name|cipher
operator|.
name|decrypt
argument_list|(
name|passphrase
argument_list|)
expr_stmt|;
name|String
name|port
init|=
name|SVNPropertyValue
operator|.
name|getPropertyAsString
argument_list|(
name|values
operator|.
name|getSVNPropertyValue
argument_list|(
literal|"port"
argument_list|)
argument_list|)
decl_stmt|;
name|port
operator|=
name|port
operator|==
literal|null
condition|?
operator|(
literal|""
operator|+
name|getDefaultSSHPortNumber
argument_list|()
operator|)
else|:
name|port
expr_stmt|;
name|String
name|sslKind
init|=
name|SVNPropertyValue
operator|.
name|getPropertyAsString
argument_list|(
name|values
operator|.
name|getSVNPropertyValue
argument_list|(
literal|"ssl-kind"
argument_list|)
argument_list|)
decl_stmt|;
if|if
condition|(
name|ISVNAuthenticationManager
operator|.
name|PASSWORD
operator|.
name|equals
argument_list|(
name|kind
argument_list|)
condition|)
block|{
if|if
condition|(
name|password
operator|==
literal|null
condition|)
block|{
return|return
operator|new
name|SVNPasswordAuthentication
argument_list|(
name|userName
argument_list|,
name|password
argument_list|,
name|authMayBeStored
argument_list|,
literal|null
argument_list|,
literal|true
argument_list|)
return|;
block|}
return|return
operator|new
name|SVNPasswordAuthentication
argument_list|(
name|userName
argument_list|,
name|password
argument_list|,
name|authMayBeStored
argument_list|,
name|url
argument_list|,
literal|false
argument_list|)
return|;
block|}
if|else if
condition|(
name|ISVNAuthenticationManager
operator|.
name|SSH
operator|.
name|equals
argument_list|(
name|kind
argument_list|)
condition|)
block|{
comment|// get port from config file or system property?
name|int
name|portNumber
decl_stmt|;
try|try
block|{
name|portNumber
operator|=
name|Integer
operator|.
name|parseInt
argument_list|(
name|port
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|NumberFormatException
name|nfe
parameter_list|)
block|{
name|portNumber
operator|=
name|getDefaultSSHPortNumber
argument_list|()
expr_stmt|;
block|}
if|if
condition|(
name|path
operator|!=
literal|null
condition|)
block|{
return|return
operator|new
name|SVNSSHAuthentication
argument_list|(
name|userName
argument_list|,
operator|new
name|Resource
argument_list|(
name|path
argument_list|)
argument_list|,
name|passphrase
argument_list|,
name|portNumber
argument_list|,
name|authMayBeStored
argument_list|,
name|url
argument_list|,
literal|false
argument_list|)
return|;
block|}
if|else if
condition|(
name|password
operator|!=
literal|null
condition|)
block|{
return|return
operator|new
name|SVNSSHAuthentication
argument_list|(
name|userName
argument_list|,
name|password
argument_list|,
name|portNumber
argument_list|,
name|authMayBeStored
argument_list|,
name|url
argument_list|,
literal|false
argument_list|)
return|;
block|}
block|}
if|else if
condition|(
name|ISVNAuthenticationManager
operator|.
name|USERNAME
operator|.
name|equals
argument_list|(
name|kind
argument_list|)
condition|)
block|{
return|return
operator|new
name|SVNUserNameAuthentication
argument_list|(
name|userName
argument_list|,
name|authMayBeStored
argument_list|,
name|url
argument_list|,
literal|false
argument_list|)
return|;
block|}
if|else if
condition|(
name|ISVNAuthenticationManager
operator|.
name|SSL
operator|.
name|equals
argument_list|(
name|kind
argument_list|)
condition|)
block|{
if|if
condition|(
name|isMSCapi
argument_list|(
name|sslKind
argument_list|)
condition|)
block|{
name|String
name|alias
init|=
name|SVNPropertyValue
operator|.
name|getPropertyAsString
argument_list|(
name|values
operator|.
name|getSVNPropertyValue
argument_list|(
literal|"alias"
argument_list|)
argument_list|)
decl_stmt|;
return|return
operator|new
name|SVNSSLAuthentication
argument_list|(
name|SVNSSLAuthentication
operator|.
name|MSCAPI
argument_list|,
name|alias
argument_list|,
name|authMayBeStored
argument_list|,
name|url
argument_list|,
literal|false
argument_list|)
return|;
block|}
return|return
operator|new
name|SVNSSLAuthentication
argument_list|(
operator|new
name|Resource
argument_list|(
name|path
argument_list|)
argument_list|,
name|passphrase
argument_list|,
name|authMayBeStored
argument_list|,
name|url
argument_list|,
literal|false
argument_list|)
return|;
block|}
block|}
catch|catch
parameter_list|(
name|SVNException
name|e
parameter_list|)
block|{
comment|//
block|}
block|}
return|return
literal|null
return|;
block|}
specifier|public
name|boolean
name|isMSCapi
parameter_list|(
name|String
name|filepath
parameter_list|)
block|{
if|if
condition|(
name|filepath
operator|!=
literal|null
operator|&&
name|filepath
operator|.
name|startsWith
argument_list|(
name|SVNSSLAuthentication
operator|.
name|MSCAPI
argument_list|)
condition|)
block|{
return|return
literal|true
return|;
block|}
return|return
literal|false
return|;
block|}
specifier|public
name|void
name|saveAuthentication
parameter_list|(
name|SVNAuthentication
name|auth
parameter_list|,
name|String
name|kind
parameter_list|,
name|String
name|realm
parameter_list|)
throws|throws
name|SVNException
block|{
name|File
name|dir
init|=
operator|new
name|Resource
argument_list|(
name|myDirectory
argument_list|,
name|kind
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|dir
operator|.
name|exists
argument_list|()
condition|)
block|{
name|dir
operator|.
name|mkdirs
argument_list|()
expr_stmt|;
block|}
if|if
condition|(
operator|!
name|dir
operator|.
name|isDirectory
argument_list|()
condition|)
block|{
name|SVNErrorMessage
name|error
init|=
name|SVNErrorMessage
operator|.
name|create
argument_list|(
name|SVNErrorCode
operator|.
name|IO_ERROR
argument_list|,
literal|"Cannot create directory ''{0}''"
argument_list|,
name|dir
operator|.
name|getAbsolutePath
argument_list|()
argument_list|)
decl_stmt|;
name|SVNErrorManager
operator|.
name|error
argument_list|(
name|error
argument_list|,
name|SVNLogType
operator|.
name|DEFAULT
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
operator|!
name|ISVNAuthenticationManager
operator|.
name|SSL
operator|.
name|equals
argument_list|(
name|kind
argument_list|)
operator|&&
operator|(
literal|""
operator|.
name|equals
argument_list|(
name|auth
operator|.
name|getUserName
argument_list|()
argument_list|)
operator|||
name|auth
operator|.
name|getUserName
argument_list|()
operator|==
literal|null
operator|)
condition|)
block|{
return|return;
block|}
name|Map
name|values
init|=
operator|new
name|SVNHashMap
argument_list|()
decl_stmt|;
name|values
operator|.
name|put
argument_list|(
literal|"svn:realmstring"
argument_list|,
name|realm
argument_list|)
expr_stmt|;
if|if
condition|(
name|ISVNAuthenticationManager
operator|.
name|PASSWORD
operator|.
name|equals
argument_list|(
name|kind
argument_list|)
condition|)
block|{
name|savePasswordCredential
argument_list|(
name|values
argument_list|,
name|auth
argument_list|,
name|realm
argument_list|)
expr_stmt|;
block|}
if|else if
condition|(
name|ISVNAuthenticationManager
operator|.
name|SSH
operator|.
name|equals
argument_list|(
name|kind
argument_list|)
condition|)
block|{
name|saveSSHCredential
argument_list|(
name|values
argument_list|,
name|auth
argument_list|,
name|realm
argument_list|)
expr_stmt|;
block|}
if|else if
condition|(
name|ISVNAuthenticationManager
operator|.
name|SSL
operator|.
name|equals
argument_list|(
name|kind
argument_list|)
condition|)
block|{
name|saveSSLCredential
argument_list|(
name|values
argument_list|,
name|auth
argument_list|,
name|realm
argument_list|)
expr_stmt|;
block|}
if|else if
condition|(
name|ISVNAuthenticationManager
operator|.
name|USERNAME
operator|.
name|equals
argument_list|(
name|kind
argument_list|)
condition|)
block|{
name|saveUserNameCredential
argument_list|(
name|values
argument_list|,
name|auth
argument_list|)
expr_stmt|;
block|}
comment|// get file name for auth and store password.
name|String
name|fileName
init|=
name|SVNFileUtil
operator|.
name|computeChecksum
argument_list|(
name|realm
argument_list|)
decl_stmt|;
name|File
name|authFile
init|=
operator|new
name|Resource
argument_list|(
name|dir
argument_list|,
name|fileName
argument_list|)
decl_stmt|;
if|if
condition|(
name|authFile
operator|.
name|isFile
argument_list|()
condition|)
block|{
name|SVNWCProperties
name|props
init|=
operator|new
name|SVNWCProperties
argument_list|(
name|authFile
argument_list|,
literal|""
argument_list|)
decl_stmt|;
try|try
block|{
if|if
condition|(
name|values
operator|.
name|equals
argument_list|(
name|props
operator|.
name|asMap
argument_list|()
argument_list|)
condition|)
block|{
return|return;
block|}
block|}
catch|catch
parameter_list|(
name|SVNException
name|e
parameter_list|)
block|{
comment|//
block|}
block|}
name|File
name|tmpFile
init|=
name|SVNFileUtil
operator|.
name|createUniqueFile
argument_list|(
name|dir
argument_list|,
literal|"auth"
argument_list|,
literal|".tmp"
argument_list|,
literal|true
argument_list|)
decl_stmt|;
try|try
block|{
name|SVNWCProperties
operator|.
name|setProperties
argument_list|(
name|SVNProperties
operator|.
name|wrap
argument_list|(
name|values
argument_list|)
argument_list|,
name|authFile
argument_list|,
name|tmpFile
argument_list|,
name|SVNWCProperties
operator|.
name|SVN_HASH_TERMINATOR
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
name|SVNFileUtil
operator|.
name|deleteFile
argument_list|(
name|tmpFile
argument_list|)
expr_stmt|;
block|}
block|}
specifier|public
name|int
name|acceptServerAuthentication
parameter_list|(
name|SVNURL
name|url
parameter_list|,
name|String
name|r
parameter_list|,
name|Object
name|serverAuth
parameter_list|,
name|boolean
name|resultMayBeStored
parameter_list|)
block|{
return|return
name|ACCEPTED
return|;
block|}
specifier|private
name|void
name|saveUserNameCredential
parameter_list|(
name|Map
name|values
parameter_list|,
name|SVNAuthentication
name|auth
parameter_list|)
block|{
name|values
operator|.
name|put
argument_list|(
literal|"username"
argument_list|,
name|auth
operator|.
name|getUserName
argument_list|()
argument_list|)
expr_stmt|;
block|}
specifier|private
name|void
name|savePasswordCredential
parameter_list|(
name|Map
name|values
parameter_list|,
name|SVNAuthentication
name|auth
parameter_list|,
name|String
name|realm
parameter_list|)
throws|throws
name|SVNException
block|{
name|values
operator|.
name|put
argument_list|(
literal|"username"
argument_list|,
name|auth
operator|.
name|getUserName
argument_list|()
argument_list|)
expr_stmt|;
name|boolean
name|storePasswords
init|=
name|isStorePasswords
argument_list|(
name|auth
operator|.
name|getURL
argument_list|()
argument_list|)
decl_stmt|;
name|boolean
name|maySavePassword
init|=
literal|false
decl_stmt|;
name|SVNPasswordCipher
name|cipher
init|=
literal|null
decl_stmt|;
if|if
condition|(
name|storePasswords
condition|)
block|{
name|String
name|cipherType
init|=
name|SVNPasswordCipher
operator|.
name|getDefaultCipherType
argument_list|()
decl_stmt|;
name|cipher
operator|=
name|SVNPasswordCipher
operator|.
name|getInstance
argument_list|(
name|cipherType
argument_list|)
expr_stmt|;
if|if
condition|(
name|cipherType
operator|!=
literal|null
condition|)
block|{
if|if
condition|(
operator|!
name|SVNPasswordCipher
operator|.
name|SIMPLE_CIPHER_TYPE
operator|.
name|equals
argument_list|(
name|cipherType
argument_list|)
condition|)
block|{
name|maySavePassword
operator|=
literal|true
expr_stmt|;
block|}
else|else
block|{
name|maySavePassword
operator|=
name|isStorePlainTextPasswords
argument_list|(
name|realm
argument_list|,
name|auth
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|maySavePassword
condition|)
block|{
name|values
operator|.
name|put
argument_list|(
literal|"passtype"
argument_list|,
name|cipherType
argument_list|)
expr_stmt|;
block|}
block|}
block|}
if|if
condition|(
name|maySavePassword
condition|)
block|{
name|SVNPasswordAuthentication
name|passwordAuth
init|=
operator|(
name|SVNPasswordAuthentication
operator|)
name|auth
decl_stmt|;
name|values
operator|.
name|put
argument_list|(
literal|"password"
argument_list|,
name|cipher
operator|.
name|encrypt
argument_list|(
name|passwordAuth
operator|.
name|getPassword
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
specifier|private
name|void
name|saveSSHCredential
parameter_list|(
name|Map
name|values
parameter_list|,
name|SVNAuthentication
name|auth
parameter_list|,
name|String
name|realm
parameter_list|)
throws|throws
name|SVNException
block|{
name|values
operator|.
name|put
argument_list|(
literal|"username"
argument_list|,
name|auth
operator|.
name|getUserName
argument_list|()
argument_list|)
expr_stmt|;
name|boolean
name|storePasswords
init|=
name|isStorePasswords
argument_list|(
name|auth
operator|.
name|getURL
argument_list|()
argument_list|)
decl_stmt|;
name|boolean
name|maySavePassword
init|=
literal|false
decl_stmt|;
name|SVNPasswordCipher
name|cipher
init|=
literal|null
decl_stmt|;
if|if
condition|(
name|storePasswords
condition|)
block|{
name|String
name|cipherType
init|=
name|SVNPasswordCipher
operator|.
name|getDefaultCipherType
argument_list|()
decl_stmt|;
name|cipher
operator|=
name|SVNPasswordCipher
operator|.
name|getInstance
argument_list|(
name|cipherType
argument_list|)
expr_stmt|;
if|if
condition|(
name|cipherType
operator|!=
literal|null
condition|)
block|{
if|if
condition|(
operator|!
name|SVNPasswordCipher
operator|.
name|SIMPLE_CIPHER_TYPE
operator|.
name|equals
argument_list|(
name|cipherType
argument_list|)
condition|)
block|{
name|maySavePassword
operator|=
literal|true
expr_stmt|;
block|}
else|else
block|{
name|maySavePassword
operator|=
name|isStorePlainTextPasswords
argument_list|(
name|realm
argument_list|,
name|auth
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|maySavePassword
condition|)
block|{
name|values
operator|.
name|put
argument_list|(
literal|"passtype"
argument_list|,
name|cipherType
argument_list|)
expr_stmt|;
block|}
block|}
block|}
name|SVNSSHAuthentication
name|sshAuth
init|=
operator|(
name|SVNSSHAuthentication
operator|)
name|auth
decl_stmt|;
if|if
condition|(
name|maySavePassword
condition|)
block|{
name|values
operator|.
name|put
argument_list|(
literal|"password"
argument_list|,
name|cipher
operator|.
name|encrypt
argument_list|(
name|sshAuth
operator|.
name|getPassword
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|int
name|port
init|=
name|sshAuth
operator|.
name|getPortNumber
argument_list|()
decl_stmt|;
if|if
condition|(
name|sshAuth
operator|.
name|getPortNumber
argument_list|()
operator|<
literal|0
condition|)
block|{
name|port
operator|=
name|getDefaultSSHPortNumber
argument_list|()
expr_stmt|;
block|}
name|values
operator|.
name|put
argument_list|(
literal|"port"
argument_list|,
name|Integer
operator|.
name|toString
argument_list|(
name|port
argument_list|)
argument_list|)
expr_stmt|;
if|if
condition|(
name|sshAuth
operator|.
name|getPrivateKeyFile
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|String
name|path
init|=
name|sshAuth
operator|.
name|getPrivateKeyFile
argument_list|()
operator|.
name|getAbsolutePath
argument_list|()
decl_stmt|;
if|if
condition|(
name|maySavePassword
condition|)
block|{
name|values
operator|.
name|put
argument_list|(
literal|"passphrase"
argument_list|,
name|cipher
operator|.
name|encrypt
argument_list|(
name|sshAuth
operator|.
name|getPassphrase
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|values
operator|.
name|put
argument_list|(
literal|"key"
argument_list|,
name|path
argument_list|)
expr_stmt|;
block|}
block|}
specifier|private
name|void
name|saveSSLCredential
parameter_list|(
name|Map
name|values
parameter_list|,
name|SVNAuthentication
name|auth
parameter_list|,
name|String
name|realm
parameter_list|)
throws|throws
name|SVNException
block|{
name|boolean
name|storePassphrases
init|=
name|isStoreSSLClientCertificatePassphrases
argument_list|(
name|auth
operator|.
name|getURL
argument_list|()
argument_list|)
decl_stmt|;
name|boolean
name|maySavePassphrase
init|=
literal|false
decl_stmt|;
name|SVNPasswordCipher
name|cipher
init|=
literal|null
decl_stmt|;
if|if
condition|(
name|storePassphrases
condition|)
block|{
name|String
name|cipherType
init|=
name|SVNPasswordCipher
operator|.
name|getDefaultCipherType
argument_list|()
decl_stmt|;
name|cipher
operator|=
name|SVNPasswordCipher
operator|.
name|getInstance
argument_list|(
name|cipherType
argument_list|)
expr_stmt|;
if|if
condition|(
name|cipherType
operator|!=
literal|null
condition|)
block|{
if|if
condition|(
operator|!
name|SVNPasswordCipher
operator|.
name|SIMPLE_CIPHER_TYPE
operator|.
name|equals
argument_list|(
name|cipherType
argument_list|)
condition|)
block|{
name|maySavePassphrase
operator|=
literal|true
expr_stmt|;
block|}
else|else
block|{
name|maySavePassphrase
operator|=
name|isStorePlainTextPassphrases
argument_list|(
name|realm
argument_list|,
name|auth
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|maySavePassphrase
condition|)
block|{
name|values
operator|.
name|put
argument_list|(
literal|"passtype"
argument_list|,
name|cipherType
argument_list|)
expr_stmt|;
block|}
block|}
block|}
name|SVNSSLAuthentication
name|sslAuth
init|=
operator|(
name|SVNSSLAuthentication
operator|)
name|auth
decl_stmt|;
if|if
condition|(
name|maySavePassphrase
condition|)
block|{
name|values
operator|.
name|put
argument_list|(
literal|"passphrase"
argument_list|,
name|cipher
operator|.
name|encrypt
argument_list|(
name|sslAuth
operator|.
name|getPassword
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|SVNSSLAuthentication
operator|.
name|SSL
operator|.
name|equals
argument_list|(
name|sslAuth
operator|.
name|getSSLKind
argument_list|()
argument_list|)
condition|)
block|{
if|if
condition|(
name|sslAuth
operator|.
name|getCertificateFile
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|String
name|path
init|=
name|sslAuth
operator|.
name|getCertificateFile
argument_list|()
operator|.
name|getAbsolutePath
argument_list|()
decl_stmt|;
name|values
operator|.
name|put
argument_list|(
literal|"key"
argument_list|,
name|path
argument_list|)
expr_stmt|;
block|}
block|}
if|else if
condition|(
name|SVNSSLAuthentication
operator|.
name|MSCAPI
operator|.
name|equals
argument_list|(
name|sslAuth
operator|.
name|getSSLKind
argument_list|()
argument_list|)
condition|)
block|{
name|values
operator|.
name|put
argument_list|(
literal|"ssl-kind"
argument_list|,
name|sslAuth
operator|.
name|getSSLKind
argument_list|()
argument_list|)
expr_stmt|;
name|values
operator|.
name|put
argument_list|(
literal|"alias"
argument_list|,
name|sslAuth
operator|.
name|getAlias
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
block|}
specifier|private
specifier|static
specifier|final
class|class
name|SimpleProxyManager
implements|implements
name|ISVNProxyManager
block|{
specifier|private
name|String
name|myProxyHost
decl_stmt|;
specifier|private
name|String
name|myProxyPort
decl_stmt|;
specifier|private
name|String
name|myProxyUser
decl_stmt|;
specifier|private
name|String
name|myProxyPassword
decl_stmt|;
specifier|public
name|SimpleProxyManager
parameter_list|(
name|String
name|host
parameter_list|,
name|String
name|port
parameter_list|,
name|String
name|user
parameter_list|,
name|String
name|password
parameter_list|)
block|{
name|myProxyHost
operator|=
name|host
expr_stmt|;
name|myProxyPort
operator|=
name|port
operator|==
literal|null
condition|?
literal|"3128"
else|:
name|port
expr_stmt|;
name|myProxyUser
operator|=
name|user
expr_stmt|;
name|myProxyPassword
operator|=
name|password
expr_stmt|;
block|}
specifier|public
name|String
name|getProxyHost
parameter_list|()
block|{
return|return
name|myProxyHost
return|;
block|}
specifier|public
name|int
name|getProxyPort
parameter_list|()
block|{
try|try
block|{
return|return
name|Integer
operator|.
name|parseInt
argument_list|(
name|myProxyPort
argument_list|)
return|;
block|}
catch|catch
parameter_list|(
name|NumberFormatException
name|nfe
parameter_list|)
block|{
comment|//
block|}
return|return
literal|3128
return|;
block|}
specifier|public
name|String
name|getProxyUserName
parameter_list|()
block|{
return|return
name|myProxyUser
return|;
block|}
specifier|public
name|String
name|getProxyPassword
parameter_list|()
block|{
return|return
name|myProxyPassword
return|;
block|}
specifier|public
name|void
name|acknowledgeProxyContext
parameter_list|(
name|boolean
name|accepted
parameter_list|,
name|SVNErrorMessage
name|errorMessage
parameter_list|)
block|{
block|}
block|}
specifier|public
name|boolean
name|isAuthenticationForced
parameter_list|()
block|{
return|return
name|myIsAuthenticationForced
return|;
block|}
comment|/**      * Specifies the way how credentials are to be supplied to a      * repository server.      *      * @param forced<span class="javakeyword">true</span> to force      *                credentials sending;<span class="javakeyword">false</span>      *                to put off sending credentials till a server challenge      * @see           #isAuthenticationForced()      */
specifier|public
name|void
name|setAuthenticationForced
parameter_list|(
name|boolean
name|forced
parameter_list|)
block|{
name|myIsAuthenticationForced
operator|=
name|forced
expr_stmt|;
block|}
specifier|public
name|int
name|getReadTimeout
parameter_list|(
name|SVNRepository
name|repository
parameter_list|)
block|{
name|String
name|protocol
init|=
name|repository
operator|.
name|getLocation
argument_list|()
operator|.
name|getProtocol
argument_list|()
decl_stmt|;
if|if
condition|(
literal|"http"
operator|.
name|equals
argument_list|(
name|protocol
argument_list|)
operator|||
literal|"https"
operator|.
name|equals
argument_list|(
name|protocol
argument_list|)
condition|)
block|{
name|String
name|host
init|=
name|repository
operator|.
name|getLocation
argument_list|()
operator|.
name|getHost
argument_list|()
decl_stmt|;
name|Map
name|properties
init|=
name|getHostProperties
argument_list|(
name|host
argument_list|)
decl_stmt|;
name|String
name|timeout
init|=
operator|(
name|String
operator|)
name|properties
operator|.
name|get
argument_list|(
literal|"http-timeout"
argument_list|)
decl_stmt|;
if|if
condition|(
name|timeout
operator|!=
literal|null
condition|)
block|{
try|try
block|{
return|return
name|Integer
operator|.
name|parseInt
argument_list|(
name|timeout
argument_list|)
operator|*
literal|1000
return|;
block|}
catch|catch
parameter_list|(
name|NumberFormatException
name|nfe
parameter_list|)
block|{
block|}
block|}
return|return
literal|3600
operator|*
literal|1000
return|;
block|}
return|return
literal|0
return|;
block|}
specifier|public
name|int
name|getConnectTimeout
parameter_list|(
name|SVNRepository
name|repository
parameter_list|)
block|{
name|String
name|protocol
init|=
name|repository
operator|.
name|getLocation
argument_list|()
operator|.
name|getProtocol
argument_list|()
decl_stmt|;
if|if
condition|(
literal|"http"
operator|.
name|equals
argument_list|(
name|protocol
argument_list|)
operator|||
literal|"https"
operator|.
name|equals
argument_list|(
name|protocol
argument_list|)
condition|)
block|{
return|return
literal|60
operator|*
literal|1000
return|;
block|}
return|return
literal|0
return|;
block|}
block|}
end_class

end_unit

