begin_unit|revision:1.0.0;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * ====================================================================  * Copyright (c) 2004-2010 TMate Software Ltd.  All rights reserved.  *  * This software is licensed as described in the file COPYING, which  * you should have received as part of this distribution.  The terms  * are also available at http://svnkit.com/license.html  * If newer versions of this license are posted there, you may use a  * newer version instead, at your option.  * ====================================================================  */
end_comment

begin_package
package|package
name|org
operator|.
name|exist
operator|.
name|versioning
operator|.
name|svn
operator|.
name|internal
operator|.
name|wc
operator|.
name|admin
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collections
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Set
import|;
end_import

begin_import
import|import
name|org
operator|.
name|tmatesoft
operator|.
name|svn
operator|.
name|core
operator|.
name|SVNDepth
import|;
end_import

begin_import
import|import
name|org
operator|.
name|tmatesoft
operator|.
name|svn
operator|.
name|core
operator|.
name|internal
operator|.
name|util
operator|.
name|SVNHashMap
import|;
end_import

begin_import
import|import
name|org
operator|.
name|tmatesoft
operator|.
name|svn
operator|.
name|core
operator|.
name|internal
operator|.
name|util
operator|.
name|SVNHashSet
import|;
end_import

begin_comment
comment|/**  * @version 1.3  * @author  TMate Software Ltd.  */
end_comment

begin_class
specifier|public
class|class
name|SVNAdminAreaInfo
block|{
specifier|private
name|String
name|myTargetName
decl_stmt|;
specifier|private
name|SVNAdminArea
name|myTarget
decl_stmt|;
specifier|private
name|SVNAdminArea
name|myAnchor
decl_stmt|;
specifier|private
name|SVNWCAccess
name|myAccess
decl_stmt|;
specifier|private
name|Map
name|myNewExternals
decl_stmt|;
specifier|private
name|Map
name|myOldExternals
decl_stmt|;
specifier|private
name|Map
name|myDepths
decl_stmt|;
specifier|private
name|Set
name|myIncompleteEntries
decl_stmt|;
specifier|private
name|boolean
name|myIsEnableIncompleteTrick
decl_stmt|;
specifier|public
name|SVNAdminAreaInfo
parameter_list|(
name|SVNWCAccess
name|access
parameter_list|,
name|SVNAdminArea
name|anchor
parameter_list|,
name|SVNAdminArea
name|target
parameter_list|,
name|String
name|targetName
parameter_list|)
block|{
name|myAccess
operator|=
name|access
expr_stmt|;
name|myAnchor
operator|=
name|anchor
expr_stmt|;
name|myTarget
operator|=
name|target
expr_stmt|;
name|myTargetName
operator|=
name|targetName
expr_stmt|;
name|myIsEnableIncompleteTrick
operator|=
literal|false
expr_stmt|;
block|}
specifier|public
name|SVNAdminArea
name|getAnchor
parameter_list|()
block|{
return|return
name|myAnchor
return|;
block|}
specifier|public
name|SVNAdminArea
name|getTarget
parameter_list|()
block|{
return|return
name|myTarget
return|;
block|}
comment|/**      * This method has been added to give an ability to replace       * read-only areas with write enabled ones.       */
specifier|public
name|void
name|setTarget
parameter_list|(
name|SVNAdminArea
name|target
parameter_list|)
block|{
name|myTarget
operator|=
name|target
expr_stmt|;
block|}
comment|/**      * This method has been added to give an ability to replace       * read-only areas with write enabled ones.       */
specifier|public
name|void
name|setAnchor
parameter_list|(
name|SVNAdminArea
name|anchor
parameter_list|)
block|{
name|myAnchor
operator|=
name|anchor
expr_stmt|;
block|}
specifier|public
name|String
name|getTargetName
parameter_list|()
block|{
return|return
name|myTargetName
return|;
block|}
specifier|public
name|SVNWCAccess
name|getWCAccess
parameter_list|()
block|{
return|return
name|myAccess
return|;
block|}
specifier|public
name|void
name|setWCAccess
parameter_list|(
name|SVNWCAccess
name|wcAccess
parameter_list|)
block|{
name|myAccess
operator|=
name|wcAccess
expr_stmt|;
block|}
specifier|public
name|void
name|addOldExternal
parameter_list|(
name|String
name|path
parameter_list|,
name|String
name|oldValue
parameter_list|)
block|{
if|if
condition|(
name|myOldExternals
operator|==
literal|null
condition|)
block|{
name|myOldExternals
operator|=
operator|new
name|SVNHashMap
argument_list|()
expr_stmt|;
block|}
name|myOldExternals
operator|.
name|put
argument_list|(
name|path
argument_list|,
name|oldValue
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|addNewExternal
parameter_list|(
name|String
name|path
parameter_list|,
name|String
name|newValue
parameter_list|)
block|{
if|if
condition|(
name|myNewExternals
operator|==
literal|null
condition|)
block|{
name|myNewExternals
operator|=
operator|new
name|SVNHashMap
argument_list|()
expr_stmt|;
block|}
name|myNewExternals
operator|.
name|put
argument_list|(
name|path
argument_list|,
name|newValue
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|addExternal
parameter_list|(
name|String
name|path
parameter_list|,
name|String
name|oldValue
parameter_list|,
name|String
name|newValue
parameter_list|)
block|{
name|addNewExternal
argument_list|(
name|path
argument_list|,
name|newValue
argument_list|)
expr_stmt|;
name|addOldExternal
argument_list|(
name|path
argument_list|,
name|oldValue
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|addDepth
parameter_list|(
name|String
name|path
parameter_list|,
name|SVNDepth
name|depth
parameter_list|)
block|{
if|if
condition|(
name|myDepths
operator|==
literal|null
condition|)
block|{
name|myDepths
operator|=
operator|new
name|SVNHashMap
argument_list|()
expr_stmt|;
block|}
name|myDepths
operator|.
name|put
argument_list|(
name|path
argument_list|,
name|depth
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|removeDepth
parameter_list|(
name|String
name|path
parameter_list|)
block|{
if|if
condition|(
name|myDepths
operator|!=
literal|null
condition|)
block|{
name|myDepths
operator|.
name|remove
argument_list|(
name|path
argument_list|)
expr_stmt|;
block|}
block|}
specifier|public
name|void
name|removeExternal
parameter_list|(
name|String
name|path
parameter_list|)
block|{
if|if
condition|(
name|myNewExternals
operator|!=
literal|null
condition|)
block|{
name|myNewExternals
operator|.
name|remove
argument_list|(
name|path
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|myOldExternals
operator|!=
literal|null
condition|)
block|{
name|myOldExternals
operator|.
name|remove
argument_list|(
name|path
argument_list|)
expr_stmt|;
block|}
block|}
specifier|public
name|Map
name|getNewExternals
parameter_list|()
block|{
return|return
name|myNewExternals
operator|==
literal|null
condition|?
name|Collections
operator|.
name|EMPTY_MAP
else|:
name|myNewExternals
return|;
block|}
specifier|public
name|Map
name|getOldExternals
parameter_list|()
block|{
return|return
name|myOldExternals
operator|==
literal|null
condition|?
name|Collections
operator|.
name|EMPTY_MAP
else|:
name|myOldExternals
return|;
block|}
specifier|public
name|Map
name|getDepths
parameter_list|()
block|{
return|return
name|myDepths
operator|==
literal|null
condition|?
name|Collections
operator|.
name|EMPTY_MAP
else|:
name|myDepths
return|;
block|}
specifier|public
name|void
name|addIncompleteEntry
parameter_list|(
name|String
name|path
parameter_list|)
block|{
if|if
condition|(
operator|!
name|myIsEnableIncompleteTrick
condition|)
block|{
return|return;
block|}
if|if
condition|(
name|myIncompleteEntries
operator|==
literal|null
condition|)
block|{
name|myIncompleteEntries
operator|=
operator|new
name|SVNHashSet
argument_list|()
expr_stmt|;
block|}
name|myIncompleteEntries
operator|.
name|add
argument_list|(
name|path
argument_list|)
expr_stmt|;
block|}
specifier|public
name|boolean
name|isIncomplete
parameter_list|(
name|String
name|path
parameter_list|)
block|{
if|if
condition|(
operator|!
name|myIsEnableIncompleteTrick
condition|)
block|{
return|return
literal|false
return|;
block|}
return|return
name|myIncompleteEntries
operator|!=
literal|null
operator|&&
name|myIncompleteEntries
operator|.
name|contains
argument_list|(
name|path
argument_list|)
return|;
block|}
block|}
end_class

end_unit

