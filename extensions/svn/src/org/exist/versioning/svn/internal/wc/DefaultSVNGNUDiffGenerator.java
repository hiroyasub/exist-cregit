begin_unit|revision:1.0.0;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * ====================================================================  * Copyright (c) 2004-2010 TMate Software Ltd.  All rights reserved.  *  * This software is licensed as described in the file COPYING, which  * you should have received as part of this distribution.  The terms  * are also available at http://svnkit.com/license.html  * If newer versions of this license are posted there, you may use a  * newer version instead, at your option.  * ====================================================================  */
end_comment

begin_package
package|package
name|org
operator|.
name|exist
operator|.
name|versioning
operator|.
name|svn
operator|.
name|internal
operator|.
name|wc
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|File
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|OutputStream
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|versioning
operator|.
name|svn
operator|.
name|wc
operator|.
name|DefaultSVNDiffGenerator
import|;
end_import

begin_import
import|import
name|org
operator|.
name|tmatesoft
operator|.
name|svn
operator|.
name|core
operator|.
name|SVNErrorCode
import|;
end_import

begin_import
import|import
name|org
operator|.
name|tmatesoft
operator|.
name|svn
operator|.
name|core
operator|.
name|SVNErrorMessage
import|;
end_import

begin_import
import|import
name|org
operator|.
name|tmatesoft
operator|.
name|svn
operator|.
name|core
operator|.
name|SVNException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|tmatesoft
operator|.
name|svn
operator|.
name|core
operator|.
name|SVNProperties
import|;
end_import

begin_import
import|import
name|org
operator|.
name|tmatesoft
operator|.
name|svn
operator|.
name|core
operator|.
name|SVNRevisionProperty
import|;
end_import

begin_import
import|import
name|org
operator|.
name|tmatesoft
operator|.
name|svn
operator|.
name|core
operator|.
name|internal
operator|.
name|io
operator|.
name|fs
operator|.
name|CountingOutputStream
import|;
end_import

begin_import
import|import
name|org
operator|.
name|tmatesoft
operator|.
name|svn
operator|.
name|core
operator|.
name|internal
operator|.
name|io
operator|.
name|fs
operator|.
name|FSFS
import|;
end_import

begin_import
import|import
name|org
operator|.
name|tmatesoft
operator|.
name|svn
operator|.
name|core
operator|.
name|internal
operator|.
name|io
operator|.
name|fs
operator|.
name|FSRevisionRoot
import|;
end_import

begin_import
import|import
name|org
operator|.
name|tmatesoft
operator|.
name|svn
operator|.
name|core
operator|.
name|internal
operator|.
name|io
operator|.
name|fs
operator|.
name|FSRoot
import|;
end_import

begin_import
import|import
name|org
operator|.
name|tmatesoft
operator|.
name|svn
operator|.
name|core
operator|.
name|internal
operator|.
name|io
operator|.
name|fs
operator|.
name|FSTransactionRoot
import|;
end_import

begin_import
import|import
name|org
operator|.
name|tmatesoft
operator|.
name|svn
operator|.
name|core
operator|.
name|wc
operator|.
name|admin
operator|.
name|ISVNGNUDiffGenerator
import|;
end_import

begin_import
import|import
name|org
operator|.
name|tmatesoft
operator|.
name|svn
operator|.
name|util
operator|.
name|SVNLogType
import|;
end_import

begin_comment
comment|/**  * @version 1.3  * @author  TMate Software Ltd.  */
end_comment

begin_class
specifier|public
class|class
name|DefaultSVNGNUDiffGenerator
extends|extends
name|DefaultSVNDiffGenerator
implements|implements
name|ISVNGNUDiffGenerator
block|{
specifier|private
name|String
name|myHeader
decl_stmt|;
specifier|private
name|boolean
name|myIsHeaderWritten
decl_stmt|;
specifier|private
name|FSRoot
name|myOriginalRoot
decl_stmt|;
specifier|private
name|String
name|myOriginalPath
decl_stmt|;
specifier|private
name|FSRoot
name|myNewRoot
decl_stmt|;
specifier|private
name|String
name|myNewPath
decl_stmt|;
specifier|private
name|boolean
name|myIsDiffWritten
decl_stmt|;
specifier|public
name|void
name|displayHeader
parameter_list|(
name|int
name|type
parameter_list|,
name|String
name|path
parameter_list|,
name|String
name|copyFromPath
parameter_list|,
name|long
name|copyFromRevision
parameter_list|,
name|OutputStream
name|result
parameter_list|)
throws|throws
name|SVNException
block|{
switch|switch
condition|(
name|type
condition|)
block|{
case|case
name|ADDED
case|:
if|if
condition|(
operator|!
name|myIsHeaderWritten
condition|)
block|{
name|path
operator|=
name|path
operator|.
name|startsWith
argument_list|(
literal|"/"
argument_list|)
condition|?
name|path
operator|.
name|substring
argument_list|(
literal|1
argument_list|)
else|:
name|path
expr_stmt|;
name|myHeader
operator|=
literal|"Added: "
operator|+
name|path
expr_stmt|;
block|}
break|break;
case|case
name|DELETED
case|:
if|if
condition|(
operator|!
name|myIsHeaderWritten
condition|)
block|{
name|path
operator|=
name|path
operator|.
name|startsWith
argument_list|(
literal|"/"
argument_list|)
condition|?
name|path
operator|.
name|substring
argument_list|(
literal|1
argument_list|)
else|:
name|path
expr_stmt|;
name|myHeader
operator|=
literal|"Deleted: "
operator|+
name|path
expr_stmt|;
block|}
break|break;
case|case
name|MODIFIED
case|:
if|if
condition|(
operator|!
name|myIsHeaderWritten
condition|)
block|{
name|path
operator|=
name|path
operator|.
name|startsWith
argument_list|(
literal|"/"
argument_list|)
condition|?
name|path
operator|.
name|substring
argument_list|(
literal|1
argument_list|)
else|:
name|path
expr_stmt|;
name|myHeader
operator|=
literal|"Modified: "
operator|+
name|path
expr_stmt|;
block|}
break|break;
case|case
name|COPIED
case|:
if|if
condition|(
operator|!
name|myIsHeaderWritten
condition|)
block|{
name|path
operator|=
name|path
operator|.
name|startsWith
argument_list|(
literal|"/"
argument_list|)
condition|?
name|path
operator|.
name|substring
argument_list|(
literal|1
argument_list|)
else|:
name|path
expr_stmt|;
name|copyFromPath
operator|=
name|copyFromPath
operator|.
name|startsWith
argument_list|(
literal|"/"
argument_list|)
condition|?
name|copyFromPath
operator|.
name|substring
argument_list|(
literal|1
argument_list|)
else|:
name|copyFromPath
expr_stmt|;
name|myHeader
operator|=
literal|"Copied: "
operator|+
name|path
operator|+
literal|" (from rev "
operator|+
name|copyFromRevision
operator|+
literal|", "
operator|+
name|copyFromPath
operator|+
literal|")"
expr_stmt|;
block|}
break|break;
case|case
name|NO_DIFF
case|:
try|try
block|{
name|result
operator|.
name|write
argument_list|(
name|getEOL
argument_list|()
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
name|SVNErrorMessage
name|err
init|=
name|SVNErrorMessage
operator|.
name|create
argument_list|(
name|SVNErrorCode
operator|.
name|IO_ERROR
argument_list|,
name|e
operator|.
name|getLocalizedMessage
argument_list|()
argument_list|)
decl_stmt|;
name|SVNErrorManager
operator|.
name|error
argument_list|(
name|err
argument_list|,
name|e
argument_list|,
name|SVNLogType
operator|.
name|DEFAULT
argument_list|)
expr_stmt|;
block|}
break|break;
block|}
block|}
specifier|public
name|void
name|displayFileDiff
parameter_list|(
name|String
name|path
parameter_list|,
name|File
name|file1
parameter_list|,
name|File
name|file2
parameter_list|,
name|String
name|rev1
parameter_list|,
name|String
name|rev2
parameter_list|,
name|String
name|mimeType1
parameter_list|,
name|String
name|mimeType2
parameter_list|,
name|OutputStream
name|result
parameter_list|)
throws|throws
name|SVNException
block|{
name|CountingOutputStream
name|counitngStream
init|=
operator|new
name|CountingOutputStream
argument_list|(
name|result
argument_list|,
literal|0
argument_list|)
decl_stmt|;
name|super
operator|.
name|displayFileDiff
argument_list|(
name|path
argument_list|,
name|file1
argument_list|,
name|file2
argument_list|,
name|rev1
argument_list|,
name|rev2
argument_list|,
name|mimeType1
argument_list|,
name|mimeType2
argument_list|,
name|counitngStream
argument_list|)
expr_stmt|;
if|if
condition|(
name|counitngStream
operator|.
name|getPosition
argument_list|()
operator|>
literal|0
condition|)
block|{
try|try
block|{
name|result
operator|.
name|write
argument_list|(
name|getEOL
argument_list|()
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
name|SVNErrorMessage
name|err
init|=
name|SVNErrorMessage
operator|.
name|create
argument_list|(
name|SVNErrorCode
operator|.
name|IO_ERROR
argument_list|,
name|e
operator|.
name|getLocalizedMessage
argument_list|()
argument_list|)
decl_stmt|;
name|SVNErrorManager
operator|.
name|error
argument_list|(
name|err
argument_list|,
name|e
argument_list|,
name|SVNLogType
operator|.
name|DEFAULT
argument_list|)
expr_stmt|;
block|}
block|}
name|setDiffWritten
argument_list|(
name|counitngStream
operator|.
name|getPosition
argument_list|()
operator|>
literal|0
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|setHeaderWritten
parameter_list|(
name|boolean
name|written
parameter_list|)
block|{
name|myIsHeaderWritten
operator|=
name|written
expr_stmt|;
block|}
specifier|protected
name|boolean
name|displayHeader
parameter_list|(
name|OutputStream
name|os
parameter_list|,
name|String
name|path
parameter_list|,
name|boolean
name|deleted
parameter_list|)
throws|throws
name|IOException
block|{
if|if
condition|(
name|myHeader
operator|!=
literal|null
condition|)
block|{
name|os
operator|.
name|write
argument_list|(
name|myHeader
operator|.
name|getBytes
argument_list|(
name|getEncoding
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|os
operator|.
name|write
argument_list|(
name|getEOL
argument_list|()
argument_list|)
expr_stmt|;
name|myHeader
operator|=
literal|null
expr_stmt|;
name|myIsHeaderWritten
operator|=
literal|true
expr_stmt|;
block|}
if|else if
condition|(
operator|!
name|myIsHeaderWritten
condition|)
block|{
name|path
operator|=
name|path
operator|.
name|startsWith
argument_list|(
literal|"/"
argument_list|)
condition|?
name|path
operator|.
name|substring
argument_list|(
literal|1
argument_list|)
else|:
name|path
expr_stmt|;
name|String
name|header
init|=
literal|"Index: "
operator|+
name|path
decl_stmt|;
name|os
operator|.
name|write
argument_list|(
name|header
operator|.
name|getBytes
argument_list|(
name|getEncoding
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|os
operator|.
name|write
argument_list|(
name|getEOL
argument_list|()
argument_list|)
expr_stmt|;
name|myIsHeaderWritten
operator|=
literal|true
expr_stmt|;
block|}
name|os
operator|.
name|write
argument_list|(
name|HEADER_SEPARATOR
argument_list|)
expr_stmt|;
name|os
operator|.
name|write
argument_list|(
name|getEOL
argument_list|()
argument_list|)
expr_stmt|;
return|return
literal|false
return|;
block|}
specifier|protected
name|void
name|displayBinary
parameter_list|(
name|OutputStream
name|os
parameter_list|,
name|String
name|mimeType1
parameter_list|,
name|String
name|mimeType2
parameter_list|)
throws|throws
name|IOException
block|{
name|os
operator|.
name|write
argument_list|(
literal|"(Binary files differ)"
operator|.
name|getBytes
argument_list|(
name|getEncoding
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|os
operator|.
name|write
argument_list|(
name|getEOL
argument_list|()
argument_list|)
expr_stmt|;
block|}
specifier|protected
name|void
name|displayHeaderFields
parameter_list|(
name|OutputStream
name|os
parameter_list|,
name|String
name|label1
parameter_list|,
name|String
name|label2
parameter_list|)
throws|throws
name|IOException
block|{
name|os
operator|.
name|write
argument_list|(
literal|"--- "
operator|.
name|getBytes
argument_list|(
name|getEncoding
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|String
name|originalLabel
init|=
literal|null
decl_stmt|;
name|String
name|newLabel
init|=
literal|null
decl_stmt|;
try|try
block|{
name|originalLabel
operator|=
name|generateLabel
argument_list|(
name|myOriginalRoot
argument_list|,
name|myOriginalPath
argument_list|)
expr_stmt|;
name|newLabel
operator|=
name|generateLabel
argument_list|(
name|myNewRoot
argument_list|,
name|myNewPath
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|SVNException
name|svne
parameter_list|)
block|{
throw|throw
operator|new
name|IOException
argument_list|(
name|svne
operator|.
name|getLocalizedMessage
argument_list|()
argument_list|)
throw|;
block|}
name|os
operator|.
name|write
argument_list|(
name|originalLabel
operator|.
name|getBytes
argument_list|(
name|getEncoding
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|os
operator|.
name|write
argument_list|(
name|getEOL
argument_list|()
argument_list|)
expr_stmt|;
name|os
operator|.
name|write
argument_list|(
literal|"+++ "
operator|.
name|getBytes
argument_list|(
name|getEncoding
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|os
operator|.
name|write
argument_list|(
name|newLabel
operator|.
name|getBytes
argument_list|(
name|getEncoding
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|os
operator|.
name|write
argument_list|(
name|getEOL
argument_list|()
argument_list|)
expr_stmt|;
block|}
specifier|protected
name|void
name|setOriginalFile
parameter_list|(
name|FSRoot
name|originalRoot
parameter_list|,
name|String
name|originalPath
parameter_list|)
block|{
name|myOriginalRoot
operator|=
name|originalRoot
expr_stmt|;
name|myOriginalPath
operator|=
name|originalPath
expr_stmt|;
block|}
specifier|protected
name|void
name|setNewFile
parameter_list|(
name|FSRoot
name|newRoot
parameter_list|,
name|String
name|newPath
parameter_list|)
block|{
name|myNewRoot
operator|=
name|newRoot
expr_stmt|;
name|myNewPath
operator|=
name|newPath
expr_stmt|;
block|}
specifier|private
name|String
name|generateLabel
parameter_list|(
name|FSRoot
name|root
parameter_list|,
name|String
name|path
parameter_list|)
throws|throws
name|SVNException
block|{
name|String
name|date
init|=
literal|null
decl_stmt|;
name|String
name|txnName
init|=
literal|null
decl_stmt|;
name|long
name|rev
init|=
literal|0
decl_stmt|;
if|if
condition|(
name|root
operator|!=
literal|null
condition|)
block|{
name|FSFS
name|fsfs
init|=
name|root
operator|.
name|getOwner
argument_list|()
decl_stmt|;
name|SVNProperties
name|props
init|=
literal|null
decl_stmt|;
if|if
condition|(
name|root
operator|instanceof
name|FSRevisionRoot
condition|)
block|{
name|FSRevisionRoot
name|revisionRoot
init|=
operator|(
name|FSRevisionRoot
operator|)
name|root
decl_stmt|;
name|rev
operator|=
name|revisionRoot
operator|.
name|getRevision
argument_list|()
expr_stmt|;
name|props
operator|=
name|fsfs
operator|.
name|getRevisionProperties
argument_list|(
name|rev
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|FSTransactionRoot
name|txnRoot
init|=
operator|(
name|FSTransactionRoot
operator|)
name|root
decl_stmt|;
name|txnName
operator|=
name|txnRoot
operator|.
name|getTxnID
argument_list|()
expr_stmt|;
name|props
operator|=
name|fsfs
operator|.
name|getTransactionProperties
argument_list|(
name|txnName
argument_list|)
expr_stmt|;
block|}
name|date
operator|=
name|props
operator|.
name|getStringValue
argument_list|(
name|SVNRevisionProperty
operator|.
name|DATE
argument_list|)
expr_stmt|;
block|}
name|String
name|dateString
init|=
literal|null
decl_stmt|;
if|if
condition|(
name|date
operator|!=
literal|null
condition|)
block|{
name|int
name|tInd
init|=
name|date
operator|.
name|indexOf
argument_list|(
literal|'T'
argument_list|)
decl_stmt|;
name|dateString
operator|=
name|date
operator|.
name|substring
argument_list|(
literal|0
argument_list|,
name|tInd
argument_list|)
operator|+
literal|" "
operator|+
name|date
operator|.
name|substring
argument_list|(
name|tInd
operator|+
literal|1
argument_list|,
name|tInd
operator|+
literal|9
argument_list|)
operator|+
literal|" UTC"
expr_stmt|;
block|}
else|else
block|{
name|dateString
operator|=
literal|"                       "
expr_stmt|;
block|}
if|if
condition|(
name|txnName
operator|!=
literal|null
condition|)
block|{
return|return
name|path
operator|+
literal|'\t'
operator|+
name|dateString
operator|+
literal|" (txn "
operator|+
name|txnName
operator|+
literal|")"
return|;
block|}
return|return
name|path
operator|+
literal|'\t'
operator|+
name|dateString
operator|+
literal|" (rev "
operator|+
name|rev
operator|+
literal|")"
return|;
block|}
specifier|protected
name|boolean
name|useLocalFileSeparatorChar
parameter_list|()
block|{
return|return
literal|false
return|;
block|}
specifier|public
name|void
name|setDiffWritten
parameter_list|(
name|boolean
name|b
parameter_list|)
block|{
name|myIsDiffWritten
operator|=
name|b
expr_stmt|;
block|}
specifier|public
name|boolean
name|isDiffWritten
parameter_list|()
block|{
return|return
name|myIsDiffWritten
return|;
block|}
specifier|public
name|void
name|printHeader
parameter_list|(
name|OutputStream
name|os
parameter_list|)
throws|throws
name|SVNException
block|{
if|if
condition|(
name|myHeader
operator|!=
literal|null
condition|)
block|{
try|try
block|{
name|displayHeader
argument_list|(
name|os
argument_list|,
literal|null
argument_list|,
literal|false
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
name|SVNErrorMessage
name|err
init|=
name|SVNErrorMessage
operator|.
name|create
argument_list|(
name|SVNErrorCode
operator|.
name|IO_ERROR
argument_list|,
name|e
operator|.
name|getLocalizedMessage
argument_list|()
argument_list|)
decl_stmt|;
name|SVNErrorManager
operator|.
name|error
argument_list|(
name|err
argument_list|,
name|e
argument_list|,
name|SVNLogType
operator|.
name|DEFAULT
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
end_class

end_unit

