begin_unit|revision:1.0.0;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * ====================================================================  * Copyright (c) 2004-2010 TMate Software Ltd.  All rights reserved.  *  * This software is licensed as described in the file COPYING, which  * you should have received as part of this distribution.  The terms  * are also available at http://svnkit.com/license.html.  * If newer versions of this license are posted there, you may use a  * newer version instead, at your option.  * ====================================================================  */
end_comment

begin_package
package|package
name|org
operator|.
name|exist
operator|.
name|versioning
operator|.
name|svn
operator|.
name|internal
operator|.
name|wc
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collections
import|;
end_import

begin_import
import|import
name|org
operator|.
name|tmatesoft
operator|.
name|svn
operator|.
name|core
operator|.
name|internal
operator|.
name|util
operator|.
name|SVNHashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Iterator
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_comment
comment|/**  * @version 1.0  * @author  TMate Software Ltd.  */
end_comment

begin_class
specifier|public
specifier|abstract
class|class
name|SVNPasswordCipher
block|{
specifier|public
specifier|static
specifier|final
name|String
name|SIMPLE_CIPHER_TYPE
init|=
literal|"simple"
decl_stmt|;
specifier|public
specifier|static
specifier|final
name|String
name|WINCRYPT_CIPHER_TYPE
init|=
literal|"wincrypt"
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|SVNPasswordCipher
name|EMPTY_CIPHER
init|=
operator|new
name|CompositePasswordCipher
argument_list|(
name|Collections
operator|.
name|EMPTY_LIST
argument_list|,
name|SIMPLE_CIPHER_TYPE
argument_list|)
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|SVNPasswordCipher
name|SIMPLE_CIPHER
init|=
operator|new
name|CompositePasswordCipher
argument_list|(
name|Collections
operator|.
name|EMPTY_LIST
argument_list|,
name|SIMPLE_CIPHER_TYPE
argument_list|)
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|SVNPasswordCipher
name|WINCRYPT_CIPHER
init|=
operator|new
name|SVNWinCryptPasswordCipher
argument_list|()
decl_stmt|;
specifier|private
specifier|static
name|Map
name|ourInstances
init|=
operator|new
name|SVNHashMap
argument_list|()
decl_stmt|;
specifier|private
specifier|static
name|String
name|ourDefaultType
init|=
name|SIMPLE_CIPHER_TYPE
decl_stmt|;
static|static
block|{
name|ourInstances
operator|.
name|put
argument_list|(
name|SIMPLE_CIPHER_TYPE
argument_list|,
name|SIMPLE_CIPHER
argument_list|)
expr_stmt|;
if|if
condition|(
name|SVNWinCryptPasswordCipher
operator|.
name|isEnabled
argument_list|()
condition|)
block|{
name|ourInstances
operator|.
name|put
argument_list|(
name|WINCRYPT_CIPHER_TYPE
argument_list|,
name|WINCRYPT_CIPHER
argument_list|)
expr_stmt|;
name|ourDefaultType
operator|=
name|WINCRYPT_CIPHER_TYPE
expr_stmt|;
block|}
block|}
specifier|public
specifier|static
name|SVNPasswordCipher
name|getInstance
parameter_list|(
name|String
name|type
parameter_list|)
block|{
if|if
condition|(
name|type
operator|==
literal|null
condition|)
block|{
return|return
name|EMPTY_CIPHER
return|;
block|}
synchronized|synchronized
init|(
name|ourInstances
init|)
block|{
if|if
condition|(
name|ourInstances
operator|.
name|containsKey
argument_list|(
name|type
argument_list|)
condition|)
block|{
return|return
operator|(
name|SVNPasswordCipher
operator|)
name|ourInstances
operator|.
name|get
argument_list|(
name|type
argument_list|)
return|;
block|}
block|}
return|return
name|EMPTY_CIPHER
return|;
block|}
specifier|public
specifier|static
name|boolean
name|hasCipher
parameter_list|(
name|String
name|type
parameter_list|)
block|{
synchronized|synchronized
init|(
name|ourInstances
init|)
block|{
return|return
name|type
operator|!=
literal|null
operator|&&
name|ourInstances
operator|.
name|containsKey
argument_list|(
name|type
argument_list|)
return|;
block|}
block|}
specifier|public
specifier|static
name|void
name|setDefaultCipherType
parameter_list|(
name|String
name|type
parameter_list|)
block|{
synchronized|synchronized
init|(
name|ourInstances
init|)
block|{
name|ourDefaultType
operator|=
name|type
expr_stmt|;
block|}
block|}
specifier|public
specifier|static
name|String
name|getDefaultCipherType
parameter_list|()
block|{
synchronized|synchronized
init|(
name|ourInstances
init|)
block|{
if|if
condition|(
name|ourDefaultType
operator|!=
literal|null
condition|)
block|{
return|return
name|ourDefaultType
return|;
block|}
if|else if
condition|(
operator|!
name|ourInstances
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|ourDefaultType
operator|=
operator|(
name|String
operator|)
name|ourInstances
operator|.
name|keySet
argument_list|()
operator|.
name|iterator
argument_list|()
operator|.
name|next
argument_list|()
expr_stmt|;
return|return
name|ourDefaultType
return|;
block|}
block|}
return|return
name|SIMPLE_CIPHER_TYPE
return|;
block|}
specifier|public
specifier|static
name|void
name|registerCipher
parameter_list|(
name|String
name|type
parameter_list|,
name|SVNPasswordCipher
name|cipher
parameter_list|)
block|{
if|if
condition|(
name|type
operator|!=
literal|null
operator|&&
name|cipher
operator|!=
literal|null
condition|)
block|{
synchronized|synchronized
init|(
name|ourInstances
init|)
block|{
if|if
condition|(
name|ourInstances
operator|.
name|containsKey
argument_list|(
name|type
argument_list|)
condition|)
block|{
operator|(
operator|(
name|CompositePasswordCipher
operator|)
name|ourInstances
operator|.
name|get
argument_list|(
name|type
argument_list|)
operator|)
operator|.
name|addCipher
argument_list|(
name|cipher
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|cipher
operator|=
operator|new
name|CompositePasswordCipher
argument_list|(
name|cipher
argument_list|)
expr_stmt|;
name|ourInstances
operator|.
name|put
argument_list|(
name|type
argument_list|,
name|cipher
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
specifier|protected
name|SVNPasswordCipher
parameter_list|()
block|{
block|}
specifier|public
specifier|abstract
name|String
name|encrypt
parameter_list|(
name|String
name|rawData
parameter_list|)
function_decl|;
specifier|public
specifier|abstract
name|String
name|decrypt
parameter_list|(
name|String
name|encyrptedData
parameter_list|)
function_decl|;
specifier|public
specifier|abstract
name|String
name|getCipherType
parameter_list|()
function_decl|;
specifier|private
specifier|static
class|class
name|CompositePasswordCipher
extends|extends
name|SVNPasswordCipher
block|{
specifier|private
name|List
name|myCiphers
decl_stmt|;
specifier|private
name|String
name|myCipherType
decl_stmt|;
specifier|private
name|CompositePasswordCipher
parameter_list|(
name|List
name|chiphers
parameter_list|,
name|String
name|cipherType
parameter_list|)
block|{
name|myCiphers
operator|=
name|chiphers
expr_stmt|;
name|myCipherType
operator|=
name|cipherType
expr_stmt|;
block|}
specifier|public
name|CompositePasswordCipher
parameter_list|(
name|SVNPasswordCipher
name|chipher
parameter_list|)
block|{
name|myCiphers
operator|=
operator|new
name|ArrayList
argument_list|()
expr_stmt|;
name|myCiphers
operator|.
name|add
argument_list|(
name|chipher
argument_list|)
expr_stmt|;
block|}
specifier|public
specifier|synchronized
name|void
name|addCipher
parameter_list|(
name|SVNPasswordCipher
name|chipher
parameter_list|)
block|{
name|myCiphers
operator|.
name|add
argument_list|(
name|chipher
argument_list|)
expr_stmt|;
block|}
specifier|public
specifier|synchronized
name|String
name|decrypt
parameter_list|(
name|String
name|encyrptedData
parameter_list|)
block|{
for|for
control|(
name|Iterator
name|chiphers
init|=
name|myCiphers
operator|.
name|iterator
argument_list|()
init|;
name|chiphers
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|SVNPasswordCipher
name|chipher
init|=
operator|(
name|SVNPasswordCipher
operator|)
name|chiphers
operator|.
name|next
argument_list|()
decl_stmt|;
name|encyrptedData
operator|=
name|chipher
operator|.
name|decrypt
argument_list|(
name|encyrptedData
argument_list|)
expr_stmt|;
block|}
return|return
name|encyrptedData
return|;
block|}
specifier|public
specifier|synchronized
name|String
name|encrypt
parameter_list|(
name|String
name|rawData
parameter_list|)
block|{
for|for
control|(
name|Iterator
name|chiphers
init|=
name|myCiphers
operator|.
name|iterator
argument_list|()
init|;
name|chiphers
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|SVNPasswordCipher
name|chipher
init|=
operator|(
name|SVNPasswordCipher
operator|)
name|chiphers
operator|.
name|next
argument_list|()
decl_stmt|;
name|rawData
operator|=
name|chipher
operator|.
name|encrypt
argument_list|(
name|rawData
argument_list|)
expr_stmt|;
block|}
return|return
name|rawData
return|;
block|}
specifier|public
name|String
name|getCipherType
parameter_list|()
block|{
return|return
name|myCipherType
return|;
block|}
block|}
block|}
end_class

end_unit

