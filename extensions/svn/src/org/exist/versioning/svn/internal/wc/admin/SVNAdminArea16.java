begin_unit|revision:1.0.0;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * ====================================================================  * Copyright (c) 2004-2010 TMate Software Ltd.  All rights reserved.  *  * This software is licensed as described in the file COPYING, which  * you should have received as part of this distribution.  The terms  * are also available at http://svnkit.com/license.html.  * If newer versions of this license are posted there, you may use a  * newer version instead, at your option.  * ====================================================================  */
end_comment

begin_package
package|package
name|org
operator|.
name|exist
operator|.
name|versioning
operator|.
name|svn
operator|.
name|internal
operator|.
name|wc
operator|.
name|admin
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|BufferedReader
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|File
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|Writer
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|versioning
operator|.
name|svn
operator|.
name|internal
operator|.
name|wc
operator|.
name|SVNErrorManager
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|versioning
operator|.
name|svn
operator|.
name|internal
operator|.
name|wc
operator|.
name|SVNFileUtil
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|versioning
operator|.
name|svn
operator|.
name|internal
operator|.
name|wc
operator|.
name|SVNTreeConflictUtil
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|versioning
operator|.
name|svn
operator|.
name|wc
operator|.
name|SVNTreeConflictDescription
import|;
end_import

begin_import
import|import
name|org
operator|.
name|tmatesoft
operator|.
name|svn
operator|.
name|core
operator|.
name|SVNErrorCode
import|;
end_import

begin_import
import|import
name|org
operator|.
name|tmatesoft
operator|.
name|svn
operator|.
name|core
operator|.
name|SVNErrorMessage
import|;
end_import

begin_import
import|import
name|org
operator|.
name|tmatesoft
operator|.
name|svn
operator|.
name|core
operator|.
name|SVNException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|tmatesoft
operator|.
name|svn
operator|.
name|core
operator|.
name|SVNProperty
import|;
end_import

begin_import
import|import
name|org
operator|.
name|tmatesoft
operator|.
name|svn
operator|.
name|core
operator|.
name|SVNURL
import|;
end_import

begin_import
import|import
name|org
operator|.
name|tmatesoft
operator|.
name|svn
operator|.
name|core
operator|.
name|SVNProperties
import|;
end_import

begin_import
import|import
name|org
operator|.
name|tmatesoft
operator|.
name|svn
operator|.
name|core
operator|.
name|internal
operator|.
name|util
operator|.
name|SVNHashMap
import|;
end_import

begin_import
import|import
name|org
operator|.
name|tmatesoft
operator|.
name|svn
operator|.
name|core
operator|.
name|wc
operator|.
name|SVNRevision
import|;
end_import

begin_import
import|import
name|org
operator|.
name|tmatesoft
operator|.
name|svn
operator|.
name|util
operator|.
name|SVNLogType
import|;
end_import

begin_comment
comment|/**  * @version 1.3  * @author  TMate Software Ltd.  */
end_comment

begin_class
specifier|public
class|class
name|SVNAdminArea16
extends|extends
name|SVNAdminArea15
block|{
specifier|public
specifier|static
specifier|final
name|int
name|WC_FORMAT
init|=
name|SVNAdminArea16Factory
operator|.
name|WC_FORMAT
decl_stmt|;
specifier|public
name|SVNAdminArea16
parameter_list|(
name|File
name|dir
parameter_list|)
block|{
name|super
argument_list|(
name|dir
argument_list|)
expr_stmt|;
block|}
specifier|public
name|boolean
name|hasTreeConflict
parameter_list|(
name|String
name|victimName
parameter_list|)
throws|throws
name|SVNException
block|{
return|return
name|getTreeConflict
argument_list|(
name|victimName
argument_list|)
operator|!=
literal|null
return|;
block|}
specifier|public
name|SVNTreeConflictDescription
name|getTreeConflict
parameter_list|(
name|String
name|victimName
parameter_list|)
throws|throws
name|SVNException
block|{
name|SVNEntry
name|dirEntry
init|=
name|getEntry
argument_list|(
name|getThisDirName
argument_list|()
argument_list|,
literal|false
argument_list|)
decl_stmt|;
if|if
condition|(
name|dirEntry
operator|==
literal|null
condition|)
block|{
return|return
literal|null
return|;
block|}
name|Map
name|conflicts
init|=
name|dirEntry
operator|.
name|getTreeConflicts
argument_list|()
decl_stmt|;
return|return
operator|(
name|SVNTreeConflictDescription
operator|)
name|conflicts
operator|.
name|get
argument_list|(
name|getFile
argument_list|(
name|victimName
argument_list|)
argument_list|)
return|;
block|}
specifier|public
name|void
name|addTreeConflict
parameter_list|(
name|SVNTreeConflictDescription
name|conflict
parameter_list|)
throws|throws
name|SVNException
block|{
name|SVNTreeConflictDescription
name|existingDescription
init|=
name|getTreeConflict
argument_list|(
name|conflict
operator|.
name|getPath
argument_list|()
operator|.
name|getName
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|existingDescription
operator|!=
literal|null
condition|)
block|{
name|SVNErrorMessage
name|error
init|=
name|SVNErrorMessage
operator|.
name|create
argument_list|(
name|SVNErrorCode
operator|.
name|WC_CORRUPT
argument_list|,
literal|"Attempt to add tree conflict that already exists at ''{0}''"
argument_list|,
name|conflict
operator|.
name|getPath
argument_list|()
argument_list|)
decl_stmt|;
name|SVNErrorManager
operator|.
name|error
argument_list|(
name|error
argument_list|,
name|SVNLogType
operator|.
name|WC
argument_list|)
expr_stmt|;
block|}
name|Map
name|conflicts
init|=
operator|new
name|SVNHashMap
argument_list|()
decl_stmt|;
name|conflicts
operator|.
name|put
argument_list|(
name|conflict
operator|.
name|getPath
argument_list|()
argument_list|,
name|conflict
argument_list|)
expr_stmt|;
name|String
name|conflictData
init|=
name|SVNTreeConflictUtil
operator|.
name|getTreeConflictData
argument_list|(
name|conflicts
argument_list|)
decl_stmt|;
name|SVNProperties
name|command
init|=
operator|new
name|SVNProperties
argument_list|()
decl_stmt|;
name|command
operator|.
name|put
argument_list|(
name|SVNLog
operator|.
name|NAME_ATTR
argument_list|,
name|getThisDirName
argument_list|()
argument_list|)
expr_stmt|;
name|command
operator|.
name|put
argument_list|(
name|SVNLog
operator|.
name|DATA_ATTR
argument_list|,
name|conflictData
argument_list|)
expr_stmt|;
name|SVNLog
name|log
init|=
name|getLog
argument_list|()
decl_stmt|;
name|log
operator|.
name|addCommand
argument_list|(
name|SVNLog
operator|.
name|ADD_TREE_CONFLICT
argument_list|,
name|command
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|log
operator|.
name|save
argument_list|()
expr_stmt|;
name|runLogs
argument_list|()
expr_stmt|;
block|}
specifier|public
name|SVNTreeConflictDescription
name|deleteTreeConflict
parameter_list|(
name|String
name|victimName
parameter_list|)
throws|throws
name|SVNException
block|{
name|SVNEntry
name|dirEntry
init|=
name|getEntry
argument_list|(
name|getThisDirName
argument_list|()
argument_list|,
literal|false
argument_list|)
decl_stmt|;
name|Map
name|conflicts
init|=
name|dirEntry
operator|.
name|getTreeConflicts
argument_list|()
decl_stmt|;
name|File
name|victimPath
init|=
name|getFile
argument_list|(
name|victimName
argument_list|)
decl_stmt|;
if|if
condition|(
name|conflicts
operator|.
name|containsKey
argument_list|(
name|victimPath
argument_list|)
condition|)
block|{
name|SVNTreeConflictDescription
name|conflict
init|=
operator|(
name|SVNTreeConflictDescription
operator|)
name|conflicts
operator|.
name|remove
argument_list|(
name|victimPath
argument_list|)
decl_stmt|;
name|String
name|conflictData
init|=
name|SVNTreeConflictUtil
operator|.
name|getTreeConflictData
argument_list|(
name|conflicts
argument_list|)
decl_stmt|;
name|Map
name|attributes
init|=
operator|new
name|SVNHashMap
argument_list|()
decl_stmt|;
name|attributes
operator|.
name|put
argument_list|(
name|SVNProperty
operator|.
name|TREE_CONFLICT_DATA
argument_list|,
name|conflictData
argument_list|)
expr_stmt|;
name|modifyEntry
argument_list|(
name|getThisDirName
argument_list|()
argument_list|,
name|attributes
argument_list|,
literal|true
argument_list|,
literal|false
argument_list|)
expr_stmt|;
return|return
name|conflict
return|;
block|}
return|return
literal|null
return|;
block|}
specifier|public
name|void
name|setFileExternalLocation
parameter_list|(
name|String
name|name
parameter_list|,
name|SVNURL
name|url
parameter_list|,
name|SVNRevision
name|pegRevision
parameter_list|,
name|SVNRevision
name|revision
parameter_list|,
name|SVNURL
name|reposRootURL
parameter_list|)
throws|throws
name|SVNException
block|{
name|Map
name|attributes
init|=
operator|new
name|HashMap
argument_list|()
decl_stmt|;
if|if
condition|(
name|url
operator|!=
literal|null
condition|)
block|{
name|String
name|strURL
init|=
name|url
operator|.
name|toDecodedString
argument_list|()
decl_stmt|;
name|String
name|reposRootStrURL
init|=
name|reposRootURL
operator|.
name|toDecodedString
argument_list|()
decl_stmt|;
name|String
name|path
init|=
name|strURL
operator|.
name|substring
argument_list|(
name|reposRootStrURL
operator|.
name|length
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|path
operator|.
name|startsWith
argument_list|(
literal|"/"
argument_list|)
condition|)
block|{
name|path
operator|=
literal|"/"
operator|+
name|path
expr_stmt|;
block|}
name|attributes
operator|.
name|put
argument_list|(
name|SVNProperty
operator|.
name|FILE_EXTERNAL_PEG_REVISION
argument_list|,
name|pegRevision
argument_list|)
expr_stmt|;
name|attributes
operator|.
name|put
argument_list|(
name|SVNProperty
operator|.
name|FILE_EXTERNAL_REVISION
argument_list|,
name|revision
argument_list|)
expr_stmt|;
name|attributes
operator|.
name|put
argument_list|(
name|SVNProperty
operator|.
name|FILE_EXTERNAL_PATH
argument_list|,
name|path
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|attributes
operator|.
name|put
argument_list|(
name|SVNProperty
operator|.
name|FILE_EXTERNAL_PEG_REVISION
argument_list|,
name|SVNRevision
operator|.
name|UNDEFINED
argument_list|)
expr_stmt|;
name|attributes
operator|.
name|put
argument_list|(
name|SVNProperty
operator|.
name|FILE_EXTERNAL_REVISION
argument_list|,
name|SVNRevision
operator|.
name|UNDEFINED
argument_list|)
expr_stmt|;
name|attributes
operator|.
name|put
argument_list|(
name|SVNProperty
operator|.
name|FILE_EXTERNAL_PATH
argument_list|,
literal|null
argument_list|)
expr_stmt|;
block|}
name|modifyEntry
argument_list|(
name|name
argument_list|,
name|attributes
argument_list|,
literal|true
argument_list|,
literal|false
argument_list|)
expr_stmt|;
block|}
specifier|public
name|int
name|getFormatVersion
parameter_list|()
block|{
return|return
name|SVNAdminArea16Factory
operator|.
name|WC_FORMAT
return|;
block|}
specifier|public
name|void
name|postUpgradeFormat
parameter_list|(
name|int
name|format
parameter_list|)
throws|throws
name|SVNException
block|{
name|super
operator|.
name|postUpgradeFormat
argument_list|(
name|format
argument_list|)
expr_stmt|;
try|try
block|{
name|SVNFileUtil
operator|.
name|deleteFile
argument_list|(
name|getAdminFile
argument_list|(
literal|"format"
argument_list|)
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|SVNException
name|svne
parameter_list|)
block|{
block|}
block|}
specifier|protected
name|void
name|createFormatFile
parameter_list|(
name|File
name|formatFile
parameter_list|,
name|boolean
name|createMyself
parameter_list|)
throws|throws
name|SVNException
block|{
comment|//does nothing since the working copy format v10
block|}
specifier|protected
name|boolean
name|readExtraOptions
parameter_list|(
name|BufferedReader
name|reader
parameter_list|,
name|Map
name|entryAttrs
parameter_list|)
throws|throws
name|SVNException
throws|,
name|IOException
block|{
if|if
condition|(
name|super
operator|.
name|readExtraOptions
argument_list|(
name|reader
argument_list|,
name|entryAttrs
argument_list|)
condition|)
block|{
return|return
literal|true
return|;
block|}
name|String
name|line
init|=
name|reader
operator|.
name|readLine
argument_list|()
decl_stmt|;
if|if
condition|(
name|isEntryFinished
argument_list|(
name|line
argument_list|)
condition|)
block|{
return|return
literal|true
return|;
block|}
name|String
name|treeConflictData
init|=
name|parseString
argument_list|(
name|line
argument_list|)
decl_stmt|;
if|if
condition|(
name|treeConflictData
operator|!=
literal|null
condition|)
block|{
name|entryAttrs
operator|.
name|put
argument_list|(
name|SVNProperty
operator|.
name|TREE_CONFLICT_DATA
argument_list|,
name|treeConflictData
argument_list|)
expr_stmt|;
block|}
name|line
operator|=
name|reader
operator|.
name|readLine
argument_list|()
expr_stmt|;
if|if
condition|(
name|isEntryFinished
argument_list|(
name|line
argument_list|)
condition|)
block|{
return|return
literal|true
return|;
block|}
name|String
name|fileExternalData
init|=
name|parseString
argument_list|(
name|line
argument_list|)
decl_stmt|;
if|if
condition|(
name|fileExternalData
operator|!=
literal|null
condition|)
block|{
name|unserializeExternalFileData
argument_list|(
name|entryAttrs
argument_list|,
name|fileExternalData
argument_list|)
expr_stmt|;
block|}
return|return
literal|false
return|;
block|}
specifier|protected
name|int
name|writeExtraOptions
parameter_list|(
name|Writer
name|writer
parameter_list|,
name|String
name|entryName
parameter_list|,
name|Map
name|entryAttrs
parameter_list|,
name|int
name|emptyFields
parameter_list|)
throws|throws
name|SVNException
throws|,
name|IOException
block|{
name|emptyFields
operator|=
name|super
operator|.
name|writeExtraOptions
argument_list|(
name|writer
argument_list|,
name|entryName
argument_list|,
name|entryAttrs
argument_list|,
name|emptyFields
argument_list|)
expr_stmt|;
name|String
name|treeConflictData
init|=
operator|(
name|String
operator|)
name|entryAttrs
operator|.
name|get
argument_list|(
name|SVNProperty
operator|.
name|TREE_CONFLICT_DATA
argument_list|)
decl_stmt|;
if|if
condition|(
name|writeString
argument_list|(
name|writer
argument_list|,
name|treeConflictData
argument_list|,
name|emptyFields
argument_list|)
condition|)
block|{
name|emptyFields
operator|=
literal|0
expr_stmt|;
block|}
else|else
block|{
operator|++
name|emptyFields
expr_stmt|;
block|}
name|String
name|serializedFileExternalData
init|=
name|serializeExternalFileData
argument_list|(
name|entryAttrs
argument_list|)
decl_stmt|;
if|if
condition|(
name|writeString
argument_list|(
name|writer
argument_list|,
name|serializedFileExternalData
argument_list|,
name|emptyFields
argument_list|)
condition|)
block|{
name|emptyFields
operator|=
literal|0
expr_stmt|;
block|}
else|else
block|{
operator|++
name|emptyFields
expr_stmt|;
block|}
return|return
name|emptyFields
return|;
block|}
specifier|private
name|String
name|serializeExternalFileData
parameter_list|(
name|Map
name|entryAttrs
parameter_list|)
throws|throws
name|SVNException
block|{
name|String
name|representation
init|=
literal|null
decl_stmt|;
name|String
name|path
init|=
operator|(
name|String
operator|)
name|entryAttrs
operator|.
name|get
argument_list|(
name|SVNProperty
operator|.
name|FILE_EXTERNAL_PATH
argument_list|)
decl_stmt|;
name|SVNRevision
name|revision
init|=
operator|(
name|SVNRevision
operator|)
name|entryAttrs
operator|.
name|get
argument_list|(
name|SVNProperty
operator|.
name|FILE_EXTERNAL_REVISION
argument_list|)
decl_stmt|;
name|SVNRevision
name|pegRevision
init|=
operator|(
name|SVNRevision
operator|)
name|entryAttrs
operator|.
name|get
argument_list|(
name|SVNProperty
operator|.
name|FILE_EXTERNAL_PEG_REVISION
argument_list|)
decl_stmt|;
if|if
condition|(
name|path
operator|!=
literal|null
condition|)
block|{
name|String
name|revStr
init|=
name|asString
argument_list|(
name|revision
argument_list|,
name|path
argument_list|)
decl_stmt|;
name|String
name|pegRevStr
init|=
name|asString
argument_list|(
name|pegRevision
argument_list|,
name|path
argument_list|)
decl_stmt|;
name|representation
operator|=
name|pegRevStr
operator|+
literal|":"
operator|+
name|revStr
operator|+
literal|":"
operator|+
name|path
expr_stmt|;
block|}
return|return
name|representation
return|;
block|}
specifier|private
name|String
name|asString
parameter_list|(
name|SVNRevision
name|revision
parameter_list|,
name|String
name|path
parameter_list|)
throws|throws
name|SVNException
block|{
if|if
condition|(
name|revision
operator|==
name|SVNRevision
operator|.
name|HEAD
operator|||
name|SVNRevision
operator|.
name|isValidRevisionNumber
argument_list|(
name|revision
operator|.
name|getNumber
argument_list|()
argument_list|)
condition|)
block|{
return|return
name|revision
operator|.
name|toString
argument_list|()
return|;
block|}
name|SVNErrorMessage
name|err
init|=
name|SVNErrorMessage
operator|.
name|create
argument_list|(
name|SVNErrorCode
operator|.
name|INCORRECT_PARAMS
argument_list|,
literal|"Illegal file external revision kind {0} for path ''{1}''"
argument_list|,
operator|new
name|Object
index|[]
block|{
name|revision
operator|.
name|toString
argument_list|()
block|,
name|path
block|}
argument_list|)
decl_stmt|;
name|SVNErrorManager
operator|.
name|error
argument_list|(
name|err
argument_list|,
name|SVNLogType
operator|.
name|WC
argument_list|)
expr_stmt|;
return|return
literal|null
return|;
block|}
specifier|private
name|void
name|unserializeExternalFileData
parameter_list|(
name|Map
name|entryAttrs
parameter_list|,
name|String
name|rawExternalFileData
parameter_list|)
throws|throws
name|SVNException
block|{
name|SVNRevision
name|pegRevision
init|=
name|SVNRevision
operator|.
name|UNDEFINED
decl_stmt|;
name|SVNRevision
name|revision
init|=
name|SVNRevision
operator|.
name|UNDEFINED
decl_stmt|;
name|String
name|path
init|=
literal|null
decl_stmt|;
if|if
condition|(
name|rawExternalFileData
operator|!=
literal|null
condition|)
block|{
name|StringBuffer
name|buffer
init|=
operator|new
name|StringBuffer
argument_list|(
name|rawExternalFileData
argument_list|)
decl_stmt|;
name|pegRevision
operator|=
name|parseRevision
argument_list|(
name|buffer
argument_list|)
expr_stmt|;
name|revision
operator|=
name|parseRevision
argument_list|(
name|buffer
argument_list|)
expr_stmt|;
name|path
operator|=
name|buffer
operator|.
name|toString
argument_list|()
expr_stmt|;
block|}
name|entryAttrs
operator|.
name|put
argument_list|(
name|SVNProperty
operator|.
name|FILE_EXTERNAL_PATH
argument_list|,
name|path
argument_list|)
expr_stmt|;
name|entryAttrs
operator|.
name|put
argument_list|(
name|SVNProperty
operator|.
name|FILE_EXTERNAL_REVISION
argument_list|,
name|revision
argument_list|)
expr_stmt|;
name|entryAttrs
operator|.
name|put
argument_list|(
name|SVNProperty
operator|.
name|FILE_EXTERNAL_PEG_REVISION
argument_list|,
name|pegRevision
argument_list|)
expr_stmt|;
block|}
specifier|private
name|SVNRevision
name|parseRevision
parameter_list|(
name|StringBuffer
name|str
parameter_list|)
throws|throws
name|SVNException
block|{
name|int
name|ind
init|=
name|str
operator|.
name|indexOf
argument_list|(
literal|":"
argument_list|)
decl_stmt|;
if|if
condition|(
name|ind
operator|==
operator|-
literal|1
condition|)
block|{
name|SVNErrorMessage
name|err
init|=
name|SVNErrorMessage
operator|.
name|create
argument_list|(
name|SVNErrorCode
operator|.
name|INCORRECT_PARAMS
argument_list|,
literal|"Found an unexpected \\0 in the file external ''{0}''"
argument_list|,
name|str
argument_list|)
decl_stmt|;
name|SVNErrorManager
operator|.
name|error
argument_list|(
name|err
argument_list|,
name|SVNLogType
operator|.
name|WC
argument_list|)
expr_stmt|;
block|}
name|SVNRevision
name|revision
init|=
literal|null
decl_stmt|;
name|String
name|subStr
init|=
name|str
operator|.
name|substring
argument_list|(
literal|0
argument_list|,
name|ind
argument_list|)
decl_stmt|;
if|if
condition|(
name|subStr
operator|.
name|equals
argument_list|(
name|SVNRevision
operator|.
name|HEAD
operator|.
name|getName
argument_list|()
argument_list|)
condition|)
block|{
name|revision
operator|=
name|SVNRevision
operator|.
name|HEAD
expr_stmt|;
block|}
else|else
block|{
name|revision
operator|=
name|SVNRevision
operator|.
name|parse
argument_list|(
name|subStr
argument_list|)
expr_stmt|;
block|}
name|str
operator|=
name|str
operator|.
name|delete
argument_list|(
literal|0
argument_list|,
name|ind
operator|+
literal|1
argument_list|)
expr_stmt|;
return|return
name|revision
return|;
block|}
specifier|protected
name|boolean
name|isEntryPropertyApplicable
parameter_list|(
name|String
name|propName
parameter_list|)
block|{
return|return
name|propName
operator|!=
literal|null
return|;
block|}
block|}
end_class

end_unit

