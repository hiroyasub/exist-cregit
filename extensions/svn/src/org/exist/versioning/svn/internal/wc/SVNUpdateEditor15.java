begin_unit|revision:1.0.0;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * ====================================================================  * Copyright (c) 2004-2010 TMate Software Ltd.  All rights reserved.  *  * This software is licensed as described in the file COPYING, which  * you should have received as part of this distribution.  The terms  * are also available at http://svnkit.com/license.html  * If newer versions of this license are posted there, you may use a  * newer version instead, at your option.  * ====================================================================  */
end_comment

begin_package
package|package
name|org
operator|.
name|exist
operator|.
name|versioning
operator|.
name|svn
operator|.
name|internal
operator|.
name|wc
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|File
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|OutputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collection
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Iterator
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|LinkedList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|versioning
operator|.
name|svn
operator|.
name|internal
operator|.
name|wc
operator|.
name|admin
operator|.
name|ISVNCleanupHandler
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|versioning
operator|.
name|svn
operator|.
name|internal
operator|.
name|wc
operator|.
name|admin
operator|.
name|SVNAdminArea
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|versioning
operator|.
name|svn
operator|.
name|internal
operator|.
name|wc
operator|.
name|admin
operator|.
name|SVNAdminAreaInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|versioning
operator|.
name|svn
operator|.
name|internal
operator|.
name|wc
operator|.
name|admin
operator|.
name|SVNEntry
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|versioning
operator|.
name|svn
operator|.
name|internal
operator|.
name|wc
operator|.
name|admin
operator|.
name|SVNLog
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|versioning
operator|.
name|svn
operator|.
name|internal
operator|.
name|wc
operator|.
name|admin
operator|.
name|SVNVersionedProperties
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|versioning
operator|.
name|svn
operator|.
name|internal
operator|.
name|wc
operator|.
name|admin
operator|.
name|SVNWCAccess
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|versioning
operator|.
name|svn
operator|.
name|wc
operator|.
name|SVNEvent
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|versioning
operator|.
name|svn
operator|.
name|wc
operator|.
name|SVNEventAction
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|versioning
operator|.
name|svn
operator|.
name|wc
operator|.
name|SVNStatusType
import|;
end_import

begin_import
import|import
name|org
operator|.
name|tmatesoft
operator|.
name|svn
operator|.
name|core
operator|.
name|SVNCommitInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|tmatesoft
operator|.
name|svn
operator|.
name|core
operator|.
name|SVNDepth
import|;
end_import

begin_import
import|import
name|org
operator|.
name|tmatesoft
operator|.
name|svn
operator|.
name|core
operator|.
name|SVNErrorCode
import|;
end_import

begin_import
import|import
name|org
operator|.
name|tmatesoft
operator|.
name|svn
operator|.
name|core
operator|.
name|SVNErrorMessage
import|;
end_import

begin_import
import|import
name|org
operator|.
name|tmatesoft
operator|.
name|svn
operator|.
name|core
operator|.
name|SVNException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|tmatesoft
operator|.
name|svn
operator|.
name|core
operator|.
name|SVNNodeKind
import|;
end_import

begin_import
import|import
name|org
operator|.
name|tmatesoft
operator|.
name|svn
operator|.
name|core
operator|.
name|SVNProperties
import|;
end_import

begin_import
import|import
name|org
operator|.
name|tmatesoft
operator|.
name|svn
operator|.
name|core
operator|.
name|SVNProperty
import|;
end_import

begin_import
import|import
name|org
operator|.
name|tmatesoft
operator|.
name|svn
operator|.
name|core
operator|.
name|SVNPropertyValue
import|;
end_import

begin_import
import|import
name|org
operator|.
name|tmatesoft
operator|.
name|svn
operator|.
name|core
operator|.
name|SVNURL
import|;
end_import

begin_import
import|import
name|org
operator|.
name|tmatesoft
operator|.
name|svn
operator|.
name|core
operator|.
name|internal
operator|.
name|util
operator|.
name|SVNEncodingUtil
import|;
end_import

begin_import
import|import
name|org
operator|.
name|tmatesoft
operator|.
name|svn
operator|.
name|core
operator|.
name|internal
operator|.
name|util
operator|.
name|SVNHashMap
import|;
end_import

begin_import
import|import
name|org
operator|.
name|tmatesoft
operator|.
name|svn
operator|.
name|core
operator|.
name|internal
operator|.
name|util
operator|.
name|SVNPathUtil
import|;
end_import

begin_import
import|import
name|org
operator|.
name|tmatesoft
operator|.
name|svn
operator|.
name|core
operator|.
name|internal
operator|.
name|wc
operator|.
name|ISVNFileFetcher
import|;
end_import

begin_import
import|import
name|org
operator|.
name|tmatesoft
operator|.
name|svn
operator|.
name|core
operator|.
name|internal
operator|.
name|wc
operator|.
name|ISVNUpdateEditor
import|;
end_import

begin_import
import|import
name|org
operator|.
name|tmatesoft
operator|.
name|svn
operator|.
name|core
operator|.
name|io
operator|.
name|SVNRepository
import|;
end_import

begin_import
import|import
name|org
operator|.
name|tmatesoft
operator|.
name|svn
operator|.
name|core
operator|.
name|io
operator|.
name|diff
operator|.
name|SVNDeltaProcessor
import|;
end_import

begin_import
import|import
name|org
operator|.
name|tmatesoft
operator|.
name|svn
operator|.
name|core
operator|.
name|io
operator|.
name|diff
operator|.
name|SVNDiffWindow
import|;
end_import

begin_import
import|import
name|org
operator|.
name|tmatesoft
operator|.
name|svn
operator|.
name|core
operator|.
name|wc
operator|.
name|SVNRevision
import|;
end_import

begin_import
import|import
name|org
operator|.
name|tmatesoft
operator|.
name|svn
operator|.
name|util
operator|.
name|SVNLogType
import|;
end_import

begin_comment
comment|/**  * @version 1.3  * @author  TMate Software Ltd.  */
end_comment

begin_class
specifier|public
class|class
name|SVNUpdateEditor15
implements|implements
name|ISVNUpdateEditor
implements|,
name|ISVNCleanupHandler
block|{
specifier|private
name|String
name|mySwitchURL
decl_stmt|;
specifier|private
name|String
name|myTarget
decl_stmt|;
specifier|private
name|String
name|myTargetURL
decl_stmt|;
specifier|private
name|String
name|myRootURL
decl_stmt|;
specifier|private
name|SVNAdminAreaInfo
name|myAdminInfo
decl_stmt|;
specifier|private
name|SVNDirectoryInfo
name|myCurrentDirectory
decl_stmt|;
specifier|private
name|SVNFileInfo
name|myCurrentFile
decl_stmt|;
specifier|private
name|long
name|myTargetRevision
decl_stmt|;
specifier|private
name|boolean
name|myIsRootOpen
decl_stmt|;
specifier|private
name|boolean
name|myIsTargetDeleted
decl_stmt|;
specifier|private
name|boolean
name|myIsUnversionedObstructionsAllowed
decl_stmt|;
specifier|private
name|boolean
name|myIsDepthSticky
decl_stmt|;
comment|//File objects
specifier|private
name|Collection
name|mySkippedPaths
decl_stmt|;
specifier|private
name|SVNWCAccess
name|myWCAccess
decl_stmt|;
specifier|private
name|SVNDeltaProcessor
name|myDeltaProcessor
decl_stmt|;
specifier|private
name|SVNDepth
name|myRequestedDepth
decl_stmt|;
specifier|private
name|String
index|[]
name|myExtensionPatterns
decl_stmt|;
specifier|private
name|ISVNFileFetcher
name|myFileFetcher
decl_stmt|;
specifier|private
name|boolean
name|myIsLockOnDemand
decl_stmt|;
specifier|private
name|SVNUpdateEditor15
parameter_list|(
name|SVNAdminAreaInfo
name|info
parameter_list|,
name|String
name|switchURL
parameter_list|,
name|boolean
name|allowUnversionedObstructions
parameter_list|,
name|boolean
name|depthIsSticky
parameter_list|,
name|SVNDepth
name|depth
parameter_list|,
name|String
index|[]
name|preservedExtensions
parameter_list|,
name|String
name|targetURL
parameter_list|,
name|String
name|rootURL
parameter_list|,
name|ISVNFileFetcher
name|fileFetcher
parameter_list|,
name|boolean
name|lockOnDemand
parameter_list|)
block|{
name|myAdminInfo
operator|=
name|info
expr_stmt|;
name|myWCAccess
operator|=
name|info
operator|.
name|getWCAccess
argument_list|()
expr_stmt|;
name|myIsUnversionedObstructionsAllowed
operator|=
name|allowUnversionedObstructions
expr_stmt|;
name|myTarget
operator|=
name|info
operator|.
name|getTargetName
argument_list|()
expr_stmt|;
name|mySwitchURL
operator|=
name|switchURL
expr_stmt|;
name|myTargetRevision
operator|=
operator|-
literal|1
expr_stmt|;
name|myRequestedDepth
operator|=
name|depth
expr_stmt|;
name|myIsDepthSticky
operator|=
name|depthIsSticky
expr_stmt|;
name|myDeltaProcessor
operator|=
operator|new
name|SVNDeltaProcessor
argument_list|()
expr_stmt|;
name|myExtensionPatterns
operator|=
name|preservedExtensions
expr_stmt|;
name|myFileFetcher
operator|=
name|fileFetcher
expr_stmt|;
name|myTargetURL
operator|=
name|targetURL
expr_stmt|;
name|myRootURL
operator|=
name|rootURL
expr_stmt|;
name|myIsLockOnDemand
operator|=
name|lockOnDemand
expr_stmt|;
if|if
condition|(
name|myTarget
operator|!=
literal|null
condition|)
block|{
name|myTargetURL
operator|=
name|SVNPathUtil
operator|.
name|append
argument_list|(
name|myTargetURL
argument_list|,
name|SVNEncodingUtil
operator|.
name|uriEncode
argument_list|(
name|myTarget
argument_list|)
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
literal|""
operator|.
name|equals
argument_list|(
name|myTarget
argument_list|)
condition|)
block|{
name|myTarget
operator|=
literal|null
expr_stmt|;
block|}
block|}
specifier|public
name|void
name|targetRevision
parameter_list|(
name|long
name|revision
parameter_list|)
throws|throws
name|SVNException
block|{
name|myTargetRevision
operator|=
name|revision
expr_stmt|;
block|}
specifier|public
name|long
name|getTargetRevision
parameter_list|()
block|{
return|return
name|myTargetRevision
return|;
block|}
specifier|public
name|void
name|openRoot
parameter_list|(
name|long
name|revision
parameter_list|)
throws|throws
name|SVNException
block|{
name|myIsRootOpen
operator|=
literal|true
expr_stmt|;
name|myCurrentDirectory
operator|=
name|createDirectoryInfo
argument_list|(
literal|null
argument_list|,
literal|""
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|myWCAccess
operator|.
name|registerCleanupHandler
argument_list|(
name|myCurrentDirectory
operator|.
name|getAdminArea
argument_list|()
argument_list|,
name|myCurrentDirectory
argument_list|)
expr_stmt|;
if|if
condition|(
name|myTarget
operator|==
literal|null
condition|)
block|{
name|SVNAdminArea
name|adminArea
init|=
name|myCurrentDirectory
operator|.
name|getAdminArea
argument_list|()
decl_stmt|;
name|SVNEntry
name|entry
init|=
name|adminArea
operator|.
name|getEntry
argument_list|(
name|adminArea
operator|.
name|getThisDirName
argument_list|()
argument_list|,
literal|false
argument_list|)
decl_stmt|;
if|if
condition|(
name|entry
operator|!=
literal|null
condition|)
block|{
name|myCurrentDirectory
operator|.
name|myAmbientDepth
operator|=
name|entry
operator|.
name|getDepth
argument_list|()
expr_stmt|;
name|myCurrentDirectory
operator|.
name|myPreviousRevision
operator|=
name|entry
operator|.
name|getRevision
argument_list|()
expr_stmt|;
block|}
name|Map
name|attributes
init|=
operator|new
name|SVNHashMap
argument_list|()
decl_stmt|;
name|attributes
operator|.
name|put
argument_list|(
name|SVNProperty
operator|.
name|REVISION
argument_list|,
name|Long
operator|.
name|toString
argument_list|(
name|myTargetRevision
argument_list|)
argument_list|)
expr_stmt|;
name|attributes
operator|.
name|put
argument_list|(
name|SVNProperty
operator|.
name|URL
argument_list|,
name|myCurrentDirectory
operator|.
name|URL
argument_list|)
expr_stmt|;
name|attributes
operator|.
name|put
argument_list|(
name|SVNProperty
operator|.
name|INCOMPLETE
argument_list|,
name|Boolean
operator|.
name|TRUE
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|myRootURL
operator|!=
literal|null
operator|&&
name|SVNPathUtil
operator|.
name|isAncestor
argument_list|(
name|myRootURL
argument_list|,
name|myCurrentDirectory
operator|.
name|URL
argument_list|)
condition|)
block|{
name|attributes
operator|.
name|put
argument_list|(
name|SVNProperty
operator|.
name|REPOS
argument_list|,
name|myRootURL
argument_list|)
expr_stmt|;
block|}
name|adminArea
operator|.
name|modifyEntry
argument_list|(
name|adminArea
operator|.
name|getThisDirName
argument_list|()
argument_list|,
name|attributes
argument_list|,
literal|true
argument_list|,
literal|false
argument_list|)
expr_stmt|;
if|if
condition|(
name|mySwitchURL
operator|!=
literal|null
condition|)
block|{
name|clearWCProperty
argument_list|(
name|myCurrentDirectory
operator|.
name|getAdminArea
argument_list|()
argument_list|,
literal|null
argument_list|)
expr_stmt|;
block|}
block|}
if|else if
condition|(
name|mySwitchURL
operator|!=
literal|null
condition|)
block|{
if|if
condition|(
name|myAdminInfo
operator|.
name|getTarget
argument_list|()
operator|==
name|myAdminInfo
operator|.
name|getAnchor
argument_list|()
condition|)
block|{
name|clearWCProperty
argument_list|(
name|myAdminInfo
operator|.
name|getTarget
argument_list|()
argument_list|,
name|myTarget
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|clearWCProperty
argument_list|(
name|myAdminInfo
operator|.
name|getTarget
argument_list|()
argument_list|,
literal|null
argument_list|)
expr_stmt|;
block|}
block|}
block|}
specifier|public
name|void
name|deleteEntry
parameter_list|(
name|String
name|path
parameter_list|,
name|long
name|revision
parameter_list|)
throws|throws
name|SVNException
block|{
name|checkIfPathIsUnderRoot
argument_list|(
name|path
argument_list|)
expr_stmt|;
name|String
name|name
init|=
name|SVNPathUtil
operator|.
name|tail
argument_list|(
name|path
argument_list|)
decl_stmt|;
name|SVNAdminArea
name|parentArea
init|=
name|myCurrentDirectory
operator|.
name|getAdminArea
argument_list|()
decl_stmt|;
name|SVNEntry
name|entry
init|=
name|parentArea
operator|.
name|getEntry
argument_list|(
name|name
argument_list|,
literal|true
argument_list|)
decl_stmt|;
if|if
condition|(
name|entry
operator|==
literal|null
condition|)
block|{
return|return;
block|}
name|SVNLog
name|log
init|=
name|myCurrentDirectory
operator|.
name|getLog
argument_list|()
decl_stmt|;
name|SVNProperties
name|attributes
init|=
operator|new
name|SVNProperties
argument_list|()
decl_stmt|;
name|attributes
operator|.
name|put
argument_list|(
name|SVNLog
operator|.
name|NAME_ATTR
argument_list|,
name|name
argument_list|)
expr_stmt|;
name|log
operator|.
name|addCommand
argument_list|(
name|SVNLog
operator|.
name|DELETE_ENTRY
argument_list|,
name|attributes
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|SVNNodeKind
name|kind
init|=
name|entry
operator|.
name|getKind
argument_list|()
decl_stmt|;
name|long
name|previousRevision
init|=
name|entry
operator|.
name|getRevision
argument_list|()
decl_stmt|;
name|boolean
name|isDeleted
init|=
name|entry
operator|.
name|isDeleted
argument_list|()
decl_stmt|;
name|SVNURL
name|url
init|=
name|entry
operator|.
name|getSVNURL
argument_list|()
decl_stmt|;
if|if
condition|(
name|path
operator|.
name|equals
argument_list|(
name|myTarget
argument_list|)
condition|)
block|{
name|attributes
operator|.
name|put
argument_list|(
name|SVNLog
operator|.
name|NAME_ATTR
argument_list|,
name|name
argument_list|)
expr_stmt|;
name|attributes
operator|.
name|put
argument_list|(
name|SVNProperty
operator|.
name|shortPropertyName
argument_list|(
name|SVNProperty
operator|.
name|KIND
argument_list|)
argument_list|,
name|kind
operator|==
name|SVNNodeKind
operator|.
name|DIR
condition|?
name|SVNProperty
operator|.
name|KIND_DIR
else|:
name|SVNProperty
operator|.
name|KIND_FILE
argument_list|)
expr_stmt|;
name|attributes
operator|.
name|put
argument_list|(
name|SVNProperty
operator|.
name|shortPropertyName
argument_list|(
name|SVNProperty
operator|.
name|REVISION
argument_list|)
argument_list|,
name|Long
operator|.
name|toString
argument_list|(
name|myTargetRevision
argument_list|)
argument_list|)
expr_stmt|;
name|attributes
operator|.
name|put
argument_list|(
name|SVNProperty
operator|.
name|shortPropertyName
argument_list|(
name|SVNProperty
operator|.
name|DELETED
argument_list|)
argument_list|,
name|Boolean
operator|.
name|TRUE
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|log
operator|.
name|addCommand
argument_list|(
name|SVNLog
operator|.
name|MODIFY_ENTRY
argument_list|,
name|attributes
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|myIsTargetDeleted
operator|=
literal|true
expr_stmt|;
block|}
try|try
block|{
name|myCurrentDirectory
operator|.
name|flushLog
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|SVNException
name|svne
parameter_list|)
block|{
name|SVNErrorMessage
name|err
init|=
name|svne
operator|.
name|getErrorMessage
argument_list|()
operator|.
name|wrap
argument_list|(
literal|"Error writing log file for ''{0}''"
argument_list|,
name|myCurrentDirectory
operator|.
name|getPath
argument_list|()
argument_list|)
decl_stmt|;
name|SVNErrorManager
operator|.
name|error
argument_list|(
name|err
argument_list|,
name|svne
argument_list|,
name|SVNLogType
operator|.
name|WC
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|myIsLockOnDemand
operator|&&
name|kind
operator|==
name|SVNNodeKind
operator|.
name|DIR
condition|)
block|{
name|SVNAdminArea
name|childArea
init|=
name|myWCAccess
operator|.
name|getAdminArea
argument_list|(
name|parentArea
operator|.
name|getFile
argument_list|(
name|name
argument_list|)
argument_list|)
decl_stmt|;
if|if
condition|(
name|childArea
operator|!=
literal|null
operator|&&
operator|!
name|childArea
operator|.
name|isLocked
argument_list|()
condition|)
block|{
name|childArea
operator|.
name|lock
argument_list|(
literal|false
argument_list|)
expr_stmt|;
block|}
block|}
if|if
condition|(
name|mySwitchURL
operator|!=
literal|null
operator|&&
name|kind
operator|==
name|SVNNodeKind
operator|.
name|DIR
condition|)
block|{
name|SVNAdminArea
name|childArea
init|=
name|myWCAccess
operator|.
name|retrieve
argument_list|(
name|parentArea
operator|.
name|getFile
argument_list|(
name|name
argument_list|)
argument_list|)
decl_stmt|;
try|try
block|{
name|childArea
operator|.
name|removeFromRevisionControl
argument_list|(
name|childArea
operator|.
name|getThisDirName
argument_list|()
argument_list|,
literal|true
argument_list|,
literal|true
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|SVNException
name|svne
parameter_list|)
block|{
name|handleLeftLocalModificationsError
argument_list|(
name|svne
argument_list|)
expr_stmt|;
block|}
block|}
try|try
block|{
name|myCurrentDirectory
operator|.
name|runLogs
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|SVNException
name|svne
parameter_list|)
block|{
name|handleLeftLocalModificationsError
argument_list|(
name|svne
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|isDeleted
condition|)
block|{
comment|// entry was deleted, but it was already deleted, no need to make a
comment|// notification.
return|return;
block|}
name|SVNEvent
name|event
init|=
name|SVNEventFactory
operator|.
name|createSVNEvent
argument_list|(
name|parentArea
operator|.
name|getFile
argument_list|(
name|name
argument_list|)
argument_list|,
name|kind
argument_list|,
literal|null
argument_list|,
name|SVNRepository
operator|.
name|INVALID_REVISION
argument_list|,
name|SVNEventAction
operator|.
name|UPDATE_DELETE
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|)
decl_stmt|;
name|event
operator|.
name|setPreviousRevision
argument_list|(
name|previousRevision
argument_list|)
expr_stmt|;
name|event
operator|.
name|setPreviousURL
argument_list|(
name|url
argument_list|)
expr_stmt|;
name|myWCAccess
operator|.
name|handleEvent
argument_list|(
name|event
argument_list|)
expr_stmt|;
block|}
specifier|private
name|void
name|handleLeftLocalModificationsError
parameter_list|(
name|SVNException
name|originalError
parameter_list|)
throws|throws
name|SVNException
block|{
name|SVNException
name|error
init|=
literal|null
decl_stmt|;
for|for
control|(
name|error
operator|=
name|originalError
init|;
name|error
operator|!=
literal|null
condition|;
control|)
block|{
if|if
condition|(
name|error
operator|.
name|getErrorMessage
argument_list|()
operator|.
name|getErrorCode
argument_list|()
operator|==
name|SVNErrorCode
operator|.
name|WC_LEFT_LOCAL_MOD
condition|)
block|{
break|break;
block|}
name|error
operator|=
operator|(
name|error
operator|.
name|getCause
argument_list|()
operator|instanceof
name|SVNException
operator|)
condition|?
operator|(
name|SVNException
operator|)
name|error
operator|.
name|getCause
argument_list|()
else|:
literal|null
expr_stmt|;
block|}
if|if
condition|(
name|error
operator|!=
literal|null
condition|)
block|{
return|return;
block|}
throw|throw
name|originalError
throw|;
block|}
specifier|public
name|void
name|addDir
parameter_list|(
name|String
name|path
parameter_list|,
name|String
name|copyFromPath
parameter_list|,
name|long
name|copyFromRevision
parameter_list|)
throws|throws
name|SVNException
block|{
name|SVNAdminArea
name|parentArea
init|=
name|myCurrentDirectory
operator|.
name|getAdminArea
argument_list|()
decl_stmt|;
name|SVNDirectoryInfo
name|parentDirectory
init|=
name|myCurrentDirectory
decl_stmt|;
name|myCurrentDirectory
operator|=
name|createDirectoryInfo
argument_list|(
name|myCurrentDirectory
argument_list|,
name|path
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|myCurrentDirectory
operator|.
name|myPreviousRevision
operator|=
operator|-
literal|1
expr_stmt|;
if|if
condition|(
name|path
operator|.
name|equals
argument_list|(
name|myTarget
argument_list|)
condition|)
block|{
name|myCurrentDirectory
operator|.
name|myAmbientDepth
operator|=
name|myRequestedDepth
operator|==
name|SVNDepth
operator|.
name|UNKNOWN
condition|?
name|SVNDepth
operator|.
name|INFINITY
else|:
name|myRequestedDepth
expr_stmt|;
block|}
if|else if
condition|(
name|myRequestedDepth
operator|==
name|SVNDepth
operator|.
name|IMMEDIATES
operator|||
operator|(
name|myRequestedDepth
operator|==
name|SVNDepth
operator|.
name|UNKNOWN
operator|&&
name|parentDirectory
operator|.
name|myAmbientDepth
operator|==
name|SVNDepth
operator|.
name|IMMEDIATES
operator|)
condition|)
block|{
name|myCurrentDirectory
operator|.
name|myAmbientDepth
operator|=
name|SVNDepth
operator|.
name|EMPTY
expr_stmt|;
block|}
else|else
block|{
name|myCurrentDirectory
operator|.
name|myAmbientDepth
operator|=
name|SVNDepth
operator|.
name|INFINITY
expr_stmt|;
block|}
name|parentDirectory
operator|.
name|flushLog
argument_list|()
expr_stmt|;
name|checkIfPathIsUnderRoot
argument_list|(
name|path
argument_list|)
expr_stmt|;
name|String
name|name
init|=
name|SVNPathUtil
operator|.
name|tail
argument_list|(
name|path
argument_list|)
decl_stmt|;
name|File
name|childDir
init|=
name|parentArea
operator|.
name|getFile
argument_list|(
name|name
argument_list|)
decl_stmt|;
name|SVNFileType
name|kind
init|=
name|SVNFileType
operator|.
name|getType
argument_list|(
name|childDir
argument_list|)
decl_stmt|;
if|if
condition|(
name|kind
operator|==
name|SVNFileType
operator|.
name|FILE
operator|||
name|kind
operator|==
name|SVNFileType
operator|.
name|UNKNOWN
condition|)
block|{
name|SVNErrorMessage
name|err
init|=
name|SVNErrorMessage
operator|.
name|create
argument_list|(
name|SVNErrorCode
operator|.
name|WC_OBSTRUCTED_UPDATE
argument_list|,
literal|"Failed to add directory ''{0}'': a non-directory object of the same name already exists"
argument_list|,
name|path
argument_list|)
decl_stmt|;
name|SVNErrorManager
operator|.
name|error
argument_list|(
name|err
argument_list|,
name|SVNLogType
operator|.
name|WC
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|kind
operator|==
name|SVNFileType
operator|.
name|DIRECTORY
condition|)
block|{
name|SVNAdminArea
name|adminArea
init|=
literal|null
decl_stmt|;
try|try
block|{
name|adminArea
operator|=
name|SVNWCAccess
operator|.
name|newInstance
argument_list|(
literal|null
argument_list|)
operator|.
name|open
argument_list|(
name|childDir
argument_list|,
literal|false
argument_list|,
literal|0
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|SVNException
name|svne
parameter_list|)
block|{
if|if
condition|(
name|svne
operator|.
name|getErrorMessage
argument_list|()
operator|.
name|getErrorCode
argument_list|()
operator|!=
name|SVNErrorCode
operator|.
name|WC_NOT_DIRECTORY
condition|)
block|{
throw|throw
name|svne
throw|;
block|}
if|if
condition|(
name|myIsUnversionedObstructionsAllowed
condition|)
block|{
name|myCurrentDirectory
operator|.
name|isExisted
operator|=
literal|true
expr_stmt|;
block|}
else|else
block|{
name|SVNErrorMessage
name|err
init|=
name|SVNErrorMessage
operator|.
name|create
argument_list|(
name|SVNErrorCode
operator|.
name|WC_OBSTRUCTED_UPDATE
argument_list|,
literal|"Failed to add directory ''{0}'': an unversioned directory of the same name already exists"
argument_list|,
name|myCurrentDirectory
operator|.
name|getPath
argument_list|()
argument_list|)
decl_stmt|;
name|SVNErrorManager
operator|.
name|error
argument_list|(
name|err
argument_list|,
name|SVNLogType
operator|.
name|WC
argument_list|)
expr_stmt|;
block|}
block|}
if|if
condition|(
name|adminArea
operator|!=
literal|null
condition|)
block|{
name|SVNEntry
name|entry
init|=
name|adminArea
operator|.
name|getEntry
argument_list|(
name|adminArea
operator|.
name|getThisDirName
argument_list|()
argument_list|,
literal|false
argument_list|)
decl_stmt|;
if|if
condition|(
name|entry
operator|!=
literal|null
operator|&&
name|entry
operator|.
name|isScheduledForAddition
argument_list|()
operator|&&
operator|!
name|entry
operator|.
name|isCopied
argument_list|()
condition|)
block|{
name|myCurrentDirectory
operator|.
name|isAddExisted
operator|=
literal|true
expr_stmt|;
block|}
else|else
block|{
name|SVNErrorMessage
name|err
init|=
name|SVNErrorMessage
operator|.
name|create
argument_list|(
name|SVNErrorCode
operator|.
name|WC_OBSTRUCTED_UPDATE
argument_list|,
literal|"Failed to add directory ''{0}'': a versioned directory of the same name already exists"
argument_list|,
name|myCurrentDirectory
operator|.
name|getPath
argument_list|()
argument_list|)
decl_stmt|;
name|SVNErrorManager
operator|.
name|error
argument_list|(
name|err
argument_list|,
name|SVNLogType
operator|.
name|WC
argument_list|)
expr_stmt|;
block|}
block|}
block|}
if|if
condition|(
name|SVNFileUtil
operator|.
name|getAdminDirectoryName
argument_list|()
operator|.
name|equals
argument_list|(
name|name
argument_list|)
condition|)
block|{
name|SVNErrorMessage
name|err
init|=
name|SVNErrorMessage
operator|.
name|create
argument_list|(
name|SVNErrorCode
operator|.
name|WC_OBSTRUCTED_UPDATE
argument_list|,
literal|"Failed to add directory ''{0}'':  object of the same name as the administrative directory"
argument_list|,
name|path
argument_list|)
decl_stmt|;
name|SVNErrorManager
operator|.
name|error
argument_list|(
name|err
argument_list|,
name|SVNLogType
operator|.
name|WC
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|copyFromPath
operator|!=
literal|null
operator|||
name|SVNRevision
operator|.
name|isValidRevisionNumber
argument_list|(
name|copyFromRevision
argument_list|)
condition|)
block|{
name|SVNErrorMessage
name|err
init|=
name|SVNErrorMessage
operator|.
name|create
argument_list|(
name|SVNErrorCode
operator|.
name|UNSUPPORTED_FEATURE
argument_list|,
literal|"Failed to add directory ''{0}'': copyfrom arguments not yet supported"
argument_list|,
name|path
argument_list|)
decl_stmt|;
name|SVNErrorManager
operator|.
name|error
argument_list|(
name|err
argument_list|,
name|SVNLogType
operator|.
name|WC
argument_list|)
expr_stmt|;
block|}
name|SVNEntry
name|entry
init|=
name|parentArea
operator|.
name|getEntry
argument_list|(
name|name
argument_list|,
literal|false
argument_list|)
decl_stmt|;
name|Map
name|attributes
init|=
operator|new
name|SVNHashMap
argument_list|()
decl_stmt|;
name|attributes
operator|.
name|put
argument_list|(
name|SVNProperty
operator|.
name|KIND
argument_list|,
name|SVNProperty
operator|.
name|KIND_DIR
argument_list|)
expr_stmt|;
name|attributes
operator|.
name|put
argument_list|(
name|SVNProperty
operator|.
name|ABSENT
argument_list|,
literal|null
argument_list|)
expr_stmt|;
name|attributes
operator|.
name|put
argument_list|(
name|SVNProperty
operator|.
name|DELETED
argument_list|,
literal|null
argument_list|)
expr_stmt|;
name|boolean
name|force
init|=
literal|false
decl_stmt|;
if|if
condition|(
name|myCurrentDirectory
operator|.
name|isAddExisted
condition|)
block|{
name|attributes
operator|.
name|put
argument_list|(
name|SVNProperty
operator|.
name|SCHEDULE
argument_list|,
literal|null
argument_list|)
expr_stmt|;
name|force
operator|=
literal|true
expr_stmt|;
block|}
name|entry
operator|=
name|parentArea
operator|.
name|modifyEntry
argument_list|(
name|name
argument_list|,
name|attributes
argument_list|,
literal|true
argument_list|,
name|force
argument_list|)
expr_stmt|;
if|if
condition|(
name|myCurrentDirectory
operator|.
name|isAddExisted
condition|)
block|{
name|attributes
operator|.
name|put
argument_list|(
name|SVNProperty
operator|.
name|REVISION
argument_list|,
name|Long
operator|.
name|toString
argument_list|(
name|myTargetRevision
argument_list|)
argument_list|)
expr_stmt|;
if|if
condition|(
name|mySwitchURL
operator|!=
literal|null
condition|)
block|{
name|attributes
operator|.
name|put
argument_list|(
name|SVNProperty
operator|.
name|URL
argument_list|,
name|SVNPathUtil
operator|.
name|append
argument_list|(
name|mySwitchURL
argument_list|,
name|name
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|SVNAdminArea
name|adminArea
init|=
name|myCurrentDirectory
operator|.
name|getAdminArea
argument_list|()
decl_stmt|;
name|adminArea
operator|.
name|modifyEntry
argument_list|(
name|adminArea
operator|.
name|getThisDirName
argument_list|()
argument_list|,
name|attributes
argument_list|,
literal|true
argument_list|,
literal|true
argument_list|)
expr_stmt|;
block|}
name|String
name|rootURL
init|=
literal|null
decl_stmt|;
if|if
condition|(
name|SVNPathUtil
operator|.
name|isAncestor
argument_list|(
name|myRootURL
argument_list|,
name|myCurrentDirectory
operator|.
name|URL
argument_list|)
condition|)
block|{
name|rootURL
operator|=
name|myRootURL
expr_stmt|;
block|}
if|if
condition|(
name|myWCAccess
operator|.
name|getAdminArea
argument_list|(
name|childDir
argument_list|)
operator|!=
literal|null
condition|)
block|{
name|myWCAccess
operator|.
name|closeAdminArea
argument_list|(
name|childDir
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|SVNWCManager
operator|.
name|ensureAdminAreaExists
argument_list|(
name|childDir
argument_list|,
name|myCurrentDirectory
operator|.
name|URL
argument_list|,
name|rootURL
argument_list|,
literal|null
argument_list|,
name|myTargetRevision
argument_list|,
name|myCurrentDirectory
operator|.
name|myAmbientDepth
argument_list|)
condition|)
block|{
comment|// hack : remove created lock file.
name|SVNFileUtil
operator|.
name|deleteFile
argument_list|(
operator|new
name|File
argument_list|(
name|childDir
argument_list|,
name|SVNFileUtil
operator|.
name|getAdminDirectoryName
argument_list|()
operator|+
literal|"/lock"
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|SVNAdminArea
name|childArea
init|=
name|myWCAccess
operator|.
name|open
argument_list|(
name|childDir
argument_list|,
literal|true
argument_list|,
literal|0
argument_list|)
decl_stmt|;
name|myWCAccess
operator|.
name|registerCleanupHandler
argument_list|(
name|childArea
argument_list|,
name|myCurrentDirectory
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|myCurrentDirectory
operator|.
name|isAddExisted
condition|)
block|{
name|SVNEvent
name|event
init|=
name|SVNEventFactory
operator|.
name|createSVNEvent
argument_list|(
name|parentArea
operator|.
name|getFile
argument_list|(
name|entry
operator|.
name|getName
argument_list|()
argument_list|)
argument_list|,
name|SVNNodeKind
operator|.
name|DIR
argument_list|,
literal|null
argument_list|,
name|myTargetRevision
argument_list|,
name|myCurrentDirectory
operator|.
name|isExisted
condition|?
name|SVNEventAction
operator|.
name|UPDATE_EXISTS
else|:
name|SVNEventAction
operator|.
name|UPDATE_ADD
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|)
decl_stmt|;
name|event
operator|.
name|setPreviousRevision
argument_list|(
name|myCurrentDirectory
operator|.
name|myPreviousRevision
argument_list|)
expr_stmt|;
name|event
operator|.
name|setPreviousURL
argument_list|(
name|entry
operator|.
name|getSVNURL
argument_list|()
argument_list|)
expr_stmt|;
name|event
operator|.
name|setURL
argument_list|(
name|myCurrentDirectory
operator|.
name|URL
operator|!=
literal|null
condition|?
name|SVNURL
operator|.
name|parseURIEncoded
argument_list|(
name|myCurrentDirectory
operator|.
name|URL
argument_list|)
else|:
literal|null
argument_list|)
expr_stmt|;
name|myWCAccess
operator|.
name|handleEvent
argument_list|(
name|event
argument_list|)
expr_stmt|;
block|}
block|}
specifier|public
name|void
name|openDir
parameter_list|(
name|String
name|path
parameter_list|,
name|long
name|revision
parameter_list|)
throws|throws
name|SVNException
block|{
name|myCurrentDirectory
operator|.
name|flushLog
argument_list|()
expr_stmt|;
name|checkIfPathIsUnderRoot
argument_list|(
name|path
argument_list|)
expr_stmt|;
name|myCurrentDirectory
operator|=
name|createDirectoryInfo
argument_list|(
name|myCurrentDirectory
argument_list|,
name|path
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|SVNAdminArea
name|adminArea
init|=
name|myCurrentDirectory
operator|.
name|getAdminArea
argument_list|()
decl_stmt|;
name|myWCAccess
operator|.
name|registerCleanupHandler
argument_list|(
name|adminArea
argument_list|,
name|myCurrentDirectory
argument_list|)
expr_stmt|;
name|SVNEntry
name|entry
init|=
name|adminArea
operator|.
name|getEntry
argument_list|(
name|adminArea
operator|.
name|getThisDirName
argument_list|()
argument_list|,
literal|true
argument_list|)
decl_stmt|;
if|if
condition|(
name|entry
operator|!=
literal|null
condition|)
block|{
name|myCurrentDirectory
operator|.
name|myPreviousRevision
operator|=
name|entry
operator|.
name|getRevision
argument_list|()
expr_stmt|;
name|myCurrentDirectory
operator|.
name|myAmbientDepth
operator|=
name|entry
operator|.
name|getDepth
argument_list|()
expr_stmt|;
name|boolean
name|hasPropConflicts
init|=
name|adminArea
operator|.
name|hasPropConflict
argument_list|(
name|adminArea
operator|.
name|getThisDirName
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|hasPropConflicts
condition|)
block|{
name|myCurrentDirectory
operator|.
name|isSkipped
operator|=
literal|true
expr_stmt|;
name|Collection
name|skippedPaths
init|=
name|getSkippedPaths
argument_list|()
decl_stmt|;
name|skippedPaths
operator|.
name|add
argument_list|(
name|adminArea
operator|.
name|getRoot
argument_list|()
argument_list|)
expr_stmt|;
name|SVNEvent
name|event
init|=
name|SVNEventFactory
operator|.
name|createSVNEvent
argument_list|(
name|adminArea
operator|.
name|getRoot
argument_list|()
argument_list|,
name|SVNNodeKind
operator|.
name|DIR
argument_list|,
literal|null
argument_list|,
name|myTargetRevision
argument_list|,
name|SVNStatusType
operator|.
name|INAPPLICABLE
argument_list|,
name|SVNStatusType
operator|.
name|CONFLICTED
argument_list|,
name|SVNStatusType
operator|.
name|LOCK_INAPPLICABLE
argument_list|,
name|SVNEventAction
operator|.
name|SKIP
argument_list|,
name|SVNEventAction
operator|.
name|UPDATE_UPDATE
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|)
decl_stmt|;
name|event
operator|.
name|setPreviousRevision
argument_list|(
name|entry
operator|.
name|getRevision
argument_list|()
argument_list|)
expr_stmt|;
name|event
operator|.
name|setURL
argument_list|(
name|entry
operator|.
name|getSVNURL
argument_list|()
argument_list|)
expr_stmt|;
name|myWCAccess
operator|.
name|handleEvent
argument_list|(
name|event
argument_list|)
expr_stmt|;
return|return;
block|}
block|}
else|else
block|{
name|myCurrentDirectory
operator|.
name|myPreviousRevision
operator|=
operator|-
literal|1
expr_stmt|;
block|}
name|Map
name|attributes
init|=
operator|new
name|SVNHashMap
argument_list|()
decl_stmt|;
name|attributes
operator|.
name|put
argument_list|(
name|SVNProperty
operator|.
name|REVISION
argument_list|,
name|Long
operator|.
name|toString
argument_list|(
name|myTargetRevision
argument_list|)
argument_list|)
expr_stmt|;
name|attributes
operator|.
name|put
argument_list|(
name|SVNProperty
operator|.
name|URL
argument_list|,
name|myCurrentDirectory
operator|.
name|URL
argument_list|)
expr_stmt|;
name|attributes
operator|.
name|put
argument_list|(
name|SVNProperty
operator|.
name|INCOMPLETE
argument_list|,
name|Boolean
operator|.
name|TRUE
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|myRootURL
operator|!=
literal|null
operator|&&
name|SVNPathUtil
operator|.
name|isAncestor
argument_list|(
name|myRootURL
argument_list|,
name|myCurrentDirectory
operator|.
name|URL
argument_list|)
condition|)
block|{
name|attributes
operator|.
name|put
argument_list|(
name|SVNProperty
operator|.
name|REPOS
argument_list|,
name|myRootURL
argument_list|)
expr_stmt|;
block|}
name|entry
operator|=
name|adminArea
operator|.
name|modifyEntry
argument_list|(
name|adminArea
operator|.
name|getThisDirName
argument_list|()
argument_list|,
name|attributes
argument_list|,
literal|true
argument_list|,
literal|false
argument_list|)
expr_stmt|;
if|if
condition|(
name|mySwitchURL
operator|!=
literal|null
condition|)
block|{
name|clearWCProperty
argument_list|(
name|myCurrentDirectory
operator|.
name|getAdminArea
argument_list|()
argument_list|,
literal|null
argument_list|)
expr_stmt|;
block|}
block|}
specifier|private
name|Collection
name|getSkippedPaths
parameter_list|()
block|{
if|if
condition|(
name|mySkippedPaths
operator|==
literal|null
condition|)
block|{
name|mySkippedPaths
operator|=
operator|new
name|LinkedList
argument_list|()
expr_stmt|;
block|}
return|return
name|mySkippedPaths
return|;
block|}
specifier|public
name|void
name|absentDir
parameter_list|(
name|String
name|path
parameter_list|)
throws|throws
name|SVNException
block|{
name|absentEntry
argument_list|(
name|path
argument_list|,
name|SVNNodeKind
operator|.
name|DIR
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|absentFile
parameter_list|(
name|String
name|path
parameter_list|)
throws|throws
name|SVNException
block|{
name|absentEntry
argument_list|(
name|path
argument_list|,
name|SVNNodeKind
operator|.
name|FILE
argument_list|)
expr_stmt|;
block|}
specifier|private
name|void
name|absentEntry
parameter_list|(
name|String
name|path
parameter_list|,
name|SVNNodeKind
name|kind
parameter_list|)
throws|throws
name|SVNException
block|{
name|String
name|name
init|=
name|SVNPathUtil
operator|.
name|tail
argument_list|(
name|path
argument_list|)
decl_stmt|;
name|SVNAdminArea
name|adminArea
init|=
name|myCurrentDirectory
operator|.
name|getAdminArea
argument_list|()
decl_stmt|;
name|SVNEntry
name|entry
init|=
name|adminArea
operator|.
name|getEntry
argument_list|(
name|name
argument_list|,
literal|false
argument_list|)
decl_stmt|;
if|if
condition|(
name|entry
operator|!=
literal|null
operator|&&
name|entry
operator|.
name|isScheduledForAddition
argument_list|()
condition|)
block|{
name|SVNErrorMessage
name|err
init|=
name|SVNErrorMessage
operator|.
name|create
argument_list|(
name|SVNErrorCode
operator|.
name|WC_OBSTRUCTED_UPDATE
argument_list|,
literal|"Failed to mark ''{0}'' absent: item of the same name is already scheduled for addition"
argument_list|,
name|path
argument_list|)
decl_stmt|;
name|SVNErrorManager
operator|.
name|error
argument_list|(
name|err
argument_list|,
name|SVNLogType
operator|.
name|WC
argument_list|)
expr_stmt|;
block|}
name|Map
name|attributes
init|=
operator|new
name|SVNHashMap
argument_list|()
decl_stmt|;
name|attributes
operator|.
name|put
argument_list|(
name|SVNProperty
operator|.
name|REVISION
argument_list|,
name|Long
operator|.
name|toString
argument_list|(
name|myTargetRevision
argument_list|)
argument_list|)
expr_stmt|;
name|attributes
operator|.
name|put
argument_list|(
name|SVNProperty
operator|.
name|KIND
argument_list|,
name|kind
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|attributes
operator|.
name|put
argument_list|(
name|SVNProperty
operator|.
name|DELETED
argument_list|,
literal|null
argument_list|)
expr_stmt|;
name|attributes
operator|.
name|put
argument_list|(
name|SVNProperty
operator|.
name|ABSENT
argument_list|,
name|Boolean
operator|.
name|TRUE
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|entry
operator|=
name|adminArea
operator|.
name|modifyEntry
argument_list|(
name|name
argument_list|,
name|attributes
argument_list|,
literal|true
argument_list|,
literal|false
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|changeDirProperty
parameter_list|(
name|String
name|name
parameter_list|,
name|SVNPropertyValue
name|value
parameter_list|)
throws|throws
name|SVNException
block|{
if|if
condition|(
operator|!
name|myCurrentDirectory
operator|.
name|isSkipped
condition|)
block|{
name|myCurrentDirectory
operator|.
name|propertyChanged
argument_list|(
name|name
argument_list|,
name|value
argument_list|)
expr_stmt|;
block|}
block|}
specifier|private
name|void
name|clearWCProperty
parameter_list|(
name|SVNAdminArea
name|adminArea
parameter_list|,
name|String
name|target
parameter_list|)
throws|throws
name|SVNException
block|{
if|if
condition|(
name|adminArea
operator|==
literal|null
condition|)
block|{
return|return;
block|}
for|for
control|(
name|Iterator
name|ents
init|=
name|adminArea
operator|.
name|entries
argument_list|(
literal|false
argument_list|)
init|;
name|ents
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|SVNEntry
name|entry
init|=
operator|(
name|SVNEntry
operator|)
name|ents
operator|.
name|next
argument_list|()
decl_stmt|;
if|if
condition|(
name|target
operator|!=
literal|null
condition|)
block|{
if|if
condition|(
name|entry
operator|.
name|isFile
argument_list|()
operator|&&
name|target
operator|.
name|equals
argument_list|(
name|entry
operator|.
name|getName
argument_list|()
argument_list|)
condition|)
block|{
name|SVNVersionedProperties
name|props
init|=
name|adminArea
operator|.
name|getWCProperties
argument_list|(
name|entry
operator|.
name|getName
argument_list|()
argument_list|)
decl_stmt|;
name|props
operator|.
name|setPropertyValue
argument_list|(
name|SVNProperty
operator|.
name|WC_URL
argument_list|,
literal|null
argument_list|)
expr_stmt|;
name|adminArea
operator|.
name|saveWCProperties
argument_list|(
literal|false
argument_list|)
expr_stmt|;
block|}
continue|continue;
block|}
if|if
condition|(
name|entry
operator|.
name|isFile
argument_list|()
operator|||
name|adminArea
operator|.
name|getThisDirName
argument_list|()
operator|.
name|equals
argument_list|(
name|entry
operator|.
name|getName
argument_list|()
argument_list|)
condition|)
block|{
name|SVNVersionedProperties
name|props
init|=
name|adminArea
operator|.
name|getWCProperties
argument_list|(
name|entry
operator|.
name|getName
argument_list|()
argument_list|)
decl_stmt|;
name|props
operator|.
name|setPropertyValue
argument_list|(
name|SVNProperty
operator|.
name|WC_URL
argument_list|,
literal|null
argument_list|)
expr_stmt|;
name|adminArea
operator|.
name|saveWCProperties
argument_list|(
literal|false
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|SVNAdminArea
name|childArea
init|=
name|myAdminInfo
operator|.
name|getWCAccess
argument_list|()
operator|.
name|getAdminArea
argument_list|(
name|adminArea
operator|.
name|getFile
argument_list|(
name|entry
operator|.
name|getName
argument_list|()
argument_list|)
argument_list|)
decl_stmt|;
name|clearWCProperty
argument_list|(
name|childArea
argument_list|,
literal|null
argument_list|)
expr_stmt|;
block|}
block|}
block|}
specifier|public
name|void
name|closeDir
parameter_list|()
throws|throws
name|SVNException
block|{
name|SVNProperties
name|modifiedWCProps
init|=
name|myCurrentDirectory
operator|.
name|getChangedWCProperties
argument_list|()
decl_stmt|;
name|SVNProperties
name|modifiedEntryProps
init|=
name|myCurrentDirectory
operator|.
name|getChangedEntryProperties
argument_list|()
decl_stmt|;
name|SVNProperties
name|modifiedProps
init|=
name|myCurrentDirectory
operator|.
name|getChangedProperties
argument_list|()
decl_stmt|;
name|SVNStatusType
name|propStatus
init|=
name|SVNStatusType
operator|.
name|UNKNOWN
decl_stmt|;
name|SVNAdminArea
name|adminArea
init|=
name|myCurrentDirectory
operator|.
name|getAdminArea
argument_list|()
decl_stmt|;
if|if
condition|(
name|myAdminInfo
operator|.
name|isIncomplete
argument_list|(
name|myCurrentDirectory
operator|.
name|getPath
argument_list|()
argument_list|)
condition|)
block|{
comment|// delete all props.
name|SVNVersionedProperties
name|oldBaseProps
init|=
name|adminArea
operator|.
name|getBaseProperties
argument_list|(
name|adminArea
operator|.
name|getThisDirName
argument_list|()
argument_list|)
decl_stmt|;
name|SVNProperties
name|baseMap
init|=
name|oldBaseProps
operator|.
name|asMap
argument_list|()
decl_stmt|;
if|if
condition|(
name|modifiedProps
operator|==
literal|null
condition|)
block|{
name|modifiedProps
operator|=
operator|new
name|SVNProperties
argument_list|()
expr_stmt|;
block|}
for|for
control|(
name|Iterator
name|names
init|=
name|baseMap
operator|.
name|nameSet
argument_list|()
operator|.
name|iterator
argument_list|()
init|;
name|names
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|String
name|name
init|=
operator|(
name|String
operator|)
name|names
operator|.
name|next
argument_list|()
decl_stmt|;
if|if
condition|(
operator|!
name|modifiedProps
operator|.
name|containsName
argument_list|(
name|name
argument_list|)
condition|)
block|{
name|modifiedProps
operator|.
name|put
argument_list|(
name|name
argument_list|,
name|SVNPropertyValue
operator|.
name|create
argument_list|(
literal|null
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
block|}
if|if
condition|(
name|modifiedWCProps
operator|!=
literal|null
operator|||
name|modifiedEntryProps
operator|!=
literal|null
operator|||
name|modifiedProps
operator|!=
literal|null
condition|)
block|{
name|SVNLog
name|log
init|=
name|myCurrentDirectory
operator|.
name|getLog
argument_list|()
decl_stmt|;
if|if
condition|(
name|modifiedProps
operator|!=
literal|null
operator|&&
operator|!
name|modifiedProps
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
if|if
condition|(
name|modifiedProps
operator|.
name|containsName
argument_list|(
name|SVNProperty
operator|.
name|EXTERNALS
argument_list|)
condition|)
block|{
name|String
name|oldExternal
init|=
name|adminArea
operator|.
name|getProperties
argument_list|(
name|adminArea
operator|.
name|getThisDirName
argument_list|()
argument_list|)
operator|.
name|getStringPropertyValue
argument_list|(
name|SVNProperty
operator|.
name|EXTERNALS
argument_list|)
decl_stmt|;
name|String
name|newExternal
init|=
name|modifiedProps
operator|.
name|getStringValue
argument_list|(
name|SVNProperty
operator|.
name|EXTERNALS
argument_list|)
decl_stmt|;
name|String
name|path
init|=
name|myCurrentDirectory
operator|.
name|getPath
argument_list|()
decl_stmt|;
if|if
condition|(
name|oldExternal
operator|==
literal|null
operator|&&
name|newExternal
operator|!=
literal|null
condition|)
block|{
name|myAdminInfo
operator|.
name|addExternal
argument_list|(
name|path
argument_list|,
name|oldExternal
argument_list|,
name|newExternal
argument_list|)
expr_stmt|;
name|myAdminInfo
operator|.
name|addDepth
argument_list|(
name|path
argument_list|,
name|myCurrentDirectory
operator|.
name|myAmbientDepth
argument_list|)
expr_stmt|;
block|}
if|else if
condition|(
name|oldExternal
operator|!=
literal|null
operator|&&
name|newExternal
operator|==
literal|null
condition|)
block|{
name|myAdminInfo
operator|.
name|addExternal
argument_list|(
name|path
argument_list|,
name|oldExternal
argument_list|,
name|newExternal
argument_list|)
expr_stmt|;
name|myAdminInfo
operator|.
name|addDepth
argument_list|(
name|path
argument_list|,
name|myCurrentDirectory
operator|.
name|myAmbientDepth
argument_list|)
expr_stmt|;
block|}
if|else if
condition|(
name|oldExternal
operator|!=
literal|null
operator|&&
operator|!
name|oldExternal
operator|.
name|equals
argument_list|(
name|newExternal
argument_list|)
condition|)
block|{
name|myAdminInfo
operator|.
name|addExternal
argument_list|(
name|path
argument_list|,
name|oldExternal
argument_list|,
name|newExternal
argument_list|)
expr_stmt|;
name|myAdminInfo
operator|.
name|addDepth
argument_list|(
name|path
argument_list|,
name|myCurrentDirectory
operator|.
name|myAmbientDepth
argument_list|)
expr_stmt|;
block|}
block|}
name|SVNVersionedProperties
name|oldBaseProps
init|=
name|adminArea
operator|.
name|getBaseProperties
argument_list|(
name|adminArea
operator|.
name|getThisDirName
argument_list|()
argument_list|)
decl_stmt|;
try|try
block|{
name|propStatus
operator|=
name|adminArea
operator|.
name|mergeProperties
argument_list|(
name|adminArea
operator|.
name|getThisDirName
argument_list|()
argument_list|,
name|oldBaseProps
operator|.
name|asMap
argument_list|()
argument_list|,
name|modifiedProps
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|,
literal|true
argument_list|,
literal|false
argument_list|,
name|log
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|SVNException
name|svne
parameter_list|)
block|{
name|SVNErrorMessage
name|err
init|=
name|svne
operator|.
name|getErrorMessage
argument_list|()
operator|.
name|wrap
argument_list|(
literal|"Couldn't do property merge"
argument_list|)
decl_stmt|;
name|SVNErrorManager
operator|.
name|error
argument_list|(
name|err
argument_list|,
name|svne
argument_list|,
name|SVNLogType
operator|.
name|WC
argument_list|)
expr_stmt|;
block|}
block|}
name|log
operator|.
name|logChangedEntryProperties
argument_list|(
name|adminArea
operator|.
name|getThisDirName
argument_list|()
argument_list|,
name|modifiedEntryProps
argument_list|)
expr_stmt|;
name|log
operator|.
name|logChangedWCProperties
argument_list|(
name|adminArea
operator|.
name|getThisDirName
argument_list|()
argument_list|,
name|modifiedWCProps
argument_list|)
expr_stmt|;
block|}
name|myCurrentDirectory
operator|.
name|flushLog
argument_list|()
expr_stmt|;
name|myCurrentDirectory
operator|.
name|runLogs
argument_list|()
expr_stmt|;
name|maybeBumpDirInfo
argument_list|(
name|myCurrentDirectory
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|myCurrentDirectory
operator|.
name|isSkipped
operator|&&
operator|(
name|myCurrentDirectory
operator|.
name|isAddExisted
operator|||
operator|!
name|myCurrentDirectory
operator|.
name|IsAdded
operator|)
condition|)
block|{
if|if
condition|(
operator|!
operator|(
name|adminArea
operator|==
name|myAdminInfo
operator|.
name|getAnchor
argument_list|()
operator|&&
operator|!
literal|""
operator|.
name|equals
argument_list|(
name|myAdminInfo
operator|.
name|getTargetName
argument_list|()
argument_list|)
operator|)
condition|)
block|{
comment|// skip event for anchor when there is a target.
name|SVNEventAction
name|action
init|=
name|myCurrentDirectory
operator|.
name|isAddExisted
operator|||
name|myCurrentDirectory
operator|.
name|isExisted
condition|?
name|SVNEventAction
operator|.
name|UPDATE_EXISTS
else|:
name|SVNEventAction
operator|.
name|UPDATE_UPDATE
decl_stmt|;
if|if
condition|(
name|propStatus
operator|==
name|SVNStatusType
operator|.
name|UNKNOWN
operator|&&
name|action
operator|!=
name|SVNEventAction
operator|.
name|UPDATE_EXISTS
condition|)
block|{
name|action
operator|=
name|SVNEventAction
operator|.
name|UPDATE_NONE
expr_stmt|;
block|}
name|SVNEvent
name|event
init|=
name|SVNEventFactory
operator|.
name|createSVNEvent
argument_list|(
name|adminArea
operator|.
name|getRoot
argument_list|()
argument_list|,
name|SVNNodeKind
operator|.
name|DIR
argument_list|,
literal|null
argument_list|,
name|myTargetRevision
argument_list|,
name|SVNStatusType
operator|.
name|UNKNOWN
argument_list|,
name|propStatus
argument_list|,
literal|null
argument_list|,
name|action
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|)
decl_stmt|;
name|event
operator|.
name|setPreviousRevision
argument_list|(
name|myCurrentDirectory
operator|.
name|myPreviousRevision
argument_list|)
expr_stmt|;
name|event
operator|.
name|setURL
argument_list|(
name|myCurrentDirectory
operator|.
name|URL
operator|!=
literal|null
condition|?
name|SVNURL
operator|.
name|parseURIEncoded
argument_list|(
name|myCurrentDirectory
operator|.
name|URL
argument_list|)
else|:
literal|null
argument_list|)
expr_stmt|;
name|myWCAccess
operator|.
name|handleEvent
argument_list|(
name|event
argument_list|)
expr_stmt|;
block|}
block|}
name|myCurrentDirectory
operator|=
name|myCurrentDirectory
operator|.
name|Parent
expr_stmt|;
block|}
specifier|public
name|SVNCommitInfo
name|closeEdit
parameter_list|()
throws|throws
name|SVNException
block|{
if|if
condition|(
name|myTarget
operator|!=
literal|null
operator|&&
name|myWCAccess
operator|.
name|isMissing
argument_list|(
name|myAdminInfo
operator|.
name|getAnchor
argument_list|()
operator|.
name|getFile
argument_list|(
name|myTarget
argument_list|)
argument_list|)
condition|)
block|{
name|myCurrentDirectory
operator|=
name|createDirectoryInfo
argument_list|(
literal|null
argument_list|,
literal|""
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|myWCAccess
operator|.
name|registerCleanupHandler
argument_list|(
name|myCurrentDirectory
operator|.
name|getAdminArea
argument_list|()
argument_list|,
name|myCurrentDirectory
argument_list|)
expr_stmt|;
name|deleteEntry
argument_list|(
name|myTarget
argument_list|,
name|myTargetRevision
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
operator|!
name|myIsRootOpen
condition|)
block|{
if|if
condition|(
name|myCurrentDirectory
operator|==
literal|null
condition|)
block|{
name|myCurrentDirectory
operator|=
name|createDirectoryInfo
argument_list|(
literal|null
argument_list|,
literal|""
argument_list|,
literal|false
argument_list|)
expr_stmt|;
block|}
name|completeDirectory
argument_list|(
name|myCurrentDirectory
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
operator|!
name|myIsTargetDeleted
condition|)
block|{
name|File
name|targetFile
init|=
name|myTarget
operator|!=
literal|null
condition|?
name|myAdminInfo
operator|.
name|getAnchor
argument_list|()
operator|.
name|getFile
argument_list|(
name|myTarget
argument_list|)
else|:
name|myAdminInfo
operator|.
name|getAnchor
argument_list|()
operator|.
name|getRoot
argument_list|()
decl_stmt|;
name|SVNWCManager
operator|.
name|updateCleanup
argument_list|(
name|targetFile
argument_list|,
name|myWCAccess
argument_list|,
name|mySwitchURL
argument_list|,
name|myRootURL
argument_list|,
name|myTargetRevision
argument_list|,
literal|true
argument_list|,
name|mySkippedPaths
argument_list|,
name|myRequestedDepth
argument_list|,
name|myIsLockOnDemand
argument_list|)
expr_stmt|;
block|}
return|return
literal|null
return|;
block|}
specifier|public
name|void
name|addFile
parameter_list|(
name|String
name|path
parameter_list|,
name|String
name|copyFromPath
parameter_list|,
name|long
name|copyFromRevision
parameter_list|)
throws|throws
name|SVNException
block|{
name|myCurrentFile
operator|=
name|addFile
argument_list|(
name|myCurrentDirectory
argument_list|,
name|path
argument_list|,
name|copyFromPath
argument_list|,
name|copyFromRevision
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|openFile
parameter_list|(
name|String
name|path
parameter_list|,
name|long
name|revision
parameter_list|)
throws|throws
name|SVNException
block|{
name|myCurrentFile
operator|=
name|openFile
argument_list|(
name|path
argument_list|,
name|myCurrentDirectory
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|changeFileProperty
parameter_list|(
name|String
name|commitPath
parameter_list|,
name|String
name|name
parameter_list|,
name|SVNPropertyValue
name|value
parameter_list|)
throws|throws
name|SVNException
block|{
name|changeFileProperty
argument_list|(
name|name
argument_list|,
name|value
argument_list|,
name|myCurrentFile
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|applyTextDelta
parameter_list|(
name|String
name|commitPath
parameter_list|,
name|String
name|baseChecksum
parameter_list|)
throws|throws
name|SVNException
block|{
if|if
condition|(
name|myCurrentFile
operator|.
name|isSkipped
condition|)
block|{
return|return;
block|}
name|myCurrentFile
operator|.
name|receivedTextDelta
operator|=
literal|true
expr_stmt|;
name|SVNAdminArea
name|adminArea
init|=
name|myCurrentFile
operator|.
name|getAdminArea
argument_list|()
decl_stmt|;
name|SVNEntry
name|entry
init|=
name|adminArea
operator|.
name|getEntry
argument_list|(
name|myCurrentFile
operator|.
name|Name
argument_list|,
literal|false
argument_list|)
decl_stmt|;
name|boolean
name|replaced
init|=
name|entry
operator|!=
literal|null
operator|&&
name|entry
operator|.
name|isScheduledForReplacement
argument_list|()
decl_stmt|;
name|boolean
name|useRevertBase
init|=
name|replaced
operator|&&
name|entry
operator|.
name|getCopyFromURL
argument_list|()
operator|!=
literal|null
decl_stmt|;
if|if
condition|(
name|useRevertBase
condition|)
block|{
name|myCurrentFile
operator|.
name|baseFile
operator|=
name|adminArea
operator|.
name|getFile
argument_list|(
name|SVNAdminUtil
operator|.
name|getTextRevertPath
argument_list|(
name|myCurrentFile
operator|.
name|Name
argument_list|,
literal|false
argument_list|)
argument_list|)
expr_stmt|;
name|myCurrentFile
operator|.
name|newBaseFile
operator|=
name|adminArea
operator|.
name|getFile
argument_list|(
name|SVNAdminUtil
operator|.
name|getTextRevertPath
argument_list|(
name|myCurrentFile
operator|.
name|Name
argument_list|,
literal|true
argument_list|)
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|myCurrentFile
operator|.
name|baseFile
operator|=
name|adminArea
operator|.
name|getBaseFile
argument_list|(
name|myCurrentFile
operator|.
name|Name
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|myCurrentFile
operator|.
name|newBaseFile
operator|=
name|adminArea
operator|.
name|getBaseFile
argument_list|(
name|myCurrentFile
operator|.
name|Name
argument_list|,
literal|true
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|entry
operator|!=
literal|null
operator|&&
name|entry
operator|.
name|getChecksum
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|String
name|realChecksum
init|=
name|SVNFileUtil
operator|.
name|computeChecksum
argument_list|(
name|myCurrentFile
operator|.
name|baseFile
argument_list|)
decl_stmt|;
if|if
condition|(
name|baseChecksum
operator|!=
literal|null
condition|)
block|{
if|if
condition|(
operator|!
name|baseChecksum
operator|.
name|equals
argument_list|(
name|realChecksum
argument_list|)
condition|)
block|{
name|SVNErrorMessage
name|err
init|=
name|SVNErrorMessage
operator|.
name|create
argument_list|(
name|SVNErrorCode
operator|.
name|WC_CORRUPT_TEXT_BASE
argument_list|,
literal|"Checksum mismatch for ''{0}''; expected: ''{1}'', actual: ''{2}''"
argument_list|,
operator|new
name|Object
index|[]
block|{
name|myCurrentFile
operator|.
name|baseFile
block|,
name|baseChecksum
block|,
name|realChecksum
block|}
argument_list|)
decl_stmt|;
name|SVNErrorManager
operator|.
name|error
argument_list|(
name|err
argument_list|,
name|SVNLogType
operator|.
name|WC
argument_list|)
expr_stmt|;
block|}
block|}
name|String
name|realChecksumSafe
init|=
name|realChecksum
operator|==
literal|null
condition|?
literal|""
else|:
name|realChecksum
decl_stmt|;
name|String
name|entryChecksumSafe
init|=
name|entry
operator|.
name|getChecksum
argument_list|()
operator|==
literal|null
condition|?
literal|""
else|:
name|entry
operator|.
name|getChecksum
argument_list|()
decl_stmt|;
if|if
condition|(
operator|!
name|replaced
operator|&&
operator|!
name|realChecksumSafe
operator|.
name|equals
argument_list|(
name|entryChecksumSafe
argument_list|)
condition|)
block|{
name|SVNErrorMessage
name|err
init|=
name|SVNErrorMessage
operator|.
name|create
argument_list|(
name|SVNErrorCode
operator|.
name|WC_CORRUPT_TEXT_BASE
argument_list|,
literal|"Checksum mismatch for ''{0}''; recorded: ''{1}'', actual: ''{2}''"
argument_list|,
operator|new
name|Object
index|[]
block|{
name|myCurrentFile
operator|.
name|baseFile
block|,
name|entry
operator|.
name|getChecksum
argument_list|()
block|,
name|realChecksum
block|}
argument_list|)
decl_stmt|;
name|SVNErrorManager
operator|.
name|error
argument_list|(
name|err
argument_list|,
name|SVNLogType
operator|.
name|WC
argument_list|)
expr_stmt|;
block|}
block|}
name|File
name|baseSrcFile
init|=
literal|null
decl_stmt|;
if|if
condition|(
operator|!
name|myCurrentFile
operator|.
name|IsAdded
condition|)
block|{
name|baseSrcFile
operator|=
name|myCurrentFile
operator|.
name|baseFile
expr_stmt|;
block|}
else|else
block|{
if|if
condition|(
name|myCurrentFile
operator|.
name|copiedBaseText
operator|!=
literal|null
condition|)
block|{
name|baseSrcFile
operator|=
name|myCurrentFile
operator|.
name|copiedBaseText
expr_stmt|;
block|}
block|}
name|File
name|baseTmpFile
init|=
name|myCurrentFile
operator|.
name|newBaseFile
decl_stmt|;
name|myDeltaProcessor
operator|.
name|applyTextDelta
argument_list|(
name|baseSrcFile
argument_list|,
name|baseTmpFile
argument_list|,
literal|true
argument_list|)
expr_stmt|;
block|}
specifier|public
name|OutputStream
name|textDeltaChunk
parameter_list|(
name|String
name|commitPath
parameter_list|,
name|SVNDiffWindow
name|diffWindow
parameter_list|)
throws|throws
name|SVNException
block|{
if|if
condition|(
operator|!
name|myCurrentFile
operator|.
name|isSkipped
condition|)
block|{
try|try
block|{
name|myDeltaProcessor
operator|.
name|textDeltaChunk
argument_list|(
name|diffWindow
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|SVNException
name|svne
parameter_list|)
block|{
name|myDeltaProcessor
operator|.
name|textDeltaEnd
argument_list|()
expr_stmt|;
name|SVNFileUtil
operator|.
name|deleteFile
argument_list|(
name|myCurrentFile
operator|.
name|newBaseFile
argument_list|)
expr_stmt|;
name|myCurrentFile
operator|.
name|newBaseFile
operator|=
literal|null
expr_stmt|;
throw|throw
name|svne
throw|;
block|}
block|}
return|return
name|SVNFileUtil
operator|.
name|DUMMY_OUT
return|;
block|}
specifier|public
name|void
name|textDeltaEnd
parameter_list|(
name|String
name|commitPath
parameter_list|)
throws|throws
name|SVNException
block|{
if|if
condition|(
operator|!
name|myCurrentFile
operator|.
name|isSkipped
condition|)
block|{
name|myCurrentFile
operator|.
name|Checksum
operator|=
name|myDeltaProcessor
operator|.
name|textDeltaEnd
argument_list|()
expr_stmt|;
block|}
block|}
specifier|public
name|void
name|closeFile
parameter_list|(
name|String
name|commitPath
parameter_list|,
name|String
name|textChecksum
parameter_list|)
throws|throws
name|SVNException
block|{
name|closeFile
argument_list|(
name|textChecksum
argument_list|,
name|myCurrentFile
argument_list|,
name|myCurrentDirectory
argument_list|)
expr_stmt|;
name|myCurrentFile
operator|=
literal|null
expr_stmt|;
block|}
specifier|public
name|void
name|abortEdit
parameter_list|()
throws|throws
name|SVNException
block|{
block|}
specifier|private
name|void
name|checkIfPathIsUnderRoot
parameter_list|(
name|String
name|path
parameter_list|)
throws|throws
name|SVNException
block|{
if|if
condition|(
name|path
operator|!=
literal|null
condition|)
block|{
name|String
name|testPath
init|=
name|path
operator|.
name|replace
argument_list|(
name|File
operator|.
name|separatorChar
argument_list|,
literal|'/'
argument_list|)
decl_stmt|;
name|int
name|ind
init|=
operator|-
literal|1
decl_stmt|;
while|while
condition|(
name|testPath
operator|.
name|length
argument_list|()
operator|>
literal|0
operator|&&
operator|(
name|ind
operator|=
name|testPath
operator|.
name|indexOf
argument_list|(
literal|".."
argument_list|)
operator|)
operator|!=
operator|-
literal|1
condition|)
block|{
if|if
condition|(
name|ind
operator|==
literal|0
operator|||
name|testPath
operator|.
name|charAt
argument_list|(
name|ind
operator|-
literal|1
argument_list|)
operator|==
literal|'/'
condition|)
block|{
name|int
name|i
decl_stmt|;
for|for
control|(
name|i
operator|=
name|ind
operator|+
literal|2
init|;
name|i
operator|<
name|testPath
operator|.
name|length
argument_list|()
condition|;
name|i
operator|++
control|)
block|{
if|if
condition|(
name|testPath
operator|.
name|charAt
argument_list|(
name|i
argument_list|)
operator|==
literal|'.'
condition|)
block|{
continue|continue;
block|}
if|else if
condition|(
name|testPath
operator|.
name|charAt
argument_list|(
name|i
argument_list|)
operator|==
literal|'/'
condition|)
block|{
name|SVNErrorMessage
name|err
init|=
name|SVNErrorMessage
operator|.
name|create
argument_list|(
name|SVNErrorCode
operator|.
name|WC_OBSTRUCTED_UPDATE
argument_list|,
literal|"Path ''{0}'' is not in the working copy"
argument_list|,
name|path
argument_list|)
decl_stmt|;
name|SVNErrorManager
operator|.
name|error
argument_list|(
name|err
argument_list|,
name|SVNLogType
operator|.
name|WC
argument_list|)
expr_stmt|;
block|}
else|else
block|{
break|break;
block|}
block|}
if|if
condition|(
name|i
operator|==
name|testPath
operator|.
name|length
argument_list|()
condition|)
block|{
name|SVNErrorMessage
name|err
init|=
name|SVNErrorMessage
operator|.
name|create
argument_list|(
name|SVNErrorCode
operator|.
name|WC_OBSTRUCTED_UPDATE
argument_list|,
literal|"Path ''{0}'' is not in the working copy"
argument_list|,
name|path
argument_list|)
decl_stmt|;
name|SVNErrorManager
operator|.
name|error
argument_list|(
name|err
argument_list|,
name|SVNLogType
operator|.
name|WC
argument_list|)
expr_stmt|;
block|}
name|testPath
operator|=
name|testPath
operator|.
name|substring
argument_list|(
name|i
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|testPath
operator|=
name|testPath
operator|.
name|substring
argument_list|(
name|ind
operator|+
literal|2
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
specifier|private
name|void
name|maybeBumpDirInfo
parameter_list|(
name|SVNDirectoryInfo
name|dirInfo
parameter_list|)
throws|throws
name|SVNException
block|{
while|while
condition|(
name|dirInfo
operator|!=
literal|null
condition|)
block|{
name|dirInfo
operator|.
name|RefCount
operator|--
expr_stmt|;
if|if
condition|(
name|dirInfo
operator|.
name|RefCount
operator|>
literal|0
condition|)
block|{
return|return;
block|}
if|if
condition|(
operator|!
name|dirInfo
operator|.
name|isSkipped
condition|)
block|{
name|completeDirectory
argument_list|(
name|dirInfo
argument_list|)
expr_stmt|;
block|}
name|dirInfo
operator|=
name|dirInfo
operator|.
name|Parent
expr_stmt|;
block|}
block|}
specifier|private
name|void
name|completeDirectory
parameter_list|(
name|SVNDirectoryInfo
name|dirInfo
parameter_list|)
throws|throws
name|SVNException
block|{
if|if
condition|(
name|dirInfo
operator|.
name|Parent
operator|==
literal|null
operator|&&
name|myTarget
operator|!=
literal|null
condition|)
block|{
return|return;
block|}
name|SVNAdminArea
name|adminArea
init|=
name|dirInfo
operator|.
name|getAdminArea
argument_list|()
decl_stmt|;
name|SVNEntry
name|entry
init|=
name|adminArea
operator|.
name|getEntry
argument_list|(
name|adminArea
operator|.
name|getThisDirName
argument_list|()
argument_list|,
literal|true
argument_list|)
decl_stmt|;
if|if
condition|(
name|entry
operator|==
literal|null
condition|)
block|{
name|SVNErrorMessage
name|err
init|=
name|SVNErrorMessage
operator|.
name|create
argument_list|(
name|SVNErrorCode
operator|.
name|ENTRY_NOT_FOUND
argument_list|,
literal|"No ''.'' entry found in ''{0}''"
argument_list|,
name|adminArea
operator|.
name|getRoot
argument_list|()
argument_list|)
decl_stmt|;
name|SVNErrorManager
operator|.
name|error
argument_list|(
name|err
argument_list|,
name|SVNLogType
operator|.
name|WC
argument_list|)
expr_stmt|;
block|}
name|entry
operator|.
name|setIncomplete
argument_list|(
literal|false
argument_list|)
expr_stmt|;
name|File
name|target
init|=
name|myAdminInfo
operator|.
name|getTarget
argument_list|()
operator|.
name|getRoot
argument_list|()
decl_stmt|;
if|if
condition|(
name|myIsDepthSticky
operator|&&
operator|(
name|myRequestedDepth
operator|==
name|SVNDepth
operator|.
name|INFINITY
operator|||
operator|(
name|adminArea
operator|.
name|getRoot
argument_list|()
operator|.
name|equals
argument_list|(
name|target
argument_list|)
operator|&&
name|myRequestedDepth
operator|.
name|compareTo
argument_list|(
name|entry
operator|.
name|getDepth
argument_list|()
argument_list|)
operator|>
literal|0
operator|)
operator|)
condition|)
block|{
name|entry
operator|.
name|setDepth
argument_list|(
name|myRequestedDepth
argument_list|)
expr_stmt|;
name|myAdminInfo
operator|.
name|addDepth
argument_list|(
name|dirInfo
operator|.
name|getPath
argument_list|()
argument_list|,
name|myRequestedDepth
argument_list|)
expr_stmt|;
block|}
for|for
control|(
name|Iterator
name|ents
init|=
name|adminArea
operator|.
name|entries
argument_list|(
literal|true
argument_list|)
init|;
name|ents
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|SVNEntry
name|currentEntry
init|=
operator|(
name|SVNEntry
operator|)
name|ents
operator|.
name|next
argument_list|()
decl_stmt|;
if|if
condition|(
name|currentEntry
operator|.
name|isDeleted
argument_list|()
condition|)
block|{
if|if
condition|(
operator|!
name|currentEntry
operator|.
name|isScheduledForAddition
argument_list|()
condition|)
block|{
name|adminArea
operator|.
name|deleteEntry
argument_list|(
name|currentEntry
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|Map
name|attributes
init|=
operator|new
name|SVNHashMap
argument_list|()
decl_stmt|;
name|attributes
operator|.
name|put
argument_list|(
name|SVNProperty
operator|.
name|DELETED
argument_list|,
literal|null
argument_list|)
expr_stmt|;
name|adminArea
operator|.
name|modifyEntry
argument_list|(
name|currentEntry
operator|.
name|getName
argument_list|()
argument_list|,
name|attributes
argument_list|,
literal|false
argument_list|,
literal|false
argument_list|)
expr_stmt|;
block|}
block|}
if|else if
condition|(
name|currentEntry
operator|.
name|isAbsent
argument_list|()
operator|&&
name|currentEntry
operator|.
name|getRevision
argument_list|()
operator|!=
name|myTargetRevision
condition|)
block|{
name|adminArea
operator|.
name|deleteEntry
argument_list|(
name|currentEntry
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
block|}
if|else if
condition|(
name|currentEntry
operator|.
name|getKind
argument_list|()
operator|==
name|SVNNodeKind
operator|.
name|DIR
condition|)
block|{
if|if
condition|(
name|myWCAccess
operator|.
name|isMissing
argument_list|(
name|adminArea
operator|.
name|getFile
argument_list|(
name|currentEntry
operator|.
name|getName
argument_list|()
argument_list|)
argument_list|)
operator|&&
operator|!
name|currentEntry
operator|.
name|isAbsent
argument_list|()
operator|&&
operator|!
name|currentEntry
operator|.
name|isScheduledForAddition
argument_list|()
condition|)
block|{
name|adminArea
operator|.
name|deleteEntry
argument_list|(
name|currentEntry
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
name|myWCAccess
operator|.
name|handleEvent
argument_list|(
name|SVNEventFactory
operator|.
name|createSVNEvent
argument_list|(
name|adminArea
operator|.
name|getFile
argument_list|(
name|currentEntry
operator|.
name|getName
argument_list|()
argument_list|)
argument_list|,
name|currentEntry
operator|.
name|getKind
argument_list|()
argument_list|,
literal|null
argument_list|,
name|currentEntry
operator|.
name|getRevision
argument_list|()
argument_list|,
name|SVNEventAction
operator|.
name|UPDATE_DELETE
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
block|}
name|adminArea
operator|.
name|saveEntries
argument_list|(
literal|true
argument_list|)
expr_stmt|;
block|}
specifier|private
name|SVNFileInfo
name|addFile
parameter_list|(
name|SVNDirectoryInfo
name|parent
parameter_list|,
name|String
name|path
parameter_list|,
name|String
name|copyFromPath
parameter_list|,
name|long
name|copyFromRevision
parameter_list|)
throws|throws
name|SVNException
block|{
if|if
condition|(
name|copyFromPath
operator|!=
literal|null
operator|||
name|SVNRevision
operator|.
name|isValidRevisionNumber
argument_list|(
name|copyFromRevision
argument_list|)
condition|)
block|{
if|if
condition|(
name|copyFromPath
operator|==
literal|null
operator|||
operator|!
name|SVNRevision
operator|.
name|isValidRevisionNumber
argument_list|(
name|copyFromRevision
argument_list|)
condition|)
block|{
name|SVNErrorMessage
name|err
init|=
name|SVNErrorMessage
operator|.
name|create
argument_list|(
name|SVNErrorCode
operator|.
name|WC_INVALID_OP_ON_CWD
argument_list|,
literal|"Bad copyfrom arguments received."
argument_list|)
decl_stmt|;
name|SVNErrorManager
operator|.
name|error
argument_list|(
name|err
argument_list|,
name|SVNLogType
operator|.
name|DEFAULT
argument_list|)
expr_stmt|;
block|}
return|return
name|addFileWithHistory
argument_list|(
name|parent
argument_list|,
name|path
argument_list|,
name|copyFromPath
argument_list|,
name|copyFromRevision
argument_list|)
return|;
block|}
name|checkIfPathIsUnderRoot
argument_list|(
name|path
argument_list|)
expr_stmt|;
name|SVNFileInfo
name|info
init|=
name|createFileInfo
argument_list|(
name|parent
argument_list|,
name|path
argument_list|,
literal|true
argument_list|)
decl_stmt|;
name|SVNAdminArea
name|adminArea
init|=
name|parent
operator|.
name|getAdminArea
argument_list|()
decl_stmt|;
name|SVNFileType
name|kind
init|=
name|SVNFileType
operator|.
name|getType
argument_list|(
name|adminArea
operator|.
name|getFile
argument_list|(
name|info
operator|.
name|Name
argument_list|)
argument_list|)
decl_stmt|;
name|SVNEntry
name|entry
init|=
name|adminArea
operator|.
name|getEntry
argument_list|(
name|info
operator|.
name|Name
argument_list|,
literal|true
argument_list|)
decl_stmt|;
if|if
condition|(
name|kind
operator|!=
name|SVNFileType
operator|.
name|NONE
condition|)
block|{
if|if
condition|(
name|myIsUnversionedObstructionsAllowed
operator|||
operator|(
name|entry
operator|!=
literal|null
operator|&&
name|entry
operator|.
name|isScheduledForAddition
argument_list|()
operator|)
condition|)
block|{
if|if
condition|(
name|entry
operator|!=
literal|null
operator|&&
name|entry
operator|.
name|isCopied
argument_list|()
condition|)
block|{
name|SVNErrorMessage
name|err
init|=
name|SVNErrorMessage
operator|.
name|create
argument_list|(
name|SVNErrorCode
operator|.
name|WC_OBSTRUCTED_UPDATE
argument_list|,
literal|"Failed to add file ''{0}'': a file of the same name is already scheduled for "
operator|+
literal|"addition with history"
argument_list|,
name|path
argument_list|)
decl_stmt|;
name|SVNErrorManager
operator|.
name|error
argument_list|(
name|err
argument_list|,
name|SVNLogType
operator|.
name|WC
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|kind
operator|!=
name|SVNFileType
operator|.
name|FILE
condition|)
block|{
name|SVNErrorMessage
name|err
init|=
name|SVNErrorMessage
operator|.
name|create
argument_list|(
name|SVNErrorCode
operator|.
name|WC_OBSTRUCTED_UPDATE
argument_list|,
literal|"Failed to add file ''{0}'': a non-file object of the same name already exists"
argument_list|,
name|path
argument_list|)
decl_stmt|;
name|SVNErrorManager
operator|.
name|error
argument_list|(
name|err
argument_list|,
name|SVNLogType
operator|.
name|WC
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|entry
operator|!=
literal|null
condition|)
block|{
name|info
operator|.
name|isAddExisted
operator|=
literal|true
expr_stmt|;
block|}
else|else
block|{
name|info
operator|.
name|isExisted
operator|=
literal|true
expr_stmt|;
block|}
block|}
else|else
block|{
name|SVNErrorMessage
name|err
init|=
name|SVNErrorMessage
operator|.
name|create
argument_list|(
name|SVNErrorCode
operator|.
name|WC_OBSTRUCTED_UPDATE
argument_list|,
literal|"Failed to add file ''{0}'': object of the same name already exists"
argument_list|,
name|path
argument_list|)
decl_stmt|;
name|SVNErrorManager
operator|.
name|error
argument_list|(
name|err
argument_list|,
name|SVNLogType
operator|.
name|WC
argument_list|)
expr_stmt|;
block|}
block|}
return|return
name|info
return|;
block|}
specifier|private
name|SVNFileInfo
name|addFileWithHistory
parameter_list|(
name|SVNDirectoryInfo
name|parent
parameter_list|,
name|String
name|path
parameter_list|,
name|String
name|copyFromPath
parameter_list|,
name|long
name|copyFromRevision
parameter_list|)
throws|throws
name|SVNException
block|{
name|SVNFileInfo
name|info
init|=
name|addFile
argument_list|(
name|parent
argument_list|,
name|path
argument_list|,
literal|null
argument_list|,
name|SVNRepository
operator|.
name|INVALID_REVISION
argument_list|)
decl_stmt|;
name|info
operator|.
name|addedWithHistory
operator|=
literal|true
expr_stmt|;
name|SVNAdminArea
name|adminArea
init|=
name|parent
operator|.
name|getAdminArea
argument_list|()
decl_stmt|;
name|SVNEntry
name|pathEntry
init|=
name|adminArea
operator|.
name|getEntry
argument_list|(
name|adminArea
operator|.
name|getThisDirName
argument_list|()
argument_list|,
literal|false
argument_list|)
decl_stmt|;
name|SVNEntry
name|srcEntry
init|=
literal|null
decl_stmt|;
try|try
block|{
name|srcEntry
operator|=
name|locateCopyFrom
argument_list|(
name|copyFromPath
argument_list|,
name|copyFromRevision
argument_list|,
name|adminArea
operator|.
name|getRoot
argument_list|()
argument_list|,
name|pathEntry
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|SVNException
name|svne
parameter_list|)
block|{
if|if
condition|(
name|svne
operator|.
name|getErrorMessage
argument_list|()
operator|.
name|getErrorCode
argument_list|()
operator|!=
name|SVNErrorCode
operator|.
name|WC_COPYFROM_PATH_NOT_FOUND
condition|)
block|{
throw|throw
name|svne
throw|;
block|}
block|}
name|info
operator|.
name|copiedBaseText
operator|=
name|SVNAdminUtil
operator|.
name|createTmpFile
argument_list|(
name|adminArea
argument_list|)
expr_stmt|;
name|SVNProperties
name|baseProperties
init|=
literal|null
decl_stmt|;
name|SVNProperties
name|workingProperties
init|=
literal|null
decl_stmt|;
if|if
condition|(
name|srcEntry
operator|!=
literal|null
condition|)
block|{
name|SVNAdminArea
name|srcArea
init|=
name|srcEntry
operator|.
name|getAdminArea
argument_list|()
decl_stmt|;
name|String
name|srcTextBasePath
init|=
literal|null
decl_stmt|;
if|if
condition|(
name|srcEntry
operator|.
name|isScheduledForReplacement
argument_list|()
operator|&&
name|srcEntry
operator|.
name|getCopyFromURL
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|srcTextBasePath
operator|=
name|SVNAdminUtil
operator|.
name|getTextRevertPath
argument_list|(
name|srcEntry
operator|.
name|getName
argument_list|()
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|baseProperties
operator|=
name|srcArea
operator|.
name|getRevertProperties
argument_list|(
name|srcEntry
operator|.
name|getName
argument_list|()
argument_list|)
operator|.
name|asMap
argument_list|()
expr_stmt|;
name|workingProperties
operator|=
name|baseProperties
expr_stmt|;
block|}
else|else
block|{
name|srcTextBasePath
operator|=
name|SVNAdminUtil
operator|.
name|getTextBasePath
argument_list|(
name|srcEntry
operator|.
name|getName
argument_list|()
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|baseProperties
operator|=
name|srcArea
operator|.
name|getBaseProperties
argument_list|(
name|srcEntry
operator|.
name|getName
argument_list|()
argument_list|)
operator|.
name|asMap
argument_list|()
expr_stmt|;
name|workingProperties
operator|=
name|srcArea
operator|.
name|getProperties
argument_list|(
name|srcEntry
operator|.
name|getName
argument_list|()
argument_list|)
operator|.
name|asMap
argument_list|()
expr_stmt|;
block|}
name|SVNFileUtil
operator|.
name|copyFile
argument_list|(
name|srcArea
operator|.
name|getFile
argument_list|(
name|srcTextBasePath
argument_list|)
argument_list|,
name|info
operator|.
name|copiedBaseText
argument_list|,
literal|true
argument_list|)
expr_stmt|;
if|if
condition|(
name|srcArea
operator|.
name|hasTextModifications
argument_list|(
name|srcEntry
operator|.
name|getName
argument_list|()
argument_list|,
literal|false
argument_list|,
literal|true
argument_list|,
literal|false
argument_list|)
condition|)
block|{
name|info
operator|.
name|copiedWorkingText
operator|=
name|SVNAdminUtil
operator|.
name|createTmpFile
argument_list|(
name|adminArea
argument_list|)
expr_stmt|;
name|SVNFileUtil
operator|.
name|copyFile
argument_list|(
name|srcArea
operator|.
name|getFile
argument_list|(
name|srcEntry
operator|.
name|getName
argument_list|()
argument_list|)
argument_list|,
name|info
operator|.
name|copiedWorkingText
argument_list|,
literal|true
argument_list|)
expr_stmt|;
block|}
block|}
else|else
block|{
if|if
condition|(
name|myFileFetcher
operator|==
literal|null
condition|)
block|{
name|SVNErrorMessage
name|err
init|=
name|SVNErrorMessage
operator|.
name|create
argument_list|(
name|SVNErrorCode
operator|.
name|WC_INVALID_OP_ON_CWD
argument_list|,
literal|"No fetch_func supplied to update_editor."
argument_list|)
decl_stmt|;
name|SVNErrorManager
operator|.
name|error
argument_list|(
name|err
argument_list|,
name|SVNLogType
operator|.
name|DEFAULT
argument_list|)
expr_stmt|;
block|}
name|baseProperties
operator|=
operator|new
name|SVNProperties
argument_list|()
expr_stmt|;
name|OutputStream
name|baseTextOS
init|=
literal|null
decl_stmt|;
try|try
block|{
name|baseTextOS
operator|=
name|SVNFileUtil
operator|.
name|openFileForWriting
argument_list|(
name|info
operator|.
name|copiedBaseText
argument_list|)
expr_stmt|;
name|myFileFetcher
operator|.
name|fetchFile
argument_list|(
name|copyFromPath
argument_list|,
name|copyFromRevision
argument_list|,
name|baseTextOS
argument_list|,
name|baseProperties
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
name|SVNFileUtil
operator|.
name|closeFile
argument_list|(
name|baseTextOS
argument_list|)
expr_stmt|;
block|}
name|workingProperties
operator|=
name|baseProperties
expr_stmt|;
block|}
name|info
operator|.
name|copiedBaseProperties
operator|=
name|baseProperties
operator|.
name|getRegularProperties
argument_list|()
expr_stmt|;
name|info
operator|.
name|copiedWorkingProperties
operator|=
name|workingProperties
operator|.
name|getRegularProperties
argument_list|()
expr_stmt|;
return|return
name|info
return|;
block|}
specifier|private
name|SVNEntry
name|locateCopyFrom
parameter_list|(
name|String
name|copyFromPath
parameter_list|,
name|long
name|copyFromRevision
parameter_list|,
name|File
name|dstDir
parameter_list|,
name|SVNEntry
name|dstEntry
parameter_list|)
throws|throws
name|SVNException
block|{
if|if
condition|(
name|dstEntry
operator|.
name|getRepositoryRoot
argument_list|()
operator|==
literal|null
operator|||
name|dstEntry
operator|.
name|getURL
argument_list|()
operator|==
literal|null
condition|)
block|{
name|SVNErrorMessage
name|err
init|=
name|SVNErrorMessage
operator|.
name|create
argument_list|(
name|SVNErrorCode
operator|.
name|WC_COPYFROM_PATH_NOT_FOUND
argument_list|,
literal|"Destination directory of add-with-history is missing a URL"
argument_list|)
decl_stmt|;
name|SVNErrorManager
operator|.
name|error
argument_list|(
name|err
argument_list|,
name|SVNLogType
operator|.
name|WC
argument_list|)
expr_stmt|;
block|}
name|dstDir
operator|=
operator|new
name|File
argument_list|(
name|SVNPathUtil
operator|.
name|validateFilePath
argument_list|(
name|dstDir
operator|.
name|getAbsolutePath
argument_list|()
argument_list|)
argument_list|)
operator|.
name|getAbsoluteFile
argument_list|()
expr_stmt|;
name|String
name|dstReposPath
init|=
name|SVNPathUtil
operator|.
name|getPathAsChild
argument_list|(
name|dstEntry
operator|.
name|getRepositoryRootURL
argument_list|()
operator|.
name|toDecodedString
argument_list|()
argument_list|,
name|dstEntry
operator|.
name|getSVNURL
argument_list|()
operator|.
name|toDecodedString
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|dstReposPath
operator|==
literal|null
condition|)
block|{
if|if
condition|(
name|dstEntry
operator|.
name|getURL
argument_list|()
operator|.
name|equals
argument_list|(
name|dstEntry
operator|.
name|getRepositoryRoot
argument_list|()
argument_list|)
condition|)
block|{
name|dstReposPath
operator|=
literal|""
expr_stmt|;
block|}
else|else
block|{
name|SVNErrorMessage
name|err
init|=
name|SVNErrorMessage
operator|.
name|create
argument_list|(
name|SVNErrorCode
operator|.
name|WC_COPYFROM_PATH_NOT_FOUND
argument_list|,
literal|"Destination URLs are broken"
argument_list|)
decl_stmt|;
name|SVNErrorManager
operator|.
name|error
argument_list|(
name|err
argument_list|,
name|SVNLogType
operator|.
name|WC
argument_list|)
expr_stmt|;
block|}
block|}
name|dstReposPath
operator|=
literal|"/"
operator|+
name|dstReposPath
expr_stmt|;
name|dstReposPath
operator|=
name|SVNPathUtil
operator|.
name|canonicalizePath
argument_list|(
name|dstReposPath
argument_list|)
expr_stmt|;
name|String
name|copyFromParent
init|=
name|SVNPathUtil
operator|.
name|removeTail
argument_list|(
name|copyFromPath
argument_list|)
decl_stmt|;
name|String
name|ancestorPath
init|=
name|SVNPathUtil
operator|.
name|getCommonPathAncestor
argument_list|(
name|dstReposPath
argument_list|,
name|copyFromParent
argument_list|)
decl_stmt|;
if|if
condition|(
literal|""
operator|.
name|equals
argument_list|(
name|ancestorPath
argument_list|)
condition|)
block|{
return|return
literal|null
return|;
block|}
name|int
name|levelsUP
init|=
name|SVNPathUtil
operator|.
name|getSegmentsCount
argument_list|(
name|dstReposPath
argument_list|)
operator|-
name|SVNPathUtil
operator|.
name|getSegmentsCount
argument_list|(
name|ancestorPath
argument_list|)
decl_stmt|;
name|File
name|currentWD
init|=
name|dstDir
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|levelsUP
operator|&&
name|currentWD
operator|!=
literal|null
condition|;
name|i
operator|++
control|)
block|{
name|currentWD
operator|=
name|currentWD
operator|.
name|getParentFile
argument_list|()
expr_stmt|;
block|}
if|if
condition|(
name|currentWD
operator|==
literal|null
condition|)
block|{
return|return
literal|null
return|;
block|}
name|SVNFileType
name|kind
init|=
name|SVNFileType
operator|.
name|getType
argument_list|(
name|currentWD
argument_list|)
decl_stmt|;
if|if
condition|(
name|kind
operator|!=
name|SVNFileType
operator|.
name|DIRECTORY
condition|)
block|{
return|return
literal|null
return|;
block|}
name|SVNWCAccess
name|ancestorAccess
init|=
name|SVNWCAccess
operator|.
name|newInstance
argument_list|(
literal|null
argument_list|)
decl_stmt|;
name|SVNAdminArea
name|ancestorArea
init|=
literal|null
decl_stmt|;
try|try
block|{
name|ancestorArea
operator|=
name|ancestorAccess
operator|.
name|open
argument_list|(
name|currentWD
argument_list|,
literal|false
argument_list|,
literal|0
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|SVNException
name|svne
parameter_list|)
block|{
if|if
condition|(
name|svne
operator|.
name|getErrorMessage
argument_list|()
operator|.
name|getErrorCode
argument_list|()
operator|==
name|SVNErrorCode
operator|.
name|WC_NOT_DIRECTORY
condition|)
block|{
name|ancestorAccess
operator|.
name|close
argument_list|()
expr_stmt|;
return|return
literal|null
return|;
block|}
throw|throw
name|svne
throw|;
block|}
name|SVNEntry
name|ancestorEntry
init|=
name|ancestorArea
operator|.
name|getEntry
argument_list|(
name|ancestorArea
operator|.
name|getThisDirName
argument_list|()
argument_list|,
literal|false
argument_list|)
decl_stmt|;
if|if
condition|(
name|dstEntry
operator|.
name|getUUID
argument_list|()
operator|!=
literal|null
operator|&&
name|ancestorEntry
operator|.
name|getUUID
argument_list|()
operator|!=
literal|null
operator|&&
operator|!
name|dstEntry
operator|.
name|getUUID
argument_list|()
operator|.
name|equals
argument_list|(
name|ancestorEntry
operator|.
name|getUUID
argument_list|()
argument_list|)
condition|)
block|{
name|ancestorAccess
operator|.
name|close
argument_list|()
expr_stmt|;
return|return
literal|null
return|;
block|}
name|SVNURL
name|ancestorURL
init|=
name|dstEntry
operator|.
name|getRepositoryRootURL
argument_list|()
operator|.
name|appendPath
argument_list|(
name|ancestorPath
argument_list|,
literal|false
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|ancestorURL
operator|.
name|equals
argument_list|(
name|ancestorEntry
operator|.
name|getSVNURL
argument_list|()
argument_list|)
condition|)
block|{
name|ancestorAccess
operator|.
name|close
argument_list|()
expr_stmt|;
return|return
literal|null
return|;
block|}
name|String
name|extraComponents
init|=
name|SVNPathUtil
operator|.
name|getPathAsChild
argument_list|(
name|ancestorPath
argument_list|,
name|copyFromPath
argument_list|)
decl_stmt|;
name|currentWD
operator|=
operator|new
name|File
argument_list|(
name|currentWD
argument_list|,
name|extraComponents
argument_list|)
expr_stmt|;
name|File
name|currentWDParent
init|=
name|currentWD
operator|.
name|getParentFile
argument_list|()
decl_stmt|;
name|kind
operator|=
name|SVNFileType
operator|.
name|getType
argument_list|(
name|currentWD
argument_list|)
expr_stmt|;
if|if
condition|(
name|kind
operator|!=
name|SVNFileType
operator|.
name|FILE
condition|)
block|{
name|ancestorAccess
operator|.
name|close
argument_list|()
expr_stmt|;
return|return
literal|null
return|;
block|}
try|try
block|{
name|ancestorAccess
operator|.
name|close
argument_list|()
expr_stmt|;
name|ancestorArea
operator|=
name|ancestorAccess
operator|.
name|open
argument_list|(
name|currentWDParent
argument_list|,
literal|false
argument_list|,
literal|0
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|SVNException
name|svne
parameter_list|)
block|{
if|if
condition|(
name|svne
operator|.
name|getErrorMessage
argument_list|()
operator|.
name|getErrorCode
argument_list|()
operator|==
name|SVNErrorCode
operator|.
name|WC_NOT_DIRECTORY
condition|)
block|{
name|ancestorAccess
operator|.
name|close
argument_list|()
expr_stmt|;
return|return
literal|null
return|;
block|}
throw|throw
name|svne
throw|;
block|}
name|SVNEntry
name|fileEntry
init|=
name|ancestorArea
operator|.
name|getEntry
argument_list|(
name|currentWD
operator|.
name|getName
argument_list|()
argument_list|,
literal|false
argument_list|)
decl_stmt|;
if|if
condition|(
name|fileEntry
operator|==
literal|null
condition|)
block|{
name|ancestorAccess
operator|.
name|close
argument_list|()
expr_stmt|;
return|return
literal|null
return|;
block|}
if|if
condition|(
name|fileEntry
operator|.
name|getUUID
argument_list|()
operator|!=
literal|null
operator|&&
name|dstEntry
operator|.
name|getUUID
argument_list|()
operator|!=
literal|null
operator|&&
operator|!
name|fileEntry
operator|.
name|getUUID
argument_list|()
operator|.
name|equals
argument_list|(
name|dstEntry
operator|.
name|getUUID
argument_list|()
argument_list|)
condition|)
block|{
name|ancestorAccess
operator|.
name|close
argument_list|()
expr_stmt|;
return|return
literal|null
return|;
block|}
name|SVNURL
name|fileURL
init|=
name|fileEntry
operator|.
name|getRepositoryRootURL
argument_list|()
operator|.
name|appendPath
argument_list|(
name|copyFromPath
argument_list|,
literal|false
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|fileURL
operator|.
name|equals
argument_list|(
name|fileEntry
operator|.
name|getSVNURL
argument_list|()
argument_list|)
condition|)
block|{
name|ancestorAccess
operator|.
name|close
argument_list|()
expr_stmt|;
return|return
literal|null
return|;
block|}
if|if
condition|(
operator|!
name|SVNRevision
operator|.
name|isValidRevisionNumber
argument_list|(
name|fileEntry
operator|.
name|getCommittedRevision
argument_list|()
argument_list|)
operator|||
operator|!
name|SVNRevision
operator|.
name|isValidRevisionNumber
argument_list|(
name|fileEntry
operator|.
name|getRevision
argument_list|()
argument_list|)
condition|)
block|{
name|ancestorAccess
operator|.
name|close
argument_list|()
expr_stmt|;
return|return
literal|null
return|;
block|}
if|if
condition|(
operator|!
operator|(
name|fileEntry
operator|.
name|getCommittedRevision
argument_list|()
operator|<=
name|copyFromRevision
operator|&&
name|copyFromRevision
operator|<=
name|fileEntry
operator|.
name|getRevision
argument_list|()
operator|)
condition|)
block|{
name|ancestorAccess
operator|.
name|close
argument_list|()
expr_stmt|;
return|return
literal|null
return|;
block|}
return|return
name|fileEntry
return|;
block|}
specifier|private
name|void
name|changeFileProperty
parameter_list|(
name|String
name|name
parameter_list|,
name|SVNPropertyValue
name|value
parameter_list|,
name|SVNFileInfo
name|fileInfo
parameter_list|)
block|{
if|if
condition|(
operator|!
name|fileInfo
operator|.
name|isSkipped
condition|)
block|{
name|fileInfo
operator|.
name|propertyChanged
argument_list|(
name|name
argument_list|,
name|value
argument_list|)
expr_stmt|;
if|if
condition|(
name|myWCAccess
operator|.
name|getOptions
argument_list|()
operator|.
name|isUseCommitTimes
argument_list|()
operator|&&
name|SVNProperty
operator|.
name|COMMITTED_DATE
operator|.
name|equals
argument_list|(
name|name
argument_list|)
condition|)
block|{
name|fileInfo
operator|.
name|CommitTime
operator|=
name|value
operator|.
name|getString
argument_list|()
expr_stmt|;
if|if
condition|(
name|fileInfo
operator|.
name|CommitTime
operator|!=
literal|null
condition|)
block|{
name|fileInfo
operator|.
name|CommitTime
operator|=
name|fileInfo
operator|.
name|CommitTime
operator|.
name|trim
argument_list|()
expr_stmt|;
block|}
block|}
block|}
block|}
specifier|private
name|SVNFileInfo
name|openFile
parameter_list|(
name|String
name|path
parameter_list|,
name|SVNDirectoryInfo
name|parent
parameter_list|)
throws|throws
name|SVNException
block|{
name|checkIfPathIsUnderRoot
argument_list|(
name|path
argument_list|)
expr_stmt|;
name|SVNFileInfo
name|info
init|=
name|createFileInfo
argument_list|(
name|parent
argument_list|,
name|path
argument_list|,
literal|false
argument_list|)
decl_stmt|;
name|SVNAdminArea
name|adminArea
init|=
name|parent
operator|.
name|getAdminArea
argument_list|()
decl_stmt|;
name|SVNEntry
name|entry
init|=
name|adminArea
operator|.
name|getEntry
argument_list|(
name|info
operator|.
name|Name
argument_list|,
literal|true
argument_list|)
decl_stmt|;
if|if
condition|(
name|entry
operator|==
literal|null
condition|)
block|{
name|SVNErrorMessage
name|err
init|=
name|SVNErrorMessage
operator|.
name|create
argument_list|(
name|SVNErrorCode
operator|.
name|UNVERSIONED_RESOURCE
argument_list|,
literal|"File ''{0}'' in directory ''{1}'' is not a versioned resource"
argument_list|,
operator|new
name|Object
index|[]
block|{
name|info
operator|.
name|Name
block|,
name|adminArea
operator|.
name|getRoot
argument_list|()
block|}
argument_list|)
decl_stmt|;
name|SVNErrorManager
operator|.
name|error
argument_list|(
name|err
argument_list|,
name|SVNLogType
operator|.
name|WC
argument_list|)
expr_stmt|;
block|}
name|boolean
name|hasTextConflicts
init|=
name|adminArea
operator|.
name|hasTextConflict
argument_list|(
name|info
operator|.
name|Name
argument_list|)
decl_stmt|;
name|boolean
name|hasPropConflicts
init|=
name|adminArea
operator|.
name|hasPropConflict
argument_list|(
name|info
operator|.
name|Name
argument_list|)
decl_stmt|;
if|if
condition|(
name|hasTextConflicts
operator|||
name|hasPropConflicts
condition|)
block|{
name|info
operator|.
name|isSkipped
operator|=
literal|true
expr_stmt|;
name|Collection
name|skippedPaths
init|=
name|getSkippedPaths
argument_list|()
decl_stmt|;
name|File
name|file
init|=
operator|new
name|File
argument_list|(
name|myAdminInfo
operator|.
name|getAnchor
argument_list|()
operator|.
name|getRoot
argument_list|()
argument_list|,
name|path
argument_list|)
decl_stmt|;
name|skippedPaths
operator|.
name|add
argument_list|(
name|file
argument_list|)
expr_stmt|;
name|SVNEvent
name|event
init|=
name|SVNEventFactory
operator|.
name|createSVNEvent
argument_list|(
name|adminArea
operator|.
name|getFile
argument_list|(
name|info
operator|.
name|Name
argument_list|)
argument_list|,
name|SVNNodeKind
operator|.
name|FILE
argument_list|,
literal|null
argument_list|,
name|myTargetRevision
argument_list|,
name|hasTextConflicts
condition|?
name|SVNStatusType
operator|.
name|CONFLICTED
else|:
name|SVNStatusType
operator|.
name|UNKNOWN
argument_list|,
name|hasPropConflicts
condition|?
name|SVNStatusType
operator|.
name|CONFLICTED
else|:
name|SVNStatusType
operator|.
name|UNKNOWN
argument_list|,
name|SVNStatusType
operator|.
name|LOCK_INAPPLICABLE
argument_list|,
name|SVNEventAction
operator|.
name|SKIP
argument_list|,
name|SVNEventAction
operator|.
name|UPDATE_UPDATE
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|)
decl_stmt|;
name|event
operator|.
name|setPreviousRevision
argument_list|(
name|entry
operator|.
name|getRevision
argument_list|()
argument_list|)
expr_stmt|;
name|event
operator|.
name|setURL
argument_list|(
name|entry
operator|.
name|getSVNURL
argument_list|()
argument_list|)
expr_stmt|;
name|myWCAccess
operator|.
name|handleEvent
argument_list|(
name|event
argument_list|)
expr_stmt|;
block|}
return|return
name|info
return|;
block|}
specifier|private
name|void
name|closeFile
parameter_list|(
name|String
name|textChecksum
parameter_list|,
name|SVNFileInfo
name|fileInfo
parameter_list|,
name|SVNDirectoryInfo
name|dirInfo
parameter_list|)
throws|throws
name|SVNException
block|{
if|if
condition|(
name|fileInfo
operator|.
name|isSkipped
condition|)
block|{
name|maybeBumpDirInfo
argument_list|(
name|dirInfo
argument_list|)
expr_stmt|;
return|return;
block|}
if|if
condition|(
name|fileInfo
operator|.
name|addedWithHistory
operator|&&
operator|!
name|fileInfo
operator|.
name|receivedTextDelta
condition|)
block|{
if|if
condition|(
name|fileInfo
operator|.
name|baseFile
operator|!=
literal|null
operator|||
name|fileInfo
operator|.
name|newBaseFile
operator|!=
literal|null
operator|||
name|fileInfo
operator|.
name|copiedBaseText
operator|==
literal|null
condition|)
block|{
name|SVNErrorMessage
name|err
init|=
name|SVNErrorMessage
operator|.
name|create
argument_list|(
name|SVNErrorCode
operator|.
name|UNKNOWN
argument_list|,
literal|"assertion failure in "
operator|+
literal|"SVNUpdateEditor.closeFile(): fileInfo.baseFile = {0}, fileInfo.newBaseFile = {1}, "
operator|+
literal|"fileInfo.copiedBaseText = {2}"
argument_list|,
operator|new
name|Object
index|[]
block|{
name|fileInfo
operator|.
name|baseFile
block|,
name|fileInfo
operator|.
name|newBaseFile
block|,
name|fileInfo
operator|.
name|copiedBaseText
block|}
argument_list|)
decl_stmt|;
name|SVNErrorManager
operator|.
name|error
argument_list|(
name|err
argument_list|,
name|SVNLogType
operator|.
name|DEFAULT
argument_list|)
expr_stmt|;
block|}
name|SVNAdminArea
name|adminArea
init|=
name|fileInfo
operator|.
name|getAdminArea
argument_list|()
decl_stmt|;
name|SVNEntry
name|entry
init|=
name|adminArea
operator|.
name|getEntry
argument_list|(
name|fileInfo
operator|.
name|Name
argument_list|,
literal|false
argument_list|)
decl_stmt|;
name|boolean
name|replaced
init|=
name|entry
operator|!=
literal|null
operator|&&
name|entry
operator|.
name|isScheduledForReplacement
argument_list|()
decl_stmt|;
name|boolean
name|useRevertBase
init|=
name|replaced
operator|&&
name|entry
operator|.
name|getCopyFromURL
argument_list|()
operator|!=
literal|null
decl_stmt|;
if|if
condition|(
name|useRevertBase
condition|)
block|{
name|fileInfo
operator|.
name|baseFile
operator|=
name|adminArea
operator|.
name|getFile
argument_list|(
name|SVNAdminUtil
operator|.
name|getTextRevertPath
argument_list|(
name|fileInfo
operator|.
name|Name
argument_list|,
literal|false
argument_list|)
argument_list|)
expr_stmt|;
name|fileInfo
operator|.
name|newBaseFile
operator|=
name|adminArea
operator|.
name|getFile
argument_list|(
name|SVNAdminUtil
operator|.
name|getTextRevertPath
argument_list|(
name|fileInfo
operator|.
name|Name
argument_list|,
literal|true
argument_list|)
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|fileInfo
operator|.
name|baseFile
operator|=
name|adminArea
operator|.
name|getBaseFile
argument_list|(
name|fileInfo
operator|.
name|Name
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|fileInfo
operator|.
name|newBaseFile
operator|=
name|adminArea
operator|.
name|getBaseFile
argument_list|(
name|fileInfo
operator|.
name|Name
argument_list|,
literal|true
argument_list|)
expr_stmt|;
block|}
name|SVNFileUtil
operator|.
name|copyFile
argument_list|(
name|fileInfo
operator|.
name|copiedBaseText
argument_list|,
name|fileInfo
operator|.
name|newBaseFile
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|fileInfo
operator|.
name|Checksum
operator|=
name|SVNFileUtil
operator|.
name|computeChecksum
argument_list|(
name|fileInfo
operator|.
name|newBaseFile
argument_list|)
expr_stmt|;
block|}
comment|// check checksum.
name|String
name|checksum
init|=
literal|null
decl_stmt|;
name|boolean
name|isTextUpdated
init|=
name|fileInfo
operator|.
name|newBaseFile
operator|!=
literal|null
decl_stmt|;
if|if
condition|(
name|textChecksum
operator|!=
literal|null
operator|&&
name|isTextUpdated
condition|)
block|{
if|if
condition|(
name|fileInfo
operator|.
name|Checksum
operator|!=
literal|null
operator|&&
operator|!
name|textChecksum
operator|.
name|equals
argument_list|(
name|fileInfo
operator|.
name|Checksum
argument_list|)
condition|)
block|{
name|SVNErrorMessage
name|err
init|=
name|SVNErrorMessage
operator|.
name|create
argument_list|(
name|SVNErrorCode
operator|.
name|CHECKSUM_MISMATCH
argument_list|,
literal|"Checksum mismatch for ''{0}''; expected: ''{1}'', actual: ''{2}''"
argument_list|,
operator|new
name|Object
index|[]
block|{
name|fileInfo
operator|.
name|getPath
argument_list|()
block|,
name|textChecksum
block|,
name|fileInfo
operator|.
name|Checksum
block|}
argument_list|)
decl_stmt|;
name|SVNErrorManager
operator|.
name|error
argument_list|(
name|err
argument_list|,
name|SVNLogType
operator|.
name|WC
argument_list|)
expr_stmt|;
block|}
name|checksum
operator|=
name|textChecksum
expr_stmt|;
block|}
name|SVNAdminArea
name|adminArea
init|=
name|fileInfo
operator|.
name|getAdminArea
argument_list|()
decl_stmt|;
name|SVNLog
name|log
init|=
name|dirInfo
operator|.
name|getLog
argument_list|()
decl_stmt|;
name|String
name|name
init|=
name|fileInfo
operator|.
name|Name
decl_stmt|;
name|SVNEntry
name|fileEntry
init|=
name|adminArea
operator|.
name|getEntry
argument_list|(
name|name
argument_list|,
literal|false
argument_list|)
decl_stmt|;
if|if
condition|(
name|fileEntry
operator|==
literal|null
operator|&&
operator|!
name|fileInfo
operator|.
name|IsAdded
condition|)
block|{
name|SVNErrorMessage
name|err
init|=
name|SVNErrorMessage
operator|.
name|create
argument_list|(
name|SVNErrorCode
operator|.
name|UNVERSIONED_RESOURCE
argument_list|,
literal|"''{0}'' is not under version control"
argument_list|,
name|fileInfo
operator|.
name|getPath
argument_list|()
argument_list|)
decl_stmt|;
name|SVNErrorManager
operator|.
name|error
argument_list|(
name|err
argument_list|,
name|SVNLogType
operator|.
name|WC
argument_list|)
expr_stmt|;
block|}
name|long
name|previousRevision
init|=
name|fileEntry
operator|!=
literal|null
condition|?
name|fileEntry
operator|.
name|getRevision
argument_list|()
else|:
operator|-
literal|1
decl_stmt|;
name|SVNURL
name|previousURL
init|=
name|fileEntry
operator|!=
literal|null
condition|?
name|fileEntry
operator|.
name|getSVNURL
argument_list|()
else|:
literal|null
decl_stmt|;
comment|// merge props.
name|SVNProperties
name|modifiedWCProps
init|=
name|fileInfo
operator|.
name|getChangedWCProperties
argument_list|()
decl_stmt|;
name|SVNProperties
name|modifiedEntryProps
init|=
name|fileInfo
operator|.
name|getChangedEntryProperties
argument_list|()
decl_stmt|;
name|SVNProperties
name|modifiedProps
init|=
name|fileInfo
operator|.
name|getChangedProperties
argument_list|()
decl_stmt|;
name|String
name|commitTime
init|=
name|fileInfo
operator|.
name|CommitTime
decl_stmt|;
name|SVNProperties
name|command
init|=
operator|new
name|SVNProperties
argument_list|()
decl_stmt|;
name|SVNStatusType
name|textStatus
init|=
name|SVNStatusType
operator|.
name|UNCHANGED
decl_stmt|;
name|SVNStatusType
name|lockStatus
init|=
name|SVNStatusType
operator|.
name|LOCK_UNCHANGED
decl_stmt|;
if|if
condition|(
name|myAdminInfo
operator|.
name|isIncomplete
argument_list|(
name|fileInfo
operator|.
name|getPath
argument_list|()
argument_list|)
operator|&&
name|fileEntry
operator|!=
literal|null
condition|)
block|{
comment|// delete all props.
name|SVNVersionedProperties
name|oldBaseProps
init|=
name|adminArea
operator|.
name|getBaseProperties
argument_list|(
name|fileEntry
operator|.
name|getName
argument_list|()
argument_list|)
decl_stmt|;
name|SVNProperties
name|baseMap
init|=
name|oldBaseProps
operator|.
name|asMap
argument_list|()
decl_stmt|;
if|if
condition|(
name|modifiedProps
operator|==
literal|null
condition|)
block|{
name|modifiedProps
operator|=
operator|new
name|SVNProperties
argument_list|()
expr_stmt|;
block|}
for|for
control|(
name|Iterator
name|names
init|=
name|baseMap
operator|.
name|nameSet
argument_list|()
operator|.
name|iterator
argument_list|()
init|;
name|names
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|String
name|propName
init|=
operator|(
name|String
operator|)
name|names
operator|.
name|next
argument_list|()
decl_stmt|;
if|if
condition|(
operator|!
name|modifiedProps
operator|.
name|containsName
argument_list|(
name|propName
argument_list|)
condition|)
block|{
name|modifiedProps
operator|.
name|put
argument_list|(
name|propName
argument_list|,
name|SVNPropertyValue
operator|.
name|create
argument_list|(
literal|null
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
block|}
name|boolean
name|magicPropsChanged
init|=
literal|false
decl_stmt|;
if|if
condition|(
name|modifiedProps
operator|!=
literal|null
operator|&&
operator|!
name|modifiedProps
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|magicPropsChanged
operator|=
name|modifiedProps
operator|.
name|containsName
argument_list|(
name|SVNProperty
operator|.
name|EXECUTABLE
argument_list|)
operator|||
name|modifiedProps
operator|.
name|containsName
argument_list|(
name|SVNProperty
operator|.
name|NEEDS_LOCK
argument_list|)
operator|||
name|modifiedProps
operator|.
name|containsName
argument_list|(
name|SVNProperty
operator|.
name|KEYWORDS
argument_list|)
operator|||
name|modifiedProps
operator|.
name|containsName
argument_list|(
name|SVNProperty
operator|.
name|EOL_STYLE
argument_list|)
operator|||
name|modifiedProps
operator|.
name|containsName
argument_list|(
name|SVNProperty
operator|.
name|CHARSET
argument_list|)
operator|||
name|modifiedProps
operator|.
name|containsName
argument_list|(
name|SVNProperty
operator|.
name|SPECIAL
argument_list|)
expr_stmt|;
block|}
name|SVNStatusType
name|propStatus
init|=
name|adminArea
operator|.
name|mergeProperties
argument_list|(
name|name
argument_list|,
literal|null
argument_list|,
name|fileInfo
operator|.
name|copiedBaseProperties
argument_list|,
name|fileInfo
operator|.
name|copiedWorkingProperties
argument_list|,
name|modifiedProps
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|,
literal|true
argument_list|,
literal|false
argument_list|,
name|log
argument_list|)
decl_stmt|;
if|if
condition|(
name|modifiedEntryProps
operator|!=
literal|null
condition|)
block|{
name|lockStatus
operator|=
name|log
operator|.
name|logChangedEntryProperties
argument_list|(
name|name
argument_list|,
name|modifiedEntryProps
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|modifiedWCProps
operator|!=
literal|null
condition|)
block|{
name|log
operator|.
name|logChangedWCProperties
argument_list|(
name|name
argument_list|,
name|modifiedWCProps
argument_list|)
expr_stmt|;
block|}
name|boolean
name|isLocallyModified
init|=
literal|false
decl_stmt|;
if|if
condition|(
name|fileInfo
operator|.
name|copiedWorkingText
operator|!=
literal|null
condition|)
block|{
name|isLocallyModified
operator|=
literal|true
expr_stmt|;
block|}
if|else if
condition|(
operator|!
name|fileInfo
operator|.
name|isExisted
condition|)
block|{
name|isLocallyModified
operator|=
name|adminArea
operator|.
name|hasTextModifications
argument_list|(
name|name
argument_list|,
literal|false
argument_list|,
literal|false
argument_list|,
literal|false
argument_list|)
expr_stmt|;
block|}
if|else if
condition|(
name|isTextUpdated
condition|)
block|{
name|isLocallyModified
operator|=
name|adminArea
operator|.
name|hasVersionedFileTextChanges
argument_list|(
name|adminArea
operator|.
name|getFile
argument_list|(
name|name
argument_list|)
argument_list|,
name|fileInfo
operator|.
name|newBaseFile
argument_list|,
literal|false
argument_list|)
expr_stmt|;
block|}
name|boolean
name|isReplaced
init|=
name|fileEntry
operator|!=
literal|null
operator|&&
name|fileEntry
operator|.
name|isScheduledForReplacement
argument_list|()
decl_stmt|;
name|SVNProperties
name|logAttributes
init|=
operator|new
name|SVNProperties
argument_list|()
decl_stmt|;
if|if
condition|(
name|fileInfo
operator|.
name|isAddExisted
condition|)
block|{
name|logAttributes
operator|.
name|put
argument_list|(
name|SVNLog
operator|.
name|FORCE_ATTR
argument_list|,
literal|"true"
argument_list|)
expr_stmt|;
name|logAttributes
operator|.
name|put
argument_list|(
name|SVNProperty
operator|.
name|shortPropertyName
argument_list|(
name|SVNProperty
operator|.
name|SCHEDULE
argument_list|)
argument_list|,
literal|""
argument_list|)
expr_stmt|;
block|}
name|log
operator|.
name|logTweakEntry
argument_list|(
name|name
argument_list|,
name|fileInfo
operator|.
name|URL
argument_list|,
name|myTargetRevision
argument_list|)
expr_stmt|;
name|String
name|absDirPath
init|=
name|adminArea
operator|.
name|getRoot
argument_list|()
operator|.
name|getAbsolutePath
argument_list|()
operator|.
name|replace
argument_list|(
name|File
operator|.
name|separatorChar
argument_list|,
literal|'/'
argument_list|)
decl_stmt|;
name|String
name|basePath
init|=
literal|null
decl_stmt|;
if|if
condition|(
name|fileInfo
operator|.
name|baseFile
operator|!=
literal|null
condition|)
block|{
name|String
name|absBasePath
init|=
name|fileInfo
operator|.
name|baseFile
operator|.
name|getAbsolutePath
argument_list|()
operator|.
name|replace
argument_list|(
name|File
operator|.
name|separatorChar
argument_list|,
literal|'/'
argument_list|)
decl_stmt|;
name|basePath
operator|=
name|absBasePath
operator|.
name|substring
argument_list|(
name|absDirPath
operator|.
name|length
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|basePath
operator|.
name|startsWith
argument_list|(
literal|"/"
argument_list|)
condition|)
block|{
name|basePath
operator|=
name|basePath
operator|.
name|substring
argument_list|(
literal|1
argument_list|)
expr_stmt|;
block|}
block|}
name|String
name|tmpBasePath
init|=
literal|null
decl_stmt|;
if|if
condition|(
name|fileInfo
operator|.
name|newBaseFile
operator|!=
literal|null
condition|)
block|{
name|String
name|absTmpBasePath
init|=
name|fileInfo
operator|.
name|newBaseFile
operator|.
name|getAbsolutePath
argument_list|()
operator|.
name|replace
argument_list|(
name|File
operator|.
name|separatorChar
argument_list|,
literal|'/'
argument_list|)
decl_stmt|;
name|tmpBasePath
operator|=
name|absTmpBasePath
operator|.
name|substring
argument_list|(
name|absDirPath
operator|.
name|length
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|tmpBasePath
operator|.
name|startsWith
argument_list|(
literal|"/"
argument_list|)
condition|)
block|{
name|tmpBasePath
operator|=
name|tmpBasePath
operator|.
name|substring
argument_list|(
literal|1
argument_list|)
expr_stmt|;
block|}
block|}
name|SVNStatusType
name|mergeOutcome
init|=
name|SVNStatusType
operator|.
name|UNCHANGED
decl_stmt|;
name|File
name|workingFile
init|=
name|adminArea
operator|.
name|getFile
argument_list|(
name|name
argument_list|)
decl_stmt|;
name|boolean
name|deletedCopiedBaseText
init|=
literal|false
decl_stmt|;
if|if
condition|(
name|tmpBasePath
operator|!=
literal|null
condition|)
block|{
name|textStatus
operator|=
name|SVNStatusType
operator|.
name|CHANGED
expr_stmt|;
comment|// there is a text to replace the working copy with.
if|if
condition|(
operator|!
name|isLocallyModified
operator|&&
operator|!
name|isReplaced
condition|)
block|{
if|if
condition|(
name|fileEntry
operator|==
literal|null
operator|||
operator|!
name|fileEntry
operator|.
name|isScheduledForDeletion
argument_list|()
condition|)
block|{
name|command
operator|.
name|put
argument_list|(
name|SVNLog
operator|.
name|NAME_ATTR
argument_list|,
name|tmpBasePath
argument_list|)
expr_stmt|;
name|command
operator|.
name|put
argument_list|(
name|SVNLog
operator|.
name|DEST_ATTR
argument_list|,
name|name
argument_list|)
expr_stmt|;
name|log
operator|.
name|addCommand
argument_list|(
name|SVNLog
operator|.
name|COPY_AND_TRANSLATE
argument_list|,
name|command
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|command
operator|.
name|clear
argument_list|()
expr_stmt|;
block|}
block|}
else|else
block|{
name|SVNFileType
name|kind
init|=
name|SVNFileType
operator|.
name|getType
argument_list|(
name|workingFile
argument_list|)
decl_stmt|;
if|if
condition|(
name|kind
operator|==
name|SVNFileType
operator|.
name|NONE
operator|&&
operator|!
name|fileInfo
operator|.
name|addedWithHistory
condition|)
block|{
name|command
operator|.
name|put
argument_list|(
name|SVNLog
operator|.
name|NAME_ATTR
argument_list|,
name|tmpBasePath
argument_list|)
expr_stmt|;
name|command
operator|.
name|put
argument_list|(
name|SVNLog
operator|.
name|DEST_ATTR
argument_list|,
name|name
argument_list|)
expr_stmt|;
name|log
operator|.
name|addCommand
argument_list|(
name|SVNLog
operator|.
name|COPY_AND_TRANSLATE
argument_list|,
name|command
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|command
operator|.
name|clear
argument_list|()
expr_stmt|;
block|}
if|else if
condition|(
operator|!
name|fileInfo
operator|.
name|isExisted
condition|)
block|{
name|File
name|mergeLeftFile
init|=
name|fileInfo
operator|.
name|baseFile
decl_stmt|;
name|String
name|pathExt
init|=
literal|null
decl_stmt|;
if|if
condition|(
name|myExtensionPatterns
operator|!=
literal|null
operator|&&
name|myExtensionPatterns
operator|.
name|length
operator|>
literal|0
condition|)
block|{
name|int
name|dotInd
init|=
name|name
operator|.
name|lastIndexOf
argument_list|(
literal|'.'
argument_list|)
decl_stmt|;
if|if
condition|(
name|dotInd
operator|!=
operator|-
literal|1
operator|&&
name|dotInd
operator|!=
literal|0
operator|&&
name|dotInd
operator|!=
name|name
operator|.
name|length
argument_list|()
operator|-
literal|1
condition|)
block|{
name|pathExt
operator|=
name|name
operator|.
name|substring
argument_list|(
name|dotInd
operator|+
literal|1
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|pathExt
operator|!=
literal|null
operator|&&
operator|!
literal|""
operator|.
name|equals
argument_list|(
name|pathExt
argument_list|)
condition|)
block|{
name|boolean
name|matches
init|=
literal|false
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|myExtensionPatterns
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
name|String
name|extPattern
init|=
name|myExtensionPatterns
index|[
name|i
index|]
decl_stmt|;
name|matches
operator|=
name|DefaultSVNOptions
operator|.
name|matches
argument_list|(
name|extPattern
argument_list|,
name|pathExt
argument_list|)
expr_stmt|;
if|if
condition|(
name|matches
condition|)
block|{
break|break;
block|}
block|}
if|if
condition|(
operator|!
name|matches
condition|)
block|{
name|pathExt
operator|=
literal|null
expr_stmt|;
block|}
block|}
block|}
name|boolean
name|deleteLeftMergeFile
init|=
literal|false
decl_stmt|;
name|boolean
name|deleteCopiedBaseText
init|=
literal|false
decl_stmt|;
if|if
condition|(
name|fileInfo
operator|.
name|isAddExisted
operator|&&
operator|!
name|isReplaced
condition|)
block|{
name|deleteLeftMergeFile
operator|=
literal|true
expr_stmt|;
name|mergeLeftFile
operator|=
name|SVNAdminUtil
operator|.
name|createTmpFile
argument_list|(
name|adminArea
argument_list|)
expr_stmt|;
block|}
if|else if
condition|(
name|fileInfo
operator|.
name|copiedBaseText
operator|!=
literal|null
condition|)
block|{
name|deleteLeftMergeFile
operator|=
name|deleteCopiedBaseText
operator|=
literal|true
expr_stmt|;
name|mergeLeftFile
operator|=
name|fileInfo
operator|.
name|copiedBaseText
expr_stmt|;
block|}
name|String
name|absMergeLeftFilePath
init|=
name|mergeLeftFile
operator|.
name|getAbsolutePath
argument_list|()
operator|.
name|replace
argument_list|(
name|File
operator|.
name|separatorChar
argument_list|,
literal|'/'
argument_list|)
decl_stmt|;
name|String
name|mergeLeftFilePath
init|=
name|absMergeLeftFilePath
operator|.
name|substring
argument_list|(
name|absDirPath
operator|.
name|length
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|mergeLeftFilePath
operator|.
name|startsWith
argument_list|(
literal|"/"
argument_list|)
condition|)
block|{
name|mergeLeftFilePath
operator|=
name|mergeLeftFilePath
operator|.
name|substring
argument_list|(
literal|1
argument_list|)
expr_stmt|;
block|}
name|String
name|leftLabel
init|=
literal|null
decl_stmt|;
if|if
condition|(
name|fileInfo
operator|.
name|addedWithHistory
condition|)
block|{
name|leftLabel
operator|=
literal|".copied"
operator|+
operator|(
name|pathExt
operator|!=
literal|null
condition|?
literal|"."
operator|+
name|pathExt
else|:
literal|""
operator|)
expr_stmt|;
block|}
else|else
block|{
name|leftLabel
operator|=
literal|".r"
operator|+
name|fileEntry
operator|.
name|getRevision
argument_list|()
operator|+
operator|(
name|pathExt
operator|!=
literal|null
condition|?
literal|"."
operator|+
name|pathExt
else|:
literal|""
operator|)
expr_stmt|;
block|}
name|String
name|rightLabel
init|=
literal|".r"
operator|+
name|myTargetRevision
operator|+
operator|(
name|pathExt
operator|!=
literal|null
condition|?
literal|"."
operator|+
name|pathExt
else|:
literal|""
operator|)
decl_stmt|;
name|String
name|mineLabel
init|=
literal|".mine"
operator|+
operator|(
name|pathExt
operator|!=
literal|null
condition|?
literal|"."
operator|+
name|pathExt
else|:
literal|""
operator|)
decl_stmt|;
comment|// do test merge.
name|mergeOutcome
operator|=
name|adminArea
operator|.
name|mergeText
argument_list|(
name|name
argument_list|,
name|mergeLeftFile
argument_list|,
name|adminArea
operator|.
name|getFile
argument_list|(
name|tmpBasePath
argument_list|)
argument_list|,
name|fileInfo
operator|.
name|copiedWorkingText
argument_list|,
name|mineLabel
argument_list|,
name|leftLabel
argument_list|,
name|rightLabel
argument_list|,
name|modifiedProps
argument_list|,
literal|false
argument_list|,
literal|null
argument_list|,
name|log
argument_list|)
expr_stmt|;
if|if
condition|(
name|mergeOutcome
operator|==
name|SVNStatusType
operator|.
name|UNCHANGED
condition|)
block|{
name|textStatus
operator|=
name|SVNStatusType
operator|.
name|MERGED
expr_stmt|;
block|}
if|if
condition|(
name|deleteLeftMergeFile
condition|)
block|{
name|command
operator|.
name|put
argument_list|(
name|SVNLog
operator|.
name|NAME_ATTR
argument_list|,
name|mergeLeftFilePath
argument_list|)
expr_stmt|;
name|log
operator|.
name|addCommand
argument_list|(
name|SVNLog
operator|.
name|DELETE
argument_list|,
name|command
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|command
operator|.
name|clear
argument_list|()
expr_stmt|;
if|if
condition|(
name|deleteCopiedBaseText
condition|)
block|{
name|deletedCopiedBaseText
operator|=
literal|true
expr_stmt|;
block|}
block|}
if|if
condition|(
name|fileInfo
operator|.
name|copiedWorkingText
operator|!=
literal|null
condition|)
block|{
name|String
name|absCopiedWorkingTextPath
init|=
name|fileInfo
operator|.
name|copiedWorkingText
operator|.
name|getAbsolutePath
argument_list|()
operator|.
name|replace
argument_list|(
name|File
operator|.
name|separatorChar
argument_list|,
literal|'/'
argument_list|)
decl_stmt|;
name|String
name|copiedWorkingTextPath
init|=
name|absCopiedWorkingTextPath
operator|.
name|substring
argument_list|(
name|absDirPath
operator|.
name|length
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|copiedWorkingTextPath
operator|.
name|startsWith
argument_list|(
literal|"/"
argument_list|)
condition|)
block|{
name|copiedWorkingTextPath
operator|=
name|copiedWorkingTextPath
operator|.
name|substring
argument_list|(
literal|1
argument_list|)
expr_stmt|;
block|}
name|command
operator|.
name|put
argument_list|(
name|SVNLog
operator|.
name|NAME_ATTR
argument_list|,
name|copiedWorkingTextPath
argument_list|)
expr_stmt|;
name|log
operator|.
name|addCommand
argument_list|(
name|SVNLog
operator|.
name|DELETE
argument_list|,
name|command
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|command
operator|.
name|clear
argument_list|()
expr_stmt|;
block|}
block|}
block|}
block|}
else|else
block|{
if|if
condition|(
name|magicPropsChanged
operator|&&
operator|(
name|workingFile
operator|.
name|exists
argument_list|()
operator|||
name|SVNFileType
operator|.
name|getType
argument_list|(
name|workingFile
argument_list|)
operator|==
name|SVNFileType
operator|.
name|SYMLINK
operator|)
condition|)
block|{
comment|// only props were changed, but we have to retranslate file.
comment|// only if wc file exists (may be locally deleted), otherwise no
comment|// need to retranslate...
name|String
name|tmpPath
init|=
name|SVNAdminUtil
operator|.
name|getTextBasePath
argument_list|(
name|name
argument_list|,
literal|true
argument_list|)
decl_stmt|;
name|command
operator|.
name|put
argument_list|(
name|SVNLog
operator|.
name|NAME_ATTR
argument_list|,
name|name
argument_list|)
expr_stmt|;
name|command
operator|.
name|put
argument_list|(
name|SVNLog
operator|.
name|DEST_ATTR
argument_list|,
name|tmpPath
argument_list|)
expr_stmt|;
name|log
operator|.
name|addCommand
argument_list|(
name|SVNLog
operator|.
name|COPY_AND_DETRANSLATE
argument_list|,
name|command
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|command
operator|.
name|clear
argument_list|()
expr_stmt|;
name|command
operator|.
name|put
argument_list|(
name|SVNLog
operator|.
name|NAME_ATTR
argument_list|,
name|tmpPath
argument_list|)
expr_stmt|;
name|command
operator|.
name|put
argument_list|(
name|SVNLog
operator|.
name|DEST_ATTR
argument_list|,
name|name
argument_list|)
expr_stmt|;
name|log
operator|.
name|addCommand
argument_list|(
name|SVNLog
operator|.
name|COPY_AND_TRANSLATE
argument_list|,
name|command
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|command
operator|.
name|clear
argument_list|()
expr_stmt|;
block|}
if|if
condition|(
name|lockStatus
operator|==
name|SVNStatusType
operator|.
name|LOCK_UNLOCKED
condition|)
block|{
name|command
operator|.
name|put
argument_list|(
name|SVNLog
operator|.
name|NAME_ATTR
argument_list|,
name|name
argument_list|)
expr_stmt|;
name|log
operator|.
name|addCommand
argument_list|(
name|SVNLog
operator|.
name|MAYBE_READONLY
argument_list|,
name|command
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|command
operator|.
name|clear
argument_list|()
expr_stmt|;
block|}
block|}
if|if
condition|(
name|tmpBasePath
operator|!=
literal|null
condition|)
block|{
name|command
operator|.
name|put
argument_list|(
name|SVNLog
operator|.
name|NAME_ATTR
argument_list|,
name|tmpBasePath
argument_list|)
expr_stmt|;
name|command
operator|.
name|put
argument_list|(
name|SVNLog
operator|.
name|DEST_ATTR
argument_list|,
name|basePath
argument_list|)
expr_stmt|;
name|log
operator|.
name|addCommand
argument_list|(
name|SVNLog
operator|.
name|MOVE
argument_list|,
name|command
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|command
operator|.
name|clear
argument_list|()
expr_stmt|;
name|command
operator|.
name|put
argument_list|(
name|SVNLog
operator|.
name|NAME_ATTR
argument_list|,
name|basePath
argument_list|)
expr_stmt|;
name|log
operator|.
name|addCommand
argument_list|(
name|SVNLog
operator|.
name|READONLY
argument_list|,
name|command
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|command
operator|.
name|clear
argument_list|()
expr_stmt|;
if|if
condition|(
operator|!
name|isReplaced
condition|)
block|{
name|logAttributes
operator|.
name|put
argument_list|(
name|SVNProperty
operator|.
name|shortPropertyName
argument_list|(
name|SVNProperty
operator|.
name|CHECKSUM
argument_list|)
argument_list|,
name|checksum
argument_list|)
expr_stmt|;
block|}
block|}
if|if
condition|(
name|logAttributes
operator|.
name|size
argument_list|()
operator|>
literal|0
condition|)
block|{
name|logAttributes
operator|.
name|put
argument_list|(
name|SVNLog
operator|.
name|NAME_ATTR
argument_list|,
name|name
argument_list|)
expr_stmt|;
name|log
operator|.
name|addCommand
argument_list|(
name|SVNLog
operator|.
name|MODIFY_ENTRY
argument_list|,
name|logAttributes
argument_list|,
literal|false
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
operator|!
name|isLocallyModified
operator|&&
operator|(
name|fileInfo
operator|.
name|IsAdded
operator|||
name|fileEntry
operator|.
name|getSchedule
argument_list|()
operator|==
literal|null
operator|)
condition|)
block|{
if|if
condition|(
name|commitTime
operator|!=
literal|null
operator|&&
operator|!
name|fileInfo
operator|.
name|isExisted
condition|)
block|{
name|command
operator|.
name|put
argument_list|(
name|SVNLog
operator|.
name|NAME_ATTR
argument_list|,
name|name
argument_list|)
expr_stmt|;
name|command
operator|.
name|put
argument_list|(
name|SVNLog
operator|.
name|TIMESTAMP_ATTR
argument_list|,
name|commitTime
argument_list|)
expr_stmt|;
name|log
operator|.
name|addCommand
argument_list|(
name|SVNLog
operator|.
name|SET_TIMESTAMP
argument_list|,
name|command
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|command
operator|.
name|clear
argument_list|()
expr_stmt|;
block|}
if|if
condition|(
name|tmpBasePath
operator|!=
literal|null
operator|||
name|magicPropsChanged
condition|)
block|{
name|command
operator|.
name|put
argument_list|(
name|SVNLog
operator|.
name|NAME_ATTR
argument_list|,
name|name
argument_list|)
expr_stmt|;
name|command
operator|.
name|put
argument_list|(
name|SVNProperty
operator|.
name|shortPropertyName
argument_list|(
name|SVNProperty
operator|.
name|TEXT_TIME
argument_list|)
argument_list|,
name|SVNLog
operator|.
name|WC_TIMESTAMP
argument_list|)
expr_stmt|;
name|log
operator|.
name|addCommand
argument_list|(
name|SVNLog
operator|.
name|MODIFY_ENTRY
argument_list|,
name|command
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|command
operator|.
name|clear
argument_list|()
expr_stmt|;
block|}
name|command
operator|.
name|put
argument_list|(
name|SVNLog
operator|.
name|NAME_ATTR
argument_list|,
name|name
argument_list|)
expr_stmt|;
name|command
operator|.
name|put
argument_list|(
name|SVNProperty
operator|.
name|shortPropertyName
argument_list|(
name|SVNProperty
operator|.
name|WORKING_SIZE
argument_list|)
argument_list|,
name|SVNLog
operator|.
name|WC_WORKING_SIZE
argument_list|)
expr_stmt|;
name|log
operator|.
name|addCommand
argument_list|(
name|SVNLog
operator|.
name|MODIFY_ENTRY
argument_list|,
name|command
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|command
operator|.
name|clear
argument_list|()
expr_stmt|;
block|}
if|if
condition|(
name|fileInfo
operator|.
name|copiedBaseText
operator|!=
literal|null
operator|&&
operator|!
name|deletedCopiedBaseText
condition|)
block|{
name|String
name|absCopiedBaseTextPath
init|=
name|fileInfo
operator|.
name|copiedBaseText
operator|.
name|getAbsolutePath
argument_list|()
operator|.
name|replace
argument_list|(
name|File
operator|.
name|separatorChar
argument_list|,
literal|'/'
argument_list|)
decl_stmt|;
name|String
name|copiedBaseTextPath
init|=
name|absCopiedBaseTextPath
operator|.
name|substring
argument_list|(
name|absDirPath
operator|.
name|length
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|copiedBaseTextPath
operator|.
name|startsWith
argument_list|(
literal|"/"
argument_list|)
condition|)
block|{
name|copiedBaseTextPath
operator|=
name|copiedBaseTextPath
operator|.
name|substring
argument_list|(
literal|1
argument_list|)
expr_stmt|;
block|}
name|command
operator|.
name|put
argument_list|(
name|SVNLog
operator|.
name|NAME_ATTR
argument_list|,
name|copiedBaseTextPath
argument_list|)
expr_stmt|;
name|log
operator|.
name|addCommand
argument_list|(
name|SVNLog
operator|.
name|DELETE
argument_list|,
name|command
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|command
operator|.
name|clear
argument_list|()
expr_stmt|;
block|}
comment|// bump.
name|maybeBumpDirInfo
argument_list|(
name|dirInfo
argument_list|)
expr_stmt|;
if|if
condition|(
name|mergeOutcome
operator|==
name|SVNStatusType
operator|.
name|CONFLICTED_UNRESOLVED
condition|)
block|{
name|textStatus
operator|=
name|SVNStatusType
operator|.
name|CONFLICTED_UNRESOLVED
expr_stmt|;
block|}
if|else if
condition|(
name|mergeOutcome
operator|==
name|SVNStatusType
operator|.
name|CONFLICTED
condition|)
block|{
name|textStatus
operator|=
name|SVNStatusType
operator|.
name|CONFLICTED
expr_stmt|;
block|}
if|else if
condition|(
name|fileInfo
operator|.
name|newBaseFile
operator|!=
literal|null
condition|)
block|{
if|if
condition|(
name|isLocallyModified
condition|)
block|{
name|textStatus
operator|=
name|SVNStatusType
operator|.
name|MERGED
expr_stmt|;
block|}
else|else
block|{
name|textStatus
operator|=
name|SVNStatusType
operator|.
name|CHANGED
expr_stmt|;
block|}
block|}
comment|// notify.
if|if
condition|(
operator|(
name|textStatus
operator|!=
name|SVNStatusType
operator|.
name|UNCHANGED
operator|||
name|propStatus
operator|!=
name|SVNStatusType
operator|.
name|UNCHANGED
operator|||
name|lockStatus
operator|!=
name|SVNStatusType
operator|.
name|LOCK_UNCHANGED
operator|)
condition|)
block|{
name|SVNEventAction
name|action
init|=
name|SVNEventAction
operator|.
name|UPDATE_UPDATE
decl_stmt|;
if|if
condition|(
name|fileInfo
operator|.
name|isExisted
operator|||
name|fileInfo
operator|.
name|isAddExisted
condition|)
block|{
if|if
condition|(
name|textStatus
operator|!=
name|SVNStatusType
operator|.
name|CONFLICTED_UNRESOLVED
operator|&&
name|textStatus
operator|!=
name|SVNStatusType
operator|.
name|CONFLICTED
condition|)
block|{
name|action
operator|=
name|SVNEventAction
operator|.
name|UPDATE_EXISTS
expr_stmt|;
block|}
block|}
if|else if
condition|(
name|fileInfo
operator|.
name|IsAdded
condition|)
block|{
name|action
operator|=
name|SVNEventAction
operator|.
name|UPDATE_ADD
expr_stmt|;
block|}
name|SVNEvent
name|event
init|=
name|SVNEventFactory
operator|.
name|createSVNEvent
argument_list|(
name|adminArea
operator|.
name|getFile
argument_list|(
name|fileInfo
operator|.
name|Name
argument_list|)
argument_list|,
name|SVNNodeKind
operator|.
name|FILE
argument_list|,
literal|null
argument_list|,
name|myTargetRevision
argument_list|,
name|textStatus
argument_list|,
name|propStatus
argument_list|,
name|lockStatus
argument_list|,
name|action
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|)
decl_stmt|;
name|event
operator|.
name|setPreviousRevision
argument_list|(
name|previousRevision
argument_list|)
expr_stmt|;
name|event
operator|.
name|setPreviousURL
argument_list|(
name|previousURL
argument_list|)
expr_stmt|;
name|event
operator|.
name|setURL
argument_list|(
name|fileInfo
operator|.
name|URL
operator|!=
literal|null
condition|?
name|SVNURL
operator|.
name|parseURIEncoded
argument_list|(
name|fileInfo
operator|.
name|URL
argument_list|)
else|:
literal|null
argument_list|)
expr_stmt|;
name|myWCAccess
operator|.
name|handleEvent
argument_list|(
name|event
argument_list|)
expr_stmt|;
block|}
block|}
specifier|private
name|SVNFileInfo
name|createFileInfo
parameter_list|(
name|SVNDirectoryInfo
name|parent
parameter_list|,
name|String
name|path
parameter_list|,
name|boolean
name|added
parameter_list|)
throws|throws
name|SVNException
block|{
name|SVNFileInfo
name|info
init|=
operator|new
name|SVNFileInfo
argument_list|(
name|parent
argument_list|,
name|path
argument_list|)
decl_stmt|;
name|info
operator|.
name|IsAdded
operator|=
name|added
expr_stmt|;
name|info
operator|.
name|Name
operator|=
name|SVNPathUtil
operator|.
name|tail
argument_list|(
name|path
argument_list|)
expr_stmt|;
name|info
operator|.
name|isExisted
operator|=
literal|false
expr_stmt|;
name|info
operator|.
name|isAddExisted
operator|=
literal|false
expr_stmt|;
name|info
operator|.
name|isSkipped
operator|=
literal|false
expr_stmt|;
name|info
operator|.
name|baseFile
operator|=
literal|null
expr_stmt|;
name|info
operator|.
name|newBaseFile
operator|=
literal|null
expr_stmt|;
name|SVNAdminArea
name|adminArea
init|=
name|parent
operator|.
name|getAdminArea
argument_list|()
decl_stmt|;
name|SVNEntry
name|entry
init|=
name|adminArea
operator|.
name|getEntry
argument_list|(
name|info
operator|.
name|Name
argument_list|,
literal|true
argument_list|)
decl_stmt|;
if|if
condition|(
name|mySwitchURL
operator|!=
literal|null
operator|||
name|entry
operator|==
literal|null
condition|)
block|{
name|info
operator|.
name|URL
operator|=
name|SVNPathUtil
operator|.
name|append
argument_list|(
name|parent
operator|.
name|URL
argument_list|,
name|SVNEncodingUtil
operator|.
name|uriEncode
argument_list|(
name|info
operator|.
name|Name
argument_list|)
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|info
operator|.
name|URL
operator|=
name|entry
operator|.
name|getURL
argument_list|()
expr_stmt|;
block|}
name|parent
operator|.
name|RefCount
operator|++
expr_stmt|;
return|return
name|info
return|;
block|}
specifier|private
name|SVNDirectoryInfo
name|createDirectoryInfo
parameter_list|(
name|SVNDirectoryInfo
name|parent
parameter_list|,
name|String
name|path
parameter_list|,
name|boolean
name|added
parameter_list|)
block|{
name|SVNDirectoryInfo
name|info
init|=
operator|new
name|SVNDirectoryInfo
argument_list|(
name|path
argument_list|)
decl_stmt|;
name|info
operator|.
name|Parent
operator|=
name|parent
expr_stmt|;
name|info
operator|.
name|IsAdded
operator|=
name|added
expr_stmt|;
name|String
name|name
init|=
name|path
operator|!=
literal|null
condition|?
name|SVNPathUtil
operator|.
name|tail
argument_list|(
name|path
argument_list|)
else|:
literal|""
decl_stmt|;
if|if
condition|(
name|mySwitchURL
operator|==
literal|null
condition|)
block|{
name|SVNAdminArea
name|area
init|=
literal|null
decl_stmt|;
name|SVNEntry
name|dirEntry
init|=
literal|null
decl_stmt|;
name|File
name|areaPath
init|=
operator|new
name|File
argument_list|(
name|myAdminInfo
operator|.
name|getAnchor
argument_list|()
operator|.
name|getRoot
argument_list|()
argument_list|,
name|info
operator|.
name|getPath
argument_list|()
argument_list|)
decl_stmt|;
try|try
block|{
name|area
operator|=
name|myWCAccess
operator|.
name|getAdminArea
argument_list|(
name|areaPath
argument_list|)
expr_stmt|;
if|if
condition|(
name|area
operator|!=
literal|null
condition|)
block|{
comment|// could be missing.
name|dirEntry
operator|=
name|area
operator|.
name|getEntry
argument_list|(
name|area
operator|.
name|getThisDirName
argument_list|()
argument_list|,
literal|false
argument_list|)
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
name|SVNException
name|svne
parameter_list|)
block|{
comment|//
block|}
if|if
condition|(
name|area
operator|!=
literal|null
operator|&&
name|dirEntry
operator|!=
literal|null
condition|)
block|{
name|info
operator|.
name|URL
operator|=
name|dirEntry
operator|.
name|getURL
argument_list|()
expr_stmt|;
block|}
if|if
condition|(
name|info
operator|.
name|URL
operator|==
literal|null
operator|&&
name|parent
operator|!=
literal|null
condition|)
block|{
name|info
operator|.
name|URL
operator|=
name|SVNPathUtil
operator|.
name|append
argument_list|(
name|parent
operator|.
name|URL
argument_list|,
name|SVNEncodingUtil
operator|.
name|uriEncode
argument_list|(
name|name
argument_list|)
argument_list|)
expr_stmt|;
block|}
if|else if
condition|(
name|info
operator|.
name|URL
operator|==
literal|null
operator|&&
name|parent
operator|==
literal|null
condition|)
block|{
name|info
operator|.
name|URL
operator|=
name|myTargetURL
expr_stmt|;
block|}
block|}
else|else
block|{
if|if
condition|(
name|parent
operator|==
literal|null
condition|)
block|{
name|info
operator|.
name|URL
operator|=
name|myTarget
operator|==
literal|null
condition|?
name|mySwitchURL
else|:
name|SVNPathUtil
operator|.
name|removeTail
argument_list|(
name|mySwitchURL
argument_list|)
expr_stmt|;
block|}
else|else
block|{
if|if
condition|(
name|myTarget
operator|!=
literal|null
operator|&&
name|parent
operator|.
name|Parent
operator|==
literal|null
condition|)
block|{
name|info
operator|.
name|URL
operator|=
name|mySwitchURL
expr_stmt|;
block|}
else|else
block|{
name|info
operator|.
name|URL
operator|=
name|SVNPathUtil
operator|.
name|append
argument_list|(
name|parent
operator|.
name|URL
argument_list|,
name|SVNEncodingUtil
operator|.
name|uriEncode
argument_list|(
name|name
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
block|}
name|info
operator|.
name|RefCount
operator|=
literal|1
expr_stmt|;
name|info
operator|.
name|isSkipped
operator|=
literal|false
expr_stmt|;
if|if
condition|(
name|info
operator|.
name|Parent
operator|!=
literal|null
condition|)
block|{
name|info
operator|.
name|Parent
operator|.
name|RefCount
operator|++
expr_stmt|;
block|}
name|info
operator|.
name|isExisted
operator|=
literal|false
expr_stmt|;
name|info
operator|.
name|isAddExisted
operator|=
literal|false
expr_stmt|;
name|info
operator|.
name|log
operator|=
literal|null
expr_stmt|;
name|info
operator|.
name|myAmbientDepth
operator|=
name|SVNDepth
operator|.
name|UNKNOWN
expr_stmt|;
return|return
name|info
return|;
block|}
specifier|public
specifier|static
name|SVNUpdateEditor15
name|createUpdateEditor
parameter_list|(
name|SVNAdminAreaInfo
name|info
parameter_list|,
name|String
name|switchURL
parameter_list|,
name|boolean
name|allowUnversionedObstructions
parameter_list|,
name|boolean
name|depthIsSticky
parameter_list|,
name|SVNDepth
name|depth
parameter_list|,
name|String
index|[]
name|preservedExtensions
parameter_list|,
name|ISVNFileFetcher
name|fileFetcher
parameter_list|,
name|boolean
name|lockOnDemand
parameter_list|)
throws|throws
name|SVNException
block|{
if|if
condition|(
name|depth
operator|==
name|SVNDepth
operator|.
name|UNKNOWN
condition|)
block|{
name|depthIsSticky
operator|=
literal|false
expr_stmt|;
block|}
name|SVNEntry
name|entry
init|=
name|info
operator|.
name|getAnchor
argument_list|()
operator|.
name|getEntry
argument_list|(
name|info
operator|.
name|getAnchor
argument_list|()
operator|.
name|getThisDirName
argument_list|()
argument_list|,
literal|false
argument_list|)
decl_stmt|;
if|if
condition|(
name|switchURL
operator|!=
literal|null
operator|&&
name|entry
operator|!=
literal|null
operator|&&
name|entry
operator|.
name|getRepositoryRoot
argument_list|()
operator|!=
literal|null
condition|)
block|{
if|if
condition|(
operator|!
name|SVNPathUtil
operator|.
name|isAncestor
argument_list|(
name|entry
operator|.
name|getRepositoryRoot
argument_list|()
argument_list|,
name|switchURL
argument_list|)
condition|)
block|{
name|SVNErrorMessage
name|err
init|=
name|SVNErrorMessage
operator|.
name|create
argument_list|(
name|SVNErrorCode
operator|.
name|WC_INVALID_SWITCH
argument_list|,
literal|"''{0}''\nis not the same repository as\n''{1}''"
argument_list|,
operator|new
name|Object
index|[]
block|{
name|switchURL
block|,
name|entry
operator|.
name|getRepositoryRoot
argument_list|()
block|}
argument_list|)
decl_stmt|;
name|SVNErrorManager
operator|.
name|error
argument_list|(
name|err
argument_list|,
name|SVNLogType
operator|.
name|WC
argument_list|)
expr_stmt|;
block|}
block|}
name|SVNUpdateEditor15
name|editor
init|=
operator|new
name|SVNUpdateEditor15
argument_list|(
name|info
argument_list|,
name|switchURL
argument_list|,
name|allowUnversionedObstructions
argument_list|,
name|depthIsSticky
argument_list|,
name|depth
argument_list|,
name|preservedExtensions
argument_list|,
name|entry
operator|!=
literal|null
condition|?
name|entry
operator|.
name|getURL
argument_list|()
else|:
literal|null
argument_list|,
name|entry
operator|!=
literal|null
condition|?
name|entry
operator|.
name|getRepositoryRoot
argument_list|()
else|:
literal|null
argument_list|,
name|fileFetcher
argument_list|,
name|lockOnDemand
argument_list|)
decl_stmt|;
name|info
operator|.
name|getTarget
argument_list|()
operator|.
name|closeEntries
argument_list|()
expr_stmt|;
return|return
name|editor
return|;
block|}
specifier|private
class|class
name|SVNEntryInfo
block|{
specifier|public
name|String
name|URL
decl_stmt|;
specifier|public
name|boolean
name|IsAdded
decl_stmt|;
specifier|public
name|boolean
name|isExisted
decl_stmt|;
specifier|public
name|boolean
name|isAddExisted
decl_stmt|;
specifier|public
name|SVNDirectoryInfo
name|Parent
decl_stmt|;
specifier|public
name|boolean
name|isSkipped
decl_stmt|;
specifier|public
name|long
name|myPreviousRevision
decl_stmt|;
specifier|private
name|String
name|myPath
decl_stmt|;
specifier|private
name|SVNProperties
name|myChangedProperties
decl_stmt|;
specifier|private
name|SVNProperties
name|myChangedEntryProperties
decl_stmt|;
specifier|private
name|SVNProperties
name|myChangedWCProperties
decl_stmt|;
specifier|protected
name|SVNEntryInfo
parameter_list|(
name|String
name|path
parameter_list|)
block|{
name|myPath
operator|=
name|path
expr_stmt|;
block|}
specifier|protected
name|String
name|getPath
parameter_list|()
block|{
return|return
name|myPath
return|;
block|}
specifier|public
name|void
name|propertyChanged
parameter_list|(
name|String
name|name
parameter_list|,
name|SVNPropertyValue
name|value
parameter_list|)
block|{
if|if
condition|(
name|name
operator|.
name|startsWith
argument_list|(
name|SVNProperty
operator|.
name|SVN_ENTRY_PREFIX
argument_list|)
condition|)
block|{
name|myChangedEntryProperties
operator|=
name|myChangedEntryProperties
operator|==
literal|null
condition|?
operator|new
name|SVNProperties
argument_list|()
else|:
name|myChangedEntryProperties
expr_stmt|;
comment|// trim value of svn:entry property
if|if
condition|(
name|value
operator|!=
literal|null
condition|)
block|{
name|String
name|strValue
init|=
name|value
operator|.
name|getString
argument_list|()
decl_stmt|;
if|if
condition|(
name|strValue
operator|!=
literal|null
condition|)
block|{
name|strValue
operator|=
name|strValue
operator|.
name|trim
argument_list|()
expr_stmt|;
name|value
operator|=
name|SVNPropertyValue
operator|.
name|create
argument_list|(
name|strValue
argument_list|)
expr_stmt|;
block|}
block|}
name|myChangedEntryProperties
operator|.
name|put
argument_list|(
name|name
operator|.
name|substring
argument_list|(
name|SVNProperty
operator|.
name|SVN_ENTRY_PREFIX
operator|.
name|length
argument_list|()
argument_list|)
argument_list|,
name|value
argument_list|)
expr_stmt|;
block|}
if|else if
condition|(
name|name
operator|.
name|startsWith
argument_list|(
name|SVNProperty
operator|.
name|SVN_WC_PREFIX
argument_list|)
condition|)
block|{
name|myChangedWCProperties
operator|=
name|myChangedWCProperties
operator|==
literal|null
condition|?
operator|new
name|SVNProperties
argument_list|()
else|:
name|myChangedWCProperties
expr_stmt|;
name|myChangedWCProperties
operator|.
name|put
argument_list|(
name|name
argument_list|,
name|value
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|myChangedProperties
operator|=
name|myChangedProperties
operator|==
literal|null
condition|?
operator|new
name|SVNProperties
argument_list|()
else|:
name|myChangedProperties
expr_stmt|;
name|myChangedProperties
operator|.
name|put
argument_list|(
name|name
argument_list|,
name|value
argument_list|)
expr_stmt|;
block|}
block|}
specifier|public
name|SVNProperties
name|getChangedWCProperties
parameter_list|()
block|{
return|return
name|myChangedWCProperties
return|;
block|}
specifier|public
name|SVNProperties
name|getChangedEntryProperties
parameter_list|()
block|{
return|return
name|myChangedEntryProperties
return|;
block|}
specifier|public
name|SVNProperties
name|getChangedProperties
parameter_list|()
block|{
return|return
name|myChangedProperties
return|;
block|}
block|}
specifier|private
class|class
name|SVNFileInfo
extends|extends
name|SVNEntryInfo
block|{
specifier|public
name|String
name|Name
decl_stmt|;
specifier|public
name|String
name|CommitTime
decl_stmt|;
specifier|public
name|String
name|Checksum
decl_stmt|;
specifier|public
name|File
name|baseFile
decl_stmt|;
specifier|public
name|File
name|newBaseFile
decl_stmt|;
specifier|public
name|boolean
name|addedWithHistory
decl_stmt|;
specifier|public
name|boolean
name|receivedTextDelta
decl_stmt|;
specifier|private
name|SVNProperties
name|copiedBaseProperties
decl_stmt|;
specifier|private
name|SVNProperties
name|copiedWorkingProperties
decl_stmt|;
specifier|private
name|File
name|copiedBaseText
decl_stmt|;
specifier|private
name|File
name|copiedWorkingText
decl_stmt|;
specifier|public
name|SVNFileInfo
parameter_list|(
name|SVNDirectoryInfo
name|parent
parameter_list|,
name|String
name|path
parameter_list|)
block|{
name|super
argument_list|(
name|path
argument_list|)
expr_stmt|;
name|this
operator|.
name|Parent
operator|=
name|parent
expr_stmt|;
block|}
specifier|public
name|SVNAdminArea
name|getAdminArea
parameter_list|()
throws|throws
name|SVNException
block|{
return|return
name|Parent
operator|.
name|getAdminArea
argument_list|()
return|;
block|}
block|}
specifier|private
class|class
name|SVNDirectoryInfo
extends|extends
name|SVNEntryInfo
implements|implements
name|ISVNCleanupHandler
block|{
specifier|public
name|int
name|RefCount
decl_stmt|;
specifier|private
name|SVNLog
name|log
decl_stmt|;
specifier|public
name|int
name|LogCount
decl_stmt|;
specifier|public
name|SVNDepth
name|myAmbientDepth
decl_stmt|;
specifier|public
name|SVNDirectoryInfo
parameter_list|(
name|String
name|path
parameter_list|)
block|{
name|super
argument_list|(
name|path
argument_list|)
expr_stmt|;
block|}
specifier|public
name|SVNAdminArea
name|getAdminArea
parameter_list|()
throws|throws
name|SVNException
block|{
name|String
name|path
init|=
name|getPath
argument_list|()
decl_stmt|;
name|File
name|file
init|=
operator|new
name|File
argument_list|(
name|myAdminInfo
operator|.
name|getAnchor
argument_list|()
operator|.
name|getRoot
argument_list|()
argument_list|,
name|path
argument_list|)
decl_stmt|;
name|SVNAdminArea
name|area
init|=
name|myAdminInfo
operator|.
name|getWCAccess
argument_list|()
operator|.
name|retrieve
argument_list|(
name|file
argument_list|)
decl_stmt|;
if|if
condition|(
name|myIsLockOnDemand
operator|&&
name|area
operator|!=
literal|null
operator|&&
operator|!
name|area
operator|.
name|isLocked
argument_list|()
condition|)
block|{
name|area
operator|.
name|lock
argument_list|(
literal|false
argument_list|)
expr_stmt|;
name|area
operator|=
name|myAdminInfo
operator|.
name|getWCAccess
argument_list|()
operator|.
name|upgrade
argument_list|(
name|file
argument_list|)
expr_stmt|;
block|}
return|return
name|area
return|;
block|}
specifier|public
name|SVNLog
name|getLog
parameter_list|()
throws|throws
name|SVNException
block|{
if|if
condition|(
name|log
operator|==
literal|null
condition|)
block|{
name|log
operator|=
name|getAdminArea
argument_list|()
operator|.
name|getLog
argument_list|()
expr_stmt|;
name|LogCount
operator|++
expr_stmt|;
block|}
return|return
name|log
return|;
block|}
specifier|public
name|void
name|flushLog
parameter_list|()
throws|throws
name|SVNException
block|{
if|if
condition|(
name|log
operator|!=
literal|null
condition|)
block|{
name|log
operator|.
name|save
argument_list|()
expr_stmt|;
name|log
operator|=
literal|null
expr_stmt|;
block|}
block|}
specifier|public
name|void
name|runLogs
parameter_list|()
throws|throws
name|SVNException
block|{
name|LogCount
operator|=
literal|0
expr_stmt|;
name|getAdminArea
argument_list|()
operator|.
name|runLogs
argument_list|()
expr_stmt|;
block|}
specifier|public
name|void
name|cleanup
parameter_list|(
name|SVNAdminArea
name|area
parameter_list|)
throws|throws
name|SVNException
block|{
if|if
condition|(
name|area
operator|!=
literal|null
operator|&&
name|LogCount
operator|>
literal|0
condition|)
block|{
name|LogCount
operator|=
literal|0
expr_stmt|;
name|area
operator|.
name|runLogs
argument_list|()
expr_stmt|;
block|}
block|}
block|}
specifier|public
name|void
name|cleanup
parameter_list|(
name|SVNAdminArea
name|area
parameter_list|)
throws|throws
name|SVNException
block|{
name|area
operator|.
name|runLogs
argument_list|()
expr_stmt|;
block|}
block|}
end_class

end_unit

