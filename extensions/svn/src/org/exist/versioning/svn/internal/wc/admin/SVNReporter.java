begin_unit|revision:1.0.0;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * ====================================================================  * Copyright (c) 2004-2010 TMate Software Ltd.  All rights reserved.  *  * This software is licensed as described in the file COPYING, which  * you should have received as part of this distribution.  The terms  * are also available at http://svnkit.com/license.html  * If newer versions of this license are posted there, you may use a  * newer version instead, at your option.  * ====================================================================  */
end_comment

begin_package
package|package
name|org
operator|.
name|exist
operator|.
name|versioning
operator|.
name|svn
operator|.
name|internal
operator|.
name|wc
operator|.
name|admin
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|File
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Iterator
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|versioning
operator|.
name|svn
operator|.
name|internal
operator|.
name|wc
operator|.
name|SVNErrorManager
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|versioning
operator|.
name|svn
operator|.
name|internal
operator|.
name|wc
operator|.
name|SVNEventFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|versioning
operator|.
name|svn
operator|.
name|internal
operator|.
name|wc
operator|.
name|SVNFileType
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|versioning
operator|.
name|svn
operator|.
name|wc
operator|.
name|SVNEventAction
import|;
end_import

begin_import
import|import
name|org
operator|.
name|tmatesoft
operator|.
name|svn
operator|.
name|core
operator|.
name|SVNDepth
import|;
end_import

begin_import
import|import
name|org
operator|.
name|tmatesoft
operator|.
name|svn
operator|.
name|core
operator|.
name|SVNErrorCode
import|;
end_import

begin_import
import|import
name|org
operator|.
name|tmatesoft
operator|.
name|svn
operator|.
name|core
operator|.
name|SVNErrorMessage
import|;
end_import

begin_import
import|import
name|org
operator|.
name|tmatesoft
operator|.
name|svn
operator|.
name|core
operator|.
name|SVNException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|tmatesoft
operator|.
name|svn
operator|.
name|core
operator|.
name|SVNProperty
import|;
end_import

begin_import
import|import
name|org
operator|.
name|tmatesoft
operator|.
name|svn
operator|.
name|core
operator|.
name|SVNURL
import|;
end_import

begin_import
import|import
name|org
operator|.
name|tmatesoft
operator|.
name|svn
operator|.
name|core
operator|.
name|internal
operator|.
name|util
operator|.
name|SVNEncodingUtil
import|;
end_import

begin_import
import|import
name|org
operator|.
name|tmatesoft
operator|.
name|svn
operator|.
name|core
operator|.
name|internal
operator|.
name|util
operator|.
name|SVNPathUtil
import|;
end_import

begin_import
import|import
name|org
operator|.
name|tmatesoft
operator|.
name|svn
operator|.
name|core
operator|.
name|io
operator|.
name|ISVNReporter
import|;
end_import

begin_import
import|import
name|org
operator|.
name|tmatesoft
operator|.
name|svn
operator|.
name|core
operator|.
name|io
operator|.
name|ISVNReporterBaton
import|;
end_import

begin_import
import|import
name|org
operator|.
name|tmatesoft
operator|.
name|svn
operator|.
name|core
operator|.
name|wc
operator|.
name|SVNRevision
import|;
end_import

begin_import
import|import
name|org
operator|.
name|tmatesoft
operator|.
name|svn
operator|.
name|util
operator|.
name|ISVNDebugLog
import|;
end_import

begin_import
import|import
name|org
operator|.
name|tmatesoft
operator|.
name|svn
operator|.
name|util
operator|.
name|SVNLogType
import|;
end_import

begin_comment
comment|/**  * @version 1.3  * @author  TMate Software Ltd.  */
end_comment

begin_class
specifier|public
class|class
name|SVNReporter
implements|implements
name|ISVNReporterBaton
block|{
specifier|private
name|SVNAdminAreaInfo
name|myInfo
decl_stmt|;
specifier|private
name|SVNDepth
name|myDepth
decl_stmt|;
specifier|private
name|boolean
name|myIsRestore
decl_stmt|;
specifier|private
name|boolean
name|myUseDepthCompatibilityTrick
decl_stmt|;
specifier|private
name|boolean
name|myIsStatus
decl_stmt|;
specifier|private
name|boolean
name|myIsHonorDepthExclude
decl_stmt|;
specifier|private
name|File
name|myTarget
decl_stmt|;
specifier|private
name|ISVNDebugLog
name|myLog
decl_stmt|;
specifier|private
name|boolean
name|myIsLockOnDemand
decl_stmt|;
specifier|private
name|long
name|myTotalFilesCount
decl_stmt|;
specifier|private
name|long
name|myReportedFilesCount
decl_stmt|;
specifier|public
name|SVNReporter
parameter_list|(
name|SVNAdminAreaInfo
name|info
parameter_list|,
name|File
name|file
parameter_list|,
name|boolean
name|restoreFiles
parameter_list|,
name|boolean
name|useDepthCompatibilityTrick
parameter_list|,
name|SVNDepth
name|depth
parameter_list|,
name|boolean
name|lockOnDemand
parameter_list|,
name|boolean
name|isStatus
parameter_list|,
name|boolean
name|isHonorDepthExclude
parameter_list|,
name|ISVNDebugLog
name|log
parameter_list|)
block|{
name|myInfo
operator|=
name|info
expr_stmt|;
name|myDepth
operator|=
name|depth
expr_stmt|;
name|myIsRestore
operator|=
name|restoreFiles
expr_stmt|;
name|myIsStatus
operator|=
name|isStatus
expr_stmt|;
name|myUseDepthCompatibilityTrick
operator|=
name|useDepthCompatibilityTrick
expr_stmt|;
name|myLog
operator|=
name|log
expr_stmt|;
name|myTarget
operator|=
name|file
expr_stmt|;
name|myIsLockOnDemand
operator|=
name|lockOnDemand
expr_stmt|;
name|myIsHonorDepthExclude
operator|=
name|isHonorDepthExclude
expr_stmt|;
name|myTotalFilesCount
operator|=
literal|0
expr_stmt|;
name|myReportedFilesCount
operator|=
literal|0
expr_stmt|;
block|}
specifier|public
name|void
name|report
parameter_list|(
name|ISVNReporter
name|reporter
parameter_list|)
throws|throws
name|SVNException
block|{
try|try
block|{
name|SVNAdminArea
name|targetArea
init|=
name|myInfo
operator|.
name|getTarget
argument_list|()
decl_stmt|;
name|SVNWCAccess
name|wcAccess
init|=
name|myInfo
operator|.
name|getWCAccess
argument_list|()
decl_stmt|;
name|SVNEntry
name|targetEntry
init|=
name|wcAccess
operator|.
name|getEntry
argument_list|(
name|myTarget
argument_list|,
literal|false
argument_list|)
decl_stmt|;
if|if
condition|(
name|targetEntry
operator|==
literal|null
operator|||
operator|(
name|targetEntry
operator|.
name|isDirectory
argument_list|()
operator|&&
name|targetEntry
operator|.
name|isScheduledForAddition
argument_list|()
operator|)
condition|)
block|{
name|SVNEntry
name|parentEntry
init|=
name|wcAccess
operator|.
name|getVersionedEntry
argument_list|(
name|myTarget
operator|.
name|getParentFile
argument_list|()
argument_list|,
literal|false
argument_list|)
decl_stmt|;
name|long
name|revision
init|=
name|parentEntry
operator|.
name|getRevision
argument_list|()
decl_stmt|;
if|if
condition|(
name|myDepth
operator|==
name|SVNDepth
operator|.
name|UNKNOWN
condition|)
block|{
name|myDepth
operator|=
name|SVNDepth
operator|.
name|INFINITY
expr_stmt|;
block|}
name|reporter
operator|.
name|setPath
argument_list|(
literal|""
argument_list|,
literal|null
argument_list|,
name|revision
argument_list|,
name|myDepth
argument_list|,
name|targetEntry
operator|==
literal|null
operator|||
name|targetEntry
operator|.
name|isIncomplete
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|targetEntry
operator|==
literal|null
operator|||
name|targetEntry
operator|.
name|isIncomplete
argument_list|()
condition|)
block|{
name|myInfo
operator|.
name|addIncompleteEntry
argument_list|(
literal|""
argument_list|)
expr_stmt|;
block|}
name|reporter
operator|.
name|deletePath
argument_list|(
literal|""
argument_list|)
expr_stmt|;
name|reporter
operator|.
name|finishReport
argument_list|()
expr_stmt|;
name|myReportedFilesCount
operator|++
expr_stmt|;
name|myTotalFilesCount
operator|++
expr_stmt|;
return|return;
block|}
name|SVNEntry
name|parentEntry
init|=
literal|null
decl_stmt|;
name|boolean
name|startEmpty
init|=
name|targetEntry
operator|.
name|isIncomplete
argument_list|()
decl_stmt|;
if|if
condition|(
name|myUseDepthCompatibilityTrick
operator|&&
name|targetEntry
operator|.
name|getDepth
argument_list|()
operator|.
name|compareTo
argument_list|(
name|SVNDepth
operator|.
name|IMMEDIATES
argument_list|)
operator|<=
literal|0
operator|&&
name|myDepth
operator|.
name|compareTo
argument_list|(
name|targetEntry
operator|.
name|getDepth
argument_list|()
argument_list|)
operator|>
literal|0
condition|)
block|{
name|startEmpty
operator|=
literal|true
expr_stmt|;
block|}
name|long
name|revision
init|=
name|targetEntry
operator|.
name|getRevision
argument_list|()
decl_stmt|;
if|if
condition|(
operator|!
name|SVNRevision
operator|.
name|isValidRevisionNumber
argument_list|(
name|revision
argument_list|)
condition|)
block|{
name|parentEntry
operator|=
name|wcAccess
operator|.
name|getVersionedEntry
argument_list|(
name|myTarget
operator|.
name|getParentFile
argument_list|()
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|revision
operator|=
name|parentEntry
operator|.
name|getRevision
argument_list|()
expr_stmt|;
block|}
name|reporter
operator|.
name|setPath
argument_list|(
literal|""
argument_list|,
literal|null
argument_list|,
name|revision
argument_list|,
name|targetEntry
operator|.
name|getDepth
argument_list|()
argument_list|,
name|startEmpty
argument_list|)
expr_stmt|;
if|if
condition|(
name|startEmpty
condition|)
block|{
name|myInfo
operator|.
name|addIncompleteEntry
argument_list|(
literal|""
argument_list|)
expr_stmt|;
block|}
name|boolean
name|missing
init|=
literal|false
decl_stmt|;
if|if
condition|(
operator|!
name|targetEntry
operator|.
name|isScheduledForDeletion
argument_list|()
condition|)
block|{
name|SVNFileType
name|fileType
init|=
name|SVNFileType
operator|.
name|getType
argument_list|(
name|myTarget
argument_list|)
decl_stmt|;
name|missing
operator|=
name|fileType
operator|==
name|SVNFileType
operator|.
name|NONE
expr_stmt|;
block|}
name|myTotalFilesCount
operator|=
literal|1
expr_stmt|;
name|myReportedFilesCount
operator|=
literal|1
expr_stmt|;
if|if
condition|(
name|targetEntry
operator|.
name|isDirectory
argument_list|()
condition|)
block|{
if|if
condition|(
operator|!
name|myIsStatus
operator|&&
operator|!
name|missing
operator|&&
operator|!
name|targetEntry
operator|.
name|isThisDir
argument_list|()
condition|)
block|{
name|missing
operator|=
literal|true
expr_stmt|;
block|}
if|if
condition|(
name|missing
condition|)
block|{
name|reporter
operator|.
name|deletePath
argument_list|(
literal|""
argument_list|)
expr_stmt|;
block|}
if|else if
condition|(
name|myDepth
operator|!=
name|SVNDepth
operator|.
name|EMPTY
condition|)
block|{
name|reportEntries
argument_list|(
name|reporter
argument_list|,
name|targetArea
argument_list|,
literal|""
argument_list|,
name|revision
argument_list|,
name|startEmpty
argument_list|,
name|myDepth
argument_list|)
expr_stmt|;
block|}
block|}
if|else if
condition|(
name|targetEntry
operator|.
name|isFile
argument_list|()
condition|)
block|{
if|if
condition|(
name|missing
condition|)
block|{
name|restoreFile
argument_list|(
name|targetArea
argument_list|,
name|targetEntry
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
block|}
comment|// report either linked path or entry path
name|parentEntry
operator|=
name|parentEntry
operator|==
literal|null
condition|?
name|wcAccess
operator|.
name|getEntry
argument_list|(
name|myTarget
operator|.
name|getParentFile
argument_list|()
argument_list|,
literal|false
argument_list|)
else|:
name|parentEntry
expr_stmt|;
name|String
name|url
init|=
name|targetEntry
operator|.
name|getURL
argument_list|()
decl_stmt|;
name|String
name|parentURL
init|=
name|parentEntry
operator|.
name|getURL
argument_list|()
decl_stmt|;
name|String
name|expectedURL
init|=
name|SVNPathUtil
operator|.
name|append
argument_list|(
name|parentURL
argument_list|,
name|SVNEncodingUtil
operator|.
name|uriEncode
argument_list|(
name|targetEntry
operator|.
name|getName
argument_list|()
argument_list|)
argument_list|)
decl_stmt|;
if|if
condition|(
name|parentEntry
operator|!=
literal|null
operator|&&
operator|!
name|expectedURL
operator|.
name|equals
argument_list|(
name|url
argument_list|)
condition|)
block|{
name|SVNURL
name|svnURL
init|=
name|SVNURL
operator|.
name|parseURIEncoded
argument_list|(
name|url
argument_list|)
decl_stmt|;
name|reporter
operator|.
name|linkPath
argument_list|(
name|svnURL
argument_list|,
literal|""
argument_list|,
name|targetEntry
operator|.
name|getLockToken
argument_list|()
argument_list|,
name|targetEntry
operator|.
name|getRevision
argument_list|()
argument_list|,
name|targetEntry
operator|.
name|getDepth
argument_list|()
argument_list|,
literal|false
argument_list|)
expr_stmt|;
block|}
if|else if
condition|(
name|targetEntry
operator|.
name|getRevision
argument_list|()
operator|!=
name|revision
operator|||
name|targetEntry
operator|.
name|getLockToken
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|reporter
operator|.
name|setPath
argument_list|(
literal|""
argument_list|,
name|targetEntry
operator|.
name|getLockToken
argument_list|()
argument_list|,
name|targetEntry
operator|.
name|getRevision
argument_list|()
argument_list|,
name|targetEntry
operator|.
name|getDepth
argument_list|()
argument_list|,
literal|false
argument_list|)
expr_stmt|;
block|}
block|}
name|reporter
operator|.
name|finishReport
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|SVNException
name|e
parameter_list|)
block|{
try|try
block|{
name|reporter
operator|.
name|abortReport
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|SVNException
name|inner
parameter_list|)
block|{
name|myLog
operator|.
name|logFine
argument_list|(
name|SVNLogType
operator|.
name|WC
argument_list|,
name|inner
argument_list|)
expr_stmt|;
block|}
throw|throw
name|e
throw|;
block|}
catch|catch
parameter_list|(
name|Throwable
name|th
parameter_list|)
block|{
name|myLog
operator|.
name|logFine
argument_list|(
name|SVNLogType
operator|.
name|WC
argument_list|,
name|th
argument_list|)
expr_stmt|;
try|try
block|{
name|reporter
operator|.
name|abortReport
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|SVNException
name|e
parameter_list|)
block|{
name|myLog
operator|.
name|logFine
argument_list|(
name|SVNLogType
operator|.
name|WC
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
name|SVNErrorMessage
name|err
init|=
name|SVNErrorMessage
operator|.
name|create
argument_list|(
name|SVNErrorCode
operator|.
name|UNKNOWN
argument_list|,
literal|"WC report failed: {0}"
argument_list|,
name|th
operator|.
name|getMessage
argument_list|()
argument_list|)
decl_stmt|;
name|SVNErrorManager
operator|.
name|error
argument_list|(
name|err
argument_list|,
name|th
argument_list|,
name|SVNLogType
operator|.
name|WC
argument_list|)
expr_stmt|;
block|}
block|}
specifier|private
name|void
name|reportEntries
parameter_list|(
name|ISVNReporter
name|reporter
parameter_list|,
name|SVNAdminArea
name|adminArea
parameter_list|,
name|String
name|dirPath
parameter_list|,
name|long
name|dirRevision
parameter_list|,
name|boolean
name|reportAll
parameter_list|,
name|SVNDepth
name|depth
parameter_list|)
throws|throws
name|SVNException
block|{
name|SVNWCAccess
name|wcAccess
init|=
name|myInfo
operator|.
name|getWCAccess
argument_list|()
decl_stmt|;
name|String
name|externalsProperty
init|=
name|adminArea
operator|.
name|getProperties
argument_list|(
name|adminArea
operator|.
name|getThisDirName
argument_list|()
argument_list|)
operator|.
name|getStringPropertyValue
argument_list|(
name|SVNProperty
operator|.
name|EXTERNALS
argument_list|)
decl_stmt|;
name|SVNEntry
name|thisEntry
init|=
name|adminArea
operator|.
name|getEntry
argument_list|(
name|adminArea
operator|.
name|getThisDirName
argument_list|()
argument_list|,
literal|true
argument_list|)
decl_stmt|;
if|if
condition|(
name|externalsProperty
operator|!=
literal|null
condition|)
block|{
comment|// use owners path as a key.
name|String
name|areaPath
init|=
name|adminArea
operator|.
name|getRelativePath
argument_list|(
name|myInfo
operator|.
name|getAnchor
argument_list|()
argument_list|)
decl_stmt|;
name|myInfo
operator|.
name|addExternal
argument_list|(
name|areaPath
argument_list|,
name|externalsProperty
argument_list|,
name|externalsProperty
argument_list|)
expr_stmt|;
name|myInfo
operator|.
name|addDepth
argument_list|(
name|areaPath
argument_list|,
name|thisEntry
operator|.
name|getDepth
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|String
name|parentURL
init|=
name|thisEntry
operator|.
name|getURL
argument_list|()
decl_stmt|;
for|for
control|(
name|Iterator
name|e
init|=
name|adminArea
operator|.
name|entries
argument_list|(
literal|true
argument_list|)
init|;
name|e
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|SVNEntry
name|entry
init|=
operator|(
name|SVNEntry
operator|)
name|e
operator|.
name|next
argument_list|()
decl_stmt|;
if|if
condition|(
name|adminArea
operator|.
name|getThisDirName
argument_list|()
operator|.
name|equals
argument_list|(
name|entry
operator|.
name|getName
argument_list|()
argument_list|)
condition|)
block|{
continue|continue;
block|}
name|myTotalFilesCount
operator|++
expr_stmt|;
name|String
name|path
init|=
literal|""
operator|.
name|equals
argument_list|(
name|dirPath
argument_list|)
condition|?
name|entry
operator|.
name|getName
argument_list|()
else|:
name|SVNPathUtil
operator|.
name|append
argument_list|(
name|dirPath
argument_list|,
name|entry
operator|.
name|getName
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|entry
operator|.
name|isDeleted
argument_list|()
operator|||
name|entry
operator|.
name|isAbsent
argument_list|()
condition|)
block|{
if|if
condition|(
operator|!
name|reportAll
condition|)
block|{
name|reporter
operator|.
name|deletePath
argument_list|(
name|path
argument_list|)
expr_stmt|;
name|myReportedFilesCount
operator|++
expr_stmt|;
block|}
continue|continue;
block|}
if|if
condition|(
name|entry
operator|.
name|getDepth
argument_list|()
operator|==
name|SVNDepth
operator|.
name|EXCLUDE
condition|)
block|{
if|if
condition|(
name|myIsHonorDepthExclude
condition|)
block|{
name|reporter
operator|.
name|setPath
argument_list|(
name|path
argument_list|,
literal|null
argument_list|,
name|dirRevision
argument_list|,
name|SVNDepth
operator|.
name|EXCLUDE
argument_list|,
literal|false
argument_list|)
expr_stmt|;
block|}
else|else
block|{
if|if
condition|(
operator|!
name|reportAll
condition|)
block|{
name|reporter
operator|.
name|deletePath
argument_list|(
name|path
argument_list|)
expr_stmt|;
block|}
block|}
continue|continue;
block|}
if|if
condition|(
name|entry
operator|.
name|isScheduledForAddition
argument_list|()
condition|)
block|{
continue|continue;
block|}
name|File
name|file
init|=
name|adminArea
operator|.
name|getFile
argument_list|(
name|entry
operator|.
name|getName
argument_list|()
argument_list|)
decl_stmt|;
name|SVNFileType
name|fileType
init|=
name|SVNFileType
operator|.
name|getType
argument_list|(
name|file
argument_list|)
decl_stmt|;
name|boolean
name|missing
init|=
name|fileType
operator|==
name|SVNFileType
operator|.
name|NONE
decl_stmt|;
name|String
name|expectedURL
init|=
name|SVNPathUtil
operator|.
name|append
argument_list|(
name|parentURL
argument_list|,
name|SVNEncodingUtil
operator|.
name|uriEncode
argument_list|(
name|entry
operator|.
name|getName
argument_list|()
argument_list|)
argument_list|)
decl_stmt|;
if|if
condition|(
name|entry
operator|.
name|isFile
argument_list|()
condition|)
block|{
if|if
condition|(
name|missing
operator|&&
operator|!
name|entry
operator|.
name|isScheduledForDeletion
argument_list|()
operator|&&
operator|!
name|entry
operator|.
name|isScheduledForReplacement
argument_list|()
condition|)
block|{
name|adminArea
operator|=
name|restoreFile
argument_list|(
name|adminArea
argument_list|,
name|entry
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|String
name|url
init|=
name|entry
operator|.
name|getURL
argument_list|()
decl_stmt|;
if|if
condition|(
name|reportAll
condition|)
block|{
if|if
condition|(
operator|!
name|url
operator|.
name|equals
argument_list|(
name|expectedURL
argument_list|)
condition|)
block|{
name|SVNURL
name|svnURL
init|=
name|SVNURL
operator|.
name|parseURIEncoded
argument_list|(
name|url
argument_list|)
decl_stmt|;
name|reporter
operator|.
name|linkPath
argument_list|(
name|svnURL
argument_list|,
name|path
argument_list|,
name|entry
operator|.
name|getLockToken
argument_list|()
argument_list|,
name|entry
operator|.
name|getRevision
argument_list|()
argument_list|,
name|entry
operator|.
name|getDepth
argument_list|()
argument_list|,
literal|false
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|reporter
operator|.
name|setPath
argument_list|(
name|path
argument_list|,
name|entry
operator|.
name|getLockToken
argument_list|()
argument_list|,
name|entry
operator|.
name|getRevision
argument_list|()
argument_list|,
name|entry
operator|.
name|getDepth
argument_list|()
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|myReportedFilesCount
operator|++
expr_stmt|;
block|}
block|}
if|else if
condition|(
operator|!
name|entry
operator|.
name|isScheduledForAddition
argument_list|()
operator|&&
operator|!
name|entry
operator|.
name|isScheduledForReplacement
argument_list|()
operator|&&
operator|!
name|url
operator|.
name|equals
argument_list|(
name|expectedURL
argument_list|)
condition|)
block|{
comment|// link path
name|SVNURL
name|svnURL
init|=
name|SVNURL
operator|.
name|parseURIEncoded
argument_list|(
name|url
argument_list|)
decl_stmt|;
name|reporter
operator|.
name|linkPath
argument_list|(
name|svnURL
argument_list|,
name|path
argument_list|,
name|entry
operator|.
name|getLockToken
argument_list|()
argument_list|,
name|entry
operator|.
name|getRevision
argument_list|()
argument_list|,
name|entry
operator|.
name|getDepth
argument_list|()
argument_list|,
literal|false
argument_list|)
expr_stmt|;
block|}
if|else if
condition|(
name|entry
operator|.
name|getRevision
argument_list|()
operator|!=
name|dirRevision
operator|||
name|entry
operator|.
name|getLockToken
argument_list|()
operator|!=
literal|null
operator|||
name|thisEntry
operator|.
name|getDepth
argument_list|()
operator|==
name|SVNDepth
operator|.
name|EMPTY
condition|)
block|{
name|reporter
operator|.
name|setPath
argument_list|(
name|path
argument_list|,
name|entry
operator|.
name|getLockToken
argument_list|()
argument_list|,
name|entry
operator|.
name|getRevision
argument_list|()
argument_list|,
name|entry
operator|.
name|getDepth
argument_list|()
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|myReportedFilesCount
operator|++
expr_stmt|;
block|}
block|}
if|else if
condition|(
name|entry
operator|.
name|isDirectory
argument_list|()
operator|&&
operator|(
name|depth
operator|.
name|compareTo
argument_list|(
name|SVNDepth
operator|.
name|FILES
argument_list|)
operator|>
literal|0
operator|||
name|depth
operator|==
name|SVNDepth
operator|.
name|UNKNOWN
operator|)
condition|)
block|{
if|if
condition|(
name|missing
condition|)
block|{
if|if
condition|(
name|myIsRestore
operator|&&
name|entry
operator|.
name|isScheduledForDeletion
argument_list|()
operator|||
name|entry
operator|.
name|isScheduledForReplacement
argument_list|()
condition|)
block|{
comment|// remove dir schedule if it is 'scheduled for deletion' but missing.
name|entry
operator|.
name|setSchedule
argument_list|(
literal|null
argument_list|)
expr_stmt|;
name|adminArea
operator|.
name|saveEntries
argument_list|(
literal|false
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
operator|!
name|reportAll
condition|)
block|{
name|reporter
operator|.
name|deletePath
argument_list|(
name|path
argument_list|)
expr_stmt|;
name|myReportedFilesCount
operator|++
expr_stmt|;
block|}
continue|continue;
block|}
if|if
condition|(
name|wcAccess
operator|.
name|isMissing
argument_list|(
name|adminArea
operator|.
name|getFile
argument_list|(
name|entry
operator|.
name|getName
argument_list|()
argument_list|)
argument_list|)
condition|)
block|{
if|if
condition|(
operator|!
name|myIsStatus
condition|)
block|{
name|reporter
operator|.
name|deletePath
argument_list|(
name|path
argument_list|)
expr_stmt|;
name|myReportedFilesCount
operator|++
expr_stmt|;
block|}
continue|continue;
block|}
name|SVNAdminArea
name|childArea
init|=
name|wcAccess
operator|.
name|retrieve
argument_list|(
name|adminArea
operator|.
name|getFile
argument_list|(
name|entry
operator|.
name|getName
argument_list|()
argument_list|)
argument_list|)
decl_stmt|;
name|SVNEntry
name|childEntry
init|=
name|childArea
operator|.
name|getEntry
argument_list|(
name|childArea
operator|.
name|getThisDirName
argument_list|()
argument_list|,
literal|true
argument_list|)
decl_stmt|;
name|String
name|url
init|=
name|childEntry
operator|.
name|getURL
argument_list|()
decl_stmt|;
name|boolean
name|startEmpty
init|=
name|childEntry
operator|.
name|isIncomplete
argument_list|()
decl_stmt|;
if|if
condition|(
name|myUseDepthCompatibilityTrick
operator|&&
name|childEntry
operator|.
name|getDepth
argument_list|()
operator|.
name|compareTo
argument_list|(
name|SVNDepth
operator|.
name|FILES
argument_list|)
operator|<=
literal|0
operator|&&
name|depth
operator|.
name|compareTo
argument_list|(
name|childEntry
operator|.
name|getDepth
argument_list|()
argument_list|)
operator|>
literal|0
condition|)
block|{
name|startEmpty
operator|=
literal|true
expr_stmt|;
name|myInfo
operator|.
name|addIncompleteEntry
argument_list|(
name|path
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|reportAll
condition|)
block|{
if|if
condition|(
operator|!
name|url
operator|.
name|equals
argument_list|(
name|expectedURL
argument_list|)
condition|)
block|{
name|SVNURL
name|svnURL
init|=
name|SVNURL
operator|.
name|parseURIEncoded
argument_list|(
name|url
argument_list|)
decl_stmt|;
name|reporter
operator|.
name|linkPath
argument_list|(
name|svnURL
argument_list|,
name|path
argument_list|,
name|childEntry
operator|.
name|getLockToken
argument_list|()
argument_list|,
name|childEntry
operator|.
name|getRevision
argument_list|()
argument_list|,
name|childEntry
operator|.
name|getDepth
argument_list|()
argument_list|,
name|startEmpty
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|reporter
operator|.
name|setPath
argument_list|(
name|path
argument_list|,
name|childEntry
operator|.
name|getLockToken
argument_list|()
argument_list|,
name|childEntry
operator|.
name|getRevision
argument_list|()
argument_list|,
name|childEntry
operator|.
name|getDepth
argument_list|()
argument_list|,
name|startEmpty
argument_list|)
expr_stmt|;
name|myReportedFilesCount
operator|++
expr_stmt|;
block|}
block|}
if|else if
condition|(
operator|!
name|url
operator|.
name|equals
argument_list|(
name|expectedURL
argument_list|)
condition|)
block|{
name|SVNURL
name|svnURL
init|=
name|SVNURL
operator|.
name|parseURIEncoded
argument_list|(
name|url
argument_list|)
decl_stmt|;
name|reporter
operator|.
name|linkPath
argument_list|(
name|svnURL
argument_list|,
name|path
argument_list|,
name|childEntry
operator|.
name|getLockToken
argument_list|()
argument_list|,
name|childEntry
operator|.
name|getRevision
argument_list|()
argument_list|,
name|childEntry
operator|.
name|getDepth
argument_list|()
argument_list|,
name|startEmpty
argument_list|)
expr_stmt|;
block|}
if|else if
condition|(
name|childEntry
operator|.
name|getLockToken
argument_list|()
operator|!=
literal|null
operator|||
name|childEntry
operator|.
name|getRevision
argument_list|()
operator|!=
name|dirRevision
operator|||
name|childEntry
operator|.
name|isIncomplete
argument_list|()
operator|||
name|thisEntry
operator|.
name|getDepth
argument_list|()
operator|==
name|SVNDepth
operator|.
name|EMPTY
operator|||
name|thisEntry
operator|.
name|getDepth
argument_list|()
operator|==
name|SVNDepth
operator|.
name|FILES
operator|||
operator|(
name|thisEntry
operator|.
name|getDepth
argument_list|()
operator|==
name|SVNDepth
operator|.
name|IMMEDIATES
operator|&&
name|childEntry
operator|.
name|getDepth
argument_list|()
operator|!=
name|SVNDepth
operator|.
name|EMPTY
operator|)
operator|||
operator|(
name|SVNDepth
operator|.
name|INFINITY
operator|.
name|compareTo
argument_list|(
name|childEntry
operator|.
name|getDepth
argument_list|()
argument_list|)
operator|>
literal|0
operator|&&
name|depth
operator|==
name|SVNDepth
operator|.
name|INFINITY
operator|)
condition|)
block|{
name|reporter
operator|.
name|setPath
argument_list|(
name|path
argument_list|,
name|childEntry
operator|.
name|getLockToken
argument_list|()
argument_list|,
name|childEntry
operator|.
name|getRevision
argument_list|()
argument_list|,
name|childEntry
operator|.
name|getDepth
argument_list|()
argument_list|,
name|startEmpty
argument_list|)
expr_stmt|;
name|myReportedFilesCount
operator|++
expr_stmt|;
block|}
if|if
condition|(
name|depth
operator|==
name|SVNDepth
operator|.
name|INFINITY
operator|||
name|depth
operator|==
name|SVNDepth
operator|.
name|UNKNOWN
condition|)
block|{
name|reportEntries
argument_list|(
name|reporter
argument_list|,
name|childArea
argument_list|,
name|path
argument_list|,
name|childEntry
operator|.
name|getRevision
argument_list|()
argument_list|,
name|startEmpty
argument_list|,
name|depth
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
specifier|private
name|SVNAdminArea
name|restoreFile
parameter_list|(
name|SVNAdminArea
name|adminArea
parameter_list|,
name|String
name|name
parameter_list|)
throws|throws
name|SVNException
block|{
if|if
condition|(
operator|!
name|myIsRestore
condition|)
block|{
return|return
name|adminArea
return|;
block|}
if|if
condition|(
name|myIsLockOnDemand
operator|&&
operator|!
name|adminArea
operator|.
name|isLocked
argument_list|()
condition|)
block|{
name|adminArea
operator|.
name|lock
argument_list|(
literal|false
argument_list|)
expr_stmt|;
name|adminArea
operator|=
name|myInfo
operator|.
name|getWCAccess
argument_list|()
operator|.
name|upgrade
argument_list|(
name|adminArea
operator|.
name|getRoot
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|adminArea
operator|.
name|restoreFile
argument_list|(
name|name
argument_list|)
expr_stmt|;
name|SVNEntry
name|entry
init|=
name|adminArea
operator|.
name|getEntry
argument_list|(
name|name
argument_list|,
literal|true
argument_list|)
decl_stmt|;
name|myInfo
operator|.
name|getWCAccess
argument_list|()
operator|.
name|handleEvent
argument_list|(
name|SVNEventFactory
operator|.
name|createSVNEvent
argument_list|(
name|adminArea
operator|.
name|getFile
argument_list|(
name|entry
operator|.
name|getName
argument_list|()
argument_list|)
argument_list|,
name|entry
operator|.
name|getKind
argument_list|()
argument_list|,
literal|null
argument_list|,
name|entry
operator|.
name|getRevision
argument_list|()
argument_list|,
name|SVNEventAction
operator|.
name|RESTORE
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|)
argument_list|)
expr_stmt|;
return|return
name|adminArea
return|;
block|}
specifier|public
name|long
name|getReportedFilesCount
parameter_list|()
block|{
return|return
name|myReportedFilesCount
return|;
block|}
specifier|public
name|long
name|getTotalFilesCount
parameter_list|()
block|{
return|return
name|myTotalFilesCount
return|;
block|}
block|}
end_class

end_unit

