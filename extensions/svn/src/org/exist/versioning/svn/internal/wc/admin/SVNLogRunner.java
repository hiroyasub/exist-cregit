begin_unit|revision:1.0.0;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * ====================================================================  * Copyright (c) 2004-2010 TMate Software Ltd.  All rights reserved.  *  * This software is licensed as described in the file COPYING, which  * you should have received as part of this distribution.  The terms  * are also available at http://svnkit.com/license.html  * If newer versions of this license are posted there, you may use a  * newer version instead, at your option.  * ====================================================================  */
end_comment

begin_package
package|package
name|org
operator|.
name|exist
operator|.
name|versioning
operator|.
name|svn
operator|.
name|internal
operator|.
name|wc
operator|.
name|admin
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|File
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|FileNotFoundException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|InputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|OutputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Date
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Iterator
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|versioning
operator|.
name|svn
operator|.
name|internal
operator|.
name|wc
operator|.
name|SVNErrorManager
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|versioning
operator|.
name|svn
operator|.
name|internal
operator|.
name|wc
operator|.
name|SVNFileUtil
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|versioning
operator|.
name|svn
operator|.
name|internal
operator|.
name|wc
operator|.
name|SVNTreeConflictUtil
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|versioning
operator|.
name|svn
operator|.
name|wc
operator|.
name|SVNStatusType
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|versioning
operator|.
name|svn
operator|.
name|wc
operator|.
name|SVNTreeConflictDescription
import|;
end_import

begin_import
import|import
name|org
operator|.
name|tmatesoft
operator|.
name|svn
operator|.
name|core
operator|.
name|SVNErrorCode
import|;
end_import

begin_import
import|import
name|org
operator|.
name|tmatesoft
operator|.
name|svn
operator|.
name|core
operator|.
name|SVNErrorMessage
import|;
end_import

begin_import
import|import
name|org
operator|.
name|tmatesoft
operator|.
name|svn
operator|.
name|core
operator|.
name|SVNException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|tmatesoft
operator|.
name|svn
operator|.
name|core
operator|.
name|SVNNodeKind
import|;
end_import

begin_import
import|import
name|org
operator|.
name|tmatesoft
operator|.
name|svn
operator|.
name|core
operator|.
name|SVNProperties
import|;
end_import

begin_import
import|import
name|org
operator|.
name|tmatesoft
operator|.
name|svn
operator|.
name|core
operator|.
name|SVNProperty
import|;
end_import

begin_import
import|import
name|org
operator|.
name|tmatesoft
operator|.
name|svn
operator|.
name|core
operator|.
name|SVNPropertyValue
import|;
end_import

begin_import
import|import
name|org
operator|.
name|tmatesoft
operator|.
name|svn
operator|.
name|core
operator|.
name|internal
operator|.
name|util
operator|.
name|SVNDate
import|;
end_import

begin_import
import|import
name|org
operator|.
name|tmatesoft
operator|.
name|svn
operator|.
name|core
operator|.
name|internal
operator|.
name|util
operator|.
name|SVNHashMap
import|;
end_import

begin_import
import|import
name|org
operator|.
name|tmatesoft
operator|.
name|svn
operator|.
name|util
operator|.
name|SVNLogType
import|;
end_import

begin_comment
comment|/**  * @version 1.3  * @author  TMate Software Ltd.  */
end_comment

begin_class
specifier|public
class|class
name|SVNLogRunner
block|{
specifier|private
name|boolean
name|myIsEntriesChanged
decl_stmt|;
specifier|private
name|boolean
name|myIsWCPropertiesChanged
decl_stmt|;
specifier|private
name|Map
name|myTreeConflicts
decl_stmt|;
specifier|private
name|boolean
name|myHasAddedTreeConflicts
decl_stmt|;
specifier|private
name|int
name|myLogCount
decl_stmt|;
specifier|private
name|boolean
name|myIsRerun
decl_stmt|;
specifier|public
name|SVNLogRunner
parameter_list|(
name|boolean
name|rerun
parameter_list|)
block|{
name|myIsRerun
operator|=
name|rerun
expr_stmt|;
block|}
specifier|private
name|Map
name|getTreeConflicts
parameter_list|()
block|{
if|if
condition|(
name|myTreeConflicts
operator|==
literal|null
condition|)
block|{
name|myTreeConflicts
operator|=
operator|new
name|SVNHashMap
argument_list|()
expr_stmt|;
block|}
return|return
name|myTreeConflicts
return|;
block|}
specifier|public
name|void
name|runCommand
parameter_list|(
name|SVNAdminArea
name|adminArea
parameter_list|,
name|String
name|name
parameter_list|,
name|SVNProperties
name|attributes
parameter_list|,
name|int
name|count
parameter_list|)
throws|throws
name|SVNException
block|{
name|SVNException
name|error
init|=
literal|null
decl_stmt|;
name|String
name|fileName
init|=
name|attributes
operator|.
name|getStringValue
argument_list|(
name|SVNLog
operator|.
name|NAME_ATTR
argument_list|)
decl_stmt|;
if|if
condition|(
name|SVNLog
operator|.
name|DELETE_ENTRY
operator|.
name|equals
argument_list|(
name|name
argument_list|)
condition|)
block|{
name|File
name|path
init|=
name|adminArea
operator|.
name|getFile
argument_list|(
name|fileName
argument_list|)
decl_stmt|;
name|SVNAdminArea
name|dir
init|=
name|adminArea
operator|.
name|getWCAccess
argument_list|()
operator|.
name|probeRetrieve
argument_list|(
name|path
argument_list|)
decl_stmt|;
name|SVNEntry
name|entry
init|=
name|dir
operator|.
name|getWCAccess
argument_list|()
operator|.
name|getEntry
argument_list|(
name|path
argument_list|,
literal|false
argument_list|)
decl_stmt|;
if|if
condition|(
name|entry
operator|==
literal|null
condition|)
block|{
return|return;
block|}
try|try
block|{
if|if
condition|(
name|entry
operator|.
name|isDirectory
argument_list|()
condition|)
block|{
try|try
block|{
name|SVNAdminArea
name|childDir
init|=
name|dir
operator|.
name|getWCAccess
argument_list|()
operator|.
name|retrieve
argument_list|(
name|path
argument_list|)
decl_stmt|;
comment|// it should be null when there is no dir already.
if|if
condition|(
name|childDir
operator|!=
literal|null
condition|)
block|{
name|childDir
operator|.
name|extendLockToTree
argument_list|()
expr_stmt|;
name|childDir
operator|.
name|removeFromRevisionControl
argument_list|(
name|childDir
operator|.
name|getThisDirName
argument_list|()
argument_list|,
literal|true
argument_list|,
literal|false
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|SVNErrorManager
operator|.
name|error
argument_list|(
name|SVNErrorMessage
operator|.
name|create
argument_list|(
name|SVNErrorCode
operator|.
name|WC_NOT_LOCKED
argument_list|)
argument_list|,
name|SVNLogType
operator|.
name|DEFAULT
argument_list|)
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
name|SVNException
name|e
parameter_list|)
block|{
if|if
condition|(
name|e
operator|.
name|getErrorMessage
argument_list|()
operator|.
name|getErrorCode
argument_list|()
operator|==
name|SVNErrorCode
operator|.
name|WC_NOT_LOCKED
condition|)
block|{
if|if
condition|(
operator|!
name|entry
operator|.
name|isScheduledForAddition
argument_list|()
condition|)
block|{
name|adminArea
operator|.
name|deleteEntry
argument_list|(
name|fileName
argument_list|)
expr_stmt|;
name|adminArea
operator|.
name|saveEntries
argument_list|(
literal|false
argument_list|)
expr_stmt|;
block|}
block|}
else|else
block|{
throw|throw
name|e
throw|;
block|}
block|}
block|}
if|else if
condition|(
name|entry
operator|.
name|isFile
argument_list|()
condition|)
block|{
name|adminArea
operator|.
name|removeFromRevisionControl
argument_list|(
name|fileName
argument_list|,
literal|true
argument_list|,
literal|false
argument_list|)
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
name|SVNException
name|e
parameter_list|)
block|{
if|if
condition|(
name|e
operator|.
name|getErrorMessage
argument_list|()
operator|.
name|getErrorCode
argument_list|()
operator|!=
name|SVNErrorCode
operator|.
name|WC_LEFT_LOCAL_MOD
condition|)
block|{
name|error
operator|=
name|e
expr_stmt|;
block|}
block|}
block|}
if|else if
condition|(
name|SVNLog
operator|.
name|MODIFY_ENTRY
operator|.
name|equals
argument_list|(
name|name
argument_list|)
condition|)
block|{
try|try
block|{
name|Map
name|entryAttrs
init|=
operator|new
name|SVNHashMap
argument_list|()
decl_stmt|;
for|for
control|(
name|Iterator
name|attrtibutesIter
init|=
name|attributes
operator|.
name|nameSet
argument_list|()
operator|.
name|iterator
argument_list|()
init|;
name|attrtibutesIter
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|String
name|attrName
init|=
operator|(
name|String
operator|)
name|attrtibutesIter
operator|.
name|next
argument_list|()
decl_stmt|;
if|if
condition|(
literal|""
operator|.
name|equals
argument_list|(
name|attrName
argument_list|)
operator|||
name|SVNLog
operator|.
name|NAME_ATTR
operator|.
name|equals
argument_list|(
name|attrName
argument_list|)
operator|||
name|SVNLog
operator|.
name|FORCE_ATTR
operator|.
name|equals
argument_list|(
name|attrName
argument_list|)
condition|)
block|{
continue|continue;
block|}
name|String
name|value
init|=
name|attributes
operator|.
name|getStringValue
argument_list|(
name|attrName
argument_list|)
decl_stmt|;
name|attrName
operator|=
name|SVNProperty
operator|.
name|SVN_ENTRY_PREFIX
operator|+
name|attrName
expr_stmt|;
name|entryAttrs
operator|.
name|put
argument_list|(
name|attrName
argument_list|,
name|value
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|entryAttrs
operator|.
name|containsKey
argument_list|(
name|SVNProperty
operator|.
name|TEXT_TIME
argument_list|)
condition|)
block|{
name|String
name|value
init|=
operator|(
name|String
operator|)
name|entryAttrs
operator|.
name|get
argument_list|(
name|SVNProperty
operator|.
name|TEXT_TIME
argument_list|)
decl_stmt|;
if|if
condition|(
name|SVNLog
operator|.
name|WC_TIMESTAMP
operator|.
name|equals
argument_list|(
name|value
argument_list|)
condition|)
block|{
name|File
name|file
init|=
name|adminArea
operator|.
name|getFile
argument_list|(
name|fileName
argument_list|)
decl_stmt|;
name|value
operator|=
name|SVNDate
operator|.
name|formatDate
argument_list|(
operator|new
name|Date
argument_list|(
name|file
operator|.
name|lastModified
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|entryAttrs
operator|.
name|put
argument_list|(
name|SVNProperty
operator|.
name|TEXT_TIME
argument_list|,
name|value
argument_list|)
expr_stmt|;
block|}
block|}
if|if
condition|(
name|entryAttrs
operator|.
name|containsKey
argument_list|(
name|SVNProperty
operator|.
name|PROP_TIME
argument_list|)
condition|)
block|{
name|String
name|value
init|=
operator|(
name|String
operator|)
name|entryAttrs
operator|.
name|get
argument_list|(
name|SVNProperty
operator|.
name|PROP_TIME
argument_list|)
decl_stmt|;
if|if
condition|(
name|SVNLog
operator|.
name|WC_TIMESTAMP
operator|.
name|equals
argument_list|(
name|value
argument_list|)
condition|)
block|{
name|SVNEntry
name|entry
init|=
name|adminArea
operator|.
name|getEntry
argument_list|(
name|fileName
argument_list|,
literal|false
argument_list|)
decl_stmt|;
if|if
condition|(
name|entry
operator|==
literal|null
condition|)
block|{
return|return;
block|}
name|value
operator|=
name|adminArea
operator|.
name|getPropertyTime
argument_list|(
name|fileName
argument_list|)
expr_stmt|;
name|entryAttrs
operator|.
name|put
argument_list|(
name|SVNProperty
operator|.
name|PROP_TIME
argument_list|,
name|value
argument_list|)
expr_stmt|;
block|}
block|}
if|if
condition|(
name|entryAttrs
operator|.
name|containsKey
argument_list|(
name|SVNProperty
operator|.
name|WORKING_SIZE
argument_list|)
condition|)
block|{
name|String
name|workingSize
init|=
operator|(
name|String
operator|)
name|entryAttrs
operator|.
name|get
argument_list|(
name|SVNProperty
operator|.
name|WORKING_SIZE
argument_list|)
decl_stmt|;
if|if
condition|(
name|SVNLog
operator|.
name|WC_WORKING_SIZE
operator|.
name|equals
argument_list|(
name|workingSize
argument_list|)
condition|)
block|{
name|SVNEntry
name|entry
init|=
name|adminArea
operator|.
name|getEntry
argument_list|(
name|fileName
argument_list|,
literal|false
argument_list|)
decl_stmt|;
if|if
condition|(
name|entry
operator|==
literal|null
condition|)
block|{
return|return;
block|}
name|File
name|file
init|=
name|adminArea
operator|.
name|getFile
argument_list|(
name|fileName
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|file
operator|.
name|exists
argument_list|()
condition|)
block|{
name|entryAttrs
operator|.
name|put
argument_list|(
name|SVNProperty
operator|.
name|WORKING_SIZE
argument_list|,
literal|"0"
argument_list|)
expr_stmt|;
block|}
else|else
block|{
try|try
block|{
name|entryAttrs
operator|.
name|put
argument_list|(
name|SVNProperty
operator|.
name|WORKING_SIZE
argument_list|,
name|Long
operator|.
name|toString
argument_list|(
name|file
operator|.
name|length
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|SecurityException
name|se
parameter_list|)
block|{
name|SVNErrorCode
name|code
init|=
name|count
operator|<=
literal|1
condition|?
name|SVNErrorCode
operator|.
name|WC_BAD_ADM_LOG_START
else|:
name|SVNErrorCode
operator|.
name|WC_BAD_ADM_LOG
decl_stmt|;
name|SVNErrorMessage
name|err
init|=
name|SVNErrorMessage
operator|.
name|create
argument_list|(
name|code
argument_list|,
literal|"Error getting file size on ''{0}''"
argument_list|,
name|file
argument_list|)
decl_stmt|;
name|SVNErrorManager
operator|.
name|error
argument_list|(
name|err
argument_list|,
name|se
argument_list|,
name|SVNLogType
operator|.
name|WC
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
name|boolean
name|force
init|=
literal|false
decl_stmt|;
if|if
condition|(
name|attributes
operator|.
name|containsName
argument_list|(
name|SVNLog
operator|.
name|FORCE_ATTR
argument_list|)
condition|)
block|{
name|String
name|forceAttr
init|=
name|attributes
operator|.
name|getStringValue
argument_list|(
name|SVNLog
operator|.
name|FORCE_ATTR
argument_list|)
decl_stmt|;
name|force
operator|=
name|SVNProperty
operator|.
name|booleanValue
argument_list|(
name|forceAttr
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|myIsRerun
operator|&&
name|adminArea
operator|.
name|getEntry
argument_list|(
name|fileName
argument_list|,
literal|true
argument_list|)
operator|==
literal|null
condition|)
block|{
comment|// skip modification without an error.
block|}
else|else
block|{
try|try
block|{
name|adminArea
operator|.
name|modifyEntry
argument_list|(
name|fileName
argument_list|,
name|entryAttrs
argument_list|,
literal|false
argument_list|,
name|force
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|SVNException
name|svne
parameter_list|)
block|{
name|SVNErrorCode
name|code
init|=
name|count
operator|<=
literal|1
condition|?
name|SVNErrorCode
operator|.
name|WC_BAD_ADM_LOG_START
else|:
name|SVNErrorCode
operator|.
name|WC_BAD_ADM_LOG
decl_stmt|;
name|SVNErrorMessage
name|err
init|=
name|SVNErrorMessage
operator|.
name|create
argument_list|(
name|code
argument_list|,
literal|"Error modifying entry for ''{0}''"
argument_list|,
name|fileName
argument_list|)
decl_stmt|;
name|SVNErrorManager
operator|.
name|error
argument_list|(
name|err
argument_list|,
name|svne
argument_list|,
name|SVNLogType
operator|.
name|WC
argument_list|)
expr_stmt|;
block|}
name|setEntriesChanged
argument_list|(
literal|true
argument_list|)
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
name|SVNException
name|svne
parameter_list|)
block|{
name|error
operator|=
name|svne
expr_stmt|;
block|}
block|}
if|else if
condition|(
name|SVNLog
operator|.
name|MODIFY_WC_PROPERTY
operator|.
name|equals
argument_list|(
name|name
argument_list|)
condition|)
block|{
try|try
block|{
name|SVNVersionedProperties
name|wcprops
init|=
name|adminArea
operator|.
name|getWCProperties
argument_list|(
name|fileName
argument_list|)
decl_stmt|;
if|if
condition|(
name|wcprops
operator|!=
literal|null
condition|)
block|{
name|String
name|propName
init|=
name|attributes
operator|.
name|getStringValue
argument_list|(
name|SVNLog
operator|.
name|PROPERTY_NAME_ATTR
argument_list|)
decl_stmt|;
name|SVNPropertyValue
name|propValue
init|=
name|attributes
operator|.
name|getSVNPropertyValue
argument_list|(
name|SVNLog
operator|.
name|PROPERTY_VALUE_ATTR
argument_list|)
decl_stmt|;
name|wcprops
operator|.
name|setPropertyValue
argument_list|(
name|propName
argument_list|,
name|propValue
argument_list|)
expr_stmt|;
name|setWCPropertiesChanged
argument_list|(
literal|true
argument_list|)
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
name|SVNException
name|svne
parameter_list|)
block|{
name|error
operator|=
name|svne
expr_stmt|;
block|}
block|}
if|else if
condition|(
name|SVNLog
operator|.
name|DELETE_LOCK
operator|.
name|equals
argument_list|(
name|name
argument_list|)
condition|)
block|{
try|try
block|{
name|SVNEntry
name|entry
init|=
name|adminArea
operator|.
name|getEntry
argument_list|(
name|fileName
argument_list|,
literal|true
argument_list|)
decl_stmt|;
if|if
condition|(
name|entry
operator|!=
literal|null
condition|)
block|{
name|entry
operator|.
name|setLockToken
argument_list|(
literal|null
argument_list|)
expr_stmt|;
name|entry
operator|.
name|setLockOwner
argument_list|(
literal|null
argument_list|)
expr_stmt|;
name|entry
operator|.
name|setLockCreationDate
argument_list|(
literal|null
argument_list|)
expr_stmt|;
name|entry
operator|.
name|setLockComment
argument_list|(
literal|null
argument_list|)
expr_stmt|;
name|setEntriesChanged
argument_list|(
literal|true
argument_list|)
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
name|SVNException
name|svne
parameter_list|)
block|{
name|SVNErrorCode
name|code
init|=
name|count
operator|<=
literal|1
condition|?
name|SVNErrorCode
operator|.
name|WC_BAD_ADM_LOG_START
else|:
name|SVNErrorCode
operator|.
name|WC_BAD_ADM_LOG
decl_stmt|;
name|SVNErrorMessage
name|err
init|=
name|SVNErrorMessage
operator|.
name|create
argument_list|(
name|code
argument_list|,
literal|"Error removing lock from entry for ''{0}''"
argument_list|,
name|fileName
argument_list|)
decl_stmt|;
name|error
operator|=
operator|new
name|SVNException
argument_list|(
name|err
argument_list|,
name|svne
argument_list|)
expr_stmt|;
block|}
block|}
if|else if
condition|(
name|SVNLog
operator|.
name|DELETE_CHANGELIST
operator|.
name|equals
argument_list|(
name|name
argument_list|)
condition|)
block|{
try|try
block|{
name|Map
name|entryAttrs
init|=
operator|new
name|SVNHashMap
argument_list|()
decl_stmt|;
name|entryAttrs
operator|.
name|put
argument_list|(
name|SVNProperty
operator|.
name|CHANGELIST
argument_list|,
literal|null
argument_list|)
expr_stmt|;
name|adminArea
operator|.
name|modifyEntry
argument_list|(
name|fileName
argument_list|,
name|entryAttrs
argument_list|,
literal|false
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|setEntriesChanged
argument_list|(
literal|true
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|SVNException
name|svne
parameter_list|)
block|{
name|SVNErrorCode
name|code
init|=
name|count
operator|<=
literal|1
condition|?
name|SVNErrorCode
operator|.
name|WC_BAD_ADM_LOG_START
else|:
name|SVNErrorCode
operator|.
name|WC_BAD_ADM_LOG
decl_stmt|;
name|SVNErrorMessage
name|err
init|=
name|SVNErrorMessage
operator|.
name|create
argument_list|(
name|code
argument_list|,
literal|"Error removing changelist from entry ''{0}''"
argument_list|,
name|fileName
argument_list|)
decl_stmt|;
name|error
operator|=
operator|new
name|SVNException
argument_list|(
name|err
argument_list|,
name|svne
argument_list|)
expr_stmt|;
block|}
block|}
if|else if
condition|(
name|SVNLog
operator|.
name|DELETE
operator|.
name|equals
argument_list|(
name|name
argument_list|)
condition|)
block|{
name|File
name|file
init|=
name|adminArea
operator|.
name|getFile
argument_list|(
name|fileName
argument_list|)
decl_stmt|;
name|SVNFileUtil
operator|.
name|deleteFile
argument_list|(
name|file
argument_list|)
expr_stmt|;
block|}
if|else if
condition|(
name|SVNLog
operator|.
name|READONLY
operator|.
name|equals
argument_list|(
name|name
argument_list|)
condition|)
block|{
name|File
name|file
init|=
name|adminArea
operator|.
name|getFile
argument_list|(
name|fileName
argument_list|)
decl_stmt|;
name|SVNFileUtil
operator|.
name|setReadonly
argument_list|(
name|file
argument_list|,
literal|true
argument_list|)
expr_stmt|;
block|}
if|else if
condition|(
name|SVNLog
operator|.
name|MOVE
operator|.
name|equals
argument_list|(
name|name
argument_list|)
condition|)
block|{
name|File
name|src
init|=
name|adminArea
operator|.
name|getFile
argument_list|(
name|fileName
argument_list|)
decl_stmt|;
name|File
name|dst
init|=
name|adminArea
operator|.
name|getFile
argument_list|(
name|attributes
operator|.
name|getStringValue
argument_list|(
name|SVNLog
operator|.
name|DEST_ATTR
argument_list|)
argument_list|)
decl_stmt|;
try|try
block|{
name|SVNFileUtil
operator|.
name|rename
argument_list|(
name|src
argument_list|,
name|dst
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|SVNException
name|svne
parameter_list|)
block|{
if|if
condition|(
operator|!
name|myIsRerun
operator|||
name|src
operator|.
name|exists
argument_list|()
condition|)
block|{
name|error
operator|=
operator|new
name|SVNException
argument_list|(
name|svne
operator|.
name|getErrorMessage
argument_list|()
operator|.
name|wrap
argument_list|(
literal|"Can't move source to dest"
argument_list|)
argument_list|,
name|svne
argument_list|)
expr_stmt|;
block|}
block|}
block|}
if|else if
condition|(
name|SVNLog
operator|.
name|APPEND
operator|.
name|equals
argument_list|(
name|name
argument_list|)
condition|)
block|{
name|File
name|src
init|=
name|adminArea
operator|.
name|getFile
argument_list|(
name|fileName
argument_list|)
decl_stmt|;
name|File
name|dst
init|=
name|adminArea
operator|.
name|getFile
argument_list|(
name|attributes
operator|.
name|getStringValue
argument_list|(
name|SVNLog
operator|.
name|DEST_ATTR
argument_list|)
argument_list|)
decl_stmt|;
name|OutputStream
name|os
init|=
literal|null
decl_stmt|;
name|InputStream
name|is
init|=
literal|null
decl_stmt|;
try|try
block|{
name|os
operator|=
name|SVNFileUtil
operator|.
name|openFileForWriting
argument_list|(
name|dst
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|is
operator|=
name|SVNFileUtil
operator|.
name|openFileForReading
argument_list|(
name|src
argument_list|,
name|SVNLogType
operator|.
name|WC
argument_list|)
expr_stmt|;
while|while
condition|(
literal|true
condition|)
block|{
name|int
name|r
init|=
name|is
operator|.
name|read
argument_list|()
decl_stmt|;
if|if
condition|(
name|r
operator|<
literal|0
condition|)
block|{
break|break;
block|}
name|os
operator|.
name|write
argument_list|(
name|r
argument_list|)
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
if|if
condition|(
operator|!
name|myIsRerun
operator|||
operator|!
operator|(
name|e
operator|instanceof
name|FileNotFoundException
operator|)
condition|)
block|{
name|SVNErrorMessage
name|err
init|=
name|SVNErrorMessage
operator|.
name|create
argument_list|(
name|SVNErrorCode
operator|.
name|IO_ERROR
argument_list|,
literal|"Cannot write to ''{0}'': {1}"
argument_list|,
operator|new
name|Object
index|[]
block|{
name|dst
block|,
name|e
operator|.
name|getLocalizedMessage
argument_list|()
block|}
argument_list|)
decl_stmt|;
name|error
operator|=
operator|new
name|SVNException
argument_list|(
name|err
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
name|SVNException
name|svne
parameter_list|)
block|{
if|if
condition|(
operator|!
name|myIsRerun
operator|||
name|src
operator|.
name|exists
argument_list|()
condition|)
block|{
name|error
operator|=
name|svne
expr_stmt|;
block|}
block|}
finally|finally
block|{
name|SVNFileUtil
operator|.
name|closeFile
argument_list|(
name|os
argument_list|)
expr_stmt|;
name|SVNFileUtil
operator|.
name|closeFile
argument_list|(
name|is
argument_list|)
expr_stmt|;
block|}
block|}
if|else if
condition|(
name|SVNLog
operator|.
name|SET_TIMESTAMP
operator|.
name|equals
argument_list|(
name|name
argument_list|)
condition|)
block|{
name|File
name|file
init|=
name|adminArea
operator|.
name|getFile
argument_list|(
name|fileName
argument_list|)
decl_stmt|;
name|String
name|timestamp
init|=
name|attributes
operator|.
name|getStringValue
argument_list|(
name|SVNLog
operator|.
name|TIMESTAMP_ATTR
argument_list|)
decl_stmt|;
try|try
block|{
if|if
condition|(
name|timestamp
operator|==
literal|null
condition|)
block|{
name|SVNErrorCode
name|code
init|=
name|count
operator|<=
literal|1
condition|?
name|SVNErrorCode
operator|.
name|WC_BAD_ADM_LOG_START
else|:
name|SVNErrorCode
operator|.
name|WC_BAD_ADM_LOG
decl_stmt|;
name|SVNErrorMessage
name|err
init|=
name|SVNErrorMessage
operator|.
name|create
argument_list|(
name|code
argument_list|,
literal|"Missing 'timestamp' attribute in ''{0}''"
argument_list|,
name|adminArea
operator|.
name|getRoot
argument_list|()
argument_list|)
decl_stmt|;
name|SVNErrorManager
operator|.
name|error
argument_list|(
name|err
argument_list|,
name|SVNLogType
operator|.
name|WC
argument_list|)
expr_stmt|;
block|}
name|Date
name|time
init|=
name|SVNDate
operator|.
name|parseDate
argument_list|(
name|timestamp
argument_list|)
decl_stmt|;
comment|//TODO: what about special files (do not set for them).
if|if
condition|(
operator|!
name|file
operator|.
name|setLastModified
argument_list|(
name|time
operator|.
name|getTime
argument_list|()
argument_list|)
condition|)
block|{
if|if
condition|(
operator|!
name|file
operator|.
name|canWrite
argument_list|()
operator|&&
name|file
operator|.
name|isFile
argument_list|()
condition|)
block|{
name|SVNFileUtil
operator|.
name|setReadonly
argument_list|(
name|file
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|file
operator|.
name|setLastModified
argument_list|(
name|time
operator|.
name|getTime
argument_list|()
argument_list|)
expr_stmt|;
name|SVNFileUtil
operator|.
name|setReadonly
argument_list|(
name|file
argument_list|,
literal|true
argument_list|)
expr_stmt|;
block|}
block|}
block|}
catch|catch
parameter_list|(
name|SVNException
name|svne
parameter_list|)
block|{
name|error
operator|=
name|svne
expr_stmt|;
block|}
block|}
if|else if
condition|(
name|SVNLog
operator|.
name|UPGRADE_FORMAT
operator|.
name|equals
argument_list|(
name|name
argument_list|)
condition|)
block|{
name|String
name|format
init|=
name|attributes
operator|.
name|getStringValue
argument_list|(
name|SVNLog
operator|.
name|FORMAT_ATTR
argument_list|)
decl_stmt|;
name|SVNErrorCode
name|code
init|=
name|count
operator|<=
literal|1
condition|?
name|SVNErrorCode
operator|.
name|WC_BAD_ADM_LOG_START
else|:
name|SVNErrorCode
operator|.
name|WC_BAD_ADM_LOG
decl_stmt|;
try|try
block|{
if|if
condition|(
name|format
operator|==
literal|null
condition|)
block|{
name|SVNErrorMessage
name|err
init|=
name|SVNErrorMessage
operator|.
name|create
argument_list|(
name|code
argument_list|,
literal|"Invalid 'format' attribute"
argument_list|)
decl_stmt|;
name|SVNErrorManager
operator|.
name|error
argument_list|(
name|err
argument_list|,
name|SVNLogType
operator|.
name|WC
argument_list|)
expr_stmt|;
block|}
name|int
name|number
init|=
operator|-
literal|1
decl_stmt|;
try|try
block|{
name|number
operator|=
name|Integer
operator|.
name|parseInt
argument_list|(
name|format
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|NumberFormatException
name|e
parameter_list|)
block|{
name|SVNErrorMessage
name|err
init|=
name|SVNErrorMessage
operator|.
name|create
argument_list|(
name|code
argument_list|,
literal|"Invalid 'format' attribute"
argument_list|)
decl_stmt|;
name|SVNErrorManager
operator|.
name|error
argument_list|(
name|err
argument_list|,
name|e
argument_list|,
name|SVNLogType
operator|.
name|WC
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|number
operator|==
literal|0
condition|)
block|{
name|SVNErrorMessage
name|err
init|=
name|SVNErrorMessage
operator|.
name|create
argument_list|(
name|code
argument_list|,
literal|"Invalid 'format' attribute"
argument_list|)
decl_stmt|;
name|SVNErrorManager
operator|.
name|error
argument_list|(
name|err
argument_list|,
name|SVNLogType
operator|.
name|WC
argument_list|)
expr_stmt|;
block|}
name|adminArea
operator|.
name|postUpgradeFormat
argument_list|(
name|number
argument_list|)
expr_stmt|;
name|setEntriesChanged
argument_list|(
literal|true
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|SVNException
name|svne
parameter_list|)
block|{
name|error
operator|=
name|svne
expr_stmt|;
block|}
block|}
if|else if
condition|(
name|SVNLog
operator|.
name|MAYBE_READONLY
operator|.
name|equals
argument_list|(
name|name
argument_list|)
condition|)
block|{
name|File
name|file
init|=
name|adminArea
operator|.
name|getFile
argument_list|(
name|fileName
argument_list|)
decl_stmt|;
try|try
block|{
name|SVNEntry
name|entry
init|=
name|adminArea
operator|.
name|getEntry
argument_list|(
name|fileName
argument_list|,
literal|false
argument_list|)
decl_stmt|;
if|if
condition|(
name|entry
operator|!=
literal|null
condition|)
block|{
name|adminArea
operator|.
name|closeVersionedProperties
argument_list|()
expr_stmt|;
name|SVNVersionedProperties
name|props
init|=
name|adminArea
operator|.
name|getProperties
argument_list|(
name|fileName
argument_list|)
decl_stmt|;
name|String
name|needsLock
init|=
name|props
operator|.
name|getStringPropertyValue
argument_list|(
name|SVNProperty
operator|.
name|NEEDS_LOCK
argument_list|)
decl_stmt|;
if|if
condition|(
name|entry
operator|.
name|getLockToken
argument_list|()
operator|==
literal|null
operator|&&
name|needsLock
operator|!=
literal|null
condition|)
block|{
name|SVNFileUtil
operator|.
name|setReadonly
argument_list|(
name|file
argument_list|,
literal|true
argument_list|)
expr_stmt|;
block|}
block|}
block|}
catch|catch
parameter_list|(
name|SVNException
name|svne
parameter_list|)
block|{
name|error
operator|=
name|svne
expr_stmt|;
block|}
block|}
if|else if
condition|(
name|SVNLog
operator|.
name|MAYBE_EXECUTABLE
operator|.
name|equals
argument_list|(
name|name
argument_list|)
condition|)
block|{
name|adminArea
operator|.
name|closeVersionedProperties
argument_list|()
expr_stmt|;
name|SVNVersionedProperties
name|props
init|=
name|adminArea
operator|.
name|getProperties
argument_list|(
name|fileName
argument_list|)
decl_stmt|;
name|boolean
name|executable
init|=
name|props
operator|.
name|getPropertyValue
argument_list|(
name|SVNProperty
operator|.
name|EXECUTABLE
argument_list|)
operator|!=
literal|null
decl_stmt|;
if|if
condition|(
name|executable
condition|)
block|{
name|SVNFileUtil
operator|.
name|setExecutable
argument_list|(
name|adminArea
operator|.
name|getFile
argument_list|(
name|fileName
argument_list|)
argument_list|,
literal|true
argument_list|)
expr_stmt|;
block|}
block|}
if|else if
condition|(
name|SVNLog
operator|.
name|COPY_AND_TRANSLATE
operator|.
name|equals
argument_list|(
name|name
argument_list|)
condition|)
block|{
name|String
name|dstName
init|=
name|attributes
operator|.
name|getStringValue
argument_list|(
name|SVNLog
operator|.
name|DEST_ATTR
argument_list|)
decl_stmt|;
name|String
name|versionedName
init|=
name|attributes
operator|.
name|getStringValue
argument_list|(
name|SVNLog
operator|.
name|ATTR2
argument_list|)
decl_stmt|;
if|if
condition|(
name|versionedName
operator|==
literal|null
condition|)
block|{
name|versionedName
operator|=
name|dstName
expr_stmt|;
block|}
name|File
name|src
init|=
name|adminArea
operator|.
name|getFile
argument_list|(
name|fileName
argument_list|)
decl_stmt|;
name|File
name|dst
init|=
name|adminArea
operator|.
name|getFile
argument_list|(
name|dstName
argument_list|)
decl_stmt|;
comment|//when performing a merge from a log runner we may have just set
comment|//new properties (log command that copies a new base prop file),
comment|//but probably we've got a non empty props cache which is no more
comment|//valid, so clean it up.
name|adminArea
operator|.
name|closeVersionedProperties
argument_list|()
expr_stmt|;
try|try
block|{
try|try
block|{
name|SVNTranslator
operator|.
name|translate
argument_list|(
name|adminArea
argument_list|,
name|versionedName
argument_list|,
name|src
argument_list|,
name|dst
argument_list|,
literal|null
argument_list|,
literal|true
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|SVNException
name|svne
parameter_list|)
block|{
if|if
condition|(
operator|!
name|myIsRerun
operator|||
name|src
operator|.
name|exists
argument_list|()
condition|)
block|{
throw|throw
name|svne
throw|;
block|}
block|}
comment|// get properties for this entry.
name|SVNVersionedProperties
name|props
init|=
name|adminArea
operator|.
name|getProperties
argument_list|(
name|dstName
argument_list|)
decl_stmt|;
name|boolean
name|executable
init|=
name|props
operator|.
name|getPropertyValue
argument_list|(
name|SVNProperty
operator|.
name|EXECUTABLE
argument_list|)
operator|!=
literal|null
decl_stmt|;
if|if
condition|(
name|executable
condition|)
block|{
name|SVNFileUtil
operator|.
name|setExecutable
argument_list|(
name|dst
argument_list|,
literal|true
argument_list|)
expr_stmt|;
block|}
name|SVNEntry
name|entry
init|=
name|adminArea
operator|.
name|getEntry
argument_list|(
name|dstName
argument_list|,
literal|false
argument_list|)
decl_stmt|;
if|if
condition|(
name|entry
operator|!=
literal|null
operator|&&
name|entry
operator|.
name|getLockToken
argument_list|()
operator|==
literal|null
operator|&&
name|props
operator|.
name|getPropertyValue
argument_list|(
name|SVNProperty
operator|.
name|NEEDS_LOCK
argument_list|)
operator|!=
literal|null
condition|)
block|{
name|SVNFileUtil
operator|.
name|setReadonly
argument_list|(
name|dst
argument_list|,
literal|true
argument_list|)
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
name|SVNException
name|svne
parameter_list|)
block|{
name|error
operator|=
name|svne
expr_stmt|;
block|}
block|}
if|else if
condition|(
name|SVNLog
operator|.
name|COPY_AND_DETRANSLATE
operator|.
name|equals
argument_list|(
name|name
argument_list|)
condition|)
block|{
name|String
name|dstName
init|=
name|attributes
operator|.
name|getStringValue
argument_list|(
name|SVNLog
operator|.
name|DEST_ATTR
argument_list|)
decl_stmt|;
name|String
name|versionedName
init|=
name|attributes
operator|.
name|getStringValue
argument_list|(
name|SVNLog
operator|.
name|ATTR2
argument_list|)
decl_stmt|;
name|adminArea
operator|.
name|closeVersionedProperties
argument_list|()
expr_stmt|;
try|try
block|{
name|SVNTranslator
operator|.
name|translate
argument_list|(
name|adminArea
argument_list|,
name|versionedName
operator|!=
literal|null
condition|?
name|versionedName
else|:
name|fileName
argument_list|,
name|fileName
argument_list|,
name|dstName
argument_list|,
literal|false
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|SVNException
name|svne
parameter_list|)
block|{
name|error
operator|=
name|svne
expr_stmt|;
block|}
block|}
if|else if
condition|(
name|SVNLog
operator|.
name|COPY
operator|.
name|equals
argument_list|(
name|name
argument_list|)
condition|)
block|{
name|File
name|src
init|=
name|adminArea
operator|.
name|getFile
argument_list|(
name|fileName
argument_list|)
decl_stmt|;
name|File
name|dst
init|=
name|adminArea
operator|.
name|getFile
argument_list|(
name|attributes
operator|.
name|getStringValue
argument_list|(
name|SVNLog
operator|.
name|DEST_ATTR
argument_list|)
argument_list|)
decl_stmt|;
try|try
block|{
name|SVNFileUtil
operator|.
name|copy
argument_list|(
name|src
argument_list|,
name|dst
argument_list|,
literal|true
argument_list|,
literal|false
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|SVNException
name|svne
parameter_list|)
block|{
name|error
operator|=
name|svne
expr_stmt|;
block|}
block|}
if|else if
condition|(
name|SVNLog
operator|.
name|ADD_TREE_CONFLICT
operator|.
name|equals
argument_list|(
name|name
argument_list|)
condition|)
block|{
name|File
name|dirPath
init|=
name|adminArea
operator|.
name|getRoot
argument_list|()
decl_stmt|;
name|String
name|conflictData
init|=
name|attributes
operator|.
name|getStringValue
argument_list|(
name|SVNLog
operator|.
name|DATA_ATTR
argument_list|)
decl_stmt|;
name|Map
name|newConflicts
init|=
name|SVNTreeConflictUtil
operator|.
name|readTreeConflicts
argument_list|(
name|dirPath
argument_list|,
name|conflictData
argument_list|)
decl_stmt|;
name|Object
index|[]
name|conflictArray
init|=
name|newConflicts
operator|.
name|values
argument_list|()
operator|.
name|toArray
argument_list|()
decl_stmt|;
name|SVNTreeConflictDescription
name|newConflict
init|=
operator|(
name|SVNTreeConflictDescription
operator|)
name|conflictArray
index|[
literal|0
index|]
decl_stmt|;
if|if
condition|(
operator|!
name|getTreeConflicts
argument_list|()
operator|.
name|containsKey
argument_list|(
name|newConflict
operator|.
name|getPath
argument_list|()
argument_list|)
condition|)
block|{
name|getTreeConflicts
argument_list|()
operator|.
name|put
argument_list|(
name|newConflict
operator|.
name|getPath
argument_list|()
argument_list|,
name|newConflict
argument_list|)
expr_stmt|;
name|setTreeConflictsAdded
argument_list|(
literal|true
argument_list|)
expr_stmt|;
block|}
block|}
if|else if
condition|(
name|SVNLog
operator|.
name|MERGE
operator|.
name|equals
argument_list|(
name|name
argument_list|)
condition|)
block|{
name|File
name|target
init|=
name|adminArea
operator|.
name|getFile
argument_list|(
name|fileName
argument_list|)
decl_stmt|;
try|try
block|{
name|SVNErrorCode
name|code
init|=
name|count
operator|<=
literal|1
condition|?
name|SVNErrorCode
operator|.
name|WC_BAD_ADM_LOG_START
else|:
name|SVNErrorCode
operator|.
name|WC_BAD_ADM_LOG
decl_stmt|;
name|String
name|leftPath
init|=
name|attributes
operator|.
name|getStringValue
argument_list|(
name|SVNLog
operator|.
name|ATTR1
argument_list|)
decl_stmt|;
if|if
condition|(
name|leftPath
operator|==
literal|null
condition|)
block|{
name|SVNErrorMessage
name|err
init|=
name|SVNErrorMessage
operator|.
name|create
argument_list|(
name|code
argument_list|,
literal|"Missing 'left' attribute in ''{0}''"
argument_list|,
name|adminArea
operator|.
name|getRoot
argument_list|()
argument_list|)
decl_stmt|;
name|SVNErrorManager
operator|.
name|error
argument_list|(
name|err
argument_list|,
name|SVNLogType
operator|.
name|WC
argument_list|)
expr_stmt|;
block|}
name|String
name|rightPath
init|=
name|attributes
operator|.
name|getStringValue
argument_list|(
name|SVNLog
operator|.
name|ATTR2
argument_list|)
decl_stmt|;
if|if
condition|(
name|rightPath
operator|==
literal|null
condition|)
block|{
name|SVNErrorMessage
name|err
init|=
name|SVNErrorMessage
operator|.
name|create
argument_list|(
name|code
argument_list|,
literal|"Missing 'right' attribute in ''{0}''"
argument_list|,
name|adminArea
operator|.
name|getRoot
argument_list|()
argument_list|)
decl_stmt|;
name|SVNErrorManager
operator|.
name|error
argument_list|(
name|err
argument_list|,
name|SVNLogType
operator|.
name|WC
argument_list|)
expr_stmt|;
block|}
name|String
name|leftLabel
init|=
name|attributes
operator|.
name|getStringValue
argument_list|(
name|SVNLog
operator|.
name|ATTR3
argument_list|)
decl_stmt|;
name|leftLabel
operator|=
name|leftLabel
operator|==
literal|null
condition|?
literal|".old"
else|:
name|leftLabel
expr_stmt|;
name|String
name|rightLabel
init|=
name|attributes
operator|.
name|getStringValue
argument_list|(
name|SVNLog
operator|.
name|ATTR4
argument_list|)
decl_stmt|;
name|rightLabel
operator|=
name|rightLabel
operator|==
literal|null
condition|?
literal|".new"
else|:
name|rightLabel
expr_stmt|;
name|String
name|targetLabel
init|=
name|attributes
operator|.
name|getStringValue
argument_list|(
name|SVNLog
operator|.
name|ATTR5
argument_list|)
decl_stmt|;
name|targetLabel
operator|=
name|targetLabel
operator|==
literal|null
condition|?
literal|".working"
else|:
name|targetLabel
expr_stmt|;
comment|//when performing a merge from a log runner we may have just set
comment|//new properties (log command that copies a new base prop file),
comment|//but probably we've got a non empty props cache which is no more
comment|//valid, so clean it up.
name|adminArea
operator|.
name|closeVersionedProperties
argument_list|()
expr_stmt|;
name|SVNVersionedProperties
name|props
init|=
name|adminArea
operator|.
name|getProperties
argument_list|(
name|fileName
argument_list|)
decl_stmt|;
name|SVNEntry
name|entry
init|=
name|adminArea
operator|.
name|getEntry
argument_list|(
name|fileName
argument_list|,
literal|true
argument_list|)
decl_stmt|;
name|SVNStatusType
name|mergeResult
init|=
name|adminArea
operator|.
name|mergeText
argument_list|(
name|fileName
argument_list|,
name|adminArea
operator|.
name|getFile
argument_list|(
name|leftPath
argument_list|)
argument_list|,
name|adminArea
operator|.
name|getFile
argument_list|(
name|rightPath
argument_list|)
argument_list|,
literal|null
argument_list|,
name|targetLabel
argument_list|,
name|leftLabel
argument_list|,
name|rightLabel
argument_list|,
literal|null
argument_list|,
literal|false
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|)
decl_stmt|;
if|if
condition|(
name|props
operator|.
name|getPropertyValue
argument_list|(
name|SVNProperty
operator|.
name|EXECUTABLE
argument_list|)
operator|!=
literal|null
condition|)
block|{
name|SVNFileUtil
operator|.
name|setExecutable
argument_list|(
name|target
argument_list|,
literal|true
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|props
operator|.
name|getPropertyValue
argument_list|(
name|SVNProperty
operator|.
name|NEEDS_LOCK
argument_list|)
operator|!=
literal|null
operator|&&
name|entry
operator|.
name|getLockToken
argument_list|()
operator|==
literal|null
condition|)
block|{
name|SVNFileUtil
operator|.
name|setReadonly
argument_list|(
name|target
argument_list|,
literal|true
argument_list|)
expr_stmt|;
block|}
name|setEntriesChanged
argument_list|(
name|mergeResult
operator|==
name|SVNStatusType
operator|.
name|CONFLICTED
operator|||
name|mergeResult
operator|==
name|SVNStatusType
operator|.
name|CONFLICTED_UNRESOLVED
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|SVNException
name|svne
parameter_list|)
block|{
name|error
operator|=
name|svne
expr_stmt|;
if|if
condition|(
name|myIsRerun
operator|&&
operator|(
name|svne
operator|.
name|getCause
argument_list|()
operator|instanceof
name|FileNotFoundException
operator|)
condition|)
block|{
name|error
operator|=
literal|null
expr_stmt|;
block|}
block|}
block|}
if|else if
condition|(
name|SVNLog
operator|.
name|COMMIT
operator|.
name|equals
argument_list|(
name|name
argument_list|)
condition|)
block|{
try|try
block|{
name|SVNErrorCode
name|code
init|=
name|count
operator|<=
literal|1
condition|?
name|SVNErrorCode
operator|.
name|WC_BAD_ADM_LOG_START
else|:
name|SVNErrorCode
operator|.
name|WC_BAD_ADM_LOG
decl_stmt|;
if|if
condition|(
name|attributes
operator|.
name|getStringValue
argument_list|(
name|SVNLog
operator|.
name|REVISION_ATTR
argument_list|)
operator|==
literal|null
condition|)
block|{
name|SVNErrorMessage
name|err
init|=
name|SVNErrorMessage
operator|.
name|create
argument_list|(
name|code
argument_list|,
literal|"Missing revision attribute for ''{0}''"
argument_list|,
name|fileName
argument_list|)
decl_stmt|;
name|SVNErrorManager
operator|.
name|error
argument_list|(
name|err
argument_list|,
name|SVNLogType
operator|.
name|WC
argument_list|)
expr_stmt|;
block|}
name|SVNEntry
name|entry
init|=
name|adminArea
operator|.
name|getEntry
argument_list|(
name|fileName
argument_list|,
literal|true
argument_list|)
decl_stmt|;
if|if
condition|(
name|myIsRerun
operator|&&
operator|(
name|entry
operator|==
literal|null
operator|||
operator|(
name|entry
operator|.
name|isScheduledForDeletion
argument_list|()
operator|&&
name|entry
operator|.
name|isDeleted
argument_list|()
operator|)
operator|)
condition|)
block|{
comment|// skip without an error
block|}
else|else
block|{
if|if
condition|(
name|entry
operator|==
literal|null
operator|||
operator|(
operator|!
name|adminArea
operator|.
name|getThisDirName
argument_list|()
operator|.
name|equals
argument_list|(
name|fileName
argument_list|)
operator|&&
name|entry
operator|.
name|getKind
argument_list|()
operator|!=
name|SVNNodeKind
operator|.
name|FILE
operator|)
condition|)
block|{
name|SVNErrorMessage
name|err
init|=
name|SVNErrorMessage
operator|.
name|create
argument_list|(
name|code
argument_list|,
literal|"Log command for directory ''{0}'' is mislocated"
argument_list|,
name|adminArea
operator|.
name|getRoot
argument_list|()
argument_list|)
decl_stmt|;
name|SVNErrorManager
operator|.
name|error
argument_list|(
name|err
argument_list|,
name|SVNLogType
operator|.
name|WC
argument_list|)
expr_stmt|;
block|}
name|boolean
name|implicit
init|=
name|attributes
operator|.
name|getStringValue
argument_list|(
literal|"implicit"
argument_list|)
operator|!=
literal|null
operator|&&
name|entry
operator|.
name|isCopied
argument_list|()
decl_stmt|;
name|setEntriesChanged
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|long
name|revisionNumber
init|=
operator|-
literal|1
decl_stmt|;
try|try
block|{
name|revisionNumber
operator|=
name|Long
operator|.
name|parseLong
argument_list|(
name|attributes
operator|.
name|getStringValue
argument_list|(
name|SVNLog
operator|.
name|REVISION_ATTR
argument_list|)
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|NumberFormatException
name|nfe
parameter_list|)
block|{
name|SVNErrorManager
operator|.
name|error
argument_list|(
name|SVNErrorMessage
operator|.
name|create
argument_list|(
name|SVNErrorCode
operator|.
name|WC_BAD_ADM_LOG
argument_list|,
name|nfe
argument_list|)
argument_list|,
name|SVNLogType
operator|.
name|WC
argument_list|)
expr_stmt|;
block|}
name|adminArea
operator|.
name|postCommit
argument_list|(
name|fileName
argument_list|,
name|revisionNumber
argument_list|,
name|implicit
argument_list|,
name|myIsRerun
argument_list|,
name|code
argument_list|)
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
name|SVNException
name|svne
parameter_list|)
block|{
name|error
operator|=
name|svne
expr_stmt|;
block|}
block|}
else|else
block|{
name|SVNErrorCode
name|code
init|=
name|count
operator|<=
literal|1
condition|?
name|SVNErrorCode
operator|.
name|WC_BAD_ADM_LOG_START
else|:
name|SVNErrorCode
operator|.
name|WC_BAD_ADM_LOG
decl_stmt|;
name|SVNErrorMessage
name|err
init|=
name|SVNErrorMessage
operator|.
name|create
argument_list|(
name|code
argument_list|,
literal|"Unrecognized logfile element ''{0}'' in ''{1}''"
argument_list|,
operator|new
name|Object
index|[]
block|{
name|name
block|,
name|adminArea
operator|.
name|getRoot
argument_list|()
block|}
argument_list|)
decl_stmt|;
name|SVNErrorManager
operator|.
name|error
argument_list|(
name|err
operator|.
name|wrap
argument_list|(
literal|"In directory ''{0}''"
argument_list|,
name|adminArea
operator|.
name|getRoot
argument_list|()
argument_list|)
argument_list|,
name|SVNLogType
operator|.
name|WC
argument_list|)
expr_stmt|;
block|}
name|myLogCount
operator|=
name|count
expr_stmt|;
if|if
condition|(
name|error
operator|!=
literal|null
condition|)
block|{
name|SVNErrorCode
name|code
init|=
name|count
operator|<=
literal|1
condition|?
name|SVNErrorCode
operator|.
name|WC_BAD_ADM_LOG_START
else|:
name|SVNErrorCode
operator|.
name|WC_BAD_ADM_LOG
decl_stmt|;
name|SVNErrorMessage
name|err
init|=
name|SVNErrorMessage
operator|.
name|create
argument_list|(
name|code
argument_list|,
literal|"Error processing command ''{0}'' in ''{1}''"
argument_list|,
operator|new
name|Object
index|[]
block|{
name|name
block|,
name|adminArea
operator|.
name|getRoot
argument_list|()
block|}
argument_list|)
decl_stmt|;
name|SVNErrorManager
operator|.
name|error
argument_list|(
name|err
argument_list|,
name|error
argument_list|,
name|SVNLogType
operator|.
name|WC
argument_list|)
expr_stmt|;
block|}
block|}
specifier|private
name|void
name|setTreeConflictsAdded
parameter_list|(
name|boolean
name|added
parameter_list|)
block|{
name|myHasAddedTreeConflicts
operator||=
name|added
expr_stmt|;
block|}
specifier|private
name|void
name|setEntriesChanged
parameter_list|(
name|boolean
name|modified
parameter_list|)
block|{
name|myIsEntriesChanged
operator||=
name|modified
expr_stmt|;
block|}
specifier|private
name|void
name|setWCPropertiesChanged
parameter_list|(
name|boolean
name|modified
parameter_list|)
block|{
name|myIsWCPropertiesChanged
operator||=
name|modified
expr_stmt|;
block|}
specifier|private
name|void
name|saveTreeConflicts
parameter_list|(
name|SVNAdminArea
name|adminArea
parameter_list|)
throws|throws
name|SVNException
block|{
name|Map
name|attributes
init|=
operator|new
name|SVNHashMap
argument_list|()
decl_stmt|;
name|String
name|conflictData
init|=
name|SVNTreeConflictUtil
operator|.
name|getTreeConflictData
argument_list|(
name|getTreeConflicts
argument_list|()
argument_list|)
decl_stmt|;
name|attributes
operator|.
name|put
argument_list|(
name|SVNProperty
operator|.
name|TREE_CONFLICT_DATA
argument_list|,
name|conflictData
argument_list|)
expr_stmt|;
try|try
block|{
name|adminArea
operator|.
name|modifyEntry
argument_list|(
name|adminArea
operator|.
name|getThisDirName
argument_list|()
argument_list|,
name|attributes
argument_list|,
literal|false
argument_list|,
literal|false
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|SVNException
name|e
parameter_list|)
block|{
name|SVNErrorCode
name|errorCode
init|=
name|myLogCount
operator|<=
literal|1
condition|?
name|SVNErrorCode
operator|.
name|WC_BAD_ADM_LOG_START
else|:
name|SVNErrorCode
operator|.
name|WC_BAD_ADM_LOG
decl_stmt|;
name|SVNErrorMessage
name|error
init|=
name|SVNErrorMessage
operator|.
name|create
argument_list|(
name|errorCode
argument_list|,
literal|"Error recording tree conflicts in ''{0}''"
argument_list|,
name|adminArea
operator|.
name|getRoot
argument_list|()
argument_list|)
decl_stmt|;
name|SVNErrorManager
operator|.
name|error
argument_list|(
name|error
argument_list|,
name|e
argument_list|,
name|SVNLogType
operator|.
name|WC
argument_list|)
expr_stmt|;
block|}
name|myIsEntriesChanged
operator|=
literal|true
expr_stmt|;
block|}
specifier|public
name|void
name|logStarted
parameter_list|(
name|SVNAdminArea
name|adminArea
parameter_list|)
throws|throws
name|SVNException
block|{
name|SVNEntry
name|dirEntry
init|=
name|adminArea
operator|.
name|getEntry
argument_list|(
name|adminArea
operator|.
name|getThisDirName
argument_list|()
argument_list|,
literal|false
argument_list|)
decl_stmt|;
name|Map
name|currentConflicts
init|=
name|dirEntry
operator|.
name|getTreeConflicts
argument_list|()
decl_stmt|;
if|if
condition|(
name|currentConflicts
operator|!=
literal|null
condition|)
block|{
name|getTreeConflicts
argument_list|()
operator|.
name|putAll
argument_list|(
name|currentConflicts
argument_list|)
expr_stmt|;
block|}
name|myHasAddedTreeConflicts
operator|=
literal|false
expr_stmt|;
name|myLogCount
operator|=
literal|0
expr_stmt|;
block|}
specifier|public
name|void
name|logFailed
parameter_list|(
name|SVNAdminArea
name|adminArea
parameter_list|)
throws|throws
name|SVNException
block|{
if|if
condition|(
name|myHasAddedTreeConflicts
condition|)
block|{
name|saveTreeConflicts
argument_list|(
name|adminArea
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|myIsWCPropertiesChanged
condition|)
block|{
name|adminArea
operator|.
name|saveWCProperties
argument_list|(
literal|true
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|adminArea
operator|.
name|closeWCProperties
argument_list|()
expr_stmt|;
block|}
if|if
condition|(
name|myIsEntriesChanged
condition|)
block|{
name|adminArea
operator|.
name|saveEntries
argument_list|(
literal|false
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|adminArea
operator|.
name|closeEntries
argument_list|()
expr_stmt|;
block|}
name|myLogCount
operator|=
literal|0
expr_stmt|;
block|}
specifier|public
name|void
name|logCompleted
parameter_list|(
name|SVNAdminArea
name|adminArea
parameter_list|)
throws|throws
name|SVNException
block|{
if|if
condition|(
name|myHasAddedTreeConflicts
condition|)
block|{
name|saveTreeConflicts
argument_list|(
name|adminArea
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|myIsWCPropertiesChanged
condition|)
block|{
name|adminArea
operator|.
name|saveWCProperties
argument_list|(
literal|true
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|myIsEntriesChanged
condition|)
block|{
name|adminArea
operator|.
name|saveEntries
argument_list|(
literal|false
argument_list|)
expr_stmt|;
block|}
name|adminArea
operator|.
name|handleKillMe
argument_list|()
expr_stmt|;
name|myIsEntriesChanged
operator|=
literal|false
expr_stmt|;
name|myIsWCPropertiesChanged
operator|=
literal|false
expr_stmt|;
name|myHasAddedTreeConflicts
operator|=
literal|false
expr_stmt|;
name|myLogCount
operator|=
literal|0
expr_stmt|;
block|}
block|}
end_class

end_unit

