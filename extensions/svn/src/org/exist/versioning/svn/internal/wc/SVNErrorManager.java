begin_unit|revision:1.0.0;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * ====================================================================  * Copyright (c) 2004-2010 TMate Software Ltd.  All rights reserved.  *  * This software is licensed as described in the file COPYING, which  * you should have received as part of this distribution.  The terms  * are also available at http://svnkit.com/license.html  * If newer versions of this license are posted there, you may use a  * newer version instead, at your option.  * ====================================================================  */
end_comment

begin_package
package|package
name|org
operator|.
name|exist
operator|.
name|versioning
operator|.
name|svn
operator|.
name|internal
operator|.
name|wc
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|logging
operator|.
name|Level
import|;
end_import

begin_import
import|import
name|org
operator|.
name|tmatesoft
operator|.
name|svn
operator|.
name|core
operator|.
name|SVNAuthenticationException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|tmatesoft
operator|.
name|svn
operator|.
name|core
operator|.
name|SVNCancelException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|tmatesoft
operator|.
name|svn
operator|.
name|core
operator|.
name|SVNErrorCode
import|;
end_import

begin_import
import|import
name|org
operator|.
name|tmatesoft
operator|.
name|svn
operator|.
name|core
operator|.
name|SVNErrorMessage
import|;
end_import

begin_import
import|import
name|org
operator|.
name|tmatesoft
operator|.
name|svn
operator|.
name|core
operator|.
name|SVNException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|tmatesoft
operator|.
name|svn
operator|.
name|util
operator|.
name|SVNDebugLog
import|;
end_import

begin_import
import|import
name|org
operator|.
name|tmatesoft
operator|.
name|svn
operator|.
name|util
operator|.
name|SVNLogType
import|;
end_import

begin_comment
comment|/**  * @version 1.3  * @author  TMate Software Ltd.  */
end_comment

begin_class
specifier|public
class|class
name|SVNErrorManager
block|{
specifier|public
specifier|static
name|void
name|cancel
parameter_list|(
name|String
name|message
parameter_list|,
name|SVNLogType
name|logType
parameter_list|)
throws|throws
name|SVNCancelException
block|{
name|cancel
argument_list|(
name|message
argument_list|,
name|Level
operator|.
name|FINE
argument_list|,
name|logType
argument_list|)
expr_stmt|;
block|}
specifier|public
specifier|static
name|void
name|cancel
parameter_list|(
name|String
name|message
parameter_list|,
name|Level
name|logLevel
parameter_list|,
name|SVNLogType
name|logType
parameter_list|)
throws|throws
name|SVNCancelException
block|{
name|SVNDebugLog
operator|.
name|getDefaultLog
argument_list|()
operator|.
name|log
argument_list|(
name|logType
argument_list|,
name|message
argument_list|,
name|logLevel
argument_list|)
expr_stmt|;
throw|throw
operator|new
name|SVNCancelException
argument_list|(
name|SVNErrorMessage
operator|.
name|create
argument_list|(
name|SVNErrorCode
operator|.
name|CANCELLED
argument_list|,
name|message
argument_list|)
argument_list|)
throw|;
block|}
specifier|public
specifier|static
name|void
name|authenticationFailed
parameter_list|(
name|String
name|message
parameter_list|,
name|Object
name|messageObject
parameter_list|)
throws|throws
name|SVNAuthenticationException
block|{
name|authenticationFailed
argument_list|(
name|message
argument_list|,
name|messageObject
argument_list|,
name|Level
operator|.
name|FINE
argument_list|)
expr_stmt|;
block|}
specifier|public
specifier|static
name|void
name|authenticationFailed
parameter_list|(
name|String
name|message
parameter_list|,
name|Object
name|messageObject
parameter_list|,
name|Level
name|logLevel
parameter_list|)
throws|throws
name|SVNAuthenticationException
block|{
name|SVNErrorMessage
name|err
init|=
name|SVNErrorMessage
operator|.
name|create
argument_list|(
name|SVNErrorCode
operator|.
name|RA_NOT_AUTHORIZED
argument_list|,
name|message
argument_list|,
name|messageObject
argument_list|)
decl_stmt|;
name|SVNDebugLog
operator|.
name|getDefaultLog
argument_list|()
operator|.
name|log
argument_list|(
name|SVNLogType
operator|.
name|NETWORK
argument_list|,
name|err
operator|.
name|getMessage
argument_list|()
argument_list|,
name|logLevel
argument_list|)
expr_stmt|;
throw|throw
operator|new
name|SVNAuthenticationException
argument_list|(
name|err
argument_list|)
throw|;
block|}
specifier|public
specifier|static
name|void
name|error
parameter_list|(
name|SVNErrorMessage
name|err
parameter_list|,
name|SVNLogType
name|logType
parameter_list|)
throws|throws
name|SVNException
block|{
name|error
argument_list|(
name|err
argument_list|,
name|Level
operator|.
name|FINE
argument_list|,
name|logType
argument_list|)
expr_stmt|;
block|}
specifier|public
specifier|static
name|void
name|error
parameter_list|(
name|SVNErrorMessage
name|err
parameter_list|,
name|Level
name|logLevel
parameter_list|,
name|SVNLogType
name|logType
parameter_list|)
throws|throws
name|SVNException
block|{
if|if
condition|(
name|err
operator|==
literal|null
condition|)
block|{
name|err
operator|=
name|SVNErrorMessage
operator|.
name|create
argument_list|(
name|SVNErrorCode
operator|.
name|UNKNOWN
argument_list|)
expr_stmt|;
block|}
name|SVNDebugLog
operator|.
name|getDefaultLog
argument_list|()
operator|.
name|log
argument_list|(
name|logType
argument_list|,
name|err
operator|.
name|getFullMessage
argument_list|()
argument_list|,
name|logLevel
argument_list|)
expr_stmt|;
if|if
condition|(
name|err
operator|.
name|getErrorCode
argument_list|()
operator|==
name|SVNErrorCode
operator|.
name|CANCELLED
condition|)
block|{
throw|throw
operator|new
name|SVNCancelException
argument_list|(
name|err
argument_list|)
throw|;
block|}
if|else if
condition|(
name|err
operator|.
name|getErrorCode
argument_list|()
operator|.
name|isAuthentication
argument_list|()
condition|)
block|{
throw|throw
operator|new
name|SVNAuthenticationException
argument_list|(
name|err
argument_list|)
throw|;
block|}
else|else
block|{
throw|throw
operator|new
name|SVNException
argument_list|(
name|err
argument_list|)
throw|;
block|}
block|}
specifier|public
specifier|static
name|void
name|error
parameter_list|(
name|SVNErrorMessage
name|err
parameter_list|,
name|Throwable
name|cause
parameter_list|,
name|SVNLogType
name|logType
parameter_list|)
throws|throws
name|SVNException
block|{
name|error
argument_list|(
name|err
argument_list|,
name|cause
argument_list|,
name|Level
operator|.
name|FINE
argument_list|,
name|logType
argument_list|)
expr_stmt|;
block|}
specifier|public
specifier|static
name|void
name|error
parameter_list|(
name|SVNErrorMessage
name|err
parameter_list|,
name|Throwable
name|cause
parameter_list|,
name|Level
name|logLevel
parameter_list|,
name|SVNLogType
name|logType
parameter_list|)
throws|throws
name|SVNException
block|{
if|if
condition|(
name|err
operator|==
literal|null
condition|)
block|{
name|err
operator|=
name|SVNErrorMessage
operator|.
name|create
argument_list|(
name|SVNErrorCode
operator|.
name|UNKNOWN
argument_list|)
expr_stmt|;
block|}
name|SVNDebugLog
operator|.
name|getDefaultLog
argument_list|()
operator|.
name|log
argument_list|(
name|logType
argument_list|,
name|err
operator|.
name|getMessage
argument_list|()
argument_list|,
name|logLevel
argument_list|)
expr_stmt|;
if|if
condition|(
name|cause
operator|!=
literal|null
condition|)
block|{
name|SVNDebugLog
operator|.
name|getDefaultLog
argument_list|()
operator|.
name|log
argument_list|(
name|logType
argument_list|,
name|cause
argument_list|,
name|logLevel
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|err
operator|.
name|getErrorCode
argument_list|()
operator|==
name|SVNErrorCode
operator|.
name|CANCELLED
condition|)
block|{
throw|throw
operator|new
name|SVNCancelException
argument_list|(
name|err
argument_list|)
throw|;
block|}
if|else if
condition|(
name|err
operator|.
name|getErrorCode
argument_list|()
operator|.
name|isAuthentication
argument_list|()
condition|)
block|{
throw|throw
operator|new
name|SVNAuthenticationException
argument_list|(
name|err
argument_list|)
throw|;
block|}
else|else
block|{
throw|throw
operator|new
name|SVNException
argument_list|(
name|err
argument_list|,
name|cause
argument_list|)
throw|;
block|}
block|}
specifier|public
specifier|static
name|void
name|error
parameter_list|(
name|SVNErrorMessage
name|err1
parameter_list|,
name|SVNErrorMessage
name|err2
parameter_list|,
name|SVNLogType
name|logType
parameter_list|)
throws|throws
name|SVNException
block|{
name|error
argument_list|(
name|err1
argument_list|,
name|err2
argument_list|,
name|Level
operator|.
name|FINE
argument_list|,
name|logType
argument_list|)
expr_stmt|;
block|}
specifier|public
specifier|static
name|void
name|error
parameter_list|(
name|SVNErrorMessage
name|err1
parameter_list|,
name|SVNErrorMessage
name|err2
parameter_list|,
name|Level
name|logLevel
parameter_list|,
name|SVNLogType
name|logType
parameter_list|)
throws|throws
name|SVNException
block|{
if|if
condition|(
name|err1
operator|==
literal|null
condition|)
block|{
name|error
argument_list|(
name|err2
argument_list|,
name|logLevel
argument_list|,
name|logType
argument_list|)
expr_stmt|;
block|}
if|else if
condition|(
name|err2
operator|==
literal|null
condition|)
block|{
name|error
argument_list|(
name|err1
argument_list|,
name|logLevel
argument_list|,
name|logType
argument_list|)
expr_stmt|;
block|}
name|err1
operator|.
name|setChildErrorMessage
argument_list|(
name|err2
argument_list|)
expr_stmt|;
name|SVNDebugLog
operator|.
name|getDefaultLog
argument_list|()
operator|.
name|log
argument_list|(
name|logType
argument_list|,
name|err1
operator|.
name|getMessage
argument_list|()
argument_list|,
name|logLevel
argument_list|)
expr_stmt|;
if|if
condition|(
name|err1
operator|.
name|getErrorCode
argument_list|()
operator|==
name|SVNErrorCode
operator|.
name|CANCELLED
operator|||
name|err2
operator|.
name|getErrorCode
argument_list|()
operator|==
name|SVNErrorCode
operator|.
name|CANCELLED
condition|)
block|{
throw|throw
operator|new
name|SVNCancelException
argument_list|(
name|err1
argument_list|)
throw|;
block|}
if|else if
condition|(
name|err1
operator|.
name|getErrorCode
argument_list|()
operator|.
name|isAuthentication
argument_list|()
operator|||
name|err2
operator|.
name|getErrorCode
argument_list|()
operator|.
name|isAuthentication
argument_list|()
condition|)
block|{
throw|throw
operator|new
name|SVNAuthenticationException
argument_list|(
name|err1
argument_list|)
throw|;
block|}
throw|throw
operator|new
name|SVNException
argument_list|(
name|err1
argument_list|)
throw|;
block|}
specifier|public
specifier|static
name|void
name|error
parameter_list|(
name|SVNErrorMessage
name|err1
parameter_list|,
name|SVNErrorMessage
name|err2
parameter_list|,
name|Throwable
name|cause
parameter_list|,
name|SVNLogType
name|logType
parameter_list|)
throws|throws
name|SVNException
block|{
name|error
argument_list|(
name|err1
argument_list|,
name|err2
argument_list|,
name|cause
argument_list|,
name|Level
operator|.
name|FINE
argument_list|,
name|logType
argument_list|)
expr_stmt|;
block|}
specifier|public
specifier|static
name|void
name|error
parameter_list|(
name|SVNErrorMessage
name|err1
parameter_list|,
name|SVNErrorMessage
name|err2
parameter_list|,
name|Throwable
name|cause
parameter_list|,
name|Level
name|logLevel
parameter_list|,
name|SVNLogType
name|logType
parameter_list|)
throws|throws
name|SVNException
block|{
if|if
condition|(
name|err1
operator|==
literal|null
condition|)
block|{
name|error
argument_list|(
name|err2
argument_list|,
name|cause
argument_list|,
name|logLevel
argument_list|,
name|logType
argument_list|)
expr_stmt|;
block|}
if|else if
condition|(
name|err2
operator|==
literal|null
condition|)
block|{
name|error
argument_list|(
name|err1
argument_list|,
name|cause
argument_list|,
name|logLevel
argument_list|,
name|logType
argument_list|)
expr_stmt|;
block|}
name|err1
operator|.
name|setChildErrorMessage
argument_list|(
name|err2
argument_list|)
expr_stmt|;
name|SVNDebugLog
operator|.
name|getDefaultLog
argument_list|()
operator|.
name|log
argument_list|(
name|logType
argument_list|,
name|err1
operator|.
name|getMessage
argument_list|()
argument_list|,
name|logLevel
argument_list|)
expr_stmt|;
if|if
condition|(
name|err1
operator|.
name|getErrorCode
argument_list|()
operator|==
name|SVNErrorCode
operator|.
name|CANCELLED
operator|||
name|err2
operator|.
name|getErrorCode
argument_list|()
operator|==
name|SVNErrorCode
operator|.
name|CANCELLED
condition|)
block|{
throw|throw
operator|new
name|SVNCancelException
argument_list|(
name|err1
argument_list|)
throw|;
block|}
if|else if
condition|(
name|err1
operator|.
name|getErrorCode
argument_list|()
operator|.
name|isAuthentication
argument_list|()
operator|||
name|err2
operator|.
name|getErrorCode
argument_list|()
operator|.
name|isAuthentication
argument_list|()
condition|)
block|{
throw|throw
operator|new
name|SVNAuthenticationException
argument_list|(
name|err1
argument_list|,
name|cause
argument_list|)
throw|;
block|}
throw|throw
operator|new
name|SVNException
argument_list|(
name|err1
argument_list|,
name|cause
argument_list|)
throw|;
block|}
block|}
end_class

end_unit

