begin_unit|revision:1.0.0;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * ====================================================================  * Copyright (c) 2004-2010 TMate Software Ltd.  All rights reserved.  *  * This software is licensed as described in the file COPYING, which  * you should have received as part of this distribution.  The terms  * are also available at http://svnkit.com/license.html.  * If newer versions of this license are posted there, you may use a  * newer version instead, at your option.  * ====================================================================  */
end_comment

begin_package
package|package
name|org
operator|.
name|exist
operator|.
name|versioning
operator|.
name|svn
operator|.
name|internal
operator|.
name|wc
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|OutputStream
import|;
end_import

begin_import
import|import
name|org
operator|.
name|tmatesoft
operator|.
name|svn
operator|.
name|core
operator|.
name|SVNCommitInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|tmatesoft
operator|.
name|svn
operator|.
name|core
operator|.
name|SVNDepth
import|;
end_import

begin_import
import|import
name|org
operator|.
name|tmatesoft
operator|.
name|svn
operator|.
name|core
operator|.
name|SVNErrorCode
import|;
end_import

begin_import
import|import
name|org
operator|.
name|tmatesoft
operator|.
name|svn
operator|.
name|core
operator|.
name|SVNErrorMessage
import|;
end_import

begin_import
import|import
name|org
operator|.
name|tmatesoft
operator|.
name|svn
operator|.
name|core
operator|.
name|SVNException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|tmatesoft
operator|.
name|svn
operator|.
name|core
operator|.
name|SVNNodeKind
import|;
end_import

begin_import
import|import
name|org
operator|.
name|tmatesoft
operator|.
name|svn
operator|.
name|core
operator|.
name|SVNPropertyValue
import|;
end_import

begin_import
import|import
name|org
operator|.
name|tmatesoft
operator|.
name|svn
operator|.
name|core
operator|.
name|io
operator|.
name|ISVNEditor
import|;
end_import

begin_import
import|import
name|org
operator|.
name|tmatesoft
operator|.
name|svn
operator|.
name|core
operator|.
name|io
operator|.
name|diff
operator|.
name|SVNDiffWindow
import|;
end_import

begin_import
import|import
name|org
operator|.
name|tmatesoft
operator|.
name|svn
operator|.
name|util
operator|.
name|SVNLogType
import|;
end_import

begin_comment
comment|/**  * @version 1.3  * @author  TMate Software Ltd.  */
end_comment

begin_class
specifier|public
class|class
name|SVNDepthFilterEditor
implements|implements
name|ISVNEditor
block|{
specifier|private
name|ISVNEditor
name|myDelegate
decl_stmt|;
specifier|private
name|SVNDepth
name|myRequestedDepth
decl_stmt|;
specifier|private
name|boolean
name|myHasTarget
decl_stmt|;
specifier|private
name|NodeBaton
name|myCurrentNodeBaton
decl_stmt|;
specifier|private
name|SVNDepthFilterEditor
parameter_list|(
name|SVNDepth
name|depth
parameter_list|,
name|ISVNEditor
name|delegate
parameter_list|,
name|boolean
name|hasTarget
parameter_list|)
block|{
name|myRequestedDepth
operator|=
name|depth
expr_stmt|;
name|myDelegate
operator|=
name|delegate
expr_stmt|;
name|myHasTarget
operator|=
name|hasTarget
expr_stmt|;
block|}
specifier|public
name|void
name|abortEdit
parameter_list|()
throws|throws
name|SVNException
block|{
block|}
specifier|public
name|void
name|absentDir
parameter_list|(
name|String
name|path
parameter_list|)
throws|throws
name|SVNException
block|{
if|if
condition|(
operator|!
name|myCurrentNodeBaton
operator|.
name|myIsFiltered
condition|)
block|{
name|myDelegate
operator|.
name|absentDir
argument_list|(
name|path
argument_list|)
expr_stmt|;
block|}
block|}
specifier|public
name|void
name|absentFile
parameter_list|(
name|String
name|path
parameter_list|)
throws|throws
name|SVNException
block|{
if|if
condition|(
operator|!
name|myCurrentNodeBaton
operator|.
name|myIsFiltered
condition|)
block|{
name|myDelegate
operator|.
name|absentFile
argument_list|(
name|path
argument_list|)
expr_stmt|;
block|}
block|}
specifier|public
name|void
name|addDir
parameter_list|(
name|String
name|path
parameter_list|,
name|String
name|copyFromPath
parameter_list|,
name|long
name|copyFromRevision
parameter_list|)
throws|throws
name|SVNException
block|{
name|NodeBaton
name|childNodeBaton
init|=
literal|null
decl_stmt|;
if|if
condition|(
name|myCurrentNodeBaton
operator|.
name|canEdit
argument_list|(
name|SVNNodeKind
operator|.
name|DIR
argument_list|)
condition|)
block|{
name|childNodeBaton
operator|=
operator|new
name|NodeBaton
argument_list|(
literal|false
argument_list|,
name|myCurrentNodeBaton
operator|.
name|myDirDepth
operator|+
literal|1
argument_list|,
name|myCurrentNodeBaton
argument_list|)
expr_stmt|;
name|myDelegate
operator|.
name|addDir
argument_list|(
name|path
argument_list|,
name|copyFromPath
argument_list|,
name|copyFromRevision
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|childNodeBaton
operator|=
operator|new
name|NodeBaton
argument_list|(
literal|true
argument_list|,
name|myCurrentNodeBaton
operator|.
name|myDirDepth
operator|+
literal|1
argument_list|,
name|myCurrentNodeBaton
argument_list|)
expr_stmt|;
block|}
name|myCurrentNodeBaton
operator|=
name|childNodeBaton
expr_stmt|;
block|}
specifier|public
name|void
name|addFile
parameter_list|(
name|String
name|path
parameter_list|,
name|String
name|copyFromPath
parameter_list|,
name|long
name|copyFromRevision
parameter_list|)
throws|throws
name|SVNException
block|{
name|NodeBaton
name|childNodeBaton
init|=
literal|null
decl_stmt|;
if|if
condition|(
name|myCurrentNodeBaton
operator|.
name|canEdit
argument_list|(
name|SVNNodeKind
operator|.
name|FILE
argument_list|)
condition|)
block|{
name|childNodeBaton
operator|=
operator|new
name|NodeBaton
argument_list|(
literal|false
argument_list|,
name|myCurrentNodeBaton
operator|.
name|myDirDepth
argument_list|,
name|myCurrentNodeBaton
argument_list|)
expr_stmt|;
name|myDelegate
operator|.
name|addFile
argument_list|(
name|path
argument_list|,
name|copyFromPath
argument_list|,
name|copyFromRevision
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|childNodeBaton
operator|=
operator|new
name|NodeBaton
argument_list|(
literal|true
argument_list|,
name|myCurrentNodeBaton
operator|.
name|myDirDepth
argument_list|,
name|myCurrentNodeBaton
argument_list|)
expr_stmt|;
block|}
name|myCurrentNodeBaton
operator|=
name|childNodeBaton
expr_stmt|;
block|}
specifier|public
name|void
name|changeDirProperty
parameter_list|(
name|String
name|name
parameter_list|,
name|SVNPropertyValue
name|value
parameter_list|)
throws|throws
name|SVNException
block|{
if|if
condition|(
operator|!
name|myCurrentNodeBaton
operator|.
name|myIsFiltered
condition|)
block|{
name|myDelegate
operator|.
name|changeDirProperty
argument_list|(
name|name
argument_list|,
name|value
argument_list|)
expr_stmt|;
block|}
block|}
specifier|public
name|void
name|changeFileProperty
parameter_list|(
name|String
name|path
parameter_list|,
name|String
name|name
parameter_list|,
name|SVNPropertyValue
name|value
parameter_list|)
throws|throws
name|SVNException
block|{
if|if
condition|(
operator|!
name|myCurrentNodeBaton
operator|.
name|myIsFiltered
condition|)
block|{
name|myDelegate
operator|.
name|changeFileProperty
argument_list|(
name|path
argument_list|,
name|name
argument_list|,
name|value
argument_list|)
expr_stmt|;
block|}
block|}
specifier|public
name|void
name|closeDir
parameter_list|()
throws|throws
name|SVNException
block|{
if|if
condition|(
operator|!
name|myCurrentNodeBaton
operator|.
name|myIsFiltered
condition|)
block|{
name|myDelegate
operator|.
name|closeDir
argument_list|()
expr_stmt|;
block|}
name|myCurrentNodeBaton
operator|=
name|myCurrentNodeBaton
operator|.
name|myParentBaton
expr_stmt|;
block|}
specifier|public
name|SVNCommitInfo
name|closeEdit
parameter_list|()
throws|throws
name|SVNException
block|{
return|return
name|myDelegate
operator|.
name|closeEdit
argument_list|()
return|;
block|}
specifier|public
name|void
name|closeFile
parameter_list|(
name|String
name|path
parameter_list|,
name|String
name|textChecksum
parameter_list|)
throws|throws
name|SVNException
block|{
if|if
condition|(
operator|!
name|myCurrentNodeBaton
operator|.
name|myIsFiltered
condition|)
block|{
name|myDelegate
operator|.
name|closeFile
argument_list|(
name|path
argument_list|,
name|textChecksum
argument_list|)
expr_stmt|;
block|}
name|myCurrentNodeBaton
operator|=
name|myCurrentNodeBaton
operator|.
name|myParentBaton
expr_stmt|;
block|}
specifier|public
name|void
name|deleteEntry
parameter_list|(
name|String
name|path
parameter_list|,
name|long
name|revision
parameter_list|)
throws|throws
name|SVNException
block|{
if|if
condition|(
name|myCurrentNodeBaton
operator|.
name|canEdit
argument_list|(
name|SVNNodeKind
operator|.
name|FILE
argument_list|)
condition|)
block|{
name|myDelegate
operator|.
name|deleteEntry
argument_list|(
name|path
argument_list|,
name|revision
argument_list|)
expr_stmt|;
block|}
block|}
specifier|public
name|void
name|openDir
parameter_list|(
name|String
name|path
parameter_list|,
name|long
name|revision
parameter_list|)
throws|throws
name|SVNException
block|{
name|NodeBaton
name|childNodeBaton
init|=
literal|null
decl_stmt|;
if|if
condition|(
name|myCurrentNodeBaton
operator|.
name|canEdit
argument_list|(
name|SVNNodeKind
operator|.
name|DIR
argument_list|)
condition|)
block|{
name|childNodeBaton
operator|=
operator|new
name|NodeBaton
argument_list|(
literal|false
argument_list|,
name|myCurrentNodeBaton
operator|.
name|myDirDepth
operator|+
literal|1
argument_list|,
name|myCurrentNodeBaton
argument_list|)
expr_stmt|;
name|myDelegate
operator|.
name|openDir
argument_list|(
name|path
argument_list|,
name|revision
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|childNodeBaton
operator|=
operator|new
name|NodeBaton
argument_list|(
literal|true
argument_list|,
name|myCurrentNodeBaton
operator|.
name|myDirDepth
operator|+
literal|1
argument_list|,
name|myCurrentNodeBaton
argument_list|)
expr_stmt|;
block|}
name|myCurrentNodeBaton
operator|=
name|childNodeBaton
expr_stmt|;
block|}
specifier|public
name|void
name|openFile
parameter_list|(
name|String
name|path
parameter_list|,
name|long
name|revision
parameter_list|)
throws|throws
name|SVNException
block|{
name|NodeBaton
name|childNodeBaton
init|=
literal|null
decl_stmt|;
if|if
condition|(
name|myCurrentNodeBaton
operator|.
name|canEdit
argument_list|(
name|SVNNodeKind
operator|.
name|FILE
argument_list|)
condition|)
block|{
name|childNodeBaton
operator|=
operator|new
name|NodeBaton
argument_list|(
literal|false
argument_list|,
name|myCurrentNodeBaton
operator|.
name|myDirDepth
argument_list|,
name|myCurrentNodeBaton
argument_list|)
expr_stmt|;
name|myDelegate
operator|.
name|openFile
argument_list|(
name|path
argument_list|,
name|revision
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|childNodeBaton
operator|=
operator|new
name|NodeBaton
argument_list|(
literal|true
argument_list|,
name|myCurrentNodeBaton
operator|.
name|myDirDepth
argument_list|,
name|myCurrentNodeBaton
argument_list|)
expr_stmt|;
block|}
name|myCurrentNodeBaton
operator|=
name|childNodeBaton
expr_stmt|;
block|}
specifier|public
name|void
name|openRoot
parameter_list|(
name|long
name|revision
parameter_list|)
throws|throws
name|SVNException
block|{
name|myCurrentNodeBaton
operator|=
operator|new
name|NodeBaton
argument_list|(
literal|false
argument_list|,
literal|1
argument_list|,
literal|null
argument_list|)
expr_stmt|;
name|myDelegate
operator|.
name|openRoot
argument_list|(
name|revision
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|targetRevision
parameter_list|(
name|long
name|revision
parameter_list|)
throws|throws
name|SVNException
block|{
name|myDelegate
operator|.
name|targetRevision
argument_list|(
name|revision
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|applyTextDelta
parameter_list|(
name|String
name|path
parameter_list|,
name|String
name|baseChecksum
parameter_list|)
throws|throws
name|SVNException
block|{
if|if
condition|(
operator|!
name|myCurrentNodeBaton
operator|.
name|myIsFiltered
condition|)
block|{
name|myDelegate
operator|.
name|applyTextDelta
argument_list|(
name|path
argument_list|,
name|baseChecksum
argument_list|)
expr_stmt|;
block|}
block|}
specifier|public
name|OutputStream
name|textDeltaChunk
parameter_list|(
name|String
name|path
parameter_list|,
name|SVNDiffWindow
name|diffWindow
parameter_list|)
throws|throws
name|SVNException
block|{
if|if
condition|(
operator|!
name|myCurrentNodeBaton
operator|.
name|myIsFiltered
condition|)
block|{
return|return
name|myDelegate
operator|.
name|textDeltaChunk
argument_list|(
name|path
argument_list|,
name|diffWindow
argument_list|)
return|;
block|}
return|return
name|SVNFileUtil
operator|.
name|DUMMY_OUT
return|;
block|}
specifier|public
name|void
name|textDeltaEnd
parameter_list|(
name|String
name|path
parameter_list|)
throws|throws
name|SVNException
block|{
if|if
condition|(
operator|!
name|myCurrentNodeBaton
operator|.
name|myIsFiltered
condition|)
block|{
name|myDelegate
operator|.
name|textDeltaEnd
argument_list|(
name|path
argument_list|)
expr_stmt|;
block|}
block|}
specifier|public
specifier|static
name|ISVNEditor
name|getDepthFilterEditor
parameter_list|(
name|SVNDepth
name|requestedDepth
parameter_list|,
name|ISVNEditor
name|delegate
parameter_list|,
name|boolean
name|hasTarget
parameter_list|)
block|{
if|if
condition|(
name|requestedDepth
operator|==
name|SVNDepth
operator|.
name|UNKNOWN
operator|||
name|requestedDepth
operator|==
name|SVNDepth
operator|.
name|INFINITY
condition|)
block|{
return|return
name|delegate
return|;
block|}
return|return
operator|new
name|SVNDepthFilterEditor
argument_list|(
name|requestedDepth
argument_list|,
name|delegate
argument_list|,
name|hasTarget
argument_list|)
return|;
block|}
specifier|private
class|class
name|NodeBaton
block|{
name|boolean
name|myIsFiltered
decl_stmt|;
name|int
name|myDirDepth
decl_stmt|;
name|NodeBaton
name|myParentBaton
decl_stmt|;
specifier|public
name|NodeBaton
parameter_list|(
name|boolean
name|isFiltered
parameter_list|,
name|int
name|depth
parameter_list|,
name|NodeBaton
name|parent
parameter_list|)
block|{
name|myIsFiltered
operator|=
name|isFiltered
expr_stmt|;
name|myDirDepth
operator|=
name|depth
expr_stmt|;
name|myParentBaton
operator|=
name|parent
expr_stmt|;
block|}
specifier|public
name|boolean
name|canEdit
parameter_list|(
name|SVNNodeKind
name|entryKind
parameter_list|)
throws|throws
name|SVNException
block|{
if|if
condition|(
name|myIsFiltered
condition|)
block|{
return|return
literal|false
return|;
block|}
name|int
name|effectiveDepth
init|=
name|myDirDepth
operator|-
operator|(
name|myHasTarget
condition|?
literal|1
else|:
literal|0
operator|)
decl_stmt|;
if|if
condition|(
name|myRequestedDepth
operator|==
name|SVNDepth
operator|.
name|EMPTY
condition|)
block|{
return|return
name|effectiveDepth
operator|<=
literal|0
return|;
block|}
if|else if
condition|(
name|myRequestedDepth
operator|==
name|SVNDepth
operator|.
name|FILES
condition|)
block|{
return|return
name|effectiveDepth
operator|<=
literal|0
operator|||
operator|(
name|entryKind
operator|==
name|SVNNodeKind
operator|.
name|FILE
operator|&&
name|effectiveDepth
operator|==
literal|1
operator|)
return|;
block|}
if|else if
condition|(
name|myRequestedDepth
operator|==
name|SVNDepth
operator|.
name|IMMEDIATES
condition|)
block|{
return|return
name|effectiveDepth
operator|<=
literal|1
return|;
block|}
if|else if
condition|(
name|myRequestedDepth
operator|==
name|SVNDepth
operator|.
name|INFINITY
condition|)
block|{
return|return
literal|true
return|;
block|}
name|SVNErrorMessage
name|err
init|=
name|SVNErrorMessage
operator|.
name|create
argument_list|(
name|SVNErrorCode
operator|.
name|UNKNOWN
argument_list|,
literal|"depth should be a valid constant"
argument_list|)
decl_stmt|;
name|SVNErrorManager
operator|.
name|error
argument_list|(
name|err
argument_list|,
name|SVNLogType
operator|.
name|WC
argument_list|)
expr_stmt|;
return|return
literal|false
return|;
block|}
block|}
block|}
end_class

end_unit

