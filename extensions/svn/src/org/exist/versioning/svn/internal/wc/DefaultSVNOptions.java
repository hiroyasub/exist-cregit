begin_unit|revision:1.0.0;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * ====================================================================  * Copyright (c) 2004-2010 TMate Software Ltd.  All rights reserved.  *  * This software is licensed as described in the file COPYING, which  * you should have received as part of this distribution.  The terms  * are also available at http://svnkit.com/license.html  * If newer versions of this license are posted there, you may use a  * newer version instead, at your option.  * ====================================================================  */
end_comment

begin_package
package|package
name|org
operator|.
name|exist
operator|.
name|versioning
operator|.
name|svn
operator|.
name|internal
operator|.
name|wc
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|BufferedReader
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|File
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|FileReader
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|text
operator|.
name|DateFormat
import|;
end_import

begin_import
import|import
name|java
operator|.
name|text
operator|.
name|DateFormatSymbols
import|;
end_import

begin_import
import|import
name|java
operator|.
name|text
operator|.
name|SimpleDateFormat
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Arrays
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Calendar
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collection
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collections
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Iterator
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|LinkedList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Locale
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|StringTokenizer
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|TimeZone
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|regex
operator|.
name|Pattern
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|regex
operator|.
name|PatternSyntaxException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|versioning
operator|.
name|svn
operator|.
name|Resource
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|versioning
operator|.
name|svn
operator|.
name|wc
operator|.
name|ISVNConflictHandler
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|versioning
operator|.
name|svn
operator|.
name|wc
operator|.
name|ISVNMerger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|versioning
operator|.
name|svn
operator|.
name|wc
operator|.
name|ISVNMergerFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|versioning
operator|.
name|svn
operator|.
name|wc
operator|.
name|ISVNOptions
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|versioning
operator|.
name|svn
operator|.
name|wc
operator|.
name|SVNWCUtil
import|;
end_import

begin_import
import|import
name|org
operator|.
name|tmatesoft
operator|.
name|svn
operator|.
name|core
operator|.
name|SVNURL
import|;
end_import

begin_import
import|import
name|org
operator|.
name|tmatesoft
operator|.
name|svn
operator|.
name|core
operator|.
name|internal
operator|.
name|io
operator|.
name|svn
operator|.
name|ISVNConnector
import|;
end_import

begin_import
import|import
name|org
operator|.
name|tmatesoft
operator|.
name|svn
operator|.
name|core
operator|.
name|internal
operator|.
name|io
operator|.
name|svn
operator|.
name|SVNTunnelConnector
import|;
end_import

begin_import
import|import
name|org
operator|.
name|tmatesoft
operator|.
name|svn
operator|.
name|core
operator|.
name|internal
operator|.
name|util
operator|.
name|SVNHashMap
import|;
end_import

begin_comment
comment|/**  * @version 1.3  * @author  TMate Software Ltd.  */
end_comment

begin_class
specifier|public
class|class
name|DefaultSVNOptions
implements|implements
name|ISVNOptions
implements|,
name|ISVNMergerFactory
block|{
specifier|private
specifier|static
specifier|final
name|String
name|MISCELLANY_GROUP
init|=
literal|"miscellany"
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|String
name|AUTH_GROUP
init|=
literal|"auth"
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|String
name|AUTOPROPS_GROUP
init|=
literal|"auto-props"
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|String
name|SVNKIT_GROUP
init|=
literal|"svnkit"
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|String
name|OLD_SVNKIT_GROUP
init|=
literal|"javasvn"
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|String
name|HELPERS_GROUP
init|=
literal|"helpers"
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|String
name|USE_COMMIT_TIMES
init|=
literal|"use-commit-times"
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|String
name|GLOBAL_IGNORES
init|=
literal|"global-ignores"
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|String
name|ENABLE_AUTO_PROPS
init|=
literal|"enable-auto-props"
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|String
name|STORE_AUTH_CREDS
init|=
literal|"store-auth-creds"
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|String
name|KEYWORD_TIMEZONE
init|=
literal|"keyword_timezone"
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|String
name|KEYWORD_LOCALE
init|=
literal|"keyword_locale"
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|String
name|EDITOR_CMD
init|=
literal|"editor-cmd"
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|String
name|DIFF_CMD
init|=
literal|"diff-cmd"
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|String
name|MERGE_TOOL_CMD
init|=
literal|"merge-tool-cmd"
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|String
name|NO_UNLOCK
init|=
literal|"no-unlock"
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|String
name|PRESERVED_CONFLICT_FILE_EXTENSIONS
init|=
literal|"preserved-conflict-file-exts"
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|String
name|INTERACTIVE_COFLICTS
init|=
literal|"interactive-conflicts"
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|String
name|MIME_TYPES_FILE
init|=
literal|"mime-types-file"
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|String
name|DEFAULT_IGNORES
init|=
literal|"*.o *.lo *.la #*# .*.rej *.rej .*~ *~ .#* .DS_Store"
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|String
name|YES
init|=
literal|"yes"
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|String
name|NO
init|=
literal|"no"
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|String
name|DEFAULT_LOCALE
init|=
name|Locale
operator|.
name|getDefault
argument_list|()
operator|.
name|toString
argument_list|()
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|String
name|DEFAULT_TIMEZONE
init|=
name|TimeZone
operator|.
name|getDefault
argument_list|()
operator|.
name|getID
argument_list|()
decl_stmt|;
specifier|private
name|boolean
name|myIsReadonly
decl_stmt|;
specifier|private
name|File
name|myConfigDirectory
decl_stmt|;
specifier|private
name|SVNCompositeConfigFile
name|myConfigFile
decl_stmt|;
specifier|private
name|ISVNMergerFactory
name|myMergerFactory
decl_stmt|;
specifier|private
name|ISVNConflictHandler
name|myConflictResolver
decl_stmt|;
specifier|private
name|String
name|myKeywordLocale
init|=
name|DEFAULT_LOCALE
decl_stmt|;
specifier|private
name|String
name|myKeywordTimezone
init|=
name|DEFAULT_TIMEZONE
decl_stmt|;
specifier|private
name|SimpleDateFormat
name|myKeywordDateFormat
init|=
operator|new
name|SimpleDateFormat
argument_list|(
literal|"yyyy-MM-dd' 'HH:mm:ss' 'ZZZZ' ('E', 'dd' 'MMM' 'yyyy')'"
argument_list|)
decl_stmt|;
specifier|private
name|Map
name|myConfigOptions
decl_stmt|;
specifier|public
name|DefaultSVNOptions
parameter_list|()
block|{
name|this
argument_list|(
literal|null
argument_list|,
literal|true
argument_list|)
expr_stmt|;
block|}
specifier|public
name|DefaultSVNOptions
parameter_list|(
name|File
name|directory
parameter_list|,
name|boolean
name|readOnly
parameter_list|)
block|{
name|myConfigDirectory
operator|=
name|directory
operator|==
literal|null
condition|?
name|getDefaultConfigDir
argument_list|()
else|:
name|directory
expr_stmt|;
name|myIsReadonly
operator|=
name|readOnly
expr_stmt|;
block|}
specifier|public
name|boolean
name|isUseCommitTimes
parameter_list|()
block|{
name|String
name|value
init|=
name|getConfigFile
argument_list|()
operator|.
name|getPropertyValue
argument_list|(
name|MISCELLANY_GROUP
argument_list|,
name|USE_COMMIT_TIMES
argument_list|)
decl_stmt|;
return|return
name|getBooleanValue
argument_list|(
name|value
argument_list|,
literal|false
argument_list|)
return|;
block|}
specifier|public
name|void
name|setInMemoryConfigOptions
parameter_list|(
name|Map
name|configOptions
parameter_list|)
block|{
name|myConfigOptions
operator|=
name|configOptions
expr_stmt|;
if|if
condition|(
name|myConfigFile
operator|!=
literal|null
condition|)
block|{
name|myConfigFile
operator|.
name|setGroupsToOptions
argument_list|(
name|myConfigOptions
argument_list|)
expr_stmt|;
block|}
block|}
comment|/**      * Enables or disables the commit-times option.      *      *<p>      * The commit-times option makes checkout/update/switch/revert operations put      * last-committed timestamps on every file they touch.      *      *<p>      * This option corresponds to      * the<i>'use-commit-times'</i> option that can be found in the      * SVN's<i>config</i> file under the<i>[miscellany]</i> section.      *      * @param useCommitTimes<span class="javakeyword">true</span> to      *                        enable commit-times,<span class="javakeyword">false</span>      *                        to disable      * @see                   #isUseCommitTimes()      */
specifier|public
name|void
name|setUseCommitTimes
parameter_list|(
name|boolean
name|useCommitTimes
parameter_list|)
block|{
name|getConfigFile
argument_list|()
operator|.
name|setPropertyValue
argument_list|(
name|MISCELLANY_GROUP
argument_list|,
name|USE_COMMIT_TIMES
argument_list|,
name|useCommitTimes
condition|?
name|YES
else|:
name|NO
argument_list|,
operator|!
name|myIsReadonly
argument_list|)
expr_stmt|;
block|}
comment|/**      * Determines if the autoproperties option is enabled.      *      *<p>      * Autoproperties are the properties that are automatically set      * on files when they are added or imported.      *      *<p>      * This option corresponds to the<i>'enable-auto-props'</i> option      * that can be found in the SVN's<i>config</i> file under the      *<i>[miscellany]</i> section.      *      * @return<span class="javakeyword">true</span> if autoproperties      *          are enabled, otherwise<span class="javakeyword">false</span>      */
specifier|private
name|boolean
name|isUseAutoProperties
parameter_list|()
block|{
name|String
name|value
init|=
name|getConfigFile
argument_list|()
operator|.
name|getPropertyValue
argument_list|(
name|MISCELLANY_GROUP
argument_list|,
name|ENABLE_AUTO_PROPS
argument_list|)
decl_stmt|;
return|return
name|getBooleanValue
argument_list|(
name|value
argument_list|,
literal|false
argument_list|)
return|;
block|}
comment|/**      * Enables or disables the autoproperties option.      *      *<p>      * Autoproperties are the properties that are automatically set      * on files when they are added or imported.      *      *<p>      * This option corresponds to the<i>'enable-auto-props'</i> option      * that can be found in the SVN's<i>config</i> file under the      *<i>[miscellany]</i> section.      *      * @param useAutoProperties<span class="javakeyword">true</span> to      *                           enable autoproperties,<span class="javakeyword">false</span>      *                           to disable      * @see                      #isUseAutoProperties()      */
specifier|public
name|void
name|setUseAutoProperties
parameter_list|(
name|boolean
name|useAutoProperties
parameter_list|)
block|{
name|getConfigFile
argument_list|()
operator|.
name|setPropertyValue
argument_list|(
name|MISCELLANY_GROUP
argument_list|,
name|ENABLE_AUTO_PROPS
argument_list|,
name|useAutoProperties
condition|?
name|YES
else|:
name|NO
argument_list|,
operator|!
name|myIsReadonly
argument_list|)
expr_stmt|;
block|}
comment|/**      * Determines if the authentication storage is enabled.      *      *<p>      * The auth storage is used for disk-caching of all      * authentication information: usernames, passwords, server certificates,      * and any other types of cacheable credentials.      *      *<p>      * This option corresponds to the      *<i>'store-auth-creds'</i> option that can be found      * in the SVN's<i>config</i> file under the<i>[auth]</i> section.      *      * @return<span class="javakeyword">true</span> if auth storage      *          is enabled, otherwise<span class="javakeyword">false</span>      */
specifier|public
name|boolean
name|isAuthStorageEnabled
parameter_list|()
block|{
name|String
name|value
init|=
name|getConfigFile
argument_list|()
operator|.
name|getPropertyValue
argument_list|(
name|AUTH_GROUP
argument_list|,
name|STORE_AUTH_CREDS
argument_list|)
decl_stmt|;
return|return
name|getBooleanValue
argument_list|(
name|value
argument_list|,
literal|true
argument_list|)
return|;
block|}
specifier|public
name|boolean
name|isKeepLocks
parameter_list|()
block|{
name|String
name|value
init|=
name|getConfigFile
argument_list|()
operator|.
name|getPropertyValue
argument_list|(
name|MISCELLANY_GROUP
argument_list|,
name|NO_UNLOCK
argument_list|)
decl_stmt|;
return|return
name|getBooleanValue
argument_list|(
name|value
argument_list|,
literal|false
argument_list|)
return|;
block|}
comment|/**      * Enables or disables the authentication storage.      *      *<p>      * The auth storage is used for disk-caching of all      * authentication information: usernames, passwords, server certificates,      * and any other types of cacheable credentials.      *      *<p>      * This option corresponds to the      *<i>'store-auth-creds'</i> option that can be found      * in the SVN's<i>config</i> file under the<i>[auth]</i> section.      *      * @param storeAuth<span class="javakeyword">true</span> to      *                   enable the auth storage,<span class="javakeyword">false</span>      *                   to disable      * @see              #isAuthStorageEnabled()      */
specifier|public
name|void
name|setAuthStorageEnabled
parameter_list|(
name|boolean
name|storeAuth
parameter_list|)
block|{
name|getConfigFile
argument_list|()
operator|.
name|setPropertyValue
argument_list|(
name|AUTH_GROUP
argument_list|,
name|STORE_AUTH_CREDS
argument_list|,
name|storeAuth
condition|?
name|YES
else|:
name|NO
argument_list|,
operator|!
name|myIsReadonly
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|setKeepLocks
parameter_list|(
name|boolean
name|keep
parameter_list|)
block|{
name|getConfigFile
argument_list|()
operator|.
name|setPropertyValue
argument_list|(
name|MISCELLANY_GROUP
argument_list|,
name|NO_UNLOCK
argument_list|,
name|keep
condition|?
name|YES
else|:
name|NO
argument_list|,
operator|!
name|myIsReadonly
argument_list|)
expr_stmt|;
block|}
specifier|public
specifier|static
name|boolean
name|isIgnored
parameter_list|(
name|ISVNOptions
name|options
parameter_list|,
name|String
name|name
parameter_list|)
block|{
name|String
index|[]
name|patterns
init|=
name|options
operator|.
name|getIgnorePatterns
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|patterns
operator|!=
literal|null
operator|&&
name|i
operator|<
name|patterns
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
name|String
name|pattern
init|=
name|patterns
index|[
name|i
index|]
decl_stmt|;
if|if
condition|(
name|matches
argument_list|(
name|pattern
argument_list|,
name|name
argument_list|)
condition|)
block|{
return|return
literal|true
return|;
block|}
block|}
return|return
literal|false
return|;
block|}
specifier|public
name|String
index|[]
name|getIgnorePatterns
parameter_list|()
block|{
name|String
name|value
init|=
name|getConfigFile
argument_list|()
operator|.
name|getPropertyValue
argument_list|(
name|MISCELLANY_GROUP
argument_list|,
name|GLOBAL_IGNORES
argument_list|)
decl_stmt|;
if|if
condition|(
name|value
operator|==
literal|null
condition|)
block|{
name|value
operator|=
name|DEFAULT_IGNORES
expr_stmt|;
block|}
name|Collection
argument_list|<
name|String
argument_list|>
name|tokensList
init|=
operator|new
name|ArrayList
argument_list|<
name|String
argument_list|>
argument_list|()
decl_stmt|;
for|for
control|(
name|StringTokenizer
name|tokens
init|=
operator|new
name|StringTokenizer
argument_list|(
name|value
argument_list|,
literal|" \t"
argument_list|)
init|;
name|tokens
operator|.
name|hasMoreTokens
argument_list|()
condition|;
control|)
block|{
name|String
name|token
init|=
name|tokens
operator|.
name|nextToken
argument_list|()
decl_stmt|;
if|if
condition|(
literal|""
operator|.
name|equals
argument_list|(
name|token
argument_list|)
condition|)
block|{
continue|continue;
block|}
name|tokensList
operator|.
name|add
argument_list|(
name|token
argument_list|)
expr_stmt|;
block|}
return|return
name|tokensList
operator|.
name|toArray
argument_list|(
operator|new
name|String
index|[
name|tokensList
operator|.
name|size
argument_list|()
index|]
argument_list|)
return|;
block|}
comment|/**      * Sets global ignore patterns.      *      *<p>      * The global ignore patterns describe the names of      * files and directories that SVNKit should ignore during status, add and      * import operations. Similar to the      *<i>'global-ignores'</i> option that can be found in the SVN's<i>config</i>      * file under the<i>[miscellany]</i> section.      *      *<p>      * For example, to set all<code>.exe</code> files to be ignored include      *<code>"*.exe"</code> pattern into<code>patterns</code>.      *      *<p>      * If<code>patterns</code> is<span class="javakeyword">null</span> or      * empty then all the patterns will be removed.      *      * @param patterns  an array of patterns (that usually contain wildcards)      *                  that specify file and directory names to be ignored until      *                  they are versioned      * @see             #getIgnorePatterns()      */
specifier|public
name|void
name|setIgnorePatterns
parameter_list|(
name|String
index|[]
name|patterns
parameter_list|)
block|{
if|if
condition|(
name|patterns
operator|==
literal|null
operator|||
name|patterns
operator|.
name|length
operator|==
literal|0
condition|)
block|{
name|getConfigFile
argument_list|()
operator|.
name|setPropertyValue
argument_list|(
name|MISCELLANY_GROUP
argument_list|,
name|GLOBAL_IGNORES
argument_list|,
literal|null
argument_list|,
operator|!
name|myIsReadonly
argument_list|)
expr_stmt|;
return|return;
block|}
name|StringBuffer
name|value
init|=
operator|new
name|StringBuffer
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|patterns
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
name|String
name|pattern
init|=
name|patterns
index|[
name|i
index|]
decl_stmt|;
if|if
condition|(
name|pattern
operator|!=
literal|null
operator|&&
operator|!
literal|""
operator|.
name|equals
argument_list|(
name|pattern
operator|.
name|trim
argument_list|()
argument_list|)
condition|)
block|{
name|value
operator|.
name|append
argument_list|(
name|pattern
argument_list|)
expr_stmt|;
name|value
operator|.
name|append
argument_list|(
literal|" "
argument_list|)
expr_stmt|;
block|}
block|}
name|String
name|valueStr
init|=
name|value
operator|.
name|toString
argument_list|()
operator|.
name|trim
argument_list|()
decl_stmt|;
if|if
condition|(
literal|""
operator|.
name|equals
argument_list|(
name|valueStr
argument_list|)
condition|)
block|{
name|valueStr
operator|=
literal|null
expr_stmt|;
block|}
name|getConfigFile
argument_list|()
operator|.
name|setPropertyValue
argument_list|(
name|MISCELLANY_GROUP
argument_list|,
name|GLOBAL_IGNORES
argument_list|,
name|valueStr
argument_list|,
operator|!
name|myIsReadonly
argument_list|)
expr_stmt|;
block|}
comment|/**      * Removes a particular global ignore pattern.      *      * @param pattern a patterna to be removed      * @see           #addIgnorePattern(String)      */
specifier|public
name|void
name|deleteIgnorePattern
parameter_list|(
name|String
name|pattern
parameter_list|)
block|{
if|if
condition|(
name|pattern
operator|==
literal|null
condition|)
block|{
return|return;
block|}
name|String
index|[]
name|patterns
init|=
name|getIgnorePatterns
argument_list|()
decl_stmt|;
name|Collection
argument_list|<
name|String
argument_list|>
name|newPatterns
init|=
operator|new
name|ArrayList
argument_list|<
name|String
argument_list|>
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|patterns
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
name|String
name|s
init|=
name|patterns
index|[
name|i
index|]
decl_stmt|;
if|if
condition|(
operator|!
name|s
operator|.
name|equals
argument_list|(
name|pattern
argument_list|)
condition|)
block|{
name|newPatterns
operator|.
name|add
argument_list|(
name|s
argument_list|)
expr_stmt|;
block|}
block|}
name|patterns
operator|=
name|newPatterns
operator|.
name|toArray
argument_list|(
operator|new
name|String
index|[
name|newPatterns
operator|.
name|size
argument_list|()
index|]
argument_list|)
expr_stmt|;
name|setIgnorePatterns
argument_list|(
name|patterns
argument_list|)
expr_stmt|;
block|}
comment|/**      * Adds a new particular ignore pattern to global      * ignore patterns.      *      * @param pattern an ignore pattern to be added      * @see           #deleteIgnorePattern(String)      */
specifier|public
name|void
name|addIgnorePattern
parameter_list|(
name|String
name|pattern
parameter_list|)
block|{
if|if
condition|(
name|pattern
operator|==
literal|null
condition|)
block|{
return|return;
block|}
name|String
index|[]
name|patterns
init|=
name|getIgnorePatterns
argument_list|()
decl_stmt|;
name|Collection
name|oldPatterns
init|=
operator|new
name|ArrayList
argument_list|(
name|Arrays
operator|.
name|asList
argument_list|(
name|patterns
argument_list|)
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|oldPatterns
operator|.
name|contains
argument_list|(
name|pattern
argument_list|)
condition|)
block|{
name|oldPatterns
operator|.
name|add
argument_list|(
name|pattern
argument_list|)
expr_stmt|;
name|patterns
operator|=
operator|(
name|String
index|[]
operator|)
name|oldPatterns
operator|.
name|toArray
argument_list|(
operator|new
name|String
index|[
name|oldPatterns
operator|.
name|size
argument_list|()
index|]
argument_list|)
expr_stmt|;
name|setIgnorePatterns
argument_list|(
name|patterns
argument_list|)
expr_stmt|;
block|}
block|}
comment|/**      * Returns autoproperties as a {@link java.util.Map}      * where each key is a file name pattern and the corresponding      * value is a string in the form of<code>"propName=propValue"</code>.      *      * @return a {@link java.util.Map} containing autoproperties      */
specifier|public
name|Map
name|getAutoProperties
parameter_list|()
block|{
return|return
name|getConfigFile
argument_list|()
operator|.
name|getProperties
argument_list|(
name|AUTOPROPS_GROUP
argument_list|)
return|;
block|}
comment|/**      * Sets autoproperties that will be automatically put on all files      * that will be added or imported.      *      *<p>      * There can be several properties specified for one file pattern -      * they should be delimited by ";".      *      * @param autoProperties  a {@link java.util.Map} which keys are file      *                        name patterns and their values are strings      *                        in the form of<code>"propName=propValue"</code>      * @see                   #getAutoProperties()      */
specifier|public
name|void
name|setAutoProperties
parameter_list|(
name|Map
name|autoProperties
parameter_list|)
block|{
name|autoProperties
operator|=
name|autoProperties
operator|==
literal|null
condition|?
name|Collections
operator|.
name|EMPTY_MAP
else|:
name|autoProperties
expr_stmt|;
name|Map
name|existingProperties
init|=
name|getAutoProperties
argument_list|()
decl_stmt|;
for|for
control|(
name|Iterator
argument_list|<
name|String
argument_list|>
name|names
init|=
name|existingProperties
operator|.
name|keySet
argument_list|()
operator|.
name|iterator
argument_list|()
init|;
name|names
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|String
name|pattern
init|=
name|names
operator|.
name|next
argument_list|()
decl_stmt|;
name|String
name|value
init|=
operator|(
name|String
operator|)
name|existingProperties
operator|.
name|get
argument_list|(
name|pattern
argument_list|)
decl_stmt|;
if|if
condition|(
name|value
operator|.
name|equals
argument_list|(
name|autoProperties
operator|.
name|get
argument_list|(
name|pattern
argument_list|)
argument_list|)
condition|)
block|{
continue|continue;
block|}
name|getConfigFile
argument_list|()
operator|.
name|setPropertyValue
argument_list|(
name|AUTOPROPS_GROUP
argument_list|,
name|pattern
argument_list|,
literal|null
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|names
operator|.
name|remove
argument_list|()
expr_stmt|;
block|}
comment|// add all new
for|for
control|(
name|Iterator
argument_list|<
name|String
argument_list|>
name|names
init|=
name|autoProperties
operator|.
name|keySet
argument_list|()
operator|.
name|iterator
argument_list|()
init|;
name|names
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|String
name|pattern
init|=
name|names
operator|.
name|next
argument_list|()
decl_stmt|;
name|String
name|value
init|=
operator|(
name|String
operator|)
name|autoProperties
operator|.
name|get
argument_list|(
name|pattern
argument_list|)
decl_stmt|;
if|if
condition|(
name|value
operator|.
name|equals
argument_list|(
name|existingProperties
operator|.
name|get
argument_list|(
name|pattern
argument_list|)
argument_list|)
condition|)
block|{
continue|continue;
block|}
name|getConfigFile
argument_list|()
operator|.
name|setPropertyValue
argument_list|(
name|AUTOPROPS_GROUP
argument_list|,
name|pattern
argument_list|,
name|value
argument_list|,
literal|false
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
operator|!
name|myIsReadonly
condition|)
block|{
name|getConfigFile
argument_list|()
operator|.
name|save
argument_list|()
expr_stmt|;
block|}
block|}
specifier|public
name|String
name|getEditor
parameter_list|()
block|{
return|return
name|getConfigFile
argument_list|()
operator|.
name|getPropertyValue
argument_list|(
name|HELPERS_GROUP
argument_list|,
name|EDITOR_CMD
argument_list|)
return|;
block|}
specifier|public
name|String
name|getMergeTool
parameter_list|()
block|{
return|return
name|getConfigFile
argument_list|()
operator|.
name|getPropertyValue
argument_list|(
name|HELPERS_GROUP
argument_list|,
name|MERGE_TOOL_CMD
argument_list|)
return|;
block|}
comment|/**      * Removes a particular autoproperty by specifying a file name      * pattern.      *      * @param pattern a file name pattern      * @see           #setAutoProperty(String, String)      *      */
specifier|public
name|void
name|deleteAutoProperty
parameter_list|(
name|String
name|pattern
parameter_list|)
block|{
name|getConfigFile
argument_list|()
operator|.
name|setPropertyValue
argument_list|(
name|AUTOPROPS_GROUP
argument_list|,
name|pattern
argument_list|,
literal|null
argument_list|,
operator|!
name|myIsReadonly
argument_list|)
expr_stmt|;
block|}
comment|/**      * Sets an autoproperty - binds a file name pattern with a      * string in the form of<code>"propName=propValue"</code>.      *      * @param pattern      a file name pattern (usually containing      *                     wildcards)      * @param properties   a property for<code>pattern</code>      */
specifier|public
name|void
name|setAutoProperty
parameter_list|(
name|String
name|pattern
parameter_list|,
name|String
name|properties
parameter_list|)
block|{
name|getConfigFile
argument_list|()
operator|.
name|setPropertyValue
argument_list|(
name|AUTOPROPS_GROUP
argument_list|,
name|pattern
argument_list|,
name|properties
argument_list|,
operator|!
name|myIsReadonly
argument_list|)
expr_stmt|;
block|}
specifier|public
name|boolean
name|isInteractiveConflictResolution
parameter_list|()
block|{
name|String
name|value
init|=
name|getConfigFile
argument_list|()
operator|.
name|getPropertyValue
argument_list|(
name|MISCELLANY_GROUP
argument_list|,
name|INTERACTIVE_COFLICTS
argument_list|)
decl_stmt|;
return|return
name|getBooleanValue
argument_list|(
name|value
argument_list|,
literal|true
argument_list|)
return|;
block|}
specifier|public
name|void
name|setInteractiveConflictResolution
parameter_list|(
name|boolean
name|interactive
parameter_list|)
block|{
name|getConfigFile
argument_list|()
operator|.
name|setPropertyValue
argument_list|(
name|MISCELLANY_GROUP
argument_list|,
name|INTERACTIVE_COFLICTS
argument_list|,
name|interactive
condition|?
name|YES
else|:
name|NO
argument_list|,
operator|!
name|myIsReadonly
argument_list|)
expr_stmt|;
block|}
specifier|public
name|Map
name|applyAutoProperties
parameter_list|(
name|File
name|file
parameter_list|,
name|Map
name|target
parameter_list|)
block|{
name|String
name|fileName
init|=
name|file
operator|.
name|getName
argument_list|()
decl_stmt|;
name|target
operator|=
name|target
operator|==
literal|null
condition|?
operator|new
name|SVNHashMap
argument_list|()
else|:
name|target
expr_stmt|;
if|if
condition|(
operator|!
name|isUseAutoProperties
argument_list|()
condition|)
block|{
return|return
name|target
return|;
block|}
name|Map
name|autoProperties
init|=
name|getAutoProperties
argument_list|()
decl_stmt|;
for|for
control|(
name|Iterator
argument_list|<
name|String
argument_list|>
name|names
init|=
name|autoProperties
operator|.
name|keySet
argument_list|()
operator|.
name|iterator
argument_list|()
init|;
name|names
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|String
name|pattern
init|=
name|names
operator|.
name|next
argument_list|()
decl_stmt|;
name|String
name|value
init|=
operator|(
name|String
operator|)
name|autoProperties
operator|.
name|get
argument_list|(
name|pattern
argument_list|)
decl_stmt|;
if|if
condition|(
name|value
operator|!=
literal|null
operator|&&
operator|!
literal|""
operator|.
name|equals
argument_list|(
name|value
argument_list|)
operator|&&
name|matches
argument_list|(
name|pattern
argument_list|,
name|fileName
argument_list|)
condition|)
block|{
name|StringBuffer
name|token
init|=
operator|new
name|StringBuffer
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|value
operator|.
name|length
argument_list|()
condition|;
name|i
operator|++
control|)
block|{
name|char
name|ch
init|=
name|value
operator|.
name|charAt
argument_list|(
name|i
argument_list|)
decl_stmt|;
if|if
condition|(
name|ch
operator|==
literal|';'
operator|||
name|i
operator|==
name|value
operator|.
name|length
argument_list|()
operator|-
literal|1
condition|)
block|{
if|if
condition|(
name|i
operator|+
literal|1
operator|<
name|value
operator|.
name|length
argument_list|()
operator|&&
name|value
operator|.
name|charAt
argument_list|(
name|i
operator|+
literal|1
argument_list|)
operator|==
literal|';'
condition|)
block|{
comment|// escaped ;
name|token
operator|.
name|append
argument_list|(
literal|';'
argument_list|)
expr_stmt|;
name|i
operator|++
expr_stmt|;
if|if
condition|(
name|i
operator|<
name|value
operator|.
name|length
argument_list|()
operator|-
literal|1
condition|)
block|{
continue|continue;
block|}
comment|// escaped at the end of the line.
block|}
if|if
condition|(
name|ch
operator|!=
literal|';'
condition|)
block|{
comment|// just last character.
name|token
operator|.
name|append
argument_list|(
name|ch
argument_list|)
expr_stmt|;
block|}
comment|// another token.
name|String
name|t
init|=
name|token
operator|.
name|toString
argument_list|()
operator|.
name|trim
argument_list|()
decl_stmt|;
name|int
name|index
init|=
name|t
operator|.
name|indexOf
argument_list|(
literal|'='
argument_list|)
decl_stmt|;
if|if
condition|(
name|index
operator|<
literal|0
condition|)
block|{
name|target
operator|.
name|put
argument_list|(
name|t
argument_list|,
literal|""
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|String
name|name
init|=
name|t
operator|.
name|substring
argument_list|(
literal|0
argument_list|,
name|index
argument_list|)
operator|.
name|trim
argument_list|()
decl_stmt|;
name|String
name|pValue
init|=
name|index
operator|==
name|t
operator|.
name|length
argument_list|()
operator|-
literal|1
condition|?
literal|""
else|:
name|t
operator|.
name|substring
argument_list|(
name|index
operator|+
literal|1
argument_list|)
operator|.
name|trim
argument_list|()
decl_stmt|;
if|if
condition|(
operator|!
literal|""
operator|.
name|equals
argument_list|(
name|name
operator|.
name|trim
argument_list|()
argument_list|)
condition|)
block|{
if|if
condition|(
name|pValue
operator|.
name|startsWith
argument_list|(
literal|"\""
argument_list|)
operator|&&
name|pValue
operator|.
name|endsWith
argument_list|(
literal|"\""
argument_list|)
operator|&&
name|pValue
operator|.
name|length
argument_list|()
operator|>
literal|1
condition|)
block|{
name|pValue
operator|=
name|pValue
operator|.
name|substring
argument_list|(
literal|1
argument_list|,
name|pValue
operator|.
name|length
argument_list|()
operator|-
literal|1
argument_list|)
expr_stmt|;
block|}
if|else if
condition|(
name|pValue
operator|.
name|startsWith
argument_list|(
literal|"\'"
argument_list|)
operator|&&
name|pValue
operator|.
name|endsWith
argument_list|(
literal|"\'"
argument_list|)
operator|&&
name|pValue
operator|.
name|length
argument_list|()
operator|>
literal|1
condition|)
block|{
name|pValue
operator|=
name|pValue
operator|.
name|substring
argument_list|(
literal|1
argument_list|,
name|pValue
operator|.
name|length
argument_list|()
operator|-
literal|1
argument_list|)
expr_stmt|;
block|}
name|target
operator|.
name|put
argument_list|(
name|name
argument_list|,
name|pValue
argument_list|)
expr_stmt|;
block|}
block|}
name|token
operator|=
name|token
operator|.
name|delete
argument_list|(
literal|0
argument_list|,
name|token
operator|.
name|length
argument_list|()
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|token
operator|.
name|append
argument_list|(
name|ch
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
return|return
name|target
return|;
block|}
specifier|public
name|ISVNMergerFactory
name|getMergerFactory
parameter_list|()
block|{
if|if
condition|(
name|myMergerFactory
operator|==
literal|null
condition|)
block|{
return|return
name|this
return|;
block|}
return|return
name|myMergerFactory
return|;
block|}
comment|/**      * Sets a factory object which is responsible for creating      * merger drivers.      *      * @param merger  a factory that produces merger drivers      *                for merge operations      * @see           #getMergerFactory()      */
specifier|public
name|void
name|setMergerFactory
parameter_list|(
name|ISVNMergerFactory
name|mergerFactory
parameter_list|)
block|{
name|myMergerFactory
operator|=
name|mergerFactory
expr_stmt|;
block|}
comment|/**      * Returns the value of a property from the<i>[svnkit]</i> section      * of the<i>config</i> file.      *      * @param   propertyName a SVNKit specific config property name      * @return the value of the property      */
specifier|public
name|String
name|getPropertyValue
parameter_list|(
name|String
name|propertyName
parameter_list|)
block|{
if|if
condition|(
name|propertyName
operator|==
literal|null
condition|)
block|{
return|return
literal|null
return|;
block|}
name|String
name|value
init|=
name|getConfigFile
argument_list|()
operator|.
name|getPropertyValue
argument_list|(
name|SVNKIT_GROUP
argument_list|,
name|propertyName
argument_list|)
decl_stmt|;
if|if
condition|(
name|value
operator|==
literal|null
condition|)
block|{
name|value
operator|=
name|getConfigFile
argument_list|()
operator|.
name|getPropertyValue
argument_list|(
name|OLD_SVNKIT_GROUP
argument_list|,
name|propertyName
argument_list|)
expr_stmt|;
block|}
return|return
name|value
return|;
block|}
comment|/**      * Sets the value of a property from the<i>[svnkit]</i> section      * of the<i>config</i> file.       *      * @param   propertyName   a SVNKit specific config property name      * @param   propertyValue  a new value for the property; if      *<span class="javakeyword">null</span> the      *                         property is removed      */
specifier|public
name|void
name|setPropertyValue
parameter_list|(
name|String
name|propertyName
parameter_list|,
name|String
name|propertyValue
parameter_list|)
block|{
if|if
condition|(
name|propertyName
operator|==
literal|null
operator|||
literal|""
operator|.
name|equals
argument_list|(
name|propertyName
operator|.
name|trim
argument_list|()
argument_list|)
condition|)
block|{
return|return;
block|}
name|getConfigFile
argument_list|()
operator|.
name|setPropertyValue
argument_list|(
name|SVNKIT_GROUP
argument_list|,
name|propertyName
argument_list|,
name|propertyValue
argument_list|,
operator|!
name|myIsReadonly
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|setConflictHandler
parameter_list|(
name|ISVNConflictHandler
name|resolver
parameter_list|)
block|{
name|myConflictResolver
operator|=
name|resolver
expr_stmt|;
block|}
specifier|public
specifier|static
name|boolean
name|matches
parameter_list|(
name|String
name|pattern
parameter_list|,
name|String
name|fileName
parameter_list|)
block|{
if|if
condition|(
name|pattern
operator|==
literal|null
operator|||
name|fileName
operator|==
literal|null
condition|)
block|{
return|return
literal|false
return|;
block|}
name|Pattern
name|compiled
init|=
name|compileNamePatter
argument_list|(
name|pattern
argument_list|)
decl_stmt|;
if|if
condition|(
name|compiled
operator|!=
literal|null
condition|)
block|{
return|return
name|compiled
operator|.
name|matcher
argument_list|(
name|fileName
argument_list|)
operator|.
name|matches
argument_list|()
return|;
block|}
return|return
literal|false
return|;
block|}
specifier|public
name|ISVNMerger
name|createMerger
parameter_list|(
name|byte
index|[]
name|conflictStart
parameter_list|,
name|byte
index|[]
name|conflictSeparator
parameter_list|,
name|byte
index|[]
name|conflictEnd
parameter_list|)
block|{
return|return
operator|new
name|DefaultSVNMerger
argument_list|(
name|conflictStart
argument_list|,
name|conflictSeparator
argument_list|,
name|conflictEnd
argument_list|,
name|myConflictResolver
argument_list|)
return|;
block|}
specifier|public
name|ISVNConnector
name|createTunnelConnector
parameter_list|(
name|SVNURL
name|url
parameter_list|)
block|{
name|String
name|subProtocolName
init|=
name|url
operator|.
name|getProtocol
argument_list|()
operator|.
name|substring
argument_list|(
literal|"svn+"
operator|.
name|length
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|subProtocolName
operator|==
literal|null
condition|)
block|{
return|return
literal|null
return|;
block|}
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|tunnels
init|=
name|getConfigFile
argument_list|()
operator|.
name|getProperties
argument_list|(
literal|"tunnels"
argument_list|)
decl_stmt|;
specifier|final
name|String
name|tunnel
init|=
name|tunnels
operator|.
name|get
argument_list|(
name|subProtocolName
argument_list|)
decl_stmt|;
if|if
condition|(
name|tunnel
operator|==
literal|null
condition|)
block|{
return|return
literal|null
return|;
block|}
return|return
operator|new
name|SVNTunnelConnector
argument_list|(
name|subProtocolName
argument_list|,
name|tunnel
argument_list|)
return|;
block|}
specifier|public
name|DateFormat
name|getKeywordDateFormat
parameter_list|()
block|{
name|String
name|localeID
init|=
name|getConfigFile
argument_list|()
operator|.
name|getPropertyValue
argument_list|(
name|SVNKIT_GROUP
argument_list|,
name|KEYWORD_LOCALE
argument_list|)
decl_stmt|;
if|if
condition|(
name|localeID
operator|==
literal|null
condition|)
block|{
name|localeID
operator|=
name|DEFAULT_LOCALE
expr_stmt|;
block|}
name|String
name|tzID
init|=
name|getConfigFile
argument_list|()
operator|.
name|getPropertyValue
argument_list|(
name|SVNKIT_GROUP
argument_list|,
name|KEYWORD_TIMEZONE
argument_list|)
decl_stmt|;
if|if
condition|(
name|tzID
operator|==
literal|null
condition|)
block|{
name|tzID
operator|=
name|DEFAULT_TIMEZONE
expr_stmt|;
block|}
if|if
condition|(
operator|!
name|myKeywordTimezone
operator|.
name|equals
argument_list|(
name|tzID
argument_list|)
condition|)
block|{
name|TimeZone
name|tz
init|=
name|TimeZone
operator|.
name|getTimeZone
argument_list|(
name|tzID
argument_list|)
decl_stmt|;
name|myKeywordTimezone
operator|=
name|tzID
expr_stmt|;
synchronized|synchronized
init|(
name|myKeywordDateFormat
init|)
block|{
name|myKeywordDateFormat
operator|.
name|setTimeZone
argument_list|(
name|tz
argument_list|)
expr_stmt|;
block|}
block|}
if|if
condition|(
operator|!
name|myKeywordLocale
operator|.
name|equals
argument_list|(
name|localeID
argument_list|)
condition|)
block|{
name|Locale
name|newLocale
init|=
name|toLocale
argument_list|(
name|localeID
argument_list|)
decl_stmt|;
if|if
condition|(
name|newLocale
operator|==
literal|null
condition|)
block|{
name|newLocale
operator|=
name|Locale
operator|.
name|getDefault
argument_list|()
expr_stmt|;
block|}
name|myKeywordLocale
operator|=
name|localeID
expr_stmt|;
synchronized|synchronized
init|(
name|myKeywordDateFormat
init|)
block|{
name|myKeywordDateFormat
operator|.
name|setCalendar
argument_list|(
name|Calendar
operator|.
name|getInstance
argument_list|(
name|myKeywordDateFormat
operator|.
name|getTimeZone
argument_list|()
argument_list|,
name|newLocale
argument_list|)
argument_list|)
expr_stmt|;
name|myKeywordDateFormat
operator|.
name|setDateFormatSymbols
argument_list|(
operator|new
name|DateFormatSymbols
argument_list|(
name|newLocale
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
return|return
name|myKeywordDateFormat
return|;
block|}
specifier|public
name|String
index|[]
name|getPreservedConflictFileExtensions
parameter_list|()
block|{
name|String
name|value
init|=
name|getConfigFile
argument_list|()
operator|.
name|getPropertyValue
argument_list|(
name|MISCELLANY_GROUP
argument_list|,
name|PRESERVED_CONFLICT_FILE_EXTENSIONS
argument_list|)
decl_stmt|;
if|if
condition|(
name|value
operator|==
literal|null
condition|)
block|{
name|value
operator|=
literal|""
expr_stmt|;
block|}
name|Collection
argument_list|<
name|String
argument_list|>
name|tokensList
init|=
operator|new
name|ArrayList
argument_list|<
name|String
argument_list|>
argument_list|()
decl_stmt|;
for|for
control|(
name|StringTokenizer
name|tokens
init|=
operator|new
name|StringTokenizer
argument_list|(
name|value
argument_list|,
literal|" \n\r\t"
argument_list|)
init|;
name|tokens
operator|.
name|hasMoreTokens
argument_list|()
condition|;
control|)
block|{
name|String
name|token
init|=
name|tokens
operator|.
name|nextToken
argument_list|()
decl_stmt|;
if|if
condition|(
literal|""
operator|.
name|equals
argument_list|(
name|token
argument_list|)
condition|)
block|{
continue|continue;
block|}
name|tokensList
operator|.
name|add
argument_list|(
name|token
argument_list|)
expr_stmt|;
block|}
return|return
name|tokensList
operator|.
name|toArray
argument_list|(
operator|new
name|String
index|[
name|tokensList
operator|.
name|size
argument_list|()
index|]
argument_list|)
return|;
block|}
specifier|public
name|boolean
name|isAllowAllForwardMergesFromSelf
parameter_list|()
block|{
return|return
literal|false
return|;
block|}
specifier|public
name|String
name|getNativeCharset
parameter_list|()
block|{
return|return
name|System
operator|.
name|getProperty
argument_list|(
literal|"file.encoding"
argument_list|)
return|;
block|}
specifier|public
name|byte
index|[]
name|getNativeEOL
parameter_list|()
block|{
return|return
name|System
operator|.
name|getProperty
argument_list|(
literal|"line.separator"
argument_list|)
operator|.
name|getBytes
argument_list|()
return|;
block|}
specifier|public
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|getFileExtensionsToMimeTypes
parameter_list|()
block|{
name|String
name|mimeTypesFile
init|=
name|getConfigFile
argument_list|()
operator|.
name|getPropertyValue
argument_list|(
name|MISCELLANY_GROUP
argument_list|,
name|MIME_TYPES_FILE
argument_list|)
decl_stmt|;
if|if
condition|(
name|mimeTypesFile
operator|==
literal|null
condition|)
block|{
return|return
literal|null
return|;
block|}
name|BufferedReader
name|reader
init|=
literal|null
decl_stmt|;
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|extensionsToMimeTypes
init|=
operator|new
name|SVNHashMap
argument_list|()
decl_stmt|;
try|try
block|{
name|reader
operator|=
operator|new
name|BufferedReader
argument_list|(
operator|new
name|FileReader
argument_list|(
name|mimeTypesFile
argument_list|)
argument_list|)
expr_stmt|;
name|LinkedList
argument_list|<
name|String
argument_list|>
name|tokensList
init|=
operator|new
name|LinkedList
argument_list|<
name|String
argument_list|>
argument_list|()
decl_stmt|;
name|String
name|line
decl_stmt|;
while|while
condition|(
operator|(
name|line
operator|=
name|reader
operator|.
name|readLine
argument_list|()
operator|)
operator|!=
literal|null
condition|)
block|{
if|if
condition|(
name|line
operator|.
name|startsWith
argument_list|(
literal|"#"
argument_list|)
condition|)
block|{
continue|continue;
block|}
name|tokensList
operator|.
name|clear
argument_list|()
expr_stmt|;
for|for
control|(
name|StringTokenizer
name|tokens
init|=
operator|new
name|StringTokenizer
argument_list|(
name|line
argument_list|,
literal|" \t"
argument_list|)
init|;
name|tokens
operator|.
name|hasMoreTokens
argument_list|()
condition|;
control|)
block|{
name|String
name|token
init|=
name|tokens
operator|.
name|nextToken
argument_list|()
decl_stmt|;
if|if
condition|(
literal|""
operator|.
name|equals
argument_list|(
name|token
argument_list|)
condition|)
block|{
continue|continue;
block|}
name|tokensList
operator|.
name|add
argument_list|(
name|token
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|tokensList
operator|.
name|size
argument_list|()
operator|<
literal|2
condition|)
block|{
continue|continue;
block|}
name|String
name|mimeType
init|=
name|tokensList
operator|.
name|get
argument_list|(
literal|0
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|1
init|;
name|i
operator|<
name|tokensList
operator|.
name|size
argument_list|()
condition|;
name|i
operator|++
control|)
block|{
name|String
name|extension
init|=
name|tokensList
operator|.
name|get
argument_list|(
name|i
argument_list|)
decl_stmt|;
name|extensionsToMimeTypes
operator|.
name|put
argument_list|(
name|extension
argument_list|,
name|mimeType
argument_list|)
expr_stmt|;
block|}
block|}
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
return|return
literal|null
return|;
block|}
finally|finally
block|{
name|SVNFileUtil
operator|.
name|closeFile
argument_list|(
name|reader
argument_list|)
expr_stmt|;
block|}
return|return
name|extensionsToMimeTypes
return|;
block|}
specifier|public
name|String
name|getDiffCommand
parameter_list|()
block|{
return|return
name|getConfigFile
argument_list|()
operator|.
name|getPropertyValue
argument_list|(
name|HELPERS_GROUP
argument_list|,
name|DIFF_CMD
argument_list|)
return|;
block|}
specifier|public
name|void
name|setDiffCommand
parameter_list|(
name|String
name|diffCmd
parameter_list|)
block|{
name|getConfigFile
argument_list|()
operator|.
name|setPropertyValue
argument_list|(
name|HELPERS_GROUP
argument_list|,
name|DIFF_CMD
argument_list|,
name|diffCmd
argument_list|,
operator|!
name|myIsReadonly
argument_list|)
expr_stmt|;
block|}
specifier|private
name|SVNCompositeConfigFile
name|getConfigFile
parameter_list|()
block|{
if|if
condition|(
name|myConfigFile
operator|==
literal|null
condition|)
block|{
name|SVNConfigFile
operator|.
name|createDefaultConfiguration
argument_list|(
name|myConfigDirectory
argument_list|)
expr_stmt|;
name|SVNConfigFile
name|userConfig
init|=
operator|new
name|SVNConfigFile
argument_list|(
operator|new
name|Resource
argument_list|(
name|myConfigDirectory
argument_list|,
literal|"config"
argument_list|)
argument_list|)
decl_stmt|;
name|SVNConfigFile
name|systemConfig
init|=
operator|new
name|SVNConfigFile
argument_list|(
operator|new
name|Resource
argument_list|(
name|SVNFileUtil
operator|.
name|getSystemConfigurationDirectory
argument_list|()
argument_list|,
literal|"config"
argument_list|)
argument_list|)
decl_stmt|;
name|myConfigFile
operator|=
operator|new
name|SVNCompositeConfigFile
argument_list|(
name|systemConfig
argument_list|,
name|userConfig
argument_list|)
expr_stmt|;
name|myConfigFile
operator|.
name|setGroupsToOptions
argument_list|(
name|myConfigOptions
argument_list|)
expr_stmt|;
block|}
return|return
name|myConfigFile
return|;
block|}
specifier|private
specifier|static
name|Pattern
name|compileNamePatter
parameter_list|(
name|String
name|wildcard
parameter_list|)
block|{
if|if
condition|(
name|wildcard
operator|==
literal|null
condition|)
block|{
return|return
literal|null
return|;
block|}
name|StringBuffer
name|result
init|=
operator|new
name|StringBuffer
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|wildcard
operator|.
name|length
argument_list|()
condition|;
name|i
operator|++
control|)
block|{
name|char
name|ch
init|=
name|wildcard
operator|.
name|charAt
argument_list|(
name|i
argument_list|)
decl_stmt|;
switch|switch
condition|(
name|ch
condition|)
block|{
case|case
literal|'?'
case|:
name|result
operator|.
name|append
argument_list|(
literal|"."
argument_list|)
expr_stmt|;
break|break;
case|case
literal|'*'
case|:
name|result
operator|.
name|append
argument_list|(
literal|".*"
argument_list|)
expr_stmt|;
break|break;
case|case
literal|'.'
case|:
case|case
literal|'!'
case|:
case|case
literal|'$'
case|:
case|case
literal|'('
case|:
case|case
literal|')'
case|:
case|case
literal|'+'
case|:
case|case
literal|'<'
case|:
case|case
literal|'>'
case|:
case|case
literal|'|'
case|:
case|case
literal|'\\'
case|:
case|case
literal|'^'
case|:
case|case
literal|'{'
case|:
case|case
literal|'}'
case|:
name|result
operator|.
name|append
argument_list|(
literal|"\\"
argument_list|)
expr_stmt|;
default|default:
name|result
operator|.
name|append
argument_list|(
name|ch
argument_list|)
expr_stmt|;
block|}
block|}
try|try
block|{
return|return
name|Pattern
operator|.
name|compile
argument_list|(
name|result
operator|.
name|toString
argument_list|()
argument_list|)
return|;
block|}
catch|catch
parameter_list|(
name|PatternSyntaxException
name|e
parameter_list|)
block|{
return|return
literal|null
return|;
block|}
block|}
specifier|private
specifier|static
name|Locale
name|toLocale
parameter_list|(
name|String
name|str
parameter_list|)
block|{
if|if
condition|(
name|str
operator|==
literal|null
condition|)
block|{
return|return
literal|null
return|;
block|}
name|int
name|len
init|=
name|str
operator|.
name|length
argument_list|()
decl_stmt|;
if|if
condition|(
name|len
operator|!=
literal|2
operator|&&
name|len
operator|!=
literal|5
operator|&&
name|len
operator|<
literal|7
condition|)
block|{
return|return
literal|null
return|;
block|}
name|char
name|ch0
init|=
name|str
operator|.
name|charAt
argument_list|(
literal|0
argument_list|)
decl_stmt|;
name|char
name|ch1
init|=
name|str
operator|.
name|charAt
argument_list|(
literal|1
argument_list|)
decl_stmt|;
if|if
condition|(
name|ch0
operator|<
literal|'a'
operator|||
name|ch0
operator|>
literal|'z'
operator|||
name|ch1
operator|<
literal|'a'
operator|||
name|ch1
operator|>
literal|'z'
condition|)
block|{
return|return
literal|null
return|;
block|}
if|if
condition|(
name|len
operator|==
literal|2
condition|)
block|{
return|return
operator|new
name|Locale
argument_list|(
name|str
argument_list|,
literal|""
argument_list|)
return|;
block|}
if|if
condition|(
name|str
operator|.
name|charAt
argument_list|(
literal|2
argument_list|)
operator|!=
literal|'_'
condition|)
block|{
return|return
literal|null
return|;
block|}
name|char
name|ch3
init|=
name|str
operator|.
name|charAt
argument_list|(
literal|3
argument_list|)
decl_stmt|;
name|char
name|ch4
init|=
name|str
operator|.
name|charAt
argument_list|(
literal|4
argument_list|)
decl_stmt|;
if|if
condition|(
name|ch3
operator|<
literal|'A'
operator|||
name|ch3
operator|>
literal|'Z'
operator|||
name|ch4
operator|<
literal|'A'
operator|||
name|ch4
operator|>
literal|'Z'
condition|)
block|{
return|return
literal|null
return|;
block|}
if|if
condition|(
name|len
operator|==
literal|5
condition|)
block|{
return|return
operator|new
name|Locale
argument_list|(
name|str
operator|.
name|substring
argument_list|(
literal|0
argument_list|,
literal|2
argument_list|)
argument_list|,
name|str
operator|.
name|substring
argument_list|(
literal|3
argument_list|,
literal|5
argument_list|)
argument_list|)
return|;
block|}
if|if
condition|(
name|str
operator|.
name|charAt
argument_list|(
literal|5
argument_list|)
operator|!=
literal|'_'
condition|)
block|{
return|return
literal|null
return|;
block|}
return|return
operator|new
name|Locale
argument_list|(
name|str
operator|.
name|substring
argument_list|(
literal|0
argument_list|,
literal|2
argument_list|)
argument_list|,
name|str
operator|.
name|substring
argument_list|(
literal|3
argument_list|,
literal|5
argument_list|)
argument_list|,
name|str
operator|.
name|substring
argument_list|(
literal|6
argument_list|)
argument_list|)
return|;
block|}
specifier|private
specifier|static
name|File
name|getDefaultConfigDir
parameter_list|()
block|{
return|return
name|SVNWCUtil
operator|.
name|getDefaultConfigurationDirectory
argument_list|()
return|;
block|}
specifier|public
specifier|static
name|boolean
name|getBooleanValue
parameter_list|(
name|String
name|value
parameter_list|,
name|boolean
name|defaultValue
parameter_list|)
block|{
if|if
condition|(
name|value
operator|==
literal|null
condition|)
block|{
return|return
name|defaultValue
return|;
block|}
name|value
operator|=
name|value
operator|.
name|trim
argument_list|()
expr_stmt|;
return|return
name|YES
operator|.
name|equalsIgnoreCase
argument_list|(
name|value
argument_list|)
operator|||
literal|"true"
operator|.
name|equalsIgnoreCase
argument_list|(
name|value
argument_list|)
operator|||
literal|"on"
operator|.
name|equalsIgnoreCase
argument_list|(
name|value
argument_list|)
return|;
block|}
block|}
end_class

end_unit

