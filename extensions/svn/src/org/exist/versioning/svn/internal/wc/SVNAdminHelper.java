begin_unit|revision:1.0.0;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * ====================================================================  * Copyright (c) 2004-2010 TMate Software Ltd.  All rights reserved.  *  * This software is licensed as described in the file COPYING, which  * you should have received as part of this distribution.  The terms  * are also available at http://svnkit.com/license.html  * If newer versions of this license are posted there, you may use a  * newer version instead, at your option.  * ====================================================================  */
end_comment

begin_package
package|package
name|org
operator|.
name|exist
operator|.
name|versioning
operator|.
name|svn
operator|.
name|internal
operator|.
name|wc
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|File
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|InputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|OutputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Iterator
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|LinkedList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|org
operator|.
name|tmatesoft
operator|.
name|svn
operator|.
name|core
operator|.
name|SVNErrorCode
import|;
end_import

begin_import
import|import
name|org
operator|.
name|tmatesoft
operator|.
name|svn
operator|.
name|core
operator|.
name|SVNErrorMessage
import|;
end_import

begin_import
import|import
name|org
operator|.
name|tmatesoft
operator|.
name|svn
operator|.
name|core
operator|.
name|SVNException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|tmatesoft
operator|.
name|svn
operator|.
name|core
operator|.
name|SVNNodeKind
import|;
end_import

begin_import
import|import
name|org
operator|.
name|tmatesoft
operator|.
name|svn
operator|.
name|core
operator|.
name|SVNProperties
import|;
end_import

begin_import
import|import
name|org
operator|.
name|tmatesoft
operator|.
name|svn
operator|.
name|core
operator|.
name|SVNProperty
import|;
end_import

begin_import
import|import
name|org
operator|.
name|tmatesoft
operator|.
name|svn
operator|.
name|core
operator|.
name|SVNRevisionProperty
import|;
end_import

begin_import
import|import
name|org
operator|.
name|tmatesoft
operator|.
name|svn
operator|.
name|core
operator|.
name|SVNPropertyValue
import|;
end_import

begin_import
import|import
name|org
operator|.
name|tmatesoft
operator|.
name|svn
operator|.
name|core
operator|.
name|internal
operator|.
name|io
operator|.
name|fs
operator|.
name|FSEntry
import|;
end_import

begin_import
import|import
name|org
operator|.
name|tmatesoft
operator|.
name|svn
operator|.
name|core
operator|.
name|internal
operator|.
name|io
operator|.
name|fs
operator|.
name|FSFS
import|;
end_import

begin_import
import|import
name|org
operator|.
name|tmatesoft
operator|.
name|svn
operator|.
name|core
operator|.
name|internal
operator|.
name|io
operator|.
name|fs
operator|.
name|FSRepositoryUtil
import|;
end_import

begin_import
import|import
name|org
operator|.
name|tmatesoft
operator|.
name|svn
operator|.
name|core
operator|.
name|internal
operator|.
name|io
operator|.
name|fs
operator|.
name|FSRevisionNode
import|;
end_import

begin_import
import|import
name|org
operator|.
name|tmatesoft
operator|.
name|svn
operator|.
name|core
operator|.
name|internal
operator|.
name|io
operator|.
name|fs
operator|.
name|FSRevisionRoot
import|;
end_import

begin_import
import|import
name|org
operator|.
name|tmatesoft
operator|.
name|svn
operator|.
name|core
operator|.
name|internal
operator|.
name|util
operator|.
name|SVNPathUtil
import|;
end_import

begin_import
import|import
name|org
operator|.
name|tmatesoft
operator|.
name|svn
operator|.
name|core
operator|.
name|io
operator|.
name|ISVNEditor
import|;
end_import

begin_import
import|import
name|org
operator|.
name|tmatesoft
operator|.
name|svn
operator|.
name|core
operator|.
name|io
operator|.
name|SVNRepository
import|;
end_import

begin_import
import|import
name|org
operator|.
name|tmatesoft
operator|.
name|svn
operator|.
name|core
operator|.
name|io
operator|.
name|diff
operator|.
name|SVNDiffWindow
import|;
end_import

begin_import
import|import
name|org
operator|.
name|tmatesoft
operator|.
name|svn
operator|.
name|core
operator|.
name|wc
operator|.
name|SVNRevision
import|;
end_import

begin_import
import|import
name|org
operator|.
name|tmatesoft
operator|.
name|svn
operator|.
name|util
operator|.
name|SVNDebugLog
import|;
end_import

begin_import
import|import
name|org
operator|.
name|tmatesoft
operator|.
name|svn
operator|.
name|util
operator|.
name|SVNLogType
import|;
end_import

begin_comment
comment|/**  * @version 1.3  * @author  TMate Software Ltd.  */
end_comment

begin_class
specifier|public
class|class
name|SVNAdminHelper
block|{
specifier|public
specifier|static
name|int
name|writeRevisionProperties
parameter_list|(
name|SVNRepository
name|toRepository
parameter_list|,
name|long
name|revision
parameter_list|,
name|SVNProperties
name|revProps
parameter_list|)
throws|throws
name|SVNException
block|{
name|int
name|filteredCount
init|=
literal|0
decl_stmt|;
for|for
control|(
name|Iterator
name|propNamesIter
init|=
name|revProps
operator|.
name|nameSet
argument_list|()
operator|.
name|iterator
argument_list|()
init|;
name|propNamesIter
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|String
name|propName
init|=
operator|(
name|String
operator|)
name|propNamesIter
operator|.
name|next
argument_list|()
decl_stmt|;
name|SVNPropertyValue
name|propValue
init|=
name|revProps
operator|.
name|getSVNPropertyValue
argument_list|(
name|propName
argument_list|)
decl_stmt|;
if|if
condition|(
name|propName
operator|.
name|startsWith
argument_list|(
name|SVNProperty
operator|.
name|SVN_SYNC_PREFIX
argument_list|)
condition|)
block|{
name|filteredCount
operator|++
expr_stmt|;
block|}
else|else
block|{
name|toRepository
operator|.
name|setRevisionPropertyValue
argument_list|(
name|revision
argument_list|,
name|propName
argument_list|,
name|propValue
argument_list|)
expr_stmt|;
block|}
block|}
return|return
name|filteredCount
return|;
block|}
specifier|public
specifier|static
name|void
name|removePropertiesNotInSource
parameter_list|(
name|SVNRepository
name|repository
parameter_list|,
name|long
name|revision
parameter_list|,
name|SVNProperties
name|sourceProps
parameter_list|,
name|SVNProperties
name|targetProps
parameter_list|)
throws|throws
name|SVNException
block|{
for|for
control|(
name|Iterator
name|propNamesIter
init|=
name|targetProps
operator|.
name|nameSet
argument_list|()
operator|.
name|iterator
argument_list|()
init|;
name|propNamesIter
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|String
name|propName
init|=
operator|(
name|String
operator|)
name|propNamesIter
operator|.
name|next
argument_list|()
decl_stmt|;
if|if
condition|(
name|sourceProps
operator|.
name|getSVNPropertyValue
argument_list|(
name|propName
argument_list|)
operator|==
literal|null
condition|)
block|{
name|repository
operator|.
name|setRevisionPropertyValue
argument_list|(
name|revision
argument_list|,
name|propName
argument_list|,
literal|null
argument_list|)
expr_stmt|;
block|}
block|}
block|}
specifier|public
specifier|static
name|FSFS
name|openRepository
parameter_list|(
name|File
name|reposRootPath
parameter_list|,
name|boolean
name|openFS
parameter_list|)
throws|throws
name|SVNException
block|{
name|FSFS
name|fsfs
init|=
operator|new
name|FSFS
argument_list|(
name|reposRootPath
argument_list|)
decl_stmt|;
if|if
condition|(
name|openFS
condition|)
block|{
name|fsfs
operator|.
name|open
argument_list|()
expr_stmt|;
block|}
else|else
block|{
name|fsfs
operator|.
name|openRoot
argument_list|()
expr_stmt|;
name|fsfs
operator|.
name|getFSType
argument_list|()
expr_stmt|;
block|}
return|return
name|fsfs
return|;
block|}
specifier|public
specifier|static
name|void
name|closeRepository
parameter_list|(
name|FSFS
name|fsfs
parameter_list|)
block|{
if|if
condition|(
name|fsfs
operator|!=
literal|null
condition|)
block|{
try|try
block|{
name|fsfs
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|SVNException
name|e
parameter_list|)
block|{
name|SVNDebugLog
operator|.
name|getDefaultLog
argument_list|()
operator|.
name|logFine
argument_list|(
name|SVNLogType
operator|.
name|FSFS
argument_list|,
name|e
argument_list|)
expr_stmt|;
name|SVNDebugLog
operator|.
name|getDefaultLog
argument_list|()
operator|.
name|logFine
argument_list|(
name|SVNLogType
operator|.
name|FSFS
argument_list|,
name|e
operator|.
name|getMessage
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
block|}
specifier|public
specifier|static
name|FSFS
name|openRepositoryForRecovery
parameter_list|(
name|File
name|reposRootPath
parameter_list|)
throws|throws
name|SVNException
block|{
name|FSFS
name|fsfs
init|=
operator|new
name|FSFS
argument_list|(
name|reposRootPath
argument_list|)
decl_stmt|;
name|fsfs
operator|.
name|openForRecovery
argument_list|()
expr_stmt|;
return|return
name|fsfs
return|;
block|}
specifier|public
specifier|static
name|long
name|getRevisionNumber
parameter_list|(
name|SVNRevision
name|revision
parameter_list|,
name|long
name|youngestRevision
parameter_list|,
name|FSFS
name|fsfs
parameter_list|)
throws|throws
name|SVNException
block|{
name|long
name|revNumber
init|=
operator|-
literal|1
decl_stmt|;
if|if
condition|(
name|revision
operator|.
name|getNumber
argument_list|()
operator|>=
literal|0
condition|)
block|{
name|revNumber
operator|=
name|revision
operator|.
name|getNumber
argument_list|()
expr_stmt|;
block|}
if|else if
condition|(
name|revision
operator|==
name|SVNRevision
operator|.
name|HEAD
condition|)
block|{
name|revNumber
operator|=
name|youngestRevision
expr_stmt|;
block|}
if|else if
condition|(
name|revision
operator|.
name|getDate
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|revNumber
operator|=
name|fsfs
operator|.
name|getDatedRevision
argument_list|(
name|revision
operator|.
name|getDate
argument_list|()
argument_list|)
expr_stmt|;
block|}
if|else if
condition|(
name|revision
operator|!=
name|SVNRevision
operator|.
name|UNDEFINED
condition|)
block|{
name|SVNErrorMessage
name|err
init|=
name|SVNErrorMessage
operator|.
name|create
argument_list|(
name|SVNErrorCode
operator|.
name|CL_ARG_PARSING_ERROR
argument_list|,
literal|"Invalid revision specifier"
argument_list|)
decl_stmt|;
name|SVNErrorManager
operator|.
name|error
argument_list|(
name|err
argument_list|,
name|SVNLogType
operator|.
name|FSFS
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|revNumber
operator|>
name|youngestRevision
condition|)
block|{
name|SVNErrorMessage
name|err
init|=
name|SVNErrorMessage
operator|.
name|create
argument_list|(
name|SVNErrorCode
operator|.
name|CL_ARG_PARSING_ERROR
argument_list|,
literal|"Revisions must not be greater than the youngest revision ({0})"
argument_list|,
operator|new
name|Long
argument_list|(
name|youngestRevision
argument_list|)
argument_list|)
decl_stmt|;
name|SVNErrorManager
operator|.
name|error
argument_list|(
name|err
argument_list|,
name|SVNLogType
operator|.
name|FSFS
argument_list|)
expr_stmt|;
block|}
return|return
name|revNumber
return|;
block|}
specifier|public
specifier|static
name|void
name|writeProperties
parameter_list|(
name|SVNProperties
name|props
parameter_list|,
name|SVNProperties
name|oldProps
parameter_list|,
name|OutputStream
name|dumpStream
parameter_list|)
throws|throws
name|SVNException
block|{
name|LinkedList
name|propNames
init|=
operator|new
name|LinkedList
argument_list|()
decl_stmt|;
for|for
control|(
name|Iterator
name|names
init|=
name|props
operator|.
name|nameSet
argument_list|()
operator|.
name|iterator
argument_list|()
init|;
name|names
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|String
name|propName
init|=
operator|(
name|String
operator|)
name|names
operator|.
name|next
argument_list|()
decl_stmt|;
if|if
condition|(
name|SVNRevisionProperty
operator|.
name|LOG
operator|.
name|equals
argument_list|(
name|propName
argument_list|)
condition|)
block|{
name|propNames
operator|.
name|addFirst
argument_list|(
name|propName
argument_list|)
expr_stmt|;
block|}
if|else if
condition|(
name|SVNRevisionProperty
operator|.
name|AUTHOR
operator|.
name|equals
argument_list|(
name|propName
argument_list|)
condition|)
block|{
if|if
condition|(
name|propNames
operator|.
name|contains
argument_list|(
name|SVNRevisionProperty
operator|.
name|LOG
argument_list|)
condition|)
block|{
name|int
name|ind
init|=
name|propNames
operator|.
name|indexOf
argument_list|(
name|SVNRevisionProperty
operator|.
name|LOG
argument_list|)
decl_stmt|;
name|propNames
operator|.
name|add
argument_list|(
name|ind
operator|+
literal|1
argument_list|,
name|propName
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|propNames
operator|.
name|addFirst
argument_list|(
name|propName
argument_list|)
expr_stmt|;
block|}
block|}
else|else
block|{
name|propNames
operator|.
name|addLast
argument_list|(
name|propName
argument_list|)
expr_stmt|;
block|}
block|}
for|for
control|(
name|Iterator
name|names
init|=
name|propNames
operator|.
name|iterator
argument_list|()
init|;
name|names
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|String
name|propName
init|=
operator|(
name|String
operator|)
name|names
operator|.
name|next
argument_list|()
decl_stmt|;
name|SVNPropertyValue
name|propValue
init|=
name|props
operator|.
name|getSVNPropertyValue
argument_list|(
name|propName
argument_list|)
decl_stmt|;
if|if
condition|(
name|oldProps
operator|!=
literal|null
condition|)
block|{
name|SVNPropertyValue
name|oldValue
init|=
name|oldProps
operator|.
name|getSVNPropertyValue
argument_list|(
name|propName
argument_list|)
decl_stmt|;
if|if
condition|(
name|oldValue
operator|!=
literal|null
operator|&&
name|oldValue
operator|.
name|equals
argument_list|(
name|propValue
argument_list|)
condition|)
block|{
continue|continue;
block|}
block|}
name|SVNWCProperties
operator|.
name|appendProperty
argument_list|(
name|propName
argument_list|,
name|propValue
argument_list|,
name|dumpStream
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|oldProps
operator|!=
literal|null
condition|)
block|{
for|for
control|(
name|Iterator
name|names
init|=
name|oldProps
operator|.
name|nameSet
argument_list|()
operator|.
name|iterator
argument_list|()
init|;
name|names
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|String
name|propName
init|=
operator|(
name|String
operator|)
name|names
operator|.
name|next
argument_list|()
decl_stmt|;
if|if
condition|(
name|props
operator|.
name|containsName
argument_list|(
name|propName
argument_list|)
condition|)
block|{
continue|continue;
block|}
name|SVNWCProperties
operator|.
name|appendPropertyDeleted
argument_list|(
name|propName
argument_list|,
name|dumpStream
argument_list|)
expr_stmt|;
block|}
block|}
try|try
block|{
name|byte
index|[]
name|terminator
init|=
literal|"PROPS-END\n"
operator|.
name|getBytes
argument_list|(
literal|"UTF-8"
argument_list|)
decl_stmt|;
name|dumpStream
operator|.
name|write
argument_list|(
name|terminator
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|ioe
parameter_list|)
block|{
name|SVNErrorMessage
name|err
init|=
name|SVNErrorMessage
operator|.
name|create
argument_list|(
name|SVNErrorCode
operator|.
name|IO_ERROR
argument_list|,
name|ioe
operator|.
name|getLocalizedMessage
argument_list|()
argument_list|)
decl_stmt|;
name|SVNErrorManager
operator|.
name|error
argument_list|(
name|err
argument_list|,
name|ioe
argument_list|,
name|SVNLogType
operator|.
name|FSFS
argument_list|)
expr_stmt|;
block|}
block|}
specifier|public
specifier|static
name|void
name|deltifyDir
parameter_list|(
name|FSFS
name|fsfs
parameter_list|,
name|FSRevisionRoot
name|srcRoot
parameter_list|,
name|String
name|srcParentDir
parameter_list|,
name|String
name|srcEntry
parameter_list|,
name|FSRevisionRoot
name|tgtRoot
parameter_list|,
name|String
name|tgtFullPath
parameter_list|,
name|ISVNEditor
name|editor
parameter_list|)
throws|throws
name|SVNException
block|{
if|if
condition|(
name|srcParentDir
operator|==
literal|null
condition|)
block|{
name|generateNotADirError
argument_list|(
literal|"source parent"
argument_list|,
name|srcParentDir
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|tgtFullPath
operator|==
literal|null
condition|)
block|{
name|SVNErrorMessage
name|err
init|=
name|SVNErrorMessage
operator|.
name|create
argument_list|(
name|SVNErrorCode
operator|.
name|FS_PATH_SYNTAX
argument_list|,
literal|"Invalid target path"
argument_list|)
decl_stmt|;
name|SVNErrorManager
operator|.
name|error
argument_list|(
name|err
argument_list|,
name|SVNLogType
operator|.
name|FSFS
argument_list|)
expr_stmt|;
block|}
name|String
name|srcFullPath
init|=
name|SVNPathUtil
operator|.
name|getAbsolutePath
argument_list|(
name|SVNPathUtil
operator|.
name|append
argument_list|(
name|srcParentDir
argument_list|,
name|srcEntry
argument_list|)
argument_list|)
decl_stmt|;
name|SVNNodeKind
name|tgtKind
init|=
name|tgtRoot
operator|.
name|checkNodeKind
argument_list|(
name|tgtFullPath
argument_list|)
decl_stmt|;
name|SVNNodeKind
name|srcKind
init|=
name|srcRoot
operator|.
name|checkNodeKind
argument_list|(
name|srcFullPath
argument_list|)
decl_stmt|;
if|if
condition|(
name|tgtKind
operator|==
name|SVNNodeKind
operator|.
name|NONE
operator|&&
name|srcKind
operator|==
name|SVNNodeKind
operator|.
name|NONE
condition|)
block|{
name|editor
operator|.
name|closeEdit
argument_list|()
expr_stmt|;
return|return;
block|}
if|if
condition|(
name|srcEntry
operator|==
literal|null
operator|&&
operator|(
name|srcKind
operator|!=
name|SVNNodeKind
operator|.
name|DIR
operator|||
name|tgtKind
operator|!=
name|SVNNodeKind
operator|.
name|DIR
operator|)
condition|)
block|{
name|SVNErrorMessage
name|err
init|=
name|SVNErrorMessage
operator|.
name|create
argument_list|(
name|SVNErrorCode
operator|.
name|FS_PATH_SYNTAX
argument_list|,
literal|"Invalid editor anchoring; at least one of the input paths is not a directory and there was no source entry"
argument_list|)
decl_stmt|;
name|SVNErrorManager
operator|.
name|error
argument_list|(
name|err
argument_list|,
name|SVNLogType
operator|.
name|FSFS
argument_list|)
expr_stmt|;
block|}
name|editor
operator|.
name|targetRevision
argument_list|(
name|tgtRoot
operator|.
name|getRevision
argument_list|()
argument_list|)
expr_stmt|;
name|long
name|rootRevision
init|=
name|srcRoot
operator|.
name|getRevision
argument_list|()
decl_stmt|;
if|if
condition|(
name|tgtKind
operator|==
name|SVNNodeKind
operator|.
name|NONE
condition|)
block|{
name|editor
operator|.
name|openRoot
argument_list|(
name|rootRevision
argument_list|)
expr_stmt|;
name|editor
operator|.
name|deleteEntry
argument_list|(
name|srcEntry
argument_list|,
operator|-
literal|1
argument_list|)
expr_stmt|;
name|editor
operator|.
name|closeDir
argument_list|()
expr_stmt|;
name|editor
operator|.
name|closeEdit
argument_list|()
expr_stmt|;
return|return;
block|}
if|if
condition|(
name|srcKind
operator|==
name|SVNNodeKind
operator|.
name|NONE
condition|)
block|{
name|editor
operator|.
name|openRoot
argument_list|(
name|rootRevision
argument_list|)
expr_stmt|;
name|addFileOrDir
argument_list|(
name|fsfs
argument_list|,
name|editor
argument_list|,
name|srcRoot
argument_list|,
name|tgtRoot
argument_list|,
name|tgtFullPath
argument_list|,
name|srcEntry
argument_list|,
name|tgtKind
argument_list|)
expr_stmt|;
name|editor
operator|.
name|closeDir
argument_list|()
expr_stmt|;
name|editor
operator|.
name|closeEdit
argument_list|()
expr_stmt|;
return|return;
block|}
name|FSRevisionNode
name|srcNode
init|=
name|srcRoot
operator|.
name|getRevisionNode
argument_list|(
name|srcFullPath
argument_list|)
decl_stmt|;
name|FSRevisionNode
name|tgtNode
init|=
name|tgtRoot
operator|.
name|getRevisionNode
argument_list|(
name|tgtFullPath
argument_list|)
decl_stmt|;
name|int
name|distance
init|=
name|srcNode
operator|.
name|getId
argument_list|()
operator|.
name|compareTo
argument_list|(
name|tgtNode
operator|.
name|getId
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|distance
operator|==
literal|0
condition|)
block|{
name|editor
operator|.
name|closeEdit
argument_list|()
expr_stmt|;
return|return;
block|}
if|else if
condition|(
name|srcEntry
operator|!=
literal|null
condition|)
block|{
if|if
condition|(
name|srcKind
operator|!=
name|tgtKind
operator|||
name|distance
operator|==
operator|-
literal|1
condition|)
block|{
name|editor
operator|.
name|openRoot
argument_list|(
name|rootRevision
argument_list|)
expr_stmt|;
name|editor
operator|.
name|deleteEntry
argument_list|(
name|srcEntry
argument_list|,
operator|-
literal|1
argument_list|)
expr_stmt|;
name|addFileOrDir
argument_list|(
name|fsfs
argument_list|,
name|editor
argument_list|,
name|srcRoot
argument_list|,
name|tgtRoot
argument_list|,
name|tgtFullPath
argument_list|,
name|srcEntry
argument_list|,
name|tgtKind
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|editor
operator|.
name|openRoot
argument_list|(
name|rootRevision
argument_list|)
expr_stmt|;
name|replaceFileOrDir
argument_list|(
name|fsfs
argument_list|,
name|editor
argument_list|,
name|srcRoot
argument_list|,
name|tgtRoot
argument_list|,
name|srcFullPath
argument_list|,
name|tgtFullPath
argument_list|,
name|srcEntry
argument_list|,
name|tgtKind
argument_list|)
expr_stmt|;
block|}
name|editor
operator|.
name|closeDir
argument_list|()
expr_stmt|;
name|editor
operator|.
name|closeEdit
argument_list|()
expr_stmt|;
block|}
else|else
block|{
name|editor
operator|.
name|openRoot
argument_list|(
name|rootRevision
argument_list|)
expr_stmt|;
name|deltifyDirs
argument_list|(
name|fsfs
argument_list|,
name|editor
argument_list|,
name|srcRoot
argument_list|,
name|tgtRoot
argument_list|,
name|srcFullPath
argument_list|,
name|tgtFullPath
argument_list|,
literal|""
argument_list|)
expr_stmt|;
name|editor
operator|.
name|closeDir
argument_list|()
expr_stmt|;
name|editor
operator|.
name|closeEdit
argument_list|()
expr_stmt|;
block|}
block|}
specifier|public
specifier|static
name|void
name|generateIncompleteDataError
parameter_list|()
throws|throws
name|SVNException
block|{
name|SVNDebugLog
operator|.
name|getDefaultLog
argument_list|()
operator|.
name|logFine
argument_list|(
name|SVNLogType
operator|.
name|FSFS
argument_list|,
operator|new
name|Exception
argument_list|()
argument_list|)
expr_stmt|;
name|SVNErrorMessage
name|err
init|=
name|SVNErrorMessage
operator|.
name|create
argument_list|(
name|SVNErrorCode
operator|.
name|INCOMPLETE_DATA
argument_list|,
literal|"Premature end of content data in dumpstream"
argument_list|)
decl_stmt|;
name|SVNErrorManager
operator|.
name|error
argument_list|(
name|err
argument_list|,
name|SVNLogType
operator|.
name|FSFS
argument_list|)
expr_stmt|;
block|}
specifier|public
specifier|static
name|void
name|generateStreamMalformedError
parameter_list|()
throws|throws
name|SVNException
block|{
name|SVNDebugLog
operator|.
name|getDefaultLog
argument_list|()
operator|.
name|logFine
argument_list|(
name|SVNLogType
operator|.
name|FSFS
argument_list|,
operator|new
name|Exception
argument_list|()
argument_list|)
expr_stmt|;
name|SVNErrorMessage
name|err
init|=
name|SVNErrorMessage
operator|.
name|create
argument_list|(
name|SVNErrorCode
operator|.
name|STREAM_MALFORMED_DATA
argument_list|,
literal|"Dumpstream data appears to be malformed"
argument_list|)
decl_stmt|;
name|SVNErrorManager
operator|.
name|error
argument_list|(
name|err
argument_list|,
name|SVNLogType
operator|.
name|FSFS
argument_list|)
expr_stmt|;
block|}
specifier|public
specifier|static
name|int
name|readKeyOrValue
parameter_list|(
name|InputStream
name|dumpStream
parameter_list|,
name|byte
index|[]
name|buffer
parameter_list|,
name|int
name|len
parameter_list|)
throws|throws
name|SVNException
throws|,
name|IOException
block|{
name|int
name|read
init|=
literal|0
decl_stmt|;
while|while
condition|(
name|len
operator|-
name|read
operator|>
literal|0
condition|)
block|{
name|int
name|r
init|=
name|dumpStream
operator|.
name|read
argument_list|(
name|buffer
argument_list|,
name|read
argument_list|,
name|len
operator|-
name|read
argument_list|)
decl_stmt|;
if|if
condition|(
name|r
operator|<
literal|0
condition|)
block|{
break|break;
block|}
name|read
operator|+=
name|r
expr_stmt|;
block|}
if|if
condition|(
name|read
operator|!=
name|len
condition|)
block|{
name|SVNAdminHelper
operator|.
name|generateIncompleteDataError
argument_list|()
expr_stmt|;
block|}
if|if
condition|(
name|buffer
index|[
name|len
operator|-
literal|1
index|]
operator|!=
literal|'\n'
condition|)
block|{
name|SVNAdminHelper
operator|.
name|generateStreamMalformedError
argument_list|()
expr_stmt|;
block|}
return|return
name|read
operator|-
literal|1
return|;
block|}
specifier|private
specifier|static
name|void
name|addFileOrDir
parameter_list|(
name|FSFS
name|fsfs
parameter_list|,
name|ISVNEditor
name|editor
parameter_list|,
name|FSRevisionRoot
name|srcRoot
parameter_list|,
name|FSRevisionRoot
name|tgtRoot
parameter_list|,
name|String
name|tgtPath
parameter_list|,
name|String
name|editPath
parameter_list|,
name|SVNNodeKind
name|tgtKind
parameter_list|)
throws|throws
name|SVNException
block|{
if|if
condition|(
name|tgtKind
operator|==
name|SVNNodeKind
operator|.
name|DIR
condition|)
block|{
name|editor
operator|.
name|addDir
argument_list|(
name|editPath
argument_list|,
literal|null
argument_list|,
operator|-
literal|1
argument_list|)
expr_stmt|;
name|deltifyDirs
argument_list|(
name|fsfs
argument_list|,
name|editor
argument_list|,
name|srcRoot
argument_list|,
name|tgtRoot
argument_list|,
literal|null
argument_list|,
name|tgtPath
argument_list|,
name|editPath
argument_list|)
expr_stmt|;
name|editor
operator|.
name|closeDir
argument_list|()
expr_stmt|;
block|}
else|else
block|{
name|editor
operator|.
name|addFile
argument_list|(
name|editPath
argument_list|,
literal|null
argument_list|,
operator|-
literal|1
argument_list|)
expr_stmt|;
name|deltifyFiles
argument_list|(
name|fsfs
argument_list|,
name|editor
argument_list|,
name|srcRoot
argument_list|,
name|tgtRoot
argument_list|,
literal|null
argument_list|,
name|tgtPath
argument_list|,
name|editPath
argument_list|)
expr_stmt|;
name|FSRevisionNode
name|tgtNode
init|=
name|tgtRoot
operator|.
name|getRevisionNode
argument_list|(
name|tgtPath
argument_list|)
decl_stmt|;
name|editor
operator|.
name|closeFile
argument_list|(
name|editPath
argument_list|,
name|tgtNode
operator|.
name|getFileMD5Checksum
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
specifier|private
specifier|static
name|void
name|replaceFileOrDir
parameter_list|(
name|FSFS
name|fsfs
parameter_list|,
name|ISVNEditor
name|editor
parameter_list|,
name|FSRevisionRoot
name|srcRoot
parameter_list|,
name|FSRevisionRoot
name|tgtRoot
parameter_list|,
name|String
name|srcPath
parameter_list|,
name|String
name|tgtPath
parameter_list|,
name|String
name|editPath
parameter_list|,
name|SVNNodeKind
name|tgtKind
parameter_list|)
throws|throws
name|SVNException
block|{
name|long
name|baseRevision
init|=
name|srcRoot
operator|.
name|getRevision
argument_list|()
decl_stmt|;
if|if
condition|(
name|tgtKind
operator|==
name|SVNNodeKind
operator|.
name|DIR
condition|)
block|{
name|editor
operator|.
name|openDir
argument_list|(
name|editPath
argument_list|,
name|baseRevision
argument_list|)
expr_stmt|;
name|deltifyDirs
argument_list|(
name|fsfs
argument_list|,
name|editor
argument_list|,
name|srcRoot
argument_list|,
name|tgtRoot
argument_list|,
name|srcPath
argument_list|,
name|tgtPath
argument_list|,
name|editPath
argument_list|)
expr_stmt|;
name|editor
operator|.
name|closeDir
argument_list|()
expr_stmt|;
block|}
else|else
block|{
name|editor
operator|.
name|openFile
argument_list|(
name|editPath
argument_list|,
name|baseRevision
argument_list|)
expr_stmt|;
name|deltifyFiles
argument_list|(
name|fsfs
argument_list|,
name|editor
argument_list|,
name|srcRoot
argument_list|,
name|tgtRoot
argument_list|,
name|srcPath
argument_list|,
name|tgtPath
argument_list|,
name|editPath
argument_list|)
expr_stmt|;
name|FSRevisionNode
name|tgtNode
init|=
name|tgtRoot
operator|.
name|getRevisionNode
argument_list|(
name|tgtPath
argument_list|)
decl_stmt|;
name|editor
operator|.
name|closeFile
argument_list|(
name|editPath
argument_list|,
name|tgtNode
operator|.
name|getFileMD5Checksum
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
specifier|private
specifier|static
name|void
name|deltifyFiles
parameter_list|(
name|FSFS
name|fsfs
parameter_list|,
name|ISVNEditor
name|editor
parameter_list|,
name|FSRevisionRoot
name|srcRoot
parameter_list|,
name|FSRevisionRoot
name|tgtRoot
parameter_list|,
name|String
name|srcPath
parameter_list|,
name|String
name|tgtPath
parameter_list|,
name|String
name|editPath
parameter_list|)
throws|throws
name|SVNException
block|{
name|deltifyProperties
argument_list|(
name|fsfs
argument_list|,
name|editor
argument_list|,
name|srcRoot
argument_list|,
name|tgtRoot
argument_list|,
name|srcPath
argument_list|,
name|tgtPath
argument_list|,
name|editPath
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|boolean
name|changed
init|=
literal|false
decl_stmt|;
if|if
condition|(
name|srcPath
operator|!=
literal|null
condition|)
block|{
name|changed
operator|=
name|FSRepositoryUtil
operator|.
name|areFileContentsChanged
argument_list|(
name|srcRoot
argument_list|,
name|srcPath
argument_list|,
name|tgtRoot
argument_list|,
name|tgtPath
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|changed
condition|)
block|{
name|String
name|srcHexDigest
init|=
literal|null
decl_stmt|;
if|if
condition|(
name|srcPath
operator|!=
literal|null
condition|)
block|{
name|FSRevisionNode
name|srcNode
init|=
name|srcRoot
operator|.
name|getRevisionNode
argument_list|(
name|srcPath
argument_list|)
decl_stmt|;
name|srcHexDigest
operator|=
name|srcNode
operator|.
name|getFileMD5Checksum
argument_list|()
expr_stmt|;
block|}
name|editor
operator|.
name|applyTextDelta
argument_list|(
name|editPath
argument_list|,
name|srcHexDigest
argument_list|)
expr_stmt|;
name|editor
operator|.
name|textDeltaChunk
argument_list|(
name|editPath
argument_list|,
name|SVNDiffWindow
operator|.
name|EMPTY
argument_list|)
expr_stmt|;
block|}
block|}
specifier|private
specifier|static
name|void
name|deltifyDirs
parameter_list|(
name|FSFS
name|fsfs
parameter_list|,
name|ISVNEditor
name|editor
parameter_list|,
name|FSRevisionRoot
name|srcRoot
parameter_list|,
name|FSRevisionRoot
name|tgtRoot
parameter_list|,
name|String
name|srcPath
parameter_list|,
name|String
name|tgtPath
parameter_list|,
name|String
name|editPath
parameter_list|)
throws|throws
name|SVNException
block|{
name|deltifyProperties
argument_list|(
name|fsfs
argument_list|,
name|editor
argument_list|,
name|srcRoot
argument_list|,
name|tgtRoot
argument_list|,
name|srcPath
argument_list|,
name|tgtPath
argument_list|,
name|editPath
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|FSRevisionNode
name|targetNode
init|=
name|tgtRoot
operator|.
name|getRevisionNode
argument_list|(
name|tgtPath
argument_list|)
decl_stmt|;
name|Map
name|targetEntries
init|=
name|targetNode
operator|.
name|getDirEntries
argument_list|(
name|fsfs
argument_list|)
decl_stmt|;
name|Map
name|sourceEntries
init|=
literal|null
decl_stmt|;
if|if
condition|(
name|srcPath
operator|!=
literal|null
condition|)
block|{
name|FSRevisionNode
name|sourceNode
init|=
name|srcRoot
operator|.
name|getRevisionNode
argument_list|(
name|srcPath
argument_list|)
decl_stmt|;
name|sourceEntries
operator|=
name|sourceNode
operator|.
name|getDirEntries
argument_list|(
name|fsfs
argument_list|)
expr_stmt|;
block|}
for|for
control|(
name|Iterator
name|tgtEntries
init|=
name|targetEntries
operator|.
name|keySet
argument_list|()
operator|.
name|iterator
argument_list|()
init|;
name|tgtEntries
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|String
name|name
init|=
operator|(
name|String
operator|)
name|tgtEntries
operator|.
name|next
argument_list|()
decl_stmt|;
name|FSEntry
name|tgtEntry
init|=
operator|(
name|FSEntry
operator|)
name|targetEntries
operator|.
name|get
argument_list|(
name|name
argument_list|)
decl_stmt|;
name|SVNNodeKind
name|tgtKind
init|=
name|tgtEntry
operator|.
name|getType
argument_list|()
decl_stmt|;
name|String
name|targetFullPath
init|=
name|SVNPathUtil
operator|.
name|getAbsolutePath
argument_list|(
name|SVNPathUtil
operator|.
name|append
argument_list|(
name|tgtPath
argument_list|,
name|tgtEntry
operator|.
name|getName
argument_list|()
argument_list|)
argument_list|)
decl_stmt|;
name|String
name|editFullPath
init|=
name|SVNPathUtil
operator|.
name|getAbsolutePath
argument_list|(
name|SVNPathUtil
operator|.
name|append
argument_list|(
name|editPath
argument_list|,
name|tgtEntry
operator|.
name|getName
argument_list|()
argument_list|)
argument_list|)
decl_stmt|;
if|if
condition|(
name|sourceEntries
operator|!=
literal|null
operator|&&
name|sourceEntries
operator|.
name|containsKey
argument_list|(
name|name
argument_list|)
condition|)
block|{
name|FSEntry
name|srcEntry
init|=
operator|(
name|FSEntry
operator|)
name|sourceEntries
operator|.
name|get
argument_list|(
name|name
argument_list|)
decl_stmt|;
name|String
name|sourceFullPath
init|=
name|SVNPathUtil
operator|.
name|getAbsolutePath
argument_list|(
name|SVNPathUtil
operator|.
name|append
argument_list|(
name|srcPath
argument_list|,
name|tgtEntry
operator|.
name|getName
argument_list|()
argument_list|)
argument_list|)
decl_stmt|;
name|SVNNodeKind
name|srcKind
init|=
name|srcEntry
operator|.
name|getType
argument_list|()
decl_stmt|;
name|int
name|distance
init|=
name|srcEntry
operator|.
name|getId
argument_list|()
operator|.
name|compareTo
argument_list|(
name|tgtEntry
operator|.
name|getId
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|srcKind
operator|!=
name|tgtKind
operator|||
name|distance
operator|==
operator|-
literal|1
condition|)
block|{
name|editor
operator|.
name|deleteEntry
argument_list|(
name|editFullPath
argument_list|,
operator|-
literal|1
argument_list|)
expr_stmt|;
name|addFileOrDir
argument_list|(
name|fsfs
argument_list|,
name|editor
argument_list|,
name|srcRoot
argument_list|,
name|tgtRoot
argument_list|,
name|targetFullPath
argument_list|,
name|editFullPath
argument_list|,
name|tgtKind
argument_list|)
expr_stmt|;
block|}
if|else if
condition|(
name|distance
operator|!=
literal|0
condition|)
block|{
name|replaceFileOrDir
argument_list|(
name|fsfs
argument_list|,
name|editor
argument_list|,
name|srcRoot
argument_list|,
name|tgtRoot
argument_list|,
name|sourceFullPath
argument_list|,
name|targetFullPath
argument_list|,
name|editFullPath
argument_list|,
name|tgtKind
argument_list|)
expr_stmt|;
block|}
name|sourceEntries
operator|.
name|remove
argument_list|(
name|name
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|addFileOrDir
argument_list|(
name|fsfs
argument_list|,
name|editor
argument_list|,
name|srcRoot
argument_list|,
name|tgtRoot
argument_list|,
name|targetFullPath
argument_list|,
name|editFullPath
argument_list|,
name|tgtKind
argument_list|)
expr_stmt|;
block|}
block|}
if|if
condition|(
name|sourceEntries
operator|!=
literal|null
condition|)
block|{
for|for
control|(
name|Iterator
name|srcEntries
init|=
name|sourceEntries
operator|.
name|keySet
argument_list|()
operator|.
name|iterator
argument_list|()
init|;
name|srcEntries
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|String
name|name
init|=
operator|(
name|String
operator|)
name|srcEntries
operator|.
name|next
argument_list|()
decl_stmt|;
name|FSEntry
name|entry
init|=
operator|(
name|FSEntry
operator|)
name|sourceEntries
operator|.
name|get
argument_list|(
name|name
argument_list|)
decl_stmt|;
name|String
name|editFullPath
init|=
name|SVNPathUtil
operator|.
name|getAbsolutePath
argument_list|(
name|SVNPathUtil
operator|.
name|append
argument_list|(
name|editPath
argument_list|,
name|entry
operator|.
name|getName
argument_list|()
argument_list|)
argument_list|)
decl_stmt|;
name|editor
operator|.
name|deleteEntry
argument_list|(
name|editFullPath
argument_list|,
operator|-
literal|1
argument_list|)
expr_stmt|;
block|}
block|}
block|}
specifier|private
specifier|static
name|void
name|deltifyProperties
parameter_list|(
name|FSFS
name|fsfs
parameter_list|,
name|ISVNEditor
name|editor
parameter_list|,
name|FSRevisionRoot
name|srcRoot
parameter_list|,
name|FSRevisionRoot
name|tgtRoot
parameter_list|,
name|String
name|srcPath
parameter_list|,
name|String
name|tgtPath
parameter_list|,
name|String
name|editPath
parameter_list|,
name|boolean
name|isDir
parameter_list|)
throws|throws
name|SVNException
block|{
name|FSRevisionNode
name|targetNode
init|=
name|tgtRoot
operator|.
name|getRevisionNode
argument_list|(
name|tgtPath
argument_list|)
decl_stmt|;
name|SVNProperties
name|sourceProps
init|=
literal|null
decl_stmt|;
if|if
condition|(
name|srcPath
operator|!=
literal|null
condition|)
block|{
name|FSRevisionNode
name|sourceNode
init|=
name|srcRoot
operator|.
name|getRevisionNode
argument_list|(
name|srcPath
argument_list|)
decl_stmt|;
name|boolean
name|propsChanged
init|=
operator|!
name|FSRepositoryUtil
operator|.
name|arePropertiesEqual
argument_list|(
name|sourceNode
argument_list|,
name|targetNode
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|propsChanged
condition|)
block|{
return|return;
block|}
name|sourceProps
operator|=
name|sourceNode
operator|.
name|getProperties
argument_list|(
name|fsfs
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|sourceProps
operator|=
operator|new
name|SVNProperties
argument_list|()
expr_stmt|;
block|}
name|SVNProperties
name|targetProps
init|=
name|targetNode
operator|.
name|getProperties
argument_list|(
name|fsfs
argument_list|)
decl_stmt|;
name|SVNProperties
name|propsDiffs
init|=
name|FSRepositoryUtil
operator|.
name|getPropsDiffs
argument_list|(
name|sourceProps
argument_list|,
name|targetProps
argument_list|)
decl_stmt|;
name|Object
index|[]
name|names
init|=
name|propsDiffs
operator|.
name|nameSet
argument_list|()
operator|.
name|toArray
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|names
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
name|String
name|propName
init|=
operator|(
name|String
operator|)
name|names
index|[
name|i
index|]
decl_stmt|;
name|SVNPropertyValue
name|propValue
init|=
name|propsDiffs
operator|.
name|getSVNPropertyValue
argument_list|(
name|propName
argument_list|)
decl_stmt|;
if|if
condition|(
name|isDir
condition|)
block|{
name|editor
operator|.
name|changeDirProperty
argument_list|(
name|propName
argument_list|,
name|propValue
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|editor
operator|.
name|changeFileProperty
argument_list|(
name|editPath
argument_list|,
name|propName
argument_list|,
name|propValue
argument_list|)
expr_stmt|;
block|}
block|}
block|}
specifier|private
specifier|static
name|void
name|generateNotADirError
parameter_list|(
name|String
name|role
parameter_list|,
name|String
name|path
parameter_list|)
throws|throws
name|SVNException
block|{
name|SVNErrorMessage
name|err
init|=
name|SVNErrorMessage
operator|.
name|create
argument_list|(
name|SVNErrorCode
operator|.
name|FS_NOT_DIRECTORY
argument_list|,
literal|"Invalid {0} directory ''{1}''"
argument_list|,
operator|new
name|Object
index|[]
block|{
name|role
block|,
name|path
operator|!=
literal|null
condition|?
name|path
else|:
literal|"(null)"
block|}
argument_list|)
decl_stmt|;
name|SVNErrorManager
operator|.
name|error
argument_list|(
name|err
argument_list|,
name|SVNLogType
operator|.
name|FSFS
argument_list|)
expr_stmt|;
block|}
specifier|public
specifier|static
specifier|final
name|String
name|DUMPFILE_MAGIC_HEADER
init|=
literal|"SVN-fs-dump-format-version"
decl_stmt|;
specifier|public
specifier|static
specifier|final
name|String
name|DUMPFILE_CONTENT_LENGTH
init|=
literal|"Content-length"
decl_stmt|;
specifier|public
specifier|static
specifier|final
name|String
name|DUMPFILE_NODE_ACTION
init|=
literal|"Node-action"
decl_stmt|;
specifier|public
specifier|static
specifier|final
name|String
name|DUMPFILE_NODE_COPYFROM_PATH
init|=
literal|"Node-copyfrom-path"
decl_stmt|;
specifier|public
specifier|static
specifier|final
name|String
name|DUMPFILE_NODE_COPYFROM_REVISION
init|=
literal|"Node-copyfrom-rev"
decl_stmt|;
specifier|public
specifier|static
specifier|final
name|String
name|DUMPFILE_NODE_KIND
init|=
literal|"Node-kind"
decl_stmt|;
specifier|public
specifier|static
specifier|final
name|String
name|DUMPFILE_NODE_PATH
init|=
literal|"Node-path"
decl_stmt|;
specifier|public
specifier|static
specifier|final
name|String
name|DUMPFILE_PROP_CONTENT_LENGTH
init|=
literal|"Prop-content-length"
decl_stmt|;
specifier|public
specifier|static
specifier|final
name|String
name|DUMPFILE_PROP_DELTA
init|=
literal|"Prop-delta"
decl_stmt|;
specifier|public
specifier|static
specifier|final
name|String
name|DUMPFILE_REVISION_NUMBER
init|=
literal|"Revision-number"
decl_stmt|;
specifier|public
specifier|static
specifier|final
name|String
name|DUMPFILE_TEXT_CONTENT_LENGTH
init|=
literal|"Text-content-length"
decl_stmt|;
specifier|public
specifier|static
specifier|final
name|String
name|DUMPFILE_TEXT_DELTA
init|=
literal|"Text-delta"
decl_stmt|;
specifier|public
specifier|static
specifier|final
name|String
name|DUMPFILE_UUID
init|=
literal|"UUID"
decl_stmt|;
specifier|public
specifier|static
specifier|final
name|String
name|DUMPFILE_TEXT_CONTENT_MD5
init|=
literal|"Text-content-md5"
decl_stmt|;
specifier|public
specifier|static
specifier|final
name|String
name|DUMPFILE_TEXT_CONTENT_SHA1
init|=
literal|"Text-content-sha1"
decl_stmt|;
specifier|public
specifier|static
specifier|final
name|String
name|DUMPFILE_TEXT_COPY_SOURCE_MD5
init|=
literal|"Text-copy-source-md5"
decl_stmt|;
specifier|public
specifier|static
specifier|final
name|String
name|DUMPFILE_TEXT_COPY_SOURCE_SHA1
init|=
literal|"Text-copy-source-sha1"
decl_stmt|;
specifier|public
specifier|static
specifier|final
name|String
name|DUMPFILE_TEXT_DELTA_BASE_MD5
init|=
literal|"Text-delta-base-md5"
decl_stmt|;
specifier|public
specifier|static
specifier|final
name|String
name|DUMPFILE_TEXT_DELTA_BASE_SHA1
init|=
literal|"Text-delta-base-sha1"
decl_stmt|;
specifier|public
specifier|static
specifier|final
name|int
name|DUMPFILE_FORMAT_VERSION
init|=
literal|3
decl_stmt|;
specifier|public
specifier|static
specifier|final
name|int
name|NODE_ACTION_ADD
init|=
literal|1
decl_stmt|;
specifier|public
specifier|static
specifier|final
name|int
name|NODE_ACTION_CHANGE
init|=
literal|0
decl_stmt|;
specifier|public
specifier|static
specifier|final
name|int
name|NODE_ACTION_DELETE
init|=
literal|2
decl_stmt|;
specifier|public
specifier|static
specifier|final
name|int
name|NODE_ACTION_REPLACE
init|=
literal|3
decl_stmt|;
specifier|public
specifier|static
specifier|final
name|int
name|NODE_ACTION_UNKNOWN
init|=
operator|-
literal|1
decl_stmt|;
block|}
end_class

end_unit

