begin_unit|revision:1.0.0;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * ====================================================================  * Copyright (c) 2004-2010 TMate Software Ltd.  All rights reserved.  *  * This software is licensed as described in the file COPYING, which  * you should have received as part of this distribution.  The terms  * are also available at http://svnkit.com/license.html  * If newer versions of this license are posted there, you may use a  * newer version instead, at your option.  * ====================================================================  */
end_comment

begin_package
package|package
name|org
operator|.
name|exist
operator|.
name|versioning
operator|.
name|svn
operator|.
name|internal
operator|.
name|wc
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|BufferedInputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|BufferedOutputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|BufferedReader
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|ByteArrayOutputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|File
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|FileNotFoundException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|FileOutputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|InputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|InputStreamReader
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|OutputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|RandomAccessFile
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|Reader
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|Writer
import|;
end_import

begin_import
import|import
name|java
operator|.
name|lang
operator|.
name|reflect
operator|.
name|Method
import|;
end_import

begin_import
import|import
name|java
operator|.
name|nio
operator|.
name|ByteBuffer
import|;
end_import

begin_import
import|import
name|java
operator|.
name|nio
operator|.
name|CharBuffer
import|;
end_import

begin_import
import|import
name|java
operator|.
name|nio
operator|.
name|charset
operator|.
name|CharsetDecoder
import|;
end_import

begin_import
import|import
name|java
operator|.
name|security
operator|.
name|MessageDigest
import|;
end_import

begin_import
import|import
name|java
operator|.
name|security
operator|.
name|NoSuchAlgorithmException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Properties
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|logging
operator|.
name|Level
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|EXistException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|security
operator|.
name|Subject
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|storage
operator|.
name|BrokerPool
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|storage
operator|.
name|DBBroker
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|util
operator|.
name|io
operator|.
name|Resource
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|versioning
operator|.
name|svn
operator|.
name|internal
operator|.
name|wc
operator|.
name|admin
operator|.
name|SVNTranslator
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|versioning
operator|.
name|svn
operator|.
name|wc
operator|.
name|ISVNEventHandler
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|versioning
operator|.
name|svn
operator|.
name|wc
operator|.
name|ISVNOptions
import|;
end_import

begin_import
import|import
name|org
operator|.
name|tmatesoft
operator|.
name|svn
operator|.
name|core
operator|.
name|ISVNCanceller
import|;
end_import

begin_import
import|import
name|org
operator|.
name|tmatesoft
operator|.
name|svn
operator|.
name|core
operator|.
name|SVNErrorCode
import|;
end_import

begin_import
import|import
name|org
operator|.
name|tmatesoft
operator|.
name|svn
operator|.
name|core
operator|.
name|SVNErrorMessage
import|;
end_import

begin_import
import|import
name|org
operator|.
name|tmatesoft
operator|.
name|svn
operator|.
name|core
operator|.
name|SVNException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|tmatesoft
operator|.
name|svn
operator|.
name|core
operator|.
name|SVNNodeKind
import|;
end_import

begin_import
import|import
name|org
operator|.
name|tmatesoft
operator|.
name|svn
operator|.
name|core
operator|.
name|internal
operator|.
name|util
operator|.
name|SVNFormatUtil
import|;
end_import

begin_import
import|import
name|org
operator|.
name|tmatesoft
operator|.
name|svn
operator|.
name|core
operator|.
name|internal
operator|.
name|util
operator|.
name|SVNPathUtil
import|;
end_import

begin_import
import|import
name|org
operator|.
name|tmatesoft
operator|.
name|svn
operator|.
name|core
operator|.
name|internal
operator|.
name|util
operator|.
name|SVNUUIDGenerator
import|;
end_import

begin_import
import|import
name|org
operator|.
name|tmatesoft
operator|.
name|svn
operator|.
name|core
operator|.
name|internal
operator|.
name|util
operator|.
name|jna
operator|.
name|SVNJNAUtil
import|;
end_import

begin_import
import|import
name|org
operator|.
name|tmatesoft
operator|.
name|svn
operator|.
name|core
operator|.
name|internal
operator|.
name|wc
operator|.
name|ISVNInputFile
import|;
end_import

begin_import
import|import
name|org
operator|.
name|tmatesoft
operator|.
name|svn
operator|.
name|core
operator|.
name|internal
operator|.
name|wc
operator|.
name|ISVNReturnValueCallback
import|;
end_import

begin_import
import|import
name|org
operator|.
name|tmatesoft
operator|.
name|svn
operator|.
name|util
operator|.
name|SVNDebugLog
import|;
end_import

begin_import
import|import
name|org
operator|.
name|tmatesoft
operator|.
name|svn
operator|.
name|util
operator|.
name|SVNLogType
import|;
end_import

begin_comment
comment|/**  * @version 1.3  * @author TMate Software Ltd., Peter Skoog  */
end_comment

begin_class
specifier|public
class|class
name|SVNFileUtil
block|{
specifier|private
specifier|static
specifier|final
name|String
name|ID_COMMAND
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|String
name|LN_COMMAND
decl_stmt|;
specifier|public
specifier|static
specifier|final
name|String
name|LS_COMMAND
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|String
name|CHMOD_COMMAND
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|String
name|ATTRIB_COMMAND
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|String
name|ENV_COMMAND
decl_stmt|;
specifier|public
specifier|static
specifier|final
name|boolean
name|is32Bit
decl_stmt|;
specifier|public
specifier|static
specifier|final
name|boolean
name|is64Bit
decl_stmt|;
specifier|public
specifier|static
specifier|final
name|int
name|STREAM_CHUNK_SIZE
init|=
literal|16384
decl_stmt|;
specifier|public
specifier|final
specifier|static
name|OutputStream
name|DUMMY_OUT
init|=
operator|new
name|OutputStream
argument_list|()
block|{
specifier|public
name|void
name|write
parameter_list|(
name|int
name|b
parameter_list|)
throws|throws
name|IOException
block|{
block|}
block|}
decl_stmt|;
specifier|public
specifier|final
specifier|static
name|InputStream
name|DUMMY_IN
init|=
operator|new
name|InputStream
argument_list|()
block|{
specifier|public
name|int
name|read
parameter_list|()
throws|throws
name|IOException
block|{
return|return
operator|-
literal|1
return|;
block|}
block|}
decl_stmt|;
specifier|private
specifier|static
name|boolean
name|ourUseUnsafeCopyOnly
init|=
name|Boolean
operator|.
name|TRUE
operator|.
name|toString
argument_list|()
operator|.
name|equalsIgnoreCase
argument_list|(
name|System
operator|.
name|getProperty
argument_list|(
literal|"exist.svnkit.no.safe.copy"
argument_list|,
literal|"true"
argument_list|)
argument_list|)
decl_stmt|;
specifier|private
specifier|static
name|boolean
name|ourCopyOnSetWritable
init|=
name|Boolean
operator|.
name|TRUE
operator|.
name|toString
argument_list|()
operator|.
name|equalsIgnoreCase
argument_list|(
name|System
operator|.
name|getProperty
argument_list|(
literal|"exist.svnkit.fast.setWritable"
argument_list|,
literal|"true"
argument_list|)
argument_list|)
decl_stmt|;
specifier|private
specifier|static
name|boolean
name|ourUseNIOCopying
init|=
name|Boolean
operator|.
name|TRUE
operator|.
name|toString
argument_list|()
operator|.
name|equalsIgnoreCase
argument_list|(
name|System
operator|.
name|getProperty
argument_list|(
literal|"exist.svnkit.nio.copy"
argument_list|,
literal|"false"
argument_list|)
argument_list|)
decl_stmt|;
specifier|private
specifier|static
name|String
name|nativeEOLMarker
decl_stmt|;
specifier|private
specifier|static
name|File
name|ourAppDataPath
decl_stmt|;
specifier|private
specifier|static
name|String
name|ourAdminDirectoryName
decl_stmt|;
specifier|private
specifier|static
name|File
name|ourSystemAppDataPath
decl_stmt|;
specifier|private
specifier|static
specifier|volatile
name|boolean
name|ourIsSleepForTimeStamp
init|=
literal|true
decl_stmt|;
specifier|public
specifier|static
specifier|final
name|String
name|BINARY_MIME_TYPE
init|=
literal|"application/octet-stream"
decl_stmt|;
static|static
block|{
name|is32Bit
operator|=
literal|"32"
operator|.
name|equals
argument_list|(
name|System
operator|.
name|getProperty
argument_list|(
literal|"sun.arch.data.model"
argument_list|,
literal|"32"
argument_list|)
argument_list|)
expr_stmt|;
name|is64Bit
operator|=
literal|"64"
operator|.
name|equals
argument_list|(
name|System
operator|.
name|getProperty
argument_list|(
literal|"sun.arch.data.model"
argument_list|,
literal|"64"
argument_list|)
argument_list|)
expr_stmt|;
name|String
name|prefix
init|=
literal|"svnkit.program."
decl_stmt|;
name|Properties
name|props
init|=
operator|new
name|Properties
argument_list|()
decl_stmt|;
name|InputStream
name|is
init|=
name|SVNFileUtil
operator|.
name|class
operator|.
name|getResourceAsStream
argument_list|(
literal|"/svnkit.runtime.properties"
argument_list|)
decl_stmt|;
if|if
condition|(
name|is
operator|!=
literal|null
condition|)
block|{
try|try
block|{
name|props
operator|.
name|load
argument_list|(
name|is
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
block|}
finally|finally
block|{
name|SVNFileUtil
operator|.
name|closeFile
argument_list|(
name|is
argument_list|)
expr_stmt|;
block|}
block|}
name|ID_COMMAND
operator|=
name|props
operator|.
name|getProperty
argument_list|(
name|prefix
operator|+
literal|"id"
argument_list|,
literal|"id"
argument_list|)
expr_stmt|;
name|LN_COMMAND
operator|=
name|props
operator|.
name|getProperty
argument_list|(
name|prefix
operator|+
literal|"ln"
argument_list|,
literal|"ln"
argument_list|)
expr_stmt|;
name|LS_COMMAND
operator|=
name|props
operator|.
name|getProperty
argument_list|(
name|prefix
operator|+
literal|"ls"
argument_list|,
literal|"ls"
argument_list|)
expr_stmt|;
name|CHMOD_COMMAND
operator|=
name|props
operator|.
name|getProperty
argument_list|(
name|prefix
operator|+
literal|"chmod"
argument_list|,
literal|"chmod"
argument_list|)
expr_stmt|;
name|ATTRIB_COMMAND
operator|=
name|props
operator|.
name|getProperty
argument_list|(
name|prefix
operator|+
literal|"attrib"
argument_list|,
literal|"attrib"
argument_list|)
expr_stmt|;
name|ENV_COMMAND
operator|=
name|props
operator|.
name|getProperty
argument_list|(
name|prefix
operator|+
literal|"env"
argument_list|,
literal|"env"
argument_list|)
expr_stmt|;
block|}
specifier|public
specifier|static
specifier|synchronized
name|boolean
name|useUnsafeCopyOnly
parameter_list|()
block|{
return|return
name|ourUseUnsafeCopyOnly
return|;
block|}
specifier|public
specifier|static
specifier|synchronized
name|void
name|setUseUnsafeCopyOnly
parameter_list|(
name|boolean
name|useUnsafeCopyOnly
parameter_list|)
block|{
name|ourUseUnsafeCopyOnly
operator|=
name|useUnsafeCopyOnly
expr_stmt|;
block|}
specifier|public
specifier|static
specifier|synchronized
name|boolean
name|useCopyOnSetWritable
parameter_list|()
block|{
return|return
name|ourCopyOnSetWritable
return|;
block|}
specifier|public
specifier|static
specifier|synchronized
name|void
name|setUseCopyOnSetWritable
parameter_list|(
name|boolean
name|useCopyOnSetWritable
parameter_list|)
block|{
name|ourCopyOnSetWritable
operator|=
name|useCopyOnSetWritable
expr_stmt|;
block|}
specifier|public
specifier|static
specifier|synchronized
name|boolean
name|useNIOCopying
parameter_list|()
block|{
return|return
name|ourUseNIOCopying
return|;
block|}
specifier|public
specifier|static
specifier|synchronized
name|void
name|setUseNIOCopying
parameter_list|(
name|boolean
name|useNIOCopy
parameter_list|)
block|{
name|ourUseNIOCopying
operator|=
name|useNIOCopy
expr_stmt|;
block|}
specifier|public
specifier|static
name|String
name|getIdCommand
parameter_list|()
block|{
return|return
name|ID_COMMAND
return|;
block|}
specifier|public
specifier|static
name|String
name|getLnCommand
parameter_list|()
block|{
return|return
name|LN_COMMAND
return|;
block|}
specifier|public
specifier|static
name|String
name|getLsCommand
parameter_list|()
block|{
return|return
name|LS_COMMAND
return|;
block|}
specifier|public
specifier|static
name|String
name|getChmodCommand
parameter_list|()
block|{
return|return
name|CHMOD_COMMAND
return|;
block|}
specifier|public
specifier|static
name|String
name|getAttribCommand
parameter_list|()
block|{
return|return
name|ATTRIB_COMMAND
return|;
block|}
specifier|public
specifier|static
name|String
name|getEnvCommand
parameter_list|()
block|{
return|return
name|ENV_COMMAND
return|;
block|}
specifier|public
specifier|static
name|File
name|getParentFile
parameter_list|(
name|File
name|file
parameter_list|)
block|{
name|String
name|path
init|=
name|file
operator|.
name|getAbsolutePath
argument_list|()
decl_stmt|;
name|path
operator|=
name|path
operator|.
name|replace
argument_list|(
name|File
operator|.
name|separatorChar
argument_list|,
literal|'/'
argument_list|)
expr_stmt|;
name|path
operator|=
name|SVNPathUtil
operator|.
name|canonicalizePath
argument_list|(
name|path
argument_list|)
expr_stmt|;
name|int
name|up
init|=
literal|0
decl_stmt|;
while|while
condition|(
name|path
operator|.
name|endsWith
argument_list|(
literal|"/.."
argument_list|)
condition|)
block|{
name|path
operator|=
name|SVNPathUtil
operator|.
name|removeTail
argument_list|(
name|path
argument_list|)
expr_stmt|;
name|up
operator|++
expr_stmt|;
block|}
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|up
condition|;
name|i
operator|++
control|)
block|{
name|path
operator|=
name|SVNPathUtil
operator|.
name|removeTail
argument_list|(
name|path
argument_list|)
expr_stmt|;
block|}
name|path
operator|=
name|path
operator|.
name|replace
argument_list|(
literal|'/'
argument_list|,
name|Resource
operator|.
name|separatorChar
argument_list|)
expr_stmt|;
name|file
operator|=
operator|new
name|Resource
argument_list|(
name|path
argument_list|)
expr_stmt|;
return|return
name|file
operator|.
name|getParentFile
argument_list|()
return|;
block|}
specifier|public
specifier|static
name|String
name|readFile
parameter_list|(
name|File
name|file
parameter_list|)
throws|throws
name|SVNException
block|{
name|InputStream
name|is
init|=
literal|null
decl_stmt|;
try|try
block|{
name|is
operator|=
name|openFileForReading
argument_list|(
name|file
argument_list|,
name|SVNLogType
operator|.
name|WC
argument_list|)
expr_stmt|;
return|return
name|readFile
argument_list|(
name|is
argument_list|)
return|;
block|}
catch|catch
parameter_list|(
name|IOException
name|ioe
parameter_list|)
block|{
name|SVNErrorMessage
name|err
init|=
name|SVNErrorMessage
operator|.
name|create
argument_list|(
name|SVNErrorCode
operator|.
name|IO_ERROR
argument_list|,
literal|"Cannot read from file ''{0}'': {1}"
argument_list|,
operator|new
name|Object
index|[]
block|{
name|file
block|,
name|ioe
operator|.
name|getMessage
argument_list|()
block|}
argument_list|)
decl_stmt|;
name|SVNErrorManager
operator|.
name|error
argument_list|(
name|err
argument_list|,
name|Level
operator|.
name|FINE
argument_list|,
name|SVNLogType
operator|.
name|WC
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
name|closeFile
argument_list|(
name|is
argument_list|)
expr_stmt|;
block|}
return|return
literal|null
return|;
block|}
specifier|public
specifier|static
name|String
name|readFile
parameter_list|(
name|InputStream
name|input
parameter_list|)
throws|throws
name|IOException
block|{
name|byte
index|[]
name|buf
init|=
operator|new
name|byte
index|[
name|STREAM_CHUNK_SIZE
index|]
decl_stmt|;
name|StringBuffer
name|result
init|=
operator|new
name|StringBuffer
argument_list|()
decl_stmt|;
name|int
name|r
init|=
operator|-
literal|1
decl_stmt|;
while|while
condition|(
operator|(
name|r
operator|=
name|input
operator|.
name|read
argument_list|(
name|buf
argument_list|)
operator|)
operator|!=
operator|-
literal|1
condition|)
block|{
if|if
condition|(
name|r
operator|==
literal|0
condition|)
block|{
continue|continue;
block|}
name|result
operator|.
name|append
argument_list|(
operator|new
name|String
argument_list|(
name|buf
argument_list|,
literal|0
argument_list|,
name|r
argument_list|,
literal|"UTF-8"
argument_list|)
argument_list|)
expr_stmt|;
block|}
return|return
name|result
operator|.
name|toString
argument_list|()
return|;
block|}
specifier|public
specifier|static
name|int
name|readIntoBuffer
parameter_list|(
name|InputStream
name|is
parameter_list|,
name|byte
index|[]
name|buff
parameter_list|,
name|int
name|off
parameter_list|,
name|int
name|len
parameter_list|)
throws|throws
name|IOException
block|{
name|int
name|read
init|=
literal|0
decl_stmt|;
while|while
condition|(
name|len
operator|>
literal|0
condition|)
block|{
name|int
name|r
init|=
name|is
operator|.
name|read
argument_list|(
name|buff
argument_list|,
name|off
operator|+
name|read
argument_list|,
name|len
argument_list|)
decl_stmt|;
if|if
condition|(
name|r
operator|<
literal|0
condition|)
block|{
if|if
condition|(
name|read
operator|==
literal|0
condition|)
block|{
name|read
operator|=
operator|-
literal|1
expr_stmt|;
block|}
break|break;
block|}
name|read
operator|+=
name|r
expr_stmt|;
name|len
operator|-=
name|r
expr_stmt|;
block|}
return|return
name|read
return|;
block|}
specifier|public
specifier|static
name|String
name|getBasePath
parameter_list|(
name|File
name|file
parameter_list|)
block|{
name|File
name|base
init|=
name|file
operator|.
name|getParentFile
argument_list|()
decl_stmt|;
while|while
condition|(
name|base
operator|!=
literal|null
condition|)
block|{
if|if
condition|(
name|base
operator|.
name|isDirectory
argument_list|()
condition|)
block|{
name|File
name|adminDir
init|=
operator|new
name|Resource
argument_list|(
name|base
argument_list|,
name|getAdminDirectoryName
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|adminDir
operator|.
name|exists
argument_list|()
operator|&&
name|adminDir
operator|.
name|isDirectory
argument_list|()
condition|)
block|{
break|break;
block|}
block|}
name|base
operator|=
name|base
operator|.
name|getParentFile
argument_list|()
expr_stmt|;
block|}
name|String
name|path
init|=
name|file
operator|.
name|getAbsolutePath
argument_list|()
decl_stmt|;
if|if
condition|(
name|base
operator|!=
literal|null
condition|)
block|{
name|path
operator|=
name|path
operator|.
name|substring
argument_list|(
name|base
operator|.
name|getAbsolutePath
argument_list|()
operator|.
name|length
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|path
operator|=
name|path
operator|.
name|replace
argument_list|(
name|File
operator|.
name|separatorChar
argument_list|,
literal|'/'
argument_list|)
expr_stmt|;
if|if
condition|(
name|path
operator|.
name|startsWith
argument_list|(
literal|"/"
argument_list|)
condition|)
block|{
name|path
operator|=
name|path
operator|.
name|substring
argument_list|(
literal|1
argument_list|)
expr_stmt|;
block|}
return|return
name|path
return|;
block|}
specifier|public
specifier|static
name|void
name|createEmptyFile
parameter_list|(
name|File
name|file
parameter_list|)
throws|throws
name|SVNException
block|{
name|boolean
name|created
decl_stmt|;
if|if
condition|(
name|file
operator|!=
literal|null
operator|&&
name|file
operator|.
name|getParentFile
argument_list|()
operator|!=
literal|null
operator|&&
operator|!
name|file
operator|.
name|getParentFile
argument_list|()
operator|.
name|exists
argument_list|()
condition|)
block|{
name|file
operator|.
name|getParentFile
argument_list|()
operator|.
name|mkdirs
argument_list|()
expr_stmt|;
block|}
name|IOException
name|ioError
init|=
literal|null
decl_stmt|;
try|try
block|{
name|created
operator|=
name|createNewFile
argument_list|(
name|file
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|ioe
parameter_list|)
block|{
name|created
operator|=
literal|false
expr_stmt|;
name|ioError
operator|=
name|ioe
expr_stmt|;
block|}
if|if
condition|(
operator|!
name|created
condition|)
block|{
name|SVNErrorMessage
name|err
init|=
literal|null
decl_stmt|;
if|if
condition|(
name|ioError
operator|!=
literal|null
condition|)
block|{
name|err
operator|=
name|SVNErrorMessage
operator|.
name|create
argument_list|(
name|SVNErrorCode
operator|.
name|IO_ERROR
argument_list|,
literal|"Cannot create new file ''{0}'': {1}"
argument_list|,
operator|new
name|Object
index|[]
block|{
name|file
block|,
name|ioError
operator|.
name|getMessage
argument_list|()
block|}
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|err
operator|=
name|SVNErrorMessage
operator|.
name|create
argument_list|(
name|SVNErrorCode
operator|.
name|IO_ERROR
argument_list|,
literal|"Cannot create new file ''{0}''"
argument_list|,
name|file
argument_list|)
expr_stmt|;
block|}
name|SVNErrorManager
operator|.
name|error
argument_list|(
name|err
argument_list|,
name|ioError
operator|!=
literal|null
condition|?
name|ioError
else|:
operator|new
name|Exception
argument_list|()
argument_list|,
name|Level
operator|.
name|FINE
argument_list|,
name|SVNLogType
operator|.
name|WC
argument_list|)
expr_stmt|;
block|}
block|}
specifier|public
specifier|static
name|boolean
name|createNewFile
parameter_list|(
name|File
name|file
parameter_list|)
throws|throws
name|IOException
block|{
if|if
condition|(
name|file
operator|==
literal|null
condition|)
block|{
return|return
literal|false
return|;
block|}
return|return
name|file
operator|.
name|createNewFile
argument_list|()
return|;
block|}
comment|/**      * An internal method for ASCII bytes to write only!      *       * @param file      * @param contents      * @throws SVNException      */
specifier|public
specifier|static
name|void
name|createFile
parameter_list|(
name|File
name|file
parameter_list|,
name|String
name|contents
parameter_list|,
name|String
name|charSet
parameter_list|)
throws|throws
name|SVNException
block|{
name|createEmptyFile
argument_list|(
name|file
argument_list|)
expr_stmt|;
if|if
condition|(
name|contents
operator|==
literal|null
operator|||
name|contents
operator|.
name|length
argument_list|()
operator|==
literal|0
condition|)
block|{
return|return;
block|}
name|OutputStream
name|os
init|=
literal|null
decl_stmt|;
try|try
block|{
name|os
operator|=
name|SVNFileUtil
operator|.
name|openFileForWriting
argument_list|(
name|file
argument_list|)
expr_stmt|;
if|if
condition|(
name|charSet
operator|!=
literal|null
condition|)
block|{
name|os
operator|.
name|write
argument_list|(
name|contents
operator|.
name|getBytes
argument_list|(
name|charSet
argument_list|)
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|os
operator|.
name|write
argument_list|(
name|contents
operator|.
name|getBytes
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
name|IOException
name|ioe
parameter_list|)
block|{
name|SVNErrorMessage
name|err
init|=
name|SVNErrorMessage
operator|.
name|create
argument_list|(
name|SVNErrorCode
operator|.
name|IO_ERROR
argument_list|,
literal|"Cannot write to file ''{0}'': {1}"
argument_list|,
operator|new
name|Object
index|[]
block|{
name|file
block|,
name|ioe
operator|.
name|getMessage
argument_list|()
block|}
argument_list|)
decl_stmt|;
name|SVNErrorManager
operator|.
name|error
argument_list|(
name|err
argument_list|,
name|ioe
argument_list|,
name|Level
operator|.
name|FINE
argument_list|,
name|SVNLogType
operator|.
name|DEFAULT
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|SVNException
name|svne
parameter_list|)
block|{
name|SVNErrorMessage
name|err
init|=
name|SVNErrorMessage
operator|.
name|create
argument_list|(
name|SVNErrorCode
operator|.
name|IO_ERROR
argument_list|,
literal|"Cannot write to file ''{0}''"
argument_list|,
name|file
argument_list|)
decl_stmt|;
name|SVNErrorManager
operator|.
name|error
argument_list|(
name|err
argument_list|,
name|svne
argument_list|,
name|Level
operator|.
name|FINE
argument_list|,
name|SVNLogType
operator|.
name|DEFAULT
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
name|SVNFileUtil
operator|.
name|closeFile
argument_list|(
name|os
argument_list|)
expr_stmt|;
block|}
block|}
specifier|public
specifier|static
name|void
name|writeToFile
parameter_list|(
name|File
name|file
parameter_list|,
name|String
name|contents
parameter_list|,
name|String
name|charSet
parameter_list|)
throws|throws
name|SVNException
block|{
if|if
condition|(
name|contents
operator|==
literal|null
operator|||
name|contents
operator|.
name|length
argument_list|()
operator|==
literal|0
condition|)
block|{
return|return;
block|}
name|OutputStream
name|os
init|=
literal|null
decl_stmt|;
try|try
block|{
name|os
operator|=
name|SVNFileUtil
operator|.
name|openFileForWriting
argument_list|(
name|file
argument_list|)
expr_stmt|;
if|if
condition|(
name|charSet
operator|!=
literal|null
condition|)
block|{
name|os
operator|.
name|write
argument_list|(
name|contents
operator|.
name|getBytes
argument_list|(
name|charSet
argument_list|)
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|os
operator|.
name|write
argument_list|(
name|contents
operator|.
name|getBytes
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
name|IOException
name|ioe
parameter_list|)
block|{
name|SVNErrorMessage
name|err
init|=
name|SVNErrorMessage
operator|.
name|create
argument_list|(
name|SVNErrorCode
operator|.
name|IO_ERROR
argument_list|,
literal|"Cannot write to file ''{0}'': {1}"
argument_list|,
operator|new
name|Object
index|[]
block|{
name|file
block|,
name|ioe
operator|.
name|getMessage
argument_list|()
block|}
argument_list|)
decl_stmt|;
name|SVNErrorManager
operator|.
name|error
argument_list|(
name|err
argument_list|,
name|ioe
argument_list|,
name|Level
operator|.
name|FINE
argument_list|,
name|SVNLogType
operator|.
name|DEFAULT
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|SVNException
name|svne
parameter_list|)
block|{
name|SVNErrorMessage
name|err
init|=
name|SVNErrorMessage
operator|.
name|create
argument_list|(
name|SVNErrorCode
operator|.
name|IO_ERROR
argument_list|,
literal|"Cannot write to file ''{0}''"
argument_list|,
name|file
argument_list|)
decl_stmt|;
name|SVNErrorManager
operator|.
name|error
argument_list|(
name|err
argument_list|,
name|svne
argument_list|,
name|Level
operator|.
name|FINE
argument_list|,
name|SVNLogType
operator|.
name|DEFAULT
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
name|SVNFileUtil
operator|.
name|closeFile
argument_list|(
name|os
argument_list|)
expr_stmt|;
block|}
block|}
specifier|public
specifier|static
name|void
name|writeVersionFile
parameter_list|(
name|File
name|file
parameter_list|,
name|int
name|version
parameter_list|)
throws|throws
name|SVNException
block|{
if|if
condition|(
name|version
operator|<
literal|0
condition|)
block|{
name|SVNErrorMessage
name|err
init|=
name|SVNErrorMessage
operator|.
name|create
argument_list|(
name|SVNErrorCode
operator|.
name|INCORRECT_PARAMS
argument_list|,
literal|"Version {0} is not non-negative"
argument_list|,
operator|new
name|Integer
argument_list|(
name|version
argument_list|)
argument_list|)
decl_stmt|;
name|SVNErrorManager
operator|.
name|error
argument_list|(
name|err
argument_list|,
name|Level
operator|.
name|FINE
argument_list|,
name|SVNLogType
operator|.
name|WC
argument_list|)
expr_stmt|;
block|}
name|String
name|contents
init|=
name|version
operator|+
literal|"\n"
decl_stmt|;
name|File
name|tmpFile
init|=
name|SVNFileUtil
operator|.
name|createUniqueFile
argument_list|(
name|file
operator|.
name|getParentFile
argument_list|()
argument_list|,
name|file
operator|.
name|getName
argument_list|()
argument_list|,
literal|".tmp"
argument_list|,
literal|false
argument_list|)
decl_stmt|;
name|OutputStream
name|os
init|=
literal|null
decl_stmt|;
try|try
block|{
name|os
operator|=
name|SVNFileUtil
operator|.
name|openFileForWriting
argument_list|(
name|tmpFile
argument_list|)
expr_stmt|;
name|os
operator|.
name|write
argument_list|(
name|contents
operator|.
name|getBytes
argument_list|(
literal|"US-ASCII"
argument_list|)
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
name|SVNErrorMessage
name|err
init|=
name|SVNErrorMessage
operator|.
name|create
argument_list|(
name|SVNErrorCode
operator|.
name|IO_ERROR
argument_list|,
name|e
operator|.
name|getMessage
argument_list|()
argument_list|)
decl_stmt|;
name|SVNErrorManager
operator|.
name|error
argument_list|(
name|err
argument_list|,
name|e
argument_list|,
name|Level
operator|.
name|FINE
argument_list|,
name|SVNLogType
operator|.
name|DEFAULT
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
name|SVNFileUtil
operator|.
name|closeFile
argument_list|(
name|os
argument_list|)
expr_stmt|;
block|}
name|SVNFileUtil
operator|.
name|rename
argument_list|(
name|tmpFile
argument_list|,
name|file
argument_list|)
expr_stmt|;
name|setReadonly
argument_list|(
name|file
argument_list|,
literal|true
argument_list|)
expr_stmt|;
block|}
specifier|public
specifier|static
specifier|synchronized
name|File
name|createUniqueFile
parameter_list|(
name|File
name|parent
parameter_list|,
name|String
name|name
parameter_list|,
name|String
name|suffix
parameter_list|,
name|boolean
name|useUUIDGenerator
parameter_list|)
throws|throws
name|SVNException
block|{
name|StringBuffer
name|fileName
init|=
operator|new
name|StringBuffer
argument_list|()
decl_stmt|;
name|fileName
operator|.
name|append
argument_list|(
name|name
argument_list|)
expr_stmt|;
if|if
condition|(
name|useUUIDGenerator
condition|)
block|{
name|fileName
operator|.
name|append
argument_list|(
literal|"."
argument_list|)
expr_stmt|;
name|fileName
operator|.
name|append
argument_list|(
name|SVNUUIDGenerator
operator|.
name|generateUUIDString
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|fileName
operator|.
name|append
argument_list|(
name|suffix
argument_list|)
expr_stmt|;
name|File
name|file
init|=
operator|new
name|Resource
argument_list|(
name|parent
argument_list|,
name|fileName
operator|.
name|toString
argument_list|()
argument_list|)
decl_stmt|;
name|int
name|i
init|=
literal|1
decl_stmt|;
do|do
block|{
if|if
condition|(
name|SVNFileType
operator|.
name|getType
argument_list|(
name|file
argument_list|)
operator|==
name|SVNFileType
operator|.
name|NONE
condition|)
block|{
name|createEmptyFile
argument_list|(
name|file
argument_list|)
expr_stmt|;
return|return
name|file
return|;
block|}
name|fileName
operator|.
name|setLength
argument_list|(
literal|0
argument_list|)
expr_stmt|;
name|fileName
operator|.
name|append
argument_list|(
name|name
argument_list|)
expr_stmt|;
name|fileName
operator|.
name|append
argument_list|(
literal|"."
argument_list|)
expr_stmt|;
if|if
condition|(
name|useUUIDGenerator
condition|)
block|{
name|fileName
operator|.
name|append
argument_list|(
name|SVNUUIDGenerator
operator|.
name|generateUUIDString
argument_list|()
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|fileName
operator|.
name|append
argument_list|(
name|i
argument_list|)
expr_stmt|;
block|}
name|fileName
operator|.
name|append
argument_list|(
name|suffix
argument_list|)
expr_stmt|;
name|file
operator|=
operator|new
name|Resource
argument_list|(
name|parent
argument_list|,
name|fileName
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|i
operator|++
expr_stmt|;
block|}
do|while
condition|(
name|i
operator|<
literal|99999
condition|)
do|;
name|SVNErrorMessage
name|err
init|=
name|SVNErrorMessage
operator|.
name|create
argument_list|(
name|SVNErrorCode
operator|.
name|IO_UNIQUE_NAMES_EXHAUSTED
argument_list|,
literal|"Unable to make name for ''{0}''"
argument_list|,
operator|new
name|File
argument_list|(
name|parent
argument_list|,
name|name
argument_list|)
argument_list|)
decl_stmt|;
name|SVNErrorManager
operator|.
name|error
argument_list|(
name|err
argument_list|,
name|Level
operator|.
name|FINE
argument_list|,
name|SVNLogType
operator|.
name|WC
argument_list|)
expr_stmt|;
return|return
literal|null
return|;
block|}
specifier|public
specifier|static
name|void
name|rename
parameter_list|(
name|File
name|src
parameter_list|,
name|File
name|dst
parameter_list|)
throws|throws
name|SVNException
block|{
if|if
condition|(
name|SVNFileType
operator|.
name|getType
argument_list|(
name|src
argument_list|)
operator|==
name|SVNFileType
operator|.
name|NONE
condition|)
block|{
name|deleteFile
argument_list|(
name|dst
argument_list|)
expr_stmt|;
return|return;
block|}
if|if
condition|(
name|dst
operator|.
name|isDirectory
argument_list|()
condition|)
block|{
name|SVNErrorMessage
name|err
init|=
name|SVNErrorMessage
operator|.
name|create
argument_list|(
name|SVNErrorCode
operator|.
name|IO_ERROR
argument_list|,
literal|"Cannot rename file ''{0}'' to ''{1}''; file ''{1}'' is a directory"
argument_list|,
operator|new
name|Object
index|[]
block|{
name|src
block|,
name|dst
block|}
argument_list|)
decl_stmt|;
name|SVNErrorManager
operator|.
name|error
argument_list|(
name|err
argument_list|,
name|Level
operator|.
name|FINE
argument_list|,
name|SVNLogType
operator|.
name|WC
argument_list|)
expr_stmt|;
block|}
name|boolean
name|renamed
init|=
name|src
operator|.
name|renameTo
argument_list|(
name|dst
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|renamed
condition|)
block|{
name|SVNErrorMessage
name|err
init|=
name|SVNErrorMessage
operator|.
name|create
argument_list|(
name|SVNErrorCode
operator|.
name|IO_ERROR
argument_list|,
literal|"Cannot rename file ''{0}'' to ''{1}''"
argument_list|,
operator|new
name|Object
index|[]
block|{
name|src
block|,
name|dst
block|}
argument_list|)
decl_stmt|;
name|SVNErrorManager
operator|.
name|error
argument_list|(
name|err
argument_list|,
name|Level
operator|.
name|FINE
argument_list|,
name|SVNLogType
operator|.
name|WC
argument_list|)
expr_stmt|;
block|}
block|}
specifier|public
specifier|static
name|boolean
name|setReadonly
parameter_list|(
name|File
name|file
parameter_list|,
name|boolean
name|readonly
parameter_list|)
block|{
if|if
condition|(
operator|!
name|file
operator|.
name|exists
argument_list|()
condition|)
block|{
return|return
literal|false
return|;
block|}
if|if
condition|(
name|readonly
condition|)
return|return
name|file
operator|.
name|setReadOnly
argument_list|()
return|;
return|return
literal|true
return|;
block|}
specifier|public
specifier|static
name|void
name|setExecutable
parameter_list|(
name|File
name|file
parameter_list|,
name|boolean
name|executable
parameter_list|)
block|{
if|if
condition|(
name|file
operator|==
literal|null
operator|||
operator|!
name|file
operator|.
name|exists
argument_list|()
operator|||
name|SVNFileType
operator|.
name|getType
argument_list|(
name|file
argument_list|)
operator|==
name|SVNFileType
operator|.
name|SYMLINK
condition|)
block|{
return|return;
block|}
if|if
condition|(
name|SVNJNAUtil
operator|.
name|setExecutable
argument_list|(
name|file
argument_list|,
name|executable
argument_list|)
condition|)
block|{
return|return;
block|}
block|}
specifier|public
specifier|static
name|boolean
name|symlinksSupported
parameter_list|()
block|{
return|return
name|SVNFileType
operator|.
name|isSymlinkSupportEnabled
argument_list|()
return|;
block|}
specifier|public
specifier|static
name|void
name|setSGID
parameter_list|(
name|File
name|dir
parameter_list|)
block|{
if|if
condition|(
name|dir
operator|==
literal|null
operator|||
operator|!
name|dir
operator|.
name|exists
argument_list|()
operator|||
operator|!
name|dir
operator|.
name|isDirectory
argument_list|()
condition|)
block|{
return|return;
block|}
if|if
condition|(
name|SVNJNAUtil
operator|.
name|setSGID
argument_list|(
name|dir
argument_list|)
condition|)
block|{
return|return;
block|}
block|}
specifier|public
specifier|static
name|File
name|resolveSymlinkToFile
parameter_list|(
name|File
name|file
parameter_list|)
block|{
if|if
condition|(
operator|!
name|symlinksSupported
argument_list|()
condition|)
block|{
return|return
literal|null
return|;
block|}
name|File
name|targetFile
init|=
name|resolveSymlink
argument_list|(
name|file
argument_list|)
decl_stmt|;
if|if
condition|(
name|targetFile
operator|==
literal|null
operator|||
operator|!
name|targetFile
operator|.
name|isFile
argument_list|()
condition|)
block|{
return|return
literal|null
return|;
block|}
return|return
name|targetFile
return|;
block|}
specifier|public
specifier|static
name|File
name|resolveSymlink
parameter_list|(
name|File
name|file
parameter_list|)
block|{
if|if
condition|(
operator|!
name|symlinksSupported
argument_list|()
condition|)
block|{
return|return
literal|null
return|;
block|}
name|File
name|targetFile
init|=
name|file
decl_stmt|;
while|while
condition|(
name|SVNFileType
operator|.
name|getType
argument_list|(
name|targetFile
argument_list|)
operator|==
name|SVNFileType
operator|.
name|SYMLINK
condition|)
block|{
name|String
name|symlinkName
init|=
name|getSymlinkName
argument_list|(
name|targetFile
argument_list|)
decl_stmt|;
if|if
condition|(
name|symlinkName
operator|==
literal|null
condition|)
block|{
return|return
literal|null
return|;
block|}
if|if
condition|(
name|symlinkName
operator|.
name|startsWith
argument_list|(
literal|"/"
argument_list|)
condition|)
block|{
name|targetFile
operator|=
operator|new
name|File
argument_list|(
name|symlinkName
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|targetFile
operator|=
operator|new
name|File
argument_list|(
name|targetFile
operator|.
name|getParentFile
argument_list|()
argument_list|,
name|symlinkName
argument_list|)
expr_stmt|;
block|}
block|}
return|return
name|targetFile
return|;
block|}
specifier|public
specifier|static
name|void
name|copy
parameter_list|(
name|File
name|src
parameter_list|,
name|File
name|dst
parameter_list|,
name|boolean
name|safe
parameter_list|,
name|boolean
name|copyAdminDirectories
parameter_list|)
throws|throws
name|SVNException
block|{
name|SVNFileType
name|srcType
init|=
name|SVNFileType
operator|.
name|getType
argument_list|(
name|src
argument_list|)
decl_stmt|;
if|if
condition|(
name|srcType
operator|==
name|SVNFileType
operator|.
name|FILE
condition|)
block|{
name|copyFile
argument_list|(
name|src
argument_list|,
name|dst
argument_list|,
name|safe
argument_list|)
expr_stmt|;
block|}
if|else if
condition|(
name|srcType
operator|==
name|SVNFileType
operator|.
name|DIRECTORY
condition|)
block|{
name|copyDirectory
argument_list|(
name|src
argument_list|,
name|dst
argument_list|,
name|copyAdminDirectories
argument_list|,
literal|null
argument_list|)
expr_stmt|;
block|}
if|else if
condition|(
name|srcType
operator|==
name|SVNFileType
operator|.
name|SYMLINK
condition|)
block|{
name|String
name|name
init|=
name|SVNFileUtil
operator|.
name|getSymlinkName
argument_list|(
name|src
argument_list|)
decl_stmt|;
if|if
condition|(
name|name
operator|!=
literal|null
condition|)
block|{
name|SVNFileUtil
operator|.
name|createSymlink
argument_list|(
name|dst
argument_list|,
name|name
argument_list|)
expr_stmt|;
block|}
block|}
block|}
specifier|public
specifier|static
name|void
name|copyFile
parameter_list|(
name|File
name|src
parameter_list|,
name|File
name|dst
parameter_list|,
name|boolean
name|safe
parameter_list|)
throws|throws
name|SVNException
block|{
if|if
condition|(
name|src
operator|==
literal|null
operator|||
name|dst
operator|==
literal|null
condition|)
block|{
return|return;
block|}
if|if
condition|(
name|src
operator|.
name|equals
argument_list|(
name|dst
argument_list|)
condition|)
block|{
return|return;
block|}
if|if
condition|(
operator|!
name|src
operator|.
name|exists
argument_list|()
condition|)
block|{
name|dst
operator|.
name|delete
argument_list|()
expr_stmt|;
return|return;
block|}
name|File
name|tmpDst
init|=
name|dst
decl_stmt|;
if|if
condition|(
name|SVNFileType
operator|.
name|getType
argument_list|(
name|dst
argument_list|)
operator|!=
name|SVNFileType
operator|.
name|NONE
condition|)
block|{
if|if
condition|(
name|safe
operator|&&
operator|!
name|useUnsafeCopyOnly
argument_list|()
condition|)
block|{
name|tmpDst
operator|=
name|createUniqueFile
argument_list|(
name|dst
operator|.
name|getParentFile
argument_list|()
argument_list|,
literal|".copy"
argument_list|,
literal|".tmp"
argument_list|,
literal|true
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|dst
operator|.
name|delete
argument_list|()
expr_stmt|;
block|}
block|}
name|boolean
name|executable
init|=
name|isExecutable
argument_list|(
name|src
argument_list|)
decl_stmt|;
name|dst
operator|.
name|getParentFile
argument_list|()
operator|.
name|mkdirs
argument_list|()
expr_stmt|;
name|SVNErrorMessage
name|error
init|=
literal|null
decl_stmt|;
name|InputStream
name|sis
init|=
literal|null
decl_stmt|;
name|OutputStream
name|dos
init|=
literal|null
decl_stmt|;
try|try
block|{
name|sis
operator|=
name|SVNFileUtil
operator|.
name|openFileForReading
argument_list|(
name|src
argument_list|,
name|SVNLogType
operator|.
name|WC
argument_list|)
expr_stmt|;
name|dos
operator|=
name|SVNFileUtil
operator|.
name|openFileForWriting
argument_list|(
name|tmpDst
argument_list|)
expr_stmt|;
name|SVNTranslator
operator|.
name|copy
argument_list|(
name|sis
argument_list|,
name|dos
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
name|error
operator|=
name|SVNErrorMessage
operator|.
name|create
argument_list|(
name|SVNErrorCode
operator|.
name|IO_ERROR
argument_list|,
literal|"Cannot copy file ''{0}'' to ''{1}'': {2}"
argument_list|,
operator|new
name|Object
index|[]
block|{
name|src
block|,
name|dst
block|,
name|e
operator|.
name|getLocalizedMessage
argument_list|()
block|}
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
name|SVNFileUtil
operator|.
name|closeFile
argument_list|(
name|dos
argument_list|)
expr_stmt|;
name|SVNFileUtil
operator|.
name|closeFile
argument_list|(
name|sis
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|error
operator|!=
literal|null
condition|)
block|{
name|SVNErrorManager
operator|.
name|error
argument_list|(
name|error
argument_list|,
name|Level
operator|.
name|FINE
argument_list|,
name|SVNLogType
operator|.
name|WC
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|safe
operator|&&
name|tmpDst
operator|!=
name|dst
condition|)
block|{
name|rename
argument_list|(
name|tmpDst
argument_list|,
name|dst
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|executable
condition|)
block|{
name|setExecutable
argument_list|(
name|dst
argument_list|,
literal|true
argument_list|)
expr_stmt|;
block|}
name|dst
operator|.
name|setLastModified
argument_list|(
name|src
operator|.
name|lastModified
argument_list|()
argument_list|)
expr_stmt|;
block|}
specifier|public
specifier|static
name|boolean
name|createSymlink
parameter_list|(
name|File
name|link
parameter_list|,
name|File
name|linkName
parameter_list|)
throws|throws
name|SVNException
block|{
if|if
condition|(
operator|!
name|symlinksSupported
argument_list|()
condition|)
block|{
return|return
literal|false
return|;
block|}
if|if
condition|(
name|SVNFileType
operator|.
name|getType
argument_list|(
name|link
argument_list|)
operator|!=
name|SVNFileType
operator|.
name|NONE
condition|)
block|{
name|SVNErrorMessage
name|err
init|=
name|SVNErrorMessage
operator|.
name|create
argument_list|(
name|SVNErrorCode
operator|.
name|IO_ERROR
argument_list|,
literal|"Cannot create symbolic link ''{0}''; file already exists"
argument_list|,
name|link
argument_list|)
decl_stmt|;
name|SVNErrorManager
operator|.
name|error
argument_list|(
name|err
argument_list|,
name|Level
operator|.
name|FINE
argument_list|,
name|SVNLogType
operator|.
name|WC
argument_list|)
expr_stmt|;
block|}
name|String
name|fileContents
init|=
literal|""
decl_stmt|;
try|try
block|{
name|fileContents
operator|=
name|readSingleLine
argument_list|(
name|linkName
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
name|SVNErrorMessage
name|err
init|=
name|SVNErrorMessage
operator|.
name|create
argument_list|(
name|SVNErrorCode
operator|.
name|IO_ERROR
argument_list|,
name|e
operator|.
name|getMessage
argument_list|()
argument_list|)
decl_stmt|;
name|SVNErrorManager
operator|.
name|error
argument_list|(
name|err
argument_list|,
name|e
argument_list|,
name|Level
operator|.
name|FINE
argument_list|,
name|SVNLogType
operator|.
name|DEFAULT
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|fileContents
operator|.
name|startsWith
argument_list|(
literal|"link "
argument_list|)
condition|)
block|{
name|fileContents
operator|=
name|fileContents
operator|.
name|substring
argument_list|(
literal|"link"
operator|.
name|length
argument_list|()
argument_list|)
operator|.
name|trim
argument_list|()
expr_stmt|;
return|return
name|createSymlink
argument_list|(
name|link
argument_list|,
name|fileContents
argument_list|)
return|;
block|}
comment|//create file using internal representation
name|createFile
argument_list|(
name|link
argument_list|,
name|fileContents
argument_list|,
literal|"UTF-8"
argument_list|)
expr_stmt|;
return|return
literal|true
return|;
block|}
specifier|public
specifier|static
name|boolean
name|createSymlink
parameter_list|(
name|File
name|link
parameter_list|,
name|String
name|linkName
parameter_list|)
block|{
if|if
condition|(
operator|!
name|symlinksSupported
argument_list|()
condition|)
block|{
return|return
literal|false
return|;
block|}
if|if
condition|(
name|SVNJNAUtil
operator|.
name|createSymlink
argument_list|(
name|link
argument_list|,
name|linkName
argument_list|)
condition|)
block|{
return|return
literal|true
return|;
block|}
try|try
block|{
name|execCommand
argument_list|(
operator|new
name|String
index|[]
block|{
name|LN_COMMAND
block|,
literal|"-s"
block|,
name|linkName
block|,
name|link
operator|.
name|getAbsolutePath
argument_list|()
block|}
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Throwable
name|th
parameter_list|)
block|{
name|SVNDebugLog
operator|.
name|getDefaultLog
argument_list|()
operator|.
name|logFinest
argument_list|(
name|SVNLogType
operator|.
name|DEFAULT
argument_list|,
name|th
argument_list|)
expr_stmt|;
block|}
return|return
name|SVNFileType
operator|.
name|getType
argument_list|(
name|link
argument_list|)
operator|==
name|SVNFileType
operator|.
name|SYMLINK
return|;
block|}
specifier|public
specifier|static
name|boolean
name|detranslateSymlink
parameter_list|(
name|File
name|src
parameter_list|,
name|File
name|linkFile
parameter_list|)
throws|throws
name|SVNException
block|{
if|if
condition|(
operator|!
name|symlinksSupported
argument_list|()
condition|)
block|{
return|return
literal|false
return|;
block|}
if|if
condition|(
name|SVNFileType
operator|.
name|getType
argument_list|(
name|src
argument_list|)
operator|!=
name|SVNFileType
operator|.
name|SYMLINK
condition|)
block|{
name|SVNErrorMessage
name|err
init|=
name|SVNErrorMessage
operator|.
name|create
argument_list|(
name|SVNErrorCode
operator|.
name|IO_ERROR
argument_list|,
literal|"Cannot detranslate symbolic link ''{0}''; file does not exist or not a symbolic link"
argument_list|,
name|src
argument_list|)
decl_stmt|;
name|SVNErrorManager
operator|.
name|error
argument_list|(
name|err
argument_list|,
name|Level
operator|.
name|FINE
argument_list|,
name|SVNLogType
operator|.
name|WC
argument_list|)
expr_stmt|;
block|}
name|String
name|linkPath
init|=
name|getSymlinkName
argument_list|(
name|src
argument_list|)
decl_stmt|;
if|if
condition|(
name|linkPath
operator|==
literal|null
condition|)
block|{
name|SVNErrorMessage
name|err
init|=
name|SVNErrorMessage
operator|.
name|create
argument_list|(
name|SVNErrorCode
operator|.
name|IO_ERROR
argument_list|,
literal|"Cannot detranslate symbolic link ''{0}''; file does not exist or not a symbolic link"
argument_list|,
name|src
argument_list|)
decl_stmt|;
name|SVNErrorManager
operator|.
name|error
argument_list|(
name|err
argument_list|,
name|Level
operator|.
name|FINE
argument_list|,
name|SVNLogType
operator|.
name|WC
argument_list|)
expr_stmt|;
block|}
name|OutputStream
name|os
init|=
name|openFileForWriting
argument_list|(
name|linkFile
argument_list|)
decl_stmt|;
try|try
block|{
name|os
operator|.
name|write
argument_list|(
literal|"link "
operator|.
name|getBytes
argument_list|(
literal|"UTF-8"
argument_list|)
argument_list|)
expr_stmt|;
name|os
operator|.
name|write
argument_list|(
name|linkPath
operator|.
name|getBytes
argument_list|(
literal|"UTF-8"
argument_list|)
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
name|SVNErrorMessage
name|err
init|=
name|SVNErrorMessage
operator|.
name|create
argument_list|(
name|SVNErrorCode
operator|.
name|IO_ERROR
argument_list|,
name|e
operator|.
name|getMessage
argument_list|()
argument_list|)
decl_stmt|;
name|SVNErrorManager
operator|.
name|error
argument_list|(
name|err
argument_list|,
name|e
argument_list|,
name|Level
operator|.
name|FINE
argument_list|,
name|SVNLogType
operator|.
name|DEFAULT
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
name|SVNFileUtil
operator|.
name|closeFile
argument_list|(
name|os
argument_list|)
expr_stmt|;
block|}
return|return
literal|true
return|;
block|}
specifier|public
specifier|static
name|String
name|getSymlinkName
parameter_list|(
name|File
name|link
parameter_list|)
block|{
if|if
condition|(
operator|!
name|symlinksSupported
argument_list|()
operator|||
name|link
operator|==
literal|null
condition|)
block|{
return|return
literal|null
return|;
block|}
name|String
name|ls
init|=
literal|null
decl_stmt|;
name|ls
operator|=
name|SVNJNAUtil
operator|.
name|getLinkTarget
argument_list|(
name|link
argument_list|)
expr_stmt|;
if|if
condition|(
name|ls
operator|!=
literal|null
condition|)
block|{
return|return
name|ls
return|;
block|}
try|try
block|{
name|ls
operator|=
name|execCommand
argument_list|(
operator|new
name|String
index|[]
block|{
name|LS_COMMAND
block|,
literal|"-ld"
block|,
name|link
operator|.
name|getAbsolutePath
argument_list|()
block|}
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Throwable
name|th
parameter_list|)
block|{
name|SVNDebugLog
operator|.
name|getDefaultLog
argument_list|()
operator|.
name|logFinest
argument_list|(
name|SVNLogType
operator|.
name|DEFAULT
argument_list|,
name|th
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|ls
operator|==
literal|null
operator|||
name|ls
operator|.
name|lastIndexOf
argument_list|(
literal|" -> "
argument_list|)
operator|<
literal|0
condition|)
block|{
return|return
literal|null
return|;
block|}
name|int
name|index
init|=
name|ls
operator|.
name|lastIndexOf
argument_list|(
literal|" -> "
argument_list|)
operator|+
literal|" -> "
operator|.
name|length
argument_list|()
decl_stmt|;
if|if
condition|(
name|index
operator|<=
name|ls
operator|.
name|length
argument_list|()
condition|)
block|{
return|return
name|ls
operator|.
name|substring
argument_list|(
name|index
argument_list|)
return|;
block|}
return|return
literal|null
return|;
block|}
specifier|public
specifier|static
name|String
name|computeChecksum
parameter_list|(
name|String
name|line
parameter_list|)
block|{
if|if
condition|(
name|line
operator|==
literal|null
condition|)
block|{
return|return
literal|null
return|;
block|}
name|MessageDigest
name|digest
decl_stmt|;
try|try
block|{
name|digest
operator|=
name|MessageDigest
operator|.
name|getInstance
argument_list|(
literal|"MD5"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|NoSuchAlgorithmException
name|e
parameter_list|)
block|{
return|return
literal|null
return|;
block|}
if|if
condition|(
name|digest
operator|==
literal|null
condition|)
block|{
return|return
literal|null
return|;
block|}
name|digest
operator|.
name|update
argument_list|(
name|line
operator|.
name|getBytes
argument_list|()
argument_list|)
expr_stmt|;
return|return
name|toHexDigest
argument_list|(
name|digest
argument_list|)
return|;
block|}
specifier|public
specifier|static
name|String
name|computeChecksum
parameter_list|(
name|File
name|file
parameter_list|)
throws|throws
name|SVNException
block|{
if|if
condition|(
name|file
operator|==
literal|null
operator|||
name|file
operator|.
name|isDirectory
argument_list|()
operator|||
operator|!
name|file
operator|.
name|exists
argument_list|()
condition|)
block|{
return|return
literal|null
return|;
block|}
name|MessageDigest
name|digest
decl_stmt|;
try|try
block|{
name|digest
operator|=
name|MessageDigest
operator|.
name|getInstance
argument_list|(
literal|"MD5"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|NoSuchAlgorithmException
name|e
parameter_list|)
block|{
name|SVNErrorMessage
name|err
init|=
name|SVNErrorMessage
operator|.
name|create
argument_list|(
name|SVNErrorCode
operator|.
name|IO_ERROR
argument_list|,
literal|"MD5 implementation not found: {0}"
argument_list|,
name|e
operator|.
name|getMessage
argument_list|()
argument_list|)
decl_stmt|;
name|SVNErrorManager
operator|.
name|error
argument_list|(
name|err
argument_list|,
name|e
argument_list|,
name|Level
operator|.
name|FINE
argument_list|,
name|SVNLogType
operator|.
name|DEFAULT
argument_list|)
expr_stmt|;
return|return
literal|null
return|;
block|}
name|InputStream
name|is
init|=
name|openFileForReading
argument_list|(
name|file
argument_list|,
name|SVNLogType
operator|.
name|WC
argument_list|)
decl_stmt|;
name|byte
index|[]
name|buffer
init|=
operator|new
name|byte
index|[
literal|1024
operator|*
literal|16
index|]
decl_stmt|;
try|try
block|{
while|while
condition|(
literal|true
condition|)
block|{
name|int
name|l
init|=
name|is
operator|.
name|read
argument_list|(
name|buffer
argument_list|)
decl_stmt|;
if|if
condition|(
name|l
operator|<
literal|0
condition|)
block|{
break|break;
block|}
if|else if
condition|(
name|l
operator|==
literal|0
condition|)
block|{
continue|continue;
block|}
name|digest
operator|.
name|update
argument_list|(
name|buffer
argument_list|,
literal|0
argument_list|,
name|l
argument_list|)
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
name|SVNErrorMessage
name|err
init|=
name|SVNErrorMessage
operator|.
name|create
argument_list|(
name|SVNErrorCode
operator|.
name|IO_ERROR
argument_list|,
name|e
operator|.
name|getMessage
argument_list|()
argument_list|)
decl_stmt|;
name|SVNErrorManager
operator|.
name|error
argument_list|(
name|err
argument_list|,
name|e
argument_list|,
name|Level
operator|.
name|FINE
argument_list|,
name|SVNLogType
operator|.
name|DEFAULT
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
name|closeFile
argument_list|(
name|is
argument_list|)
expr_stmt|;
block|}
return|return
name|toHexDigest
argument_list|(
name|digest
argument_list|)
return|;
block|}
specifier|public
specifier|static
name|boolean
name|compareFiles
parameter_list|(
name|File
name|f1
parameter_list|,
name|File
name|f2
parameter_list|,
name|MessageDigest
name|digest
parameter_list|)
throws|throws
name|SVNException
block|{
if|if
condition|(
name|f1
operator|==
literal|null
operator|||
name|f2
operator|==
literal|null
condition|)
block|{
name|SVNErrorMessage
name|err
init|=
name|SVNErrorMessage
operator|.
name|create
argument_list|(
name|SVNErrorCode
operator|.
name|INCORRECT_PARAMS
argument_list|,
literal|"NULL paths are supported in compareFiles method"
argument_list|)
decl_stmt|;
name|SVNErrorManager
operator|.
name|error
argument_list|(
name|err
argument_list|,
name|Level
operator|.
name|FINE
argument_list|,
name|SVNLogType
operator|.
name|WC
argument_list|)
expr_stmt|;
return|return
literal|false
return|;
block|}
if|if
condition|(
name|f1
operator|.
name|equals
argument_list|(
name|f2
argument_list|)
condition|)
block|{
return|return
literal|true
return|;
block|}
name|boolean
name|equals
init|=
literal|true
decl_stmt|;
if|if
condition|(
name|f1
operator|.
name|length
argument_list|()
operator|!=
name|f2
operator|.
name|length
argument_list|()
condition|)
block|{
if|if
condition|(
name|digest
operator|==
literal|null
condition|)
block|{
return|return
literal|false
return|;
block|}
name|equals
operator|=
literal|false
expr_stmt|;
block|}
name|InputStream
name|is1
init|=
name|openFileForReading
argument_list|(
name|f1
argument_list|,
name|SVNLogType
operator|.
name|WC
argument_list|)
decl_stmt|;
name|InputStream
name|is2
init|=
name|openFileForReading
argument_list|(
name|f2
argument_list|,
name|SVNLogType
operator|.
name|WC
argument_list|)
decl_stmt|;
try|try
block|{
while|while
condition|(
literal|true
condition|)
block|{
name|int
name|b1
init|=
name|is1
operator|.
name|read
argument_list|()
decl_stmt|;
name|int
name|b2
init|=
name|is2
operator|.
name|read
argument_list|()
decl_stmt|;
if|if
condition|(
name|b1
operator|!=
name|b2
condition|)
block|{
if|if
condition|(
name|digest
operator|==
literal|null
condition|)
block|{
return|return
literal|false
return|;
block|}
name|equals
operator|=
literal|false
expr_stmt|;
block|}
if|if
condition|(
name|b1
operator|<
literal|0
condition|)
block|{
break|break;
block|}
if|if
condition|(
name|digest
operator|!=
literal|null
condition|)
block|{
name|digest
operator|.
name|update
argument_list|(
operator|(
name|byte
operator|)
operator|(
name|b1
operator|&
literal|0xFF
operator|)
argument_list|)
expr_stmt|;
block|}
block|}
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
name|SVNErrorMessage
name|err
init|=
name|SVNErrorMessage
operator|.
name|create
argument_list|(
name|SVNErrorCode
operator|.
name|IO_ERROR
argument_list|,
name|e
operator|.
name|getMessage
argument_list|()
argument_list|)
decl_stmt|;
name|SVNErrorManager
operator|.
name|error
argument_list|(
name|err
argument_list|,
name|e
argument_list|,
name|Level
operator|.
name|FINE
argument_list|,
name|SVNLogType
operator|.
name|DEFAULT
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
name|closeFile
argument_list|(
name|is1
argument_list|)
expr_stmt|;
name|closeFile
argument_list|(
name|is2
argument_list|)
expr_stmt|;
block|}
return|return
name|equals
return|;
block|}
specifier|public
specifier|static
name|void
name|truncate
parameter_list|(
name|File
name|file
parameter_list|,
name|long
name|truncateToSize
parameter_list|)
throws|throws
name|IOException
block|{
name|RandomAccessFile
name|raf
init|=
literal|null
decl_stmt|;
try|try
block|{
name|raf
operator|=
name|openRAFileForWriting
argument_list|(
name|file
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|raf
operator|.
name|setLength
argument_list|(
name|truncateToSize
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|SVNException
name|e
parameter_list|)
block|{
throw|throw
operator|(
name|IOException
operator|)
operator|new
name|IOException
argument_list|(
name|e
operator|.
name|getMessage
argument_list|()
argument_list|)
operator|.
name|initCause
argument_list|(
name|e
argument_list|)
throw|;
block|}
finally|finally
block|{
name|closeFile
argument_list|(
name|raf
argument_list|)
expr_stmt|;
block|}
block|}
specifier|public
specifier|static
name|void
name|setHidden
parameter_list|(
name|File
name|file
parameter_list|,
name|boolean
name|hidden
parameter_list|)
block|{
if|if
condition|(
name|file
operator|==
literal|null
operator|||
operator|!
name|file
operator|.
name|exists
argument_list|()
operator|||
name|file
operator|.
name|isHidden
argument_list|()
condition|)
block|{
return|return;
block|}
block|}
specifier|public
specifier|static
name|void
name|deleteAll
parameter_list|(
name|File
name|dir
parameter_list|,
name|ISVNEventHandler
name|cancelBaton
parameter_list|)
throws|throws
name|SVNException
block|{
name|deleteAll
argument_list|(
name|dir
argument_list|,
literal|true
argument_list|,
name|cancelBaton
argument_list|)
expr_stmt|;
block|}
specifier|public
specifier|static
name|void
name|deleteAll
parameter_list|(
name|File
name|dir
parameter_list|,
name|boolean
name|deleteDirs
parameter_list|)
block|{
try|try
block|{
name|deleteAll
argument_list|(
name|dir
argument_list|,
name|deleteDirs
argument_list|,
literal|null
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|SVNException
name|e
parameter_list|)
block|{
comment|// should never happen as cancell handler is null.
block|}
block|}
specifier|public
specifier|static
name|void
name|deleteAll
parameter_list|(
name|File
name|dir
parameter_list|,
name|boolean
name|deleteDirs
parameter_list|,
name|ISVNCanceller
name|cancelBaton
parameter_list|)
throws|throws
name|SVNException
block|{
if|if
condition|(
name|dir
operator|==
literal|null
condition|)
block|{
return|return;
block|}
name|SVNFileType
name|fileType
init|=
name|SVNFileType
operator|.
name|getType
argument_list|(
name|dir
argument_list|)
decl_stmt|;
name|File
index|[]
name|children
init|=
name|fileType
operator|==
name|SVNFileType
operator|.
name|DIRECTORY
condition|?
name|SVNFileListUtil
operator|.
name|listFiles
argument_list|(
name|dir
argument_list|)
else|:
literal|null
decl_stmt|;
if|if
condition|(
name|children
operator|!=
literal|null
condition|)
block|{
if|if
condition|(
name|cancelBaton
operator|!=
literal|null
condition|)
block|{
name|cancelBaton
operator|.
name|checkCancelled
argument_list|()
expr_stmt|;
block|}
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|children
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
name|File
name|child
init|=
name|children
index|[
name|i
index|]
decl_stmt|;
name|deleteAll
argument_list|(
name|child
argument_list|,
name|deleteDirs
argument_list|,
name|cancelBaton
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|cancelBaton
operator|!=
literal|null
condition|)
block|{
name|cancelBaton
operator|.
name|checkCancelled
argument_list|()
expr_stmt|;
block|}
block|}
if|if
condition|(
name|fileType
operator|==
name|SVNFileType
operator|.
name|DIRECTORY
operator|&&
operator|!
name|deleteDirs
condition|)
block|{
return|return;
block|}
name|deleteFile
argument_list|(
name|dir
argument_list|)
expr_stmt|;
block|}
specifier|public
specifier|static
name|boolean
name|deleteFile
parameter_list|(
name|File
name|file
parameter_list|)
throws|throws
name|SVNException
block|{
if|if
condition|(
name|file
operator|==
literal|null
condition|)
block|{
return|return
literal|true
return|;
block|}
return|return
name|file
operator|.
name|delete
argument_list|()
return|;
block|}
specifier|public
specifier|static
name|String
name|toHexDigest
parameter_list|(
name|MessageDigest
name|digest
parameter_list|)
block|{
if|if
condition|(
name|digest
operator|==
literal|null
condition|)
block|{
return|return
literal|null
return|;
block|}
name|byte
index|[]
name|result
init|=
name|digest
operator|.
name|digest
argument_list|()
decl_stmt|;
name|StringBuffer
name|hexDigest
init|=
operator|new
name|StringBuffer
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|result
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
name|SVNFormatUtil
operator|.
name|appendHexNumber
argument_list|(
name|hexDigest
argument_list|,
name|result
index|[
name|i
index|]
argument_list|)
expr_stmt|;
block|}
return|return
name|hexDigest
operator|.
name|toString
argument_list|()
return|;
block|}
specifier|public
specifier|static
name|String
name|toHexDigest
parameter_list|(
name|byte
index|[]
name|digest
parameter_list|)
block|{
if|if
condition|(
name|digest
operator|==
literal|null
condition|)
block|{
return|return
literal|null
return|;
block|}
name|StringBuffer
name|hexDigest
init|=
operator|new
name|StringBuffer
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|digest
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
name|SVNFormatUtil
operator|.
name|appendHexNumber
argument_list|(
name|hexDigest
argument_list|,
name|digest
index|[
name|i
index|]
argument_list|)
expr_stmt|;
block|}
return|return
name|hexDigest
operator|.
name|toString
argument_list|()
return|;
block|}
specifier|public
specifier|static
name|byte
index|[]
name|fromHexDigest
parameter_list|(
name|String
name|hexDigest
parameter_list|)
block|{
if|if
condition|(
name|hexDigest
operator|==
literal|null
operator|||
name|hexDigest
operator|.
name|length
argument_list|()
operator|==
literal|0
condition|)
block|{
return|return
literal|null
return|;
block|}
name|hexDigest
operator|=
name|hexDigest
operator|.
name|toLowerCase
argument_list|()
expr_stmt|;
name|int
name|digestLength
init|=
name|hexDigest
operator|.
name|length
argument_list|()
operator|/
literal|2
decl_stmt|;
if|if
condition|(
name|digestLength
operator|==
literal|0
operator|||
literal|2
operator|*
name|digestLength
operator|!=
name|hexDigest
operator|.
name|length
argument_list|()
condition|)
block|{
return|return
literal|null
return|;
block|}
name|byte
index|[]
name|digest
init|=
operator|new
name|byte
index|[
name|digestLength
index|]
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|hexDigest
operator|.
name|length
argument_list|()
operator|/
literal|2
condition|;
name|i
operator|++
control|)
block|{
if|if
condition|(
operator|!
name|isHex
argument_list|(
name|hexDigest
operator|.
name|charAt
argument_list|(
literal|2
operator|*
name|i
argument_list|)
argument_list|)
operator|||
operator|!
name|isHex
argument_list|(
name|hexDigest
operator|.
name|charAt
argument_list|(
literal|2
operator|*
name|i
operator|+
literal|1
argument_list|)
argument_list|)
condition|)
block|{
return|return
literal|null
return|;
block|}
name|int
name|hi
init|=
name|Character
operator|.
name|digit
argument_list|(
name|hexDigest
operator|.
name|charAt
argument_list|(
literal|2
operator|*
name|i
argument_list|)
argument_list|,
literal|16
argument_list|)
operator|<<
literal|4
decl_stmt|;
name|int
name|lo
init|=
name|Character
operator|.
name|digit
argument_list|(
name|hexDigest
operator|.
name|charAt
argument_list|(
literal|2
operator|*
name|i
operator|+
literal|1
argument_list|)
argument_list|,
literal|16
argument_list|)
decl_stmt|;
name|Integer
name|ib
init|=
operator|new
name|Integer
argument_list|(
name|hi
operator||
name|lo
argument_list|)
decl_stmt|;
name|byte
name|b
init|=
name|ib
operator|.
name|byteValue
argument_list|()
decl_stmt|;
name|digest
index|[
name|i
index|]
operator|=
name|b
expr_stmt|;
block|}
return|return
name|digest
return|;
block|}
specifier|public
specifier|static
name|String
name|getNativeEOLMarker
parameter_list|(
name|ISVNOptions
name|options
parameter_list|)
block|{
if|if
condition|(
name|nativeEOLMarker
operator|==
literal|null
condition|)
block|{
name|nativeEOLMarker
operator|=
operator|new
name|String
argument_list|(
name|options
operator|.
name|getNativeEOL
argument_list|()
argument_list|)
expr_stmt|;
block|}
return|return
name|nativeEOLMarker
return|;
block|}
specifier|public
specifier|static
name|long
name|roundTimeStamp
parameter_list|(
name|long
name|tstamp
parameter_list|)
block|{
return|return
operator|(
name|tstamp
operator|/
literal|1000
operator|)
operator|*
literal|1000
return|;
block|}
specifier|public
specifier|static
name|void
name|sleepForTimestamp
parameter_list|()
block|{
if|if
condition|(
operator|!
name|ourIsSleepForTimeStamp
condition|)
block|{
return|return;
block|}
name|long
name|time
init|=
name|System
operator|.
name|currentTimeMillis
argument_list|()
decl_stmt|;
name|time
operator|=
literal|1100
operator|-
operator|(
name|time
operator|-
operator|(
name|time
operator|/
literal|1000
operator|)
operator|*
literal|1000
operator|)
expr_stmt|;
try|try
block|{
name|Thread
operator|.
name|sleep
argument_list|(
name|time
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|InterruptedException
name|e
parameter_list|)
block|{
comment|//
block|}
block|}
specifier|public
specifier|static
name|void
name|setSleepForTimestamp
parameter_list|(
name|boolean
name|sleep
parameter_list|)
block|{
name|ourIsSleepForTimeStamp
operator|=
name|sleep
expr_stmt|;
block|}
specifier|public
specifier|static
name|String
name|readLineFromStream
parameter_list|(
name|InputStream
name|is
parameter_list|,
name|StringBuffer
name|buffer
parameter_list|,
name|CharsetDecoder
name|decoder
parameter_list|)
throws|throws
name|IOException
block|{
name|ByteArrayOutputStream
name|byteBuffer
init|=
operator|new
name|ByteArrayOutputStream
argument_list|()
decl_stmt|;
name|int
name|r
init|=
operator|-
literal|1
decl_stmt|;
while|while
condition|(
operator|(
name|r
operator|=
name|is
operator|.
name|read
argument_list|()
operator|)
operator|!=
literal|'\n'
condition|)
block|{
if|if
condition|(
name|r
operator|==
operator|-
literal|1
condition|)
block|{
name|String
name|out
init|=
name|decode
argument_list|(
name|decoder
argument_list|,
name|byteBuffer
operator|.
name|toByteArray
argument_list|()
argument_list|)
decl_stmt|;
name|buffer
operator|.
name|append
argument_list|(
name|out
argument_list|)
expr_stmt|;
return|return
literal|null
return|;
block|}
name|byteBuffer
operator|.
name|write
argument_list|(
name|r
argument_list|)
expr_stmt|;
block|}
name|String
name|out
init|=
name|decode
argument_list|(
name|decoder
argument_list|,
name|byteBuffer
operator|.
name|toByteArray
argument_list|()
argument_list|)
decl_stmt|;
name|buffer
operator|.
name|append
argument_list|(
name|out
argument_list|)
expr_stmt|;
return|return
name|out
return|;
block|}
specifier|public
specifier|static
name|String
name|detectMimeType
parameter_list|(
name|InputStream
name|is
parameter_list|)
throws|throws
name|IOException
block|{
name|byte
index|[]
name|buffer
init|=
operator|new
name|byte
index|[
literal|1024
index|]
decl_stmt|;
name|int
name|read
init|=
name|readIntoBuffer
argument_list|(
name|is
argument_list|,
name|buffer
argument_list|,
literal|0
argument_list|,
name|buffer
operator|.
name|length
argument_list|)
decl_stmt|;
name|int
name|binaryCount
init|=
literal|0
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|read
condition|;
name|i
operator|++
control|)
block|{
name|byte
name|b
init|=
name|buffer
index|[
name|i
index|]
decl_stmt|;
if|if
condition|(
name|b
operator|==
literal|0
condition|)
block|{
return|return
name|BINARY_MIME_TYPE
return|;
block|}
if|if
condition|(
name|b
operator|<
literal|0x07
operator|||
operator|(
name|b
operator|>
literal|0x0d
operator|&&
name|b
operator|<
literal|0x20
operator|)
operator|||
name|b
operator|>
literal|0x7F
condition|)
block|{
name|binaryCount
operator|++
expr_stmt|;
block|}
block|}
if|if
condition|(
name|read
operator|>
literal|0
operator|&&
name|binaryCount
operator|*
literal|1000
operator|/
name|read
operator|>
literal|850
condition|)
block|{
return|return
name|BINARY_MIME_TYPE
return|;
block|}
return|return
literal|null
return|;
block|}
specifier|public
specifier|static
name|String
name|detectMimeType
parameter_list|(
name|File
name|file
parameter_list|,
name|Map
name|mimeTypes
parameter_list|)
throws|throws
name|SVNException
block|{
if|if
condition|(
name|file
operator|==
literal|null
operator|||
operator|!
name|file
operator|.
name|exists
argument_list|()
condition|)
block|{
return|return
literal|null
return|;
block|}
name|SVNFileType
name|kind
init|=
name|SVNFileType
operator|.
name|getType
argument_list|(
name|file
argument_list|)
decl_stmt|;
if|if
condition|(
name|kind
operator|!=
name|SVNFileType
operator|.
name|FILE
condition|)
block|{
name|SVNErrorMessage
name|err
init|=
name|SVNErrorMessage
operator|.
name|create
argument_list|(
name|SVNErrorCode
operator|.
name|BAD_FILENAME
argument_list|,
literal|"Can''t detect MIME type of non-file ''{0}''"
argument_list|,
name|file
argument_list|)
decl_stmt|;
name|SVNErrorManager
operator|.
name|error
argument_list|(
name|err
argument_list|,
name|Level
operator|.
name|FINE
argument_list|,
name|SVNLogType
operator|.
name|WC
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|mimeTypes
operator|!=
literal|null
condition|)
block|{
name|String
name|name
init|=
name|file
operator|.
name|getName
argument_list|()
decl_stmt|;
name|String
name|pathExt
init|=
literal|""
decl_stmt|;
name|int
name|dotInd
init|=
name|name
operator|.
name|lastIndexOf
argument_list|(
literal|'.'
argument_list|)
decl_stmt|;
if|if
condition|(
name|dotInd
operator|!=
operator|-
literal|1
operator|&&
name|dotInd
operator|!=
literal|0
operator|&&
name|dotInd
operator|!=
name|name
operator|.
name|length
argument_list|()
operator|-
literal|1
condition|)
block|{
name|pathExt
operator|=
name|name
operator|.
name|substring
argument_list|(
name|dotInd
operator|+
literal|1
argument_list|)
expr_stmt|;
block|}
name|String
name|mimeType
init|=
operator|(
name|String
operator|)
name|mimeTypes
operator|.
name|get
argument_list|(
name|pathExt
argument_list|)
decl_stmt|;
if|if
condition|(
name|mimeType
operator|!=
literal|null
condition|)
block|{
return|return
name|mimeType
return|;
block|}
block|}
name|InputStream
name|is
init|=
literal|null
decl_stmt|;
try|try
block|{
name|is
operator|=
name|openFileForReading
argument_list|(
name|file
argument_list|,
name|SVNLogType
operator|.
name|WC
argument_list|)
expr_stmt|;
return|return
name|detectMimeType
argument_list|(
name|is
argument_list|)
return|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
return|return
literal|null
return|;
block|}
catch|catch
parameter_list|(
name|SVNException
name|e
parameter_list|)
block|{
return|return
literal|null
return|;
block|}
finally|finally
block|{
name|closeFile
argument_list|(
name|is
argument_list|)
expr_stmt|;
block|}
block|}
specifier|public
specifier|static
name|boolean
name|isExecutable
parameter_list|(
name|File
name|file
parameter_list|)
throws|throws
name|SVNException
block|{
name|Boolean
name|executable
init|=
name|SVNJNAUtil
operator|.
name|isExecutable
argument_list|(
name|file
argument_list|)
decl_stmt|;
if|if
condition|(
name|executable
operator|!=
literal|null
condition|)
block|{
return|return
name|executable
operator|.
name|booleanValue
argument_list|()
return|;
block|}
return|return
literal|false
return|;
block|}
specifier|public
specifier|static
name|File
name|ensureDirectoryExists
parameter_list|(
name|File
name|path
parameter_list|)
throws|throws
name|SVNException
block|{
name|SVNFileType
name|type
init|=
name|SVNFileType
operator|.
name|getType
argument_list|(
name|path
argument_list|)
decl_stmt|;
name|SVNNodeKind
name|kind
init|=
name|SVNFileType
operator|.
name|getNodeKind
argument_list|(
name|type
argument_list|)
decl_stmt|;
if|if
condition|(
name|kind
operator|!=
name|SVNNodeKind
operator|.
name|NONE
operator|&&
name|kind
operator|!=
name|SVNNodeKind
operator|.
name|DIR
condition|)
block|{
name|SVNErrorMessage
name|error
init|=
name|SVNErrorMessage
operator|.
name|create
argument_list|(
name|SVNErrorCode
operator|.
name|IO_ERROR
argument_list|,
literal|"''{0}'' is not a directory"
argument_list|,
name|path
argument_list|)
decl_stmt|;
name|SVNErrorManager
operator|.
name|error
argument_list|(
name|error
argument_list|,
name|SVNLogType
operator|.
name|WC
argument_list|)
expr_stmt|;
block|}
if|else if
condition|(
name|kind
operator|==
name|SVNNodeKind
operator|.
name|NONE
condition|)
block|{
name|boolean
name|created
init|=
name|path
operator|.
name|mkdirs
argument_list|()
decl_stmt|;
if|if
condition|(
operator|!
name|created
condition|)
block|{
name|SVNErrorMessage
name|error
init|=
name|SVNErrorMessage
operator|.
name|create
argument_list|(
name|SVNErrorCode
operator|.
name|IO_ERROR
argument_list|,
literal|"Unable to make directories"
argument_list|,
name|path
argument_list|)
decl_stmt|;
name|SVNErrorManager
operator|.
name|error
argument_list|(
name|error
argument_list|,
name|SVNLogType
operator|.
name|WC
argument_list|)
expr_stmt|;
block|}
block|}
return|return
name|path
return|;
block|}
specifier|public
specifier|static
name|void
name|copyDirectory
parameter_list|(
name|File
name|srcDir
parameter_list|,
name|File
name|dstDir
parameter_list|,
name|boolean
name|copyAdminDir
parameter_list|,
name|ISVNEventHandler
name|cancel
parameter_list|)
throws|throws
name|SVNException
block|{
if|if
condition|(
operator|!
name|dstDir
operator|.
name|exists
argument_list|()
condition|)
block|{
name|dstDir
operator|.
name|mkdirs
argument_list|()
expr_stmt|;
name|dstDir
operator|.
name|setLastModified
argument_list|(
name|srcDir
operator|.
name|lastModified
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|File
index|[]
name|files
init|=
name|SVNFileListUtil
operator|.
name|listFiles
argument_list|(
name|srcDir
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|files
operator|!=
literal|null
operator|&&
name|i
operator|<
name|files
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
name|File
name|file
init|=
name|files
index|[
name|i
index|]
decl_stmt|;
if|if
condition|(
name|file
operator|.
name|getName
argument_list|()
operator|.
name|equals
argument_list|(
literal|".."
argument_list|)
operator|||
name|file
operator|.
name|getName
argument_list|()
operator|.
name|equals
argument_list|(
literal|"."
argument_list|)
operator|||
name|file
operator|.
name|equals
argument_list|(
name|dstDir
argument_list|)
condition|)
block|{
continue|continue;
block|}
if|if
condition|(
name|cancel
operator|!=
literal|null
condition|)
block|{
name|cancel
operator|.
name|checkCancelled
argument_list|()
expr_stmt|;
block|}
if|if
condition|(
operator|!
name|copyAdminDir
operator|&&
name|file
operator|.
name|getName
argument_list|()
operator|.
name|equals
argument_list|(
name|getAdminDirectoryName
argument_list|()
argument_list|)
condition|)
block|{
continue|continue;
block|}
name|SVNFileType
name|fileType
init|=
name|SVNFileType
operator|.
name|getType
argument_list|(
name|file
argument_list|)
decl_stmt|;
name|File
name|dst
init|=
operator|new
name|File
argument_list|(
name|dstDir
argument_list|,
name|file
operator|.
name|getName
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|fileType
operator|==
name|SVNFileType
operator|.
name|FILE
condition|)
block|{
name|boolean
name|executable
init|=
name|isExecutable
argument_list|(
name|file
argument_list|)
decl_stmt|;
name|copyFile
argument_list|(
name|file
argument_list|,
name|dst
argument_list|,
literal|false
argument_list|)
expr_stmt|;
if|if
condition|(
name|executable
condition|)
block|{
name|setExecutable
argument_list|(
name|dst
argument_list|,
name|executable
argument_list|)
expr_stmt|;
block|}
block|}
if|else if
condition|(
name|fileType
operator|==
name|SVNFileType
operator|.
name|DIRECTORY
condition|)
block|{
name|copyDirectory
argument_list|(
name|file
argument_list|,
name|dst
argument_list|,
name|copyAdminDir
argument_list|,
name|cancel
argument_list|)
expr_stmt|;
if|if
condition|(
name|file
operator|.
name|isHidden
argument_list|()
operator|||
name|getAdminDirectoryName
argument_list|()
operator|.
name|equals
argument_list|(
name|file
operator|.
name|getName
argument_list|()
argument_list|)
condition|)
block|{
name|setHidden
argument_list|(
name|dst
argument_list|,
literal|true
argument_list|)
expr_stmt|;
block|}
block|}
if|else if
condition|(
name|fileType
operator|==
name|SVNFileType
operator|.
name|SYMLINK
condition|)
block|{
name|String
name|name
init|=
name|getSymlinkName
argument_list|(
name|file
argument_list|)
decl_stmt|;
if|if
condition|(
name|name
operator|!=
literal|null
condition|)
block|{
name|createSymlink
argument_list|(
name|dst
argument_list|,
name|name
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
specifier|public
specifier|static
name|OutputStream
name|openFileForWriting
parameter_list|(
name|File
name|file
parameter_list|)
throws|throws
name|SVNException
block|{
return|return
name|openFileForWriting
argument_list|(
name|file
argument_list|,
literal|false
argument_list|)
return|;
block|}
specifier|public
specifier|static
name|OutputStream
name|openFileForWriting
parameter_list|(
name|File
name|file
parameter_list|,
name|boolean
name|append
parameter_list|)
throws|throws
name|SVNException
block|{
if|if
condition|(
operator|!
name|prepareFileForWriting
argument_list|(
name|file
argument_list|)
condition|)
block|{
return|return
literal|null
return|;
block|}
try|try
block|{
return|return
operator|new
name|BufferedOutputStream
argument_list|(
name|createFileOutputStream
argument_list|(
name|file
argument_list|,
name|append
argument_list|)
argument_list|)
return|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
name|SVNErrorMessage
name|err
init|=
name|SVNErrorMessage
operator|.
name|create
argument_list|(
name|SVNErrorCode
operator|.
name|IO_ERROR
argument_list|,
literal|"Cannot write to ''{0}'': {1}"
argument_list|,
operator|new
name|Object
index|[]
block|{
name|file
block|,
name|e
operator|.
name|getMessage
argument_list|()
block|}
argument_list|)
decl_stmt|;
name|SVNErrorManager
operator|.
name|error
argument_list|(
name|err
argument_list|,
name|e
argument_list|,
name|Level
operator|.
name|FINE
argument_list|,
name|SVNLogType
operator|.
name|DEFAULT
argument_list|)
expr_stmt|;
block|}
return|return
literal|null
return|;
block|}
specifier|public
specifier|static
name|Writer
name|openFileForWriting
parameter_list|(
name|Resource
name|file
parameter_list|)
throws|throws
name|SVNException
block|{
if|if
condition|(
operator|!
name|prepareFileForWriting
argument_list|(
name|file
argument_list|)
condition|)
block|{
return|return
literal|null
return|;
block|}
try|try
block|{
return|return
name|file
operator|.
name|getWriter
argument_list|()
return|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
name|SVNErrorMessage
name|err
init|=
name|SVNErrorMessage
operator|.
name|create
argument_list|(
name|SVNErrorCode
operator|.
name|IO_ERROR
argument_list|,
literal|"Cannot write to ''{0}'': {1}"
argument_list|,
operator|new
name|Object
index|[]
block|{
name|file
block|,
name|e
operator|.
name|getMessage
argument_list|()
block|}
argument_list|)
decl_stmt|;
name|SVNErrorManager
operator|.
name|error
argument_list|(
name|err
argument_list|,
name|e
argument_list|,
name|Level
operator|.
name|FINE
argument_list|,
name|SVNLogType
operator|.
name|DEFAULT
argument_list|)
expr_stmt|;
block|}
return|return
literal|null
return|;
block|}
specifier|public
specifier|static
name|boolean
name|prepareFileForWriting
parameter_list|(
name|File
name|file
parameter_list|)
throws|throws
name|SVNException
block|{
if|if
condition|(
name|file
operator|==
literal|null
condition|)
block|{
return|return
literal|false
return|;
block|}
if|if
condition|(
name|file
operator|.
name|getParentFile
argument_list|()
operator|!=
literal|null
operator|&&
operator|!
name|file
operator|.
name|getParentFile
argument_list|()
operator|.
name|exists
argument_list|()
condition|)
block|{
name|file
operator|.
name|getParentFile
argument_list|()
operator|.
name|mkdirs
argument_list|()
expr_stmt|;
block|}
if|if
condition|(
name|file
operator|.
name|isFile
argument_list|()
operator|&&
operator|!
name|file
operator|.
name|canWrite
argument_list|()
condition|)
block|{
comment|// force writable.
name|setReadonly
argument_list|(
name|file
argument_list|,
literal|false
argument_list|)
expr_stmt|;
block|}
return|return
literal|true
return|;
block|}
specifier|public
specifier|static
name|OutputStream
name|createFileOutputStream
parameter_list|(
name|File
name|file
parameter_list|,
name|boolean
name|append
parameter_list|)
throws|throws
name|IOException
block|{
if|if
condition|(
name|file
operator|instanceof
name|Resource
condition|)
return|return
operator|(
operator|(
name|Resource
operator|)
name|file
operator|)
operator|.
name|getOutputStream
argument_list|(
name|append
argument_list|)
return|;
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|" !!! createFileOutputStream on File = "
operator|+
name|file
argument_list|)
expr_stmt|;
name|Exception
name|e
init|=
operator|new
name|Exception
argument_list|()
decl_stmt|;
name|e
operator|.
name|printStackTrace
argument_list|()
expr_stmt|;
return|return
operator|new
name|FileOutputStream
argument_list|(
name|file
argument_list|)
return|;
block|}
specifier|public
specifier|static
name|RandomAccessFile
name|openRAFileForWriting
parameter_list|(
name|File
name|file
parameter_list|,
name|boolean
name|append
parameter_list|)
throws|throws
name|SVNException
block|{
if|if
condition|(
name|file
operator|==
literal|null
condition|)
block|{
return|return
literal|null
return|;
block|}
if|if
condition|(
name|file
operator|.
name|getParentFile
argument_list|()
operator|!=
literal|null
operator|&&
operator|!
name|file
operator|.
name|getParentFile
argument_list|()
operator|.
name|exists
argument_list|()
condition|)
block|{
name|file
operator|.
name|getParentFile
argument_list|()
operator|.
name|mkdirs
argument_list|()
expr_stmt|;
block|}
name|RandomAccessFile
name|raFile
init|=
literal|null
decl_stmt|;
try|try
block|{
name|raFile
operator|=
operator|new
name|RandomAccessFile
argument_list|(
name|file
argument_list|,
literal|"rw"
argument_list|)
expr_stmt|;
if|if
condition|(
name|append
condition|)
block|{
name|raFile
operator|.
name|seek
argument_list|(
name|raFile
operator|.
name|length
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
name|FileNotFoundException
name|e
parameter_list|)
block|{
name|SVNErrorMessage
name|err
init|=
name|SVNErrorMessage
operator|.
name|create
argument_list|(
name|SVNErrorCode
operator|.
name|IO_ERROR
argument_list|,
literal|"Can not write to file ''{0}'': {1}"
argument_list|,
operator|new
name|Object
index|[]
block|{
name|file
block|,
name|e
operator|.
name|getMessage
argument_list|()
block|}
argument_list|)
decl_stmt|;
name|SVNErrorManager
operator|.
name|error
argument_list|(
name|err
argument_list|,
name|e
argument_list|,
name|Level
operator|.
name|FINE
argument_list|,
name|SVNLogType
operator|.
name|DEFAULT
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|ioe
parameter_list|)
block|{
name|SVNErrorMessage
name|err
init|=
name|SVNErrorMessage
operator|.
name|create
argument_list|(
name|SVNErrorCode
operator|.
name|IO_ERROR
argument_list|,
literal|"Can not set position pointer in file ''{0}'': {1}"
argument_list|,
operator|new
name|Object
index|[]
block|{
name|file
block|,
name|ioe
operator|.
name|getMessage
argument_list|()
block|}
argument_list|)
decl_stmt|;
name|SVNErrorManager
operator|.
name|error
argument_list|(
name|err
argument_list|,
name|ioe
argument_list|,
name|Level
operator|.
name|FINE
argument_list|,
name|SVNLogType
operator|.
name|DEFAULT
argument_list|)
expr_stmt|;
block|}
return|return
name|raFile
return|;
block|}
specifier|public
specifier|static
name|InputStream
name|openFileForReading
parameter_list|(
name|File
name|file
parameter_list|)
throws|throws
name|SVNException
block|{
return|return
name|openFileForReading
argument_list|(
name|file
argument_list|,
name|Level
operator|.
name|FINE
argument_list|,
name|SVNLogType
operator|.
name|DEFAULT
argument_list|)
return|;
block|}
specifier|public
specifier|static
name|InputStream
name|openFileForReading
parameter_list|(
name|File
name|file
parameter_list|,
name|SVNLogType
name|logType
parameter_list|)
throws|throws
name|SVNException
block|{
return|return
name|openFileForReading
argument_list|(
name|file
argument_list|,
name|Level
operator|.
name|FINE
argument_list|,
name|logType
argument_list|)
return|;
block|}
specifier|public
specifier|static
name|InputStream
name|openFileForReading
parameter_list|(
name|File
name|file
parameter_list|,
name|Level
name|logLevel
parameter_list|,
name|SVNLogType
name|logType
parameter_list|)
throws|throws
name|SVNException
block|{
if|if
condition|(
name|file
operator|==
literal|null
condition|)
block|{
return|return
literal|null
return|;
block|}
try|try
block|{
return|return
operator|new
name|BufferedInputStream
argument_list|(
name|createFileInputStream
argument_list|(
name|file
argument_list|)
argument_list|)
return|;
block|}
catch|catch
parameter_list|(
name|FileNotFoundException
name|nfe
parameter_list|)
block|{
name|SVNErrorMessage
name|err
init|=
name|SVNErrorMessage
operator|.
name|create
argument_list|(
name|SVNErrorCode
operator|.
name|IO_ERROR
argument_list|,
literal|"Cannot read from ''{0}'': {1}"
argument_list|,
operator|new
name|Object
index|[]
block|{
name|file
block|,
name|nfe
operator|.
name|getMessage
argument_list|()
block|}
argument_list|)
decl_stmt|;
name|SVNErrorManager
operator|.
name|error
argument_list|(
name|err
argument_list|,
name|logLevel
argument_list|,
name|logType
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
name|SVNErrorMessage
name|err
init|=
name|SVNErrorMessage
operator|.
name|create
argument_list|(
name|SVNErrorCode
operator|.
name|IO_ERROR
argument_list|,
literal|"Cannot read from ''{0}'': {1}"
argument_list|,
operator|new
name|Object
index|[]
block|{
name|file
block|,
name|e
operator|.
name|getMessage
argument_list|()
block|}
argument_list|)
decl_stmt|;
name|SVNErrorManager
operator|.
name|error
argument_list|(
name|err
argument_list|,
name|e
argument_list|,
name|logLevel
argument_list|,
name|logType
argument_list|)
expr_stmt|;
block|}
return|return
literal|null
return|;
block|}
specifier|public
specifier|static
name|InputStream
name|createFileInputStream
parameter_list|(
name|File
name|file
parameter_list|)
throws|throws
name|IOException
block|{
return|return
operator|(
operator|(
name|Resource
operator|)
name|file
operator|)
operator|.
name|getInputStream
argument_list|()
return|;
block|}
specifier|public
specifier|static
name|RandomAccessFile
name|openRAFileForReading
parameter_list|(
name|File
name|file
parameter_list|)
throws|throws
name|SVNException
block|{
if|if
condition|(
name|file
operator|==
literal|null
condition|)
block|{
return|return
literal|null
return|;
block|}
if|if
condition|(
operator|!
name|file
operator|.
name|isFile
argument_list|()
operator|||
operator|!
name|file
operator|.
name|canRead
argument_list|()
condition|)
block|{
name|SVNErrorMessage
name|err
init|=
name|SVNErrorMessage
operator|.
name|create
argument_list|(
name|SVNErrorCode
operator|.
name|IO_ERROR
argument_list|,
literal|"Cannot read from ''{0}'': path refers to a directory or read access is denied"
argument_list|,
name|file
argument_list|)
decl_stmt|;
name|SVNErrorManager
operator|.
name|error
argument_list|(
name|err
argument_list|,
name|Level
operator|.
name|FINE
argument_list|,
name|SVNLogType
operator|.
name|WC
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
operator|!
name|file
operator|.
name|exists
argument_list|()
condition|)
block|{
name|SVNErrorMessage
name|err
init|=
name|SVNErrorMessage
operator|.
name|create
argument_list|(
name|SVNErrorCode
operator|.
name|IO_ERROR
argument_list|,
literal|"File ''{0}'' does not exist"
argument_list|,
name|file
argument_list|)
decl_stmt|;
name|SVNErrorManager
operator|.
name|error
argument_list|(
name|err
argument_list|,
name|Level
operator|.
name|FINE
argument_list|,
name|SVNLogType
operator|.
name|WC
argument_list|)
expr_stmt|;
block|}
try|try
block|{
return|return
operator|new
name|RandomAccessFile
argument_list|(
name|file
argument_list|,
literal|"r"
argument_list|)
return|;
block|}
catch|catch
parameter_list|(
name|FileNotFoundException
name|e
parameter_list|)
block|{
name|SVNErrorMessage
name|err
init|=
name|SVNErrorMessage
operator|.
name|create
argument_list|(
name|SVNErrorCode
operator|.
name|IO_ERROR
argument_list|,
literal|"Cannot read from ''{0}'': {1}"
argument_list|,
operator|new
name|Object
index|[]
block|{
name|file
block|,
name|e
operator|.
name|getMessage
argument_list|()
block|}
argument_list|)
decl_stmt|;
name|SVNErrorManager
operator|.
name|error
argument_list|(
name|err
argument_list|,
name|Level
operator|.
name|FINE
argument_list|,
name|SVNLogType
operator|.
name|WC
argument_list|)
expr_stmt|;
block|}
return|return
literal|null
return|;
block|}
specifier|public
specifier|static
name|void
name|closeFile
parameter_list|(
name|InputStream
name|is
parameter_list|)
block|{
if|if
condition|(
name|is
operator|==
literal|null
condition|)
block|{
return|return;
block|}
try|try
block|{
name|is
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
comment|//
block|}
block|}
specifier|public
specifier|static
name|void
name|closeFile
parameter_list|(
name|ISVNInputFile
name|inFile
parameter_list|)
block|{
if|if
condition|(
name|inFile
operator|==
literal|null
condition|)
block|{
return|return;
block|}
try|try
block|{
name|inFile
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
comment|//
block|}
block|}
specifier|public
specifier|static
name|void
name|closeFile
parameter_list|(
name|OutputStream
name|os
parameter_list|)
block|{
if|if
condition|(
name|os
operator|==
literal|null
condition|)
block|{
return|return;
block|}
try|try
block|{
name|os
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
comment|//
block|}
block|}
specifier|public
specifier|static
name|void
name|closeFile
parameter_list|(
name|RandomAccessFile
name|raf
parameter_list|)
block|{
if|if
condition|(
name|raf
operator|==
literal|null
condition|)
block|{
return|return;
block|}
try|try
block|{
name|raf
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
comment|//
block|}
block|}
specifier|public
specifier|static
name|String
name|execCommand
parameter_list|(
name|String
index|[]
name|commandLine
parameter_list|)
throws|throws
name|SVNException
block|{
return|return
name|execCommand
argument_list|(
name|commandLine
argument_list|,
literal|false
argument_list|,
literal|null
argument_list|)
return|;
block|}
specifier|public
specifier|static
name|String
name|execCommand
parameter_list|(
name|String
index|[]
name|commandLine
parameter_list|,
name|boolean
name|waitAfterRead
parameter_list|,
name|ISVNReturnValueCallback
name|callback
parameter_list|)
throws|throws
name|SVNException
block|{
return|return
name|execCommand
argument_list|(
name|commandLine
argument_list|,
literal|null
argument_list|,
name|waitAfterRead
argument_list|,
name|callback
argument_list|)
return|;
block|}
specifier|public
specifier|static
name|String
name|execCommand
parameter_list|(
name|String
index|[]
name|commandLine
parameter_list|,
name|String
index|[]
name|env
parameter_list|,
name|boolean
name|waitAfterRead
parameter_list|,
name|ISVNReturnValueCallback
name|callback
parameter_list|)
throws|throws
name|SVNException
block|{
name|InputStream
name|is
init|=
literal|null
decl_stmt|;
name|boolean
name|handleOutput
init|=
name|callback
operator|!=
literal|null
operator|&&
name|callback
operator|.
name|isHandleProgramOutput
argument_list|()
decl_stmt|;
name|StringBuffer
name|result
init|=
name|handleOutput
condition|?
literal|null
else|:
operator|new
name|StringBuffer
argument_list|()
decl_stmt|;
name|Process
name|process
init|=
literal|null
decl_stmt|;
try|try
block|{
name|process
operator|=
name|Runtime
operator|.
name|getRuntime
argument_list|()
operator|.
name|exec
argument_list|(
name|commandLine
argument_list|,
name|env
argument_list|)
expr_stmt|;
name|is
operator|=
name|process
operator|.
name|getInputStream
argument_list|()
expr_stmt|;
if|if
condition|(
operator|!
name|waitAfterRead
condition|)
block|{
name|int
name|rc
init|=
name|process
operator|.
name|waitFor
argument_list|()
decl_stmt|;
if|if
condition|(
name|callback
operator|!=
literal|null
condition|)
block|{
name|callback
operator|.
name|handleReturnValue
argument_list|(
name|rc
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|rc
operator|!=
literal|0
condition|)
block|{
return|return
literal|null
return|;
block|}
block|}
name|int
name|r
decl_stmt|;
while|while
condition|(
operator|(
name|r
operator|=
name|is
operator|.
name|read
argument_list|()
operator|)
operator|>=
literal|0
condition|)
block|{
name|char
name|ch
init|=
operator|(
name|char
operator|)
operator|(
name|r
operator|&
literal|0xFF
operator|)
decl_stmt|;
if|if
condition|(
name|handleOutput
condition|)
block|{
name|callback
operator|.
name|handleChar
argument_list|(
name|ch
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|result
operator|.
name|append
argument_list|(
name|ch
argument_list|)
expr_stmt|;
block|}
block|}
if|if
condition|(
name|waitAfterRead
condition|)
block|{
name|int
name|rc
init|=
name|process
operator|.
name|waitFor
argument_list|()
decl_stmt|;
if|if
condition|(
name|callback
operator|!=
literal|null
condition|)
block|{
name|callback
operator|.
name|handleReturnValue
argument_list|(
name|rc
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|rc
operator|!=
literal|0
condition|)
block|{
return|return
literal|null
return|;
block|}
block|}
return|return
name|handleOutput
condition|?
literal|null
else|:
name|result
operator|.
name|toString
argument_list|()
operator|.
name|trim
argument_list|()
return|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
name|SVNDebugLog
operator|.
name|getDefaultLog
argument_list|()
operator|.
name|logFinest
argument_list|(
name|SVNLogType
operator|.
name|DEFAULT
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|InterruptedException
name|e
parameter_list|)
block|{
name|SVNDebugLog
operator|.
name|getDefaultLog
argument_list|()
operator|.
name|logFinest
argument_list|(
name|SVNLogType
operator|.
name|DEFAULT
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
name|closeFile
argument_list|(
name|is
argument_list|)
expr_stmt|;
if|if
condition|(
name|process
operator|!=
literal|null
condition|)
block|{
name|process
operator|.
name|destroy
argument_list|()
expr_stmt|;
block|}
block|}
return|return
literal|null
return|;
block|}
specifier|public
specifier|static
name|void
name|closeFile
parameter_list|(
name|Writer
name|os
parameter_list|)
block|{
if|if
condition|(
name|os
operator|!=
literal|null
condition|)
block|{
try|try
block|{
name|os
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
comment|//
block|}
block|}
block|}
specifier|public
specifier|static
name|void
name|closeFile
parameter_list|(
name|Reader
name|is
parameter_list|)
block|{
if|if
condition|(
name|is
operator|!=
literal|null
condition|)
block|{
try|try
block|{
name|is
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
comment|//
block|}
block|}
block|}
specifier|public
specifier|static
name|String
name|getAdminDirectoryName
parameter_list|()
block|{
if|if
condition|(
name|ourAdminDirectoryName
operator|==
literal|null
condition|)
block|{
name|String
name|defaultAdminDir
init|=
literal|".svn"
decl_stmt|;
if|if
condition|(
name|getEnvironmentVariable
argument_list|(
literal|"SVN_ASP_DOT_NET_HACK"
argument_list|)
operator|!=
literal|null
condition|)
block|{
name|defaultAdminDir
operator|=
literal|"_svn"
expr_stmt|;
block|}
name|ourAdminDirectoryName
operator|=
name|System
operator|.
name|getProperty
argument_list|(
literal|"svnkit.admindir"
argument_list|,
name|System
operator|.
name|getProperty
argument_list|(
literal|"javasvn.admindir"
argument_list|,
name|defaultAdminDir
argument_list|)
argument_list|)
expr_stmt|;
if|if
condition|(
name|ourAdminDirectoryName
operator|==
literal|null
operator|||
literal|""
operator|.
name|equals
argument_list|(
name|ourAdminDirectoryName
operator|.
name|trim
argument_list|()
argument_list|)
condition|)
block|{
name|ourAdminDirectoryName
operator|=
name|defaultAdminDir
expr_stmt|;
block|}
block|}
return|return
name|ourAdminDirectoryName
return|;
block|}
specifier|public
specifier|static
name|void
name|setAdminDirectoryName
parameter_list|(
name|String
name|name
parameter_list|)
block|{
name|ourAdminDirectoryName
operator|=
name|name
expr_stmt|;
block|}
specifier|public
specifier|static
name|File
name|getApplicationDataPath
parameter_list|()
block|{
if|if
condition|(
name|ourAppDataPath
operator|!=
literal|null
condition|)
block|{
return|return
name|ourAppDataPath
return|;
block|}
name|String
name|jnaAppData
init|=
name|SVNJNAUtil
operator|.
name|getApplicationDataPath
argument_list|(
literal|false
argument_list|)
decl_stmt|;
if|if
condition|(
name|jnaAppData
operator|!=
literal|null
condition|)
block|{
name|ourAppDataPath
operator|=
operator|new
name|File
argument_list|(
name|jnaAppData
argument_list|)
expr_stmt|;
return|return
name|ourAppDataPath
return|;
block|}
name|String
name|envAppData
init|=
name|getEnvironmentVariable
argument_list|(
literal|"APPDATA"
argument_list|)
decl_stmt|;
if|if
condition|(
name|envAppData
operator|==
literal|null
condition|)
block|{
comment|// no appdata for that user, fallback to system one.
name|ourAppDataPath
operator|=
name|getSystemApplicationDataPath
argument_list|()
expr_stmt|;
block|}
else|else
block|{
name|ourAppDataPath
operator|=
operator|new
name|File
argument_list|(
name|envAppData
argument_list|)
expr_stmt|;
block|}
return|return
name|ourAppDataPath
return|;
block|}
specifier|public
specifier|static
name|File
name|getSystemApplicationDataPath
parameter_list|()
block|{
if|if
condition|(
name|ourSystemAppDataPath
operator|!=
literal|null
condition|)
block|{
return|return
name|ourSystemAppDataPath
return|;
block|}
name|String
name|jnaAppData
init|=
name|SVNJNAUtil
operator|.
name|getApplicationDataPath
argument_list|(
literal|true
argument_list|)
decl_stmt|;
if|if
condition|(
name|jnaAppData
operator|!=
literal|null
condition|)
block|{
name|ourSystemAppDataPath
operator|=
operator|new
name|File
argument_list|(
name|jnaAppData
argument_list|)
expr_stmt|;
return|return
name|ourSystemAppDataPath
return|;
block|}
name|String
name|envAppData
init|=
name|getEnvironmentVariable
argument_list|(
literal|"ALLUSERSPROFILE"
argument_list|)
decl_stmt|;
if|if
condition|(
name|envAppData
operator|==
literal|null
condition|)
block|{
name|ourSystemAppDataPath
operator|=
operator|new
name|File
argument_list|(
operator|new
name|File
argument_list|(
literal|"C:/Documents and Settings/All Users"
argument_list|)
argument_list|,
literal|"Application Data"
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|ourSystemAppDataPath
operator|=
operator|new
name|File
argument_list|(
name|envAppData
argument_list|,
literal|"Application Data"
argument_list|)
expr_stmt|;
block|}
return|return
name|ourSystemAppDataPath
return|;
block|}
specifier|public
specifier|static
name|String
name|getEnvironmentVariable
parameter_list|(
name|String
name|name
parameter_list|)
block|{
try|try
block|{
comment|// pre-Java 1.5 this throws an Error. On Java 1.5 it
comment|// returns the environment variable
name|Method
name|getenv
init|=
name|System
operator|.
name|class
operator|.
name|getMethod
argument_list|(
literal|"getenv"
argument_list|,
operator|new
name|Class
index|[]
block|{
name|String
operator|.
name|class
block|}
argument_list|)
decl_stmt|;
if|if
condition|(
name|getenv
operator|!=
literal|null
condition|)
block|{
name|Object
name|value
init|=
name|getenv
operator|.
name|invoke
argument_list|(
literal|null
argument_list|,
operator|new
name|Object
index|[]
block|{
name|name
block|}
argument_list|)
decl_stmt|;
if|if
condition|(
name|value
operator|instanceof
name|String
condition|)
block|{
return|return
operator|(
name|String
operator|)
name|value
return|;
block|}
block|}
block|}
catch|catch
parameter_list|(
name|Throwable
name|e
parameter_list|)
block|{
try|try
block|{
comment|// This means we are on 1.4. Get all variables into
comment|// a Properties object and get the variable from that
return|return
name|getEnvironment
argument_list|()
operator|.
name|getProperty
argument_list|(
name|name
argument_list|)
return|;
block|}
catch|catch
parameter_list|(
name|Throwable
name|e1
parameter_list|)
block|{
name|SVNDebugLog
operator|.
name|getDefaultLog
argument_list|()
operator|.
name|logFinest
argument_list|(
name|SVNLogType
operator|.
name|DEFAULT
argument_list|,
name|e
argument_list|)
expr_stmt|;
name|SVNDebugLog
operator|.
name|getDefaultLog
argument_list|()
operator|.
name|logFinest
argument_list|(
name|SVNLogType
operator|.
name|DEFAULT
argument_list|,
name|e1
argument_list|)
expr_stmt|;
return|return
literal|null
return|;
block|}
block|}
return|return
literal|null
return|;
block|}
specifier|private
specifier|static
name|String
name|ourTestEditor
init|=
literal|null
decl_stmt|;
specifier|private
specifier|static
name|String
name|ourTestMergeTool
init|=
literal|null
decl_stmt|;
specifier|private
specifier|static
name|String
name|ourTestFunction
init|=
literal|null
decl_stmt|;
specifier|public
specifier|static
name|void
name|setTestEnvironment
parameter_list|(
name|String
name|editor
parameter_list|,
name|String
name|mergeTool
parameter_list|,
name|String
name|function
parameter_list|)
block|{
name|ourTestEditor
operator|=
name|editor
expr_stmt|;
name|ourTestMergeTool
operator|=
name|mergeTool
expr_stmt|;
name|ourTestFunction
operator|=
name|function
expr_stmt|;
block|}
specifier|public
specifier|static
name|String
index|[]
name|getTestEnvironment
parameter_list|()
block|{
return|return
operator|new
name|String
index|[]
block|{
name|ourTestEditor
block|,
name|ourTestMergeTool
block|,
name|ourTestFunction
block|}
return|;
block|}
specifier|public
specifier|static
name|Properties
name|getEnvironment
parameter_list|()
throws|throws
name|Throwable
block|{
name|Properties
name|envVars
init|=
operator|new
name|Properties
argument_list|()
decl_stmt|;
comment|//UNDERSTAND: code ???
return|return
name|envVars
return|;
block|}
specifier|public
specifier|static
name|File
name|createTempDirectory
parameter_list|(
name|String
name|name
parameter_list|)
throws|throws
name|SVNException
block|{
name|File
name|tmpFile
init|=
literal|null
decl_stmt|;
try|try
block|{
name|tmpFile
operator|=
name|File
operator|.
name|createTempFile
argument_list|(
literal|"svnkit"
operator|+
name|name
argument_list|,
literal|".tmp"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
name|SVNErrorMessage
name|err
init|=
name|SVNErrorMessage
operator|.
name|create
argument_list|(
name|SVNErrorCode
operator|.
name|IO_ERROR
argument_list|,
literal|"Cannot create temporary directory: {0}"
argument_list|,
name|e
operator|.
name|getMessage
argument_list|()
argument_list|)
decl_stmt|;
name|SVNErrorManager
operator|.
name|error
argument_list|(
name|err
argument_list|,
name|e
argument_list|,
name|Level
operator|.
name|FINE
argument_list|,
name|SVNLogType
operator|.
name|DEFAULT
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|tmpFile
operator|.
name|exists
argument_list|()
condition|)
block|{
name|tmpFile
operator|.
name|delete
argument_list|()
expr_stmt|;
block|}
name|tmpFile
operator|.
name|mkdirs
argument_list|()
expr_stmt|;
return|return
name|tmpFile
return|;
block|}
specifier|public
specifier|static
name|File
name|createTempFile
parameter_list|(
name|String
name|prefix
parameter_list|,
name|String
name|suffix
parameter_list|)
throws|throws
name|SVNException
block|{
name|File
name|tmpFile
init|=
literal|null
decl_stmt|;
try|try
block|{
if|if
condition|(
name|prefix
operator|.
name|length
argument_list|()
operator|<
literal|3
condition|)
block|{
name|prefix
operator|=
literal|"svn"
operator|+
name|prefix
expr_stmt|;
block|}
name|tmpFile
operator|=
name|File
operator|.
name|createTempFile
argument_list|(
name|prefix
argument_list|,
name|suffix
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
name|SVNErrorMessage
name|err
init|=
name|SVNErrorMessage
operator|.
name|create
argument_list|(
name|SVNErrorCode
operator|.
name|IO_ERROR
argument_list|,
literal|"Cannot create temporary file: {0}"
argument_list|,
name|e
operator|.
name|getMessage
argument_list|()
argument_list|)
decl_stmt|;
name|SVNErrorManager
operator|.
name|error
argument_list|(
name|err
argument_list|,
name|e
argument_list|,
name|Level
operator|.
name|FINE
argument_list|,
name|SVNLogType
operator|.
name|DEFAULT
argument_list|)
expr_stmt|;
block|}
return|return
name|tmpFile
return|;
block|}
specifier|public
specifier|static
name|File
name|getSystemConfigurationDirectory
parameter_list|()
block|{
return|return
operator|new
name|Resource
argument_list|(
literal|"/system/etc/subversion"
argument_list|)
return|;
block|}
specifier|public
specifier|static
name|String
name|readSingleLine
parameter_list|(
name|File
name|file
parameter_list|)
throws|throws
name|IOException
block|{
if|if
condition|(
operator|!
name|file
operator|.
name|isFile
argument_list|()
operator|||
operator|!
name|file
operator|.
name|canRead
argument_list|()
condition|)
block|{
throw|throw
operator|new
name|IOException
argument_list|(
literal|"can't open file '"
operator|+
name|file
operator|.
name|getAbsolutePath
argument_list|()
operator|+
literal|"'"
argument_list|)
throw|;
block|}
name|BufferedReader
name|reader
init|=
literal|null
decl_stmt|;
name|String
name|line
init|=
literal|null
decl_stmt|;
name|InputStream
name|is
init|=
literal|null
decl_stmt|;
try|try
block|{
name|is
operator|=
name|createFileInputStream
argument_list|(
name|file
argument_list|)
expr_stmt|;
name|reader
operator|=
operator|new
name|BufferedReader
argument_list|(
operator|new
name|InputStreamReader
argument_list|(
name|is
argument_list|,
literal|"UTF-8"
argument_list|)
argument_list|)
expr_stmt|;
name|line
operator|=
name|reader
operator|.
name|readLine
argument_list|()
expr_stmt|;
block|}
finally|finally
block|{
name|closeFile
argument_list|(
name|is
argument_list|)
expr_stmt|;
block|}
return|return
name|line
return|;
block|}
specifier|private
specifier|static
name|String
name|decode
parameter_list|(
name|CharsetDecoder
name|decoder
parameter_list|,
name|byte
index|[]
name|in
parameter_list|)
block|{
name|ByteBuffer
name|inBuf
init|=
name|ByteBuffer
operator|.
name|wrap
argument_list|(
name|in
argument_list|)
decl_stmt|;
name|CharBuffer
name|outBuf
init|=
name|CharBuffer
operator|.
name|allocate
argument_list|(
name|inBuf
operator|.
name|capacity
argument_list|()
operator|*
name|Math
operator|.
name|round
argument_list|(
name|decoder
operator|.
name|maxCharsPerByte
argument_list|()
operator|+
literal|0.5f
argument_list|)
argument_list|)
decl_stmt|;
name|decoder
operator|.
name|decode
argument_list|(
name|inBuf
argument_list|,
name|outBuf
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|decoder
operator|.
name|flush
argument_list|(
name|outBuf
argument_list|)
expr_stmt|;
name|decoder
operator|.
name|reset
argument_list|()
expr_stmt|;
return|return
name|outBuf
operator|.
name|flip
argument_list|()
operator|.
name|toString
argument_list|()
return|;
block|}
specifier|private
specifier|static
name|Subject
name|getUser
parameter_list|()
throws|throws
name|SVNException
block|{
name|BrokerPool
name|database
decl_stmt|;
try|try
block|{
name|database
operator|=
name|BrokerPool
operator|.
name|getInstance
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|EXistException
name|e
parameter_list|)
block|{
name|SVNErrorMessage
name|err
init|=
name|SVNErrorMessage
operator|.
name|create
argument_list|(
name|SVNErrorCode
operator|.
name|IO_ERROR
argument_list|,
literal|"Cannot get current user: {0}"
argument_list|,
name|e
operator|.
name|getMessage
argument_list|()
argument_list|)
decl_stmt|;
name|SVNErrorManager
operator|.
name|error
argument_list|(
name|err
argument_list|,
name|e
argument_list|,
name|Level
operator|.
name|FINE
argument_list|,
name|SVNLogType
operator|.
name|DEFAULT
argument_list|)
expr_stmt|;
return|return
literal|null
return|;
block|}
name|DBBroker
name|broker
init|=
literal|null
decl_stmt|;
try|try
block|{
name|broker
operator|=
name|database
operator|.
name|get
argument_list|(
literal|null
argument_list|)
expr_stmt|;
return|return
name|broker
operator|.
name|getSubject
argument_list|()
return|;
block|}
catch|catch
parameter_list|(
name|EXistException
name|e
parameter_list|)
block|{
name|SVNErrorMessage
name|err
init|=
name|SVNErrorMessage
operator|.
name|create
argument_list|(
name|SVNErrorCode
operator|.
name|IO_ERROR
argument_list|,
literal|"Cannot get current user: {0}"
argument_list|,
name|e
operator|.
name|getMessage
argument_list|()
argument_list|)
decl_stmt|;
name|SVNErrorManager
operator|.
name|error
argument_list|(
name|err
argument_list|,
name|e
argument_list|,
name|Level
operator|.
name|FINE
argument_list|,
name|SVNLogType
operator|.
name|DEFAULT
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
name|database
operator|.
name|release
argument_list|(
name|broker
argument_list|)
expr_stmt|;
block|}
return|return
literal|null
return|;
block|}
specifier|private
specifier|static
name|String
name|getCurrentUser
parameter_list|()
throws|throws
name|SVNException
block|{
return|return
name|getUser
argument_list|()
operator|.
name|getName
argument_list|()
return|;
block|}
specifier|private
specifier|static
name|String
name|getCurrentGroup
parameter_list|()
throws|throws
name|SVNException
block|{
return|return
name|getUser
argument_list|()
operator|.
name|getPrimaryGroup
argument_list|()
return|;
block|}
specifier|private
specifier|static
name|boolean
name|isHex
parameter_list|(
name|char
name|ch
parameter_list|)
block|{
return|return
name|Character
operator|.
name|isDigit
argument_list|(
name|ch
argument_list|)
operator|||
operator|(
name|Character
operator|.
name|toUpperCase
argument_list|(
name|ch
argument_list|)
operator|>=
literal|'A'
operator|&&
name|Character
operator|.
name|toUpperCase
argument_list|(
name|ch
argument_list|)
operator|<=
literal|'F'
operator|)
return|;
block|}
block|}
end_class

end_unit

