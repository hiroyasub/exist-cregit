begin_unit|revision:1.0.0;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * ====================================================================  * Copyright (c) 2004-2010 TMate Software Ltd.  All rights reserved.  *  * This software is licensed as described in the file COPYING, which  * you should have received as part of this distribution.  The terms  * are also available at http://svnkit.com/license.html  * If newer versions of this license are posted there, you may use a  * newer version instead, at your option.  * ====================================================================  */
end_comment

begin_package
package|package
name|org
operator|.
name|exist
operator|.
name|versioning
operator|.
name|svn
operator|.
name|internal
operator|.
name|wc
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|File
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|OutputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Date
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Iterator
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|TreeMap
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|versioning
operator|.
name|svn
operator|.
name|internal
operator|.
name|wc
operator|.
name|admin
operator|.
name|SVNAdminArea
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|versioning
operator|.
name|svn
operator|.
name|internal
operator|.
name|wc
operator|.
name|admin
operator|.
name|SVNAdminAreaInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|versioning
operator|.
name|svn
operator|.
name|internal
operator|.
name|wc
operator|.
name|admin
operator|.
name|SVNEntry
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|versioning
operator|.
name|svn
operator|.
name|internal
operator|.
name|wc
operator|.
name|admin
operator|.
name|SVNWCAccess
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|versioning
operator|.
name|svn
operator|.
name|wc
operator|.
name|ISVNOptions
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|versioning
operator|.
name|svn
operator|.
name|wc
operator|.
name|ISVNStatusHandler
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|versioning
operator|.
name|svn
operator|.
name|wc
operator|.
name|SVNStatus
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|versioning
operator|.
name|svn
operator|.
name|wc
operator|.
name|SVNStatusType
import|;
end_import

begin_import
import|import
name|org
operator|.
name|tmatesoft
operator|.
name|svn
operator|.
name|core
operator|.
name|SVNCommitInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|tmatesoft
operator|.
name|svn
operator|.
name|core
operator|.
name|SVNDepth
import|;
end_import

begin_import
import|import
name|org
operator|.
name|tmatesoft
operator|.
name|svn
operator|.
name|core
operator|.
name|SVNErrorCode
import|;
end_import

begin_import
import|import
name|org
operator|.
name|tmatesoft
operator|.
name|svn
operator|.
name|core
operator|.
name|SVNException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|tmatesoft
operator|.
name|svn
operator|.
name|core
operator|.
name|SVNLock
import|;
end_import

begin_import
import|import
name|org
operator|.
name|tmatesoft
operator|.
name|svn
operator|.
name|core
operator|.
name|SVNNodeKind
import|;
end_import

begin_import
import|import
name|org
operator|.
name|tmatesoft
operator|.
name|svn
operator|.
name|core
operator|.
name|SVNProperty
import|;
end_import

begin_import
import|import
name|org
operator|.
name|tmatesoft
operator|.
name|svn
operator|.
name|core
operator|.
name|SVNURL
import|;
end_import

begin_import
import|import
name|org
operator|.
name|tmatesoft
operator|.
name|svn
operator|.
name|core
operator|.
name|SVNPropertyValue
import|;
end_import

begin_import
import|import
name|org
operator|.
name|tmatesoft
operator|.
name|svn
operator|.
name|core
operator|.
name|internal
operator|.
name|util
operator|.
name|SVNPathUtil
import|;
end_import

begin_import
import|import
name|org
operator|.
name|tmatesoft
operator|.
name|svn
operator|.
name|core
operator|.
name|internal
operator|.
name|util
operator|.
name|SVNDate
import|;
end_import

begin_import
import|import
name|org
operator|.
name|tmatesoft
operator|.
name|svn
operator|.
name|core
operator|.
name|io
operator|.
name|ISVNEditor
import|;
end_import

begin_import
import|import
name|org
operator|.
name|tmatesoft
operator|.
name|svn
operator|.
name|core
operator|.
name|io
operator|.
name|diff
operator|.
name|SVNDiffWindow
import|;
end_import

begin_import
import|import
name|org
operator|.
name|tmatesoft
operator|.
name|svn
operator|.
name|core
operator|.
name|wc
operator|.
name|SVNRevision
import|;
end_import

begin_comment
comment|/**  * @version 1.3  * @author  TMate Software Ltd.  */
end_comment

begin_class
specifier|public
class|class
name|SVNRemoteStatusEditor
extends|extends
name|SVNStatusEditor
implements|implements
name|ISVNEditor
implements|,
name|ISVNStatusHandler
block|{
specifier|private
name|boolean
name|myIsRootOpen
decl_stmt|;
specifier|private
name|SVNStatus
name|myAnchorStatus
decl_stmt|;
specifier|private
name|DirectoryInfo
name|myDirectoryInfo
decl_stmt|;
specifier|private
name|FileInfo
name|myFileInfo
decl_stmt|;
specifier|public
name|SVNRemoteStatusEditor
parameter_list|(
name|ISVNOptions
name|options
parameter_list|,
name|SVNWCAccess
name|wcAccess
parameter_list|,
name|SVNAdminAreaInfo
name|info
parameter_list|,
name|boolean
name|noIgnore
parameter_list|,
name|boolean
name|reportAll
parameter_list|,
name|SVNDepth
name|depth
parameter_list|,
name|ISVNStatusHandler
name|handler
parameter_list|)
throws|throws
name|SVNException
block|{
name|super
argument_list|(
name|options
argument_list|,
name|wcAccess
argument_list|,
name|info
argument_list|,
name|noIgnore
argument_list|,
name|reportAll
argument_list|,
name|depth
argument_list|,
name|handler
argument_list|)
expr_stmt|;
name|myAnchorStatus
operator|=
name|createStatus
argument_list|(
name|info
operator|.
name|getAnchor
argument_list|()
operator|.
name|getRoot
argument_list|()
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|openRoot
parameter_list|(
name|long
name|revision
parameter_list|)
throws|throws
name|SVNException
block|{
name|myIsRootOpen
operator|=
literal|true
expr_stmt|;
name|myDirectoryInfo
operator|=
operator|new
name|DirectoryInfo
argument_list|(
literal|null
argument_list|,
literal|null
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|deleteEntry
parameter_list|(
name|String
name|path
parameter_list|,
name|long
name|revision
parameter_list|)
throws|throws
name|SVNException
block|{
name|File
name|file
init|=
name|getAnchor
argument_list|()
operator|.
name|getFile
argument_list|(
name|path
argument_list|)
decl_stmt|;
name|SVNEntry
name|entry
init|=
name|getWCAccess
argument_list|()
operator|.
name|getVersionedEntry
argument_list|(
name|file
argument_list|,
literal|false
argument_list|)
decl_stmt|;
name|File
name|dirPath
decl_stmt|;
name|String
name|name
decl_stmt|;
if|if
condition|(
name|entry
operator|.
name|getKind
argument_list|()
operator|==
name|SVNNodeKind
operator|.
name|DIR
condition|)
block|{
name|dirPath
operator|=
name|file
expr_stmt|;
name|name
operator|=
literal|""
expr_stmt|;
block|}
else|else
block|{
name|dirPath
operator|=
name|file
operator|.
name|getParentFile
argument_list|()
expr_stmt|;
name|name
operator|=
name|file
operator|.
name|getName
argument_list|()
expr_stmt|;
block|}
name|SVNAdminArea
name|dir
init|=
literal|null
decl_stmt|;
try|try
block|{
name|dir
operator|=
name|getWCAccess
argument_list|()
operator|.
name|retrieve
argument_list|(
name|dirPath
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|SVNException
name|e
parameter_list|)
block|{
name|SVNFileType
name|type
init|=
name|SVNFileType
operator|.
name|getType
argument_list|(
name|file
argument_list|)
decl_stmt|;
if|if
condition|(
name|type
operator|==
name|SVNFileType
operator|.
name|NONE
operator|&&
name|e
operator|.
name|getErrorMessage
argument_list|()
operator|.
name|getErrorCode
argument_list|()
operator|==
name|SVNErrorCode
operator|.
name|WC_NOT_LOCKED
condition|)
block|{
return|return;
block|}
throw|throw
name|e
throw|;
block|}
if|if
condition|(
name|dir
operator|.
name|getEntry
argument_list|(
name|name
argument_list|,
literal|false
argument_list|)
operator|!=
literal|null
condition|)
block|{
name|tweakStatusHash
argument_list|(
name|myDirectoryInfo
argument_list|,
literal|null
argument_list|,
name|file
argument_list|,
name|SVNStatusType
operator|.
name|STATUS_DELETED
argument_list|,
name|SVNStatusType
operator|.
name|STATUS_NONE
argument_list|,
literal|null
argument_list|,
name|SVNRevision
operator|.
name|create
argument_list|(
name|revision
argument_list|)
argument_list|)
expr_stmt|;
comment|// set entry node kind
name|SVNStatus
name|status
init|=
operator|(
name|SVNStatus
operator|)
name|myDirectoryInfo
operator|.
name|myChildrenStatuses
operator|.
name|get
argument_list|(
name|file
argument_list|)
decl_stmt|;
if|if
condition|(
name|status
operator|!=
literal|null
condition|)
block|{
name|status
operator|.
name|setRemoteStatus
argument_list|(
literal|null
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|,
name|dir
operator|.
name|getEntry
argument_list|(
name|name
argument_list|,
literal|false
argument_list|)
operator|.
name|getKind
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
if|if
condition|(
name|myDirectoryInfo
operator|.
name|myParent
operator|!=
literal|null
operator|&&
operator|!
name|hasTarget
argument_list|()
condition|)
block|{
name|tweakStatusHash
argument_list|(
name|myDirectoryInfo
operator|.
name|myParent
argument_list|,
name|myDirectoryInfo
argument_list|,
name|myDirectoryInfo
operator|.
name|myPath
argument_list|,
name|SVNStatusType
operator|.
name|STATUS_MODIFIED
argument_list|,
name|SVNStatusType
operator|.
name|STATUS_NONE
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|)
expr_stmt|;
block|}
if|else if
condition|(
operator|!
name|hasTarget
argument_list|()
operator|&&
name|myDirectoryInfo
operator|.
name|myParent
operator|==
literal|null
condition|)
block|{
name|myDirectoryInfo
operator|.
name|myIsContentsChanged
operator|=
literal|true
expr_stmt|;
block|}
block|}
specifier|public
name|void
name|addDir
parameter_list|(
name|String
name|path
parameter_list|,
name|String
name|copyFromPath
parameter_list|,
name|long
name|copyFromRevision
parameter_list|)
throws|throws
name|SVNException
block|{
name|myDirectoryInfo
operator|=
operator|new
name|DirectoryInfo
argument_list|(
name|path
argument_list|,
name|myDirectoryInfo
argument_list|)
expr_stmt|;
name|myDirectoryInfo
operator|.
name|myIsAdded
operator|=
literal|true
expr_stmt|;
name|myDirectoryInfo
operator|.
name|myParent
operator|.
name|myIsContentsChanged
operator|=
literal|true
expr_stmt|;
block|}
specifier|public
name|void
name|openDir
parameter_list|(
name|String
name|path
parameter_list|,
name|long
name|revision
parameter_list|)
throws|throws
name|SVNException
block|{
name|myDirectoryInfo
operator|=
operator|new
name|DirectoryInfo
argument_list|(
name|path
argument_list|,
name|myDirectoryInfo
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|changeDirProperty
parameter_list|(
name|String
name|name
parameter_list|,
name|SVNPropertyValue
name|value
parameter_list|)
throws|throws
name|SVNException
block|{
if|if
condition|(
operator|!
name|name
operator|.
name|startsWith
argument_list|(
name|SVNProperty
operator|.
name|SVN_ENTRY_PREFIX
argument_list|)
operator|&&
operator|!
name|name
operator|.
name|startsWith
argument_list|(
name|SVNProperty
operator|.
name|SVN_WC_PREFIX
argument_list|)
condition|)
block|{
name|myDirectoryInfo
operator|.
name|myIsPropertiesChanged
operator|=
literal|true
expr_stmt|;
block|}
if|if
condition|(
name|SVNProperty
operator|.
name|COMMITTED_REVISION
operator|.
name|equals
argument_list|(
name|name
argument_list|)
operator|&&
name|value
operator|!=
literal|null
condition|)
block|{
try|try
block|{
name|long
name|number
init|=
name|Long
operator|.
name|parseLong
argument_list|(
name|value
operator|.
name|getString
argument_list|()
argument_list|)
decl_stmt|;
name|myDirectoryInfo
operator|.
name|myRemoteRevision
operator|=
name|SVNRevision
operator|.
name|create
argument_list|(
name|number
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|NumberFormatException
name|nfe
parameter_list|)
block|{
name|myDirectoryInfo
operator|.
name|myRemoteRevision
operator|=
name|SVNRevision
operator|.
name|UNDEFINED
expr_stmt|;
block|}
block|}
if|else if
condition|(
name|SVNProperty
operator|.
name|COMMITTED_DATE
operator|.
name|equals
argument_list|(
name|name
argument_list|)
operator|&&
name|value
operator|!=
literal|null
condition|)
block|{
name|myDirectoryInfo
operator|.
name|myRemoteDate
operator|=
name|SVNDate
operator|.
name|parseDate
argument_list|(
name|value
operator|.
name|getString
argument_list|()
argument_list|)
expr_stmt|;
block|}
if|else if
condition|(
name|SVNProperty
operator|.
name|LAST_AUTHOR
operator|.
name|equals
argument_list|(
name|name
argument_list|)
operator|&&
name|value
operator|!=
literal|null
condition|)
block|{
name|myDirectoryInfo
operator|.
name|myRemoteAuthor
operator|=
name|value
operator|.
name|getString
argument_list|()
expr_stmt|;
block|}
block|}
specifier|public
name|void
name|closeDir
parameter_list|()
throws|throws
name|SVNException
block|{
name|DirectoryInfo
name|parent
init|=
name|myDirectoryInfo
operator|.
name|myParent
decl_stmt|;
if|if
condition|(
name|myDirectoryInfo
operator|.
name|myIsAdded
operator|||
name|myDirectoryInfo
operator|.
name|myIsPropertiesChanged
operator|||
name|myDirectoryInfo
operator|.
name|myIsContentsChanged
operator|||
operator|(
name|myDirectoryInfo
operator|.
name|myRemoteRevision
operator|!=
literal|null
operator|&&
name|myDirectoryInfo
operator|.
name|myRemoteRevision
operator|!=
name|SVNRevision
operator|.
name|UNDEFINED
operator|)
condition|)
block|{
name|SVNStatusType
name|contentsStatus
decl_stmt|;
name|SVNStatusType
name|propertiesStatus
decl_stmt|;
if|if
condition|(
name|myDirectoryInfo
operator|.
name|myIsAdded
condition|)
block|{
name|contentsStatus
operator|=
name|SVNStatusType
operator|.
name|STATUS_ADDED
expr_stmt|;
name|propertiesStatus
operator|=
name|myDirectoryInfo
operator|.
name|myIsPropertiesChanged
condition|?
name|SVNStatusType
operator|.
name|STATUS_ADDED
else|:
name|SVNStatusType
operator|.
name|STATUS_NONE
expr_stmt|;
block|}
else|else
block|{
name|contentsStatus
operator|=
name|myDirectoryInfo
operator|.
name|myIsContentsChanged
condition|?
name|SVNStatusType
operator|.
name|STATUS_MODIFIED
else|:
name|SVNStatusType
operator|.
name|STATUS_NONE
expr_stmt|;
name|propertiesStatus
operator|=
name|myDirectoryInfo
operator|.
name|myIsPropertiesChanged
condition|?
name|SVNStatusType
operator|.
name|STATUS_MODIFIED
else|:
name|SVNStatusType
operator|.
name|STATUS_NONE
expr_stmt|;
block|}
if|if
condition|(
name|parent
operator|!=
literal|null
condition|)
block|{
name|tweakStatusHash
argument_list|(
name|parent
argument_list|,
name|myDirectoryInfo
argument_list|,
name|myDirectoryInfo
operator|.
name|myPath
argument_list|,
name|contentsStatus
argument_list|,
name|propertiesStatus
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|)
expr_stmt|;
block|}
block|}
if|if
condition|(
name|parent
operator|!=
literal|null
operator|&&
name|myDirectoryInfo
operator|.
name|myDepth
operator|!=
name|SVNDepth
operator|.
name|EXCLUDE
condition|)
block|{
name|boolean
name|wasDeleted
init|=
literal|false
decl_stmt|;
name|SVNStatus
name|dirStatus
init|=
operator|(
name|SVNStatus
operator|)
name|parent
operator|.
name|myChildrenStatuses
operator|.
name|get
argument_list|(
name|myDirectoryInfo
operator|.
name|myPath
argument_list|)
decl_stmt|;
if|if
condition|(
name|dirStatus
operator|!=
literal|null
operator|&&
operator|(
name|dirStatus
operator|.
name|getRemoteContentsStatus
argument_list|()
operator|==
name|SVNStatusType
operator|.
name|STATUS_DELETED
operator|||
name|dirStatus
operator|.
name|getRemoteContentsStatus
argument_list|()
operator|==
name|SVNStatusType
operator|.
name|STATUS_REPLACED
operator|)
condition|)
block|{
name|wasDeleted
operator|=
literal|true
expr_stmt|;
block|}
name|handleStatusHash
argument_list|(
name|dirStatus
operator|!=
literal|null
condition|?
name|dirStatus
operator|.
name|getEntry
argument_list|()
else|:
literal|null
argument_list|,
name|myDirectoryInfo
operator|.
name|myChildrenStatuses
argument_list|,
name|wasDeleted
argument_list|,
name|myDirectoryInfo
operator|.
name|myDepth
argument_list|)
expr_stmt|;
if|if
condition|(
name|isSendableStatus
argument_list|(
name|dirStatus
argument_list|)
condition|)
block|{
name|getDefaultHandler
argument_list|()
operator|.
name|handleStatus
argument_list|(
name|dirStatus
argument_list|)
expr_stmt|;
block|}
name|parent
operator|.
name|myChildrenStatuses
operator|.
name|remove
argument_list|(
name|myDirectoryInfo
operator|.
name|myPath
argument_list|)
expr_stmt|;
block|}
if|else if
condition|(
name|parent
operator|==
literal|null
condition|)
block|{
if|if
condition|(
name|hasTarget
argument_list|()
condition|)
block|{
name|File
name|targetPath
init|=
name|getAnchor
argument_list|()
operator|.
name|getFile
argument_list|(
name|getAdminAreaInfo
argument_list|()
operator|.
name|getTargetName
argument_list|()
argument_list|)
decl_stmt|;
name|SVNStatus
name|tgtStatus
init|=
operator|(
name|SVNStatus
operator|)
name|myDirectoryInfo
operator|.
name|myChildrenStatuses
operator|.
name|get
argument_list|(
name|targetPath
argument_list|)
decl_stmt|;
if|if
condition|(
name|tgtStatus
operator|!=
literal|null
condition|)
block|{
if|if
condition|(
name|tgtStatus
operator|.
name|getKind
argument_list|()
operator|==
name|SVNNodeKind
operator|.
name|DIR
condition|)
block|{
name|SVNAdminArea
name|dir
init|=
name|getWCAccess
argument_list|()
operator|.
name|retrieve
argument_list|(
name|targetPath
argument_list|)
decl_stmt|;
name|getDirStatus
argument_list|(
literal|null
argument_list|,
name|dir
argument_list|,
literal|null
argument_list|,
name|getDepth
argument_list|()
argument_list|,
name|isReportAll
argument_list|()
argument_list|,
name|isNoIgnore
argument_list|()
argument_list|,
literal|null
argument_list|,
literal|true
argument_list|,
name|getDefaultHandler
argument_list|()
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|isSendableStatus
argument_list|(
name|tgtStatus
argument_list|)
condition|)
block|{
name|getDefaultHandler
argument_list|()
operator|.
name|handleStatus
argument_list|(
name|tgtStatus
argument_list|)
expr_stmt|;
block|}
block|}
block|}
else|else
block|{
name|handleStatusHash
argument_list|(
name|myAnchorStatus
operator|.
name|getEntry
argument_list|()
argument_list|,
name|myDirectoryInfo
operator|.
name|myChildrenStatuses
argument_list|,
literal|false
argument_list|,
name|getDepth
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|myDirectoryInfo
operator|!=
literal|null
operator|&&
name|myDirectoryInfo
operator|.
name|myParent
operator|==
literal|null
condition|)
block|{
name|tweakAnchorStatus
argument_list|(
name|myDirectoryInfo
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|isSendableStatus
argument_list|(
name|myAnchorStatus
argument_list|)
condition|)
block|{
name|getDefaultHandler
argument_list|()
operator|.
name|handleStatus
argument_list|(
name|myAnchorStatus
argument_list|)
expr_stmt|;
block|}
block|}
block|}
name|myDirectoryInfo
operator|=
name|myDirectoryInfo
operator|.
name|myParent
expr_stmt|;
block|}
specifier|public
name|void
name|addFile
parameter_list|(
name|String
name|path
parameter_list|,
name|String
name|copyFromPath
parameter_list|,
name|long
name|copyFromRevision
parameter_list|)
throws|throws
name|SVNException
block|{
name|myFileInfo
operator|=
operator|new
name|FileInfo
argument_list|(
name|myDirectoryInfo
argument_list|,
name|path
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|myDirectoryInfo
operator|.
name|myIsContentsChanged
operator|=
literal|true
expr_stmt|;
block|}
specifier|public
name|void
name|openFile
parameter_list|(
name|String
name|path
parameter_list|,
name|long
name|revision
parameter_list|)
throws|throws
name|SVNException
block|{
name|myFileInfo
operator|=
operator|new
name|FileInfo
argument_list|(
name|myDirectoryInfo
argument_list|,
name|path
argument_list|,
literal|false
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|changeFileProperty
parameter_list|(
name|String
name|path
parameter_list|,
name|String
name|name
parameter_list|,
name|SVNPropertyValue
name|value
parameter_list|)
throws|throws
name|SVNException
block|{
if|if
condition|(
operator|!
name|name
operator|.
name|startsWith
argument_list|(
name|SVNProperty
operator|.
name|SVN_ENTRY_PREFIX
argument_list|)
operator|&&
operator|!
name|name
operator|.
name|startsWith
argument_list|(
name|SVNProperty
operator|.
name|SVN_WC_PREFIX
argument_list|)
condition|)
block|{
name|myFileInfo
operator|.
name|myIsPropertiesChanged
operator|=
literal|true
expr_stmt|;
block|}
if|if
condition|(
name|SVNProperty
operator|.
name|COMMITTED_REVISION
operator|.
name|equals
argument_list|(
name|name
argument_list|)
operator|&&
name|value
operator|!=
literal|null
condition|)
block|{
try|try
block|{
name|long
name|number
init|=
name|Long
operator|.
name|parseLong
argument_list|(
name|value
operator|.
name|getString
argument_list|()
argument_list|)
decl_stmt|;
name|myFileInfo
operator|.
name|myRemoteRevision
operator|=
name|SVNRevision
operator|.
name|create
argument_list|(
name|number
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|NumberFormatException
name|nfe
parameter_list|)
block|{
name|myFileInfo
operator|.
name|myRemoteRevision
operator|=
name|SVNRevision
operator|.
name|UNDEFINED
expr_stmt|;
block|}
block|}
if|else if
condition|(
name|SVNProperty
operator|.
name|COMMITTED_DATE
operator|.
name|equals
argument_list|(
name|name
argument_list|)
operator|&&
name|value
operator|!=
literal|null
condition|)
block|{
name|myFileInfo
operator|.
name|myRemoteDate
operator|=
name|SVNDate
operator|.
name|parseDate
argument_list|(
name|value
operator|.
name|getString
argument_list|()
argument_list|)
expr_stmt|;
block|}
if|else if
condition|(
name|SVNProperty
operator|.
name|LAST_AUTHOR
operator|.
name|equals
argument_list|(
name|name
argument_list|)
operator|&&
name|value
operator|!=
literal|null
condition|)
block|{
name|myFileInfo
operator|.
name|myRemoteAuthor
operator|=
name|value
operator|.
name|getString
argument_list|()
expr_stmt|;
block|}
block|}
specifier|public
name|void
name|applyTextDelta
parameter_list|(
name|String
name|path
parameter_list|,
name|String
name|baseChecksum
parameter_list|)
throws|throws
name|SVNException
block|{
name|myFileInfo
operator|.
name|myIsContentsChanged
operator|=
literal|true
expr_stmt|;
block|}
specifier|public
name|void
name|closeFile
parameter_list|(
name|String
name|path
parameter_list|,
name|String
name|textChecksum
parameter_list|)
throws|throws
name|SVNException
block|{
if|if
condition|(
operator|!
operator|(
name|myFileInfo
operator|.
name|myIsAdded
operator|||
name|myFileInfo
operator|.
name|myIsPropertiesChanged
operator|||
name|myFileInfo
operator|.
name|myIsContentsChanged
operator|)
condition|)
block|{
return|return;
block|}
name|SVNStatusType
name|contentsStatus
decl_stmt|;
name|SVNStatusType
name|propertiesStatus
decl_stmt|;
name|SVNLock
name|remoteLock
init|=
literal|null
decl_stmt|;
if|if
condition|(
name|myFileInfo
operator|.
name|myIsAdded
condition|)
block|{
name|contentsStatus
operator|=
name|SVNStatusType
operator|.
name|STATUS_ADDED
expr_stmt|;
name|propertiesStatus
operator|=
name|myFileInfo
operator|.
name|myIsPropertiesChanged
condition|?
name|SVNStatusType
operator|.
name|STATUS_ADDED
else|:
name|SVNStatusType
operator|.
name|STATUS_NONE
expr_stmt|;
block|}
else|else
block|{
name|contentsStatus
operator|=
name|myFileInfo
operator|.
name|myIsContentsChanged
condition|?
name|SVNStatusType
operator|.
name|STATUS_MODIFIED
else|:
name|SVNStatusType
operator|.
name|STATUS_NONE
expr_stmt|;
name|propertiesStatus
operator|=
name|myFileInfo
operator|.
name|myIsPropertiesChanged
condition|?
name|SVNStatusType
operator|.
name|STATUS_MODIFIED
else|:
name|SVNStatusType
operator|.
name|STATUS_NONE
expr_stmt|;
name|remoteLock
operator|=
name|getLock
argument_list|(
name|myFileInfo
operator|.
name|myURL
argument_list|)
expr_stmt|;
block|}
name|tweakStatusHash
argument_list|(
name|myFileInfo
argument_list|,
name|myFileInfo
operator|.
name|myPath
argument_list|,
name|contentsStatus
argument_list|,
name|propertiesStatus
argument_list|,
name|remoteLock
argument_list|)
expr_stmt|;
name|myFileInfo
operator|=
literal|null
expr_stmt|;
block|}
specifier|public
name|OutputStream
name|textDeltaChunk
parameter_list|(
name|String
name|path
parameter_list|,
name|SVNDiffWindow
name|diffWindow
parameter_list|)
throws|throws
name|SVNException
block|{
return|return
literal|null
return|;
block|}
specifier|public
name|void
name|textDeltaEnd
parameter_list|(
name|String
name|path
parameter_list|)
throws|throws
name|SVNException
block|{
block|}
specifier|public
name|SVNCommitInfo
name|closeEdit
parameter_list|()
throws|throws
name|SVNException
block|{
if|if
condition|(
name|myIsRootOpen
condition|)
block|{
name|cleanup
argument_list|()
expr_stmt|;
block|}
else|else
block|{
name|super
operator|.
name|closeEdit
argument_list|()
expr_stmt|;
block|}
return|return
operator|new
name|SVNCommitInfo
argument_list|(
name|getTargetRevision
argument_list|()
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|)
return|;
block|}
specifier|public
name|void
name|abortEdit
parameter_list|()
throws|throws
name|SVNException
block|{
block|}
specifier|public
name|void
name|absentDir
parameter_list|(
name|String
name|path
parameter_list|)
throws|throws
name|SVNException
block|{
block|}
specifier|public
name|void
name|absentFile
parameter_list|(
name|String
name|path
parameter_list|)
throws|throws
name|SVNException
block|{
block|}
specifier|private
name|void
name|handleStatusHash
parameter_list|(
name|SVNEntry
name|dirEntry
parameter_list|,
name|Map
name|hash
parameter_list|,
name|boolean
name|deleted
parameter_list|,
name|SVNDepth
name|depth
parameter_list|)
throws|throws
name|SVNException
block|{
name|ISVNStatusHandler
name|handler
init|=
name|deleted
condition|?
name|this
else|:
name|getDefaultHandler
argument_list|()
decl_stmt|;
for|for
control|(
name|Iterator
name|paths
init|=
name|hash
operator|.
name|keySet
argument_list|()
operator|.
name|iterator
argument_list|()
init|;
name|paths
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|File
name|path
init|=
operator|(
name|File
operator|)
name|paths
operator|.
name|next
argument_list|()
decl_stmt|;
name|SVNStatus
name|status
init|=
operator|(
name|SVNStatus
operator|)
name|hash
operator|.
name|get
argument_list|(
name|path
argument_list|)
decl_stmt|;
if|if
condition|(
name|status
operator|.
name|getContentsStatus
argument_list|()
operator|!=
name|SVNStatusType
operator|.
name|STATUS_OBSTRUCTED
operator|&&
name|status
operator|.
name|getContentsStatus
argument_list|()
operator|!=
name|SVNStatusType
operator|.
name|STATUS_MISSING
operator|&&
name|status
operator|.
name|getEntry
argument_list|()
operator|!=
literal|null
operator|&&
name|status
operator|.
name|getKind
argument_list|()
operator|==
name|SVNNodeKind
operator|.
name|DIR
operator|&&
operator|(
name|depth
operator|==
name|SVNDepth
operator|.
name|UNKNOWN
operator|||
name|depth
operator|==
name|SVNDepth
operator|.
name|IMMEDIATES
operator|||
name|depth
operator|==
name|SVNDepth
operator|.
name|INFINITY
operator|)
condition|)
block|{
name|SVNAdminArea
name|dir
init|=
name|getWCAccess
argument_list|()
operator|.
name|retrieve
argument_list|(
name|path
argument_list|)
decl_stmt|;
name|SVNDepth
name|depthMinusOne
init|=
name|depth
decl_stmt|;
if|if
condition|(
name|depthMinusOne
operator|==
name|SVNDepth
operator|.
name|IMMEDIATES
condition|)
block|{
name|depthMinusOne
operator|=
name|SVNDepth
operator|.
name|EMPTY
expr_stmt|;
block|}
name|getDirStatus
argument_list|(
name|dirEntry
argument_list|,
name|dir
argument_list|,
literal|null
argument_list|,
name|depthMinusOne
argument_list|,
name|isReportAll
argument_list|()
argument_list|,
name|isNoIgnore
argument_list|()
argument_list|,
literal|null
argument_list|,
literal|true
argument_list|,
name|handler
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|deleted
condition|)
block|{
name|status
operator|.
name|setRemoteStatus
argument_list|(
name|SVNStatusType
operator|.
name|STATUS_DELETED
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|isSendableStatus
argument_list|(
name|status
argument_list|)
condition|)
block|{
name|handler
operator|.
name|handleStatus
argument_list|(
name|status
argument_list|)
expr_stmt|;
block|}
block|}
block|}
specifier|private
name|void
name|tweakStatusHash
parameter_list|(
name|FileInfo
name|fileInfo
parameter_list|,
name|File
name|path
parameter_list|,
name|SVNStatusType
name|text
parameter_list|,
name|SVNStatusType
name|props
parameter_list|,
name|SVNLock
name|lock
parameter_list|)
throws|throws
name|SVNException
block|{
name|Map
name|hash
init|=
name|fileInfo
operator|.
name|myParent
operator|.
name|myChildrenStatuses
decl_stmt|;
name|SVNStatus
name|status
init|=
operator|(
name|SVNStatus
operator|)
name|hash
operator|.
name|get
argument_list|(
name|fileInfo
operator|.
name|myPath
argument_list|)
decl_stmt|;
if|if
condition|(
name|status
operator|==
literal|null
condition|)
block|{
if|if
condition|(
name|text
operator|!=
name|SVNStatusType
operator|.
name|STATUS_ADDED
condition|)
block|{
return|return;
block|}
name|status
operator|=
name|createStatus
argument_list|(
name|path
argument_list|)
expr_stmt|;
name|hash
operator|.
name|put
argument_list|(
name|fileInfo
operator|.
name|myPath
argument_list|,
name|status
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|text
operator|==
name|SVNStatusType
operator|.
name|STATUS_ADDED
operator|&&
name|status
operator|.
name|getRemoteContentsStatus
argument_list|()
operator|==
name|SVNStatusType
operator|.
name|STATUS_DELETED
condition|)
block|{
name|text
operator|=
name|SVNStatusType
operator|.
name|STATUS_REPLACED
expr_stmt|;
block|}
name|status
operator|.
name|setRemoteStatus
argument_list|(
name|fileInfo
operator|.
name|myURL
argument_list|,
name|text
argument_list|,
name|props
argument_list|,
name|lock
argument_list|,
name|fileInfo
operator|.
name|myRemoteKind
argument_list|,
name|fileInfo
operator|.
name|myRemoteRevision
argument_list|,
name|fileInfo
operator|.
name|myRemoteDate
argument_list|,
name|fileInfo
operator|.
name|myRemoteAuthor
argument_list|)
expr_stmt|;
block|}
specifier|private
name|void
name|tweakStatusHash
parameter_list|(
name|DirectoryInfo
name|dirInfo
parameter_list|,
name|DirectoryInfo
name|childDir
parameter_list|,
name|File
name|path
parameter_list|,
name|SVNStatusType
name|text
parameter_list|,
name|SVNStatusType
name|props
parameter_list|,
name|SVNLock
name|lock
parameter_list|,
name|SVNRevision
name|revision
parameter_list|)
throws|throws
name|SVNException
block|{
name|Map
name|hash
init|=
name|dirInfo
operator|.
name|myChildrenStatuses
decl_stmt|;
name|SVNStatus
name|status
init|=
operator|(
name|SVNStatus
operator|)
name|hash
operator|.
name|get
argument_list|(
name|path
argument_list|)
decl_stmt|;
if|if
condition|(
name|status
operator|==
literal|null
condition|)
block|{
if|if
condition|(
name|text
operator|!=
name|SVNStatusType
operator|.
name|STATUS_ADDED
condition|)
block|{
return|return;
block|}
name|status
operator|=
name|createStatus
argument_list|(
name|path
argument_list|)
expr_stmt|;
name|hash
operator|.
name|put
argument_list|(
name|path
argument_list|,
name|status
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|text
operator|==
name|SVNStatusType
operator|.
name|STATUS_ADDED
operator|&&
name|status
operator|.
name|getRemoteContentsStatus
argument_list|()
operator|==
name|SVNStatusType
operator|.
name|STATUS_DELETED
condition|)
block|{
name|text
operator|=
name|SVNStatusType
operator|.
name|STATUS_REPLACED
expr_stmt|;
block|}
if|if
condition|(
name|text
operator|==
name|SVNStatusType
operator|.
name|STATUS_DELETED
condition|)
block|{
if|if
condition|(
name|revision
operator|==
name|SVNRevision
operator|.
name|UNDEFINED
condition|)
block|{
name|revision
operator|=
name|dirInfo
operator|.
name|myRemoteRevision
expr_stmt|;
block|}
name|status
operator|.
name|setRemoteStatus
argument_list|(
name|dirInfo
operator|.
name|myURL
argument_list|,
name|text
argument_list|,
name|props
argument_list|,
name|lock
argument_list|,
name|SVNNodeKind
operator|.
name|NONE
argument_list|,
name|revision
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|)
expr_stmt|;
block|}
if|else if
condition|(
name|childDir
operator|==
literal|null
condition|)
block|{
name|status
operator|.
name|setRemoteStatus
argument_list|(
name|dirInfo
operator|.
name|myURL
argument_list|,
name|text
argument_list|,
name|props
argument_list|,
name|lock
argument_list|,
name|dirInfo
operator|.
name|myRemoteKind
argument_list|,
name|dirInfo
operator|.
name|myRemoteRevision
argument_list|,
name|dirInfo
operator|.
name|myRemoteDate
argument_list|,
name|dirInfo
operator|.
name|myRemoteAuthor
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|status
operator|.
name|setRemoteStatus
argument_list|(
name|childDir
operator|.
name|myURL
argument_list|,
name|text
argument_list|,
name|props
argument_list|,
name|lock
argument_list|,
name|childDir
operator|.
name|myRemoteKind
argument_list|,
name|childDir
operator|.
name|myRemoteRevision
argument_list|,
name|childDir
operator|.
name|myRemoteDate
argument_list|,
name|childDir
operator|.
name|myRemoteAuthor
argument_list|)
expr_stmt|;
block|}
block|}
specifier|private
name|void
name|tweakAnchorStatus
parameter_list|(
name|DirectoryInfo
name|anchorInfo
parameter_list|)
block|{
if|if
condition|(
name|anchorInfo
operator|!=
literal|null
operator|&&
operator|(
name|anchorInfo
operator|.
name|myIsContentsChanged
operator|||
name|anchorInfo
operator|.
name|myIsPropertiesChanged
operator|)
condition|)
block|{
name|SVNStatusType
name|text
init|=
name|anchorInfo
operator|.
name|myIsContentsChanged
condition|?
name|SVNStatusType
operator|.
name|STATUS_MODIFIED
else|:
name|SVNStatusType
operator|.
name|STATUS_NONE
decl_stmt|;
name|SVNStatusType
name|props
init|=
name|anchorInfo
operator|.
name|myIsPropertiesChanged
condition|?
name|SVNStatusType
operator|.
name|STATUS_MODIFIED
else|:
name|SVNStatusType
operator|.
name|STATUS_NONE
decl_stmt|;
name|myAnchorStatus
operator|.
name|setRemoteStatus
argument_list|(
name|myDirectoryInfo
operator|.
name|myURL
argument_list|,
name|text
argument_list|,
name|props
argument_list|,
literal|null
argument_list|,
name|SVNNodeKind
operator|.
name|DIR
argument_list|,
name|myDirectoryInfo
operator|.
name|myRemoteRevision
argument_list|,
name|myDirectoryInfo
operator|.
name|myRemoteDate
argument_list|,
name|myDirectoryInfo
operator|.
name|myRemoteAuthor
argument_list|)
expr_stmt|;
block|}
block|}
specifier|private
name|boolean
name|isSendableStatus
parameter_list|(
name|SVNStatus
name|status
parameter_list|)
block|{
if|if
condition|(
name|status
operator|==
literal|null
condition|)
block|{
return|return
literal|false
return|;
block|}
if|if
condition|(
name|status
operator|.
name|getRemoteContentsStatus
argument_list|()
operator|!=
name|SVNStatusType
operator|.
name|STATUS_NONE
condition|)
block|{
return|return
literal|true
return|;
block|}
if|if
condition|(
name|status
operator|.
name|getRemotePropertiesStatus
argument_list|()
operator|!=
name|SVNStatusType
operator|.
name|STATUS_NONE
condition|)
block|{
return|return
literal|true
return|;
block|}
if|if
condition|(
name|status
operator|.
name|getRemoteLock
argument_list|()
operator|!=
literal|null
condition|)
block|{
return|return
literal|true
return|;
block|}
if|if
condition|(
name|status
operator|.
name|getContentsStatus
argument_list|()
operator|==
name|SVNStatusType
operator|.
name|STATUS_IGNORED
operator|&&
operator|!
name|isNoIgnore
argument_list|()
condition|)
block|{
return|return
literal|false
return|;
block|}
if|if
condition|(
name|isReportAll
argument_list|()
condition|)
block|{
return|return
literal|true
return|;
block|}
if|if
condition|(
name|status
operator|.
name|getContentsStatus
argument_list|()
operator|==
name|SVNStatusType
operator|.
name|STATUS_UNVERSIONED
condition|)
block|{
return|return
literal|true
return|;
block|}
if|if
condition|(
name|status
operator|.
name|getContentsStatus
argument_list|()
operator|!=
name|SVNStatusType
operator|.
name|STATUS_NONE
operator|&&
name|status
operator|.
name|getContentsStatus
argument_list|()
operator|!=
name|SVNStatusType
operator|.
name|STATUS_NORMAL
condition|)
block|{
return|return
literal|true
return|;
block|}
if|if
condition|(
name|status
operator|.
name|getPropertiesStatus
argument_list|()
operator|!=
name|SVNStatusType
operator|.
name|STATUS_NONE
operator|&&
name|status
operator|.
name|getPropertiesStatus
argument_list|()
operator|!=
name|SVNStatusType
operator|.
name|STATUS_NORMAL
condition|)
block|{
return|return
literal|true
return|;
block|}
if|if
condition|(
name|status
operator|.
name|getTreeConflict
argument_list|()
operator|!=
literal|null
condition|)
block|{
return|return
literal|true
return|;
block|}
return|return
name|status
operator|.
name|isLocked
argument_list|()
operator|||
name|status
operator|.
name|isSwitched
argument_list|()
operator|||
name|status
operator|.
name|getLocalLock
argument_list|()
operator|!=
literal|null
operator|||
name|status
operator|.
name|getChangelistName
argument_list|()
operator|!=
literal|null
operator|||
name|status
operator|.
name|isFileExternal
argument_list|()
return|;
block|}
specifier|private
name|SVNStatus
name|createStatus
parameter_list|(
name|File
name|path
parameter_list|)
throws|throws
name|SVNException
block|{
name|SVNEntry
name|entry
init|=
name|getWCAccess
argument_list|()
operator|.
name|getEntry
argument_list|(
name|path
argument_list|,
literal|false
argument_list|)
decl_stmt|;
name|SVNEntry
name|parentEntry
init|=
literal|null
decl_stmt|;
if|if
condition|(
name|entry
operator|!=
literal|null
condition|)
block|{
name|SVNAdminArea
name|parentDir
init|=
name|getWCAccess
argument_list|()
operator|.
name|getAdminArea
argument_list|(
name|path
operator|.
name|getParentFile
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|parentDir
operator|!=
literal|null
condition|)
block|{
name|parentEntry
operator|=
name|getWCAccess
argument_list|()
operator|.
name|getEntry
argument_list|(
name|path
operator|.
name|getParentFile
argument_list|()
argument_list|,
literal|false
argument_list|)
expr_stmt|;
block|}
block|}
return|return
name|assembleStatus
argument_list|(
name|path
argument_list|,
name|entry
operator|!=
literal|null
condition|?
name|getWCAccess
argument_list|()
operator|.
name|probeRetrieve
argument_list|(
name|path
argument_list|)
else|:
literal|null
argument_list|,
name|entry
argument_list|,
name|parentEntry
argument_list|,
name|SVNNodeKind
operator|.
name|UNKNOWN
argument_list|,
literal|false
argument_list|,
literal|true
argument_list|,
literal|false
argument_list|)
return|;
block|}
specifier|public
name|void
name|handleStatus
parameter_list|(
name|SVNStatus
name|status
parameter_list|)
throws|throws
name|SVNException
block|{
name|status
operator|.
name|setContentsStatus
argument_list|(
name|SVNStatusType
operator|.
name|STATUS_DELETED
argument_list|)
expr_stmt|;
name|getDefaultHandler
argument_list|()
operator|.
name|handleStatus
argument_list|(
name|status
argument_list|)
expr_stmt|;
block|}
specifier|private
class|class
name|DirectoryInfo
implements|implements
name|ISVNStatusHandler
block|{
specifier|public
name|DirectoryInfo
parameter_list|(
name|String
name|path
parameter_list|,
name|DirectoryInfo
name|parent
parameter_list|)
throws|throws
name|SVNException
block|{
name|myParent
operator|=
name|parent
expr_stmt|;
if|if
condition|(
name|myParent
operator|!=
literal|null
condition|)
block|{
name|myPath
operator|=
name|getAnchor
argument_list|()
operator|.
name|getFile
argument_list|(
name|path
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|myPath
operator|=
name|getAnchor
argument_list|()
operator|.
name|getRoot
argument_list|()
expr_stmt|;
block|}
name|myName
operator|=
name|path
operator|!=
literal|null
condition|?
name|SVNPathUtil
operator|.
name|tail
argument_list|(
name|path
argument_list|)
else|:
literal|null
expr_stmt|;
name|myChildrenStatuses
operator|=
operator|new
name|TreeMap
argument_list|()
expr_stmt|;
name|myURL
operator|=
name|computeURL
argument_list|()
expr_stmt|;
name|myRemoteRevision
operator|=
name|SVNRevision
operator|.
name|UNDEFINED
expr_stmt|;
name|myRemoteKind
operator|=
name|SVNNodeKind
operator|.
name|DIR
expr_stmt|;
if|if
condition|(
name|myParent
operator|!=
literal|null
condition|)
block|{
if|if
condition|(
name|myParent
operator|.
name|myDepth
operator|==
name|SVNDepth
operator|.
name|IMMEDIATES
condition|)
block|{
name|myDepth
operator|=
name|SVNDepth
operator|.
name|EMPTY
expr_stmt|;
block|}
if|else if
condition|(
name|myParent
operator|.
name|myDepth
operator|==
name|SVNDepth
operator|.
name|FILES
operator|||
name|myParent
operator|.
name|myDepth
operator|==
name|SVNDepth
operator|.
name|EMPTY
condition|)
block|{
name|myDepth
operator|=
name|SVNDepth
operator|.
name|EXCLUDE
expr_stmt|;
block|}
if|else if
condition|(
name|myParent
operator|.
name|myDepth
operator|==
name|SVNDepth
operator|.
name|UNKNOWN
condition|)
block|{
name|myDepth
operator|=
name|SVNDepth
operator|.
name|UNKNOWN
expr_stmt|;
block|}
else|else
block|{
name|myDepth
operator|=
name|SVNDepth
operator|.
name|INFINITY
expr_stmt|;
block|}
block|}
else|else
block|{
name|myDepth
operator|=
name|getDepth
argument_list|()
expr_stmt|;
block|}
comment|// this dir's status in parent.
name|SVNStatus
name|parentStatus
init|=
literal|null
decl_stmt|;
if|if
condition|(
name|myParent
operator|!=
literal|null
condition|)
block|{
name|parentStatus
operator|=
operator|(
name|SVNStatus
operator|)
name|myParent
operator|.
name|myChildrenStatuses
operator|.
name|get
argument_list|(
name|myPath
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|parentStatus
operator|=
name|myAnchorStatus
expr_stmt|;
block|}
if|if
condition|(
name|parentStatus
operator|!=
literal|null
condition|)
block|{
name|SVNStatusType
name|textStatus
init|=
name|parentStatus
operator|.
name|getContentsStatus
argument_list|()
decl_stmt|;
if|if
condition|(
name|textStatus
operator|!=
name|SVNStatusType
operator|.
name|STATUS_UNVERSIONED
operator|&&
name|textStatus
operator|!=
name|SVNStatusType
operator|.
name|STATUS_MISSING
operator|&&
name|textStatus
operator|!=
name|SVNStatusType
operator|.
name|STATUS_OBSTRUCTED
operator|&&
name|textStatus
operator|!=
name|SVNStatusType
operator|.
name|STATUS_EXTERNAL
operator|&&
name|textStatus
operator|!=
name|SVNStatusType
operator|.
name|STATUS_IGNORED
operator|&&
name|parentStatus
operator|.
name|getKind
argument_list|()
operator|==
name|SVNNodeKind
operator|.
name|DIR
operator|&&
operator|(
name|myDepth
operator|==
name|SVNDepth
operator|.
name|UNKNOWN
operator|||
name|myDepth
operator|==
name|SVNDepth
operator|.
name|FILES
operator|||
name|myDepth
operator|==
name|SVNDepth
operator|.
name|IMMEDIATES
operator|||
name|myDepth
operator|==
name|SVNDepth
operator|.
name|INFINITY
operator|)
condition|)
block|{
name|SVNAdminArea
name|dir
init|=
name|getWCAccess
argument_list|()
operator|.
name|getAdminArea
argument_list|(
name|myPath
argument_list|)
decl_stmt|;
if|if
condition|(
name|dir
operator|!=
literal|null
condition|)
block|{
name|getDirStatus
argument_list|(
literal|null
argument_list|,
name|dir
argument_list|,
literal|null
argument_list|,
name|SVNDepth
operator|.
name|IMMEDIATES
argument_list|,
literal|true
argument_list|,
literal|true
argument_list|,
literal|null
argument_list|,
literal|true
argument_list|,
name|this
argument_list|)
expr_stmt|;
name|SVNStatus
name|thisDirStatus
init|=
operator|(
name|SVNStatus
operator|)
name|myChildrenStatuses
operator|.
name|get
argument_list|(
name|myPath
argument_list|)
decl_stmt|;
if|if
condition|(
name|thisDirStatus
operator|!=
literal|null
operator|&&
name|thisDirStatus
operator|.
name|getEntry
argument_list|()
operator|!=
literal|null
operator|&&
operator|(
name|myDepth
operator|==
name|SVNDepth
operator|.
name|UNKNOWN
operator|||
name|myDepth
operator|.
name|compareTo
argument_list|(
name|parentStatus
operator|.
name|getEntry
argument_list|()
operator|.
name|getDepth
argument_list|()
argument_list|)
operator|>
literal|0
operator|)
condition|)
block|{
name|myDepth
operator|=
name|thisDirStatus
operator|.
name|getEntry
argument_list|()
operator|.
name|getDepth
argument_list|()
expr_stmt|;
block|}
block|}
block|}
block|}
block|}
specifier|private
name|SVNURL
name|computeURL
parameter_list|()
throws|throws
name|SVNException
block|{
if|if
condition|(
name|myURL
operator|!=
literal|null
condition|)
block|{
return|return
name|myURL
return|;
block|}
if|if
condition|(
name|myName
operator|==
literal|null
condition|)
block|{
return|return
name|myAnchorStatus
operator|.
name|getURL
argument_list|()
return|;
block|}
name|SVNStatus
name|status
init|=
operator|(
name|SVNStatus
operator|)
name|myParent
operator|.
name|myChildrenStatuses
operator|.
name|get
argument_list|(
name|myPath
argument_list|)
decl_stmt|;
if|if
condition|(
name|status
operator|!=
literal|null
operator|&&
name|status
operator|.
name|getEntry
argument_list|()
operator|!=
literal|null
operator|&&
name|status
operator|.
name|getEntry
argument_list|()
operator|.
name|getSVNURL
argument_list|()
operator|!=
literal|null
condition|)
block|{
return|return
name|status
operator|.
name|getEntry
argument_list|()
operator|.
name|getSVNURL
argument_list|()
return|;
block|}
name|SVNURL
name|url
init|=
name|myParent
operator|.
name|computeURL
argument_list|()
decl_stmt|;
return|return
name|url
operator|!=
literal|null
condition|?
name|url
operator|.
name|appendPath
argument_list|(
name|myName
argument_list|,
literal|false
argument_list|)
else|:
literal|null
return|;
block|}
specifier|public
name|void
name|handleStatus
parameter_list|(
name|SVNStatus
name|status
parameter_list|)
throws|throws
name|SVNException
block|{
name|myChildrenStatuses
operator|.
name|put
argument_list|(
name|status
operator|.
name|getFile
argument_list|()
argument_list|,
name|status
argument_list|)
expr_stmt|;
block|}
specifier|public
name|File
name|myPath
decl_stmt|;
specifier|public
name|String
name|myName
decl_stmt|;
specifier|public
name|SVNURL
name|myURL
decl_stmt|;
specifier|public
name|DirectoryInfo
name|myParent
decl_stmt|;
specifier|public
name|SVNDepth
name|myDepth
decl_stmt|;
specifier|public
name|SVNRevision
name|myRemoteRevision
decl_stmt|;
specifier|public
name|Date
name|myRemoteDate
decl_stmt|;
specifier|public
name|String
name|myRemoteAuthor
decl_stmt|;
specifier|public
name|SVNNodeKind
name|myRemoteKind
decl_stmt|;
specifier|public
name|boolean
name|myIsAdded
decl_stmt|;
specifier|public
name|boolean
name|myIsPropertiesChanged
decl_stmt|;
specifier|public
name|boolean
name|myIsContentsChanged
decl_stmt|;
specifier|public
name|Map
name|myChildrenStatuses
decl_stmt|;
block|}
specifier|private
class|class
name|FileInfo
block|{
specifier|public
name|FileInfo
parameter_list|(
name|DirectoryInfo
name|parent
parameter_list|,
name|String
name|path
parameter_list|,
name|boolean
name|added
parameter_list|)
throws|throws
name|SVNException
block|{
name|myPath
operator|=
name|getAnchor
argument_list|()
operator|.
name|getFile
argument_list|(
name|path
argument_list|)
expr_stmt|;
name|myName
operator|=
name|myPath
operator|.
name|getName
argument_list|()
expr_stmt|;
name|myParent
operator|=
name|parent
expr_stmt|;
name|myURL
operator|=
name|myParent
operator|.
name|computeURL
argument_list|()
operator|.
name|appendPath
argument_list|(
name|myName
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|myRemoteRevision
operator|=
name|SVNRevision
operator|.
name|UNDEFINED
expr_stmt|;
name|myRemoteKind
operator|=
name|SVNNodeKind
operator|.
name|FILE
expr_stmt|;
name|myIsAdded
operator|=
name|added
expr_stmt|;
block|}
specifier|public
name|DirectoryInfo
name|myParent
decl_stmt|;
specifier|public
name|File
name|myPath
decl_stmt|;
specifier|public
name|String
name|myName
decl_stmt|;
specifier|public
name|SVNURL
name|myURL
decl_stmt|;
specifier|public
name|boolean
name|myIsAdded
decl_stmt|;
specifier|public
name|boolean
name|myIsContentsChanged
decl_stmt|;
specifier|public
name|boolean
name|myIsPropertiesChanged
decl_stmt|;
specifier|public
name|SVNRevision
name|myRemoteRevision
decl_stmt|;
specifier|public
name|Date
name|myRemoteDate
decl_stmt|;
specifier|public
name|String
name|myRemoteAuthor
decl_stmt|;
specifier|public
name|SVNNodeKind
name|myRemoteKind
decl_stmt|;
block|}
block|}
end_class

end_unit

