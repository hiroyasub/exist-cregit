begin_unit|revision:1.0.0;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * ====================================================================  * Copyright (c) 2004-2010 TMate Software Ltd.  All rights reserved.  *  * This software is licensed as described in the file COPYING, which  * you should have received as part of this distribution.  The terms  * are also available at http://svnkit.com/license.html  * If newer versions of this license are posted there, you may use a  * newer version instead, at your option.  * ====================================================================  */
end_comment

begin_package
package|package
name|org
operator|.
name|exist
operator|.
name|versioning
operator|.
name|svn
operator|.
name|internal
operator|.
name|wc
operator|.
name|admin
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|ByteArrayInputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|ByteArrayOutputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|File
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|InputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|OutputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|nio
operator|.
name|charset
operator|.
name|Charset
import|;
end_import

begin_import
import|import
name|java
operator|.
name|nio
operator|.
name|charset
operator|.
name|CodingErrorAction
import|;
end_import

begin_import
import|import
name|java
operator|.
name|nio
operator|.
name|charset
operator|.
name|IllegalCharsetNameException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collections
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Date
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|StringTokenizer
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|versioning
operator|.
name|svn
operator|.
name|internal
operator|.
name|util
operator|.
name|SVNDate
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|versioning
operator|.
name|svn
operator|.
name|internal
operator|.
name|wc
operator|.
name|SVNAdminUtil
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|versioning
operator|.
name|svn
operator|.
name|internal
operator|.
name|wc
operator|.
name|SVNErrorManager
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|versioning
operator|.
name|svn
operator|.
name|internal
operator|.
name|wc
operator|.
name|SVNFileType
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|versioning
operator|.
name|svn
operator|.
name|internal
operator|.
name|wc
operator|.
name|SVNFileUtil
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|versioning
operator|.
name|svn
operator|.
name|wc
operator|.
name|ISVNOptions
import|;
end_import

begin_import
import|import
name|org
operator|.
name|tmatesoft
operator|.
name|svn
operator|.
name|core
operator|.
name|SVNErrorCode
import|;
end_import

begin_import
import|import
name|org
operator|.
name|tmatesoft
operator|.
name|svn
operator|.
name|core
operator|.
name|SVNErrorMessage
import|;
end_import

begin_import
import|import
name|org
operator|.
name|tmatesoft
operator|.
name|svn
operator|.
name|core
operator|.
name|SVNException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|tmatesoft
operator|.
name|svn
operator|.
name|core
operator|.
name|SVNProperties
import|;
end_import

begin_import
import|import
name|org
operator|.
name|tmatesoft
operator|.
name|svn
operator|.
name|core
operator|.
name|SVNProperty
import|;
end_import

begin_import
import|import
name|org
operator|.
name|tmatesoft
operator|.
name|svn
operator|.
name|core
operator|.
name|internal
operator|.
name|util
operator|.
name|SVNCharsetInputStream
import|;
end_import

begin_import
import|import
name|org
operator|.
name|tmatesoft
operator|.
name|svn
operator|.
name|core
operator|.
name|internal
operator|.
name|util
operator|.
name|SVNCharsetOutputStream
import|;
end_import

begin_import
import|import
name|org
operator|.
name|tmatesoft
operator|.
name|svn
operator|.
name|core
operator|.
name|internal
operator|.
name|util
operator|.
name|SVNEncodingUtil
import|;
end_import

begin_import
import|import
name|org
operator|.
name|tmatesoft
operator|.
name|svn
operator|.
name|core
operator|.
name|internal
operator|.
name|util
operator|.
name|SVNHashMap
import|;
end_import

begin_import
import|import
name|org
operator|.
name|tmatesoft
operator|.
name|svn
operator|.
name|core
operator|.
name|internal
operator|.
name|util
operator|.
name|SVNPathUtil
import|;
end_import

begin_import
import|import
name|org
operator|.
name|tmatesoft
operator|.
name|svn
operator|.
name|core
operator|.
name|internal
operator|.
name|wc
operator|.
name|IOExceptionWrapper
import|;
end_import

begin_import
import|import
name|org
operator|.
name|tmatesoft
operator|.
name|svn
operator|.
name|util
operator|.
name|SVNLogType
import|;
end_import

begin_comment
comment|/**  * @author TMate Software Ltd.  * @version 1.3  */
end_comment

begin_class
specifier|public
class|class
name|SVNTranslator
block|{
specifier|private
specifier|static
specifier|final
name|Charset
name|UTF8_CHARSET
init|=
name|Charset
operator|.
name|forName
argument_list|(
literal|"UTF-8"
argument_list|)
decl_stmt|;
specifier|public
specifier|static
name|String
name|transalteString
parameter_list|(
name|String
name|str
parameter_list|,
name|byte
index|[]
name|eol
parameter_list|,
name|Map
name|keywords
parameter_list|,
name|boolean
name|repair
parameter_list|,
name|boolean
name|expand
parameter_list|)
throws|throws
name|SVNException
block|{
name|ByteArrayOutputStream
name|bufferOS
init|=
operator|new
name|ByteArrayOutputStream
argument_list|()
decl_stmt|;
name|OutputStream
name|resultOS
init|=
literal|null
decl_stmt|;
try|try
block|{
name|resultOS
operator|=
name|getTranslatingOutputStream
argument_list|(
name|bufferOS
argument_list|,
literal|null
argument_list|,
name|eol
argument_list|,
name|repair
argument_list|,
name|keywords
argument_list|,
name|expand
argument_list|)
expr_stmt|;
name|resultOS
operator|.
name|write
argument_list|(
name|str
operator|.
name|getBytes
argument_list|()
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
name|SVNErrorMessage
name|err
init|=
name|SVNErrorMessage
operator|.
name|create
argument_list|(
name|SVNErrorCode
operator|.
name|IO_ERROR
argument_list|,
literal|"error while translating a string"
argument_list|)
decl_stmt|;
name|SVNErrorManager
operator|.
name|error
argument_list|(
name|err
argument_list|,
name|e
argument_list|,
name|SVNLogType
operator|.
name|DEFAULT
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
name|SVNFileUtil
operator|.
name|closeFile
argument_list|(
name|resultOS
argument_list|)
expr_stmt|;
block|}
return|return
operator|new
name|String
argument_list|(
name|bufferOS
operator|.
name|toByteArray
argument_list|()
argument_list|)
return|;
block|}
specifier|public
specifier|static
name|void
name|translate
parameter_list|(
name|SVNAdminArea
name|adminArea
parameter_list|,
name|String
name|name
parameter_list|,
name|String
name|srcPath
parameter_list|,
name|String
name|dstPath
parameter_list|,
name|boolean
name|expand
parameter_list|)
throws|throws
name|SVNException
block|{
name|translate
argument_list|(
name|adminArea
argument_list|,
name|name
argument_list|,
name|srcPath
argument_list|,
name|dstPath
argument_list|,
literal|false
argument_list|,
name|expand
argument_list|)
expr_stmt|;
block|}
specifier|public
specifier|static
name|void
name|translate
parameter_list|(
name|SVNAdminArea
name|adminArea
parameter_list|,
name|String
name|name
parameter_list|,
name|String
name|srcPath
parameter_list|,
name|String
name|dstPath
parameter_list|,
name|boolean
name|safelyEncode
parameter_list|,
name|boolean
name|expand
parameter_list|)
throws|throws
name|SVNException
block|{
name|translate
argument_list|(
name|adminArea
argument_list|,
name|name
argument_list|,
name|adminArea
operator|.
name|getFile
argument_list|(
name|srcPath
argument_list|)
argument_list|,
name|adminArea
operator|.
name|getFile
argument_list|(
name|dstPath
argument_list|)
argument_list|,
literal|null
argument_list|,
name|safelyEncode
argument_list|,
name|expand
argument_list|)
expr_stmt|;
block|}
specifier|public
specifier|static
name|void
name|translate
parameter_list|(
name|SVNAdminArea
name|adminArea
parameter_list|,
name|String
name|name
parameter_list|,
name|String
name|srcPath
parameter_list|,
name|String
name|dstPath
parameter_list|,
name|String
name|customEOLStyle
parameter_list|,
name|boolean
name|expand
parameter_list|)
throws|throws
name|SVNException
block|{
name|translate
argument_list|(
name|adminArea
argument_list|,
name|name
argument_list|,
name|adminArea
operator|.
name|getFile
argument_list|(
name|srcPath
argument_list|)
argument_list|,
name|adminArea
operator|.
name|getFile
argument_list|(
name|dstPath
argument_list|)
argument_list|,
name|customEOLStyle
argument_list|,
name|expand
argument_list|)
expr_stmt|;
block|}
specifier|public
specifier|static
name|void
name|translate
parameter_list|(
name|SVNAdminArea
name|adminArea
parameter_list|,
name|String
name|name
parameter_list|,
name|File
name|src
parameter_list|,
name|File
name|dst
parameter_list|,
name|boolean
name|expand
parameter_list|)
throws|throws
name|SVNException
block|{
name|translate
argument_list|(
name|adminArea
argument_list|,
name|name
argument_list|,
name|src
argument_list|,
name|dst
argument_list|,
literal|null
argument_list|,
name|expand
argument_list|)
expr_stmt|;
block|}
specifier|public
specifier|static
name|void
name|translate
parameter_list|(
name|SVNAdminArea
name|adminArea
parameter_list|,
name|String
name|name
parameter_list|,
name|File
name|src
parameter_list|,
name|File
name|dst
parameter_list|,
name|boolean
name|safelyEncode
parameter_list|,
name|boolean
name|expand
parameter_list|)
throws|throws
name|SVNException
block|{
name|translate
argument_list|(
name|adminArea
argument_list|,
name|name
argument_list|,
name|src
argument_list|,
name|dst
argument_list|,
literal|null
argument_list|,
name|safelyEncode
argument_list|,
name|expand
argument_list|)
expr_stmt|;
block|}
specifier|public
specifier|static
name|void
name|translate
parameter_list|(
name|SVNAdminArea
name|adminArea
parameter_list|,
name|String
name|name
parameter_list|,
name|File
name|src
parameter_list|,
name|File
name|dst
parameter_list|,
name|String
name|customEOLStyle
parameter_list|,
name|boolean
name|expand
parameter_list|)
throws|throws
name|SVNException
block|{
name|translate
argument_list|(
name|adminArea
argument_list|,
name|name
argument_list|,
name|src
argument_list|,
name|dst
argument_list|,
name|customEOLStyle
argument_list|,
literal|false
argument_list|,
name|expand
argument_list|)
expr_stmt|;
block|}
specifier|public
specifier|static
name|void
name|translate
parameter_list|(
name|SVNAdminArea
name|adminArea
parameter_list|,
name|String
name|name
parameter_list|,
name|File
name|src
parameter_list|,
name|File
name|dst
parameter_list|,
name|String
name|customEOLStyle
parameter_list|,
name|boolean
name|safelyEncode
parameter_list|,
name|boolean
name|expand
parameter_list|)
throws|throws
name|SVNException
block|{
name|ISVNOptions
name|options
init|=
name|adminArea
operator|.
name|getWCAccess
argument_list|()
operator|.
name|getOptions
argument_list|()
decl_stmt|;
name|SVNVersionedProperties
name|props
init|=
name|adminArea
operator|.
name|getProperties
argument_list|(
name|name
argument_list|)
decl_stmt|;
name|String
name|keywords
init|=
name|props
operator|.
name|getStringPropertyValue
argument_list|(
name|SVNProperty
operator|.
name|KEYWORDS
argument_list|)
decl_stmt|;
name|String
name|charset
init|=
name|getCharset
argument_list|(
name|props
operator|.
name|getStringPropertyValue
argument_list|(
name|SVNProperty
operator|.
name|CHARSET
argument_list|)
argument_list|,
name|adminArea
operator|.
name|getFile
argument_list|(
name|name
argument_list|)
operator|.
name|getPath
argument_list|()
argument_list|,
name|options
argument_list|)
decl_stmt|;
name|String
name|eolStyle
init|=
literal|null
decl_stmt|;
if|if
condition|(
name|customEOLStyle
operator|!=
literal|null
condition|)
block|{
name|eolStyle
operator|=
name|customEOLStyle
expr_stmt|;
block|}
else|else
block|{
name|eolStyle
operator|=
name|props
operator|.
name|getStringPropertyValue
argument_list|(
name|SVNProperty
operator|.
name|EOL_STYLE
argument_list|)
expr_stmt|;
block|}
name|boolean
name|special
init|=
name|props
operator|.
name|getPropertyValue
argument_list|(
name|SVNProperty
operator|.
name|SPECIAL
argument_list|)
operator|!=
literal|null
decl_stmt|;
name|Map
name|keywordsMap
init|=
literal|null
decl_stmt|;
name|byte
index|[]
name|eols
decl_stmt|;
if|if
condition|(
name|keywords
operator|!=
literal|null
condition|)
block|{
if|if
condition|(
name|expand
condition|)
block|{
name|SVNEntry
name|entry
init|=
name|adminArea
operator|.
name|getVersionedEntry
argument_list|(
name|name
argument_list|,
literal|true
argument_list|)
decl_stmt|;
name|String
name|url
init|=
name|entry
operator|.
name|getURL
argument_list|()
decl_stmt|;
name|String
name|author
init|=
name|entry
operator|.
name|getAuthor
argument_list|()
decl_stmt|;
name|String
name|date
init|=
name|entry
operator|.
name|getCommittedDate
argument_list|()
decl_stmt|;
name|String
name|rev
init|=
name|Long
operator|.
name|toString
argument_list|(
name|entry
operator|.
name|getCommittedRevision
argument_list|()
argument_list|)
decl_stmt|;
name|keywordsMap
operator|=
name|computeKeywords
argument_list|(
name|keywords
argument_list|,
name|url
argument_list|,
name|author
argument_list|,
name|date
argument_list|,
name|rev
argument_list|,
name|options
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|keywordsMap
operator|=
name|computeKeywords
argument_list|(
name|keywords
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|)
expr_stmt|;
block|}
block|}
if|if
condition|(
operator|!
name|expand
condition|)
block|{
name|eols
operator|=
name|getBaseEOL
argument_list|(
name|eolStyle
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|eols
operator|=
name|getEOL
argument_list|(
name|eolStyle
argument_list|,
name|options
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|expand
operator|&&
name|charset
operator|!=
literal|null
operator|&&
name|safelyEncode
condition|)
block|{
name|File
name|tmp
init|=
name|SVNAdminUtil
operator|.
name|createTmpFile
argument_list|(
name|adminArea
argument_list|,
name|name
argument_list|,
literal|".tmp"
argument_list|,
literal|true
argument_list|)
decl_stmt|;
name|translate
argument_list|(
name|src
argument_list|,
name|tmp
argument_list|,
name|charset
argument_list|,
name|eols
argument_list|,
name|keywordsMap
argument_list|,
name|special
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|translate
argument_list|(
name|tmp
argument_list|,
name|dst
argument_list|,
name|charset
argument_list|,
name|eols
argument_list|,
name|keywordsMap
argument_list|,
name|special
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|SVNFileUtil
operator|.
name|deleteFile
argument_list|(
name|tmp
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|translate
argument_list|(
name|src
argument_list|,
name|dst
argument_list|,
name|charset
argument_list|,
name|eols
argument_list|,
name|keywordsMap
argument_list|,
name|special
argument_list|,
name|expand
argument_list|)
expr_stmt|;
block|}
block|}
specifier|public
specifier|static
name|void
name|translate
parameter_list|(
name|File
name|src
parameter_list|,
name|File
name|dst
parameter_list|,
name|String
name|charset
parameter_list|,
name|byte
index|[]
name|eol
parameter_list|,
name|Map
name|keywords
parameter_list|,
name|boolean
name|special
parameter_list|,
name|boolean
name|expand
parameter_list|)
throws|throws
name|SVNException
block|{
if|if
condition|(
name|src
operator|==
literal|null
operator|||
name|dst
operator|==
literal|null
condition|)
block|{
name|SVNErrorManager
operator|.
name|error
argument_list|(
name|SVNErrorMessage
operator|.
name|create
argument_list|(
name|SVNErrorCode
operator|.
name|INCORRECT_PARAMS
argument_list|)
argument_list|,
name|SVNLogType
operator|.
name|DEFAULT
argument_list|)
expr_stmt|;
return|return;
block|}
if|if
condition|(
name|src
operator|.
name|equals
argument_list|(
name|dst
argument_list|)
condition|)
block|{
return|return;
block|}
if|if
condition|(
name|special
condition|)
block|{
if|if
condition|(
name|SVNFileType
operator|.
name|getType
argument_list|(
name|dst
argument_list|)
operator|!=
name|SVNFileType
operator|.
name|NONE
condition|)
block|{
name|dst
operator|.
name|delete
argument_list|()
expr_stmt|;
block|}
if|if
condition|(
operator|!
name|SVNFileUtil
operator|.
name|symlinksSupported
argument_list|()
condition|)
block|{
name|SVNFileUtil
operator|.
name|copyFile
argument_list|(
name|src
argument_list|,
name|dst
argument_list|,
literal|true
argument_list|)
expr_stmt|;
block|}
if|else if
condition|(
name|expand
condition|)
block|{
comment|// create symlink to target, and create it at dst
name|SVNFileUtil
operator|.
name|createSymlink
argument_list|(
name|dst
argument_list|,
name|src
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|SVNFileUtil
operator|.
name|detranslateSymlink
argument_list|(
name|src
argument_list|,
name|dst
argument_list|)
expr_stmt|;
block|}
return|return;
block|}
if|if
condition|(
operator|(
name|charset
operator|==
literal|null
operator|||
name|SVNProperty
operator|.
name|isUTF8
argument_list|(
name|charset
argument_list|)
operator|)
operator|&&
name|eol
operator|==
literal|null
operator|&&
operator|(
name|keywords
operator|==
literal|null
operator|||
name|keywords
operator|.
name|isEmpty
argument_list|()
operator|)
condition|)
block|{
comment|// no expansion, fast copy.
name|SVNFileUtil
operator|.
name|copyFile
argument_list|(
name|src
argument_list|,
name|dst
argument_list|,
literal|false
argument_list|)
expr_stmt|;
return|return;
block|}
name|OutputStream
name|os
init|=
name|SVNFileUtil
operator|.
name|openFileForWriting
argument_list|(
name|dst
argument_list|)
decl_stmt|;
name|OutputStream
name|tos
init|=
name|getTranslatingOutputStream
argument_list|(
name|os
argument_list|,
name|charset
argument_list|,
name|eol
argument_list|,
literal|true
argument_list|,
name|keywords
argument_list|,
name|expand
argument_list|)
decl_stmt|;
name|InputStream
name|is
init|=
name|SVNFileUtil
operator|.
name|openFileForReading
argument_list|(
name|src
argument_list|,
name|SVNLogType
operator|.
name|WC
argument_list|)
decl_stmt|;
try|try
block|{
name|copy
argument_list|(
name|is
argument_list|,
name|tos
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
name|SVNErrorMessage
name|err
init|=
name|SVNErrorMessage
operator|.
name|create
argument_list|(
name|SVNErrorCode
operator|.
name|IO_ERROR
argument_list|,
name|e
operator|.
name|getLocalizedMessage
argument_list|()
argument_list|)
decl_stmt|;
name|SVNErrorManager
operator|.
name|error
argument_list|(
name|err
argument_list|,
name|e
argument_list|,
name|SVNLogType
operator|.
name|DEFAULT
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
name|SVNFileUtil
operator|.
name|closeFile
argument_list|(
name|tos
argument_list|)
expr_stmt|;
name|SVNFileUtil
operator|.
name|closeFile
argument_list|(
name|os
argument_list|)
expr_stmt|;
name|SVNFileUtil
operator|.
name|closeFile
argument_list|(
name|is
argument_list|)
expr_stmt|;
block|}
block|}
specifier|public
specifier|static
name|InputStream
name|getTranslatedStream
parameter_list|(
name|SVNAdminArea
name|adminArea
parameter_list|,
name|String
name|name
parameter_list|,
name|boolean
name|translateToNormalForm
parameter_list|,
name|boolean
name|repairEOL
parameter_list|)
throws|throws
name|SVNException
block|{
name|ISVNOptions
name|options
init|=
name|adminArea
operator|.
name|getWCAccess
argument_list|()
operator|.
name|getOptions
argument_list|()
decl_stmt|;
name|String
name|charset
init|=
name|getCharset
argument_list|(
name|adminArea
operator|.
name|getProperties
argument_list|(
name|name
argument_list|)
operator|.
name|getStringPropertyValue
argument_list|(
name|SVNProperty
operator|.
name|CHARSET
argument_list|)
argument_list|,
name|adminArea
operator|.
name|getFile
argument_list|(
name|name
argument_list|)
operator|.
name|getPath
argument_list|()
argument_list|,
name|options
argument_list|)
decl_stmt|;
name|String
name|eolStyle
init|=
name|adminArea
operator|.
name|getProperties
argument_list|(
name|name
argument_list|)
operator|.
name|getStringPropertyValue
argument_list|(
name|SVNProperty
operator|.
name|EOL_STYLE
argument_list|)
decl_stmt|;
name|String
name|keywords
init|=
name|adminArea
operator|.
name|getProperties
argument_list|(
name|name
argument_list|)
operator|.
name|getStringPropertyValue
argument_list|(
name|SVNProperty
operator|.
name|KEYWORDS
argument_list|)
decl_stmt|;
name|boolean
name|special
init|=
name|adminArea
operator|.
name|getProperties
argument_list|(
name|name
argument_list|)
operator|.
name|getPropertyValue
argument_list|(
name|SVNProperty
operator|.
name|SPECIAL
argument_list|)
operator|!=
literal|null
decl_stmt|;
name|File
name|src
init|=
name|adminArea
operator|.
name|getFile
argument_list|(
name|name
argument_list|)
decl_stmt|;
if|if
condition|(
name|special
condition|)
block|{
if|if
condition|(
operator|!
name|SVNFileUtil
operator|.
name|symlinksSupported
argument_list|()
condition|)
block|{
return|return
name|SVNFileUtil
operator|.
name|openFileForReading
argument_list|(
name|src
argument_list|,
name|SVNLogType
operator|.
name|WC
argument_list|)
return|;
block|}
if|if
condition|(
name|SVNFileType
operator|.
name|getType
argument_list|(
name|src
argument_list|)
operator|!=
name|SVNFileType
operator|.
name|SYMLINK
condition|)
block|{
name|SVNErrorMessage
name|err
init|=
name|SVNErrorMessage
operator|.
name|create
argument_list|(
name|SVNErrorCode
operator|.
name|IO_ERROR
argument_list|,
literal|"Cannot detranslate symbolic link ''{0}''; file does not exist or not a symbolic link"
argument_list|,
name|src
argument_list|)
decl_stmt|;
name|SVNErrorManager
operator|.
name|error
argument_list|(
name|err
argument_list|,
name|SVNLogType
operator|.
name|DEFAULT
argument_list|)
expr_stmt|;
block|}
name|String
name|linkPath
init|=
name|SVNFileUtil
operator|.
name|getSymlinkName
argument_list|(
name|src
argument_list|)
decl_stmt|;
if|if
condition|(
name|linkPath
operator|==
literal|null
condition|)
block|{
name|SVNErrorMessage
name|err
init|=
name|SVNErrorMessage
operator|.
name|create
argument_list|(
name|SVNErrorCode
operator|.
name|IO_ERROR
argument_list|,
literal|"Cannot detranslate symbolic link ''{0}''; file does not exist or not a symbolic link"
argument_list|,
name|src
argument_list|)
decl_stmt|;
name|SVNErrorManager
operator|.
name|error
argument_list|(
name|err
argument_list|,
name|SVNLogType
operator|.
name|DEFAULT
argument_list|)
expr_stmt|;
block|}
name|ByteArrayOutputStream
name|os
init|=
operator|new
name|ByteArrayOutputStream
argument_list|()
decl_stmt|;
try|try
block|{
name|os
operator|.
name|write
argument_list|(
literal|"link "
operator|.
name|getBytes
argument_list|(
literal|"UTF-8"
argument_list|)
argument_list|)
expr_stmt|;
name|os
operator|.
name|write
argument_list|(
name|linkPath
operator|.
name|getBytes
argument_list|(
literal|"UTF-8"
argument_list|)
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
name|SVNErrorMessage
name|err
init|=
name|SVNErrorMessage
operator|.
name|create
argument_list|(
name|SVNErrorCode
operator|.
name|IO_ERROR
argument_list|,
name|e
operator|.
name|getLocalizedMessage
argument_list|()
argument_list|)
decl_stmt|;
name|SVNErrorManager
operator|.
name|error
argument_list|(
name|err
argument_list|,
name|e
argument_list|,
name|SVNLogType
operator|.
name|DEFAULT
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
name|SVNFileUtil
operator|.
name|closeFile
argument_list|(
name|os
argument_list|)
expr_stmt|;
block|}
return|return
operator|new
name|ByteArrayInputStream
argument_list|(
name|os
operator|.
name|toByteArray
argument_list|()
argument_list|)
return|;
block|}
name|boolean
name|translationRequired
init|=
name|special
operator|||
name|keywords
operator|!=
literal|null
operator|||
name|eolStyle
operator|!=
literal|null
operator|||
name|charset
operator|!=
literal|null
decl_stmt|;
if|if
condition|(
name|translationRequired
condition|)
block|{
name|byte
index|[]
name|eol
init|=
name|getBaseEOL
argument_list|(
name|eolStyle
argument_list|)
decl_stmt|;
if|if
condition|(
name|translateToNormalForm
condition|)
block|{
if|if
condition|(
name|eolStyle
operator|!=
literal|null
operator|&&
name|eol
operator|==
literal|null
condition|)
block|{
name|SVNErrorMessage
name|err
init|=
name|SVNErrorMessage
operator|.
name|create
argument_list|(
name|SVNErrorCode
operator|.
name|IO_UNKNOWN_EOL
argument_list|)
decl_stmt|;
name|SVNErrorManager
operator|.
name|error
argument_list|(
name|err
argument_list|,
name|SVNLogType
operator|.
name|DEFAULT
argument_list|)
expr_stmt|;
block|}
name|Map
name|keywordsMap
init|=
name|computeKeywords
argument_list|(
name|keywords
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|)
decl_stmt|;
name|boolean
name|repair
init|=
operator|(
name|eolStyle
operator|!=
literal|null
operator|&&
name|eol
operator|!=
literal|null
operator|&&
operator|!
name|SVNProperty
operator|.
name|EOL_STYLE_NATIVE
operator|.
name|equals
argument_list|(
name|eolStyle
argument_list|)
operator|)
operator|||
name|repairEOL
decl_stmt|;
return|return
name|getTranslatingInputStream
argument_list|(
name|SVNFileUtil
operator|.
name|openFileForReading
argument_list|(
name|src
argument_list|,
name|SVNLogType
operator|.
name|WC
argument_list|)
argument_list|,
name|charset
argument_list|,
name|eol
argument_list|,
name|repair
argument_list|,
name|keywordsMap
argument_list|,
literal|false
argument_list|)
return|;
block|}
name|SVNEntry
name|entry
init|=
name|adminArea
operator|.
name|getVersionedEntry
argument_list|(
name|name
argument_list|,
literal|false
argument_list|)
decl_stmt|;
name|String
name|url
init|=
name|entry
operator|.
name|getURL
argument_list|()
decl_stmt|;
name|String
name|author
init|=
name|entry
operator|.
name|getAuthor
argument_list|()
decl_stmt|;
name|String
name|date
init|=
name|entry
operator|.
name|getCommittedDate
argument_list|()
decl_stmt|;
name|String
name|rev
init|=
name|Long
operator|.
name|toString
argument_list|(
name|entry
operator|.
name|getCommittedRevision
argument_list|()
argument_list|)
decl_stmt|;
name|Map
name|keywordsMap
init|=
name|computeKeywords
argument_list|(
name|keywords
argument_list|,
name|url
argument_list|,
name|author
argument_list|,
name|date
argument_list|,
name|rev
argument_list|,
name|options
argument_list|)
decl_stmt|;
return|return
name|getTranslatingInputStream
argument_list|(
name|SVNFileUtil
operator|.
name|openFileForReading
argument_list|(
name|src
argument_list|,
name|SVNLogType
operator|.
name|WC
argument_list|)
argument_list|,
name|charset
argument_list|,
name|eol
argument_list|,
literal|true
argument_list|,
name|keywordsMap
argument_list|,
literal|true
argument_list|)
return|;
block|}
return|return
name|SVNFileUtil
operator|.
name|openFileForReading
argument_list|(
name|src
argument_list|,
name|SVNLogType
operator|.
name|WC
argument_list|)
return|;
block|}
specifier|public
specifier|static
name|File
name|getTranslatedFile
parameter_list|(
name|SVNAdminArea
name|dir
parameter_list|,
name|String
name|name
parameter_list|,
name|File
name|src
parameter_list|,
name|boolean
name|forceEOLRepair
parameter_list|,
name|boolean
name|useGlobalTmp
parameter_list|,
name|boolean
name|forceCopy
parameter_list|,
name|boolean
name|toNormalFormat
parameter_list|)
throws|throws
name|SVNException
block|{
name|ISVNOptions
name|options
init|=
name|dir
operator|.
name|getWCAccess
argument_list|()
operator|.
name|getOptions
argument_list|()
decl_stmt|;
name|String
name|charset
init|=
name|getCharset
argument_list|(
name|dir
operator|.
name|getProperties
argument_list|(
name|name
argument_list|)
operator|.
name|getStringPropertyValue
argument_list|(
name|SVNProperty
operator|.
name|CHARSET
argument_list|)
argument_list|,
name|dir
operator|.
name|getFile
argument_list|(
name|name
argument_list|)
operator|.
name|getPath
argument_list|()
argument_list|,
name|options
argument_list|)
decl_stmt|;
name|String
name|eolStyle
init|=
name|dir
operator|.
name|getProperties
argument_list|(
name|name
argument_list|)
operator|.
name|getStringPropertyValue
argument_list|(
name|SVNProperty
operator|.
name|EOL_STYLE
argument_list|)
decl_stmt|;
name|String
name|keywords
init|=
name|dir
operator|.
name|getProperties
argument_list|(
name|name
argument_list|)
operator|.
name|getStringPropertyValue
argument_list|(
name|SVNProperty
operator|.
name|KEYWORDS
argument_list|)
decl_stmt|;
name|boolean
name|special
init|=
name|dir
operator|.
name|getProperties
argument_list|(
name|name
argument_list|)
operator|.
name|getPropertyValue
argument_list|(
name|SVNProperty
operator|.
name|SPECIAL
argument_list|)
operator|!=
literal|null
decl_stmt|;
name|boolean
name|needsTranslation
init|=
name|charset
operator|!=
literal|null
operator|||
name|eolStyle
operator|!=
literal|null
operator|||
name|keywords
operator|!=
literal|null
operator|||
name|special
decl_stmt|;
name|File
name|result
init|=
literal|null
decl_stmt|;
if|if
condition|(
operator|!
name|needsTranslation
operator|&&
operator|!
name|forceCopy
condition|)
block|{
name|result
operator|=
name|src
expr_stmt|;
block|}
else|else
block|{
if|if
condition|(
name|useGlobalTmp
condition|)
block|{
name|result
operator|=
name|SVNFileUtil
operator|.
name|createTempFile
argument_list|(
literal|"svndiff"
argument_list|,
literal|".tmp"
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|result
operator|=
name|SVNAdminUtil
operator|.
name|createTmpFile
argument_list|(
name|dir
argument_list|,
name|name
argument_list|,
literal|".tmp"
argument_list|,
literal|true
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|toNormalFormat
condition|)
block|{
name|translateToNormalForm
argument_list|(
name|src
argument_list|,
name|result
argument_list|,
name|charset
argument_list|,
name|eolStyle
argument_list|,
name|forceEOLRepair
argument_list|,
name|keywords
argument_list|,
name|special
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|SVNEntry
name|entry
init|=
name|dir
operator|.
name|getVersionedEntry
argument_list|(
name|name
argument_list|,
literal|false
argument_list|)
decl_stmt|;
name|String
name|url
init|=
name|entry
operator|.
name|getURL
argument_list|()
decl_stmt|;
name|String
name|author
init|=
name|entry
operator|.
name|getAuthor
argument_list|()
decl_stmt|;
name|String
name|date
init|=
name|entry
operator|.
name|getCommittedDate
argument_list|()
decl_stmt|;
name|String
name|rev
init|=
name|Long
operator|.
name|toString
argument_list|(
name|entry
operator|.
name|getCommittedRevision
argument_list|()
argument_list|)
decl_stmt|;
name|Map
name|keywordsMap
init|=
name|computeKeywords
argument_list|(
name|keywords
argument_list|,
name|url
argument_list|,
name|author
argument_list|,
name|date
argument_list|,
name|rev
argument_list|,
name|options
argument_list|)
decl_stmt|;
name|copyAndTranslate
argument_list|(
name|src
argument_list|,
name|result
argument_list|,
name|charset
argument_list|,
name|getEOL
argument_list|(
name|eolStyle
argument_list|,
name|options
argument_list|)
argument_list|,
name|keywordsMap
argument_list|,
name|special
argument_list|,
literal|true
argument_list|,
literal|true
argument_list|)
expr_stmt|;
block|}
block|}
return|return
name|result
return|;
block|}
specifier|public
specifier|static
name|File
name|maybeUpdateTargetEOLs
parameter_list|(
name|SVNAdminArea
name|dir
parameter_list|,
name|File
name|target
parameter_list|,
name|SVNProperties
name|propDiff
parameter_list|)
throws|throws
name|SVNException
block|{
name|String
name|eolStyle
init|=
literal|null
decl_stmt|;
if|if
condition|(
name|propDiff
operator|!=
literal|null
operator|&&
name|propDiff
operator|.
name|containsName
argument_list|(
name|SVNProperty
operator|.
name|EOL_STYLE
argument_list|)
operator|&&
name|propDiff
operator|.
name|getStringValue
argument_list|(
name|SVNProperty
operator|.
name|EOL_STYLE
argument_list|)
operator|!=
literal|null
condition|)
block|{
name|eolStyle
operator|=
name|propDiff
operator|.
name|getStringValue
argument_list|(
name|SVNProperty
operator|.
name|EOL_STYLE
argument_list|)
expr_stmt|;
name|ISVNOptions
name|options
init|=
name|dir
operator|.
name|getWCAccess
argument_list|()
operator|.
name|getOptions
argument_list|()
decl_stmt|;
name|byte
index|[]
name|eol
init|=
name|getEOL
argument_list|(
name|eolStyle
argument_list|,
name|options
argument_list|)
decl_stmt|;
name|File
name|tmpFile
init|=
name|SVNAdminUtil
operator|.
name|createTmpFile
argument_list|(
name|dir
argument_list|)
decl_stmt|;
name|copyAndTranslate
argument_list|(
name|target
argument_list|,
name|tmpFile
argument_list|,
literal|null
argument_list|,
name|eol
argument_list|,
literal|null
argument_list|,
literal|false
argument_list|,
literal|false
argument_list|,
literal|true
argument_list|)
expr_stmt|;
return|return
name|tmpFile
return|;
block|}
return|return
name|target
return|;
block|}
specifier|public
specifier|static
name|File
name|detranslateWorkingCopy
parameter_list|(
name|SVNAdminArea
name|dir
parameter_list|,
name|String
name|name
parameter_list|,
name|SVNProperties
name|propDiff
parameter_list|,
name|boolean
name|force
parameter_list|)
throws|throws
name|SVNException
block|{
name|SVNVersionedProperties
name|props
init|=
name|dir
operator|.
name|getProperties
argument_list|(
name|name
argument_list|)
decl_stmt|;
name|boolean
name|isLocalBinary
init|=
name|SVNProperty
operator|.
name|isBinaryMimeType
argument_list|(
name|props
operator|.
name|getStringPropertyValue
argument_list|(
name|SVNProperty
operator|.
name|MIME_TYPE
argument_list|)
argument_list|)
decl_stmt|;
name|String
name|charsetProp
init|=
literal|null
decl_stmt|;
name|String
name|eolStyle
init|=
literal|null
decl_stmt|;
name|String
name|keywords
init|=
literal|null
decl_stmt|;
name|boolean
name|isSpecial
init|=
literal|false
decl_stmt|;
name|boolean
name|isRemoteHasBinary
init|=
name|propDiff
operator|!=
literal|null
operator|&&
name|propDiff
operator|.
name|containsName
argument_list|(
name|SVNProperty
operator|.
name|MIME_TYPE
argument_list|)
decl_stmt|;
name|boolean
name|isRemoteBinaryRemoved
init|=
name|isRemoteHasBinary
operator|&&
operator|!
name|SVNProperty
operator|.
name|isBinaryMimeType
argument_list|(
name|propDiff
operator|.
name|getStringValue
argument_list|(
name|SVNProperty
operator|.
name|MIME_TYPE
argument_list|)
argument_list|)
decl_stmt|;
name|boolean
name|isRemoteBinary
init|=
name|isRemoteHasBinary
operator|&&
name|SVNProperty
operator|.
name|isBinaryMimeType
argument_list|(
name|propDiff
operator|.
name|getStringValue
argument_list|(
name|SVNProperty
operator|.
name|MIME_TYPE
argument_list|)
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|isLocalBinary
operator|&&
name|isRemoteBinary
condition|)
block|{
name|isSpecial
operator|=
name|props
operator|.
name|getPropertyValue
argument_list|(
name|SVNProperty
operator|.
name|SPECIAL
argument_list|)
operator|!=
literal|null
expr_stmt|;
name|keywords
operator|=
name|props
operator|.
name|getStringPropertyValue
argument_list|(
name|SVNProperty
operator|.
name|KEYWORDS
argument_list|)
expr_stmt|;
name|charsetProp
operator|=
name|props
operator|.
name|getStringPropertyValue
argument_list|(
name|SVNProperty
operator|.
name|CHARSET
argument_list|)
expr_stmt|;
block|}
if|else if
condition|(
operator|!
name|isLocalBinary
operator|||
name|isRemoteBinaryRemoved
condition|)
block|{
name|isSpecial
operator|=
name|props
operator|.
name|getPropertyValue
argument_list|(
name|SVNProperty
operator|.
name|SPECIAL
argument_list|)
operator|!=
literal|null
expr_stmt|;
if|if
condition|(
operator|!
name|isSpecial
condition|)
block|{
if|if
condition|(
name|propDiff
operator|!=
literal|null
operator|&&
name|propDiff
operator|.
name|getStringValue
argument_list|(
name|SVNProperty
operator|.
name|EOL_STYLE
argument_list|)
operator|!=
literal|null
condition|)
block|{
name|eolStyle
operator|=
name|propDiff
operator|.
name|getStringValue
argument_list|(
name|SVNProperty
operator|.
name|EOL_STYLE
argument_list|)
expr_stmt|;
block|}
if|else if
condition|(
operator|!
name|isLocalBinary
condition|)
block|{
name|eolStyle
operator|=
name|props
operator|.
name|getStringPropertyValue
argument_list|(
name|SVNProperty
operator|.
name|EOL_STYLE
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|propDiff
operator|!=
literal|null
operator|&&
name|propDiff
operator|.
name|getStringValue
argument_list|(
name|SVNProperty
operator|.
name|CHARSET
argument_list|)
operator|!=
literal|null
condition|)
block|{
name|charsetProp
operator|=
name|propDiff
operator|.
name|getStringValue
argument_list|(
name|SVNProperty
operator|.
name|CHARSET
argument_list|)
expr_stmt|;
block|}
if|else if
condition|(
operator|!
name|isLocalBinary
condition|)
block|{
name|charsetProp
operator|=
name|props
operator|.
name|getStringPropertyValue
argument_list|(
name|SVNProperty
operator|.
name|CHARSET
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
operator|!
name|isLocalBinary
condition|)
block|{
name|keywords
operator|=
name|props
operator|.
name|getStringPropertyValue
argument_list|(
name|SVNProperty
operator|.
name|KEYWORDS
argument_list|)
expr_stmt|;
block|}
block|}
block|}
name|File
name|detranslatedFile
init|=
literal|null
decl_stmt|;
name|ISVNOptions
name|options
init|=
name|dir
operator|.
name|getWCAccess
argument_list|()
operator|.
name|getOptions
argument_list|()
decl_stmt|;
name|String
name|charset
init|=
name|getCharset
argument_list|(
name|charsetProp
argument_list|,
name|dir
operator|.
name|getFile
argument_list|(
name|name
argument_list|)
operator|.
name|getPath
argument_list|()
argument_list|,
name|options
argument_list|)
decl_stmt|;
if|if
condition|(
name|force
operator|||
name|charset
operator|!=
literal|null
operator|||
name|keywords
operator|!=
literal|null
operator|||
name|eolStyle
operator|!=
literal|null
operator|||
name|isSpecial
condition|)
block|{
name|File
name|tmpFile
init|=
name|SVNAdminUtil
operator|.
name|createTmpFile
argument_list|(
name|dir
argument_list|)
decl_stmt|;
name|translateToNormalForm
argument_list|(
name|dir
operator|.
name|getFile
argument_list|(
name|name
argument_list|)
argument_list|,
name|tmpFile
argument_list|,
name|charset
argument_list|,
name|eolStyle
argument_list|,
literal|true
argument_list|,
name|keywords
argument_list|,
name|isSpecial
argument_list|)
expr_stmt|;
name|detranslatedFile
operator|=
name|tmpFile
expr_stmt|;
block|}
else|else
block|{
name|detranslatedFile
operator|=
name|dir
operator|.
name|getFile
argument_list|(
name|name
argument_list|)
expr_stmt|;
block|}
return|return
name|detranslatedFile
return|;
block|}
specifier|private
specifier|static
name|void
name|translateToNormalForm
parameter_list|(
name|File
name|source
parameter_list|,
name|File
name|destination
parameter_list|,
name|String
name|charset
parameter_list|,
name|String
name|eolStyle
parameter_list|,
name|boolean
name|alwaysRepairEOLs
parameter_list|,
name|String
name|keywords
parameter_list|,
name|boolean
name|isSpecial
parameter_list|)
throws|throws
name|SVNException
block|{
name|byte
index|[]
name|eol
init|=
name|getBaseEOL
argument_list|(
name|eolStyle
argument_list|)
decl_stmt|;
if|if
condition|(
name|eolStyle
operator|!=
literal|null
operator|&&
name|eol
operator|==
literal|null
condition|)
block|{
name|SVNErrorMessage
name|err
init|=
name|SVNErrorMessage
operator|.
name|create
argument_list|(
name|SVNErrorCode
operator|.
name|IO_UNKNOWN_EOL
argument_list|)
decl_stmt|;
name|SVNErrorManager
operator|.
name|error
argument_list|(
name|err
argument_list|,
name|SVNLogType
operator|.
name|DEFAULT
argument_list|)
expr_stmt|;
block|}
name|Map
name|keywordsMap
init|=
name|computeKeywords
argument_list|(
name|keywords
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|)
decl_stmt|;
name|boolean
name|repair
init|=
operator|(
name|eolStyle
operator|!=
literal|null
operator|&&
name|eol
operator|!=
literal|null
operator|&&
operator|!
name|SVNProperty
operator|.
name|EOL_STYLE_NATIVE
operator|.
name|equals
argument_list|(
name|eolStyle
argument_list|)
operator|)
operator|||
name|alwaysRepairEOLs
decl_stmt|;
name|copyAndTranslate
argument_list|(
name|source
argument_list|,
name|destination
argument_list|,
name|charset
argument_list|,
name|eol
argument_list|,
name|keywordsMap
argument_list|,
name|isSpecial
argument_list|,
literal|false
argument_list|,
name|repair
argument_list|)
expr_stmt|;
block|}
specifier|private
specifier|static
name|void
name|copyAndTranslate
parameter_list|(
name|File
name|source
parameter_list|,
name|File
name|destination
parameter_list|,
name|String
name|charset
parameter_list|,
name|byte
index|[]
name|eol
parameter_list|,
name|Map
name|keywords
parameter_list|,
name|boolean
name|special
parameter_list|,
name|boolean
name|expand
parameter_list|,
name|boolean
name|repair
parameter_list|)
throws|throws
name|SVNException
block|{
name|boolean
name|isSpecialPath
init|=
literal|false
decl_stmt|;
if|if
condition|(
name|SVNFileUtil
operator|.
name|symlinksSupported
argument_list|()
condition|)
block|{
name|SVNFileType
name|type
init|=
name|SVNFileType
operator|.
name|getType
argument_list|(
name|source
argument_list|)
decl_stmt|;
name|isSpecialPath
operator|=
name|type
operator|==
name|SVNFileType
operator|.
name|SYMLINK
expr_stmt|;
block|}
if|if
condition|(
name|special
operator|||
name|isSpecialPath
condition|)
block|{
if|if
condition|(
name|destination
operator|.
name|exists
argument_list|()
condition|)
block|{
name|destination
operator|.
name|delete
argument_list|()
expr_stmt|;
block|}
if|if
condition|(
operator|!
name|SVNFileUtil
operator|.
name|symlinksSupported
argument_list|()
condition|)
block|{
name|SVNFileUtil
operator|.
name|copyFile
argument_list|(
name|source
argument_list|,
name|destination
argument_list|,
literal|true
argument_list|)
expr_stmt|;
block|}
if|else if
condition|(
name|expand
condition|)
block|{
comment|// create symlink to target, and create it at dst
name|SVNFileUtil
operator|.
name|createSymlink
argument_list|(
name|destination
argument_list|,
name|source
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|SVNFileUtil
operator|.
name|detranslateSymlink
argument_list|(
name|source
argument_list|,
name|destination
argument_list|)
expr_stmt|;
block|}
return|return;
block|}
if|if
condition|(
name|charset
operator|==
literal|null
operator|&&
name|eol
operator|==
literal|null
operator|&&
operator|(
name|keywords
operator|==
literal|null
operator|||
name|keywords
operator|.
name|isEmpty
argument_list|()
operator|)
condition|)
block|{
comment|// no expansion, fast copy.
name|SVNFileUtil
operator|.
name|copyFile
argument_list|(
name|source
argument_list|,
name|destination
argument_list|,
literal|false
argument_list|)
expr_stmt|;
return|return;
block|}
name|OutputStream
name|dst
init|=
literal|null
decl_stmt|;
name|InputStream
name|src
init|=
literal|null
decl_stmt|;
name|OutputStream
name|translatingStream
init|=
literal|null
decl_stmt|;
try|try
block|{
name|dst
operator|=
name|SVNFileUtil
operator|.
name|openFileForWriting
argument_list|(
name|destination
argument_list|)
expr_stmt|;
name|src
operator|=
name|SVNFileUtil
operator|.
name|openFileForReading
argument_list|(
name|source
argument_list|,
name|SVNLogType
operator|.
name|WC
argument_list|)
expr_stmt|;
name|translatingStream
operator|=
name|getTranslatingOutputStream
argument_list|(
name|dst
argument_list|,
name|charset
argument_list|,
name|eol
argument_list|,
name|repair
argument_list|,
name|keywords
argument_list|,
name|expand
argument_list|)
expr_stmt|;
name|SVNTranslator
operator|.
name|copy
argument_list|(
name|src
argument_list|,
name|translatingStream
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOExceptionWrapper
name|ew
parameter_list|)
block|{
if|if
condition|(
name|ew
operator|.
name|getOriginalException
argument_list|()
operator|.
name|getErrorMessage
argument_list|()
operator|.
name|getErrorCode
argument_list|()
operator|==
name|SVNErrorCode
operator|.
name|IO_INCONSISTENT_EOL
condition|)
block|{
name|SVNErrorMessage
name|err
init|=
name|SVNErrorMessage
operator|.
name|create
argument_list|(
name|SVNErrorCode
operator|.
name|IO_INCONSISTENT_EOL
argument_list|,
literal|"File ''{0}'' has inconsistent newlines"
argument_list|,
name|source
argument_list|)
decl_stmt|;
name|SVNErrorManager
operator|.
name|error
argument_list|(
name|err
argument_list|,
name|SVNLogType
operator|.
name|DEFAULT
argument_list|)
expr_stmt|;
block|}
throw|throw
name|ew
operator|.
name|getOriginalException
argument_list|()
throw|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
name|SVNErrorMessage
name|err
init|=
name|SVNErrorMessage
operator|.
name|create
argument_list|(
name|SVNErrorCode
operator|.
name|IO_ERROR
argument_list|,
name|e
operator|.
name|getLocalizedMessage
argument_list|()
argument_list|)
decl_stmt|;
name|SVNErrorManager
operator|.
name|error
argument_list|(
name|err
argument_list|,
name|e
argument_list|,
name|SVNLogType
operator|.
name|DEFAULT
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
if|if
condition|(
name|dst
operator|!=
literal|null
condition|)
block|{
try|try
block|{
name|dst
operator|.
name|flush
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|ioe
parameter_list|)
block|{
comment|//
block|}
block|}
name|SVNFileUtil
operator|.
name|closeFile
argument_list|(
name|src
argument_list|)
expr_stmt|;
name|SVNFileUtil
operator|.
name|closeFile
argument_list|(
name|translatingStream
argument_list|)
expr_stmt|;
name|SVNFileUtil
operator|.
name|closeFile
argument_list|(
name|dst
argument_list|)
expr_stmt|;
block|}
block|}
specifier|public
specifier|static
name|boolean
name|checkNewLines
parameter_list|(
name|File
name|file
parameter_list|)
block|{
if|if
condition|(
name|file
operator|==
literal|null
operator|||
operator|!
name|file
operator|.
name|exists
argument_list|()
operator|||
name|file
operator|.
name|isDirectory
argument_list|()
condition|)
block|{
return|return
literal|true
return|;
block|}
name|InputStream
name|is
init|=
literal|null
decl_stmt|;
try|try
block|{
name|is
operator|=
name|SVNFileUtil
operator|.
name|openFileForReading
argument_list|(
name|file
argument_list|,
name|SVNLogType
operator|.
name|WC
argument_list|)
expr_stmt|;
name|int
name|r
decl_stmt|;
name|byte
index|[]
name|lastFoundEOL
init|=
literal|null
decl_stmt|;
name|byte
index|[]
name|currentEOL
init|=
literal|null
decl_stmt|;
while|while
condition|(
operator|(
name|r
operator|=
name|is
operator|.
name|read
argument_list|()
operator|)
operator|>=
literal|0
condition|)
block|{
if|if
condition|(
name|r
operator|==
literal|'\n'
condition|)
block|{
name|currentEOL
operator|=
name|SVNProperty
operator|.
name|EOL_LF_BYTES
expr_stmt|;
block|}
if|else if
condition|(
name|r
operator|==
literal|'\r'
condition|)
block|{
name|currentEOL
operator|=
name|SVNProperty
operator|.
name|EOL_CR_BYTES
expr_stmt|;
name|r
operator|=
name|is
operator|.
name|read
argument_list|()
expr_stmt|;
if|if
condition|(
name|r
operator|==
literal|'\n'
condition|)
block|{
name|currentEOL
operator|=
name|SVNProperty
operator|.
name|EOL_CRLF_BYTES
expr_stmt|;
block|}
block|}
if|if
condition|(
name|lastFoundEOL
operator|==
literal|null
condition|)
block|{
name|lastFoundEOL
operator|=
name|currentEOL
expr_stmt|;
block|}
if|else if
condition|(
name|currentEOL
operator|!=
literal|null
operator|&&
name|lastFoundEOL
operator|!=
name|currentEOL
condition|)
block|{
return|return
literal|false
return|;
block|}
block|}
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
return|return
literal|false
return|;
block|}
catch|catch
parameter_list|(
name|SVNException
name|e
parameter_list|)
block|{
return|return
literal|false
return|;
block|}
finally|finally
block|{
name|SVNFileUtil
operator|.
name|closeFile
argument_list|(
name|is
argument_list|)
expr_stmt|;
block|}
return|return
literal|true
return|;
block|}
specifier|public
specifier|static
name|void
name|copy
parameter_list|(
name|InputStream
name|src
parameter_list|,
name|OutputStream
name|dst
parameter_list|)
throws|throws
name|IOException
block|{
name|byte
index|[]
name|buffer
init|=
operator|new
name|byte
index|[
literal|8192
index|]
decl_stmt|;
while|while
condition|(
literal|true
condition|)
block|{
name|int
name|read
init|=
name|src
operator|.
name|read
argument_list|(
name|buffer
argument_list|)
decl_stmt|;
if|if
condition|(
name|read
operator|<
literal|0
condition|)
block|{
return|return;
block|}
if|else if
condition|(
name|read
operator|==
literal|0
condition|)
block|{
continue|continue;
block|}
name|dst
operator|.
name|write
argument_list|(
name|buffer
argument_list|,
literal|0
argument_list|,
name|read
argument_list|)
expr_stmt|;
block|}
block|}
specifier|public
specifier|static
name|OutputStream
name|getTranslatingOutputStream
parameter_list|(
name|OutputStream
name|out
parameter_list|,
name|String
name|charset
parameter_list|,
name|byte
index|[]
name|eol
parameter_list|,
name|boolean
name|repair
parameter_list|,
name|Map
name|keywords
parameter_list|,
name|boolean
name|expand
parameter_list|)
block|{
if|if
condition|(
name|charset
operator|==
literal|null
operator|||
name|SVNProperty
operator|.
name|isUTF8
argument_list|(
name|charset
argument_list|)
condition|)
block|{
return|return
operator|new
name|SVNTranslatorOutputStream
argument_list|(
name|out
argument_list|,
name|eol
argument_list|,
name|repair
argument_list|,
name|keywords
argument_list|,
name|expand
argument_list|)
return|;
block|}
if|if
condition|(
name|expand
condition|)
block|{
name|out
operator|=
operator|new
name|SVNCharsetOutputStream
argument_list|(
name|out
argument_list|,
name|UTF8_CHARSET
argument_list|,
name|Charset
operator|.
name|forName
argument_list|(
name|charset
argument_list|)
argument_list|,
name|CodingErrorAction
operator|.
name|IGNORE
argument_list|,
name|CodingErrorAction
operator|.
name|IGNORE
argument_list|)
expr_stmt|;
return|return
operator|new
name|SVNTranslatorOutputStream
argument_list|(
name|out
argument_list|,
name|eol
argument_list|,
name|repair
argument_list|,
name|keywords
argument_list|,
name|expand
argument_list|)
return|;
block|}
name|out
operator|=
operator|new
name|SVNTranslatorOutputStream
argument_list|(
name|out
argument_list|,
name|eol
argument_list|,
name|repair
argument_list|,
name|keywords
argument_list|,
name|expand
argument_list|)
expr_stmt|;
return|return
operator|new
name|SVNCharsetOutputStream
argument_list|(
name|out
argument_list|,
name|Charset
operator|.
name|forName
argument_list|(
name|charset
argument_list|)
argument_list|,
name|UTF8_CHARSET
argument_list|,
name|CodingErrorAction
operator|.
name|IGNORE
argument_list|,
name|CodingErrorAction
operator|.
name|IGNORE
argument_list|)
return|;
block|}
specifier|public
specifier|static
name|InputStream
name|getTranslatingInputStream
parameter_list|(
name|InputStream
name|in
parameter_list|,
name|String
name|charset
parameter_list|,
name|byte
index|[]
name|eol
parameter_list|,
name|boolean
name|repair
parameter_list|,
name|Map
name|keywords
parameter_list|,
name|boolean
name|expand
parameter_list|)
block|{
if|if
condition|(
name|charset
operator|==
literal|null
operator|||
name|SVNProperty
operator|.
name|isUTF8
argument_list|(
name|charset
argument_list|)
condition|)
block|{
return|return
operator|new
name|SVNTranslatorInputStream
argument_list|(
name|in
argument_list|,
name|eol
argument_list|,
name|repair
argument_list|,
name|keywords
argument_list|,
name|expand
argument_list|)
return|;
block|}
if|if
condition|(
name|expand
condition|)
block|{
name|in
operator|=
operator|new
name|SVNTranslatorInputStream
argument_list|(
name|in
argument_list|,
name|eol
argument_list|,
name|repair
argument_list|,
name|keywords
argument_list|,
name|expand
argument_list|)
expr_stmt|;
return|return
operator|new
name|SVNCharsetInputStream
argument_list|(
name|in
argument_list|,
name|UTF8_CHARSET
argument_list|,
name|Charset
operator|.
name|forName
argument_list|(
name|charset
argument_list|)
argument_list|,
name|CodingErrorAction
operator|.
name|IGNORE
argument_list|,
name|CodingErrorAction
operator|.
name|IGNORE
argument_list|)
return|;
block|}
name|in
operator|=
operator|new
name|SVNCharsetInputStream
argument_list|(
name|in
argument_list|,
name|Charset
operator|.
name|forName
argument_list|(
name|charset
argument_list|)
argument_list|,
name|UTF8_CHARSET
argument_list|,
name|CodingErrorAction
operator|.
name|IGNORE
argument_list|,
name|CodingErrorAction
operator|.
name|IGNORE
argument_list|)
expr_stmt|;
return|return
operator|new
name|SVNTranslatorInputStream
argument_list|(
name|in
argument_list|,
name|eol
argument_list|,
name|repair
argument_list|,
name|keywords
argument_list|,
name|expand
argument_list|)
return|;
block|}
specifier|public
specifier|static
name|Map
name|computeKeywords
parameter_list|(
name|String
name|keywords
parameter_list|,
name|String
name|u
parameter_list|,
name|String
name|a
parameter_list|,
name|String
name|d
parameter_list|,
name|String
name|r
parameter_list|,
name|ISVNOptions
name|options
parameter_list|)
block|{
if|if
condition|(
name|keywords
operator|==
literal|null
condition|)
block|{
return|return
name|Collections
operator|.
name|EMPTY_MAP
return|;
block|}
name|boolean
name|expand
init|=
name|u
operator|!=
literal|null
decl_stmt|;
name|byte
index|[]
name|date
init|=
literal|null
decl_stmt|;
name|byte
index|[]
name|idDate
init|=
literal|null
decl_stmt|;
name|byte
index|[]
name|url
init|=
literal|null
decl_stmt|;
name|byte
index|[]
name|rev
init|=
literal|null
decl_stmt|;
name|byte
index|[]
name|author
init|=
literal|null
decl_stmt|;
name|byte
index|[]
name|name
init|=
literal|null
decl_stmt|;
name|byte
index|[]
name|id
init|=
literal|null
decl_stmt|;
name|byte
index|[]
name|header
init|=
literal|null
decl_stmt|;
name|Date
name|jDate
init|=
name|d
operator|==
literal|null
condition|?
literal|null
else|:
name|SVNDate
operator|.
name|parseDate
argument_list|(
name|d
argument_list|)
decl_stmt|;
name|Map
name|map
init|=
operator|new
name|SVNHashMap
argument_list|()
decl_stmt|;
try|try
block|{
for|for
control|(
name|StringTokenizer
name|tokens
init|=
operator|new
name|StringTokenizer
argument_list|(
name|keywords
argument_list|,
literal|" \t\n\b\r\f"
argument_list|)
init|;
name|tokens
operator|.
name|hasMoreTokens
argument_list|()
condition|;
control|)
block|{
name|String
name|token
init|=
name|tokens
operator|.
name|nextToken
argument_list|()
decl_stmt|;
if|if
condition|(
literal|"LastChangedDate"
operator|.
name|equalsIgnoreCase
argument_list|(
name|token
argument_list|)
operator|||
literal|"Date"
operator|.
name|equalsIgnoreCase
argument_list|(
name|token
argument_list|)
condition|)
block|{
name|date
operator|=
name|expand
operator|&&
name|date
operator|==
literal|null
condition|?
name|SVNDate
operator|.
name|formatHumanDate
argument_list|(
name|jDate
argument_list|,
name|options
argument_list|)
operator|.
name|getBytes
argument_list|(
literal|"UTF-8"
argument_list|)
else|:
name|date
expr_stmt|;
name|map
operator|.
name|put
argument_list|(
literal|"LastChangedDate"
argument_list|,
name|date
argument_list|)
expr_stmt|;
name|map
operator|.
name|put
argument_list|(
literal|"Date"
argument_list|,
name|date
argument_list|)
expr_stmt|;
block|}
if|else                 if
condition|(
literal|"LastChangedRevision"
operator|.
name|equalsIgnoreCase
argument_list|(
name|token
argument_list|)
operator|||
literal|"Revision"
operator|.
name|equalsIgnoreCase
argument_list|(
name|token
argument_list|)
operator|||
literal|"Rev"
operator|.
name|equalsIgnoreCase
argument_list|(
name|token
argument_list|)
condition|)
block|{
name|rev
operator|=
name|expand
operator|&&
name|rev
operator|==
literal|null
condition|?
name|r
operator|.
name|getBytes
argument_list|(
literal|"UTF-8"
argument_list|)
else|:
name|rev
expr_stmt|;
name|map
operator|.
name|put
argument_list|(
literal|"LastChangedRevision"
argument_list|,
name|rev
argument_list|)
expr_stmt|;
name|map
operator|.
name|put
argument_list|(
literal|"Revision"
argument_list|,
name|rev
argument_list|)
expr_stmt|;
name|map
operator|.
name|put
argument_list|(
literal|"Rev"
argument_list|,
name|rev
argument_list|)
expr_stmt|;
block|}
if|else if
condition|(
literal|"LastChangedBy"
operator|.
name|equalsIgnoreCase
argument_list|(
name|token
argument_list|)
operator|||
literal|"Author"
operator|.
name|equalsIgnoreCase
argument_list|(
name|token
argument_list|)
condition|)
block|{
name|author
operator|=
name|expand
operator|&&
name|author
operator|==
literal|null
condition|?
operator|(
name|a
operator|==
literal|null
condition|?
operator|new
name|byte
index|[
literal|0
index|]
else|:
name|a
operator|.
name|getBytes
argument_list|(
literal|"UTF-8"
argument_list|)
operator|)
else|:
name|author
expr_stmt|;
name|map
operator|.
name|put
argument_list|(
literal|"LastChangedBy"
argument_list|,
name|author
argument_list|)
expr_stmt|;
name|map
operator|.
name|put
argument_list|(
literal|"Author"
argument_list|,
name|author
argument_list|)
expr_stmt|;
block|}
if|else if
condition|(
literal|"HeadURL"
operator|.
name|equalsIgnoreCase
argument_list|(
name|token
argument_list|)
operator|||
literal|"URL"
operator|.
name|equalsIgnoreCase
argument_list|(
name|token
argument_list|)
condition|)
block|{
name|url
operator|=
name|expand
operator|&&
name|url
operator|==
literal|null
condition|?
name|SVNEncodingUtil
operator|.
name|uriDecode
argument_list|(
name|u
argument_list|)
operator|.
name|getBytes
argument_list|(
literal|"UTF-8"
argument_list|)
else|:
name|url
expr_stmt|;
name|map
operator|.
name|put
argument_list|(
literal|"HeadURL"
argument_list|,
name|url
argument_list|)
expr_stmt|;
name|map
operator|.
name|put
argument_list|(
literal|"URL"
argument_list|,
name|url
argument_list|)
expr_stmt|;
block|}
if|else if
condition|(
literal|"Id"
operator|.
name|equalsIgnoreCase
argument_list|(
name|token
argument_list|)
condition|)
block|{
if|if
condition|(
name|expand
operator|&&
name|header
operator|==
literal|null
condition|)
block|{
name|rev
operator|=
name|rev
operator|==
literal|null
condition|?
name|r
operator|.
name|getBytes
argument_list|(
literal|"UTF-8"
argument_list|)
else|:
name|rev
expr_stmt|;
name|idDate
operator|=
name|idDate
operator|==
literal|null
condition|?
name|SVNDate
operator|.
name|formatShortDate
argument_list|(
name|jDate
argument_list|)
operator|.
name|getBytes
argument_list|(
literal|"UTF-8"
argument_list|)
else|:
name|idDate
expr_stmt|;
name|name
operator|=
name|name
operator|==
literal|null
condition|?
name|SVNEncodingUtil
operator|.
name|uriDecode
argument_list|(
name|SVNPathUtil
operator|.
name|tail
argument_list|(
name|u
argument_list|)
argument_list|)
operator|.
name|getBytes
argument_list|(
literal|"UTF-8"
argument_list|)
else|:
name|name
expr_stmt|;
name|author
operator|=
name|author
operator|==
literal|null
condition|?
operator|(
name|a
operator|==
literal|null
condition|?
operator|new
name|byte
index|[
literal|0
index|]
else|:
name|a
operator|.
name|getBytes
argument_list|(
literal|"UTF-8"
argument_list|)
operator|)
else|:
name|author
expr_stmt|;
name|ByteArrayOutputStream
name|bos
init|=
operator|new
name|ByteArrayOutputStream
argument_list|()
decl_stmt|;
name|bos
operator|.
name|write
argument_list|(
name|name
argument_list|)
expr_stmt|;
name|bos
operator|.
name|write
argument_list|(
literal|' '
argument_list|)
expr_stmt|;
name|bos
operator|.
name|write
argument_list|(
name|rev
argument_list|)
expr_stmt|;
name|bos
operator|.
name|write
argument_list|(
literal|' '
argument_list|)
expr_stmt|;
name|bos
operator|.
name|write
argument_list|(
name|idDate
argument_list|)
expr_stmt|;
name|bos
operator|.
name|write
argument_list|(
literal|' '
argument_list|)
expr_stmt|;
name|bos
operator|.
name|write
argument_list|(
name|author
argument_list|)
expr_stmt|;
name|bos
operator|.
name|close
argument_list|()
expr_stmt|;
name|id
operator|=
name|bos
operator|.
name|toByteArray
argument_list|()
expr_stmt|;
block|}
name|map
operator|.
name|put
argument_list|(
literal|"Id"
argument_list|,
name|expand
condition|?
name|id
else|:
literal|null
argument_list|)
expr_stmt|;
block|}
if|else if
condition|(
literal|"Header"
operator|.
name|equalsIgnoreCase
argument_list|(
name|token
argument_list|)
condition|)
block|{
if|if
condition|(
name|expand
operator|&&
name|header
operator|==
literal|null
condition|)
block|{
name|rev
operator|=
name|rev
operator|==
literal|null
condition|?
name|r
operator|.
name|getBytes
argument_list|(
literal|"UTF-8"
argument_list|)
else|:
name|rev
expr_stmt|;
name|url
operator|=
name|expand
operator|&&
name|url
operator|==
literal|null
condition|?
name|SVNEncodingUtil
operator|.
name|uriDecode
argument_list|(
name|u
argument_list|)
operator|.
name|getBytes
argument_list|(
literal|"UTF-8"
argument_list|)
else|:
name|url
expr_stmt|;
name|idDate
operator|=
name|idDate
operator|==
literal|null
condition|?
name|SVNDate
operator|.
name|formatShortDate
argument_list|(
name|jDate
argument_list|)
operator|.
name|getBytes
argument_list|(
literal|"UTF-8"
argument_list|)
else|:
name|idDate
expr_stmt|;
name|author
operator|=
name|author
operator|==
literal|null
condition|?
operator|(
name|a
operator|==
literal|null
condition|?
operator|new
name|byte
index|[
literal|0
index|]
else|:
name|a
operator|.
name|getBytes
argument_list|(
literal|"UTF-8"
argument_list|)
operator|)
else|:
name|author
expr_stmt|;
name|ByteArrayOutputStream
name|bos
init|=
operator|new
name|ByteArrayOutputStream
argument_list|()
decl_stmt|;
name|bos
operator|.
name|write
argument_list|(
name|url
argument_list|)
expr_stmt|;
name|bos
operator|.
name|write
argument_list|(
literal|' '
argument_list|)
expr_stmt|;
name|bos
operator|.
name|write
argument_list|(
name|rev
argument_list|)
expr_stmt|;
name|bos
operator|.
name|write
argument_list|(
literal|' '
argument_list|)
expr_stmt|;
name|bos
operator|.
name|write
argument_list|(
name|idDate
argument_list|)
expr_stmt|;
name|bos
operator|.
name|write
argument_list|(
literal|' '
argument_list|)
expr_stmt|;
name|bos
operator|.
name|write
argument_list|(
name|author
argument_list|)
expr_stmt|;
name|bos
operator|.
name|close
argument_list|()
expr_stmt|;
name|header
operator|=
name|bos
operator|.
name|toByteArray
argument_list|()
expr_stmt|;
block|}
name|map
operator|.
name|put
argument_list|(
literal|"Header"
argument_list|,
name|expand
condition|?
name|header
else|:
literal|null
argument_list|)
expr_stmt|;
block|}
block|}
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
comment|//
block|}
return|return
name|map
return|;
block|}
specifier|public
specifier|static
name|byte
index|[]
name|getEOL
parameter_list|(
name|String
name|eolStyle
parameter_list|,
name|ISVNOptions
name|options
parameter_list|)
block|{
if|if
condition|(
name|SVNProperty
operator|.
name|EOL_STYLE_NATIVE
operator|.
name|equals
argument_list|(
name|eolStyle
argument_list|)
condition|)
block|{
return|return
name|options
operator|.
name|getNativeEOL
argument_list|()
return|;
block|}
if|else if
condition|(
name|SVNProperty
operator|.
name|EOL_STYLE_LF
operator|.
name|equals
argument_list|(
name|eolStyle
argument_list|)
condition|)
block|{
return|return
name|SVNProperty
operator|.
name|EOL_LF_BYTES
return|;
block|}
if|else if
condition|(
name|SVNProperty
operator|.
name|EOL_STYLE_CR
operator|.
name|equals
argument_list|(
name|eolStyle
argument_list|)
condition|)
block|{
return|return
name|SVNProperty
operator|.
name|EOL_CR_BYTES
return|;
block|}
if|else if
condition|(
name|SVNProperty
operator|.
name|EOL_STYLE_CRLF
operator|.
name|equals
argument_list|(
name|eolStyle
argument_list|)
condition|)
block|{
return|return
name|SVNProperty
operator|.
name|EOL_CRLF_BYTES
return|;
block|}
return|return
literal|null
return|;
block|}
specifier|public
specifier|static
name|byte
index|[]
name|getBaseEOL
parameter_list|(
name|String
name|eolStyle
parameter_list|)
block|{
if|if
condition|(
name|SVNProperty
operator|.
name|EOL_STYLE_NATIVE
operator|.
name|equals
argument_list|(
name|eolStyle
argument_list|)
condition|)
block|{
return|return
name|SVNProperty
operator|.
name|EOL_LF_BYTES
return|;
block|}
if|else if
condition|(
name|SVNProperty
operator|.
name|EOL_STYLE_CR
operator|.
name|equals
argument_list|(
name|eolStyle
argument_list|)
condition|)
block|{
return|return
name|SVNProperty
operator|.
name|EOL_CR_BYTES
return|;
block|}
if|else if
condition|(
name|SVNProperty
operator|.
name|EOL_STYLE_LF
operator|.
name|equals
argument_list|(
name|eolStyle
argument_list|)
condition|)
block|{
return|return
name|SVNProperty
operator|.
name|EOL_LF_BYTES
return|;
block|}
if|else if
condition|(
name|SVNProperty
operator|.
name|EOL_STYLE_CRLF
operator|.
name|equals
argument_list|(
name|eolStyle
argument_list|)
condition|)
block|{
return|return
name|SVNProperty
operator|.
name|EOL_CRLF_BYTES
return|;
block|}
return|return
literal|null
return|;
block|}
specifier|public
specifier|static
name|String
name|getCharset
parameter_list|(
name|String
name|charset
parameter_list|,
name|String
name|path
parameter_list|,
name|ISVNOptions
name|options
parameter_list|)
throws|throws
name|SVNException
block|{
if|if
condition|(
name|SVNProperty
operator|.
name|NATIVE
operator|.
name|equals
argument_list|(
name|charset
argument_list|)
condition|)
block|{
name|charset
operator|=
name|options
operator|.
name|getNativeCharset
argument_list|()
expr_stmt|;
block|}
name|boolean
name|isSupported
init|=
literal|true
decl_stmt|;
try|try
block|{
name|isSupported
operator|=
name|charset
operator|==
literal|null
operator|||
name|Charset
operator|.
name|isSupported
argument_list|(
name|charset
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IllegalCharsetNameException
name|e
parameter_list|)
block|{
name|isSupported
operator|=
literal|false
expr_stmt|;
block|}
if|if
condition|(
operator|!
name|isSupported
condition|)
block|{
name|SVNErrorManager
operator|.
name|error
argument_list|(
name|SVNErrorMessage
operator|.
name|create
argument_list|(
name|SVNErrorCode
operator|.
name|IO_ERROR
argument_list|,
literal|"Charset ''{0}'' is not supported on this computer; change svnkit:charset property value or remove that property for file ''{1}''"
argument_list|,
operator|new
name|Object
index|[]
block|{
name|charset
block|,
name|path
block|}
argument_list|)
argument_list|,
name|SVNLogType
operator|.
name|DEFAULT
argument_list|)
expr_stmt|;
block|}
return|return
name|charset
return|;
block|}
block|}
end_class

end_unit

