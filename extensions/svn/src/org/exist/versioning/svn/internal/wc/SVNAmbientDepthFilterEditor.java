begin_unit|revision:1.0.0;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * ====================================================================  * Copyright (c) 2004-2010 TMate Software Ltd.  All rights reserved.  *  * This software is licensed as described in the file COPYING, which  * you should have received as part of this distribution.  The terms  * are also available at http://svnkit.com/license.html.  * If newer versions of this license are posted there, you may use a  * newer version instead, at your option.  * ====================================================================  */
end_comment

begin_package
package|package
name|org
operator|.
name|exist
operator|.
name|versioning
operator|.
name|svn
operator|.
name|internal
operator|.
name|wc
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|File
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|OutputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|LinkedList
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|versioning
operator|.
name|svn
operator|.
name|internal
operator|.
name|wc
operator|.
name|admin
operator|.
name|SVNAdminAreaInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|versioning
operator|.
name|svn
operator|.
name|internal
operator|.
name|wc
operator|.
name|admin
operator|.
name|SVNEntry
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|versioning
operator|.
name|svn
operator|.
name|internal
operator|.
name|wc
operator|.
name|admin
operator|.
name|SVNWCAccess
import|;
end_import

begin_import
import|import
name|org
operator|.
name|tmatesoft
operator|.
name|svn
operator|.
name|core
operator|.
name|SVNCommitInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|tmatesoft
operator|.
name|svn
operator|.
name|core
operator|.
name|SVNDepth
import|;
end_import

begin_import
import|import
name|org
operator|.
name|tmatesoft
operator|.
name|svn
operator|.
name|core
operator|.
name|SVNErrorCode
import|;
end_import

begin_import
import|import
name|org
operator|.
name|tmatesoft
operator|.
name|svn
operator|.
name|core
operator|.
name|SVNErrorMessage
import|;
end_import

begin_import
import|import
name|org
operator|.
name|tmatesoft
operator|.
name|svn
operator|.
name|core
operator|.
name|SVNException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|tmatesoft
operator|.
name|svn
operator|.
name|core
operator|.
name|SVNPropertyValue
import|;
end_import

begin_import
import|import
name|org
operator|.
name|tmatesoft
operator|.
name|svn
operator|.
name|core
operator|.
name|io
operator|.
name|ISVNEditor
import|;
end_import

begin_import
import|import
name|org
operator|.
name|tmatesoft
operator|.
name|svn
operator|.
name|core
operator|.
name|io
operator|.
name|diff
operator|.
name|SVNDiffWindow
import|;
end_import

begin_import
import|import
name|org
operator|.
name|tmatesoft
operator|.
name|svn
operator|.
name|util
operator|.
name|SVNLogType
import|;
end_import

begin_comment
comment|/**  * @version 1.3  * @author  TMate Software Ltd.  */
end_comment

begin_class
specifier|public
class|class
name|SVNAmbientDepthFilterEditor
implements|implements
name|ISVNEditor
block|{
specifier|private
name|ISVNEditor
name|myDelegate
decl_stmt|;
specifier|private
name|SVNWCAccess
name|myWCAccess
decl_stmt|;
specifier|private
name|File
name|myAnchor
decl_stmt|;
specifier|private
name|String
name|myTarget
decl_stmt|;
specifier|private
name|DirBaton
name|myCurrentDirBaton
decl_stmt|;
specifier|private
name|FileBaton
name|myCurrentFileBaton
decl_stmt|;
specifier|private
name|LinkedList
name|myDirs
decl_stmt|;
specifier|public
specifier|static
name|ISVNEditor
name|wrap
parameter_list|(
name|ISVNEditor
name|editor
parameter_list|,
name|SVNAdminAreaInfo
name|info
parameter_list|,
name|boolean
name|depthIsSticky
parameter_list|)
block|{
if|if
condition|(
operator|!
name|depthIsSticky
condition|)
block|{
return|return
operator|new
name|SVNAmbientDepthFilterEditor
argument_list|(
name|editor
argument_list|,
name|info
operator|.
name|getWCAccess
argument_list|()
argument_list|,
name|info
operator|.
name|getAnchor
argument_list|()
operator|.
name|getRoot
argument_list|()
argument_list|,
name|info
operator|.
name|getTargetName
argument_list|()
argument_list|)
return|;
block|}
return|return
name|editor
return|;
block|}
specifier|private
name|SVNAmbientDepthFilterEditor
parameter_list|(
name|ISVNEditor
name|delegate
parameter_list|,
name|SVNWCAccess
name|wcAccess
parameter_list|,
name|File
name|anchor
parameter_list|,
name|String
name|target
parameter_list|)
block|{
name|myDelegate
operator|=
name|delegate
expr_stmt|;
name|myWCAccess
operator|=
name|wcAccess
expr_stmt|;
name|myAnchor
operator|=
name|anchor
expr_stmt|;
name|myTarget
operator|=
name|target
expr_stmt|;
name|myDirs
operator|=
operator|new
name|LinkedList
argument_list|()
expr_stmt|;
block|}
specifier|public
name|void
name|abortEdit
parameter_list|()
throws|throws
name|SVNException
block|{
name|myDelegate
operator|.
name|abortEdit
argument_list|()
expr_stmt|;
block|}
specifier|public
name|void
name|absentDir
parameter_list|(
name|String
name|path
parameter_list|)
throws|throws
name|SVNException
block|{
if|if
condition|(
name|myCurrentDirBaton
operator|.
name|myIsAmbientlyExcluded
condition|)
block|{
return|return;
block|}
name|myDelegate
operator|.
name|absentDir
argument_list|(
name|path
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|absentFile
parameter_list|(
name|String
name|path
parameter_list|)
throws|throws
name|SVNException
block|{
if|if
condition|(
name|myCurrentDirBaton
operator|.
name|myIsAmbientlyExcluded
condition|)
block|{
return|return;
block|}
name|myDelegate
operator|.
name|absentFile
argument_list|(
name|path
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|addDir
parameter_list|(
name|String
name|path
parameter_list|,
name|String
name|copyFromPath
parameter_list|,
name|long
name|copyFromRevision
parameter_list|)
throws|throws
name|SVNException
block|{
name|DirBaton
name|parentBaton
init|=
name|myCurrentDirBaton
decl_stmt|;
name|myCurrentDirBaton
operator|=
name|makeDirBaton
argument_list|(
name|path
argument_list|,
name|parentBaton
argument_list|)
expr_stmt|;
if|if
condition|(
name|myCurrentDirBaton
operator|.
name|myIsAmbientlyExcluded
condition|)
block|{
return|return;
block|}
if|if
condition|(
name|path
operator|.
name|equals
argument_list|(
name|myTarget
argument_list|)
condition|)
block|{
name|myCurrentDirBaton
operator|.
name|myAmbientDepth
operator|=
name|SVNDepth
operator|.
name|INFINITY
expr_stmt|;
block|}
if|else if
condition|(
name|parentBaton
operator|.
name|myAmbientDepth
operator|==
name|SVNDepth
operator|.
name|IMMEDIATES
condition|)
block|{
name|myCurrentDirBaton
operator|.
name|myAmbientDepth
operator|=
name|SVNDepth
operator|.
name|EMPTY
expr_stmt|;
block|}
else|else
block|{
name|myCurrentDirBaton
operator|.
name|myAmbientDepth
operator|=
name|SVNDepth
operator|.
name|INFINITY
expr_stmt|;
block|}
name|myDelegate
operator|.
name|addDir
argument_list|(
name|path
argument_list|,
name|copyFromPath
argument_list|,
name|copyFromRevision
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|addFile
parameter_list|(
name|String
name|path
parameter_list|,
name|String
name|copyFromPath
parameter_list|,
name|long
name|copyFromRevision
parameter_list|)
throws|throws
name|SVNException
block|{
name|myCurrentFileBaton
operator|=
name|makeFileBaton
argument_list|(
name|myCurrentDirBaton
argument_list|,
name|path
argument_list|)
expr_stmt|;
if|if
condition|(
name|myCurrentFileBaton
operator|.
name|myIsAmbientlyExcluded
condition|)
block|{
return|return;
block|}
name|myDelegate
operator|.
name|addFile
argument_list|(
name|path
argument_list|,
name|copyFromPath
argument_list|,
name|copyFromRevision
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|changeDirProperty
parameter_list|(
name|String
name|name
parameter_list|,
name|SVNPropertyValue
name|value
parameter_list|)
throws|throws
name|SVNException
block|{
if|if
condition|(
name|myCurrentDirBaton
operator|.
name|myIsAmbientlyExcluded
condition|)
block|{
return|return;
block|}
name|myDelegate
operator|.
name|changeDirProperty
argument_list|(
name|name
argument_list|,
name|value
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|changeFileProperty
parameter_list|(
name|String
name|path
parameter_list|,
name|String
name|propertyName
parameter_list|,
name|SVNPropertyValue
name|propertyValue
parameter_list|)
throws|throws
name|SVNException
block|{
if|if
condition|(
name|myCurrentFileBaton
operator|.
name|myIsAmbientlyExcluded
condition|)
block|{
return|return;
block|}
name|myDelegate
operator|.
name|changeFileProperty
argument_list|(
name|path
argument_list|,
name|propertyName
argument_list|,
name|propertyValue
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|closeDir
parameter_list|()
throws|throws
name|SVNException
block|{
name|DirBaton
name|closedDir
init|=
operator|(
name|SVNAmbientDepthFilterEditor
operator|.
name|DirBaton
operator|)
name|myDirs
operator|.
name|removeLast
argument_list|()
decl_stmt|;
if|if
condition|(
name|myDirs
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|myCurrentDirBaton
operator|=
literal|null
expr_stmt|;
block|}
else|else
block|{
name|myCurrentDirBaton
operator|=
operator|(
name|SVNAmbientDepthFilterEditor
operator|.
name|DirBaton
operator|)
name|myDirs
operator|.
name|getLast
argument_list|()
expr_stmt|;
block|}
if|if
condition|(
name|closedDir
operator|.
name|myIsAmbientlyExcluded
condition|)
block|{
return|return;
block|}
name|myDelegate
operator|.
name|closeDir
argument_list|()
expr_stmt|;
block|}
specifier|public
name|SVNCommitInfo
name|closeEdit
parameter_list|()
throws|throws
name|SVNException
block|{
return|return
name|myDelegate
operator|.
name|closeEdit
argument_list|()
return|;
block|}
specifier|public
name|void
name|closeFile
parameter_list|(
name|String
name|path
parameter_list|,
name|String
name|textChecksum
parameter_list|)
throws|throws
name|SVNException
block|{
if|if
condition|(
name|myCurrentFileBaton
operator|.
name|myIsAmbientlyExcluded
condition|)
block|{
return|return;
block|}
name|myDelegate
operator|.
name|closeFile
argument_list|(
name|path
argument_list|,
name|textChecksum
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|deleteEntry
parameter_list|(
name|String
name|path
parameter_list|,
name|long
name|revision
parameter_list|)
throws|throws
name|SVNException
block|{
if|if
condition|(
name|myCurrentDirBaton
operator|.
name|myIsAmbientlyExcluded
condition|)
block|{
return|return;
block|}
if|if
condition|(
name|myCurrentDirBaton
operator|.
name|myAmbientDepth
operator|.
name|compareTo
argument_list|(
name|SVNDepth
operator|.
name|IMMEDIATES
argument_list|)
operator|<
literal|0
condition|)
block|{
name|File
name|fullPath
init|=
operator|new
name|File
argument_list|(
name|myAnchor
argument_list|,
name|path
argument_list|)
decl_stmt|;
name|SVNEntry
name|entry
init|=
name|myWCAccess
operator|.
name|getEntry
argument_list|(
name|fullPath
argument_list|,
literal|false
argument_list|)
decl_stmt|;
if|if
condition|(
name|entry
operator|==
literal|null
condition|)
block|{
return|return;
block|}
block|}
name|myDelegate
operator|.
name|deleteEntry
argument_list|(
name|path
argument_list|,
name|revision
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|openDir
parameter_list|(
name|String
name|path
parameter_list|,
name|long
name|revision
parameter_list|)
throws|throws
name|SVNException
block|{
name|DirBaton
name|parentBaton
init|=
name|myCurrentDirBaton
decl_stmt|;
name|myCurrentDirBaton
operator|=
name|makeDirBaton
argument_list|(
name|path
argument_list|,
name|parentBaton
argument_list|)
expr_stmt|;
if|if
condition|(
name|myCurrentDirBaton
operator|.
name|myIsAmbientlyExcluded
condition|)
block|{
return|return;
block|}
name|myDelegate
operator|.
name|openDir
argument_list|(
name|path
argument_list|,
name|revision
argument_list|)
expr_stmt|;
name|SVNEntry
name|entry
init|=
name|myWCAccess
operator|.
name|getEntry
argument_list|(
name|myCurrentDirBaton
operator|.
name|myPath
argument_list|,
literal|false
argument_list|)
decl_stmt|;
if|if
condition|(
name|entry
operator|!=
literal|null
condition|)
block|{
name|myCurrentDirBaton
operator|.
name|myAmbientDepth
operator|=
name|entry
operator|.
name|getDepth
argument_list|()
expr_stmt|;
block|}
block|}
specifier|public
name|void
name|openFile
parameter_list|(
name|String
name|path
parameter_list|,
name|long
name|revision
parameter_list|)
throws|throws
name|SVNException
block|{
name|myCurrentFileBaton
operator|=
name|makeFileBaton
argument_list|(
name|myCurrentDirBaton
argument_list|,
name|path
argument_list|)
expr_stmt|;
if|if
condition|(
name|myCurrentFileBaton
operator|.
name|myIsAmbientlyExcluded
condition|)
block|{
return|return;
block|}
name|myDelegate
operator|.
name|openFile
argument_list|(
name|path
argument_list|,
name|revision
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|openRoot
parameter_list|(
name|long
name|revision
parameter_list|)
throws|throws
name|SVNException
block|{
name|myCurrentDirBaton
operator|=
name|makeDirBaton
argument_list|(
literal|null
argument_list|,
literal|null
argument_list|)
expr_stmt|;
if|if
condition|(
name|myCurrentDirBaton
operator|.
name|myIsAmbientlyExcluded
condition|)
block|{
return|return;
block|}
if|if
condition|(
name|myTarget
operator|==
literal|null
operator|||
literal|""
operator|.
name|equals
argument_list|(
name|myTarget
argument_list|)
condition|)
block|{
name|SVNEntry
name|entry
init|=
name|myWCAccess
operator|.
name|getEntry
argument_list|(
name|myCurrentDirBaton
operator|.
name|myPath
argument_list|,
literal|false
argument_list|)
decl_stmt|;
if|if
condition|(
name|entry
operator|!=
literal|null
condition|)
block|{
name|myCurrentDirBaton
operator|.
name|myAmbientDepth
operator|=
name|entry
operator|.
name|getDepth
argument_list|()
expr_stmt|;
block|}
block|}
name|myDelegate
operator|.
name|openRoot
argument_list|(
name|revision
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|targetRevision
parameter_list|(
name|long
name|revision
parameter_list|)
throws|throws
name|SVNException
block|{
name|myDelegate
operator|.
name|targetRevision
argument_list|(
name|revision
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|applyTextDelta
parameter_list|(
name|String
name|path
parameter_list|,
name|String
name|baseChecksum
parameter_list|)
throws|throws
name|SVNException
block|{
if|if
condition|(
name|myCurrentFileBaton
operator|.
name|myIsAmbientlyExcluded
condition|)
block|{
return|return;
block|}
name|myDelegate
operator|.
name|applyTextDelta
argument_list|(
name|path
argument_list|,
name|baseChecksum
argument_list|)
expr_stmt|;
block|}
specifier|public
name|OutputStream
name|textDeltaChunk
parameter_list|(
name|String
name|path
parameter_list|,
name|SVNDiffWindow
name|diffWindow
parameter_list|)
throws|throws
name|SVNException
block|{
if|if
condition|(
name|myCurrentFileBaton
operator|.
name|myIsAmbientlyExcluded
condition|)
block|{
return|return
name|SVNFileUtil
operator|.
name|DUMMY_OUT
return|;
block|}
return|return
name|myDelegate
operator|.
name|textDeltaChunk
argument_list|(
name|path
argument_list|,
name|diffWindow
argument_list|)
return|;
block|}
specifier|public
name|void
name|textDeltaEnd
parameter_list|(
name|String
name|path
parameter_list|)
throws|throws
name|SVNException
block|{
if|if
condition|(
name|myCurrentFileBaton
operator|.
name|myIsAmbientlyExcluded
condition|)
block|{
return|return;
block|}
name|myDelegate
operator|.
name|textDeltaEnd
argument_list|(
name|path
argument_list|)
expr_stmt|;
block|}
specifier|private
name|FileBaton
name|makeFileBaton
parameter_list|(
name|DirBaton
name|parentBaton
parameter_list|,
name|String
name|path
parameter_list|)
throws|throws
name|SVNException
block|{
if|if
condition|(
name|path
operator|==
literal|null
condition|)
block|{
name|SVNErrorMessage
name|err
init|=
name|SVNErrorMessage
operator|.
name|create
argument_list|(
name|SVNErrorCode
operator|.
name|UNKNOWN
argument_list|,
literal|"aborting in SVNAmbientDepthFilterEditor.makeFileBation(): path == null"
argument_list|)
decl_stmt|;
name|SVNErrorManager
operator|.
name|error
argument_list|(
name|err
argument_list|,
name|SVNLogType
operator|.
name|DEFAULT
argument_list|)
expr_stmt|;
block|}
name|FileBaton
name|fileBaton
init|=
operator|new
name|FileBaton
argument_list|()
decl_stmt|;
if|if
condition|(
name|parentBaton
operator|.
name|myIsAmbientlyExcluded
condition|)
block|{
name|fileBaton
operator|.
name|myIsAmbientlyExcluded
operator|=
literal|true
expr_stmt|;
return|return
name|fileBaton
return|;
block|}
if|if
condition|(
name|parentBaton
operator|.
name|myAmbientDepth
operator|==
name|SVNDepth
operator|.
name|EMPTY
condition|)
block|{
name|SVNEntry
name|entry
init|=
name|myWCAccess
operator|.
name|getEntry
argument_list|(
operator|new
name|File
argument_list|(
name|myAnchor
argument_list|,
name|path
argument_list|)
argument_list|,
literal|false
argument_list|)
decl_stmt|;
if|if
condition|(
name|entry
operator|==
literal|null
condition|)
block|{
name|fileBaton
operator|.
name|myIsAmbientlyExcluded
operator|=
literal|true
expr_stmt|;
block|}
block|}
return|return
name|fileBaton
return|;
block|}
specifier|private
name|DirBaton
name|makeDirBaton
parameter_list|(
name|String
name|path
parameter_list|,
name|DirBaton
name|parentBaton
parameter_list|)
throws|throws
name|SVNException
block|{
if|if
condition|(
name|parentBaton
operator|!=
literal|null
operator|&&
name|path
operator|==
literal|null
condition|)
block|{
name|SVNErrorMessage
name|err
init|=
name|SVNErrorMessage
operator|.
name|create
argument_list|(
name|SVNErrorCode
operator|.
name|UNKNOWN
argument_list|,
literal|"aborting in SVNAmbientDepthFilterEditor.makeDirBation(): parentBaton != null"
operator|+
literal|" while path == null"
argument_list|)
decl_stmt|;
name|SVNErrorManager
operator|.
name|error
argument_list|(
name|err
argument_list|,
name|SVNLogType
operator|.
name|DEFAULT
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|parentBaton
operator|!=
literal|null
operator|&&
name|parentBaton
operator|.
name|myIsAmbientlyExcluded
condition|)
block|{
name|myDirs
operator|.
name|addLast
argument_list|(
name|parentBaton
argument_list|)
expr_stmt|;
return|return
name|parentBaton
return|;
block|}
name|DirBaton
name|dirBaton
init|=
operator|new
name|DirBaton
argument_list|()
decl_stmt|;
name|myDirs
operator|.
name|addLast
argument_list|(
name|dirBaton
argument_list|)
expr_stmt|;
name|dirBaton
operator|.
name|myPath
operator|=
name|myAnchor
expr_stmt|;
if|if
condition|(
name|path
operator|!=
literal|null
condition|)
block|{
name|dirBaton
operator|.
name|myPath
operator|=
operator|new
name|File
argument_list|(
name|myAnchor
argument_list|,
name|path
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|parentBaton
operator|!=
literal|null
operator|&&
operator|(
name|parentBaton
operator|.
name|myAmbientDepth
operator|==
name|SVNDepth
operator|.
name|EMPTY
operator|||
name|parentBaton
operator|.
name|myAmbientDepth
operator|==
name|SVNDepth
operator|.
name|FILES
operator|)
condition|)
block|{
name|SVNEntry
name|entry
init|=
name|myWCAccess
operator|.
name|getEntry
argument_list|(
name|dirBaton
operator|.
name|myPath
argument_list|,
literal|false
argument_list|)
decl_stmt|;
if|if
condition|(
name|entry
operator|==
literal|null
condition|)
block|{
name|dirBaton
operator|.
name|myIsAmbientlyExcluded
operator|=
literal|true
expr_stmt|;
return|return
name|dirBaton
return|;
block|}
block|}
name|dirBaton
operator|.
name|myAmbientDepth
operator|=
name|SVNDepth
operator|.
name|UNKNOWN
expr_stmt|;
return|return
name|dirBaton
return|;
block|}
specifier|private
class|class
name|DirBaton
block|{
name|boolean
name|myIsAmbientlyExcluded
decl_stmt|;
name|SVNDepth
name|myAmbientDepth
decl_stmt|;
name|File
name|myPath
decl_stmt|;
block|}
specifier|private
class|class
name|FileBaton
block|{
name|boolean
name|myIsAmbientlyExcluded
decl_stmt|;
block|}
block|}
end_class

end_unit

