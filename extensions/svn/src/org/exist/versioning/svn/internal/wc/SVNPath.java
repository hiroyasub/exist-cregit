begin_unit|revision:1.0.0;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * ====================================================================  * Copyright (c) 2004-2010 TMate Software Ltd.  All rights reserved.  *  * This software is licensed as described in the file COPYING, which  * you should have received as part of this distribution.  The terms  * are also available at http://svnkit.com/license.html.  * If newer versions of this license are posted there, you may use a  * newer version instead, at your option.  * ====================================================================  */
end_comment

begin_package
package|package
name|org
operator|.
name|exist
operator|.
name|versioning
operator|.
name|svn
operator|.
name|internal
operator|.
name|wc
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|File
import|;
end_import

begin_import
import|import
name|org
operator|.
name|tmatesoft
operator|.
name|svn
operator|.
name|core
operator|.
name|SVNErrorCode
import|;
end_import

begin_import
import|import
name|org
operator|.
name|tmatesoft
operator|.
name|svn
operator|.
name|core
operator|.
name|SVNErrorMessage
import|;
end_import

begin_import
import|import
name|org
operator|.
name|tmatesoft
operator|.
name|svn
operator|.
name|core
operator|.
name|SVNException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|tmatesoft
operator|.
name|svn
operator|.
name|core
operator|.
name|SVNURL
import|;
end_import

begin_import
import|import
name|org
operator|.
name|tmatesoft
operator|.
name|svn
operator|.
name|core
operator|.
name|internal
operator|.
name|util
operator|.
name|SVNEncodingUtil
import|;
end_import

begin_import
import|import
name|org
operator|.
name|tmatesoft
operator|.
name|svn
operator|.
name|core
operator|.
name|internal
operator|.
name|util
operator|.
name|SVNPathUtil
import|;
end_import

begin_import
import|import
name|org
operator|.
name|tmatesoft
operator|.
name|svn
operator|.
name|core
operator|.
name|wc
operator|.
name|SVNRevision
import|;
end_import

begin_import
import|import
name|org
operator|.
name|tmatesoft
operator|.
name|svn
operator|.
name|util
operator|.
name|SVNLogType
import|;
end_import

begin_comment
comment|/**  * @version 1.3  * @author  TMate Software Ltd.  */
end_comment

begin_class
specifier|public
class|class
name|SVNPath
block|{
specifier|private
name|boolean
name|myHasPegRevision
decl_stmt|;
specifier|private
name|String
name|myTarget
decl_stmt|;
specifier|private
name|SVNRevision
name|myPegRevision
init|=
name|SVNRevision
operator|.
name|UNDEFINED
decl_stmt|;
specifier|private
name|File
name|myFile
decl_stmt|;
specifier|public
name|SVNPath
parameter_list|(
name|String
name|target
parameter_list|)
throws|throws
name|SVNException
block|{
name|this
argument_list|(
name|target
argument_list|,
literal|false
argument_list|)
expr_stmt|;
block|}
specifier|public
name|SVNPath
parameter_list|(
name|String
name|target
parameter_list|,
name|boolean
name|hasPegRevision
parameter_list|)
throws|throws
name|SVNException
block|{
name|myTarget
operator|=
name|target
expr_stmt|;
name|myHasPegRevision
operator|=
name|hasPegRevision
expr_stmt|;
if|if
condition|(
name|myHasPegRevision
condition|)
block|{
name|parsePegRevision
argument_list|(
literal|true
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|parsePegRevision
argument_list|(
literal|false
argument_list|)
expr_stmt|;
block|}
name|myTarget
operator|=
name|SVNPathUtil
operator|.
name|canonicalizePath
argument_list|(
name|myTarget
argument_list|)
expr_stmt|;
name|assertControlChars
argument_list|(
name|isURL
argument_list|()
condition|?
name|SVNEncodingUtil
operator|.
name|uriDecode
argument_list|(
name|myTarget
argument_list|)
else|:
name|myTarget
argument_list|)
expr_stmt|;
block|}
specifier|public
name|String
name|getTarget
parameter_list|()
block|{
return|return
name|myTarget
return|;
block|}
specifier|public
name|boolean
name|isURL
parameter_list|()
block|{
return|return
name|SVNPathUtil
operator|.
name|isURL
argument_list|(
name|myTarget
argument_list|)
return|;
block|}
specifier|public
name|boolean
name|isFile
parameter_list|()
block|{
return|return
operator|!
name|isURL
argument_list|()
return|;
block|}
specifier|public
name|File
name|getFile
parameter_list|()
block|{
if|if
condition|(
name|myFile
operator|!=
literal|null
condition|)
block|{
return|return
name|myFile
return|;
block|}
if|if
condition|(
name|isFile
argument_list|()
condition|)
block|{
return|return
operator|new
name|File
argument_list|(
name|myTarget
argument_list|)
operator|.
name|getAbsoluteFile
argument_list|()
return|;
block|}
return|return
literal|null
return|;
block|}
specifier|public
name|SVNURL
name|getURL
parameter_list|()
throws|throws
name|SVNException
block|{
if|if
condition|(
name|isURL
argument_list|()
condition|)
block|{
return|return
name|SVNURL
operator|.
name|parseURIEncoded
argument_list|(
name|myTarget
argument_list|)
return|;
block|}
return|return
literal|null
return|;
block|}
specifier|public
name|SVNRevision
name|getPegRevision
parameter_list|()
block|{
return|return
name|myPegRevision
return|;
block|}
specifier|private
name|void
name|parsePegRevision
parameter_list|(
name|boolean
name|use
parameter_list|)
throws|throws
name|SVNException
block|{
name|int
name|index
init|=
name|myTarget
operator|.
name|lastIndexOf
argument_list|(
literal|'@'
argument_list|)
decl_stmt|;
if|if
condition|(
name|index
operator|>
literal|0
condition|)
block|{
name|String
name|revStr
init|=
name|myTarget
operator|.
name|substring
argument_list|(
name|index
operator|+
literal|1
argument_list|)
decl_stmt|;
if|if
condition|(
name|revStr
operator|.
name|indexOf
argument_list|(
literal|'/'
argument_list|)
operator|>=
literal|0
condition|)
block|{
return|return;
block|}
if|if
condition|(
name|revStr
operator|.
name|length
argument_list|()
operator|==
literal|0
condition|)
block|{
if|if
condition|(
name|use
condition|)
block|{
name|myPegRevision
operator|=
name|isURL
argument_list|()
condition|?
name|SVNRevision
operator|.
name|HEAD
else|:
name|SVNRevision
operator|.
name|BASE
expr_stmt|;
block|}
name|myTarget
operator|=
name|myTarget
operator|.
name|substring
argument_list|(
literal|0
argument_list|,
name|index
argument_list|)
expr_stmt|;
return|return;
block|}
if|if
condition|(
name|isURL
argument_list|()
operator|&&
name|revStr
operator|.
name|length
argument_list|()
operator|>
literal|6
operator|&&
name|revStr
operator|.
name|toLowerCase
argument_list|()
operator|.
name|startsWith
argument_list|(
literal|"%7b"
argument_list|)
operator|&&
name|revStr
operator|.
name|toLowerCase
argument_list|()
operator|.
name|endsWith
argument_list|(
literal|"%7d"
argument_list|)
condition|)
block|{
name|revStr
operator|=
name|SVNEncodingUtil
operator|.
name|uriDecode
argument_list|(
name|revStr
argument_list|)
expr_stmt|;
block|}
name|SVNRevision
name|revision
init|=
name|SVNRevision
operator|.
name|parse
argument_list|(
name|revStr
argument_list|)
decl_stmt|;
if|if
condition|(
name|revision
operator|!=
name|SVNRevision
operator|.
name|UNDEFINED
condition|)
block|{
if|if
condition|(
name|use
condition|)
block|{
name|myPegRevision
operator|=
name|revision
expr_stmt|;
block|}
name|myTarget
operator|=
name|myTarget
operator|.
name|substring
argument_list|(
literal|0
argument_list|,
name|index
argument_list|)
expr_stmt|;
return|return;
block|}
name|SVNErrorMessage
name|err
init|=
name|SVNErrorMessage
operator|.
name|create
argument_list|(
name|SVNErrorCode
operator|.
name|CL_ARG_PARSING_ERROR
argument_list|,
literal|"Syntax error parsing revision ''{0}''"
argument_list|,
name|myTarget
operator|.
name|substring
argument_list|(
name|index
operator|+
literal|1
argument_list|)
argument_list|)
decl_stmt|;
name|SVNErrorManager
operator|.
name|error
argument_list|(
name|err
argument_list|,
name|SVNLogType
operator|.
name|DEFAULT
argument_list|)
expr_stmt|;
block|}
if|else if
condition|(
name|index
operator|==
literal|0
condition|)
block|{
name|SVNErrorMessage
name|err
init|=
name|SVNErrorMessage
operator|.
name|create
argument_list|(
name|SVNErrorCode
operator|.
name|BAD_FILENAME
argument_list|,
literal|"''{0}'' is just a peg revision. May be try ''{0}@'' instead?"
argument_list|,
name|myTarget
argument_list|)
decl_stmt|;
name|SVNErrorManager
operator|.
name|error
argument_list|(
name|err
argument_list|,
name|SVNLogType
operator|.
name|DEFAULT
argument_list|)
expr_stmt|;
block|}
block|}
specifier|protected
specifier|static
name|void
name|assertControlChars
parameter_list|(
name|String
name|path
parameter_list|)
throws|throws
name|SVNException
block|{
if|if
condition|(
name|path
operator|!=
literal|null
condition|)
block|{
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|path
operator|.
name|length
argument_list|()
condition|;
name|i
operator|++
control|)
block|{
name|char
name|ch
init|=
name|path
operator|.
name|charAt
argument_list|(
name|i
argument_list|)
decl_stmt|;
name|String
name|code
init|=
name|Integer
operator|.
name|toHexString
argument_list|(
name|ch
argument_list|)
decl_stmt|;
if|if
condition|(
name|code
operator|.
name|length
argument_list|()
operator|<
literal|2
condition|)
block|{
name|code
operator|=
literal|"0"
operator|+
name|code
expr_stmt|;
block|}
if|if
condition|(
name|SVNEncodingUtil
operator|.
name|isASCIIControlChar
argument_list|(
name|ch
argument_list|)
condition|)
block|{
name|SVNErrorMessage
name|err
init|=
name|SVNErrorMessage
operator|.
name|create
argument_list|(
name|SVNErrorCode
operator|.
name|FS_PATH_SYNTAX
argument_list|,
literal|"Invalid control character '0x"
operator|+
name|code
operator|+
literal|"' in path '"
operator|+
name|path
operator|+
literal|"'"
argument_list|)
decl_stmt|;
name|SVNErrorManager
operator|.
name|error
argument_list|(
name|err
argument_list|,
name|SVNLogType
operator|.
name|DEFAULT
argument_list|)
expr_stmt|;
block|}
block|}
block|}
return|return;
block|}
block|}
end_class

end_unit

