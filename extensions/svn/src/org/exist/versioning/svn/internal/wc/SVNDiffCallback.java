begin_unit|revision:1.0.0;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * ====================================================================  * Copyright (c) 2004-2010 TMate Software Ltd.  All rights reserved.  *  * This software is licensed as described in the file COPYING, which  * you should have received as part of this distribution.  The terms  * are also available at http://svnkit.com/license.html  * If newer versions of this license are posted there, you may use a  * newer version instead, at your option.  * ====================================================================  */
end_comment

begin_package
package|package
name|org
operator|.
name|exist
operator|.
name|versioning
operator|.
name|svn
operator|.
name|internal
operator|.
name|wc
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|File
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|OutputStream
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|versioning
operator|.
name|svn
operator|.
name|internal
operator|.
name|wc
operator|.
name|admin
operator|.
name|SVNAdminArea
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|versioning
operator|.
name|svn
operator|.
name|wc
operator|.
name|DefaultSVNDiffGenerator
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|versioning
operator|.
name|svn
operator|.
name|wc
operator|.
name|SVNStatusType
import|;
end_import

begin_import
import|import
name|org
operator|.
name|tmatesoft
operator|.
name|svn
operator|.
name|core
operator|.
name|SVNException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|tmatesoft
operator|.
name|svn
operator|.
name|core
operator|.
name|SVNProperties
import|;
end_import

begin_import
import|import
name|org
operator|.
name|tmatesoft
operator|.
name|svn
operator|.
name|core
operator|.
name|SVNProperty
import|;
end_import

begin_import
import|import
name|org
operator|.
name|tmatesoft
operator|.
name|svn
operator|.
name|core
operator|.
name|wc
operator|.
name|ISVNDiffGenerator
import|;
end_import

begin_comment
comment|/**  * @version 1.3  * @author  TMate Software Ltd.  */
end_comment

begin_class
specifier|public
class|class
name|SVNDiffCallback
extends|extends
name|AbstractDiffCallback
block|{
specifier|private
name|ISVNDiffGenerator
name|myGenerator
decl_stmt|;
specifier|private
name|OutputStream
name|myResult
decl_stmt|;
specifier|private
name|long
name|myRevision2
decl_stmt|;
specifier|private
name|long
name|myRevision1
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|SVNStatusType
index|[]
name|EMPTY_STATUS
init|=
block|{
name|SVNStatusType
operator|.
name|UNKNOWN
block|,
name|SVNStatusType
operator|.
name|UNKNOWN
block|}
decl_stmt|;
specifier|public
name|SVNDiffCallback
parameter_list|(
name|SVNAdminArea
name|adminArea
parameter_list|,
name|ISVNDiffGenerator
name|generator
parameter_list|,
name|long
name|rev1
parameter_list|,
name|long
name|rev2
parameter_list|,
name|OutputStream
name|result
parameter_list|)
block|{
name|super
argument_list|(
name|adminArea
argument_list|)
expr_stmt|;
name|myGenerator
operator|=
name|generator
expr_stmt|;
name|myResult
operator|=
name|result
expr_stmt|;
name|myRevision1
operator|=
name|rev1
expr_stmt|;
name|myRevision2
operator|=
name|rev2
expr_stmt|;
block|}
specifier|public
name|File
name|createTempDirectory
parameter_list|()
throws|throws
name|SVNException
block|{
return|return
name|myGenerator
operator|.
name|createTempDirectory
argument_list|()
return|;
block|}
specifier|public
name|boolean
name|isDiffUnversioned
parameter_list|()
block|{
return|return
name|myGenerator
operator|.
name|isDiffUnversioned
argument_list|()
return|;
block|}
specifier|public
name|boolean
name|isDiffCopiedAsAdded
parameter_list|()
block|{
return|return
name|myGenerator
operator|.
name|isDiffCopied
argument_list|()
return|;
block|}
specifier|public
name|SVNStatusType
name|directoryAdded
parameter_list|(
name|String
name|path
parameter_list|,
name|long
name|revision
parameter_list|,
name|boolean
index|[]
name|isTreeConflicted
parameter_list|)
throws|throws
name|SVNException
block|{
name|setIsConflicted
argument_list|(
name|isTreeConflicted
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|myGenerator
operator|.
name|displayAddedDirectory
argument_list|(
name|getDisplayPath
argument_list|(
name|path
argument_list|)
argument_list|,
name|getRevision
argument_list|(
name|myRevision1
argument_list|)
argument_list|,
name|getRevision
argument_list|(
name|revision
argument_list|)
argument_list|)
expr_stmt|;
return|return
name|SVNStatusType
operator|.
name|UNKNOWN
return|;
block|}
specifier|public
name|SVNStatusType
name|directoryDeleted
parameter_list|(
name|String
name|path
parameter_list|)
throws|throws
name|SVNException
block|{
name|myGenerator
operator|.
name|displayDeletedDirectory
argument_list|(
name|getDisplayPath
argument_list|(
name|path
argument_list|)
argument_list|,
name|getRevision
argument_list|(
name|myRevision1
argument_list|)
argument_list|,
name|getRevision
argument_list|(
name|myRevision2
argument_list|)
argument_list|)
expr_stmt|;
return|return
name|SVNStatusType
operator|.
name|UNKNOWN
return|;
block|}
specifier|public
name|SVNStatusType
index|[]
name|fileAdded
parameter_list|(
name|String
name|path
parameter_list|,
name|File
name|file1
parameter_list|,
name|File
name|file2
parameter_list|,
name|long
name|revision1
parameter_list|,
name|long
name|revision2
parameter_list|,
name|String
name|mimeType1
parameter_list|,
name|String
name|mimeType2
parameter_list|,
name|SVNProperties
name|originalProperties
parameter_list|,
name|SVNProperties
name|diff
parameter_list|,
name|boolean
index|[]
name|isTreeConflicted
parameter_list|)
throws|throws
name|SVNException
block|{
if|if
condition|(
name|file2
operator|!=
literal|null
condition|)
block|{
name|boolean
name|useDefaultEncoding
init|=
name|defineEncoding
argument_list|(
name|originalProperties
argument_list|,
name|diff
argument_list|)
decl_stmt|;
name|myGenerator
operator|.
name|displayFileDiff
argument_list|(
name|getDisplayPath
argument_list|(
name|path
argument_list|)
argument_list|,
literal|null
argument_list|,
name|file2
argument_list|,
name|getRevision
argument_list|(
name|revision1
argument_list|)
argument_list|,
name|getRevision
argument_list|(
name|revision2
argument_list|)
argument_list|,
name|mimeType1
argument_list|,
name|mimeType2
argument_list|,
name|myResult
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|useDefaultEncoding
condition|)
block|{
name|myGenerator
operator|.
name|setEncoding
argument_list|(
literal|null
argument_list|)
expr_stmt|;
block|}
block|}
if|if
condition|(
name|diff
operator|!=
literal|null
operator|&&
operator|!
name|diff
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|propertiesChanged
argument_list|(
name|path
argument_list|,
name|originalProperties
argument_list|,
name|diff
argument_list|,
literal|null
argument_list|)
expr_stmt|;
block|}
return|return
name|EMPTY_STATUS
return|;
block|}
specifier|public
name|SVNStatusType
index|[]
name|fileChanged
parameter_list|(
name|String
name|path
parameter_list|,
name|File
name|file1
parameter_list|,
name|File
name|file2
parameter_list|,
name|long
name|revision1
parameter_list|,
name|long
name|revision2
parameter_list|,
name|String
name|mimeType1
parameter_list|,
name|String
name|mimeType2
parameter_list|,
name|SVNProperties
name|originalProperties
parameter_list|,
name|SVNProperties
name|diff
parameter_list|,
name|boolean
index|[]
name|isTreeConflicted
parameter_list|)
throws|throws
name|SVNException
block|{
if|if
condition|(
name|file1
operator|!=
literal|null
condition|)
block|{
name|boolean
name|useDefaultEncoding
init|=
name|defineEncoding
argument_list|(
name|originalProperties
argument_list|,
name|diff
argument_list|)
decl_stmt|;
name|myGenerator
operator|.
name|displayFileDiff
argument_list|(
name|getDisplayPath
argument_list|(
name|path
argument_list|)
argument_list|,
name|file1
argument_list|,
name|file2
argument_list|,
name|getRevision
argument_list|(
name|revision1
argument_list|)
argument_list|,
name|getRevision
argument_list|(
name|revision2
argument_list|)
argument_list|,
name|mimeType1
argument_list|,
name|mimeType2
argument_list|,
name|myResult
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|useDefaultEncoding
condition|)
block|{
name|myGenerator
operator|.
name|setEncoding
argument_list|(
literal|null
argument_list|)
expr_stmt|;
block|}
block|}
if|if
condition|(
name|diff
operator|!=
literal|null
operator|&&
operator|!
name|diff
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|propertiesChanged
argument_list|(
name|path
argument_list|,
name|originalProperties
argument_list|,
name|diff
argument_list|,
literal|null
argument_list|)
expr_stmt|;
block|}
return|return
name|EMPTY_STATUS
return|;
block|}
specifier|public
name|SVNStatusType
name|fileDeleted
parameter_list|(
name|String
name|path
parameter_list|,
name|File
name|file1
parameter_list|,
name|File
name|file2
parameter_list|,
name|String
name|mimeType1
parameter_list|,
name|String
name|mimeType2
parameter_list|,
name|SVNProperties
name|originalProperties
parameter_list|,
name|boolean
index|[]
name|isTreeConflicted
parameter_list|)
throws|throws
name|SVNException
block|{
if|if
condition|(
name|file1
operator|!=
literal|null
condition|)
block|{
name|boolean
name|useDefaultEncoding
init|=
name|defineEncoding
argument_list|(
name|originalProperties
argument_list|,
literal|null
argument_list|)
decl_stmt|;
name|myGenerator
operator|.
name|displayFileDiff
argument_list|(
name|getDisplayPath
argument_list|(
name|path
argument_list|)
argument_list|,
name|file1
argument_list|,
name|file2
argument_list|,
name|getRevision
argument_list|(
name|myRevision1
argument_list|)
argument_list|,
name|getRevision
argument_list|(
name|myRevision2
argument_list|)
argument_list|,
name|mimeType1
argument_list|,
name|mimeType2
argument_list|,
name|myResult
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|useDefaultEncoding
condition|)
block|{
name|myGenerator
operator|.
name|setEncoding
argument_list|(
literal|null
argument_list|)
expr_stmt|;
block|}
block|}
return|return
name|SVNStatusType
operator|.
name|UNKNOWN
return|;
block|}
specifier|public
name|SVNStatusType
name|propertiesChanged
parameter_list|(
name|String
name|path
parameter_list|,
name|SVNProperties
name|originalProperties
parameter_list|,
name|SVNProperties
name|diff
parameter_list|,
name|boolean
index|[]
name|isTreeConflicted
parameter_list|)
throws|throws
name|SVNException
block|{
name|originalProperties
operator|=
name|originalProperties
operator|==
literal|null
condition|?
operator|new
name|SVNProperties
argument_list|()
else|:
name|originalProperties
expr_stmt|;
name|diff
operator|=
name|diff
operator|==
literal|null
condition|?
operator|new
name|SVNProperties
argument_list|()
else|:
name|diff
expr_stmt|;
name|SVNProperties
name|regularDiff
init|=
operator|new
name|SVNProperties
argument_list|()
decl_stmt|;
name|categorizeProperties
argument_list|(
name|diff
argument_list|,
name|regularDiff
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|)
expr_stmt|;
if|if
condition|(
name|diff
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
return|return
name|SVNStatusType
operator|.
name|UNKNOWN
return|;
block|}
name|myGenerator
operator|.
name|displayPropDiff
argument_list|(
name|getDisplayPath
argument_list|(
name|path
argument_list|)
argument_list|,
name|originalProperties
argument_list|,
name|regularDiff
argument_list|,
name|myResult
argument_list|)
expr_stmt|;
return|return
name|SVNStatusType
operator|.
name|UNKNOWN
return|;
block|}
specifier|private
name|String
name|getRevision
parameter_list|(
name|long
name|revision
parameter_list|)
block|{
if|if
condition|(
name|revision
operator|>=
literal|0
condition|)
block|{
return|return
literal|"(revision "
operator|+
name|revision
operator|+
literal|")"
return|;
block|}
return|return
literal|"(working copy)"
return|;
block|}
specifier|private
name|boolean
name|defineEncoding
parameter_list|(
name|SVNProperties
name|properties
parameter_list|,
name|SVNProperties
name|diff
parameter_list|)
block|{
if|if
condition|(
name|myGenerator
operator|instanceof
name|DefaultSVNDiffGenerator
condition|)
block|{
name|DefaultSVNDiffGenerator
name|defaultGenerator
init|=
operator|(
name|DefaultSVNDiffGenerator
operator|)
name|myGenerator
decl_stmt|;
if|if
condition|(
operator|!
name|defaultGenerator
operator|.
name|hasEncoding
argument_list|()
condition|)
block|{
name|boolean
name|hasOriginCharset
init|=
name|properties
operator|==
literal|null
condition|?
literal|false
else|:
name|properties
operator|.
name|containsName
argument_list|(
name|SVNProperty
operator|.
name|CHARSET
argument_list|)
decl_stmt|;
name|String
name|originCharset
init|=
name|properties
operator|==
literal|null
condition|?
literal|null
else|:
name|properties
operator|.
name|getStringValue
argument_list|(
name|SVNProperty
operator|.
name|CHARSET
argument_list|)
decl_stmt|;
name|boolean
name|hasChangedCharset
init|=
name|diff
operator|==
literal|null
condition|?
literal|false
else|:
name|diff
operator|.
name|containsName
argument_list|(
name|SVNProperty
operator|.
name|CHARSET
argument_list|)
decl_stmt|;
name|String
name|changedCharset
init|=
name|diff
operator|==
literal|null
condition|?
literal|null
else|:
name|diff
operator|.
name|getStringValue
argument_list|(
name|SVNProperty
operator|.
name|CHARSET
argument_list|)
decl_stmt|;
if|if
condition|(
name|hasOriginCharset
operator|||
operator|(
name|hasChangedCharset
operator|&&
name|changedCharset
operator|!=
literal|null
operator|)
condition|)
block|{
if|if
condition|(
name|originCharset
operator|!=
literal|null
condition|)
block|{
name|defaultGenerator
operator|.
name|setEncoding
argument_list|(
literal|"UTF-8"
argument_list|)
expr_stmt|;
return|return
literal|false
return|;
block|}
if|if
condition|(
name|changedCharset
operator|!=
literal|null
condition|)
block|{
name|defaultGenerator
operator|.
name|setEncoding
argument_list|(
literal|"UTF-8"
argument_list|)
expr_stmt|;
return|return
literal|false
return|;
block|}
block|}
block|}
block|}
return|return
literal|true
return|;
block|}
specifier|public
name|SVNStatusType
name|directoryDeleted
parameter_list|(
name|String
name|path
parameter_list|,
name|boolean
index|[]
name|isTreeConflicted
parameter_list|)
throws|throws
name|SVNException
block|{
name|setIsConflicted
argument_list|(
name|isTreeConflicted
argument_list|,
literal|false
argument_list|)
expr_stmt|;
return|return
name|directoryDeleted
argument_list|(
name|path
argument_list|)
return|;
block|}
specifier|public
name|void
name|directoryOpened
parameter_list|(
name|String
name|path
parameter_list|,
name|long
name|revision
parameter_list|,
name|boolean
index|[]
name|isTreeConflicted
parameter_list|)
throws|throws
name|SVNException
block|{
name|setIsConflicted
argument_list|(
name|isTreeConflicted
argument_list|,
literal|false
argument_list|)
expr_stmt|;
block|}
specifier|public
name|SVNStatusType
index|[]
name|directoryClosed
parameter_list|(
name|String
name|path
parameter_list|,
name|boolean
index|[]
name|isTreeConflicted
parameter_list|)
throws|throws
name|SVNException
block|{
name|setIsConflicted
argument_list|(
name|isTreeConflicted
argument_list|,
literal|false
argument_list|)
expr_stmt|;
return|return
name|EMPTY_STATUS
return|;
block|}
block|}
end_class

end_unit

