begin_unit|revision:1.0.0;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * ====================================================================  * Copyright (c) 2004-2010 TMate Software Ltd.  All rights reserved.  *  * This software is licensed as described in the file COPYING, which  * you should have received as part of this distribution.  The terms  * are also available at http://svnkit.com/license.html  * If newer versions of this license are posted there, you may use a  * newer version instead, at your option.  * ====================================================================  */
end_comment

begin_package
package|package
name|org
operator|.
name|exist
operator|.
name|versioning
operator|.
name|svn
operator|.
name|internal
operator|.
name|wc
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|ByteArrayOutputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|File
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|InputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|OutputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Iterator
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|org
operator|.
name|tmatesoft
operator|.
name|svn
operator|.
name|core
operator|.
name|SVNCommitInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|tmatesoft
operator|.
name|svn
operator|.
name|core
operator|.
name|SVNErrorCode
import|;
end_import

begin_import
import|import
name|org
operator|.
name|tmatesoft
operator|.
name|svn
operator|.
name|core
operator|.
name|SVNErrorMessage
import|;
end_import

begin_import
import|import
name|org
operator|.
name|tmatesoft
operator|.
name|svn
operator|.
name|core
operator|.
name|SVNException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|tmatesoft
operator|.
name|svn
operator|.
name|core
operator|.
name|SVNNodeKind
import|;
end_import

begin_import
import|import
name|org
operator|.
name|tmatesoft
operator|.
name|svn
operator|.
name|core
operator|.
name|SVNProperties
import|;
end_import

begin_import
import|import
name|org
operator|.
name|tmatesoft
operator|.
name|svn
operator|.
name|core
operator|.
name|SVNPropertyValue
import|;
end_import

begin_import
import|import
name|org
operator|.
name|tmatesoft
operator|.
name|svn
operator|.
name|core
operator|.
name|internal
operator|.
name|delta
operator|.
name|SVNDeltaCombiner
import|;
end_import

begin_import
import|import
name|org
operator|.
name|tmatesoft
operator|.
name|svn
operator|.
name|core
operator|.
name|internal
operator|.
name|io
operator|.
name|fs
operator|.
name|CountingOutputStream
import|;
end_import

begin_import
import|import
name|org
operator|.
name|tmatesoft
operator|.
name|svn
operator|.
name|core
operator|.
name|internal
operator|.
name|io
operator|.
name|fs
operator|.
name|FSEntry
import|;
end_import

begin_import
import|import
name|org
operator|.
name|tmatesoft
operator|.
name|svn
operator|.
name|core
operator|.
name|internal
operator|.
name|io
operator|.
name|fs
operator|.
name|FSFS
import|;
end_import

begin_import
import|import
name|org
operator|.
name|tmatesoft
operator|.
name|svn
operator|.
name|core
operator|.
name|internal
operator|.
name|io
operator|.
name|fs
operator|.
name|FSRepositoryUtil
import|;
end_import

begin_import
import|import
name|org
operator|.
name|tmatesoft
operator|.
name|svn
operator|.
name|core
operator|.
name|internal
operator|.
name|io
operator|.
name|fs
operator|.
name|FSRevisionNode
import|;
end_import

begin_import
import|import
name|org
operator|.
name|tmatesoft
operator|.
name|svn
operator|.
name|core
operator|.
name|internal
operator|.
name|io
operator|.
name|fs
operator|.
name|FSRevisionRoot
import|;
end_import

begin_import
import|import
name|org
operator|.
name|tmatesoft
operator|.
name|svn
operator|.
name|core
operator|.
name|internal
operator|.
name|io
operator|.
name|fs
operator|.
name|FSRoot
import|;
end_import

begin_import
import|import
name|org
operator|.
name|tmatesoft
operator|.
name|svn
operator|.
name|core
operator|.
name|internal
operator|.
name|util
operator|.
name|SVNHashMap
import|;
end_import

begin_import
import|import
name|org
operator|.
name|tmatesoft
operator|.
name|svn
operator|.
name|core
operator|.
name|internal
operator|.
name|util
operator|.
name|SVNPathUtil
import|;
end_import

begin_import
import|import
name|org
operator|.
name|tmatesoft
operator|.
name|svn
operator|.
name|core
operator|.
name|internal
operator|.
name|wc
operator|.
name|admin
operator|.
name|SVNChecksumInputStream
import|;
end_import

begin_import
import|import
name|org
operator|.
name|tmatesoft
operator|.
name|svn
operator|.
name|core
operator|.
name|io
operator|.
name|ISVNDeltaConsumer
import|;
end_import

begin_import
import|import
name|org
operator|.
name|tmatesoft
operator|.
name|svn
operator|.
name|core
operator|.
name|io
operator|.
name|ISVNEditor
import|;
end_import

begin_import
import|import
name|org
operator|.
name|tmatesoft
operator|.
name|svn
operator|.
name|core
operator|.
name|io
operator|.
name|diff
operator|.
name|SVNDeltaGenerator
import|;
end_import

begin_import
import|import
name|org
operator|.
name|tmatesoft
operator|.
name|svn
operator|.
name|core
operator|.
name|io
operator|.
name|diff
operator|.
name|SVNDiffWindow
import|;
end_import

begin_import
import|import
name|org
operator|.
name|tmatesoft
operator|.
name|svn
operator|.
name|core
operator|.
name|wc
operator|.
name|SVNRevision
import|;
end_import

begin_import
import|import
name|org
operator|.
name|tmatesoft
operator|.
name|svn
operator|.
name|util
operator|.
name|SVNDebugLog
import|;
end_import

begin_import
import|import
name|org
operator|.
name|tmatesoft
operator|.
name|svn
operator|.
name|util
operator|.
name|SVNLogType
import|;
end_import

begin_comment
comment|/**  * @version 1.3  * @author  TMate Software Ltd.  */
end_comment

begin_class
specifier|public
class|class
name|SVNDumpEditor
implements|implements
name|ISVNEditor
block|{
specifier|private
name|FSRoot
name|myRoot
decl_stmt|;
specifier|private
name|FSFS
name|myFSFS
decl_stmt|;
specifier|private
name|long
name|myTargetRevision
decl_stmt|;
specifier|private
name|long
name|myOldestDumpedRevision
decl_stmt|;
specifier|private
name|String
name|myRootPath
decl_stmt|;
specifier|private
name|OutputStream
name|myDumpStream
decl_stmt|;
specifier|private
name|boolean
name|myUseDeltas
decl_stmt|;
specifier|private
name|boolean
name|myIsVerify
decl_stmt|;
specifier|private
name|DirectoryInfo
name|myCurrentDirInfo
decl_stmt|;
specifier|private
name|SVNDeltaCombiner
name|myDeltaCombiner
decl_stmt|;
specifier|private
name|SVNDeltaGenerator
name|myDeltaGenerator
decl_stmt|;
specifier|public
name|SVNDumpEditor
parameter_list|(
name|FSFS
name|fsfs
parameter_list|,
name|FSRoot
name|root
parameter_list|,
name|long
name|toRevision
parameter_list|,
name|long
name|oldestDumpedRevision
parameter_list|,
name|String
name|rootPath
parameter_list|,
name|OutputStream
name|dumpStream
parameter_list|,
name|boolean
name|useDeltas
parameter_list|,
name|boolean
name|isVerify
parameter_list|)
block|{
name|myRoot
operator|=
name|root
expr_stmt|;
name|myFSFS
operator|=
name|fsfs
expr_stmt|;
name|myTargetRevision
operator|=
name|toRevision
expr_stmt|;
name|myOldestDumpedRevision
operator|=
name|oldestDumpedRevision
expr_stmt|;
name|myRootPath
operator|=
name|rootPath
expr_stmt|;
name|myDumpStream
operator|=
name|dumpStream
expr_stmt|;
name|myUseDeltas
operator|=
name|useDeltas
expr_stmt|;
name|myIsVerify
operator|=
name|isVerify
expr_stmt|;
block|}
specifier|public
name|void
name|reset
parameter_list|(
name|FSFS
name|fsfs
parameter_list|,
name|FSRoot
name|root
parameter_list|,
name|long
name|toRevision
parameter_list|,
name|long
name|oldestDumpedRevision
parameter_list|,
name|String
name|rootPath
parameter_list|,
name|OutputStream
name|dumpStream
parameter_list|,
name|boolean
name|useDeltas
parameter_list|,
name|boolean
name|isVerify
parameter_list|)
block|{
name|myRoot
operator|=
name|root
expr_stmt|;
name|myFSFS
operator|=
name|fsfs
expr_stmt|;
name|myTargetRevision
operator|=
name|toRevision
expr_stmt|;
name|myOldestDumpedRevision
operator|=
name|oldestDumpedRevision
expr_stmt|;
name|myRootPath
operator|=
name|rootPath
expr_stmt|;
name|myDumpStream
operator|=
name|dumpStream
expr_stmt|;
name|myUseDeltas
operator|=
name|useDeltas
expr_stmt|;
name|myIsVerify
operator|=
name|isVerify
expr_stmt|;
name|myCurrentDirInfo
operator|=
literal|null
expr_stmt|;
block|}
specifier|public
name|void
name|abortEdit
parameter_list|()
throws|throws
name|SVNException
block|{
block|}
specifier|public
name|void
name|absentDir
parameter_list|(
name|String
name|path
parameter_list|)
throws|throws
name|SVNException
block|{
block|}
specifier|public
name|void
name|absentFile
parameter_list|(
name|String
name|path
parameter_list|)
throws|throws
name|SVNException
block|{
block|}
specifier|public
name|void
name|addDir
parameter_list|(
name|String
name|path
parameter_list|,
name|String
name|copyFromPath
parameter_list|,
name|long
name|copyFromRevision
parameter_list|)
throws|throws
name|SVNException
block|{
name|DirectoryInfo
name|parent
init|=
name|myCurrentDirInfo
decl_stmt|;
name|myCurrentDirInfo
operator|=
name|createDirectoryInfo
argument_list|(
name|path
argument_list|,
name|copyFromPath
argument_list|,
name|copyFromRevision
argument_list|,
name|parent
argument_list|)
expr_stmt|;
name|boolean
name|isDeleted
init|=
name|parent
operator|.
name|myDeletedEntries
operator|.
name|containsKey
argument_list|(
name|path
argument_list|)
decl_stmt|;
name|boolean
name|isCopy
init|=
name|copyFromPath
operator|!=
literal|null
operator|&&
name|SVNRevision
operator|.
name|isValidRevisionNumber
argument_list|(
name|copyFromRevision
argument_list|)
decl_stmt|;
name|dumpNode
argument_list|(
name|path
argument_list|,
name|SVNNodeKind
operator|.
name|DIR
argument_list|,
name|isDeleted
condition|?
name|SVNAdminHelper
operator|.
name|NODE_ACTION_REPLACE
else|:
name|SVNAdminHelper
operator|.
name|NODE_ACTION_ADD
argument_list|,
name|isCopy
argument_list|,
name|isCopy
condition|?
name|copyFromPath
else|:
literal|null
argument_list|,
name|isCopy
condition|?
name|copyFromRevision
else|:
operator|-
literal|1
argument_list|)
expr_stmt|;
if|if
condition|(
name|isDeleted
condition|)
block|{
name|parent
operator|.
name|myDeletedEntries
operator|.
name|remove
argument_list|(
name|path
argument_list|)
expr_stmt|;
block|}
name|myCurrentDirInfo
operator|.
name|myIsWrittenOut
operator|=
literal|true
expr_stmt|;
block|}
specifier|public
name|void
name|addFile
parameter_list|(
name|String
name|path
parameter_list|,
name|String
name|copyFromPath
parameter_list|,
name|long
name|copyFromRevision
parameter_list|)
throws|throws
name|SVNException
block|{
name|boolean
name|isCopy
init|=
name|copyFromPath
operator|!=
literal|null
operator|&&
name|SVNRevision
operator|.
name|isValidRevisionNumber
argument_list|(
name|copyFromRevision
argument_list|)
decl_stmt|;
name|boolean
name|isDeleted
init|=
name|myCurrentDirInfo
operator|.
name|myDeletedEntries
operator|.
name|containsKey
argument_list|(
name|path
argument_list|)
decl_stmt|;
name|dumpNode
argument_list|(
name|path
argument_list|,
name|SVNNodeKind
operator|.
name|FILE
argument_list|,
name|isDeleted
condition|?
name|SVNAdminHelper
operator|.
name|NODE_ACTION_REPLACE
else|:
name|SVNAdminHelper
operator|.
name|NODE_ACTION_ADD
argument_list|,
name|isCopy
argument_list|,
name|isCopy
condition|?
name|copyFromPath
else|:
literal|null
argument_list|,
name|isCopy
condition|?
name|copyFromRevision
else|:
operator|-
literal|1
argument_list|)
expr_stmt|;
if|if
condition|(
name|isDeleted
condition|)
block|{
name|myCurrentDirInfo
operator|.
name|myDeletedEntries
operator|.
name|remove
argument_list|(
name|path
argument_list|)
expr_stmt|;
block|}
block|}
specifier|public
name|void
name|changeDirProperty
parameter_list|(
name|String
name|name
parameter_list|,
name|SVNPropertyValue
name|value
parameter_list|)
throws|throws
name|SVNException
block|{
if|if
condition|(
operator|!
name|myCurrentDirInfo
operator|.
name|myIsWrittenOut
condition|)
block|{
name|dumpNode
argument_list|(
name|myCurrentDirInfo
operator|.
name|myFullPath
argument_list|,
name|SVNNodeKind
operator|.
name|DIR
argument_list|,
name|SVNAdminHelper
operator|.
name|NODE_ACTION_CHANGE
argument_list|,
literal|false
argument_list|,
name|myCurrentDirInfo
operator|.
name|myComparePath
argument_list|,
name|myCurrentDirInfo
operator|.
name|myCompareRevision
argument_list|)
expr_stmt|;
name|myCurrentDirInfo
operator|.
name|myIsWrittenOut
operator|=
literal|true
expr_stmt|;
block|}
block|}
specifier|public
name|void
name|changeFileProperty
parameter_list|(
name|String
name|path
parameter_list|,
name|String
name|name
parameter_list|,
name|SVNPropertyValue
name|value
parameter_list|)
throws|throws
name|SVNException
block|{
block|}
specifier|public
name|void
name|closeDir
parameter_list|()
throws|throws
name|SVNException
block|{
if|if
condition|(
name|myIsVerify
condition|)
block|{
name|FSRevisionNode
name|node
init|=
name|myRoot
operator|.
name|getRevisionNode
argument_list|(
name|myCurrentDirInfo
operator|.
name|myFullPath
argument_list|)
decl_stmt|;
name|Map
name|entries
init|=
name|node
operator|.
name|getDirEntries
argument_list|(
name|myFSFS
argument_list|)
decl_stmt|;
for|for
control|(
name|Iterator
name|entriesIter
init|=
name|entries
operator|.
name|keySet
argument_list|()
operator|.
name|iterator
argument_list|()
init|;
name|entriesIter
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|String
name|entryName
init|=
operator|(
name|String
operator|)
name|entriesIter
operator|.
name|next
argument_list|()
decl_stmt|;
name|String
name|entryPath
init|=
name|SVNPathUtil
operator|.
name|append
argument_list|(
name|myCurrentDirInfo
operator|.
name|myFullPath
argument_list|,
name|entryName
argument_list|)
decl_stmt|;
name|SVNNodeKind
name|kind
init|=
name|myRoot
operator|.
name|checkNodeKind
argument_list|(
name|entryPath
argument_list|)
decl_stmt|;
name|FSRevisionNode
name|entryNode
init|=
name|myRoot
operator|.
name|getRevisionNode
argument_list|(
name|entryPath
argument_list|)
decl_stmt|;
if|if
condition|(
name|kind
operator|==
name|SVNNodeKind
operator|.
name|DIR
condition|)
block|{
name|entryNode
operator|.
name|getDirEntries
argument_list|(
name|myFSFS
argument_list|)
expr_stmt|;
block|}
if|else if
condition|(
name|kind
operator|==
name|SVNNodeKind
operator|.
name|FILE
condition|)
block|{
name|entryNode
operator|.
name|getFileLength
argument_list|()
expr_stmt|;
block|}
else|else
block|{
name|SVNErrorMessage
name|err
init|=
name|SVNErrorMessage
operator|.
name|create
argument_list|(
name|SVNErrorCode
operator|.
name|NODE_UNEXPECTED_KIND
argument_list|,
literal|"Unexpected node kind {0} for ''{1}''"
argument_list|,
operator|new
name|Object
index|[]
block|{
name|kind
block|,
name|entryPath
block|}
argument_list|)
decl_stmt|;
name|SVNErrorManager
operator|.
name|error
argument_list|(
name|err
argument_list|,
name|SVNLogType
operator|.
name|FSFS
argument_list|)
expr_stmt|;
block|}
block|}
block|}
for|for
control|(
name|Iterator
name|entries
init|=
name|myCurrentDirInfo
operator|.
name|myDeletedEntries
operator|.
name|keySet
argument_list|()
operator|.
name|iterator
argument_list|()
init|;
name|entries
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|String
name|path
init|=
operator|(
name|String
operator|)
name|entries
operator|.
name|next
argument_list|()
decl_stmt|;
name|dumpNode
argument_list|(
name|path
argument_list|,
name|SVNNodeKind
operator|.
name|UNKNOWN
argument_list|,
name|SVNAdminHelper
operator|.
name|NODE_ACTION_DELETE
argument_list|,
literal|false
argument_list|,
literal|null
argument_list|,
operator|-
literal|1
argument_list|)
expr_stmt|;
block|}
name|myCurrentDirInfo
operator|=
name|myCurrentDirInfo
operator|.
name|myParentInfo
expr_stmt|;
block|}
specifier|public
name|SVNCommitInfo
name|closeEdit
parameter_list|()
throws|throws
name|SVNException
block|{
return|return
literal|null
return|;
block|}
specifier|public
name|void
name|closeFile
parameter_list|(
name|String
name|path
parameter_list|,
name|String
name|textChecksum
parameter_list|)
throws|throws
name|SVNException
block|{
block|}
specifier|public
name|void
name|deleteEntry
parameter_list|(
name|String
name|path
parameter_list|,
name|long
name|revision
parameter_list|)
throws|throws
name|SVNException
block|{
name|myCurrentDirInfo
operator|.
name|myDeletedEntries
operator|.
name|put
argument_list|(
name|path
argument_list|,
name|path
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|openDir
parameter_list|(
name|String
name|path
parameter_list|,
name|long
name|revision
parameter_list|)
throws|throws
name|SVNException
block|{
name|DirectoryInfo
name|parent
init|=
name|myCurrentDirInfo
decl_stmt|;
name|String
name|cmpPath
init|=
literal|null
decl_stmt|;
name|long
name|cmpRev
init|=
operator|-
literal|1
decl_stmt|;
if|if
condition|(
name|parent
operator|!=
literal|null
operator|&&
name|parent
operator|.
name|myComparePath
operator|!=
literal|null
operator|&&
name|SVNRevision
operator|.
name|isValidRevisionNumber
argument_list|(
name|parent
operator|.
name|myCompareRevision
argument_list|)
condition|)
block|{
name|cmpPath
operator|=
name|SVNPathUtil
operator|.
name|append
argument_list|(
name|parent
operator|.
name|myComparePath
argument_list|,
name|SVNPathUtil
operator|.
name|tail
argument_list|(
name|path
argument_list|)
argument_list|)
expr_stmt|;
name|cmpRev
operator|=
name|parent
operator|.
name|myCompareRevision
expr_stmt|;
block|}
name|myCurrentDirInfo
operator|=
name|createDirectoryInfo
argument_list|(
name|path
argument_list|,
name|cmpPath
argument_list|,
name|cmpRev
argument_list|,
name|parent
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|openFile
parameter_list|(
name|String
name|path
parameter_list|,
name|long
name|revision
parameter_list|)
throws|throws
name|SVNException
block|{
name|String
name|cmpPath
init|=
literal|null
decl_stmt|;
name|long
name|cmpRev
init|=
operator|-
literal|1
decl_stmt|;
if|if
condition|(
name|myCurrentDirInfo
operator|!=
literal|null
operator|&&
name|myCurrentDirInfo
operator|.
name|myComparePath
operator|!=
literal|null
operator|&&
name|SVNRevision
operator|.
name|isValidRevisionNumber
argument_list|(
name|myCurrentDirInfo
operator|.
name|myCompareRevision
argument_list|)
condition|)
block|{
name|cmpPath
operator|=
name|SVNPathUtil
operator|.
name|append
argument_list|(
name|myCurrentDirInfo
operator|.
name|myComparePath
argument_list|,
name|SVNPathUtil
operator|.
name|tail
argument_list|(
name|path
argument_list|)
argument_list|)
expr_stmt|;
name|cmpRev
operator|=
name|myCurrentDirInfo
operator|.
name|myCompareRevision
expr_stmt|;
block|}
name|dumpNode
argument_list|(
name|path
argument_list|,
name|SVNNodeKind
operator|.
name|FILE
argument_list|,
name|SVNAdminHelper
operator|.
name|NODE_ACTION_CHANGE
argument_list|,
literal|false
argument_list|,
name|cmpPath
argument_list|,
name|cmpRev
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|openRoot
parameter_list|(
name|long
name|revision
parameter_list|)
throws|throws
name|SVNException
block|{
name|myCurrentDirInfo
operator|=
name|createDirectoryInfo
argument_list|(
literal|null
argument_list|,
literal|null
argument_list|,
operator|-
literal|1
argument_list|,
literal|null
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|targetRevision
parameter_list|(
name|long
name|revision
parameter_list|)
throws|throws
name|SVNException
block|{
block|}
specifier|public
name|void
name|applyTextDelta
parameter_list|(
name|String
name|path
parameter_list|,
name|String
name|baseChecksum
parameter_list|)
throws|throws
name|SVNException
block|{
block|}
specifier|public
name|OutputStream
name|textDeltaChunk
parameter_list|(
name|String
name|path
parameter_list|,
name|SVNDiffWindow
name|diffWindow
parameter_list|)
throws|throws
name|SVNException
block|{
return|return
literal|null
return|;
block|}
specifier|public
name|void
name|textDeltaEnd
parameter_list|(
name|String
name|path
parameter_list|)
throws|throws
name|SVNException
block|{
block|}
specifier|private
name|void
name|dumpNode
parameter_list|(
name|String
name|path
parameter_list|,
name|SVNNodeKind
name|kind
parameter_list|,
name|int
name|nodeAction
parameter_list|,
name|boolean
name|isCopy
parameter_list|,
name|String
name|cmpPath
parameter_list|,
name|long
name|cmpRev
parameter_list|)
throws|throws
name|SVNException
block|{
name|File
name|tmpFile
init|=
literal|null
decl_stmt|;
try|try
block|{
name|writeDumpData
argument_list|(
name|SVNAdminHelper
operator|.
name|DUMPFILE_NODE_PATH
operator|+
literal|": "
operator|+
operator|(
name|path
operator|.
name|startsWith
argument_list|(
literal|"/"
argument_list|)
condition|?
name|path
operator|.
name|substring
argument_list|(
literal|1
argument_list|)
else|:
name|path
operator|)
operator|+
literal|"\n"
argument_list|)
expr_stmt|;
if|if
condition|(
name|kind
operator|==
name|SVNNodeKind
operator|.
name|FILE
condition|)
block|{
name|writeDumpData
argument_list|(
name|SVNAdminHelper
operator|.
name|DUMPFILE_NODE_KIND
operator|+
literal|": file\n"
argument_list|)
expr_stmt|;
block|}
if|else if
condition|(
name|kind
operator|==
name|SVNNodeKind
operator|.
name|DIR
condition|)
block|{
name|writeDumpData
argument_list|(
name|SVNAdminHelper
operator|.
name|DUMPFILE_NODE_KIND
operator|+
literal|": dir\n"
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|cmpPath
operator|!=
literal|null
condition|)
block|{
name|cmpPath
operator|=
name|cmpPath
operator|.
name|startsWith
argument_list|(
literal|"/"
argument_list|)
condition|?
name|cmpPath
operator|.
name|substring
argument_list|(
literal|1
argument_list|)
else|:
name|cmpPath
expr_stmt|;
block|}
name|String
name|comparePath
init|=
name|path
decl_stmt|;
name|long
name|compareRevision
init|=
name|myTargetRevision
operator|-
literal|1
decl_stmt|;
if|if
condition|(
name|cmpPath
operator|!=
literal|null
operator|&&
name|SVNRevision
operator|.
name|isValidRevisionNumber
argument_list|(
name|cmpRev
argument_list|)
condition|)
block|{
name|comparePath
operator|=
name|cmpPath
expr_stmt|;
name|compareRevision
operator|=
name|cmpRev
expr_stmt|;
block|}
name|comparePath
operator|=
name|SVNPathUtil
operator|.
name|canonicalizePath
argument_list|(
name|comparePath
argument_list|)
expr_stmt|;
name|comparePath
operator|=
name|SVNPathUtil
operator|.
name|getAbsolutePath
argument_list|(
name|comparePath
argument_list|)
expr_stmt|;
name|FSRevisionRoot
name|compareRoot
init|=
literal|null
decl_stmt|;
name|boolean
name|mustDumpProps
init|=
literal|false
decl_stmt|;
name|boolean
name|mustDumpText
init|=
literal|false
decl_stmt|;
name|String
name|canonicalPath
init|=
name|SVNPathUtil
operator|.
name|getAbsolutePath
argument_list|(
name|SVNPathUtil
operator|.
name|canonicalizePath
argument_list|(
name|path
argument_list|)
argument_list|)
decl_stmt|;
switch|switch
condition|(
name|nodeAction
condition|)
block|{
case|case
name|SVNAdminHelper
operator|.
name|NODE_ACTION_CHANGE
case|:
name|writeDumpData
argument_list|(
name|SVNAdminHelper
operator|.
name|DUMPFILE_NODE_ACTION
operator|+
literal|": change\n"
argument_list|)
expr_stmt|;
name|compareRoot
operator|=
name|myFSFS
operator|.
name|createRevisionRoot
argument_list|(
name|compareRevision
argument_list|)
expr_stmt|;
name|mustDumpProps
operator|=
name|FSRepositoryUtil
operator|.
name|arePropertiesChanged
argument_list|(
name|compareRoot
argument_list|,
name|comparePath
argument_list|,
name|myRoot
argument_list|,
name|canonicalPath
argument_list|)
expr_stmt|;
if|if
condition|(
name|kind
operator|==
name|SVNNodeKind
operator|.
name|FILE
condition|)
block|{
name|mustDumpText
operator|=
name|FSRepositoryUtil
operator|.
name|areFileContentsChanged
argument_list|(
name|compareRoot
argument_list|,
name|comparePath
argument_list|,
name|myRoot
argument_list|,
name|canonicalPath
argument_list|)
expr_stmt|;
block|}
break|break;
case|case
name|SVNAdminHelper
operator|.
name|NODE_ACTION_REPLACE
case|:
if|if
condition|(
operator|!
name|isCopy
condition|)
block|{
name|writeDumpData
argument_list|(
name|SVNAdminHelper
operator|.
name|DUMPFILE_NODE_ACTION
operator|+
literal|": replace\n"
argument_list|)
expr_stmt|;
if|if
condition|(
name|kind
operator|==
name|SVNNodeKind
operator|.
name|FILE
condition|)
block|{
name|mustDumpText
operator|=
literal|true
expr_stmt|;
block|}
name|mustDumpProps
operator|=
literal|true
expr_stmt|;
block|}
else|else
block|{
name|writeDumpData
argument_list|(
name|SVNAdminHelper
operator|.
name|DUMPFILE_NODE_ACTION
operator|+
literal|": delete\n\n"
argument_list|)
expr_stmt|;
name|dumpNode
argument_list|(
name|path
argument_list|,
name|kind
argument_list|,
name|SVNAdminHelper
operator|.
name|NODE_ACTION_ADD
argument_list|,
name|isCopy
argument_list|,
name|comparePath
argument_list|,
name|compareRevision
argument_list|)
expr_stmt|;
name|mustDumpText
operator|=
literal|false
expr_stmt|;
name|mustDumpProps
operator|=
literal|false
expr_stmt|;
block|}
break|break;
case|case
name|SVNAdminHelper
operator|.
name|NODE_ACTION_DELETE
case|:
name|writeDumpData
argument_list|(
name|SVNAdminHelper
operator|.
name|DUMPFILE_NODE_ACTION
operator|+
literal|": delete\n"
argument_list|)
expr_stmt|;
name|mustDumpText
operator|=
literal|false
expr_stmt|;
name|mustDumpProps
operator|=
literal|false
expr_stmt|;
break|break;
case|case
name|SVNAdminHelper
operator|.
name|NODE_ACTION_ADD
case|:
name|writeDumpData
argument_list|(
name|SVNAdminHelper
operator|.
name|DUMPFILE_NODE_ACTION
operator|+
literal|": add\n"
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|isCopy
condition|)
block|{
if|if
condition|(
name|kind
operator|==
name|SVNNodeKind
operator|.
name|FILE
condition|)
block|{
name|mustDumpText
operator|=
literal|true
expr_stmt|;
block|}
name|mustDumpProps
operator|=
literal|true
expr_stmt|;
block|}
else|else
block|{
if|if
condition|(
operator|!
name|myIsVerify
operator|&&
name|cmpRev
operator|<
name|myOldestDumpedRevision
condition|)
block|{
name|SVNDebugLog
operator|.
name|getDefaultLog
argument_list|()
operator|.
name|logFine
argument_list|(
name|SVNLogType
operator|.
name|FSFS
argument_list|,
literal|"WARNING: Referencing data in revision "
operator|+
name|cmpRev
operator|+
literal|", which is older than the oldest\nWARNING: dumped revision ("
operator|+
name|myOldestDumpedRevision
operator|+
literal|").  Loading this dump into an empty repository\nWARNING: will fail.\n"
argument_list|)
expr_stmt|;
block|}
name|writeDumpData
argument_list|(
name|SVNAdminHelper
operator|.
name|DUMPFILE_NODE_COPYFROM_REVISION
operator|+
literal|": "
operator|+
name|cmpRev
operator|+
literal|"\n"
argument_list|)
expr_stmt|;
name|writeDumpData
argument_list|(
name|SVNAdminHelper
operator|.
name|DUMPFILE_NODE_COPYFROM_PATH
operator|+
literal|": "
operator|+
name|cmpPath
operator|+
literal|"\n"
argument_list|)
expr_stmt|;
name|compareRoot
operator|=
name|myFSFS
operator|.
name|createRevisionRoot
argument_list|(
name|compareRevision
argument_list|)
expr_stmt|;
name|mustDumpProps
operator|=
name|FSRepositoryUtil
operator|.
name|arePropertiesChanged
argument_list|(
name|compareRoot
argument_list|,
name|comparePath
argument_list|,
name|myRoot
argument_list|,
name|canonicalPath
argument_list|)
expr_stmt|;
if|if
condition|(
name|kind
operator|==
name|SVNNodeKind
operator|.
name|FILE
condition|)
block|{
name|mustDumpText
operator|=
name|FSRepositoryUtil
operator|.
name|areFileContentsChanged
argument_list|(
name|compareRoot
argument_list|,
name|comparePath
argument_list|,
name|myRoot
argument_list|,
name|canonicalPath
argument_list|)
expr_stmt|;
name|FSRevisionNode
name|revNode
init|=
name|compareRoot
operator|.
name|getRevisionNode
argument_list|(
name|comparePath
argument_list|)
decl_stmt|;
name|String
name|checkSum
init|=
name|revNode
operator|.
name|getFileMD5Checksum
argument_list|()
decl_stmt|;
if|if
condition|(
name|checkSum
operator|!=
literal|null
operator|&&
name|checkSum
operator|.
name|length
argument_list|()
operator|>
literal|0
condition|)
block|{
name|writeDumpData
argument_list|(
name|SVNAdminHelper
operator|.
name|DUMPFILE_TEXT_COPY_SOURCE_MD5
operator|+
literal|": "
operator|+
name|checkSum
operator|+
literal|"\n"
argument_list|)
expr_stmt|;
block|}
name|checkSum
operator|=
name|revNode
operator|.
name|getFileSHA1Checksum
argument_list|()
expr_stmt|;
if|if
condition|(
name|checkSum
operator|!=
literal|null
operator|&&
name|checkSum
operator|.
name|length
argument_list|()
operator|>
literal|0
condition|)
block|{
name|writeDumpData
argument_list|(
name|SVNAdminHelper
operator|.
name|DUMPFILE_TEXT_COPY_SOURCE_SHA1
operator|+
literal|": "
operator|+
name|checkSum
operator|+
literal|"\n"
argument_list|)
expr_stmt|;
block|}
block|}
block|}
break|break;
block|}
if|if
condition|(
operator|!
name|mustDumpProps
operator|&&
operator|!
name|mustDumpText
condition|)
block|{
name|writeDumpData
argument_list|(
literal|"\n\n"
argument_list|)
expr_stmt|;
return|return;
block|}
name|long
name|contentLength
init|=
literal|0
decl_stmt|;
name|String
name|propContents
init|=
literal|null
decl_stmt|;
if|if
condition|(
name|mustDumpProps
condition|)
block|{
name|FSRevisionNode
name|node
init|=
name|myRoot
operator|.
name|getRevisionNode
argument_list|(
name|canonicalPath
argument_list|)
decl_stmt|;
name|SVNProperties
name|props
init|=
name|node
operator|.
name|getProperties
argument_list|(
name|myFSFS
argument_list|)
decl_stmt|;
name|SVNProperties
name|oldProps
init|=
literal|null
decl_stmt|;
if|if
condition|(
name|myUseDeltas
operator|&&
name|compareRoot
operator|!=
literal|null
condition|)
block|{
name|FSRevisionNode
name|cmpNode
init|=
name|compareRoot
operator|.
name|getRevisionNode
argument_list|(
name|comparePath
argument_list|)
decl_stmt|;
name|oldProps
operator|=
name|cmpNode
operator|.
name|getProperties
argument_list|(
name|myFSFS
argument_list|)
expr_stmt|;
name|writeDumpData
argument_list|(
name|SVNAdminHelper
operator|.
name|DUMPFILE_PROP_DELTA
operator|+
literal|": true\n"
argument_list|)
expr_stmt|;
block|}
name|ByteArrayOutputStream
name|encodedProps
init|=
operator|new
name|ByteArrayOutputStream
argument_list|()
decl_stmt|;
name|SVNAdminHelper
operator|.
name|writeProperties
argument_list|(
name|props
argument_list|,
name|oldProps
argument_list|,
name|encodedProps
argument_list|)
expr_stmt|;
name|propContents
operator|=
operator|new
name|String
argument_list|(
name|encodedProps
operator|.
name|toByteArray
argument_list|()
argument_list|,
literal|"UTF-8"
argument_list|)
expr_stmt|;
name|contentLength
operator|+=
name|propContents
operator|.
name|length
argument_list|()
expr_stmt|;
name|writeDumpData
argument_list|(
name|SVNAdminHelper
operator|.
name|DUMPFILE_PROP_CONTENT_LENGTH
operator|+
literal|": "
operator|+
name|propContents
operator|.
name|length
argument_list|()
operator|+
literal|"\n"
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|mustDumpText
operator|&&
name|kind
operator|==
name|SVNNodeKind
operator|.
name|FILE
condition|)
block|{
name|long
name|txtLength
init|=
literal|0
decl_stmt|;
name|FSRevisionNode
name|node
init|=
name|myRoot
operator|.
name|getRevisionNode
argument_list|(
name|canonicalPath
argument_list|)
decl_stmt|;
if|if
condition|(
name|myUseDeltas
condition|)
block|{
name|tmpFile
operator|=
name|SVNFileUtil
operator|.
name|createTempFile
argument_list|(
literal|"dump"
argument_list|,
literal|".tmp"
argument_list|)
expr_stmt|;
name|InputStream
name|sourceStream
init|=
literal|null
decl_stmt|;
name|InputStream
name|targetStream
init|=
literal|null
decl_stmt|;
name|OutputStream
name|tmpStream
init|=
literal|null
decl_stmt|;
name|SVNDeltaCombiner
name|deltaCombiner
init|=
name|getDeltaCombiner
argument_list|()
decl_stmt|;
name|SVNDeltaGenerator
name|deltaGenerator
init|=
name|getDeltaGenerator
argument_list|()
decl_stmt|;
try|try
block|{
if|if
condition|(
name|compareRoot
operator|!=
literal|null
operator|&&
name|comparePath
operator|!=
literal|null
condition|)
block|{
name|sourceStream
operator|=
name|compareRoot
operator|.
name|getFileStreamForPath
argument_list|(
name|deltaCombiner
argument_list|,
name|comparePath
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|sourceStream
operator|=
name|SVNFileUtil
operator|.
name|DUMMY_IN
expr_stmt|;
block|}
name|targetStream
operator|=
name|myRoot
operator|.
name|getFileStreamForPath
argument_list|(
name|deltaCombiner
argument_list|,
name|canonicalPath
argument_list|)
expr_stmt|;
name|tmpStream
operator|=
name|SVNFileUtil
operator|.
name|openFileForWriting
argument_list|(
name|tmpFile
argument_list|)
expr_stmt|;
specifier|final
name|CountingOutputStream
name|countingStream
init|=
operator|new
name|CountingOutputStream
argument_list|(
name|tmpStream
argument_list|,
literal|0
argument_list|)
decl_stmt|;
name|ISVNDeltaConsumer
name|consumer
init|=
operator|new
name|ISVNDeltaConsumer
argument_list|()
block|{
specifier|private
name|boolean
name|isHeaderWritten
init|=
literal|false
decl_stmt|;
specifier|public
name|OutputStream
name|textDeltaChunk
parameter_list|(
name|String
name|path
parameter_list|,
name|SVNDiffWindow
name|diffWindow
parameter_list|)
throws|throws
name|SVNException
block|{
try|try
block|{
if|if
condition|(
name|diffWindow
operator|!=
literal|null
condition|)
block|{
name|diffWindow
operator|.
name|writeTo
argument_list|(
name|countingStream
argument_list|,
operator|!
name|isHeaderWritten
argument_list|,
literal|false
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|SVNDiffWindow
operator|.
name|EMPTY
operator|.
name|writeTo
argument_list|(
name|countingStream
argument_list|,
operator|!
name|isHeaderWritten
argument_list|,
literal|false
argument_list|)
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
name|IOException
name|ioe
parameter_list|)
block|{
name|SVNErrorMessage
name|err
init|=
name|SVNErrorMessage
operator|.
name|create
argument_list|(
name|SVNErrorCode
operator|.
name|IO_ERROR
argument_list|,
name|ioe
operator|.
name|getLocalizedMessage
argument_list|()
argument_list|)
decl_stmt|;
name|SVNErrorManager
operator|.
name|error
argument_list|(
name|err
argument_list|,
name|ioe
argument_list|,
name|SVNLogType
operator|.
name|FSFS
argument_list|)
expr_stmt|;
block|}
name|isHeaderWritten
operator|=
literal|true
expr_stmt|;
return|return
name|SVNFileUtil
operator|.
name|DUMMY_OUT
return|;
block|}
specifier|public
name|void
name|applyTextDelta
parameter_list|(
name|String
name|path
parameter_list|,
name|String
name|baseChecksum
parameter_list|)
throws|throws
name|SVNException
block|{
block|}
specifier|public
name|void
name|textDeltaEnd
parameter_list|(
name|String
name|path
parameter_list|)
throws|throws
name|SVNException
block|{
block|}
block|}
decl_stmt|;
name|deltaGenerator
operator|.
name|sendDelta
argument_list|(
literal|null
argument_list|,
name|sourceStream
argument_list|,
literal|0
argument_list|,
name|targetStream
argument_list|,
name|consumer
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|txtLength
operator|=
name|countingStream
operator|.
name|getPosition
argument_list|()
expr_stmt|;
if|if
condition|(
name|compareRoot
operator|!=
literal|null
condition|)
block|{
name|FSRevisionNode
name|revNode
init|=
name|compareRoot
operator|.
name|getRevisionNode
argument_list|(
name|comparePath
argument_list|)
decl_stmt|;
name|String
name|hexDigest
init|=
name|revNode
operator|.
name|getFileMD5Checksum
argument_list|()
decl_stmt|;
if|if
condition|(
name|hexDigest
operator|!=
literal|null
operator|&&
name|hexDigest
operator|.
name|length
argument_list|()
operator|>
literal|0
condition|)
block|{
name|writeDumpData
argument_list|(
name|SVNAdminHelper
operator|.
name|DUMPFILE_TEXT_DELTA_BASE_MD5
operator|+
literal|": "
operator|+
name|hexDigest
operator|+
literal|"\n"
argument_list|)
expr_stmt|;
block|}
name|hexDigest
operator|=
name|revNode
operator|.
name|getFileSHA1Checksum
argument_list|()
expr_stmt|;
if|if
condition|(
name|hexDigest
operator|==
literal|null
condition|)
block|{
name|hexDigest
operator|=
name|computeSHA1Checksum
argument_list|(
name|compareRoot
argument_list|,
name|comparePath
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|hexDigest
operator|!=
literal|null
operator|&&
name|hexDigest
operator|.
name|length
argument_list|()
operator|>
literal|0
condition|)
block|{
name|writeDumpData
argument_list|(
name|SVNAdminHelper
operator|.
name|DUMPFILE_TEXT_DELTA_BASE_SHA1
operator|+
literal|": "
operator|+
name|hexDigest
operator|+
literal|"\n"
argument_list|)
expr_stmt|;
block|}
block|}
block|}
finally|finally
block|{
name|SVNFileUtil
operator|.
name|closeFile
argument_list|(
name|sourceStream
argument_list|)
expr_stmt|;
name|SVNFileUtil
operator|.
name|closeFile
argument_list|(
name|targetStream
argument_list|)
expr_stmt|;
name|SVNFileUtil
operator|.
name|closeFile
argument_list|(
name|tmpStream
argument_list|)
expr_stmt|;
block|}
name|writeDumpData
argument_list|(
name|SVNAdminHelper
operator|.
name|DUMPFILE_TEXT_DELTA
operator|+
literal|": true\n"
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|txtLength
operator|=
name|node
operator|.
name|getFileLength
argument_list|()
expr_stmt|;
block|}
name|contentLength
operator|+=
name|txtLength
expr_stmt|;
name|writeDumpData
argument_list|(
name|SVNAdminHelper
operator|.
name|DUMPFILE_TEXT_CONTENT_LENGTH
operator|+
literal|": "
operator|+
name|txtLength
operator|+
literal|"\n"
argument_list|)
expr_stmt|;
name|String
name|checksum
init|=
name|node
operator|.
name|getFileMD5Checksum
argument_list|()
decl_stmt|;
if|if
condition|(
name|checksum
operator|!=
literal|null
operator|&&
name|checksum
operator|.
name|length
argument_list|()
operator|>
literal|0
condition|)
block|{
name|writeDumpData
argument_list|(
name|SVNAdminHelper
operator|.
name|DUMPFILE_TEXT_CONTENT_MD5
operator|+
literal|": "
operator|+
name|checksum
operator|+
literal|"\n"
argument_list|)
expr_stmt|;
block|}
name|checksum
operator|=
name|node
operator|.
name|getFileSHA1Checksum
argument_list|()
expr_stmt|;
if|if
condition|(
name|checksum
operator|==
literal|null
condition|)
block|{
name|checksum
operator|=
name|computeSHA1Checksum
argument_list|(
name|myRoot
argument_list|,
name|canonicalPath
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|checksum
operator|!=
literal|null
operator|&&
name|checksum
operator|.
name|length
argument_list|()
operator|>
literal|0
condition|)
block|{
name|writeDumpData
argument_list|(
name|SVNAdminHelper
operator|.
name|DUMPFILE_TEXT_CONTENT_SHA1
operator|+
literal|": "
operator|+
name|checksum
operator|+
literal|"\n"
argument_list|)
expr_stmt|;
block|}
block|}
name|writeDumpData
argument_list|(
name|SVNAdminHelper
operator|.
name|DUMPFILE_CONTENT_LENGTH
operator|+
literal|": "
operator|+
name|contentLength
operator|+
literal|"\n\n"
argument_list|)
expr_stmt|;
if|if
condition|(
name|mustDumpProps
condition|)
block|{
name|writeDumpData
argument_list|(
name|propContents
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|mustDumpText
operator|&&
name|kind
operator|==
name|SVNNodeKind
operator|.
name|FILE
condition|)
block|{
name|InputStream
name|source
init|=
literal|null
decl_stmt|;
try|try
block|{
if|if
condition|(
name|tmpFile
operator|!=
literal|null
condition|)
block|{
name|source
operator|=
name|SVNFileUtil
operator|.
name|openFileForReading
argument_list|(
name|tmpFile
argument_list|,
name|SVNLogType
operator|.
name|WC
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|source
operator|=
name|myRoot
operator|.
name|getFileStreamForPath
argument_list|(
name|getDeltaCombiner
argument_list|()
argument_list|,
name|canonicalPath
argument_list|)
expr_stmt|;
block|}
comment|//TODO: provide canceller?
name|FSRepositoryUtil
operator|.
name|copy
argument_list|(
name|source
argument_list|,
name|myDumpStream
argument_list|,
literal|null
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
name|SVNFileUtil
operator|.
name|closeFile
argument_list|(
name|source
argument_list|)
expr_stmt|;
block|}
block|}
name|writeDumpData
argument_list|(
literal|"\n\n"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|ioe
parameter_list|)
block|{
name|SVNErrorMessage
name|err
init|=
name|SVNErrorMessage
operator|.
name|create
argument_list|(
name|SVNErrorCode
operator|.
name|IO_ERROR
argument_list|,
name|ioe
operator|.
name|getLocalizedMessage
argument_list|()
argument_list|)
decl_stmt|;
name|SVNErrorManager
operator|.
name|error
argument_list|(
name|err
argument_list|,
name|ioe
argument_list|,
name|SVNLogType
operator|.
name|FSFS
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
name|SVNFileUtil
operator|.
name|deleteFile
argument_list|(
name|tmpFile
argument_list|)
expr_stmt|;
block|}
block|}
specifier|private
name|String
name|computeSHA1Checksum
parameter_list|(
name|FSRoot
name|revision
parameter_list|,
name|String
name|filePath
parameter_list|)
throws|throws
name|SVNException
block|{
name|InputStream
name|is
init|=
name|revision
operator|.
name|getFileStreamForPath
argument_list|(
name|getDeltaCombiner
argument_list|()
argument_list|,
name|filePath
argument_list|)
decl_stmt|;
name|SVNChecksumInputStream
name|checksum
init|=
literal|null
decl_stmt|;
try|try
block|{
name|checksum
operator|=
operator|new
name|SVNChecksumInputStream
argument_list|(
name|is
argument_list|,
literal|"SHA1"
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
name|SVNFileUtil
operator|.
name|closeFile
argument_list|(
name|checksum
argument_list|)
expr_stmt|;
block|}
return|return
name|checksum
operator|!=
literal|null
condition|?
name|checksum
operator|.
name|getDigest
argument_list|()
else|:
literal|null
return|;
block|}
specifier|private
name|SVNDeltaGenerator
name|getDeltaGenerator
parameter_list|()
block|{
if|if
condition|(
name|myDeltaGenerator
operator|==
literal|null
condition|)
block|{
name|myDeltaGenerator
operator|=
operator|new
name|SVNDeltaGenerator
argument_list|()
expr_stmt|;
block|}
return|return
name|myDeltaGenerator
return|;
block|}
specifier|private
name|SVNDeltaCombiner
name|getDeltaCombiner
parameter_list|()
block|{
if|if
condition|(
name|myDeltaCombiner
operator|==
literal|null
condition|)
block|{
name|myDeltaCombiner
operator|=
operator|new
name|SVNDeltaCombiner
argument_list|()
expr_stmt|;
block|}
else|else
block|{
name|myDeltaCombiner
operator|.
name|reset
argument_list|()
expr_stmt|;
block|}
return|return
name|myDeltaCombiner
return|;
block|}
specifier|private
name|DirectoryInfo
name|createDirectoryInfo
parameter_list|(
name|String
name|path
parameter_list|,
name|String
name|copyFromPath
parameter_list|,
name|long
name|copyFromRev
parameter_list|,
name|DirectoryInfo
name|parent
parameter_list|)
block|{
name|String
name|fullPath
init|=
literal|null
decl_stmt|;
if|if
condition|(
name|parent
operator|!=
literal|null
condition|)
block|{
name|fullPath
operator|=
name|SVNPathUtil
operator|.
name|getAbsolutePath
argument_list|(
name|SVNPathUtil
operator|.
name|append
argument_list|(
name|myRootPath
argument_list|,
name|path
argument_list|)
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|fullPath
operator|=
name|myRootPath
expr_stmt|;
block|}
name|String
name|cmpPath
init|=
literal|null
decl_stmt|;
if|if
condition|(
name|copyFromPath
operator|!=
literal|null
condition|)
block|{
name|cmpPath
operator|=
name|copyFromPath
operator|.
name|startsWith
argument_list|(
literal|"/"
argument_list|)
condition|?
name|copyFromPath
operator|.
name|substring
argument_list|(
literal|1
argument_list|)
else|:
name|copyFromPath
expr_stmt|;
block|}
return|return
operator|new
name|DirectoryInfo
argument_list|(
name|fullPath
argument_list|,
name|cmpPath
argument_list|,
name|copyFromRev
argument_list|,
name|parent
argument_list|)
return|;
block|}
specifier|private
name|void
name|writeDumpData
parameter_list|(
name|String
name|data
parameter_list|)
throws|throws
name|IOException
block|{
name|myDumpStream
operator|.
name|write
argument_list|(
name|data
operator|.
name|getBytes
argument_list|(
literal|"UTF-8"
argument_list|)
argument_list|)
expr_stmt|;
block|}
specifier|private
class|class
name|DirectoryInfo
block|{
name|String
name|myFullPath
decl_stmt|;
name|String
name|myComparePath
decl_stmt|;
name|long
name|myCompareRevision
decl_stmt|;
name|boolean
name|myIsWrittenOut
decl_stmt|;
name|Map
name|myDeletedEntries
decl_stmt|;
name|DirectoryInfo
name|myParentInfo
decl_stmt|;
specifier|public
name|DirectoryInfo
parameter_list|(
name|String
name|path
parameter_list|,
name|String
name|cmpPath
parameter_list|,
name|long
name|cmpRev
parameter_list|,
name|DirectoryInfo
name|parent
parameter_list|)
block|{
name|myFullPath
operator|=
name|path
expr_stmt|;
name|myParentInfo
operator|=
name|parent
expr_stmt|;
name|myComparePath
operator|=
name|cmpPath
expr_stmt|;
name|myCompareRevision
operator|=
name|cmpRev
expr_stmt|;
name|myDeletedEntries
operator|=
operator|new
name|SVNHashMap
argument_list|()
expr_stmt|;
name|myIsWrittenOut
operator|=
literal|false
expr_stmt|;
block|}
block|}
block|}
end_class

end_unit

