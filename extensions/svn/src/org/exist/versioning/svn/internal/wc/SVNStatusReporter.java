begin_unit|revision:1.0.0;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * ====================================================================  * Copyright (c) 2004-2010 TMate Software Ltd.  All rights reserved.  *  * This software is licensed as described in the file COPYING, which  * you should have received as part of this distribution.  The terms  * are also available at http://svnkit.com/license.html  * If newer versions of this license are posted there, you may use a  * newer version instead, at your option.  * ====================================================================  */
end_comment

begin_package
package|package
name|org
operator|.
name|exist
operator|.
name|versioning
operator|.
name|svn
operator|.
name|internal
operator|.
name|wc
package|;
end_package

begin_import
import|import
name|org
operator|.
name|tmatesoft
operator|.
name|svn
operator|.
name|core
operator|.
name|internal
operator|.
name|util
operator|.
name|SVNHashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|org
operator|.
name|tmatesoft
operator|.
name|svn
operator|.
name|core
operator|.
name|SVNDepth
import|;
end_import

begin_import
import|import
name|org
operator|.
name|tmatesoft
operator|.
name|svn
operator|.
name|core
operator|.
name|SVNErrorCode
import|;
end_import

begin_import
import|import
name|org
operator|.
name|tmatesoft
operator|.
name|svn
operator|.
name|core
operator|.
name|SVNErrorMessage
import|;
end_import

begin_import
import|import
name|org
operator|.
name|tmatesoft
operator|.
name|svn
operator|.
name|core
operator|.
name|SVNException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|tmatesoft
operator|.
name|svn
operator|.
name|core
operator|.
name|SVNLock
import|;
end_import

begin_import
import|import
name|org
operator|.
name|tmatesoft
operator|.
name|svn
operator|.
name|core
operator|.
name|SVNURL
import|;
end_import

begin_import
import|import
name|org
operator|.
name|tmatesoft
operator|.
name|svn
operator|.
name|core
operator|.
name|internal
operator|.
name|util
operator|.
name|SVNPathUtil
import|;
end_import

begin_import
import|import
name|org
operator|.
name|tmatesoft
operator|.
name|svn
operator|.
name|core
operator|.
name|internal
operator|.
name|util
operator|.
name|SVNURLUtil
import|;
end_import

begin_import
import|import
name|org
operator|.
name|tmatesoft
operator|.
name|svn
operator|.
name|core
operator|.
name|io
operator|.
name|ISVNReporter
import|;
end_import

begin_import
import|import
name|org
operator|.
name|tmatesoft
operator|.
name|svn
operator|.
name|core
operator|.
name|io
operator|.
name|ISVNReporterBaton
import|;
end_import

begin_import
import|import
name|org
operator|.
name|tmatesoft
operator|.
name|svn
operator|.
name|core
operator|.
name|io
operator|.
name|SVNRepository
import|;
end_import

begin_import
import|import
name|org
operator|.
name|tmatesoft
operator|.
name|svn
operator|.
name|util
operator|.
name|SVNLogType
import|;
end_import

begin_comment
comment|/**  * @version 1.3  * @author  TMate Software Ltd.  */
end_comment

begin_class
specifier|public
class|class
name|SVNStatusReporter
implements|implements
name|ISVNReporterBaton
implements|,
name|ISVNReporter
block|{
specifier|private
name|ISVNReporter
name|myReporter
decl_stmt|;
specifier|private
name|ISVNReporterBaton
name|myBaton
decl_stmt|;
specifier|private
name|SVNURL
name|myRepositoryLocation
decl_stmt|;
specifier|private
name|SVNRepository
name|myRepository
decl_stmt|;
specifier|private
name|SVNURL
name|myRepositoryRoot
decl_stmt|;
specifier|private
name|Map
name|myLocks
decl_stmt|;
specifier|private
name|SVNStatusEditor
name|myEditor
decl_stmt|;
specifier|public
name|SVNStatusReporter
parameter_list|(
name|SVNRepository
name|repos
parameter_list|,
name|ISVNReporterBaton
name|baton
parameter_list|,
name|SVNStatusEditor
name|editor
parameter_list|)
block|{
name|myBaton
operator|=
name|baton
expr_stmt|;
name|myRepository
operator|=
name|repos
expr_stmt|;
name|myRepositoryLocation
operator|=
name|repos
operator|.
name|getLocation
argument_list|()
expr_stmt|;
name|myEditor
operator|=
name|editor
expr_stmt|;
name|myLocks
operator|=
operator|new
name|SVNHashMap
argument_list|()
expr_stmt|;
block|}
specifier|public
name|SVNLock
name|getLock
parameter_list|(
name|SVNURL
name|url
parameter_list|)
block|{
comment|// get decoded path
if|if
condition|(
name|myRepositoryRoot
operator|==
literal|null
operator|||
name|myLocks
operator|.
name|isEmpty
argument_list|()
operator|||
name|url
operator|==
literal|null
condition|)
block|{
return|return
literal|null
return|;
block|}
name|String
name|urlString
init|=
name|url
operator|.
name|getPath
argument_list|()
decl_stmt|;
name|String
name|root
init|=
name|myRepositoryRoot
operator|.
name|getPath
argument_list|()
decl_stmt|;
name|String
name|path
decl_stmt|;
if|if
condition|(
name|urlString
operator|.
name|equals
argument_list|(
name|root
argument_list|)
condition|)
block|{
name|path
operator|=
literal|"/"
expr_stmt|;
block|}
else|else
block|{
name|path
operator|=
name|urlString
operator|.
name|substring
argument_list|(
name|root
operator|.
name|length
argument_list|()
argument_list|)
expr_stmt|;
block|}
return|return
operator|(
name|SVNLock
operator|)
name|myLocks
operator|.
name|get
argument_list|(
name|path
argument_list|)
return|;
block|}
specifier|public
name|void
name|report
parameter_list|(
name|ISVNReporter
name|reporter
parameter_list|)
throws|throws
name|SVNException
block|{
name|myReporter
operator|=
name|reporter
expr_stmt|;
name|myBaton
operator|.
name|report
argument_list|(
name|this
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|setPath
parameter_list|(
name|String
name|path
parameter_list|,
name|String
name|lockToken
parameter_list|,
name|long
name|revision
parameter_list|,
name|boolean
name|startEmpty
parameter_list|)
throws|throws
name|SVNException
block|{
name|setPath
argument_list|(
name|path
argument_list|,
name|lockToken
argument_list|,
name|revision
argument_list|,
name|SVNDepth
operator|.
name|INFINITY
argument_list|,
name|startEmpty
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|deletePath
parameter_list|(
name|String
name|path
parameter_list|)
throws|throws
name|SVNException
block|{
name|myReporter
operator|.
name|deletePath
argument_list|(
name|path
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|linkPath
parameter_list|(
name|SVNURL
name|url
parameter_list|,
name|String
name|path
parameter_list|,
name|String
name|lockToken
parameter_list|,
name|long
name|revision
parameter_list|,
name|boolean
name|startEmpty
parameter_list|)
throws|throws
name|SVNException
block|{
name|linkPath
argument_list|(
name|url
argument_list|,
name|path
argument_list|,
name|lockToken
argument_list|,
name|revision
argument_list|,
name|SVNDepth
operator|.
name|INFINITY
argument_list|,
name|startEmpty
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|finishReport
parameter_list|()
throws|throws
name|SVNException
block|{
comment|// collect locks
name|SVNLock
index|[]
name|locks
init|=
literal|null
decl_stmt|;
try|try
block|{
name|myRepositoryRoot
operator|=
name|myRepository
operator|.
name|getRepositoryRoot
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|locks
operator|=
name|myRepository
operator|.
name|getLocks
argument_list|(
literal|""
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|SVNException
name|e
parameter_list|)
block|{
if|if
condition|(
operator|!
operator|(
name|e
operator|.
name|getErrorMessage
argument_list|()
operator|!=
literal|null
operator|&&
name|e
operator|.
name|getErrorMessage
argument_list|()
operator|.
name|getErrorCode
argument_list|()
operator|==
name|SVNErrorCode
operator|.
name|RA_NOT_IMPLEMENTED
operator|)
condition|)
block|{
throw|throw
name|e
throw|;
block|}
block|}
finally|finally
block|{
name|myRepository
operator|.
name|closeSession
argument_list|()
expr_stmt|;
block|}
if|if
condition|(
name|locks
operator|!=
literal|null
condition|)
block|{
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|locks
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
name|SVNLock
name|lock
init|=
name|locks
index|[
name|i
index|]
decl_stmt|;
name|myLocks
operator|.
name|put
argument_list|(
name|lock
operator|.
name|getPath
argument_list|()
argument_list|,
name|lock
argument_list|)
expr_stmt|;
block|}
block|}
name|myEditor
operator|.
name|setRepositoryInfo
argument_list|(
name|myRepositoryRoot
argument_list|,
name|myLocks
argument_list|)
expr_stmt|;
name|myReporter
operator|.
name|finishReport
argument_list|()
expr_stmt|;
block|}
specifier|public
name|void
name|abortReport
parameter_list|()
throws|throws
name|SVNException
block|{
name|myReporter
operator|.
name|abortReport
argument_list|()
expr_stmt|;
block|}
specifier|public
name|void
name|linkPath
parameter_list|(
name|SVNURL
name|url
parameter_list|,
name|String
name|path
parameter_list|,
name|String
name|lockToken
parameter_list|,
name|long
name|revision
parameter_list|,
name|SVNDepth
name|depth
parameter_list|,
name|boolean
name|startEmpty
parameter_list|)
throws|throws
name|SVNException
block|{
name|SVNURL
name|rootURL
init|=
name|SVNURLUtil
operator|.
name|getCommonURLAncestor
argument_list|(
name|url
argument_list|,
name|myRepositoryLocation
argument_list|)
decl_stmt|;
if|if
condition|(
name|rootURL
operator|==
literal|null
condition|)
block|{
name|SVNErrorMessage
name|err
init|=
name|SVNErrorMessage
operator|.
name|create
argument_list|(
name|SVNErrorCode
operator|.
name|BAD_URL
argument_list|,
literal|"Can not determine common ancestor of ''{0}'' and ''{1}'';\nprobably these entries belong to different repositories."
argument_list|,
operator|new
name|Object
index|[]
block|{
name|url
block|,
name|myRepositoryLocation
block|}
argument_list|)
decl_stmt|;
name|SVNErrorManager
operator|.
name|error
argument_list|(
name|err
argument_list|,
name|SVNLogType
operator|.
name|WC
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|SVNPathUtil
operator|.
name|getPathAsChild
argument_list|(
name|rootURL
operator|.
name|getPath
argument_list|()
argument_list|,
name|myRepositoryLocation
operator|.
name|getPath
argument_list|()
argument_list|)
operator|!=
literal|null
condition|)
block|{
name|myRepositoryLocation
operator|=
name|rootURL
expr_stmt|;
block|}
name|myReporter
operator|.
name|linkPath
argument_list|(
name|url
argument_list|,
name|path
argument_list|,
name|lockToken
argument_list|,
name|revision
argument_list|,
name|depth
argument_list|,
name|startEmpty
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|setPath
parameter_list|(
name|String
name|path
parameter_list|,
name|String
name|lockToken
parameter_list|,
name|long
name|revision
parameter_list|,
name|SVNDepth
name|depth
parameter_list|,
name|boolean
name|startEmpty
parameter_list|)
throws|throws
name|SVNException
block|{
name|myReporter
operator|.
name|setPath
argument_list|(
name|path
argument_list|,
name|lockToken
argument_list|,
name|revision
argument_list|,
name|depth
argument_list|,
name|startEmpty
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

