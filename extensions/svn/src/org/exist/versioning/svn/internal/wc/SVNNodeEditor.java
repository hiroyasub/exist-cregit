begin_unit|revision:1.0.0;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * ====================================================================  * Copyright (c) 2004-2010 TMate Software Ltd.  All rights reserved.  *  * This software is licensed as described in the file COPYING, which  * you should have received as part of this distribution.  The terms  * are also available at http://svnkit.com/license.html  * If newer versions of this license are posted there, you may use a  * newer version instead, at your option.  * ====================================================================  */
end_comment

begin_package
package|package
name|org
operator|.
name|exist
operator|.
name|versioning
operator|.
name|svn
operator|.
name|internal
operator|.
name|wc
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|File
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|InputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|OutputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Iterator
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|LinkedList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|versioning
operator|.
name|svn
operator|.
name|wc
operator|.
name|ISVNEventHandler
import|;
end_import

begin_import
import|import
name|org
operator|.
name|tmatesoft
operator|.
name|svn
operator|.
name|core
operator|.
name|SVNCommitInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|tmatesoft
operator|.
name|svn
operator|.
name|core
operator|.
name|SVNErrorCode
import|;
end_import

begin_import
import|import
name|org
operator|.
name|tmatesoft
operator|.
name|svn
operator|.
name|core
operator|.
name|SVNErrorMessage
import|;
end_import

begin_import
import|import
name|org
operator|.
name|tmatesoft
operator|.
name|svn
operator|.
name|core
operator|.
name|SVNException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|tmatesoft
operator|.
name|svn
operator|.
name|core
operator|.
name|SVNNodeKind
import|;
end_import

begin_import
import|import
name|org
operator|.
name|tmatesoft
operator|.
name|svn
operator|.
name|core
operator|.
name|SVNProperties
import|;
end_import

begin_import
import|import
name|org
operator|.
name|tmatesoft
operator|.
name|svn
operator|.
name|core
operator|.
name|SVNProperty
import|;
end_import

begin_import
import|import
name|org
operator|.
name|tmatesoft
operator|.
name|svn
operator|.
name|core
operator|.
name|SVNPropertyValue
import|;
end_import

begin_import
import|import
name|org
operator|.
name|tmatesoft
operator|.
name|svn
operator|.
name|core
operator|.
name|internal
operator|.
name|delta
operator|.
name|SVNDeltaCombiner
import|;
end_import

begin_import
import|import
name|org
operator|.
name|tmatesoft
operator|.
name|svn
operator|.
name|core
operator|.
name|internal
operator|.
name|io
operator|.
name|fs
operator|.
name|FSFS
import|;
end_import

begin_import
import|import
name|org
operator|.
name|tmatesoft
operator|.
name|svn
operator|.
name|core
operator|.
name|internal
operator|.
name|io
operator|.
name|fs
operator|.
name|FSRepositoryUtil
import|;
end_import

begin_import
import|import
name|org
operator|.
name|tmatesoft
operator|.
name|svn
operator|.
name|core
operator|.
name|internal
operator|.
name|io
operator|.
name|fs
operator|.
name|FSRevisionNode
import|;
end_import

begin_import
import|import
name|org
operator|.
name|tmatesoft
operator|.
name|svn
operator|.
name|core
operator|.
name|internal
operator|.
name|io
operator|.
name|fs
operator|.
name|FSRevisionRoot
import|;
end_import

begin_import
import|import
name|org
operator|.
name|tmatesoft
operator|.
name|svn
operator|.
name|core
operator|.
name|internal
operator|.
name|io
operator|.
name|fs
operator|.
name|FSRoot
import|;
end_import

begin_import
import|import
name|org
operator|.
name|tmatesoft
operator|.
name|svn
operator|.
name|core
operator|.
name|internal
operator|.
name|io
operator|.
name|fs
operator|.
name|FSTransactionRoot
import|;
end_import

begin_import
import|import
name|org
operator|.
name|tmatesoft
operator|.
name|svn
operator|.
name|core
operator|.
name|internal
operator|.
name|util
operator|.
name|SVNHashMap
import|;
end_import

begin_import
import|import
name|org
operator|.
name|tmatesoft
operator|.
name|svn
operator|.
name|core
operator|.
name|internal
operator|.
name|util
operator|.
name|SVNPathUtil
import|;
end_import

begin_import
import|import
name|org
operator|.
name|tmatesoft
operator|.
name|svn
operator|.
name|core
operator|.
name|io
operator|.
name|ISVNEditor
import|;
end_import

begin_import
import|import
name|org
operator|.
name|tmatesoft
operator|.
name|svn
operator|.
name|core
operator|.
name|io
operator|.
name|SVNLocationEntry
import|;
end_import

begin_import
import|import
name|org
operator|.
name|tmatesoft
operator|.
name|svn
operator|.
name|core
operator|.
name|io
operator|.
name|diff
operator|.
name|SVNDiffWindow
import|;
end_import

begin_import
import|import
name|org
operator|.
name|tmatesoft
operator|.
name|svn
operator|.
name|core
operator|.
name|wc
operator|.
name|ISVNDiffGenerator
import|;
end_import

begin_import
import|import
name|org
operator|.
name|tmatesoft
operator|.
name|svn
operator|.
name|core
operator|.
name|wc
operator|.
name|SVNRevision
import|;
end_import

begin_import
import|import
name|org
operator|.
name|tmatesoft
operator|.
name|svn
operator|.
name|core
operator|.
name|wc
operator|.
name|admin
operator|.
name|ISVNChangeEntryHandler
import|;
end_import

begin_import
import|import
name|org
operator|.
name|tmatesoft
operator|.
name|svn
operator|.
name|core
operator|.
name|wc
operator|.
name|admin
operator|.
name|ISVNChangedDirectoriesHandler
import|;
end_import

begin_import
import|import
name|org
operator|.
name|tmatesoft
operator|.
name|svn
operator|.
name|core
operator|.
name|wc
operator|.
name|admin
operator|.
name|ISVNGNUDiffGenerator
import|;
end_import

begin_import
import|import
name|org
operator|.
name|tmatesoft
operator|.
name|svn
operator|.
name|core
operator|.
name|wc
operator|.
name|admin
operator|.
name|SVNChangeEntry
import|;
end_import

begin_import
import|import
name|org
operator|.
name|tmatesoft
operator|.
name|svn
operator|.
name|util
operator|.
name|SVNLogType
import|;
end_import

begin_comment
comment|/**  * @version 1.3  * @author  TMate Software Ltd.  */
end_comment

begin_class
specifier|public
class|class
name|SVNNodeEditor
implements|implements
name|ISVNEditor
block|{
specifier|private
specifier|static
specifier|final
name|char
name|TYPE_REPLACED
init|=
literal|'R'
decl_stmt|;
specifier|private
name|Node
name|myCurrentNode
decl_stmt|;
specifier|private
name|Node
name|myRootNode
decl_stmt|;
specifier|private
name|FSRoot
name|myBaseRoot
decl_stmt|;
specifier|private
name|FSFS
name|myFSFS
decl_stmt|;
specifier|private
name|Map
name|myFiles
decl_stmt|;
specifier|private
name|ISVNEventHandler
name|myCancelHandler
decl_stmt|;
specifier|private
name|File
name|myTempDirectory
decl_stmt|;
specifier|public
name|SVNNodeEditor
parameter_list|(
name|FSFS
name|fsfs
parameter_list|,
name|FSRoot
name|baseRoot
parameter_list|,
name|ISVNEventHandler
name|handler
parameter_list|)
block|{
name|myBaseRoot
operator|=
name|baseRoot
expr_stmt|;
name|myFSFS
operator|=
name|fsfs
expr_stmt|;
name|myCancelHandler
operator|=
name|handler
expr_stmt|;
name|myFiles
operator|=
operator|new
name|SVNHashMap
argument_list|()
expr_stmt|;
block|}
specifier|public
name|void
name|abortEdit
parameter_list|()
throws|throws
name|SVNException
block|{
block|}
specifier|public
name|void
name|absentDir
parameter_list|(
name|String
name|path
parameter_list|)
throws|throws
name|SVNException
block|{
block|}
specifier|public
name|void
name|absentFile
parameter_list|(
name|String
name|path
parameter_list|)
throws|throws
name|SVNException
block|{
block|}
specifier|public
name|void
name|addDir
parameter_list|(
name|String
name|path
parameter_list|,
name|String
name|copyFromPath
parameter_list|,
name|long
name|copyFromRevision
parameter_list|)
throws|throws
name|SVNException
block|{
name|myCurrentNode
operator|=
name|addOrOpen
argument_list|(
name|path
argument_list|,
name|SVNChangeEntry
operator|.
name|TYPE_ADDED
argument_list|,
name|SVNNodeKind
operator|.
name|DIR
argument_list|,
name|myCurrentNode
argument_list|,
name|copyFromPath
argument_list|,
name|copyFromRevision
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|addFile
parameter_list|(
name|String
name|path
parameter_list|,
name|String
name|copyFromPath
parameter_list|,
name|long
name|copyFromRevision
parameter_list|)
throws|throws
name|SVNException
block|{
name|Node
name|node
init|=
name|addOrOpen
argument_list|(
name|path
argument_list|,
name|SVNChangeEntry
operator|.
name|TYPE_ADDED
argument_list|,
name|SVNNodeKind
operator|.
name|FILE
argument_list|,
name|myCurrentNode
argument_list|,
name|copyFromPath
argument_list|,
name|copyFromRevision
argument_list|)
decl_stmt|;
name|myFiles
operator|.
name|put
argument_list|(
name|path
argument_list|,
name|node
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|changeDirProperty
parameter_list|(
name|String
name|name
parameter_list|,
name|SVNPropertyValue
name|value
parameter_list|)
throws|throws
name|SVNException
block|{
name|myCurrentNode
operator|.
name|myHasPropModifications
operator|=
literal|true
expr_stmt|;
block|}
specifier|public
name|void
name|changeFileProperty
parameter_list|(
name|String
name|path
parameter_list|,
name|String
name|name
parameter_list|,
name|SVNPropertyValue
name|value
parameter_list|)
throws|throws
name|SVNException
block|{
name|Node
name|fileNode
init|=
operator|(
name|Node
operator|)
name|myFiles
operator|.
name|get
argument_list|(
name|path
argument_list|)
decl_stmt|;
name|fileNode
operator|.
name|myHasPropModifications
operator|=
literal|true
expr_stmt|;
block|}
specifier|public
name|void
name|closeDir
parameter_list|()
throws|throws
name|SVNException
block|{
name|myCurrentNode
operator|=
name|myCurrentNode
operator|.
name|myParent
expr_stmt|;
block|}
specifier|public
name|SVNCommitInfo
name|closeEdit
parameter_list|()
throws|throws
name|SVNException
block|{
return|return
literal|null
return|;
block|}
specifier|public
name|void
name|closeFile
parameter_list|(
name|String
name|path
parameter_list|,
name|String
name|textChecksum
parameter_list|)
throws|throws
name|SVNException
block|{
name|myFiles
operator|.
name|remove
argument_list|(
name|path
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|deleteEntry
parameter_list|(
name|String
name|path
parameter_list|,
name|long
name|revision
parameter_list|)
throws|throws
name|SVNException
block|{
name|String
name|name
init|=
name|SVNPathUtil
operator|.
name|tail
argument_list|(
name|path
argument_list|)
decl_stmt|;
name|Node
name|node
init|=
literal|null
decl_stmt|;
if|if
condition|(
name|myCurrentNode
operator|!=
literal|null
operator|&&
name|myCurrentNode
operator|.
name|myChildren
operator|!=
literal|null
condition|)
block|{
for|for
control|(
name|Iterator
name|children
init|=
name|myCurrentNode
operator|.
name|myChildren
operator|.
name|iterator
argument_list|()
init|;
name|children
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|Node
name|child
init|=
operator|(
name|Node
operator|)
name|children
operator|.
name|next
argument_list|()
decl_stmt|;
if|if
condition|(
name|child
operator|.
name|myName
operator|.
name|equals
argument_list|(
name|name
argument_list|)
condition|)
block|{
name|node
operator|=
name|child
expr_stmt|;
break|break;
block|}
block|}
block|}
if|if
condition|(
name|node
operator|==
literal|null
condition|)
block|{
if|if
condition|(
name|myCurrentNode
operator|!=
literal|null
condition|)
block|{
name|node
operator|=
operator|new
name|Node
argument_list|()
expr_stmt|;
name|node
operator|.
name|myName
operator|=
name|name
expr_stmt|;
name|node
operator|.
name|myParent
operator|=
name|myCurrentNode
expr_stmt|;
if|if
condition|(
name|myCurrentNode
operator|.
name|myChildren
operator|==
literal|null
condition|)
block|{
name|myCurrentNode
operator|.
name|myChildren
operator|=
operator|new
name|LinkedList
argument_list|()
expr_stmt|;
block|}
name|myCurrentNode
operator|.
name|myChildren
operator|.
name|add
argument_list|(
name|node
argument_list|)
expr_stmt|;
block|}
block|}
name|node
operator|.
name|myAction
operator|=
name|SVNChangeEntry
operator|.
name|TYPE_DELETED
expr_stmt|;
name|SVNLocationEntry
name|baseLocation
init|=
name|findRealBaseLocation
argument_list|(
name|node
argument_list|)
decl_stmt|;
name|FSRoot
name|baseRoot
init|=
literal|null
decl_stmt|;
if|if
condition|(
operator|!
name|SVNRevision
operator|.
name|isValidRevisionNumber
argument_list|(
name|baseLocation
operator|.
name|getRevision
argument_list|()
argument_list|)
condition|)
block|{
name|baseRoot
operator|=
name|myBaseRoot
expr_stmt|;
block|}
else|else
block|{
name|baseRoot
operator|=
name|myFSFS
operator|.
name|createRevisionRoot
argument_list|(
name|baseLocation
operator|.
name|getRevision
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|SVNNodeKind
name|kind
init|=
name|baseRoot
operator|.
name|checkNodeKind
argument_list|(
name|baseLocation
operator|.
name|getPath
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|kind
operator|==
name|SVNNodeKind
operator|.
name|NONE
condition|)
block|{
name|SVNErrorMessage
name|err
init|=
name|SVNErrorMessage
operator|.
name|create
argument_list|(
name|SVNErrorCode
operator|.
name|FS_NOT_FOUND
argument_list|,
literal|"''{0}'' not found in filesystem"
argument_list|,
name|path
argument_list|)
decl_stmt|;
name|SVNErrorManager
operator|.
name|error
argument_list|(
name|err
argument_list|,
name|SVNLogType
operator|.
name|FSFS
argument_list|)
expr_stmt|;
block|}
name|node
operator|.
name|myKind
operator|=
name|kind
expr_stmt|;
block|}
specifier|public
name|void
name|openDir
parameter_list|(
name|String
name|path
parameter_list|,
name|long
name|revision
parameter_list|)
throws|throws
name|SVNException
block|{
name|myCurrentNode
operator|=
name|addOrOpen
argument_list|(
name|path
argument_list|,
name|TYPE_REPLACED
argument_list|,
name|SVNNodeKind
operator|.
name|DIR
argument_list|,
name|myCurrentNode
argument_list|,
literal|null
argument_list|,
operator|-
literal|1
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|openFile
parameter_list|(
name|String
name|path
parameter_list|,
name|long
name|revision
parameter_list|)
throws|throws
name|SVNException
block|{
name|Node
name|node
init|=
name|addOrOpen
argument_list|(
name|path
argument_list|,
name|TYPE_REPLACED
argument_list|,
name|SVNNodeKind
operator|.
name|FILE
argument_list|,
name|myCurrentNode
argument_list|,
literal|null
argument_list|,
operator|-
literal|1
argument_list|)
decl_stmt|;
name|myFiles
operator|.
name|put
argument_list|(
name|path
argument_list|,
name|node
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|openRoot
parameter_list|(
name|long
name|revision
parameter_list|)
throws|throws
name|SVNException
block|{
name|myRootNode
operator|=
name|myCurrentNode
operator|=
operator|new
name|Node
argument_list|()
expr_stmt|;
name|myCurrentNode
operator|.
name|myName
operator|=
literal|""
expr_stmt|;
name|myCurrentNode
operator|.
name|myParent
operator|=
literal|null
expr_stmt|;
name|myCurrentNode
operator|.
name|myKind
operator|=
name|SVNNodeKind
operator|.
name|DIR
expr_stmt|;
name|myCurrentNode
operator|.
name|myAction
operator|=
name|TYPE_REPLACED
expr_stmt|;
block|}
specifier|public
name|void
name|targetRevision
parameter_list|(
name|long
name|revision
parameter_list|)
throws|throws
name|SVNException
block|{
block|}
specifier|public
name|void
name|applyTextDelta
parameter_list|(
name|String
name|path
parameter_list|,
name|String
name|baseChecksum
parameter_list|)
throws|throws
name|SVNException
block|{
name|Node
name|fileNode
init|=
operator|(
name|Node
operator|)
name|myFiles
operator|.
name|get
argument_list|(
name|path
argument_list|)
decl_stmt|;
name|fileNode
operator|.
name|myHasTextModifications
operator|=
literal|true
expr_stmt|;
block|}
specifier|public
name|OutputStream
name|textDeltaChunk
parameter_list|(
name|String
name|path
parameter_list|,
name|SVNDiffWindow
name|diffWindow
parameter_list|)
throws|throws
name|SVNException
block|{
return|return
literal|null
return|;
block|}
specifier|public
name|void
name|textDeltaEnd
parameter_list|(
name|String
name|path
parameter_list|)
throws|throws
name|SVNException
block|{
block|}
specifier|public
name|void
name|diff
parameter_list|(
name|FSRoot
name|root
parameter_list|,
name|long
name|baseRevision
parameter_list|,
name|ISVNGNUDiffGenerator
name|generator
parameter_list|,
name|OutputStream
name|os
parameter_list|)
throws|throws
name|SVNException
block|{
if|if
condition|(
name|myRootNode
operator|!=
literal|null
condition|)
block|{
name|FSRevisionRoot
name|baseRoot
init|=
name|root
operator|.
name|getOwner
argument_list|()
operator|.
name|createRevisionRoot
argument_list|(
name|baseRevision
argument_list|)
decl_stmt|;
try|try
block|{
name|diffImpl
argument_list|(
name|root
argument_list|,
name|baseRoot
argument_list|,
literal|"/"
argument_list|,
literal|"/"
argument_list|,
name|myRootNode
argument_list|,
name|generator
argument_list|,
name|os
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
name|cleanup
argument_list|()
expr_stmt|;
block|}
block|}
block|}
specifier|public
name|void
name|traverseTree
parameter_list|(
name|boolean
name|includeCopyInfo
parameter_list|,
name|ISVNChangeEntryHandler
name|handler
parameter_list|)
throws|throws
name|SVNException
block|{
if|if
condition|(
name|myRootNode
operator|!=
literal|null
condition|)
block|{
name|traverseChangedTreeImpl
argument_list|(
name|myRootNode
argument_list|,
literal|"/"
argument_list|,
name|includeCopyInfo
argument_list|,
name|handler
argument_list|)
expr_stmt|;
block|}
block|}
specifier|public
name|void
name|traverseChangedDirs
parameter_list|(
name|ISVNChangedDirectoriesHandler
name|handler
parameter_list|)
throws|throws
name|SVNException
block|{
if|if
condition|(
name|myRootNode
operator|!=
literal|null
condition|)
block|{
name|traverseChangedDirsImpl
argument_list|(
name|myRootNode
argument_list|,
literal|"/"
argument_list|,
name|handler
argument_list|)
expr_stmt|;
block|}
block|}
specifier|private
name|void
name|diffImpl
parameter_list|(
name|FSRoot
name|root
parameter_list|,
name|FSRevisionRoot
name|baseRoot
parameter_list|,
name|String
name|path
parameter_list|,
name|String
name|basePath
parameter_list|,
name|Node
name|node
parameter_list|,
name|ISVNGNUDiffGenerator
name|generator
parameter_list|,
name|OutputStream
name|os
parameter_list|)
throws|throws
name|SVNException
block|{
if|if
condition|(
name|myCancelHandler
operator|!=
literal|null
condition|)
block|{
name|myCancelHandler
operator|.
name|checkCancelled
argument_list|()
expr_stmt|;
block|}
name|DefaultSVNGNUDiffGenerator
name|defaultGenerator
init|=
literal|null
decl_stmt|;
if|if
condition|(
name|generator
operator|instanceof
name|DefaultSVNGNUDiffGenerator
condition|)
block|{
name|defaultGenerator
operator|=
operator|(
name|DefaultSVNGNUDiffGenerator
operator|)
name|generator
expr_stmt|;
name|defaultGenerator
operator|.
name|setHeaderWritten
argument_list|(
literal|false
argument_list|)
expr_stmt|;
name|defaultGenerator
operator|.
name|setDiffWritten
argument_list|(
literal|false
argument_list|)
expr_stmt|;
block|}
name|boolean
name|isCopy
init|=
literal|false
decl_stmt|;
name|boolean
name|printedHeader
init|=
literal|false
decl_stmt|;
if|if
condition|(
name|SVNRevision
operator|.
name|isValidRevisionNumber
argument_list|(
name|node
operator|.
name|myCopyFromRevision
argument_list|)
operator|&&
name|node
operator|.
name|myCopyFromPath
operator|!=
literal|null
condition|)
block|{
name|basePath
operator|=
name|node
operator|.
name|myCopyFromPath
expr_stmt|;
name|generator
operator|.
name|displayHeader
argument_list|(
name|ISVNGNUDiffGenerator
operator|.
name|COPIED
argument_list|,
name|path
argument_list|,
name|basePath
argument_list|,
name|node
operator|.
name|myCopyFromRevision
argument_list|,
name|os
argument_list|)
expr_stmt|;
name|baseRoot
operator|=
name|myFSFS
operator|.
name|createRevisionRoot
argument_list|(
name|node
operator|.
name|myCopyFromRevision
argument_list|)
expr_stmt|;
name|isCopy
operator|=
literal|true
expr_stmt|;
name|printedHeader
operator|=
literal|true
expr_stmt|;
block|}
name|boolean
name|doDiff
init|=
literal|false
decl_stmt|;
name|boolean
name|isOriginalEmpty
init|=
literal|false
decl_stmt|;
name|DiffItem
name|originalFile
init|=
literal|null
decl_stmt|;
name|DiffItem
name|newFile
init|=
literal|null
decl_stmt|;
if|if
condition|(
name|node
operator|.
name|myKind
operator|==
name|SVNNodeKind
operator|.
name|FILE
condition|)
block|{
if|if
condition|(
name|node
operator|.
name|myAction
operator|==
name|TYPE_REPLACED
operator|&&
name|node
operator|.
name|myHasTextModifications
condition|)
block|{
name|doDiff
operator|=
literal|true
expr_stmt|;
name|originalFile
operator|=
name|prepareTmpFile
argument_list|(
name|baseRoot
argument_list|,
name|basePath
argument_list|,
name|generator
argument_list|)
expr_stmt|;
name|newFile
operator|=
name|prepareTmpFile
argument_list|(
name|root
argument_list|,
name|path
argument_list|,
name|generator
argument_list|)
expr_stmt|;
block|}
if|else if
condition|(
name|generator
operator|.
name|isDiffCopied
argument_list|()
operator|&&
name|node
operator|.
name|myAction
operator|==
name|SVNChangeEntry
operator|.
name|TYPE_ADDED
operator|&&
name|isCopy
condition|)
block|{
if|if
condition|(
name|node
operator|.
name|myHasTextModifications
condition|)
block|{
name|doDiff
operator|=
literal|true
expr_stmt|;
name|originalFile
operator|=
name|prepareTmpFile
argument_list|(
name|baseRoot
argument_list|,
name|basePath
argument_list|,
name|generator
argument_list|)
expr_stmt|;
name|newFile
operator|=
name|prepareTmpFile
argument_list|(
name|root
argument_list|,
name|path
argument_list|,
name|generator
argument_list|)
expr_stmt|;
block|}
block|}
if|else if
condition|(
name|generator
operator|.
name|isDiffAdded
argument_list|()
operator|&&
name|node
operator|.
name|myAction
operator|==
name|SVNChangeEntry
operator|.
name|TYPE_ADDED
condition|)
block|{
name|doDiff
operator|=
literal|true
expr_stmt|;
name|isOriginalEmpty
operator|=
literal|true
expr_stmt|;
name|originalFile
operator|=
name|prepareTmpFile
argument_list|(
literal|null
argument_list|,
name|basePath
argument_list|,
name|generator
argument_list|)
expr_stmt|;
name|newFile
operator|=
name|prepareTmpFile
argument_list|(
name|root
argument_list|,
name|path
argument_list|,
name|generator
argument_list|)
expr_stmt|;
block|}
if|else if
condition|(
name|generator
operator|.
name|isDiffDeleted
argument_list|()
operator|&&
name|node
operator|.
name|myAction
operator|==
name|SVNChangeEntry
operator|.
name|TYPE_DELETED
condition|)
block|{
name|doDiff
operator|=
literal|true
expr_stmt|;
name|originalFile
operator|=
name|prepareTmpFile
argument_list|(
literal|null
argument_list|,
name|basePath
argument_list|,
name|generator
argument_list|)
expr_stmt|;
name|newFile
operator|=
name|prepareTmpFile
argument_list|(
literal|null
argument_list|,
name|path
argument_list|,
name|generator
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
operator|!
name|printedHeader
operator|&&
operator|(
name|node
operator|.
name|myAction
operator|!=
name|TYPE_REPLACED
operator|||
name|node
operator|.
name|myHasTextModifications
operator|)
condition|)
block|{
if|if
condition|(
name|node
operator|.
name|myAction
operator|==
name|SVNChangeEntry
operator|.
name|TYPE_ADDED
condition|)
block|{
name|generator
operator|.
name|displayHeader
argument_list|(
name|ISVNGNUDiffGenerator
operator|.
name|ADDED
argument_list|,
name|path
argument_list|,
literal|null
argument_list|,
operator|-
literal|1
argument_list|,
name|os
argument_list|)
expr_stmt|;
block|}
if|else if
condition|(
name|node
operator|.
name|myAction
operator|==
name|SVNChangeEntry
operator|.
name|TYPE_DELETED
condition|)
block|{
name|generator
operator|.
name|displayHeader
argument_list|(
name|ISVNGNUDiffGenerator
operator|.
name|DELETED
argument_list|,
name|path
argument_list|,
literal|null
argument_list|,
operator|-
literal|1
argument_list|,
name|os
argument_list|)
expr_stmt|;
block|}
if|else if
condition|(
name|node
operator|.
name|myAction
operator|==
name|TYPE_REPLACED
condition|)
block|{
name|generator
operator|.
name|displayHeader
argument_list|(
name|ISVNGNUDiffGenerator
operator|.
name|MODIFIED
argument_list|,
name|path
argument_list|,
literal|null
argument_list|,
operator|-
literal|1
argument_list|,
name|os
argument_list|)
expr_stmt|;
block|}
name|printedHeader
operator|=
literal|true
expr_stmt|;
block|}
block|}
if|if
condition|(
name|doDiff
condition|)
block|{
if|if
condition|(
name|defaultGenerator
operator|!=
literal|null
condition|)
block|{
if|if
condition|(
name|isOriginalEmpty
condition|)
block|{
name|defaultGenerator
operator|.
name|setOriginalFile
argument_list|(
literal|null
argument_list|,
name|path
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|defaultGenerator
operator|.
name|setOriginalFile
argument_list|(
name|baseRoot
argument_list|,
name|basePath
argument_list|)
expr_stmt|;
block|}
name|defaultGenerator
operator|.
name|setNewFile
argument_list|(
name|root
argument_list|,
name|path
argument_list|)
expr_stmt|;
block|}
name|String
name|rev1
init|=
name|isOriginalEmpty
condition|?
literal|"(rev 0)"
else|:
literal|"(rev "
operator|+
name|baseRoot
operator|.
name|getRevision
argument_list|()
operator|+
literal|")"
decl_stmt|;
name|String
name|rev2
init|=
literal|null
decl_stmt|;
if|if
condition|(
name|root
operator|instanceof
name|FSRevisionRoot
condition|)
block|{
name|FSRevisionRoot
name|revRoot
init|=
operator|(
name|FSRevisionRoot
operator|)
name|root
decl_stmt|;
name|rev2
operator|=
literal|"(rev "
operator|+
name|revRoot
operator|.
name|getRevision
argument_list|()
operator|+
literal|")"
expr_stmt|;
block|}
else|else
block|{
name|FSTransactionRoot
name|txnRoot
init|=
operator|(
name|FSTransactionRoot
operator|)
name|root
decl_stmt|;
name|rev2
operator|=
literal|"(txn "
operator|+
name|txnRoot
operator|.
name|getTxnID
argument_list|()
operator|+
literal|")"
expr_stmt|;
block|}
name|generator
operator|.
name|displayFileDiff
argument_list|(
name|path
argument_list|,
name|originalFile
operator|.
name|myTmpFile
argument_list|,
name|newFile
operator|.
name|myTmpFile
argument_list|,
name|rev1
argument_list|,
name|rev2
argument_list|,
name|originalFile
operator|.
name|myMimeType
argument_list|,
name|newFile
operator|.
name|myMimeType
argument_list|,
name|os
argument_list|)
expr_stmt|;
name|boolean
name|hasDiff
init|=
name|defaultGenerator
operator|!=
literal|null
condition|?
name|defaultGenerator
operator|.
name|isDiffWritten
argument_list|()
else|:
literal|true
decl_stmt|;
if|if
condition|(
operator|!
name|hasDiff
operator|&&
operator|!
name|node
operator|.
name|myHasPropModifications
operator|&&
operator|(
name|node
operator|.
name|myAction
operator|==
name|SVNChangeEntry
operator|.
name|TYPE_ADDED
operator|&&
name|generator
operator|.
name|isDiffAdded
argument_list|()
operator|||
name|node
operator|.
name|myAction
operator|==
name|SVNChangeEntry
operator|.
name|TYPE_DELETED
operator|&&
name|generator
operator|.
name|isDiffDeleted
argument_list|()
operator|)
condition|)
block|{
name|int
name|kind
init|=
name|node
operator|.
name|myAction
operator|==
name|SVNChangeEntry
operator|.
name|TYPE_ADDED
condition|?
name|ISVNGNUDiffGenerator
operator|.
name|ADDED
else|:
name|ISVNGNUDiffGenerator
operator|.
name|DELETED
decl_stmt|;
name|defaultGenerator
operator|.
name|setHeaderWritten
argument_list|(
literal|false
argument_list|)
expr_stmt|;
name|defaultGenerator
operator|.
name|displayHeader
argument_list|(
name|kind
argument_list|,
name|path
argument_list|,
literal|null
argument_list|,
operator|-
literal|1
argument_list|,
name|os
argument_list|)
expr_stmt|;
name|defaultGenerator
operator|.
name|printHeader
argument_list|(
name|os
argument_list|)
expr_stmt|;
block|}
block|}
if|else if
condition|(
name|printedHeader
condition|)
block|{
name|generator
operator|.
name|displayHeader
argument_list|(
name|ISVNGNUDiffGenerator
operator|.
name|NO_DIFF
argument_list|,
name|path
argument_list|,
literal|null
argument_list|,
operator|-
literal|1
argument_list|,
name|os
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|node
operator|.
name|myHasPropModifications
operator|&&
name|node
operator|.
name|myAction
operator|!=
name|SVNChangeEntry
operator|.
name|TYPE_DELETED
condition|)
block|{
name|FSRevisionNode
name|localNode
init|=
name|root
operator|.
name|getRevisionNode
argument_list|(
name|path
argument_list|)
decl_stmt|;
name|SVNProperties
name|props
init|=
name|localNode
operator|.
name|getProperties
argument_list|(
name|root
operator|.
name|getOwner
argument_list|()
argument_list|)
decl_stmt|;
name|SVNProperties
name|baseProps
init|=
literal|null
decl_stmt|;
if|if
condition|(
name|node
operator|.
name|myAction
operator|!=
name|SVNChangeEntry
operator|.
name|TYPE_ADDED
condition|)
block|{
name|FSRevisionNode
name|baseNode
init|=
name|baseRoot
operator|.
name|getRevisionNode
argument_list|(
name|basePath
argument_list|)
decl_stmt|;
name|baseProps
operator|=
name|baseNode
operator|.
name|getProperties
argument_list|(
name|baseRoot
operator|.
name|getOwner
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|SVNProperties
name|propsDiff
init|=
name|FSRepositoryUtil
operator|.
name|getPropsDiffs
argument_list|(
name|baseProps
argument_list|,
name|props
argument_list|)
decl_stmt|;
if|if
condition|(
name|propsDiff
operator|.
name|size
argument_list|()
operator|>
literal|0
condition|)
block|{
name|String
name|displayPath
init|=
name|path
operator|.
name|startsWith
argument_list|(
literal|"/"
argument_list|)
condition|?
name|path
operator|.
name|substring
argument_list|(
literal|1
argument_list|)
else|:
name|path
decl_stmt|;
name|generator
operator|.
name|displayPropDiff
argument_list|(
name|displayPath
argument_list|,
name|baseProps
argument_list|,
name|propsDiff
argument_list|,
name|os
argument_list|)
expr_stmt|;
block|}
block|}
if|if
condition|(
name|node
operator|.
name|myChildren
operator|==
literal|null
operator|||
name|node
operator|.
name|myChildren
operator|.
name|size
argument_list|()
operator|==
literal|0
condition|)
block|{
return|return;
block|}
for|for
control|(
name|Iterator
name|children
init|=
name|node
operator|.
name|myChildren
operator|.
name|iterator
argument_list|()
init|;
name|children
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|Node
name|childNode
init|=
operator|(
name|Node
operator|)
name|children
operator|.
name|next
argument_list|()
decl_stmt|;
name|String
name|childPath
init|=
name|SVNPathUtil
operator|.
name|getAbsolutePath
argument_list|(
name|SVNPathUtil
operator|.
name|append
argument_list|(
name|path
argument_list|,
name|childNode
operator|.
name|myName
argument_list|)
argument_list|)
decl_stmt|;
name|String
name|childBasePath
init|=
name|SVNPathUtil
operator|.
name|getAbsolutePath
argument_list|(
name|SVNPathUtil
operator|.
name|append
argument_list|(
name|basePath
argument_list|,
name|childNode
operator|.
name|myName
argument_list|)
argument_list|)
decl_stmt|;
name|diffImpl
argument_list|(
name|root
argument_list|,
name|baseRoot
argument_list|,
name|childPath
argument_list|,
name|childBasePath
argument_list|,
name|childNode
argument_list|,
name|generator
argument_list|,
name|os
argument_list|)
expr_stmt|;
block|}
block|}
specifier|private
name|DiffItem
name|prepareTmpFile
parameter_list|(
name|FSRoot
name|root
parameter_list|,
name|String
name|path
parameter_list|,
name|ISVNDiffGenerator
name|generator
parameter_list|)
throws|throws
name|SVNException
block|{
name|String
name|mimeType
init|=
literal|null
decl_stmt|;
if|if
condition|(
name|root
operator|!=
literal|null
condition|)
block|{
name|FSRevisionNode
name|node
init|=
name|root
operator|.
name|getRevisionNode
argument_list|(
name|path
argument_list|)
decl_stmt|;
name|SVNProperties
name|nodeProps
init|=
name|node
operator|.
name|getProperties
argument_list|(
name|root
operator|.
name|getOwner
argument_list|()
argument_list|)
decl_stmt|;
name|mimeType
operator|=
name|nodeProps
operator|.
name|getStringValue
argument_list|(
name|SVNProperty
operator|.
name|MIME_TYPE
argument_list|)
expr_stmt|;
if|if
condition|(
name|SVNProperty
operator|.
name|isBinaryMimeType
argument_list|(
name|mimeType
argument_list|)
operator|&&
operator|!
name|generator
operator|.
name|isForcedBinaryDiff
argument_list|()
condition|)
block|{
return|return
operator|new
name|DiffItem
argument_list|(
name|mimeType
argument_list|,
literal|null
argument_list|)
return|;
block|}
block|}
name|File
name|tmpFile
init|=
name|createTempFile
argument_list|(
name|generator
argument_list|)
decl_stmt|;
if|if
condition|(
name|root
operator|!=
literal|null
condition|)
block|{
name|InputStream
name|contents
init|=
literal|null
decl_stmt|;
name|OutputStream
name|tmpOS
init|=
literal|null
decl_stmt|;
try|try
block|{
name|contents
operator|=
name|root
operator|.
name|getFileStreamForPath
argument_list|(
operator|new
name|SVNDeltaCombiner
argument_list|()
argument_list|,
name|path
argument_list|)
expr_stmt|;
name|tmpOS
operator|=
name|SVNFileUtil
operator|.
name|openFileForWriting
argument_list|(
name|tmpFile
argument_list|)
expr_stmt|;
name|FSRepositoryUtil
operator|.
name|copy
argument_list|(
name|contents
argument_list|,
name|tmpOS
argument_list|,
name|myCancelHandler
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
name|SVNFileUtil
operator|.
name|closeFile
argument_list|(
name|contents
argument_list|)
expr_stmt|;
name|SVNFileUtil
operator|.
name|closeFile
argument_list|(
name|tmpOS
argument_list|)
expr_stmt|;
block|}
block|}
return|return
operator|new
name|DiffItem
argument_list|(
name|mimeType
argument_list|,
name|tmpFile
argument_list|)
return|;
block|}
specifier|private
name|File
name|createTempFile
parameter_list|(
name|ISVNDiffGenerator
name|generator
parameter_list|)
throws|throws
name|SVNException
block|{
name|File
name|tmpFile
init|=
literal|null
decl_stmt|;
try|try
block|{
return|return
name|File
operator|.
name|createTempFile
argument_list|(
literal|"diff."
argument_list|,
literal|".tmp"
argument_list|,
name|getTempDirectory
argument_list|(
name|generator
argument_list|)
argument_list|)
return|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
name|SVNFileUtil
operator|.
name|deleteFile
argument_list|(
name|tmpFile
argument_list|)
expr_stmt|;
name|SVNErrorMessage
name|err
init|=
name|SVNErrorMessage
operator|.
name|create
argument_list|(
name|SVNErrorCode
operator|.
name|IO_ERROR
argument_list|,
name|e
operator|.
name|getMessage
argument_list|()
argument_list|)
decl_stmt|;
name|SVNErrorManager
operator|.
name|error
argument_list|(
name|err
argument_list|,
name|SVNLogType
operator|.
name|DEFAULT
argument_list|)
expr_stmt|;
block|}
return|return
literal|null
return|;
block|}
specifier|private
name|File
name|getTempDirectory
parameter_list|(
name|ISVNDiffGenerator
name|generator
parameter_list|)
throws|throws
name|SVNException
block|{
if|if
condition|(
name|myTempDirectory
operator|==
literal|null
operator|||
operator|!
name|myTempDirectory
operator|.
name|exists
argument_list|()
condition|)
block|{
name|myTempDirectory
operator|=
name|generator
operator|.
name|createTempDirectory
argument_list|()
expr_stmt|;
block|}
return|return
name|myTempDirectory
return|;
block|}
specifier|private
name|void
name|cleanup
parameter_list|()
block|{
if|if
condition|(
name|myTempDirectory
operator|!=
literal|null
condition|)
block|{
name|SVNFileUtil
operator|.
name|deleteAll
argument_list|(
name|myTempDirectory
argument_list|,
literal|true
argument_list|)
expr_stmt|;
block|}
block|}
specifier|private
name|void
name|traverseChangedDirsImpl
parameter_list|(
name|Node
name|node
parameter_list|,
name|String
name|path
parameter_list|,
name|ISVNChangedDirectoriesHandler
name|handler
parameter_list|)
throws|throws
name|SVNException
block|{
if|if
condition|(
name|myCancelHandler
operator|!=
literal|null
condition|)
block|{
name|myCancelHandler
operator|.
name|checkCancelled
argument_list|()
expr_stmt|;
block|}
if|if
condition|(
name|node
operator|==
literal|null
operator|||
name|node
operator|.
name|myKind
operator|!=
name|SVNNodeKind
operator|.
name|DIR
condition|)
block|{
return|return;
block|}
name|boolean
name|proceed
init|=
name|node
operator|.
name|myHasPropModifications
decl_stmt|;
if|if
condition|(
operator|!
name|proceed
operator|&&
name|node
operator|.
name|myChildren
operator|!=
literal|null
condition|)
block|{
for|for
control|(
name|Iterator
name|children
init|=
name|node
operator|.
name|myChildren
operator|.
name|iterator
argument_list|()
init|;
name|children
operator|.
name|hasNext
argument_list|()
operator|&&
operator|!
name|proceed
condition|;
control|)
block|{
name|Node
name|child
init|=
operator|(
name|Node
operator|)
name|children
operator|.
name|next
argument_list|()
decl_stmt|;
if|if
condition|(
name|child
operator|.
name|myKind
operator|==
name|SVNNodeKind
operator|.
name|FILE
operator|||
name|child
operator|.
name|myHasTextModifications
operator|||
name|child
operator|.
name|myAction
operator|==
name|SVNChangeEntry
operator|.
name|TYPE_ADDED
operator|||
name|child
operator|.
name|myAction
operator|==
name|SVNChangeEntry
operator|.
name|TYPE_DELETED
condition|)
block|{
name|proceed
operator|=
literal|true
expr_stmt|;
block|}
block|}
block|}
if|if
condition|(
name|proceed
operator|&&
name|handler
operator|!=
literal|null
condition|)
block|{
name|handler
operator|.
name|handleDir
argument_list|(
name|path
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|node
operator|.
name|myChildren
operator|==
literal|null
operator|||
name|node
operator|.
name|myChildren
operator|.
name|size
argument_list|()
operator|==
literal|0
condition|)
block|{
return|return;
block|}
for|for
control|(
name|Iterator
name|children
init|=
name|node
operator|.
name|myChildren
operator|.
name|iterator
argument_list|()
init|;
name|children
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|Node
name|childNode
init|=
operator|(
name|Node
operator|)
name|children
operator|.
name|next
argument_list|()
decl_stmt|;
name|String
name|fullPath
init|=
name|SVNPathUtil
operator|.
name|getAbsolutePath
argument_list|(
name|SVNPathUtil
operator|.
name|append
argument_list|(
name|path
argument_list|,
name|childNode
operator|.
name|myName
argument_list|)
argument_list|)
decl_stmt|;
name|traverseChangedDirsImpl
argument_list|(
name|childNode
argument_list|,
name|fullPath
argument_list|,
name|handler
argument_list|)
expr_stmt|;
block|}
block|}
specifier|private
name|void
name|traverseChangedTreeImpl
parameter_list|(
name|Node
name|node
parameter_list|,
name|String
name|path
parameter_list|,
name|boolean
name|includeCopyInfo
parameter_list|,
name|ISVNChangeEntryHandler
name|handler
parameter_list|)
throws|throws
name|SVNException
block|{
if|if
condition|(
name|myCancelHandler
operator|!=
literal|null
condition|)
block|{
name|myCancelHandler
operator|.
name|checkCancelled
argument_list|()
expr_stmt|;
block|}
if|if
condition|(
name|node
operator|==
literal|null
condition|)
block|{
return|return;
block|}
name|SVNChangeEntry
name|changeEntry
init|=
literal|null
decl_stmt|;
if|if
condition|(
name|node
operator|.
name|myAction
operator|==
name|SVNChangeEntry
operator|.
name|TYPE_ADDED
condition|)
block|{
name|String
name|copyFromPath
init|=
name|includeCopyInfo
condition|?
name|node
operator|.
name|myCopyFromPath
else|:
literal|null
decl_stmt|;
name|long
name|copyFromRevision
init|=
name|includeCopyInfo
condition|?
name|node
operator|.
name|myCopyFromRevision
else|:
operator|-
literal|1
decl_stmt|;
name|changeEntry
operator|=
operator|new
name|SVNChangeEntry
argument_list|(
name|path
argument_list|,
name|node
operator|.
name|myKind
argument_list|,
name|node
operator|.
name|myAction
argument_list|,
name|copyFromPath
argument_list|,
name|copyFromRevision
argument_list|,
literal|false
argument_list|,
literal|false
argument_list|)
expr_stmt|;
block|}
if|else if
condition|(
name|node
operator|.
name|myAction
operator|==
name|SVNChangeEntry
operator|.
name|TYPE_DELETED
condition|)
block|{
name|changeEntry
operator|=
operator|new
name|SVNChangeEntry
argument_list|(
name|path
argument_list|,
name|node
operator|.
name|myKind
argument_list|,
name|node
operator|.
name|myAction
argument_list|,
literal|null
argument_list|,
operator|-
literal|1
argument_list|,
literal|false
argument_list|,
literal|false
argument_list|)
expr_stmt|;
block|}
if|else if
condition|(
name|node
operator|.
name|myAction
operator|==
name|TYPE_REPLACED
condition|)
block|{
if|if
condition|(
name|node
operator|.
name|myHasPropModifications
operator|||
name|node
operator|.
name|myHasTextModifications
condition|)
block|{
name|changeEntry
operator|=
operator|new
name|SVNChangeEntry
argument_list|(
name|path
argument_list|,
name|node
operator|.
name|myKind
argument_list|,
name|SVNChangeEntry
operator|.
name|TYPE_UPDATED
argument_list|,
literal|null
argument_list|,
operator|-
literal|1
argument_list|,
name|node
operator|.
name|myHasTextModifications
argument_list|,
name|node
operator|.
name|myHasPropModifications
argument_list|)
expr_stmt|;
block|}
block|}
if|if
condition|(
name|changeEntry
operator|!=
literal|null
operator|&&
name|handler
operator|!=
literal|null
condition|)
block|{
name|handler
operator|.
name|handleEntry
argument_list|(
name|changeEntry
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|node
operator|.
name|myChildren
operator|==
literal|null
operator|||
name|node
operator|.
name|myChildren
operator|.
name|size
argument_list|()
operator|==
literal|0
condition|)
block|{
return|return;
block|}
for|for
control|(
name|Iterator
name|children
init|=
name|node
operator|.
name|myChildren
operator|.
name|iterator
argument_list|()
init|;
name|children
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|Node
name|childNode
init|=
operator|(
name|Node
operator|)
name|children
operator|.
name|next
argument_list|()
decl_stmt|;
name|String
name|fullPath
init|=
name|SVNPathUtil
operator|.
name|getAbsolutePath
argument_list|(
name|SVNPathUtil
operator|.
name|append
argument_list|(
name|path
argument_list|,
name|childNode
operator|.
name|myName
argument_list|)
argument_list|)
decl_stmt|;
name|traverseChangedTreeImpl
argument_list|(
name|childNode
argument_list|,
name|fullPath
argument_list|,
name|includeCopyInfo
argument_list|,
name|handler
argument_list|)
expr_stmt|;
block|}
block|}
specifier|private
name|SVNLocationEntry
name|findRealBaseLocation
parameter_list|(
name|Node
name|node
parameter_list|)
throws|throws
name|SVNException
block|{
if|if
condition|(
name|node
operator|.
name|myAction
operator|==
name|SVNChangeEntry
operator|.
name|TYPE_ADDED
operator|&&
name|node
operator|.
name|myCopyFromPath
operator|!=
literal|null
operator|&&
name|SVNRevision
operator|.
name|isValidRevisionNumber
argument_list|(
name|node
operator|.
name|myCopyFromRevision
argument_list|)
condition|)
block|{
return|return
operator|new
name|SVNLocationEntry
argument_list|(
name|node
operator|.
name|myCopyFromRevision
argument_list|,
name|node
operator|.
name|myCopyFromPath
argument_list|)
return|;
block|}
if|if
condition|(
name|node
operator|.
name|myParent
operator|!=
literal|null
condition|)
block|{
name|SVNLocationEntry
name|location
init|=
name|findRealBaseLocation
argument_list|(
name|node
operator|.
name|myParent
argument_list|)
decl_stmt|;
return|return
operator|new
name|SVNLocationEntry
argument_list|(
name|location
operator|.
name|getRevision
argument_list|()
argument_list|,
name|SVNPathUtil
operator|.
name|getAbsolutePath
argument_list|(
name|SVNPathUtil
operator|.
name|append
argument_list|(
name|location
operator|.
name|getPath
argument_list|()
argument_list|,
name|node
operator|.
name|myName
argument_list|)
argument_list|)
argument_list|)
return|;
block|}
return|return
operator|new
name|SVNLocationEntry
argument_list|(
operator|-
literal|1
argument_list|,
literal|"/"
argument_list|)
return|;
block|}
specifier|private
name|Node
name|addOrOpen
parameter_list|(
name|String
name|path
parameter_list|,
name|char
name|action
parameter_list|,
name|SVNNodeKind
name|kind
parameter_list|,
name|Node
name|parent
parameter_list|,
name|String
name|copyFromPath
parameter_list|,
name|long
name|copyFromRevision
parameter_list|)
block|{
if|if
condition|(
name|parent
operator|.
name|myChildren
operator|==
literal|null
condition|)
block|{
name|parent
operator|.
name|myChildren
operator|=
operator|new
name|LinkedList
argument_list|()
expr_stmt|;
block|}
name|Node
name|node
init|=
operator|new
name|Node
argument_list|()
decl_stmt|;
name|node
operator|.
name|myName
operator|=
name|SVNPathUtil
operator|.
name|tail
argument_list|(
name|path
argument_list|)
expr_stmt|;
name|node
operator|.
name|myAction
operator|=
name|action
expr_stmt|;
name|node
operator|.
name|myKind
operator|=
name|kind
expr_stmt|;
name|node
operator|.
name|myCopyFromPath
operator|=
name|copyFromPath
expr_stmt|;
name|node
operator|.
name|myCopyFromRevision
operator|=
name|copyFromRevision
expr_stmt|;
name|node
operator|.
name|myParent
operator|=
name|parent
expr_stmt|;
name|parent
operator|.
name|myChildren
operator|.
name|add
argument_list|(
name|node
argument_list|)
expr_stmt|;
return|return
name|node
return|;
block|}
specifier|private
class|class
name|Node
block|{
name|SVNNodeKind
name|myKind
decl_stmt|;
name|char
name|myAction
decl_stmt|;
name|boolean
name|myHasTextModifications
decl_stmt|;
name|boolean
name|myHasPropModifications
decl_stmt|;
name|String
name|myName
decl_stmt|;
name|long
name|myCopyFromRevision
decl_stmt|;
name|String
name|myCopyFromPath
decl_stmt|;
name|Node
name|myParent
decl_stmt|;
name|LinkedList
name|myChildren
decl_stmt|;
block|}
specifier|private
class|class
name|DiffItem
block|{
name|String
name|myMimeType
decl_stmt|;
name|File
name|myTmpFile
decl_stmt|;
specifier|public
name|DiffItem
parameter_list|(
name|String
name|mimeType
parameter_list|,
name|File
name|tmpFile
parameter_list|)
block|{
name|myMimeType
operator|=
name|mimeType
expr_stmt|;
name|myTmpFile
operator|=
name|tmpFile
expr_stmt|;
block|}
block|}
block|}
end_class

end_unit

