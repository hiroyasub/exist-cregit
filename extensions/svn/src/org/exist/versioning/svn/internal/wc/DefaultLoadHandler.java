begin_unit|revision:1.0.0;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * ====================================================================  * Copyright (c) 2004-2010 TMate Software Ltd.  All rights reserved.  *  * This software is licensed as described in the file COPYING, which  * you should have received as part of this distribution.  The terms  * are also available at http://svnkit.com/license.html  * If newer versions of this license are posted there, you may use a  * newer version instead, at your option.  * ====================================================================  */
end_comment

begin_package
package|package
name|org
operator|.
name|exist
operator|.
name|versioning
operator|.
name|svn
operator|.
name|internal
operator|.
name|wc
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|File
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|InputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|OutputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Arrays
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Iterator
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|TreeMap
import|;
end_import

begin_import
import|import
name|org
operator|.
name|tmatesoft
operator|.
name|svn
operator|.
name|core
operator|.
name|SVNErrorCode
import|;
end_import

begin_import
import|import
name|org
operator|.
name|tmatesoft
operator|.
name|svn
operator|.
name|core
operator|.
name|SVNErrorMessage
import|;
end_import

begin_import
import|import
name|org
operator|.
name|tmatesoft
operator|.
name|svn
operator|.
name|core
operator|.
name|SVNException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|tmatesoft
operator|.
name|svn
operator|.
name|core
operator|.
name|SVNMergeRange
import|;
end_import

begin_import
import|import
name|org
operator|.
name|tmatesoft
operator|.
name|svn
operator|.
name|core
operator|.
name|SVNMergeRangeList
import|;
end_import

begin_import
import|import
name|org
operator|.
name|tmatesoft
operator|.
name|svn
operator|.
name|core
operator|.
name|SVNNodeKind
import|;
end_import

begin_import
import|import
name|org
operator|.
name|tmatesoft
operator|.
name|svn
operator|.
name|core
operator|.
name|SVNProperties
import|;
end_import

begin_import
import|import
name|org
operator|.
name|tmatesoft
operator|.
name|svn
operator|.
name|core
operator|.
name|SVNProperty
import|;
end_import

begin_import
import|import
name|org
operator|.
name|tmatesoft
operator|.
name|svn
operator|.
name|core
operator|.
name|SVNPropertyValue
import|;
end_import

begin_import
import|import
name|org
operator|.
name|tmatesoft
operator|.
name|svn
operator|.
name|core
operator|.
name|SVNRevisionProperty
import|;
end_import

begin_import
import|import
name|org
operator|.
name|tmatesoft
operator|.
name|svn
operator|.
name|core
operator|.
name|internal
operator|.
name|delta
operator|.
name|SVNDeltaReader
import|;
end_import

begin_import
import|import
name|org
operator|.
name|tmatesoft
operator|.
name|svn
operator|.
name|core
operator|.
name|internal
operator|.
name|io
operator|.
name|fs
operator|.
name|FSCommitter
import|;
end_import

begin_import
import|import
name|org
operator|.
name|tmatesoft
operator|.
name|svn
operator|.
name|core
operator|.
name|internal
operator|.
name|io
operator|.
name|fs
operator|.
name|FSDeltaConsumer
import|;
end_import

begin_import
import|import
name|org
operator|.
name|tmatesoft
operator|.
name|svn
operator|.
name|core
operator|.
name|internal
operator|.
name|io
operator|.
name|fs
operator|.
name|FSFS
import|;
end_import

begin_import
import|import
name|org
operator|.
name|tmatesoft
operator|.
name|svn
operator|.
name|core
operator|.
name|internal
operator|.
name|io
operator|.
name|fs
operator|.
name|FSRevisionNode
import|;
end_import

begin_import
import|import
name|org
operator|.
name|tmatesoft
operator|.
name|svn
operator|.
name|core
operator|.
name|internal
operator|.
name|io
operator|.
name|fs
operator|.
name|FSRevisionRoot
import|;
end_import

begin_import
import|import
name|org
operator|.
name|tmatesoft
operator|.
name|svn
operator|.
name|core
operator|.
name|internal
operator|.
name|io
operator|.
name|fs
operator|.
name|FSTransactionInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|tmatesoft
operator|.
name|svn
operator|.
name|core
operator|.
name|internal
operator|.
name|io
operator|.
name|fs
operator|.
name|FSTransactionRoot
import|;
end_import

begin_import
import|import
name|org
operator|.
name|tmatesoft
operator|.
name|svn
operator|.
name|core
operator|.
name|internal
operator|.
name|util
operator|.
name|FixedSizeInputStream
import|;
end_import

begin_import
import|import
name|org
operator|.
name|tmatesoft
operator|.
name|svn
operator|.
name|core
operator|.
name|internal
operator|.
name|util
operator|.
name|SVNHashMap
import|;
end_import

begin_import
import|import
name|org
operator|.
name|tmatesoft
operator|.
name|svn
operator|.
name|core
operator|.
name|internal
operator|.
name|util
operator|.
name|SVNMergeInfoUtil
import|;
end_import

begin_import
import|import
name|org
operator|.
name|tmatesoft
operator|.
name|svn
operator|.
name|core
operator|.
name|internal
operator|.
name|util
operator|.
name|SVNPathUtil
import|;
end_import

begin_import
import|import
name|org
operator|.
name|tmatesoft
operator|.
name|svn
operator|.
name|core
operator|.
name|internal
operator|.
name|wc
operator|.
name|ISVNLoadHandler
import|;
end_import

begin_import
import|import
name|org
operator|.
name|tmatesoft
operator|.
name|svn
operator|.
name|core
operator|.
name|io
operator|.
name|diff
operator|.
name|SVNDeltaGenerator
import|;
end_import

begin_import
import|import
name|org
operator|.
name|tmatesoft
operator|.
name|svn
operator|.
name|core
operator|.
name|wc
operator|.
name|ISVNEventHandler
import|;
end_import

begin_import
import|import
name|org
operator|.
name|tmatesoft
operator|.
name|svn
operator|.
name|core
operator|.
name|wc
operator|.
name|SVNRevision
import|;
end_import

begin_import
import|import
name|org
operator|.
name|tmatesoft
operator|.
name|svn
operator|.
name|core
operator|.
name|wc
operator|.
name|admin
operator|.
name|ISVNAdminEventHandler
import|;
end_import

begin_import
import|import
name|org
operator|.
name|tmatesoft
operator|.
name|svn
operator|.
name|core
operator|.
name|wc
operator|.
name|admin
operator|.
name|SVNAdminEvent
import|;
end_import

begin_import
import|import
name|org
operator|.
name|tmatesoft
operator|.
name|svn
operator|.
name|core
operator|.
name|wc
operator|.
name|admin
operator|.
name|SVNAdminEventAction
import|;
end_import

begin_import
import|import
name|org
operator|.
name|tmatesoft
operator|.
name|svn
operator|.
name|core
operator|.
name|wc
operator|.
name|admin
operator|.
name|SVNUUIDAction
import|;
end_import

begin_import
import|import
name|org
operator|.
name|tmatesoft
operator|.
name|svn
operator|.
name|util
operator|.
name|SVNLogType
import|;
end_import

begin_comment
comment|/**  * @version 1.3  * @author  TMate Software Ltd.  */
end_comment

begin_class
specifier|public
class|class
name|DefaultLoadHandler
implements|implements
name|ISVNLoadHandler
block|{
specifier|private
name|FSFS
name|myFSFS
decl_stmt|;
specifier|private
name|RevisionBaton
name|myCurrentRevisionBaton
decl_stmt|;
specifier|private
name|NodeBaton
name|myCurrentNodeBaton
decl_stmt|;
specifier|private
name|boolean
name|myIsUsePreCommitHook
decl_stmt|;
specifier|private
name|boolean
name|myIsUsePostCommitHook
decl_stmt|;
specifier|private
name|Map
name|myRevisionsMap
decl_stmt|;
specifier|private
name|String
name|myParentDir
decl_stmt|;
specifier|private
name|SVNUUIDAction
name|myUUIDAction
decl_stmt|;
specifier|private
name|SVNDeltaReader
name|myDeltaReader
decl_stmt|;
specifier|private
name|SVNDeltaGenerator
name|myDeltaGenerator
decl_stmt|;
specifier|private
name|ISVNAdminEventHandler
name|myProgressHandler
decl_stmt|;
specifier|public
name|DefaultLoadHandler
parameter_list|(
name|boolean
name|usePreCommitHook
parameter_list|,
name|boolean
name|usePostCommitHook
parameter_list|,
name|SVNUUIDAction
name|uuidAction
parameter_list|,
name|String
name|parentDir
parameter_list|,
name|ISVNAdminEventHandler
name|progressHandler
parameter_list|)
block|{
name|myProgressHandler
operator|=
name|progressHandler
expr_stmt|;
name|myIsUsePreCommitHook
operator|=
name|usePreCommitHook
expr_stmt|;
name|myIsUsePostCommitHook
operator|=
name|usePostCommitHook
expr_stmt|;
name|myUUIDAction
operator|=
name|uuidAction
expr_stmt|;
name|myParentDir
operator|=
name|SVNPathUtil
operator|.
name|canonicalizePath
argument_list|(
name|parentDir
argument_list|)
expr_stmt|;
name|myRevisionsMap
operator|=
operator|new
name|SVNHashMap
argument_list|()
expr_stmt|;
block|}
specifier|public
name|void
name|setFSFS
parameter_list|(
name|FSFS
name|fsfs
parameter_list|)
block|{
name|myFSFS
operator|=
name|fsfs
expr_stmt|;
block|}
specifier|public
name|void
name|closeRevision
parameter_list|()
throws|throws
name|SVNException
block|{
if|if
condition|(
name|myCurrentRevisionBaton
operator|!=
literal|null
condition|)
block|{
name|myCurrentRevisionBaton
operator|.
name|getConsumer
argument_list|()
operator|.
name|close
argument_list|()
expr_stmt|;
name|RevisionBaton
name|baton
init|=
name|myCurrentRevisionBaton
decl_stmt|;
name|myCurrentRevisionBaton
operator|=
literal|null
expr_stmt|;
if|if
condition|(
name|baton
operator|.
name|myRevision
operator|<=
literal|0
condition|)
block|{
return|return;
block|}
name|long
name|oldRevision
init|=
name|baton
operator|.
name|myRevision
decl_stmt|;
name|long
name|newRevision
init|=
operator|-
literal|1
decl_stmt|;
try|try
block|{
name|newRevision
operator|=
name|baton
operator|.
name|getCommitter
argument_list|()
operator|.
name|commitTxn
argument_list|(
name|myIsUsePreCommitHook
argument_list|,
name|myIsUsePostCommitHook
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|SVNException
name|svne
parameter_list|)
block|{
try|try
block|{
name|FSCommitter
operator|.
name|abortTransaction
argument_list|(
name|myFSFS
argument_list|,
name|baton
operator|.
name|myTxn
operator|.
name|getTxnId
argument_list|()
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|SVNException
name|svne2
parameter_list|)
block|{
comment|//
block|}
throw|throw
name|svne
throw|;
block|}
if|if
condition|(
name|baton
operator|.
name|myDatestamp
operator|==
literal|null
condition|)
block|{
name|myFSFS
operator|.
name|setRevisionProperty
argument_list|(
name|baton
operator|.
name|myRevision
argument_list|,
name|SVNRevisionProperty
operator|.
name|DATE
argument_list|,
literal|null
argument_list|)
expr_stmt|;
block|}
name|File
name|revProps
init|=
name|myFSFS
operator|.
name|getRevisionPropertiesFile
argument_list|(
name|baton
operator|.
name|myRevision
argument_list|,
literal|true
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|revProps
operator|.
name|exists
argument_list|()
condition|)
block|{
name|OutputStream
name|os
init|=
name|SVNFileUtil
operator|.
name|openFileForWriting
argument_list|(
name|revProps
argument_list|)
decl_stmt|;
try|try
block|{
name|SVNWCProperties
operator|.
name|setProperties
argument_list|(
operator|new
name|SVNProperties
argument_list|()
argument_list|,
name|os
argument_list|,
name|SVNWCProperties
operator|.
name|SVN_HASH_TERMINATOR
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
name|SVNFileUtil
operator|.
name|closeFile
argument_list|(
name|os
argument_list|)
expr_stmt|;
block|}
block|}
name|myRevisionsMap
operator|.
name|put
argument_list|(
operator|new
name|Long
argument_list|(
name|oldRevision
argument_list|)
argument_list|,
operator|new
name|Long
argument_list|(
name|newRevision
argument_list|)
argument_list|)
expr_stmt|;
if|if
condition|(
name|baton
operator|.
name|myDatestamp
operator|!=
literal|null
condition|)
block|{
name|myFSFS
operator|.
name|setRevisionProperty
argument_list|(
name|newRevision
argument_list|,
name|SVNRevisionProperty
operator|.
name|DATE
argument_list|,
name|baton
operator|.
name|myDatestamp
argument_list|)
expr_stmt|;
block|}
name|String
name|message
decl_stmt|;
if|if
condition|(
name|newRevision
operator|==
name|baton
operator|.
name|myRevision
condition|)
block|{
name|message
operator|=
literal|"\n------- Committed revision "
operator|+
name|newRevision
operator|+
literal|">>>"
expr_stmt|;
block|}
else|else
block|{
name|message
operator|=
literal|"\n------- Committed new rev "
operator|+
name|newRevision
operator|+
literal|" (loaded from original rev "
operator|+
name|baton
operator|.
name|myRevision
operator|+
literal|")>>>"
expr_stmt|;
block|}
if|if
condition|(
name|myProgressHandler
operator|!=
literal|null
condition|)
block|{
name|SVNAdminEvent
name|event
init|=
operator|new
name|SVNAdminEvent
argument_list|(
name|newRevision
argument_list|,
name|baton
operator|.
name|myRevision
argument_list|,
name|SVNAdminEventAction
operator|.
name|REVISION_LOADED
argument_list|,
name|message
argument_list|)
decl_stmt|;
name|myProgressHandler
operator|.
name|handleAdminEvent
argument_list|(
name|event
argument_list|,
name|ISVNEventHandler
operator|.
name|UNKNOWN
argument_list|)
expr_stmt|;
block|}
block|}
block|}
specifier|public
name|void
name|openRevision
parameter_list|(
name|Map
name|headers
parameter_list|)
throws|throws
name|SVNException
block|{
name|myCurrentRevisionBaton
operator|=
operator|new
name|RevisionBaton
argument_list|()
expr_stmt|;
name|long
name|revision
init|=
operator|-
literal|1
decl_stmt|;
if|if
condition|(
name|headers
operator|.
name|containsKey
argument_list|(
name|SVNAdminHelper
operator|.
name|DUMPFILE_REVISION_NUMBER
argument_list|)
condition|)
block|{
try|try
block|{
name|revision
operator|=
name|Long
operator|.
name|parseLong
argument_list|(
operator|(
name|String
operator|)
name|headers
operator|.
name|get
argument_list|(
name|SVNAdminHelper
operator|.
name|DUMPFILE_REVISION_NUMBER
argument_list|)
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|NumberFormatException
name|nfe
parameter_list|)
block|{
name|SVNErrorMessage
name|err
init|=
name|SVNErrorMessage
operator|.
name|create
argument_list|(
name|SVNErrorCode
operator|.
name|STREAM_MALFORMED_DATA
argument_list|,
literal|"Cannot parse revision ({0}) in dump file"
argument_list|,
name|headers
operator|.
name|get
argument_list|(
name|SVNAdminHelper
operator|.
name|DUMPFILE_REVISION_NUMBER
argument_list|)
argument_list|)
decl_stmt|;
name|SVNErrorManager
operator|.
name|error
argument_list|(
name|err
argument_list|,
name|SVNLogType
operator|.
name|FSFS
argument_list|)
expr_stmt|;
block|}
block|}
name|myCurrentRevisionBaton
operator|.
name|myRevision
operator|=
name|revision
expr_stmt|;
name|long
name|headRevision
init|=
name|myFSFS
operator|.
name|getYoungestRevision
argument_list|()
decl_stmt|;
name|myCurrentRevisionBaton
operator|.
name|myRevisionOffset
operator|=
name|revision
operator|-
operator|(
name|headRevision
operator|+
literal|1
operator|)
expr_stmt|;
if|if
condition|(
name|revision
operator|>
literal|0
condition|)
block|{
name|myCurrentRevisionBaton
operator|.
name|myTxn
operator|=
name|FSTransactionRoot
operator|.
name|beginTransaction
argument_list|(
name|headRevision
argument_list|,
literal|0
argument_list|,
name|myFSFS
argument_list|)
expr_stmt|;
name|myCurrentRevisionBaton
operator|.
name|myTxnRoot
operator|=
name|myFSFS
operator|.
name|createTransactionRoot
argument_list|(
name|myCurrentRevisionBaton
operator|.
name|myTxn
argument_list|)
expr_stmt|;
name|String
name|message
init|=
literal|"<<< Started new transaction, based on original revision "
operator|+
name|revision
decl_stmt|;
if|if
condition|(
name|myProgressHandler
operator|!=
literal|null
condition|)
block|{
name|SVNAdminEvent
name|event
init|=
operator|new
name|SVNAdminEvent
argument_list|(
name|revision
argument_list|,
name|SVNAdminEventAction
operator|.
name|REVISION_LOAD
argument_list|,
name|message
argument_list|)
decl_stmt|;
name|myProgressHandler
operator|.
name|handleAdminEvent
argument_list|(
name|event
argument_list|,
name|ISVNEventHandler
operator|.
name|UNKNOWN
argument_list|)
expr_stmt|;
block|}
block|}
block|}
specifier|public
name|void
name|openNode
parameter_list|(
name|Map
name|headers
parameter_list|)
throws|throws
name|SVNException
block|{
if|if
condition|(
name|myCurrentRevisionBaton
operator|.
name|myRevision
operator|==
literal|0
condition|)
block|{
name|SVNErrorMessage
name|err
init|=
name|SVNErrorMessage
operator|.
name|create
argument_list|(
name|SVNErrorCode
operator|.
name|STREAM_MALFORMED_DATA
argument_list|,
literal|"Malformed dumpstream: Revision 0 must not contain node records"
argument_list|)
decl_stmt|;
name|SVNErrorManager
operator|.
name|error
argument_list|(
name|err
argument_list|,
name|SVNLogType
operator|.
name|FSFS
argument_list|)
expr_stmt|;
block|}
name|myCurrentNodeBaton
operator|=
name|createNodeBaton
argument_list|(
name|headers
argument_list|)
expr_stmt|;
name|String
name|message
decl_stmt|;
switch|switch
condition|(
name|myCurrentNodeBaton
operator|.
name|myAction
condition|)
block|{
case|case
name|SVNAdminHelper
operator|.
name|NODE_ACTION_CHANGE
case|:
name|message
operator|=
literal|"     * editing path : "
operator|+
name|myCurrentNodeBaton
operator|.
name|myPath
operator|+
literal|" ..."
expr_stmt|;
if|if
condition|(
name|myProgressHandler
operator|!=
literal|null
condition|)
block|{
name|SVNAdminEvent
name|event
init|=
operator|new
name|SVNAdminEvent
argument_list|(
name|SVNAdminEventAction
operator|.
name|REVISION_LOAD_EDIT_PATH
argument_list|,
name|myCurrentNodeBaton
operator|.
name|myPath
argument_list|,
name|message
argument_list|)
decl_stmt|;
name|myProgressHandler
operator|.
name|handleAdminEvent
argument_list|(
name|event
argument_list|,
name|ISVNEventHandler
operator|.
name|UNKNOWN
argument_list|)
expr_stmt|;
block|}
break|break;
case|case
name|SVNAdminHelper
operator|.
name|NODE_ACTION_DELETE
case|:
name|message
operator|=
literal|"     * deleting path : "
operator|+
name|myCurrentNodeBaton
operator|.
name|myPath
operator|+
literal|" ..."
expr_stmt|;
if|if
condition|(
name|myProgressHandler
operator|!=
literal|null
condition|)
block|{
name|SVNAdminEvent
name|event
init|=
operator|new
name|SVNAdminEvent
argument_list|(
name|SVNAdminEventAction
operator|.
name|REVISION_LOAD_DELETE_PATH
argument_list|,
name|myCurrentNodeBaton
operator|.
name|myPath
argument_list|,
name|message
argument_list|)
decl_stmt|;
name|myProgressHandler
operator|.
name|handleAdminEvent
argument_list|(
name|event
argument_list|,
name|ISVNEventHandler
operator|.
name|UNKNOWN
argument_list|)
expr_stmt|;
block|}
name|myCurrentRevisionBaton
operator|.
name|getCommitter
argument_list|()
operator|.
name|deleteNode
argument_list|(
name|myCurrentNodeBaton
operator|.
name|myPath
argument_list|)
expr_stmt|;
break|break;
case|case
name|SVNAdminHelper
operator|.
name|NODE_ACTION_ADD
case|:
name|message
operator|=
literal|"     * adding path : "
operator|+
name|myCurrentNodeBaton
operator|.
name|myPath
operator|+
literal|" ..."
expr_stmt|;
if|if
condition|(
name|maybeAddWithHistory
argument_list|(
name|myCurrentNodeBaton
argument_list|)
condition|)
block|{
name|message
operator|+=
literal|"COPIED..."
expr_stmt|;
block|}
if|if
condition|(
name|myProgressHandler
operator|!=
literal|null
condition|)
block|{
name|SVNAdminEvent
name|event
init|=
operator|new
name|SVNAdminEvent
argument_list|(
name|SVNAdminEventAction
operator|.
name|REVISION_LOAD_ADD_PATH
argument_list|,
name|myCurrentNodeBaton
operator|.
name|myPath
argument_list|,
name|message
argument_list|)
decl_stmt|;
name|myProgressHandler
operator|.
name|handleAdminEvent
argument_list|(
name|event
argument_list|,
name|ISVNEventHandler
operator|.
name|UNKNOWN
argument_list|)
expr_stmt|;
block|}
break|break;
case|case
name|SVNAdminHelper
operator|.
name|NODE_ACTION_REPLACE
case|:
name|message
operator|=
literal|"     * replacing path : "
operator|+
name|myCurrentNodeBaton
operator|.
name|myPath
operator|+
literal|" ..."
expr_stmt|;
name|myCurrentRevisionBaton
operator|.
name|getCommitter
argument_list|()
operator|.
name|deleteNode
argument_list|(
name|myCurrentNodeBaton
operator|.
name|myPath
argument_list|)
expr_stmt|;
if|if
condition|(
name|maybeAddWithHistory
argument_list|(
name|myCurrentNodeBaton
argument_list|)
condition|)
block|{
name|message
operator|+=
literal|"COPIED..."
expr_stmt|;
block|}
if|if
condition|(
name|myProgressHandler
operator|!=
literal|null
condition|)
block|{
name|SVNAdminEvent
name|event
init|=
operator|new
name|SVNAdminEvent
argument_list|(
name|SVNAdminEventAction
operator|.
name|REVISION_LOAD_REPLACE_PATH
argument_list|,
name|myCurrentNodeBaton
operator|.
name|myPath
argument_list|,
name|message
argument_list|)
decl_stmt|;
name|myProgressHandler
operator|.
name|handleAdminEvent
argument_list|(
name|event
argument_list|,
name|ISVNEventHandler
operator|.
name|UNKNOWN
argument_list|)
expr_stmt|;
block|}
break|break;
default|default:
name|SVNErrorMessage
name|err
init|=
name|SVNErrorMessage
operator|.
name|create
argument_list|(
name|SVNErrorCode
operator|.
name|STREAM_UNRECOGNIZED_DATA
argument_list|,
literal|"Unrecognized node-action on node ''{0}''"
argument_list|,
name|myCurrentNodeBaton
operator|.
name|myPath
argument_list|)
decl_stmt|;
name|SVNErrorManager
operator|.
name|error
argument_list|(
name|err
argument_list|,
name|SVNLogType
operator|.
name|FSFS
argument_list|)
expr_stmt|;
block|}
block|}
specifier|public
name|void
name|parseUUID
parameter_list|(
name|String
name|uuid
parameter_list|)
throws|throws
name|SVNException
block|{
if|if
condition|(
name|myUUIDAction
operator|==
name|SVNUUIDAction
operator|.
name|IGNORE_UUID
condition|)
block|{
return|return;
block|}
if|if
condition|(
name|myUUIDAction
operator|!=
name|SVNUUIDAction
operator|.
name|FORCE_UUID
condition|)
block|{
name|long
name|latestRevision
init|=
name|myFSFS
operator|.
name|getYoungestRevision
argument_list|()
decl_stmt|;
if|if
condition|(
name|latestRevision
operator|!=
literal|0
condition|)
block|{
return|return;
block|}
block|}
name|myFSFS
operator|.
name|setUUID
argument_list|(
name|uuid
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|closeNode
parameter_list|()
throws|throws
name|SVNException
block|{
name|myCurrentNodeBaton
operator|=
literal|null
expr_stmt|;
block|}
specifier|public
name|void
name|applyTextDelta
parameter_list|()
throws|throws
name|SVNException
block|{
name|FSDeltaConsumer
name|fsConsumer
init|=
name|myCurrentRevisionBaton
operator|.
name|getConsumer
argument_list|()
decl_stmt|;
name|fsConsumer
operator|.
name|applyTextDelta
argument_list|(
name|myCurrentNodeBaton
operator|.
name|myPath
argument_list|,
name|myCurrentNodeBaton
operator|.
name|myBaseChecksum
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|setFullText
parameter_list|()
throws|throws
name|SVNException
block|{
name|FSDeltaConsumer
name|fsConsumer
init|=
name|myCurrentRevisionBaton
operator|.
name|getConsumer
argument_list|()
decl_stmt|;
name|fsConsumer
operator|.
name|applyText
argument_list|(
name|myCurrentNodeBaton
operator|.
name|myPath
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|parseTextBlock
parameter_list|(
name|InputStream
name|dumpStream
parameter_list|,
name|long
name|contentLength
parameter_list|,
name|boolean
name|isDelta
parameter_list|)
throws|throws
name|SVNException
block|{
name|FSDeltaConsumer
name|fsConsumer
init|=
name|myCurrentRevisionBaton
operator|.
name|getConsumer
argument_list|()
decl_stmt|;
try|try
block|{
if|if
condition|(
name|isDelta
condition|)
block|{
name|applyTextDelta
argument_list|()
expr_stmt|;
block|}
else|else
block|{
name|setFullText
argument_list|()
expr_stmt|;
block|}
name|String
name|checksum
init|=
literal|null
decl_stmt|;
name|byte
index|[]
name|buffer
init|=
literal|null
decl_stmt|;
if|if
condition|(
name|contentLength
operator|==
literal|0
condition|)
block|{
name|getDeltaGenerator
argument_list|()
operator|.
name|sendDelta
argument_list|(
name|myCurrentNodeBaton
operator|.
name|myPath
argument_list|,
name|SVNFileUtil
operator|.
name|DUMMY_IN
argument_list|,
name|fsConsumer
argument_list|,
literal|false
argument_list|)
expr_stmt|;
block|}
else|else
block|{
if|if
condition|(
operator|!
name|isDelta
condition|)
block|{
comment|//
name|InputStream
name|tgt
init|=
operator|new
name|FixedSizeInputStream
argument_list|(
name|dumpStream
argument_list|,
name|contentLength
argument_list|)
decl_stmt|;
name|checksum
operator|=
name|getDeltaGenerator
argument_list|()
operator|.
name|sendDelta
argument_list|(
name|myCurrentNodeBaton
operator|.
name|myPath
argument_list|,
name|tgt
argument_list|,
name|fsConsumer
argument_list|,
literal|true
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|buffer
operator|=
operator|new
name|byte
index|[
name|SVNFileUtil
operator|.
name|STREAM_CHUNK_SIZE
index|]
expr_stmt|;
name|SVNDeltaReader
name|deltaReader
init|=
literal|null
decl_stmt|;
try|try
block|{
while|while
condition|(
name|contentLength
operator|>
literal|0
condition|)
block|{
name|int
name|numToRead
init|=
name|contentLength
operator|>
name|SVNFileUtil
operator|.
name|STREAM_CHUNK_SIZE
condition|?
name|SVNFileUtil
operator|.
name|STREAM_CHUNK_SIZE
else|:
operator|(
name|int
operator|)
name|contentLength
decl_stmt|;
name|int
name|read
init|=
literal|0
decl_stmt|;
while|while
condition|(
name|numToRead
operator|>
literal|0
condition|)
block|{
name|int
name|numRead
init|=
name|dumpStream
operator|.
name|read
argument_list|(
name|buffer
argument_list|,
name|read
argument_list|,
name|numToRead
argument_list|)
decl_stmt|;
if|if
condition|(
name|numRead
operator|<
literal|0
condition|)
block|{
name|SVNAdminHelper
operator|.
name|generateIncompleteDataError
argument_list|()
expr_stmt|;
block|}
name|read
operator|+=
name|numRead
expr_stmt|;
name|numToRead
operator|-=
name|numRead
expr_stmt|;
block|}
name|deltaReader
operator|=
name|getDeltaReader
argument_list|()
expr_stmt|;
name|deltaReader
operator|.
name|nextWindow
argument_list|(
name|buffer
argument_list|,
literal|0
argument_list|,
name|read
argument_list|,
name|myCurrentNodeBaton
operator|.
name|myPath
argument_list|,
name|fsConsumer
argument_list|)
expr_stmt|;
name|contentLength
operator|-=
name|read
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
name|IOException
name|ioe
parameter_list|)
block|{
name|SVNErrorMessage
name|err
init|=
name|SVNErrorMessage
operator|.
name|create
argument_list|(
name|SVNErrorCode
operator|.
name|IO_ERROR
argument_list|,
name|ioe
operator|.
name|getMessage
argument_list|()
argument_list|)
decl_stmt|;
name|SVNErrorManager
operator|.
name|error
argument_list|(
name|err
argument_list|,
name|ioe
argument_list|,
name|SVNLogType
operator|.
name|FSFS
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|deltaReader
operator|!=
literal|null
condition|)
block|{
name|deltaReader
operator|.
name|reset
argument_list|(
name|myCurrentNodeBaton
operator|.
name|myPath
argument_list|,
name|fsConsumer
argument_list|)
expr_stmt|;
block|}
name|fsConsumer
operator|.
name|textDeltaEnd
argument_list|(
name|myCurrentNodeBaton
operator|.
name|myPath
argument_list|)
expr_stmt|;
name|checksum
operator|=
name|fsConsumer
operator|.
name|getChecksum
argument_list|()
expr_stmt|;
block|}
block|}
if|if
condition|(
name|checksum
operator|!=
literal|null
operator|&&
name|myCurrentNodeBaton
operator|.
name|myResultChecksum
operator|!=
literal|null
condition|)
block|{
if|if
condition|(
operator|!
name|checksum
operator|.
name|equals
argument_list|(
name|myCurrentNodeBaton
operator|.
name|myResultChecksum
argument_list|)
condition|)
block|{
name|SVNErrorMessage
name|err
init|=
name|SVNErrorMessage
operator|.
name|create
argument_list|(
name|SVNErrorCode
operator|.
name|CHECKSUM_MISMATCH
argument_list|,
literal|"Checksum mismatch for ''{0}'':\n   expected:  {1}\n     actual:  {2}\n"
argument_list|,
operator|new
name|Object
index|[]
block|{
name|myCurrentNodeBaton
operator|.
name|myPath
block|,
name|myCurrentNodeBaton
operator|.
name|myResultChecksum
block|,
name|checksum
block|}
argument_list|)
decl_stmt|;
name|SVNErrorManager
operator|.
name|error
argument_list|(
name|err
argument_list|,
name|SVNLogType
operator|.
name|FSFS
argument_list|)
expr_stmt|;
block|}
block|}
block|}
catch|catch
parameter_list|(
name|SVNException
name|svne
parameter_list|)
block|{
name|fsConsumer
operator|.
name|abort
argument_list|()
expr_stmt|;
throw|throw
name|svne
throw|;
block|}
block|}
specifier|public
name|void
name|removeNodeProperties
parameter_list|()
throws|throws
name|SVNException
block|{
name|FSTransactionRoot
name|txnRoot
init|=
name|myCurrentRevisionBaton
operator|.
name|myTxnRoot
decl_stmt|;
name|FSRevisionNode
name|node
init|=
name|txnRoot
operator|.
name|getRevisionNode
argument_list|(
name|myCurrentNodeBaton
operator|.
name|myPath
argument_list|)
decl_stmt|;
name|SVNProperties
name|props
init|=
name|node
operator|.
name|getProperties
argument_list|(
name|myFSFS
argument_list|)
decl_stmt|;
for|for
control|(
name|Iterator
name|propNames
init|=
name|props
operator|.
name|nameSet
argument_list|()
operator|.
name|iterator
argument_list|()
init|;
name|propNames
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|String
name|propName
init|=
operator|(
name|String
operator|)
name|propNames
operator|.
name|next
argument_list|()
decl_stmt|;
name|myCurrentRevisionBaton
operator|.
name|getCommitter
argument_list|()
operator|.
name|changeNodeProperty
argument_list|(
name|myCurrentNodeBaton
operator|.
name|myPath
argument_list|,
name|propName
argument_list|,
literal|null
argument_list|)
expr_stmt|;
block|}
block|}
specifier|public
name|void
name|setRevisionProperty
parameter_list|(
name|String
name|propertyName
parameter_list|,
name|SVNPropertyValue
name|propertyValue
parameter_list|)
throws|throws
name|SVNException
block|{
if|if
condition|(
name|myCurrentRevisionBaton
operator|.
name|myRevision
operator|>
literal|0
condition|)
block|{
name|myFSFS
operator|.
name|setTransactionProperty
argument_list|(
name|myCurrentRevisionBaton
operator|.
name|myTxn
operator|.
name|getTxnId
argument_list|()
argument_list|,
name|propertyName
argument_list|,
name|propertyValue
argument_list|)
expr_stmt|;
if|if
condition|(
name|SVNRevisionProperty
operator|.
name|DATE
operator|.
name|equals
argument_list|(
name|propertyName
argument_list|)
condition|)
block|{
name|myCurrentRevisionBaton
operator|.
name|myDatestamp
operator|=
name|propertyValue
expr_stmt|;
block|}
block|}
if|else if
condition|(
name|myCurrentRevisionBaton
operator|.
name|myRevision
operator|==
literal|0
condition|)
block|{
name|long
name|youngestRevision
init|=
name|myFSFS
operator|.
name|getYoungestRevision
argument_list|()
decl_stmt|;
if|if
condition|(
name|youngestRevision
operator|==
literal|0
condition|)
block|{
name|myFSFS
operator|.
name|setRevisionProperty
argument_list|(
literal|0
argument_list|,
name|propertyName
argument_list|,
name|propertyValue
argument_list|)
expr_stmt|;
block|}
block|}
block|}
specifier|public
name|void
name|setUsePreCommitHook
parameter_list|(
name|boolean
name|use
parameter_list|)
block|{
name|myIsUsePreCommitHook
operator|=
name|use
expr_stmt|;
block|}
specifier|public
name|void
name|setUsePostCommitHook
parameter_list|(
name|boolean
name|use
parameter_list|)
block|{
name|myIsUsePostCommitHook
operator|=
name|use
expr_stmt|;
block|}
specifier|public
name|void
name|setParentDir
parameter_list|(
name|String
name|parentDir
parameter_list|)
block|{
name|myParentDir
operator|=
name|parentDir
expr_stmt|;
block|}
specifier|public
name|void
name|setUUIDAction
parameter_list|(
name|SVNUUIDAction
name|action
parameter_list|)
block|{
name|myUUIDAction
operator|=
name|action
expr_stmt|;
block|}
specifier|public
name|void
name|deleteNodeProperty
parameter_list|(
name|String
name|propertyName
parameter_list|)
throws|throws
name|SVNException
block|{
name|myCurrentRevisionBaton
operator|.
name|getCommitter
argument_list|()
operator|.
name|changeNodeProperty
argument_list|(
name|myCurrentNodeBaton
operator|.
name|myPath
argument_list|,
name|propertyName
argument_list|,
literal|null
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|setNodeProperty
parameter_list|(
name|String
name|propertyName
parameter_list|,
name|SVNPropertyValue
name|propertyValue
parameter_list|)
throws|throws
name|SVNException
block|{
if|if
condition|(
name|SVNProperty
operator|.
name|MERGE_INFO
operator|.
name|equals
argument_list|(
name|propertyName
argument_list|)
condition|)
block|{
name|Map
name|mergeInfo
init|=
name|renumberMergeInfoRevisions
argument_list|(
name|propertyValue
argument_list|)
decl_stmt|;
if|if
condition|(
name|myParentDir
operator|!=
literal|null
condition|)
block|{
name|mergeInfo
operator|=
name|prefixMergeInfoPaths
argument_list|(
name|mergeInfo
argument_list|)
expr_stmt|;
block|}
name|String
name|mergeInfoString
init|=
name|SVNMergeInfoUtil
operator|.
name|formatMergeInfoToString
argument_list|(
name|mergeInfo
argument_list|,
literal|null
argument_list|)
decl_stmt|;
name|propertyValue
operator|=
name|SVNPropertyValue
operator|.
name|create
argument_list|(
name|mergeInfoString
argument_list|)
expr_stmt|;
block|}
name|myCurrentRevisionBaton
operator|.
name|getCommitter
argument_list|()
operator|.
name|changeNodeProperty
argument_list|(
name|myCurrentNodeBaton
operator|.
name|myPath
argument_list|,
name|propertyName
argument_list|,
name|propertyValue
argument_list|)
expr_stmt|;
block|}
specifier|private
name|SVNDeltaReader
name|getDeltaReader
parameter_list|()
block|{
if|if
condition|(
name|myDeltaReader
operator|==
literal|null
condition|)
block|{
name|myDeltaReader
operator|=
operator|new
name|SVNDeltaReader
argument_list|()
expr_stmt|;
block|}
return|return
name|myDeltaReader
return|;
block|}
specifier|private
name|SVNDeltaGenerator
name|getDeltaGenerator
parameter_list|()
block|{
if|if
condition|(
name|myDeltaGenerator
operator|==
literal|null
condition|)
block|{
name|myDeltaGenerator
operator|=
operator|new
name|SVNDeltaGenerator
argument_list|()
expr_stmt|;
block|}
return|return
name|myDeltaGenerator
return|;
block|}
specifier|private
name|boolean
name|maybeAddWithHistory
parameter_list|(
name|NodeBaton
name|nodeBaton
parameter_list|)
throws|throws
name|SVNException
block|{
if|if
condition|(
name|nodeBaton
operator|.
name|myCopyFromPath
operator|==
literal|null
condition|)
block|{
if|if
condition|(
name|nodeBaton
operator|.
name|myKind
operator|==
name|SVNNodeKind
operator|.
name|FILE
condition|)
block|{
name|myCurrentRevisionBaton
operator|.
name|getCommitter
argument_list|()
operator|.
name|makeFile
argument_list|(
name|nodeBaton
operator|.
name|myPath
argument_list|)
expr_stmt|;
block|}
if|else if
condition|(
name|nodeBaton
operator|.
name|myKind
operator|==
name|SVNNodeKind
operator|.
name|DIR
condition|)
block|{
name|myCurrentRevisionBaton
operator|.
name|getCommitter
argument_list|()
operator|.
name|makeDir
argument_list|(
name|nodeBaton
operator|.
name|myPath
argument_list|)
expr_stmt|;
block|}
return|return
literal|false
return|;
block|}
name|long
name|srcRevision
init|=
name|nodeBaton
operator|.
name|myCopyFromRevision
operator|-
name|myCurrentRevisionBaton
operator|.
name|myRevisionOffset
decl_stmt|;
name|Long
name|copyFromRevision
init|=
operator|new
name|Long
argument_list|(
name|nodeBaton
operator|.
name|myCopyFromRevision
argument_list|)
decl_stmt|;
if|if
condition|(
name|myRevisionsMap
operator|.
name|containsKey
argument_list|(
name|copyFromRevision
argument_list|)
condition|)
block|{
name|Long
name|revision
init|=
operator|(
name|Long
operator|)
name|myRevisionsMap
operator|.
name|get
argument_list|(
name|copyFromRevision
argument_list|)
decl_stmt|;
name|srcRevision
operator|=
name|revision
operator|.
name|longValue
argument_list|()
expr_stmt|;
block|}
if|if
condition|(
operator|!
name|SVNRevision
operator|.
name|isValidRevisionNumber
argument_list|(
name|srcRevision
argument_list|)
condition|)
block|{
name|SVNErrorMessage
name|err
init|=
name|SVNErrorMessage
operator|.
name|create
argument_list|(
name|SVNErrorCode
operator|.
name|FS_NO_SUCH_REVISION
argument_list|,
literal|"Relative source revision {0} is not available in current repository"
argument_list|,
operator|new
name|Long
argument_list|(
name|srcRevision
argument_list|)
argument_list|)
decl_stmt|;
name|SVNErrorManager
operator|.
name|error
argument_list|(
name|err
argument_list|,
name|SVNLogType
operator|.
name|FSFS
argument_list|)
expr_stmt|;
block|}
name|FSRevisionRoot
name|copyRoot
init|=
name|myFSFS
operator|.
name|createRevisionRoot
argument_list|(
name|srcRevision
argument_list|)
decl_stmt|;
if|if
condition|(
name|nodeBaton
operator|.
name|myCopySourceChecksum
operator|!=
literal|null
condition|)
block|{
name|FSRevisionNode
name|revNode
init|=
name|copyRoot
operator|.
name|getRevisionNode
argument_list|(
name|nodeBaton
operator|.
name|myCopyFromPath
argument_list|)
decl_stmt|;
name|String
name|hexDigest
init|=
name|revNode
operator|.
name|getFileMD5Checksum
argument_list|()
decl_stmt|;
if|if
condition|(
name|hexDigest
operator|!=
literal|null
operator|&&
operator|!
name|hexDigest
operator|.
name|equals
argument_list|(
name|nodeBaton
operator|.
name|myCopySourceChecksum
argument_list|)
condition|)
block|{
name|SVNErrorMessage
name|err
init|=
name|SVNErrorMessage
operator|.
name|create
argument_list|(
name|SVNErrorCode
operator|.
name|CHECKSUM_MISMATCH
argument_list|,
literal|"Copy source checksum mismatch on copy from ''{0}''@{1}\n"
operator|+
literal|" to ''{2}'' in rev based on r{3}:\n"
operator|+
literal|"   expected:  {4}\n"
operator|+
literal|"     actual:  {5}\n"
argument_list|,
operator|new
name|Object
index|[]
block|{
name|nodeBaton
operator|.
name|myCopyFromPath
block|,
name|String
operator|.
name|valueOf
argument_list|(
name|srcRevision
argument_list|)
block|,
name|nodeBaton
operator|.
name|myPath
block|,
name|String
operator|.
name|valueOf
argument_list|(
name|myCurrentRevisionBaton
operator|.
name|myRevision
argument_list|)
block|,
name|nodeBaton
operator|.
name|myCopySourceChecksum
block|,
name|hexDigest
block|}
argument_list|)
decl_stmt|;
name|SVNErrorManager
operator|.
name|error
argument_list|(
name|err
argument_list|,
name|SVNLogType
operator|.
name|FSFS
argument_list|)
expr_stmt|;
block|}
block|}
name|myCurrentRevisionBaton
operator|.
name|getCommitter
argument_list|()
operator|.
name|makeCopy
argument_list|(
name|copyRoot
argument_list|,
name|nodeBaton
operator|.
name|myCopyFromPath
argument_list|,
name|nodeBaton
operator|.
name|myPath
argument_list|,
literal|true
argument_list|)
expr_stmt|;
return|return
literal|true
return|;
block|}
specifier|private
name|NodeBaton
name|createNodeBaton
parameter_list|(
name|Map
name|headers
parameter_list|)
throws|throws
name|SVNException
block|{
name|NodeBaton
name|baton
init|=
operator|new
name|NodeBaton
argument_list|()
decl_stmt|;
name|baton
operator|.
name|myKind
operator|=
name|SVNNodeKind
operator|.
name|UNKNOWN
expr_stmt|;
if|if
condition|(
name|headers
operator|.
name|containsKey
argument_list|(
name|SVNAdminHelper
operator|.
name|DUMPFILE_NODE_PATH
argument_list|)
condition|)
block|{
name|String
name|nodePath
init|=
operator|(
name|String
operator|)
name|headers
operator|.
name|get
argument_list|(
name|SVNAdminHelper
operator|.
name|DUMPFILE_NODE_PATH
argument_list|)
decl_stmt|;
if|if
condition|(
name|myParentDir
operator|!=
literal|null
condition|)
block|{
name|baton
operator|.
name|myPath
operator|=
name|SVNPathUtil
operator|.
name|getAbsolutePath
argument_list|(
name|SVNPathUtil
operator|.
name|append
argument_list|(
name|myParentDir
argument_list|,
name|nodePath
argument_list|)
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|baton
operator|.
name|myPath
operator|=
name|SVNPathUtil
operator|.
name|getAbsolutePath
argument_list|(
name|SVNPathUtil
operator|.
name|canonicalizePath
argument_list|(
name|nodePath
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
if|if
condition|(
name|headers
operator|.
name|containsKey
argument_list|(
name|SVNAdminHelper
operator|.
name|DUMPFILE_NODE_KIND
argument_list|)
condition|)
block|{
name|baton
operator|.
name|myKind
operator|=
name|SVNNodeKind
operator|.
name|parseKind
argument_list|(
operator|(
name|String
operator|)
name|headers
operator|.
name|get
argument_list|(
name|SVNAdminHelper
operator|.
name|DUMPFILE_NODE_KIND
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|baton
operator|.
name|myAction
operator|=
name|SVNAdminHelper
operator|.
name|NODE_ACTION_UNKNOWN
expr_stmt|;
if|if
condition|(
name|headers
operator|.
name|containsKey
argument_list|(
name|SVNAdminHelper
operator|.
name|DUMPFILE_NODE_ACTION
argument_list|)
condition|)
block|{
name|String
name|action
init|=
operator|(
name|String
operator|)
name|headers
operator|.
name|get
argument_list|(
name|SVNAdminHelper
operator|.
name|DUMPFILE_NODE_ACTION
argument_list|)
decl_stmt|;
if|if
condition|(
literal|"change"
operator|.
name|equals
argument_list|(
name|action
argument_list|)
condition|)
block|{
name|baton
operator|.
name|myAction
operator|=
name|SVNAdminHelper
operator|.
name|NODE_ACTION_CHANGE
expr_stmt|;
block|}
if|else if
condition|(
literal|"add"
operator|.
name|equals
argument_list|(
name|action
argument_list|)
condition|)
block|{
name|baton
operator|.
name|myAction
operator|=
name|SVNAdminHelper
operator|.
name|NODE_ACTION_ADD
expr_stmt|;
block|}
if|else if
condition|(
literal|"delete"
operator|.
name|equals
argument_list|(
name|action
argument_list|)
condition|)
block|{
name|baton
operator|.
name|myAction
operator|=
name|SVNAdminHelper
operator|.
name|NODE_ACTION_DELETE
expr_stmt|;
block|}
if|else if
condition|(
literal|"replace"
operator|.
name|equals
argument_list|(
name|action
argument_list|)
condition|)
block|{
name|baton
operator|.
name|myAction
operator|=
name|SVNAdminHelper
operator|.
name|NODE_ACTION_REPLACE
expr_stmt|;
block|}
block|}
name|baton
operator|.
name|myCopyFromRevision
operator|=
operator|-
literal|1
expr_stmt|;
if|if
condition|(
name|headers
operator|.
name|containsKey
argument_list|(
name|SVNAdminHelper
operator|.
name|DUMPFILE_NODE_COPYFROM_REVISION
argument_list|)
condition|)
block|{
try|try
block|{
name|baton
operator|.
name|myCopyFromRevision
operator|=
name|Long
operator|.
name|parseLong
argument_list|(
operator|(
name|String
operator|)
name|headers
operator|.
name|get
argument_list|(
name|SVNAdminHelper
operator|.
name|DUMPFILE_NODE_COPYFROM_REVISION
argument_list|)
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|NumberFormatException
name|nfe
parameter_list|)
block|{
name|SVNErrorMessage
name|err
init|=
name|SVNErrorMessage
operator|.
name|create
argument_list|(
name|SVNErrorCode
operator|.
name|STREAM_MALFORMED_DATA
argument_list|,
literal|"Cannot parse revision ({0}) in dump file"
argument_list|,
name|headers
operator|.
name|get
argument_list|(
name|SVNAdminHelper
operator|.
name|DUMPFILE_NODE_COPYFROM_REVISION
argument_list|)
argument_list|)
decl_stmt|;
name|SVNErrorManager
operator|.
name|error
argument_list|(
name|err
argument_list|,
name|SVNLogType
operator|.
name|FSFS
argument_list|)
expr_stmt|;
block|}
block|}
if|if
condition|(
name|headers
operator|.
name|containsKey
argument_list|(
name|SVNAdminHelper
operator|.
name|DUMPFILE_NODE_COPYFROM_PATH
argument_list|)
condition|)
block|{
name|String
name|copyFromPath
init|=
operator|(
name|String
operator|)
name|headers
operator|.
name|get
argument_list|(
name|SVNAdminHelper
operator|.
name|DUMPFILE_NODE_COPYFROM_PATH
argument_list|)
decl_stmt|;
if|if
condition|(
name|myParentDir
operator|!=
literal|null
condition|)
block|{
name|baton
operator|.
name|myCopyFromPath
operator|=
name|SVNPathUtil
operator|.
name|append
argument_list|(
name|myParentDir
argument_list|,
name|copyFromPath
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|baton
operator|.
name|myCopyFromPath
operator|=
name|SVNPathUtil
operator|.
name|canonicalizePath
argument_list|(
name|copyFromPath
argument_list|)
expr_stmt|;
block|}
name|baton
operator|.
name|myCopyFromPath
operator|=
name|SVNPathUtil
operator|.
name|getAbsolutePath
argument_list|(
name|baton
operator|.
name|myCopyFromPath
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|headers
operator|.
name|containsKey
argument_list|(
name|SVNAdminHelper
operator|.
name|DUMPFILE_TEXT_CONTENT_MD5
argument_list|)
condition|)
block|{
name|baton
operator|.
name|myResultChecksum
operator|=
operator|(
name|String
operator|)
name|headers
operator|.
name|get
argument_list|(
name|SVNAdminHelper
operator|.
name|DUMPFILE_TEXT_CONTENT_MD5
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|headers
operator|.
name|containsKey
argument_list|(
name|SVNAdminHelper
operator|.
name|DUMPFILE_TEXT_DELTA_BASE_MD5
argument_list|)
condition|)
block|{
name|baton
operator|.
name|myBaseChecksum
operator|=
operator|(
name|String
operator|)
name|headers
operator|.
name|get
argument_list|(
name|SVNAdminHelper
operator|.
name|DUMPFILE_TEXT_DELTA_BASE_MD5
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|headers
operator|.
name|containsKey
argument_list|(
name|SVNAdminHelper
operator|.
name|DUMPFILE_TEXT_COPY_SOURCE_MD5
argument_list|)
condition|)
block|{
name|baton
operator|.
name|myCopySourceChecksum
operator|=
operator|(
name|String
operator|)
name|headers
operator|.
name|get
argument_list|(
name|SVNAdminHelper
operator|.
name|DUMPFILE_TEXT_COPY_SOURCE_MD5
argument_list|)
expr_stmt|;
block|}
return|return
name|baton
return|;
block|}
specifier|private
name|Map
name|renumberMergeInfoRevisions
parameter_list|(
name|SVNPropertyValue
name|mergeInfoProp
parameter_list|)
throws|throws
name|SVNException
block|{
name|String
name|mergeInfoString
init|=
name|SVNPropertyValue
operator|.
name|getPropertyAsString
argument_list|(
name|mergeInfoProp
argument_list|)
decl_stmt|;
name|Map
name|mergeInfo
init|=
name|SVNMergeInfoUtil
operator|.
name|parseMergeInfo
argument_list|(
operator|new
name|StringBuffer
argument_list|(
name|mergeInfoString
argument_list|)
argument_list|,
literal|null
argument_list|)
decl_stmt|;
for|for
control|(
name|Iterator
name|mergeInfoIter
init|=
name|mergeInfo
operator|.
name|keySet
argument_list|()
operator|.
name|iterator
argument_list|()
init|;
name|mergeInfoIter
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|String
name|mergeSource
init|=
operator|(
name|String
operator|)
name|mergeInfoIter
operator|.
name|next
argument_list|()
decl_stmt|;
name|SVNMergeRangeList
name|rangeList
init|=
operator|(
name|SVNMergeRangeList
operator|)
name|mergeInfo
operator|.
name|get
argument_list|(
name|mergeSource
argument_list|)
decl_stmt|;
name|SVNMergeRange
index|[]
name|ranges
init|=
name|rangeList
operator|.
name|getRanges
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|ranges
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
name|SVNMergeRange
name|range
init|=
name|ranges
index|[
name|i
index|]
decl_stmt|;
name|Long
name|revFromMap
init|=
operator|(
name|Long
operator|)
name|myRevisionsMap
operator|.
name|get
argument_list|(
operator|new
name|Long
argument_list|(
name|range
operator|.
name|getStartRevision
argument_list|()
argument_list|)
argument_list|)
decl_stmt|;
if|if
condition|(
name|revFromMap
operator|!=
literal|null
operator|&&
name|SVNRevision
operator|.
name|isValidRevisionNumber
argument_list|(
name|revFromMap
operator|.
name|longValue
argument_list|()
argument_list|)
condition|)
block|{
name|range
operator|.
name|setStartRevision
argument_list|(
name|revFromMap
operator|.
name|longValue
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|revFromMap
operator|=
operator|(
name|Long
operator|)
name|myRevisionsMap
operator|.
name|get
argument_list|(
operator|new
name|Long
argument_list|(
name|range
operator|.
name|getEndRevision
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
if|if
condition|(
name|revFromMap
operator|!=
literal|null
operator|&&
name|SVNRevision
operator|.
name|isValidRevisionNumber
argument_list|(
name|revFromMap
operator|.
name|longValue
argument_list|()
argument_list|)
condition|)
block|{
name|range
operator|.
name|setEndRevision
argument_list|(
name|revFromMap
operator|.
name|longValue
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
name|Arrays
operator|.
name|sort
argument_list|(
name|ranges
argument_list|)
expr_stmt|;
block|}
return|return
name|mergeInfo
return|;
block|}
specifier|private
name|Map
name|prefixMergeInfoPaths
parameter_list|(
name|Map
name|mergeInfo
parameter_list|)
block|{
name|Map
name|prefixedMergeInfo
init|=
operator|new
name|TreeMap
argument_list|()
decl_stmt|;
for|for
control|(
name|Iterator
name|mergeInfoIter
init|=
name|mergeInfo
operator|.
name|keySet
argument_list|()
operator|.
name|iterator
argument_list|()
init|;
name|mergeInfoIter
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|String
name|mergeSource
init|=
operator|(
name|String
operator|)
name|mergeInfoIter
operator|.
name|next
argument_list|()
decl_stmt|;
name|SVNMergeRangeList
name|rangeList
init|=
operator|(
name|SVNMergeRangeList
operator|)
name|mergeInfo
operator|.
name|get
argument_list|(
name|mergeSource
argument_list|)
decl_stmt|;
name|mergeSource
operator|=
name|mergeSource
operator|.
name|startsWith
argument_list|(
literal|"/"
argument_list|)
condition|?
name|mergeSource
operator|.
name|substring
argument_list|(
literal|1
argument_list|)
else|:
name|mergeSource
expr_stmt|;
name|mergeSource
operator|=
name|SVNPathUtil
operator|.
name|append
argument_list|(
name|myParentDir
argument_list|,
name|mergeSource
argument_list|)
expr_stmt|;
if|if
condition|(
name|mergeSource
operator|.
name|charAt
argument_list|(
literal|0
argument_list|)
operator|!=
literal|'/'
condition|)
block|{
name|mergeSource
operator|=
literal|'/'
operator|+
name|mergeSource
expr_stmt|;
block|}
name|prefixedMergeInfo
operator|.
name|put
argument_list|(
name|mergeSource
argument_list|,
name|rangeList
argument_list|)
expr_stmt|;
block|}
return|return
name|prefixedMergeInfo
return|;
block|}
specifier|private
class|class
name|RevisionBaton
block|{
name|FSTransactionInfo
name|myTxn
decl_stmt|;
name|FSTransactionRoot
name|myTxnRoot
decl_stmt|;
name|long
name|myRevision
decl_stmt|;
name|long
name|myRevisionOffset
decl_stmt|;
name|SVNPropertyValue
name|myDatestamp
decl_stmt|;
specifier|private
name|FSCommitter
name|myCommitter
decl_stmt|;
specifier|private
name|FSDeltaConsumer
name|myDeltaConsumer
decl_stmt|;
specifier|public
name|FSDeltaConsumer
name|getConsumer
parameter_list|()
block|{
if|if
condition|(
name|myDeltaConsumer
operator|==
literal|null
condition|)
block|{
name|myDeltaConsumer
operator|=
operator|new
name|FSDeltaConsumer
argument_list|(
literal|""
argument_list|,
name|myTxnRoot
argument_list|,
name|myFSFS
argument_list|,
name|getCommitter
argument_list|()
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|)
expr_stmt|;
block|}
return|return
name|myDeltaConsumer
return|;
block|}
specifier|public
name|FSCommitter
name|getCommitter
parameter_list|()
block|{
if|if
condition|(
name|myCommitter
operator|==
literal|null
condition|)
block|{
name|myCommitter
operator|=
operator|new
name|FSCommitter
argument_list|(
name|myFSFS
argument_list|,
name|myTxnRoot
argument_list|,
name|myTxn
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|)
expr_stmt|;
block|}
return|return
name|myCommitter
return|;
block|}
block|}
specifier|private
class|class
name|NodeBaton
block|{
name|String
name|myPath
decl_stmt|;
name|SVNNodeKind
name|myKind
decl_stmt|;
name|int
name|myAction
decl_stmt|;
name|String
name|myBaseChecksum
decl_stmt|;
name|String
name|myResultChecksum
decl_stmt|;
name|String
name|myCopySourceChecksum
decl_stmt|;
name|long
name|myCopyFromRevision
decl_stmt|;
name|String
name|myCopyFromPath
decl_stmt|;
block|}
block|}
end_class

end_unit

