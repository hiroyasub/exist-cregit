begin_unit|revision:1.0.0;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * ====================================================================  * Copyright (c) 2004-2010 TMate Software Ltd.  All rights reserved.  *  * This software is licensed as described in the file COPYING, which  * you should have received as part of this distribution.  The terms  * are also available at http://svnkit.com/license.html  * If newer versions of this license are posted there, you may use a  * newer version instead, at your option.  * ====================================================================  */
end_comment

begin_package
package|package
name|org
operator|.
name|exist
operator|.
name|versioning
operator|.
name|svn
operator|.
name|internal
operator|.
name|wc
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|UnsupportedEncodingException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|nio
operator|.
name|ByteBuffer
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Arrays
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|org
operator|.
name|tmatesoft
operator|.
name|svn
operator|.
name|core
operator|.
name|SVNErrorCode
import|;
end_import

begin_import
import|import
name|org
operator|.
name|tmatesoft
operator|.
name|svn
operator|.
name|core
operator|.
name|SVNErrorMessage
import|;
end_import

begin_import
import|import
name|org
operator|.
name|tmatesoft
operator|.
name|svn
operator|.
name|core
operator|.
name|SVNException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|tmatesoft
operator|.
name|svn
operator|.
name|util
operator|.
name|SVNLogType
import|;
end_import

begin_comment
comment|/**  * @version 1.3  * @author  TMate Software Ltd.  */
end_comment

begin_class
specifier|public
class|class
name|SVNSubstitutor
block|{
specifier|private
specifier|static
specifier|final
name|byte
index|[]
name|ALL
init|=
operator|new
name|byte
index|[]
block|{
literal|'$'
block|,
literal|'\r'
block|,
literal|'\n'
block|}
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|byte
index|[]
name|EOLS
init|=
operator|new
name|byte
index|[]
block|{
literal|'\r'
block|,
literal|'\n'
block|}
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|byte
index|[]
name|KEYWORDS
init|=
operator|new
name|byte
index|[]
block|{
literal|'$'
block|}
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|int
name|KEYWORD_MAX_LENGTH
init|=
literal|255
decl_stmt|;
specifier|private
name|boolean
name|myIsRepair
decl_stmt|;
specifier|private
name|boolean
name|myIsExpand
decl_stmt|;
specifier|private
name|Map
name|myKeywords
decl_stmt|;
specifier|private
name|byte
index|[]
name|myEOL
decl_stmt|;
specifier|private
name|byte
index|[]
name|myLastEOL
decl_stmt|;
specifier|private
name|byte
index|[]
name|myInteresting
decl_stmt|;
specifier|private
name|byte
index|[]
name|myEOLBuffer
decl_stmt|;
specifier|private
name|byte
index|[]
name|myKeywordBuffer
decl_stmt|;
specifier|private
name|int
index|[]
name|myLastEOLLength
init|=
operator|new
name|int
index|[]
block|{
literal|0
block|}
decl_stmt|;
specifier|private
name|int
name|myKeywordBufferLength
decl_stmt|;
specifier|private
name|int
name|myEOLBufferLength
decl_stmt|;
specifier|public
name|SVNSubstitutor
parameter_list|(
name|byte
index|[]
name|eol
parameter_list|,
name|boolean
name|repair
parameter_list|,
name|Map
name|keywords
parameter_list|,
name|boolean
name|expand
parameter_list|)
block|{
name|myEOL
operator|=
name|eol
expr_stmt|;
name|myKeywords
operator|=
name|keywords
expr_stmt|;
name|myIsExpand
operator|=
name|expand
expr_stmt|;
name|myIsRepair
operator|=
name|repair
expr_stmt|;
name|myInteresting
operator|=
name|eol
operator|!=
literal|null
operator|&&
name|keywords
operator|!=
literal|null
condition|?
name|ALL
else|:
operator|(
name|eol
operator|!=
literal|null
condition|?
name|EOLS
else|:
name|KEYWORDS
operator|)
expr_stmt|;
name|myEOLBuffer
operator|=
operator|new
name|byte
index|[
literal|2
index|]
expr_stmt|;
name|myLastEOL
operator|=
operator|new
name|byte
index|[
literal|2
index|]
expr_stmt|;
name|myKeywordBuffer
operator|=
operator|new
name|byte
index|[
name|KEYWORD_MAX_LENGTH
index|]
expr_stmt|;
name|myEOLBufferLength
operator|=
literal|0
expr_stmt|;
name|myKeywordBufferLength
operator|=
literal|0
expr_stmt|;
block|}
specifier|public
name|ByteBuffer
name|translateChunk
parameter_list|(
name|ByteBuffer
name|src
parameter_list|,
name|ByteBuffer
name|dst
parameter_list|)
throws|throws
name|SVNException
block|{
if|if
condition|(
name|src
operator|!=
literal|null
condition|)
block|{
name|int
name|nextSignOff
init|=
literal|0
decl_stmt|;
while|while
condition|(
name|src
operator|.
name|hasRemaining
argument_list|()
condition|)
block|{
name|byte
name|p
init|=
name|src
operator|.
name|get
argument_list|(
name|src
operator|.
name|position
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|myEOLBufferLength
operator|>
literal|0
condition|)
block|{
if|if
condition|(
name|p
operator|==
literal|'\n'
condition|)
block|{
name|myEOLBuffer
index|[
name|myEOLBufferLength
operator|++
index|]
operator|=
name|src
operator|.
name|get
argument_list|()
expr_stmt|;
block|}
name|dst
operator|=
name|substituteEOL
argument_list|(
name|dst
argument_list|,
name|myEOL
argument_list|,
name|myEOL
operator|.
name|length
argument_list|,
name|myLastEOL
argument_list|,
name|myLastEOLLength
argument_list|,
name|myEOLBuffer
argument_list|,
name|myEOLBufferLength
argument_list|,
name|myIsRepair
argument_list|)
expr_stmt|;
name|myEOLBufferLength
operator|=
literal|0
expr_stmt|;
block|}
if|else if
condition|(
name|myKeywordBufferLength
operator|>
literal|0
operator|&&
name|p
operator|==
literal|'$'
condition|)
block|{
name|myKeywordBuffer
index|[
name|myKeywordBufferLength
operator|++
index|]
operator|=
name|src
operator|.
name|get
argument_list|()
expr_stmt|;
name|byte
index|[]
name|keywordName
init|=
name|matchKeyword
argument_list|(
name|myKeywordBuffer
argument_list|,
literal|0
argument_list|,
name|myKeywordBufferLength
argument_list|)
decl_stmt|;
if|if
condition|(
name|keywordName
operator|==
literal|null
condition|)
block|{
name|myKeywordBufferLength
operator|--
expr_stmt|;
name|unread
argument_list|(
name|src
argument_list|,
literal|1
argument_list|)
expr_stmt|;
block|}
name|int
name|newLength
init|=
operator|-
literal|1
decl_stmt|;
if|if
condition|(
name|keywordName
operator|==
literal|null
operator|||
operator|(
name|newLength
operator|=
name|translateKeyword
argument_list|(
name|myKeywordBuffer
argument_list|,
literal|0
argument_list|,
name|myKeywordBufferLength
argument_list|,
name|keywordName
argument_list|)
operator|)
operator|>=
literal|0
operator|||
name|myKeywordBufferLength
operator|>=
name|KEYWORD_MAX_LENGTH
condition|)
block|{
if|if
condition|(
name|newLength
operator|>=
literal|0
condition|)
block|{
name|myKeywordBufferLength
operator|=
name|newLength
expr_stmt|;
block|}
name|dst
operator|=
name|write
argument_list|(
name|dst
argument_list|,
name|myKeywordBuffer
argument_list|,
literal|0
argument_list|,
name|myKeywordBufferLength
argument_list|)
expr_stmt|;
name|nextSignOff
operator|=
literal|0
expr_stmt|;
name|myKeywordBufferLength
operator|=
literal|0
expr_stmt|;
block|}
else|else
block|{
if|if
condition|(
name|nextSignOff
operator|==
literal|0
condition|)
block|{
name|nextSignOff
operator|=
name|myKeywordBufferLength
operator|-
literal|1
expr_stmt|;
block|}
continue|continue;
block|}
block|}
if|else if
condition|(
name|myKeywordBufferLength
operator|==
name|KEYWORD_MAX_LENGTH
operator|-
literal|1
operator|||
operator|(
name|myKeywordBufferLength
operator|>
literal|0
operator|&&
operator|(
name|p
operator|==
literal|'\r'
operator|||
name|p
operator|==
literal|'\n'
operator|)
operator|)
condition|)
block|{
if|if
condition|(
name|nextSignOff
operator|>
literal|0
condition|)
block|{
name|unread
argument_list|(
name|src
argument_list|,
name|myKeywordBufferLength
operator|-
name|nextSignOff
argument_list|)
expr_stmt|;
name|myKeywordBufferLength
operator|=
name|nextSignOff
expr_stmt|;
name|nextSignOff
operator|=
literal|0
expr_stmt|;
block|}
name|dst
operator|=
name|write
argument_list|(
name|dst
argument_list|,
name|myKeywordBuffer
argument_list|,
literal|0
argument_list|,
name|myKeywordBufferLength
argument_list|)
expr_stmt|;
name|myKeywordBufferLength
operator|=
literal|0
expr_stmt|;
block|}
if|else if
condition|(
name|myKeywordBufferLength
operator|>
literal|0
condition|)
block|{
name|myKeywordBuffer
index|[
name|myKeywordBufferLength
operator|++
index|]
operator|=
name|src
operator|.
name|get
argument_list|()
expr_stmt|;
continue|continue;
block|}
name|int
name|len
init|=
literal|0
decl_stmt|;
while|while
condition|(
name|src
operator|.
name|position
argument_list|()
operator|+
name|len
operator|<
name|src
operator|.
name|limit
argument_list|()
operator|&&
operator|!
name|isInteresting
argument_list|(
name|src
operator|.
name|get
argument_list|(
name|src
operator|.
name|position
argument_list|()
operator|+
name|len
argument_list|)
argument_list|)
condition|)
block|{
name|len
operator|++
expr_stmt|;
block|}
if|if
condition|(
name|len
operator|>
literal|0
condition|)
block|{
name|dst
operator|=
name|write
argument_list|(
name|dst
argument_list|,
name|src
operator|.
name|array
argument_list|()
argument_list|,
name|src
operator|.
name|arrayOffset
argument_list|()
operator|+
name|src
operator|.
name|position
argument_list|()
argument_list|,
name|len
argument_list|)
expr_stmt|;
block|}
name|src
operator|.
name|position
argument_list|(
name|src
operator|.
name|position
argument_list|()
operator|+
name|len
argument_list|)
expr_stmt|;
if|if
condition|(
name|src
operator|.
name|hasRemaining
argument_list|()
condition|)
block|{
comment|// setup interesting.
name|p
operator|=
name|src
operator|.
name|get
argument_list|()
expr_stmt|;
switch|switch
condition|(
name|p
condition|)
block|{
case|case
literal|'$'
case|:
name|myKeywordBuffer
index|[
name|myKeywordBufferLength
operator|++
index|]
operator|=
name|p
expr_stmt|;
break|break;
case|case
literal|'\r'
case|:
name|myEOLBuffer
index|[
name|myEOLBufferLength
operator|++
index|]
operator|=
name|p
expr_stmt|;
break|break;
case|case
literal|'\n'
case|:
name|myEOLBuffer
index|[
name|myEOLBufferLength
operator|++
index|]
operator|=
name|p
expr_stmt|;
name|dst
operator|=
name|substituteEOL
argument_list|(
name|dst
argument_list|,
name|myEOL
argument_list|,
name|myEOL
operator|.
name|length
argument_list|,
name|myLastEOL
argument_list|,
name|myLastEOLLength
argument_list|,
name|myEOLBuffer
argument_list|,
name|myEOLBufferLength
argument_list|,
name|myIsRepair
argument_list|)
expr_stmt|;
name|myEOLBufferLength
operator|=
literal|0
expr_stmt|;
break|break;
block|}
block|}
block|}
block|}
else|else
block|{
comment|// flush buffers if any.
if|if
condition|(
name|myEOLBufferLength
operator|>
literal|0
condition|)
block|{
name|dst
operator|=
name|substituteEOL
argument_list|(
name|dst
argument_list|,
name|myEOL
argument_list|,
name|myEOL
operator|.
name|length
argument_list|,
name|myLastEOL
argument_list|,
name|myLastEOLLength
argument_list|,
name|myEOLBuffer
argument_list|,
name|myEOLBufferLength
argument_list|,
name|myIsRepair
argument_list|)
expr_stmt|;
name|myEOLBufferLength
operator|=
literal|0
expr_stmt|;
block|}
if|if
condition|(
name|myKeywordBufferLength
operator|>
literal|0
condition|)
block|{
name|dst
operator|=
name|write
argument_list|(
name|dst
argument_list|,
name|myKeywordBuffer
argument_list|,
literal|0
argument_list|,
name|myKeywordBufferLength
argument_list|)
expr_stmt|;
name|myKeywordBufferLength
operator|=
literal|0
expr_stmt|;
block|}
block|}
return|return
name|dst
return|;
block|}
specifier|private
name|boolean
name|isInteresting
parameter_list|(
name|byte
name|p
parameter_list|)
block|{
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|myInteresting
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
if|if
condition|(
name|p
operator|==
name|myInteresting
index|[
name|i
index|]
condition|)
block|{
return|return
literal|true
return|;
block|}
block|}
return|return
literal|false
return|;
block|}
specifier|private
name|byte
index|[]
name|matchKeyword
parameter_list|(
name|byte
index|[]
name|src
parameter_list|,
name|int
name|offset
parameter_list|,
name|int
name|length
parameter_list|)
block|{
if|if
condition|(
name|myKeywords
operator|==
literal|null
condition|)
block|{
return|return
literal|null
return|;
block|}
name|String
name|name
init|=
literal|null
decl_stmt|;
name|int
name|len
init|=
literal|0
decl_stmt|;
try|try
block|{
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|length
operator|-
literal|2
operator|&&
name|src
index|[
name|offset
operator|+
name|i
operator|+
literal|1
index|]
operator|!=
literal|':'
condition|;
name|i
operator|++
control|)
block|{
name|len
operator|++
expr_stmt|;
block|}
if|if
condition|(
name|len
operator|==
literal|0
condition|)
block|{
return|return
literal|null
return|;
block|}
name|name
operator|=
operator|new
name|String
argument_list|(
name|src
argument_list|,
name|offset
operator|+
literal|1
argument_list|,
name|len
argument_list|,
literal|"ASCII"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|UnsupportedEncodingException
name|e
parameter_list|)
block|{
comment|//
block|}
if|if
condition|(
name|name
operator|!=
literal|null
operator|&&
name|myKeywords
operator|.
name|containsKey
argument_list|(
name|name
argument_list|)
condition|)
block|{
name|byte
index|[]
name|nameBytes
init|=
operator|new
name|byte
index|[
name|len
index|]
decl_stmt|;
name|System
operator|.
name|arraycopy
argument_list|(
name|src
argument_list|,
name|offset
operator|+
literal|1
argument_list|,
name|nameBytes
argument_list|,
literal|0
argument_list|,
name|len
argument_list|)
expr_stmt|;
return|return
name|nameBytes
return|;
block|}
return|return
literal|null
return|;
block|}
specifier|private
name|int
name|translateKeyword
parameter_list|(
name|byte
index|[]
name|src
parameter_list|,
name|int
name|offset
parameter_list|,
name|int
name|length
parameter_list|,
name|byte
index|[]
name|name
parameter_list|)
block|{
if|if
condition|(
name|myKeywords
operator|==
literal|null
condition|)
block|{
return|return
operator|-
literal|1
return|;
block|}
name|String
name|nameStr
decl_stmt|;
try|try
block|{
name|nameStr
operator|=
operator|new
name|String
argument_list|(
name|name
argument_list|,
literal|"ASCII"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|UnsupportedEncodingException
name|e
parameter_list|)
block|{
return|return
operator|-
literal|1
return|;
block|}
name|byte
index|[]
name|value
init|=
operator|(
name|byte
index|[]
operator|)
name|myKeywords
operator|.
name|get
argument_list|(
name|nameStr
argument_list|)
decl_stmt|;
if|if
condition|(
name|myKeywords
operator|.
name|containsKey
argument_list|(
name|nameStr
argument_list|)
condition|)
block|{
if|if
condition|(
operator|!
name|myIsExpand
condition|)
block|{
name|value
operator|=
literal|null
expr_stmt|;
block|}
return|return
name|substituteKeyword
argument_list|(
name|src
argument_list|,
name|offset
argument_list|,
name|length
argument_list|,
name|name
argument_list|,
name|value
argument_list|)
return|;
block|}
return|return
operator|-
literal|1
return|;
block|}
specifier|private
specifier|static
name|void
name|unread
parameter_list|(
name|ByteBuffer
name|buffer
parameter_list|,
name|int
name|length
parameter_list|)
block|{
name|buffer
operator|.
name|position
argument_list|(
name|buffer
operator|.
name|position
argument_list|()
operator|-
name|length
argument_list|)
expr_stmt|;
block|}
specifier|private
specifier|static
name|int
name|substituteKeyword
parameter_list|(
name|byte
index|[]
name|src
parameter_list|,
name|int
name|offset
parameter_list|,
name|int
name|length
parameter_list|,
name|byte
index|[]
name|keyword
parameter_list|,
name|byte
index|[]
name|value
parameter_list|)
block|{
name|int
name|pointer
decl_stmt|;
if|if
condition|(
name|length
operator|<
name|keyword
operator|.
name|length
operator|+
literal|2
condition|)
block|{
return|return
operator|-
literal|1
return|;
block|}
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|keyword
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
if|if
condition|(
name|keyword
index|[
name|i
index|]
operator|!=
name|src
index|[
name|offset
operator|+
literal|1
operator|+
name|i
index|]
condition|)
block|{
return|return
operator|-
literal|1
return|;
block|}
block|}
name|pointer
operator|=
name|offset
operator|+
literal|1
operator|+
name|keyword
operator|.
name|length
expr_stmt|;
if|if
condition|(
name|src
index|[
name|pointer
index|]
operator|==
literal|':'
operator|&&
name|src
index|[
name|pointer
operator|+
literal|1
index|]
operator|==
literal|':'
operator|&&
name|src
index|[
name|pointer
operator|+
literal|2
index|]
operator|==
literal|' '
operator|&&
operator|(
name|src
index|[
name|offset
operator|+
name|length
operator|-
literal|2
index|]
operator|==
literal|' '
operator|||
name|src
index|[
name|offset
operator|+
name|length
operator|-
literal|2
index|]
operator|==
literal|'#'
operator|)
operator|&&
literal|6
operator|+
name|keyword
operator|.
name|length
operator|<
name|length
condition|)
block|{
comment|// fixed size keyword.
if|if
condition|(
name|value
operator|==
literal|null
condition|)
block|{
name|pointer
operator|+=
literal|2
expr_stmt|;
while|while
condition|(
name|src
index|[
name|pointer
index|]
operator|!=
literal|'$'
condition|)
block|{
name|src
index|[
name|pointer
operator|++
index|]
operator|=
literal|' '
expr_stmt|;
block|}
block|}
else|else
block|{
name|int
name|maxValueLength
init|=
name|length
operator|-
operator|(
literal|6
operator|+
name|keyword
operator|.
name|length
operator|)
decl_stmt|;
if|if
condition|(
name|value
operator|.
name|length
operator|<=
name|maxValueLength
condition|)
block|{
comment|// put value, then spaces.
name|System
operator|.
name|arraycopy
argument_list|(
name|value
argument_list|,
literal|0
argument_list|,
name|src
argument_list|,
name|pointer
operator|+
literal|3
argument_list|,
name|value
operator|.
name|length
argument_list|)
expr_stmt|;
name|pointer
operator|+=
literal|3
operator|+
name|value
operator|.
name|length
expr_stmt|;
while|while
condition|(
name|src
index|[
name|pointer
index|]
operator|!=
literal|'$'
condition|)
block|{
name|src
index|[
name|pointer
operator|++
index|]
operator|=
literal|' '
expr_stmt|;
block|}
block|}
else|else
block|{
name|System
operator|.
name|arraycopy
argument_list|(
name|value
argument_list|,
literal|0
argument_list|,
name|src
argument_list|,
name|pointer
operator|+
literal|3
argument_list|,
name|maxValueLength
argument_list|)
expr_stmt|;
name|src
index|[
name|offset
operator|+
name|length
operator|-
literal|2
index|]
operator|=
literal|'#'
expr_stmt|;
name|src
index|[
name|offset
operator|+
name|length
operator|-
literal|1
index|]
operator|=
literal|'$'
expr_stmt|;
block|}
block|}
return|return
name|length
return|;
block|}
if|else if
condition|(
name|src
index|[
name|pointer
index|]
operator|==
literal|'$'
operator|||
operator|(
name|src
index|[
name|pointer
index|]
operator|==
literal|':'
operator|&&
name|src
index|[
name|pointer
operator|+
literal|1
index|]
operator|==
literal|'$'
operator|)
condition|)
block|{
if|if
condition|(
name|value
operator|!=
literal|null
condition|)
block|{
name|src
index|[
name|pointer
index|]
operator|=
literal|':'
expr_stmt|;
name|src
index|[
name|pointer
operator|+
literal|1
index|]
operator|=
literal|' '
expr_stmt|;
if|if
condition|(
name|value
operator|.
name|length
operator|>
literal|0
condition|)
block|{
name|int
name|valueLength
init|=
name|value
operator|.
name|length
decl_stmt|;
if|if
condition|(
name|valueLength
operator|>
name|KEYWORD_MAX_LENGTH
operator|-
literal|5
operator|-
name|keyword
operator|.
name|length
condition|)
block|{
name|valueLength
operator|=
name|KEYWORD_MAX_LENGTH
operator|-
literal|5
operator|-
name|keyword
operator|.
name|length
expr_stmt|;
block|}
name|System
operator|.
name|arraycopy
argument_list|(
name|value
argument_list|,
literal|0
argument_list|,
name|src
argument_list|,
name|pointer
operator|+
literal|2
argument_list|,
name|valueLength
argument_list|)
expr_stmt|;
name|src
index|[
name|pointer
operator|+
literal|2
operator|+
name|valueLength
index|]
operator|=
literal|' '
expr_stmt|;
name|src
index|[
name|pointer
operator|+
literal|3
operator|+
name|valueLength
index|]
operator|=
literal|'$'
expr_stmt|;
name|length
operator|=
literal|5
operator|+
name|keyword
operator|.
name|length
operator|+
name|valueLength
expr_stmt|;
block|}
else|else
block|{
name|src
index|[
name|pointer
operator|+
literal|2
index|]
operator|=
literal|'$'
expr_stmt|;
name|length
operator|=
literal|4
operator|+
name|keyword
operator|.
name|length
expr_stmt|;
block|}
block|}
return|return
name|length
return|;
block|}
if|else if
condition|(
name|length
operator|>=
name|keyword
operator|.
name|length
operator|+
literal|4
operator|&&
name|src
index|[
name|pointer
index|]
operator|==
literal|':'
operator|&&
name|src
index|[
name|pointer
operator|+
literal|1
index|]
operator|==
literal|' '
operator|&&
name|src
index|[
name|offset
operator|+
name|length
operator|-
literal|2
index|]
operator|==
literal|' '
condition|)
block|{
if|if
condition|(
name|value
operator|==
literal|null
condition|)
block|{
name|src
index|[
name|pointer
index|]
operator|=
literal|'$'
expr_stmt|;
name|length
operator|=
literal|2
operator|+
name|keyword
operator|.
name|length
expr_stmt|;
block|}
else|else
block|{
name|src
index|[
name|pointer
index|]
operator|=
literal|':'
expr_stmt|;
name|src
index|[
name|pointer
operator|+
literal|1
index|]
operator|=
literal|' '
expr_stmt|;
if|if
condition|(
name|value
operator|.
name|length
operator|>
literal|0
condition|)
block|{
name|int
name|valueLength
init|=
name|value
operator|.
name|length
decl_stmt|;
if|if
condition|(
name|valueLength
operator|>
name|KEYWORD_MAX_LENGTH
operator|-
literal|5
operator|-
name|keyword
operator|.
name|length
condition|)
block|{
name|valueLength
operator|=
name|KEYWORD_MAX_LENGTH
operator|-
literal|5
operator|-
name|keyword
operator|.
name|length
expr_stmt|;
block|}
name|System
operator|.
name|arraycopy
argument_list|(
name|value
argument_list|,
literal|0
argument_list|,
name|src
argument_list|,
name|pointer
operator|+
literal|2
argument_list|,
name|valueLength
argument_list|)
expr_stmt|;
name|src
index|[
name|pointer
operator|+
literal|2
operator|+
name|valueLength
index|]
operator|=
literal|' '
expr_stmt|;
name|src
index|[
name|pointer
operator|+
literal|3
operator|+
name|valueLength
index|]
operator|=
literal|'$'
expr_stmt|;
name|length
operator|=
literal|5
operator|+
name|keyword
operator|.
name|length
operator|+
name|valueLength
expr_stmt|;
block|}
else|else
block|{
name|src
index|[
name|pointer
operator|+
literal|2
index|]
operator|=
literal|'$'
expr_stmt|;
name|length
operator|=
literal|4
operator|+
name|keyword
operator|.
name|length
expr_stmt|;
block|}
block|}
return|return
name|length
return|;
block|}
return|return
operator|-
literal|1
return|;
block|}
specifier|private
specifier|static
name|ByteBuffer
name|substituteEOL
parameter_list|(
name|ByteBuffer
name|dst
parameter_list|,
name|byte
index|[]
name|eol
parameter_list|,
name|int
name|eolLength
parameter_list|,
name|byte
index|[]
name|lastEOL
parameter_list|,
name|int
index|[]
name|lastEOLLength
parameter_list|,
name|byte
index|[]
name|nextEOL
parameter_list|,
name|int
name|nextEOLLength
parameter_list|,
name|boolean
name|repair
parameter_list|)
throws|throws
name|SVNException
block|{
if|if
condition|(
name|lastEOLLength
index|[
literal|0
index|]
operator|>
literal|0
condition|)
block|{
if|if
condition|(
operator|!
name|repair
operator|&&
operator|(
name|lastEOLLength
index|[
literal|0
index|]
operator|!=
name|nextEOLLength
operator|||
operator|!
name|Arrays
operator|.
name|equals
argument_list|(
name|lastEOL
argument_list|,
name|nextEOL
argument_list|)
operator|)
condition|)
block|{
comment|// inconsistent EOLs.
name|SVNErrorMessage
name|err
init|=
name|SVNErrorMessage
operator|.
name|create
argument_list|(
name|SVNErrorCode
operator|.
name|IO_INCONSISTENT_EOL
argument_list|)
decl_stmt|;
name|SVNErrorManager
operator|.
name|error
argument_list|(
name|err
argument_list|,
name|SVNLogType
operator|.
name|DEFAULT
argument_list|)
expr_stmt|;
block|}
block|}
else|else
block|{
name|lastEOLLength
index|[
literal|0
index|]
operator|=
name|nextEOLLength
expr_stmt|;
name|lastEOL
index|[
literal|0
index|]
operator|=
name|nextEOL
index|[
literal|0
index|]
expr_stmt|;
name|lastEOL
index|[
literal|1
index|]
operator|=
name|nextEOL
index|[
literal|1
index|]
expr_stmt|;
block|}
return|return
name|write
argument_list|(
name|dst
argument_list|,
name|eol
argument_list|,
literal|0
argument_list|,
name|eolLength
argument_list|)
return|;
block|}
specifier|private
specifier|static
name|ByteBuffer
name|write
parameter_list|(
name|ByteBuffer
name|dst
parameter_list|,
name|byte
index|[]
name|bytes
parameter_list|,
name|int
name|offset
parameter_list|,
name|int
name|length
parameter_list|)
block|{
if|if
condition|(
name|dst
operator|.
name|remaining
argument_list|()
operator|<
name|length
condition|)
block|{
name|ByteBuffer
name|newDst
init|=
name|ByteBuffer
operator|.
name|allocate
argument_list|(
operator|(
name|dst
operator|.
name|position
argument_list|()
operator|+
name|length
operator|)
operator|*
literal|3
operator|/
literal|2
argument_list|)
decl_stmt|;
name|dst
operator|.
name|flip
argument_list|()
expr_stmt|;
name|dst
operator|=
name|newDst
operator|.
name|put
argument_list|(
name|dst
argument_list|)
expr_stmt|;
block|}
return|return
name|dst
operator|.
name|put
argument_list|(
name|bytes
argument_list|,
name|offset
argument_list|,
name|length
argument_list|)
return|;
block|}
block|}
end_class

end_unit

