begin_unit|revision:1.0.0;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * ====================================================================  * Copyright (c) 2004-2010 TMate Software Ltd.  All rights reserved.  *  * This software is licensed as described in the file COPYING, which  * you should have received as part of this distribution.  The terms  * are also available at http://svnkit.com/license.html  * If newer versions of this license are posted there, you may use a  * newer version instead, at your option.  * ====================================================================  */
end_comment

begin_package
package|package
name|org
operator|.
name|exist
operator|.
name|versioning
operator|.
name|svn
operator|.
name|internal
operator|.
name|wc
operator|.
name|admin
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|BufferedReader
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|File
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|InputStreamReader
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|OutputStreamWriter
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|Writer
import|;
end_import

begin_import
import|import
name|java
operator|.
name|security
operator|.
name|MessageDigest
import|;
end_import

begin_import
import|import
name|java
operator|.
name|security
operator|.
name|NoSuchAlgorithmException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collections
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Date
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Iterator
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Set
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|util
operator|.
name|io
operator|.
name|Resource
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|versioning
operator|.
name|svn
operator|.
name|internal
operator|.
name|wc
operator|.
name|SVNAdminUtil
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|versioning
operator|.
name|svn
operator|.
name|internal
operator|.
name|wc
operator|.
name|SVNErrorManager
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|versioning
operator|.
name|svn
operator|.
name|internal
operator|.
name|wc
operator|.
name|SVNFileListUtil
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|versioning
operator|.
name|svn
operator|.
name|internal
operator|.
name|wc
operator|.
name|SVNFileType
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|versioning
operator|.
name|svn
operator|.
name|internal
operator|.
name|wc
operator|.
name|SVNFileUtil
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|versioning
operator|.
name|svn
operator|.
name|internal
operator|.
name|wc
operator|.
name|SVNWCProperties
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|versioning
operator|.
name|svn
operator|.
name|wc
operator|.
name|SVNTreeConflictDescription
import|;
end_import

begin_import
import|import
name|org
operator|.
name|tmatesoft
operator|.
name|svn
operator|.
name|core
operator|.
name|SVNDepth
import|;
end_import

begin_import
import|import
name|org
operator|.
name|tmatesoft
operator|.
name|svn
operator|.
name|core
operator|.
name|SVNErrorCode
import|;
end_import

begin_import
import|import
name|org
operator|.
name|tmatesoft
operator|.
name|svn
operator|.
name|core
operator|.
name|SVNErrorMessage
import|;
end_import

begin_import
import|import
name|org
operator|.
name|tmatesoft
operator|.
name|svn
operator|.
name|core
operator|.
name|SVNException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|tmatesoft
operator|.
name|svn
operator|.
name|core
operator|.
name|SVNNodeKind
import|;
end_import

begin_import
import|import
name|org
operator|.
name|tmatesoft
operator|.
name|svn
operator|.
name|core
operator|.
name|SVNProperties
import|;
end_import

begin_import
import|import
name|org
operator|.
name|tmatesoft
operator|.
name|svn
operator|.
name|core
operator|.
name|SVNProperty
import|;
end_import

begin_import
import|import
name|org
operator|.
name|tmatesoft
operator|.
name|svn
operator|.
name|core
operator|.
name|SVNURL
import|;
end_import

begin_import
import|import
name|org
operator|.
name|tmatesoft
operator|.
name|svn
operator|.
name|core
operator|.
name|internal
operator|.
name|util
operator|.
name|SVNDate
import|;
end_import

begin_import
import|import
name|org
operator|.
name|tmatesoft
operator|.
name|svn
operator|.
name|core
operator|.
name|internal
operator|.
name|util
operator|.
name|SVNEncodingUtil
import|;
end_import

begin_import
import|import
name|org
operator|.
name|tmatesoft
operator|.
name|svn
operator|.
name|core
operator|.
name|internal
operator|.
name|util
operator|.
name|SVNHashMap
import|;
end_import

begin_import
import|import
name|org
operator|.
name|tmatesoft
operator|.
name|svn
operator|.
name|core
operator|.
name|internal
operator|.
name|util
operator|.
name|SVNHashSet
import|;
end_import

begin_import
import|import
name|org
operator|.
name|tmatesoft
operator|.
name|svn
operator|.
name|core
operator|.
name|internal
operator|.
name|util
operator|.
name|SVNPathUtil
import|;
end_import

begin_import
import|import
name|org
operator|.
name|tmatesoft
operator|.
name|svn
operator|.
name|core
operator|.
name|wc
operator|.
name|SVNRevision
import|;
end_import

begin_import
import|import
name|org
operator|.
name|tmatesoft
operator|.
name|svn
operator|.
name|util
operator|.
name|SVNDebugLog
import|;
end_import

begin_import
import|import
name|org
operator|.
name|tmatesoft
operator|.
name|svn
operator|.
name|util
operator|.
name|SVNLogType
import|;
end_import

begin_comment
comment|/**  * @version 1.3  * @author  TMate Software Ltd.  */
end_comment

begin_class
specifier|public
class|class
name|SVNXMLAdminArea
extends|extends
name|SVNAdminArea
block|{
specifier|public
specifier|static
specifier|final
name|int
name|WC_FORMAT
init|=
name|SVNXMLAdminAreaFactory
operator|.
name|WC_FORMAT
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|String
name|THIS_DIR
init|=
literal|""
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|Set
name|BOOLEAN_PROPERTIES
init|=
operator|new
name|SVNHashSet
argument_list|()
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|Set
name|INAPPLICABLE_PROPERTIES
init|=
operator|new
name|SVNHashSet
argument_list|()
decl_stmt|;
static|static
block|{
name|BOOLEAN_PROPERTIES
operator|.
name|add
argument_list|(
name|SVNProperty
operator|.
name|COPIED
argument_list|)
expr_stmt|;
name|BOOLEAN_PROPERTIES
operator|.
name|add
argument_list|(
name|SVNProperty
operator|.
name|DELETED
argument_list|)
expr_stmt|;
name|BOOLEAN_PROPERTIES
operator|.
name|add
argument_list|(
name|SVNProperty
operator|.
name|ABSENT
argument_list|)
expr_stmt|;
name|BOOLEAN_PROPERTIES
operator|.
name|add
argument_list|(
name|SVNProperty
operator|.
name|INCOMPLETE
argument_list|)
expr_stmt|;
name|INAPPLICABLE_PROPERTIES
operator|.
name|add
argument_list|(
name|SVNProperty
operator|.
name|CACHABLE_PROPS
argument_list|)
expr_stmt|;
name|INAPPLICABLE_PROPERTIES
operator|.
name|add
argument_list|(
name|SVNProperty
operator|.
name|PRESENT_PROPS
argument_list|)
expr_stmt|;
name|INAPPLICABLE_PROPERTIES
operator|.
name|add
argument_list|(
name|SVNProperty
operator|.
name|HAS_PROP_MODS
argument_list|)
expr_stmt|;
name|INAPPLICABLE_PROPERTIES
operator|.
name|add
argument_list|(
name|SVNProperty
operator|.
name|WORKING_SIZE
argument_list|)
expr_stmt|;
name|INAPPLICABLE_PROPERTIES
operator|.
name|add
argument_list|(
name|SVNProperty
operator|.
name|DEPTH
argument_list|)
expr_stmt|;
name|INAPPLICABLE_PROPERTIES
operator|.
name|add
argument_list|(
name|SVNProperty
operator|.
name|HAS_PROPS
argument_list|)
expr_stmt|;
name|INAPPLICABLE_PROPERTIES
operator|.
name|add
argument_list|(
name|SVNProperty
operator|.
name|KEEP_LOCAL
argument_list|)
expr_stmt|;
name|INAPPLICABLE_PROPERTIES
operator|.
name|add
argument_list|(
name|SVNProperty
operator|.
name|CHANGELIST
argument_list|)
expr_stmt|;
name|INAPPLICABLE_PROPERTIES
operator|.
name|add
argument_list|(
name|SVNProperty
operator|.
name|FILE_EXTERNAL_PATH
argument_list|)
expr_stmt|;
name|INAPPLICABLE_PROPERTIES
operator|.
name|add
argument_list|(
name|SVNProperty
operator|.
name|FILE_EXTERNAL_REVISION
argument_list|)
expr_stmt|;
name|INAPPLICABLE_PROPERTIES
operator|.
name|add
argument_list|(
name|SVNProperty
operator|.
name|FILE_EXTERNAL_PEG_REVISION
argument_list|)
expr_stmt|;
name|INAPPLICABLE_PROPERTIES
operator|.
name|add
argument_list|(
name|SVNProperty
operator|.
name|TREE_CONFLICT_DATA
argument_list|)
expr_stmt|;
block|}
specifier|private
name|File
name|myLockFile
decl_stmt|;
specifier|private
name|File
name|myEntriesFile
decl_stmt|;
specifier|public
name|SVNXMLAdminArea
parameter_list|(
name|File
name|dir
parameter_list|)
block|{
name|super
argument_list|(
name|dir
argument_list|)
expr_stmt|;
name|myLockFile
operator|=
operator|new
name|Resource
argument_list|(
name|getAdminDirectory
argument_list|()
argument_list|,
literal|"lock"
argument_list|)
expr_stmt|;
name|myEntriesFile
operator|=
operator|new
name|Resource
argument_list|(
name|getAdminDirectory
argument_list|()
argument_list|,
literal|"entries"
argument_list|)
expr_stmt|;
block|}
specifier|private
name|void
name|saveProperties
parameter_list|(
name|SVNLog
name|log
parameter_list|)
throws|throws
name|SVNException
block|{
name|Map
name|propsCache
init|=
name|getPropertiesStorage
argument_list|(
literal|false
argument_list|)
decl_stmt|;
if|if
condition|(
name|propsCache
operator|==
literal|null
operator|||
name|propsCache
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
return|return;
block|}
name|SVNProperties
name|command
init|=
operator|new
name|SVNProperties
argument_list|()
decl_stmt|;
for|for
control|(
name|Iterator
name|entries
init|=
name|propsCache
operator|.
name|keySet
argument_list|()
operator|.
name|iterator
argument_list|()
init|;
name|entries
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|String
name|name
init|=
operator|(
name|String
operator|)
name|entries
operator|.
name|next
argument_list|()
decl_stmt|;
name|SVNVersionedProperties
name|props
init|=
operator|(
name|SVNVersionedProperties
operator|)
name|propsCache
operator|.
name|get
argument_list|(
name|name
argument_list|)
decl_stmt|;
if|if
condition|(
name|props
operator|.
name|isModified
argument_list|()
condition|)
block|{
name|String
name|dstPath
init|=
name|getThisDirName
argument_list|()
operator|.
name|equals
argument_list|(
name|name
argument_list|)
condition|?
literal|"dir-props"
else|:
literal|"props/"
operator|+
name|name
operator|+
literal|".svn-work"
decl_stmt|;
name|dstPath
operator|=
name|getAdminDirectory
argument_list|()
operator|.
name|getName
argument_list|()
operator|+
literal|"/"
operator|+
name|dstPath
expr_stmt|;
if|if
condition|(
name|props
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|command
operator|.
name|put
argument_list|(
name|SVNLog
operator|.
name|NAME_ATTR
argument_list|,
name|dstPath
argument_list|)
expr_stmt|;
name|log
operator|.
name|addCommand
argument_list|(
name|SVNLog
operator|.
name|DELETE
argument_list|,
name|command
argument_list|,
literal|false
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|String
name|tmpPath
init|=
literal|"tmp/"
decl_stmt|;
name|tmpPath
operator|+=
name|getThisDirName
argument_list|()
operator|.
name|equals
argument_list|(
name|name
argument_list|)
condition|?
literal|"dir-props"
else|:
literal|"props/"
operator|+
name|name
operator|+
literal|".svn-work"
expr_stmt|;
name|File
name|tmpFile
init|=
name|getAdminFile
argument_list|(
name|tmpPath
argument_list|)
decl_stmt|;
name|String
name|srcPath
init|=
name|getAdminDirectory
argument_list|()
operator|.
name|getName
argument_list|()
operator|+
literal|"/"
operator|+
name|tmpPath
decl_stmt|;
name|SVNWCProperties
name|tmpProps
init|=
operator|new
name|SVNWCProperties
argument_list|(
name|tmpFile
argument_list|,
name|srcPath
argument_list|)
decl_stmt|;
name|tmpProps
operator|.
name|setProperties
argument_list|(
name|props
operator|.
name|asMap
argument_list|()
argument_list|)
expr_stmt|;
name|command
operator|.
name|put
argument_list|(
name|SVNLog
operator|.
name|NAME_ATTR
argument_list|,
name|srcPath
argument_list|)
expr_stmt|;
name|command
operator|.
name|put
argument_list|(
name|SVNLog
operator|.
name|DEST_ATTR
argument_list|,
name|dstPath
argument_list|)
expr_stmt|;
name|log
operator|.
name|addCommand
argument_list|(
name|SVNLog
operator|.
name|MOVE
argument_list|,
name|command
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|command
operator|.
name|clear
argument_list|()
expr_stmt|;
name|command
operator|.
name|put
argument_list|(
name|SVNLog
operator|.
name|NAME_ATTR
argument_list|,
name|dstPath
argument_list|)
expr_stmt|;
name|log
operator|.
name|addCommand
argument_list|(
name|SVNLog
operator|.
name|READONLY
argument_list|,
name|command
argument_list|,
literal|false
argument_list|)
expr_stmt|;
block|}
name|props
operator|.
name|setModified
argument_list|(
literal|false
argument_list|)
expr_stmt|;
name|command
operator|.
name|clear
argument_list|()
expr_stmt|;
block|}
block|}
block|}
specifier|private
name|void
name|saveBaseProperties
parameter_list|(
name|SVNLog
name|log
parameter_list|)
throws|throws
name|SVNException
block|{
name|Map
name|basePropsCache
init|=
name|getBasePropertiesStorage
argument_list|(
literal|false
argument_list|)
decl_stmt|;
if|if
condition|(
name|basePropsCache
operator|==
literal|null
operator|||
name|basePropsCache
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
return|return;
block|}
name|SVNProperties
name|command
init|=
operator|new
name|SVNProperties
argument_list|()
decl_stmt|;
for|for
control|(
name|Iterator
name|entries
init|=
name|basePropsCache
operator|.
name|keySet
argument_list|()
operator|.
name|iterator
argument_list|()
init|;
name|entries
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|String
name|name
init|=
operator|(
name|String
operator|)
name|entries
operator|.
name|next
argument_list|()
decl_stmt|;
name|SVNVersionedProperties
name|props
init|=
operator|(
name|SVNVersionedProperties
operator|)
name|basePropsCache
operator|.
name|get
argument_list|(
name|name
argument_list|)
decl_stmt|;
if|if
condition|(
name|props
operator|.
name|isModified
argument_list|()
condition|)
block|{
name|String
name|dstPath
init|=
name|getThisDirName
argument_list|()
operator|.
name|equals
argument_list|(
name|name
argument_list|)
condition|?
literal|"dir-prop-base"
else|:
literal|"prop-base/"
operator|+
name|name
operator|+
literal|".svn-base"
decl_stmt|;
name|dstPath
operator|=
name|getAdminDirectory
argument_list|()
operator|.
name|getName
argument_list|()
operator|+
literal|"/"
operator|+
name|dstPath
expr_stmt|;
if|if
condition|(
name|props
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|command
operator|.
name|put
argument_list|(
name|SVNLog
operator|.
name|NAME_ATTR
argument_list|,
name|dstPath
argument_list|)
expr_stmt|;
name|log
operator|.
name|addCommand
argument_list|(
name|SVNLog
operator|.
name|DELETE
argument_list|,
name|command
argument_list|,
literal|false
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|String
name|tmpPath
init|=
literal|"tmp/"
decl_stmt|;
name|tmpPath
operator|+=
name|getThisDirName
argument_list|()
operator|.
name|equals
argument_list|(
name|name
argument_list|)
condition|?
literal|"dir-prop-base"
else|:
literal|"prop-base/"
operator|+
name|name
operator|+
literal|".svn-base"
expr_stmt|;
name|File
name|tmpFile
init|=
name|getAdminFile
argument_list|(
name|tmpPath
argument_list|)
decl_stmt|;
name|String
name|srcPath
init|=
name|getAdminDirectory
argument_list|()
operator|.
name|getName
argument_list|()
operator|+
literal|"/"
operator|+
name|tmpPath
decl_stmt|;
name|SVNWCProperties
name|tmpProps
init|=
operator|new
name|SVNWCProperties
argument_list|(
name|tmpFile
argument_list|,
name|srcPath
argument_list|)
decl_stmt|;
name|tmpProps
operator|.
name|setProperties
argument_list|(
name|props
operator|.
name|asMap
argument_list|()
argument_list|)
expr_stmt|;
name|command
operator|.
name|put
argument_list|(
name|SVNLog
operator|.
name|NAME_ATTR
argument_list|,
name|srcPath
argument_list|)
expr_stmt|;
name|command
operator|.
name|put
argument_list|(
name|SVNLog
operator|.
name|DEST_ATTR
argument_list|,
name|dstPath
argument_list|)
expr_stmt|;
name|log
operator|.
name|addCommand
argument_list|(
name|SVNLog
operator|.
name|MOVE
argument_list|,
name|command
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|command
operator|.
name|clear
argument_list|()
expr_stmt|;
name|command
operator|.
name|put
argument_list|(
name|SVNLog
operator|.
name|NAME_ATTR
argument_list|,
name|dstPath
argument_list|)
expr_stmt|;
name|log
operator|.
name|addCommand
argument_list|(
name|SVNLog
operator|.
name|READONLY
argument_list|,
name|command
argument_list|,
literal|false
argument_list|)
expr_stmt|;
block|}
name|props
operator|.
name|setModified
argument_list|(
literal|false
argument_list|)
expr_stmt|;
name|command
operator|.
name|clear
argument_list|()
expr_stmt|;
block|}
block|}
block|}
specifier|public
name|void
name|saveWCProperties
parameter_list|(
name|boolean
name|close
parameter_list|)
throws|throws
name|SVNException
block|{
name|Map
name|wcPropsCache
init|=
name|getWCPropertiesStorage
argument_list|(
literal|false
argument_list|)
decl_stmt|;
if|if
condition|(
name|wcPropsCache
operator|==
literal|null
condition|)
block|{
return|return;
block|}
for|for
control|(
name|Iterator
name|entries
init|=
name|wcPropsCache
operator|.
name|keySet
argument_list|()
operator|.
name|iterator
argument_list|()
init|;
name|entries
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|String
name|name
init|=
operator|(
name|String
operator|)
name|entries
operator|.
name|next
argument_list|()
decl_stmt|;
name|SVNVersionedProperties
name|props
init|=
operator|(
name|SVNVersionedProperties
operator|)
name|wcPropsCache
operator|.
name|get
argument_list|(
name|name
argument_list|)
decl_stmt|;
if|if
condition|(
name|props
operator|.
name|isModified
argument_list|()
condition|)
block|{
name|String
name|dstPath
init|=
name|getThisDirName
argument_list|()
operator|.
name|equals
argument_list|(
name|name
argument_list|)
condition|?
literal|"dir-wcprops"
else|:
literal|"wcprops/"
operator|+
name|name
operator|+
literal|".svn-work"
decl_stmt|;
name|File
name|dstFile
init|=
name|getAdminFile
argument_list|(
name|dstPath
argument_list|)
decl_stmt|;
if|if
condition|(
name|props
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|SVNFileUtil
operator|.
name|deleteFile
argument_list|(
name|dstFile
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|String
name|tmpPath
init|=
literal|"tmp/"
decl_stmt|;
name|tmpPath
operator|+=
name|getThisDirName
argument_list|()
operator|.
name|equals
argument_list|(
name|name
argument_list|)
condition|?
literal|"dir-wcprops"
else|:
literal|"wcprops/"
operator|+
name|name
operator|+
literal|".svn-work"
expr_stmt|;
name|File
name|tmpFile
init|=
name|getAdminFile
argument_list|(
name|tmpPath
argument_list|)
decl_stmt|;
name|SVNWCProperties
operator|.
name|setProperties
argument_list|(
name|props
operator|.
name|asMap
argument_list|()
argument_list|,
name|dstFile
argument_list|,
name|tmpFile
argument_list|,
name|SVNWCProperties
operator|.
name|SVN_HASH_TERMINATOR
argument_list|)
expr_stmt|;
block|}
name|props
operator|.
name|setModified
argument_list|(
literal|false
argument_list|)
expr_stmt|;
block|}
block|}
if|if
condition|(
name|close
condition|)
block|{
name|closeWCProperties
argument_list|()
expr_stmt|;
block|}
block|}
specifier|public
name|SVNVersionedProperties
name|getBaseProperties
parameter_list|(
name|String
name|name
parameter_list|)
throws|throws
name|SVNException
block|{
name|Map
name|basePropsCache
init|=
name|getBasePropertiesStorage
argument_list|(
literal|true
argument_list|)
decl_stmt|;
name|SVNVersionedProperties
name|props
init|=
operator|(
name|SVNVersionedProperties
operator|)
name|basePropsCache
operator|.
name|get
argument_list|(
name|name
argument_list|)
decl_stmt|;
if|if
condition|(
name|props
operator|!=
literal|null
condition|)
block|{
return|return
name|props
return|;
block|}
name|SVNProperties
name|baseProps
init|=
literal|null
decl_stmt|;
try|try
block|{
name|baseProps
operator|=
name|readBaseProperties
argument_list|(
name|name
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|SVNException
name|svne
parameter_list|)
block|{
name|SVNErrorMessage
name|err
init|=
name|svne
operator|.
name|getErrorMessage
argument_list|()
operator|.
name|wrap
argument_list|(
literal|"Failed to load properties from disk"
argument_list|)
decl_stmt|;
name|SVNErrorManager
operator|.
name|error
argument_list|(
name|err
argument_list|,
name|SVNLogType
operator|.
name|WC
argument_list|)
expr_stmt|;
block|}
name|props
operator|=
operator|new
name|SVNProperties13
argument_list|(
name|baseProps
argument_list|)
expr_stmt|;
name|basePropsCache
operator|.
name|put
argument_list|(
name|name
argument_list|,
name|props
argument_list|)
expr_stmt|;
return|return
name|props
return|;
block|}
specifier|public
name|SVNVersionedProperties
name|getRevertProperties
parameter_list|(
name|String
name|name
parameter_list|)
throws|throws
name|SVNException
block|{
name|Map
name|revertPropsCache
init|=
name|getRevertPropertiesStorage
argument_list|(
literal|true
argument_list|)
decl_stmt|;
name|SVNVersionedProperties
name|props
init|=
operator|(
name|SVNVersionedProperties
operator|)
name|revertPropsCache
operator|.
name|get
argument_list|(
name|name
argument_list|)
decl_stmt|;
if|if
condition|(
name|props
operator|!=
literal|null
condition|)
block|{
return|return
name|props
return|;
block|}
name|SVNProperties
name|revertProps
init|=
literal|null
decl_stmt|;
try|try
block|{
name|revertProps
operator|=
name|readRevertProperties
argument_list|(
name|name
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|SVNException
name|svne
parameter_list|)
block|{
name|SVNErrorMessage
name|err
init|=
name|svne
operator|.
name|getErrorMessage
argument_list|()
operator|.
name|wrap
argument_list|(
literal|"Failed to load properties from disk"
argument_list|)
decl_stmt|;
name|SVNErrorManager
operator|.
name|error
argument_list|(
name|err
argument_list|,
name|SVNLogType
operator|.
name|WC
argument_list|)
expr_stmt|;
block|}
name|props
operator|=
operator|new
name|SVNProperties13
argument_list|(
name|revertProps
argument_list|)
expr_stmt|;
name|revertPropsCache
operator|.
name|put
argument_list|(
name|name
argument_list|,
name|props
argument_list|)
expr_stmt|;
return|return
name|props
return|;
block|}
specifier|public
name|SVNVersionedProperties
name|getProperties
parameter_list|(
name|String
name|name
parameter_list|)
throws|throws
name|SVNException
block|{
name|Map
name|propsCache
init|=
name|getPropertiesStorage
argument_list|(
literal|true
argument_list|)
decl_stmt|;
name|SVNVersionedProperties
name|props
init|=
operator|(
name|SVNVersionedProperties
operator|)
name|propsCache
operator|.
name|get
argument_list|(
name|name
argument_list|)
decl_stmt|;
if|if
condition|(
name|props
operator|!=
literal|null
condition|)
block|{
return|return
name|props
return|;
block|}
name|SVNProperties
name|properties
init|=
literal|null
decl_stmt|;
try|try
block|{
name|properties
operator|=
name|readProperties
argument_list|(
name|name
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|SVNException
name|svne
parameter_list|)
block|{
name|SVNErrorMessage
name|err
init|=
name|svne
operator|.
name|getErrorMessage
argument_list|()
operator|.
name|wrap
argument_list|(
literal|"Failed to load properties from disk"
argument_list|)
decl_stmt|;
name|SVNErrorManager
operator|.
name|error
argument_list|(
name|err
argument_list|,
name|SVNLogType
operator|.
name|WC
argument_list|)
expr_stmt|;
block|}
name|props
operator|=
operator|new
name|SVNProperties13
argument_list|(
name|properties
argument_list|)
expr_stmt|;
name|propsCache
operator|.
name|put
argument_list|(
name|name
argument_list|,
name|props
argument_list|)
expr_stmt|;
return|return
name|props
return|;
block|}
specifier|public
name|SVNVersionedProperties
name|getWCProperties
parameter_list|(
name|String
name|name
parameter_list|)
throws|throws
name|SVNException
block|{
name|Map
name|wcPropsCache
init|=
name|getWCPropertiesStorage
argument_list|(
literal|true
argument_list|)
decl_stmt|;
name|SVNVersionedProperties
name|props
init|=
operator|(
name|SVNVersionedProperties
operator|)
name|wcPropsCache
operator|.
name|get
argument_list|(
name|name
argument_list|)
decl_stmt|;
if|if
condition|(
name|props
operator|!=
literal|null
condition|)
block|{
return|return
name|props
return|;
block|}
name|SVNProperties
name|properties
init|=
literal|null
decl_stmt|;
try|try
block|{
name|properties
operator|=
name|readWCProperties
argument_list|(
name|name
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|SVNException
name|svne
parameter_list|)
block|{
name|SVNErrorMessage
name|err
init|=
name|svne
operator|.
name|getErrorMessage
argument_list|()
operator|.
name|wrap
argument_list|(
literal|"Failed to load properties from disk"
argument_list|)
decl_stmt|;
name|SVNErrorManager
operator|.
name|error
argument_list|(
name|err
argument_list|,
name|SVNLogType
operator|.
name|WC
argument_list|)
expr_stmt|;
block|}
name|props
operator|=
operator|new
name|SVNProperties13
argument_list|(
name|properties
argument_list|)
expr_stmt|;
name|wcPropsCache
operator|.
name|put
argument_list|(
name|name
argument_list|,
name|props
argument_list|)
expr_stmt|;
return|return
name|props
return|;
block|}
specifier|private
name|SVNProperties
name|readProperties
parameter_list|(
name|String
name|name
parameter_list|)
throws|throws
name|SVNException
block|{
name|File
name|propertiesFile
init|=
name|getPropertiesFile
argument_list|(
name|name
argument_list|,
literal|false
argument_list|)
decl_stmt|;
name|SVNWCProperties
name|props
init|=
operator|new
name|SVNWCProperties
argument_list|(
name|propertiesFile
argument_list|,
literal|null
argument_list|)
decl_stmt|;
return|return
name|props
operator|.
name|asMap
argument_list|()
return|;
block|}
specifier|private
name|SVNProperties
name|readBaseProperties
parameter_list|(
name|String
name|name
parameter_list|)
throws|throws
name|SVNException
block|{
name|File
name|propertiesFile
init|=
name|getBasePropertiesFile
argument_list|(
name|name
argument_list|,
literal|false
argument_list|)
decl_stmt|;
name|SVNWCProperties
name|props
init|=
operator|new
name|SVNWCProperties
argument_list|(
name|propertiesFile
argument_list|,
literal|null
argument_list|)
decl_stmt|;
return|return
name|props
operator|.
name|asMap
argument_list|()
return|;
block|}
specifier|private
name|SVNProperties
name|readRevertProperties
parameter_list|(
name|String
name|name
parameter_list|)
throws|throws
name|SVNException
block|{
name|File
name|propertiesFile
init|=
name|getRevertPropertiesFile
argument_list|(
name|name
argument_list|,
literal|false
argument_list|)
decl_stmt|;
name|SVNWCProperties
name|props
init|=
operator|new
name|SVNWCProperties
argument_list|(
name|propertiesFile
argument_list|,
literal|null
argument_list|)
decl_stmt|;
return|return
name|props
operator|.
name|asMap
argument_list|()
return|;
block|}
specifier|private
name|SVNProperties
name|readWCProperties
parameter_list|(
name|String
name|name
parameter_list|)
throws|throws
name|SVNException
block|{
name|String
name|path
init|=
name|getThisDirName
argument_list|()
operator|.
name|equals
argument_list|(
name|name
argument_list|)
condition|?
literal|"dir-wcprops"
else|:
literal|"wcprops/"
operator|+
name|name
operator|+
literal|".svn-work"
decl_stmt|;
name|File
name|propertiesFile
init|=
name|getAdminFile
argument_list|(
name|path
argument_list|)
decl_stmt|;
name|SVNWCProperties
name|props
init|=
operator|new
name|SVNWCProperties
argument_list|(
name|propertiesFile
argument_list|,
name|getAdminDirectory
argument_list|()
operator|.
name|getName
argument_list|()
operator|+
literal|"/"
operator|+
name|path
argument_list|)
decl_stmt|;
return|return
name|props
operator|.
name|asMap
argument_list|()
return|;
block|}
specifier|public
name|void
name|saveEntries
parameter_list|(
name|boolean
name|close
parameter_list|)
throws|throws
name|SVNException
block|{
if|if
condition|(
name|myEntries
operator|!=
literal|null
condition|)
block|{
name|SVNEntry
name|rootEntry
init|=
operator|(
name|SVNEntry
operator|)
name|myEntries
operator|.
name|get
argument_list|(
name|getThisDirName
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|rootEntry
operator|==
literal|null
condition|)
block|{
name|SVNErrorMessage
name|err
init|=
name|SVNErrorMessage
operator|.
name|create
argument_list|(
name|SVNErrorCode
operator|.
name|ENTRY_NOT_FOUND
argument_list|,
literal|"No default entry in directory ''{0}''"
argument_list|,
name|getRoot
argument_list|()
argument_list|)
decl_stmt|;
name|SVNErrorManager
operator|.
name|error
argument_list|(
name|err
argument_list|,
name|SVNLogType
operator|.
name|WC
argument_list|)
expr_stmt|;
block|}
name|String
name|reposURL
init|=
name|rootEntry
operator|.
name|getRepositoryRoot
argument_list|()
decl_stmt|;
name|String
name|url
init|=
name|rootEntry
operator|.
name|getURL
argument_list|()
decl_stmt|;
if|if
condition|(
name|reposURL
operator|!=
literal|null
operator|&&
operator|!
name|SVNPathUtil
operator|.
name|isAncestor
argument_list|(
name|reposURL
argument_list|,
name|url
argument_list|)
condition|)
block|{
name|SVNErrorMessage
name|err
init|=
name|SVNErrorMessage
operator|.
name|create
argument_list|(
name|SVNErrorCode
operator|.
name|UNKNOWN
argument_list|,
literal|"Entry ''{0}'' has inconsistent repository root and url"
argument_list|,
name|getThisDirName
argument_list|()
argument_list|)
decl_stmt|;
name|SVNErrorManager
operator|.
name|error
argument_list|(
name|err
argument_list|,
name|SVNLogType
operator|.
name|WC
argument_list|)
expr_stmt|;
block|}
name|Resource
name|tmpFile
init|=
operator|new
name|Resource
argument_list|(
name|getAdminDirectory
argument_list|()
argument_list|,
literal|"tmp/entries"
argument_list|)
decl_stmt|;
name|Writer
name|os
init|=
literal|null
decl_stmt|;
try|try
block|{
comment|//                os = new OutputStreamWriter(SVNFileUtil.openFileForWriting(tmpFile), "UTF-8");
name|os
operator|=
name|SVNFileUtil
operator|.
name|openFileForWriting
argument_list|(
name|tmpFile
argument_list|)
expr_stmt|;
name|writeEntries
argument_list|(
name|os
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
name|SVNFileUtil
operator|.
name|closeFile
argument_list|(
name|os
argument_list|)
expr_stmt|;
name|SVNFileUtil
operator|.
name|deleteFile
argument_list|(
name|tmpFile
argument_list|)
expr_stmt|;
name|SVNErrorMessage
name|err
init|=
name|SVNErrorMessage
operator|.
name|create
argument_list|(
name|SVNErrorCode
operator|.
name|IO_ERROR
argument_list|,
literal|"Cannot write entries file ''{0}'': {1}"
argument_list|,
operator|new
name|Object
index|[]
block|{
name|myEntriesFile
block|,
name|e
operator|.
name|getLocalizedMessage
argument_list|()
block|}
argument_list|)
decl_stmt|;
name|SVNErrorManager
operator|.
name|error
argument_list|(
name|err
argument_list|,
name|e
argument_list|,
name|SVNLogType
operator|.
name|WC
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
name|SVNFileUtil
operator|.
name|closeFile
argument_list|(
name|os
argument_list|)
expr_stmt|;
block|}
name|SVNFileUtil
operator|.
name|rename
argument_list|(
name|tmpFile
argument_list|,
name|myEntriesFile
argument_list|)
expr_stmt|;
name|SVNFileUtil
operator|.
name|setReadonly
argument_list|(
name|myEntriesFile
argument_list|,
literal|true
argument_list|)
expr_stmt|;
if|if
condition|(
name|close
condition|)
block|{
name|myEntries
operator|=
literal|null
expr_stmt|;
block|}
block|}
block|}
specifier|public
name|void
name|saveVersionedProperties
parameter_list|(
name|SVNLog
name|log
parameter_list|,
name|boolean
name|close
parameter_list|)
throws|throws
name|SVNException
block|{
name|saveProperties
argument_list|(
name|log
argument_list|)
expr_stmt|;
name|saveBaseProperties
argument_list|(
name|log
argument_list|)
expr_stmt|;
if|if
condition|(
name|close
condition|)
block|{
name|myBaseProperties
operator|=
literal|null
expr_stmt|;
name|myProperties
operator|=
literal|null
expr_stmt|;
block|}
block|}
specifier|public
name|void
name|installProperties
parameter_list|(
name|String
name|name
parameter_list|,
name|SVNProperties
name|baseProps
parameter_list|,
name|SVNProperties
name|workingProps
parameter_list|,
name|SVNLog
name|log
parameter_list|,
name|boolean
name|writeBaseProps
parameter_list|,
name|boolean
name|close
parameter_list|)
throws|throws
name|SVNException
block|{
name|SVNProperties
name|command
init|=
operator|new
name|SVNProperties
argument_list|()
decl_stmt|;
name|SVNNodeKind
name|kind
init|=
name|name
operator|.
name|equals
argument_list|(
name|getThisDirName
argument_list|()
argument_list|)
condition|?
name|SVNNodeKind
operator|.
name|DIR
else|:
name|SVNNodeKind
operator|.
name|FILE
decl_stmt|;
name|String
name|dstPath
init|=
name|SVNAdminUtil
operator|.
name|getPropPath
argument_list|(
name|name
argument_list|,
name|kind
argument_list|,
literal|false
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|workingProps
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|String
name|tmpPath
init|=
name|SVNAdminUtil
operator|.
name|getPropPath
argument_list|(
name|name
argument_list|,
name|kind
argument_list|,
literal|true
argument_list|)
decl_stmt|;
name|File
name|tmpFile
init|=
name|getFile
argument_list|(
name|tmpPath
argument_list|)
decl_stmt|;
name|SVNWCProperties
name|tmpProps
init|=
operator|new
name|SVNWCProperties
argument_list|(
name|tmpFile
argument_list|,
name|tmpPath
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|workingProps
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|tmpProps
operator|.
name|setProperties
argument_list|(
name|workingProps
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|SVNFileUtil
operator|.
name|createEmptyFile
argument_list|(
name|tmpFile
argument_list|)
expr_stmt|;
block|}
name|command
operator|.
name|put
argument_list|(
name|SVNLog
operator|.
name|NAME_ATTR
argument_list|,
name|tmpPath
argument_list|)
expr_stmt|;
name|command
operator|.
name|put
argument_list|(
name|SVNLog
operator|.
name|DEST_ATTR
argument_list|,
name|dstPath
argument_list|)
expr_stmt|;
name|log
operator|.
name|addCommand
argument_list|(
name|SVNLog
operator|.
name|MOVE
argument_list|,
name|command
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|command
operator|.
name|clear
argument_list|()
expr_stmt|;
name|command
operator|.
name|put
argument_list|(
name|SVNLog
operator|.
name|NAME_ATTR
argument_list|,
name|dstPath
argument_list|)
expr_stmt|;
name|log
operator|.
name|addCommand
argument_list|(
name|SVNLog
operator|.
name|READONLY
argument_list|,
name|command
argument_list|,
literal|false
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|command
operator|.
name|put
argument_list|(
name|SVNLog
operator|.
name|NAME_ATTR
argument_list|,
name|dstPath
argument_list|)
expr_stmt|;
name|log
operator|.
name|addCommand
argument_list|(
name|SVNLog
operator|.
name|DELETE
argument_list|,
name|command
argument_list|,
literal|false
argument_list|)
expr_stmt|;
block|}
name|command
operator|.
name|clear
argument_list|()
expr_stmt|;
if|if
condition|(
name|writeBaseProps
condition|)
block|{
name|String
name|basePath
init|=
name|SVNAdminUtil
operator|.
name|getPropBasePath
argument_list|(
name|name
argument_list|,
name|kind
argument_list|,
literal|false
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|baseProps
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|String
name|tmpPath
init|=
name|SVNAdminUtil
operator|.
name|getPropBasePath
argument_list|(
name|name
argument_list|,
name|kind
argument_list|,
literal|true
argument_list|)
decl_stmt|;
name|File
name|tmpFile
init|=
name|getFile
argument_list|(
name|tmpPath
argument_list|)
decl_stmt|;
name|SVNWCProperties
name|tmpProps
init|=
operator|new
name|SVNWCProperties
argument_list|(
name|tmpFile
argument_list|,
name|tmpPath
argument_list|)
decl_stmt|;
name|tmpProps
operator|.
name|setProperties
argument_list|(
name|baseProps
argument_list|)
expr_stmt|;
name|command
operator|.
name|put
argument_list|(
name|SVNLog
operator|.
name|NAME_ATTR
argument_list|,
name|tmpPath
argument_list|)
expr_stmt|;
name|command
operator|.
name|put
argument_list|(
name|SVNLog
operator|.
name|DEST_ATTR
argument_list|,
name|basePath
argument_list|)
expr_stmt|;
name|log
operator|.
name|addCommand
argument_list|(
name|SVNLog
operator|.
name|MOVE
argument_list|,
name|command
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|command
operator|.
name|clear
argument_list|()
expr_stmt|;
name|command
operator|.
name|put
argument_list|(
name|SVNLog
operator|.
name|NAME_ATTR
argument_list|,
name|basePath
argument_list|)
expr_stmt|;
name|log
operator|.
name|addCommand
argument_list|(
name|SVNLog
operator|.
name|READONLY
argument_list|,
name|command
argument_list|,
literal|false
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|command
operator|.
name|put
argument_list|(
name|SVNLog
operator|.
name|NAME_ATTR
argument_list|,
name|basePath
argument_list|)
expr_stmt|;
name|log
operator|.
name|addCommand
argument_list|(
name|SVNLog
operator|.
name|DELETE
argument_list|,
name|command
argument_list|,
literal|false
argument_list|)
expr_stmt|;
block|}
block|}
if|if
condition|(
name|close
condition|)
block|{
name|myBaseProperties
operator|=
literal|null
expr_stmt|;
name|myProperties
operator|=
literal|null
expr_stmt|;
block|}
block|}
specifier|protected
name|Map
name|fetchEntries
parameter_list|()
throws|throws
name|SVNException
block|{
if|if
condition|(
operator|!
name|myEntriesFile
operator|.
name|exists
argument_list|()
condition|)
block|{
return|return
literal|null
return|;
block|}
name|Map
name|entries
init|=
operator|new
name|SVNHashMap
argument_list|()
decl_stmt|;
name|BufferedReader
name|reader
init|=
literal|null
decl_stmt|;
try|try
block|{
name|reader
operator|=
operator|new
name|BufferedReader
argument_list|(
operator|new
name|InputStreamReader
argument_list|(
name|SVNFileUtil
operator|.
name|openFileForReading
argument_list|(
name|myEntriesFile
argument_list|,
name|SVNLogType
operator|.
name|WC
argument_list|)
argument_list|,
literal|"UTF-8"
argument_list|)
argument_list|)
expr_stmt|;
name|String
name|line
decl_stmt|;
name|Map
name|entry
init|=
literal|null
decl_stmt|;
while|while
condition|(
operator|(
name|line
operator|=
name|reader
operator|.
name|readLine
argument_list|()
operator|)
operator|!=
literal|null
condition|)
block|{
name|line
operator|=
name|line
operator|.
name|trim
argument_list|()
expr_stmt|;
if|if
condition|(
name|line
operator|.
name|equals
argument_list|(
literal|"<entry"
argument_list|)
condition|)
block|{
name|entry
operator|=
operator|new
name|SVNHashMap
argument_list|()
expr_stmt|;
continue|continue;
block|}
if|if
condition|(
name|entry
operator|!=
literal|null
condition|)
block|{
if|if
condition|(
name|line
operator|.
name|indexOf
argument_list|(
literal|'='
argument_list|)
operator|<=
literal|0
operator|||
name|line
operator|.
name|indexOf
argument_list|(
literal|'\"'
argument_list|)
operator|<=
literal|0
operator|||
name|line
operator|.
name|indexOf
argument_list|(
literal|'\"'
argument_list|)
operator|==
name|line
operator|.
name|lastIndexOf
argument_list|(
literal|'\"'
argument_list|)
condition|)
block|{
continue|continue;
block|}
name|String
name|name
init|=
name|line
operator|.
name|substring
argument_list|(
literal|0
argument_list|,
name|line
operator|.
name|indexOf
argument_list|(
literal|'='
argument_list|)
argument_list|)
decl_stmt|;
name|String
name|value
init|=
name|line
operator|.
name|substring
argument_list|(
name|line
operator|.
name|indexOf
argument_list|(
literal|'\"'
argument_list|)
operator|+
literal|1
argument_list|,
name|line
operator|.
name|lastIndexOf
argument_list|(
literal|'\"'
argument_list|)
argument_list|)
decl_stmt|;
name|value
operator|=
name|SVNEncodingUtil
operator|.
name|xmlDecode
argument_list|(
name|value
argument_list|)
expr_stmt|;
name|entry
operator|.
name|put
argument_list|(
name|SVNProperty
operator|.
name|SVN_ENTRY_PREFIX
operator|+
name|name
argument_list|,
name|value
argument_list|)
expr_stmt|;
if|if
condition|(
name|line
operator|.
name|charAt
argument_list|(
name|line
operator|.
name|length
argument_list|()
operator|-
literal|1
argument_list|)
operator|==
literal|'>'
condition|)
block|{
name|String
name|entryName
init|=
operator|(
name|String
operator|)
name|entry
operator|.
name|get
argument_list|(
name|SVNProperty
operator|.
name|NAME
argument_list|)
decl_stmt|;
if|if
condition|(
name|entryName
operator|==
literal|null
condition|)
block|{
return|return
name|entries
return|;
block|}
name|entry
operator|.
name|put
argument_list|(
name|SVNProperty
operator|.
name|DEPTH
argument_list|,
name|SVNDepth
operator|.
name|INFINITY
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
name|entries
operator|.
name|put
argument_list|(
name|entryName
argument_list|,
operator|new
name|SVNEntry
argument_list|(
name|entry
argument_list|,
name|this
argument_list|,
name|entryName
argument_list|)
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|getThisDirName
argument_list|()
operator|.
name|equals
argument_list|(
name|entryName
argument_list|)
condition|)
block|{
name|SVNEntry
name|rootEntry
init|=
operator|(
name|SVNEntry
operator|)
name|entries
operator|.
name|get
argument_list|(
name|getThisDirName
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|rootEntry
operator|!=
literal|null
condition|)
block|{
name|Map
name|rootEntryAttrs
init|=
name|rootEntry
operator|.
name|asMap
argument_list|()
decl_stmt|;
if|if
condition|(
name|entry
operator|.
name|get
argument_list|(
name|SVNProperty
operator|.
name|REVISION
argument_list|)
operator|==
literal|null
condition|)
block|{
name|entry
operator|.
name|put
argument_list|(
name|SVNProperty
operator|.
name|REVISION
argument_list|,
name|rootEntryAttrs
operator|.
name|get
argument_list|(
name|SVNProperty
operator|.
name|REVISION
argument_list|)
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|entry
operator|.
name|get
argument_list|(
name|SVNProperty
operator|.
name|URL
argument_list|)
operator|==
literal|null
condition|)
block|{
name|String
name|url
init|=
operator|(
name|String
operator|)
name|rootEntryAttrs
operator|.
name|get
argument_list|(
name|SVNProperty
operator|.
name|URL
argument_list|)
decl_stmt|;
if|if
condition|(
name|url
operator|!=
literal|null
condition|)
block|{
name|url
operator|=
name|SVNPathUtil
operator|.
name|append
argument_list|(
name|url
argument_list|,
name|SVNEncodingUtil
operator|.
name|uriEncode
argument_list|(
name|entryName
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|entry
operator|.
name|put
argument_list|(
name|SVNProperty
operator|.
name|URL
argument_list|,
name|url
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|entry
operator|.
name|get
argument_list|(
name|SVNProperty
operator|.
name|UUID
argument_list|)
operator|==
literal|null
condition|)
block|{
name|entry
operator|.
name|put
argument_list|(
name|SVNProperty
operator|.
name|UUID
argument_list|,
name|rootEntryAttrs
operator|.
name|get
argument_list|(
name|SVNProperty
operator|.
name|UUID
argument_list|)
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|entry
operator|.
name|get
argument_list|(
name|SVNProperty
operator|.
name|REPOS
argument_list|)
operator|==
literal|null
operator|&&
name|rootEntryAttrs
operator|.
name|get
argument_list|(
name|SVNProperty
operator|.
name|REPOS
argument_list|)
operator|!=
literal|null
condition|)
block|{
name|entry
operator|.
name|put
argument_list|(
name|SVNProperty
operator|.
name|REPOS
argument_list|,
name|rootEntryAttrs
operator|.
name|get
argument_list|(
name|SVNProperty
operator|.
name|REPOS
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
block|}
name|entry
operator|=
literal|null
expr_stmt|;
block|}
block|}
block|}
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
name|SVNErrorMessage
name|err
init|=
name|SVNErrorMessage
operator|.
name|create
argument_list|(
name|SVNErrorCode
operator|.
name|IO_ERROR
argument_list|,
literal|"Cannot read entries file ''{0}'': {1}"
argument_list|,
operator|new
name|Object
index|[]
block|{
name|myEntriesFile
block|,
name|e
operator|.
name|getLocalizedMessage
argument_list|()
block|}
argument_list|)
decl_stmt|;
name|SVNErrorManager
operator|.
name|error
argument_list|(
name|err
argument_list|,
name|e
argument_list|,
name|SVNLogType
operator|.
name|WC
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
name|SVNFileUtil
operator|.
name|closeFile
argument_list|(
name|reader
argument_list|)
expr_stmt|;
block|}
return|return
name|entries
return|;
block|}
specifier|public
name|String
name|getThisDirName
parameter_list|()
block|{
return|return
name|THIS_DIR
return|;
block|}
specifier|protected
name|void
name|writeEntries
parameter_list|(
name|Writer
name|writer
parameter_list|)
throws|throws
name|IOException
throws|,
name|SVNException
block|{
name|SVNEntry
name|rootEntry
init|=
operator|(
name|SVNEntry
operator|)
name|myEntries
operator|.
name|get
argument_list|(
name|getThisDirName
argument_list|()
argument_list|)
decl_stmt|;
name|Map
name|rootEntryAttrs
init|=
name|rootEntry
operator|.
name|asMap
argument_list|()
decl_stmt|;
name|writer
operator|.
name|write
argument_list|(
literal|"<?xml version=\"1.0\" encoding=\"utf-8\"?>\n"
argument_list|)
expr_stmt|;
name|writer
operator|.
name|write
argument_list|(
literal|"<wc-entries\n"
argument_list|)
expr_stmt|;
name|writer
operator|.
name|write
argument_list|(
literal|"   xmlns=\"svn:\">\n"
argument_list|)
expr_stmt|;
name|List
name|entryNames
init|=
operator|new
name|ArrayList
argument_list|(
name|myEntries
operator|.
name|keySet
argument_list|()
argument_list|)
decl_stmt|;
name|Collections
operator|.
name|sort
argument_list|(
name|entryNames
argument_list|)
expr_stmt|;
for|for
control|(
name|Iterator
name|entriesIter
init|=
name|entryNames
operator|.
name|iterator
argument_list|()
init|;
name|entriesIter
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|String
name|name
init|=
operator|(
name|String
operator|)
name|entriesIter
operator|.
name|next
argument_list|()
decl_stmt|;
name|SVNEntry
name|entry
init|=
operator|(
name|SVNEntry
operator|)
name|myEntries
operator|.
name|get
argument_list|(
name|name
argument_list|)
decl_stmt|;
name|Map
name|entryAttrs
init|=
name|entry
operator|.
name|asMap
argument_list|()
decl_stmt|;
name|writer
operator|.
name|write
argument_list|(
literal|"<entry"
argument_list|)
expr_stmt|;
for|for
control|(
name|Iterator
name|names
init|=
name|entryAttrs
operator|.
name|keySet
argument_list|()
operator|.
name|iterator
argument_list|()
init|;
name|names
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|String
name|propName
init|=
operator|(
name|String
operator|)
name|names
operator|.
name|next
argument_list|()
decl_stmt|;
if|if
condition|(
operator|!
name|isEntryPropertyApplicable
argument_list|(
name|propName
argument_list|)
condition|)
block|{
continue|continue;
block|}
name|Object
name|value
init|=
name|entryAttrs
operator|.
name|get
argument_list|(
name|propName
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
operator|(
name|value
operator|instanceof
name|String
operator|)
condition|)
block|{
continue|continue;
block|}
name|String
name|propValue
init|=
operator|(
name|String
operator|)
name|value
decl_stmt|;
if|if
condition|(
name|BOOLEAN_PROPERTIES
operator|.
name|contains
argument_list|(
name|propName
argument_list|)
operator|&&
operator|!
name|Boolean
operator|.
name|TRUE
operator|.
name|toString
argument_list|()
operator|.
name|equals
argument_list|(
name|propValue
argument_list|)
condition|)
block|{
continue|continue;
block|}
if|if
condition|(
operator|!
name|getThisDirName
argument_list|()
operator|.
name|equals
argument_list|(
name|name
argument_list|)
condition|)
block|{
name|Object
name|expectedValue
decl_stmt|;
if|if
condition|(
name|SVNProperty
operator|.
name|KIND_DIR
operator|.
name|equals
argument_list|(
name|entryAttrs
operator|.
name|get
argument_list|(
name|SVNProperty
operator|.
name|KIND
argument_list|)
argument_list|)
condition|)
block|{
if|if
condition|(
name|SVNProperty
operator|.
name|UUID
operator|.
name|equals
argument_list|(
name|propName
argument_list|)
operator|||
name|SVNProperty
operator|.
name|REVISION
operator|.
name|equals
argument_list|(
name|propName
argument_list|)
operator|||
name|SVNProperty
operator|.
name|URL
operator|.
name|equals
argument_list|(
name|propName
argument_list|)
operator|||
name|SVNProperty
operator|.
name|REPOS
operator|.
name|equals
argument_list|(
name|propName
argument_list|)
condition|)
block|{
continue|continue;
block|}
block|}
else|else
block|{
if|if
condition|(
name|SVNProperty
operator|.
name|URL
operator|.
name|equals
argument_list|(
name|propName
argument_list|)
condition|)
block|{
name|expectedValue
operator|=
name|SVNPathUtil
operator|.
name|append
argument_list|(
operator|(
name|String
operator|)
name|rootEntryAttrs
operator|.
name|get
argument_list|(
name|propName
argument_list|)
argument_list|,
name|SVNEncodingUtil
operator|.
name|uriEncode
argument_list|(
name|name
argument_list|)
argument_list|)
expr_stmt|;
block|}
if|else if
condition|(
name|SVNProperty
operator|.
name|UUID
operator|.
name|equals
argument_list|(
name|propName
argument_list|)
operator|||
name|SVNProperty
operator|.
name|REVISION
operator|.
name|equals
argument_list|(
name|propName
argument_list|)
condition|)
block|{
name|expectedValue
operator|=
name|rootEntryAttrs
operator|.
name|get
argument_list|(
name|propName
argument_list|)
expr_stmt|;
block|}
if|else if
condition|(
name|SVNProperty
operator|.
name|REPOS
operator|.
name|equals
argument_list|(
name|propName
argument_list|)
condition|)
block|{
name|expectedValue
operator|=
name|rootEntryAttrs
operator|.
name|get
argument_list|(
name|propName
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|expectedValue
operator|=
literal|null
expr_stmt|;
block|}
if|if
condition|(
name|propValue
operator|.
name|equals
argument_list|(
name|expectedValue
argument_list|)
condition|)
block|{
continue|continue;
block|}
block|}
block|}
if|if
condition|(
name|propName
operator|==
literal|null
operator|||
operator|!
name|propName
operator|.
name|startsWith
argument_list|(
name|SVNProperty
operator|.
name|SVN_ENTRY_PREFIX
argument_list|)
condition|)
block|{
name|SVNDebugLog
operator|.
name|getDefaultLog
argument_list|()
operator|.
name|logFine
argument_list|(
name|SVNLogType
operator|.
name|WC
argument_list|,
literal|"attempt to write invalid entry property: "
operator|+
name|propName
operator|+
literal|"="
operator|+
name|propValue
argument_list|)
expr_stmt|;
name|SVNDebugLog
operator|.
name|getDefaultLog
argument_list|()
operator|.
name|logFine
argument_list|(
name|SVNLogType
operator|.
name|WC
argument_list|,
operator|new
name|Exception
argument_list|()
argument_list|)
expr_stmt|;
continue|continue;
block|}
name|propName
operator|=
name|propName
operator|.
name|substring
argument_list|(
name|SVNProperty
operator|.
name|SVN_ENTRY_PREFIX
operator|.
name|length
argument_list|()
argument_list|)
expr_stmt|;
name|propValue
operator|=
name|SVNEncodingUtil
operator|.
name|xmlEncodeAttr
argument_list|(
name|propValue
argument_list|)
expr_stmt|;
name|writer
operator|.
name|write
argument_list|(
literal|"\n   "
argument_list|)
expr_stmt|;
name|writer
operator|.
name|write
argument_list|(
name|propName
argument_list|)
expr_stmt|;
name|writer
operator|.
name|write
argument_list|(
literal|"=\""
argument_list|)
expr_stmt|;
name|writer
operator|.
name|write
argument_list|(
name|propValue
argument_list|)
expr_stmt|;
name|writer
operator|.
name|write
argument_list|(
literal|"\""
argument_list|)
expr_stmt|;
block|}
name|writer
operator|.
name|write
argument_list|(
literal|"/>\n"
argument_list|)
expr_stmt|;
name|writer
operator|.
name|flush
argument_list|()
expr_stmt|;
block|}
name|writer
operator|.
name|write
argument_list|(
literal|"</wc-entries>\n"
argument_list|)
expr_stmt|;
name|writer
operator|.
name|flush
argument_list|()
expr_stmt|;
block|}
specifier|public
name|boolean
name|hasPropModifications
parameter_list|(
name|String
name|name
parameter_list|)
throws|throws
name|SVNException
block|{
name|File
name|propFile
decl_stmt|;
name|File
name|baseFile
decl_stmt|;
if|if
condition|(
name|getThisDirName
argument_list|()
operator|.
name|equals
argument_list|(
name|name
argument_list|)
condition|)
block|{
name|propFile
operator|=
name|getAdminFile
argument_list|(
literal|"dir-props"
argument_list|)
expr_stmt|;
name|baseFile
operator|=
name|getAdminFile
argument_list|(
literal|"dir-prop-base"
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|propFile
operator|=
name|getAdminFile
argument_list|(
literal|"props/"
operator|+
name|name
operator|+
literal|".svn-work"
argument_list|)
expr_stmt|;
name|baseFile
operator|=
name|getAdminFile
argument_list|(
literal|"prop-base/"
operator|+
name|name
operator|+
literal|".svn-base"
argument_list|)
expr_stmt|;
block|}
name|SVNEntry
name|entry
init|=
name|getEntry
argument_list|(
name|name
argument_list|,
literal|true
argument_list|)
decl_stmt|;
name|long
name|propLength
init|=
name|propFile
operator|.
name|length
argument_list|()
decl_stmt|;
name|boolean
name|propEmtpy
init|=
name|propLength
operator|<=
literal|4
decl_stmt|;
if|if
condition|(
name|entry
operator|.
name|isScheduledForReplacement
argument_list|()
condition|)
block|{
return|return
operator|!
name|propEmtpy
return|;
block|}
if|if
condition|(
name|propEmtpy
condition|)
block|{
name|boolean
name|baseEmtpy
init|=
name|baseFile
operator|.
name|length
argument_list|()
operator|<=
literal|4
decl_stmt|;
if|if
condition|(
name|baseEmtpy
condition|)
block|{
return|return
operator|!
name|propEmtpy
return|;
block|}
return|return
literal|true
return|;
block|}
if|if
condition|(
name|propLength
operator|!=
name|baseFile
operator|.
name|length
argument_list|()
condition|)
block|{
return|return
literal|true
return|;
block|}
name|String
name|realTimestamp
init|=
name|SVNDate
operator|.
name|formatDate
argument_list|(
operator|new
name|Date
argument_list|(
name|propFile
operator|.
name|lastModified
argument_list|()
argument_list|)
argument_list|)
decl_stmt|;
name|String
name|fullRealTimestamp
init|=
name|realTimestamp
decl_stmt|;
name|realTimestamp
operator|=
name|realTimestamp
operator|.
name|substring
argument_list|(
literal|0
argument_list|,
literal|23
argument_list|)
expr_stmt|;
name|String
name|timeStamp
init|=
name|entry
operator|.
name|getPropTime
argument_list|()
decl_stmt|;
if|if
condition|(
name|timeStamp
operator|!=
literal|null
condition|)
block|{
name|timeStamp
operator|=
name|timeStamp
operator|.
name|substring
argument_list|(
literal|0
argument_list|,
literal|23
argument_list|)
expr_stmt|;
if|if
condition|(
name|realTimestamp
operator|.
name|equals
argument_list|(
name|timeStamp
argument_list|)
condition|)
block|{
return|return
literal|false
return|;
block|}
block|}
name|SVNVersionedProperties
name|m1
init|=
name|getProperties
argument_list|(
name|name
argument_list|)
decl_stmt|;
name|SVNVersionedProperties
name|m2
init|=
name|getBaseProperties
argument_list|(
name|name
argument_list|)
decl_stmt|;
if|if
condition|(
name|m1
operator|.
name|equals
argument_list|(
name|m2
argument_list|)
condition|)
block|{
if|if
condition|(
name|isLocked
argument_list|()
condition|)
block|{
name|entry
operator|.
name|setPropTime
argument_list|(
name|fullRealTimestamp
argument_list|)
expr_stmt|;
name|saveEntries
argument_list|(
literal|false
argument_list|)
expr_stmt|;
block|}
return|return
literal|false
return|;
block|}
return|return
literal|true
return|;
block|}
specifier|public
name|boolean
name|hasTextModifications
parameter_list|(
name|String
name|name
parameter_list|,
name|boolean
name|forceComparison
parameter_list|)
throws|throws
name|SVNException
block|{
name|SVNFileType
name|fType
init|=
name|SVNFileType
operator|.
name|getType
argument_list|(
name|getFile
argument_list|(
name|name
argument_list|)
argument_list|)
decl_stmt|;
if|if
condition|(
name|fType
operator|==
name|SVNFileType
operator|.
name|DIRECTORY
operator|||
name|fType
operator|==
name|SVNFileType
operator|.
name|NONE
condition|)
block|{
return|return
literal|false
return|;
block|}
name|SVNEntry
name|entry
init|=
name|getEntry
argument_list|(
name|name
argument_list|,
literal|true
argument_list|)
decl_stmt|;
if|if
condition|(
name|entry
operator|.
name|isDirectory
argument_list|()
condition|)
block|{
return|return
literal|false
return|;
block|}
if|if
condition|(
operator|!
name|forceComparison
condition|)
block|{
name|String
name|textTime
init|=
name|entry
operator|.
name|getTextTime
argument_list|()
decl_stmt|;
name|long
name|textTimeAsLong
init|=
name|SVNFileUtil
operator|.
name|roundTimeStamp
argument_list|(
name|SVNDate
operator|.
name|parseDateAsMilliseconds
argument_list|(
name|textTime
argument_list|)
argument_list|)
decl_stmt|;
name|long
name|tstamp
init|=
name|SVNFileUtil
operator|.
name|roundTimeStamp
argument_list|(
name|getFile
argument_list|(
name|name
argument_list|)
operator|.
name|lastModified
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|textTimeAsLong
operator|==
name|tstamp
condition|)
block|{
return|return
literal|false
return|;
block|}
block|}
name|File
name|baseFile
init|=
name|getBaseFile
argument_list|(
name|name
argument_list|,
literal|false
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|baseFile
operator|.
name|isFile
argument_list|()
condition|)
block|{
return|return
literal|true
return|;
block|}
comment|// translate versioned file.
name|File
name|baseTmpFile
init|=
name|SVNFileUtil
operator|.
name|createUniqueFile
argument_list|(
name|getRoot
argument_list|()
argument_list|,
name|SVNFileUtil
operator|.
name|getBasePath
argument_list|(
name|getBaseFile
argument_list|(
name|name
argument_list|,
literal|true
argument_list|)
argument_list|)
argument_list|,
literal|".tmp"
argument_list|,
literal|true
argument_list|)
decl_stmt|;
name|File
name|versionedFile
init|=
name|getFile
argument_list|(
name|name
argument_list|)
decl_stmt|;
name|SVNTranslator
operator|.
name|translate
argument_list|(
name|this
argument_list|,
name|name
argument_list|,
name|name
argument_list|,
name|SVNFileUtil
operator|.
name|getBasePath
argument_list|(
name|baseTmpFile
argument_list|)
argument_list|,
literal|false
argument_list|)
expr_stmt|;
comment|// now compare file and get base file checksum (when forced)
name|MessageDigest
name|digest
decl_stmt|;
name|boolean
name|equals
init|=
literal|true
decl_stmt|;
try|try
block|{
name|digest
operator|=
name|forceComparison
condition|?
name|MessageDigest
operator|.
name|getInstance
argument_list|(
literal|"MD5"
argument_list|)
else|:
literal|null
expr_stmt|;
name|equals
operator|=
name|SVNFileUtil
operator|.
name|compareFiles
argument_list|(
name|baseFile
argument_list|,
name|baseTmpFile
argument_list|,
name|digest
argument_list|)
expr_stmt|;
if|if
condition|(
name|forceComparison
condition|)
block|{
comment|// if checksum differs from expected - throw exception
name|String
name|checksum
init|=
name|SVNFileUtil
operator|.
name|toHexDigest
argument_list|(
name|digest
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|checksum
operator|.
name|equals
argument_list|(
name|entry
operator|.
name|getChecksum
argument_list|()
argument_list|)
condition|)
block|{
name|SVNErrorMessage
name|err
init|=
name|SVNErrorMessage
operator|.
name|create
argument_list|(
name|SVNErrorCode
operator|.
name|WC_CORRUPT_TEXT_BASE
argument_list|,
literal|"Checksum mismatch indicates corrupt text base: ''{0}''\n"
operator|+
literal|"   expected: {1}\n"
operator|+
literal|"     actual: {2}\n"
argument_list|,
operator|new
name|Object
index|[]
block|{
name|baseFile
block|,
name|entry
operator|.
name|getChecksum
argument_list|()
block|,
name|checksum
block|}
argument_list|)
decl_stmt|;
name|SVNErrorManager
operator|.
name|error
argument_list|(
name|err
argument_list|,
name|SVNLogType
operator|.
name|WC
argument_list|)
expr_stmt|;
block|}
block|}
block|}
catch|catch
parameter_list|(
name|NoSuchAlgorithmException
name|e
parameter_list|)
block|{
name|SVNErrorMessage
name|err
init|=
name|SVNErrorMessage
operator|.
name|create
argument_list|(
name|SVNErrorCode
operator|.
name|IO_ERROR
argument_list|,
literal|"MD5 implementation not found: {1}"
argument_list|,
name|e
operator|.
name|getLocalizedMessage
argument_list|()
argument_list|)
decl_stmt|;
name|SVNErrorManager
operator|.
name|error
argument_list|(
name|err
argument_list|,
name|e
argument_list|,
name|SVNLogType
operator|.
name|WC
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
name|baseTmpFile
operator|.
name|delete
argument_list|()
expr_stmt|;
block|}
if|if
condition|(
name|equals
operator|&&
name|isLocked
argument_list|()
condition|)
block|{
name|entry
operator|.
name|setTextTime
argument_list|(
name|SVNDate
operator|.
name|formatDate
argument_list|(
operator|new
name|Date
argument_list|(
name|versionedFile
operator|.
name|lastModified
argument_list|()
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|saveEntries
argument_list|(
literal|false
argument_list|)
expr_stmt|;
block|}
return|return
operator|!
name|equals
return|;
block|}
specifier|public
name|boolean
name|hasProperties
parameter_list|(
name|String
name|entryName
parameter_list|)
throws|throws
name|SVNException
block|{
name|File
name|propFile
decl_stmt|;
name|File
name|baseFile
decl_stmt|;
if|if
condition|(
name|getThisDirName
argument_list|()
operator|.
name|equals
argument_list|(
name|entryName
argument_list|)
condition|)
block|{
name|propFile
operator|=
name|getAdminFile
argument_list|(
literal|"dir-props"
argument_list|)
expr_stmt|;
name|baseFile
operator|=
name|getAdminFile
argument_list|(
literal|"dir-prop-base"
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|propFile
operator|=
name|getAdminFile
argument_list|(
literal|"props/"
operator|+
name|entryName
operator|+
literal|".svn-work"
argument_list|)
expr_stmt|;
name|baseFile
operator|=
name|getAdminFile
argument_list|(
literal|"prop-base/"
operator|+
name|entryName
operator|+
literal|".svn-base"
argument_list|)
expr_stmt|;
block|}
name|SVNWCProperties
name|baseProps
init|=
operator|new
name|SVNWCProperties
argument_list|(
name|baseFile
argument_list|,
literal|null
argument_list|)
decl_stmt|;
if|if
condition|(
name|baseProps
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|SVNWCProperties
name|props
init|=
operator|new
name|SVNWCProperties
argument_list|(
name|propFile
argument_list|,
literal|null
argument_list|)
decl_stmt|;
return|return
operator|!
name|props
operator|.
name|isEmpty
argument_list|()
return|;
block|}
return|return
literal|true
return|;
block|}
specifier|public
name|boolean
name|lock
parameter_list|(
name|boolean
name|stealLock
parameter_list|)
throws|throws
name|SVNException
block|{
if|if
condition|(
operator|!
name|isVersioned
argument_list|()
condition|)
block|{
return|return
literal|false
return|;
block|}
if|if
condition|(
name|myLockFile
operator|.
name|isFile
argument_list|()
condition|)
block|{
if|if
condition|(
name|stealLock
condition|)
block|{
name|setLocked
argument_list|(
literal|true
argument_list|)
expr_stmt|;
return|return
literal|true
return|;
block|}
name|SVNErrorMessage
name|err
init|=
name|SVNErrorMessage
operator|.
name|create
argument_list|(
name|SVNErrorCode
operator|.
name|WC_LOCKED
argument_list|,
literal|"Working copy ''{0}'' locked; try performing ''cleanup''"
argument_list|,
name|getRoot
argument_list|()
argument_list|)
decl_stmt|;
name|SVNErrorManager
operator|.
name|error
argument_list|(
name|err
argument_list|,
name|SVNLogType
operator|.
name|WC
argument_list|)
expr_stmt|;
block|}
name|boolean
name|created
init|=
literal|false
decl_stmt|;
try|try
block|{
name|created
operator|=
name|myLockFile
operator|.
name|createNewFile
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
name|SVNErrorMessage
name|err
init|=
name|SVNErrorMessage
operator|.
name|create
argument_list|(
name|SVNErrorCode
operator|.
name|WC_NOT_LOCKED
argument_list|,
literal|"Cannot lock working copy ''{0}'': {1}"
argument_list|,
operator|new
name|Object
index|[]
block|{
name|getRoot
argument_list|()
block|,
name|e
operator|.
name|getLocalizedMessage
argument_list|()
block|}
argument_list|)
decl_stmt|;
name|SVNErrorManager
operator|.
name|error
argument_list|(
name|err
argument_list|,
name|e
argument_list|,
name|SVNLogType
operator|.
name|WC
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
operator|!
name|created
condition|)
block|{
if|if
condition|(
name|myLockFile
operator|.
name|isFile
argument_list|()
condition|)
block|{
name|SVNErrorMessage
name|err
init|=
name|SVNErrorMessage
operator|.
name|create
argument_list|(
name|SVNErrorCode
operator|.
name|WC_LOCKED
argument_list|,
literal|"Working copy ''{0}'' is locked; try performing 'cleanup'"
argument_list|,
name|getRoot
argument_list|()
argument_list|)
decl_stmt|;
name|SVNErrorManager
operator|.
name|error
argument_list|(
name|err
argument_list|,
name|SVNLogType
operator|.
name|WC
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|SVNErrorMessage
name|err
init|=
name|SVNErrorMessage
operator|.
name|create
argument_list|(
name|SVNErrorCode
operator|.
name|WC_NOT_LOCKED
argument_list|,
literal|"Cannot lock working copy ''{0}''"
argument_list|,
name|getRoot
argument_list|()
argument_list|)
decl_stmt|;
name|SVNErrorManager
operator|.
name|error
argument_list|(
name|err
argument_list|,
name|SVNLogType
operator|.
name|WC
argument_list|)
expr_stmt|;
block|}
block|}
name|setLocked
argument_list|(
literal|true
argument_list|)
expr_stmt|;
return|return
name|created
return|;
block|}
name|boolean
name|innerLock
parameter_list|()
throws|throws
name|SVNException
block|{
if|if
condition|(
name|myLockFile
operator|.
name|isFile
argument_list|()
condition|)
block|{
name|SVNErrorMessage
name|err
init|=
name|SVNErrorMessage
operator|.
name|create
argument_list|(
name|SVNErrorCode
operator|.
name|WC_LOCKED
argument_list|,
literal|"Working copy ''{0}'' locked; try performing ''cleanup''"
argument_list|,
name|getRoot
argument_list|()
argument_list|)
decl_stmt|;
name|SVNErrorManager
operator|.
name|error
argument_list|(
name|err
argument_list|,
name|SVNLogType
operator|.
name|WC
argument_list|)
expr_stmt|;
block|}
name|boolean
name|created
init|=
literal|false
decl_stmt|;
try|try
block|{
name|created
operator|=
name|myLockFile
operator|.
name|createNewFile
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
name|SVNErrorMessage
name|err
init|=
name|SVNErrorMessage
operator|.
name|create
argument_list|(
name|SVNErrorCode
operator|.
name|WC_NOT_LOCKED
argument_list|,
literal|"Cannot lock working copy ''{0}'': {1}"
argument_list|,
operator|new
name|Object
index|[]
block|{
name|getRoot
argument_list|()
block|,
name|e
operator|.
name|getLocalizedMessage
argument_list|()
block|}
argument_list|)
decl_stmt|;
name|SVNErrorManager
operator|.
name|error
argument_list|(
name|err
argument_list|,
name|e
argument_list|,
name|SVNLogType
operator|.
name|WC
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
operator|!
name|created
condition|)
block|{
if|if
condition|(
name|myLockFile
operator|.
name|isFile
argument_list|()
condition|)
block|{
name|SVNErrorMessage
name|err
init|=
name|SVNErrorMessage
operator|.
name|create
argument_list|(
name|SVNErrorCode
operator|.
name|WC_LOCKED
argument_list|,
literal|"Working copy ''{0}'' is locked; try performing 'cleanup'"
argument_list|,
name|getRoot
argument_list|()
argument_list|)
decl_stmt|;
name|SVNErrorManager
operator|.
name|error
argument_list|(
name|err
argument_list|,
name|SVNLogType
operator|.
name|WC
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|SVNErrorMessage
name|err
init|=
name|SVNErrorMessage
operator|.
name|create
argument_list|(
name|SVNErrorCode
operator|.
name|WC_NOT_LOCKED
argument_list|,
literal|"Cannot lock working copy ''{0}''"
argument_list|,
name|getRoot
argument_list|()
argument_list|)
decl_stmt|;
name|SVNErrorManager
operator|.
name|error
argument_list|(
name|err
argument_list|,
name|SVNLogType
operator|.
name|WC
argument_list|)
expr_stmt|;
block|}
block|}
return|return
name|created
return|;
block|}
specifier|public
name|boolean
name|unlock
parameter_list|()
throws|throws
name|SVNException
block|{
if|if
condition|(
operator|!
name|myLockFile
operator|.
name|exists
argument_list|()
condition|)
block|{
return|return
literal|true
return|;
block|}
comment|// only if there are not locks or killme files.
name|boolean
name|killMe
init|=
name|getAdminFile
argument_list|(
literal|"KILLME"
argument_list|)
operator|.
name|exists
argument_list|()
decl_stmt|;
if|if
condition|(
name|killMe
condition|)
block|{
return|return
literal|false
return|;
block|}
name|File
index|[]
name|logs
init|=
name|SVNFileListUtil
operator|.
name|listFiles
argument_list|(
name|getAdminDirectory
argument_list|()
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|logs
operator|!=
literal|null
operator|&&
name|i
operator|<
name|logs
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
name|File
name|log
init|=
name|logs
index|[
name|i
index|]
decl_stmt|;
if|if
condition|(
literal|"log"
operator|.
name|equals
argument_list|(
name|log
operator|.
name|getName
argument_list|()
argument_list|)
operator|||
name|log
operator|.
name|getName
argument_list|()
operator|.
name|startsWith
argument_list|(
literal|"log."
argument_list|)
condition|)
block|{
return|return
literal|false
return|;
block|}
block|}
name|boolean
name|deleted
init|=
name|SVNFileUtil
operator|.
name|deleteFile
argument_list|(
name|myLockFile
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|deleted
condition|)
block|{
name|SVNErrorMessage
name|err
init|=
name|SVNErrorMessage
operator|.
name|create
argument_list|(
name|SVNErrorCode
operator|.
name|WC_LOCKED
argument_list|,
literal|"Failed to unlock working copy ''{0}''"
argument_list|,
name|getRoot
argument_list|()
argument_list|)
decl_stmt|;
name|SVNErrorManager
operator|.
name|error
argument_list|(
name|err
argument_list|,
name|SVNLogType
operator|.
name|WC
argument_list|)
expr_stmt|;
block|}
return|return
name|deleted
return|;
block|}
specifier|public
name|boolean
name|isVersioned
parameter_list|()
block|{
if|if
condition|(
name|getAdminDirectory
argument_list|()
operator|.
name|isDirectory
argument_list|()
operator|&&
name|myEntriesFile
operator|.
name|canRead
argument_list|()
condition|)
block|{
try|try
block|{
if|if
condition|(
name|getEntry
argument_list|(
name|getThisDirName
argument_list|()
argument_list|,
literal|false
argument_list|)
operator|!=
literal|null
condition|)
block|{
return|return
literal|true
return|;
block|}
block|}
catch|catch
parameter_list|(
name|SVNException
name|e
parameter_list|)
block|{
comment|//
block|}
block|}
return|return
literal|false
return|;
block|}
specifier|public
name|SVNAdminArea
name|createVersionedDirectory
parameter_list|(
name|File
name|dir
parameter_list|,
name|String
name|url
parameter_list|,
name|String
name|rootURL
parameter_list|,
name|String
name|uuid
parameter_list|,
name|long
name|revNumber
parameter_list|,
name|boolean
name|createMyself
parameter_list|,
name|SVNDepth
name|depth
parameter_list|)
throws|throws
name|SVNException
block|{
name|dir
operator|=
name|createMyself
condition|?
name|getRoot
argument_list|()
else|:
name|dir
expr_stmt|;
name|dir
operator|.
name|mkdirs
argument_list|()
expr_stmt|;
name|File
name|adminDir
init|=
name|createMyself
condition|?
name|getAdminDirectory
argument_list|()
else|:
operator|new
name|Resource
argument_list|(
name|dir
argument_list|,
name|SVNFileUtil
operator|.
name|getAdminDirectoryName
argument_list|()
argument_list|)
decl_stmt|;
name|adminDir
operator|.
name|mkdir
argument_list|()
expr_stmt|;
name|SVNFileUtil
operator|.
name|setHidden
argument_list|(
name|adminDir
argument_list|,
literal|true
argument_list|)
expr_stmt|;
comment|// lock dir.
name|File
name|lockFile
init|=
name|createMyself
condition|?
name|myLockFile
else|:
operator|new
name|Resource
argument_list|(
name|adminDir
argument_list|,
literal|"lock"
argument_list|)
decl_stmt|;
name|SVNFileUtil
operator|.
name|createEmptyFile
argument_list|(
name|lockFile
argument_list|)
expr_stmt|;
name|SVNAdminUtil
operator|.
name|createReadmeFile
argument_list|(
name|adminDir
argument_list|)
expr_stmt|;
name|SVNFileUtil
operator|.
name|createEmptyFile
argument_list|(
name|createMyself
condition|?
name|getAdminFile
argument_list|(
literal|"empty-file"
argument_list|)
else|:
operator|new
name|Resource
argument_list|(
name|adminDir
argument_list|,
literal|"empty-file"
argument_list|)
argument_list|)
expr_stmt|;
name|File
index|[]
name|tmp
init|=
block|{
name|createMyself
operator|?
name|getAdminFile
argument_list|(
literal|"tmp"
argument_list|)
operator|:
operator|new
name|Resource
argument_list|(
name|adminDir
argument_list|,
literal|"tmp"
argument_list|)
block|,
name|createMyself
operator|?
name|getAdminFile
argument_list|(
literal|"tmp"
operator|+
name|Resource
operator|.
name|separatorChar
operator|+
literal|"props"
argument_list|)
operator|:
operator|new
name|Resource
argument_list|(
name|adminDir
argument_list|,
literal|"tmp"
operator|+
name|Resource
operator|.
name|separatorChar
operator|+
literal|"props"
argument_list|)
block|,
name|createMyself
operator|?
name|getAdminFile
argument_list|(
literal|"tmp"
operator|+
name|Resource
operator|.
name|separatorChar
operator|+
literal|"prop-base"
argument_list|)
operator|:
operator|new
name|Resource
argument_list|(
name|adminDir
argument_list|,
literal|"tmp"
operator|+
name|Resource
operator|.
name|separatorChar
operator|+
literal|"prop-base"
argument_list|)
block|,
name|createMyself
operator|?
name|getAdminFile
argument_list|(
literal|"tmp"
operator|+
name|Resource
operator|.
name|separatorChar
operator|+
literal|"text-base"
argument_list|)
operator|:
operator|new
name|Resource
argument_list|(
name|adminDir
argument_list|,
literal|"tmp"
operator|+
name|Resource
operator|.
name|separatorChar
operator|+
literal|"text-base"
argument_list|)
block|,
name|createMyself
operator|?
name|getAdminFile
argument_list|(
literal|"tmp"
operator|+
name|Resource
operator|.
name|separatorChar
operator|+
literal|"wcprops"
argument_list|)
operator|:
operator|new
name|Resource
argument_list|(
name|adminDir
argument_list|,
literal|"tmp"
operator|+
name|Resource
operator|.
name|separatorChar
operator|+
literal|"wcprops"
argument_list|)
block|,
name|createMyself
operator|?
name|getAdminFile
argument_list|(
literal|"props"
argument_list|)
operator|:
operator|new
name|Resource
argument_list|(
name|adminDir
argument_list|,
literal|"props"
argument_list|)
block|,
name|createMyself
operator|?
name|getAdminFile
argument_list|(
literal|"prop-base"
argument_list|)
operator|:
operator|new
name|Resource
argument_list|(
name|adminDir
argument_list|,
literal|"prop-base"
argument_list|)
block|,
name|createMyself
operator|?
name|getAdminFile
argument_list|(
literal|"text-base"
argument_list|)
operator|:
operator|new
name|Resource
argument_list|(
name|adminDir
argument_list|,
literal|"text-base"
argument_list|)
block|,
name|createMyself
operator|?
name|getAdminFile
argument_list|(
literal|"wcprops"
argument_list|)
operator|:
operator|new
name|Resource
argument_list|(
name|adminDir
argument_list|,
literal|"wcprops"
argument_list|)
block|}
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|tmp
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
name|tmp
index|[
name|i
index|]
operator|.
name|mkdir
argument_list|()
expr_stmt|;
block|}
name|SVNAdminUtil
operator|.
name|createFormatFile
argument_list|(
name|adminDir
argument_list|)
expr_stmt|;
name|SVNAdminArea
name|adminArea
init|=
name|createMyself
condition|?
name|this
else|:
operator|new
name|SVNXMLAdminArea
argument_list|(
name|dir
argument_list|)
decl_stmt|;
name|adminArea
operator|.
name|setLocked
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|SVNEntry
name|rootEntry
init|=
name|adminArea
operator|.
name|getEntry
argument_list|(
name|adminArea
operator|.
name|getThisDirName
argument_list|()
argument_list|,
literal|true
argument_list|)
decl_stmt|;
if|if
condition|(
name|rootEntry
operator|==
literal|null
condition|)
block|{
name|rootEntry
operator|=
name|adminArea
operator|.
name|addEntry
argument_list|(
name|adminArea
operator|.
name|getThisDirName
argument_list|()
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|url
operator|!=
literal|null
condition|)
block|{
name|rootEntry
operator|.
name|setURL
argument_list|(
name|url
argument_list|)
expr_stmt|;
block|}
name|rootEntry
operator|.
name|setRepositoryRoot
argument_list|(
name|rootURL
argument_list|)
expr_stmt|;
name|rootEntry
operator|.
name|setRevision
argument_list|(
name|revNumber
argument_list|)
expr_stmt|;
name|rootEntry
operator|.
name|setKind
argument_list|(
name|SVNNodeKind
operator|.
name|DIR
argument_list|)
expr_stmt|;
if|if
condition|(
name|uuid
operator|!=
literal|null
condition|)
block|{
name|rootEntry
operator|.
name|setUUID
argument_list|(
name|uuid
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|revNumber
operator|>
literal|0
condition|)
block|{
name|rootEntry
operator|.
name|setIncomplete
argument_list|(
literal|true
argument_list|)
expr_stmt|;
block|}
name|adminArea
operator|.
name|saveEntries
argument_list|(
literal|false
argument_list|)
expr_stmt|;
comment|// unlock dir.
name|SVNFileUtil
operator|.
name|deleteFile
argument_list|(
name|lockFile
argument_list|)
expr_stmt|;
return|return
name|adminArea
return|;
block|}
specifier|public
name|boolean
name|isLocked
parameter_list|()
block|{
if|if
condition|(
operator|!
name|myWasLocked
condition|)
block|{
return|return
literal|false
return|;
block|}
return|return
name|myLockFile
operator|.
name|isFile
argument_list|()
return|;
block|}
specifier|public
name|int
name|getFormatVersion
parameter_list|()
block|{
return|return
name|WC_FORMAT
return|;
block|}
specifier|protected
name|SVNVersionedProperties
name|formatBaseProperties
parameter_list|(
name|SVNProperties
name|srcProperties
parameter_list|)
block|{
name|SVNProperties
name|filteredProperties
init|=
operator|new
name|SVNProperties
argument_list|(
name|srcProperties
argument_list|)
decl_stmt|;
name|filteredProperties
operator|.
name|remove
argument_list|(
name|SVNProperty
operator|.
name|MERGE_INFO
argument_list|)
expr_stmt|;
return|return
operator|new
name|SVNProperties13
argument_list|(
name|srcProperties
argument_list|)
return|;
block|}
specifier|protected
name|SVNVersionedProperties
name|formatProperties
parameter_list|(
name|SVNEntry
name|entry
parameter_list|,
name|SVNProperties
name|srcProperties
parameter_list|)
block|{
name|SVNProperties
name|filteredProperties
init|=
operator|new
name|SVNProperties
argument_list|(
name|srcProperties
argument_list|)
decl_stmt|;
name|filteredProperties
operator|.
name|remove
argument_list|(
name|SVNProperty
operator|.
name|MERGE_INFO
argument_list|)
expr_stmt|;
return|return
operator|new
name|SVNProperties13
argument_list|(
name|filteredProperties
argument_list|)
return|;
block|}
specifier|public
name|void
name|handleKillMe
parameter_list|()
throws|throws
name|SVNException
block|{
name|boolean
name|killMe
init|=
name|isKillMe
argument_list|()
decl_stmt|;
if|if
condition|(
name|killMe
condition|)
block|{
name|SVNEntry
name|entry
init|=
name|getEntry
argument_list|(
name|getThisDirName
argument_list|()
argument_list|,
literal|false
argument_list|)
decl_stmt|;
name|long
name|dirRevision
init|=
name|entry
operator|!=
literal|null
condition|?
name|entry
operator|.
name|getRevision
argument_list|()
else|:
operator|-
literal|1
decl_stmt|;
comment|// deleted dir, files and entry in parent.
name|File
name|dir
init|=
name|getRoot
argument_list|()
decl_stmt|;
name|SVNWCAccess
name|access
init|=
name|getWCAccess
argument_list|()
decl_stmt|;
name|boolean
name|isWCRoot
init|=
name|access
operator|.
name|isWCRoot
argument_list|(
name|getRoot
argument_list|()
argument_list|)
decl_stmt|;
try|try
block|{
name|removeFromRevisionControl
argument_list|(
name|getThisDirName
argument_list|()
argument_list|,
literal|true
argument_list|,
literal|false
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|SVNException
name|svne
parameter_list|)
block|{
name|SVNDebugLog
operator|.
name|getDefaultLog
argument_list|()
operator|.
name|logFine
argument_list|(
name|SVNLogType
operator|.
name|WC
argument_list|,
name|svne
argument_list|)
expr_stmt|;
if|if
condition|(
name|svne
operator|.
name|getErrorMessage
argument_list|()
operator|.
name|getErrorCode
argument_list|()
operator|!=
name|SVNErrorCode
operator|.
name|WC_LEFT_LOCAL_MOD
condition|)
block|{
throw|throw
name|svne
throw|;
block|}
block|}
if|if
condition|(
name|isWCRoot
condition|)
block|{
return|return;
block|}
comment|// compare revision with parent's one
name|SVNAdminArea
name|parentArea
init|=
name|access
operator|.
name|retrieve
argument_list|(
name|dir
operator|.
name|getParentFile
argument_list|()
argument_list|)
decl_stmt|;
name|SVNEntry
name|parentEntry
init|=
name|parentArea
operator|.
name|getEntry
argument_list|(
name|parentArea
operator|.
name|getThisDirName
argument_list|()
argument_list|,
literal|false
argument_list|)
decl_stmt|;
if|if
condition|(
name|dirRevision
operator|>
name|parentEntry
operator|.
name|getRevision
argument_list|()
condition|)
block|{
name|SVNEntry
name|entryInParent
init|=
name|parentArea
operator|.
name|addEntry
argument_list|(
name|dir
operator|.
name|getName
argument_list|()
argument_list|)
decl_stmt|;
name|entryInParent
operator|.
name|setDeleted
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|entryInParent
operator|.
name|setKind
argument_list|(
name|SVNNodeKind
operator|.
name|DIR
argument_list|)
expr_stmt|;
name|entryInParent
operator|.
name|setRevision
argument_list|(
name|dirRevision
argument_list|)
expr_stmt|;
name|parentArea
operator|.
name|saveEntries
argument_list|(
literal|false
argument_list|)
expr_stmt|;
block|}
block|}
block|}
specifier|public
name|void
name|postCommit
parameter_list|(
name|String
name|fileName
parameter_list|,
name|long
name|revisionNumber
parameter_list|,
name|boolean
name|implicit
parameter_list|,
name|boolean
name|rerun
parameter_list|,
name|SVNErrorCode
name|errorCode
parameter_list|)
throws|throws
name|SVNException
block|{
name|SVNEntry
name|entry
init|=
name|getEntry
argument_list|(
name|fileName
argument_list|,
literal|true
argument_list|)
decl_stmt|;
if|if
condition|(
name|entry
operator|==
literal|null
operator|||
operator|(
operator|!
name|getThisDirName
argument_list|()
operator|.
name|equals
argument_list|(
name|fileName
argument_list|)
operator|&&
name|entry
operator|.
name|getKind
argument_list|()
operator|!=
name|SVNNodeKind
operator|.
name|FILE
operator|)
condition|)
block|{
name|SVNErrorMessage
name|err
init|=
name|SVNErrorMessage
operator|.
name|create
argument_list|(
name|errorCode
argument_list|,
literal|"Log command for directory ''{0}'' is mislocated"
argument_list|,
name|getRoot
argument_list|()
argument_list|)
decl_stmt|;
name|SVNErrorManager
operator|.
name|error
argument_list|(
name|err
argument_list|,
name|SVNLogType
operator|.
name|WC
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
operator|!
name|implicit
operator|&&
name|entry
operator|.
name|isScheduledForDeletion
argument_list|()
condition|)
block|{
if|if
condition|(
name|getThisDirName
argument_list|()
operator|.
name|equals
argument_list|(
name|fileName
argument_list|)
condition|)
block|{
name|entry
operator|.
name|setRevision
argument_list|(
name|revisionNumber
argument_list|)
expr_stmt|;
name|entry
operator|.
name|setKind
argument_list|(
name|SVNNodeKind
operator|.
name|DIR
argument_list|)
expr_stmt|;
name|File
name|killMe
init|=
name|getAdminFile
argument_list|(
name|ADM_KILLME
argument_list|)
decl_stmt|;
if|if
condition|(
name|rerun
operator|&&
name|killMe
operator|.
name|isFile
argument_list|()
condition|)
block|{
return|return;
block|}
if|if
condition|(
name|killMe
operator|.
name|getParentFile
argument_list|()
operator|.
name|isDirectory
argument_list|()
condition|)
block|{
try|try
block|{
name|killMe
operator|.
name|createNewFile
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
name|SVNErrorMessage
name|err
init|=
name|SVNErrorMessage
operator|.
name|create
argument_list|(
name|SVNErrorCode
operator|.
name|IO_ERROR
argument_list|,
literal|"Cannot create file ''{0}'': {1}"
argument_list|,
operator|new
name|Object
index|[]
block|{
name|killMe
block|,
name|e
operator|.
name|getLocalizedMessage
argument_list|()
block|}
argument_list|)
decl_stmt|;
name|SVNErrorManager
operator|.
name|error
argument_list|(
name|err
argument_list|,
name|e
argument_list|,
name|SVNLogType
operator|.
name|WC
argument_list|)
expr_stmt|;
block|}
block|}
block|}
else|else
block|{
name|removeFromRevisionControl
argument_list|(
name|fileName
argument_list|,
literal|false
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|SVNEntry
name|parentEntry
init|=
name|getEntry
argument_list|(
name|getThisDirName
argument_list|()
argument_list|,
literal|true
argument_list|)
decl_stmt|;
if|if
condition|(
name|revisionNumber
operator|>
name|parentEntry
operator|.
name|getRevision
argument_list|()
condition|)
block|{
name|SVNEntry
name|fileEntry
init|=
name|addEntry
argument_list|(
name|fileName
argument_list|)
decl_stmt|;
name|fileEntry
operator|.
name|setKind
argument_list|(
name|SVNNodeKind
operator|.
name|FILE
argument_list|)
expr_stmt|;
name|fileEntry
operator|.
name|setDeleted
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|fileEntry
operator|.
name|setRevision
argument_list|(
name|revisionNumber
argument_list|)
expr_stmt|;
block|}
block|}
return|return;
block|}
if|if
condition|(
operator|!
name|implicit
operator|&&
name|entry
operator|.
name|isScheduledForReplacement
argument_list|()
operator|&&
name|getThisDirName
argument_list|()
operator|.
name|equals
argument_list|(
name|fileName
argument_list|)
condition|)
block|{
for|for
control|(
name|Iterator
name|ents
init|=
name|entries
argument_list|(
literal|true
argument_list|)
init|;
name|ents
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|SVNEntry
name|currentEntry
init|=
operator|(
name|SVNEntry
operator|)
name|ents
operator|.
name|next
argument_list|()
decl_stmt|;
if|if
condition|(
operator|!
name|currentEntry
operator|.
name|isScheduledForDeletion
argument_list|()
condition|)
block|{
continue|continue;
block|}
if|if
condition|(
name|currentEntry
operator|.
name|getKind
argument_list|()
operator|==
name|SVNNodeKind
operator|.
name|FILE
operator|||
name|currentEntry
operator|.
name|getKind
argument_list|()
operator|==
name|SVNNodeKind
operator|.
name|DIR
condition|)
block|{
name|removeFromRevisionControl
argument_list|(
name|currentEntry
operator|.
name|getName
argument_list|()
argument_list|,
literal|false
argument_list|,
literal|false
argument_list|)
expr_stmt|;
block|}
block|}
block|}
name|long
name|textTime
init|=
literal|0
decl_stmt|;
if|if
condition|(
operator|!
name|implicit
operator|&&
operator|!
name|getThisDirName
argument_list|()
operator|.
name|equals
argument_list|(
name|fileName
argument_list|)
condition|)
block|{
name|File
name|tmpFile
init|=
name|getBaseFile
argument_list|(
name|fileName
argument_list|,
literal|true
argument_list|)
decl_stmt|;
name|SVNFileType
name|fileType
init|=
name|SVNFileType
operator|.
name|getType
argument_list|(
name|tmpFile
argument_list|)
decl_stmt|;
if|if
condition|(
name|fileType
operator|==
name|SVNFileType
operator|.
name|FILE
operator|||
name|fileType
operator|==
name|SVNFileType
operator|.
name|SYMLINK
condition|)
block|{
name|boolean
name|modified
init|=
literal|false
decl_stmt|;
name|File
name|workingFile
init|=
name|getFile
argument_list|(
name|fileName
argument_list|)
decl_stmt|;
name|File
name|tmpFile2
init|=
name|SVNFileUtil
operator|.
name|createUniqueFile
argument_list|(
name|tmpFile
operator|.
name|getParentFile
argument_list|()
argument_list|,
name|fileName
argument_list|,
literal|".tmp"
argument_list|,
literal|true
argument_list|)
decl_stmt|;
try|try
block|{
name|String
name|tmpFile2Path
init|=
name|SVNFileUtil
operator|.
name|getBasePath
argument_list|(
name|tmpFile2
argument_list|)
decl_stmt|;
name|SVNTranslator
operator|.
name|translate
argument_list|(
name|this
argument_list|,
name|fileName
argument_list|,
name|fileName
argument_list|,
name|tmpFile2Path
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|modified
operator|=
operator|!
name|SVNFileUtil
operator|.
name|compareFiles
argument_list|(
name|tmpFile
argument_list|,
name|tmpFile2
argument_list|,
literal|null
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|SVNException
name|svne
parameter_list|)
block|{
name|SVNErrorMessage
name|err
init|=
name|SVNErrorMessage
operator|.
name|create
argument_list|(
name|errorCode
argument_list|,
literal|"Error comparing ''{0}'' and ''{1}''"
argument_list|,
operator|new
name|Object
index|[]
block|{
name|workingFile
block|,
name|tmpFile
block|}
argument_list|)
decl_stmt|;
name|SVNErrorManager
operator|.
name|error
argument_list|(
name|err
argument_list|,
name|svne
argument_list|,
name|SVNLogType
operator|.
name|WC
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
name|tmpFile2
operator|.
name|delete
argument_list|()
expr_stmt|;
block|}
name|textTime
operator|=
name|modified
condition|?
name|tmpFile
operator|.
name|lastModified
argument_list|()
else|:
name|workingFile
operator|.
name|lastModified
argument_list|()
expr_stmt|;
block|}
block|}
if|if
condition|(
operator|!
name|implicit
operator|&&
name|entry
operator|.
name|isScheduledForReplacement
argument_list|()
condition|)
block|{
name|SVNFileUtil
operator|.
name|deleteFile
argument_list|(
name|getBasePropertiesFile
argument_list|(
name|fileName
argument_list|,
literal|false
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|long
name|propTime
init|=
literal|0
decl_stmt|;
name|boolean
name|setReadWrite
init|=
literal|false
decl_stmt|;
name|boolean
name|setNotExecutable
init|=
literal|false
decl_stmt|;
name|SVNVersionedProperties
name|baseProps
init|=
name|getBaseProperties
argument_list|(
name|fileName
argument_list|)
decl_stmt|;
name|SVNVersionedProperties
name|wcProps
init|=
name|getProperties
argument_list|(
name|fileName
argument_list|)
decl_stmt|;
comment|//TODO: to work properly we must create a tmp working props file
comment|//instead of tmp base props one
name|File
name|tmpPropsFile
init|=
name|getPropertiesFile
argument_list|(
name|fileName
argument_list|,
literal|true
argument_list|)
decl_stmt|;
name|File
name|wcPropsFile
init|=
name|getPropertiesFile
argument_list|(
name|fileName
argument_list|,
literal|false
argument_list|)
decl_stmt|;
name|File
name|basePropertiesFile
init|=
name|getBasePropertiesFile
argument_list|(
name|fileName
argument_list|,
literal|false
argument_list|)
decl_stmt|;
name|SVNFileType
name|tmpPropsType
init|=
name|SVNFileType
operator|.
name|getType
argument_list|(
name|tmpPropsFile
argument_list|)
decl_stmt|;
comment|// tmp may be missing when there were no prop change at all!
if|if
condition|(
name|tmpPropsType
operator|==
name|SVNFileType
operator|.
name|FILE
condition|)
block|{
name|SVNWCProperties
name|working
init|=
operator|new
name|SVNWCProperties
argument_list|(
name|wcPropsFile
argument_list|,
literal|null
argument_list|)
decl_stmt|;
name|SVNWCProperties
name|workingTmp
init|=
operator|new
name|SVNWCProperties
argument_list|(
name|tmpPropsFile
argument_list|,
literal|null
argument_list|)
decl_stmt|;
name|SVNProperties
name|pDiff
init|=
name|working
operator|.
name|compareTo
argument_list|(
name|workingTmp
argument_list|)
decl_stmt|;
name|boolean
name|equals
init|=
name|pDiff
operator|==
literal|null
operator|||
name|pDiff
operator|.
name|isEmpty
argument_list|()
decl_stmt|;
name|propTime
operator|=
name|equals
condition|?
name|wcPropsFile
operator|.
name|lastModified
argument_list|()
else|:
name|tmpPropsFile
operator|.
name|lastModified
argument_list|()
expr_stmt|;
if|if
condition|(
operator|!
name|getThisDirName
argument_list|()
operator|.
name|equals
argument_list|(
name|fileName
argument_list|)
condition|)
block|{
name|SVNVersionedProperties
name|propDiff
init|=
name|baseProps
operator|.
name|compareTo
argument_list|(
name|wcProps
argument_list|)
decl_stmt|;
name|setReadWrite
operator|=
name|propDiff
operator|!=
literal|null
operator|&&
name|propDiff
operator|.
name|containsProperty
argument_list|(
name|SVNProperty
operator|.
name|NEEDS_LOCK
argument_list|)
operator|&&
name|propDiff
operator|.
name|getPropertyValue
argument_list|(
name|SVNProperty
operator|.
name|NEEDS_LOCK
argument_list|)
operator|==
literal|null
expr_stmt|;
name|setNotExecutable
operator|=
name|propDiff
operator|!=
literal|null
operator|&&
name|propDiff
operator|.
name|containsProperty
argument_list|(
name|SVNProperty
operator|.
name|EXECUTABLE
argument_list|)
operator|&&
name|propDiff
operator|.
name|getPropertyValue
argument_list|(
name|SVNProperty
operator|.
name|EXECUTABLE
argument_list|)
operator|==
literal|null
expr_stmt|;
block|}
try|try
block|{
if|if
condition|(
operator|!
name|tmpPropsFile
operator|.
name|exists
argument_list|()
operator|||
name|tmpPropsFile
operator|.
name|length
argument_list|()
operator|<=
literal|4
condition|)
block|{
name|SVNFileUtil
operator|.
name|deleteFile
argument_list|(
name|basePropertiesFile
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|SVNFileUtil
operator|.
name|copyFile
argument_list|(
name|tmpPropsFile
argument_list|,
name|basePropertiesFile
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|SVNFileUtil
operator|.
name|setReadonly
argument_list|(
name|basePropertiesFile
argument_list|,
literal|true
argument_list|)
expr_stmt|;
block|}
block|}
finally|finally
block|{
name|SVNFileUtil
operator|.
name|deleteFile
argument_list|(
name|tmpPropsFile
argument_list|)
expr_stmt|;
block|}
block|}
if|else if
condition|(
name|entry
operator|.
name|getPropTime
argument_list|()
operator|==
literal|null
operator|&&
operator|!
name|wcProps
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|propTime
operator|=
name|wcPropsFile
operator|.
name|lastModified
argument_list|()
expr_stmt|;
block|}
if|if
condition|(
operator|!
name|getThisDirName
argument_list|()
operator|.
name|equals
argument_list|(
name|fileName
argument_list|)
operator|&&
operator|!
name|implicit
condition|)
block|{
name|File
name|tmpFile
init|=
name|getBaseFile
argument_list|(
name|fileName
argument_list|,
literal|true
argument_list|)
decl_stmt|;
name|File
name|baseFile
init|=
name|getBaseFile
argument_list|(
name|fileName
argument_list|,
literal|false
argument_list|)
decl_stmt|;
name|File
name|wcFile
init|=
name|getFile
argument_list|(
name|fileName
argument_list|)
decl_stmt|;
name|File
name|tmpFile2
init|=
literal|null
decl_stmt|;
try|try
block|{
name|tmpFile2
operator|=
name|SVNFileUtil
operator|.
name|createUniqueFile
argument_list|(
name|tmpFile
operator|.
name|getParentFile
argument_list|()
argument_list|,
name|fileName
argument_list|,
literal|".tmp"
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|boolean
name|overwritten
init|=
literal|false
decl_stmt|;
name|SVNFileType
name|fileType
init|=
name|SVNFileType
operator|.
name|getType
argument_list|(
name|tmpFile
argument_list|)
decl_stmt|;
name|boolean
name|special
init|=
name|getProperties
argument_list|(
name|fileName
argument_list|)
operator|.
name|getPropertyValue
argument_list|(
name|SVNProperty
operator|.
name|SPECIAL
argument_list|)
operator|!=
literal|null
decl_stmt|;
if|if
condition|(
operator|!
name|SVNFileUtil
operator|.
name|symlinksSupported
argument_list|()
operator|||
operator|!
name|special
condition|)
block|{
if|if
condition|(
name|fileType
operator|==
name|SVNFileType
operator|.
name|FILE
condition|)
block|{
name|SVNTranslator
operator|.
name|translate
argument_list|(
name|this
argument_list|,
name|fileName
argument_list|,
name|SVNFileUtil
operator|.
name|getBasePath
argument_list|(
name|tmpFile
argument_list|)
argument_list|,
name|SVNFileUtil
operator|.
name|getBasePath
argument_list|(
name|tmpFile2
argument_list|)
argument_list|,
literal|true
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|SVNTranslator
operator|.
name|translate
argument_list|(
name|this
argument_list|,
name|fileName
argument_list|,
name|fileName
argument_list|,
name|SVNFileUtil
operator|.
name|getBasePath
argument_list|(
name|tmpFile2
argument_list|)
argument_list|,
literal|true
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
operator|!
name|SVNFileUtil
operator|.
name|compareFiles
argument_list|(
name|tmpFile2
argument_list|,
name|wcFile
argument_list|,
literal|null
argument_list|)
condition|)
block|{
name|SVNFileUtil
operator|.
name|copyFile
argument_list|(
name|tmpFile2
argument_list|,
name|wcFile
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|overwritten
operator|=
literal|true
expr_stmt|;
block|}
block|}
name|boolean
name|needsReadonly
init|=
name|getProperties
argument_list|(
name|fileName
argument_list|)
operator|.
name|getPropertyValue
argument_list|(
name|SVNProperty
operator|.
name|NEEDS_LOCK
argument_list|)
operator|!=
literal|null
operator|&&
name|entry
operator|.
name|getLockToken
argument_list|()
operator|==
literal|null
decl_stmt|;
name|boolean
name|needsExecutable
init|=
name|getProperties
argument_list|(
name|fileName
argument_list|)
operator|.
name|getPropertyValue
argument_list|(
name|SVNProperty
operator|.
name|EXECUTABLE
argument_list|)
operator|!=
literal|null
decl_stmt|;
if|if
condition|(
name|needsReadonly
condition|)
block|{
name|SVNFileUtil
operator|.
name|setReadonly
argument_list|(
name|wcFile
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|overwritten
operator|=
literal|true
expr_stmt|;
block|}
if|if
condition|(
name|needsExecutable
condition|)
block|{
name|SVNFileUtil
operator|.
name|setExecutable
argument_list|(
name|wcFile
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|overwritten
operator|=
literal|true
expr_stmt|;
block|}
if|if
condition|(
name|fileType
operator|==
name|SVNFileType
operator|.
name|FILE
condition|)
block|{
name|SVNFileUtil
operator|.
name|rename
argument_list|(
name|tmpFile
argument_list|,
name|baseFile
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|setReadWrite
condition|)
block|{
name|SVNFileUtil
operator|.
name|setReadonly
argument_list|(
name|wcFile
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|overwritten
operator|=
literal|true
expr_stmt|;
block|}
if|if
condition|(
name|setNotExecutable
condition|)
block|{
name|SVNFileUtil
operator|.
name|setExecutable
argument_list|(
name|wcFile
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|overwritten
operator|=
literal|true
expr_stmt|;
block|}
if|if
condition|(
name|overwritten
condition|)
block|{
name|textTime
operator|=
name|wcFile
operator|.
name|lastModified
argument_list|()
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
name|SVNException
name|svne
parameter_list|)
block|{
name|SVNErrorMessage
name|err
init|=
name|SVNErrorMessage
operator|.
name|create
argument_list|(
name|errorCode
argument_list|,
literal|"Error replacing text-base of ''{0}''"
argument_list|,
name|fileName
argument_list|)
decl_stmt|;
name|SVNErrorManager
operator|.
name|error
argument_list|(
name|err
argument_list|,
name|svne
argument_list|,
name|SVNLogType
operator|.
name|WC
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
name|tmpFile2
operator|.
name|delete
argument_list|()
expr_stmt|;
name|tmpFile
operator|.
name|delete
argument_list|()
expr_stmt|;
block|}
block|}
comment|// update entry
name|Map
name|entryAttrs
init|=
operator|new
name|SVNHashMap
argument_list|()
decl_stmt|;
name|entryAttrs
operator|.
name|put
argument_list|(
name|SVNProperty
operator|.
name|REVISION
argument_list|,
name|SVNProperty
operator|.
name|toString
argument_list|(
name|revisionNumber
argument_list|)
argument_list|)
expr_stmt|;
name|entryAttrs
operator|.
name|put
argument_list|(
name|SVNProperty
operator|.
name|KIND
argument_list|,
name|getThisDirName
argument_list|()
operator|.
name|equals
argument_list|(
name|fileName
argument_list|)
condition|?
name|SVNProperty
operator|.
name|KIND_DIR
else|:
name|SVNProperty
operator|.
name|KIND_FILE
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|implicit
condition|)
block|{
name|entryAttrs
operator|.
name|put
argument_list|(
name|SVNProperty
operator|.
name|SCHEDULE
argument_list|,
literal|null
argument_list|)
expr_stmt|;
block|}
name|entryAttrs
operator|.
name|put
argument_list|(
name|SVNProperty
operator|.
name|COPIED
argument_list|,
name|SVNProperty
operator|.
name|toString
argument_list|(
literal|false
argument_list|)
argument_list|)
expr_stmt|;
name|entryAttrs
operator|.
name|put
argument_list|(
name|SVNProperty
operator|.
name|DELETED
argument_list|,
name|SVNProperty
operator|.
name|toString
argument_list|(
literal|false
argument_list|)
argument_list|)
expr_stmt|;
if|if
condition|(
name|textTime
operator|!=
literal|0
operator|&&
operator|!
name|implicit
condition|)
block|{
name|entryAttrs
operator|.
name|put
argument_list|(
name|SVNProperty
operator|.
name|TEXT_TIME
argument_list|,
name|SVNDate
operator|.
name|formatDate
argument_list|(
operator|new
name|Date
argument_list|(
name|textTime
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|propTime
operator|!=
literal|0
operator|&&
operator|!
name|implicit
condition|)
block|{
name|entryAttrs
operator|.
name|put
argument_list|(
name|SVNProperty
operator|.
name|PROP_TIME
argument_list|,
name|SVNDate
operator|.
name|formatDate
argument_list|(
operator|new
name|Date
argument_list|(
name|propTime
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|entryAttrs
operator|.
name|put
argument_list|(
name|SVNProperty
operator|.
name|CONFLICT_NEW
argument_list|,
literal|null
argument_list|)
expr_stmt|;
name|entryAttrs
operator|.
name|put
argument_list|(
name|SVNProperty
operator|.
name|CONFLICT_OLD
argument_list|,
literal|null
argument_list|)
expr_stmt|;
name|entryAttrs
operator|.
name|put
argument_list|(
name|SVNProperty
operator|.
name|CONFLICT_WRK
argument_list|,
literal|null
argument_list|)
expr_stmt|;
name|entryAttrs
operator|.
name|put
argument_list|(
name|SVNProperty
operator|.
name|PROP_REJECT_FILE
argument_list|,
literal|null
argument_list|)
expr_stmt|;
name|entryAttrs
operator|.
name|put
argument_list|(
name|SVNProperty
operator|.
name|COPYFROM_REVISION
argument_list|,
literal|null
argument_list|)
expr_stmt|;
name|entryAttrs
operator|.
name|put
argument_list|(
name|SVNProperty
operator|.
name|COPYFROM_URL
argument_list|,
literal|null
argument_list|)
expr_stmt|;
try|try
block|{
name|modifyEntry
argument_list|(
name|fileName
argument_list|,
name|entryAttrs
argument_list|,
literal|false
argument_list|,
literal|true
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|SVNException
name|svne
parameter_list|)
block|{
name|SVNErrorMessage
name|err
init|=
name|SVNErrorMessage
operator|.
name|create
argument_list|(
name|errorCode
argument_list|,
literal|"Error modifying entry of ''{0}''"
argument_list|,
name|fileName
argument_list|)
decl_stmt|;
name|SVNErrorManager
operator|.
name|error
argument_list|(
name|err
argument_list|,
name|svne
argument_list|,
name|SVNLogType
operator|.
name|WC
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
operator|!
name|getThisDirName
argument_list|()
operator|.
name|equals
argument_list|(
name|fileName
argument_list|)
condition|)
block|{
return|return;
block|}
comment|// update entry in parent.
name|File
name|dirFile
init|=
name|getRoot
argument_list|()
decl_stmt|;
if|if
condition|(
name|getWCAccess
argument_list|()
operator|.
name|isWCRoot
argument_list|(
name|getRoot
argument_list|()
argument_list|)
condition|)
block|{
return|return;
block|}
name|boolean
name|unassociated
init|=
literal|false
decl_stmt|;
name|SVNAdminArea
name|parentArea
init|=
literal|null
decl_stmt|;
try|try
block|{
name|parentArea
operator|=
name|getWCAccess
argument_list|()
operator|.
name|retrieve
argument_list|(
name|dirFile
operator|.
name|getParentFile
argument_list|()
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|SVNException
name|svne
parameter_list|)
block|{
if|if
condition|(
name|svne
operator|.
name|getErrorMessage
argument_list|()
operator|.
name|getErrorCode
argument_list|()
operator|==
name|SVNErrorCode
operator|.
name|WC_NOT_LOCKED
condition|)
block|{
name|parentArea
operator|=
name|getWCAccess
argument_list|()
operator|.
name|open
argument_list|(
name|dirFile
operator|.
name|getParentFile
argument_list|()
argument_list|,
literal|true
argument_list|,
literal|false
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|unassociated
operator|=
literal|true
expr_stmt|;
block|}
throw|throw
name|svne
throw|;
block|}
name|SVNEntry
name|entryInParent
init|=
name|parentArea
operator|.
name|getEntry
argument_list|(
name|dirFile
operator|.
name|getName
argument_list|()
argument_list|,
literal|false
argument_list|)
decl_stmt|;
if|if
condition|(
name|entryInParent
operator|!=
literal|null
condition|)
block|{
name|entryAttrs
operator|.
name|clear
argument_list|()
expr_stmt|;
if|if
condition|(
operator|!
name|implicit
condition|)
block|{
name|entryAttrs
operator|.
name|put
argument_list|(
name|SVNProperty
operator|.
name|SCHEDULE
argument_list|,
literal|null
argument_list|)
expr_stmt|;
block|}
name|entryAttrs
operator|.
name|put
argument_list|(
name|SVNProperty
operator|.
name|COPIED
argument_list|,
name|SVNProperty
operator|.
name|toString
argument_list|(
literal|false
argument_list|)
argument_list|)
expr_stmt|;
name|entryAttrs
operator|.
name|put
argument_list|(
name|SVNProperty
operator|.
name|COPYFROM_REVISION
argument_list|,
literal|null
argument_list|)
expr_stmt|;
name|entryAttrs
operator|.
name|put
argument_list|(
name|SVNProperty
operator|.
name|COPYFROM_URL
argument_list|,
literal|null
argument_list|)
expr_stmt|;
name|entryAttrs
operator|.
name|put
argument_list|(
name|SVNProperty
operator|.
name|DELETED
argument_list|,
name|SVNProperty
operator|.
name|toString
argument_list|(
literal|false
argument_list|)
argument_list|)
expr_stmt|;
try|try
block|{
name|parentArea
operator|.
name|modifyEntry
argument_list|(
name|entryInParent
operator|.
name|getName
argument_list|()
argument_list|,
name|entryAttrs
argument_list|,
literal|true
argument_list|,
literal|true
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|SVNException
name|svne
parameter_list|)
block|{
name|SVNErrorMessage
name|err
init|=
name|SVNErrorMessage
operator|.
name|create
argument_list|(
name|errorCode
argument_list|,
literal|"Error modifying entry of ''{0}''"
argument_list|,
name|fileName
argument_list|)
decl_stmt|;
name|SVNErrorManager
operator|.
name|error
argument_list|(
name|err
argument_list|,
name|svne
argument_list|,
name|SVNLogType
operator|.
name|WC
argument_list|)
expr_stmt|;
block|}
block|}
name|parentArea
operator|.
name|saveEntries
argument_list|(
literal|false
argument_list|)
expr_stmt|;
if|if
condition|(
name|unassociated
condition|)
block|{
name|getWCAccess
argument_list|()
operator|.
name|closeAdminArea
argument_list|(
name|dirFile
operator|.
name|getParentFile
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
specifier|public
name|boolean
name|hasTreeConflict
parameter_list|(
name|String
name|name
parameter_list|)
throws|throws
name|SVNException
block|{
return|return
literal|false
return|;
block|}
specifier|public
name|SVNTreeConflictDescription
name|getTreeConflict
parameter_list|(
name|String
name|name
parameter_list|)
throws|throws
name|SVNException
block|{
return|return
literal|null
return|;
block|}
specifier|public
name|void
name|addTreeConflict
parameter_list|(
name|SVNTreeConflictDescription
name|conflict
parameter_list|)
throws|throws
name|SVNException
block|{
name|SVNErrorMessage
name|err
init|=
name|SVNErrorMessage
operator|.
name|create
argument_list|(
name|SVNErrorCode
operator|.
name|UNSUPPORTED_FEATURE
argument_list|,
literal|"This feature is not supported in version {0} of working copy format"
argument_list|,
name|String
operator|.
name|valueOf
argument_list|(
name|getFormatVersion
argument_list|()
argument_list|)
argument_list|)
decl_stmt|;
name|SVNErrorManager
operator|.
name|error
argument_list|(
name|err
argument_list|,
name|SVNLogType
operator|.
name|WC
argument_list|)
expr_stmt|;
block|}
specifier|public
name|SVNTreeConflictDescription
name|deleteTreeConflict
parameter_list|(
name|String
name|name
parameter_list|)
throws|throws
name|SVNException
block|{
name|SVNErrorMessage
name|err
init|=
name|SVNErrorMessage
operator|.
name|create
argument_list|(
name|SVNErrorCode
operator|.
name|UNSUPPORTED_FEATURE
argument_list|,
literal|"This feature is not supported in version {0} of working copy format"
argument_list|,
name|String
operator|.
name|valueOf
argument_list|(
name|getFormatVersion
argument_list|()
argument_list|)
argument_list|)
decl_stmt|;
name|SVNErrorManager
operator|.
name|error
argument_list|(
name|err
argument_list|,
name|SVNLogType
operator|.
name|WC
argument_list|)
expr_stmt|;
return|return
literal|null
return|;
block|}
specifier|public
name|void
name|setFileExternalLocation
parameter_list|(
name|String
name|name
parameter_list|,
name|SVNURL
name|url
parameter_list|,
name|SVNRevision
name|pegRevision
parameter_list|,
name|SVNRevision
name|revision
parameter_list|,
name|SVNURL
name|reposRootURL
parameter_list|)
throws|throws
name|SVNException
block|{
name|SVNErrorMessage
name|err
init|=
name|SVNErrorMessage
operator|.
name|create
argument_list|(
name|SVNErrorCode
operator|.
name|UNSUPPORTED_FEATURE
argument_list|,
literal|"This feature is not supported in version {0} of working copy format"
argument_list|,
name|String
operator|.
name|valueOf
argument_list|(
name|getFormatVersion
argument_list|()
argument_list|)
argument_list|)
decl_stmt|;
name|SVNErrorManager
operator|.
name|error
argument_list|(
name|err
argument_list|,
name|SVNLogType
operator|.
name|WC
argument_list|)
expr_stmt|;
block|}
specifier|protected
name|boolean
name|isEntryPropertyApplicable
parameter_list|(
name|String
name|propName
parameter_list|)
block|{
return|return
name|propName
operator|!=
literal|null
operator|&&
operator|!
name|INAPPLICABLE_PROPERTIES
operator|.
name|contains
argument_list|(
name|propName
argument_list|)
return|;
block|}
specifier|protected
name|boolean
name|readExtraOptions
parameter_list|(
name|BufferedReader
name|reader
parameter_list|,
name|Map
name|entryAttrs
parameter_list|)
throws|throws
name|SVNException
throws|,
name|IOException
block|{
return|return
literal|false
return|;
block|}
specifier|protected
name|int
name|writeExtraOptions
parameter_list|(
name|Writer
name|writer
parameter_list|,
name|String
name|entryName
parameter_list|,
name|Map
name|entryAttrs
parameter_list|,
name|int
name|emptyFields
parameter_list|)
throws|throws
name|SVNException
throws|,
name|IOException
block|{
return|return
name|emptyFields
return|;
block|}
block|}
end_class

end_unit

