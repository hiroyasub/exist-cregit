begin_unit|revision:1.0.0;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * ====================================================================  * Copyright (c) 2004-2010 TMate Software Ltd.  All rights reserved.  *  * This software is licensed as described in the file COPYING, which  * you should have received as part of this distribution.  The terms  * are also available at http://svnkit.com/license.html.  * If newer versions of this license are posted there, you may use a  * newer version instead, at your option.  * ====================================================================  */
end_comment

begin_package
package|package
name|org
operator|.
name|exist
operator|.
name|versioning
operator|.
name|svn
operator|.
name|internal
operator|.
name|wc
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|File
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Arrays
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collection
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Iterator
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|LinkedList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|StringTokenizer
import|;
end_import

begin_import
import|import
name|org
operator|.
name|tmatesoft
operator|.
name|svn
operator|.
name|core
operator|.
name|SVNErrorCode
import|;
end_import

begin_import
import|import
name|org
operator|.
name|tmatesoft
operator|.
name|svn
operator|.
name|core
operator|.
name|SVNErrorMessage
import|;
end_import

begin_import
import|import
name|org
operator|.
name|tmatesoft
operator|.
name|svn
operator|.
name|core
operator|.
name|SVNException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|tmatesoft
operator|.
name|svn
operator|.
name|core
operator|.
name|SVNProperty
import|;
end_import

begin_import
import|import
name|org
operator|.
name|tmatesoft
operator|.
name|svn
operator|.
name|core
operator|.
name|SVNURL
import|;
end_import

begin_import
import|import
name|org
operator|.
name|tmatesoft
operator|.
name|svn
operator|.
name|core
operator|.
name|internal
operator|.
name|util
operator|.
name|SVNPathUtil
import|;
end_import

begin_import
import|import
name|org
operator|.
name|tmatesoft
operator|.
name|svn
operator|.
name|core
operator|.
name|wc
operator|.
name|SVNRevision
import|;
end_import

begin_import
import|import
name|org
operator|.
name|tmatesoft
operator|.
name|svn
operator|.
name|util
operator|.
name|SVNDebugLog
import|;
end_import

begin_import
import|import
name|org
operator|.
name|tmatesoft
operator|.
name|svn
operator|.
name|util
operator|.
name|SVNLogType
import|;
end_import

begin_comment
comment|/**  * @version 1.3  * @author  TMate Software Ltd.  */
end_comment

begin_class
specifier|public
class|class
name|SVNExternal
block|{
specifier|private
name|SVNRevision
name|myRevision
decl_stmt|;
specifier|private
name|SVNRevision
name|myPegRevision
decl_stmt|;
specifier|private
name|String
name|myURL
decl_stmt|;
specifier|private
name|String
name|myPath
decl_stmt|;
specifier|private
name|SVNURL
name|myResolvedURL
decl_stmt|;
specifier|private
name|boolean
name|myIsRevisionExplicit
decl_stmt|;
specifier|private
name|boolean
name|myIsPegRevisionExplicit
decl_stmt|;
specifier|private
name|boolean
name|myIsNewFormat
decl_stmt|;
specifier|private
name|String
name|myRawValue
decl_stmt|;
specifier|private
name|SVNExternal
parameter_list|()
block|{
name|myRevision
operator|=
name|SVNRevision
operator|.
name|UNDEFINED
expr_stmt|;
name|myPegRevision
operator|=
name|SVNRevision
operator|.
name|UNDEFINED
expr_stmt|;
block|}
specifier|public
name|SVNExternal
parameter_list|(
name|String
name|target
parameter_list|,
name|String
name|url
parameter_list|,
name|SVNRevision
name|pegRevision
parameter_list|,
name|SVNRevision
name|revision
parameter_list|,
name|boolean
name|isRevisionExplicit
parameter_list|,
name|boolean
name|isPegRevisionExplicit
parameter_list|,
name|boolean
name|isNewFormat
parameter_list|)
block|{
name|myPath
operator|=
name|target
expr_stmt|;
name|myURL
operator|=
name|url
expr_stmt|;
name|myRevision
operator|=
name|revision
expr_stmt|;
name|myPegRevision
operator|=
name|pegRevision
expr_stmt|;
name|myIsRevisionExplicit
operator|=
name|isRevisionExplicit
expr_stmt|;
name|myIsPegRevisionExplicit
operator|=
name|isPegRevisionExplicit
expr_stmt|;
name|myIsNewFormat
operator|=
name|isNewFormat
expr_stmt|;
block|}
specifier|public
name|SVNRevision
name|getRevision
parameter_list|()
block|{
return|return
name|myRevision
return|;
block|}
specifier|public
name|SVNRevision
name|getPegRevision
parameter_list|()
block|{
return|return
name|myPegRevision
return|;
block|}
specifier|public
name|String
name|getPath
parameter_list|()
block|{
return|return
name|myPath
return|;
block|}
specifier|public
name|String
name|getUnresolvedUrl
parameter_list|()
block|{
return|return
name|myURL
return|;
block|}
specifier|public
name|String
name|getRawValue
parameter_list|()
block|{
return|return
name|myRawValue
return|;
block|}
specifier|public
name|boolean
name|isRevisionExplicit
parameter_list|()
block|{
return|return
name|myIsRevisionExplicit
return|;
block|}
specifier|public
name|boolean
name|isPegRevisionExplicit
parameter_list|()
block|{
return|return
name|myIsPegRevisionExplicit
return|;
block|}
specifier|public
name|boolean
name|isNewFormat
parameter_list|()
block|{
return|return
name|myIsNewFormat
return|;
block|}
specifier|public
name|SVNURL
name|getResolvedURL
parameter_list|()
block|{
return|return
name|myResolvedURL
return|;
block|}
specifier|public
name|SVNURL
name|resolveURL
parameter_list|(
name|SVNURL
name|rootURL
parameter_list|,
name|SVNURL
name|ownerURL
parameter_list|)
throws|throws
name|SVNException
block|{
name|String
name|canonicalURL
init|=
name|SVNPathUtil
operator|.
name|canonicalizePath
argument_list|(
name|myURL
argument_list|)
decl_stmt|;
if|if
condition|(
name|SVNPathUtil
operator|.
name|isURL
argument_list|(
name|canonicalURL
argument_list|)
condition|)
block|{
name|myResolvedURL
operator|=
name|SVNURL
operator|.
name|parseURIEncoded
argument_list|(
name|canonicalURL
argument_list|)
expr_stmt|;
return|return
name|getResolvedURL
argument_list|()
return|;
block|}
if|if
condition|(
name|myURL
operator|.
name|startsWith
argument_list|(
literal|"../"
argument_list|)
operator|||
name|myURL
operator|.
name|startsWith
argument_list|(
literal|"^/"
argument_list|)
condition|)
block|{
comment|// ../ relative to the parent directory of the external
comment|// ^/     relative to the repository root
name|String
index|[]
name|base
init|=
name|myURL
operator|.
name|startsWith
argument_list|(
literal|"../"
argument_list|)
condition|?
name|ownerURL
operator|.
name|getPath
argument_list|()
operator|.
name|split
argument_list|(
literal|"/"
argument_list|)
else|:
name|rootURL
operator|.
name|getPath
argument_list|()
operator|.
name|split
argument_list|(
literal|"/"
argument_list|)
decl_stmt|;
name|LinkedList
name|baseList
init|=
operator|new
name|LinkedList
argument_list|(
name|Arrays
operator|.
name|asList
argument_list|(
name|base
argument_list|)
argument_list|)
decl_stmt|;
if|if
condition|(
name|canonicalURL
operator|.
name|startsWith
argument_list|(
literal|"^/"
argument_list|)
condition|)
block|{
name|canonicalURL
operator|=
name|canonicalURL
operator|.
name|substring
argument_list|(
literal|"^/"
operator|.
name|length
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|String
index|[]
name|relative
init|=
name|canonicalURL
operator|.
name|split
argument_list|(
literal|"/"
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|relative
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
if|if
condition|(
literal|".."
operator|.
name|equals
argument_list|(
name|relative
index|[
name|i
index|]
argument_list|)
condition|)
block|{
comment|// remove last from base.
if|if
condition|(
operator|!
name|baseList
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|baseList
operator|.
name|removeLast
argument_list|()
expr_stmt|;
block|}
block|}
else|else
block|{
name|baseList
operator|.
name|add
argument_list|(
name|relative
index|[
name|i
index|]
argument_list|)
expr_stmt|;
block|}
block|}
name|String
name|finalPath
init|=
literal|"/"
decl_stmt|;
for|for
control|(
name|Iterator
name|segments
init|=
name|baseList
operator|.
name|iterator
argument_list|()
init|;
name|segments
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|String
name|segment
init|=
operator|(
name|String
operator|)
name|segments
operator|.
name|next
argument_list|()
decl_stmt|;
name|finalPath
operator|=
name|SVNPathUtil
operator|.
name|append
argument_list|(
name|finalPath
argument_list|,
name|segment
argument_list|)
expr_stmt|;
block|}
name|myResolvedURL
operator|=
name|ownerURL
operator|.
name|setPath
argument_list|(
name|finalPath
argument_list|,
literal|true
argument_list|)
expr_stmt|;
return|return
name|getResolvedURL
argument_list|()
return|;
block|}
if|if
condition|(
name|myURL
operator|.
name|indexOf
argument_list|(
literal|"/../"
argument_list|)
operator|>=
literal|0
operator|||
name|myURL
operator|.
name|startsWith
argument_list|(
literal|"../"
argument_list|)
operator|||
name|myURL
operator|.
name|endsWith
argument_list|(
literal|"/.."
argument_list|)
condition|)
block|{
name|SVNErrorMessage
name|err
init|=
name|SVNErrorMessage
operator|.
name|create
argument_list|(
name|SVNErrorCode
operator|.
name|BAD_URL
argument_list|,
literal|"The external relative URL ''{0}'' cannot have backpaths, i.e. ''..''."
argument_list|,
name|myURL
argument_list|)
decl_stmt|;
name|SVNErrorManager
operator|.
name|error
argument_list|(
name|err
argument_list|,
name|SVNLogType
operator|.
name|DEFAULT
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|myURL
operator|.
name|startsWith
argument_list|(
literal|"//"
argument_list|)
condition|)
block|{
comment|// //     relative to the scheme
name|myResolvedURL
operator|=
name|SVNURL
operator|.
name|parseURIEncoded
argument_list|(
name|SVNPathUtil
operator|.
name|canonicalizePath
argument_list|(
name|rootURL
operator|.
name|getProtocol
argument_list|()
operator|+
literal|":"
operator|+
name|myURL
argument_list|)
argument_list|)
expr_stmt|;
return|return
name|getResolvedURL
argument_list|()
return|;
block|}
if|else if
condition|(
name|myURL
operator|.
name|startsWith
argument_list|(
literal|"/"
argument_list|)
condition|)
block|{
comment|// /      relative to the server's host
name|myResolvedURL
operator|=
name|ownerURL
operator|.
name|setPath
argument_list|(
name|myURL
argument_list|,
literal|true
argument_list|)
expr_stmt|;
return|return
name|getResolvedURL
argument_list|()
return|;
block|}
name|SVNErrorMessage
name|err
init|=
name|SVNErrorMessage
operator|.
name|create
argument_list|(
name|SVNErrorCode
operator|.
name|BAD_URL
argument_list|,
literal|"Unrecognized format for the relative external URL ''{0}''."
argument_list|,
name|myURL
argument_list|)
decl_stmt|;
name|SVNErrorManager
operator|.
name|error
argument_list|(
name|err
argument_list|,
name|SVNLogType
operator|.
name|DEFAULT
argument_list|)
expr_stmt|;
return|return
literal|null
return|;
block|}
specifier|public
name|String
name|toString
parameter_list|()
block|{
name|String
name|value
init|=
literal|""
decl_stmt|;
name|String
name|path
init|=
name|quotePath
argument_list|(
name|myPath
argument_list|)
decl_stmt|;
name|String
name|url
init|=
name|quotePath
argument_list|(
name|myURL
argument_list|)
decl_stmt|;
if|if
condition|(
name|myIsPegRevisionExplicit
operator|&&
name|SVNRevision
operator|.
name|isValidRevisionNumber
argument_list|(
name|myPegRevision
operator|.
name|getNumber
argument_list|()
argument_list|)
condition|)
block|{
if|if
condition|(
name|myIsRevisionExplicit
operator|&&
name|SVNRevision
operator|.
name|isValidRevisionNumber
argument_list|(
name|myRevision
operator|.
name|getNumber
argument_list|()
argument_list|)
condition|)
block|{
name|value
operator|+=
literal|"-r"
operator|+
name|myRevision
operator|+
literal|" "
expr_stmt|;
block|}
name|value
operator|+=
name|url
operator|+
literal|"@"
operator|+
name|myPegRevision
operator|+
literal|" "
operator|+
name|path
expr_stmt|;
block|}
else|else
block|{
if|if
condition|(
name|myIsNewFormat
condition|)
block|{
if|if
condition|(
name|myIsRevisionExplicit
operator|&&
name|SVNRevision
operator|.
name|isValidRevisionNumber
argument_list|(
name|myRevision
operator|.
name|getNumber
argument_list|()
argument_list|)
condition|)
block|{
name|value
operator|+=
literal|"-r"
operator|+
name|myRevision
operator|+
literal|" "
expr_stmt|;
block|}
name|value
operator|+=
name|url
operator|+
literal|" "
operator|+
name|path
expr_stmt|;
block|}
else|else
block|{
name|value
operator|+=
name|path
expr_stmt|;
if|if
condition|(
name|myIsRevisionExplicit
operator|&&
name|SVNRevision
operator|.
name|isValidRevisionNumber
argument_list|(
name|myRevision
operator|.
name|getNumber
argument_list|()
argument_list|)
condition|)
block|{
name|value
operator|+=
literal|" -r"
operator|+
name|myRevision
expr_stmt|;
block|}
name|value
operator|+=
literal|" "
operator|+
name|url
expr_stmt|;
block|}
block|}
return|return
name|value
return|;
block|}
specifier|public
specifier|static
name|SVNExternal
index|[]
name|parseExternals
parameter_list|(
name|String
name|owner
parameter_list|,
name|String
name|description
parameter_list|)
throws|throws
name|SVNException
block|{
name|List
name|lines
init|=
operator|new
name|ArrayList
argument_list|()
decl_stmt|;
for|for
control|(
name|StringTokenizer
name|tokenizer
init|=
operator|new
name|StringTokenizer
argument_list|(
name|description
argument_list|,
literal|"\r\n"
argument_list|)
init|;
name|tokenizer
operator|.
name|hasMoreTokens
argument_list|()
condition|;
control|)
block|{
name|lines
operator|.
name|add
argument_list|(
name|tokenizer
operator|.
name|nextToken
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|Collection
name|externals
init|=
operator|new
name|ArrayList
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|lines
operator|.
name|size
argument_list|()
condition|;
name|i
operator|++
control|)
block|{
name|String
name|line
init|=
operator|(
operator|(
name|String
operator|)
name|lines
operator|.
name|get
argument_list|(
name|i
argument_list|)
operator|)
operator|.
name|trim
argument_list|()
decl_stmt|;
if|if
condition|(
literal|""
operator|.
name|equals
argument_list|(
name|line
argument_list|)
operator|||
name|line
operator|.
name|startsWith
argument_list|(
literal|"#"
argument_list|)
condition|)
block|{
continue|continue;
block|}
name|List
name|tokens
init|=
operator|new
name|ArrayList
argument_list|()
decl_stmt|;
for|for
control|(
name|Iterator
name|tokenizer
init|=
operator|new
name|ExternalTokenizer
argument_list|(
name|line
argument_list|)
init|;
name|tokenizer
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|tokens
operator|.
name|add
argument_list|(
name|tokenizer
operator|.
name|next
argument_list|()
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|tokens
operator|.
name|size
argument_list|()
operator|<
literal|2
operator|||
name|tokens
operator|.
name|size
argument_list|()
operator|>
literal|4
condition|)
block|{
name|reportParsingError
argument_list|(
name|owner
argument_list|,
name|line
argument_list|)
expr_stmt|;
block|}
name|SVNExternal
name|external
init|=
operator|new
name|SVNExternal
argument_list|()
decl_stmt|;
name|int
name|revisionToken
init|=
name|fetchRevision
argument_list|(
name|external
argument_list|,
name|owner
argument_list|,
name|line
argument_list|,
name|tokens
argument_list|)
decl_stmt|;
name|String
name|token0
init|=
operator|(
name|String
operator|)
name|tokens
operator|.
name|get
argument_list|(
literal|0
argument_list|)
decl_stmt|;
name|String
name|token1
init|=
operator|(
name|String
operator|)
name|tokens
operator|.
name|get
argument_list|(
literal|1
argument_list|)
decl_stmt|;
name|boolean
name|token0isURL
init|=
name|SVNPathUtil
operator|.
name|isURL
argument_list|(
name|token0
argument_list|)
decl_stmt|;
name|boolean
name|token1isURL
init|=
name|SVNPathUtil
operator|.
name|isURL
argument_list|(
name|token1
argument_list|)
decl_stmt|;
if|if
condition|(
name|token0isURL
operator|&&
name|token1isURL
condition|)
block|{
name|SVNErrorMessage
name|err
init|=
name|SVNErrorMessage
operator|.
name|create
argument_list|(
name|SVNErrorCode
operator|.
name|CLIENT_INVALID_EXTERNALS_DESCRIPTION
argument_list|,
literal|"Invalid svn:external property on ''{0}'': cannot use two absolute URLs (''{1}'' and ''{2}'') in an external; "
operator|+
literal|"one must be a path where an absolute or relative URL is checked out to"
argument_list|,
operator|new
name|Object
index|[]
block|{
name|owner
block|,
name|token0
block|,
name|token1
block|}
argument_list|)
decl_stmt|;
name|SVNErrorManager
operator|.
name|error
argument_list|(
name|err
argument_list|,
name|SVNLogType
operator|.
name|WC
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|revisionToken
operator|==
literal|0
operator|&&
name|token1isURL
condition|)
block|{
name|SVNErrorMessage
name|err
init|=
name|SVNErrorMessage
operator|.
name|create
argument_list|(
name|SVNErrorCode
operator|.
name|CLIENT_INVALID_EXTERNALS_DESCRIPTION
argument_list|,
literal|"Invalid svn:external property on ''{0}'': cannot use a URL ''{1}'' as the target directory for an external definition"
argument_list|,
operator|new
name|Object
index|[]
block|{
name|owner
block|,
name|token1
block|}
argument_list|)
decl_stmt|;
name|SVNErrorManager
operator|.
name|error
argument_list|(
name|err
argument_list|,
name|SVNLogType
operator|.
name|WC
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|revisionToken
operator|==
literal|1
operator|&&
name|token0isURL
condition|)
block|{
name|SVNErrorMessage
name|err
init|=
name|SVNErrorMessage
operator|.
name|create
argument_list|(
name|SVNErrorCode
operator|.
name|CLIENT_INVALID_EXTERNALS_DESCRIPTION
argument_list|,
literal|"Invalid svn:external property on ''{0}'': cannot use a URL ''{1}'' as the target directory for an external definition"
argument_list|,
operator|new
name|Object
index|[]
block|{
name|owner
block|,
name|token0
block|}
argument_list|)
decl_stmt|;
name|SVNErrorManager
operator|.
name|error
argument_list|(
name|err
argument_list|,
name|SVNLogType
operator|.
name|WC
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|revisionToken
operator|==
literal|0
operator|||
operator|(
name|revisionToken
operator|==
operator|-
literal|1
operator|&&
operator|(
name|token0isURL
operator|||
operator|!
name|token1isURL
operator|)
operator|)
condition|)
block|{
name|external
operator|.
name|myPath
operator|=
name|token1
expr_stmt|;
name|boolean
name|schemeRelative
init|=
name|token0
operator|.
name|startsWith
argument_list|(
literal|"//"
argument_list|)
decl_stmt|;
if|if
condition|(
name|schemeRelative
condition|)
block|{
name|token0
operator|=
name|token0
operator|.
name|substring
argument_list|(
literal|2
argument_list|)
expr_stmt|;
block|}
name|SVNPath
name|path
init|=
operator|new
name|SVNPath
argument_list|(
name|token0
argument_list|,
literal|true
argument_list|)
decl_stmt|;
name|external
operator|.
name|myURL
operator|=
name|schemeRelative
condition|?
literal|"//"
operator|+
name|path
operator|.
name|getTarget
argument_list|()
else|:
name|path
operator|.
name|getTarget
argument_list|()
expr_stmt|;
name|external
operator|.
name|myPegRevision
operator|=
name|path
operator|.
name|getPegRevision
argument_list|()
expr_stmt|;
if|if
condition|(
name|external
operator|.
name|myPegRevision
operator|==
name|SVNRevision
operator|.
name|BASE
condition|)
block|{
name|external
operator|.
name|myPegRevision
operator|=
name|SVNRevision
operator|.
name|HEAD
expr_stmt|;
block|}
if|if
condition|(
name|external
operator|.
name|myPegRevision
operator|!=
name|SVNRevision
operator|.
name|UNDEFINED
condition|)
block|{
name|external
operator|.
name|myIsPegRevisionExplicit
operator|=
literal|true
expr_stmt|;
block|}
name|external
operator|.
name|myIsNewFormat
operator|=
literal|true
expr_stmt|;
block|}
else|else
block|{
name|external
operator|.
name|myPath
operator|=
name|token0
expr_stmt|;
name|external
operator|.
name|myURL
operator|=
name|token1
expr_stmt|;
name|external
operator|.
name|myPegRevision
operator|=
name|external
operator|.
name|myRevision
expr_stmt|;
block|}
if|if
condition|(
name|external
operator|.
name|myPegRevision
operator|==
name|SVNRevision
operator|.
name|UNDEFINED
condition|)
block|{
name|external
operator|.
name|myPegRevision
operator|=
name|SVNRevision
operator|.
name|HEAD
expr_stmt|;
block|}
if|if
condition|(
name|external
operator|.
name|myRevision
operator|==
name|SVNRevision
operator|.
name|UNDEFINED
condition|)
block|{
name|external
operator|.
name|myRevision
operator|=
name|external
operator|.
name|myPegRevision
expr_stmt|;
block|}
name|external
operator|.
name|myPath
operator|=
name|SVNPathUtil
operator|.
name|canonicalizePath
argument_list|(
name|external
operator|.
name|myPath
operator|.
name|replace
argument_list|(
name|File
operator|.
name|separatorChar
argument_list|,
literal|'/'
argument_list|)
argument_list|)
expr_stmt|;
if|if
condition|(
name|external
operator|.
name|myPath
operator|.
name|length
argument_list|()
operator|==
literal|0
operator|||
name|external
operator|.
name|myPath
operator|.
name|equals
argument_list|(
literal|"."
argument_list|)
operator|||
name|external
operator|.
name|myPath
operator|.
name|equals
argument_list|(
literal|".."
argument_list|)
operator|||
name|external
operator|.
name|myPath
operator|.
name|startsWith
argument_list|(
literal|"../"
argument_list|)
operator|||
name|external
operator|.
name|myPath
operator|.
name|startsWith
argument_list|(
literal|"/"
argument_list|)
operator|||
name|external
operator|.
name|myPath
operator|.
name|indexOf
argument_list|(
literal|"/../"
argument_list|)
operator|>
literal|0
operator|||
name|external
operator|.
name|myPath
operator|.
name|endsWith
argument_list|(
literal|"/.."
argument_list|)
condition|)
block|{
name|SVNErrorMessage
name|err
init|=
name|SVNErrorMessage
operator|.
name|create
argument_list|(
name|SVNErrorCode
operator|.
name|CLIENT_INVALID_EXTERNALS_DESCRIPTION
argument_list|,
literal|"Invalid {0} property on ''{1}'': target ''{2}'' is an absolute path or involves ''..''"
argument_list|,
operator|new
name|Object
index|[]
block|{
name|SVNProperty
operator|.
name|EXTERNALS
block|,
name|owner
block|,
name|external
operator|.
name|myPath
block|}
argument_list|)
decl_stmt|;
name|SVNErrorManager
operator|.
name|error
argument_list|(
name|err
argument_list|,
name|SVNLogType
operator|.
name|DEFAULT
argument_list|)
expr_stmt|;
block|}
name|external
operator|.
name|myRawValue
operator|=
name|line
expr_stmt|;
if|if
condition|(
name|external
operator|.
name|myURL
operator|!=
literal|null
operator|&&
name|SVNPathUtil
operator|.
name|isURL
argument_list|(
name|external
operator|.
name|myURL
argument_list|)
condition|)
block|{
name|SVNURL
operator|.
name|parseURIEncoded
argument_list|(
name|external
operator|.
name|myURL
argument_list|)
expr_stmt|;
block|}
name|externals
operator|.
name|add
argument_list|(
name|external
argument_list|)
expr_stmt|;
block|}
return|return
operator|(
name|SVNExternal
index|[]
operator|)
name|externals
operator|.
name|toArray
argument_list|(
operator|new
name|SVNExternal
index|[
name|externals
operator|.
name|size
argument_list|()
index|]
argument_list|)
return|;
block|}
specifier|private
specifier|static
name|String
name|quotePath
parameter_list|(
name|String
name|path
parameter_list|)
block|{
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|path
operator|.
name|length
argument_list|()
condition|;
name|i
operator|++
control|)
block|{
if|if
condition|(
name|Character
operator|.
name|isWhitespace
argument_list|(
name|path
operator|.
name|charAt
argument_list|(
name|i
argument_list|)
argument_list|)
condition|)
block|{
return|return
literal|"\""
operator|+
name|path
operator|+
literal|"\""
return|;
block|}
block|}
return|return
name|path
return|;
block|}
specifier|private
specifier|static
name|int
name|fetchRevision
parameter_list|(
name|SVNExternal
name|external
parameter_list|,
name|String
name|owner
parameter_list|,
name|String
name|line
parameter_list|,
name|List
name|tokens
parameter_list|)
throws|throws
name|SVNException
block|{
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|tokens
operator|.
name|size
argument_list|()
operator|&&
name|i
operator|<
literal|2
condition|;
name|i
operator|++
control|)
block|{
name|String
name|token
init|=
operator|(
name|String
operator|)
name|tokens
operator|.
name|get
argument_list|(
name|i
argument_list|)
decl_stmt|;
name|String
name|revisionStr
init|=
literal|null
decl_stmt|;
if|if
condition|(
name|token
operator|.
name|length
argument_list|()
operator|>=
literal|2
operator|&&
name|token
operator|.
name|charAt
argument_list|(
literal|0
argument_list|)
operator|==
literal|'-'
operator|&&
name|token
operator|.
name|charAt
argument_list|(
literal|1
argument_list|)
operator|==
literal|'r'
condition|)
block|{
if|if
condition|(
name|token
operator|.
name|length
argument_list|()
operator|==
literal|2
operator|&&
name|tokens
operator|.
name|size
argument_list|()
operator|==
literal|4
condition|)
block|{
name|revisionStr
operator|=
operator|(
name|String
operator|)
name|tokens
operator|.
name|get
argument_list|(
name|i
operator|+
literal|1
argument_list|)
expr_stmt|;
comment|// remove separate '-r' token.
name|tokens
operator|.
name|remove
argument_list|(
name|i
argument_list|)
expr_stmt|;
block|}
if|else if
condition|(
name|tokens
operator|.
name|size
argument_list|()
operator|==
literal|3
condition|)
block|{
name|revisionStr
operator|=
name|token
operator|.
name|substring
argument_list|(
literal|2
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|revisionStr
operator|==
literal|null
operator|||
literal|""
operator|.
name|equals
argument_list|(
name|revisionStr
argument_list|)
condition|)
block|{
name|reportParsingError
argument_list|(
name|owner
argument_list|,
name|line
argument_list|)
expr_stmt|;
block|}
name|long
name|revNumber
init|=
operator|-
literal|1
decl_stmt|;
try|try
block|{
name|revNumber
operator|=
name|Long
operator|.
name|parseLong
argument_list|(
name|revisionStr
argument_list|)
expr_stmt|;
if|if
condition|(
name|revNumber
operator|<
literal|0
condition|)
block|{
name|SVNDebugLog
operator|.
name|getDefaultLog
argument_list|()
operator|.
name|logFine
argument_list|(
name|SVNLogType
operator|.
name|DEFAULT
argument_list|,
literal|"Negative revision number found parsing '"
operator|+
name|revisionStr
operator|+
literal|"'"
argument_list|)
expr_stmt|;
name|reportParsingError
argument_list|(
name|owner
argument_list|,
name|line
argument_list|)
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
name|NumberFormatException
name|nfe
parameter_list|)
block|{
name|SVNDebugLog
operator|.
name|getDefaultLog
argument_list|()
operator|.
name|logFine
argument_list|(
name|SVNLogType
operator|.
name|DEFAULT
argument_list|,
literal|"Invalid revision number found parsing '"
operator|+
name|revisionStr
operator|+
literal|"'"
argument_list|)
expr_stmt|;
name|reportParsingError
argument_list|(
name|owner
argument_list|,
name|line
argument_list|)
expr_stmt|;
block|}
name|external
operator|.
name|myRevision
operator|=
name|SVNRevision
operator|.
name|create
argument_list|(
name|revNumber
argument_list|)
expr_stmt|;
name|external
operator|.
name|myIsRevisionExplicit
operator|=
literal|true
expr_stmt|;
name|tokens
operator|.
name|remove
argument_list|(
name|i
argument_list|)
expr_stmt|;
return|return
name|i
return|;
block|}
block|}
if|if
condition|(
name|tokens
operator|.
name|size
argument_list|()
operator|==
literal|2
condition|)
block|{
return|return
operator|-
literal|1
return|;
block|}
name|reportParsingError
argument_list|(
name|owner
argument_list|,
name|line
argument_list|)
expr_stmt|;
return|return
operator|-
literal|1
return|;
block|}
specifier|private
specifier|static
name|void
name|reportParsingError
parameter_list|(
name|String
name|owner
parameter_list|,
name|String
name|line
parameter_list|)
throws|throws
name|SVNException
block|{
name|SVNErrorMessage
name|err
init|=
name|SVNErrorMessage
operator|.
name|create
argument_list|(
name|SVNErrorCode
operator|.
name|CLIENT_INVALID_EXTERNALS_DESCRIPTION
argument_list|,
literal|"Error parsing {0} property on ''{1}'': ''{2}''"
argument_list|,
operator|new
name|Object
index|[]
block|{
name|SVNProperty
operator|.
name|EXTERNALS
block|,
name|owner
block|,
name|line
block|}
argument_list|)
decl_stmt|;
name|SVNErrorManager
operator|.
name|error
argument_list|(
name|err
argument_list|,
name|SVNLogType
operator|.
name|DEFAULT
argument_list|)
expr_stmt|;
block|}
specifier|private
specifier|static
class|class
name|ExternalTokenizer
implements|implements
name|Iterator
block|{
specifier|private
name|String
name|myNextToken
decl_stmt|;
specifier|private
name|String
name|myLine
decl_stmt|;
specifier|public
name|ExternalTokenizer
parameter_list|(
name|String
name|line
parameter_list|)
block|{
name|myLine
operator|=
name|line
expr_stmt|;
name|myNextToken
operator|=
name|advance
argument_list|()
expr_stmt|;
block|}
specifier|public
name|boolean
name|hasNext
parameter_list|()
block|{
return|return
name|myNextToken
operator|!=
literal|null
return|;
block|}
specifier|public
name|Object
name|next
parameter_list|()
block|{
name|String
name|next
init|=
name|myNextToken
decl_stmt|;
name|myNextToken
operator|=
name|advance
argument_list|()
expr_stmt|;
return|return
name|next
return|;
block|}
specifier|public
name|void
name|remove
parameter_list|()
block|{
throw|throw
operator|new
name|UnsupportedOperationException
argument_list|()
throw|;
block|}
specifier|private
name|String
name|advance
parameter_list|()
block|{
while|while
condition|(
name|myLine
operator|.
name|length
argument_list|()
operator|>
literal|0
operator|&&
name|Character
operator|.
name|isWhitespace
argument_list|(
name|myLine
operator|.
name|charAt
argument_list|(
literal|0
argument_list|)
argument_list|)
condition|)
block|{
name|myLine
operator|=
name|myLine
operator|.
name|substring
argument_list|(
literal|1
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|myLine
operator|.
name|length
argument_list|()
operator|==
literal|0
condition|)
block|{
return|return
literal|null
return|;
block|}
name|char
name|ch
init|=
name|myLine
operator|.
name|charAt
argument_list|(
literal|0
argument_list|)
decl_stmt|;
name|int
name|quouteType
init|=
name|ch
operator|==
literal|'\''
condition|?
literal|1
else|:
operator|(
name|ch
operator|==
literal|'\"'
condition|?
literal|2
else|:
literal|0
operator|)
decl_stmt|;
if|if
condition|(
name|quouteType
operator|!=
literal|0
condition|)
block|{
name|myLine
operator|=
name|myLine
operator|.
name|substring
argument_list|(
literal|1
argument_list|)
expr_stmt|;
block|}
name|int
name|index
init|=
literal|0
decl_stmt|;
name|StringBuffer
name|result
init|=
operator|new
name|StringBuffer
argument_list|()
decl_stmt|;
while|while
condition|(
name|index
operator|<
name|myLine
operator|.
name|length
argument_list|()
condition|)
block|{
name|ch
operator|=
name|myLine
operator|.
name|charAt
argument_list|(
name|index
argument_list|)
expr_stmt|;
if|if
condition|(
name|quouteType
operator|==
literal|0
condition|)
block|{
if|if
condition|(
name|Character
operator|.
name|isWhitespace
argument_list|(
name|ch
argument_list|)
condition|)
block|{
break|break;
block|}
block|}
if|else if
condition|(
name|quouteType
operator|==
literal|1
condition|)
block|{
if|if
condition|(
name|ch
operator|==
literal|'\''
condition|)
block|{
break|break;
block|}
block|}
if|else if
condition|(
name|quouteType
operator|==
literal|2
condition|)
block|{
if|if
condition|(
name|ch
operator|==
literal|'\"'
condition|)
block|{
break|break;
block|}
block|}
if|if
condition|(
name|ch
operator|==
literal|'\\'
condition|)
block|{
comment|// append qouted character, so far whitespace only
if|if
condition|(
name|index
operator|+
literal|1
operator|<
name|myLine
operator|.
name|length
argument_list|()
condition|)
block|{
name|char
name|escaped
init|=
name|myLine
operator|.
name|charAt
argument_list|(
name|index
operator|+
literal|1
argument_list|)
decl_stmt|;
if|if
condition|(
name|escaped
operator|==
literal|' '
operator|||
name|escaped
operator|==
literal|'\''
operator|||
name|escaped
operator|==
literal|'\"'
condition|)
block|{
comment|// append escaped char instead of backslash
name|result
operator|.
name|append
argument_list|(
name|escaped
argument_list|)
expr_stmt|;
name|index
operator|++
expr_stmt|;
name|index
operator|++
expr_stmt|;
continue|continue;
block|}
block|}
block|}
name|result
operator|.
name|append
argument_list|(
name|ch
argument_list|)
expr_stmt|;
name|index
operator|++
expr_stmt|;
block|}
if|if
condition|(
name|index
operator|+
literal|1
operator|<
name|myLine
operator|.
name|length
argument_list|()
condition|)
block|{
name|myLine
operator|=
name|myLine
operator|.
name|substring
argument_list|(
name|index
operator|+
literal|1
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|myLine
operator|=
literal|""
expr_stmt|;
block|}
return|return
name|result
operator|.
name|toString
argument_list|()
return|;
block|}
block|}
block|}
end_class

end_unit

