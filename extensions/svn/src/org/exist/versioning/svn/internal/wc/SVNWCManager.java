begin_unit|revision:1.0.0;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * ====================================================================  * Copyright (c) 2004-2010 TMate Software Ltd.  All rights reserved.  *  * This software is licensed as described in the file COPYING, which  * you should have received as part of this distribution.  The terms  * are also available at http://svnkit.com/license.html  * If newer versions of this license are posted there, you may use a  * newer version instead, at your option.  * ====================================================================  */
end_comment

begin_package
package|package
name|org
operator|.
name|exist
operator|.
name|versioning
operator|.
name|svn
operator|.
name|internal
operator|.
name|wc
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|File
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collection
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collections
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Iterator
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|versioning
operator|.
name|svn
operator|.
name|Resource
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|versioning
operator|.
name|svn
operator|.
name|internal
operator|.
name|wc
operator|.
name|admin
operator|.
name|SVNAdminArea
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|versioning
operator|.
name|svn
operator|.
name|internal
operator|.
name|wc
operator|.
name|admin
operator|.
name|SVNAdminAreaFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|versioning
operator|.
name|svn
operator|.
name|internal
operator|.
name|wc
operator|.
name|admin
operator|.
name|SVNAdminAreaInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|versioning
operator|.
name|svn
operator|.
name|internal
operator|.
name|wc
operator|.
name|admin
operator|.
name|SVNEntry
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|versioning
operator|.
name|svn
operator|.
name|internal
operator|.
name|wc
operator|.
name|admin
operator|.
name|SVNLog
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|versioning
operator|.
name|svn
operator|.
name|internal
operator|.
name|wc
operator|.
name|admin
operator|.
name|SVNVersionedProperties
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|versioning
operator|.
name|svn
operator|.
name|internal
operator|.
name|wc
operator|.
name|admin
operator|.
name|SVNWCAccess
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|versioning
operator|.
name|svn
operator|.
name|wc
operator|.
name|ISVNEventHandler
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|versioning
operator|.
name|svn
operator|.
name|wc
operator|.
name|ISVNOptions
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|versioning
operator|.
name|svn
operator|.
name|wc
operator|.
name|ISVNStatusHandler
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|versioning
operator|.
name|svn
operator|.
name|wc
operator|.
name|SVNEvent
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|versioning
operator|.
name|svn
operator|.
name|wc
operator|.
name|SVNEventAction
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|versioning
operator|.
name|svn
operator|.
name|wc
operator|.
name|SVNStatus
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|versioning
operator|.
name|svn
operator|.
name|wc
operator|.
name|SVNStatusClient
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|versioning
operator|.
name|svn
operator|.
name|wc
operator|.
name|SVNStatusType
import|;
end_import

begin_import
import|import
name|org
operator|.
name|tmatesoft
operator|.
name|svn
operator|.
name|core
operator|.
name|SVNCancelException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|tmatesoft
operator|.
name|svn
operator|.
name|core
operator|.
name|SVNDepth
import|;
end_import

begin_import
import|import
name|org
operator|.
name|tmatesoft
operator|.
name|svn
operator|.
name|core
operator|.
name|SVNErrorCode
import|;
end_import

begin_import
import|import
name|org
operator|.
name|tmatesoft
operator|.
name|svn
operator|.
name|core
operator|.
name|SVNErrorMessage
import|;
end_import

begin_import
import|import
name|org
operator|.
name|tmatesoft
operator|.
name|svn
operator|.
name|core
operator|.
name|SVNException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|tmatesoft
operator|.
name|svn
operator|.
name|core
operator|.
name|SVNNodeKind
import|;
end_import

begin_import
import|import
name|org
operator|.
name|tmatesoft
operator|.
name|svn
operator|.
name|core
operator|.
name|SVNProperties
import|;
end_import

begin_import
import|import
name|org
operator|.
name|tmatesoft
operator|.
name|svn
operator|.
name|core
operator|.
name|SVNProperty
import|;
end_import

begin_import
import|import
name|org
operator|.
name|tmatesoft
operator|.
name|svn
operator|.
name|core
operator|.
name|SVNPropertyValue
import|;
end_import

begin_import
import|import
name|org
operator|.
name|tmatesoft
operator|.
name|svn
operator|.
name|core
operator|.
name|SVNURL
import|;
end_import

begin_import
import|import
name|org
operator|.
name|tmatesoft
operator|.
name|svn
operator|.
name|core
operator|.
name|auth
operator|.
name|ISVNAuthenticationManager
import|;
end_import

begin_import
import|import
name|org
operator|.
name|tmatesoft
operator|.
name|svn
operator|.
name|core
operator|.
name|internal
operator|.
name|util
operator|.
name|SVNEncodingUtil
import|;
end_import

begin_import
import|import
name|org
operator|.
name|tmatesoft
operator|.
name|svn
operator|.
name|core
operator|.
name|internal
operator|.
name|util
operator|.
name|SVNHashMap
import|;
end_import

begin_import
import|import
name|org
operator|.
name|tmatesoft
operator|.
name|svn
operator|.
name|core
operator|.
name|internal
operator|.
name|util
operator|.
name|SVNHashSet
import|;
end_import

begin_import
import|import
name|org
operator|.
name|tmatesoft
operator|.
name|svn
operator|.
name|core
operator|.
name|internal
operator|.
name|util
operator|.
name|SVNPathUtil
import|;
end_import

begin_import
import|import
name|org
operator|.
name|tmatesoft
operator|.
name|svn
operator|.
name|core
operator|.
name|io
operator|.
name|SVNRepository
import|;
end_import

begin_import
import|import
name|org
operator|.
name|tmatesoft
operator|.
name|svn
operator|.
name|core
operator|.
name|wc
operator|.
name|SVNRevision
import|;
end_import

begin_import
import|import
name|org
operator|.
name|tmatesoft
operator|.
name|svn
operator|.
name|util
operator|.
name|SVNLogType
import|;
end_import

begin_comment
comment|/**  * @author TMate Software Ltd.  * @version 1.3  */
end_comment

begin_class
specifier|public
class|class
name|SVNWCManager
block|{
specifier|public
specifier|static
name|void
name|add
parameter_list|(
name|File
name|path
parameter_list|,
name|SVNAdminArea
name|parentDir
parameter_list|,
name|SVNURL
name|copyFromURL
parameter_list|,
name|SVNRevision
name|copyFromRev
parameter_list|,
name|SVNDepth
name|depth
parameter_list|)
throws|throws
name|SVNException
block|{
name|add
argument_list|(
name|path
argument_list|,
name|parentDir
argument_list|,
name|copyFromURL
argument_list|,
name|copyFromRev
operator|.
name|getNumber
argument_list|()
argument_list|,
name|depth
argument_list|)
expr_stmt|;
block|}
specifier|public
specifier|static
name|void
name|add
parameter_list|(
name|File
name|path
parameter_list|,
name|SVNAdminArea
name|parentDir
parameter_list|,
name|SVNURL
name|copyFromURL
parameter_list|,
name|long
name|copyFromRev
parameter_list|,
name|SVNDepth
name|depth
parameter_list|)
throws|throws
name|SVNException
block|{
name|SVNWCAccess
name|wcAccess
init|=
name|parentDir
operator|.
name|getWCAccess
argument_list|()
decl_stmt|;
name|SVNFileType
name|fileType
init|=
name|SVNFileType
operator|.
name|getType
argument_list|(
name|path
argument_list|)
decl_stmt|;
if|if
condition|(
name|fileType
operator|==
name|SVNFileType
operator|.
name|NONE
condition|)
block|{
name|SVNErrorMessage
name|err
init|=
name|SVNErrorMessage
operator|.
name|create
argument_list|(
name|SVNErrorCode
operator|.
name|WC_PATH_NOT_FOUND
argument_list|,
literal|"''{0}'' not found"
argument_list|,
name|path
argument_list|)
decl_stmt|;
name|SVNErrorManager
operator|.
name|error
argument_list|(
name|err
argument_list|,
name|SVNLogType
operator|.
name|WC
argument_list|)
expr_stmt|;
block|}
if|else if
condition|(
name|fileType
operator|==
name|SVNFileType
operator|.
name|UNKNOWN
condition|)
block|{
name|SVNErrorMessage
name|err
init|=
name|SVNErrorMessage
operator|.
name|create
argument_list|(
name|SVNErrorCode
operator|.
name|WC_PATH_NOT_FOUND
argument_list|,
literal|"Unsupported node kind for path ''{0}''"
argument_list|,
name|path
argument_list|)
decl_stmt|;
name|SVNErrorManager
operator|.
name|error
argument_list|(
name|err
argument_list|,
name|SVNLogType
operator|.
name|WC
argument_list|)
expr_stmt|;
block|}
name|SVNAdminArea
name|dir
decl_stmt|;
if|if
condition|(
name|fileType
operator|==
name|SVNFileType
operator|.
name|SYMLINK
condition|)
block|{
name|dir
operator|=
name|wcAccess
operator|.
name|probeTry
argument_list|(
name|path
operator|.
name|getParentFile
argument_list|()
argument_list|,
literal|true
argument_list|,
name|copyFromURL
operator|!=
literal|null
condition|?
name|SVNWCAccess
operator|.
name|INFINITE_DEPTH
else|:
literal|0
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|dir
operator|=
name|wcAccess
operator|.
name|probeTry
argument_list|(
name|path
argument_list|,
literal|true
argument_list|,
name|copyFromURL
operator|!=
literal|null
condition|?
name|SVNWCAccess
operator|.
name|INFINITE_DEPTH
else|:
literal|0
argument_list|)
expr_stmt|;
block|}
name|SVNEntry
name|entry
init|=
literal|null
decl_stmt|;
if|if
condition|(
name|dir
operator|!=
literal|null
condition|)
block|{
name|entry
operator|=
name|wcAccess
operator|.
name|getEntry
argument_list|(
name|path
argument_list|,
literal|true
argument_list|)
expr_stmt|;
block|}
name|boolean
name|replace
init|=
literal|false
decl_stmt|;
name|SVNNodeKind
name|kind
init|=
name|SVNFileType
operator|.
name|getNodeKind
argument_list|(
name|fileType
argument_list|)
decl_stmt|;
if|if
condition|(
name|entry
operator|!=
literal|null
condition|)
block|{
if|if
condition|(
operator|(
name|copyFromURL
operator|==
literal|null
operator|&&
operator|!
name|entry
operator|.
name|isScheduledForDeletion
argument_list|()
operator|&&
operator|!
name|entry
operator|.
name|isDeleted
argument_list|()
operator|)
operator|||
name|entry
operator|.
name|getDepth
argument_list|()
operator|==
name|SVNDepth
operator|.
name|EXCLUDE
condition|)
block|{
name|SVNErrorMessage
name|err
init|=
name|SVNErrorMessage
operator|.
name|create
argument_list|(
name|SVNErrorCode
operator|.
name|ENTRY_EXISTS
argument_list|,
literal|"''{0}'' is already under version control"
argument_list|,
name|path
argument_list|)
decl_stmt|;
name|SVNErrorManager
operator|.
name|error
argument_list|(
name|err
argument_list|,
name|SVNLogType
operator|.
name|WC
argument_list|)
expr_stmt|;
block|}
if|else if
condition|(
name|entry
operator|.
name|getKind
argument_list|()
operator|!=
name|kind
condition|)
block|{
name|SVNErrorMessage
name|err
init|=
name|SVNErrorMessage
operator|.
name|create
argument_list|(
name|SVNErrorCode
operator|.
name|WC_NODE_KIND_CHANGE
argument_list|,
literal|"Can''t replace ''{0}'' with a node of a different type; the deletion must be committed and the parent updated before adding ''{0}''"
argument_list|,
name|path
argument_list|)
decl_stmt|;
name|SVNErrorManager
operator|.
name|error
argument_list|(
name|err
argument_list|,
name|SVNLogType
operator|.
name|WC
argument_list|)
expr_stmt|;
block|}
name|replace
operator|=
name|entry
operator|.
name|isScheduledForDeletion
argument_list|()
expr_stmt|;
block|}
name|SVNEntry
name|parentEntry
init|=
name|wcAccess
operator|.
name|getEntry
argument_list|(
name|path
operator|.
name|getParentFile
argument_list|()
argument_list|,
literal|false
argument_list|)
decl_stmt|;
if|if
condition|(
name|parentEntry
operator|==
literal|null
condition|)
block|{
name|SVNErrorMessage
name|err
init|=
name|SVNErrorMessage
operator|.
name|create
argument_list|(
name|SVNErrorCode
operator|.
name|ENTRY_NOT_FOUND
argument_list|,
literal|"Can''t find parent directory''s entry while trying to add ''{0}''"
argument_list|,
name|path
argument_list|)
decl_stmt|;
name|SVNErrorManager
operator|.
name|error
argument_list|(
name|err
argument_list|,
name|SVNLogType
operator|.
name|WC
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|parentEntry
operator|.
name|isScheduledForDeletion
argument_list|()
condition|)
block|{
name|SVNErrorMessage
name|err
init|=
name|SVNErrorMessage
operator|.
name|create
argument_list|(
name|SVNErrorCode
operator|.
name|WC_SCHEDULE_CONFLICT
argument_list|,
literal|"Can''t add ''{0}'' to a parent directory scheduled for deletion"
argument_list|,
name|path
argument_list|)
decl_stmt|;
name|SVNErrorManager
operator|.
name|error
argument_list|(
name|err
argument_list|,
name|SVNLogType
operator|.
name|WC
argument_list|)
expr_stmt|;
block|}
name|Map
name|command
init|=
operator|new
name|SVNHashMap
argument_list|()
decl_stmt|;
name|String
name|name
init|=
name|path
operator|.
name|getName
argument_list|()
decl_stmt|;
if|if
condition|(
name|copyFromURL
operator|!=
literal|null
condition|)
block|{
if|if
condition|(
name|parentEntry
operator|.
name|getRepositoryRoot
argument_list|()
operator|!=
literal|null
operator|&&
operator|!
name|SVNPathUtil
operator|.
name|isAncestor
argument_list|(
name|parentEntry
operator|.
name|getRepositoryRoot
argument_list|()
argument_list|,
name|copyFromURL
operator|.
name|toString
argument_list|()
argument_list|)
condition|)
block|{
name|SVNErrorMessage
name|err
init|=
name|SVNErrorMessage
operator|.
name|create
argument_list|(
name|SVNErrorCode
operator|.
name|UNSUPPORTED_FEATURE
argument_list|,
literal|"The URL ''{0}'' has a different repository root than its parent"
argument_list|,
name|copyFromURL
argument_list|)
decl_stmt|;
name|SVNErrorManager
operator|.
name|error
argument_list|(
name|err
argument_list|,
name|SVNLogType
operator|.
name|WC
argument_list|)
expr_stmt|;
block|}
name|command
operator|.
name|put
argument_list|(
name|SVNProperty
operator|.
name|COPYFROM_URL
argument_list|,
name|copyFromURL
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|command
operator|.
name|put
argument_list|(
name|SVNProperty
operator|.
name|COPYFROM_REVISION
argument_list|,
name|SVNProperty
operator|.
name|toString
argument_list|(
name|copyFromRev
argument_list|)
argument_list|)
expr_stmt|;
name|command
operator|.
name|put
argument_list|(
name|SVNProperty
operator|.
name|COPIED
argument_list|,
name|Boolean
operator|.
name|TRUE
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|replace
condition|)
block|{
name|command
operator|.
name|put
argument_list|(
name|SVNProperty
operator|.
name|CHECKSUM
argument_list|,
literal|null
argument_list|)
expr_stmt|;
name|command
operator|.
name|put
argument_list|(
name|SVNProperty
operator|.
name|HAS_PROPS
argument_list|,
name|Boolean
operator|.
name|FALSE
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|command
operator|.
name|put
argument_list|(
name|SVNProperty
operator|.
name|HAS_PROP_MODS
argument_list|,
name|Boolean
operator|.
name|FALSE
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|command
operator|.
name|put
argument_list|(
name|SVNProperty
operator|.
name|SCHEDULE
argument_list|,
name|SVNProperty
operator|.
name|SCHEDULE_ADD
argument_list|)
expr_stmt|;
name|command
operator|.
name|put
argument_list|(
name|SVNProperty
operator|.
name|KIND
argument_list|,
name|SVNFileType
operator|.
name|getNodeKind
argument_list|(
name|fileType
argument_list|)
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
operator|(
name|replace
operator|||
name|copyFromURL
operator|!=
literal|null
operator|)
condition|)
block|{
name|command
operator|.
name|put
argument_list|(
name|SVNProperty
operator|.
name|REVISION
argument_list|,
literal|"0"
argument_list|)
expr_stmt|;
block|}
name|parentDir
operator|.
name|modifyEntry
argument_list|(
name|name
argument_list|,
name|command
argument_list|,
literal|true
argument_list|,
literal|false
argument_list|)
expr_stmt|;
if|if
condition|(
name|entry
operator|!=
literal|null
operator|&&
name|copyFromURL
operator|==
literal|null
condition|)
block|{
name|String
name|propPath
init|=
name|SVNAdminUtil
operator|.
name|getPropPath
argument_list|(
name|name
argument_list|,
name|entry
operator|.
name|getKind
argument_list|()
argument_list|,
literal|false
argument_list|)
decl_stmt|;
name|File
name|propFile
init|=
name|dir
operator|.
name|getFile
argument_list|(
name|propPath
argument_list|)
decl_stmt|;
name|SVNFileUtil
operator|.
name|deleteFile
argument_list|(
name|propFile
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|replace
condition|)
block|{
name|SVNProperties
name|props
init|=
operator|new
name|SVNProperties
argument_list|()
decl_stmt|;
if|if
condition|(
name|entry
operator|.
name|getKind
argument_list|()
operator|==
name|SVNNodeKind
operator|.
name|FILE
condition|)
block|{
name|SVNLog
name|log
init|=
name|parentDir
operator|.
name|getLog
argument_list|()
decl_stmt|;
name|props
operator|.
name|put
argument_list|(
name|SVNLog
operator|.
name|NAME_ATTR
argument_list|,
name|SVNAdminUtil
operator|.
name|getTextBasePath
argument_list|(
name|entry
operator|.
name|getName
argument_list|()
argument_list|,
literal|false
argument_list|)
argument_list|)
expr_stmt|;
name|props
operator|.
name|put
argument_list|(
name|SVNLog
operator|.
name|DEST_ATTR
argument_list|,
name|SVNAdminUtil
operator|.
name|getTextRevertPath
argument_list|(
name|entry
operator|.
name|getName
argument_list|()
argument_list|,
literal|false
argument_list|)
argument_list|)
expr_stmt|;
name|log
operator|.
name|addCommand
argument_list|(
name|SVNLog
operator|.
name|MOVE
argument_list|,
name|props
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|log
operator|.
name|save
argument_list|()
expr_stmt|;
name|parentDir
operator|.
name|runLogs
argument_list|()
expr_stmt|;
block|}
name|createRevertProperties
argument_list|(
name|wcAccess
argument_list|,
name|path
argument_list|,
literal|true
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|kind
operator|==
name|SVNNodeKind
operator|.
name|DIR
condition|)
block|{
if|if
condition|(
name|copyFromURL
operator|==
literal|null
condition|)
block|{
name|SVNEntry
name|pEntry
init|=
name|wcAccess
operator|.
name|getEntry
argument_list|(
name|path
operator|.
name|getParentFile
argument_list|()
argument_list|,
literal|false
argument_list|)
decl_stmt|;
name|SVNURL
name|newURL
init|=
name|pEntry
operator|.
name|getSVNURL
argument_list|()
operator|.
name|appendPath
argument_list|(
name|name
argument_list|,
literal|false
argument_list|)
decl_stmt|;
name|SVNURL
name|rootURL
init|=
name|pEntry
operator|.
name|getRepositoryRootURL
argument_list|()
decl_stmt|;
name|String
name|uuid
init|=
name|pEntry
operator|.
name|getUUID
argument_list|()
decl_stmt|;
name|ensureAdminAreaExists
argument_list|(
name|path
argument_list|,
name|newURL
operator|.
name|toString
argument_list|()
argument_list|,
name|rootURL
operator|!=
literal|null
condition|?
name|rootURL
operator|.
name|toString
argument_list|()
else|:
literal|null
argument_list|,
name|uuid
argument_list|,
literal|0
argument_list|,
name|depth
operator|==
literal|null
condition|?
name|SVNDepth
operator|.
name|INFINITY
else|:
name|depth
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|SVNURL
name|rootURL
init|=
name|parentEntry
operator|.
name|getRepositoryRootURL
argument_list|()
decl_stmt|;
name|ensureAdminAreaExists
argument_list|(
name|path
argument_list|,
name|copyFromURL
operator|.
name|toString
argument_list|()
argument_list|,
name|rootURL
operator|!=
literal|null
condition|?
name|rootURL
operator|.
name|toString
argument_list|()
else|:
literal|null
argument_list|,
name|parentEntry
operator|.
name|getUUID
argument_list|()
argument_list|,
name|copyFromRev
argument_list|,
name|depth
operator|==
literal|null
condition|?
name|SVNDepth
operator|.
name|INFINITY
else|:
name|depth
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|entry
operator|==
literal|null
operator|||
name|entry
operator|.
name|isDeleted
argument_list|()
condition|)
block|{
name|dir
operator|=
name|wcAccess
operator|.
name|open
argument_list|(
name|path
argument_list|,
literal|true
argument_list|,
name|copyFromURL
operator|!=
literal|null
condition|?
name|SVNWCAccess
operator|.
name|INFINITE_DEPTH
else|:
literal|0
argument_list|)
expr_stmt|;
block|}
name|command
operator|.
name|put
argument_list|(
name|SVNProperty
operator|.
name|INCOMPLETE
argument_list|,
literal|null
argument_list|)
expr_stmt|;
name|command
operator|.
name|put
argument_list|(
name|SVNProperty
operator|.
name|SCHEDULE
argument_list|,
name|replace
condition|?
name|SVNProperty
operator|.
name|SCHEDULE_REPLACE
else|:
name|SVNProperty
operator|.
name|SCHEDULE_ADD
argument_list|)
expr_stmt|;
name|dir
operator|.
name|modifyEntry
argument_list|(
name|dir
operator|.
name|getThisDirName
argument_list|()
argument_list|,
name|command
argument_list|,
literal|true
argument_list|,
literal|true
argument_list|)
expr_stmt|;
if|if
condition|(
name|copyFromURL
operator|!=
literal|null
condition|)
block|{
name|SVNURL
name|newURL
init|=
name|parentEntry
operator|.
name|getSVNURL
argument_list|()
operator|.
name|appendPath
argument_list|(
name|name
argument_list|,
literal|false
argument_list|)
decl_stmt|;
name|updateCleanup
argument_list|(
name|path
argument_list|,
name|wcAccess
argument_list|,
name|newURL
operator|.
name|toString
argument_list|()
argument_list|,
name|parentEntry
operator|.
name|getRepositoryRoot
argument_list|()
argument_list|,
operator|-
literal|1
argument_list|,
literal|false
argument_list|,
literal|null
argument_list|,
name|SVNDepth
operator|.
name|INFINITY
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|markTree
argument_list|(
name|dir
argument_list|,
literal|null
argument_list|,
literal|true
argument_list|,
literal|false
argument_list|,
name|COPIED
operator||
name|KEEP_LOCAL
argument_list|)
expr_stmt|;
name|SVNPropertiesManager
operator|.
name|deleteWCProperties
argument_list|(
name|dir
argument_list|,
literal|null
argument_list|,
literal|true
argument_list|)
expr_stmt|;
block|}
block|}
name|SVNEvent
name|event
init|=
name|SVNEventFactory
operator|.
name|createSVNEvent
argument_list|(
name|parentDir
operator|.
name|getFile
argument_list|(
name|name
argument_list|)
argument_list|,
name|kind
argument_list|,
literal|null
argument_list|,
literal|0
argument_list|,
name|SVNEventAction
operator|.
name|ADD
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|)
decl_stmt|;
name|parentDir
operator|.
name|getWCAccess
argument_list|()
operator|.
name|handleEvent
argument_list|(
name|event
argument_list|)
expr_stmt|;
block|}
specifier|public
specifier|static
specifier|final
name|int
name|SCHEDULE
init|=
literal|1
decl_stmt|;
specifier|public
specifier|static
specifier|final
name|int
name|COPIED
init|=
literal|2
decl_stmt|;
specifier|public
specifier|static
specifier|final
name|int
name|KEEP_LOCAL
init|=
literal|4
decl_stmt|;
comment|// this method is not applicable for "this dir" entry, use markTree() for that case
specifier|public
specifier|static
name|void
name|markEntry
parameter_list|(
name|SVNAdminArea
name|dir
parameter_list|,
name|SVNEntry
name|entry
parameter_list|,
name|String
name|schedule
parameter_list|,
name|boolean
name|copied
parameter_list|,
name|boolean
name|keepLocal
parameter_list|,
name|int
name|flags
parameter_list|)
throws|throws
name|SVNException
block|{
if|if
condition|(
name|dir
operator|.
name|getThisDirName
argument_list|()
operator|.
name|equals
argument_list|(
name|entry
operator|.
name|getName
argument_list|()
argument_list|)
condition|)
block|{
return|return;
block|}
name|Map
name|attributes
init|=
operator|new
name|SVNHashMap
argument_list|()
decl_stmt|;
name|File
name|path
init|=
name|dir
operator|.
name|getFile
argument_list|(
name|entry
operator|.
name|getName
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|entry
operator|.
name|getKind
argument_list|()
operator|==
name|SVNNodeKind
operator|.
name|DIR
condition|)
block|{
name|SVNAdminArea
name|childDir
init|=
name|dir
operator|.
name|getWCAccess
argument_list|()
operator|.
name|retrieve
argument_list|(
name|path
argument_list|)
decl_stmt|;
name|markTree
argument_list|(
name|childDir
argument_list|,
name|schedule
argument_list|,
name|copied
argument_list|,
name|keepLocal
argument_list|,
name|flags
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
operator|(
name|flags
operator|&
name|SCHEDULE
operator|)
operator|!=
literal|0
condition|)
block|{
name|attributes
operator|.
name|put
argument_list|(
name|SVNProperty
operator|.
name|SCHEDULE
argument_list|,
name|schedule
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
operator|(
name|flags
operator|&
name|COPIED
operator|)
operator|!=
literal|0
condition|)
block|{
name|attributes
operator|.
name|put
argument_list|(
name|SVNProperty
operator|.
name|COPIED
argument_list|,
name|copied
condition|?
name|Boolean
operator|.
name|TRUE
operator|.
name|toString
argument_list|()
else|:
literal|null
argument_list|)
expr_stmt|;
block|}
name|dir
operator|.
name|modifyEntry
argument_list|(
name|entry
operator|.
name|getName
argument_list|()
argument_list|,
name|attributes
argument_list|,
literal|true
argument_list|,
literal|false
argument_list|)
expr_stmt|;
if|if
condition|(
name|copied
condition|)
block|{
name|SVNPropertiesManager
operator|.
name|deleteWCProperties
argument_list|(
name|dir
argument_list|,
name|entry
operator|.
name|getName
argument_list|()
argument_list|,
literal|false
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|SVNProperty
operator|.
name|SCHEDULE_DELETE
operator|.
name|equals
argument_list|(
name|schedule
argument_list|)
condition|)
block|{
name|SVNEvent
name|event
init|=
name|SVNEventFactory
operator|.
name|createSVNEvent
argument_list|(
name|path
argument_list|,
name|SVNNodeKind
operator|.
name|UNKNOWN
argument_list|,
literal|null
argument_list|,
literal|0
argument_list|,
name|SVNEventAction
operator|.
name|DELETE
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|)
decl_stmt|;
name|dir
operator|.
name|getWCAccess
argument_list|()
operator|.
name|handleEvent
argument_list|(
name|event
argument_list|)
expr_stmt|;
block|}
block|}
specifier|public
specifier|static
name|void
name|markTree
parameter_list|(
name|SVNAdminArea
name|dir
parameter_list|,
name|String
name|schedule
parameter_list|,
name|boolean
name|copied
parameter_list|,
name|boolean
name|keepLocal
parameter_list|,
name|int
name|flags
parameter_list|)
throws|throws
name|SVNException
block|{
for|for
control|(
name|Iterator
name|entries
init|=
name|dir
operator|.
name|entries
argument_list|(
literal|false
argument_list|)
init|;
name|entries
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|SVNEntry
name|entry
init|=
operator|(
name|SVNEntry
operator|)
name|entries
operator|.
name|next
argument_list|()
decl_stmt|;
name|markEntry
argument_list|(
name|dir
argument_list|,
name|entry
argument_list|,
name|schedule
argument_list|,
name|copied
argument_list|,
name|keepLocal
argument_list|,
name|flags
argument_list|)
expr_stmt|;
block|}
name|Map
name|attributes
init|=
operator|new
name|SVNHashMap
argument_list|()
decl_stmt|;
name|SVNEntry
name|dirEntry
init|=
name|dir
operator|.
name|getEntry
argument_list|(
name|dir
operator|.
name|getThisDirName
argument_list|()
argument_list|,
literal|false
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
operator|(
name|dirEntry
operator|.
name|isScheduledForAddition
argument_list|()
operator|&&
name|SVNProperty
operator|.
name|SCHEDULE_DELETE
operator|.
name|equals
argument_list|(
name|schedule
argument_list|)
operator|)
condition|)
block|{
if|if
condition|(
operator|(
name|flags
operator|&
name|SCHEDULE
operator|)
operator|!=
literal|0
condition|)
block|{
name|attributes
operator|.
name|put
argument_list|(
name|SVNProperty
operator|.
name|SCHEDULE
argument_list|,
name|schedule
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
operator|(
name|flags
operator|&
name|COPIED
operator|)
operator|!=
literal|0
condition|)
block|{
name|attributes
operator|.
name|put
argument_list|(
name|SVNProperty
operator|.
name|COPIED
argument_list|,
name|copied
condition|?
name|Boolean
operator|.
name|TRUE
operator|.
name|toString
argument_list|()
else|:
literal|null
argument_list|)
expr_stmt|;
block|}
block|}
if|if
condition|(
operator|(
name|flags
operator|&
name|KEEP_LOCAL
operator|)
operator|!=
literal|0
operator|&&
name|keepLocal
condition|)
block|{
name|attributes
operator|.
name|put
argument_list|(
name|SVNProperty
operator|.
name|KEEP_LOCAL
argument_list|,
name|SVNProperty
operator|.
name|toString
argument_list|(
literal|true
argument_list|)
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|attributes
operator|.
name|size
argument_list|()
operator|>
literal|0
condition|)
block|{
name|dir
operator|.
name|modifyEntry
argument_list|(
name|dir
operator|.
name|getThisDirName
argument_list|()
argument_list|,
name|attributes
argument_list|,
literal|true
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|attributes
operator|.
name|clear
argument_list|()
expr_stmt|;
block|}
name|dir
operator|.
name|saveEntries
argument_list|(
literal|false
argument_list|)
expr_stmt|;
block|}
specifier|public
specifier|static
name|void
name|markTreeCancellable
parameter_list|(
name|SVNAdminArea
name|dir
parameter_list|,
name|String
name|schedule
parameter_list|,
name|boolean
name|copied
parameter_list|,
name|boolean
name|keepLocal
parameter_list|,
name|int
name|flags
parameter_list|)
throws|throws
name|SVNException
block|{
name|Map
name|attributes
init|=
operator|new
name|SVNHashMap
argument_list|()
decl_stmt|;
name|Map
name|recurseMap
init|=
operator|new
name|SVNHashMap
argument_list|()
decl_stmt|;
for|for
control|(
name|Iterator
name|entries
init|=
name|dir
operator|.
name|entries
argument_list|(
literal|false
argument_list|)
init|;
name|entries
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|SVNEntry
name|entry
init|=
operator|(
name|SVNEntry
operator|)
name|entries
operator|.
name|next
argument_list|()
decl_stmt|;
if|if
condition|(
name|dir
operator|.
name|getThisDirName
argument_list|()
operator|.
name|equals
argument_list|(
name|entry
operator|.
name|getName
argument_list|()
argument_list|)
condition|)
block|{
continue|continue;
block|}
name|File
name|path
init|=
name|dir
operator|.
name|getFile
argument_list|(
name|entry
operator|.
name|getName
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|entry
operator|.
name|getKind
argument_list|()
operator|==
name|SVNNodeKind
operator|.
name|DIR
condition|)
block|{
name|SVNAdminArea
name|childDir
init|=
name|dir
operator|.
name|getWCAccess
argument_list|()
operator|.
name|retrieve
argument_list|(
name|path
argument_list|)
decl_stmt|;
comment|// leave for recursion, do not set anything on 'dir' entry.
name|recurseMap
operator|.
name|put
argument_list|(
name|entry
operator|.
name|getName
argument_list|()
argument_list|,
name|childDir
argument_list|)
expr_stmt|;
continue|continue;
block|}
if|if
condition|(
operator|(
name|flags
operator|&
name|SCHEDULE
operator|)
operator|!=
literal|0
condition|)
block|{
name|attributes
operator|.
name|put
argument_list|(
name|SVNProperty
operator|.
name|SCHEDULE
argument_list|,
name|schedule
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
operator|(
name|flags
operator|&
name|COPIED
operator|)
operator|!=
literal|0
condition|)
block|{
name|attributes
operator|.
name|put
argument_list|(
name|SVNProperty
operator|.
name|COPIED
argument_list|,
name|copied
condition|?
name|Boolean
operator|.
name|TRUE
operator|.
name|toString
argument_list|()
else|:
literal|null
argument_list|)
expr_stmt|;
block|}
name|dir
operator|.
name|modifyEntry
argument_list|(
name|entry
operator|.
name|getName
argument_list|()
argument_list|,
name|attributes
argument_list|,
literal|true
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|attributes
operator|.
name|clear
argument_list|()
expr_stmt|;
if|if
condition|(
name|SVNProperty
operator|.
name|SCHEDULE_DELETE
operator|.
name|equals
argument_list|(
name|schedule
argument_list|)
condition|)
block|{
name|SVNEvent
name|event
init|=
name|SVNEventFactory
operator|.
name|createSVNEvent
argument_list|(
name|dir
operator|.
name|getFile
argument_list|(
name|entry
operator|.
name|getName
argument_list|()
argument_list|)
argument_list|,
name|SVNNodeKind
operator|.
name|UNKNOWN
argument_list|,
literal|null
argument_list|,
literal|0
argument_list|,
name|SVNEventAction
operator|.
name|DELETE
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|)
decl_stmt|;
name|dir
operator|.
name|getWCAccess
argument_list|()
operator|.
name|handleEvent
argument_list|(
name|event
argument_list|)
expr_stmt|;
block|}
block|}
name|SVNEntry
name|dirEntry
init|=
name|dir
operator|.
name|getEntry
argument_list|(
name|dir
operator|.
name|getThisDirName
argument_list|()
argument_list|,
literal|false
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
operator|(
name|dirEntry
operator|.
name|isScheduledForAddition
argument_list|()
operator|&&
name|SVNProperty
operator|.
name|SCHEDULE_DELETE
operator|.
name|equals
argument_list|(
name|schedule
argument_list|)
operator|)
condition|)
block|{
if|if
condition|(
operator|(
name|flags
operator|&
name|SCHEDULE
operator|)
operator|!=
literal|0
condition|)
block|{
name|attributes
operator|.
name|put
argument_list|(
name|SVNProperty
operator|.
name|SCHEDULE
argument_list|,
name|schedule
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
operator|(
name|flags
operator|&
name|COPIED
operator|)
operator|!=
literal|0
condition|)
block|{
name|attributes
operator|.
name|put
argument_list|(
name|SVNProperty
operator|.
name|COPIED
argument_list|,
name|copied
condition|?
name|Boolean
operator|.
name|TRUE
operator|.
name|toString
argument_list|()
else|:
literal|null
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|keepLocal
condition|)
block|{
name|attributes
operator|.
name|put
argument_list|(
name|SVNProperty
operator|.
name|KEEP_LOCAL
argument_list|,
name|SVNProperty
operator|.
name|toString
argument_list|(
literal|true
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|dir
operator|.
name|modifyEntry
argument_list|(
name|dir
operator|.
name|getThisDirName
argument_list|()
argument_list|,
name|attributes
argument_list|,
literal|true
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|attributes
operator|.
name|clear
argument_list|()
expr_stmt|;
block|}
name|dir
operator|.
name|saveEntries
argument_list|(
literal|false
argument_list|)
expr_stmt|;
comment|// could check for cancellation - entries file saved.
name|dir
operator|.
name|getWCAccess
argument_list|()
operator|.
name|checkCancelled
argument_list|()
expr_stmt|;
comment|// recurse.
for|for
control|(
name|Iterator
name|dirs
init|=
name|recurseMap
operator|.
name|keySet
argument_list|()
operator|.
name|iterator
argument_list|()
init|;
name|dirs
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|String
name|entryName
init|=
operator|(
name|String
operator|)
name|dirs
operator|.
name|next
argument_list|()
decl_stmt|;
name|SVNAdminArea
name|childDir
init|=
operator|(
name|SVNAdminArea
operator|)
name|recurseMap
operator|.
name|get
argument_list|(
name|entryName
argument_list|)
decl_stmt|;
comment|// update 'dir' entry, save entries file again, then enter recursion.
if|if
condition|(
operator|(
name|flags
operator|&
name|SCHEDULE
operator|)
operator|!=
literal|0
condition|)
block|{
name|attributes
operator|.
name|put
argument_list|(
name|SVNProperty
operator|.
name|SCHEDULE
argument_list|,
name|schedule
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
operator|(
name|flags
operator|&
name|COPIED
operator|)
operator|!=
literal|0
condition|)
block|{
name|attributes
operator|.
name|put
argument_list|(
name|SVNProperty
operator|.
name|COPIED
argument_list|,
name|copied
condition|?
name|Boolean
operator|.
name|TRUE
operator|.
name|toString
argument_list|()
else|:
literal|null
argument_list|)
expr_stmt|;
block|}
name|dir
operator|.
name|modifyEntry
argument_list|(
name|entryName
argument_list|,
name|attributes
argument_list|,
literal|true
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|attributes
operator|.
name|clear
argument_list|()
expr_stmt|;
if|if
condition|(
name|SVNProperty
operator|.
name|SCHEDULE_DELETE
operator|.
name|equals
argument_list|(
name|schedule
argument_list|)
condition|)
block|{
name|SVNEvent
name|event
init|=
name|SVNEventFactory
operator|.
name|createSVNEvent
argument_list|(
name|dir
operator|.
name|getFile
argument_list|(
name|entryName
argument_list|)
argument_list|,
name|SVNNodeKind
operator|.
name|UNKNOWN
argument_list|,
literal|null
argument_list|,
literal|0
argument_list|,
name|SVNEventAction
operator|.
name|DELETE
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|)
decl_stmt|;
name|dir
operator|.
name|getWCAccess
argument_list|()
operator|.
name|handleEvent
argument_list|(
name|event
argument_list|)
expr_stmt|;
block|}
name|dir
operator|.
name|saveEntries
argument_list|(
literal|false
argument_list|)
expr_stmt|;
name|markTree
argument_list|(
name|childDir
argument_list|,
name|schedule
argument_list|,
name|copied
argument_list|,
name|keepLocal
argument_list|,
name|flags
argument_list|)
expr_stmt|;
block|}
block|}
specifier|public
specifier|static
name|void
name|updateCleanup
parameter_list|(
name|File
name|path
parameter_list|,
name|SVNWCAccess
name|wcAccess
parameter_list|,
name|String
name|baseURL
parameter_list|,
name|String
name|rootURL
parameter_list|,
name|long
name|newRevision
parameter_list|,
name|boolean
name|removeMissingDirs
parameter_list|,
name|Collection
name|excludePaths
parameter_list|,
name|SVNDepth
name|depth
parameter_list|,
name|boolean
name|skipUnlocked
parameter_list|)
throws|throws
name|SVNException
block|{
name|SVNEntry
name|entry
init|=
name|wcAccess
operator|.
name|getEntry
argument_list|(
name|path
argument_list|,
literal|true
argument_list|)
decl_stmt|;
if|if
condition|(
name|entry
operator|==
literal|null
condition|)
block|{
return|return;
block|}
name|excludePaths
operator|=
name|excludePaths
operator|==
literal|null
condition|?
name|Collections
operator|.
name|EMPTY_LIST
else|:
name|excludePaths
expr_stmt|;
if|if
condition|(
name|entry
operator|.
name|isFile
argument_list|()
operator|||
operator|(
name|entry
operator|.
name|isDirectory
argument_list|()
operator|&&
operator|(
name|entry
operator|.
name|isAbsent
argument_list|()
operator|||
name|entry
operator|.
name|isDeleted
argument_list|()
operator|||
name|entry
operator|.
name|getDepth
argument_list|()
operator|==
name|SVNDepth
operator|.
name|EXCLUDE
operator|)
operator|)
condition|)
block|{
if|if
condition|(
name|excludePaths
operator|.
name|contains
argument_list|(
name|path
argument_list|)
condition|)
block|{
return|return;
block|}
name|SVNAdminArea
name|dir
init|=
name|wcAccess
operator|.
name|retrieve
argument_list|(
name|path
operator|.
name|getParentFile
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|skipUnlocked
operator|&&
operator|!
name|dir
operator|.
name|isLocked
argument_list|()
condition|)
block|{
return|return;
block|}
if|if
condition|(
name|dir
operator|.
name|tweakEntry
argument_list|(
name|path
operator|.
name|getName
argument_list|()
argument_list|,
name|baseURL
argument_list|,
name|rootURL
argument_list|,
name|newRevision
argument_list|,
literal|false
argument_list|)
condition|)
block|{
name|dir
operator|.
name|saveEntries
argument_list|(
literal|false
argument_list|)
expr_stmt|;
block|}
block|}
if|else if
condition|(
name|entry
operator|.
name|isDirectory
argument_list|()
condition|)
block|{
name|SVNAdminArea
name|dir
init|=
name|wcAccess
operator|.
name|retrieve
argument_list|(
name|path
argument_list|)
decl_stmt|;
if|if
condition|(
name|skipUnlocked
operator|&&
operator|!
name|dir
operator|.
name|isLocked
argument_list|()
condition|)
block|{
return|return;
block|}
name|tweakEntries
argument_list|(
name|dir
argument_list|,
name|baseURL
argument_list|,
name|rootURL
argument_list|,
name|newRevision
argument_list|,
name|removeMissingDirs
argument_list|,
name|excludePaths
argument_list|,
name|depth
argument_list|,
name|skipUnlocked
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|SVNErrorMessage
name|err
init|=
name|SVNErrorMessage
operator|.
name|create
argument_list|(
name|SVNErrorCode
operator|.
name|NODE_UNKNOWN_KIND
argument_list|,
literal|"Unrecognized node kind: ''{0}''"
argument_list|,
name|path
argument_list|)
decl_stmt|;
name|SVNErrorManager
operator|.
name|error
argument_list|(
name|err
argument_list|,
name|SVNLogType
operator|.
name|WC
argument_list|)
expr_stmt|;
block|}
block|}
specifier|private
specifier|static
name|void
name|tweakEntries
parameter_list|(
name|SVNAdminArea
name|dir
parameter_list|,
name|String
name|baseURL
parameter_list|,
name|String
name|rootURL
parameter_list|,
name|long
name|newRevision
parameter_list|,
name|boolean
name|removeMissingDirs
parameter_list|,
name|Collection
name|excludePaths
parameter_list|,
name|SVNDepth
name|depth
parameter_list|,
name|boolean
name|skipUnlocked
parameter_list|)
throws|throws
name|SVNException
block|{
if|if
condition|(
name|excludePaths
operator|.
name|contains
argument_list|(
name|dir
operator|.
name|getRoot
argument_list|()
argument_list|)
condition|)
block|{
return|return;
block|}
name|boolean
name|write
init|=
literal|false
decl_stmt|;
name|write
operator|=
name|dir
operator|.
name|tweakEntry
argument_list|(
name|dir
operator|.
name|getThisDirName
argument_list|()
argument_list|,
name|baseURL
argument_list|,
name|rootURL
argument_list|,
name|newRevision
argument_list|,
literal|false
argument_list|)
expr_stmt|;
if|if
condition|(
name|depth
operator|==
name|SVNDepth
operator|.
name|UNKNOWN
condition|)
block|{
name|depth
operator|=
name|SVNDepth
operator|.
name|INFINITY
expr_stmt|;
block|}
if|if
condition|(
name|depth
operator|.
name|compareTo
argument_list|(
name|SVNDepth
operator|.
name|EMPTY
argument_list|)
operator|>
literal|0
condition|)
block|{
for|for
control|(
name|Iterator
name|entries
init|=
name|dir
operator|.
name|entries
argument_list|(
literal|true
argument_list|)
init|;
name|entries
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|SVNEntry
name|entry
init|=
operator|(
name|SVNEntry
operator|)
name|entries
operator|.
name|next
argument_list|()
decl_stmt|;
if|if
condition|(
name|dir
operator|.
name|getThisDirName
argument_list|()
operator|.
name|equals
argument_list|(
name|entry
operator|.
name|getName
argument_list|()
argument_list|)
condition|)
block|{
continue|continue;
block|}
name|File
name|childFile
init|=
name|dir
operator|.
name|getFile
argument_list|(
name|entry
operator|.
name|getName
argument_list|()
argument_list|)
decl_stmt|;
name|boolean
name|isExcluded
init|=
name|excludePaths
operator|.
name|contains
argument_list|(
name|childFile
argument_list|)
decl_stmt|;
name|String
name|childURL
init|=
literal|null
decl_stmt|;
if|if
condition|(
name|baseURL
operator|!=
literal|null
condition|)
block|{
name|childURL
operator|=
name|SVNPathUtil
operator|.
name|append
argument_list|(
name|baseURL
argument_list|,
name|SVNEncodingUtil
operator|.
name|uriEncode
argument_list|(
name|entry
operator|.
name|getName
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|entry
operator|.
name|isFile
argument_list|()
operator|||
operator|(
name|entry
operator|.
name|isAbsent
argument_list|()
operator|||
name|entry
operator|.
name|isDeleted
argument_list|()
operator|||
name|entry
operator|.
name|getDepth
argument_list|()
operator|==
name|SVNDepth
operator|.
name|EXCLUDE
operator|)
condition|)
block|{
if|if
condition|(
operator|!
name|isExcluded
condition|)
block|{
name|write
operator||=
name|dir
operator|.
name|tweakEntry
argument_list|(
name|entry
operator|.
name|getName
argument_list|()
argument_list|,
name|childURL
argument_list|,
name|rootURL
argument_list|,
name|newRevision
argument_list|,
literal|true
argument_list|)
expr_stmt|;
block|}
block|}
if|else if
condition|(
name|entry
operator|.
name|isDirectory
argument_list|()
operator|&&
operator|(
name|depth
operator|==
name|SVNDepth
operator|.
name|INFINITY
operator|||
name|depth
operator|==
name|SVNDepth
operator|.
name|IMMEDIATES
operator|)
condition|)
block|{
name|SVNDepth
name|depthBelowHere
init|=
name|depth
operator|==
name|SVNDepth
operator|.
name|IMMEDIATES
condition|?
name|SVNDepth
operator|.
name|EMPTY
else|:
name|depth
decl_stmt|;
name|File
name|path
init|=
name|dir
operator|.
name|getFile
argument_list|(
name|entry
operator|.
name|getName
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|removeMissingDirs
operator|&&
name|dir
operator|.
name|getWCAccess
argument_list|()
operator|.
name|isMissing
argument_list|(
name|path
argument_list|)
condition|)
block|{
if|if
condition|(
operator|!
name|entry
operator|.
name|isScheduledForAddition
argument_list|()
operator|&&
operator|!
name|isExcluded
condition|)
block|{
name|dir
operator|.
name|deleteEntry
argument_list|(
name|entry
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
name|dir
operator|.
name|getWCAccess
argument_list|()
operator|.
name|handleEvent
argument_list|(
name|SVNEventFactory
operator|.
name|createSVNEvent
argument_list|(
name|dir
operator|.
name|getFile
argument_list|(
name|entry
operator|.
name|getName
argument_list|()
argument_list|)
argument_list|,
name|entry
operator|.
name|getKind
argument_list|()
argument_list|,
literal|null
argument_list|,
name|entry
operator|.
name|getRevision
argument_list|()
argument_list|,
name|SVNEventAction
operator|.
name|UPDATE_DELETE
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
else|else
block|{
name|SVNAdminArea
name|childDir
init|=
name|dir
operator|.
name|getWCAccess
argument_list|()
operator|.
name|retrieve
argument_list|(
name|path
argument_list|)
decl_stmt|;
if|if
condition|(
name|skipUnlocked
operator|&&
operator|!
name|childDir
operator|.
name|isLocked
argument_list|()
condition|)
block|{
continue|continue;
block|}
name|tweakEntries
argument_list|(
name|childDir
argument_list|,
name|childURL
argument_list|,
name|rootURL
argument_list|,
name|newRevision
argument_list|,
name|removeMissingDirs
argument_list|,
name|excludePaths
argument_list|,
name|depthBelowHere
argument_list|,
name|skipUnlocked
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
if|if
condition|(
name|write
condition|)
block|{
name|dir
operator|.
name|saveEntries
argument_list|(
literal|false
argument_list|)
expr_stmt|;
block|}
block|}
specifier|public
specifier|static
name|boolean
name|ensureAdminAreaExists
parameter_list|(
name|File
name|path
parameter_list|,
name|String
name|url
parameter_list|,
name|String
name|rootURL
parameter_list|,
name|String
name|uuid
parameter_list|,
name|long
name|revision
parameter_list|,
name|SVNDepth
name|depth
parameter_list|)
throws|throws
name|SVNException
block|{
name|SVNFileType
name|fileType
init|=
name|SVNFileType
operator|.
name|getType
argument_list|(
name|path
argument_list|)
decl_stmt|;
if|if
condition|(
name|fileType
operator|!=
name|SVNFileType
operator|.
name|DIRECTORY
operator|&&
name|fileType
operator|!=
name|SVNFileType
operator|.
name|NONE
condition|)
block|{
name|SVNErrorMessage
name|err
init|=
name|SVNErrorMessage
operator|.
name|create
argument_list|(
name|SVNErrorCode
operator|.
name|IO_ERROR
argument_list|,
literal|"''{0}'' is not a directory"
argument_list|,
name|path
argument_list|)
decl_stmt|;
name|SVNErrorManager
operator|.
name|error
argument_list|(
name|err
argument_list|,
name|SVNLogType
operator|.
name|WC
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|fileType
operator|==
name|SVNFileType
operator|.
name|NONE
condition|)
block|{
name|SVNAdminAreaFactory
operator|.
name|createVersionedDirectory
argument_list|(
name|path
argument_list|,
name|url
argument_list|,
name|rootURL
argument_list|,
name|uuid
argument_list|,
name|revision
argument_list|,
name|depth
argument_list|)
expr_stmt|;
return|return
literal|true
return|;
block|}
name|SVNWCAccess
name|wcAccess
init|=
name|SVNWCAccess
operator|.
name|newInstance
argument_list|(
literal|null
argument_list|)
decl_stmt|;
try|try
block|{
name|wcAccess
operator|.
name|open
argument_list|(
name|path
argument_list|,
literal|false
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|SVNEntry
name|entry
init|=
name|wcAccess
operator|.
name|getVersionedEntry
argument_list|(
name|path
argument_list|,
literal|false
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|entry
operator|.
name|isScheduledForDeletion
argument_list|()
condition|)
block|{
if|if
condition|(
name|entry
operator|.
name|getRevision
argument_list|()
operator|!=
name|revision
condition|)
block|{
name|SVNErrorMessage
name|err
init|=
name|SVNErrorMessage
operator|.
name|create
argument_list|(
name|SVNErrorCode
operator|.
name|WC_OBSTRUCTED_UPDATE
argument_list|,
literal|"Revision {0} doesn''t match existing revision {1} in ''{2}''"
argument_list|,
operator|new
name|Object
index|[]
block|{
operator|new
name|Long
argument_list|(
name|revision
argument_list|)
block|,
operator|new
name|Long
argument_list|(
name|entry
operator|.
name|getRevision
argument_list|()
argument_list|)
block|,
name|path
block|}
argument_list|)
decl_stmt|;
name|SVNErrorManager
operator|.
name|error
argument_list|(
name|err
argument_list|,
name|SVNLogType
operator|.
name|WC
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
operator|!
name|entry
operator|.
name|getURL
argument_list|()
operator|.
name|equals
argument_list|(
name|url
argument_list|)
condition|)
block|{
name|SVNErrorMessage
name|err
init|=
name|SVNErrorMessage
operator|.
name|create
argument_list|(
name|SVNErrorCode
operator|.
name|WC_OBSTRUCTED_UPDATE
argument_list|,
literal|"URL {0} doesn''t match existing URL {1} in ''{2}''"
argument_list|,
operator|new
name|Object
index|[]
block|{
name|url
block|,
name|entry
operator|.
name|getURL
argument_list|()
block|,
name|path
block|}
argument_list|)
decl_stmt|;
name|SVNErrorManager
operator|.
name|error
argument_list|(
name|err
argument_list|,
name|SVNLogType
operator|.
name|WC
argument_list|)
expr_stmt|;
block|}
block|}
block|}
catch|catch
parameter_list|(
name|SVNException
name|e
parameter_list|)
block|{
if|if
condition|(
name|e
operator|.
name|getErrorMessage
argument_list|()
operator|.
name|getErrorCode
argument_list|()
operator|==
name|SVNErrorCode
operator|.
name|WC_NOT_DIRECTORY
condition|)
block|{
name|SVNAdminAreaFactory
operator|.
name|createVersionedDirectory
argument_list|(
name|path
argument_list|,
name|url
argument_list|,
name|rootURL
argument_list|,
name|uuid
argument_list|,
name|revision
argument_list|,
name|depth
argument_list|)
expr_stmt|;
return|return
literal|true
return|;
block|}
throw|throw
name|e
throw|;
block|}
finally|finally
block|{
name|wcAccess
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
return|return
literal|false
return|;
block|}
specifier|public
specifier|static
name|void
name|canDelete
parameter_list|(
name|File
name|path
parameter_list|,
name|ISVNOptions
name|options
parameter_list|,
specifier|final
name|ISVNEventHandler
name|eventHandler
parameter_list|)
throws|throws
name|SVNException
block|{
name|SVNStatusClient
name|statusClient
init|=
operator|new
name|SVNStatusClient
argument_list|(
operator|(
name|ISVNAuthenticationManager
operator|)
literal|null
argument_list|,
name|options
argument_list|)
decl_stmt|;
if|if
condition|(
name|eventHandler
operator|!=
literal|null
condition|)
block|{
name|statusClient
operator|.
name|setEventHandler
argument_list|(
operator|new
name|ISVNEventHandler
argument_list|()
block|{
specifier|public
name|void
name|checkCancelled
parameter_list|()
throws|throws
name|SVNCancelException
block|{
name|eventHandler
operator|.
name|checkCancelled
argument_list|()
expr_stmt|;
block|}
specifier|public
name|void
name|handleEvent
parameter_list|(
name|SVNEvent
name|event
parameter_list|,
name|double
name|progress
parameter_list|)
throws|throws
name|SVNException
block|{
block|}
block|}
argument_list|)
expr_stmt|;
block|}
name|statusClient
operator|.
name|doStatus
argument_list|(
name|path
argument_list|,
name|SVNRevision
operator|.
name|UNDEFINED
argument_list|,
name|SVNDepth
operator|.
name|INFINITY
argument_list|,
literal|false
argument_list|,
literal|false
argument_list|,
literal|false
argument_list|,
literal|false
argument_list|,
operator|new
name|ISVNStatusHandler
argument_list|()
block|{
specifier|public
name|void
name|handleStatus
parameter_list|(
name|SVNStatus
name|status
parameter_list|)
throws|throws
name|SVNException
block|{
if|if
condition|(
name|status
operator|.
name|getContentsStatus
argument_list|()
operator|==
name|SVNStatusType
operator|.
name|STATUS_OBSTRUCTED
condition|)
block|{
name|SVNErrorMessage
name|err
init|=
name|SVNErrorMessage
operator|.
name|create
argument_list|(
name|SVNErrorCode
operator|.
name|NODE_UNEXPECTED_KIND
argument_list|,
literal|"''{0}'' is in the way of the resource actually under version control"
argument_list|,
name|status
operator|.
name|getFile
argument_list|()
argument_list|)
decl_stmt|;
name|SVNErrorManager
operator|.
name|error
argument_list|(
name|err
argument_list|,
name|SVNLogType
operator|.
name|WC
argument_list|)
expr_stmt|;
block|}
if|else if
condition|(
name|status
operator|.
name|getEntry
argument_list|()
operator|==
literal|null
condition|)
block|{
name|SVNErrorMessage
name|err
init|=
name|SVNErrorMessage
operator|.
name|create
argument_list|(
name|SVNErrorCode
operator|.
name|UNVERSIONED_RESOURCE
argument_list|,
literal|"''{0}'' is not under version control"
argument_list|,
name|status
operator|.
name|getFile
argument_list|()
argument_list|)
decl_stmt|;
name|SVNErrorManager
operator|.
name|error
argument_list|(
name|err
argument_list|,
name|SVNLogType
operator|.
name|WC
argument_list|)
expr_stmt|;
block|}
if|else if
condition|(
operator|(
name|status
operator|.
name|getContentsStatus
argument_list|()
operator|!=
name|SVNStatusType
operator|.
name|STATUS_NORMAL
operator|&&
name|status
operator|.
name|getContentsStatus
argument_list|()
operator|!=
name|SVNStatusType
operator|.
name|STATUS_DELETED
operator|&&
name|status
operator|.
name|getContentsStatus
argument_list|()
operator|!=
name|SVNStatusType
operator|.
name|STATUS_MISSING
operator|)
operator|||
operator|(
name|status
operator|.
name|getPropertiesStatus
argument_list|()
operator|!=
name|SVNStatusType
operator|.
name|STATUS_NONE
operator|&&
name|status
operator|.
name|getPropertiesStatus
argument_list|()
operator|!=
name|SVNStatusType
operator|.
name|STATUS_NORMAL
operator|)
condition|)
block|{
name|SVNErrorMessage
name|err
init|=
name|SVNErrorMessage
operator|.
name|create
argument_list|(
name|SVNErrorCode
operator|.
name|CLIENT_MODIFIED
argument_list|,
literal|"''{0}'' has local modifications"
argument_list|,
name|status
operator|.
name|getFile
argument_list|()
argument_list|)
decl_stmt|;
name|SVNErrorManager
operator|.
name|error
argument_list|(
name|err
argument_list|,
name|SVNLogType
operator|.
name|WC
argument_list|)
expr_stmt|;
block|}
block|}
block|}
argument_list|,
literal|null
argument_list|)
expr_stmt|;
block|}
specifier|public
specifier|static
name|void
name|delete
parameter_list|(
name|SVNWCAccess
name|wcAccess
parameter_list|,
name|SVNAdminArea
name|root
parameter_list|,
name|File
name|path
parameter_list|,
name|boolean
name|deleteFiles
parameter_list|,
name|boolean
name|cancellable
parameter_list|)
throws|throws
name|SVNException
block|{
name|SVNAdminArea
name|dir
init|=
name|wcAccess
operator|.
name|probeTry
argument_list|(
name|path
argument_list|,
literal|true
argument_list|,
name|SVNWCAccess
operator|.
name|INFINITE_DEPTH
argument_list|)
decl_stmt|;
name|SVNEntry
name|entry
init|=
literal|null
decl_stmt|;
if|if
condition|(
name|dir
operator|!=
literal|null
condition|)
block|{
name|entry
operator|=
name|wcAccess
operator|.
name|getEntry
argument_list|(
name|path
argument_list|,
literal|false
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|SVNWCManager
operator|.
name|doDeleteUnversionedFiles
argument_list|(
name|wcAccess
argument_list|,
name|path
argument_list|,
name|deleteFiles
argument_list|)
expr_stmt|;
return|return;
block|}
if|if
condition|(
name|entry
operator|==
literal|null
condition|)
block|{
name|SVNWCManager
operator|.
name|doDeleteUnversionedFiles
argument_list|(
name|wcAccess
argument_list|,
name|path
argument_list|,
name|deleteFiles
argument_list|)
expr_stmt|;
return|return;
block|}
if|if
condition|(
name|entry
operator|.
name|getExternalFilePath
argument_list|()
operator|!=
literal|null
condition|)
block|{
comment|// check if there is an external property.
name|String
name|externalProperty
init|=
name|dir
operator|.
name|getProperties
argument_list|(
name|dir
operator|.
name|getThisDirName
argument_list|()
argument_list|)
operator|.
name|getStringPropertyValue
argument_list|(
name|SVNProperty
operator|.
name|EXTERNALS
argument_list|)
decl_stmt|;
name|String
name|name
init|=
name|entry
operator|.
name|getName
argument_list|()
decl_stmt|;
if|if
condition|(
name|externalProperty
operator|!=
literal|null
condition|)
block|{
name|SVNExternal
index|[]
name|externals
init|=
name|SVNExternal
operator|.
name|parseExternals
argument_list|(
literal|""
argument_list|,
name|externalProperty
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|externals
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
if|if
condition|(
name|name
operator|.
name|equals
argument_list|(
name|externals
index|[
name|i
index|]
operator|.
name|getPath
argument_list|()
argument_list|)
condition|)
block|{
name|SVNErrorMessage
name|err
init|=
name|SVNErrorMessage
operator|.
name|create
argument_list|(
name|SVNErrorCode
operator|.
name|WC_CANNOT_DELETE_FILE_EXTERNAL
argument_list|,
literal|"Cannot remove the file external at ''{0}''; please propedit or propdel the svn:externals description that created it"
argument_list|,
name|path
argument_list|)
decl_stmt|;
name|SVNErrorManager
operator|.
name|error
argument_list|(
name|err
argument_list|,
name|SVNLogType
operator|.
name|WC
argument_list|)
expr_stmt|;
block|}
block|}
block|}
name|dir
operator|.
name|removeFromRevisionControl
argument_list|(
name|name
argument_list|,
name|deleteFiles
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|SVNEvent
name|event
init|=
name|SVNEventFactory
operator|.
name|createSVNEvent
argument_list|(
name|path
argument_list|,
name|SVNNodeKind
operator|.
name|UNKNOWN
argument_list|,
literal|null
argument_list|,
literal|0
argument_list|,
name|SVNEventAction
operator|.
name|DELETE
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|)
decl_stmt|;
name|wcAccess
operator|.
name|handleEvent
argument_list|(
name|event
argument_list|)
expr_stmt|;
return|return;
block|}
name|String
name|schedule
init|=
name|entry
operator|.
name|getSchedule
argument_list|()
decl_stmt|;
name|SVNNodeKind
name|kind
init|=
name|entry
operator|.
name|getKind
argument_list|()
decl_stmt|;
name|boolean
name|copied
init|=
name|entry
operator|.
name|isCopied
argument_list|()
decl_stmt|;
name|boolean
name|deleted
init|=
literal|false
decl_stmt|;
name|String
name|name
init|=
name|path
operator|.
name|getName
argument_list|()
decl_stmt|;
if|if
condition|(
name|kind
operator|==
name|SVNNodeKind
operator|.
name|DIR
condition|)
block|{
name|SVNAdminArea
name|parent
init|=
name|wcAccess
operator|.
name|retrieve
argument_list|(
name|path
operator|.
name|getParentFile
argument_list|()
argument_list|)
decl_stmt|;
name|SVNEntry
name|entryInParent
init|=
name|parent
operator|.
name|getEntry
argument_list|(
name|name
argument_list|,
literal|true
argument_list|)
decl_stmt|;
name|deleted
operator|=
name|entryInParent
operator|!=
literal|null
condition|?
name|entryInParent
operator|.
name|isDeleted
argument_list|()
else|:
literal|false
expr_stmt|;
if|if
condition|(
operator|!
name|deleted
operator|&&
name|SVNProperty
operator|.
name|SCHEDULE_ADD
operator|.
name|equals
argument_list|(
name|schedule
argument_list|)
condition|)
block|{
if|if
condition|(
name|dir
operator|!=
name|root
condition|)
block|{
name|dir
operator|.
name|removeFromRevisionControl
argument_list|(
literal|""
argument_list|,
literal|false
argument_list|,
literal|false
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|parent
operator|.
name|deleteEntry
argument_list|(
name|name
argument_list|)
expr_stmt|;
name|parent
operator|.
name|saveEntries
argument_list|(
literal|false
argument_list|)
expr_stmt|;
block|}
block|}
else|else
block|{
if|if
condition|(
name|dir
operator|!=
name|root
condition|)
block|{
if|if
condition|(
name|cancellable
condition|)
block|{
name|markTreeCancellable
argument_list|(
name|dir
argument_list|,
name|SVNProperty
operator|.
name|SCHEDULE_DELETE
argument_list|,
literal|false
argument_list|,
operator|!
name|deleteFiles
argument_list|,
name|SCHEDULE
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|markTree
argument_list|(
name|dir
argument_list|,
name|SVNProperty
operator|.
name|SCHEDULE_DELETE
argument_list|,
literal|false
argument_list|,
operator|!
name|deleteFiles
argument_list|,
name|SCHEDULE
operator||
name|KEEP_LOCAL
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
if|if
condition|(
operator|!
operator|(
name|kind
operator|==
name|SVNNodeKind
operator|.
name|DIR
operator|&&
name|SVNProperty
operator|.
name|SCHEDULE_ADD
operator|.
name|equals
argument_list|(
name|schedule
argument_list|)
operator|&&
operator|!
name|deleted
operator|)
condition|)
block|{
name|SVNLog
name|log
init|=
name|root
operator|.
name|getLog
argument_list|()
decl_stmt|;
name|SVNProperties
name|command
init|=
operator|new
name|SVNProperties
argument_list|()
decl_stmt|;
name|command
operator|.
name|put
argument_list|(
name|SVNLog
operator|.
name|NAME_ATTR
argument_list|,
name|name
argument_list|)
expr_stmt|;
name|command
operator|.
name|put
argument_list|(
name|SVNProperty
operator|.
name|shortPropertyName
argument_list|(
name|SVNProperty
operator|.
name|SCHEDULE
argument_list|)
argument_list|,
name|SVNProperty
operator|.
name|SCHEDULE_DELETE
argument_list|)
expr_stmt|;
name|log
operator|.
name|addCommand
argument_list|(
name|SVNLog
operator|.
name|MODIFY_ENTRY
argument_list|,
name|command
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|command
operator|.
name|clear
argument_list|()
expr_stmt|;
if|if
condition|(
name|SVNProperty
operator|.
name|SCHEDULE_REPLACE
operator|.
name|equals
argument_list|(
name|schedule
argument_list|)
operator|&&
name|copied
condition|)
block|{
if|if
condition|(
name|kind
operator|!=
name|SVNNodeKind
operator|.
name|DIR
condition|)
block|{
name|command
operator|.
name|put
argument_list|(
name|SVNLog
operator|.
name|NAME_ATTR
argument_list|,
name|SVNAdminUtil
operator|.
name|getTextRevertPath
argument_list|(
name|name
argument_list|,
literal|false
argument_list|)
argument_list|)
expr_stmt|;
name|command
operator|.
name|put
argument_list|(
name|SVNLog
operator|.
name|DEST_ATTR
argument_list|,
name|SVNAdminUtil
operator|.
name|getTextBasePath
argument_list|(
name|name
argument_list|,
literal|false
argument_list|)
argument_list|)
expr_stmt|;
name|log
operator|.
name|addCommand
argument_list|(
name|SVNLog
operator|.
name|MOVE
argument_list|,
name|command
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|command
operator|.
name|clear
argument_list|()
expr_stmt|;
block|}
name|command
operator|.
name|put
argument_list|(
name|SVNLog
operator|.
name|NAME_ATTR
argument_list|,
name|SVNAdminUtil
operator|.
name|getPropRevertPath
argument_list|(
name|name
argument_list|,
name|kind
argument_list|,
literal|false
argument_list|)
argument_list|)
expr_stmt|;
name|command
operator|.
name|put
argument_list|(
name|SVNLog
operator|.
name|DEST_ATTR
argument_list|,
name|SVNAdminUtil
operator|.
name|getPropBasePath
argument_list|(
name|name
argument_list|,
name|kind
argument_list|,
literal|false
argument_list|)
argument_list|)
expr_stmt|;
name|log
operator|.
name|addCommand
argument_list|(
name|SVNLog
operator|.
name|MOVE
argument_list|,
name|command
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|command
operator|.
name|clear
argument_list|()
expr_stmt|;
block|}
if|if
condition|(
name|SVNProperty
operator|.
name|SCHEDULE_ADD
operator|.
name|equals
argument_list|(
name|schedule
argument_list|)
condition|)
block|{
name|command
operator|.
name|put
argument_list|(
name|SVNLog
operator|.
name|NAME_ATTR
argument_list|,
name|SVNAdminUtil
operator|.
name|getPropPath
argument_list|(
name|name
argument_list|,
name|kind
argument_list|,
literal|false
argument_list|)
argument_list|)
expr_stmt|;
name|log
operator|.
name|addCommand
argument_list|(
name|SVNLog
operator|.
name|DELETE
argument_list|,
name|command
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|command
operator|.
name|clear
argument_list|()
expr_stmt|;
name|command
operator|.
name|put
argument_list|(
name|SVNLog
operator|.
name|NAME_ATTR
argument_list|,
name|SVNAdminUtil
operator|.
name|getPropBasePath
argument_list|(
name|name
argument_list|,
name|kind
argument_list|,
literal|false
argument_list|)
argument_list|)
expr_stmt|;
name|log
operator|.
name|addCommand
argument_list|(
name|SVNLog
operator|.
name|DELETE
argument_list|,
name|command
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|command
operator|.
name|clear
argument_list|()
expr_stmt|;
name|command
operator|.
name|put
argument_list|(
name|SVNLog
operator|.
name|NAME_ATTR
argument_list|,
name|SVNAdminUtil
operator|.
name|getTextBasePath
argument_list|(
name|name
argument_list|,
literal|false
argument_list|)
argument_list|)
expr_stmt|;
name|log
operator|.
name|addCommand
argument_list|(
name|SVNLog
operator|.
name|DELETE
argument_list|,
name|command
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|command
operator|.
name|clear
argument_list|()
expr_stmt|;
block|}
name|log
operator|.
name|save
argument_list|()
expr_stmt|;
name|root
operator|.
name|runLogs
argument_list|()
expr_stmt|;
block|}
name|SVNEvent
name|event
init|=
name|SVNEventFactory
operator|.
name|createSVNEvent
argument_list|(
name|root
operator|.
name|getFile
argument_list|(
name|name
argument_list|)
argument_list|,
name|SVNNodeKind
operator|.
name|UNKNOWN
argument_list|,
literal|null
argument_list|,
literal|0
argument_list|,
name|SVNEventAction
operator|.
name|DELETE
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|)
decl_stmt|;
name|wcAccess
operator|.
name|handleEvent
argument_list|(
name|event
argument_list|)
expr_stmt|;
if|if
condition|(
name|SVNProperty
operator|.
name|SCHEDULE_ADD
operator|.
name|equals
argument_list|(
name|schedule
argument_list|)
condition|)
block|{
name|SVNWCManager
operator|.
name|doDeleteUnversionedFiles
argument_list|(
name|wcAccess
argument_list|,
name|path
argument_list|,
name|deleteFiles
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|SVNWCManager
operator|.
name|doEraseFromWC
argument_list|(
name|path
argument_list|,
name|root
argument_list|,
name|kind
argument_list|,
name|deleteFiles
argument_list|)
expr_stmt|;
block|}
block|}
specifier|public
specifier|static
name|void
name|doDeleteUnversionedFiles
parameter_list|(
name|SVNWCAccess
name|wcAccess
parameter_list|,
name|File
name|path
parameter_list|,
name|boolean
name|deleteFiles
parameter_list|)
throws|throws
name|SVNException
block|{
name|wcAccess
operator|.
name|checkCancelled
argument_list|()
expr_stmt|;
name|SVNFileType
name|fileType
init|=
name|SVNFileType
operator|.
name|getType
argument_list|(
name|path
argument_list|)
decl_stmt|;
if|if
condition|(
name|fileType
operator|==
name|SVNFileType
operator|.
name|NONE
condition|)
block|{
name|SVNErrorMessage
name|err
init|=
name|SVNErrorMessage
operator|.
name|create
argument_list|(
name|SVNErrorCode
operator|.
name|BAD_FILENAME
argument_list|,
literal|"''{0}'' does not exist"
argument_list|,
name|path
argument_list|)
decl_stmt|;
name|SVNErrorManager
operator|.
name|error
argument_list|(
name|err
argument_list|,
name|SVNLogType
operator|.
name|WC
argument_list|)
expr_stmt|;
block|}
if|else if
condition|(
name|fileType
operator|!=
name|SVNFileType
operator|.
name|FILE
operator|&&
name|fileType
operator|!=
name|SVNFileType
operator|.
name|DIRECTORY
operator|&&
name|fileType
operator|!=
name|SVNFileType
operator|.
name|SYMLINK
condition|)
block|{
name|SVNErrorMessage
name|err
init|=
name|SVNErrorMessage
operator|.
name|create
argument_list|(
name|SVNErrorCode
operator|.
name|UNSUPPORTED_FEATURE
argument_list|,
literal|"Unsupported node kind for path ''{0}''"
argument_list|,
name|path
argument_list|)
decl_stmt|;
name|SVNErrorManager
operator|.
name|error
argument_list|(
name|err
argument_list|,
name|SVNLogType
operator|.
name|WC
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|deleteFiles
condition|)
block|{
name|SVNFileUtil
operator|.
name|deleteAll
argument_list|(
name|path
argument_list|,
literal|true
argument_list|,
name|wcAccess
operator|.
name|getEventHandler
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
specifier|public
specifier|static
name|void
name|doEraseFromWC
parameter_list|(
name|File
name|path
parameter_list|,
name|SVNAdminArea
name|dir
parameter_list|,
name|SVNNodeKind
name|kind
parameter_list|,
name|boolean
name|deleteFiles
parameter_list|)
throws|throws
name|SVNException
block|{
name|SVNFileType
name|type
init|=
name|SVNFileType
operator|.
name|getType
argument_list|(
name|path
argument_list|)
decl_stmt|;
if|if
condition|(
name|type
operator|==
name|SVNFileType
operator|.
name|NONE
condition|)
block|{
return|return;
block|}
name|dir
operator|.
name|getWCAccess
argument_list|()
operator|.
name|checkCancelled
argument_list|()
expr_stmt|;
if|if
condition|(
name|kind
operator|==
name|SVNNodeKind
operator|.
name|FILE
condition|)
block|{
if|if
condition|(
name|deleteFiles
condition|)
block|{
name|SVNFileUtil
operator|.
name|deleteFile
argument_list|(
name|path
argument_list|)
expr_stmt|;
block|}
block|}
if|else if
condition|(
name|kind
operator|==
name|SVNNodeKind
operator|.
name|DIR
condition|)
block|{
name|SVNAdminArea
name|childDir
init|=
literal|null
decl_stmt|;
try|try
block|{
name|childDir
operator|=
name|dir
operator|.
name|getWCAccess
argument_list|()
operator|.
name|retrieve
argument_list|(
name|path
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|SVNException
name|svne
parameter_list|)
block|{
if|if
condition|(
operator|!
name|path
operator|.
name|exists
argument_list|()
condition|)
block|{
return|return;
block|}
throw|throw
name|svne
throw|;
block|}
name|Collection
name|versioned
init|=
operator|new
name|SVNHashSet
argument_list|()
decl_stmt|;
for|for
control|(
name|Iterator
name|entries
init|=
name|childDir
operator|.
name|entries
argument_list|(
literal|false
argument_list|)
init|;
name|entries
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|SVNEntry
name|entry
init|=
operator|(
name|SVNEntry
operator|)
name|entries
operator|.
name|next
argument_list|()
decl_stmt|;
name|versioned
operator|.
name|add
argument_list|(
name|entry
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|childDir
operator|.
name|getThisDirName
argument_list|()
operator|.
name|equals
argument_list|(
name|entry
operator|.
name|getName
argument_list|()
argument_list|)
condition|)
block|{
continue|continue;
block|}
name|File
name|childPath
init|=
name|childDir
operator|.
name|getFile
argument_list|(
name|entry
operator|.
name|getName
argument_list|()
argument_list|)
decl_stmt|;
name|doEraseFromWC
argument_list|(
name|childPath
argument_list|,
name|childDir
argument_list|,
name|entry
operator|.
name|getKind
argument_list|()
argument_list|,
name|deleteFiles
argument_list|)
expr_stmt|;
block|}
name|File
index|[]
name|children
init|=
name|SVNFileListUtil
operator|.
name|listFiles
argument_list|(
name|path
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|children
operator|!=
literal|null
operator|&&
name|i
operator|<
name|children
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
if|if
condition|(
name|SVNFileUtil
operator|.
name|getAdminDirectoryName
argument_list|()
operator|.
name|equals
argument_list|(
name|children
index|[
name|i
index|]
operator|.
name|getName
argument_list|()
argument_list|)
condition|)
block|{
continue|continue;
block|}
if|if
condition|(
name|versioned
operator|.
name|contains
argument_list|(
name|children
index|[
name|i
index|]
operator|.
name|getName
argument_list|()
argument_list|)
condition|)
block|{
continue|continue;
block|}
name|doDeleteUnversionedFiles
argument_list|(
name|dir
operator|.
name|getWCAccess
argument_list|()
argument_list|,
name|children
index|[
name|i
index|]
argument_list|,
name|deleteFiles
argument_list|)
expr_stmt|;
block|}
block|}
block|}
specifier|public
specifier|static
name|void
name|addRepositoryFile
parameter_list|(
name|SVNAdminArea
name|dir
parameter_list|,
name|String
name|fileName
parameter_list|,
name|File
name|text
parameter_list|,
name|File
name|textBase
parameter_list|,
name|SVNProperties
name|baseProperties
parameter_list|,
name|SVNProperties
name|properties
parameter_list|,
name|String
name|copyFromURL
parameter_list|,
name|long
name|copyFromRev
parameter_list|)
throws|throws
name|SVNException
block|{
name|SVNEntry
name|parentEntry
init|=
name|dir
operator|.
name|getVersionedEntry
argument_list|(
name|dir
operator|.
name|getThisDirName
argument_list|()
argument_list|,
literal|false
argument_list|)
decl_stmt|;
name|String
name|newURL
init|=
name|SVNPathUtil
operator|.
name|append
argument_list|(
name|parentEntry
operator|.
name|getURL
argument_list|()
argument_list|,
name|SVNEncodingUtil
operator|.
name|uriEncode
argument_list|(
name|fileName
argument_list|)
argument_list|)
decl_stmt|;
if|if
condition|(
name|copyFromURL
operator|!=
literal|null
operator|&&
name|parentEntry
operator|.
name|getRepositoryRoot
argument_list|()
operator|!=
literal|null
operator|&&
operator|!
name|SVNPathUtil
operator|.
name|isAncestor
argument_list|(
name|parentEntry
operator|.
name|getRepositoryRoot
argument_list|()
argument_list|,
name|copyFromURL
argument_list|)
condition|)
block|{
name|SVNErrorMessage
name|err
init|=
name|SVNErrorMessage
operator|.
name|create
argument_list|(
name|SVNErrorCode
operator|.
name|UNSUPPORTED_FEATURE
argument_list|,
literal|"Copyfrom-url ''{0}'' has different repository root than ''{1}''"
argument_list|,
operator|new
name|Object
index|[]
block|{
name|copyFromURL
block|,
name|parentEntry
operator|.
name|getRepositoryRoot
argument_list|()
block|}
argument_list|)
decl_stmt|;
name|SVNErrorManager
operator|.
name|error
argument_list|(
name|err
argument_list|,
name|SVNLogType
operator|.
name|WC
argument_list|)
expr_stmt|;
block|}
name|SVNEntry
name|dstEntry
init|=
name|dir
operator|.
name|getEntry
argument_list|(
name|fileName
argument_list|,
literal|false
argument_list|)
decl_stmt|;
name|SVNLog
name|log
init|=
name|dir
operator|.
name|getLog
argument_list|()
decl_stmt|;
name|SVNProperties
name|command
init|=
operator|new
name|SVNProperties
argument_list|()
decl_stmt|;
if|if
condition|(
name|dstEntry
operator|!=
literal|null
operator|&&
name|dstEntry
operator|.
name|isScheduledForDeletion
argument_list|()
condition|)
block|{
name|String
name|revertTextPath
init|=
name|SVNAdminUtil
operator|.
name|getTextRevertPath
argument_list|(
name|fileName
argument_list|,
literal|false
argument_list|)
decl_stmt|;
name|String
name|baseTextPath
init|=
name|SVNAdminUtil
operator|.
name|getTextBasePath
argument_list|(
name|fileName
argument_list|,
literal|false
argument_list|)
decl_stmt|;
name|String
name|revertPropsPath
init|=
name|SVNAdminUtil
operator|.
name|getPropRevertPath
argument_list|(
name|fileName
argument_list|,
name|SVNNodeKind
operator|.
name|FILE
argument_list|,
literal|false
argument_list|)
decl_stmt|;
name|String
name|basePropsPath
init|=
name|SVNAdminUtil
operator|.
name|getPropBasePath
argument_list|(
name|fileName
argument_list|,
name|SVNNodeKind
operator|.
name|FILE
argument_list|,
literal|false
argument_list|)
decl_stmt|;
name|command
operator|.
name|put
argument_list|(
name|SVNLog
operator|.
name|NAME_ATTR
argument_list|,
name|baseTextPath
argument_list|)
expr_stmt|;
name|command
operator|.
name|put
argument_list|(
name|SVNLog
operator|.
name|DEST_ATTR
argument_list|,
name|revertTextPath
argument_list|)
expr_stmt|;
name|log
operator|.
name|addCommand
argument_list|(
name|SVNLog
operator|.
name|MOVE
argument_list|,
name|command
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|command
operator|.
name|clear
argument_list|()
expr_stmt|;
if|if
condition|(
name|dir
operator|.
name|getFile
argument_list|(
name|basePropsPath
argument_list|)
operator|.
name|isFile
argument_list|()
condition|)
block|{
name|command
operator|.
name|put
argument_list|(
name|SVNLog
operator|.
name|NAME_ATTR
argument_list|,
name|basePropsPath
argument_list|)
expr_stmt|;
name|command
operator|.
name|put
argument_list|(
name|SVNLog
operator|.
name|DEST_ATTR
argument_list|,
name|revertPropsPath
argument_list|)
expr_stmt|;
name|log
operator|.
name|addCommand
argument_list|(
name|SVNLog
operator|.
name|MOVE
argument_list|,
name|command
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|command
operator|.
name|clear
argument_list|()
expr_stmt|;
block|}
else|else
block|{
name|String
name|emptyPropPath
init|=
name|SVNAdminUtil
operator|.
name|getPropBasePath
argument_list|(
name|fileName
argument_list|,
name|SVNNodeKind
operator|.
name|FILE
argument_list|,
literal|false
argument_list|)
decl_stmt|;
name|SVNWCProperties
operator|.
name|setProperties
argument_list|(
operator|new
name|SVNProperties
argument_list|()
argument_list|,
literal|null
argument_list|,
name|dir
operator|.
name|getFile
argument_list|(
name|emptyPropPath
argument_list|)
argument_list|,
name|SVNWCProperties
operator|.
name|SVN_HASH_TERMINATOR
argument_list|)
expr_stmt|;
name|command
operator|.
name|put
argument_list|(
name|SVNLog
operator|.
name|NAME_ATTR
argument_list|,
name|emptyPropPath
argument_list|)
expr_stmt|;
name|command
operator|.
name|put
argument_list|(
name|SVNLog
operator|.
name|DEST_ATTR
argument_list|,
name|revertPropsPath
argument_list|)
expr_stmt|;
name|log
operator|.
name|addCommand
argument_list|(
name|SVNLog
operator|.
name|MOVE
argument_list|,
name|command
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|command
operator|.
name|clear
argument_list|()
expr_stmt|;
block|}
block|}
name|SVNProperties
name|entryAttrs
init|=
operator|new
name|SVNProperties
argument_list|()
decl_stmt|;
name|entryAttrs
operator|.
name|put
argument_list|(
name|SVNProperty
operator|.
name|shortPropertyName
argument_list|(
name|SVNProperty
operator|.
name|SCHEDULE
argument_list|)
argument_list|,
name|SVNProperty
operator|.
name|SCHEDULE_ADD
argument_list|)
expr_stmt|;
if|if
condition|(
name|copyFromURL
operator|!=
literal|null
condition|)
block|{
name|entryAttrs
operator|.
name|put
argument_list|(
name|SVNProperty
operator|.
name|shortPropertyName
argument_list|(
name|SVNProperty
operator|.
name|COPIED
argument_list|)
argument_list|,
name|SVNProperty
operator|.
name|toString
argument_list|(
literal|true
argument_list|)
argument_list|)
expr_stmt|;
name|entryAttrs
operator|.
name|put
argument_list|(
name|SVNProperty
operator|.
name|shortPropertyName
argument_list|(
name|SVNProperty
operator|.
name|COPYFROM_URL
argument_list|)
argument_list|,
name|copyFromURL
argument_list|)
expr_stmt|;
name|entryAttrs
operator|.
name|put
argument_list|(
name|SVNProperty
operator|.
name|shortPropertyName
argument_list|(
name|SVNProperty
operator|.
name|COPYFROM_REVISION
argument_list|)
argument_list|,
name|SVNProperty
operator|.
name|toString
argument_list|(
name|copyFromRev
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|log
operator|.
name|logChangedEntryProperties
argument_list|(
name|fileName
argument_list|,
name|entryAttrs
argument_list|)
expr_stmt|;
name|entryAttrs
operator|.
name|clear
argument_list|()
expr_stmt|;
name|log
operator|.
name|logTweakEntry
argument_list|(
name|fileName
argument_list|,
name|newURL
argument_list|,
name|dstEntry
operator|!=
literal|null
condition|?
name|dstEntry
operator|.
name|getRevision
argument_list|()
else|:
name|parentEntry
operator|.
name|getRevision
argument_list|()
argument_list|)
expr_stmt|;
name|SVNWCManager
operator|.
name|addProperties
argument_list|(
name|dir
argument_list|,
name|fileName
argument_list|,
name|baseProperties
argument_list|,
literal|true
argument_list|,
name|log
argument_list|)
expr_stmt|;
name|SVNWCManager
operator|.
name|addProperties
argument_list|(
name|dir
argument_list|,
name|fileName
argument_list|,
name|properties
argument_list|,
literal|false
argument_list|,
name|log
argument_list|)
expr_stmt|;
name|File
name|tmpTextBase
init|=
name|dir
operator|.
name|getBaseFile
argument_list|(
name|fileName
argument_list|,
literal|true
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|tmpTextBase
operator|.
name|equals
argument_list|(
name|textBase
argument_list|)
operator|&&
name|textBase
operator|!=
literal|null
condition|)
block|{
name|SVNFileUtil
operator|.
name|rename
argument_list|(
name|textBase
argument_list|,
name|tmpTextBase
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|text
operator|!=
literal|null
condition|)
block|{
name|File
name|tmpFile
init|=
name|SVNFileUtil
operator|.
name|createUniqueFile
argument_list|(
name|dir
operator|.
name|getRoot
argument_list|()
argument_list|,
name|fileName
argument_list|,
literal|".tmp"
argument_list|,
literal|false
argument_list|)
decl_stmt|;
name|SVNFileUtil
operator|.
name|rename
argument_list|(
name|text
argument_list|,
name|tmpFile
argument_list|)
expr_stmt|;
if|if
condition|(
name|baseProperties
operator|!=
literal|null
operator|&&
name|baseProperties
operator|.
name|containsName
argument_list|(
name|SVNProperty
operator|.
name|SPECIAL
argument_list|)
condition|)
block|{
name|command
operator|.
name|put
argument_list|(
name|SVNLog
operator|.
name|NAME_ATTR
argument_list|,
name|tmpFile
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
name|command
operator|.
name|put
argument_list|(
name|SVNLog
operator|.
name|DEST_ATTR
argument_list|,
name|fileName
argument_list|)
expr_stmt|;
name|command
operator|.
name|put
argument_list|(
name|SVNLog
operator|.
name|ATTR1
argument_list|,
literal|"true"
argument_list|)
expr_stmt|;
name|log
operator|.
name|addCommand
argument_list|(
name|SVNLog
operator|.
name|COPY
argument_list|,
name|command
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|command
operator|.
name|clear
argument_list|()
expr_stmt|;
name|command
operator|.
name|put
argument_list|(
name|SVNLog
operator|.
name|NAME_ATTR
argument_list|,
name|tmpFile
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
name|log
operator|.
name|addCommand
argument_list|(
name|SVNLog
operator|.
name|DELETE
argument_list|,
name|command
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|command
operator|.
name|clear
argument_list|()
expr_stmt|;
block|}
else|else
block|{
name|command
operator|.
name|put
argument_list|(
name|SVNLog
operator|.
name|NAME_ATTR
argument_list|,
name|tmpFile
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
name|command
operator|.
name|put
argument_list|(
name|SVNLog
operator|.
name|DEST_ATTR
argument_list|,
name|fileName
argument_list|)
expr_stmt|;
name|log
operator|.
name|addCommand
argument_list|(
name|SVNLog
operator|.
name|MOVE
argument_list|,
name|command
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|command
operator|.
name|clear
argument_list|()
expr_stmt|;
block|}
block|}
else|else
block|{
name|command
operator|.
name|put
argument_list|(
name|SVNLog
operator|.
name|NAME_ATTR
argument_list|,
name|SVNAdminUtil
operator|.
name|getTextBasePath
argument_list|(
name|fileName
argument_list|,
literal|true
argument_list|)
argument_list|)
expr_stmt|;
name|command
operator|.
name|put
argument_list|(
name|SVNLog
operator|.
name|DEST_ATTR
argument_list|,
name|fileName
argument_list|)
expr_stmt|;
name|log
operator|.
name|addCommand
argument_list|(
name|SVNLog
operator|.
name|COPY_AND_TRANSLATE
argument_list|,
name|command
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|command
operator|.
name|clear
argument_list|()
expr_stmt|;
name|command
operator|.
name|put
argument_list|(
name|SVNProperty
operator|.
name|shortPropertyName
argument_list|(
name|SVNProperty
operator|.
name|TEXT_TIME
argument_list|)
argument_list|,
name|SVNLog
operator|.
name|WC_TIMESTAMP
argument_list|)
expr_stmt|;
name|command
operator|.
name|put
argument_list|(
name|SVNProperty
operator|.
name|shortPropertyName
argument_list|(
name|SVNProperty
operator|.
name|WORKING_SIZE
argument_list|)
argument_list|,
name|SVNLog
operator|.
name|WC_WORKING_SIZE
argument_list|)
expr_stmt|;
name|log
operator|.
name|logChangedEntryProperties
argument_list|(
name|fileName
argument_list|,
name|command
argument_list|)
expr_stmt|;
name|command
operator|.
name|clear
argument_list|()
expr_stmt|;
block|}
name|command
operator|.
name|put
argument_list|(
name|SVNLog
operator|.
name|NAME_ATTR
argument_list|,
name|SVNAdminUtil
operator|.
name|getTextBasePath
argument_list|(
name|fileName
argument_list|,
literal|true
argument_list|)
argument_list|)
expr_stmt|;
name|command
operator|.
name|put
argument_list|(
name|SVNLog
operator|.
name|DEST_ATTR
argument_list|,
name|SVNAdminUtil
operator|.
name|getTextBasePath
argument_list|(
name|fileName
argument_list|,
literal|false
argument_list|)
argument_list|)
expr_stmt|;
name|log
operator|.
name|addCommand
argument_list|(
name|SVNLog
operator|.
name|MOVE
argument_list|,
name|command
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|command
operator|.
name|clear
argument_list|()
expr_stmt|;
name|command
operator|.
name|put
argument_list|(
name|SVNLog
operator|.
name|NAME_ATTR
argument_list|,
name|SVNAdminUtil
operator|.
name|getTextBasePath
argument_list|(
name|fileName
argument_list|,
literal|false
argument_list|)
argument_list|)
expr_stmt|;
name|log
operator|.
name|addCommand
argument_list|(
name|SVNLog
operator|.
name|READONLY
argument_list|,
name|command
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|command
operator|.
name|clear
argument_list|()
expr_stmt|;
name|String
name|checksum
init|=
name|SVNFileUtil
operator|.
name|computeChecksum
argument_list|(
name|dir
operator|.
name|getBaseFile
argument_list|(
name|fileName
argument_list|,
literal|true
argument_list|)
argument_list|)
decl_stmt|;
name|entryAttrs
operator|.
name|put
argument_list|(
name|SVNProperty
operator|.
name|shortPropertyName
argument_list|(
name|SVNProperty
operator|.
name|CHECKSUM
argument_list|)
argument_list|,
name|checksum
argument_list|)
expr_stmt|;
name|log
operator|.
name|logChangedEntryProperties
argument_list|(
name|fileName
argument_list|,
name|entryAttrs
argument_list|)
expr_stmt|;
name|entryAttrs
operator|.
name|clear
argument_list|()
expr_stmt|;
name|log
operator|.
name|save
argument_list|()
expr_stmt|;
name|dir
operator|.
name|runLogs
argument_list|()
expr_stmt|;
block|}
specifier|public
specifier|static
name|void
name|addProperties
parameter_list|(
name|SVNAdminArea
name|dir
parameter_list|,
name|String
name|fileName
parameter_list|,
name|SVNProperties
name|properties
parameter_list|,
name|boolean
name|base
parameter_list|,
name|SVNLog
name|log
parameter_list|)
throws|throws
name|SVNException
block|{
if|if
condition|(
name|properties
operator|==
literal|null
operator|||
name|properties
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
return|return;
block|}
name|SVNProperties
name|regularProps
init|=
operator|new
name|SVNProperties
argument_list|()
decl_stmt|;
name|SVNProperties
name|entryProps
init|=
operator|new
name|SVNProperties
argument_list|()
decl_stmt|;
name|SVNProperties
name|wcProps
init|=
operator|new
name|SVNProperties
argument_list|()
decl_stmt|;
for|for
control|(
name|Iterator
name|names
init|=
name|properties
operator|.
name|nameSet
argument_list|()
operator|.
name|iterator
argument_list|()
init|;
name|names
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|String
name|propName
init|=
operator|(
name|String
operator|)
name|names
operator|.
name|next
argument_list|()
decl_stmt|;
name|SVNPropertyValue
name|propValue
init|=
name|properties
operator|.
name|getSVNPropertyValue
argument_list|(
name|propName
argument_list|)
decl_stmt|;
if|if
condition|(
name|SVNProperty
operator|.
name|isEntryProperty
argument_list|(
name|propName
argument_list|)
condition|)
block|{
name|entryProps
operator|.
name|put
argument_list|(
name|SVNProperty
operator|.
name|shortPropertyName
argument_list|(
name|propName
argument_list|)
argument_list|,
name|propValue
argument_list|)
expr_stmt|;
block|}
if|else if
condition|(
name|SVNProperty
operator|.
name|isWorkingCopyProperty
argument_list|(
name|propName
argument_list|)
condition|)
block|{
name|wcProps
operator|.
name|put
argument_list|(
name|propName
argument_list|,
name|propValue
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|regularProps
operator|.
name|put
argument_list|(
name|propName
argument_list|,
name|propValue
argument_list|)
expr_stmt|;
block|}
block|}
name|SVNVersionedProperties
name|props
init|=
name|base
condition|?
name|dir
operator|.
name|getBaseProperties
argument_list|(
name|fileName
argument_list|)
else|:
name|dir
operator|.
name|getProperties
argument_list|(
name|fileName
argument_list|)
decl_stmt|;
name|props
operator|.
name|removeAll
argument_list|()
expr_stmt|;
for|for
control|(
name|Iterator
name|propNames
init|=
name|regularProps
operator|.
name|nameSet
argument_list|()
operator|.
name|iterator
argument_list|()
init|;
name|propNames
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|String
name|propName
init|=
operator|(
name|String
operator|)
name|propNames
operator|.
name|next
argument_list|()
decl_stmt|;
name|SVNPropertyValue
name|propValue
init|=
name|regularProps
operator|.
name|getSVNPropertyValue
argument_list|(
name|propName
argument_list|)
decl_stmt|;
name|props
operator|.
name|setPropertyValue
argument_list|(
name|propName
argument_list|,
name|propValue
argument_list|)
expr_stmt|;
block|}
name|dir
operator|.
name|saveVersionedProperties
argument_list|(
name|log
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|log
operator|.
name|logChangedEntryProperties
argument_list|(
name|fileName
argument_list|,
name|entryProps
argument_list|)
expr_stmt|;
name|log
operator|.
name|logChangedWCProperties
argument_list|(
name|fileName
argument_list|,
name|wcProps
argument_list|)
expr_stmt|;
block|}
specifier|public
specifier|static
name|boolean
name|isEntrySwitched
parameter_list|(
name|File
name|path
parameter_list|,
name|SVNEntry
name|entry
parameter_list|)
throws|throws
name|SVNException
block|{
name|path
operator|=
operator|new
name|Resource
argument_list|(
name|SVNPathUtil
operator|.
name|validateFilePath
argument_list|(
name|path
operator|.
name|getAbsolutePath
argument_list|()
argument_list|)
argument_list|)
operator|.
name|getAbsoluteFile
argument_list|()
expr_stmt|;
name|File
name|parent
init|=
name|path
operator|.
name|getParentFile
argument_list|()
decl_stmt|;
if|if
condition|(
name|parent
operator|==
literal|null
condition|)
block|{
return|return
literal|false
return|;
block|}
name|SVNWCAccess
name|access
init|=
name|SVNWCAccess
operator|.
name|newInstance
argument_list|(
literal|null
argument_list|)
decl_stmt|;
name|SVNAdminArea
name|parentAdminArea
init|=
literal|null
decl_stmt|;
name|SVNEntry
name|parentEntry
init|=
literal|null
decl_stmt|;
try|try
block|{
name|parentAdminArea
operator|=
name|access
operator|.
name|open
argument_list|(
name|parent
argument_list|,
literal|false
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|parentEntry
operator|=
name|parentAdminArea
operator|.
name|getVersionedEntry
argument_list|(
name|parentAdminArea
operator|.
name|getThisDirName
argument_list|()
argument_list|,
literal|false
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|SVNException
name|svne
parameter_list|)
block|{
if|if
condition|(
name|svne
operator|.
name|getErrorMessage
argument_list|()
operator|.
name|getErrorCode
argument_list|()
operator|==
name|SVNErrorCode
operator|.
name|WC_NOT_DIRECTORY
condition|)
block|{
return|return
literal|false
return|;
block|}
throw|throw
name|svne
throw|;
block|}
finally|finally
block|{
name|access
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
name|SVNURL
name|parentSVNURL
init|=
name|parentEntry
operator|.
name|getSVNURL
argument_list|()
decl_stmt|;
name|SVNURL
name|entrySVNURL
init|=
name|entry
operator|.
name|getSVNURL
argument_list|()
decl_stmt|;
if|if
condition|(
name|parentSVNURL
operator|==
literal|null
operator|||
name|entrySVNURL
operator|==
literal|null
condition|)
block|{
name|SVNErrorMessage
name|err
init|=
name|SVNErrorMessage
operator|.
name|create
argument_list|(
name|SVNErrorCode
operator|.
name|ENTRY_MISSING_URL
argument_list|,
literal|"Cannot find a URL for ''{0}''"
argument_list|,
name|parentSVNURL
operator|==
literal|null
condition|?
name|parent
else|:
name|path
argument_list|)
decl_stmt|;
name|SVNErrorManager
operator|.
name|error
argument_list|(
name|err
argument_list|,
name|SVNLogType
operator|.
name|WC
argument_list|)
expr_stmt|;
block|}
name|SVNURL
name|expectedSVNURL
init|=
name|parentSVNURL
operator|.
name|appendPath
argument_list|(
name|path
operator|.
name|getName
argument_list|()
argument_list|,
literal|false
argument_list|)
decl_stmt|;
return|return
operator|!
name|entrySVNURL
operator|.
name|equals
argument_list|(
name|expectedSVNURL
argument_list|)
return|;
block|}
specifier|public
specifier|static
name|void
name|crop
parameter_list|(
name|SVNAdminAreaInfo
name|info
parameter_list|,
name|SVNDepth
name|depth
parameter_list|)
throws|throws
name|SVNException
block|{
if|if
condition|(
name|depth
operator|==
name|SVNDepth
operator|.
name|INFINITY
condition|)
block|{
return|return;
block|}
if|if
condition|(
operator|!
operator|(
name|depth
operator|.
name|compareTo
argument_list|(
name|SVNDepth
operator|.
name|EXCLUDE
argument_list|)
operator|>=
literal|0
operator|&&
name|depth
operator|.
name|compareTo
argument_list|(
name|SVNDepth
operator|.
name|INFINITY
argument_list|)
operator|<
literal|0
operator|)
condition|)
block|{
name|SVNErrorMessage
name|err
init|=
name|SVNErrorMessage
operator|.
name|create
argument_list|(
name|SVNErrorCode
operator|.
name|UNSUPPORTED_FEATURE
argument_list|,
literal|"Can only crop a working copy with a restrictive depth"
argument_list|)
decl_stmt|;
name|SVNErrorManager
operator|.
name|error
argument_list|(
name|err
argument_list|,
name|SVNLogType
operator|.
name|WC
argument_list|)
expr_stmt|;
block|}
comment|// get target entry
name|SVNWCAccess
name|wcAccess
init|=
name|info
operator|.
name|getWCAccess
argument_list|()
decl_stmt|;
name|File
name|fullPath
init|=
name|info
operator|.
name|getAnchor
argument_list|()
operator|.
name|getRoot
argument_list|()
decl_stmt|;
if|if
condition|(
operator|!
literal|""
operator|.
name|equals
argument_list|(
name|info
operator|.
name|getTargetName
argument_list|()
argument_list|)
condition|)
block|{
name|fullPath
operator|=
operator|new
name|Resource
argument_list|(
name|fullPath
argument_list|,
name|info
operator|.
name|getTargetName
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|SVNEntry
name|targetEntry
init|=
name|wcAccess
operator|.
name|getEntry
argument_list|(
name|fullPath
argument_list|,
literal|false
argument_list|)
decl_stmt|;
if|if
condition|(
name|targetEntry
operator|==
literal|null
operator|||
operator|!
name|targetEntry
operator|.
name|isDirectory
argument_list|()
condition|)
block|{
name|SVNErrorMessage
name|err
init|=
name|SVNErrorMessage
operator|.
name|create
argument_list|(
name|SVNErrorCode
operator|.
name|UNSUPPORTED_FEATURE
argument_list|,
literal|"Can only crop directories"
argument_list|)
decl_stmt|;
name|SVNErrorManager
operator|.
name|error
argument_list|(
name|err
argument_list|,
name|SVNLogType
operator|.
name|WC
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|targetEntry
operator|.
name|isScheduledForDeletion
argument_list|()
condition|)
block|{
name|SVNErrorMessage
name|err
init|=
name|SVNErrorMessage
operator|.
name|create
argument_list|(
name|SVNErrorCode
operator|.
name|UNSUPPORTED_FEATURE
argument_list|,
literal|"Cannot crop ''{0}'': it is going to be removed from repository."
operator|+
literal|" Try commit instead"
argument_list|,
name|fullPath
argument_list|)
decl_stmt|;
name|SVNErrorManager
operator|.
name|error
argument_list|(
name|err
argument_list|,
name|SVNLogType
operator|.
name|WC
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|depth
operator|==
name|SVNDepth
operator|.
name|EXCLUDE
condition|)
block|{
if|if
condition|(
name|fullPath
operator|.
name|getParentFile
argument_list|()
operator|==
literal|null
condition|)
block|{
name|SVNErrorMessage
name|err
init|=
name|SVNErrorMessage
operator|.
name|create
argument_list|(
name|SVNErrorCode
operator|.
name|UNSUPPORTED_FEATURE
argument_list|,
literal|"Cannot exclude root directory"
argument_list|)
decl_stmt|;
name|SVNErrorManager
operator|.
name|error
argument_list|(
name|err
argument_list|,
name|SVNLogType
operator|.
name|WC
argument_list|)
expr_stmt|;
block|}
name|SVNAdminArea
name|parentDir
init|=
name|wcAccess
operator|.
name|getAdminArea
argument_list|(
name|fullPath
operator|.
name|getParentFile
argument_list|()
argument_list|)
decl_stmt|;
name|SVNEntry
name|parentEntry
init|=
literal|null
decl_stmt|;
if|if
condition|(
name|parentDir
operator|==
literal|null
condition|)
block|{
try|try
block|{
name|parentDir
operator|=
name|wcAccess
operator|.
name|probeOpen
argument_list|(
name|fullPath
operator|.
name|getParentFile
argument_list|()
argument_list|,
literal|false
argument_list|,
literal|0
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|SVNException
name|e
parameter_list|)
block|{
block|}
block|}
if|if
condition|(
name|parentDir
operator|!=
literal|null
condition|)
block|{
name|parentEntry
operator|=
name|wcAccess
operator|.
name|getEntry
argument_list|(
name|fullPath
operator|.
name|getParentFile
argument_list|()
argument_list|,
literal|false
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|parentEntry
operator|!=
literal|null
condition|)
block|{
name|SVNURL
name|expectedURL
init|=
name|parentEntry
operator|.
name|getSVNURL
argument_list|()
operator|.
name|appendPath
argument_list|(
name|fullPath
operator|.
name|getName
argument_list|()
argument_list|,
literal|false
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|expectedURL
operator|.
name|equals
argument_list|(
name|targetEntry
operator|.
name|getSVNURL
argument_list|()
argument_list|)
condition|)
block|{
name|SVNErrorMessage
name|err
init|=
name|SVNErrorMessage
operator|.
name|create
argument_list|(
name|SVNErrorCode
operator|.
name|UNSUPPORTED_FEATURE
argument_list|,
literal|"Cannot crop ''{0}'': it is a switched path"
argument_list|,
name|fullPath
argument_list|)
decl_stmt|;
name|SVNErrorManager
operator|.
name|error
argument_list|(
name|err
argument_list|,
name|SVNLogType
operator|.
name|WC
argument_list|)
expr_stmt|;
block|}
block|}
name|boolean
name|inRepos
init|=
operator|!
operator|(
operator|(
name|targetEntry
operator|.
name|isScheduledForAddition
argument_list|()
operator|||
name|targetEntry
operator|.
name|isScheduledForReplacement
argument_list|()
operator|)
operator|&&
operator|!
name|targetEntry
operator|.
name|isCopied
argument_list|()
operator|)
decl_stmt|;
if|if
condition|(
name|parentEntry
operator|!=
literal|null
operator|&&
name|inRepos
operator|&&
name|parentEntry
operator|.
name|getDepth
argument_list|()
operator|.
name|compareTo
argument_list|(
name|SVNDepth
operator|.
name|FILES
argument_list|)
operator|>
literal|0
condition|)
block|{
name|SVNEntry
name|entryInParent
init|=
name|parentDir
operator|.
name|getEntry
argument_list|(
name|fullPath
operator|.
name|getName
argument_list|()
argument_list|,
literal|false
argument_list|)
decl_stmt|;
name|entryInParent
operator|.
name|setDepth
argument_list|(
name|SVNDepth
operator|.
name|EXCLUDE
argument_list|)
expr_stmt|;
name|parentDir
operator|.
name|saveEntries
argument_list|(
literal|true
argument_list|)
expr_stmt|;
block|}
comment|// remove dir.
name|SVNAdminArea
name|dir
init|=
name|wcAccess
operator|.
name|retrieve
argument_list|(
name|fullPath
argument_list|)
decl_stmt|;
try|try
block|{
name|dir
operator|.
name|removeFromRevisionControl
argument_list|(
name|dir
operator|.
name|getThisDirName
argument_list|()
argument_list|,
literal|true
argument_list|,
literal|false
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|SVNException
name|svne
parameter_list|)
block|{
name|handleLeftLocalModificationsError
argument_list|(
name|svne
argument_list|)
expr_stmt|;
block|}
name|SVNEvent
name|event
init|=
name|SVNEventFactory
operator|.
name|createSVNEvent
argument_list|(
name|fullPath
argument_list|,
name|SVNNodeKind
operator|.
name|DIR
argument_list|,
literal|null
argument_list|,
name|SVNRepository
operator|.
name|INVALID_REVISION
argument_list|,
name|SVNEventAction
operator|.
name|UPDATE_DELETE
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|)
decl_stmt|;
name|wcAccess
operator|.
name|handleEvent
argument_list|(
name|event
argument_list|)
expr_stmt|;
return|return;
block|}
comment|// crop children.
name|cropChildren
argument_list|(
name|wcAccess
argument_list|,
name|fullPath
argument_list|,
name|depth
argument_list|)
expr_stmt|;
block|}
specifier|public
specifier|static
name|String
name|getActualTarget
parameter_list|(
name|File
name|file
parameter_list|)
throws|throws
name|SVNException
block|{
name|SVNWCAccess
name|wcAccess
init|=
name|SVNWCAccess
operator|.
name|newInstance
argument_list|(
literal|null
argument_list|)
decl_stmt|;
try|try
block|{
name|wcAccess
operator|.
name|probeOpen
argument_list|(
name|file
argument_list|,
literal|false
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|boolean
name|isWCRoot
init|=
name|wcAccess
operator|.
name|isWCRoot
argument_list|(
name|file
argument_list|)
decl_stmt|;
name|SVNEntry
name|entry
init|=
name|wcAccess
operator|.
name|getEntry
argument_list|(
name|file
argument_list|,
literal|false
argument_list|)
decl_stmt|;
name|SVNNodeKind
name|kind
init|=
name|entry
operator|!=
literal|null
condition|?
name|entry
operator|.
name|getKind
argument_list|()
else|:
name|SVNNodeKind
operator|.
name|FILE
decl_stmt|;
if|if
condition|(
name|kind
operator|==
name|SVNNodeKind
operator|.
name|FILE
operator|||
operator|!
name|isWCRoot
condition|)
block|{
return|return
name|file
operator|.
name|getName
argument_list|()
return|;
block|}
block|}
finally|finally
block|{
name|wcAccess
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
return|return
literal|""
return|;
block|}
specifier|public
specifier|static
name|void
name|createRevertProperties
parameter_list|(
name|SVNWCAccess
name|access
parameter_list|,
name|File
name|path
parameter_list|,
comment|/*SVNAdminArea area, SVNLog log, String entryName,*/
name|boolean
name|removeBase
parameter_list|)
throws|throws
name|SVNException
block|{
name|SVNEntry
name|entry
init|=
name|access
operator|.
name|getVersionedEntry
argument_list|(
name|path
argument_list|,
literal|false
argument_list|)
decl_stmt|;
name|String
name|revertPropPath
init|=
name|SVNAdminUtil
operator|.
name|getPropRevertPath
argument_list|(
name|entry
operator|.
name|getName
argument_list|()
argument_list|,
name|entry
operator|.
name|getKind
argument_list|()
argument_list|,
literal|false
argument_list|)
decl_stmt|;
name|String
name|basePropPath
init|=
name|SVNAdminUtil
operator|.
name|getPropBasePath
argument_list|(
name|entry
operator|.
name|getName
argument_list|()
argument_list|,
name|entry
operator|.
name|getKind
argument_list|()
argument_list|,
literal|false
argument_list|)
decl_stmt|;
name|SVNAdminArea
name|area
init|=
name|entry
operator|.
name|getAdminArea
argument_list|()
decl_stmt|;
name|SVNLog
name|log
init|=
name|area
operator|.
name|getLog
argument_list|()
decl_stmt|;
name|File
name|basePropFile
init|=
name|area
operator|.
name|getFile
argument_list|(
name|basePropPath
argument_list|)
decl_stmt|;
if|if
condition|(
name|basePropFile
operator|.
name|isFile
argument_list|()
condition|)
block|{
name|SVNProperties
name|command
init|=
operator|new
name|SVNProperties
argument_list|()
decl_stmt|;
name|command
operator|.
name|put
argument_list|(
name|SVNLog
operator|.
name|NAME_ATTR
argument_list|,
name|basePropPath
argument_list|)
expr_stmt|;
name|command
operator|.
name|put
argument_list|(
name|SVNLog
operator|.
name|DEST_ATTR
argument_list|,
name|revertPropPath
argument_list|)
expr_stmt|;
if|if
condition|(
name|removeBase
condition|)
block|{
name|log
operator|.
name|addCommand
argument_list|(
name|SVNLog
operator|.
name|MOVE
argument_list|,
name|command
argument_list|,
literal|false
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|log
operator|.
name|addCommand
argument_list|(
name|SVNLog
operator|.
name|COPY
argument_list|,
name|command
argument_list|,
literal|false
argument_list|)
expr_stmt|;
block|}
block|}
else|else
block|{
comment|// create empty props file and move it to revert props.
name|String
name|tmpPath
init|=
name|SVNAdminUtil
operator|.
name|getPropRevertPath
argument_list|(
name|entry
operator|.
name|getName
argument_list|()
argument_list|,
name|entry
operator|.
name|getKind
argument_list|()
argument_list|,
literal|true
argument_list|)
decl_stmt|;
name|File
name|tmpFile
init|=
name|area
operator|.
name|getFile
argument_list|(
name|tmpPath
argument_list|)
decl_stmt|;
name|SVNWCProperties
operator|.
name|setProperties
argument_list|(
operator|new
name|SVNProperties
argument_list|()
argument_list|,
name|tmpFile
argument_list|,
literal|null
argument_list|,
name|SVNWCProperties
operator|.
name|SVN_HASH_TERMINATOR
argument_list|)
expr_stmt|;
name|SVNProperties
name|command
init|=
operator|new
name|SVNProperties
argument_list|()
decl_stmt|;
name|command
operator|.
name|put
argument_list|(
name|SVNLog
operator|.
name|NAME_ATTR
argument_list|,
name|tmpPath
argument_list|)
expr_stmt|;
name|command
operator|.
name|put
argument_list|(
name|SVNLog
operator|.
name|DEST_ATTR
argument_list|,
name|revertPropPath
argument_list|)
expr_stmt|;
name|log
operator|.
name|addCommand
argument_list|(
name|SVNLog
operator|.
name|MOVE
argument_list|,
name|command
argument_list|,
literal|false
argument_list|)
expr_stmt|;
block|}
name|log
operator|.
name|save
argument_list|()
expr_stmt|;
name|area
operator|.
name|runLogs
argument_list|()
expr_stmt|;
block|}
specifier|private
specifier|static
name|void
name|cropChildren
parameter_list|(
name|SVNWCAccess
name|wcAccess
parameter_list|,
name|File
name|path
parameter_list|,
name|SVNDepth
name|depth
parameter_list|)
throws|throws
name|SVNException
block|{
name|SVNAdminArea
name|dir
init|=
name|wcAccess
operator|.
name|retrieve
argument_list|(
name|path
argument_list|)
decl_stmt|;
name|SVNEntry
name|dotEntry
init|=
name|dir
operator|.
name|getEntry
argument_list|(
name|dir
operator|.
name|getThisDirName
argument_list|()
argument_list|,
literal|false
argument_list|)
decl_stmt|;
if|if
condition|(
name|dotEntry
operator|.
name|getDepth
argument_list|()
operator|.
name|compareTo
argument_list|(
name|depth
argument_list|)
operator|>
literal|0
condition|)
block|{
name|dotEntry
operator|.
name|setDepth
argument_list|(
name|depth
argument_list|)
expr_stmt|;
name|dir
operator|.
name|saveEntries
argument_list|(
literal|false
argument_list|)
expr_stmt|;
block|}
for|for
control|(
name|Iterator
name|ents
init|=
name|dir
operator|.
name|entries
argument_list|(
literal|true
argument_list|)
init|;
name|ents
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|SVNEntry
name|entry
init|=
operator|(
name|SVNEntry
operator|)
name|ents
operator|.
name|next
argument_list|()
decl_stmt|;
if|if
condition|(
name|entry
operator|.
name|isThisDir
argument_list|()
condition|)
block|{
continue|continue;
block|}
name|File
name|entryPath
init|=
operator|new
name|Resource
argument_list|(
name|path
argument_list|,
name|entry
operator|.
name|getName
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|entry
operator|.
name|isFile
argument_list|()
condition|)
block|{
if|if
condition|(
name|depth
operator|==
name|SVNDepth
operator|.
name|EMPTY
condition|)
block|{
try|try
block|{
name|dir
operator|.
name|removeFromRevisionControl
argument_list|(
name|entry
operator|.
name|getName
argument_list|()
argument_list|,
literal|true
argument_list|,
literal|false
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|SVNException
name|e
parameter_list|)
block|{
name|handleLeftLocalModificationsError
argument_list|(
name|e
argument_list|)
expr_stmt|;
block|}
block|}
else|else
block|{
continue|continue;
block|}
block|}
if|else if
condition|(
name|entry
operator|.
name|isDirectory
argument_list|()
condition|)
block|{
if|if
condition|(
name|entry
operator|.
name|getDepth
argument_list|()
operator|==
name|SVNDepth
operator|.
name|EXCLUDE
condition|)
block|{
if|if
condition|(
name|depth
operator|.
name|compareTo
argument_list|(
name|SVNDepth
operator|.
name|IMMEDIATES
argument_list|)
operator|<
literal|0
condition|)
block|{
name|dir
operator|.
name|deleteEntry
argument_list|(
name|entry
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
name|dir
operator|.
name|saveEntries
argument_list|(
literal|false
argument_list|)
expr_stmt|;
block|}
continue|continue;
block|}
if|else if
condition|(
name|depth
operator|.
name|compareTo
argument_list|(
name|SVNDepth
operator|.
name|IMMEDIATES
argument_list|)
operator|<
literal|0
condition|)
block|{
name|SVNAdminArea
name|childDir
init|=
name|wcAccess
operator|.
name|retrieve
argument_list|(
name|entryPath
argument_list|)
decl_stmt|;
try|try
block|{
name|childDir
operator|.
name|removeFromRevisionControl
argument_list|(
name|childDir
operator|.
name|getThisDirName
argument_list|()
argument_list|,
literal|true
argument_list|,
literal|false
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|SVNException
name|e
parameter_list|)
block|{
name|handleLeftLocalModificationsError
argument_list|(
name|e
argument_list|)
expr_stmt|;
block|}
block|}
else|else
block|{
name|cropChildren
argument_list|(
name|wcAccess
argument_list|,
name|entryPath
argument_list|,
name|SVNDepth
operator|.
name|EMPTY
argument_list|)
expr_stmt|;
continue|continue;
block|}
block|}
else|else
block|{
name|SVNErrorMessage
name|err
init|=
name|SVNErrorMessage
operator|.
name|create
argument_list|(
name|SVNErrorCode
operator|.
name|NODE_UNKNOWN_KIND
argument_list|,
literal|"Unknown entry kind for ''{0}''"
argument_list|,
name|entryPath
argument_list|)
decl_stmt|;
name|SVNErrorManager
operator|.
name|error
argument_list|(
name|err
argument_list|,
name|SVNLogType
operator|.
name|WC
argument_list|)
expr_stmt|;
block|}
name|SVNEvent
name|event
init|=
name|SVNEventFactory
operator|.
name|createSVNEvent
argument_list|(
name|entryPath
argument_list|,
name|entry
operator|.
name|getKind
argument_list|()
argument_list|,
literal|null
argument_list|,
name|SVNRepository
operator|.
name|INVALID_REVISION
argument_list|,
name|SVNEventAction
operator|.
name|UPDATE_DELETE
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|)
decl_stmt|;
name|wcAccess
operator|.
name|handleEvent
argument_list|(
name|event
argument_list|)
expr_stmt|;
block|}
block|}
specifier|private
specifier|static
name|void
name|handleLeftLocalModificationsError
parameter_list|(
name|SVNException
name|originalError
parameter_list|)
throws|throws
name|SVNException
block|{
name|SVNException
name|error
init|=
literal|null
decl_stmt|;
for|for
control|(
name|error
operator|=
name|originalError
init|;
name|error
operator|!=
literal|null
condition|;
control|)
block|{
if|if
condition|(
name|error
operator|.
name|getErrorMessage
argument_list|()
operator|.
name|getErrorCode
argument_list|()
operator|==
name|SVNErrorCode
operator|.
name|WC_LEFT_LOCAL_MOD
condition|)
block|{
break|break;
block|}
name|error
operator|=
operator|(
name|error
operator|.
name|getCause
argument_list|()
operator|instanceof
name|SVNException
operator|)
condition|?
operator|(
name|SVNException
operator|)
name|error
operator|.
name|getCause
argument_list|()
else|:
literal|null
expr_stmt|;
block|}
if|if
condition|(
name|error
operator|!=
literal|null
condition|)
block|{
return|return;
block|}
throw|throw
name|originalError
throw|;
block|}
block|}
end_class

end_unit

