begin_unit|revision:1.0.0;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * ====================================================================  * Copyright (c) 2004-2010 TMate Software Ltd.  All rights reserved.  *  * This software is licensed as described in the file COPYING, which  * you should have received as part of this distribution.  The terms  * are also available at http://svnkit.com/license.html  * If newer versions of this license are posted there, you may use a  * newer version instead, at your option.  * ====================================================================  */
end_comment

begin_package
package|package
name|org
operator|.
name|exist
operator|.
name|versioning
operator|.
name|svn
operator|.
name|internal
operator|.
name|wc
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|File
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|InputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|OutputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collection
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Iterator
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|TreeMap
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|versioning
operator|.
name|svn
operator|.
name|internal
operator|.
name|wc
operator|.
name|admin
operator|.
name|SVNAdminArea
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|versioning
operator|.
name|svn
operator|.
name|internal
operator|.
name|wc
operator|.
name|admin
operator|.
name|SVNChecksumInputStream
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|versioning
operator|.
name|svn
operator|.
name|internal
operator|.
name|wc
operator|.
name|admin
operator|.
name|SVNEntry
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|versioning
operator|.
name|svn
operator|.
name|internal
operator|.
name|wc
operator|.
name|admin
operator|.
name|SVNTranslator
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|versioning
operator|.
name|svn
operator|.
name|internal
operator|.
name|wc
operator|.
name|admin
operator|.
name|SVNVersionedProperties
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|versioning
operator|.
name|svn
operator|.
name|internal
operator|.
name|wc
operator|.
name|admin
operator|.
name|SVNWCAccess
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|versioning
operator|.
name|svn
operator|.
name|wc
operator|.
name|ISVNEventHandler
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|versioning
operator|.
name|svn
operator|.
name|wc
operator|.
name|SVNCommitItem
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|versioning
operator|.
name|svn
operator|.
name|wc
operator|.
name|SVNEvent
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|versioning
operator|.
name|svn
operator|.
name|wc
operator|.
name|SVNEventAction
import|;
end_import

begin_import
import|import
name|org
operator|.
name|tmatesoft
operator|.
name|svn
operator|.
name|core
operator|.
name|SVNCommitInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|tmatesoft
operator|.
name|svn
operator|.
name|core
operator|.
name|SVNErrorCode
import|;
end_import

begin_import
import|import
name|org
operator|.
name|tmatesoft
operator|.
name|svn
operator|.
name|core
operator|.
name|SVNErrorMessage
import|;
end_import

begin_import
import|import
name|org
operator|.
name|tmatesoft
operator|.
name|svn
operator|.
name|core
operator|.
name|SVNException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|tmatesoft
operator|.
name|svn
operator|.
name|core
operator|.
name|SVNNodeKind
import|;
end_import

begin_import
import|import
name|org
operator|.
name|tmatesoft
operator|.
name|svn
operator|.
name|core
operator|.
name|SVNProperties
import|;
end_import

begin_import
import|import
name|org
operator|.
name|tmatesoft
operator|.
name|svn
operator|.
name|core
operator|.
name|SVNProperty
import|;
end_import

begin_import
import|import
name|org
operator|.
name|tmatesoft
operator|.
name|svn
operator|.
name|core
operator|.
name|SVNPropertyValue
import|;
end_import

begin_import
import|import
name|org
operator|.
name|tmatesoft
operator|.
name|svn
operator|.
name|core
operator|.
name|SVNURL
import|;
end_import

begin_import
import|import
name|org
operator|.
name|tmatesoft
operator|.
name|svn
operator|.
name|core
operator|.
name|internal
operator|.
name|util
operator|.
name|SVNPathUtil
import|;
end_import

begin_import
import|import
name|org
operator|.
name|tmatesoft
operator|.
name|svn
operator|.
name|core
operator|.
name|internal
operator|.
name|wc
operator|.
name|ISVNCommitPathHandler
import|;
end_import

begin_import
import|import
name|org
operator|.
name|tmatesoft
operator|.
name|svn
operator|.
name|core
operator|.
name|io
operator|.
name|ISVNEditor
import|;
end_import

begin_import
import|import
name|org
operator|.
name|tmatesoft
operator|.
name|svn
operator|.
name|core
operator|.
name|io
operator|.
name|SVNRepository
import|;
end_import

begin_import
import|import
name|org
operator|.
name|tmatesoft
operator|.
name|svn
operator|.
name|core
operator|.
name|io
operator|.
name|diff
operator|.
name|SVNDeltaGenerator
import|;
end_import

begin_import
import|import
name|org
operator|.
name|tmatesoft
operator|.
name|svn
operator|.
name|util
operator|.
name|SVNLogType
import|;
end_import

begin_comment
comment|/**  * @version 1.3  * @author  TMate Software Ltd.  */
end_comment

begin_class
specifier|public
class|class
name|SVNCommitter
implements|implements
name|ISVNCommitPathHandler
block|{
specifier|private
name|Map
name|myCommitItems
decl_stmt|;
specifier|private
name|Map
name|myModifiedFiles
decl_stmt|;
specifier|private
name|Collection
name|myTmpFiles
decl_stmt|;
specifier|private
name|String
name|myRepositoryRoot
decl_stmt|;
specifier|private
name|SVNDeltaGenerator
name|myDeltaGenerator
decl_stmt|;
specifier|public
name|SVNCommitter
parameter_list|(
name|Map
name|commitItems
parameter_list|,
name|String
name|reposRoot
parameter_list|,
name|Collection
name|tmpFiles
parameter_list|)
block|{
name|myCommitItems
operator|=
name|commitItems
expr_stmt|;
name|myModifiedFiles
operator|=
operator|new
name|TreeMap
argument_list|()
expr_stmt|;
name|myTmpFiles
operator|=
name|tmpFiles
expr_stmt|;
name|myRepositoryRoot
operator|=
name|reposRoot
expr_stmt|;
block|}
specifier|public
name|boolean
name|handleCommitPath
parameter_list|(
name|String
name|commitPath
parameter_list|,
name|ISVNEditor
name|commitEditor
parameter_list|)
throws|throws
name|SVNException
block|{
name|SVNCommitItem
name|item
init|=
operator|(
name|SVNCommitItem
operator|)
name|myCommitItems
operator|.
name|get
argument_list|(
name|commitPath
argument_list|)
decl_stmt|;
name|SVNWCAccess
name|wcAccess
init|=
name|item
operator|.
name|getWCAccess
argument_list|()
decl_stmt|;
name|wcAccess
operator|.
name|checkCancelled
argument_list|()
expr_stmt|;
if|if
condition|(
name|item
operator|.
name|isCopied
argument_list|()
condition|)
block|{
if|if
condition|(
name|item
operator|.
name|getCopyFromURL
argument_list|()
operator|==
literal|null
condition|)
block|{
name|SVNErrorMessage
name|err
init|=
name|SVNErrorMessage
operator|.
name|create
argument_list|(
name|SVNErrorCode
operator|.
name|BAD_URL
argument_list|,
literal|"Commit item ''{0}'' has copy flag but no copyfrom URL"
argument_list|,
name|item
operator|.
name|getFile
argument_list|()
argument_list|)
decl_stmt|;
name|SVNErrorManager
operator|.
name|error
argument_list|(
name|err
argument_list|,
name|SVNLogType
operator|.
name|WC
argument_list|)
expr_stmt|;
block|}
if|else if
condition|(
name|item
operator|.
name|getRevision
argument_list|()
operator|.
name|getNumber
argument_list|()
operator|<
literal|0
condition|)
block|{
name|SVNErrorMessage
name|err
init|=
name|SVNErrorMessage
operator|.
name|create
argument_list|(
name|SVNErrorCode
operator|.
name|CLIENT_BAD_REVISION
argument_list|,
literal|"Commit item ''{0}'' has copy flag but an invalid revision"
argument_list|,
name|item
operator|.
name|getFile
argument_list|()
argument_list|)
decl_stmt|;
name|SVNErrorManager
operator|.
name|error
argument_list|(
name|err
argument_list|,
name|SVNLogType
operator|.
name|WC
argument_list|)
expr_stmt|;
block|}
block|}
name|SVNEvent
name|event
init|=
literal|null
decl_stmt|;
name|boolean
name|closeDir
init|=
literal|false
decl_stmt|;
name|File
name|file
init|=
literal|null
decl_stmt|;
if|if
condition|(
name|item
operator|.
name|getFile
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|file
operator|=
name|item
operator|.
name|getFile
argument_list|()
expr_stmt|;
block|}
if|else if
condition|(
name|item
operator|.
name|getPath
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|file
operator|=
operator|new
name|File
argument_list|(
name|wcAccess
operator|.
name|getAnchor
argument_list|()
argument_list|,
name|item
operator|.
name|getPath
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|long
name|rev
init|=
name|item
operator|.
name|getRevision
argument_list|()
operator|.
name|getNumber
argument_list|()
decl_stmt|;
if|if
condition|(
name|item
operator|.
name|isAdded
argument_list|()
operator|&&
name|item
operator|.
name|isDeleted
argument_list|()
condition|)
block|{
name|event
operator|=
name|SVNEventFactory
operator|.
name|createSVNEvent
argument_list|(
name|file
argument_list|,
name|item
operator|.
name|getKind
argument_list|()
argument_list|,
literal|null
argument_list|,
name|SVNRepository
operator|.
name|INVALID_REVISION
argument_list|,
name|SVNEventAction
operator|.
name|COMMIT_REPLACED
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|)
expr_stmt|;
name|event
operator|.
name|setPreviousRevision
argument_list|(
name|rev
argument_list|)
expr_stmt|;
block|}
if|else if
condition|(
name|item
operator|.
name|isAdded
argument_list|()
condition|)
block|{
name|String
name|mimeType
init|=
literal|null
decl_stmt|;
if|if
condition|(
name|item
operator|.
name|getKind
argument_list|()
operator|==
name|SVNNodeKind
operator|.
name|FILE
operator|&&
name|file
operator|!=
literal|null
condition|)
block|{
name|SVNAdminArea
name|dir
init|=
name|item
operator|.
name|getWCAccess
argument_list|()
operator|.
name|retrieve
argument_list|(
name|file
operator|.
name|getParentFile
argument_list|()
argument_list|)
decl_stmt|;
name|mimeType
operator|=
name|dir
operator|.
name|getProperties
argument_list|(
name|file
operator|.
name|getName
argument_list|()
argument_list|)
operator|.
name|getStringPropertyValue
argument_list|(
name|SVNProperty
operator|.
name|MIME_TYPE
argument_list|)
expr_stmt|;
block|}
name|event
operator|=
name|SVNEventFactory
operator|.
name|createSVNEvent
argument_list|(
name|file
argument_list|,
name|item
operator|.
name|getKind
argument_list|()
argument_list|,
name|mimeType
argument_list|,
name|SVNRepository
operator|.
name|INVALID_REVISION
argument_list|,
name|SVNEventAction
operator|.
name|COMMIT_ADDED
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|)
expr_stmt|;
name|event
operator|.
name|setPreviousRevision
argument_list|(
name|item
operator|.
name|getCopyFromRevision
argument_list|()
operator|!=
literal|null
condition|?
name|item
operator|.
name|getCopyFromRevision
argument_list|()
operator|.
name|getNumber
argument_list|()
else|:
operator|-
literal|1
argument_list|)
expr_stmt|;
name|event
operator|.
name|setPreviousURL
argument_list|(
name|item
operator|.
name|getCopyFromURL
argument_list|()
argument_list|)
expr_stmt|;
block|}
if|else if
condition|(
name|item
operator|.
name|isDeleted
argument_list|()
condition|)
block|{
name|event
operator|=
name|SVNEventFactory
operator|.
name|createSVNEvent
argument_list|(
name|file
argument_list|,
name|item
operator|.
name|getKind
argument_list|()
argument_list|,
literal|null
argument_list|,
name|SVNRepository
operator|.
name|INVALID_REVISION
argument_list|,
name|SVNEventAction
operator|.
name|COMMIT_DELETED
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|)
expr_stmt|;
name|event
operator|.
name|setPreviousRevision
argument_list|(
name|rev
argument_list|)
expr_stmt|;
block|}
if|else if
condition|(
name|item
operator|.
name|isContentsModified
argument_list|()
operator|||
name|item
operator|.
name|isPropertiesModified
argument_list|()
condition|)
block|{
name|event
operator|=
name|SVNEventFactory
operator|.
name|createSVNEvent
argument_list|(
name|file
argument_list|,
name|item
operator|.
name|getKind
argument_list|()
argument_list|,
literal|null
argument_list|,
name|SVNRepository
operator|.
name|INVALID_REVISION
argument_list|,
name|SVNEventAction
operator|.
name|COMMIT_MODIFIED
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|)
expr_stmt|;
name|event
operator|.
name|setPreviousRevision
argument_list|(
name|rev
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|event
operator|!=
literal|null
condition|)
block|{
name|event
operator|.
name|setURL
argument_list|(
name|item
operator|.
name|getURL
argument_list|()
argument_list|)
expr_stmt|;
name|wcAccess
operator|.
name|handleEvent
argument_list|(
name|event
argument_list|,
name|ISVNEventHandler
operator|.
name|UNKNOWN
argument_list|)
expr_stmt|;
block|}
name|long
name|cfRev
init|=
name|item
operator|.
name|getCopyFromRevision
argument_list|()
operator|.
name|getNumber
argument_list|()
decl_stmt|;
comment|//item.getCopyFromURL() != null ? rev : -1;
if|if
condition|(
name|item
operator|.
name|isDeleted
argument_list|()
condition|)
block|{
try|try
block|{
name|commitEditor
operator|.
name|deleteEntry
argument_list|(
name|commitPath
argument_list|,
name|rev
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|SVNException
name|e
parameter_list|)
block|{
name|fixError
argument_list|(
name|commitPath
argument_list|,
name|e
argument_list|,
name|SVNNodeKind
operator|.
name|FILE
argument_list|)
expr_stmt|;
block|}
block|}
name|boolean
name|fileOpen
init|=
literal|false
decl_stmt|;
name|Map
name|outgoingProperties
init|=
name|item
operator|.
name|getOutgoingProperties
argument_list|()
decl_stmt|;
if|if
condition|(
name|item
operator|.
name|isAdded
argument_list|()
condition|)
block|{
name|String
name|copyFromPath
init|=
name|getCopyFromPath
argument_list|(
name|item
operator|.
name|getCopyFromURL
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|item
operator|.
name|getKind
argument_list|()
operator|==
name|SVNNodeKind
operator|.
name|FILE
condition|)
block|{
name|commitEditor
operator|.
name|addFile
argument_list|(
name|commitPath
argument_list|,
name|copyFromPath
argument_list|,
name|cfRev
argument_list|)
expr_stmt|;
name|fileOpen
operator|=
literal|true
expr_stmt|;
block|}
else|else
block|{
name|commitEditor
operator|.
name|addDir
argument_list|(
name|commitPath
argument_list|,
name|copyFromPath
argument_list|,
name|cfRev
argument_list|)
expr_stmt|;
name|closeDir
operator|=
literal|true
expr_stmt|;
block|}
if|if
condition|(
name|outgoingProperties
operator|!=
literal|null
condition|)
block|{
for|for
control|(
name|Iterator
name|propsIter
init|=
name|outgoingProperties
operator|.
name|keySet
argument_list|()
operator|.
name|iterator
argument_list|()
init|;
name|propsIter
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|String
name|propName
init|=
operator|(
name|String
operator|)
name|propsIter
operator|.
name|next
argument_list|()
decl_stmt|;
name|SVNPropertyValue
name|propValue
init|=
operator|(
name|SVNPropertyValue
operator|)
name|outgoingProperties
operator|.
name|get
argument_list|(
name|propName
argument_list|)
decl_stmt|;
if|if
condition|(
name|item
operator|.
name|getKind
argument_list|()
operator|==
name|SVNNodeKind
operator|.
name|FILE
condition|)
block|{
name|commitEditor
operator|.
name|changeFileProperty
argument_list|(
name|commitPath
argument_list|,
name|propName
argument_list|,
name|propValue
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|commitEditor
operator|.
name|changeDirProperty
argument_list|(
name|propName
argument_list|,
name|propValue
argument_list|)
expr_stmt|;
block|}
block|}
name|outgoingProperties
operator|=
literal|null
expr_stmt|;
block|}
block|}
if|if
condition|(
name|item
operator|.
name|isPropertiesModified
argument_list|()
operator|||
operator|(
name|outgoingProperties
operator|!=
literal|null
operator|&&
operator|!
name|outgoingProperties
operator|.
name|isEmpty
argument_list|()
operator|)
condition|)
block|{
if|if
condition|(
name|item
operator|.
name|getKind
argument_list|()
operator|==
name|SVNNodeKind
operator|.
name|FILE
condition|)
block|{
if|if
condition|(
operator|!
name|fileOpen
condition|)
block|{
try|try
block|{
name|commitEditor
operator|.
name|openFile
argument_list|(
name|commitPath
argument_list|,
name|rev
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|SVNException
name|e
parameter_list|)
block|{
name|fixError
argument_list|(
name|commitPath
argument_list|,
name|e
argument_list|,
name|SVNNodeKind
operator|.
name|FILE
argument_list|)
expr_stmt|;
block|}
block|}
name|fileOpen
operator|=
literal|true
expr_stmt|;
block|}
if|else if
condition|(
operator|!
name|item
operator|.
name|isAdded
argument_list|()
condition|)
block|{
comment|// do not open dir twice.
try|try
block|{
if|if
condition|(
literal|""
operator|.
name|equals
argument_list|(
name|commitPath
argument_list|)
condition|)
block|{
name|commitEditor
operator|.
name|openRoot
argument_list|(
name|rev
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|commitEditor
operator|.
name|openDir
argument_list|(
name|commitPath
argument_list|,
name|rev
argument_list|)
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
name|SVNException
name|svne
parameter_list|)
block|{
name|fixError
argument_list|(
name|commitPath
argument_list|,
name|svne
argument_list|,
name|SVNNodeKind
operator|.
name|DIR
argument_list|)
expr_stmt|;
block|}
name|closeDir
operator|=
literal|true
expr_stmt|;
block|}
if|if
condition|(
name|item
operator|.
name|isPropertiesModified
argument_list|()
condition|)
block|{
try|try
block|{
name|sendPropertiesDelta
argument_list|(
name|commitPath
argument_list|,
name|item
argument_list|,
name|commitEditor
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|SVNException
name|e
parameter_list|)
block|{
name|fixError
argument_list|(
name|commitPath
argument_list|,
name|e
argument_list|,
name|item
operator|.
name|getKind
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
if|if
condition|(
name|outgoingProperties
operator|!=
literal|null
condition|)
block|{
for|for
control|(
name|Iterator
name|propsIter
init|=
name|outgoingProperties
operator|.
name|keySet
argument_list|()
operator|.
name|iterator
argument_list|()
init|;
name|propsIter
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|String
name|propName
init|=
operator|(
name|String
operator|)
name|propsIter
operator|.
name|next
argument_list|()
decl_stmt|;
name|SVNPropertyValue
name|propValue
init|=
operator|(
name|SVNPropertyValue
operator|)
name|outgoingProperties
operator|.
name|get
argument_list|(
name|propName
argument_list|)
decl_stmt|;
if|if
condition|(
name|item
operator|.
name|getKind
argument_list|()
operator|==
name|SVNNodeKind
operator|.
name|FILE
condition|)
block|{
name|commitEditor
operator|.
name|changeFileProperty
argument_list|(
name|commitPath
argument_list|,
name|propName
argument_list|,
name|propValue
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|commitEditor
operator|.
name|changeDirProperty
argument_list|(
name|propName
argument_list|,
name|propValue
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
if|if
condition|(
name|item
operator|.
name|isContentsModified
argument_list|()
operator|&&
name|item
operator|.
name|getKind
argument_list|()
operator|==
name|SVNNodeKind
operator|.
name|FILE
condition|)
block|{
if|if
condition|(
operator|!
name|fileOpen
condition|)
block|{
try|try
block|{
name|commitEditor
operator|.
name|openFile
argument_list|(
name|commitPath
argument_list|,
name|rev
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|SVNException
name|e
parameter_list|)
block|{
name|fixError
argument_list|(
name|commitPath
argument_list|,
name|e
argument_list|,
name|SVNNodeKind
operator|.
name|FILE
argument_list|)
expr_stmt|;
block|}
block|}
name|myModifiedFiles
operator|.
name|put
argument_list|(
name|commitPath
argument_list|,
name|item
argument_list|)
expr_stmt|;
block|}
if|else if
condition|(
name|fileOpen
condition|)
block|{
name|commitEditor
operator|.
name|closeFile
argument_list|(
name|commitPath
argument_list|,
literal|null
argument_list|)
expr_stmt|;
block|}
return|return
name|closeDir
return|;
block|}
specifier|public
name|void
name|sendTextDeltas
parameter_list|(
name|ISVNEditor
name|editor
parameter_list|)
throws|throws
name|SVNException
block|{
for|for
control|(
name|Iterator
name|paths
init|=
name|myModifiedFiles
operator|.
name|keySet
argument_list|()
operator|.
name|iterator
argument_list|()
init|;
name|paths
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|String
name|path
init|=
operator|(
name|String
operator|)
name|paths
operator|.
name|next
argument_list|()
decl_stmt|;
name|SVNCommitItem
name|item
init|=
operator|(
name|SVNCommitItem
operator|)
name|myModifiedFiles
operator|.
name|get
argument_list|(
name|path
argument_list|)
decl_stmt|;
name|SVNWCAccess
name|wcAccess
init|=
name|item
operator|.
name|getWCAccess
argument_list|()
decl_stmt|;
name|wcAccess
operator|.
name|checkCancelled
argument_list|()
expr_stmt|;
name|SVNEvent
name|event
init|=
name|SVNEventFactory
operator|.
name|createSVNEvent
argument_list|(
operator|new
name|File
argument_list|(
name|wcAccess
operator|.
name|getAnchor
argument_list|()
argument_list|,
name|item
operator|.
name|getPath
argument_list|()
argument_list|)
argument_list|,
name|SVNNodeKind
operator|.
name|FILE
argument_list|,
literal|null
argument_list|,
name|SVNRepository
operator|.
name|INVALID_REVISION
argument_list|,
name|SVNEventAction
operator|.
name|COMMIT_DELTA_SENT
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|)
decl_stmt|;
name|wcAccess
operator|.
name|handleEvent
argument_list|(
name|event
argument_list|,
name|ISVNEventHandler
operator|.
name|UNKNOWN
argument_list|)
expr_stmt|;
name|SVNAdminArea
name|dir
init|=
name|wcAccess
operator|.
name|retrieve
argument_list|(
name|item
operator|.
name|getFile
argument_list|()
operator|.
name|getParentFile
argument_list|()
argument_list|)
decl_stmt|;
name|String
name|name
init|=
name|SVNPathUtil
operator|.
name|tail
argument_list|(
name|item
operator|.
name|getPath
argument_list|()
argument_list|)
decl_stmt|;
name|SVNEntry
name|entry
init|=
name|dir
operator|.
name|getEntry
argument_list|(
name|name
argument_list|,
literal|false
argument_list|)
decl_stmt|;
name|File
name|tmpFile
init|=
name|dir
operator|.
name|getBaseFile
argument_list|(
name|name
argument_list|,
literal|true
argument_list|)
decl_stmt|;
name|myTmpFiles
operator|.
name|add
argument_list|(
name|tmpFile
argument_list|)
expr_stmt|;
name|String
name|expectedChecksum
init|=
literal|null
decl_stmt|;
name|String
name|checksum
init|=
literal|null
decl_stmt|;
name|String
name|newChecksum
init|=
literal|null
decl_stmt|;
name|SVNChecksumInputStream
name|baseChecksummedIS
init|=
literal|null
decl_stmt|;
name|InputStream
name|sourceIS
init|=
literal|null
decl_stmt|;
name|InputStream
name|targetIS
init|=
literal|null
decl_stmt|;
name|OutputStream
name|tmpBaseStream
init|=
literal|null
decl_stmt|;
name|File
name|baseFile
init|=
name|dir
operator|.
name|getBaseFile
argument_list|(
name|name
argument_list|,
literal|false
argument_list|)
decl_stmt|;
name|SVNErrorMessage
name|error
init|=
literal|null
decl_stmt|;
name|boolean
name|useChecksummedStream
init|=
literal|false
decl_stmt|;
name|boolean
name|openSrcStream
init|=
literal|false
decl_stmt|;
if|if
condition|(
operator|!
name|item
operator|.
name|isAdded
argument_list|()
condition|)
block|{
name|openSrcStream
operator|=
literal|true
expr_stmt|;
name|expectedChecksum
operator|=
name|entry
operator|.
name|getChecksum
argument_list|()
expr_stmt|;
if|if
condition|(
name|expectedChecksum
operator|!=
literal|null
condition|)
block|{
name|useChecksummedStream
operator|=
literal|true
expr_stmt|;
block|}
else|else
block|{
name|expectedChecksum
operator|=
name|SVNFileUtil
operator|.
name|computeChecksum
argument_list|(
name|baseFile
argument_list|)
expr_stmt|;
block|}
block|}
else|else
block|{
name|sourceIS
operator|=
name|SVNFileUtil
operator|.
name|DUMMY_IN
expr_stmt|;
block|}
name|editor
operator|.
name|applyTextDelta
argument_list|(
name|path
argument_list|,
name|expectedChecksum
argument_list|)
expr_stmt|;
if|if
condition|(
name|myDeltaGenerator
operator|==
literal|null
condition|)
block|{
name|myDeltaGenerator
operator|=
operator|new
name|SVNDeltaGenerator
argument_list|()
expr_stmt|;
block|}
try|try
block|{
name|sourceIS
operator|=
name|openSrcStream
condition|?
name|SVNFileUtil
operator|.
name|openFileForReading
argument_list|(
name|baseFile
argument_list|,
name|SVNLogType
operator|.
name|WC
argument_list|)
else|:
name|sourceIS
expr_stmt|;
if|if
condition|(
name|useChecksummedStream
condition|)
block|{
name|baseChecksummedIS
operator|=
operator|new
name|SVNChecksumInputStream
argument_list|(
name|sourceIS
argument_list|,
name|SVNChecksumInputStream
operator|.
name|MD5_ALGORITHM
argument_list|)
expr_stmt|;
name|sourceIS
operator|=
name|baseChecksummedIS
expr_stmt|;
block|}
name|targetIS
operator|=
name|SVNTranslator
operator|.
name|getTranslatedStream
argument_list|(
name|dir
argument_list|,
name|name
argument_list|,
literal|true
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|tmpBaseStream
operator|=
name|SVNFileUtil
operator|.
name|openFileForWriting
argument_list|(
name|tmpFile
argument_list|)
expr_stmt|;
name|CopyingStream
name|localStream
init|=
operator|new
name|CopyingStream
argument_list|(
name|tmpBaseStream
argument_list|,
name|targetIS
argument_list|)
decl_stmt|;
name|newChecksum
operator|=
name|myDeltaGenerator
operator|.
name|sendDelta
argument_list|(
name|path
argument_list|,
name|sourceIS
argument_list|,
literal|0
argument_list|,
name|localStream
argument_list|,
name|editor
argument_list|,
literal|true
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|SVNException
name|svne
parameter_list|)
block|{
name|error
operator|=
name|svne
operator|.
name|getErrorMessage
argument_list|()
operator|.
name|wrap
argument_list|(
literal|"While preparing ''{0}'' for commit"
argument_list|,
name|dir
operator|.
name|getFile
argument_list|(
name|name
argument_list|)
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
name|SVNFileUtil
operator|.
name|closeFile
argument_list|(
name|sourceIS
argument_list|)
expr_stmt|;
name|SVNFileUtil
operator|.
name|closeFile
argument_list|(
name|targetIS
argument_list|)
expr_stmt|;
name|SVNFileUtil
operator|.
name|closeFile
argument_list|(
name|tmpBaseStream
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|baseChecksummedIS
operator|!=
literal|null
condition|)
block|{
name|checksum
operator|=
name|baseChecksummedIS
operator|.
name|getDigest
argument_list|()
expr_stmt|;
block|}
if|if
condition|(
name|expectedChecksum
operator|!=
literal|null
operator|&&
name|checksum
operator|!=
literal|null
operator|&&
operator|!
name|expectedChecksum
operator|.
name|equals
argument_list|(
name|checksum
argument_list|)
condition|)
block|{
name|SVNErrorMessage
name|err
init|=
name|SVNErrorMessage
operator|.
name|create
argument_list|(
name|SVNErrorCode
operator|.
name|WC_CORRUPT_TEXT_BASE
argument_list|,
literal|"Checksum mismatch for ''{0}''; expected: ''{1}'', actual: ''{2}''"
argument_list|,
operator|new
name|Object
index|[]
block|{
name|dir
operator|.
name|getFile
argument_list|(
name|name
argument_list|)
block|,
name|expectedChecksum
block|,
name|checksum
block|}
argument_list|)
decl_stmt|;
name|SVNErrorManager
operator|.
name|error
argument_list|(
name|err
argument_list|,
name|SVNLogType
operator|.
name|WC
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|error
operator|!=
literal|null
condition|)
block|{
name|SVNErrorManager
operator|.
name|error
argument_list|(
name|error
argument_list|,
name|SVNLogType
operator|.
name|WC
argument_list|)
expr_stmt|;
block|}
name|editor
operator|.
name|closeFile
argument_list|(
name|path
argument_list|,
name|newChecksum
argument_list|)
expr_stmt|;
block|}
block|}
specifier|private
name|void
name|sendPropertiesDelta
parameter_list|(
name|String
name|commitPath
parameter_list|,
name|SVNCommitItem
name|item
parameter_list|,
name|ISVNEditor
name|editor
parameter_list|)
throws|throws
name|SVNException
block|{
name|SVNAdminArea
name|dir
decl_stmt|;
name|String
name|name
decl_stmt|;
name|SVNWCAccess
name|wcAccess
init|=
name|item
operator|.
name|getWCAccess
argument_list|()
decl_stmt|;
if|if
condition|(
name|item
operator|.
name|getKind
argument_list|()
operator|==
name|SVNNodeKind
operator|.
name|DIR
condition|)
block|{
name|dir
operator|=
name|wcAccess
operator|.
name|retrieve
argument_list|(
name|item
operator|.
name|getFile
argument_list|()
argument_list|)
expr_stmt|;
name|name
operator|=
literal|""
expr_stmt|;
block|}
else|else
block|{
name|dir
operator|=
name|wcAccess
operator|.
name|retrieve
argument_list|(
name|item
operator|.
name|getFile
argument_list|()
operator|.
name|getParentFile
argument_list|()
argument_list|)
expr_stmt|;
name|name
operator|=
name|SVNPathUtil
operator|.
name|tail
argument_list|(
name|item
operator|.
name|getPath
argument_list|()
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
operator|!
name|dir
operator|.
name|hasPropModifications
argument_list|(
name|name
argument_list|)
condition|)
block|{
return|return;
block|}
name|SVNEntry
name|entry
init|=
name|dir
operator|.
name|getEntry
argument_list|(
name|name
argument_list|,
literal|false
argument_list|)
decl_stmt|;
name|boolean
name|replaced
init|=
literal|false
decl_stmt|;
if|if
condition|(
name|entry
operator|!=
literal|null
condition|)
block|{
name|replaced
operator|=
name|entry
operator|.
name|isScheduledForReplacement
argument_list|()
expr_stmt|;
block|}
name|SVNVersionedProperties
name|props
init|=
name|dir
operator|.
name|getProperties
argument_list|(
name|name
argument_list|)
decl_stmt|;
name|SVNVersionedProperties
name|baseProps
init|=
name|replaced
condition|?
literal|null
else|:
name|dir
operator|.
name|getBaseProperties
argument_list|(
name|name
argument_list|)
decl_stmt|;
name|SVNProperties
name|diff
init|=
name|replaced
condition|?
name|props
operator|.
name|asMap
argument_list|()
else|:
name|baseProps
operator|.
name|compareTo
argument_list|(
name|props
argument_list|)
operator|.
name|asMap
argument_list|()
decl_stmt|;
if|if
condition|(
name|diff
operator|!=
literal|null
operator|&&
operator|!
name|diff
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|File
name|tmpPropsFile
init|=
name|dir
operator|.
name|getPropertiesFile
argument_list|(
name|name
argument_list|,
literal|true
argument_list|)
decl_stmt|;
name|SVNWCProperties
name|tmpProps
init|=
operator|new
name|SVNWCProperties
argument_list|(
name|tmpPropsFile
argument_list|,
literal|null
argument_list|)
decl_stmt|;
for|for
control|(
name|Iterator
name|propNames
init|=
name|props
operator|.
name|getPropertyNames
argument_list|(
literal|null
argument_list|)
operator|.
name|iterator
argument_list|()
init|;
name|propNames
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|String
name|propName
init|=
operator|(
name|String
operator|)
name|propNames
operator|.
name|next
argument_list|()
decl_stmt|;
name|SVNPropertyValue
name|propValue
init|=
name|props
operator|.
name|getPropertyValue
argument_list|(
name|propName
argument_list|)
decl_stmt|;
name|tmpProps
operator|.
name|setPropertyValue
argument_list|(
name|propName
argument_list|,
name|propValue
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
operator|!
name|tmpPropsFile
operator|.
name|exists
argument_list|()
condition|)
block|{
comment|// create empty tmp (!) file just to make sure it will be used on post-commit.
name|SVNFileUtil
operator|.
name|createEmptyFile
argument_list|(
name|tmpPropsFile
argument_list|)
expr_stmt|;
block|}
name|myTmpFiles
operator|.
name|add
argument_list|(
name|tmpPropsFile
argument_list|)
expr_stmt|;
for|for
control|(
name|Iterator
name|names
init|=
name|diff
operator|.
name|nameSet
argument_list|()
operator|.
name|iterator
argument_list|()
init|;
name|names
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|String
name|propName
init|=
operator|(
name|String
operator|)
name|names
operator|.
name|next
argument_list|()
decl_stmt|;
name|SVNPropertyValue
name|value
init|=
name|diff
operator|.
name|getSVNPropertyValue
argument_list|(
name|propName
argument_list|)
decl_stmt|;
if|if
condition|(
name|item
operator|.
name|getKind
argument_list|()
operator|==
name|SVNNodeKind
operator|.
name|FILE
condition|)
block|{
name|editor
operator|.
name|changeFileProperty
argument_list|(
name|commitPath
argument_list|,
name|propName
argument_list|,
name|value
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|editor
operator|.
name|changeDirProperty
argument_list|(
name|propName
argument_list|,
name|value
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
specifier|private
name|String
name|getCopyFromPath
parameter_list|(
name|SVNURL
name|url
parameter_list|)
block|{
if|if
condition|(
name|url
operator|==
literal|null
condition|)
block|{
return|return
literal|null
return|;
block|}
name|String
name|path
init|=
name|url
operator|.
name|getPath
argument_list|()
decl_stmt|;
if|if
condition|(
name|myRepositoryRoot
operator|.
name|equals
argument_list|(
name|path
argument_list|)
condition|)
block|{
return|return
literal|"/"
return|;
block|}
return|return
name|path
operator|.
name|substring
argument_list|(
name|myRepositoryRoot
operator|.
name|length
argument_list|()
argument_list|)
return|;
block|}
specifier|private
name|void
name|fixError
parameter_list|(
name|String
name|path
parameter_list|,
name|SVNException
name|e
parameter_list|,
name|SVNNodeKind
name|kind
parameter_list|)
throws|throws
name|SVNException
block|{
name|SVNErrorMessage
name|err
init|=
name|e
operator|.
name|getErrorMessage
argument_list|()
decl_stmt|;
if|if
condition|(
name|err
operator|.
name|getErrorCode
argument_list|()
operator|==
name|SVNErrorCode
operator|.
name|FS_NOT_FOUND
operator|||
name|err
operator|.
name|getErrorCode
argument_list|()
operator|==
name|SVNErrorCode
operator|.
name|RA_DAV_PATH_NOT_FOUND
condition|)
block|{
name|err
operator|=
name|SVNErrorMessage
operator|.
name|create
argument_list|(
name|SVNErrorCode
operator|.
name|WC_NOT_UP_TO_DATE
argument_list|,
name|kind
operator|==
name|SVNNodeKind
operator|.
name|DIR
condition|?
literal|"Directory ''{0}'' is out of date"
else|:
literal|"File ''{0}'' is out of date"
argument_list|,
name|path
argument_list|)
expr_stmt|;
throw|throw
operator|new
name|SVNException
argument_list|(
name|err
argument_list|)
throw|;
block|}
throw|throw
name|e
throw|;
block|}
specifier|public
specifier|static
name|SVNCommitInfo
name|commit
parameter_list|(
name|Collection
name|tmpFiles
parameter_list|,
name|Map
name|commitItems
parameter_list|,
name|String
name|repositoryRoot
parameter_list|,
name|ISVNEditor
name|commitEditor
parameter_list|)
throws|throws
name|SVNException
block|{
name|SVNCommitter
name|committer
init|=
operator|new
name|SVNCommitter
argument_list|(
name|commitItems
argument_list|,
name|repositoryRoot
argument_list|,
name|tmpFiles
argument_list|)
decl_stmt|;
name|SVNCommitUtil
operator|.
name|driveCommitEditor
argument_list|(
name|committer
argument_list|,
name|commitItems
operator|.
name|keySet
argument_list|()
argument_list|,
name|commitEditor
argument_list|,
operator|-
literal|1
argument_list|)
expr_stmt|;
name|committer
operator|.
name|sendTextDeltas
argument_list|(
name|commitEditor
argument_list|)
expr_stmt|;
return|return
name|commitEditor
operator|.
name|closeEdit
argument_list|()
return|;
block|}
specifier|private
class|class
name|CopyingStream
extends|extends
name|InputStream
block|{
specifier|private
name|InputStream
name|myInput
decl_stmt|;
specifier|private
name|OutputStream
name|myOutput
decl_stmt|;
specifier|public
name|CopyingStream
parameter_list|(
name|OutputStream
name|os
parameter_list|,
name|InputStream
name|is
parameter_list|)
block|{
name|myInput
operator|=
name|is
expr_stmt|;
name|myOutput
operator|=
name|os
expr_stmt|;
block|}
specifier|public
name|int
name|read
parameter_list|()
throws|throws
name|IOException
block|{
name|int
name|r
init|=
name|myInput
operator|.
name|read
argument_list|()
decl_stmt|;
if|if
condition|(
name|r
operator|!=
operator|-
literal|1
condition|)
block|{
name|myOutput
operator|.
name|write
argument_list|(
name|r
argument_list|)
expr_stmt|;
block|}
return|return
name|r
return|;
block|}
specifier|public
name|int
name|read
parameter_list|(
name|byte
index|[]
name|b
parameter_list|)
throws|throws
name|IOException
block|{
name|int
name|r
init|=
name|myInput
operator|.
name|read
argument_list|(
name|b
argument_list|)
decl_stmt|;
if|if
condition|(
name|r
operator|!=
operator|-
literal|1
condition|)
block|{
name|myOutput
operator|.
name|write
argument_list|(
name|b
argument_list|,
literal|0
argument_list|,
name|r
argument_list|)
expr_stmt|;
block|}
return|return
name|r
return|;
block|}
specifier|public
name|int
name|read
parameter_list|(
name|byte
index|[]
name|b
parameter_list|,
name|int
name|off
parameter_list|,
name|int
name|len
parameter_list|)
throws|throws
name|IOException
block|{
name|int
name|r
init|=
name|myInput
operator|.
name|read
argument_list|(
name|b
argument_list|,
name|off
argument_list|,
name|len
argument_list|)
decl_stmt|;
if|if
condition|(
name|r
operator|!=
operator|-
literal|1
condition|)
block|{
name|myOutput
operator|.
name|write
argument_list|(
name|b
argument_list|,
name|off
argument_list|,
name|r
argument_list|)
expr_stmt|;
block|}
return|return
name|r
return|;
block|}
block|}
block|}
end_class

end_unit

