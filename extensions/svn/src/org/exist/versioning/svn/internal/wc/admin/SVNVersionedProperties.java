begin_unit|revision:1.0.0;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * ====================================================================  * Copyright (c) 2004-2010 TMate Software Ltd.  All rights reserved.  *  * This software is licensed as described in the file COPYING, which  * you should have received as part of this distribution.  The terms  * are also available at http://svnkit.com/license.html  * If newer versions of this license are posted there, you may use a  * newer version instead, at your option.  * ====================================================================  */
end_comment

begin_package
package|package
name|org
operator|.
name|exist
operator|.
name|versioning
operator|.
name|svn
operator|.
name|internal
operator|.
name|wc
operator|.
name|admin
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collection
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Iterator
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|TreeSet
import|;
end_import

begin_import
import|import
name|org
operator|.
name|tmatesoft
operator|.
name|svn
operator|.
name|core
operator|.
name|SVNException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|tmatesoft
operator|.
name|svn
operator|.
name|core
operator|.
name|SVNProperties
import|;
end_import

begin_import
import|import
name|org
operator|.
name|tmatesoft
operator|.
name|svn
operator|.
name|core
operator|.
name|SVNPropertyValue
import|;
end_import

begin_comment
comment|/**  * @version 1.3  * @author  TMate Software Ltd.  */
end_comment

begin_class
specifier|public
specifier|abstract
class|class
name|SVNVersionedProperties
block|{
specifier|private
name|SVNProperties
name|myProperties
decl_stmt|;
specifier|private
name|boolean
name|myIsModified
decl_stmt|;
specifier|protected
name|SVNVersionedProperties
parameter_list|(
name|SVNProperties
name|props
parameter_list|)
block|{
name|myProperties
operator|=
name|props
expr_stmt|;
name|myIsModified
operator|=
literal|false
expr_stmt|;
block|}
specifier|public
specifier|abstract
name|boolean
name|containsProperty
parameter_list|(
name|String
name|name
parameter_list|)
throws|throws
name|SVNException
function_decl|;
specifier|public
specifier|abstract
name|SVNPropertyValue
name|getPropertyValue
parameter_list|(
name|String
name|name
parameter_list|)
throws|throws
name|SVNException
function_decl|;
specifier|public
name|String
name|getStringPropertyValue
parameter_list|(
name|String
name|name
parameter_list|)
throws|throws
name|SVNException
block|{
name|SVNPropertyValue
name|value
init|=
name|getPropertyValue
argument_list|(
name|name
argument_list|)
decl_stmt|;
return|return
name|value
operator|==
literal|null
condition|?
literal|null
else|:
name|value
operator|.
name|getString
argument_list|()
return|;
block|}
specifier|public
name|boolean
name|isModified
parameter_list|()
block|{
return|return
name|myIsModified
return|;
block|}
specifier|protected
name|void
name|setModified
parameter_list|(
name|boolean
name|modified
parameter_list|)
block|{
name|myIsModified
operator|=
name|modified
expr_stmt|;
block|}
specifier|public
name|boolean
name|isEmpty
parameter_list|()
throws|throws
name|SVNException
block|{
name|SVNProperties
name|props
init|=
name|loadProperties
argument_list|()
decl_stmt|;
return|return
name|props
operator|==
literal|null
operator|||
name|props
operator|.
name|isEmpty
argument_list|()
return|;
block|}
specifier|public
name|Collection
name|getPropertyNames
parameter_list|(
name|Collection
name|target
parameter_list|)
throws|throws
name|SVNException
block|{
name|SVNProperties
name|props
init|=
name|loadProperties
argument_list|()
decl_stmt|;
name|target
operator|=
name|target
operator|==
literal|null
condition|?
operator|new
name|TreeSet
argument_list|()
else|:
name|target
expr_stmt|;
if|if
condition|(
name|isEmpty
argument_list|()
condition|)
block|{
return|return
name|target
return|;
block|}
for|for
control|(
name|Iterator
name|names
init|=
name|props
operator|.
name|nameSet
argument_list|()
operator|.
name|iterator
argument_list|()
init|;
name|names
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|target
operator|.
name|add
argument_list|(
name|names
operator|.
name|next
argument_list|()
argument_list|)
expr_stmt|;
block|}
return|return
name|target
return|;
block|}
specifier|public
name|void
name|setPropertyValue
parameter_list|(
name|String
name|name
parameter_list|,
name|SVNPropertyValue
name|value
parameter_list|)
throws|throws
name|SVNException
block|{
name|SVNProperties
name|props
init|=
name|loadProperties
argument_list|()
decl_stmt|;
if|if
condition|(
name|value
operator|!=
literal|null
condition|)
block|{
name|props
operator|.
name|put
argument_list|(
name|name
argument_list|,
name|value
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|props
operator|.
name|remove
argument_list|(
name|name
argument_list|)
expr_stmt|;
block|}
name|myIsModified
operator|=
literal|true
expr_stmt|;
block|}
specifier|public
name|SVNVersionedProperties
name|compareTo
parameter_list|(
name|SVNVersionedProperties
name|properties
parameter_list|)
throws|throws
name|SVNException
block|{
name|SVNProperties
name|theseProps
init|=
name|loadProperties
argument_list|()
decl_stmt|;
if|if
condition|(
name|theseProps
operator|==
literal|null
condition|)
block|{
return|return
name|wrap
argument_list|(
operator|new
name|SVNProperties
argument_list|()
argument_list|)
return|;
block|}
return|return
name|wrap
argument_list|(
name|theseProps
operator|.
name|compareTo
argument_list|(
name|properties
operator|.
name|loadProperties
argument_list|()
argument_list|)
argument_list|)
return|;
block|}
specifier|public
name|void
name|copyTo
parameter_list|(
name|SVNVersionedProperties
name|destination
parameter_list|)
throws|throws
name|SVNException
block|{
name|SVNProperties
name|props
init|=
name|loadProperties
argument_list|()
decl_stmt|;
if|if
condition|(
name|isEmpty
argument_list|()
condition|)
block|{
name|destination
operator|.
name|removeAll
argument_list|()
expr_stmt|;
block|}
else|else
block|{
name|destination
operator|.
name|put
argument_list|(
name|props
argument_list|)
expr_stmt|;
block|}
block|}
specifier|public
name|void
name|removeAll
parameter_list|()
throws|throws
name|SVNException
block|{
name|SVNProperties
name|props
init|=
name|loadProperties
argument_list|()
decl_stmt|;
if|if
condition|(
operator|!
name|isEmpty
argument_list|()
condition|)
block|{
name|props
operator|.
name|clear
argument_list|()
expr_stmt|;
name|myIsModified
operator|=
literal|true
expr_stmt|;
block|}
block|}
specifier|public
name|boolean
name|equals
parameter_list|(
name|SVNVersionedProperties
name|props
parameter_list|)
throws|throws
name|SVNException
block|{
return|return
name|compareTo
argument_list|(
name|props
argument_list|)
operator|.
name|isEmpty
argument_list|()
return|;
block|}
specifier|public
name|SVNProperties
name|asMap
parameter_list|()
throws|throws
name|SVNException
block|{
return|return
name|loadProperties
argument_list|()
operator|!=
literal|null
condition|?
operator|new
name|SVNProperties
argument_list|(
name|loadProperties
argument_list|()
argument_list|)
else|:
operator|new
name|SVNProperties
argument_list|()
return|;
block|}
specifier|protected
name|void
name|put
parameter_list|(
name|SVNProperties
name|props
parameter_list|)
throws|throws
name|SVNException
block|{
name|SVNProperties
name|thisProps
init|=
name|loadProperties
argument_list|()
decl_stmt|;
name|thisProps
operator|.
name|clear
argument_list|()
expr_stmt|;
name|thisProps
operator|.
name|putAll
argument_list|(
name|props
argument_list|)
expr_stmt|;
name|myIsModified
operator|=
literal|true
expr_stmt|;
block|}
specifier|protected
name|SVNProperties
name|getProperties
parameter_list|()
block|{
return|return
name|myProperties
return|;
block|}
specifier|protected
name|void
name|setPropertiesMap
parameter_list|(
name|SVNProperties
name|props
parameter_list|)
block|{
name|myProperties
operator|=
name|props
expr_stmt|;
block|}
specifier|protected
specifier|abstract
name|SVNVersionedProperties
name|wrap
parameter_list|(
name|SVNProperties
name|properties
parameter_list|)
function_decl|;
specifier|protected
specifier|abstract
name|SVNProperties
name|loadProperties
parameter_list|()
throws|throws
name|SVNException
function_decl|;
block|}
end_class

end_unit

