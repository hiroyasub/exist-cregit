begin_unit|revision:1.0.0;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * ====================================================================  * Copyright (c) 2004-2010 TMate Software Ltd.  All rights reserved.  *  * This software is licensed as described in the file COPYING, which  * you should have received as part of this distribution.  The terms  * are also available at http://svnkit.com/license.html  * If newer versions of this license are posted there, you may use a  * newer version instead, at your option.  * ====================================================================  */
end_comment

begin_package
package|package
name|org
operator|.
name|exist
operator|.
name|versioning
operator|.
name|svn
operator|.
name|internal
operator|.
name|wc
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|OutputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|org
operator|.
name|tmatesoft
operator|.
name|svn
operator|.
name|core
operator|.
name|wc
operator|.
name|SVNDiffOptions
import|;
end_import

begin_import
import|import
name|de
operator|.
name|regnis
operator|.
name|q
operator|.
name|sequence
operator|.
name|QSequenceDifferenceBlock
import|;
end_import

begin_import
import|import
name|de
operator|.
name|regnis
operator|.
name|q
operator|.
name|sequence
operator|.
name|core
operator|.
name|QSequenceException
import|;
end_import

begin_import
import|import
name|de
operator|.
name|regnis
operator|.
name|q
operator|.
name|sequence
operator|.
name|line
operator|.
name|QSequenceLine
import|;
end_import

begin_import
import|import
name|de
operator|.
name|regnis
operator|.
name|q
operator|.
name|sequence
operator|.
name|line
operator|.
name|QSequenceLineCache
import|;
end_import

begin_import
import|import
name|de
operator|.
name|regnis
operator|.
name|q
operator|.
name|sequence
operator|.
name|line
operator|.
name|QSequenceLineMedia
import|;
end_import

begin_import
import|import
name|de
operator|.
name|regnis
operator|.
name|q
operator|.
name|sequence
operator|.
name|line
operator|.
name|QSequenceLineRAData
import|;
end_import

begin_import
import|import
name|de
operator|.
name|regnis
operator|.
name|q
operator|.
name|sequence
operator|.
name|line
operator|.
name|QSequenceLineResult
import|;
end_import

begin_import
import|import
name|de
operator|.
name|regnis
operator|.
name|q
operator|.
name|sequence
operator|.
name|line
operator|.
name|simplifier
operator|.
name|QSequenceLineDummySimplifier
import|;
end_import

begin_import
import|import
name|de
operator|.
name|regnis
operator|.
name|q
operator|.
name|sequence
operator|.
name|line
operator|.
name|simplifier
operator|.
name|QSequenceLineEOLUnifyingSimplifier
import|;
end_import

begin_import
import|import
name|de
operator|.
name|regnis
operator|.
name|q
operator|.
name|sequence
operator|.
name|line
operator|.
name|simplifier
operator|.
name|QSequenceLineSimplifier
import|;
end_import

begin_import
import|import
name|de
operator|.
name|regnis
operator|.
name|q
operator|.
name|sequence
operator|.
name|line
operator|.
name|simplifier
operator|.
name|QSequenceLineTeeSimplifier
import|;
end_import

begin_import
import|import
name|de
operator|.
name|regnis
operator|.
name|q
operator|.
name|sequence
operator|.
name|line
operator|.
name|simplifier
operator|.
name|QSequenceLineWhiteSpaceReducingSimplifier
import|;
end_import

begin_import
import|import
name|de
operator|.
name|regnis
operator|.
name|q
operator|.
name|sequence
operator|.
name|line
operator|.
name|simplifier
operator|.
name|QSequenceLineWhiteSpaceSkippingSimplifier
import|;
end_import

begin_comment
comment|/**  * @version 1.3  * @author  TMate Software Ltd.  */
end_comment

begin_class
specifier|public
class|class
name|FSMergerBySequence
block|{
comment|// Constants ==============================================================
specifier|public
specifier|static
specifier|final
name|String
name|DEFAULT_EOL
init|=
name|System
operator|.
name|getProperty
argument_list|(
literal|"line.separator"
argument_list|)
decl_stmt|;
specifier|public
specifier|static
specifier|final
name|int
name|NOT_MODIFIED
init|=
literal|0
decl_stmt|;
specifier|public
specifier|static
specifier|final
name|int
name|MERGED
init|=
literal|4
decl_stmt|;
specifier|public
specifier|static
specifier|final
name|int
name|CONFLICTED
init|=
literal|2
decl_stmt|;
comment|// Fields =================================================================
specifier|private
specifier|final
name|byte
index|[]
name|myConflictStart
decl_stmt|;
specifier|private
specifier|final
name|byte
index|[]
name|myConflictSeparator
decl_stmt|;
specifier|private
specifier|final
name|byte
index|[]
name|myConflictEnd
decl_stmt|;
comment|// Setup ==================================================================
specifier|public
name|FSMergerBySequence
parameter_list|(
name|byte
index|[]
name|conflictStart
parameter_list|,
name|byte
index|[]
name|conflictSeparator
parameter_list|,
name|byte
index|[]
name|conflictEnd
parameter_list|)
block|{
name|myConflictStart
operator|=
name|conflictStart
expr_stmt|;
name|myConflictSeparator
operator|=
name|conflictSeparator
expr_stmt|;
name|myConflictEnd
operator|=
name|conflictEnd
expr_stmt|;
block|}
comment|// Accessing ==============================================================
specifier|public
name|int
name|merge
parameter_list|(
name|QSequenceLineRAData
name|baseData
parameter_list|,
name|QSequenceLineRAData
name|localData
parameter_list|,
name|QSequenceLineRAData
name|latestData
parameter_list|,
name|SVNDiffOptions
name|options
parameter_list|,
name|OutputStream
name|result
parameter_list|,
name|SVNDiffConflictChoiceStyle
name|style
parameter_list|)
throws|throws
name|IOException
block|{
specifier|final
name|QSequenceLineResult
name|localResult
decl_stmt|;
specifier|final
name|QSequenceLineResult
name|latestResult
decl_stmt|;
specifier|final
name|QSequenceLineTeeSimplifier
name|mySimplifer
init|=
name|createSimplifier
argument_list|(
name|options
argument_list|)
decl_stmt|;
try|try
block|{
name|localResult
operator|=
name|QSequenceLineMedia
operator|.
name|createBlocks
argument_list|(
name|baseData
argument_list|,
name|localData
argument_list|,
name|mySimplifer
argument_list|)
expr_stmt|;
name|latestResult
operator|=
name|QSequenceLineMedia
operator|.
name|createBlocks
argument_list|(
name|baseData
argument_list|,
name|latestData
argument_list|,
name|mySimplifer
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|QSequenceException
name|ex
parameter_list|)
block|{
throw|throw
operator|new
name|IOException
argument_list|(
name|ex
operator|.
name|getMessage
argument_list|()
argument_list|)
throw|;
block|}
try|try
block|{
specifier|final
name|QSequenceLineCache
name|baseLines
init|=
name|localResult
operator|.
name|getLeftCache
argument_list|()
decl_stmt|;
specifier|final
name|QSequenceLineCache
name|localLines
init|=
name|localResult
operator|.
name|getRightCache
argument_list|()
decl_stmt|;
specifier|final
name|QSequenceLineCache
name|latestLines
init|=
name|latestResult
operator|.
name|getRightCache
argument_list|()
decl_stmt|;
specifier|final
name|FSMergerBySequenceList
name|local
init|=
operator|new
name|FSMergerBySequenceList
argument_list|(
name|localResult
operator|.
name|getBlocks
argument_list|()
argument_list|)
decl_stmt|;
specifier|final
name|FSMergerBySequenceList
name|latest
init|=
operator|new
name|FSMergerBySequenceList
argument_list|(
name|latestResult
operator|.
name|getBlocks
argument_list|()
argument_list|)
decl_stmt|;
specifier|final
name|List
name|transformedLocalLines
init|=
name|transformLocalLines
argument_list|(
name|localResult
operator|.
name|getBlocks
argument_list|()
argument_list|,
name|localLines
argument_list|)
decl_stmt|;
name|int
name|baseLineIndex
init|=
operator|-
literal|1
decl_stmt|;
name|boolean
name|conflict
init|=
literal|false
decl_stmt|;
name|boolean
name|merged
init|=
literal|false
decl_stmt|;
while|while
condition|(
name|local
operator|.
name|hasCurrent
argument_list|()
operator|||
name|latest
operator|.
name|hasCurrent
argument_list|()
condition|)
block|{
if|if
condition|(
name|local
operator|.
name|hasCurrent
argument_list|()
operator|&&
name|latest
operator|.
name|hasCurrent
argument_list|()
operator|&&
name|isEqualChange
argument_list|(
name|local
operator|.
name|current
argument_list|()
argument_list|,
name|latest
operator|.
name|current
argument_list|()
argument_list|,
name|localLines
argument_list|,
name|latestLines
argument_list|)
condition|)
block|{
name|baseLineIndex
operator|=
name|appendLines
argument_list|(
name|result
argument_list|,
name|local
operator|.
name|current
argument_list|()
argument_list|,
name|localLines
argument_list|,
name|baseLineIndex
argument_list|,
name|transformedLocalLines
argument_list|)
expr_stmt|;
name|local
operator|.
name|forward
argument_list|()
expr_stmt|;
name|latest
operator|.
name|forward
argument_list|()
expr_stmt|;
continue|continue;
block|}
if|if
condition|(
name|local
operator|.
name|hasCurrent
argument_list|()
operator|&&
name|latest
operator|.
name|hasCurrent
argument_list|()
condition|)
block|{
specifier|final
name|QSequenceDifferenceBlock
name|localStartBlock
init|=
name|local
operator|.
name|current
argument_list|()
decl_stmt|;
specifier|final
name|QSequenceDifferenceBlock
name|latestStartBlock
init|=
name|latest
operator|.
name|current
argument_list|()
decl_stmt|;
if|if
condition|(
name|checkConflict
argument_list|(
name|local
argument_list|,
name|latest
argument_list|,
name|localLines
argument_list|,
name|latestLines
argument_list|,
name|baseLines
operator|.
name|getLineCount
argument_list|()
argument_list|)
condition|)
block|{
if|if
condition|(
name|style
operator|==
name|SVNDiffConflictChoiceStyle
operator|.
name|CHOOSE_LATEST
condition|)
block|{
name|baseLineIndex
operator|=
name|appendLines
argument_list|(
name|result
argument_list|,
name|latest
operator|.
name|current
argument_list|()
argument_list|,
name|latestLines
argument_list|,
name|baseLineIndex
argument_list|,
name|transformedLocalLines
argument_list|)
expr_stmt|;
name|local
operator|.
name|forward
argument_list|()
expr_stmt|;
name|latest
operator|.
name|forward
argument_list|()
expr_stmt|;
name|merged
operator|=
literal|true
expr_stmt|;
block|}
if|else if
condition|(
name|style
operator|==
name|SVNDiffConflictChoiceStyle
operator|.
name|CHOOSE_MODIFIED
condition|)
block|{
name|baseLineIndex
operator|=
name|appendLines
argument_list|(
name|result
argument_list|,
name|local
operator|.
name|current
argument_list|()
argument_list|,
name|localLines
argument_list|,
name|baseLineIndex
argument_list|,
name|transformedLocalLines
argument_list|)
expr_stmt|;
name|local
operator|.
name|forward
argument_list|()
expr_stmt|;
name|latest
operator|.
name|forward
argument_list|()
expr_stmt|;
name|merged
operator|=
literal|true
expr_stmt|;
block|}
else|else
block|{
comment|//TODO: this is actually SVNDiffConflictChoiceStyle.CHOOSE_MODIFIED_LATEST style
name|baseLineIndex
operator|=
name|createConflict
argument_list|(
name|result
argument_list|,
name|localStartBlock
argument_list|,
name|local
operator|.
name|current
argument_list|()
argument_list|,
name|latestStartBlock
argument_list|,
name|latest
operator|.
name|current
argument_list|()
argument_list|,
name|localLines
argument_list|,
name|latestLines
argument_list|,
name|baseLineIndex
argument_list|,
name|transformedLocalLines
argument_list|)
expr_stmt|;
name|local
operator|.
name|forward
argument_list|()
expr_stmt|;
name|latest
operator|.
name|forward
argument_list|()
expr_stmt|;
name|conflict
operator|=
literal|true
expr_stmt|;
block|}
continue|continue;
block|}
block|}
if|if
condition|(
name|local
operator|.
name|hasCurrent
argument_list|()
operator|&&
name|isBefore
argument_list|(
name|local
operator|.
name|current
argument_list|()
argument_list|,
name|latest
operator|.
name|hasCurrent
argument_list|()
condition|?
name|latest
operator|.
name|current
argument_list|()
else|:
literal|null
argument_list|)
condition|)
block|{
name|baseLineIndex
operator|=
name|appendLines
argument_list|(
name|result
argument_list|,
name|local
operator|.
name|current
argument_list|()
argument_list|,
name|localLines
argument_list|,
name|baseLineIndex
argument_list|,
name|transformedLocalLines
argument_list|)
expr_stmt|;
name|local
operator|.
name|forward
argument_list|()
expr_stmt|;
name|merged
operator|=
literal|true
expr_stmt|;
continue|continue;
block|}
if|if
condition|(
name|latest
operator|.
name|hasCurrent
argument_list|()
condition|)
block|{
name|baseLineIndex
operator|=
name|appendLines
argument_list|(
name|result
argument_list|,
name|latest
operator|.
name|current
argument_list|()
argument_list|,
name|latestLines
argument_list|,
name|baseLineIndex
argument_list|,
name|transformedLocalLines
argument_list|)
expr_stmt|;
name|latest
operator|.
name|forward
argument_list|()
expr_stmt|;
name|merged
operator|=
literal|true
expr_stmt|;
block|}
block|}
name|appendTransformedLocalLines
argument_list|(
name|baseLineIndex
argument_list|,
name|baseLines
operator|.
name|getLineCount
argument_list|()
argument_list|,
name|transformedLocalLines
argument_list|,
name|result
argument_list|)
expr_stmt|;
if|if
condition|(
name|conflict
condition|)
block|{
return|return
name|CONFLICTED
return|;
block|}
if|else if
condition|(
name|merged
condition|)
block|{
return|return
name|MERGED
return|;
block|}
else|else
block|{
return|return
name|NOT_MODIFIED
return|;
block|}
block|}
finally|finally
block|{
name|latestResult
operator|.
name|close
argument_list|()
expr_stmt|;
name|localResult
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
block|}
comment|// Utils ==================================================================
specifier|private
name|List
name|transformLocalLines
parameter_list|(
name|List
name|blocks
parameter_list|,
name|QSequenceLineCache
name|localLines
parameter_list|)
throws|throws
name|IOException
block|{
specifier|final
name|List
name|transformedLocalLines
init|=
operator|new
name|ArrayList
argument_list|()
decl_stmt|;
specifier|final
name|FSMergerBySequenceList
name|blockList
init|=
operator|new
name|FSMergerBySequenceList
argument_list|(
name|blocks
argument_list|)
decl_stmt|;
name|int
name|localIndex
init|=
literal|0
decl_stmt|;
name|int
name|baseIndex
init|=
literal|0
decl_stmt|;
for|for
control|(
init|;
name|localIndex
operator|<
name|localLines
operator|.
name|getLineCount
argument_list|()
condition|;
control|)
block|{
specifier|final
name|int
name|baseTo
decl_stmt|;
if|if
condition|(
name|blockList
operator|.
name|hasCurrent
argument_list|()
condition|)
block|{
specifier|final
name|QSequenceDifferenceBlock
name|block
init|=
name|blockList
operator|.
name|current
argument_list|()
decl_stmt|;
name|baseTo
operator|=
name|block
operator|.
name|getLeftFrom
argument_list|()
operator|-
literal|1
expr_stmt|;
block|}
else|else
block|{
name|baseTo
operator|=
name|Integer
operator|.
name|MAX_VALUE
expr_stmt|;
block|}
while|while
condition|(
name|localIndex
operator|<
name|localLines
operator|.
name|getLineCount
argument_list|()
operator|&&
name|baseIndex
operator|<=
name|baseTo
condition|)
block|{
name|transformedLocalLines
operator|.
name|add
argument_list|(
name|localLines
operator|.
name|getLine
argument_list|(
name|localIndex
argument_list|)
argument_list|)
expr_stmt|;
name|localIndex
operator|++
expr_stmt|;
name|baseIndex
operator|++
expr_stmt|;
block|}
if|if
condition|(
name|blockList
operator|.
name|hasCurrent
argument_list|()
condition|)
block|{
for|for
control|(
name|int
name|index
init|=
literal|0
init|;
name|index
operator|<
name|blockList
operator|.
name|current
argument_list|()
operator|.
name|getLeftSize
argument_list|()
condition|;
name|index
operator|++
control|)
block|{
name|transformedLocalLines
operator|.
name|add
argument_list|(
literal|null
argument_list|)
expr_stmt|;
block|}
name|baseIndex
operator|+=
name|blockList
operator|.
name|current
argument_list|()
operator|.
name|getLeftSize
argument_list|()
expr_stmt|;
name|localIndex
operator|+=
name|blockList
operator|.
name|current
argument_list|()
operator|.
name|getRightSize
argument_list|()
expr_stmt|;
name|blockList
operator|.
name|forward
argument_list|()
expr_stmt|;
block|}
block|}
return|return
name|transformedLocalLines
return|;
block|}
specifier|private
name|boolean
name|isBefore
parameter_list|(
name|QSequenceDifferenceBlock
name|block1
parameter_list|,
name|QSequenceDifferenceBlock
name|block2
parameter_list|)
block|{
return|return
name|block1
operator|!=
literal|null
operator|&&
operator|(
name|block2
operator|==
literal|null
operator|||
name|block1
operator|.
name|getLeftTo
argument_list|()
operator|<
name|block2
operator|.
name|getLeftFrom
argument_list|()
operator|)
return|;
block|}
specifier|private
name|boolean
name|intersect
parameter_list|(
name|QSequenceDifferenceBlock
name|block1
parameter_list|,
name|QSequenceDifferenceBlock
name|block2
parameter_list|,
name|int
name|baseLineCount
parameter_list|)
block|{
specifier|final
name|int
name|from1
init|=
name|block1
operator|.
name|getLeftFrom
argument_list|()
decl_stmt|;
specifier|final
name|int
name|from2
init|=
name|block2
operator|.
name|getLeftFrom
argument_list|()
decl_stmt|;
specifier|final
name|int
name|to1
init|=
name|block1
operator|.
name|getLeftTo
argument_list|()
decl_stmt|;
specifier|final
name|int
name|to2
init|=
name|block2
operator|.
name|getLeftTo
argument_list|()
decl_stmt|;
if|if
condition|(
name|to1
operator|<
name|from1
condition|)
block|{
if|if
condition|(
name|to2
operator|<
name|from2
condition|)
block|{
return|return
name|from1
operator|==
name|from2
return|;
block|}
if|if
condition|(
name|from1
operator|==
name|baseLineCount
operator|&&
name|to2
operator|>=
name|baseLineCount
operator|-
literal|1
condition|)
block|{
return|return
literal|true
return|;
block|}
return|return
name|from1
operator|>=
name|from2
operator|&&
name|from1
operator|<=
name|to2
return|;
block|}
if|else if
condition|(
name|to2
operator|<
name|from2
condition|)
block|{
if|if
condition|(
name|from2
operator|==
name|baseLineCount
operator|&&
name|to1
operator|>=
name|baseLineCount
operator|-
literal|1
condition|)
block|{
return|return
literal|true
return|;
block|}
return|return
name|from2
operator|>=
name|from1
operator|&&
name|from2
operator|<=
name|to1
return|;
block|}
else|else
block|{
return|return
operator|(
name|from1
operator|>=
name|from2
operator|&&
name|from1
operator|<=
name|to2
operator|)
operator|||
operator|(
name|from2
operator|>=
name|from1
operator|&&
name|from2
operator|<=
name|to1
operator|)
return|;
block|}
block|}
specifier|private
name|int
name|appendLines
parameter_list|(
name|OutputStream
name|result
parameter_list|,
name|QSequenceDifferenceBlock
name|block
parameter_list|,
name|QSequenceLineCache
name|changedLines
parameter_list|,
name|int
name|baseLineIndex
parameter_list|,
name|List
name|transformedLocalLines
parameter_list|)
throws|throws
name|IOException
block|{
name|appendTransformedLocalLines
argument_list|(
name|baseLineIndex
argument_list|,
name|block
operator|.
name|getLeftFrom
argument_list|()
argument_list|,
name|transformedLocalLines
argument_list|,
name|result
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|changedLineIndex
init|=
name|block
operator|.
name|getRightFrom
argument_list|()
init|;
name|changedLineIndex
operator|<=
name|block
operator|.
name|getRightTo
argument_list|()
condition|;
name|changedLineIndex
operator|++
control|)
block|{
name|writeLine
argument_list|(
name|result
argument_list|,
name|changedLines
operator|.
name|getLine
argument_list|(
name|changedLineIndex
argument_list|)
argument_list|)
expr_stmt|;
block|}
return|return
name|block
operator|.
name|getLeftTo
argument_list|()
return|;
block|}
specifier|private
name|boolean
name|isEqualChange
parameter_list|(
name|QSequenceDifferenceBlock
name|localBlock
parameter_list|,
name|QSequenceDifferenceBlock
name|latestBlock
parameter_list|,
name|QSequenceLineCache
name|localLines
parameter_list|,
name|QSequenceLineCache
name|latestLines
parameter_list|)
throws|throws
name|IOException
block|{
if|if
condition|(
name|localBlock
operator|.
name|getLeftFrom
argument_list|()
operator|!=
name|latestBlock
operator|.
name|getLeftFrom
argument_list|()
operator|||
name|localBlock
operator|.
name|getLeftTo
argument_list|()
operator|!=
name|latestBlock
operator|.
name|getLeftTo
argument_list|()
condition|)
block|{
return|return
literal|false
return|;
block|}
if|if
condition|(
name|localBlock
operator|.
name|getRightTo
argument_list|()
operator|-
name|localBlock
operator|.
name|getRightFrom
argument_list|()
operator|!=
name|latestBlock
operator|.
name|getRightTo
argument_list|()
operator|-
name|latestBlock
operator|.
name|getRightFrom
argument_list|()
condition|)
block|{
return|return
literal|false
return|;
block|}
for|for
control|(
name|int
name|index
init|=
literal|0
init|;
name|index
operator|<
name|localBlock
operator|.
name|getRightTo
argument_list|()
operator|-
name|localBlock
operator|.
name|getRightFrom
argument_list|()
operator|+
literal|1
condition|;
name|index
operator|++
control|)
block|{
specifier|final
name|QSequenceLine
name|localLine
init|=
name|localLines
operator|.
name|getLine
argument_list|(
name|localBlock
operator|.
name|getRightFrom
argument_list|()
operator|+
name|index
argument_list|)
decl_stmt|;
specifier|final
name|QSequenceLine
name|latestLine
init|=
name|latestLines
operator|.
name|getLine
argument_list|(
name|latestBlock
operator|.
name|getRightFrom
argument_list|()
operator|+
name|index
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|localLine
operator|.
name|equals
argument_list|(
name|latestLine
argument_list|)
condition|)
block|{
return|return
literal|false
return|;
block|}
block|}
return|return
literal|true
return|;
block|}
specifier|private
name|boolean
name|checkConflict
parameter_list|(
name|FSMergerBySequenceList
name|localChanges
parameter_list|,
name|FSMergerBySequenceList
name|latestChanges
parameter_list|,
name|QSequenceLineCache
name|localLines
parameter_list|,
name|QSequenceLineCache
name|latestLines
parameter_list|,
name|int
name|baseLineCount
parameter_list|)
throws|throws
name|IOException
block|{
name|boolean
name|conflict
init|=
literal|false
decl_stmt|;
while|while
condition|(
name|intersect
argument_list|(
name|localChanges
operator|.
name|current
argument_list|()
argument_list|,
name|latestChanges
operator|.
name|current
argument_list|()
argument_list|,
name|baseLineCount
argument_list|)
operator|&&
operator|!
name|isEqualChange
argument_list|(
name|localChanges
operator|.
name|current
argument_list|()
argument_list|,
name|latestChanges
operator|.
name|current
argument_list|()
argument_list|,
name|localLines
argument_list|,
name|latestLines
argument_list|)
condition|)
block|{
name|conflict
operator|=
literal|true
expr_stmt|;
if|if
condition|(
name|localChanges
operator|.
name|current
argument_list|()
operator|.
name|getLeftTo
argument_list|()
operator|<=
name|latestChanges
operator|.
name|current
argument_list|()
operator|.
name|getLeftTo
argument_list|()
condition|)
block|{
if|if
condition|(
name|localChanges
operator|.
name|hasNext
argument_list|()
operator|&&
name|intersect
argument_list|(
name|localChanges
operator|.
name|peekNext
argument_list|()
argument_list|,
name|latestChanges
operator|.
name|current
argument_list|()
argument_list|,
name|baseLineCount
argument_list|)
condition|)
block|{
name|localChanges
operator|.
name|forward
argument_list|()
expr_stmt|;
block|}
else|else
block|{
break|break;
block|}
block|}
else|else
block|{
if|if
condition|(
name|latestChanges
operator|.
name|hasNext
argument_list|()
operator|&&
name|intersect
argument_list|(
name|localChanges
operator|.
name|current
argument_list|()
argument_list|,
name|latestChanges
operator|.
name|peekNext
argument_list|()
argument_list|,
name|baseLineCount
argument_list|)
condition|)
block|{
name|latestChanges
operator|.
name|forward
argument_list|()
expr_stmt|;
block|}
else|else
block|{
break|break;
block|}
block|}
block|}
return|return
name|conflict
return|;
block|}
specifier|private
name|int
name|createConflict
parameter_list|(
name|OutputStream
name|result
parameter_list|,
name|QSequenceDifferenceBlock
name|localStart
parameter_list|,
name|QSequenceDifferenceBlock
name|localEnd
parameter_list|,
name|QSequenceDifferenceBlock
name|latestStart
parameter_list|,
name|QSequenceDifferenceBlock
name|latestEnd
parameter_list|,
name|QSequenceLineCache
name|localLines
parameter_list|,
name|QSequenceLineCache
name|latestLines
parameter_list|,
name|int
name|baseLineIndex
parameter_list|,
name|List
name|transformedLocalLines
parameter_list|)
throws|throws
name|IOException
block|{
specifier|final
name|int
name|minBaseFrom
init|=
name|Math
operator|.
name|min
argument_list|(
name|localStart
operator|.
name|getLeftFrom
argument_list|()
argument_list|,
name|latestStart
operator|.
name|getLeftFrom
argument_list|()
argument_list|)
decl_stmt|;
specifier|final
name|int
name|maxBaseTo
init|=
name|Math
operator|.
name|max
argument_list|(
name|localEnd
operator|.
name|getLeftTo
argument_list|()
argument_list|,
name|latestEnd
operator|.
name|getLeftTo
argument_list|()
argument_list|)
decl_stmt|;
name|appendTransformedLocalLines
argument_list|(
name|baseLineIndex
argument_list|,
name|minBaseFrom
argument_list|,
name|transformedLocalLines
argument_list|,
name|result
argument_list|)
expr_stmt|;
specifier|final
name|int
name|localFrom
init|=
name|Math
operator|.
name|max
argument_list|(
literal|0
argument_list|,
name|localStart
operator|.
name|getRightFrom
argument_list|()
operator|-
operator|(
name|localStart
operator|.
name|getLeftFrom
argument_list|()
operator|-
name|minBaseFrom
operator|)
argument_list|)
decl_stmt|;
specifier|final
name|int
name|localTo
init|=
name|Math
operator|.
name|min
argument_list|(
name|localLines
operator|.
name|getLineCount
argument_list|()
operator|-
literal|1
argument_list|,
name|localEnd
operator|.
name|getRightTo
argument_list|()
operator|+
operator|(
name|maxBaseTo
operator|-
name|localEnd
operator|.
name|getLeftTo
argument_list|()
operator|)
argument_list|)
decl_stmt|;
specifier|final
name|int
name|latestFrom
init|=
name|Math
operator|.
name|max
argument_list|(
literal|0
argument_list|,
name|latestStart
operator|.
name|getRightFrom
argument_list|()
operator|-
operator|(
name|latestStart
operator|.
name|getLeftFrom
argument_list|()
operator|-
name|minBaseFrom
operator|)
argument_list|)
decl_stmt|;
specifier|final
name|int
name|latestTo
init|=
name|Math
operator|.
name|min
argument_list|(
name|latestLines
operator|.
name|getLineCount
argument_list|()
operator|-
literal|1
argument_list|,
name|latestEnd
operator|.
name|getRightTo
argument_list|()
operator|+
operator|(
name|maxBaseTo
operator|-
name|latestEnd
operator|.
name|getLeftTo
argument_list|()
operator|)
argument_list|)
decl_stmt|;
name|writeBytesAndEol
argument_list|(
name|result
argument_list|,
name|myConflictStart
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|index
init|=
name|localFrom
init|;
name|index
operator|<=
name|localTo
condition|;
name|index
operator|++
control|)
block|{
name|writeLine
argument_list|(
name|result
argument_list|,
name|localLines
operator|.
name|getLine
argument_list|(
name|index
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|writeBytesAndEol
argument_list|(
name|result
argument_list|,
name|myConflictSeparator
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|index
init|=
name|latestFrom
init|;
name|index
operator|<=
name|latestTo
condition|;
name|index
operator|++
control|)
block|{
name|writeLine
argument_list|(
name|result
argument_list|,
name|latestLines
operator|.
name|getLine
argument_list|(
name|index
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|writeBytesAndEol
argument_list|(
name|result
argument_list|,
name|myConflictEnd
argument_list|)
expr_stmt|;
return|return
name|maxBaseTo
return|;
block|}
specifier|private
name|void
name|appendTransformedLocalLines
parameter_list|(
name|int
name|baseLineIndex
parameter_list|,
name|int
name|to
parameter_list|,
name|List
name|transformedLocalLines
parameter_list|,
name|OutputStream
name|result
parameter_list|)
throws|throws
name|IOException
block|{
for|for
control|(
name|baseLineIndex
operator|++
init|;
name|baseLineIndex
operator|<
name|to
condition|;
name|baseLineIndex
operator|++
control|)
block|{
specifier|final
name|QSequenceLine
name|sequenceLine
init|=
operator|(
name|QSequenceLine
operator|)
name|transformedLocalLines
operator|.
name|get
argument_list|(
name|baseLineIndex
argument_list|)
decl_stmt|;
if|if
condition|(
name|sequenceLine
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|RuntimeException
argument_list|()
throw|;
block|}
name|writeLine
argument_list|(
name|result
argument_list|,
name|sequenceLine
argument_list|)
expr_stmt|;
block|}
block|}
specifier|private
name|void
name|writeLine
parameter_list|(
name|OutputStream
name|os
parameter_list|,
name|QSequenceLine
name|line
parameter_list|)
throws|throws
name|IOException
block|{
specifier|final
name|byte
index|[]
name|bytes
init|=
name|line
operator|.
name|getContentBytes
argument_list|()
decl_stmt|;
if|if
condition|(
name|bytes
operator|.
name|length
operator|==
literal|0
condition|)
block|{
return|return;
block|}
name|os
operator|.
name|write
argument_list|(
name|bytes
argument_list|)
expr_stmt|;
block|}
specifier|private
name|void
name|writeBytesAndEol
parameter_list|(
name|OutputStream
name|os
parameter_list|,
specifier|final
name|byte
index|[]
name|bytes
parameter_list|)
throws|throws
name|IOException
block|{
if|if
condition|(
name|bytes
operator|.
name|length
operator|>
literal|0
condition|)
block|{
name|os
operator|.
name|write
argument_list|(
name|bytes
argument_list|)
expr_stmt|;
name|os
operator|.
name|write
argument_list|(
name|DEFAULT_EOL
operator|.
name|getBytes
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
specifier|private
name|QSequenceLineTeeSimplifier
name|createSimplifier
parameter_list|(
name|SVNDiffOptions
name|options
parameter_list|)
block|{
specifier|final
name|QSequenceLineSimplifier
name|eolSimplifier
init|=
name|options
operator|!=
literal|null
operator|&&
name|options
operator|.
name|isIgnoreEOLStyle
argument_list|()
condition|?
operator|(
name|QSequenceLineSimplifier
operator|)
operator|new
name|QSequenceLineEOLUnifyingSimplifier
argument_list|()
else|:
operator|(
name|QSequenceLineSimplifier
operator|)
operator|new
name|QSequenceLineDummySimplifier
argument_list|()
decl_stmt|;
name|QSequenceLineSimplifier
name|spaceSimplifier
init|=
operator|new
name|QSequenceLineDummySimplifier
argument_list|()
decl_stmt|;
if|if
condition|(
name|options
operator|!=
literal|null
condition|)
block|{
if|if
condition|(
name|options
operator|.
name|isIgnoreAllWhitespace
argument_list|()
condition|)
block|{
name|spaceSimplifier
operator|=
operator|new
name|QSequenceLineWhiteSpaceSkippingSimplifier
argument_list|()
expr_stmt|;
block|}
if|else if
condition|(
name|options
operator|.
name|isIgnoreAmountOfWhitespace
argument_list|()
condition|)
block|{
name|spaceSimplifier
operator|=
operator|new
name|QSequenceLineWhiteSpaceReducingSimplifier
argument_list|()
expr_stmt|;
block|}
block|}
return|return
operator|new
name|QSequenceLineTeeSimplifier
argument_list|(
name|eolSimplifier
argument_list|,
name|spaceSimplifier
argument_list|)
return|;
block|}
block|}
end_class

end_unit

