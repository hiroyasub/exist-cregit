begin_unit|revision:1.0.0;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * ====================================================================  * Copyright (c) 2004-2010 TMate Software Ltd.  All rights reserved.  *  * This software is licensed as described in the file COPYING, which  * you should have received as part of this distribution.  The terms  * are also available at http://svnkit.com/license.html  * If newer versions of this license are posted there, you may use a  * newer version instead, at your option.  * ====================================================================  */
end_comment

begin_package
package|package
name|org
operator|.
name|exist
operator|.
name|versioning
operator|.
name|svn
operator|.
name|internal
operator|.
name|wc
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|File
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|InputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|OutputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collection
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Iterator
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|StringTokenizer
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|versioning
operator|.
name|svn
operator|.
name|internal
operator|.
name|wc
operator|.
name|admin
operator|.
name|ISVNEntryHandler
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|versioning
operator|.
name|svn
operator|.
name|internal
operator|.
name|wc
operator|.
name|admin
operator|.
name|SVNAdminArea
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|versioning
operator|.
name|svn
operator|.
name|internal
operator|.
name|wc
operator|.
name|admin
operator|.
name|SVNEntry
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|versioning
operator|.
name|svn
operator|.
name|internal
operator|.
name|wc
operator|.
name|admin
operator|.
name|SVNLog
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|versioning
operator|.
name|svn
operator|.
name|internal
operator|.
name|wc
operator|.
name|admin
operator|.
name|SVNTranslator
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|versioning
operator|.
name|svn
operator|.
name|internal
operator|.
name|wc
operator|.
name|admin
operator|.
name|SVNTranslatorOutputStream
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|versioning
operator|.
name|svn
operator|.
name|internal
operator|.
name|wc
operator|.
name|admin
operator|.
name|SVNVersionedProperties
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|versioning
operator|.
name|svn
operator|.
name|internal
operator|.
name|wc
operator|.
name|admin
operator|.
name|SVNWCAccess
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|versioning
operator|.
name|svn
operator|.
name|wc
operator|.
name|ISVNOptions
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|versioning
operator|.
name|svn
operator|.
name|wc
operator|.
name|SVNEvent
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|versioning
operator|.
name|svn
operator|.
name|wc
operator|.
name|SVNEventAction
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|versioning
operator|.
name|svn
operator|.
name|wc
operator|.
name|SVNStatusType
import|;
end_import

begin_import
import|import
name|org
operator|.
name|tmatesoft
operator|.
name|svn
operator|.
name|core
operator|.
name|SVNDepth
import|;
end_import

begin_import
import|import
name|org
operator|.
name|tmatesoft
operator|.
name|svn
operator|.
name|core
operator|.
name|SVNErrorCode
import|;
end_import

begin_import
import|import
name|org
operator|.
name|tmatesoft
operator|.
name|svn
operator|.
name|core
operator|.
name|SVNErrorMessage
import|;
end_import

begin_import
import|import
name|org
operator|.
name|tmatesoft
operator|.
name|svn
operator|.
name|core
operator|.
name|SVNException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|tmatesoft
operator|.
name|svn
operator|.
name|core
operator|.
name|SVNNodeKind
import|;
end_import

begin_import
import|import
name|org
operator|.
name|tmatesoft
operator|.
name|svn
operator|.
name|core
operator|.
name|SVNProperties
import|;
end_import

begin_import
import|import
name|org
operator|.
name|tmatesoft
operator|.
name|svn
operator|.
name|core
operator|.
name|SVNProperty
import|;
end_import

begin_import
import|import
name|org
operator|.
name|tmatesoft
operator|.
name|svn
operator|.
name|core
operator|.
name|SVNPropertyValue
import|;
end_import

begin_import
import|import
name|org
operator|.
name|tmatesoft
operator|.
name|svn
operator|.
name|core
operator|.
name|internal
operator|.
name|util
operator|.
name|SVNHashMap
import|;
end_import

begin_import
import|import
name|org
operator|.
name|tmatesoft
operator|.
name|svn
operator|.
name|core
operator|.
name|internal
operator|.
name|util
operator|.
name|SVNHashSet
import|;
end_import

begin_import
import|import
name|org
operator|.
name|tmatesoft
operator|.
name|svn
operator|.
name|core
operator|.
name|internal
operator|.
name|util
operator|.
name|SVNMergeInfoUtil
import|;
end_import

begin_import
import|import
name|org
operator|.
name|tmatesoft
operator|.
name|svn
operator|.
name|core
operator|.
name|internal
operator|.
name|wc
operator|.
name|IOExceptionWrapper
import|;
end_import

begin_import
import|import
name|org
operator|.
name|tmatesoft
operator|.
name|svn
operator|.
name|core
operator|.
name|internal
operator|.
name|wc
operator|.
name|ISVNFileContentFetcher
import|;
end_import

begin_import
import|import
name|org
operator|.
name|tmatesoft
operator|.
name|svn
operator|.
name|util
operator|.
name|SVNLogType
import|;
end_import

begin_comment
comment|/**  * @author TMate Software Ltd.  * @version 1.3  */
end_comment

begin_class
specifier|public
class|class
name|SVNPropertiesManager
block|{
specifier|private
specifier|static
specifier|final
name|Collection
name|NOT_ALLOWED_FOR_FILE
init|=
operator|new
name|SVNHashSet
argument_list|()
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|Collection
name|NOT_ALLOWED_FOR_DIR
init|=
operator|new
name|SVNHashSet
argument_list|()
decl_stmt|;
static|static
block|{
name|NOT_ALLOWED_FOR_FILE
operator|.
name|add
argument_list|(
name|SVNProperty
operator|.
name|IGNORE
argument_list|)
expr_stmt|;
name|NOT_ALLOWED_FOR_FILE
operator|.
name|add
argument_list|(
name|SVNProperty
operator|.
name|EXTERNALS
argument_list|)
expr_stmt|;
name|NOT_ALLOWED_FOR_DIR
operator|.
name|add
argument_list|(
name|SVNProperty
operator|.
name|EXECUTABLE
argument_list|)
expr_stmt|;
name|NOT_ALLOWED_FOR_DIR
operator|.
name|add
argument_list|(
name|SVNProperty
operator|.
name|KEYWORDS
argument_list|)
expr_stmt|;
name|NOT_ALLOWED_FOR_DIR
operator|.
name|add
argument_list|(
name|SVNProperty
operator|.
name|EOL_STYLE
argument_list|)
expr_stmt|;
name|NOT_ALLOWED_FOR_DIR
operator|.
name|add
argument_list|(
name|SVNProperty
operator|.
name|CHARSET
argument_list|)
expr_stmt|;
name|NOT_ALLOWED_FOR_DIR
operator|.
name|add
argument_list|(
name|SVNProperty
operator|.
name|NEEDS_LOCK
argument_list|)
expr_stmt|;
name|NOT_ALLOWED_FOR_DIR
operator|.
name|add
argument_list|(
name|SVNProperty
operator|.
name|MIME_TYPE
argument_list|)
expr_stmt|;
block|}
specifier|public
specifier|static
name|void
name|validateRevisionProperties
parameter_list|(
name|SVNProperties
name|revisionProperties
parameter_list|)
throws|throws
name|SVNException
block|{
if|if
condition|(
name|hasSVNProperties
argument_list|(
name|revisionProperties
argument_list|)
condition|)
block|{
name|SVNErrorMessage
name|err
init|=
name|SVNErrorMessage
operator|.
name|create
argument_list|(
name|SVNErrorCode
operator|.
name|CLIENT_PROPERTY_NAME
argument_list|,
literal|"Standard properties can't be set explicitly as revision properties"
argument_list|)
decl_stmt|;
name|SVNErrorManager
operator|.
name|error
argument_list|(
name|err
argument_list|,
name|SVNLogType
operator|.
name|NETWORK
argument_list|)
expr_stmt|;
block|}
block|}
specifier|public
specifier|static
name|boolean
name|setWCProperty
parameter_list|(
name|SVNWCAccess
name|access
parameter_list|,
name|File
name|path
parameter_list|,
name|String
name|propName
parameter_list|,
name|SVNPropertyValue
name|propValue
parameter_list|,
name|boolean
name|write
parameter_list|)
throws|throws
name|SVNException
block|{
name|SVNEntry
name|entry
init|=
name|access
operator|.
name|getVersionedEntry
argument_list|(
name|path
argument_list|,
literal|false
argument_list|)
decl_stmt|;
name|SVNAdminArea
name|dir
init|=
name|entry
operator|.
name|getKind
argument_list|()
operator|==
name|SVNNodeKind
operator|.
name|DIR
condition|?
name|access
operator|.
name|retrieve
argument_list|(
name|path
argument_list|)
else|:
name|access
operator|.
name|retrieve
argument_list|(
name|path
operator|.
name|getParentFile
argument_list|()
argument_list|)
decl_stmt|;
name|SVNVersionedProperties
name|wcProps
init|=
name|dir
operator|.
name|getWCProperties
argument_list|(
name|entry
operator|.
name|getName
argument_list|()
argument_list|)
decl_stmt|;
name|SVNPropertyValue
name|oldValue
init|=
name|wcProps
operator|.
name|getPropertyValue
argument_list|(
name|propName
argument_list|)
decl_stmt|;
name|wcProps
operator|.
name|setPropertyValue
argument_list|(
name|propName
argument_list|,
name|propValue
argument_list|)
expr_stmt|;
if|if
condition|(
name|write
condition|)
block|{
name|dir
operator|.
name|saveWCProperties
argument_list|(
literal|false
argument_list|)
expr_stmt|;
block|}
return|return
name|oldValue
operator|==
literal|null
condition|?
name|propValue
operator|!=
literal|null
else|:
operator|!
name|oldValue
operator|.
name|equals
argument_list|(
name|propValue
argument_list|)
return|;
block|}
specifier|public
specifier|static
name|SVNPropertyValue
name|getWCProperty
parameter_list|(
name|SVNWCAccess
name|access
parameter_list|,
name|File
name|path
parameter_list|,
name|String
name|propName
parameter_list|)
throws|throws
name|SVNException
block|{
name|SVNEntry
name|entry
init|=
name|access
operator|.
name|getEntry
argument_list|(
name|path
argument_list|,
literal|false
argument_list|)
decl_stmt|;
if|if
condition|(
name|entry
operator|==
literal|null
condition|)
block|{
return|return
literal|null
return|;
block|}
name|SVNAdminArea
name|dir
init|=
name|entry
operator|.
name|getKind
argument_list|()
operator|==
name|SVNNodeKind
operator|.
name|DIR
condition|?
name|access
operator|.
name|retrieve
argument_list|(
name|path
argument_list|)
else|:
name|access
operator|.
name|retrieve
argument_list|(
name|path
operator|.
name|getParentFile
argument_list|()
argument_list|)
decl_stmt|;
return|return
name|dir
operator|.
name|getWCProperties
argument_list|(
name|entry
operator|.
name|getName
argument_list|()
argument_list|)
operator|.
name|getPropertyValue
argument_list|(
name|propName
argument_list|)
return|;
block|}
specifier|public
specifier|static
name|void
name|deleteWCProperties
parameter_list|(
name|SVNAdminArea
name|dir
parameter_list|,
name|String
name|name
parameter_list|,
name|boolean
name|recursive
parameter_list|)
throws|throws
name|SVNException
block|{
if|if
condition|(
name|name
operator|!=
literal|null
condition|)
block|{
name|SVNVersionedProperties
name|props
init|=
name|dir
operator|.
name|getWCProperties
argument_list|(
name|name
argument_list|)
decl_stmt|;
if|if
condition|(
name|props
operator|!=
literal|null
condition|)
block|{
name|props
operator|.
name|removeAll
argument_list|()
expr_stmt|;
block|}
block|}
if|if
condition|(
name|recursive
operator|||
name|name
operator|==
literal|null
condition|)
block|{
for|for
control|(
name|Iterator
name|entries
init|=
name|dir
operator|.
name|entries
argument_list|(
literal|false
argument_list|)
init|;
name|entries
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|SVNEntry
name|entry
init|=
operator|(
name|SVNEntry
operator|)
name|entries
operator|.
name|next
argument_list|()
decl_stmt|;
name|SVNVersionedProperties
name|props
init|=
name|dir
operator|.
name|getWCProperties
argument_list|(
name|entry
operator|.
name|getName
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|props
operator|!=
literal|null
condition|)
block|{
name|props
operator|.
name|removeAll
argument_list|()
expr_stmt|;
block|}
if|if
condition|(
name|entry
operator|.
name|isFile
argument_list|()
operator|||
name|dir
operator|.
name|getThisDirName
argument_list|()
operator|.
name|equals
argument_list|(
name|entry
operator|.
name|getName
argument_list|()
argument_list|)
condition|)
block|{
continue|continue;
block|}
if|if
condition|(
name|recursive
condition|)
block|{
name|SVNAdminArea
name|childDir
init|=
name|dir
operator|.
name|getWCAccess
argument_list|()
operator|.
name|retrieve
argument_list|(
name|dir
operator|.
name|getFile
argument_list|(
name|entry
operator|.
name|getName
argument_list|()
argument_list|)
argument_list|)
decl_stmt|;
name|deleteWCProperties
argument_list|(
name|childDir
argument_list|,
literal|null
argument_list|,
literal|true
argument_list|)
expr_stmt|;
block|}
block|}
block|}
name|dir
operator|.
name|saveWCProperties
argument_list|(
literal|false
argument_list|)
expr_stmt|;
block|}
specifier|public
specifier|static
name|SVNPropertyValue
name|getProperty
parameter_list|(
name|SVNWCAccess
name|access
parameter_list|,
name|File
name|path
parameter_list|,
name|String
name|propName
parameter_list|)
throws|throws
name|SVNException
block|{
name|SVNEntry
name|entry
init|=
name|access
operator|.
name|getEntry
argument_list|(
name|path
argument_list|,
literal|false
argument_list|)
decl_stmt|;
if|if
condition|(
name|entry
operator|==
literal|null
condition|)
block|{
return|return
literal|null
return|;
block|}
name|String
index|[]
name|cachableProperties
init|=
name|entry
operator|.
name|getCachableProperties
argument_list|()
decl_stmt|;
if|if
condition|(
name|cachableProperties
operator|!=
literal|null
operator|&&
name|contains
argument_list|(
name|cachableProperties
argument_list|,
name|propName
argument_list|)
condition|)
block|{
name|String
index|[]
name|presentProperties
init|=
name|entry
operator|.
name|getPresentProperties
argument_list|()
decl_stmt|;
if|if
condition|(
name|presentProperties
operator|==
literal|null
operator|||
operator|!
name|contains
argument_list|(
name|presentProperties
argument_list|,
name|propName
argument_list|)
condition|)
block|{
return|return
literal|null
return|;
block|}
if|if
condition|(
name|SVNProperty
operator|.
name|isBooleanProperty
argument_list|(
name|propName
argument_list|)
condition|)
block|{
return|return
name|SVNProperty
operator|.
name|getValueOfBooleanProperty
argument_list|(
name|propName
argument_list|)
return|;
block|}
block|}
if|if
condition|(
name|SVNProperty
operator|.
name|isWorkingCopyProperty
argument_list|(
name|propName
argument_list|)
condition|)
block|{
return|return
name|getWCProperty
argument_list|(
name|access
argument_list|,
name|path
argument_list|,
name|propName
argument_list|)
return|;
block|}
if|else if
condition|(
name|SVNProperty
operator|.
name|isEntryProperty
argument_list|(
name|propName
argument_list|)
condition|)
block|{
name|SVNErrorMessage
name|err
init|=
name|SVNErrorMessage
operator|.
name|create
argument_list|(
name|SVNErrorCode
operator|.
name|BAD_PROP_KIND
argument_list|,
literal|"Property ''{0}'' is an entry property"
argument_list|,
name|propName
argument_list|)
decl_stmt|;
name|SVNErrorManager
operator|.
name|error
argument_list|(
name|err
argument_list|,
name|SVNLogType
operator|.
name|DEFAULT
argument_list|)
expr_stmt|;
block|}
name|SVNAdminArea
name|dir
init|=
name|entry
operator|.
name|getKind
argument_list|()
operator|==
name|SVNNodeKind
operator|.
name|DIR
condition|?
name|access
operator|.
name|retrieve
argument_list|(
name|path
argument_list|)
else|:
name|access
operator|.
name|retrieve
argument_list|(
name|path
operator|.
name|getParentFile
argument_list|()
argument_list|)
decl_stmt|;
return|return
name|dir
operator|.
name|getProperties
argument_list|(
name|entry
operator|.
name|getName
argument_list|()
argument_list|)
operator|.
name|getPropertyValue
argument_list|(
name|propName
argument_list|)
return|;
block|}
specifier|public
specifier|static
name|boolean
name|setProperty
parameter_list|(
specifier|final
name|SVNWCAccess
name|access
parameter_list|,
specifier|final
name|File
name|path
parameter_list|,
specifier|final
name|String
name|propName
parameter_list|,
name|SVNPropertyValue
name|propValue
parameter_list|,
name|boolean
name|skipChecks
parameter_list|)
throws|throws
name|SVNException
block|{
if|if
condition|(
name|SVNProperty
operator|.
name|isWorkingCopyProperty
argument_list|(
name|propName
argument_list|)
condition|)
block|{
return|return
name|setWCProperty
argument_list|(
name|access
argument_list|,
name|path
argument_list|,
name|propName
argument_list|,
name|propValue
argument_list|,
literal|true
argument_list|)
return|;
block|}
if|else if
condition|(
name|SVNProperty
operator|.
name|isEntryProperty
argument_list|(
name|propName
argument_list|)
condition|)
block|{
name|SVNErrorMessage
name|err
init|=
name|SVNErrorMessage
operator|.
name|create
argument_list|(
name|SVNErrorCode
operator|.
name|BAD_PROP_KIND
argument_list|,
literal|"Property ''{0}'' is an entry property"
argument_list|,
name|propName
argument_list|)
decl_stmt|;
name|SVNErrorManager
operator|.
name|error
argument_list|(
name|err
argument_list|,
name|SVNLogType
operator|.
name|DEFAULT
argument_list|)
expr_stmt|;
block|}
name|SVNEntry
name|entry
init|=
name|access
operator|.
name|getVersionedEntry
argument_list|(
name|path
argument_list|,
literal|false
argument_list|)
decl_stmt|;
name|SVNAdminArea
name|dir
init|=
name|entry
operator|.
name|isDirectory
argument_list|()
condition|?
name|access
operator|.
name|retrieve
argument_list|(
name|path
argument_list|)
else|:
name|access
operator|.
name|retrieve
argument_list|(
name|path
operator|.
name|getParentFile
argument_list|()
argument_list|)
decl_stmt|;
name|boolean
name|updateTimeStamp
init|=
name|SVNProperty
operator|.
name|EOL_STYLE
operator|.
name|equals
argument_list|(
name|propName
argument_list|)
operator|||
name|SVNProperty
operator|.
name|CHARSET
operator|.
name|equals
argument_list|(
name|propName
argument_list|)
decl_stmt|;
if|if
condition|(
name|propValue
operator|!=
literal|null
operator|&&
name|SVNProperty
operator|.
name|isSVNProperty
argument_list|(
name|propName
argument_list|)
condition|)
block|{
name|propValue
operator|=
name|validatePropertyValue
argument_list|(
name|path
operator|.
name|getAbsolutePath
argument_list|()
argument_list|,
name|entry
operator|.
name|getKind
argument_list|()
argument_list|,
name|propName
argument_list|,
name|propValue
argument_list|,
name|skipChecks
argument_list|,
name|access
operator|.
name|getOptions
argument_list|()
argument_list|,
operator|new
name|ISVNFileContentFetcher
argument_list|()
block|{
specifier|public
name|void
name|fetchFileContent
parameter_list|(
name|OutputStream
name|os
parameter_list|)
throws|throws
name|SVNException
block|{
name|InputStream
name|is
init|=
name|SVNFileUtil
operator|.
name|openFileForReading
argument_list|(
name|path
argument_list|,
name|SVNLogType
operator|.
name|WC
argument_list|)
decl_stmt|;
try|try
block|{
name|SVNTranslator
operator|.
name|copy
argument_list|(
name|is
argument_list|,
name|os
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOExceptionWrapper
name|ioew
parameter_list|)
block|{
throw|throw
name|ioew
operator|.
name|getOriginalException
argument_list|()
throw|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
name|SVNErrorManager
operator|.
name|error
argument_list|(
name|SVNErrorMessage
operator|.
name|create
argument_list|(
name|SVNErrorCode
operator|.
name|IO_ERROR
argument_list|)
argument_list|,
name|e
argument_list|,
name|SVNLogType
operator|.
name|DEFAULT
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
name|SVNFileUtil
operator|.
name|closeFile
argument_list|(
name|is
argument_list|)
expr_stmt|;
block|}
block|}
specifier|public
name|boolean
name|fileIsBinary
parameter_list|()
throws|throws
name|SVNException
block|{
name|SVNPropertyValue
name|mimeType
init|=
name|SVNPropertiesManager
operator|.
name|getProperty
argument_list|(
name|access
argument_list|,
name|path
argument_list|,
name|SVNProperty
operator|.
name|MIME_TYPE
argument_list|)
decl_stmt|;
return|return
name|mimeType
operator|!=
literal|null
operator|&&
name|SVNProperty
operator|.
name|isBinaryMimeType
argument_list|(
name|mimeType
operator|.
name|getString
argument_list|()
argument_list|)
return|;
block|}
specifier|public
name|SVNPropertyValue
name|getProperty
parameter_list|(
name|String
name|propertyName
parameter_list|)
throws|throws
name|SVNException
block|{
name|SVNVersionedProperties
name|wcProps
init|=
name|dir
operator|.
name|getWCProperties
argument_list|(
name|entry
operator|.
name|getName
argument_list|()
argument_list|)
decl_stmt|;
return|return
name|wcProps
operator|.
name|getPropertyValue
argument_list|(
name|propertyName
argument_list|)
return|;
block|}
block|}
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|entry
operator|.
name|getKind
argument_list|()
operator|==
name|SVNNodeKind
operator|.
name|FILE
operator|&&
name|SVNProperty
operator|.
name|EXECUTABLE
operator|.
name|equals
argument_list|(
name|propName
argument_list|)
condition|)
block|{
if|if
condition|(
name|propValue
operator|==
literal|null
condition|)
block|{
name|SVNFileUtil
operator|.
name|setExecutable
argument_list|(
name|path
argument_list|,
literal|false
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|propValue
operator|=
name|SVNProperty
operator|.
name|getValueOfBooleanProperty
argument_list|(
name|propName
argument_list|)
expr_stmt|;
name|SVNFileUtil
operator|.
name|setExecutable
argument_list|(
name|path
argument_list|,
literal|true
argument_list|)
expr_stmt|;
block|}
block|}
if|if
condition|(
name|entry
operator|.
name|getKind
argument_list|()
operator|==
name|SVNNodeKind
operator|.
name|FILE
operator|&&
name|SVNProperty
operator|.
name|NEEDS_LOCK
operator|.
name|equals
argument_list|(
name|propName
argument_list|)
condition|)
block|{
if|if
condition|(
name|propValue
operator|==
literal|null
condition|)
block|{
name|SVNFileUtil
operator|.
name|setReadonly
argument_list|(
name|path
argument_list|,
literal|false
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|propValue
operator|=
name|SVNProperty
operator|.
name|getValueOfBooleanProperty
argument_list|(
name|propName
argument_list|)
expr_stmt|;
block|}
block|}
name|SVNVersionedProperties
name|properties
init|=
name|dir
operator|.
name|getProperties
argument_list|(
name|entry
operator|.
name|getName
argument_list|()
argument_list|)
decl_stmt|;
name|SVNPropertyValue
name|oldValue
init|=
name|properties
operator|.
name|getPropertyValue
argument_list|(
name|propName
argument_list|)
decl_stmt|;
name|SVNEventAction
name|action
decl_stmt|;
if|if
condition|(
name|oldValue
operator|==
literal|null
condition|)
block|{
if|if
condition|(
name|propValue
operator|==
literal|null
condition|)
block|{
name|action
operator|=
name|SVNEventAction
operator|.
name|PROPERTY_DELETE_NONEXISTENT
expr_stmt|;
block|}
else|else
block|{
name|action
operator|=
name|SVNEventAction
operator|.
name|PROPERTY_ADD
expr_stmt|;
block|}
block|}
else|else
block|{
if|if
condition|(
name|propValue
operator|==
literal|null
condition|)
block|{
name|action
operator|=
name|SVNEventAction
operator|.
name|PROPERTY_DELETE
expr_stmt|;
block|}
else|else
block|{
name|action
operator|=
name|SVNEventAction
operator|.
name|PROPERTY_MODIFY
expr_stmt|;
block|}
block|}
if|if
condition|(
operator|!
name|updateTimeStamp
operator|&&
operator|(
name|entry
operator|.
name|getKind
argument_list|()
operator|==
name|SVNNodeKind
operator|.
name|FILE
operator|&&
name|SVNProperty
operator|.
name|KEYWORDS
operator|.
name|equals
argument_list|(
name|propName
argument_list|)
operator|)
condition|)
block|{
name|Collection
name|oldKeywords
init|=
name|getKeywords
argument_list|(
name|oldValue
operator|==
literal|null
condition|?
literal|null
else|:
name|oldValue
operator|.
name|getString
argument_list|()
argument_list|)
decl_stmt|;
name|Collection
name|newKeywords
init|=
name|getKeywords
argument_list|(
name|propValue
operator|==
literal|null
condition|?
literal|null
else|:
name|propValue
operator|.
name|getString
argument_list|()
argument_list|)
decl_stmt|;
name|updateTimeStamp
operator|=
operator|!
name|oldKeywords
operator|.
name|equals
argument_list|(
name|newKeywords
argument_list|)
expr_stmt|;
block|}
name|SVNLog
name|log
init|=
name|dir
operator|.
name|getLog
argument_list|()
decl_stmt|;
if|if
condition|(
name|updateTimeStamp
condition|)
block|{
name|SVNProperties
name|command
init|=
operator|new
name|SVNProperties
argument_list|()
decl_stmt|;
name|command
operator|.
name|put
argument_list|(
name|SVNLog
operator|.
name|NAME_ATTR
argument_list|,
name|entry
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
name|command
operator|.
name|put
argument_list|(
name|SVNProperty
operator|.
name|shortPropertyName
argument_list|(
name|SVNProperty
operator|.
name|TEXT_TIME
argument_list|)
argument_list|,
operator|(
name|String
operator|)
literal|null
argument_list|)
expr_stmt|;
name|log
operator|.
name|addCommand
argument_list|(
name|SVNLog
operator|.
name|MODIFY_ENTRY
argument_list|,
name|command
argument_list|,
literal|false
argument_list|)
expr_stmt|;
block|}
name|properties
operator|.
name|setPropertyValue
argument_list|(
name|propName
argument_list|,
name|propValue
argument_list|)
expr_stmt|;
name|dir
operator|.
name|saveVersionedProperties
argument_list|(
name|log
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|log
operator|.
name|save
argument_list|()
expr_stmt|;
name|dir
operator|.
name|runLogs
argument_list|()
expr_stmt|;
specifier|final
name|boolean
name|modified
init|=
name|oldValue
operator|==
literal|null
condition|?
name|propValue
operator|!=
literal|null
else|:
operator|!
name|oldValue
operator|.
name|equals
argument_list|(
name|propValue
argument_list|)
decl_stmt|;
if|if
condition|(
name|modified
operator|||
name|action
operator|==
name|SVNEventAction
operator|.
name|PROPERTY_DELETE_NONEXISTENT
condition|)
block|{
name|dir
operator|.
name|getWCAccess
argument_list|()
operator|.
name|handleEvent
argument_list|(
operator|new
name|SVNEvent
argument_list|(
name|path
argument_list|,
name|entry
operator|.
name|getKind
argument_list|()
argument_list|,
literal|null
argument_list|,
operator|-
literal|1
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|,
name|action
argument_list|,
name|action
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|)
argument_list|)
expr_stmt|;
block|}
return|return
name|modified
return|;
block|}
specifier|public
specifier|static
name|SVNStatusType
name|mergeProperties
parameter_list|(
name|SVNWCAccess
name|wcAccess
parameter_list|,
name|File
name|path
parameter_list|,
name|SVNProperties
name|baseProperties
parameter_list|,
name|SVNProperties
name|diff
parameter_list|,
name|boolean
name|baseMerge
parameter_list|,
name|boolean
name|dryRun
parameter_list|)
throws|throws
name|SVNException
block|{
name|SVNEntry
name|entry
init|=
name|wcAccess
operator|.
name|getVersionedEntry
argument_list|(
name|path
argument_list|,
literal|false
argument_list|)
decl_stmt|;
name|File
name|parent
init|=
literal|null
decl_stmt|;
name|String
name|name
init|=
literal|null
decl_stmt|;
if|if
condition|(
name|entry
operator|.
name|isDirectory
argument_list|()
condition|)
block|{
name|parent
operator|=
name|path
expr_stmt|;
name|name
operator|=
literal|""
expr_stmt|;
block|}
if|else if
condition|(
name|entry
operator|.
name|isFile
argument_list|()
condition|)
block|{
name|parent
operator|=
name|path
operator|.
name|getParentFile
argument_list|()
expr_stmt|;
name|name
operator|=
name|entry
operator|.
name|getName
argument_list|()
expr_stmt|;
block|}
name|SVNLog
name|log
init|=
literal|null
decl_stmt|;
name|SVNAdminArea
name|dir
init|=
name|wcAccess
operator|.
name|retrieve
argument_list|(
name|parent
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|dryRun
condition|)
block|{
name|log
operator|=
name|dir
operator|.
name|getLog
argument_list|()
expr_stmt|;
block|}
name|SVNStatusType
name|result
init|=
name|dir
operator|.
name|mergeProperties
argument_list|(
name|name
argument_list|,
name|baseProperties
argument_list|,
name|diff
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|,
name|baseMerge
argument_list|,
name|dryRun
argument_list|,
name|log
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|dryRun
condition|)
block|{
name|log
operator|.
name|save
argument_list|()
expr_stmt|;
name|dir
operator|.
name|runLogs
argument_list|()
expr_stmt|;
block|}
return|return
name|result
return|;
block|}
specifier|public
specifier|static
name|Map
name|computeAutoProperties
parameter_list|(
name|ISVNOptions
name|options
parameter_list|,
name|File
name|file
parameter_list|,
name|Map
name|properties
parameter_list|)
throws|throws
name|SVNException
block|{
name|properties
operator|=
name|options
operator|.
name|applyAutoProperties
argument_list|(
name|file
argument_list|,
name|properties
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|properties
operator|.
name|containsKey
argument_list|(
name|SVNProperty
operator|.
name|MIME_TYPE
argument_list|)
condition|)
block|{
name|String
name|mimeType
init|=
name|SVNFileUtil
operator|.
name|detectMimeType
argument_list|(
name|file
argument_list|,
name|options
operator|.
name|getFileExtensionsToMimeTypes
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|mimeType
operator|!=
literal|null
condition|)
block|{
name|properties
operator|.
name|put
argument_list|(
name|SVNProperty
operator|.
name|MIME_TYPE
argument_list|,
name|mimeType
argument_list|)
expr_stmt|;
block|}
block|}
if|if
condition|(
name|SVNProperty
operator|.
name|isBinaryMimeType
argument_list|(
operator|(
name|String
operator|)
name|properties
operator|.
name|get
argument_list|(
name|SVNProperty
operator|.
name|MIME_TYPE
argument_list|)
argument_list|)
condition|)
block|{
name|properties
operator|.
name|remove
argument_list|(
name|SVNProperty
operator|.
name|EOL_STYLE
argument_list|)
expr_stmt|;
name|properties
operator|.
name|remove
argument_list|(
name|SVNProperty
operator|.
name|CHARSET
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
operator|!
name|properties
operator|.
name|containsKey
argument_list|(
name|SVNProperty
operator|.
name|EXECUTABLE
argument_list|)
condition|)
block|{
if|if
condition|(
name|SVNFileUtil
operator|.
name|isExecutable
argument_list|(
name|file
argument_list|)
condition|)
block|{
name|properties
operator|.
name|put
argument_list|(
name|SVNProperty
operator|.
name|EXECUTABLE
argument_list|,
literal|""
argument_list|)
expr_stmt|;
block|}
block|}
return|return
name|properties
return|;
block|}
specifier|public
specifier|static
name|Map
name|getWorkingCopyPropertyValues
parameter_list|(
name|File
name|path
parameter_list|,
name|SVNEntry
name|entry
parameter_list|,
specifier|final
name|String
name|propName
parameter_list|,
name|SVNDepth
name|depth
parameter_list|,
specifier|final
name|boolean
name|base
parameter_list|)
throws|throws
name|SVNException
block|{
specifier|final
name|Map
name|pathsToPropValues
init|=
operator|new
name|SVNHashMap
argument_list|()
decl_stmt|;
name|ISVNEntryHandler
name|handler
init|=
operator|new
name|ISVNEntryHandler
argument_list|()
block|{
specifier|public
name|void
name|handleEntry
parameter_list|(
name|File
name|itemPath
parameter_list|,
name|SVNEntry
name|itemEntry
parameter_list|)
throws|throws
name|SVNException
block|{
name|SVNAdminArea
name|adminArea
init|=
name|itemEntry
operator|.
name|getAdminArea
argument_list|()
decl_stmt|;
if|if
condition|(
name|itemEntry
operator|.
name|isDirectory
argument_list|()
operator|&&
operator|!
name|itemEntry
operator|.
name|getName
argument_list|()
operator|.
name|equals
argument_list|(
name|adminArea
operator|.
name|getThisDirName
argument_list|()
argument_list|)
condition|)
block|{
return|return;
block|}
if|if
condition|(
operator|(
name|itemEntry
operator|.
name|isScheduledForAddition
argument_list|()
operator|&&
name|base
operator|)
operator|||
operator|(
name|itemEntry
operator|.
name|isScheduledForDeletion
argument_list|()
operator|&&
operator|!
name|base
operator|)
condition|)
block|{
return|return;
block|}
name|SVNPropertyValue
name|propValue
init|=
literal|null
decl_stmt|;
name|SVNWCAccess
name|access
init|=
name|adminArea
operator|.
name|getWCAccess
argument_list|()
decl_stmt|;
if|if
condition|(
name|base
condition|)
block|{
name|SVNEntry
name|pathEntry
init|=
name|access
operator|.
name|getEntry
argument_list|(
name|itemPath
argument_list|,
literal|false
argument_list|)
decl_stmt|;
if|if
condition|(
name|pathEntry
operator|!=
literal|null
condition|)
block|{
name|SVNAdminArea
name|pathArea
init|=
name|pathEntry
operator|.
name|getAdminArea
argument_list|()
decl_stmt|;
name|SVNVersionedProperties
name|baseProps
init|=
name|pathArea
operator|.
name|getBaseProperties
argument_list|(
name|pathEntry
operator|.
name|getName
argument_list|()
argument_list|)
decl_stmt|;
name|propValue
operator|=
name|baseProps
operator|.
name|getPropertyValue
argument_list|(
name|propName
argument_list|)
expr_stmt|;
block|}
block|}
else|else
block|{
name|SVNEntry
name|pathEntry
init|=
name|access
operator|.
name|getEntry
argument_list|(
name|itemPath
argument_list|,
literal|true
argument_list|)
decl_stmt|;
if|if
condition|(
name|pathEntry
operator|!=
literal|null
condition|)
block|{
name|SVNAdminArea
name|pathArea
init|=
name|pathEntry
operator|.
name|getAdminArea
argument_list|()
decl_stmt|;
name|SVNVersionedProperties
name|workingProps
init|=
name|pathArea
operator|.
name|getProperties
argument_list|(
name|pathEntry
operator|.
name|getName
argument_list|()
argument_list|)
decl_stmt|;
name|propValue
operator|=
name|workingProps
operator|.
name|getPropertyValue
argument_list|(
name|propName
argument_list|)
expr_stmt|;
block|}
block|}
if|if
condition|(
name|propValue
operator|!=
literal|null
condition|)
block|{
name|pathsToPropValues
operator|.
name|put
argument_list|(
name|itemPath
argument_list|,
name|propValue
argument_list|)
expr_stmt|;
block|}
block|}
specifier|public
name|void
name|handleError
parameter_list|(
name|File
name|path
parameter_list|,
name|SVNErrorMessage
name|error
parameter_list|)
throws|throws
name|SVNException
block|{
while|while
condition|(
name|error
operator|.
name|hasChildErrorMessage
argument_list|()
condition|)
block|{
name|error
operator|=
name|error
operator|.
name|getChildErrorMessage
argument_list|()
expr_stmt|;
block|}
if|if
condition|(
name|error
operator|.
name|getErrorCode
argument_list|()
operator|==
name|SVNErrorCode
operator|.
name|WC_PATH_NOT_FOUND
condition|)
block|{
return|return;
block|}
name|SVNErrorManager
operator|.
name|error
argument_list|(
name|error
argument_list|,
name|SVNLogType
operator|.
name|WC
argument_list|)
expr_stmt|;
block|}
block|}
decl_stmt|;
if|if
condition|(
name|depth
operator|==
name|SVNDepth
operator|.
name|UNKNOWN
condition|)
block|{
name|depth
operator|=
name|SVNDepth
operator|.
name|INFINITY
expr_stmt|;
block|}
name|SVNAdminArea
name|adminArea
init|=
name|entry
operator|.
name|getAdminArea
argument_list|()
decl_stmt|;
if|if
condition|(
name|entry
operator|.
name|isDirectory
argument_list|()
operator|&&
name|depth
operator|.
name|compareTo
argument_list|(
name|SVNDepth
operator|.
name|FILES
argument_list|)
operator|>=
literal|0
condition|)
block|{
name|SVNWCAccess
name|wcAccess
init|=
name|adminArea
operator|.
name|getWCAccess
argument_list|()
decl_stmt|;
name|wcAccess
operator|.
name|walkEntries
argument_list|(
name|path
argument_list|,
name|handler
argument_list|,
literal|false
argument_list|,
name|depth
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|handler
operator|.
name|handleEntry
argument_list|(
name|path
argument_list|,
name|entry
argument_list|)
expr_stmt|;
block|}
return|return
name|pathsToPropValues
return|;
block|}
specifier|public
specifier|static
name|void
name|recordWCMergeInfo
parameter_list|(
name|File
name|path
parameter_list|,
name|Map
name|mergeInfo
parameter_list|,
name|SVNWCAccess
name|wcAccess
parameter_list|)
throws|throws
name|SVNException
block|{
name|SVNPropertyValue
name|value
init|=
literal|null
decl_stmt|;
if|if
condition|(
name|mergeInfo
operator|!=
literal|null
condition|)
block|{
name|value
operator|=
name|SVNPropertyValue
operator|.
name|create
argument_list|(
name|SVNMergeInfoUtil
operator|.
name|formatMergeInfoToString
argument_list|(
name|mergeInfo
argument_list|,
literal|null
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|setProperty
argument_list|(
name|wcAccess
argument_list|,
name|path
argument_list|,
name|SVNProperty
operator|.
name|MERGE_INFO
argument_list|,
name|value
argument_list|,
literal|true
argument_list|)
expr_stmt|;
block|}
specifier|public
specifier|static
name|Map
name|parseMergeInfo
parameter_list|(
name|File
name|path
parameter_list|,
name|SVNEntry
name|entry
parameter_list|,
name|boolean
name|base
parameter_list|)
throws|throws
name|SVNException
block|{
name|Map
name|fileToProp
init|=
name|SVNPropertiesManager
operator|.
name|getWorkingCopyPropertyValues
argument_list|(
name|path
argument_list|,
name|entry
argument_list|,
name|SVNProperty
operator|.
name|MERGE_INFO
argument_list|,
name|SVNDepth
operator|.
name|EMPTY
argument_list|,
name|base
argument_list|)
decl_stmt|;
name|Map
name|result
init|=
literal|null
decl_stmt|;
name|SVNPropertyValue
name|propValue
init|=
operator|(
name|SVNPropertyValue
operator|)
name|fileToProp
operator|.
name|get
argument_list|(
name|path
argument_list|)
decl_stmt|;
if|if
condition|(
name|propValue
operator|!=
literal|null
operator|&&
name|propValue
operator|.
name|getString
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|result
operator|=
name|SVNMergeInfoUtil
operator|.
name|parseMergeInfo
argument_list|(
operator|new
name|StringBuffer
argument_list|(
name|propValue
operator|.
name|getString
argument_list|()
argument_list|)
argument_list|,
name|result
argument_list|)
expr_stmt|;
block|}
return|return
name|result
return|;
block|}
specifier|public
specifier|static
name|boolean
name|isValidPropertyName
parameter_list|(
name|String
name|name
parameter_list|)
throws|throws
name|SVNException
block|{
if|if
condition|(
name|name
operator|==
literal|null
operator|||
name|name
operator|.
name|length
argument_list|()
operator|==
literal|0
condition|)
block|{
name|SVNErrorMessage
name|err
init|=
name|SVNErrorMessage
operator|.
name|create
argument_list|(
name|SVNErrorCode
operator|.
name|CLIENT_PROPERTY_NAME
argument_list|,
literal|"Property name is empty"
argument_list|)
decl_stmt|;
name|SVNErrorManager
operator|.
name|error
argument_list|(
name|err
argument_list|,
name|SVNLogType
operator|.
name|DEFAULT
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
operator|!
operator|(
name|Character
operator|.
name|isLetter
argument_list|(
name|name
operator|.
name|charAt
argument_list|(
literal|0
argument_list|)
argument_list|)
operator|||
name|name
operator|.
name|charAt
argument_list|(
literal|0
argument_list|)
operator|==
literal|':'
operator|||
name|name
operator|.
name|charAt
argument_list|(
literal|0
argument_list|)
operator|==
literal|'_'
operator|)
condition|)
block|{
return|return
literal|false
return|;
block|}
for|for
control|(
name|int
name|i
init|=
literal|1
init|;
name|i
operator|<
name|name
operator|.
name|length
argument_list|()
condition|;
name|i
operator|++
control|)
block|{
if|if
condition|(
operator|!
operator|(
name|Character
operator|.
name|isLetterOrDigit
argument_list|(
name|name
operator|.
name|charAt
argument_list|(
name|i
argument_list|)
argument_list|)
operator|||
name|name
operator|.
name|charAt
argument_list|(
name|i
argument_list|)
operator|==
literal|'-'
operator|||
name|name
operator|.
name|charAt
argument_list|(
name|i
argument_list|)
operator|==
literal|'.'
operator|||
name|name
operator|.
name|charAt
argument_list|(
name|i
argument_list|)
operator|==
literal|':'
operator|||
name|name
operator|.
name|charAt
argument_list|(
name|i
argument_list|)
operator|==
literal|'_'
operator|)
condition|)
block|{
return|return
literal|false
return|;
block|}
block|}
return|return
literal|true
return|;
block|}
specifier|public
specifier|static
name|boolean
name|propNeedsTranslation
parameter_list|(
name|String
name|propertyName
parameter_list|)
block|{
return|return
name|SVNProperty
operator|.
name|isSVNProperty
argument_list|(
name|propertyName
argument_list|)
return|;
block|}
specifier|private
specifier|static
name|Collection
name|getKeywords
parameter_list|(
name|String
name|value
parameter_list|)
block|{
name|Collection
name|keywords
init|=
operator|new
name|SVNHashSet
argument_list|()
decl_stmt|;
if|if
condition|(
name|value
operator|==
literal|null
operator|||
literal|""
operator|.
name|equals
argument_list|(
name|value
operator|.
name|trim
argument_list|()
argument_list|)
condition|)
block|{
return|return
name|keywords
return|;
block|}
for|for
control|(
name|StringTokenizer
name|tokens
init|=
operator|new
name|StringTokenizer
argument_list|(
name|value
argument_list|,
literal|" \t\n\r"
argument_list|)
init|;
name|tokens
operator|.
name|hasMoreTokens
argument_list|()
condition|;
control|)
block|{
name|keywords
operator|.
name|add
argument_list|(
name|tokens
operator|.
name|nextToken
argument_list|()
operator|.
name|toLowerCase
argument_list|()
argument_list|)
expr_stmt|;
block|}
return|return
name|keywords
return|;
block|}
specifier|private
specifier|static
name|boolean
name|contains
parameter_list|(
name|String
index|[]
name|values
parameter_list|,
name|String
name|value
parameter_list|)
block|{
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|value
operator|!=
literal|null
operator|&&
name|i
operator|<
name|values
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
if|if
condition|(
name|values
index|[
name|i
index|]
operator|.
name|equals
argument_list|(
name|value
argument_list|)
condition|)
block|{
return|return
literal|true
return|;
block|}
block|}
return|return
literal|false
return|;
block|}
specifier|public
specifier|static
name|SVNPropertyValue
name|validatePropertyValue
parameter_list|(
name|String
name|path
parameter_list|,
name|SVNNodeKind
name|kind
parameter_list|,
name|String
name|name
parameter_list|,
name|SVNPropertyValue
name|value
parameter_list|,
name|boolean
name|force
parameter_list|,
name|ISVNOptions
name|options
parameter_list|,
name|ISVNFileContentFetcher
name|fileContentFetcher
parameter_list|)
throws|throws
name|SVNException
block|{
if|if
condition|(
name|value
operator|==
literal|null
condition|)
block|{
return|return
name|value
return|;
block|}
name|validatePropertyName
argument_list|(
name|path
argument_list|,
name|name
argument_list|,
name|kind
argument_list|)
expr_stmt|;
if|if
condition|(
name|SVNProperty
operator|.
name|isSVNProperty
argument_list|(
name|name
argument_list|)
operator|&&
name|value
operator|.
name|isString
argument_list|()
condition|)
block|{
name|String
name|str
init|=
name|value
operator|.
name|getString
argument_list|()
decl_stmt|;
name|str
operator|=
name|str
operator|.
name|replaceAll
argument_list|(
literal|"\r\n"
argument_list|,
literal|"\n"
argument_list|)
expr_stmt|;
name|str
operator|=
name|str
operator|.
name|replace
argument_list|(
literal|'\r'
argument_list|,
literal|'\n'
argument_list|)
expr_stmt|;
name|value
operator|=
name|SVNPropertyValue
operator|.
name|create
argument_list|(
name|str
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
operator|!
name|force
operator|&&
name|SVNProperty
operator|.
name|EOL_STYLE
operator|.
name|equals
argument_list|(
name|name
argument_list|)
condition|)
block|{
name|value
operator|=
name|SVNPropertyValue
operator|.
name|create
argument_list|(
name|value
operator|.
name|getString
argument_list|()
operator|.
name|trim
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|SVNTranslator
operator|.
name|getEOL
argument_list|(
name|value
operator|.
name|getString
argument_list|()
argument_list|,
name|options
argument_list|)
operator|==
literal|null
condition|)
block|{
name|SVNErrorMessage
name|error
init|=
name|SVNErrorMessage
operator|.
name|create
argument_list|(
name|SVNErrorCode
operator|.
name|IO_UNKNOWN_EOL
argument_list|,
literal|"Unrecognized line ending style for ''{0}''"
argument_list|,
name|path
argument_list|)
decl_stmt|;
name|SVNErrorManager
operator|.
name|error
argument_list|(
name|error
argument_list|,
name|SVNLogType
operator|.
name|DEFAULT
argument_list|)
expr_stmt|;
block|}
name|validateEOLProperty
argument_list|(
name|path
argument_list|,
name|fileContentFetcher
argument_list|)
expr_stmt|;
block|}
if|else if
condition|(
operator|!
name|force
operator|&&
name|SVNProperty
operator|.
name|CHARSET
operator|.
name|equals
argument_list|(
name|name
argument_list|)
condition|)
block|{
name|value
operator|=
name|SVNPropertyValue
operator|.
name|create
argument_list|(
name|value
operator|.
name|getString
argument_list|()
operator|.
name|trim
argument_list|()
argument_list|)
expr_stmt|;
try|try
block|{
name|SVNTranslator
operator|.
name|getCharset
argument_list|(
name|value
operator|.
name|getString
argument_list|()
argument_list|,
name|path
argument_list|,
name|options
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|SVNException
name|e
parameter_list|)
block|{
name|SVNErrorMessage
name|error
init|=
name|SVNErrorMessage
operator|.
name|create
argument_list|(
name|SVNErrorCode
operator|.
name|ILLEGAL_TARGET
argument_list|,
literal|"Charset ''{0}'' is not supported on this computer"
argument_list|,
name|value
operator|.
name|getString
argument_list|()
argument_list|)
decl_stmt|;
name|SVNErrorManager
operator|.
name|error
argument_list|(
name|error
argument_list|,
name|SVNLogType
operator|.
name|DEFAULT
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|fileContentFetcher
operator|.
name|fileIsBinary
argument_list|()
condition|)
block|{
name|SVNErrorMessage
name|error
init|=
name|SVNErrorMessage
operator|.
name|create
argument_list|(
name|SVNErrorCode
operator|.
name|ILLEGAL_TARGET
argument_list|,
literal|"File ''{0}'' has binary mime type property"
argument_list|,
name|path
argument_list|)
decl_stmt|;
name|SVNErrorManager
operator|.
name|error
argument_list|(
name|error
argument_list|,
name|SVNLogType
operator|.
name|DEFAULT
argument_list|)
expr_stmt|;
block|}
block|}
if|else if
condition|(
operator|!
name|force
operator|&&
name|SVNProperty
operator|.
name|MIME_TYPE
operator|.
name|equals
argument_list|(
name|name
argument_list|)
condition|)
block|{
name|value
operator|=
name|SVNPropertyValue
operator|.
name|create
argument_list|(
name|value
operator|.
name|getString
argument_list|()
operator|.
name|trim
argument_list|()
argument_list|)
expr_stmt|;
name|validateMimeType
argument_list|(
name|value
operator|.
name|getString
argument_list|()
argument_list|)
expr_stmt|;
block|}
if|else if
condition|(
name|SVNProperty
operator|.
name|IGNORE
operator|.
name|equals
argument_list|(
name|name
argument_list|)
operator|||
name|SVNProperty
operator|.
name|EXTERNALS
operator|.
name|equals
argument_list|(
name|name
argument_list|)
condition|)
block|{
if|if
condition|(
operator|!
name|value
operator|.
name|getString
argument_list|()
operator|.
name|endsWith
argument_list|(
literal|"\n"
argument_list|)
condition|)
block|{
name|value
operator|=
name|SVNPropertyValue
operator|.
name|create
argument_list|(
name|value
operator|.
name|getString
argument_list|()
operator|.
name|concat
argument_list|(
literal|"\n"
argument_list|)
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|SVNProperty
operator|.
name|EXTERNALS
operator|.
name|equals
argument_list|(
name|name
argument_list|)
condition|)
block|{
name|SVNExternal
operator|.
name|parseExternals
argument_list|(
name|path
argument_list|,
name|value
operator|.
name|getString
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
if|else if
condition|(
name|SVNProperty
operator|.
name|KEYWORDS
operator|.
name|equals
argument_list|(
name|name
argument_list|)
condition|)
block|{
name|value
operator|=
name|SVNPropertyValue
operator|.
name|create
argument_list|(
name|value
operator|.
name|getString
argument_list|()
operator|.
name|trim
argument_list|()
argument_list|)
expr_stmt|;
block|}
if|else         if
condition|(
name|SVNProperty
operator|.
name|EXECUTABLE
operator|.
name|equals
argument_list|(
name|name
argument_list|)
operator|||
name|SVNProperty
operator|.
name|SPECIAL
operator|.
name|equals
argument_list|(
name|name
argument_list|)
operator|||
name|SVNProperty
operator|.
name|NEEDS_LOCK
operator|.
name|equals
argument_list|(
name|name
argument_list|)
condition|)
block|{
name|value
operator|=
name|SVNPropertyValue
operator|.
name|create
argument_list|(
literal|"*"
argument_list|)
expr_stmt|;
block|}
if|else if
condition|(
name|SVNProperty
operator|.
name|MERGE_INFO
operator|.
name|equals
argument_list|(
name|name
argument_list|)
condition|)
block|{
name|SVNMergeInfoUtil
operator|.
name|parseMergeInfo
argument_list|(
operator|new
name|StringBuffer
argument_list|(
name|value
operator|.
name|getString
argument_list|()
argument_list|)
argument_list|,
literal|null
argument_list|)
expr_stmt|;
block|}
return|return
name|value
return|;
block|}
specifier|private
specifier|static
name|boolean
name|hasSVNProperties
parameter_list|(
name|SVNProperties
name|props
parameter_list|)
block|{
if|if
condition|(
name|props
operator|==
literal|null
condition|)
block|{
return|return
literal|false
return|;
block|}
for|for
control|(
name|Iterator
name|names
init|=
name|props
operator|.
name|nameSet
argument_list|()
operator|.
name|iterator
argument_list|()
init|;
name|names
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|String
name|propName
init|=
operator|(
name|String
operator|)
name|names
operator|.
name|next
argument_list|()
decl_stmt|;
if|if
condition|(
name|SVNProperty
operator|.
name|isSVNProperty
argument_list|(
name|propName
argument_list|)
condition|)
block|{
return|return
literal|true
return|;
block|}
block|}
return|return
literal|false
return|;
block|}
specifier|private
specifier|static
name|void
name|validatePropertyName
parameter_list|(
name|String
name|path
parameter_list|,
name|String
name|name
parameter_list|,
name|SVNNodeKind
name|kind
parameter_list|)
throws|throws
name|SVNException
block|{
name|SVNErrorMessage
name|err
init|=
literal|null
decl_stmt|;
if|if
condition|(
name|kind
operator|==
name|SVNNodeKind
operator|.
name|DIR
condition|)
block|{
if|if
condition|(
name|NOT_ALLOWED_FOR_DIR
operator|.
name|contains
argument_list|(
name|name
argument_list|)
condition|)
block|{
name|err
operator|=
name|SVNErrorMessage
operator|.
name|create
argument_list|(
name|SVNErrorCode
operator|.
name|ILLEGAL_TARGET
argument_list|,
literal|"Cannot set ''{0}'' on a directory (''{1}'')"
argument_list|,
operator|new
name|Object
index|[]
block|{
name|name
block|,
name|path
block|}
argument_list|)
expr_stmt|;
block|}
block|}
if|else if
condition|(
name|kind
operator|==
name|SVNNodeKind
operator|.
name|FILE
condition|)
block|{
if|if
condition|(
name|NOT_ALLOWED_FOR_FILE
operator|.
name|contains
argument_list|(
name|name
argument_list|)
condition|)
block|{
name|err
operator|=
name|SVNErrorMessage
operator|.
name|create
argument_list|(
name|SVNErrorCode
operator|.
name|ILLEGAL_TARGET
argument_list|,
literal|"Cannot set ''{0}'' on a file (''{1}'')"
argument_list|,
operator|new
name|Object
index|[]
block|{
name|name
block|,
name|path
block|}
argument_list|)
expr_stmt|;
block|}
block|}
else|else
block|{
name|err
operator|=
name|SVNErrorMessage
operator|.
name|create
argument_list|(
name|SVNErrorCode
operator|.
name|NODE_UNEXPECTED_KIND
argument_list|,
literal|"''{0}'' is not a file or directory"
argument_list|,
name|path
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|err
operator|!=
literal|null
condition|)
block|{
name|SVNErrorManager
operator|.
name|error
argument_list|(
name|err
argument_list|,
name|SVNLogType
operator|.
name|DEFAULT
argument_list|)
expr_stmt|;
block|}
block|}
specifier|public
specifier|static
name|void
name|validateMimeType
parameter_list|(
name|String
name|value
parameter_list|)
throws|throws
name|SVNException
block|{
name|String
name|type
init|=
name|value
operator|.
name|indexOf
argument_list|(
literal|';'
argument_list|)
operator|>=
literal|0
condition|?
name|value
operator|.
name|substring
argument_list|(
literal|0
argument_list|,
name|value
operator|.
name|indexOf
argument_list|(
literal|';'
argument_list|)
argument_list|)
else|:
name|value
decl_stmt|;
name|SVNErrorMessage
name|err
init|=
literal|null
decl_stmt|;
if|if
condition|(
name|type
operator|.
name|length
argument_list|()
operator|==
literal|0
condition|)
block|{
name|err
operator|=
name|SVNErrorMessage
operator|.
name|create
argument_list|(
name|SVNErrorCode
operator|.
name|BAD_MIME_TYPE
argument_list|,
literal|"MIME type ''{0}'' has empty media type"
argument_list|,
name|value
argument_list|)
expr_stmt|;
block|}
if|else if
condition|(
name|type
operator|.
name|indexOf
argument_list|(
literal|'/'
argument_list|)
operator|<
literal|0
condition|)
block|{
name|err
operator|=
name|SVNErrorMessage
operator|.
name|create
argument_list|(
name|SVNErrorCode
operator|.
name|BAD_MIME_TYPE
argument_list|,
literal|"MIME type ''{0}'' does not contain ''/''"
argument_list|,
name|value
argument_list|)
expr_stmt|;
block|}
if|else if
condition|(
operator|!
name|Character
operator|.
name|isLetterOrDigit
argument_list|(
name|type
operator|.
name|charAt
argument_list|(
name|type
operator|.
name|length
argument_list|()
operator|-
literal|1
argument_list|)
argument_list|)
condition|)
block|{
name|err
operator|=
name|SVNErrorMessage
operator|.
name|create
argument_list|(
name|SVNErrorCode
operator|.
name|BAD_MIME_TYPE
argument_list|,
literal|"MIME type ''{0}'' ends with non-alphanumeric character"
argument_list|,
name|value
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|err
operator|!=
literal|null
condition|)
block|{
name|SVNErrorManager
operator|.
name|error
argument_list|(
name|err
argument_list|,
name|SVNLogType
operator|.
name|DEFAULT
argument_list|)
expr_stmt|;
block|}
block|}
specifier|public
specifier|static
name|void
name|validateEOLProperty
parameter_list|(
name|String
name|path
parameter_list|,
name|ISVNFileContentFetcher
name|fetcher
parameter_list|)
throws|throws
name|SVNException
block|{
name|SVNTranslatorOutputStream
name|out
init|=
operator|new
name|SVNTranslatorOutputStream
argument_list|(
name|SVNFileUtil
operator|.
name|DUMMY_OUT
argument_list|,
operator|new
name|byte
index|[
literal|0
index|]
argument_list|,
literal|false
argument_list|,
literal|null
argument_list|,
literal|false
argument_list|)
decl_stmt|;
try|try
block|{
name|fetcher
operator|.
name|fetchFileContent
argument_list|(
name|out
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|SVNException
name|e
parameter_list|)
block|{
name|handleInconsistentEOL
argument_list|(
name|e
argument_list|,
name|path
argument_list|)
expr_stmt|;
throw|throw
name|e
throw|;
block|}
finally|finally
block|{
try|try
block|{
name|out
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOExceptionWrapper
name|wrapper
parameter_list|)
block|{
name|handleInconsistentEOL
argument_list|(
name|wrapper
operator|.
name|getOriginalException
argument_list|()
argument_list|,
name|path
argument_list|)
expr_stmt|;
throw|throw
name|wrapper
operator|.
name|getOriginalException
argument_list|()
throw|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
name|SVNErrorManager
operator|.
name|error
argument_list|(
name|SVNErrorMessage
operator|.
name|create
argument_list|(
name|SVNErrorCode
operator|.
name|IO_ERROR
argument_list|,
name|e
argument_list|)
argument_list|,
name|SVNLogType
operator|.
name|DEFAULT
argument_list|)
expr_stmt|;
block|}
block|}
if|if
condition|(
name|fetcher
operator|.
name|fileIsBinary
argument_list|()
condition|)
block|{
name|SVNErrorMessage
name|error
init|=
name|SVNErrorMessage
operator|.
name|create
argument_list|(
name|SVNErrorCode
operator|.
name|ILLEGAL_TARGET
argument_list|,
literal|"File ''{0}'' has binary mime type property"
argument_list|,
name|path
argument_list|)
decl_stmt|;
name|SVNErrorManager
operator|.
name|error
argument_list|(
name|error
argument_list|,
name|SVNLogType
operator|.
name|WC
argument_list|)
expr_stmt|;
block|}
block|}
specifier|private
specifier|static
name|void
name|handleInconsistentEOL
parameter_list|(
name|SVNException
name|svne
parameter_list|,
name|String
name|path
parameter_list|)
throws|throws
name|SVNException
block|{
name|SVNErrorMessage
name|errorMessage
init|=
name|svne
operator|.
name|getErrorMessage
argument_list|()
decl_stmt|;
while|while
condition|(
name|errorMessage
operator|!=
literal|null
operator|&&
name|errorMessage
operator|.
name|getErrorCode
argument_list|()
operator|!=
name|SVNErrorCode
operator|.
name|IO_INCONSISTENT_EOL
condition|)
block|{
name|errorMessage
operator|=
name|errorMessage
operator|.
name|getChildErrorMessage
argument_list|()
expr_stmt|;
block|}
if|if
condition|(
name|errorMessage
operator|!=
literal|null
operator|&&
name|errorMessage
operator|.
name|getErrorCode
argument_list|()
operator|==
name|SVNErrorCode
operator|.
name|IO_INCONSISTENT_EOL
condition|)
block|{
name|SVNErrorMessage
name|error
init|=
name|SVNErrorMessage
operator|.
name|create
argument_list|(
name|SVNErrorCode
operator|.
name|ILLEGAL_TARGET
argument_list|,
literal|"File ''{0}'' has inconsistent newlines"
argument_list|,
name|path
argument_list|)
decl_stmt|;
name|SVNErrorManager
operator|.
name|error
argument_list|(
name|error
argument_list|,
name|SVNLogType
operator|.
name|DEFAULT
argument_list|)
expr_stmt|;
block|}
name|Throwable
name|cause
init|=
name|svne
operator|.
name|getCause
argument_list|()
decl_stmt|;
if|if
condition|(
name|cause
operator|==
literal|null
condition|)
block|{
return|return;
block|}
if|if
condition|(
name|cause
operator|instanceof
name|SVNException
condition|)
block|{
name|handleInconsistentEOL
argument_list|(
operator|(
name|SVNException
operator|)
name|cause
argument_list|,
name|path
argument_list|)
expr_stmt|;
block|}
if|else if
condition|(
name|cause
operator|instanceof
name|IOExceptionWrapper
condition|)
block|{
name|IOExceptionWrapper
name|wrapper
init|=
operator|(
name|IOExceptionWrapper
operator|)
name|cause
decl_stmt|;
name|handleInconsistentEOL
argument_list|(
name|wrapper
operator|.
name|getOriginalException
argument_list|()
argument_list|,
name|path
argument_list|)
expr_stmt|;
block|}
block|}
block|}
end_class

end_unit

