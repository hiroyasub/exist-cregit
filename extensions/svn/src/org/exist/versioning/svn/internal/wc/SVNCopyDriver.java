begin_unit|revision:1.0.0;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * ====================================================================  * Copyright (c) 2004-2010 TMate Software Ltd.  All rights reserved.  *  * This software is licensed as described in the file COPYING, which  * you should have received as part of this distribution.  The terms  * are also available at http://svnkit.com/license.html  * If newer versions of this license are posted there, you may use a  * newer version instead, at your option.  * ====================================================================  */
end_comment

begin_package
package|package
name|org
operator|.
name|exist
operator|.
name|versioning
operator|.
name|svn
operator|.
name|internal
operator|.
name|wc
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|File
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|OutputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collection
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collections
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Iterator
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|LinkedList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|TreeMap
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|util
operator|.
name|io
operator|.
name|Resource
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|versioning
operator|.
name|svn
operator|.
name|internal
operator|.
name|wc
operator|.
name|admin
operator|.
name|SVNAdminArea
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|versioning
operator|.
name|svn
operator|.
name|internal
operator|.
name|wc
operator|.
name|admin
operator|.
name|SVNEntry
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|versioning
operator|.
name|svn
operator|.
name|internal
operator|.
name|wc
operator|.
name|admin
operator|.
name|SVNVersionedProperties
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|versioning
operator|.
name|svn
operator|.
name|internal
operator|.
name|wc
operator|.
name|admin
operator|.
name|SVNWCAccess
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|versioning
operator|.
name|svn
operator|.
name|wc
operator|.
name|ISVNCommitHandler
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|versioning
operator|.
name|svn
operator|.
name|wc
operator|.
name|ISVNEventHandler
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|versioning
operator|.
name|svn
operator|.
name|wc
operator|.
name|ISVNOptions
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|versioning
operator|.
name|svn
operator|.
name|wc
operator|.
name|SVNBasicClient
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|versioning
operator|.
name|svn
operator|.
name|wc
operator|.
name|SVNCommitItem
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|versioning
operator|.
name|svn
operator|.
name|wc
operator|.
name|SVNCopySource
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|versioning
operator|.
name|svn
operator|.
name|wc
operator|.
name|SVNEvent
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|versioning
operator|.
name|svn
operator|.
name|wc
operator|.
name|SVNEventAction
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|versioning
operator|.
name|svn
operator|.
name|wc
operator|.
name|SVNUpdateClient
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|versioning
operator|.
name|svn
operator|.
name|wc
operator|.
name|SVNWCClient
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|versioning
operator|.
name|svn
operator|.
name|wc
operator|.
name|SVNWCUtil
import|;
end_import

begin_import
import|import
name|org
operator|.
name|tmatesoft
operator|.
name|svn
operator|.
name|core
operator|.
name|SVNCancelException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|tmatesoft
operator|.
name|svn
operator|.
name|core
operator|.
name|SVNCommitInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|tmatesoft
operator|.
name|svn
operator|.
name|core
operator|.
name|SVNDepth
import|;
end_import

begin_import
import|import
name|org
operator|.
name|tmatesoft
operator|.
name|svn
operator|.
name|core
operator|.
name|SVNDirEntry
import|;
end_import

begin_import
import|import
name|org
operator|.
name|tmatesoft
operator|.
name|svn
operator|.
name|core
operator|.
name|SVNErrorCode
import|;
end_import

begin_import
import|import
name|org
operator|.
name|tmatesoft
operator|.
name|svn
operator|.
name|core
operator|.
name|SVNErrorMessage
import|;
end_import

begin_import
import|import
name|org
operator|.
name|tmatesoft
operator|.
name|svn
operator|.
name|core
operator|.
name|SVNException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|tmatesoft
operator|.
name|svn
operator|.
name|core
operator|.
name|SVNMergeInfoInheritance
import|;
end_import

begin_import
import|import
name|org
operator|.
name|tmatesoft
operator|.
name|svn
operator|.
name|core
operator|.
name|SVNNodeKind
import|;
end_import

begin_import
import|import
name|org
operator|.
name|tmatesoft
operator|.
name|svn
operator|.
name|core
operator|.
name|SVNProperties
import|;
end_import

begin_import
import|import
name|org
operator|.
name|tmatesoft
operator|.
name|svn
operator|.
name|core
operator|.
name|SVNProperty
import|;
end_import

begin_import
import|import
name|org
operator|.
name|tmatesoft
operator|.
name|svn
operator|.
name|core
operator|.
name|SVNPropertyValue
import|;
end_import

begin_import
import|import
name|org
operator|.
name|tmatesoft
operator|.
name|svn
operator|.
name|core
operator|.
name|SVNURL
import|;
end_import

begin_import
import|import
name|org
operator|.
name|tmatesoft
operator|.
name|svn
operator|.
name|core
operator|.
name|auth
operator|.
name|ISVNAuthenticationManager
import|;
end_import

begin_import
import|import
name|org
operator|.
name|tmatesoft
operator|.
name|svn
operator|.
name|core
operator|.
name|internal
operator|.
name|util
operator|.
name|SVNEncodingUtil
import|;
end_import

begin_import
import|import
name|org
operator|.
name|tmatesoft
operator|.
name|svn
operator|.
name|core
operator|.
name|internal
operator|.
name|util
operator|.
name|SVNHashMap
import|;
end_import

begin_import
import|import
name|org
operator|.
name|tmatesoft
operator|.
name|svn
operator|.
name|core
operator|.
name|internal
operator|.
name|util
operator|.
name|SVNMergeInfoUtil
import|;
end_import

begin_import
import|import
name|org
operator|.
name|tmatesoft
operator|.
name|svn
operator|.
name|core
operator|.
name|internal
operator|.
name|util
operator|.
name|SVNPathUtil
import|;
end_import

begin_import
import|import
name|org
operator|.
name|tmatesoft
operator|.
name|svn
operator|.
name|core
operator|.
name|internal
operator|.
name|util
operator|.
name|SVNURLUtil
import|;
end_import

begin_import
import|import
name|org
operator|.
name|tmatesoft
operator|.
name|svn
operator|.
name|core
operator|.
name|internal
operator|.
name|wc
operator|.
name|ISVNCommitPathHandler
import|;
end_import

begin_import
import|import
name|org
operator|.
name|tmatesoft
operator|.
name|svn
operator|.
name|core
operator|.
name|io
operator|.
name|ISVNEditor
import|;
end_import

begin_import
import|import
name|org
operator|.
name|tmatesoft
operator|.
name|svn
operator|.
name|core
operator|.
name|io
operator|.
name|SVNLocationEntry
import|;
end_import

begin_import
import|import
name|org
operator|.
name|tmatesoft
operator|.
name|svn
operator|.
name|core
operator|.
name|io
operator|.
name|SVNRepository
import|;
end_import

begin_import
import|import
name|org
operator|.
name|tmatesoft
operator|.
name|svn
operator|.
name|core
operator|.
name|wc
operator|.
name|ISVNCommitParameters
import|;
end_import

begin_import
import|import
name|org
operator|.
name|tmatesoft
operator|.
name|svn
operator|.
name|core
operator|.
name|wc
operator|.
name|ISVNExternalsHandler
import|;
end_import

begin_import
import|import
name|org
operator|.
name|tmatesoft
operator|.
name|svn
operator|.
name|core
operator|.
name|wc
operator|.
name|ISVNRepositoryPool
import|;
end_import

begin_import
import|import
name|org
operator|.
name|tmatesoft
operator|.
name|svn
operator|.
name|core
operator|.
name|wc
operator|.
name|SVNRevision
import|;
end_import

begin_import
import|import
name|org
operator|.
name|tmatesoft
operator|.
name|svn
operator|.
name|util
operator|.
name|SVNDebugLog
import|;
end_import

begin_import
import|import
name|org
operator|.
name|tmatesoft
operator|.
name|svn
operator|.
name|util
operator|.
name|SVNLogType
import|;
end_import

begin_class
specifier|public
class|class
name|SVNCopyDriver
extends|extends
name|SVNBasicClient
block|{
specifier|private
name|SVNWCAccess
name|myWCAccess
decl_stmt|;
specifier|private
name|boolean
name|myIsDisableLocalModificationsCopying
decl_stmt|;
specifier|public
name|void
name|setDisableLocalModificationCopying
parameter_list|(
name|boolean
name|disable
parameter_list|)
block|{
name|myIsDisableLocalModificationsCopying
operator|=
name|disable
expr_stmt|;
block|}
specifier|protected
name|SVNCopyDriver
parameter_list|(
name|ISVNAuthenticationManager
name|authManager
parameter_list|,
name|ISVNOptions
name|options
parameter_list|)
block|{
name|super
argument_list|(
name|authManager
argument_list|,
name|options
argument_list|)
expr_stmt|;
block|}
specifier|protected
name|SVNCopyDriver
parameter_list|(
name|ISVNRepositoryPool
name|repositoryPool
parameter_list|,
name|ISVNOptions
name|options
parameter_list|)
block|{
name|super
argument_list|(
name|repositoryPool
argument_list|,
name|options
argument_list|)
expr_stmt|;
block|}
specifier|protected
name|void
name|setWCAccess
parameter_list|(
name|SVNWCAccess
name|access
parameter_list|)
block|{
name|myWCAccess
operator|=
name|access
expr_stmt|;
block|}
specifier|private
name|SVNWCAccess
name|getWCAccess
parameter_list|()
block|{
if|if
condition|(
name|myWCAccess
operator|==
literal|null
condition|)
block|{
return|return
name|createWCAccess
argument_list|()
return|;
block|}
return|return
name|myWCAccess
return|;
block|}
specifier|private
name|SVNAdminArea
name|probeOpen
parameter_list|(
name|SVNWCAccess
name|access
parameter_list|,
name|File
name|path
parameter_list|,
name|boolean
name|writeLock
parameter_list|,
name|int
name|depth
parameter_list|)
throws|throws
name|SVNException
block|{
if|if
condition|(
name|access
operator|!=
name|myWCAccess
condition|)
block|{
return|return
name|access
operator|.
name|probeOpen
argument_list|(
name|path
argument_list|,
name|writeLock
argument_list|,
name|depth
argument_list|)
return|;
block|}
return|return
name|myWCAccess
operator|.
name|probeRetrieve
argument_list|(
name|path
argument_list|)
return|;
block|}
specifier|private
name|SVNAdminArea
name|open
parameter_list|(
name|SVNWCAccess
name|access
parameter_list|,
name|File
name|path
parameter_list|,
name|boolean
name|writeLock
parameter_list|,
name|boolean
name|stealLock
parameter_list|,
name|int
name|depth
parameter_list|)
throws|throws
name|SVNException
block|{
if|if
condition|(
name|access
operator|!=
name|myWCAccess
condition|)
block|{
return|return
name|access
operator|.
name|open
argument_list|(
name|path
argument_list|,
name|writeLock
argument_list|,
name|stealLock
argument_list|,
name|depth
argument_list|)
return|;
block|}
return|return
name|myWCAccess
operator|.
name|retrieve
argument_list|(
name|path
argument_list|)
return|;
block|}
specifier|private
name|void
name|close
parameter_list|(
name|SVNWCAccess
name|access
parameter_list|)
throws|throws
name|SVNException
block|{
if|if
condition|(
name|access
operator|!=
name|myWCAccess
condition|)
block|{
name|access
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
block|}
specifier|protected
name|SVNCopySource
index|[]
name|expandCopySources
parameter_list|(
name|SVNCopySource
index|[]
name|sources
parameter_list|)
throws|throws
name|SVNException
block|{
name|Collection
name|expanded
init|=
operator|new
name|ArrayList
argument_list|(
name|sources
operator|.
name|length
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|sources
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
name|SVNCopySource
name|source
init|=
name|sources
index|[
name|i
index|]
decl_stmt|;
if|if
condition|(
name|source
operator|.
name|isCopyContents
argument_list|()
operator|&&
name|source
operator|.
name|isURL
argument_list|()
condition|)
block|{
comment|// get children at revision.
name|SVNRevision
name|pegRevision
init|=
name|source
operator|.
name|getPegRevision
argument_list|()
decl_stmt|;
if|if
condition|(
operator|!
name|pegRevision
operator|.
name|isValid
argument_list|()
condition|)
block|{
name|pegRevision
operator|=
name|SVNRevision
operator|.
name|HEAD
expr_stmt|;
block|}
name|SVNRevision
name|startRevision
init|=
name|source
operator|.
name|getRevision
argument_list|()
decl_stmt|;
if|if
condition|(
operator|!
name|startRevision
operator|.
name|isValid
argument_list|()
condition|)
block|{
name|startRevision
operator|=
name|pegRevision
expr_stmt|;
block|}
name|SVNRepositoryLocation
index|[]
name|locations
init|=
name|getLocations
argument_list|(
name|source
operator|.
name|getURL
argument_list|()
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|,
name|pegRevision
argument_list|,
name|startRevision
argument_list|,
name|SVNRevision
operator|.
name|UNDEFINED
argument_list|)
decl_stmt|;
name|SVNRepository
name|repository
init|=
name|createRepository
argument_list|(
name|locations
index|[
literal|0
index|]
operator|.
name|getURL
argument_list|()
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|,
literal|true
argument_list|)
decl_stmt|;
name|long
name|revision
init|=
name|locations
index|[
literal|0
index|]
operator|.
name|getRevisionNumber
argument_list|()
decl_stmt|;
name|Collection
name|entries
init|=
operator|new
name|ArrayList
argument_list|()
decl_stmt|;
name|repository
operator|.
name|getDir
argument_list|(
literal|""
argument_list|,
name|revision
argument_list|,
literal|null
argument_list|,
literal|0
argument_list|,
name|entries
argument_list|)
expr_stmt|;
for|for
control|(
name|Iterator
name|ents
init|=
name|entries
operator|.
name|iterator
argument_list|()
init|;
name|ents
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|SVNDirEntry
name|entry
init|=
operator|(
name|SVNDirEntry
operator|)
name|ents
operator|.
name|next
argument_list|()
decl_stmt|;
comment|// add new copy source.
name|expanded
operator|.
name|add
argument_list|(
operator|new
name|SVNCopySource
argument_list|(
name|SVNRevision
operator|.
name|UNDEFINED
argument_list|,
name|source
operator|.
name|getRevision
argument_list|()
argument_list|,
name|entry
operator|.
name|getURL
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
else|else
block|{
name|expanded
operator|.
name|add
argument_list|(
name|source
argument_list|)
expr_stmt|;
block|}
block|}
return|return
operator|(
name|SVNCopySource
index|[]
operator|)
name|expanded
operator|.
name|toArray
argument_list|(
operator|new
name|SVNCopySource
index|[
name|expanded
operator|.
name|size
argument_list|()
index|]
argument_list|)
return|;
block|}
specifier|private
name|SVNCommitInfo
name|copyReposToRepos
parameter_list|(
name|List
name|copyPairs
parameter_list|,
name|boolean
name|makeParents
parameter_list|,
name|boolean
name|isMove
parameter_list|,
name|String
name|message
parameter_list|,
name|SVNProperties
name|revprops
parameter_list|,
name|ISVNCommitHandler
name|commitHandler
parameter_list|)
throws|throws
name|SVNException
block|{
name|List
name|pathInfos
init|=
operator|new
name|ArrayList
argument_list|()
decl_stmt|;
name|Map
name|pathsMap
init|=
operator|new
name|SVNHashMap
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|copyPairs
operator|.
name|size
argument_list|()
condition|;
name|i
operator|++
control|)
block|{
name|CopyPathInfo
name|info
init|=
operator|new
name|CopyPathInfo
argument_list|()
decl_stmt|;
name|pathInfos
operator|.
name|add
argument_list|(
name|info
argument_list|)
expr_stmt|;
block|}
name|String
name|commonURL
init|=
operator|(
operator|(
name|CopyPair
operator|)
name|copyPairs
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|)
operator|.
name|mySource
decl_stmt|;
name|String
name|topDstURL
init|=
operator|(
operator|(
name|CopyPair
operator|)
name|copyPairs
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|)
operator|.
name|myDst
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|1
init|;
name|i
operator|<
name|copyPairs
operator|.
name|size
argument_list|()
condition|;
name|i
operator|++
control|)
block|{
name|CopyPair
name|pair
init|=
operator|(
name|CopyPair
operator|)
name|copyPairs
operator|.
name|get
argument_list|(
name|i
argument_list|)
decl_stmt|;
name|commonURL
operator|=
name|SVNPathUtil
operator|.
name|getCommonPathAncestor
argument_list|(
name|commonURL
argument_list|,
name|pair
operator|.
name|mySource
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|copyPairs
operator|.
name|size
argument_list|()
operator|==
literal|1
condition|)
block|{
name|commonURL
operator|=
name|SVNPathUtil
operator|.
name|getCommonPathAncestor
argument_list|(
name|commonURL
argument_list|,
name|topDstURL
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|commonURL
operator|=
name|SVNPathUtil
operator|.
name|getCommonPathAncestor
argument_list|(
name|commonURL
argument_list|,
name|SVNPathUtil
operator|.
name|removeTail
argument_list|(
name|topDstURL
argument_list|)
argument_list|)
expr_stmt|;
block|}
try|try
block|{
name|SVNURL
operator|.
name|parseURIEncoded
argument_list|(
name|commonURL
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|SVNException
name|e
parameter_list|)
block|{
name|commonURL
operator|=
literal|null
expr_stmt|;
block|}
if|if
condition|(
name|commonURL
operator|==
literal|null
condition|)
block|{
name|SVNURL
name|url1
init|=
name|SVNURL
operator|.
name|parseURIEncoded
argument_list|(
operator|(
operator|(
name|CopyPair
operator|)
name|copyPairs
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|)
operator|.
name|mySource
argument_list|)
decl_stmt|;
name|SVNURL
name|url2
init|=
name|SVNURL
operator|.
name|parseURIEncoded
argument_list|(
operator|(
operator|(
name|CopyPair
operator|)
name|copyPairs
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|)
operator|.
name|myDst
argument_list|)
decl_stmt|;
name|SVNErrorMessage
name|err
init|=
name|SVNErrorMessage
operator|.
name|create
argument_list|(
name|SVNErrorCode
operator|.
name|UNSUPPORTED_FEATURE
argument_list|,
literal|"Source and dest appear not to be in the same repository (src: ''{0}''; dst: ''{1}'')"
argument_list|,
operator|new
name|Object
index|[]
block|{
name|url1
block|,
name|url2
block|}
argument_list|)
decl_stmt|;
name|SVNErrorManager
operator|.
name|error
argument_list|(
name|err
argument_list|,
name|SVNLogType
operator|.
name|WC
argument_list|)
expr_stmt|;
block|}
name|SVNRepository
name|nonTopRepos
init|=
literal|null
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|copyPairs
operator|.
name|size
argument_list|()
condition|;
name|i
operator|++
control|)
block|{
name|CopyPair
name|pair
init|=
operator|(
name|CopyPair
operator|)
name|copyPairs
operator|.
name|get
argument_list|(
name|i
argument_list|)
decl_stmt|;
name|CopyPathInfo
name|info
init|=
operator|(
name|CopyPathInfo
operator|)
name|pathInfos
operator|.
name|get
argument_list|(
name|i
argument_list|)
decl_stmt|;
if|if
condition|(
name|nonTopRepos
operator|==
literal|null
condition|)
block|{
name|nonTopRepos
operator|=
name|createRepository
argument_list|(
name|SVNURL
operator|.
name|parseURIEncoded
argument_list|(
name|pair
operator|.
name|mySource
argument_list|)
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|,
literal|true
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|pair
operator|.
name|mySource
operator|.
name|equals
argument_list|(
name|pair
operator|.
name|myDst
argument_list|)
condition|)
block|{
name|info
operator|.
name|isResurrection
operator|=
literal|true
expr_stmt|;
block|}
block|}
comment|/*          * Get list of parents that have to be created. start with first 'dst' parent.          * This is a list of urls.          */
name|String
name|rootURL
init|=
name|nonTopRepos
operator|.
name|getRepositoryRoot
argument_list|(
literal|true
argument_list|)
operator|.
name|toString
argument_list|()
decl_stmt|;
name|List
name|newDirs
init|=
operator|new
name|ArrayList
argument_list|()
decl_stmt|;
name|SVNURL
name|oldLocation
init|=
literal|null
decl_stmt|;
if|if
condition|(
name|makeParents
condition|)
block|{
name|CopyPair
name|pair
init|=
operator|(
name|CopyPair
operator|)
name|copyPairs
operator|.
name|get
argument_list|(
literal|0
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|pair
operator|.
name|myDst
operator|.
name|equals
argument_list|(
name|rootURL
argument_list|)
condition|)
block|{
name|oldLocation
operator|=
name|nonTopRepos
operator|.
name|getLocation
argument_list|()
expr_stmt|;
name|nonTopRepos
operator|.
name|setLocation
argument_list|(
name|SVNURL
operator|.
name|parseURIEncoded
argument_list|(
name|pair
operator|.
name|myDst
argument_list|)
operator|.
name|removePathTail
argument_list|()
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|SVNNodeKind
name|kind
init|=
name|nonTopRepos
operator|.
name|checkPath
argument_list|(
literal|""
argument_list|,
operator|-
literal|1
argument_list|)
decl_stmt|;
while|while
condition|(
name|kind
operator|==
name|SVNNodeKind
operator|.
name|NONE
condition|)
block|{
name|newDirs
operator|.
name|add
argument_list|(
name|nonTopRepos
operator|.
name|getLocation
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|nonTopRepos
operator|.
name|setLocation
argument_list|(
name|nonTopRepos
operator|.
name|getLocation
argument_list|()
operator|.
name|removePathTail
argument_list|()
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|kind
operator|=
name|nonTopRepos
operator|.
name|checkPath
argument_list|(
literal|""
argument_list|,
operator|-
literal|1
argument_list|)
expr_stmt|;
block|}
block|}
block|}
if|else if
condition|(
name|Boolean
operator|.
name|getBoolean
argument_list|(
literal|"svnkit.compatibleHash"
argument_list|)
condition|)
block|{
comment|// XXX: hack for tests to generate error message tests will like.
comment|// do not check paths above repository root.
name|CopyPair
name|pair
init|=
operator|(
name|CopyPair
operator|)
name|copyPairs
operator|.
name|get
argument_list|(
literal|0
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|pair
operator|.
name|myDst
operator|.
name|equals
argument_list|(
name|rootURL
argument_list|)
condition|)
block|{
name|oldLocation
operator|=
name|nonTopRepos
operator|.
name|getLocation
argument_list|()
expr_stmt|;
name|nonTopRepos
operator|.
name|setLocation
argument_list|(
name|SVNURL
operator|.
name|parseURIEncoded
argument_list|(
name|pair
operator|.
name|myDst
argument_list|)
operator|.
name|removePathTail
argument_list|()
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|SVNNodeKind
name|kind
init|=
name|nonTopRepos
operator|.
name|checkPath
argument_list|(
literal|""
argument_list|,
operator|-
literal|1
argument_list|)
decl_stmt|;
if|if
condition|(
name|kind
operator|==
name|SVNNodeKind
operator|.
name|NONE
condition|)
block|{
name|SVNErrorMessage
name|err
init|=
name|SVNErrorMessage
operator|.
name|create
argument_list|(
name|SVNErrorCode
operator|.
name|FS_NOT_FOUND
argument_list|,
literal|"''{0}'' path not found"
argument_list|,
name|nonTopRepos
operator|.
name|getLocation
argument_list|()
argument_list|)
decl_stmt|;
name|SVNErrorManager
operator|.
name|error
argument_list|(
name|err
argument_list|,
name|SVNLogType
operator|.
name|WC
argument_list|)
expr_stmt|;
block|}
block|}
block|}
if|if
condition|(
name|oldLocation
operator|!=
literal|null
condition|)
block|{
name|nonTopRepos
operator|.
name|setLocation
argument_list|(
name|oldLocation
argument_list|,
literal|false
argument_list|)
expr_stmt|;
block|}
comment|/*          * Check if source is dst child (while dst is not root).          */
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|copyPairs
operator|.
name|size
argument_list|()
condition|;
name|i
operator|++
control|)
block|{
name|CopyPair
name|pair
init|=
operator|(
name|CopyPair
operator|)
name|copyPairs
operator|.
name|get
argument_list|(
name|i
argument_list|)
decl_stmt|;
name|CopyPathInfo
name|info
init|=
operator|(
name|CopyPathInfo
operator|)
name|pathInfos
operator|.
name|get
argument_list|(
name|i
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|pair
operator|.
name|myDst
operator|.
name|equals
argument_list|(
name|rootURL
argument_list|)
operator|&&
name|SVNPathUtil
operator|.
name|getPathAsChild
argument_list|(
name|pair
operator|.
name|myDst
argument_list|,
name|pair
operator|.
name|mySource
argument_list|)
operator|!=
literal|null
condition|)
block|{
name|info
operator|.
name|isResurrection
operator|=
literal|true
expr_stmt|;
block|}
block|}
name|long
name|latestRevision
init|=
name|nonTopRepos
operator|.
name|getLatestRevision
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|copyPairs
operator|.
name|size
argument_list|()
condition|;
name|i
operator|++
control|)
block|{
name|CopyPair
name|pair
init|=
operator|(
name|CopyPair
operator|)
name|copyPairs
operator|.
name|get
argument_list|(
name|i
argument_list|)
decl_stmt|;
name|CopyPathInfo
name|info
init|=
operator|(
name|CopyPathInfo
operator|)
name|pathInfos
operator|.
name|get
argument_list|(
name|i
argument_list|)
decl_stmt|;
name|pair
operator|.
name|mySourceRevisionNumber
operator|=
name|getRevisionNumber
argument_list|(
name|pair
operator|.
name|mySourceRevision
argument_list|,
name|nonTopRepos
argument_list|,
literal|null
argument_list|)
expr_stmt|;
name|info
operator|.
name|mySourceRevisionNumber
operator|=
name|pair
operator|.
name|mySourceRevisionNumber
expr_stmt|;
name|SVNRepositoryLocation
index|[]
name|locations
init|=
name|getLocations
argument_list|(
name|SVNURL
operator|.
name|parseURIEncoded
argument_list|(
name|pair
operator|.
name|mySource
argument_list|)
argument_list|,
literal|null
argument_list|,
literal|null
comment|/*optimize topRepos*/
argument_list|,
name|pair
operator|.
name|mySourcePegRevision
argument_list|,
name|pair
operator|.
name|mySourceRevision
argument_list|,
name|SVNRevision
operator|.
name|UNDEFINED
argument_list|)
decl_stmt|;
name|pair
operator|.
name|mySource
operator|=
name|locations
index|[
literal|0
index|]
operator|.
name|getURL
argument_list|()
operator|.
name|toString
argument_list|()
expr_stmt|;
comment|// tests:
comment|// src is equal to dst
if|if
condition|(
name|isMove
operator|&&
name|pair
operator|.
name|mySource
operator|.
name|equals
argument_list|(
name|pair
operator|.
name|myDst
argument_list|)
condition|)
block|{
comment|//if ("".equals(srcRelative)&& isMove) {
name|SVNErrorMessage
name|err
init|=
name|SVNErrorMessage
operator|.
name|create
argument_list|(
name|SVNErrorCode
operator|.
name|UNSUPPORTED_FEATURE
argument_list|,
literal|"Cannot move URL ''{0}'' into itself"
argument_list|,
name|SVNURL
operator|.
name|parseURIEncoded
argument_list|(
name|pair
operator|.
name|mySource
argument_list|)
argument_list|)
decl_stmt|;
name|SVNErrorManager
operator|.
name|error
argument_list|(
name|err
argument_list|,
name|SVNLogType
operator|.
name|WC
argument_list|)
expr_stmt|;
block|}
comment|// src doesn't exist at source revision.
name|nonTopRepos
operator|.
name|setLocation
argument_list|(
name|SVNURL
operator|.
name|parseURIEncoded
argument_list|(
name|pair
operator|.
name|mySource
argument_list|)
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|info
operator|.
name|mySourceKind
operator|=
name|nonTopRepos
operator|.
name|checkPath
argument_list|(
literal|""
argument_list|,
name|pair
operator|.
name|mySourceRevisionNumber
argument_list|)
expr_stmt|;
if|if
condition|(
name|info
operator|.
name|mySourceKind
operator|==
name|SVNNodeKind
operator|.
name|NONE
condition|)
block|{
name|SVNErrorMessage
name|err
init|=
name|SVNErrorMessage
operator|.
name|create
argument_list|(
name|SVNErrorCode
operator|.
name|FS_NOT_FOUND
argument_list|,
literal|"Path ''{0}'' does not exist in revision {1}"
argument_list|,
operator|new
name|Object
index|[]
block|{
name|SVNURL
operator|.
name|parseURIEncoded
argument_list|(
name|pair
operator|.
name|mySource
argument_list|)
block|,
operator|new
name|Long
argument_list|(
name|pair
operator|.
name|mySourceRevisionNumber
argument_list|)
block|}
argument_list|)
decl_stmt|;
name|SVNErrorManager
operator|.
name|error
argument_list|(
name|err
argument_list|,
name|SVNLogType
operator|.
name|WC
argument_list|)
expr_stmt|;
block|}
comment|// dst already exists at HEAD.
name|nonTopRepos
operator|.
name|setLocation
argument_list|(
name|SVNURL
operator|.
name|parseURIEncoded
argument_list|(
name|pair
operator|.
name|myDst
argument_list|)
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|SVNNodeKind
name|dstKind
init|=
name|nonTopRepos
operator|.
name|checkPath
argument_list|(
literal|""
argument_list|,
name|latestRevision
argument_list|)
decl_stmt|;
if|if
condition|(
name|dstKind
operator|!=
name|SVNNodeKind
operator|.
name|NONE
condition|)
block|{
name|SVNErrorMessage
name|err
init|=
name|SVNErrorMessage
operator|.
name|create
argument_list|(
name|SVNErrorCode
operator|.
name|FS_ALREADY_EXISTS
argument_list|,
literal|"Path ''{0}'' already exists"
argument_list|,
name|pair
operator|.
name|myDst
argument_list|)
decl_stmt|;
name|SVNErrorManager
operator|.
name|error
argument_list|(
name|err
argument_list|,
name|SVNLogType
operator|.
name|WC
argument_list|)
expr_stmt|;
block|}
name|info
operator|.
name|mySource
operator|=
name|pair
operator|.
name|mySource
expr_stmt|;
name|info
operator|.
name|myDstPath
operator|=
name|pair
operator|.
name|myDst
expr_stmt|;
block|}
name|List
name|paths
init|=
operator|new
name|ArrayList
argument_list|(
name|copyPairs
operator|.
name|size
argument_list|()
operator|*
literal|2
argument_list|)
decl_stmt|;
name|List
name|commitItems
init|=
operator|new
name|ArrayList
argument_list|(
name|copyPairs
operator|.
name|size
argument_list|()
operator|*
literal|2
argument_list|)
decl_stmt|;
if|if
condition|(
name|makeParents
condition|)
block|{
for|for
control|(
name|Iterator
name|newDirsIter
init|=
name|newDirs
operator|.
name|iterator
argument_list|()
init|;
name|newDirsIter
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|String
name|itemURL
init|=
operator|(
name|String
operator|)
name|newDirsIter
operator|.
name|next
argument_list|()
decl_stmt|;
name|SVNCommitItem
name|item
init|=
operator|new
name|SVNCommitItem
argument_list|(
literal|null
argument_list|,
name|SVNURL
operator|.
name|parseURIEncoded
argument_list|(
name|itemURL
argument_list|)
argument_list|,
literal|null
argument_list|,
name|SVNNodeKind
operator|.
name|NONE
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|,
literal|true
argument_list|,
literal|false
argument_list|,
literal|false
argument_list|,
literal|false
argument_list|,
literal|false
argument_list|,
literal|false
argument_list|)
decl_stmt|;
name|commitItems
operator|.
name|add
argument_list|(
name|item
argument_list|)
expr_stmt|;
block|}
block|}
for|for
control|(
name|Iterator
name|infos
init|=
name|pathInfos
operator|.
name|iterator
argument_list|()
init|;
name|infos
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|CopyPathInfo
name|info
init|=
operator|(
name|CopyPathInfo
operator|)
name|infos
operator|.
name|next
argument_list|()
decl_stmt|;
name|SVNURL
name|itemURL
init|=
name|SVNURL
operator|.
name|parseURIEncoded
argument_list|(
name|info
operator|.
name|myDstPath
argument_list|)
decl_stmt|;
name|SVNCommitItem
name|item
init|=
operator|new
name|SVNCommitItem
argument_list|(
literal|null
argument_list|,
name|itemURL
argument_list|,
literal|null
argument_list|,
name|SVNNodeKind
operator|.
name|NONE
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|,
literal|true
argument_list|,
literal|false
argument_list|,
literal|false
argument_list|,
literal|false
argument_list|,
literal|false
argument_list|,
literal|false
argument_list|)
decl_stmt|;
name|commitItems
operator|.
name|add
argument_list|(
name|item
argument_list|)
expr_stmt|;
name|pathsMap
operator|.
name|put
argument_list|(
name|info
operator|.
name|myDstPath
argument_list|,
name|info
argument_list|)
expr_stmt|;
if|if
condition|(
name|isMove
operator|&&
operator|!
name|info
operator|.
name|isResurrection
condition|)
block|{
name|itemURL
operator|=
name|SVNURL
operator|.
name|parseURIEncoded
argument_list|(
name|info
operator|.
name|mySource
argument_list|)
expr_stmt|;
name|item
operator|=
operator|new
name|SVNCommitItem
argument_list|(
literal|null
argument_list|,
name|itemURL
argument_list|,
literal|null
argument_list|,
name|SVNNodeKind
operator|.
name|NONE
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|,
literal|false
argument_list|,
literal|true
argument_list|,
literal|false
argument_list|,
literal|false
argument_list|,
literal|false
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|commitItems
operator|.
name|add
argument_list|(
name|item
argument_list|)
expr_stmt|;
name|pathsMap
operator|.
name|put
argument_list|(
name|info
operator|.
name|mySource
argument_list|,
name|info
argument_list|)
expr_stmt|;
block|}
block|}
if|if
condition|(
name|makeParents
condition|)
block|{
for|for
control|(
name|Iterator
name|newDirsIter
init|=
name|newDirs
operator|.
name|iterator
argument_list|()
init|;
name|newDirsIter
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|String
name|dirPath
init|=
operator|(
name|String
operator|)
name|newDirsIter
operator|.
name|next
argument_list|()
decl_stmt|;
name|CopyPathInfo
name|info
init|=
operator|new
name|CopyPathInfo
argument_list|()
decl_stmt|;
name|info
operator|.
name|myDstPath
operator|=
name|dirPath
expr_stmt|;
name|info
operator|.
name|isDirAdded
operator|=
literal|true
expr_stmt|;
name|paths
operator|.
name|add
argument_list|(
name|info
operator|.
name|myDstPath
argument_list|)
expr_stmt|;
name|pathsMap
operator|.
name|put
argument_list|(
name|dirPath
argument_list|,
name|info
argument_list|)
expr_stmt|;
block|}
block|}
for|for
control|(
name|Iterator
name|infos
init|=
name|pathInfos
operator|.
name|iterator
argument_list|()
init|;
name|infos
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|CopyPathInfo
name|info
init|=
operator|(
name|CopyPathInfo
operator|)
name|infos
operator|.
name|next
argument_list|()
decl_stmt|;
name|nonTopRepos
operator|.
name|setLocation
argument_list|(
name|SVNURL
operator|.
name|parseURIEncoded
argument_list|(
name|info
operator|.
name|mySource
argument_list|)
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|Map
name|mergeInfo
init|=
name|calculateTargetMergeInfo
argument_list|(
literal|null
argument_list|,
literal|null
argument_list|,
name|SVNURL
operator|.
name|parseURIEncoded
argument_list|(
name|info
operator|.
name|mySource
argument_list|)
argument_list|,
name|info
operator|.
name|mySourceRevisionNumber
argument_list|,
name|nonTopRepos
argument_list|,
literal|false
argument_list|)
decl_stmt|;
if|if
condition|(
name|mergeInfo
operator|!=
literal|null
condition|)
block|{
name|info
operator|.
name|myMergeInfoProp
operator|=
name|SVNMergeInfoUtil
operator|.
name|formatMergeInfoToString
argument_list|(
name|mergeInfo
argument_list|,
literal|null
argument_list|)
expr_stmt|;
block|}
name|paths
operator|.
name|add
argument_list|(
name|info
operator|.
name|myDstPath
argument_list|)
expr_stmt|;
if|if
condition|(
name|isMove
operator|&&
operator|!
name|info
operator|.
name|isResurrection
condition|)
block|{
comment|// this is too.
name|paths
operator|.
name|add
argument_list|(
name|info
operator|.
name|mySource
argument_list|)
expr_stmt|;
block|}
block|}
name|SVNCommitItem
index|[]
name|commitables
init|=
operator|(
name|SVNCommitItem
index|[]
operator|)
name|commitItems
operator|.
name|toArray
argument_list|(
operator|new
name|SVNCommitItem
index|[
name|commitItems
operator|.
name|size
argument_list|()
index|]
argument_list|)
decl_stmt|;
name|message
operator|=
name|commitHandler
operator|.
name|getCommitMessage
argument_list|(
name|message
argument_list|,
name|commitables
argument_list|)
expr_stmt|;
if|if
condition|(
name|message
operator|==
literal|null
condition|)
block|{
return|return
name|SVNCommitInfo
operator|.
name|NULL
return|;
block|}
name|message
operator|=
name|SVNCommitUtil
operator|.
name|validateCommitMessage
argument_list|(
name|message
argument_list|)
expr_stmt|;
name|revprops
operator|=
name|commitHandler
operator|.
name|getRevisionProperties
argument_list|(
name|message
argument_list|,
name|commitables
argument_list|,
name|revprops
operator|==
literal|null
condition|?
operator|new
name|SVNProperties
argument_list|()
else|:
name|revprops
argument_list|)
expr_stmt|;
if|if
condition|(
name|revprops
operator|==
literal|null
condition|)
block|{
return|return
name|SVNCommitInfo
operator|.
name|NULL
return|;
block|}
name|SVNPropertiesManager
operator|.
name|validateRevisionProperties
argument_list|(
name|revprops
argument_list|)
expr_stmt|;
name|SVNURL
name|topURL
init|=
name|SVNURL
operator|.
name|parseURIEncoded
argument_list|(
operator|(
name|String
operator|)
name|paths
operator|.
name|get
argument_list|(
literal|0
argument_list|)
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|1
init|;
name|i
operator|<
name|paths
operator|.
name|size
argument_list|()
condition|;
name|i
operator|++
control|)
block|{
name|String
name|url
init|=
operator|(
name|String
operator|)
name|paths
operator|.
name|get
argument_list|(
name|i
argument_list|)
decl_stmt|;
name|topURL
operator|=
name|SVNURLUtil
operator|.
name|getCommonURLAncestor
argument_list|(
name|topURL
argument_list|,
name|SVNURL
operator|.
name|parseURIEncoded
argument_list|(
name|url
argument_list|)
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|paths
operator|.
name|contains
argument_list|(
name|topURL
operator|.
name|toString
argument_list|()
argument_list|)
condition|)
block|{
name|topURL
operator|=
name|topURL
operator|.
name|removePathTail
argument_list|()
expr_stmt|;
block|}
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|paths
operator|.
name|size
argument_list|()
condition|;
name|i
operator|++
control|)
block|{
name|String
name|url
init|=
operator|(
name|String
operator|)
name|paths
operator|.
name|get
argument_list|(
name|i
argument_list|)
decl_stmt|;
name|SVNURL
name|svnURL
init|=
name|SVNURL
operator|.
name|parseURIEncoded
argument_list|(
name|url
argument_list|)
decl_stmt|;
name|url
operator|=
name|SVNPathUtil
operator|.
name|getPathAsChild
argument_list|(
name|topURL
operator|.
name|getPath
argument_list|()
argument_list|,
name|svnURL
operator|.
name|getPath
argument_list|()
argument_list|)
expr_stmt|;
name|paths
operator|.
name|set
argument_list|(
name|i
argument_list|,
name|url
argument_list|)
expr_stmt|;
name|CopyPathInfo
name|info
init|=
operator|(
name|CopyPathInfo
operator|)
name|pathsMap
operator|.
name|remove
argument_list|(
name|svnURL
operator|.
name|toString
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|info
operator|!=
literal|null
condition|)
block|{
if|if
condition|(
name|info
operator|.
name|mySource
operator|!=
literal|null
condition|)
block|{
name|info
operator|.
name|mySourcePath
operator|=
name|getPathRelativeToRoot
argument_list|(
literal|null
argument_list|,
name|SVNURL
operator|.
name|parseURIEncoded
argument_list|(
name|info
operator|.
name|mySource
argument_list|)
argument_list|,
name|SVNURL
operator|.
name|parseURIEncoded
argument_list|(
name|rootURL
argument_list|)
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|)
expr_stmt|;
name|info
operator|.
name|mySourceRelativePath
operator|=
name|getPathRelativeToSession
argument_list|(
name|SVNURL
operator|.
name|parseURIEncoded
argument_list|(
name|info
operator|.
name|mySource
argument_list|)
argument_list|,
name|topURL
argument_list|,
literal|null
argument_list|)
expr_stmt|;
block|}
name|pathsMap
operator|.
name|put
argument_list|(
name|url
argument_list|,
name|info
argument_list|)
expr_stmt|;
block|}
block|}
name|nonTopRepos
operator|.
name|setLocation
argument_list|(
name|topURL
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|ISVNEditor
name|commitEditor
init|=
name|nonTopRepos
operator|.
name|getCommitEditor
argument_list|(
name|message
argument_list|,
literal|null
argument_list|,
literal|true
argument_list|,
name|revprops
argument_list|,
literal|null
argument_list|)
decl_stmt|;
name|ISVNCommitPathHandler
name|committer
init|=
operator|new
name|CopyCommitPathHandler
argument_list|(
name|pathsMap
argument_list|,
name|isMove
argument_list|)
decl_stmt|;
name|SVNCommitInfo
name|result
init|=
literal|null
decl_stmt|;
try|try
block|{
name|SVNCommitUtil
operator|.
name|driveCommitEditor
argument_list|(
name|committer
argument_list|,
name|paths
argument_list|,
name|commitEditor
argument_list|,
name|latestRevision
argument_list|)
expr_stmt|;
name|result
operator|=
name|commitEditor
operator|.
name|closeEdit
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|SVNCancelException
name|cancel
parameter_list|)
block|{
throw|throw
name|cancel
throw|;
block|}
catch|catch
parameter_list|(
name|SVNException
name|e
parameter_list|)
block|{
name|SVNErrorMessage
name|err
init|=
name|e
operator|.
name|getErrorMessage
argument_list|()
operator|.
name|wrap
argument_list|(
literal|"Commit failed (details follow):"
argument_list|)
decl_stmt|;
name|SVNErrorManager
operator|.
name|error
argument_list|(
name|err
argument_list|,
name|SVNLogType
operator|.
name|DEFAULT
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
if|if
condition|(
name|commitEditor
operator|!=
literal|null
operator|&&
name|result
operator|==
literal|null
condition|)
block|{
try|try
block|{
name|commitEditor
operator|.
name|abortEdit
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|SVNException
name|e
parameter_list|)
block|{
name|SVNDebugLog
operator|.
name|getDefaultLog
argument_list|()
operator|.
name|logFine
argument_list|(
name|SVNLogType
operator|.
name|WC
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
block|}
block|}
if|if
condition|(
name|result
operator|!=
literal|null
operator|&&
name|result
operator|.
name|getNewRevision
argument_list|()
operator|>=
literal|0
condition|)
block|{
name|dispatchEvent
argument_list|(
name|SVNEventFactory
operator|.
name|createSVNEvent
argument_list|(
literal|null
argument_list|,
name|SVNNodeKind
operator|.
name|NONE
argument_list|,
literal|null
argument_list|,
name|result
operator|.
name|getNewRevision
argument_list|()
argument_list|,
name|SVNEventAction
operator|.
name|COMMIT_COMPLETED
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|)
argument_list|,
name|ISVNEventHandler
operator|.
name|UNKNOWN
argument_list|)
expr_stmt|;
block|}
return|return
name|result
operator|!=
literal|null
condition|?
name|result
else|:
name|SVNCommitInfo
operator|.
name|NULL
return|;
block|}
specifier|private
name|String
name|getUUIDFromPath
parameter_list|(
name|SVNWCAccess
name|wcAccess
parameter_list|,
name|File
name|path
parameter_list|)
throws|throws
name|SVNException
block|{
name|SVNEntry
name|entry
init|=
name|wcAccess
operator|.
name|getVersionedEntry
argument_list|(
name|path
argument_list|,
literal|true
argument_list|)
decl_stmt|;
name|String
name|uuid
init|=
literal|null
decl_stmt|;
if|if
condition|(
name|entry
operator|.
name|getUUID
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|uuid
operator|=
name|entry
operator|.
name|getUUID
argument_list|()
expr_stmt|;
block|}
if|else if
condition|(
name|entry
operator|.
name|getURL
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|SVNRepository
name|repos
init|=
name|createRepository
argument_list|(
name|entry
operator|.
name|getSVNURL
argument_list|()
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|,
literal|false
argument_list|)
decl_stmt|;
try|try
block|{
name|uuid
operator|=
name|repos
operator|.
name|getRepositoryUUID
argument_list|(
literal|true
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
name|repos
operator|.
name|closeSession
argument_list|()
expr_stmt|;
block|}
block|}
else|else
block|{
if|if
condition|(
name|wcAccess
operator|.
name|isWCRoot
argument_list|(
name|path
argument_list|)
condition|)
block|{
name|SVNErrorMessage
name|err
init|=
name|SVNErrorMessage
operator|.
name|create
argument_list|(
name|SVNErrorCode
operator|.
name|ENTRY_MISSING_URL
argument_list|,
literal|"''{0}'' has no URL"
argument_list|,
name|path
argument_list|)
decl_stmt|;
name|SVNErrorManager
operator|.
name|error
argument_list|(
name|err
argument_list|,
name|SVNLogType
operator|.
name|WC
argument_list|)
expr_stmt|;
block|}
name|uuid
operator|=
name|getUUIDFromPath
argument_list|(
name|wcAccess
argument_list|,
name|path
operator|.
name|getParentFile
argument_list|()
argument_list|)
expr_stmt|;
block|}
return|return
name|uuid
return|;
block|}
specifier|private
specifier|static
name|void
name|postCopyCleanup
parameter_list|(
name|SVNAdminArea
name|dir
parameter_list|)
throws|throws
name|SVNException
block|{
name|SVNPropertiesManager
operator|.
name|deleteWCProperties
argument_list|(
name|dir
argument_list|,
literal|null
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|SVNFileUtil
operator|.
name|setHidden
argument_list|(
name|dir
operator|.
name|getAdminDirectory
argument_list|()
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|Map
name|attributes
init|=
operator|new
name|SVNHashMap
argument_list|()
decl_stmt|;
name|boolean
name|save
init|=
literal|false
decl_stmt|;
for|for
control|(
name|Iterator
name|entries
init|=
name|dir
operator|.
name|entries
argument_list|(
literal|true
argument_list|)
init|;
name|entries
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|SVNEntry
name|entry
init|=
operator|(
name|SVNEntry
operator|)
name|entries
operator|.
name|next
argument_list|()
decl_stmt|;
name|boolean
name|deleted
init|=
name|entry
operator|.
name|isDeleted
argument_list|()
decl_stmt|;
name|SVNNodeKind
name|kind
init|=
name|entry
operator|.
name|getKind
argument_list|()
decl_stmt|;
name|boolean
name|force
init|=
literal|false
decl_stmt|;
if|if
condition|(
name|entry
operator|.
name|getDepth
argument_list|()
operator|==
name|SVNDepth
operator|.
name|EXCLUDE
condition|)
block|{
continue|continue;
block|}
if|if
condition|(
name|entry
operator|.
name|isDeleted
argument_list|()
condition|)
block|{
name|force
operator|=
literal|true
expr_stmt|;
name|attributes
operator|.
name|put
argument_list|(
name|SVNProperty
operator|.
name|SCHEDULE
argument_list|,
name|SVNProperty
operator|.
name|SCHEDULE_DELETE
argument_list|)
expr_stmt|;
name|attributes
operator|.
name|put
argument_list|(
name|SVNProperty
operator|.
name|DELETED
argument_list|,
literal|null
argument_list|)
expr_stmt|;
if|if
condition|(
name|entry
operator|.
name|isDirectory
argument_list|()
condition|)
block|{
name|attributes
operator|.
name|put
argument_list|(
name|SVNProperty
operator|.
name|KIND
argument_list|,
name|SVNProperty
operator|.
name|KIND_FILE
argument_list|)
expr_stmt|;
block|}
block|}
if|if
condition|(
name|entry
operator|.
name|getLockToken
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|force
operator|=
literal|true
expr_stmt|;
name|attributes
operator|.
name|put
argument_list|(
name|SVNProperty
operator|.
name|LOCK_TOKEN
argument_list|,
literal|null
argument_list|)
expr_stmt|;
name|attributes
operator|.
name|put
argument_list|(
name|SVNProperty
operator|.
name|LOCK_OWNER
argument_list|,
literal|null
argument_list|)
expr_stmt|;
name|attributes
operator|.
name|put
argument_list|(
name|SVNProperty
operator|.
name|LOCK_CREATION_DATE
argument_list|,
literal|null
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|force
condition|)
block|{
name|dir
operator|.
name|modifyEntry
argument_list|(
name|entry
operator|.
name|getName
argument_list|()
argument_list|,
name|attributes
argument_list|,
literal|false
argument_list|,
name|force
argument_list|)
expr_stmt|;
name|save
operator|=
literal|true
expr_stmt|;
block|}
if|if
condition|(
operator|!
name|deleted
operator|&&
name|kind
operator|==
name|SVNNodeKind
operator|.
name|DIR
operator|&&
operator|!
name|dir
operator|.
name|getThisDirName
argument_list|()
operator|.
name|equals
argument_list|(
name|entry
operator|.
name|getName
argument_list|()
argument_list|)
condition|)
block|{
name|SVNAdminArea
name|childDir
init|=
name|dir
operator|.
name|getWCAccess
argument_list|()
operator|.
name|retrieve
argument_list|(
name|dir
operator|.
name|getFile
argument_list|(
name|entry
operator|.
name|getName
argument_list|()
argument_list|)
argument_list|)
decl_stmt|;
name|postCopyCleanup
argument_list|(
name|childDir
argument_list|)
expr_stmt|;
block|}
name|attributes
operator|.
name|clear
argument_list|()
expr_stmt|;
block|}
if|if
condition|(
name|save
condition|)
block|{
name|dir
operator|.
name|saveEntries
argument_list|(
literal|false
argument_list|)
expr_stmt|;
block|}
block|}
specifier|protected
name|SVNCommitInfo
name|setupCopy
parameter_list|(
name|SVNCopySource
index|[]
name|sources
parameter_list|,
name|SVNPath
name|dst
parameter_list|,
name|boolean
name|isMove
parameter_list|,
name|boolean
name|makeParents
parameter_list|,
name|String
name|message
parameter_list|,
name|SVNProperties
name|revprops
parameter_list|,
name|ISVNCommitHandler
name|commitHandler
parameter_list|,
name|ISVNCommitParameters
name|commitParameters
parameter_list|,
name|ISVNExternalsHandler
name|externalsHandler
parameter_list|)
throws|throws
name|SVNException
block|{
name|List
name|pairs
init|=
operator|new
name|ArrayList
argument_list|(
name|sources
operator|.
name|length
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|sources
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
name|SVNCopySource
name|source
init|=
name|sources
index|[
name|i
index|]
decl_stmt|;
if|if
condition|(
name|source
operator|.
name|isURL
argument_list|()
operator|&&
operator|(
name|source
operator|.
name|getPegRevision
argument_list|()
operator|==
name|SVNRevision
operator|.
name|BASE
operator|||
name|source
operator|.
name|getPegRevision
argument_list|()
operator|==
name|SVNRevision
operator|.
name|COMMITTED
operator|||
name|source
operator|.
name|getPegRevision
argument_list|()
operator|==
name|SVNRevision
operator|.
name|PREVIOUS
operator|)
condition|)
block|{
name|SVNErrorMessage
name|err
init|=
name|SVNErrorMessage
operator|.
name|create
argument_list|(
name|SVNErrorCode
operator|.
name|CLIENT_BAD_REVISION
argument_list|,
literal|"Revision type requires a working copy path, not URL"
argument_list|)
decl_stmt|;
name|SVNErrorManager
operator|.
name|error
argument_list|(
name|err
argument_list|,
name|SVNLogType
operator|.
name|WC
argument_list|)
expr_stmt|;
block|}
block|}
name|boolean
name|srcIsURL
init|=
name|sources
index|[
literal|0
index|]
operator|.
name|isURL
argument_list|()
decl_stmt|;
name|boolean
name|dstIsURL
init|=
name|dst
operator|.
name|isURL
argument_list|()
decl_stmt|;
if|if
condition|(
name|sources
operator|.
name|length
operator|>
literal|1
condition|)
block|{
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|sources
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
name|SVNCopySource
name|source
init|=
name|sources
index|[
name|i
index|]
decl_stmt|;
name|CopyPair
name|pair
init|=
operator|new
name|CopyPair
argument_list|()
decl_stmt|;
name|pair
operator|.
name|mySource
operator|=
name|source
operator|.
name|isURL
argument_list|()
condition|?
name|source
operator|.
name|getURL
argument_list|()
operator|.
name|toString
argument_list|()
else|:
name|source
operator|.
name|getFile
argument_list|()
operator|.
name|getAbsolutePath
argument_list|()
operator|.
name|replace
argument_list|(
name|File
operator|.
name|separatorChar
argument_list|,
literal|'/'
argument_list|)
expr_stmt|;
name|pair
operator|.
name|setSourceRevisions
argument_list|(
name|source
operator|.
name|getPegRevision
argument_list|()
argument_list|,
name|source
operator|.
name|getRevision
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|SVNPathUtil
operator|.
name|isURL
argument_list|(
name|pair
operator|.
name|mySource
argument_list|)
operator|!=
name|srcIsURL
condition|)
block|{
name|SVNErrorMessage
name|err
init|=
name|SVNErrorMessage
operator|.
name|create
argument_list|(
name|SVNErrorCode
operator|.
name|UNSUPPORTED_FEATURE
argument_list|,
literal|"Cannot mix repository and working copy sources"
argument_list|)
decl_stmt|;
name|SVNErrorManager
operator|.
name|error
argument_list|(
name|err
argument_list|,
name|SVNLogType
operator|.
name|WC
argument_list|)
expr_stmt|;
block|}
name|String
name|baseName
init|=
name|source
operator|.
name|getName
argument_list|()
decl_stmt|;
if|if
condition|(
name|srcIsURL
operator|&&
operator|!
name|dstIsURL
condition|)
block|{
name|baseName
operator|=
name|SVNEncodingUtil
operator|.
name|uriDecode
argument_list|(
name|baseName
argument_list|)
expr_stmt|;
block|}
name|pair
operator|.
name|myDst
operator|=
name|dstIsURL
condition|?
name|dst
operator|.
name|getURL
argument_list|()
operator|.
name|appendPath
argument_list|(
name|baseName
argument_list|,
literal|true
argument_list|)
operator|.
name|toString
argument_list|()
else|:
operator|new
name|Resource
argument_list|(
name|dst
operator|.
name|getFile
argument_list|()
argument_list|,
name|baseName
argument_list|)
operator|.
name|getAbsolutePath
argument_list|()
operator|.
name|replace
argument_list|(
name|File
operator|.
name|separatorChar
argument_list|,
literal|'/'
argument_list|)
expr_stmt|;
name|pairs
operator|.
name|add
argument_list|(
name|pair
argument_list|)
expr_stmt|;
block|}
block|}
else|else
block|{
name|SVNCopySource
name|source
init|=
name|sources
index|[
literal|0
index|]
decl_stmt|;
name|CopyPair
name|pair
init|=
operator|new
name|CopyPair
argument_list|()
decl_stmt|;
name|pair
operator|.
name|mySource
operator|=
name|source
operator|.
name|isURL
argument_list|()
condition|?
name|source
operator|.
name|getURL
argument_list|()
operator|.
name|toString
argument_list|()
else|:
name|source
operator|.
name|getFile
argument_list|()
operator|.
name|getAbsolutePath
argument_list|()
operator|.
name|replace
argument_list|(
name|File
operator|.
name|separatorChar
argument_list|,
literal|'/'
argument_list|)
expr_stmt|;
name|pair
operator|.
name|setSourceRevisions
argument_list|(
name|source
operator|.
name|getPegRevision
argument_list|()
argument_list|,
name|source
operator|.
name|getRevision
argument_list|()
argument_list|)
expr_stmt|;
name|pair
operator|.
name|myDst
operator|=
name|dstIsURL
condition|?
name|dst
operator|.
name|getURL
argument_list|()
operator|.
name|toString
argument_list|()
else|:
name|dst
operator|.
name|getFile
argument_list|()
operator|.
name|getAbsolutePath
argument_list|()
operator|.
name|replace
argument_list|(
name|File
operator|.
name|separatorChar
argument_list|,
literal|'/'
argument_list|)
expr_stmt|;
name|pairs
operator|.
name|add
argument_list|(
name|pair
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
operator|!
name|srcIsURL
operator|&&
operator|!
name|dstIsURL
condition|)
block|{
for|for
control|(
name|Iterator
name|ps
init|=
name|pairs
operator|.
name|iterator
argument_list|()
init|;
name|ps
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|CopyPair
name|pair
init|=
operator|(
name|CopyPair
operator|)
name|ps
operator|.
name|next
argument_list|()
decl_stmt|;
name|String
name|srcPath
init|=
name|pair
operator|.
name|mySource
decl_stmt|;
name|String
name|dstPath
init|=
name|pair
operator|.
name|myDst
decl_stmt|;
if|if
condition|(
name|SVNPathUtil
operator|.
name|isAncestor
argument_list|(
name|srcPath
argument_list|,
name|dstPath
argument_list|)
condition|)
block|{
name|SVNErrorMessage
name|err
init|=
name|SVNErrorMessage
operator|.
name|create
argument_list|(
name|SVNErrorCode
operator|.
name|UNSUPPORTED_FEATURE
argument_list|,
literal|"Cannot copy path ''{0}'' into its own child ''{1}"
argument_list|,
operator|new
name|Object
index|[]
block|{
name|srcPath
block|,
name|dstPath
block|}
argument_list|)
decl_stmt|;
name|SVNErrorManager
operator|.
name|error
argument_list|(
name|err
argument_list|,
name|SVNLogType
operator|.
name|WC
argument_list|)
expr_stmt|;
block|}
block|}
block|}
if|if
condition|(
name|isMove
operator|&&
operator|!
name|srcIsURL
condition|)
block|{
for|for
control|(
name|Iterator
name|ps
init|=
name|pairs
operator|.
name|iterator
argument_list|()
init|;
name|ps
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|CopyPair
name|pair
init|=
operator|(
name|CopyPair
operator|)
name|ps
operator|.
name|next
argument_list|()
decl_stmt|;
name|SVNWCAccess
name|wcAccess
init|=
name|getWCAccess
argument_list|()
decl_stmt|;
try|try
block|{
name|File
name|srcFile
init|=
operator|new
name|Resource
argument_list|(
name|pair
operator|.
name|mySource
argument_list|)
decl_stmt|;
name|probeOpen
argument_list|(
name|wcAccess
argument_list|,
name|srcFile
argument_list|,
literal|false
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|SVNEntry
name|entry
init|=
name|wcAccess
operator|.
name|getVersionedEntry
argument_list|(
operator|new
name|Resource
argument_list|(
name|pair
operator|.
name|mySource
argument_list|)
argument_list|,
literal|false
argument_list|)
decl_stmt|;
if|if
condition|(
name|entry
operator|.
name|getExternalFilePath
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|SVNErrorMessage
name|err
init|=
name|SVNErrorMessage
operator|.
name|create
argument_list|(
name|SVNErrorCode
operator|.
name|WC_CANNOT_MOVE_FILE_EXTERNAL
argument_list|,
literal|"Cannot move the file external at ''{0}''; please propedit the svn:externals description that created it"
argument_list|,
name|srcFile
argument_list|)
decl_stmt|;
name|SVNErrorManager
operator|.
name|error
argument_list|(
name|err
argument_list|,
name|SVNLogType
operator|.
name|WC
argument_list|)
expr_stmt|;
block|}
block|}
finally|finally
block|{
name|close
argument_list|(
name|wcAccess
argument_list|)
expr_stmt|;
block|}
block|}
block|}
if|if
condition|(
name|isMove
condition|)
block|{
if|if
condition|(
name|srcIsURL
operator|==
name|dstIsURL
condition|)
block|{
for|for
control|(
name|Iterator
name|ps
init|=
name|pairs
operator|.
name|iterator
argument_list|()
init|;
name|ps
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|CopyPair
name|pair
init|=
operator|(
name|CopyPair
operator|)
name|ps
operator|.
name|next
argument_list|()
decl_stmt|;
name|boolean
name|same
decl_stmt|;
name|Object
name|p
decl_stmt|;
if|if
condition|(
operator|!
name|srcIsURL
condition|)
block|{
name|File
name|srcPath
init|=
operator|new
name|Resource
argument_list|(
name|pair
operator|.
name|mySource
argument_list|)
decl_stmt|;
name|File
name|dstPath
init|=
operator|new
name|Resource
argument_list|(
name|pair
operator|.
name|myDst
argument_list|)
decl_stmt|;
name|same
operator|=
name|srcPath
operator|.
name|equals
argument_list|(
name|dstPath
argument_list|)
expr_stmt|;
name|p
operator|=
name|srcPath
expr_stmt|;
block|}
else|else
block|{
name|SVNURL
name|srcURL
init|=
name|SVNURL
operator|.
name|parseURIEncoded
argument_list|(
name|pair
operator|.
name|mySource
argument_list|)
decl_stmt|;
name|SVNURL
name|dstURL
init|=
name|SVNURL
operator|.
name|parseURIEncoded
argument_list|(
name|pair
operator|.
name|myDst
argument_list|)
decl_stmt|;
name|same
operator|=
name|srcURL
operator|.
name|getPath
argument_list|()
operator|.
name|equals
argument_list|(
name|dstURL
operator|.
name|getPath
argument_list|()
argument_list|)
expr_stmt|;
name|p
operator|=
name|srcURL
expr_stmt|;
block|}
if|if
condition|(
name|same
condition|)
block|{
name|SVNErrorMessage
name|err
init|=
name|SVNErrorMessage
operator|.
name|create
argument_list|(
name|SVNErrorCode
operator|.
name|UNSUPPORTED_FEATURE
argument_list|,
literal|"Cannot move path ''{0}'' into itself"
argument_list|,
name|p
argument_list|)
decl_stmt|;
name|SVNErrorManager
operator|.
name|error
argument_list|(
name|err
argument_list|,
name|SVNLogType
operator|.
name|WC
argument_list|)
expr_stmt|;
block|}
block|}
block|}
else|else
block|{
name|SVNErrorMessage
name|err
init|=
name|SVNErrorMessage
operator|.
name|create
argument_list|(
name|SVNErrorCode
operator|.
name|UNSUPPORTED_FEATURE
argument_list|,
literal|"Moves between the working copy and the repository are not supported"
argument_list|)
decl_stmt|;
name|SVNErrorManager
operator|.
name|error
argument_list|(
name|err
argument_list|,
name|SVNLogType
operator|.
name|WC
argument_list|)
expr_stmt|;
block|}
block|}
else|else
block|{
if|if
condition|(
operator|!
name|srcIsURL
condition|)
block|{
name|boolean
name|needReposRevision
init|=
literal|false
decl_stmt|;
name|boolean
name|needReposPegRevision
init|=
literal|false
decl_stmt|;
for|for
control|(
name|Iterator
name|ps
init|=
name|pairs
operator|.
name|iterator
argument_list|()
init|;
name|ps
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|CopyPair
name|pair
init|=
operator|(
name|CopyPair
operator|)
name|ps
operator|.
name|next
argument_list|()
decl_stmt|;
if|if
condition|(
name|pair
operator|.
name|mySourceRevision
operator|!=
name|SVNRevision
operator|.
name|UNDEFINED
operator|&&
name|pair
operator|.
name|mySourceRevision
operator|!=
name|SVNRevision
operator|.
name|WORKING
condition|)
block|{
name|needReposRevision
operator|=
literal|true
expr_stmt|;
block|}
if|if
condition|(
name|pair
operator|.
name|mySourcePegRevision
operator|!=
name|SVNRevision
operator|.
name|UNDEFINED
operator|&&
name|pair
operator|.
name|mySourcePegRevision
operator|!=
name|SVNRevision
operator|.
name|WORKING
condition|)
block|{
name|needReposPegRevision
operator|=
literal|true
expr_stmt|;
block|}
if|if
condition|(
name|needReposRevision
operator|||
name|needReposPegRevision
condition|)
block|{
break|break;
block|}
block|}
if|if
condition|(
name|needReposRevision
operator|||
name|needReposPegRevision
condition|)
block|{
for|for
control|(
name|Iterator
name|ps
init|=
name|pairs
operator|.
name|iterator
argument_list|()
init|;
name|ps
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|CopyPair
name|pair
init|=
operator|(
name|CopyPair
operator|)
name|ps
operator|.
name|next
argument_list|()
decl_stmt|;
name|SVNWCAccess
name|wcAccess
init|=
name|getWCAccess
argument_list|()
decl_stmt|;
try|try
block|{
name|probeOpen
argument_list|(
name|wcAccess
argument_list|,
operator|new
name|Resource
argument_list|(
name|pair
operator|.
name|mySource
argument_list|)
argument_list|,
literal|false
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|SVNEntry
name|entry
init|=
name|wcAccess
operator|.
name|getEntry
argument_list|(
operator|new
name|Resource
argument_list|(
name|pair
operator|.
name|mySource
argument_list|)
argument_list|,
literal|false
argument_list|)
decl_stmt|;
name|SVNURL
name|url
init|=
name|entry
operator|.
name|isCopied
argument_list|()
condition|?
name|entry
operator|.
name|getCopyFromSVNURL
argument_list|()
else|:
name|entry
operator|.
name|getSVNURL
argument_list|()
decl_stmt|;
if|if
condition|(
name|url
operator|==
literal|null
condition|)
block|{
name|SVNErrorMessage
name|err
init|=
name|SVNErrorMessage
operator|.
name|create
argument_list|(
name|SVNErrorCode
operator|.
name|ENTRY_MISSING_URL
argument_list|,
literal|"''{0}'' does not have a URL associated with it"
argument_list|,
operator|new
name|File
argument_list|(
name|pair
operator|.
name|mySource
argument_list|)
argument_list|)
decl_stmt|;
name|SVNErrorManager
operator|.
name|error
argument_list|(
name|err
argument_list|,
name|SVNLogType
operator|.
name|WC
argument_list|)
expr_stmt|;
block|}
name|pair
operator|.
name|mySource
operator|=
name|url
operator|.
name|toString
argument_list|()
expr_stmt|;
if|if
condition|(
operator|!
name|needReposPegRevision
operator|||
name|pair
operator|.
name|mySourcePegRevision
operator|==
name|SVNRevision
operator|.
name|BASE
condition|)
block|{
name|pair
operator|.
name|mySourcePegRevision
operator|=
name|entry
operator|.
name|isCopied
argument_list|()
condition|?
name|SVNRevision
operator|.
name|create
argument_list|(
name|entry
operator|.
name|getCopyFromRevision
argument_list|()
argument_list|)
else|:
name|SVNRevision
operator|.
name|create
argument_list|(
name|entry
operator|.
name|getRevision
argument_list|()
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|pair
operator|.
name|mySourceRevision
operator|==
name|SVNRevision
operator|.
name|BASE
condition|)
block|{
name|pair
operator|.
name|mySourceRevision
operator|=
name|entry
operator|.
name|isCopied
argument_list|()
condition|?
name|SVNRevision
operator|.
name|create
argument_list|(
name|entry
operator|.
name|getCopyFromRevision
argument_list|()
argument_list|)
else|:
name|SVNRevision
operator|.
name|create
argument_list|(
name|entry
operator|.
name|getRevision
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
finally|finally
block|{
name|close
argument_list|(
name|wcAccess
argument_list|)
expr_stmt|;
block|}
block|}
name|srcIsURL
operator|=
literal|true
expr_stmt|;
block|}
block|}
block|}
if|if
condition|(
operator|!
name|srcIsURL
operator|&&
operator|!
name|dstIsURL
condition|)
block|{
name|copyWCToWC
argument_list|(
name|pairs
argument_list|,
name|isMove
argument_list|,
name|makeParents
argument_list|)
expr_stmt|;
return|return
name|SVNCommitInfo
operator|.
name|NULL
return|;
block|}
if|else if
condition|(
operator|!
name|srcIsURL
operator|&&
name|dstIsURL
condition|)
block|{
comment|//wc2url.
return|return
name|copyWCToRepos
argument_list|(
name|pairs
argument_list|,
name|makeParents
argument_list|,
name|message
argument_list|,
name|revprops
argument_list|,
name|commitHandler
argument_list|,
name|commitParameters
argument_list|,
name|externalsHandler
argument_list|)
return|;
block|}
if|else if
condition|(
name|srcIsURL
operator|&&
operator|!
name|dstIsURL
condition|)
block|{
comment|// url2wc.
name|copyReposToWC
argument_list|(
name|pairs
argument_list|,
name|makeParents
argument_list|)
expr_stmt|;
return|return
name|SVNCommitInfo
operator|.
name|NULL
return|;
block|}
else|else
block|{
return|return
name|copyReposToRepos
argument_list|(
name|pairs
argument_list|,
name|makeParents
argument_list|,
name|isMove
argument_list|,
name|message
argument_list|,
name|revprops
argument_list|,
name|commitHandler
argument_list|)
return|;
block|}
block|}
specifier|private
name|SVNCommitInfo
name|copyWCToRepos
parameter_list|(
name|List
name|copyPairs
parameter_list|,
name|boolean
name|makeParents
parameter_list|,
name|String
name|message
parameter_list|,
name|SVNProperties
name|revprops
parameter_list|,
name|ISVNCommitHandler
name|commitHandler
parameter_list|,
name|ISVNCommitParameters
name|commitParameters
parameter_list|,
name|ISVNExternalsHandler
name|externalsHandler
parameter_list|)
throws|throws
name|SVNException
block|{
name|String
name|topSrc
init|=
operator|(
operator|(
name|CopyPair
operator|)
name|copyPairs
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|)
operator|.
name|mySource
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|1
init|;
name|i
operator|<
name|copyPairs
operator|.
name|size
argument_list|()
condition|;
name|i
operator|++
control|)
block|{
name|CopyPair
name|pair
init|=
operator|(
name|CopyPair
operator|)
name|copyPairs
operator|.
name|get
argument_list|(
name|i
argument_list|)
decl_stmt|;
name|topSrc
operator|=
name|SVNPathUtil
operator|.
name|getCommonPathAncestor
argument_list|(
name|topSrc
argument_list|,
name|pair
operator|.
name|mySource
argument_list|)
expr_stmt|;
block|}
name|SVNWCAccess
name|wcAccess
init|=
name|createWCAccess
argument_list|()
decl_stmt|;
name|SVNCommitInfo
name|info
init|=
literal|null
decl_stmt|;
name|ISVNEditor
name|commitEditor
init|=
literal|null
decl_stmt|;
name|Collection
name|tmpFiles
init|=
literal|null
decl_stmt|;
try|try
block|{
name|SVNAdminArea
name|adminArea
init|=
name|wcAccess
operator|.
name|probeOpen
argument_list|(
operator|new
name|Resource
argument_list|(
name|topSrc
argument_list|)
argument_list|,
literal|false
argument_list|,
name|SVNWCAccess
operator|.
name|INFINITE_DEPTH
argument_list|)
decl_stmt|;
name|wcAccess
operator|.
name|setAnchor
argument_list|(
name|adminArea
operator|.
name|getRoot
argument_list|()
argument_list|)
expr_stmt|;
name|String
name|topDstURL
init|=
operator|(
operator|(
name|CopyPair
operator|)
name|copyPairs
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|)
operator|.
name|myDst
decl_stmt|;
name|topDstURL
operator|=
name|SVNPathUtil
operator|.
name|removeTail
argument_list|(
name|topDstURL
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|1
init|;
name|i
operator|<
name|copyPairs
operator|.
name|size
argument_list|()
condition|;
name|i
operator|++
control|)
block|{
name|CopyPair
name|pair
init|=
operator|(
name|CopyPair
operator|)
name|copyPairs
operator|.
name|get
argument_list|(
name|i
argument_list|)
decl_stmt|;
name|topDstURL
operator|=
name|SVNPathUtil
operator|.
name|getCommonPathAncestor
argument_list|(
name|topDstURL
argument_list|,
name|pair
operator|.
name|myDst
argument_list|)
expr_stmt|;
block|}
comment|// should we use also wcAccess here? i do not think so.
name|SVNRepository
name|repos
init|=
name|createRepository
argument_list|(
name|SVNURL
operator|.
name|parseURIEncoded
argument_list|(
name|topDstURL
argument_list|)
argument_list|,
name|adminArea
operator|.
name|getRoot
argument_list|()
argument_list|,
name|wcAccess
argument_list|,
literal|true
argument_list|)
decl_stmt|;
name|List
name|newDirs
init|=
operator|new
name|ArrayList
argument_list|()
decl_stmt|;
if|if
condition|(
name|makeParents
condition|)
block|{
name|String
name|rootURL
init|=
name|topDstURL
decl_stmt|;
name|SVNNodeKind
name|kind
init|=
name|repos
operator|.
name|checkPath
argument_list|(
literal|""
argument_list|,
operator|-
literal|1
argument_list|)
decl_stmt|;
while|while
condition|(
name|kind
operator|==
name|SVNNodeKind
operator|.
name|NONE
condition|)
block|{
name|newDirs
operator|.
name|add
argument_list|(
name|rootURL
argument_list|)
expr_stmt|;
name|rootURL
operator|=
name|SVNPathUtil
operator|.
name|removeTail
argument_list|(
name|rootURL
argument_list|)
expr_stmt|;
name|repos
operator|.
name|setLocation
argument_list|(
name|SVNURL
operator|.
name|parseURIEncoded
argument_list|(
name|rootURL
argument_list|)
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|kind
operator|=
name|repos
operator|.
name|checkPath
argument_list|(
literal|""
argument_list|,
operator|-
literal|1
argument_list|)
expr_stmt|;
block|}
name|topDstURL
operator|=
name|rootURL
expr_stmt|;
block|}
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|copyPairs
operator|.
name|size
argument_list|()
condition|;
name|i
operator|++
control|)
block|{
name|CopyPair
name|pair
init|=
operator|(
name|CopyPair
operator|)
name|copyPairs
operator|.
name|get
argument_list|(
name|i
argument_list|)
decl_stmt|;
name|SVNEntry
name|entry
init|=
name|wcAccess
operator|.
name|getEntry
argument_list|(
operator|new
name|Resource
argument_list|(
name|pair
operator|.
name|mySource
argument_list|)
argument_list|,
literal|false
argument_list|)
decl_stmt|;
name|pair
operator|.
name|mySourceRevisionNumber
operator|=
name|entry
operator|.
name|getRevision
argument_list|()
expr_stmt|;
name|String
name|dstRelativePath
init|=
name|SVNPathUtil
operator|.
name|getPathAsChild
argument_list|(
name|topDstURL
argument_list|,
name|pair
operator|.
name|myDst
argument_list|)
decl_stmt|;
name|dstRelativePath
operator|=
name|SVNEncodingUtil
operator|.
name|uriDecode
argument_list|(
name|dstRelativePath
argument_list|)
expr_stmt|;
name|SVNNodeKind
name|kind
init|=
name|repos
operator|.
name|checkPath
argument_list|(
name|dstRelativePath
argument_list|,
operator|-
literal|1
argument_list|)
decl_stmt|;
if|if
condition|(
name|kind
operator|!=
name|SVNNodeKind
operator|.
name|NONE
condition|)
block|{
name|SVNErrorMessage
name|err
init|=
name|SVNErrorMessage
operator|.
name|create
argument_list|(
name|SVNErrorCode
operator|.
name|FS_ALREADY_EXISTS
argument_list|,
literal|"Path ''{0}'' already exists"
argument_list|,
name|SVNURL
operator|.
name|parseURIEncoded
argument_list|(
name|pair
operator|.
name|myDst
argument_list|)
argument_list|)
decl_stmt|;
name|SVNErrorManager
operator|.
name|error
argument_list|(
name|err
argument_list|,
name|SVNLogType
operator|.
name|WC
argument_list|)
expr_stmt|;
block|}
block|}
comment|// create commit items list to fetch log messages.
name|List
name|commitItems
init|=
operator|new
name|ArrayList
argument_list|(
name|copyPairs
operator|.
name|size
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|makeParents
condition|)
block|{
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|newDirs
operator|.
name|size
argument_list|()
condition|;
name|i
operator|++
control|)
block|{
name|String
name|newDirURL
init|=
operator|(
name|String
operator|)
name|newDirs
operator|.
name|get
argument_list|(
name|i
argument_list|)
decl_stmt|;
name|SVNURL
name|url
init|=
name|SVNURL
operator|.
name|parseURIEncoded
argument_list|(
name|newDirURL
argument_list|)
decl_stmt|;
name|SVNCommitItem
name|item
init|=
operator|new
name|SVNCommitItem
argument_list|(
literal|null
argument_list|,
name|url
argument_list|,
literal|null
argument_list|,
name|SVNNodeKind
operator|.
name|NONE
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|,
literal|true
argument_list|,
literal|false
argument_list|,
literal|false
argument_list|,
literal|false
argument_list|,
literal|false
argument_list|,
literal|false
argument_list|)
decl_stmt|;
name|commitItems
operator|.
name|add
argument_list|(
name|item
argument_list|)
expr_stmt|;
block|}
block|}
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|copyPairs
operator|.
name|size
argument_list|()
condition|;
name|i
operator|++
control|)
block|{
name|CopyPair
name|pair
init|=
operator|(
name|CopyPair
operator|)
name|copyPairs
operator|.
name|get
argument_list|(
name|i
argument_list|)
decl_stmt|;
name|SVNURL
name|url
init|=
name|SVNURL
operator|.
name|parseURIEncoded
argument_list|(
name|pair
operator|.
name|myDst
argument_list|)
decl_stmt|;
name|SVNCommitItem
name|item
init|=
operator|new
name|SVNCommitItem
argument_list|(
literal|null
argument_list|,
name|url
argument_list|,
literal|null
argument_list|,
name|SVNNodeKind
operator|.
name|NONE
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|,
literal|true
argument_list|,
literal|false
argument_list|,
literal|false
argument_list|,
literal|false
argument_list|,
literal|false
argument_list|,
literal|false
argument_list|)
decl_stmt|;
name|commitItems
operator|.
name|add
argument_list|(
name|item
argument_list|)
expr_stmt|;
block|}
name|SVNCommitItem
index|[]
name|commitables
init|=
operator|(
name|SVNCommitItem
index|[]
operator|)
name|commitItems
operator|.
name|toArray
argument_list|(
operator|new
name|SVNCommitItem
index|[
name|commitItems
operator|.
name|size
argument_list|()
index|]
argument_list|)
decl_stmt|;
name|message
operator|=
name|commitHandler
operator|.
name|getCommitMessage
argument_list|(
name|message
argument_list|,
name|commitables
argument_list|)
expr_stmt|;
if|if
condition|(
name|message
operator|==
literal|null
condition|)
block|{
return|return
name|SVNCommitInfo
operator|.
name|NULL
return|;
block|}
name|revprops
operator|=
name|commitHandler
operator|.
name|getRevisionProperties
argument_list|(
name|message
argument_list|,
name|commitables
argument_list|,
name|revprops
operator|==
literal|null
condition|?
operator|new
name|SVNProperties
argument_list|()
else|:
name|revprops
argument_list|)
expr_stmt|;
if|if
condition|(
name|revprops
operator|==
literal|null
condition|)
block|{
return|return
name|SVNCommitInfo
operator|.
name|NULL
return|;
block|}
name|Map
name|allCommitables
init|=
operator|new
name|TreeMap
argument_list|(
name|SVNCommitUtil
operator|.
name|FILE_COMPARATOR
argument_list|)
decl_stmt|;
name|repos
operator|.
name|setLocation
argument_list|(
name|repos
operator|.
name|getRepositoryRoot
argument_list|(
literal|true
argument_list|)
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|Map
name|pathsToExternalsProps
init|=
operator|new
name|SVNHashMap
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|copyPairs
operator|.
name|size
argument_list|()
condition|;
name|i
operator|++
control|)
block|{
name|CopyPair
name|source
init|=
operator|(
name|CopyPair
operator|)
name|copyPairs
operator|.
name|get
argument_list|(
name|i
argument_list|)
decl_stmt|;
name|File
name|srcFile
init|=
operator|new
name|Resource
argument_list|(
name|source
operator|.
name|mySource
argument_list|)
decl_stmt|;
name|SVNEntry
name|entry
init|=
name|wcAccess
operator|.
name|getVersionedEntry
argument_list|(
name|srcFile
argument_list|,
literal|false
argument_list|)
decl_stmt|;
name|SVNAdminArea
name|dirArea
decl_stmt|;
if|if
condition|(
name|entry
operator|.
name|isDirectory
argument_list|()
condition|)
block|{
name|dirArea
operator|=
name|wcAccess
operator|.
name|retrieve
argument_list|(
name|srcFile
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|dirArea
operator|=
name|wcAccess
operator|.
name|retrieve
argument_list|(
name|srcFile
operator|.
name|getParentFile
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|pathsToExternalsProps
operator|.
name|clear
argument_list|()
expr_stmt|;
name|Map
name|sourceCommittables
init|=
operator|new
name|HashMap
argument_list|()
decl_stmt|;
name|SVNCommitUtil
operator|.
name|harvestCommitables
argument_list|(
name|sourceCommittables
argument_list|,
name|dirArea
argument_list|,
name|srcFile
argument_list|,
literal|null
argument_list|,
name|entry
argument_list|,
name|source
operator|.
name|myDst
argument_list|,
name|entry
operator|.
name|getURL
argument_list|()
argument_list|,
literal|true
argument_list|,
literal|false
argument_list|,
literal|false
argument_list|,
literal|null
argument_list|,
name|SVNDepth
operator|.
name|INFINITY
argument_list|,
literal|false
argument_list|,
literal|null
argument_list|,
name|commitParameters
argument_list|,
name|pathsToExternalsProps
argument_list|)
expr_stmt|;
comment|// filter out file externals.
comment|// path of the source relative to wcAccess anchor.
name|String
name|basePath
init|=
name|SVNPathUtil
operator|.
name|canonicalizePath
argument_list|(
name|wcAccess
operator|.
name|getAnchor
argument_list|()
operator|.
name|getAbsolutePath
argument_list|()
argument_list|)
decl_stmt|;
name|String
name|sourcePath
init|=
name|SVNPathUtil
operator|.
name|canonicalizePath
argument_list|(
name|srcFile
operator|.
name|getAbsolutePath
argument_list|()
argument_list|)
decl_stmt|;
name|String
name|path
init|=
name|SVNPathUtil
operator|.
name|getRelativePath
argument_list|(
name|basePath
argument_list|,
name|sourcePath
argument_list|)
decl_stmt|;
name|SVNCommitUtil
operator|.
name|filterOutFileExternals
argument_list|(
name|Collections
operator|.
name|singletonList
argument_list|(
name|path
argument_list|)
argument_list|,
name|sourceCommittables
argument_list|,
name|wcAccess
argument_list|)
expr_stmt|;
name|allCommitables
operator|.
name|putAll
argument_list|(
name|sourceCommittables
argument_list|)
expr_stmt|;
name|SVNCommitItem
name|item
init|=
operator|(
name|SVNCommitItem
operator|)
name|allCommitables
operator|.
name|get
argument_list|(
name|srcFile
argument_list|)
decl_stmt|;
name|SVNURL
name|srcURL
init|=
name|entry
operator|.
name|getSVNURL
argument_list|()
decl_stmt|;
name|Map
name|mergeInfo
init|=
name|calculateTargetMergeInfo
argument_list|(
name|srcFile
argument_list|,
name|wcAccess
argument_list|,
name|srcURL
argument_list|,
name|source
operator|.
name|mySourceRevisionNumber
argument_list|,
name|repos
argument_list|,
literal|false
argument_list|)
decl_stmt|;
name|Map
name|wcMergeInfo
init|=
name|SVNPropertiesManager
operator|.
name|parseMergeInfo
argument_list|(
name|srcFile
argument_list|,
name|entry
argument_list|,
literal|false
argument_list|)
decl_stmt|;
if|if
condition|(
name|wcMergeInfo
operator|!=
literal|null
operator|&&
name|mergeInfo
operator|!=
literal|null
condition|)
block|{
name|mergeInfo
operator|=
name|SVNMergeInfoUtil
operator|.
name|mergeMergeInfos
argument_list|(
name|mergeInfo
argument_list|,
name|wcMergeInfo
argument_list|)
expr_stmt|;
block|}
if|else if
condition|(
name|mergeInfo
operator|==
literal|null
condition|)
block|{
name|mergeInfo
operator|=
name|wcMergeInfo
expr_stmt|;
block|}
if|if
condition|(
name|mergeInfo
operator|!=
literal|null
condition|)
block|{
name|String
name|mergeInfoString
init|=
name|SVNMergeInfoUtil
operator|.
name|formatMergeInfoToString
argument_list|(
name|mergeInfo
argument_list|,
literal|null
argument_list|)
decl_stmt|;
name|setCommitItemProperty
argument_list|(
name|item
argument_list|,
name|SVNProperty
operator|.
name|MERGE_INFO
argument_list|,
name|SVNPropertyValue
operator|.
name|create
argument_list|(
name|mergeInfoString
argument_list|)
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
operator|!
name|pathsToExternalsProps
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|LinkedList
name|newExternals
init|=
operator|new
name|LinkedList
argument_list|()
decl_stmt|;
for|for
control|(
name|Iterator
name|pathsIter
init|=
name|pathsToExternalsProps
operator|.
name|keySet
argument_list|()
operator|.
name|iterator
argument_list|()
init|;
name|pathsIter
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|File
name|localPath
init|=
operator|(
name|File
operator|)
name|pathsIter
operator|.
name|next
argument_list|()
decl_stmt|;
name|String
name|externalsPropString
init|=
operator|(
name|String
operator|)
name|pathsToExternalsProps
operator|.
name|get
argument_list|(
name|localPath
argument_list|)
decl_stmt|;
name|SVNExternal
index|[]
name|externals
init|=
name|SVNExternal
operator|.
name|parseExternals
argument_list|(
name|localPath
operator|.
name|getAbsolutePath
argument_list|()
argument_list|,
name|externalsPropString
argument_list|)
decl_stmt|;
name|boolean
name|introduceVirtualExternalChange
init|=
literal|false
decl_stmt|;
name|newExternals
operator|.
name|clear
argument_list|()
expr_stmt|;
for|for
control|(
name|int
name|k
init|=
literal|0
init|;
name|k
operator|<
name|externals
operator|.
name|length
condition|;
name|k
operator|++
control|)
block|{
name|File
name|externalWC
init|=
operator|new
name|Resource
argument_list|(
name|localPath
argument_list|,
name|externals
index|[
name|k
index|]
operator|.
name|getPath
argument_list|()
argument_list|)
decl_stmt|;
name|SVNEntry
name|externalEntry
init|=
literal|null
decl_stmt|;
name|SVNRevision
name|externalsWCRevision
init|=
name|SVNRevision
operator|.
name|UNDEFINED
decl_stmt|;
try|try
block|{
name|wcAccess
operator|.
name|open
argument_list|(
name|externalWC
argument_list|,
literal|false
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|externalEntry
operator|=
name|wcAccess
operator|.
name|getEntry
argument_list|(
name|externalWC
argument_list|,
literal|false
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|SVNException
name|svne
parameter_list|)
block|{
if|if
condition|(
name|svne
operator|instanceof
name|SVNCancelException
condition|)
block|{
throw|throw
name|svne
throw|;
block|}
block|}
finally|finally
block|{
name|wcAccess
operator|.
name|closeAdminArea
argument_list|(
name|externalWC
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|externalEntry
operator|==
literal|null
condition|)
block|{
name|externalEntry
operator|=
name|wcAccess
operator|.
name|getEntry
argument_list|(
name|externalWC
argument_list|,
literal|false
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|externalEntry
operator|!=
literal|null
operator|&&
operator|(
name|externalEntry
operator|.
name|isThisDir
argument_list|()
operator|||
name|externalEntry
operator|.
name|getExternalFilePath
argument_list|()
operator|!=
literal|null
operator|)
condition|)
block|{
name|externalsWCRevision
operator|=
name|SVNRevision
operator|.
name|create
argument_list|(
name|externalEntry
operator|.
name|getRevision
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|SVNEntry
name|ownerEntry
init|=
name|wcAccess
operator|.
name|getEntry
argument_list|(
name|localPath
argument_list|,
literal|false
argument_list|)
decl_stmt|;
name|SVNURL
name|ownerURL
init|=
literal|null
decl_stmt|;
if|if
condition|(
name|ownerEntry
operator|!=
literal|null
condition|)
block|{
name|ownerURL
operator|=
name|ownerEntry
operator|.
name|getSVNURL
argument_list|()
expr_stmt|;
block|}
if|if
condition|(
name|ownerURL
operator|==
literal|null
condition|)
block|{
comment|// there is no entry for the directory that has external
comment|// property or no url in it?
continue|continue;
block|}
name|SVNRevision
index|[]
name|revs
init|=
name|externalsHandler
operator|.
name|handleExternal
argument_list|(
name|externalWC
argument_list|,
name|externals
index|[
name|k
index|]
operator|.
name|resolveURL
argument_list|(
name|repos
operator|.
name|getRepositoryRoot
argument_list|(
literal|true
argument_list|)
argument_list|,
name|ownerURL
argument_list|)
argument_list|,
name|externals
index|[
name|k
index|]
operator|.
name|getRevision
argument_list|()
argument_list|,
name|externals
index|[
name|k
index|]
operator|.
name|getPegRevision
argument_list|()
argument_list|,
name|externals
index|[
name|k
index|]
operator|.
name|getRawValue
argument_list|()
argument_list|,
name|externalsWCRevision
argument_list|)
decl_stmt|;
if|if
condition|(
name|revs
operator|!=
literal|null
operator|&&
name|revs
index|[
literal|0
index|]
operator|.
name|equals
argument_list|(
name|externals
index|[
name|k
index|]
operator|.
name|getRevision
argument_list|()
argument_list|)
condition|)
block|{
name|newExternals
operator|.
name|add
argument_list|(
name|externals
index|[
name|k
index|]
operator|.
name|getRawValue
argument_list|()
argument_list|)
expr_stmt|;
block|}
if|else if
condition|(
name|revs
operator|!=
literal|null
condition|)
block|{
name|SVNExternal
name|newExternal
init|=
operator|new
name|SVNExternal
argument_list|(
name|externals
index|[
name|k
index|]
operator|.
name|getPath
argument_list|()
argument_list|,
name|externals
index|[
name|k
index|]
operator|.
name|getUnresolvedUrl
argument_list|()
argument_list|,
name|revs
index|[
literal|1
index|]
argument_list|,
name|revs
index|[
literal|0
index|]
argument_list|,
literal|true
argument_list|,
name|externals
index|[
name|k
index|]
operator|.
name|isPegRevisionExplicit
argument_list|()
argument_list|,
name|externals
index|[
name|k
index|]
operator|.
name|isNewFormat
argument_list|()
argument_list|)
decl_stmt|;
name|newExternals
operator|.
name|add
argument_list|(
name|newExternal
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|introduceVirtualExternalChange
condition|)
block|{
name|introduceVirtualExternalChange
operator|=
literal|true
expr_stmt|;
block|}
block|}
block|}
if|if
condition|(
name|introduceVirtualExternalChange
condition|)
block|{
name|String
name|newExternalsProp
init|=
literal|""
decl_stmt|;
for|for
control|(
name|Iterator
name|externalsIter
init|=
name|newExternals
operator|.
name|iterator
argument_list|()
init|;
name|externalsIter
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|String
name|external
init|=
operator|(
name|String
operator|)
name|externalsIter
operator|.
name|next
argument_list|()
decl_stmt|;
name|newExternalsProp
operator|+=
name|external
operator|+
literal|'\n'
expr_stmt|;
block|}
name|SVNCommitItem
name|itemWithExternalsChanges
init|=
operator|(
name|SVNCommitItem
operator|)
name|allCommitables
operator|.
name|get
argument_list|(
name|localPath
argument_list|)
decl_stmt|;
if|if
condition|(
name|itemWithExternalsChanges
operator|!=
literal|null
condition|)
block|{
name|setCommitItemProperty
argument_list|(
name|itemWithExternalsChanges
argument_list|,
name|SVNProperty
operator|.
name|EXTERNALS
argument_list|,
name|SVNPropertyValue
operator|.
name|create
argument_list|(
name|newExternalsProp
argument_list|)
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|SVNAdminArea
name|childArea
init|=
name|wcAccess
operator|.
name|retrieve
argument_list|(
name|localPath
argument_list|)
decl_stmt|;
name|String
name|relativePath
init|=
name|childArea
operator|.
name|getRelativePath
argument_list|(
name|dirArea
argument_list|)
decl_stmt|;
name|String
name|itemURL
init|=
name|SVNPathUtil
operator|.
name|append
argument_list|(
name|source
operator|.
name|myDst
argument_list|,
name|SVNEncodingUtil
operator|.
name|uriEncode
argument_list|(
name|relativePath
argument_list|)
argument_list|)
decl_stmt|;
name|itemWithExternalsChanges
operator|=
operator|new
name|SVNCommitItem
argument_list|(
name|localPath
argument_list|,
name|SVNURL
operator|.
name|parseURIEncoded
argument_list|(
name|itemURL
argument_list|)
argument_list|,
literal|null
argument_list|,
name|SVNNodeKind
operator|.
name|DIR
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|,
literal|false
argument_list|,
literal|false
argument_list|,
literal|true
argument_list|,
literal|false
argument_list|,
literal|false
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|setCommitItemProperty
argument_list|(
name|itemWithExternalsChanges
argument_list|,
name|SVNProperty
operator|.
name|EXTERNALS
argument_list|,
name|SVNPropertyValue
operator|.
name|create
argument_list|(
name|newExternalsProp
argument_list|)
argument_list|)
expr_stmt|;
name|allCommitables
operator|.
name|put
argument_list|(
name|localPath
argument_list|,
name|itemWithExternalsChanges
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
block|}
name|commitItems
operator|=
operator|new
name|ArrayList
argument_list|(
name|allCommitables
operator|.
name|values
argument_list|()
argument_list|)
expr_stmt|;
comment|// in case of 'base' commit, remove all 'deletions', mark all other items as non-modified, remove additions and copies from other urls.
if|if
condition|(
name|myIsDisableLocalModificationsCopying
condition|)
block|{
name|ArrayList
name|harmlessItems
init|=
operator|new
name|ArrayList
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|commitItems
operator|.
name|size
argument_list|()
condition|;
name|i
operator|++
control|)
block|{
name|SVNCommitItem
name|item
init|=
operator|(
name|SVNCommitItem
operator|)
name|commitItems
operator|.
name|get
argument_list|(
name|i
argument_list|)
decl_stmt|;
if|if
condition|(
name|item
operator|.
name|isDeleted
argument_list|()
condition|)
block|{
comment|// deletion or replacement, skip it.
continue|continue;
block|}
if|if
condition|(
name|item
operator|.
name|isAdded
argument_list|()
condition|)
block|{
if|if
condition|(
operator|!
name|item
operator|.
name|isCopied
argument_list|()
condition|)
block|{
comment|// this is just new file or directory
continue|continue;
block|}
name|SVNURL
name|copyFromURL
init|=
name|item
operator|.
name|getCopyFromURL
argument_list|()
decl_stmt|;
if|if
condition|(
name|copyFromURL
operator|==
literal|null
condition|)
block|{
comment|// also skip.
continue|continue;
block|}
name|SVNEntry
name|entry
init|=
name|wcAccess
operator|.
name|getEntry
argument_list|(
name|item
operator|.
name|getFile
argument_list|()
argument_list|,
literal|false
argument_list|)
decl_stmt|;
if|if
condition|(
name|entry
operator|==
literal|null
condition|)
block|{
continue|continue;
block|}
name|SVNURL
name|expectedURL
init|=
name|entry
operator|.
name|getSVNURL
argument_list|()
decl_stmt|;
if|if
condition|(
operator|!
name|copyFromURL
operator|.
name|equals
argument_list|(
name|expectedURL
argument_list|)
condition|)
block|{
comment|// copied from some other location.
continue|continue;
block|}
block|}
name|setCommitItemFlags
argument_list|(
name|item
argument_list|,
literal|false
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|harmlessItems
operator|.
name|add
argument_list|(
name|item
argument_list|)
expr_stmt|;
block|}
name|commitItems
operator|=
name|harmlessItems
expr_stmt|;
block|}
comment|// add parents to commits hash?
if|if
condition|(
name|makeParents
condition|)
block|{
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|newDirs
operator|.
name|size
argument_list|()
condition|;
name|i
operator|++
control|)
block|{
name|String
name|newDirURL
init|=
operator|(
name|String
operator|)
name|newDirs
operator|.
name|get
argument_list|(
name|i
argument_list|)
decl_stmt|;
name|SVNURL
name|url
init|=
name|SVNURL
operator|.
name|parseURIEncoded
argument_list|(
name|newDirURL
argument_list|)
decl_stmt|;
name|SVNCommitItem
name|item
init|=
operator|new
name|SVNCommitItem
argument_list|(
literal|null
argument_list|,
name|url
argument_list|,
literal|null
argument_list|,
name|SVNNodeKind
operator|.
name|NONE
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|,
literal|true
argument_list|,
literal|false
argument_list|,
literal|false
argument_list|,
literal|false
argument_list|,
literal|false
argument_list|,
literal|false
argument_list|)
decl_stmt|;
name|commitItems
operator|.
name|add
argument_list|(
name|item
argument_list|)
expr_stmt|;
block|}
block|}
name|commitables
operator|=
operator|(
name|SVNCommitItem
index|[]
operator|)
name|commitItems
operator|.
name|toArray
argument_list|(
operator|new
name|SVNCommitItem
index|[
name|commitItems
operator|.
name|size
argument_list|()
index|]
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|commitables
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
name|setCommitItemAccess
argument_list|(
name|commitables
index|[
name|i
index|]
argument_list|,
name|wcAccess
argument_list|)
expr_stmt|;
block|}
name|allCommitables
operator|=
operator|new
name|TreeMap
argument_list|()
expr_stmt|;
name|SVNURL
name|url
init|=
name|SVNCommitUtil
operator|.
name|translateCommitables
argument_list|(
name|commitables
argument_list|,
name|allCommitables
argument_list|)
decl_stmt|;
name|repos
operator|=
name|createRepository
argument_list|(
name|url
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|SVNCommitMediator
name|mediator
init|=
operator|new
name|SVNCommitMediator
argument_list|(
name|allCommitables
argument_list|)
decl_stmt|;
name|tmpFiles
operator|=
name|mediator
operator|.
name|getTmpFiles
argument_list|()
expr_stmt|;
name|message
operator|=
name|SVNCommitUtil
operator|.
name|validateCommitMessage
argument_list|(
name|message
argument_list|)
expr_stmt|;
name|SVNURL
name|rootURL
init|=
name|repos
operator|.
name|getRepositoryRoot
argument_list|(
literal|true
argument_list|)
decl_stmt|;
name|SVNPropertiesManager
operator|.
name|validateRevisionProperties
argument_list|(
name|revprops
argument_list|)
expr_stmt|;
name|commitEditor
operator|=
name|repos
operator|.
name|getCommitEditor
argument_list|(
name|message
argument_list|,
literal|null
argument_list|,
literal|true
argument_list|,
name|revprops
argument_list|,
name|mediator
argument_list|)
expr_stmt|;
name|info
operator|=
name|SVNCommitter
operator|.
name|commit
argument_list|(
name|tmpFiles
argument_list|,
name|allCommitables
argument_list|,
name|rootURL
operator|.
name|getPath
argument_list|()
argument_list|,
name|commitEditor
argument_list|)
expr_stmt|;
name|commitEditor
operator|=
literal|null
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|SVNCancelException
name|cancel
parameter_list|)
block|{
throw|throw
name|cancel
throw|;
block|}
catch|catch
parameter_list|(
name|SVNException
name|e
parameter_list|)
block|{
comment|// wrap error message.
name|SVNErrorMessage
name|err
init|=
name|e
operator|.
name|getErrorMessage
argument_list|()
operator|.
name|wrap
argument_list|(
literal|"Commit failed (details follow):"
argument_list|)
decl_stmt|;
name|SVNErrorManager
operator|.
name|error
argument_list|(
name|err
argument_list|,
name|SVNLogType
operator|.
name|WC
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
if|if
condition|(
name|tmpFiles
operator|!=
literal|null
condition|)
block|{
for|for
control|(
name|Iterator
name|files
init|=
name|tmpFiles
operator|.
name|iterator
argument_list|()
init|;
name|files
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|File
name|file
init|=
operator|(
name|File
operator|)
name|files
operator|.
name|next
argument_list|()
decl_stmt|;
name|SVNFileUtil
operator|.
name|deleteFile
argument_list|(
name|file
argument_list|)
expr_stmt|;
block|}
block|}
if|if
condition|(
name|commitEditor
operator|!=
literal|null
operator|&&
name|info
operator|==
literal|null
condition|)
block|{
comment|// should we hide this exception?
try|try
block|{
name|commitEditor
operator|.
name|abortEdit
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|SVNException
name|e
parameter_list|)
block|{
name|SVNDebugLog
operator|.
name|getDefaultLog
argument_list|()
operator|.
name|logFine
argument_list|(
name|SVNLogType
operator|.
name|WC
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
block|}
if|if
condition|(
name|wcAccess
operator|!=
literal|null
condition|)
block|{
name|wcAccess
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
block|}
if|if
condition|(
name|info
operator|!=
literal|null
operator|&&
name|info
operator|.
name|getNewRevision
argument_list|()
operator|>=
literal|0
condition|)
block|{
name|dispatchEvent
argument_list|(
name|SVNEventFactory
operator|.
name|createSVNEvent
argument_list|(
literal|null
argument_list|,
name|SVNNodeKind
operator|.
name|NONE
argument_list|,
literal|null
argument_list|,
name|info
operator|.
name|getNewRevision
argument_list|()
argument_list|,
name|SVNEventAction
operator|.
name|COMMIT_COMPLETED
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|)
argument_list|,
name|ISVNEventHandler
operator|.
name|UNKNOWN
argument_list|)
expr_stmt|;
block|}
return|return
name|info
operator|!=
literal|null
condition|?
name|info
else|:
name|SVNCommitInfo
operator|.
name|NULL
return|;
block|}
specifier|private
name|void
name|copyReposToWC
parameter_list|(
name|List
name|copyPairs
parameter_list|,
name|boolean
name|makeParents
parameter_list|)
throws|throws
name|SVNException
block|{
for|for
control|(
name|Iterator
name|pairs
init|=
name|copyPairs
operator|.
name|iterator
argument_list|()
init|;
name|pairs
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|CopyPair
name|pair
init|=
operator|(
name|CopyPair
operator|)
name|pairs
operator|.
name|next
argument_list|()
decl_stmt|;
name|SVNRepositoryLocation
index|[]
name|locations
init|=
name|getLocations
argument_list|(
name|SVNURL
operator|.
name|parseURIEncoded
argument_list|(
name|pair
operator|.
name|mySource
argument_list|)
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|,
name|pair
operator|.
name|mySourcePegRevision
argument_list|,
name|pair
operator|.
name|mySourceRevision
argument_list|,
name|SVNRevision
operator|.
name|UNDEFINED
argument_list|)
decl_stmt|;
comment|// new
name|String
name|actualURL
init|=
name|locations
index|[
literal|0
index|]
operator|.
name|getURL
argument_list|()
operator|.
name|toString
argument_list|()
decl_stmt|;
name|String
name|originalSource
init|=
name|pair
operator|.
name|mySource
decl_stmt|;
name|pair
operator|.
name|mySource
operator|=
name|actualURL
expr_stmt|;
name|pair
operator|.
name|myOriginalSource
operator|=
name|originalSource
expr_stmt|;
block|}
comment|// get src and dst ancestors.
name|String
name|topDst
init|=
operator|(
operator|(
name|CopyPair
operator|)
name|copyPairs
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|)
operator|.
name|myDst
decl_stmt|;
if|if
condition|(
name|copyPairs
operator|.
name|size
argument_list|()
operator|>
literal|1
condition|)
block|{
name|topDst
operator|=
name|SVNPathUtil
operator|.
name|removeTail
argument_list|(
name|topDst
argument_list|)
expr_stmt|;
block|}
name|String
name|topSrc
init|=
operator|(
operator|(
name|CopyPair
operator|)
name|copyPairs
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|)
operator|.
name|mySource
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|1
init|;
name|i
operator|<
name|copyPairs
operator|.
name|size
argument_list|()
condition|;
name|i
operator|++
control|)
block|{
name|CopyPair
name|pair
init|=
operator|(
name|CopyPair
operator|)
name|copyPairs
operator|.
name|get
argument_list|(
name|i
argument_list|)
decl_stmt|;
name|topSrc
operator|=
name|SVNPathUtil
operator|.
name|getCommonPathAncestor
argument_list|(
name|topSrc
argument_list|,
name|pair
operator|.
name|mySource
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|copyPairs
operator|.
name|size
argument_list|()
operator|==
literal|1
condition|)
block|{
name|topSrc
operator|=
name|SVNPathUtil
operator|.
name|removeTail
argument_list|(
name|topSrc
argument_list|)
expr_stmt|;
block|}
name|SVNRepository
name|topSrcRepos
init|=
name|createRepository
argument_list|(
name|SVNURL
operator|.
name|parseURIEncoded
argument_list|(
name|topSrc
argument_list|)
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|,
literal|false
argument_list|)
decl_stmt|;
try|try
block|{
for|for
control|(
name|Iterator
name|pairs
init|=
name|copyPairs
operator|.
name|iterator
argument_list|()
init|;
name|pairs
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|CopyPair
name|pair
init|=
operator|(
name|CopyPair
operator|)
name|pairs
operator|.
name|next
argument_list|()
decl_stmt|;
name|pair
operator|.
name|mySourceRevisionNumber
operator|=
name|getRevisionNumber
argument_list|(
name|pair
operator|.
name|mySourceRevision
argument_list|,
name|topSrcRepos
argument_list|,
literal|null
argument_list|)
expr_stmt|;
block|}
name|String
name|reposPath
init|=
name|topSrcRepos
operator|.
name|getLocation
argument_list|()
operator|.
name|toString
argument_list|()
decl_stmt|;
for|for
control|(
name|Iterator
name|pairs
init|=
name|copyPairs
operator|.
name|iterator
argument_list|()
init|;
name|pairs
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|CopyPair
name|pair
init|=
operator|(
name|CopyPair
operator|)
name|pairs
operator|.
name|next
argument_list|()
decl_stmt|;
name|String
name|relativePath
init|=
name|SVNPathUtil
operator|.
name|getPathAsChild
argument_list|(
name|reposPath
argument_list|,
name|pair
operator|.
name|mySource
argument_list|)
decl_stmt|;
name|relativePath
operator|=
name|SVNEncodingUtil
operator|.
name|uriDecode
argument_list|(
name|relativePath
argument_list|)
expr_stmt|;
name|SVNNodeKind
name|kind
init|=
name|topSrcRepos
operator|.
name|checkPath
argument_list|(
name|relativePath
argument_list|,
name|pair
operator|.
name|mySourceRevisionNumber
argument_list|)
decl_stmt|;
if|if
condition|(
name|kind
operator|==
name|SVNNodeKind
operator|.
name|NONE
condition|)
block|{
name|SVNErrorMessage
name|err
decl_stmt|;
if|if
condition|(
name|pair
operator|.
name|mySourceRevisionNumber
operator|>=
literal|0
condition|)
block|{
name|err
operator|=
name|SVNErrorMessage
operator|.
name|create
argument_list|(
name|SVNErrorCode
operator|.
name|FS_NOT_FOUND
argument_list|,
literal|"Path ''{0}'' not found in revision {1}"
argument_list|,
operator|new
name|Object
index|[]
block|{
name|SVNURL
operator|.
name|parseURIEncoded
argument_list|(
name|pair
operator|.
name|mySource
argument_list|)
block|,
operator|new
name|Long
argument_list|(
name|pair
operator|.
name|mySourceRevisionNumber
argument_list|)
block|}
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|err
operator|=
name|SVNErrorMessage
operator|.
name|create
argument_list|(
name|SVNErrorCode
operator|.
name|FS_NOT_FOUND
argument_list|,
literal|"Path ''{0}'' not found in head revision"
argument_list|,
name|SVNURL
operator|.
name|parseURIEncoded
argument_list|(
name|pair
operator|.
name|mySource
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|SVNErrorManager
operator|.
name|error
argument_list|(
name|err
argument_list|,
name|SVNLogType
operator|.
name|WC
argument_list|)
expr_stmt|;
block|}
name|pair
operator|.
name|mySourceKind
operator|=
name|kind
expr_stmt|;
name|SVNFileType
name|dstType
init|=
name|SVNFileType
operator|.
name|getType
argument_list|(
operator|new
name|Resource
argument_list|(
name|pair
operator|.
name|myDst
argument_list|)
argument_list|)
decl_stmt|;
if|if
condition|(
name|dstType
operator|!=
name|SVNFileType
operator|.
name|NONE
condition|)
block|{
name|SVNErrorMessage
name|err
init|=
name|SVNErrorMessage
operator|.
name|create
argument_list|(
name|SVNErrorCode
operator|.
name|ENTRY_EXISTS
argument_list|,
literal|"Path ''{0}'' already exists"
argument_list|,
operator|new
name|Resource
argument_list|(
name|pair
operator|.
name|myDst
argument_list|)
argument_list|)
decl_stmt|;
name|SVNErrorManager
operator|.
name|error
argument_list|(
name|err
argument_list|,
name|SVNLogType
operator|.
name|WC
argument_list|)
expr_stmt|;
block|}
name|String
name|dstParent
init|=
name|SVNPathUtil
operator|.
name|removeTail
argument_list|(
name|pair
operator|.
name|myDst
argument_list|)
decl_stmt|;
name|SVNFileType
name|dstParentFileType
init|=
name|SVNFileType
operator|.
name|getType
argument_list|(
operator|new
name|Resource
argument_list|(
name|dstParent
argument_list|)
argument_list|)
decl_stmt|;
if|if
condition|(
name|makeParents
operator|&&
name|dstParentFileType
operator|==
name|SVNFileType
operator|.
name|NONE
condition|)
block|{
comment|// create parents.
name|addLocalParents
argument_list|(
operator|new
name|Resource
argument_list|(
name|dstParent
argument_list|)
argument_list|,
name|getEventDispatcher
argument_list|()
argument_list|)
expr_stmt|;
block|}
if|else if
condition|(
name|dstParentFileType
operator|!=
name|SVNFileType
operator|.
name|DIRECTORY
condition|)
block|{
name|SVNErrorMessage
name|err
init|=
name|SVNErrorMessage
operator|.
name|create
argument_list|(
name|SVNErrorCode
operator|.
name|WC_NOT_DIRECTORY
argument_list|,
literal|"Path ''{0}'' is not a directory"
argument_list|,
name|dstParent
argument_list|)
decl_stmt|;
name|SVNErrorManager
operator|.
name|error
argument_list|(
name|err
argument_list|,
name|SVNLogType
operator|.
name|WC
argument_list|)
expr_stmt|;
block|}
block|}
name|SVNWCAccess
name|dstAccess
init|=
name|getWCAccess
argument_list|()
decl_stmt|;
try|try
block|{
name|probeOpen
argument_list|(
name|dstAccess
argument_list|,
operator|new
name|Resource
argument_list|(
name|topDst
argument_list|)
argument_list|,
literal|true
argument_list|,
literal|0
argument_list|)
expr_stmt|;
for|for
control|(
name|Iterator
name|pairs
init|=
name|copyPairs
operator|.
name|iterator
argument_list|()
init|;
name|pairs
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|CopyPair
name|pair
init|=
operator|(
name|CopyPair
operator|)
name|pairs
operator|.
name|next
argument_list|()
decl_stmt|;
name|SVNEntry
name|dstEntry
init|=
name|dstAccess
operator|.
name|getEntry
argument_list|(
operator|new
name|Resource
argument_list|(
name|pair
operator|.
name|myDst
argument_list|)
argument_list|,
literal|true
argument_list|)
decl_stmt|;
if|if
condition|(
name|dstEntry
operator|!=
literal|null
condition|)
block|{
if|if
condition|(
name|dstEntry
operator|.
name|getDepth
argument_list|()
operator|==
name|SVNDepth
operator|.
name|EXCLUDE
operator|||
name|dstEntry
operator|.
name|isAbsent
argument_list|()
condition|)
block|{
name|SVNErrorMessage
name|err
init|=
name|SVNErrorMessage
operator|.
name|create
argument_list|(
name|SVNErrorCode
operator|.
name|ENTRY_EXISTS
argument_list|,
literal|"''{0}'' is already under version control"
argument_list|,
operator|new
name|Resource
argument_list|(
name|pair
operator|.
name|myDst
argument_list|)
argument_list|)
decl_stmt|;
name|SVNErrorManager
operator|.
name|error
argument_list|(
name|err
argument_list|,
name|SVNLogType
operator|.
name|WC
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
operator|!
name|dstEntry
operator|.
name|isDirectory
argument_list|()
operator|&&
operator|!
name|dstEntry
operator|.
name|isScheduledForDeletion
argument_list|()
operator|&&
operator|!
name|dstEntry
operator|.
name|isDeleted
argument_list|()
condition|)
block|{
name|SVNErrorMessage
name|err
init|=
name|SVNErrorMessage
operator|.
name|create
argument_list|(
name|SVNErrorCode
operator|.
name|WC_OBSTRUCTED_UPDATE
argument_list|,
literal|"Entry for ''{0}'' exists (though the working file is missing)"
argument_list|,
operator|new
name|Resource
argument_list|(
name|pair
operator|.
name|myDst
argument_list|)
argument_list|)
decl_stmt|;
name|SVNErrorManager
operator|.
name|error
argument_list|(
name|err
argument_list|,
name|SVNLogType
operator|.
name|WC
argument_list|)
expr_stmt|;
block|}
block|}
block|}
name|String
name|srcUUID
init|=
literal|null
decl_stmt|;
name|String
name|dstUUID
init|=
literal|null
decl_stmt|;
try|try
block|{
name|srcUUID
operator|=
name|topSrcRepos
operator|.
name|getRepositoryUUID
argument_list|(
literal|true
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|SVNException
name|e
parameter_list|)
block|{
if|if
condition|(
name|e
operator|.
name|getErrorMessage
argument_list|()
operator|.
name|getErrorCode
argument_list|()
operator|!=
name|SVNErrorCode
operator|.
name|RA_NO_REPOS_UUID
condition|)
block|{
throw|throw
name|e
throw|;
block|}
block|}
name|String
name|dstParent
init|=
name|topDst
decl_stmt|;
if|if
condition|(
name|copyPairs
operator|.
name|size
argument_list|()
operator|==
literal|1
condition|)
block|{
name|dstParent
operator|=
name|SVNPathUtil
operator|.
name|removeTail
argument_list|(
name|topDst
argument_list|)
expr_stmt|;
block|}
try|try
block|{
name|dstUUID
operator|=
name|getUUIDFromPath
argument_list|(
name|dstAccess
argument_list|,
operator|new
name|Resource
argument_list|(
name|dstParent
argument_list|)
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|SVNException
name|e
parameter_list|)
block|{
if|if
condition|(
name|e
operator|.
name|getErrorMessage
argument_list|()
operator|.
name|getErrorCode
argument_list|()
operator|!=
name|SVNErrorCode
operator|.
name|RA_NO_REPOS_UUID
condition|)
block|{
throw|throw
name|e
throw|;
block|}
block|}
name|boolean
name|sameRepos
init|=
literal|false
decl_stmt|;
if|if
condition|(
name|srcUUID
operator|!=
literal|null
condition|)
block|{
name|sameRepos
operator|=
name|srcUUID
operator|.
name|equals
argument_list|(
name|dstUUID
argument_list|)
expr_stmt|;
block|}
for|for
control|(
name|Iterator
name|pairs
init|=
name|copyPairs
operator|.
name|iterator
argument_list|()
init|;
name|pairs
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|CopyPair
name|pair
init|=
operator|(
name|CopyPair
operator|)
name|pairs
operator|.
name|next
argument_list|()
decl_stmt|;
name|copyReposToWC
argument_list|(
name|pair
argument_list|,
name|sameRepos
argument_list|,
name|topSrcRepos
argument_list|,
name|dstAccess
argument_list|)
expr_stmt|;
block|}
block|}
finally|finally
block|{
name|close
argument_list|(
name|dstAccess
argument_list|)
expr_stmt|;
block|}
block|}
finally|finally
block|{
name|topSrcRepos
operator|.
name|closeSession
argument_list|()
expr_stmt|;
block|}
block|}
specifier|private
name|void
name|copyReposToWC
parameter_list|(
name|CopyPair
name|pair
parameter_list|,
name|boolean
name|sameRepositories
parameter_list|,
name|SVNRepository
name|topSrcRepos
parameter_list|,
name|SVNWCAccess
name|dstAccess
parameter_list|)
throws|throws
name|SVNException
block|{
name|long
name|srcRevNum
init|=
name|pair
operator|.
name|mySourceRevisionNumber
decl_stmt|;
if|if
condition|(
name|pair
operator|.
name|mySourceKind
operator|==
name|SVNNodeKind
operator|.
name|DIR
condition|)
block|{
comment|// do checkout
name|String
name|srcURL
init|=
name|pair
operator|.
name|myOriginalSource
decl_stmt|;
name|SVNURL
name|url
init|=
name|SVNURL
operator|.
name|parseURIEncoded
argument_list|(
name|srcURL
argument_list|)
decl_stmt|;
name|SVNUpdateClient
name|updateClient
init|=
operator|new
name|SVNUpdateClient
argument_list|(
name|getRepositoryPool
argument_list|()
argument_list|,
name|getOptions
argument_list|()
argument_list|)
decl_stmt|;
name|updateClient
operator|.
name|setEventHandler
argument_list|(
name|getEventDispatcher
argument_list|()
argument_list|)
expr_stmt|;
name|File
name|dstFile
init|=
operator|new
name|Resource
argument_list|(
name|pair
operator|.
name|myDst
argument_list|)
decl_stmt|;
name|SVNRevision
name|srcRevision
init|=
name|pair
operator|.
name|mySourceRevision
decl_stmt|;
name|SVNRevision
name|srcPegRevision
init|=
name|pair
operator|.
name|mySourcePegRevision
decl_stmt|;
name|updateClient
operator|.
name|doCheckout
argument_list|(
name|url
argument_list|,
name|dstFile
argument_list|,
name|srcPegRevision
argument_list|,
name|srcRevision
argument_list|,
name|SVNDepth
operator|.
name|INFINITY
argument_list|,
literal|false
argument_list|)
expr_stmt|;
if|if
condition|(
name|sameRepositories
condition|)
block|{
name|url
operator|=
name|SVNURL
operator|.
name|parseURIEncoded
argument_list|(
name|pair
operator|.
name|mySource
argument_list|)
expr_stmt|;
name|SVNAdminArea
name|dstArea
init|=
name|dstAccess
operator|.
name|open
argument_list|(
name|dstFile
argument_list|,
literal|true
argument_list|,
name|SVNWCAccess
operator|.
name|INFINITE_DEPTH
argument_list|)
decl_stmt|;
name|SVNEntry
name|dstRootEntry
init|=
name|dstArea
operator|.
name|getEntry
argument_list|(
name|dstArea
operator|.
name|getThisDirName
argument_list|()
argument_list|,
literal|false
argument_list|)
decl_stmt|;
if|if
condition|(
name|srcRevision
operator|==
name|SVNRevision
operator|.
name|HEAD
condition|)
block|{
name|srcRevNum
operator|=
name|dstRootEntry
operator|.
name|getRevision
argument_list|()
expr_stmt|;
block|}
name|SVNAdminArea
name|dir
init|=
name|dstAccess
operator|.
name|getAdminArea
argument_list|(
name|dstFile
operator|.
name|getParentFile
argument_list|()
argument_list|)
decl_stmt|;
name|SVNWCManager
operator|.
name|add
argument_list|(
name|dstFile
argument_list|,
name|dir
argument_list|,
name|url
argument_list|,
name|srcRevNum
argument_list|,
name|SVNDepth
operator|.
name|INFINITY
argument_list|)
expr_stmt|;
name|Map
name|srcMergeInfo
init|=
name|calculateTargetMergeInfo
argument_list|(
literal|null
argument_list|,
literal|null
argument_list|,
name|url
argument_list|,
name|srcRevNum
argument_list|,
name|topSrcRepos
argument_list|,
literal|false
argument_list|)
decl_stmt|;
name|extendWCMergeInfo
argument_list|(
name|dstFile
argument_list|,
name|dstRootEntry
argument_list|,
name|srcMergeInfo
argument_list|,
name|dstAccess
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|SVNErrorMessage
name|err
init|=
name|SVNErrorMessage
operator|.
name|create
argument_list|(
name|SVNErrorCode
operator|.
name|UNSUPPORTED_FEATURE
argument_list|,
literal|"Source URL ''{0}'' is from foreign repository; leaving it as a disjoint WC"
argument_list|,
name|url
argument_list|)
decl_stmt|;
name|SVNErrorManager
operator|.
name|error
argument_list|(
name|err
argument_list|,
name|SVNLogType
operator|.
name|WC
argument_list|)
expr_stmt|;
block|}
block|}
if|else if
condition|(
name|pair
operator|.
name|mySourceKind
operator|==
name|SVNNodeKind
operator|.
name|FILE
condition|)
block|{
name|String
name|srcURL
init|=
name|pair
operator|.
name|mySource
decl_stmt|;
name|SVNURL
name|url
init|=
name|SVNURL
operator|.
name|parseURIEncoded
argument_list|(
name|srcURL
argument_list|)
decl_stmt|;
name|File
name|dst
init|=
operator|new
name|Resource
argument_list|(
name|pair
operator|.
name|myDst
argument_list|)
decl_stmt|;
name|SVNAdminArea
name|dir
init|=
name|dstAccess
operator|.
name|getAdminArea
argument_list|(
name|dst
operator|.
name|getParentFile
argument_list|()
argument_list|)
decl_stmt|;
name|File
name|tmpFile
init|=
name|SVNAdminUtil
operator|.
name|createTmpFile
argument_list|(
name|dir
argument_list|)
decl_stmt|;
name|String
name|path
init|=
name|getPathRelativeToRoot
argument_list|(
literal|null
argument_list|,
name|url
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|,
name|topSrcRepos
argument_list|)
decl_stmt|;
name|SVNProperties
name|props
init|=
operator|new
name|SVNProperties
argument_list|()
decl_stmt|;
name|OutputStream
name|os
init|=
literal|null
decl_stmt|;
name|long
name|revision
init|=
operator|-
literal|1
decl_stmt|;
try|try
block|{
name|os
operator|=
name|SVNFileUtil
operator|.
name|openFileForWriting
argument_list|(
name|tmpFile
argument_list|)
expr_stmt|;
name|revision
operator|=
name|topSrcRepos
operator|.
name|getFile
argument_list|(
name|path
argument_list|,
name|srcRevNum
argument_list|,
name|props
argument_list|,
operator|new
name|SVNCancellableOutputStream
argument_list|(
name|os
argument_list|,
name|this
argument_list|)
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
name|SVNFileUtil
operator|.
name|closeFile
argument_list|(
name|os
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|srcRevNum
operator|<
literal|0
condition|)
block|{
name|srcRevNum
operator|=
name|revision
expr_stmt|;
block|}
name|SVNWCManager
operator|.
name|addRepositoryFile
argument_list|(
name|dir
argument_list|,
name|dst
operator|.
name|getName
argument_list|()
argument_list|,
literal|null
argument_list|,
name|tmpFile
argument_list|,
name|props
argument_list|,
literal|null
argument_list|,
name|sameRepositories
condition|?
name|pair
operator|.
name|mySource
else|:
literal|null
argument_list|,
name|sameRepositories
condition|?
name|srcRevNum
else|:
operator|-
literal|1
argument_list|)
expr_stmt|;
name|SVNEntry
name|entry
init|=
name|dstAccess
operator|.
name|getEntry
argument_list|(
name|dst
argument_list|,
literal|false
argument_list|)
decl_stmt|;
name|Map
name|mergeInfo
init|=
name|calculateTargetMergeInfo
argument_list|(
literal|null
argument_list|,
literal|null
argument_list|,
name|url
argument_list|,
name|srcRevNum
argument_list|,
name|topSrcRepos
argument_list|,
literal|false
argument_list|)
decl_stmt|;
name|extendWCMergeInfo
argument_list|(
name|dst
argument_list|,
name|entry
argument_list|,
name|mergeInfo
argument_list|,
name|dstAccess
argument_list|)
expr_stmt|;
name|SVNEvent
name|event
init|=
name|SVNEventFactory
operator|.
name|createSVNEvent
argument_list|(
name|dst
argument_list|,
name|SVNNodeKind
operator|.
name|FILE
argument_list|,
literal|null
argument_list|,
name|SVNRepository
operator|.
name|INVALID_REVISION
argument_list|,
name|SVNEventAction
operator|.
name|ADD
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|)
decl_stmt|;
name|dstAccess
operator|.
name|handleEvent
argument_list|(
name|event
argument_list|)
expr_stmt|;
name|sleepForTimeStamp
argument_list|()
expr_stmt|;
block|}
block|}
specifier|private
name|void
name|copyWCToWC
parameter_list|(
name|List
name|copyPairs
parameter_list|,
name|boolean
name|isMove
parameter_list|,
name|boolean
name|makeParents
parameter_list|)
throws|throws
name|SVNException
block|{
for|for
control|(
name|Iterator
name|pairs
init|=
name|copyPairs
operator|.
name|iterator
argument_list|()
init|;
name|pairs
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|CopyPair
name|pair
init|=
operator|(
name|CopyPair
operator|)
name|pairs
operator|.
name|next
argument_list|()
decl_stmt|;
name|File
name|source
init|=
operator|new
name|Resource
argument_list|(
name|pair
operator|.
name|mySource
argument_list|)
decl_stmt|;
name|SVNFileType
name|srcFileType
init|=
name|SVNFileType
operator|.
name|getType
argument_list|(
name|source
argument_list|)
decl_stmt|;
if|if
condition|(
name|srcFileType
operator|==
name|SVNFileType
operator|.
name|NONE
condition|)
block|{
name|SVNErrorMessage
name|err
init|=
name|SVNErrorMessage
operator|.
name|create
argument_list|(
name|SVNErrorCode
operator|.
name|NODE_UNKNOWN_KIND
argument_list|,
literal|"Path ''{0}'' does not exist"
argument_list|,
name|source
argument_list|)
decl_stmt|;
name|SVNErrorManager
operator|.
name|error
argument_list|(
name|err
argument_list|,
name|SVNLogType
operator|.
name|WC
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|isMove
operator|&&
name|SVNWCUtil
operator|.
name|isWorkingCopyRoot
argument_list|(
name|source
argument_list|)
condition|)
block|{
name|SVNErrorMessage
name|err
init|=
name|SVNErrorMessage
operator|.
name|create
argument_list|(
name|SVNErrorCode
operator|.
name|UNSUPPORTED_FEATURE
argument_list|,
literal|"Cannot move ''{0}'' as it is the root of the working copy"
argument_list|,
name|source
argument_list|)
decl_stmt|;
name|SVNErrorManager
operator|.
name|error
argument_list|(
name|err
argument_list|,
name|SVNLogType
operator|.
name|WC
argument_list|)
expr_stmt|;
block|}
name|SVNFileType
name|dstFileType
init|=
name|SVNFileType
operator|.
name|getType
argument_list|(
operator|new
name|Resource
argument_list|(
name|pair
operator|.
name|myDst
argument_list|)
argument_list|)
decl_stmt|;
if|if
condition|(
name|dstFileType
operator|!=
name|SVNFileType
operator|.
name|NONE
condition|)
block|{
name|SVNErrorMessage
name|err
init|=
name|SVNErrorMessage
operator|.
name|create
argument_list|(
name|SVNErrorCode
operator|.
name|ENTRY_EXISTS
argument_list|,
literal|"Path ''{0}'' already exists"
argument_list|,
operator|new
name|Resource
argument_list|(
name|pair
operator|.
name|myDst
argument_list|)
argument_list|)
decl_stmt|;
name|SVNErrorManager
operator|.
name|error
argument_list|(
name|err
argument_list|,
name|SVNLogType
operator|.
name|WC
argument_list|)
expr_stmt|;
block|}
name|File
name|dstParent
init|=
operator|new
name|Resource
argument_list|(
name|SVNPathUtil
operator|.
name|removeTail
argument_list|(
name|pair
operator|.
name|myDst
argument_list|)
argument_list|)
decl_stmt|;
name|pair
operator|.
name|myBaseName
operator|=
name|SVNPathUtil
operator|.
name|tail
argument_list|(
name|pair
operator|.
name|myDst
argument_list|)
expr_stmt|;
name|SVNFileType
name|dstParentFileType
init|=
name|SVNFileType
operator|.
name|getType
argument_list|(
name|dstParent
argument_list|)
decl_stmt|;
if|if
condition|(
name|makeParents
operator|&&
name|dstParentFileType
operator|==
name|SVNFileType
operator|.
name|NONE
condition|)
block|{
comment|// create parents.
name|addLocalParents
argument_list|(
name|dstParent
argument_list|,
name|getEventDispatcher
argument_list|()
argument_list|)
expr_stmt|;
block|}
if|else if
condition|(
name|dstParentFileType
operator|!=
name|SVNFileType
operator|.
name|DIRECTORY
condition|)
block|{
name|SVNErrorMessage
name|err
init|=
name|SVNErrorMessage
operator|.
name|create
argument_list|(
name|SVNErrorCode
operator|.
name|WC_NOT_DIRECTORY
argument_list|,
literal|"Path ''{0}'' is not a directory"
argument_list|,
name|dstParent
argument_list|)
decl_stmt|;
name|SVNErrorManager
operator|.
name|error
argument_list|(
name|err
argument_list|,
name|SVNLogType
operator|.
name|WC
argument_list|)
expr_stmt|;
block|}
block|}
if|if
condition|(
name|isMove
condition|)
block|{
name|moveWCToWC
argument_list|(
name|copyPairs
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|copyWCToWC
argument_list|(
name|copyPairs
argument_list|)
expr_stmt|;
block|}
block|}
specifier|protected
name|void
name|copyDisjointWCToWC
parameter_list|(
name|File
name|nestedWC
parameter_list|)
throws|throws
name|SVNException
block|{
name|SVNFileType
name|nestedWCType
init|=
name|SVNFileType
operator|.
name|getType
argument_list|(
name|nestedWC
argument_list|)
decl_stmt|;
if|if
condition|(
name|nestedWCType
operator|!=
name|SVNFileType
operator|.
name|DIRECTORY
condition|)
block|{
name|SVNErrorMessage
name|err
init|=
name|SVNErrorMessage
operator|.
name|create
argument_list|(
name|SVNErrorCode
operator|.
name|UNSUPPORTED_FEATURE
argument_list|,
literal|"This kind of copy can be run on a root of a disjoint wc directory only"
argument_list|)
decl_stmt|;
name|SVNErrorManager
operator|.
name|error
argument_list|(
name|err
argument_list|,
name|SVNLogType
operator|.
name|WC
argument_list|)
expr_stmt|;
block|}
name|nestedWC
operator|=
operator|new
name|Resource
argument_list|(
name|nestedWC
operator|.
name|getAbsolutePath
argument_list|()
operator|.
name|replace
argument_list|(
name|File
operator|.
name|separatorChar
argument_list|,
literal|'/'
argument_list|)
argument_list|)
expr_stmt|;
name|File
name|nestedWCParent
init|=
name|nestedWC
operator|.
name|getParentFile
argument_list|()
decl_stmt|;
if|if
condition|(
name|nestedWCParent
operator|==
literal|null
condition|)
block|{
name|SVNErrorMessage
name|err
init|=
name|SVNErrorMessage
operator|.
name|create
argument_list|(
name|SVNErrorCode
operator|.
name|UNSUPPORTED_FEATURE
argument_list|,
literal|"{0} seems to be not a disjoint wc since it has no parent"
argument_list|,
name|nestedWC
argument_list|)
decl_stmt|;
name|SVNErrorManager
operator|.
name|error
argument_list|(
name|err
argument_list|,
name|SVNLogType
operator|.
name|WC
argument_list|)
expr_stmt|;
block|}
name|SVNWCAccess
name|parentWCAccess
init|=
name|createWCAccess
argument_list|()
decl_stmt|;
name|SVNWCAccess
name|nestedWCAccess
init|=
name|createWCAccess
argument_list|()
decl_stmt|;
try|try
block|{
name|SVNAdminArea
name|parentArea
init|=
name|parentWCAccess
operator|.
name|open
argument_list|(
name|nestedWCParent
argument_list|,
literal|true
argument_list|,
literal|0
argument_list|)
decl_stmt|;
name|SVNEntry
name|srcEntryInParent
init|=
name|parentWCAccess
operator|.
name|getEntry
argument_list|(
name|nestedWC
argument_list|,
literal|false
argument_list|)
decl_stmt|;
if|if
condition|(
name|srcEntryInParent
operator|!=
literal|null
condition|)
block|{
name|SVNErrorMessage
name|err
init|=
name|SVNErrorMessage
operator|.
name|create
argument_list|(
name|SVNErrorCode
operator|.
name|ENTRY_EXISTS
argument_list|,
literal|"Entry ''{0}'' already exists in parent directory"
argument_list|,
name|nestedWC
operator|.
name|getName
argument_list|()
argument_list|)
decl_stmt|;
name|SVNErrorManager
operator|.
name|error
argument_list|(
name|err
argument_list|,
name|SVNLogType
operator|.
name|WC
argument_list|)
expr_stmt|;
block|}
name|SVNAdminArea
name|nestedArea
init|=
name|nestedWCAccess
operator|.
name|open
argument_list|(
name|nestedWC
argument_list|,
literal|false
argument_list|,
name|SVNWCAccess
operator|.
name|INFINITE_DEPTH
argument_list|)
decl_stmt|;
name|SVNEntry
name|nestedWCThisEntry
init|=
name|nestedWCAccess
operator|.
name|getVersionedEntry
argument_list|(
name|nestedWC
argument_list|,
literal|false
argument_list|)
decl_stmt|;
name|SVNEntry
name|parentThisEntry
init|=
name|parentWCAccess
operator|.
name|getVersionedEntry
argument_list|(
name|nestedWCParent
argument_list|,
literal|false
argument_list|)
decl_stmt|;
comment|// uuids may be identical while it might be absolutely independent repositories.
comment|// subversion uses repos roots comparison for local copies, and uuids comparison for
comment|// operations involving ra access. so, I believe we should act similarly here.
if|if
condition|(
name|nestedWCThisEntry
operator|.
name|getRepositoryRoot
argument_list|()
operator|!=
literal|null
operator|&&
name|parentThisEntry
operator|.
name|getRepositoryRoot
argument_list|()
operator|!=
literal|null
operator|&&
operator|!
name|nestedWCThisEntry
operator|.
name|getRepositoryRoot
argument_list|()
operator|.
name|equals
argument_list|(
name|parentThisEntry
operator|.
name|getRepositoryRoot
argument_list|()
argument_list|)
condition|)
block|{
name|SVNErrorMessage
name|err
init|=
name|SVNErrorMessage
operator|.
name|create
argument_list|(
name|SVNErrorCode
operator|.
name|WC_INVALID_SCHEDULE
argument_list|,
literal|"Cannot copy to ''{0}'', as it is not from repository ''{1}''; it is from ''{2}''"
argument_list|,
operator|new
name|Object
index|[]
block|{
name|nestedWCParent
block|,
name|nestedWCThisEntry
operator|.
name|getRepositoryRootURL
argument_list|()
block|,
name|parentThisEntry
operator|.
name|getRepositoryRootURL
argument_list|()
block|}
argument_list|)
decl_stmt|;
name|SVNErrorManager
operator|.
name|error
argument_list|(
name|err
argument_list|,
name|SVNLogType
operator|.
name|WC
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|parentThisEntry
operator|.
name|isScheduledForDeletion
argument_list|()
condition|)
block|{
name|SVNErrorMessage
name|err
init|=
name|SVNErrorMessage
operator|.
name|create
argument_list|(
name|SVNErrorCode
operator|.
name|WC_INVALID_SCHEDULE
argument_list|,
literal|"Cannot copy to ''{0}'', as it is scheduled for deletion"
argument_list|,
name|nestedWCParent
argument_list|)
decl_stmt|;
name|SVNErrorManager
operator|.
name|error
argument_list|(
name|err
argument_list|,
name|SVNLogType
operator|.
name|WC
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|nestedWCThisEntry
operator|.
name|isScheduledForDeletion
argument_list|()
condition|)
block|{
name|SVNErrorMessage
name|err
init|=
name|SVNErrorMessage
operator|.
name|create
argument_list|(
name|SVNErrorCode
operator|.
name|WC_INVALID_SCHEDULE
argument_list|,
literal|"Cannot copy ''{0}'', as it is scheduled for deletion"
argument_list|,
name|nestedWC
argument_list|)
decl_stmt|;
name|SVNErrorManager
operator|.
name|error
argument_list|(
name|err
argument_list|,
name|SVNLogType
operator|.
name|WC
argument_list|)
expr_stmt|;
block|}
name|SVNURL
name|nestedWCReposRoot
init|=
name|getReposRoot
argument_list|(
name|nestedWC
argument_list|,
literal|null
argument_list|,
name|SVNRevision
operator|.
name|WORKING
argument_list|,
name|nestedArea
argument_list|,
name|nestedWCAccess
argument_list|)
decl_stmt|;
name|String
name|nestedWCPath
init|=
name|getPathRelativeToRoot
argument_list|(
name|nestedWC
argument_list|,
literal|null
argument_list|,
name|nestedWCReposRoot
argument_list|,
name|nestedWCAccess
argument_list|,
literal|null
argument_list|)
decl_stmt|;
name|SVNURL
name|parentReposRoot
init|=
name|getReposRoot
argument_list|(
name|nestedWCParent
argument_list|,
literal|null
argument_list|,
name|SVNRevision
operator|.
name|WORKING
argument_list|,
name|parentArea
argument_list|,
name|parentWCAccess
argument_list|)
decl_stmt|;
name|String
name|parentPath
init|=
name|getPathRelativeToRoot
argument_list|(
name|nestedWCParent
argument_list|,
literal|null
argument_list|,
name|parentReposRoot
argument_list|,
name|parentWCAccess
argument_list|,
literal|null
argument_list|)
decl_stmt|;
if|if
condition|(
name|SVNPathUtil
operator|.
name|isAncestor
argument_list|(
name|nestedWCPath
argument_list|,
name|parentPath
argument_list|)
condition|)
block|{
name|SVNErrorMessage
name|err
init|=
name|SVNErrorMessage
operator|.
name|create
argument_list|(
name|SVNErrorCode
operator|.
name|UNSUPPORTED_FEATURE
argument_list|,
literal|"Cannot copy path ''{0}'' into its own child ''{1}"
argument_list|,
operator|new
name|Object
index|[]
block|{
name|nestedWCPath
block|,
name|parentPath
block|}
argument_list|)
decl_stmt|;
name|SVNErrorManager
operator|.
name|error
argument_list|(
name|err
argument_list|,
name|SVNLogType
operator|.
name|WC
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
operator|(
name|nestedWCThisEntry
operator|.
name|isScheduledForAddition
argument_list|()
operator|&&
operator|!
name|nestedWCThisEntry
operator|.
name|isCopied
argument_list|()
operator|)
operator|||
name|nestedWCThisEntry
operator|.
name|getURL
argument_list|()
operator|==
literal|null
condition|)
block|{
name|SVNErrorMessage
name|err
init|=
name|SVNErrorMessage
operator|.
name|create
argument_list|(
name|SVNErrorCode
operator|.
name|ENTRY_EXISTS
argument_list|,
literal|"Cannot copy or move ''{0}'': it is not in repository yet; "
operator|+
literal|"try committing first"
argument_list|,
name|nestedWC
argument_list|)
decl_stmt|;
name|SVNErrorManager
operator|.
name|error
argument_list|(
name|err
argument_list|,
name|SVNLogType
operator|.
name|WC
argument_list|)
expr_stmt|;
block|}
name|copyDisjointDir
argument_list|(
name|nestedWC
argument_list|,
name|parentWCAccess
argument_list|,
name|nestedWCParent
argument_list|)
expr_stmt|;
name|parentWCAccess
operator|.
name|probeTry
argument_list|(
name|nestedWC
argument_list|,
literal|true
argument_list|,
name|SVNWCAccess
operator|.
name|INFINITE_DEPTH
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
name|parentWCAccess
operator|.
name|close
argument_list|()
expr_stmt|;
name|nestedWCAccess
operator|.
name|close
argument_list|()
expr_stmt|;
name|sleepForTimeStamp
argument_list|()
expr_stmt|;
block|}
block|}
specifier|private
name|void
name|copyDisjointDir
parameter_list|(
name|File
name|nestedWC
parameter_list|,
name|SVNWCAccess
name|parentAccess
parameter_list|,
name|File
name|nestedWCParent
parameter_list|)
throws|throws
name|SVNException
block|{
name|SVNWCClient
name|wcClient
init|=
operator|new
name|SVNWCClient
argument_list|(
operator|(
name|ISVNAuthenticationManager
operator|)
literal|null
argument_list|,
literal|null
argument_list|)
decl_stmt|;
name|wcClient
operator|.
name|setEventHandler
argument_list|(
name|getEventDispatcher
argument_list|()
argument_list|)
expr_stmt|;
name|wcClient
operator|.
name|doCleanup
argument_list|(
name|nestedWC
argument_list|)
expr_stmt|;
name|SVNWCAccess
name|nestedWCAccess
init|=
name|createWCAccess
argument_list|()
decl_stmt|;
name|SVNAdminArea
name|dir
decl_stmt|;
name|String
name|copyFromURL
init|=
literal|null
decl_stmt|;
name|long
name|copyFromRevision
init|=
operator|-
literal|1
decl_stmt|;
try|try
block|{
name|dir
operator|=
name|nestedWCAccess
operator|.
name|open
argument_list|(
name|nestedWC
argument_list|,
literal|true
argument_list|,
name|SVNWCAccess
operator|.
name|INFINITE_DEPTH
argument_list|)
expr_stmt|;
name|SVNEntry
name|nestedWCThisEntry
init|=
name|nestedWCAccess
operator|.
name|getVersionedEntry
argument_list|(
name|nestedWC
argument_list|,
literal|false
argument_list|)
decl_stmt|;
name|postCopyCleanup
argument_list|(
name|dir
argument_list|)
expr_stmt|;
if|if
condition|(
name|nestedWCThisEntry
operator|.
name|isCopied
argument_list|()
condition|)
block|{
if|if
condition|(
name|nestedWCThisEntry
operator|.
name|getCopyFromURL
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|copyFromURL
operator|=
name|nestedWCThisEntry
operator|.
name|getCopyFromURL
argument_list|()
expr_stmt|;
name|copyFromRevision
operator|=
name|nestedWCThisEntry
operator|.
name|getCopyFromRevision
argument_list|()
expr_stmt|;
block|}
name|Map
name|attributes
init|=
operator|new
name|SVNHashMap
argument_list|()
decl_stmt|;
name|attributes
operator|.
name|put
argument_list|(
name|SVNProperty
operator|.
name|URL
argument_list|,
name|copyFromURL
argument_list|)
expr_stmt|;
name|dir
operator|.
name|modifyEntry
argument_list|(
name|dir
operator|.
name|getThisDirName
argument_list|()
argument_list|,
name|attributes
argument_list|,
literal|true
argument_list|,
literal|false
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|copyFromURL
operator|=
name|nestedWCThisEntry
operator|.
name|getURL
argument_list|()
expr_stmt|;
name|copyFromRevision
operator|=
name|nestedWCThisEntry
operator|.
name|getRevision
argument_list|()
expr_stmt|;
block|}
block|}
finally|finally
block|{
name|nestedWCAccess
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
name|SVNWCManager
operator|.
name|add
argument_list|(
name|nestedWC
argument_list|,
name|parentAccess
operator|.
name|getAdminArea
argument_list|(
name|nestedWCParent
argument_list|)
argument_list|,
name|SVNURL
operator|.
name|parseURIEncoded
argument_list|(
name|copyFromURL
argument_list|)
argument_list|,
name|copyFromRevision
argument_list|,
name|SVNDepth
operator|.
name|INFINITY
argument_list|)
expr_stmt|;
block|}
specifier|private
name|void
name|copyWCToWC
parameter_list|(
name|List
name|pairs
parameter_list|)
throws|throws
name|SVNException
block|{
comment|// find common ancestor for all dsts.
name|String
name|dstParentPath
init|=
literal|null
decl_stmt|;
for|for
control|(
name|Iterator
name|ps
init|=
name|pairs
operator|.
name|iterator
argument_list|()
init|;
name|ps
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|CopyPair
name|pair
init|=
operator|(
name|CopyPair
operator|)
name|ps
operator|.
name|next
argument_list|()
decl_stmt|;
name|String
name|dstPath
init|=
name|pair
operator|.
name|myDst
decl_stmt|;
if|if
condition|(
name|dstParentPath
operator|==
literal|null
condition|)
block|{
name|dstParentPath
operator|=
name|SVNPathUtil
operator|.
name|removeTail
argument_list|(
name|pair
operator|.
name|myDst
argument_list|)
expr_stmt|;
block|}
name|dstParentPath
operator|=
name|SVNPathUtil
operator|.
name|getCommonPathAncestor
argument_list|(
name|dstParentPath
argument_list|,
name|dstPath
argument_list|)
expr_stmt|;
block|}
name|SVNWCAccess
name|dstAccess
init|=
name|getWCAccess
argument_list|()
decl_stmt|;
try|try
block|{
name|open
argument_list|(
name|dstAccess
argument_list|,
operator|new
name|Resource
argument_list|(
name|dstParentPath
argument_list|)
argument_list|,
literal|true
argument_list|,
literal|false
argument_list|,
literal|0
argument_list|)
expr_stmt|;
for|for
control|(
name|Iterator
name|ps
init|=
name|pairs
operator|.
name|iterator
argument_list|()
init|;
name|ps
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|CopyPair
name|pair
init|=
operator|(
name|CopyPair
operator|)
name|ps
operator|.
name|next
argument_list|()
decl_stmt|;
name|checkCancelled
argument_list|()
expr_stmt|;
name|SVNWCAccess
name|srcAccess
init|=
literal|null
decl_stmt|;
try|try
block|{
comment|// do real copy.
name|File
name|sourceFile
init|=
operator|new
name|Resource
argument_list|(
name|pair
operator|.
name|mySource
argument_list|)
decl_stmt|;
name|copyFiles
argument_list|(
name|sourceFile
argument_list|,
operator|new
name|Resource
argument_list|(
name|dstParentPath
argument_list|)
argument_list|,
name|dstAccess
argument_list|,
name|pair
operator|.
name|myBaseName
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
if|if
condition|(
name|srcAccess
operator|!=
literal|null
operator|&&
name|srcAccess
operator|!=
name|dstAccess
condition|)
block|{
name|close
argument_list|(
name|srcAccess
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
finally|finally
block|{
name|close
argument_list|(
name|dstAccess
argument_list|)
expr_stmt|;
name|sleepForTimeStamp
argument_list|()
expr_stmt|;
block|}
block|}
specifier|private
name|void
name|moveWCToWC
parameter_list|(
name|List
name|pairs
parameter_list|)
throws|throws
name|SVNException
block|{
for|for
control|(
name|Iterator
name|ps
init|=
name|pairs
operator|.
name|iterator
argument_list|()
init|;
name|ps
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|CopyPair
name|pair
init|=
operator|(
name|CopyPair
operator|)
name|ps
operator|.
name|next
argument_list|()
decl_stmt|;
name|checkCancelled
argument_list|()
expr_stmt|;
name|File
name|srcParent
init|=
operator|new
name|Resource
argument_list|(
name|SVNPathUtil
operator|.
name|removeTail
argument_list|(
name|pair
operator|.
name|mySource
argument_list|)
argument_list|)
decl_stmt|;
name|File
name|dstParent
init|=
operator|new
name|Resource
argument_list|(
name|SVNPathUtil
operator|.
name|removeTail
argument_list|(
name|pair
operator|.
name|myDst
argument_list|)
argument_list|)
decl_stmt|;
name|File
name|sourceFile
init|=
operator|new
name|Resource
argument_list|(
name|pair
operator|.
name|mySource
argument_list|)
decl_stmt|;
name|SVNFileType
name|srcType
init|=
name|SVNFileType
operator|.
name|getType
argument_list|(
name|sourceFile
argument_list|)
decl_stmt|;
name|SVNWCAccess
name|srcAccess
init|=
name|createWCAccess
argument_list|()
decl_stmt|;
name|SVNWCAccess
name|dstAccess
init|=
literal|null
decl_stmt|;
try|try
block|{
name|srcAccess
operator|.
name|open
argument_list|(
name|srcParent
argument_list|,
literal|true
argument_list|,
name|srcType
operator|==
name|SVNFileType
operator|.
name|DIRECTORY
condition|?
operator|-
literal|1
else|:
literal|0
argument_list|)
expr_stmt|;
if|if
condition|(
name|srcParent
operator|.
name|equals
argument_list|(
name|dstParent
argument_list|)
condition|)
block|{
name|dstAccess
operator|=
name|srcAccess
expr_stmt|;
block|}
else|else
block|{
name|String
name|srcParentPath
init|=
name|srcParent
operator|.
name|getAbsolutePath
argument_list|()
operator|.
name|replace
argument_list|(
name|File
operator|.
name|separatorChar
argument_list|,
literal|'/'
argument_list|)
decl_stmt|;
name|srcParentPath
operator|=
name|SVNPathUtil
operator|.
name|validateFilePath
argument_list|(
name|srcParentPath
argument_list|)
expr_stmt|;
name|String
name|dstParentPath
init|=
name|dstParent
operator|.
name|getAbsolutePath
argument_list|()
operator|.
name|replace
argument_list|(
name|File
operator|.
name|separatorChar
argument_list|,
literal|'/'
argument_list|)
decl_stmt|;
name|dstParentPath
operator|=
name|SVNPathUtil
operator|.
name|validateFilePath
argument_list|(
name|dstParentPath
argument_list|)
expr_stmt|;
if|if
condition|(
name|srcType
operator|==
name|SVNFileType
operator|.
name|DIRECTORY
operator|&&
name|SVNPathUtil
operator|.
name|isAncestor
argument_list|(
name|srcParentPath
argument_list|,
name|dstParentPath
argument_list|)
condition|)
block|{
name|dstAccess
operator|=
name|srcAccess
expr_stmt|;
if|if
condition|(
name|dstAccess
operator|.
name|getAdminArea
argument_list|(
name|dstParent
argument_list|)
operator|==
literal|null
condition|)
block|{
name|dstAccess
operator|.
name|open
argument_list|(
name|dstParent
argument_list|,
literal|true
argument_list|,
literal|0
argument_list|)
expr_stmt|;
block|}
block|}
else|else
block|{
name|dstAccess
operator|=
name|createWCAccess
argument_list|()
expr_stmt|;
name|dstAccess
operator|.
name|open
argument_list|(
name|dstParent
argument_list|,
literal|true
argument_list|,
literal|0
argument_list|)
expr_stmt|;
block|}
block|}
name|copyFiles
argument_list|(
name|sourceFile
argument_list|,
name|dstParent
argument_list|,
name|dstAccess
argument_list|,
name|pair
operator|.
name|myBaseName
argument_list|)
expr_stmt|;
comment|// delete src.
name|SVNWCManager
operator|.
name|delete
argument_list|(
name|srcAccess
argument_list|,
name|srcAccess
operator|.
name|getAdminArea
argument_list|(
name|srcParent
argument_list|)
argument_list|,
name|sourceFile
argument_list|,
literal|true
argument_list|,
literal|true
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
if|if
condition|(
name|dstAccess
operator|!=
literal|null
operator|&&
name|dstAccess
operator|!=
name|srcAccess
condition|)
block|{
name|dstAccess
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
name|srcAccess
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
block|}
name|sleepForTimeStamp
argument_list|()
expr_stmt|;
block|}
specifier|private
name|void
name|copyFiles
parameter_list|(
name|File
name|src
parameter_list|,
name|File
name|dstParent
parameter_list|,
name|SVNWCAccess
name|dstAccess
parameter_list|,
name|String
name|dstName
parameter_list|)
throws|throws
name|SVNException
block|{
name|SVNWCAccess
name|srcAccess
init|=
name|getWCAccess
argument_list|()
decl_stmt|;
try|try
block|{
name|probeOpen
argument_list|(
name|srcAccess
argument_list|,
name|src
argument_list|,
literal|false
argument_list|,
operator|-
literal|1
argument_list|)
expr_stmt|;
name|SVNEntry
name|dstEntry
init|=
name|dstAccess
operator|.
name|getVersionedEntry
argument_list|(
name|dstParent
argument_list|,
literal|false
argument_list|)
decl_stmt|;
name|SVNEntry
name|srcEntry
init|=
name|srcAccess
operator|.
name|getVersionedEntry
argument_list|(
name|src
argument_list|,
literal|false
argument_list|)
decl_stmt|;
if|if
condition|(
name|srcEntry
operator|.
name|getRepositoryRoot
argument_list|()
operator|!=
literal|null
operator|&&
name|dstEntry
operator|.
name|getRepositoryRoot
argument_list|()
operator|!=
literal|null
operator|&&
operator|!
name|srcEntry
operator|.
name|getRepositoryRoot
argument_list|()
operator|.
name|equals
argument_list|(
name|dstEntry
operator|.
name|getRepositoryRoot
argument_list|()
argument_list|)
condition|)
block|{
name|SVNErrorMessage
name|err
init|=
name|SVNErrorMessage
operator|.
name|create
argument_list|(
name|SVNErrorCode
operator|.
name|WC_INVALID_SCHEDULE
argument_list|,
literal|"Cannot copy to ''{0}'', as it is not from repository ''{1}''; it is from ''{2}''"
argument_list|,
operator|new
name|Object
index|[]
block|{
name|dstParent
block|,
name|srcEntry
operator|.
name|getRepositoryRootURL
argument_list|()
block|,
name|dstEntry
operator|.
name|getRepositoryRootURL
argument_list|()
block|}
argument_list|)
decl_stmt|;
name|SVNErrorManager
operator|.
name|error
argument_list|(
name|err
argument_list|,
name|SVNLogType
operator|.
name|WC
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|dstEntry
operator|.
name|isScheduledForDeletion
argument_list|()
condition|)
block|{
name|SVNErrorMessage
name|err
init|=
name|SVNErrorMessage
operator|.
name|create
argument_list|(
name|SVNErrorCode
operator|.
name|WC_INVALID_SCHEDULE
argument_list|,
literal|"Cannot copy to ''{0}'', as it is scheduled for deletion"
argument_list|,
name|dstParent
argument_list|)
decl_stmt|;
name|SVNErrorManager
operator|.
name|error
argument_list|(
name|err
argument_list|,
name|SVNLogType
operator|.
name|WC
argument_list|)
expr_stmt|;
block|}
name|SVNFileType
name|srcType
init|=
name|SVNFileType
operator|.
name|getType
argument_list|(
name|src
argument_list|)
decl_stmt|;
if|if
condition|(
name|srcType
operator|==
name|SVNFileType
operator|.
name|FILE
operator|||
name|srcType
operator|==
name|SVNFileType
operator|.
name|SYMLINK
condition|)
block|{
if|if
condition|(
name|srcEntry
operator|.
name|isScheduledForAddition
argument_list|()
operator|&&
operator|!
name|srcEntry
operator|.
name|isCopied
argument_list|()
condition|)
block|{
name|copyAddedFileAdm
argument_list|(
name|src
argument_list|,
name|srcAccess
argument_list|,
name|dstAccess
argument_list|,
name|dstParent
argument_list|,
name|dstName
argument_list|,
literal|true
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|copyFileAdm
argument_list|(
name|src
argument_list|,
name|srcAccess
argument_list|,
name|dstParent
argument_list|,
name|dstAccess
argument_list|,
name|dstName
argument_list|)
expr_stmt|;
block|}
block|}
if|else if
condition|(
name|srcType
operator|==
name|SVNFileType
operator|.
name|DIRECTORY
condition|)
block|{
if|if
condition|(
name|srcEntry
operator|.
name|isScheduledForAddition
argument_list|()
operator|&&
operator|!
name|srcEntry
operator|.
name|isCopied
argument_list|()
condition|)
block|{
name|copyAddedDirAdm
argument_list|(
name|src
argument_list|,
name|srcAccess
argument_list|,
name|dstParent
argument_list|,
name|dstAccess
argument_list|,
name|dstName
argument_list|,
literal|true
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|copyDirAdm
argument_list|(
name|src
argument_list|,
name|srcAccess
argument_list|,
name|dstAccess
argument_list|,
name|dstParent
argument_list|,
name|dstName
argument_list|)
expr_stmt|;
block|}
block|}
block|}
finally|finally
block|{
name|close
argument_list|(
name|srcAccess
argument_list|)
expr_stmt|;
block|}
block|}
specifier|private
name|void
name|copyFileAdm
parameter_list|(
name|File
name|src
parameter_list|,
name|SVNWCAccess
name|srcAccess
parameter_list|,
name|File
name|dstParent
parameter_list|,
name|SVNWCAccess
name|dstAccess
parameter_list|,
name|String
name|dstName
parameter_list|)
throws|throws
name|SVNException
block|{
name|File
name|dst
init|=
operator|new
name|Resource
argument_list|(
name|dstParent
argument_list|,
name|dstName
argument_list|)
decl_stmt|;
name|SVNFileType
name|dstType
init|=
name|SVNFileType
operator|.
name|getType
argument_list|(
name|dst
argument_list|)
decl_stmt|;
if|if
condition|(
name|dstType
operator|!=
name|SVNFileType
operator|.
name|NONE
condition|)
block|{
name|SVNErrorMessage
name|err
init|=
name|SVNErrorMessage
operator|.
name|create
argument_list|(
name|SVNErrorCode
operator|.
name|ENTRY_EXISTS
argument_list|,
literal|"''{0}'' already exists and is in the way"
argument_list|,
name|dst
argument_list|)
decl_stmt|;
name|SVNErrorManager
operator|.
name|error
argument_list|(
name|err
argument_list|,
name|SVNLogType
operator|.
name|WC
argument_list|)
expr_stmt|;
block|}
name|SVNEntry
name|dstEntry
init|=
name|dstAccess
operator|.
name|getEntry
argument_list|(
name|dst
argument_list|,
literal|false
argument_list|)
decl_stmt|;
if|if
condition|(
name|dstEntry
operator|!=
literal|null
operator|&&
operator|!
name|dstEntry
operator|.
name|isScheduledForDeletion
argument_list|()
condition|)
block|{
name|SVNErrorMessage
name|err
init|=
name|SVNErrorMessage
operator|.
name|create
argument_list|(
name|SVNErrorCode
operator|.
name|ENTRY_EXISTS
argument_list|,
literal|"There is already a versioned item ''{0}''"
argument_list|,
name|dst
argument_list|)
decl_stmt|;
name|SVNErrorManager
operator|.
name|error
argument_list|(
name|err
argument_list|,
name|SVNLogType
operator|.
name|WC
argument_list|)
expr_stmt|;
block|}
name|SVNEntry
name|srcEntry
init|=
name|srcAccess
operator|.
name|getVersionedEntry
argument_list|(
name|src
argument_list|,
literal|false
argument_list|)
decl_stmt|;
if|if
condition|(
operator|(
name|srcEntry
operator|.
name|isScheduledForAddition
argument_list|()
operator|&&
operator|!
name|srcEntry
operator|.
name|isCopied
argument_list|()
operator|)
operator|||
name|srcEntry
operator|.
name|getURL
argument_list|()
operator|==
literal|null
condition|)
block|{
name|SVNErrorMessage
name|err
init|=
name|SVNErrorMessage
operator|.
name|create
argument_list|(
name|SVNErrorCode
operator|.
name|ENTRY_EXISTS
argument_list|,
literal|"Cannot copy or move ''{0}'': it is not in repository yet; "
operator|+
literal|"try committing first"
argument_list|,
name|src
argument_list|)
decl_stmt|;
name|SVNErrorManager
operator|.
name|error
argument_list|(
name|err
argument_list|,
name|SVNLogType
operator|.
name|WC
argument_list|)
expr_stmt|;
block|}
name|String
name|copyFromURL
decl_stmt|;
name|long
name|copyFromRevision
decl_stmt|;
name|SVNAdminArea
name|srcDir
init|=
name|srcAccess
operator|.
name|getAdminArea
argument_list|(
name|src
operator|.
name|getParentFile
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|srcEntry
operator|.
name|isCopied
argument_list|()
condition|)
block|{
comment|// get cf info - one of the parents has to keep that.
name|SVNLocationEntry
name|location
init|=
name|determineCopyFromInfo
argument_list|(
name|src
argument_list|,
name|srcAccess
argument_list|,
name|srcEntry
argument_list|,
name|dstEntry
argument_list|)
decl_stmt|;
name|copyFromURL
operator|=
name|location
operator|.
name|getPath
argument_list|()
expr_stmt|;
name|copyFromRevision
operator|=
name|location
operator|.
name|getRevision
argument_list|()
expr_stmt|;
block|}
else|else
block|{
name|copyFromURL
operator|=
name|srcEntry
operator|.
name|getURL
argument_list|()
expr_stmt|;
name|copyFromRevision
operator|=
name|srcEntry
operator|.
name|getRevision
argument_list|()
expr_stmt|;
block|}
comment|// copy base file.
name|File
name|srcBaseFile
init|=
operator|new
name|Resource
argument_list|(
name|src
operator|.
name|getParentFile
argument_list|()
argument_list|,
name|SVNAdminUtil
operator|.
name|getTextBasePath
argument_list|(
name|src
operator|.
name|getName
argument_list|()
argument_list|,
literal|false
argument_list|)
argument_list|)
decl_stmt|;
name|File
name|dstBaseFile
init|=
operator|new
name|Resource
argument_list|(
name|dstParent
argument_list|,
name|SVNAdminUtil
operator|.
name|getTextBasePath
argument_list|(
name|dstName
argument_list|,
literal|true
argument_list|)
argument_list|)
decl_stmt|;
name|SVNFileUtil
operator|.
name|copyFile
argument_list|(
name|srcBaseFile
argument_list|,
name|dstBaseFile
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|SVNVersionedProperties
name|srcBaseProps
init|=
name|srcDir
operator|.
name|getBaseProperties
argument_list|(
name|src
operator|.
name|getName
argument_list|()
argument_list|)
decl_stmt|;
name|SVNVersionedProperties
name|srcWorkingProps
init|=
name|srcDir
operator|.
name|getProperties
argument_list|(
name|src
operator|.
name|getName
argument_list|()
argument_list|)
decl_stmt|;
comment|// copy wc file.
name|SVNAdminArea
name|dstDir
init|=
name|dstAccess
operator|.
name|getAdminArea
argument_list|(
name|dstParent
argument_list|)
decl_stmt|;
name|File
name|tmpWCFile
init|=
name|SVNAdminUtil
operator|.
name|createTmpFile
argument_list|(
name|dstDir
argument_list|)
decl_stmt|;
if|if
condition|(
name|srcWorkingProps
operator|.
name|getPropertyValue
argument_list|(
name|SVNProperty
operator|.
name|SPECIAL
argument_list|)
operator|!=
literal|null
condition|)
block|{
comment|// TODO create symlink there?
name|SVNFileUtil
operator|.
name|copyFile
argument_list|(
name|src
argument_list|,
name|tmpWCFile
argument_list|,
literal|false
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|SVNFileUtil
operator|.
name|copyFile
argument_list|(
name|src
argument_list|,
name|tmpWCFile
argument_list|,
literal|false
argument_list|)
expr_stmt|;
block|}
name|SVNWCManager
operator|.
name|addRepositoryFile
argument_list|(
name|dstDir
argument_list|,
name|dstName
argument_list|,
name|tmpWCFile
argument_list|,
literal|null
argument_list|,
name|srcBaseProps
operator|.
name|asMap
argument_list|()
argument_list|,
name|srcWorkingProps
operator|.
name|asMap
argument_list|()
argument_list|,
name|copyFromURL
argument_list|,
name|copyFromRevision
argument_list|)
expr_stmt|;
name|SVNEvent
name|event
init|=
name|SVNEventFactory
operator|.
name|createSVNEvent
argument_list|(
name|dst
argument_list|,
name|SVNNodeKind
operator|.
name|FILE
argument_list|,
literal|null
argument_list|,
name|SVNRepository
operator|.
name|INVALID_REVISION
argument_list|,
name|SVNEventAction
operator|.
name|ADD
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|)
decl_stmt|;
name|dstAccess
operator|.
name|handleEvent
argument_list|(
name|event
argument_list|)
expr_stmt|;
block|}
specifier|private
name|void
name|copyAddedFileAdm
parameter_list|(
name|File
name|src
parameter_list|,
name|SVNWCAccess
name|srcAccess
parameter_list|,
name|SVNWCAccess
name|dstAccess
parameter_list|,
name|File
name|dstParent
parameter_list|,
name|String
name|dstName
parameter_list|,
name|boolean
name|isAdded
parameter_list|)
throws|throws
name|SVNException
block|{
name|File
name|dst
init|=
operator|new
name|Resource
argument_list|(
name|dstParent
argument_list|,
name|dstName
argument_list|)
decl_stmt|;
name|SVNFileUtil
operator|.
name|copyFile
argument_list|(
name|src
argument_list|,
name|dst
argument_list|,
literal|false
argument_list|)
expr_stmt|;
if|if
condition|(
name|isAdded
condition|)
block|{
name|SVNWCManager
operator|.
name|add
argument_list|(
name|dst
argument_list|,
name|dstAccess
operator|.
name|getAdminArea
argument_list|(
name|dstParent
argument_list|)
argument_list|,
literal|null
argument_list|,
name|SVNRepository
operator|.
name|INVALID_REVISION
argument_list|,
name|SVNDepth
operator|.
name|INFINITY
argument_list|)
expr_stmt|;
name|copyProps
argument_list|(
name|src
argument_list|,
name|dst
argument_list|,
name|srcAccess
argument_list|,
name|dstAccess
argument_list|)
expr_stmt|;
block|}
block|}
specifier|private
name|void
name|copyDirAdm
parameter_list|(
name|File
name|src
parameter_list|,
name|SVNWCAccess
name|srcAccess
parameter_list|,
name|SVNWCAccess
name|dstAccess
parameter_list|,
name|File
name|dstParent
parameter_list|,
name|String
name|dstName
parameter_list|)
throws|throws
name|SVNException
block|{
name|File
name|dst
init|=
operator|new
name|Resource
argument_list|(
name|dstParent
argument_list|,
name|dstName
argument_list|)
decl_stmt|;
name|SVNEntry
name|srcEntry
init|=
name|srcAccess
operator|.
name|getVersionedEntry
argument_list|(
name|src
argument_list|,
literal|false
argument_list|)
decl_stmt|;
if|if
condition|(
operator|(
name|srcEntry
operator|.
name|isScheduledForAddition
argument_list|()
operator|&&
operator|!
name|srcEntry
operator|.
name|isCopied
argument_list|()
operator|)
operator|||
name|srcEntry
operator|.
name|getURL
argument_list|()
operator|==
literal|null
condition|)
block|{
name|SVNErrorMessage
name|err
init|=
name|SVNErrorMessage
operator|.
name|create
argument_list|(
name|SVNErrorCode
operator|.
name|ENTRY_EXISTS
argument_list|,
literal|"Cannot copy or move ''{0}'': it is not in repository yet; "
operator|+
literal|"try committing first"
argument_list|,
name|src
argument_list|)
decl_stmt|;
name|SVNErrorManager
operator|.
name|error
argument_list|(
name|err
argument_list|,
name|SVNLogType
operator|.
name|WC
argument_list|)
expr_stmt|;
block|}
name|SVNFileUtil
operator|.
name|copyDirectory
argument_list|(
name|src
argument_list|,
name|dst
argument_list|,
literal|true
argument_list|,
name|getEventDispatcher
argument_list|()
argument_list|)
expr_stmt|;
name|SVNWCClient
name|wcClient
init|=
operator|new
name|SVNWCClient
argument_list|(
operator|(
name|ISVNAuthenticationManager
operator|)
literal|null
argument_list|,
literal|null
argument_list|)
decl_stmt|;
name|wcClient
operator|.
name|setEventHandler
argument_list|(
name|getEventDispatcher
argument_list|()
argument_list|)
expr_stmt|;
name|wcClient
operator|.
name|doCleanup
argument_list|(
name|dst
argument_list|)
expr_stmt|;
name|SVNWCAccess
name|tgtAccess
init|=
name|getWCAccess
argument_list|()
decl_stmt|;
name|SVNAdminArea
name|dir
decl_stmt|;
name|String
name|copyFromURL
init|=
literal|null
decl_stmt|;
name|long
name|copyFromRevision
init|=
operator|-
literal|1
decl_stmt|;
try|try
block|{
name|dir
operator|=
name|open
argument_list|(
name|tgtAccess
argument_list|,
name|dst
argument_list|,
literal|true
argument_list|,
literal|false
argument_list|,
operator|-
literal|1
argument_list|)
expr_stmt|;
name|postCopyCleanup
argument_list|(
name|dir
argument_list|)
expr_stmt|;
if|if
condition|(
name|srcEntry
operator|.
name|isCopied
argument_list|()
condition|)
block|{
name|SVNEntry
name|dstEntry
init|=
name|dstAccess
operator|.
name|getEntry
argument_list|(
name|dst
argument_list|,
literal|false
argument_list|)
decl_stmt|;
name|SVNLocationEntry
name|info
init|=
name|determineCopyFromInfo
argument_list|(
name|src
argument_list|,
name|srcAccess
argument_list|,
name|srcEntry
argument_list|,
name|dstEntry
argument_list|)
decl_stmt|;
name|copyFromURL
operator|=
name|info
operator|.
name|getPath
argument_list|()
expr_stmt|;
name|copyFromRevision
operator|=
name|info
operator|.
name|getRevision
argument_list|()
expr_stmt|;
name|Map
name|attributes
init|=
operator|new
name|SVNHashMap
argument_list|()
decl_stmt|;
name|attributes
operator|.
name|put
argument_list|(
name|SVNProperty
operator|.
name|URL
argument_list|,
name|copyFromURL
argument_list|)
expr_stmt|;
name|dir
operator|.
name|modifyEntry
argument_list|(
name|dir
operator|.
name|getThisDirName
argument_list|()
argument_list|,
name|attributes
argument_list|,
literal|true
argument_list|,
literal|false
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|copyFromURL
operator|=
name|srcEntry
operator|.
name|getURL
argument_list|()
expr_stmt|;
name|copyFromRevision
operator|=
name|srcEntry
operator|.
name|getRevision
argument_list|()
expr_stmt|;
block|}
block|}
finally|finally
block|{
name|close
argument_list|(
name|tgtAccess
argument_list|)
expr_stmt|;
block|}
name|SVNWCManager
operator|.
name|add
argument_list|(
name|dst
argument_list|,
name|dstAccess
operator|.
name|getAdminArea
argument_list|(
name|dstParent
argument_list|)
argument_list|,
name|SVNURL
operator|.
name|parseURIEncoded
argument_list|(
name|copyFromURL
argument_list|)
argument_list|,
name|copyFromRevision
argument_list|,
name|SVNDepth
operator|.
name|INFINITY
argument_list|)
expr_stmt|;
block|}
specifier|private
name|void
name|copyAddedDirAdm
parameter_list|(
name|File
name|src
parameter_list|,
name|SVNWCAccess
name|srcAccess
parameter_list|,
name|File
name|dstParent
parameter_list|,
name|SVNWCAccess
name|dstParentAccess
parameter_list|,
name|String
name|dstName
parameter_list|,
name|boolean
name|isAdded
parameter_list|)
throws|throws
name|SVNException
block|{
name|File
name|dst
init|=
operator|new
name|Resource
argument_list|(
name|dstParent
argument_list|,
name|dstName
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|isAdded
condition|)
block|{
name|SVNFileUtil
operator|.
name|copyDirectory
argument_list|(
name|src
argument_list|,
name|dst
argument_list|,
literal|true
argument_list|,
name|getEventDispatcher
argument_list|()
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|checkCancelled
argument_list|()
expr_stmt|;
name|dst
operator|.
name|mkdirs
argument_list|()
expr_stmt|;
name|SVNWCManager
operator|.
name|add
argument_list|(
name|dst
argument_list|,
name|dstParentAccess
operator|.
name|getAdminArea
argument_list|(
name|dstParent
argument_list|)
argument_list|,
literal|null
argument_list|,
name|SVNRepository
operator|.
name|INVALID_REVISION
argument_list|,
name|SVNDepth
operator|.
name|INFINITY
argument_list|)
expr_stmt|;
name|copyProps
argument_list|(
name|src
argument_list|,
name|dst
argument_list|,
name|srcAccess
argument_list|,
name|dstParentAccess
argument_list|)
expr_stmt|;
name|SVNAdminArea
name|srcChildArea
init|=
name|srcAccess
operator|.
name|retrieve
argument_list|(
name|src
argument_list|)
decl_stmt|;
name|File
index|[]
name|entries
init|=
name|SVNFileListUtil
operator|.
name|listFiles
argument_list|(
name|src
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|entries
operator|!=
literal|null
operator|&&
name|i
operator|<
name|entries
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
name|checkCancelled
argument_list|()
expr_stmt|;
name|File
name|fsEntry
init|=
name|entries
index|[
name|i
index|]
decl_stmt|;
name|String
name|name
init|=
name|fsEntry
operator|.
name|getName
argument_list|()
decl_stmt|;
if|if
condition|(
name|SVNFileUtil
operator|.
name|getAdminDirectoryName
argument_list|()
operator|.
name|equals
argument_list|(
name|name
argument_list|)
condition|)
block|{
continue|continue;
block|}
name|SVNEntry
name|entry
init|=
name|srcChildArea
operator|.
name|getEntry
argument_list|(
name|name
argument_list|,
literal|true
argument_list|)
decl_stmt|;
if|if
condition|(
name|fsEntry
operator|.
name|isDirectory
argument_list|()
condition|)
block|{
name|copyAddedDirAdm
argument_list|(
name|fsEntry
argument_list|,
name|srcAccess
argument_list|,
name|dst
argument_list|,
name|dstParentAccess
argument_list|,
name|name
argument_list|,
name|entry
operator|!=
literal|null
argument_list|)
expr_stmt|;
block|}
if|else if
condition|(
name|fsEntry
operator|.
name|isFile
argument_list|()
condition|)
block|{
name|copyAddedFileAdm
argument_list|(
name|fsEntry
argument_list|,
name|srcAccess
argument_list|,
name|dstParentAccess
argument_list|,
name|dst
argument_list|,
name|name
argument_list|,
name|entry
operator|!=
literal|null
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
specifier|private
name|void
name|copyProps
parameter_list|(
name|File
name|src
parameter_list|,
name|File
name|dst
parameter_list|,
name|SVNWCAccess
name|srcAccess
parameter_list|,
name|SVNWCAccess
name|dstAccess
parameter_list|)
throws|throws
name|SVNException
block|{
name|SVNEntry
name|srcEntry
init|=
name|srcAccess
operator|.
name|getVersionedEntry
argument_list|(
name|src
argument_list|,
literal|false
argument_list|)
decl_stmt|;
name|SVNAdminArea
name|srcArea
init|=
name|srcEntry
operator|.
name|getAdminArea
argument_list|()
decl_stmt|;
name|SVNVersionedProperties
name|srcProps
init|=
name|srcArea
operator|.
name|getProperties
argument_list|(
name|srcEntry
operator|.
name|getName
argument_list|()
argument_list|)
decl_stmt|;
name|Collection
name|propNames
init|=
name|srcProps
operator|.
name|getPropertyNames
argument_list|(
literal|null
argument_list|)
decl_stmt|;
for|for
control|(
name|Iterator
name|propNamesIter
init|=
name|propNames
operator|.
name|iterator
argument_list|()
init|;
name|propNamesIter
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|String
name|propName
init|=
operator|(
name|String
operator|)
name|propNamesIter
operator|.
name|next
argument_list|()
decl_stmt|;
name|SVNPropertyValue
name|propValue
init|=
name|srcProps
operator|.
name|getPropertyValue
argument_list|(
name|propName
argument_list|)
decl_stmt|;
name|SVNPropertiesManager
operator|.
name|setProperty
argument_list|(
name|dstAccess
argument_list|,
name|dst
argument_list|,
name|propName
argument_list|,
name|propValue
argument_list|,
literal|false
argument_list|)
expr_stmt|;
block|}
block|}
specifier|private
name|SVNLocationEntry
name|determineCopyFromInfo
parameter_list|(
name|File
name|src
parameter_list|,
name|SVNWCAccess
name|srcAccess
parameter_list|,
name|SVNEntry
name|srcEntry
parameter_list|,
name|SVNEntry
name|dstEntry
parameter_list|)
throws|throws
name|SVNException
block|{
name|String
name|url
decl_stmt|;
name|long
name|rev
decl_stmt|;
if|if
condition|(
name|srcEntry
operator|.
name|getCopyFromURL
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|url
operator|=
name|srcEntry
operator|.
name|getCopyFromURL
argument_list|()
expr_stmt|;
name|rev
operator|=
name|srcEntry
operator|.
name|getCopyFromRevision
argument_list|()
expr_stmt|;
block|}
else|else
block|{
name|SVNLocationEntry
name|info
init|=
name|getCopyFromInfoFromParent
argument_list|(
name|src
argument_list|,
name|srcAccess
argument_list|)
decl_stmt|;
name|url
operator|=
name|info
operator|.
name|getPath
argument_list|()
expr_stmt|;
name|rev
operator|=
name|info
operator|.
name|getRevision
argument_list|()
expr_stmt|;
block|}
if|if
condition|(
name|dstEntry
operator|!=
literal|null
operator|&&
name|rev
operator|==
name|dstEntry
operator|.
name|getRevision
argument_list|()
operator|&&
name|url
operator|.
name|equals
argument_list|(
name|dstEntry
operator|.
name|getCopyFromURL
argument_list|()
argument_list|)
condition|)
block|{
name|url
operator|=
literal|null
expr_stmt|;
name|rev
operator|=
operator|-
literal|1
expr_stmt|;
block|}
return|return
operator|new
name|SVNLocationEntry
argument_list|(
name|rev
argument_list|,
name|url
argument_list|)
return|;
block|}
specifier|private
name|SVNLocationEntry
name|getCopyFromInfoFromParent
parameter_list|(
name|File
name|file
parameter_list|,
name|SVNWCAccess
name|access
parameter_list|)
throws|throws
name|SVNException
block|{
name|File
name|parent
init|=
name|file
operator|.
name|getParentFile
argument_list|()
decl_stmt|;
name|String
name|rest
init|=
name|file
operator|.
name|getName
argument_list|()
decl_stmt|;
name|String
name|url
init|=
literal|null
decl_stmt|;
name|long
name|rev
init|=
operator|-
literal|1
decl_stmt|;
while|while
condition|(
name|parent
operator|!=
literal|null
operator|&&
name|url
operator|==
literal|null
condition|)
block|{
try|try
block|{
name|SVNEntry
name|entry
init|=
name|access
operator|.
name|getVersionedEntry
argument_list|(
name|parent
argument_list|,
literal|false
argument_list|)
decl_stmt|;
name|url
operator|=
name|entry
operator|.
name|getCopyFromURL
argument_list|()
expr_stmt|;
name|rev
operator|=
name|entry
operator|.
name|getCopyFromRevision
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|SVNException
name|e
parameter_list|)
block|{
name|SVNWCAccess
name|wcAccess
init|=
name|SVNWCAccess
operator|.
name|newInstance
argument_list|(
literal|null
argument_list|)
decl_stmt|;
try|try
block|{
name|probeOpen
argument_list|(
name|wcAccess
argument_list|,
name|parent
argument_list|,
literal|false
argument_list|,
operator|-
literal|1
argument_list|)
expr_stmt|;
name|SVNEntry
name|entry
init|=
name|wcAccess
operator|.
name|getVersionedEntry
argument_list|(
name|parent
argument_list|,
literal|false
argument_list|)
decl_stmt|;
name|url
operator|=
name|entry
operator|.
name|getCopyFromURL
argument_list|()
expr_stmt|;
name|rev
operator|=
name|entry
operator|.
name|getCopyFromRevision
argument_list|()
expr_stmt|;
block|}
finally|finally
block|{
name|close
argument_list|(
name|wcAccess
argument_list|)
expr_stmt|;
block|}
block|}
if|if
condition|(
name|url
operator|!=
literal|null
condition|)
block|{
name|url
operator|=
name|SVNPathUtil
operator|.
name|append
argument_list|(
name|url
argument_list|,
name|SVNEncodingUtil
operator|.
name|uriEncode
argument_list|(
name|rest
argument_list|)
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|rest
operator|=
name|SVNPathUtil
operator|.
name|append
argument_list|(
name|parent
operator|.
name|getName
argument_list|()
argument_list|,
name|rest
argument_list|)
expr_stmt|;
name|parent
operator|=
name|parent
operator|.
name|getParentFile
argument_list|()
expr_stmt|;
block|}
block|}
return|return
operator|new
name|SVNLocationEntry
argument_list|(
name|rev
argument_list|,
name|url
argument_list|)
return|;
block|}
specifier|private
name|void
name|addLocalParents
parameter_list|(
name|File
name|path
parameter_list|,
name|ISVNEventHandler
name|handler
parameter_list|)
throws|throws
name|SVNException
block|{
name|boolean
name|created
init|=
name|path
operator|.
name|mkdirs
argument_list|()
decl_stmt|;
name|SVNWCClient
name|wcClient
init|=
operator|new
name|SVNWCClient
argument_list|(
operator|(
name|ISVNAuthenticationManager
operator|)
literal|null
argument_list|,
literal|null
argument_list|)
decl_stmt|;
try|try
block|{
name|wcClient
operator|.
name|setEventHandler
argument_list|(
name|handler
argument_list|)
expr_stmt|;
name|wcClient
operator|.
name|doAdd
argument_list|(
name|path
argument_list|,
literal|false
argument_list|,
literal|false
argument_list|,
literal|true
argument_list|,
name|SVNDepth
operator|.
name|EMPTY
argument_list|,
literal|true
argument_list|,
literal|true
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|SVNException
name|e
parameter_list|)
block|{
if|if
condition|(
name|created
condition|)
block|{
name|SVNFileUtil
operator|.
name|deleteAll
argument_list|(
name|path
argument_list|,
literal|true
argument_list|)
expr_stmt|;
block|}
throw|throw
name|e
throw|;
block|}
block|}
specifier|private
name|void
name|extendWCMergeInfo
parameter_list|(
name|File
name|path
parameter_list|,
name|SVNEntry
name|entry
parameter_list|,
name|Map
name|mergeInfo
parameter_list|,
name|SVNWCAccess
name|access
parameter_list|)
throws|throws
name|SVNException
block|{
name|Map
name|wcMergeInfo
init|=
name|SVNPropertiesManager
operator|.
name|parseMergeInfo
argument_list|(
name|path
argument_list|,
name|entry
argument_list|,
literal|false
argument_list|)
decl_stmt|;
if|if
condition|(
name|wcMergeInfo
operator|!=
literal|null
operator|&&
name|mergeInfo
operator|!=
literal|null
condition|)
block|{
name|wcMergeInfo
operator|=
name|SVNMergeInfoUtil
operator|.
name|mergeMergeInfos
argument_list|(
name|wcMergeInfo
argument_list|,
name|mergeInfo
argument_list|)
expr_stmt|;
block|}
if|else if
condition|(
name|wcMergeInfo
operator|==
literal|null
condition|)
block|{
name|wcMergeInfo
operator|=
name|mergeInfo
expr_stmt|;
block|}
name|SVNPropertiesManager
operator|.
name|recordWCMergeInfo
argument_list|(
name|path
argument_list|,
name|wcMergeInfo
argument_list|,
name|access
argument_list|)
expr_stmt|;
block|}
specifier|private
name|Map
name|calculateTargetMergeInfo
parameter_list|(
name|File
name|srcFile
parameter_list|,
name|SVNWCAccess
name|access
parameter_list|,
name|SVNURL
name|srcURL
parameter_list|,
name|long
name|srcRevision
parameter_list|,
name|SVNRepository
name|repository
parameter_list|,
name|boolean
name|noReposAccess
parameter_list|)
throws|throws
name|SVNException
block|{
name|boolean
name|isLocallyAdded
init|=
literal|false
decl_stmt|;
name|SVNEntry
name|entry
init|=
literal|null
decl_stmt|;
name|SVNURL
name|url
init|=
literal|null
decl_stmt|;
if|if
condition|(
name|access
operator|!=
literal|null
condition|)
block|{
name|entry
operator|=
name|access
operator|.
name|getVersionedEntry
argument_list|(
name|srcFile
argument_list|,
literal|false
argument_list|)
expr_stmt|;
if|if
condition|(
name|entry
operator|.
name|isScheduledForAddition
argument_list|()
operator|&&
operator|!
name|entry
operator|.
name|isCopied
argument_list|()
condition|)
block|{
name|isLocallyAdded
operator|=
literal|true
expr_stmt|;
block|}
else|else
block|{
if|if
condition|(
name|entry
operator|.
name|getCopyFromURL
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|url
operator|=
name|entry
operator|.
name|getCopyFromSVNURL
argument_list|()
expr_stmt|;
name|srcRevision
operator|=
name|entry
operator|.
name|getCopyFromRevision
argument_list|()
expr_stmt|;
block|}
if|else if
condition|(
name|entry
operator|.
name|getURL
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|url
operator|=
name|entry
operator|.
name|getSVNURL
argument_list|()
expr_stmt|;
name|srcRevision
operator|=
name|entry
operator|.
name|getRevision
argument_list|()
expr_stmt|;
block|}
else|else
block|{
name|SVNErrorMessage
name|err
init|=
name|SVNErrorMessage
operator|.
name|create
argument_list|(
name|SVNErrorCode
operator|.
name|ENTRY_MISSING_URL
argument_list|,
literal|"Entry for ''{0}'' has no URL"
argument_list|,
name|srcFile
argument_list|)
decl_stmt|;
name|SVNErrorManager
operator|.
name|error
argument_list|(
name|err
argument_list|,
name|SVNLogType
operator|.
name|WC
argument_list|)
expr_stmt|;
block|}
block|}
block|}
else|else
block|{
name|url
operator|=
name|srcURL
expr_stmt|;
block|}
name|Map
name|targetMergeInfo
init|=
literal|null
decl_stmt|;
if|if
condition|(
operator|!
name|isLocallyAdded
condition|)
block|{
name|String
name|mergeInfoPath
decl_stmt|;
if|if
condition|(
operator|!
name|noReposAccess
condition|)
block|{
name|SVNRepository
name|repos
init|=
name|repository
decl_stmt|;
if|if
condition|(
name|repos
operator|==
literal|null
condition|)
block|{
name|repos
operator|=
name|createRepository
argument_list|(
name|url
argument_list|,
literal|null
argument_list|,
literal|false
argument_list|)
expr_stmt|;
block|}
name|SVNURL
name|oldLocation
init|=
literal|null
decl_stmt|;
try|try
block|{
name|mergeInfoPath
operator|=
name|getPathRelativeToSession
argument_list|(
name|url
argument_list|,
literal|null
argument_list|,
name|repos
argument_list|)
expr_stmt|;
if|if
condition|(
name|mergeInfoPath
operator|==
literal|null
condition|)
block|{
name|oldLocation
operator|=
name|repos
operator|.
name|getLocation
argument_list|()
expr_stmt|;
name|repos
operator|.
name|setLocation
argument_list|(
name|url
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|mergeInfoPath
operator|=
literal|""
expr_stmt|;
block|}
name|targetMergeInfo
operator|=
name|getReposMergeInfo
argument_list|(
name|repos
argument_list|,
name|mergeInfoPath
argument_list|,
name|srcRevision
argument_list|,
name|SVNMergeInfoInheritance
operator|.
name|INHERITED
argument_list|,
literal|true
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
if|if
condition|(
name|repository
operator|==
literal|null
condition|)
block|{
name|repos
operator|.
name|closeSession
argument_list|()
expr_stmt|;
block|}
if|else if
condition|(
name|oldLocation
operator|!=
literal|null
condition|)
block|{
name|repos
operator|.
name|setLocation
argument_list|(
name|oldLocation
argument_list|,
literal|false
argument_list|)
expr_stmt|;
block|}
block|}
block|}
else|else
block|{
name|targetMergeInfo
operator|=
name|getWCMergeInfo
argument_list|(
name|srcFile
argument_list|,
name|entry
argument_list|,
literal|null
argument_list|,
name|SVNMergeInfoInheritance
operator|.
name|INHERITED
argument_list|,
literal|false
argument_list|,
operator|new
name|boolean
index|[
literal|1
index|]
argument_list|)
expr_stmt|;
block|}
block|}
return|return
name|targetMergeInfo
return|;
block|}
specifier|private
specifier|static
class|class
name|CopyCommitPathHandler
implements|implements
name|ISVNCommitPathHandler
block|{
specifier|private
name|Map
name|myPathInfos
decl_stmt|;
specifier|private
name|boolean
name|myIsMove
decl_stmt|;
specifier|public
name|CopyCommitPathHandler
parameter_list|(
name|Map
name|pathInfos
parameter_list|,
name|boolean
name|isMove
parameter_list|)
block|{
name|myPathInfos
operator|=
name|pathInfos
expr_stmt|;
name|myIsMove
operator|=
name|isMove
expr_stmt|;
block|}
specifier|public
name|boolean
name|handleCommitPath
parameter_list|(
name|String
name|commitPath
parameter_list|,
name|ISVNEditor
name|commitEditor
parameter_list|)
throws|throws
name|SVNException
block|{
name|CopyPathInfo
name|pathInfo
init|=
operator|(
name|CopyPathInfo
operator|)
name|myPathInfos
operator|.
name|get
argument_list|(
name|commitPath
argument_list|)
decl_stmt|;
name|boolean
name|doAdd
init|=
literal|false
decl_stmt|;
name|boolean
name|doDelete
init|=
literal|false
decl_stmt|;
if|if
condition|(
name|pathInfo
operator|.
name|isDirAdded
condition|)
block|{
name|commitEditor
operator|.
name|addDir
argument_list|(
name|commitPath
argument_list|,
literal|null
argument_list|,
name|SVNRepository
operator|.
name|INVALID_REVISION
argument_list|)
expr_stmt|;
return|return
literal|true
return|;
block|}
if|if
condition|(
name|pathInfo
operator|.
name|isResurrection
condition|)
block|{
if|if
condition|(
operator|!
name|myIsMove
condition|)
block|{
name|doAdd
operator|=
literal|true
expr_stmt|;
block|}
block|}
else|else
block|{
if|if
condition|(
name|myIsMove
condition|)
block|{
if|if
condition|(
name|commitPath
operator|.
name|equals
argument_list|(
name|pathInfo
operator|.
name|mySourceRelativePath
argument_list|)
condition|)
block|{
name|doDelete
operator|=
literal|true
expr_stmt|;
block|}
else|else
block|{
name|doAdd
operator|=
literal|true
expr_stmt|;
block|}
block|}
else|else
block|{
name|doAdd
operator|=
literal|true
expr_stmt|;
block|}
block|}
if|if
condition|(
name|doDelete
condition|)
block|{
name|commitEditor
operator|.
name|deleteEntry
argument_list|(
name|commitPath
argument_list|,
operator|-
literal|1
argument_list|)
expr_stmt|;
block|}
name|boolean
name|closeDir
init|=
literal|false
decl_stmt|;
if|if
condition|(
name|doAdd
condition|)
block|{
name|SVNPathUtil
operator|.
name|checkPathIsValid
argument_list|(
name|commitPath
argument_list|)
expr_stmt|;
if|if
condition|(
name|pathInfo
operator|.
name|mySourceKind
operator|==
name|SVNNodeKind
operator|.
name|DIR
condition|)
block|{
name|commitEditor
operator|.
name|addDir
argument_list|(
name|commitPath
argument_list|,
name|pathInfo
operator|.
name|mySourcePath
argument_list|,
name|pathInfo
operator|.
name|mySourceRevisionNumber
argument_list|)
expr_stmt|;
if|if
condition|(
name|pathInfo
operator|.
name|myMergeInfoProp
operator|!=
literal|null
condition|)
block|{
name|commitEditor
operator|.
name|changeDirProperty
argument_list|(
name|SVNProperty
operator|.
name|MERGE_INFO
argument_list|,
name|SVNPropertyValue
operator|.
name|create
argument_list|(
name|pathInfo
operator|.
name|myMergeInfoProp
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|closeDir
operator|=
literal|true
expr_stmt|;
block|}
else|else
block|{
name|commitEditor
operator|.
name|addFile
argument_list|(
name|commitPath
argument_list|,
name|pathInfo
operator|.
name|mySourcePath
argument_list|,
name|pathInfo
operator|.
name|mySourceRevisionNumber
argument_list|)
expr_stmt|;
if|if
condition|(
name|pathInfo
operator|.
name|myMergeInfoProp
operator|!=
literal|null
condition|)
block|{
name|commitEditor
operator|.
name|changeFileProperty
argument_list|(
name|commitPath
argument_list|,
name|SVNProperty
operator|.
name|MERGE_INFO
argument_list|,
name|SVNPropertyValue
operator|.
name|create
argument_list|(
name|pathInfo
operator|.
name|myMergeInfoProp
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|commitEditor
operator|.
name|closeFile
argument_list|(
name|commitPath
argument_list|,
literal|null
argument_list|)
expr_stmt|;
block|}
block|}
return|return
name|closeDir
return|;
block|}
block|}
specifier|private
specifier|static
class|class
name|CopyPathInfo
block|{
specifier|public
name|String
name|mySourceRelativePath
decl_stmt|;
specifier|public
name|boolean
name|isDirAdded
decl_stmt|;
specifier|public
name|boolean
name|isResurrection
decl_stmt|;
specifier|public
name|SVNNodeKind
name|mySourceKind
decl_stmt|;
specifier|public
name|String
name|mySource
decl_stmt|;
specifier|public
name|String
name|mySourcePath
decl_stmt|;
specifier|public
name|String
name|myDstPath
decl_stmt|;
specifier|public
name|String
name|myMergeInfoProp
decl_stmt|;
specifier|public
name|long
name|mySourceRevisionNumber
decl_stmt|;
block|}
specifier|private
specifier|static
class|class
name|CopyPair
block|{
specifier|public
name|String
name|mySource
decl_stmt|;
specifier|public
name|String
name|myOriginalSource
decl_stmt|;
specifier|public
name|SVNNodeKind
name|mySourceKind
decl_stmt|;
specifier|public
name|SVNRevision
name|mySourceRevision
decl_stmt|;
specifier|public
name|SVNRevision
name|mySourcePegRevision
decl_stmt|;
specifier|public
name|long
name|mySourceRevisionNumber
decl_stmt|;
specifier|public
name|String
name|myBaseName
decl_stmt|;
specifier|public
name|String
name|myDst
decl_stmt|;
specifier|public
name|void
name|setSourceRevisions
parameter_list|(
name|SVNRevision
name|pegRevision
parameter_list|,
name|SVNRevision
name|revision
parameter_list|)
block|{
if|if
condition|(
name|pegRevision
operator|==
name|SVNRevision
operator|.
name|UNDEFINED
condition|)
block|{
if|if
condition|(
name|SVNPathUtil
operator|.
name|isURL
argument_list|(
name|mySource
argument_list|)
condition|)
block|{
name|pegRevision
operator|=
name|SVNRevision
operator|.
name|HEAD
expr_stmt|;
block|}
else|else
block|{
name|pegRevision
operator|=
name|SVNRevision
operator|.
name|WORKING
expr_stmt|;
block|}
block|}
if|if
condition|(
name|revision
operator|==
name|SVNRevision
operator|.
name|UNDEFINED
condition|)
block|{
name|revision
operator|=
name|pegRevision
expr_stmt|;
block|}
name|mySourceRevision
operator|=
name|revision
expr_stmt|;
name|mySourcePegRevision
operator|=
name|pegRevision
expr_stmt|;
block|}
block|}
block|}
end_class

end_unit

