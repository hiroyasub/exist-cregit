begin_unit|revision:1.0.0;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * ====================================================================  * Copyright (c) 2004-2010 TMate Software Ltd.  All rights reserved.  *  * This software is licensed as described in the file COPYING, which  * you should have received as part of this distribution.  The terms  * are also available at http://svnkit.com/license.html.  * If newer versions of this license are posted there, you may use a  * newer version instead, at your option.  * ====================================================================  */
end_comment

begin_package
package|package
name|org
operator|.
name|exist
operator|.
name|versioning
operator|.
name|svn
operator|.
name|internal
operator|.
name|wc
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|ByteArrayOutputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|InputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|OutputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|text
operator|.
name|MessageFormat
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Arrays
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collection
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Iterator
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|TreeMap
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|versioning
operator|.
name|svn
operator|.
name|wc
operator|.
name|ISVNEventHandler
import|;
end_import

begin_import
import|import
name|org
operator|.
name|tmatesoft
operator|.
name|svn
operator|.
name|core
operator|.
name|SVNErrorCode
import|;
end_import

begin_import
import|import
name|org
operator|.
name|tmatesoft
operator|.
name|svn
operator|.
name|core
operator|.
name|SVNErrorMessage
import|;
end_import

begin_import
import|import
name|org
operator|.
name|tmatesoft
operator|.
name|svn
operator|.
name|core
operator|.
name|SVNException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|tmatesoft
operator|.
name|svn
operator|.
name|core
operator|.
name|SVNMergeRange
import|;
end_import

begin_import
import|import
name|org
operator|.
name|tmatesoft
operator|.
name|svn
operator|.
name|core
operator|.
name|SVNMergeRangeList
import|;
end_import

begin_import
import|import
name|org
operator|.
name|tmatesoft
operator|.
name|svn
operator|.
name|core
operator|.
name|SVNNodeKind
import|;
end_import

begin_import
import|import
name|org
operator|.
name|tmatesoft
operator|.
name|svn
operator|.
name|core
operator|.
name|SVNProperties
import|;
end_import

begin_import
import|import
name|org
operator|.
name|tmatesoft
operator|.
name|svn
operator|.
name|core
operator|.
name|SVNProperty
import|;
end_import

begin_import
import|import
name|org
operator|.
name|tmatesoft
operator|.
name|svn
operator|.
name|core
operator|.
name|SVNPropertyValue
import|;
end_import

begin_import
import|import
name|org
operator|.
name|tmatesoft
operator|.
name|svn
operator|.
name|core
operator|.
name|SVNRevisionProperty
import|;
end_import

begin_import
import|import
name|org
operator|.
name|tmatesoft
operator|.
name|svn
operator|.
name|core
operator|.
name|internal
operator|.
name|util
operator|.
name|SVNHashMap
import|;
end_import

begin_import
import|import
name|org
operator|.
name|tmatesoft
operator|.
name|svn
operator|.
name|core
operator|.
name|internal
operator|.
name|util
operator|.
name|SVNMergeInfoUtil
import|;
end_import

begin_import
import|import
name|org
operator|.
name|tmatesoft
operator|.
name|svn
operator|.
name|core
operator|.
name|internal
operator|.
name|wc
operator|.
name|ISVNLoadHandler
import|;
end_import

begin_import
import|import
name|org
operator|.
name|tmatesoft
operator|.
name|svn
operator|.
name|core
operator|.
name|io
operator|.
name|SVNRepository
import|;
end_import

begin_import
import|import
name|org
operator|.
name|tmatesoft
operator|.
name|svn
operator|.
name|core
operator|.
name|wc
operator|.
name|SVNRevision
import|;
end_import

begin_import
import|import
name|org
operator|.
name|tmatesoft
operator|.
name|svn
operator|.
name|core
operator|.
name|wc
operator|.
name|admin
operator|.
name|ISVNAdminEventHandler
import|;
end_import

begin_import
import|import
name|org
operator|.
name|tmatesoft
operator|.
name|svn
operator|.
name|core
operator|.
name|wc
operator|.
name|admin
operator|.
name|SVNAdminEvent
import|;
end_import

begin_import
import|import
name|org
operator|.
name|tmatesoft
operator|.
name|svn
operator|.
name|core
operator|.
name|wc
operator|.
name|admin
operator|.
name|SVNAdminEventAction
import|;
end_import

begin_import
import|import
name|org
operator|.
name|tmatesoft
operator|.
name|svn
operator|.
name|util
operator|.
name|SVNLogType
import|;
end_import

begin_comment
comment|/**  * @version 1.3  * @author  TMate Software Ltd.  */
end_comment

begin_class
specifier|public
class|class
name|DefaultDumpFilterHandler
implements|implements
name|ISVNLoadHandler
block|{
specifier|private
name|boolean
name|myIsDoRenumberRevisions
decl_stmt|;
specifier|private
name|boolean
name|myIsDoExclude
decl_stmt|;
specifier|private
name|boolean
name|myIsPreserveRevisionProps
decl_stmt|;
specifier|private
name|boolean
name|myIsDropEmptyRevisions
decl_stmt|;
specifier|private
name|boolean
name|myIsSkipMissingMergeSources
decl_stmt|;
specifier|private
name|long
name|myDroppedRevisionsCount
decl_stmt|;
specifier|private
name|long
name|myLastLiveRevision
decl_stmt|;
specifier|private
name|OutputStream
name|myOutputStream
decl_stmt|;
specifier|private
name|Collection
name|myPrefixes
decl_stmt|;
specifier|private
name|Map
name|myDroppedNodes
decl_stmt|;
specifier|private
name|Map
name|myRenumberHistory
decl_stmt|;
specifier|private
name|RevisionBaton
name|myCurrentRevisionBaton
decl_stmt|;
specifier|private
name|NodeBaton
name|myCurrentNodeBaton
decl_stmt|;
specifier|private
name|ISVNAdminEventHandler
name|myEventHandler
decl_stmt|;
specifier|public
name|DefaultDumpFilterHandler
parameter_list|(
name|OutputStream
name|os
parameter_list|,
name|ISVNAdminEventHandler
name|handler
parameter_list|,
name|boolean
name|exclude
parameter_list|,
name|boolean
name|renumberRevisions
parameter_list|,
name|boolean
name|dropEmptyRevisions
parameter_list|,
name|boolean
name|preserveRevisionProperties
parameter_list|,
name|Collection
name|prefixes
parameter_list|,
name|boolean
name|skipMissingMergeSources
parameter_list|)
block|{
name|myDroppedRevisionsCount
operator|=
literal|0
expr_stmt|;
name|myLastLiveRevision
operator|=
name|SVNRepository
operator|.
name|INVALID_REVISION
expr_stmt|;
name|myOutputStream
operator|=
name|os
expr_stmt|;
name|myEventHandler
operator|=
name|handler
expr_stmt|;
name|myIsDoExclude
operator|=
name|exclude
expr_stmt|;
name|myIsDoRenumberRevisions
operator|=
name|renumberRevisions
expr_stmt|;
name|myIsDropEmptyRevisions
operator|=
name|dropEmptyRevisions
expr_stmt|;
name|myIsPreserveRevisionProps
operator|=
name|preserveRevisionProperties
expr_stmt|;
name|myIsSkipMissingMergeSources
operator|=
name|skipMissingMergeSources
expr_stmt|;
name|myPrefixes
operator|=
name|prefixes
expr_stmt|;
name|myDroppedNodes
operator|=
operator|new
name|SVNHashMap
argument_list|()
expr_stmt|;
name|myRenumberHistory
operator|=
operator|new
name|SVNHashMap
argument_list|()
expr_stmt|;
block|}
specifier|public
name|void
name|reset
parameter_list|(
name|OutputStream
name|os
parameter_list|,
name|ISVNAdminEventHandler
name|handler
parameter_list|,
name|boolean
name|exclude
parameter_list|,
name|boolean
name|renumberRevisions
parameter_list|,
name|boolean
name|dropEmptyRevisions
parameter_list|,
name|boolean
name|preserveRevisionProperties
parameter_list|,
name|Collection
name|prefixes
parameter_list|,
name|boolean
name|skipMissingMergeSources
parameter_list|)
block|{
name|myDroppedRevisionsCount
operator|=
literal|0
expr_stmt|;
name|myLastLiveRevision
operator|=
name|SVNRepository
operator|.
name|INVALID_REVISION
expr_stmt|;
name|myOutputStream
operator|=
name|os
expr_stmt|;
name|myEventHandler
operator|=
name|handler
expr_stmt|;
name|myIsDoExclude
operator|=
name|exclude
expr_stmt|;
name|myIsDoRenumberRevisions
operator|=
name|renumberRevisions
expr_stmt|;
name|myIsDropEmptyRevisions
operator|=
name|dropEmptyRevisions
expr_stmt|;
name|myIsPreserveRevisionProps
operator|=
name|preserveRevisionProperties
expr_stmt|;
name|myIsSkipMissingMergeSources
operator|=
name|skipMissingMergeSources
expr_stmt|;
name|myPrefixes
operator|=
name|prefixes
expr_stmt|;
name|myDroppedNodes
operator|.
name|clear
argument_list|()
expr_stmt|;
name|myRenumberHistory
operator|.
name|clear
argument_list|()
expr_stmt|;
block|}
specifier|public
name|void
name|closeNode
parameter_list|()
throws|throws
name|SVNException
block|{
if|if
condition|(
name|myCurrentNodeBaton
operator|.
name|myIsDoSkip
condition|)
block|{
return|return;
block|}
if|if
condition|(
operator|!
name|myCurrentNodeBaton
operator|.
name|myHasWritingBegun
condition|)
block|{
name|outputNode
argument_list|(
name|myCurrentNodeBaton
argument_list|)
expr_stmt|;
block|}
name|writeDumpData
argument_list|(
name|myOutputStream
argument_list|,
literal|"\n\n"
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|closeRevision
parameter_list|()
throws|throws
name|SVNException
block|{
if|if
condition|(
name|myCurrentRevisionBaton
operator|!=
literal|null
operator|&&
operator|!
name|myCurrentRevisionBaton
operator|.
name|myHasWritingBegun
condition|)
block|{
name|outputRevision
argument_list|(
name|myCurrentRevisionBaton
argument_list|)
expr_stmt|;
block|}
block|}
specifier|public
name|void
name|openNode
parameter_list|(
name|Map
name|headers
parameter_list|)
throws|throws
name|SVNException
block|{
name|myCurrentNodeBaton
operator|=
operator|new
name|NodeBaton
argument_list|()
expr_stmt|;
name|String
name|nodePath
init|=
operator|(
name|String
operator|)
name|headers
operator|.
name|get
argument_list|(
name|SVNAdminHelper
operator|.
name|DUMPFILE_NODE_PATH
argument_list|)
decl_stmt|;
name|String
name|copyFromPath
init|=
operator|(
name|String
operator|)
name|headers
operator|.
name|get
argument_list|(
name|SVNAdminHelper
operator|.
name|DUMPFILE_NODE_COPYFROM_PATH
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|nodePath
operator|.
name|startsWith
argument_list|(
literal|"/"
argument_list|)
condition|)
block|{
name|nodePath
operator|=
literal|"/"
operator|+
name|nodePath
expr_stmt|;
block|}
if|if
condition|(
name|copyFromPath
operator|!=
literal|null
operator|&&
operator|!
name|copyFromPath
operator|.
name|startsWith
argument_list|(
literal|"/"
argument_list|)
condition|)
block|{
name|copyFromPath
operator|=
literal|"/"
operator|+
name|copyFromPath
expr_stmt|;
block|}
name|myCurrentNodeBaton
operator|.
name|myIsDoSkip
operator|=
name|skipPath
argument_list|(
name|nodePath
argument_list|)
expr_stmt|;
if|if
condition|(
name|myCurrentNodeBaton
operator|.
name|myIsDoSkip
condition|)
block|{
name|myDroppedNodes
operator|.
name|put
argument_list|(
name|nodePath
argument_list|,
name|nodePath
argument_list|)
expr_stmt|;
name|myCurrentRevisionBaton
operator|.
name|myHadDroppedNodes
operator|=
literal|true
expr_stmt|;
block|}
else|else
block|{
name|long
name|textContentLength
init|=
name|getLongFromHeaders
argument_list|(
name|SVNAdminHelper
operator|.
name|DUMPFILE_TEXT_CONTENT_LENGTH
argument_list|,
name|headers
argument_list|)
decl_stmt|;
if|if
condition|(
name|copyFromPath
operator|!=
literal|null
operator|&&
name|skipPath
argument_list|(
name|copyFromPath
argument_list|)
condition|)
block|{
name|SVNNodeKind
name|kind
init|=
name|getNodeKindFromHeaders
argument_list|(
name|SVNAdminHelper
operator|.
name|DUMPFILE_NODE_KIND
argument_list|,
name|headers
argument_list|)
decl_stmt|;
if|if
condition|(
name|textContentLength
operator|>=
literal|0
operator|&&
name|kind
operator|==
name|SVNNodeKind
operator|.
name|FILE
condition|)
block|{
name|headers
operator|.
name|remove
argument_list|(
name|SVNAdminHelper
operator|.
name|DUMPFILE_NODE_COPYFROM_PATH
argument_list|)
expr_stmt|;
name|headers
operator|.
name|remove
argument_list|(
name|SVNAdminHelper
operator|.
name|DUMPFILE_NODE_COPYFROM_REVISION
argument_list|)
expr_stmt|;
name|copyFromPath
operator|=
literal|null
expr_stmt|;
block|}
else|else
block|{
name|SVNErrorMessage
name|err
init|=
name|SVNErrorMessage
operator|.
name|create
argument_list|(
name|SVNErrorCode
operator|.
name|INCOMPLETE_DATA
argument_list|,
literal|"Invalid copy source path ''{0}''"
argument_list|,
name|copyFromPath
argument_list|)
decl_stmt|;
name|SVNErrorManager
operator|.
name|error
argument_list|(
name|err
argument_list|,
name|SVNLogType
operator|.
name|FSFS
argument_list|)
expr_stmt|;
block|}
block|}
name|myCurrentNodeBaton
operator|.
name|myTextContentLength
operator|=
name|textContentLength
operator|>
literal|0
condition|?
name|textContentLength
else|:
literal|0
expr_stmt|;
name|myCurrentRevisionBaton
operator|.
name|myHasNodes
operator|=
literal|true
expr_stmt|;
if|if
condition|(
operator|!
name|myCurrentRevisionBaton
operator|.
name|myHasWritingBegun
condition|)
block|{
name|outputRevision
argument_list|(
name|myCurrentRevisionBaton
argument_list|)
expr_stmt|;
block|}
for|for
control|(
name|Iterator
name|headersIter
init|=
name|headers
operator|.
name|keySet
argument_list|()
operator|.
name|iterator
argument_list|()
init|;
name|headersIter
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|String
name|header
init|=
operator|(
name|String
operator|)
name|headersIter
operator|.
name|next
argument_list|()
decl_stmt|;
if|if
condition|(
name|header
operator|.
name|equals
argument_list|(
name|SVNAdminHelper
operator|.
name|DUMPFILE_CONTENT_LENGTH
argument_list|)
operator|||
name|header
operator|.
name|equals
argument_list|(
name|SVNAdminHelper
operator|.
name|DUMPFILE_PROP_CONTENT_LENGTH
argument_list|)
operator|||
name|header
operator|.
name|equals
argument_list|(
name|SVNAdminHelper
operator|.
name|DUMPFILE_TEXT_CONTENT_LENGTH
argument_list|)
condition|)
block|{
continue|continue;
block|}
name|String
name|headerValue
init|=
operator|(
name|String
operator|)
name|headers
operator|.
name|get
argument_list|(
name|header
argument_list|)
decl_stmt|;
if|if
condition|(
name|myIsDoRenumberRevisions
operator|&&
name|header
operator|.
name|equals
argument_list|(
name|SVNAdminHelper
operator|.
name|DUMPFILE_NODE_COPYFROM_REVISION
argument_list|)
condition|)
block|{
name|long
name|copyFromOriginalRevision
init|=
operator|-
literal|1
decl_stmt|;
try|try
block|{
name|copyFromOriginalRevision
operator|=
name|Long
operator|.
name|parseLong
argument_list|(
name|headerValue
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|NumberFormatException
name|nfe
parameter_list|)
block|{
name|SVNErrorManager
operator|.
name|error
argument_list|(
name|SVNErrorMessage
operator|.
name|create
argument_list|(
name|SVNErrorCode
operator|.
name|INCOMPLETE_DATA
argument_list|,
name|nfe
argument_list|)
argument_list|,
name|SVNLogType
operator|.
name|FSFS
argument_list|)
expr_stmt|;
block|}
name|RevisionItem
name|reNumberedCopyFromValue
init|=
operator|(
name|RevisionItem
operator|)
name|myRenumberHistory
operator|.
name|get
argument_list|(
operator|new
name|Long
argument_list|(
name|copyFromOriginalRevision
argument_list|)
argument_list|)
decl_stmt|;
if|if
condition|(
name|reNumberedCopyFromValue
operator|==
literal|null
operator|||
operator|!
name|SVNRevision
operator|.
name|isValidRevisionNumber
argument_list|(
name|reNumberedCopyFromValue
operator|.
name|myRevision
argument_list|)
condition|)
block|{
name|SVNErrorMessage
name|err
init|=
name|SVNErrorMessage
operator|.
name|create
argument_list|(
name|SVNErrorCode
operator|.
name|NODE_UNEXPECTED_KIND
argument_list|,
literal|"No valid copyfrom revision in filtered stream"
argument_list|)
decl_stmt|;
name|SVNErrorManager
operator|.
name|error
argument_list|(
name|err
argument_list|,
name|SVNLogType
operator|.
name|FSFS
argument_list|)
expr_stmt|;
block|}
name|writeDumpData
argument_list|(
name|myOutputStream
argument_list|,
name|SVNAdminHelper
operator|.
name|DUMPFILE_NODE_COPYFROM_REVISION
operator|+
literal|": "
operator|+
name|reNumberedCopyFromValue
operator|.
name|myRevision
operator|+
literal|"\n"
argument_list|)
expr_stmt|;
continue|continue;
block|}
name|writeDumpData
argument_list|(
name|myOutputStream
argument_list|,
name|header
operator|+
literal|": "
operator|+
name|headerValue
operator|+
literal|"\n"
argument_list|)
expr_stmt|;
block|}
block|}
block|}
specifier|public
name|void
name|openRevision
parameter_list|(
name|Map
name|headers
parameter_list|)
throws|throws
name|SVNException
block|{
name|RevisionBaton
name|revisionBaton
init|=
operator|new
name|RevisionBaton
argument_list|()
decl_stmt|;
name|revisionBaton
operator|.
name|myProperties
operator|=
operator|new
name|SVNProperties
argument_list|()
expr_stmt|;
name|revisionBaton
operator|.
name|myOriginalRevision
operator|=
name|getLongFromHeaders
argument_list|(
name|SVNAdminHelper
operator|.
name|DUMPFILE_REVISION_NUMBER
argument_list|,
name|headers
argument_list|)
expr_stmt|;
if|if
condition|(
name|myIsDoRenumberRevisions
condition|)
block|{
name|revisionBaton
operator|.
name|myActualRevision
operator|=
name|revisionBaton
operator|.
name|myOriginalRevision
operator|-
name|myDroppedRevisionsCount
expr_stmt|;
block|}
else|else
block|{
name|revisionBaton
operator|.
name|myActualRevision
operator|=
name|revisionBaton
operator|.
name|myOriginalRevision
expr_stmt|;
block|}
name|revisionBaton
operator|.
name|writeToHeader
argument_list|(
name|SVNAdminHelper
operator|.
name|DUMPFILE_REVISION_NUMBER
operator|+
literal|": "
operator|+
name|revisionBaton
operator|.
name|myActualRevision
operator|+
literal|"\n"
argument_list|)
expr_stmt|;
for|for
control|(
name|Iterator
name|headersIter
init|=
name|headers
operator|.
name|keySet
argument_list|()
operator|.
name|iterator
argument_list|()
init|;
name|headersIter
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|String
name|header
init|=
operator|(
name|String
operator|)
name|headersIter
operator|.
name|next
argument_list|()
decl_stmt|;
name|String
name|headerValue
init|=
operator|(
name|String
operator|)
name|headers
operator|.
name|get
argument_list|(
name|header
argument_list|)
decl_stmt|;
if|if
condition|(
name|header
operator|.
name|equals
argument_list|(
name|SVNAdminHelper
operator|.
name|DUMPFILE_CONTENT_LENGTH
argument_list|)
operator|||
name|header
operator|.
name|equals
argument_list|(
name|SVNAdminHelper
operator|.
name|DUMPFILE_PROP_CONTENT_LENGTH
argument_list|)
operator|||
name|header
operator|.
name|equals
argument_list|(
name|SVNAdminHelper
operator|.
name|DUMPFILE_REVISION_NUMBER
argument_list|)
condition|)
block|{
continue|continue;
block|}
name|revisionBaton
operator|.
name|writeToHeader
argument_list|(
name|header
operator|+
literal|": "
operator|+
name|headerValue
operator|+
literal|"\n"
argument_list|)
expr_stmt|;
block|}
name|myCurrentRevisionBaton
operator|=
name|revisionBaton
expr_stmt|;
block|}
specifier|public
name|void
name|parseTextBlock
parameter_list|(
name|InputStream
name|dumpStream
parameter_list|,
name|long
name|contentLength
parameter_list|,
name|boolean
name|isDelta
parameter_list|)
throws|throws
name|SVNException
block|{
if|if
condition|(
name|isDelta
condition|)
block|{
name|applyTextDelta
argument_list|()
expr_stmt|;
block|}
else|else
block|{
name|setFullText
argument_list|()
expr_stmt|;
block|}
name|byte
index|[]
name|buffer
init|=
literal|null
decl_stmt|;
if|if
condition|(
name|contentLength
operator|>
literal|0
condition|)
block|{
name|buffer
operator|=
operator|new
name|byte
index|[
name|SVNFileUtil
operator|.
name|STREAM_CHUNK_SIZE
index|]
expr_stmt|;
while|while
condition|(
name|contentLength
operator|>
literal|0
condition|)
block|{
name|int
name|numToRead
init|=
name|contentLength
operator|>
name|SVNFileUtil
operator|.
name|STREAM_CHUNK_SIZE
condition|?
name|SVNFileUtil
operator|.
name|STREAM_CHUNK_SIZE
else|:
operator|(
name|int
operator|)
name|contentLength
decl_stmt|;
name|int
name|read
init|=
literal|0
decl_stmt|;
while|while
condition|(
name|numToRead
operator|>
literal|0
condition|)
block|{
name|int
name|numRead
init|=
operator|-
literal|1
decl_stmt|;
try|try
block|{
name|numRead
operator|=
name|dumpStream
operator|.
name|read
argument_list|(
name|buffer
argument_list|,
name|read
argument_list|,
name|numToRead
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|ioe
parameter_list|)
block|{
name|SVNErrorMessage
name|err
init|=
name|SVNErrorMessage
operator|.
name|create
argument_list|(
name|SVNErrorCode
operator|.
name|IO_ERROR
argument_list|,
name|ioe
operator|.
name|getMessage
argument_list|()
argument_list|)
decl_stmt|;
name|SVNErrorManager
operator|.
name|error
argument_list|(
name|err
argument_list|,
name|ioe
argument_list|,
name|SVNLogType
operator|.
name|FSFS
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|numRead
operator|<
literal|0
condition|)
block|{
name|SVNAdminHelper
operator|.
name|generateIncompleteDataError
argument_list|()
expr_stmt|;
block|}
name|read
operator|+=
name|numRead
expr_stmt|;
name|numToRead
operator|-=
name|numRead
expr_stmt|;
block|}
if|if
condition|(
operator|!
name|myCurrentNodeBaton
operator|.
name|myIsDoSkip
condition|)
block|{
try|try
block|{
name|myOutputStream
operator|.
name|write
argument_list|(
name|buffer
argument_list|,
literal|0
argument_list|,
name|read
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|ioe
parameter_list|)
block|{
name|SVNErrorMessage
name|err
init|=
name|SVNErrorMessage
operator|.
name|create
argument_list|(
name|SVNErrorCode
operator|.
name|STREAM_UNEXPECTED_EOF
argument_list|,
literal|"Unexpected EOF writing contents"
argument_list|)
decl_stmt|;
name|SVNErrorManager
operator|.
name|error
argument_list|(
name|err
argument_list|,
name|ioe
argument_list|,
name|SVNLogType
operator|.
name|FSFS
argument_list|)
expr_stmt|;
block|}
block|}
name|contentLength
operator|-=
name|read
expr_stmt|;
block|}
block|}
block|}
specifier|public
name|void
name|parseUUID
parameter_list|(
name|String
name|uuid
parameter_list|)
throws|throws
name|SVNException
block|{
name|writeDumpData
argument_list|(
name|myOutputStream
argument_list|,
name|SVNAdminHelper
operator|.
name|DUMPFILE_UUID
operator|+
literal|": "
operator|+
name|uuid
operator|+
literal|"\n\n"
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|removeNodeProperties
parameter_list|()
throws|throws
name|SVNException
block|{
name|myCurrentNodeBaton
operator|.
name|myHasProps
operator|=
literal|true
expr_stmt|;
block|}
specifier|public
name|void
name|setFullText
parameter_list|()
throws|throws
name|SVNException
block|{
if|if
condition|(
operator|!
name|myCurrentNodeBaton
operator|.
name|myIsDoSkip
condition|)
block|{
name|myCurrentNodeBaton
operator|.
name|myHasText
operator|=
literal|true
expr_stmt|;
if|if
condition|(
operator|!
name|myCurrentNodeBaton
operator|.
name|myHasWritingBegun
condition|)
block|{
name|outputNode
argument_list|(
name|myCurrentNodeBaton
argument_list|)
expr_stmt|;
block|}
block|}
block|}
specifier|public
name|void
name|setRevisionProperty
parameter_list|(
name|String
name|propertyName
parameter_list|,
name|SVNPropertyValue
name|propertyValue
parameter_list|)
throws|throws
name|SVNException
block|{
name|myCurrentRevisionBaton
operator|.
name|myHasProps
operator|=
literal|true
expr_stmt|;
if|if
condition|(
name|propertyValue
operator|==
literal|null
condition|)
block|{
name|myCurrentRevisionBaton
operator|.
name|myProperties
operator|.
name|remove
argument_list|(
name|propertyName
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|myCurrentRevisionBaton
operator|.
name|myProperties
operator|.
name|put
argument_list|(
name|propertyName
argument_list|,
name|propertyValue
argument_list|)
expr_stmt|;
block|}
block|}
specifier|public
name|void
name|setNodeProperty
parameter_list|(
name|String
name|propertyName
parameter_list|,
name|SVNPropertyValue
name|propertyValue
parameter_list|)
throws|throws
name|SVNException
block|{
if|if
condition|(
name|myCurrentNodeBaton
operator|.
name|myIsDoSkip
condition|)
block|{
return|return;
block|}
if|if
condition|(
operator|!
name|myCurrentNodeBaton
operator|.
name|myHasProps
condition|)
block|{
name|SVNErrorMessage
name|err
init|=
name|SVNErrorMessage
operator|.
name|create
argument_list|(
name|SVNErrorCode
operator|.
name|UNSUPPORTED_FEATURE
argument_list|,
literal|"Delta property block detected - not supported by svndumpfilter"
argument_list|)
decl_stmt|;
name|SVNErrorManager
operator|.
name|error
argument_list|(
name|err
argument_list|,
name|SVNLogType
operator|.
name|FSFS
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|propertyName
operator|.
name|equals
argument_list|(
name|SVNProperty
operator|.
name|MERGE_INFO
argument_list|)
condition|)
block|{
name|Map
name|filteredMergeInfo
init|=
name|adjustMergeInfo
argument_list|(
name|propertyValue
argument_list|)
decl_stmt|;
name|propertyValue
operator|=
name|SVNPropertyValue
operator|.
name|create
argument_list|(
name|SVNMergeInfoUtil
operator|.
name|formatMergeInfoToString
argument_list|(
name|filteredMergeInfo
argument_list|,
literal|null
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|myCurrentNodeBaton
operator|.
name|writeProperty
argument_list|(
name|propertyName
argument_list|,
name|propertyValue
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|deleteNodeProperty
parameter_list|(
name|String
name|propertyName
parameter_list|)
throws|throws
name|SVNException
block|{
block|}
specifier|public
name|void
name|applyTextDelta
parameter_list|()
throws|throws
name|SVNException
block|{
block|}
specifier|public
name|long
name|getDroppedRevisionsCount
parameter_list|()
block|{
return|return
name|myDroppedRevisionsCount
return|;
block|}
specifier|public
name|Map
name|getRenumberHistory
parameter_list|()
block|{
return|return
name|myRenumberHistory
return|;
block|}
specifier|public
name|Map
name|getDroppedNodes
parameter_list|()
block|{
return|return
name|myDroppedNodes
return|;
block|}
specifier|private
name|void
name|outputRevision
parameter_list|(
name|RevisionBaton
name|revisionBaton
parameter_list|)
throws|throws
name|SVNException
block|{
name|revisionBaton
operator|.
name|myHasWritingBegun
operator|=
literal|true
expr_stmt|;
if|if
condition|(
operator|!
name|myIsPreserveRevisionProps
operator|&&
operator|!
name|revisionBaton
operator|.
name|myHasNodes
operator|&&
name|revisionBaton
operator|.
name|myHadDroppedNodes
operator|&&
operator|!
name|myIsDropEmptyRevisions
condition|)
block|{
name|SVNProperties
name|oldProps
init|=
name|revisionBaton
operator|.
name|myProperties
decl_stmt|;
name|revisionBaton
operator|.
name|myHasProps
operator|=
literal|true
expr_stmt|;
name|revisionBaton
operator|.
name|myProperties
operator|=
operator|new
name|SVNProperties
argument_list|()
expr_stmt|;
name|revisionBaton
operator|.
name|myProperties
operator|.
name|put
argument_list|(
name|SVNRevisionProperty
operator|.
name|DATE
argument_list|,
name|oldProps
operator|.
name|getSVNPropertyValue
argument_list|(
name|SVNRevisionProperty
operator|.
name|DATE
argument_list|)
argument_list|)
expr_stmt|;
name|revisionBaton
operator|.
name|myProperties
operator|.
name|put
argument_list|(
name|SVNRevisionProperty
operator|.
name|LOG
argument_list|,
literal|"This is an empty revision for padding."
argument_list|)
expr_stmt|;
block|}
name|ByteArrayOutputStream
name|propsBuffer
init|=
operator|new
name|ByteArrayOutputStream
argument_list|()
decl_stmt|;
if|if
condition|(
name|revisionBaton
operator|.
name|myHasProps
condition|)
block|{
for|for
control|(
name|Iterator
name|propsIter
init|=
name|revisionBaton
operator|.
name|myProperties
operator|.
name|nameSet
argument_list|()
operator|.
name|iterator
argument_list|()
init|;
name|propsIter
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|String
name|propName
init|=
operator|(
name|String
operator|)
name|propsIter
operator|.
name|next
argument_list|()
decl_stmt|;
name|SVNPropertyValue
name|propValue
init|=
name|revisionBaton
operator|.
name|myProperties
operator|.
name|getSVNPropertyValue
argument_list|(
name|propName
argument_list|)
decl_stmt|;
name|writeProperty
argument_list|(
name|propsBuffer
argument_list|,
name|propName
argument_list|,
name|propValue
argument_list|)
expr_stmt|;
block|}
name|writeDumpData
argument_list|(
name|propsBuffer
argument_list|,
literal|"PROPS-END\n"
argument_list|)
expr_stmt|;
name|revisionBaton
operator|.
name|writeToHeader
argument_list|(
name|SVNAdminHelper
operator|.
name|DUMPFILE_PROP_CONTENT_LENGTH
operator|+
literal|": "
operator|+
name|propsBuffer
operator|.
name|size
argument_list|()
operator|+
literal|"\n"
argument_list|)
expr_stmt|;
block|}
name|revisionBaton
operator|.
name|writeToHeader
argument_list|(
name|SVNAdminHelper
operator|.
name|DUMPFILE_CONTENT_LENGTH
operator|+
literal|": "
operator|+
name|propsBuffer
operator|.
name|size
argument_list|()
operator|+
literal|"\n\n"
argument_list|)
expr_stmt|;
name|writeDumpData
argument_list|(
name|propsBuffer
argument_list|,
literal|"\n"
argument_list|)
expr_stmt|;
if|if
condition|(
name|revisionBaton
operator|.
name|myHasNodes
operator|||
operator|!
name|myIsDropEmptyRevisions
operator|||
operator|!
name|revisionBaton
operator|.
name|myHadDroppedNodes
condition|)
block|{
name|writeDumpData
argument_list|(
name|myOutputStream
argument_list|,
name|revisionBaton
operator|.
name|myHeaderBuffer
operator|.
name|toByteArray
argument_list|()
argument_list|)
expr_stmt|;
name|writeDumpData
argument_list|(
name|myOutputStream
argument_list|,
name|propsBuffer
operator|.
name|toByteArray
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|myIsDoRenumberRevisions
condition|)
block|{
name|myRenumberHistory
operator|.
name|put
argument_list|(
operator|new
name|Long
argument_list|(
name|revisionBaton
operator|.
name|myOriginalRevision
argument_list|)
argument_list|,
operator|new
name|RevisionItem
argument_list|(
name|revisionBaton
operator|.
name|myActualRevision
argument_list|,
literal|false
argument_list|)
argument_list|)
expr_stmt|;
name|myLastLiveRevision
operator|=
name|revisionBaton
operator|.
name|myActualRevision
expr_stmt|;
block|}
name|String
name|message
init|=
name|MessageFormat
operator|.
name|format
argument_list|(
literal|"Revision {0} committed as {1}."
argument_list|,
operator|new
name|Object
index|[]
block|{
name|String
operator|.
name|valueOf
argument_list|(
name|revisionBaton
operator|.
name|myOriginalRevision
argument_list|)
block|,
name|String
operator|.
name|valueOf
argument_list|(
name|revisionBaton
operator|.
name|myActualRevision
argument_list|)
block|}
argument_list|)
decl_stmt|;
name|dispatchEvent
argument_list|(
operator|new
name|SVNAdminEvent
argument_list|(
name|revisionBaton
operator|.
name|myActualRevision
argument_list|,
name|revisionBaton
operator|.
name|myOriginalRevision
argument_list|,
name|SVNAdminEventAction
operator|.
name|DUMP_FILTER_REVISION_COMMITTED
argument_list|,
name|message
argument_list|)
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|myDroppedRevisionsCount
operator|++
expr_stmt|;
if|if
condition|(
name|myIsDoRenumberRevisions
condition|)
block|{
name|myRenumberHistory
operator|.
name|put
argument_list|(
operator|new
name|Long
argument_list|(
name|revisionBaton
operator|.
name|myOriginalRevision
argument_list|)
argument_list|,
operator|new
name|RevisionItem
argument_list|(
name|myLastLiveRevision
argument_list|,
literal|true
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|String
name|message
init|=
name|MessageFormat
operator|.
name|format
argument_list|(
literal|"Revision {0} skipped."
argument_list|,
operator|new
name|Object
index|[]
block|{
name|String
operator|.
name|valueOf
argument_list|(
name|revisionBaton
operator|.
name|myOriginalRevision
argument_list|)
block|}
argument_list|)
decl_stmt|;
name|dispatchEvent
argument_list|(
operator|new
name|SVNAdminEvent
argument_list|(
name|revisionBaton
operator|.
name|myOriginalRevision
argument_list|,
name|SVNAdminEventAction
operator|.
name|DUMP_FILTER_REVISION_SKIPPED
argument_list|,
name|message
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
specifier|private
name|void
name|outputNode
parameter_list|(
name|NodeBaton
name|nodeBaton
parameter_list|)
throws|throws
name|SVNException
block|{
name|nodeBaton
operator|.
name|myHasWritingBegun
operator|=
literal|true
expr_stmt|;
if|if
condition|(
name|nodeBaton
operator|.
name|myHasProps
condition|)
block|{
name|nodeBaton
operator|.
name|writeToPropertyBuffer
argument_list|(
literal|"PROPS-END\n"
argument_list|)
expr_stmt|;
name|nodeBaton
operator|.
name|writeToHeader
argument_list|(
name|SVNAdminHelper
operator|.
name|DUMPFILE_PROP_CONTENT_LENGTH
operator|+
literal|": "
operator|+
name|nodeBaton
operator|.
name|myPropertiesBuffer
operator|.
name|size
argument_list|()
operator|+
literal|"\n"
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|nodeBaton
operator|.
name|myHasText
condition|)
block|{
name|nodeBaton
operator|.
name|writeToHeader
argument_list|(
name|SVNAdminHelper
operator|.
name|DUMPFILE_TEXT_CONTENT_LENGTH
operator|+
literal|": "
operator|+
name|nodeBaton
operator|.
name|myTextContentLength
operator|+
literal|"\n"
argument_list|)
expr_stmt|;
block|}
name|nodeBaton
operator|.
name|writeToHeader
argument_list|(
name|SVNAdminHelper
operator|.
name|DUMPFILE_CONTENT_LENGTH
operator|+
literal|": "
operator|+
operator|(
name|nodeBaton
operator|.
name|myPropertiesBuffer
operator|.
name|size
argument_list|()
operator|+
name|nodeBaton
operator|.
name|myTextContentLength
operator|)
operator|+
literal|"\n\n"
argument_list|)
expr_stmt|;
name|writeDumpData
argument_list|(
name|myOutputStream
argument_list|,
name|nodeBaton
operator|.
name|myHeaderBuffer
operator|.
name|toByteArray
argument_list|()
argument_list|)
expr_stmt|;
name|writeDumpData
argument_list|(
name|myOutputStream
argument_list|,
name|nodeBaton
operator|.
name|myPropertiesBuffer
operator|.
name|toByteArray
argument_list|()
argument_list|)
expr_stmt|;
block|}
specifier|private
name|void
name|writeProperty
parameter_list|(
name|OutputStream
name|out
parameter_list|,
name|String
name|propName
parameter_list|,
name|SVNPropertyValue
name|propValue
parameter_list|)
throws|throws
name|SVNException
block|{
try|try
block|{
name|writeDumpData
argument_list|(
name|out
argument_list|,
literal|"K "
argument_list|)
expr_stmt|;
name|byte
index|[]
name|propNameBytes
init|=
name|propName
operator|.
name|getBytes
argument_list|(
literal|"UTF-8"
argument_list|)
decl_stmt|;
name|writeDumpData
argument_list|(
name|out
argument_list|,
name|String
operator|.
name|valueOf
argument_list|(
name|propNameBytes
operator|.
name|length
argument_list|)
argument_list|)
expr_stmt|;
name|writeDumpData
argument_list|(
name|out
argument_list|,
literal|"\n"
argument_list|)
expr_stmt|;
name|writeDumpData
argument_list|(
name|out
argument_list|,
name|propNameBytes
argument_list|)
expr_stmt|;
name|writeDumpData
argument_list|(
name|out
argument_list|,
literal|"\n"
argument_list|)
expr_stmt|;
name|writeDumpData
argument_list|(
name|out
argument_list|,
literal|"V "
argument_list|)
expr_stmt|;
name|byte
index|[]
name|propValueBytes
init|=
name|SVNPropertyValue
operator|.
name|getPropertyAsBytes
argument_list|(
name|propValue
argument_list|)
decl_stmt|;
name|writeDumpData
argument_list|(
name|out
argument_list|,
name|String
operator|.
name|valueOf
argument_list|(
name|propValueBytes
operator|.
name|length
argument_list|)
argument_list|)
expr_stmt|;
name|writeDumpData
argument_list|(
name|out
argument_list|,
literal|"\n"
argument_list|)
expr_stmt|;
name|writeDumpData
argument_list|(
name|out
argument_list|,
name|propValueBytes
argument_list|)
expr_stmt|;
name|writeDumpData
argument_list|(
name|out
argument_list|,
literal|"\n"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
name|SVNErrorMessage
name|err
init|=
name|SVNErrorMessage
operator|.
name|create
argument_list|(
name|SVNErrorCode
operator|.
name|IO_ERROR
argument_list|,
name|e
operator|.
name|getLocalizedMessage
argument_list|()
argument_list|)
decl_stmt|;
name|SVNErrorManager
operator|.
name|error
argument_list|(
name|err
argument_list|,
name|e
argument_list|,
name|SVNLogType
operator|.
name|FSFS
argument_list|)
expr_stmt|;
block|}
block|}
specifier|private
name|Map
name|adjustMergeInfo
parameter_list|(
name|SVNPropertyValue
name|initialValue
parameter_list|)
throws|throws
name|SVNException
block|{
name|Map
name|finalMergeInfo
init|=
operator|new
name|TreeMap
argument_list|()
decl_stmt|;
name|Map
name|mergeInfo
init|=
name|SVNMergeInfoUtil
operator|.
name|parseMergeInfo
argument_list|(
operator|new
name|StringBuffer
argument_list|(
name|initialValue
operator|.
name|getString
argument_list|()
argument_list|)
argument_list|,
literal|null
argument_list|)
decl_stmt|;
for|for
control|(
name|Iterator
name|mergeInfoIter
init|=
name|mergeInfo
operator|.
name|keySet
argument_list|()
operator|.
name|iterator
argument_list|()
init|;
name|mergeInfoIter
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|String
name|mergeSource
init|=
operator|(
name|String
operator|)
name|mergeInfoIter
operator|.
name|next
argument_list|()
decl_stmt|;
name|SVNMergeRangeList
name|rangeList
init|=
operator|(
name|SVNMergeRangeList
operator|)
name|mergeInfo
operator|.
name|get
argument_list|(
name|mergeSource
argument_list|)
decl_stmt|;
if|if
condition|(
name|skipPath
argument_list|(
name|mergeSource
argument_list|)
condition|)
block|{
if|if
condition|(
name|myIsSkipMissingMergeSources
condition|)
block|{
continue|continue;
block|}
name|SVNErrorMessage
name|err
init|=
name|SVNErrorMessage
operator|.
name|create
argument_list|(
name|SVNErrorCode
operator|.
name|INCOMPLETE_DATA
argument_list|,
literal|"Missing merge source path ''{0}''; try with --skip-missing-merge-sources"
argument_list|,
name|mergeSource
argument_list|)
decl_stmt|;
name|SVNErrorManager
operator|.
name|error
argument_list|(
name|err
argument_list|,
name|SVNLogType
operator|.
name|FSFS
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|myIsDoRenumberRevisions
condition|)
block|{
name|SVNMergeRange
index|[]
name|ranges
init|=
name|rangeList
operator|.
name|getRanges
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|rangeList
operator|.
name|getSize
argument_list|()
condition|;
name|i
operator|++
control|)
block|{
name|SVNMergeRange
name|range
init|=
name|ranges
index|[
name|i
index|]
decl_stmt|;
name|RevisionItem
name|revItemStart
init|=
operator|(
name|RevisionItem
operator|)
name|myRenumberHistory
operator|.
name|get
argument_list|(
operator|new
name|Long
argument_list|(
name|range
operator|.
name|getStartRevision
argument_list|()
argument_list|)
argument_list|)
decl_stmt|;
if|if
condition|(
name|revItemStart
operator|==
literal|null
operator|||
operator|!
name|SVNRevision
operator|.
name|isValidRevisionNumber
argument_list|(
name|revItemStart
operator|.
name|myRevision
argument_list|)
condition|)
block|{
name|SVNErrorMessage
name|err
init|=
name|SVNErrorMessage
operator|.
name|create
argument_list|(
name|SVNErrorCode
operator|.
name|NODE_UNEXPECTED_KIND
argument_list|,
literal|"No valid revision range 'start' in filtered stream"
argument_list|)
decl_stmt|;
name|SVNErrorManager
operator|.
name|error
argument_list|(
name|err
argument_list|,
name|SVNLogType
operator|.
name|FSFS
argument_list|)
expr_stmt|;
block|}
name|RevisionItem
name|revItemEnd
init|=
operator|(
name|RevisionItem
operator|)
name|myRenumberHistory
operator|.
name|get
argument_list|(
operator|new
name|Long
argument_list|(
name|range
operator|.
name|getEndRevision
argument_list|()
argument_list|)
argument_list|)
decl_stmt|;
if|if
condition|(
name|revItemEnd
operator|==
literal|null
operator|||
operator|!
name|SVNRevision
operator|.
name|isValidRevisionNumber
argument_list|(
name|revItemEnd
operator|.
name|myRevision
argument_list|)
condition|)
block|{
name|SVNErrorMessage
name|err
init|=
name|SVNErrorMessage
operator|.
name|create
argument_list|(
name|SVNErrorCode
operator|.
name|NODE_UNEXPECTED_KIND
argument_list|,
literal|"No valid revision range 'end' in filtered stream"
argument_list|)
decl_stmt|;
name|SVNErrorManager
operator|.
name|error
argument_list|(
name|err
argument_list|,
name|SVNLogType
operator|.
name|FSFS
argument_list|)
expr_stmt|;
block|}
name|range
operator|.
name|setStartRevision
argument_list|(
name|revItemStart
operator|.
name|myRevision
argument_list|)
expr_stmt|;
name|range
operator|.
name|setEndRevision
argument_list|(
name|revItemEnd
operator|.
name|myRevision
argument_list|)
expr_stmt|;
block|}
name|Arrays
operator|.
name|sort
argument_list|(
name|ranges
argument_list|)
expr_stmt|;
block|}
name|finalMergeInfo
operator|.
name|put
argument_list|(
name|mergeSource
argument_list|,
name|rangeList
argument_list|)
expr_stmt|;
block|}
return|return
name|finalMergeInfo
return|;
block|}
specifier|private
name|SVNNodeKind
name|getNodeKindFromHeaders
parameter_list|(
name|String
name|header
parameter_list|,
name|Map
name|headers
parameter_list|)
block|{
return|return
name|SVNNodeKind
operator|.
name|parseKind
argument_list|(
operator|(
name|String
operator|)
name|headers
operator|.
name|get
argument_list|(
name|header
argument_list|)
argument_list|)
return|;
block|}
specifier|private
name|long
name|getLongFromHeaders
parameter_list|(
name|String
name|header
parameter_list|,
name|Map
name|headers
parameter_list|)
block|{
name|String
name|val
init|=
operator|(
name|String
operator|)
name|headers
operator|.
name|get
argument_list|(
name|header
argument_list|)
decl_stmt|;
if|if
condition|(
name|val
operator|!=
literal|null
condition|)
block|{
try|try
block|{
return|return
name|Long
operator|.
name|parseLong
argument_list|(
name|val
argument_list|)
return|;
block|}
catch|catch
parameter_list|(
name|NumberFormatException
name|nfe
parameter_list|)
block|{
comment|//
block|}
block|}
return|return
operator|-
literal|1
return|;
block|}
specifier|private
name|void
name|writeDumpData
parameter_list|(
name|OutputStream
name|out
parameter_list|,
name|String
name|data
parameter_list|)
throws|throws
name|SVNException
block|{
try|try
block|{
name|out
operator|.
name|write
argument_list|(
name|data
operator|.
name|getBytes
argument_list|(
literal|"UTF-8"
argument_list|)
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|ioe
parameter_list|)
block|{
name|SVNErrorMessage
name|err
init|=
name|SVNErrorMessage
operator|.
name|create
argument_list|(
name|SVNErrorCode
operator|.
name|IO_ERROR
argument_list|,
name|ioe
operator|.
name|getLocalizedMessage
argument_list|()
argument_list|)
decl_stmt|;
name|SVNErrorManager
operator|.
name|error
argument_list|(
name|err
argument_list|,
name|ioe
argument_list|,
name|SVNLogType
operator|.
name|FSFS
argument_list|)
expr_stmt|;
block|}
block|}
specifier|private
name|void
name|writeDumpData
parameter_list|(
name|OutputStream
name|out
parameter_list|,
name|byte
index|[]
name|bytes
parameter_list|)
throws|throws
name|SVNException
block|{
try|try
block|{
name|out
operator|.
name|write
argument_list|(
name|bytes
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|ioe
parameter_list|)
block|{
name|SVNErrorMessage
name|err
init|=
name|SVNErrorMessage
operator|.
name|create
argument_list|(
name|SVNErrorCode
operator|.
name|IO_ERROR
argument_list|,
name|ioe
operator|.
name|getLocalizedMessage
argument_list|()
argument_list|)
decl_stmt|;
name|SVNErrorManager
operator|.
name|error
argument_list|(
name|err
argument_list|,
name|ioe
argument_list|,
name|SVNLogType
operator|.
name|FSFS
argument_list|)
expr_stmt|;
block|}
block|}
specifier|private
name|boolean
name|skipPath
parameter_list|(
name|String
name|path
parameter_list|)
block|{
for|for
control|(
name|Iterator
name|prefixesIter
init|=
name|myPrefixes
operator|.
name|iterator
argument_list|()
init|;
name|prefixesIter
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|String
name|prefix
init|=
operator|(
name|String
operator|)
name|prefixesIter
operator|.
name|next
argument_list|()
decl_stmt|;
if|if
condition|(
name|path
operator|.
name|startsWith
argument_list|(
name|prefix
argument_list|)
condition|)
block|{
return|return
name|myIsDoExclude
return|;
block|}
block|}
return|return
operator|!
name|myIsDoExclude
return|;
block|}
specifier|private
name|void
name|dispatchEvent
parameter_list|(
name|SVNAdminEvent
name|event
parameter_list|)
throws|throws
name|SVNException
block|{
if|if
condition|(
name|myEventHandler
operator|!=
literal|null
condition|)
block|{
name|myEventHandler
operator|.
name|handleAdminEvent
argument_list|(
name|event
argument_list|,
name|ISVNEventHandler
operator|.
name|UNKNOWN
argument_list|)
expr_stmt|;
block|}
block|}
specifier|public
class|class
name|RevisionItem
block|{
name|long
name|myRevision
decl_stmt|;
name|boolean
name|myWasDropped
decl_stmt|;
specifier|public
name|RevisionItem
parameter_list|(
name|long
name|revision
parameter_list|,
name|boolean
name|dropped
parameter_list|)
block|{
name|myRevision
operator|=
name|revision
expr_stmt|;
name|myWasDropped
operator|=
name|dropped
expr_stmt|;
block|}
specifier|public
name|boolean
name|wasDropped
parameter_list|()
block|{
return|return
name|myWasDropped
return|;
block|}
specifier|public
name|long
name|getRevision
parameter_list|()
block|{
return|return
name|myRevision
return|;
block|}
block|}
specifier|private
class|class
name|RevisionBaton
block|{
name|boolean
name|myHasNodes
decl_stmt|;
name|boolean
name|myHasProps
decl_stmt|;
name|boolean
name|myHadDroppedNodes
decl_stmt|;
name|boolean
name|myHasWritingBegun
decl_stmt|;
name|long
name|myOriginalRevision
decl_stmt|;
name|long
name|myActualRevision
decl_stmt|;
name|SVNProperties
name|myProperties
decl_stmt|;
name|ByteArrayOutputStream
name|myHeaderBuffer
decl_stmt|;
name|void
name|writeToHeader
parameter_list|(
name|String
name|data
parameter_list|)
throws|throws
name|SVNException
block|{
if|if
condition|(
name|myHeaderBuffer
operator|==
literal|null
condition|)
block|{
name|myHeaderBuffer
operator|=
operator|new
name|ByteArrayOutputStream
argument_list|()
expr_stmt|;
block|}
name|writeDumpData
argument_list|(
name|myHeaderBuffer
argument_list|,
name|data
argument_list|)
expr_stmt|;
block|}
block|}
specifier|private
class|class
name|NodeBaton
block|{
name|boolean
name|myIsDoSkip
decl_stmt|;
name|boolean
name|myHasProps
decl_stmt|;
name|boolean
name|myHasText
decl_stmt|;
name|boolean
name|myHasWritingBegun
decl_stmt|;
name|long
name|myTextContentLength
decl_stmt|;
name|ByteArrayOutputStream
name|myPropertiesBuffer
decl_stmt|;
name|ByteArrayOutputStream
name|myHeaderBuffer
decl_stmt|;
specifier|public
name|NodeBaton
parameter_list|()
block|{
name|myPropertiesBuffer
operator|=
operator|new
name|ByteArrayOutputStream
argument_list|()
expr_stmt|;
name|myHeaderBuffer
operator|=
operator|new
name|ByteArrayOutputStream
argument_list|()
expr_stmt|;
block|}
name|void
name|writeProperty
parameter_list|(
name|String
name|propName
parameter_list|,
name|SVNPropertyValue
name|propValue
parameter_list|)
throws|throws
name|SVNException
block|{
name|DefaultDumpFilterHandler
operator|.
name|this
operator|.
name|writeProperty
argument_list|(
name|myPropertiesBuffer
argument_list|,
name|propName
argument_list|,
name|propValue
argument_list|)
expr_stmt|;
block|}
name|void
name|writeToPropertyBuffer
parameter_list|(
name|String
name|data
parameter_list|)
throws|throws
name|SVNException
block|{
name|DefaultDumpFilterHandler
operator|.
name|this
operator|.
name|writeDumpData
argument_list|(
name|myPropertiesBuffer
argument_list|,
name|data
argument_list|)
expr_stmt|;
block|}
name|void
name|writeToHeader
parameter_list|(
name|String
name|data
parameter_list|)
throws|throws
name|SVNException
block|{
name|writeDumpData
argument_list|(
name|myHeaderBuffer
argument_list|,
name|data
argument_list|)
expr_stmt|;
block|}
block|}
block|}
end_class

end_unit

