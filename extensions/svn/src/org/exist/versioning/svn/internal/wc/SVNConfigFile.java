begin_unit|revision:1.0.0;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * ====================================================================  * Copyright (c) 2004-2010 TMate Software Ltd.  All rights reserved.  *  * This software is licensed as described in the file COPYING, which  * you should have received as part of this distribution.  The terms  * are also available at http://svnkit.com/license.html  * If newer versions of this license are posted there, you may use a  * newer version instead, at your option.  * ====================================================================  */
end_comment

begin_package
package|package
name|org
operator|.
name|exist
operator|.
name|versioning
operator|.
name|svn
operator|.
name|internal
operator|.
name|wc
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|BufferedReader
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|File
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|InputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|InputStreamReader
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|Writer
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collection
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|EXistException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|security
operator|.
name|Subject
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|security
operator|.
name|internal
operator|.
name|SecurityManagerImpl
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|storage
operator|.
name|BrokerPool
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|storage
operator|.
name|DBBroker
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|util
operator|.
name|io
operator|.
name|Resource
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|log4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|tmatesoft
operator|.
name|svn
operator|.
name|core
operator|.
name|internal
operator|.
name|util
operator|.
name|SVNHashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|org
operator|.
name|tmatesoft
operator|.
name|svn
operator|.
name|core
operator|.
name|SVNException
import|;
end_import

begin_comment
comment|/**  * @version 1.3  * @author  TMate Software Ltd.  */
end_comment

begin_class
specifier|public
class|class
name|SVNConfigFile
block|{
specifier|private
name|Resource
name|myFile
decl_stmt|;
specifier|private
name|String
index|[]
name|myLines
decl_stmt|;
specifier|private
name|long
name|myLastModified
decl_stmt|;
specifier|final
specifier|static
name|Logger
name|LOG
init|=
name|Logger
operator|.
name|getLogger
argument_list|(
name|SVNConfigFile
operator|.
name|class
argument_list|)
decl_stmt|;
specifier|public
name|SVNConfigFile
parameter_list|(
name|Resource
name|file
parameter_list|)
block|{
name|myFile
operator|=
name|file
operator|.
name|getAbsoluteFile
argument_list|()
expr_stmt|;
block|}
specifier|protected
name|String
index|[]
name|getLines
parameter_list|()
block|{
return|return
name|myLines
return|;
block|}
specifier|public
name|Map
name|getProperties
parameter_list|(
name|String
name|groupName
parameter_list|)
block|{
name|Map
name|map
init|=
operator|new
name|SVNHashMap
argument_list|()
decl_stmt|;
name|load
argument_list|()
expr_stmt|;
name|boolean
name|groupMatched
init|=
literal|false
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|myLines
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
name|String
name|line
init|=
name|myLines
index|[
name|i
index|]
decl_stmt|;
if|if
condition|(
name|line
operator|==
literal|null
condition|)
block|{
continue|continue;
block|}
if|if
condition|(
operator|!
name|groupMatched
operator|&&
name|matchGroup
argument_list|(
name|line
argument_list|,
name|groupName
argument_list|)
condition|)
block|{
name|groupMatched
operator|=
literal|true
expr_stmt|;
block|}
if|else if
condition|(
name|groupMatched
condition|)
block|{
if|if
condition|(
name|matchGroup
argument_list|(
name|line
argument_list|,
literal|null
argument_list|)
condition|)
block|{
return|return
name|map
return|;
block|}
if|else if
condition|(
name|matchProperty
argument_list|(
name|line
argument_list|,
literal|null
argument_list|)
condition|)
block|{
name|map
operator|.
name|put
argument_list|(
name|getPropertyName
argument_list|(
name|line
argument_list|)
argument_list|,
name|getPropertyValue
argument_list|(
name|line
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
block|}
return|return
name|map
return|;
block|}
specifier|public
name|String
name|getPropertyValue
parameter_list|(
name|String
name|groupName
parameter_list|,
name|String
name|propertyName
parameter_list|)
block|{
name|load
argument_list|()
expr_stmt|;
name|boolean
name|groupMatched
init|=
literal|false
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|myLines
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
name|String
name|line
init|=
name|myLines
index|[
name|i
index|]
decl_stmt|;
if|if
condition|(
name|line
operator|==
literal|null
condition|)
block|{
continue|continue;
block|}
if|if
condition|(
operator|!
name|groupMatched
operator|&&
name|matchGroup
argument_list|(
name|line
argument_list|,
name|groupName
argument_list|)
condition|)
block|{
name|groupMatched
operator|=
literal|true
expr_stmt|;
block|}
if|else if
condition|(
name|groupMatched
condition|)
block|{
if|if
condition|(
name|matchGroup
argument_list|(
name|line
argument_list|,
literal|null
argument_list|)
condition|)
block|{
return|return
literal|null
return|;
block|}
if|else if
condition|(
name|matchProperty
argument_list|(
name|line
argument_list|,
name|propertyName
argument_list|)
condition|)
block|{
return|return
name|getPropertyValue
argument_list|(
name|line
argument_list|)
return|;
block|}
block|}
block|}
return|return
literal|null
return|;
block|}
specifier|public
name|void
name|setPropertyValue
parameter_list|(
name|String
name|groupName
parameter_list|,
name|String
name|propertyName
parameter_list|,
name|String
name|propertyValue
parameter_list|,
name|boolean
name|save
parameter_list|)
block|{
name|load
argument_list|()
expr_stmt|;
name|boolean
name|groupMatched
init|=
literal|false
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|myLines
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
name|String
name|line
init|=
name|myLines
index|[
name|i
index|]
decl_stmt|;
if|if
condition|(
name|line
operator|==
literal|null
condition|)
block|{
continue|continue;
block|}
if|if
condition|(
operator|!
name|groupMatched
operator|&&
name|matchGroup
argument_list|(
name|line
argument_list|,
name|groupName
argument_list|)
condition|)
block|{
name|groupMatched
operator|=
literal|true
expr_stmt|;
block|}
if|else if
condition|(
name|groupMatched
condition|)
block|{
if|if
condition|(
name|matchGroup
argument_list|(
name|line
argument_list|,
literal|null
argument_list|)
comment|/* or last line found*/
condition|)
block|{
comment|// property was not saved!!!
if|if
condition|(
name|propertyValue
operator|!=
literal|null
condition|)
block|{
name|String
index|[]
name|lines
init|=
operator|new
name|String
index|[
name|myLines
operator|.
name|length
operator|+
literal|1
index|]
decl_stmt|;
name|System
operator|.
name|arraycopy
argument_list|(
name|myLines
argument_list|,
literal|0
argument_list|,
name|lines
argument_list|,
literal|0
argument_list|,
name|i
argument_list|)
expr_stmt|;
name|System
operator|.
name|arraycopy
argument_list|(
name|myLines
argument_list|,
name|i
argument_list|,
name|lines
argument_list|,
name|i
operator|+
literal|1
argument_list|,
name|myLines
operator|.
name|length
operator|-
name|i
argument_list|)
expr_stmt|;
name|lines
index|[
name|i
index|]
operator|=
name|propertyName
operator|+
literal|"  = "
operator|+
name|propertyValue
expr_stmt|;
name|myLines
operator|=
name|lines
expr_stmt|;
if|if
condition|(
name|save
condition|)
block|{
name|save
argument_list|()
expr_stmt|;
block|}
block|}
return|return;
block|}
if|else if
condition|(
name|matchProperty
argument_list|(
name|line
argument_list|,
name|propertyName
argument_list|)
condition|)
block|{
if|if
condition|(
name|propertyValue
operator|==
literal|null
condition|)
block|{
name|myLines
index|[
name|i
index|]
operator|=
literal|null
expr_stmt|;
block|}
else|else
block|{
name|myLines
index|[
name|i
index|]
operator|=
name|propertyName
operator|+
literal|" = "
operator|+
name|propertyValue
expr_stmt|;
block|}
if|if
condition|(
name|save
condition|)
block|{
name|save
argument_list|()
expr_stmt|;
block|}
return|return;
block|}
block|}
block|}
if|if
condition|(
name|propertyValue
operator|!=
literal|null
condition|)
block|{
name|String
index|[]
name|lines
init|=
operator|new
name|String
index|[
name|myLines
operator|.
name|length
operator|+
operator|(
name|groupMatched
condition|?
literal|1
else|:
literal|2
operator|)
index|]
decl_stmt|;
if|if
condition|(
operator|!
name|groupMatched
condition|)
block|{
name|lines
index|[
name|lines
operator|.
name|length
operator|-
literal|2
index|]
operator|=
literal|"["
operator|+
name|groupName
operator|+
literal|"]"
expr_stmt|;
block|}
name|lines
index|[
name|lines
operator|.
name|length
operator|-
literal|1
index|]
operator|=
name|propertyName
operator|+
literal|"  = "
operator|+
name|propertyValue
expr_stmt|;
name|System
operator|.
name|arraycopy
argument_list|(
name|myLines
argument_list|,
literal|0
argument_list|,
name|lines
argument_list|,
literal|0
argument_list|,
name|myLines
operator|.
name|length
argument_list|)
expr_stmt|;
name|myLines
operator|=
name|lines
expr_stmt|;
if|if
condition|(
name|save
condition|)
block|{
name|save
argument_list|()
expr_stmt|;
block|}
block|}
block|}
specifier|public
name|void
name|deleteGroup
parameter_list|(
name|String
name|groupName
parameter_list|,
name|boolean
name|save
parameter_list|)
block|{
name|load
argument_list|()
expr_stmt|;
name|boolean
name|groupMatched
init|=
literal|false
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|myLines
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
name|String
name|line
init|=
name|myLines
index|[
name|i
index|]
decl_stmt|;
if|if
condition|(
name|line
operator|==
literal|null
condition|)
block|{
continue|continue;
block|}
if|if
condition|(
operator|!
name|groupMatched
operator|&&
name|matchGroup
argument_list|(
name|line
argument_list|,
name|groupName
argument_list|)
condition|)
block|{
name|groupMatched
operator|=
literal|true
expr_stmt|;
name|myLines
index|[
name|i
index|]
operator|=
literal|null
expr_stmt|;
block|}
if|else if
condition|(
name|groupMatched
condition|)
block|{
if|if
condition|(
name|matchGroup
argument_list|(
name|line
argument_list|,
literal|null
argument_list|)
comment|/* or last line found*/
condition|)
block|{
break|break;
block|}
name|myLines
index|[
name|i
index|]
operator|=
literal|null
expr_stmt|;
block|}
block|}
if|if
condition|(
name|save
condition|)
block|{
name|save
argument_list|()
expr_stmt|;
block|}
block|}
specifier|private
specifier|static
name|boolean
name|matchGroup
parameter_list|(
name|String
name|line
parameter_list|,
name|String
name|name
parameter_list|)
block|{
name|line
operator|=
name|line
operator|.
name|trim
argument_list|()
expr_stmt|;
if|if
condition|(
name|line
operator|.
name|startsWith
argument_list|(
literal|"["
argument_list|)
operator|&&
name|line
operator|.
name|endsWith
argument_list|(
literal|"]"
argument_list|)
condition|)
block|{
return|return
name|name
operator|==
literal|null
operator|||
name|line
operator|.
name|substring
argument_list|(
literal|1
argument_list|,
name|line
operator|.
name|length
argument_list|()
operator|-
literal|1
argument_list|)
operator|.
name|equals
argument_list|(
name|name
argument_list|)
return|;
block|}
return|return
literal|false
return|;
block|}
specifier|private
specifier|static
name|boolean
name|matchProperty
parameter_list|(
name|String
name|line
parameter_list|,
name|String
name|name
parameter_list|)
block|{
name|line
operator|=
name|line
operator|.
name|trim
argument_list|()
expr_stmt|;
if|if
condition|(
name|line
operator|.
name|startsWith
argument_list|(
literal|"#"
argument_list|)
condition|)
block|{
return|return
literal|false
return|;
block|}
if|if
condition|(
name|line
operator|.
name|indexOf
argument_list|(
literal|'='
argument_list|)
operator|<
literal|0
condition|)
block|{
return|return
literal|false
return|;
block|}
name|line
operator|=
name|line
operator|.
name|substring
argument_list|(
literal|0
argument_list|,
name|line
operator|.
name|indexOf
argument_list|(
literal|'='
argument_list|)
argument_list|)
expr_stmt|;
return|return
name|name
operator|==
literal|null
operator|||
name|line
operator|.
name|trim
argument_list|()
operator|.
name|equals
argument_list|(
name|name
argument_list|)
return|;
block|}
specifier|private
specifier|static
name|String
name|getPropertyValue
parameter_list|(
name|String
name|line
parameter_list|)
block|{
name|line
operator|=
name|line
operator|.
name|trim
argument_list|()
expr_stmt|;
if|if
condition|(
name|line
operator|.
name|indexOf
argument_list|(
literal|'='
argument_list|)
operator|<
literal|0
condition|)
block|{
return|return
literal|null
return|;
block|}
name|line
operator|=
name|line
operator|.
name|substring
argument_list|(
name|line
operator|.
name|indexOf
argument_list|(
literal|'='
argument_list|)
operator|+
literal|1
argument_list|)
expr_stmt|;
return|return
name|line
operator|.
name|trim
argument_list|()
return|;
block|}
specifier|private
specifier|static
name|String
name|getPropertyName
parameter_list|(
name|String
name|line
parameter_list|)
block|{
name|line
operator|=
name|line
operator|.
name|trim
argument_list|()
expr_stmt|;
if|if
condition|(
name|line
operator|.
name|indexOf
argument_list|(
literal|'='
argument_list|)
operator|<
literal|0
condition|)
block|{
return|return
literal|null
return|;
block|}
name|line
operator|=
name|line
operator|.
name|substring
argument_list|(
literal|0
argument_list|,
name|line
operator|.
name|indexOf
argument_list|(
literal|'='
argument_list|)
argument_list|)
expr_stmt|;
return|return
name|line
operator|.
name|trim
argument_list|()
return|;
block|}
comment|// parse all lines from the file, keep them as lines array.
specifier|public
name|void
name|save
parameter_list|()
block|{
if|if
condition|(
name|myLines
operator|==
literal|null
condition|)
block|{
return|return;
block|}
if|if
condition|(
name|myFile
operator|.
name|isDirectory
argument_list|()
condition|)
block|{
return|return;
block|}
if|if
condition|(
name|myFile
operator|.
name|getParentFile
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|myFile
operator|.
name|getParentFile
argument_list|()
operator|.
name|mkdirs
argument_list|()
expr_stmt|;
block|}
name|Writer
name|writer
init|=
literal|null
decl_stmt|;
name|String
name|eol
init|=
name|System
operator|.
name|getProperty
argument_list|(
literal|"line.separator"
argument_list|)
decl_stmt|;
name|eol
operator|=
name|eol
operator|==
literal|null
condition|?
literal|"\n"
else|:
name|eol
expr_stmt|;
try|try
block|{
name|writer
operator|=
name|myFile
operator|.
name|getWriter
argument_list|()
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|myLines
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
name|String
name|line
init|=
name|myLines
index|[
name|i
index|]
decl_stmt|;
if|if
condition|(
name|line
operator|==
literal|null
condition|)
block|{
continue|continue;
block|}
name|writer
operator|.
name|write
argument_list|(
name|line
argument_list|)
expr_stmt|;
name|writer
operator|.
name|write
argument_list|(
name|eol
argument_list|)
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
comment|//
block|}
finally|finally
block|{
name|SVNFileUtil
operator|.
name|closeFile
argument_list|(
name|writer
argument_list|)
expr_stmt|;
block|}
name|myLastModified
operator|=
name|myFile
operator|.
name|lastModified
argument_list|()
expr_stmt|;
name|myLines
operator|=
name|doLoad
argument_list|(
name|myFile
argument_list|)
expr_stmt|;
block|}
specifier|private
name|void
name|load
parameter_list|()
block|{
if|if
condition|(
name|myLines
operator|!=
literal|null
operator|&&
name|myFile
operator|.
name|lastModified
argument_list|()
operator|==
name|myLastModified
condition|)
block|{
return|return;
block|}
name|myLastModified
operator|=
name|myFile
operator|.
name|lastModified
argument_list|()
expr_stmt|;
name|myLines
operator|=
name|doLoad
argument_list|(
name|myFile
argument_list|)
expr_stmt|;
name|myLastModified
operator|=
name|myFile
operator|.
name|lastModified
argument_list|()
expr_stmt|;
block|}
specifier|public
name|boolean
name|isModified
parameter_list|()
block|{
if|if
condition|(
name|myLines
operator|==
literal|null
condition|)
block|{
return|return
literal|false
return|;
block|}
name|String
index|[]
name|lines
init|=
name|doLoad
argument_list|(
name|myFile
argument_list|)
decl_stmt|;
if|if
condition|(
name|lines
operator|.
name|length
operator|!=
name|myLines
operator|.
name|length
condition|)
block|{
return|return
literal|true
return|;
block|}
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|myLines
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
name|String
name|line
init|=
name|myLines
index|[
name|i
index|]
decl_stmt|;
if|if
condition|(
name|line
operator|==
literal|null
condition|)
block|{
return|return
literal|true
return|;
block|}
if|if
condition|(
operator|!
name|line
operator|.
name|equals
argument_list|(
name|lines
index|[
name|i
index|]
argument_list|)
condition|)
block|{
return|return
literal|true
return|;
block|}
block|}
return|return
literal|false
return|;
block|}
specifier|private
name|String
index|[]
name|doLoad
parameter_list|(
name|Resource
name|file
parameter_list|)
block|{
if|if
condition|(
operator|!
name|file
operator|.
name|isFile
argument_list|()
operator|||
operator|!
name|file
operator|.
name|canRead
argument_list|()
condition|)
block|{
return|return
operator|new
name|String
index|[
literal|0
index|]
return|;
block|}
name|BufferedReader
name|reader
init|=
literal|null
decl_stmt|;
name|Collection
name|lines
init|=
operator|new
name|ArrayList
argument_list|()
decl_stmt|;
try|try
block|{
name|reader
operator|=
operator|new
name|BufferedReader
argument_list|(
name|file
operator|.
name|getReader
argument_list|()
argument_list|)
expr_stmt|;
name|String
name|line
decl_stmt|;
while|while
condition|(
operator|(
name|line
operator|=
name|reader
operator|.
name|readLine
argument_list|()
operator|)
operator|!=
literal|null
condition|)
block|{
name|lines
operator|.
name|add
argument_list|(
name|line
argument_list|)
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
name|lines
operator|.
name|clear
argument_list|()
expr_stmt|;
block|}
finally|finally
block|{
name|SVNFileUtil
operator|.
name|closeFile
argument_list|(
name|reader
argument_list|)
expr_stmt|;
block|}
return|return
operator|(
name|String
index|[]
operator|)
name|lines
operator|.
name|toArray
argument_list|(
operator|new
name|String
index|[
name|lines
operator|.
name|size
argument_list|()
index|]
argument_list|)
return|;
block|}
specifier|public
specifier|static
name|void
name|createDefaultConfiguration
parameter_list|(
name|File
name|configDir
parameter_list|)
block|{
if|if
condition|(
operator|!
name|configDir
operator|.
name|isDirectory
argument_list|()
condition|)
block|{
if|if
condition|(
operator|!
name|configDir
operator|.
name|mkdirs
argument_list|()
condition|)
block|{
return|return;
block|}
block|}
name|DBBroker
name|broker
init|=
literal|null
decl_stmt|;
name|Subject
name|subject
init|=
literal|null
decl_stmt|;
try|try
block|{
name|broker
operator|=
name|BrokerPool
operator|.
name|getInstance
argument_list|()
operator|.
name|getActiveBroker
argument_list|()
expr_stmt|;
name|subject
operator|=
name|broker
operator|.
name|getSubject
argument_list|()
expr_stmt|;
name|broker
operator|.
name|setSubject
argument_list|(
name|broker
operator|.
name|getBrokerPool
argument_list|()
operator|.
name|getSecurityManager
argument_list|()
operator|.
name|getSystemSubject
argument_list|()
argument_list|)
expr_stmt|;
name|Resource
name|configFile
init|=
operator|new
name|Resource
argument_list|(
name|configDir
argument_list|,
literal|"config"
argument_list|)
decl_stmt|;
name|Resource
name|serversFile
init|=
operator|new
name|Resource
argument_list|(
name|configDir
argument_list|,
literal|"servers"
argument_list|)
decl_stmt|;
name|Resource
name|readmeFile
init|=
operator|new
name|Resource
argument_list|(
name|configDir
argument_list|,
literal|"README.txt"
argument_list|)
decl_stmt|;
name|writeFile
argument_list|(
literal|"/org/tmatesoft/svn/core/internal/wc/config/config"
argument_list|,
name|configFile
argument_list|)
expr_stmt|;
name|writeFile
argument_list|(
literal|"/org/tmatesoft/svn/core/internal/wc/config/servers"
argument_list|,
name|serversFile
argument_list|)
expr_stmt|;
name|writeFile
argument_list|(
literal|"/org/tmatesoft/svn/core/internal/wc/config/README.txt"
argument_list|,
name|readmeFile
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|EXistException
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|debug
argument_list|(
name|e
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
if|if
condition|(
name|broker
operator|!=
literal|null
operator|&&
name|subject
operator|!=
literal|null
condition|)
name|broker
operator|.
name|setSubject
argument_list|(
name|subject
argument_list|)
expr_stmt|;
block|}
block|}
specifier|private
specifier|static
name|void
name|writeFile
parameter_list|(
name|String
name|url
parameter_list|,
name|Resource
name|configFile
parameter_list|)
block|{
if|if
condition|(
name|url
operator|==
literal|null
operator|||
name|configFile
operator|==
literal|null
operator|||
name|configFile
operator|.
name|exists
argument_list|()
condition|)
block|{
return|return;
block|}
name|InputStream
name|resource
init|=
name|SVNConfigFile
operator|.
name|class
operator|.
name|getResourceAsStream
argument_list|(
name|url
argument_list|)
decl_stmt|;
if|if
condition|(
name|resource
operator|==
literal|null
condition|)
block|{
return|return;
block|}
name|BufferedReader
name|is
init|=
operator|new
name|BufferedReader
argument_list|(
operator|new
name|InputStreamReader
argument_list|(
name|resource
argument_list|)
argument_list|)
decl_stmt|;
name|String
name|eol
init|=
name|System
operator|.
name|getProperty
argument_list|(
literal|"line.separator"
argument_list|,
literal|"\n"
argument_list|)
decl_stmt|;
name|Writer
name|os
init|=
literal|null
decl_stmt|;
try|try
block|{
comment|//            os = new BufferedWriter(new OutputStreamWriter(SVNFileUtil.openFileForWriting(configFile)));
name|os
operator|=
name|SVNFileUtil
operator|.
name|openFileForWriting
argument_list|(
name|configFile
argument_list|)
expr_stmt|;
name|String
name|line
decl_stmt|;
while|while
condition|(
operator|(
name|line
operator|=
name|is
operator|.
name|readLine
argument_list|()
operator|)
operator|!=
literal|null
condition|)
block|{
name|os
operator|.
name|write
argument_list|(
name|line
argument_list|)
expr_stmt|;
name|os
operator|.
name|write
argument_list|(
name|eol
argument_list|)
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
comment|//
block|}
catch|catch
parameter_list|(
name|SVNException
name|e
parameter_list|)
block|{
comment|//
block|}
finally|finally
block|{
name|SVNFileUtil
operator|.
name|closeFile
argument_list|(
name|os
argument_list|)
expr_stmt|;
name|SVNFileUtil
operator|.
name|closeFile
argument_list|(
name|is
argument_list|)
expr_stmt|;
block|}
block|}
block|}
end_class

end_unit

