begin_unit|revision:1.0.0;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * ====================================================================  * Copyright (c) 2004-2010 TMate Software Ltd.  All rights reserved.  *  * This software is licensed as described in the file COPYING, which  * you should have received as part of this distribution.  The terms  * are also available at http://svnkit.com/license.html  * If newer versions of this license are posted there, you may use a  * newer version instead, at your option.  * ====================================================================  */
end_comment

begin_package
package|package
name|org
operator|.
name|exist
operator|.
name|versioning
operator|.
name|svn
operator|.
name|internal
operator|.
name|wc
operator|.
name|admin
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|BufferedReader
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|File
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|InputStreamReader
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|OutputStreamWriter
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|Writer
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collection
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Iterator
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|versioning
operator|.
name|svn
operator|.
name|Resource
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|versioning
operator|.
name|svn
operator|.
name|internal
operator|.
name|wc
operator|.
name|SVNErrorManager
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|versioning
operator|.
name|svn
operator|.
name|internal
operator|.
name|wc
operator|.
name|SVNFileUtil
import|;
end_import

begin_import
import|import
name|org
operator|.
name|tmatesoft
operator|.
name|svn
operator|.
name|core
operator|.
name|SVNErrorCode
import|;
end_import

begin_import
import|import
name|org
operator|.
name|tmatesoft
operator|.
name|svn
operator|.
name|core
operator|.
name|SVNErrorMessage
import|;
end_import

begin_import
import|import
name|org
operator|.
name|tmatesoft
operator|.
name|svn
operator|.
name|core
operator|.
name|SVNException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|tmatesoft
operator|.
name|svn
operator|.
name|core
operator|.
name|SVNProperties
import|;
end_import

begin_import
import|import
name|org
operator|.
name|tmatesoft
operator|.
name|svn
operator|.
name|core
operator|.
name|SVNPropertyValue
import|;
end_import

begin_import
import|import
name|org
operator|.
name|tmatesoft
operator|.
name|svn
operator|.
name|core
operator|.
name|internal
operator|.
name|util
operator|.
name|SVNEncodingUtil
import|;
end_import

begin_import
import|import
name|org
operator|.
name|tmatesoft
operator|.
name|svn
operator|.
name|util
operator|.
name|SVNLogType
import|;
end_import

begin_comment
comment|/**  * @version 1.3  * @author  TMate Software Ltd.  */
end_comment

begin_class
specifier|public
class|class
name|SVNLogImpl
extends|extends
name|SVNLog
block|{
specifier|private
name|Resource
name|myFile
decl_stmt|;
specifier|private
name|Resource
name|myTmpFile
decl_stmt|;
specifier|public
name|SVNLogImpl
parameter_list|(
name|Resource
name|logFile
parameter_list|,
name|Resource
name|tmpFile
parameter_list|,
name|SVNAdminArea
name|adminArea
parameter_list|)
block|{
name|super
argument_list|(
name|adminArea
argument_list|)
expr_stmt|;
name|myFile
operator|=
name|logFile
expr_stmt|;
name|myTmpFile
operator|=
name|tmpFile
expr_stmt|;
block|}
specifier|public
name|void
name|save
parameter_list|()
throws|throws
name|SVNException
block|{
if|if
condition|(
name|myTmpFile
operator|==
literal|null
operator|||
name|myCache
operator|==
literal|null
condition|)
block|{
return|return;
block|}
name|Writer
name|os
init|=
literal|null
decl_stmt|;
try|try
block|{
comment|//            os = new OutputStreamWriter(SVNFileUtil.openFileForWriting(myTmpFile), "UTF-8");
name|os
operator|=
name|SVNFileUtil
operator|.
name|openFileForWriting
argument_list|(
name|myTmpFile
argument_list|)
expr_stmt|;
for|for
control|(
name|Iterator
name|commands
init|=
name|myCache
operator|.
name|iterator
argument_list|()
init|;
name|commands
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|SVNProperties
name|command
init|=
operator|(
name|SVNProperties
operator|)
name|commands
operator|.
name|next
argument_list|()
decl_stmt|;
name|SVNPropertyValue
name|name
init|=
name|command
operator|.
name|remove
argument_list|(
literal|""
argument_list|)
decl_stmt|;
name|os
operator|.
name|write
argument_list|(
literal|"<"
argument_list|)
expr_stmt|;
name|os
operator|.
name|write
argument_list|(
name|name
operator|.
name|getString
argument_list|()
argument_list|)
expr_stmt|;
for|for
control|(
name|Iterator
name|attrs
init|=
name|command
operator|.
name|nameSet
argument_list|()
operator|.
name|iterator
argument_list|()
init|;
name|attrs
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|String
name|attr
init|=
operator|(
name|String
operator|)
name|attrs
operator|.
name|next
argument_list|()
decl_stmt|;
name|SVNPropertyValue
name|value
init|=
name|command
operator|.
name|getSVNPropertyValue
argument_list|(
name|attr
argument_list|)
decl_stmt|;
name|String
name|str
init|=
literal|null
decl_stmt|;
if|if
condition|(
name|value
operator|==
literal|null
condition|)
block|{
name|str
operator|=
literal|""
expr_stmt|;
block|}
else|else
block|{
name|str
operator|=
name|SVNPropertyValue
operator|.
name|getPropertyAsString
argument_list|(
name|value
argument_list|)
expr_stmt|;
block|}
name|str
operator|=
name|SVNEncodingUtil
operator|.
name|xmlEncodeAttr
argument_list|(
name|str
argument_list|)
expr_stmt|;
name|os
operator|.
name|write
argument_list|(
literal|"\n   "
argument_list|)
expr_stmt|;
name|os
operator|.
name|write
argument_list|(
name|attr
argument_list|)
expr_stmt|;
name|os
operator|.
name|write
argument_list|(
literal|"=\""
argument_list|)
expr_stmt|;
name|os
operator|.
name|write
argument_list|(
name|str
argument_list|)
expr_stmt|;
name|os
operator|.
name|write
argument_list|(
literal|"\""
argument_list|)
expr_stmt|;
block|}
name|os
operator|.
name|write
argument_list|(
literal|"/>\n"
argument_list|)
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
name|SVNErrorMessage
name|err
init|=
name|SVNErrorMessage
operator|.
name|create
argument_list|(
name|SVNErrorCode
operator|.
name|IO_ERROR
argument_list|,
literal|"Cannot write log file ''{0}'': {1}"
argument_list|,
operator|new
name|Object
index|[]
block|{
name|myFile
block|,
name|e
operator|.
name|getLocalizedMessage
argument_list|()
block|}
argument_list|)
decl_stmt|;
name|SVNErrorManager
operator|.
name|error
argument_list|(
name|err
argument_list|,
name|e
argument_list|,
name|SVNLogType
operator|.
name|WC
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
name|SVNFileUtil
operator|.
name|closeFile
argument_list|(
name|os
argument_list|)
expr_stmt|;
name|myCache
operator|=
literal|null
expr_stmt|;
block|}
name|SVNFileUtil
operator|.
name|rename
argument_list|(
name|myTmpFile
argument_list|,
name|myFile
argument_list|)
expr_stmt|;
name|SVNFileUtil
operator|.
name|setReadonly
argument_list|(
name|myFile
argument_list|,
literal|true
argument_list|)
expr_stmt|;
block|}
specifier|public
name|Collection
name|readCommands
parameter_list|()
throws|throws
name|SVNException
block|{
if|if
condition|(
operator|!
name|myFile
operator|.
name|exists
argument_list|()
condition|)
block|{
return|return
literal|null
return|;
block|}
name|BufferedReader
name|reader
init|=
literal|null
decl_stmt|;
name|Collection
name|commands
init|=
operator|new
name|ArrayList
argument_list|()
decl_stmt|;
try|try
block|{
name|reader
operator|=
operator|new
name|BufferedReader
argument_list|(
operator|new
name|InputStreamReader
argument_list|(
name|SVNFileUtil
operator|.
name|openFileForReading
argument_list|(
name|myFile
argument_list|,
name|SVNLogType
operator|.
name|WC
argument_list|)
argument_list|,
literal|"UTF-8"
argument_list|)
argument_list|)
expr_stmt|;
name|String
name|line
decl_stmt|;
name|SVNProperties
name|attrs
init|=
operator|new
name|SVNProperties
argument_list|()
decl_stmt|;
name|String
name|name
init|=
literal|null
decl_stmt|;
while|while
condition|(
operator|(
name|line
operator|=
name|reader
operator|.
name|readLine
argument_list|()
operator|)
operator|!=
literal|null
condition|)
block|{
name|line
operator|=
name|line
operator|.
name|trim
argument_list|()
expr_stmt|;
if|if
condition|(
name|line
operator|.
name|startsWith
argument_list|(
literal|"<"
argument_list|)
condition|)
block|{
name|name
operator|=
name|line
operator|.
name|substring
argument_list|(
literal|1
argument_list|)
expr_stmt|;
continue|continue;
block|}
name|int
name|index
init|=
name|line
operator|.
name|indexOf
argument_list|(
literal|'='
argument_list|)
decl_stmt|;
if|if
condition|(
name|index
operator|>
literal|0
condition|)
block|{
name|String
name|attrName
init|=
name|line
operator|.
name|substring
argument_list|(
literal|0
argument_list|,
name|index
argument_list|)
operator|.
name|trim
argument_list|()
decl_stmt|;
name|String
name|value
init|=
name|line
operator|.
name|substring
argument_list|(
name|index
operator|+
literal|1
argument_list|)
operator|.
name|trim
argument_list|()
decl_stmt|;
if|if
condition|(
name|value
operator|.
name|endsWith
argument_list|(
literal|"/>"
argument_list|)
condition|)
block|{
name|value
operator|=
name|value
operator|.
name|substring
argument_list|(
literal|0
argument_list|,
name|value
operator|.
name|length
argument_list|()
operator|-
literal|"/>"
operator|.
name|length
argument_list|()
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|value
operator|.
name|startsWith
argument_list|(
literal|"\""
argument_list|)
condition|)
block|{
name|value
operator|=
name|value
operator|.
name|substring
argument_list|(
literal|1
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|value
operator|.
name|endsWith
argument_list|(
literal|"\""
argument_list|)
condition|)
block|{
name|value
operator|=
name|value
operator|.
name|substring
argument_list|(
literal|0
argument_list|,
name|value
operator|.
name|length
argument_list|()
operator|-
literal|1
argument_list|)
expr_stmt|;
block|}
name|value
operator|=
name|SVNEncodingUtil
operator|.
name|xmlDecode
argument_list|(
name|value
argument_list|)
expr_stmt|;
if|if
condition|(
literal|""
operator|.
name|equals
argument_list|(
name|value
argument_list|)
operator|&&
operator|!
name|SVNLog
operator|.
name|NAME_ATTR
operator|.
name|equals
argument_list|(
name|attrName
argument_list|)
condition|)
block|{
name|value
operator|=
literal|null
expr_stmt|;
block|}
name|attrs
operator|.
name|put
argument_list|(
name|attrName
argument_list|,
name|value
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|line
operator|.
name|endsWith
argument_list|(
literal|"/>"
argument_list|)
operator|&&
name|name
operator|!=
literal|null
condition|)
block|{
comment|// run command
name|attrs
operator|.
name|put
argument_list|(
literal|""
argument_list|,
name|name
argument_list|)
expr_stmt|;
name|commands
operator|.
name|add
argument_list|(
name|attrs
argument_list|)
expr_stmt|;
name|attrs
operator|=
operator|new
name|SVNProperties
argument_list|()
expr_stmt|;
name|name
operator|=
literal|null
expr_stmt|;
block|}
block|}
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
name|SVNErrorMessage
name|err
init|=
name|SVNErrorMessage
operator|.
name|create
argument_list|(
name|SVNErrorCode
operator|.
name|IO_ERROR
argument_list|,
literal|"Cannot read log file ''{0}'': {1}"
argument_list|,
operator|new
name|Object
index|[]
block|{
name|myFile
block|,
name|e
operator|.
name|getLocalizedMessage
argument_list|()
block|}
argument_list|)
decl_stmt|;
name|SVNErrorManager
operator|.
name|error
argument_list|(
name|err
argument_list|,
name|e
argument_list|,
name|SVNLogType
operator|.
name|WC
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
name|SVNFileUtil
operator|.
name|closeFile
argument_list|(
name|reader
argument_list|)
expr_stmt|;
block|}
return|return
name|commands
return|;
block|}
specifier|public
name|String
name|toString
parameter_list|()
block|{
return|return
literal|"Log: "
operator|+
name|myFile
return|;
block|}
specifier|public
name|void
name|delete
parameter_list|()
throws|throws
name|SVNException
block|{
name|SVNFileUtil
operator|.
name|deleteFile
argument_list|(
name|myFile
argument_list|)
expr_stmt|;
name|SVNFileUtil
operator|.
name|deleteFile
argument_list|(
name|myTmpFile
argument_list|)
expr_stmt|;
block|}
specifier|public
name|boolean
name|exists
parameter_list|()
block|{
return|return
name|myFile
operator|.
name|exists
argument_list|()
return|;
block|}
block|}
end_class

end_unit

