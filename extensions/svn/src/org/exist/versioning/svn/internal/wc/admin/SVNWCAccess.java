begin_unit|revision:1.0.0;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * ====================================================================  * Copyright (c) 2004-2010 TMate Software Ltd.  All rights reserved.  *  * This software is licensed as described in the file COPYING, which  * you should have received as part of this distribution.  The terms  * are also available at http://svnkit.com/license.html  * If newer versions of this license are posted there, you may use a  * newer version instead, at your option.  * ====================================================================  */
end_comment

begin_package
package|package
name|org
operator|.
name|exist
operator|.
name|versioning
operator|.
name|svn
operator|.
name|internal
operator|.
name|wc
operator|.
name|admin
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|File
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collection
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Iterator
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Set
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|logging
operator|.
name|Level
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|versioning
operator|.
name|svn
operator|.
name|Resource
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|versioning
operator|.
name|svn
operator|.
name|internal
operator|.
name|wc
operator|.
name|DefaultSVNOptions
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|versioning
operator|.
name|svn
operator|.
name|internal
operator|.
name|wc
operator|.
name|SVNErrorManager
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|versioning
operator|.
name|svn
operator|.
name|internal
operator|.
name|wc
operator|.
name|SVNFileType
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|versioning
operator|.
name|svn
operator|.
name|internal
operator|.
name|wc
operator|.
name|SVNFileUtil
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|versioning
operator|.
name|svn
operator|.
name|internal
operator|.
name|wc
operator|.
name|SVNMergeCallback
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|versioning
operator|.
name|svn
operator|.
name|internal
operator|.
name|wc
operator|.
name|SVNMergeCallback15
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|versioning
operator|.
name|svn
operator|.
name|internal
operator|.
name|wc
operator|.
name|SVNMergeDriver
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|versioning
operator|.
name|svn
operator|.
name|internal
operator|.
name|wc
operator|.
name|SVNUpdateEditor
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|versioning
operator|.
name|svn
operator|.
name|internal
operator|.
name|wc
operator|.
name|SVNUpdateEditor15
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|versioning
operator|.
name|svn
operator|.
name|wc
operator|.
name|ISVNEventHandler
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|versioning
operator|.
name|svn
operator|.
name|wc
operator|.
name|ISVNOptions
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|versioning
operator|.
name|svn
operator|.
name|wc
operator|.
name|SVNEvent
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|versioning
operator|.
name|svn
operator|.
name|wc
operator|.
name|SVNTreeConflictDescription
import|;
end_import

begin_import
import|import
name|org
operator|.
name|tmatesoft
operator|.
name|svn
operator|.
name|core
operator|.
name|SVNCancelException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|tmatesoft
operator|.
name|svn
operator|.
name|core
operator|.
name|SVNDepth
import|;
end_import

begin_import
import|import
name|org
operator|.
name|tmatesoft
operator|.
name|svn
operator|.
name|core
operator|.
name|SVNErrorCode
import|;
end_import

begin_import
import|import
name|org
operator|.
name|tmatesoft
operator|.
name|svn
operator|.
name|core
operator|.
name|SVNErrorMessage
import|;
end_import

begin_import
import|import
name|org
operator|.
name|tmatesoft
operator|.
name|svn
operator|.
name|core
operator|.
name|SVNException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|tmatesoft
operator|.
name|svn
operator|.
name|core
operator|.
name|SVNNodeKind
import|;
end_import

begin_import
import|import
name|org
operator|.
name|tmatesoft
operator|.
name|svn
operator|.
name|core
operator|.
name|SVNURL
import|;
end_import

begin_import
import|import
name|org
operator|.
name|tmatesoft
operator|.
name|svn
operator|.
name|core
operator|.
name|internal
operator|.
name|util
operator|.
name|SVNEncodingUtil
import|;
end_import

begin_import
import|import
name|org
operator|.
name|tmatesoft
operator|.
name|svn
operator|.
name|core
operator|.
name|internal
operator|.
name|util
operator|.
name|SVNHashMap
import|;
end_import

begin_import
import|import
name|org
operator|.
name|tmatesoft
operator|.
name|svn
operator|.
name|core
operator|.
name|internal
operator|.
name|util
operator|.
name|SVNHashSet
import|;
end_import

begin_import
import|import
name|org
operator|.
name|tmatesoft
operator|.
name|svn
operator|.
name|core
operator|.
name|internal
operator|.
name|util
operator|.
name|SVNPathUtil
import|;
end_import

begin_import
import|import
name|org
operator|.
name|tmatesoft
operator|.
name|svn
operator|.
name|core
operator|.
name|internal
operator|.
name|wc
operator|.
name|ISVNFileFetcher
import|;
end_import

begin_import
import|import
name|org
operator|.
name|tmatesoft
operator|.
name|svn
operator|.
name|core
operator|.
name|internal
operator|.
name|wc
operator|.
name|ISVNUpdateEditor
import|;
end_import

begin_import
import|import
name|org
operator|.
name|tmatesoft
operator|.
name|svn
operator|.
name|core
operator|.
name|wc
operator|.
name|SVNDiffOptions
import|;
end_import

begin_import
import|import
name|org
operator|.
name|tmatesoft
operator|.
name|svn
operator|.
name|util
operator|.
name|SVNLogType
import|;
end_import

begin_comment
comment|/**  * @version 1.3  * @author  TMate Software Ltd.  */
end_comment

begin_class
specifier|public
class|class
name|SVNWCAccess
implements|implements
name|ISVNEventHandler
block|{
specifier|public
specifier|static
specifier|final
name|int
name|INFINITE_DEPTH
init|=
operator|-
literal|1
decl_stmt|;
specifier|private
name|ISVNEventHandler
name|myEventHandler
decl_stmt|;
specifier|private
name|ISVNOptions
name|myOptions
decl_stmt|;
specifier|private
name|Map
name|myAdminAreas
decl_stmt|;
specifier|private
name|Map
name|myCleanupHandlers
decl_stmt|;
specifier|private
name|File
name|myAnchor
decl_stmt|;
specifier|public
specifier|static
name|SVNWCAccess
name|newInstance
parameter_list|(
name|ISVNEventHandler
name|eventHandler
parameter_list|)
block|{
return|return
operator|new
name|SVNWCAccess
argument_list|(
name|eventHandler
argument_list|)
return|;
block|}
specifier|private
name|SVNWCAccess
parameter_list|(
name|ISVNEventHandler
name|handler
parameter_list|)
block|{
name|myEventHandler
operator|=
name|handler
expr_stmt|;
block|}
specifier|public
name|void
name|setEventHandler
parameter_list|(
name|ISVNEventHandler
name|handler
parameter_list|)
block|{
name|myEventHandler
operator|=
name|handler
expr_stmt|;
block|}
specifier|public
name|ISVNEventHandler
name|getEventHandler
parameter_list|()
block|{
return|return
name|myEventHandler
return|;
block|}
specifier|public
name|void
name|checkCancelled
parameter_list|()
throws|throws
name|SVNCancelException
block|{
if|if
condition|(
name|myEventHandler
operator|!=
literal|null
condition|)
block|{
name|myEventHandler
operator|.
name|checkCancelled
argument_list|()
expr_stmt|;
block|}
block|}
specifier|public
name|void
name|handleEvent
parameter_list|(
name|SVNEvent
name|event
parameter_list|)
throws|throws
name|SVNException
block|{
name|handleEvent
argument_list|(
name|event
argument_list|,
name|ISVNEventHandler
operator|.
name|UNKNOWN
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|registerCleanupHandler
parameter_list|(
name|SVNAdminArea
name|area
parameter_list|,
name|ISVNCleanupHandler
name|handler
parameter_list|)
block|{
if|if
condition|(
name|area
operator|==
literal|null
operator|||
name|handler
operator|==
literal|null
condition|)
block|{
return|return;
block|}
if|if
condition|(
name|myCleanupHandlers
operator|==
literal|null
condition|)
block|{
name|myCleanupHandlers
operator|=
operator|new
name|SVNHashMap
argument_list|()
expr_stmt|;
block|}
name|myCleanupHandlers
operator|.
name|put
argument_list|(
name|area
argument_list|,
name|handler
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|handleEvent
parameter_list|(
name|SVNEvent
name|event
parameter_list|,
name|double
name|progress
parameter_list|)
throws|throws
name|SVNException
block|{
if|if
condition|(
name|myEventHandler
operator|!=
literal|null
condition|)
block|{
try|try
block|{
name|myEventHandler
operator|.
name|handleEvent
argument_list|(
name|event
argument_list|,
name|progress
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|SVNException
name|e
parameter_list|)
block|{
throw|throw
name|e
throw|;
block|}
catch|catch
parameter_list|(
name|Throwable
name|th
parameter_list|)
block|{
name|SVNErrorMessage
name|err
init|=
name|SVNErrorMessage
operator|.
name|create
argument_list|(
name|SVNErrorCode
operator|.
name|UNKNOWN
argument_list|,
literal|"Error while dispatching event: {0}"
argument_list|,
name|th
operator|.
name|getMessage
argument_list|()
argument_list|)
decl_stmt|;
name|SVNErrorManager
operator|.
name|error
argument_list|(
name|err
argument_list|,
name|th
argument_list|,
name|SVNLogType
operator|.
name|WC
argument_list|)
expr_stmt|;
block|}
block|}
block|}
specifier|public
name|void
name|setOptions
parameter_list|(
name|ISVNOptions
name|options
parameter_list|)
block|{
name|myOptions
operator|=
name|options
expr_stmt|;
block|}
specifier|public
name|ISVNOptions
name|getOptions
parameter_list|()
block|{
if|if
condition|(
name|myOptions
operator|==
literal|null
condition|)
block|{
name|myOptions
operator|=
operator|new
name|DefaultSVNOptions
argument_list|()
expr_stmt|;
block|}
return|return
name|myOptions
return|;
block|}
specifier|public
name|void
name|setAnchor
parameter_list|(
name|File
name|anchor
parameter_list|)
block|{
name|myAnchor
operator|=
name|anchor
expr_stmt|;
block|}
specifier|public
name|File
name|getAnchor
parameter_list|()
block|{
return|return
name|myAnchor
return|;
block|}
specifier|public
name|SVNAdminAreaInfo
name|openAnchor
parameter_list|(
name|File
name|path
parameter_list|,
name|boolean
name|writeLock
parameter_list|,
name|int
name|depth
parameter_list|)
throws|throws
name|SVNException
block|{
name|File
name|parent
init|=
name|path
operator|.
name|getParentFile
argument_list|()
decl_stmt|;
if|if
condition|(
name|parent
operator|==
literal|null
operator|||
literal|".."
operator|.
name|equals
argument_list|(
name|path
operator|.
name|getName
argument_list|()
argument_list|)
condition|)
block|{
name|SVNAdminArea
name|anchor
init|=
name|open
argument_list|(
name|path
argument_list|,
name|writeLock
argument_list|,
name|depth
argument_list|)
decl_stmt|;
return|return
operator|new
name|SVNAdminAreaInfo
argument_list|(
name|this
argument_list|,
name|anchor
argument_list|,
name|anchor
argument_list|,
literal|""
argument_list|)
return|;
block|}
name|String
name|name
init|=
name|path
operator|.
name|getName
argument_list|()
decl_stmt|;
name|SVNAdminArea
name|parentArea
init|=
literal|null
decl_stmt|;
name|SVNAdminArea
name|targetArea
init|=
literal|null
decl_stmt|;
name|SVNException
name|parentError
init|=
literal|null
decl_stmt|;
try|try
block|{
name|parentArea
operator|=
name|open
argument_list|(
name|parent
argument_list|,
name|writeLock
argument_list|,
literal|false
argument_list|,
literal|0
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|SVNException
name|svne
parameter_list|)
block|{
if|if
condition|(
name|writeLock
operator|&&
name|svne
operator|.
name|getErrorMessage
argument_list|()
operator|.
name|getErrorCode
argument_list|()
operator|==
name|SVNErrorCode
operator|.
name|WC_LOCKED
condition|)
block|{
try|try
block|{
name|parentArea
operator|=
name|open
argument_list|(
name|parent
argument_list|,
literal|false
argument_list|,
literal|false
argument_list|,
literal|0
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|SVNException
name|svne2
parameter_list|)
block|{
throw|throw
name|svne
throw|;
block|}
name|parentError
operator|=
name|svne
expr_stmt|;
block|}
if|else if
condition|(
name|svne
operator|.
name|getErrorMessage
argument_list|()
operator|.
name|getErrorCode
argument_list|()
operator|!=
name|SVNErrorCode
operator|.
name|WC_NOT_DIRECTORY
condition|)
block|{
throw|throw
name|svne
throw|;
block|}
block|}
try|try
block|{
name|targetArea
operator|=
name|open
argument_list|(
name|path
argument_list|,
name|writeLock
argument_list|,
literal|false
argument_list|,
name|depth
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|SVNException
name|svne
parameter_list|)
block|{
if|if
condition|(
name|parentArea
operator|==
literal|null
operator|||
name|svne
operator|.
name|getErrorMessage
argument_list|()
operator|.
name|getErrorCode
argument_list|()
operator|!=
name|SVNErrorCode
operator|.
name|WC_NOT_DIRECTORY
condition|)
block|{
try|try
block|{
name|close
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|SVNException
name|svne2
parameter_list|)
block|{
comment|//
block|}
throw|throw
name|svne
throw|;
block|}
block|}
if|if
condition|(
name|parentArea
operator|!=
literal|null
operator|&&
name|targetArea
operator|!=
literal|null
condition|)
block|{
name|SVNEntry
name|parentEntry
init|=
literal|null
decl_stmt|;
name|SVNEntry
name|targetEntry
init|=
literal|null
decl_stmt|;
name|SVNEntry
name|targetInParent
init|=
literal|null
decl_stmt|;
try|try
block|{
name|targetInParent
operator|=
name|parentArea
operator|.
name|getEntry
argument_list|(
name|name
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|targetEntry
operator|=
name|targetArea
operator|.
name|getEntry
argument_list|(
name|targetArea
operator|.
name|getThisDirName
argument_list|()
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|parentEntry
operator|=
name|parentArea
operator|.
name|getEntry
argument_list|(
name|parentArea
operator|.
name|getThisDirName
argument_list|()
argument_list|,
literal|false
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|SVNException
name|svne
parameter_list|)
block|{
try|try
block|{
name|close
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|SVNException
name|svne2
parameter_list|)
block|{
comment|//
block|}
throw|throw
name|svne
throw|;
block|}
name|SVNURL
name|parentURL
init|=
name|parentEntry
operator|!=
literal|null
condition|?
name|parentEntry
operator|.
name|getSVNURL
argument_list|()
else|:
literal|null
decl_stmt|;
name|SVNURL
name|targetURL
init|=
name|targetEntry
operator|!=
literal|null
condition|?
name|targetEntry
operator|.
name|getSVNURL
argument_list|()
else|:
literal|null
decl_stmt|;
name|String
name|encodedName
init|=
name|SVNEncodingUtil
operator|.
name|uriEncode
argument_list|(
name|name
argument_list|)
decl_stmt|;
if|if
condition|(
name|targetInParent
operator|==
literal|null
operator|||
operator|(
name|parentURL
operator|!=
literal|null
operator|&&
name|targetURL
operator|!=
literal|null
operator|&&
operator|(
operator|!
name|parentURL
operator|.
name|equals
argument_list|(
name|targetURL
operator|.
name|removePathTail
argument_list|()
argument_list|)
operator|||
operator|!
name|encodedName
operator|.
name|equals
argument_list|(
name|SVNPathUtil
operator|.
name|tail
argument_list|(
name|targetURL
operator|.
name|getURIEncodedPath
argument_list|()
argument_list|)
argument_list|)
operator|)
operator|)
condition|)
block|{
if|if
condition|(
name|myAdminAreas
operator|!=
literal|null
condition|)
block|{
name|myAdminAreas
operator|.
name|remove
argument_list|(
name|parent
argument_list|)
expr_stmt|;
block|}
try|try
block|{
name|doClose
argument_list|(
name|parentArea
argument_list|,
literal|false
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|SVNException
name|svne
parameter_list|)
block|{
try|try
block|{
name|close
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|SVNException
name|svne2
parameter_list|)
block|{
comment|//
block|}
throw|throw
name|svne
throw|;
block|}
name|parentArea
operator|=
literal|null
expr_stmt|;
block|}
block|}
if|if
condition|(
name|parentArea
operator|!=
literal|null
condition|)
block|{
if|if
condition|(
name|parentError
operator|!=
literal|null
operator|&&
name|targetArea
operator|!=
literal|null
condition|)
block|{
if|if
condition|(
name|parentError
operator|.
name|getErrorMessage
argument_list|()
operator|.
name|getErrorCode
argument_list|()
operator|==
name|SVNErrorCode
operator|.
name|WC_LOCKED
condition|)
block|{
comment|// try to work without 'anchor'
try|try
block|{
name|doClose
argument_list|(
name|parentArea
argument_list|,
literal|false
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|SVNException
name|svne
parameter_list|)
block|{
try|try
block|{
name|close
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|SVNException
name|svne2
parameter_list|)
block|{
comment|//
block|}
throw|throw
name|svne
throw|;
block|}
name|parentArea
operator|=
literal|null
expr_stmt|;
block|}
else|else
block|{
try|try
block|{
name|close
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|SVNException
name|svne
parameter_list|)
block|{
comment|//
block|}
throw|throw
name|parentError
throw|;
block|}
block|}
block|}
if|if
condition|(
name|targetArea
operator|==
literal|null
condition|)
block|{
name|SVNEntry
name|targetEntry
init|=
literal|null
decl_stmt|;
try|try
block|{
name|targetEntry
operator|=
name|parentArea
operator|.
name|getEntry
argument_list|(
name|name
argument_list|,
literal|false
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|SVNException
name|svne
parameter_list|)
block|{
try|try
block|{
name|close
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|SVNException
name|svne2
parameter_list|)
block|{
comment|//
block|}
throw|throw
name|svne
throw|;
block|}
if|if
condition|(
name|targetEntry
operator|!=
literal|null
operator|&&
name|targetEntry
operator|.
name|isDirectory
argument_list|()
condition|)
block|{
if|if
condition|(
name|myAdminAreas
operator|!=
literal|null
condition|)
block|{
name|myAdminAreas
operator|.
name|put
argument_list|(
name|path
argument_list|,
literal|null
argument_list|)
expr_stmt|;
block|}
block|}
block|}
name|SVNAdminArea
name|anchor
init|=
name|parentArea
operator|!=
literal|null
condition|?
name|parentArea
else|:
name|targetArea
decl_stmt|;
name|SVNAdminArea
name|target
init|=
name|targetArea
operator|!=
literal|null
condition|?
name|targetArea
else|:
name|parentArea
decl_stmt|;
return|return
operator|new
name|SVNAdminAreaInfo
argument_list|(
name|this
argument_list|,
name|anchor
argument_list|,
name|target
argument_list|,
name|parentArea
operator|==
literal|null
condition|?
literal|""
else|:
name|name
argument_list|)
return|;
block|}
specifier|public
name|SVNAdminArea
name|open
parameter_list|(
name|File
name|path
parameter_list|,
name|boolean
name|writeLock
parameter_list|,
name|int
name|depth
parameter_list|)
throws|throws
name|SVNException
block|{
return|return
name|open
argument_list|(
name|path
argument_list|,
name|writeLock
argument_list|,
literal|false
argument_list|,
name|depth
argument_list|)
return|;
block|}
specifier|public
name|SVNAdminArea
name|open
parameter_list|(
name|File
name|path
parameter_list|,
name|boolean
name|writeLock
parameter_list|,
name|boolean
name|stealLock
parameter_list|,
name|int
name|depth
parameter_list|)
throws|throws
name|SVNException
block|{
return|return
name|open
argument_list|(
name|path
argument_list|,
name|writeLock
argument_list|,
name|stealLock
argument_list|,
literal|true
argument_list|,
name|depth
argument_list|,
name|Level
operator|.
name|FINE
argument_list|)
return|;
block|}
specifier|public
name|SVNAdminArea
name|open
parameter_list|(
name|File
name|path
parameter_list|,
name|boolean
name|writeLock
parameter_list|,
name|boolean
name|stealLock
parameter_list|,
name|boolean
name|upgradeFormat
parameter_list|,
name|int
name|depth
parameter_list|,
name|Level
name|logLevel
parameter_list|)
throws|throws
name|SVNException
block|{
name|Map
name|tmp
init|=
operator|new
name|SVNHashMap
argument_list|()
decl_stmt|;
name|SVNAdminArea
name|area
decl_stmt|;
try|try
block|{
name|area
operator|=
name|doOpen
argument_list|(
name|path
argument_list|,
name|writeLock
argument_list|,
name|stealLock
argument_list|,
name|upgradeFormat
argument_list|,
name|depth
argument_list|,
name|tmp
argument_list|,
name|logLevel
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
for|for
control|(
name|Iterator
name|paths
init|=
name|tmp
operator|.
name|keySet
argument_list|()
operator|.
name|iterator
argument_list|()
init|;
name|paths
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|Object
name|childPath
init|=
name|paths
operator|.
name|next
argument_list|()
decl_stmt|;
name|SVNAdminArea
name|childArea
init|=
operator|(
name|SVNAdminArea
operator|)
name|tmp
operator|.
name|get
argument_list|(
name|childPath
argument_list|)
decl_stmt|;
name|myAdminAreas
operator|.
name|put
argument_list|(
name|childPath
argument_list|,
name|childArea
argument_list|)
expr_stmt|;
block|}
block|}
return|return
name|area
return|;
block|}
specifier|public
name|SVNAdminArea
name|probeOpen
parameter_list|(
name|File
name|path
parameter_list|,
name|boolean
name|writeLock
parameter_list|,
name|int
name|depth
parameter_list|)
throws|throws
name|SVNException
block|{
return|return
name|probeOpen
argument_list|(
name|path
argument_list|,
name|writeLock
argument_list|,
name|depth
argument_list|,
name|Level
operator|.
name|FINE
argument_list|)
return|;
block|}
specifier|public
name|SVNAdminArea
name|probeOpen
parameter_list|(
name|File
name|path
parameter_list|,
name|boolean
name|writeLock
parameter_list|,
name|int
name|depth
parameter_list|,
name|Level
name|logLevel
parameter_list|)
throws|throws
name|SVNException
block|{
name|File
name|dir
init|=
name|probe
argument_list|(
name|path
argument_list|,
name|logLevel
argument_list|)
decl_stmt|;
if|if
condition|(
name|dir
operator|==
literal|null
condition|)
block|{
comment|// we tried to open root which is not wc.
name|SVNErrorMessage
name|err
init|=
name|SVNErrorMessage
operator|.
name|create
argument_list|(
name|SVNErrorCode
operator|.
name|WC_NOT_DIRECTORY
argument_list|,
literal|"''{0}'' is not a working copy"
argument_list|,
name|path
argument_list|)
decl_stmt|;
name|SVNErrorManager
operator|.
name|error
argument_list|(
name|err
argument_list|,
name|logLevel
argument_list|,
name|SVNLogType
operator|.
name|WC
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
operator|!
name|path
operator|.
name|equals
argument_list|(
name|dir
argument_list|)
condition|)
block|{
name|depth
operator|=
literal|0
expr_stmt|;
block|}
name|SVNAdminArea
name|adminArea
init|=
literal|null
decl_stmt|;
try|try
block|{
name|adminArea
operator|=
name|open
argument_list|(
name|dir
argument_list|,
name|writeLock
argument_list|,
literal|false
argument_list|,
literal|true
argument_list|,
name|depth
argument_list|,
name|logLevel
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|SVNException
name|svne
parameter_list|)
block|{
name|SVNFileType
name|childKind
init|=
name|SVNFileType
operator|.
name|getType
argument_list|(
name|path
argument_list|)
decl_stmt|;
name|SVNErrorCode
name|errCode
init|=
name|svne
operator|.
name|getErrorMessage
argument_list|()
operator|.
name|getErrorCode
argument_list|()
decl_stmt|;
if|if
condition|(
operator|!
name|path
operator|.
name|equals
argument_list|(
name|dir
argument_list|)
operator|&&
name|childKind
operator|==
name|SVNFileType
operator|.
name|DIRECTORY
operator|&&
name|errCode
operator|==
name|SVNErrorCode
operator|.
name|WC_NOT_DIRECTORY
condition|)
block|{
name|SVNErrorMessage
name|err
init|=
name|SVNErrorMessage
operator|.
name|create
argument_list|(
name|SVNErrorCode
operator|.
name|WC_NOT_DIRECTORY
argument_list|,
literal|"''{0}'' is not a working copy"
argument_list|,
name|path
argument_list|)
decl_stmt|;
name|SVNErrorManager
operator|.
name|error
argument_list|(
name|err
argument_list|,
name|logLevel
argument_list|,
name|SVNLogType
operator|.
name|WC
argument_list|)
expr_stmt|;
block|}
else|else
block|{
throw|throw
name|svne
throw|;
block|}
block|}
return|return
name|adminArea
return|;
block|}
specifier|public
name|SVNAdminArea
name|probeTry
parameter_list|(
name|File
name|path
parameter_list|,
name|boolean
name|writeLock
parameter_list|,
name|int
name|depth
parameter_list|)
throws|throws
name|SVNException
block|{
name|SVNAdminArea
name|adminArea
init|=
literal|null
decl_stmt|;
try|try
block|{
name|adminArea
operator|=
name|probeRetrieve
argument_list|(
name|path
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|SVNException
name|svne
parameter_list|)
block|{
if|if
condition|(
name|svne
operator|.
name|getErrorMessage
argument_list|()
operator|.
name|getErrorCode
argument_list|()
operator|==
name|SVNErrorCode
operator|.
name|WC_NOT_LOCKED
condition|)
block|{
try|try
block|{
name|adminArea
operator|=
name|probeOpen
argument_list|(
name|path
argument_list|,
name|writeLock
argument_list|,
name|depth
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|SVNException
name|svne2
parameter_list|)
block|{
if|if
condition|(
name|svne2
operator|.
name|getErrorMessage
argument_list|()
operator|.
name|getErrorCode
argument_list|()
operator|!=
name|SVNErrorCode
operator|.
name|WC_NOT_DIRECTORY
condition|)
block|{
throw|throw
name|svne2
throw|;
block|}
block|}
block|}
else|else
block|{
throw|throw
name|svne
throw|;
block|}
block|}
return|return
name|adminArea
return|;
block|}
specifier|public
name|void
name|close
parameter_list|()
throws|throws
name|SVNException
block|{
if|if
condition|(
name|myAdminAreas
operator|!=
literal|null
condition|)
block|{
name|doClose
argument_list|(
name|myAdminAreas
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|myAdminAreas
operator|.
name|clear
argument_list|()
expr_stmt|;
block|}
name|myCleanupHandlers
operator|=
literal|null
expr_stmt|;
block|}
specifier|public
name|void
name|closeAdminArea
parameter_list|(
name|File
name|path
parameter_list|)
throws|throws
name|SVNException
block|{
if|if
condition|(
name|myAdminAreas
operator|!=
literal|null
condition|)
block|{
name|SVNAdminArea
name|area
init|=
operator|(
name|SVNAdminArea
operator|)
name|myAdminAreas
operator|.
name|get
argument_list|(
name|path
argument_list|)
decl_stmt|;
if|if
condition|(
name|area
operator|!=
literal|null
condition|)
block|{
name|doClose
argument_list|(
name|area
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|myAdminAreas
operator|.
name|remove
argument_list|(
name|path
argument_list|)
expr_stmt|;
block|}
block|}
block|}
specifier|private
name|SVNAdminArea
name|doOpen
parameter_list|(
name|File
name|path
parameter_list|,
name|boolean
name|writeLock
parameter_list|,
name|boolean
name|stealLock
parameter_list|,
name|boolean
name|upgradeFormat
parameter_list|,
name|int
name|depth
parameter_list|,
name|Map
name|tmp
parameter_list|,
name|Level
name|logLevel
parameter_list|)
throws|throws
name|SVNException
block|{
comment|// no support for 'under consturction here' - it will go to adminAreaFactory.
name|tmp
operator|=
name|tmp
operator|==
literal|null
condition|?
operator|new
name|SVNHashMap
argument_list|()
else|:
name|tmp
expr_stmt|;
if|if
condition|(
name|myAdminAreas
operator|!=
literal|null
condition|)
block|{
name|SVNAdminArea
name|existing
init|=
operator|(
name|SVNAdminArea
operator|)
name|myAdminAreas
operator|.
name|get
argument_list|(
name|path
argument_list|)
decl_stmt|;
if|if
condition|(
name|myAdminAreas
operator|.
name|containsKey
argument_list|(
name|path
argument_list|)
operator|&&
name|existing
operator|!=
literal|null
condition|)
block|{
name|SVNErrorMessage
name|error
init|=
name|SVNErrorMessage
operator|.
name|create
argument_list|(
name|SVNErrorCode
operator|.
name|WC_LOCKED
argument_list|,
literal|"Working copy ''{0}'' locked"
argument_list|,
name|path
argument_list|)
decl_stmt|;
name|SVNErrorManager
operator|.
name|error
argument_list|(
name|error
argument_list|,
name|SVNLogType
operator|.
name|WC
argument_list|)
expr_stmt|;
block|}
block|}
else|else
block|{
name|myAdminAreas
operator|=
operator|new
name|SVNHashMap
argument_list|()
expr_stmt|;
block|}
name|SVNAdminArea
name|area
init|=
name|SVNAdminAreaFactory
operator|.
name|open
argument_list|(
name|path
argument_list|,
name|logLevel
argument_list|)
decl_stmt|;
name|area
operator|.
name|setWCAccess
argument_list|(
name|this
argument_list|)
expr_stmt|;
if|if
condition|(
name|writeLock
condition|)
block|{
name|area
operator|.
name|lock
argument_list|(
name|stealLock
argument_list|)
expr_stmt|;
if|if
condition|(
name|upgradeFormat
condition|)
block|{
name|area
operator|=
name|SVNAdminAreaFactory
operator|.
name|upgrade
argument_list|(
name|area
argument_list|)
expr_stmt|;
block|}
block|}
name|tmp
operator|.
name|put
argument_list|(
name|path
argument_list|,
name|area
argument_list|)
expr_stmt|;
if|if
condition|(
name|depth
operator|!=
literal|0
condition|)
block|{
if|if
condition|(
name|depth
operator|>
literal|0
condition|)
block|{
name|depth
operator|--
expr_stmt|;
block|}
for|for
control|(
name|Iterator
name|entries
init|=
name|area
operator|.
name|entries
argument_list|(
literal|false
argument_list|)
init|;
name|entries
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
try|try
block|{
name|checkCancelled
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|SVNCancelException
name|e
parameter_list|)
block|{
name|doClose
argument_list|(
name|tmp
argument_list|,
literal|false
argument_list|)
expr_stmt|;
throw|throw
name|e
throw|;
block|}
name|SVNEntry
name|entry
init|=
operator|(
name|SVNEntry
operator|)
name|entries
operator|.
name|next
argument_list|()
decl_stmt|;
if|if
condition|(
name|entry
operator|.
name|getKind
argument_list|()
operator|!=
name|SVNNodeKind
operator|.
name|DIR
operator|||
name|area
operator|.
name|getThisDirName
argument_list|()
operator|.
name|equals
argument_list|(
name|entry
operator|.
name|getName
argument_list|()
argument_list|)
condition|)
block|{
continue|continue;
block|}
if|if
condition|(
name|entry
operator|.
name|getDepth
argument_list|()
operator|==
name|SVNDepth
operator|.
name|EXCLUDE
condition|)
block|{
continue|continue;
block|}
name|File
name|childPath
init|=
operator|new
name|Resource
argument_list|(
name|path
argument_list|,
name|entry
operator|.
name|getName
argument_list|()
argument_list|)
decl_stmt|;
try|try
block|{
comment|// this method will put created area into our map.
name|doOpen
argument_list|(
name|childPath
argument_list|,
name|writeLock
argument_list|,
name|stealLock
argument_list|,
name|upgradeFormat
argument_list|,
name|depth
argument_list|,
name|tmp
argument_list|,
name|logLevel
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|SVNException
name|e
parameter_list|)
block|{
if|if
condition|(
name|e
operator|.
name|getErrorMessage
argument_list|()
operator|.
name|getErrorCode
argument_list|()
operator|!=
name|SVNErrorCode
operator|.
name|WC_NOT_DIRECTORY
condition|)
block|{
name|doClose
argument_list|(
name|tmp
argument_list|,
literal|false
argument_list|)
expr_stmt|;
throw|throw
name|e
throw|;
block|}
comment|// only for missing!
name|tmp
operator|.
name|put
argument_list|(
name|childPath
argument_list|,
literal|null
argument_list|)
expr_stmt|;
block|}
name|SVNAdminArea
name|childArea
init|=
operator|(
name|SVNAdminArea
operator|)
name|tmp
operator|.
name|get
argument_list|(
name|childPath
argument_list|)
decl_stmt|;
if|if
condition|(
name|childArea
operator|!=
literal|null
condition|)
block|{
name|SVNEntry
name|childRootEntry
init|=
name|childArea
operator|.
name|getEntry
argument_list|(
name|childArea
operator|.
name|getThisDirName
argument_list|()
argument_list|,
literal|false
argument_list|)
decl_stmt|;
name|SVNEntry
name|thisRootEntry
init|=
name|area
operator|.
name|getEntry
argument_list|(
name|childArea
operator|.
name|getThisDirName
argument_list|()
argument_list|,
literal|false
argument_list|)
decl_stmt|;
name|String
name|childRoot
init|=
name|childRootEntry
operator|.
name|getRepositoryRoot
argument_list|()
decl_stmt|;
name|String
name|expectedRoot
init|=
name|thisRootEntry
operator|.
name|getRepositoryRoot
argument_list|()
decl_stmt|;
if|if
condition|(
name|childRoot
operator|!=
literal|null
operator|&&
operator|!
name|childRoot
operator|.
name|equals
argument_list|(
name|expectedRoot
argument_list|)
condition|)
block|{
name|Map
name|toClose
init|=
operator|new
name|SVNHashMap
argument_list|()
decl_stmt|;
name|toClose
operator|.
name|put
argument_list|(
name|childPath
argument_list|,
name|childArea
argument_list|)
expr_stmt|;
name|String
name|childPathAbs
init|=
name|childPath
operator|.
name|getAbsolutePath
argument_list|()
operator|.
name|replace
argument_list|(
name|File
operator|.
name|separatorChar
argument_list|,
literal|'/'
argument_list|)
decl_stmt|;
for|for
control|(
name|Iterator
name|paths
init|=
name|tmp
operator|.
name|keySet
argument_list|()
operator|.
name|iterator
argument_list|()
init|;
name|paths
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|File
name|p
init|=
operator|(
name|File
operator|)
name|paths
operator|.
name|next
argument_list|()
decl_stmt|;
name|String
name|pAbs
init|=
name|p
operator|.
name|getAbsolutePath
argument_list|()
operator|.
name|replace
argument_list|(
name|File
operator|.
name|separatorChar
argument_list|,
literal|'/'
argument_list|)
decl_stmt|;
if|if
condition|(
name|SVNPathUtil
operator|.
name|isAncestor
argument_list|(
name|childPathAbs
argument_list|,
name|pAbs
argument_list|)
condition|)
block|{
name|toClose
operator|.
name|put
argument_list|(
name|p
argument_list|,
name|tmp
operator|.
name|get
argument_list|(
name|p
argument_list|)
argument_list|)
expr_stmt|;
name|paths
operator|.
name|remove
argument_list|()
expr_stmt|;
block|}
block|}
name|tmp
operator|.
name|put
argument_list|(
name|childPath
argument_list|,
literal|null
argument_list|)
expr_stmt|;
name|doClose
argument_list|(
name|toClose
argument_list|,
literal|false
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
return|return
name|area
return|;
block|}
specifier|private
name|void
name|doClose
parameter_list|(
name|Map
name|adminAreas
parameter_list|,
name|boolean
name|preserveLocks
parameter_list|)
throws|throws
name|SVNException
block|{
name|Set
name|closedAreas
init|=
operator|new
name|SVNHashSet
argument_list|()
decl_stmt|;
while|while
condition|(
operator|!
name|adminAreas
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|Map
name|copy
init|=
operator|new
name|SVNHashMap
argument_list|(
name|adminAreas
argument_list|)
decl_stmt|;
try|try
block|{
for|for
control|(
name|Iterator
name|paths
init|=
name|copy
operator|.
name|keySet
argument_list|()
operator|.
name|iterator
argument_list|()
init|;
name|paths
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|File
name|path
init|=
operator|(
name|File
operator|)
name|paths
operator|.
name|next
argument_list|()
decl_stmt|;
name|SVNAdminArea
name|adminArea
init|=
operator|(
name|SVNAdminArea
operator|)
name|copy
operator|.
name|get
argument_list|(
name|path
argument_list|)
decl_stmt|;
if|if
condition|(
name|adminArea
operator|==
literal|null
condition|)
block|{
name|closedAreas
operator|.
name|add
argument_list|(
name|path
argument_list|)
expr_stmt|;
continue|continue;
block|}
name|doClose
argument_list|(
name|adminArea
argument_list|,
name|preserveLocks
argument_list|)
expr_stmt|;
name|closedAreas
operator|.
name|add
argument_list|(
name|path
argument_list|)
expr_stmt|;
block|}
block|}
finally|finally
block|{
for|for
control|(
name|Iterator
name|paths
init|=
name|closedAreas
operator|.
name|iterator
argument_list|()
init|;
name|paths
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|File
name|path
init|=
operator|(
name|File
operator|)
name|paths
operator|.
name|next
argument_list|()
decl_stmt|;
name|adminAreas
operator|.
name|remove
argument_list|(
name|path
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
specifier|private
name|void
name|doClose
parameter_list|(
name|SVNAdminArea
name|adminArea
parameter_list|,
name|boolean
name|preserveLocks
parameter_list|)
throws|throws
name|SVNException
block|{
if|if
condition|(
name|adminArea
operator|==
literal|null
condition|)
block|{
return|return;
block|}
if|if
condition|(
name|myCleanupHandlers
operator|!=
literal|null
condition|)
block|{
name|ISVNCleanupHandler
name|handler
init|=
operator|(
name|ISVNCleanupHandler
operator|)
name|myCleanupHandlers
operator|.
name|remove
argument_list|(
name|adminArea
argument_list|)
decl_stmt|;
if|if
condition|(
name|handler
operator|!=
literal|null
condition|)
block|{
name|handler
operator|.
name|cleanup
argument_list|(
name|adminArea
argument_list|)
expr_stmt|;
block|}
block|}
if|if
condition|(
operator|!
name|preserveLocks
operator|&&
name|adminArea
operator|.
name|isLocked
argument_list|()
condition|)
block|{
name|adminArea
operator|.
name|unlock
argument_list|()
expr_stmt|;
block|}
block|}
specifier|public
name|SVNAdminArea
name|probeRetrieve
parameter_list|(
name|File
name|path
parameter_list|)
throws|throws
name|SVNException
block|{
name|File
name|dir
init|=
name|probe
argument_list|(
name|path
argument_list|,
name|Level
operator|.
name|FINE
argument_list|)
decl_stmt|;
if|if
condition|(
name|dir
operator|==
literal|null
condition|)
block|{
comment|// we tried to open root which is not wc.
name|SVNErrorMessage
name|err
init|=
name|SVNErrorMessage
operator|.
name|create
argument_list|(
name|SVNErrorCode
operator|.
name|WC_NOT_DIRECTORY
argument_list|,
literal|"''{0}'' is not a working copy"
argument_list|,
name|path
argument_list|)
decl_stmt|;
name|SVNErrorManager
operator|.
name|error
argument_list|(
name|err
argument_list|,
name|SVNLogType
operator|.
name|WC
argument_list|)
expr_stmt|;
block|}
return|return
name|retrieve
argument_list|(
name|dir
argument_list|)
return|;
block|}
specifier|public
name|boolean
name|isMissing
parameter_list|(
name|File
name|path
parameter_list|)
block|{
if|if
condition|(
name|myAdminAreas
operator|!=
literal|null
condition|)
block|{
return|return
name|myAdminAreas
operator|.
name|containsKey
argument_list|(
name|path
argument_list|)
operator|&&
name|myAdminAreas
operator|.
name|get
argument_list|(
name|path
argument_list|)
operator|==
literal|null
return|;
block|}
return|return
literal|false
return|;
block|}
specifier|public
name|boolean
name|isLocked
parameter_list|(
name|File
name|path
parameter_list|)
throws|throws
name|SVNException
block|{
name|File
name|lockFile
init|=
operator|new
name|Resource
argument_list|(
name|path
argument_list|,
name|SVNFileUtil
operator|.
name|getAdminDirectoryName
argument_list|()
argument_list|)
decl_stmt|;
name|lockFile
operator|=
operator|new
name|Resource
argument_list|(
name|lockFile
argument_list|,
literal|"lock"
argument_list|)
expr_stmt|;
if|if
condition|(
name|SVNFileType
operator|.
name|getType
argument_list|(
name|lockFile
argument_list|)
operator|==
name|SVNFileType
operator|.
name|FILE
condition|)
block|{
return|return
literal|true
return|;
block|}
if|else if
condition|(
name|SVNFileType
operator|.
name|getType
argument_list|(
name|lockFile
argument_list|)
operator|==
name|SVNFileType
operator|.
name|NONE
condition|)
block|{
return|return
literal|false
return|;
block|}
name|SVNErrorMessage
name|err
init|=
name|SVNErrorMessage
operator|.
name|create
argument_list|(
name|SVNErrorCode
operator|.
name|WC_LOCKED
argument_list|,
literal|"Lock file ''{0}'' is not a regular file"
argument_list|,
name|lockFile
argument_list|)
decl_stmt|;
name|SVNErrorManager
operator|.
name|error
argument_list|(
name|err
argument_list|,
name|SVNLogType
operator|.
name|WC
argument_list|)
expr_stmt|;
return|return
literal|false
return|;
block|}
specifier|public
name|boolean
name|isWCRoot
parameter_list|(
name|File
name|path
parameter_list|)
throws|throws
name|SVNException
block|{
name|SVNEntry
name|entry
init|=
name|getEntry
argument_list|(
name|path
argument_list|,
literal|false
argument_list|)
decl_stmt|;
name|File
name|parent
init|=
name|path
operator|.
name|getParentFile
argument_list|()
decl_stmt|;
if|if
condition|(
name|parent
operator|==
literal|null
operator|&&
name|entry
operator|!=
literal|null
condition|)
block|{
return|return
literal|true
return|;
block|}
name|SVNAdminArea
name|parentArea
init|=
name|getAdminArea
argument_list|(
name|parent
argument_list|)
decl_stmt|;
name|SVNWCAccess
name|tmpAccess
init|=
literal|null
decl_stmt|;
name|SVNWCAccess
name|access
init|=
name|this
decl_stmt|;
try|try
block|{
if|if
condition|(
name|parentArea
operator|==
literal|null
condition|)
block|{
name|tmpAccess
operator|=
operator|new
name|SVNWCAccess
argument_list|(
literal|null
argument_list|)
expr_stmt|;
try|try
block|{
name|parentArea
operator|=
name|tmpAccess
operator|.
name|probeOpen
argument_list|(
name|parent
argument_list|,
literal|false
argument_list|,
literal|0
argument_list|,
name|Level
operator|.
name|FINEST
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|SVNException
name|svne
parameter_list|)
block|{
return|return
literal|true
return|;
block|}
name|access
operator|=
name|tmpAccess
expr_stmt|;
block|}
name|SVNEntry
name|parentEntry
init|=
name|access
operator|.
name|getEntry
argument_list|(
name|parent
argument_list|,
literal|false
argument_list|)
decl_stmt|;
if|if
condition|(
name|parentEntry
operator|==
literal|null
operator|||
operator|!
name|parentEntry
operator|.
name|isThisDir
argument_list|()
condition|)
block|{
return|return
literal|true
return|;
block|}
if|if
condition|(
name|parentEntry
operator|.
name|getURL
argument_list|()
operator|==
literal|null
condition|)
block|{
name|SVNErrorMessage
name|err
init|=
name|SVNErrorMessage
operator|.
name|create
argument_list|(
name|SVNErrorCode
operator|.
name|ENTRY_MISSING_URL
argument_list|,
literal|"''{0}'' has no ancestry information"
argument_list|,
name|parent
argument_list|)
decl_stmt|;
name|SVNErrorManager
operator|.
name|error
argument_list|(
name|err
argument_list|,
name|SVNLogType
operator|.
name|WC
argument_list|)
expr_stmt|;
block|}
comment|// what about switched paths?
comment|/*             if (entry != null&& entry.getURL() != null) {                 if (!entry.getURL().equals(SVNPathUtil.append(parentEntry.getURL(), SVNEncodingUtil.uriEncode(path.getName())))) {                     return true;                 }             }*/
name|entry
operator|=
name|parentArea
operator|.
name|getEntry
argument_list|(
name|path
operator|.
name|getName
argument_list|()
argument_list|,
literal|false
argument_list|)
expr_stmt|;
if|if
condition|(
name|entry
operator|==
literal|null
condition|)
block|{
return|return
literal|true
return|;
block|}
block|}
finally|finally
block|{
if|if
condition|(
name|tmpAccess
operator|!=
literal|null
condition|)
block|{
try|try
block|{
name|tmpAccess
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|SVNException
name|svne
parameter_list|)
block|{
comment|//
block|}
block|}
block|}
return|return
literal|false
return|;
block|}
specifier|public
name|SVNTreeConflictDescription
name|getTreeConflict
parameter_list|(
name|File
name|path
parameter_list|)
throws|throws
name|SVNException
block|{
name|File
name|parent
init|=
name|path
operator|.
name|getParentFile
argument_list|()
decl_stmt|;
if|if
condition|(
name|parent
operator|==
literal|null
condition|)
block|{
return|return
literal|null
return|;
block|}
name|boolean
name|closeParentArea
init|=
literal|false
decl_stmt|;
name|SVNAdminArea
name|parentArea
init|=
literal|null
decl_stmt|;
try|try
block|{
name|parentArea
operator|=
name|retrieve
argument_list|(
name|parent
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|SVNException
name|e
parameter_list|)
block|{
if|if
condition|(
name|e
operator|.
name|getErrorMessage
argument_list|()
operator|.
name|getErrorCode
argument_list|()
operator|==
name|SVNErrorCode
operator|.
name|WC_NOT_LOCKED
condition|)
block|{
name|e
operator|=
literal|null
expr_stmt|;
try|try
block|{
name|parentArea
operator|=
name|open
argument_list|(
name|parent
argument_list|,
literal|false
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|closeParentArea
operator|=
literal|true
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|SVNException
name|internal
parameter_list|)
block|{
if|if
condition|(
name|internal
operator|.
name|getErrorMessage
argument_list|()
operator|.
name|getErrorCode
argument_list|()
operator|==
name|SVNErrorCode
operator|.
name|WC_NOT_DIRECTORY
condition|)
block|{
return|return
literal|null
return|;
block|}
name|e
operator|=
name|internal
expr_stmt|;
block|}
block|}
if|if
condition|(
name|e
operator|!=
literal|null
condition|)
block|{
throw|throw
name|e
throw|;
block|}
block|}
name|SVNTreeConflictDescription
name|treeConflict
init|=
name|parentArea
operator|.
name|getTreeConflict
argument_list|(
name|path
operator|.
name|getName
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|closeParentArea
condition|)
block|{
name|closeAdminArea
argument_list|(
name|parent
argument_list|)
expr_stmt|;
block|}
return|return
name|treeConflict
return|;
block|}
specifier|public
name|boolean
name|hasTreeConflict
parameter_list|(
name|File
name|path
parameter_list|)
throws|throws
name|SVNException
block|{
name|SVNTreeConflictDescription
name|treeConflict
init|=
name|getTreeConflict
argument_list|(
name|path
argument_list|)
decl_stmt|;
return|return
name|treeConflict
operator|!=
literal|null
return|;
block|}
specifier|public
name|SVNEntry
name|getEntry
parameter_list|(
name|File
name|path
parameter_list|,
name|boolean
name|showHidden
parameter_list|)
throws|throws
name|SVNException
block|{
name|SVNAdminArea
name|adminArea
init|=
name|getAdminArea
argument_list|(
name|path
argument_list|)
decl_stmt|;
name|String
name|entryName
init|=
literal|null
decl_stmt|;
if|if
condition|(
name|adminArea
operator|==
literal|null
condition|)
block|{
name|adminArea
operator|=
name|getAdminArea
argument_list|(
name|path
operator|.
name|getParentFile
argument_list|()
argument_list|)
expr_stmt|;
name|entryName
operator|=
name|path
operator|.
name|getName
argument_list|()
expr_stmt|;
block|}
else|else
block|{
name|entryName
operator|=
name|adminArea
operator|.
name|getThisDirName
argument_list|()
expr_stmt|;
block|}
if|if
condition|(
name|adminArea
operator|!=
literal|null
condition|)
block|{
return|return
name|adminArea
operator|.
name|getEntry
argument_list|(
name|entryName
argument_list|,
name|showHidden
argument_list|)
return|;
block|}
return|return
literal|null
return|;
block|}
specifier|public
name|SVNEntry
name|getVersionedEntry
parameter_list|(
name|File
name|path
parameter_list|,
name|boolean
name|showHidden
parameter_list|)
throws|throws
name|SVNException
block|{
name|SVNEntry
name|entry
init|=
name|getEntry
argument_list|(
name|path
argument_list|,
name|showHidden
argument_list|)
decl_stmt|;
if|if
condition|(
name|entry
operator|==
literal|null
condition|)
block|{
name|SVNErrorMessage
name|err
init|=
name|SVNErrorMessage
operator|.
name|create
argument_list|(
name|SVNErrorCode
operator|.
name|ENTRY_NOT_FOUND
argument_list|,
literal|"''{0}'' is not under version control"
argument_list|,
name|path
argument_list|)
decl_stmt|;
name|SVNErrorManager
operator|.
name|error
argument_list|(
name|err
argument_list|,
name|SVNLogType
operator|.
name|WC
argument_list|)
expr_stmt|;
block|}
return|return
name|entry
return|;
block|}
specifier|public
name|void
name|setRepositoryRoot
parameter_list|(
name|File
name|path
parameter_list|,
name|SVNURL
name|reposRoot
parameter_list|)
throws|throws
name|SVNException
block|{
name|SVNEntry
name|entry
init|=
name|getEntry
argument_list|(
name|path
argument_list|,
literal|false
argument_list|)
decl_stmt|;
if|if
condition|(
name|entry
operator|==
literal|null
condition|)
block|{
return|return;
block|}
name|SVNAdminArea
name|adminArea
init|=
literal|null
decl_stmt|;
name|String
name|name
init|=
literal|null
decl_stmt|;
if|if
condition|(
name|entry
operator|.
name|isFile
argument_list|()
condition|)
block|{
name|adminArea
operator|=
name|getAdminArea
argument_list|(
name|path
operator|.
name|getParentFile
argument_list|()
argument_list|)
expr_stmt|;
name|name
operator|=
name|path
operator|.
name|getName
argument_list|()
expr_stmt|;
block|}
else|else
block|{
name|adminArea
operator|=
name|getAdminArea
argument_list|(
name|path
argument_list|)
expr_stmt|;
name|name
operator|=
name|adminArea
operator|!=
literal|null
condition|?
name|adminArea
operator|.
name|getThisDirName
argument_list|()
else|:
literal|null
expr_stmt|;
block|}
if|if
condition|(
name|adminArea
operator|==
literal|null
condition|)
block|{
return|return;
block|}
if|if
condition|(
name|adminArea
operator|.
name|tweakEntry
argument_list|(
name|name
argument_list|,
literal|null
argument_list|,
name|reposRoot
operator|.
name|toString
argument_list|()
argument_list|,
operator|-
literal|1
argument_list|,
literal|false
argument_list|)
condition|)
block|{
name|adminArea
operator|.
name|saveEntries
argument_list|(
literal|false
argument_list|)
expr_stmt|;
block|}
block|}
specifier|public
name|SVNAdminArea
index|[]
name|getAdminAreas
parameter_list|()
block|{
if|if
condition|(
name|myAdminAreas
operator|!=
literal|null
condition|)
block|{
return|return
operator|(
name|SVNAdminArea
index|[]
operator|)
name|myAdminAreas
operator|.
name|values
argument_list|()
operator|.
name|toArray
argument_list|(
operator|new
name|SVNAdminArea
index|[
name|myAdminAreas
operator|.
name|size
argument_list|()
index|]
argument_list|)
return|;
block|}
return|return
operator|new
name|SVNAdminArea
index|[
literal|0
index|]
return|;
block|}
comment|/**      * Ugrades SVNAdminArea associated with the path and cached in this SVNWCAccess instance.      * Updates caches if upgrade was done.      *      * @param  path                           path associated with already retrieved and locked SVNAdminArea      * @return                                newly created SVNAdminArea object if upgrade was done or already cached SVNAdminArea instance otherwise.      * @throws SVNException      */
specifier|public
name|SVNAdminArea
name|upgrade
parameter_list|(
name|File
name|path
parameter_list|)
throws|throws
name|SVNException
block|{
name|SVNAdminArea
name|upgradedArea
init|=
literal|null
decl_stmt|;
if|if
condition|(
name|myAdminAreas
operator|!=
literal|null
condition|)
block|{
name|SVNAdminArea
name|area
init|=
operator|(
name|SVNAdminArea
operator|)
name|myAdminAreas
operator|.
name|get
argument_list|(
name|path
argument_list|)
decl_stmt|;
if|if
condition|(
name|area
operator|!=
literal|null
condition|)
block|{
name|ISVNCleanupHandler
name|cleanupHandler
init|=
literal|null
decl_stmt|;
if|if
condition|(
name|myCleanupHandlers
operator|!=
literal|null
condition|)
block|{
name|cleanupHandler
operator|=
operator|(
name|ISVNCleanupHandler
operator|)
name|myCleanupHandlers
operator|.
name|get
argument_list|(
name|area
argument_list|)
expr_stmt|;
block|}
name|upgradedArea
operator|=
name|SVNAdminAreaFactory
operator|.
name|upgrade
argument_list|(
name|area
argument_list|)
expr_stmt|;
if|if
condition|(
name|upgradedArea
operator|!=
name|area
condition|)
block|{
name|myAdminAreas
operator|.
name|put
argument_list|(
name|path
argument_list|,
name|upgradedArea
argument_list|)
expr_stmt|;
if|if
condition|(
name|cleanupHandler
operator|!=
literal|null
condition|)
block|{
name|myCleanupHandlers
operator|.
name|remove
argument_list|(
name|area
argument_list|)
expr_stmt|;
name|myCleanupHandlers
operator|.
name|put
argument_list|(
name|upgradedArea
argument_list|,
name|cleanupHandler
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
return|return
name|upgradedArea
return|;
block|}
specifier|public
name|SVNAdminArea
name|retrieve
parameter_list|(
name|File
name|path
parameter_list|)
throws|throws
name|SVNException
block|{
name|SVNAdminArea
name|adminArea
init|=
name|getAdminArea
argument_list|(
name|path
argument_list|)
decl_stmt|;
if|if
condition|(
name|adminArea
operator|==
literal|null
condition|)
block|{
name|SVNEntry
name|subEntry
init|=
literal|null
decl_stmt|;
try|try
block|{
name|SVNAdminArea
name|dirAdminArea
init|=
name|getAdminArea
argument_list|(
name|path
operator|.
name|getParentFile
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|dirAdminArea
operator|!=
literal|null
condition|)
block|{
name|subEntry
operator|=
name|dirAdminArea
operator|.
name|getEntry
argument_list|(
name|path
operator|.
name|getName
argument_list|()
argument_list|,
literal|true
argument_list|)
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
name|SVNException
name|svne
parameter_list|)
block|{
name|subEntry
operator|=
literal|null
expr_stmt|;
block|}
name|SVNFileType
name|type
init|=
name|SVNFileType
operator|.
name|getType
argument_list|(
name|path
argument_list|)
decl_stmt|;
if|if
condition|(
name|subEntry
operator|!=
literal|null
condition|)
block|{
if|if
condition|(
name|subEntry
operator|.
name|getKind
argument_list|()
operator|==
name|SVNNodeKind
operator|.
name|DIR
operator|&&
name|type
operator|==
name|SVNFileType
operator|.
name|FILE
condition|)
block|{
name|SVNErrorMessage
name|err
init|=
name|SVNErrorMessage
operator|.
name|create
argument_list|(
name|SVNErrorCode
operator|.
name|WC_NOT_LOCKED
argument_list|,
literal|"Expected ''{0}'' to be a directory but found a file"
argument_list|,
name|path
argument_list|)
decl_stmt|;
name|SVNErrorManager
operator|.
name|error
argument_list|(
name|err
argument_list|,
name|SVNLogType
operator|.
name|WC
argument_list|)
expr_stmt|;
block|}
if|else if
condition|(
name|subEntry
operator|.
name|getKind
argument_list|()
operator|==
name|SVNNodeKind
operator|.
name|FILE
operator|&&
name|type
operator|==
name|SVNFileType
operator|.
name|DIRECTORY
condition|)
block|{
name|SVNErrorMessage
name|err
init|=
name|SVNErrorMessage
operator|.
name|create
argument_list|(
name|SVNErrorCode
operator|.
name|WC_NOT_LOCKED
argument_list|,
literal|"Expected ''{0}'' to be a file but found a directory"
argument_list|,
name|path
argument_list|)
decl_stmt|;
name|SVNErrorManager
operator|.
name|error
argument_list|(
name|err
argument_list|,
name|SVNLogType
operator|.
name|WC
argument_list|)
expr_stmt|;
block|}
block|}
name|File
name|adminDir
init|=
operator|new
name|Resource
argument_list|(
name|path
argument_list|,
name|SVNFileUtil
operator|.
name|getAdminDirectoryName
argument_list|()
argument_list|)
decl_stmt|;
name|SVNFileType
name|wcType
init|=
name|SVNFileType
operator|.
name|getType
argument_list|(
name|adminDir
argument_list|)
decl_stmt|;
if|if
condition|(
name|type
operator|==
name|SVNFileType
operator|.
name|NONE
condition|)
block|{
name|SVNErrorMessage
name|childErr
init|=
name|SVNErrorMessage
operator|.
name|create
argument_list|(
name|SVNErrorCode
operator|.
name|WC_PATH_NOT_FOUND
argument_list|,
literal|"Directory ''{0}'' is missing"
argument_list|,
name|path
argument_list|)
decl_stmt|;
name|SVNErrorMessage
name|err
init|=
name|SVNErrorMessage
operator|.
name|create
argument_list|(
name|SVNErrorCode
operator|.
name|WC_NOT_LOCKED
argument_list|,
literal|"Directory ''{0}'' is missing"
argument_list|,
name|path
argument_list|)
decl_stmt|;
name|err
operator|.
name|setChildErrorMessage
argument_list|(
name|childErr
argument_list|)
expr_stmt|;
name|SVNErrorManager
operator|.
name|error
argument_list|(
name|err
argument_list|,
name|SVNLogType
operator|.
name|WC
argument_list|)
expr_stmt|;
block|}
if|else if
condition|(
name|type
operator|==
name|SVNFileType
operator|.
name|DIRECTORY
operator|&&
name|wcType
operator|==
name|SVNFileType
operator|.
name|NONE
condition|)
block|{
name|SVNErrorMessage
name|err
init|=
name|SVNErrorMessage
operator|.
name|create
argument_list|(
name|SVNErrorCode
operator|.
name|WC_NOT_LOCKED
argument_list|,
literal|"Directory ''{0}'' containing working copy admin area is missing"
argument_list|,
name|adminDir
argument_list|)
decl_stmt|;
name|SVNErrorManager
operator|.
name|error
argument_list|(
name|err
argument_list|,
name|SVNLogType
operator|.
name|WC
argument_list|)
expr_stmt|;
block|}
if|else if
condition|(
name|type
operator|==
name|SVNFileType
operator|.
name|DIRECTORY
operator|&&
name|wcType
operator|==
name|SVNFileType
operator|.
name|DIRECTORY
condition|)
block|{
name|SVNErrorMessage
name|err
init|=
name|SVNErrorMessage
operator|.
name|create
argument_list|(
name|SVNErrorCode
operator|.
name|WC_NOT_LOCKED
argument_list|,
literal|"Unable to lock ''{0}''"
argument_list|,
name|path
argument_list|)
decl_stmt|;
name|SVNErrorManager
operator|.
name|error
argument_list|(
name|err
argument_list|,
name|SVNLogType
operator|.
name|WC
argument_list|)
expr_stmt|;
block|}
name|SVNErrorMessage
name|err
init|=
name|SVNErrorMessage
operator|.
name|create
argument_list|(
name|SVNErrorCode
operator|.
name|WC_NOT_LOCKED
argument_list|,
literal|"Working copy ''{0}'' is not locked"
argument_list|,
name|path
argument_list|)
decl_stmt|;
name|SVNErrorManager
operator|.
name|error
argument_list|(
name|err
argument_list|,
name|SVNLogType
operator|.
name|WC
argument_list|)
expr_stmt|;
block|}
return|return
name|adminArea
return|;
block|}
comment|//analogous to retrieve_internal
specifier|public
name|SVNAdminArea
name|getAdminArea
parameter_list|(
name|File
name|path
parameter_list|)
block|{
comment|//internal retrieve
name|SVNAdminArea
name|adminArea
init|=
literal|null
decl_stmt|;
if|if
condition|(
name|myAdminAreas
operator|!=
literal|null
condition|)
block|{
name|adminArea
operator|=
operator|(
name|SVNAdminArea
operator|)
name|myAdminAreas
operator|.
name|get
argument_list|(
name|path
argument_list|)
expr_stmt|;
block|}
return|return
name|adminArea
return|;
block|}
specifier|public
name|void
name|walkEntries
parameter_list|(
name|File
name|path
parameter_list|,
name|ISVNEntryHandler
name|handler
parameter_list|,
name|boolean
name|showHidden
parameter_list|,
name|SVNDepth
name|depth
parameter_list|)
throws|throws
name|SVNException
block|{
name|walkEntries
argument_list|(
name|path
argument_list|,
name|handler
argument_list|,
name|showHidden
argument_list|,
literal|false
argument_list|,
name|depth
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|walkEntries
parameter_list|(
name|File
name|path
parameter_list|,
name|ISVNEntryHandler
name|handler
parameter_list|,
name|boolean
name|showHidden
parameter_list|,
name|boolean
name|includeTC
parameter_list|,
name|SVNDepth
name|depth
parameter_list|)
throws|throws
name|SVNException
block|{
comment|// wrap handler into tc handler
if|if
condition|(
name|includeTC
condition|)
block|{
name|handler
operator|=
operator|new
name|TCEntryHandler
argument_list|(
name|path
argument_list|,
name|this
argument_list|,
name|handler
argument_list|,
name|depth
argument_list|)
expr_stmt|;
block|}
name|SVNEntry
name|entry
init|=
name|getEntry
argument_list|(
name|path
argument_list|,
name|showHidden
argument_list|)
decl_stmt|;
if|if
condition|(
name|entry
operator|==
literal|null
condition|)
block|{
if|if
condition|(
name|includeTC
condition|)
block|{
name|SVNTreeConflictDescription
name|tc
init|=
name|getTreeConflict
argument_list|(
name|path
argument_list|)
decl_stmt|;
if|if
condition|(
name|tc
operator|!=
literal|null
condition|)
block|{
name|handler
operator|.
name|handleEntry
argument_list|(
name|path
argument_list|,
literal|null
argument_list|)
expr_stmt|;
return|return;
block|}
block|}
name|handler
operator|.
name|handleError
argument_list|(
name|path
argument_list|,
name|SVNErrorMessage
operator|.
name|create
argument_list|(
name|SVNErrorCode
operator|.
name|UNVERSIONED_RESOURCE
argument_list|,
literal|"''{0}'' is not under version control"
argument_list|,
name|path
argument_list|)
argument_list|)
expr_stmt|;
return|return;
block|}
if|if
condition|(
name|entry
operator|.
name|isFile
argument_list|()
condition|)
block|{
try|try
block|{
name|handler
operator|.
name|handleEntry
argument_list|(
name|path
argument_list|,
name|entry
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|SVNException
name|svne
parameter_list|)
block|{
name|handler
operator|.
name|handleError
argument_list|(
name|path
argument_list|,
name|svne
operator|.
name|getErrorMessage
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
if|else if
condition|(
name|entry
operator|.
name|isDirectory
argument_list|()
condition|)
block|{
name|SVNAdminArea
name|adminArea
init|=
name|entry
operator|.
name|getAdminArea
argument_list|()
decl_stmt|;
try|try
block|{
name|adminArea
operator|.
name|walkThisDirectory
argument_list|(
name|handler
argument_list|,
name|includeTC
condition|?
literal|true
else|:
name|showHidden
argument_list|,
name|depth
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|SVNException
name|svne
parameter_list|)
block|{
name|handler
operator|.
name|handleError
argument_list|(
name|path
argument_list|,
name|svne
operator|.
name|getErrorMessage
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
else|else
block|{
name|handler
operator|.
name|handleError
argument_list|(
name|path
argument_list|,
name|SVNErrorMessage
operator|.
name|create
argument_list|(
name|SVNErrorCode
operator|.
name|NODE_UNKNOWN_KIND
argument_list|,
literal|"''{0}'' has an unrecognized node kind"
argument_list|,
name|path
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
specifier|private
specifier|static
name|boolean
name|ourNeverDescendIntoSymlinks
init|=
name|Boolean
operator|.
name|getBoolean
argument_list|(
literal|"svnkit.symlinks.neverDescend"
argument_list|)
decl_stmt|;
specifier|private
name|File
name|probe
parameter_list|(
name|File
name|path
parameter_list|,
name|Level
name|logLevel
parameter_list|)
throws|throws
name|SVNException
block|{
name|int
name|wcFormat
init|=
operator|-
literal|1
decl_stmt|;
name|SVNFileType
name|type
init|=
name|SVNFileType
operator|.
name|getType
argument_list|(
name|path
argument_list|)
decl_stmt|;
name|boolean
name|eligible
init|=
name|type
operator|==
name|SVNFileType
operator|.
name|DIRECTORY
decl_stmt|;
comment|// only treat as directories those, that are not versioned in parent wc.
if|if
condition|(
name|eligible
condition|)
block|{
name|wcFormat
operator|=
name|SVNAdminAreaFactory
operator|.
name|checkWC
argument_list|(
name|path
argument_list|,
literal|true
argument_list|,
name|logLevel
argument_list|)
expr_stmt|;
block|}
if|else if
condition|(
name|type
operator|==
name|SVNFileType
operator|.
name|SYMLINK
operator|&&
name|path
operator|.
name|isDirectory
argument_list|()
condition|)
block|{
comment|// either wc root which is a link or link within wc.
comment|// check for being root.
name|eligible
operator|=
operator|!
name|ourNeverDescendIntoSymlinks
operator|&&
name|isWCRoot
argument_list|(
name|path
argument_list|)
expr_stmt|;
if|if
condition|(
name|eligible
condition|)
block|{
name|wcFormat
operator|=
name|SVNAdminAreaFactory
operator|.
name|checkWC
argument_list|(
name|path
argument_list|,
literal|true
argument_list|,
name|logLevel
argument_list|)
expr_stmt|;
block|}
block|}
else|else
block|{
name|wcFormat
operator|=
literal|0
expr_stmt|;
block|}
comment|//non wc
if|if
condition|(
operator|!
name|eligible
operator|||
name|wcFormat
operator|==
literal|0
condition|)
block|{
if|if
condition|(
literal|".."
operator|.
name|equals
argument_list|(
name|path
operator|.
name|getName
argument_list|()
argument_list|)
operator|||
literal|"."
operator|.
name|equals
argument_list|(
name|path
operator|.
name|getName
argument_list|()
argument_list|)
condition|)
block|{
name|SVNErrorMessage
name|err
init|=
name|SVNErrorMessage
operator|.
name|create
argument_list|(
name|SVNErrorCode
operator|.
name|WC_BAD_PATH
argument_list|,
literal|"Path ''{0}'' ends in ''{1}'', which is unsupported for this operation"
argument_list|,
operator|new
name|Object
index|[]
block|{
name|path
block|,
name|path
operator|.
name|getName
argument_list|()
block|}
argument_list|)
decl_stmt|;
name|SVNErrorManager
operator|.
name|error
argument_list|(
name|err
argument_list|,
name|SVNLogType
operator|.
name|WC
argument_list|)
expr_stmt|;
block|}
name|path
operator|=
name|path
operator|.
name|getParentFile
argument_list|()
expr_stmt|;
block|}
return|return
name|path
return|;
block|}
specifier|public
specifier|static
name|boolean
name|matchesChangeList
parameter_list|(
name|Collection
name|changeLists
parameter_list|,
name|SVNEntry
name|entry
parameter_list|)
block|{
return|return
name|changeLists
operator|==
literal|null
operator|||
name|changeLists
operator|.
name|isEmpty
argument_list|()
operator|||
operator|(
name|entry
operator|!=
literal|null
operator|&&
name|entry
operator|.
name|getChangelistName
argument_list|()
operator|!=
literal|null
operator|&&
name|changeLists
operator|.
name|contains
argument_list|(
name|entry
operator|.
name|getChangelistName
argument_list|()
argument_list|)
operator|)
return|;
block|}
specifier|private
name|int
name|getMaxFormatVersion
parameter_list|()
block|{
name|int
name|maxVersion
init|=
operator|-
literal|1
decl_stmt|;
for|for
control|(
name|Iterator
name|iterator
init|=
name|myAdminAreas
operator|.
name|values
argument_list|()
operator|.
name|iterator
argument_list|()
init|;
name|iterator
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|SVNAdminArea
name|adminArea
init|=
operator|(
name|SVNAdminArea
operator|)
name|iterator
operator|.
name|next
argument_list|()
decl_stmt|;
if|if
condition|(
name|adminArea
operator|!=
literal|null
operator|&&
name|adminArea
operator|.
name|getFormatVersion
argument_list|()
operator|>
name|maxVersion
condition|)
block|{
name|maxVersion
operator|=
name|adminArea
operator|.
name|getFormatVersion
argument_list|()
expr_stmt|;
block|}
block|}
return|return
name|maxVersion
return|;
block|}
specifier|public
name|ISVNUpdateEditor
name|createUpdateEditor
parameter_list|(
name|SVNAdminAreaInfo
name|info
parameter_list|,
name|String
name|switchURL
parameter_list|,
name|boolean
name|allowUnversionedObstructions
parameter_list|,
name|boolean
name|depthIsSticky
parameter_list|,
name|SVNDepth
name|depth
parameter_list|,
name|String
index|[]
name|preservedExtensions
parameter_list|,
name|ISVNFileFetcher
name|fileFetcher
parameter_list|,
name|boolean
name|lockOnDemand
parameter_list|)
throws|throws
name|SVNException
block|{
name|int
name|maxVersion
init|=
name|getMaxFormatVersion
argument_list|()
decl_stmt|;
if|if
condition|(
literal|0
operator|<
name|maxVersion
operator|&&
name|maxVersion
operator|<
name|SVNAdminArea16
operator|.
name|WC_FORMAT
condition|)
block|{
return|return
name|SVNUpdateEditor15
operator|.
name|createUpdateEditor
argument_list|(
name|info
argument_list|,
name|switchURL
argument_list|,
name|allowUnversionedObstructions
argument_list|,
name|depthIsSticky
argument_list|,
name|depth
argument_list|,
name|preservedExtensions
argument_list|,
name|fileFetcher
argument_list|,
name|lockOnDemand
argument_list|)
return|;
block|}
return|return
name|SVNUpdateEditor
operator|.
name|createUpdateEditor
argument_list|(
name|info
argument_list|,
name|switchURL
argument_list|,
name|allowUnversionedObstructions
argument_list|,
name|depthIsSticky
argument_list|,
name|depth
argument_list|,
name|preservedExtensions
argument_list|,
name|fileFetcher
argument_list|,
name|lockOnDemand
argument_list|)
return|;
block|}
specifier|public
name|SVNMergeCallback
name|createMergeCallback
parameter_list|(
name|SVNMergeDriver
name|mergeDriver
parameter_list|,
name|SVNAdminArea
name|adminArea
parameter_list|,
name|SVNURL
name|url
parameter_list|,
name|SVNDiffOptions
name|mergeOptions
parameter_list|,
name|Map
name|conflictedPaths
parameter_list|,
name|boolean
name|force
parameter_list|,
name|boolean
name|dryRun
parameter_list|)
block|{
name|int
name|maxVersion
init|=
name|getMaxFormatVersion
argument_list|()
decl_stmt|;
if|if
condition|(
name|maxVersion
operator|<
name|SVNAdminAreaFactory
operator|.
name|WC_FORMAT_16
condition|)
block|{
return|return
operator|new
name|SVNMergeCallback15
argument_list|(
name|adminArea
argument_list|,
name|url
argument_list|,
name|force
argument_list|,
name|dryRun
argument_list|,
name|mergeOptions
argument_list|,
name|conflictedPaths
argument_list|,
name|mergeDriver
argument_list|)
return|;
block|}
return|return
operator|new
name|SVNMergeCallback
argument_list|(
name|adminArea
argument_list|,
name|url
argument_list|,
name|force
argument_list|,
name|dryRun
argument_list|,
name|mergeOptions
argument_list|,
name|conflictedPaths
argument_list|,
name|mergeDriver
argument_list|)
return|;
block|}
specifier|private
specifier|static
class|class
name|TCEntryHandler
implements|implements
name|ISVNEntryHandler
block|{
specifier|private
name|ISVNEntryHandler
name|myDelegate
decl_stmt|;
specifier|private
name|SVNDepth
name|myDepth
decl_stmt|;
specifier|private
name|File
name|myTargetPath
decl_stmt|;
specifier|private
name|SVNWCAccess
name|myWCAccess
decl_stmt|;
specifier|public
name|TCEntryHandler
parameter_list|(
name|File
name|target
parameter_list|,
name|SVNWCAccess
name|wcAccess
parameter_list|,
name|ISVNEntryHandler
name|delegate
parameter_list|,
name|SVNDepth
name|depth
parameter_list|)
block|{
name|myDelegate
operator|=
name|delegate
expr_stmt|;
name|myDepth
operator|=
name|depth
expr_stmt|;
name|myTargetPath
operator|=
name|target
expr_stmt|;
name|myWCAccess
operator|=
name|wcAccess
expr_stmt|;
block|}
specifier|public
name|void
name|handleEntry
parameter_list|(
name|File
name|path
parameter_list|,
name|SVNEntry
name|entry
parameter_list|)
throws|throws
name|SVNException
block|{
name|myDelegate
operator|.
name|handleEntry
argument_list|(
name|path
argument_list|,
name|entry
argument_list|)
expr_stmt|;
if|if
condition|(
name|entry
operator|==
literal|null
operator|||
operator|!
name|entry
operator|.
name|isDirectory
argument_list|()
operator|||
name|entry
operator|.
name|isHidden
argument_list|()
condition|)
block|{
return|return;
block|}
name|boolean
name|checkChildren
init|=
literal|false
decl_stmt|;
if|if
condition|(
name|myDepth
operator|==
name|SVNDepth
operator|.
name|IMMEDIATES
operator|||
name|myDepth
operator|==
name|SVNDepth
operator|.
name|FILES
condition|)
block|{
name|checkChildren
operator|=
name|path
operator|.
name|equals
argument_list|(
name|myTargetPath
argument_list|)
expr_stmt|;
block|}
if|else if
condition|(
name|myDepth
operator|==
name|SVNDepth
operator|.
name|INFINITY
operator|||
name|myDepth
operator|==
name|SVNDepth
operator|.
name|EXCLUDE
operator|||
name|myDepth
operator|==
name|SVNDepth
operator|.
name|UNKNOWN
condition|)
block|{
name|checkChildren
operator|=
literal|true
expr_stmt|;
block|}
else|else
block|{
return|return;
block|}
if|if
condition|(
operator|!
name|checkChildren
condition|)
block|{
return|return;
block|}
name|Map
name|tcs
init|=
name|entry
operator|.
name|getTreeConflicts
argument_list|()
decl_stmt|;
for|for
control|(
name|Iterator
name|paths
init|=
name|tcs
operator|.
name|keySet
argument_list|()
operator|.
name|iterator
argument_list|()
init|;
name|paths
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|File
name|p
init|=
operator|(
name|File
operator|)
name|paths
operator|.
name|next
argument_list|()
decl_stmt|;
name|SVNTreeConflictDescription
name|tc
init|=
operator|(
name|SVNTreeConflictDescription
operator|)
name|tcs
operator|.
name|get
argument_list|(
name|p
argument_list|)
decl_stmt|;
if|if
condition|(
name|tc
operator|.
name|getNodeKind
argument_list|()
operator|==
name|SVNNodeKind
operator|.
name|DIR
operator|&&
name|myDepth
operator|==
name|SVNDepth
operator|.
name|FILES
condition|)
block|{
continue|continue;
block|}
name|SVNEntry
name|conflictEntry
init|=
name|myWCAccess
operator|.
name|getEntry
argument_list|(
name|p
argument_list|,
literal|true
argument_list|)
decl_stmt|;
if|if
condition|(
name|conflictEntry
operator|==
literal|null
operator|||
name|conflictEntry
operator|.
name|isDeleted
argument_list|()
condition|)
block|{
name|myDelegate
operator|.
name|handleEntry
argument_list|(
name|p
argument_list|,
literal|null
argument_list|)
expr_stmt|;
block|}
block|}
block|}
specifier|public
name|void
name|handleError
parameter_list|(
name|File
name|path
parameter_list|,
name|SVNErrorMessage
name|error
parameter_list|)
throws|throws
name|SVNException
block|{
if|if
condition|(
name|error
operator|!=
literal|null
operator|&&
name|error
operator|.
name|getErrorCode
argument_list|()
operator|==
name|SVNErrorCode
operator|.
name|UNVERSIONED_RESOURCE
condition|)
block|{
name|SVNTreeConflictDescription
name|tc
init|=
name|myWCAccess
operator|.
name|getTreeConflict
argument_list|(
name|path
argument_list|)
decl_stmt|;
if|if
condition|(
name|tc
operator|!=
literal|null
condition|)
block|{
name|myDelegate
operator|.
name|handleEntry
argument_list|(
name|path
argument_list|,
literal|null
argument_list|)
expr_stmt|;
return|return;
block|}
block|}
name|myDelegate
operator|.
name|handleError
argument_list|(
name|path
argument_list|,
name|error
argument_list|)
expr_stmt|;
block|}
block|}
block|}
end_class

end_unit

