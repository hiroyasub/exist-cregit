begin_unit|revision:1.0.0;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * ====================================================================  * Copyright (c) 2004-2010 TMate Software Ltd.  All rights reserved.  *  * This software is licensed as described in the file COPYING, which  * you should have received as part of this distribution.  The terms  * are also available at http://svnkit.com/license.html  * If newer versions of this license are posted there, you may use a  * newer version instead, at your option.  * ====================================================================  */
end_comment

begin_package
package|package
name|org
operator|.
name|exist
operator|.
name|versioning
operator|.
name|svn
operator|.
name|internal
operator|.
name|wc
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|ByteArrayInputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|ByteArrayOutputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|File
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|InputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|OutputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|UnsupportedEncodingException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Arrays
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collection
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Iterator
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|TreeSet
import|;
end_import

begin_import
import|import
name|org
operator|.
name|tmatesoft
operator|.
name|svn
operator|.
name|core
operator|.
name|SVNErrorCode
import|;
end_import

begin_import
import|import
name|org
operator|.
name|tmatesoft
operator|.
name|svn
operator|.
name|core
operator|.
name|SVNErrorMessage
import|;
end_import

begin_import
import|import
name|org
operator|.
name|tmatesoft
operator|.
name|svn
operator|.
name|core
operator|.
name|SVNException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|tmatesoft
operator|.
name|svn
operator|.
name|core
operator|.
name|SVNProperties
import|;
end_import

begin_import
import|import
name|org
operator|.
name|tmatesoft
operator|.
name|svn
operator|.
name|core
operator|.
name|SVNPropertyValue
import|;
end_import

begin_import
import|import
name|org
operator|.
name|tmatesoft
operator|.
name|svn
operator|.
name|core
operator|.
name|internal
operator|.
name|wc
operator|.
name|ISVNPropertyComparator
import|;
end_import

begin_import
import|import
name|org
operator|.
name|tmatesoft
operator|.
name|svn
operator|.
name|util
operator|.
name|SVNLogType
import|;
end_import

begin_comment
comment|/**  * @version 1.3  * @author  TMate Software Ltd.  */
end_comment

begin_class
specifier|public
class|class
name|SVNWCProperties
block|{
specifier|public
specifier|static
specifier|final
name|String
name|SVN_HASH_TERMINATOR
init|=
literal|"END"
decl_stmt|;
specifier|private
name|File
name|myFile
decl_stmt|;
specifier|private
name|String
name|myPath
decl_stmt|;
specifier|public
name|SVNWCProperties
parameter_list|(
name|File
name|properitesFile
parameter_list|,
name|String
name|path
parameter_list|)
block|{
name|myFile
operator|=
name|properitesFile
expr_stmt|;
name|myPath
operator|=
name|path
expr_stmt|;
block|}
specifier|public
name|File
name|getFile
parameter_list|()
block|{
return|return
name|myFile
return|;
block|}
specifier|public
name|String
name|getPath
parameter_list|()
block|{
return|return
name|myPath
return|;
block|}
specifier|public
name|Collection
name|properties
parameter_list|(
name|Collection
name|target
parameter_list|)
throws|throws
name|SVNException
block|{
name|target
operator|=
name|target
operator|==
literal|null
condition|?
operator|new
name|TreeSet
argument_list|()
else|:
name|target
expr_stmt|;
if|if
condition|(
name|isEmpty
argument_list|()
condition|)
block|{
return|return
name|target
return|;
block|}
name|ByteArrayOutputStream
name|nameOS
init|=
operator|new
name|ByteArrayOutputStream
argument_list|()
decl_stmt|;
name|InputStream
name|is
init|=
name|SVNFileUtil
operator|.
name|openFileForReading
argument_list|(
name|getFile
argument_list|()
argument_list|,
name|SVNLogType
operator|.
name|WC
argument_list|)
decl_stmt|;
try|try
block|{
while|while
condition|(
name|readProperty
argument_list|(
literal|'K'
argument_list|,
name|is
argument_list|,
name|nameOS
argument_list|)
condition|)
block|{
name|target
operator|.
name|add
argument_list|(
operator|new
name|String
argument_list|(
name|nameOS
operator|.
name|toByteArray
argument_list|()
argument_list|,
literal|"UTF-8"
argument_list|)
argument_list|)
expr_stmt|;
name|nameOS
operator|.
name|reset
argument_list|()
expr_stmt|;
name|readProperty
argument_list|(
literal|'V'
argument_list|,
name|is
argument_list|,
literal|null
argument_list|)
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
name|SVNErrorMessage
name|err
init|=
name|SVNErrorMessage
operator|.
name|create
argument_list|(
name|SVNErrorCode
operator|.
name|IO_ERROR
argument_list|,
name|e
operator|.
name|getLocalizedMessage
argument_list|()
argument_list|)
decl_stmt|;
name|SVNErrorManager
operator|.
name|error
argument_list|(
name|err
argument_list|,
name|e
argument_list|,
name|SVNLogType
operator|.
name|WC
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
name|SVNFileUtil
operator|.
name|closeFile
argument_list|(
name|is
argument_list|)
expr_stmt|;
block|}
return|return
name|target
return|;
block|}
specifier|public
name|SVNProperties
name|asMap
parameter_list|()
throws|throws
name|SVNException
block|{
name|SVNProperties
name|result
init|=
operator|new
name|SVNProperties
argument_list|()
decl_stmt|;
if|if
condition|(
name|isEmpty
argument_list|()
condition|)
block|{
return|return
name|result
return|;
block|}
name|ByteArrayOutputStream
name|nameOS
init|=
operator|new
name|ByteArrayOutputStream
argument_list|()
decl_stmt|;
name|InputStream
name|is
init|=
name|SVNFileUtil
operator|.
name|openFileForReading
argument_list|(
name|getFile
argument_list|()
argument_list|,
name|SVNLogType
operator|.
name|WC
argument_list|)
decl_stmt|;
try|try
block|{
while|while
condition|(
name|readProperty
argument_list|(
literal|'K'
argument_list|,
name|is
argument_list|,
name|nameOS
argument_list|)
condition|)
block|{
name|String
name|name
init|=
operator|new
name|String
argument_list|(
name|nameOS
operator|.
name|toByteArray
argument_list|()
argument_list|,
literal|"UTF-8"
argument_list|)
decl_stmt|;
name|nameOS
operator|.
name|reset
argument_list|()
expr_stmt|;
name|readProperty
argument_list|(
literal|'V'
argument_list|,
name|is
argument_list|,
name|nameOS
argument_list|)
expr_stmt|;
name|byte
index|[]
name|value
init|=
name|nameOS
operator|.
name|toByteArray
argument_list|()
decl_stmt|;
name|result
operator|.
name|put
argument_list|(
name|name
argument_list|,
name|value
argument_list|)
expr_stmt|;
name|nameOS
operator|.
name|reset
argument_list|()
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
name|SVNErrorMessage
name|err
init|=
name|SVNErrorMessage
operator|.
name|create
argument_list|(
name|SVNErrorCode
operator|.
name|IO_ERROR
argument_list|,
literal|"Cannot read properties file ''{0}'': {1}"
argument_list|,
operator|new
name|Object
index|[]
block|{
name|getFile
argument_list|()
block|,
name|e
operator|.
name|getLocalizedMessage
argument_list|()
block|}
argument_list|)
decl_stmt|;
name|SVNErrorManager
operator|.
name|error
argument_list|(
name|err
argument_list|,
name|e
argument_list|,
name|SVNLogType
operator|.
name|WC
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
name|SVNFileUtil
operator|.
name|closeFile
argument_list|(
name|is
argument_list|)
expr_stmt|;
block|}
return|return
name|result
return|;
block|}
specifier|public
name|boolean
name|compareTo
parameter_list|(
name|SVNWCProperties
name|properties
parameter_list|,
name|ISVNPropertyComparator
name|comparator
parameter_list|)
throws|throws
name|SVNException
block|{
name|boolean
name|equals
init|=
literal|true
decl_stmt|;
name|Collection
name|props1
init|=
name|properties
argument_list|(
literal|null
argument_list|)
decl_stmt|;
name|Collection
name|props2
init|=
name|properties
operator|.
name|properties
argument_list|(
literal|null
argument_list|)
decl_stmt|;
comment|// missed in props2.
name|Collection
name|tmp
init|=
operator|new
name|TreeSet
argument_list|(
name|props1
argument_list|)
decl_stmt|;
name|tmp
operator|.
name|removeAll
argument_list|(
name|props2
argument_list|)
expr_stmt|;
for|for
control|(
name|Iterator
name|props
init|=
name|tmp
operator|.
name|iterator
argument_list|()
init|;
name|props
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|String
name|missing
init|=
operator|(
name|String
operator|)
name|props
operator|.
name|next
argument_list|()
decl_stmt|;
name|comparator
operator|.
name|propertyDeleted
argument_list|(
name|missing
argument_list|)
expr_stmt|;
name|equals
operator|=
literal|false
expr_stmt|;
block|}
comment|// added in props2.
name|tmp
operator|=
operator|new
name|TreeSet
argument_list|(
name|props2
argument_list|)
expr_stmt|;
name|tmp
operator|.
name|removeAll
argument_list|(
name|props1
argument_list|)
expr_stmt|;
name|File
name|tmpFile
init|=
literal|null
decl_stmt|;
name|File
name|tmpFile1
init|=
literal|null
decl_stmt|;
name|File
name|tmpFile2
init|=
literal|null
decl_stmt|;
name|OutputStream
name|os
init|=
literal|null
decl_stmt|;
name|InputStream
name|is
init|=
literal|null
decl_stmt|;
name|InputStream
name|is1
init|=
literal|null
decl_stmt|;
name|InputStream
name|is2
init|=
literal|null
decl_stmt|;
for|for
control|(
name|Iterator
name|props
init|=
name|tmp
operator|.
name|iterator
argument_list|()
init|;
name|props
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|String
name|added
init|=
operator|(
name|String
operator|)
name|props
operator|.
name|next
argument_list|()
decl_stmt|;
try|try
block|{
name|tmpFile
operator|=
name|SVNFileUtil
operator|.
name|createUniqueFile
argument_list|(
name|getFile
argument_list|()
operator|.
name|getParentFile
argument_list|()
argument_list|,
name|getFile
argument_list|()
operator|.
name|getName
argument_list|()
argument_list|,
literal|".tmp"
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|os
operator|=
name|SVNFileUtil
operator|.
name|openFileForWriting
argument_list|(
name|tmpFile
argument_list|)
expr_stmt|;
name|properties
operator|.
name|getPropertyValue
argument_list|(
name|added
argument_list|,
name|os
argument_list|)
expr_stmt|;
name|SVNFileUtil
operator|.
name|closeFile
argument_list|(
name|os
argument_list|)
expr_stmt|;
name|is
operator|=
name|SVNFileUtil
operator|.
name|openFileForReading
argument_list|(
name|tmpFile
argument_list|,
name|SVNLogType
operator|.
name|WC
argument_list|)
expr_stmt|;
name|comparator
operator|.
name|propertyAdded
argument_list|(
name|added
argument_list|,
name|is
argument_list|,
operator|(
name|int
operator|)
name|tmpFile
operator|.
name|length
argument_list|()
argument_list|)
expr_stmt|;
name|equals
operator|=
literal|false
expr_stmt|;
name|SVNFileUtil
operator|.
name|closeFile
argument_list|(
name|is
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
if|if
condition|(
name|tmpFile
operator|!=
literal|null
condition|)
block|{
name|tmpFile
operator|.
name|delete
argument_list|()
expr_stmt|;
block|}
name|SVNFileUtil
operator|.
name|closeFile
argument_list|(
name|os
argument_list|)
expr_stmt|;
name|SVNFileUtil
operator|.
name|closeFile
argument_list|(
name|is
argument_list|)
expr_stmt|;
name|tmpFile
operator|=
literal|null
expr_stmt|;
name|is
operator|=
literal|null
expr_stmt|;
name|os
operator|=
literal|null
expr_stmt|;
block|}
block|}
comment|// changed in props2
name|props2
operator|.
name|retainAll
argument_list|(
name|props1
argument_list|)
expr_stmt|;
for|for
control|(
name|Iterator
name|props
init|=
name|props2
operator|.
name|iterator
argument_list|()
init|;
name|props
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|String
name|changed
init|=
operator|(
name|String
operator|)
name|props
operator|.
name|next
argument_list|()
decl_stmt|;
try|try
block|{
name|tmpFile1
operator|=
name|SVNFileUtil
operator|.
name|createUniqueFile
argument_list|(
name|getFile
argument_list|()
operator|.
name|getParentFile
argument_list|()
argument_list|,
name|getFile
argument_list|()
operator|.
name|getName
argument_list|()
argument_list|,
literal|".tmp1"
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|tmpFile2
operator|=
name|SVNFileUtil
operator|.
name|createUniqueFile
argument_list|(
name|getFile
argument_list|()
operator|.
name|getParentFile
argument_list|()
argument_list|,
name|getFile
argument_list|()
operator|.
name|getName
argument_list|()
argument_list|,
literal|".tmp2"
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|os
operator|=
name|SVNFileUtil
operator|.
name|openFileForWriting
argument_list|(
name|tmpFile1
argument_list|)
expr_stmt|;
name|getPropertyValue
argument_list|(
name|changed
argument_list|,
name|os
argument_list|)
expr_stmt|;
name|os
operator|.
name|close
argument_list|()
expr_stmt|;
name|os
operator|=
name|SVNFileUtil
operator|.
name|openFileForWriting
argument_list|(
name|tmpFile2
argument_list|)
expr_stmt|;
name|properties
operator|.
name|getPropertyValue
argument_list|(
name|changed
argument_list|,
name|os
argument_list|)
expr_stmt|;
name|os
operator|.
name|close
argument_list|()
expr_stmt|;
if|if
condition|(
name|tmpFile2
operator|.
name|length
argument_list|()
operator|!=
name|tmpFile1
operator|.
name|length
argument_list|()
condition|)
block|{
name|is
operator|=
name|SVNFileUtil
operator|.
name|openFileForReading
argument_list|(
name|tmpFile2
argument_list|,
name|SVNLogType
operator|.
name|WC
argument_list|)
expr_stmt|;
name|comparator
operator|.
name|propertyChanged
argument_list|(
name|changed
argument_list|,
name|is
argument_list|,
operator|(
name|int
operator|)
name|tmpFile2
operator|.
name|length
argument_list|()
argument_list|)
expr_stmt|;
name|equals
operator|=
literal|false
expr_stmt|;
name|SVNFileUtil
operator|.
name|closeFile
argument_list|(
name|is
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|is1
operator|=
name|SVNFileUtil
operator|.
name|openFileForReading
argument_list|(
name|tmpFile1
argument_list|,
name|SVNLogType
operator|.
name|WC
argument_list|)
expr_stmt|;
name|is2
operator|=
name|SVNFileUtil
operator|.
name|openFileForReading
argument_list|(
name|tmpFile2
argument_list|,
name|SVNLogType
operator|.
name|WC
argument_list|)
expr_stmt|;
name|boolean
name|differs
init|=
literal|false
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|tmpFile1
operator|.
name|length
argument_list|()
condition|;
name|i
operator|++
control|)
block|{
if|if
condition|(
name|is1
operator|.
name|read
argument_list|()
operator|!=
name|is2
operator|.
name|read
argument_list|()
condition|)
block|{
name|differs
operator|=
literal|true
expr_stmt|;
break|break;
block|}
block|}
name|SVNFileUtil
operator|.
name|closeFile
argument_list|(
name|is1
argument_list|)
expr_stmt|;
name|SVNFileUtil
operator|.
name|closeFile
argument_list|(
name|is2
argument_list|)
expr_stmt|;
if|if
condition|(
name|differs
condition|)
block|{
name|is2
operator|=
name|SVNFileUtil
operator|.
name|openFileForReading
argument_list|(
name|tmpFile2
argument_list|,
name|SVNLogType
operator|.
name|WC
argument_list|)
expr_stmt|;
name|comparator
operator|.
name|propertyChanged
argument_list|(
name|changed
argument_list|,
name|is2
argument_list|,
operator|(
name|int
operator|)
name|tmpFile2
operator|.
name|length
argument_list|()
argument_list|)
expr_stmt|;
name|equals
operator|=
literal|false
expr_stmt|;
name|SVNFileUtil
operator|.
name|closeFile
argument_list|(
name|is2
argument_list|)
expr_stmt|;
block|}
block|}
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
name|SVNErrorMessage
name|err
init|=
name|SVNErrorMessage
operator|.
name|create
argument_list|(
name|SVNErrorCode
operator|.
name|IO_ERROR
argument_list|,
name|e
operator|.
name|getLocalizedMessage
argument_list|()
argument_list|)
decl_stmt|;
name|SVNErrorManager
operator|.
name|error
argument_list|(
name|err
argument_list|,
name|e
argument_list|,
name|SVNLogType
operator|.
name|WC
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
if|if
condition|(
name|tmpFile2
operator|!=
literal|null
condition|)
block|{
name|tmpFile2
operator|.
name|delete
argument_list|()
expr_stmt|;
block|}
if|if
condition|(
name|tmpFile1
operator|!=
literal|null
condition|)
block|{
name|tmpFile1
operator|.
name|delete
argument_list|()
expr_stmt|;
block|}
name|SVNFileUtil
operator|.
name|closeFile
argument_list|(
name|os
argument_list|)
expr_stmt|;
name|SVNFileUtil
operator|.
name|closeFile
argument_list|(
name|is
argument_list|)
expr_stmt|;
name|SVNFileUtil
operator|.
name|closeFile
argument_list|(
name|is1
argument_list|)
expr_stmt|;
name|SVNFileUtil
operator|.
name|closeFile
argument_list|(
name|is2
argument_list|)
expr_stmt|;
name|os
operator|=
literal|null
expr_stmt|;
name|tmpFile1
operator|=
name|tmpFile2
operator|=
literal|null
expr_stmt|;
name|is
operator|=
name|is1
operator|=
name|is2
operator|=
literal|null
expr_stmt|;
block|}
block|}
return|return
name|equals
return|;
block|}
specifier|public
name|String
name|getPropertyValue
parameter_list|(
name|String
name|name
parameter_list|)
throws|throws
name|SVNException
block|{
if|if
condition|(
name|isEmpty
argument_list|()
condition|)
block|{
return|return
literal|null
return|;
block|}
name|ByteArrayOutputStream
name|os
init|=
operator|new
name|ByteArrayOutputStream
argument_list|()
decl_stmt|;
name|os
operator|=
operator|(
name|ByteArrayOutputStream
operator|)
name|getPropertyValue
argument_list|(
name|name
argument_list|,
name|os
argument_list|)
expr_stmt|;
if|if
condition|(
name|os
operator|!=
literal|null
operator|&&
name|os
operator|.
name|size
argument_list|()
operator|>=
literal|0
condition|)
block|{
name|byte
index|[]
name|bytes
init|=
name|os
operator|.
name|toByteArray
argument_list|()
decl_stmt|;
try|try
block|{
return|return
operator|new
name|String
argument_list|(
name|bytes
argument_list|,
literal|"UTF-8"
argument_list|)
return|;
block|}
catch|catch
parameter_list|(
name|UnsupportedEncodingException
name|e
parameter_list|)
block|{
return|return
operator|new
name|String
argument_list|(
name|bytes
argument_list|)
return|;
block|}
block|}
return|return
literal|null
return|;
block|}
specifier|public
name|OutputStream
name|getPropertyValue
parameter_list|(
name|String
name|name
parameter_list|,
name|OutputStream
name|os
parameter_list|)
throws|throws
name|SVNException
block|{
if|if
condition|(
name|isEmpty
argument_list|()
condition|)
block|{
return|return
literal|null
return|;
block|}
name|ByteArrayOutputStream
name|nameOS
init|=
operator|new
name|ByteArrayOutputStream
argument_list|()
decl_stmt|;
name|InputStream
name|is
init|=
name|SVNFileUtil
operator|.
name|openFileForReading
argument_list|(
name|getFile
argument_list|()
argument_list|,
name|SVNLogType
operator|.
name|WC
argument_list|)
decl_stmt|;
try|try
block|{
while|while
condition|(
name|readProperty
argument_list|(
literal|'K'
argument_list|,
name|is
argument_list|,
name|nameOS
argument_list|)
condition|)
block|{
name|String
name|currentName
init|=
operator|new
name|String
argument_list|(
name|nameOS
operator|.
name|toByteArray
argument_list|()
argument_list|,
literal|"UTF-8"
argument_list|)
decl_stmt|;
name|nameOS
operator|.
name|reset
argument_list|()
expr_stmt|;
if|if
condition|(
name|currentName
operator|.
name|equals
argument_list|(
name|name
argument_list|)
condition|)
block|{
name|readProperty
argument_list|(
literal|'V'
argument_list|,
name|is
argument_list|,
name|os
argument_list|)
expr_stmt|;
return|return
name|os
return|;
block|}
name|readProperty
argument_list|(
literal|'V'
argument_list|,
name|is
argument_list|,
literal|null
argument_list|)
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
name|SVNErrorMessage
name|err
init|=
name|SVNErrorMessage
operator|.
name|create
argument_list|(
name|SVNErrorCode
operator|.
name|IO_ERROR
argument_list|,
name|e
operator|.
name|getLocalizedMessage
argument_list|()
argument_list|)
decl_stmt|;
name|SVNErrorManager
operator|.
name|error
argument_list|(
name|err
argument_list|,
name|e
argument_list|,
name|SVNLogType
operator|.
name|WC
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
name|SVNFileUtil
operator|.
name|closeFile
argument_list|(
name|is
argument_list|)
expr_stmt|;
block|}
return|return
literal|null
return|;
block|}
specifier|public
name|void
name|setPropertyValue
parameter_list|(
name|String
name|name
parameter_list|,
name|SVNPropertyValue
name|value
parameter_list|)
throws|throws
name|SVNException
block|{
name|byte
index|[]
name|bytes
init|=
name|SVNPropertyValue
operator|.
name|getPropertyAsBytes
argument_list|(
name|value
argument_list|)
decl_stmt|;
name|int
name|length
init|=
name|bytes
operator|!=
literal|null
operator|&&
name|bytes
operator|.
name|length
operator|>=
literal|0
condition|?
name|bytes
operator|.
name|length
else|:
operator|-
literal|1
decl_stmt|;
name|setPropertyValue
argument_list|(
name|name
argument_list|,
name|bytes
operator|!=
literal|null
condition|?
operator|new
name|ByteArrayInputStream
argument_list|(
name|bytes
argument_list|)
else|:
literal|null
argument_list|,
name|length
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|setPropertyValue
parameter_list|(
name|String
name|name
parameter_list|,
name|InputStream
name|is
parameter_list|,
name|int
name|length
parameter_list|)
throws|throws
name|SVNException
block|{
name|InputStream
name|src
init|=
literal|null
decl_stmt|;
name|OutputStream
name|dst
init|=
literal|null
decl_stmt|;
name|File
name|tmpFile
init|=
literal|null
decl_stmt|;
name|boolean
name|empty
init|=
literal|false
decl_stmt|;
try|try
block|{
name|tmpFile
operator|=
name|SVNFileUtil
operator|.
name|createUniqueFile
argument_list|(
name|getFile
argument_list|()
operator|.
name|getParentFile
argument_list|()
argument_list|,
name|getFile
argument_list|()
operator|.
name|getName
argument_list|()
argument_list|,
literal|".tmp"
argument_list|,
literal|true
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|isEmpty
argument_list|()
condition|)
block|{
name|src
operator|=
name|SVNFileUtil
operator|.
name|openFileForReading
argument_list|(
name|getFile
argument_list|()
argument_list|,
name|SVNLogType
operator|.
name|WC
argument_list|)
expr_stmt|;
block|}
name|dst
operator|=
name|SVNFileUtil
operator|.
name|openFileForWriting
argument_list|(
name|tmpFile
argument_list|)
expr_stmt|;
name|empty
operator|=
operator|!
name|copyProperties
argument_list|(
name|src
argument_list|,
name|dst
argument_list|,
name|name
argument_list|,
name|is
argument_list|,
name|length
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
name|SVNFileUtil
operator|.
name|closeFile
argument_list|(
name|src
argument_list|)
expr_stmt|;
name|SVNFileUtil
operator|.
name|closeFile
argument_list|(
name|dst
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|tmpFile
operator|!=
literal|null
condition|)
block|{
if|if
condition|(
operator|!
name|empty
condition|)
block|{
name|SVNFileUtil
operator|.
name|rename
argument_list|(
name|tmpFile
argument_list|,
name|getFile
argument_list|()
argument_list|)
expr_stmt|;
name|SVNFileUtil
operator|.
name|setReadonly
argument_list|(
name|getFile
argument_list|()
argument_list|,
literal|true
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|SVNFileUtil
operator|.
name|deleteFile
argument_list|(
name|tmpFile
argument_list|)
expr_stmt|;
name|SVNFileUtil
operator|.
name|deleteFile
argument_list|(
name|getFile
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
block|}
specifier|public
name|void
name|setProperties
parameter_list|(
name|SVNProperties
name|properties
parameter_list|)
throws|throws
name|SVNException
block|{
if|if
condition|(
name|properties
operator|!=
literal|null
condition|)
block|{
for|for
control|(
name|Iterator
name|names
init|=
name|properties
operator|.
name|nameSet
argument_list|()
operator|.
name|iterator
argument_list|()
init|;
name|names
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|String
name|name
init|=
operator|(
name|String
operator|)
name|names
operator|.
name|next
argument_list|()
decl_stmt|;
name|SVNPropertyValue
name|value
init|=
name|properties
operator|.
name|getSVNPropertyValue
argument_list|(
name|name
argument_list|)
decl_stmt|;
name|setPropertyValue
argument_list|(
name|name
argument_list|,
name|value
argument_list|)
expr_stmt|;
block|}
block|}
block|}
specifier|public
name|SVNProperties
name|compareTo
parameter_list|(
name|SVNWCProperties
name|properties
parameter_list|)
throws|throws
name|SVNException
block|{
specifier|final
name|SVNProperties
name|locallyChangedProperties
init|=
operator|new
name|SVNProperties
argument_list|()
decl_stmt|;
name|compareTo
argument_list|(
name|properties
argument_list|,
operator|new
name|ISVNPropertyComparator
argument_list|()
block|{
specifier|public
name|void
name|propertyAdded
parameter_list|(
name|String
name|name
parameter_list|,
name|InputStream
name|value
parameter_list|,
name|int
name|length
parameter_list|)
block|{
name|propertyChanged
argument_list|(
name|name
argument_list|,
name|value
argument_list|,
name|length
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|propertyChanged
parameter_list|(
name|String
name|name
parameter_list|,
name|InputStream
name|newValue
parameter_list|,
name|int
name|length
parameter_list|)
block|{
name|ByteArrayOutputStream
name|os
init|=
operator|new
name|ByteArrayOutputStream
argument_list|(
name|length
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|length
condition|;
name|i
operator|++
control|)
block|{
try|try
block|{
name|os
operator|.
name|write
argument_list|(
name|newValue
operator|.
name|read
argument_list|()
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
block|}
block|}
name|byte
index|[]
name|bytes
init|=
name|os
operator|.
name|toByteArray
argument_list|()
decl_stmt|;
try|try
block|{
name|locallyChangedProperties
operator|.
name|put
argument_list|(
name|name
argument_list|,
operator|new
name|String
argument_list|(
name|bytes
argument_list|,
literal|"UTF-8"
argument_list|)
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|UnsupportedEncodingException
name|e
parameter_list|)
block|{
name|locallyChangedProperties
operator|.
name|put
argument_list|(
name|name
argument_list|,
operator|new
name|String
argument_list|(
name|bytes
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
specifier|public
name|void
name|propertyDeleted
parameter_list|(
name|String
name|name
parameter_list|)
block|{
name|locallyChangedProperties
operator|.
name|put
argument_list|(
name|name
argument_list|,
operator|(
name|SVNPropertyValue
operator|)
literal|null
argument_list|)
expr_stmt|;
block|}
block|}
argument_list|)
expr_stmt|;
return|return
name|locallyChangedProperties
return|;
block|}
specifier|public
specifier|static
name|void
name|setProperties
parameter_list|(
name|SVNProperties
name|namesToValues
parameter_list|,
name|File
name|target
parameter_list|,
name|File
name|tmpFile
parameter_list|,
name|String
name|terminator
parameter_list|)
throws|throws
name|SVNException
block|{
name|OutputStream
name|dst
init|=
literal|null
decl_stmt|;
try|try
block|{
if|if
condition|(
name|tmpFile
operator|!=
literal|null
condition|)
block|{
name|tmpFile
operator|.
name|getParentFile
argument_list|()
operator|.
name|mkdirs
argument_list|()
expr_stmt|;
block|}
else|else
block|{
name|target
operator|.
name|getParentFile
argument_list|()
operator|.
name|mkdirs
argument_list|()
expr_stmt|;
block|}
name|dst
operator|=
name|SVNFileUtil
operator|.
name|openFileForWriting
argument_list|(
name|tmpFile
operator|!=
literal|null
condition|?
name|tmpFile
else|:
name|target
argument_list|)
expr_stmt|;
name|setProperties
argument_list|(
name|namesToValues
argument_list|,
name|dst
argument_list|,
name|terminator
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
name|SVNFileUtil
operator|.
name|closeFile
argument_list|(
name|dst
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|tmpFile
operator|!=
literal|null
operator|&&
name|target
operator|!=
literal|null
condition|)
block|{
name|target
operator|.
name|getParentFile
argument_list|()
operator|.
name|mkdirs
argument_list|()
expr_stmt|;
name|SVNFileUtil
operator|.
name|rename
argument_list|(
name|tmpFile
argument_list|,
name|target
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|target
operator|!=
literal|null
condition|)
block|{
name|SVNFileUtil
operator|.
name|setReadonly
argument_list|(
name|target
argument_list|,
literal|true
argument_list|)
expr_stmt|;
block|}
block|}
specifier|public
specifier|static
name|void
name|setProperties
parameter_list|(
name|SVNProperties
name|namesToValues
parameter_list|,
name|OutputStream
name|target
parameter_list|,
name|String
name|terminator
parameter_list|)
throws|throws
name|SVNException
block|{
try|try
block|{
name|Object
index|[]
name|keys
init|=
name|namesToValues
operator|.
name|nameSet
argument_list|()
operator|.
name|toArray
argument_list|()
decl_stmt|;
name|Arrays
operator|.
name|sort
argument_list|(
name|keys
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|keys
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
name|String
name|propertyName
init|=
operator|(
name|String
operator|)
name|keys
index|[
name|i
index|]
decl_stmt|;
name|writeProperty
argument_list|(
name|target
argument_list|,
literal|'K'
argument_list|,
name|propertyName
operator|.
name|getBytes
argument_list|(
literal|"UTF-8"
argument_list|)
argument_list|)
expr_stmt|;
name|writeProperty
argument_list|(
name|target
argument_list|,
literal|'V'
argument_list|,
name|SVNPropertyValue
operator|.
name|getPropertyAsBytes
argument_list|(
name|namesToValues
operator|.
name|getSVNPropertyValue
argument_list|(
name|propertyName
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|terminator
operator|!=
literal|null
condition|)
block|{
name|target
operator|.
name|write
argument_list|(
name|terminator
operator|.
name|getBytes
argument_list|(
literal|"UTF-8"
argument_list|)
argument_list|)
expr_stmt|;
name|target
operator|.
name|write
argument_list|(
literal|'\n'
argument_list|)
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
name|IOException
name|ioe
parameter_list|)
block|{
name|SVNErrorMessage
name|err
init|=
name|SVNErrorMessage
operator|.
name|create
argument_list|(
name|SVNErrorCode
operator|.
name|IO_ERROR
argument_list|,
name|ioe
operator|.
name|getLocalizedMessage
argument_list|()
argument_list|)
decl_stmt|;
name|SVNErrorManager
operator|.
name|error
argument_list|(
name|err
argument_list|,
name|ioe
argument_list|,
name|SVNLogType
operator|.
name|WC
argument_list|)
expr_stmt|;
block|}
block|}
specifier|public
specifier|static
name|void
name|appendProperty
parameter_list|(
name|String
name|name
parameter_list|,
name|SVNPropertyValue
name|value
parameter_list|,
name|OutputStream
name|target
parameter_list|)
throws|throws
name|SVNException
block|{
if|if
condition|(
name|name
operator|==
literal|null
operator|||
name|value
operator|==
literal|null
condition|)
block|{
return|return;
block|}
name|byte
index|[]
name|bytes
init|=
name|SVNPropertyValue
operator|.
name|getPropertyAsBytes
argument_list|(
name|value
argument_list|)
decl_stmt|;
try|try
block|{
name|writeProperty
argument_list|(
name|target
argument_list|,
literal|'K'
argument_list|,
name|name
operator|.
name|getBytes
argument_list|(
literal|"UTF-8"
argument_list|)
argument_list|)
expr_stmt|;
name|writeProperty
argument_list|(
name|target
argument_list|,
literal|'V'
argument_list|,
name|bytes
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|ioe
parameter_list|)
block|{
name|SVNErrorMessage
name|err
init|=
name|SVNErrorMessage
operator|.
name|create
argument_list|(
name|SVNErrorCode
operator|.
name|IO_ERROR
argument_list|,
name|ioe
operator|.
name|getLocalizedMessage
argument_list|()
argument_list|)
decl_stmt|;
name|SVNErrorManager
operator|.
name|error
argument_list|(
name|err
argument_list|,
name|ioe
argument_list|,
name|SVNLogType
operator|.
name|WC
argument_list|)
expr_stmt|;
block|}
block|}
specifier|public
specifier|static
name|void
name|appendPropertyDeleted
parameter_list|(
name|String
name|name
parameter_list|,
name|OutputStream
name|target
parameter_list|)
throws|throws
name|SVNException
block|{
if|if
condition|(
name|name
operator|==
literal|null
condition|)
block|{
return|return;
block|}
try|try
block|{
name|writeProperty
argument_list|(
name|target
argument_list|,
literal|'D'
argument_list|,
name|name
operator|.
name|getBytes
argument_list|(
literal|"UTF-8"
argument_list|)
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|ioe
parameter_list|)
block|{
name|SVNErrorMessage
name|err
init|=
name|SVNErrorMessage
operator|.
name|create
argument_list|(
name|SVNErrorCode
operator|.
name|IO_ERROR
argument_list|,
name|ioe
operator|.
name|getLocalizedMessage
argument_list|()
argument_list|)
decl_stmt|;
name|SVNErrorManager
operator|.
name|error
argument_list|(
name|err
argument_list|,
name|ioe
argument_list|,
name|SVNLogType
operator|.
name|WC
argument_list|)
expr_stmt|;
block|}
block|}
comment|/** @noinspection ResultOfMethodCallIgnored */
specifier|private
specifier|static
name|boolean
name|copyProperties
parameter_list|(
name|InputStream
name|is
parameter_list|,
name|OutputStream
name|os
parameter_list|,
name|String
name|name
parameter_list|,
name|InputStream
name|value
parameter_list|,
name|int
name|length
parameter_list|)
throws|throws
name|SVNException
block|{
comment|// read names, till name is met, then insert value or skip this
comment|// property.
name|int
name|propCount
init|=
literal|0
decl_stmt|;
try|try
block|{
if|if
condition|(
name|is
operator|!=
literal|null
condition|)
block|{
name|int
name|l
init|=
literal|0
decl_stmt|;
while|while
condition|(
operator|(
name|l
operator|=
name|readLength
argument_list|(
name|is
argument_list|,
literal|'K'
argument_list|)
operator|)
operator|>
literal|0
condition|)
block|{
name|byte
index|[]
name|nameBytes
init|=
operator|new
name|byte
index|[
name|l
index|]
decl_stmt|;
name|SVNFileUtil
operator|.
name|readIntoBuffer
argument_list|(
name|is
argument_list|,
name|nameBytes
argument_list|,
literal|0
argument_list|,
name|nameBytes
operator|.
name|length
argument_list|)
expr_stmt|;
name|is
operator|.
name|read
argument_list|()
expr_stmt|;
if|if
condition|(
name|name
operator|.
name|equals
argument_list|(
operator|new
name|String
argument_list|(
name|nameBytes
argument_list|,
literal|"UTF-8"
argument_list|)
argument_list|)
condition|)
block|{
comment|// skip property, will be appended.
name|readProperty
argument_list|(
literal|'V'
argument_list|,
name|is
argument_list|,
literal|null
argument_list|)
expr_stmt|;
continue|continue;
block|}
comment|// save name
name|writeProperty
argument_list|(
name|os
argument_list|,
literal|'K'
argument_list|,
name|nameBytes
argument_list|)
expr_stmt|;
name|l
operator|=
name|readLength
argument_list|(
name|is
argument_list|,
literal|'V'
argument_list|)
expr_stmt|;
name|writeProperty
argument_list|(
name|os
argument_list|,
literal|'V'
argument_list|,
name|is
argument_list|,
name|l
argument_list|)
expr_stmt|;
name|is
operator|.
name|read
argument_list|()
expr_stmt|;
name|propCount
operator|++
expr_stmt|;
block|}
block|}
if|if
condition|(
name|value
operator|!=
literal|null
operator|&&
name|length
operator|>=
literal|0
condition|)
block|{
name|byte
index|[]
name|nameBytes
init|=
name|name
operator|.
name|getBytes
argument_list|(
literal|"UTF-8"
argument_list|)
decl_stmt|;
name|writeProperty
argument_list|(
name|os
argument_list|,
literal|'K'
argument_list|,
name|nameBytes
argument_list|)
expr_stmt|;
name|writeProperty
argument_list|(
name|os
argument_list|,
literal|'V'
argument_list|,
name|value
argument_list|,
name|length
argument_list|)
expr_stmt|;
name|propCount
operator|++
expr_stmt|;
block|}
if|if
condition|(
name|propCount
operator|>
literal|0
condition|)
block|{
name|os
operator|.
name|write
argument_list|(
operator|new
name|byte
index|[]
block|{
literal|'E'
block|,
literal|'N'
block|,
literal|'D'
block|,
literal|'\n'
block|}
argument_list|)
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
name|SVNErrorMessage
name|err
init|=
name|SVNErrorMessage
operator|.
name|create
argument_list|(
name|SVNErrorCode
operator|.
name|IO_ERROR
argument_list|,
name|e
operator|.
name|getLocalizedMessage
argument_list|()
argument_list|)
decl_stmt|;
name|SVNErrorManager
operator|.
name|error
argument_list|(
name|err
argument_list|,
name|e
argument_list|,
name|SVNLogType
operator|.
name|WC
argument_list|)
expr_stmt|;
block|}
return|return
name|propCount
operator|>
literal|0
return|;
block|}
specifier|private
specifier|static
name|boolean
name|readProperty
parameter_list|(
name|char
name|type
parameter_list|,
name|InputStream
name|is
parameter_list|,
name|OutputStream
name|os
parameter_list|)
throws|throws
name|IOException
block|{
name|int
name|length
init|=
name|readLength
argument_list|(
name|is
argument_list|,
name|type
argument_list|)
decl_stmt|;
if|if
condition|(
name|length
operator|<
literal|0
condition|)
block|{
return|return
literal|false
return|;
block|}
if|if
condition|(
name|os
operator|!=
literal|null
condition|)
block|{
name|byte
index|[]
name|value
init|=
operator|new
name|byte
index|[
name|length
index|]
decl_stmt|;
name|int
name|r
init|=
name|SVNFileUtil
operator|.
name|readIntoBuffer
argument_list|(
name|is
argument_list|,
name|value
argument_list|,
literal|0
argument_list|,
name|value
operator|.
name|length
argument_list|)
decl_stmt|;
if|if
condition|(
name|r
operator|>=
literal|0
condition|)
block|{
name|os
operator|.
name|write
argument_list|(
name|value
argument_list|,
literal|0
argument_list|,
name|r
argument_list|)
expr_stmt|;
block|}
else|else
block|{
return|return
literal|false
return|;
block|}
block|}
else|else
block|{
while|while
condition|(
name|length
operator|>
literal|0
condition|)
block|{
name|length
operator|-=
name|is
operator|.
name|skip
argument_list|(
name|length
argument_list|)
expr_stmt|;
block|}
block|}
return|return
name|is
operator|.
name|read
argument_list|()
operator|==
literal|'\n'
return|;
block|}
specifier|private
specifier|static
name|void
name|writeProperty
parameter_list|(
name|OutputStream
name|os
parameter_list|,
name|char
name|type
parameter_list|,
name|byte
index|[]
name|value
parameter_list|)
throws|throws
name|IOException
block|{
name|os
operator|.
name|write
argument_list|(
operator|(
name|byte
operator|)
name|type
argument_list|)
expr_stmt|;
name|os
operator|.
name|write
argument_list|(
literal|' '
argument_list|)
expr_stmt|;
name|os
operator|.
name|write
argument_list|(
name|Integer
operator|.
name|toString
argument_list|(
name|value
operator|.
name|length
argument_list|)
operator|.
name|getBytes
argument_list|(
literal|"UTF-8"
argument_list|)
argument_list|)
expr_stmt|;
name|os
operator|.
name|write
argument_list|(
literal|'\n'
argument_list|)
expr_stmt|;
name|os
operator|.
name|write
argument_list|(
name|value
argument_list|)
expr_stmt|;
name|os
operator|.
name|write
argument_list|(
literal|'\n'
argument_list|)
expr_stmt|;
block|}
specifier|private
specifier|static
name|void
name|writeProperty
parameter_list|(
name|OutputStream
name|os
parameter_list|,
name|char
name|type
parameter_list|,
name|InputStream
name|value
parameter_list|,
name|int
name|length
parameter_list|)
throws|throws
name|IOException
block|{
name|os
operator|.
name|write
argument_list|(
operator|(
name|byte
operator|)
name|type
argument_list|)
expr_stmt|;
name|os
operator|.
name|write
argument_list|(
literal|' '
argument_list|)
expr_stmt|;
name|os
operator|.
name|write
argument_list|(
name|Integer
operator|.
name|toString
argument_list|(
name|length
argument_list|)
operator|.
name|getBytes
argument_list|(
literal|"UTF-8"
argument_list|)
argument_list|)
expr_stmt|;
name|os
operator|.
name|write
argument_list|(
literal|'\n'
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|length
condition|;
name|i
operator|++
control|)
block|{
name|int
name|r
init|=
name|value
operator|.
name|read
argument_list|()
decl_stmt|;
name|os
operator|.
name|write
argument_list|(
name|r
argument_list|)
expr_stmt|;
block|}
name|os
operator|.
name|write
argument_list|(
literal|'\n'
argument_list|)
expr_stmt|;
block|}
specifier|private
specifier|static
name|int
name|readLength
parameter_list|(
name|InputStream
name|is
parameter_list|,
name|char
name|type
parameter_list|)
throws|throws
name|IOException
block|{
name|byte
index|[]
name|buffer
init|=
operator|new
name|byte
index|[
literal|255
index|]
decl_stmt|;
name|int
name|r
init|=
name|SVNFileUtil
operator|.
name|readIntoBuffer
argument_list|(
name|is
argument_list|,
name|buffer
argument_list|,
literal|0
argument_list|,
literal|4
argument_list|)
decl_stmt|;
if|if
condition|(
name|r
operator|!=
literal|4
condition|)
block|{
throw|throw
operator|new
name|IOException
argument_list|(
literal|"invalid properties file format"
argument_list|)
throw|;
block|}
comment|// either END\n or K x\n
if|if
condition|(
name|buffer
index|[
literal|0
index|]
operator|==
literal|'E'
operator|&&
name|buffer
index|[
literal|1
index|]
operator|==
literal|'N'
operator|&&
name|buffer
index|[
literal|2
index|]
operator|==
literal|'D'
operator|&&
name|buffer
index|[
literal|3
index|]
operator|==
literal|'\n'
condition|)
block|{
return|return
operator|-
literal|1
return|;
block|}
if|else if
condition|(
name|buffer
index|[
literal|0
index|]
operator|==
name|type
operator|&&
name|buffer
index|[
literal|1
index|]
operator|==
literal|' '
condition|)
block|{
name|int
name|i
init|=
literal|4
decl_stmt|;
if|if
condition|(
name|buffer
index|[
literal|3
index|]
operator|!=
literal|'\n'
condition|)
block|{
while|while
condition|(
literal|true
condition|)
block|{
name|int
name|b
init|=
name|is
operator|.
name|read
argument_list|()
decl_stmt|;
if|if
condition|(
name|b
operator|<
literal|0
condition|)
block|{
throw|throw
operator|new
name|IOException
argument_list|(
literal|"invalid properties file format"
argument_list|)
throw|;
block|}
if|else if
condition|(
name|b
operator|==
literal|'\n'
condition|)
block|{
break|break;
block|}
name|buffer
index|[
name|i
index|]
operator|=
operator|(
name|byte
operator|)
operator|(
literal|0xFF
operator|&
name|b
operator|)
expr_stmt|;
name|i
operator|++
expr_stmt|;
block|}
block|}
else|else
block|{
name|i
operator|=
literal|3
expr_stmt|;
block|}
name|String
name|length
init|=
operator|new
name|String
argument_list|(
name|buffer
argument_list|,
literal|2
argument_list|,
name|i
operator|-
literal|2
argument_list|,
literal|"UTF-8"
argument_list|)
decl_stmt|;
return|return
name|Integer
operator|.
name|parseInt
argument_list|(
name|length
operator|.
name|trim
argument_list|()
argument_list|)
return|;
block|}
throw|throw
operator|new
name|IOException
argument_list|(
literal|"invalid properties file format"
argument_list|)
throw|;
block|}
specifier|public
name|boolean
name|isEmpty
parameter_list|()
block|{
return|return
operator|!
name|getFile
argument_list|()
operator|.
name|exists
argument_list|()
operator|||
name|getFile
argument_list|()
operator|.
name|length
argument_list|()
operator|<=
literal|4
return|;
block|}
block|}
end_class

end_unit

