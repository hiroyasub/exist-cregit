begin_unit|revision:1.0.0;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * ====================================================================  * Copyright (c) 2004-2010 TMate Software Ltd.  All rights reserved.  *  * This software is licensed as described in the file COPYING, which  * you should have received as part of this distribution.  The terms  * are also available at http://svnkit.com/license.html  * If newer versions of this license are posted there, you may use a  * newer version instead, at your option.  * ====================================================================  */
end_comment

begin_package
package|package
name|org
operator|.
name|exist
operator|.
name|versioning
operator|.
name|svn
operator|.
name|internal
operator|.
name|wc
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|File
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|OutputStream
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|util
operator|.
name|io
operator|.
name|Resource
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|versioning
operator|.
name|svn
operator|.
name|internal
operator|.
name|wc
operator|.
name|admin
operator|.
name|SVNAdminArea
import|;
end_import

begin_import
import|import
name|org
operator|.
name|tmatesoft
operator|.
name|svn
operator|.
name|core
operator|.
name|SVNErrorCode
import|;
end_import

begin_import
import|import
name|org
operator|.
name|tmatesoft
operator|.
name|svn
operator|.
name|core
operator|.
name|SVNErrorMessage
import|;
end_import

begin_import
import|import
name|org
operator|.
name|tmatesoft
operator|.
name|svn
operator|.
name|core
operator|.
name|SVNException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|tmatesoft
operator|.
name|svn
operator|.
name|core
operator|.
name|SVNNodeKind
import|;
end_import

begin_import
import|import
name|org
operator|.
name|tmatesoft
operator|.
name|svn
operator|.
name|util
operator|.
name|SVNLogType
import|;
end_import

begin_comment
comment|/**  * @version 1.3  * @author  TMate Software Ltd.  */
end_comment

begin_class
specifier|public
class|class
name|SVNAdminUtil
block|{
specifier|private
specifier|static
specifier|final
name|byte
index|[]
name|FORMAT_TEXT
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|byte
index|[]
name|README_TEXT
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|boolean
name|SKIP_README
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|String
name|BASE_EXT
init|=
literal|".svn-base"
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|String
name|REVERT_EXT
init|=
literal|".svn-revert"
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|String
name|WORK_EXT
init|=
literal|".svn-work"
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|String
name|TEXT_BASE_DIR_NAME
init|=
literal|"text-base"
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|String
name|PROP_BASE_DIR_NAME
init|=
literal|"prop-base"
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|String
name|PROP_WORK_DIR_NAME
init|=
literal|"props"
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|String
name|PROP_WC_DIR_NAME
init|=
literal|"wcprops"
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|String
name|TMP_DIR_NAME
init|=
literal|"tmp"
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|String
name|DIR_PROPS_FILE
init|=
literal|"dir-props"
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|String
name|DIR_BASE_PROPS_FILE
init|=
literal|"dir-prop-base"
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|String
name|DIR_REVERT_PROPS_FILE
init|=
literal|"dir-prop-revert"
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|String
name|DIR_WC_PROPS_FILE
init|=
literal|"dir-wcprops"
decl_stmt|;
static|static
block|{
name|String
name|eol
init|=
name|System
operator|.
name|getProperty
argument_list|(
literal|"line.separator"
argument_list|)
decl_stmt|;
name|FORMAT_TEXT
operator|=
operator|new
name|byte
index|[]
block|{
literal|'4'
block|,
literal|'\n'
block|}
expr_stmt|;
name|README_TEXT
operator|=
operator|(
literal|"This is a Subversion working copy administrative directory."
operator|+
name|eol
operator|+
literal|"Visit http://subversion.tigris.org/ for more information."
operator|+
name|eol
operator|)
operator|.
name|getBytes
argument_list|()
expr_stmt|;
name|SKIP_README
operator|=
name|Boolean
operator|.
name|getBoolean
argument_list|(
literal|"javasvn.skipReadme"
argument_list|)
condition|?
literal|true
else|:
name|Boolean
operator|.
name|getBoolean
argument_list|(
literal|"svnkit.skipReadme"
argument_list|)
expr_stmt|;
block|}
specifier|public
specifier|static
name|void
name|createReadmeFile
parameter_list|(
name|File
name|adminDir
parameter_list|)
throws|throws
name|SVNException
block|{
if|if
condition|(
name|SKIP_README
condition|)
block|{
return|return;
block|}
name|OutputStream
name|os
init|=
literal|null
decl_stmt|;
try|try
block|{
name|os
operator|=
name|SVNFileUtil
operator|.
name|openFileForWriting
argument_list|(
operator|new
name|Resource
argument_list|(
name|adminDir
argument_list|,
literal|"README.txt"
argument_list|)
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|os
operator|.
name|write
argument_list|(
name|README_TEXT
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
name|SVNErrorMessage
name|err
init|=
name|SVNErrorMessage
operator|.
name|create
argument_list|(
name|SVNErrorCode
operator|.
name|IO_ERROR
argument_list|,
name|e
operator|.
name|getLocalizedMessage
argument_list|()
argument_list|)
decl_stmt|;
name|SVNErrorManager
operator|.
name|error
argument_list|(
name|err
argument_list|,
name|e
argument_list|,
name|SVNLogType
operator|.
name|FSFS
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
name|SVNFileUtil
operator|.
name|closeFile
argument_list|(
name|os
argument_list|)
expr_stmt|;
block|}
block|}
specifier|public
specifier|static
name|void
name|createFormatFile
parameter_list|(
name|File
name|adminDir
parameter_list|)
throws|throws
name|SVNException
block|{
name|OutputStream
name|os
init|=
literal|null
decl_stmt|;
try|try
block|{
name|os
operator|=
name|SVNFileUtil
operator|.
name|openFileForWriting
argument_list|(
operator|new
name|Resource
argument_list|(
name|adminDir
argument_list|,
literal|"format"
argument_list|)
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|os
operator|.
name|write
argument_list|(
name|FORMAT_TEXT
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
name|SVNErrorMessage
name|err
init|=
name|SVNErrorMessage
operator|.
name|create
argument_list|(
name|SVNErrorCode
operator|.
name|IO_ERROR
argument_list|,
name|e
operator|.
name|getLocalizedMessage
argument_list|()
argument_list|)
decl_stmt|;
name|SVNErrorManager
operator|.
name|error
argument_list|(
name|err
argument_list|,
name|e
argument_list|,
name|SVNLogType
operator|.
name|FSFS
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
name|SVNFileUtil
operator|.
name|closeFile
argument_list|(
name|os
argument_list|)
expr_stmt|;
block|}
block|}
specifier|public
specifier|static
name|String
name|getTextBasePath
parameter_list|(
name|String
name|name
parameter_list|,
name|boolean
name|tmp
parameter_list|)
block|{
name|StringBuffer
name|buffer
init|=
operator|new
name|StringBuffer
argument_list|()
decl_stmt|;
name|buffer
operator|.
name|append
argument_list|(
name|SVNFileUtil
operator|.
name|getAdminDirectoryName
argument_list|()
argument_list|)
expr_stmt|;
name|buffer
operator|.
name|append
argument_list|(
literal|'/'
argument_list|)
expr_stmt|;
if|if
condition|(
name|tmp
condition|)
block|{
name|buffer
operator|.
name|append
argument_list|(
name|TMP_DIR_NAME
argument_list|)
expr_stmt|;
name|buffer
operator|.
name|append
argument_list|(
literal|'/'
argument_list|)
expr_stmt|;
block|}
name|buffer
operator|.
name|append
argument_list|(
name|TEXT_BASE_DIR_NAME
argument_list|)
expr_stmt|;
name|buffer
operator|.
name|append
argument_list|(
literal|'/'
argument_list|)
expr_stmt|;
name|buffer
operator|.
name|append
argument_list|(
name|name
argument_list|)
expr_stmt|;
name|buffer
operator|.
name|append
argument_list|(
name|BASE_EXT
argument_list|)
expr_stmt|;
return|return
name|buffer
operator|.
name|toString
argument_list|()
return|;
block|}
specifier|public
specifier|static
name|String
name|getTextRevertPath
parameter_list|(
name|String
name|name
parameter_list|,
name|boolean
name|tmp
parameter_list|)
block|{
name|StringBuffer
name|buffer
init|=
operator|new
name|StringBuffer
argument_list|()
decl_stmt|;
name|buffer
operator|.
name|append
argument_list|(
name|SVNFileUtil
operator|.
name|getAdminDirectoryName
argument_list|()
argument_list|)
expr_stmt|;
name|buffer
operator|.
name|append
argument_list|(
literal|'/'
argument_list|)
expr_stmt|;
if|if
condition|(
name|tmp
condition|)
block|{
name|buffer
operator|.
name|append
argument_list|(
name|TMP_DIR_NAME
argument_list|)
expr_stmt|;
name|buffer
operator|.
name|append
argument_list|(
literal|'/'
argument_list|)
expr_stmt|;
block|}
name|buffer
operator|.
name|append
argument_list|(
name|TEXT_BASE_DIR_NAME
argument_list|)
expr_stmt|;
name|buffer
operator|.
name|append
argument_list|(
literal|'/'
argument_list|)
expr_stmt|;
name|buffer
operator|.
name|append
argument_list|(
name|name
argument_list|)
expr_stmt|;
name|buffer
operator|.
name|append
argument_list|(
name|REVERT_EXT
argument_list|)
expr_stmt|;
return|return
name|buffer
operator|.
name|toString
argument_list|()
return|;
block|}
specifier|public
specifier|static
name|String
name|getPropPath
parameter_list|(
name|String
name|name
parameter_list|,
name|SVNNodeKind
name|kind
parameter_list|,
name|boolean
name|tmp
parameter_list|)
block|{
name|StringBuffer
name|buffer
init|=
operator|new
name|StringBuffer
argument_list|()
decl_stmt|;
name|buffer
operator|.
name|append
argument_list|(
name|SVNFileUtil
operator|.
name|getAdminDirectoryName
argument_list|()
argument_list|)
expr_stmt|;
name|buffer
operator|.
name|append
argument_list|(
literal|'/'
argument_list|)
expr_stmt|;
if|if
condition|(
name|tmp
condition|)
block|{
name|buffer
operator|.
name|append
argument_list|(
name|TMP_DIR_NAME
argument_list|)
expr_stmt|;
name|buffer
operator|.
name|append
argument_list|(
literal|'/'
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|kind
operator|==
name|SVNNodeKind
operator|.
name|DIR
condition|)
block|{
name|buffer
operator|.
name|append
argument_list|(
name|DIR_PROPS_FILE
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|buffer
operator|.
name|append
argument_list|(
name|PROP_WORK_DIR_NAME
argument_list|)
expr_stmt|;
name|buffer
operator|.
name|append
argument_list|(
literal|'/'
argument_list|)
expr_stmt|;
name|buffer
operator|.
name|append
argument_list|(
name|name
argument_list|)
expr_stmt|;
name|buffer
operator|.
name|append
argument_list|(
name|WORK_EXT
argument_list|)
expr_stmt|;
block|}
return|return
name|buffer
operator|.
name|toString
argument_list|()
return|;
block|}
specifier|public
specifier|static
name|String
name|getPropBasePath
parameter_list|(
name|String
name|name
parameter_list|,
name|SVNNodeKind
name|kind
parameter_list|,
name|boolean
name|tmp
parameter_list|)
block|{
name|StringBuffer
name|buffer
init|=
operator|new
name|StringBuffer
argument_list|()
decl_stmt|;
name|buffer
operator|.
name|append
argument_list|(
name|SVNFileUtil
operator|.
name|getAdminDirectoryName
argument_list|()
argument_list|)
expr_stmt|;
name|buffer
operator|.
name|append
argument_list|(
literal|'/'
argument_list|)
expr_stmt|;
if|if
condition|(
name|tmp
condition|)
block|{
name|buffer
operator|.
name|append
argument_list|(
name|TMP_DIR_NAME
argument_list|)
expr_stmt|;
name|buffer
operator|.
name|append
argument_list|(
literal|'/'
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|kind
operator|==
name|SVNNodeKind
operator|.
name|DIR
condition|)
block|{
name|buffer
operator|.
name|append
argument_list|(
name|DIR_BASE_PROPS_FILE
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|buffer
operator|.
name|append
argument_list|(
name|PROP_BASE_DIR_NAME
argument_list|)
expr_stmt|;
name|buffer
operator|.
name|append
argument_list|(
literal|'/'
argument_list|)
expr_stmt|;
name|buffer
operator|.
name|append
argument_list|(
name|name
argument_list|)
expr_stmt|;
name|buffer
operator|.
name|append
argument_list|(
name|BASE_EXT
argument_list|)
expr_stmt|;
block|}
return|return
name|buffer
operator|.
name|toString
argument_list|()
return|;
block|}
specifier|public
specifier|static
name|String
name|getPropRevertPath
parameter_list|(
name|String
name|name
parameter_list|,
name|SVNNodeKind
name|kind
parameter_list|,
name|boolean
name|tmp
parameter_list|)
block|{
name|StringBuffer
name|buffer
init|=
operator|new
name|StringBuffer
argument_list|()
decl_stmt|;
name|buffer
operator|.
name|append
argument_list|(
name|SVNFileUtil
operator|.
name|getAdminDirectoryName
argument_list|()
argument_list|)
expr_stmt|;
name|buffer
operator|.
name|append
argument_list|(
literal|'/'
argument_list|)
expr_stmt|;
if|if
condition|(
name|tmp
condition|)
block|{
name|buffer
operator|.
name|append
argument_list|(
name|TMP_DIR_NAME
argument_list|)
expr_stmt|;
name|buffer
operator|.
name|append
argument_list|(
literal|'/'
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|kind
operator|==
name|SVNNodeKind
operator|.
name|DIR
condition|)
block|{
name|buffer
operator|.
name|append
argument_list|(
name|DIR_REVERT_PROPS_FILE
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|buffer
operator|.
name|append
argument_list|(
name|PROP_BASE_DIR_NAME
argument_list|)
expr_stmt|;
name|buffer
operator|.
name|append
argument_list|(
literal|'/'
argument_list|)
expr_stmt|;
name|buffer
operator|.
name|append
argument_list|(
name|name
argument_list|)
expr_stmt|;
name|buffer
operator|.
name|append
argument_list|(
name|REVERT_EXT
argument_list|)
expr_stmt|;
block|}
return|return
name|buffer
operator|.
name|toString
argument_list|()
return|;
block|}
specifier|public
specifier|static
name|String
name|getWCPropPath
parameter_list|(
name|String
name|name
parameter_list|,
name|SVNNodeKind
name|kind
parameter_list|,
name|boolean
name|tmp
parameter_list|)
block|{
name|StringBuffer
name|buffer
init|=
operator|new
name|StringBuffer
argument_list|()
decl_stmt|;
name|buffer
operator|.
name|append
argument_list|(
name|SVNFileUtil
operator|.
name|getAdminDirectoryName
argument_list|()
argument_list|)
expr_stmt|;
name|buffer
operator|.
name|append
argument_list|(
literal|'/'
argument_list|)
expr_stmt|;
if|if
condition|(
name|tmp
condition|)
block|{
name|buffer
operator|.
name|append
argument_list|(
name|TMP_DIR_NAME
argument_list|)
expr_stmt|;
name|buffer
operator|.
name|append
argument_list|(
literal|'/'
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|kind
operator|==
name|SVNNodeKind
operator|.
name|DIR
condition|)
block|{
name|buffer
operator|.
name|append
argument_list|(
name|DIR_WC_PROPS_FILE
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|buffer
operator|.
name|append
argument_list|(
name|PROP_WC_DIR_NAME
argument_list|)
expr_stmt|;
name|buffer
operator|.
name|append
argument_list|(
literal|'/'
argument_list|)
expr_stmt|;
name|buffer
operator|.
name|append
argument_list|(
name|name
argument_list|)
expr_stmt|;
name|buffer
operator|.
name|append
argument_list|(
name|WORK_EXT
argument_list|)
expr_stmt|;
block|}
return|return
name|buffer
operator|.
name|toString
argument_list|()
return|;
block|}
comment|/**      * Creates "tempfile[.n].tmp" in admin area's /tmp dir      *        * @param adminArea      * @return      * @throws SVNException      */
specifier|public
specifier|static
name|File
name|createTmpFile
parameter_list|(
name|SVNAdminArea
name|adminArea
parameter_list|)
throws|throws
name|SVNException
block|{
return|return
name|createTmpFile
argument_list|(
name|adminArea
argument_list|,
literal|"tempfile"
argument_list|,
literal|".tmp"
argument_list|,
literal|true
argument_list|)
return|;
block|}
specifier|public
specifier|static
name|File
name|createTmpFile
parameter_list|(
name|SVNAdminArea
name|adminArea
parameter_list|,
name|String
name|prefix
parameter_list|,
name|String
name|suffix
parameter_list|,
name|boolean
name|tmp
parameter_list|)
throws|throws
name|SVNException
block|{
name|StringBuffer
name|buffer
init|=
operator|new
name|StringBuffer
argument_list|()
decl_stmt|;
name|buffer
operator|.
name|append
argument_list|(
name|SVNFileUtil
operator|.
name|getAdminDirectoryName
argument_list|()
argument_list|)
expr_stmt|;
name|buffer
operator|.
name|append
argument_list|(
literal|'/'
argument_list|)
expr_stmt|;
if|if
condition|(
name|tmp
condition|)
block|{
name|buffer
operator|.
name|append
argument_list|(
name|TMP_DIR_NAME
argument_list|)
expr_stmt|;
name|buffer
operator|.
name|append
argument_list|(
literal|'/'
argument_list|)
expr_stmt|;
block|}
name|String
name|adminPath
init|=
name|buffer
operator|.
name|toString
argument_list|()
decl_stmt|;
name|File
name|dir
init|=
name|adminArea
operator|.
name|getFile
argument_list|(
name|adminPath
argument_list|)
decl_stmt|;
return|return
name|SVNFileUtil
operator|.
name|createUniqueFile
argument_list|(
name|dir
argument_list|,
name|prefix
argument_list|,
name|suffix
argument_list|,
literal|false
argument_list|)
return|;
block|}
block|}
end_class

end_unit

