begin_unit|revision:1.0.0;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * ====================================================================  * Copyright (c) 2004-2010 TMate Software Ltd.  All rights reserved.  *  * This software is licensed as described in the file COPYING, which  * you should have received as part of this distribution.  The terms  * are also available at http://svnkit.com/license.html  * If newer versions of this license are posted there, you may use a  * newer version instead, at your option.  * ====================================================================  */
end_comment

begin_package
package|package
name|org
operator|.
name|exist
operator|.
name|versioning
operator|.
name|svn
operator|.
name|internal
operator|.
name|wc
package|;
end_package

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|versioning
operator|.
name|svn
operator|.
name|internal
operator|.
name|wc
operator|.
name|admin
operator|.
name|SVNAdminArea
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|versioning
operator|.
name|svn
operator|.
name|internal
operator|.
name|wc
operator|.
name|admin
operator|.
name|SVNAdminAreaInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|versioning
operator|.
name|svn
operator|.
name|internal
operator|.
name|wc
operator|.
name|admin
operator|.
name|SVNEntry
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|versioning
operator|.
name|svn
operator|.
name|internal
operator|.
name|wc
operator|.
name|admin
operator|.
name|SVNWCAccess
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|versioning
operator|.
name|svn
operator|.
name|wc
operator|.
name|ISVNOptions
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|versioning
operator|.
name|svn
operator|.
name|wc
operator|.
name|ISVNStatusHandler
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|versioning
operator|.
name|svn
operator|.
name|wc
operator|.
name|SVNStatus
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|versioning
operator|.
name|svn
operator|.
name|wc
operator|.
name|SVNStatusType
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|versioning
operator|.
name|svn
operator|.
name|wc
operator|.
name|SVNTreeConflictDescription
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|versioning
operator|.
name|svn
operator|.
name|wc
operator|.
name|SVNWCUtil
import|;
end_import

begin_import
import|import
name|org
operator|.
name|tmatesoft
operator|.
name|svn
operator|.
name|core
operator|.
name|SVNCommitInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|tmatesoft
operator|.
name|svn
operator|.
name|core
operator|.
name|SVNDepth
import|;
end_import

begin_import
import|import
name|org
operator|.
name|tmatesoft
operator|.
name|svn
operator|.
name|core
operator|.
name|SVNException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|tmatesoft
operator|.
name|svn
operator|.
name|core
operator|.
name|SVNLock
import|;
end_import

begin_import
import|import
name|org
operator|.
name|tmatesoft
operator|.
name|svn
operator|.
name|core
operator|.
name|SVNNodeKind
import|;
end_import

begin_import
import|import
name|org
operator|.
name|tmatesoft
operator|.
name|svn
operator|.
name|core
operator|.
name|SVNProperty
import|;
end_import

begin_import
import|import
name|org
operator|.
name|tmatesoft
operator|.
name|svn
operator|.
name|core
operator|.
name|SVNURL
import|;
end_import

begin_import
import|import
name|org
operator|.
name|tmatesoft
operator|.
name|svn
operator|.
name|core
operator|.
name|internal
operator|.
name|util
operator|.
name|SVNHashMap
import|;
end_import

begin_import
import|import
name|org
operator|.
name|tmatesoft
operator|.
name|svn
operator|.
name|core
operator|.
name|internal
operator|.
name|util
operator|.
name|SVNHashSet
import|;
end_import

begin_import
import|import
name|org
operator|.
name|tmatesoft
operator|.
name|svn
operator|.
name|core
operator|.
name|internal
operator|.
name|util
operator|.
name|SVNPathUtil
import|;
end_import

begin_import
import|import
name|org
operator|.
name|tmatesoft
operator|.
name|svn
operator|.
name|core
operator|.
name|wc
operator|.
name|ISVNStatusFileProvider
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|File
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collection
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collections
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Iterator
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|StringTokenizer
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|TreeMap
import|;
end_import

begin_comment
comment|/**  * @version 1.3  * @author  TMate Software Ltd.  */
end_comment

begin_class
specifier|public
class|class
name|SVNStatusEditor
block|{
specifier|private
name|SVNWCAccess
name|myWCAccess
decl_stmt|;
specifier|private
name|SVNAdminAreaInfo
name|myAdminInfo
decl_stmt|;
specifier|private
name|boolean
name|myIsReportAll
decl_stmt|;
specifier|private
name|boolean
name|myIsNoIgnore
decl_stmt|;
specifier|private
name|SVNDepth
name|myDepth
decl_stmt|;
specifier|private
name|ISVNStatusHandler
name|myStatusHandler
decl_stmt|;
specifier|private
name|Map
name|myExternalsMap
decl_stmt|;
specifier|private
name|Collection
name|myGlobalIgnores
decl_stmt|;
specifier|private
name|SVNURL
name|myRepositoryRoot
decl_stmt|;
specifier|private
name|Map
name|myRepositoryLocks
decl_stmt|;
specifier|private
name|long
name|myTargetRevision
decl_stmt|;
specifier|private
name|String
name|myWCRootPath
decl_stmt|;
specifier|private
name|ISVNStatusFileProvider
name|myFileProvider
decl_stmt|;
specifier|private
name|ISVNStatusFileProvider
name|myDefaultFileProvider
decl_stmt|;
specifier|public
name|SVNStatusEditor
parameter_list|(
name|ISVNOptions
name|options
parameter_list|,
name|SVNWCAccess
name|wcAccess
parameter_list|,
name|SVNAdminAreaInfo
name|info
parameter_list|,
name|boolean
name|noIgnore
parameter_list|,
name|boolean
name|reportAll
parameter_list|,
name|SVNDepth
name|depth
parameter_list|,
name|ISVNStatusHandler
name|handler
parameter_list|)
block|{
name|myWCAccess
operator|=
name|wcAccess
expr_stmt|;
name|myAdminInfo
operator|=
name|info
expr_stmt|;
name|myIsNoIgnore
operator|=
name|noIgnore
expr_stmt|;
name|myIsReportAll
operator|=
name|reportAll
expr_stmt|;
name|myDepth
operator|=
name|depth
expr_stmt|;
name|myStatusHandler
operator|=
name|handler
expr_stmt|;
name|myExternalsMap
operator|=
operator|new
name|SVNHashMap
argument_list|()
expr_stmt|;
name|myGlobalIgnores
operator|=
name|getGlobalIgnores
argument_list|(
name|options
argument_list|)
expr_stmt|;
name|myTargetRevision
operator|=
operator|-
literal|1
expr_stmt|;
name|myDefaultFileProvider
operator|=
operator|new
name|DefaultSVNStatusFileProvider
argument_list|()
expr_stmt|;
name|myFileProvider
operator|=
name|myDefaultFileProvider
expr_stmt|;
block|}
specifier|public
name|long
name|getTargetRevision
parameter_list|()
block|{
return|return
name|myTargetRevision
return|;
block|}
specifier|public
name|void
name|targetRevision
parameter_list|(
name|long
name|revision
parameter_list|)
block|{
name|myTargetRevision
operator|=
name|revision
expr_stmt|;
block|}
specifier|public
name|SVNCommitInfo
name|closeEdit
parameter_list|()
throws|throws
name|SVNException
block|{
try|try
block|{
if|if
condition|(
name|hasTarget
argument_list|()
condition|)
block|{
name|File
name|path
init|=
name|myAdminInfo
operator|.
name|getAnchor
argument_list|()
operator|.
name|getFile
argument_list|(
name|myAdminInfo
operator|.
name|getTargetName
argument_list|()
argument_list|)
decl_stmt|;
name|SVNFileType
name|type
init|=
name|SVNFileType
operator|.
name|getType
argument_list|(
name|path
argument_list|)
decl_stmt|;
if|if
condition|(
name|type
operator|==
name|SVNFileType
operator|.
name|DIRECTORY
condition|)
block|{
name|SVNEntry
name|entry
init|=
name|myWCAccess
operator|.
name|getEntry
argument_list|(
name|path
argument_list|,
literal|false
argument_list|)
decl_stmt|;
if|if
condition|(
name|entry
operator|==
literal|null
condition|)
block|{
name|getDirStatus
argument_list|(
literal|null
argument_list|,
name|myAdminInfo
operator|.
name|getAnchor
argument_list|()
argument_list|,
name|myAdminInfo
operator|.
name|getTargetName
argument_list|()
argument_list|,
name|SVNDepth
operator|.
name|EMPTY
argument_list|,
name|myIsReportAll
argument_list|,
literal|true
argument_list|,
literal|null
argument_list|,
literal|true
argument_list|,
name|myStatusHandler
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|SVNAdminArea
name|target
init|=
name|myWCAccess
operator|.
name|retrieve
argument_list|(
name|path
argument_list|)
decl_stmt|;
name|getDirStatus
argument_list|(
literal|null
argument_list|,
name|target
argument_list|,
literal|null
argument_list|,
name|myDepth
argument_list|,
name|myIsReportAll
argument_list|,
name|myIsNoIgnore
argument_list|,
literal|null
argument_list|,
literal|false
argument_list|,
name|myStatusHandler
argument_list|)
expr_stmt|;
block|}
block|}
else|else
block|{
name|getDirStatus
argument_list|(
literal|null
argument_list|,
name|myAdminInfo
operator|.
name|getAnchor
argument_list|()
argument_list|,
name|myAdminInfo
operator|.
name|getTargetName
argument_list|()
argument_list|,
name|SVNDepth
operator|.
name|EMPTY
argument_list|,
name|myIsReportAll
argument_list|,
literal|true
argument_list|,
literal|null
argument_list|,
literal|true
argument_list|,
name|myStatusHandler
argument_list|)
expr_stmt|;
block|}
block|}
else|else
block|{
name|getDirStatus
argument_list|(
literal|null
argument_list|,
name|myAdminInfo
operator|.
name|getAnchor
argument_list|()
argument_list|,
literal|null
argument_list|,
name|myDepth
argument_list|,
name|myIsReportAll
argument_list|,
name|myIsNoIgnore
argument_list|,
literal|null
argument_list|,
literal|false
argument_list|,
name|myStatusHandler
argument_list|)
expr_stmt|;
block|}
block|}
finally|finally
block|{
name|cleanup
argument_list|()
expr_stmt|;
block|}
return|return
literal|null
return|;
block|}
specifier|public
name|void
name|setRepositoryInfo
parameter_list|(
name|SVNURL
name|root
parameter_list|,
name|Map
name|repositoryLocks
parameter_list|)
block|{
name|myRepositoryRoot
operator|=
name|root
expr_stmt|;
name|myRepositoryLocks
operator|=
name|repositoryLocks
expr_stmt|;
block|}
specifier|protected
name|void
name|getDirStatus
parameter_list|(
name|SVNEntry
name|parentEntry
parameter_list|,
name|SVNAdminArea
name|dir
parameter_list|,
name|String
name|entryName
parameter_list|,
name|SVNDepth
name|depth
parameter_list|,
name|boolean
name|getAll
parameter_list|,
name|boolean
name|noIgnore
parameter_list|,
name|Collection
name|ignorePatterns
parameter_list|,
name|boolean
name|skipThisDir
parameter_list|,
name|ISVNStatusHandler
name|handler
parameter_list|)
throws|throws
name|SVNException
block|{
name|myWCAccess
operator|.
name|checkCancelled
argument_list|()
expr_stmt|;
name|depth
operator|=
name|depth
operator|==
name|SVNDepth
operator|.
name|UNKNOWN
condition|?
name|SVNDepth
operator|.
name|INFINITY
else|:
name|depth
expr_stmt|;
name|Map
name|childrenFiles
init|=
name|myFileProvider
operator|.
name|getChildrenFiles
argument_list|(
name|dir
operator|.
name|getRoot
argument_list|()
argument_list|)
decl_stmt|;
name|SVNEntry
name|dirEntry
init|=
name|myWCAccess
operator|.
name|getEntry
argument_list|(
name|dir
operator|.
name|getRoot
argument_list|()
argument_list|,
literal|false
argument_list|)
decl_stmt|;
name|String
name|externals
init|=
name|dir
operator|.
name|getProperties
argument_list|(
name|dir
operator|.
name|getThisDirName
argument_list|()
argument_list|)
operator|.
name|getStringPropertyValue
argument_list|(
name|SVNProperty
operator|.
name|EXTERNALS
argument_list|)
decl_stmt|;
if|if
condition|(
name|externals
operator|!=
literal|null
condition|)
block|{
name|String
name|path
init|=
name|dir
operator|.
name|getRelativePath
argument_list|(
name|myAdminInfo
operator|.
name|getAnchor
argument_list|()
argument_list|)
decl_stmt|;
name|myAdminInfo
operator|.
name|addExternal
argument_list|(
name|path
argument_list|,
name|externals
argument_list|,
name|externals
argument_list|)
expr_stmt|;
name|myAdminInfo
operator|.
name|addDepth
argument_list|(
name|path
argument_list|,
name|dirEntry
operator|.
name|getDepth
argument_list|()
argument_list|)
expr_stmt|;
name|SVNExternal
index|[]
name|externalsInfo
init|=
name|SVNExternal
operator|.
name|parseExternals
argument_list|(
name|dir
operator|.
name|getRelativePath
argument_list|(
name|myAdminInfo
operator|.
name|getAnchor
argument_list|()
argument_list|)
argument_list|,
name|externals
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|externalsInfo
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
name|SVNExternal
name|external
init|=
name|externalsInfo
index|[
name|i
index|]
decl_stmt|;
name|myExternalsMap
operator|.
name|put
argument_list|(
name|SVNPathUtil
operator|.
name|append
argument_list|(
name|path
argument_list|,
name|external
operator|.
name|getPath
argument_list|()
argument_list|)
argument_list|,
name|external
argument_list|)
expr_stmt|;
block|}
block|}
if|if
condition|(
name|entryName
operator|!=
literal|null
condition|)
block|{
name|File
name|file
init|=
operator|(
name|File
operator|)
name|childrenFiles
operator|.
name|get
argument_list|(
name|entryName
argument_list|)
decl_stmt|;
name|SVNEntry
name|entry
init|=
name|dir
operator|.
name|getEntry
argument_list|(
name|entryName
argument_list|,
literal|false
argument_list|)
decl_stmt|;
if|if
condition|(
name|entry
operator|!=
literal|null
condition|)
block|{
name|SVNFileType
name|fileType
init|=
name|SVNFileType
operator|.
name|getType
argument_list|(
name|file
argument_list|)
decl_stmt|;
name|boolean
name|special
init|=
name|fileType
operator|==
name|SVNFileType
operator|.
name|SYMLINK
decl_stmt|;
name|SVNNodeKind
name|fileKind
init|=
name|SVNFileType
operator|.
name|getNodeKind
argument_list|(
name|fileType
argument_list|)
decl_stmt|;
name|handleDirEntry
argument_list|(
name|dir
argument_list|,
name|entryName
argument_list|,
name|dirEntry
argument_list|,
name|entry
argument_list|,
name|fileKind
argument_list|,
name|special
argument_list|,
name|depth
argument_list|,
name|getAll
argument_list|,
name|noIgnore
argument_list|,
name|handler
argument_list|)
expr_stmt|;
block|}
if|else if
condition|(
name|file
operator|!=
literal|null
condition|)
block|{
if|if
condition|(
name|ignorePatterns
operator|==
literal|null
condition|)
block|{
name|ignorePatterns
operator|=
name|getIgnorePatterns
argument_list|(
name|dir
argument_list|,
name|myGlobalIgnores
argument_list|)
expr_stmt|;
block|}
name|SVNFileType
name|fileType
init|=
name|SVNFileType
operator|.
name|getType
argument_list|(
name|file
argument_list|)
decl_stmt|;
name|boolean
name|special
init|=
name|fileType
operator|==
name|SVNFileType
operator|.
name|SYMLINK
decl_stmt|;
name|SVNNodeKind
name|fileKind
init|=
name|SVNFileType
operator|.
name|getNodeKind
argument_list|(
name|fileType
argument_list|)
decl_stmt|;
name|sendUnversionedStatus
argument_list|(
name|file
argument_list|,
name|entryName
argument_list|,
name|fileKind
argument_list|,
name|special
argument_list|,
name|dir
argument_list|,
name|ignorePatterns
argument_list|,
name|noIgnore
argument_list|,
name|handler
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|SVNTreeConflictDescription
name|treeConflict
init|=
name|myWCAccess
operator|.
name|getTreeConflict
argument_list|(
name|dir
operator|.
name|getFile
argument_list|(
name|entryName
argument_list|)
argument_list|)
decl_stmt|;
if|if
condition|(
name|treeConflict
operator|!=
literal|null
condition|)
block|{
if|if
condition|(
name|ignorePatterns
operator|==
literal|null
condition|)
block|{
name|ignorePatterns
operator|=
name|getIgnorePatterns
argument_list|(
name|dir
argument_list|,
name|myGlobalIgnores
argument_list|)
expr_stmt|;
block|}
name|sendUnversionedStatus
argument_list|(
name|dir
operator|.
name|getFile
argument_list|(
name|entryName
argument_list|)
argument_list|,
name|entryName
argument_list|,
name|SVNNodeKind
operator|.
name|NONE
argument_list|,
literal|false
argument_list|,
name|dir
argument_list|,
name|ignorePatterns
argument_list|,
literal|true
argument_list|,
name|handler
argument_list|)
expr_stmt|;
block|}
block|}
return|return;
block|}
if|if
condition|(
operator|!
name|skipThisDir
condition|)
block|{
name|SVNStatus
name|status
init|=
name|assembleStatus
argument_list|(
name|dir
operator|.
name|getRoot
argument_list|()
argument_list|,
name|dir
argument_list|,
name|dirEntry
argument_list|,
name|parentEntry
argument_list|,
name|SVNNodeKind
operator|.
name|DIR
argument_list|,
literal|false
argument_list|,
name|isReportAll
argument_list|()
argument_list|,
literal|false
argument_list|)
decl_stmt|;
if|if
condition|(
name|status
operator|!=
literal|null
operator|&&
name|handler
operator|!=
literal|null
condition|)
block|{
name|handler
operator|.
name|handleStatus
argument_list|(
name|status
argument_list|)
expr_stmt|;
block|}
block|}
if|if
condition|(
name|depth
operator|==
name|SVNDepth
operator|.
name|EMPTY
condition|)
block|{
return|return;
block|}
comment|// iterate over files.
name|childrenFiles
operator|=
operator|new
name|TreeMap
argument_list|(
name|childrenFiles
argument_list|)
expr_stmt|;
for|for
control|(
name|Iterator
name|files
init|=
name|childrenFiles
operator|.
name|keySet
argument_list|()
operator|.
name|iterator
argument_list|()
init|;
name|files
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|String
name|fileName
init|=
operator|(
name|String
operator|)
name|files
operator|.
name|next
argument_list|()
decl_stmt|;
if|if
condition|(
name|dir
operator|.
name|getEntry
argument_list|(
name|fileName
argument_list|,
literal|false
argument_list|)
operator|!=
literal|null
operator|||
name|SVNFileUtil
operator|.
name|getAdminDirectoryName
argument_list|()
operator|.
name|equals
argument_list|(
name|fileName
argument_list|)
condition|)
block|{
continue|continue;
block|}
name|File
name|file
init|=
operator|(
name|File
operator|)
name|childrenFiles
operator|.
name|get
argument_list|(
name|fileName
argument_list|)
decl_stmt|;
if|if
condition|(
name|depth
operator|==
name|SVNDepth
operator|.
name|FILES
operator|&&
name|file
operator|.
name|isDirectory
argument_list|()
condition|)
block|{
continue|continue;
block|}
if|if
condition|(
name|ignorePatterns
operator|==
literal|null
condition|)
block|{
name|ignorePatterns
operator|=
name|getIgnorePatterns
argument_list|(
name|dir
argument_list|,
name|myGlobalIgnores
argument_list|)
expr_stmt|;
block|}
name|sendUnversionedStatus
argument_list|(
name|file
argument_list|,
name|fileName
argument_list|,
name|SVNNodeKind
operator|.
name|NONE
argument_list|,
literal|false
argument_list|,
name|dir
argument_list|,
name|ignorePatterns
argument_list|,
name|noIgnore
argument_list|,
name|handler
argument_list|)
expr_stmt|;
block|}
name|Map
name|treeConflicts
init|=
name|SVNTreeConflictUtil
operator|.
name|readTreeConflicts
argument_list|(
name|dir
operator|.
name|getRoot
argument_list|()
argument_list|,
name|dirEntry
operator|.
name|getTreeConflictData
argument_list|()
argument_list|)
decl_stmt|;
for|for
control|(
name|Iterator
name|treeConflictsIter
init|=
name|treeConflicts
operator|.
name|keySet
argument_list|()
operator|.
name|iterator
argument_list|()
init|;
name|treeConflictsIter
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|File
name|conflictPath
init|=
operator|(
name|File
operator|)
name|treeConflictsIter
operator|.
name|next
argument_list|()
decl_stmt|;
if|if
condition|(
name|childrenFiles
operator|.
name|containsKey
argument_list|(
name|conflictPath
operator|.
name|getName
argument_list|()
argument_list|)
operator|||
name|dir
operator|.
name|getEntry
argument_list|(
name|conflictPath
operator|.
name|getName
argument_list|()
argument_list|,
literal|false
argument_list|)
operator|!=
literal|null
condition|)
block|{
continue|continue;
block|}
if|if
condition|(
name|ignorePatterns
operator|==
literal|null
condition|)
block|{
name|ignorePatterns
operator|=
name|getIgnorePatterns
argument_list|(
name|dir
argument_list|,
name|myGlobalIgnores
argument_list|)
expr_stmt|;
block|}
name|sendUnversionedStatus
argument_list|(
name|conflictPath
argument_list|,
name|conflictPath
operator|.
name|getName
argument_list|()
argument_list|,
name|SVNNodeKind
operator|.
name|NONE
argument_list|,
literal|false
argument_list|,
name|dir
argument_list|,
name|ignorePatterns
argument_list|,
name|noIgnore
argument_list|,
name|handler
argument_list|)
expr_stmt|;
block|}
for|for
control|(
name|Iterator
name|entries
init|=
name|dir
operator|.
name|entries
argument_list|(
literal|false
argument_list|)
init|;
name|entries
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|SVNEntry
name|entry
init|=
operator|(
name|SVNEntry
operator|)
name|entries
operator|.
name|next
argument_list|()
decl_stmt|;
if|if
condition|(
name|dir
operator|.
name|getThisDirName
argument_list|()
operator|.
name|equals
argument_list|(
name|entry
operator|.
name|getName
argument_list|()
argument_list|)
condition|)
block|{
continue|continue;
block|}
if|if
condition|(
name|depth
operator|==
name|SVNDepth
operator|.
name|FILES
operator|&&
name|entry
operator|.
name|isDirectory
argument_list|()
condition|)
block|{
continue|continue;
block|}
name|File
name|file
init|=
operator|(
name|File
operator|)
name|childrenFiles
operator|.
name|get
argument_list|(
name|entry
operator|.
name|getName
argument_list|()
argument_list|)
decl_stmt|;
name|SVNFileType
name|fileType
init|=
name|SVNFileType
operator|.
name|getType
argument_list|(
name|file
argument_list|)
decl_stmt|;
name|boolean
name|special
init|=
name|fileType
operator|==
name|SVNFileType
operator|.
name|SYMLINK
decl_stmt|;
name|SVNNodeKind
name|fileKind
init|=
name|SVNFileType
operator|.
name|getNodeKind
argument_list|(
name|fileType
argument_list|)
decl_stmt|;
name|handleDirEntry
argument_list|(
name|dir
argument_list|,
name|entry
operator|.
name|getName
argument_list|()
argument_list|,
name|dirEntry
argument_list|,
name|entry
argument_list|,
name|fileKind
argument_list|,
name|special
argument_list|,
name|depth
operator|==
name|SVNDepth
operator|.
name|INFINITY
condition|?
name|depth
else|:
name|SVNDepth
operator|.
name|EMPTY
argument_list|,
name|getAll
argument_list|,
name|noIgnore
argument_list|,
name|handler
argument_list|)
expr_stmt|;
block|}
block|}
specifier|protected
name|void
name|cleanup
parameter_list|()
block|{
if|if
condition|(
name|hasTarget
argument_list|()
condition|)
block|{
name|myAdminInfo
operator|.
name|removeExternal
argument_list|(
literal|""
argument_list|)
expr_stmt|;
name|myAdminInfo
operator|.
name|removeDepth
argument_list|(
literal|""
argument_list|)
expr_stmt|;
block|}
block|}
specifier|protected
name|SVNAdminArea
name|getAnchor
parameter_list|()
block|{
return|return
name|myAdminInfo
operator|.
name|getAnchor
argument_list|()
return|;
block|}
specifier|protected
name|SVNWCAccess
name|getWCAccess
parameter_list|()
block|{
return|return
name|myWCAccess
return|;
block|}
specifier|protected
name|SVNDepth
name|getDepth
parameter_list|()
block|{
return|return
name|myDepth
return|;
block|}
specifier|protected
name|boolean
name|isReportAll
parameter_list|()
block|{
return|return
name|myIsReportAll
return|;
block|}
specifier|protected
name|boolean
name|isNoIgnore
parameter_list|()
block|{
return|return
name|myIsNoIgnore
return|;
block|}
specifier|protected
name|SVNAdminAreaInfo
name|getAdminAreaInfo
parameter_list|()
block|{
return|return
name|myAdminInfo
return|;
block|}
specifier|protected
name|ISVNStatusHandler
name|getDefaultHandler
parameter_list|()
block|{
return|return
name|myStatusHandler
return|;
block|}
specifier|protected
name|boolean
name|hasTarget
parameter_list|()
block|{
return|return
name|myAdminInfo
operator|.
name|getTargetName
argument_list|()
operator|!=
literal|null
operator|&&
operator|!
literal|""
operator|.
name|equals
argument_list|(
name|myAdminInfo
operator|.
name|getTargetName
argument_list|()
argument_list|)
return|;
block|}
specifier|protected
name|SVNLock
name|getLock
parameter_list|(
name|SVNURL
name|url
parameter_list|)
block|{
return|return
name|SVNStatusUtil
operator|.
name|getLock
argument_list|(
name|myRepositoryLocks
argument_list|,
name|url
argument_list|,
name|myRepositoryRoot
argument_list|)
return|;
block|}
specifier|private
name|void
name|handleDirEntry
parameter_list|(
name|SVNAdminArea
name|dir
parameter_list|,
name|String
name|entryName
parameter_list|,
name|SVNEntry
name|dirEntry
parameter_list|,
name|SVNEntry
name|entry
parameter_list|,
name|SVNNodeKind
name|fileKind
parameter_list|,
name|boolean
name|special
parameter_list|,
name|SVNDepth
name|depth
parameter_list|,
name|boolean
name|getAll
parameter_list|,
name|boolean
name|noIgnore
parameter_list|,
name|ISVNStatusHandler
name|handler
parameter_list|)
throws|throws
name|SVNException
block|{
name|File
name|path
init|=
name|dir
operator|.
name|getFile
argument_list|(
name|entryName
argument_list|)
decl_stmt|;
if|if
condition|(
name|fileKind
operator|==
name|SVNNodeKind
operator|.
name|DIR
condition|)
block|{
name|SVNEntry
name|fullEntry
init|=
name|entry
decl_stmt|;
if|if
condition|(
name|entry
operator|.
name|getKind
argument_list|()
operator|==
name|fileKind
condition|)
block|{
name|fullEntry
operator|=
name|myWCAccess
operator|.
name|getVersionedEntry
argument_list|(
name|path
argument_list|,
literal|false
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|fullEntry
operator|!=
name|entry
operator|&&
operator|(
name|depth
operator|==
name|SVNDepth
operator|.
name|UNKNOWN
operator|||
name|depth
operator|==
name|SVNDepth
operator|.
name|IMMEDIATES
operator|||
name|depth
operator|==
name|SVNDepth
operator|.
name|INFINITY
operator|)
condition|)
block|{
name|SVNAdminArea
name|childDir
init|=
name|myWCAccess
operator|.
name|retrieve
argument_list|(
name|path
argument_list|)
decl_stmt|;
name|getDirStatus
argument_list|(
name|dirEntry
argument_list|,
name|childDir
argument_list|,
literal|null
argument_list|,
name|depth
argument_list|,
name|getAll
argument_list|,
name|noIgnore
argument_list|,
literal|null
argument_list|,
literal|false
argument_list|,
name|handler
argument_list|)
expr_stmt|;
block|}
if|else if
condition|(
name|fullEntry
operator|!=
name|entry
condition|)
block|{
comment|// get correct dir.
name|SVNAdminArea
name|childDir
init|=
name|myWCAccess
operator|.
name|retrieve
argument_list|(
name|path
argument_list|)
decl_stmt|;
name|SVNStatus
name|status
init|=
name|assembleStatus
argument_list|(
name|path
argument_list|,
name|childDir
argument_list|,
name|fullEntry
argument_list|,
name|dirEntry
argument_list|,
name|fileKind
argument_list|,
name|special
argument_list|,
name|getAll
argument_list|,
literal|false
argument_list|)
decl_stmt|;
if|if
condition|(
name|status
operator|!=
literal|null
operator|&&
name|handler
operator|!=
literal|null
condition|)
block|{
name|handler
operator|.
name|handleStatus
argument_list|(
name|status
argument_list|)
expr_stmt|;
block|}
block|}
else|else
block|{
name|SVNStatus
name|status
init|=
name|assembleStatus
argument_list|(
name|path
argument_list|,
name|dir
argument_list|,
name|fullEntry
argument_list|,
name|dirEntry
argument_list|,
name|fileKind
argument_list|,
name|special
argument_list|,
name|getAll
argument_list|,
literal|false
argument_list|)
decl_stmt|;
if|if
condition|(
name|status
operator|!=
literal|null
operator|&&
name|handler
operator|!=
literal|null
condition|)
block|{
name|handler
operator|.
name|handleStatus
argument_list|(
name|status
argument_list|)
expr_stmt|;
block|}
block|}
block|}
else|else
block|{
name|SVNStatus
name|status
init|=
name|assembleStatus
argument_list|(
name|path
argument_list|,
name|dir
argument_list|,
name|entry
argument_list|,
name|dirEntry
argument_list|,
name|fileKind
argument_list|,
name|special
argument_list|,
name|getAll
argument_list|,
literal|false
argument_list|)
decl_stmt|;
if|if
condition|(
name|status
operator|!=
literal|null
operator|&&
name|handler
operator|!=
literal|null
condition|)
block|{
name|handler
operator|.
name|handleStatus
argument_list|(
name|status
argument_list|)
expr_stmt|;
block|}
block|}
block|}
specifier|private
name|void
name|sendUnversionedStatus
parameter_list|(
name|File
name|file
parameter_list|,
name|String
name|name
parameter_list|,
name|SVNNodeKind
name|fileType
parameter_list|,
name|boolean
name|special
parameter_list|,
name|SVNAdminArea
name|dir
parameter_list|,
name|Collection
name|ignorePatterns
parameter_list|,
name|boolean
name|noIgnore
parameter_list|,
name|ISVNStatusHandler
name|handler
parameter_list|)
throws|throws
name|SVNException
block|{
name|String
name|path
init|=
name|dir
operator|.
name|getRelativePath
argument_list|(
name|myAdminInfo
operator|.
name|getAnchor
argument_list|()
argument_list|)
decl_stmt|;
name|path
operator|=
name|SVNPathUtil
operator|.
name|append
argument_list|(
name|path
argument_list|,
name|name
argument_list|)
expr_stmt|;
name|boolean
name|isIgnored
init|=
name|isIgnored
argument_list|(
name|ignorePatterns
argument_list|,
name|file
argument_list|,
name|getWCRootRelativePath
argument_list|(
name|ignorePatterns
argument_list|,
name|file
argument_list|)
argument_list|)
decl_stmt|;
name|boolean
name|isExternal
init|=
name|isExternal
argument_list|(
name|path
argument_list|)
decl_stmt|;
name|SVNStatus
name|status
init|=
name|assembleStatus
argument_list|(
name|file
argument_list|,
name|dir
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|,
name|fileType
argument_list|,
name|special
argument_list|,
literal|true
argument_list|,
name|isIgnored
argument_list|)
decl_stmt|;
if|if
condition|(
name|status
operator|!=
literal|null
condition|)
block|{
if|if
condition|(
name|isExternal
condition|)
block|{
name|status
operator|.
name|setContentsStatus
argument_list|(
name|SVNStatusType
operator|.
name|STATUS_EXTERNAL
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|handler
operator|!=
literal|null
operator|&&
operator|(
name|noIgnore
operator|||
operator|!
name|isIgnored
operator|||
name|isExternal
operator|||
name|status
operator|.
name|getRemoteLock
argument_list|()
operator|!=
literal|null
operator|)
condition|)
block|{
name|handler
operator|.
name|handleStatus
argument_list|(
name|status
argument_list|)
expr_stmt|;
block|}
block|}
block|}
specifier|protected
name|SVNStatus
name|assembleStatus
parameter_list|(
name|File
name|file
parameter_list|,
name|SVNAdminArea
name|dir
parameter_list|,
name|SVNEntry
name|entry
parameter_list|,
name|SVNEntry
name|parentEntry
parameter_list|,
name|SVNNodeKind
name|fileKind
parameter_list|,
name|boolean
name|special
parameter_list|,
name|boolean
name|reportAll
parameter_list|,
name|boolean
name|isIgnored
parameter_list|)
throws|throws
name|SVNException
block|{
return|return
name|SVNStatusUtil
operator|.
name|assembleStatus
argument_list|(
name|file
argument_list|,
name|dir
argument_list|,
name|entry
argument_list|,
name|parentEntry
argument_list|,
name|fileKind
argument_list|,
name|special
argument_list|,
name|reportAll
argument_list|,
name|isIgnored
argument_list|,
name|myRepositoryLocks
argument_list|,
name|myRepositoryRoot
argument_list|,
name|myWCAccess
argument_list|)
return|;
block|}
specifier|protected
name|String
name|getWCRootPath
parameter_list|()
block|{
if|if
condition|(
name|myWCRootPath
operator|==
literal|null
condition|)
block|{
try|try
block|{
name|File
name|root
init|=
name|SVNWCUtil
operator|.
name|getWorkingCopyRoot
argument_list|(
name|myAdminInfo
operator|.
name|getAnchor
argument_list|()
operator|.
name|getRoot
argument_list|()
argument_list|,
literal|true
argument_list|)
decl_stmt|;
if|if
condition|(
name|root
operator|!=
literal|null
condition|)
block|{
name|myWCRootPath
operator|=
name|root
operator|.
name|getAbsolutePath
argument_list|()
operator|.
name|replace
argument_list|(
name|File
operator|.
name|separatorChar
argument_list|,
literal|'/'
argument_list|)
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
name|SVNException
name|e
parameter_list|)
block|{
comment|// ignore.
block|}
block|}
return|return
name|myWCRootPath
return|;
block|}
specifier|protected
name|String
name|getWCRootRelativePath
parameter_list|(
name|Collection
name|ignorePatterns
parameter_list|,
name|File
name|file
parameter_list|)
block|{
name|boolean
name|needToComputeWCRelativePath
init|=
literal|false
decl_stmt|;
for|for
control|(
name|Iterator
name|patterns
init|=
name|ignorePatterns
operator|.
name|iterator
argument_list|()
init|;
name|patterns
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|String
name|pattern
init|=
operator|(
name|String
operator|)
name|patterns
operator|.
name|next
argument_list|()
decl_stmt|;
if|if
condition|(
name|pattern
operator|.
name|startsWith
argument_list|(
literal|"/"
argument_list|)
condition|)
block|{
name|needToComputeWCRelativePath
operator|=
literal|true
expr_stmt|;
break|break;
block|}
block|}
if|if
condition|(
operator|!
name|needToComputeWCRelativePath
condition|)
block|{
return|return
literal|null
return|;
block|}
name|String
name|rootRelativePath
init|=
literal|null
decl_stmt|;
if|if
condition|(
name|getWCRootPath
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|rootRelativePath
operator|=
name|file
operator|.
name|getAbsolutePath
argument_list|()
operator|.
name|replace
argument_list|(
name|File
operator|.
name|separatorChar
argument_list|,
literal|'/'
argument_list|)
expr_stmt|;
name|rootRelativePath
operator|=
name|SVNPathUtil
operator|.
name|getPathAsChild
argument_list|(
name|getWCRootPath
argument_list|()
argument_list|,
name|rootRelativePath
argument_list|)
expr_stmt|;
if|if
condition|(
name|rootRelativePath
operator|!=
literal|null
operator|&&
operator|!
name|rootRelativePath
operator|.
name|startsWith
argument_list|(
literal|"/"
argument_list|)
condition|)
block|{
name|rootRelativePath
operator|=
literal|"/"
operator|+
name|rootRelativePath
expr_stmt|;
block|}
block|}
return|return
name|rootRelativePath
return|;
block|}
specifier|private
name|boolean
name|isExternal
parameter_list|(
name|String
name|path
parameter_list|)
block|{
if|if
condition|(
operator|!
name|myExternalsMap
operator|.
name|containsKey
argument_list|(
name|path
argument_list|)
condition|)
block|{
comment|// check if path is external parent.
for|for
control|(
name|Iterator
name|paths
init|=
name|myExternalsMap
operator|.
name|keySet
argument_list|()
operator|.
name|iterator
argument_list|()
init|;
name|paths
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|String
name|externalPath
init|=
operator|(
name|String
operator|)
name|paths
operator|.
name|next
argument_list|()
decl_stmt|;
if|if
condition|(
name|externalPath
operator|.
name|startsWith
argument_list|(
name|path
operator|+
literal|"/"
argument_list|)
condition|)
block|{
return|return
literal|true
return|;
block|}
block|}
return|return
literal|false
return|;
block|}
return|return
literal|true
return|;
block|}
specifier|public
specifier|static
name|Collection
name|getIgnorePatterns
parameter_list|(
name|SVNAdminArea
name|dir
parameter_list|,
name|Collection
name|globalIgnores
parameter_list|)
throws|throws
name|SVNException
block|{
name|String
name|localIgnores
init|=
name|dir
operator|.
name|getProperties
argument_list|(
literal|""
argument_list|)
operator|.
name|getStringPropertyValue
argument_list|(
name|SVNProperty
operator|.
name|IGNORE
argument_list|)
decl_stmt|;
if|if
condition|(
name|localIgnores
operator|!=
literal|null
condition|)
block|{
name|Collection
name|patterns
init|=
operator|new
name|SVNHashSet
argument_list|()
decl_stmt|;
name|patterns
operator|.
name|addAll
argument_list|(
name|globalIgnores
argument_list|)
expr_stmt|;
for|for
control|(
name|StringTokenizer
name|tokens
init|=
operator|new
name|StringTokenizer
argument_list|(
name|localIgnores
argument_list|,
literal|"\r\n"
argument_list|)
init|;
name|tokens
operator|.
name|hasMoreTokens
argument_list|()
condition|;
control|)
block|{
name|String
name|token
init|=
name|tokens
operator|.
name|nextToken
argument_list|()
operator|.
name|trim
argument_list|()
decl_stmt|;
if|if
condition|(
name|token
operator|.
name|length
argument_list|()
operator|>
literal|0
condition|)
block|{
name|patterns
operator|.
name|add
argument_list|(
name|token
argument_list|)
expr_stmt|;
block|}
block|}
return|return
name|patterns
return|;
block|}
return|return
name|globalIgnores
return|;
block|}
specifier|public
specifier|static
name|Collection
name|getGlobalIgnores
parameter_list|(
name|ISVNOptions
name|options
parameter_list|)
block|{
if|if
condition|(
name|options
operator|!=
literal|null
condition|)
block|{
name|String
index|[]
name|ignores
init|=
name|options
operator|.
name|getIgnorePatterns
argument_list|()
decl_stmt|;
if|if
condition|(
name|ignores
operator|!=
literal|null
condition|)
block|{
name|Collection
name|patterns
init|=
operator|new
name|SVNHashSet
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|ignores
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
name|patterns
operator|.
name|add
argument_list|(
name|ignores
index|[
name|i
index|]
argument_list|)
expr_stmt|;
block|}
return|return
name|patterns
return|;
block|}
block|}
return|return
name|Collections
operator|.
name|EMPTY_SET
return|;
block|}
specifier|public
specifier|static
name|boolean
name|isIgnored
parameter_list|(
name|Collection
name|patterns
parameter_list|,
name|File
name|file
parameter_list|)
block|{
return|return
name|isIgnored
argument_list|(
name|patterns
argument_list|,
name|file
argument_list|,
literal|null
argument_list|)
return|;
block|}
specifier|public
specifier|static
name|boolean
name|isIgnored
parameter_list|(
name|Collection
name|patterns
parameter_list|,
name|File
name|file
parameter_list|,
name|String
name|relativePath
parameter_list|)
block|{
name|String
name|name
init|=
name|file
operator|.
name|getName
argument_list|()
decl_stmt|;
name|String
name|dirName
init|=
literal|null
decl_stmt|;
name|boolean
name|isDirectory
init|=
name|SVNFileType
operator|.
name|getType
argument_list|(
name|file
argument_list|)
operator|==
name|SVNFileType
operator|.
name|DIRECTORY
decl_stmt|;
if|if
condition|(
name|isDirectory
condition|)
block|{
name|dirName
operator|=
name|name
operator|+
literal|"/"
expr_stmt|;
block|}
for|for
control|(
name|Iterator
name|ps
init|=
name|patterns
operator|.
name|iterator
argument_list|()
init|;
name|ps
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|String
name|pattern
init|=
operator|(
name|String
operator|)
name|ps
operator|.
name|next
argument_list|()
decl_stmt|;
if|if
condition|(
name|pattern
operator|.
name|startsWith
argument_list|(
literal|"/"
argument_list|)
operator|&&
name|relativePath
operator|!=
literal|null
condition|)
block|{
if|if
condition|(
name|DefaultSVNOptions
operator|.
name|matches
argument_list|(
name|pattern
argument_list|,
name|relativePath
argument_list|)
operator|||
operator|(
name|isDirectory
operator|&&
name|DefaultSVNOptions
operator|.
name|matches
argument_list|(
name|pattern
argument_list|,
name|relativePath
operator|+
literal|"/"
argument_list|)
operator|)
condition|)
block|{
return|return
literal|true
return|;
block|}
continue|continue;
block|}
if|if
condition|(
name|DefaultSVNOptions
operator|.
name|matches
argument_list|(
name|pattern
argument_list|,
name|name
argument_list|)
condition|)
block|{
return|return
literal|true
return|;
block|}
if|else if
condition|(
name|isDirectory
operator|&&
name|DefaultSVNOptions
operator|.
name|matches
argument_list|(
name|pattern
argument_list|,
name|dirName
argument_list|)
condition|)
block|{
return|return
literal|true
return|;
block|}
block|}
return|return
literal|false
return|;
block|}
specifier|public
name|void
name|setFileProvider
parameter_list|(
name|ISVNStatusFileProvider
name|fileProvider
parameter_list|)
block|{
name|myFileProvider
operator|=
operator|new
name|WrapperSVNStatusFileProvider
argument_list|(
name|myDefaultFileProvider
argument_list|,
name|fileProvider
argument_list|)
expr_stmt|;
block|}
specifier|private
specifier|static
class|class
name|WrapperSVNStatusFileProvider
implements|implements
name|ISVNStatusFileProvider
block|{
specifier|private
specifier|final
name|ISVNStatusFileProvider
name|myDefault
decl_stmt|;
specifier|private
specifier|final
name|ISVNStatusFileProvider
name|myDelegate
decl_stmt|;
specifier|private
name|WrapperSVNStatusFileProvider
parameter_list|(
name|ISVNStatusFileProvider
name|defaultProvider
parameter_list|,
name|ISVNStatusFileProvider
name|delegate
parameter_list|)
block|{
name|myDefault
operator|=
name|defaultProvider
expr_stmt|;
name|myDelegate
operator|=
name|delegate
expr_stmt|;
block|}
specifier|public
name|Map
name|getChildrenFiles
parameter_list|(
name|File
name|parent
parameter_list|)
block|{
specifier|final
name|Map
name|result
init|=
name|myDelegate
operator|.
name|getChildrenFiles
argument_list|(
name|parent
argument_list|)
decl_stmt|;
if|if
condition|(
name|result
operator|!=
literal|null
condition|)
block|{
return|return
name|result
return|;
block|}
return|return
name|myDefault
operator|.
name|getChildrenFiles
argument_list|(
name|parent
argument_list|)
return|;
block|}
block|}
specifier|private
specifier|static
class|class
name|DefaultSVNStatusFileProvider
implements|implements
name|ISVNStatusFileProvider
block|{
specifier|public
name|Map
name|getChildrenFiles
parameter_list|(
name|File
name|parent
parameter_list|)
block|{
name|File
index|[]
name|children
init|=
name|SVNFileListUtil
operator|.
name|listFiles
argument_list|(
name|parent
argument_list|)
decl_stmt|;
if|if
condition|(
name|children
operator|!=
literal|null
condition|)
block|{
name|Map
name|map
init|=
operator|new
name|SVNHashMap
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|children
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
name|map
operator|.
name|put
argument_list|(
name|children
index|[
name|i
index|]
operator|.
name|getName
argument_list|()
argument_list|,
name|children
index|[
name|i
index|]
argument_list|)
expr_stmt|;
block|}
return|return
name|map
return|;
block|}
return|return
name|Collections
operator|.
name|EMPTY_MAP
return|;
block|}
block|}
block|}
end_class

end_unit

