begin_unit|revision:1.0.0;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * ====================================================================  * Copyright (c) 2004-2010 TMate Software Ltd.  All rights reserved.  *  * This software is licensed as described in the file COPYING, which  * you should have received as part of this distribution.  The terms  * are also available at http://svnkit.com/license.html  * If newer versions of this license are posted there, you may use a  * newer version instead, at your option.  * ====================================================================  */
end_comment

begin_package
package|package
name|org
operator|.
name|exist
operator|.
name|versioning
operator|.
name|svn
operator|.
name|internal
operator|.
name|wc
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|File
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|OutputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collection
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Iterator
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|versioning
operator|.
name|svn
operator|.
name|Resource
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|versioning
operator|.
name|svn
operator|.
name|internal
operator|.
name|wc
operator|.
name|admin
operator|.
name|SVNAdminArea
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|versioning
operator|.
name|svn
operator|.
name|wc
operator|.
name|ISVNEventHandler
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|versioning
operator|.
name|svn
operator|.
name|wc
operator|.
name|SVNEvent
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|versioning
operator|.
name|svn
operator|.
name|wc
operator|.
name|SVNEventAction
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|versioning
operator|.
name|svn
operator|.
name|wc
operator|.
name|SVNStatusType
import|;
end_import

begin_import
import|import
name|org
operator|.
name|tmatesoft
operator|.
name|svn
operator|.
name|core
operator|.
name|ISVNDirEntryHandler
import|;
end_import

begin_import
import|import
name|org
operator|.
name|tmatesoft
operator|.
name|svn
operator|.
name|core
operator|.
name|SVNCommitInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|tmatesoft
operator|.
name|svn
operator|.
name|core
operator|.
name|SVNErrorCode
import|;
end_import

begin_import
import|import
name|org
operator|.
name|tmatesoft
operator|.
name|svn
operator|.
name|core
operator|.
name|SVNException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|tmatesoft
operator|.
name|svn
operator|.
name|core
operator|.
name|SVNNodeKind
import|;
end_import

begin_import
import|import
name|org
operator|.
name|tmatesoft
operator|.
name|svn
operator|.
name|core
operator|.
name|SVNProperties
import|;
end_import

begin_import
import|import
name|org
operator|.
name|tmatesoft
operator|.
name|svn
operator|.
name|core
operator|.
name|SVNProperty
import|;
end_import

begin_import
import|import
name|org
operator|.
name|tmatesoft
operator|.
name|svn
operator|.
name|core
operator|.
name|SVNPropertyValue
import|;
end_import

begin_import
import|import
name|org
operator|.
name|tmatesoft
operator|.
name|svn
operator|.
name|core
operator|.
name|internal
operator|.
name|util
operator|.
name|SVNHashMap
import|;
end_import

begin_import
import|import
name|org
operator|.
name|tmatesoft
operator|.
name|svn
operator|.
name|core
operator|.
name|internal
operator|.
name|util
operator|.
name|SVNHashSet
import|;
end_import

begin_import
import|import
name|org
operator|.
name|tmatesoft
operator|.
name|svn
operator|.
name|core
operator|.
name|internal
operator|.
name|util
operator|.
name|SVNPathUtil
import|;
end_import

begin_import
import|import
name|org
operator|.
name|tmatesoft
operator|.
name|svn
operator|.
name|core
operator|.
name|internal
operator|.
name|wc
operator|.
name|ISVNReusableEditor
import|;
end_import

begin_import
import|import
name|org
operator|.
name|tmatesoft
operator|.
name|svn
operator|.
name|core
operator|.
name|io
operator|.
name|SVNRepository
import|;
end_import

begin_import
import|import
name|org
operator|.
name|tmatesoft
operator|.
name|svn
operator|.
name|core
operator|.
name|io
operator|.
name|diff
operator|.
name|SVNDeltaProcessor
import|;
end_import

begin_import
import|import
name|org
operator|.
name|tmatesoft
operator|.
name|svn
operator|.
name|core
operator|.
name|io
operator|.
name|diff
operator|.
name|SVNDiffWindow
import|;
end_import

begin_comment
comment|/**  * @version 1.3  * @author  TMate Software Ltd.  */
end_comment

begin_class
specifier|public
class|class
name|SVNRemoteDiffEditor
implements|implements
name|ISVNReusableEditor
block|{
specifier|protected
name|SVNRepository
name|myRepos
decl_stmt|;
specifier|protected
name|long
name|myRevision1
decl_stmt|;
specifier|protected
name|long
name|myRevision2
decl_stmt|;
specifier|protected
name|File
name|myTarget
decl_stmt|;
specifier|protected
name|SVNAdminArea
name|myAdminArea
decl_stmt|;
specifier|protected
name|boolean
name|myIsDryRun
decl_stmt|;
specifier|protected
name|SVNDeltaProcessor
name|myDeltaProcessor
decl_stmt|;
specifier|protected
name|ISVNEventHandler
name|myEventHandler
decl_stmt|;
specifier|protected
name|ISVNEventHandler
name|myCancelHandler
decl_stmt|;
specifier|protected
name|AbstractDiffCallback
name|myDiffCallback
decl_stmt|;
specifier|protected
name|SVNDirectoryInfo
name|myCurrentDirectory
decl_stmt|;
specifier|protected
name|SVNFileInfo
name|myCurrentFile
decl_stmt|;
specifier|protected
name|File
name|myTempDirectory
decl_stmt|;
specifier|protected
name|Collection
name|myTempFiles
decl_stmt|;
specifier|protected
name|Map
name|myDeletedPaths
decl_stmt|;
specifier|private
name|boolean
name|myIsUseGlobalTmp
decl_stmt|;
specifier|public
name|SVNRemoteDiffEditor
parameter_list|(
name|SVNAdminArea
name|adminArea
parameter_list|,
name|File
name|target
parameter_list|,
name|AbstractDiffCallback
name|callback
parameter_list|,
name|SVNRepository
name|repos
parameter_list|,
name|long
name|revision1
parameter_list|,
name|long
name|revision2
parameter_list|,
name|boolean
name|dryRun
parameter_list|,
name|ISVNEventHandler
name|handler
parameter_list|,
name|ISVNEventHandler
name|cancelHandler
parameter_list|)
block|{
name|myAdminArea
operator|=
name|adminArea
expr_stmt|;
name|myTarget
operator|=
name|target
expr_stmt|;
name|myDiffCallback
operator|=
name|callback
expr_stmt|;
name|myRepos
operator|=
name|repos
expr_stmt|;
name|myRevision1
operator|=
name|revision1
expr_stmt|;
name|myRevision2
operator|=
name|revision2
expr_stmt|;
name|myEventHandler
operator|=
name|handler
expr_stmt|;
name|myCancelHandler
operator|=
name|cancelHandler
expr_stmt|;
name|myDeltaProcessor
operator|=
operator|new
name|SVNDeltaProcessor
argument_list|()
expr_stmt|;
name|myIsDryRun
operator|=
name|dryRun
expr_stmt|;
name|myDeletedPaths
operator|=
operator|new
name|SVNHashMap
argument_list|()
expr_stmt|;
block|}
specifier|public
name|void
name|reset
parameter_list|(
name|long
name|revision1
parameter_list|,
name|long
name|revision2
parameter_list|)
block|{
name|myRevision1
operator|=
name|revision1
expr_stmt|;
name|myRevision2
operator|=
name|revision2
expr_stmt|;
block|}
specifier|public
name|void
name|targetRevision
parameter_list|(
name|long
name|revision
parameter_list|)
throws|throws
name|SVNException
block|{
name|myRevision2
operator|=
name|revision
expr_stmt|;
block|}
specifier|public
name|void
name|openRoot
parameter_list|(
name|long
name|revision
parameter_list|)
throws|throws
name|SVNException
block|{
name|myCurrentDirectory
operator|=
operator|new
name|SVNDirectoryInfo
argument_list|(
literal|null
argument_list|,
literal|""
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|myCurrentDirectory
operator|.
name|loadFromRepository
argument_list|(
name|revision
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|deleteEntry
parameter_list|(
name|String
name|path
parameter_list|,
name|long
name|revision
parameter_list|)
throws|throws
name|SVNException
block|{
if|if
condition|(
name|myCurrentDirectory
operator|.
name|myIsSkip
operator|||
name|myCurrentDirectory
operator|.
name|myIsTreeConflicted
condition|)
block|{
return|return;
block|}
name|SVNNodeKind
name|nodeKind
init|=
name|myRepos
operator|.
name|checkPath
argument_list|(
name|path
argument_list|,
name|myRevision1
argument_list|)
decl_stmt|;
name|SVNAdminArea
name|dir
init|=
name|retrieve
argument_list|(
name|myCurrentDirectory
operator|.
name|myWCFile
argument_list|,
literal|true
argument_list|)
decl_stmt|;
name|deleteEntry
argument_list|(
name|path
argument_list|,
name|nodeKind
argument_list|,
name|dir
argument_list|)
expr_stmt|;
block|}
specifier|protected
name|void
name|deleteEntry
parameter_list|(
name|String
name|path
parameter_list|,
name|SVNNodeKind
name|nodeKind
parameter_list|,
name|SVNAdminArea
name|dir
parameter_list|)
throws|throws
name|SVNException
block|{
name|SVNStatusType
name|type
init|=
name|SVNStatusType
operator|.
name|INAPPLICABLE
decl_stmt|;
name|SVNEventAction
name|action
init|=
name|SVNEventAction
operator|.
name|SKIP
decl_stmt|;
name|SVNEventAction
name|expectedAction
init|=
name|SVNEventAction
operator|.
name|UPDATE_DELETE
decl_stmt|;
name|boolean
index|[]
name|isTreeConflicted
init|=
block|{
literal|false
block|}
decl_stmt|;
if|if
condition|(
name|myAdminArea
operator|==
literal|null
operator|||
name|dir
operator|!=
literal|null
condition|)
block|{
if|if
condition|(
name|nodeKind
operator|==
name|SVNNodeKind
operator|.
name|FILE
condition|)
block|{
name|SVNFileInfo
name|file
init|=
operator|new
name|SVNFileInfo
argument_list|(
name|path
argument_list|,
literal|false
argument_list|)
decl_stmt|;
name|file
operator|.
name|loadFromRepository
argument_list|(
name|myRevision1
argument_list|)
expr_stmt|;
name|String
name|baseType
init|=
name|file
operator|.
name|myBaseProperties
operator|.
name|getStringValue
argument_list|(
name|SVNProperty
operator|.
name|MIME_TYPE
argument_list|)
decl_stmt|;
name|type
operator|=
name|getDiffCallback
argument_list|()
operator|.
name|fileDeleted
argument_list|(
name|path
argument_list|,
name|file
operator|.
name|myBaseFile
argument_list|,
literal|null
argument_list|,
name|baseType
argument_list|,
literal|null
argument_list|,
name|file
operator|.
name|myBaseProperties
argument_list|,
name|isTreeConflicted
argument_list|)
expr_stmt|;
block|}
if|else if
condition|(
name|nodeKind
operator|==
name|SVNNodeKind
operator|.
name|DIR
condition|)
block|{
name|type
operator|=
name|getDiffCallback
argument_list|()
operator|.
name|directoryDeleted
argument_list|(
name|path
argument_list|,
name|isTreeConflicted
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|type
operator|!=
name|SVNStatusType
operator|.
name|MISSING
operator|&&
name|type
operator|!=
name|SVNStatusType
operator|.
name|OBSTRUCTED
operator|&&
operator|!
name|isTreeConflicted
index|[
literal|0
index|]
condition|)
block|{
name|action
operator|=
name|SVNEventAction
operator|.
name|UPDATE_DELETE
expr_stmt|;
if|if
condition|(
name|myIsDryRun
condition|)
block|{
name|getDiffCallback
argument_list|()
operator|.
name|addDeletedPath
argument_list|(
name|path
argument_list|)
expr_stmt|;
block|}
block|}
block|}
name|action
operator|=
name|isTreeConflicted
index|[
literal|0
index|]
condition|?
name|SVNEventAction
operator|.
name|TREE_CONFLICT
else|:
name|action
expr_stmt|;
name|addDeletedPath
argument_list|(
name|path
argument_list|,
name|nodeKind
argument_list|,
name|type
argument_list|,
name|action
argument_list|,
name|expectedAction
argument_list|,
name|isTreeConflicted
index|[
literal|0
index|]
argument_list|)
expr_stmt|;
block|}
specifier|protected
name|void
name|addDeletedPath
parameter_list|(
name|String
name|path
parameter_list|,
name|SVNNodeKind
name|nodeKind
parameter_list|,
name|SVNStatusType
name|type
parameter_list|,
name|SVNEventAction
name|action
parameter_list|,
name|SVNEventAction
name|expectedAction
parameter_list|,
name|boolean
name|isTreeConflicted
parameter_list|)
block|{
if|if
condition|(
name|myEventHandler
operator|!=
literal|null
condition|)
block|{
name|File
name|deletedFile
init|=
operator|new
name|Resource
argument_list|(
name|myTarget
argument_list|,
name|path
argument_list|)
decl_stmt|;
name|KindActionState
name|kas
init|=
operator|new
name|KindActionState
argument_list|()
decl_stmt|;
name|kas
operator|.
name|myAction
operator|=
name|action
expr_stmt|;
name|kas
operator|.
name|myKind
operator|=
name|nodeKind
expr_stmt|;
name|kas
operator|.
name|myStatus
operator|=
name|type
expr_stmt|;
name|kas
operator|.
name|myExpectedAction
operator|=
name|expectedAction
expr_stmt|;
name|kas
operator|.
name|myIsTreeConflicted
operator|=
name|isTreeConflicted
expr_stmt|;
name|myDeletedPaths
operator|.
name|put
argument_list|(
name|deletedFile
argument_list|,
name|kas
argument_list|)
expr_stmt|;
block|}
block|}
specifier|public
name|void
name|addDir
parameter_list|(
name|String
name|path
parameter_list|,
name|String
name|copyFromPath
parameter_list|,
name|long
name|copyFromRevision
parameter_list|)
throws|throws
name|SVNException
block|{
name|SVNDirectoryInfo
name|parentDir
init|=
name|myCurrentDirectory
decl_stmt|;
name|myCurrentDirectory
operator|=
operator|new
name|SVNDirectoryInfo
argument_list|(
name|myCurrentDirectory
argument_list|,
name|path
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|myCurrentDirectory
operator|.
name|myBaseProperties
operator|=
operator|new
name|SVNProperties
argument_list|()
expr_stmt|;
if|if
condition|(
name|parentDir
operator|.
name|myIsSkip
operator|||
name|parentDir
operator|.
name|myIsTreeConflicted
condition|)
block|{
name|myCurrentDirectory
operator|.
name|myIsSkip
operator|=
literal|true
expr_stmt|;
return|return;
block|}
name|boolean
index|[]
name|isTreeConflicted
init|=
block|{
literal|false
block|}
decl_stmt|;
name|SVNStatusType
name|type
init|=
name|getDiffCallback
argument_list|()
operator|.
name|directoryAdded
argument_list|(
name|path
argument_list|,
name|myRevision2
argument_list|,
name|isTreeConflicted
argument_list|)
decl_stmt|;
name|myCurrentDirectory
operator|.
name|myIsTreeConflicted
operator|=
name|isTreeConflicted
index|[
literal|0
index|]
expr_stmt|;
if|if
condition|(
name|myEventHandler
operator|!=
literal|null
condition|)
block|{
name|SVNEventAction
name|action
init|=
name|SVNEventAction
operator|.
name|UPDATE_ADD
decl_stmt|;
name|SVNNodeKind
name|kind
init|=
name|SVNNodeKind
operator|.
name|DIR
decl_stmt|;
name|KindActionState
name|kas
init|=
operator|(
name|KindActionState
operator|)
name|myDeletedPaths
operator|.
name|get
argument_list|(
name|myCurrentDirectory
operator|.
name|myWCFile
argument_list|)
decl_stmt|;
if|if
condition|(
name|kas
operator|!=
literal|null
condition|)
block|{
name|kind
operator|=
name|kas
operator|.
name|myKind
expr_stmt|;
name|type
operator|=
name|kas
operator|.
name|myStatus
expr_stmt|;
name|myDeletedPaths
operator|.
name|remove
argument_list|(
name|myCurrentDirectory
operator|.
name|myWCFile
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|myCurrentDirectory
operator|.
name|myIsTreeConflicted
condition|)
block|{
name|action
operator|=
name|SVNEventAction
operator|.
name|TREE_CONFLICT
expr_stmt|;
block|}
if|else if
condition|(
name|kas
operator|!=
literal|null
condition|)
block|{
if|if
condition|(
name|kas
operator|.
name|myAction
operator|==
name|SVNEventAction
operator|.
name|UPDATE_DELETE
condition|)
block|{
name|action
operator|=
name|SVNEventAction
operator|.
name|UPDATE_REPLACE
expr_stmt|;
block|}
else|else
block|{
name|action
operator|=
name|kas
operator|.
name|myAction
expr_stmt|;
block|}
block|}
if|else if
condition|(
name|type
operator|==
name|SVNStatusType
operator|.
name|MISSING
operator|||
name|type
operator|==
name|SVNStatusType
operator|.
name|OBSTRUCTED
condition|)
block|{
name|action
operator|=
name|SVNEventAction
operator|.
name|SKIP
expr_stmt|;
block|}
name|SVNEvent
name|event
init|=
name|SVNEventFactory
operator|.
name|createSVNEvent
argument_list|(
name|myCurrentDirectory
operator|.
name|myWCFile
argument_list|,
name|kind
argument_list|,
literal|null
argument_list|,
name|SVNRepository
operator|.
name|INVALID_REVISION
argument_list|,
name|type
argument_list|,
name|type
argument_list|,
literal|null
argument_list|,
name|action
argument_list|,
name|SVNEventAction
operator|.
name|UPDATE_ADD
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|)
decl_stmt|;
name|myEventHandler
operator|.
name|handleEvent
argument_list|(
name|event
argument_list|,
name|ISVNEventHandler
operator|.
name|UNKNOWN
argument_list|)
expr_stmt|;
block|}
block|}
specifier|public
name|void
name|openDir
parameter_list|(
name|String
name|path
parameter_list|,
name|long
name|revision
parameter_list|)
throws|throws
name|SVNException
block|{
name|SVNDirectoryInfo
name|parentDir
init|=
name|myCurrentDirectory
decl_stmt|;
name|myCurrentDirectory
operator|=
operator|new
name|SVNDirectoryInfo
argument_list|(
name|myCurrentDirectory
argument_list|,
name|path
argument_list|,
literal|false
argument_list|)
expr_stmt|;
if|if
condition|(
name|parentDir
operator|.
name|myIsSkip
operator|||
name|parentDir
operator|.
name|myIsTreeConflicted
condition|)
block|{
name|myCurrentDirectory
operator|.
name|myIsSkip
operator|=
literal|true
expr_stmt|;
return|return;
block|}
name|myCurrentDirectory
operator|.
name|loadFromRepository
argument_list|(
name|revision
argument_list|)
expr_stmt|;
name|boolean
index|[]
name|isTreeConflicted
init|=
block|{
literal|false
block|}
decl_stmt|;
name|getDiffCallback
argument_list|()
operator|.
name|directoryOpened
argument_list|(
name|path
argument_list|,
name|revision
argument_list|,
name|isTreeConflicted
argument_list|)
expr_stmt|;
name|myCurrentDirectory
operator|.
name|myIsTreeConflicted
operator|=
name|isTreeConflicted
index|[
literal|0
index|]
expr_stmt|;
block|}
specifier|public
name|void
name|changeDirProperty
parameter_list|(
name|String
name|name
parameter_list|,
name|SVNPropertyValue
name|value
parameter_list|)
throws|throws
name|SVNException
block|{
if|if
condition|(
name|myCurrentDirectory
operator|.
name|myIsSkip
condition|)
block|{
return|return;
block|}
name|myCurrentDirectory
operator|.
name|myPropertyDiff
operator|.
name|put
argument_list|(
name|name
argument_list|,
name|value
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|closeDir
parameter_list|()
throws|throws
name|SVNException
block|{
if|if
condition|(
name|myCurrentDirectory
operator|.
name|myIsSkip
condition|)
block|{
name|myCurrentDirectory
operator|=
name|myCurrentDirectory
operator|.
name|myParent
expr_stmt|;
return|return;
block|}
name|SVNStatusType
name|type
init|=
name|SVNStatusType
operator|.
name|UNKNOWN
decl_stmt|;
name|SVNEventAction
name|expectedAction
init|=
name|SVNEventAction
operator|.
name|UPDATE_UPDATE
decl_stmt|;
name|SVNEventAction
name|action
init|=
name|expectedAction
decl_stmt|;
if|if
condition|(
name|myIsDryRun
condition|)
block|{
name|getDiffCallback
argument_list|()
operator|.
name|clearDeletedPaths
argument_list|()
expr_stmt|;
block|}
name|SVNAdminArea
name|dir
init|=
literal|null
decl_stmt|;
if|if
condition|(
operator|!
name|myCurrentDirectory
operator|.
name|myPropertyDiff
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
try|try
block|{
name|dir
operator|=
name|retrieve
argument_list|(
name|myCurrentDirectory
operator|.
name|myWCFile
argument_list|,
name|myIsDryRun
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|SVNException
name|e
parameter_list|)
block|{
if|if
condition|(
name|e
operator|.
name|getErrorMessage
argument_list|()
operator|.
name|getErrorCode
argument_list|()
operator|==
name|SVNErrorCode
operator|.
name|WC_NOT_LOCKED
condition|)
block|{
if|if
condition|(
operator|!
name|myCurrentDirectory
operator|.
name|myIsAdded
operator|&&
name|myEventHandler
operator|!=
literal|null
condition|)
block|{
name|action
operator|=
name|myCurrentDirectory
operator|.
name|myIsTreeConflicted
condition|?
name|SVNEventAction
operator|.
name|TREE_CONFLICT
else|:
name|SVNEventAction
operator|.
name|SKIP
expr_stmt|;
name|SVNEvent
name|event
init|=
name|SVNEventFactory
operator|.
name|createSVNEvent
argument_list|(
name|myCurrentDirectory
operator|.
name|myWCFile
argument_list|,
name|SVNNodeKind
operator|.
name|DIR
argument_list|,
literal|null
argument_list|,
name|SVNRepository
operator|.
name|INVALID_REVISION
argument_list|,
name|SVNStatusType
operator|.
name|MISSING
argument_list|,
name|SVNStatusType
operator|.
name|MISSING
argument_list|,
literal|null
argument_list|,
name|action
argument_list|,
name|expectedAction
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|)
decl_stmt|;
name|myEventHandler
operator|.
name|handleEvent
argument_list|(
name|event
argument_list|,
name|ISVNEventHandler
operator|.
name|UNKNOWN
argument_list|)
expr_stmt|;
block|}
name|myCurrentDirectory
operator|=
name|myCurrentDirectory
operator|.
name|myParent
expr_stmt|;
return|return;
block|}
throw|throw
name|e
throw|;
block|}
if|if
condition|(
operator|!
name|myIsDryRun
operator|||
name|dir
operator|!=
literal|null
condition|)
block|{
name|boolean
index|[]
name|isTreeConflicted
init|=
block|{
literal|false
block|}
decl_stmt|;
name|type
operator|=
name|getDiffCallback
argument_list|()
operator|.
name|propertiesChanged
argument_list|(
name|myCurrentDirectory
operator|.
name|myRepositoryPath
argument_list|,
name|myCurrentDirectory
operator|.
name|myBaseProperties
argument_list|,
name|myCurrentDirectory
operator|.
name|myPropertyDiff
argument_list|,
name|isTreeConflicted
argument_list|)
expr_stmt|;
if|if
condition|(
name|isTreeConflicted
index|[
literal|0
index|]
condition|)
block|{
name|myCurrentDirectory
operator|.
name|myIsTreeConflicted
operator|=
literal|true
expr_stmt|;
block|}
block|}
block|}
name|getDiffCallback
argument_list|()
operator|.
name|directoryClosed
argument_list|(
name|myCurrentDirectory
operator|.
name|myRepositoryPath
argument_list|,
literal|null
argument_list|)
expr_stmt|;
if|if
condition|(
name|type
operator|==
name|SVNStatusType
operator|.
name|UNKNOWN
condition|)
block|{
name|action
operator|=
name|SVNEventAction
operator|.
name|UPDATE_NONE
expr_stmt|;
block|}
if|if
condition|(
operator|!
name|myCurrentDirectory
operator|.
name|myIsAdded
operator|&&
name|myEventHandler
operator|!=
literal|null
condition|)
block|{
for|for
control|(
name|Iterator
name|deletedPathsIter
init|=
name|myDeletedPaths
operator|.
name|keySet
argument_list|()
operator|.
name|iterator
argument_list|()
init|;
name|deletedPathsIter
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|File
name|deletedPath
init|=
operator|(
name|File
operator|)
name|deletedPathsIter
operator|.
name|next
argument_list|()
decl_stmt|;
name|KindActionState
name|kas
init|=
operator|(
name|KindActionState
operator|)
name|myDeletedPaths
operator|.
name|get
argument_list|(
name|deletedPath
argument_list|)
decl_stmt|;
name|SVNEvent
name|event
init|=
name|SVNEventFactory
operator|.
name|createSVNEvent
argument_list|(
name|deletedPath
argument_list|,
name|kas
operator|.
name|myKind
argument_list|,
literal|null
argument_list|,
name|SVNRepository
operator|.
name|INVALID_REVISION
argument_list|,
name|kas
operator|.
name|myStatus
argument_list|,
name|kas
operator|.
name|myStatus
argument_list|,
name|SVNStatusType
operator|.
name|INAPPLICABLE
argument_list|,
name|kas
operator|.
name|myAction
argument_list|,
name|kas
operator|.
name|myExpectedAction
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|)
decl_stmt|;
name|myEventHandler
operator|.
name|handleEvent
argument_list|(
name|event
argument_list|,
name|ISVNEventHandler
operator|.
name|UNKNOWN
argument_list|)
expr_stmt|;
name|deletedPathsIter
operator|.
name|remove
argument_list|()
expr_stmt|;
block|}
name|action
operator|=
name|myCurrentDirectory
operator|.
name|myIsTreeConflicted
condition|?
name|SVNEventAction
operator|.
name|TREE_CONFLICT
else|:
name|action
expr_stmt|;
name|SVNEvent
name|event
init|=
name|SVNEventFactory
operator|.
name|createSVNEvent
argument_list|(
name|myCurrentDirectory
operator|.
name|myWCFile
argument_list|,
name|SVNNodeKind
operator|.
name|DIR
argument_list|,
literal|null
argument_list|,
name|SVNRepository
operator|.
name|INVALID_REVISION
argument_list|,
name|SVNStatusType
operator|.
name|INAPPLICABLE
argument_list|,
name|type
argument_list|,
name|SVNStatusType
operator|.
name|INAPPLICABLE
argument_list|,
name|action
argument_list|,
name|expectedAction
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|)
decl_stmt|;
name|myEventHandler
operator|.
name|handleEvent
argument_list|(
name|event
argument_list|,
name|ISVNEventHandler
operator|.
name|UNKNOWN
argument_list|)
expr_stmt|;
block|}
name|myCurrentDirectory
operator|=
name|myCurrentDirectory
operator|.
name|myParent
expr_stmt|;
block|}
specifier|public
name|void
name|addFile
parameter_list|(
name|String
name|path
parameter_list|,
name|String
name|copyFromPath
parameter_list|,
name|long
name|copyFromRevision
parameter_list|)
throws|throws
name|SVNException
block|{
name|myCurrentFile
operator|=
name|createFileInfo
argument_list|(
name|path
argument_list|,
literal|true
argument_list|)
expr_stmt|;
if|if
condition|(
name|myCurrentDirectory
operator|.
name|myIsSkip
operator|||
name|myCurrentDirectory
operator|.
name|myIsTreeConflicted
condition|)
block|{
name|myCurrentFile
operator|.
name|myIsSkip
operator|=
literal|true
expr_stmt|;
return|return;
block|}
name|myCurrentFile
operator|.
name|myBaseProperties
operator|=
operator|new
name|SVNProperties
argument_list|()
expr_stmt|;
name|myCurrentFile
operator|.
name|myBaseFile
operator|=
name|SVNFileUtil
operator|.
name|createUniqueFile
argument_list|(
name|getTempDirectory
argument_list|()
argument_list|,
literal|".diff"
argument_list|,
literal|".tmp"
argument_list|,
name|myIsUseGlobalTmp
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|openFile
parameter_list|(
name|String
name|path
parameter_list|,
name|long
name|revision
parameter_list|)
throws|throws
name|SVNException
block|{
name|myCurrentFile
operator|=
name|createFileInfo
argument_list|(
name|path
argument_list|,
literal|false
argument_list|)
expr_stmt|;
if|if
condition|(
name|myCurrentDirectory
operator|.
name|myIsSkip
operator|||
name|myCurrentDirectory
operator|.
name|myIsTreeConflicted
condition|)
block|{
name|myCurrentFile
operator|.
name|myIsSkip
operator|=
literal|true
expr_stmt|;
return|return;
block|}
name|myCurrentFile
operator|.
name|loadFromRepository
argument_list|(
name|revision
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|changeFileProperty
parameter_list|(
name|String
name|commitPath
parameter_list|,
name|String
name|name
parameter_list|,
name|SVNPropertyValue
name|value
parameter_list|)
throws|throws
name|SVNException
block|{
if|if
condition|(
name|myCurrentFile
operator|.
name|myIsSkip
condition|)
block|{
return|return;
block|}
name|myCurrentFile
operator|.
name|myPropertyDiff
operator|.
name|put
argument_list|(
name|name
argument_list|,
name|value
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|applyTextDelta
parameter_list|(
name|String
name|commitPath
parameter_list|,
name|String
name|baseChecksum
parameter_list|)
throws|throws
name|SVNException
block|{
if|if
condition|(
name|myCurrentFile
operator|.
name|myIsSkip
condition|)
block|{
return|return;
block|}
name|SVNAdminArea
name|dir
init|=
literal|null
decl_stmt|;
try|try
block|{
name|dir
operator|=
name|retrieveParent
argument_list|(
name|myCurrentFile
operator|.
name|myWCFile
argument_list|,
literal|true
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|SVNException
name|e
parameter_list|)
block|{
name|dir
operator|=
literal|null
expr_stmt|;
block|}
name|myCurrentFile
operator|.
name|myFile
operator|=
name|createTempFile
argument_list|(
name|dir
argument_list|,
name|SVNPathUtil
operator|.
name|tail
argument_list|(
name|commitPath
argument_list|)
argument_list|)
expr_stmt|;
name|myDeltaProcessor
operator|.
name|applyTextDelta
argument_list|(
name|myCurrentFile
operator|.
name|myBaseFile
argument_list|,
name|myCurrentFile
operator|.
name|myFile
argument_list|,
literal|false
argument_list|)
expr_stmt|;
block|}
specifier|public
name|OutputStream
name|textDeltaChunk
parameter_list|(
name|String
name|commitPath
parameter_list|,
name|SVNDiffWindow
name|diffWindow
parameter_list|)
throws|throws
name|SVNException
block|{
if|if
condition|(
name|myCurrentFile
operator|.
name|myIsSkip
condition|)
block|{
return|return
name|SVNFileUtil
operator|.
name|DUMMY_OUT
return|;
block|}
return|return
name|myDeltaProcessor
operator|.
name|textDeltaChunk
argument_list|(
name|diffWindow
argument_list|)
return|;
block|}
specifier|public
name|void
name|textDeltaEnd
parameter_list|(
name|String
name|commitPath
parameter_list|)
throws|throws
name|SVNException
block|{
if|if
condition|(
name|myCurrentFile
operator|.
name|myIsSkip
condition|)
block|{
return|return;
block|}
name|myDeltaProcessor
operator|.
name|textDeltaEnd
argument_list|()
expr_stmt|;
block|}
specifier|public
name|void
name|closeFile
parameter_list|(
name|String
name|commitPath
parameter_list|,
name|String
name|textChecksum
parameter_list|)
throws|throws
name|SVNException
block|{
if|if
condition|(
name|myCurrentFile
operator|.
name|myIsSkip
condition|)
block|{
return|return;
block|}
name|boolean
index|[]
name|isTreeConflicted
init|=
block|{
literal|false
block|}
decl_stmt|;
name|closeFile
argument_list|(
name|commitPath
argument_list|,
name|myCurrentFile
operator|.
name|myIsAdded
argument_list|,
name|myCurrentFile
operator|.
name|myWCFile
argument_list|,
name|myCurrentFile
operator|.
name|myFile
argument_list|,
name|myCurrentFile
operator|.
name|myPropertyDiff
argument_list|,
name|myCurrentFile
operator|.
name|myBaseProperties
argument_list|,
name|myCurrentFile
operator|.
name|myBaseFile
argument_list|,
name|isTreeConflicted
argument_list|)
expr_stmt|;
name|myCurrentFile
operator|.
name|myIsTreeConflicted
operator|=
name|isTreeConflicted
index|[
literal|0
index|]
expr_stmt|;
block|}
specifier|protected
name|void
name|closeFile
parameter_list|(
name|String
name|commitPath
parameter_list|,
name|boolean
name|added
parameter_list|,
name|File
name|wcFile
parameter_list|,
name|File
name|file
parameter_list|,
name|SVNProperties
name|propertyDiff
parameter_list|,
name|SVNProperties
name|baseProperties
parameter_list|,
name|File
name|baseFile
parameter_list|,
name|boolean
index|[]
name|isTreeConflicted
parameter_list|)
throws|throws
name|SVNException
block|{
name|SVNEventAction
name|expectedAction
init|=
name|added
condition|?
name|SVNEventAction
operator|.
name|UPDATE_ADD
else|:
name|SVNEventAction
operator|.
name|UPDATE_UPDATE
decl_stmt|;
name|SVNStatusType
index|[]
name|type
init|=
block|{
name|SVNStatusType
operator|.
name|UNKNOWN
block|,
name|SVNStatusType
operator|.
name|UNKNOWN
block|}
decl_stmt|;
try|try
block|{
name|retrieveParent
argument_list|(
name|wcFile
argument_list|,
name|myIsDryRun
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|SVNException
name|e
parameter_list|)
block|{
if|if
condition|(
name|e
operator|.
name|getErrorMessage
argument_list|()
operator|.
name|getErrorCode
argument_list|()
operator|==
name|SVNErrorCode
operator|.
name|WC_NOT_LOCKED
condition|)
block|{
if|if
condition|(
name|myEventHandler
operator|!=
literal|null
condition|)
block|{
name|SVNEvent
name|event
init|=
name|SVNEventFactory
operator|.
name|createSVNEvent
argument_list|(
name|wcFile
argument_list|,
name|SVNNodeKind
operator|.
name|FILE
argument_list|,
literal|null
argument_list|,
name|SVNRepository
operator|.
name|INVALID_REVISION
argument_list|,
name|SVNStatusType
operator|.
name|MISSING
argument_list|,
name|SVNStatusType
operator|.
name|UNKNOWN
argument_list|,
literal|null
argument_list|,
name|SVNEventAction
operator|.
name|SKIP
argument_list|,
name|expectedAction
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|)
decl_stmt|;
name|myEventHandler
operator|.
name|handleEvent
argument_list|(
name|event
argument_list|,
name|ISVNEventHandler
operator|.
name|UNKNOWN
argument_list|)
expr_stmt|;
block|}
return|return;
block|}
throw|throw
name|e
throw|;
block|}
if|if
condition|(
name|file
operator|!=
literal|null
operator|||
operator|!
name|propertyDiff
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|String
name|baseMimeType
init|=
name|baseProperties
operator|.
name|getStringValue
argument_list|(
name|SVNProperty
operator|.
name|MIME_TYPE
argument_list|)
decl_stmt|;
name|String
name|mimeType
init|=
name|propertyDiff
operator|.
name|getStringValue
argument_list|(
name|SVNProperty
operator|.
name|MIME_TYPE
argument_list|)
decl_stmt|;
if|if
condition|(
name|added
condition|)
block|{
name|type
operator|=
name|getDiffCallback
argument_list|()
operator|.
name|fileAdded
argument_list|(
name|commitPath
argument_list|,
name|file
operator|!=
literal|null
condition|?
name|baseFile
else|:
literal|null
argument_list|,
name|file
argument_list|,
literal|0
argument_list|,
name|myRevision2
argument_list|,
name|baseMimeType
argument_list|,
name|mimeType
argument_list|,
name|baseProperties
argument_list|,
name|propertyDiff
argument_list|,
name|isTreeConflicted
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|type
operator|=
name|getDiffCallback
argument_list|()
operator|.
name|fileChanged
argument_list|(
name|commitPath
argument_list|,
name|file
operator|!=
literal|null
condition|?
name|baseFile
else|:
literal|null
argument_list|,
name|file
argument_list|,
name|myRevision1
argument_list|,
name|myRevision2
argument_list|,
name|baseMimeType
argument_list|,
name|mimeType
argument_list|,
name|baseProperties
argument_list|,
name|propertyDiff
argument_list|,
name|isTreeConflicted
argument_list|)
expr_stmt|;
block|}
block|}
if|if
condition|(
name|myEventHandler
operator|!=
literal|null
condition|)
block|{
name|SVNNodeKind
name|kind
init|=
name|SVNNodeKind
operator|.
name|FILE
decl_stmt|;
name|SVNEventAction
name|action
decl_stmt|;
name|KindActionState
name|kas
init|=
operator|(
name|KindActionState
operator|)
name|myDeletedPaths
operator|.
name|get
argument_list|(
name|wcFile
argument_list|)
decl_stmt|;
if|if
condition|(
name|kas
operator|!=
literal|null
condition|)
block|{
name|myDeletedPaths
operator|.
name|remove
argument_list|(
name|wcFile
argument_list|)
expr_stmt|;
name|kind
operator|=
name|kas
operator|.
name|myKind
expr_stmt|;
name|type
index|[
literal|0
index|]
operator|=
name|type
index|[
literal|1
index|]
operator|=
name|kas
operator|.
name|myStatus
expr_stmt|;
block|}
if|if
condition|(
name|isTreeConflicted
operator|!=
literal|null
operator|&&
name|isTreeConflicted
operator|.
name|length
operator|>
literal|0
operator|&&
name|isTreeConflicted
index|[
literal|0
index|]
condition|)
block|{
name|action
operator|=
name|SVNEventAction
operator|.
name|TREE_CONFLICT
expr_stmt|;
block|}
if|else if
condition|(
name|kas
operator|!=
literal|null
condition|)
block|{
if|if
condition|(
name|kas
operator|.
name|myAction
operator|==
name|SVNEventAction
operator|.
name|UPDATE_DELETE
operator|&&
name|added
condition|)
block|{
name|action
operator|=
name|SVNEventAction
operator|.
name|UPDATE_REPLACE
expr_stmt|;
block|}
else|else
block|{
name|action
operator|=
name|kas
operator|.
name|myAction
expr_stmt|;
block|}
block|}
if|else if
condition|(
name|type
index|[
literal|0
index|]
operator|==
name|SVNStatusType
operator|.
name|MISSING
operator|||
name|type
index|[
literal|0
index|]
operator|==
name|SVNStatusType
operator|.
name|OBSTRUCTED
condition|)
block|{
name|action
operator|=
name|SVNEventAction
operator|.
name|SKIP
expr_stmt|;
block|}
if|else if
condition|(
name|added
condition|)
block|{
name|action
operator|=
name|SVNEventAction
operator|.
name|UPDATE_ADD
expr_stmt|;
block|}
else|else
block|{
name|action
operator|=
name|SVNEventAction
operator|.
name|UPDATE_UPDATE
expr_stmt|;
block|}
name|SVNEvent
name|event
init|=
name|SVNEventFactory
operator|.
name|createSVNEvent
argument_list|(
name|wcFile
argument_list|,
name|kind
argument_list|,
literal|null
argument_list|,
name|SVNRepository
operator|.
name|INVALID_REVISION
argument_list|,
name|type
index|[
literal|0
index|]
argument_list|,
name|type
index|[
literal|1
index|]
argument_list|,
literal|null
argument_list|,
name|action
argument_list|,
name|expectedAction
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|)
decl_stmt|;
name|myEventHandler
operator|.
name|handleEvent
argument_list|(
name|event
argument_list|,
name|ISVNEventHandler
operator|.
name|UNKNOWN
argument_list|)
expr_stmt|;
block|}
block|}
specifier|public
name|SVNCommitInfo
name|closeEdit
parameter_list|()
throws|throws
name|SVNException
block|{
return|return
literal|null
return|;
block|}
specifier|public
name|void
name|abortEdit
parameter_list|()
throws|throws
name|SVNException
block|{
block|}
specifier|public
name|void
name|absentDir
parameter_list|(
name|String
name|path
parameter_list|)
throws|throws
name|SVNException
block|{
if|if
condition|(
name|myCurrentDirectory
operator|.
name|myWCFile
operator|!=
literal|null
condition|)
block|{
name|File
name|dir
init|=
operator|new
name|Resource
argument_list|(
name|myCurrentDirectory
operator|.
name|myWCFile
argument_list|,
name|SVNPathUtil
operator|.
name|tail
argument_list|(
name|path
argument_list|)
argument_list|)
decl_stmt|;
name|SVNEvent
name|event
init|=
name|SVNEventFactory
operator|.
name|createSVNEvent
argument_list|(
name|dir
argument_list|,
name|SVNNodeKind
operator|.
name|DIR
argument_list|,
literal|null
argument_list|,
name|SVNRepository
operator|.
name|INVALID_REVISION
argument_list|,
name|SVNStatusType
operator|.
name|MISSING
argument_list|,
name|SVNStatusType
operator|.
name|MISSING
argument_list|,
name|SVNStatusType
operator|.
name|MISSING
argument_list|,
name|SVNEventAction
operator|.
name|SKIP
argument_list|,
name|SVNEventAction
operator|.
name|SKIP
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|)
decl_stmt|;
name|myEventHandler
operator|.
name|handleEvent
argument_list|(
name|event
argument_list|,
name|ISVNEventHandler
operator|.
name|UNKNOWN
argument_list|)
expr_stmt|;
block|}
block|}
specifier|public
name|void
name|absentFile
parameter_list|(
name|String
name|path
parameter_list|)
throws|throws
name|SVNException
block|{
if|if
condition|(
name|myCurrentDirectory
operator|.
name|myWCFile
operator|!=
literal|null
condition|)
block|{
name|File
name|file
init|=
operator|new
name|Resource
argument_list|(
name|myCurrentDirectory
operator|.
name|myWCFile
argument_list|,
name|SVNPathUtil
operator|.
name|tail
argument_list|(
name|path
argument_list|)
argument_list|)
decl_stmt|;
name|SVNEvent
name|event
init|=
name|SVNEventFactory
operator|.
name|createSVNEvent
argument_list|(
name|file
argument_list|,
name|SVNNodeKind
operator|.
name|FILE
argument_list|,
literal|null
argument_list|,
name|SVNRepository
operator|.
name|INVALID_REVISION
argument_list|,
name|SVNStatusType
operator|.
name|MISSING
argument_list|,
name|SVNStatusType
operator|.
name|MISSING
argument_list|,
name|SVNStatusType
operator|.
name|MISSING
argument_list|,
name|SVNEventAction
operator|.
name|SKIP
argument_list|,
name|SVNEventAction
operator|.
name|SKIP
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|)
decl_stmt|;
name|myEventHandler
operator|.
name|handleEvent
argument_list|(
name|event
argument_list|,
name|ISVNEventHandler
operator|.
name|UNKNOWN
argument_list|)
expr_stmt|;
block|}
block|}
specifier|public
name|void
name|cleanup
parameter_list|()
throws|throws
name|SVNException
block|{
if|if
condition|(
name|myTempDirectory
operator|!=
literal|null
condition|)
block|{
name|SVNFileUtil
operator|.
name|deleteAll
argument_list|(
name|myTempDirectory
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|myTempDirectory
operator|=
literal|null
expr_stmt|;
block|}
if|if
condition|(
name|myTempFiles
operator|!=
literal|null
condition|)
block|{
for|for
control|(
name|Iterator
name|files
init|=
name|myTempFiles
operator|.
name|iterator
argument_list|()
init|;
name|files
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|SVNFileUtil
operator|.
name|deleteFile
argument_list|(
operator|(
name|File
operator|)
name|files
operator|.
name|next
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
block|}
specifier|protected
name|SVNAdminArea
name|retrieve
parameter_list|(
name|File
name|path
parameter_list|,
name|boolean
name|lenient
parameter_list|)
throws|throws
name|SVNException
block|{
if|if
condition|(
name|myAdminArea
operator|==
literal|null
condition|)
block|{
return|return
literal|null
return|;
block|}
try|try
block|{
return|return
name|myAdminArea
operator|.
name|getWCAccess
argument_list|()
operator|.
name|retrieve
argument_list|(
name|path
argument_list|)
return|;
block|}
catch|catch
parameter_list|(
name|SVNException
name|e
parameter_list|)
block|{
if|if
condition|(
name|lenient
condition|)
block|{
return|return
literal|null
return|;
block|}
throw|throw
name|e
throw|;
block|}
block|}
specifier|protected
name|SVNAdminArea
name|retrieveParent
parameter_list|(
name|File
name|path
parameter_list|,
name|boolean
name|lenient
parameter_list|)
throws|throws
name|SVNException
block|{
if|if
condition|(
name|myAdminArea
operator|==
literal|null
condition|)
block|{
return|return
literal|null
return|;
block|}
return|return
name|retrieve
argument_list|(
name|path
operator|.
name|getParentFile
argument_list|()
argument_list|,
name|lenient
argument_list|)
return|;
block|}
specifier|protected
name|AbstractDiffCallback
name|getDiffCallback
parameter_list|()
block|{
return|return
name|myDiffCallback
return|;
block|}
specifier|protected
name|File
name|getTempDirectory
parameter_list|()
throws|throws
name|SVNException
block|{
if|if
condition|(
name|myTempDirectory
operator|==
literal|null
condition|)
block|{
name|myTempDirectory
operator|=
name|getDiffCallback
argument_list|()
operator|.
name|createTempDirectory
argument_list|()
expr_stmt|;
block|}
return|return
name|myTempDirectory
return|;
block|}
specifier|protected
name|File
name|createTempFile
parameter_list|(
name|SVNAdminArea
name|dir
parameter_list|,
name|String
name|name
parameter_list|)
throws|throws
name|SVNException
block|{
if|if
condition|(
name|dir
operator|!=
literal|null
operator|&&
name|dir
operator|.
name|isLocked
argument_list|()
condition|)
block|{
name|File
name|tmpFile
init|=
name|dir
operator|.
name|getBaseFile
argument_list|(
name|name
argument_list|,
literal|true
argument_list|)
decl_stmt|;
if|if
condition|(
name|myTempFiles
operator|==
literal|null
condition|)
block|{
name|myTempFiles
operator|=
operator|new
name|SVNHashSet
argument_list|()
expr_stmt|;
block|}
name|myTempFiles
operator|.
name|add
argument_list|(
name|tmpFile
argument_list|)
expr_stmt|;
return|return
name|tmpFile
return|;
block|}
return|return
name|SVNFileUtil
operator|.
name|createUniqueFile
argument_list|(
name|getTempDirectory
argument_list|()
argument_list|,
literal|".diff"
argument_list|,
literal|".tmp"
argument_list|,
name|myIsUseGlobalTmp
argument_list|)
return|;
block|}
specifier|protected
name|SVNFileInfo
name|createFileInfo
parameter_list|(
name|String
name|path
parameter_list|,
name|boolean
name|added
parameter_list|)
block|{
return|return
operator|new
name|SVNFileInfo
argument_list|(
name|path
argument_list|,
name|added
argument_list|)
return|;
block|}
specifier|protected
name|void
name|setIsConflicted
parameter_list|(
name|boolean
index|[]
name|isConflictedResult
parameter_list|,
name|boolean
name|isConflicted
parameter_list|)
block|{
if|if
condition|(
name|isConflictedResult
operator|!=
literal|null
operator|&&
name|isConflictedResult
operator|.
name|length
operator|>
literal|0
condition|)
block|{
name|isConflictedResult
index|[
literal|0
index|]
operator|=
name|isConflicted
expr_stmt|;
block|}
block|}
specifier|public
name|void
name|setUseGlobalTmp
parameter_list|(
name|boolean
name|global
parameter_list|)
block|{
name|myIsUseGlobalTmp
operator|=
name|global
expr_stmt|;
block|}
specifier|protected
class|class
name|SVNDirectoryInfo
block|{
specifier|public
name|SVNDirectoryInfo
parameter_list|(
name|SVNDirectoryInfo
name|parent
parameter_list|,
name|String
name|path
parameter_list|,
name|boolean
name|added
parameter_list|)
block|{
name|myParent
operator|=
name|parent
expr_stmt|;
name|myRepositoryPath
operator|=
name|path
expr_stmt|;
name|myWCFile
operator|=
name|myTarget
operator|!=
literal|null
condition|?
operator|new
name|Resource
argument_list|(
name|myTarget
argument_list|,
name|path
argument_list|)
else|:
literal|null
expr_stmt|;
name|myIsAdded
operator|=
name|added
expr_stmt|;
name|myPropertyDiff
operator|=
operator|new
name|SVNProperties
argument_list|()
expr_stmt|;
block|}
specifier|public
name|void
name|loadFromRepository
parameter_list|(
name|long
name|baseRevision
parameter_list|)
throws|throws
name|SVNException
block|{
name|myBaseProperties
operator|=
operator|new
name|SVNProperties
argument_list|()
expr_stmt|;
name|myRepos
operator|.
name|getDir
argument_list|(
name|myRepositoryPath
argument_list|,
name|baseRevision
argument_list|,
name|myBaseProperties
argument_list|,
operator|(
name|ISVNDirEntryHandler
operator|)
literal|null
argument_list|)
expr_stmt|;
block|}
specifier|protected
name|boolean
name|myIsAdded
decl_stmt|;
specifier|protected
name|boolean
name|myIsSkip
decl_stmt|;
specifier|protected
name|boolean
name|myIsTreeConflicted
decl_stmt|;
specifier|protected
name|String
name|myRepositoryPath
decl_stmt|;
specifier|protected
name|File
name|myWCFile
decl_stmt|;
specifier|protected
name|SVNProperties
name|myBaseProperties
decl_stmt|;
specifier|protected
name|SVNProperties
name|myPropertyDiff
decl_stmt|;
specifier|protected
name|SVNDirectoryInfo
name|myParent
decl_stmt|;
block|}
specifier|protected
class|class
name|SVNFileInfo
block|{
specifier|public
name|SVNFileInfo
parameter_list|(
name|String
name|path
parameter_list|,
name|boolean
name|added
parameter_list|)
block|{
name|myRepositoryPath
operator|=
name|path
expr_stmt|;
name|myIsAdded
operator|=
name|added
expr_stmt|;
name|myWCFile
operator|=
name|myTarget
operator|!=
literal|null
condition|?
operator|new
name|Resource
argument_list|(
name|myTarget
argument_list|,
name|path
argument_list|)
else|:
literal|null
expr_stmt|;
name|myPropertyDiff
operator|=
operator|new
name|SVNProperties
argument_list|()
expr_stmt|;
block|}
specifier|public
name|void
name|loadFromRepository
parameter_list|(
name|long
name|revision
parameter_list|)
throws|throws
name|SVNException
block|{
name|myBaseFile
operator|=
name|SVNFileUtil
operator|.
name|createUniqueFile
argument_list|(
name|getTempDirectory
argument_list|()
argument_list|,
literal|".diff"
argument_list|,
literal|".tmp"
argument_list|,
name|myIsUseGlobalTmp
argument_list|)
expr_stmt|;
name|OutputStream
name|os
init|=
literal|null
decl_stmt|;
name|myBaseProperties
operator|=
operator|new
name|SVNProperties
argument_list|()
expr_stmt|;
try|try
block|{
name|os
operator|=
name|SVNFileUtil
operator|.
name|openFileForWriting
argument_list|(
name|myBaseFile
argument_list|)
expr_stmt|;
name|myRepos
operator|.
name|getFile
argument_list|(
name|myRepositoryPath
argument_list|,
name|revision
argument_list|,
name|myBaseProperties
argument_list|,
operator|new
name|SVNCancellableOutputStream
argument_list|(
name|os
argument_list|,
name|myCancelHandler
argument_list|)
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
name|SVNFileUtil
operator|.
name|closeFile
argument_list|(
name|os
argument_list|)
expr_stmt|;
block|}
block|}
specifier|protected
name|String
name|myRepositoryPath
decl_stmt|;
specifier|protected
name|File
name|myWCFile
decl_stmt|;
specifier|protected
name|boolean
name|myIsAdded
decl_stmt|;
specifier|protected
name|boolean
name|myIsSkip
decl_stmt|;
specifier|protected
name|boolean
name|myIsTreeConflicted
decl_stmt|;
specifier|protected
name|File
name|myFile
decl_stmt|;
specifier|protected
name|File
name|myBaseFile
decl_stmt|;
specifier|protected
name|SVNProperties
name|myBaseProperties
decl_stmt|;
specifier|protected
name|SVNProperties
name|myPropertyDiff
decl_stmt|;
block|}
specifier|protected
class|class
name|KindActionState
block|{
specifier|protected
name|SVNNodeKind
name|myKind
decl_stmt|;
specifier|protected
name|SVNEventAction
name|myAction
decl_stmt|;
specifier|protected
name|SVNEventAction
name|myExpectedAction
decl_stmt|;
specifier|protected
name|SVNStatusType
name|myStatus
decl_stmt|;
specifier|protected
name|boolean
name|myIsTreeConflicted
decl_stmt|;
block|}
block|}
end_class

end_unit

