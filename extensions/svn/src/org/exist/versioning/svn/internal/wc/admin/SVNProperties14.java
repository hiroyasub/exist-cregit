begin_unit|revision:1.0.0;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * ====================================================================  * Copyright (c) 2004-2010 TMate Software Ltd.  All rights reserved.  *  * This software is licensed as described in the file COPYING, which  * you should have received as part of this distribution.  The terms  * are also available at http://svnkit.com/license.html  * If newer versions of this license are posted there, you may use a  * newer version instead, at your option.  * ====================================================================  */
end_comment

begin_package
package|package
name|org
operator|.
name|exist
operator|.
name|versioning
operator|.
name|svn
operator|.
name|internal
operator|.
name|wc
operator|.
name|admin
package|;
end_package

begin_import
import|import
name|org
operator|.
name|tmatesoft
operator|.
name|svn
operator|.
name|core
operator|.
name|SVNException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|tmatesoft
operator|.
name|svn
operator|.
name|core
operator|.
name|SVNProperty
import|;
end_import

begin_import
import|import
name|org
operator|.
name|tmatesoft
operator|.
name|svn
operator|.
name|core
operator|.
name|SVNProperties
import|;
end_import

begin_import
import|import
name|org
operator|.
name|tmatesoft
operator|.
name|svn
operator|.
name|core
operator|.
name|SVNPropertyValue
import|;
end_import

begin_comment
comment|/**  * @version 1.3  * @author  TMate Software Ltd.  */
end_comment

begin_class
specifier|public
specifier|abstract
class|class
name|SVNProperties14
extends|extends
name|SVNVersionedProperties
block|{
specifier|private
name|SVNAdminArea14
name|myAdminArea
decl_stmt|;
specifier|private
name|String
name|myEntryName
decl_stmt|;
specifier|public
name|SVNProperties14
parameter_list|(
name|SVNProperties
name|props
parameter_list|,
name|SVNAdminArea14
name|adminArea
parameter_list|,
name|String
name|entryName
parameter_list|)
block|{
name|super
argument_list|(
name|props
argument_list|)
expr_stmt|;
name|myAdminArea
operator|=
name|adminArea
expr_stmt|;
name|myEntryName
operator|=
name|entryName
expr_stmt|;
block|}
specifier|public
name|boolean
name|containsProperty
parameter_list|(
name|String
name|name
parameter_list|)
throws|throws
name|SVNException
block|{
name|SVNProperties
name|propsMap
init|=
name|getProperties
argument_list|()
decl_stmt|;
if|if
condition|(
name|propsMap
operator|!=
literal|null
operator|&&
name|propsMap
operator|.
name|containsName
argument_list|(
name|name
argument_list|)
condition|)
block|{
return|return
literal|true
return|;
block|}
name|SVNEntry
name|entry
init|=
name|myAdminArea
operator|.
name|getEntry
argument_list|(
name|myEntryName
argument_list|,
literal|true
argument_list|)
decl_stmt|;
if|if
condition|(
name|entry
operator|==
literal|null
condition|)
block|{
return|return
literal|false
return|;
block|}
name|String
index|[]
name|cachableProps
init|=
name|entry
operator|.
name|getCachableProperties
argument_list|()
decl_stmt|;
if|if
condition|(
name|cachableProps
operator|!=
literal|null
operator|&&
name|getIndex
argument_list|(
name|cachableProps
argument_list|,
name|name
argument_list|)
operator|>=
literal|0
condition|)
block|{
name|String
index|[]
name|presentProps
init|=
name|entry
operator|.
name|getPresentProperties
argument_list|()
decl_stmt|;
if|if
condition|(
name|presentProps
operator|==
literal|null
operator|||
name|getIndex
argument_list|(
name|presentProps
argument_list|,
name|name
argument_list|)
operator|<
literal|0
condition|)
block|{
return|return
literal|false
return|;
block|}
return|return
literal|true
return|;
block|}
if|if
condition|(
operator|!
name|isEmpty
argument_list|()
condition|)
block|{
name|SVNProperties
name|props
init|=
name|loadProperties
argument_list|()
decl_stmt|;
return|return
name|props
operator|.
name|containsName
argument_list|(
name|name
argument_list|)
return|;
block|}
return|return
literal|false
return|;
block|}
specifier|public
name|SVNPropertyValue
name|getPropertyValue
parameter_list|(
name|String
name|name
parameter_list|)
throws|throws
name|SVNException
block|{
if|if
condition|(
name|getProperties
argument_list|()
operator|!=
literal|null
operator|&&
name|getProperties
argument_list|()
operator|.
name|containsName
argument_list|(
name|name
argument_list|)
condition|)
block|{
return|return
name|getProperties
argument_list|()
operator|.
name|getSVNPropertyValue
argument_list|(
name|name
argument_list|)
return|;
block|}
name|SVNEntry
name|entry
init|=
name|myAdminArea
operator|.
name|getEntry
argument_list|(
name|myEntryName
argument_list|,
literal|true
argument_list|)
decl_stmt|;
if|if
condition|(
name|entry
operator|!=
literal|null
condition|)
block|{
name|String
index|[]
name|cachableProps
init|=
name|entry
operator|.
name|getCachableProperties
argument_list|()
decl_stmt|;
if|if
condition|(
name|cachableProps
operator|!=
literal|null
operator|&&
name|getIndex
argument_list|(
name|cachableProps
argument_list|,
name|name
argument_list|)
operator|>=
literal|0
condition|)
block|{
name|String
index|[]
name|presentProps
init|=
name|entry
operator|.
name|getPresentProperties
argument_list|()
decl_stmt|;
if|if
condition|(
name|presentProps
operator|==
literal|null
operator|||
name|getIndex
argument_list|(
name|presentProps
argument_list|,
name|name
argument_list|)
operator|<
literal|0
condition|)
block|{
return|return
literal|null
return|;
block|}
if|if
condition|(
name|SVNProperty
operator|.
name|isBooleanProperty
argument_list|(
name|name
argument_list|)
condition|)
block|{
return|return
name|SVNProperty
operator|.
name|getValueOfBooleanProperty
argument_list|(
name|name
argument_list|)
return|;
block|}
block|}
block|}
name|SVNProperties
name|props
init|=
name|loadProperties
argument_list|()
decl_stmt|;
if|if
condition|(
operator|!
name|isEmpty
argument_list|()
condition|)
block|{
return|return
name|props
operator|.
name|getSVNPropertyValue
argument_list|(
name|name
argument_list|)
return|;
block|}
return|return
literal|null
return|;
block|}
comment|//TODO: this is not a good approach, however don't want to
comment|//sort the original array to use it with Arrays.binarySearch(),
comment|//since there's a risk to lose the order elements are stored in
comment|//the array and written to the file. Maybe the storage order is
comment|//important for somewhat somewhere...
specifier|private
name|int
name|getIndex
parameter_list|(
name|String
index|[]
name|array
parameter_list|,
name|String
name|element
parameter_list|)
block|{
if|if
condition|(
name|array
operator|==
literal|null
operator|||
name|element
operator|==
literal|null
condition|)
block|{
return|return
operator|-
literal|1
return|;
block|}
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|array
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
if|if
condition|(
name|element
operator|.
name|equals
argument_list|(
name|array
index|[
name|i
index|]
argument_list|)
condition|)
block|{
return|return
name|i
return|;
block|}
block|}
return|return
operator|-
literal|1
return|;
block|}
specifier|protected
name|SVNVersionedProperties
name|wrap
parameter_list|(
name|SVNProperties
name|properties
parameter_list|)
block|{
return|return
operator|new
name|SVNProperties13
argument_list|(
name|properties
argument_list|)
return|;
block|}
block|}
end_class

end_unit

