begin_unit|revision:1.0.0;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * ====================================================================  * Copyright (c) 2004-2010 TMate Software Ltd.  All rights reserved.  *  * This software is licensed as described in the file COPYING, which  * you should have received as part of this distribution.  The terms  * are also available at http://svnkit.com/license.html  * If newer versions of this license are posted there, you may use a  * newer version instead, at your option.  * ====================================================================  */
end_comment

begin_package
package|package
name|org
operator|.
name|exist
operator|.
name|versioning
operator|.
name|svn
operator|.
name|internal
operator|.
name|wc
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|File
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Set
import|;
end_import

begin_import
import|import
name|org
operator|.
name|tmatesoft
operator|.
name|svn
operator|.
name|core
operator|.
name|SVNNodeKind
import|;
end_import

begin_import
import|import
name|org
operator|.
name|tmatesoft
operator|.
name|svn
operator|.
name|core
operator|.
name|internal
operator|.
name|util
operator|.
name|SVNHashSet
import|;
end_import

begin_import
import|import
name|org
operator|.
name|tmatesoft
operator|.
name|svn
operator|.
name|core
operator|.
name|internal
operator|.
name|util
operator|.
name|jna
operator|.
name|SVNJNAUtil
import|;
end_import

begin_import
import|import
name|org
operator|.
name|tmatesoft
operator|.
name|svn
operator|.
name|util
operator|.
name|SVNDebugLog
import|;
end_import

begin_import
import|import
name|org
operator|.
name|tmatesoft
operator|.
name|svn
operator|.
name|util
operator|.
name|SVNLogType
import|;
end_import

begin_comment
comment|/**  * @version 1.3  * @author  TMate Software Ltd.  */
end_comment

begin_class
specifier|public
class|class
name|SVNFileType
block|{
specifier|public
specifier|static
specifier|final
name|SVNFileType
name|UNKNOWN
init|=
operator|new
name|SVNFileType
argument_list|(
literal|0
argument_list|)
decl_stmt|;
specifier|public
specifier|static
specifier|final
name|SVNFileType
name|NONE
init|=
operator|new
name|SVNFileType
argument_list|(
literal|1
argument_list|)
decl_stmt|;
specifier|public
specifier|static
specifier|final
name|SVNFileType
name|FILE
init|=
operator|new
name|SVNFileType
argument_list|(
literal|2
argument_list|)
decl_stmt|;
specifier|public
specifier|static
specifier|final
name|SVNFileType
name|SYMLINK
init|=
operator|new
name|SVNFileType
argument_list|(
literal|3
argument_list|)
decl_stmt|;
specifier|public
specifier|static
specifier|final
name|SVNFileType
name|DIRECTORY
init|=
operator|new
name|SVNFileType
argument_list|(
literal|4
argument_list|)
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|boolean
name|ourFastSymlinkResoution
init|=
operator|!
literal|"false"
operator|.
name|equalsIgnoreCase
argument_list|(
name|System
operator|.
name|getProperty
argument_list|(
literal|"svnkit.fastSymlinkResolution"
argument_list|,
name|System
operator|.
name|getProperty
argument_list|(
literal|"javasvn.fastSymlinkResolution"
argument_list|)
argument_list|)
argument_list|)
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|boolean
name|ourCanonPathCacheUsed
init|=
operator|!
literal|"false"
operator|.
name|equalsIgnoreCase
argument_list|(
name|System
operator|.
name|getProperty
argument_list|(
literal|"sun.io.useCanonCaches"
argument_list|)
argument_list|)
decl_stmt|;
specifier|private
specifier|static
name|boolean
name|ourDetectSymlinks
init|=
operator|!
literal|"false"
operator|.
name|equalsIgnoreCase
argument_list|(
name|System
operator|.
name|getProperty
argument_list|(
literal|"svnkit.symlinks"
argument_list|,
name|System
operator|.
name|getProperty
argument_list|(
literal|"javasvn.symlinks"
argument_list|,
literal|"true"
argument_list|)
argument_list|)
argument_list|)
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|Set
name|ADMIN_FILE_PARENTS
init|=
operator|new
name|SVNHashSet
argument_list|()
decl_stmt|;
static|static
block|{
name|ADMIN_FILE_PARENTS
operator|.
name|add
argument_list|(
literal|"text-base"
argument_list|)
expr_stmt|;
name|ADMIN_FILE_PARENTS
operator|.
name|add
argument_list|(
literal|"prop-base"
argument_list|)
expr_stmt|;
name|ADMIN_FILE_PARENTS
operator|.
name|add
argument_list|(
literal|"props"
argument_list|)
expr_stmt|;
name|ADMIN_FILE_PARENTS
operator|.
name|add
argument_list|(
literal|"wcprops"
argument_list|)
expr_stmt|;
name|ADMIN_FILE_PARENTS
operator|.
name|add
argument_list|(
literal|"tmp"
argument_list|)
expr_stmt|;
block|}
specifier|private
name|int
name|myType
decl_stmt|;
specifier|private
name|SVNFileType
parameter_list|(
name|int
name|type
parameter_list|)
block|{
name|myType
operator|=
name|type
expr_stmt|;
block|}
specifier|public
name|String
name|toString
parameter_list|()
block|{
switch|switch
condition|(
name|myType
condition|)
block|{
case|case
literal|0
case|:
return|return
literal|"unknown"
return|;
case|case
literal|1
case|:
return|return
literal|"none"
return|;
case|case
literal|2
case|:
return|return
literal|"file"
return|;
case|case
literal|3
case|:
return|return
literal|"symlink"
return|;
case|case
literal|4
case|:
return|return
literal|"directory"
return|;
block|}
return|return
name|Integer
operator|.
name|toString
argument_list|(
name|myType
argument_list|)
return|;
block|}
specifier|public
specifier|static
specifier|synchronized
name|void
name|setSymlinkSupportEnabled
parameter_list|(
name|boolean
name|enabled
parameter_list|)
block|{
name|ourDetectSymlinks
operator|=
name|enabled
expr_stmt|;
block|}
specifier|public
specifier|static
specifier|synchronized
name|boolean
name|isSymlinkSupportEnabled
parameter_list|()
block|{
return|return
name|ourDetectSymlinks
return|;
block|}
specifier|public
specifier|static
name|SVNFileType
name|getType
parameter_list|(
name|File
name|file
parameter_list|)
block|{
if|if
condition|(
name|file
operator|==
literal|null
condition|)
return|return
name|SVNFileType
operator|.
name|UNKNOWN
return|;
if|if
condition|(
name|file
operator|.
name|isFile
argument_list|()
condition|)
return|return
name|SVNFileType
operator|.
name|FILE
return|;
if|else if
condition|(
name|file
operator|.
name|isDirectory
argument_list|()
condition|)
return|return
name|SVNFileType
operator|.
name|DIRECTORY
return|;
if|else if
condition|(
operator|!
name|file
operator|.
name|exists
argument_list|()
condition|)
return|return
name|SVNFileType
operator|.
name|NONE
return|;
return|return
name|SVNFileType
operator|.
name|UNKNOWN
return|;
block|}
specifier|public
specifier|static
name|boolean
name|equals
parameter_list|(
name|SVNFileType
name|type
parameter_list|,
name|SVNNodeKind
name|nodeKind
parameter_list|)
block|{
if|if
condition|(
name|nodeKind
operator|==
name|SVNNodeKind
operator|.
name|DIR
condition|)
block|{
return|return
name|type
operator|==
name|SVNFileType
operator|.
name|DIRECTORY
return|;
block|}
if|else if
condition|(
name|nodeKind
operator|==
name|SVNNodeKind
operator|.
name|FILE
condition|)
block|{
return|return
name|type
operator|==
name|SVNFileType
operator|.
name|FILE
operator|||
name|type
operator|==
name|SVNFileType
operator|.
name|SYMLINK
return|;
block|}
if|else if
condition|(
name|nodeKind
operator|==
name|SVNNodeKind
operator|.
name|NONE
condition|)
block|{
return|return
name|type
operator|==
name|SVNFileType
operator|.
name|NONE
return|;
block|}
if|else if
condition|(
name|nodeKind
operator|==
name|SVNNodeKind
operator|.
name|UNKNOWN
condition|)
block|{
return|return
name|type
operator|==
name|SVNFileType
operator|.
name|UNKNOWN
return|;
block|}
return|return
literal|false
return|;
block|}
specifier|private
specifier|static
name|boolean
name|isAdminFile
parameter_list|(
name|File
name|file
parameter_list|)
block|{
name|String
name|path
init|=
name|file
operator|.
name|getAbsolutePath
argument_list|()
operator|.
name|replace
argument_list|(
name|File
operator|.
name|separatorChar
argument_list|,
literal|'/'
argument_list|)
decl_stmt|;
name|String
name|adminDir
init|=
literal|"/"
operator|+
name|SVNFileUtil
operator|.
name|getAdminDirectoryName
argument_list|()
decl_stmt|;
return|return
name|path
operator|.
name|lastIndexOf
argument_list|(
name|adminDir
operator|+
literal|"/"
argument_list|)
operator|>
literal|0
operator|||
name|path
operator|.
name|endsWith
argument_list|(
name|adminDir
argument_list|)
return|;
block|}
specifier|public
name|int
name|getID
parameter_list|()
block|{
return|return
name|myType
return|;
block|}
specifier|public
name|boolean
name|isFile
parameter_list|()
block|{
return|return
name|this
operator|==
name|SVNFileType
operator|.
name|FILE
operator|||
name|this
operator|==
name|SVNFileType
operator|.
name|SYMLINK
return|;
block|}
specifier|public
specifier|static
name|SVNNodeKind
name|getNodeKind
parameter_list|(
name|SVNFileType
name|type
parameter_list|)
block|{
if|if
condition|(
name|type
operator|==
literal|null
operator|||
name|type
operator|==
name|SVNFileType
operator|.
name|NONE
operator|||
name|type
operator|==
name|SVNFileType
operator|.
name|UNKNOWN
condition|)
block|{
return|return
name|SVNNodeKind
operator|.
name|NONE
return|;
block|}
if|else if
condition|(
name|type
operator|==
name|SVNFileType
operator|.
name|DIRECTORY
condition|)
block|{
return|return
name|SVNNodeKind
operator|.
name|DIR
return|;
block|}
return|return
name|SVNNodeKind
operator|.
name|FILE
return|;
block|}
block|}
end_class

end_unit

