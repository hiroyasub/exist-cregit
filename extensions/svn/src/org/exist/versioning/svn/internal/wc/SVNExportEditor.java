begin_unit|revision:1.0.0;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * ====================================================================  * Copyright (c) 2004-2010 TMate Software Ltd.  All rights reserved.  *  * This software is licensed as described in the file COPYING, which  * you should have received as part of this distribution.  The terms  * are also available at http://svnkit.com/license.html  * If newer versions of this license are posted there, you may use a  * newer version instead, at your option.  * ====================================================================  */
end_comment

begin_package
package|package
name|org
operator|.
name|exist
operator|.
name|versioning
operator|.
name|svn
operator|.
name|internal
operator|.
name|wc
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|File
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|OutputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|versioning
operator|.
name|svn
operator|.
name|internal
operator|.
name|wc
operator|.
name|admin
operator|.
name|SVNTranslator
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|versioning
operator|.
name|svn
operator|.
name|wc
operator|.
name|ISVNEventHandler
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|versioning
operator|.
name|svn
operator|.
name|wc
operator|.
name|ISVNOptions
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|versioning
operator|.
name|svn
operator|.
name|wc
operator|.
name|SVNEventAction
import|;
end_import

begin_import
import|import
name|org
operator|.
name|tmatesoft
operator|.
name|svn
operator|.
name|core
operator|.
name|SVNCommitInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|tmatesoft
operator|.
name|svn
operator|.
name|core
operator|.
name|SVNErrorCode
import|;
end_import

begin_import
import|import
name|org
operator|.
name|tmatesoft
operator|.
name|svn
operator|.
name|core
operator|.
name|SVNErrorMessage
import|;
end_import

begin_import
import|import
name|org
operator|.
name|tmatesoft
operator|.
name|svn
operator|.
name|core
operator|.
name|SVNException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|tmatesoft
operator|.
name|svn
operator|.
name|core
operator|.
name|SVNNodeKind
import|;
end_import

begin_import
import|import
name|org
operator|.
name|tmatesoft
operator|.
name|svn
operator|.
name|core
operator|.
name|SVNProperties
import|;
end_import

begin_import
import|import
name|org
operator|.
name|tmatesoft
operator|.
name|svn
operator|.
name|core
operator|.
name|SVNProperty
import|;
end_import

begin_import
import|import
name|org
operator|.
name|tmatesoft
operator|.
name|svn
operator|.
name|core
operator|.
name|SVNPropertyValue
import|;
end_import

begin_import
import|import
name|org
operator|.
name|tmatesoft
operator|.
name|svn
operator|.
name|core
operator|.
name|internal
operator|.
name|util
operator|.
name|SVNDate
import|;
end_import

begin_import
import|import
name|org
operator|.
name|tmatesoft
operator|.
name|svn
operator|.
name|core
operator|.
name|internal
operator|.
name|util
operator|.
name|SVNEncodingUtil
import|;
end_import

begin_import
import|import
name|org
operator|.
name|tmatesoft
operator|.
name|svn
operator|.
name|core
operator|.
name|internal
operator|.
name|util
operator|.
name|SVNHashMap
import|;
end_import

begin_import
import|import
name|org
operator|.
name|tmatesoft
operator|.
name|svn
operator|.
name|core
operator|.
name|internal
operator|.
name|util
operator|.
name|SVNPathUtil
import|;
end_import

begin_import
import|import
name|org
operator|.
name|tmatesoft
operator|.
name|svn
operator|.
name|core
operator|.
name|io
operator|.
name|ISVNEditor
import|;
end_import

begin_import
import|import
name|org
operator|.
name|tmatesoft
operator|.
name|svn
operator|.
name|core
operator|.
name|io
operator|.
name|SVNRepository
import|;
end_import

begin_import
import|import
name|org
operator|.
name|tmatesoft
operator|.
name|svn
operator|.
name|core
operator|.
name|io
operator|.
name|diff
operator|.
name|SVNDeltaProcessor
import|;
end_import

begin_import
import|import
name|org
operator|.
name|tmatesoft
operator|.
name|svn
operator|.
name|core
operator|.
name|io
operator|.
name|diff
operator|.
name|SVNDiffWindow
import|;
end_import

begin_import
import|import
name|org
operator|.
name|tmatesoft
operator|.
name|svn
operator|.
name|util
operator|.
name|SVNLogType
import|;
end_import

begin_comment
comment|/**  * @version 1.3  * @author  TMate Software Ltd.  */
end_comment

begin_class
specifier|public
class|class
name|SVNExportEditor
implements|implements
name|ISVNEditor
block|{
specifier|private
name|File
name|myRoot
decl_stmt|;
specifier|private
name|boolean
name|myIsForce
decl_stmt|;
specifier|private
name|String
name|myEOLStyle
decl_stmt|;
specifier|private
name|File
name|myCurrentDirectory
decl_stmt|;
specifier|private
name|File
name|myCurrentFile
decl_stmt|;
specifier|private
name|File
name|myCurrentTmpFile
decl_stmt|;
specifier|private
name|String
name|myCurrentPath
decl_stmt|;
specifier|private
name|Map
name|myExternals
decl_stmt|;
specifier|private
name|SVNProperties
name|myFileProperties
decl_stmt|;
specifier|private
name|ISVNEventHandler
name|myEventDispatcher
decl_stmt|;
specifier|private
name|String
name|myURL
decl_stmt|;
specifier|private
name|ISVNOptions
name|myOptions
decl_stmt|;
specifier|private
name|SVNDeltaProcessor
name|myDeltaProcessor
decl_stmt|;
specifier|private
name|boolean
name|myIsExpandKeywords
decl_stmt|;
specifier|public
name|SVNExportEditor
parameter_list|(
name|ISVNEventHandler
name|eventDispatcher
parameter_list|,
name|String
name|url
parameter_list|,
name|File
name|dstPath
parameter_list|,
name|boolean
name|force
parameter_list|,
name|String
name|eolStyle
parameter_list|,
name|boolean
name|expandKeywords
parameter_list|,
name|ISVNOptions
name|options
parameter_list|)
block|{
name|myRoot
operator|=
name|dstPath
expr_stmt|;
name|myIsForce
operator|=
name|force
expr_stmt|;
name|myEOLStyle
operator|=
name|eolStyle
expr_stmt|;
name|myExternals
operator|=
operator|new
name|SVNHashMap
argument_list|()
expr_stmt|;
name|myEventDispatcher
operator|=
name|eventDispatcher
expr_stmt|;
name|myURL
operator|=
name|url
expr_stmt|;
name|myDeltaProcessor
operator|=
operator|new
name|SVNDeltaProcessor
argument_list|()
expr_stmt|;
name|myOptions
operator|=
name|options
expr_stmt|;
name|myIsExpandKeywords
operator|=
name|expandKeywords
expr_stmt|;
block|}
specifier|public
name|Map
name|getCollectedExternals
parameter_list|()
block|{
return|return
name|myExternals
return|;
block|}
specifier|public
name|void
name|openRoot
parameter_list|(
name|long
name|revision
parameter_list|)
throws|throws
name|SVNException
block|{
comment|// create root if missing or delete (if force).
name|addDir
argument_list|(
literal|""
argument_list|,
literal|null
argument_list|,
operator|-
literal|1
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|addDir
parameter_list|(
name|String
name|path
parameter_list|,
name|String
name|copyFromPath
parameter_list|,
name|long
name|copyFromRevision
parameter_list|)
throws|throws
name|SVNException
block|{
name|myCurrentDirectory
operator|=
operator|new
name|File
argument_list|(
name|myRoot
argument_list|,
name|path
argument_list|)
expr_stmt|;
name|myCurrentPath
operator|=
name|path
expr_stmt|;
name|SVNFileType
name|dirType
init|=
name|SVNFileType
operator|.
name|getType
argument_list|(
name|myCurrentDirectory
argument_list|)
decl_stmt|;
if|if
condition|(
name|dirType
operator|==
name|SVNFileType
operator|.
name|FILE
operator|||
name|dirType
operator|==
name|SVNFileType
operator|.
name|SYMLINK
condition|)
block|{
comment|// export is obstructed.
if|if
condition|(
operator|!
name|myIsForce
condition|)
block|{
name|SVNErrorMessage
name|err
init|=
name|SVNErrorMessage
operator|.
name|create
argument_list|(
name|SVNErrorCode
operator|.
name|WC_NOT_DIRECTORY
argument_list|,
literal|"''{0}'' exists and is not a directory"
argument_list|,
name|myCurrentDirectory
argument_list|)
decl_stmt|;
name|SVNErrorManager
operator|.
name|error
argument_list|(
name|err
argument_list|,
name|SVNLogType
operator|.
name|WC
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|SVNFileUtil
operator|.
name|deleteAll
argument_list|(
name|myCurrentDirectory
argument_list|,
name|myEventDispatcher
argument_list|)
expr_stmt|;
block|}
block|}
if|else if
condition|(
name|dirType
operator|==
name|SVNFileType
operator|.
name|DIRECTORY
operator|&&
operator|!
name|myIsForce
condition|)
block|{
if|if
condition|(
operator|!
literal|""
operator|.
name|equals
argument_list|(
name|path
argument_list|)
condition|)
block|{
name|SVNErrorMessage
name|err
init|=
name|SVNErrorMessage
operator|.
name|create
argument_list|(
name|SVNErrorCode
operator|.
name|WC_OBSTRUCTED_UPDATE
argument_list|,
literal|"''{0}'' already exists"
argument_list|,
name|myCurrentDirectory
argument_list|)
decl_stmt|;
name|SVNErrorManager
operator|.
name|error
argument_list|(
name|err
argument_list|,
name|SVNLogType
operator|.
name|WC
argument_list|)
expr_stmt|;
block|}
name|File
index|[]
name|children
init|=
name|SVNFileListUtil
operator|.
name|listFiles
argument_list|(
name|myCurrentDirectory
argument_list|)
decl_stmt|;
if|if
condition|(
name|children
operator|!=
literal|null
operator|&&
name|children
operator|.
name|length
operator|>
literal|0
condition|)
block|{
name|SVNErrorMessage
name|err
init|=
name|SVNErrorMessage
operator|.
name|create
argument_list|(
name|SVNErrorCode
operator|.
name|WC_OBSTRUCTED_UPDATE
argument_list|,
literal|"''{0}'' already exists"
argument_list|,
name|myCurrentDirectory
argument_list|)
decl_stmt|;
name|SVNErrorManager
operator|.
name|error
argument_list|(
name|err
argument_list|,
name|SVNLogType
operator|.
name|WC
argument_list|)
expr_stmt|;
block|}
block|}
if|else if
condition|(
name|dirType
operator|==
name|SVNFileType
operator|.
name|NONE
condition|)
block|{
if|if
condition|(
operator|!
name|myCurrentDirectory
operator|.
name|mkdirs
argument_list|()
condition|)
block|{
name|SVNErrorMessage
name|err
init|=
name|SVNErrorMessage
operator|.
name|create
argument_list|(
name|SVNErrorCode
operator|.
name|WC_NOT_DIRECTORY
argument_list|,
literal|"Cannot create directory ''{0}''"
argument_list|,
name|myCurrentDirectory
argument_list|)
decl_stmt|;
name|SVNErrorManager
operator|.
name|error
argument_list|(
name|err
argument_list|,
name|SVNLogType
operator|.
name|WC
argument_list|)
expr_stmt|;
block|}
block|}
name|myEventDispatcher
operator|.
name|handleEvent
argument_list|(
name|SVNEventFactory
operator|.
name|createSVNEvent
argument_list|(
name|myCurrentDirectory
argument_list|,
name|SVNNodeKind
operator|.
name|DIR
argument_list|,
literal|null
argument_list|,
name|SVNRepository
operator|.
name|INVALID_REVISION
argument_list|,
name|SVNEventAction
operator|.
name|UPDATE_ADD
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|)
argument_list|,
name|ISVNEventHandler
operator|.
name|UNKNOWN
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|changeDirProperty
parameter_list|(
name|String
name|name
parameter_list|,
name|SVNPropertyValue
name|value
parameter_list|)
throws|throws
name|SVNException
block|{
if|if
condition|(
name|SVNProperty
operator|.
name|EXTERNALS
operator|.
name|equals
argument_list|(
name|name
argument_list|)
operator|&&
name|value
operator|!=
literal|null
condition|)
block|{
name|myExternals
operator|.
name|put
argument_list|(
name|myCurrentPath
argument_list|,
name|value
operator|.
name|getString
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
specifier|public
name|void
name|closeDir
parameter_list|()
throws|throws
name|SVNException
block|{
name|myCurrentDirectory
operator|=
name|myCurrentDirectory
operator|.
name|getParentFile
argument_list|()
expr_stmt|;
name|myCurrentPath
operator|=
name|SVNPathUtil
operator|.
name|removeTail
argument_list|(
name|myCurrentPath
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|addFile
parameter_list|(
name|String
name|path
parameter_list|,
name|String
name|copyFromPath
parameter_list|,
name|long
name|copyFromRevision
parameter_list|)
throws|throws
name|SVNException
block|{
name|File
name|file
init|=
operator|new
name|File
argument_list|(
name|myRoot
argument_list|,
name|path
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|myIsForce
operator|&&
name|file
operator|.
name|exists
argument_list|()
condition|)
block|{
name|SVNErrorMessage
name|err
init|=
name|SVNErrorMessage
operator|.
name|create
argument_list|(
name|SVNErrorCode
operator|.
name|WC_OBSTRUCTED_UPDATE
argument_list|,
literal|"File ''{0}'' already exists"
argument_list|,
name|file
argument_list|)
decl_stmt|;
name|SVNErrorManager
operator|.
name|error
argument_list|(
name|err
argument_list|,
name|SVNLogType
operator|.
name|WC
argument_list|)
expr_stmt|;
block|}
name|myCurrentFile
operator|=
name|file
expr_stmt|;
name|myFileProperties
operator|=
operator|new
name|SVNProperties
argument_list|()
expr_stmt|;
name|myChecksum
operator|=
literal|null
expr_stmt|;
block|}
specifier|public
name|void
name|changeFileProperty
parameter_list|(
name|String
name|commitPath
parameter_list|,
name|String
name|name
parameter_list|,
name|SVNPropertyValue
name|value
parameter_list|)
throws|throws
name|SVNException
block|{
name|myFileProperties
operator|.
name|put
argument_list|(
name|name
argument_list|,
name|value
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|applyTextDelta
parameter_list|(
name|String
name|commitPath
parameter_list|,
name|String
name|baseChecksum
parameter_list|)
throws|throws
name|SVNException
block|{
name|String
name|name
init|=
name|SVNPathUtil
operator|.
name|tail
argument_list|(
name|commitPath
argument_list|)
decl_stmt|;
name|myCurrentTmpFile
operator|=
name|SVNFileUtil
operator|.
name|createUniqueFile
argument_list|(
name|myCurrentDirectory
argument_list|,
name|name
argument_list|,
literal|".tmp"
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|myDeltaProcessor
operator|.
name|applyTextDelta
argument_list|(
operator|(
name|File
operator|)
literal|null
argument_list|,
name|myCurrentTmpFile
argument_list|,
literal|true
argument_list|)
expr_stmt|;
block|}
specifier|public
name|OutputStream
name|textDeltaChunk
parameter_list|(
name|String
name|commitPath
parameter_list|,
name|SVNDiffWindow
name|diffWindow
parameter_list|)
throws|throws
name|SVNException
block|{
return|return
name|myDeltaProcessor
operator|.
name|textDeltaChunk
argument_list|(
name|diffWindow
argument_list|)
return|;
block|}
specifier|private
name|String
name|myChecksum
decl_stmt|;
specifier|public
name|void
name|textDeltaEnd
parameter_list|(
name|String
name|commitPath
parameter_list|)
throws|throws
name|SVNException
block|{
name|myChecksum
operator|=
name|myDeltaProcessor
operator|.
name|textDeltaEnd
argument_list|()
expr_stmt|;
block|}
specifier|public
name|void
name|closeFile
parameter_list|(
name|String
name|commitPath
parameter_list|,
name|String
name|textChecksum
parameter_list|)
throws|throws
name|SVNException
block|{
if|if
condition|(
name|textChecksum
operator|==
literal|null
condition|)
block|{
name|textChecksum
operator|=
name|myFileProperties
operator|.
name|getStringValue
argument_list|(
name|SVNProperty
operator|.
name|CHECKSUM
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|myIsForce
condition|)
block|{
name|myCurrentFile
operator|.
name|delete
argument_list|()
expr_stmt|;
block|}
name|String
name|realChecksum
init|=
name|myChecksum
operator|!=
literal|null
condition|?
name|myChecksum
else|:
name|SVNFileUtil
operator|.
name|computeChecksum
argument_list|(
name|myCurrentTmpFile
argument_list|)
decl_stmt|;
name|myChecksum
operator|=
literal|null
expr_stmt|;
if|if
condition|(
name|textChecksum
operator|!=
literal|null
operator|&&
operator|!
name|textChecksum
operator|.
name|equals
argument_list|(
name|realChecksum
argument_list|)
condition|)
block|{
name|SVNErrorMessage
name|err
init|=
name|SVNErrorMessage
operator|.
name|create
argument_list|(
name|SVNErrorCode
operator|.
name|CHECKSUM_MISMATCH
argument_list|,
literal|"Checksum mismatch for ''{0}''; expected: ''{1}'', actual: ''{2}''"
argument_list|,
operator|new
name|Object
index|[]
block|{
name|myCurrentFile
block|,
name|textChecksum
block|,
name|realChecksum
block|}
argument_list|)
decl_stmt|;
name|SVNErrorManager
operator|.
name|error
argument_list|(
name|err
argument_list|,
name|SVNLogType
operator|.
name|WC
argument_list|)
expr_stmt|;
block|}
comment|// retranslate.
if|if
condition|(
operator|!
name|myIsExpandKeywords
condition|)
block|{
name|myFileProperties
operator|.
name|put
argument_list|(
name|SVNProperty
operator|.
name|MIME_TYPE
argument_list|,
literal|"application/octet-stream"
argument_list|)
expr_stmt|;
block|}
try|try
block|{
name|String
name|date
init|=
name|myFileProperties
operator|.
name|getStringValue
argument_list|(
name|SVNProperty
operator|.
name|COMMITTED_DATE
argument_list|)
decl_stmt|;
name|boolean
name|special
init|=
name|myFileProperties
operator|.
name|getStringValue
argument_list|(
name|SVNProperty
operator|.
name|SPECIAL
argument_list|)
operator|!=
literal|null
decl_stmt|;
name|boolean
name|binary
init|=
name|SVNProperty
operator|.
name|isBinaryMimeType
argument_list|(
name|myFileProperties
operator|.
name|getStringValue
argument_list|(
name|SVNProperty
operator|.
name|MIME_TYPE
argument_list|)
argument_list|)
decl_stmt|;
name|String
name|keywords
init|=
name|myFileProperties
operator|.
name|getStringValue
argument_list|(
name|SVNProperty
operator|.
name|KEYWORDS
argument_list|)
decl_stmt|;
name|Map
name|keywordsMap
init|=
literal|null
decl_stmt|;
if|if
condition|(
name|keywords
operator|!=
literal|null
condition|)
block|{
name|String
name|url
init|=
name|SVNPathUtil
operator|.
name|append
argument_list|(
name|myURL
argument_list|,
name|SVNEncodingUtil
operator|.
name|uriEncode
argument_list|(
name|myCurrentPath
argument_list|)
argument_list|)
decl_stmt|;
name|url
operator|=
name|SVNPathUtil
operator|.
name|append
argument_list|(
name|url
argument_list|,
name|SVNEncodingUtil
operator|.
name|uriEncode
argument_list|(
name|myCurrentFile
operator|.
name|getName
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|String
name|author
init|=
name|myFileProperties
operator|.
name|getStringValue
argument_list|(
name|SVNProperty
operator|.
name|LAST_AUTHOR
argument_list|)
decl_stmt|;
name|String
name|revStr
init|=
name|myFileProperties
operator|.
name|getStringValue
argument_list|(
name|SVNProperty
operator|.
name|COMMITTED_REVISION
argument_list|)
decl_stmt|;
name|keywordsMap
operator|=
name|SVNTranslator
operator|.
name|computeKeywords
argument_list|(
name|keywords
argument_list|,
name|url
argument_list|,
name|author
argument_list|,
name|date
argument_list|,
name|revStr
argument_list|,
name|myOptions
argument_list|)
expr_stmt|;
block|}
name|String
name|charset
init|=
name|SVNTranslator
operator|.
name|getCharset
argument_list|(
name|myFileProperties
operator|.
name|getStringValue
argument_list|(
name|SVNProperty
operator|.
name|CHARSET
argument_list|)
argument_list|,
name|myCurrentFile
operator|.
name|getPath
argument_list|()
argument_list|,
name|myOptions
argument_list|)
decl_stmt|;
name|byte
index|[]
name|eolBytes
init|=
literal|null
decl_stmt|;
if|if
condition|(
name|SVNProperty
operator|.
name|EOL_STYLE_NATIVE
operator|.
name|equals
argument_list|(
name|myFileProperties
operator|.
name|getStringValue
argument_list|(
name|SVNProperty
operator|.
name|EOL_STYLE
argument_list|)
argument_list|)
condition|)
block|{
name|eolBytes
operator|=
name|SVNTranslator
operator|.
name|getEOL
argument_list|(
name|myEOLStyle
operator|!=
literal|null
condition|?
name|myEOLStyle
else|:
name|myFileProperties
operator|.
name|getStringValue
argument_list|(
name|SVNProperty
operator|.
name|EOL_STYLE
argument_list|)
argument_list|,
name|myOptions
argument_list|)
expr_stmt|;
block|}
if|else if
condition|(
name|myFileProperties
operator|.
name|containsName
argument_list|(
name|SVNProperty
operator|.
name|EOL_STYLE
argument_list|)
condition|)
block|{
name|eolBytes
operator|=
name|SVNTranslator
operator|.
name|getEOL
argument_list|(
name|myFileProperties
operator|.
name|getStringValue
argument_list|(
name|SVNProperty
operator|.
name|EOL_STYLE
argument_list|)
argument_list|,
name|myOptions
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|binary
condition|)
block|{
comment|// no translation unless 'special'.
name|charset
operator|=
literal|null
expr_stmt|;
name|eolBytes
operator|=
literal|null
expr_stmt|;
name|keywordsMap
operator|=
literal|null
expr_stmt|;
block|}
if|if
condition|(
name|charset
operator|!=
literal|null
operator|||
name|eolBytes
operator|!=
literal|null
operator|||
operator|(
name|keywordsMap
operator|!=
literal|null
operator|&&
operator|!
name|keywordsMap
operator|.
name|isEmpty
argument_list|()
operator|)
operator|||
name|special
condition|)
block|{
name|SVNTranslator
operator|.
name|translate
argument_list|(
name|myCurrentTmpFile
argument_list|,
name|myCurrentFile
argument_list|,
name|charset
argument_list|,
name|eolBytes
argument_list|,
name|keywordsMap
argument_list|,
name|special
argument_list|,
literal|true
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|SVNFileUtil
operator|.
name|rename
argument_list|(
name|myCurrentTmpFile
argument_list|,
name|myCurrentFile
argument_list|)
expr_stmt|;
block|}
name|boolean
name|executable
init|=
name|myFileProperties
operator|.
name|getStringValue
argument_list|(
name|SVNProperty
operator|.
name|EXECUTABLE
argument_list|)
operator|!=
literal|null
decl_stmt|;
if|if
condition|(
name|executable
condition|)
block|{
name|SVNFileUtil
operator|.
name|setExecutable
argument_list|(
name|myCurrentFile
argument_list|,
literal|true
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
operator|!
name|special
operator|&&
name|date
operator|!=
literal|null
condition|)
block|{
name|myCurrentFile
operator|.
name|setLastModified
argument_list|(
name|SVNDate
operator|.
name|parseDate
argument_list|(
name|date
argument_list|)
operator|.
name|getTime
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|myEventDispatcher
operator|.
name|handleEvent
argument_list|(
name|SVNEventFactory
operator|.
name|createSVNEvent
argument_list|(
name|myCurrentFile
argument_list|,
name|SVNNodeKind
operator|.
name|FILE
argument_list|,
literal|null
argument_list|,
name|SVNRepository
operator|.
name|INVALID_REVISION
argument_list|,
name|SVNEventAction
operator|.
name|UPDATE_ADD
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|)
argument_list|,
name|ISVNEventHandler
operator|.
name|UNKNOWN
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
name|myCurrentTmpFile
operator|.
name|delete
argument_list|()
expr_stmt|;
block|}
block|}
specifier|public
name|SVNCommitInfo
name|closeEdit
parameter_list|()
throws|throws
name|SVNException
block|{
return|return
literal|null
return|;
block|}
specifier|public
name|void
name|targetRevision
parameter_list|(
name|long
name|revision
parameter_list|)
throws|throws
name|SVNException
block|{
block|}
specifier|public
name|void
name|deleteEntry
parameter_list|(
name|String
name|path
parameter_list|,
name|long
name|revision
parameter_list|)
throws|throws
name|SVNException
block|{
block|}
specifier|public
name|void
name|absentDir
parameter_list|(
name|String
name|path
parameter_list|)
throws|throws
name|SVNException
block|{
block|}
specifier|public
name|void
name|absentFile
parameter_list|(
name|String
name|path
parameter_list|)
throws|throws
name|SVNException
block|{
block|}
specifier|public
name|void
name|openDir
parameter_list|(
name|String
name|path
parameter_list|,
name|long
name|revision
parameter_list|)
throws|throws
name|SVNException
block|{
block|}
specifier|public
name|void
name|openFile
parameter_list|(
name|String
name|path
parameter_list|,
name|long
name|revision
parameter_list|)
throws|throws
name|SVNException
block|{
block|}
specifier|public
name|void
name|abortEdit
parameter_list|()
throws|throws
name|SVNException
block|{
block|}
block|}
end_class

end_unit

