begin_unit|revision:1.0.0;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * ====================================================================  * Copyright (c) 2004-2010 TMate Software Ltd.  All rights reserved.  *  * This software is licensed as described in the file COPYING, which  * you should have received as part of this distribution.  The terms  * are also available at http://svnkit.com/license.html.  * If newer versions of this license are posted there, you may use a  * newer version instead, at your option.  * ====================================================================  */
end_comment

begin_package
package|package
name|org
operator|.
name|exist
operator|.
name|versioning
operator|.
name|svn
operator|.
name|internal
operator|.
name|util
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|File
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|OutputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Arrays
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collection
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collections
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Iterator
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|LinkedList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|TreeMap
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|versioning
operator|.
name|svn
operator|.
name|internal
operator|.
name|wc
operator|.
name|SVNCommitUtil
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|versioning
operator|.
name|svn
operator|.
name|internal
operator|.
name|wc
operator|.
name|SVNErrorManager
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|versioning
operator|.
name|svn
operator|.
name|internal
operator|.
name|wc
operator|.
name|SVNFileUtil
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|versioning
operator|.
name|svn
operator|.
name|internal
operator|.
name|wc
operator|.
name|SVNPropertiesManager
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|versioning
operator|.
name|svn
operator|.
name|internal
operator|.
name|wc
operator|.
name|admin
operator|.
name|SVNWCAccess
import|;
end_import

begin_import
import|import
name|org
operator|.
name|tmatesoft
operator|.
name|svn
operator|.
name|core
operator|.
name|SVNCommitInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|tmatesoft
operator|.
name|svn
operator|.
name|core
operator|.
name|SVNErrorCode
import|;
end_import

begin_import
import|import
name|org
operator|.
name|tmatesoft
operator|.
name|svn
operator|.
name|core
operator|.
name|SVNErrorMessage
import|;
end_import

begin_import
import|import
name|org
operator|.
name|tmatesoft
operator|.
name|svn
operator|.
name|core
operator|.
name|SVNException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|tmatesoft
operator|.
name|svn
operator|.
name|core
operator|.
name|SVNMergeRange
import|;
end_import

begin_import
import|import
name|org
operator|.
name|tmatesoft
operator|.
name|svn
operator|.
name|core
operator|.
name|SVNMergeRangeList
import|;
end_import

begin_import
import|import
name|org
operator|.
name|tmatesoft
operator|.
name|svn
operator|.
name|core
operator|.
name|SVNProperty
import|;
end_import

begin_import
import|import
name|org
operator|.
name|tmatesoft
operator|.
name|svn
operator|.
name|core
operator|.
name|SVNPropertyValue
import|;
end_import

begin_import
import|import
name|org
operator|.
name|tmatesoft
operator|.
name|svn
operator|.
name|core
operator|.
name|internal
operator|.
name|util
operator|.
name|SVNHashMap
import|;
end_import

begin_import
import|import
name|org
operator|.
name|tmatesoft
operator|.
name|svn
operator|.
name|core
operator|.
name|internal
operator|.
name|util
operator|.
name|SVNPathUtil
import|;
end_import

begin_import
import|import
name|org
operator|.
name|tmatesoft
operator|.
name|svn
operator|.
name|core
operator|.
name|internal
operator|.
name|wc
operator|.
name|ISVNCommitPathHandler
import|;
end_import

begin_import
import|import
name|org
operator|.
name|tmatesoft
operator|.
name|svn
operator|.
name|core
operator|.
name|io
operator|.
name|ISVNEditor
import|;
end_import

begin_import
import|import
name|org
operator|.
name|tmatesoft
operator|.
name|svn
operator|.
name|core
operator|.
name|io
operator|.
name|SVNRepository
import|;
end_import

begin_import
import|import
name|org
operator|.
name|tmatesoft
operator|.
name|svn
operator|.
name|core
operator|.
name|io
operator|.
name|diff
operator|.
name|SVNDiffWindow
import|;
end_import

begin_import
import|import
name|org
operator|.
name|tmatesoft
operator|.
name|svn
operator|.
name|core
operator|.
name|wc
operator|.
name|SVNRevision
import|;
end_import

begin_import
import|import
name|org
operator|.
name|tmatesoft
operator|.
name|svn
operator|.
name|util
operator|.
name|SVNLogType
import|;
end_import

begin_comment
comment|/**  * @version 1.3  * @author  TMate Software Ltd.  */
end_comment

begin_class
specifier|public
class|class
name|SVNMergeInfoUtil
block|{
specifier|public
specifier|static
name|Map
name|filterCatalogByRanges
parameter_list|(
name|Map
name|catalog
parameter_list|,
name|long
name|youngestRev
parameter_list|,
name|long
name|oldestRev
parameter_list|)
block|{
name|Map
name|filteredCatalog
init|=
operator|new
name|TreeMap
argument_list|()
decl_stmt|;
for|for
control|(
name|Iterator
name|catalogIter
init|=
name|catalog
operator|.
name|keySet
argument_list|()
operator|.
name|iterator
argument_list|()
init|;
name|catalogIter
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|String
name|path
init|=
operator|(
name|String
operator|)
name|catalogIter
operator|.
name|next
argument_list|()
decl_stmt|;
name|Map
name|mergeInfo
init|=
operator|(
name|Map
operator|)
name|catalog
operator|.
name|get
argument_list|(
name|path
argument_list|)
decl_stmt|;
name|Map
name|filteredMergeInfo
init|=
name|filterMergeInfoByRanges
argument_list|(
name|mergeInfo
argument_list|,
name|youngestRev
argument_list|,
name|oldestRev
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|filteredMergeInfo
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|filteredCatalog
operator|.
name|put
argument_list|(
name|path
argument_list|,
name|filteredMergeInfo
argument_list|)
expr_stmt|;
block|}
block|}
return|return
name|filteredCatalog
return|;
block|}
specifier|public
specifier|static
name|Map
name|filterMergeInfoByRanges
parameter_list|(
name|Map
name|mergeInfo
parameter_list|,
name|long
name|youngestRev
parameter_list|,
name|long
name|oldestRev
parameter_list|)
block|{
name|Map
name|filteredMergeInfo
init|=
operator|new
name|TreeMap
argument_list|()
decl_stmt|;
if|if
condition|(
name|mergeInfo
operator|!=
literal|null
condition|)
block|{
name|SVNMergeRange
name|range
init|=
operator|new
name|SVNMergeRange
argument_list|(
name|oldestRev
argument_list|,
name|youngestRev
argument_list|,
literal|true
argument_list|)
decl_stmt|;
name|SVNMergeRangeList
name|filterRangeList
init|=
operator|new
name|SVNMergeRangeList
argument_list|(
name|range
argument_list|)
decl_stmt|;
for|for
control|(
name|Iterator
name|mergeInfoIter
init|=
name|mergeInfo
operator|.
name|keySet
argument_list|()
operator|.
name|iterator
argument_list|()
init|;
name|mergeInfoIter
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|String
name|path
init|=
operator|(
name|String
operator|)
name|mergeInfoIter
operator|.
name|next
argument_list|()
decl_stmt|;
name|SVNMergeRangeList
name|rangeList
init|=
operator|(
name|SVNMergeRangeList
operator|)
name|mergeInfo
operator|.
name|get
argument_list|(
name|path
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|rangeList
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|SVNMergeRangeList
name|newRangeList
init|=
name|filterRangeList
operator|.
name|intersect
argument_list|(
name|rangeList
argument_list|,
literal|false
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|newRangeList
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|filteredMergeInfo
operator|.
name|put
argument_list|(
name|path
argument_list|,
name|newRangeList
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
return|return
name|filteredMergeInfo
return|;
block|}
specifier|public
specifier|static
name|long
index|[]
name|getRangeEndPoints
parameter_list|(
name|Map
name|mergeInfo
parameter_list|)
block|{
comment|//long[] { youngestRange, oldestRange }
name|long
index|[]
name|rangePoints
init|=
block|{
name|SVNRepository
operator|.
name|INVALID_REVISION
block|,
name|SVNRepository
operator|.
name|INVALID_REVISION
block|}
decl_stmt|;
if|if
condition|(
name|mergeInfo
operator|!=
literal|null
condition|)
block|{
for|for
control|(
name|Iterator
name|mergeInfoIter
init|=
name|mergeInfo
operator|.
name|keySet
argument_list|()
operator|.
name|iterator
argument_list|()
init|;
name|mergeInfoIter
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|String
name|path
init|=
operator|(
name|String
operator|)
name|mergeInfoIter
operator|.
name|next
argument_list|()
decl_stmt|;
name|SVNMergeRangeList
name|rangeList
init|=
operator|(
name|SVNMergeRangeList
operator|)
name|mergeInfo
operator|.
name|get
argument_list|(
name|path
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|rangeList
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|SVNMergeRange
index|[]
name|ranges
init|=
name|rangeList
operator|.
name|getRanges
argument_list|()
decl_stmt|;
name|SVNMergeRange
name|range
init|=
name|ranges
index|[
name|ranges
operator|.
name|length
operator|-
literal|1
index|]
decl_stmt|;
if|if
condition|(
operator|!
name|SVNRevision
operator|.
name|isValidRevisionNumber
argument_list|(
name|rangePoints
index|[
literal|0
index|]
argument_list|)
operator|||
name|range
operator|.
name|getEndRevision
argument_list|()
operator|>
name|rangePoints
index|[
literal|0
index|]
condition|)
block|{
name|rangePoints
index|[
literal|0
index|]
operator|=
name|range
operator|.
name|getEndRevision
argument_list|()
expr_stmt|;
block|}
name|range
operator|=
name|ranges
index|[
literal|0
index|]
expr_stmt|;
if|if
condition|(
operator|!
name|SVNRevision
operator|.
name|isValidRevisionNumber
argument_list|(
name|rangePoints
index|[
literal|1
index|]
argument_list|)
operator|||
name|rangePoints
index|[
literal|1
index|]
operator|>
name|range
operator|.
name|getStartRevision
argument_list|()
condition|)
block|{
name|rangePoints
index|[
literal|1
index|]
operator|=
name|range
operator|.
name|getStartRevision
argument_list|()
expr_stmt|;
block|}
block|}
block|}
block|}
return|return
name|rangePoints
return|;
block|}
specifier|public
specifier|static
name|Map
name|elideMergeInfoCatalog
parameter_list|(
name|Map
name|mergeInfoCatalog
parameter_list|)
throws|throws
name|SVNException
block|{
name|Map
name|adjustedMergeInfoCatalog
init|=
operator|new
name|TreeMap
argument_list|()
decl_stmt|;
for|for
control|(
name|Iterator
name|pathsIter
init|=
name|mergeInfoCatalog
operator|.
name|keySet
argument_list|()
operator|.
name|iterator
argument_list|()
init|;
name|pathsIter
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|String
name|path
init|=
operator|(
name|String
operator|)
name|pathsIter
operator|.
name|next
argument_list|()
decl_stmt|;
name|String
name|adjustedPath
init|=
name|path
decl_stmt|;
if|if
condition|(
name|path
operator|.
name|startsWith
argument_list|(
literal|"/"
argument_list|)
condition|)
block|{
name|adjustedPath
operator|=
name|path
operator|.
name|substring
argument_list|(
literal|1
argument_list|)
expr_stmt|;
block|}
name|adjustedMergeInfoCatalog
operator|.
name|put
argument_list|(
name|adjustedPath
argument_list|,
name|mergeInfoCatalog
operator|.
name|get
argument_list|(
name|path
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|mergeInfoCatalog
operator|=
name|adjustedMergeInfoCatalog
expr_stmt|;
name|ElideMergeInfoCatalogHandler
name|handler
init|=
operator|new
name|ElideMergeInfoCatalogHandler
argument_list|(
name|mergeInfoCatalog
argument_list|)
decl_stmt|;
name|ElideMergeInfoEditor
name|editor
init|=
operator|new
name|ElideMergeInfoEditor
argument_list|(
name|mergeInfoCatalog
argument_list|)
decl_stmt|;
name|SVNCommitUtil
operator|.
name|driveCommitEditor
argument_list|(
name|handler
argument_list|,
name|mergeInfoCatalog
operator|.
name|keySet
argument_list|()
argument_list|,
name|editor
argument_list|,
operator|-
literal|1
argument_list|)
expr_stmt|;
name|List
name|elidablePaths
init|=
name|handler
operator|.
name|getElidablePaths
argument_list|()
decl_stmt|;
for|for
control|(
name|Iterator
name|elidablePathsIter
init|=
name|elidablePaths
operator|.
name|iterator
argument_list|()
init|;
name|elidablePathsIter
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|String
name|elidablePath
init|=
operator|(
name|String
operator|)
name|elidablePathsIter
operator|.
name|next
argument_list|()
decl_stmt|;
name|mergeInfoCatalog
operator|.
name|remove
argument_list|(
name|elidablePath
argument_list|)
expr_stmt|;
block|}
name|adjustedMergeInfoCatalog
operator|=
operator|new
name|TreeMap
argument_list|()
expr_stmt|;
for|for
control|(
name|Iterator
name|pathsIter
init|=
name|mergeInfoCatalog
operator|.
name|keySet
argument_list|()
operator|.
name|iterator
argument_list|()
init|;
name|pathsIter
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|String
name|path
init|=
operator|(
name|String
operator|)
name|pathsIter
operator|.
name|next
argument_list|()
decl_stmt|;
name|String
name|adjustedPath
init|=
name|path
decl_stmt|;
if|if
condition|(
operator|!
name|path
operator|.
name|startsWith
argument_list|(
literal|"/"
argument_list|)
condition|)
block|{
name|adjustedPath
operator|=
literal|"/"
operator|+
name|adjustedPath
expr_stmt|;
block|}
name|adjustedMergeInfoCatalog
operator|.
name|put
argument_list|(
name|adjustedPath
argument_list|,
name|mergeInfoCatalog
operator|.
name|get
argument_list|(
name|path
argument_list|)
argument_list|)
expr_stmt|;
block|}
return|return
name|adjustedMergeInfoCatalog
return|;
block|}
specifier|public
specifier|static
name|Map
name|adjustMergeInfoSourcePaths
parameter_list|(
name|Map
name|mergeInfo
parameter_list|,
name|String
name|walkPath
parameter_list|,
name|Map
name|wcMergeInfo
parameter_list|)
block|{
name|mergeInfo
operator|=
name|mergeInfo
operator|==
literal|null
condition|?
operator|new
name|TreeMap
argument_list|()
else|:
name|mergeInfo
expr_stmt|;
for|for
control|(
name|Iterator
name|paths
init|=
name|wcMergeInfo
operator|.
name|keySet
argument_list|()
operator|.
name|iterator
argument_list|()
init|;
name|paths
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|String
name|srcMergePath
init|=
operator|(
name|String
operator|)
name|paths
operator|.
name|next
argument_list|()
decl_stmt|;
name|SVNMergeRangeList
name|rangeList
init|=
operator|(
name|SVNMergeRangeList
operator|)
name|wcMergeInfo
operator|.
name|get
argument_list|(
name|srcMergePath
argument_list|)
decl_stmt|;
name|mergeInfo
operator|.
name|put
argument_list|(
name|SVNPathUtil
operator|.
name|getAbsolutePath
argument_list|(
name|SVNPathUtil
operator|.
name|append
argument_list|(
name|srcMergePath
argument_list|,
name|walkPath
argument_list|)
argument_list|)
argument_list|,
name|rangeList
argument_list|)
expr_stmt|;
block|}
return|return
name|mergeInfo
return|;
block|}
specifier|public
specifier|static
name|boolean
name|removeEmptyRangeLists
parameter_list|(
name|Map
name|mergeInfo
parameter_list|)
block|{
name|boolean
name|removedSomeRanges
init|=
literal|false
decl_stmt|;
if|if
condition|(
name|mergeInfo
operator|!=
literal|null
condition|)
block|{
for|for
control|(
name|Iterator
name|mergeInfoIter
init|=
name|mergeInfo
operator|.
name|entrySet
argument_list|()
operator|.
name|iterator
argument_list|()
init|;
name|mergeInfoIter
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|Map
operator|.
name|Entry
name|mergeInfoEntry
init|=
operator|(
name|Map
operator|.
name|Entry
operator|)
name|mergeInfoIter
operator|.
name|next
argument_list|()
decl_stmt|;
name|SVNMergeRangeList
name|rangeList
init|=
operator|(
name|SVNMergeRangeList
operator|)
name|mergeInfoEntry
operator|.
name|getValue
argument_list|()
decl_stmt|;
if|if
condition|(
name|rangeList
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|mergeInfoIter
operator|.
name|remove
argument_list|()
expr_stmt|;
name|removedSomeRanges
operator|=
literal|true
expr_stmt|;
block|}
block|}
block|}
return|return
name|removedSomeRanges
return|;
block|}
specifier|public
specifier|static
name|Map
name|mergeMergeInfos
parameter_list|(
name|Map
name|originalSrcsToRangeLists
parameter_list|,
name|Map
name|changedSrcsToRangeLists
parameter_list|)
throws|throws
name|SVNException
block|{
name|originalSrcsToRangeLists
operator|=
name|originalSrcsToRangeLists
operator|==
literal|null
condition|?
operator|new
name|TreeMap
argument_list|()
else|:
name|originalSrcsToRangeLists
expr_stmt|;
name|changedSrcsToRangeLists
operator|=
name|changedSrcsToRangeLists
operator|==
literal|null
condition|?
name|Collections
operator|.
name|EMPTY_MAP
else|:
name|changedSrcsToRangeLists
expr_stmt|;
name|String
index|[]
name|paths1
init|=
operator|(
name|String
index|[]
operator|)
name|originalSrcsToRangeLists
operator|.
name|keySet
argument_list|()
operator|.
name|toArray
argument_list|(
operator|new
name|String
index|[
name|originalSrcsToRangeLists
operator|.
name|size
argument_list|()
index|]
argument_list|)
decl_stmt|;
name|String
index|[]
name|paths2
init|=
operator|(
name|String
index|[]
operator|)
name|changedSrcsToRangeLists
operator|.
name|keySet
argument_list|()
operator|.
name|toArray
argument_list|(
operator|new
name|String
index|[
name|changedSrcsToRangeLists
operator|.
name|size
argument_list|()
index|]
argument_list|)
decl_stmt|;
name|int
name|i
init|=
literal|0
decl_stmt|;
name|int
name|j
init|=
literal|0
decl_stmt|;
while|while
condition|(
name|i
operator|<
name|paths1
operator|.
name|length
operator|&&
name|j
operator|<
name|paths2
operator|.
name|length
condition|)
block|{
name|String
name|path1
init|=
name|paths1
index|[
name|i
index|]
decl_stmt|;
name|String
name|path2
init|=
name|paths2
index|[
name|j
index|]
decl_stmt|;
name|int
name|res
init|=
name|path1
operator|.
name|compareTo
argument_list|(
name|path2
argument_list|)
decl_stmt|;
if|if
condition|(
name|res
operator|==
literal|0
condition|)
block|{
name|SVNMergeRangeList
name|rangeList1
init|=
operator|(
name|SVNMergeRangeList
operator|)
name|originalSrcsToRangeLists
operator|.
name|get
argument_list|(
name|path1
argument_list|)
decl_stmt|;
name|SVNMergeRangeList
name|rangeList2
init|=
operator|(
name|SVNMergeRangeList
operator|)
name|changedSrcsToRangeLists
operator|.
name|get
argument_list|(
name|path2
argument_list|)
decl_stmt|;
name|rangeList1
operator|=
name|rangeList1
operator|.
name|merge
argument_list|(
name|rangeList2
argument_list|)
expr_stmt|;
name|originalSrcsToRangeLists
operator|.
name|put
argument_list|(
name|path1
argument_list|,
name|rangeList1
argument_list|)
expr_stmt|;
name|i
operator|++
expr_stmt|;
name|j
operator|++
expr_stmt|;
block|}
if|else if
condition|(
name|res
operator|<
literal|0
condition|)
block|{
name|i
operator|++
expr_stmt|;
block|}
else|else
block|{
name|originalSrcsToRangeLists
operator|.
name|put
argument_list|(
name|path2
argument_list|,
name|changedSrcsToRangeLists
operator|.
name|get
argument_list|(
name|path2
argument_list|)
argument_list|)
expr_stmt|;
name|j
operator|++
expr_stmt|;
block|}
block|}
for|for
control|(
init|;
name|j
operator|<
name|paths2
operator|.
name|length
condition|;
name|j
operator|++
control|)
block|{
name|String
name|path
init|=
name|paths2
index|[
name|j
index|]
decl_stmt|;
name|originalSrcsToRangeLists
operator|.
name|put
argument_list|(
name|path
argument_list|,
name|changedSrcsToRangeLists
operator|.
name|get
argument_list|(
name|path
argument_list|)
argument_list|)
expr_stmt|;
block|}
return|return
name|originalSrcsToRangeLists
return|;
block|}
specifier|public
specifier|static
name|String
name|combineMergeInfoProperties
parameter_list|(
name|String
name|propValue1
parameter_list|,
name|String
name|propValue2
parameter_list|)
throws|throws
name|SVNException
block|{
name|Map
name|srcsToRanges1
init|=
name|parseMergeInfo
argument_list|(
operator|new
name|StringBuffer
argument_list|(
name|propValue1
argument_list|)
argument_list|,
literal|null
argument_list|)
decl_stmt|;
name|Map
name|srcsToRanges2
init|=
name|parseMergeInfo
argument_list|(
operator|new
name|StringBuffer
argument_list|(
name|propValue2
argument_list|)
argument_list|,
literal|null
argument_list|)
decl_stmt|;
name|srcsToRanges1
operator|=
name|mergeMergeInfos
argument_list|(
name|srcsToRanges1
argument_list|,
name|srcsToRanges2
argument_list|)
expr_stmt|;
return|return
name|formatMergeInfoToString
argument_list|(
name|srcsToRanges1
argument_list|,
literal|null
argument_list|)
return|;
block|}
specifier|public
specifier|static
name|String
name|combineForkedMergeInfoProperties
parameter_list|(
name|String
name|fromPropValue
parameter_list|,
name|String
name|workingPropValue
parameter_list|,
name|String
name|toPropValue
parameter_list|)
throws|throws
name|SVNException
block|{
name|Map
name|leftDeleted
init|=
operator|new
name|TreeMap
argument_list|()
decl_stmt|;
name|Map
name|leftAdded
init|=
operator|new
name|TreeMap
argument_list|()
decl_stmt|;
name|Map
name|fromMergeInfo
init|=
name|parseMergeInfo
argument_list|(
operator|new
name|StringBuffer
argument_list|(
name|fromPropValue
argument_list|)
argument_list|,
literal|null
argument_list|)
decl_stmt|;
name|diffMergeInfoProperties
argument_list|(
name|leftDeleted
argument_list|,
name|leftAdded
argument_list|,
literal|null
argument_list|,
name|fromMergeInfo
argument_list|,
name|workingPropValue
argument_list|,
literal|null
argument_list|)
expr_stmt|;
name|Map
name|rightDeleted
init|=
operator|new
name|TreeMap
argument_list|()
decl_stmt|;
name|Map
name|rightAdded
init|=
operator|new
name|TreeMap
argument_list|()
decl_stmt|;
name|diffMergeInfoProperties
argument_list|(
name|rightDeleted
argument_list|,
name|rightAdded
argument_list|,
name|fromPropValue
argument_list|,
literal|null
argument_list|,
name|toPropValue
argument_list|,
literal|null
argument_list|)
expr_stmt|;
name|leftDeleted
operator|=
name|mergeMergeInfos
argument_list|(
name|leftDeleted
argument_list|,
name|rightDeleted
argument_list|)
expr_stmt|;
name|leftAdded
operator|=
name|mergeMergeInfos
argument_list|(
name|leftAdded
argument_list|,
name|rightAdded
argument_list|)
expr_stmt|;
name|fromMergeInfo
operator|=
name|mergeMergeInfos
argument_list|(
name|fromMergeInfo
argument_list|,
name|leftAdded
argument_list|)
expr_stmt|;
name|Map
name|result
init|=
name|removeMergeInfo
argument_list|(
name|leftDeleted
argument_list|,
name|fromMergeInfo
argument_list|)
decl_stmt|;
return|return
name|formatMergeInfoToString
argument_list|(
name|result
argument_list|,
literal|null
argument_list|)
return|;
block|}
specifier|public
specifier|static
name|void
name|diffMergeInfoProperties
parameter_list|(
name|Map
name|deleted
parameter_list|,
name|Map
name|added
parameter_list|,
name|String
name|fromPropValue
parameter_list|,
name|Map
name|fromMergeInfo
parameter_list|,
name|String
name|toPropValue
parameter_list|,
name|Map
name|toMergeInfo
parameter_list|)
throws|throws
name|SVNException
block|{
if|if
condition|(
name|fromPropValue
operator|!=
literal|null
operator|&&
name|fromPropValue
operator|.
name|equals
argument_list|(
name|toPropValue
argument_list|)
condition|)
block|{
return|return;
block|}
name|fromMergeInfo
operator|=
name|fromMergeInfo
operator|==
literal|null
condition|?
name|parseMergeInfo
argument_list|(
operator|new
name|StringBuffer
argument_list|(
name|fromPropValue
argument_list|)
argument_list|,
literal|null
argument_list|)
else|:
name|fromMergeInfo
expr_stmt|;
name|toMergeInfo
operator|=
name|toMergeInfo
operator|==
literal|null
condition|?
name|parseMergeInfo
argument_list|(
operator|new
name|StringBuffer
argument_list|(
name|toPropValue
argument_list|)
argument_list|,
literal|null
argument_list|)
else|:
name|toMergeInfo
expr_stmt|;
name|diffMergeInfo
argument_list|(
name|deleted
argument_list|,
name|added
argument_list|,
name|fromMergeInfo
argument_list|,
name|toMergeInfo
argument_list|,
literal|true
argument_list|)
expr_stmt|;
block|}
specifier|public
specifier|static
name|void
name|diffMergeInfo
parameter_list|(
name|Map
name|deleted
parameter_list|,
name|Map
name|added
parameter_list|,
name|Map
name|from
parameter_list|,
name|Map
name|to
parameter_list|,
name|boolean
name|considerInheritance
parameter_list|)
block|{
name|from
operator|=
name|from
operator|==
literal|null
condition|?
name|Collections
operator|.
name|EMPTY_MAP
else|:
name|from
expr_stmt|;
name|to
operator|=
name|to
operator|==
literal|null
condition|?
name|Collections
operator|.
name|EMPTY_MAP
else|:
name|to
expr_stmt|;
if|if
condition|(
operator|!
name|from
operator|.
name|isEmpty
argument_list|()
operator|&&
name|to
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|dupMergeInfo
argument_list|(
name|from
argument_list|,
name|deleted
argument_list|)
expr_stmt|;
block|}
if|else if
condition|(
name|from
operator|.
name|isEmpty
argument_list|()
operator|&&
operator|!
name|to
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|dupMergeInfo
argument_list|(
name|to
argument_list|,
name|added
argument_list|)
expr_stmt|;
block|}
if|else if
condition|(
operator|!
name|from
operator|.
name|isEmpty
argument_list|()
operator|&&
operator|!
name|to
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|walkMergeInfoHashForDiff
argument_list|(
name|deleted
argument_list|,
name|added
argument_list|,
name|from
argument_list|,
name|to
argument_list|,
name|considerInheritance
argument_list|)
expr_stmt|;
block|}
block|}
specifier|public
specifier|static
name|Map
name|dupCatalog
parameter_list|(
name|Map
name|catalog
parameter_list|)
block|{
name|Map
name|newMergeInfoCatalog
init|=
operator|new
name|TreeMap
argument_list|()
decl_stmt|;
for|for
control|(
name|Iterator
name|catalogIter
init|=
name|catalog
operator|.
name|keySet
argument_list|()
operator|.
name|iterator
argument_list|()
init|;
name|catalogIter
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|String
name|path
init|=
operator|(
name|String
operator|)
name|catalogIter
operator|.
name|next
argument_list|()
decl_stmt|;
name|Map
name|mergeInfo
init|=
operator|(
name|Map
operator|)
name|catalog
operator|.
name|get
argument_list|(
name|path
argument_list|)
decl_stmt|;
name|Map
name|mergeInfoCopy
init|=
name|dupMergeInfo
argument_list|(
name|mergeInfo
argument_list|,
literal|null
argument_list|)
decl_stmt|;
name|newMergeInfoCatalog
operator|.
name|put
argument_list|(
name|path
argument_list|,
name|mergeInfoCopy
argument_list|)
expr_stmt|;
block|}
return|return
name|newMergeInfoCatalog
return|;
block|}
specifier|public
specifier|static
name|Map
name|dupMergeInfo
parameter_list|(
name|Map
name|srcsToRangeLists
parameter_list|,
name|Map
name|target
parameter_list|)
block|{
if|if
condition|(
name|srcsToRangeLists
operator|==
literal|null
condition|)
block|{
return|return
literal|null
return|;
block|}
name|target
operator|=
name|target
operator|==
literal|null
condition|?
operator|new
name|TreeMap
argument_list|()
else|:
name|target
expr_stmt|;
for|for
control|(
name|Iterator
name|paths
init|=
name|srcsToRangeLists
operator|.
name|keySet
argument_list|()
operator|.
name|iterator
argument_list|()
init|;
name|paths
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|String
name|path
init|=
operator|(
name|String
operator|)
name|paths
operator|.
name|next
argument_list|()
decl_stmt|;
name|SVNMergeRangeList
name|rangeList
init|=
operator|(
name|SVNMergeRangeList
operator|)
name|srcsToRangeLists
operator|.
name|get
argument_list|(
name|path
argument_list|)
decl_stmt|;
name|target
operator|.
name|put
argument_list|(
name|path
argument_list|,
name|rangeList
operator|.
name|dup
argument_list|()
argument_list|)
expr_stmt|;
block|}
return|return
name|target
return|;
block|}
specifier|public
specifier|static
name|Map
name|parseMergeInfo
parameter_list|(
name|StringBuffer
name|mergeInfo
parameter_list|,
name|Map
name|srcPathsToRangeLists
parameter_list|)
throws|throws
name|SVNException
block|{
name|srcPathsToRangeLists
operator|=
name|srcPathsToRangeLists
operator|==
literal|null
condition|?
operator|new
name|TreeMap
argument_list|()
else|:
name|srcPathsToRangeLists
expr_stmt|;
if|if
condition|(
name|mergeInfo
operator|.
name|length
argument_list|()
operator|==
literal|0
condition|)
block|{
return|return
name|srcPathsToRangeLists
return|;
block|}
try|try
block|{
while|while
condition|(
name|mergeInfo
operator|.
name|length
argument_list|()
operator|>
literal|0
condition|)
block|{
name|int
name|eolInd
init|=
name|mergeInfo
operator|.
name|indexOf
argument_list|(
literal|"\n"
argument_list|)
decl_stmt|;
name|eolInd
operator|=
name|eolInd
operator|<
literal|0
condition|?
name|mergeInfo
operator|.
name|length
argument_list|()
operator|-
literal|1
else|:
name|eolInd
expr_stmt|;
name|int
name|ind
init|=
name|mergeInfo
operator|.
name|lastIndexOf
argument_list|(
literal|":"
argument_list|,
name|eolInd
argument_list|)
decl_stmt|;
if|if
condition|(
name|ind
operator|==
operator|-
literal|1
condition|)
block|{
name|SVNErrorMessage
name|err
init|=
name|SVNErrorMessage
operator|.
name|create
argument_list|(
name|SVNErrorCode
operator|.
name|MERGE_INFO_PARSE_ERROR
argument_list|,
literal|"Pathname not terminated by ':'"
argument_list|)
decl_stmt|;
name|SVNErrorManager
operator|.
name|error
argument_list|(
name|err
argument_list|,
name|SVNLogType
operator|.
name|DEFAULT
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|ind
operator|==
literal|0
condition|)
block|{
name|SVNErrorMessage
name|err
init|=
name|SVNErrorMessage
operator|.
name|create
argument_list|(
name|SVNErrorCode
operator|.
name|MERGE_INFO_PARSE_ERROR
argument_list|,
literal|"No pathname preceding ':'"
argument_list|)
decl_stmt|;
name|SVNErrorManager
operator|.
name|error
argument_list|(
name|err
argument_list|,
name|SVNLogType
operator|.
name|DEFAULT
argument_list|)
expr_stmt|;
block|}
name|String
name|path
init|=
literal|null
decl_stmt|;
if|if
condition|(
name|mergeInfo
operator|.
name|charAt
argument_list|(
literal|0
argument_list|)
operator|==
literal|'/'
condition|)
block|{
name|path
operator|=
name|mergeInfo
operator|.
name|substring
argument_list|(
literal|0
argument_list|,
name|ind
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|String
name|relativePath
init|=
name|mergeInfo
operator|.
name|substring
argument_list|(
literal|0
argument_list|,
name|ind
argument_list|)
decl_stmt|;
name|path
operator|=
literal|"/"
operator|+
name|relativePath
expr_stmt|;
block|}
name|mergeInfo
operator|=
name|mergeInfo
operator|.
name|delete
argument_list|(
literal|0
argument_list|,
name|ind
operator|+
literal|1
argument_list|)
expr_stmt|;
name|SVNMergeRange
index|[]
name|ranges
init|=
name|parseRevisionList
argument_list|(
name|mergeInfo
argument_list|,
name|path
argument_list|)
decl_stmt|;
if|if
condition|(
name|mergeInfo
operator|.
name|length
argument_list|()
operator|!=
literal|0
operator|&&
name|mergeInfo
operator|.
name|charAt
argument_list|(
literal|0
argument_list|)
operator|!=
literal|'\n'
condition|)
block|{
name|SVNErrorMessage
name|err
init|=
name|SVNErrorMessage
operator|.
name|create
argument_list|(
name|SVNErrorCode
operator|.
name|MERGE_INFO_PARSE_ERROR
argument_list|,
literal|"Could not find end of line in range list line in ''{0}''"
argument_list|,
name|mergeInfo
argument_list|)
decl_stmt|;
name|SVNErrorManager
operator|.
name|error
argument_list|(
name|err
argument_list|,
name|SVNLogType
operator|.
name|DEFAULT
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|mergeInfo
operator|.
name|length
argument_list|()
operator|>
literal|0
condition|)
block|{
name|mergeInfo
operator|=
name|mergeInfo
operator|.
name|deleteCharAt
argument_list|(
literal|0
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|ranges
operator|.
name|length
operator|>
literal|1
condition|)
block|{
name|Arrays
operator|.
name|sort
argument_list|(
name|ranges
argument_list|)
expr_stmt|;
name|SVNMergeRange
name|lastRange
init|=
name|ranges
index|[
literal|0
index|]
decl_stmt|;
name|Collection
name|newRanges
init|=
operator|new
name|ArrayList
argument_list|()
decl_stmt|;
name|newRanges
operator|.
name|add
argument_list|(
name|lastRange
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|1
init|;
name|i
operator|<
name|ranges
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
name|SVNMergeRange
name|range
init|=
name|ranges
index|[
name|i
index|]
decl_stmt|;
if|if
condition|(
name|lastRange
operator|.
name|getStartRevision
argument_list|()
operator|<=
name|range
operator|.
name|getEndRevision
argument_list|()
operator|&&
name|range
operator|.
name|getStartRevision
argument_list|()
operator|<=
name|lastRange
operator|.
name|getEndRevision
argument_list|()
condition|)
block|{
if|if
condition|(
name|range
operator|.
name|getStartRevision
argument_list|()
operator|<
name|lastRange
operator|.
name|getEndRevision
argument_list|()
operator|&&
name|range
operator|.
name|isInheritable
argument_list|()
operator|!=
name|lastRange
operator|.
name|isInheritable
argument_list|()
condition|)
block|{
comment|// error.
name|String
name|r1
init|=
name|lastRange
operator|.
name|toString
argument_list|()
decl_stmt|;
name|String
name|r2
init|=
name|range
operator|.
name|toString
argument_list|()
decl_stmt|;
name|SVNErrorMessage
name|err
init|=
name|SVNErrorMessage
operator|.
name|create
argument_list|(
name|SVNErrorCode
operator|.
name|MERGE_INFO_PARSE_ERROR
argument_list|,
literal|"Unable to parse overlapping revision ranges ''{0}'' and ''{1}'' with different inheritance types"
argument_list|,
operator|new
name|Object
index|[]
block|{
name|r1
block|,
name|r2
block|}
argument_list|)
decl_stmt|;
name|SVNErrorManager
operator|.
name|error
argument_list|(
name|err
argument_list|,
name|SVNLogType
operator|.
name|WC
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|lastRange
operator|.
name|isInheritable
argument_list|()
operator|==
name|range
operator|.
name|isInheritable
argument_list|()
condition|)
block|{
name|lastRange
operator|.
name|setEndRevision
argument_list|(
name|Math
operator|.
name|max
argument_list|(
name|range
operator|.
name|getEndRevision
argument_list|()
argument_list|,
name|lastRange
operator|.
name|getEndRevision
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
continue|continue;
block|}
block|}
name|newRanges
operator|.
name|add
argument_list|(
name|ranges
index|[
name|i
index|]
argument_list|)
expr_stmt|;
name|lastRange
operator|=
name|ranges
index|[
name|i
index|]
expr_stmt|;
block|}
name|ranges
operator|=
operator|(
name|SVNMergeRange
index|[]
operator|)
name|newRanges
operator|.
name|toArray
argument_list|(
operator|new
name|SVNMergeRange
index|[
name|newRanges
operator|.
name|size
argument_list|()
index|]
argument_list|)
expr_stmt|;
block|}
name|SVNMergeRangeList
name|existingRange
init|=
operator|(
name|SVNMergeRangeList
operator|)
name|srcPathsToRangeLists
operator|.
name|get
argument_list|(
name|path
argument_list|)
decl_stmt|;
if|if
condition|(
name|existingRange
operator|!=
literal|null
condition|)
block|{
name|ranges
operator|=
name|existingRange
operator|.
name|merge
argument_list|(
operator|new
name|SVNMergeRangeList
argument_list|(
name|ranges
argument_list|)
argument_list|)
operator|.
name|getRanges
argument_list|()
expr_stmt|;
block|}
name|srcPathsToRangeLists
operator|.
name|put
argument_list|(
name|path
argument_list|,
operator|new
name|SVNMergeRangeList
argument_list|(
name|ranges
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
name|SVNException
name|svne
parameter_list|)
block|{
if|if
condition|(
name|svne
operator|.
name|getErrorMessage
argument_list|()
operator|.
name|getErrorCode
argument_list|()
operator|!=
name|SVNErrorCode
operator|.
name|MERGE_INFO_PARSE_ERROR
condition|)
block|{
name|SVNErrorMessage
name|err
init|=
name|SVNErrorMessage
operator|.
name|create
argument_list|(
name|SVNErrorCode
operator|.
name|MERGE_INFO_PARSE_ERROR
argument_list|,
literal|"Could not parse mergeinfo string ''{0}''"
argument_list|,
name|mergeInfo
operator|.
name|toString
argument_list|()
argument_list|)
decl_stmt|;
name|SVNErrorManager
operator|.
name|error
argument_list|(
name|err
argument_list|,
name|svne
argument_list|,
name|SVNLogType
operator|.
name|DEFAULT
argument_list|)
expr_stmt|;
block|}
throw|throw
name|svne
throw|;
block|}
return|return
name|srcPathsToRangeLists
return|;
block|}
comment|/**      * Note: Make sure that this method is used only for making up an error message.       */
specifier|public
specifier|static
name|String
name|formatMergeInfoCatalogToString
parameter_list|(
name|Map
name|catalog
parameter_list|,
name|String
name|keyPrefix
parameter_list|,
name|String
name|valuePrefix
parameter_list|)
block|{
name|StringBuffer
name|buffer
init|=
literal|null
decl_stmt|;
if|if
condition|(
name|catalog
operator|!=
literal|null
operator|&&
operator|!
name|catalog
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|buffer
operator|=
operator|new
name|StringBuffer
argument_list|()
expr_stmt|;
for|for
control|(
name|Iterator
name|catalogIter
init|=
name|catalog
operator|.
name|keySet
argument_list|()
operator|.
name|iterator
argument_list|()
init|;
name|catalogIter
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|String
name|path1
init|=
operator|(
name|String
operator|)
name|catalogIter
operator|.
name|next
argument_list|()
decl_stmt|;
if|if
condition|(
name|path1
operator|.
name|startsWith
argument_list|(
literal|"/"
argument_list|)
condition|)
block|{
name|path1
operator|=
name|path1
operator|.
name|substring
argument_list|(
literal|1
argument_list|)
expr_stmt|;
block|}
name|Map
name|mergeInfo
init|=
operator|(
name|Map
operator|)
name|catalog
operator|.
name|get
argument_list|(
name|path1
argument_list|)
decl_stmt|;
if|if
condition|(
name|keyPrefix
operator|!=
literal|null
condition|)
block|{
name|buffer
operator|.
name|append
argument_list|(
name|keyPrefix
argument_list|)
expr_stmt|;
block|}
name|buffer
operator|.
name|append
argument_list|(
name|path1
argument_list|)
expr_stmt|;
name|buffer
operator|.
name|append
argument_list|(
literal|'\n'
argument_list|)
expr_stmt|;
name|buffer
operator|.
name|append
argument_list|(
name|formatMergeInfoToString
argument_list|(
name|mergeInfo
argument_list|,
name|valuePrefix
operator|!=
literal|null
condition|?
name|valuePrefix
else|:
literal|""
argument_list|)
argument_list|)
expr_stmt|;
name|buffer
operator|.
name|append
argument_list|(
literal|'\n'
argument_list|)
expr_stmt|;
block|}
block|}
return|return
name|buffer
operator|!=
literal|null
condition|?
name|buffer
operator|.
name|toString
argument_list|()
else|:
literal|"\n"
return|;
block|}
comment|/**      * Each element of the resultant array is formed like this:      * %s:%ld-%ld,.. where the first %s is a merge src path       * and %ld-%ld is startRev-endRev merge range.      */
specifier|public
specifier|static
name|String
index|[]
name|formatMergeInfoToArray
parameter_list|(
name|Map
name|srcsToRangeLists
parameter_list|,
name|String
name|prefix
parameter_list|)
block|{
name|srcsToRangeLists
operator|=
name|srcsToRangeLists
operator|==
literal|null
condition|?
name|Collections
operator|.
name|EMPTY_MAP
else|:
name|srcsToRangeLists
expr_stmt|;
name|String
index|[]
name|pathRanges
init|=
operator|new
name|String
index|[
name|srcsToRangeLists
operator|.
name|size
argument_list|()
index|]
decl_stmt|;
name|int
name|k
init|=
literal|0
decl_stmt|;
for|for
control|(
name|Iterator
name|paths
init|=
name|srcsToRangeLists
operator|.
name|keySet
argument_list|()
operator|.
name|iterator
argument_list|()
init|;
name|paths
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|String
name|path
init|=
operator|(
name|String
operator|)
name|paths
operator|.
name|next
argument_list|()
decl_stmt|;
name|SVNMergeRangeList
name|rangeList
init|=
operator|(
name|SVNMergeRangeList
operator|)
name|srcsToRangeLists
operator|.
name|get
argument_list|(
name|path
argument_list|)
decl_stmt|;
name|String
name|output
init|=
operator|(
name|prefix
operator|!=
literal|null
condition|?
name|prefix
else|:
literal|""
operator|)
operator|+
operator|(
name|path
operator|.
name|startsWith
argument_list|(
literal|"/"
argument_list|)
condition|?
literal|""
else|:
literal|"/"
operator|)
operator|+
name|path
operator|+
literal|':'
operator|+
name|rangeList
decl_stmt|;
name|pathRanges
index|[
name|k
operator|++
index|]
operator|=
name|output
expr_stmt|;
block|}
return|return
name|pathRanges
return|;
block|}
specifier|public
specifier|static
name|String
name|formatMergeInfoToString
parameter_list|(
name|Map
name|srcsToRangeLists
parameter_list|,
name|String
name|prefix
parameter_list|)
block|{
name|String
index|[]
name|infosArray
init|=
name|formatMergeInfoToArray
argument_list|(
name|srcsToRangeLists
argument_list|,
name|prefix
argument_list|)
decl_stmt|;
name|String
name|result
init|=
literal|""
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|infosArray
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
name|result
operator|+=
name|infosArray
index|[
name|i
index|]
expr_stmt|;
if|if
condition|(
name|i
operator|<
name|infosArray
operator|.
name|length
operator|-
literal|1
condition|)
block|{
name|result
operator|+=
literal|'\n'
expr_stmt|;
block|}
block|}
return|return
name|result
return|;
block|}
specifier|public
specifier|static
name|boolean
name|shouldElideMergeInfo
parameter_list|(
name|Map
name|parentMergeInfo
parameter_list|,
name|Map
name|childMergeInfo
parameter_list|,
name|String
name|pathSuffix
parameter_list|)
block|{
name|boolean
name|elides
init|=
literal|false
decl_stmt|;
if|if
condition|(
name|childMergeInfo
operator|!=
literal|null
condition|)
block|{
if|if
condition|(
name|childMergeInfo
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
if|if
condition|(
name|parentMergeInfo
operator|==
literal|null
operator|||
name|parentMergeInfo
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|elides
operator|=
literal|true
expr_stmt|;
block|}
block|}
if|else if
condition|(
operator|!
operator|(
name|parentMergeInfo
operator|==
literal|null
operator|||
name|parentMergeInfo
operator|.
name|isEmpty
argument_list|()
operator|)
condition|)
block|{
name|Map
name|pathTweakedMergeInfo
init|=
name|parentMergeInfo
decl_stmt|;
if|if
condition|(
name|pathSuffix
operator|!=
literal|null
condition|)
block|{
name|pathTweakedMergeInfo
operator|=
operator|new
name|TreeMap
argument_list|()
expr_stmt|;
for|for
control|(
name|Iterator
name|paths
init|=
name|parentMergeInfo
operator|.
name|keySet
argument_list|()
operator|.
name|iterator
argument_list|()
init|;
name|paths
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|String
name|mergeSrcPath
init|=
operator|(
name|String
operator|)
name|paths
operator|.
name|next
argument_list|()
decl_stmt|;
name|pathTweakedMergeInfo
operator|.
name|put
argument_list|(
name|SVNPathUtil
operator|.
name|getAbsolutePath
argument_list|(
name|SVNPathUtil
operator|.
name|append
argument_list|(
name|mergeSrcPath
argument_list|,
name|pathSuffix
argument_list|)
argument_list|)
argument_list|,
name|parentMergeInfo
operator|.
name|get
argument_list|(
name|mergeSrcPath
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
name|elides
operator|=
name|mergeInfoEquals
argument_list|(
name|pathTweakedMergeInfo
argument_list|,
name|childMergeInfo
argument_list|,
literal|true
argument_list|)
expr_stmt|;
block|}
block|}
return|return
name|elides
return|;
block|}
specifier|public
specifier|static
name|void
name|elideMergeInfo
parameter_list|(
name|Map
name|parentMergeInfo
parameter_list|,
name|Map
name|childMergeInfo
parameter_list|,
name|File
name|path
parameter_list|,
name|String
name|pathSuffix
parameter_list|,
name|SVNWCAccess
name|access
parameter_list|)
throws|throws
name|SVNException
block|{
name|boolean
name|elides
init|=
name|shouldElideMergeInfo
argument_list|(
name|parentMergeInfo
argument_list|,
name|childMergeInfo
argument_list|,
name|pathSuffix
argument_list|)
decl_stmt|;
if|if
condition|(
name|elides
condition|)
block|{
name|SVNPropertiesManager
operator|.
name|setProperty
argument_list|(
name|access
argument_list|,
name|path
argument_list|,
name|SVNProperty
operator|.
name|MERGE_INFO
argument_list|,
literal|null
argument_list|,
literal|true
argument_list|)
expr_stmt|;
block|}
block|}
specifier|public
specifier|static
name|boolean
name|mergeInfoEquals
parameter_list|(
name|Map
name|mergeInfo1
parameter_list|,
name|Map
name|mergeInfo2
parameter_list|,
name|boolean
name|considerInheritance
parameter_list|)
block|{
name|mergeInfo1
operator|=
name|mergeInfo1
operator|==
literal|null
condition|?
name|Collections
operator|.
name|EMPTY_MAP
else|:
name|mergeInfo1
expr_stmt|;
name|mergeInfo2
operator|=
name|mergeInfo2
operator|==
literal|null
condition|?
name|Collections
operator|.
name|EMPTY_MAP
else|:
name|mergeInfo2
expr_stmt|;
if|if
condition|(
name|mergeInfo1
operator|.
name|size
argument_list|()
operator|==
name|mergeInfo2
operator|.
name|size
argument_list|()
condition|)
block|{
name|Map
name|deleted
init|=
operator|new
name|SVNHashMap
argument_list|()
decl_stmt|;
name|Map
name|added
init|=
operator|new
name|SVNHashMap
argument_list|()
decl_stmt|;
name|diffMergeInfo
argument_list|(
name|deleted
argument_list|,
name|added
argument_list|,
name|mergeInfo1
argument_list|,
name|mergeInfo2
argument_list|,
name|considerInheritance
argument_list|)
expr_stmt|;
return|return
name|deleted
operator|.
name|isEmpty
argument_list|()
operator|&&
name|added
operator|.
name|isEmpty
argument_list|()
return|;
block|}
return|return
literal|false
return|;
block|}
specifier|public
specifier|static
name|String
index|[]
name|findMergeSources
parameter_list|(
name|long
name|revision
parameter_list|,
name|Map
name|mergeInfo
parameter_list|)
block|{
name|LinkedList
name|mergeSources
init|=
operator|new
name|LinkedList
argument_list|()
decl_stmt|;
for|for
control|(
name|Iterator
name|paths
init|=
name|mergeInfo
operator|.
name|keySet
argument_list|()
operator|.
name|iterator
argument_list|()
init|;
name|paths
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|String
name|path
init|=
operator|(
name|String
operator|)
name|paths
operator|.
name|next
argument_list|()
decl_stmt|;
name|SVNMergeRangeList
name|rangeList
init|=
operator|(
name|SVNMergeRangeList
operator|)
name|mergeInfo
operator|.
name|get
argument_list|(
name|path
argument_list|)
decl_stmt|;
if|if
condition|(
name|rangeList
operator|.
name|includes
argument_list|(
name|revision
argument_list|)
condition|)
block|{
name|mergeSources
operator|.
name|add
argument_list|(
name|path
argument_list|)
expr_stmt|;
block|}
block|}
return|return
operator|(
name|String
index|[]
operator|)
name|mergeSources
operator|.
name|toArray
argument_list|(
operator|new
name|String
index|[
name|mergeSources
operator|.
name|size
argument_list|()
index|]
argument_list|)
return|;
block|}
specifier|public
specifier|static
name|Map
name|getInheritableMergeInfo
parameter_list|(
name|Map
name|mergeInfo
parameter_list|,
name|String
name|path
parameter_list|,
name|long
name|startRev
parameter_list|,
name|long
name|endRev
parameter_list|)
block|{
name|Map
name|inheritableMergeInfo
init|=
operator|new
name|TreeMap
argument_list|()
decl_stmt|;
if|if
condition|(
name|mergeInfo
operator|!=
literal|null
condition|)
block|{
for|for
control|(
name|Iterator
name|paths
init|=
name|mergeInfo
operator|.
name|keySet
argument_list|()
operator|.
name|iterator
argument_list|()
init|;
name|paths
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|String
name|mergeSrcPath
init|=
operator|(
name|String
operator|)
name|paths
operator|.
name|next
argument_list|()
decl_stmt|;
name|SVNMergeRangeList
name|rangeList
init|=
operator|(
name|SVNMergeRangeList
operator|)
name|mergeInfo
operator|.
name|get
argument_list|(
name|mergeSrcPath
argument_list|)
decl_stmt|;
name|SVNMergeRangeList
name|inheritableRangeList
init|=
literal|null
decl_stmt|;
if|if
condition|(
name|path
operator|==
literal|null
operator|||
name|path
operator|.
name|equals
argument_list|(
name|mergeSrcPath
argument_list|)
condition|)
block|{
name|inheritableRangeList
operator|=
name|rangeList
operator|.
name|getInheritableRangeList
argument_list|(
name|startRev
argument_list|,
name|endRev
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|inheritableRangeList
operator|=
name|rangeList
operator|.
name|dup
argument_list|()
expr_stmt|;
block|}
if|if
condition|(
operator|!
name|inheritableRangeList
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|inheritableMergeInfo
operator|.
name|put
argument_list|(
name|mergeSrcPath
argument_list|,
name|inheritableRangeList
argument_list|)
expr_stmt|;
block|}
block|}
block|}
return|return
name|inheritableMergeInfo
return|;
block|}
specifier|public
specifier|static
name|Map
name|removeMergeInfo
parameter_list|(
name|Map
name|eraser
parameter_list|,
name|Map
name|whiteBoard
parameter_list|)
block|{
return|return
name|removeMergeInfo
argument_list|(
name|eraser
argument_list|,
name|whiteBoard
argument_list|,
literal|true
argument_list|)
return|;
block|}
specifier|public
specifier|static
name|Map
name|removeMergeInfo
parameter_list|(
name|Map
name|eraser
parameter_list|,
name|Map
name|whiteBoard
parameter_list|,
name|boolean
name|considerInheritance
parameter_list|)
block|{
name|Map
name|mergeInfo
init|=
operator|new
name|TreeMap
argument_list|()
decl_stmt|;
name|walkMergeInfoHashForDiff
argument_list|(
name|mergeInfo
argument_list|,
literal|null
argument_list|,
name|whiteBoard
argument_list|,
name|eraser
argument_list|,
name|considerInheritance
argument_list|)
expr_stmt|;
return|return
name|mergeInfo
return|;
block|}
specifier|public
specifier|static
name|Map
name|intersectMergeInfo
parameter_list|(
name|Map
name|mergeInfo1
parameter_list|,
name|Map
name|mergeInfo2
parameter_list|)
block|{
return|return
name|intersectMergeInfo
argument_list|(
name|mergeInfo1
argument_list|,
name|mergeInfo2
argument_list|,
literal|true
argument_list|)
return|;
block|}
specifier|public
specifier|static
name|Map
name|intersectMergeInfo
parameter_list|(
name|Map
name|mergeInfo1
parameter_list|,
name|Map
name|mergeInfo2
parameter_list|,
name|boolean
name|considerInheritance
parameter_list|)
block|{
name|Map
name|mergeInfo
init|=
operator|new
name|TreeMap
argument_list|()
decl_stmt|;
for|for
control|(
name|Iterator
name|pathsIter
init|=
name|mergeInfo1
operator|.
name|keySet
argument_list|()
operator|.
name|iterator
argument_list|()
init|;
name|pathsIter
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|String
name|path
init|=
operator|(
name|String
operator|)
name|pathsIter
operator|.
name|next
argument_list|()
decl_stmt|;
name|SVNMergeRangeList
name|rangeList1
init|=
operator|(
name|SVNMergeRangeList
operator|)
name|mergeInfo1
operator|.
name|get
argument_list|(
name|path
argument_list|)
decl_stmt|;
name|SVNMergeRangeList
name|rangeList2
init|=
operator|(
name|SVNMergeRangeList
operator|)
name|mergeInfo2
operator|.
name|get
argument_list|(
name|path
argument_list|)
decl_stmt|;
if|if
condition|(
name|rangeList2
operator|!=
literal|null
condition|)
block|{
name|rangeList2
operator|=
name|rangeList2
operator|.
name|intersect
argument_list|(
name|rangeList1
argument_list|,
name|considerInheritance
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|rangeList2
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|mergeInfo
operator|.
name|put
argument_list|(
name|path
argument_list|,
name|rangeList2
operator|.
name|dup
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
block|}
return|return
name|mergeInfo
return|;
block|}
specifier|public
specifier|static
name|SVNMergeRange
index|[]
name|parseRevisionList
parameter_list|(
name|StringBuffer
name|mergeInfo
parameter_list|,
name|String
name|path
parameter_list|)
throws|throws
name|SVNException
block|{
name|Collection
name|ranges
init|=
operator|new
name|LinkedList
argument_list|()
decl_stmt|;
while|while
condition|(
name|mergeInfo
operator|.
name|length
argument_list|()
operator|>
literal|0
operator|&&
name|mergeInfo
operator|.
name|charAt
argument_list|(
literal|0
argument_list|)
operator|!=
literal|'\n'
operator|&&
name|Character
operator|.
name|isWhitespace
argument_list|(
name|mergeInfo
operator|.
name|charAt
argument_list|(
literal|0
argument_list|)
argument_list|)
condition|)
block|{
name|mergeInfo
operator|=
name|mergeInfo
operator|.
name|deleteCharAt
argument_list|(
literal|0
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|mergeInfo
operator|.
name|length
argument_list|()
operator|==
literal|0
operator|||
name|mergeInfo
operator|.
name|charAt
argument_list|(
literal|0
argument_list|)
operator|==
literal|'\n'
condition|)
block|{
name|SVNErrorMessage
name|err
init|=
name|SVNErrorMessage
operator|.
name|create
argument_list|(
name|SVNErrorCode
operator|.
name|MERGE_INFO_PARSE_ERROR
argument_list|,
literal|"Mergeinfo for ''{0}'' maps to an empty revision range"
argument_list|,
name|path
argument_list|)
decl_stmt|;
name|SVNErrorManager
operator|.
name|error
argument_list|(
name|err
argument_list|,
name|SVNLogType
operator|.
name|DEFAULT
argument_list|)
expr_stmt|;
block|}
while|while
condition|(
name|mergeInfo
operator|.
name|length
argument_list|()
operator|>
literal|0
operator|&&
name|mergeInfo
operator|.
name|charAt
argument_list|(
literal|0
argument_list|)
operator|!=
literal|'\n'
condition|)
block|{
name|long
name|startRev
init|=
name|parseRevision
argument_list|(
name|mergeInfo
argument_list|)
decl_stmt|;
if|if
condition|(
name|mergeInfo
operator|.
name|length
argument_list|()
operator|>
literal|0
operator|&&
name|mergeInfo
operator|.
name|charAt
argument_list|(
literal|0
argument_list|)
operator|!=
literal|'\n'
operator|&&
name|mergeInfo
operator|.
name|charAt
argument_list|(
literal|0
argument_list|)
operator|!=
literal|'-'
operator|&&
name|mergeInfo
operator|.
name|charAt
argument_list|(
literal|0
argument_list|)
operator|!=
literal|','
operator|&&
name|mergeInfo
operator|.
name|charAt
argument_list|(
literal|0
argument_list|)
operator|!=
literal|'*'
condition|)
block|{
name|SVNErrorMessage
name|err
init|=
name|SVNErrorMessage
operator|.
name|create
argument_list|(
name|SVNErrorCode
operator|.
name|MERGE_INFO_PARSE_ERROR
argument_list|,
literal|"Invalid character ''{0}'' found in revision list"
argument_list|,
operator|new
name|Character
argument_list|(
name|mergeInfo
operator|.
name|charAt
argument_list|(
literal|0
argument_list|)
argument_list|)
argument_list|)
decl_stmt|;
name|SVNErrorManager
operator|.
name|error
argument_list|(
name|err
argument_list|,
name|SVNLogType
operator|.
name|DEFAULT
argument_list|)
expr_stmt|;
block|}
name|SVNMergeRange
name|range
init|=
operator|new
name|SVNMergeRange
argument_list|(
name|startRev
operator|-
literal|1
argument_list|,
name|startRev
argument_list|,
literal|true
argument_list|)
decl_stmt|;
if|if
condition|(
name|mergeInfo
operator|.
name|length
argument_list|()
operator|>
literal|0
operator|&&
name|mergeInfo
operator|.
name|charAt
argument_list|(
literal|0
argument_list|)
operator|==
literal|'-'
condition|)
block|{
name|mergeInfo
operator|=
name|mergeInfo
operator|.
name|deleteCharAt
argument_list|(
literal|0
argument_list|)
expr_stmt|;
name|long
name|endRev
init|=
name|parseRevision
argument_list|(
name|mergeInfo
argument_list|)
decl_stmt|;
if|if
condition|(
name|startRev
operator|>
name|endRev
condition|)
block|{
name|SVNErrorMessage
name|err
init|=
name|SVNErrorMessage
operator|.
name|create
argument_list|(
name|SVNErrorCode
operator|.
name|MERGE_INFO_PARSE_ERROR
argument_list|,
literal|"Unable to parse reversed revision range ''{0}-{1}''"
argument_list|,
operator|new
name|Object
index|[]
block|{
operator|new
name|Long
argument_list|(
name|startRev
argument_list|)
block|,
operator|new
name|Long
argument_list|(
name|endRev
argument_list|)
block|}
argument_list|)
decl_stmt|;
name|SVNErrorManager
operator|.
name|error
argument_list|(
name|err
argument_list|,
name|SVNLogType
operator|.
name|DEFAULT
argument_list|)
expr_stmt|;
block|}
if|else if
condition|(
name|startRev
operator|==
name|endRev
condition|)
block|{
name|SVNErrorMessage
name|err
init|=
name|SVNErrorMessage
operator|.
name|create
argument_list|(
name|SVNErrorCode
operator|.
name|MERGE_INFO_PARSE_ERROR
argument_list|,
literal|"Unable to parse revision range ''{0}-{1}'' with same start and end revisions"
argument_list|,
operator|new
name|Object
index|[]
block|{
operator|new
name|Long
argument_list|(
name|startRev
argument_list|)
block|,
operator|new
name|Long
argument_list|(
name|endRev
argument_list|)
block|}
argument_list|)
decl_stmt|;
name|SVNErrorManager
operator|.
name|error
argument_list|(
name|err
argument_list|,
name|SVNLogType
operator|.
name|DEFAULT
argument_list|)
expr_stmt|;
block|}
name|range
operator|.
name|setEndRevision
argument_list|(
name|endRev
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|mergeInfo
operator|.
name|length
argument_list|()
operator|==
literal|0
operator|||
name|mergeInfo
operator|.
name|charAt
argument_list|(
literal|0
argument_list|)
operator|==
literal|'\n'
condition|)
block|{
name|ranges
operator|.
name|add
argument_list|(
name|range
argument_list|)
expr_stmt|;
return|return
operator|(
name|SVNMergeRange
index|[]
operator|)
name|ranges
operator|.
name|toArray
argument_list|(
operator|new
name|SVNMergeRange
index|[
name|ranges
operator|.
name|size
argument_list|()
index|]
argument_list|)
return|;
block|}
if|else if
condition|(
name|mergeInfo
operator|.
name|length
argument_list|()
operator|>
literal|0
operator|&&
name|mergeInfo
operator|.
name|charAt
argument_list|(
literal|0
argument_list|)
operator|==
literal|','
condition|)
block|{
name|ranges
operator|.
name|add
argument_list|(
name|range
argument_list|)
expr_stmt|;
name|mergeInfo
operator|=
name|mergeInfo
operator|.
name|deleteCharAt
argument_list|(
literal|0
argument_list|)
expr_stmt|;
block|}
if|else if
condition|(
name|mergeInfo
operator|.
name|length
argument_list|()
operator|>
literal|0
operator|&&
name|mergeInfo
operator|.
name|charAt
argument_list|(
literal|0
argument_list|)
operator|==
literal|'*'
condition|)
block|{
name|range
operator|.
name|setInheritable
argument_list|(
literal|false
argument_list|)
expr_stmt|;
name|mergeInfo
operator|=
name|mergeInfo
operator|.
name|deleteCharAt
argument_list|(
literal|0
argument_list|)
expr_stmt|;
if|if
condition|(
name|mergeInfo
operator|.
name|length
argument_list|()
operator|==
literal|0
operator|||
name|mergeInfo
operator|.
name|charAt
argument_list|(
literal|0
argument_list|)
operator|==
literal|','
operator|||
name|mergeInfo
operator|.
name|charAt
argument_list|(
literal|0
argument_list|)
operator|==
literal|'\n'
condition|)
block|{
name|ranges
operator|.
name|add
argument_list|(
name|range
argument_list|)
expr_stmt|;
if|if
condition|(
name|mergeInfo
operator|.
name|length
argument_list|()
operator|>
literal|0
operator|&&
name|mergeInfo
operator|.
name|charAt
argument_list|(
literal|0
argument_list|)
operator|==
literal|','
condition|)
block|{
name|mergeInfo
operator|=
name|mergeInfo
operator|.
name|deleteCharAt
argument_list|(
literal|0
argument_list|)
expr_stmt|;
block|}
else|else
block|{
return|return
operator|(
name|SVNMergeRange
index|[]
operator|)
name|ranges
operator|.
name|toArray
argument_list|(
operator|new
name|SVNMergeRange
index|[
name|ranges
operator|.
name|size
argument_list|()
index|]
argument_list|)
return|;
block|}
block|}
else|else
block|{
name|SVNErrorMessage
name|err
init|=
name|SVNErrorMessage
operator|.
name|create
argument_list|(
name|SVNErrorCode
operator|.
name|MERGE_INFO_PARSE_ERROR
argument_list|,
literal|"Invalid character ''{0}'' found in range list"
argument_list|,
name|mergeInfo
operator|.
name|length
argument_list|()
operator|>
literal|0
condition|?
name|mergeInfo
operator|.
name|charAt
argument_list|(
literal|0
argument_list|)
operator|+
literal|""
else|:
literal|""
argument_list|)
decl_stmt|;
name|SVNErrorManager
operator|.
name|error
argument_list|(
name|err
argument_list|,
name|SVNLogType
operator|.
name|DEFAULT
argument_list|)
expr_stmt|;
block|}
block|}
else|else
block|{
name|SVNErrorMessage
name|err
init|=
name|SVNErrorMessage
operator|.
name|create
argument_list|(
name|SVNErrorCode
operator|.
name|MERGE_INFO_PARSE_ERROR
argument_list|,
literal|"Invalid character ''{0}'' found in range list"
argument_list|,
name|mergeInfo
operator|.
name|length
argument_list|()
operator|>
literal|0
condition|?
name|mergeInfo
operator|.
name|charAt
argument_list|(
literal|0
argument_list|)
operator|+
literal|""
else|:
literal|""
argument_list|)
decl_stmt|;
name|SVNErrorManager
operator|.
name|error
argument_list|(
name|err
argument_list|,
name|SVNLogType
operator|.
name|DEFAULT
argument_list|)
expr_stmt|;
block|}
block|}
if|if
condition|(
name|mergeInfo
operator|.
name|length
argument_list|()
operator|==
literal|0
operator|||
name|mergeInfo
operator|.
name|charAt
argument_list|(
literal|0
argument_list|)
operator|!=
literal|'\n'
condition|)
block|{
name|SVNErrorMessage
name|err
init|=
name|SVNErrorMessage
operator|.
name|create
argument_list|(
name|SVNErrorCode
operator|.
name|MERGE_INFO_PARSE_ERROR
argument_list|,
literal|"Range list parsing ended before hitting newline"
argument_list|)
decl_stmt|;
name|SVNErrorManager
operator|.
name|error
argument_list|(
name|err
argument_list|,
name|SVNLogType
operator|.
name|DEFAULT
argument_list|)
expr_stmt|;
block|}
return|return
operator|(
name|SVNMergeRange
index|[]
operator|)
name|ranges
operator|.
name|toArray
argument_list|(
operator|new
name|SVNMergeRange
index|[
name|ranges
operator|.
name|size
argument_list|()
index|]
argument_list|)
return|;
block|}
comment|/**      * @return [deletedList, addedList]      */
specifier|public
specifier|static
name|SVNMergeRangeList
index|[]
name|diffMergeRangeLists
parameter_list|(
name|SVNMergeRangeList
name|fromRangeList
parameter_list|,
name|SVNMergeRangeList
name|toRangeList
parameter_list|,
name|boolean
name|considerInheritance
parameter_list|)
block|{
name|SVNMergeRangeList
name|deletedRangeList
init|=
name|fromRangeList
operator|.
name|diff
argument_list|(
name|toRangeList
argument_list|,
name|considerInheritance
argument_list|)
decl_stmt|;
name|SVNMergeRangeList
name|addedRangeList
init|=
name|toRangeList
operator|.
name|diff
argument_list|(
name|fromRangeList
argument_list|,
name|considerInheritance
argument_list|)
decl_stmt|;
return|return
operator|new
name|SVNMergeRangeList
index|[]
block|{
name|deletedRangeList
block|,
name|addedRangeList
block|}
return|;
block|}
specifier|private
specifier|static
name|long
name|parseRevision
parameter_list|(
name|StringBuffer
name|mergeInfo
parameter_list|)
throws|throws
name|SVNException
block|{
name|int
name|ind
init|=
literal|0
decl_stmt|;
while|while
condition|(
name|ind
operator|<
name|mergeInfo
operator|.
name|length
argument_list|()
operator|&&
name|Character
operator|.
name|isDigit
argument_list|(
name|mergeInfo
operator|.
name|charAt
argument_list|(
name|ind
argument_list|)
argument_list|)
condition|)
block|{
name|ind
operator|++
expr_stmt|;
block|}
if|if
condition|(
name|ind
operator|==
literal|0
condition|)
block|{
name|SVNErrorMessage
name|err
init|=
name|SVNErrorMessage
operator|.
name|create
argument_list|(
name|SVNErrorCode
operator|.
name|REVISION_NUMBER_PARSE_ERROR
argument_list|,
literal|"Invalid revision number found parsing ''{0}''"
argument_list|,
name|mergeInfo
operator|.
name|toString
argument_list|()
argument_list|)
decl_stmt|;
name|SVNErrorManager
operator|.
name|error
argument_list|(
name|err
argument_list|,
name|SVNLogType
operator|.
name|DEFAULT
argument_list|)
expr_stmt|;
block|}
name|String
name|numberStr
init|=
name|mergeInfo
operator|.
name|substring
argument_list|(
literal|0
argument_list|,
name|ind
argument_list|)
decl_stmt|;
name|long
name|rev
init|=
operator|-
literal|1
decl_stmt|;
try|try
block|{
name|rev
operator|=
name|Long
operator|.
name|parseLong
argument_list|(
name|numberStr
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|NumberFormatException
name|e
parameter_list|)
block|{
name|SVNErrorMessage
name|err
init|=
name|SVNErrorMessage
operator|.
name|create
argument_list|(
name|SVNErrorCode
operator|.
name|REVISION_NUMBER_PARSE_ERROR
argument_list|,
literal|"Invalid revision number found parsing ''{0}''"
argument_list|,
name|mergeInfo
operator|.
name|toString
argument_list|()
argument_list|)
decl_stmt|;
name|SVNErrorManager
operator|.
name|error
argument_list|(
name|err
argument_list|,
name|SVNLogType
operator|.
name|DEFAULT
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|rev
operator|<
literal|0
condition|)
block|{
name|SVNErrorMessage
name|err
init|=
name|SVNErrorMessage
operator|.
name|create
argument_list|(
name|SVNErrorCode
operator|.
name|REVISION_NUMBER_PARSE_ERROR
argument_list|,
literal|"Negative revision number found parsing ''{0}''"
argument_list|,
name|mergeInfo
operator|.
name|toString
argument_list|()
argument_list|)
decl_stmt|;
name|SVNErrorManager
operator|.
name|error
argument_list|(
name|err
argument_list|,
name|SVNLogType
operator|.
name|DEFAULT
argument_list|)
expr_stmt|;
block|}
name|mergeInfo
operator|=
name|mergeInfo
operator|.
name|delete
argument_list|(
literal|0
argument_list|,
name|ind
argument_list|)
expr_stmt|;
return|return
name|rev
return|;
block|}
specifier|private
specifier|static
name|void
name|walkMergeInfoHashForDiff
parameter_list|(
name|Map
name|deleted
parameter_list|,
name|Map
name|added
parameter_list|,
name|Map
name|from
parameter_list|,
name|Map
name|to
parameter_list|,
name|boolean
name|considerInheritance
parameter_list|)
block|{
for|for
control|(
name|Iterator
name|paths
init|=
name|from
operator|.
name|keySet
argument_list|()
operator|.
name|iterator
argument_list|()
init|;
name|paths
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|String
name|path
init|=
operator|(
name|String
operator|)
name|paths
operator|.
name|next
argument_list|()
decl_stmt|;
name|SVNMergeRangeList
name|fromRangeList
init|=
operator|(
name|SVNMergeRangeList
operator|)
name|from
operator|.
name|get
argument_list|(
name|path
argument_list|)
decl_stmt|;
name|SVNMergeRangeList
name|toRangeList
init|=
operator|(
name|SVNMergeRangeList
operator|)
name|to
operator|.
name|get
argument_list|(
name|path
argument_list|)
decl_stmt|;
if|if
condition|(
name|toRangeList
operator|!=
literal|null
condition|)
block|{
name|SVNMergeRangeList
index|[]
name|rangeListDiff
init|=
name|diffMergeRangeLists
argument_list|(
name|fromRangeList
argument_list|,
name|toRangeList
argument_list|,
name|considerInheritance
argument_list|)
decl_stmt|;
name|SVNMergeRangeList
name|deletedRangeList
init|=
name|rangeListDiff
index|[
literal|0
index|]
decl_stmt|;
name|SVNMergeRangeList
name|addedRangeList
init|=
name|rangeListDiff
index|[
literal|1
index|]
decl_stmt|;
if|if
condition|(
name|deleted
operator|!=
literal|null
operator|&&
name|deletedRangeList
operator|.
name|getSize
argument_list|()
operator|>
literal|0
condition|)
block|{
name|deleted
operator|.
name|put
argument_list|(
name|path
argument_list|,
name|deletedRangeList
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|added
operator|!=
literal|null
operator|&&
name|addedRangeList
operator|.
name|getSize
argument_list|()
operator|>
literal|0
condition|)
block|{
name|added
operator|.
name|put
argument_list|(
name|path
argument_list|,
name|addedRangeList
argument_list|)
expr_stmt|;
block|}
block|}
if|else if
condition|(
name|deleted
operator|!=
literal|null
condition|)
block|{
name|deleted
operator|.
name|put
argument_list|(
name|path
argument_list|,
name|fromRangeList
operator|.
name|dup
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
if|if
condition|(
name|added
operator|==
literal|null
condition|)
block|{
return|return;
block|}
for|for
control|(
name|Iterator
name|paths
init|=
name|to
operator|.
name|keySet
argument_list|()
operator|.
name|iterator
argument_list|()
init|;
name|paths
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|String
name|path
init|=
operator|(
name|String
operator|)
name|paths
operator|.
name|next
argument_list|()
decl_stmt|;
name|SVNMergeRangeList
name|toRangeList
init|=
operator|(
name|SVNMergeRangeList
operator|)
name|to
operator|.
name|get
argument_list|(
name|path
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|from
operator|.
name|containsKey
argument_list|(
name|path
argument_list|)
condition|)
block|{
name|added
operator|.
name|put
argument_list|(
name|path
argument_list|,
name|toRangeList
operator|.
name|dup
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
block|}
specifier|private
specifier|static
class|class
name|ElideMergeInfoCatalogHandler
implements|implements
name|ISVNCommitPathHandler
block|{
specifier|private
name|Map
name|myMergeInfoCatalog
decl_stmt|;
specifier|private
name|List
name|myElidablePaths
decl_stmt|;
specifier|public
name|ElideMergeInfoCatalogHandler
parameter_list|(
name|Map
name|mergeInfoCatalog
parameter_list|)
block|{
name|myMergeInfoCatalog
operator|=
name|mergeInfoCatalog
expr_stmt|;
name|myElidablePaths
operator|=
operator|new
name|LinkedList
argument_list|()
expr_stmt|;
block|}
specifier|public
name|boolean
name|handleCommitPath
parameter_list|(
name|String
name|path
parameter_list|,
name|ISVNEditor
name|editor
parameter_list|)
throws|throws
name|SVNException
block|{
name|ElideMergeInfoEditor
name|elideEditor
init|=
operator|(
name|ElideMergeInfoEditor
operator|)
name|editor
decl_stmt|;
name|String
name|inheritedMergeInfoPath
init|=
name|elideEditor
operator|.
name|getInheritedMergeInfoPath
argument_list|()
decl_stmt|;
if|if
condition|(
name|inheritedMergeInfoPath
operator|==
literal|null
operator|||
literal|"/"
operator|.
name|equals
argument_list|(
name|path
argument_list|)
condition|)
block|{
return|return
literal|false
return|;
block|}
name|String
name|pathSuffix
init|=
name|SVNPathUtil
operator|.
name|getPathAsChild
argument_list|(
name|inheritedMergeInfoPath
argument_list|,
name|path
argument_list|)
decl_stmt|;
if|if
condition|(
name|pathSuffix
operator|==
literal|null
condition|)
block|{
name|SVNErrorMessage
name|err
init|=
name|SVNErrorMessage
operator|.
name|create
argument_list|(
name|SVNErrorCode
operator|.
name|UNKNOWN
argument_list|,
literal|"path suffix is null"
argument_list|)
decl_stmt|;
name|SVNErrorManager
operator|.
name|error
argument_list|(
name|err
argument_list|,
name|SVNLogType
operator|.
name|DEFAULT
argument_list|)
expr_stmt|;
block|}
name|boolean
name|elides
init|=
name|shouldElideMergeInfo
argument_list|(
operator|(
name|Map
operator|)
name|myMergeInfoCatalog
operator|.
name|get
argument_list|(
name|inheritedMergeInfoPath
argument_list|)
argument_list|,
operator|(
name|Map
operator|)
name|myMergeInfoCatalog
operator|.
name|get
argument_list|(
name|path
argument_list|)
argument_list|,
name|pathSuffix
argument_list|)
decl_stmt|;
if|if
condition|(
name|elides
condition|)
block|{
name|myElidablePaths
operator|.
name|add
argument_list|(
name|path
argument_list|)
expr_stmt|;
block|}
return|return
literal|false
return|;
block|}
specifier|public
name|List
name|getElidablePaths
parameter_list|()
block|{
return|return
name|myElidablePaths
return|;
block|}
block|}
specifier|private
specifier|static
class|class
name|ElideMergeInfoEditor
implements|implements
name|ISVNEditor
block|{
specifier|private
name|Map
name|myMergeInfoCatalog
decl_stmt|;
specifier|private
name|ElideMergeInfoCatalogDirBaton
name|myCurrentDirBaton
decl_stmt|;
specifier|public
name|ElideMergeInfoEditor
parameter_list|(
name|Map
name|mergeInfoCatalog
parameter_list|)
block|{
name|myMergeInfoCatalog
operator|=
name|mergeInfoCatalog
expr_stmt|;
block|}
specifier|public
name|void
name|abortEdit
parameter_list|()
throws|throws
name|SVNException
block|{
block|}
specifier|public
name|void
name|absentDir
parameter_list|(
name|String
name|path
parameter_list|)
throws|throws
name|SVNException
block|{
block|}
specifier|public
name|void
name|absentFile
parameter_list|(
name|String
name|path
parameter_list|)
throws|throws
name|SVNException
block|{
block|}
specifier|public
name|void
name|addDir
parameter_list|(
name|String
name|path
parameter_list|,
name|String
name|copyFromPath
parameter_list|,
name|long
name|copyFromRevision
parameter_list|)
throws|throws
name|SVNException
block|{
block|}
specifier|public
name|void
name|addFile
parameter_list|(
name|String
name|path
parameter_list|,
name|String
name|copyFromPath
parameter_list|,
name|long
name|copyFromRevision
parameter_list|)
throws|throws
name|SVNException
block|{
block|}
specifier|public
name|void
name|changeDirProperty
parameter_list|(
name|String
name|name
parameter_list|,
name|SVNPropertyValue
name|value
parameter_list|)
throws|throws
name|SVNException
block|{
block|}
specifier|public
name|void
name|changeFileProperty
parameter_list|(
name|String
name|path
parameter_list|,
name|String
name|propertyName
parameter_list|,
name|SVNPropertyValue
name|propertyValue
parameter_list|)
throws|throws
name|SVNException
block|{
block|}
specifier|public
name|void
name|closeDir
parameter_list|()
throws|throws
name|SVNException
block|{
block|}
specifier|public
name|SVNCommitInfo
name|closeEdit
parameter_list|()
throws|throws
name|SVNException
block|{
return|return
literal|null
return|;
block|}
specifier|public
name|void
name|closeFile
parameter_list|(
name|String
name|path
parameter_list|,
name|String
name|textChecksum
parameter_list|)
throws|throws
name|SVNException
block|{
block|}
specifier|public
name|void
name|deleteEntry
parameter_list|(
name|String
name|path
parameter_list|,
name|long
name|revision
parameter_list|)
throws|throws
name|SVNException
block|{
block|}
specifier|public
name|void
name|openDir
parameter_list|(
name|String
name|path
parameter_list|,
name|long
name|revision
parameter_list|)
throws|throws
name|SVNException
block|{
if|if
condition|(
operator|!
name|path
operator|.
name|startsWith
argument_list|(
literal|"/"
argument_list|)
condition|)
block|{
name|path
operator|=
literal|"/"
operator|+
name|path
expr_stmt|;
block|}
name|ElideMergeInfoCatalogDirBaton
name|dirBaton
init|=
operator|new
name|ElideMergeInfoCatalogDirBaton
argument_list|()
decl_stmt|;
if|if
condition|(
name|myMergeInfoCatalog
operator|.
name|get
argument_list|(
name|path
argument_list|)
operator|!=
literal|null
condition|)
block|{
name|dirBaton
operator|.
name|myInheritedMergeInfoPath
operator|=
name|path
expr_stmt|;
block|}
else|else
block|{
name|dirBaton
operator|.
name|myInheritedMergeInfoPath
operator|=
name|myCurrentDirBaton
operator|.
name|myInheritedMergeInfoPath
expr_stmt|;
block|}
name|myCurrentDirBaton
operator|=
name|dirBaton
expr_stmt|;
block|}
specifier|public
name|void
name|openFile
parameter_list|(
name|String
name|path
parameter_list|,
name|long
name|revision
parameter_list|)
throws|throws
name|SVNException
block|{
block|}
specifier|public
name|void
name|openRoot
parameter_list|(
name|long
name|revision
parameter_list|)
throws|throws
name|SVNException
block|{
name|myCurrentDirBaton
operator|=
operator|new
name|ElideMergeInfoCatalogDirBaton
argument_list|()
expr_stmt|;
block|}
specifier|public
name|void
name|targetRevision
parameter_list|(
name|long
name|revision
parameter_list|)
throws|throws
name|SVNException
block|{
block|}
specifier|public
name|void
name|applyTextDelta
parameter_list|(
name|String
name|path
parameter_list|,
name|String
name|baseChecksum
parameter_list|)
throws|throws
name|SVNException
block|{
block|}
specifier|public
name|OutputStream
name|textDeltaChunk
parameter_list|(
name|String
name|path
parameter_list|,
name|SVNDiffWindow
name|diffWindow
parameter_list|)
throws|throws
name|SVNException
block|{
return|return
name|SVNFileUtil
operator|.
name|DUMMY_OUT
return|;
block|}
specifier|public
name|void
name|textDeltaEnd
parameter_list|(
name|String
name|path
parameter_list|)
throws|throws
name|SVNException
block|{
block|}
specifier|public
name|String
name|getInheritedMergeInfoPath
parameter_list|()
block|{
return|return
name|myCurrentDirBaton
operator|.
name|myInheritedMergeInfoPath
return|;
block|}
specifier|private
class|class
name|ElideMergeInfoCatalogDirBaton
block|{
specifier|private
name|String
name|myInheritedMergeInfoPath
decl_stmt|;
block|}
block|}
block|}
end_class

end_unit

