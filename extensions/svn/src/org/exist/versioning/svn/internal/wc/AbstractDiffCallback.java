begin_unit|revision:1.0.0;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * ====================================================================  * Copyright (c) 2004-2010 TMate Software Ltd.  All rights reserved.  *  * This software is licensed as described in the file COPYING, which  * you should have received as part of this distribution.  The terms  * are also available at http://svnkit.com/license.html  * If newer versions of this license are posted there, you may use a  * newer version instead, at your option.  * ====================================================================  */
end_comment

begin_package
package|package
name|org
operator|.
name|exist
operator|.
name|versioning
operator|.
name|svn
operator|.
name|internal
operator|.
name|wc
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|File
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Iterator
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Set
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|util
operator|.
name|io
operator|.
name|Resource
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|versioning
operator|.
name|svn
operator|.
name|internal
operator|.
name|wc
operator|.
name|admin
operator|.
name|SVNAdminArea
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|versioning
operator|.
name|svn
operator|.
name|internal
operator|.
name|wc
operator|.
name|admin
operator|.
name|SVNWCAccess
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|versioning
operator|.
name|svn
operator|.
name|wc
operator|.
name|SVNStatusType
import|;
end_import

begin_import
import|import
name|org
operator|.
name|tmatesoft
operator|.
name|svn
operator|.
name|core
operator|.
name|SVNException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|tmatesoft
operator|.
name|svn
operator|.
name|core
operator|.
name|SVNProperties
import|;
end_import

begin_import
import|import
name|org
operator|.
name|tmatesoft
operator|.
name|svn
operator|.
name|core
operator|.
name|SVNProperty
import|;
end_import

begin_import
import|import
name|org
operator|.
name|tmatesoft
operator|.
name|svn
operator|.
name|core
operator|.
name|internal
operator|.
name|util
operator|.
name|SVNHashSet
import|;
end_import

begin_comment
comment|/**  * @version 1.3  * @author  TMate Software Ltd.  */
end_comment

begin_class
specifier|public
specifier|abstract
class|class
name|AbstractDiffCallback
block|{
specifier|private
name|SVNAdminArea
name|myAdminArea
decl_stmt|;
specifier|private
name|File
name|myBasePath
decl_stmt|;
specifier|private
name|Set
name|myDeletedPaths
decl_stmt|;
specifier|protected
name|AbstractDiffCallback
parameter_list|(
name|SVNAdminArea
name|adminArea
parameter_list|)
block|{
name|myAdminArea
operator|=
name|adminArea
expr_stmt|;
block|}
specifier|public
name|void
name|setBasePath
parameter_list|(
name|File
name|path
parameter_list|)
block|{
name|myBasePath
operator|=
name|path
expr_stmt|;
block|}
specifier|public
specifier|abstract
name|boolean
name|isDiffUnversioned
parameter_list|()
function_decl|;
specifier|public
specifier|abstract
name|boolean
name|isDiffCopiedAsAdded
parameter_list|()
function_decl|;
specifier|public
specifier|abstract
name|File
name|createTempDirectory
parameter_list|()
throws|throws
name|SVNException
function_decl|;
specifier|public
specifier|abstract
name|SVNStatusType
name|propertiesChanged
parameter_list|(
name|String
name|path
parameter_list|,
name|SVNProperties
name|originalProperties
parameter_list|,
name|SVNProperties
name|diff
parameter_list|,
name|boolean
index|[]
name|isTreeConflicted
parameter_list|)
throws|throws
name|SVNException
function_decl|;
specifier|public
specifier|abstract
name|SVNStatusType
index|[]
name|fileChanged
parameter_list|(
name|String
name|path
parameter_list|,
name|File
name|file1
parameter_list|,
name|File
name|file2
parameter_list|,
name|long
name|revision1
parameter_list|,
name|long
name|revision2
parameter_list|,
name|String
name|mimeType1
parameter_list|,
name|String
name|mimeType2
parameter_list|,
name|SVNProperties
name|originalProperties
parameter_list|,
name|SVNProperties
name|diff
parameter_list|,
name|boolean
index|[]
name|isTreeConflicted
parameter_list|)
throws|throws
name|SVNException
function_decl|;
specifier|public
specifier|abstract
name|SVNStatusType
index|[]
name|fileAdded
parameter_list|(
name|String
name|path
parameter_list|,
name|File
name|file1
parameter_list|,
name|File
name|file2
parameter_list|,
name|long
name|revision1
parameter_list|,
name|long
name|revision2
parameter_list|,
name|String
name|mimeType1
parameter_list|,
name|String
name|mimeType2
parameter_list|,
name|SVNProperties
name|originalProperties
parameter_list|,
name|SVNProperties
name|diff
parameter_list|,
name|boolean
index|[]
name|isTreeConflicted
parameter_list|)
throws|throws
name|SVNException
function_decl|;
specifier|public
specifier|abstract
name|SVNStatusType
name|fileDeleted
parameter_list|(
name|String
name|path
parameter_list|,
name|File
name|file1
parameter_list|,
name|File
name|file2
parameter_list|,
name|String
name|mimeType1
parameter_list|,
name|String
name|mimeType2
parameter_list|,
name|SVNProperties
name|originalProperties
parameter_list|,
name|boolean
index|[]
name|isTreeConflicted
parameter_list|)
throws|throws
name|SVNException
function_decl|;
specifier|public
specifier|abstract
name|SVNStatusType
name|directoryAdded
parameter_list|(
name|String
name|path
parameter_list|,
name|long
name|revision
parameter_list|,
name|boolean
index|[]
name|isTreeConflicted
parameter_list|)
throws|throws
name|SVNException
function_decl|;
specifier|public
specifier|abstract
name|SVNStatusType
name|directoryDeleted
parameter_list|(
name|String
name|path
parameter_list|,
name|boolean
index|[]
name|isTreeConflicted
parameter_list|)
throws|throws
name|SVNException
function_decl|;
specifier|public
specifier|abstract
name|void
name|directoryOpened
parameter_list|(
name|String
name|path
parameter_list|,
name|long
name|revision
parameter_list|,
name|boolean
index|[]
name|isTreeConflicted
parameter_list|)
throws|throws
name|SVNException
function_decl|;
specifier|public
specifier|abstract
name|SVNStatusType
index|[]
name|directoryClosed
parameter_list|(
name|String
name|path
parameter_list|,
name|boolean
index|[]
name|isTreeConflicted
parameter_list|)
throws|throws
name|SVNException
function_decl|;
specifier|protected
name|String
name|getDisplayPath
parameter_list|(
name|String
name|path
parameter_list|)
block|{
if|if
condition|(
name|myAdminArea
operator|==
literal|null
condition|)
block|{
if|if
condition|(
name|myBasePath
operator|!=
literal|null
condition|)
block|{
return|return
operator|new
name|Resource
argument_list|(
name|myBasePath
argument_list|,
name|path
argument_list|)
operator|.
name|getAbsolutePath
argument_list|()
operator|.
name|replace
argument_list|(
name|Resource
operator|.
name|separatorChar
argument_list|,
literal|'/'
argument_list|)
return|;
block|}
return|return
name|path
operator|.
name|replace
argument_list|(
name|Resource
operator|.
name|separatorChar
argument_list|,
literal|'/'
argument_list|)
return|;
block|}
return|return
name|myAdminArea
operator|.
name|getFile
argument_list|(
name|path
argument_list|)
operator|.
name|getAbsolutePath
argument_list|()
operator|.
name|replace
argument_list|(
name|Resource
operator|.
name|separatorChar
argument_list|,
literal|'/'
argument_list|)
return|;
block|}
specifier|protected
name|void
name|categorizeProperties
parameter_list|(
name|SVNProperties
name|original
parameter_list|,
name|SVNProperties
name|regular
parameter_list|,
name|SVNProperties
name|entry
parameter_list|,
name|SVNProperties
name|wc
parameter_list|)
block|{
if|if
condition|(
name|original
operator|==
literal|null
condition|)
block|{
return|return;
block|}
for|for
control|(
name|Iterator
name|propNames
init|=
name|original
operator|.
name|nameSet
argument_list|()
operator|.
name|iterator
argument_list|()
init|;
name|propNames
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|String
name|name
init|=
operator|(
name|String
operator|)
name|propNames
operator|.
name|next
argument_list|()
decl_stmt|;
if|if
condition|(
name|regular
operator|!=
literal|null
operator|&&
name|SVNProperty
operator|.
name|isRegularProperty
argument_list|(
name|name
argument_list|)
condition|)
block|{
name|regular
operator|.
name|put
argument_list|(
name|name
argument_list|,
name|original
operator|.
name|getSVNPropertyValue
argument_list|(
name|name
argument_list|)
argument_list|)
expr_stmt|;
block|}
if|else if
condition|(
name|entry
operator|!=
literal|null
operator|&&
name|SVNProperty
operator|.
name|isEntryProperty
argument_list|(
name|name
argument_list|)
condition|)
block|{
name|entry
operator|.
name|put
argument_list|(
name|name
argument_list|,
name|original
operator|.
name|getSVNPropertyValue
argument_list|(
name|name
argument_list|)
argument_list|)
expr_stmt|;
block|}
if|else if
condition|(
name|wc
operator|!=
literal|null
operator|&&
name|SVNProperty
operator|.
name|isWorkingCopyProperty
argument_list|(
name|name
argument_list|)
condition|)
block|{
name|wc
operator|.
name|put
argument_list|(
name|name
argument_list|,
name|original
operator|.
name|getSVNPropertyValue
argument_list|(
name|name
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
block|}
specifier|protected
name|SVNAdminArea
name|getAdminArea
parameter_list|()
block|{
return|return
name|myAdminArea
return|;
block|}
specifier|protected
name|SVNWCAccess
name|getWCAccess
parameter_list|()
block|{
return|return
name|getAdminArea
argument_list|()
operator|.
name|getWCAccess
argument_list|()
return|;
block|}
specifier|protected
name|void
name|addDeletedPath
parameter_list|(
name|String
name|path
parameter_list|)
block|{
if|if
condition|(
name|myDeletedPaths
operator|==
literal|null
condition|)
block|{
name|myDeletedPaths
operator|=
operator|new
name|SVNHashSet
argument_list|()
expr_stmt|;
block|}
name|myDeletedPaths
operator|.
name|add
argument_list|(
name|path
argument_list|)
expr_stmt|;
block|}
specifier|protected
name|boolean
name|isPathDeleted
parameter_list|(
name|String
name|path
parameter_list|)
block|{
return|return
name|myDeletedPaths
operator|!=
literal|null
operator|&&
name|myDeletedPaths
operator|.
name|contains
argument_list|(
name|path
argument_list|)
return|;
block|}
specifier|protected
name|void
name|clearDeletedPaths
parameter_list|()
block|{
name|myDeletedPaths
operator|=
literal|null
expr_stmt|;
block|}
specifier|protected
name|void
name|setIsConflicted
parameter_list|(
name|boolean
index|[]
name|isConflictedResult
parameter_list|,
name|boolean
name|isConflicted
parameter_list|)
block|{
if|if
condition|(
name|isConflictedResult
operator|!=
literal|null
operator|&&
name|isConflictedResult
operator|.
name|length
operator|>
literal|0
condition|)
block|{
name|isConflictedResult
index|[
literal|0
index|]
operator|=
name|isConflicted
expr_stmt|;
block|}
block|}
block|}
end_class

end_unit

