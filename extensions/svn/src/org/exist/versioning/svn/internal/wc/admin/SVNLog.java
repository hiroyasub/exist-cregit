begin_unit|revision:1.0.0;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * ====================================================================  * Copyright (c) 2004-2010 TMate Software Ltd.  All rights reserved.  *  * This software is licensed as described in the file COPYING, which  * you should have received as part of this distribution.  The terms  * are also available at http://svnkit.com/license.html  * If newer versions of this license are posted there, you may use a  * newer version instead, at your option.  * ====================================================================  */
end_comment

begin_package
package|package
name|org
operator|.
name|exist
operator|.
name|versioning
operator|.
name|svn
operator|.
name|internal
operator|.
name|wc
operator|.
name|admin
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|File
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collection
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Iterator
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|versioning
operator|.
name|svn
operator|.
name|internal
operator|.
name|wc
operator|.
name|SVNAdminUtil
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|versioning
operator|.
name|svn
operator|.
name|internal
operator|.
name|wc
operator|.
name|SVNErrorManager
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|versioning
operator|.
name|svn
operator|.
name|wc
operator|.
name|SVNStatusType
import|;
end_import

begin_import
import|import
name|org
operator|.
name|tmatesoft
operator|.
name|svn
operator|.
name|core
operator|.
name|SVNErrorCode
import|;
end_import

begin_import
import|import
name|org
operator|.
name|tmatesoft
operator|.
name|svn
operator|.
name|core
operator|.
name|SVNErrorMessage
import|;
end_import

begin_import
import|import
name|org
operator|.
name|tmatesoft
operator|.
name|svn
operator|.
name|core
operator|.
name|SVNException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|tmatesoft
operator|.
name|svn
operator|.
name|core
operator|.
name|SVNNodeKind
import|;
end_import

begin_import
import|import
name|org
operator|.
name|tmatesoft
operator|.
name|svn
operator|.
name|core
operator|.
name|SVNProperties
import|;
end_import

begin_import
import|import
name|org
operator|.
name|tmatesoft
operator|.
name|svn
operator|.
name|core
operator|.
name|SVNProperty
import|;
end_import

begin_import
import|import
name|org
operator|.
name|tmatesoft
operator|.
name|svn
operator|.
name|core
operator|.
name|SVNPropertyValue
import|;
end_import

begin_import
import|import
name|org
operator|.
name|tmatesoft
operator|.
name|svn
operator|.
name|core
operator|.
name|internal
operator|.
name|util
operator|.
name|SVNDate
import|;
end_import

begin_import
import|import
name|org
operator|.
name|tmatesoft
operator|.
name|svn
operator|.
name|util
operator|.
name|SVNLogType
import|;
end_import

begin_comment
comment|/**  * @version 1.3  * @author  TMate Software Ltd.  */
end_comment

begin_class
specifier|public
specifier|abstract
class|class
name|SVNLog
block|{
specifier|public
specifier|static
specifier|final
name|String
name|DELETE_CHANGELIST
init|=
literal|"delete-changelist"
decl_stmt|;
specifier|public
specifier|static
specifier|final
name|String
name|DELETE_ENTRY
init|=
literal|"delete-entry"
decl_stmt|;
specifier|public
specifier|static
specifier|final
name|String
name|MODIFY_ENTRY
init|=
literal|"modify-entry"
decl_stmt|;
specifier|public
specifier|static
specifier|final
name|String
name|MODIFY_WC_PROPERTY
init|=
literal|"modify-wcprop"
decl_stmt|;
specifier|public
specifier|static
specifier|final
name|String
name|DELETE_LOCK
init|=
literal|"delete-lock"
decl_stmt|;
specifier|public
specifier|static
specifier|final
name|String
name|MOVE
init|=
literal|"mv"
decl_stmt|;
specifier|public
specifier|static
specifier|final
name|String
name|APPEND
init|=
literal|"append"
decl_stmt|;
specifier|public
specifier|static
specifier|final
name|String
name|DELETE
init|=
literal|"rm"
decl_stmt|;
specifier|public
specifier|static
specifier|final
name|String
name|READONLY
init|=
literal|"readonly"
decl_stmt|;
specifier|public
specifier|static
specifier|final
name|String
name|COPY_AND_TRANSLATE
init|=
literal|"cp-and-translate"
decl_stmt|;
specifier|public
specifier|static
specifier|final
name|String
name|COPY_AND_DETRANSLATE
init|=
literal|"cp-and-detranslate"
decl_stmt|;
specifier|public
specifier|static
specifier|final
name|String
name|COPY
init|=
literal|"cp"
decl_stmt|;
specifier|public
specifier|static
specifier|final
name|String
name|MERGE
init|=
literal|"merge"
decl_stmt|;
specifier|public
specifier|static
specifier|final
name|String
name|MAYBE_READONLY
init|=
literal|"maybe-readonly"
decl_stmt|;
specifier|public
specifier|static
specifier|final
name|String
name|MAYBE_EXECUTABLE
init|=
literal|"maybe-executable"
decl_stmt|;
specifier|public
specifier|static
specifier|final
name|String
name|SET_TIMESTAMP
init|=
literal|"set-timestamp"
decl_stmt|;
specifier|public
specifier|static
specifier|final
name|String
name|COMMIT
init|=
literal|"committed"
decl_stmt|;
specifier|public
specifier|static
specifier|final
name|String
name|UPGRADE_FORMAT
init|=
literal|"upgrade-format"
decl_stmt|;
specifier|public
specifier|static
specifier|final
name|String
name|ADD_TREE_CONFLICT
init|=
literal|"add-tree-conflict"
decl_stmt|;
specifier|public
specifier|static
specifier|final
name|String
name|NAME_ATTR
init|=
literal|"name"
decl_stmt|;
specifier|public
specifier|static
specifier|final
name|String
name|DATA_ATTR
init|=
literal|"data"
decl_stmt|;
specifier|public
specifier|static
specifier|final
name|String
name|PROPERTY_NAME_ATTR
init|=
literal|"propname"
decl_stmt|;
specifier|public
specifier|static
specifier|final
name|String
name|PROPERTY_VALUE_ATTR
init|=
literal|"propval"
decl_stmt|;
specifier|public
specifier|static
specifier|final
name|String
name|DEST_ATTR
init|=
literal|"dest"
decl_stmt|;
specifier|public
specifier|static
specifier|final
name|String
name|TIMESTAMP_ATTR
init|=
literal|"timestamp"
decl_stmt|;
specifier|public
specifier|static
specifier|final
name|String
name|REVISION_ATTR
init|=
literal|"revision"
decl_stmt|;
specifier|public
specifier|static
specifier|final
name|String
name|FORMAT_ATTR
init|=
literal|"format"
decl_stmt|;
specifier|public
specifier|static
specifier|final
name|String
name|FORCE_ATTR
init|=
literal|"force"
decl_stmt|;
specifier|public
specifier|static
specifier|final
name|String
name|ATTR1
init|=
literal|"arg1"
decl_stmt|;
specifier|public
specifier|static
specifier|final
name|String
name|ATTR2
init|=
literal|"arg2"
decl_stmt|;
specifier|public
specifier|static
specifier|final
name|String
name|ATTR3
init|=
literal|"arg3"
decl_stmt|;
specifier|public
specifier|static
specifier|final
name|String
name|ATTR4
init|=
literal|"arg4"
decl_stmt|;
specifier|public
specifier|static
specifier|final
name|String
name|ATTR5
init|=
literal|"arg5"
decl_stmt|;
specifier|public
specifier|static
specifier|final
name|String
name|ATTR6
init|=
literal|"arg6"
decl_stmt|;
specifier|public
specifier|static
specifier|final
name|String
name|WC_TIMESTAMP
init|=
literal|"working"
decl_stmt|;
specifier|public
specifier|static
specifier|final
name|String
name|WC_WORKING_SIZE
init|=
literal|"working"
decl_stmt|;
specifier|protected
name|Collection
name|myCache
decl_stmt|;
specifier|protected
name|SVNAdminArea
name|myAdminArea
decl_stmt|;
specifier|public
specifier|abstract
name|void
name|save
parameter_list|()
throws|throws
name|SVNException
function_decl|;
specifier|public
specifier|abstract
name|String
name|toString
parameter_list|()
function_decl|;
specifier|public
specifier|abstract
name|void
name|delete
parameter_list|()
throws|throws
name|SVNException
function_decl|;
specifier|public
specifier|abstract
name|boolean
name|exists
parameter_list|()
function_decl|;
specifier|protected
name|SVNLog
parameter_list|(
name|SVNAdminArea
name|adminArea
parameter_list|)
block|{
name|myAdminArea
operator|=
name|adminArea
expr_stmt|;
block|}
specifier|public
name|void
name|addCommand
parameter_list|(
name|String
name|name
parameter_list|,
name|SVNProperties
name|attributes
parameter_list|,
name|boolean
name|save
parameter_list|)
throws|throws
name|SVNException
block|{
if|if
condition|(
name|myCache
operator|==
literal|null
condition|)
block|{
name|myCache
operator|=
operator|new
name|ArrayList
argument_list|()
expr_stmt|;
block|}
name|attributes
operator|=
operator|new
name|SVNProperties
argument_list|(
name|attributes
argument_list|)
expr_stmt|;
name|attributes
operator|.
name|put
argument_list|(
literal|""
argument_list|,
name|name
argument_list|)
expr_stmt|;
name|myCache
operator|.
name|add
argument_list|(
name|attributes
argument_list|)
expr_stmt|;
if|if
condition|(
name|save
condition|)
block|{
name|save
argument_list|()
expr_stmt|;
block|}
block|}
specifier|public
name|SVNStatusType
name|logChangedEntryProperties
parameter_list|(
name|String
name|name
parameter_list|,
name|SVNProperties
name|modifiedEntryProps
parameter_list|)
throws|throws
name|SVNException
block|{
name|SVNStatusType
name|status
init|=
name|SVNStatusType
operator|.
name|LOCK_UNCHANGED
decl_stmt|;
if|if
condition|(
name|modifiedEntryProps
operator|!=
literal|null
condition|)
block|{
name|SVNProperties
name|command
init|=
operator|new
name|SVNProperties
argument_list|()
decl_stmt|;
name|command
operator|.
name|put
argument_list|(
name|SVNLog
operator|.
name|NAME_ATTR
argument_list|,
name|name
argument_list|)
expr_stmt|;
for|for
control|(
name|Iterator
name|names
init|=
name|modifiedEntryProps
operator|.
name|nameSet
argument_list|()
operator|.
name|iterator
argument_list|()
init|;
name|names
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|String
name|propName
init|=
operator|(
name|String
operator|)
name|names
operator|.
name|next
argument_list|()
decl_stmt|;
name|SVNPropertyValue
name|propValue
init|=
name|modifiedEntryProps
operator|.
name|getSVNPropertyValue
argument_list|(
name|propName
argument_list|)
decl_stmt|;
name|String
name|longPropName
init|=
operator|!
name|propName
operator|.
name|startsWith
argument_list|(
name|SVNProperty
operator|.
name|SVN_ENTRY_PREFIX
argument_list|)
condition|?
name|SVNProperty
operator|.
name|SVN_ENTRY_PREFIX
operator|+
name|propName
else|:
name|propName
decl_stmt|;
if|if
condition|(
name|SVNProperty
operator|.
name|LOCK_TOKEN
operator|.
name|equals
argument_list|(
name|longPropName
argument_list|)
condition|)
block|{
name|SVNProperties
name|deleteLockCommand
init|=
operator|new
name|SVNProperties
argument_list|()
decl_stmt|;
name|deleteLockCommand
operator|.
name|put
argument_list|(
name|SVNLog
operator|.
name|NAME_ATTR
argument_list|,
name|name
argument_list|)
expr_stmt|;
name|addCommand
argument_list|(
name|SVNLog
operator|.
name|DELETE_LOCK
argument_list|,
name|deleteLockCommand
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|status
operator|=
name|SVNStatusType
operator|.
name|LOCK_UNLOCKED
expr_stmt|;
block|}
if|else if
condition|(
name|propValue
operator|!=
literal|null
condition|)
block|{
name|command
operator|.
name|put
argument_list|(
name|propName
argument_list|,
name|propValue
argument_list|)
expr_stmt|;
block|}
block|}
name|addCommand
argument_list|(
name|SVNLog
operator|.
name|MODIFY_ENTRY
argument_list|,
name|command
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|command
operator|.
name|clear
argument_list|()
expr_stmt|;
block|}
return|return
name|status
return|;
block|}
specifier|public
name|void
name|logChangedWCProperties
parameter_list|(
name|String
name|name
parameter_list|,
name|SVNProperties
name|modifiedWCProps
parameter_list|)
throws|throws
name|SVNException
block|{
if|if
condition|(
name|modifiedWCProps
operator|!=
literal|null
condition|)
block|{
name|SVNProperties
name|command
init|=
operator|new
name|SVNProperties
argument_list|()
decl_stmt|;
name|command
operator|.
name|put
argument_list|(
name|SVNLog
operator|.
name|NAME_ATTR
argument_list|,
name|name
argument_list|)
expr_stmt|;
for|for
control|(
name|Iterator
name|names
init|=
name|modifiedWCProps
operator|.
name|nameSet
argument_list|()
operator|.
name|iterator
argument_list|()
init|;
name|names
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|String
name|propName
init|=
operator|(
name|String
operator|)
name|names
operator|.
name|next
argument_list|()
decl_stmt|;
name|SVNPropertyValue
name|propValue
init|=
name|modifiedWCProps
operator|.
name|getSVNPropertyValue
argument_list|(
name|propName
argument_list|)
decl_stmt|;
name|command
operator|.
name|put
argument_list|(
name|SVNLog
operator|.
name|PROPERTY_NAME_ATTR
argument_list|,
name|propName
argument_list|)
expr_stmt|;
if|if
condition|(
name|propValue
operator|!=
literal|null
condition|)
block|{
name|command
operator|.
name|put
argument_list|(
name|SVNLog
operator|.
name|PROPERTY_VALUE_ATTR
argument_list|,
name|propValue
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|command
operator|.
name|remove
argument_list|(
name|SVNLog
operator|.
name|PROPERTY_VALUE_ATTR
argument_list|)
expr_stmt|;
block|}
name|addCommand
argument_list|(
name|SVNLog
operator|.
name|MODIFY_WC_PROPERTY
argument_list|,
name|command
argument_list|,
literal|false
argument_list|)
expr_stmt|;
block|}
block|}
block|}
specifier|public
name|void
name|logTweakEntry
parameter_list|(
name|String
name|name
parameter_list|,
name|String
name|newURL
parameter_list|,
name|long
name|newRevision
parameter_list|)
throws|throws
name|SVNException
block|{
name|SVNProperties
name|attributes
init|=
operator|new
name|SVNProperties
argument_list|()
decl_stmt|;
name|attributes
operator|.
name|put
argument_list|(
name|SVNProperty
operator|.
name|shortPropertyName
argument_list|(
name|SVNProperty
operator|.
name|KIND
argument_list|)
argument_list|,
name|SVNProperty
operator|.
name|KIND_FILE
argument_list|)
expr_stmt|;
name|attributes
operator|.
name|put
argument_list|(
name|SVNProperty
operator|.
name|shortPropertyName
argument_list|(
name|SVNProperty
operator|.
name|REVISION
argument_list|)
argument_list|,
name|Long
operator|.
name|toString
argument_list|(
name|newRevision
argument_list|)
argument_list|)
expr_stmt|;
name|attributes
operator|.
name|put
argument_list|(
name|SVNProperty
operator|.
name|shortPropertyName
argument_list|(
name|SVNProperty
operator|.
name|DELETED
argument_list|)
argument_list|,
name|Boolean
operator|.
name|FALSE
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|attributes
operator|.
name|put
argument_list|(
name|SVNProperty
operator|.
name|shortPropertyName
argument_list|(
name|SVNProperty
operator|.
name|ABSENT
argument_list|)
argument_list|,
name|Boolean
operator|.
name|FALSE
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|attributes
operator|.
name|put
argument_list|(
name|SVNProperty
operator|.
name|shortPropertyName
argument_list|(
name|SVNProperty
operator|.
name|WORKING_SIZE
argument_list|)
argument_list|,
name|Long
operator|.
name|toString
argument_list|(
name|SVNProperty
operator|.
name|WORKING_SIZE_UNKNOWN
argument_list|)
argument_list|)
expr_stmt|;
name|attributes
operator|.
name|put
argument_list|(
name|SVNProperty
operator|.
name|shortPropertyName
argument_list|(
name|SVNProperty
operator|.
name|TEXT_TIME
argument_list|)
argument_list|,
name|SVNDate
operator|.
name|NULL
operator|.
name|format
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|newURL
operator|!=
literal|null
condition|)
block|{
name|attributes
operator|.
name|put
argument_list|(
name|SVNProperty
operator|.
name|shortPropertyName
argument_list|(
name|SVNProperty
operator|.
name|URL
argument_list|)
argument_list|,
name|newURL
argument_list|)
expr_stmt|;
block|}
name|logChangedEntryProperties
argument_list|(
name|name
argument_list|,
name|attributes
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|logRemoveRevertFile
parameter_list|(
name|String
name|name
parameter_list|,
name|SVNAdminArea
name|adminArea
parameter_list|,
name|boolean
name|isProp
parameter_list|)
throws|throws
name|SVNException
block|{
name|String
name|revertPath
init|=
literal|null
decl_stmt|;
if|if
condition|(
name|isProp
condition|)
block|{
name|revertPath
operator|=
name|SVNAdminUtil
operator|.
name|getPropRevertPath
argument_list|(
name|name
argument_list|,
name|SVNNodeKind
operator|.
name|FILE
argument_list|,
literal|false
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|revertPath
operator|=
name|SVNAdminUtil
operator|.
name|getTextRevertPath
argument_list|(
name|name
argument_list|,
literal|false
argument_list|)
expr_stmt|;
block|}
name|File
name|revertFile
init|=
name|adminArea
operator|.
name|getFile
argument_list|(
name|revertPath
argument_list|)
decl_stmt|;
if|if
condition|(
name|revertFile
operator|.
name|isFile
argument_list|()
condition|)
block|{
name|SVNProperties
name|command
init|=
operator|new
name|SVNProperties
argument_list|()
decl_stmt|;
name|command
operator|.
name|put
argument_list|(
name|SVNLog
operator|.
name|NAME_ATTR
argument_list|,
name|revertPath
argument_list|)
expr_stmt|;
name|addCommand
argument_list|(
name|SVNLog
operator|.
name|DELETE
argument_list|,
name|command
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|command
operator|.
name|clear
argument_list|()
expr_stmt|;
block|}
block|}
specifier|public
name|void
name|run
parameter_list|(
name|SVNLogRunner
name|runner
parameter_list|)
throws|throws
name|SVNException
block|{
name|Collection
name|commands
init|=
name|readCommands
argument_list|()
decl_stmt|;
if|if
condition|(
name|commands
operator|==
literal|null
operator|||
name|commands
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
return|return;
block|}
try|try
block|{
name|int
name|count
init|=
literal|0
decl_stmt|;
for|for
control|(
name|Iterator
name|cmds
init|=
name|commands
operator|.
name|iterator
argument_list|()
init|;
name|cmds
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|SVNProperties
name|command
init|=
operator|(
name|SVNProperties
operator|)
name|cmds
operator|.
name|next
argument_list|()
decl_stmt|;
name|String
name|name
init|=
name|command
operator|.
name|getStringValue
argument_list|(
literal|""
argument_list|)
decl_stmt|;
name|String
name|attrName
init|=
name|command
operator|.
name|getStringValue
argument_list|(
name|SVNLog
operator|.
name|NAME_ATTR
argument_list|)
decl_stmt|;
if|if
condition|(
name|attrName
operator|==
literal|null
operator|&&
operator|!
name|SVNLog
operator|.
name|UPGRADE_FORMAT
operator|.
name|equals
argument_list|(
name|name
argument_list|)
condition|)
block|{
name|SVNErrorCode
name|code
init|=
name|count
operator|<=
literal|1
condition|?
name|SVNErrorCode
operator|.
name|WC_BAD_ADM_LOG_START
else|:
name|SVNErrorCode
operator|.
name|WC_BAD_ADM_LOG
decl_stmt|;
name|SVNErrorMessage
name|err
init|=
name|SVNErrorMessage
operator|.
name|create
argument_list|(
name|code
argument_list|,
literal|"Log entry missing ''name'' attribute (entry ''{0}'' for directory ''{1}'')"
argument_list|,
operator|new
name|Object
index|[]
block|{
name|name
block|,
name|myAdminArea
operator|.
name|getRoot
argument_list|()
block|}
argument_list|)
decl_stmt|;
name|SVNErrorManager
operator|.
name|error
argument_list|(
name|err
argument_list|,
name|SVNLogType
operator|.
name|WC
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|runner
operator|!=
literal|null
condition|)
block|{
name|runner
operator|.
name|runCommand
argument_list|(
name|myAdminArea
argument_list|,
name|name
argument_list|,
name|command
argument_list|,
operator|++
name|count
argument_list|)
expr_stmt|;
block|}
name|cmds
operator|.
name|remove
argument_list|()
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
name|SVNException
name|e
parameter_list|)
block|{
comment|// save failed command and unexecuted commands back to the log file.
name|myCache
operator|=
literal|null
expr_stmt|;
for|for
control|(
name|Iterator
name|cmds
init|=
name|commands
operator|.
name|iterator
argument_list|()
init|;
name|cmds
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|SVNProperties
name|command
init|=
operator|(
name|SVNProperties
operator|)
name|cmds
operator|.
name|next
argument_list|()
decl_stmt|;
name|SVNPropertyValue
name|name
init|=
name|command
operator|.
name|remove
argument_list|(
literal|""
argument_list|)
decl_stmt|;
name|addCommand
argument_list|(
name|name
operator|.
name|getString
argument_list|()
argument_list|,
name|command
argument_list|,
literal|false
argument_list|)
expr_stmt|;
block|}
name|save
argument_list|()
expr_stmt|;
throw|throw
name|e
throw|;
block|}
block|}
specifier|protected
specifier|abstract
name|Collection
name|readCommands
parameter_list|()
throws|throws
name|SVNException
function_decl|;
block|}
end_class

end_unit

