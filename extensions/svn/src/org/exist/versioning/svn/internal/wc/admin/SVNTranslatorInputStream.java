begin_unit|revision:1.0.0;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * ====================================================================  * Copyright (c) 2004-2010 TMate Software Ltd.  All rights reserved.  *  * This software is licensed as described in the file COPYING, which  * you should have received as part of this distribution.  The terms  * are also available at http://svnkit.com/license.html  * If newer versions of this license are posted there, you may use a  * newer version instead, at your option.  * ====================================================================  */
end_comment

begin_package
package|package
name|org
operator|.
name|exist
operator|.
name|versioning
operator|.
name|svn
operator|.
name|internal
operator|.
name|wc
operator|.
name|admin
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|InputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|nio
operator|.
name|ByteBuffer
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|org
operator|.
name|tmatesoft
operator|.
name|svn
operator|.
name|core
operator|.
name|SVNException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|tmatesoft
operator|.
name|svn
operator|.
name|core
operator|.
name|internal
operator|.
name|wc
operator|.
name|IOExceptionWrapper
import|;
end_import

begin_import
import|import
name|org
operator|.
name|tmatesoft
operator|.
name|svn
operator|.
name|core
operator|.
name|internal
operator|.
name|wc
operator|.
name|SVNSubstitutor
import|;
end_import

begin_comment
comment|/**  * @version 1.3  * @author  TMate Software Ltd.  */
end_comment

begin_class
specifier|public
class|class
name|SVNTranslatorInputStream
extends|extends
name|InputStream
block|{
specifier|private
name|InputStream
name|mySource
decl_stmt|;
specifier|private
name|ByteBuffer
name|myTranslatedBuffer
decl_stmt|;
specifier|private
name|SVNSubstitutor
name|mySubstitutor
decl_stmt|;
specifier|private
name|byte
index|[]
name|mySourceBuffer
decl_stmt|;
specifier|public
name|SVNTranslatorInputStream
parameter_list|(
name|InputStream
name|source
parameter_list|,
name|byte
index|[]
name|eols
parameter_list|,
name|boolean
name|repair
parameter_list|,
name|Map
name|keywords
parameter_list|,
name|boolean
name|expand
parameter_list|)
block|{
name|mySource
operator|=
name|source
expr_stmt|;
name|mySubstitutor
operator|=
operator|new
name|SVNSubstitutor
argument_list|(
name|eols
argument_list|,
name|repair
argument_list|,
name|keywords
argument_list|,
name|expand
argument_list|)
expr_stmt|;
name|myTranslatedBuffer
operator|=
name|ByteBuffer
operator|.
name|allocate
argument_list|(
literal|2048
argument_list|)
expr_stmt|;
name|mySourceBuffer
operator|=
operator|new
name|byte
index|[
literal|2048
index|]
expr_stmt|;
block|}
specifier|public
name|int
name|read
parameter_list|()
throws|throws
name|IOException
block|{
name|byte
index|[]
name|b
init|=
operator|new
name|byte
index|[
literal|1
index|]
decl_stmt|;
name|int
name|r
init|=
name|read
argument_list|(
name|b
argument_list|)
decl_stmt|;
if|if
condition|(
name|r
operator|<=
literal|0
condition|)
block|{
return|return
operator|-
literal|1
return|;
block|}
return|return
name|b
index|[
literal|0
index|]
operator|&
literal|0xFF
return|;
block|}
specifier|public
name|int
name|read
parameter_list|(
name|byte
index|[]
name|b
parameter_list|)
throws|throws
name|IOException
block|{
return|return
name|read
argument_list|(
name|b
argument_list|,
literal|0
argument_list|,
name|b
operator|.
name|length
argument_list|)
return|;
block|}
specifier|public
name|int
name|read
parameter_list|(
name|byte
index|[]
name|b
parameter_list|,
name|int
name|off
parameter_list|,
name|int
name|len
parameter_list|)
throws|throws
name|IOException
block|{
name|boolean
name|isEOF
init|=
literal|false
decl_stmt|;
name|int
name|available
init|=
name|myTranslatedBuffer
operator|.
name|position
argument_list|()
decl_stmt|;
while|while
condition|(
name|available
operator|<
name|len
condition|)
block|{
name|int
name|read
init|=
name|mySource
operator|.
name|read
argument_list|(
name|mySourceBuffer
argument_list|,
literal|0
argument_list|,
name|mySourceBuffer
operator|.
name|length
argument_list|)
decl_stmt|;
if|if
condition|(
name|read
operator|<
literal|0
condition|)
block|{
name|isEOF
operator|=
literal|true
expr_stmt|;
try|try
block|{
name|myTranslatedBuffer
operator|=
name|mySubstitutor
operator|.
name|translateChunk
argument_list|(
literal|null
argument_list|,
name|myTranslatedBuffer
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|SVNException
name|svne
parameter_list|)
block|{
name|IOExceptionWrapper
name|wrappedException
init|=
operator|new
name|IOExceptionWrapper
argument_list|(
name|svne
argument_list|)
decl_stmt|;
throw|throw
name|wrappedException
throw|;
block|}
break|break;
block|}
try|try
block|{
name|myTranslatedBuffer
operator|=
name|mySubstitutor
operator|.
name|translateChunk
argument_list|(
name|ByteBuffer
operator|.
name|wrap
argument_list|(
name|mySourceBuffer
argument_list|,
literal|0
argument_list|,
name|read
argument_list|)
argument_list|,
name|myTranslatedBuffer
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|SVNException
name|svne
parameter_list|)
block|{
name|IOExceptionWrapper
name|wrappedException
init|=
operator|new
name|IOExceptionWrapper
argument_list|(
name|svne
argument_list|)
decl_stmt|;
throw|throw
name|wrappedException
throw|;
block|}
name|available
operator|=
name|myTranslatedBuffer
operator|.
name|position
argument_list|()
expr_stmt|;
block|}
name|myTranslatedBuffer
operator|.
name|flip
argument_list|()
expr_stmt|;
name|len
operator|=
name|Math
operator|.
name|min
argument_list|(
name|myTranslatedBuffer
operator|.
name|remaining
argument_list|()
argument_list|,
name|len
argument_list|)
expr_stmt|;
name|myTranslatedBuffer
operator|.
name|get
argument_list|(
name|b
argument_list|,
name|off
argument_list|,
name|len
argument_list|)
expr_stmt|;
name|myTranslatedBuffer
operator|.
name|compact
argument_list|()
expr_stmt|;
if|if
condition|(
name|isEOF
operator|&&
name|len
operator|==
literal|0
condition|)
block|{
return|return
operator|-
literal|1
return|;
block|}
return|return
name|len
return|;
block|}
specifier|public
name|void
name|close
parameter_list|()
throws|throws
name|IOException
block|{
name|mySource
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
block|}
end_class

end_unit

