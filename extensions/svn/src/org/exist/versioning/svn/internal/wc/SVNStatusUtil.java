begin_unit|revision:1.0.0;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * ====================================================================  * Copyright (c) 2004-2010 TMate Software Ltd.  All rights reserved.  *  * This software is licensed as described in the file COPYING, which  * you should have received as part of this distribution.  The terms  * are also available at http://svnkit.com/license.html.  * If newer versions of this license are posted there, you may use a  * newer version instead, at your option.  * ====================================================================  */
end_comment

begin_package
package|package
name|org
operator|.
name|exist
operator|.
name|versioning
operator|.
name|svn
operator|.
name|internal
operator|.
name|wc
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|File
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|versioning
operator|.
name|svn
operator|.
name|internal
operator|.
name|wc
operator|.
name|admin
operator|.
name|SVNAdminArea
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|versioning
operator|.
name|svn
operator|.
name|internal
operator|.
name|wc
operator|.
name|admin
operator|.
name|SVNAdminAreaInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|versioning
operator|.
name|svn
operator|.
name|internal
operator|.
name|wc
operator|.
name|admin
operator|.
name|SVNEntry
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|versioning
operator|.
name|svn
operator|.
name|internal
operator|.
name|wc
operator|.
name|admin
operator|.
name|SVNWCAccess
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|versioning
operator|.
name|svn
operator|.
name|wc
operator|.
name|ISVNEventHandler
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|versioning
operator|.
name|svn
operator|.
name|wc
operator|.
name|ISVNStatusHandler
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|versioning
operator|.
name|svn
operator|.
name|wc
operator|.
name|SVNStatus
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|versioning
operator|.
name|svn
operator|.
name|wc
operator|.
name|SVNStatusType
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|versioning
operator|.
name|svn
operator|.
name|wc
operator|.
name|SVNTreeConflictDescription
import|;
end_import

begin_import
import|import
name|org
operator|.
name|tmatesoft
operator|.
name|svn
operator|.
name|core
operator|.
name|SVNDepth
import|;
end_import

begin_import
import|import
name|org
operator|.
name|tmatesoft
operator|.
name|svn
operator|.
name|core
operator|.
name|SVNException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|tmatesoft
operator|.
name|svn
operator|.
name|core
operator|.
name|SVNLock
import|;
end_import

begin_import
import|import
name|org
operator|.
name|tmatesoft
operator|.
name|svn
operator|.
name|core
operator|.
name|SVNNodeKind
import|;
end_import

begin_import
import|import
name|org
operator|.
name|tmatesoft
operator|.
name|svn
operator|.
name|core
operator|.
name|SVNProperty
import|;
end_import

begin_import
import|import
name|org
operator|.
name|tmatesoft
operator|.
name|svn
operator|.
name|core
operator|.
name|SVNURL
import|;
end_import

begin_import
import|import
name|org
operator|.
name|tmatesoft
operator|.
name|svn
operator|.
name|core
operator|.
name|internal
operator|.
name|util
operator|.
name|SVNDate
import|;
end_import

begin_import
import|import
name|org
operator|.
name|tmatesoft
operator|.
name|svn
operator|.
name|core
operator|.
name|internal
operator|.
name|util
operator|.
name|SVNEncodingUtil
import|;
end_import

begin_import
import|import
name|org
operator|.
name|tmatesoft
operator|.
name|svn
operator|.
name|core
operator|.
name|internal
operator|.
name|util
operator|.
name|SVNPathUtil
import|;
end_import

begin_import
import|import
name|org
operator|.
name|tmatesoft
operator|.
name|svn
operator|.
name|core
operator|.
name|io
operator|.
name|SVNRepository
import|;
end_import

begin_import
import|import
name|org
operator|.
name|tmatesoft
operator|.
name|svn
operator|.
name|core
operator|.
name|wc
operator|.
name|SVNRevision
import|;
end_import

begin_comment
comment|/**  * @version 1.3  * @author  TMate Software Ltd.  */
end_comment

begin_class
specifier|public
class|class
name|SVNStatusUtil
block|{
specifier|public
specifier|static
name|SVNRevisionStatus
name|getRevisionStatus
parameter_list|(
specifier|final
name|File
name|wcPath
parameter_list|,
name|String
name|trailURL
parameter_list|,
specifier|final
name|boolean
name|committed
parameter_list|,
name|ISVNEventHandler
name|eventHandler
parameter_list|)
throws|throws
name|SVNException
block|{
name|SVNWCAccess
name|wcAccess
init|=
literal|null
decl_stmt|;
try|try
block|{
name|wcAccess
operator|=
name|SVNWCAccess
operator|.
name|newInstance
argument_list|(
name|eventHandler
argument_list|)
expr_stmt|;
name|SVNAdminAreaInfo
name|anchor
init|=
name|wcAccess
operator|.
name|openAnchor
argument_list|(
name|wcPath
argument_list|,
literal|false
argument_list|,
name|SVNWCAccess
operator|.
name|INFINITE_DEPTH
argument_list|)
decl_stmt|;
specifier|final
name|long
index|[]
name|minRev
init|=
block|{
name|SVNRepository
operator|.
name|INVALID_REVISION
block|}
decl_stmt|;
specifier|final
name|long
index|[]
name|maxRev
init|=
block|{
name|SVNRepository
operator|.
name|INVALID_REVISION
block|}
decl_stmt|;
specifier|final
name|boolean
index|[]
name|isSwitched
init|=
block|{
literal|false
block|,
literal|false
block|,
literal|false
block|}
decl_stmt|;
specifier|final
name|boolean
index|[]
name|isModified
init|=
block|{
literal|false
block|}
decl_stmt|;
specifier|final
name|boolean
index|[]
name|isSparseCheckOut
init|=
block|{
literal|false
block|}
decl_stmt|;
specifier|final
name|SVNURL
index|[]
name|wcURL
init|=
block|{
literal|null
block|}
decl_stmt|;
name|SVNStatusEditor
name|editor
init|=
operator|new
name|SVNStatusEditor
argument_list|(
literal|null
argument_list|,
name|wcAccess
argument_list|,
name|anchor
argument_list|,
literal|false
argument_list|,
literal|true
argument_list|,
name|SVNDepth
operator|.
name|INFINITY
argument_list|,
operator|new
name|ISVNStatusHandler
argument_list|()
block|{
specifier|public
name|void
name|handleStatus
parameter_list|(
name|SVNStatus
name|status
parameter_list|)
throws|throws
name|SVNException
block|{
name|SVNEntry
name|entry
init|=
name|status
operator|.
name|getEntry
argument_list|()
decl_stmt|;
if|if
condition|(
name|entry
operator|==
literal|null
condition|)
block|{
return|return;
block|}
if|if
condition|(
name|status
operator|.
name|getContentsStatus
argument_list|()
operator|!=
name|SVNStatusType
operator|.
name|STATUS_ADDED
condition|)
block|{
name|long
name|itemRev
init|=
name|committed
condition|?
name|entry
operator|.
name|getCommittedRevision
argument_list|()
else|:
name|entry
operator|.
name|getRevision
argument_list|()
decl_stmt|;
if|if
condition|(
operator|!
name|SVNRevision
operator|.
name|isValidRevisionNumber
argument_list|(
name|minRev
index|[
literal|0
index|]
argument_list|)
operator|||
name|itemRev
operator|<
name|minRev
index|[
literal|0
index|]
condition|)
block|{
name|minRev
index|[
literal|0
index|]
operator|=
name|itemRev
expr_stmt|;
block|}
if|if
condition|(
operator|!
name|SVNRevision
operator|.
name|isValidRevisionNumber
argument_list|(
name|maxRev
index|[
literal|0
index|]
argument_list|)
operator|||
name|itemRev
operator|>
name|maxRev
index|[
literal|0
index|]
condition|)
block|{
name|maxRev
index|[
literal|0
index|]
operator|=
name|itemRev
expr_stmt|;
block|}
block|}
name|isSwitched
index|[
literal|0
index|]
operator||=
name|status
operator|.
name|isSwitched
argument_list|()
expr_stmt|;
name|isModified
index|[
literal|0
index|]
operator||=
name|status
operator|.
name|getContentsStatus
argument_list|()
operator|!=
name|SVNStatusType
operator|.
name|STATUS_NORMAL
expr_stmt|;
name|isModified
index|[
literal|0
index|]
operator||=
name|status
operator|.
name|getPropertiesStatus
argument_list|()
operator|!=
name|SVNStatusType
operator|.
name|STATUS_NORMAL
operator|&&
name|status
operator|.
name|getPropertiesStatus
argument_list|()
operator|!=
name|SVNStatusType
operator|.
name|STATUS_NONE
expr_stmt|;
name|isSparseCheckOut
index|[
literal|0
index|]
operator||=
name|entry
operator|.
name|getDepth
argument_list|()
operator|!=
name|SVNDepth
operator|.
name|INFINITY
expr_stmt|;
if|if
condition|(
name|wcPath
operator|!=
literal|null
operator|&&
name|wcURL
index|[
literal|0
index|]
operator|==
literal|null
operator|&&
name|wcPath
operator|.
name|equals
argument_list|(
name|status
operator|.
name|getFile
argument_list|()
argument_list|)
condition|)
block|{
name|wcURL
index|[
literal|0
index|]
operator|=
name|entry
operator|.
name|getSVNURL
argument_list|()
expr_stmt|;
block|}
block|}
block|}
argument_list|)
decl_stmt|;
name|editor
operator|.
name|closeEdit
argument_list|()
expr_stmt|;
if|if
condition|(
operator|!
name|isSwitched
index|[
literal|0
index|]
operator|&&
name|trailURL
operator|!=
literal|null
condition|)
block|{
if|if
condition|(
name|wcURL
index|[
literal|0
index|]
operator|==
literal|null
condition|)
block|{
name|isSwitched
index|[
literal|0
index|]
operator|=
literal|true
expr_stmt|;
block|}
else|else
block|{
name|String
name|wcURLStr
init|=
name|wcURL
index|[
literal|0
index|]
operator|.
name|toDecodedString
argument_list|()
decl_stmt|;
if|if
condition|(
name|trailURL
operator|.
name|length
argument_list|()
operator|>
name|wcURLStr
operator|.
name|length
argument_list|()
operator|||
operator|!
name|wcURLStr
operator|.
name|endsWith
argument_list|(
name|trailURL
argument_list|)
condition|)
block|{
name|isSwitched
index|[
literal|0
index|]
operator|=
literal|true
expr_stmt|;
block|}
block|}
block|}
return|return
operator|new
name|SVNRevisionStatus
argument_list|(
name|minRev
index|[
literal|0
index|]
argument_list|,
name|maxRev
index|[
literal|0
index|]
argument_list|,
name|isSwitched
index|[
literal|0
index|]
argument_list|,
name|isModified
index|[
literal|0
index|]
argument_list|,
name|isSparseCheckOut
index|[
literal|0
index|]
argument_list|)
return|;
block|}
finally|finally
block|{
name|wcAccess
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
block|}
specifier|public
specifier|static
name|SVNStatus
name|getStatus
parameter_list|(
name|File
name|path
parameter_list|,
name|SVNWCAccess
name|wcAccess
parameter_list|)
throws|throws
name|SVNException
block|{
name|SVNEntry
name|entry
init|=
literal|null
decl_stmt|;
name|SVNEntry
name|parentEntry
init|=
literal|null
decl_stmt|;
name|SVNAdminArea
name|adminArea
init|=
literal|null
decl_stmt|;
if|if
condition|(
name|wcAccess
operator|!=
literal|null
condition|)
block|{
name|entry
operator|=
name|wcAccess
operator|.
name|getEntry
argument_list|(
name|path
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|adminArea
operator|=
name|entry
operator|!=
literal|null
condition|?
name|entry
operator|.
name|getAdminArea
argument_list|()
else|:
literal|null
expr_stmt|;
block|}
name|File
name|parentPath
init|=
name|path
operator|.
name|getParentFile
argument_list|()
decl_stmt|;
if|if
condition|(
name|entry
operator|!=
literal|null
operator|&&
name|parentPath
operator|!=
literal|null
condition|)
block|{
name|SVNAdminArea
name|parentArea
init|=
name|wcAccess
operator|.
name|retrieve
argument_list|(
name|parentPath
argument_list|)
decl_stmt|;
if|if
condition|(
name|parentArea
operator|!=
literal|null
condition|)
block|{
name|parentEntry
operator|=
name|wcAccess
operator|.
name|getEntry
argument_list|(
name|parentPath
argument_list|,
literal|false
argument_list|)
expr_stmt|;
block|}
block|}
return|return
name|assembleStatus
argument_list|(
name|path
argument_list|,
name|adminArea
argument_list|,
name|entry
argument_list|,
name|parentEntry
argument_list|,
name|SVNNodeKind
operator|.
name|UNKNOWN
argument_list|,
literal|false
argument_list|,
literal|true
argument_list|,
literal|false
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|,
name|wcAccess
argument_list|)
return|;
block|}
specifier|public
specifier|static
name|SVNStatus
name|assembleStatus
parameter_list|(
name|File
name|file
parameter_list|,
name|SVNAdminArea
name|dir
parameter_list|,
name|SVNEntry
name|entry
parameter_list|,
name|SVNEntry
name|parentEntry
parameter_list|,
name|SVNNodeKind
name|fileKind
parameter_list|,
name|boolean
name|special
parameter_list|,
name|boolean
name|reportAll
parameter_list|,
name|boolean
name|isIgnored
parameter_list|,
name|Map
name|repositoryLocks
parameter_list|,
name|SVNURL
name|reposRoot
parameter_list|,
name|SVNWCAccess
name|wcAccess
parameter_list|)
throws|throws
name|SVNException
block|{
name|boolean
name|hasProps
init|=
literal|false
decl_stmt|;
name|boolean
name|isTextModified
init|=
literal|false
decl_stmt|;
name|boolean
name|isPropsModified
init|=
literal|false
decl_stmt|;
name|boolean
name|isLocked
init|=
literal|false
decl_stmt|;
name|boolean
name|isSwitched
init|=
literal|false
decl_stmt|;
name|boolean
name|isSpecial
init|=
literal|false
decl_stmt|;
name|boolean
name|isFileExternal
init|=
literal|false
decl_stmt|;
name|SVNStatusType
name|textStatus
init|=
name|SVNStatusType
operator|.
name|STATUS_NORMAL
decl_stmt|;
name|SVNStatusType
name|propStatus
init|=
name|SVNStatusType
operator|.
name|STATUS_NONE
decl_stmt|;
name|SVNLock
name|repositoryLock
init|=
literal|null
decl_stmt|;
if|if
condition|(
name|repositoryLocks
operator|!=
literal|null
condition|)
block|{
name|SVNURL
name|url
init|=
literal|null
decl_stmt|;
if|if
condition|(
name|entry
operator|!=
literal|null
operator|&&
name|entry
operator|.
name|getSVNURL
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|url
operator|=
name|entry
operator|.
name|getSVNURL
argument_list|()
expr_stmt|;
block|}
if|else if
condition|(
name|parentEntry
operator|!=
literal|null
operator|&&
name|parentEntry
operator|.
name|getSVNURL
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|url
operator|=
name|parentEntry
operator|.
name|getSVNURL
argument_list|()
operator|.
name|appendPath
argument_list|(
name|file
operator|.
name|getName
argument_list|()
argument_list|,
literal|false
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|url
operator|!=
literal|null
condition|)
block|{
name|repositoryLock
operator|=
name|getLock
argument_list|(
name|repositoryLocks
argument_list|,
name|url
argument_list|,
name|reposRoot
argument_list|)
expr_stmt|;
block|}
block|}
if|if
condition|(
name|fileKind
operator|==
name|SVNNodeKind
operator|.
name|UNKNOWN
operator|||
name|fileKind
operator|==
literal|null
condition|)
block|{
name|SVNFileType
name|fileType
init|=
name|SVNFileType
operator|.
name|getType
argument_list|(
name|file
argument_list|)
decl_stmt|;
name|fileKind
operator|=
name|SVNFileType
operator|.
name|getNodeKind
argument_list|(
name|fileType
argument_list|)
expr_stmt|;
name|special
operator|=
operator|!
name|SVNFileUtil
operator|.
name|symlinksSupported
argument_list|()
condition|?
literal|false
else|:
name|fileType
operator|==
name|SVNFileType
operator|.
name|SYMLINK
expr_stmt|;
block|}
name|SVNTreeConflictDescription
name|treeConflict
init|=
name|wcAccess
operator|.
name|getTreeConflict
argument_list|(
name|file
argument_list|)
decl_stmt|;
if|if
condition|(
name|entry
operator|==
literal|null
condition|)
block|{
name|SVNStatus
name|status
init|=
operator|new
name|SVNStatus
argument_list|(
literal|null
argument_list|,
name|file
argument_list|,
name|SVNNodeKind
operator|.
name|UNKNOWN
argument_list|,
name|SVNRevision
operator|.
name|UNDEFINED
argument_list|,
name|SVNRevision
operator|.
name|UNDEFINED
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|,
name|SVNStatusType
operator|.
name|STATUS_NONE
argument_list|,
name|SVNStatusType
operator|.
name|STATUS_NONE
argument_list|,
name|SVNStatusType
operator|.
name|STATUS_NONE
argument_list|,
name|SVNStatusType
operator|.
name|STATUS_NONE
argument_list|,
literal|false
argument_list|,
literal|false
argument_list|,
literal|false
argument_list|,
literal|false
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|,
name|SVNRevision
operator|.
name|UNDEFINED
argument_list|,
name|repositoryLock
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|,
operator|-
literal|1
argument_list|,
name|treeConflict
argument_list|)
decl_stmt|;
name|status
operator|.
name|setRemoteStatus
argument_list|(
name|SVNStatusType
operator|.
name|STATUS_NONE
argument_list|,
name|SVNStatusType
operator|.
name|STATUS_NONE
argument_list|,
name|repositoryLock
argument_list|,
name|SVNNodeKind
operator|.
name|NONE
argument_list|)
expr_stmt|;
name|SVNStatusType
name|text
init|=
name|SVNStatusType
operator|.
name|STATUS_NONE
decl_stmt|;
name|SVNFileType
name|fileType
init|=
name|SVNFileType
operator|.
name|getType
argument_list|(
name|file
argument_list|)
decl_stmt|;
if|if
condition|(
name|fileType
operator|!=
name|SVNFileType
operator|.
name|NONE
condition|)
block|{
name|text
operator|=
name|isIgnored
condition|?
name|SVNStatusType
operator|.
name|STATUS_IGNORED
else|:
name|SVNStatusType
operator|.
name|STATUS_UNVERSIONED
expr_stmt|;
block|}
if|if
condition|(
name|fileType
operator|==
name|SVNFileType
operator|.
name|NONE
operator|&&
name|treeConflict
operator|!=
literal|null
condition|)
block|{
name|text
operator|=
name|SVNStatusType
operator|.
name|STATUS_MISSING
expr_stmt|;
block|}
name|status
operator|.
name|setContentsStatus
argument_list|(
name|text
argument_list|)
expr_stmt|;
return|return
name|status
return|;
block|}
if|if
condition|(
name|entry
operator|.
name|getKind
argument_list|()
operator|==
name|SVNNodeKind
operator|.
name|DIR
condition|)
block|{
if|if
condition|(
name|fileKind
operator|==
name|SVNNodeKind
operator|.
name|DIR
condition|)
block|{
if|if
condition|(
name|wcAccess
operator|.
name|isMissing
argument_list|(
name|file
argument_list|)
condition|)
block|{
name|textStatus
operator|=
name|SVNStatusType
operator|.
name|STATUS_OBSTRUCTED
expr_stmt|;
block|}
block|}
if|else if
condition|(
name|fileKind
operator|!=
name|SVNNodeKind
operator|.
name|NONE
condition|)
block|{
name|textStatus
operator|=
name|SVNStatusType
operator|.
name|STATUS_OBSTRUCTED
expr_stmt|;
block|}
block|}
if|if
condition|(
name|entry
operator|.
name|getExternalFilePath
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|isFileExternal
operator|=
literal|true
expr_stmt|;
block|}
if|else if
condition|(
name|entry
operator|.
name|getSVNURL
argument_list|()
operator|!=
literal|null
operator|&&
name|parentEntry
operator|!=
literal|null
operator|&&
name|parentEntry
operator|.
name|getSVNURL
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|String
name|urlName
init|=
name|SVNPathUtil
operator|.
name|tail
argument_list|(
name|entry
operator|.
name|getSVNURL
argument_list|()
operator|.
name|getURIEncodedPath
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|SVNEncodingUtil
operator|.
name|uriEncode
argument_list|(
name|file
operator|.
name|getName
argument_list|()
argument_list|)
operator|.
name|equals
argument_list|(
name|urlName
argument_list|)
condition|)
block|{
name|isSwitched
operator|=
literal|true
expr_stmt|;
block|}
if|if
condition|(
operator|!
name|isSwitched
operator|&&
operator|!
name|entry
operator|.
name|getSVNURL
argument_list|()
operator|.
name|removePathTail
argument_list|()
operator|.
name|equals
argument_list|(
name|parentEntry
operator|.
name|getSVNURL
argument_list|()
argument_list|)
condition|)
block|{
name|isSwitched
operator|=
literal|true
expr_stmt|;
block|}
block|}
if|if
condition|(
name|textStatus
operator|!=
name|SVNStatusType
operator|.
name|STATUS_OBSTRUCTED
condition|)
block|{
name|String
name|name
init|=
name|entry
operator|.
name|getName
argument_list|()
decl_stmt|;
if|if
condition|(
name|dir
operator|!=
literal|null
operator|&&
name|dir
operator|.
name|hasProperties
argument_list|(
name|name
argument_list|)
condition|)
block|{
name|propStatus
operator|=
name|SVNStatusType
operator|.
name|STATUS_NORMAL
expr_stmt|;
name|hasProps
operator|=
literal|true
expr_stmt|;
block|}
name|isPropsModified
operator|=
name|dir
operator|!=
literal|null
operator|&&
name|dir
operator|.
name|hasPropModifications
argument_list|(
name|name
argument_list|)
expr_stmt|;
if|if
condition|(
name|hasProps
condition|)
block|{
name|isSpecial
operator|=
name|dir
operator|!=
literal|null
operator|&&
name|dir
operator|.
name|getProperties
argument_list|(
name|name
argument_list|)
operator|.
name|getPropertyValue
argument_list|(
name|SVNProperty
operator|.
name|SPECIAL
argument_list|)
operator|!=
literal|null
expr_stmt|;
block|}
if|if
condition|(
name|entry
operator|.
name|getKind
argument_list|()
operator|==
name|SVNNodeKind
operator|.
name|FILE
operator|&&
name|special
operator|==
name|isSpecial
condition|)
block|{
name|isTextModified
operator|=
name|dir
operator|!=
literal|null
operator|&&
name|dir
operator|.
name|hasTextModifications
argument_list|(
name|name
argument_list|,
literal|false
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|isTextModified
condition|)
block|{
name|textStatus
operator|=
name|SVNStatusType
operator|.
name|STATUS_MODIFIED
expr_stmt|;
block|}
if|if
condition|(
name|isPropsModified
condition|)
block|{
name|propStatus
operator|=
name|SVNStatusType
operator|.
name|STATUS_MODIFIED
expr_stmt|;
block|}
if|if
condition|(
name|entry
operator|.
name|getPropRejectFile
argument_list|()
operator|!=
literal|null
operator|||
name|entry
operator|.
name|getConflictOld
argument_list|()
operator|!=
literal|null
operator|||
name|entry
operator|.
name|getConflictNew
argument_list|()
operator|!=
literal|null
operator|||
name|entry
operator|.
name|getConflictWorking
argument_list|()
operator|!=
literal|null
condition|)
block|{
if|if
condition|(
name|dir
operator|!=
literal|null
operator|&&
name|dir
operator|.
name|hasTextConflict
argument_list|(
name|name
argument_list|)
condition|)
block|{
name|textStatus
operator|=
name|SVNStatusType
operator|.
name|STATUS_CONFLICTED
expr_stmt|;
block|}
if|if
condition|(
name|dir
operator|!=
literal|null
operator|&&
name|dir
operator|.
name|hasPropConflict
argument_list|(
name|name
argument_list|)
condition|)
block|{
name|propStatus
operator|=
name|SVNStatusType
operator|.
name|STATUS_CONFLICTED
expr_stmt|;
block|}
block|}
if|if
condition|(
name|entry
operator|.
name|isScheduledForAddition
argument_list|()
operator|&&
name|textStatus
operator|!=
name|SVNStatusType
operator|.
name|STATUS_CONFLICTED
condition|)
block|{
name|textStatus
operator|=
name|SVNStatusType
operator|.
name|STATUS_ADDED
expr_stmt|;
name|propStatus
operator|=
name|SVNStatusType
operator|.
name|STATUS_NONE
expr_stmt|;
block|}
if|else if
condition|(
name|entry
operator|.
name|isScheduledForReplacement
argument_list|()
operator|&&
name|textStatus
operator|!=
name|SVNStatusType
operator|.
name|STATUS_CONFLICTED
condition|)
block|{
name|textStatus
operator|=
name|SVNStatusType
operator|.
name|STATUS_REPLACED
expr_stmt|;
name|propStatus
operator|=
name|SVNStatusType
operator|.
name|STATUS_NONE
expr_stmt|;
block|}
if|else if
condition|(
name|entry
operator|.
name|isScheduledForDeletion
argument_list|()
operator|&&
name|textStatus
operator|!=
name|SVNStatusType
operator|.
name|STATUS_CONFLICTED
condition|)
block|{
name|textStatus
operator|=
name|SVNStatusType
operator|.
name|STATUS_DELETED
expr_stmt|;
name|propStatus
operator|=
name|SVNStatusType
operator|.
name|STATUS_NONE
expr_stmt|;
block|}
if|if
condition|(
name|entry
operator|.
name|isIncomplete
argument_list|()
operator|&&
name|textStatus
operator|!=
name|SVNStatusType
operator|.
name|STATUS_DELETED
operator|&&
name|textStatus
operator|!=
name|SVNStatusType
operator|.
name|STATUS_ADDED
condition|)
block|{
name|textStatus
operator|=
name|SVNStatusType
operator|.
name|STATUS_INCOMPLETE
expr_stmt|;
block|}
if|else if
condition|(
name|fileKind
operator|==
name|SVNNodeKind
operator|.
name|NONE
condition|)
block|{
if|if
condition|(
name|textStatus
operator|!=
name|SVNStatusType
operator|.
name|STATUS_DELETED
condition|)
block|{
name|textStatus
operator|=
name|SVNStatusType
operator|.
name|STATUS_MISSING
expr_stmt|;
block|}
block|}
if|else if
condition|(
name|fileKind
operator|!=
name|entry
operator|.
name|getKind
argument_list|()
condition|)
block|{
name|textStatus
operator|=
name|SVNStatusType
operator|.
name|STATUS_OBSTRUCTED
expr_stmt|;
block|}
if|else if
condition|(
operator|(
operator|!
name|isSpecial
operator|&&
name|special
operator|)
operator|||
operator|(
name|isSpecial
operator|&&
operator|!
name|special
operator|)
condition|)
block|{
name|textStatus
operator|=
name|SVNStatusType
operator|.
name|STATUS_OBSTRUCTED
expr_stmt|;
block|}
if|if
condition|(
name|fileKind
operator|==
name|SVNNodeKind
operator|.
name|DIR
operator|&&
name|entry
operator|.
name|getKind
argument_list|()
operator|==
name|SVNNodeKind
operator|.
name|DIR
condition|)
block|{
name|isLocked
operator|=
name|wcAccess
operator|.
name|isLocked
argument_list|(
name|file
argument_list|)
expr_stmt|;
block|}
block|}
if|if
condition|(
operator|!
name|reportAll
condition|)
block|{
if|if
condition|(
operator|(
name|textStatus
operator|==
name|SVNStatusType
operator|.
name|STATUS_NONE
operator|||
name|textStatus
operator|==
name|SVNStatusType
operator|.
name|STATUS_NORMAL
operator|)
operator|&&
operator|(
name|propStatus
operator|==
name|SVNStatusType
operator|.
name|STATUS_NONE
operator|||
name|propStatus
operator|==
name|SVNStatusType
operator|.
name|STATUS_NORMAL
operator|)
operator|&&
operator|!
name|isLocked
operator|&&
operator|!
name|isSwitched
operator|&&
name|entry
operator|.
name|getLockToken
argument_list|()
operator|==
literal|null
operator|&&
name|repositoryLock
operator|==
literal|null
operator|&&
name|entry
operator|.
name|getChangelistName
argument_list|()
operator|==
literal|null
operator|&&
operator|!
name|isFileExternal
operator|&&
name|treeConflict
operator|==
literal|null
condition|)
block|{
return|return
literal|null
return|;
block|}
block|}
name|SVNLock
name|localLock
init|=
literal|null
decl_stmt|;
if|if
condition|(
name|entry
operator|.
name|getLockToken
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|localLock
operator|=
operator|new
name|SVNLock
argument_list|(
literal|null
argument_list|,
name|entry
operator|.
name|getLockToken
argument_list|()
argument_list|,
name|entry
operator|.
name|getLockOwner
argument_list|()
argument_list|,
name|entry
operator|.
name|getLockComment
argument_list|()
argument_list|,
name|SVNDate
operator|.
name|parseDate
argument_list|(
name|entry
operator|.
name|getLockCreationDate
argument_list|()
argument_list|)
argument_list|,
literal|null
argument_list|)
expr_stmt|;
block|}
name|File
name|conflictNew
init|=
name|dir
operator|!=
literal|null
condition|?
name|dir
operator|.
name|getFile
argument_list|(
name|entry
operator|.
name|getConflictNew
argument_list|()
argument_list|)
else|:
literal|null
decl_stmt|;
name|File
name|conflictOld
init|=
name|dir
operator|!=
literal|null
condition|?
name|dir
operator|.
name|getFile
argument_list|(
name|entry
operator|.
name|getConflictOld
argument_list|()
argument_list|)
else|:
literal|null
decl_stmt|;
name|File
name|conflictWrk
init|=
name|dir
operator|!=
literal|null
condition|?
name|dir
operator|.
name|getFile
argument_list|(
name|entry
operator|.
name|getConflictWorking
argument_list|()
argument_list|)
else|:
literal|null
decl_stmt|;
name|File
name|conflictProp
init|=
name|dir
operator|!=
literal|null
condition|?
name|dir
operator|.
name|getFile
argument_list|(
name|entry
operator|.
name|getPropRejectFile
argument_list|()
argument_list|)
else|:
literal|null
decl_stmt|;
name|int
name|wcFormatNumber
init|=
name|dir
operator|!=
literal|null
condition|?
name|dir
operator|.
name|getWorkingCopyFormatVersion
argument_list|()
else|:
operator|-
literal|1
decl_stmt|;
name|SVNStatus
name|status
init|=
operator|new
name|SVNStatus
argument_list|(
name|entry
operator|.
name|getSVNURL
argument_list|()
argument_list|,
name|file
argument_list|,
name|entry
operator|.
name|getKind
argument_list|()
argument_list|,
name|SVNRevision
operator|.
name|create
argument_list|(
name|entry
operator|.
name|getRevision
argument_list|()
argument_list|)
argument_list|,
name|SVNRevision
operator|.
name|create
argument_list|(
name|entry
operator|.
name|getCommittedRevision
argument_list|()
argument_list|)
argument_list|,
name|SVNDate
operator|.
name|parseDate
argument_list|(
name|entry
operator|.
name|getCommittedDate
argument_list|()
argument_list|)
argument_list|,
name|entry
operator|.
name|getAuthor
argument_list|()
argument_list|,
name|textStatus
argument_list|,
name|propStatus
argument_list|,
name|SVNStatusType
operator|.
name|STATUS_NONE
argument_list|,
name|SVNStatusType
operator|.
name|STATUS_NONE
argument_list|,
name|isLocked
argument_list|,
name|entry
operator|.
name|isCopied
argument_list|()
argument_list|,
name|isSwitched
argument_list|,
name|isFileExternal
argument_list|,
name|conflictNew
argument_list|,
name|conflictOld
argument_list|,
name|conflictWrk
argument_list|,
name|conflictProp
argument_list|,
name|entry
operator|.
name|getCopyFromURL
argument_list|()
argument_list|,
name|SVNRevision
operator|.
name|create
argument_list|(
name|entry
operator|.
name|getCopyFromRevision
argument_list|()
argument_list|)
argument_list|,
name|repositoryLock
argument_list|,
name|localLock
argument_list|,
name|entry
operator|.
name|asMap
argument_list|()
argument_list|,
name|entry
operator|.
name|getChangelistName
argument_list|()
argument_list|,
name|wcFormatNumber
argument_list|,
name|treeConflict
argument_list|)
decl_stmt|;
name|status
operator|.
name|setEntry
argument_list|(
name|entry
argument_list|)
expr_stmt|;
return|return
name|status
return|;
block|}
specifier|public
specifier|static
name|SVNLock
name|getLock
parameter_list|(
name|Map
name|repositoryLocks
parameter_list|,
name|SVNURL
name|url
parameter_list|,
name|SVNURL
name|reposRoot
parameter_list|)
block|{
comment|// get decoded path
if|if
condition|(
name|reposRoot
operator|==
literal|null
operator|||
name|repositoryLocks
operator|==
literal|null
operator|||
name|repositoryLocks
operator|.
name|isEmpty
argument_list|()
operator|||
name|url
operator|==
literal|null
condition|)
block|{
return|return
literal|null
return|;
block|}
name|String
name|urlString
init|=
name|url
operator|.
name|getPath
argument_list|()
decl_stmt|;
name|String
name|root
init|=
name|reposRoot
operator|.
name|getPath
argument_list|()
decl_stmt|;
name|String
name|path
decl_stmt|;
if|if
condition|(
name|urlString
operator|.
name|equals
argument_list|(
name|root
argument_list|)
condition|)
block|{
name|path
operator|=
literal|"/"
expr_stmt|;
block|}
else|else
block|{
name|path
operator|=
name|urlString
operator|.
name|substring
argument_list|(
name|root
operator|.
name|length
argument_list|()
argument_list|)
expr_stmt|;
block|}
return|return
operator|(
name|SVNLock
operator|)
name|repositoryLocks
operator|.
name|get
argument_list|(
name|path
argument_list|)
return|;
block|}
block|}
end_class

end_unit

